class C{  public boolean removeUpdate(final Password password) throws IOException, ServletException {  if (!singelton.can(CFMLEngine.CAN_UPDATE,password))   throw new IOException("access denied to update CFMLEngine");  return removeUpdate();}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public void delete(int key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    removeAt(i);  }}  }
class C{  public static String removeConsecutiveDuplicates(String s){  String previous="??";  StringBuffer result=new StringBuffer();  for (int i=0; i < s.length(); i++) {    String c=s.charAt(i) + "";    if (!previous.equalsIgnoreCase(c)) {      result.append(c);    }    previous=c;  }  return result.toString();}  }
class C{  public void readData(DataInput din) throws IOException {  din.readShort();  count=din.readUnsignedShort();  registers=new InputRegister[count];  for (int i=0; i < count; i++) {    registers[i]=new SimpleInputRegister(din.readShort());  }}  }
class C{  public static void main(String[] bootstrapArguments) throws Exception {  List<String> serverArguments=new ArrayList<String>(bootstrapArguments.length);  boolean logging=true;  for (  String argument : bootstrapArguments) {    if (argument.equals("-nologging")) {      logging=false;    } else {      serverArguments.add(argument);    }  }  String warFilePath=new File(Main.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getAbsolutePath();  File homeDirectory=getHomeDirectory();  File webAppDirectory=getWebAppDirectory(homeDirectory);  File warDirectory=getWarDirectory(webAppDirectory);  File webServerDirectory=getServerDirectory(warDirectory);  warDirectory.mkdirs();  if (checkUnpack(webAppDirectory,webServerDirectory,warFilePath)) {    deleteDirectory(webAppDirectory);    unpack(warFilePath,warDirectory);    updateLastModified(webAppDirectory,warFilePath);  }  System.setProperty("tjws.webappdir",webAppDirectory.getAbsolutePath());  System.setProperty("tjws.wardeploy.as-root","daemon");  serverArguments.add("-d");  serverArguments.add(homeDirectory.getAbsolutePath());  serverArguments.add("-nohup");  if (!serverArguments.contains("-p")) {    serverArguments.add("-p");    serverArguments.add("18000");  }  if (!logging) {    serverArguments.add("-out");    serverArguments.add("Acme.Utils$DummyPrintStream");    serverArguments.add("-err");    serverArguments.add("Acme.Utils$DummyPrintStream");  }  if (System.getProperty("cargo.home") == null) {    System.setProperty("cargo.home",homeDirectory.getAbsolutePath());  }  try {    List<URL> classpathURLs=new ArrayList<URL>();    classpathURLs.add(warDirectory.toURI().toURL());    if (!webServerDirectory.isDirectory()) {      throw new FileNotFoundException("Directory " + webServerDirectory + " doesn't exist");    }    for (    File file : webServerDirectory.listFiles()) {      if (file.getName().endsWith("jar")) {        classpathURLs.add(file.toURI().toURL());      }    }    URLClassLoader serverClassloader=new URLClassLoader(classpathURLs.toArray(new URL[0]),Main.class.getClassLoader());    serverClassloader.loadClass("rogatkin.web.WarRoller");    Class<?> mainClass=serverClassloader.loadClass("Acme.Serve.Main");    Method main=mainClass.getMethod("main",new Class[]{new String[0].getClass()});    main.invoke(null,new Object[]{serverArguments.toArray(new String[0])});  } catch (  UnsupportedClassVersionError e) {    LOGGER.println("Cargo Daemon requires Java 6 or greater in order to run in standalone mode.");    LOGGER.println("Read more on: https://codehaus-cargo.github.io/cargo/Cargo+Daemon.html");  }catch (  NullPointerException e) {    LOGGER.println("An internal error (NullPointerException) occured when starting the " + "CARGO Daemon server. Error details:");    for (    StackTraceElement ste : e.getStackTrace()) {      LOGGER.println("\t" + ste.toString());    }  }catch (  Throwable t) {    LOGGER.println("Failed starting the CARGO Daemon server: " + t.toString());  }}  }
class C{  public int connectAndRead(JMXServiceURL url,Object[] useCredentials,boolean expectConnectOk,boolean expectReadOk) throws IOException {  int errorCount=0;  for (int i=0; i < useCredentials.length; i++) {    final Map m=new HashMap();    final String[] credentials=(String[])useCredentials[i];    final String crinfo;    if (credentials != null) {      crinfo="{" + credentials[0] + ", "+ credentials[1]+ "}";      m.put(PropertyNames.CREDENTIALS,credentials);    } else {      crinfo="no credentials";    }    log.trace("testCommunication","using credentials: " + crinfo);    final JMXConnector c;    try {      c=JMXConnectorFactory.connect(url,m);    } catch (    IOException x) {      if (expectConnectOk) {        final String err="Connection failed for " + crinfo + ": "+ x;        System.out.println(err);        log.trace("testCommunication",err);        log.debug("testCommunication",x);        errorCount++;        continue;      } else {        System.out.println("Connection failed as expected for " + crinfo + ": "+ x);        continue;      }    }catch (    RuntimeException x) {      if (expectConnectOk) {        final String err="Connection failed for " + crinfo + ": "+ x;        System.out.println(err);        log.trace("testCommunication",err);        log.debug("testCommunication",x);        errorCount++;        continue;      } else {        System.out.println("Connection failed as expected for " + crinfo + ": "+ x);        continue;      }    }    try {      MBeanServerConnection conn=c.getMBeanServerConnection();      if (log.isDebugOn()) {        log.debug("testCommunication","Connection is:" + conn);        log.debug("testCommunication","Server domain is: " + conn.getDefaultDomain());      }      final ObjectName pattern=new ObjectName("java.lang:type=Memory,*");      final int count=listMBeans(conn,pattern,null);      if (count == 0)       throw new Exception("Expected at least one matching " + "MBean for " + pattern);      if (expectReadOk) {        System.out.println("Communication succeeded " + "as expected for " + crinfo + ": found "+ count+ ((count < 2) ? "MBean" : "MBeans"));      } else {        final String err="Expected failure didn't occur for " + crinfo;        System.out.println(err);        errorCount++;      }    } catch (    IOException x) {      if (expectReadOk) {        final String err="Communication failed with " + crinfo + ": "+ x;        System.out.println(err);        log.trace("testCommunication",err);        log.debug("testCommunication",x);        errorCount++;        continue;      } else {        System.out.println("Communication failed as expected for " + crinfo + ": "+ x);        continue;      }    }catch (    RuntimeException x) {      if (expectReadOk) {        final String err="Communication failed with " + crinfo + ": "+ x;        System.out.println(err);        log.trace("testCommunication",err);        log.debug("testCommunication",x);        errorCount++;        continue;      } else {        System.out.println("Communication failed as expected for " + crinfo + ": "+ x);      }    }catch (    Exception x) {      final String err="Failed to read MBeans with " + crinfo + ": "+ x;      System.out.println(err);      log.trace("testCommunication",err);      log.debug("testCommunication",x);      errorCount++;      continue;    } finally {      c.close();    }  }  return errorCount;}  }
class C{  public static int monthFromDateValue(long x){  return (int)(x >>> SHIFT_MONTH) & 15;}  }
class C{  public JSONWriter array() throws JSONException {  if (this.mode == 'i' || this.mode == 'o' || this.mode == 'a') {    this.push(null);    this.append("[");    this.comma=false;    return this;  }  throw new JSONException("Misplaced array.");}  }
class C{  @Uninterruptible @Override public void unwindStackFrame(CompiledMethod compiledMethod,AbstractRegisters registers){  Address fp=registers.getInnermostFramePointer();  registers.getGPRs().set(GPR.EDI.value(),fp.plus(JNICompiler.EDI_SAVE_OFFSET).loadWord());  registers.getGPRs().set(GPR.EBX.value(),fp.plus(JNICompiler.EBX_SAVE_OFFSET).loadWord());  registers.getGPRs().set(GPR.EBP.value(),fp.plus(JNICompiler.EBP_SAVE_OFFSET).loadWord());  registers.unwindStackFrame();}  }
class C{  @Override public void dateChanged(DateChangeEvent dateChangeEvent){  reportDateOrTimeChange(dateChangeEvent,null);}  }
class C{  public void reset() throws IOException {  input.reset();  physicalCardsRead=markedPhysicalCardsRead;}  }
class C{  public synchronized boolean removeEdge(Edge edge){  List<Edge> edgeList1=edgeLists.get(edge.getNode1());  List<Edge> edgeList2=edgeLists.get(edge.getNode2());  edgeList1=new ArrayList<>(edgeList1);  edgeList2=new ArrayList<>(edgeList2);  edgesSet.remove(edge);  edgeList1.remove(edge);  edgeList2.remove(edge);  highlightedEdges.remove(edge);  stuffRemovedSinceLastTripleAccess=true;  edgeLists.put(edge.getNode1(),edgeList1);  edgeLists.put(edge.getNode2(),edgeList2);  getPcs().firePropertyChange("edgeRemoved",edge,null);  return true;}  }
class C{  public void unsetConfigItemCode(){  this.configItemCode=null;}  }
class C{  @Override public String type(){  return type;}  }
class C{  @Override protected void installDefaults(){  super.installDefaults();  tabAreaInsets=new Insets(0,0,0,0);  selectedTabPadInsets=new Insets(0,0,0,0);  contentBorderInsets=new Insets(1,0,0,0);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case RegularExpressionPackage.SEQUENCE__ELEMENTS:    return getElements();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private List<Set<GraphChange>> findChanges(Map<Collection<Node>,List<PossibleDConnectingPath>> paths){  List<Set<GraphChange>> pagChanges=new ArrayList<>();  Set<Map.Entry<Collection<Node>,List<PossibleDConnectingPath>>> entries=paths.entrySet();  for (  Map.Entry<Collection<Node>,List<PossibleDConnectingPath>> entry : entries) {    Collection<Node> conditions=entry.getKey();    List<PossibleDConnectingPath> dConnecting=entry.getValue();    for (    PossibleDConnectingPath possible : dConnecting) {      List<Node> possPath=possible.getPath();      Set<GraphChange> pathChanges=new HashSet<>(2 * possPath.size());      List<Node> outsidePath=new ArrayList<>(conditions.size());      for (      Node condition : conditions) {        if (!possPath.contains(condition))         outsidePath.add(condition);      }      for (int i=0; i < possPath.size() - 1; i++) {        Node current=possPath.get(i);        Node next=possPath.get(i + 1);        GraphChange gc;        gc=new GraphChange();        gc.addRemove(possible.getPag().getEdge(current,next));        pathChanges.add(gc);        if (conditions.contains(current) && i > 0) {          gc=new GraphChange();          Triple nonColider=new Triple(possPath.get(i - 1),current,next);          gc.addNonCollider(nonColider);          pathChanges.add(gc);        }        if ((!conditions.contains(current)) && i > 0) {          Triple colider=new Triple(possPath.get(i - 1),current,next);          if (possible.getPag().isUnderlineTriple(possPath.get(i - 1),current,next))           continue;          Edge edge1=possible.getPag().getEdge(colider.getX(),colider.getY());          Edge edge2=possible.getPag().getEdge(colider.getZ(),colider.getY());          if (edge1.getNode1().equals(colider.getY())) {            if (edge1.getEndpoint1().equals(Endpoint.TAIL)) {              continue;            }          } else           if (edge1.getNode2().equals(colider.getY())) {            if (edge1.getEndpoint2().equals(Endpoint.TAIL)) {              continue;            }          }          if (edge2.getNode1().equals(colider.getY())) {            if (edge2.getEndpoint1().equals(Endpoint.TAIL)) {              continue;            }          } else           if (edge2.getNode2().equals(colider.getY())) {            if (edge2.getEndpoint2().equals(Endpoint.TAIL)) {              continue;            }          }          if (outsidePath.size() == 0) {            gc=new GraphChange();            gc.addCollider(colider);            pathChanges.add(gc);            continue;          }          for (          Node outside : outsidePath) {            List<PossibleDConnectingPath> decendantPaths=new ArrayList<>();            decendantPaths=PossibleDConnectingPath.findDConnectingPaths(possible.getPag(),current,outside,new ArrayList<Node>());            if (decendantPaths.isEmpty()) {              gc=new GraphChange();              gc.addCollider(colider);              pathChanges.add(gc);              continue;            }            for (            PossibleDConnectingPath decendantPDCPath : decendantPaths) {              List<Node> decendantPath=decendantPDCPath.getPath();              boolean impliesDecendant=true;              Set<GraphChange> colideChanges=new HashSet<>();              for (int j=0; j < decendantPath.size() - 1; j++) {                Node from=decendantPath.get(j);                Node to=decendantPath.get(j + 1);                Edge currentEdge=possible.getPag().getEdge(from,to);                if (currentEdge.getEndpoint1().equals(Endpoint.ARROW)) {                  impliesDecendant=false;                  break;                }                gc=new GraphChange();                gc.addCollider(colider);                gc.addRemove(currentEdge);                colideChanges.add(gc);                gc=new GraphChange();                gc.addCollider(colider);                gc.addOrient(to,from);                colideChanges.add(gc);              }              if (impliesDecendant)               pathChanges.addAll(colideChanges);            }          }        }      }      pagChanges.add(pathChanges);    }  }  return pagChanges;}  }
class C{  protected void parseExport(InStream in) throws IOException {  int count=in.readUI16();  String[] exportNames=new String[count];  int[] exportIds=new int[count];  for (int i=0; i < count; i++) {    exportIds[i]=in.readUI16();    exportNames[i]=in.readString();  }  tagtypes.tagExport(exportNames,exportIds);}  }
class C{  public void crashAlert(Stage stage,String crashMessage){  messageLabel.setText("Unfortunately, we screwed up and the app crashed. Sorry about that!");  detailsLabel.setText(crashMessage);  cancelButton.setVisible(false);  actionButton.setVisible(false);  okButton.setOnAction(null);}  }
class C{  @Inline(value=Inline.When.ArgumentsAreConstant,arguments={1}) private static void checkWriteAccess(Object obj,RVMField field,Field jlrField,RVMClass accessingClass) throws IllegalAccessException, IllegalArgumentException, ExceptionInInitializerError {  RVMClass declaringClass=field.getDeclaringClass();  if (!field.isStatic()) {    if (obj == null) {      throwNewNullPointerException();    }    RVMType objType=ObjectModel.getObjectType(obj);    if (objType != declaringClass && !RuntimeEntrypoints.isAssignableWith(declaringClass,objType)) {      throwNewIllegalArgumentException();    }  }  if (!field.isPublic() && !jlrField.isAccessible()) {    checkAccess(field,accessingClass);  }  if (field.isFinal() && (!jlrField.isAccessible() || field.isStatic()))   throwNewIllegalAccessException();  if (field.isStatic() && !declaringClass.isInitialized()) {    runClassInitializer(declaringClass);  }}  }
class C{  public static boolean isNumericSpace(String str){  if (str == null) {    return false;  }  int sz=str.length();  for (int i=0; i < sz; i++) {    if ((Character.isDigit(str.charAt(i)) == false) && (str.charAt(i) != ' ')) {      return false;    }  }  return true;}  }
class C{  public byte[] type1(){  Writer p=new Writer(1,32);  int flags=0x8207;  if (v != Version.NTLM) {    flags|=0x80000;  }  p.writeInt(12,flags);  debug("NTLM Client: Type 1 created\n");  debug(p.getBytes());  return p.getBytes();}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getActionCommand().equals(ConfirmPanel.A_OK)) {    dispose();    m_wasCancelled=false;  } else   if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL)) {    dispose();    m_M_AttributeSetInstance_ID=-1;    m_M_AttributeSetInstanceName=null;    m_wasCancelled=true;  } else   if (e.getSource() == showAll) {    refresh();  }}  }
class C{  public PtNotice saveNotice(final String applicationNumber,final String noticeNo,final String noticeType,final BasicProperty basicProperty,final InputStream fileStream){  final PtNotice ptNotice=new PtNotice();  final Module module=moduleDao.getModuleByName(PTMODULENAME);  ptNotice.setModuleId(module.getId());  ptNotice.setNoticeDate(new Date());  ptNotice.setNoticeNo(noticeNo);  ptNotice.setNoticeType(noticeType);  ptNotice.setUserId(ApplicationThreadLocals.getUserId());  ptNotice.setBasicProperty(basicProperty);  ptNotice.setApplicationNumber(applicationNumber);  final String fileName=ptNotice.getNoticeNo() + ".pdf";  final FileStoreMapper fileStore=fileStoreService.store(fileStream,fileName,"application/pdf",FILESTORE_MODULE_NAME);  ptNotice.setFileStore(fileStore);  basicProperty.addNotice(ptNotice);  basicPropertyService.update(basicProperty);  getSession().flush();  return ptNotice;}  }
class C{  public Float evaluate(float fraction,Number startValue,Number endValue){  float startFloat=startValue.floatValue();  return startFloat + fraction * (endValue.floatValue() - startFloat);}  }
class C{  public static void printUsage(final PrintStream printStream,final boolean printHidden,CommandLookup info){  printStream.print(getUsage(printHidden,info));}  }
class C{  static public PVector random2D(PVector target,PApplet parent){  if (parent == null)   return fromAngle((float)(Math.random() * Math.PI * 2),target); else   return fromAngle(parent.random(PConstants.TWO_PI),target);}  }
class C{  public void handle(MessageHandler handler) throws GondolaException, InterruptedException {switch (type) {case TYPE_APPEND_ENTRY_REQ:    boolean cont=handler.appendEntryRequest(this,fromMemberId,term,prevRid.term,prevRid.index,commitIndex,isHeartbeat,entryTerm,buffer,bufferOffset,commandSize,size == overhead[TYPE_APPEND_ENTRY_REQ] + commandSize);  if (!cont) {    break;  }int pli=prevRid.index;int bo=bufferOffset;int cs=commandSize;int s=overhead[TYPE_APPEND_ENTRY_REQ] + commandSize;int nc=commandSize > 0 ? 1 : 0;while (s < size) {bo+=cs;cs=(0x0ff & buffer[bo]) << 8 | (0x0ff & buffer[bo + 1]);bo+=2;pli+=1;if (messageTracing) {tracingInfo=String.format("AE(cterm=%d pterm=%d eterm=%d index=%d ci=%d size=%d) batch(%d)",term,prevRid.term,entryTerm,pli + 1,commitIndex,cs,nc);}boolean lastCommand=size == s + cs + 2;cont=handler.appendEntryRequest(this,fromMemberId,term,prevRid.term,pli,commitIndex,isHeartbeat,entryTerm,buffer,bo,cs,lastCommand);if (!cont) {break;}nc++;s+=cs + 2;}break;case TYPE_APPEND_ENTRY_REP:handler.appendEntryReply(this,fromMemberId,term,mnIndex,success);break;case TYPE_REQUEST_VOTE_REQ:handler.requestVoteRequest(this,fromMemberId,term,isPrevote,prevRid);break;case TYPE_REQUEST_VOTE_REP:handler.requestVoteReply(this,fromMemberId,term,isPrevote,voteGranted);break;}}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  private void cmd_zoom(){  int M_Lot_ID=0;  ListItem pp=fieldLot.getSelectedItem();  if (pp != null)   M_Lot_ID=(Integer)pp.getValue();  MQuery zoomQuery=new MQuery("M_Lot");  zoomQuery.addRestriction("M_Lot_ID",MQuery.EQUAL,M_Lot_ID);  log.info(zoomQuery.toString());  int AD_Window_ID=MWindow.getWindow_ID("Lot");  AEnv.zoom(AD_Window_ID,zoomQuery);}  }
class C{  public BatchFraction defaultJobRepository(final String name,final DatasourcesFraction datasource){  jdbcJobRepository(name,datasource);  return defaultJobRepository(name);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:05.824 -0500",hash_original_method="BC91D466505972771C623F66D301FB6D",hash_generated_method="7C493D9A024EBA9C3DD4B1E2D6674691") @Override public StringBuffer format(double value,StringBuffer buffer,FieldPosition field){  for (int i=choiceLimits.length - 1; i >= 0; i--) {    if (choiceLimits[i] <= value) {      return buffer.append(choiceFormats[i]);    }  }  return choiceFormats.length == 0 ? buffer : buffer.append(choiceFormats[0]);}  }
class C{  public Advice(String source,List<AdviceAttribute> attributes){  ValidateUtil.validateNotNull(source,"Advice source");  ValidateUtil.validateNotEmpty(attributes,"Advice attributes");  _source=source;  _attributes=Collections.unmodifiableList(attributes);}  }
class C{  static RightThreadedBinaryTree<Integer> buildRightLinear(int n){  RightThreadedBinaryTree<Integer> bt=new RightThreadedBinaryTree<Integer>();  for (int i=0; i < n; i++) {    bt.insert(i);  }  return bt;}  }
class C{  public void addExtension(Extension pExtension){  fExtensions.add(pExtension);}  }
class C{  public void open(final File file) throws IOException {  file.delete();  raf=new RandomAccessFile(file,"rw");}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public IPreparedBooleanQuery prepareBooleanQuery(final String query,final UUID uuid) throws Exception {  return new BooleanQuery(mgr.newQueryConnectOptions(sparqlEndpointURL,uuid,tx),uuid,query);}  }
class C{  public ServerProxyHttpError(){  requestFileName="getstate.query";}  }
class C{  public boolean isInNative(){  return inNative;}  }
class C{  public LinkServer(Socket s){  try {    link=new Link(s);  } catch (  java.io.IOException ioe) {    System.err.println("LinkServer: IOException while creating child server:");    System.err.println(ioe);  }}  }
class C{  @Override public void writeFromAttributeIntoRow(Object attribute,AbstractRecord row,AbstractSession session){  writeToRowFromAggregate(row,null,attribute,session,WriteType.UNDEFINED);}  }
class C{  public final TextBuilder insert(int index,java.lang.CharSequence csq){  if ((index < 0) || (index > _length))   throw new IndexOutOfBoundsException("index: " + index);  final int shift=csq.length();  _length+=shift;  while (_length >= _capacity) {    increaseCapacity();  }  for (int i=_length - shift; --i >= index; ) {    this.setCharAt(i + shift,this.charAt(i));  }  for (int i=csq.length(); --i >= 0; ) {    this.setCharAt(index + i,csq.charAt(i));  }  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(Java2DSageRenderer.hasOSDRenderer(stack.getUIMgrSafe()));}  }
class C{  public JTableHeader(TableColumnModel cm){  super();  if (cm == null)   cm=createDefaultColumnModel();  setColumnModel(cm);  initializeLocalVars();  updateUI();}  }
class C{  @Override protected QueryTaskResult doInBackground(Context... contexts){  final Context context=contexts[0];  FilmstripItemList l=new FilmstripItemList();  List<PhotoItem> photoData=mPhotoItemFactory.queryAll();  List<VideoItem> videoData=mVideoItemFactory.queryAll();  long lastPhotoId=FilmstripItemBase.QUERY_ALL_MEDIA_ID;  if (photoData != null && !photoData.isEmpty()) {    FilmstripItemData firstPhotoData=photoData.get(0).getData();    if (firstPhotoData != null) {      lastPhotoId=firstPhotoData.getContentId();    }  }  if (photoData != null) {    Log.v(TAG,"retrieved photo metadata, number of items: " + photoData.size());    l.addAll(photoData);  }  if (videoData != null) {    Log.v(TAG,"retrieved video metadata, number of items: " + videoData.size());    l.addAll(videoData);  }  Log.v(TAG,"sorting video/photo metadata");  l.sort(new NewestFirstComparator(new Date()));  Log.v(TAG,"sorted video/photo metadata");  for (int i=0; i < MAX_METADATA && i < l.size(); i++) {    FilmstripItem data=l.get(i);    MetadataLoader.loadMetadata(context,data);  }  return new QueryTaskResult(l,lastPhotoId);}  }
class C{  private void parseAttributes(TypedArray a){  DisplayMetrics metrics=getContext().getResources().getDisplayMetrics();  barWidth=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,barWidth,metrics);  rimWidth=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,rimWidth,metrics);  circleRadius=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,circleRadius,metrics);  circleRadius=(int)a.getDimension(R.styleable.ProgressWheel_circleRadius,circleRadius);  fillRadius=a.getBoolean(R.styleable.ProgressWheel_fillRadius,false);  barWidth=(int)a.getDimension(R.styleable.ProgressWheel_barWidth,barWidth);  rimWidth=(int)a.getDimension(R.styleable.ProgressWheel_rimWidth,rimWidth);  float baseSpinSpeed=a.getFloat(R.styleable.ProgressWheel_spinSpeed,spinSpeed / 360.0f);  spinSpeed=baseSpinSpeed * 360;  barSpinCycleTime=a.getInt(R.styleable.ProgressWheel_barSpinCycleTime,(int)barSpinCycleTime);  barColor=a.getColor(R.styleable.ProgressWheel_barColor,barColor);  rimColor=a.getColor(R.styleable.ProgressWheel_rimColor,rimColor);  linearProgress=a.getBoolean(R.styleable.ProgressWheel_linearProgress,false);  if (a.getBoolean(R.styleable.ProgressWheel_progressIndeterminate,false)) {    spin();  }  a.recycle();}  }
class C{  private int checkExpiry(){  if (GTG.IS_PREMIUM == -42)   return Integer.MAX_VALUE;  int days=GTG.calcDaysBeforeTrialExpired();  if (days == 0) {    Requirement.NOT_TRIAL_EXPIRED.reset();    GTG.alert(GTG.GTGEvent.TRIAL_PERIOD_EXPIRED);    finish();    startInternalActivity(new Intent(this,TrialExpiredActivity.class));  }  return days;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.EXTRA_CODE___EXTRA_CODE_1:    setExtraCode_1(EXTRA_CODE_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public double determinant(){  return a * d - b * c;}  }
class C{  public void processingInstruction(String target,String data) throws org.xml.sax.SAXException {  if (target.equals("xml-stylesheet")) {    String href=null;    String type=null;    String title=null;    String media=null;    String charset=null;    boolean alternate=false;    StringTokenizer tokenizer=new StringTokenizer(data," \t=\n",true);    boolean lookedAhead=false;    Source source=null;    String token="";    while (tokenizer.hasMoreTokens()) {      if (!lookedAhead)       token=tokenizer.nextToken(); else       lookedAhead=false;      if (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))       continue;      String name=token;      if (name.equals("type")) {        token=tokenizer.nextToken();        while (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))         token=tokenizer.nextToken();        type=token.substring(1,token.length() - 1);      } else       if (name.equals("href")) {        token=tokenizer.nextToken();        while (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))         token=tokenizer.nextToken();        href=token;        if (tokenizer.hasMoreTokens()) {          token=tokenizer.nextToken();          while (token.equals("=") && tokenizer.hasMoreTokens()) {            href=href + token + tokenizer.nextToken();            if (tokenizer.hasMoreTokens()) {              token=tokenizer.nextToken();              lookedAhead=true;            } else {              break;            }          }        }        href=href.substring(1,href.length() - 1);        try {          if (m_uriResolver != null) {            source=m_uriResolver.resolve(href,m_baseID);          } else {            href=SystemIDResolver.getAbsoluteURI(href,m_baseID);            source=new SAXSource(new InputSource(href));          }        } catch (        TransformerException te) {          throw new org.xml.sax.SAXException(te);        }      } else       if (name.equals("title")) {        token=tokenizer.nextToken();        while (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))         token=tokenizer.nextToken();        title=token.substring(1,token.length() - 1);      } else       if (name.equals("media")) {        token=tokenizer.nextToken();        while (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))         token=tokenizer.nextToken();        media=token.substring(1,token.length() - 1);      } else       if (name.equals("charset")) {        token=tokenizer.nextToken();        while (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))         token=tokenizer.nextToken();        charset=token.substring(1,token.length() - 1);      } else       if (name.equals("alternate")) {        token=tokenizer.nextToken();        while (tokenizer.hasMoreTokens() && (token.equals(" ") || token.equals("\t") || token.equals("=")))         token=tokenizer.nextToken();        alternate=token.substring(1,token.length() - 1).equals("yes");      }    }    if ((null != type) && (type.equals("text/xsl") || type.equals("text/xml") || type.equals("application/xml+xslt")) && (null != href)) {      if (null != m_media) {        if (null != media) {          if (!media.equals(m_media))           return;        } else         return;      }      if (null != m_charset) {        if (null != charset) {          if (!charset.equals(m_charset))           return;        } else         return;      }      if (null != m_title) {        if (null != title) {          if (!title.equals(m_title))           return;        } else         return;      }      m_stylesheets.addElement(source);    }  }}  }
class C{  public static SpawnEgg1_10 fromItemStack(ItemStack item){  if (item == null)   throw new IllegalArgumentException("item cannot be null");  if (item.getType() != Material.MONSTER_EGG)   throw new IllegalArgumentException("item is not a monster egg");  net.minecraft.server.v1_10_R1.ItemStack stack=CraftItemStack.asNMSCopy(item);  NBTTagCompound tagCompound=stack.getTag();  if (tagCompound != null) {    @SuppressWarnings("deprecation") EntityType type=EntityType.fromName(tagCompound.getCompound("EntityTag").getString("id"));    if (type != null) {      return new SpawnEgg1_10(type);    } else {      return null;    }  } else {    return null;  }}  }
class C{  private boolean buildChain(X509Certificate certToVerify,Vector<Certificate> chain,Hashtable<Principal,Vector<Certificate>> certs){  Principal issuer=certToVerify.getIssuerDN();  if (isSelfSigned(certToVerify)) {    chain.addElement(certToVerify);    return true;  }  Vector<Certificate> vec=certs.get(issuer);  if (vec == null) {    return false;  }  for (Enumeration<Certificate> issuerCerts=vec.elements(); issuerCerts.hasMoreElements(); ) {    X509Certificate issuerCert=(X509Certificate)issuerCerts.nextElement();    PublicKey issuerPubKey=issuerCert.getPublicKey();    try {      certToVerify.verify(issuerPubKey);    } catch (    Exception e) {      continue;    }    if (buildChain(issuerCert,chain,certs)) {      chain.addElement(certToVerify);      return true;    }  }  return false;}  }
class C{  public boolean isNonSingular(){  for (int j=0; j < n; j++) {    if (LU.$[LU.addr.op(j,j)] == 0)     return false;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.807 -0500",hash_original_method="5E5E1971677BE94A53109D4D5BC08EE3",hash_generated_method="605D7749020D76CEAE070E02604B491C") public boolean selectArticle(ArticlePointer pointer) throws IOException {  return selectArticle(null,pointer);}  }
class C{  public void notifyListener(TableModelEvent e){  Iterator<TableModelListener> iter;  TableModelListener l;  if (!isNotificationEnabled()) {    return;  }  iter=m_Listeners.iterator();  while (iter.hasNext()) {    l=iter.next();    l.tableChanged(e);  }}  }
class C{  public NoFinalizer(){  super(Options.set,"No Finalizer","Should finalization be disabled?",false);}  }
class C{  public static boolean decodeFileToFile(final String infile,final String outfile){  boolean success=false;  java.io.InputStream in=null;  java.io.OutputStream out=null;  try {    in=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)),Base64.DECODE);    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    byte[] buffer=new byte[65536];    int read=-1;    while ((read=in.read(buffer)) >= 0) {      out.write(buffer,0,read);    }    success=true;  } catch (  java.io.IOException exc) {    exc.printStackTrace();  } finally {    try {      in.close();    } catch (    Exception exc) {    }    try {      out.close();    } catch (    Exception exc) {    }  }  return success;}  }
class C{  @Deprecated public void writeXML(Writer out,String indent,boolean hideDefault) throws IOException {  writeXML(out,hideDefault);}  }
class C{  @RequestMapping(value="/account/change_password",method=RequestMethod.POST,produces=MediaType.TEXT_PLAIN_VALUE) @Timed public ResponseEntity<?> changePassword(@RequestBody String password){  if (!checkPasswordLength(password)) {    return new ResponseEntity<>("Incorrect password",HttpStatus.BAD_REQUEST);  }  userService.changePassword(password);  return new ResponseEntity<>(HttpStatus.OK);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:55.719 -0500",hash_original_method="35294A0559DAA88DB9CC9AAC3B460FD6",hash_generated_method="7030EA3ABA20521440FB5E77762084C9") public static String formatDialString(String phoneNumber){  if (phoneNumber == null) {    return null;  }  int length=phoneNumber.length();  StringBuilder ret=new StringBuilder();  char c;  int currIndex=0;  while (currIndex < length) {    c=phoneNumber.charAt(currIndex);    if (isPause(c) || isWait(c)) {      if (currIndex < length - 1) {        int nextIndex=findNextPCharOrNonPOrNonWCharIndex(phoneNumber,currIndex);        if (nextIndex < length) {          char pC=findPOrWCharToAppend(phoneNumber,currIndex,nextIndex);          ret.append(pC);          if (nextIndex > (currIndex + 1)) {            currIndex=nextIndex - 1;          }        } else         if (nextIndex == length) {          currIndex=length - 1;        }      }    } else {      ret.append(c);    }    currIndex++;  }  return PhoneNumberUtils.cdmaCheckAndProcessPlusCode(ret.toString());}  }
class C{  public boolean exportChain(){  return exportChain;}  }
class C{  public BindingProperty createBindingProperty(){  BindingPropertyImpl bindingProperty=new BindingPropertyImpl();  return bindingProperty;}  }
class C{  public StringList(Object... items){  count=items.length;  data=new String[count];  int index=0;  for (  Object o : items) {    if (o != null) {      data[index]=o.toString();    }    index++;  }}  }
class C{  public void testRecoverAfterCompact(){  appendEntries(entriesPerSegment * 5);  for (long i=1; i <= entriesPerSegment * 5; i++) {    if (i % 3 == 0 || i % 3 == 1) {      log.release(i);    }  }  for (long i=1; i <= entriesPerSegment * 5; i++) {    if (i % 3 == 0 || i % 3 == 1) {      assertTrue(log.lastIndex() >= i);      assertTrue(log.contains(i));    }  }  log.commit(entriesPerSegment * 5).compactor().minorIndex(entriesPerSegment * 5).compact().join();  log.close();  try (Log log=createLog()){    assertEquals(log.length(),entriesPerSegment * 5);    for (long i=1; i <= entriesPerSegment * 5; i++) {      if (i % 3 == 0 || i % 3 == 1) {        assertTrue(log.lastIndex() >= i);        if (i <= entriesPerSegment * 4) {          assertFalse(log.contains(i));          assertNull(log.get(i));        }      }    }  } }  }
class C{  public static Object socketWriteBegin(){  return IoTraceHandler.socketWriteBegin();}  }
class C{  public void save(ObjectOutputStream oos) throws IOException {  oos.writeInt(MEMSIZE);  oos.writeInt(REGSIZE);  oos.writeObject(reg);  oos.writeObject(regInfo);  oos.writeObject(memory);  oos.writeObject(memInfo);  oos.writeObject(variables);  oos.writeObject(constants);  oos.writeBoolean(fCarry);  oos.writeBoolean(fOverflow);  oos.writeBoolean(fSign);  oos.writeBoolean(fZero);  oos.writeBoolean(fParity);  oos.writeBoolean(fAuxiliary);  oos.writeBoolean(fTrap);  oos.writeBoolean(fDirection);  oos.writeInt(nextReservableAddress);}  }
class C{  public static boolean searchIOSFile(String findMe,String filename){  Process p=null;  boolean ret=false;  try {    String[] cmdCat={"ssh","-p","2222","root@localhost","cat",filename};    p=Runtime.getRuntime().exec(cmdCat);    ret=(MobileUtil.monitorProcessOutput(p,findMe) != null);  } catch (  Exception e) {    e.printStackTrace();    ret=false;  }  return ret;}  }
class C{  public static <T>OrderBy orderBy(final Property<T> property,final OrderBy.Order order){  return new OrderBy(property(property),order);}  }
class C{  protected DestinationWrapper<Topic> lookupTopicFromJNDI(String uri) throws NamingException {  return new DestinationWrapper<Topic>(uri,(Topic)getInitialContext().lookup(uri));}  }
class C{  public void addFunction(String functionColumnName,char function){  m_functions.add(functionColumnName + DELIMITER + function);  if (!m_groups.contains(TOTAL))   m_groups.add(TOTAL);}  }
class C{  public void onEnable(){}  }
class C{  boolean addComplement(OwlClass c){  return complementaryClasses.add(c);}  }
class C{  @Override public int hashCode(){  int result=37;  result=19 * result + this.font.hashCode();  result=19 * result + this.markers.hashCode();  return result;}  }
class C{  @Override public void info(String format,Object argA,Object argB){  if (logger.isLoggable(Level.INFO)) {    FormattingTuple ft=MessageFormatter.format(format,argA,argB);    log(SELF,Level.INFO,ft.getMessage(),ft.getThrowable());  }}  }
class C{  protected static EngineImportService makeEngineImportService(ConfigurationInformation configSnapshot,AggregationFactoryFactory aggregationFactoryFactory){  ConfigurationEngineDefaults.Expression expression=configSnapshot.getEngineDefaults().getExpression();  EngineImportServiceImpl engineImportService=new EngineImportServiceImpl(expression.isExtendedAggregation(),expression.isUdfCache(),expression.isDuckTyping(),configSnapshot.getEngineDefaults().getLanguage().isSortUsingCollator(),configSnapshot.getEngineDefaults().getExpression().getMathContext(),configSnapshot.getEngineDefaults().getExpression().getTimeZone(),configSnapshot.getEngineDefaults().getExecution().getThreadingProfile(),aggregationFactoryFactory);  engineImportService.addMethodRefs(configSnapshot.getMethodInvocationReferences());  try {    for (    String importName : configSnapshot.getImports()) {      engineImportService.addImport(importName);    }    for (    String importName : configSnapshot.getAnnotationImports()) {      engineImportService.addAnnotationImport(importName);    }    for (    ConfigurationPlugInAggregationFunction config : configSnapshot.getPlugInAggregationFunctions()) {      engineImportService.addAggregation(config.getName(),config);    }    for (    ConfigurationPlugInAggregationMultiFunction config : configSnapshot.getPlugInAggregationMultiFunctions()) {      engineImportService.addAggregationMultiFunction(config);    }    for (    ConfigurationPlugInSingleRowFunction config : configSnapshot.getPlugInSingleRowFunctions()) {      engineImportService.addSingleRow(config.getName(),config.getFunctionClassName(),config.getFunctionMethodName(),config.getValueCache(),config.getFilterOptimizable(),config.isRethrowExceptions());    }  } catch (  EngineImportException ex) {    throw new ConfigurationException("Error configuring engine: " + ex.getMessage(),ex);  }  return engineImportService;}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener e){  getPropertyChangeSupport().removePropertyChangeListener(e);}  }
class C{  public GetContainerLogsParams withFollow(boolean follow){  this.follow=follow;  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isDottedUnderlineTriple(Node x,Node y,Node z){  return getGraph().isDottedUnderlineTriple(x,y,z);}  }
class C{  public static int calcRWLen(int lvl){  return (int)Math.ceil(Math.sqrt(lvl * 4 - 4) * Math.log(lvl + 10));}  }
class C{  public String obfuscatePath(String path,SecretKey key,boolean createivs) throws ObfuscationException {  logger.debug("ObfuscatePath: " + path);  String[] dirs={};  String newPath="";  if (!path.equals(File.separator)) {    String splitter=File.separator.toString();    if (os.isWindows()) {      splitter+=File.separator;    }    if (path.startsWith(File.separator)) {      dirs=path.substring(1).split(splitter);    } else {      dirs=path.split(splitter);    }    for (    String dir : dirs) {      newPath+=File.separator + obfuscate(dir,key,createivs);    }  } else {    logger.debug("ObfuscatePath-return: " + path);    return path;  }  logger.debug("ObfuscatePath-return: " + newPath);  return newPath;}  }
class C{  public boolean hasType(){  return getType() != null;}  }
class C{  protected boolean isHostOverUtilizedAfterContainerAllocation(PowerContainerHost host,ContainerVm vm,Container container){  boolean isHostOverUtilizedAfterAllocation=true;  if (vm.containerCreate(container)) {    isHostOverUtilizedAfterAllocation=isHostOverUtilized(host);    vm.containerDestroy(container);  }  return isHostOverUtilizedAfterAllocation;}  }
class C{  public static Hashtable<String,Object> createMarkerDescription(IDocument document,FindReplaceDocumentAdapter searchAdapter,String message,int severity,int[] coordinates) throws CoreException {  String attributeName;  Region errorRegion=null;  int attributeIndex=-1;  try {    IRegion lineRegion=document.getLineInformation(coordinates[0] - 1);    if (lineRegion != null) {      int errorLineOffset=lineRegion.getOffset();      IRegion commentRegion=searchAdapter.find(errorLineOffset,ModelWriter.COMMENT,false,false,false,false);      IRegion separatorRegion=searchAdapter.find(errorLineOffset,ModelWriter.SEP,true,false,false,false);      if (separatorRegion != null && commentRegion != null) {        IRegion attributeRegion=searchAdapter.find(commentRegion.getOffset(),ModelWriter.ATTRIBUTE + "[a-z]*[A-Z]*",true,false,false,true);        if (attributeRegion != null) {          attributeName=document.get(attributeRegion.getOffset(),attributeRegion.getLength()).substring(ModelWriter.ATTRIBUTE.length());          IRegion indexRegion=searchAdapter.find(attributeRegion.getOffset() + attributeRegion.getLength(),ModelWriter.INDEX + "[0-9]+",true,false,false,true);          if (indexRegion != null && indexRegion.getOffset() < separatorRegion.getOffset()) {            String indexString=document.get(indexRegion.getOffset(),indexRegion.getLength());            if (indexString != null && indexString.length() > 1) {              try {                attributeIndex=Integer.parseInt(indexString.substring(1));              } catch (              NumberFormatException e) {                throw new CoreException(new Status(IStatus.ERROR,TLCActivator.PLUGIN_ID,"Error during detection of the error position in MC.tla." + "Error parsing the attribute index. " + message,e));              }            }          } else {          }          IRegion firstBlockLine=document.getLineInformation(document.getLineOfOffset(commentRegion.getOffset()) + 1);          int beginBlockOffset=firstBlockLine.getOffset();          if (attributeName.equals(MODEL_PARAMETER_NEW_DEFINITIONS)) {          } else {            beginBlockOffset=beginBlockOffset + firstBlockLine.getLength() + 1;          }          if (coordinates[2] == 0) {            errorRegion=new Region(errorLineOffset + coordinates[1] - beginBlockOffset,1);          } else           if (coordinates[2] == coordinates[0]) {            int length=coordinates[3] - coordinates[1];            errorRegion=new Region(errorLineOffset + coordinates[1] - beginBlockOffset,(length == 0) ? 1 : length);          } else {            int summedLength=lineRegion.getLength() - coordinates[1];            for (int l=coordinates[0] + 1; l < coordinates[2]; l++) {              IRegion line=document.getLineInformation(l - 1);              summedLength=summedLength + line.getLength();            }            summedLength+=coordinates[3];            errorRegion=new Region(errorLineOffset + coordinates[1] - beginBlockOffset,summedLength);          }        } else {          throw new CoreException(new Status(IStatus.ERROR,TLCActivator.PLUGIN_ID,"Error during detection of the error position in MC.tla." + "Could not detect the attribute. " + message));        }      } else {        throw new CoreException(new Status(IStatus.ERROR,TLCActivator.PLUGIN_ID,"Error during detection of the error position in MC.tla." + "Could not detect definition block. " + message));      }    } else {      throw new CoreException(new Status(IStatus.ERROR,TLCActivator.PLUGIN_ID,"Error during detection of the error position in MC.tla." + "Could not data on specified location. " + message));    }  } catch (  BadLocationException e) {    throw new CoreException(new Status(IStatus.ERROR,TLCActivator.PLUGIN_ID,"Error during detection of the error position in MC.tla." + "Accessing MC.tla file failed. " + message,e));  }  message=getMessageWithoutMC(message,attributeName,attributeIndex);  Hashtable<String,Object> props=new Hashtable<String,Object>();  props.put(IMarker.SEVERITY,new Integer(severity));  props.put(IMarker.MESSAGE,message);  props.put(TLC_MODEL_ERROR_MARKER_ATTRIBUTE_NAME,attributeName);  props.put(TLC_MODEL_ERROR_MARKER_ATTRIBUTE_IDX,new Integer(attributeIndex));  props.put(IMarker.LOCATION,"");  props.put(IMarker.CHAR_START,new Integer(errorRegion.getOffset()));  props.put(IMarker.CHAR_END,new Integer(errorRegion.getOffset() + errorRegion.getLength()));  return props;}  }
class C{  public static double formatNSAsMSDouble(long ns){  if (ns >= 100000000L)   return (ns / 1000000L);  if (ns >= 10000000L)   return ((ns / 100000L)) / 10D;  if (ns >= 1000000L)   return ((ns / 10000L)) / 100D;  return ((ns / 1000L)) / 1000D;}  }
class C{  protected final long minMemory(){  return getUsage(eden,true).getUsed();}  }
class C{  public boolean isDomainSuffix(String extension){  return domains.containsKey(extension);}  }
class C{  public CompiledST defineTemplate(String name,String argsS,String template){  if (name.charAt(0) != '/')   name="/" + name;  String[] args=argsS.split(",");  List<FormalArgument> a=new ArrayList<FormalArgument>();  for (  String arg : args) {    a.add(new FormalArgument(arg));  }  return defineTemplate(name,new CommonToken(GroupParser.ID,name),a,template,null);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static LazySortedSetX<Integer> range(int start,int end){  return fromStreamS(ReactiveSeq.range(start,end));}  }
class C{  public DesktopPane(){  this.width=getOrigWidth();  this.height=getOrigHeight();}  }
class C{  public static void dropIndex(Connection conn,String schema,String table) throws SQLException {  init(conn);  PreparedStatement prep=conn.prepareStatement("SELECT ID FROM " + SCHEMA + ".INDEXES WHERE SCHEMA=? AND TABLE=?");  prep.setString(1,schema);  prep.setString(2,table);  ResultSet rs=prep.executeQuery();  if (!rs.next()) {    return;  }  int indexId=rs.getInt(1);  prep=conn.prepareStatement("DELETE FROM " + SCHEMA + ".INDEXES WHERE ID=?");  prep.setInt(1,indexId);  prep.execute();  createOrDropTrigger(conn,schema,table,false);  prep=conn.prepareStatement("DELETE FROM " + SCHEMA + ".ROWS WHERE INDEXID=? AND ROWNUM<10000");  while (true) {    prep.setInt(1,indexId);    int deleted=prep.executeUpdate();    if (deleted == 0) {      break;    }  }  prep=conn.prepareStatement("DELETE FROM " + SCHEMA + ".MAP M "+ "WHERE NOT EXISTS (SELECT * FROM "+ SCHEMA+ ".ROWS R WHERE R.ID=M.ROWID) AND ROWID<10000");  while (true) {    int deleted=prep.executeUpdate();    if (deleted == 0) {      break;    }  }}  }
class C{  @Override public synchronized void removeDataSourceListener(DataSourceListener dsl){  m_dataSourceListeners.remove(dsl);}  }
class C{  @Override public boolean supportsBatchUpdates(){  debugCodeCall("supportsBatchUpdates");  return true;}  }
class C{  public static boolean isTypeUnsupported(String str){  return isCPrimitiveType(str);}  }
class C{  protected void clearAll(){  clearColumnVisibilityActions();  getColumnControlPopup().removeAll();}  }
class C{  public void centerNextSearchHit(final boolean cycleBackwards,final boolean zoomToResult){  final String text=getText();  if ("".equals(text)) {    m_searcher.clearResults();    m_graph.updateGraphViews();    notifyListeners();    return;  }  searchFor(text,cycleBackwards,zoomToResult);}  }
class C{  void makeCall(int fromMemberId,int toMemberId) throws IOException {  outgoing(true,fromMemberId,toMemberId);}  }
class C{  public void layoutAfter(){}  }
class C{  protected void preInstantiate(Object name,Map attributes,Object value){  for (  Closure preInstantiateDelegate : getProxyBuilder().getPreInstantiateDelegates()) {    (preInstantiateDelegate).call(new Object[]{this,attributes,value});  }}  }
class C{  public static String calledPartyBCDToString(byte[] bytes,int offset,int length){  boolean prependPlus=false;  StringBuilder ret=new StringBuilder(1 + length * 2);  if (length < 2) {    return "";  }  if ((bytes[offset] & 0xf0) == (TOA_International & 0xf0)) {    prependPlus=true;  }  internalCalledPartyBCDFragmentToString(ret,bytes,offset + 1,length - 1);  if (prependPlus && ret.length() == 0) {    return "";  }  if (prependPlus) {    String retString=ret.toString();    Pattern p=Pattern.compile("(^[#*])(.*)([#*])(.*)(#)$");    Matcher m=p.matcher(retString);    if (m.matches()) {      if ("".equals(m.group(2))) {        ret=new StringBuilder();        ret.append(m.group(1));        ret.append(m.group(3));        ret.append(m.group(4));        ret.append(m.group(5));        ret.append("+");      } else {        ret=new StringBuilder();        ret.append(m.group(1));        ret.append(m.group(2));        ret.append(m.group(3));        ret.append("+");        ret.append(m.group(4));        ret.append(m.group(5));      }    } else {      p=Pattern.compile("(^[#*])(.*)([#*])(.*)");      m=p.matcher(retString);      if (m.matches()) {        ret=new StringBuilder();        ret.append(m.group(1));        ret.append(m.group(2));        ret.append(m.group(3));        ret.append("+");        ret.append(m.group(4));      } else {        ret=new StringBuilder();        ret.append('+');        ret.append(retString);      }    }  }  return ret.toString();}  }
class C{  public DocumentLoader(UserAgent userAgent){  this.userAgent=userAgent;  documentFactory=new SAXSVGDocumentFactory(userAgent.getXMLParserClassName(),true);  documentFactory.setValidating(userAgent.isXMLParserValidating());}  }
class C{  public static DataSet discreteSerializableInstance(){  List<Node> variables=new LinkedList<>();  variables.add(new DiscreteVariable("X",2));  DataSet dataSet=new ColtDataSet(2,variables);  dataSet.setInt(0,0,0);  dataSet.setInt(1,0,1);  return dataSet;}  }
class C{  public void progressUpdate(ProgressEvent evt){  System.out.println("update: received progressevent " + evt);  if (flag.nextSetBit(1) == -1)   flag.set(1);}  }
class C{  public Node appendChild(Node newChild){  if (newChild == null) {    throw new IllegalArgumentException("newChild == null!");  }  checkNode(newChild);  return insertBefore(newChild,null);}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(CallableStatementTest.class);}  }
class C{  public int read(final byte[] data){  init();  if (data != null) {    rawData=ByteBuffer.wrap(data);    rawData.rewind();    rawData.order(ByteOrder.LITTLE_ENDIAN);    readHeader();    if (!err()) {      readContents();      if (frameCount < 0) {        status=STATUS_FORMAT_ERROR;      }    }  } else {    status=STATUS_OPEN_ERROR;  }  return status;}  }
class C{  @Nonnull public Label addLabel(@Nonnull String name){  Label label=labels.get(name);  if (label != null) {    if (label.isPlaced()) {      throw new IllegalArgumentException("There is already a label with that name.");    } else {      currentLocation.getLabels().add(label);    }  } else {    label=currentLocation.addNewLabel();    labels.put(name,label);  }  return label;}  }
class C{  public Bindings add(String property,JTextArea textArea){  registerPropertyChangeListener(textArea);  return add(new JTextAreaBinding(property,textArea));}  }
class C{  private <Result,Body>Result sendRequestInternal(final IHttpRequest request,final Class<Result> resultClass,final Body serializable,final IProgressCallback<Result> progress) throws ClientException {  final int defaultBufferSize=4096;  final String contentLengthHeaderName="Content-Length";  final String binaryContentType="application/octet-stream";  final int httpClientErrorResponseCode=400;  final int httpNoBodyResponseCode=204;  final int httpAcceptedResponseCode=202;  final int httpSeeOtherResponseCode=303;  final int httpNotModified=304;  try {    if (mRequestInterceptor != null) {      mRequestInterceptor.intercept(request);    }    OutputStream out=null;    InputStream in=null;    boolean isBinaryStreamInput=false;    final URL requestUrl=request.getRequestUrl();    mLogger.logDebug("Starting to send request, URL " + requestUrl.toString());    final IConnection connection=mConnectionFactory.createFromRequest(request);    try {      mLogger.logDebug("Request Method " + request.getHttpMethod().toString());      connection.setFollowRedirects(!(isAsyncOperation(resultClass)));      final byte[] bytesToWrite;      if (serializable == null) {        bytesToWrite=null;      } else       if (serializable instanceof byte[]) {        mLogger.logDebug("Sending byte[] as request body");        bytesToWrite=(byte[])serializable;        connection.addRequestHeader(CONTENT_TYPE_HEADER_NAME,binaryContentType);        connection.setContentLength(bytesToWrite.length);      } else {        mLogger.logDebug("Sending " + serializable.getClass().getName() + " as request body");        final String serializeObject=mSerializer.serializeObject(serializable);        bytesToWrite=serializeObject.getBytes();        connection.addRequestHeader(CONTENT_TYPE_HEADER_NAME,JSON_CONTENT_TYPE);        connection.setContentLength(bytesToWrite.length);      }      if (bytesToWrite != null) {        out=connection.getOutputStream();        int writtenSoFar=0;        BufferedOutputStream bos=new BufferedOutputStream(out);        int toWrite;        do {          toWrite=Math.min(defaultBufferSize,bytesToWrite.length - writtenSoFar);          bos.write(bytesToWrite,writtenSoFar,toWrite);          writtenSoFar=writtenSoFar + toWrite;          if (progress != null) {            mExecutors.performOnForeground(writtenSoFar,bytesToWrite.length,progress);          }        } while (toWrite > 0);        bos.close();      }      mLogger.logDebug(String.format("Response code %d, %s",connection.getResponseCode(),connection.getResponseMessage()));      if (connection.getResponseCode() >= httpClientErrorResponseCode && !isAsyncOperation(resultClass)) {        mLogger.logDebug("Handling error response");        in=connection.getInputStream();        handleErrorResponse(request,serializable,connection);      }      if (connection.getResponseCode() == httpNoBodyResponseCode || connection.getResponseCode() == httpNotModified) {        mLogger.logDebug("Handling response with no body");        return null;      }      if (connection.getResponseCode() == httpAcceptedResponseCode) {        mLogger.logDebug("Handling accepted response");        if (resultClass == AsyncMonitorLocation.class) {          return (Result)new AsyncMonitorLocation(connection.getHeaders().get("Location"));        }      }      if (isAsyncOperation(resultClass)) {        mLogger.logDebug("Use different rules for processing async operations");        if (connection.getResponseCode() == httpSeeOtherResponseCode) {          return (Result)AsyncOperationStatus.createdCompleted(connection.getHeaders().get("Location"));        }        in=new BufferedInputStream(connection.getInputStream());        final Result result=handleJsonResponse(in,resultClass);        ((AsyncOperationStatus)result).seeOther=connection.getHeaders().get("Location");        return result;      }      in=new BufferedInputStream(connection.getInputStream());      final Map<String,String> headers=connection.getHeaders();      final String contentType=headers.get(CONTENT_TYPE_HEADER_NAME);      if (contentType.contains(JSON_CONTENT_TYPE)) {        mLogger.logDebug("Response json");        return handleJsonResponse(in,resultClass);      } else {        mLogger.logDebug("Response binary");        isBinaryStreamInput=true;        return (Result)handleBinaryStream(in);      }    }  finally {      if (out != null) {        out.close();      }      if (!isBinaryStreamInput && in != null) {        in.close();        connection.close();      }    }  } catch (  final OneDriveServiceException ex) {    final boolean shouldLogVerbosely=mLogger.getLoggingLevel() == LoggerLevel.Debug;    mLogger.logError("OneDrive Service exception " + ex.getMessage(shouldLogVerbosely),ex);    throw ex;  }catch (  final Exception ex) {    final ClientException clientException=new ClientException("Error during http request",ex,OneDriveErrorCodes.GeneralException);    mLogger.logError("Error during http request",clientException);    throw clientException;  }}  }
class C{  void signalOK(CCheckBox cb,String resString,boolean pass,boolean critical,String errorMsg){  m_errorString=res.getString(resString);  cb.setSelected(pass);  if (pass)   cb.setToolTipText(null); else {    cb.setToolTipText(errorMsg);    m_errorString+=" \n(" + errorMsg + ")";  }  if (!pass && critical)   cb.setBackground(Color.RED); else   cb.setBackground(Color.GREEN);}  }
class C{  public boolean equals(java.lang.Object obj){  return obj.getClass() == getClass() && ((Short)obj).value == value;}  }
class C{  protected boolean drawImageToPlatform(Image image,AffineTransform xform,Color bgcolor,int srcX,int srcY,int srcWidth,int srcHeight,boolean handlingTransparency){  BufferedImage img=getBufferedImage(image);  if (img == null) {    return true;  }  PSPrinterJob psPrinterJob=(PSPrinterJob)getPrinterJob();  AffineTransform fullTransform=getTransform();  if (xform == null) {    xform=new AffineTransform();  }  fullTransform.concatenate(xform);  double[] fullMatrix=new double[6];  fullTransform.getMatrix(fullMatrix);  Point2D.Float unitVectorX=new Point2D.Float(1,0);  Point2D.Float unitVectorY=new Point2D.Float(0,1);  fullTransform.deltaTransform(unitVectorX,unitVectorX);  fullTransform.deltaTransform(unitVectorY,unitVectorY);  Point2D.Float origin=new Point2D.Float(0,0);  double scaleX=unitVectorX.distance(origin);  double scaleY=unitVectorY.distance(origin);  double devResX=psPrinterJob.getXRes();  double devResY=psPrinterJob.getYRes();  double devScaleX=devResX / DEFAULT_USER_RES;  double devScaleY=devResY / DEFAULT_USER_RES;  int transformType=fullTransform.getType();  boolean clampScale=((transformType & (AffineTransform.TYPE_GENERAL_ROTATION | AffineTransform.TYPE_GENERAL_TRANSFORM)) != 0);  if (clampScale) {    if (scaleX > devScaleX)     scaleX=devScaleX;    if (scaleY > devScaleY)     scaleY=devScaleY;  }  if (scaleX != 0 && scaleY != 0) {    AffineTransform rotTransform=new AffineTransform(fullMatrix[0] / scaleX,fullMatrix[1] / scaleY,fullMatrix[2] / scaleX,fullMatrix[3] / scaleY,fullMatrix[4] / scaleX,fullMatrix[5] / scaleY);    Rectangle2D.Float srcRect=new Rectangle2D.Float(srcX,srcY,srcWidth,srcHeight);    Shape rotShape=rotTransform.createTransformedShape(srcRect);    Rectangle2D rotBounds=rotShape.getBounds2D();    rotBounds.setRect(rotBounds.getX(),rotBounds.getY(),rotBounds.getWidth() + 0.001,rotBounds.getHeight() + 0.001);    int boundsWidth=(int)rotBounds.getWidth();    int boundsHeight=(int)rotBounds.getHeight();    if (boundsWidth > 0 && boundsHeight > 0) {      boolean drawOpaque=true;      if (!handlingTransparency && hasTransparentPixels(img)) {        drawOpaque=false;        if (isBitmaskTransparency(img)) {          if (bgcolor == null) {            if (drawBitmaskImage(img,xform,bgcolor,srcX,srcY,srcWidth,srcHeight)) {              return true;            }          } else           if (bgcolor.getTransparency() == Transparency.OPAQUE) {            drawOpaque=true;          }        }        if (!canDoRedraws()) {          drawOpaque=true;        }      } else {        bgcolor=null;      }      if ((srcX + srcWidth > img.getWidth(null) || srcY + srcHeight > img.getHeight(null)) && canDoRedraws()) {        drawOpaque=false;      }      if (drawOpaque == false) {        fullTransform.getMatrix(fullMatrix);        AffineTransform tx=new AffineTransform(fullMatrix[0] / devScaleX,fullMatrix[1] / devScaleY,fullMatrix[2] / devScaleX,fullMatrix[3] / devScaleY,fullMatrix[4] / devScaleX,fullMatrix[5] / devScaleY);        Rectangle2D.Float rect=new Rectangle2D.Float(srcX,srcY,srcWidth,srcHeight);        Shape shape=fullTransform.createTransformedShape(rect);        Rectangle2D region=shape.getBounds2D();        region.setRect(region.getX(),region.getY(),region.getWidth() + 0.001,region.getHeight() + 0.001);        int w=(int)region.getWidth();        int h=(int)region.getHeight();        int nbytes=w * h * 3;        int maxBytes=8 * 1024 * 1024;        double origDpi=(devResX < devResY) ? devResX : devResY;        int dpi=(int)origDpi;        double scaleFactor=1;        double maxSFX=w / (double)boundsWidth;        double maxSFY=h / (double)boundsHeight;        double maxSF=(maxSFX > maxSFY) ? maxSFY : maxSFX;        int minDpi=(int)(dpi / maxSF);        if (minDpi < DEFAULT_USER_RES)         minDpi=DEFAULT_USER_RES;        while (nbytes > maxBytes && dpi > minDpi) {          scaleFactor*=2;          dpi/=2;          nbytes/=4;        }        if (dpi < minDpi) {          scaleFactor=(origDpi / minDpi);        }        region.setRect(region.getX() / scaleFactor,region.getY() / scaleFactor,region.getWidth() / scaleFactor,region.getHeight() / scaleFactor);        psPrinterJob.saveState(getTransform(),getClip(),region,scaleFactor,scaleFactor);        return true;      } else {        BufferedImage deepImage=new BufferedImage((int)rotBounds.getWidth(),(int)rotBounds.getHeight(),BufferedImage.TYPE_3BYTE_BGR);        Graphics2D imageGraphics=deepImage.createGraphics();        imageGraphics.clipRect(0,0,deepImage.getWidth(),deepImage.getHeight());        imageGraphics.translate(-rotBounds.getX(),-rotBounds.getY());        imageGraphics.transform(rotTransform);        if (bgcolor == null) {          bgcolor=Color.white;        }        imageGraphics.drawImage(img,srcX,srcY,srcX + srcWidth,srcY + srcHeight,srcX,srcY,srcX + srcWidth,srcY + srcHeight,bgcolor,null);        Shape holdClip=getClip();        Shape oldClip=getTransform().createTransformedShape(holdClip);        AffineTransform sat=AffineTransform.getScaleInstance(scaleX,scaleY);        Shape imgClip=sat.createTransformedShape(rotShape);        Area imgArea=new Area(imgClip);        Area oldArea=new Area(oldClip);        imgArea.intersect(oldArea);        psPrinterJob.setClip(imgArea);        Rectangle2D.Float scaledBounds=new Rectangle2D.Float((float)(rotBounds.getX() * scaleX),(float)(rotBounds.getY() * scaleY),(float)(rotBounds.getWidth() * scaleX),(float)(rotBounds.getHeight() * scaleY));        ByteComponentRaster tile=(ByteComponentRaster)deepImage.getRaster();        psPrinterJob.drawImageBGR(tile.getDataStorage(),scaledBounds.x,scaledBounds.y,(float)Math.rint(scaledBounds.width + 0.5),(float)Math.rint(scaledBounds.height + 0.5),0f,0f,deepImage.getWidth(),deepImage.getHeight(),deepImage.getWidth(),deepImage.getHeight());        psPrinterJob.setClip(getTransform().createTransformedShape(holdClip));        imageGraphics.dispose();      }    }  }  return true;}  }
class C{  private Shape decodeMarkBorder(int width,int height){  int left=(width - 3) / 2 - 5;  int top=(height - 2) / 2 - 5;  path.reset();  path.moveTo(left + 1,top + 0);  path.lineTo(left + 3,top + 0);  path.pointAt(left + 4,top + 1);  path.pointAt(left + 5,top + 2);  path.pointAt(left + 6,top + 1);  path.moveTo(left + 7,top + 0);  path.lineTo(left + 9,top + 0);  path.pointAt(left + 10,top + 1);  path.pointAt(left + 9,top + 2);  path.pointAt(left + 8,top + 3);  path.moveTo(left + 7,top + 4);  path.lineTo(left + 7,top + 5);  path.pointAt(left + 8,top + 6);  path.pointAt(left + 9,top + 7);  path.pointAt(left + 10,top + 8);  path.moveTo(left + 9,top + 9);  path.lineTo(left + 7,top + 9);  path.pointAt(left + 6,top + 8);  path.pointAt(left + 5,top + 7);  path.pointAt(left + 4,top + 8);  path.moveTo(left + 3,top + 9);  path.lineTo(left + 1,top + 9);  path.pointAt(left + 0,top + 8);  path.pointAt(left + 1,top + 7);  path.pointAt(left + 2,top + 6);  path.moveTo(left + 3,top + 5);  path.lineTo(left + 3,top + 4);  path.pointAt(left + 2,top + 3);  path.pointAt(left + 1,top + 2);  path.pointAt(left + 0,top + 1);  return path;}  }
class C{  public boolean isExtendedLengthApduSupported(){  try {    return mTag.getTagService().getExtendedLengthApdusSupported();  } catch (  RemoteException e) {    Log.e(TAG,"NFC service dead",e);    return false;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.602 -0400",hash_original_method="A9F98BACB414F0E2CFCA50969D92D7AA",hash_generated_method="4CE986A26E8ABEC6065A5FB1030C34CD") public NameFileFilter(String[] names){  this(names,null);}  }
class C{  protected void desFunc(int[] wKey,byte[] in,int inOff,byte[] out,int outOff){  int work, right, left;  left=(in[inOff + 0] & 0xff) << 24;  left|=(in[inOff + 1] & 0xff) << 16;  left|=(in[inOff + 2] & 0xff) << 8;  left|=(in[inOff + 3] & 0xff);  right=(in[inOff + 4] & 0xff) << 24;  right|=(in[inOff + 5] & 0xff) << 16;  right|=(in[inOff + 6] & 0xff) << 8;  right|=(in[inOff + 7] & 0xff);  work=((left >>> 4) ^ right) & 0x0f0f0f0f;  right^=work;  left^=(work << 4);  work=((left >>> 16) ^ right) & 0x0000ffff;  right^=work;  left^=(work << 16);  work=((right >>> 2) ^ left) & 0x33333333;  left^=work;  right^=(work << 2);  work=((right >>> 8) ^ left) & 0x00ff00ff;  left^=work;  right^=(work << 8);  right=((right << 1) | ((right >>> 31) & 1)) & 0xffffffff;  work=(left ^ right) & 0xaaaaaaaa;  left^=work;  right^=work;  left=((left << 1) | ((left >>> 31) & 1)) & 0xffffffff;  for (int round=0; round < 8; round++) {    int fval;    work=(right << 28) | (right >>> 4);    work^=wKey[round * 4 + 0];    fval=SP7[work & 0x3f];    fval|=SP5[(work >>> 8) & 0x3f];    fval|=SP3[(work >>> 16) & 0x3f];    fval|=SP1[(work >>> 24) & 0x3f];    work=right ^ wKey[round * 4 + 1];    fval|=SP8[work & 0x3f];    fval|=SP6[(work >>> 8) & 0x3f];    fval|=SP4[(work >>> 16) & 0x3f];    fval|=SP2[(work >>> 24) & 0x3f];    left^=fval;    work=(left << 28) | (left >>> 4);    work^=wKey[round * 4 + 2];    fval=SP7[work & 0x3f];    fval|=SP5[(work >>> 8) & 0x3f];    fval|=SP3[(work >>> 16) & 0x3f];    fval|=SP1[(work >>> 24) & 0x3f];    work=left ^ wKey[round * 4 + 3];    fval|=SP8[work & 0x3f];    fval|=SP6[(work >>> 8) & 0x3f];    fval|=SP4[(work >>> 16) & 0x3f];    fval|=SP2[(work >>> 24) & 0x3f];    right^=fval;  }  right=(right << 31) | (right >>> 1);  work=(left ^ right) & 0xaaaaaaaa;  left^=work;  right^=work;  left=(left << 31) | (left >>> 1);  work=((left >>> 8) ^ right) & 0x00ff00ff;  right^=work;  left^=(work << 8);  work=((left >>> 2) ^ right) & 0x33333333;  right^=work;  left^=(work << 2);  work=((right >>> 16) ^ left) & 0x0000ffff;  left^=work;  right^=(work << 16);  work=((right >>> 4) ^ left) & 0x0f0f0f0f;  left^=work;  right^=(work << 4);  out[outOff + 0]=(byte)((right >>> 24) & 0xff);  out[outOff + 1]=(byte)((right >>> 16) & 0xff);  out[outOff + 2]=(byte)((right >>> 8) & 0xff);  out[outOff + 3]=(byte)(right & 0xff);  out[outOff + 4]=(byte)((left >>> 24) & 0xff);  out[outOff + 5]=(byte)((left >>> 16) & 0xff);  out[outOff + 6]=(byte)((left >>> 8) & 0xff);  out[outOff + 7]=(byte)(left & 0xff);}  }
class C{  public PermutedFrontCodedStringList(final FrontCodedStringList frontCodedStringList,final int[] permutation){  this.frontCodedStringList=frontCodedStringList;  this.permutation=permutation;}  }
class C{  public long restartTime(long now){  if (mNumFailed == 0) {    return now;  }  if (mRetryAfter > 0) {    return mLastMod + mRetryAfter;  }  return mLastMod + Constants.RETRY_FIRST_DELAY * (1000 + mFuzz) * (1 << (mNumFailed - 1));}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  @VisibleForTesting void writeSpeed(double speed,StringBuilder builder,int resId,String lineBreak){  double speedInKmHr=speed * UnitConversions.MS_TO_KMH;  double speedInMiHr=speedInKmHr * UnitConversions.KM_TO_MI;  builder.append(context.getString(resId,speedInKmHr,speedInMiHr));  builder.append(lineBreak);}  }
class C{  private void checkState(){  if (mIsClosed) {    throw new IllegalStateException("Client instance can't be used after being closed.");  }}  }
class C{  private String createVarCSVHelper() throws LopsException {  StringBuilder sb=new StringBuilder();  if (operation == OperationTypes.READ) {    Data headerLop=(Data)getNamedInputLop(DataExpression.DELIM_HAS_HEADER_ROW);    Data delimLop=(Data)getNamedInputLop(DataExpression.DELIM_DELIMITER);    Data fillLop=(Data)getNamedInputLop(DataExpression.DELIM_FILL);    Data fillValueLop=(Data)getNamedInputLop(DataExpression.DELIM_FILL_VALUE);    Data naLop=(Data)getNamedInputLop(DataExpression.DELIM_NA_STRINGS);    sb.append(headerLop.getBooleanValue());    sb.append(OPERAND_DELIMITOR);    sb.append(delimLop.getStringValue());    sb.append(OPERAND_DELIMITOR);    sb.append(fillLop.getBooleanValue());    sb.append(OPERAND_DELIMITOR);    sb.append(fillValueLop.getDoubleValue());    if (naLop != null) {      sb.append(OPERAND_DELIMITOR);      sb.append(naLop.getStringValue());    }  } else {    Data headerLop=(Data)getNamedInputLop(DataExpression.DELIM_HAS_HEADER_ROW);    Data delimLop=(Data)getNamedInputLop(DataExpression.DELIM_DELIMITER);    Data sparseLop=(Data)getNamedInputLop(DataExpression.DELIM_SPARSE);    if (headerLop.isVariable())     throw new LopsException(this.printErrorLocation() + "Parameter " + DataExpression.DELIM_HAS_HEADER_ROW+ " must be a literal for a seq operation.");    if (delimLop.isVariable())     throw new LopsException(this.printErrorLocation() + "Parameter " + DataExpression.DELIM_DELIMITER+ " must be a literal for a seq operation.");    if (sparseLop.isVariable())     throw new LopsException(this.printErrorLocation() + "Parameter " + DataExpression.DELIM_SPARSE+ " must be a literal for a seq operation.");    sb.append(headerLop.getBooleanValue());    sb.append(OPERAND_DELIMITOR);    sb.append(delimLop.getStringValue());    sb.append(OPERAND_DELIMITOR);    sb.append(sparseLop.getBooleanValue());  }  return sb.toString();}  }
class C{  protected String form(ObjectMatrix1D matrix,int index,Former formatter){  Object value=matrix.get(index);  if (value == null)   return "";  return String.valueOf(value);}  }
class C{  public void stopDb(){  mysqldResource.shutdown();  LOG.debug("MySQL stoppped succcessfully");}  }
class C{  public InvalidAlgorithmParameterException(){  super();}  }
class C{  public boolean isRBIT_TEST(){switch (value) {case RBIT_TEST:case NO_RBIT_TEST:    return true;default :  return false;}}  }
class C{  @Nullable private Object toSimpleObject(Class cls,String val){  if (val == null || val.equals("null"))   return null;  if (String.class == cls)   return val;  if (Boolean.class == cls || Boolean.TYPE == cls)   return Boolean.parseBoolean(val);  if (Integer.class == cls || Integer.TYPE == cls)   return Integer.parseInt(val);  if (Long.class == cls || Long.TYPE == cls)   return Long.parseLong(val);  if (UUID.class == cls)   return UUID.fromString(val);  if (IgniteUuid.class == cls)   return IgniteUuid.fromString(val);  if (Byte.class == cls || Byte.TYPE == cls)   return Byte.parseByte(val);  if (Short.class == cls || Short.TYPE == cls)   return Short.parseShort(val);  if (Float.class == cls || Float.TYPE == cls)   return Float.parseFloat(val);  if (Double.class == cls || Double.TYPE == cls)   return Double.parseDouble(val);  if (BigDecimal.class == cls)   return new BigDecimal(val);  if (Collection.class == cls)   return Arrays.asList(val.split(";"));  if (Set.class == cls)   return new HashSet<>(Arrays.asList(val.split(";")));  if (Object[].class == cls)   return val.split(";");  if (byte[].class == cls) {    String[] els=val.split(";");    if (els.length == 0 || (els.length == 1 && els[0].length() == 0))     return new byte[0];    byte[] res=new byte[els.length];    for (int i=0; i < els.length; i++)     res[i]=Byte.valueOf(els[i]);    return res;  }  return val;}  }
class C{  private List<URI> orderNetworksByNumberOfPorts(Map<URI,List<StoragePort>> allocatablePorts){  List<URI> orderedNetworks=new ArrayList<URI>();  Map<Integer,Set<URI>> numPortsToNetworkSet=new HashMap<Integer,Set<URI>>();  for (  URI networkURI : allocatablePorts.keySet()) {    int numPorts=allocatablePorts.get(networkURI).size();    if (numPortsToNetworkSet.get(numPorts) == null) {      numPortsToNetworkSet.put(numPorts,new HashSet<URI>());    }    numPortsToNetworkSet.get(numPorts).add(networkURI);  }  for (  Set<URI> networkURIs : numPortsToNetworkSet.values()) {    orderedNetworks.addAll(networkURIs);  }  return orderedNetworks;}  }
class C{  public boolean isRemoteBranchFile(String filePath){  return filePath.startsWith(myRefsRemotesDirPath);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildSecretRoomArea(zone);}  }
class C{  public static <E>boolean isEmpty(Collection<E> c){  return (c == null) || c.isEmpty();}  }
class C{  public int tint(){  return tint;}  }
class C{  public static Timestamp trunc(Timestamp p_dateTime){  Timestamp time=p_dateTime;  if (time == null)   time=new Timestamp(System.currentTimeMillis());  GregorianCalendar cal=new GregorianCalendar();  cal.setTime(time);  cal.set(Calendar.HOUR_OF_DAY,0);  cal.set(Calendar.MINUTE,0);  cal.set(Calendar.SECOND,0);  cal.set(Calendar.MILLISECOND,0);  java.util.Date temp=cal.getTime();  return new Timestamp(temp.getTime());}  }
class C{  private boolean isPointerNumChanged(MotionEvent event){  return event.getActionMasked() == MotionEvent.ACTION_DOWN || event.getActionMasked() == MotionEvent.ACTION_POINTER_DOWN || event.getActionMasked() == MotionEvent.ACTION_UP || event.getActionMasked() == MotionEvent.ACTION_POINTER_UP || event.getActionMasked() == MotionEvent.ACTION_CANCEL;}  }
class C{  private final void init(){  super.addMouseListener(listMouseAdapter);  super.setCellRenderer(listCellRenderer);}  }
class C{  public Iterator<Entry<String,List<String>>> iterator(){  return fields.entrySet().iterator();}  }
class C{  protected void drawTickMarksVertical(Graphics2D g2,AxisState state,Rectangle2D dataArea,RectangleEdge edge){}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  HttpSession session=request.getSession();  String idEntidad=(String)session.getAttribute(Misc.ENTIDAD_ID);  ServletOutputStream output=null;  try {    ServicioConsultaExpedientes oServicio=LocalizadorServicios.getServicioConsultaExpedientes();    InfoDocumento documento=oServicio.recogerDocumento(request.getParameter("guid"),Misc.obtenerEntidad(idEntidad));    byte[] receipt=documento.getContent();    String mimeType=documento.getMimeType();    response.setHeader("Content-disposition","attachment; filename=\"Documento_" + request.getParameter("guid") + "."+ documento.getExtension()+ "\"");    response.setContentLength(receipt.length);    response.setContentType(mimeType);    output=response.getOutputStream();    output.write(receipt,0,receipt.length);  } catch (  Exception ex) {    request.setAttribute(Misc.MENSAJE_ERROR,ex.getMessage());    return mapping.findForward("Failure");  } finally {    if (output != null) {      output.flush();      output.close();    }  }  return null;}  }
class C{  public int addItemToEnd(String productId,BigDecimal amount,BigDecimal quantity,BigDecimal unitPrice,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,HashMap<String,GenericValue> features,HashMap<String,Object> attributes,String prodCatalogId,String itemType,LocalDispatcher dispatcher,Boolean triggerExternalOps,Boolean triggerPriceRules) throws CartItemModifyException, ItemNotFoundException {  return addItemToEnd(ShoppingCartItem.makeItem(null,productId,amount,quantity,unitPrice,reservStart,reservLength,reservPersons,null,null,features,attributes,prodCatalogId,null,itemType,null,dispatcher,this,triggerExternalOps,triggerPriceRules,null,Boolean.FALSE,Boolean.FALSE));}  }
class C{  private DateUtils(){}  }
class C{  public static Drawable bitmapToDrawable(Bitmap bitmap){  return new BitmapDrawable(bitmap);}  }
class C{  protected Transferable createTransferable(JComponent c){  if (c instanceof JList) {    JList list=(JList)c;    Object[] values=list.getSelectedValues();    if (values == null || values.length == 0) {      return null;    }    StringBuffer plainBuf=new StringBuffer();    StringBuffer htmlBuf=new StringBuffer();    htmlBuf.append("<html>\n<body>\n<ul>\n");    for (int i=0; i < values.length; i++) {      Object obj=values[i];      String val=((obj == null) ? "" : obj.toString());      plainBuf.append(val + "\n");      htmlBuf.append("  <li>" + val + "\n");    }    plainBuf.deleteCharAt(plainBuf.length() - 1);    htmlBuf.append("</ul>\n</body>\n</html>");    return new BasicTransferable(plainBuf.toString(),htmlBuf.toString());  }  return null;}  }
class C{  byte[] slabTable(Address addr,boolean allocate){  Address base=addr.toWord().and(MMAP_SLAB_MASK.not()).toAddress();  final int hash=hash(base);  int index=hash;  if (STATS)   hashAttemptCounter.inc();  while (true) {    if (base.EQ(slabMap.get(index))) {      return slabTableFor(addr,index);    }    if (STATS)     hashMissCounter.inc();    lock.acquire();    if (base.EQ(slabMap.get(index))) {      lock.release();      return slabTableFor(addr,index);    }    if (slabMap.get(index).EQ(SENTINEL)) {      if (!allocate) {        lock.release();        return null;      }      slabMap.set(index,base);      commitFreeSlab(index);      lock.release();      return slabTableFor(addr,index);    }    lock.release();    index=(++index) % SLAB_TABLE_SIZE;    if (index == hash) {      VM.assertions.fail("MMAP slab table is full!");      return null;    }  }}  }
class C{  public void removeScrollingListener(OnWheelScrollListener listener){  scrollingListeners.remove(listener);}  }
class C{  public InlineQueryResultCachedGifBuilder id(String id){  this.id=id;  return this;}  }
class C{  public AbstractBooleanList partFromTo(int from,int to){  if (size == 0)   return new BooleanArrayList(0);  checkRangeFromTo(from,to,size);  boolean[] part=new boolean[to - from + 1];  System.arraycopy(elements,from,part,0,to - from + 1);  return new BooleanArrayList(part);}  }
class C{  public GenericSignatureParser(String signature){  int s=signature.indexOf('(');  String sig=signature;  if (s > 0)   sig=sig.substring(s); else   if (s < 0 || sig.indexOf(':') >= 0 || sig.startsWith("(V)"))   throw new IllegalArgumentException("Bad method signature: " + signature);  this.signature=sig;}  }
class C{  private int scanToken(int startPos){  int position=startPos;  while (position < maxPosition) {    char c=str.charAt(position);    if ((c <= maxDelimChar) && (delimiters.indexOf(c) >= 0))     break;    position++;  }  if (retDelims && (startPos == position)) {    char c=str.charAt(position);    if ((c <= maxDelimChar) && (delimiters.indexOf(c) >= 0))     position++;  }  return position;}  }
class C{  public boolean isNonIDRSlice(){  if (FUI_TYPE == (byte)0x01) {    return true;  }  if (isFrameNonInterleaved() && FUH_TYPE == (byte)0x01) {    return true;  }  return false;}  }
class C{  public void initRestAssured(){  super.initRestAssured();  RestAssured.requestSpecification.basePath(ROOT);  RestAssured.requestSpecification.baseUri("http://localhost:" + MAIN_PORT + ROOT);}  }
class C{  public static int terminateProcessById(String pid,Boolean includeChildProcesses,Boolean terminateProcessForcefully){  List<String> command=new ArrayList<String>();  if (isWindows()) {    command.add("taskkill");    command.add("/PID");    command.add(pid);    if (includeChildProcesses) {      command.add("/T");    }    if (terminateProcessForcefully) {      command.add("/F");    }  } else {    if (includeChildProcesses) {      command.add("pkill");      if (terminateProcessForcefully) {        command.add("-9");      }      command.add("-P");    } else {      command.add("kill");      if (terminateProcessForcefully) {        command.add("-9");      }    }    command.add(pid);  }  ProcessBuilder processBuilder=new ProcessBuilder(command);  int exit=1;  try {    exit=processBuilder.start().waitFor();  } catch (  InterruptedException|IOException e) {    exit=1;    AngularCLIPlugin.logError(e);  }  return exit;}  }
class C{  static void println(String key){  System.out.println(format(key));}  }
class C{  public RentedSignList(final StendhalRPZone zone,final Shape shape){  super(zone,shape,RentedSign.class);  setupTurnNotifier(60 * 60);}  }
class C{  protected Grant(){}  }
class C{  @Override public void close() throws IOException {  super.close();}  }
class C{  private void listUpdated(){  titleCounts=String.valueOf(list.getModel().getSize());  updateTitle();}  }
class C{  public boolean isPrivileged(){  return privileged;}  }
class C{  public static EncryptionKey acquireSecretKey(PrincipalName cname,char[] password,int etype,PAData.SaltAndParams snp) throws KrbException {  String salt;  byte[] s2kparams;  if (snp != null) {    salt=snp.salt != null ? snp.salt : cname.getSalt();    s2kparams=snp.params;  } else {    salt=cname.getSalt();    s2kparams=null;  }  return acquireSecretKey(password,salt,etype,s2kparams);}  }
class C{  private boolean isNextCharacterEscapedQuote(String nextLine,boolean inQuotes,int i){  return inQuotes && nextLine.length() > (i + 1) && isCharacterQuoteCharacter(nextLine.charAt(i + 1));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public CostEstimate sequence(CostEstimate next){  return new CostEstimate(next.rowCount,cost + next.cost);}  }
class C{  public String toString(StringEncoding encoding){  return encode(toByteArray(),encoding);}  }
class C{  public void addLanguageResource(String key,Resource resource){  if (!isLanguageAllowed(key)) {    logger.debug("OMITTING language: \"{}\"",key);    return;  }  Resource existing=resources.get(key);  if (existing != null) {    try {      JsonNode existingTree=parseLanguageResource(existing);      if (existingTree == null) {        logger.warn("Base language resource \"{}\" does not exist.",key);        return;      }      JsonNode resourceTree=parseLanguageResource(resource);      if (resourceTree == null) {        logger.warn("Overlay language resource \"{}\" does not exist.",key);        return;      }      JsonNode mergedTree=mergeTranslations(existingTree,resourceTree);      resources.put(key,new ByteArrayResource("application/json",mapper.writeValueAsBytes(mergedTree)));      logger.debug("Merged strings with existing language: \"{}\"",key);    } catch (    IOException e) {      logger.error("Unable to merge language resource \"{}\": {}",key,e.getMessage());      logger.debug("Error merging language resource.",e);    }  } else {    resources.put(key,resource);    logger.debug("Added language: \"{}\"",key);  }}  }
class C{  public void testGetStatement() throws SQLException {  DatabaseMetaData meta=conn.getMetaData();  ResultSet info=meta.getTypeInfo();  Statement statement2=info.getStatement();  assertNull(statement2);  statement2=res.getStatement();  assertEquals(st,statement2);  try {    res.close();    res.getStatement();    fail("Exception expected");  } catch (  SQLException e) {  }}  }
class C{  @Nullable public static String unmask(String cacheName){  return DEFAULT_MASK_NAME.equals(cacheName) ? null : cacheName;}  }
class C{  protected HeadlessGfsh createShell(){  try {    Gfsh.SUPPORT_MUTLIPLESHELL=true;    String shellId=getClass().getSimpleName() + "_" + getName();    HeadlessGfsh shell=new HeadlessGfsh(shellId,30,this.gfshDir);    info("Started testable shell: " + shell);    return shell;  } catch (  ClassNotFoundException e) {    throw new AssertionError(e);  }catch (  IOException e) {    throw new AssertionError(e);  }}  }
class C{  public Attribute_ createAttribute_(){  Attribute_Impl attribute_=new Attribute_Impl();  return attribute_;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:27.376 -0500",hash_original_method="3040DA05407F13E8561F02C468A7DEB4",hash_generated_method="96B96B503A807A17EFBA37C423574278") public Entry(String tag,long millis,String text){  if (tag == null)   throw new NullPointerException("tag == null");  if (text == null)   throw new NullPointerException("text == null");  mTag=tag;  mTimeMillis=millis;  mData=text.getBytes();  mFileDescriptor=null;  mFlags=IS_TEXT;}  }
class C{  public long duration(){  if (mPlayer != null && mPlayer.isInitialized()) {    return mPlayer.duration();  }  return -1;}  }
class C{  public TimeOffset add(final TimeOffset offset){  return new TimeOffset(this.getRaw() + offset.getRaw());}  }
class C{  private boolean checkDBConnectivity(boolean createDB,boolean ignoreError) throws ReplicatorException {  Database conn=null;  try {    conn=connectionManager.getRawConnection(createDB);    conn.connect();    return true;  } catch (  SQLException e) {    if (!ignoreError) {      throw new ReplicatorException("Unable to connect to DBMS: url=" + connectionSpec.createUrl(createDB));    }  } finally {    if (conn != null) {      connectionManager.releaseConnection(conn);    }  }  return false;}  }
class C{  public boolean isShowBillingTypeSelectStep(){  if (model.getBillingSharesResultTypes() == null)   return false;  if (model.getBillingSharesResultTypes().contains(BillingSharesResultType.RESELLER))   return true;  if (model.getBillingSharesResultTypes().contains(BillingSharesResultType.SUPPLIER))   return true;  if (model.isPlatformOperator())   return false;  if (model.getBillingSharesResultTypes().contains(BillingSharesResultType.BROKER))   return false; else   return false;}  }
class C{  private static String[] nameMethodFields(RemoteClass.Method[] methods){  String[] names=new String[methods.length];  for (int i=0; i < names.length; i++) {    names[i]="$method_" + methods[i].methodDoc().name() + "_"+ i;  }  return names;}  }
class C{  public void storeFinishedWorkers(boolean flag){  _storeFinishedWorkers=flag;}  }
class C{  private void fillEmptySlots(final int slot,final BucketPage bucketPage){  int slots=fillEmptySlots(slot,bucketPage,0,1 << htree.addressBits);  assert bucketPage.globalDepth == htree.addressBits;  bucketPage.globalDepth=htree.addressBits;  while (slots > 1) {    slots>>=1;    bucketPage.globalDepth--;  }}  }
class C{  public void addModules(List<Module> modules){  for (  Module module : modules) {    addModule(module);  }}  }
class C{  private void writeObject(ObjectOutputStream aOutputStream) throws IOException {  aOutputStream.defaultWriteObject();}  }
class C{  String writeToTmpFile(Iterable<String> data) throws IOException {  return writeToNamedTmpFile("tmp_file",FluentIterable.from(data).toArray(String.class));}  }
class C{  private Map<UUID,Collection<HadoopInputSplit>> mappers(Collection<ClusterNode> top,Collection<UUID> topIds,Iterable<HadoopInputSplit> splits) throws IgniteCheckedException {  Map<UUID,Collection<HadoopInputSplit>> mappers=new HashMap<>();  Map<String,Collection<UUID>> nodes=groupByHost(top);  Map<UUID,Integer> nodeLoads=new HashMap<>(top.size(),1.0f);  for (  UUID nodeId : topIds)   nodeLoads.put(nodeId,0);  for (  HadoopInputSplit split : splits) {    UUID nodeId=nodeForSplit(split,topIds,nodes,nodeLoads);    if (log.isDebugEnabled())     log.debug("Mapped split to node [split=" + split + ", nodeId="+ nodeId+ ']');    Collection<HadoopInputSplit> nodeSplits=mappers.get(nodeId);    if (nodeSplits == null) {      nodeSplits=new ArrayList<>();      mappers.put(nodeId,nodeSplits);    }    nodeSplits.add(split);    nodeLoads.put(nodeId,nodeLoads.get(nodeId) + 1);  }  return mappers;}  }
class C{  public final void removeSubTree(){  if (getLastMove() != null) {    tree.goBack();    int defChild=tree.currentNode.defaultChild;    tree.deleteVariation(defChild);  } else {    while (canRedoMove())     tree.deleteVariation(0);  }  pendingDrawOffer=false;  updateTimeControl(true);}  }
class C{  @Override public boolean hasFunctionalArmAES(int location){  boolean hasAES=false;  if ((location != Mech.LOC_RARM) && (location != Mech.LOC_LARM)) {    return false;  }  for (  Mounted mounted : getMisc()) {    if ((mounted.getLocation() == location) && mounted.getType().hasFlag(MiscType.F_ACTUATOR_ENHANCEMENT_SYSTEM) && !mounted.isDestroyed()&& !mounted.isBreached()&& !mounted.isMissing()) {      hasAES=true;    } else     if ((mounted.getLocation() == location) && mounted.getType().hasFlag(MiscType.F_ACTUATOR_ENHANCEMENT_SYSTEM)) {      return false;    }  }  return hasAES;}  }
class C{  public void logDelete(IgfsPath path,IgfsMode mode,boolean recursive){  addEntry(new Entry(TYPE_DELETE,path.toString(),mode,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,recursive,null));}  }
class C{  public static Distribution guessMaxCoeff(DataSet d){  return new LogUniform(Math.pow(2,0),Math.pow(2,4));}  }
class C{  protected String format(Map<?,?> props,int maxLength){  StringWriter writer=new StringWriter();  PrintWriter printer=new PrintWriter(writer,true);  Iterator<?> keyIterator=props.keySet().iterator();  int keyLength=keyHeader.length();  int valueLength=valueHeader.length();  TreeMap<String,String[]> sortedProperties=new TreeMap<String,String[]>();  while (keyIterator.hasNext()) {    String key=keyIterator.next().toString();    Object rawValue=props.get(key);    String value=(rawValue == null ? "null" : rawValue.toString());    if (key.length() > keyLength)     keyLength=key.length();    if (value.length() > valueLength)     valueLength=value.length();    String valueArray[]=wrap(value,maxLength,0,false);    sortedProperties.put(key,valueArray);  }  keyLength+=keyMargin;  if (maxLength != NOWRAP)   valueLength=maxLength;  String format=indent + "%-" + keyLength+ "."+ keyLength+ "s %-"+ valueLength+ "."+ valueLength+ "s"+ LINE_SEPARATOR;  String formatHeader=indent + "%-" + keyLength+ "."+ keyLength+ "s %-"+ valueHeader.length()+ "."+ valueHeader.length()+ "s"+ LINE_SEPARATOR;  if (printHeader) {    printer.printf(formatHeader,keyHeader,valueHeader);    printer.printf(formatHeader,"---","-----");  }  for (  String key : sortedProperties.keySet()) {    String values[]=sortedProperties.get(key);    printer.printf(format,key,values[0]);    for (int i=1; i < values.length; i++) {      printer.printf(format,"",values[i]);    }  }  printer.close();  return writer.toString();}  }
class C{  public void elementAttributesProcessed(String name,String nsPrefix,String nsURI){}  }
class C{  public boolean isReachableMethod(SootMethod method){  return ptsProvider.getAllReachableMethods().contains(method);}  }
class C{  public URL generateURL(String baseUrl) throws MalformedURLException {  return computeCompositeUpdateSiteURL(baseUrl,null,null,null,null,null);}  }
class C{  public RelationPair(PatternReference pattern){  this(pattern.getSourceType(),pattern.getTargetType());}  }
class C{  @Override public Color match(DirectoryElement element){  return getColor(ColorPreferencesIds.COLOR_DIRECTORY);}  }
class C{  public static Dcsn cs_chol(Dcs A,Dcss S){  double d, lki, Lx[], x[], Cx[];  int top, i, p, k, n, Li[], Lp[], cp[], pinv[], s[], c[], parent[], Cp[], Ci[];  Dcs L, C;  Dcsn N;  if (!Dcs_util.CS_CSC(A) || S == null || S.cp == null || S.parent == null)   return (null);  n=A.n;  N=new Dcsn();  c=new int[2 * n];  x=new double[n];  cp=S.cp;  pinv=S.pinv;  parent=S.parent;  C=pinv != null ? Dcs_symperm.cs_symperm(A,pinv,true) : A;  s=c;  int s_offset=n;  Cp=C.p;  Ci=C.i;  Cx=C.x;  N.L=L=Dcs_util.cs_spalloc(n,n,cp[n],true,false);  Lp=L.p;  Li=L.i;  Lx=L.x;  for (k=0; k < n; k++)   Lp[k]=c[k]=cp[k];  for (k=0; k < n; k++) {    top=Dcs_ereach.cs_ereach(C,k,parent,s,s_offset,c);    x[k]=0;    for (p=Cp[k]; p < Cp[k + 1]; p++) {      if (Ci[p] <= k)       x[Ci[p]]=Cx[p];    }    d=x[k];    x[k]=0;    for (; top < n; top++) {      i=s[s_offset + top];      lki=x[i] / Lx[Lp[i]];      x[i]=0;      for (p=Lp[i] + 1; p < c[i]; p++) {        x[Li[p]]-=Lx[p] * lki;      }      d-=lki * lki;      p=c[i]++;      Li[p]=k;      Lx[p]=lki;    }    if (d <= 0)     return null;    p=c[k]++;    Li[p]=k;    Lx[p]=Math.sqrt(d);  }  Lp[n]=cp[n];  return N;}  }
class C{  public int hashCode(){  return mFileSuffixList.hashCode() + mMimeTypeList.hashCode() + mDescription.hashCode();}  }
class C{  @SuppressWarnings("unchecked") private void rehash(HashEntry<K,V> node){  HashEntry<K,V>[] oldTable=table;  int oldCapacity=oldTable.length;  int newCapacity=oldCapacity << 1;  threshold=(int)(newCapacity * loadFactor);  HashEntry<K,V>[] newTable=(HashEntry<K,V>[])new HashEntry<?,?>[newCapacity];  int sizeMask=newCapacity - 1;  for (int i=0; i < oldCapacity; i++) {    HashEntry<K,V> e=oldTable[i];    if (e != null) {      HashEntry<K,V> next=e.next;      int idx=e.hash & sizeMask;      if (next == null)       newTable[idx]=e; else {        HashEntry<K,V> lastRun=e;        int lastIdx=idx;        for (HashEntry<K,V> last=next; last != null; last=last.next) {          int k=last.hash & sizeMask;          if (k != lastIdx) {            lastIdx=k;            lastRun=last;          }        }        newTable[lastIdx]=lastRun;        for (HashEntry<K,V> p=e; p != lastRun; p=p.next) {          V v=p.value;          int h=p.hash;          int k=h & sizeMask;          HashEntry<K,V> n=newTable[k];          newTable[k]=new HashEntry<K,V>(h,p.key,v,n);        }      }    }  }  int nodeIndex=node.hash & sizeMask;  node.setNext(newTable[nodeIndex]);  newTable[nodeIndex]=node;  table=newTable;}  }
class C{  public static boolean testRaySphere(Vector3d origin,Vector3d dir,Vector3d center,double radiusSquared){  return testRaySphere(origin.x,origin.y,origin.z,dir.x,dir.y,dir.z,center.x,center.y,center.z,radiusSquared);}  }
class C{  protected BusinessObjectData restoreBusinessObjectDataImpl(BusinessObjectDataKey businessObjectDataKey){  BusinessObjectDataRestoreDto businessObjectDataRestoreDto=businessObjectDataInitiateRestoreHelperService.prepareToInitiateRestore(businessObjectDataKey);  notificationEventService.processStorageUnitNotificationEventAsync(NotificationEventTypeEntity.EventTypesStorageUnit.STRGE_UNIT_STTS_CHG,businessObjectDataRestoreDto.getBusinessObjectDataKey(),businessObjectDataRestoreDto.getOriginStorageName(),businessObjectDataRestoreDto.getNewOriginStorageUnitStatus(),businessObjectDataRestoreDto.getOldOriginStorageUnitStatus());  businessObjectDataInitiateRestoreHelperService.executeS3SpecificSteps(businessObjectDataRestoreDto);  if (businessObjectDataRestoreDto.getException() != null) {    businessObjectDataInitiateRestoreHelperService.executeInitiateRestoreAfterStep(businessObjectDataRestoreDto);    notificationEventService.processStorageUnitNotificationEventAsync(NotificationEventTypeEntity.EventTypesStorageUnit.STRGE_UNIT_STTS_CHG,businessObjectDataRestoreDto.getBusinessObjectDataKey(),businessObjectDataRestoreDto.getOriginStorageName(),businessObjectDataRestoreDto.getNewOriginStorageUnitStatus(),businessObjectDataRestoreDto.getOldOriginStorageUnitStatus());    throw new IllegalStateException(businessObjectDataRestoreDto.getException());  } else {    return businessObjectDataInitiateRestoreHelperService.executeInitiateRestoreAfterStep(businessObjectDataRestoreDto);  }}  }
class C{  public SearchSourceBuilder query(BytesReference queryBinary){  if (this.querySourceBuilder == null) {    this.querySourceBuilder=new QuerySourceBuilder();  }  this.querySourceBuilder.setQuery(queryBinary);  return this;}  }
class C{  public static byte[] toBitmask(SupportedNewAlertCategory... categories){  byte[] result=new byte[2];  for (  SupportedNewAlertCategory category : categories) {    result[category.byteNumber()]|=category.asBit();  }  return result;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:10.577 -0500",hash_original_method="776A0D16BAF4033F49AFC0802778097D",hash_generated_method="1683E660BF0434876FDF5F0660A38086") public void preConcat(ColorMatrix prematrix){  setConcat(this,prematrix);}  }
class C{  private Text text(Node node){  return new Text(node);}  }
class C{  public CipherParameters generateDerivedMacParameters(int keySize){  return generateDerivedParameters(keySize);}  }
class C{  private int convertToPanelX(double xval){  double temp=(xval - m_minX) / m_rangeX;  temp=temp * m_panelWidth;  return (int)temp;}  }
class C{  public final void pushCurrentNodeAndExpression(int cn,int en){  m_currentNodes.push(cn);  m_currentExpressionNodes.push(cn);}  }
class C{  private void addWaitLocations(int points,long startTime,TripStatistics tripStatistics,int timeOffset,int locationOffset){  for (int i=0; i < points; i++) {    Location location=getLocation(locationOffset,locationOffset * .001,0,startTime + (i + timeOffset) * TEN_SECONDS);    tripStatisticsUpdater.addLocation(location,PreferencesUtils.RECORDING_DISTANCE_INTERVAL_DEFAULT,false,ActivityType.WALKING,DEFAULT_WEIGHT);    tripStatistics=tripStatisticsUpdater.getTripStatistics();    assertEquals((i + timeOffset) * TEN_SECONDS,tripStatistics.getTotalTime());    assertEquals((locationOffset) * TEN_SECONDS,tripStatistics.getMovingTime());    assertEquals(locationOffset,tripStatisticsUpdater.getSmoothedElevation(),TripStatisticsUpdater.ELEVATION_SMOOTHING_FACTOR / 2);    assertEquals(0.0,tripStatistics.getMinElevation());    assertEquals(locationOffset,tripStatistics.getMaxElevation(),TripStatisticsUpdater.ELEVATION_SMOOTHING_FACTOR / 2);    assertEquals(locationOffset,tripStatistics.getTotalElevationGain(),TripStatisticsUpdater.ELEVATION_SMOOTHING_FACTOR);    assertEquals(MOVING_SPEED,tripStatistics.getMaxSpeed(),0.1);    assertEquals(MOVING_SPEED,tripStatistics.getMaxSpeed(),0.1);    assertEquals(locationOffset * 111.0,tripStatistics.getTotalDistance(),locationOffset * 111.0 * 0.01);  }}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void loadSettings(){  loadStringSettings();  loadNumericSettings();  loadBooleanSettings();  loadListSettings();  loadMapSettings();  usercolorSettings.setData(owner.getUsercolorData());  imageSettings.setData(owner.getUsericonData());  imageSettings.setTwitchBadgeTypes(owner.getTwitchBadgeTypes());  hotkeySettings.setData(owner.hotkeyManager.getActionsMap(),owner.hotkeyManager.getData(),owner.hotkeyManager.globalHotkeysAvailable());}  }
class C{  @Override public synchronized void addDataSourceListener(DataSourceListener dsl){  m_dataListeners.add(dsl);}  }
class C{  private MongoCollection readCollection(){  MongoClient mongoClient=new MongoClient(host,port);  MongoDatabase db=mongoClient.getDatabase("local");  return db.getCollection("oplog.rs");}  }
class C{  private RequestInfo loadExistingRequest(int firstRequestNo) throws Exception {  return loadRequest(providerDirPath + File.separator + firstRequestNo);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String remoteName=getString(stack);  int portNum=getInt(stack);  SFIRTuner tun=ExternalTuningManager.getIRTunerPlugin(getString(stack),portNum);  if (tun != null)   return tun.getRemoteInfo(remoteName).confirmCmd; else   return null;}  }
class C{  private static void checkCRL(DistributionPoint dp,ExtendedPKIXParameters paramsPKIX,X509Certificate cert,Date validDate,X509Certificate defaultCRLSignCert,PublicKey defaultCRLSignKey,CertStatus certStatus,ReasonsMask reasonMask,List certPathCerts) throws AnnotatedException {  Date currentDate=new Date(System.currentTimeMillis());  if (validDate.getTime() > currentDate.getTime()) {    throw new AnnotatedException("Validation time is in future.");  }  Set crls=CertPathValidatorUtilities.getCompleteCRLs(dp,cert,currentDate,paramsPKIX);  boolean validCrlFound=false;  AnnotatedException lastException=null;  Iterator crl_iter=crls.iterator();  while (crl_iter.hasNext() && certStatus.getCertStatus() == CertStatus.UNREVOKED && !reasonMask.isAllReasons()) {    try {      X509CRL crl=(X509CRL)crl_iter.next();      ReasonsMask interimReasonsMask=RFC3280CertPathUtilities.processCRLD(crl,dp);      if (!interimReasonsMask.hasNewReasons(reasonMask)) {        continue;      }      Set keys=RFC3280CertPathUtilities.processCRLF(crl,cert,defaultCRLSignCert,defaultCRLSignKey,paramsPKIX,certPathCerts);      PublicKey key=RFC3280CertPathUtilities.processCRLG(crl,keys);      X509CRL deltaCRL=null;      if (paramsPKIX.isUseDeltasEnabled()) {        Set deltaCRLs=CertPathValidatorUtilities.getDeltaCRLs(currentDate,paramsPKIX,crl);        deltaCRL=RFC3280CertPathUtilities.processCRLH(deltaCRLs,key);      }      if (paramsPKIX.getValidityModel() != ExtendedPKIXParameters.CHAIN_VALIDITY_MODEL) {        if (cert.getNotAfter().getTime() < crl.getThisUpdate().getTime()) {          throw new AnnotatedException("No valid CRL for current time found.");        }      }      RFC3280CertPathUtilities.processCRLB1(dp,cert,crl);      RFC3280CertPathUtilities.processCRLB2(dp,cert,crl);      RFC3280CertPathUtilities.processCRLC(deltaCRL,crl,paramsPKIX);      RFC3280CertPathUtilities.processCRLI(validDate,deltaCRL,cert,certStatus,paramsPKIX);      RFC3280CertPathUtilities.processCRLJ(validDate,crl,cert,certStatus);      if (certStatus.getCertStatus() == CRLReason.removeFromCRL) {        certStatus.setCertStatus(CertStatus.UNREVOKED);      }      reasonMask.addReasons(interimReasonsMask);      Set criticalExtensions=crl.getCriticalExtensionOIDs();      if (criticalExtensions != null) {        criticalExtensions=new HashSet(criticalExtensions);        criticalExtensions.remove(X509Extensions.IssuingDistributionPoint.getId());        criticalExtensions.remove(X509Extensions.DeltaCRLIndicator.getId());        if (!criticalExtensions.isEmpty()) {          throw new AnnotatedException("CRL contains unsupported critical extensions.");        }      }      if (deltaCRL != null) {        criticalExtensions=deltaCRL.getCriticalExtensionOIDs();        if (criticalExtensions != null) {          criticalExtensions=new HashSet(criticalExtensions);          criticalExtensions.remove(X509Extensions.IssuingDistributionPoint.getId());          criticalExtensions.remove(X509Extensions.DeltaCRLIndicator.getId());          if (!criticalExtensions.isEmpty()) {            throw new AnnotatedException("Delta CRL contains unsupported critical extension.");          }        }      }      validCrlFound=true;    } catch (    AnnotatedException e) {      lastException=e;    }  }  if (!validCrlFound) {    throw lastException;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:07.001 -0500",hash_original_method="4D4892762A483BC675FC4A10EF44F79C",hash_generated_method="6B225E7E6341B41D6D4DDAF47F896BB0") protected void geolocationPermissionsHidePrompt(){  mCallbackProxy.onGeolocationPermissionsHidePrompt();}  }
class C{  public StrTokenizer(char[] input,StrMatcher delim){  this(input);  setDelimiterMatcher(delim);}  }
class C{  protected CascadedTable(Table parent,Predicate rowFilter,ColumnProjection colFilter,Class tupleType){  super(0,0,tupleType);  m_parent=parent;  m_pnames=new ArrayList();  m_rows=new CascadedRowManager(this);  m_listener=new Listener();  setColumnProjection(colFilter);  setRowFilter(rowFilter);  m_parent.addTableListener(m_listener);}  }
class C{  public static String encodePath(final String unescaped,final String charset) throws URIException {  return encode(unescaped,URI.allowed_abs_path,charset);}  }
class C{  public NQueensBoard(int size){  this.size=size;  squares=new int[size][size];  for (int i=0; i < size; i++) {    for (int j=0; j < size; j++) {      squares[i][j]=0;    }  }}  }
class C{  public void unblock(InetAddress address){  if (address == null) {    throw new IllegalArgumentException("Adress to unblock can not be null");  }  unblock(new Subnet(address,32));}  }
class C{  public String[] snapshots(){  return this.snapshots;}  }
class C{  void readString(StringBuilder sb) throws IOException {  while (true) {    int ch=read();    int len;switch (ch) {default :      _peek=ch;    return;case 0x00:case 0x01:case 0x02:case 0x03:case 0x04:case 0x05:case 0x06:case 0x07:case 0x08:case 0x09:case 0x0a:case 0x0b:case 0x0c:case 0x0d:case 0x0e:case 0x0f:case 0x10:case 0x11:case 0x12:case 0x13:case 0x14:case 0x15:case 0x16:case 0x17:case 0x18:case 0x19:case 0x1a:case 0x1b:case 0x1c:case 0x1d:case 0x1e:case 0x1f:  len=ch - 0x00;readString(sb,len);return;case 0x30:case 0x31:case 0x32:case 0x33:len=((ch - 0x30) << 8) + read();readString(sb,len);return;case 'S':len=readShort();readString(sb,len);return;case 'R':len=readShort();readString(sb,len);break;}}}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  @DataProvider(name="RangeVersusCalendar") Object[][] provider_rangeVersusCalendar(){  return new Object[][]{{LocalDate.of(1873,1,1),LocalDate.of(2100,1,1)}};}  }
class C{  public boolean isQuoteAllQty(){  Object oo=get_Value(COLUMNNAME_IsQuoteAllQty);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void shareVideo(WXShareContent content,WXMediaMessage msg,SendMessageToWX.Req req){  WXVideoObject wxVideoObject=new WXVideoObject();  wxVideoObject.videoUrl=content.getVideo_url();  msg.mediaObject=wxVideoObject;  msg.title=content.getTitle();  msg.description=content.getDescription();  req.transaction=buildTransaction("video");  req.message=msg;  req.scene=content.getScene();  shareAsync(content.getImage_url(),req,true);}  }
class C{  Node<E> first(){  restartFromHead:   for (; ; ) {    for (Node<E> h=head, p=h, q; ; ) {      boolean hasItem=(p.item != null);      if (hasItem || (q=p.next) == null) {        updateHead(h,p);        return hasItem ? p : null;      } else       if (p == q)       continue restartFromHead; else       p=q;    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public DeleteSubscriptionsResponse clone(){  DeleteSubscriptionsResponse result=new DeleteSubscriptionsResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  result.Results=Results == null ? null : Results.clone();  result.DiagnosticInfos=DiagnosticInfos == null ? null : DiagnosticInfos.clone();  return result;}  }
class C{  public void route(ScheduledTour tour){  MatsimVehicleAdapter matsimVehicle=new MatsimVehicleAdapter(tour.getVehicle());  double currTime=tour.getDeparture();  Id prevLink=tour.getTour().getStartLinkId();  Leg prevLeg=null;  for (  TourElement e : tour.getTour().getTourElements()) {    if (e instanceof Leg) {      prevLeg=(Leg)e;      prevLeg.setDepartureTime(currTime);    }    if (e instanceof TourActivity) {      TourActivity act=(TourActivity)e;      route(prevLeg,prevLink,act.getLocation(),null,matsimVehicle);      double expectedArrival=currTime + prevLeg.getExpectedTransportTime();      act.setExpectedArrival(expectedArrival);      double startAct=Math.max(expectedArrival,act.getTimeWindow().getStart());      currTime=startAct + act.getDuration();      prevLink=act.getLocation();    }  }  Id endLink=tour.getTour().getEndLinkId();  route(prevLeg,prevLink,endLink,null,matsimVehicle);}  }
class C{  public boolean forEachKey(TFloatProcedure procedure){  return forEach(procedure);}  }
class C{  public static boolean zipAlignAPk(File in,File out){  if (out.exists()) {    return true;  }  String[] cmd={S.getZipalign(),"4",in.getAbsolutePath(),out.getAbsolutePath()};  CmdUtils.runCommand(cmd);  return out.exists();}  }
class C{  private int createServer() throws IOException {  CacheServer server=null;  Properties p=new Properties();  p.put(MCAST_PORT,"0");  p.put(LOCATORS,"");  this.system=DistributedSystem.connect(p);  this.cache=CacheFactory.create(system);  server=this.cache.addCacheServer();  int port=AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);  server.setMaxConnections(MAX_CNXS);  server.setMaxThreads(getMaxThreads());  server.setPort(port);  server.start();  return server.getPort();}  }
class C{  private void addSCToXbrick(Map<String,List<String>> xBricksToSelectedSCs,String xBrick,String storageController){  if (xBricksToSelectedSCs.get(xBrick) == null) {    xBricksToSelectedSCs.put(xBrick,new ArrayList<String>());  }  if (!xBricksToSelectedSCs.get(xBrick).contains(storageController)) {    xBricksToSelectedSCs.get(xBrick).add(storageController);  }}  }
class C{  @Override public void discardAllEdits(){  super.discardAllEdits();  updateActions();  setHasSignificantEdits(false);}  }
class C{  public static Object invoke(Object obj,String methodName,Class clazz,Object newValue) throws NoSuchMethodException {  try {    Method method=obj.getClass().getMethod(methodName,new Class[]{clazz});    return method.invoke(obj,new Object[]{newValue});  } catch (  IllegalAccessException e) {    throw new NoSuchMethodException(methodName + " is not accessible");  }catch (  InvocationTargetException e) {    throw new InternalError(e.getMessage());  }}  }
class C{  public static boolean isInPeriod(Date date,Date periodStart) throws AdeException {  return getContainingPeriodStart(date).equals(periodStart);}  }
class C{  private static boolean contains(String value,int start,int length,String criteria1,String criteria2,String criteria3,String criteria4,String criteria5){  return contains(value,start,length,new String[]{criteria1,criteria2,criteria3,criteria4,criteria5});}  }
class C{  private JSONArray arrayFromStrings(List<String> strings){  final JSONArray array=new JSONArray();  if (strings != null) {    for (    final String eachString : strings) {      array.put(eachString);    }  }  return array;}  }
class C{  public static String exchangeForSessionToken(String onetimeUseToken,PrivateKey key) throws IOException, GeneralSecurityException, AuthenticationException {  return exchangeForSessionToken(DEFAULT_PROTOCOL,DEFAULT_DOMAIN,onetimeUseToken,key);}  }
class C{  protected URL makeIssuesFeedUrl(String proj) throws MalformedURLException {  return new URL(FEED_URI_BASE + "/p/" + proj+ "/issues"+ PROJECTION);}  }
class C{  private static void read(final InputStream istream,final byte[] bytes) throws IOException {  int pos=0;  while (pos < bytes.length) {    int read=istream.read(bytes,pos,bytes.length - pos);    if (read < 0) {      throw new RuntimeException("premature EOF");    }    pos+=read;  }}  }
class C{  public static boolean putFloat(Context context,String key,float value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putFloat(key,value);  return editor.commit();}  }
class C{  private void testFloatRange(int precisionStep) throws Exception {  final String field="ascfield" + precisionStep;  final int lower=-1000, upper=+2000;  Query tq=LegacyNumericRangeQuery.newFloatRange(field,precisionStep,NumericUtils.sortableIntToFloat(lower),NumericUtils.sortableIntToFloat(upper),true,true);  TopDocs tTopDocs=searcher.search(tq,1);  assertEquals("Returned count of range query must be equal to inclusive range length",upper - lower + 1,tTopDocs.totalHits);}  }
class C{  public void copyInterval(TerminalRow line,int sourceX1,int sourceX2,int destinationX){  final int x1=line.findStartOfColumn(sourceX1);  final int x2=line.findStartOfColumn(sourceX2);  boolean startingFromSecondHalfOfWideChar=(sourceX1 > 0 && line.wideDisplayCharacterStartingAt(sourceX1 - 1));  final char[] sourceChars=(this == line) ? Arrays.copyOf(line.mText,line.mText.length) : line.mText;  int latestNonCombiningWidth=0;  for (int i=x1; i < x2; i++) {    char sourceChar=sourceChars[i];    int codePoint=Character.isHighSurrogate(sourceChar) ? Character.toCodePoint(sourceChar,sourceChars[++i]) : sourceChar;    if (startingFromSecondHalfOfWideChar) {      codePoint=' ';      startingFromSecondHalfOfWideChar=false;    }    int w=WcWidth.width(codePoint);    if (w > 0) {      destinationX+=latestNonCombiningWidth;      sourceX1+=latestNonCombiningWidth;      latestNonCombiningWidth=w;    }    setChar(destinationX,codePoint,line.getStyle(sourceX1));  }}  }
class C{  private Object run(String expr){  StellarProcessor processor=new StellarProcessor();  assertTrue(processor.validate(expr));  return processor.parse(expr,null,StellarFunctions.FUNCTION_RESOLVER(),Context.EMPTY_CONTEXT());}  }
class C{  public Object put(Object key,Object value){  key=convertKey(key);  int hashCode=hash(key);  int index=hashIndex(hashCode,data.length);  HashEntry entry=data[index];  while (entry != null) {    if (entry.hashCode == hashCode && isEqualKey(key,entry.key)) {      Object oldValue=entry.getValue();      updateEntry(entry,value);      return oldValue;    }    entry=entry.next;  }  addMapping(index,hashCode,key,value);  return null;}  }
class C{  public void requestFocus(){  Form rootForm=getComponentForm();  if (rootForm != null) {    Component.setDisableSmoothScrolling(true);    rootForm.requestFocus(this);    Component.setDisableSmoothScrolling(false);  }}  }
class C{  public DocumentAnnotation_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_language=jcas.getRequiredFeatureDE(casType,"language","uima.cas.String",featOkTst);  casFeatCode_language=(null == casFeat_language) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_language).getCode();  casFeat_docType=jcas.getRequiredFeatureDE(casType,"docType","uima.cas.String",featOkTst);  casFeatCode_docType=(null == casFeat_docType) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_docType).getCode();  casFeat_sourceUri=jcas.getRequiredFeatureDE(casType,"sourceUri","uima.cas.String",featOkTst);  casFeatCode_sourceUri=(null == casFeat_sourceUri) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_sourceUri).getCode();  casFeat_timestamp=jcas.getRequiredFeatureDE(casType,"timestamp","uima.cas.Long",featOkTst);  casFeatCode_timestamp=(null == casFeat_timestamp) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_timestamp).getCode();  casFeat_documentClassification=jcas.getRequiredFeatureDE(casType,"documentClassification","uima.cas.String",featOkTst);  casFeatCode_documentClassification=(null == casFeat_documentClassification) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_documentClassification).getCode();  casFeat_documentCaveats=jcas.getRequiredFeatureDE(casType,"documentCaveats","uima.cas.StringArray",featOkTst);  casFeatCode_documentCaveats=(null == casFeat_documentCaveats) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_documentCaveats).getCode();  casFeat_documentReleasability=jcas.getRequiredFeatureDE(casType,"documentReleasability","uima.cas.StringArray",featOkTst);  casFeatCode_documentReleasability=(null == casFeat_documentReleasability) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_documentReleasability).getCode();}  }
class C{  public Categories addCategories(String... categories){  Categories prop=new Categories(categories);  addCategories(prop);  return prop;}  }
class C{  public static void close(){  out.close();}  }
class C{  public long count(){  return count;}  }
class C{  public void addRow(){  ViewGroup row=getLastResultsRow();  while (row.getChildCount() < 3) {    inflate(getContext(),R.layout.image_card,row);  }  presenter.drawNewRowIfNeeded();}  }
class C{  public static ToHitData toHit(IGame game,int attackerId,Targetable target){  final Entity ae=game.getEntity(attackerId);  if (ae == null) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"You can't attack from a null entity!");  }  if (!game.getOptions().booleanOption("tacops_grappling")) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"grappling attack not allowed");  }  String impossible=toHitIsImpossible(game,ae,target);  if ((impossible != null) && !impossible.equals("Locked in Grapple")) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"impossible");  }  if ((ae.getGrappled() != Entity.NONE) && ae.isChainWhipGrappled()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"cannot break free from a chain whip grapple");  }  ToHitData toHit;  if (!(ae instanceof Mech) && !(ae instanceof Protomech)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Only mechs and protomechs can be grappled");  }  if (ae.getGrappled() != target.getTargetId()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Not grappled");  }  int base=ae.getCrew().getPiloting();  toHit=new ToHitData(base,"base");  PhysicalAttackAction.setCommonModifiers(toHit,game,ae,target);  if (ae.isGrappleAttacker()) {    toHit.addModifier(TargetRoll.AUTOMATIC_SUCCESS,"original attacker");    return toHit;  }  setCommonModifiers(toHit,game,ae,target);  if (ae instanceof Mech) {    if (!ae.hasWorkingSystem(Mech.ACTUATOR_SHOULDER,Mech.LOC_LARM)) {      toHit.addModifier(2,"Left shoulder actuator destroyed");    }    if (!ae.hasWorkingSystem(Mech.ACTUATOR_UPPER_ARM,Mech.LOC_LARM)) {      toHit.addModifier(2,"Left upper arm actuator destroyed");    }    if (!ae.hasWorkingSystem(Mech.ACTUATOR_LOWER_ARM,Mech.LOC_LARM)) {      toHit.addModifier(2,"Left lower arm actuator destroyed");    }    if (!ae.hasWorkingSystem(Mech.ACTUATOR_HAND,Mech.LOC_LARM)) {      toHit.addModifier(1,"Left hand actuator destroyed");    }    if (!ae.hasWorkingSystem(Mech.ACTUATOR_SHOULDER,Mech.LOC_RARM)) {      toHit.addModifier(2,"Right shoulder actuator destroyed");    }    if (!ae.hasWorkingSystem(Mech.ACTUATOR_UPPER_ARM,Mech.LOC_RARM)) {      toHit.addModifier(2,"Right upper arm actuator destroyed");    }    if (!ae.hasWorkingSystem(Mech.ACTUATOR_LOWER_ARM,Mech.LOC_RARM)) {      toHit.addModifier(2,"Right lower arm actuator destroyed");    }    if (!ae.hasWorkingSystem(Mech.ACTUATOR_HAND,Mech.LOC_RARM)) {      toHit.addModifier(1,"Right hand actuator destroyed");    }    if (ae.hasFunctionalArmAES(Mech.LOC_RARM) && ae.hasFunctionalArmAES(Mech.LOC_LARM)) {      toHit.addModifier(-1,"AES modifer");    }  }  Entity te=(Entity)target;  int wmod=te.getWeightClass() - ae.getWeightClass();  if ((te instanceof Protomech) && !(ae instanceof Protomech)) {    wmod=ae.getWeightClass() * -1;  } else   if ((ae instanceof Protomech) && !(te instanceof Protomech)) {    wmod=te.getWeightClass();  } else   if ((te instanceof Protomech) && (ae instanceof Protomech)) {    wmod=0;  }  if (wmod != 0) {    toHit.addModifier(wmod,"Weight class difference");  }  return toHit;}  }
class C{  synchronized public void add(T item,double[] itemCoords){  this.addItem(item,itemCoords,null);}  }
class C{  public static String toStringWithLimit(Object parameter){  if (parameter == null) {    return NULL_STR;  }  String value=parameter.toString();  try {    if (value.length() > DEFAULT_ARG_STRING_MAX_LENGTH) {      value=value.substring(0,DEFAULT_ARG_STRING_MAX_LENGTH) + DEFAULT_MAX_STRING_ENDING;    }    return value;  } catch (  Throwable e) {    return UNKNOWN;  }}  }
class C{  private void writeFlowModToSwitch(long dpid,OFFlowMod flowMod){  IOFSwitch ofSwitch=floodlightProvider.getSwitch(dpid);  if (ofSwitch == null) {    if (log.isDebugEnabled()) {      log.debug("Not deleting key {} :: switch {} not connected",dpid);    }    return;  }  writeFlowModToSwitch(ofSwitch,flowMod);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.193 -0500",hash_original_method="CE987E2D0639A8371474E03A1BAB7064",hash_generated_method="5AC65724670398C7D1047F737CC67B1A") public int group(String newsgroup) throws IOException {  return sendCommand(NNTPCommand.GROUP,newsgroup);}  }
class C{  AlignmentPatternFinder(BitMatrix image,int startX,int startY,int width,int height,float moduleSize,ResultPointCallback resultPointCallback){  this.image=image;  this.possibleCenters=new ArrayList<AlignmentPattern>(5);  this.startX=startX;  this.startY=startY;  this.width=width;  this.height=height;  this.moduleSize=moduleSize;  this.crossCheckStateCount=new int[3];  this.resultPointCallback=resultPointCallback;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Text textNode;  Text splitNode;  String value;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(2);  textNode=(Text)nameNode.getFirstChild();  splitNode=textNode.splitText(6);  value=splitNode.getNodeValue();  assertEquals("textSplitTextThreeAssert"," Jones",value);}  }
class C{  public final AC align(String side){  return align(side,curIx);}  }
class C{  public void startClean() throws Exception {  FileUtils.deleteDirectory(dataDir);  start();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void nl(String nl){  Formatting.nl=nl;  Formatting.dnl=nl + nl;  Formatting.nltab=nl + tab;  Formatting.scnl=SC + nl;  Formatting.scdnl=SC + dnl;  Formatting.cnl=COMMA + nl;}  }
class C{  double C(){  int N=data.size();  double C=0.0;  int i=0;  while (i < N) {    int j=i + 1;    while ((j < N) && (data.get(i).getValue() == data.get(j).getValue())) {      j++;    }    C+=Math.pow(j - i,3.0) - (j - i);    i=j;  }  return 1 - C / (Math.pow(N,3.0) - N);}  }
class C{  public boolean doesTableOfContentsHaveAnyNotebooks(String tableOfContentsId){  return db.doesTableOfContentsHaveAnyNotebooks(tableOfContentsId);}  }
class C{  public <D>D oneToMany(D destination,final T source,final NullPointerControl nullPointerControl,final MappingType mtDestination,final MappingType mtSource){  try {    return this.<D,T>getJMapper(relationalOneToManyMapper,destination.getClass()).getDestination(destination,source,nullPointerControl,mtDestination,mtSource);  } catch (  Exception e) {    return this.logAndReturnNull(e);  }}  }
class C{  public Class<?> findClassImpl(String name) throws ClassNotFoundException {  if (_isVerbose)   verbose(name,"findClass");  if (_lifecycle.isDestroyed()) {    log().fine("Class loader has been closed.");    return super.findClass(name);  }  if (_lifecycle.isBeforeInit())   init();  if (name.indexOf('/') >= 0)   name=name.replace('/','.');  if (name.indexOf('\\') >= 0)   name=name.replace('\\','.');  ClassEntry entry=null;  entry=_entryCache == null ? null : _entryCache.get(name);  if (entry == null) {    int len=_loaders.size();    for (int i=0; i < len; i++) {      Class<?> cl=_loaders.get(i).loadClass(name);      if (cl != null) {        return cl;      }    }    entry=getClassEntry(name);  }  if (entry == null)   return null;  if (entry != null && _isVerbose)   verbose(name,(isNormalJdkOrder(name) ? "found" : "found (took priority from parent)"));  if (_isEnableDependencyCheck) {    entry.addDependencies(_dependencies);  }  ClassEntry oldEntry=_entryCache.putIfAbsent(name,entry);  if (oldEntry != null)   entry=oldEntry;  try {    return loadClassEntry(entry);  } catch (  RuntimeException e) {    throw e;  }catch (  ClassNotFoundException e) {    throw e;  }catch (  Exception e) {    log().log(Level.FINEST,e.toString(),e);    throw new ClassNotFoundException(name + " [" + e+ "]",e);  }}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  int type=((ElemTemplateElement)newChild).getXSLToken();switch (type) {case Constants.ELEMNAME_TEXTLITERALRESULT:case Constants.ELEMNAME_APPLY_TEMPLATES:case Constants.ELEMNAME_APPLY_IMPORTS:case Constants.ELEMNAME_CALLTEMPLATE:case Constants.ELEMNAME_FOREACH:case Constants.ELEMNAME_VALUEOF:case Constants.ELEMNAME_COPY_OF:case Constants.ELEMNAME_NUMBER:case Constants.ELEMNAME_CHOOSE:case Constants.ELEMNAME_IF:case Constants.ELEMNAME_TEXT:case Constants.ELEMNAME_COPY:case Constants.ELEMNAME_VARIABLE:case Constants.ELEMNAME_MESSAGE:    break;default :  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});}return super.appendChild(newChild);}  }
class C{  static void printXml(DexData dexData,boolean justClasses){  ClassRef[] externClassRefs=dexData.getExternalReferences();  String prevPackage=null;  for (int i=0; i < externClassRefs.length; i++) {    ClassRef cref=externClassRefs[i];    String declClassName=cref.getName();    String className=classNameOnly(declClassName);    String packageName=packageNameOnly(declClassName);    if (!packageName.equals(prevPackage)) {      if (prevPackage != null) {        out.println(IN1 + "</package>");      }      out.println(IN1 + "<package name=\"" + packageName+ "\">");      prevPackage=packageName;    }    out.println(IN2 + "<class name=\"" + className+ "\">");    if (!justClasses) {      printXmlFields(cref);      printXmlMethods(cref);    }    out.println(IN2 + "</class>");  }  if (prevPackage != null)   out.println(IN1 + "</package>");}  }
class C{  public static ObjectAnimator ofInt(Object target,String propertyName,int... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setIntValues(values);  return anim;}  }
class C{  public void close(){  if (myListPopUp != null) {    myListPopUp.cancel();  }}  }
class C{  public void testAddAndSumMT() throws Throwable {  final int incs=1000000;  final int nthreads=4;  final ExecutorService pool=Executors.newCachedThreadPool();  LongAdder a=new LongAdder();  CyclicBarrier barrier=new CyclicBarrier(nthreads + 1);  for (int i=0; i < nthreads; ++i)   pool.execute(new AdderTask(a,barrier,incs));  barrier.await();  barrier.await();  long total=(long)nthreads * incs;  long sum=a.sum();  assertEquals(sum,total);  pool.shutdown();}  }
class C{  public boolean isCodenvyUsageLegal() throws ServerException, IOException {  long actualUsers=userManager.getTotalCount();  int actualServers=dockerConnector.getAvailableNodes().size();  try {    CodenvyLicense codenvyLicense=load();    return codenvyLicense.isLicenseUsageLegal(actualUsers,actualServers);  } catch (  LicenseException e) {    return CodenvyLicense.isFreeUsageLegal(actualUsers,actualServers);  }}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  @SuppressWarnings("unchecked") public <T>T loadAs(InputStream input,Class<T> type){  return (T)loadFromReader(new StreamReader(new UnicodeReader(input)),type);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.434 -0500",hash_original_method="13ED4597857164B01AAF7D1C6E2C9384",hash_generated_method="CCBE22CE3839C3F0D1FFDCDB80A9C33B") private synchronized long insertInternal(ContentValues values,boolean allowReplace){  try {    SQLiteStatement stmt=getStatement(allowReplace);    stmt.clearBindings();    if (LOCAL_LOGV)     Log.v(TAG,"--- inserting in table " + mTableName);    for (    Map.Entry<String,Object> e : values.valueSet()) {      final String key=e.getKey();      int i=getColumnIndex(key);      DatabaseUtils.bindObjectToProgram(stmt,i,e.getValue());      if (LOCAL_LOGV) {        Log.v(TAG,"binding " + e.getValue() + " to column "+ i+ " ("+ key+ ")");      }    }    return stmt.executeInsert();  } catch (  SQLException e) {    Log.e(TAG,"Error inserting " + values + " into table  "+ mTableName,e);    return -1;  }}  }
class C{  public SignalServiceGroup(Type type,byte[] groupId,String name,List<String> members,SignalServiceAttachment avatar){  this.type=type;  this.groupId=groupId;  this.name=Optional.fromNullable(name);  this.members=Optional.fromNullable(members);  this.avatar=Optional.fromNullable(avatar);}  }
class C{  public void add(final double operand){  this.value+=operand;}  }
class C{  public DTMIterator cloneWithReset() throws CloneNotSupportedException {  NodeSetDTM clone=(NodeSetDTM)clone();  clone.reset();  return clone;}  }
class C{  protected int index(int rank){  return zero + rank * stride;}  }
class C{  public static String monitorProcessOutput(Process p,String theString){  boolean keepReadingLines=true;  boolean endOfLine=false;  boolean foundIt=false;  boolean appRunning=true;  String ret=null;  int readInt=-1;  InputStream is=null;  BufferedReader br=null;  String line="";  try {    is=p.getInputStream();    br=new BufferedReader(new InputStreamReader(is));    while (keepReadingLines) {      endOfLine=false;      line="";      while (!endOfLine) {        if (br.ready() && (is.available() > 0)) {          readInt=is.read();          if (readInt == 13 || readInt == 10) {            endOfLine=true;          } else {            line+=(char)readInt;          }        } else {          Thread.sleep(100);          if (!processRunning(p) && (!br.ready()) && (is.available() <= 0)) {            endOfLine=true;            keepReadingLines=false;          } else {          }        }      }      if (line.indexOf(theString) > -1) {        ret=line;        foundIt=true;        keepReadingLines=false;      }    }  } catch (  Exception e) {    e.printStackTrace();  }  return ret;}  }
class C{  public void actionPerformed(ActionEvent e){  if (fileChooser == null) {    fileChooser=jmri.jmrit.XmlFile.userFileChooser(Bundle.getMessage("PromptXmlFileTypes"),"xml");    fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);    fileChooser.setCurrentDirectory(new File(ThrottleFrame.getDefaultThrottleFolder()));  }  int retVal=fileChooser.showOpenDialog(null);  if (retVal != JFileChooser.APPROVE_OPTION) {    return;  }  if (ThrottleFrameManager.instance().getThrottleWindows().hasNext()) {    Object[] possibleValues={Bundle.getMessage("LabelMerge"),Bundle.getMessage("LabelReplace"),Bundle.getMessage("LabelCancel")};    int selectedValue=JOptionPane.showOptionDialog(null,Bundle.getMessage("DialogMergeOrReplace"),Bundle.getMessage("OptionLoadingThrottles"),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.INFORMATION_MESSAGE,null,possibleValues,possibleValues[0]);    if (selectedValue == JOptionPane.NO_OPTION) {      ThrottleFrameManager.instance().requestAllThrottleWindowsDestroyed();    }  }  try {    loadThrottlesLayout(fileChooser.getSelectedFile());  } catch (  java.io.IOException e1) {    log.warn("Exception while reading file",e1);  }}  }
class C{  private void loadForm(HttpServletRequest request,TimetableManagerForm frm) throws Exception {  Long mgrId=null;  String uniqueId=request.getParameter("id");  if (uniqueId == null || uniqueId.trim().length() == 0)   throw new Exception("Manager Id could not be read.");  try {    mgrId=new Long(uniqueId);  } catch (  Exception e) {    throw new Exception("Invalid Manager Id : " + uniqueId);  }  sessionContext.checkPermission(mgrId,"TimetableManager",Right.TimetableManagerEdit);  frm.setUniqueId(uniqueId);  TimetableManagerDAO mgrDao=new TimetableManagerDAO();  TimetableManager mgr=mgrDao.get(mgrId);  frm.setEmail(mgr.getEmailAddress());  frm.setExternalId(mgr.getExternalUniqueId());  Set rolesSet=mgr.getManagerRoles();  ArrayList roles=new ArrayList(rolesSet);  Collections.sort(roles,new RolesComparator());  for (Iterator i=roles.iterator(); i.hasNext(); ) {    ManagerRole mgrRole=(ManagerRole)i.next();    Roles role=mgrRole.getRole();    frm.addToRoles(role);    if (mgrRole.isPrimary().booleanValue())     frm.setPrimaryRole(role.getRoleId().toString());    frm.getRoleReceiveEmailFlags().add(mgrRole.isReceiveEmails() == null ? new Boolean(false) : mgrRole.isReceiveEmails());  }  Long sessionId=sessionContext.getUser().getCurrentAcademicSessionId();  Set depts=mgr.getDepartments();  for (Iterator i=depts.iterator(); i.hasNext(); ) {    Department dept=(Department)i.next();    if (dept.getSessionId().equals(sessionId))     frm.addToDepts(dept);  }  for (Iterator i=mgr.getSolverGroups().iterator(); i.hasNext(); ) {    SolverGroup sg=(SolverGroup)i.next();    if (sg.getSession().getUniqueId().equals(sessionId))     frm.addToSolverGrs(sg);  }  if (ApplicationProperty.ManagerExternalIdLookup.isTrue() && ApplicationProperty.ManagerExternalIdLookupClass.value() != null) {    frm.setLookupEnabled(Boolean.TRUE);    frm.setFirstName(mgr.getFirstName());    frm.setMiddleName(mgr.getMiddleName());    frm.setLastName(mgr.getLastName());    frm.setTitle(mgr.getAcademicTitle());  } else {    frm.setLookupEnabled(Boolean.FALSE);    frm.setFirstName(mgr.getFirstName());    frm.setMiddleName(mgr.getMiddleName());    frm.setLastName(mgr.getLastName());    frm.setTitle(mgr.getAcademicTitle());  }}  }
class C{  boolean isConnected(){  if (fConnected == null)   return false;  return !fConnected.isEmpty();}  }
class C{  private void findAnnotations(int offset,IAnnotationModel model,IDocument document,int lineNumber){  annotations.clear();  if (model == null) {    if (editor != null) {      ITextEditor editor=this.editor;      model=editor.getDocumentProvider().getAnnotationModel(editor.getEditorInput());    }  }  if (model == null) {    return;  }  for (Iterator<?> it=model.getAnnotationIterator(); it.hasNext(); ) {    Annotation annotation=(Annotation)it.next();    Position position=model.getPosition(annotation);    if (position == null) {      return;    }    try {      if (position.overlapsWith(offset,1) || document != null && document.getLineOfOffset(position.offset) == lineNumber) {        annotations.add(annotation);      }    } catch (    BadLocationException e) {      log.error(e);    }  }}  }
class C{  protected void computeFolderChildren(File folder,boolean isIncluded,String[] pkgName,ArrayList vChildren,char[][] inclusionPatterns,char[][] exclusionPatterns) throws JavaModelException {  if (isIncluded) {    IPackageFragment pkg=getPackageFragment(pkgName);    vChildren.add(pkg);  }  try {    File[] members=folder.listFiles();    boolean hasIncluded=isIncluded;    int length=members.length;    if (length > 0) {      JavaProject javaProject=(JavaProject)getJavaProject();      String sourceLevel=javaProject.getOption(JavaCore.COMPILER_SOURCE,true);      String complianceLevel=javaProject.getOption(JavaCore.COMPILER_COMPLIANCE,true);      for (int i=0; i < length; i++) {        File member=members[i];        String memberName=member.getName();        if (member.isDirectory()) {          if (Util.isValidFolderNameForPackage(memberName,sourceLevel,complianceLevel)) {            String[] newNames=Util.arrayConcat(pkgName,manager.intern(memberName));            boolean isMemberIncluded=false;            computeFolderChildren(member,isMemberIncluded,newNames,vChildren,inclusionPatterns,exclusionPatterns);          }        } else {          if (!hasIncluded && Util.isValidCompilationUnitName(memberName,sourceLevel,complianceLevel)) {            hasIncluded=true;            IPackageFragment pkg=getPackageFragment(pkgName);            vChildren.add(pkg);          }        }      }    }  } catch (  IllegalArgumentException e) {    throw new JavaModelException(e,IJavaModelStatusConstants.ELEMENT_DOES_NOT_EXIST);  }catch (  CoreException e) {    throw new JavaModelException(e);  }}  }
class C{  public DefaultTableModel(Object[] columnNames,int rowCount){  this(convertToVector(columnNames),rowCount);}  }
class C{  public static boolean isTransaction(int choice){  return choice > 0 && choice < 4;}  }
class C{  public static String toStringPretty(JsonObject jsonObj,int level){  StringBuffer buf=new StringBuffer();  buf.append("{");  buf.append(fieldsToStringPretty(jsonObj,level + 1));  buf.append("}");  return buf.toString();}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'CONTACT' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'NAME' TEXT,"+ "'EMAIL' TEXT);");}  }
class C{  public Key minKey(){  if (isEmpty())   throw new NoSuchElementException("Priority queue is empty");  return min.key;}  }
class C{  public void writeDouble(double d,boolean append){  writeDoubleArray(new double[]{d},append);}  }
class C{  public static void developerLog(final Throwable t){  if (License.isDeveloper()) {    userLog(t);  }}  }
class C{  public void removeImageView(CubeImageView imageView){  if (null == imageView || null == mFirstImageViewHolder) {    return;  }  ImageViewHolder holder=mFirstImageViewHolder;  do {    if (holder.contains(imageView)) {      if (holder == mFirstImageViewHolder) {        mFirstImageViewHolder=holder.mNext;      }      if (null != holder.mNext) {        holder.mNext.mPrev=holder.mPrev;      }      if (null != holder.mPrev) {        holder.mPrev.mNext=holder.mNext;      }    }  } while ((holder=holder.mNext) != null);}  }
class C{  protected void updateTabButtonAt(int index){  TabButton button=buttonForTab(index);  button.setText(tabPane.getTitleAt(index));  button.setIcon(tabPane.getIconAt(index));  button.setDisabledIcon(tabPane.getDisabledIconAt(index));  Color background=tabPane.getBackgroundAt(index);  if (background == null) {    background=(Color)button.getClientProperty(BUTTON_ORIGINAL_BACKGROUND);  }  button.setBackground(background);  Color foreground=tabPane.getForegroundAt(index);  if (foreground == null) {    foreground=(Color)button.getClientProperty(BUTTON_ORIGINAL_FOREGROUND);  }  button.setForeground(foreground);  button.setToolTipText(tabPane.getToolTipTextAt(index));  button.setDisplayedMnemonicIndex(tabPane.getDisplayedMnemonicIndexAt(index));  button.setMnemonic(tabPane.getMnemonicAt(index));  button.setEnabled(tabPane.isEnabledAt(index));  button.setHorizontalAlignment(((JOutlookBar)tabPane).getAlignmentAt(index));}  }
class C{  public static int toIntValue(boolean b){  return b ? 1 : 0;}  }
class C{  public T remove(URI id){  return cache.remove(id);}  }
class C{  public static void apply(){  applyOpenSSLFix();  installLinuxPRNGSecureRandom();}  }
class C{  private void appendAffix(StringBuffer buffer,String affix,boolean localized){  boolean needQuote;  if (localized) {    needQuote=affix.indexOf(symbols.getZeroDigit()) >= 0 || affix.indexOf(symbols.getGroupingSeparator()) >= 0 || affix.indexOf(symbols.getDecimalSeparator()) >= 0 || affix.indexOf(symbols.getPercent()) >= 0 || affix.indexOf(symbols.getPerMill()) >= 0 || affix.indexOf(symbols.getDigit()) >= 0 || affix.indexOf(symbols.getPatternSeparator()) >= 0 || affix.indexOf(symbols.getMinusSign()) >= 0 || affix.indexOf(CURRENCY_SIGN) >= 0;  } else {    needQuote=affix.indexOf(PATTERN_ZERO_DIGIT) >= 0 || affix.indexOf(PATTERN_GROUPING_SEPARATOR) >= 0 || affix.indexOf(PATTERN_DECIMAL_SEPARATOR) >= 0 || affix.indexOf(PATTERN_PERCENT) >= 0 || affix.indexOf(PATTERN_PER_MILLE) >= 0 || affix.indexOf(PATTERN_DIGIT) >= 0 || affix.indexOf(PATTERN_SEPARATOR) >= 0 || affix.indexOf(PATTERN_MINUS) >= 0 || affix.indexOf(CURRENCY_SIGN) >= 0;  }  if (needQuote)   buffer.append('\'');  if (affix.indexOf('\'') < 0)   buffer.append(affix); else {    for (int j=0; j < affix.length(); ++j) {      char c=affix.charAt(j);      buffer.append(c);      if (c == '\'')       buffer.append(c);    }  }  if (needQuote)   buffer.append('\'');}  }
class C{  private void signalNotFull(){  final ReentrantLock putLock=this.putLock;  putLock.lock();  try {    notFull.signal();  }  finally {    putLock.unlock();  }}  }
class C{  protected void removeTiposExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  TipoDocumentoVitalForm frm=(TipoDocumentoVitalForm)form;  ResultadoRegistrosVO res=getGestionDocumentosVitalesBI(request).deleteTiposDocumentosVitales(frm.getIdsSeleccionados());  if (!res.getErrores().isEmpty())   obtenerErrores(request,true).add(res.getErrores());  goLastClientExecuteLogic(mapping,form,request,response);}  }
class C{  public static void close(final JGraphTab graphTab){  final List<CGraphPanel> graphs=new ArrayList<CGraphPanel>();  for (int i=0; i < graphTab.getTabCount(); i++) {    graphs.add(((CGraphPanel)graphTab.getComponentAt(i)));  }  close(SwingUtilities.getWindowAncestor(graphTab),graphs);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getBoolExpr_();}  }
class C{  public void reload(SolrCore core,SolrIndexSearcher searcher) throws IOException {  LOG.info("reload()");  if (dictionary == null && storeDir != null) {    FileInputStream is=new FileInputStream(new File(storeDir,factory.storeFileName()));    try {      if (lookup.load(is)) {        return;      }    }  finally {      IOUtils.closeWhileHandlingException(is);    }    LOG.debug("load failed, need to build Lookup again");  }  build(core,searcher);}  }
class C{  public void updatePrestamo(final PrestamoVO prestamo){  final String qual=new StringBuffer().append(" WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID,prestamo.getId())).toString();  updateVO(qual,TABLE_NAME,COLUMN_DEFINITIONS,prestamo);}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  if (contentHandler != null) {    contentHandler.ignorableWhitespace(ch,start,length);  }}  }
class C{  private String prepareTagRestriction() throws ObjectNotFoundException {  String tagFilter="";  String filter=listCriteria.getFilter();  if (filter != null && filter.trim().length() > 0) {    filter=filter.trim();    String[] parts=filter.split(",",2);    String tagLocale=locale;    if (parts.length == 2) {      tagLocale=parts[0];      filter=parts[1];    } else {      filter=parts[0];    }    tag=(Tag)dm.getReferenceByBusinessKey(new Tag(tagLocale,filter));    StringBuffer b=new StringBuffer();    b.append(" AND EXISTS");    b.append(" (");    b.append("   SELECT tpt ");    b.append("     FROM technicalproducttag AS tpt");    b.append("    WHERE tpt.technicalproduct_tkey = p.technicalproduct_tkey");    b.append("      AND tpt.tag_tkey = :tagKey");    b.append(" )");    tagFilter=b.toString();  }  return tagFilter;}  }
class C{  private static int availableCapacity(Buffer buffer){  return buffer.capacity() - buffer.limit();}  }
class C{  public Minutes toStandardMinutes(){  return Minutes.minutes(FieldUtils.safeMultiply(getValue(),DateTimeConstants.MINUTES_PER_WEEK));}  }
class C{  protected static String bitsToHash(BitSet bits){  StringBuilder hash=new StringBuilder();  for (int i=0; i < bits.size(); i+=5) {    int value=0;    for (int j=0; j < 5; j++) {      if (bits.get(i + j)) {        value|=(0x1 << j);      }    }    hash.insert(0,HASH_CHARS_ARRAY[value]);  }  return hash.toString();}  }
class C{  public static void tenantsListJson(){  List<OpenStackTenantsDataTable.OpenStackTenant> tenants=Lists.newArrayList();  for (  OpenStackTenantParam tenant : OpenStackTenantsUtils.getOpenStackTenants()) {    tenants.add(new OpenStackTenantsDataTable.OpenStackTenant(tenant));  }  renderJSON(DataTablesSupport.createJSON(tenants,params));}  }
class C{  @NonNull protected Set<ActEvent> loadEventData(@NonNull Context context){  throw new UnsupportedOperationException();}  }
class C{  public SQLTransactionRollbackException(Throwable cause){  super(cause);}  }
class C{  public static void stopInstances(VerificationHost host,Compute compute,String projectId,String zoneId,List<String> instanceNames,int batchSize,long interval) throws Throwable {  if (batchSize <= 0) {    throw new Exception("batch size cannot be less or equal to zero.");  }  if (interval <= 0) {    throw new Exception("waiting interval cannot be less or equal to zero");  }  if (instanceNames != null) {    int num=instanceNames.size();    com.google.api.services.compute.model.Operation[] ops=new com.google.api.services.compute.model.Operation[num];    String[] zones=new String[num];    String[] opIds=new String[num];    for (int i=0; i < num; i++) {      String instanceName=instanceNames.get(i);      try {        ops[i]=compute.instances().stop(projectId,zoneId,instanceName).execute();        zones[i]=ops[i].getZone();        zones[i]=extractZoneFromZoneUri(zones[i]);        opIds[i]=ops[i].getName();        if ((i + 1) % batchSize == 0) {          TimeUnit.MILLISECONDS.sleep(interval);        }      } catch (      Exception e) {        host.log(Level.WARNING,"Error when stopping instances: " + e.getMessage());      }    }    waitForOperationsDone(host,compute,projectId,ops,zones,opIds);  }}  }
class C{  private boolean doAkismet(final AkismetAction action,final Resource commentResource){  final Akismet akismet=new Akismet(HttpClients.createDefault());  final AkismetComment comment=getAkismetComment(commentResource);  akismet.setApiKey(getApiKey());  akismet.setApiConsumer(getDomainName());  boolean result=false;  try {    if (action == AkismetAction.CHECK_COMMENT) {      result=akismet.commentCheck(comment);    } else     if (action == AkismetAction.SUBMIT_SPAM) {      result=akismet.submitSpam(comment);    } else     if (action == AkismetAction.SUBMIT_HAM) {      result=akismet.submitHam(comment);    }  } catch (  AkismetException e) {    LOGGER.error("Could not communication with Akismet",e);  }  return result;}  }
class C{  public Search sort(SortField... fields){  sort=add(sort,fields);  return this;}  }
class C{  public Code(MethodSymbol meth,boolean fatcode,Position.LineMap lineMap,boolean varDebugInfo,StackMapFormat stackMap,boolean debugCode,CRTable crt,Symtab syms,Types types,Pool pool){  this.meth=meth;  this.fatcode=fatcode;  this.lineMap=lineMap;  this.lineDebugInfo=lineMap != null;  this.varDebugInfo=varDebugInfo;  this.crt=crt;  this.syms=syms;  this.types=types;  this.debugCode=debugCode;  this.stackMap=stackMap;switch (stackMap) {case CLDC:case JSR202:    this.needStackMap=true;  break;default :this.needStackMap=false;}state=new State();lvar=new LocalVar[20];this.pool=pool;}  }
class C{  public RouteLocation addLocation(Location location){  _IdNumber++;  _sequenceNum++;  String id=_id + "r" + Integer.toString(_IdNumber);  log.debug("adding new location to ({}) id: {}",getName(),id);  RouteLocation rl=new RouteLocation(id,location);  rl.setSequenceId(_sequenceNum);  Integer old=Integer.valueOf(_routeHashTable.size());  _routeHashTable.put(rl.getId(),rl);  setDirtyAndFirePropertyChange(LISTCHANGE_CHANGED_PROPERTY,old,Integer.valueOf(_routeHashTable.size()));  rl.addPropertyChangeListener(this);  return rl;}  }
class C{  public final void writeBoolean(boolean[] pa,int start,int n) throws IOException {  for (int i=0; i < n; i++) {    writeBoolean(pa[start + i]);  }}  }
class C{  @Override public int[] search(ASEvaluation ASEval,Instances data) throws Exception {  m_totalEvals=0;  if (!(ASEval instanceof SubsetEvaluator)) {    throw new Exception(ASEval.getClass().getName() + " is not a " + "Subset evaluator!");  }  if (ASEval instanceof UnsupervisedSubsetEvaluator) {    m_hasClass=false;  } else {    m_hasClass=true;    m_classIndex=data.classIndex();  }  SubsetEvaluator ASEvaluator=(SubsetEvaluator)ASEval;  m_numAttribs=data.numAttributes();  int i, j;  int best_size=0;  int size=0;  int done;  int sd=m_searchDirection;  BitSet best_group, temp_group;  int stale;  double best_merit;  double merit;  boolean z;  boolean added;  Link2 tl;  Hashtable<String,Double> lookup=new Hashtable<String,Double>(m_cacheSize * m_numAttribs);  int insertCount=0;  LinkedList2 bfList=new LinkedList2(m_maxStale);  best_merit=-Double.MAX_VALUE;  stale=0;  best_group=new BitSet(m_numAttribs);  m_startRange.setUpper(m_numAttribs - 1);  if (!(getStartSet().equals(""))) {    m_starting=m_startRange.getSelection();  }  if (m_starting != null) {    for (i=0; i < m_starting.length; i++) {      if ((m_starting[i]) != m_classIndex) {        best_group.set(m_starting[i]);      }    }    best_size=m_starting.length;    m_totalEvals++;  } else {    if (m_searchDirection == SELECTION_BACKWARD) {      setStartSet("1-last");      m_starting=new int[m_numAttribs];      for (i=0, j=0; i < m_numAttribs; i++) {        if (i != m_classIndex) {          best_group.set(i);          m_starting[j++]=i;        }      }      best_size=m_numAttribs - 1;      m_totalEvals++;    }  }  best_merit=ASEvaluator.evaluateSubset(best_group);  Object[] best=new Object[1];  best[0]=best_group.clone();  bfList.addToList(best,best_merit);  BitSet tt=(BitSet)best_group.clone();  String hashC=tt.toString();  lookup.put(hashC,new Double(best_merit));  while (stale < m_maxStale) {    added=false;    if (m_searchDirection == SELECTION_BIDIRECTIONAL) {      done=2;      sd=SELECTION_FORWARD;    } else {      done=1;    }    if (bfList.size() == 0) {      stale=m_maxStale;      break;    }    tl=bfList.getLinkAt(0);    temp_group=(BitSet)(tl.getData()[0]);    temp_group=(BitSet)temp_group.clone();    bfList.removeLinkAt(0);    int kk;    for (kk=0, size=0; kk < m_numAttribs; kk++) {      if (temp_group.get(kk)) {        size++;      }    }    do {      for (i=0; i < m_numAttribs; i++) {        if (sd == SELECTION_FORWARD) {          z=((i != m_classIndex) && (!temp_group.get(i)));        } else {          z=((i != m_classIndex) && (temp_group.get(i)));        }        if (z) {          if (sd == SELECTION_FORWARD) {            temp_group.set(i);            size++;          } else {            temp_group.clear(i);            size--;          }          tt=(BitSet)temp_group.clone();          hashC=tt.toString();          if (lookup.containsKey(hashC) == false) {            merit=ASEvaluator.evaluateSubset(temp_group);            m_totalEvals++;            if (insertCount > m_cacheSize * m_numAttribs) {              lookup=new Hashtable<String,Double>(m_cacheSize * m_numAttribs);              insertCount=0;            }            hashC=tt.toString();            lookup.put(hashC,new Double(merit));            insertCount++;          } else {            merit=lookup.get(hashC).doubleValue();          }          Object[] add=new Object[1];          add[0]=tt.clone();          bfList.addToList(add,merit);          if (m_debug) {            System.out.print("Group: ");            printGroup(tt,m_numAttribs);            System.out.println("Merit: " + merit);          }          if (sd == SELECTION_FORWARD) {            z=((merit - best_merit) > 0.00001);          } else {            if (merit == best_merit) {              z=(size < best_size);            } else {              z=(merit > best_merit);            }          }          if (z) {            added=true;            stale=0;            best_merit=merit;            best_size=size;            best_group=(BitSet)(temp_group.clone());          }          if (sd == SELECTION_FORWARD) {            temp_group.clear(i);            size--;          } else {            temp_group.set(i);            size++;          }        }      }      if (done == 2) {        sd=SELECTION_BACKWARD;      }      done--;    } while (done > 0);    if (!added) {      stale++;    }  }  m_bestMerit=best_merit;  return attributeList(best_group);}  }
class C{  public void initialize(){  if (connectionSource == null) {    throw new IllegalStateException("dataSource was not set on " + getClass().getSimpleName());  }}  }
class C{  private void testEJB(String serverName,InitialContext context){  System.out.println();  System.out.println("Connecting to EJB server ...");  try {    System.out.println("  Name=" + Status.JNDI_NAME);    Status sta=(Status)context.lookup(Status.JNDI_NAME);    System.out.println("  .. bean created");    System.out.println("  ServerVersion=" + sta.getMainVersion() + " "+ sta.getDateVersion());    System.out.println("  .. bean removed");  } catch (  Exception e) {    System.err.println("ERROR: Could not connect: " + e);    return;  }  System.out.println();  System.out.println("SUCCESS !!");}  }
class C{  protected void rotateLocations(Position terrainPosition,List<LatLon> locations){  LatLon center=LatLon.getCenter(this.getWwd().getModel().getGlobe(),locations);  Angle previousHeading=LatLon.greatCircleAzimuth(center,this.getPreviousPosition());  Angle deltaHeading=LatLon.greatCircleAzimuth(center,terrainPosition).subtract(previousHeading);  this.currentHeading=this.normalizedHeading(this.getCurrentHeading(),deltaHeading);  for (int i=0; i < locations.size(); i++) {    LatLon location=locations.get(i);    Angle heading=LatLon.greatCircleAzimuth(center,location);    Angle distance=LatLon.greatCircleDistance(center,location);    LatLon newLocation=LatLon.greatCircleEndPosition(center,heading.add(deltaHeading),distance);    locations.set(i,newLocation);  }}  }
class C{  public static void deleteFileIfExistsWithRetry(Path path) throws IOException {  try {    if (Files.exists(path))     deleteFileWithRetry0(path);  } catch (  InterruptedException x) {    throw new IOException("Interrupted while deleting.",x);  }}  }
class C{  public final void removeAllHelperTextColorIds(@NonNull final int... resourceIds){  ensureNotNull(resourceIds,"The array may not be null");  for (  int resourceId : resourceIds) {    removeHelperTextColorId(resourceId);  }}  }
class C{  public void fatal(Object message,Throwable exception){  log(Level.SEVERE,String.valueOf(message),exception);}  }
class C{  public Surface begin(){  target.bind();  beginBatch(batch);  return this;}  }
class C{  public void initializeAndInitEditor() throws EditorInitException {  reset(Scheduler.get());  ArgumentCaptor<EditorInitCallback> callBackCaptor=ArgumentCaptor.forClass(EditorInitCallback.class);  ArgumentCaptor<WidgetInitializedCallback> widgetInitializedCallbackCaptor=ArgumentCaptor.forClass(WidgetInitializedCallback.class);  final EditorAgent.OpenEditorCallback editorCallback=mock(EditorAgent.OpenEditorCallback.class);  doReturn(loader).when(loaderFactory).newLoader();  doReturn(editorWidget).when(editorWidgetFactory).createEditorWidget(Matchers.<List<String>>anyObject(),Matchers.<WidgetInitializedCallback>anyObject());  doReturn(document).when(editorWidget).getDocument();  textEditorPresenter.injectAsyncLoader(loaderFactory);  textEditorPresenter.initialize(configuration);  textEditorPresenter.init(editorInput,editorCallback);  verify(documentStorage).getDocument(any(VirtualFile.class),callBackCaptor.capture());  EditorInitCallback editorInitCallBack=callBackCaptor.getValue();  editorInitCallBack.onReady("test");  verify(editorWidgetFactory).createEditorWidget(anyListOf(String.class),widgetInitializedCallbackCaptor.capture());  WidgetInitializedCallback callback=widgetInitializedCallbackCaptor.getValue();  callback.initialized(editorWidget);}  }
class C{  public static UndertowFraction createDefaultAndEnableAJPFraction(){  return createDefaultFraction().enableAJP();}  }
class C{  public double dist(Vec x){  return dist(x,k.getQueryInfo(x));}  }
class C{  public boolean isQuestion(){  return (type != null) && type.isQuestion();}  }
class C{  private int drain(byte[] b,int off,int len){  int remaining=Math.min(len,byteBuffer.remaining());  byteBuffer.get(b,off,remaining);  return remaining;}  }
class C{  default String renderValue(Generator gen,M model){  return ifelse(model.getValue(),null,"");}  }
class C{  private static void intitializeHelpSet(Extension ext){  HelpBroker hb=ExtensionHelp.getHelpBroker();  if (hb == null) {    return;  }  URL helpSetUrl=getExtensionHelpSetUrl(ext);  if (helpSetUrl != null) {    try {      log.debug("Load help files for extension '" + ext.getName() + "' and merge with core help.");      HelpSet extHs=new HelpSet(ext.getClass().getClassLoader(),helpSetUrl);      hb.getHelpSet().add(extHs);    } catch (    HelpSetException e) {      log.error("An error occured while adding help file of extension '" + ext.getName() + "': "+ e.getMessage(),e);    }  }}  }
class C{  public void resetComponents(){  editDistribution=Boolean.FALSE;  distNameTextField.clear();  distNameTextField.removeStyleName("v-textfield-error");  distVersionTextField.clear();  distVersionTextField.removeStyleName(SPUIStyleDefinitions.SP_TEXTFIELD_LAYOUT_ERROR_HIGHTLIGHT);  distsetTypeNameComboBox.removeStyleName(SPUIStyleDefinitions.SP_TEXTFIELD_LAYOUT_ERROR_HIGHTLIGHT);  descTextArea.clear();  reqMigStepCheckbox.clear();}  }
class C{  public void startNewStream(Reader reader,boolean isInternalEntity){  StackedReader oldReader=this.currentReader;  this.readers.push(this.currentReader);  this.currentReader=new StackedReader();  if (isInternalEntity) {    this.currentReader.lineReader=null;    this.currentReader.pbReader=new PushbackReader(reader,2);  } else {    this.currentReader.lineReader=new LineNumberReader(reader);    this.currentReader.pbReader=new PushbackReader(this.currentReader.lineReader,2);  }  this.currentReader.systemId=oldReader.systemId;  this.currentReader.publicId=oldReader.publicId;}  }
class C{  public EColor fill(){  return self;}  }
class C{  public void showDialog(Container container){  this.container=container;  view.showDialog();  view.setAction(appContext.getDevMachine().getWsAgentBaseUrl() + "/project/upload/zipfolder" + container.getLocation());}  }
class C{  private static void bindLogger(InjectorImpl injector){  Key<Logger> key=Key.get(Logger.class);  LoggerFactory loggerFactory=new LoggerFactory();  injector.state.putBinding(key,new ProviderInstanceBindingImpl<>(injector,key,SourceProvider.UNKNOWN_SOURCE,loggerFactory,Scoping.UNSCOPED,loggerFactory,ImmutableSet.<InjectionPoint>of()));}  }
class C{  String prevNodesSerial(){  if (prevNodes.isEmpty())   return EMPTY;  StringBuilder sb=new StringBuilder();  for (  Node<T> n : prevNodes) {    sb.append(n.stringID).append(":");  }  sb.setLength(sb.length() - 1);  return sb.toString();}  }
class C{  @Override public boolean csConsistNeedsSeperateAddress(){  return false;}  }
class C{  public void writeFieldStop() throws TException {  writeByteDirect(TType.STOP);}  }
class C{  private void addVolumesToConsistencyGroup(JobContext jobContext,List<URI> volumesIds) throws DeviceControllerException {  if (volumesIds == null || volumesIds.isEmpty()) {    return;  }  try {    final DbClient dbClient=jobContext.getDbClient();    final List<Volume> volumes=dbClient.queryObject(Volume.class,volumesIds);    final URI consistencyGroupId=volumes.get(0).getConsistencyGroup();    BlockConsistencyGroup consistencyGroup=null;    if (consistencyGroupId != null) {      consistencyGroup=dbClient.queryObject(BlockConsistencyGroup.class,consistencyGroupId);    }    if (consistencyGroup == null) {      _log.info(String.format("Skipping step addVolumesToConsistencyGroup: volumes %s do not reference a consistency group.",volumesIds.toString()));      return;    }    final StorageSystem storage=dbClient.queryObject(StorageSystem.class,getStorageSystemURI());    final SmisStorageDevice storageDevice=(SmisStorageDevice)ControllerServiceImpl.getBean(SmisCommandHelper.getSmisStorageDeviceName(storage));    List<Volume> volumesToAddToCG=new ArrayList<Volume>();    String rgName=null;    for (    URI volumeId : volumesIds) {      Volume volume=dbClient.queryObject(Volume.class,volumeId);      if (!RPHelper.isAssociatedToRpVplexType(volume,dbClient,PersonalityTypes.TARGET,PersonalityTypes.METADATA) && NullColumnValueGetter.isNotNullValue(volume.getReplicationGroupInstance())) {        rgName=volume.getReplicationGroupInstance();        volumesToAddToCG.add(volume);      } else {        _log.info(String.format("Skipping step addVolumesToConsistencyGroup: Volume %s (%s) does not reference an existing consistency group on array %s.",volume.getLabel(),volume.getId(),volume.getStorageController()));      }    }    if (volumesToAddToCG.isEmpty()) {      _log.info("Skipping step addVolumesToConsistencyGroup: Volumes are not part of a consistency group");      return;    }    storageDevice.addVolumesToConsistencyGroup(storage,consistencyGroup,volumesToAddToCG,rgName,getTaskCompleter());  } catch (  Exception e) {    _log.error("Problem making SMI-S call: ",e);    ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());    getTaskCompleter().error(jobContext.getDbClient(),error);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (type: ");  result.append(type);  result.append(')');  return result.toString();}  }
class C{  public static String leakInfo(Context context,HeapDump heapDump,AnalysisResult result){  PackageManager packageManager=context.getPackageManager();  String packageName=context.getPackageName();  PackageInfo packageInfo;  try {    packageInfo=packageManager.getPackageInfo(packageName,0);  } catch (  PackageManager.NameNotFoundException e) {    throw new RuntimeException(e);  }  String versionName=packageInfo.versionName;  int versionCode=packageInfo.versionCode;  String info="In " + packageName + ":"+ versionName+ ":"+ versionCode+ ".\n";  if (result.leakFound) {    if (result.excludedLeak) {      info+="* LEAK CAN BE IGNORED.\n";    }    info+="* " + result.className;    if (!heapDump.referenceName.equals("")) {      info+=" (" + heapDump.referenceName + ")";    }    info+=" has leaked:\n" + result.leakTrace.toString() + "\n";  } else   if (result.failure != null) {    info+="* FAILURE:\n" + Log.getStackTraceString(result.failure) + "\n";  } else {    info+="* NO LEAK FOUND.\n\n";  }  info+="* Reference Key: " + heapDump.referenceKey + "\n"+ "* Device: "+ Build.MANUFACTURER+ " "+ Build.BRAND+ " "+ Build.MODEL+ " "+ Build.PRODUCT+ "\n"+ "* Android Version: "+ Build.VERSION.RELEASE+ " API: "+ Build.VERSION.SDK_INT+ " LeakCanary: "+ "\n"+ "* Durations: watch="+ heapDump.watchDurationMs+ "ms, gc="+ heapDump.gcDurationMs+ "ms, heap dump="+ heapDump.heapDumpDurationMs+ "ms, analysis="+ result.analysisDurationMs+ "ms"+ "\n";  return info;}  }
class C{  private void _perform_version_check(InstalledApp app,String request_source){  Log.v(MainActivity.TAG,"Launching version check for " + app.get_display_name());  UpdateSource source=UpdateSource.get_source(app);  if (source == null) {    Log.v(MainActivity.TAG,"Could not find an update source for ");    return;  }  GetResult gr=get_page(source,app);  if (gr.get_status() != GetResult.status_code.SUCCESS) {    if (gr.get_status() == GetResult.status_code.ERROR_404 && app.get_update_source() == null) {      source=UpdateSource.get_next_source(app,source);      while (source != null) {        gr=get_page(source,app);        if (gr.get_status() == GetResult.status_code.SUCCESS) {          break;        }        source=UpdateSource.get_next_source(app,source);      }    }    if (source == null || gr.get_status() == GetResult.status_code.ERROR_404) {      app.set_error_message(getResources().getString(R.string.no_data_found));    } else     if (gr.get_status() != GetResult.status_code.SUCCESS && gr.get_status() != GetResult.status_code.NETWORK_ERROR) {      app.set_last_check_error(true);      if (gr.get_exception() != null) {        app.set_error_message(gr.get_exception().getLocalizedMessage());      }    } else     if (gr.get_status() == GetResult.status_code.NETWORK_ERROR && AppDisplayFragment.APP_DISPLAY_FRAGMENT_SOURCE.equals(request_source)) {      EventBus.getDefault().post(new CreateToastMessage(getResources().getString(R.string.network_error)));    }  }  if (source != null && gr.get_status() == GetResult.status_code.SUCCESS) {    UpdateSourceEntry entry=source.get_entry(app.get_package_name());    if (entry == null) {      Log.v(MainActivity.TAG,"No entry or regular expression specified for " + app.get_package_name() + " in "+ source.get_name()+ "!");      return;    }    VersionResult vr=apply_regexps(gr.get_page_contents(),entry,app.get_package_name());    if (vr.get_latest_version() == null) {      app.set_error_message(getResources().getString(R.string.regexp_no_match));    } else     if (app.get_latest_version() == null || !app.get_latest_version().equals(vr.get_latest_version())) {      app.set_last_check_error(false);      app.set_latest_version(vr.get_latest_version());      if (app.is_update_available()) {        app.set_download_url(vr.get_download_url());        if (app.get_download_id() != 0) {          app.clean_downloads(this);        }      } else {        app.set_download_url(null);      }    } else {      if (app.get_download_url() == null || !app.get_download_url().equals(vr.get_download_url())) {        app.set_download_url(vr.get_download_url());      }      app.set_last_check_error(false);    }    app.set_last_check_date(new Date());    if (app.get_update_source() == null && !app.is_last_ckeck_error()) {      app.set_update_source(source.get_name());    }  }  app.set_currently_checking(false);  if (app.is_update_available() && app.get_download_url() != null && ScheduledCheckService.SERVICE_SOURCE.equals(request_source) && PreferenceManager.getDefaultSharedPreferences(this).getBoolean(SettingsFragment.KEY_PREF_DOWNLOAD_APKS,false)) {    Log.v(MainActivity.TAG,"Automatically downloading the latest APK.");    _download_apk(app,request_source);  } else {    app.save();    EventBusHelper.post_sticky(ModelModifiedMessage.event_type.APP_UPDATED,app.get_package_name());  }  try {    if (source != null) {      Thread.sleep(source.get_request_delay());    }  } catch (  InterruptedException ignored) {  }}  }
class C{  public static <T,R>Cases<T,R> ofList(final List<Case<T,R>> cases){  return new Cases<>(cases.stream().map(null).reduce(ConsPStack.empty(),null),true);}  }
class C{  @Override protected void onSaveInstanceState(Bundle outState){  outState.putParcelable("location",myLocationOverlay.getLocation());  outState.putBoolean("tracking_mode",mTrackingMode);  outState.putParcelable("start",startPoint);  outState.putParcelable("destination",destinationPoint);  outState.putParcelableArrayList("viapoints",viaPoints);  mFriendsManager.onSaveInstanceState(outState);  savePrefs();}  }
class C{  public final int indexOfLabel(int label){  if (label >= labelToIndex.size()) {    return -1;  } else {    return labelToIndex.get(label);  }}  }
class C{  public void resetTimer(){  timer=0;}  }
class C{  public static boolean endsWith(String str,char suffix){  return str != null && str.length() > 0 && str.charAt(str.length() - 1) == suffix;}  }
class C{  public void addRPZone(final String region,final StendhalRPZone zone){  super.addRPZone(zone);  if (!regionMap.containsKey(region)) {    regionMap.put(region,new HashSet<StendhalRPZone>());  }  regionMap.get(region).add(zone);}  }
class C{  public Reader(){  setRPClass("sign");  put(Actions.TYPE,"sign");  put(Actions.ACTION,Actions.READ);  put("class","transparent");  setResistance(0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.959 -0500",hash_original_method="DCDD00DDB3DA5C0826A1E2E2E5E3FA67",hash_generated_method="308B89FD1FC1D75CE1456429332393A4") public void pause(){  if (!mTimerPaused) {    mTimerPaused=true;    mHasDeferredTimers=false;  }}  }
class C{  public GridTestSafeThreadFactory(String threadName,boolean interruptAll){  this.threadName=threadName;  this.interruptAll=interruptAll;}  }
class C{  public boolean hasNext(){  currentToken=nextToken();  return currentToken != null;}  }
class C{  public static UniformPair<Set<MultiKey<EventBean>>> flattenBatchJoin(List<UniformPair<Set<MultiKey<EventBean>>>> joinPostings){  if (joinPostings.isEmpty()) {    return new UniformPair<Set<MultiKey<EventBean>>>(null,null);  }  if (joinPostings.size() == 1) {    return new UniformPair<Set<MultiKey<EventBean>>>(joinPostings.get(0).getFirst(),joinPostings.get(0).getSecond());  }  Set<MultiKey<EventBean>> newEvents=new LinkedHashSet<MultiKey<EventBean>>();  Set<MultiKey<EventBean>> oldEvents=new LinkedHashSet<MultiKey<EventBean>>();  for (  UniformPair<Set<MultiKey<EventBean>>> pair : joinPostings) {    Set<MultiKey<EventBean>> newData=pair.getFirst();    Set<MultiKey<EventBean>> oldData=pair.getSecond();    if (newData != null) {      newEvents.addAll(newData);    }    if (oldData != null) {      oldEvents.addAll(oldData);    }  }  return new UniformPair<Set<MultiKey<EventBean>>>(newEvents,oldEvents);}  }
class C{  public void testPreferencesChange() throws Exception {  PreferencesUtils.setString(context,R.string.stats_rate_key,PreferencesUtils.STATS_RATE_DEFAULT);  PreferencesUtils.setString(context,R.string.stats_units_key,PreferencesUtils.STATS_UNITS_DEFAULT);  PreferencesUtils.setInt(context,R.string.recording_gps_accuracy_key,PreferencesUtils.RECORDING_GPS_ACCURACY_DEFAULT);  PreferencesUtils.setInt(context,R.string.recording_distance_interval_key,PreferencesUtils.RECORDING_DISTANCE_INTERVAL_DEFAULT);  dataSource.registerOnSharedPreferenceChangeListener(capture(preferenceChangeListenerCapture));  expect(trackDataListener1.onMetricUnitsChanged(true)).andReturn(false);  expect(trackDataListener1.onReportSpeedChanged(true)).andReturn(false);  expect(trackDataListener1.onRecordingGpsAccuracy(PreferencesUtils.RECORDING_GPS_ACCURACY_DEFAULT)).andReturn(false);  expect(trackDataListener1.onRecordingDistanceIntervalChanged(PreferencesUtils.RECORDING_DISTANCE_INTERVAL_DEFAULT)).andReturn(false);  expect(trackDataListener1.onMapTypeChanged(PreferencesUtils.MAP_TYPE_DEFAUlT)).andReturn(false);  expect(trackDataListener2.onMetricUnitsChanged(true)).andReturn(false);  expect(trackDataListener2.onReportSpeedChanged(true)).andReturn(false);  expect(trackDataListener2.onRecordingGpsAccuracy(PreferencesUtils.RECORDING_GPS_ACCURACY_DEFAULT)).andReturn(false);  expect(trackDataListener2.onRecordingDistanceIntervalChanged(PreferencesUtils.RECORDING_DISTANCE_INTERVAL_DEFAULT)).andReturn(false);  expect(trackDataListener2.onMapTypeChanged(PreferencesUtils.MAP_TYPE_DEFAUlT)).andReturn(false);  replay();  trackDataHub.start();  trackDataHub.registerTrackDataListener(trackDataListener1,EnumSet.of(TrackDataType.PREFERENCE));  trackDataHub.registerTrackDataListener(trackDataListener2,EnumSet.of(TrackDataType.PREFERENCE));  verifyAndReset();  expect(trackDataListener1.onReportSpeedChanged(false)).andReturn(false);  expect(trackDataListener2.onReportSpeedChanged(false)).andReturn(false);  replay();  PreferencesUtils.setString(context,R.string.stats_rate_key,context.getString(R.string.stats_rate_pace));  OnSharedPreferenceChangeListener listener=preferenceChangeListenerCapture.getValue();  listener.onSharedPreferenceChanged(sharedPreferences,PreferencesUtils.getKey(context,R.string.stats_rate_key));  verifyAndReset();  expect(trackDataListener1.onMetricUnitsChanged(false)).andReturn(false);  expect(trackDataListener2.onMetricUnitsChanged(false)).andReturn(false);  replay();  String imperialUnits=context.getString(R.string.stats_units_imperial);  PreferencesUtils.setString(context,R.string.stats_units_key,imperialUnits);  listener.onSharedPreferenceChanged(sharedPreferences,PreferencesUtils.getKey(context,R.string.stats_units_key));  verifyAndReset();}  }
class C{  @Override protected void finalize() throws Throwable {  try {synchronized (buf) {      if (buf.isOpen()) {        close();        if (log.isInfoEnabled())         log.info("Finalized temp store");      }    }  } catch (  Throwable t) {    log.error("Ignoring: " + t,t);  }  super.finalize();}  }
class C{  public TimeField(String name){  super(name,Field.Type.TIME);}  }
class C{  @SuppressWarnings("unchecked") public static <E>Iterator<E> emptyIterator(){  return (Iterator<E>)INSTANCE;}  }
class C{  private static byte char64(char x){  if ((int)x < 0 || (int)x > index_64.length)   return -1;  return index_64[(int)x];}  }
class C{  public static byte[] compress(String str) throws IOException {  if (str == null || str.length() == 0) {    return null;  }  ByteArrayOutputStream out=new ByteArrayOutputStream();  GZIPOutputStream gzip=new GZIPOutputStream(out);  gzip.write(str.getBytes("UTF-8"));  gzip.close();  byte[] outBytes=out.toByteArray();  return outBytes;}  }
class C{  synchronized void removeDeadNotifier(NotifierArgs info){  if (debug) {    System.err.println("EventSupport.removeDeadNotifier: " + info.name);  }  notifiers.remove(info);}  }
class C{  private void loadNonLocalGateways() throws XMPPException {  if (roster != null) {    for (    RosterEntry entry : roster.getEntries()) {      if (entry.getUser().equalsIgnoreCase(StringUtils.parseServer(entry.getUser())) && !entry.getUser().contains(connection.getHost())) {        discoverGateway(entry.getUser());      }    }  }}  }
class C{  public GlassFishInjectionProvider(){  theSwitch=Switch.getSwitch();  invokeMgr=theSwitch.getInvocationManager();  injectionManager=theSwitch.getInjectionManager();}  }
class C{  public RestoreSnapshotRequest repository(String repository){  this.repository=repository;  return this;}  }
class C{  public boolean hasSubscribers(){  boolean nonEmpty=false;  if (!closed) {synchronized (this) {      for (BufferedSubscription<T> b=clients; b != null; ) {        BufferedSubscription<T> next=b.next;        if (b.isDisabled()) {          b.next=null;          b=clients=next;        } else {          nonEmpty=true;          break;        }      }    }  }  return nonEmpty;}  }
class C{  public void dispose(){  m_graphSynchronizer.dispose();}  }
class C{  protected int decrypt(int b,long fp){  b=b ^ (cryptoKeys[((int)(fp)) % 128]);  b=(((b & 0x0F) << 4) | ((b & 0xF0) >> 4));  return b;}  }
class C{  @Override public HttpClient retrieve(){  HttpClientOptions options;  if (config != null) {    options=new HttpClientOptions(config);  } else {    options=new HttpClientOptions();  }  options.setDefaultPort(location.getPort()).setDefaultHost(location.getHost());  if (location.isSsl()) {    options.setSsl(true);  }  return vertx.createHttpClient(options);}  }
class C{  public final SSLEngine createSSLEngine(String peerHost,int peerPort){  try {    return contextSpi.engineCreateSSLEngine(peerHost,peerPort);  } catch (  AbstractMethodError e) {    UnsupportedOperationException unsup=new UnsupportedOperationException("Provider: " + getProvider() + " does not support this operation");    unsup.initCause(e);    throw unsup;  }}  }
class C{  public boolean changePrivilege(String user,int newPrivilege){  if (user == null)   return false;  String sql2="update " + APPUSER_TABLENAME + " set USER_PRIVILEGE=? where USERNAME=?";  Connection conn=null;  PreparedStatement pstmt=null;  try {    conn=getConnection();    AppUser appUser=this.retrieveUserInfo(conn,user);    if (appUser == null)     return false;    appUser.setUserprivilege(newPrivilege);    pstmt=conn.prepareStatement(sql2);    pstmt.setInt(1,appUser.getUserprivilege());    pstmt.setString(2,appUser.getName().toLowerCase());    pstmt.execute();    conn.commit();    return true;  } catch (  Exception ex) {    logger.log(Level.SEVERE,"Exception",ex);    if (conn != null)     try {      conn.rollback();    } catch (    Exception iex) {    }    throw new RuntimeException(ex);  } finally {    DBUtils.close(pstmt);    DBUtils.close(conn);  }}  }
class C{  public static long[] hashToLongs(long datum,long seed){  long[] data={datum};  return hash(data,seed);}  }
class C{  private void publishTemplateFile() throws Exception {  InputStream is=null;  OutputStream os=null;  try {    is=getClass().getClassLoader().getResourceAsStream(LOG4J_TEMPLATE);    if (is == null) {      logger.warn("Template file not found: " + LOG4J_TEMPLATE);    } else {      os=new FileOutputStream(logFile);      byte[] buffer=new byte[1024];      int length;      while ((length=is.read(buffer)) > 0) {        os.write(buffer,0,length);      }    }  } catch (  Exception e) {    logger.error("Failed to publish template file from " + LOG4J_TEMPLATE + " to "+ logFile.getAbsolutePath(),e);  } finally {    if (is != null) {      try {        is.close();      } catch (      IOException e) {      }    }    if (os != null) {      try {        os.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public static boolean isWritable(final String file,final boolean makeDirs){  if (TextUtils.isEmpty(file)) {    Log.e(FileUtils.class,"isWritable(): Null or Empty parameter given");    return false;  }  return isWritable(new File(file),makeDirs);}  }
class C{  public Boolean isWaitForHeartbeat(){  return waitForHeartbeat;}  }
class C{  public void writeChar(int v){  try {    dos.writeChar(v);  } catch (  Exception e) {    handleException(e);  }}  }
class C{  public boolean remove(Object obj){  int index=index(obj);  if (index >= 0) {    removeAt(index);    return true;  }  return false;}  }
class C{  public static String parseReleaseWithBuildNumber(){  ManifestParser manifest=new ManifestParser();  manifest.parse();  return manifest.getReleaseWithBuildNumber();}  }
class C{  public static String stripOffLeadingZeros(final String s){  final int lastNullIdx=s.lastIndexOf('\0');  return lastNullIdx < 0 ? s : s.substring(lastNullIdx + 1);}  }
class C{  public static void showOperationError(final Project project,final String operation,final String message){  Messages.showErrorDialog(project,message,GitBundle.message("error.occurred.during",operation));}  }
class C{  @Singleton @Provides ObserveOn provideObserveOn(){  return (null);}  }
class C{  public void testRead3() throws Exception {  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};  TestInputStream tis=new TestInputStream(data);  CipherInputStream cis=new CipherInputStream(tis,new NullCipher());  int expected=data.length;  byte[] result=new byte[expected];  int skip=2;  int ind=skip;  cis.read(null,0,skip);  int got=skip + cis.read(result,0,1);  while (true) {    for (int j=0; j < got - ind; j++) {      assertEquals("read(byte[] b, int off, int len) " + "returned incorrect data.",result[j],data[ind + j]);    }    if (got == expected) {      break;    } else     if (got > expected) {      fail("The data returned by " + "read(byte[] b, int off, int len) " + "is larger than expected.");    } else {      ind=got;      got+=cis.read(result,0,3);    }  }  if (cis.read(result,0,1) != -1) {    fail("read() should return -1 at the end of the stream.");  }}  }
class C{  public Object trunc(InstanceScope scope,Object v){  if (v == null)   return null;  if (v instanceof List) {    List<?> elems=(List<?>)v;    if (elems.size() <= 1)     return null;    return elems.subList(0,elems.size() - 1);  }  v=convertAnythingIteratableToIterator(scope,v);  if (v instanceof Iterator) {    List<Object> a=new ArrayList<Object>();    Iterator<?> it=(Iterator<?>)v;    while (it.hasNext()) {      Object o=it.next();      if (it.hasNext())       a.add(o);    }    return a;  }  return null;}  }
class C{  @Override public void run(){  amIActive=true;  ShapeType shapeType;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String outputFile=args[0];  String shapeTypeStr=args[1].toLowerCase();  if (outputFile.isEmpty() || shapeTypeStr.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {switch (shapeTypeStr) {case "point":      shapeType=ShapeType.POINT;    break;case "pointz":  shapeType=ShapeType.POINTZ;break;case "pointm":shapeType=ShapeType.POINTM;break;case "multipoint":shapeType=ShapeType.MULTIPOINT;break;case "multipointz":shapeType=ShapeType.MULTIPOINTZ;break;case "multipointm":shapeType=ShapeType.MULTIPOINTM;break;case "polyline":shapeType=ShapeType.POLYLINE;break;case "polylinez":shapeType=ShapeType.POLYLINEZ;break;case "polylinem":shapeType=ShapeType.POLYLINEM;break;case "polygon":shapeType=ShapeType.POLYGON;break;case "polygonz":shapeType=ShapeType.POLYGONZ;break;case "polygonm":shapeType=ShapeType.POLYGONM;break;default :showFeedback("The specified ShapeType is not supported or recognized");return;}DBFField[] fields=new DBFField[1];fields[0]=new DBFField();fields[0].setName("FID");fields[0].setDataType(DBFField.DBFDataType.NUMERIC);fields[0].setFieldLength(10);fields[0].setDecimalCount(0);ShapeFile output=new ShapeFile(outputFile,shapeType,fields);output.write();returnData(outputFile);myHost.editVector();showFeedback("Operation complete.");} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  @Override public void nextTile(){  if ((x+=TILE_SIZE) >= cache.bboxX1) {    x=cache.bboxX0;    y+=TILE_SIZE;    if (y < cache.bboxY1) {      this.rdr.endRendering(y);    }  }}  }
class C{  @SuppressWarnings("unchecked") final public void release(){  if (parent == null)   return;  if (--n == 0) {    n=batchSize;synchronized (parent) {      parent.add((T)this);    }    clear();  }  parent.locks[threadHash].unlock();}  }
class C{  public boolean isUninstall(){  Object oo=get_Value(COLUMNNAME_Uninstall);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  PiePlot clone=(PiePlot)super.clone();  clone.sectionPaintMap=(PaintMap)this.sectionPaintMap.clone();  clone.sectionOutlinePaintMap=(PaintMap)this.sectionOutlinePaintMap.clone();  clone.sectionOutlineStrokeMap=(StrokeMap)this.sectionOutlineStrokeMap.clone();  clone.explodePercentages=new TreeMap<Comparable<?>,Number>(this.explodePercentages);  if (this.labelGenerator != null) {    clone.labelGenerator=(PieSectionLabelGenerator)ObjectUtilities.clone(this.labelGenerator);  }  if (clone.dataset != null) {    clone.dataset.addChangeListener(clone);  }  if (this.urlGenerator instanceof PublicCloneable) {    clone.urlGenerator=(PieURLGenerator)ObjectUtilities.clone(this.urlGenerator);  }  clone.legendItemShape=ShapeUtilities.clone(this.legendItemShape);  if (this.legendLabelGenerator != null) {    clone.legendLabelGenerator=(PieSectionLabelGenerator)ObjectUtilities.clone(this.legendLabelGenerator);  }  if (this.legendLabelToolTipGenerator != null) {    clone.legendLabelToolTipGenerator=(PieSectionLabelGenerator)ObjectUtilities.clone(this.legendLabelToolTipGenerator);  }  if (this.legendLabelURLGenerator instanceof PublicCloneable) {    clone.legendLabelURLGenerator=(PieURLGenerator)ObjectUtilities.clone(this.legendLabelURLGenerator);  }  return clone;}  }
class C{  private Map<String,BoundryWisePropUsgeBean> initPropTypeMap(Map<String,BoundryWisePropUsgeBean> propTypeMap){  LOGGER.debug("Entered into initPropTypeMap method");  LOGGER.debug("PropTypeMap : " + (propTypeMap != null ? propTypeMap : ZERO));  BoundryWisePropUsgeBean bean=new BoundryWisePropUsgeBean();  bean.setArrDmd(ZERO);  bean.setCurrDmd(ZERO);  bean.setTotalDemand(ZERO);  bean.setPropCount(0);  List<PropertyTypeMaster> propTypeMstrList=propertyTypeMasterDAO.findAll();  for (  PropertyTypeMaster propTypeMstr : propTypeMstrList) {    propTypeMap.put(propTypeMstr.getId().toString(),bean);  }  LOGGER.debug("PropTypeMap : " + (propTypeMap != null ? propTypeMap : ZERO));  LOGGER.debug("Exit from initPropTypeMap method");  return propTypeMap;}  }
class C{  @Override public int start_production(){  return 1;}  }
class C{  public OpenIntDoubleHashMap(int initialCapacity,double minLoadFactor,double maxLoadFactor){  setUp(initialCapacity,minLoadFactor,maxLoadFactor);}  }
class C{  public void keyPressed(KeyEvent e){}  }
class C{  private ElementKey<?,?> calculateKey(ElementKey<?,?> key,ElementKey<?,?> sourceKey){  Class<?> keyType=key.getElementType();  Class<? extends Element> sourceType=sourceKey.getElementType();  if (keyType != sourceType && keyType.isAssignableFrom(sourceType)) {    key=ElementKey.of(key.getId(),key.getDatatype(),sourceType);  }  return key;}  }
class C{  private boolean bothLinksHaveSameLinkStats(Link linkA,Link linkB){  boolean bothLinksHaveSameLinkStats=true;  if (!linkA.getAllowedModes().equals(linkB.getAllowedModes())) {    bothLinksHaveSameLinkStats=false;  }  if (linkA.getFreespeed() != linkB.getFreespeed()) {    bothLinksHaveSameLinkStats=false;  }  if (linkA.getCapacity() != linkB.getCapacity()) {    bothLinksHaveSameLinkStats=false;  }  if (linkA.getNumberOfLanes() != linkB.getNumberOfLanes()) {    bothLinksHaveSameLinkStats=false;  }  return bothLinksHaveSameLinkStats;}  }
class C{  private void updateDB(Map<Integer,List<Group>> parsedGroupsByType,List<Rule> parsedRules) throws AdeException {  RulesQueryImpl.modifyRules(parsedRules);  for (  GroupType groupType : GroupType.values()) {    int groupTypeVal=groupType.getValue();    List<Group> groups=parsedGroupsByType.get(groupTypeVal);    GroupsQueryImpl.modifyGroups(groups);  }}  }
class C{  public static CloudFileWriter from(Snapshot snapshot,FileConfig fileConfig){  return new CloudFileWriter(FileDecrypter.create(),snapshot.keyBagManager(),SnapshotDirectory.from(snapshot,fileConfig),fileConfig.setLastModifiedTimestamp());}  }
class C{  public XCalElement child(ICalDataType dataType){  String localName=dataType.getName().toLowerCase();  for (  Element child : children()) {    if (localName.equals(child.getLocalName()) && XCAL_NS.equals(child.getNamespaceURI())) {      return new XCalElement(child);    }  }  return null;}  }
class C{  @Override public void onGuiClosed(){  Keyboard.enableRepeatEvents(false);}  }
class C{  protected String doIt() throws Exception {  MWindow window=new MWindow(getCtx(),p_AD_Window_ID,get_TrxName());  MTab[] tabs=window.getTabs(true,get_TrxName());  for (  MTab tab : tabs) {    MTable table=null;    String format=null;    if (tab.isActive()) {      if (p_IsInsertRecord & tab.isInsertRecord()) {        table=new MTable(getCtx(),tab.getAD_Table_ID(),get_TrxName());        format=createFormat(table);      } else       if (!p_IsInsertRecord) {        table=new MTable(getCtx(),tab.getAD_Table_ID(),get_TrxName());        format=createFormat(table);      } else       continue;      if (tab.getTabLevel() > m_level) {        m_parent_table=table.getTableName();        m_format_value=format;      }    }  }  return "ok";}  }
class C{  protected void sendAck(Node remote,Node local,NodeSecurity localSecurity,List<IncomingBatch> list,ITransportManager transportManager) throws IOException {  Exception error=null;  int sendAck=-1;  int numberOfStatusSendRetries=parameterService.getInt(ParameterConstants.DATA_LOADER_NUM_OF_ACK_RETRIES);  for (int i=0; i < numberOfStatusSendRetries && sendAck != HttpURLConnection.HTTP_OK; i++) {    try {      sendAck=transportManager.sendAcknowledgement(remote,list,local,localSecurity.getNodePassword(),parameterService.getRegistrationUrl());    } catch (    IOException ex) {      error=ex;    }catch (    RuntimeException ex) {      error=ex;    }    if (sendAck != HttpURLConnection.HTTP_OK) {      log.warn("Ack was not sent successfully on try number {}.  {}",i + 1,error != null ? error.getMessage() : "");      if (i < numberOfStatusSendRetries - 1) {        AppUtils.sleep(parameterService.getLong(ParameterConstants.DATA_LOADER_TIME_BETWEEN_ACK_RETRIES));      } else       if (error instanceof RuntimeException) {        throw (RuntimeException)error;      } else       if (error instanceof IOException) {        throw (IOException)error;      } else {        throw new IOException(Integer.toString(sendAck));      }    }  }}  }
class C{  public static CompletableFuture<Transport> bind(){  return bind(TransportConfig.defaultConfig());}  }
class C{  public Code39Reader(){  this(false);}  }
class C{  @Override public final String rightSide(int index,Instances data){  return m_c45S.rightSide(index,data);}  }
class C{  protected void prepareLabel(OMText text){  rrAttributes.setTo(text);  text.setLinePaint(rrAttributes.getLinePaint());  text.setTextMatteColor((Color)rrAttributes.getMattingPaint());  text.setTextMatteStroke(new BasicStroke(4));}  }
class C{  public Adapter createEObjectAdapter(){  return null;}  }
class C{  @Override public void before(PropertyInfoRestRep oldProps,PropertyInfoRestRep newProps){  String newValue=newProps.getProperty(Constants.SYSTEM_UPDATE_CHECK_FREQUENCY_HOURS);  if (newValue == null) {    return;  }  int intNewValue=Integer.parseInt(newValue);  if (intNewValue <= 0) {    throw BadRequestException.badRequests.upgradeCheckFrequencyNotPositive();  }}  }
class C{  public UIError(){  initComponents();}  }
class C{  public void updateStatus(JobContext jobContext) throws Exception {  if (status == JobStatus.SUCCESS) {    taskCompleter.ready(jobContext.getDbClient());  } else   if (status == JobStatus.FAILED || status == JobStatus.FATAL_ERROR || status == JobStatus.ERROR) {    ServiceError error=DeviceControllerErrors.cinder.jobFailed(errorDescription);    taskCompleter.error(jobContext.getDbClient(),error);  }}  }
class C{  public synchronized void delete(Long low,Long high) throws ReplicatorException, InterruptedException {  assertWritable();  diskLog.delete(this,low,high);}  }
class C{  public TSink<JsonObject> send(TStream<JsonObject> stream){  Objects.requireNonNull(stream,"stream");  return sendText(stream,JsonFunctions.asString());}  }
class C{  public boolean isTainted(final Collection<String> registers){  Preconditions.checkNotNull(registers,"Error: Registers argument can not be null");  for (  final String register : registers) {    if (m_taintedRegs.contains(register)) {      return true;    }  }  return false;}  }
class C{  public boolean isDisconnected(){  return disconnected;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public boolean isReadOnly() throws SQLException {  try {    debugCodeCall("isReadOnly");    return conn.isReadOnly();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private String expand(String item,String abbrev){  int seplen=sep.length();  int suffixStart=item.length() - (abbrev.length() + 1);  int slash=item.lastIndexOf(sep,suffixStart - seplen);  return slash >= 0 ? item.substring(slash + seplen) : item;}  }
class C{  protected void handleReaderImport(Reader in,JTextComponent c) throws BadLocationException, IOException {  char[] buff=new char[1024];  int nch;  boolean lastWasCR=false;  int last;  StringBuffer sbuff=null;  while ((nch=in.read(buff,0,buff.length)) != -1) {    if (sbuff == null) {      sbuff=new StringBuffer(nch);    }    last=0;    for (int counter=0; counter < nch; counter++) {switch (buff[counter]) {case '\r':        if (lastWasCR) {          if (counter == 0)           sbuff.append('\n'); else           buff[counter - 1]='\n';        } else         lastWasCR=true;      break;case '\n':    if (lastWasCR) {      if (counter > (last + 1))       sbuff.append(buff,last,counter - last - 1);      lastWasCR=false;      last=counter;    }  break;default :if (lastWasCR) {  if (counter == 0)   sbuff.append('\n'); else   buff[counter - 1]='\n';  lastWasCR=false;}break;}}if (last < nch) {if (lastWasCR) {if (last < (nch - 1)) sbuff.append(buff,last,nch - last - 1);} else sbuff.append(buff,last,nch - last);}}if (withinSameComponent) {((RTextArea)c).beginAtomicEdit();}if (lastWasCR) sbuff.append('\n');c.replaceSelection(sbuff != null ? sbuff.toString() : "");}  }
class C{  public ImageIcon createImageIcon(String filename,String description){  if (getSwingSet2() != null) {    return getSwingSet2().createImageIcon(filename,description);  } else {    String path="/resources/images/" + filename;    return new ImageIcon(getClass().getResource(path),description);  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("VAccount[");  sb.append(m_value).append("]");  return sb.toString();}  }
class C{  public UnionIteration(Iteration<? extends E,X>... args){  this(Arrays.asList(args));}  }
class C{  public static Integer[] transformIntArray(int[] source){  Integer[] destin=new Integer[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public final void testValidateCaseInsensitiveNotAllowingSpacesSucceeds(){  char[] allowedCharacters=new char[]{'-'};  LetterOrNumberValidator characterOrNumberValidator=new LetterOrNumberValidator("foo",Case.CASE_INSENSITIVE,false,allowedCharacters);  assertTrue(characterOrNumberValidator.validate("Ab1-"));}  }
class C{  public ArraySpliterator(Object[] array,int additionalCharacteristics){  this(array,0,array.length,additionalCharacteristics);}  }
class C{  static String add_escapes(String str){  StringBuilder retval=new StringBuilder();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public static void write(byte x){  writeByte(x & 0xff);}  }
class C{  protected boolean boundary(int index,Word word,Word next1,Word next2){  char punctuation=word.form.charAt(index);  Word prefix=new Word(word.form.substring(0,index));  Word suffix=new Word(word.form.substring(index + 1));  Word root=new Word(prefix.form);  while (root.form.length() > 0 && "\"'`{[(".indexOf(root.form.charAt(0)) != -1)   root.form=root.form.substring(1);  if ("yahoo!".equalsIgnoreCase(root.form + punctuation))   return false;  if (punctuation == '?' || punctuation == '!')   return next1 == null || suffix.form.length() == 0 && (next1.capitalized || startsWithQuote(next1) || next1.form.equals(".")|| next2 != null && next2.capitalized && (next1.form.equals("--") || next1.form.equals("-RBR-"))) || isClose(suffix) && hasStartMarker(next1);  if (next1 == null)   return true;  if (suffix.form.length() == 0) {    if (startsWithQuote(next1) || startsWithOpenBracket(next1))     return true;    if (next1.form.equals("-RBR-") && next2 != null && next2.form.equals("--"))     return false;    if (isClosingBracket(next1))     return true;    if (prefix.form.length() == 0 && next1.form.equals("."))     return false;    if (next1.form.equals("."))     return true;    if (next1.form.equals("--") && next2 != null && next2.capitalized && endsWithQuote(prefix))     return false;    if (next1.form.equals("--") && next2 != null && (next2.capitalized || startsWithQuote(next2)))     return true;    if (next1.capitalized || Character.isDigit(next1.form.charAt(0)))     return isTerminal(root) || !((root.form.equals("p.m") || root.form.equals("a.m")) && isTimeZone(next1) || isHonorific(root) || startsWithQuote(prefix) || startsWithOpenBracket(prefix) && !endsWithCloseBracket(prefix) || capitalsAndDots.matcher(prefix.form).find() && !sentenceBeginner(next1));  }  return isClose(suffix) && hasStartMarker(next1) && !isHonorific(root);}  }
class C{  private void sendTouchExplorationGestureStartAndHoverEnterIfNeeded(int policyFlags){  MotionEvent event=mInjectedPointerTracker.getLastInjectedHoverEvent();  if (event != null && event.getActionMasked() == MotionEvent.ACTION_HOVER_EXIT) {    final int pointerIdBits=event.getPointerIdBits();    sendAccessibilityEvent(AccessibilityEvent.TYPE_TOUCH_EXPLORATION_GESTURE_START);    sendMotionEvent(event,MotionEvent.ACTION_HOVER_ENTER,pointerIdBits,policyFlags);  }}  }
class C{  public String toString(){  return name;}  }
class C{  public int size(){  return n;}  }
class C{  public static Typeface robotoRegular(Context context){  sRobotoRegular=getFontFromRes(R.raw.roboto_regular,context);  return sRobotoRegular;}  }
class C{  private synchronized void unsetLargeMessageDelivery(){  deliveringLargeMessage=false;}  }
class C{  private void addStepNumToProof(String stepNum,String[] proofText){  LeafProofNode pfNode=(LeafProofNode)this.proof;  if (pfNode.getOmitted()) {    return;  }  if (((pfNode.getFacts() == null) || (pfNode.getFacts().length == 0)) && ((pfNode.getDefs() == null) || (pfNode.getDefs().length == 0))) {    int i=0;    boolean notDone=true;    while (notDone && (i < proofText.length)) {      int idx=proofText[i].indexOf("OBVIOUS");      if (idx != -1) {        proofText[i]=proofText[i].replaceFirst("OBVIOUS","BY " + stepNum);        notDone=false;      }      i++;    }  } else {    String comesAfter="BY";    if (pfNode.getOnlyFlag()) {      comesAfter="ONLY";    }    String stepNumAdded=stepNum;    if ((pfNode.getFacts() != null) && (pfNode.getFacts().length > 0)) {      stepNumAdded=stepNum + ",";    }    int i=0;    boolean notDone=true;    while (notDone && (i < proofText.length)) {      int idx=proofText[i].indexOf(comesAfter);      if (idx != -1) {        proofText[i]=proofText[i].replaceFirst(comesAfter,comesAfter + " " + stepNumAdded);        notDone=false;      }      i++;    }  }}  }
class C{  public static StreamTimestamp of(String streamId,Instant timestamp){  checkNotNull(streamId,"streamId must not be null");  checkNotNull(timestamp,"timestamp must not be null");  return new StreamTimestamp(streamId,timestamp);}  }
class C{  private static Point isTrayEvent(AWTEvent e){  if (e instanceof MouseEvent) {    MouseEvent me=(MouseEvent)e;    if (me.getID() == MouseEvent.MOUSE_RELEASED && me.getSource() != null) {      if (me.getSource().getClass().getName().contains("TrayIcon")) {        return me.getLocationOnScreen();      }    }  }  return null;}  }
class C{  private void validateAddSecurityGroupsToClusterMasterRequest(EmrMasterSecurityGroupAddRequest request) throws IllegalArgumentException {  Assert.hasText(request.getNamespace(),"A namespace must be specified.");  Assert.hasText(request.getEmrClusterDefinitionName(),"An EMR cluster definition name must be specified.");  Assert.hasText(request.getEmrClusterName(),"An EMR cluster name must be specified.");  Assert.notEmpty(request.getSecurityGroupIds(),"At least one security group must be specified.");  for (  String securityGroup : request.getSecurityGroupIds()) {    Assert.hasText(securityGroup,"A security group value must be specified.");  }  request.setNamespace(request.getNamespace().trim());  request.setEmrClusterDefinitionName(request.getEmrClusterDefinitionName().trim());  request.setEmrClusterName(request.getEmrClusterName().trim());  for (int i=0; i < request.getSecurityGroupIds().size(); i++) {    String element=request.getSecurityGroupIds().get(i);    request.getSecurityGroupIds().set(i,element.trim());  }}  }
class C{  private Set<String> filterResourceNames(Set<String> resourceNames,String prefix,String suffix){  Set<String> filteredResourceNames=new TreeSet<String>();  for (  String resourceName : resourceNames) {    String fileName=resourceName.substring(resourceName.lastIndexOf("/") + 1);    if (fileName.startsWith(prefix) && fileName.endsWith(suffix) && (fileName.length() > (prefix + suffix).length())) {      filteredResourceNames.add(resourceName);    } else {      LOG.debug("Filtering out resource: " + resourceName + " (filename: "+ fileName+ ")");    }  }  return filteredResourceNames;}  }
class C{  public boolean isShowing(){  return false;}  }
class C{  private void write(char c) throws SAXException {  try {    output.write(c);  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public NamedThreadFactory(String namePrefix){  this._namePrefix=namePrefix;  _delegate=Executors.defaultThreadFactory();}  }
class C{  public static void removeXML(String outputDir,String templatesPath){  (new File(templatesPath + "ASDoc_Config.xml")).delete();  (new File(templatesPath + "overviews.xml")).delete();  (new File(outputDir + "index.tmp")).delete();  (new File(outputDir + "index2.tmp")).delete();  (new File(outputDir + "toplevel.xml")).delete();  File outputDitaDir=new File(outputDir + "tempdita/");  if (outputDitaDir.exists()) {    File files[]=outputDitaDir.listFiles();    for (int ix=0; ix < files.length; ix++) {      files[ix].delete();    }    outputDitaDir.delete();  }}  }
class C{  static boolean runningOnComputeEngine(HttpTransportFactory transportFactory){  try {    GenericUrl tokenUrl=new GenericUrl(METADATA_SERVER_URL);    HttpRequest request=transportFactory.create().createRequestFactory().buildGetRequest(tokenUrl);    HttpResponse response=request.execute();    HttpHeaders headers=response.getHeaders();    if (OAuth2Utils.headersContainValue(headers,"Metadata-Flavor","Google")) {      return true;    }  } catch (  IOException expected) {  }  return false;}  }
class C{  public void produceResults(Consumer<T> consumer,ProducerContext context){  consumer.onNewResult((T)null,true);}  }
class C{  public static boolean isNominalMappingSubsetOrEqualTo(NominalMapping childMapping,NominalMapping superMapping){  if (childMapping.size() > superMapping.size()) {    return false;  }  List<String> superList=superMapping.getValues();  for (  String value : childMapping.getValues()) {    if (!superList.contains(value)) {      return false;    }  }  return true;}  }
class C{  @Override public void init(final Coordinate p1,final Coordinate p2){  init(p1.x,p2.x,p1.y,p2.y,p1.z,p2.z);}  }
class C{  public void keepOnly(final Collection<String> propertiesToKeep){  Iterator<Map.Entry<String,Object>> it=entrySet().iterator();  while (it.hasNext()) {    Map.Entry<String,Object> entry=it.next();    if (!propertiesToKeep.contains(entry.getKey())) {      it.remove();    }  }}  }
class C{  public void close() throws IOException {}  }
class C{  protected void fireStartElem(String elemName) throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_STARTELEMENT,elemName,m_attributes);  }}  }
class C{  public Builder threadFormatter(ThreadFormatter threadFormatter){  this.threadFormatter=threadFormatter;  return this;}  }
class C{  <T extends JCTree>List<Type> classEnter(List<T> trees,Env<AttrContext> env){  ListBuffer<Type> ts=new ListBuffer<Type>();  for (List<T> l=trees; l.nonEmpty(); l=l.tail) {    Type t=classEnter(l.head,env);    if (t != null)     ts.append(t);  }  return ts.toList();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void loadAdminUserId(String entidad) throws Exception {  LdapUsersTable table=new LdapUsersTable();  String qual;  if (_logger.isDebugEnabled())   _logger.debug("loadAdminUserId");  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    qual=table.getLoadOwnerIdQual(_acsId);    _adminUserId=DbSelectFns.selectLongInteger(dbConn,table.getOwnershipTableName(),table.getOwnerIdColumnName(),qual);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  public OWLCompiler() throws ObjectStoreConfigException {  this(findClassLoader());}  }
class C{  public synchronized void end(){  this.active=false;  this.selectedObject=null;}  }
class C{  @Override public void close() throws IOException {  this.writer.close();}  }
class C{  public static void sortDesc(long[] a,int[] b,long[] tmpa,int[] tmpb){  hybridsortDesc(a,b,tmpa,tmpb,0,a.length - 1);}  }
class C{  public static long computeCrc32(byte[] bytes) throws IOException {  ByteArrayInputStream bais=new ByteArrayInputStream(bytes);  try {    CheckedInputStream cis=new CheckedInputStream(bais,new CRC32());    byte[] buf=new byte[128];    while (cis.read(buf) >= 0) {    }    return cis.getChecksum().getValue();  }  finally {    bais.close();  }}  }
class C{  public Map.Entry<byte[],Map<String,byte[]>> selectOne(final String columnName,final Pattern columnMatcher){  final Iterator<Map.Entry<byte[],Map<String,byte[]>>> i=iterator();  Map.Entry<byte[],Map<String,byte[]>> row;  Map<String,byte[]> prop;  byte[] val;  while (i.hasNext()) {    row=i.next();    prop=row.getValue();    val=prop.get(columnName);    if (val != null) {      if (columnMatcher.matcher(UTF8.String(val)).matches()) {        return row;      }    }  }  return null;}  }
class C{  private String formatDefaultValue(Object value){  if (value instanceof Boolean) {    return ((Boolean)value) ? "true" : "false";  }  if (value instanceof Number) {    return value.toString();  }  if (value instanceof Collection) {    return formatCollectionValue((Collection)value);  }  String string=value.toString();  if (string.startsWith("$")) {    return string;  }  return SassString.escape(string);}  }
class C{  private int compareClassesAllowingNull(ClassAnnotation lhs,ClassAnnotation rhs){  if (lhs == null || rhs == null) {    return compareNullElements(lhs,rhs);  }  String lhsClassName=classNameRewriter.rewriteClassName(lhs.getClassName());  String rhsClassName=classNameRewriter.rewriteClassName(rhs.getClassName());  if (DEBUG) {    System.err.println("Comparing " + lhsClassName + " and "+ rhsClassName);  }  int cmp=lhsClassName.compareTo(rhsClassName);  if (DEBUG) {    System.err.println("\t==> " + cmp);  }  return cmp;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("PaymentRule"))     p_PaymentRule=(String)para[i].getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_HR_PaySelection_ID=getRecord_ID();  if (p_PaymentRule != null && p_PaymentRule.equals(X_C_Order.PAYMENTRULE_DirectDebit))   p_PaymentRule=null;}  }
class C{  public boolean equals(Object object){  boolean isEqual=false;  if (object instanceof DefineFont3 && super.equals(object)) {    DefineFont3 defineFont=(DefineFont3)object;    isEqual=true;  }  return isEqual;}  }
class C{  void put(final MethodWriter owner,final ByteVector out,final int source){  if ((status & RESOLVED) == 0) {    addReference(source,out.length);    out.putShort(-1);  } else {    out.putShort(position - source);  }}  }
class C{  public NaviNode(final Node node,final IZyNodeRealizer realizer,final INaviViewNode rawNode){  super(node,realizer,rawNode);  m_realizer=realizer;}  }
class C{  public static double lerp(double a,double b,double f){  return a + f * (b - a);}  }
class C{  public void assertEqual(double expected,double actual,double maxRelativeError){  TestUtils.assertEqual(expected,actual,maxRelativeError);}  }
class C{  public void buildClassifier(Instances D) throws Exception {  int L=D.classIndex();  int featlength=(D.numAttributes() - L) * 2;  int numSamples=D.numInstances();  int classlength=L * 2;  if (this.order == null) {    order=new ArrayList<Integer>();    for (int j=0; j < D.numInstances(); j++) {      order.add(j);    }  }  if (numFeatures == -1) {    initARAM(featlength,classlength,roa,threshold,clustervig);  } else {    if (featlength != numFeatures) {      return;    }    if (classlength != numClasses) {      return;    }  }  for (int i=0; i < D.numInstances(); i++) {    Instance instance=D.get(order.get(i));    updateClassifier(instance);  }  System.out.println("Training done, used " + numCategories + " neurons with rho ="+ roa+ ".");}  }
class C{  @Override public final T next(){  if (_nextIndex == _size) {    throw new NoSuchElementException();  }  _lastReturned=_next;  _next=(T)_next.getNext();  _nextIndex++;  return _lastReturned;}  }
class C{  public IntList mutableCopy(){  int sz=size;  IntList result=new IntList(sz);  for (int i=0; i < sz; i++) {    result.add(values[i]);  }  return result;}  }
class C{  public void flip(int x,int y){  int offset=y * rowSize + (x / 32);  bits[offset]^=1 << (x & 0x1f);}  }
class C{  private boolean isMinimized(final HttpServletRequest request){  return context.getConfig().isMinimizeEnabled() ? groupExtractor.isMinimized(request) : false;}  }
class C{  public void stopImsServices(TerminationReason reasonCode) throws PayloadException, NetworkException, ContactManagerException {  terminateAllSessions(reasonCode);  for (  ImsService imsService : mServices.values()) {    try {      if (imsService.isActivated()) {        if (sLogger.isActivated()) {          sLogger.info("Stop IMS service: ".concat(imsService.getClass().getName()));        }        imsService.stop(reasonCode);      }    } catch (    PayloadException e) {      sLogger.error("Unable to stop IMS service: ".concat(imsService.getClass().getName()),e);    }catch (    NetworkException e) {      if (sLogger.isActivated()) {        sLogger.debug(e.getMessage());      }    }  }  getCallManager().connectionEvent(false);}  }
class C{  private String parseQuoted(String tx){  StringBuilder buf=new StringBuilder();  int size=tx.length();  int i=0;  while (i < size) {    char ch=tx.charAt(i);    if (ch == '&') {      if (i + 5 < size && tx.charAt(i + 1) == 'a' && tx.charAt(i + 2) == 'p' && tx.charAt(i + 3) == 'o' && tx.charAt(i + 4) == 's' && tx.charAt(i + 5) == ';') {        buf.append('\'');        i+=6;      } else       if (i + 5 < size && tx.charAt(i + 1) == 'q' && tx.charAt(i + 2) == 'u' && tx.charAt(i + 3) == 'o' && tx.charAt(i + 4) == 't' && tx.charAt(i + 5) == ';') {        buf.append('"');        i+=6;      } else {        buf.append(ch);        ++i;      }    } else     if (ch == '\\' && i + 1 < size) {      ch=tx.charAt(i + 1);      if (ch == '\\' || ch == '\"' || ch == '\'' || ch == '>') {        buf.append(ch);        i+=2;      } else {        buf.append('\\');        ++i;      }    } else {      buf.append(ch);      ++i;    }  }  return buf.toString();}  }
class C{  public AuthorityInfoAccessExtension(List<AccessDescription> accessDescriptions) throws IOException {  this.extensionId=PKIXExtensions.AuthInfoAccess_Id;  this.critical=false;  this.accessDescriptions=accessDescriptions;  encodeThis();}  }
class C{  private boolean isTestMethod(Method m){  String name=m.getName();  Class[] parameters=m.getParameterTypes();  Class returnType=m.getReturnType();  return parameters.length == 0 && name.startsWith("test") && returnType.equals(Void.TYPE);}  }
class C{  public void doPaste(){  jTextArea1.paste();}  }
class C{  private void dumpDefinition(Definition def){  String visibility="public";  if ((def.getFlags() & Definition.PRIVATE) > 0) {    visibility="protected";  } else   if ((def.getFlags() & Definition.HIDDEN) > 0) {    visibility="private";  }  DefinitionClass defClass=def.getDefinitionClass();  boolean staticFlag=(defClass == DefinitionClass.STATIC);  String name=def.getName().replace("!","").replace("#","").replace("-","_").replace("class","clazz");  String type=def.getType().toString().toLowerCase();  if (defClass == DefinitionClass.RPSLOT) {    type="List";  } else   if (defClass == DefinitionClass.RPEVENT) {    type=def.getName();  }  writer.writeAttribute(visibility,staticFlag,type,name);}  }
class C{  @Override public void handleClick(int x,int y,PlotRenderingInfo info){  Rectangle2D dataArea=info.getDataArea();  if (dataArea.contains(x,y)) {    ValueAxis xaxis=getDomainAxis();    if (xaxis != null) {      double hvalue=xaxis.java2DToValue(x,info.getDataArea(),getDomainAxisEdge());      setDomainCrosshairValue(hvalue);    }    ValueAxis yaxis=getRangeAxis();    if (yaxis != null) {      double vvalue=yaxis.java2DToValue(y,info.getDataArea(),getRangeAxisEdge());      setRangeCrosshairValue(vvalue);    }  }}  }
class C{  public void pausePresenters(){  for (  RosiePresenter presenter : presenters) {    presenter.pause();    presenter.resetView();  }}  }
class C{  public static JSONObject JsonPost(String url,String bssid,JSONObject postJSON,HeaderPair... headers){  return JsonPost(url,bssid,SERIAL_NORMAL_TASK,postJSON,headers);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.INDEXED_ACCESS_EXPRESSION__TARGET:    setTarget((Expression)newValue);  return;case N4JSPackage.INDEXED_ACCESS_EXPRESSION__INDEX:setIndex((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected final void GPR2FPR_64(Instruction s){  int offset=-burs.ir.stackManager.allocateSpaceForConversion();  StackLocationOperand sl=new StackLocationOperand(true,offset,QW);  StackLocationOperand sl1=new StackLocationOperand(true,offset + 4,DW);  StackLocationOperand sl2=new StackLocationOperand(true,offset,DW);  Operand i1, i2;  Operand val=Unary.getClearVal(s);  if (val instanceof RegisterOperand) {    RegisterOperand rval=(RegisterOperand)val;    i1=val;    i2=new RegisterOperand(regpool.getSecondReg(rval.getRegister()),TypeReference.Int);  } else {    LongConstantOperand rhs=(LongConstantOperand)val;    i1=IC(rhs.upper32());    i2=IC(rhs.lower32());  }  EMIT(CPOS(s,MIR_Move.create(IA32_MOV,sl1,i1)));  EMIT(CPOS(s,MIR_Move.create(IA32_MOV,sl2,i2)));  EMIT(MIR_Move.mutate(s,IA32_FMOV,Unary.getResult(s),sl));}  }
class C{  public static StringBuffer appendNumber(StringBuffer result,int n,int radix,int minDigits) throws IllegalArgumentException {  if (radix < 2 || radix > 36) {    throw new IllegalArgumentException("Illegal radix " + radix);  }  int abs=n;  if (n < 0) {    abs=-n;    result.append("-");  }  recursiveAppendNumber(result,abs,radix,minDigits);  return result;}  }
class C{  public void snapshot(int address,RegisterSpecSet specs){  if (DEBUG) {    System.err.printf("%04x snapshot %s\n",address,specs);  }  int sz=specs.getMaxSize();  aboutToProcess(address,sz - 1);  for (int i=0; i < sz; i++) {    RegisterSpec oldSpec=regs.get(i);    RegisterSpec newSpec=filterSpec(specs.get(i));    if (oldSpec == null) {      if (newSpec != null) {        startLocal(address,newSpec);      }    } else     if (newSpec == null) {      endLocal(address,oldSpec);    } else     if (!newSpec.equalsUsingSimpleType(oldSpec)) {      endLocal(address,oldSpec);      startLocal(address,newSpec);    }  }  if (DEBUG) {    System.err.printf("%04x snapshot done\n",address);  }}  }
class C{  protected ValueSource parseValueSource(boolean doConsumeDelimiter) throws SyntaxError {  return parseValueSource(doConsumeDelimiter ? (FLAG_DEFAULT | FLAG_CONSUME_DELIMITER) : (FLAG_DEFAULT & ~FLAG_CONSUME_DELIMITER));}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (newRecord && success) {    MUserRoles su=new MUserRoles(getCtx(),SUPERUSER_USER_ID,getAD_Role_ID(),get_TrxName());    su.saveEx();    if (getCreatedBy() != SUPERUSER_USER_ID) {      MUserRoles ur=new MUserRoles(getCtx(),getCreatedBy(),getAD_Role_ID(),get_TrxName());      ur.saveEx();    }    updateAccessRecords();  } else   if (is_ValueChanged("UserLevel"))   updateAccessRecords();  if (getDefaultRole() != null && getDefaultRole().get_ID() == get_ID())   setDefaultRole(this);  return success;}  }
class C{  static PrecalculatedZone create(String id,boolean outputID,ArrayList<Transition> transitions,DSTZone tailZone){  int size=transitions.size();  if (size == 0) {    throw new IllegalArgumentException();  }  long[] trans=new long[size];  int[] wallOffsets=new int[size];  int[] standardOffsets=new int[size];  String[] nameKeys=new String[size];  Transition last=null;  for (int i=0; i < size; i++) {    Transition tr=transitions.get(i);    if (!tr.isTransitionFrom(last)) {      throw new IllegalArgumentException(id);    }    trans[i]=tr.getMillis();    wallOffsets[i]=tr.getWallOffset();    standardOffsets[i]=tr.getStandardOffset();    nameKeys[i]=tr.getNameKey();    last=tr;  }  String[] zoneNameData=new String[5];  String[][] zoneStrings=new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();  for (int j=0; j < zoneStrings.length; j++) {    String[] set=zoneStrings[j];    if (set != null && set.length == 5 && id.equals(set[0])) {      zoneNameData=set;    }  }  Chronology chrono=ISOChronology.getInstanceUTC();  for (int i=0; i < nameKeys.length - 1; i++) {    String curNameKey=nameKeys[i];    String nextNameKey=nameKeys[i + 1];    long curOffset=wallOffsets[i];    long nextOffset=wallOffsets[i + 1];    long curStdOffset=standardOffsets[i];    long nextStdOffset=standardOffsets[i + 1];    Period p=new Period(trans[i],trans[i + 1],PeriodType.yearMonthDay(),chrono);    if (curOffset != nextOffset && curStdOffset == nextStdOffset && curNameKey.equals(nextNameKey) && p.getYears() == 0 && p.getMonths() > 4 && p.getMonths() < 8 && curNameKey.equals(zoneNameData[2]) && curNameKey.equals(zoneNameData[4])) {      if (ZoneInfoCompiler.verbose()) {        System.out.println("Fixing duplicate name key - " + nextNameKey);        System.out.println("     - " + new DateTime(trans[i],chrono) + " - "+ new DateTime(trans[i + 1],chrono));      }      if (curOffset > nextOffset) {        nameKeys[i]=(curNameKey + "-Summer").intern();      } else       if (curOffset < nextOffset) {        nameKeys[i + 1]=(nextNameKey + "-Summer").intern();        i++;      }    }  }  if (tailZone != null) {    if (tailZone.iStartRecurrence.getNameKey().equals(tailZone.iEndRecurrence.getNameKey())) {      if (ZoneInfoCompiler.verbose()) {        System.out.println("Fixing duplicate recurrent name key - " + tailZone.iStartRecurrence.getNameKey());      }      if (tailZone.iStartRecurrence.getSaveMillis() > 0) {        tailZone=new DSTZone(tailZone.getID(),tailZone.iStandardOffset,tailZone.iStartRecurrence.renameAppend("-Summer"),tailZone.iEndRecurrence);      } else {        tailZone=new DSTZone(tailZone.getID(),tailZone.iStandardOffset,tailZone.iStartRecurrence,tailZone.iEndRecurrence.renameAppend("-Summer"));      }    }  }  return new PrecalculatedZone((outputID ? id : ""),trans,wallOffsets,standardOffsets,nameKeys,tailZone);}  }
class C{  public static File parse(String[] options,String option,File defValue) throws Exception {  String value=Utils.getOption(option,options);  if (value.isEmpty())   return defValue; else   return new File(value);}  }
class C{  public void testThrowOnNext(){  SubmissionPublisher<Integer> p=basicPublisher();  TestSubscriber s1=new TestSubscriber();  TestSubscriber s2=new TestSubscriber();  p.subscribe(s1);  p.subscribe(s2);  s1.awaitSubscribe();  p.submit(1);  s1.throwOnCall=true;  p.submit(2);  p.close();  s2.awaitComplete();  assertEquals(2,s2.nexts);  s1.awaitComplete();  assertEquals(1,s1.errors);}  }
class C{  private static char CallCharMethodA(JNIEnvironment env,int objJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallCharMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,objJREF,methodID,argAddress,TypeReference.Char,false);  return Reflection.unwrapChar(returnObj);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ENTRY_OR_EXIT_ACTION___TYPE_1:    return getType_1();case UmplePackage.ENTRY_OR_EXIT_ACTION___ANONYMOUS_ENTRY_OR_EXIT_ACTION_11:  return getAnonymous_entryOrExitAction_1_1();case UmplePackage.ENTRY_OR_EXIT_ACTION___CODE_1:return getCode_1();case UmplePackage.ENTRY_OR_EXIT_ACTION___ANONYMOUS_ENTRY_OR_EXIT_ACTION_21:return getAnonymous_entryOrExitAction_2_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void registerFrameInput(String varName,DataFrame df,boolean containsID) throws DMLRuntimeException {  int blksz=ConfigurationManager.getBlocksize();  MatrixCharacteristics mcOut=new MatrixCharacteristics(-1,-1,blksz,blksz);  JavaPairRDD<Long,FrameBlock> rdd=FrameRDDConverterUtils.dataFrameToBinaryBlock(new JavaSparkContext(_sc),df,mcOut,containsID);  registerInput(varName,rdd,mcOut.getRows(),mcOut.getCols(),null);}  }
class C{  private float crossCheckVertical(int startI,int centerJ,int maxCount,int originalStateCountTotal){  BitMatrix image=this.image;  int maxI=image.getHeight();  int[] stateCount=crossCheckStateCount;  stateCount[0]=0;  stateCount[1]=0;  stateCount[2]=0;  int i=startI;  while (i >= 0 && image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i--;  }  if (i < 0 || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i >= 0 && !image.get(centerJ,i) && stateCount[0] <= maxCount) {    stateCount[0]++;    i--;  }  if (stateCount[0] > maxCount) {    return Float.NaN;  }  i=startI + 1;  while (i < maxI && image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i++;  }  if (i == maxI || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i < maxI && !image.get(centerJ,i) && stateCount[2] <= maxCount) {    stateCount[2]++;    i++;  }  if (stateCount[2] > maxCount) {    return Float.NaN;  }  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2];  if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {    return Float.NaN;  }  return foundPatternCross(stateCount) ? centerFromEnd(stateCount,i) : Float.NaN;}  }
class C{  protected void doFireDocumentChanged(DocumentEvent event,boolean firePartitionChange,Region partitionChange){  doFireDocumentChanged2(event);}  }
class C{  public boolean adjustValue(K key,float amount){  int index=index(key);  if (index < 0) {    return false;  } else {    _values[index]+=amount;    return true;  }}  }
class C{  @Nullable public static PsiFile findFile(@Nullable PsiElement element){  return element == null ? null : findFile(element.getReferences());}  }
class C{  @Deprecated public void growthFactor(int growthFactor){}  }
class C{  public Boolean isStorageVMotionSupported(){  return storageVMotionSupported;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ExpressionsPackage.FLOAT_LITERAL__VALUE:    return value != VALUE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public ToStringBuilder appendSuper(String superToString){  if (superToString != null) {    style.appendSuper(buffer,superToString);  }  return this;}  }
class C{  public double doOperation() throws OperatorFailedException {  CoalescentSimulator simulator=new CoalescentSimulator();  List<TaxonList> taxonLists=new ArrayList<TaxonList>();  double rootHeight=-1.0;  double oldLikelihood=0.0;  double newLikelihood=0.0;  for (int i=0; i < xo.getChildCount(); i++) {    final Object child=xo.getChild(i);    if (child instanceof Tree) {    } else     if (child instanceof TaxonList) {      taxonLists.add((Taxa)child);      break;    }  }  try {    Tree[] trees=new Tree[taxonLists.size()];    for (int i=0; i < taxonLists.size(); i++) {      trees[i]=simulator.simulateTree(taxonLists.get(i),demoModel);    }    oldLikelihood=coalescent.getLogLikelihood();    SimpleTree simTree=simulator.simulateTree(trees,demoModel,rootHeight,trees.length != 1);    treeModel.beginTreeEdit();    treeModel.adoptTreeStructure(simTree);    treeModel.endTreeEdit();    newLikelihood=coalescent.getLogLikelihood();  } catch (  IllegalArgumentException iae) {    try {      throw new XMLParseException(iae.getMessage());    } catch (    XMLParseException e) {      e.printStackTrace();    }  }  return 0;}  }
class C{  public void hspan(double start,double end,Paint color,String legend){  LegendText legendText=new LegendText(color,legend);  comments.add(legendText);  plotElements.add(new HSpan(start,end,color,legendText));}  }
class C{  public static String extractUsername(SOAPMessageContext smsg){  try {    SOAPHeader header=smsg.getMessage().getSOAPHeader();    if (header != null) {      @SuppressWarnings("unchecked") Iterator<SOAPHeaderElement> headers=header.examineAllHeaderElements();      while (headers.hasNext()) {        SOAPHeaderElement he=headers.next();        if (he.getElementName().getLocalName().equals("Access")) {          @SuppressWarnings("unchecked") Iterator<SOAPElement> elements=he.getChildElements();          while (elements.hasNext()) {            SOAPElement e=elements.next();            String name=e.getElementName().getLocalName();            if (name.equals("username"))             return e.getValue();          }        }      }    }  } catch (  SOAPException x) {    x.printStackTrace();  }  return null;}  }
class C{  public FacebookAuthorizationException(String message,Throwable throwable){  super(message,throwable);}  }
class C{  @Override public boolean matches(O object,QueryOptions queryOptions){  for (  Query<O> query : super.getSimpleQueries()) {    if (query.matches(object,queryOptions)) {      return true;    }  }  for (  Query<O> query : super.getLogicalQueries()) {    if (query.matches(object,queryOptions)) {      return true;    }  }  return false;}  }
class C{  public static HBaseId HBaseIdFromRowKey(byte[] rowkey){  return HBaseId.of(new UUID(Bytes.toLong(rowkey,0),Bytes.toLong(rowkey,8)));}  }
class C{  public static ScheduledExecutorService newSingleThreadScheduledExecutor(ThreadFactory threadFactory){  return wrap(Executors.newSingleThreadScheduledExecutor(threadFactory));}  }
class C{  public DelphiClassProperty(){}  }
class C{  public static byte[] decodeChecked(String input) throws ParseException {  byte[] decoded=decode(input);  if (decoded.length < 4) {    throw new ParseException("Input too short",0);  }  byte[] data=Arrays.copyOfRange(decoded,0,decoded.length - 4);  byte[] checksum=Arrays.copyOfRange(decoded,decoded.length - 4,decoded.length);  byte[] actualChecksum=Arrays.copyOfRange(hashTwice(data),0,4);  if (!Arrays.equals(checksum,actualChecksum)) {    throw new ParseException("Checksum does not validate",0);  }  return data;}  }
class C{  @Override public boolean supports(final CloudTrailEvent event){  final CloudTrailEventData eventData=event.getEventData();  final String eventSource=eventData.getEventSource();  final String eventName=eventData.getEventName();  return eventSource.equals(EC2_EVENTS) && eventName.startsWith(DELETE);}  }
class C{  public static <E>String serialize(Map<String,E> map,Class<E> jsonObjectClass) throws IOException {  return mapperFor(jsonObjectClass).serialize(map);}  }
class C{  public static List<NameValuePair> parseQueryOrdered(String query) throws URISyntaxException {  List<NameValuePair> parameters=new ArrayList<NameValuePair>();  if (query == null) {    return parameters;  }  URIQueryTokenizer uqt=new URIQueryTokenizer(query);  while (uqt.hasMoreTokens()) {    String token=uqt.nextToken();    int index=token.indexOf(URI.PARAMETER_SEPARATOR);    String name;    String value;    if (index != -1) {      name=token.substring(0,index);      value=token.substring(index + 1);    } else {      name=token;      value=null;    }    parameters.add(new NameValuePair(name,value));  }  return parameters;}  }
class C{  @Override public String next(){  String result;  result=m_CurrentLeaf.getString();  result=result.substring(0,result.length() - 1);  if (m_CurrentLeaf != m_LastLeaf) {    m_CurrentLeaf=(TrieNode)m_CurrentLeaf.getNextLeaf();  } else {    m_CurrentLeaf=null;  }  return result;}  }
class C{  public void removeNode(final NodeType node){  Preconditions.checkArgument(m_nodes.remove(node),String.format("Error: Node '%s' was not part of the graph",node));  m_edges.removeAll(m_nodeToEdges.get(node));  m_nodeToEdges.remove(node);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.269 -0500",hash_original_method="C2B5C7987B903EB42CE1EDEA1961E0EA",hash_generated_method="DD5283A55E6B6F1BAA391AA5DEE87C6C") private Nickname(){}  }
class C{  @Override public void characters(char[] ch,int start,int length) throws SAXException {  for (int i=start + length - 1; i >= start; --i) {    if (!Character.isWhitespace(ch[i])) {      this.uh.characters(ch,start,length);      return;    }  }  Arrays.fill(ch,start,start + length,'\u000B');  this.uh.characters(ch,start,length);}  }
class C{  public void addFailedKey(KeyCacheObject key,Throwable e){  if (failedKeys == null)   failedKeys=new ArrayList<>();  failedKeys.add(key);  if (err == null)   err=new IgniteCheckedException("Failed to update keys on primary node.");  err.addSuppressed(e);}  }
class C{  public AttachmentEntry updateAttachment(AttachmentEntry entry,File newFile) throws IOException, ServiceException {  return updateAttachment(entry,newFile,null,null);}  }
class C{  public SCXMLGraph(){  setAlternateEdgeStyle("edgeStyle=mxEdgeStyle.ElbowConnector;elbow=vertical");  setAutoSizeCells(true);  setAllowLoops(true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.177 -0400",hash_original_method="D7947FA233878C6544C57437912F92F2",hash_generated_method="59FC53656E2191F8D96CD6A9F55E8846") public XmlStreamReader(InputStream is,boolean lenient) throws IOException {  this(is,lenient,null);}  }
class C{  private static int base64toInt(char c,byte[] alphaToInt){  int result=alphaToInt[c];  if (result < 0)   throw new IllegalArgumentException("Illegal character " + c);  return result;}  }
class C{  public final double pctUnclassified(){  return 100 * m_Unclassified / m_WithClass;}  }
class C{  private static int findSeparator(String s){  int result=s.indexOf('-');  if (result == -1) {    result=s.indexOf(',');  }  if (result == -1) {    result=s.indexOf(' ');  }  if (result == -1) {    result=s.indexOf('.');  }  return result;}  }
class C{  @Override public String toString(){  return new String(toByteArray());}  }
class C{  private void lockUdocsCodeLogic(String[] udocsToLock,ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws ActionNotAllowedException {  if (ArrayUtils.isNotEmpty(udocsToLock)) {    ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));    GestionFondosBI fondosBI=services.lookupGestionFondosBI();    fondosBI.lockUnidadesDocumentales(udocsToLock);  }}  }
class C{  protected boolean visitNode(ASTNode node){  return true;}  }
class C{  public static String join(String charSeparator,String... strings){  String result=strings[0];  for (int i=1; i < strings.length; i++)   result+=charSeparator + strings[i];  return result;}  }
class C{  public boolean rpExportOrchestrationSteps(String stepId){  WorkflowStepCompleter.stepSucceded(stepId);  _log.info("Completed rpExportOrchestrationSteps");  return true;}  }
class C{  public void fireModelUnclear(SessionNode node){  SessionEvent event=new SessionEvent(this.source,node,SessionEvent.MODEL_UNCLEAR);  fireSessionEvent(event);}  }
class C{  public XPathProcessorException(String message,Exception e){  super(message,e);}  }
class C{  public static void updateForFile(File file){  if (file != null) {    File directory=file.getParentFile();    update(directory);  }}  }
class C{  @Override public synchronized void destroy(){  LOGGER.info("Destroying server");  executor.shutdown();  try {    if (!executor.awaitTermination(1,TimeUnit.SECONDS)) {      List<Runnable> runningTasks=executor.shutdownNow();      if (runningTasks.size() > 0) {        LOGGER.log(Level.FINE,"Ignoring remaining {0} scheduled task(s)",runningTasks.size());      }      executor.awaitTermination(1,TimeUnit.SECONDS);    }  } catch (  InterruptedException e) {    executor.shutdownNow();    Thread.currentThread().interrupt();  } finally {    for (    Endpoint ep : endpoints) {      ep.destroy();    }    LOGGER.log(Level.INFO,"CoAP server has been destroyed");    running=false;  }}  }
class C{  private StackInterval activateNext(){  if (unhandled.isEmpty()) {    return null;  }  StackInterval next=unhandled.poll();  for (int id=next.from(); activePeekId() < id; ) {    finished(active.poll());  }  Debug.log("active %s",next);  active.add(next);  return next;}  }
class C{  public boolean isAbsolute(){  return scheme != null;}  }
class C{  @Deprecated public synchronized void clear(){  mPlugins.clear();}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  @Override protected void start(){  if (Cfg.DEBUG) {    Check.log(TAG + " (actualStart)");  }  try {    myPhoneNumber=readMyPhoneNumber();    if (DEFAULT_LOCAL_NUMBER.equals(myPhoneNumber)) {      enabled=false;      return;    }    ModuleAddressBook.createEvidenceLocal(ModuleAddressBook.WHATSAPP,myPhoneNumber);    RunningProcesses runningProcesses=RunningProcesses.self();    if (!runningProcesses.getForeground_wrapper().equals(pObserving)) {      readChatWhatsappMessages();    }  } catch (  Exception e) {    if (Cfg.DEBUG) {      Check.log(TAG + " (actualStart), " + e);    }  }}  }
class C{  public boolean isDominator(BlockNode block){  return doms.get(block.getId());}  }
class C{  public button addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public boolean isZoomable(){  return zoomable;}  }
class C{  @Override public boolean isSubtype(AnnotationMirror rhs,AnnotationMirror lhs){  checkAnnoInGraph(rhs);  checkAnnoInGraph(lhs);  if (AnnotationUtils.areSameIgnoringValues(rhs,lhs)) {    return AnnotationUtils.areSame(rhs,lhs);  }  Set<AnnotationMirror> supermap1=this.supertypesMap.get(rhs);  return AnnotationUtils.containsSame(supermap1,lhs);}  }
class C{  public void renumberLines(int step){  int number=step;  MInvoiceLine[] lines=getLines(false);  for (int i=0; i < lines.length; i++) {    MInvoiceLine line=lines[i];    line.setLine(number);    line.saveEx();    number+=step;  }  m_lines=null;}  }
class C{  protected static void addWords(FullTextSettings setting,HashSet<String> set,Reader reader){  StreamTokenizer tokenizer=new StreamTokenizer(reader);  tokenizer.resetSyntax();  tokenizer.wordChars(' ' + 1,255);  char[] whitespaceChars=setting.getWhitespaceChars().toCharArray();  for (  char ch : whitespaceChars) {    tokenizer.whitespaceChars(ch,ch);  }  try {    while (true) {      int token=tokenizer.nextToken();      if (token == StreamTokenizer.TT_EOF) {        break;      } else       if (token == StreamTokenizer.TT_WORD) {        String word=tokenizer.sval;        word=setting.convertWord(word);        if (word != null) {          set.add(word);        }      }    }  } catch (  IOException e) {    throw DbException.convertIOException(e,"Tokenizer error");  }}  }
class C{  public static List<Integer> createRanges(int... startEnds){  assert startEnds.length % 2 == 0;  ArrayList<Integer> ret=new ArrayList<Integer>();  for (int si=0; si < startEnds.length; si++) {    final int start=startEnds[si++];    final int end=startEnds[si];    assert end >= start;    ret.ensureCapacity(ret.size() + ((end - start) + 1));    for (int i=start; i <= end; i++) {      ret.add(new Integer(i));    }  }  return ret;}  }
class C{  public void beginShape(int kind){  shape=kind;}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public boolean hasDateDetected(){  return getDateDetected() != null;}  }
class C{  public CartoonSSAO(){  super("CartoonSSAO");}  }
class C{  public void testCargo() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/cargocpc/");  final String expected="Cargo Ping Component";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  private DSEStats(){}  }
class C{  void init(IProject project){  fProject=project;  ProjectMarkerProcessor markerProcessor=ProjectMarkerProcessor.get(fProject);  fTaintSourcesMap=markerProcessor.getTaintSourcesMap();  fFilteredTaintSourcesMap=markerProcessor.getFilteredTaintSourcesMap();  fRoots=initializeRoots();}  }
class C{  public void write(String str,int off,int len) throws IOException {  if (_outputStream == null)   throw new IOException("Writer closed");  final int off_plus_len=off + len;  for (int i=off; i < off_plus_len; ) {    char c=str.charAt(i++);    if (c < 0x80) {      _bytes[_index]=(byte)c;      if (++_index >= _bytes.length) {        flushBuffer();      }    } else {      write(c);    }  }}  }
class C{  public void onPackagesUnavailable(String[] packageNames){}  }
class C{  public void pop() throws java.lang.Exception {  if (vstack.empty())   throw new Exception("Internal parser error: pop from empty virtual stack");  vstack.pop();  if (vstack.empty())   get_from_real();}  }
class C{  protected void buildListeners(){  super.buildListeners();  LAUNCH_ACTION=new LaunchAction();  LAUNCH_OS_ACTION=new LaunchOSAction();  OPEN_IN_FOLDER_ACTION=new OpenInFolderAction();  CREATE_TORRENT_ACTION=new CreateTorrentAction();  DELETE_ACTION=new RemoveFromPlaylistAction();  SEND_TO_ITUNES_ACTION=new SendAudioFilesToiTunes();}  }
class C{  void optimize(){  calculateBestPlan();  bestPlan.removeUnusableIndexConditions();  TableFilter[] f2=bestPlan.getFilters();  topFilter=f2[0];  for (int i=0; i < f2.length - 1; i++) {    f2[i].addJoin(f2[i + 1],false,false,null);  }  for (  TableFilter f : f2) {    PlanItem item=bestPlan.getItem(f);    f.setPlanItem(item);  }}  }
class C{  public void initTransaction() throws SQLException {  this.currentConection.setAutoCommit(false);}  }
class C{  public void putValue(String key,String value) throws NotLeaderException {  if (key.contains(" ")) {    throw new IllegalArgumentException("The key must not contain spaces");  }  try {    recordLock.add(key);    byte[] bytes=(key + " " + value).getBytes();    writeLog(bytes);    logger.info("[{}] Put key {}={}",hostId,key,value);  } catch (  InterruptedException e) {    throw new RuntimeException(e);  }catch (  GondolaException e) {    logger.info("Failed to put {}/{} reason={}",key,value,e.getCode());    throw new NotLeaderException();  }}  }
class C{  private static boolean dateByMonth(DateTimeFormatterBuilder bld,Collection<DateTimeFieldType> fields,boolean extended,boolean strictISO){  boolean reducedPrec=false;  if (fields.remove(DateTimeFieldType.year())) {    bld.append(Constants.ye);    if (fields.remove(DateTimeFieldType.monthOfYear())) {      if (fields.remove(DateTimeFieldType.dayOfMonth())) {        appendSeparator(bld,extended);        bld.appendMonthOfYear(2);        appendSeparator(bld,extended);        bld.appendDayOfMonth(2);      } else {        bld.appendLiteral('-');        bld.appendMonthOfYear(2);        reducedPrec=true;      }    } else {      if (fields.remove(DateTimeFieldType.dayOfMonth())) {        checkNotStrictISO(fields,strictISO);        bld.appendLiteral('-');        bld.appendLiteral('-');        bld.appendDayOfMonth(2);      } else {        reducedPrec=true;      }    }  } else   if (fields.remove(DateTimeFieldType.monthOfYear())) {    bld.appendLiteral('-');    bld.appendLiteral('-');    bld.appendMonthOfYear(2);    if (fields.remove(DateTimeFieldType.dayOfMonth())) {      appendSeparator(bld,extended);      bld.appendDayOfMonth(2);    } else {      reducedPrec=true;    }  } else   if (fields.remove(DateTimeFieldType.dayOfMonth())) {    bld.appendLiteral('-');    bld.appendLiteral('-');    bld.appendLiteral('-');    bld.appendDayOfMonth(2);  }  return reducedPrec;}  }
class C{  public String toString(){  String sEncoding="";  if (getEncoding() != null) {    sEncoding=getEncoding().toString() + " ";  }  String sSampleRate;  if (getSampleRate() == (float)AudioSystem.NOT_SPECIFIED) {    sSampleRate="unknown sample rate, ";  } else {    sSampleRate="" + getSampleRate() + " Hz, ";  }  String sSampleSizeInBits;  if (getSampleSizeInBits() == (float)AudioSystem.NOT_SPECIFIED) {    sSampleSizeInBits="unknown bits per sample, ";  } else {    sSampleSizeInBits="" + getSampleSizeInBits() + " bit, ";  }  String sChannels;  if (getChannels() == 1) {    sChannels="mono, ";  } else   if (getChannels() == 2) {    sChannels="stereo, ";  } else {    if (getChannels() == AudioSystem.NOT_SPECIFIED) {      sChannels=" unknown number of channels, ";    } else {      sChannels="" + getChannels() + " channels, ";    }  }  String sFrameSize;  if (getFrameSize() == (float)AudioSystem.NOT_SPECIFIED) {    sFrameSize="unknown frame size, ";  } else {    sFrameSize="" + getFrameSize() + " bytes/frame, ";  }  String sFrameRate="";  if (Math.abs(getSampleRate() - getFrameRate()) > 0.00001) {    if (getFrameRate() == (float)AudioSystem.NOT_SPECIFIED) {      sFrameRate="unknown frame rate, ";    } else {      sFrameRate=getFrameRate() + " frames/second, ";    }  }  String sEndian="";  if ((getEncoding().equals(Encoding.PCM_SIGNED) || getEncoding().equals(Encoding.PCM_UNSIGNED)) && ((getSampleSizeInBits() > 8) || (getSampleSizeInBits() == AudioSystem.NOT_SPECIFIED))) {    if (isBigEndian()) {      sEndian="big-endian";    } else {      sEndian="little-endian";    }  }  return sEncoding + sSampleRate + sSampleSizeInBits+ sChannels+ sFrameSize+ sFrameRate+ sEndian;}  }
class C{  public boolean reportMissingRequiredSkinPartsAsWarnings(){  return reportMissingRequiredSkinPartsAsWarnings;}  }
class C{  public boolean optBoolean(int index){  return this.optBoolean(index,false);}  }
class C{  private static boolean isActionButton(MenuItem item){  if (item instanceof MenuItemImpl) {    return ((MenuItemImpl)item).isActionButton();  }  if (nativeIsActionButton == null) {    try {      Class<?> MenuItemImpl=Class.forName("com.android.internal.view.menu.MenuItemImpl");      nativeIsActionButton=MenuItemImpl.getDeclaredMethod("isActionButton");      if (!nativeIsActionButton.isAccessible()) {        nativeIsActionButton.setAccessible(true);      }    } catch (    Exception ignored) {    }  }  try {    return (boolean)nativeIsActionButton.invoke(item,(Object[])null);  } catch (  Exception e) {    e.printStackTrace();  }  return true;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public ListIterator<T> listIterator(int index){  return new IteratorImpl(index);}  }
class C{  public void updateComponentDumpTemplate(String template) throws SecurityException {  checkWriteAccess();  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_SETTING);  if (!hasAccess)   throw new SecurityException("no access to update component setting");  Element component=_getRootElement("component");  component.setAttribute("dump-template",template);}  }
class C{  public static void injectInfoLogger(final Consumer<String> logger){  LogProvider.infoLogger=logger;}  }
class C{  public static File showOpenFile(String extension,File initialDir,Shell parent){  JFileDataStoreChooser dialog=new JFileDataStoreChooser(parent,SWT.OPEN,extension);  FileDialog fileDialogInternal=dialog.getFileDialog();  if (initialDir != null) {    if (initialDir.isDirectory()) {      fileDialogInternal.setFilterPath(initialDir.getAbsolutePath());    } else {      fileDialogInternal.setFilterPath(initialDir.getParentFile().getAbsolutePath());    }  }  fileDialogInternal.open();  String filePath=fileDialogInternal.getFileName();  File file=new File(filePath);  return file;}  }
class C{  public boolean isNodeChild(TreeNode aNode){  boolean retval;  if (aNode == null) {    retval=false;  } else {    if (getChildCount() == 0) {      retval=false;    } else {      retval=(aNode.getParent() == this);    }  }  return retval;}  }
class C{  private double mapFreeSpeedToClosestChoice(double linkFreeSpeedInKmPerHour){  double[] freeSpeedChoiceSetInKmPerHour={30.0,50.0,60.0,90.0,120};  double minimumSpeedDelta=Double.MAX_VALUE;  int indexOfClosestFreeSpeed=-1;  for (int i=0; i < freeSpeedChoiceSetInKmPerHour.length; i++) {    double currentSpeedDelta=freeSpeedChoiceSetInKmPerHour[i] - linkFreeSpeedInKmPerHour;    if (currentSpeedDelta < minimumSpeedDelta) {      minimumSpeedDelta=currentSpeedDelta;      indexOfClosestFreeSpeed=i;    }  }  return freeSpeedChoiceSetInKmPerHour[indexOfClosestFreeSpeed];}  }
class C{  @SuppressWarnings("fallthrough") public static int lookup3(int[] k,int offset,int length,int initval){  int a, b, c;  a=b=c=0xdeadbeef + (length << 2) + initval;  int i=offset;  while (length > 3) {    a+=k[i];    b+=k[i + 1];    c+=k[i + 2];{      a-=c;      a^=(c << 4) | (c >>> -4);      c+=b;      b-=a;      b^=(a << 6) | (a >>> -6);      a+=c;      c-=b;      c^=(b << 8) | (b >>> -8);      b+=a;      a-=c;      a^=(c << 16) | (c >>> -16);      c+=b;      b-=a;      b^=(a << 19) | (a >>> -19);      a+=c;      c-=b;      c^=(b << 4) | (b >>> -4);      b+=a;    }    length-=3;    i+=3;  }switch (length) {case 3:    c+=k[i + 2];case 2:  b+=k[i + 1];case 1:a+=k[i + 0];{c^=b;c-=(b << 14) | (b >>> -14);a^=c;a-=(c << 11) | (c >>> -11);b^=a;b-=(a << 25) | (a >>> -25);c^=b;c-=(b << 16) | (b >>> -16);a^=c;a-=(c << 4) | (c >>> -4);b^=a;b-=(a << 14) | (a >>> -14);c^=b;c-=(b << 24) | (b >>> -24);}case 0:break;}return c;}  }
class C{  public boolean hasSecretBackend(String secretBackend){  Assert.hasText(secretBackend,"SecretBackend must not be empty");  Map<String,VaultMount> mounts=adminOperations.getMounts();  return mounts.containsKey(secretBackend) || mounts.containsKey(secretBackend + "/");}  }
class C{  public SerialMessage createOutPacket(int startBitNum,int endBitNum){  int nBits=endBitNum - startBitNum + 1;  if (nBits > 99) {    log.error("Number of bits for this packet greater than 99 - " + nBits);    return null;  }  int sAdd=1000 + startBitNum;  SerialMessage m=new SerialMessage(14 + nBits);  m.setElement(0,02);  m.setElement(1,'0');  m.setElement(2,'0');  m.setElement(3,'W');  m.setElement(4,'C');  m.setElement(5,'0' + (sAdd / 1000));  m.setElement(6,'0' + ((sAdd - ((sAdd / 1000) * 1000)) / 100));  m.setElement(7,'0' + ((sAdd - ((sAdd / 100) * 100)) / 10));  m.setElement(8,'0' + (sAdd - ((sAdd / 10) * 10)));  m.setElement(9,'0' + (nBits / 10));  m.setElement(10,'0' + (nBits - ((nBits / 10) * 10)));  for (int i=0; i < nBits; i++) {    int j=i - ((i / 8) * 8);    int val=outputArray[i / 8];    if (j == 0) {      m.setElement(11 + i,((val & 0x01) != 0) ? '1' : '0');    } else     if (j == 1) {      m.setElement(11 + i,((val & 0x02) != 0) ? '1' : '0');    } else     if (j == 2) {      m.setElement(11 + i,((val & 0x04) != 0) ? '1' : '0');    } else     if (j == 3) {      m.setElement(11 + i,((val & 0x08) != 0) ? '1' : '0');    } else     if (j == 4) {      m.setElement(11 + i,((val & 0x10) != 0) ? '1' : '0');    } else     if (j == 5) {      m.setElement(11 + i,((val & 0x20) != 0) ? '1' : '0');    } else     if (j == 6) {      m.setElement(11 + i,((val & 0x40) != 0) ? '1' : '0');    } else     if (j == 7) {      m.setElement(11 + i,((val & 0x80) != 0) ? '1' : '0');    }  }  m.setElement(11 + nBits,03);  m.setChecksum(12 + nBits);  m.setTimeout(mSendDelay);  m.setNoReply();  return m;}  }
class C{  private void drawResultPoints(Bitmap barcode,float scaleFactor,Result rawResult){  ResultPoint[] points=rawResult.getResultPoints();  if (points != null && points.length > 0) {    Canvas canvas=new Canvas(barcode);    Paint paint=new Paint();    paint.setColor(getResources().getColor(R.color.result_points));    if (points.length == 2) {      paint.setStrokeWidth(4.0f);      drawLine(canvas,paint,points[0],points[1],scaleFactor);    } else     if (points.length == 4 && (rawResult.getBarcodeFormat() == BarcodeFormat.UPC_A || rawResult.getBarcodeFormat() == BarcodeFormat.EAN_13)) {      drawLine(canvas,paint,points[0],points[1],scaleFactor);      drawLine(canvas,paint,points[2],points[3],scaleFactor);    } else {      paint.setStrokeWidth(10.0f);      for (      ResultPoint point : points) {        if (point != null) {          canvas.drawPoint(scaleFactor * point.getX(),scaleFactor * point.getY(),paint);        }      }    }  }}  }
class C{  private static Map<String,Integer> optionArgDefs(){  Map<String,Integer> optionArgDefs=new HashMap<>();  optionArgDefs.put("annotations",1);  optionArgDefs.put("changepreps",0);  return optionArgDefs;}  }
class C{  public static KeyStore loadMsCapiStore(MsCapiStoreType msCapiStoreType) throws CryptoException {  if (!areMsCapiStoresSupported()) {    ApplicationSettings.getInstance().setUseWindowsTrustedRootCertificates(false);    throw new CryptoException(res.getString("MsCapiStoresNotSupported.exception.message"));  }  KeyStore keyStore=null;  try {    keyStore=KeyStore.getInstance(msCapiStoreType.jce(),MS_CAPI.jce());  } catch (  KeyStoreException ex) {    throw new CryptoException(MessageFormat.format(res.getString("NoCreateKeyStore.exception.message"),msCapiStoreType.jce()),ex);  }catch (  NoSuchProviderException ex) {    throw new CryptoException(MessageFormat.format(res.getString("NoCreateKeyStore.exception.message"),msCapiStoreType.jce()),ex);  }  try {    keyStore.load(null,null);  } catch (  NoSuchAlgorithmException ex) {    throw new CryptoException(MessageFormat.format(res.getString("NoLoadKeyStoreType.exception.message"),msCapiStoreType.jce()),ex);  }catch (  CertificateException ex) {    throw new CryptoException(MessageFormat.format(res.getString("NoLoadKeyStoreType.exception.message"),msCapiStoreType.jce()),ex);  }catch (  IOException ex) {    throw new CryptoException(MessageFormat.format(res.getString("NoLoadKeyStoreType.exception.message"),msCapiStoreType.jce()),ex);  }  fixDuplicateMSCAPIAliases(keyStore);  return keyStore;}  }
class C{  @Override protected void updateLocateRegisters(){  int frameOffset=compiledMethod.getUnsignedNonVolatileOffset();  if (frameOffset >= 0) {    Address nonVolArea=framePtr.minus(frameOffset);    int first=compiledMethod.getFirstNonVolatileGPR();    if (first >= 0) {      Address location=nonVolArea;      for (int i=first; i < NUM_NONVOLATILE_GPRS; i++) {        int registerIndex=NONVOLATILE_GPRS[i].value();        registerLocations.set(registerIndex,location);        if (DEBUG) {          VM.sysWrite("UpdateRegisterLocations: Register ");          VM.sysWrite(registerIndex);          VM.sysWrite(" to Location ");          VM.sysWrite(location);          VM.sysWrite("\n");        }        location=location.minus(BYTES_IN_ADDRESS);      }    }    if (compiledMethod.isSaveVolatile()) {      Address location=nonVolArea.plus(BYTES_IN_ADDRESS * NUM_VOLATILE_GPRS);      for (int i=0; i < NUM_VOLATILE_GPRS; i++) {        int registerIndex=VOLATILE_GPRS[i].value();        registerLocations.set(registerIndex,location);        if (DEBUG) {          VM.sysWrite("UpdateRegisterLocations: Register ");          VM.sysWrite(registerIndex);          VM.sysWrite(" to Location ");          VM.sysWrite(location);          VM.sysWrite("\n");        }        location=location.minus(BYTES_IN_ADDRESS);      }    }  }}  }
class C{  private int nextPossibleSimpleKey(){  if (!this.possibleSimpleKeys.isEmpty()) {    return this.possibleSimpleKeys.values().iterator().next().getTokenNumber();  }  return -1;}  }
class C{  public synchronized CloneableIterator<byte[]> keys(final boolean up,final boolean rotating,final byte[] firstKey,final byte[] secondKey) throws IOException {  return new KeyIterator(up,rotating,firstKey,secondKey);}  }
class C{  public static SqlTemplate create(String template){  return new SqlTemplate(template,ImmutableMap.<String,String>of());}  }
class C{  public void bind(PathImpl context){  getWrappedPath().bind(context);}  }
class C{  @Override public Vertex parseCase(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  stream.nextWord();  stream.skipWhitespace();  Vertex expression=network.createInstance(Primitive.CASE);  String next=stream.peekWord();  boolean anyOrNone=false;  if (next.equalsIgnoreCase(ANY)) {    stream.nextWord();    next=stream.peekWord();    if (next.equalsIgnoreCase(OR)) {      stream.nextWord();      stream.skipWhitespace();      ensureNext(NONE,stream);      anyOrNone=true;    }  }  Vertex variable=parseElement(stream,elements,debug,network);  if (!anyOrNone && variable.instanceOf(Primitive.ARRAY)) {    variable.addRelationship(Primitive.TYPE,Primitive.REQUIRED);  }  expression.addRelationship(Primitive.CASE,variable);  next=stream.nextWord();  if (next.equalsIgnoreCase(AS)) {    Vertex as=parseElement(stream,elements,debug,network);    expression.addRelationship(Primitive.AS,as);    next=stream.nextWord();  }  if (next.equalsIgnoreCase(TOPIC)) {    Vertex topic=parseElement(stream,elements,debug,network);    expression.addRelationship(Primitive.TOPIC,topic);    next=stream.nextWord();  }  if (next.equalsIgnoreCase(THAT)) {    Vertex template=parseElement(stream,elements,debug,network);    expression.addRelationship(Primitive.THAT,template);    next=stream.nextWord();  }  if (next.equalsIgnoreCase(GOTO)) {    List<Vertex> thens=new ArrayList<Vertex>();    stream.skipWhitespace();    boolean parseGoto=true;    while (parseGoto) {      thens.add(parseElementName(Primitive.STATE,stream,elements,debug,network));      stream.skipWhitespace();      if (stream.peek() == ',') {        stream.skip();      } else {        parseGoto=false;      }    }    for (    Vertex then : thens) {      expression.addRelationship(Primitive.GOTO,then);    }  } else   if (next.equalsIgnoreCase(TEMPLATE) || next.equalsIgnoreCase(ANSWER)) {    Vertex template=parseElement(stream,elements,debug,network);    expression.addRelationship(Primitive.TEMPLATE,template);  } else   if (next.equalsIgnoreCase(RETURN)) {    expression.addRelationship(Primitive.GOTO,Primitive.RETURN);  } else {    stream.setPosition(stream.getPosition() - next.length());    throw new SelfParseException("expected one of 'goto, template, answer, return, that, topic', found: " + next,stream);  }  next=stream.peekWord();  if (next.equalsIgnoreCase(FOR)) {    stream.nextWord();    ensureNext(EACH,stream);    expression.addRelationship(Primitive.FOR,parseElement(stream,elements,debug,network));    ensureNext(OF,stream);    expression.addRelationship(Primitive.FOR,parseElement(stream,elements,debug,network));  }  ensureNext(';',stream);  return expression;}  }
class C{  public void source(File file){  addArg("source",file.getAbsolutePath());}  }
class C{  public boolean isPrinted(){  Object oo=get_Value(COLUMNNAME_IsPrinted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isDefaultHasChanged(){  return defaultHasChanged;}  }
class C{  public static void runTransformThread(Runnable runnable){  ThreadControllerWrapper.runThread(runnable,-1);}  }
class C{  public void start(){  try {    client.start();  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  @Override protected EClass eStaticClass(){  return SGenPackage.Literals.INT_LITERAL;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.847 -0500",hash_original_method="DBD2AA47670972F837B77D54B6813996",hash_generated_method="F9D97FC80731E757B1F78DAFBBD554EA") final void reject(Runnable command){  handler.rejectedExecution(command,this);}  }
class C{  Marketplace loadMarketplace() throws ObjectNotFoundException {  String marketplaceId=payload.getMarketplaceId();  if (Strings.isEmpty(marketplaceId)) {    return null;  }  Marketplace marketplace=new Marketplace();  marketplace.setMarketplaceId(marketplaceId);  marketplace=(Marketplace)serviceFacade.getDataService().getReferenceByBusinessKey(marketplace);  return marketplace;}  }
class C{  public void connected(){synchronized (this) {    if (idleReconnectFuture != null)     idleReconnectFuture.cancel(false);    scheduleIdleTask(idleTimeoutMsec.get(),false);  }}  }
class C{  boolean validateTime(int actionType,float time){  float maxTime=3600;  float minTime=0.020f;  if (time < minTime || time > maxTime) {    String errorNum=" ";switch (actionType) {case Conditional.ACTION_DELAYED_TURNOUT:      errorNum="Error39";    break;case Conditional.ACTION_RESET_DELAYED_TURNOUT:  errorNum="Error41";break;case Conditional.ACTION_DELAYED_SENSOR:errorNum="Error23";break;case Conditional.ACTION_RESET_DELAYED_SENSOR:errorNum="Error27";break;case Conditional.ACTION_SET_LIGHT_TRANSITION_TIME:errorNum="Error29";break;default :break;}javax.swing.JOptionPane.showMessageDialog(editConditionalFrame,java.text.MessageFormat.format(rbx.getString("Error38"),time,rbx.getString(errorNum)),Bundle.getMessage("ErrorTitle"),javax.swing.JOptionPane.ERROR_MESSAGE);return false;}return true;}  }
class C{  public Source<Double> fromNegativeInfinityToPositiveInfinity(){  return Compositions.weightWithValues(Doubles.fromNegativeInfinityToPositiveInfinity(),Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,Double.MAX_VALUE);}  }
class C{  public int[] readRemainingBytes() throws IOException {  int[] value=new int[this.getRemainingBytes() - 1];  log.debug("There are " + value.length + " remaining bytes");  for (int i=0; i < value.length; i++) {    value[i]=this.read("Remaining bytes " + i);  }  return value;}  }
class C{  public static BoundSize parseBoundSize(String s,boolean isGap,boolean isHor){  if (s.length() == 0 || s.equals("null") || s.equals("n"))   return null;  String cs=s;  boolean push=false;  if (s.endsWith("push")) {    push=true;    int l=s.length();    s=s.substring(0,l - (s.endsWith(":push") ? 5 : 4));    if (s.length() == 0)     return new BoundSize(null,null,null,true,cs);  }  String[] sizes=toTrimmedTokens(s,':');  String s0=sizes[0];  if (sizes.length == 1) {    boolean hasEM=s0.endsWith("!");    if (hasEM)     s0=s0.substring(0,s0.length() - 1);    UnitValue uv=parseUnitValue(s0,null,isHor);    return new BoundSize(((isGap || hasEM) ? uv : null),uv,(hasEM ? uv : null),push,cs);  } else   if (sizes.length == 2) {    return new BoundSize(parseUnitValue(s0,null,isHor),parseUnitValue(sizes[1],null,isHor),null,push,cs);  } else   if (sizes.length == 3) {    return new BoundSize(parseUnitValue(s0,null,isHor),parseUnitValue(sizes[1],null,isHor),parseUnitValue(sizes[2],null,isHor),push,cs);  } else {    throw new IllegalArgumentException("Min:Preferred:Max size section must contain 0, 1 or 2 colons. '" + cs + "'");  }}  }
class C{  @Scheduled(initialDelayString="${batch.greeting.initialdelay}",fixedRateString="${batch.greeting.fixedrate}") public void fixedRateJobWithInitialDelay(){  logger.info("> fixedRateJobWithInitialDelay");  counterService.increment("method.invoked.greetingBatchBean.fixedRateJobWithInitialDelay");  final Collection<Greeting> greetings=greetingService.findAll();  logger.info(MESSAGE_FORMAT,greetings.size());  logger.info("< fixedRateJobWithInitialDelay");}  }
class C{  public ArrayDeque(){  elements=new Object[16];}  }
class C{  public boolean validatePassword(String password,String goodHash){  return validatePassword(password.toCharArray(),goodHash);}  }
class C{  private void initializeDuration(Date date){  mDuration=new Duration(date.getTime());  final DurationFieldType[] durationFields=new DurationFieldType[]{DurationFieldType.weeks(),DurationFieldType.days(),DurationFieldType.hours(),DurationFieldType.minutes()};  mPeriod=mDuration.toPeriod(PeriodType.forFields(durationFields)).normalizedStandard();  updatePeriod();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.INTERFACE_BODY___INTERFACE_MEMBER_DECLARATION_1:    getInterfaceMemberDeclaration_1().clear();  getInterfaceMemberDeclaration_1().addAll((Collection<? extends InterfaceMemberDeclaration_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static UserResult parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  UserResult object=new UserResult();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"userResult".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (UserResult)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list3=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","desc").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setDesc(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","rc").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setRc(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));      reader.next();    } else {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","users").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list3.add(null);        reader.next();      } else {        list3.add(org.oscm.xsd.User.Factory.parse(reader));      }      boolean loopDone3=false;      while (!loopDone3) {        while (!reader.isEndElement())         reader.next();        reader.next();        while (!reader.isStartElement() && !reader.isEndElement())         reader.next();        if (reader.isEndElement()) {          loopDone3=true;        } else {          if (new javax.xml.namespace.QName("http://oscm.org/xsd","users").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list3.add(null);              reader.next();            } else {              list3.add(org.oscm.xsd.User.Factory.parse(reader));            }          } else {            loopDone3=true;          }        }      }      object.setUsers((org.oscm.xsd.User[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(org.oscm.xsd.User.class,list3));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  AStarNodeWrapper findMin(ArrayList<AStarNodeWrapper> set){  double min=100000;  AStarNodeWrapper minNode=null;  for (  AStarNodeWrapper n : set) {    if (n.fx < min) {      min=n.fx;      minNode=n;    }  }  return minNode;}  }
class C{  private void deleteData(){  try {    Aspects candles=tradePersistentModel.findAspectsByClassName(Candle.class.getName());    for (    Aspect item : candles.getAspect()) {      tradePersistentModel.removeAspect(item);    }    Aspects tradestrategies=tradePersistentModel.findAspectsByClassName(Tradestrategy.class.getName());    for (    Aspect item : tradestrategies.getAspect()) {      tradePersistentModel.removeAspect(item);    }    Aspects contracts=tradePersistentModel.findAspectsByClassName(Contract.class.getName());    for (    Aspect item : contracts.getAspect()) {      tradePersistentModel.removeAspect(item);    }    Aspects tradingdays=tradePersistentModel.findAspectsByClassName(Tradingday.class.getName());    for (    Aspect item : tradingdays.getAspect()) {      tradePersistentModel.removeAspect(item);    }  } catch (  Exception e) {    fail("Error deleteData Msg: " + e.getMessage());  } finally {    _log.info("All data deleted");  }}  }
class C{  public void addActionListener(ActionListener listener){  if (trayIcon != null) {    trayIcon.addActionListener(listener);    popup.addActionListener(listener);  }}  }
class C{  public java.lang.String toString(){  return DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.LONG).format(this);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/full-copies") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskList createFullCopy(@PathParam("id") URI id,VolumeFullCopyCreateParam param) throws InternalException {  return getFullCopyManager().createFullCopy(id,param);}  }
class C{  public static <A,B>DecomposableMatchBuilder0<Tuple2<A,B>> tuple2(MatchesExact<A> a,MatchesExact<B> b){  List<Matcher<Object>> matchers=Lists.of(ArgumentMatchers.eq(a.t),ArgumentMatchers.eq(b.t));  return new DecomposableMatchBuilder0<Tuple2<A,B>>(matchers,new Tuple2FieldExtractor<>());}  }
class C{  public static void verifyNoDisallowedStatuses(EppResource resource,ImmutableSet<StatusValue> disallowedStatuses) throws EppException {  Set<StatusValue> problems=Sets.intersection(resource.getStatusValues(),disallowedStatuses);  if (!problems.isEmpty()) {    throw new ResourceStatusProhibitsOperationException(problems);  }}  }
class C{  public static void main(String[] args){  In in;  String urlName="http://introcs.cs.princeton.edu/stdlib/InTest.txt";  System.out.println("readAll() from URL " + urlName);  System.out.println("---------------------------------------------------------------------------");  try {    in=new In(urlName);    System.out.println(in.readAll());  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println("readLine() from URL " + urlName);  System.out.println("---------------------------------------------------------------------------");  try {    in=new In(urlName);    while (!in.isEmpty()) {      String s=in.readLine();      System.out.println(s);    }  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println("readString() from URL " + urlName);  System.out.println("---------------------------------------------------------------------------");  try {    in=new In(urlName);    while (!in.isEmpty()) {      String s=in.readString();      System.out.println(s);    }  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println("readLine() from current directory");  System.out.println("---------------------------------------------------------------------------");  try {    in=new In("./InTest.txt");    while (!in.isEmpty()) {      String s=in.readLine();      System.out.println(s);    }  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println("readLine() from relative path");  System.out.println("---------------------------------------------------------------------------");  try {    in=new In("../stdlib/InTest.txt");    while (!in.isEmpty()) {      String s=in.readLine();      System.out.println(s);    }  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println("readChar() from file");  System.out.println("---------------------------------------------------------------------------");  try {    in=new In("InTest.txt");    while (!in.isEmpty()) {      char c=in.readChar();      System.out.print(c);    }  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println();  System.out.println("readLine() from absolute OS X / Linux path");  System.out.println("---------------------------------------------------------------------------");  in=new In("/n/fs/introcs/www/java/stdlib/InTest.txt");  try {    while (!in.isEmpty()) {      String s=in.readLine();      System.out.println(s);    }  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();  System.out.println("readLine() from absolute Windows path");  System.out.println("---------------------------------------------------------------------------");  try {    in=new In("G:\\www\\introcs\\stdlib\\InTest.txt");    while (!in.isEmpty()) {      String s=in.readLine();      System.out.println(s);    }    System.out.println();  } catch (  Exception e) {    System.out.println(e);  }  System.out.println();}  }
class C{  public void actionPerformed(java.awt.event.ActionEvent e){  if (mouseDelegator == null) {    return;  } else {    mouseDelegator.setActiveMouseModeWithID(e.getActionCommand());  }}  }
class C{  public TMultiplexedProtocol(TProtocol protocol,String serviceName){  super(protocol);  SERVICE_NAME=serviceName;}  }
class C{  public static Vector<Element> readFeatureNodes(String templateFile){  Vector<Element> feaTypes=new Vector<Element>();  try {    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    DocumentBuilder builder=factory.newDocumentBuilder();    InputStream feaTplStream=new FileInputStream(templateFile);    Document doc=builder.parse(feaTplStream);    Element root=doc.getDocumentElement();    NodeList childrent=root.getChildNodes();    for (int i=0; i < childrent.getLength(); i++)     if (childrent.item(i) instanceof Element) {      Element child=(Element)childrent.item(i);      feaTypes.add(child);    }  } catch (  Exception e) {    System.out.println("Reading featuretemplate fail " + e.getMessage());    e.printStackTrace();  }  return feaTypes;}  }
class C{  public Matrix4f mulAffineR(Matrix4x3fc right){  return mulAffineR(right,this);}  }
class C{  public boolean isEmpty(){  return buffer == EOF;}  }
class C{  protected boolean scrollTop(TextView widget,Spannable buffer){  final Layout layout=widget.getLayout();  if (getTopLine(widget) >= 0) {    Touch.scrollTo(widget,layout,widget.getScrollX(),layout.getLineTop(0));    return true;  }  return false;}  }
class C{  public DateMidnight roundHalfFloorCopy(){  return iInstant.withMillis(iField.roundHalfFloor(iInstant.getMillis()));}  }
class C{  public SwedishAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  TimerImpl(String name,boolean isDaemon){  this.setName(name);  this.setDaemon(isDaemon);  this.start();}  }
class C{  private static boolean doSelfValidation(){  char lastChar=UNIHANS[0];  String lastString=Character.toString(lastChar);  for (  char c : UNIHANS) {    if (lastChar == c) {      continue;    }    final String curString=Character.toString(c);    int cmp=COLLATOR.compare(lastString,curString);    if (cmp >= 0) {      Log.e(TAG,"Internal error in Unihan table. " + "The last string \"" + lastString + "\" is greater than current string \""+ curString+ "\".");      return false;    }    lastString=curString;  }  return true;}  }
class C{  public ImportException(){  super();}  }
class C{  public ArrayList<Instance> dataset(Instance inst){  for (int i=0; i < m_Datasets.size(); i++) {    if (m_Datasets.get(i).matchesTemplate(inst)) {      return m_Datasets.get(i).contents();    }  }  return null;}  }
class C{  public void distribute(MAccount acct,BigDecimal Amt,BigDecimal Qty,int C_Currency_ID){  log.info("distribute - Amt=" + Amt + " - Qty="+ Qty+ " - "+ acct);  getLines(false);  int precision=MCurrency.getStdPrecision(getCtx(),C_Currency_ID);  BigDecimal total=Env.ZERO;  BigDecimal totalQty=Env.ZERO;  int indexBiggest=-1;  int indexZeroPercent=-1;  for (int i=0; i < m_lines.length; i++) {    MDistributionLine dl=m_lines[i];    if (!dl.isActive())     continue;    dl.setAccount(acct);    dl.calculateAmt(Amt,precision);    dl.calculateQty(Qty);    total=total.add(dl.getAmt());    totalQty=totalQty.add(dl.getQty());    if (dl.getPercent().compareTo(Env.ZERO) == 0)     indexZeroPercent=i;    if (indexZeroPercent == -1) {      if (indexBiggest == -1)       indexBiggest=i; else       if (dl.getAmt().compareTo(m_lines[indexBiggest].getAmt()) > 0)       indexBiggest=i;    }  }  BigDecimal difference=Amt.subtract(total);  if (difference.compareTo(Env.ZERO) != 0) {    if (indexZeroPercent != -1) {      m_lines[indexZeroPercent].setAmt(difference);    } else     if (indexBiggest != -1) {      m_lines[indexBiggest].setAmt(m_lines[indexBiggest].getAmt().add(difference));    } else     log.warning("distribute - Remaining Difference=" + difference);  }  BigDecimal differenceQty=Qty.subtract(totalQty);  if (differenceQty.compareTo(Env.ZERO) != 0) {    if (indexZeroPercent != -1) {      m_lines[indexZeroPercent].setQty(differenceQty);    } else     if (indexBiggest != -1) {      m_lines[indexBiggest].setQty(m_lines[indexBiggest].getQty().add(differenceQty));    } else     log.warning("distribute - Remaining Qty Difference=" + differenceQty);  }  if (CLogMgt.isLevelFinest()) {    for (int i=0; i < m_lines.length; i++) {      if (m_lines[i].isActive())       log.fine("distribute = Amt=" + m_lines[i].getAmt() + " - "+ m_lines[i].getAccount());    }  }}  }
class C{  public static int removeDup(int[] A){  int i=0;  int j=0;  int pos=i + 1;  while (i < A.length) {    j=i + 1;    while (j < A.length && A[i] == A[j]) {      j++;    }    if (j >= A.length)     break;    A[pos]=A[j];    pos++;    i=j;  }  return pos;}  }
class C{  public static <K,V>Map<K,V> putAll(Map<K,V> self,Collection<? extends Map.Entry<? extends K,? extends V>> entries){  for (  Map.Entry<? extends K,? extends V> entry : entries) {    self.put(entry.getKey(),entry.getValue());  }  return self;}  }
class C{  public ST createStringTemplateInternally(CompiledST impl){  ST st=createStringTemplate(impl);  if (trackCreationEvents && st.debugState != null) {    st.debugState.newSTEvent=null;  }  return st;}  }
class C{  public void delete(ScriptFilterGroup group){  if (!security.hasRight(AccessRight.DELETE_FILTER) && !security.isOwner(group)) {    messages.warn("You don't have permission to delete this filter group.");  } else {    new ScriptFilterGroupDao().delete(group);    refresh();  }}  }
class C{  public int deliverMessage(Object message,int deliveryCount) throws Exception {  if (closed) {    System.err.println("Message can't be delivered as it's closed");    return 0;  }  if (!creditsSemaphore.tryAcquire()) {    try {      creditsSemaphore.acquire();    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();      throw new IllegalStateException(e.getMessage(),e);    }  }  boolean preSettle=sender.getRemoteSenderSettleMode() == SenderSettleMode.SETTLED;  byte[] tag=preSettle ? new byte[0] : protonSession.getTag();  ByteBuf nettyBuffer=PooledByteBufAllocator.DEFAULT.heapBuffer(1024);  try {    long messageFormat=0;    try {      messageFormat=sessionSPI.encodeMessage(message,deliveryCount,new NettyWritable(nettyBuffer));    } catch (    Throwable e) {      log.warn(e.getMessage(),e);      throw new ActiveMQAMQPInternalErrorException(e.getMessage(),e);    }    int size=nettyBuffer.writerIndex();synchronized (connection.getLock()) {      final Delivery delivery;      delivery=sender.delivery(tag,0,tag.length);      delivery.setMessageFormat((int)messageFormat);      delivery.setContext(message);      sender.send(nettyBuffer.array(),nettyBuffer.arrayOffset() + nettyBuffer.readerIndex(),nettyBuffer.readableBytes());      if (preSettle) {        delivery.settle();      } else {        sender.advance();      }    }    connection.flush();    return size;  }  finally {    nettyBuffer.release();  }}  }
class C{  public final void blinkCaret(){  if (caretBlinks) {    blink=!blink;    painter.invalidateSelectedLines();  } else {    blink=true;  }}  }
class C{  private VisorIgfsProfilerParsedLine(long ts,int entryType,String path,IgfsMode mode,long streamId,long dataLen,boolean overwrite,long pos,long userTime,long sysTime,long totalBytes){  this.ts=ts;  this.entryType=entryType;  this.path=path;  this.mode=mode;  this.streamId=streamId;  this.dataLen=dataLen;  this.overwrite=overwrite;  this.pos=pos;  this.userTime=userTime;  this.sysTime=sysTime;  this.totalBytes=totalBytes;}  }
class C{  public static float[] stringToFloatArray(String str){  if (str == null) {    return (null);  }  String[] array=str.split(",");  if (array.length == 0) {    array=new String[]{str.trim()};  }  float[] nArray=new float[array.length];  for (int i=0; i < nArray.length; ++i) {    nArray[i]=Float.parseFloat(array[i]);  }  return (nArray);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.804 -0400",hash_original_method="BDC602CCB29EA618773E287B406AEBFF",hash_generated_method="9E9A911B8C6008DBD7F6E616825BD9D1") protected CanReadFileFilter(){}  }
class C{  public void testDecoder4(){  boolean res;  int originalAppIdValue=mAppIdValue;  int originalContentTypeValue=mContentTypeValue;  Random rd=new Random();  for (int i=0; i < 100; i++) {    mAppIdValue=rd.nextInt(0x0FFFFFFF);    mContentTypeValue=rd.nextInt(0x0FFF);    byte[] pdu=createPDU(4);    WspTypeDecoder pduDecoder=new WspTypeDecoder(pdu);    res=pduDecoder.seekXWapApplicationId(mWspHeaderStart,mWspHeaderStart + mWspHeaderLen - 1);    assertFalse(res);  }  mAppIdValue=originalAppIdValue;  mContentTypeValue=originalContentTypeValue;}  }
class C{  public AbbaLockingDetector startCollecting(){  thread=new Thread(this,"AbbaLockingDetector");  thread.setDaemon(true);  thread.start();  return this;}  }
class C{  @DSComment("Perference UI, only change preference is spec") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:23.297 -0500",hash_original_method="4E596FDEE64331A25D2B8DFD1BC8797E",hash_generated_method="AB7808B7EE20CA1E95E83FE48A0F1C7F") public int findIndexOfValue(String value){  if (value != null && mEntryValues != null) {    for (int i=mEntryValues.length - 1; i >= 0; i--) {      if (mEntryValues[i].equals(value)) {        return i;      }    }  }  return -1;}  }
class C{  public static boolean eqv(Object left,Object right) throws PageException {  return eqv(Caster.toBooleanValue(left),Caster.toBooleanValue(right));}  }
class C{  private static void qsufsort(int[] I,int[] V,byte[] oldBuf){  int oldsize=oldBuf.length;  int[] buckets=new int[256];  int i, h, len;  for (i=0; i < 256; i++) {    buckets[i]=0;  }  for (i=0; i < oldsize; i++) {    buckets[(int)oldBuf[i] & 0xff]++;  }  for (i=1; i < 256; i++) {    buckets[i]+=buckets[i - 1];  }  for (i=255; i > 0; i--) {    buckets[i]=buckets[i - 1];  }  buckets[0]=0;  for (i=0; i < oldsize; i++) {    I[++buckets[(int)oldBuf[i] & 0xff]]=i;  }  I[0]=oldsize;  for (i=0; i < oldsize; i++) {    V[i]=buckets[(int)oldBuf[i] & 0xff];  }  V[oldsize]=0;  for (i=1; i < 256; i++) {    if (buckets[i] == buckets[i - 1] + 1) {      I[buckets[i]]=-1;    }  }  I[0]=-1;  for (h=1; I[0] != -(oldsize + 1); h+=h) {    len=0;    for (i=0; i < oldsize + 1; ) {      if (I[i] < 0) {        len-=I[i];        i-=I[i];      } else {        if (len != 0) {          I[i - len]=-len;        }        len=V[I[i]] + 1 - i;        split(I,V,i,len,h);        i+=len;        len=0;      }    }    if (len != 0) {      I[i - len]=-len;    }  }  for (i=0; i < oldsize + 1; i++) {    I[V[i]]=i;  }}  }
class C{  @Override public void add(int location,E object){  insertElementAt(object,location);}  }
class C{  private void initializeLiveAttributes(){  externalResourcesRequired=createLiveAnimatedBoolean(null,SVG_EXTERNAL_RESOURCES_REQUIRED_ATTRIBUTE,false);  preserveAspectRatio=createLiveAnimatedPreserveAspectRatio();}  }
class C{  public String charAsString(int nchars){  return buffer.substring(ptr,ptr + nchars);}  }
class C{  private void refreshTree() throws ValueTypeException {  DefaultMutableTreeNode treeNodeSelected=(DefaultMutableTreeNode)m_tree.getLastSelectedPathComponent();  strategyTreeModel.setData(this.strategies);  for (int i=0; i < m_tree.getRowCount(); i++) {    m_tree.expandRow(i);  }  if (null == treeNodeSelected)   return;  TreePath path=m_tree.findTreePathByObject(treeNodeSelected.getUserObject());  if (null != path) {    m_tree.setSelectionPath(path);    m_tree.scrollPathToVisible(path);  }}  }
class C{  public String classnamestub(){  String s=getClass().getName();  return s.substring(Math.max(s.lastIndexOf('.'),s.lastIndexOf('$')) + 1);}  }
class C{  private void checkEmptySelection(int columnIndex){  if (columnMetaData.get(columnIndex).isRemoved()) {    selectedColumns.remove(columnIndex);  } else {    selectedColumns.add(columnIndex);  }  if (selectedColumns.isEmpty()) {    columnErrorList.add(new ColumnError(Collections.<Integer>emptyList(),null,I18N.getGUILabel("io.dataimport.step.data_column_configuration.error_table.no_column_error")));  }}  }
class C{  public String numValuesTipText(){  return "The number of values to retain.";}  }
class C{  public Resource[] scanForResources(ScriptsLocation location,String prefix,String suffix){  try {    if (location.isFileSystem()) {      return new FileSystemScanner().scanForResources(location.getPath(),prefix,suffix);    }    return new ClassPathScanner(classLoader).scanForResources(location.getPath(),prefix,suffix);  } catch (  Exception e) {    throw new CassandraMigrationException("Unable to scan for CQL migrations in location: " + location,e);  }}  }
class C{  protected void subAppend(LoggingEvent event){  if (event.getLevel().toInt() == AuditLevel.AUDIT.toInt()) {    currentLevel=AuditLevel.AUDIT.toInt();    super.subAppend(event);  }}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  public static void load(){  try {    HDFS_BLOCK_SIZE=FileSystem.get(new Configuration()).getDefaultBlockSize(new Path("/"));  } catch (  IOException e) {    logger.error("Error getting FS Block Size!",e);  }  logger.info("HDFS BLock size: " + HDFS_BLOCK_SIZE);}  }
class C{  public static void onEventBegin(final Context context,final String event_id){  log.onEventBegin(context,event_id);}  }
class C{  public void addActionListener(ActionListener listener){  m_text.addActionListener(listener);}  }
class C{  public boolean isClosed(){synchronized (closeLock) {    return closed;  }}  }
class C{  public static String[] toStrings(SymbolToken[] symbols,int count){  if (count == 0)   return PrivateUtils.EMPTY_STRING_ARRAY;  String[] annotations=new String[count];  for (int i=0; i < count; i++) {    SymbolToken tok=symbols[i];    String text=tok.getText();    if (text == null) {      throw new UnknownSymbolException(tok.getSid());    }    annotations[i]=text;  }  return annotations;}  }
class C{  private void createAndDestroy(){  try {    region.create(new Integer(1),new Integer(1));  } catch (  Exception e) {    logWriter.error("Exception occurred",e);    throw new AssertionError("failed in trying to create",e);  }  try {    region.destroy(new Integer(1));  } catch (  Exception e) {    logWriter.error("Exception occurred",e);    throw new AssertionError("failed to destroy Integer",e);  }}  }
class C{  private void shareImage(final Bitmap bitmap,String original){  File image;  final File imagesDir=new File(this.getCacheDir().toString() + File.separator + "shared_image");  if (!imagesDir.exists()) {    imagesDir.mkdir();  } else {    deleteFilesInDir(imagesDir);  }  try {    image=File.createTempFile("img",".png",imagesDir);    File f=((Reddit)getApplicationContext()).getImageLoader().getDiscCache().get(original);    if (f != null) {      try {        Files.copy(f,image);        shareFile(image);      } catch (      IOException e) {        doAlternativeImageSave(image,bitmap,original);        shareFile(image);        e.printStackTrace();      }    } else {      doAlternativeImageSave(image,bitmap,original);      shareFile(image);    }  } catch (  IOException|NullPointerException e) {    e.printStackTrace();    Toast.makeText(this,getString(R.string.err_share_image),Toast.LENGTH_LONG).show();  }}  }
class C{  public void abortCycle(){  lock.lock();  if (contextsParked < contexts.length) {    aborted=true;  }  lock.unlock();}  }
class C{  private void onSearchEnd(int nbrMessages){  Log.d(LOG_TAG,"## onSearchEnd() nbrMsg=" + nbrMessages);  mWaitWhileSearchInProgressView.setVisibility(View.GONE);  mBackgroundImageView.setVisibility((0 == nbrMessages) && TextUtils.isEmpty(mPatternToSearchEditText.getText().toString()) ? View.VISIBLE : View.GONE);  mNoResultsTxtView.setVisibility(((0 == nbrMessages) && !TextUtils.isEmpty(mPatternToSearchEditText.getText().toString())) ? View.VISIBLE : View.GONE);}  }
class C{  public XYDataImageAnnotation(Image image,double x,double y,double w,double h){  this(image,x,y,w,h,false);}  }
class C{  public String replace(final CharSequence source){  if (source == null) {    return null;  }  return replace(source,0,source.length());}  }
class C{  @Override public synchronized int available(){  return count - pos;}  }
class C{  public boolean checkMaxDegree(int value){  if (value >= ROLE_CARDINALITY_INFINITY && (maxDegree == ROLE_CARDINALITY_INFINITY || (value != ROLE_CARDINALITY_INFINITY && value <= maxDegree))) {    return true;  } else {    return false;  }}  }
class C{  public synchronized List<Vertex> findAllInstances(Vertex type,Vertex relationship,Calendar start){  return new ArrayList<Vertex>();}  }
class C{  public static final Cache<String,BlockReader> createCache(int concurrencyLevel,int initialCapacity,float heapMemPercentage){  CacheBuilder builder=CacheBuilder.newBuilder().concurrencyLevel(concurrencyLevel).initialCapacity(initialCapacity).maximumWeight((long)(ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getMax() * heapMemPercentage)).weigher(new KVWeigher());  return buildCache(builder);}  }
class C{  public static void announceText(String text,View view,AccessibilityManager manager){  if (!manager.isEnabled()) {    return;  }  AccessibilityEvent event=AccessibilityEvent.obtain(AccessibilityEventCompat.TYPE_VIEW_ACCESSIBILITY_FOCUSED);  event.getText().add(text);  event.setEnabled(true);  event.setClassName(view.getClass().getName());  event.setPackageName(view.getContext().getPackageName());  AccessibilityEventCompat.asRecord(event).setSource(view);  manager.sendAccessibilityEvent(event);}  }
class C{  @Override public synchronized void minus(int value){  this.value-=value;}  }
class C{  public CGraphWindowMenuBar(final CGraphModel model,final IViewSwitcher viewSwitcher){  Preconditions.checkNotNull(model,"IE01626: Model argument can not be null");  m_model=model;  m_actionSave=new CActionSave(model.getParent(),model.getGraph());  final JCheckBoxMenuItem autoLayoutMenu=new JCheckBoxMenuItem(new CActionAutomaticLayouting(model.getGraph()));  final JCheckBoxMenuItem proximityBrowsingMenu=new JCheckBoxMenuItem(CActionProxy.proxy(new CActionProximityBrowsing(model.getParent(),model.getGraph())));  add(new CViewMenu(model.getParent(),model.getGraphPanel(),model.getGraph(),model.getViewContainer(),m_actionSave));  add(new CGraphMenu(model.getParent(),model.getGraph(),model.getViewContainer(),proximityBrowsingMenu,autoLayoutMenu));  add(m_selectionMenu=new CSelectionMenu(model));  add(new CSearchMenu(model.getGraph()));  add(m_pluginsMenu=new CPluginsMenu(model));  add(new CWindowsMenu(model.getParent(),viewSwitcher));  m_synchronizer=new CGraphWindowMenuBarSynchronizer(model.getGraph().getSettings(),proximityBrowsingMenu,autoLayoutMenu);  updateGui();}  }
class C{  public static Matrix forwardSub(Matrix L,Matrix b){  if (b.rows() != L.rows())   throw new ArithmeticException("Vector and matrix sizes do not agree");  Matrix y=new DenseMatrix(b.rows(),b.cols());  double[] y_col_k=new double[b.rows()];  for (int k=0; k < b.cols(); k++) {    for (int i=0; i < b.rows(); i++) {      y_col_k[i]=b.get(i,k);      for (int j=0; j < i; j++)       y_col_k[i]-=L.get(i,j) * y_col_k[j];      y_col_k[i]/=L.get(i,i);    }    for (int z=0; z < y_col_k.length; z++)     y.set(z,k,y_col_k[z]);  }  return y;}  }
class C{  private static EpisodeMatchingResult combineResults(EpisodeMatchingResult result,EpisodeMatchingResult resultFromParser){  if (result.season < 0 && resultFromParser.season >= 0) {    result.season=resultFromParser.season;  }  if (result.episodes.size() == 0 && resultFromParser.episodes.size() > 0) {    for (    int episode : resultFromParser.episodes) {      if (!result.episodes.contains(episode)) {        result.episodes.add(episode);      }    }  }  if (StringUtils.isBlank(result.name) && StringUtils.isNotBlank(resultFromParser.name)) {    result.name=resultFromParser.name;  }  return result;}  }
class C{  public String executeAndReturnString(String javaScript){  return Display.impl.browserExecuteAndReturnString(internal,javaScript);}  }
class C{  public void transformValues(TFloatFunction function){  byte[] states=_states;  float[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  private boolean alreadyWrapped(final ServletRequest request){  if (request instanceof RequestWrapper) {    return true;  }  if (!(request instanceof ServletRequestWrapper)) {    return false;  }  final ServletRequest nestedRequest=((ServletRequestWrapper)request).getRequest();  if (nestedRequest == request) {    return false;  }  return alreadyWrapped(nestedRequest);}  }
class C{  private boolean compare(List<String> remoteModules,List<String> expectedModules){  Collections.sort(remoteModules);  Collections.sort(expectedModules);  return remoteModules.equals(expectedModules);}  }
class C{  public ClientHttpRequest(String urlString) throws IOException {  this(new URL(urlString));}  }
class C{  @Override public boolean isNamespace(){  return eventType == XMLStreamConstants.NAMESPACE;}  }
class C{  public RepositoryLocation(String absoluteLocation) throws MalformedRepositoryLocationException {  if (isAbsolute(absoluteLocation)) {    initializeFromAbsoluteLocation(absoluteLocation);  } else {    repositoryName=null;    initializeAbsolutePath(absoluteLocation);  }}  }
class C{  private static boolean isSupportedSyntax(Statement stat,String sql){  try {    stat.execute(sql);    return true;  } catch (  SQLException ex) {    return false;  }}  }
class C{  @Override public void onMessagesDeleted(ContactId contact,List<String> msgIds) throws RemoteException {  mListener.onMessagesDeleted(contact,new HashSet<>(msgIds));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @SuppressWarnings("unchecked") public synchronized <K>Collection<K> failedKeys(){  return new LinkedHashSet<>((Collection<K>)failedKeys);}  }
class C{  public Coordinate(int x,int y){  this.x=x;  this.y=y;}  }
class C{  public void makePrivateWindow(){synchronized (list) {    list.remove(this);  }}  }
class C{  public boolean isEdge(){  return isEdge;}  }
class C{  private static <T>T cast(Class<T> clazz,Object o){  if (!clazz.isInstance(o))   throw new IllegalArgumentException(o.toString());  return clazz.cast(o);}  }
class C{  public BluetoothLEPeerNetwork(){}  }
class C{  private static boolean isProcessDirectory(File file){  try {    Integer.parseInt(file.getName());    return file.isDirectory();  } catch (  NumberFormatException e) {    return false;  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.149 -0500",hash_original_method="098653D6B0F25929404FF528DA5234A0",hash_generated_method="41813C68DF13445F7AE1E7B77D1F256D") public synchronized StringBuffer reverse(){  reverse0();  return this;}  }
class C{  public PacketCopy(String text){  this.text=text;}  }
class C{  public static void drawInRound(Bitmap src,Bitmap dest){  drawInRound(src,dest,CLEAR_COLOR);}  }
class C{  public JSONException(String message){  super(message);}  }
class C{  private void adjustViewsUpOrDown(){  final int childCount=getChildCount();  if (childCount > 0) {    int delta;    View child;    if (!mStackFromBottom) {      child=getChildAt(0);      delta=child.getTop() - mListPadding.top;      if (mFirstPosition != 0) {        delta-=mVerticalSpacing;      }      if (delta < 0) {        delta=0;      }    } else {      child=getChildAt(childCount - 1);      delta=child.getBottom() - (getHeight() - mListPadding.bottom);      if (mFirstPosition + childCount < mItemCount) {        delta+=mVerticalSpacing;      }      if (delta > 0) {        delta=0;      }    }    if (delta != 0) {      offsetChildrenTopAndBottom(-delta);    }  }}  }
class C{  public UniformGenerator(int dimensions,double scale){  this.dimensions=dimensions;  this.scale=scale;}  }
class C{  private MethodSpec createWriteMethod(ClassName elementClassName,GsonObject rootElements,boolean serializeNulls) throws ProcessingException {  MethodSpec.Builder writeMethod=MethodSpec.methodBuilder("write").addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).addParameter(JsonWriter.class,"out").addParameter(elementClassName,"value").addException(IOException.class);  CodeBlock.Builder codeBlock=CodeBlock.builder();  codeBlock.beginControlFlow("if (value == null)");  codeBlock.addStatement("out.nullValue()");  codeBlock.addStatement("return");  codeBlock.endControlFlow();  codeBlock.add("\n");  codeBlock.add("// Begin\n");  mSafeWriteVariableCount=0;  writeObject(0,codeBlock,rootElements,"",serializeNulls);  writeMethod.addCode(codeBlock.build());  return writeMethod.build();}  }
class C{  private void appendFaces(PrintWriter out){  Collections.sort(exportFaces);  String last_mtl=null;  Long last_obj_idx=Long.valueOf(-1);  for (  OBJFace f : exportFaces) {    if (!f.mtl.equals(last_mtl) && print_usemtl) {      out.println();      out.println("usemtl " + f.mtl);      last_mtl=f.mtl;    }    if (!f.obj_idx.equals(last_obj_idx)) {      out.println("g o" + f.obj_idx);      last_obj_idx=f.obj_idx;    }    out.print("f");    for (int i=0; i < f.vertices.length; i++) {      if (f.normals != null && f.uv != null)       out.print(" " + f.vertices[i] + "/"+ f.uv[i]+ "/"+ f.normals[i]); else       if (f.normals == null && f.uv != null)       out.print(" " + f.vertices[i] + "/"+ f.uv[i]); else       if (f.normals != null && f.uv == null)       out.print(" " + f.vertices[i] + "//"+ f.normals[i]); else       out.print(" " + f.vertices[i]);    }    out.println();  }}  }
class C{  public AStarSearch(IScore sf){  this.scoringFunction=sf;}  }
class C{  public void finishAffinity(){  if (mParent != null) {    throw new IllegalStateException("Can not be called from an embedded activity");  }  if (mResultCode != RESULT_CANCELED || mResultData != null) {    throw new IllegalStateException("Can not be called to deliver a result");  }  try {    if (ActivityManagerNative.getDefault().finishActivityAffinity(mToken)) {      mFinished=true;    }  } catch (  RemoteException e) {  }}  }
class C{  public static long sizeOf(Object obj,ClassLoader cl){  Instruments instruments=new Instruments();  instruments.classLoader=cl;  return instruments.internalSizeOf(obj);}  }
class C{  public String generatePaySelect(IMiniTable miniTable,ValueNamePair paymentRule,Timestamp payDate,BankInfo bi){  log.info("");  String trxName=null;  trx=null;  String PaymentRule=paymentRule.getValue();  m_ps=new MPaySelection(Env.getCtx(),0,trxName);  m_ps.setName(Msg.getMsg(Env.getCtx(),"VPaySelect") + " - " + paymentRule.getName()+ " - "+ payDate);  m_ps.setPayDate(payDate);  m_ps.setC_BankAccount_ID(bi.C_BankAccount_ID);  m_ps.setIsApproved(true);  if (!m_ps.save()) {    m_ps=null;    return Msg.translate(Env.getCtx(),"C_PaySelection_ID");  }  log.config(m_ps.toString());  int rows=miniTable.getRowCount();  int line=0;  for (int i=0; i < rows; i++) {    IDColumn id=(IDColumn)miniTable.getValueAt(i,0);    Object ips_id=miniTable.getValueAt(i,11);    if (id.isSelected()) {      line+=10;      MPaySelectionLine psl=new MPaySelectionLine(m_ps,line,PaymentRule);      int C_Invoice_ID=id.getRecord_ID().intValue();      int C_InvoicePaySchedule_ID=Integer.parseInt(ips_id.toString());      BigDecimal OpenAmt=(BigDecimal)miniTable.getValueAt(i,9);      BigDecimal PayAmt=(BigDecimal)miniTable.getValueAt(i,10);      boolean isSOTrx=false;      psl.setInvoice(C_Invoice_ID,C_InvoicePaySchedule_ID,isSOTrx,OpenAmt,PayAmt,OpenAmt.subtract(PayAmt));      if (!psl.save(trxName)) {        return Msg.translate(Env.getCtx(),"C_PaySelectionLine_ID");      }      log.fine("C_Invoice_ID=" + C_Invoice_ID + ", PayAmt="+ PayAmt);    }  }  return null;}  }
class C{  private Segment attributeSegment(Attribute attribute){  final Element owner=attribute.getElement();  final byte[] name=attribute.getName().getBytes();  final byte[] value=attribute.getValue().getBytes();  final int attrLeft=indexOfAttributeName(xml,name,owner.start.left + owner.getName().length());  final int valueLeft=indexOf(xml,value,attrLeft + name.length);  return new Segment(attrLeft,valueLeft + value.length);}  }
class C{  private void createRasterFrameBufferObject(){  this.fbo=glGenFramebuffers();  this.depthRenderBuffer=glGenRenderbuffers();  glBindFramebuffer(GL_FRAMEBUFFER,fbo);  IntBuffer renderBuffers=BufferUtils.createIntBuffer(2).put(GL_COLOR_ATTACHMENT0).put(GL_COLOR_ATTACHMENT1);  renderBuffers.flip();  glDrawBuffers(renderBuffers);  glBindRenderbuffer(GL_RENDERBUFFER,depthRenderBuffer);  glRenderbufferStorage(GL_RENDERBUFFER,GL_DEPTH_COMPONENT,width,height);  glFramebufferTexture2D(GL_FRAMEBUFFER,GL_COLOR_ATTACHMENT0,GL_TEXTURE_2D,positionTexture,0);  glFramebufferTexture2D(GL_FRAMEBUFFER,GL_COLOR_ATTACHMENT1,GL_TEXTURE_2D,normalTexture,0);  glFramebufferRenderbuffer(GL_FRAMEBUFFER,GL_DEPTH_ATTACHMENT,GL_RENDERBUFFER,depthRenderBuffer);  int fboStatus=glCheckFramebufferStatus(GL_FRAMEBUFFER);  if (fboStatus != GL_FRAMEBUFFER_COMPLETE) {    throw new AssertionError("Could not create FBO: " + fboStatus);  }  glBindFramebuffer(GL_FRAMEBUFFER,0);  glBindRenderbuffer(GL_RENDERBUFFER,0);}  }
class C{  public boolean equals(java.lang.Object obj){  return false;}  }
class C{  public static void hideKeyboard(Context context){  try {    InputMethodManager inputManager=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);    inputManager.hideSoftInputFromWindow(((Activity)context).getCurrentFocus().getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);  } catch (  Exception e) {    Log.e(TAG,"Sigh, cant even hide keyboard " + e.getMessage());  }}  }
class C{  public void importPrivateKey(BurpCertificate certificate,String filename){  setStatus("Importing private key...");  BufferedReader br;  try {    br=new BufferedReader(new FileReader(filename));    PEMParser pp=new PEMParser(br);    PEMKeyPair pemKeyPair=(PEMKeyPair)pp.readObject();    KeyPair kp=new JcaPEMKeyConverter().getKeyPair(pemKeyPair);    pp.close();    setCertificateTree();    setStatus("Private Key imported.");    certificate.setPrivateKey(kp.getPrivate());  } catch (  IOException e) {    setStatus("Error importing private key. (" + e.getMessage() + ")");    e.printStackTrace();  }catch (  Exception e) {    setStatus("Error (" + e.getMessage() + ")");  }}  }
class C{  public static Collection<? extends CharSequence> neighbors(String geohash){  return addNeighbors(geohash,geohash.length(),new ArrayList<CharSequence>(8));}  }
class C{  public TLongHashSet(int initialCapacity,TLongHashingStrategy strategy){  super(initialCapacity,strategy);}  }
class C{  private NetworkAddress(){}  }
class C{  public TileFactoryInfo(String name,int minimumZoomLevel,int maximumZoomLevel,int totalMapZoom,int tileSize,boolean xr2l,boolean yt2b,String baseURL,String xparam,String yparam,String zparam){  this.name=name;  this.minimumZoomLevel=minimumZoomLevel;  this.maximumZoomLevel=maximumZoomLevel;  this.totalMapZoom=totalMapZoom;  this.baseURL=baseURL;  this.xparam=xparam;  this.yparam=yparam;  this.zparam=zparam;  this.setXr2l(xr2l);  this.setYt2b(yt2b);  this.tileSize=tileSize;  int tilesize=this.getTileSize(0);  longitudeDegreeWidthInPixels=new double[totalMapZoom + 1];  longitudeRadianWidthInPixels=new double[totalMapZoom + 1];  mapCenterInPixelsAtZoom=new Point2D.Double[totalMapZoom + 1];  mapWidthInTilesAtZoom=new int[totalMapZoom + 1];  for (int z=totalMapZoom; z >= 0; --z) {    longitudeDegreeWidthInPixels[z]=tilesize / 360.0;    longitudeRadianWidthInPixels[z]=tilesize / (2.0 * Math.PI);    int t2=tilesize / 2;    mapCenterInPixelsAtZoom[z]=new Point2D.Double(t2,t2);    mapWidthInTilesAtZoom[z]=tilesize / this.getTileSize(0);    tilesize*=2;  }}  }
class C{  public static boolean isJavaIdentifier(final String str){  if (str == null || str.length() < 1) {    return false;  }  if (!Character.isJavaIdentifierStart(str.charAt(0))) {    return false;  }  for (int i=1; i < str.length(); i++) {    if (!Character.isJavaIdentifierPart(str.charAt(i))) {      return false;    }  }  return true;}  }
class C{  public APIError(Type type,String message,Collection<Field> expected){  this.type=type;  this.message=message;  this.statusCode=null;  this.expected=expected;}  }
class C{  public boolean isCompleted(){  if (m_order == null)   return false;  return MOrder.STATUS_Completed.equals(m_order.getDocStatus()) || MOrder.STATUS_Closed.equals(m_order.getDocStatus());}  }
class C{  public void addFormField(String fieldName,int x,int y,int width){  int start=pointToInt(x,y);  int end=pointToInt(x + width,y);  addFormRange(fieldName,start,end);}  }
class C{  public TermQueryBuilder(String name,long value){  this(name,(Object)value);}  }
class C{  public void java_lang_SecurityManager_currentClassLoader0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassLoaderObject());}  }
class C{  public List<Integer> emit(List<Object> tuple,Object messageId){  return emit(Utils.DEFAULT_STREAM_ID,tuple,messageId);}  }
class C{  protected void installKeyboardActions(JLabel l){  int dka=l.getDisplayedMnemonic();  if (dka != 0) {    Component lf=l.getLabelFor();    if (lf != null) {      ActionMap actionMap=l.getActionMap();      actionMap.put(PRESS,ACTION_PRESS);      InputMap inputMap=SwingUtilities.getUIInputMap(l,JComponent.WHEN_IN_FOCUSED_WINDOW);      if (inputMap == null) {        inputMap=new ComponentInputMapUIResource(l);        SwingUtilities.replaceUIInputMap(l,JComponent.WHEN_IN_FOCUSED_WINDOW,inputMap);      }      inputMap.clear();      inputMap.put(KeyStroke.getKeyStroke(dka,ActionEvent.SHIFT_MASK + ActionEvent.CTRL_MASK,false),PRESS);    }  }}  }
class C{  public boolean isControl(){  return this.control;}  }
class C{  public JSONArray(String source) throws JSONException {  this(new JSONTokener(source));}  }
class C{  public Builder weeks(Integer weeks){  this.weeks=weeks;  return this;}  }
class C{  private final Class<? extends Annotation> loadAnnotationClass(final String fullyQualifiedClassName){  Class<?> cls=null;  try {    cls=Class.forName(fullyQualifiedClassName,true,getAppClassLoader());  } catch (  ClassNotFoundException e) {  }  if (cls != null && cls.isAnnotation() && cls.getAnnotation(Target.class) != null) {    if (AnnotatedTypes.hasTypeQualifierElementTypes(cls.getAnnotation(Target.class).value(),cls)) {      Class<? extends Annotation> annoClass=cls.asSubclass(Annotation.class);      if (isSupportedAnnotationClass(annoClass)) {        return annoClass;      }    }  }  return null;}  }
class C{  public static ClientBundleResource createFromFile(IJavaProject javaProject,IFile file){  if (!isProbableClientBundleResource(file)) {    return null;  }  String methodName=ClientBundleUtilities.suggestMethodName(file);  String resourceTypeName=ClientBundleUtilities.suggestResourceTypeName(javaProject,file);  return ClientBundleResource.create(file,methodName,resourceTypeName);}  }
class C{  public final boolean isQueued(Thread thread){  if (thread == null)   throw new NullPointerException();  for (Node p=tail; p != null; p=p.prev)   if (p.thread == thread)   return true;  return false;}  }
class C{  public boolean accept(File f){  if (f.isDirectory()) {    return true;  }  String extension=getExtension(f);  if (extension != null) {    return extension.equals(java);  }  return false;}  }
class C{  public boolean readRemoteRssi(BleRssiCallback bleCallback){  handleRSSIReadCallback(bleCallback);  return handleAfterInitialed(getBluetoothGatt().readRemoteRssi(),bleCallback);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static String addBlacklistEntry(final String blacklistToUse,final String entry,final RequestHeader header){  String newEntry=entry;  if (blacklistToUse == null || blacklistToUse.isEmpty()) {    return "";  }  if (newEntry == null || newEntry.isEmpty()) {    return header.get(HeaderFramework.CONNECTION_PROP_PATH) + "?selectList=&selectedListName=" + blacklistToUse;  }  if (newEntry == null || newEntry.isEmpty()) {    ConcurrentLog.warn(APP_NAME,"skipped adding an empty entry");    return "";  }  if (newEntry.startsWith("http://")) {    newEntry=newEntry.substring(7);  } else   if (newEntry.startsWith("https://")) {    newEntry=newEntry.substring(8);  }  if (newEntry.indexOf("*") < 0) {    newEntry=".*" + newEntry + ".*/.*";    newEntry=".*.*/.*" + newEntry + ".*";  } else {    int pos=newEntry.indexOf('/',0);    if (pos < 0) {      newEntry=newEntry + "/.*";    }  }  int pos=newEntry.indexOf('/',0);  String host=newEntry.substring(0,pos);  String path=newEntry.substring(pos + 1);  for (  final BlacklistType supportedBlacklistType : BlacklistType.values()) {    if (ListManager.listSetContains(supportedBlacklistType + ".BlackLists",blacklistToUse)) {      try {        Switchboard.urlBlacklist.add(supportedBlacklistType,blacklistToUse,host,path);      } catch (      PunycodeException e) {        ConcurrentLog.warn(APP_NAME,"Unable to add blacklist entry to blacklist " + supportedBlacklistType,e);      }    }  }  SearchEventCache.cleanupEvents(true);  return null;}  }
class C{  private CellInfoCdma(Parcel in){  super(in);  mCellIdentityCdma=CellIdentityCdma.CREATOR.createFromParcel(in);  mCellSignalStrengthCdma=CellSignalStrengthCdma.CREATOR.createFromParcel(in);  if (DBG)   log("CellInfoCdma(Parcel): " + toString());}  }
class C{  public static void hideKeyboard(Context context,View target){  if (context == null || target == null) {    return;  }  InputMethodManager imm=getInputMethodManager(context);  imm.hideSoftInputFromWindow(target.getWindowToken(),0);}  }
class C{  protected void rotateOrthogonal(){  off.setRotation(on.getRotation() + 1,this);  on.setRotation(off.getRotation() + 1,this);  unknown.setRotation(unknown.getRotation() + 1,this);  inconsistent.setRotation(inconsistent.getRotation() + 1,this);  displayState(lightState());  repaint();}  }
class C{  public boolean handleRequest(InputStream input,OutputStream output,ImapSession session){  final boolean result;  if (isSelectedMailboxDeleted(session)) {    writeSignoff(output,session);    result=false;  } else {    ImapRequestLineReader request=new ImapRequestStreamLineReader(input,output);    final Logger logger=session.getLog();    try {      request.nextChar();    } catch (    DecodingException e) {      logger.debug("Unexpected end of line. Cannot handle request: ",e);      abandon(output,session);      return false;    }    ImapResponseComposerImpl response=new ImapResponseComposerImpl(new OutputStreamImapResponseWriter(output));    if (doProcessRequest(request,response,session)) {      try {        request.consumeLine();      } catch (      DecodingException e) {        if (logger.isInfoEnabled()) {          logger.info("Fault during clean up: " + e.getMessage());        }        logger.debug("Abandoning after fault in clean up",e);        abandon(output,session);        return false;      }      result=!(ImapSessionState.LOGOUT == session.getState());    } else {      logger.debug("Connection was abandoned after request processing failed.");      result=false;      abandon(output,session);    }  }  return result;}  }
class C{  public ActivationException(String s){  super(s);  initCause(null);}  }
class C{  public boolean containsValue(Object value){  return indexOfValue(value) >= 0;}  }
class C{  private Collection<Operation> createNotifyServicesToAbort(TransactionServiceState state){  Collection<Operation> operations=new HashSet<>();  for (  String service : state.createdLinks) {    operations.add(createDeleteOp(service));    state.readLinks.remove(service);    state.modifiedLinks.remove(service);  }  for (  String service : state.readLinks) {    state.modifiedLinks.remove(service);    operations.add(createNotifyOp(service,Operation.TX_ABORT));  }  for (  String service : state.modifiedLinks) {    operations.add(createNotifyOp(service,Operation.TX_ABORT));  }  return operations;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.EVENT_DEFINITION___AFTER_EVERY_EVENT_1:    return ((InternalEList<?>)getAfterEveryEvent_1()).basicRemove(otherEnd,msgs);case UmplePackage.EVENT_DEFINITION___AFTER_EVENT_1:  return ((InternalEList<?>)getAfterEvent_1()).basicRemove(otherEnd,msgs);case UmplePackage.EVENT_DEFINITION___ANONYMOUS_EVENT_DEFINITION_11:return ((InternalEList<?>)getAnonymous_eventDefinition_1_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static boolean isTypeVisible(java.lang.invoke.MethodType type,Class<?> refc){  for (int n=-1, max=type.parameterCount(); n < max; n++) {    Class<?> ptype=(n < 0 ? type.returnType() : type.parameterType(n));    if (!isTypeVisible(ptype,refc))     return false;  }  return true;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_C_RfQResponse_ID=getRecord_ID();}  }
class C{  public void test_putLjava_lang_ObjectLjava_lang_Object(){  hm.put("KEY","VALUE");  assertEquals("Failed to install key/value pair","VALUE",hm.get("KEY"));  LinkedHashMap m=new LinkedHashMap();  m.put(new Short((short)0),"short");  m.put(null,"test");  m.put(new Integer(0),"int");  assertEquals("Failed adding to bucket containing null","short",m.get(new Short((short)0)));  assertEquals("Failed adding to bucket containing null2","int",m.get(new Integer(0)));}  }
class C{  static boolean paramNameMatchesRegex(String paramName,String paramRegex){  assert paramRegex.charAt(0) == '/';  assert paramRegex.charAt(paramRegex.length() - 1) == '/';  assert paramRegex.length() > 2;  String regex=paramRegex.substring(1,paramRegex.length() - 1);  return Pattern.compile(regex).matcher(paramName).find();}  }
class C{  @Override synchronized public long commit(){  final long begin=System.currentTimeMillis();  super.commit();  final IIndexManager indexManager=getIndexManager();  if (indexManager.isGroupCommit()) {    return 0L;  }  final long commitTime=getIndexManager().commit();  final long elapsed=System.currentTimeMillis() - begin;  if (log.isInfoEnabled())   log.info("commit: commit latency=" + elapsed + "ms");  return commitTime;}  }
class C{  public void finalizeCloudlet(){  double wallClockTime=CloudSim.clock() - arrivalTime;  cloudlet.setExecParam(wallClockTime,totalCompletionTime);  long finished=0;  if (cloudlet.getCloudletStatus() == Cloudlet.SUCCESS) {    finished=cloudlet.getCloudletLength();  } else {    finished=cloudletFinishedSoFar / Consts.MILLION;  }  cloudlet.setCloudletFinishedSoFar(finished);}  }
class C{  public boolean isReadWrite(){  return m_readWrite;}  }
class C{  public void processWasHalted(){  removeNewHooks();}  }
class C{  void stopForegroundCompat(int id){  if (mStopForeground != null) {    mStopForegroundArgs[0]=Boolean.TRUE;    invokeMethod(mStopForeground,mStopForegroundArgs);    return;  }  mNM.cancel(id);  mSetForegroundArgs[0]=Boolean.FALSE;  invokeMethod(mSetForeground,mSetForegroundArgs);}  }
class C{  public JSONTokener(Reader reader){  this.reader=reader.markSupported() ? reader : new BufferedReader(reader);  this.eof=false;  this.usePrevious=false;  this.previous=0;  this.index=0;  this.character=1;  this.line=1;}  }
class C{  public boolean removeMouseListener(final MapMouseListener listener){  if (listener == null) {    throw new IllegalArgumentException("The argument must not be null");  }  return listeners.remove(listener);}  }
class C{  private boolean downField(MathContainer component){  if (component instanceof MathSequence) {    if (component.getParent() instanceof MathFunction) {      MathFunction function=(MathFunction)component.getParent();      int downIndex=function.getDownIndex(component.getParentIndex());      if (downIndex >= 0) {        currentField=function.getArgument(downIndex);        currentOffset=0;        return true;      }    }  }  if (component.getParent() != null) {    return downField(component.getParent());  }  return false;}  }
class C{  public void aliasType(final String name,final Class<?> type){  if (classAliasingMapper == null) {    throw new InitializationException("No " + ClassAliasingMapper.class.getName() + " available");  }  classAliasingMapper.addTypeAlias(name,type);}  }
class C{  @SuppressWarnings("unused") public boolean typeEquals(final FieldDescriptor other){  return this == other || other != null && this.type == other.type && this.subType == other.subType && this.scale == other.scale && this.length == other.length;}  }
class C{  private int validateResponseCode(int code){  if ((code >= ResponseCodes.OBEX_HTTP_OK) && (code <= ResponseCodes.OBEX_HTTP_PARTIAL)) {    return code;  }  if ((code >= ResponseCodes.OBEX_HTTP_MULT_CHOICE) && (code <= ResponseCodes.OBEX_HTTP_USE_PROXY)) {    return code;  }  if ((code >= ResponseCodes.OBEX_HTTP_BAD_REQUEST) && (code <= ResponseCodes.OBEX_HTTP_UNSUPPORTED_TYPE)) {    return code;  }  if ((code >= ResponseCodes.OBEX_HTTP_INTERNAL_ERROR) && (code <= ResponseCodes.OBEX_HTTP_VERSION)) {    return code;  }  if ((code >= ResponseCodes.OBEX_DATABASE_FULL) && (code <= ResponseCodes.OBEX_DATABASE_LOCKED)) {    return code;  }  return ResponseCodes.OBEX_HTTP_INTERNAL_ERROR;}  }
class C{  public String reference(Object obj){  return null;}  }
class C{  public static void drawStringUnderlineCharAt(JComponent c,Graphics g,String text,int underlinedIndex,int x,int y){  g.drawString(text,x,y);  if (underlinedIndex >= 0 && underlinedIndex < text.length()) {    FontMetrics fm=g.getFontMetrics();    int underlineRectX=x + fm.stringWidth(text.substring(0,underlinedIndex));    int underlineRectY=y;    int underlineRectWidth=fm.charWidth(text.charAt(underlinedIndex));    int underlineRectHeight=1;    g.fillRect(underlineRectX,underlineRectY + fm.getDescent() - 1,underlineRectWidth,underlineRectHeight);  }}  }
class C{  public String toString(String sep){  if (isEmpty()) {    return "";  } else {    StringBuilder buf=new StringBuilder();    buf.append(head);    for (List<A> l=tail; l.nonEmpty(); l=l.tail) {      buf.append(sep);      buf.append(l.head);    }    return buf.toString();  }}  }
class C{  public JEditTextArea(){  this(TextAreaDefaults.getDefaults());}  }
class C{  private int measureHeight(int measureSpec){  int result=0;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public int size(){  return entries.size();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:43.600 -0500",hash_original_method="AD90F95A26E2D9ECD94EF58E091F4A84",hash_generated_method="AD90F95A26E2D9ECD94EF58E091F4A84") void clearExpiredCookies(long now){  if (!checkInitialized()) {    return;  }  final String expires=COOKIES_EXPIRES_COL + " <= ?";synchronized (mCookieLock) {    mDatabase.delete(mTableNames[TABLE_COOKIES_ID],expires,new String[]{Long.toString(now)});  }}  }
class C{  public Graphics create(){  PeekGraphics newGraphics=null;  try {    newGraphics=(PeekGraphics)clone();    newGraphics.mGraphics=(Graphics2D)mGraphics.create();  } catch (  CloneNotSupportedException e) {  }  return newGraphics;}  }
class C{  public void addAllMethods(JarFile jarFile){  List<String> classes=Utils.getClassesFromJar(jarFile);  for (  String clz : classes) {    for (    SootMethod meth : Scene.v().getSootClass(clz).getMethods()) {      this.addMethod(meth);    }  }}  }
class C{  public int[] enabledEvents(){  boolean[] userRecordableEvts0=userRecordableEvts;  int[] enabledEvts=new int[len];  int enabledEvtsLen=0;  for (int type=0; type < len; type++) {    if (userRecordableEvts0[type])     enabledEvts[enabledEvtsLen++]=type;  }  return U.unique(enabledEvts,enabledEvtsLen,inclEvtTypes,inclEvtTypes.length);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.N4_GETTER_DECLARATION;}  }
class C{  public HostInfo addHost(String name,String address,int protocol,int httpPort,int tcpPort,String username,String password,String macAddress,int wolPort,boolean useEventServer,int eventServerPort){  ContentValues values=new ContentValues();  values.put(MediaContract.HostsColumns.NAME,name);  values.put(MediaContract.HostsColumns.ADDRESS,address);  values.put(MediaContract.HostsColumns.PROTOCOL,protocol);  values.put(MediaContract.HostsColumns.HTTP_PORT,httpPort);  values.put(MediaContract.HostsColumns.TCP_PORT,tcpPort);  values.put(MediaContract.HostsColumns.USERNAME,username);  values.put(MediaContract.HostsColumns.PASSWORD,password);  values.put(MediaContract.HostsColumns.MAC_ADDRESS,macAddress);  values.put(MediaContract.HostsColumns.WOL_PORT,wolPort);  values.put(MediaContract.HostsColumns.USE_EVENT_SERVER,useEventServer);  values.put(MediaContract.HostsColumns.EVENT_SERVER_PORT,eventServerPort);  Uri newUri=context.getContentResolver().insert(MediaContract.Hosts.CONTENT_URI,values);  long newId=Long.valueOf(MediaContract.Hosts.getHostId(newUri));  hosts=getHosts(true);  HostInfo newHost=null;  for (  HostInfo host : hosts) {    if (host.getId() == newId) {      newHost=host;      break;    }  }  return newHost;}  }
class C{  public boolean readOne(){  MessageHistory.get().reset();  try (DocumentContext context=in.readingDocument()){    if (!context.isData())     return false;    wireParser.accept(context.wire(),null);  }   return true;}  }
class C{  private void sendRegistrationToServer(String token){}  }
class C{  private static void process(PsiClass clazz,PsiSubstitutor superClassSubstitutor,boolean shouldProcessDeprecated,Set<PsiClass> processedWithoutDeprecated,Set<PsiClass> processedAll,List<PsiMethod> collector,GrTypeDefinition classToDelegateTo,boolean keepParameterAnnotations){  final List<PsiMethod> result=new ArrayList<PsiMethod>();  for (  PsiClassType superType : getSuperTypes(clazz)) {    processClassInner(superType,superClassSubstitutor,shouldProcessDeprecated,result,classToDelegateTo,processedWithoutDeprecated,processedAll,keepParameterAnnotations);  }  if (clazz instanceof GrTypeDefinition) {    for (    GrField field : ((GrTypeDefinition)clazz).getFields()) {      final PsiAnnotation delegate=PsiImplUtil.getAnnotation(field,GroovyCommonClassNames.GROOVY_LANG_DELEGATE);      if (delegate == null)       continue;      final PsiType type=field.getDeclaredType();      if (!(type instanceof PsiClassType))       continue;      processClassInner((PsiClassType)type,superClassSubstitutor,shouldDelegateDeprecated(delegate),result,classToDelegateTo,processedWithoutDeprecated,processedAll,shouldKeepParameterAnnotations(delegate));    }  }  collector.addAll(result);}  }
class C{  public static void writeLines(File file,Collection<?> lines,String lineEnding) throws IOException {  writeLines(file,null,lines,lineEnding,false);}  }
class C{  public static String collapseNewlines(String argStr){  char last=argStr.charAt(0);  StringBuffer argBuf=new StringBuffer();  for (int cIdx=0; cIdx < argStr.length(); cIdx++) {    char ch=argStr.charAt(cIdx);    if (ch != '\n' || last != '\n') {      argBuf.append(ch);      last=ch;    }  }  return argBuf.toString();}  }
class C{  protected QName createQName(String name,Namespace namespace,String qualifiedName){  return new QName(name,namespace,qualifiedName);}  }
class C{  JCERSAPrivateCrtKey(RSAPrivateCrtKey key){  this.modulus=key.getModulus();  this.publicExponent=key.getPublicExponent();  this.privateExponent=key.getPrivateExponent();  this.primeP=key.getPrimeP();  this.primeQ=key.getPrimeQ();  this.primeExponentP=key.getPrimeExponentP();  this.primeExponentQ=key.getPrimeExponentQ();  this.crtCoefficient=key.getCrtCoefficient();}  }
class C{  boolean checkSource(PathImpl sourceDir,String javaName){  try {    while (javaName != null && !javaName.equals("")) {      int p=javaName.indexOf('/');      String head;      if (p >= 0) {        head=javaName.substring(0,p);        javaName=javaName.substring(p + 1);      } else {        head=javaName;        javaName=null;      }      String[] names=sourceDir.list();      int i;      for (i=0; i < names.length; i++) {        if (names[i].equals(head))         break;      }      if (i == names.length)       return false;      sourceDir=sourceDir.lookup(head);    }  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);    return false;  }  return true;}  }
class C{  public Collection<Value> values(){  this.buildIfNeededMap();  return map.values();}  }
class C{  private void buildDeprecatedSection(PathOperation operation,MarkupDocBuilder docBuilder){  Boolean deprecated=operation.getOperation().isDeprecated();  if (deprecated != null && deprecated) {    docBuilder.block(DEPRECATED_OPERATION,MarkupBlockStyle.EXAMPLE,null,MarkupAdmonition.CAUTION);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public DOMStorableInputOutputFormat(DOMFactory factory){  this(factory,"Drawing","xml","image/x-jhotdraw");}  }
class C{  private Operation createNotifyOp(String service,String header){  return Operation.createPatch(this,service).addRequestHeader(Operation.TRANSACTION_HEADER,header).setBody(new TransactionServiceState()).setReferer(getUri()).setCompletion(null);}  }
class C{  public void test_digest$BII() throws Exception {  for (  Entry<Provider,List<String>> e : digestAlgs.entrySet()) {    for (    String algorithm : e.getValue()) {      MessageDigest digest=MessageDigest.getInstance(algorithm,e.getKey().getName());      assertNotNull(digest);      int len=digest.getDigestLength();      byte[] digestBytes=new byte[len];      digest.digest(digestBytes,0,digestBytes.length);    }    try {      MessageDigest.getInstance("SHA").digest(new byte[]{},Integer.MAX_VALUE,755);      fail();    } catch (    IllegalArgumentException expected) {    }  }}  }
class C{  public final void moveVariation(int delta){  int nBack=0;  boolean found=false;  while (tree.currentNode != tree.rootNode) {    tree.goBack();    nBack++;    if (((delta < 0) && tree.currentNode.defaultChild > 0) || ((delta > 0) && tree.currentNode.defaultChild < tree.variations().size() - 1)) {      found=true;      break;    }  }  if (found) {    int varNo=tree.currentNode.defaultChild;    int nChildren=tree.variations().size();    int newPos=varNo + delta;    newPos=Math.max(newPos,0);    newPos=Math.min(newPos,nChildren - 1);    tree.reorderVariation(varNo,newPos);    tree.goForward(newPos);    nBack--;  }  while (nBack > 0) {    tree.goForward(-1);    nBack--;  }  pendingDrawOffer=false;  updateTimeControl(true);}  }
class C{  public int fib2(int n){  if (n == 0)   return 0;  if (n == 1)   return 1;  int prev=0;  int res=1;  for (int i=2; i <= n; i++) {    int temp=res;    res+=prev;    prev=temp;  }  return res;}  }
class C{  public IsComposingParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {  try {    SAXParserFactory factory=SAXParserFactory.newInstance();    SAXParser parser=factory.newSAXParser();    parser.parse(mInputSource,this);    return this;  } catch (  IOException e) {    throw new ParseFailureException("Failed to parse input source!",e);  }}  }
class C{  public ZipEntry(String name){  if (name == null) {    throw new NullPointerException();  }  if (name.length() > 0xFFFF) {    throw new IllegalArgumentException("entry name too long");  }  this.name=name;}  }
class C{  public boolean contains(int s){  runTo(-1);  return super.contains(s);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public XYSeries toXYSeries(){  XYSeries xySeries=new XYSeries(mTitle);  return xySeries;}  }
class C{  public int write(Protein protein) throws IOException {  List<String> proteinIdsForGFF=getProteinAccessions(protein);  int sequenceLength=protein.getSequenceLength();  String md5=protein.getMd5();  String date=dmyFormat.format(new Date());  Set<Match> matches=protein.getMatches();  for (  String proteinIdForGFF : proteinIdsForGFF) {    if (matches.size() > 0) {      proteinIdForGFF=ProteinMatchesGFFResultWriter.getValidGFF3SeqId(proteinIdForGFF);      super.gffWriter.write("##sequence-region " + proteinIdForGFF + " 1 "+ sequenceLength);      if (writeFullGFF) {        writeReferenceLine(proteinIdForGFF,sequenceLength,md5);        addFASTASeqToMap(proteinIdForGFF,protein.getSequence());      }      processMatches(matches,proteinIdForGFF,date,protein,proteinIdForGFF,writeFullGFF);    }  }  return 0;}  }
class C{  @Override public DoublesSketch downSample(int smallerK){  HeapDoublesSketch oldSketch=this;  HeapDoublesSketch newSketch=HeapDoublesSketch.newInstance(smallerK);  DoublesMergeImpl.downSamplingMergeInto(oldSketch,newSketch);  return newSketch;}  }
class C{  public static RectF trapToRect(float[] array){  RectF r=new RectF(Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY,Float.NEGATIVE_INFINITY,Float.NEGATIVE_INFINITY);  for (int i=1; i < array.length; i+=2) {    float x=array[i - 1];    float y=array[i];    r.left=(x < r.left) ? x : r.left;    r.top=(y < r.top) ? y : r.top;    r.right=(x > r.right) ? x : r.right;    r.bottom=(y > r.bottom) ? y : r.bottom;  }  r.sort();  return r;}  }
class C{  final DialogOption showYesNoMessage(String message,String title,int msgType,DialogOption defaultOption){  final String[] options={DialogOption.YES.getText(),DialogOption.NO.getText()};  int option;  try {    option=JOptionPane.showOptionDialog(getParentComponent(),getLabel(message),title,JOptionPane.YES_NO_OPTION,msgType,null,options,defaultOption.getText());  } catch (  InternalError ie) {    option=JOptionPane.NO_OPTION;  }  if (option == JOptionPane.YES_OPTION) {    return DialogOption.YES;  }  return DialogOption.NO;}  }
class C{  @SuppressWarnings("unchecked") @Override public Object clone(){  HashMap<K,V> result;  try {    result=(HashMap<K,V>)super.clone();  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }  result.makeTable(table.length);  result.entryForNullKey=null;  result.size=0;  result.keySet=null;  result.entrySet=null;  result.values=null;  result.init();  result.constructorPutAll(this);  return result;}  }
class C{  public static AuthToken custom(String principal,String credentials,String realm,String scheme,Map<String,Object> parameters){  return new InternalAuthToken(parameters("scheme",scheme,"principal",principal,"credentials",credentials,"realm",realm,"parameters",parameters).asMap(Values.ofValue()));}  }
class C{  protected ResultSet doQuery(String sql,List<String> params) throws SQLException {  FBPreparedStatement s=getStatement(sql);  for (int i=0; i < params.size(); i++)   s.setStringForced(i + 1,params.get(i));  return s.executeMetaDataQuery();}  }
class C{  @Override public Object clone(){  try {    return (DecimalFormatSymbols)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public static String createProperty(String name,Object val){  return "-D" + name + "="+ val;}  }
class C{  private void doDownload(){  String downloadDir=getDownloadDir();  if (!getFileHandler().exists(downloadDir)) {    getFileHandler().mkdirs(downloadDir);  }  File targetFile=new File(downloadDir,getSourceFileName());  getLogger().info("Downloading container from [" + this.remoteLocation + "] to ["+ targetFile+ "]",getClass().getName());  Get getTask=(Get)this.antUtils.createAntTask("get");  getTask.setUseTimestamp(true);  getTask.setSrc(this.remoteLocation);  String userInfo=this.remoteLocation.getUserInfo();  if (userInfo != null) {    int separator=userInfo.indexOf(":");    if (separator > 0) {      String username=userInfo.substring(0,separator);      getTask.setUsername(username);      String password=userInfo.substring(separator + 1);      getTask.setPassword(password);    } else {      getTask.setUsername(userInfo);    }  }  getTask.setDest(targetFile);  getTask.execute();}  }
class C{  static void checkOpcode(final int opcode,final int type){  if (opcode < 0 || opcode > 199 || TYPE[opcode] != type) {    throw new IllegalArgumentException("Invalid opcode: " + opcode);  }}  }
class C{  public void updateReadStats(OFMessage ofm){switch (ofm.getType()) {case BARRIER_REPLY:    ctrReadBarrierReply.increment();  break;case BARRIER_REQUEST:ctrReadBarrierRequest.increment();break;case ECHO_REPLY:ctrReadEchoReply.increment();break;case ECHO_REQUEST:ctrReadEchoRequest.increment();break;case ERROR:ctrReadError.increment();break;case EXPERIMENTER:ctrReadExperimenter.increment();break;case FEATURES_REPLY:ctrReadFeaturesReply.increment();break;case FEATURES_REQUEST:ctrReadFeaturesRequest.increment();break;case FLOW_MOD:ctrReadFlowMod.increment();break;case FLOW_REMOVED:ctrReadFlowRemoved.increment();break;case GET_ASYNC_REPLY:ctrReadGetAsyncReply.increment();break;case GET_ASYNC_REQUEST:ctrReadGetAsyncRequest.increment();break;case GET_CONFIG_REPLY:ctrReadGetConfigReply.increment();break;case GET_CONFIG_REQUEST:ctrReadGetConfigRequest.increment();break;case GROUP_MOD:ctrReadGroupMod.increment();break;case HELLO:ctrReadHello.increment();break;case METER_MOD:ctrReadMeterMod.increment();break;case PACKET_IN:ctrReadPacketIn.increment();break;case PACKET_OUT:ctrReadPacketOut.increment();break;case PORT_MOD:ctrReadPortMod.increment();break;case PORT_STATUS:ctrReadPortStatus.increment();break;case QUEUE_GET_CONFIG_REPLY:ctrReadQueueGetConfigReply.increment();break;case QUEUE_GET_CONFIG_REQUEST:ctrReadQueueGetConfigRequest.increment();break;case ROLE_REPLY:ctrReadRoleReply.increment();break;case ROLE_REQUEST:ctrReadRoleRequest.increment();break;case SET_ASYNC:ctrReadSetAsync.increment();break;case SET_CONFIG:ctrReadSetConfig.increment();break;case STATS_REPLY:ctrReadStatsReply.increment();break;case STATS_REQUEST:ctrReadStatsRequest.increment();break;case TABLE_MOD:ctrReadTableMod.increment();break;case BUNDLE_ADD_MESSAGE:ctrReadBundleAdd.increment();break;case BUNDLE_CONTROL:ctrReadBundleControl.increment();break;case REQUESTFORWARD:ctrReadRequestForward.increment();break;case ROLE_STATUS:ctrReadRoleStatus.increment();break;case TABLE_STATUS:ctrReadTableStatus.increment();break;default :logger.warn(ofm.getType().toString() + ": Invalid OpenFlow Messaqe!");break;}}  }
class C{  public TranslucentPopup(Component owner,Component contents,int x,int y){  this();  if (contents == null) {    throw new IllegalArgumentException("Contents must be non-null");  }  reset(owner,contents,x,y);}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:58.380 -0500",hash_original_method="4F6254C867328A153FDD5BD23453E816",hash_generated_method="DA7F1F18A359C63EC62E782C4227E19E") public Extensions(){}  }
class C{  @Override public void run(){  amIActive=true;  String NIRHeader=null;  String RedHeader=null;  String outputHeader=null;  int row, col, x, y;  double[] NIRVal;  double[] redVal;  float progress=0;  int a;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      NIRHeader=args[i];    } else     if (i == 1) {      RedHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((NIRHeader == null) || (RedHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster NIR=new WhiteboxRaster(NIRHeader,"r");    int rows=NIR.getNumberRows();    int cols=NIR.getNumberColumns();    double noData=NIR.getNoDataValue();    WhiteboxRaster red=new WhiteboxRaster(RedHeader,"r");    if (rows != red.getNumberRows() || cols != red.getNumberColumns()) {      showFeedback("The two input images must have the same number of rows and columns.");      return;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",NIRHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(NIR.getPreferredPalette());    for (row=0; row < rows; row++) {      NIRVal=NIR.getRowValues(row);      redVal=red.getRowValues(row);      for (col=0; col < cols; col++) {        if (NIRVal[col] != noData && redVal[col] != noData) {          if ((NIRVal[col] + redVal[col]) != 0) {            outputFile.setValue(row,col,(NIRVal[col] - redVal[col]) / (NIRVal[col] + redVal[col]));          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    NIR.close();    red.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public AmqpReceiver createReceiver(String address) throws Exception {  return createReceiver(address,null,false);}  }
class C{  public void pushPairCurrentMatched(ElemTemplateElement template,int child){  m_currentMatchTemplates.push(template);  m_currentMatchedNodes.push(child);}  }
class C{  public LwM2mPath(int objectId,int objectInstanceId,int resourceId){  this.objectId=objectId;  this.objectInstanceId=objectInstanceId;  this.resourceId=resourceId;  this.resourceInstanceId=null;}  }
class C{  public void testSealedObject2() throws Exception {  try {    new SealedObject(null){    };    fail("NullPointerException should be thrown in the case " + "of null SealedObject.");  } catch (  NullPointerException e) {  }  String secret="secret string";  Cipher cipher=new NullCipher();  SealedObject so1=new SealedObject(secret,cipher);  SealedObject so2=new SealedObject(so1){  };  assertEquals("The secret content of the object should equals " + "to the secret content of initial object.",secret,so2.getObject(cipher));  assertEquals("The algorithm which was used to seal the object " + "should be the same as the algorithm used to seal the " + "initial object",so1.getAlgorithm(),so2.getAlgorithm());}  }
class C{  public static boolean assertProbabilities(final double[] da){  for (  final double d : da) {    Exam.assertProbability(d);  }  return true;}  }
class C{  public EntityQuery(Delegator delegator){  this.delegator=delegator;}  }
class C{  public CSVReaderBuilder withCSVParser(final CSVParser csvParser){  this.csvParser=csvParser;  return this;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:43.609 -0500",hash_original_method="10415454EB24D9D06B07AD8A5863D117",hash_generated_method="10415454EB24D9D06B07AD8A5863D117") void removeCache(String url){  assert !JniUtil.useChromiumHttpStack();  if (url == null || !checkInitialized()) {    return;  }  mCacheDatabase.execSQL("DELETE FROM cache WHERE url = ?",new String[]{url});}  }
class C{  public static MGRSCoord fromLatLon(Angle latitude,Angle longitude,Globe globe,int precision){  if (latitude == null || longitude == null) {    String message=Logging.getMessage("nullValue.LatitudeOrLongitudeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  final MGRSCoordConverter converter=new MGRSCoordConverter(globe);  long err=converter.convertGeodeticToMGRS(latitude.radians,longitude.radians,precision);  if (err != MGRSCoordConverter.MGRS_NO_ERROR) {    String message=Logging.getMessage("Coord.MGRSConversionError");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return new MGRSCoord(latitude,longitude,converter.getMGRSString());}  }
class C{  public void testMoveMessages() throws Exception {  final int QUEUE_SIZE=30000;  final String MOVE_TO_DESTINATION_NAME=getDestinationString() + ".dest";  final long TEST_TIMEOUT=20000;  Connection conn=createConnection();  try {    conn.start();    Session session=conn.createSession(true,Session.SESSION_TRANSACTED);    MessageProducer producer=session.createProducer(destination);    for (int i=0; i < QUEUE_SIZE; i++) {      Message message=session.createMessage();      message.setIntProperty("id",i);      producer.send(message);    }    session.commit();  }  finally {    conn.close();  }  Queue queue=(Queue)broker.getRegionBroker().getDestinationMap().get(destination);  ConnectionContext context=new ConnectionContext(new NonCachedMessageEvaluationContext());  context.setBroker(broker.getBroker());  context.getMessageEvaluationContext().setDestination(destination);  long startTimeMillis=System.currentTimeMillis();  Assert.assertEquals(1,queue.moveMatchingMessagesTo(context,"id=" + (QUEUE_SIZE - 1),createDestination(MOVE_TO_DESTINATION_NAME)));  long durationMillis=System.currentTimeMillis() - startTimeMillis;  LOG.info("It took " + durationMillis + "ms to move the last message from a queue a "+ QUEUE_SIZE+ " messages.");  Assert.assertTrue("Moving the message took too long: " + durationMillis + "ms",durationMillis < TEST_TIMEOUT);}  }
class C{  public void runAfter(long delta){  long now=CurrentTime.getExactTime();  boolean isNotify=_clock.queueAt(this,now + delta);  if (isNotify) {    _coordinatorThread.wake();  }}  }
class C{  public static boolean isSupplementaryCodePoint(int codePoint){  return (MIN_SUPPLEMENTARY_CODE_POINT <= codePoint && MAX_CODE_POINT >= codePoint);}  }
class C{  public void sendToDimension(IMessage message,int dimensionId){  netHandler.sendToDimension(message,dimensionId);}  }
class C{  public static int write(Sequence in,int type,File out) throws IOException {  List providers=getMidiFileWriters();  int bytesWritten=-2;  for (int i=0; i < providers.size(); i++) {    MidiFileWriter writer=(MidiFileWriter)providers.get(i);    if (writer.isFileTypeSupported(type,in)) {      bytesWritten=writer.write(in,type,out);      break;    }  }  if (bytesWritten == -2) {    throw new IllegalArgumentException("MIDI file type is not supported");  }  return bytesWritten;}  }
class C{  @POST @Path("/run-notifier") @CheckPermission(roles={Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN}) public Response runMailNotifier(){  _notificationManager.runMailNotifierNow();  return Response.ok().build();}  }
class C{  public void saveChannel(CumulusChannel jsonChannel){  String jsonString=jsonChannel.toString();  Intent i=new Intent();  i.setClassName("com.felkertech.n.cumulustv","com.felkertech.n.plugins.DataReceiver");  i.setAction(ACTION_RECEIVER);  i.putExtra(INTENT_EXTRA_JSON,jsonString);  if (proprietary) {    i.putExtra(INTENT_EXTRA_SOURCE,getApplicationInfo().packageName + "," + getApplicationInfo().name);  } else {    i.putExtra(INTENT_EXTRA_SOURCE,"");  }  i.putExtra(INTENT_EXTRA_ACTION,INTENT_EXTRA_ACTION_WRITE);  if (DEBUG) {    Log.d(TAG,"Saving changes");  }  sendBroadcast(i);  finish();}  }
class C{  public boolean isGround(){  if (s() instanceof VarNode)   return false;  if (p() instanceof VarNode)   return false;  if (o() instanceof VarNode)   return false;  if (c() instanceof VarNode)   return false;  return true;}  }
class C{  public void testBug11663() throws Exception {  if (versionMeetsMinimum(4,1,0) && ((com.mysql.jdbc.Connection)this.conn).getUseServerPreparedStmts()) {    Connection testcaseGenCon=null;    PrintStream oldErr=System.err;    try {      createTable("testBug11663","(field1 int)");      Properties props=new Properties();      props.setProperty("autoGenerateTestcaseScript","true");      testcaseGenCon=getConnectionWithProps(props);      ByteArrayOutputStream testStream=new ByteArrayOutputStream();      PrintStream testErr=new PrintStream(testStream);      System.setErr(testErr);      this.pstmt=testcaseGenCon.prepareStatement("SELECT field1 FROM testBug11663 WHERE field1=?");      this.pstmt.setInt(1,1);      this.pstmt.execute();      System.setErr(oldErr);      String testString=new String(testStream.toByteArray());      int setIndex=testString.indexOf("SET @debug_stmt_param");      int equalsIndex=testString.indexOf("=",setIndex);      String paramName=testString.substring(setIndex + 4,equalsIndex);      int usingIndex=testString.indexOf("USING " + paramName,equalsIndex);      assertTrue(usingIndex != -1);    }  finally {      System.setErr(oldErr);      if (this.pstmt != null) {        this.pstmt.close();        this.pstmt=null;      }      if (testcaseGenCon != null) {        testcaseGenCon.close();      }    }  }}  }
class C{  @SideEffectFree public void log(LogRecord record){  throw new RuntimeException();}  }
class C{  public Object convert(Object valueToConvert) throws IllegalArgumentException {  if (valueToConvert instanceof java.sql.Date) {    return ((Date)valueToConvert).toString();  }  throw new IllegalArgumentException("The source object must be of type: " + getSourceType().getName());}  }
class C{  public static int parseTitleMap(String s) throws NumberFormatException {  int titleCase=MAP_UNDEFINED;  int length=s.length();  if (length >= 4 && length <= 6) {    titleCase=Integer.parseInt(s,16);  } else   if (s.length() != 0) {    throw new NumberFormatException();  }  return titleCase;}  }
class C{  private void mergeUnknownNode(Node node) throws IIOInvalidTreeException {  MarkerSegment newGuy=new MarkerSegment(node);  int lastUnknown=findLastUnknownMarkerSegmentPosition();  boolean hasJFIF=(findMarkerSegment(JFIFMarkerSegment.class,true) != null);  int firstAdobe=findMarkerSegmentPosition(AdobeMarkerSegment.class,true);  if (lastUnknown != -1) {    markerSequence.add(lastUnknown + 1,newGuy);  } else   if (hasJFIF) {    markerSequence.add(1,newGuy);  }  if (firstAdobe != -1) {    markerSequence.add(firstAdobe,newGuy);  } else {    markerSequence.add(0,newGuy);  }}  }
class C{  public void put(Object type,V value){  putClass(type.getClass(),value);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static <T extends BlockObject>List<UnManagedExportMask> findMatchingExportMaskForHost(T volume,List<UnManagedExportMask> unManagedMasks,Set<String> initiatorUris,Map<String,Set<String>> iniByProtocol,DbClient dbClient,URI vArray,URI vPoolURI,boolean hostPartOfCluster,Set<String> initiatorsPartOfCluster,URI clusterUri,List<String> errorMessages){  List<UnManagedExportMask> eligibleMasks=new ArrayList<UnManagedExportMask>();  Iterator<UnManagedExportMask> itr=unManagedMasks.iterator();  while (itr.hasNext()) {    UnManagedExportMask mask=itr.next();    if (!VolumeIngestionUtil.validateStoragePortsInVarray(dbClient,volume,vArray,mask.getKnownStoragePortUris(),mask,errorMessages)) {      itr.remove();      continue;    }    if (null != mask.getKnownInitiatorUris() && !mask.getKnownInitiatorUris().isEmpty()) {      _logger.info("Group initiators by protocol {}",Joiner.on(",").join(iniByProtocol.entrySet()));      for (      Entry<String,Set<String>> entry : iniByProtocol.entrySet()) {        _logger.info("Processing Initiators by Protocol {} Group",entry.getValue());        if (hostPartOfCluster) {          _logger.info("Host part of a Cluster- Comparing discovered [{}] with unmanaged [{}] ",Joiner.on(",").join(entry.getValue()),Joiner.on(",").join(mask.getKnownInitiatorUris()));          Set<String> ViPRDiscToExistingKnownInisDiff=Sets.difference(entry.getValue(),mask.getKnownInitiatorUris());          if (ViPRDiscToExistingKnownInisDiff.isEmpty()) {            Set<String> remainingInis=Sets.difference(mask.getKnownInitiatorUris(),entry.getValue());            Set<String> iniPartOfCluster=Sets.difference(remainingInis,initiatorsPartOfCluster);            _logger.info("ViPR initiators are a complete subset of unmanaged mask's known initiators. Trying to find whether the other initiators {}" + " in the unmanaged mask are actually owned by the same cluster {} this host belongs to.",Joiner.on(",").join(iniPartOfCluster),clusterUri);            if (iniPartOfCluster.size() == remainingInis.size()) {              _logger.info("Matched Mask Found {}, as there are no other initiators in existing mask owned by the cluster, this host belongs to.",mask.getMaskName());              if (verifyNumPath(Collections.singletonList(initiatorUris),mask.getZoningMap(),volume,vPoolURI,dbClient)) {                eligibleMasks.add(mask);              }              itr.remove();            } else {              _logger.info("Even though Existing UnManaged Mask {} contains subset of ViPR initiators, it can't be used as there are other initiators [{}] " + "in the mask which are owned by a different Hosts in the same cluster {} as this host belongs.",new Object[]{mask.getMaskName(),Joiner.on(",").join(iniPartOfCluster),clusterUri});            }          } else {            Set<String> existingknownInisToViprDiscDiff=Sets.difference(mask.getKnownInitiatorUris(),entry.getValue());            if (existingknownInisToViprDiscDiff.isEmpty()) {              _logger.info("Matched Mask Found {}, as existing ViPR known initiators are a complete subset of ViPR discovered.",mask.getMaskName());              if (verifyNumPath(Collections.singletonList(initiatorUris),mask.getZoningMap(),volume,vPoolURI,dbClient)) {                eligibleMasks.add(mask);              }              itr.remove();            } else {              _logger.info("Existing ViPR known Initiators are not a complete subset of ViPR discovered, skipping the unmanaged mask {}",mask.getMaskName());            }          }        } else {          _logger.info("Host not part of any Cluster- Comparing discovered [{}] with unmanaged [{}] ",Joiner.on(",").join(entry.getValue()),Joiner.on(",").join(mask.getKnownInitiatorUris()));          Set<String> existingknownInisToViprDiscDiff=Sets.difference(mask.getKnownInitiatorUris(),entry.getValue());          if (existingknownInisToViprDiscDiff.isEmpty()) {            _logger.info("Matched Mask Found after Grouping by Protocol {}",mask.getMaskName());            if (verifyNumPath(Collections.singletonList(initiatorUris),mask.getZoningMap(),volume,vPoolURI,dbClient)) {              eligibleMasks.add(mask);            }            itr.remove();          } else {            _logger.info("Existing Unmanaged mask initiators have other ViPR known initiators {} from a different Host, where in the given host is not part of any cluster",Joiner.on(",").join(existingknownInisToViprDiscDiff));          }        }      }    }  }  return eligibleMasks;}  }
class C{  public static CGPoint ccpLerp(CGPoint a,CGPoint b,float alpha){  return ccpAdd(ccpMult(a,1.f - alpha),ccpMult(b,alpha));}  }
class C{  public void requestEmoticons(boolean forcedUpdate){  if (forcedUpdate || !emoticonManager.loadEmoticons(false)) {    String url="https://api.twitch.tv/kraken/chat/emoticons";    url="https://api.twitch.tv/kraken/chat/emoticon_images";    if (attemptRequest(url,forcedUpdate ? "update" : "")) {      TwitchApiRequest request=new TwitchApiRequest(this,RequestType.EMOTICONS,url);      executor.execute(request);    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected boolean accept(Component aComponent){  return fitnessTestPolicy.accept(aComponent);}  }
class C{  public void clearListeners(){  listeners=new ArrayList<T>();}  }
class C{  default B generation(final BookMeta src){  this.meta().setGeneration(src.getGeneration());  return this.getBuilder();}  }
class C{  public static void readyGoWithAnimatorForResult(Activity activity,Class<?> className,@NonNull ActivityOptionsCompat option,int requestCode){  ActivityCompat.startActivityForResult(activity,getIntent(activity,className),requestCode,option.toBundle());}  }
class C{  public int size(){  return boundsPerInfVar.size();}  }
class C{  public static void dumpUpdateParams(String prefix,Object[] newData,Object[] oldData){  if (!log.isDebugEnabled()) {    return;  }  StringWriter buffer=new StringWriter();  PrintWriter writer=new PrintWriter(buffer);  if (newData == null) {    writer.println(prefix + " newData=null ");  } else {    writer.println(prefix + " newData.size=" + newData.length+ "...");    printObjectArray(prefix,writer,newData);  }  if (oldData == null) {    writer.println(prefix + " oldData=null ");  } else {    writer.println(prefix + " oldData.size=" + oldData.length+ "...");    printObjectArray(prefix,writer,oldData);  }}  }
class C{  public static Map<Id<MyZone>,Integer> parseHouseholdCountFromControlTotals(String file){  Map<Id<MyZone>,Integer> map=new HashMap<>();  BufferedReader br=IOUtils.getBufferedReader(file);  try {    String line=br.readLine();    while ((line=br.readLine()) != null) {      int count=0;      String[] sa=line.split("\t");      if (sa.length == 17) {        for (int i=10; i < 17; i++) {          count+=((int)Math.round(Double.parseDouble(sa[i])));        }      }      map.put(Id.create(sa[0],MyZone.class),count);    }  } catch (  IOException e) {    throw new RuntimeException("Couldn't read from BufferedReader " + file);  } finally {    try {      br.close();    } catch (    IOException e) {      throw new RuntimeException("Couldn't close Bufferedreader for " + file);    }  }  return map;}  }
class C{  static public void isolateIndex(long startTime,String name){  if (log.isInfoEnabled())   log.info("tx=" + startTime + ", name="+ name);}  }
class C{  @SuppressWarnings("ConstantConditions") public static boolean deleteRecursively(File file){  if (file.isDirectory()) {    boolean success=true;    File[] children=file.listFiles();    for (    File child : children) {      success&=deleteRecursively(child);    }    return success && file.delete();  } else {    return file.delete();  }}  }
class C{  @Override public String toString(){  return new StringBuilder("StartElement: ").append(this.element).toString();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.ACCESSIBLE_TYPE_ELEMENT__DECLARED_TYPE_ACCESS_MODIFIER:    return getDeclaredTypeAccessModifier();case TypesPackage.ACCESSIBLE_TYPE_ELEMENT__DECLARED_PROVIDED_BY_RUNTIME:  return isDeclaredProvidedByRuntime();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Note withRandomData(){  this.setText(SampleDataService.getRandomComment());  this.setDate(SampleDataService.getRandomDate());  return this;}  }
class C{  public RegisterPriority registerPriority(int index){  return RegisterPriority.VALUES[list.get((index << 1) + 1)];}  }
class C{  public static org.smpte_ra.schemas.st0429_9_2007.AM.AssetMapType constructAssetMapType_2007(){  org.smpte_ra.schemas.st0429_9_2007.AM.AssetMapType amType_2007=new org.smpte_ra.schemas.st0429_9_2007.AM.AssetMapType();  IMFDocumentsObjectFieldsFactory.constructObjectFields(amType_2007);  return amType_2007;}  }
class C{  private static int limitInt(final int value,final int bitlength){  return Integer.parseInt(Integer.toBinaryString(value).substring(0,bitlength),2);}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.UNARY;}  }
class C{  public static Date parse(String date,ParsePosition pos) throws ParseException {  Exception fail=null;  try {    int offset=pos.getIndex();    int year=parseInt(date,offset,offset+=4);    if (checkOffset(date,offset,'-')) {      offset+=1;    }    int month=parseInt(date,offset,offset+=2);    if (checkOffset(date,offset,'-')) {      offset+=1;    }    int day=parseInt(date,offset,offset+=2);    int hour=0;    int minutes=0;    int seconds=0;    int milliseconds=0;    boolean hasT=checkOffset(date,offset,'T');    if (!hasT && (date.length() <= offset)) {      Calendar calendar=new GregorianCalendar(year,month - 1,day);      pos.setIndex(offset);      return calendar.getTime();    }    if (hasT) {      hour=parseInt(date,offset+=1,offset+=2);      if (checkOffset(date,offset,':')) {        offset+=1;      }      minutes=parseInt(date,offset,offset+=2);      if (checkOffset(date,offset,':')) {        offset+=1;      }      if (date.length() > offset) {        char c=date.charAt(offset);        if (c != 'Z' && c != '+' && c != '-') {          seconds=parseInt(date,offset,offset+=2);          if (seconds > 59 && seconds < 63)           seconds=59;          if (checkOffset(date,offset,'.')) {            offset+=1;            int endOffset=indexOfNonDigit(date,offset + 1);            int parseEndOffset=Math.min(endOffset,offset + 3);            int fraction=parseInt(date,offset,parseEndOffset);switch (parseEndOffset - offset) {case 2:              milliseconds=fraction * 10;            break;case 1:          milliseconds=fraction * 100;        break;default :      milliseconds=fraction;  }  offset=endOffset;}}}}if (date.length() <= offset) {throw new IllegalArgumentException("No time zone indicator");}TimeZone timezone=null;char timezoneIndicator=date.charAt(offset);if (timezoneIndicator == 'Z') {timezone=TIMEZONE_Z;offset+=1;} else if (timezoneIndicator == '+' || timezoneIndicator == '-') {String timezoneOffset=date.substring(offset);offset+=timezoneOffset.length();if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {timezone=TIMEZONE_Z;} else {String timezoneId="GMT" + timezoneOffset;timezone=TimeZone.getTimeZone(timezoneId);String act=timezone.getID();if (!act.equals(timezoneId)) {String cleaned=act.replace(":","");if (!cleaned.equals(timezoneId)) {  throw new IndexOutOfBoundsException("Mismatching time zone indicator: " + timezoneId + " given, resolves to "+ timezone.getID());}}}} else {throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator + "'");}Calendar calendar=new GregorianCalendar(timezone);calendar.setLenient(false);calendar.set(Calendar.YEAR,year);calendar.set(Calendar.MONTH,month - 1);calendar.set(Calendar.DAY_OF_MONTH,day);calendar.set(Calendar.HOUR_OF_DAY,hour);calendar.set(Calendar.MINUTE,minutes);calendar.set(Calendar.SECOND,seconds);calendar.set(Calendar.MILLISECOND,milliseconds);pos.setIndex(offset);return calendar.getTime();} catch (IndexOutOfBoundsException e) {fail=e;}catch (NumberFormatException e) {fail=e;}catch (IllegalArgumentException e) {fail=e;}String input=(date == null) ? null : ('"' + date + '"');String msg=fail.getMessage();if (msg == null || msg.isEmpty()) {msg="(" + fail.getClass().getName() + ")";}ParseException ex=new ParseException("Failed to parse date " + input + ": "+ msg,pos.getIndex());ex.initCause(fail);throw ex;}  }
class C{  public boolean isSetStore(){  return this.store != null;}  }
class C{  private static boolean isXPointerId(String uri){  if (uri.startsWith(XP) && uri.endsWith("))")) {    String idPlusDelim=uri.substring(XP_LENGTH,uri.length() - 2);    int idLen=idPlusDelim.length() - 1;    if (((idPlusDelim.charAt(0) == '"') && (idPlusDelim.charAt(idLen) == '"')) || ((idPlusDelim.charAt(0) == '\'') && (idPlusDelim.charAt(idLen) == '\''))) {      if (log.isLoggable(java.util.logging.Level.FINE)) {        log.log(java.util.logging.Level.FINE,"Id = " + idPlusDelim.substring(1,idLen));      }      return true;    }  }  return false;}  }
class C{  @Override public void firePropertyChange(String propertyName,boolean oldValue,boolean newValue){}  }
class C{  public Message send(Message query) throws IOException {  if (Options.check("verbose"))   System.err.println("Sending to " + address.getAddress().getHostAddress() + ":"+ address.getPort());  if (query.getHeader().getOpcode() == Opcode.QUERY) {    Record question=query.getQuestion();    if (question != null && question.getType() == Type.AXFR)     return sendAXFR(query);  }  query=(Message)query.clone();  applyEDNS(query);  if (tsig != null)   tsig.apply(query,null);  byte[] out=query.toWire(Message.MAXLENGTH);  int udpSize=maxUDPSize(query);  boolean tcp=false;  long endTime=System.currentTimeMillis() + timeoutValue;  do {    byte[] in;    if (useTCP || out.length > udpSize)     tcp=true;    if (tcp)     in=TCPClient.sendrecv(localAddress,address,out,endTime); else     in=UDPClient.sendrecv(localAddress,address,out,udpSize,endTime);    if (in.length < Header.LENGTH) {      throw new WireParseException("invalid DNS header - " + "too short");    }    int id=((in[0] & 0xFF) << 8) + (in[1] & 0xFF);    int qid=query.getHeader().getID();    if (id != qid) {      String error="invalid message id: expected " + qid + "; got id "+ id;      if (tcp) {        throw new WireParseException(error);      } else {        if (Options.check("verbose")) {          System.err.println(error);        }        continue;      }    }    Message response=parseMessage(in);    verifyTSIG(query,response,in,tsig);    if (!tcp && !ignoreTruncation && response.getHeader().getFlag(Flags.TC)) {      tcp=true;      continue;    }    return response;  } while (true);}  }
class C{  protected boolean allowSearch(String pattern){  return !TextUtils.isEmpty(pattern);}  }
class C{  protected void addToken(String token){synchronized (sessionTokens) {    sessionTokens.add(token);  }}  }
class C{  @SuppressWarnings("unchecked") public static void register(String className){  JavaUtils.checkRegisterPermission();  try {    Class<ResourceResolverSpi> resourceResolverClass=(Class<ResourceResolverSpi>)Class.forName(className);    register(resourceResolverClass,false);  } catch (  ClassNotFoundException e) {    log.log(java.util.logging.Level.WARNING,"Error loading resolver " + className + " disabling it");  }}  }
class C{  public NodesStatsRequest fs(boolean fs){  this.fs=fs;  return this;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTE'";  db.execSQL(sql);}  }
class C{  public final void divScalar(double s){  for (int i=0; i < NDIM; i++) {    data[i]/=s;  }}  }
class C{  public static ReferenceRanges<String> createFullReferenceRanges(SequencesReader sequencesReader) throws IOException {  final ReferenceRanges<String> rangeMap=new ReferenceRanges<>(false);  final Map<String,Integer> idMap=new HashMap<>();  for (int k=0; k < sequencesReader.numberSequences(); k++) {    final int rlen=sequencesReader.length(k);    if (rlen > 0) {      final String name=sequencesReader.names().name(k);      rangeMap.put(name,new RangeList<>(new RangeList.RangeData<>(0,rlen,name)));      idMap.put(name,k);    }  }  rangeMap.setIdMap(idMap);  return rangeMap;}  }
class C{  @Override public void run(){  amIActive=true;  try {    Long startTime=System.currentTimeMillis();    int progress, oldProgress, col, row, colN, rowN, r, c;    int numSolvedCells=0;    int dir, numCellsInPath, i, n;    boolean needsFilling=false;    double z, zN, zTest, zN2, lowestNeighbour, breachDepth, maxPathBreachDepth;    boolean isPit, isEdgeCell, flag, isPeak;    double pathTerminalHeight;    double outletHeight;    int outletRow, outletCol, outletDist;    GridCell gc;    int[] dX={1,1,1,0,-1,-1,-1,0};    int[] dY={-1,0,1,1,1,0,-1,-1};    int[] backLink={5,6,7,8,1,2,3,4};    double[] outPointer={0,1,2,4,8,16,32,64,128};    if (args.length < 2) {      showFeedback("Incorrect number of arguments given to tool.");      return;    }    String demFile=args[0];    String outputFile=args[1];    boolean maxLengthOrDepthUsed=false;    double maxDepth=Double.POSITIVE_INFINITY;    if (args.length >= 3 && !(args[2].trim()).isEmpty() && !(args[2].toLowerCase().equals("not specified"))) {      maxDepth=Double.parseDouble(args[2]);      maxLengthOrDepthUsed=true;    }    int maxLength=Integer.MAX_VALUE;    if (args.length >= 4 && !(args[3].trim()).isEmpty() && !(args[3].toLowerCase().equals("not specified"))) {      maxLength=Integer.parseInt(args[3]);      maxLengthOrDepthUsed=true;    }    boolean performConstrainedBreach=false;    if (args.length >= 5 && !(args[4].trim()).isEmpty() && !(args[4].toLowerCase().equals("not specified"))) {      performConstrainedBreach=Boolean.parseBoolean(args[4]);    }    if (maxDepth == Double.POSITIVE_INFINITY && maxLength == Integer.MAX_VALUE && performConstrainedBreach) {      performConstrainedBreach=false;    }    String pointerFile="";    String flowAccumFile="";    boolean outputPointer=false;    if (args.length >= 6 && !(args[5].trim()).isEmpty()) {      outputPointer=Boolean.parseBoolean(args[5]);      pointerFile=outputFile.replace(".dep","_flow_pntr.dep");    }    boolean performFlowAccumulation=false;    if (args.length >= 7 && !(args[6].trim()).isEmpty() && outputPointer) {      performFlowAccumulation=Boolean.parseBoolean(args[6]);      flowAccumFile=outputFile.replace(".dep","_flow_accum.dep");    }    WhiteboxRaster dem=new WhiteboxRaster(demFile,"r");    double nodata=dem.getNoDataValue();    int rows=dem.getNumberRows();    int cols=dem.getNumberColumns();    int rowsLessOne=rows - 1;    int numCellsTotal=rows * cols;    minVal=dem.getMinimumValue();    elevDigits=String.valueOf((int)(dem.getMaximumValue() - minVal)).length();    elevMultiplier=Math.pow(10,8 - elevDigits);    double SMALL_NUM=1 / elevMultiplier;    double[][] output=new double[rows + 2][cols + 2];    BooleanBitArray2D pits=new BooleanBitArray2D(rows + 2,cols + 2);    BooleanBitArray2D inQueue=new BooleanBitArray2D(rows + 2,cols + 2);    NibbleArray2D flowdir=new NibbleArray2D(rows + 2,cols + 2);    PriorityQueue<GridCell> queue=new PriorityQueue<>((2 * rows + 2 * cols) * 2);    oldProgress=-1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=dem.getValue(row,col);        output[row + 1][col + 1]=z;        flowdir.setValue(row + 1,col + 1,0);        if (z != nodata) {          isPit=true;          isPeak=true;          isEdgeCell=false;          lowestNeighbour=Double.POSITIVE_INFINITY;          for (n=0; n < 8; n++) {            zN=dem.getValue(row + dY[n],col + dX[n]);            if (zN != nodata) {              if (zN < z) {                isPit=false;                break;              } else {                if (zN < lowestNeighbour) {                  lowestNeighbour=zN;                }              }            } else {              isEdgeCell=true;            }          }          if (isPit) {            if (isEdgeCell) {              queue.add(new GridCell(row + 1,col + 1,z));              inQueue.setValue(row + 1,col + 1,true);              flowdir.setValue(row + 1,col + 1,0);            } else {              pits.setValue(row + 1,col + 1,true);              output[row + 1][col + 1]=lowestNeighbour - SMALL_NUM;            }          }        } else {          numSolvedCells++;        }      }      progress=(int)(100f * row / rowsLessOne);      if (progress != oldProgress) {        updateProgress("Breaching DEM (1 of 2):",progress);        oldProgress=progress;        if (cancelOp) {          showFeedback("Operation cancelled");          return;        }      }    }    String paletteName=dem.getPreferredPalette();    dem.close();    for (row=0; row < rows + 2; row++) {      output[row][0]=nodata;      output[row][cols + 1]=nodata;      flowdir.setValue(row,0,0);      flowdir.setValue(row,cols + 1,0);    }    for (col=0; col < cols + 2; col++) {      output[0][col]=nodata;      output[rows + 1][col]=nodata;      flowdir.setValue(0,col,0);      flowdir.setValue(rows + 1,col,0);    }    oldProgress=(int)(100f * numSolvedCells / numCellsTotal);    updateProgress("Breaching DEM (2 of 2):",oldProgress);    if (!maxLengthOrDepthUsed) {      while (queue.isEmpty() == false) {        gc=queue.poll();        row=gc.row;        col=gc.col;        for (i=0; i < 8; i++) {          rowN=row + dY[i];          colN=col + dX[i];          zN=output[rowN][colN];          if ((zN != nodata) && (!inQueue.getValue(rowN,colN))) {            flowdir.setValue(rowN,colN,backLink[i]);            if (pits.getValue(rowN,colN)) {              zTest=zN;              r=rowN;              c=colN;              flag=true;              while (flag) {                zTest-=SMALL_NUM;                dir=flowdir.getValue(r,c);                if (dir > 0) {                  r+=dY[dir - 1];                  c+=dX[dir - 1];                  zN2=output[r][c];                  if (zN2 <= zTest || zN2 == nodata) {                    flag=false;                  } else {                    output[r][c]=zTest;                  }                } else {                  flag=false;                }              }            }            numSolvedCells++;            queue.add(new GridCell(rowN,colN,zN));            inQueue.setValue(rowN,colN,true);          }        }        progress=(int)(100f * numSolvedCells / numCellsTotal);        if (progress != oldProgress) {          updateProgress("Breaching DEM (2 of 2):",progress);          oldProgress=progress;          if (cancelOp) {            showFeedback("Operation cancelled");            return;          }        }      }    } else     if (!performConstrainedBreach) {      while (queue.isEmpty() == false) {        gc=queue.poll();        row=gc.row;        col=gc.col;        for (i=0; i < 8; i++) {          rowN=row + dY[i];          colN=col + dX[i];          zN=output[rowN][colN];          if ((zN != nodata) && (!inQueue.getValue(rowN,colN))) {            flowdir.setValue(rowN,colN,backLink[i]);            if (pits.getValue(rowN,colN)) {              numCellsInPath=0;              maxPathBreachDepth=0;              breachDepth=0;              zTest=zN;              r=rowN;              c=colN;              flag=true;              while (flag) {                zTest-=SMALL_NUM;                dir=flowdir.getValue(r,c);                if (dir > 0) {                  r+=dY[dir - 1];                  c+=dX[dir - 1];                  zN2=output[r][c];                  if (zN2 <= zTest || zN2 == nodata) {                    flag=false;                  } else {                    breachDepth=zN2 - zTest;                    if (breachDepth > maxPathBreachDepth) {                      maxPathBreachDepth=breachDepth;                    }                  }                } else {                  flag=false;                }                numCellsInPath++;                if (numCellsInPath > maxLength) {                  flag=false;                }                if (maxPathBreachDepth > maxDepth) {                  flag=false;                }              }              if (numCellsInPath <= maxLength && maxPathBreachDepth <= maxDepth) {                zTest=zN;                r=rowN;                c=colN;                flag=true;                while (flag) {                  zTest-=SMALL_NUM;                  dir=flowdir.getValue(r,c);                  if (dir > 0) {                    r+=dY[dir - 1];                    c+=dX[dir - 1];                    zN2=output[r][c];                    if (zN2 <= zTest || zN2 == nodata) {                      flag=false;                    } else {                      output[r][c]=zTest;                    }                  } else {                    flag=false;                  }                }              } else {                needsFilling=true;              }            }            numSolvedCells++;            queue.add(new GridCell(rowN,colN,zN));            inQueue.setValue(rowN,colN,true);          }        }        progress=(int)(100f * numSolvedCells / numCellsTotal);        if (progress != oldProgress) {          updateProgress("Breaching DEM (2 of 2):",progress);          oldProgress=progress;          if (cancelOp) {            showFeedback("Operation cancelled");            return;          }        }      }    }    if (needsFilling) {      numSolvedCells=0;      queue.clear();      inQueue=new BooleanBitArray2D(rows + 2,cols + 2);      flowdir=new NibbleArray2D(rows + 2,cols + 2);      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output[row + 1][col + 1];          flowdir.setValue(row + 1,col + 1,0);          if (z != nodata) {            isPit=true;            isEdgeCell=false;            for (n=0; n < 8; n++) {              zN=output[row + dY[n] + 1][col + dX[n] + 1];              if (zN == nodata) {                isEdgeCell=true;              } else               if (zN < z) {                isPit=false;              }            }            if (isEdgeCell && isPit) {              queue.add(new GridCell(row + 1,col + 1,z));              inQueue.setValue(row + 1,col + 1,true);              numSolvedCells++;            }          } else {            numSolvedCells++;          }        }        progress=(int)(100f * row / rowsLessOne);        if (progress != oldProgress) {          updateProgress("Filling DEM (1 of 2):",progress);          oldProgress=progress;          if (cancelOp) {            showFeedback("Operation cancelled");            return;          }        }      }      while (queue.isEmpty() == false) {        gc=queue.poll();        row=gc.row;        col=gc.col;        z=output[row][col];        for (i=0; i < 8; i++) {          rowN=row + dY[i];          colN=col + dX[i];          zN=output[rowN][colN];          if ((zN != nodata) && (!inQueue.getValue(rowN,colN))) {            flowdir.setValue(rowN,colN,backLink[i]);            if (zN <= z) {              zN=z + SMALL_NUM;            }            numSolvedCells++;            output[rowN][colN]=zN;            queue.add(new GridCell(rowN,colN,zN));            inQueue.setValue(rowN,colN,true);          }        }        progress=(int)(100f * numSolvedCells / numCellsTotal);        if (progress != oldProgress) {          updateProgress("Filling DEM (2 of 2):",progress);          oldProgress=progress;          if (cancelOp) {            showFeedback("Operation cancelled");            return;          }        }      }    }    WhiteboxRaster outputRaster=new WhiteboxRaster(outputFile,"rw",demFile,WhiteboxRaster.DataType.FLOAT,nodata);    outputRaster.setPreferredPalette(paletteName);    oldProgress=-1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=output[row + 1][col + 1];        outputRaster.setValue(row,col,z);      }      progress=(int)(100f * row / rowsLessOne);      if (progress > oldProgress) {        updateProgress("Saving Data:",progress);        oldProgress=progress;        if (cancelOp) {          showFeedback("Operation cancelled");          return;        }      }    }    outputRaster.addMetadataEntry("Created by the " + this.getDescriptiveName() + " tool.");    outputRaster.addMetadataEntry("Created on " + new Date());    Long endTime=System.currentTimeMillis();    long sec=(endTime - startTime) / 1000;    String duration=String.format("%02d:%02d:%02d:%02d",sec / 86400,(sec % 86400) / 3600,(sec % 3600) / 60,(sec % 60));    outputRaster.addMetadataEntry("Elapsed time: " + duration);    outputRaster.addMetadataEntry("Max breach depth: " + maxDepth);    outputRaster.addMetadataEntry("Max length depth: " + maxLength);    outputRaster.close();    if (outputPointer) {      WhiteboxRaster pointer=new WhiteboxRaster(pointerFile,"rw",demFile,WhiteboxRaster.DataType.FLOAT,nodata);      pointer.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);      pointer.setPreferredPalette("qual.pal");      oldProgress=-1;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output[row + 1][col + 1];          if (z != nodata) {            pointer.setValue(row,col,outPointer[flowdir.getValue(row + 1,col + 1)]);          } else {            pointer.setValue(row,col,nodata);          }        }        progress=(int)(100f * row / rowsLessOne);        if (progress > oldProgress) {          updateProgress("Saving Pointer:",progress);          oldProgress=progress;          if (cancelOp) {            showFeedback("Operation cancelled");            return;          }        }      }      pointer.addMetadataEntry("Created by the " + this.getDescriptiveName() + " tool.");      pointer.addMetadataEntry("Created on " + new Date());      pointer.close();      returnData(pointerFile);    }    returnData(outputFile);    if (performFlowAccumulation) {      String[] args2={pointerFile,flowAccumFile,"number of upslope grid cells","false"};      myHost.runPlugin("FlowAccumD8",args2,false);    }    if (!outputPointer && !performFlowAccumulation) {      showFeedback("Elapsed time: " + duration);    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;  }}  }
class C{  public static int findMatchingBracket(Document doc,int offset) throws BadLocationException {  if (doc.getLength() == 0)   return -1;  char c=doc.getText(offset,1).charAt(0);  char cprime;  boolean direction;switch (c) {case '(':    cprime=')';  direction=false;break;case ')':cprime='(';direction=true;break;case '[':cprime=']';direction=false;break;case ']':cprime='[';direction=true;break;case '{':cprime='}';direction=false;break;case '}':cprime='{';direction=true;break;default :return -1;}int count;if (direction) {count=1;String text=doc.getText(0,offset);for (int i=offset - 1; i >= 0; i--) {char x=text.charAt(i);if (x == c) count++; else if (x == cprime) {if (--count == 0) return i;}}} else {count=1;offset++;int len=doc.getLength() - offset;String text=doc.getText(offset,len);for (int i=0; i < len; i++) {char x=text.charAt(i);if (x == c) count++; else if (x == cprime) {if (--count == 0) return i + offset;}}}return -1;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private <T>T doInvokeAny(Collection<? extends Callable<T>> tasks,boolean timed,long nanos) throws InterruptedException, ExecutionException, TimeoutException {  if (tasks == null)   throw new NullPointerException();  int ntasks=tasks.size();  if (ntasks == 0)   throw new IllegalArgumentException();  ArrayList<Future<T>> futures=new ArrayList<Future<T>>(ntasks);  ExecutorCompletionService<T> ecs=new ExecutorCompletionService<T>(this);  try {    ExecutionException ee=null;    final long deadline=timed ? System.nanoTime() + nanos : 0L;    Iterator<? extends Callable<T>> it=tasks.iterator();    futures.add(ecs.submit(it.next()));    --ntasks;    int active=1;    for (; ; ) {      Future<T> f=ecs.poll();      if (f == null) {        if (ntasks > 0) {          --ntasks;          futures.add(ecs.submit(it.next()));          ++active;        } else         if (active == 0)         break; else         if (timed) {          f=ecs.poll(nanos,TimeUnit.NANOSECONDS);          if (f == null)           throw new TimeoutException();          nanos=deadline - System.nanoTime();        } else         f=ecs.take();      }      if (f != null) {        --active;        try {          return f.get();        } catch (        ExecutionException eex) {          ee=eex;        }catch (        RuntimeException rex) {          ee=new ExecutionException(rex);        }      }    }    if (ee == null)     ee=new ExecutionException();    throw ee;  }  finally {    for (int i=0, size=futures.size(); i < size; i++)     futures.get(i).cancel(true);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:32.926 -0500",hash_original_method="1EEDE20F378BB56816783AF0AAE8D8C5",hash_generated_method="2AE5A6AC1EB7B311A9443C8F45DCAEBC") public final void readResponse() throws IOException {  if (hasResponse()) {    return;  }  if (responseSource == null) {    throw new IllegalStateException("readResponse() without sendRequest()");  }  if (!responseSource.requiresConnection()) {    return;  }  if (sentRequestMillis == -1) {    int contentLength=requestBodyOut instanceof RetryableOutputStream ? ((RetryableOutputStream)requestBodyOut).contentLength() : -1;    writeRequestHeaders(contentLength);  }  if (requestBodyOut != null) {    requestBodyOut.close();    if (requestBodyOut instanceof RetryableOutputStream) {      ((RetryableOutputStream)requestBodyOut).writeToSocket(requestOut);    }  }  requestOut.flush();  requestOut=socketOut;  readResponseHeaders();  responseHeaders.setLocalTimestamps(sentRequestMillis,System.currentTimeMillis());  if (responseSource == ResponseSource.CONDITIONAL_CACHE) {    if (cachedResponseHeaders.validate(responseHeaders)) {      if (responseCache instanceof HttpResponseCache) {        ((HttpResponseCache)responseCache).trackConditionalCacheHit();      }      release(true);      setResponse(cachedResponseHeaders.combine(responseHeaders),cachedResponseBody);      return;    } else {      IoUtils.closeQuietly(cachedResponseBody);    }  }  if (hasResponseBody()) {    maybeCache();  }  initContentStream(getTransferStream());}  }
class C{  public boolean isCancelled(){  AsyncHttpRequest _request=request.get();  return _request == null || _request.isCancelled();}  }
class C{  private void bol(){  column=0;  collectingIndent=(maxIndent != 0);  indent=0;}  }
class C{  public long lastModified(){  final IHistoryEntry<T> sample=minutes.getSample();  if (sample == null)   return -1L;  return sample.lastModified();}  }
class C{  public double minX(){  return Math.min(p0.x,p1.x);}  }
class C{  @SuppressWarnings("UnusedReturnValue") @Override public final boolean openPdfFileFromInputStream(final InputStream is,final boolean supportLinearized) throws PdfException {  final String rawFileName="inputstream" + System.currentTimeMillis() + '-'+ fileAccess.getObjectStore().getKey()+ ".pdf";  preOpen();  final boolean flag=fileAccess.readFile(supportLinearized,is,rawFileName,null);  postOpen();  return flag;}  }
class C{  @Override public void invokeCommand(int argLength,String[] args,String command){  Toast.log().error("Goodbye cruel world!");  CrashHandler.handle(new Exception("Invoked Debug Crash"));}  }
class C{  public DefaultTableColumn addPropertyColumn(Object headerValue,String property,Class type){  return addColumn(headerValue,property,new PropertyModel(rowModel,property,type));}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"REV");  translateAll(environment,instruction,"REV",instructions);}  }
class C{  public void add(final Array datum,final double weight){  if (dimension_ == 0) {    final int dimension=datum.size();    QL.require(dimension > 0,NULL_DIMENSION);    reset(dimension);  }  QL.require(datum.size() == dimension_,SAMPLE_SIZE_MISMATCH);  quadraticSum.addAssign(datum.outerProduct(datum).mulAssign(weight));  for (int i=0; i < dimension_; i++) {    stats[i].add(datum.$[datum._(i)],weight);  }}  }
class C{  public boolean is_set_pedigree(){  return this.pedigree != null;}  }
class C{  protected void validateAssociatedId(BaseStorageEntity[] param){}  }
class C{  private void addReference(final int sourcePosition,final int referencePosition){  if (srcAndRefPositions == null) {    srcAndRefPositions=new int[6];  }  if (referenceCount >= srcAndRefPositions.length) {    int[] a=new int[srcAndRefPositions.length + 6];    System.arraycopy(srcAndRefPositions,0,a,0,srcAndRefPositions.length);    srcAndRefPositions=a;  }  srcAndRefPositions[referenceCount++]=sourcePosition;  srcAndRefPositions[referenceCount++]=referencePosition;}  }
class C{  public small addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public UkrainianMorfologikAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  protected void processIndirection(ForeignReferenceMapping mapping){  boolean usesIndirection=usesIndirection();  String actualAttributeType=getAttributeType();  if (getAccessibleObject() != null) {    actualAttributeType=getAccessibleObject().getType();  }  if (usesIndirection && usesPropertyAccess()) {    mapping.setIndirectionPolicy(new WeavedObjectBasicIndirectionPolicy(getGetMethodName(),getSetMethodName(),actualAttributeType,true));  } else   if (usesIndirection && usesFieldAccess()) {    mapping.setIndirectionPolicy(new WeavedObjectBasicIndirectionPolicy(Helper.getWeavedGetMethodName(mapping.getAttributeName()),Helper.getWeavedSetMethodName(mapping.getAttributeName()),actualAttributeType,false));  } else {    mapping.setUsesIndirection(usesIndirection);  }}  }
class C{  public JavaLock(String name){  super(name);  this.timeout=Harness.lockTimeout.getValue() * NANOS_IN_SECOND;}  }
class C{  public SimpleNodeView(){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataindexsizeerrreplacedataoffsetnegative.class,args);}  }
class C{  private boolean shouldSkipChildren(CCFGNode node,Set<CCFGEdge> handledBackEdges,Set<CCFGNode> children,boolean handleLoops){  if (node == null || children == null)   return true;  boolean skipChildren=false;  if (handleLoops) {    for (    CCFGNode child : children) {      CCFGEdge currentEdge=ccfg.getEdge(node,child);      if (handledBackEdges.contains(currentEdge)) {        skipChildren=true;        break;      }    }  }  return skipChildren;}  }
class C{  public Enumeration<Instance> enumerateInstances(){  return new WekaEnumeration<Instance>(m_Instances);}  }
class C{  public float[] mult(float[] source,float[] target){  if (target == null || target.length < 3) {    target=new float[3];  }  if (source == target) {    throw new RuntimeException("The source and target vectors used in " + "PMatrix3D.mult() cannot be identical.");  }  if (target.length == 3) {    target[0]=m00 * source[0] + m01 * source[1] + m02 * source[2] + m03;    target[1]=m10 * source[0] + m11 * source[1] + m12 * source[2] + m13;    target[2]=m20 * source[0] + m21 * source[1] + m22 * source[2] + m23;  } else   if (target.length > 3) {    target[0]=m00 * source[0] + m01 * source[1] + m02 * source[2] + m03 * source[3];    target[1]=m10 * source[0] + m11 * source[1] + m12 * source[2] + m13 * source[3];    target[2]=m20 * source[0] + m21 * source[1] + m22 * source[2] + m23 * source[3];    target[3]=m30 * source[0] + m31 * source[1] + m32 * source[2] + m33 * source[3];  }  return target;}  }
class C{  public SQLTransientException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public boolean quitApplication(){  if (myQuitEntered) {    return false;  }  myQuitEntered=true;  try {    options.setWindowPosition(getX(),getY());    options.setWindowSize(getWidth(),getHeight());    options.setUIConfiguration(myUIConfiguration);    options.save();    if (getProjectUIFacade().ensureProjectSaved(getProject())) {      getProject().close();      setVisible(false);      dispose();      if (ourQuitCallback != null) {        ourQuitCallback.run();      }      return true;    } else {      setVisible(true);      return false;    }  }  finally {    myQuitEntered=false;  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public StringBuffer append(int i){  IntegralToString.appendInt(this,i);  return this;}  }
class C{  public BatchInterruptedException(IFeed feed,IBatchInterrupted interrupted){  super("Batch Interrupted (some operations might have succeeded) : " + interrupted.getReason());  this.feed=feed;  this.interrupted=interrupted;}  }
class C{  public Boolean isJumboFramesEnabled(){  return jumboFramesEnabled;}  }
class C{  final boolean resumeTopActivityLocked(ActivityRecord prev){  return resumeTopActivityLocked(prev,null);}  }
class C{  public void detach(){  if (m_allowDetach) {    if (m_axis > -1)     m_iterator=null;    super.detach();  }}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("OrganizationParser.parse");  Organization organization=new Organization();  try {    headerName(TokenTypes.ORGANIZATION);    organization.setHeaderName(SIPHeaderNames.ORGANIZATION);    this.lexer.SPorHT();    String value=this.lexer.getRest();    organization.setOrganization(value.trim());    return organization;  }  finally {    if (debug)     dbg_leave("OrganizationParser.parse");  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  DefaultXYDataset clone=(DefaultXYDataset)super.clone();  clone.seriesKeys=new java.util.ArrayList(this.seriesKeys);  clone.seriesList=new ArrayList(this.seriesList.size());  for (int i=0; i < this.seriesList.size(); i++) {    double[][] data=(double[][])this.seriesList.get(i);    double[] x=data[0];    double[] y=data[1];    double[] xx=new double[x.length];    double[] yy=new double[y.length];    System.arraycopy(x,0,xx,0,x.length);    System.arraycopy(y,0,yy,0,y.length);    clone.seriesList.add(i,new double[][]{xx,yy});  }  return clone;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_STATE_1__STATE_INTERNAL_1:    return stateInternal_1 != null && !stateInternal_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static boolean isPrime(int number){  for (int divisor=2; divisor <= number / 2; divisor++) {    if (number % divisor == 0) {      return false;    }  }  return true;}  }
class C{  public void mergeSortFromTo(int from,int to,java.util.Comparator c){  if (size == 0)   return;  checkRangeFromTo(from,to,size);  java.util.Arrays.sort(elements,from,to + 1,c);}  }
class C{  public boolean isDisplayed(){  Object oo=get_Value(COLUMNNAME_IsDisplayed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void moveRect(Rectangle box,int dx,int dy){  box.x=box.x + dx;  box.y=box.y + dy;}  }
class C{  public void testHugeFile() throws IOException {  DenseRAMFile f=new DenseRAMFile();  RAMOutputStream out=new RAMOutputStream(f,true);  byte b1[]=new byte[RAMOutputStream.BUFFER_SIZE];  byte b2[]=new byte[RAMOutputStream.BUFFER_SIZE / 3];  for (int i=0; i < b1.length; i++) {    b1[i]=(byte)(i & 0x0007F);  }  for (int i=0; i < b2.length; i++) {    b2[i]=(byte)(i & 0x0003F);  }  long n=0;  assertEquals("output length must match",n,out.getFilePointer());  while (n <= MAX_VALUE - b1.length) {    out.writeBytes(b1,0,b1.length);    out.flush();    n+=b1.length;    assertEquals("output length must match",n,out.getFilePointer());  }  int m=b2.length;  long L=12;  for (int j=0; j < L; j++) {    for (int i=0; i < b2.length; i++) {      b2[i]++;    }    out.writeBytes(b2,0,m);    out.flush();    n+=m;    assertEquals("output length must match",n,out.getFilePointer());  }  out.close();  RAMInputStream in=new RAMInputStream("testcase",f);  assertEquals("input length must match",n,in.length());  for (int j=0; j < L; j++) {    long loc=n - (L - j) * m;    in.seek(loc / 3);    in.seek(loc);    for (int i=0; i < m; i++) {      byte bt=in.readByte();      byte expected=(byte)(1 + j + (i & 0x0003F));      assertEquals("must read same value that was written! j=" + j + " i="+ i,expected,bt);    }  }}  }
class C{  private final void appendContents(StringBuffer buf,CharacterIterator iterator){  int index=iterator.getBeginIndex();  int end=iterator.getEndIndex();  while (index < end) {    iterator.setIndex(index++);    buf.append(iterator.current());  }}  }
class C{  public boolean isGroupingUsed(){  return (this.groupingUsed != null ? this.groupingUsed : true);}  }
class C{  public final void dispose(){  for (  final IResultsPanel panel : m_factory) {    panel.removeListener(m_internalPanelListener);    panel.dispose();  }  disposeInternal();}  }
class C{  public ProfessionalExperience awards(List<Award> awards){  this.awards=awards;  return this;}  }
class C{  public int variant(){  return variant;}  }
class C{  public static boolean isEmpty(short[] array){  return array == null || array.length == 0;}  }
class C{  @Override public synchronized int lastIndexOf(Object object){  return lastIndexOf(object,elementCount - 1);}  }
class C{  public static void UF6(double[] x,double[] f,int nx){  int count1=0;  int count2=0;  double sum1=0.0;  double sum2=0.0;  double prod1=1.0;  double prod2=1.0;  double yj;  double hj;  double pj;  double N=2.0;  double E=0.1;  for (int j=2; j <= nx; j++) {    yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);    pj=Math.cos(20.0 * yj * PI / Math.sqrt(j + 0.0));    if (j % 2 == 0) {      sum2+=yj * yj;      prod2*=pj;      count2++;    } else {      sum1+=yj * yj;      prod1*=pj;      count1++;    }  }  hj=2.0 * (0.5 / N + E) * Math.sin(2.0 * N * PI* x[0]);  if (hj < 0.0) {    hj=0.0;  }  f[0]=x[0] + hj + 2.0 * (4.0 * sum1 - 2.0 * prod1 + 2.0) / (double)count1;  f[1]=1.0 - x[0] + hj + 2.0 * (4.0 * sum2 - 2.0 * prod2 + 2.0) / (double)count2;}  }
class C{  public PolarLocationAnimator(String group){  super(group);}  }
class C{  protected RegularStateImpl(){  super();}  }
class C{  protected void destroyJMSResources(boolean reconnecting){  if (session != null && transacted && getIterations() != 0) {    Log.logger.log(Level.FINE,"Rolling back any current transactions.");    try {      session.rollback();    } catch (    JMSException e1) {    }  }  if (messageProducer != null) {    if (!reconnecting)     Log.logger.log(Level.FINE,"Closing producer {0}",messageProducer);    try {      messageProducer.close();    } catch (    JMSException e) {    } finally {      messageProducer=null;    }  }  if (messageConsumer != null) {    if (!reconnecting)     Log.logger.log(Level.FINE,"Closing consumer {0}",messageConsumer);    try {      messageConsumer.close();    } catch (    JMSException e) {    } finally {      messageConsumer=null;    }  }  if (additionalMessageConsumers != null) {    for (int i=0; i < additionalMessageConsumers.size(); i++) {      messageConsumer=additionalMessageConsumers.get(i);      if (!reconnecting)       Log.logger.log(Level.FINE,"Closing consumer {0}",messageConsumer);      try {        messageConsumer.close();      } catch (      JMSException e) {      } finally {        messageConsumer=null;      }    }  }  if (durableSubscriberName != null && !reconnecting && session != null && Config.parms.getBoolean("un")) {    Log.logger.log(Level.FINE,"Unsubscribing {0}",durableSubscriberName);    try {      session.unsubscribe(durableSubscriberName);    } catch (    JMSException e) {    }  }  if (session != null) {    if (!reconnecting)     Log.logger.log(Level.FINE,"Closing session {0}",session);    try {      session.close();    } catch (    JMSException e) {    } finally {      session=null;    }  }  if (connection != null) {    if (!reconnecting)     Log.logger.log(Level.FINE,"Closing connection {0}",connection);    try {      connection.close();    } catch (    JMSException e) {    } finally {      connection=null;    }  }  if (!reconnecting) {    destProducer=null;    destConsumer=null;    cf=null;  }}  }
class C{  @Override public DropGraph visit(final ASTDrop node,final Object data) throws VisitorException {  final DropGraph op=new DropGraph();  if (node.isSilent())   op.setSilent(true);  final ASTGraphRefAll graphRef=node.jjtGetChild(ASTGraphRefAll.class);  if (graphRef.jjtGetNumChildren() > 0) {    final TermNode targetGraph=(TermNode)graphRef.jjtGetChild(0).jjtAccept(this,data);    if (targetGraph instanceof ConstantNode) {      op.setTargetGraph((ConstantNode)targetGraph);    } else {      op.setTargetSolutionSet(targetGraph.getValueExpression().getName());    }  } else {    if (graphRef.isDefault()) {      op.setScope(Scope.DEFAULT_CONTEXTS);    } else     if (graphRef.isNamed()) {      op.setScope(Scope.NAMED_CONTEXTS);    }    if (graphRef.isAllGraphs()) {      op.setAllGraphs(true);    }    if (graphRef.isAllSolutions()) {      op.setAllSolutionSets(true);    }  }  return op;}  }
class C{  public boolean isOwned(){  Object oo=get_Value(COLUMNNAME_IsOwned);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.254 -0500",hash_original_method="5329D88830912459D833DA651EF25565",hash_generated_method="978F13491909EB135627806DA513B029") public static Long valueOf(String string) throws NumberFormatException {  return valueOf(parseLong(string));}  }
class C{  @Override protected void drawFirstPassShape(Graphics2D g2,int pass,int series,int item,Shape shape){  if (isShadowPass(pass)) {    if (getWallPaint() != null) {      g2.setStroke(getItemStroke(series,item));      g2.setPaint(getWallPaint());      g2.translate(getXOffset(),getYOffset());      g2.draw(shape);      g2.translate(-getXOffset(),-getYOffset());    }  } else {    super.drawFirstPassShape(g2,pass,series,item,shape);  }}  }
class C{  private static boolean isLocalTcpPortFree(int port){  boolean res=false;  try {    SocketServerConnection conn=NetworkFactory.getFactory().createSocketServerConnection();    conn.open(port);    conn.close();    res=true;  } catch (  IOException e) {    res=false;  }  return res;}  }
class C{  private Register compile(AST ast){  try {    return (Register)ast.accept(this);  } catch (  CompilerException e) {    throw e;  }catch (  Error e) {    throw new CompilerException(ast,e);  }catch (  RuntimeException e) {    throw new CompilerException(ast,e);  }}  }
class C{  public void testWrapAroundMode(){  withTerminalSized(3,3).enterString("abcd").assertLinesAre("abc","d  ","   ");  withTerminalSized(3,3).enterString("\033[?7labcd").assertLinesAre("abd","   ","   ");  enterString("efg").assertLinesAre("abg","   ","   ");  enterString("\033[?7hhij").assertLinesAre("abh","ij ","   ");}  }
class C{  private void notifyUploadStart(UploadFileOperation upload){  mLastPercent=0;  mNotificationBuilder=NotificationBuilderWithProgressBar.newNotificationBuilderWithProgressBar(this);  mNotificationBuilder.setOngoing(true).setSmallIcon(R.drawable.notification_icon).setTicker(getString(R.string.uploader_upload_in_progress_ticker)).setContentTitle(getString(R.string.uploader_upload_in_progress_ticker)).setProgress(100,0,false).setContentText(String.format(getString(R.string.uploader_upload_in_progress_content),0,upload.getFileName()));  Intent showDetailsIntent=new Intent(this,FileDisplayActivity.class);  showDetailsIntent.putExtra(FileActivity.EXTRA_FILE,upload.getFile());  showDetailsIntent.putExtra(FileActivity.EXTRA_ACCOUNT,upload.getAccount());  showDetailsIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  mNotificationBuilder.setContentIntent(PendingIntent.getActivity(this,(int)System.currentTimeMillis(),showDetailsIntent,0));  mNotificationManager.notify(R.string.uploader_upload_in_progress_ticker,mNotificationBuilder.build());}  }
class C{  public static char[] convertBytes2Uint8s(byte[] bytes){  int len=bytes.length;  char[] uint8s=new char[len];  for (int i=0; i < len; i++) {    uint8s[i]=convertByte2Uint8(bytes[i]);  }  return uint8s;}  }
class C{  public String toString(){  return getClass().getName() + "[value=" + value+ "]";}  }
class C{  public FullMemberReference createFullMemberReference(){  FullMemberReferenceImpl fullMemberReference=new FullMemberReferenceImpl();  return fullMemberReference;}  }
class C{  public boolean isSetAnnotations(){  return this.annotations != null;}  }
class C{  default PStackX<T> toPStackX(){  return PStackX.fromCollection(toList());}  }
class C{  public boolean drop(){  boolean result=false;  if (isPopulated()) {    s_logger.log(Level.FINE,"dropThisObject",new Object[]{getObjectType(),m_name,m_parent.getDirection()});    Savepoint sp=m_parent.setSavepoint("drop_object");    result=m_interface.dropObject(s_parameters,s_logger,s_dbEngine,m_parent,m_name,m_headers);    m_parent.releaseSavepoint(sp);  }  return result;}  }
class C{  public Message sendMessageSynchronously(Message msg){  Message resultMsg=SyncMessenger.sendMessageSynchronously(mDstMessenger,msg);  return resultMsg;}  }
class C{  public boolean isEndOfMonth(){  return equals(getLastDayOfMonth());}  }
class C{  public DetallePrevisionVO abrirDetallePrevision(String idDetallePrevision){  DetallePrevisionVO detallePrevision=getDetallePrevision(idDetallePrevision);  if (detallePrevision == null)   throw new UncheckedArchivoException("Detalle de prevision no encontrada en base de datos " + idDetallePrevision);  PrevisionVO prevision=_previsionDbEntity.getInfoPrevision(detallePrevision.getIdPrevision());  if (prevision == null)   throw new UncheckedArchivoException("Prevision no encontrada en base de datos " + detallePrevision.getIdPrevision());  getDetallePrevisionAuthorizationHelper().configureDetallePrevision(prevision,detallePrevision);  return detallePrevision;}  }
class C{  @Override protected void doAction(){  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    KeyStoreState currentState=history.getCurrentState();    String alias=kseFrame.getSelectedEntryAlias();    Password password=getEntryPassword(alias,currentState);    if (password == null) {      return;    }    KeyStoreState newState=currentState.createBasisForNextState(this);    KeyStore keyStore=newState.getKeyStore();    Key privKey=keyStore.getKey(alias,password.toCharArray());    X509Certificate[] certChain=X509CertUtil.orderX509CertChain(X509CertUtil.convertCertificates(keyStore.getCertificateChain(alias)));    X509Certificate certToAppendTo=certChain[certChain.length - 1];    if (X509CertUtil.isCertificateSelfSigned(certToAppendTo)) {      JOptionPane.showMessageDialog(frame,res.getString("AppendToCertificateChainAction.CannotAppendCertSelfSigned.message"),res.getString("AppendToCertificateChainAction.AppendToCertificateChain.Title"),JOptionPane.WARNING_MESSAGE);      return;    }    File certFile=chooseAppendCertificateFile();    if (certFile == null) {      return;    }    X509Certificate[] certs=openCertificate(certFile);    if ((certs == null) || (certs.length == 0)) {      return;    }    if (certs.length > 1) {      JOptionPane.showMessageDialog(frame,res.getString("AppendToCertificateChainAction.NoMultipleAppendCert.message"),res.getString("AppendToCertificateChainAction.AppendToCertificateChain.Title"),JOptionPane.WARNING_MESSAGE);      return;    }    X509Certificate certToAppend=certs[0];    if (!X509CertUtil.verifyCertificate(certToAppendTo,certToAppend)) {      JOptionPane.showMessageDialog(frame,res.getString("AppendToCertificateChainAction.AppendCertNotSigner.message"),res.getString("AppendToCertificateChainAction.AppendToCertificateChain.Title"),JOptionPane.WARNING_MESSAGE);      return;    }    X509Certificate[] newCertChain=new X509Certificate[certChain.length + 1];    System.arraycopy(certChain,0,newCertChain,0,certChain.length);    newCertChain[newCertChain.length - 1]=certToAppend;    keyStore.deleteEntry(alias);    keyStore.setKeyEntry(alias,privKey,password.toCharArray(),newCertChain);    currentState.append(newState);    kseFrame.updateControls(true);    JOptionPane.showMessageDialog(frame,res.getString("AppendToCertificateChainAction.AppendToCertificateChainSuccessful.message"),res.getString("AppendToCertificateChainAction.AppendToCertificateChain.Title"),JOptionPane.INFORMATION_MESSAGE);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public void waitForFirstMessageToArrive() throws InterruptedException {  continueWhenFirstMessageHasArrivedLatch.countDown();  log.debug("(1) waiting for message latch = " + continueWhenFirstMessageHasArrivedLatch.getCount());  continueWhenFirstMessageHasArrivedLatch.await();}  }
class C{  public synchronized Object remove(int index){  Object[] elements=getArray();  int len=elements.length;  Object oldValue=elements[index];  int numMoved=len - index - 1;  if (numMoved == 0)   setArray(copyOf(elements,len - 1)); else {    Object[] newElements=new Object[len - 1];    System.arraycopy(elements,0,newElements,0,index);    System.arraycopy(elements,index + 1,newElements,index,numMoved);    setArray(newElements);  }  return oldValue;}  }
class C{  public @Test final void testHashCodeEquals(){  User user1=new User(TEST_USER1);  User user2=new User(TEST_USER1);  User user3=new User(TEST_USER2);  assertThat(user1).isEqualTo(user2);  assertThat(user1).isEqualTo(user2);  assertThat(user1).isNotEqualTo(user3);  Set<User> users=new HashSet<>();  users.add(user1);  users.add(user2);  assertThat(users).hasSize(1);  users.add(user3);  assertThat(users).hasSize(2);}  }
class C{  @RequestMapping(value="/register",method=RequestMethod.POST,produces={MediaType.APPLICATION_JSON_VALUE,MediaType.TEXT_PLAIN_VALUE}) @Timed public ResponseEntity<?> registerAccount(@Valid @RequestBody UserDTO userDTO,HttpServletRequest request){  HttpHeaders textPlainHeaders=new HttpHeaders();  textPlainHeaders.setContentType(MediaType.TEXT_PLAIN);  return userRepository.findOneByLogin(userDTO.getLogin()).map(null).orElseGet(null);}  }
class C{  public TagException(Tag tag,String message){  super(tag + " " + message);}  }
class C{  public Map<String,String> parameters(){  Map<String,String> ret=new HashMap<String,String>();  if (getBusinessTransaction() != null) {    ret.put("businessTransaction",getBusinessTransaction());  }  if (getStartTime() > 0) {    ret.put("startTime","" + getStartTime());  }  if (getEndTime() > 0) {    ret.put("endTime","" + getEndTime());  }  if (!getProperties().isEmpty()) {    boolean first=true;    StringBuilder buf=new StringBuilder();    for (    PropertyCriteria pc : getProperties()) {      if (first) {        first=false;      } else {        buf.append(',');      }      buf.append(pc.encoded());    }    ret.put("properties",buf.toString());  }  if (hostName != null) {    ret.put("hostName",hostName);  }  if (!getCorrelationIds().isEmpty()) {    boolean first=true;    StringBuilder buf=new StringBuilder();    for (    CorrelationIdentifier cid : getCorrelationIds()) {      if (first) {        first=false;      } else {        buf.append(',');      }      buf.append(cid.getScope().name());      buf.append('|');      buf.append(cid.getValue());    }    ret.put("correlations",buf.toString());  }  if (principal != null) {    ret.put("principal",principal);  }  if (uri != null) {    ret.put("uri",uri);  }  if (operation != null) {    ret.put("operation",operation);  }  if (log.isLoggable(Level.FINEST)) {    log.finest("Criteria parameters [" + ret + "]");  }  return ret;}  }
class C{  protected void drawValue(Canvas c,String value,float xPos,float yPos){  c.drawText(value,xPos,yPos,mValuePaint);}  }
class C{  protected byte[] engineUpdate(byte[] input,int inputOffset,int inputLen){  return core.update(input,inputOffset,inputLen);}  }
class C{  public void read(NBTTagCompound nbtTags){  type=Gas.readFromNBT(nbtTags);  amount=nbtTags.getInteger("amount");}  }
class C{  public LineFunction2D(double a,double b){  this.a=a;  this.b=b;}  }
class C{  private StringBuffer createKeyNamePair(String columnName,int displayType){  String method="get" + columnName + "()";  if (displayType != DisplayType.String)   method="String.valueOf(" + method + ")";  StringBuffer sb=new StringBuffer(NL).append("    /** Get Record ID/ColumnName").append(NL).append("        @return ID/ColumnName pair").append(NL).append("      */").append(NL).append("    public KeyNamePair getKeyNamePair() ").append(NL).append("    {").append(NL).append("        return new KeyNamePair(get_ID(), ").append(method).append(");").append(NL).append("    }").append(NL);  addImportClass(org.compiere.util.KeyNamePair.class);  return sb;}  }
class C{  public NamespaceIdPart(final String id){  MustBe.notNull(id,"id");  this.id=id;  if (!this.isValid()) {    throw new IllegalArgumentException(String.format("'%s' is not a valid namespace id part.",this.id));  }}  }
class C{  @Override public synchronized boolean load(){  Xor<Void,T> oldData=data;  String oldKey=versionedKey;  try {    if (isOutOfDate()) {      String newVersionedKey=(String)connection.get(key).get();      data=Xor.primary((T)nonAtomicload(newVersionedKey));      versionedKey=newVersionedKey;    } else {      return false;    }  } catch (  Throwable e) {    data=oldData;    versionedKey=oldKey;    logger.debug(e.getMessage(),e);    throw ExceptionSoftener.throwSoftenedException(e);  }  return true;}  }
class C{  public Solution(INode initial,INode goal,IDebugSearch debug,boolean success){  this(initial,goal,debug);  this.success=success;}  }
class C{  public void generate(Queue<Pair<Env<AttrContext>,JCClassDecl>> queue){  generate(queue,null);}  }
class C{  public boolean isBorderOpaque(){  return true;}  }
class C{  public Object[] toArray(){  return copyElements(new Object[size()]);}  }
class C{  public BootStateMachineMonitor(CounterService counterService,GaugeService gaugeService,TraceRepository traceRepository){  this.counterService=counterService;  this.gaugeService=gaugeService;  this.traceRepository=traceRepository;}  }
class C{  public Base64(final boolean urlSafe){  this(MIME_CHUNK_SIZE,CHUNK_SEPARATOR,urlSafe);}  }
class C{  public void entityReference(String name) throws org.xml.sax.SAXException {  flushPending();  startEntity(name);  endEntity(name);  if (m_tracer != null)   fireEntityReference(name);}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] concat(T[] a,T[] b){  final int alen=a.length;  final int blen=b.length;  if (alen == 0) {    return b;  }  if (blen == 0) {    return a;  }  final T[] result=(T[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),alen + blen);  System.arraycopy(a,0,result,0,alen);  System.arraycopy(b,0,result,alen,blen);  return result;}  }
class C{  public static int countGsmSeptets(char c,boolean throwsException) throws EncodeException {  if (sCharsToGsmTables[0].get(c,-1) != -1) {    return 1;  }  if (sCharsToShiftTables[0].get(c,-1) != -1) {    return 2;  }  if (throwsException) {    throw new EncodeException(c);  } else {    return 1;  }}  }
class C{  public DescriptiveStatsAction(DataEditor editor){  super("Descriptive Statistics...");  this.dataEditor=editor;}  }
class C{  public StatisticsTypeImpl(String name,String description,StatisticDescriptor[] stats){  this(name,description,stats,false);}  }
class C{  public void init() throws ServletException {}  }
class C{  void append(DNSIncoming that){  if (this.isQuery() && this.isTruncated() && that.isQuery()) {    this._questions.addAll(that.getQuestions());    this._answers.addAll(that.getAnswers());    this._authoritativeAnswers.addAll(that.getAuthorities());    this._additionals.addAll(that.getAdditionals());  } else {    throw new IllegalArgumentException();  }}  }
class C{  private static boolean isInputExhausted(StreamTokenizer input) throws ParseError {  try {    if (input.nextToken() == StreamTokenizer.TT_EOF) {      return true;    }    input.pushBack();    return false;  } catch (  IOException e) {    throw new ParseError(e.getMessage());  }}  }
class C{  public boolean isVersion2(){  return !_compat;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public final String toString(){  return name;}  }
class C{  public synchronized boolean start(BufferedImage typicalImage){  return start(typicalImage,DEFAULT_FRAME_RATE);}  }
class C{  static public void dismissAll(FragmentActivity activity){  dismissDialog(activity,PROGRESS_LOADING);  dismissDialog(activity,PROGRESS_DOWNLOAD);  dismissDialog(activity,PROGRESS_DELETING);  dismissDialog(activity,PROGRESS_SEARCHING);  dismissDialog(activity,PROGRESS_SAVING);  dismissDialog(activity,PROGRESS_OAUTH);  dismissDialog(activity,PROGRESS_UPLOADING);  dismissDialog(activity,PROGRESS_PRESET);}  }
class C{  public CopyRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options,final String name,final ItemReference parentReference){  super(requestUrl,client,options,name,parentReference);}  }
class C{  private FGBasis generateBasis(){  int N=params.N;  int q=params.q;  int d=params.d;  int d1=params.d1;  int d2=params.d2;  int d3=params.d3;  int basisType=params.basisType;  Polynomial f;  IntegerPolynomial fInt;  Polynomial g;  IntegerPolynomial gInt;  IntegerPolynomial fq;  Resultant rf;  Resultant rg;  BigIntEuclidean r;  int _2n1=2 * N + 1;  boolean primeCheck=params.primeCheck;  do {    do {      f=params.polyType == NTRUParameters.TERNARY_POLYNOMIAL_TYPE_SIMPLE ? DenseTernaryPolynomial.generateRandom(N,d + 1,d,new SecureRandom()) : ProductFormPolynomial.generateRandom(N,d1,d2,d3 + 1,d3,new SecureRandom());      fInt=f.toIntegerPolynomial();    } while (primeCheck && fInt.resultant(_2n1).res.equals(ZERO));    fq=fInt.invertFq(q);  } while (fq == null);  rf=fInt.resultant();  do {    do {      do {        g=params.polyType == NTRUParameters.TERNARY_POLYNOMIAL_TYPE_SIMPLE ? DenseTernaryPolynomial.generateRandom(N,d + 1,d,new SecureRandom()) : ProductFormPolynomial.generateRandom(N,d1,d2,d3 + 1,d3,new SecureRandom());        gInt=g.toIntegerPolynomial();      } while (primeCheck && gInt.resultant(_2n1).res.equals(ZERO));    } while (gInt.invertFq(q) == null);    rg=gInt.resultant();    r=BigIntEuclidean.calculate(rf.res,rg.res);  } while (!r.gcd.equals(ONE));  BigIntPolynomial A=(BigIntPolynomial)rf.rho.clone();  A.mult(r.x.multiply(BigInteger.valueOf(q)));  BigIntPolynomial B=(BigIntPolynomial)rg.rho.clone();  B.mult(r.y.multiply(BigInteger.valueOf(-q)));  BigIntPolynomial C;  if (params.keyGenAlg == NTRUSigningKeyGenerationParameters.KEY_GEN_ALG_RESULTANT) {    int[] fRevCoeffs=new int[N];    int[] gRevCoeffs=new int[N];    fRevCoeffs[0]=fInt.coeffs[0];    gRevCoeffs[0]=gInt.coeffs[0];    for (int i=1; i < N; i++) {      fRevCoeffs[i]=fInt.coeffs[N - i];      gRevCoeffs[i]=gInt.coeffs[N - i];    }    IntegerPolynomial fRev=new IntegerPolynomial(fRevCoeffs);    IntegerPolynomial gRev=new IntegerPolynomial(gRevCoeffs);    IntegerPolynomial t=f.mult(fRev);    t.add(g.mult(gRev));    Resultant rt=t.resultant();    C=fRev.mult(B);    C.add(gRev.mult(A));    C=C.mult(rt.rho);    C.div(rt.res);  } else {    int log10N=0;    for (int i=1; i < N; i*=10) {      log10N++;    }    BigDecimalPolynomial fInv=rf.rho.div(new BigDecimal(rf.res),B.getMaxCoeffLength() + 1 + log10N);    BigDecimalPolynomial gInv=rg.rho.div(new BigDecimal(rg.res),A.getMaxCoeffLength() + 1 + log10N);    BigDecimalPolynomial Cdec=fInv.mult(B);    Cdec.add(gInv.mult(A));    Cdec.halve();    C=Cdec.round();  }  BigIntPolynomial F=(BigIntPolynomial)B.clone();  F.sub(f.mult(C));  BigIntPolynomial G=(BigIntPolynomial)A.clone();  G.sub(g.mult(C));  IntegerPolynomial FInt=new IntegerPolynomial(F);  IntegerPolynomial GInt=new IntegerPolynomial(G);  minimizeFG(fInt,gInt,FInt,GInt,N);  Polynomial fPrime;  IntegerPolynomial h;  if (basisType == NTRUSigningKeyGenerationParameters.BASIS_TYPE_STANDARD) {    fPrime=FInt;    h=g.mult(fq,q);  } else {    fPrime=g;    h=FInt.mult(fq,q);  }  h.modPositive(q);  return new FGBasis(f,fPrime,h,FInt,GInt,params);}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  public void addGumball(Gumball gumball){  gumball.mGumballColorId=getRandomGumballId();  mWorld.addGumball(gumball.mXInitPos,gumball.mYInitPos,gumball,GUMBALL_DENSITY,GUMBALL_RADIUS,GUMBALL_BOUNCE,GUMBALL_FRICTION,BodyType.DYNAMIC);}  }
class C{  public static byte[] encode(byte[] data){  return encode(data,0,data.length);}  }
class C{  public final void testSchema(){  assertFalse(schema.isElementAllowed(el("script")));  assertFalse(schema.isElementAllowed(el("style")));  assertFalse(schema.isElementAllowed(el("xmp")));  assertFalse(schema.isElementAllowed(el("listing")));  assertFalse(schema.isElementAllowed(el("frame")));  assertFalse(schema.isElementAllowed(el("frameset")));  assertFalse(schema.isElementAllowed(el("body")));  assertFalse(schema.isElementAllowed(el("head")));  assertFalse(schema.isElementAllowed(el("html")));  assertFalse(schema.isElementAllowed(el("title")));  assertTrue(schema.isElementAllowed(el("div")));  assertTrue(schema.isElementAllowed(el("span")));}  }
class C{  private static boolean areMethodArgsCompatible(Class[] argTypes,Object[] args){  for (int i=0; i < args.length; i++) {    Object arg=args[i];    Class argType=wrap(argTypes[i]);    if (arg != null && !argType.isAssignableFrom(arg.getClass()))     return false;  }  return true;}  }
class C{  public RowSorterEvent(RowSorter source,Type type,int[] previousRowIndexToModel){  super(source);  if (type == null) {    throw new IllegalArgumentException("type must be non-null");  }  this.type=type;  this.oldViewToModel=previousRowIndexToModel;}  }
class C{  private void sendEvent(String eventType,@Nullable WritableMap params){  mContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class).emit(eventType,params);}  }
class C{  public void test_getInnerCause03_reject_otherType(){  Throwable cause=new RuntimeException();  Throwable t=new Exception(cause);  assertNull(getInnerCause(t,IOException.class));}  }
class C{  public NoSuchMethodException(){  super();}  }
class C{  public void write(BinaryRawWriter writer){  writer.writeString(schemaName);  writer.writeString(tableName);  writer.writeString(columnName);  byte typeId=BinaryUtils.typeByClass(dataType);  writer.writeByte(typeId);}  }
class C{  public static Validator<CharSequence> iri(@NonNull final CharSequence errorMessage){  return new IRIValidator(errorMessage);}  }
class C{  @Override public boolean input(Instance instance){  Instance newInstance=null;  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (m_encodeMissingAsZero && !m_insertDummyNominalFirstValue) {    Instance tempInst=(Instance)instance.copy();    tempInst.setDataset(getInputFormat());    for (int i=0; i < tempInst.numAttributes(); i++) {      if (tempInst.isMissing(i)) {        tempInst.setValue(i,0);      }    }    instance=tempInst;  }  if (m_insertDummyNominalFirstValue) {    double[] values=instance.toDoubleArray();    for (int i=0; i < instance.numAttributes(); i++) {      if (instance.attribute(i).isNominal()) {        if (!Utils.isMissingValue(values[i])) {          values[i]++;        }      }      if (m_encodeMissingAsZero && Utils.isMissingValue(values[i])) {        values[i]=0;      }    }    newInstance=new SparseInstance(instance.weight(),values);    newInstance.setDataset(getOutputFormat());    push(newInstance);  } else {    newInstance=new SparseInstance(instance);    newInstance.setDataset(instance.dataset());    push(newInstance);  }  return true;}  }
class C{  public static <T>List<List<T>> overlap(List<List<T>> lists,int before,int after){  if (before < 0) {    throw new IllegalArgumentException("Value of before cannot be negative");  }  if (after < 0) {    throw new IllegalArgumentException("Value of after cannot be negative");  }  ListIterator<List<T>> iter=lists.listIterator();  List<List<T>> result=new ArrayList<List<T>>();  for (; iter.hasNext(); ) {    List<T> current=new ArrayList<T>(iter.next());    List<T> prev=before > 0 ? findPrevious(iter) : null;    List<T> next=after > 0 ? findNext(iter) : null;    if (prev != null) {      List<T> overlap=prev.subList(prev.size() - before,prev.size());      current.addAll(0,overlap);    }    if (next != null) {      List<T> overlap=next.subList(0,after);      current.addAll(overlap);    }    result.add(current);  }  return result;}  }
class C{  private boolean isBST(Node x,Key min,Key max){  if (x == null)   return true;  if (min != null && x.key.compareTo(min) <= 0)   return false;  if (max != null && x.key.compareTo(max) >= 0)   return false;  return isBST(x.left,min,x.key) && isBST(x.right,x.key,max);}  }
class C{  public void createDecoration(Image decorationImage){  contentProposalDecoration=new ControlDecoration(this,SWT.TOP | SWT.LEFT);  contentProposalDecoration.setImage(decorationImage);  contentProposalDecoration.hide();}  }
class C{  public static <T,K>Consumer<Partition<T,K,List<T>>> evictAllAndScheduleEvictWithProcess(long time,TimeUnit unit){  long timeMs=TimeUnit.MILLISECONDS.convert(time,unit);  return null;}  }
class C{  public static SynchronizedCounter newSynchronizedCounter(){  return factory.newSynchronizedCounter();}  }
class C{  public static void presignedPostPolicy_test() throws Exception {  println("Test: presignedPostPolicy(PostPolicy policy)");  String fileName=createFile(3 * MB);  PostPolicy policy=new PostPolicy(bucketName,fileName,DateTime.now().plusDays(7));  policy.setContentRange(1 * MB,4 * MB);  Map<String,String> formData=client.presignedPostPolicy(policy);  MultipartBuilder multipartBuilder=new MultipartBuilder();  multipartBuilder.type(MultipartBuilder.FORM);  for (  Map.Entry<String,String> entry : formData.entrySet()) {    multipartBuilder.addFormDataPart(entry.getKey(),entry.getValue());  }  multipartBuilder.addFormDataPart("file",fileName,RequestBody.create(null,new File(fileName)));  Request.Builder requestBuilder=new Request.Builder();  Request request=requestBuilder.url(endpoint + "/" + bucketName).post(multipartBuilder.build()).build();  OkHttpClient transport=new OkHttpClient();  Response response=transport.newCall(request).execute();  if (response != null) {    if (!response.isSuccessful()) {      String errorXml="";      Scanner scanner=new java.util.Scanner(response.body().charStream()).useDelimiter("\\A");      if (scanner.hasNext()) {        errorXml=scanner.next();      }      println("FAILED",response,errorXml);    }  } else {    println("NO RESPONSE");  }  Files.delete(Paths.get(fileName));  client.removeObject(bucketName,fileName);}  }
class C{  protected void findEigenVectors(double[][] imat,double[][] evs,double[] lambda){  final int size=imat.length;  Random rnd=random.getSingleThreadedRandom();  double[] tmp=new double[size];  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Learning projections",tdim,LOG) : null;  for (int d=0; d < tdim; ) {    final double[] cur=evs[d];    randomInitialization(cur,rnd);    double l=multiply(imat,cur,tmp);    for (int iter=0; iter < 100; iter++) {      double delta=updateEigenvector(tmp,cur,l);      if (delta < 1e-10) {        break;      }      l=multiply(imat,cur,tmp);    }    l=estimateEigenvalue(imat,cur);    lambda[d]=l;    d++;    LOG.incrementProcessed(prog);    if (d == tdim) {      break;    }    updateMatrix(imat,cur,l);  }  LOG.ensureCompleted(prog);}  }
class C{  private void linearScan(Relation<? extends O> relation,DBIDIter iter,O obj,double range,ModifiableDoubleDBIDList result){  while (iter.valid()) {    final double distance=rawdist.distance(obj,relation.get(iter));    if (distance <= range) {      result.add(distance,iter);    }    iter.advance();  }}  }
class C{  protected void sendMomentaryFunctionGroup5(){  if (tc.getCommandStation().getCommandStationSoftwareVersionBCD() < 0x36) {    log.info("Functions F13-F28 unavailable in CS software version " + tc.getCommandStation().getCommandStationSoftwareVersion());    return;  }  if (tc.getCommandStation().getCommandStationType() == 0x10) {    if (log.isDebugEnabled()) {      log.debug("Command station does not support Momentary functions");    }    return;  }  XNetMessage msg=XNetMessage.getFunctionGroup5SetMomMsg(this.getDccAddress(),f21Momentary,f22Momentary,f23Momentary,f24Momentary,f25Momentary,f26Momentary,f27Momentary,f28Momentary);  queueMessage(msg,THROTTLEFUNCSENT);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case NODE_ID:    return isSetNodeId();case VERSION:  return isSetVersion();}throw new IllegalStateException();}  }
class C{  SavedState(Parcelable superState){  super(superState);}  }
class C{  public void testGetInstanceStringProvider02() throws NoSuchAlgorithmException, IllegalArgumentException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  Provider provider=null;  for (int i=0; i < invalidValues.length; i++) {    try {      KeyAgreement.getInstance(invalidValues[i],provider);      fail("IllegalArgumentException must be thrown");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public BaseItemRequest(String requestUrl,IOneDriveClient client,List<Option> options){  super(requestUrl,client,options,Item.class);}  }
class C{  @Override public void parseEndElement(){}  }
class C{  public void start(){  mTargetWrapperView.prepareTransition(mToShow);  mContainer.prepareTransition(mToShow);  if (mToShow == null) {    continueAnimation();  } else {    mTargetWrapperView.getViewTreeObserver().addOnGlobalLayoutListener(this);  }}  }
class C{  public static byte[] encodeBase64(final byte[] binaryData){  return encodeBase64(binaryData,false);}  }
class C{  private void split(){  int subWidth=(int)(bounds.width() / 2);  int subHeight=(int)(bounds.height() / 2);  int x=(int)bounds.left;  int y=(int)bounds.top;  nodes[0]=new QuadTree(level + 1,new RectF(x + subWidth,y,subWidth,subHeight));  nodes[1]=new QuadTree(level + 1,new RectF(x,y,subWidth,subHeight));  nodes[2]=new QuadTree(level + 1,new RectF(x,y + subHeight,subWidth,subHeight));  nodes[3]=new QuadTree(level + 1,new RectF(x + subWidth,y + subHeight,subWidth,subHeight));}  }
class C{  private static void initializeSettings(Settings.Builder output,Settings input,boolean loadDefaults){  output.put(input);  if (useSystemProperties(input)) {    if (loadDefaults) {      for (      String prefix : PROPERTY_DEFAULTS_PREFIXES) {        output.putProperties(prefix,System.getProperties());      }    }    for (    String prefix : PROPERTY_PREFIXES) {      output.putProperties(prefix,System.getProperties(),PROPERTY_DEFAULTS_PREFIXES);    }  }  output.replacePropertyPlaceholders();}  }
class C{  public Message first(){  return history.get(0);}  }
class C{  public void testIsCheckSumValid(){  CoreIdRfidProtocol instance=new CoreIdRfidProtocol();  assertEquals(true,instance.isCheckSumValid(msgStandalone));  assertEquals(false,instance.isCheckSumValid(msgBadChkSumStandalone));  instance=new CoreIdRfidProtocol('A','H',1);  assertEquals(true,instance.isCheckSumValid(msgConcentrator));  assertEquals(false,instance.isCheckSumValid(msgBadChkSumConcentrator));}  }
class C{  private void flush(Tuple tickTuple){  LOG.info(String.format("Flushing profile: profile=%s, entity=%s",measurement.getProfileName(),measurement.getEntity()));  Object result;  try {    String resultExpr=profileConfig.getResult();    result=executor.execute(resultExpr,new JSONObject(),Object.class);  } catch (  ParseException e) {    throw new ParseException("Bad 'result' expression",e);  }  measurement.setValue(result);  emit(measurement,tickTuple);  executor.clearState();  measurement=null;}  }
class C{  public static void notSupported(){  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Not supported yet");}  }
class C{  private long cancelWaiter(WNode node,WNode group,boolean interrupted){  if (node != null && group != null) {    Thread w;    node.status=CANCELLED;    for (WNode p=group, q; (q=p.cowait) != null; ) {      if (q.status == CANCELLED) {        U.compareAndSwapObject(p,WCOWAIT,q,q.cowait);        p=group;      } else       p=q;    }    if (group == node) {      for (WNode r=group.cowait; r != null; r=r.cowait) {        if ((w=r.thread) != null)         U.unpark(w);      }      for (WNode pred=node.prev; pred != null; ) {        WNode succ, pp;        while ((succ=node.next) == null || succ.status == CANCELLED) {          WNode q=null;          for (WNode t=wtail; t != null && t != node; t=t.prev)           if (t.status != CANCELLED)           q=t;          if (succ == q || U.compareAndSwapObject(node,WNEXT,succ,succ=q)) {            if (succ == null && node == wtail)             U.compareAndSwapObject(this,WTAIL,node,pred);            break;          }        }        if (pred.next == node)         U.compareAndSwapObject(pred,WNEXT,node,succ);        if (succ != null && (w=succ.thread) != null) {          succ.thread=null;          U.unpark(w);        }        if (pred.status != CANCELLED || (pp=pred.prev) == null)         break;        node.prev=pp;        U.compareAndSwapObject(pp,WNEXT,pred,succ);        pred=pp;      }    }  }  WNode h;  while ((h=whead) != null) {    long s;    WNode q;    if ((q=h.next) == null || q.status == CANCELLED) {      for (WNode t=wtail; t != null && t != h; t=t.prev)       if (t.status <= 0)       q=t;    }    if (h == whead) {      if (q != null && h.status == 0 && ((s=state) & ABITS) != WBIT && (s == 0L || q.mode == RMODE))       release(h);      break;    }  }  return (interrupted || Thread.interrupted()) ? INTERRUPTED : 0L;}  }
class C{  public SnackbarBuilder messageTextColor(@ColorInt int messageTextColor){  this.messageTextColor=messageTextColor;  return this;}  }
class C{  public void testRecognizeSymmetricNat() throws Exception {  Response testIResponse1=MessageFactory.create3489BindingResponse(mappedClientAddress,responseServerAddress,responseServerAddress);  Response testIResponse2=null;  Response testIResponse3=MessageFactory.create3489BindingResponse(mappedClientAddressPort2,responseServerAddress,responseServerAddress);  responseServer.addMessage(testIResponse1);  responseServer.addMessage(testIResponse2);  responseServer.addMessage(testIResponse3);  StunDiscoveryReport expectedReturn=new StunDiscoveryReport();  expectedReturn.setNatType(StunDiscoveryReport.SYMMETRIC_NAT);  expectedReturn.setPublicAddress(mappedClientAddress);  StunDiscoveryReport actualReturn=stunAddressDiscoverer.determineAddress();  assertEquals("The StunAddressDiscoverer failed for a no-udp environment.",expectedReturn,actualReturn);}  }
class C{  public static double signedArea(Coordinate[] ring){  if (ring.length < 3)   return 0.0;  double sum=0.0;  double x0=ring[0].x;  for (int i=1; i < ring.length - 1; i++) {    double x=ring[i].x - x0;    double y1=ring[i + 1].y;    double y2=ring[i - 1].y;    sum+=x * (y2 - y1);  }  return sum / 2.0;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String role=getString(stack);  Show s=getShow(stack);  return (s == null) ? Pooler.EMPTY_STRING_ARRAY : s.getPeopleCharacterList(Show.getRoleForString(role));}  }
