class C{  public void show(){  mDiscardDirection=getDefaultDiscardDirection();  mOverScrollCounter=0;  createStackTabs(false);}  }
class C{  public void error(JSONObject message){  sendPluginResult(new PluginResult(PluginResult.Status.ERROR,message));}  }
class C{  public void squareRootThis(){  long[] pol=getElement();  int f=mLength - 1;  int b=mBit - 1;  long TWOTOMAXLONGM1=mBitmask[MAXLONG - 1];  boolean old, now;  old=(pol[0] & 1) != 0;  for (int i=f; i >= 0; i--) {    now=(pol[i] & 1) != 0;    pol[i]=pol[i] >>> 1;    if (old) {      if (i == f) {        pol[i]^=mBitmask[b];      } else {        pol[i]^=TWOTOMAXLONGM1;      }    }    old=now;  }  assign(pol);}  }
class C{  public static String trimSize(String str,int size){  if (str == null)   return str;  if (size <= 0)   throw new IllegalArgumentException("Trim size invalid: " + size);  int length=str.length();  if (length < size / 2)   return str;  try {    byte[] bytes=str.getBytes("UTF-8");    if (bytes.length <= size)     return str;    byte[] result=new byte[size];    System.arraycopy(bytes,0,result,0,size);    return new String(result,"UTF-8");  } catch (  UnsupportedEncodingException e) {    log.log(Level.SEVERE,str,e);  }  return str;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getEqualsOp_();}  }
class C{  public TagParams withImage(@NotNull String image){  requireNonNull(image);  this.image=image;  return this;}  }
class C{  public static String toTreebankString(TreebankNode node){  StringBuilder builder=new StringBuilder();  builder.append('(').append(node.getNodeType());  if (node.getLeaf()) {    builder.append(' ').append(node.getCoveredText());  } else {    for (    TreebankNode child : JCasUtil.select(node.getChildren(),TreebankNode.class)) {      builder.append(' ').append(toTreebankString(child));    }  }  builder.append(')');  return builder.toString();}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  public int delete(String whereStatement,Object... args){  Query query=model.dialect().delete(model,whereStatement,args);  query.use(db());  return query.execute();}  }
class C{  private void purchaseStateChanged(Context context,String signedData,String signature){  Intent intent=new Intent(Consts.ACTION_PURCHASE_STATE_CHANGED);  intent.setClass(context,BillingService.class);  intent.putExtra(Consts.INAPP_SIGNED_DATA,signedData);  intent.putExtra(Consts.INAPP_SIGNATURE,signature);  context.startService(intent);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected void beforeActivation(){}  }
class C{  public boolean equalsOriented(QuadEdge qe){  if (orig().getCoordinate().equals2D(qe.orig().getCoordinate()) && dest().getCoordinate().equals2D(qe.dest().getCoordinate()))   return true;  return false;}  }
class C{  protected char entity2Char(final MutableString name){  final Entity e=factory.getEntity(name);  return e == null ? (char)0 : e.character;}  }
class C{  public void StopEventMonitor(){  m_bMonitorOn=false;}  }
class C{  public IResourceChangeDescriptionFactory createDeltaFactory(){  return new ResourceChangeDescriptionFactory();}  }
class C{  void confirmAdapterAvailable(Object o){  String adapter=adapterName(o);  log.debug("register {} adapter {}",o,adapter);  if (adapter != null) {    try {      Class.forName(adapter);    } catch (    ClassNotFoundException ex) {      locateClassFailed(ex,adapter,o);    }catch (    NoClassDefFoundError ex) {      locateClassFailed(ex,adapter,o);    }  }}  }
class C{  public List<Folder> listFolders(ManagedEntity parent,boolean recurse) throws VMWareException {  return searchManagedEntities(parent,Folder.class,recurse);}  }
class C{  public boolean isSerNo(){  Object oo=get_Value(COLUMNNAME_IsSerNo);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:30.674 -0500",hash_original_method="97BD6115DD834EB0EC7AFA10582FE230",hash_generated_method="97BD6115DD834EB0EC7AFA10582FE230") int bindListen(){  mLock.readLock().lock();  try {    return (bindListenNative() + mSocketState.getTaintInt());  }  finally {    mLock.readLock().unlock();  }}  }
class C{  public Log4jBufferListener(String name,BufferList list){  super(name,list);}  }
class C{  public BurlapOutput(OutputStream os){  init(os);}  }
class C{  private Prototype loadPrototype(final Context context,final ScriptFile scriptFile){  if (LoadState.instance != null && scriptFile != null) {    try {      return LoadState.instance.undump(new ByteArrayInputStream(scriptFile.scriptData),scriptFile.getFilePath());    } catch (    LuaError error) {      error.printStackTrace();    }catch (    Exception e) {      e.printStackTrace();    }  }  return null;}  }
class C{  public int discardBodyData() throws IOException {  return readBodyData(null);}  }
class C{  public void close(){  if (closed)   return;  if (currentFile != null)   remuxerMap.remove(currentFile);  if (remuxer2 != null) {    remuxer2.close();    remuxer2=null;    try {      if (partialTransferIndex > 0)       writer.write(partialTransfer,0,partialTransferIndex);      writer.flush();    } catch (    IOException e) {    }  }  closed=true;}  }
class C{  boolean thresholdExceeded(final Set<IBindingSet> distinctProjectionBuffer,final int distinctProjectionBufferThreshold,final List<IBindingSet> incomingBindingsBuffer,final int incomingBindingsBufferThreshold){  return distinctProjectionBuffer.size() >= distinctProjectionBufferThreshold || incomingBindingsBuffer.size() >= incomingBindingsBufferThreshold;}  }
class C{  @Deprecated public Bit(int bit) throws IllegalArgumentException {  if (bit != 0 && bit != 1) {    throw new IllegalArgumentException("Required: 0 or 1 - found: " + bit);  }  this.bit=(bit == 1);}  }
class C{  protected void starting(Description description){}  }
class C{  public DistanceCentralityScorer(Hypergraph<V,E> graph,Distance<V> distance,boolean averaging,boolean ignore_missing,boolean ignore_self_distances){  this.graph=graph;  this.distance=distance;  this.averaging=averaging;  this.ignore_missing=ignore_missing;  this.ignore_self_distances=ignore_self_distances;  this.output=new HashMap<V,Double>();}  }
class C{  public static String formatDateTime(Date date,String dateTimeFormat,Locale locale,TimeZone timeZone){  return UtilDateTime.toDateTimeFormat(dateTimeFormat,timeZone,locale).format(date);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Vertex processDiscussion(Vertex input,Vertex sentence,Vertex conversation,Map<Vertex,Vertex> variables,Network network){  boolean checkUnderstanding=true;  Vertex response=null;  if (!this.checkExactMatchFirst) {    response=processUnderstanding(input,sentence,this.discussionMatchPercentage,variables,network);    checkUnderstanding=false;    if (response != null) {      if (sentence.instanceOf(Primitive.QUESTION)) {        log("Discussion sentence understood",Level.FINE,sentence,response);      } else {        response=null;        log("Discussion sentence understood, but not a question",Level.FINE,sentence,response);      }    }  }  boolean hadResponse=response != null;  Relationship relationship=null;  if (response == null) {    relationship=bestResponse(this.discussionMatchPercentage,input,sentence,null,null,network);    if (relationship != null) {      response=relationship.getTarget();    }    if (response == null && !this.checkExactMatchFirst) {      response=processUnderstanding(input,sentence,this.discussionMatchPercentage,variables,network);      checkUnderstanding=false;      if (response != null) {        if (sentence.instanceOf(Primitive.QUESTION)) {          log("Discussion sentence understood",Level.FINE,sentence,response);        } else {          response=null;          log("Discussion sentence understood, but not a question",Level.FINE,sentence,response);        }      }    }    hadResponse=response != null;    if (response != null) {      log("Question known response",Level.FINE,response);    } else {      Relationship mostConsciousRelationship=sentence.mostConsciousRelationship(Primitive.RESPONSE);      hadResponse=mostConsciousRelationship != null;      if (mostConsciousRelationship != null) {        log("Question known response was not certain",Level.FINE,mostConsciousRelationship,this.discussionMatchPercentage);        response=null;      } else {        log("No known response, checking question patterns",Level.FINE,sentence);        relationship=matchPattern(sentence,null,input,variables,network,this.discussionMatchPercentage);        if (relationship != null) {          response=relationship.getTarget();          log("Question pattern match",Level.FINE,response);        } else {          log("No known response, checking similar questions",Level.FINE,sentence);          relationship=findResponseMatch(sentence,null,input,network,this.discussionMatchPercentage);          if (relationship != null) {            response=relationship.getTarget();            log("Discussion similar question match",Level.FINE,response);          } else {            relationship=findResponseMatch(sentence,null,input,network,0);            if (relationship != null) {              log("Discussion question match response was not valid",Level.FINE,relationship,this.discussionMatchPercentage);              response=null;            }          }        }      }    }  }  if (response == null) {    return null;  }  Vertex lastInput=conversation.lastRelationship(Primitive.INPUT);  if (lastInput != null) {    Vertex lastSentence=lastInput.mostConscious(Primitive.INPUT);    if (lastSentence != sentence) {      log("Sentence was already responded to",Level.FINE,sentence,lastSentence);      return null;    }    try {      getBot().memory().wait(COVERSATIONAL_RESPONSE_DELAY);    } catch (    InterruptedException ignore) {    }    if (getBot().memory().getActiveMemory().size() > 1) {      log("New active memory",Level.FINE,getBot().memory().getActiveMemory().size());      Network tempMemory=getBot().memory().newMemory();      Vertex tempConversation=tempMemory.createVertex(conversation);      Vertex tempSentence=tempMemory.createVertex(sentence);      lastInput=tempConversation.lastRelationship(Primitive.INPUT);      lastSentence=lastInput.mostConscious(Primitive.INPUT);      if (lastSentence != tempSentence) {        log("Sentence was already responded to",Level.FINE,sentence,lastSentence);        return null;      }    }  }  if (response != null && conversation != null) {    Vertex newResponse=checkDuplicateOrOffensiveResponse(response,sentence,conversation,input,variables,network,!hadResponse,checkUnderstanding);    if (response == newResponse && relationship != null && relationship.hasMeta()) {      Vertex topic=relationship.getMeta().getRelationship(Primitive.TOPIC);      if (topic != null && !topic.instanceOf(Primitive.PATTERN)) {        log("Conversation topic",Level.FINE,topic);        conversation.setRelationship(Primitive.TOPIC,topic);      }    }    response=newResponse;  }  return response;}  }
class C{  public static byte[] nextBytes(byte[] buffer){  sRandom.nextBytes(buffer);  return buffer;}  }
class C{  public boolean isMeasureWithLargestChildEnabled(){  return mUseLargestChild;}  }
class C{  static MemberName generateNamedFunctionInvoker(MethodTypeForm typeForm){  MethodType invokerType=NamedFunction.INVOKER_METHOD_TYPE;  String invokerName="invoke_" + shortenSignature(basicTypeSignature(typeForm.erasedType()));  InvokerBytecodeGenerator g=new InvokerBytecodeGenerator("NFI",invokerName,invokerType);  return g.loadMethod(g.generateNamedFunctionInvokerImpl(typeForm));}  }
class C{  public void testConstructorStringRadix10Zero(){  String value="-00000000000000";  int radix=10;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(value,radix);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,aNumber.signum());}  }
class C{  public void reset(){  pc=0;  acc=0;  bak=0;  last=Optional.empty();  instructions.forEach(null);}  }
class C{  protected void sendFunctionGroup1(){  tc.sendMarklinMessage(MarklinMessage.setLocoFunction(getCANAddress(),0,(f0 ? 0x01 : 0x00)),this);  tc.sendMarklinMessage(MarklinMessage.setLocoFunction(getCANAddress(),1,(f1 ? 0x01 : 0x00)),this);  tc.sendMarklinMessage(MarklinMessage.setLocoFunction(getCANAddress(),2,(f2 ? 0x01 : 0x00)),this);  tc.sendMarklinMessage(MarklinMessage.setLocoFunction(getCANAddress(),3,(f3 ? 0x01 : 0x00)),this);  tc.sendMarklinMessage(MarklinMessage.setLocoFunction(getCANAddress(),4,(f4 ? 0x01 : 0x00)),this);}  }
class C{  public String ignoreRangeTipText(){  return "Specify range of attributes to act on." + " This is a comma separated list of attribute indices, with" + " \"first\" and \"last\" valid values. Specify an inclusive"+ " range with \"-\". E.g: \"first-3,5,6-10,last\".";}  }
class C{  public static void assertNotSame(Object expected,Object actual,String errorMessage){  if (verbose) {    log("assertNotSame(" + expected + ", "+ actual+ ", "+ errorMessage+ ")");  }  assertBool(expected != actual,errorMessage);}  }
class C{  public DefaultJDBCTarget(final DataSource dataSource,final String table,final ColumnInfo[] columns){  super(dataSource);  m_table=table;  m_columns=columns;  if (null == table) {    throw new NullPointerException("table property must not be null");  }  if (null == columns) {    throw new NullPointerException("columns property must not be null");  }  if (0 == columns.length) {    throw new NullPointerException("columns must have at least 1 element");  }  open();}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;}  }
class C{  public T disabled(String value){  return attr("disabled",value);}  }
class C{  public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  public DuplicatePrimaryPartitionException(Throwable cause){  super(cause);}  }
class C{  public Page transform(Factory factory,ConfigImpl config,PageSource ps,TagLib[] tlibs,FunctionLib[] flibs,boolean returnValue,boolean ignoreScopes) throws TemplateException, IOException {  Page p;  SourceCode sc;  boolean writeLog=config.getExecutionLogEnabled();  Charset charset=config.getTemplateCharset();  boolean dotUpper=ps.getDialect() == CFMLEngine.DIALECT_CFML && ((MappingImpl)ps.getMapping()).getDotNotationUpperCase();  while (true) {    try {      sc=new PageSourceCode(ps,charset,writeLog);      p=transform(factory,config,sc,tlibs,flibs,ps.getResource().lastModified(),dotUpper,returnValue,ignoreScopes);      break;    } catch (    ProcessingDirectiveException pde) {      if (pde.getWriteLog() != null)       writeLog=pde.getWriteLog().booleanValue();      if (pde.getDotNotationUpperCase() != null)       dotUpper=pde.getDotNotationUpperCase().booleanValue();      if (!StringUtil.isEmpty(pde.getCharset()))       charset=pde.getCharset();    }  }  boolean isCFML=ps.getDialect() == CFMLEngine.DIALECT_CFML;  boolean isCFMLCompExt=isCFML && Constants.isCFMLComponentExtension(ResourceUtil.getExtension(ps.getResource(),""));  boolean possibleUndetectedComponent=false;  if (p.isPage()) {    if (isCFML)     possibleUndetectedComponent=isCFMLCompExt; else     if (Constants.isLuceeComponentExtension(ResourceUtil.getExtension(ps.getResource(),""))) {      Expression expr;      Statement stat;      PrintOut po;      LitString ls;      List<Statement> statements=p.getStatements();      Iterator<Statement> it=statements.iterator();      String str;      while (it.hasNext()) {        stat=it.next();        if (stat instanceof PrintOut && (expr=((PrintOut)stat).getExpr()) instanceof LitString) {          ls=(LitString)expr;          str=ls.getString();          if (str.indexOf(Constants.LUCEE_COMPONENT_TAG_NAME) != -1 || str.indexOf(Constants.LUCEE_INTERFACE_TAG_NAME) != -1 || str.indexOf(Constants.CFML_COMPONENT_TAG_NAME) != -1) {            possibleUndetectedComponent=true;            break;          }        }      }    }  }  if (possibleUndetectedComponent) {    Page _p;    TagLibTag scriptTag=CFMLTransformer.getTLT(sc,isCFML ? Constants.CFML_SCRIPT_TAG_NAME : Constants.LUCEE_SCRIPT_TAG_NAME,config.getIdentification());    sc.setPos(0);    SourceCode original=sc;    String text="<" + scriptTag.getFullName() + ">"+ original.getText()+ "\n</"+ scriptTag.getFullName()+ ">";    sc=new PageSourceCode(ps,text,charset,writeLog);    try {      while (true) {        if (sc == null) {          sc=new PageSourceCode(ps,charset,writeLog);          text="<" + scriptTag.getFullName() + ">"+ sc.getText()+ "\n</"+ scriptTag.getFullName()+ ">";          sc=new PageSourceCode(ps,text,charset,writeLog);        }        try {          _p=transform(factory,config,sc,tlibs,flibs,ps.getResource().lastModified(),dotUpper,returnValue,ignoreScopes);          break;        } catch (        ProcessingDirectiveException pde) {          if (pde.getWriteLog() != null)           writeLog=pde.getWriteLog().booleanValue();          if (pde.getDotNotationUpperCase() != null)           dotUpper=pde.getDotNotationUpperCase().booleanValue();          if (!StringUtil.isEmpty(pde.getCharset()))           charset=pde.getCharset();          sc=null;        }      }    } catch (    ComponentTemplateException e) {      throw e.getTemplateException();    }    if (_p != null && !_p.isPage())     return _p;  }  if (isCFMLCompExt && !p.isComponent() && !p.isInterface()) {    throw new TemplateException("template [" + ps.getDisplayPath() + "] must contain a component or an interface.");  }  return p;}  }
class C{  public boolean isOperationCall(){  return operationCall;}  }
class C{  public static long extendedDosToJavaTime(long xdostime){  long time=dosToJavaTime(xdostime);  return time + (xdostime >> 32);}  }
class C{  public void testPrintMessageBuilder() throws Exception {  String javaText=TextFormat.printToString(TestUtil.getAllSetBuilder());  javaText=javaText.replace(".0\n","\n");  assertEquals(allFieldsSetText,javaText);}  }
class C{  static Object createArray(Class<?> cls,int[] dimensions) throws OutOfMemoryError, NegativeArraySizeException {  if (dimensions.length == 0 || cls == Void.TYPE) {    throwNewIllegalArgumentException("Cannot create new array instance for the specified arguments");  }  RVMArray arrayType=java.lang.JikesRVMSupport.getTypeForClass(cls).getArrayTypeForElementType();  for (int i=1; i < dimensions.length; i++) {    arrayType=arrayType.getArrayTypeForElementType();  }  return RuntimeEntrypoints.buildMDAHelper(null,dimensions,0,arrayType);}  }
class C{  public void testConstructor_InetAddressIInetAddressI() throws Exception {  int sport=startServer("Cons InetAddress,I,InetAddress,I");  SSLSocket ssl=getSSLSocket(InetAddress.getLocalHost(),sport,InetAddress.getLocalHost(),0);  assertNotNull(ssl);  assertEquals(sport,ssl.getPort());  ssl.close();  try {    getSSLSocket(InetAddress.getLocalHost(),8081,InetAddress.getLocalHost(),8082);    fail();  } catch (  IOException expected) {  }  try {    getSSLSocket(InetAddress.getLocalHost(),-1,InetAddress.getLocalHost(),sport + 1);    fail();  } catch (  IllegalArgumentException expected) {  }  try {    getSSLSocket(InetAddress.getLocalHost(),sport,InetAddress.getLocalHost(),-1);    fail();  } catch (  IllegalArgumentException expected) {  }  try {    getSSLSocket(InetAddress.getLocalHost(),Integer.MIN_VALUE,InetAddress.getLocalHost(),sport + 1);    fail();  } catch (  IOException expectedOnRI) {    assertTrue(StandardNames.IS_RI);  }catch (  IllegalArgumentException expectedOnAndroid) {    assertFalse(StandardNames.IS_RI);  }  try {    getSSLSocket(InetAddress.getLocalHost(),sport,InetAddress.getLocalHost(),Integer.MAX_VALUE);    fail();  } catch (  IllegalArgumentException expectedOnAndroid) {    assertFalse(StandardNames.IS_RI);  }}  }
class C{  void addEntry(JavaFileObject file,String check,Info encl,Info self){  Entry e=new Entry(file,check,encl,self);  DefaultComboBoxModel m=(DefaultComboBoxModel)entries.getModel();  m.addElement(e);  if (m.getSize() == 1)   entries.setSelectedItem(e);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public SavingsAccount(){  super();}  }
class C{  private void loadCorrosionPixels(IResourceManager manager){  BufferedImage corrosionImg;  try {    corrosionImg=ImageIO.read(manager.getResource(CORROSION_TEXTURE).getInputStream());    corrosionPixels=new int[corrosionImg.getWidth() * corrosionImg.getHeight()];    corrosionImg.getRGB(0,0,corrosionImg.getWidth(),corrosionImg.getHeight(),corrosionPixels,0,corrosionImg.getWidth());    corrosionWidth=corrosionImg.getWidth();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void removeWallet(Wallet wallet){  wallets.remove(checkNotNull(wallet));  peerFilterProviders.remove(wallet);  wallet.removeEventListener(walletEventListener);  wallet.setTransactionBroadcaster(null);}  }
class C{  public void freshmark(Action<FreshMarkExtension> closure){  FreshMarkExtension freshmark=new FreshMarkExtension(this);  closure.execute(freshmark);}  }
class C{  final long fn(long v,long x){  return v + x;}  }
class C{  private boolean isOutsideDocElem(){  return (null == m_docFrag) && m_elemStack.size() == 0 && (null == m_currentNode || m_currentNode.getNodeType() == Node.DOCUMENT_NODE);}  }
class C{  public static void UF3(double[] x,double[] f,int nx){  int count1=0;  int count2=0;  double sum1=0.0;  double sum2=0.0;  double prod1=1.0;  double prod2=1.0;  double yj;  double pj;  for (int j=2; j <= nx; j++) {    yj=x[j - 1] - Math.pow(x[0],0.5 * (1.0 + 3.0 * (j - 2.0) / (nx - 2.0)));    pj=Math.cos(20.0 * yj * PI / Math.sqrt(j + 0.0));    if (j % 2 == 0) {      sum2+=yj * yj;      prod2*=pj;      count2++;    } else {      sum1+=yj * yj;      prod1*=pj;      count1++;    }  }  f[0]=x[0] + 2.0 * (4.0 * sum1 - 2.0 * prod1 + 2.0) / (double)count1;  f[1]=1.0 - Math.sqrt(x[0]) + 2.0 * (4.0 * sum2 - 2.0 * prod2 + 2.0) / (double)count2;}  }
class C{  public Automaton toAutomaton(Map<String,Automaton> automata,int maxDeterminizedStates) throws IllegalArgumentException, TooComplexToDeterminizeException {  return toAutomaton(automata,null,maxDeterminizedStates);}  }
class C{  public boolean visitExtensionElement(ElemExtensionCall elem){  return true;}  }
class C{  public void unloadOldChunks(){  for (  Entry<Key,GlowChunk> entry : chunks.entrySet()) {    Set<ChunkLock> lockSet=locks.get(entry.getKey());    if (lockSet == null || lockSet.isEmpty()) {      if (!entry.getValue().unload(true,true)) {        GlowServer.logger.warning("Failed to unload chunk " + world.getName() + ":"+ entry.getKey());      }    }    if (!entry.getValue().isLoaded()) {      chunks.entrySet().remove(entry);      locks.remove(entry.getKey());    }  }}  }
class C{  public int available() throws IOException {  if (in == null)   throw new XZIOException("Stream closed");  if (exception != null)   throw exception;  return blockDecoder == null ? 0 : blockDecoder.available();}  }
class C{  public RawDataCoding(byte value){  this.value=value;}  }
class C{  public void unlock(long stamp){  long a=stamp & ABITS, m, s;  WNode h;  while (((s=state) & SBITS) == (stamp & SBITS)) {    if ((m=s & ABITS) == 0L)     break; else     if (m == WBIT) {      if (a != m)       break;      state=(s+=WBIT) == 0L ? ORIGIN : s;      if ((h=whead) != null && h.status != 0)       release(h);      return;    } else     if (a == 0L || a >= WBIT)     break; else     if (m < RFULL) {      if (U.compareAndSwapLong(this,STATE,s,s - RUNIT)) {        if (m == RUNIT && (h=whead) != null && h.status != 0)         release(h);        return;      }    } else     if (tryDecReaderOverflow(s) != 0L)     return;  }  throw new IllegalMonitorStateException();}  }
class C{  public void removeFacets(){  _facetFields=new ArrayList<>();}  }
class C{  private <Delegated>PresenterBinder<? super Delegated> findPresenterBinderForClass(Class<Delegated> clazz) throws IllegalAccessException, InstantiationException {  PresenterBinder<? super Delegated> presenterBinder;  String clsName=clazz.getName();  String className=clsName + PRESENTER_BINDER_SUFFIX;  try {    Class<?> presenterBinderClass=Class.forName(className);    presenterBinder=(PresenterBinder<? super Delegated>)presenterBinderClass.newInstance();  } catch (  ClassNotFoundException e) {    return null;  }  return presenterBinder;}  }
class C{  public static Pattern createPattern(String[] patterns,boolean isCaseSensitive) throws PatternSyntaxException {  StringBuffer pattern=new StringBuffer();  for (int i=0; i < patterns.length; i++) {    if (i > 0) {      pattern.append('|');    }    appendAsRegEx(true,patterns[i],pattern);  }  return createPattern(pattern.toString(),true,true,isCaseSensitive,false);}  }
class C{  public static Automaton makeBinary(BytesRef term){  Automaton a=new Automaton();  int lastState=a.createState();  for (int i=0; i < term.length; i++) {    int state=a.createState();    int label=term.bytes[term.offset + i] & 0xff;    a.addTransition(lastState,state,label);    lastState=state;  }  a.setAccept(lastState,true);  a.finishState();  assert a.isDeterministic();  assert Operations.hasDeadStates(a) == false;  return a;}  }
class C{  public int total(){  return counter.intValue();}  }
class C{  private void configureEncoder() throws IOException {  mEncoder=MediaCodec.createByCodecName(mEncoderName);  MediaFormat mediaFormat=MediaFormat.createVideoFormat(MIME_TYPE,mWidth,mHeight);  mediaFormat.setInteger(MediaFormat.KEY_BIT_RATE,BITRATE);  mediaFormat.setInteger(MediaFormat.KEY_FRAME_RATE,FRAMERATE);  mediaFormat.setInteger(MediaFormat.KEY_COLOR_FORMAT,mEncoderColorFormat);  mediaFormat.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL,1);  mEncoder.configure(mediaFormat,null,null,MediaCodec.CONFIGURE_FLAG_ENCODE);  mEncoder.start();}  }
class C{  protected static void remoteCreateRegion(String name) throws CacheException {  remoteCreateRegion(name,Scope.LOCAL);}  }
class C{  public RefactoringStatusEntry(int severity,String msg,RefactoringStatusContext context,String pluginId,int code){  this(severity,msg,context,pluginId,code,null);}  }
class C{  public static CCMenuItemFont item(String value,CCNode rec,String cb){  CCLabel lbl=CCLabel.makeLabel(value,_fontName,_fontSize);  return new CCMenuItemFont(lbl,rec,cb);}  }
class C{  public void addStats(long affectedRows,long insertId,boolean moreResultAvailable){  this.insertId.add(insertId);  this.affectedRows.add((int)affectedRows);  setMoreResultAvailable(moreResultAvailable);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"bsf");  BsfBsrTranslatorCommon.translateBsfOrBsr(environment,instruction,instructions,true);}  }
class C{  public static void fill(float[] array,int start,int end,float value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public static void addServlet(WebXml webXml,String servletName,String servletClass){  WebXmlTag tag=(WebXmlTag)webXml.getDescriptorType().getTagByName("servlet");  Servlet servlet=new Servlet(tag,servletName,servletClass);  webXml.addTag(servlet);}  }
class C{  public boolean addNode(Node node){  SessionNodeWrapper wrapper=(SessionNodeWrapper)node;  SessionNode sessionNode=wrapper.getSessionNode();  try {    this.session.addNode(sessionNode);    this.sessionNodeWrappers.add(node);    getPropertyChangeSupport().firePropertyChange("nodeAdded",null,node);    return true;  } catch (  IllegalArgumentException e) {    e.printStackTrace();    return false;  }}  }
class C{  protected static boolean convertPreserveAlpha(Element filterElement,BridgeContext ctx){  String s=filterElement.getAttributeNS(null,SVG_PRESERVE_ALPHA_ATTRIBUTE);  if (s.length() == 0) {    return false;  }  if (SVG_TRUE_VALUE.equals(s)) {    return true;  }  if (SVG_FALSE_VALUE.equals(s)) {    return false;  }  throw new BridgeException(ctx,filterElement,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_PRESERVE_ALPHA_ATTRIBUTE,s});}  }
class C{  public static ScanManagerConfig xmlClone(ScanManagerConfig bean){  final Object clone=copy(bean);  return (ScanManagerConfig)clone;}  }
class C{  public void testDecodeAttributeBodyV4() throws StunException {  byte[] attributeValue=msgFixture.requestedAddressFamilyV4;  char offset=Attribute.HEADER_LENGTH;  char length=(char)(attributeValue.length - offset);  requestedAddressFamilyAttribute.decodeAttributeBody(attributeValue,offset,length);  assertEquals("RequestedAddressFamilyAttribute.decode() did not properly decode " + "the family field.",MsgFixture.REQUESTED_ADDRESS_FAMILY_ATTRIBUTE_V4,requestedAddressFamilyAttribute.getFamily());}  }
class C{  String commentAfter() throws ParserException {  String comment="";  tokens.raw=true;  while (tokens.index > 0 && tokens.get(-1).match(Token.COMMENT)) {    tokens.index--;  }  boolean closeComment=false;  for (Token token=tokens.get(); token.match(Token.COMMENT); token=tokens.next()) {    String s=token.value;    String spacing=token.spacing;    int n=spacing.lastIndexOf('\n') + 1;    if (s.startsWith("/**") || s.startsWith("/*!") || s.startsWith("///")|| s.startsWith("//!")) {      if (s.charAt(3) != '<') {        continue;      } else       if (s.startsWith("///") || s.startsWith("//!")) {        s=(comment.length() == 0 || comment.contains("*/") || !comment.contains("/*") ? "/**" : " * ") + s.substring(4);        closeComment=true;      } else {        s="/**" + s.substring(4);      }      comment+=spacing.substring(0,n) + s;    }  }  if (closeComment && !comment.endsWith("*/")) {    comment+=" */";  }  if (comment.length() > 0) {    comment+="\n";  }  tokens.raw=false;  return comment;}  }
class C{  public void update(){  SSOProtocol sso=list.get(0).getSSOProtocol();  ArrayList<SSOProtocol> ssoList=sso.getProtocolFlow();  list.clear();  for (Iterator<SSOProtocol> it=ssoList.iterator(); it.hasNext(); ) {    sso=it.next();    th.addRow(sso.toTableEntry());  }}  }
class C{  public POSMikheevFeatureExtractor(String viewName,String json){  this.viewName=viewName;  this.counter=POSMikheevCounter.read(json);}  }
class C{  public static void println(long x){  out.println(x);}  }
class C{  public DeletingUnitWithSubscriptionsNotPermittedException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  int method(String s,final int anObject){  return anObject;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  @Override public boolean onInterceptTouchEvent(MotionEvent ev){  float lastX=ev.getX();  float lastY=ev.getY();switch (ev.getAction()) {case MotionEvent.ACTION_DOWN:    mIsHorizontal=null;  System.out.println("onInterceptTouchEvent----->ACTION_DOWN");mFirstX=lastX;mFirstY=lastY;int motionPosition=pointToPosition((int)mFirstX,(int)mFirstY);if (motionPosition >= 0) {View currentItemView=getChildAt(motionPosition - getFirstVisiblePosition());mPreItemView=mCurrentItemView;mCurrentItemView=currentItemView;}break;case MotionEvent.ACTION_MOVE:float dx=lastX - mFirstX;float dy=lastY - mFirstY;if (Math.abs(dx) >= 5 && Math.abs(dy) >= 5) {return true;}break;case MotionEvent.ACTION_UP:case MotionEvent.ACTION_CANCEL:System.out.println("onInterceptTouchEvent----->ACTION_UP");if (mIsShown && (mPreItemView != mCurrentItemView || isHitCurItemLeft(lastX))) {System.out.println("1---> hiddenRight");hiddenRight(mPreItemView);}break;}return super.onInterceptTouchEvent(ev);}  }
class C{  @Override public void run(){  try {    MostUsedValues.this.retrieveMostUsedValues(maxValues,attrNames);  } catch (  IOException e) {    servletContext.log(e.getMessage(),e);  }catch (  ServiceException e) {    servletContext.log(e.getMessage() + " " + e.getHttpErrorCodeOverride()+ " "+ e.getResponseContentType()+ ": "+ e.getResponseBody(),e);  }}  }
class C{  public void comment(String data) throws SAXException {  m_docIsEmpty=false;  final int length=data.length();  if (length > m_charsBuff.length) {    m_charsBuff=new char[length * 2 + 1];  }  data.getChars(0,length,m_charsBuff,0);  comment(m_charsBuff,0,length);}  }
class C{  public boolean isIn(long i){  return (i >= this.min) && (i <= this.max);}  }
class C{  public void chainTo(TripSchedule that){  if (arrivals[arrivals.length - 1] <= that.departures[0]) {  } else {    LOG.debug("Trip {} arrives at terminus after the next trip in its block departs.",tripId);  }}  }
class C{  public void start(){  invoke(embeddedStart);}  }
class C{  public BoundingBox unifyWith(BoundingBox bb){  latMin=Math.min(latMin,bb.latMin);  lonMin=Math.min(lonMin,bb.lonMin);  latMax=Math.max(latMax,bb.latMax);  lonMax=Math.max(lonMax,bb.lonMax);  return this;}  }
class C{  public void printSeries(){  for (int i=0; i < this.getItemCount(); i++) {    MACDItem dataItem=(MACDItem)this.getDataItem(i);    _log.debug("Type: " + this.getType() + " Time: "+ dataItem.getPeriod().getStart()+ " Value: "+ dataItem.getMACD());  }}  }
class C{  public org.apache.nutch.storage.ParseStatus.Builder clearMajorCode(){  fieldSetFlags()[0]=false;  return this;}  }
class C{  public boolean documentIsEmpty(){  return m_docIsEmpty && (m_elemContext.m_currentElemDepth == 0);}  }
class C{  private void createSentence(JCas aJCas,List<Integer> firstTokenInSentence,Map<String,Token> tokensStored){  for (int i=0; i < firstTokenInSentence.size(); i++) {    Sentence outSentence=new Sentence(aJCas);    if (i == firstTokenInSentence.size() - 1 && i != 0) {      outSentence.setBegin(tokensStored.get("t_" + firstTokenInSentence.get(i)).getEnd());      outSentence.setEnd(tokensStored.get("t_" + (tokensStored.size())).getEnd());      outSentence.addToIndexes();      break;    }    if (i == firstTokenInSentence.size() - 1 && i == 0) {      outSentence.setBegin(tokensStored.get("t_" + firstTokenInSentence.get(i)).getBegin());      outSentence.setEnd(tokensStored.get("t_" + (tokensStored.size())).getEnd());      outSentence.addToIndexes();    } else     if (i == 0) {      outSentence.setBegin(tokensStored.get("t_" + firstTokenInSentence.get(i)).getBegin());      outSentence.setEnd(tokensStored.get("t_" + firstTokenInSentence.get(i + 1)).getEnd());      outSentence.addToIndexes();    } else {      outSentence.setBegin(tokensStored.get("t_" + firstTokenInSentence.get(i)).getEnd() + 1);      outSentence.setEnd(tokensStored.get("t_" + firstTokenInSentence.get(i + 1)).getEnd());      outSentence.addToIndexes();    }  }}  }
class C{  private void convertHalfBandToHilbert(float[] coefficients){  mHilbertFilter=new float[coefficients.length];  int middle=coefficients.length / 2;  for (int x=0; x < coefficients.length; x++) {    if (x < middle) {      mHilbertFilter[x]=2.0f * -Math.abs(coefficients[x]);    } else     if (x > middle) {      mHilbertFilter[x]=2.0f * Math.abs(coefficients[x]);    } else {      mHilbertFilter[x]=2.0f * coefficients[x];    }  }}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB) public void removeListener(android.animation.Animator.AnimatorListener listener){  mNativeAnimator.removeListener(listener);}  }
class C{  private static Address GetFloatArrayElements(JNIEnvironment env,int arrayJREF,Address isCopyAddress){  if (traceJNI)   VM.sysWrite("JNI called: GetFloatArrayElements  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    float[] sourceArray=(float[])env.getJNIRef(arrayJREF);    int size=sourceArray.length;    if (MemoryManager.willNeverMove(sourceArray)) {      JNIGenericHelpers.setBoolStar(isCopyAddress,false);      return Magic.objectAsAddress(sourceArray);    } else {      Address copyBuffer=sysCall.sysMalloc(size << LOG_BYTES_IN_FLOAT);      if (copyBuffer.isZero()) {        env.recordException(new OutOfMemoryError());        return Address.zero();      }      Memory.memcopy(copyBuffer,Magic.objectAsAddress(sourceArray),size << LOG_BYTES_IN_FLOAT);      JNIGenericHelpers.setBoolStar(isCopyAddress,true);      return copyBuffer;    }  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return Address.zero();  }}  }
class C{  private Comparator<GridCollisionJobContextWrapper> priorityComparator(){  if (priComp == null)   priComp=new PriorityGridCollisionJobContextComparator();  return priComp;}  }
class C{  public Builder resolveLinkTos(boolean resolveLinkTos){  this.resolveLinkTos=resolveLinkTos;  return this;}  }
class C{  public static double xnormi(double p){  double arg, t, t2, t3, xnum, xden, qinvp, x, pc;  final double c[]={2.515517,.802853,.010328};  final double d[]={1.432788,.189269,.001308};  if (p <= .5) {    arg=-2.0 * Math.log(p);    t=Math.sqrt(arg);    t2=t * t;    t3=t2 * t;    xnum=c[0] + c[1] * t + c[2] * t2;    xden=1.0 + d[0] * t + d[1] * t2 + d[2] * t3;    qinvp=t - xnum / xden;    x=-qinvp;    return x;  } else {    pc=1.0 - p;    arg=-2.0 * Math.log(pc);    t=Math.sqrt(arg);    t2=t * t;    t3=t2 * t;    xnum=c[0] + c[1] * t + c[2] * t2;    xden=1.0 + d[0] * t + d[1] * t2 + d[2] * t3;    x=t - xnum / xden;    return x;  }}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (newRecord && getParent().isComplete()) {    log.saveError("ParentComplete",Msg.translate(getCtx(),"C_CashLine"));    return false;  }  if (is_ValueChanged(COLUMNNAME_C_Invoice_ID)) {    Object generated=get_ValueOld(COLUMNNAME_IsGenerated);    if (generated != null && ((Boolean)generated).booleanValue()) {      log.saveError("Error",Msg.getMsg(getCtx(),"CannotChangeCashGenInvoice"));      return false;    }  }  if (CASHTYPE_Invoice.equals(getCashType()) && getC_Invoice_ID() == 0)   setCashType(CASHTYPE_GeneralExpense);  if (CASHTYPE_BankAccountTransfer.equals(getCashType()) && getC_BankAccount_ID() == 0)   setCashType(CASHTYPE_GeneralExpense);  if (CASHTYPE_Charge.equals(getCashType()) && getC_Charge_ID() == 0)   setCashType(CASHTYPE_GeneralExpense);  boolean verify=newRecord || is_ValueChanged("CashType") || is_ValueChanged("C_Invoice_ID")|| is_ValueChanged("C_BankAccount_ID");  if (verify) {    if (CASHTYPE_BankAccountTransfer.equals(getCashType()))     setC_Currency_ID(getBankAccount().getC_Currency_ID()); else     if (CASHTYPE_Invoice.equals(getCashType()))     setC_Currency_ID(getInvoice().getC_Currency_ID()); else     setC_Currency_ID(getCashBook().getC_Currency_ID());    if (CASHTYPE_BankAccountTransfer.equals(getCashType()))     setAD_Org_ID(getBankAccount().getAD_Org_ID()); else     if (CASHTYPE_Invoice.equals(getCashType()))     setAD_Org_ID(getCashBook().getAD_Org_ID());    if (getAD_Org_ID() == 0)     setAD_Org_ID(getParent().getAD_Org_ID());  }  if (!CASHTYPE_BankAccountTransfer.equals(getCashType()))   setC_BankAccount_ID(I_ZERO);  if (getLine() == 0) {    String sql="SELECT COALESCE(MAX(Line),0)+10 FROM C_CashLine WHERE C_Cash_ID=?";    int ii=DB.getSQLValue(get_TrxName(),sql,getC_Cash_ID());    setLine(ii);  }  return true;}  }
class C{  public boolean isClassSubclassOf(SootClass child,SootClass possibleParent){  child.checkLevel(SootClass.HIERARCHY);  possibleParent.checkLevel(SootClass.HIERARCHY);  return getSuperclassesOf(child).contains(possibleParent);}  }
class C{  public void processEdge(ObjectReference source,Address slot){  VM.assertions.fail("processEdge not implemented.");}  }
class C{  public SortedSetDocValuesTermsEnum(SortedSetDocValues values){  this.values=values;  scratch=new BytesRefBuilder();}  }
class C{  public static void tick(){  if (isTicking()) {    clock.incrementAndGet();    Scheduler.yield();  }}  }
class C{  public void combos(){  Combo.popular(cbSetor,ControleDAO.getBanco().getSetorDAO().combo());}  }
class C{  protected FilePath unwrap(String path){  return FilePath.get(path.substring(getScheme().length() + 1));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void saveCurrent(int size) throws IOException {  readIfNeeded(size);  int pos=_pos;  while (!isAllRead() && (size > 0)) {    save(_working[pos]);    pos++;    size--;  }}  }
class C{  public static void fill(char[] array,char value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public DividerItemDecoration(Context context,int resId){  mDivider=ContextCompat.getDrawable(context,resId);}  }
class C{  @Override public Matrix diffusionDiscretization(final StochasticProcess sp,final double t0,final Array x0,final double dt){  return sp.diffusion(t0,x0).mulAssign(Math.sqrt(dt));}  }
class C{  private void inorder(TreeNode<E> root){  if (root == null)   return;  inorder(root.left);  list.add(root.element);  inorder(root.right);}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:41.681 -0500",hash_original_method="97B591DF3562D946C70A1ECBD633B498",hash_generated_method="D7F2004FFCF007261665F99CF411A189") public static void startMethodTracing(String traceFileName,FileDescriptor fd,int bufferSize,int flags){  if (traceFileName == null || fd == null) {    throw new NullPointerException();  }  startMethodTracingNative(traceFileName,fd,bufferSize,flags);}  }
class C{  MultiFinderPatternFinder(BitMatrix image){  super(image);}  }
class C{  public Seconds toStandardSeconds(){  return Seconds.seconds(FieldUtils.safeMultiply(getValue(),DateTimeConstants.SECONDS_PER_MINUTE));}  }
class C{  public static ExprBoolean toExprBoolean(Expression expr){  if (expr instanceof ExprBoolean)   return (ExprBoolean)expr;  if (expr instanceof Literal) {    Boolean bool=((Literal)expr).getBoolean(null);    if (bool != null)     return expr.getFactory().createLitBoolean(bool.booleanValue(),expr.getStart(),expr.getEnd());  }  return new CastBoolean(expr);}  }
class C{  public static void clearRoute(){}  }
class C{  public void insertContacts(View v){  getOps().insertContacts();}  }
class C{  public void moveLeftAnim(){  PropertyValuesHolder imageA_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageB.getIndexLable()]);  PropertyValuesHolder imageA_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageB.getIndexLable()]);  ObjectAnimator imageAAnimator=null;  if (imageA.getIndexLable() == 3) {    PropertyValuesHolder imageA_scale_x=PropertyValuesHolder.ofFloat("scaleX",1);    PropertyValuesHolder imageA_scale_y=PropertyValuesHolder.ofFloat("scaleY",1);    imageAAnimator=ObjectAnimator.ofPropertyValuesHolder(imageA,imageA_translate_x,imageA_translate_y,imageA_scale_x,imageA_scale_y);  } else   if (imageA.getIndexLable() == 4) {    PropertyValuesHolder imageA_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue);    PropertyValuesHolder imageA_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue);    imageAAnimator=ObjectAnimator.ofPropertyValuesHolder(imageA,imageA_translate_x,imageA_translate_y,imageA_scale_x,imageA_scale_y);  } else {    imageAAnimator=ObjectAnimator.ofPropertyValuesHolder(imageA,imageA_translate_x,imageA_translate_y);  }  PropertyValuesHolder imageB_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageC.getIndexLable()]);  PropertyValuesHolder imageB_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageC.getIndexLable()]);  ObjectAnimator imageBAnimator=null;  if (imageB.getIndexLable() == 3) {    PropertyValuesHolder imageB_scale_x=PropertyValuesHolder.ofFloat("scaleX",1);    PropertyValuesHolder imageB_scale_y=PropertyValuesHolder.ofFloat("scaleY",1);    imageBAnimator=ObjectAnimator.ofPropertyValuesHolder(imageB,imageB_translate_x,imageB_translate_y,imageB_scale_x,imageB_scale_y);  } else   if (imageB.getIndexLable() == 4) {    PropertyValuesHolder imageB_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue);    PropertyValuesHolder imageB_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue);    imageBAnimator=ObjectAnimator.ofPropertyValuesHolder(imageB,imageB_translate_x,imageB_translate_y,imageB_scale_x,imageB_scale_y);  } else {    imageBAnimator=ObjectAnimator.ofPropertyValuesHolder(imageB,imageB_translate_x,imageB_translate_y);  }  PropertyValuesHolder imageC_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageD.getIndexLable()]);  PropertyValuesHolder imageC_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageD.getIndexLable()]);  ObjectAnimator imageCAnimator=null;  if (imageC.getIndexLable() == 3) {    PropertyValuesHolder imageC_scale_x=PropertyValuesHolder.ofFloat("scaleX",1);    PropertyValuesHolder imageC_scale_y=PropertyValuesHolder.ofFloat("scaleY",1);    imageCAnimator=ObjectAnimator.ofPropertyValuesHolder(imageC,imageC_translate_x,imageC_translate_y,imageC_scale_x,imageC_scale_y);  } else   if (imageC.getIndexLable() == 4) {    PropertyValuesHolder imageC_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue);    PropertyValuesHolder imageC_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue);    imageCAnimator=ObjectAnimator.ofPropertyValuesHolder(imageC,imageC_translate_x,imageC_translate_y,imageC_scale_x,imageC_scale_y);  } else {    imageCAnimator=ObjectAnimator.ofPropertyValuesHolder(imageC,imageC_translate_x,imageC_translate_y);  }  PropertyValuesHolder imageD_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageE.getIndexLable()]);  PropertyValuesHolder imageD_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageE.getIndexLable()]);  ObjectAnimator imageDAnimator=null;  if (imageD.getIndexLable() == 3) {    PropertyValuesHolder imageD_scale_x=PropertyValuesHolder.ofFloat("scaleX",1);    PropertyValuesHolder imageD_scale_y=PropertyValuesHolder.ofFloat("scaleY",1);    imageDAnimator=ObjectAnimator.ofPropertyValuesHolder(imageD,imageD_translate_x,imageD_translate_y,imageD_scale_x,imageD_scale_y);  } else   if (imageD.getIndexLable() == 4) {    PropertyValuesHolder imageD_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue);    PropertyValuesHolder imageD_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue);    imageDAnimator=ObjectAnimator.ofPropertyValuesHolder(imageD,imageD_translate_x,imageD_translate_y,imageD_scale_x,imageD_scale_y);  } else {    imageDAnimator=ObjectAnimator.ofPropertyValuesHolder(imageD,imageD_translate_x,imageD_translate_y);  }  PropertyValuesHolder imageE_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageA.getIndexLable()]);  PropertyValuesHolder imageE_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageA.getIndexLable()]);  ObjectAnimator imageEAnimator=null;  if (imageE.getIndexLable() == 3) {    PropertyValuesHolder imageE_scale_x=PropertyValuesHolder.ofFloat("scaleX",1);    PropertyValuesHolder imageE_scale_y=PropertyValuesHolder.ofFloat("scaleY",1);    imageEAnimator=ObjectAnimator.ofPropertyValuesHolder(imageE,imageE_translate_x,imageE_translate_y,imageE_scale_x,imageE_scale_y);  } else   if (imageE.getIndexLable() == 4) {    PropertyValuesHolder imageE_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue);    PropertyValuesHolder imageE_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue);    imageEAnimator=ObjectAnimator.ofPropertyValuesHolder(imageE,imageE_translate_x,imageE_translate_y,imageE_scale_x,imageE_scale_y);  } else {    imageEAnimator=ObjectAnimator.ofPropertyValuesHolder(imageE,imageE_translate_x,imageE_translate_y);  }  setLeftIndex();  AnimatorSet set=new AnimatorSet();  set.setDuration(mDuration);  set.playTogether(imageAAnimator,imageBAnimator,imageCAnimator,imageDAnimator,imageEAnimator);  set.start();}  }
class C{  protected void unregisterWifiDisablingListener(){  if (mWifiDisablingListener != null) {    if (sLogger.isActivated()) {      sLogger.debug("Unregistering WIFI disabling listener");    }    try {      mContext.unregisterReceiver(mWifiDisablingListener);    } catch (    IllegalArgumentException e) {    }    mWifiDisablingListener=null;  }}  }
class C{  protected SVGOMFEMergeElement(){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public String saveResource(Resource resource){  return null;}  }
class C{  public StreamTimestamp plus(int i,ChronoUnit unit){  return new StreamTimestamp(streamId,timestamp.plus(i,unit));}  }
class C{  final int calculateLineCount(){  int nlines=0;  int startOffset=getStartOffset();  int p1=getEndOffset();  RSyntaxTextArea textArea=(RSyntaxTextArea)getContainer();  RSyntaxDocument doc=(RSyntaxDocument)getDocument();  Element map=doc.getDefaultRootElement();  int line=map.getElementIndex(startOffset);  Token tokenList=doc.getTokenListForLine(line);  float x0=0;  for (int p0=startOffset; p0 < p1; ) {    nlines+=1;    x0=RSyntaxUtilities.makeTokenListStartAt(tokenList,p0,WrappedSyntaxView.this,textArea,x0);    int p=calculateBreakPosition(p0,tokenList,x0);    p0=(p == p0) ? ++p : p;  }  return nlines;}  }
class C{  public String toString(){  StringBuilder s=new StringBuilder();  s.append(V + " vertices, " + E+ " edges "+ NEWLINE);  for (int v=0; v < V; v++) {    s.append(v + ": ");    for (    int w : adj[v]) {      s.append(w + " ");    }    s.append(NEWLINE);  }  return s.toString();}  }
class C{  public BasicScriptProperties(){}  }
class C{  public int readSequence(int seq,byte[] dest,int start,int length){  seq(seq);  if (mPointers[mStartFileNo][mStartIndex] == mPointers[mStartFileNo][mStartIndex + 1]) {    return 0;  }  int arrOffset=mPointers[mStartFileNo][mStartIndex] + start;  int fileNo=mStartFileNo;  int index=mStartIndex + 1;  while (arrOffset >= mPointers[fileNo][index]) {    arrOffset-=mPointers[fileNo][index];    fileNo++;    index=0;  }  int lengthToGet=Math.min(mPointers[fileNo][index] - arrOffset,length);  int destOffset=0;  mSequenceData[fileNo].get(dest,arrOffset,0,lengthToGet);  destOffset+=lengthToGet;  if (destOffset < length && index == mPointers[fileNo].length - 1) {    fileNo++;    while (destOffset < length && fileNo < mPointers.length && mPointers[fileNo].length == 1) {      lengthToGet=Math.min(mPointers[fileNo][0],length - destOffset);      mSequenceData[fileNo].get(dest,0,destOffset,lengthToGet);      destOffset+=lengthToGet;      fileNo++;    }    if (destOffset < length && fileNo < mPointers.length) {      lengthToGet=Math.min(mPointers[fileNo][0],length - destOffset);      mSequenceData[fileNo].get(dest,0,destOffset,lengthToGet);      destOffset+=lengthToGet;    }  }  return destOffset;}  }
class C{  @Override public int hashCode(){  return (int)(termId ^ (termId >>> 32));}  }
class C{  public void testColocatedPreload() throws Exception {  cacheMode=PARTITIONED;  nearEnabled=false;  checkPreload();}  }
class C{  public TextToSpeech(){  super(SERVICE_NAME);  if ((getEndPoint() == null) || getEndPoint().isEmpty()) {    setEndPoint(URL);  }}  }
class C{  public int codeLength(int i){  return ByteArray.readU16bit(info,i * 10 + 4);}  }
class C{  public MessagingFraction defaultServer(EnhancedServerConsumer config){  config.accept(findOrCreateDefaultServer());  return this;}  }
class C{  private String substituteVariables(String line){  if (variables.size() > 0) {    final StringBuffer buffer=new StringBuffer(line);    int start=0;    int end=0;    while (start >= 0 && end >= 0) {      start=buffer.indexOf("${",end);      if (start < 0) {        break;      }      end=buffer.indexOf("}",start);      if (end < 0) {        break;      }      final String name=buffer.substring(start + 2,end);      final String value=variables.getProperty(name);      if (value != null) {        buffer.replace(start,end + 1,value);        final int variableLength=(end - start + 2);        end=end + (value.length() - variableLength);      }    }    line=buffer.toString();  }  return line;}  }
class C{  public static void retry(){  retry=true;}  }
class C{  private void log(String callerFQCN,Level level,String msg,Throwable t){  LogRecord record=new LogRecord(level,msg);  record.setLoggerName(name());  record.setThrown(t);  fillCallerData(callerFQCN,record);  logger.log(record);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:50.373 -0500",hash_original_method="6034895F301B6A7B932D0B171C9F2AB8",hash_generated_method="DD0A6E8ADB6DA18B65AB506662CBCCA7") public HttpException(final String message,final Throwable cause){  super(message);  ExceptionUtils.initCause(this,cause);}  }
class C{  public double eval(int chromosome,boolean useTrainingData,int valueIndex){  return chromosomes[chromosome].eval(useTrainingData,valueIndex);}  }
class C{  private void addLeftOnlyOccurence(List<AttributeSource> originalAttributeSources,List<Attribute> unionAttributeList,MemoryExampleTable unionTable,Example leftExample){  double[] unionDataRow=new double[unionAttributeList.size()];  int attributeIndex=0;  for (  AttributeSource attributeSource : originalAttributeSources) {    if (attributeSource.getSource() == AttributeSource.FIRST_SOURCE) {      unionDataRow[attributeIndex]=leftExample.getValue(attributeSource.getAttribute());    } else     if (attributeSource.getSource() == AttributeSource.SECOND_SOURCE) {      unionDataRow[attributeIndex]=Double.NaN;    }    attributeIndex++;  }  unionTable.addDataRow(new DoubleArrayDataRow(unionDataRow));}  }
class C{  private static Address copyMagicArrayToBootImage(Object jdkObject,RVMArray rvmArrayType,boolean allocOnly,Address overwriteAddress,Object parentObject) throws IllegalAccessException {  BootImageMap.Entry mapEntry=BootImageMap.findOrCreateEntry(jdkObject);  if ((!mapEntry.imageAddress.EQ(OBJECT_NOT_ALLOCATED)) && overwriteAddress.isMax()) {    return mapEntry.imageAddress;  }  if (verbosity.isAtLeast(DETAILED))   depth++;  RVMType rvmElementType=rvmArrayType.getElementType();  int arrayCount=Array.getLength(jdkObject);  Address arrayImageAddress;  if (overwriteAddress.isMax()) {    if (rvmElementType.equals(RVMType.CodeType)) {      arrayImageAddress=bootImage.allocateCode(rvmArrayType,arrayCount);    } else {      boolean needsIdentityHash=mapEntry.requiresIdentityHashCode();      int identityHashValue=mapEntry.getIdentityHashCode();      arrayImageAddress=bootImage.allocateArray(rvmArrayType,arrayCount,needsIdentityHash,identityHashValue,AlignmentEncoding.ALIGN_CODE_NONE);    }  } else {    arrayImageAddress=overwriteAddress;  }  mapEntry.imageAddress=arrayImageAddress;  if (verbosity.isAtLeast(DETAILED)) {    if (depth == DEPTH_CUTOFF)     say(SPACES.substring(0,depth + 1),"TOO DEEP: cutting off"); else     if (depth < DEPTH_CUTOFF) {      String tab=SPACES.substring(0,depth + 1);      if (depth == 0 && jtocCount >= 0)       tab=tab + "jtoc #" + String.valueOf(jtocCount)+ ": ";      int arraySize=rvmArrayType.getInstanceSize(arrayCount);      say(tab,"Copying array  ",rvmArrayType.toString(),"   length=",String.valueOf(arrayCount),(arraySize >= LARGE_ARRAY_SIZE) ? " large object!!!" : "");    }  }  if (rvmElementType.equals(RVMType.CodeType)) {    if (VM.BuildForIA32) {      byte[] values=(byte[])jdkObject;      for (int i=0; i < arrayCount; ++i)       bootImage.setByte(arrayImageAddress.plus(i),values[i]);    } else {      int[] values=(int[])jdkObject;      for (int i=0; i < arrayCount; ++i)       bootImage.setFullWord(arrayImageAddress.plus(i << LOG_BYTES_IN_INT),values[i]);    }  } else   if (rvmElementType.equals(RVMType.AddressType)) {    Address[] values=(Address[])jdkObject;    for (int i=0; i < arrayCount; i++) {      Address addr=values[i];      String msg="Address array element";      bootImage.setAddressWord(arrayImageAddress.plus(i << LOG_BYTES_IN_ADDRESS),getWordValue(addr,msg,true),false,false);    }  } else   if (rvmElementType.equals(RVMType.WordType)) {    Word[] values=(Word[])jdkObject;    for (int i=0; i < arrayCount; i++) {      String msg="Word array element ";      Word addr=values[i];      bootImage.setAddressWord(arrayImageAddress.plus(i << LOG_BYTES_IN_ADDRESS),getWordValue(addr,msg,false),false,false);    }  } else   if (rvmElementType.equals(RVMType.OffsetType)) {    Offset[] values=(Offset[])jdkObject;    for (int i=0; i < arrayCount; i++) {      String msg="Offset array element " + i;      Offset addr=values[i];      bootImage.setAddressWord(arrayImageAddress.plus(i << LOG_BYTES_IN_ADDRESS),getWordValue(addr,msg,false),false,false);    }  } else   if (rvmElementType.equals(RVMType.ExtentType)) {    Extent[] values=(Extent[])jdkObject;    for (int i=0; i < arrayCount; i++) {      String msg="Extent array element ";      Extent addr=values[i];      bootImage.setAddressWord(arrayImageAddress.plus(i << LOG_BYTES_IN_ADDRESS),getWordValue(addr,msg,false),false,false);    }  } else {    fail("unexpected magic array type: " + rvmArrayType);  }  if (!allocOnly) {    copyTIBToBootImage(rvmArrayType,jdkObject,mapEntry.imageAddress);  }  if (verbosity.isAtLeast(DETAILED))   depth--;  return mapEntry.imageAddress;}  }
class C{  public OMGraphicList(){  this(10);}  }
class C{  private void trimToSize(){  final int limit=UISettings.getInstance().RECENT_FILES_LIMIT + 1;  while (myEntriesList.size() > limit) {    myEntriesList.remove(0);  }}  }
class C{  private void doCondMove(IR ir,Diamond diamond,Instruction cb){  BasicBlock taken=diamond.getTaken();  BasicBlock notTaken=diamond.getNotTaken();  HashMap<Instruction,Instruction> takenInstructions=new HashMap<Instruction,Instruction>();  Instruction[] takenInstructionList=copyAndMapInstructions(taken,takenInstructions);  HashMap<Instruction,Instruction> notTakenInstructions=new HashMap<Instruction,Instruction>();  Instruction[] notTakenInstructionList=copyAndMapInstructions(notTaken,notTakenInstructions);  Operand val1=IfCmp.getVal1(cb);  Operand val2=IfCmp.getVal2(cb);  ConditionOperand cond=IfCmp.getCond(cb);  RegisterOperand tempVal1=ir.regpool.makeTemp(val1);  Operator op=IRTools.getMoveOp(tempVal1.getType());  cb.insertBefore(Move.create(op,tempVal1.copyRO(),val1.copy()));  RegisterOperand tempVal2=ir.regpool.makeTemp(val2);  op=IRTools.getMoveOp(tempVal2.getType());  cb.insertBefore(Move.create(op,tempVal2.copyRO(),val2.copy()));  rewriteWithTemporaries(takenInstructionList,ir);  rewriteWithTemporaries(notTakenInstructionList,ir);  insertBefore(takenInstructionList,cb);  insertBefore(notTakenInstructionList,cb);  HashMap<Register,Instruction> takenMap=new HashMap<Register,Instruction>();  if (taken != null) {    for (Enumeration<Instruction> e=taken.forwardRealInstrEnumerator(); e.hasMoreElements(); ) {      Instruction s=e.nextElement();      if (s.isBranch())       continue;      Operand def=s.getDefs().nextElement();      if (def.asRegister().getRegister().spansBasicBlock()) {        Instruction tempS=takenInstructions.get(s);        RegisterOperand temp=(RegisterOperand)tempS.getDefs().nextElement();        op=IRTools.getCondMoveOp(def.asRegister().getType());        Instruction cmov=CondMove.create(op,def.copy().asRegister(),tempVal1.copy(),tempVal2.copy(),cond.copy().asCondition(),temp.copy(),def.copy());        takenMap.put(def.asRegister().getRegister(),cmov);        cb.insertBefore(cmov);      }      s.remove();    }  }  HashMap<Register,Instruction> notTakenMap=new HashMap<Register,Instruction>();  if (notTaken != null) {    for (Enumeration<Instruction> e=notTaken.forwardRealInstrEnumerator(); e.hasMoreElements(); ) {      Instruction s=e.nextElement();      if (s.isBranch())       continue;      Operand def=s.getDefs().nextElement();      if (def.asRegister().getRegister().spansBasicBlock()) {        Instruction tempS=notTakenInstructions.get(s);        RegisterOperand temp=(RegisterOperand)tempS.getDefs().nextElement();        Instruction prevCmov=takenMap.get(def.asRegister().getRegister());        if (prevCmov != null) {          CondMove.setFalseValue(prevCmov,temp.copy());          notTakenMap.put(def.asRegister().getRegister(),prevCmov);        } else {          op=IRTools.getCondMoveOp(def.asRegister().getType());          Instruction cmov=CondMove.create(op,def.asRegister(),tempVal1.copy(),tempVal2.copy(),cond.copy().asCondition(),def.copy(),temp.copy());          cb.insertBefore(cmov);          notTakenMap.put(def.asRegister().getRegister(),cmov);        }      }      s.remove();    }  }  BranchOperand target=diamond.getBottom().makeJumpTarget();  Goto.mutate(cb,GOTO,target);  Instruction next=cb.nextInstructionInCodeOrder();  if (next.operator() != BBEND) {    next.remove();  }  diamond.getTop().recomputeNormalOut(ir);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static byte[] uuidToByteArray(final UUID src,final byte[] dst,final int dstPos,final int nBytes){  if (0 == nBytes) {    return dst;  }  if (nBytes > 16) {    throw new IllegalArgumentException("nBytes is greather than 16");  }  longToByteArray(src.getMostSignificantBits(),0,dst,dstPos,nBytes > 8 ? 8 : nBytes);  if (nBytes >= 8) {    longToByteArray(src.getLeastSignificantBits(),0,dst,dstPos + 8,nBytes - 8);  }  return dst;}  }
class C{  public BoolQueryBuilder minimumNumberShouldMatch(int minimumNumberShouldMatch){  this.minimumShouldMatch=Integer.toString(minimumNumberShouldMatch);  return this;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  @Override public void onCreate(SQLiteDatabase db){  db.execSQL(CREATE_TABLE_WEATHER_VALUES);  db.execSQL(CREATE_TABLE_WEATHER_CONDITIONS);  db.execSQL(CREATE_INDEX_WEATHER_VALUES_LOCATION_KEY_IDX);  db.execSQL(CREATE_INDEX_WEATHER_CONDITIONS_LOCATION_KEY_IDX);}  }
class C{  @Override public void stateChanged(ChangeEvent e){  setButtons();  if (getCurrentTable() != null) {    notifyListeners(getCurrentTable().getURL(),getCurrentTable().getUser(),getCurrentTable().getPassword(),getCurrentTable().getQuery());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.313 -0500",hash_original_method="A51D0E58D36C2041DD351AE4FDD73BCF",hash_generated_method="9C103DD34050B3EC7184403C7C7A4648") public ReferredByHeader createReferredByHeader(Address address){  if (address == null)   throw new NullPointerException("null address!");  ReferredBy referredBy=new ReferredBy();  referredBy.setAddress(address);  return referredBy;}  }
class C{  IndexPropagationSystem(IR _ir){  ir=_ir;  ssa=ir.HIRInfo.dictionary;  valueNumbers=ir.HIRInfo.valueNumbers;  setupEquations();}  }
class C{  public Double convertCarTimeToPtTime(double carTime){  Double ptTime=null;  double ct=carTime / 60;switch (studyAreaCode) {case 1:    double a=2.800368e+00;  double b=3.017928e-01;double c=1.296653e-02;double d=7.702851e-04;double e=7.666573e-04;double f=1.474628e-05;double pt=Math.exp(a + b * Math.log(ct) + c * Math.pow(Math.log(ct),2) + d * Math.pow(Math.log(ct),3) + e * Math.pow(Math.log(ct),4) + f * Math.pow(Math.log(ct),5));ptTime=pt * 60;break;default :break;}return ptTime;}  }
class C{  protected void addToSendingConnections(Connection con){  this.sendingConnections.add(con);}  }
class C{  @Override public String globalInfo(){  return "Super Class Classifier (SCC).\n" + "The output space is manipulated into super classes (based on label dependence; and pruning and nearest-subset-replacement like NSR), upon which a multi-target base classifier is applied.\n" + "For example, a super class based on two labels might take values in {[0,3],[0,0],[1,2]}.\n"+ "For more information see:\n"+ getTechnicalInformation().toString();}  }
class C{  @Override public ValueLobDb copyToTemp(){  return this;}  }
class C{  public JSONArray put(Object value){  this.myArrayList.add(value);  return this;}  }
class C{  public void updateString(String columnName,String x) throws SQLException {  updateString(findColumn(columnName),x);}  }
class C{  public boolean isAfter(YearMonth other){  return compareTo(other) > 0;}  }
class C{  private void insertPositions(IJavaElement[] elements,boolean isNew){  int length=elements.length;  IJavaElement previous=null, current=null, next=(length > 0) ? elements[0] : null;  for (int i=0; i < length; i++) {    previous=current;    current=next;    next=(i + 1 < length) ? elements[i + 1] : null;    if (isNew) {      this.newPositions.put(current,new ListItem(previous,next));    } else {      this.oldPositions.put(current,new ListItem(previous,next));    }  }}  }
class C{  public static void main(String[] args){  String nodeType="tcp+ssl";  try (Ignite g=G.start(NODE_CFG.get(nodeType))){    changeTopology(g,4,1,nodeType);    changeTopology(g,1,4,nodeType);    g.compute().execute(ClientStopNodeTask.class,g.cluster().localNode().id().toString());    assert G.allGrids().isEmpty();  } catch (  Exception e) {    System.err.println("Uncaught exception: " + e.getMessage());    e.printStackTrace(System.err);  }}  }
class C{  public boolean dump_summaries(){  return soot.PhaseOptions.getBoolean(options,"dump-summaries");}  }
class C{  public void testInvalidXml() throws Exception {  testInvalidGpx(INVALID_XML_GPX);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:50.076 -0500",hash_original_method="728EB40B22AAC8E4A2D49FB71329AFF3",hash_generated_method="5CF2AA5256F4CD377A4E608FDA938439") public static void execStandalone(String invokeWith,String classPath,String className,String[] args){  StringBuilder command=new StringBuilder(invokeWith);  command.append(" /system/bin/dalvikvm -classpath '").append(classPath);  command.append("' ").append(className);  Zygote.appendQuotedShellArgs(command,args);  Zygote.execShell(command.toString());}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (declaredScope: ");  result.append(declaredScope);  result.append(')');  return result.toString();}  }
class C{  private boolean hidePopup(){  if (actionSource instanceof JToggleButton) {    JToggleButton toggleSource=(JToggleButton)actionSource;    toggleSource.setSelected(false);  }  if (containingWindow != null) {    containingWindow.removeComponentListener(this);    containingWindow=null;  }  if (actionSource != null) {    actionSource.removeComponentListener(this);    actionSource=null;  }  if (popup != null) {    popupComponent.setVisible(false);    popupComponent.stopTracking();    popup.dispose();    popup=null;    hideTime=System.currentTimeMillis();    return true;  }  return false;}  }
class C{  public Collection<?> toCollection() throws SQLException {  return crsInternal.toCollection();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.SETTER_DECLARATION;}  }
class C{  public double similarity(I i1,I i2){  return sim.similarity(item2iidx(i1),item2iidx(i2));}  }
class C{  public static Object fetchFromDBSql(final Connection connection,final String sqlQuery) throws SQLException {  PreparedStatement statement=null;  ResultSet resultSet=null;  try {    statement=connection.prepareStatement(sqlQuery);    resultSet=statement.executeQuery();    if (resultSet != null && resultSet.next())     return resultSet.getString(1); else     return null;  } catch (  final SQLException e) {    final String errMsg="Exception while executing query [" + sqlQuery + "]";    LOGGER.error(errMsg,e);    throw new ApplicationRuntimeException(errMsg,e);  } finally {    if (statement != null)     statement.close();    if (resultSet != null)     resultSet.close();  }}  }
class C{  public void writeHouseholds(String outputfolder){  if (this.households == null || this.householdAttributes == null) {    throw new RuntimeException("Either no households or household attributes to write.");  } else {    LOG.info("Writing households to file...");    HouseholdsWriterV10 hw=new HouseholdsWriterV10(this.households);    hw.setPrettyPrint(true);    hw.writeFile(outputfolder + "Households.xml");    LOG.info("Writing household attributes to file...");    ObjectAttributesXmlWriter oaw=new ObjectAttributesXmlWriter(householdAttributes);    oaw.setPrettyPrint(true);    oaw.writeFile(outputfolder + "HouseholdAttributes.xml");  }}  }
class C{  public void testBug1835955(){  DefaultCategoryDataset d=new DefaultCategoryDataset();  d.addValue(1.0,"R1","C1");  d.addValue(2.0,"R2","C2");  d.removeColumn("C2");  d.addValue(3.0,"R2","C2");  assertEquals(3.0,d.getValue("R2","C2").doubleValue(),EPSILON);}  }
class C{  public float readFloat(){  return scanner.nextFloat();}  }
class C{  public void shuffle(Random rand){  for (int i=_pos; i-- > 1; ) {    swap(i,rand.nextInt(i));  }}  }
class C{  public void addExclusiveDuration(double exclusiveDuration){  this.exclusiveDuration+=exclusiveDuration;}  }
class C{  @Nullable public ProblemDescriptor[] checkClass(@NotNull PsiClass aClass,@NotNull InspectionManager manager,boolean isOnTheFly){  return null;}  }
class C{  public static IClassFileReader createDefaultClassFileReader(String zipFileName,String zipEntryName,int decodingFlag){  ZipFile zipFile=null;  try {    if (JavaModelManager.ZIP_ACCESS_VERBOSE) {      System.out.println("(" + Thread.currentThread() + ") [ToolFactory.createDefaultClassFileReader()] Creating ZipFile on "+ zipFileName);    }    zipFile=new ZipFile(zipFileName);    ZipEntry zipEntry=zipFile.getEntry(zipEntryName);    if (zipEntry == null) {      return null;    }    if (!zipEntryName.toLowerCase().endsWith(SuffixConstants.SUFFIX_STRING_class)) {      return null;    }    byte classFileBytes[]=Util.getZipEntryByteContent(zipEntry,zipFile);    return new ClassFileReader(classFileBytes,decodingFlag);  } catch (  ClassFormatException e) {    return null;  }catch (  IOException e) {    return null;  } finally {    if (zipFile != null) {      try {        zipFile.close();      } catch (      IOException e) {      }    }  }}  }
class C{  @Override public String toString(){  return summaryLabel.toString();}  }
class C{  public static <T>Sink<T> of(SinkFunction<T> flinkSink){  return new UnboundedFlinkSink<>(flinkSink);}  }
class C{  @Override public boolean onKeyDown(int keyCode,KeyEvent event){switch (keyCode) {case KeyEvent.KEYCODE_BACK:    if (event.getRepeatCount() == 0 && mInputView != null) {      if (mInputView.handleBack()) {        return true;      }    }  break;case KeyEvent.KEYCODE_DEL:if (mComposing.length() > 0) {  onKey(Keyboard.KEYCODE_DELETE,null);  return true;}break;case KeyEvent.KEYCODE_ENTER:return false;default :}return super.onKeyDown(keyCode,event);}  }
class C{  private long calculateAnimationDelay2(int position){  long delay;  int firstVisiblePosition=Utils.findFirstCompletelyVisibleItemPosition(mRecyclerView.getLayoutManager());  int lastVisiblePosition=Utils.findLastCompletelyVisibleItemPosition(mRecyclerView.getLayoutManager());  if (mLastAnimatedPosition > lastVisiblePosition)   lastVisiblePosition=mLastAnimatedPosition;  int numberOfItemsOnScreen=lastVisiblePosition - firstVisiblePosition;  int numberOfAnimatedItems=position - 1;  if (mMaxChildViews < mRecyclerView.getChildCount())   mMaxChildViews=mRecyclerView.getChildCount();  if (numberOfItemsOnScreen == 0 || numberOfItemsOnScreen < numberOfAnimatedItems || (firstVisiblePosition > 1 && firstVisiblePosition <= mMaxChildViews) || (position > mMaxChildViews && firstVisiblePosition == -1 && mRecyclerView.getChildCount() == 0)) {    delay=mStepDelay;    if (numberOfItemsOnScreen <= 1) {      delay+=mInitialDelay;    } else {      mInitialDelay=0L;    }    if (mRecyclerView.getLayoutManager() instanceof GridLayoutManager) {      int numColumns=((GridLayoutManager)mRecyclerView.getLayoutManager()).getSpanCount();      delay=mInitialDelay + mStepDelay * (position % numColumns);    }  } else {    delay=mInitialDelay + (position * mStepDelay);  }  return delay;}  }
class C{  public void test_group06() throws MalformedQueryException {  final String query="PREFIX : <http://example/>\n" + "SELECT ?s ?v\n" + "{\n"+ "  ?s :p ?v .\n"+ "}\n"+ "GROUP BY ?s";  negativeTest(query);}  }
class C{  private void run() throws Exception {  DevelopmentProvider tp=new DevelopmentProvider();  Topology t=tp.newTopology("mqttSamplePublisher");  MqttConfig mqttConfig=createMqttConfig();  MqttStreams mqtt=new MqttStreams(t,null);  AtomicInteger cnt=new AtomicInteger();  TStream<String> msgs=t.poll(null,1L,TimeUnit.SECONDS);  mqtt.publish(msgs,topic,0,false);  System.out.println("Console URL for the job: " + tp.getServices().getService(HttpServer.class).getConsoleUrl());  tp.submit(t);}  }
class C{  public double remove(long key){  double prev=0;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  public Builder updateAddress(Address oldAddress,Address newAddress){  deleteAddress(oldAddress);  addAddress(newAddress);  return this;}  }
class C{  @Override protected void doPost(SlingHttpServletRequest request,SlingHttpServletResponse response) throws ServletException, IOException {  final PrintWriter writer=response.getWriter();  final boolean allowWrite=userService.isAuthorable(request.getResourceResolver().adaptTo(Session.class));  response.setCharacterEncoding(CharEncoding.UTF_8);  response.setContentType("application/json");  if (allowWrite) {    final String apiKey=request.getParameter(API_KEY_PROPERTY);    final String domainName=request.getParameter(DOMAIN_NAME_PROPERTY);    final boolean enabled=Boolean.parseBoolean(request.getParameter(ENABLED_PROPERTY));    final Map<String,Object> properties=new HashMap<String,Object>();    properties.put(AkismetService.AKISMET_DOMAIN_NAME,domainName);    properties.put(AkismetService.AKISMET_ENABLED,enabled);    if (StringUtils.isBlank(apiKey) || !apiKey.contains(PublickConstants.PASSWORD_REPLACEMENT)) {      properties.put(AkismetService.AKISMET_API_KEY,apiKey);    }    final boolean result=akismetService.setProperties(properties);    if (result) {      response.setStatus(SlingHttpServletResponse.SC_OK);      sendResponse(writer,"OK","Settings successfully updated.");    } else {      response.setStatus(SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR);      sendResponse(writer,"Error","Settings failed to update.");    }  } else {    response.setStatus(SlingHttpServletResponse.SC_FORBIDDEN);    sendResponse(writer,"Error","Current user not authorized.");  }}  }
class C{  public boolean isExitBlock(){  return false;}  }
class C{  public void tagDefineBitsLossless(int id,int format,int width,int height,Color[] colors,byte[] imageData) throws IOException {  writeBitsLossless(id,format,width,height,colors,imageData,false);}  }
class C{  @Override public void draw(Canvas canvas){}  }
class C{  private static char[] encodeHex(final byte[] data,final boolean toLowerCase){  return encodeHex(data,toLowerCase ? DIGITS_LOWER : DIGITS_UPPER);}  }
class C{  public float distanceTo(AnimatableValue other){  return 0f;}  }
class C{  private JSplitPane createMainSplitPane(){  final JSplitPane mainSplitPane=new JSplitPane();  mainSplitPane.setOneTouchExpandable(true);  mainSplitPane.setDividerLocation(250);  mainSplitPane.setResizeWeight(0.33);  mainSplitPane.setOrientation(JSplitPane.HORIZONTAL_SPLIT);  m_componentPanel.setBackground(Color.WHITE);  mainSplitPane.setLeftComponent(createProjectTreePanel());  mainSplitPane.setRightComponent(m_componentPanel);  mainSplitPane.setBorder(new LineBorder(Color.GRAY));  return mainSplitPane;}  }
class C{  public void advanceSynchronizedProcessingTime(TimerCallback timerCallback,Instant newSynchronizedProcessingTime) throws Exception {  checkState(!newSynchronizedProcessingTime.isBefore(synchronizedProcessingTime),"Cannot move processing time backwards from %s to %s",processingTime,newSynchronizedProcessingTime);  WindowTracing.trace("TestTimerInternals.advanceProcessingTime: from {} to {}",synchronizedProcessingTime,newSynchronizedProcessingTime);  synchronizedProcessingTime=newSynchronizedProcessingTime;  advanceAndFire(timerCallback,newSynchronizedProcessingTime,TimeDomain.SYNCHRONIZED_PROCESSING_TIME);}  }
class C{  public static java.util.Date toDate(String date,String time){  if (date == null || time == null)   return null;  String month;  String day;  String year;  String hour;  String minute;  String second;  int dateSlash1=date.indexOf("/");  int dateSlash2=date.lastIndexOf("/");  if (dateSlash1 <= 0 || dateSlash1 == dateSlash2)   return null;  int timeColon1=time.indexOf(":");  int timeColon2=time.lastIndexOf(":");  if (timeColon1 <= 0)   return null;  month=date.substring(0,dateSlash1);  day=date.substring(dateSlash1 + 1,dateSlash2);  year=date.substring(dateSlash2 + 1);  hour=time.substring(0,timeColon1);  if (timeColon1 == timeColon2) {    minute=time.substring(timeColon1 + 1);    second="0";  } else {    minute=time.substring(timeColon1 + 1,timeColon2);    second=time.substring(timeColon2 + 1);  }  return toDate(month,day,year,hour,minute,second);}  }
class C{  public CommitDistributionException(String s,Set regionDistributionExceptions){  super(s);  this.regionDistributionExceptions=regionDistributionExceptions;  if (this.regionDistributionExceptions == null) {    this.regionDistributionExceptions=Collections.EMPTY_SET;  }}  }
class C{  public static final double parseTime(final String time,final char separator){  if (time == null || time.length() == 0 || time.equals("undefined")) {    return Time.UNDEFINED_TIME;  }  boolean isNegative=(time.charAt(0) == '-');  String[] strings=(isNegative ? StringUtils.explode(time.substring(1),separator) : StringUtils.explode(time,separator));  double seconds=0;  if (strings.length == 1) {    seconds=Math.abs(Double.parseDouble(strings[0]));  } else   if (strings.length == 2) {    int h=Integer.parseInt(strings[0]);    int m=Integer.parseInt(strings[1]);    if ((m < 0) || (m > 59)) {      throw new IllegalArgumentException("minutes are out of range in " + time);    }    seconds=Math.abs(h) * 3600 + m * 60;  } else   if (strings.length == 3) {    int h=Integer.parseInt(strings[0]);    int m=Integer.parseInt(strings[1]);    double s=Double.parseDouble(strings[2]);    if ((m < 0) || (m > 59)) {      throw new IllegalArgumentException("minutes are out of range in " + time);    }    if ((s < 0) || (s >= 60)) {      throw new IllegalArgumentException("seconds are out of range in " + time);    }    seconds=Math.abs(h) * 3600 + m * 60 + s;  } else {    throw new IllegalArgumentException("time format is not valid in " + time);  }  if (isNegative) {    seconds=-seconds;  }  return seconds;}  }
class C{  public void registerImpulseConstraint(ImpulseConstraint collision){  collisionResponseRows+=collision.GetCollisionResponseRows();  collisions.add(collision);}  }
class C{  public static Uri absolutePathToUri(Context context,String path){  String basePath=context.getFilesDir().getAbsolutePath();  if ((null != path) && path.startsWith(basePath)) {    return Uri.parse("content://" + ConsoleContentProvider.AUTHORITIES + path.substring(basePath.length()));  }  return null;}  }
class C{  public void not(){  mv.visitInsn(Opcodes.ICONST_1);  mv.visitInsn(Opcodes.IXOR);}  }
class C{  static <T>DoubleStream makeDouble(AbstractPipeline<?,Double,?> upstream){  return new OfDouble(upstream);}  }
class C{  int checkIfSargableAndRemoveEscapeChars(ExecutionContext context,StringBuffer buffer){  int len=buffer.length();  int wildcardPosition=-1;  for (int i=0; i < len; ++i) {    char ch=buffer.charAt(i);    if (ch == UNDERSCORE) {      context.cachePut(wildcardTypeKey,WILDCARD_UNDERSCORE);      wildcardPosition=i;      break;    } else     if (ch == PERCENT) {      context.cachePut(wildcardTypeKey,WILDCARD_PERCENT);      wildcardPosition=i;      break;    } else     if (ch == BACKSLASH) {      if (i + 1 < len) {        if (buffer.charAt(i + 1) == PERCENT || buffer.charAt(i + 1) == UNDERSCORE) {          wildcardPosition=-1;        }        buffer.deleteCharAt(i);        len--;      }    }  }  return wildcardPosition;}  }
class C{  public boolean isTactileTouch(){  return tactileTouch;}  }
class C{  public static PasswordField passwordField(String tip){  PasswordField pf=new PasswordField();  tooltip(pf,tip);  return pf;}  }
class C{  public void reset(){  Cell[] as=cells;  base=0L;  if (as != null) {    for (    Cell a : as) {      if (a != null) {        a.reset();      }    }  }}  }
class C{  public Analyzer includeContribution(){  includeContribution=true;  return this;}  }
class C{  public boolean computeScrollOffset(){  if (mFinished) {    return false;  }  int timePassed=(int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);  if (timePassed < mDuration) {switch (mMode) {case SCROLL_MODE:      float x=timePassed * mDurationReciprocal;    if (mInterpolator == null)     x=viscousFluid(x); else     x=mInterpolator.getInterpolation(x);  mCurrX=mStartX + Math.round(x * mDeltaX);mCurrY=mStartY + Math.round(x * mDeltaY);break;case FLING_MODE:final float t=(float)timePassed / mDuration;final int index=(int)(NB_SAMPLES * t);final float t_inf=(float)index / NB_SAMPLES;final float t_sup=(float)(index + 1) / NB_SAMPLES;final float d_inf=SPLINE[index];final float d_sup=SPLINE[index + 1];final float distanceCoef=d_inf + (t - t_inf) / (t_sup - t_inf) * (d_sup - d_inf);mCurrX=mStartX + Math.round(distanceCoef * (mFinalX - mStartX));mCurrX=Math.min(mCurrX,mMaxX);mCurrX=Math.max(mCurrX,mMinX);mCurrY=mStartY + Math.round(distanceCoef * (mFinalY - mStartY));mCurrY=Math.min(mCurrY,mMaxY);mCurrY=Math.max(mCurrY,mMinY);if (mCurrX == mFinalX && mCurrY == mFinalY) {mFinished=true;}break;}} else {mCurrX=mFinalX;mCurrY=mFinalY;mFinished=true;}return true;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double z;  double currentVal;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  double numInNeighbours;  boolean flag=false;  double flowDir=0;  double flowLength=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    double gridResX=pntr.getCellSizeX();    double gridResY=pntr.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    WhiteboxRaster tmpGrid=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpGrid.isTemporaryFile=true;    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (pntr.getValue(row,col) != noData) {          z=0;          for (i=0; i < 8; i++) {            if (pntr.getValue(row + dY[i],col + dX[i]) == inflowingVals[i]) {              z++;            }          }          tmpGrid.setValue(row,col,z);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (tmpGrid.getValue(row,col) == 0) {          tmpGrid.setValue(row,col,-1);          flag=false;          x=col;          y=row;          do {            flowLength=output.getValue(y,x);            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              i=(int)(Math.log(flowDir) / LnOf2);              flowLength+=gridLengths[i];              x+=dX[i];              y+=dY[i];              currentVal=output.getValue(y,x);              if (flowLength > currentVal) {                output.setValue(y,x,flowLength);              }              numInNeighbours=tmpGrid.getValue(y,x) - 1;              tmpGrid.setValue(y,x,numInNeighbours);              if (numInNeighbours == 0) {                tmpGrid.setValue(y,x,-1);                flag=true;              } else {                flag=false;              }            } else {              flag=false;            }          } while (flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    tmpGrid.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + port;  result=prime * result + (int)(sw ^ (sw >>> 32));  return result;}  }
class C{  public void forceSetActivation(final double act){  activation=act;}  }
class C{  public void addClusterChannelHandler(Channel channel,Acceptor acceptorUsed,CoreRemotingConnection remotingConnection,Activation activation){  channel.setHandler(new ClusterControllerChannelHandler(channel,acceptorUsed,remotingConnection,activation.getActivationChannelHandler(channel,acceptorUsed)));}  }
class C{  public T caseAtomEscape(AtomEscape object){  return null;}  }
class C{  protected Element createElement(String nsAlias,String nsUri,String name){  return new Element(nsAlias,nsUri,name);}  }
class C{  public GSAServiceClient(Context context){  mContext=context;  mConnection=new GSAServiceConnection();  mGsaHelper=((ChromeApplication)mContext.getApplicationContext()).createGsaHelper();}  }
class C{  public void and(FixedBitSet other){  and(other.bits,other.numWords);}  }
class C{  public static Stream<String> wordsOf(String text){  requireNonNull(text);  return WORDS.splitAsStream(text);}  }
class C{  public MainView(){  super(new Stage(new ScreenViewport()));}  }
class C{  public AlgorithmException(Algorithm algorithm,String message,Throwable cause){  super(message,cause);  this.algorithm=algorithm;}  }
class C{  public static String encryptECB(final byte[] concatenatedHashValue,final Long turnoverCounter,final SecretKey symmetricKey,int turnOverCounterLengthInBytes) throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {  final ByteBuffer byteBufferIV=ByteBuffer.allocate(16);  byteBufferIV.put(concatenatedHashValue);  final byte[] IV=byteBufferIV.array();  final ByteBuffer byteBufferData=ByteBuffer.allocate(16);  byteBufferData.putLong(turnoverCounter);  final byte[] data=byteBufferData.array();  byte[] turnOverCounterByteRep=get2ComplementRepForLong(turnoverCounter,turnOverCounterLengthInBytes);  System.arraycopy(turnOverCounterByteRep,0,data,0,turnOverCounterByteRep.length);  final Cipher cipher=Cipher.getInstance("AES/ECB/NoPadding","BC");  cipher.init(Cipher.ENCRYPT_MODE,symmetricKey);  final byte[] intermediateResult=cipher.doFinal(IV);  final byte[] result=new byte[data.length];  for (int i=0; i < data.length; i++) {    result[i]=(byte)((data[i]) ^ (intermediateResult[i]));  }  final byte[] encryptedTurnOverValue=new byte[turnOverCounterLengthInBytes];  System.arraycopy(result,0,encryptedTurnOverValue,0,turnOverCounterLengthInBytes);  return CashBoxUtils.base64Encode(encryptedTurnOverValue,false);}  }
class C{  public List<SubmitRecord> evaluate(){  initOptions();  Change c=control.getChange();  if (!opts.allowClosed() && c.getStatus().isClosed()) {    SubmitRecord rec=new SubmitRecord();    rec.status=SubmitRecord.Status.CLOSED;    return Collections.singletonList(rec);  }  if (!opts.allowDraft()) {    try {      initPatchSet();    } catch (    OrmException e) {      return ruleError("Error looking up patch set " + control.getChange().currentPatchSetId(),e);    }    if (c.getStatus() == Change.Status.DRAFT || patchSet.isDraft()) {      return cannotSubmitDraft();    }  }  List<Term> results;  try {    results=evaluateImpl("locate_submit_rule","can_submit","locate_submit_filter","filter_submit_results",control.getUser());  } catch (  RuleEvalException e) {    return ruleError(e.getMessage(),e);  }  if (results.isEmpty()) {    return ruleError(String.format("Submit rule '%s' for change %s of %s has " + "no solution.",getSubmitRuleName(),cd.getId(),getProjectName()));  }  return resultsToSubmitRecord(getSubmitRule(),results);}  }
class C{  public static Long[] toObject(long[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return EMPTY_LONG_OBJECT_ARRAY;  }  final Long[] result=new Long[array.length];  for (int i=0; i < array.length; i++) {    result[i]=new Long(array[i]);  }  return result;}  }
class C{  public void unbind(){  if (hasType())   unbindTyped();  if (bound) {    unbindTextures();    pgl.useProgram(0);    bound=false;  }}  }
class C{  public NeuronGroupPanelLite(NetworkPanel np){  addListeners();  setLayout(new BorderLayout());  JPanel subPanel=new JPanel();  subPanel.setLayout(new BoxLayout(subPanel,BoxLayout.X_AXIS));  subPanel.add(addToGroup);  subPanel.add(Box.createHorizontalStrut(20));  subPanel.add(tfNameLabel);  tfGroupName.setEnabled(addToGroup.isSelected());  subPanel.add(tfGroupName);  subPanel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));  this.add(subPanel,BorderLayout.CENTER);  setBorder(BorderFactory.createTitledBorder("Group"));}  }
class C{  static <T>InternalFactory<? extends T> scope(Key<T> key,InjectorImpl injector,InternalFactory<? extends T> creator,Scoping scoping){  if (scoping.isNoScope()) {    return creator;  }  Scope scope=scoping.getScopeInstance();  Provider<T> scoped=scope.scope(key,new ProviderToInternalFactoryAdapter<T>(injector,creator));  return new InternalFactoryToProviderAdapter<>(Initializables.<Provider<? extends T>>of(scoped));}  }
class C{  public static String byte2HexFormatted(byte[] arr){  StringBuilder str=new StringBuilder(arr.length * 2);  for (int i=0; i < arr.length; i++) {    String h=Integer.toHexString(arr[i]);    int l=h.length();    if (l == 1)     h="0" + h;    if (l > 2)     h=h.substring(l - 2,l);    str.append(h.toUpperCase());    if (i < (arr.length - 1))     str.append(':');  }  return str.toString();}  }
class C{  public LimeTransferHandler(){  this.supportedActions=NONE;}  }
class C{  public HGAtomReplaceRequestEvent(HGHandle handle,HGHandle type,Object newValue){  super(handle);  this.type=type;  this.newValue=newValue;}  }
class C{  private void loadImageAttributes(Attributes attributes){  String artworkUrl=attributes.getValue("href");  if (artworkUrl != null && artworkUrl.trim().length() > 0 && URLUtil.isValidUrl(artworkUrl)) {    channel.setArtworkUrl(artworkUrl.trim());  }}  }
class C{  public SIPResponse createResponse(int statusCode){  String reasonPhrase=SIPResponse.getReasonPhrase(statusCode);  return this.createResponse(statusCode,reasonPhrase);}  }
class C{  public static boolean unmap(Address start,int size){  Clock.stop();  Trace.trace(Item.MEMORY,"map(%s,%d)\n",start.toString(),size);  Address last=start.plus(size);  assert size % BYTES_IN_PAGE == 0;  assert start.toWord().and(Word.fromIntSignExtend(~PAGE_MASK)).EQ(Word.zero());  Clock.start();  for (Address p=start; p.LT(last); p=p.plus(BYTES_IN_PAGE)) {    pageTable.unmapPage(p);    Clock.tick();  }  return true;}  }
class C{  void compress(){  if (compressCount++ > COMPRESS_THRESHOLD) {    compressCount=0;    Enumeration e=classes.elements();    while (e.hasMoreElements())     ((CtClass)e.nextElement()).compress();  }}  }
class C{  private View inflateItemView(@Nullable final ViewGroup parent){  LayoutInflater layoutInflater=LayoutInflater.from(context);  View view=layoutInflater.inflate(style == Style.GRID ? R.layout.grid_item : R.layout.list_item,parent,false);  ItemViewHolder viewHolder=new ItemViewHolder();  viewHolder.iconImageView=(ImageView)view.findViewById(android.R.id.icon);  viewHolder.titleTextView=(TextView)view.findViewById(android.R.id.title);  view.setTag(viewHolder);  return view;}  }
class C{  public ObjectName isRelationMBean(String relationId) throws IllegalArgumentException, RelationNotFoundException {  if (relationId == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"isRelationMBean",relationId);  Object result=getRelation(relationId);  if (result instanceof ObjectName) {    return ((ObjectName)result);  } else {    return null;  }}  }
class C{  @Override public void updateUI(){  final UIDefaults uiDefaults=UIManager.getLookAndFeelDefaults();  fixPopupWeight();  fixGtkPopupStyle();  fixTreeWideSelection(uiDefaults);  fixMenuIssues(uiDefaults);  if (UIUtil.isUnderAquaLookAndFeel()) {    uiDefaults.put("Panel.opaque",Boolean.TRUE);  } else   if (UIUtil.isWinLafOnVista()) {    uiDefaults.put("ComboBox.border",null);  }  initInputMapDefaults(uiDefaults);  uiDefaults.put("Button.defaultButtonFollowsFocus",Boolean.FALSE);  patchFileChooserStrings(uiDefaults);  patchLafFonts(uiDefaults);  patchHiDPI(uiDefaults);  patchGtkDefaults(uiDefaults);  fixSeparatorColor(uiDefaults);  updateToolWindows();  for (  Frame frame : Frame.getFrames()) {    if (SystemInfo.isMac) {      frame.setBackground(new Color(UIUtil.getPanelBackground().getRGB()));    }    updateUI(frame);  }  fireLookAndFeelChanged();}  }
class C{  public int viewTypeFromViewClass(Class<? extends BindableLayout> viewClass){  return viewTypePositions.get(viewClass);}  }
class C{  public boolean isStacked(){  return mStackSize > 1 ? true : false;}  }
class C{  @Override public void visit(ClassOrInterfaceDeclaration n,String arg){  String javaDocContent="";  if (n.getComment() != null && n.getComment().getContent() != null) {    javaDocContent=n.getComment().getContent().replaceAll("\\n *\\* *","\n ");  }  if (StringUtils.hasText(javaDocContent)) {    javaDoc.setClassJavaDoc(javaDocContent);  }}  }
class C{  public void queryError(HeadersAmp headers,String to,long qid,Throwable exn) throws IOException {  if (log.isLoggable(Level.FINEST)) {    log.finest(this + " error " + exn+ "\n  {to:"+ to+ ","+ headers+ "}");  }  if (log.isLoggable(Level.FINER)) {    log.log(Level.FINER,exn.toString(),exn);  }  try {    JsonWriterImpl jOut=_jOut;    jOut.init();    jOut.writeStartArray();    jOut.write("error");    writeHeaders(jOut,headers);    jOut.write(to);    jOut.write(qid);    ErrorAmp error=ErrorAmp.create(exn);    jOut.writeStartObject();    jOut.writeKey("code");    jOut.writeString(error.getCode().toString());    jOut.writeKey("message");    jOut.writeString(exn.getMessage());    jOut.writeKey("class");    jOut.writeString(exn.getClass().getName());    jOut.writeEndObject();    jOut.writeEndArray();    jOut.close();  } catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);    throw e;  }}  }
class C{  public List<Versioned<V>> remove(K key){  while (true) {    List<Versioned<V>> items=map.get(key);synchronized (items) {      if (map.remove(key,items))       return items;    }  }}  }
class C{  protected boolean checkRelation(String relationName){  List<String> relations=dictionary.getRelationships(obj);  String realName=dictionary.getNameFromAlias(obj,relationName);  relationName=(realName == null) ? relationName : realName;  if (relationName == null || relations == null || !relations.contains(relationName)) {    throw new InvalidAttributeException(relationName,type);  }  checkFieldAwareDeferPermissions(ReadPermission.class,relationName,null,null);  final PermissionExecutor executor=requestScope.getPermissionExecutor();  try {    executor.checkUserPermissions(dictionary.getParameterizedType(obj,relationName),ReadPermission.class);  } catch (  ForbiddenAccessException e) {    return false;  }  return true;}  }
class C{  public static Polygon2D fromBaseEdge(Vec2D baseA,Vec2D baseB,int res){  float theta=-(MathUtils.PI - (MathUtils.PI * (res - 2) / res));  Vec2D dir=baseB.sub(baseA);  Vec2D prev=baseB;  Polygon2D poly=new Polygon2D(baseA,baseB);  for (int i=1; i < res - 1; i++) {    Vec2D p=prev.add(dir.getRotated(theta * i));    poly.add(p);    prev=p;  }  return poly;}  }
class C{  public static void createSimple() throws Exception {  MemoryStore memoryStore=new MemoryStore();  LuceneSail lucenesail=new LuceneSail();  lucenesail.setParameter(LuceneSail.INDEX_CLASS_KEY,SolrIndex.class.getName());  lucenesail.setParameter(SolrIndex.SERVER_KEY,"embedded:");  lucenesail.setBaseSail(memoryStore);  SailRepository repository=new SailRepository(lucenesail);  repository.initialize();  SailRepositoryConnection connection=repository.getConnection();  try {    connection.begin();    connection.add(SolrSailExample.class.getResourceAsStream("/org/openrdf/sail/lucene/examples/foaf.rdfs"),"",RDFFormat.RDFXML);    connection.commit();    String queryString="PREFIX search:   <" + LuceneSailSchema.NAMESPACE + "> \n"+ "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n"+ "SELECT * WHERE { \n"+ "?subject search:matches ?match . \n"+ "?match search:query \"person\" ; \n"+ "       search:property ?property ; \n"+ "       search:score ?score ; \n"+ "       search:snippet ?snippet . \n"+ "?subject rdf:type ?type . \n"+ "} LIMIT 3 \n"+ "BINDINGS ?type { \n"+ " (<http://www.w3.org/2002/07/owl#Class>) \n"+ "}";    tupleQuery(queryString,connection);    queryString="PREFIX search: <" + LuceneSailSchema.NAMESPACE + "> \n"+ "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> \n"+ "SELECT * WHERE { \n"+ "?subject rdfs:domain ?domain . \n"+ "?subject search:matches ?match . \n"+ "?match search:query \"chat\" ; \n"+ "       search:score ?score . \n"+ "?domain search:matches ?match2 . \n"+ "?match2 search:query \"person\" ; \n"+ "        search:score ?score2 . \n"+ "} LIMIT 5";    tupleQuery(queryString,connection);    queryString="PREFIX search:   <" + LuceneSailSchema.NAMESPACE + "> \n"+ "SELECT * WHERE { \n"+ "{ SELECT * WHERE { \n"+ "  ?subject search:matches ?match . \n"+ "  ?match search:query \"person\" ; \n"+ "         search:property ?property ; \n"+ "         search:score ?score ; \n"+ "         search:snippet ?snippet . \n"+ "} } \n"+ "FILTER(CONTAINS(STR(?subject), \"Person\")) \n"+ "} \n"+ "";    tupleQuery(queryString,connection);    queryString="PREFIX search: <" + LuceneSailSchema.NAMESPACE + "> \n"+ "PREFIX foaf: <http://xmlns.com/foaf/0.1/> \n"+ "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> \n"+ "CONSTRUCT { ?x rdfs:domain foaf:Person } \n"+ "WHERE { \n"+ "?x rdfs:domain foaf:Person . \n"+ "?x search:matches ?match . \n"+ "?match search:query \"homepage\" ; \n"+ "       search:property ?property ; \n"+ "       search:score ?score ; \n"+ "       search:snippet ?snippet . \n"+ "} LIMIT 3 \n";    graphQuery(queryString,connection);  }  finally {    connection.close();    repository.shutDown();  }}  }
class C{  private CimListener createListener(){  CimListenerInfo listenerInfo=new CimListenerInfo();  listenerInfo.setHostIP(LISTENER_IP);  listenerInfo.setPort(LISTENER_PORT);  listenerInfo.setProtocol(LISTENER_PROTOCOL);  listenerInfo.setQueueSize(LISTENER_QUEUE_SIZE);  ArrayList<CimIndicationConsumer> consumers=new ArrayList<CimIndicationConsumer>();  CimListener listener=new CimListener(listenerInfo,new CimIndicationConsumerList(consumers));  return listener;}  }
class C{  public void testEmptyIndex() throws Exception {  Directory dir=newDirectory();  IndexWriter iw=new IndexWriter(dir,newIndexWriterConfig(null));  iw.addDocument(new Document());  DirectoryReader dr=DirectoryReader.open(iw);  LeafReader r=getOnlyLeafReader(dr);  assertNotNull(DocValues.getBinary(r,"bogus"));  assertNotNull(DocValues.getNumeric(r,"bogus"));  assertNotNull(DocValues.getSorted(r,"bogus"));  assertNotNull(DocValues.getSortedSet(r,"bogus"));  assertNotNull(DocValues.getSortedNumeric(r,"bogus"));  dr.close();  iw.close();  dir.close();}  }
class C{  public ArrayList detachAll(){  ArrayList old=portrayals;  popup.removeAll();  createConsoleMenu();  portrayals=new ArrayList();  return old;}  }
class C{  public Response createSamlLoginResponse(String inResponseTo,String where,String status,String substatus,String message,Document token) throws UnmarshallingException {  log.info("Creating SAML Response in response to:" + inResponseTo + ", destination:"+ where+ ", issuer:"+ getIssuer());  log.info("Creating SAML Response status:" + status + ", substatus: "+ substatus);  Validate.notNull(where,"destination is null");  if (status == null) {    status=SamlNames.SUCCESS;  }  Response response=create(Response.class,Response.DEFAULT_ELEMENT_NAME);  response.setID(generator.generateIdentifier());  if (inResponseTo != null) {    response.setInResponseTo(inResponseTo);  }  response.setVersion(SAMLVersion.VERSION_20);  DateTime now=new DateTime();  response.setIssueInstant(now);  response.setDestination(where);  response.setIssuer(spawnIssuer(getIssuer()));  Status samlStatus=spawnStatus(status,substatus,message);  response.setStatus(samlStatus);  if (token != null) {    Element root=token.getDocumentElement();    UnmarshallerFactory unmarshallerFactory=Configuration.getUnmarshallerFactory();    Unmarshaller unmarshaller=unmarshallerFactory.getUnmarshaller(root);    Assertion assertion=(Assertion)unmarshaller.unmarshall(root);    response.getAssertions().add(assertion);  }  return response;}  }
class C{  public void clean(){  for (Iterator<Builder> i=getBuildOrder(); i.hasNext(); ) {    Builder builder=i.next();    if (builder != null) {      builder.clean();    }  }}  }
class C{  protected void enforceNotSealed(){  if (isSealed()) {    throw new IllegalStateException("Cannot perform this " + "action on a sealed instance.");  }}  }
class C{  public void publish(String channel,RealTimeMessage message){  Map<String,Object> paramsToSend=prepareData(channel,message);  publish(paramsToSend);}  }
class C{  public static String stringFor(int m){switch (m) {case cudaBoundaryModeZero:    return "cudaBoundaryModeZero";case cudaBoundaryModeClamp:  return "cudaBoundaryModeClamp";case cudaBoundaryModeTrap:return "cudaBoundaryModeTrap";}return "INVALID cudaSurfaceBoundaryMode: " + m;}  }
class C{  private void handleScreenStateChanged(boolean screenOn){  if (DBG)   log("handleScreenStateChanged: " + screenOn);  enableRssiPolling(screenOn);  if (mBackgroundScanSupported) {    enableBackgroundScanCommand(screenOn == false);  }  if (screenOn)   enableAllNetworks();  if (mUserWantsSuspendOpt.get()) {    if (screenOn) {      sendMessage(CMD_SET_SUSPEND_OPT_ENABLED,0,0);    } else {      mSuspendWakeLock.acquire(2000);      sendMessage(CMD_SET_SUSPEND_OPT_ENABLED,1,0);    }  }  mScreenBroadcastReceived.set(true);}  }
class C{  public TimeTableXYDataset(TimeZone zone,Locale locale){  ParamChecks.nullNotPermitted(zone,"zone");  ParamChecks.nullNotPermitted(locale,"locale");  this.values=new DefaultKeyedValues2D(true);  this.workingCalendar=Calendar.getInstance(zone,locale);  this.xPosition=TimePeriodAnchor.START;}  }
class C{  public boolean onGenericMotionEvent(MotionEvent ev){  if ((ev.getSource() & InputDevice.SOURCE_CLASS_POINTER) == InputDevice.SOURCE_CLASS_POINTER) {    int action=ev.getAction();switch (action & MotionEvent.ACTION_MASK) {case MotionEvent.ACTION_SCROLL:      float vScroll=ev.getAxisValue(MotionEvent.AXIS_VSCROLL);    if (vScroll > 0) {      if (mDeckView.ensureFocusedTask()) {        mDeckView.focusNextTask(true,false);      }    } else {      if (mDeckView.ensureFocusedTask()) {        mDeckView.focusNextTask(false,false);      }    }  return true;}}return false;}  }
class C{  public static void applyStyle(View v,AttributeSet attrs,int defStyleAttr,int defStyleRes){  TypedArray a=v.getContext().obtainStyledAttributes(attrs,R.styleable.View,defStyleAttr,defStyleRes);  int leftPadding=-1;  int topPadding=-1;  int rightPadding=-1;  int bottomPadding=-1;  int startPadding=Integer.MIN_VALUE;  int endPadding=Integer.MIN_VALUE;  int padding=-1;  boolean startPaddingDefined=false;  boolean endPaddingDefined=false;  boolean leftPaddingDefined=false;  boolean rightPaddingDefined=false;  for (int i=0, count=a.getIndexCount(); i < count; i++) {    int attr=a.getIndex(i);    if (attr == R.styleable.View_android_background) {      Drawable bg=a.getDrawable(attr);      ViewUtil.setBackground(v,bg);    } else     if (attr == R.styleable.View_android_backgroundTint) {      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)       v.setBackgroundTintList(a.getColorStateList(attr));    } else     if (attr == R.styleable.View_android_backgroundTintMode) {      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {        int value=a.getInt(attr,3);switch (value) {case 3:          v.setBackgroundTintMode(PorterDuff.Mode.SRC_OVER);        break;case 5:      v.setBackgroundTintMode(PorterDuff.Mode.SRC_IN);    break;case 9:  v.setBackgroundTintMode(PorterDuff.Mode.SRC_ATOP);break;case 14:v.setBackgroundTintMode(PorterDuff.Mode.MULTIPLY);break;case 15:v.setBackgroundTintMode(PorterDuff.Mode.SCREEN);break;case 16:v.setBackgroundTintMode(PorterDuff.Mode.ADD);break;}}} else if (attr == R.styleable.View_android_elevation) {if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) v.setElevation(a.getDimensionPixelOffset(attr,0));} else if (attr == R.styleable.View_android_padding) {padding=a.getDimensionPixelSize(attr,-1);leftPaddingDefined=true;rightPaddingDefined=true;} else if (attr == R.styleable.View_android_paddingLeft) {leftPadding=a.getDimensionPixelSize(attr,-1);leftPaddingDefined=true;} else if (attr == R.styleable.View_android_paddingTop) topPadding=a.getDimensionPixelSize(attr,-1); else if (attr == R.styleable.View_android_paddingRight) {rightPadding=a.getDimensionPixelSize(attr,-1);rightPaddingDefined=true;} else if (attr == R.styleable.View_android_paddingBottom) bottomPadding=a.getDimensionPixelSize(attr,-1); else if (attr == R.styleable.View_android_paddingStart) {if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {startPadding=a.getDimensionPixelSize(attr,Integer.MIN_VALUE);startPaddingDefined=(startPadding != Integer.MIN_VALUE);}} else if (attr == R.styleable.View_android_paddingEnd) {if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {endPadding=a.getDimensionPixelSize(attr,Integer.MIN_VALUE);endPaddingDefined=(endPadding != Integer.MIN_VALUE);}} else if (attr == R.styleable.View_android_fadeScrollbars) v.setScrollbarFadingEnabled(a.getBoolean(attr,true)); else if (attr == R.styleable.View_android_fadingEdgeLength) v.setFadingEdgeLength(a.getDimensionPixelOffset(attr,0)); else if (attr == R.styleable.View_android_minHeight) v.setMinimumHeight(a.getDimensionPixelSize(attr,0)); else if (attr == R.styleable.View_android_minWidth) v.setMinimumWidth(a.getDimensionPixelSize(attr,0)); else if (attr == R.styleable.View_android_requiresFadingEdge) v.setVerticalFadingEdgeEnabled(a.getBoolean(attr,true)); else if (attr == R.styleable.View_android_scrollbarDefaultDelayBeforeFade) {if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) v.setScrollBarDefaultDelayBeforeFade(a.getInteger(attr,0));} else if (attr == R.styleable.View_android_scrollbarFadeDuration) {if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) v.setScrollBarFadeDuration(a.getInteger(attr,0));} else if (attr == R.styleable.View_android_scrollbarSize) {if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) v.setScrollBarSize(a.getDimensionPixelSize(attr,0));} else if (attr == R.styleable.View_android_scrollbarStyle) {int value=a.getInteger(attr,0);switch (value) {case 0x0:v.setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);break;case 0x01000000:v.setScrollBarStyle(View.SCROLLBARS_INSIDE_INSET);break;case 0x02000000:v.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_OVERLAY);break;case 0x03000000:v.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_INSET);break;}} else if (attr == R.styleable.View_android_soundEffectsEnabled) v.setSoundEffectsEnabled(a.getBoolean(attr,true)); else if (attr == R.styleable.View_android_textAlignment) {if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {int value=a.getInteger(attr,0);switch (value) {case 0:v.setTextAlignment(View.TEXT_ALIGNMENT_INHERIT);break;case 1:v.setTextAlignment(View.TEXT_ALIGNMENT_GRAVITY);break;case 2:v.setTextAlignment(View.TEXT_ALIGNMENT_TEXT_START);break;case 3:v.setTextAlignment(View.TEXT_ALIGNMENT_TEXT_END);break;case 4:v.setTextAlignment(View.TEXT_ALIGNMENT_CENTER);break;case 5:v.setTextAlignment(View.TEXT_ALIGNMENT_VIEW_START);break;case 6:v.setTextAlignment(View.TEXT_ALIGNMENT_VIEW_END);break;}}} else if (attr == R.styleable.View_android_textDirection) {if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {int value=a.getInteger(attr,0);switch (value) {case 0:v.setTextDirection(View.TEXT_DIRECTION_INHERIT);break;case 1:v.setTextDirection(View.TEXT_DIRECTION_FIRST_STRONG);break;case 2:v.setTextDirection(View.TEXT_DIRECTION_ANY_RTL);break;case 3:v.setTextDirection(View.TEXT_DIRECTION_LTR);break;case 4:v.setTextDirection(View.TEXT_DIRECTION_RTL);break;case 5:v.setTextDirection(View.TEXT_DIRECTION_LOCALE);break;}}} else if (attr == R.styleable.View_android_visibility) {int value=a.getInteger(attr,0);switch (value) {case 0:v.setVisibility(View.VISIBLE);break;case 1:v.setVisibility(View.INVISIBLE);break;case 2:v.setVisibility(View.GONE);break;}} else if (attr == R.styleable.View_android_layoutDirection) {if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {int value=a.getInteger(attr,0);switch (value) {case 0:v.setLayoutDirection(View.LAYOUT_DIRECTION_LTR);break;case 1:v.setLayoutDirection(View.LAYOUT_DIRECTION_RTL);break;case 2:v.setLayoutDirection(View.LAYOUT_DIRECTION_INHERIT);break;case 3:v.setLayoutDirection(View.LAYOUT_DIRECTION_LOCALE);break;}}} else if (attr == R.styleable.View_android_src) {if (v instanceof ImageView) {int resId=a.getResourceId(attr,0);((ImageView)v).setImageResource(resId);}}}if (padding >= 0) v.setPadding(padding,padding,padding,padding); else if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {if (startPaddingDefined) leftPadding=startPadding;if (endPaddingDefined) rightPadding=endPadding;v.setPadding(leftPadding >= 0 ? leftPadding : v.getPaddingLeft(),topPadding >= 0 ? topPadding : v.getPaddingTop(),rightPadding >= 0 ? rightPadding : v.getPaddingRight(),bottomPadding >= 0 ? bottomPadding : v.getPaddingBottom());} else {if (leftPaddingDefined || rightPaddingDefined) v.setPadding(leftPaddingDefined ? leftPadding : v.getPaddingLeft(),topPadding >= 0 ? topPadding : v.getPaddingTop(),rightPaddingDefined ? rightPadding : v.getPaddingRight(),bottomPadding >= 0 ? bottomPadding : v.getPaddingBottom());if (startPaddingDefined || endPaddingDefined) v.setPaddingRelative(startPaddingDefined ? startPadding : v.getPaddingStart(),topPadding >= 0 ? topPadding : v.getPaddingTop(),endPaddingDefined ? endPadding : v.getPaddingEnd(),bottomPadding >= 0 ? bottomPadding : v.getPaddingBottom());}a.recycle();if (v instanceof TextView) applyStyle((TextView)v,attrs,defStyleAttr,defStyleRes);}  }
class C{  private ArrayList<Object> copyList(){  ArrayList<Object> newList=new ArrayList<>();  for (int i=0; i < list.size(); i++)   newList.add(list.get(i));  return newList;}  }
class C{  protected void migrateData(ReviewDb db,UpdateUI ui) throws OrmException, SQLException {}  }
class C{  public boolean isEquivalentTo(TypeBinding otherType){  if (this == otherType)   return true;  if (otherType == null)   return false;switch (otherType.kind()) {case Binding.WILDCARD_TYPE:case Binding.INTERSECTION_TYPE:    return ((WildcardBinding)otherType).boundCheck(this);case Binding.PARAMETERIZED_TYPE:  if ((otherType.tagBits & TagBits.HasDirectWildcard) == 0 && (!isMemberType() || !otherType.isMemberType()))   return false;ParameterizedTypeBinding otherParamType=(ParameterizedTypeBinding)otherType;if (this != otherParamType.genericType()) return false;if (!isStatic()) {ReferenceBinding enclosing=enclosingType();if (enclosing != null) {ReferenceBinding otherEnclosing=otherParamType.enclosingType();if (otherEnclosing == null) return false;if ((otherEnclosing.tagBits & TagBits.HasDirectWildcard) == 0) {  if (enclosing != otherEnclosing)   return false;} else {  if (!enclosing.isEquivalentTo(otherParamType.enclosingType()))   return false;}}}int length=this.typeVariables == null ? 0 : this.typeVariables.length;TypeBinding[] otherArguments=otherParamType.arguments;int otherLength=otherArguments == null ? 0 : otherArguments.length;if (otherLength != length) return false;for (int i=0; i < length; i++) if (!this.typeVariables[i].isTypeArgumentContainedBy(otherArguments[i])) return false;return true;case Binding.RAW_TYPE:return otherType.erasure() == this;}return false;}  }
class C{  void disablePercentages(){  percentages=null;}  }
class C{  @Override public boolean isUnderspecified(){  return true;}  }
class C{  protected static void succeed(){  System.exit(0);}  }
class C{  public static boolean isTablet(Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_LARGE;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private Point toLocalCoords(MouseEvent e){  Point global=e.getLocationOnScreen();  global.x-=x;  global.y-=y;  return global;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Builder(@NonNull final Context context,@StyleRes final int themeResourceId){  initialize(context,themeResourceId);}  }
class C{  public void testMoveRenameDirectorySourceMissingPartially() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,SUBSUBDIR,DIR_NEW,SUBDIR_NEW),null);  create(igfs,paths(DIR,DIR_NEW,SUBDIR_NEW),null);  igfs.rename(SUBSUBDIR,SUBSUBDIR_NEW);  checkExist(igfs,SUBDIR);  checkExist(igfs,igfsSecondary,SUBSUBDIR_NEW);  checkNotExist(igfs,igfsSecondary,SUBSUBDIR);}  }
class C{  public void reload(){  if (this.dictionaryPath == null || !this.dictionaryPath.exists()) {    return;  }  final String[] files=this.dictionaryPath.list();  for (  final String f : files) {    if (f.endsWith(".words")) {      try {        Dictionary dict=new Dictionary(new File(this.dictionaryPath,f));        this.dictionaries.put(f.substring(0,f.length() - 6),dict);      } catch (      final IOException e) {        log.warn(e);      }    }  }}  }
class C{  private void clearSessionTokenCookie(HttpServletRequest request,HttpServletResponse response) throws ServletException {  response.addCookie(newExpiredSessionTokenCookie(request));}  }
class C{  public DecimalStyle withNegativeSign(char negativeSign){  if (negativeSign == this.negativeSign) {    return this;  }  return new DecimalStyle(zeroDigit,positiveSign,negativeSign,decimalSeparator);}  }
class C{  public String value(int arrIndex) throws Exception {  int index=locateIndex(arrIndex);  if (index >= 0 && (m_indices.get(index) == arrIndex)) {    return m_values.get(index);  } else {    return "0";  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  ipAddress=getWifiIpAddress(this);  createCameraView();  main=new GearVRScriptingMain();  setMain(main,"gvr.xml");}  }
class C{  protected final void restoreState(){  likelihoodKnown=storedLikelihoodKnown;  logLikelihood=storedLogLikelihood;}  }
class C{  public Dimension preferredLayoutSize(Container parent){synchronized (parent.getTreeLock()) {    Insets insets=parent.getInsets();    int ncomponents=parent.getComponentCount();    int w=0;    int h=0;    for (int i=0; i < ncomponents; i++) {      Component comp=parent.getComponent(i);      Dimension d=comp.getPreferredSize();      if (d.width > w) {        w=d.width;      }      if (d.height > h) {        h=d.height;      }    }    return new Dimension(insets.left + insets.right + w+ hgap * 2,insets.top + insets.bottom + h+ vgap * 2);  }}  }
class C{  @Override protected void integrityCheckParameters(RdKNNNode parent,int index){  super.integrityCheckParameters(parent,index);  RdKNNEntry entry=parent.getEntry(index);  double knnDistance=kNNDistance();  if (entry.getKnnDistance() != knnDistance) {    double soll=knnDistance;    double ist=entry.getKnnDistance();    throw new RuntimeException("Wrong knnDistance in node " + parent.getPageID() + " at index "+ index+ " (child "+ entry+ ")"+ "\nsoll: "+ soll+ ",\n ist: "+ ist);  }}  }
class C{  private void renderAxes(Window window,Camera camera){  Window.WindowOptions opts=window.getWindowOptions();  if (opts.compatibleProfile) {    glPushMatrix();    glLoadIdentity();    float rotX=camera.getRotation().x;    float rotY=camera.getRotation().y;    float rotZ=0;    glRotatef(rotX,1.0f,0.0f,0.0f);    glRotatef(rotY,0.0f,1.0f,0.0f);    glRotatef(rotZ,0.0f,0.0f,1.0f);    glLineWidth(2.0f);    glBegin(GL_LINES);    glColor3f(1.0f,0.0f,0.0f);    glVertex3f(0.0f,0.0f,0.0f);    glVertex3f(1.0f,0.0f,0.0f);    glColor3f(0.0f,1.0f,0.0f);    glVertex3f(0.0f,0.0f,0.0f);    glVertex3f(0.0f,1.0f,0.0f);    glColor3f(1.0f,1.0f,1.0f);    glVertex3f(0.0f,0.0f,0.0f);    glVertex3f(0.0f,0.0f,1.0f);    glEnd();    glPopMatrix();  }}  }
class C{  private static int copy(InputStream in,OutputStream out) throws IOException {  try {    int byteCount=0;    byte[] buffer=new byte[4096];    int bytesRead;    while ((bytesRead=in.read(buffer)) != -1) {      out.write(buffer,0,bytesRead);      byteCount+=bytesRead;    }    out.flush();    return byteCount;  }  finally {    try {      in.close();    } catch (    IOException ex) {    }    try {      out.close();    } catch (    IOException ex) {    }  }}  }
class C{  public boolean isSection(String key){  Object value=this.get(key);  return value instanceof ConfigSection;}  }
class C{  public static TiltGameFragment newInstance(){  TiltGameFragment fragment=new TiltGameFragment();  return fragment;}  }
class C{  public ButtonView(){  this(null,null,null);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SMUSD");  translateAll(environment,instruction,"SMUSD",instructions);}  }
class C{  public boolean isReleased(){  return mReleased;}  }
class C{  public void remove(int index){  entries.remove(index);}  }
class C{  public static HttpResponse doPost(String host,String path,String method,Map<String,String> headers,Map<String,String> querys,Map<String,String> bodys) throws Exception {  HttpClient httpClient=wrapClient(host);  HttpPost request=new HttpPost(buildUrl(host,path,querys));  for (  Map.Entry<String,String> e : headers.entrySet()) {    request.addHeader(e.getKey(),e.getValue());  }  if (bodys != null) {    List<NameValuePair> nameValuePairList=new ArrayList<NameValuePair>();    for (    String key : bodys.keySet()) {      nameValuePairList.add(new BasicNameValuePair(key,bodys.get(key)));    }    UrlEncodedFormEntity formEntity=new UrlEncodedFormEntity(nameValuePairList,"utf-8");    formEntity.setContentType("application/x-www-form-urlencoded; charset=UTF-8");    request.setEntity(formEntity);  }  return httpClient.execute(request);}  }
class C{  @Override public PilotingRollData addEntityBonuses(PilotingRollData roll){  int[] locsToCheck=new int[3];  locsToCheck[0]=Mech.LOC_RLEG;  locsToCheck[1]=Mech.LOC_LLEG;  locsToCheck[2]=Mech.LOC_CLEG;  if (hasFunctionalLegAES()) {    roll.addModifier(-2,"AES bonus");  }  if (countBadLegs() == 0) {    roll.addModifier(-1,"tripod bonus");  }  for (int i=0; i < locsToCheck.length; i++) {    int loc=locsToCheck[i];    if (isLocationBad(loc)) {      roll.addModifier(5,getLocationName(loc) + " destroyed");    } else {      if (getBadCriticals(CriticalSlot.TYPE_SYSTEM,Mech.ACTUATOR_HIP,loc) > 0) {        roll.addModifier(2,getLocationName(loc) + " Hip Actuator destroyed");        if (!game.getOptions().booleanOption("tacops_leg_damage")) {          continue;        }      }      if (getBadCriticals(CriticalSlot.TYPE_SYSTEM,Mech.ACTUATOR_UPPER_LEG,loc) > 0) {        roll.addModifier(1,getLocationName(loc) + " Upper Leg Actuator destroyed");      }      if (getBadCriticals(CriticalSlot.TYPE_SYSTEM,Mech.ACTUATOR_LOWER_LEG,loc) > 0) {        roll.addModifier(1,getLocationName(loc) + " Lower Leg Actuator destroyed");      }      if (getBadCriticals(CriticalSlot.TYPE_SYSTEM,Mech.ACTUATOR_FOOT,loc) > 0) {        roll.addModifier(1,getLocationName(loc) + " Foot Actuator destroyed");      }    }  }  return super.addEntityBonuses(roll);}  }
class C{  public boolean matches(final String houseId,final int number){  final String[] info=getInfoString().split(";");  int keyNumber=Integer.parseInt(info[1]);  return (info[0].equals(houseId) && keyNumber == number);}  }
class C{  public void removeExpiredCookie(){  throw new MustOverrideException();}  }
class C{  private void computeImplicitBackwardDependencesDef(Register r,DepGraphNode destNode){  setDepGraphNodeForRegister(destNode,r);}  }
class C{  public boolean hasInitialResponse(){  return false;}  }
class C{  public Object put(final Object key,final Object value){  if ((value instanceof List) && (value == null)) {    throw new IllegalArgumentException("Null and List type Objects cannot be added to MOVMap");  }  Object oldValue=null;  List valueList=null;  if ((oldValue=get(key)) != null) {    if (oldValue instanceof List) {      log("Value is already a list");      ((List)oldValue).add(value);      super.put(key,oldValue);    } else {      log("Adding value which is not a list, so creating list");      valueList=new ArrayList();      valueList.add(oldValue);      valueList.add(value);      super.put(key,valueList);    }  } else {    log("Adding value for the first time, so its NOT list");    super.put(key,value);  }  return value;}  }
class C{  public long env_end(){  return Long.parseLong(fields[50]);}  }
class C{  private void handleHtmlSearchSources(PageWrapper pageWrapper,RequestAndResponse requestAndResponse,String query,String paneId) throws IOException, ServletException {  pageWrapper.addPageIntroText(servletText.introTextSearchSources(false),servletText.introTextSearchSources(true));  try {    final StringBuilder result=new StringBuilder();    User queryUser=null;    if (null != (queryUser=canUserSeeUsersData(requestAndResponse,true))) {      final ArrayList<EntryInfo> entryInfoList=new ArrayList<EntryInfo>();      if (query.startsWith("http://") || query.startsWith("https://")) {        final Entry entry=dbLogic.getEntryByUserIdAndUrl(queryUser.getId(),query);        if (entry == null) {          servletText.sentenceThereWereNoMatches();        } else {          startItemList(result,paneId);          addSourceHtml(entry,result,SourceEmbedContext.InSources,null,1,paneId);          addEntryToInfoList(entry,entryInfoList);          finishItemList(result);        }      } else {        final ResultsPaginator paginator=new ResultsPaginator(requestAndResponse,servletText.sentenceThereWereNoMatches(),result,servletText);        try {          final List<?> results=dbLogic.searchEntriesForUserBySourceTitle(queryUser.getId(),query,paginator.getStartPosition(),paginator.getMaxResults());          startItemList(result,paneId);          for (          final Object entryUncasted : results) {            final Entry entry=(Entry)entryUncasted;            final int resultNumber=paginator.next();            if (resultNumber == -1) {              continue;            } else             if (resultNumber == 0) {              break;            }            addSourceHtml(entry,result,SourceEmbedContext.InSources,null,resultNumber,paneId);            addEntryToInfoList(entry,entryInfoList);          }          finishItemList(result);          paginator.done();        } catch (        EmptyQueryException e) {          requestAndResponse.print(servletText.errorNeedLongerQuery());        }      }      result.append("\n<script type=\"application/json\" class=\"entryInfoDictJson\">\n");      addJsonForEntryInfos(result,entryInfoList,paneId);      result.append("\n</script>\n");    }    dbLogic.commit();    requestAndResponse.print(result.toString());  } catch (  final PersistenceException e) {    requestAndResponse.print(servletText.errorInternalDatabase());  }}  }
class C{  protected Object createJvmCompilationMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  if (server != null)   return new JvmCompilationImpl(this,server); else   return new JvmCompilationImpl(this);}  }
class C{  public <T extends PO>List<T> list() throws DBException {  return list(null);}  }
class C{  public byte[] saveWav(byte[] pcmdata,int srate,int channel,int format){  byte[] header=new byte[44];  byte[] data=pcmdata;  long totalDataLen=data.length + 36;  long bitrate=srate * channel * format;  header[0]='R';  header[1]='I';  header[2]='F';  header[3]='F';  header[4]=(byte)(totalDataLen & 0xff);  header[5]=(byte)((totalDataLen >> 8) & 0xff);  header[6]=(byte)((totalDataLen >> 16) & 0xff);  header[7]=(byte)((totalDataLen >> 24) & 0xff);  header[8]='W';  header[9]='A';  header[10]='V';  header[11]='E';  header[12]='f';  header[13]='m';  header[14]='t';  header[15]=' ';  header[16]=(byte)format;  header[17]=0;  header[18]=0;  header[19]=0;  header[20]=1;  header[21]=0;  header[22]=(byte)channel;  header[23]=0;  header[24]=(byte)(srate & 0xff);  header[25]=(byte)((srate >> 8) & 0xff);  header[26]=(byte)((srate >> 16) & 0xff);  header[27]=(byte)((srate >> 24) & 0xff);  header[28]=(byte)((bitrate / 8) & 0xff);  header[29]=(byte)(((bitrate / 8) >> 8) & 0xff);  header[30]=(byte)(((bitrate / 8) >> 16) & 0xff);  header[31]=(byte)(((bitrate / 8) >> 24) & 0xff);  header[32]=(byte)((channel * format) / 8);  header[33]=0;  header[34]=16;  header[35]=0;  header[36]='d';  header[37]='a';  header[38]='t';  header[39]='a';  header[40]=(byte)(data.length & 0xff);  header[41]=(byte)((data.length >> 8) & 0xff);  header[42]=(byte)((data.length >> 16) & 0xff);  header[43]=(byte)((data.length >> 24) & 0xff);  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();  try {    outputStream.write(header);    outputStream.write(data);  } catch (  IOException e) {    Log.e(TAG,"Error writing data to wav buffer");    e.printStackTrace();  }  return outputStream.toByteArray();}  }
class C{  public List resolveConcreteDispatch(List classes,SootMethod m){  m.getDeclaringClass().checkLevel(SootClass.HIERARCHY);  checkState();  ArraySet s=new ArraySet();  Iterator classesIt=classes.iterator();  while (classesIt.hasNext()) {    Object cls=classesIt.next();    if (cls instanceof RefType)     s.add(resolveConcreteDispatch(((RefType)cls).getSootClass(),m)); else     if (cls instanceof ArrayType) {      s.add(resolveConcreteDispatch((RefType.v("java.lang.Object")).getSootClass(),m));    } else     throw new RuntimeException("Unable to resolve concrete dispatch of type " + cls);  }  List l=new ArrayList();  l.addAll(s);  return Collections.unmodifiableList(l);}  }
class C{  public static int readU16bit(byte[] code,int index){  return ((code[index] & 0xff) << 8) | (code[index + 1] & 0xff);}  }
class C{  protected boolean convertToUppercase(){  return false;}  }
class C{  private void showPopupMenu(final MouseEvent event){  final IconNode selectedNode=(IconNode)TreeHelpers.getNodeAt(referencesTable,event.getX(),event.getY());  if (selectedNode != null) {    final JPopupMenu menu=createPopupMenu(selectedNode);    if (menu != null) {      menu.show(referencesTable,event.getX(),event.getY());    }  }}  }
class C{  synchronized boolean pump(){  long currMillis;  long targetTick=lastTick;  MidiEvent currEvent;  boolean changesPending=false;  boolean doLoop=false;  boolean EOM=false;  currMillis=getCurrentTimeMillis();  int finishedTracks=0;  do {    changesPending=false;    if (needReindex) {      if (DEBUG_PUMP)       Printer.println("Need to re-index at " + currMillis + " millis. TargetTick="+ targetTick);      if (trackReadPos.length < tracks.length) {        trackReadPos=new int[tracks.length];      }      for (int t=0; t < tracks.length; t++) {        ReindexTrack(t,targetTick);        if (DEBUG_PUMP_ALL)         Printer.println("  Setting trackReadPos[" + t + "]="+ trackReadPos[t]);      }      needReindex=false;      checkPointMillis=0;    }    if (checkPointMillis == 0) {      currMillis=getCurrentTimeMillis();      checkPointMillis=currMillis;      targetTick=lastTick;      checkPointTick=targetTick;      if (DEBUG_PUMP)       Printer.println("New checkpoint to " + currMillis + " millis. "+ "TargetTick="+ targetTick+ " new tempo="+ MidiUtils.convertTempo(currTempo)+ "bpm");    } else {      targetTick=checkPointTick + millis2tick(currMillis - checkPointMillis);      if (DEBUG_PUMP_ALL)       Printer.println("targetTick = " + targetTick + " at "+ currMillis+ " millis");      if ((loopEnd != -1) && ((loopCount > 0 && currLoopCounter > 0) || (loopCount == LOOP_CONTINUOUSLY))) {        if (lastTick <= loopEnd && targetTick >= loopEnd) {          targetTick=loopEnd - 1;          doLoop=true;          if (DEBUG_PUMP)           Printer.println("set doLoop to true. lastTick=" + lastTick + "  targetTick="+ targetTick+ "  loopEnd="+ loopEnd+ "  jumping to loopStart="+ loopStart+ "  new currLoopCounter="+ currLoopCounter);          if (DEBUG_PUMP)           Printer.println("  currMillis=" + currMillis + "  checkPointMillis="+ checkPointMillis+ "  checkPointTick="+ checkPointTick);        }      }      lastTick=targetTick;    }    finishedTracks=0;    for (int t=0; t < tracks.length; t++) {      try {        boolean disabled=trackDisabled[t];        Track thisTrack=tracks[t];        int readPos=trackReadPos[t];        int size=thisTrack.size();        while (!changesPending && (readPos < size) && (currEvent=thisTrack.get(readPos)).getTick() <= targetTick) {          if ((readPos == size - 1) && MidiUtils.isMetaEndOfTrack(currEvent.getMessage())) {            readPos=size;            break;          }          readPos++;          if (!disabled || ((t == 0) && (MidiUtils.isMetaTempo(currEvent.getMessage())))) {            changesPending=dispatchMessage(t,currEvent);          }        }        if (readPos >= size) {          finishedTracks++;        }        if (DEBUG_PUMP_ALL) {          System.out.print(" pumped track " + t + " ("+ size+ " events) "+ " from index: "+ trackReadPos[t]+ " to "+ (readPos - 1));          System.out.print(" -> ticks: ");          if (trackReadPos[t] < size) {            System.out.print("" + (thisTrack.get(trackReadPos[t]).getTick()));          } else {            System.out.print("EOT");          }          System.out.print(" to ");          if (readPos < size) {            System.out.print("" + (thisTrack.get(readPos - 1).getTick()));          } else {            System.out.print("EOT");          }          System.out.println();        }        trackReadPos[t]=readPos;      } catch (      Exception e) {        if (Printer.debug)         Printer.debug("Exception in Sequencer pump!");        if (Printer.debug)         e.printStackTrace();        if (e instanceof ArrayIndexOutOfBoundsException) {          needReindex=true;          changesPending=true;        }      }      if (changesPending) {        break;      }    }    EOM=(finishedTracks == tracks.length);    if (doLoop || (((loopCount > 0 && currLoopCounter > 0) || (loopCount == LOOP_CONTINUOUSLY)) && !changesPending && (loopEnd == -1)&& EOM)) {      long oldCheckPointMillis=checkPointMillis;      long loopEndTick=loopEnd;      if (loopEndTick == -1) {        loopEndTick=lastTick;      }      if (loopCount != LOOP_CONTINUOUSLY) {        currLoopCounter--;      }      if (DEBUG_PUMP)       Printer.println("Execute loop: lastTick=" + lastTick + "  loopEnd="+ loopEnd+ "  jumping to loopStart="+ loopStart+ "  new currLoopCounter="+ currLoopCounter);      setTickPos(loopStart);      checkPointMillis=oldCheckPointMillis + tick2millis(loopEndTick - checkPointTick);      checkPointTick=loopStart;      if (DEBUG_PUMP)       Printer.println("  Setting currMillis=" + currMillis + "  new checkPointMillis="+ checkPointMillis+ "  new checkPointTick="+ checkPointTick);      needReindex=false;      changesPending=false;      doLoop=false;      EOM=false;    }  } while (changesPending);  return EOM;}  }
class C{  public Hour(){  this(new Date());}  }
class C{  private ThrowAwayContentWrapper(){}  }
class C{  @DSSink({DSSinkKind.SMS_MMS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:03.540 -0500",hash_original_method="0C99D40A04CE0C54D0586AC5BB676809",hash_generated_method="FABA5607187BC6A04AE4466752028609") public static boolean moveMessageToFolder(Context context,Uri uri,int folder,int error){  if (uri == null) {    return false;  }  boolean markAsUnread=false;  boolean markAsRead=false;switch (folder) {case MESSAGE_TYPE_INBOX:case MESSAGE_TYPE_DRAFT:    break;case MESSAGE_TYPE_OUTBOX:case MESSAGE_TYPE_SENT:  markAsRead=true;break;case MESSAGE_TYPE_FAILED:case MESSAGE_TYPE_QUEUED:markAsUnread=true;break;default :return false;}ContentValues values=new ContentValues(3);values.put(TYPE,folder);if (markAsUnread) {values.put(READ,Integer.valueOf(0));} else if (markAsRead) {values.put(READ,Integer.valueOf(1));}values.put(ERROR_CODE,error);return 1 == SqliteWrapper.update(context,context.getContentResolver(),uri,values,null,null);}  }
class C{  public UpdateConstraintException(String message){  super(message);}  }
class C{  public void undo(){  undo(true);}  }
class C{  public void invalidate(){  if (transitionLength <= 0f) {    currentColor.set(targetColor);    redNeedsUpdate=greenNeedsUpdate=blueNeedsUpdate=alphaNeedsUpdate=false;    transitionInProgress=false;  } else {    redNeedsUpdate=initialColor.r != targetColor.r;    greenNeedsUpdate=initialColor.g != targetColor.g;    blueNeedsUpdate=initialColor.b != targetColor.b;    alphaNeedsUpdate=initialColor.a != targetColor.a;    updateTransitionStatus();    if (transitionInProgress) {      initialRedIsGreater=initialColor.r >= targetColor.r;      initialGreenIsGreater=initialColor.g >= targetColor.g;      initialBlueIsGreater=initialColor.b >= targetColor.b;      initialAlphaIsGreater=initialColor.a >= targetColor.a;    }  }}  }
class C{  public void testDollarVariable() throws Exception {  Expression expr=JavascriptCompiler.compile("$0+$score");  SimpleBindings bindings=new SimpleBindings();  bindings.add(new SortField("$0",SortField.Type.SCORE));  bindings.add(new SortField("$score",SortField.Type.SCORE));  Sort sort=new Sort(expr.getSortField(bindings,true));  Query query=new TermQuery(new Term("body","contents"));  TopFieldDocs td=searcher.search(query,3,sort,true,true);  for (int i=0; i < 3; i++) {    FieldDoc d=(FieldDoc)td.scoreDocs[i];    float expected=2 * d.score;    float actual=((Double)d.fields[0]).floatValue();    assertEquals(expected,actual,CheckHits.explainToleranceDelta(expected,actual));  }}  }
class C{  public Option<FileHolder> findRootProjectHolder(){  Filer filer=processingEnv.getFiler();  FileObject dummySourceFile;  try {    dummySourceFile=filer.createResource(StandardLocation.SOURCE_OUTPUT,"com","dummy" + System.currentTimeMillis());  } catch (  IOException ignored) {    return Option.absent();  }  String dummySourceFilePath=dummySourceFile.toUri().toString();  if (dummySourceFilePath.startsWith("file:")) {    if (!dummySourceFilePath.startsWith("file://")) {      dummySourceFilePath="file://" + dummySourceFilePath.substring("file:".length());    }  } else {    dummySourceFilePath="file://" + dummySourceFilePath;  }  URI cleanURI;  try {    cleanURI=new URI(dummySourceFilePath);  } catch (  URISyntaxException e) {    return Option.absent();  }  try {    File dummyFile=new File(cleanURI);    File sourcesGenerationFolder=dummyFile.getParentFile();    File projectRoot=sourcesGenerationFolder.getParentFile();    return Option.of(new FileHolder(dummySourceFilePath,sourcesGenerationFolder,projectRoot));  } catch (  IllegalArgumentException ex) {    return Option.absent();  }}  }
class C{  public Duration toDurationTo(ReadableInstant endInstant){  long endMillis=DateTimeUtils.getInstantMillis(endInstant);  Chronology chrono=DateTimeUtils.getInstantChronology(endInstant);  long startMillis=chrono.add(this,endMillis,-1);  return new Duration(startMillis,endMillis);}  }
class C{  @Override public String toString(){  String result="LearningRateResultProducer: ";  result+=getCompatibilityState();  if (m_Instances == null) {    result+=": <null Instances>";  } else {    result+=": " + Utils.backQuoteChars(m_Instances.relationName());  }  return result;}  }
class C{  public static BaseComponent fromLegacyText(String message){  TextComponent base=new TextComponent("");  StringBuilder builder=new StringBuilder();  TextComponent component=new TextComponent();  Matcher matcher=url.matcher(message);  for (int i=0; i < message.length(); i++) {    char c=message.charAt(i);    if (c == ChatColor.COLOR_CHAR) {      i++;      c=message.charAt(i);      if ((c >= 'A') && (c <= 'Z')) {        c+=32;      }      ChatColor format=ChatColor.getByChar(c);      if (format == null) {        continue;      }      if (builder.length() > 0) {        TextComponent old=component;        component=new TextComponent(old);        old.setText(builder.toString());        builder=new StringBuilder();        base.addExtra(old);      }switch (format) {case BOLD:        component.setBold(true);      break;case ITALIC:    component.setItalic(true);  break;case UNDERLINE:component.setUnderlined(true);break;case STRIKETHROUGH:component.setStrikethrough(true);break;case MAGIC:component.setObfuscated(true);break;case RESET:format=ChatColor.WHITE;default :component=new TextComponent();component.setColor(format);break;}continue;}int pos=message.indexOf(' ',i);if (pos == -1) {pos=message.length();}if (matcher.region(i,pos).find()) {if (builder.length() > 0) {TextComponent old=component;component=new TextComponent(old);old.setText(builder.toString());builder=new StringBuilder();base.addExtra(old);}TextComponent old=component;component=new TextComponent(old);String urlString=message.substring(i,pos);component.setText(urlString);component.setClickEvent(new ClickEvent(ClickEvent.Action.OPEN_URL,urlString.startsWith("http") ? urlString : ("http://" + urlString)));base.addExtra(component);i+=pos - i - 1;component=old;continue;}builder.append(c);}if (builder.length() > 0) {component.setText(builder.toString());base.addExtra(component);}return base;}  }
class C{  public synchronized void close(){  Set<SolrConnector> connectors=new HashSet<SolrConnector>();  connectors.addAll(this.mirrorConnectorCache.values());  for (  SolrConnector connector : connectors)   connector.close();  this.mirrorConnectorCache.clear();  disconnectEmbedded();}  }
class C{  @Override public String toString(){  return "L" + System.identityHashCode(this);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case StextPackage.EVENT_RAISING_EXPRESSION__EVENT:    return event != null;case StextPackage.EVENT_RAISING_EXPRESSION__VALUE:  return value != null;}return super.eIsSet(featureID);}  }
class C{  private void killConsist(int address,boolean isLong){  if (isLong) {    address+=0xC000;  }  sendNceBinaryCommand(address,NceBinaryCommand.LOCO_CMD_KILL_CONSIST,(byte)0);}  }
class C{  public static String toJSONString(Object value){  final StringWriter writer=new StringWriter();  try {    writeJSONString(value,writer);    return writer.toString();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public Row next(){  Row r=list.get(index++);  return r;}  }
class C{  public static int resolveMember(MemberReference ref) throws NoClassDefFoundError {  RVMMember resolvedMember=ref.resolveMember();  RVMClass declaringClass=resolvedMember.getDeclaringClass();  RuntimeEntrypoints.initializeClassForDynamicLink(declaringClass);  int offset=resolvedMember.getOffset().toInt();  if (VM.VerifyAssertions)   VM._assert(offset != NEEDS_DYNAMIC_LINK);  memberOffsets[ref.getId()]=offset;  return offset;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.PROPERTY__CONST:    return isConst();case TypesPackage.PROPERTY__READONLY:  return isReadonly();case TypesPackage.PROPERTY__EXTERNAL:return isExternal();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private boolean isOvershooting(){  return mSpringTension > 0 && ((mStartValue < mEndValue && mCurrentState.position > mEndValue) || (mStartValue > mEndValue && mCurrentState.position < mEndValue));}  }
class C{  public static String readFileAsString(String absolutePath) throws IOException {  return new FileReader(absolutePath).readFully().toString(StandardCharsets.UTF_8);}  }
class C{  public boolean isArmed(){  return this.armed;}  }
class C{  public String convertProjectTypeToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  @LayoutlibDelegate static float sqrt(float value){  return (float)Math.sqrt(value);}  }
class C{  public static long ipToLong(Inet4Address ip){  byte[] octets=ip.getAddress();  long result=0;  for (  byte octet : octets) {    result<<=8;    result|=octet & 0xff;  }  return result;}  }
class C{  public void buildRule(Instances data) throws Exception {  buildDecList(data,false);  cleanup(new Instances(data,0));}  }
class C{  public void delete() throws SabresException {  final Sabres sabres=Sabres.self();  sabres.open();  try {    deleteInTransaction(sabres);  }  finally {    sabres.close();  }}  }
class C{  public TriangleMesh transform(Matrix4x4 mat){  return transform(mat,true);}  }
class C{  public boolean isSetModuleCode(){  return this.moduleCode != null;}  }
class C{  public void checkMetaDataVersion(){  for (Iterator<MetaDataVersionListener> it=this.metaDataVersionListeners.iterator(); it.hasNext(); ) {    MetaDataVersionListener listener=it.next();    boolean versionReached=true;    for (    InetAddress addr : Gossiper.instance.getLiveTokenOwners()) {      if (DatabaseDescriptor.getEndpointSnitch().getDatacenter(addr).equals(localDc)) {        EndpointState endPointState=Gossiper.instance.getEndpointStateForEndpoint(addr);        VersionedValue vv=endPointState.getApplicationState(ELASTIC_META_DATA);        if (vv != null && vv.value.lastIndexOf('/') > 0) {          Long version=Long.valueOf(vv.value.substring(vv.value.lastIndexOf('/') + 1));          if (version < listener.version()) {            versionReached=false;            break;          }        }      }    }    if (versionReached) {      logger.debug("MetaData.version = {} reached",listener.version());      listener.release();      metaDataVersionListeners.remove(listener);    }  }}  }
class C{  public static DateTimeFormatter dateHourMinuteSecondMillis(){  return Constants.dhmsl;}  }
class C{  private void placeOptimalJammers(String csvFile){  BufferedReader br=null;  String line="";  String cvsSplitBy=",";  try {    br=new BufferedReader(new FileReader(csvFile));    int numJammers=0;    while ((line=br.readLine()) != null && numJammers < NUMBER_OF_STATIC_JAMMERS) {      double lat, lon;      String[] coords=line.split(cvsSplitBy);      lat=Double.parseDouble(coords[0]);      lon=Double.parseDouble(coords[1]);      System.err.println("Coordinates are " + lat + " , "+ lon);      jammerLocations.add(new Double2D(lat,lon));      numJammers+=1;    }    if (numJammers < NUMBER_OF_STATIC_JAMMERS) {      System.err.println("Did not have enough optimal locations for all the jammers. Could only add " + numJammers + " jammers.");    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  } finally {    if (br != null) {      try {        br.close();      } catch (      IOException e) {        e.printStackTrace();      }    }  }}  }
class C{  public ModelAndView flushFormRegister(HttpServletRequest request,HttpServletResponse response,HttpSession session){  addInteresado(request,session);  return flush(request,response,session);}  }
class C{  public boolean isKnown(){  return index != -1;}  }
class C{  public E firstElement(){  return delegate.firstElement();}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  static String removeRemarks(String s){  char[] chars=s.toCharArray();  for (int i=0; i >= 0 && i < s.length(); i++) {    if (s.charAt(i) == '\'') {      i++;      while (true) {        if (s.charAt(i) == '\\') {          i++;        } else         if (s.charAt(i) == '\'') {          break;        }        i++;      }      continue;    } else     if (s.charAt(i) == '\"') {      i++;      while (true) {        if (s.charAt(i) == '\\') {          i++;        } else         if (s.charAt(i) == '\"') {          break;        }        i++;      }      continue;    }    String sub=s.substring(i);    if (sub.startsWith("/*") && !sub.startsWith("/* c:")) {      int j=i;      i=s.indexOf("*/",i + 2) + 2;      for (; j < i; j++) {        if (chars[j] > ' ') {          chars[j]=' ';        }      }    } else     if (sub.startsWith("//") && !sub.startsWith("// c:")) {      int j=i;      i=s.indexOf('\n',i);      while (j < i) {        chars[j++]=' ';      }    }  }  return new String(chars) + "  ";}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (obj instanceof IfdData) {    IfdData data=(IfdData)obj;    if (data.getId() == mIfdId && data.getTagCount() == getTagCount()) {      ExifTag[] tags=data.getAllTags();      for (      ExifTag tag : tags) {        if (ExifInterface.isOffsetTag(tag.getTagId())) {          continue;        }        ExifTag tag2=mExifTags.get(tag.getTagId());        if (!tag.equals(tag2)) {          return false;        }      }      return true;    }  }  return false;}  }
class C{  public static double sampleSkew(DoubleArrayList data,double mean,double sampleVariance){  return sampleSkew(data.size(),moment(data,3,mean),sampleVariance);}  }
class C{  public ShowHelpAction(final String actionName,final String url){  super(actionName);  this.theURL=url;  putValue(SMALL_ICON,ResourceManager.getImageIcon("Help.png"));  putValue(SHORT_DESCRIPTION,"Show help via local web page");}  }
class C{  private void notifyEventListeners(final DebuggerReply event){  for (  final DebugEventListener listener : listeners) {    try {      listener.receivedEvent(event);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }  for (  final DebugEventListener listener : protocolListeners) {    try {      listener.receivedEvent(event);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public static boolean is8Bit(String str){  if (str == null || str.length() == 0)   return true;  char[] cc=str.toCharArray();  for (int i=0; i < cc.length; i++) {    if (cc[i] > 255) {      return false;    }  }  return true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributens03.class,args);}  }
class C{  public void rotateClockwise(){  rotate(90,true);}  }
class C{  @Override public String toString(){  MoreObjects.ToStringHelper s=MoreObjects.toStringHelper(this);  if (initialCapacity != UNSET_INT) {    s.add("initialCapacity",initialCapacity);  }  if (concurrencyLevel != UNSET_INT) {    s.add("concurrencyLevel",concurrencyLevel);  }  if (maximumSize != UNSET_INT) {    s.add("maximumSize",maximumSize);  }  if (maximumWeight != UNSET_INT) {    s.add("maximumWeight",maximumWeight);  }  if (expireAfterWriteNanos != UNSET_INT) {    s.add("expireAfterWrite",expireAfterWriteNanos + "ns");  }  if (expireAfterAccessNanos != UNSET_INT) {    s.add("expireAfterAccess",expireAfterAccessNanos + "ns");  }  if (keyStrength != null) {    s.add("keyStrength",Ascii.toLowerCase(keyStrength.toString()));  }  if (valueStrength != null) {    s.add("valueStrength",Ascii.toLowerCase(valueStrength.toString()));  }  if (keyEquivalence != null) {    s.addValue("keyEquivalence");  }  if (valueEquivalence != null) {    s.addValue("valueEquivalence");  }  if (removalListener != null) {    s.addValue("removalListener");  }  return s.toString();}  }
class C{  @SuppressFBWarnings("JLM_JSR166_UTILCONCURRENT_MONITORENTER") private Response make() throws IOException {synchronized (this.zipped) {    if (this.zipped.isEmpty()) {      this.zipped.add(new RsWithHeader(new RsWithBody(this.origin,RsGzip.gzip(this.origin.body())),"Content-Encoding","gzip"));    }  }  return this.zipped.get(0);}  }
class C{  public int doEndTag() throws JspException {  return EVAL_PAGE;}  }
class C{  public void paintProgressBarForeground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String outputData=null;  WhiteboxRaster DEMGrid=null;  String inputFilesString=null;  String suffix="no OTOs";  String[] gridFiles;  WhiteboxRaster output=null;  int row, col;  int progress=0;  double noData=0;  int rows, cols;  int a, b;  double z1, z2, w1;  double[][] subGridDEM;  int colOffset, rowOffset;  boolean flag;  double minEdgeSlope=0;  int loopNum=0;  int numCellsChanged=0;  int prevNumCellsChanged=0;  boolean[] activeTile=new boolean[1];  int[][] tileCorners=new int[2][1];  boolean didSomethingHappen=false;  int currentTile, numTiles=0;  long numValidCells=0;  double cumulativeChange=0;  boolean iterateRemoveOTOs=false;  try {    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    suffix=args[1];    OTOMaxSize=(int)(Math.round(Double.valueOf(args[2])));    int halfOTOMaxSize=OTOMaxSize / 2;    double[] data=new double[OTOMaxSize + 2];    minEdgeSlope=Double.valueOf(args[3]);    iterateRemoveOTOs=Boolean.parseBoolean(args[4]);    if (suffix.equals("")) {      suffix="no OTOs";    }    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    if (OTOMaxSize < 5) {      OTOMaxSize=5;    }    gridFiles=inputFilesString.split(";");    int numPointFiles=gridFiles.length;    for (int j=0; j < numPointFiles; j++) {      inputHeader=gridFiles[j];      outputHeader=gridFiles[j].replace(".dep"," " + suffix + ".dep");      outputData=outputHeader.replace(".dep",".tas");      String tempHeaderFile=inputHeader.replace(".dep","_temp.dep");      String tempDataFile=inputHeader.replace(".dep","_temp.tas");      FileUtilities.copyFile(new File(inputHeader),new File(tempHeaderFile));      FileUtilities.copyFile(new File(inputHeader.replace(".dep",".tas")),new File(tempDataFile));      do {        numValidCells=0;        loopNum++;        prevNumCellsChanged=numCellsChanged;        numCellsChanged=0;        DEMGrid=new WhiteboxRaster(tempHeaderFile,"rw");        rows=DEMGrid.getNumberRows();        cols=DEMGrid.getNumberColumns();        noData=DEMGrid.getNoDataValue();        double resolution=(DEMGrid.getCellSizeX() + DEMGrid.getCellSizeY()) / 2;        if (loopNum == 1) {          minOTOHeight=Math.tan(minEdgeSlope * Math.PI / 180) * resolution;          if (minOTOHeight < 0) {            minOTOHeight=0;          }        }        cumulativeChange=0;        updateProgress("DEM " + (j + 1) + " Loop number "+ loopNum+ ":",-1);        if (loopNum == 1) {          FileUtilities.copyFile(new File(tempHeaderFile),new File(outputHeader));          FileUtilities.copyFile(new File(tempDataFile),new File(outputData));          output=new WhiteboxRaster(outputHeader,"rw");          colOffset=0;          flag=true;          do {            data[0]=noData;            data[OTOMaxSize + 1]=noData;            a=0;            for (col=colOffset; col < colOffset + OTOMaxSize; col++) {              data[a + 1]=output.getValue(0,col);              if (data[a + 1] != noData) {                numValidCells++;              }              a++;            }            if (numValidCells > 2) {              cleavePeaks1D(data,noData);            }            a=0;            for (col=colOffset; col < colOffset + OTOMaxSize; col++) {              z1=output.getValue(0,col);              z2=data[a + 1];              if (z2 < z1) {                output.setValue(0,col,z2);              }              a++;            }            data[0]=noData;            data[OTOMaxSize + 1]=noData;            numValidCells=0;            a=0;            for (col=colOffset; col < colOffset + OTOMaxSize; col++) {              data[a + 1]=output.getValue(rows - 1,col);              if (data[a + 1] != noData) {                numValidCells++;              }              a++;            }            if (numValidCells > 2) {              cleavePeaks1D(data,noData);            }            a=0;            for (col=colOffset; col < colOffset + OTOMaxSize; col++) {              z1=output.getValue(rows - 1,col);              z2=data[a + 1];              if (z2 < z1) {                output.setValue(rows - 1,col,z2);              }              a++;            }            colOffset+=halfOTOMaxSize;            if (colOffset > cols - 1) {              flag=false;            }          } while (flag);          rowOffset=0;          flag=true;          do {            data[0]=noData;            data[OTOMaxSize + 1]=noData;            numValidCells=0;            a=0;            for (row=rowOffset; row < rowOffset + OTOMaxSize; row++) {              data[a + 1]=output.getValue(row,0);              if (data[a + 1] != noData) {                numValidCells++;              }              a++;            }            if (numValidCells > 2) {              cleavePeaks1D(data,noData);            }            a=0;            for (row=rowOffset; row < rowOffset + OTOMaxSize; row++) {              z1=output.getValue(row,0);              z2=data[a + 1];              if (z2 < z1) {                output.setValue(row,0,z2);              }              a++;            }            data[0]=noData;            data[OTOMaxSize + 1]=noData;            numValidCells=0;            a=0;            for (row=rowOffset; row < rowOffset + OTOMaxSize; row++) {              data[a + 1]=output.getValue(row,cols - 1);              if (data[a + 1] != noData) {                numValidCells++;              }              a++;            }            if (numValidCells > 2) {              cleavePeaks1D(data,noData);            }            a=0;            for (row=rowOffset; row < rowOffset + OTOMaxSize; row++) {              z1=output.getValue(row,cols - 1);              z2=data[a + 1];              if (z2 < z1) {                output.setValue(row,cols - 1,z2);              }              a++;            }            rowOffset+=halfOTOMaxSize;            if (rowOffset > rows - 1) {              flag=false;            }          } while (flag);          colOffset=-1;          rowOffset=-1;          flag=true;          numTiles=-1;          do {            numTiles++;            colOffset+=halfOTOMaxSize;            if (colOffset > cols - 1) {              colOffset=-1;              rowOffset+=halfOTOMaxSize;              if (rowOffset > rows - 1) {                flag=false;              }            }          } while (flag);          activeTile=new boolean[numTiles + 1];          tileCorners=new int[2][numTiles + 1];          colOffset=-1;          rowOffset=-1;          flag=true;          currentTile=-1;          do {            currentTile++;            activeTile[currentTile]=true;            tileCorners[0][currentTile]=colOffset;            tileCorners[1][currentTile]=rowOffset;            colOffset+=halfOTOMaxSize;            if (colOffset > cols - 1) {              colOffset=-1;              rowOffset+=halfOTOMaxSize;              if (rowOffset > rows - 1) {                flag=false;              }            }          } while (flag);        } else {          output=new WhiteboxRaster(outputHeader,"rw");        }        colOffset=-1;        rowOffset=-1;        flag=true;        currentTile=-1;        do {          currentTile++;          if (activeTile[currentTile]) {            subGridDEM=new double[OTOMaxSize + 2][OTOMaxSize + 2];            for (row=0; row < OTOMaxSize + 2; row++) {              subGridDEM[row][0]=noData;              subGridDEM[row][OTOMaxSize + 1]=noData;            }            for (col=0; col < OTOMaxSize + 2; col++) {              subGridDEM[0][col]=noData;              subGridDEM[OTOMaxSize + 1][col]=noData;            }            numValidCells=0;            a=0;            b=0;            for (row=rowOffset; row < rowOffset + OTOMaxSize; row++) {              for (col=colOffset; col < colOffset + OTOMaxSize; col++) {                subGridDEM[b + 1][a + 1]=DEMGrid.getValue(row,col);                if (subGridDEM[b + 1][a + 1] != noData) {                  numValidCells++;                }                a++;                if (a == OTOMaxSize) {                  a=0;                }              }              b++;            }            if (numValidCells > 3) {              cleavePeaks2D(subGridDEM,noData);            }            a=0;            b=0;            didSomethingHappen=false;            for (row=rowOffset; row < rowOffset + OTOMaxSize; row++) {              for (col=colOffset; col < colOffset + OTOMaxSize; col++) {                z2=subGridDEM[b + 1][a + 1];                w1=output.getValue(row,col);                if (z2 < w1) {                  output.setValue(row,col,z2);                  cumulativeChange+=(w1 - z2) * (w1 - z2);                  didSomethingHappen=true;                  numCellsChanged++;                }                a++;                if (a == OTOMaxSize) {                  a=0;                }              }              b++;            }            if (!didSomethingHappen) {              activeTile[currentTile]=false;            }          }          colOffset+=halfOTOMaxSize;          if (colOffset > cols - 1) {            colOffset=-1;            rowOffset+=halfOTOMaxSize;            if (rowOffset > rows - 1) {              flag=false;            }            if (cancelOp) {              cancelOperation();              return;            }          }          progress=(int)(currentTile * 100d / (numTiles - 1d));          updateProgress((int)progress);        } while (flag);        DEMGrid.close();        output.close();        if (numCellsChanged > 0) {          FileUtilities.copyFile(new File(outputHeader),new File(tempHeaderFile));          FileUtilities.copyFile(new File(outputHeader.replace(".dep",".tas")),new File(tempDataFile));        }      } while ((numCellsChanged > 0) && (numCellsChanged != prevNumCellsChanged) && (loopNum < 501)&& (cumulativeChange > 0.5)&& iterateRemoveOTOs);      if ((new File(tempHeaderFile)).exists()) {        (new File(tempHeaderFile)).delete();      }      if ((new File(tempDataFile)).exists()) {        (new File(tempDataFile)).delete();      }    }    returnData(gridFiles[0].replace(".dep"," " + suffix + ".dep"));  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected FunctionDeclarationImpl(){  super();}  }
class C{  public static boolean containsArabic(AttributedString as){  return containsArabic(as.getIterator());}  }
class C{  public static byte[] mappedIPv4ToRealIPv4(byte[] addr){  if (isMappedIPv4Addr(addr)) {    byte[] newAddr=new byte[IN4_ADDR_SIZE];    System.arraycopy(addr,12,newAddr,0,IN4_ADDR_SIZE);    return newAddr;  }  return null;}  }
class C{  public StringLiteral(int pos,int len){  super(pos,len);}  }
class C{  @Inline public Address pop(){  return fromSpace.pop();}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public void dup(){  mv.visitInsn(Opcodes.DUP);}  }
class C{  public PackagerTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  public static String pidMemoryUsage() throws IOException, InvocationTargetException, NoSuchMethodException, IllegalAccessException, NoSuchFieldException {  return pidMemoryUsage(getPid());}  }
class C{  public static Bundle createArgs(Bundle args,String title,int headersState){  if (args == null) {    args=new Bundle();  }  args.putString(ARG_TITLE,title);  args.putInt(ARG_HEADERS_STATE,headersState);  return args;}  }
class C{  public boolean hasAttribute(String key){  return (this.containsKey(key));}  }
class C{  private SortedMap<Double,Double> personalIncomeInQuantiles2Scores(SortedMap<Id,WinnerLoserAnalysisRow> populationInformation){  SortedMap<Double,Double> result=new TreeMap<Double,Double>();  for (  Entry<Id,WinnerLoserAnalysisRow> entry : populationInformation.entrySet()) {    WinnerLoserAnalysisRow winnerLoserAnalysisRow=entry.getValue();    Double personalIncome=winnerLoserAnalysisRow.getPersonalIncome();    Double scoreDiff=winnerLoserAnalysisRow.getScoreDiff();    result.put(personalIncome,scoreDiff);  }  return result;}  }
class C{  public IconicsDrawable actionBarSize(){  return sizeDp(ANDROID_ACTIONBAR_ICON_SIZE_DP);}  }
class C{  WagonSimTransitStopHandler(Vehicle vehicle,VehicleLoad vehicleLoad,ObjectAttributes wagonAttribs,ObjectAttributes locomitiveAttribs){  this.vehicleLoad=vehicleLoad;  this.wagonAttribs=wagonAttribs;  this.locomotiveAttribs=locomitiveAttribs;}  }
class C{  private void notifyNeighbors(){  scheduledNeighborUpdate=false;  final Block blockType=getCasing().getCasingWorld().getBlockState(getCasing().getPosition()).getBlock();  getCasing().getCasingWorld().notifyNeighborsOfStateChange(getCasing().getPosition(),blockType);}  }
class C{  public boolean equals(Object objectToCompare){  if (this == objectToCompare) {    return true;  }  if (objectToCompare == null) {    return false;  }  if (!(objectToCompare instanceof ExceptionCode)) {    return false;  }  boolean equal=false;  ExceptionCode otherExceptionCode=(ExceptionCode)objectToCompare;  boolean codeMatches=false;  boolean fieldMatches=false;  if (null == m_code) {    codeMatches=(null == otherExceptionCode.m_code);  } else {    codeMatches=(m_code.equals(otherExceptionCode.m_code));  }  if (null == m_fieldRef) {    fieldMatches=(null == otherExceptionCode.m_fieldRef);  } else {    fieldMatches=(m_fieldRef.equals(otherExceptionCode.m_fieldRef));  }  if (codeMatches && fieldMatches) {    equal=true;  }  return equal;}  }
class C{  public void test3137355(){  sql="INSERT INTO MyTable (a, b, c, d, xml) VALUES ('val1', 'val2', 'this ''is'' a string with ''quotes'' and backslashes ''\\''', 'val4')";  sqe="INSERT INTO MyTable (a, b, c, d, xml) VALUES ('val1', 'val2', E'this ''is'' a string with ''quotes'' and backslashes ''\\\\''', 'val4')";  r=convert.convert(sql);  assertEquals(sqe,r[0]);  sql="SELECT AD_Tab.AD_Tab_ID,NULL,COALESCE(AD_Tab.Name,'-1') ||'_'|| COALESCE((SELECT COALESCE(AD_Window.Name,'') FROM AD_Window WHERE AD_Tab.AD_Window_ID=AD_Window.AD_Window_ID),'-1'),AD_Tab.IsActive" + " FROM AD_Tab WHERE AD_Tab.AD_Tab_ID=?";  sqe=sql;  r=convert.convert(sql);  assertEquals(sqe,r[0]);}  }
class C{  public GVTGlyphMetrics(float horizontalAdvance,float verticalAdvance,Rectangle2D bounds,byte glyphType){  this.gm=new GlyphMetrics(horizontalAdvance,bounds,glyphType);  this.verticalAdvance=verticalAdvance;}  }
class C{  final boolean isTargetGraph(){  return getProperty(Annotations.TARGET) instanceof ConstantNode;}  }
class C{  public ChopRoundRectangleConnector(){}  }
class C{  public MapperBuilder to(Class<?> destination){  this.destination=destination;  return this;}  }
class C{  private Double parseCurrentPrecipitationProbability(JSONObject response) throws JSONException {  JSONObject currently=response.getJSONObject("currently");  return currently.getDouble("precipProbability");}  }
class C{  public void dispose(){}  }
class C{  public void addMonths(int months){  super.addField(DurationFieldType.months(),months);}  }
class C{  public void close() throws IOException {  in.close();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_METHOD_BODY_1__PRECONDITION_1:    getPrecondition_1().clear();  return;}super.eUnset(featureID);}  }
class C{  protected void onModeChange(int oldMode,int newMode){}  }
class C{  public MutableString(final int capacity){  array=capacity != 0 ? new char[capacity] : CharArrays.EMPTY_ARRAY;}  }
class C{  public void endElement() throws IOException {  int p=peeked;  if (p == PEEKED_NONE) {    p=doPeek();  }  if (p == PEEKED_ELEMENT_END) {    popStack();    peeked=PEEKED_NONE;  } else {    throw syntaxError("Expected end of element but was " + peek());  }}  }
class C{  public void load(Path settingsPath){  mLoadingSettings=true;  if (Files.exists(settingsPath)) {    mLog.info("SettingsManager - loading settings file [" + settingsPath.toString() + "]");    JAXBContext context=null;    InputStream in=null;    try {      in=new FileInputStream(settingsPath.toString());      try {        context=JAXBContext.newInstance(Settings.class);        Unmarshaller m=context.createUnmarshaller();        mSettings=(Settings)m.unmarshal(in);      } catch (      JAXBException e) {        mLog.error("SettingsManager - jaxb exception while loading " + "settings",e);      }    } catch (    Exception e) {      mLog.error("SettingsManager - coulcn't open inputstream to " + "load settings [" + settingsPath.toString() + "]",e);    } finally {      if (in != null) {        try {          in.close();        } catch (        IOException e) {          mLog.error("SettingsManager - exception while closing " + "the settings file inputstream reader",e);        }      }    }  } else {    mLog.info("SettingsManager - settings does not exist [" + settingsPath.toString() + "]");  }  if (mSettings == null) {    mSettings=new Settings();  }  loadTunerConfigurationModel();  mLoadingSettings=false;}  }
class C{  public void fireEnablers(){  for (  final String key : this.values.keySet()) {    this.values.get(key).fireValueChanged();  }}  }
class C{  public static Category createCategory(final String rawJSON) throws TwitterException {  try {    final JSONObject json=new JSONObject(rawJSON);    return categoryConstructor.newInstance(json);  } catch (  final InstantiationException e) {    throw new TwitterException(e);  }catch (  final IllegalAccessException e) {    throw new AssertionError(e);  }catch (  final InvocationTargetException e) {    throw new TwitterException(e);  }catch (  final JSONException e) {    throw new TwitterException(e);  }}  }
class C{  private void attachTo(JComponent comp){  assert comp instanceof JTree || comp instanceof JList;  comp.addMouseListener(this);  comp.addMouseMotionListener(this);  refcount++;}  }
class C{  public OffScreenImage(Component c,ColorModel cm,WritableRaster raster,boolean isRasterPremultiplied){  super(cm,raster,isRasterPremultiplied,null);  this.c=c;  initSurface(raster.getWidth(),raster.getHeight());}  }
class C{  public AuthorizationException(final String msg,final Throwable throwable){  super(msg,throwable);  LOG.error(msg,throwable);}  }
class C{  public boolean isKey(int index){  if (index < 0 || index >= m_columns.length)   return false;  return m_columns[index].IsKey;}  }
class C{  @Override public boolean add(E o){  return offer(o);}  }
class C{  public void addURL(URL url){  super.addURL(url);}  }
class C{  public static ValueLobDb createTempBlob(InputStream in,long length){  try {    long remaining=Long.MAX_VALUE;    if (length >= 0 && length < remaining) {      remaining=length;    }    int len=getBufferSize(remaining);    byte[] buff;    if (len >= Integer.MAX_VALUE) {      buff=IOUtils.readBytesAndClose(in,-1);      len=buff.length;    } else {      buff=DataUtils.newBytes(len);      len=IOUtils.readFully(in,buff,len);    }    if (len <= getMaxLengthInplaceLob()) {      byte[] small=DataUtils.newBytes(len);      System.arraycopy(buff,0,small,0,len);      return ValueLobDb.createSmallLob(Value.BLOB,small,small.length);    }    ValueLobDb lob=new ValueLobDb(buff,len,in,remaining);    return lob;  } catch (  IOException e) {    throw DbException.convertIOException(e,null);  }}  }
class C{  private boolean isUnitAdmin(PlatformUser user){  for (  UserGroupToUser userGroupToUser : user.getUserGroupToUsers()) {    if (!userGroupToUser.getUnitRoleAssignments().isEmpty()) {      UnitRoleAssignment roleAssignment=userGroupToUser.getUnitRoleAssignments().get(0);      if (roleAssignment.getUnitUserRole().getRoleName().equals(UnitRoleType.ADMINISTRATOR)) {        return true;      }    }  }  return false;}  }
class C{  private Object readRequest(ByteBuf buffer){  return context.serializer().readObject(INPUT.get().setByteBuf(buffer));}  }
class C{  public VerletPhysics3D update(){  updateParticles();  updateSprings();  applyConstaints();  return this;}  }
class C{  protected void initItemEditor(C itemEditor){  this.setItemEditor(itemEditor);  setImage(FieldDecorationRegistry.getDefault().getFieldDecoration(FieldDecorationRegistry.DEC_ERROR).getImage());  hide();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.201 -0400",hash_original_method="B7233EF33CE1581A472B9379DD0E229A",hash_generated_method="FBDACD334E4F67A4E4971FE6304D9050") public LockableFileWriter(String fileName,boolean append,String lockDir) throws IOException {  this(new File(fileName),append,lockDir);}  }
class C{  public static void main(String[] args){  String filename=null;  try {    filename=args[0];    if (args.length > 1)     throw new Exception();  } catch (  Exception e) {    System.err.println("usage: java edu.illinois.cs.cogcomp.lbjava.edu.illinois.cs.cogcomp.lbjava.nlp.SentenceSplitter <file name>");    System.exit(1);  }  SentenceSplitter splitter=new SentenceSplitter(filename);  for (Sentence s=(Sentence)splitter.next(); s != null; s=(Sentence)splitter.next()) {    StringBuffer buffer=new StringBuffer(s.text);    for (int i=0; i < buffer.length(); ++i) {      char c=buffer.charAt(i);      if (c == '\n' || c == '\r' || c == '\f')       buffer.setCharAt(i,' ');    }    System.out.println(buffer);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean hasSaveVolatileAnnotation(){  return isAnnotationDeclared(TypeReference.SaveVolatile);}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws IOException {  this.setBaseCtxInfo();  out.defaultWriteObject();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4mfPackage.PROJECT_DESCRIPTION__VENDOR_NAME:    setVendorName(VENDOR_NAME_EDEFAULT);  return;case N4mfPackage.PROJECT_DESCRIPTION__PROJECT_VERSION:setProjectVersion((DeclaredVersion)null);return;case N4mfPackage.PROJECT_DESCRIPTION__PROJECT_TYPE:setProjectType(PROJECT_TYPE_EDEFAULT);return;case N4mfPackage.PROJECT_DESCRIPTION__MAIN_MODULE:setMainModule(MAIN_MODULE_EDEFAULT);return;case N4mfPackage.PROJECT_DESCRIPTION__EXTENDED_RUNTIME_ENVIRONMENT:setExtendedRuntimeEnvironment((ExtendedRuntimeEnvironment)null);return;case N4mfPackage.PROJECT_DESCRIPTION__PROVIDED_RUNTIME_LIBRARIES:setProvidedRuntimeLibraries((ProvidedRuntimeLibraries)null);return;case N4mfPackage.PROJECT_DESCRIPTION__REQUIRED_RUNTIME_LIBRARIES:setRequiredRuntimeLibraries((RequiredRuntimeLibraries)null);return;case N4mfPackage.PROJECT_DESCRIPTION__PROJECT_DEPENDENCIES:setProjectDependencies((ProjectDependencies)null);return;case N4mfPackage.PROJECT_DESCRIPTION__IMPLEMENTATION_ID:setImplementationId(IMPLEMENTATION_ID_EDEFAULT);return;case N4mfPackage.PROJECT_DESCRIPTION__IMPLEMENTED_PROJECTS:setImplementedProjects((ImplementedProjects)null);return;case N4mfPackage.PROJECT_DESCRIPTION__INIT_MODULES:setInitModules((InitModules)null);return;case N4mfPackage.PROJECT_DESCRIPTION__EXEC_MODULE:setExecModule((ExecModule)null);return;case N4mfPackage.PROJECT_DESCRIPTION__OUTPUT_PATH:setOutputPath(OUTPUT_PATH_EDEFAULT);return;case N4mfPackage.PROJECT_DESCRIPTION__LIBRARY_PATHS:getLibraryPaths().clear();return;case N4mfPackage.PROJECT_DESCRIPTION__RESOURCE_PATHS:getResourcePaths().clear();return;case N4mfPackage.PROJECT_DESCRIPTION__SOURCE_FRAGMENT:getSourceFragment().clear();return;case N4mfPackage.PROJECT_DESCRIPTION__MODULE_FILTERS:getModuleFilters().clear();return;case N4mfPackage.PROJECT_DESCRIPTION__TESTED_PROJECTS:setTestedProjects((TestedProjects)null);return;case N4mfPackage.PROJECT_DESCRIPTION__MODULE_LOADER:setModuleLoader(MODULE_LOADER_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:47.932 -0500",hash_original_method="7B2C29F4698952FF45E2699BBB5DEB62",hash_generated_method="7B2C29F4698952FF45E2699BBB5DEB62") void dispose(){  mSmsStamp.clear();}  }
class C{  public boolean hasNeighborhood(){  return hasExtension(Neighborhood.class);}  }
class C{  public XMLAttributeList addAttribute(@Nonnull String name,@Nonnull String value){  if (name == null) {    throw new NullPointerException("name must be nonnull");  }  if (value == null) {    throw new NullPointerException("value must be nonnull");  }  nameValuePairList.add(new NameValuePair(name,value));  return this;}  }
class C{  @Override public int startupNewWorker(int priority){  int actualWorkersStarted=startupNewWorker(priority,null,null);  return actualWorkersStarted;}  }
class C{  public void fireSynapseAdded(final Synapse added){  for (  SynapseListener listener : synapseListeners) {    listener.synapseAdded(new NetworkEvent<Synapse>(this,added));  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @RequestMapping(value={"","/"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@RequestParam(value="page",defaultValue="0") int startPage,@RequestParam(value="size",defaultValue="10") int pageSize,Principal principal){  RestWrapper restWrapper=null;  try {    File file=new File();    file.setPage(startPage);    file.setPageSize(pageSize);    file.setCreationTS(DateConverter.stringToDate(file.getTableCreationTS()));    Integer counter=fileDAO.totalRecordCount().intValue();    List<com.wipro.ats.bdre.md.dao.jpa.File> jpaFileList=fileDAO.list(startPage,pageSize);    LOGGER.info("size of the jpaFiles is " + jpaFileList.size());    List<File> files=new ArrayList<File>();    for (    com.wipro.ats.bdre.md.dao.jpa.File jpaFile : jpaFileList) {      File tableFile=new File();      tableFile.setBatchId(jpaFile.getId().getBatchId());      tableFile.setServerId(jpaFile.getId().getServerId());      tableFile.setPath(jpaFile.getId().getPath());      tableFile.setFileSize(jpaFile.getId().getFileSize());      tableFile.setFileHash(jpaFile.getId().getFileHash());      tableFile.setCreationTS(jpaFile.getId().getCreationTs());      tableFile.setCounter(counter);      files.add(tableFile);      LOGGER.info("file added:" + tableFile);    }    LOGGER.info("size of the tableFiles is " + jpaFileList.size());    for (    File f : files) {      f.setTableCreationTS(DateConverter.dateToString(f.getCreationTS()));    }    restWrapper=new RestWrapper(files,RestWrapper.OK);    LOGGER.info("All records listed from File by User:" + principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public UpdateRequest doc(IndexRequest doc){  this.doc=doc;  return this;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public void appendConsoleLine(LineType lineType,String line){  if (lines == null) {    lines=new String[BUFFER_SIZE];    lineTypes=new LineType[BUFFER_SIZE];  }  lines[writeIndex]=line;  lineTypes[writeIndex]=lineType;  if (++writeIndex >= BUFFER_SIZE) {    writeIndex=0;  }  if (writeIndex == readIndex) {    if (++readIndex >= BUFFER_SIZE) {      readIndex=0;    }  }}  }
class C{  protected void init(){  InputStream in=null;  props=new Properties();  try {    URI uri=getClass().getClassLoader().getResource(PROPERTY_FILE_NAME).toURI();    File file=new File(uri);    in=new FileInputStream(file);    props.load(in);  } catch (  IOException e) {    e.printStackTrace();  }catch (  URISyntaxException e) {    e.printStackTrace();  } finally {    CarbonUtil.closeStreams(in);  }}  }
class C{  void applyCenterPanel(GrassMarlin ui){  if (treeViewComponent != null) {    centerPanelComponent.add(treeViewComponent,SplitPane.Position.CENTER);  }  centerPanelComponent.add(graphComponent,SplitPane.Position.RIGHT);  centerPanelComponent.add(logComponent,SplitPane.Position.LEFT_BOTTOM);  Border b=BorderFactory.createMatteBorder(1,0,1,1,Color.GRAY);  Border b2=BorderFactory.createMatteBorder(1,1,1,1,Color.GRAY);  treeViewComponent.setBorder(b2);  graphComponent.setBorder(b);  logComponent.setBorder(b2);  centerPanelComponent.setInitialSize(x,y);  Dimension d=new Dimension(5,5);  ui.add(new Filler(d,d,d),BorderLayout.WEST);  ui.add(new Filler(d,d,d),BorderLayout.EAST);  ui.add(centerPanelComponent,BorderLayout.CENTER);}  }
class C{  private boolean isAllowedByCurrentUserSettingsLocked(String provider){  if (mEnabledProviders.contains(provider)) {    return true;  }  if (mDisabledProviders.contains(provider)) {    return false;  }  ContentResolver resolver=mContext.getContentResolver();  return Settings.Secure.isLocationProviderEnabledForUser(resolver,provider,mCurrentUserId);}  }
class C{  public String source(){  return this.source;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"rcl");  if (instruction.getOperands().size() != 2) {    throw new InternalTranslationException("Error: Argument instruction is not a rcl instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final IOperandTree targetOperand=operands.get(0);  final IOperandTree sourceOperand=operands.get(1);  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,sourceOperand,true);  instructions.addAll(sourceResult.getInstructions());  offset=baseOffset + instructions.size();  final TranslationResult targetResult=Helpers.translateOperand(environment,offset,targetOperand,true);  instructions.addAll(targetResult.getInstructions());  offset=baseOffset + instructions.size();  final OperandSize sourceSize=sourceResult.getSize();  final OperandSize targetSize=targetResult.getSize();  final OperandSize resultSize=TranslationHelpers.getNextSize(targetSize);  final String sourceRegister=sourceResult.getRegister();  final String targetRegister=targetResult.getRegister();  final String os=String.valueOf(targetSize.getBitSize());  final String rotateMask=environment.getNextVariableString();  final String rotateMaskZero=environment.getNextVariableString();  final String rotateMaskLessOne=environment.getNextVariableString();  final String rotateMaskOne=environment.getNextVariableString();  final String shiftedCf=environment.getNextVariableString();  final String realOp1=environment.getNextVariableString();  final String shrValue=environment.getNextVariableString();  final String shredResult=environment.getNextVariableString();  final String shledResult=environment.getNextVariableString();  final String result=environment.getNextVariableString();  final String truncatedResult=environment.getNextVariableString();  final String msbResult=environment.getNextVariableString();  final String tempOf=environment.getNextVariableString();  final String tempOfLsb=environment.getNextVariableString();  final String carryMask=String.valueOf(Helpers.getCarryMask(targetSize));  final String msbMask=String.valueOf(TranslationHelpers.getMsbMask(targetSize));  final String maskSize=String.valueOf(TranslationHelpers.getAllBitsMask(targetSize));  final String modVal=String.valueOf(targetSize.getBitSize() + 1);  final String shiftMsbLsb=String.valueOf(TranslationHelpers.getShiftMsbLsbMask(targetSize));  final int linesBefore=instructions.size();  instructions.add(ReilHelpers.createMod(offset,sourceSize,sourceRegister,sourceSize,os,OperandSize.BYTE,rotateMask));  instructions.add(ReilHelpers.createBisz(offset + 1,OperandSize.BYTE,rotateMask,OperandSize.BYTE,rotateMaskZero));  instructions.add(ReilHelpers.createSub(offset + 2,OperandSize.BYTE,rotateMask,OperandSize.BYTE,"1",OperandSize.BYTE,rotateMaskLessOne));  instructions.add(ReilHelpers.createBisz(offset + 3,OperandSize.BYTE,rotateMaskLessOne,OperandSize.BYTE,rotateMaskOne));  instructions.add(ReilHelpers.createBsh(offset + 4,OperandSize.BYTE,Helpers.CARRY_FLAG,sourceSize,os,resultSize,shiftedCf));  instructions.add(ReilHelpers.createOr(offset + 5,targetSize,targetRegister,resultSize,shiftedCf,resultSize,realOp1));  instructions.add(ReilHelpers.createBsh(offset + 6,resultSize,realOp1,OperandSize.BYTE,rotateMask,resultSize,shledResult));  instructions.add(ReilHelpers.createAdd(offset + 7,OperandSize.BYTE,"-" + modVal,OperandSize.BYTE,rotateMask,OperandSize.BYTE,shrValue));  instructions.add(ReilHelpers.createBsh(offset + 8,resultSize,realOp1,OperandSize.BYTE,shrValue,resultSize,shredResult));  instructions.add(ReilHelpers.createOr(offset + 9,resultSize,shledResult,resultSize,shredResult,resultSize,result));  instructions.add(ReilHelpers.createAnd(offset + 10,resultSize,result,targetSize,maskSize,targetSize,truncatedResult));  final String jmpGoal=String.format("%d.%d",instruction.getAddress().toLong(),linesBefore + 20);  instructions.add(ReilHelpers.createJcc(offset + 11,OperandSize.BYTE,rotateMaskZero,OperandSize.ADDRESS,jmpGoal));  instructions.add(ReilHelpers.createAnd(offset + 12,resultSize,result,resultSize,carryMask,resultSize,msbResult));  instructions.add(ReilHelpers.createBsh(offset + 13,resultSize,msbResult,resultSize,"-" + os,OperandSize.BYTE,Helpers.CARRY_FLAG));  final String jmpGoal2=String.format("%d.%d",instruction.getAddress().toLong(),linesBefore + 17);  instructions.add(ReilHelpers.createJcc(offset + 14,OperandSize.BYTE,rotateMaskZero,OperandSize.ADDRESS,jmpGoal2));  instructions.add(ReilHelpers.createUndef(offset + 15,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  final String jmpGoal3=String.format("%d.%d",instruction.getAddress().toLong(),linesBefore + 20);  instructions.add(ReilHelpers.createJcc(offset + 16,OperandSize.BYTE,rotateMaskZero,OperandSize.ADDRESS,jmpGoal3));  instructions.add(ReilHelpers.createAnd(offset + 17,sourceSize,truncatedResult,sourceSize,msbMask,sourceSize,tempOf));  instructions.add(ReilHelpers.createBsh(offset + 18,sourceSize,tempOf,sourceSize,shiftMsbLsb,OperandSize.BYTE,tempOfLsb));  instructions.add(ReilHelpers.createBsh(offset + 19,OperandSize.BYTE,tempOfLsb,OperandSize.BYTE,Helpers.CARRY_FLAG,OperandSize.BYTE,Helpers.CARRY_FLAG));  Helpers.writeBack(environment,offset + 20,targetOperand,truncatedResult,targetResult.getSize(),targetResult.getAddress(),targetResult.getType(),instructions);}  }
class C{  @Entrypoint public static Object resolvedNewArray(int numElements,int logElementSize,int headerSize,TIB tib,int allocator,int align,int offset,int site) throws OutOfMemoryError, NegativeArraySizeException {  if (numElements < 0)   raiseNegativeArraySizeException();  if (VM.ForceFrequentGC)   checkAllocationCountDownToGC();  return MemoryManager.allocateArray(numElements,logElementSize,headerSize,tib,allocator,align,offset,site);}  }
class C{  public boolean isReverseOrder(){  return mIsReversed;}  }
class C{  public String requestTokenBlocking(){  try {    logger.debug("Trying to request token (email: {}, password: {})",email,password.replaceAll(".","*"));    HttpResponse<JsonNode> response=Unirest.post("https://discordapp.com/api/auth/login").field("email",email).field("password",password).asJson();    JSONObject jsonResponse=response.getBody().getObject();    if (response.getStatus() == 400) {      throw new IllegalArgumentException("400 Bad request! Maybe wrong email or password?");    }    if (response.getStatus() < 200 || response.getStatus() > 299) {      throw new IllegalStateException("Received http status code " + response.getStatus() + " with message "+ response.getStatusText()+ " and body "+ response.getBody());    }    if (jsonResponse.has("password") || jsonResponse.has("email")) {      throw new IllegalArgumentException("Wrong email or password!");    }    String token=jsonResponse.getString("token");    logger.debug("Requested token {} (email: {}, password: {})",token.replaceAll(".{10}","**********"),email,password.replaceAll(".","*"));    return token;  } catch (  UnirestException e) {    logger.warn("Couldn't request token (email: {}, password: {}). Please contact the developer!",email,password.replaceAll(".","*"),e);    return null;  }}  }
class C{  @protection static <E,TypedC extends Collection<E>>TypedC dynamicallyCastCollection(Collection<?> c,Class<E> type,Class<TypedC> collectionType){  if (c == null)   return null;  if (!collectionType.isInstance(c))   throw new ClassCastException(c.getClass().getName());  assert checkCollectionMembers(c,type) : "The collection contains members with a type other than " + type.getName();  return collectionType.cast(c);}  }
class C{  public static void main(String[] args){  try {    run(System.out);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void testRenameFileParentRoot() throws Exception {  IgfsPath file1=new IgfsPath("/file1");  IgfsPath file2=new IgfsPath("/file2");  create(igfs,null,paths(file1));  igfs.rename(file1,file2);  checkExist(igfs,igfsSecondary,file2);  checkNotExist(igfs,igfsSecondary,file1);}  }
class C{  public boolean isTabbed(){  return tabPane != null;}  }
class C{  public static void main(String[] args) throws IllegalArgumentException, IOException {  FlagConfig flagConfig;  try {    flagConfig=FlagConfig.getFlagConfig(args);  } catch (  java.lang.IllegalArgumentException e) {    System.err.println(usageMessage);    throw e;  }  LuceneUtils luceneUtils=null;  String separator=flagConfig.batchcompareseparator();  VectorStoreRAM vecReader=null, elementalVecReader=null, semanticVecReader=null, predicateVecReader=null;  if (flagConfig.searchtype().equals(SearchType.BOUNDPRODUCT) || flagConfig.searchtype().equals(SearchType.BOUNDPRODUCTSUBSPACE)) {    elementalVecReader=new VectorStoreRAM(flagConfig);    semanticVecReader=new VectorStoreRAM(flagConfig);    predicateVecReader=new VectorStoreRAM(flagConfig);    elementalVecReader.initFromFile(flagConfig.elementalvectorfile());    semanticVecReader.initFromFile(flagConfig.semanticvectorfile());    predicateVecReader.initFromFile(flagConfig.elementalpredicatevectorfile());  } else {    vecReader=new VectorStoreRAM(flagConfig);    vecReader.initFromFile(VectorStoreUtils.getStoreFileName(flagConfig.queryvectorfile(),flagConfig));    VerbatimLogger.info(String.format("Using RAM cache of vectors from file: %s\n",flagConfig.queryvectorfile()));  }  if (!flagConfig.luceneindexpath().isEmpty()) {    try {      luceneUtils=new LuceneUtils(flagConfig);    } catch (    IOException e) {      VerbatimLogger.info(String.format("Couldn't open Lucene index at %s\n",flagConfig.luceneindexpath()));    }  }  if (luceneUtils == null) {    VerbatimLogger.info("No Lucene index for query term weighting, " + "so all terms will have same weight.\n");  }  BufferedReader input=new BufferedReader(new InputStreamReader(System.in));  String line;  while ((line=input.readLine()) != null) {    String[] elems=line.split(separator);    if (elems.length != 2) {      System.err.println(usageMessage);      throw new IllegalArgumentException("The separator '" + separator + "' must occur exactly once (found "+ (elems.length - 1)+ " occurrences)");    }    Vector vec1=null, vec2=null;    if (flagConfig.searchtype().equals(SearchType.BOUNDPRODUCT)) {      vec1=CompoundVectorBuilder.getBoundProductQueryVectorFromString(flagConfig,elementalVecReader,semanticVecReader,predicateVecReader,luceneUtils,elems[0]);      vec2=CompoundVectorBuilder.getBoundProductQueryVectorFromString(flagConfig,elementalVecReader,semanticVecReader,predicateVecReader,luceneUtils,elems[1]);      double simScore=vec1.measureOverlap(vec2);      VerbatimLogger.info(String.format("Score = %7.6f. Terms: %s\n",simScore,line));      System.out.println(simScore);    } else     if (flagConfig.searchtype().equals(SearchType.BOUNDPRODUCTSUBSPACE)) {      ArrayList<Vector> vecs1=CompoundVectorBuilder.getBoundProductQuerySubspaceFromString(flagConfig,elementalVecReader,semanticVecReader,predicateVecReader,elems[0]);      vec2=CompoundVectorBuilder.getBoundProductQueryVectorFromString(flagConfig,elementalVecReader,semanticVecReader,predicateVecReader,luceneUtils,elems[1]);      double simScore=VectorUtils.compareWithProjection(vec2,vecs1);      VerbatimLogger.info(String.format("Score = %7.6f. Terms: %s\n",simScore,line));      System.out.println(simScore);    } else {      vec1=CompoundVectorBuilder.getQueryVectorFromString(vecReader,luceneUtils,flagConfig,elems[0]);      vec2=CompoundVectorBuilder.getQueryVectorFromString(vecReader,luceneUtils,flagConfig,elems[1]);      double simScore=vec1.measureOverlap(vec2);      VerbatimLogger.info(String.format("Score = %7.6f. Terms: %s\n",simScore,line));      System.out.println(simScore);    }  }}  }
class C{  public RaptorState runRaptorFrequency(int departureTime,BoardingAssumption boardingAssumption){  long startClockTime=System.currentTimeMillis();  max_time=departureTime + req.maxTripDurationMinutes * 60;  round=0;  advanceToNextRound();  patternsTouchedThisRound.clear();  stopsTouchedThisSearch.clear();  stopsTouchedThisRound.clear();  for (int p=0; p < data.tripPatterns.size(); p++) {    TripPattern pat=data.tripPatterns.get(p);    if (pat.hasFrequencies) {      patternsTouchedThisRound.set(p);    }  }  RaptorState previousRound=scheduleState.get(round - 1);  RaptorState currentRound=scheduleState.get(round).copy();  currentRound.previous=previousRound;  while ((doOneRound(previousRound,currentRound,true,boardingAssumption) || (scheduledRounds != -1 && round <= scheduledRounds)) && round < req.maxRides) {    advanceToNextRound();    previousRound=currentRound;    currentRound=previousRound.copy();    currentRound.min(scheduleState.get(round));    if (data.hasSchedules) {      for (int p=0; p < data.tripPatterns.size(); p++) {        TripPattern pat=data.tripPatterns.get(p);        if (pat.hasFrequencies) {          patternsTouchedThisRound.set(p);        }      }    }  }  frequencySearchTime+=System.currentTimeMillis() - startClockTime;  return currentRound;}  }
class C{  protected PropertyChangeListener createActionChangeListener(JButton b){  return null;}  }
class C{  public void buildIndex(){  this.stringPosToRealPos=new HashMap<Integer,Integer>();  int counter=0;  for (  Integer idx : getAllIndices()) {    this.stringPosToRealPos.put(counter,idx);    counter++;  }}  }
class C{  public boolean addBuddy(String name,boolean online){  boolean isNew=!hasMap("buddies") || !getMap("buddies").containsKey(name);  put("buddies",name,online);  return isNew;}  }
class C{  public void trimToSize(){  elements=cern.colt.Arrays.trimToCapacity(elements,size());}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws org.xml.sax.SAXException {  startPrefixMapping(prefix,uri,true);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:11.179 -0500",hash_original_method="49125F9CA125EC7F4D4C7EADF3FA5E9C",hash_generated_method="E8492FD71B26032754743479D11BC783") public ConnectException(String detailMessage){  super(detailMessage);}  }
class C{  @SmallTest public void testPreconditions(){}  }
class C{  public static String encrypt(String input,String key,String algorithm,byte[] ivOrSalt,int iterations,String encoding,String charset) throws PageException {  try {    if (charset == null)     charset=DEFAULT_CHARSET;    if (encoding == null)     encoding=DEFAULT_ENCODING;    byte[] baInput=input.getBytes(charset);    byte[] encrypted=encrypt(baInput,key,algorithm,ivOrSalt,iterations);    return Coder.encode(encoding,encrypted);  } catch (  Throwable t) {    throw Caster.toPageException(t);  }}  }
class C{  public PolicyQualifierInfo(ASN1Sequence as){  if (as.size() != 2) {    throw new IllegalArgumentException("Bad sequence size: " + as.size());  }  policyQualifierId=ASN1ObjectIdentifier.getInstance(as.getObjectAt(0));  qualifier=as.getObjectAt(1);}  }
class C{  public static UnicodeEscaper above(final int codepoint){  return outsideOf(0,codepoint);}  }
class C{  public void memberJoined(ClientMembershipEvent event){  Notification notification=new Notification(JMXNotificationType.CLIENT_JOINED,serverSource,SequenceNumber.next(),System.currentTimeMillis(),ManagementConstants.CLIENT_JOINED_PREFIX + event.getMemberId());  serverLevelNotifEmitter.sendNotification(notification);  memberLevelNotifEmitter.sendNotification(notification);}  }
class C{  public static GeoTimeSerie fillprevious(GeoTimeSerie gts){  GeoTimeSerie filled=gts.clone();  if (!isBucketized(filled)) {    return filled;  }  sort(filled,false);  int nticks=filled.values;  if (0 != nticks) {    long firsttick=filled.ticks[0];    filled.setSizeHint(1 + (int)((filled.lastbucket - firsttick) / filled.bucketspan));  }  int idx=0;  int bucketidx=filled.bucketcount - 1;  long bucketts=filled.lastbucket - bucketidx * filled.bucketspan;  Object prevValue=null;  long prevLocation=GeoTimeSerie.NO_LOCATION;  long prevElevation=GeoTimeSerie.NO_ELEVATION;  long bucketoffset=filled.lastbucket % filled.bucketspan;  while (bucketidx >= 0) {    while (idx < nticks && bucketoffset != (filled.ticks[idx] % filled.bucketspan)) {      idx++;    }    if (idx >= nticks) {      break;    }    while (bucketidx >= 0 && filled.ticks[idx] > bucketts) {      if (null != prevValue) {        setValue(filled,bucketts,prevLocation,prevElevation,prevValue,false);      }      bucketidx--;      bucketts=filled.lastbucket - bucketidx * filled.bucketspan;    }    bucketidx--;    bucketts=filled.lastbucket - bucketidx * filled.bucketspan;    prevValue=valueAtIndex(filled,idx);    prevLocation=null != filled.locations ? filled.locations[idx] : GeoTimeSerie.NO_LOCATION;    prevElevation=null != filled.elevations ? filled.elevations[idx] : GeoTimeSerie.NO_ELEVATION;    idx++;  }  while (bucketidx >= 0) {    if (null != prevValue) {      setValue(filled,bucketts,prevLocation,prevElevation,prevValue,false);    }    bucketidx--;    bucketts=filled.lastbucket - bucketidx * filled.bucketspan;  }  return filled;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  public BridgeException(BridgeContext ctx,Element e,Exception ex,String code,Object[] params){  this.e=e;  message=ex.getMessage();  this.code=code;  this.params=params;  if (e != null && ctx != null) {    this.line=ctx.getDocumentLoader().getLineNumber(e);  }}  }
class C{  private void reset(){  currentSelection=null;  firstSelection=null;  secondSelection=null;}  }
class C{  public static void main(String[] args){  Main main=new Main();  main.run(args);}  }
class C{  public Swagger2MarkupConfigBuilder withMarkupLanguage(MarkupLanguage markupLanguage){  Validate.notNull(markupLanguage,"%s must not be null","markupLanguage");  config.markupLanguage=markupLanguage;  return this;}  }
class C{  public OwnerImpl(){  ownerList=new Vector<Principal>();}  }
class C{  public static void configureJCheckBoxMenuItem(final JCheckBoxMenuItem mi,final Action a){  mi.setAction(a);}  }
class C{  protected SmsPortAddressedMessage(SmsPort destPort,SmsPort origPort){  setPorts(destPort,origPort);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Deprecated public String myPublicIP(){  final String staticIP=getConfig("staticIP","");  if (staticIP.length() > 0)   return staticIP;  final InetAddress pLIP=Domains.myPublicLocalIP();  if (pLIP != null)   return pLIP.getHostAddress();  return null;}  }
class C{  public WriteRequest(final ContentFormat contentFormat,final int objectId,final int objectInstanceId,final int resourceId,double value){  this(Mode.REPLACE,contentFormat,new LwM2mPath(objectId,objectInstanceId,resourceId),LwM2mSingleResource.newFloatResource(resourceId,value));}  }
class C{  public int executeUpdateDelete(){  acquireReference();  try {    return getSession().executeForChangedRowCount(getSql(),getBindArgs(),getConnectionFlags(),null);  } catch (  SQLiteDatabaseCorruptException ex) {    onCorruption();    throw ex;  } finally {    releaseReference();  }}  }
class C{  public void testRemove(){  TungstenProperties tp=new TungstenProperties();  tp.setString("a","a");  tp.setString("b","b");  assertEquals("Initial size is 2",2,tp.size());  tp.remove("a");  assertEquals("Remove 1, size is now 1",1,tp.size());  assertNull("Value for a no longer exists",tp.getString("a"));  tp.remove("b");  assertEquals("Remove 0, size is now 0",0,tp.size());  assertEquals("",0,tp.size());  assertNull("Value for b no longer exists",tp.getString("b"));}  }
class C{  private void doChildClosureVisit(Node node,Set<Node> closure){  if (!closure.contains(node)) {    closure.add(node);    for (    Edge edge1 : getEdges(node)) {      Node sub=Edges.traverseDirected(node,edge1);      if (sub == null) {        continue;      }      doChildClosureVisit(sub,closure);    }  }}  }
class C{  public boolean drawImage(Image img,int x,int y,int width,int height,Color bgcolor,ImageObserver observer){  Paint paint=gc.getPaint();  gc.setPaint(bgcolor);  fillRect(x,y,width,height);  gc.setPaint(paint);  drawImage(img,x,y,width,height,observer);  return true;}  }
class C{  public FabricApi(RestClient restClient){  super(restClient);}  }
class C{  @RequestMapping(method=GET,value="{id}/delete") @ResponseBody public Object deleteStorage(@PathVariable String id) throws BusinessException {  StorageData storageData=new StorageData();  storageData.setId(id);  storageService.deleteStorage(storageData);  return Collections.singletonMap("message","Storage id " + id + " successfully deleted.");}  }
class C{  private void update(Observable o,Object arg){  final int cols=model.getCols();  for (int i=0; i < disks.length; i++) {    String player=model.getPlayerAt(i / cols,i % cols);    Color color=Color.DARKBLUE;    if (player != null)     color=player.equals("red") ? Color.RED : Color.YELLOW; else {      for (      String p : model.getPlayers())       if (model.isWinPositionFor(i / cols,i % cols,p))       color=Color.BLACK;    }    disks[i].setFill(color);  }  String statusText;  if (!model.isGameOver()) {    String toMove=(String)model.getPlayerForNextMove();    statusText="Next move: " + toMove;    statusBar.setTextFill(toMove.equals("red") ? Color.RED : Color.YELLOW);  } else {    String winner=model.getWinner();    if (winner != null)     statusText="Color " + winner + " has won. Congratulations!"; else     statusText="No winner :-(";    statusBar.setTextFill(Color.WHITE);  }  if (model.searchMetrics != null)   statusText+="    " + model.searchMetrics;  statusBar.setText(statusText);}  }
class C{  protected void onResumeWebRender(){  if (publicWebRender == null || publicWebRender.getResourceClient() == null || publicWebRender.getUIClient() == null) {    bootstrap();    return;  }  if (publicWebRender != null) {    publicWebRender.resumeTimers();    publicWebRender.onShow();    resetBarColor();    WebThemeHelper.tintNow();    if (!browserStorage.getOmniColoringEnabled())     WebThemeHelper.resetWebThemeColor(omnibox);    publicWebRender.drawWithColorMode();    if (readyToLoadUrl.length() > 0) {      publicWebRender.load(readyToLoadUrl,null);      readyToLoadUrl="";    }    if ((publicWebRender.getTitle() == null || publicWebRender.getTitle().isEmpty() || publicWebRender.getUrl() == null || publicWebRender.getUrl().isEmpty()) && publicWebRender.getUIClient().readyForBugfreeBrowsing)     publicWebRender.loadWorkingUrl();  }}  }
class C{  public void concatenate(SIPHeaderList<HDR> other,boolean topFlag) throws IllegalArgumentException {  if (!topFlag) {    this.addAll(other);  } else {    this.addAll(0,other);  }}  }
class C{  public VNXeCommandJob expandFileSystem(String fsId,long newSize){  VNXeCommandJob job=null;  _logger.info("expanding file system:" + fsId);  FileSystemRequest fsRequest=new FileSystemRequest(_khClient,fsId);  VNXeFileSystem fs=fsRequest.get();  if (fs == null) {    _logger.info("Could not find file system in the vxne");    throw VNXeException.exceptions.vnxeCommandFailed("Could not find file system in the vnxe for: " + fsId);  }  String resourceId=fs.getStorageResource().getId();  ModifyFileSystemParam modifyFSParm=new ModifyFileSystemParam();  FileSystemParam fsParm=new FileSystemParam();  fsParm.setSize(newSize);  fsParm.setIsThinEnabled(fs.getIsThinEnabled());  fsParm.setIsFLREnabled(fs.getIsFLREnabled());  fsParm.setSupportedProtocols(fs.getSupportedProtocols());  fsParm.setSizeAllocated(fs.getSizeAllocated());  modifyFSParm.setFsParameters(fsParm);  FileSystemActionRequest req=new FileSystemActionRequest(_khClient);  job=req.modifyFileSystemAsync(modifyFSParm,resourceId);  return job;}  }
class C{  public PasswordAuthentication(String userName,char[] password){  this.userName=userName;  this.password=password.clone();}  }
class C{  public static Method findMethod(Class<?> clazz,String name,Class<?>[] args){  try {    return clazz.getMethod(name,args);  } catch (  NoSuchMethodException nmex) {    return null;  }}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  private static void offsetTimeSource(){  TimeSource tsToday=new SystemTimeSource();  TimeSource tsYesterday=new OffsetTimeSource(tsToday.millis() - DAY_LENGTH_MILLIS,tsToday);  compareTimeSources(SYSTEM_SOURCE_NAME,"Offset",tsToday,tsYesterday);}  }
class C{  private static void log(@Nonnull IMAPMessage message,long startTime,Exception exception) throws MessagingException {  String time=((Long)startTime != null) ? ((System.currentTimeMillis() - startTime) + "ms") : "-";  String entry=String.format("%s %s %s",IMAPMessageUtil.asString(message),exception == null ? "SUCCESS" : "FAILED",time);  if (exception != null && !(exception instanceof MailHandlerException)) {    Logger.of("mail.in").error(entry,exception);  } else {    Logger.of("mail.in").info(entry);  }}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public final void append(String value){  if (value == null)   return;  int strlen=value.length();  if (0 == strlen)   return;  int copyfrom=0;  char[] chunk=m_array[m_lastChunk];  int available=m_chunkSize - m_firstFree;  while (strlen > 0) {    if (available > strlen)     available=strlen;    value.getChars(copyfrom,copyfrom + available,m_array[m_lastChunk],m_firstFree);    strlen-=available;    copyfrom+=available;    if (strlen > 0) {      int i=m_array.length;      if (m_lastChunk + 1 == i) {        char[][] newarray=new char[i + 16][];        System.arraycopy(m_array,0,newarray,0,i);        m_array=newarray;      }      chunk=m_array[++m_lastChunk];      if (chunk == null) {        if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) {          m_innerFSB=new FastStringBuffer(this);        }        chunk=m_array[m_lastChunk]=new char[m_chunkSize];      }      available=m_chunkSize;      m_firstFree=0;    }  }  m_firstFree+=available;}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  WhiteboxRaster image;  WhiteboxRaster output;  int cols, rows;  double imageTotal=0;  long imageN=0;  double imageAverage=0;  double imageTotalDeviation=0;  double stdDeviation=0;  float progress=0;  int col, row;  int i;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    if (image.getDataScale() == WhiteboxRaster.DataScale.BOOLEAN || image.getDataScale() == WhiteboxRaster.DataScale.CATEGORICAL || image.getDataScale() == WhiteboxRaster.DataScale.RGB) {      showFeedback("This tool should only be used with data on a continuous scale.");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(image.getPreferredPalette());    updateProgress("Calculating image average:",0);    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          imageTotal+=data[col];          imageN++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Calculating image average:",(int)progress);    }    imageAverage=imageTotal / imageN;    updateProgress("Calculating the standard deviation:",0);    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          imageTotalDeviation+=(data[col] - imageAverage) * (data[col] - imageAverage);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Calculating the standard deviation:",(int)progress);    }    stdDeviation=Math.sqrt(imageTotalDeviation / (imageN - 1));    updateProgress("Calculating the z-scores:",0);    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          output.setValue(row,col,(data[col] - imageAverage) / stdDeviation);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Calculating the z-scores:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DecimalFormat df;    df=new DecimalFormat("0.000");    String retstr=null;    retstr="CONVERT TO Z-SCORE\n";    retstr=retstr + "Input image:\t\t" + image.getShortHeaderFile()+ "\n";    retstr=retstr + "Created image:\t\t" + output.getShortHeaderFile()+ "\n";    retstr=retstr + "Input image average:\t" + df.format(imageAverage)+ "\n";    retstr=retstr + "Input image std. dev.:\t" + df.format(stdDeviation)+ "\n";    retstr=retstr + "N:\t\t" + imageN;    returnData(retstr);    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public TriangleBatch(GL20 gl){  this(gl,new Source());}  }
class C{  public static void startSvcXMPPMsg(final Context ctx,final String message,final String from){  final Intent i=new Intent(MainService.ACTION_XMPP_MESSAGE_RECEIVED,null,ctx,MainService.class);  i.putExtra("message",message);  i.putExtra("from",from);  MainService.sendToServiceHandler(i);}  }
class C{  public static String parsePath(CIMObjectPath path){  StringBuilder id=new StringBuilder();  Stack<String> tokens=new Stack<String>();  for (  CIMProperty<?> p : path.getKeys()) {    if (p.getName().endsWith(CimConstants.CLASS_NAME_KEY)) {      continue;    }    tokens.push(p.getValue().toString());  }  while (!tokens.empty()) {    id.append(DELIMITER);    id.append(tokens.pop());  }  if (id.length() > 1) {    return id.toString().substring(1);  }  return id.toString();}  }
class C{  public static void deleteById(final CConnection connection,final String tableName,final int id) throws CouldntDeleteException {  Preconditions.checkNotNull(connection,"IE00595: Connection argument can not be null");  Preconditions.checkNotNull(tableName,"IE00596: Table name argument can not be null");  Preconditions.checkArgument(id > 0,"IE00597: Id argument can not be less or equal zero");  try {    connection.executeUpdate(String.format("DELETE FROM %s WHERE id = %d",tableName,id),true);  } catch (  final SQLException e) {    throw new CouldntDeleteException(e);  }}  }
class C{  public void paintToolBarDragWindowBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public final Vec4D weight(){  x*=w;  y*=w;  z*=w;  return this;}  }
class C{  private void onPairRequest(String deviceMac,String buttonMac,final Queue<String> queue){  PairRequestDialogListener buttonListener=new PairRequestDialogListener(queue);  mPairRequestDialog.setTitle(buttonMac);  mPairRequestDialog.setMessage(getString(R.string.esp_espbutton_configure_request,deviceMac));  mPairRequestDialog.setButton(DialogInterface.BUTTON_POSITIVE,getString(R.string.esp_espbutton_configure_permit),buttonListener);  mPairRequestDialog.setButton(DialogInterface.BUTTON_NEUTRAL,getString(R.string.esp_espbutton_configure_forbid),buttonListener);  mPairRequestDialog.setButton(DialogInterface.BUTTON_NEGATIVE,getString(R.string.esp_espbutton_configure_exit),buttonListener);  mPairRequestDialog.show();}  }
class C{  public CompoundVariation(Variation... operators){  this();  for (  Variation operator : operators) {    appendOperator(operator);  }}  }
class C{  void jbInit() throws Exception {  mainPanel.setLayout(mainLayout);  fileLabel.setText(Msg.getMsg(Env.getCtx(),"SelectFile"));  fileButton.setText("-");  imageLabel.setBackground(Color.white);  imageLabel.setBorder(BorderFactory.createRaisedBevelBorder());  imageLabel.setHorizontalAlignment(SwingConstants.CENTER);  getContentPane().add(mainPanel);  mainPanel.add(parameterPanel,BorderLayout.NORTH);  parameterPanel.add(fileLabel,null);  parameterPanel.add(fileButton,null);  mainPanel.add(imageLabel,BorderLayout.CENTER);  mainPanel.add(confirmPanel,BorderLayout.SOUTH);  fileButton.addActionListener(this);  confirmPanel.addActionListener(this);}  }
class C{  private void readHeader() throws OpenStegoException {  this.dataHeader=new LSBDataHeader(this,this.config);  this.channelBitsUsed=this.dataHeader.getChannelBitsUsed();  if (this.currBit != 0) {    this.currBit=0;    this.x++;    if (this.x == this.imgWidth) {      this.x=0;      this.y++;    }  }}  }
class C{  public void testInducedFinalization() throws Exception {  AtomicBoolean finalized1=new AtomicBoolean();  AtomicBoolean finalized2=new AtomicBoolean();  createFinalizableObject(finalized1);  createFinalizableObject(finalized2);  FinalizationTester.induceFinalization();  if (!finalized1.get() || !finalized2.get()) {    fail("not yet finalized: " + finalized1.get() + " "+ finalized2.get());  }}  }
class C{  public static void writeIntegerCollection(@Nonnull NBTTagCompound data,@Nonnull Collection<Integer> coll){  data.setInteger("size",coll.size());  final int[] ary=new int[coll.size()];  int i=0;  for (  Integer num : coll) {    ary[i]=num;    i++;  }  data.setTag("data",new NBTTagIntArray(ary));}  }
class C{  public PublicKey engineLookupAndResolvePublicKey(Element element,String BaseURI,StorageResolver storage){  if (element == null) {    return null;  }  Element dsaKeyElement=null;  boolean isKeyValue=XMLUtils.elementIsInSignatureSpace(element,Constants._TAG_KEYVALUE);  if (isKeyValue) {    dsaKeyElement=XMLUtils.selectDsNode(element.getFirstChild(),Constants._TAG_DSAKEYVALUE,0);  } else   if (XMLUtils.elementIsInSignatureSpace(element,Constants._TAG_DSAKEYVALUE)) {    dsaKeyElement=element;  }  if (dsaKeyElement == null) {    return null;  }  try {    DSAKeyValue dsaKeyValue=new DSAKeyValue(dsaKeyElement,BaseURI);    PublicKey pk=dsaKeyValue.getPublicKey();    return pk;  } catch (  XMLSecurityException ex) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,ex.getMessage(),ex);    }  }  return null;}  }
class C{  public static VariantSpec validateVariantStream(String variantStreamname,ConfigurationVariantStream variantStreamConfig,EventAdapterService eventAdapterService){  if (variantStreamConfig.getTypeVariance() == ConfigurationVariantStream.TypeVariance.PREDEFINED) {    if (variantStreamConfig.getVariantTypeNames().isEmpty()) {      throw new ConfigurationException("Invalid variant stream configuration, no event type name has been added and default type variance requires at least one type, for name '" + variantStreamname + "'");    }  }  Set<EventType> types=new LinkedHashSet<EventType>();  for (  String typeName : variantStreamConfig.getVariantTypeNames()) {    EventType type=eventAdapterService.getExistsTypeByName(typeName);    if (type == null) {      throw new ConfigurationException("Event type by name '" + typeName + "' could not be found for use in variant stream configuration by name '"+ variantStreamname+ "'");    }    types.add(type);  }  EventType[] eventTypes=types.toArray(new EventType[types.size()]);  return new VariantSpec(variantStreamname,eventTypes,variantStreamConfig.getTypeVariance());}  }
class C{  public String makeName(String base,String name){  return base + Metrics.SEP + name;}  }
class C{  public void closePopup(){  if (popup != null) {    popup.hide();  }}  }
class C{  public void addPoint(Location location){  points.add(location);}  }
class C{  public Float remove(Long key){  return wrapValue(_map.remove(unwrapKey(key)));}  }
class C{  private void processSharedModeTest(DeploymentMode depMode) throws Exception {  this.depMode=depMode;  try {    Ignite ignite1=startGrid(1);    Ignite ignite2=startGrid(2);    ignite1.compute().execute(TestTask.class,ignite2.cluster().localNode().id());    ClassLoader saveTaskLdr=taskLdr;    ClassLoader saveJobLdr=jobLdr;    ignite2.compute().execute(TestTask.class,ignite1.cluster().localNode().id());    assert saveTaskLdr == jobLdr;    assert saveJobLdr == taskLdr;  }  finally {    stopGrid(1);    stopGrid(2);  }}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(VALUE).setRequired(true);}  }
class C{  public void animateOut(){  animate(OUT);}  }
class C{  @RequestProcessing(value="/admin/charge-point",method=HTTPRequestMethod.POST) @Before(adviceClass={StopwatchStartAdvice.class,MallAdminCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void chargePoint(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final String userName=request.getParameter(User.USER_NAME);  final String pointStr=request.getParameter(Common.POINT);  final String memo=request.getParameter(Common.MEMO);  if (StringUtils.isBlank(pointStr) || !StringUtils.isNumeric(memo)) {    final AbstractFreeMarkerRenderer renderer=new SkinRenderer();    context.setRenderer(renderer);    renderer.setTemplateName("admin/error.ftl");    final Map<String,Object> dataModel=renderer.getDataModel();    dataModel.put(Keys.MSG,"Charge point memo format error");    filler.fillHeaderAndFooter(request,response,dataModel);    return;  }  final JSONObject user=userQueryService.getUserByName(userName);  if (null == user) {    final AbstractFreeMarkerRenderer renderer=new SkinRenderer();    context.setRenderer(renderer);    renderer.setTemplateName("admin/error.ftl");    final Map<String,Object> dataModel=renderer.getDataModel();    dataModel.put(Keys.MSG,"User [name=" + userName + "] not found");    filler.fillHeaderAndFooter(request,response,dataModel);    return;  }  final JSONObject currentUser=(JSONObject)request.getAttribute(User.USER);  try {    final int point=Integer.valueOf(pointStr);    final String transferId=pointtransferMgmtService.transfer(Pointtransfer.ID_C_SYS,user.optString(Keys.OBJECT_ID),Pointtransfer.TRANSFER_TYPE_C_CHARGE,point,memo + "-" + currentUser.optString(Keys.OBJECT_ID));    final JSONObject notification=new JSONObject();    notification.put(Notification.NOTIFICATION_USER_ID,user.optString(Keys.OBJECT_ID));    notification.put(Notification.NOTIFICATION_DATA_ID,transferId);    notificationMgmtService.addPointChargeNotification(notification);  } catch (  final Exception e) {    final AbstractFreeMarkerRenderer renderer=new SkinRenderer();    context.setRenderer(renderer);    renderer.setTemplateName("admin/error.ftl");    final Map<String,Object> dataModel=renderer.getDataModel();    dataModel.put(Keys.MSG,e.getMessage());    filler.fillHeaderAndFooter(request,response,dataModel);    return;  }  response.sendRedirect(Latkes.getServePath() + "/admin/charge-records");}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document newDoc;  DocumentType docType=null;  DOMImplementation domImpl;  Element element;  Attr attr;  NodeList childList;  Node importedAttr;  String nodeName;  int nodeType;  String nodeValue;  doc=(Document)load("staffNS",true);  domImpl=doc.getImplementation();  newDoc=domImpl.createDocument("http://www.w3.org/DOM/Test","l2:root",docType);  childList=doc.getElementsByTagNameNS("http://www.nist.gov","employee");  element=(Element)childList.item(1);  attr=element.getAttributeNode("defaultAttr");  importedAttr=newDoc.importNode(attr,true);  nodeName=importedAttr.getNodeName();  nodeValue=importedAttr.getNodeValue();  nodeType=(int)importedAttr.getNodeType();  assertEquals("documentimportnode04_nodeName","defaultAttr",nodeName);  assertEquals("documentimportnode04_nodeType",2,nodeType);  assertEquals("documentimportnode04_nodeValue","defaultVal",nodeValue);}  }
class C{  public void clear(){  if (distributedTypeRegistry.isClient()) {    idToType.clear();    typeToId.clear();    localTypeIds.clear();    localTypeIdMaps.clear();    unreadDataMap.clear();    idToEnum.clear();    enumInfoToId.clear();    localEnumIds.clear();    AutoSerializableManager autoSerializer=getAutoSerializableManager();    if (autoSerializer != null) {      autoSerializer.resetCachedTypes();    }  }}  }
class C{  @Deprecated public static byte[] rsa(byte[] msg,RSAPrivateKey key) throws BadPaddingException {  return rsa(msg,key,true);}  }
class C{  protected Size2D arrangeNN(BlockContainer container,Graphics2D g2){  double[] w=new double[5];  double[] h=new double[5];  if (this.topBlock != null) {    Size2D size=this.topBlock.arrange(g2,RectangleConstraint.NONE);    w[0]=size.width;    h[0]=size.height;  }  if (this.bottomBlock != null) {    Size2D size=this.bottomBlock.arrange(g2,RectangleConstraint.NONE);    w[1]=size.width;    h[1]=size.height;  }  if (this.leftBlock != null) {    Size2D size=this.leftBlock.arrange(g2,RectangleConstraint.NONE);    w[2]=size.width;    h[2]=size.height;  }  if (this.rightBlock != null) {    Size2D size=this.rightBlock.arrange(g2,RectangleConstraint.NONE);    w[3]=size.width;    h[3]=size.height;  }  h[2]=Math.max(h[2],h[3]);  h[3]=h[2];  if (this.centerBlock != null) {    Size2D size=this.centerBlock.arrange(g2,RectangleConstraint.NONE);    w[4]=size.width;    h[4]=size.height;  }  double width=Math.max(w[0],Math.max(w[1],w[2] + w[4] + w[3]));  double centerHeight=Math.max(h[2],Math.max(h[3],h[4]));  double height=h[0] + h[1] + centerHeight;  if (this.topBlock != null) {    this.topBlock.setBounds(new Rectangle2D.Double(0.0,0.0,width,h[0]));  }  if (this.bottomBlock != null) {    this.bottomBlock.setBounds(new Rectangle2D.Double(0.0,height - h[1],width,h[1]));  }  if (this.leftBlock != null) {    this.leftBlock.setBounds(new Rectangle2D.Double(0.0,h[0],w[2],centerHeight));  }  if (this.rightBlock != null) {    this.rightBlock.setBounds(new Rectangle2D.Double(width - w[3],h[0],w[3],centerHeight));  }  if (this.centerBlock != null) {    this.centerBlock.setBounds(new Rectangle2D.Double(w[2],h[0],width - w[2] - w[3],centerHeight));  }  return new Size2D(width,height);}  }
class C{  public final void writeFloat(float v) throws IOException {  writeInt(Float.floatToIntBits(v));}  }
class C{  public void updateTarget(){  setFireEnabled(false);  final int weaponId=clientgui.mechD.wPan.getSelectedWeaponNum();  if ((target != null) && (weaponId != -1)) {    ToHitData toHit;    toHit=WeaponAttackAction.toHit(clientgui.getClient().getGame(),cen,target,weaponId,Entity.LOC_NONE,0,false);    clientgui.mechD.wPan.wTargetR.setText(target.getDisplayName());    clientgui.mechD.wPan.wRangeR.setText("" + ce().getPosition().distance(target.getPosition()));    Mounted m=ce().getEquipment(weaponId);    if (m.isUsedThisRound()) {      clientgui.mechD.wPan.wToHitR.setText(Messages.getString("TargetingPhaseDisplay.alreadyFired"));      setFireEnabled(false);    } else     if (m.getType().hasFlag(WeaponType.F_AUTO_TARGET)) {      clientgui.mechD.wPan.wToHitR.setText(Messages.getString("TargetingPhaseDisplay.autoFiringWeapon"));      setFireEnabled(false);    } else     if (toHit.getValue() == TargetRoll.IMPOSSIBLE) {      clientgui.mechD.wPan.wToHitR.setText(toHit.getValueAsString());      setFireEnabled(false);    } else     if (toHit.getValue() == TargetRoll.AUTOMATIC_FAIL) {      clientgui.mechD.wPan.wToHitR.setText(toHit.getValueAsString());      setFireEnabled(true);    } else {      clientgui.mechD.wPan.wToHitR.setText(toHit.getValueAsString() + " (" + Compute.oddsAbove(toHit.getValue(),ce().getCrew().getOptions().booleanOption(OptionsConstants.PILOT_APTITUDE_GUNNERY))+ "%)");      setFireEnabled(true);    }    clientgui.mechD.wPan.toHitText.setText(toHit.getDesc());    setSkipEnabled(true);  } else {    clientgui.mechD.wPan.wTargetR.setText("---");    clientgui.mechD.wPan.wRangeR.setText("---");    clientgui.mechD.wPan.wToHitR.setText("---");    clientgui.mechD.wPan.toHitText.setText("");  }  updateSearchlight();}  }
class C{  public static int[] convertSelectionToModel(JTable table){  int[] selected=table.getSelectedRows();  for (int i=0; i < selected.length; i++) {    selected[i]=table.convertRowIndexToModel(selected[i]);  }  return selected;}  }
class C{  public int rMinQ(int from,int to){  return rMinQ(1,from,to);}  }
class C{  public ReplDBMSEvent eventFromRowDelete(long seqno,String schema,String table,String[] names,Object[] values,int fragNo,boolean lastFrag){  Timestamp ts=new Timestamp(System.currentTimeMillis());  return eventFromRowDelete(seqno,schema,table,names,values,fragNo,lastFrag,ts);}  }
class C{  public static String HexToChar(String hex){  char value[]=new char[hex.length() / 2];  int hexLength=value.length;  for (int i=0; i < hexLength; i++)   value[i]=(char)Integer.parseInt(hex.substring(2 * i,2 * i + 2),16);  return new String(value);}  }
class C{  public void append(String textToAppend){  text.append(StringUtils.escapeForXML(textToAppend));}  }
class C{  void stop() throws JMSException {  if (ActiveMQRAManagedConnection.trace) {    ActiveMQRALogger.LOGGER.trace("stop()");  }  if (connection != null) {    connection.stop();  }}  }
class C{  public boolean remove(String name,String value){  String[] tmp=vals.get(name);  if (tmp == null)   return false;  for (int i=0; i < tmp.length; i++) {    if (tmp[i].equals(value)) {      String[] tmp2=new String[tmp.length - 1];      if (tmp2.length == 0) {        tmp2=null;        remove(name);      } else {        System.arraycopy(tmp,0,tmp2,0,i);        System.arraycopy(tmp,i + 1,tmp2,i,tmp.length - i - 1);        set(name,tmp2);      }      return true;    }  }  return false;}  }
class C{  private void addContact(){  Intent intent=new Intent(this,ViewActivity.class);  startActivity(intent);}  }
class C{  protected String generateUserPasswordLine(User user,String realm){  String toHash=user.getName() + ":" + realm+ ":"+ user.getPassword();  byte[] hash;  try {    hash=md5.digest(toHash.getBytes("UTF-8"));  } catch (  UnsupportedEncodingException e) {    throw new CargoException("Cannot encode one line for the " + "application-users.properties file",e);  }  StringBuilder sb=new StringBuilder();  sb.append(user.getName());  sb.append("=");  for (  byte hashByte : hash) {    sb.append(String.format("%02x",hashByte));  }  sb.append('\n');  return sb.toString();}  }
class C{  public TreeNode deserialize(String data){  this.data=data;  return desHelper();}  }
class C{  public NotificationChain basicSetExtendedRuntimeEnvironment(ProjectReference newExtendedRuntimeEnvironment,NotificationChain msgs){  ProjectReference oldExtendedRuntimeEnvironment=extendedRuntimeEnvironment;  extendedRuntimeEnvironment=newExtendedRuntimeEnvironment;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4mfPackage.EXTENDED_RUNTIME_ENVIRONMENT__EXTENDED_RUNTIME_ENVIRONMENT,oldExtendedRuntimeEnvironment,newExtendedRuntimeEnvironment);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private static void deleteConstraints(String tableName) throws SQLException {  ResultSet rs=conn.getMetaData().getExportedKeys(null,null,tableName.toUpperCase());  Statement stmt=conn.createStatement();  while (rs.next()) {    String constraintName=rs.getString("FK_NAME");    String sourceTableName=rs.getString("FKTABLE_NAME");    String queryString="ALTER TABLE " + sourceTableName + " DROP FOREIGN KEY "+ constraintName;    stmt.executeUpdate(queryString);    System.out.println(queryString);  }}  }
class C{  protected Point2D _forward(float phi,float lambda,Point2D p,AzimuthVar azVar){  return _forward((double)phi,(double)lambda,p,azVar);}  }
class C{  private MP4Config testH264() throws IllegalStateException, IOException {  if (mMode != MODE_MEDIARECORDER_API)   return testMediaCodecAPI(); else   return testMediaRecorderAPI();}  }
class C{  public Document createDefaultDocument(){  return new RSyntaxDocument(SyntaxConstants.SYNTAX_STYLE_NONE);}  }
class C{  private void adjustMemberOffsets(final BaseType structTypeToFix,final Set<BaseType> inconsistentTypes,final Map<BaseType,Integer> oldSizes,final Set<BaseType> affectedTypes) throws CouldntSaveDataException {  if (!inconsistentTypes.contains(structTypeToFix)) {    return;  }  final List<TypeMember> affectedMembers=determineMembersToUpdate(structTypeToFix,affectedTypes);  int sizeDelta=0;  for (  final TypeMember member : affectedMembers) {    final BaseType memberBaseType=member.getBaseType();    if (inconsistentTypes.contains(memberBaseType)) {      adjustMemberOffsets(memberBaseType,inconsistentTypes,oldSizes,affectedTypes);    }    if (sizeDelta != 0) {      Integer newOffset=member.getBitOffset().get() + sizeDelta;      backend.updateStructureMember(member,member.getBaseType(),member.getName(),newOffset);      notifyMemberUpdated(member);      member.setOffset(Optional.of(newOffset));    }    if (oldSizes.containsKey(memberBaseType)) {      sizeDelta+=memberBaseType.getBitSize() - oldSizes.get(memberBaseType);    }  }  inconsistentTypes.remove(structTypeToFix);}  }
class C{  private static long now(){  return System.nanoTime() - NANO_ORIGIN;}  }
class C{  public TransactionHit currencyCode(String value){  setString(CURRENCY_CODE,value);  return this;}  }
class C{  private void processPatch(CreateVirtualNetworkWorkflowDocument state){  try {switch (state.taskState.subStage) {case ENFORCE_QUOTA:      enforceQuotas(state);    break;case ALLOCATE_IP_ADDRESS_SPACE:  allocateIpAddressSpace(state);break;case GET_IP_ADDRESS_SPACE:getIpAddressSpace(state);break;case GET_NSX_CONFIGURATION:getNsxConfiguration(state);break;case CREATE_LOGICAL_SWITCH:createLogicalSwitch(state);break;case CREATE_LOGICAL_ROUTER:createLogicalRouter(state);break;case SET_UP_LOGICAL_ROUTER:setUpLogicalRouter(state);break;}} catch (Throwable t) {fail(state,t);}}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @ApiOperation(value="Update account",notes="Update account. This API call requires account/owner role.",response=AccountDescriptor.class,position=9) @ApiResponses(value={@ApiResponse(code=200,message="OK"),@ApiResponse(code=404,message="Account ID not found"),@ApiResponse(code=409,message="Invalid account ID or account name already exists"),@ApiResponse(code=500,message="Internal Server Error")}) @POST @Path("/{id}") @RolesAllowed({"account/owner"}) @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public AccountDescriptor update(@ApiParam(value="Account ID",required=true) @PathParam("id") String accountId,AccountUpdate update,@Context SecurityContext securityContext) throws NotFoundException, ConflictException, ServerException {  requiredNotNull(update,"Account update");  final Account account=accountDao.getById(accountId);  if (update.getName() != null) {    if (!account.getName().equals(update.getName()) && accountDao.getByName(update.getName()) != null) {      throw new ConflictException(format("Account with name %s already exists",update.getName()));    } else {      account.setName(update.getName());    }  }  if (update.getAttributes() != null) {    for (    String attributeName : update.getAttributes().keySet()) {      validateAttributeName(attributeName);    }    account.getAttributes().putAll(update.getAttributes());  }  accountDao.update(account);  return toDescriptor(account,securityContext);}  }
class C{  @Override public int hashCode(){  return content.hashCode();}  }
class C{  public boolean contains(int index){  return index >= getFirst() && index <= getLast();}  }
class C{  public static String SHA1(String s){  try {    MessageDigest digest=MessageDigest.getInstance("SHA-1");    digest.update(s.getBytes());    byte messageDigest[]=digest.digest();    return toHexString(messageDigest);  } catch (  NoSuchAlgorithmException e) {    e.printStackTrace();  }  return "";}  }
class C{  public static double normalizeLongitude(double longitude){  if (Double.isNaN(longitude) || Double.isInfinite(longitude))   return Double.NaN;  double longitudeResult=longitude % 360;  if (longitudeResult > 180) {    double diff=longitudeResult - 180;    longitudeResult=-180 + diff;  } else   if (longitudeResult < -180) {    double diff=longitudeResult + 180;    longitudeResult=180 + diff;  }  return longitudeResult;}  }
class C{  public boolean isDebugMode(){  return mBuilder.mIsDebugMode;}  }
class C{  public void testGetTestDataService(){  System.out.println("getTestDataService");  mockInitialisationCalls(true,null);  AuditCommandImpl instance=new TestAuditCommandImpl();  TestDataService result=instance.getTestDataService();  assertEquals(mockTestDataService,result);  setVerifyMode();}  }
class C{  void didStart(final Callable task){  nstarted.incrementAndGet();  if (INFO)   log.info("Started: nstarted=" + nstarted);}  }
class C{  public void fireHideToolTip(){  fireRequestToolTip((InfoDisplayEvent)null);}  }
class C{  private boolean consistRosterPartialMatch(NceConsistRosterEntry cre){  if (!enablePartialMatch) {    return false;  }  if (consistTextField.getText().equals(cre.getConsistNumber()) && locoTextField1.getText().equals(cre.getLoco1DccAddress())) {    dirButton1.setText(convertDTD(cre.getLoco1Direction()));    textConRoadName.setText(cre.getRoadName());    textConRoadNumber.setText(cre.getRoadNumber());    textConModel.setText(cre.getModel());  } else {    consistStatus.setText(rb.getString("EditStateUNKNOWN"));    return false;  }  if (locoTextField2.getText().equals(cre.getLoco2DccAddress())) {    dirButton2.setText(convertDTD(cre.getLoco2Direction()));  }  if (locoTextField3.getText().equals(cre.getLoco3DccAddress())) {    dirButton3.setText(convertDTD(cre.getLoco3Direction()));  }  if (locoTextField4.getText().equals(cre.getLoco4DccAddress())) {    dirButton4.setText(convertDTD(cre.getLoco4Direction()));  }  if (locoTextField5.getText().equals(cre.getLoco5DccAddress())) {    dirButton5.setText(convertDTD(cre.getLoco5Direction()));  }  if (locoTextField6.getText().equals(cre.getLoco6DccAddress())) {    dirButton6.setText(convertDTD(cre.getLoco6Direction()));  }  consistStatus.setText(rb.getString("EditStateMODIFIED"));  return true;}  }
class C{  public static boolean matchesTypeName(Class<?> clazz,String typeName){  return (typeName != null && (typeName.equals(clazz.getName()) || typeName.equals(clazz.getSimpleName()) || (clazz.isArray() && typeName.equals(getQualifiedNameForArray(clazz)))));}  }
class C{  public synchronized void clear(){  Entry[] tab=table;  modCount++;  for (int index=tab.length; --index >= 0; )   tab[index]=null;  count=0;}  }
class C{  public NukkitChunk(FaweQueue parent,int x,int z){  super(parent,x,z);}  }
class C{  public Dependency removeExclusion(Exclusion exclusion){  requireNonNull(exclusion,"Required not null exclusion");  exclusions().remove(exclusion);  if (!isNew() && exclusions.isEmpty()) {    dependencyElement.removeChild("exclusions");    exclusion.exclusionElement=null;  } else {    exclusion.remove();  }  return this;}  }
class C{  public static Player createPlayer(String type,char mark){  Player player=null;  if (type.equals(Random)) {    player=new RandomPlayer(mark);  } else {    return null;  }  player.score(new BoardEvaluation());  return player;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TSTRUCT_GETTER__DEFINED_MEMBER:    setDefinedMember((TStructMember)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void drawImage(Image img,int x,int y,int w,int h){  if (impl.isScaledImageDrawingSupported()) {    img.drawImage(this,nativeGraphics,x,y,w,h);  } else {    drawImage(img.scaled(w,h),x,y);  }}  }
class C{  public void runStrategy(CandleSeries candleSeries,boolean newBar){  try {    CandleItem currentCandleItem=this.getCurrentCandle();    ZonedDateTime startPeriod=currentCandleItem.getPeriod().getStart();    if (this.isThereOpenPosition()) {      _log.info("Strategy complete open position filled symbol: " + getSymbol() + " startPeriod: "+ startPeriod);      if (OrderStatus.PARTIALFILLED.equals(this.getOpenPositionOrder().getStatus())) {        if (isRiskViolated(currentCandleItem.getClose(),this.getTradestrategy().getRiskAmount(),this.getOpenPositionOrder().getQuantity(),this.getOpenPositionOrder().getAverageFilledPrice())) {          this.cancelOrder(this.getOpenPositionOrder());        }      }      this.cancel();      return;    }    if (null != openPositionOrderKey && !this.getTradeOrder(openPositionOrderKey).isActive()) {      _log.info("Strategy complete open position cancelled symbol: " + getSymbol() + " startPeriod: "+ startPeriod);      updateTradestrategyStatus(TradestrategyStatus.CANCELLED);      this.cancel();      return;    }    CandleItem openCandle=this.getCandle(this.getTradestrategy().getTradingday().getOpen());    if (startPeriod.equals(this.getTradestrategy().getTradingday().getOpen().plusMinutes(this.getTradestrategy().getBarSize() / 60)) && newBar) {      ZonedDateTime preTradingDate=TradingCalendar.getPrevTradingDay(this.getTradestrategy().getTradingday().getOpen());      ZonedDateTime prevDayStart=TradingCalendar.getTradingDayStart(preTradingDate);      ZonedDateTime prevDayEnd=TradingCalendar.getTradingDayEnd(preTradingDate);      Candle prevDayCandle=candleSeries.getBar(prevDayStart,prevDayEnd);      AbstractStrategyRule.logCandle(this,prevDayCandle);      if (prevDayCandle.getSide() && openCandle.getOpen() < prevDayCandle.getLow().doubleValue()) {        side=Side.SLD;      }      if (!prevDayCandle.getSide() && openCandle.getOpen() > prevDayCandle.getHigh().doubleValue()) {        side=Side.BOT;      }      if (null == side) {        _log.info("Strategy complete no prev day bar hop symbol: " + getSymbol() + " startPeriod: "+ startPeriod);        this.cancel();        return;      }      CandleItem prevCandleItem=null;      if (getCurrentCandleCount() > 0) {        prevCandleItem=(CandleItem)candleSeries.getDataItem(getCurrentCandleCount() - 1);      }      Money price=new Money(prevCandleItem.getHigh());      Money priceStop=new Money(prevCandleItem.getLow());      String action=Action.BUY;      if (Side.SLD.equals(side)) {        price=new Money(prevCandleItem.getLow());        priceStop=new Money(prevCandleItem.getHigh());        action=Action.SELL;      }      _log.info(" We have a trade!!  Symbol: " + getSymbol() + " Time: "+ startPeriod);      TradeOrder tradeOrder=createRiskOpenPosition(action,price,priceStop,true,null,null,null,null);      openPositionOrderKey=tradeOrder.getOrderKey();    } else {      if (startPeriod.isBefore(this.getTradestrategy().getTradingday().getClose().minusMinutes(30)) && startPeriod.isAfter(this.getTradestrategy().getTradingday().getOpen().plusMinutes(5))) {        CandleItem prevCandleItem=null;        if (getCurrentCandleCount() > 0) {          prevCandleItem=(CandleItem)candleSeries.getDataItem(getCurrentCandleCount() - 1);        }        if (!this.isThereOpenPosition()) {          if (Side.BOT.equals(this.side)) {            if (openCandle.getLow() > prevCandleItem.getLow()) {              _log.info("Rule 5min low broken. Symbol: " + getSymbol() + " Time: "+ startPeriod);              this.cancelAllOrders();              updateTradestrategyStatus(TradestrategyStatus.FIVE_MIN_LOW_BROKEN);              this.cancel();              return;            }          }          if (Side.SLD.equals(this.side)) {            if (openCandle.getHigh() < prevCandleItem.getHigh()) {              _log.info("Rule 5min high broken. Symbol: " + getSymbol() + " Time: "+ startPeriod);              this.cancelAllOrders();              updateTradestrategyStatus(TradestrategyStatus.FIVE_MIN_HIGH_BROKEN);              this.cancel();              return;            }          }        }      }    }    if (!startPeriod.isBefore(this.getTradestrategy().getTradingday().getClose().minusMinutes(30))) {      _log.info("Rule 15:30:00 bar, time out unfilled open position Symbol: " + getSymbol() + " Time: "+ startPeriod);      if (!this.isThereOpenPosition() && !TradestrategyStatus.CANCELLED.equals(getTradestrategy().getStatus())) {        updateTradestrategyStatus(TradestrategyStatus.TO);        this.cancelAllOrders();        _log.info("Rule 11:30:00 bar, time out unfilled open position Symbol: " + getSymbol() + " Time: "+ startPeriod);      }      this.cancel();    }  } catch (  StrategyRuleException ex) {    _log.error("Error  runRule exception: " + ex.getMessage(),ex);    error(1,20,"Error  runRule exception: " + ex.getMessage());  }}  }
class C{  private static void addHotkey(final JButton button,final KeyStroke keyStroke,final Action action,final String name){  final InputMap windowImap=button.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);  windowImap.put(keyStroke,name);  button.getActionMap().put(name,action);}  }
class C{  public static Optional<InputStream> openStream(final URL url){  return new UrlStreams().newStream(url);}  }
class C{  public Instant toInstant(){  return this;}  }
class C{  public void onConfigurationChanged(){  int curFirst=pager.getCurrentScreen() * PAGE_SIZE;  calPageSize();  int newPage=curFirst / PAGE_SIZE;  removeViewAt(1);  afterPlatformListGot();  pager.setCurrentScreen(newPage);}  }
class C{  public boolean isMusicImported(){  return musicImported;}  }
class C{  public static boolean isRelativePath(final String path){  return path.startsWith("^/");}  }
class C{  protected void unselectAll(final AbstractZyGraph<T,?> graph){  graph.selectNodes(graph.getNodes(),false);}  }
class C{  public int next(){  for (++_currentNode; _sp >= 0; ++_currentNode) {    if (_currentNode < _stack[_sp]) {      if (_type(_currentNode) != ATTRIBUTE_NODE && _type(_currentNode) != NAMESPACE_NODE)       return returnNode(makeNodeHandle(_currentNode));    } else     --_sp;  }  return NULL;}  }
class C{  public static void serializeTableFeaturesReply(List<OFTableFeaturesStatsReply> tableFeaturesReplies,JsonGenerator jGen) throws IOException, JsonProcessingException {  OFTableFeaturesStatsReply tableFeaturesReply=tableFeaturesReplies.get(0);  jGen.writeStringField("version",tableFeaturesReply.getVersion().toString());  jGen.writeFieldName("tableFeatures");  jGen.writeStartArray();  for (  OFTableFeatures tableFeature : tableFeaturesReply.getEntries()) {    jGen.writeStartObject();    jGen.writeNumberField("tableId",tableFeature.getTableId().getValue());    jGen.writeStringField("name",tableFeature.getName());    jGen.writeNumberField("metadataMatch",tableFeature.getMetadataMatch().getValue());    jGen.writeNumberField("metadataWrite",tableFeature.getMetadataWrite().getValue());    jGen.writeNumberField("config",tableFeature.getConfig());    jGen.writeNumberField("maxEntries",tableFeature.getMaxEntries());    jGen.writeFieldName("properties");    jGen.writeStartArray();    for (    OFTableFeatureProp properties : tableFeature.getProperties()) {      jGen.writeStartObject();      short type=(short)properties.getType();      jGen.writeNumberField("tableFeaturePropType",type);switch (type) {case OFTableFeaturePropTypeSerializerVer13.INSTRUCTIONS_VAL:        OFTableFeaturePropInstructions propInstruct=(OFTableFeaturePropInstructions)properties;      jGen.writeFieldName("instructions");    jGen.writeStartArray();  for (  OFInstructionId id : propInstruct.getInstructionIds()) {    jGen.writeStartObject();    jGen.writeString(id.getType().toString());    jGen.writeEndObject();  }jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.INSTRUCTIONS_MISS_VAL:OFTableFeaturePropInstructionsMiss propInstructMiss=(OFTableFeaturePropInstructionsMiss)properties;jGen.writeFieldName("instructionsMiss");jGen.writeStartArray();for (OFInstructionId id : propInstructMiss.getInstructionIds()) {jGen.writeStartObject();jGen.writeString(id.getType().toString());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.NEXT_TABLES_VAL:OFTableFeaturePropNextTables propNxtTables=(OFTableFeaturePropNextTables)properties;jGen.writeFieldName("nextTables");jGen.writeStartArray();for (U8 id : propNxtTables.getNextTableIds()) {jGen.writeStartObject();jGen.writeNumber(id.getValue());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.NEXT_TABLES_MISS_VAL:OFTableFeaturePropNextTablesMiss propNxtTablesMiss=(OFTableFeaturePropNextTablesMiss)properties;jGen.writeFieldName("nextTablesMiss");jGen.writeStartArray();for (U8 id : propNxtTablesMiss.getNextTableIds()) {jGen.writeStartObject();jGen.writeNumber(id.getValue());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.WRITE_ACTIONS_VAL:OFTableFeaturePropWriteActions propWrAct=(OFTableFeaturePropWriteActions)properties;jGen.writeFieldName("writeActions");jGen.writeStartArray();for (OFActionId id : propWrAct.getActionIds()) {jGen.writeStartObject();jGen.writeString(id.getType().toString());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.WRITE_ACTIONS_MISS_VAL:OFTableFeaturePropWriteActionsMiss propWrActMiss=(OFTableFeaturePropWriteActionsMiss)properties;jGen.writeFieldName("writeActionsMiss");jGen.writeStartArray();for (OFActionId id : propWrActMiss.getActionIds()) {jGen.writeStartObject();jGen.writeString(id.getType().toString());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.APPLY_ACTIONS_VAL:OFTableFeaturePropApplyActions propAppAct=(OFTableFeaturePropApplyActions)properties;jGen.writeFieldName("applyActions");jGen.writeStartArray();for (OFActionId id : propAppAct.getActionIds()) {jGen.writeStartObject();jGen.writeString(id.getType().toString());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.APPLY_ACTIONS_MISS_VAL:OFTableFeaturePropApplyActionsMiss propAppActMiss=(OFTableFeaturePropApplyActionsMiss)properties;jGen.writeFieldName("applyActionsMiss");jGen.writeStartArray();for (OFActionId id : propAppActMiss.getActionIds()) {jGen.writeStartObject();jGen.writeString(id.getType().toString());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.MATCH_VAL:OFTableFeaturePropMatch propMatch=(OFTableFeaturePropMatch)properties;jGen.writeFieldName("match");jGen.writeStartArray();for (U32 id : propMatch.getOxmIds()) {jGen.writeStartObject();jGen.writeNumber(id.getValue());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.WILDCARDS_VAL:OFTableFeaturePropWildcards propWildcards=(OFTableFeaturePropWildcards)properties;jGen.writeFieldName("wildcards");jGen.writeStartArray();for (U32 id : propWildcards.getOxmIds()) {jGen.writeStartObject();jGen.writeNumber(id.getValue());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.WRITE_SETFIELD_VAL:OFTableFeaturePropWriteSetfield propWrSetfield=(OFTableFeaturePropWriteSetfield)properties;jGen.writeFieldName("writeSetfield");jGen.writeStartArray();for (U32 id : propWrSetfield.getOxmIds()) {jGen.writeStartObject();jGen.writeNumber(id.getValue());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.WRITE_SETFIELD_MISS_VAL:OFTableFeaturePropWriteSetfieldMiss propWrSetfieldMiss=(OFTableFeaturePropWriteSetfieldMiss)properties;jGen.writeFieldName("writeSetfieldMiss");jGen.writeStartArray();for (U32 id : propWrSetfieldMiss.getOxmIds()) {jGen.writeStartObject();jGen.writeNumber(id.getValue());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.APPLY_SETFIELD_VAL:OFTableFeaturePropApplySetfield propAppSetfield=(OFTableFeaturePropApplySetfield)properties;jGen.writeFieldName("applySetfield");jGen.writeStartArray();for (U32 id : propAppSetfield.getOxmIds()) {jGen.writeStartObject();jGen.writeNumber(id.getValue());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.APPLY_SETFIELD_MISS_VAL:OFTableFeaturePropApplySetfieldMiss propAppSetfieldMiss=(OFTableFeaturePropApplySetfieldMiss)properties;jGen.writeFieldName("applySetfieldMiss");jGen.writeStartArray();for (U32 id : propAppSetfieldMiss.getOxmIds()) {jGen.writeStartObject();jGen.writeNumber(id.getValue());jGen.writeEndObject();}jGen.writeEndArray();break;case OFTableFeaturePropTypeSerializerVer13.EXPERIMENTER_VAL:OFTableFeaturePropExperimenter propExp=(OFTableFeaturePropExperimenter)properties;jGen.writeFieldName("experimenter");jGen.writeStartObject();jGen.writeNumberField("subType",propExp.getSubtype());jGen.writeNumberField("experimenter",propExp.getExperimenter());jGen.writeStringField("subType",propExp.getExperimenterData().toString());jGen.writeEndObject();break;case OFTableFeaturePropTypeSerializerVer13.EXPERIMENTER_MISS_VAL:OFTableFeaturePropExperimenterMiss propExpMiss=(OFTableFeaturePropExperimenterMiss)properties;jGen.writeFieldName("experimenterMiss");jGen.writeStartObject();jGen.writeNumberField("subType",propExpMiss.getSubtype());jGen.writeNumberField("experimenter",propExpMiss.getExperimenter());jGen.writeStringField("subType",propExpMiss.getExperimenterData().toString());jGen.writeEndObject();break;default :break;}jGen.writeEndObject();}jGen.writeEndObject();}jGen.writeEndArray();}  }
class C{  public synchronized static <T>T unmarshal(InputStream inputStream,Class<T> tClass){  try {    JAXBContext jaxbContext=JAXBContext.newInstance(tClass);    Unmarshaller jaxbUnmarshaller=jaxbContext.createUnmarshaller();    return tClass.cast(jaxbUnmarshaller.unmarshal(inputStream));  } catch (  JAXBException je) {    _log.error("Unable to parse XML content.",je);  } finally {    try {      if (inputStream != null) {        inputStream.close();      }    } catch (    IOException ioe) {      _log.error("Unable to close input stream " + ioe.getMessage(),ioe);    }  }  return null;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.GLOSSARY___WORD_1:    return getWord_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static String toHexString(short s){  return toHexString(toByteArray(s));}  }
class C{  private byte[] extractRelevantValues(Cursor cursor,String[] settings){  final int settingsCount=settings.length;  byte[][] values=new byte[settingsCount * 2][];  if (!cursor.moveToFirst()) {    Log.e(TAG,"Couldn't read from the cursor");    return new byte[0];  }  int totalSize=0;  int backedUpSettingIndex=0;  Map<String,String> cachedEntries=new HashMap<String,String>();  for (int i=0; i < settingsCount; i++) {    String key=settings[i];    String value=cachedEntries.remove(key);    if (value == null) {      while (!cursor.isAfterLast()) {        String cursorKey=cursor.getString(COLUMN_NAME);        String cursorValue=cursor.getString(COLUMN_VALUE);        cursor.moveToNext();        if (key.equals(cursorKey)) {          value=cursorValue;          break;        }        cachedEntries.put(cursorKey,cursorValue);      }    }    if (value == null) {      continue;    }    byte[] keyBytes=key.getBytes();    totalSize+=INTEGER_BYTE_COUNT + keyBytes.length;    values[backedUpSettingIndex * 2]=keyBytes;    byte[] valueBytes=value.getBytes();    totalSize+=INTEGER_BYTE_COUNT + valueBytes.length;    values[backedUpSettingIndex * 2 + 1]=valueBytes;    backedUpSettingIndex++;    if (DEBUG) {      Log.d(TAG,"Backed up setting: " + key + "="+ value);    }  }  byte[] result=new byte[totalSize];  int pos=0;  final int keyValuePairCount=backedUpSettingIndex * 2;  for (int i=0; i < keyValuePairCount; i++) {    pos=writeInt(result,pos,values[i].length);    pos=writeBytes(result,pos,values[i]);  }  return result;}  }
class C{  public ComplexVector generateHermitianRandomVector(int dimension,Random random){  ComplexVector randomVector=new ComplexVector(dimension,Mode.HERMITIAN);  float[] coordinates=randomVector.getCoordinates();  for (int d=0; d < coordinates.length; d++)   coordinates[d]=(float)(random.nextFloat() - 0.5) / (float)coordinates.length;  return randomVector;}  }
class C{  protected synchronized void onResized(TerminalSize newSize){  if (lastKnownSize == null || !lastKnownSize.equals(newSize)) {    lastKnownSize=newSize;    for (    TerminalResizeListener resizeListener : resizeListeners) {      resizeListener.onResized(this,lastKnownSize);    }  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }  p_PA_SLA_Goal_ID=getRecord_ID();}  }
class C{  public void testGcdFirstZERO(){  byte bBytes[]={15,24,123,57,-15,24,123,57,-15,24,123,57};  int bSign=1;  byte rBytes[]={15,24,123,57,-15,24,123,57,-15,24,123,57};  BigInteger aNumber=BigInteger.ZERO;  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.gcd(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatadeletedatamiddle.class,args);}  }
class C{  public static String currentDefaultFormattedTimeStamp(){  try {    SimpleDateFormat sdf=new SimpleDateFormat(DEFAULT_TIME_STAMP_FORMAT);    final String formattedTimeStamp=sdf.format(new Date());    return formattedTimeStamp;  } catch (  IllegalArgumentException e) {    SimpleDateFormat sdf=new SimpleDateFormat(SAFE_TIME_STAMP_FORMAT);    final String formattedTimeStamp=sdf.format(new Date());    return formattedTimeStamp;  }}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  elementData=EMPTY_ELEMENTDATA;  s.defaultReadObject();  s.readInt();  if (size > 0) {    ensureCapacityInternal(size);    Object[] a=elementData;    for (int i=0; i < size; i++) {      a[i]=s.readObject();    }  }}  }
class C{  private static <T>void initializePlugin(final IPlugin<T> plugin,final T pluginInterface,final IPluginRegistry<IPlugin<T>> registry,final List<Pair<IPlugin<T>,Exception>> initializedPlugins){  registry.addPlugin(plugin);  try {    plugin.init(pluginInterface);  } catch (  final Exception exception) {    registry.removePlugin(plugin,DisabledPluginReason.ThrewOnInit);    initializedPlugins.add(new Pair<IPlugin<T>,Exception>(plugin,exception));  }}  }
class C{  public void testFloatValuePositive2(){  String a="27467238945723645782";  float result=2.7467239E19f;  float aNumber=new BigInteger(a).floatValue();  assertTrue(aNumber == result);}  }
class C{  public void testLegacyFloat() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new LegacyFloatField("value",30.1f,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyFloatField("value",-1.3f,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyFloatField("value",4.2f,Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.LEGACY_FLOAT));  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.FLOAT));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1.3",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4.2",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("30.1",searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  @SuppressWarnings("unchecked") @Override public void run(){  try {    final Stopwatch watch=Stopwatch.createStarted();    LOG.info("policies loader start.");    List<PolicyDefinition> current=client.listPolicies();    Map<String,PolicyDefinition> currPolicies=new HashMap<>();    current.forEach(null);    Collection<String> addedPolicies=CollectionUtils.subtract(currPolicies.keySet(),cachedPolicies.keySet());    Collection<String> removedPolicies=CollectionUtils.subtract(cachedPolicies.keySet(),currPolicies.keySet());    Collection<String> potentiallyModifiedPolicies=CollectionUtils.intersection(currPolicies.keySet(),cachedPolicies.keySet());    List<String> reallyModifiedPolicies=new ArrayList<>();    for (    String updatedPolicy : potentiallyModifiedPolicies) {      if (currPolicies.get(updatedPolicy) != null && !currPolicies.get(updatedPolicy).equals(cachedPolicies.get(updatedPolicy))) {        reallyModifiedPolicies.add(updatedPolicy);      }    }    boolean policyChanged=false;    if (addedPolicies.size() != 0 || removedPolicies.size() != 0 || reallyModifiedPolicies.size() != 0) {      policyChanged=true;    }    if (!policyChanged) {      LOG.info("policy is not changed since last run");      return;    }synchronized (this) {      for (      PolicyChangeListener listener : listeners) {        listener.onPolicyChange(current,addedPolicies,removedPolicies,reallyModifiedPolicies);      }    }    watch.stop();    LOG.info("policies loader completed. used time milliseconds: {}",watch.elapsed(TimeUnit.MILLISECONDS));    cachedPolicies=currPolicies;  } catch (  Throwable t) {    LOG.error("error loading policy, but continue to run",t);  }}  }
class C{  private void initializeTurnout(String systemName){  mSystemName=systemName;  mBit=AcelaAddress.getBitFromSystemName(systemName);  setState(UNKNOWN);}  }
class C{  @Override protected ForwardReference emit_pending_goto(int bTarget){  return asm.generatePendingJMP(bTarget);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isReadonly(){  return readonly;}  }
class C{  public HTMLWriter(boolean omitXHTMLNamespace){  nsSupport=new NamespaceSupport();  prefixTable=new Hashtable<String,String>();  forcedDeclTable=new Hashtable<String,Boolean>();  doneDeclTable=new Hashtable<String,String>();  outputProperties=new Properties();  setOutputProperty(METHOD,"html");  setOutputProperty(OMIT_XML_DECLARATION,"yes");  mOmitXHTMLNamespace=omitXHTMLNamespace;  mIgnoredTags=new Stack<String>();}  }
class C{  public WeekViewEvent(long id,String name,int startYear,int startMonth,int startDay,int startHour,int startMinute,int endYear,int endMonth,int endDay,int endHour,int endMinute){  this.mId=id;  this.mStartTime=Calendar.getInstance();  this.mStartTime.set(Calendar.YEAR,startYear);  this.mStartTime.set(Calendar.MONTH,startMonth - 1);  this.mStartTime.set(Calendar.DAY_OF_MONTH,startDay);  this.mStartTime.set(Calendar.HOUR_OF_DAY,startHour);  this.mStartTime.set(Calendar.MINUTE,startMinute);  this.mEndTime=Calendar.getInstance();  this.mEndTime.set(Calendar.YEAR,endYear);  this.mEndTime.set(Calendar.MONTH,endMonth - 1);  this.mEndTime.set(Calendar.DAY_OF_MONTH,endDay);  this.mEndTime.set(Calendar.HOUR_OF_DAY,endHour);  this.mEndTime.set(Calendar.MINUTE,endMinute);  this.mName=name;}  }
class C{  @Override public void releaseSavepoint(Savepoint savepoint) throws SQLException {  try {    debugCode("releaseSavepoint(savepoint);");    checkClosed();    convertSavepoint(savepoint).release();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @SuppressWarnings("unchecked") public final T operationThreaded(boolean threadedOperation){  this.threadedOperation=threadedOperation;  return (T)this;}  }
class C{  private static <T>void batchFastListSelect(T[] array,int start,int end,FastListSelectProcedure<T> castProcedure){  for (int i=start; i < end; i++) {    castProcedure.value(array[i]);  }}  }
class C{  public final String host(){  return _rawHost;}  }
class C{  public synchronized void clear(String profileName){  super.clearImpl(profileName);}  }
class C{  public static void assertTitle(String title){  if (verbose) {    log("assertTitle(" + title + ")");  }  assertBool(Display.getInstance().getCurrent().getTitle().equals(title),title);}  }
class C{  protected Map<String,Double> loadBingLiu() throws FileNotFoundException {  Map<String,Double> lexiMap=new HashMap<String,Double>();  File file=new File("resources/lexi/bingliu/positive-words.txt");  Scanner scanner=new Scanner(file);  while (scanner.hasNextLine()) {    lexiMap.put(scanner.nextLine(),1.0);  }  scanner.close();  File file2=new File("resources/lexi/bingliu/negative-words.txt");  Scanner scanner2=new Scanner(file2);  while (scanner2.hasNextLine()) {    lexiMap.put(scanner2.nextLine(),-1.0);  }  scanner2.close();  return lexiMap;}  }
class C{  @Override public int compareTo(ZoneOffsetTransition transition){  return Long.compare(this.toEpochSecond(),transition.toEpochSecond());}  }
class C{  static final void moveAndResize(final Memory srcMem,final int preambleLongs,final int srcLgArrLongs,final Memory dstMem,final int dstLgArrLongs,final long thetaLong){  int preBytes=preambleLongs << 3;  NativeMemory.copy(srcMem,0,dstMem,0,preBytes);  int srcHTLen=1 << srcLgArrLongs;  long[] srcHTArr=new long[srcHTLen];  srcMem.getLongArray(preBytes,srcHTArr,0,srcHTLen);  int dstHTLen=1 << dstLgArrLongs;  long[] dstHTArr=new long[dstHTLen];  HashOperations.hashArrayInsert(srcHTArr,dstHTArr,dstLgArrLongs,thetaLong);  dstMem.putLongArray(preBytes,dstHTArr,0,dstHTLen);  dstMem.putByte(LG_ARR_LONGS_BYTE,(byte)dstLgArrLongs);}  }
class C{  @Override public void evict(final Project.NameKey p){  if (p != null) {    byName.invalidate(p.get());  }}  }
class C{  public void logInWithPublishPermissions(Activity activity,Collection<String> permissions){  validatePublishPermissions(permissions);  LoginClient.Request loginRequest=createLoginRequest(permissions);  startLogin(new ActivityStartActivityDelegate(activity),loginRequest);}  }
class C{  public Builder notificationClickAction(String value){  notificationParams.put("click_action",value);  return this;}  }
class C{  public void actionPerformed(ActionEvent e){  String m_value=m_text.getText();  log.config(m_value);  String fieldName=null;  if (m_field != null)   fieldName=m_field.getHeader(); else   fieldName=Msg.getElement(Env.getCtx(),m_columnName);  JFileChooser chooser=new JFileChooser(m_value);  chooser.setMultiSelectionEnabled(false);  chooser.setFileSelectionMode(m_selectionMode);  chooser.setDialogTitle(fieldName);  chooser.setDialogType(m_dialogType);  int returnVal=-1;  if (m_dialogType == JFileChooser.SAVE_DIALOG)   returnVal=chooser.showSaveDialog(this); else   if (m_dialogType == JFileChooser.OPEN_DIALOG)   returnVal=chooser.showOpenDialog(this); else   returnVal=chooser.showDialog(this,fieldName);  if (returnVal != JFileChooser.APPROVE_OPTION)   return;  File selectedFile=chooser.getSelectedFile();  m_text.setText(selectedFile.getAbsolutePath());  try {    fireVetoableChange(m_columnName,m_oldText,m_text.getText());  } catch (  PropertyVetoException pve) {  }}  }
class C{  public static boolean deleteFilesAndDirsRecursive(final File directory){  if (directory == null || !directory.isDirectory()) {    Log.e(FileUtils.class,"deleteFilesAndDirsRecursive(): Null parameter given or not a Directory");    return false;  }  return deleteFilesAndDirs(directory);}  }
class C{  @SuppressWarnings("deprecation") public ECPublicKeyImpl(ECPoint w,ECParameterSpec params) throws InvalidKeyException {  this.w=w;  this.params=params;  algid=new AlgorithmId(AlgorithmId.EC_oid,ECParameters.getAlgorithmParameters(params));  key=ECUtil.encodePoint(w,params.getCurve());}  }
class C{  public static EWMA oneMinuteEWMA(){  return new EWMA(M1_ALPHA,INTERVAL,TimeUnit.SECONDS);}  }
class C{  public void stop(){  mCancel=true;  if (mRunning.compareAndSet(true,false)) {    if (mSampleDispatcherTask != null) {      mSampleDispatcherTask.cancel(true);      mFilledBuffers.clear();    }  }}  }
class C{  public Partition(int noPartitions,int size,PartitionBuilder builder){  double[] ratio=new double[noPartitions];  for (int i=0; i < ratio.length; i++) {    ratio[i]=1 / (double)noPartitions;  }  init(ratio,size,builder);}  }
class C{  private void pruneScrapViews(){  final int maxViews=activeViews.length;  final int viewTypeCount=this.viewTypeCount;  final SparseArray<View>[] scrapViews=this.scrapViews;  for (int i=0; i < viewTypeCount; ++i) {    final SparseArray<View> scrapPile=scrapViews[i];    int size=scrapPile.size();    final int extras=size - maxViews;    size--;    for (int j=0; j < extras; j++) {      scrapPile.remove(scrapPile.keyAt(size--));    }  }}  }
class C{  private void buildLine(HalfEdge eStart){  CoordinateList line=new CoordinateList();  DissolveHalfEdge e=(DissolveHalfEdge)eStart;  ringStartEdge=null;  MarkHalfEdge.markBoth(e);  line.add(e.orig().clone(),false);  while (e.sym().degree() == 2) {    updateRingStartEdge(e);    DissolveHalfEdge eNext=(DissolveHalfEdge)e.next();    if (eNext == eStart) {      buildRing(ringStartEdge);      return;    }    line.add(eNext.orig().clone(),false);    e=eNext;    MarkHalfEdge.markBoth(e);  }  line.add(e.dest().clone(),false);  stackEdges(e.sym());  addLine(line);}  }
class C{  public void doTrain(PrintWriter fout){  long start_train, end_train, elapsed_train;  long start_iter, end_iter, elapsed_iter;  init();  double f=0.0;  double xtol=1.0e-16;  int numIter=0;  iprint[0]=model.option.debugLevel - 2;  iprint[1]=model.option.debugLevel - 1;  iflag[0]=0;  int i;  for (i=0; i < numFeatures; i++) {    lambda[i]=model.option.initLambdaVal;  }  System.out.println("Start to train ...");  if (model.option.isLogging) {    model.option.writeOptions(fout);    fout.println("Start to train ...");  }  start_train=System.currentTimeMillis();  double maxAccuracy=0.0;  int maxAccuracyIter=-1;  do {    start_iter=System.currentTimeMillis();    f=computeLogLiGradient(lambda,gradLogLi,numIter + 1,fout);    f*=-1;    for (i=0; i < numFeatures; i++) {      gradLogLi[i]*=-1;    }    try {      new LBFGS().lbfgs(numFeatures,model.option.mForHessian,lambda,f,gradLogLi,false,diag,iprint,model.option.epsForConvergence,xtol,iflag);    } catch (    LBFGS.ExceptionWithIflag e) {      System.out.println("L-BFGS failed!");      if (model.option.isLogging) {        fout.println("L-BFGS failed!");      }      break;    }    numIter++;    end_iter=System.currentTimeMillis();    elapsed_iter=end_iter - start_iter;    System.out.println("\tIteration elapsed: " + Double.toString((double)elapsed_iter / 1000) + " seconds");    if (model.option.isLogging) {      fout.println("\tIteration elapsed: " + Double.toString((double)elapsed_iter / 1000) + " seconds");    }    if (model.option.evaluateDuringTraining) {      model.doInference(model.data.tstData);      double accuracy=model.evaluation.evaluate(fout);      if (accuracy > maxAccuracy) {        maxAccuracy=accuracy;        maxAccuracyIter=numIter;        if (model.option.saveBestModel) {          for (i=0; i < numFeatures; i++) {            tempLambda[i]=lambda[i];          }        }      }      System.out.println("\tCurrent max accuracy: " + Double.toString(maxAccuracy) + " (at iteration "+ Integer.toString(maxAccuracyIter)+ ")");      if (model.option.isLogging) {        fout.println("\tCurrent max accuracy: " + Double.toString(maxAccuracy) + " (at iteration "+ Integer.toString(maxAccuracyIter)+ ")");      }      end_iter=System.currentTimeMillis();      elapsed_iter=end_iter - start_iter;      System.out.println("\tIteration elapsed (including testing & evaluation): " + Double.toString((double)elapsed_iter / 1000) + " seconds");      if (model.option.isLogging) {        fout.println("\tIteration elapsed (including testing & evaluation): " + Double.toString((double)elapsed_iter / 1000) + " seconds");        fout.flush();      }    }  } while (iflag[0] != 0 && numIter < model.option.numIterations);  end_train=System.currentTimeMillis();  elapsed_train=end_train - start_train;  System.out.println("\tThe training process elapsed: " + Double.toString((double)elapsed_train / 1000) + " seconds");  if (model.option.isLogging) {    fout.println("\tThe training process elapsed: " + Double.toString((double)elapsed_train / 1000) + " seconds");  }  if (model.option.evaluateDuringTraining && model.option.saveBestModel) {    for (i=0; i < numFeatures; i++) {      lambda[i]=tempLambda[i];    }  }}  }
class C{  public FixedRateBond(final int settlementDays,final Calendar calendar,final double faceAmount,final Date startDate,final Date maturityDate,final Period tenor,final double[] coupons,final DayCounter accrualDayCounter,final BusinessDayConvention accrualConvention,final BusinessDayConvention paymentConvention){  this(settlementDays,calendar,faceAmount,startDate,maturityDate,tenor,coupons,accrualDayCounter,accrualConvention,paymentConvention,100.0,new Date(),new Date(),DateGeneration.Rule.Backward,false);}  }
class C{  public WritableRaster createWritableChild(int parentX,int parentY,int w,int h,int childMinX,int childMinY,int bandList[]){  if (parentX < this.minX) {    throw new RasterFormatException("parentX lies outside raster");  }  if (parentY < this.minY) {    throw new RasterFormatException("parentY lies outside raster");  }  if ((parentX + w < parentX) || (parentX + w > this.width + this.minX)) {    throw new RasterFormatException("(parentX + width) is outside raster");  }  if ((parentY + h < parentY) || (parentY + h > this.height + this.minY)) {    throw new RasterFormatException("(parentY + height) is outside raster");  }  SampleModel sm;  if (bandList != null) {    sm=sampleModel.createSubsetSampleModel(bandList);  } else {    sm=sampleModel;  }  int deltaX=childMinX - parentX;  int deltaY=childMinY - parentY;  return new WritableRaster(sm,getDataBuffer(),new Rectangle(childMinX,childMinY,w,h),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this);}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (mv != null) {    return mv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  private void removeDevice(Versioned<DeviceSyncRepresentation> dev){  try {    cntDeviceRemovedFromStore.increment();    storeClient.delete(dev.getValue().getKey(),dev.getVersion());  } catch (  ObsoleteVersionException e) {  }catch (  SyncException e) {    cntSyncException.increment();    logger.error("Failed to remove device entry for " + dev.toString() + " from store.",e);  }}  }
class C{  public void cleanTemplate(String ID){  runURLRequest("Template",ID);}  }
class C{  public boolean isCellEditable(EventObject e){  return true;}  }
class C{  @Inject public MergePresenter(MergeView view,SubversionClientService service,AppContext appContext,SubversionOutputConsoleFactory consoleFactory,SubversionCredentialsDialog subversionCredentialsDialog,ProcessesPanelPresenter processesPanelPresenter,NotificationManager notificationManager,SubversionExtensionLocalizationConstants constants,StatusColors statusColors){  super(appContext,consoleFactory,processesPanelPresenter,statusColors,constants,notificationManager,subversionCredentialsDialog);  this.view=view;  this.service=service;  this.notificationManager=notificationManager;  this.constants=constants;  view.setDelegate(this);}  }
class C{  static void startCommandLineTasks(){  try {    TmmTask task=null;    boolean updateAvailable=false;    if (scrapeNew || scrapeUnscraped || scrapeAll) {      Utils.trackEvent("cmd");      final SwingWorker<Boolean,Void> updateWorker=new UpdaterTask();      updateWorker.run();      updateAvailable=updateWorker.get();      if (updateAvailable) {        LOGGER.warn("There's a new TMM update available!");        LOGGER.warn("Please update to remove waiting time ;)");        for (int i=20; i > 0; i--) {          System.out.print(i + "..");          Thread.sleep(1000);        }        System.out.println("0");      }    }    if (updateMovies) {      LOGGER.info("Commandline - updating movies...");      if (updateMovieDs.isEmpty()) {        task=new MovieUpdateDatasourceTask2();        task.run();      } else {        List<String> dataSources=new ArrayList<>(MovieModuleManager.MOVIE_SETTINGS.getMovieDataSource());        for (        Integer i : updateMovieDs) {          if (dataSources != null && dataSources.size() >= i - 1) {            task=new MovieUpdateDatasourceTask2(dataSources.get(i - 1));            task.run();          }        }      }      LOGGER.info("Found " + MovieList.getInstance().getNewMovies().size() + " new movies");    }    List<Movie> moviesToScrape=new ArrayList<>();    if (scrapeAll) {      LOGGER.info("Commandline - scraping ALL movies...");      if (MovieList.getInstance().getMovieCount() > 0) {        moviesToScrape=MovieList.getInstance().getMovies();      }    } else {      HashSet<Movie> scrape=new HashSet<Movie>();      if (scrapeNew) {        LOGGER.info("Commandline - scraping new movies...");        List<Movie> newMovies=MovieList.getInstance().getNewMovies();        if (newMovies.size() > 0) {          scrape.addAll(newMovies);        }      }      if (scrapeUnscraped) {        LOGGER.info("Commandline - scraping all unscraped movies...");        List<Movie> unscrapedMovies=MovieList.getInstance().getUnscrapedMovies();        if (unscrapedMovies.size() > 0) {          scrape.addAll(unscrapedMovies);        }      }      moviesToScrape.addAll(new ArrayList<Movie>(scrape));    }    if (moviesToScrape.size() > 0) {      MovieSearchAndScrapeOptions options=new MovieSearchAndScrapeOptions();      options.loadDefaults();      if (dryRun) {        for (        Movie movie : moviesToScrape) {          LOGGER.info("DRYRUN: would have scraped " + movie.getTitle());        }      } else {        task=new MovieScrapeTask(moviesToScrape,true,options);        task.run();        while (TmmTaskManager.getInstance().poolRunning()) {          Thread.sleep(2000);        }      }    }    if (rename) {      LOGGER.info("Commandline - rename & cleanup movies...");      if (moviesToScrape.size() > 0) {        if (dryRun) {          for (          Movie movie : moviesToScrape) {            LOGGER.info("DRYRUN: would have renamed " + movie.getTitle());          }        } else {          task=new MovieRenameTask(moviesToScrape);          task.run();        }      }    }    if (updateTv) {      LOGGER.info("Commandline - updating TvShows and episodes...");      if (updateTvDs.isEmpty()) {        task=new TvShowUpdateDatasourceTask2();        task.run();      } else {        List<String> dataSources=new ArrayList<>(TvShowModuleManager.SETTINGS.getTvShowDataSource());        for (        Integer i : updateTvDs) {          if (dataSources != null && dataSources.size() >= i - 1) {            task=new TvShowUpdateDatasourceTask2(dataSources.get(i - 1));            task.run();          }        }      }      LOGGER.info("Commandline - found " + TvShowList.getInstance().getNewTvShows().size() + " TvShow(s) containing "+ TvShowList.getInstance().getNewEpisodes().size()+ " new episode(s)");    }    List<TvShow> showToScrape=new ArrayList<>();    List<TvShowEpisode> episodeToScrape=new ArrayList<>();    if (scrapeAll) {      LOGGER.info("Commandline - scraping ALL TvShows...");      if (TvShowList.getInstance().getTvShowCount() > 0) {        showToScrape=TvShowList.getInstance().getTvShows();        episodeToScrape.clear();      }    } else {      HashSet<TvShow> scrapeShow=new HashSet<>();      HashSet<TvShowEpisode> scrapeEpisode=new HashSet<>();      if (scrapeNew) {        List<TvShow> newTv=TvShowList.getInstance().getNewTvShows();        List<TvShowEpisode> newEp=TvShowList.getInstance().getNewEpisodes();        LOGGER.info("Commandline - scraping new TvShows...");        if (newTv.size() > 0) {          scrapeShow.addAll(newTv);        }        LOGGER.info("Commandline - scraping new episodes...");        if (newEp.size() > 0) {          scrapeEpisode.addAll(newEp);        }      }      if (scrapeUnscraped) {        LOGGER.info("Commandline - scraping unscraped TvShows...");        List<TvShow> unscrapedShows=TvShowList.getInstance().getUnscrapedTvShows();        List<TvShowEpisode> unscrapedEpisodes=TvShowList.getInstance().getUnscrapedEpisodes();        if (unscrapedShows.size() > 0) {          scrapeShow.addAll(unscrapedShows);        }        LOGGER.info("Commandline - scraping unscraped episodes...");        if (unscrapedEpisodes.size() > 0) {          scrapeEpisode.addAll(unscrapedEpisodes);        }      }      HashSet<TvShowEpisode> removedEpisode=new HashSet<>();      for (      TvShowEpisode ep : scrapeEpisode) {        if (scrapeShow.contains(ep.getTvShow())) {          removedEpisode.add(ep);        }      }      scrapeEpisode.removeAll(removedEpisode);      showToScrape=new ArrayList<>(scrapeShow);      episodeToScrape=new ArrayList<>(scrapeEpisode);    }    TvShowSearchAndScrapeOptions options=new TvShowSearchAndScrapeOptions();    options.loadDefaults();    if (showToScrape.size() > 0) {      if (dryRun) {        for (        TvShow show : showToScrape) {          LOGGER.info("DRYRUN: would have scraped show " + show.getTitle() + " with "+ show.getEpisodeCount()+ " episodes");        }      } else {        task=new TvShowScrapeTask(showToScrape,true,options);        task.run();        while (TmmTaskManager.getInstance().poolRunning()) {          Thread.sleep(2000);        }      }    }    if (episodeToScrape.size() > 0) {      if (dryRun) {        for (        TvShowEpisode ep : episodeToScrape) {          LOGGER.info("DRYRUN: would have scraped episode " + ep.getTvShow().getTitle() + " S:"+ ep.getSeason()+ " E:"+ ep.getEpisode());        }      } else {        task=new TvShowEpisodeScrapeTask(episodeToScrape,options.getMetadataScraper());        task.run();        while (TmmTaskManager.getInstance().poolRunning()) {          Thread.sleep(2000);        }      }    }    if (rename) {      LOGGER.info("Commandline - rename & cleanup new shows...");      if (showToScrape.size() > 0) {        if (dryRun) {          for (          TvShow show : showToScrape) {            LOGGER.info("DRYRUN: would have renamed show " + show.getTitle() + " with "+ show.getEpisodeCount()+ " episodes");          }        } else {          task=new TvShowRenameTask(showToScrape,null,true);          task.run();          while (TmmTaskManager.getInstance().poolRunning()) {            Thread.sleep(2000);          }        }      }      LOGGER.info("Commandline - rename & cleanup new episodes...");      if (episodeToScrape.size() > 0) {        if (dryRun) {          for (          TvShowEpisode ep : episodeToScrape) {            LOGGER.info("DRYRUN: would have renamed episode " + ep.getTvShow().getTitle() + " S:"+ ep.getSeason()+ " E:"+ ep.getEpisode());          }        } else {          task=new TvShowRenameTask(null,episodeToScrape,true);          task.run();        }      }    }    if (checkFiles) {      boolean allOk=true;      LOGGER.info("Check all files if existing");      for (      Movie m : MovieList.getInstance().getMovies()) {        System.out.print(".");        for (        MediaFile mf : m.getMediaFiles()) {          if (!mf.exists()) {            System.out.println();            LOGGER.warn("MediaFile not found! " + mf.getFileAsPath());            allOk=false;          }        }      }      for (      TvShow s : TvShowList.getInstance().getTvShows()) {        System.out.print(".");        for (        MediaFile mf : s.getMediaFiles()) {          if (!mf.exists()) {            System.out.println();            LOGGER.warn("MediaFile not found! " + mf.getFileAsPath());            allOk=false;          }        }        for (        TvShowEpisode episode : new ArrayList<>(s.getEpisodes())) {          for (          MediaFile mf : episode.getMediaFiles()) {            if (!mf.exists()) {              System.out.println();              LOGGER.warn("MediaFile not found! " + mf.getFileAsPath());              allOk=false;            }          }        }      }      System.out.println();      if (allOk) {        LOGGER.info("no problems found - everything ok :)");      }    }    if (updateAvailable) {      LOGGER.warn("=====================================================");      LOGGER.warn("There's a new TMM version available! Please update!");      LOGGER.warn("=====================================================");    }  } catch (  Exception e) {    LOGGER.error("Error executing command line task!",e);  }}  }
class C{  @Override public int writeTelegram(char[] buffer,int type,Object id){  return enqueueTelegram(buffer);}  }
class C{  public boolean forEachEntry(TLongFloatProcedure procedure){  byte[] states=_states;  long[] keys=_set;  float[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  public static void notifyParentTask(Service service,TaskState taskState,String parentTaskServiceLink,String parentPatchBody){  if (parentTaskServiceLink == null) {    ServiceUtils.logInfo(service,"Skipping parent task notification");    return;  }  Operation patchOp=Operation.createPatch(service,parentTaskServiceLink);switch (taskState.stage) {case FINISHED:    if (parentPatchBody != null) {      patchOp.setBody(parentPatchBody);      break;    }case FAILED:case CANCELLED:  TaskServiceState taskServiceState=new TaskServiceState();taskServiceState.taskState=taskState;patchOp.setBody(taskServiceState);break;default :throw new IllegalStateException("Unexpected task state:" + taskState.stage);}service.sendRequest(patchOp);}  }
class C{  void clearGrantor(long grantorVersion,boolean withLocks){  GrantorRequestProcessor.clearGrantor(grantorVersion,this,getSerialNumber(),this.ds,withLocks);}  }
class C{  public CDisplayOperandAction(final COperandTreeNode treeNode,final OperandDisplayStyle displayStyle,final String displayName){  super(displayName);  this.treeNode=treeNode;  this.displayStyle=displayStyle;}  }
class C{  public boolean isShowingPopup(){  return getListPopupWindow().isShowing();}  }
class C{  protected void uninstallListeners(){  super.uninstallListeners();  splitPane.removePropertyChangeListener(this);}  }
class C{  public SID(SID domsid,int rid){  this.revision=domsid.revision;  this.identifier_authority=domsid.identifier_authority;  this.sub_authority_count=(byte)(domsid.sub_authority_count + 1);  this.sub_authority=new int[this.sub_authority_count];  int i;  for (i=0; i < domsid.sub_authority_count; i++) {    this.sub_authority[i]=domsid.sub_authority[i];  }  this.sub_authority[i]=rid;}  }
class C{  private String versionName(String prefix,int ver){  ver=(ver == 0) ? version : ver;  return fName(prefix) + String.valueOf(ver);}  }
class C{  private InstanceResult createInstanceResult(InstanceStatus status){  InstanceResult instanceResult=new InstanceResult();  InstanceInfo instanceInfo=new InstanceInfo();  instanceInfo.setAccessInfo(status.getAccessInfo());  instanceInfo.setBaseUrl(status.getBaseUrl());  instanceInfo.setLoginPath(status.getLoginPath());  instanceResult.setRc(0);  instanceResult.setInstance(instanceInfo);  return instanceResult;}  }
class C{  private void updateValue(){  setProgress((int)Math.round((mValue - mMinValue) / (mMaxValue - mMinValue) * getTotalSteps()));}  }
class C{  public void decodeTilePixels(byte[] input,Rectangle rect,byte[] bpixels){  for (int i=0; i < unitsInThisTile; i++) {    bpixels[i]=input[i];  }}  }
class C{  @Override public void invokeCommand(int argLength,String[] args,String command){  boolean run=true;  Toast.log().info("Interactive Toast JavaScript console.");  while (run) {    try {      String message=CommandBus.requestNextMessage();      if (message == null) {        run=false;        continue;      }      if (message.equals("exit") || message.equals("stop")) {        run=false;        continue;      }      Object ret=JavaScript.eval(message);      if (ret != null)       Toast.log().raw("#=> " + ret.toString()); else       Toast.log().raw("#=> null");    } catch (    InterruptedException e) {      run=false;    }catch (    Exception e) {      e.printStackTrace();    }  }  Toast.log().info("Interactive JavaScript console stopped.");}  }
class C{  public void testResourcesAvailable(){  new TurkishAnalyzer().close();}  }
class C{  protected BufferedInputStream startDownload(String bucketName,String key){  S3Object object=amazonS3.getObject(bucketName,key);  S3ObjectInputStream inputStream=object.getObjectContent();  return new BufferedInputStream(inputStream);}  }
class C{  public static Spannable filterFromResource(Context context,Spannable spannable,int fontSize,String headName,EmojiDisplayListener emojiDisplayListener){  if (spannable == null) {    return null;  }  Matcher m=getMatcher(spannable.toString());  if (m != null) {    while (m.find()) {      String emojiHex=Integer.toHexString(Character.codePointAt(m.group(),0));      if (emojiDisplayListener == null) {        Drawable drawable=getDrawable(context,headName + emojiHex);        if (drawable != null) {          int itemHeight;          int itemWidth;          if (fontSize == WRAP_DRAWABLE) {            itemHeight=drawable.getIntrinsicHeight();            itemWidth=drawable.getIntrinsicWidth();          } else {            itemHeight=fontSize;            itemWidth=fontSize;          }          drawable.setBounds(0,0,itemHeight,itemWidth);          EmojiSpan imageSpan=new EmojiSpan(drawable);          spannable.setSpan(imageSpan,m.start(),m.end(),Spannable.SPAN_INCLUSIVE_EXCLUSIVE);        }      } else {        emojiDisplayListener.onEmojiDisplay(context,spannable,headName + emojiHex,fontSize,m.start(),m.end());      }    }  }  return spannable;}  }
class C{  public static void renderTemplateAtLocation(String templateLocation,Map<String,Object> context,Appendable outWriter) throws MalformedURLException, TemplateException, IOException {  renderTemplate(templateLocation,context,outWriter);}  }
class C{  public Env<A> enclosing(JCTree.Tag tag){  Env<A> env1=this;  while (env1 != null && !env1.tree.hasTag(tag))   env1=env1.next;  return env1;}  }
class C{  public boolean rejectIt(){  log.info("rejectIt - " + toString());  setIsApproved(false);  return true;}  }
class C{  public static Dag markovBlanketDag(Node target,Graph dag){  if (dag.getNode(target.getName()) == null) {    throw new NullPointerException("Target node not in graph: " + target);  }  Graph blanket=new EdgeListGraph();  blanket.addNode(target);  List<Node> parents=dag.getParents(target);  for (  Object parent1 : parents) {    Node parent=(Node)parent1;    blanket.addNode(parent);    blanket.addDirectedEdge(parent,target);  }  List<Node> children=dag.getChildren(target);  List<Node> parentsOfChildren=new LinkedList<>();  for (  Object aChildren : children) {    Node child=(Node)aChildren;    if (!blanket.containsNode(child)) {      blanket.addNode(child);    }    blanket.addDirectedEdge(target,child);    List<Node> parentsOfChild=dag.getParents(child);    parentsOfChild.remove(target);    for (    Object aParentsOfChild : parentsOfChild) {      Node parentOfChild=(Node)aParentsOfChild;      if (!parentsOfChildren.contains(parentOfChild)) {        parentsOfChildren.add(parentOfChild);      }      if (!blanket.containsNode(parentOfChild)) {        blanket.addNode(parentOfChild);      }      blanket.addDirectedEdge(parentOfChild,child);    }  }  parentsOfChildren.removeAll(parents);  for (  Object parent2 : parents) {    Node parent=(Node)parent2;    for (    Object aParentsOfChildren : parentsOfChildren) {      Node parentOfChild=(Node)aParentsOfChildren;      Edge edge1=dag.getEdge(parent,parentOfChild);      Edge edge2=blanket.getEdge(parent,parentOfChild);      if (edge1 != null && edge2 == null) {        Edge newEdge=new Edge(parent,parentOfChild,edge1.getProximalEndpoint(parent),edge1.getProximalEndpoint(parentOfChild));        blanket.addEdge(newEdge);      }    }  }  for (  Object aChildren1 : children) {    Node child=(Node)aChildren1;    for (    Object aParentsOfChildren : parentsOfChildren) {      Node parentOfChild=(Node)aParentsOfChildren;      Edge edge1=dag.getEdge(child,parentOfChild);      Edge edge2=blanket.getEdge(child,parentOfChild);      if (edge1 != null && edge2 == null) {        Edge newEdge=new Edge(child,parentOfChild,edge1.getProximalEndpoint(child),edge1.getProximalEndpoint(parentOfChild));        blanket.addEdge(newEdge);      }    }  }  return new Dag(blanket);}  }
class C{  public IndexMaintenanceException(String msg){  super(msg);}  }
class C{  @Override protected void onUserRefreshed(DerpibooruUser user){  if ((recyclerView == null) || (recyclerView.getAdapter() == null)) {    return;  }  if (user.isLoggedIn() != getUser().isLoggedIn()) {    mImageListPresenter.resetAdapterAndRefreshList();  } else   if (!user.getCurrentFilter().equals(getUser().getCurrentFilter())) {    mImageListPresenter.refreshList();  }}  }
class C{  ReadOnlyGameSettings(ReadOnlyGameSettings copy){  this.title=copy.title;  this.version=copy.version;  this.width=copy.width;  this.height=copy.height;  this.fullScreen=copy.fullScreen;  this.introEnabled=copy.introEnabled;  this.menuEnabled=copy.menuEnabled;  this.profilingEnabled=copy.profilingEnabled;  this.closeConfirmation=copy.closeConfirmation;  this.appMode=copy.appMode;  this.menuStyle=copy.menuStyle;  this.menuKey=copy.menuKey;  this.credits=new Credits(copy.credits);  this.services=copy.services;}  }
class C{  @Override public void characters(char[] ch,int start,int length) throws SAXException {  if (collectCharactersForElement != null) {    charactersCollector.append(ch,start,length);  }}  }
class C{  @LogMessageDocs({@LogMessageDoc(level="WARN",message="Failed to cleanly shut down RPC server",explanation="Could not close all open sockets cleanly"),@LogMessageDoc(level="WARN",message="Interrupted while shutting down RPC server",explanation="Could not close all open sockets cleanly")}) public void shutdown(){  shutDown=true;  try {    if (!cg.close().await(5,TimeUnit.SECONDS)) {      logger.warn("Failed to cleanly shut down RPC server");      return;    }    if (clientBootstrap != null)     clientBootstrap.releaseExternalResources();    clientBootstrap=null;    if (serverBootstrap != null)     serverBootstrap.releaseExternalResources();    serverBootstrap=null;    if (pipelineFactory != null)     pipelineFactory.releaseExternalResources();    pipelineFactory=null;    if (bossExecutor != null)     bossExecutor.shutdown();    bossExecutor=null;    if (workerExecutor != null)     workerExecutor.shutdown();    workerExecutor=null;  } catch (  InterruptedException e) {    logger.warn("Interrupted while shutting down RPC server");  }  logger.debug("Internal floodlight RPC shut down");}  }
class C{  public static <T>Subscription scalarSubscription(Subscriber<? super T> subscriber,T value){  return new ScalarSubscription<>(subscriber,value);}  }
class C{  public static void clear(IJavaProject eclipseProject,IProgressMonitor monitor) throws JavaModelException {  setClasspathContainer(eclipseProject,ImmutableList.<IClasspathEntry>of(),monitor);}  }
class C{  Node(int symbol,int bits){  this.children=null;  this.symbol=symbol;  int b=bits & 0x07;  this.terminalBits=b == 0 ? 8 : b;}  }
class C{  public short randomValueFromClosedInterval(short min,short max,MersenneTwisterFast random){  if (max - min < 0) {    short l=0;    do     l=(short)random.nextInt(); while (l < min || l > max);    return l;  } else   return (short)(min + random.nextInt(max - min + 1));}  }
class C{  private static String appendIfMissing(final String str,final CharSequence suffix,final boolean ignoreCase,final CharSequence... suffixes){  if (str == null || isEmpty(suffix) || endsWith(str,suffix,ignoreCase)) {    return str;  }  if (suffixes != null && suffixes.length > 0) {    for (    final CharSequence s : suffixes) {      if (endsWith(str,s,ignoreCase)) {        return str;      }    }  }  return str + suffix.toString();}  }
class C{  @Override public ChatEvent parse(String text){  if (text.length() < 600) {    RaptorStringTokenizer stringtokenizer=new RaptorStringTokenizer(text," ");    if (stringtokenizer.hasMoreTokens()) {      String source=stringtokenizer.nextToken();      if (stringtokenizer.hasMoreTokens()) {        String s2=stringtokenizer.nextToken();        if (s2.equals(IDENTIFIER)) {          int j=text.indexOf('[');          int k=text.indexOf(']');          return new ChatEvent(IcsUtils.stripTitles(source).trim(),ChatType.WHISPER,text.trim(),text.substring(j + 1,k));        }      }    }    return null;  }  return null;}  }
class C{  public boolean isTranslationEnabled(){  return mIsTranslationEnabled;}  }
class C{  public void clearHalted(){synchronized (this) {    beenHalted=false;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.911 -0500",hash_original_method="E1712F68819C23F51EC20285F128AE0A",hash_generated_method="E1712F68819C23F51EC20285F128AE0A") void _setWantDont(int option){  _options[option]&=~_REQUESTED_DO_MASK;}  }
class C{  private WebDoc(){}  }
class C{  public static String createTempFile(String prefix,String suffix,boolean deleteOnExit,boolean inTempDir) throws IOException {  return FilePath.get(prefix).createTempFile(suffix,deleteOnExit,inTempDir).toString();}  }
class C{  public List<VolumeRestRep> findByWwn(String wwn){  return search().byWwn(wwn).run();}  }
class C{  public void visitClassType(String name){}  }
class C{  public StringLit_ createStringLit_(){  StringLit_Impl stringLit_=new StringLit_Impl();  return stringLit_;}  }
class C{  protected CharacterClassElementImpl(){  super();}  }
class C{  public static boolean isValidIfd(int ifdId){  return ifdId == IfdId.TYPE_IFD_0 || ifdId == IfdId.TYPE_IFD_1 || ifdId == IfdId.TYPE_IFD_EXIF || ifdId == IfdId.TYPE_IFD_INTEROPERABILITY || ifdId == IfdId.TYPE_IFD_GPS;}  }
class C{  public boolean isEntityAttrPermitted(MetaClass metaClass,String property,EntityAttrAccess access){  return isPermitted(PermissionType.ENTITY_ATTR,metaClass.getName() + Permission.TARGET_PATH_DELIMETER + property,access.getId());}  }
class C{  public T caseTraceWhen_(TraceWhen_ object){  return null;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void main(final String[] args){  CSettingsDirectoryCreator.createSettingsDirectory();  final boolean firstStart=!CConfigurationFileCreator.setupConfigurationFile();  BuildVersionInformation.loadBuildVersionInformation();  System.out.printf("Starting %s%n",Constants.PROJECT_NAME_VERSION_BUILD);  CGraphPanelExtender.extend();  GuiInitializer.initialize();  if (firstStart) {    final CDatabase newDatabase=new CDatabase("Click and configure me","org.postgresql.Driver","localhost","new_database","user","password","identity",false,false);    CDatabaseManager.instance().addDatabase(newDatabase);  }  prepareDatabaseConnections();  final PluginRegistry pluginRegistry=new PluginRegistry();  final String startPath=FileUtils.findLocalRootPath(CMain.class);  Constants.startPath=startPath;  NaviLogger.info("Defaulting startup path to %s",startPath);  final CDatabaseManager databaseManager=CDatabaseManager.instance();  final PluginInterface pluginInterface=PluginInterface.instance(startPath,databaseManager,pluginRegistry);  final CProjectMainFrame window=new CProjectMainFrame(databaseManager,ConfigManager.instance(),firstStart);  pluginInterface.setMainWindow(new MainWindow(window));  pluginInterface.reloadPlugins();  final CommandlineOptions options=CommandlineParser.parseCommandLine(args);  if (options.getBatchPlugin() != null) {    CBatchPluginExecuter.execute(options.getBatchPlugin(),pluginRegistry);  }  window.setVisible(true);  GuiHelper.applyWindowFix(window);}  }
class C{  protected <V>RunnableScheduledFuture<V> decorateTask(Callable<V> callable,RunnableScheduledFuture<V> task){  return task;}  }
class C{  public void testDynStringSortMissingFirst() throws Exception {  checkSortMissingFirst("dyn_stringdv_missingfirst","a","z");}  }
class C{  private int parseHeader(InputStream is){  int index=0;  int nread=0;  log("Parse a header");  nread=readOneLine(is);  if (nread == -1) {    requestMethod=UNKNOWN_METHOD;    return -1;  }  int i=index;  while (buf[i] != (byte)':') {    if ((buf[i] == (byte)'\n') || (buf[i] == (byte)'\r')) {      return UNKNOWN_METHOD;    }    i++;  }  String headerName=new String(buf,0,i);  i++;  while (buf[i] == ' ') {    i++;  }  String headerValue=new String(buf,i,nread - i - 2);  headers.put(headerName,headerValue);  return nread;}  }
class C{  public boolean isEQUAL(){  return value == EQUAL;}  }
class C{  public static Builder createStandardBuilder(){  return new Builder().creationTimeColumnName("CREATED_ON").lastModifiedColumnName("LAST_MODIFIED").versionColumnName("VERSION").versionColumnMethod(VERSION_SHA256).contentColumnCache(true);}  }
class C{  public String processManualCalibrationDataMessage(float value,boolean instant,boolean doCalibration){  float mult=1f;  float num=value * mult;  lastGlucometerRecord=new GlucometerRecord();  lastGlucometerRecord.numGlucometerValue=num;  lastGlucometerValue=num;  Date d=new Date();  lastGlucometerRecord.lastDate=d.getTime();  lastGlucometerDate=d.getTime();  calculateDate(lastGlucometerRecord,d,0);  if (!instant && doCalibration) {    if (HexDump.unsignedByte(expectedSensorSortNumber) == HexDump.unsignedByte((byte)0xff)) {      expectedSensorSortNumberForCalibration[0]=(byte)0x00;      expectedSensorSortNumberForCalibration[1]=(byte)0x71;    } else {synchronized (expectedSensorSortNumberLock) {        byte expectedAux=expectedSensorSortNumber;        if (HexDump.unsignedByte((byte)(expectedSensorSortNumber & (byte)0x01)) > 0)         expectedAux=(byte)(expectedSensorSortNumber & (byte)0xFE);        expectedSensorSortNumberForCalibration[0]=calculateNextSensorSortNameFrom(6,expectedAux);        expectedSensorSortNumberForCalibration[1]=calculateNextSensorSortNameFrom(10,expectedAux);      }    }  }  SharedPreferences.Editor editor=settings.edit();  editor.putFloat("lastGlucometerValue",(float)num);  editor.putLong("glucometerLastDate",d.getTime());  if (!instant && doCalibration) {    editor.putString("expectedSensorSortNumberForCalibration0",HexDump.toHexString(expectedSensorSortNumberForCalibration[0]));    editor.putString("expectedSensorSortNumberForCalibration1",HexDump.toHexString(expectedSensorSortNumberForCalibration[1]));  } else {    editor.remove("expectedSensorSortNumberForCalibration0");    editor.remove("expectedSensorSortNumberForCalibration1");  }  if (lastGlucometerValue > 0) {    isCalibrating=!instant && doCalibration;    if (previousRecord == null) {      MedtronicSensorRecord auxRecord=new MedtronicSensorRecord();      auxRecord.isCalibrating=!instant;      log.debug("8");      writeLocalCSV(auxRecord,context);    } else {      previousRecord.isCalibrating=!instant;      log.debug("9");      writeLocalCSV(previousRecord,context);    }    editor.putBoolean("isCalibrating",!instant);    editor.commit();  }  editor.commit();  return "Measure received " + num + " mg/dl";}  }
class C{  public ModelConverter offsetMS(Vec3UV offset){  Vec3UV leftVec=this.fwdVec.cross(this.upVec);  for (  Box box : this.modelBoxList) {    for (    Quad quad : box.quads) {      for (int i=0; i < 4; i++) {        Vec3UV vec=quad.vertices[i];        vec.x+=this.upVec.x * offset.y + this.fwdVec.x * offset.z + leftVec.x * offset.x;        vec.y+=this.upVec.y * offset.y + this.fwdVec.y * offset.z + leftVec.y * offset.x;        vec.z+=this.upVec.z * offset.y + this.fwdVec.z * offset.z + leftVec.z * offset.x;      }    }  }  return this;}  }
class C{  public static boolean testRayTriangleFront(double originX,double originY,double originZ,double dirX,double dirY,double dirZ,double v0X,double v0Y,double v0Z,double v1X,double v1Y,double v1Z,double v2X,double v2Y,double v2Z,double epsilon){  double edge1X=v1X - v0X;  double edge1Y=v1Y - v0Y;  double edge1Z=v1Z - v0Z;  double edge2X=v2X - v0X;  double edge2Y=v2Y - v0Y;  double edge2Z=v2Z - v0Z;  double pvecX=dirY * edge2Z - dirZ * edge2Y;  double pvecY=dirZ * edge2X - dirX * edge2Z;  double pvecZ=dirX * edge2Y - dirY * edge2X;  double det=edge1X * pvecX + edge1Y * pvecY + edge1Z * pvecZ;  if (det < epsilon)   return false;  double tvecX=originX - v0X;  double tvecY=originY - v0Y;  double tvecZ=originZ - v0Z;  double u=(tvecX * pvecX + tvecY * pvecY + tvecZ * pvecZ);  if (u < 0.0 || u > det)   return false;  double qvecX=tvecY * edge1Z - tvecZ * edge1Y;  double qvecY=tvecZ * edge1X - tvecX * edge1Z;  double qvecZ=tvecX * edge1Y - tvecY * edge1X;  double v=(dirX * qvecX + dirY * qvecY + dirZ * qvecZ);  if (v < 0.0 || u + v > det)   return false;  double invDet=1.0 / det;  double t=(edge2X * qvecX + edge2Y * qvecY + edge2Z * qvecZ) * invDet;  return t >= epsilon;}  }
class C{  @Override public String toString(){  return getClass().getName() + "[index=" + currentPosition+ ", errorIndex="+ errorIndex+ "]";}  }
class C{  public void testDetectLanguageDe(){  LOGGER.debug("detectLanguage De");  LanguageDetector instance=LanguageDetector.getInstance();  Document doc;  try {    doc=Jsoup.parse(new File(PATH + "de.wikipedia.org-wiki-Barrierefreies_Internet_20140701.html"),UTF_8);    LOGGER.debug("start detection");    assertEquals("de",instance.detectLanguage(doc.text()).getDetectedLanguage());    assertEquals("de",instance.detectLanguage(doc.text().toLowerCase()).getDetectedLanguage());    assertEquals("de",instance.detectLanguage(doc.text().toUpperCase()).getDetectedLanguage());    LOGGER.debug("detection ended");  } catch (  IOException ex) {    LOGGER.error(ex);  }catch (  NullPointerException npe) {    LOGGER.error("error while fetching page " + npe);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void restoreCompletedTransactions(){  if (iapHelper != null) {    iapHelper.restoreCompletedTransactions();  }}  }
class C{  @Override public boolean implies(Permission p){  if (p instanceof ServicePermission) {    ServicePermission target=(ServicePermission)p;    return (((action_mask & target.action_mask) == target.action_mask) && super.implies(p));  }  return (false);}  }
class C{  public static DateTime extractCommitTime(Key<CommitLogManifest> manifestKey){  return new DateTime(manifestKey.getId(),UTC);}  }
class C{  public void updateBackground(Drawable drawable){  mBackgroundManager.setDrawable(drawable);}  }
class C{  public static int openSocket() throws IOException {  serverSocket=new ServerSocket(0,10,InetAddress.getLocalHost());  return serverSocket.getLocalPort();}  }
class C{  public synchronized void incrementUnResolvedEdge(MethodReference callerRef,int bcIndex,MethodReference calleeRef,float weight){  UnResolvedCallSite callSite=new UnResolvedCallSite(callerRef,bcIndex);  UnResolvedWeightedCallTargets targets=unresolvedCallGraph.get(callSite);  if (targets == null) {    targets=UnResolvedWeightedCallTargets.create(calleeRef,weight);    unresolvedCallGraph.put(callSite,targets);  } else {    UnResolvedWeightedCallTargets orig=targets;    targets=targets.augmentCount(calleeRef,weight);    if (orig != targets) {      unresolvedCallGraph.put(callSite,targets);    }  }}  }
class C{  public String userRoot(String user){  String path=maildirLocation.replace(PATH_FULLUSER,user);  String[] userParts=user.split("@");  String userName=user;  if (userParts.length == 2) {    userName=userParts[0];    path=path.replace(PATH_DOMAIN,userParts[1].toLowerCase(Locale.US));  }  path=path.replace(PATH_USER,userName);  return path;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.CONCRETE_METHOD_DECLARATION___TYPE_1:    return getType_1();case UmplePackage.CONCRETE_METHOD_DECLARATION___METHOD_DECLARATOR_1:  return getMethodDeclarator_1();case UmplePackage.CONCRETE_METHOD_DECLARATION___ANONYMOUS_CONCRETE_METHOD_DECLARATION_11:return getAnonymous_concreteMethodDeclaration_1_1();case UmplePackage.CONCRETE_METHOD_DECLARATION___METHOD_BODY_1:return getMethodBody_1();case UmplePackage.CONCRETE_METHOD_DECLARATION___ANONYMOUS_CONCRETE_METHOD_DECLARATION_21:return getAnonymous_concreteMethodDeclaration_2_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private long calculateJoin(){  _year+=divFloor(_month,12);  _month-=12 * divFloor(_month,12);  _localTimeOfEpoch=MS_PER_DAY * (yearToDayOfEpoch(_year) + monthToDayOfYear(_month,isLeapYear(_year)) + _dayOfMonth);  _localTimeOfEpoch+=_ms + 1000 * (_second + 60 * (_minute + 60 * _hour));  return _localTimeOfEpoch;}  }
class C{  public boolean offer(Operation op){  if (op == null) {    throw new IllegalArgumentException("op is required");  }  if (this.limit < 0) {    if (this.elementCount >= -this.limit) {      return false;    }    this.store.offerFirst(op);    this.elementCount++;    return true;  } else {    if (this.elementCount >= this.limit) {      return false;    }    this.store.offerLast(op);    this.elementCount++;    return true;  }}  }
class C{  public SerialLight(String systemName,String userName){  super(systemName,userName);  initializeLight(systemName);}  }
class C{  public void notestPerfStringIntern(){  final Random r=new Random();  final int limit=10000;  final ArrayList<String> strs=new ArrayList<String>(limit);  for (int i=0; i < limit; i++) {    strs.add("url://this/is/a/long/string/" + (987654 + r.nextInt(1000000)));  }  for (int i=0; i < 20; i++) {    final long start=System.nanoTime();    final Iterator<String> striter=strs.iterator();    while (striter.hasNext()) {      assertTrue(striter.next().intern() != null);    }    final long end=System.nanoTime();    if (log.isInfoEnabled())     log.info("Interns#" + i + ":"+ (end - start));  }  final ConcurrentHashMap<String,String> dict=new ConcurrentHashMap<String,String>();  for (int i=0; i < 20; i++) {    final long start=System.nanoTime();    final Iterator<String> striter=strs.iterator();    while (striter.hasNext()) {      final String str=striter.next();      final String ret=dict.get(str);      if (ret == null) {        dict.put(str,str);      }    }    final long end=System.nanoTime();    if (log.isInfoEnabled())     log.info("HashMap#" + i + ":"+ (end - start));  }}  }
class C{  public static String convertToHTMLContent(String content){  content=replace(content,'&',"&amp;");  content=replace(content,'"',"&quot;");  content=replace(content,'<',"&lt;");  return replace(content,'>',"&gt;");}  }
class C{  public InfoDisplayEvent(Object source,String info,int loc){  super(source);  information=info;  preferredLocation=loc;}  }
class C{  public DateConverter(final String defaultFormat,final String[] acceptableFormats,final TimeZone timeZone,final boolean lenient){  this(DEFAULT_ERA_PATTERN,defaultFormat,acceptableFormats,Locale.ENGLISH,timeZone,lenient);}  }
class C{  public boolean isLoggedIn(){  throw new RuntimeException("Native facebook unsupported, if you are running on the Simulator use isUserLoggedIn");}  }
class C{  public void writeString(String str) throws TException {  try {    byte[] bytes=str.getBytes("UTF-8");    writeBinary(bytes,0,bytes.length);  } catch (  UnsupportedEncodingException e) {    throw new TException("UTF-8 not supported!");  }}  }
class C{  public synchronized Object clone(){  try {    ConcurrentReaderHashMap t=(ConcurrentReaderHashMap)super.clone();    t.keySet=null;    t.entrySet=null;    t.values=null;    Entry[] tab=table;    t.table=new Entry[tab.length];    Entry[] ttab=t.table;    for (int i=0; i < tab.length; ++i) {      Entry first=null;      for (Entry e=tab[i]; e != null; e=e.next)       first=new Entry(e.hash,e.key,e.value,first);      ttab[i]=first;    }    return t;  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  public BufferCache(int size,int overflow){  super(size,overflow);}  }
class C{  public void testCheckFoundButEmpty(){  LOGGER.debug("check found but empty");  initCheckerAndLaunch("src/test/resources/css/test2.css",null,TestSolution.PASSED,null);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private void clientClientMessage() throws Exception {  Ignite ignite=grid(CLIENT_NODE_IDX);  ClusterGroup grp=ignite.cluster().forClients();  assert grp.nodes().size() > 0;  registerListenerAndSendMessages(ignite,grp);}  }
class C{  public static TypesTree createStackFrameDndTypesTree(final INaviFunction function,final TypeManager typeManager){  Preconditions.checkNotNull(function,"Error: function argument can not be null");  Preconditions.checkNotNull(typeManager,"Error: typeManager argument can not be null");  final TypesTree typesTree=CreateDragAndDropTypesTree(typeManager);  final TypesTreeModel model=function.getStackFrame() == null ? TypesTreeModel.createEmptyTypeModel() : TypesTreeModel.createSingleTypeModel(typeManager,function.getStackFrame());  typesTree.setModel(model);  unfoldFirstNode(typesTree);  return typesTree;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println("Progress: " + progress + "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void initialize(final RPObject object){  super.initialize(object);  if (object.has("base_hp")) {    baseHP=object.getInt("base_hp");  } else {    baseHP=0;  }  if (object.has("hp")) {    hp=object.getInt("hp");  } else {    hp=0;  }  if (hp >= baseHP) {    hpRatio=1.0f;  } else   if (hp <= 0) {    hpRatio=0.0f;  } else {    hpRatio=hp / (float)baseHP;  }  if (object.has("text")) {    onTalk(object.get("text"));  }  if (object.has("outfit")) {    outfit=object.getInt("outfit");  } else {    outfit=OUTFIT_UNSET;  }  setEatAndChoke(true,object.has("eating"),object.has("choking"));  for (  StatusID id : StatusID.values()) {    if (object.has(id.getAttribute())) {      setStatus(id,true);    }  }  ghostmode=object.has("ghostmode");  ignoreCollision=object.has("ignore_collision");  if (object.has("heal")) {    onHealed(object.getInt("heal"));  }  if (object.has("adminlevel")) {    adminlevel=object.getInt("adminlevel");  } else {    adminlevel=0;  }  titleType=object.get("title_type");  showTitle=!object.has("unnamed");  showHP=!object.has("no_hpbar");  initializeSounds();}  }
class C{  @Override public void beginShard(){  total=query().count();}  }
class C{  public static void hiddenFromEncodedString(ProjectFilterSettings result,String s){  if (s.length() > 0) {    int bar=s.indexOf(FIELD_DELIMITER);    String categories;    if (bar >= 0) {      categories=s.substring(0,bar);    } else {      categories=s;    }    StringTokenizer t=new StringTokenizer(categories,LISTITEM_DELIMITER);    while (t.hasMoreTokens()) {      String category=t.nextToken();      result.removeCategory(category);    }  }}  }
class C{  public NotificationChain basicSetCatch(CatchBlock newCatch,NotificationChain msgs){  CatchBlock oldCatch=catch_;  catch_=newCatch;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.TRY_STATEMENT__CATCH,oldCatch,newCatch);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public TagAllocationModel(InputStream input) throws IOException {  loadFrom(input);}  }
class C{  public MappedStatement addMappedStatement(String id,SqlSource sqlSource,StatementType statementType,SqlCommandType sqlCommandType,Integer fetchSize,Integer timeout,String parameterMap,Class<?> parameterType,String resultMap,Class<?> resultType,ResultSetType resultSetType,boolean flushCache,boolean useCache,boolean resultOrdered,KeyGenerator keyGenerator,String keyProperty,String keyColumn,String databaseId,LanguageDriver lang){  return addMappedStatement(id,sqlSource,statementType,sqlCommandType,fetchSize,timeout,parameterMap,parameterType,resultMap,resultType,resultSetType,flushCache,useCache,resultOrdered,keyGenerator,keyProperty,keyColumn,databaseId,lang,null);}  }
class C{  private void excludeInputMode(TextField tf,String modeToExclude){  String[] curModes=tf.getInputModeOrder();  String[] newModes=new String[curModes.length - 1];  int j=0;  for (int i=0; i < curModes.length; i++) {    if (!curModes[i].equals(modeToExclude)) {      if (j < newModes.length) {        newModes[j]=curModes[i];        j++;      } else {        return;      }    }  }  tf.setInputModeOrder(newModes);}  }
class C{  public void concat(FXGMatrix m){  double new_a=a * m.a + b * m.c;  double new_b=a * m.b + b * m.d;  double new_c=c * m.a + d * m.c;  double new_d=c * m.b + d * m.d;  double new_tx=tx * m.a + ty * m.c + m.tx;  double new_ty=tx * m.b + ty * m.d + m.ty;  a=new_a;  b=new_b;  c=new_c;  d=new_d;  tx=new_tx;  ty=new_ty;}  }
class C{  int turnoutState(){  int state=0x00;  if (namedTurnoutWest != null) {    if (getTurnout(WEST).getKnownState() == Turnout.UNKNOWN) {      return Turnout.UNKNOWN;    }    if (getTurnout(WEST).getKnownState() == Turnout.INCONSISTENT) {      return Turnout.INCONSISTENT;    }    state=+getTurnout(WEST).getKnownState();  } else {    return Turnout.UNKNOWN;  }  if (namedTurnoutEast != null) {    if (getTurnout(EAST).getKnownState() == Turnout.UNKNOWN) {      return Turnout.UNKNOWN;    }    if (getTurnout(EAST).getKnownState() == Turnout.INCONSISTENT) {      return Turnout.INCONSISTENT;    }    if (getTurnout(EAST).getKnownState() == Turnout.CLOSED) {      state=state + (getTurnout(EAST).getKnownState() + 1);    }    if (getTurnout(EAST).getKnownState() == Turnout.THROWN) {      state=state + (getTurnout(EAST).getKnownState() + 3);    }  } else {    return Turnout.UNKNOWN;  }  if ((turnoutType == SCISSOR) && (!singleSlipRoute)) {    if (namedTurnoutEastLower != null) {      if (getTurnout(LOWEREAST).getKnownState() == Turnout.UNKNOWN) {        return Turnout.UNKNOWN;      }      if (getTurnout(LOWEREAST).getKnownState() == Turnout.INCONSISTENT) {        return Turnout.INCONSISTENT;      }    } else {      return Turnout.UNKNOWN;    }    if (namedTurnoutWestLower != null) {      if (getTurnout(LOWERWEST).getKnownState() == Turnout.UNKNOWN) {        return Turnout.UNKNOWN;      }      if (getTurnout(LOWERWEST).getKnownState() == Turnout.INCONSISTENT) {        return Turnout.INCONSISTENT;      }    } else {      return Turnout.UNKNOWN;    }    if (getTurnout(LOWEREAST).getKnownState() != getTurnout(WEST).getKnownState()) {      return Turnout.INCONSISTENT;    }    if (getTurnout(LOWERWEST).getKnownState() != getTurnout(EAST).getKnownState()) {      return Turnout.INCONSISTENT;    }  }  return state;}  }
class C{  public static java.io.BufferedReader openReaderDetectCharset(String filePath,String defaultCharset) throws java.io.IOException {  return openReaderDetectCharset(new java.io.File(filePath),defaultCharset,true);}  }
class C{  public ServicesStillPublishedException(String message,Reason reason){  super(message);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  @SuppressWarnings("unchecked") public RightThreadedBinaryNode(Comparable<T> value){  super((T)value);}  }
class C{  public String toString(){  return Float.toString(time);}  }
class C{  public static final boolean odd(long x){  return !even(x);}  }
class C{  @SuppressWarnings("unchecked") public static void register(@SuppressWarnings("rawtypes") Map tagletMap){  SequenceTaglet taglet;  try {    taglet=Utilities.newInstance("net.sf.sdedit.taglet.SequenceTaglet7",SequenceTaglet.class);  } catch (  Throwable t) {    taglet=Utilities.newInstance("net.sf.sdedit.taglet.SequenceTaglet6",SequenceTaglet.class);  }  tagletMap.put(taglet.getName(),taglet);}  }
class C{  @Override public void dataSource_releaseConnection(FilterChain chain,DruidPooledConnection conn) throws SQLException {  long connectionId=-1;  if (conn.getConnectionHolder() != null) {    ConnectionProxy connection=(ConnectionProxy)conn.getConnectionHolder().getConnection();    connectionId=connection.getId();  }  chain.dataSource_recycle(conn);  connectionLog("{conn-" + connectionId + "} pool-recycle");}  }
class C{  private List list(){  List list=(List)FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get("list");  return (list);}  }
class C{  public void cellToRect(int cellX,int cellY,int cellHSpan,int cellVSpan,Rect resultRect){  final int cellWidth=mCellWidth;  final int cellHeight=mCellHeight;  final int widthGap=mWidthGap;  final int heightGap=mHeightGap;  final int hStartPadding=getPaddingLeft();  final int vStartPadding=getPaddingTop();  int width=cellHSpan * cellWidth + ((cellHSpan - 1) * widthGap);  int height=cellVSpan * cellHeight + ((cellVSpan - 1) * heightGap);  int x=hStartPadding + cellX * (cellWidth + widthGap);  int y=vStartPadding + cellY * (cellHeight + heightGap);  resultRect.set(x,y,x + width,y + height);}  }
class C{  @Override public int available(){  return mBufferInUse - mBufferPos;}  }
class C{  public SuffixStringMatcher(String[] suffixes){  super();  for (int i=0; i < suffixes.length; i++)   addPatternBackward(suffixes[i]);}  }
class C{  static int indexFor(int h,int length){  return h & (length - 1);}  }
class C{  public void testZeroPosIncrSloppyPqAnd() throws IOException {  PhraseQuery.Builder builder=new PhraseQuery.Builder();  int pos=-1;  for (  Token tap : INCR_0_QUERY_TOKENS_AND) {    pos+=tap.getPositionIncrement();    builder.add(new Term("field",tap.toString()),pos);  }  builder.setSlop(0);  doTestZeroPosIncrSloppy(builder.build(),0);  builder.setSlop(1);  doTestZeroPosIncrSloppy(builder.build(),0);  builder.setSlop(2);  doTestZeroPosIncrSloppy(builder.build(),1);}  }
class C{  public static void main(String[] args) throws IOException {  main(args,System.out);}  }
class C{  private void nextStream() throws IOException {  if (in != null) {    in.close();  }  if (e.hasMoreElements()) {    in=e.nextElement();    if (in == null) {      throw new NullPointerException("element is null");    }  } else {    in=null;  }}  }
class C{  private void doRenderView(FacesContext context,UIViewRoot viewToRender) throws IOException, FacesException {  ApplicationAssociate associate=getAssociate(context);  if (null != associate) {    associate.responseRendered();  }  if (LOGGER.isLoggable(Level.FINE)) {    LOGGER.log(Level.FINE,"About to render view " + viewToRender.getViewId());  }  viewToRender.encodeAll(context);}  }
class C{  private void flushDeflater() throws IOException {  if (entry.entry.getMethod() == DEFLATED) {    def.finish();    while (!def.finished()) {      deflate();    }  }}  }
class C{  public void init() throws MessagingException {  String mapping=getInitParameter("mapping");  if (mapping != null) {    mappings=RecipientRewriteTableUtil.getXMLMappings(mapping);  }}  }
class C{  public static void info(String text,Object... objects){  if (!ENABLED_INFO) {    return;  }  write(text,objects);}  }
class C{  public boolean containsEmbeddedComp(final Component component,final int inx){  return inx > 0 && inx < 5 && ((Collection<Component>)_embeddedComponents[inx + 1]).contains(component);}  }
class C{  @Override public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs){switch (eContainerFeatureID()) {case SGenPackage.FEATURE_PARAMETER_VALUE__FEATURE_CONFIGURATION:    return eInternalContainer().eInverseRemove(this,SGenPackage.FEATURE_CONFIGURATION__PARAMETER_VALUES,FeatureConfiguration.class,msgs);}return super.eBasicRemoveFromContainerFeature(msgs);}  }
class C{  public boolean followsTrend(Airing air,boolean mustBeViewable,StringBuffer sbCache,boolean skipKeyword){  if (air == null)   return false;  Show s=air.getShow();  if (s == null)   return false;  if (testAgentFlag(DISABLED_FLAG))   return false;  if (title != null && (s.title == null || (s.title != null && title != s.title && !title.toString().equalsIgnoreCase(s.title.toString()))))   return false;  if ((agentMask & FIRSTRUN_MASK) == FIRSTRUN_MASK && !air.isFirstRun())   return false;  if ((agentMask & RERUN_MASK) == RERUN_MASK && air.isFirstRun())   return false;  if (person != null) {    int i=0;    for (; i < s.people.length; i++)     if ((person == s.people[i] || person.name.equalsIgnoreCase(s.people[i].name)) && (role == Show.ALL_ROLES || role == 0 || role == s.roles[i]))     break;    if (i == s.people.length)     return false;  }  if (category != null) {    if (s.categories.length == 0 || category != s.categories[0]) {      if (!category.toString().equals(s.getSubCategory()))       return false;    }  }  if (subCategory != null) {    if (s.categories.length < 2 || subCategory != s.categories[1]) {      if (!subCategory.toString().equals(s.getCategory()))       return false;    }  }  if (chanName.length() > 0 && (air.getChannel() == null || !chanNameMatches(air.getChannel().name)))   return false;  if (network != null && (air.getChannel() == null || network != air.getChannel().network))   return false;  if (rated != null && rated != s.rated)   return false;  if (year != null && year != s.year)   return false;  if (pr != null && !pr.toString().equals(air.getParentalRating()))   return false;  if (slotType != 0 && timeslots != null && timeslots.length > 0) {    boolean anyMatches=false;    for (int i=0; i < timeslots.length; i++) {      if (BigBrother.alignsSlot(air,slotType,timeslots[i])) {        anyMatches=true;        break;      }    }    if (!anyMatches)     return false;  }  if ((agentMask & LOVE_MASK) == 0 && (agentMask & TITLE_MASK) == 0) {    if (s.language != null && !"English".equalsIgnoreCase(s.language.name) && !"en".equalsIgnoreCase(s.language.name))     return false;  }  if (mustBeViewable && wiz.getFileForAiring(air) == null && !air.isViewable())   return false;  if (skipKeyword == false && keyword.length() > 0) {    boolean titleOnly=keyword.startsWith("TITLE:");    String currKeyword=titleOnly ? keyword.substring("TITLE:".length()).trim() : keyword;    StringBuffer fullShowTest;    if (sbCache == null)     fullShowTest=new StringBuffer(s.getTitle()); else {      sbCache.setLength(0);      sbCache.append(s.getTitle());      fullShowTest=sbCache;    }    if (!titleOnly) {      fullShowTest.append('|');      fullShowTest.append(s.getEpisodeName());      fullShowTest.append('|');      fullShowTest.append(s.getDesc());      fullShowTest.append('|');      fullShowTest.append(s.getYear());      for (int i=0; i < s.people.length; i++) {        fullShowTest.append('|');        fullShowTest.append(s.people[i].name);      }      fullShowTest.append('|');      fullShowTest.append(s.getCategory());      fullShowTest.append('|');      fullShowTest.append(s.getSubCategory());      for (int i=2; i < s.categories.length; i++) {        fullShowTest.append('|');        fullShowTest.append(s.categories[i].name);      }      fullShowTest.append('|');      s.appendBonusesString(fullShowTest);      fullShowTest.append('|');      s.appendExpandedRatingsString(fullShowTest);      fullShowTest.append('|');      fullShowTest.append(s.getLanguage());      fullShowTest.append('|');      fullShowTest.append(air.getChannelName());      fullShowTest.append('|');      air.appendMiscInfo(fullShowTest);      fullShowTest.append('|');      fullShowTest.append(s.getExternalID());    }synchronized (this) {      if (!currKeyword.equals(cachedKeywordForMats)) {        cachedKeywordForMats=currKeyword;        List<String> subPats=new ArrayList<String>();        StringBuilder currPat=new StringBuilder();        boolean inQuote=false;        for (int i=0; i < cachedKeywordForMats.length(); i++) {          char c=cachedKeywordForMats.charAt(i);          if (c == '"') {            if (inQuote) {              inQuote=false;              if (currPat.length() > 0) {                subPats.add(currPat.toString());                currPat=new StringBuilder();              }            } else {              if (currPat.length() > 0) {                subPats.add(currPat.toString());                currPat=new StringBuilder();              }              inQuote=true;            }          } else           if (c == ' ') {            if (inQuote) {              currPat.append(c);            } else {              if (currPat.length() > 0) {                subPats.add(currPat.toString());                currPat=new StringBuilder();              }            }          } else {            currPat.append(c);          }        }        if (currPat.length() > 0)         subPats.add(currPat.toString());        keywordMatchers=new Matcher[subPats.size()];        for (int i=0; i < keywordMatchers.length; i++) {          String currPatStr=subPats.get(i);          char c0=currPatStr.charAt(0);          if (Character.isLetterOrDigit(c0) || c0 == '*' || c0 == '?')           currPatStr="\\b" + currPatStr;          c0=currPatStr.charAt(currPatStr.length() - 1);          if (Character.isLetterOrDigit(c0) || c0 == '*' || c0 == '?')           currPatStr=currPatStr + "\\b";          currPatStr=currPatStr.replaceAll("\\*",".*").replaceAll("\\?","[^| ]");          try {            keywordMatchers[i]=Pattern.compile(currPatStr,Pattern.CASE_INSENSITIVE).matcher(fullShowTest);          } catch (          Exception ex) {            System.out.println("ERROR with regex expression " + currKeyword + " in Favorite of: "+ ex);          }        }        for (int i=0; i < keywordMatchers.length; i++) {          if (keywordMatchers[i] == null || !keywordMatchers[i].find())           return false;        }      } else {        for (int i=0; i < keywordMatchers.length; i++) {          if (keywordMatchers[i] == null)           return false;          keywordMatchers[i].reset(fullShowTest);          if (!keywordMatchers[i].find())           return false;        }      }    }  }  return true;}  }
class C{  void unsubscribe(final String topic,String invocationContext,String activityToken){  service.traceDebug(TAG,"unsubscribe({" + topic + "},{"+ invocationContext+ "}, {"+ activityToken+ "})");  final Bundle resultBundle=new Bundle();  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.UNSUBSCRIBE_ACTION);  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN,activityToken);  resultBundle.putString(MqttServiceConstants.CALLBACK_INVOCATION_CONTEXT,invocationContext);  if ((myClient != null) && (myClient.isConnected())) {    IMqttActionListener listener=new MqttConnectionListener(resultBundle);    try {      myClient.unsubscribe(topic,invocationContext,listener);    } catch (    Exception e) {      handleException(resultBundle,e);    }  } else {    resultBundle.putString(MqttServiceConstants.CALLBACK_ERROR_MESSAGE,NOT_CONNECTED);    service.traceError("subscribe",NOT_CONNECTED);    service.callbackToActivity(clientHandle,Status.ERROR,resultBundle);  }}  }
class C{  public int size(){  return length() + 3;}  }
class C{  public CMemoryRefreshButton(){  setIcon(new ImageIcon(CMain.class.getResource("data/memoryupdate_up.jpg")));  setPreferredSize(new Dimension(32,32));}  }
class C{  public SingleConsumerDisruptorQueue(int bufferSize){  this(bufferSize,false);}  }
class C{  public void testCollator() throws Exception {  Benchmark benchmark=execBenchmark(getCollatorConfig("ROOT","impl:jdk"));  CollationKeyAnalyzer expected=new CollationKeyAnalyzer(Collator.getInstance(new Locale("")));  assertEqualCollation(expected,benchmark.getRunData().getAnalyzer(),"foobar");  benchmark=execBenchmark(getCollatorConfig("de","impl:jdk"));  expected=new CollationKeyAnalyzer(Collator.getInstance(new Locale("de")));  assertEqualCollation(expected,benchmark.getRunData().getAnalyzer(),"foobar");  benchmark=execBenchmark(getCollatorConfig("en,US","impl:jdk"));  expected=new CollationKeyAnalyzer(Collator.getInstance(new Locale("en","US")));  assertEqualCollation(expected,benchmark.getRunData().getAnalyzer(),"foobar");  benchmark=execBenchmark(getCollatorConfig("no,NO,NY","impl:jdk"));  expected=new CollationKeyAnalyzer(Collator.getInstance(new Locale("no","NO","NY")));  assertEqualCollation(expected,benchmark.getRunData().getAnalyzer(),"foobar");}  }
class C{  public static void main(String argv[]){  Main compiler=new Main(System.out,"rmic");  System.exit(compiler.compile(argv) ? 0 : 1);}  }
class C{  public boolean addressTypeUnique(){  return true;}  }
class C{  private List<BusinessObjectDataAttributeDefinitionEntity> createAttributeDefinitionEntities(List<AttributeDefinition> attributeDefinitions,BusinessObjectFormatEntity businessObjectFormatEntity){  List<BusinessObjectDataAttributeDefinitionEntity> attributeDefinitionEntities=new ArrayList<>();  if (!CollectionUtils.isEmpty(attributeDefinitions)) {    for (    AttributeDefinition attributeDefinition : attributeDefinitions) {      BusinessObjectDataAttributeDefinitionEntity attributeDefinitionEntity=new BusinessObjectDataAttributeDefinitionEntity();      attributeDefinitionEntities.add(attributeDefinitionEntity);      attributeDefinitionEntity.setBusinessObjectFormat(businessObjectFormatEntity);      attributeDefinitionEntity.setName(attributeDefinition.getName());      attributeDefinitionEntity.setPublish(BooleanUtils.isTrue(attributeDefinition.isPublish()));    }  }  return attributeDefinitionEntities;}  }
class C{  public ReadCommEventCounterResponse(){  super();  setFunctionCode(Modbus.READ_COMM_EVENT_COUNTER);  setDataLength(4);}  }
class C{  public static ReilInstruction createOr(final long offset,final OperandSize firstSize,final String firstValue,final OperandSize secondSize,final String secondValue,final OperandSize thirdSize,final String thirdValue){  return createTrinaryInstruction(ReilHelpers.OPCODE_OR,new CAddress(offset),firstSize,firstValue,secondSize,secondValue,thirdSize,thirdValue);}  }
class C{  public void zoom(ZoomEvent evt){  float newScale;  if (evt.isAbsolute()) {    newScale=evt.getAmount();  } else   if (evt.isRelative()) {    newScale=getScale() * evt.getAmount();  } else {    return;  }  setScale(newScale);}  }
class C{  protected ObjProperty(FilePosition pos,Void value,List<? extends Expression> children){  this(pos,(StringLiteral)children.get(0),children.get(1));  assert children.size() == 2;}  }
class C{  public void addExceptionDates(ExceptionDates exceptionDates){  addProperty(exceptionDates);}  }
class C{  public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  ref=null;  skel=null;}  }
class C{  protected Partitioning(){}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public void testStmtExecuteLargeUpdate() throws Exception {  createTable("testExecuteLargeUpdate","(id BIGINT AUTO_INCREMENT PRIMARY KEY, n INT)");  for (int tst=1; tst <= 3; tst++) {    this.stmt.execute("TRUNCATE TABLE testExecuteLargeUpdate");    String tstCase="Case " + tst;    long count=0;switch (tst) {case 1:      count=this.stmt.executeLargeUpdate("INSERT INTO testExecuteLargeUpdate (n) VALUES (1), (2), (3), (4), (5)",Statement.RETURN_GENERATED_KEYS);    break;case 2:  count=this.stmt.executeLargeUpdate("INSERT INTO testExecuteLargeUpdate (n) VALUES (1), (2), (3), (4), (5)",new int[]{1});break;case 3:count=this.stmt.executeLargeUpdate("INSERT INTO testExecuteLargeUpdate (n) VALUES (1), (2), (3), (4), (5)",new String[]{"id"});break;}assertEquals(tstCase,5,count);assertEquals(tstCase,5,this.stmt.getLargeUpdateCount());this.rs=this.stmt.getGeneratedKeys();ResultSetMetaData rsmd=this.rs.getMetaData();assertEquals(tstCase,1,rsmd.getColumnCount());assertEquals(tstCase,JDBCType.BIGINT.getVendorTypeNumber().intValue(),rsmd.getColumnType(1));assertEquals(tstCase,20,rsmd.getColumnDisplaySize(1));long generatedKey=0;while (this.rs.next()) {assertEquals(tstCase,++generatedKey,this.rs.getLong(1));}assertEquals(tstCase,5,generatedKey);this.rs.close();}}  }
class C{  public void run(){  log.fine("Info.Worker.run");  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  StringBuffer sql=new StringBuffer(m_sqlMain);  String dynWhere=find();  if (dynWhere.length() > 0)   sql.append(" AND " + dynWhere);  sql.append(m_sqlAdd);  String xSql=Msg.parseTranslation(Env.getCtx(),sql.toString());  xSql=MRole.getDefault().addAccessSQL(xSql,getTableName(),MRole.SQL_FULLYQUALIFIED,MRole.SQL_RO);  try {    PreparedStatement pstmt=DB.prepareStatement(xSql,null);    log.fine("SQL=" + xSql);    ResultSet rs=pstmt.executeQuery();    while (!isInterrupted() & rs.next()) {      int row=p_table.getRowCount();      p_table.setRowCount(row + 1);      int colOffset=1;      for (int col=0; col < p_layout.length; col++) {        Object data=null;        Class<?> c=p_layout[col].getColClass();        int colIndex=col + colOffset;        if (c == IDColumn.class) {          IDColumn id=new IDColumn(rs.getInt(colIndex));          id.setSelected(true);          data=id;          p_table.setColumnReadOnly(0,false);        } else         if (c == Boolean.class)         data=new Boolean("Y".equals(rs.getString(colIndex))); else         if (c == Timestamp.class)         data=rs.getTimestamp(colIndex); else         if (c == BigDecimal.class)         data=rs.getBigDecimal(colIndex); else         if (c == Double.class)         data=new Double(rs.getDouble(colIndex)); else         if (c == Integer.class)         data=new Integer(rs.getInt(colIndex)); else         if (c == KeyNamePair.class) {          String display=rs.getString(colIndex);          int key=rs.getInt(colIndex + 1);          data=new KeyNamePair(key,display);          colOffset++;        } else         data=rs.getString(colIndex);        p_table.setValueAt(data,row,col);      }    }    log.config("Interrupted=" + isInterrupted());    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,xSql,e);  }  p_table.autoSize();  setCursor(Cursor.getDefaultCursor());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:50.989 -0500",hash_original_method="17D25E29F0B0C1524A5E10AF751238A3",hash_generated_method="966D369F7F49AF139100089A3030EDDB") public String quotedString() throws ParseException {  int startIdx=ptr + 1;  if (lookAhead(0) != '\"')   return null;  consume(1);  while (true) {    char next=getNextChar();    if (next == '\"') {      break;    } else     if (next == '\0') {      throw new ParseException(this.buffer + " :unexpected EOL",this.ptr);    } else     if (next == '\\') {      consume(1);    }  }  return buffer.substring(startIdx,ptr - 1);}  }
class C{  @Listener public void onPlayerLogin(final ClientConnectionEvent.Join event){  if (!nca.getNodeOrDefault().isShowOnLogin()) {    return;  }  Sponge.getScheduler().createTaskBuilder().async().delay(500,TimeUnit.MILLISECONDS).execute(null).submit(plugin);}  }
class C{  public void eval(MockDirectoryWrapper dir) throws IOException {}  }
class C{  protected boolean noMoreCharacters() throws IOException {  if (avail == 0) {    avail=is.read(buffer);    if (avail <= 0) {      avail=0;      return true;    }    pos=0;  }  return false;}  }
class C{  public BasicBlock entry(){  return (BasicBlock)_firstNode;}  }
class C{  public static org.oscm.vo.VOServiceActivation convertToApi(org.oscm.internal.vo.VOServiceActivation oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOServiceActivation newVO=new org.oscm.vo.VOServiceActivation();  newVO.setActive(oldVO.isActive());  newVO.setCatalogEntries(convertToApiVOCatalogEntry(oldVO.getCatalogEntries()));  newVO.setService(convertToApi(oldVO.getService()));  return newVO;}  }
class C{  private String determineDialectSpecificQueryText(String dialect){  if (isPostgres()) {    return "select dbid, BIT_LENGTH(filedata) from note";  } else   if (isOracle()) {    return "create table " + ORACLE_TEMP_TABLE_NAME + " as select dbid, to_lob(filedata) obj from note";  } else   if (isDerby()) {    return "select dbid, length(filedata) from note";  } else {    return "";  }}  }
class C{  public static String randomString(int length){  char[] someChars=new char[length];  for (int i=0; i < length; i++) {    someChars[i]=(char)(r.nextInt(ALPHABET_SIZE) + 'a');  }  return new String(someChars);}  }
class C{  public CFlags(final String programName,final Appendable out,final Appendable err){  mOut=out;  mErr=err;  mAnonymousFlags=new ArrayList<>();  mRegisteredFlags=new TreeSet<>();  mRequiredSets=new ArrayList<>();  mLongNames=new TreeMap<>();  mShortNames=new TreeMap<>();  registerOptional('h',HELP_FLAG,"print help on command-line flag usage");  registerOptional(EXPERIMENTAL_HELP_FLAG,"");  setName(programName);}  }
class C{  private void sequenceIntegrity(int batchSize,long initVal) throws Exception {  String locSeqName=UUID.randomUUID().toString();  IgniteAtomicSequence locSeq=grid().atomicSequence(locSeqName,initVal,true);  locSeq.batchSize(batchSize);  Collection<Long> resSet=new HashSet<>();  for (int i=0; i < MAX_LOOPS_NUM; i++) {    Long val=locSeq.getAndIncrement();    assert resSet.add(val) : "Element already in set : " + val;  }  assert resSet.size() == MAX_LOOPS_NUM;  for (long i=initVal; i < MAX_LOOPS_NUM + initVal; i++)   assert resSet.contains(i) : "Element is absent in set : " + i;  removeSequence(locSeqName);}  }
class C{  public boolean isImmediateSet(){  return ((immediate != null) || (getValueExpression(IMMEDIATE) != null));}  }
class C{  public static String createIgnorePatternForResource(final IResource resource){  Check.notNull(resource,"resource");  final String path=TPIgnoreCache.createResourceMatchString(resource);  String patternString=Pattern.quote(path);  if (resource.getType() == IResource.FOLDER || resource.getType() == IResource.PROJECT) {    patternString=patternString + ".*";  }  return patternString;}  }
class C{  public static RangeHeader parse(@Nullable final String header){  String field=null;  Long fromId=null;  Boolean fromInclusive=null;  Long toId=null;  Boolean toInclusive=null;  Integer max=null;  if (header == null) {    return new RangeHeader(field,fromId,fromInclusive,toId,toInclusive,max);  }  final List<String> parts=ImmutableList.copyOf(Splitter.on(';').trimResults().split(header));  final int count=parts.size();  if (count > 0) {    final Matcher first=ID_PATTERN.matcher(parts.get(0));    if (first.matches()) {      field=first.group("field");      fromId=Longs.tryParse(first.group("fromId"));      if (fromId != null) {        fromInclusive=Strings.isNullOrEmpty(first.group("fromInclusive"));      }      toId=Longs.tryParse(first.group("toId"));      if (toId != null) {        toInclusive=Strings.isNullOrEmpty(first.group("toInclusive"));      }    }  }  if (count > 1) {    final Matcher second=OPTIONS_PATTERN.matcher(parts.get(1));    if (second.matches()) {      try {        max=Integer.parseInt(second.group("max"));      } catch (      NumberFormatException ignore) {      }    }  }  return new RangeHeader(field,fromId,fromInclusive,toId,toInclusive,max);}  }
class C{  public InvalidConfigurationException(final String msg){  super(msg);}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  public boolean found(){  return name != null;}  }
class C{  int add(long val){  if (cardinality >= threshold) {    rehash();  }  int h=hash(val);  for (int slot=h & (vals.length - 1); ; slot=(slot + ((h >> 7) | 1)) & (vals.length - 1)) {    int count=counts[slot];    if (count == 0) {      counts[slot]=1;      vals[slot]=val;      cardinality++;      return slot;    } else     if (vals[slot] == val) {      counts[slot]=count + 1;      return slot;    }  }}  }
class C{  public XMLDateTime(String dateTimeString){  this.dateTimeString=XMLDatatypeUtil.collapseWhiteSpace(dateTimeString);  parseDateTimeString();  setNumericFields();  validateFieldValues();}  }
class C{  protected void damageLineRange(int line0,int line1,Shape a,Component host){  if (a != null) {    Rectangle area0=lineToRect(a,line0);    Rectangle area1=lineToRect(a,line1);    if ((area0 != null) && (area1 != null)) {      Rectangle damage=area0.union(area1);      host.repaint(damage.x,damage.y,damage.width,damage.height);    } else {      host.repaint();    }  }}  }
class C{  public QuickAdapter(Context context,int layoutResId){  super(context,layoutResId);}  }
class C{  public Number memToPhys(long value){  double result=0;  int mw=(int)(value % 0x100);  int nw=metaNw != 0 ? metaNw : (int)(value / 0x100);switch (cnvId) {case 0:    result=tableValue(mw,nw);  break;case 10:result=formula10Value(mw,nw);break;case 11:result=formula11Value(mw,nw);break;case 12:result=formula12Value(mw,nw);break;case 13:result=formula13Value(mw,nw);break;case 14:result=formula14Value(mw,nw);break;case 15:result=formula15Value(mw,nw);break;case 16:result=formula16Value(mw,nw);break;case 17:result=formula17Value(mw,nw);break;case 18:result=formula18Value(mw,nw);break;case 20:result=mw & nw;break;case 21:case 22:case 23:result=nw << 8 | mw;break;default :log.info(String.format("Unsupported Formula: ID=%d [%s]",cnvId,units));}return (float)result;}  }
class C{  public static Object execute(ExecutablePool pool,String cqName,String queryStr,int cqState,boolean isDurable,byte regionDataPolicy){  AbstractOp op=new CreateCQOpImpl(cqName,queryStr,cqState,isDurable,regionDataPolicy);  return pool.executeOnQueuesAndReturnPrimaryResult(op);}  }
class C{  public synchronized void add(UndoStackTrigger pt){  if (triggers == null) {    triggers=new ArrayList<UndoStackTrigger>();  }  if (!triggers.contains(pt)) {    triggers.add(pt);  }}  }
class C{  protected Mac(MacSpi macSpi,Provider provider,String algorithm){  this.spi=macSpi;  this.provider=provider;  this.algorithm=algorithm;  serviceIterator=null;  lock=null;}  }
class C{  @RequestMapping(value="/businessObjectDefinitionDescriptiveInformation/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}",method=RequestMethod.PUT,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DEFINITIONS_DESCRIPTIVE_INFO_PUT) public BusinessObjectDefinition updateBusinessObjectDefinitionDescriptiveInformation(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@RequestBody BusinessObjectDefinitionDescriptiveInformationUpdateRequest request){  BusinessObjectDefinitionKey businessObjectDefinitionKey=new BusinessObjectDefinitionKey(namespace,businessObjectDefinitionName);  return businessObjectDefinitionService.updateBusinessObjectDefinitionDescriptiveInformation(businessObjectDefinitionKey,request);}  }
class C{  private int computeFlags(int curFlags){  curFlags&=~(WindowManager.LayoutParams.FLAG_IGNORE_CHEEK_PRESSES | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE| WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH| WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS| WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);  curFlags|=WindowManager.LayoutParams.FLAG_IGNORE_CHEEK_PRESSES;  curFlags|=WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;  curFlags|=WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;  curFlags|=WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS;  return curFlags;}  }
class C{  public static byte[] clone(byte[] array){  if (array == null) {    return null;  }  return (byte[])array.clone();}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  HideVideoDao.createTable(db,ifNotExists);}  }
class C{  @Override public void truncate(int size){  truncate(size,new RankComparator());}  }
class C{  public GanttTreeTableModel(TaskManager taskManager,CustomPropertyManager customColumnsManager,UIFacade uiFacade,Runnable dirtyfier){  super(new TaskNode(taskManager.getRootTask()));  TaskDefaultColumn.BEGIN_DATE.setIsEditablePredicate(NOT_SUPERTASK);  TaskDefaultColumn.END_DATE.setIsEditablePredicate(Predicates.and(NOT_SUPERTASK,NOT_MILESTONE));  TaskDefaultColumn.DURATION.setIsEditablePredicate(Predicates.and(NOT_SUPERTASK,NOT_MILESTONE));  myUiFacade=uiFacade;  myDirtyfier=dirtyfier;  myCustomColumnsManager=customColumnsManager;}  }
class C{  public Builder cloneFrom(DisplayImageOptions options){  imageResOnLoading=options.imageResOnLoading;  imageResForEmptyUri=options.imageResForEmptyUri;  imageResOnFail=options.imageResOnFail;  imageOnLoading=options.imageOnLoading;  imageForEmptyUri=options.imageForEmptyUri;  imageOnFail=options.imageOnFail;  resetViewBeforeLoading=options.resetViewBeforeLoading;  cacheInMemory=options.cacheInMemory;  cacheOnDisk=options.cacheOnDisk;  imageScaleType=options.imageScaleType;  decodingOptions=options.decodingOptions;  delayBeforeLoading=options.delayBeforeLoading;  considerExifParams=options.considerExifParams;  extraForDownloader=options.extraForDownloader;  preProcessor=options.preProcessor;  postProcessor=options.postProcessor;  displayer=options.displayer;  handler=options.handler;  isSyncLoading=options.isSyncLoading;  return this;}  }
class C{  public static void closeActivityByName(String name){  int index=activityStack.size() - 1;  while (true) {    Activity activity=activityStack.get(index);    if (null == activity) {      break;    }    String activityName=activity.getComponentName().getClassName();    if (!TextUtils.equals(name,activityName)) {      index--;      if (index < 0) {        break;      }      continue;    }    closeActivity(activity);    break;  }}  }
class C{  public boolean canTraverseOutsideSubtree(){  return m_xpath.getExpression().canTraverseOutsideSubtree();}  }
class C{  public ApplicationMetaData(final String appName,final String version,final X509Certificate certificate,final TimeProvider timeProvider){  this.appName=appName;  this.version=version;  this.certificateSigner=null == certificate ? null : certificate.getIssuerX500Principal().getName();  this.timeProvider=timeProvider;  this.startTime=this.timeProvider.getCurrentTime();  this.currentTime=TimeInstant.ZERO;}  }
class C{  public void cleanupPointers(){  if (VM.TraceStkMaps)   VM.sysWrite("ReferenceMaps- cleanupPointers\n");}  }
class C{  public TupleSet<E> exhaustivelyExtend(List<E> elements){  List<List<E>> tupleList=new ArrayList<>();  for (  List<E> tuple : tuples) {    for (    E e : elements) {      for (int i=0; i <= tuple.size(); i++) {        tupleList.add(insert(e,tuple,i));      }    }  }  return new TupleSet<>(tupleList,tupleLength + 1);}  }
class C{  public static TreePath pathTillOfKind(final TreePath path,final Set<Tree.Kind> kinds){  TreePath p=path;  while (p != null) {    Tree leaf=p.getLeaf();    assert leaf != null;    if (kinds.contains(leaf.getKind())) {      return p;    }    p=p.getParentPath();  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:19.634 -0500",hash_original_method="E8E1D8EA6D890D66AA7ADE8877B0250D",hash_generated_method="DCB34860B0CD2AB315B0B71B66FB505C") public boolean useBadgeLabel(){  return ((mSearchMode & SEARCH_MODE_BADGE_LABEL) == 1);}  }
class C{  public Not(){}  }
class C{  private MouseInputListener createWindowMouseInputListener(JRootPane root){  return new MouseInputHandler();}  }
class C{  public final AC gap(){  curIx++;  makeSize(curIx);  return this;}  }
class C{  public void paintTabbedPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public boolean chainIsNotPinned(String hostname,List<X509Certificate> chain) throws PinManagerException {  PinListEntry entry=lookup(hostname);  if (entry != null) {    return entry.chainIsNotPinned(chain);  }  return false;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name_1: ");  result.append(name_1);  result.append(')');  return result.toString();}  }
class C{  public MutableDirectoryPageData(final byte[] overflowKey,final int addressBits,final boolean hasVersionTimestamps){  this.overflowKey=overflowKey;  childAddr=new long[1 << addressBits];  this.hasVersionTimestamps=hasVersionTimestamps;  minimumVersionTimestamp=maximumVersionTimestamp=0L;}  }
class C{  private void applyInteractiveState(){  if ((int)mCircleDiameter <= 0) {    return;  }  if (mIsCurrentThemeLight) {    if (mBackgroundBitmapLight == null || mBackgroundBitmapLight.getWidth() != (int)mCircleDiameter) {      mBackgroundBitmapLight=BitmapFactory.decodeResource(getResources(),R.drawable.sample_bg_light);      mBackgroundBitmapLight=Bitmap.createScaledBitmap(mBackgroundBitmapLight,(int)mCircleDiameter,(int)mCircleDiameter,true);    }    mCurrentBackgroundColor=Spec.SPEC_COLOR_LIGHT_BACKGROUND;    mCurrentBackgroundBitmap=mBackgroundBitmapLight;    mTimeTextPaint.setColor(Spec.SPEC_COLOR_LIGHT_TIME_TEXT);    mDateTextPaint.setColor(Spec.SPEC_COLOR_LIGHT_DATE_TEXT);    mSecondHandPaint.setColor(Spec.SPEC_COLOR_LIGHT_SECONDS);    mMinuteHandDotPaint.setColor(Spec.SPEC_COLOR_LIGHT_MINUTES);    mHourHandDotPaint.setColor(Spec.SPEC_COLOR_LIGHT_HOURS);  } else {    if (mBackgroundBitmapDark == null || mBackgroundBitmapDark.getWidth() != (int)mCircleDiameter) {      mBackgroundBitmapDark=BitmapFactory.decodeResource(getResources(),R.drawable.sample_bg_dark);      mBackgroundBitmapDark=Bitmap.createScaledBitmap(mBackgroundBitmapDark,(int)mCircleDiameter,(int)mCircleDiameter,true);    }    mCurrentBackgroundColor=Spec.SPEC_COLOR_DARK_BACKGROUND;    mCurrentBackgroundBitmap=mBackgroundBitmapDark;    mTimeTextPaint.setColor(Spec.SPEC_COLOR_DARK_TIME_TEXT);    mDateTextPaint.setColor(Spec.SPEC_COLOR_DARK_DATE_TEXT);    mSecondHandPaint.setColor(Spec.SPEC_COLOR_DARK_SECONDS);    mMinuteHandDotPaint.setColor(Spec.SPEC_COLOR_DARK_MINUTES);    mHourHandDotPaint.setColor(Spec.SPEC_COLOR_DARK_HOURS);  }}  }
class C{  public RequestHandle patch(String url,ResponseHandlerInterface responseHandler){  return patch(null,url,null,responseHandler);}  }
class C{  private static void addDefaultProfile(SpringApplication app,SimpleCommandLinePropertySource source){  if (!source.containsProperty("spring.profiles.active") && !System.getenv().containsKey("SPRING_PROFILES_ACTIVE")) {    app.setAdditionalProfiles(Constants.SPRING_PROFILE_DEVELOPMENT);  }}  }
class C{  public T caseInlineAssociationEnd_(InlineAssociationEnd_ object){  return null;}  }
class C{  public static <T>Mono<Boolean> sequenceEqual(Publisher<? extends T> source1,Publisher<? extends T> source2,BiPredicate<? super T,? super T> isEqual,int bufferSize){  return onAssembly(new MonoSequenceEqual<>(source1,source2,isEqual,bufferSize));}  }
class C{  public List<String> concernPackages(){  return null;}  }
class C{  public Set<String> keySet(){  return this.bundle.keySet();}  }
class C{  private void buildBrokenLines(Rect r){  LinePath[] baseLines=new LinePath[mConfig.complexity];  buildBaselines(baseLines,r);  PathMeasure pmTemp=new PathMeasure();  for (int i=0; i < mConfig.complexity; i++) {    lineRifts[i]=new LinePath();    lineRifts[i].moveTo(0,0);    lineRifts[i].setEndPoint(baseLines[i].getEndPoint());    pmTemp.setPath(baseLines[i],false);    float length=pmTemp.getLength();    final int THRESHOLD=SEGMENT + SEGMENT / 2;    if (length > Utils.dp2px(THRESHOLD)) {      lineRifts[i].setStraight(false);      float[] pos=new float[2];      pmTemp.getPosTan(Utils.dp2px(SEGMENT),pos,null);      lineRifts[i].lineTo(pos[0],pos[1]);      lineRifts[i].points.add(new Point((int)pos[0],(int)pos[1]));      int xRandom, yRandom;      int step=Utils.dp2px(THRESHOLD);      do {        pmTemp.getPosTan(step,pos,null);        xRandom=(int)(pos[0] + Utils.nextInt(-Utils.dp2px(3),Utils.dp2px(2)));        yRandom=(int)(pos[1] + Utils.nextInt(-Utils.dp2px(2),Utils.dp2px(3)));        lineRifts[i].lineTo(xRandom,yRandom);        lineRifts[i].points.add(new Point(xRandom,yRandom));        step+=Utils.dp2px(SEGMENT);      } while (step < length);      lineRifts[i].lineToEnd();    } else {      lineRifts[i]=baseLines[i];      lineRifts[i].setStraight(true);    }    lineRifts[i].points.add(lineRifts[i].getEndPoint());  }}  }
class C{  public final int toInt(){  return mValue;}  }
class C{  public NumberUpSupported(int member){  super(member);  if (member < 1) {    throw new IllegalArgumentException("Number up value must be > 0");  }}  }
class C{  public static BufferedImage toCompatibleImage(BufferedImage image){  if (image.getColorModel().equals(getGraphicsConfiguration().getColorModel())) {    return image;  }  BufferedImage compatibleImage=getGraphicsConfiguration().createCompatibleImage(image.getWidth(),image.getHeight(),image.getTransparency());  Graphics g=compatibleImage.getGraphics();  g.drawImage(image,0,0,null);  g.dispose();  return compatibleImage;}  }
class C{  public ImageTool(ImageHolderFigure prototype){  super(prototype);}  }
class C{  protected void start(Class<? extends SourceConnector> connectorClass,Configuration connectorConfig){  start(connectorClass,connectorConfig,null);}  }
class C{  public void addCPItem(CP cp){  String uniq=cp.getUniq();  CP intern;  if ((intern=(CP)(cpe.get(uniq))) == null) {    cpe.put(uniq,cp);    cp.resolve(this);  }}  }
class C{  private static byte[] loadDigest(File file) throws IOException {  BufferedReader reader=null;  try {    reader=new BufferedReader(new FileReader(getDigestFile(file)));    String line=reader.readLine();    if (line == null) {      throw new ValidationException(file,"invalid digest file");    }    int split=line.indexOf(' ');    String digestHex=line.substring(0,split);    String fileName=line.substring(split + 2);    if (!file.getPath().equals(fileName)) {      throw new ValidationException(file,"invalid digest file");    }    return Hex.decodeHex(digestHex.toCharArray());  } catch (  Exception e) {    throw new ValidationException(file,"invalid digest file");  } finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  @Override protected void onFinished(final Player player,final boolean successful){  if (successful) {    final String itemName=items[Rand.rand(items.length)];    final Item item=SingletonRepository.getEntityManager().getItem(itemName);    int amount=1;    if (itemName.equals("water")) {      item.setBoundTo(player.getName());    }    this.addEvent(new SoundEvent(successSound,SOUND_RADIUS,100,SoundLayer.AMBIENT_SOUND));    this.notifyWorldAboutChanges();    player.equipOrPutOnGround(item);    player.sendPrivateText("You were lucky and filled " + Grammar.quantityplnoun(amount,itemName,"a") + ".");  } else {    this.addEvent(new SoundEvent(failSound,SOUND_RADIUS,100,SoundLayer.AMBIENT_SOUND));    this.notifyWorldAboutChanges();    player.sendPrivateText("Oh no! You spilled the water and let the flask fall into it. Now it's broken.");  }  notifyWorldAboutChanges();}  }
class C{  private static String decodeFormFields(final String content,final String charset){  if (content == null) {    return null;  }  return urldecode(content,charset != null ? Charset.forName(charset) : Charset.forName(HTTP.UTF_8),true);}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.paint,stream);  SerialUtilities.writePaint(this.backgroundPaint,stream);}  }
class C{  public NetworkBuilder<N,E> expectedNodeCount(int expectedNodeCount){  checkArgument(expectedNodeCount >= 0,"The expected number of nodes can't be negative: %s",expectedNodeCount);  this.expectedNodeCount=Optional.of(expectedNodeCount);  return this;}  }
class C{  @Override protected boolean isZoneLevelResource(){  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:09.087 -0400",hash_original_method="3B8B551D72194C8E1B5051D5750E6C6C",hash_generated_method="C2101100E8D6999FBB1ACDAF078A24B7") public AuthPermission(String name){  super(init(name));}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  repaint();}  }
class C{  public boolean load(File f){  try {    BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(f),Charsets.UTF_8));    for (String taskName=br.readLine(); taskName != null; taskName=br.readLine()) {      if (!Strings.isNullOrEmpty(taskName)) {        myTaskManager.newTaskBuilder().withName(taskName).build();      }    }  } catch (  Exception e) {    e.printStackTrace();    return false;  }  return true;}  }
class C{  @Override public final int compareTo(ProbeResult other){  final Type type1=this.type;  final Type type2=other.type;  final boolean none1=type1 == Type.NONE;  final boolean none2=type2 == Type.NONE;  if (none1 != none2)   return none2 ? -1 : 1;  if (none1)   return 0;  final int wdl1=this.wdl;  final int wdl2=other.wdl;  final boolean win1=wdl1 > 0;  final boolean win2=wdl2 > 0;  if (win1 != win2)   return win2 ? 1 : -1;  final boolean draw1=wdl1 == 0;  final boolean draw2=wdl2 == 0;  if (draw1 != draw2)   return draw2 ? 1 : -1;  final int score1=this.score;  final int score2=other.score;  if (win1) {    final boolean dtm1=type1 == Type.DTM;    final boolean dtm2=type2 == Type.DTM;    if (dtm1 != dtm2)     return dtm2 ? 1 : -1;    if (dtm1)     return -compareScore(wdl1,score1,wdl2,score2);    final boolean dtz1=type1 == Type.DTZ;    final boolean dtz2=type2 == Type.DTZ;    if (dtz1 != dtz2)     return dtz2 ? 1 : -1;    return -compareScore(wdl1,score1,wdl2,score2);  } else   if (draw1) {    return 0;  } else {    final boolean wdlType1=type1 == Type.WDL;    final boolean wdlType2=type2 == Type.WDL;    if (wdlType1 != wdlType2)     return wdlType2 ? 1 : -1;    if (wdlType1)     return -compareScore(wdl1,score1,wdl2,score2);    final boolean dtzType1=type1 == Type.DTZ;    final boolean dtzType2=type2 == Type.DTZ;    if (dtzType1 != dtzType2)     return dtzType2 ? 1 : -1;    return -compareScore(wdl1,score1,wdl2,score2);  }}  }
class C{  public static long decodeUnsignedLong(CustomBuffer buffer){  long value=0L;  int i=0;  long bytevalue;  while (((bytevalue=buffer.get()) & 0x80L) != 0) {    value|=(bytevalue & 0x7f) << i;    i+=7;    Preconditions.checkArgument(i <= 63,"Variable length quantity is too long");  }  return value | (bytevalue << i);}  }
class C{  Item newDouble(final double value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(DOUBLE).putLong(key.longVal);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  public static Date evenMinuteDate(Date date){  if (date == null) {    date=new Date();  }  Calendar c=Calendar.getInstance();  c.setTime(date);  c.setLenient(true);  c.set(Calendar.MINUTE,c.get(Calendar.MINUTE) + 1);  c.set(Calendar.SECOND,0);  c.set(Calendar.MILLISECOND,0);  return c.getTime();}  }
class C{  public ColladaSampler2D(String ns){  super(ns);}  }
class C{  public static void captureVideo(ActionListener response){  Display.getInstance().captureVideo(response);}  }
class C{  public static void convert(JCas aJCas,LxfGraph aSource,LxfGraph aTarget,Map<String,String> ids){  if (aSource == null) {    aTarget.setMedia(new LxfText(aJCas.getDocumentText()));  }  ToolGeneratorIndex toolEdgeIndex=new ToolGeneratorIndex(ids.values());  ToolGeneratorIndex toolNodeIndex=new ToolGeneratorIndex(ids.values());  ToolGeneratorIndex toolRegionIndex=new ToolGeneratorIndex(ids.values());  NodeIterator iter=new NodeIterator(aSource);  Map<Sentence,Collection<Token>> idxSentTok=indexCovered(aJCas,Sentence.class,Token.class);  Map<Sentence,Collection<Dependency>> idxSentDep=indexCovered(aJCas,Sentence.class,Dependency.class);  for (  Sentence sentence : select(aJCas,Sentence.class)) {    LxfNode sentenceNode;    String toolid=ids.get(LAYER_SENTENCE);    if (aSource == null || needsExport(aJCas,sentence)) {      LxfRegion sentenceRegion=new LxfRegion(toolid,toolRegionIndex.nextIndex(toolid),sentence.getBegin(),sentence.getEnd());      aTarget.addRegion(sentenceRegion);      sentenceNode=new LxfNode(LAYER_SENTENCE,toolid,toolNodeIndex.nextIndex(toolid),0,sentenceRegion);      sentenceNode.setFeature(FEAT_LABEL,sentence.getCoveredText());      aTarget.addNode(sentenceNode);    } else {      sentenceNode=iter.next(toolid,LAYER_SENTENCE);    }    Map<Token,LxfNode> idxMorph=new HashMap<>();    Collection<Token> tokens=idxSentTok.get(sentence);    for (    Token token : tokens) {      LxfNode tokenNode;      toolid=ids.get(LAYER_TOKEN);      if (aSource == null || needsExport(aJCas,token)) {        LxfRegion tokenRegion=new LxfRegion(toolid,toolRegionIndex.nextIndex(toolid),token.getBegin(),token.getEnd());        aTarget.addRegion(tokenRegion);        tokenNode=new LxfNode(LAYER_TOKEN,toolid,toolNodeIndex.nextIndex(toolid),0,tokenRegion);        String form=token.getText();        tokenNode.setFeature(FEAT_LABEL,form);        aTarget.addNode(tokenNode);        int edgeIndex=toolEdgeIndex.nextIndex(toolid);        aTarget.addEdge(new LxfEdge(tokenNode.getOrigin(),edgeIndex,0,tokenNode,sentenceNode));      } else {        tokenNode=iter.next(toolid,LAYER_TOKEN);      }      toolid=ids.get(LAYER_MORPHOLOGY);      POS pos=token.getPos();      LxfNode morphNode=null;      if (pos != null) {        if ((aSource == null || needsExport(aJCas,pos))) {          morphNode=new LxfNode(LAYER_MORPHOLOGY,toolid,toolNodeIndex.nextIndex(toolid),0);          morphNode.setFeature(FEAT_POS,token.getPos().getPosValue());          aTarget.addNode(morphNode);          aTarget.addEdge(new LxfEdge(morphNode.getOrigin(),toolEdgeIndex.nextIndex(toolid),0,morphNode,tokenNode));          idxMorph.put(token,morphNode);        } else {          morphNode=iter.next(toolid,LAYER_MORPHOLOGY);          idxMorph.put(token,morphNode);        }      }      Lemma lemma=token.getLemma();      if (lemma != null && (aSource == null || needsExport(aJCas,lemma))) {        LxfNode lemmaNode=morphNode;        if (lemmaNode == null) {          lemmaNode=new LxfNode(LAYER_MORPHOLOGY,toolid,toolNodeIndex.nextIndex(toolid),0);          aTarget.addNode(lemmaNode);          aTarget.addEdge(new LxfEdge(lemmaNode.getOrigin(),toolEdgeIndex.nextIndex(toolid),0,lemmaNode,tokenNode));          idxMorph.put(token,lemmaNode);        }        lemmaNode.setFeature(FEAT_LEMMA,token.getPos().getPosValue());      }    }    toolid=ids.get(LAYER_DEPENDENCY);    Collection<Dependency> deps=idxSentDep.get(sentence);    for (    Dependency dep : deps) {      if (aSource != null && !needsExport(aJCas,dep))       continue;      LxfNode depNode=new LxfNode(LAYER_DEPENDENCY,toolid,toolNodeIndex.nextIndex(toolid),0);      depNode.setFeature(FEAT_LABEL,dep.getDependencyType());      aTarget.addNode(depNode);      LxfNode govMorphNode=idxMorph.get(dep.getGovernor());      LxfNode depMorphNode=idxMorph.get(dep.getDependent());      aTarget.addEdge(new LxfEdge(depNode.getOrigin(),toolEdgeIndex.nextIndex(toolid),0,depNode,depMorphNode));      if (!govMorphNode.getId().equals(depMorphNode.getId())) {        aTarget.addEdge(new LxfEdge(depNode.getOrigin(),toolEdgeIndex.nextIndex(toolid),0,govMorphNode,depNode));      }    }  }}  }
class C{  public static void enumerateResources(VerificationHost host,URI peerURI,EnumSet<TaskOption> options,String resourcePoolLink,String computeHostLinkDescription,String computeHostLink,String testCase,List<String> tenantLinks) throws Throwable {  host.log("Performing resource enumeration");  ResourceEnumerationTaskService.ResourceEnumerationTaskState enumTask=performResourceEnumeration(host,peerURI,options,resourcePoolLink,computeHostLinkDescription,computeHostLink,tenantLinks);  host.waitForFinishedTask(ResourceEnumerationTaskState.class,createServiceURI(host,peerURI,enumTask.documentSelfLink));  host.log("\n==%s==Total Time Spent in Enumeration==\n",testCase + getVMCount(host,peerURI));  ServiceStats enumerationStats=host.getServiceState(null,ServiceStats.class,UriUtils.buildStatsUri(createServiceURI(host,peerURI,AWSEnumerationAdapterService.SELF_LINK)));  host.log(Utils.toJsonHtml(enumerationStats));  host.log("\n==Total Time Spent in Creation Workflow==\n");  ServiceStats enumerationCreationStats=host.getServiceState(null,ServiceStats.class,UriUtils.buildStatsUri(createServiceURI(host,peerURI,AWSEnumerationAndCreationAdapterService.SELF_LINK)));  host.log(Utils.toJsonHtml(enumerationCreationStats));  host.log("\n==Time spent in individual creation services==\n");  ServiceStats computeDescriptionCreationStats=host.getServiceState(null,ServiceStats.class,UriUtils.buildStatsUri(createServiceURI(host,peerURI,AWSComputeDescriptionCreationAdapterService.SELF_LINK)));  host.log(Utils.toJsonHtml(computeDescriptionCreationStats));  ServiceStats computeStateCreationStats=host.getServiceState(null,ServiceStats.class,UriUtils.buildStatsUri(createServiceURI(host,peerURI,AWSComputeStateCreationAdapterService.SELF_LINK)));  host.log(Utils.toJsonHtml(computeStateCreationStats));  host.log("\n==Total Time Spent in Deletion Workflow==\n");  ServiceStats deletionEnumerationStats=host.getServiceState(null,ServiceStats.class,UriUtils.buildStatsUri(createServiceURI(host,peerURI,AWSEnumerationAndDeletionAdapterService.SELF_LINK)));  host.log(Utils.toJsonHtml(deletionEnumerationStats));  host.log("\n==Total Time Spent in Storage Enumeration Workflow==\n");  ServiceStats storageEnumerationStats=host.getServiceState(null,ServiceStats.class,UriUtils.buildStatsUri(createServiceURI(host,peerURI,AWSBlockStorageEnumerationAdapterService.SELF_LINK)));  host.log(Utils.toJsonHtml(storageEnumerationStats));}  }
class C{  private Providers(){}  }
class C{  public static void main(String[] args) throws IgniteException {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Compute callable example started.");    Collection<IgniteCallable<Integer>> calls=new ArrayList<>();    for (    String word : "Count characters using callable".split(" ")) {      calls.add(null);    }    Collection<Integer> res=ignite.compute().call(calls);    int sum=res.stream().mapToInt(null).sum();    System.out.println();    System.out.println(">>> Total number of characters in the phrase is '" + sum + "'.");    System.out.println(">>> Check all nodes for output (this node is also part of the cluster).");  } }  }
class C{  public String toString(){  StringBuilder s=new StringBuilder();  for (  Item item : this)   s.append(item + " ");  return s.toString();}  }
class C{  public static Paint convertStrokePaint(Element strokedElement,GraphicsNode strokedNode,BridgeContext ctx){  Value v=CSSUtilities.getComputedStyle(strokedElement,SVGCSSEngine.STROKE_OPACITY_INDEX);  float opacity=convertOpacity(v);  v=CSSUtilities.getComputedStyle(strokedElement,SVGCSSEngine.STROKE_INDEX);  return convertPaint(strokedElement,strokedNode,v,opacity,ctx);}  }
class C{  private void validate(MethodPart write,String name) throws Exception {  MethodPart match=read.take(name);  Method method=write.getMethod();  if (match == null) {    throw new MethodException("No matching get method for %s in %s",method,detail);  }}  }
class C{  public void test_ConstructorLjava_lang_StringZ(){  try {    JarFile jarFile=new JarFile("Wrong.file",false);    fail("Should throw IOException");  } catch (  IOException e) {  }  try {    Support_Resources.copyFile(resources,null,jarName);    String fileName=(new File(resources,jarName)).getCanonicalPath();    JarFile jarFile=new JarFile(fileName,true);  } catch (  IOException e) {    fail("Should not throw IOException");  }}  }
class C{  @UiHandler("okButton") public void handleOkClick(final ClickEvent event){  this.actionDelegate.accepted();}  }
class C{  public static String escapeCharacterData(String text){  text=StringUtil.gsub("&","&amp;",text);  text=StringUtil.gsub("<","&lt;",text);  text=StringUtil.gsub(">","&gt;",text);  text=StringUtil.gsub("\r","&#xD;",text);  return text;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public List<Part> partList(){  return partList;}  }
class C{  public static <T>T withReader(InputStream in,String charset,@ClosureParams(value=SimpleType.class,options="java.io.Reader") Closure<T> closure) throws IOException {  return withReader(new InputStreamReader(in,charset),closure);}  }
class C{  public static boolean isBlank(String str){  return trimAndConvertEmptyToNull(str) == null;}  }
class C{  public static boolean isModLoaded(String modID){  return loadedModsList.get(modID) != null;}  }
class C{  public static int value(String s){  return value(s,false);}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof TransformMatrix2D)   return this.equals((TransformMatrix2D)o);  return false;}  }
class C{  public void add(String gram){  if (name == null || gram == null)   return;  int len=gram.length();  if (len < 1 || len > NGram.N_GRAM)   return;  ++n_words[len - 1];  if (freq.containsKey(gram)) {    freq.put(gram,freq.get(gram) + 1);  } else {    freq.put(gram,1);  }}  }
class C{  public static final CButton createProcessButton(boolean withText){  if (withText)   return createProcessButton(Msg.getMsg(Env.getCtx(),A_PROCESS));  return createProcessButton(null);}  }
class C{  public void removeNotify(ComponentPeer peer){  if (nativePeer != null)   ((DropTargetPeer)nativePeer).removeDropTarget(this);  componentPeer=nativePeer=null;synchronized (this) {    if (isDraggingInside) {      dragExit(new DropTargetEvent(getDropTargetContext()));    }  }}  }
class C{  @Override public String toString(){  return "cudaSurfaceObject[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  private void editJointAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof Joint) {      Joint joint=(Joint)node.getUserObject();synchronized (Simulation.LOCK) {        EditJointDialog.show(ControlUtilities.getParentWindow(this),joint);      }    }  }}  }
class C{  protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  try {    final String preapprovalKey=request.getParameter("preapprovalKey");    final PaypalRequest paypalRequest=new PaypalRequest(request.getRemoteAddr());    final PaypalResponse paypalResponse=sendPaypalRequest(preapprovalKey == null ? paypalRequest.buildPreapprovalRequest() : paypalRequest.buildCancelPreapprovalRequest(request.getParameter("preapprovalKey")));    setDefaultAttributes(request,paypalRequest,paypalResponse);    request.getSession().setAttribute("preapprovalKey",paypalResponse.getPreapprovalKey());    request.getRequestDispatcher(preapprovalKey == null ? "/preapprovalLink.jsp" : "/index.jsp").forward(request,response);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public boolean visit(QualifiedType node){  return true;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean overlaps(Outlier other){  return ((other.getX() >= getX() - (this.radius * 1.1)) && (other.getX() <= getX() + (this.radius * 1.1)) && (other.getY() >= getY() - (this.radius * 1.1))&& (other.getY() <= getY() + (this.radius * 1.1)));}  }
class C{  public dim3(int x,int y,int z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  static boolean isLegal(int ch){  return isAlpha(ch) || isNumeric(ch) || URI.UNRESERVED_EXTRAS.indexOf(ch) != -1 || URI.RESERVED.indexOf(ch) != -1 || isLegalUnicode(ch);}  }
class C{  public void binding(IBindingSet binding){  this.binding=binding;}  }
class C{  @Override public void moveDown(int i){  super.moveDown(i);  List<Vector3f> controlPoints=jmeMotionPath.getMotionPath().getSpline().getControlPoints();  if (i < 0 || i >= controlPoints.size()) {    throw new IndexOutOfBoundsException();  }  Vector3f element=controlPoints.get(i);  Vector3f under_element=controlPoints.get(i + 1);  controlPoints.set(i + 1,element);  controlPoints.set(i,under_element);  jmeMotionPath.getMotionPath().getSpline().setType(jmeMotionPath.getMotionPath().getSpline().getType());  refreshChildren(true);  jmeMotionPath.updateSpline(true);}  }
class C{  void eventPreModify(ActionType type,long position,boolean isSingle){  if (type != currentActionType || !isSingle || System.currentTimeMillis() - previousTime > MERGE_TIME || (type == ActionType.INSERT || type == ActionType.OVERWRITE) && actionExclusiveEnd() != position || type == ActionType.DELETE && actionPosition() != position && actionPosition() - 1L != position) {    startAction(type,isSingle);  } else {    isBackspace=actionPosition() > position;  }  if (isSingle && type == ActionType.INSERT) {    updateNewRange(position);    previousTime=System.currentTimeMillis();  }}  }
class C{  public boolean isReadOnly(){  Object oo=get_Value(COLUMNNAME_IsReadOnly);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static Properties save(RaptorAction action){  Properties properties=new Properties();  properties.put("description",StringUtils.defaultString(action.getDescription()));  properties.put("name",StringUtils.defaultString(action.getName()));  properties.put("icon",StringUtils.defaultString(action.getIcon()));  properties.put("keyCode",String.valueOf(action.getKeyCode()));  properties.put("modifierKey",String.valueOf(action.getModifierKey()));  properties.put("category",action.getCategory().toString());  properties.put("class",action.getClass().getName());  properties.put("containers",RaptorStringUtils.toDelimitedString(action.getContainers()));  for (  RaptorActionContainer container : action.getContainers()) {    properties.put(container.toString(),String.valueOf(action.getOrder(container)));  }  if (action instanceof ScriptedAction) {    properties.put("script",((ScriptedAction)action).getScript().trim());  }  return properties;}  }
class C{  public void add(BoxAndWhiskerItem item,Comparable rowKey,Comparable columnKey){  this.data.addObject(item,rowKey,columnKey);  int r=this.data.getRowIndex(rowKey);  int c=this.data.getColumnIndex(columnKey);  if ((this.maximumRangeValueRow == r && this.maximumRangeValueColumn == c) || (this.minimumRangeValueRow == r && this.minimumRangeValueColumn == c)) {    updateBounds();  } else {    double minval=Double.NaN;    if (item.getMinOutlier() != null) {      minval=item.getMinOutlier().doubleValue();    }    double maxval=Double.NaN;    if (item.getMaxOutlier() != null) {      maxval=item.getMaxOutlier().doubleValue();    }    if (Double.isNaN(this.maximumRangeValue)) {      this.maximumRangeValue=maxval;      this.maximumRangeValueRow=r;      this.maximumRangeValueColumn=c;    } else     if (maxval > this.maximumRangeValue) {      this.maximumRangeValue=maxval;      this.maximumRangeValueRow=r;      this.maximumRangeValueColumn=c;    }    if (Double.isNaN(this.minimumRangeValue)) {      this.minimumRangeValue=minval;      this.minimumRangeValueRow=r;      this.minimumRangeValueColumn=c;    } else     if (minval < this.minimumRangeValue) {      this.minimumRangeValue=minval;      this.minimumRangeValueRow=r;      this.minimumRangeValueColumn=c;    }  }  fireDatasetChanged();}  }
class C{  public static String trim(String s,int maxWidth){  if (s.length() <= maxWidth) {    return (s);  }  return (s.substring(0,maxWidth));}  }
class C{  public static String mapProfanity(String word){  String mapping=profanityMap.get(word.toLowerCase());  if (mapping != null) {    return mapping;  }  return word;}  }
class C{  @SuppressWarnings("unchecked") public static boolean isCustomJavaSerialization(Class cls){  for (Class c=cls; c != null && !c.equals(Object.class); c=c.getSuperclass()) {    if (Externalizable.class.isAssignableFrom(c))     return true;    try {      Method writeObj=c.getDeclaredMethod("writeObject",ObjectOutputStream.class);      Method readObj=c.getDeclaredMethod("readObject",ObjectInputStream.class);      if (!Modifier.isStatic(writeObj.getModifiers()) && !Modifier.isStatic(readObj.getModifiers()) && writeObj.getReturnType() == void.class && readObj.getReturnType() == void.class)       return true;    } catch (    NoSuchMethodException ignored) {    }  }  return false;}  }
class C{  public DefaultIntervalXYDataset createSampleDataset1(){  DefaultIntervalXYDataset d=new DefaultIntervalXYDataset();  double[] x1=new double[]{1.0,2.0,3.0};  double[] x1Start=new double[]{0.9,1.9,2.9};  double[] x1End=new double[]{1.1,2.1,3.1};  double[] y1=new double[]{4.0,5.0,6.0};  double[] y1Start=new double[]{1.09,2.09,3.09};  double[] y1End=new double[]{1.11,2.11,3.11};  double[][] data1=new double[][]{x1,x1Start,x1End,y1,y1Start,y1End};  d.addSeries("S1",data1);  double[] x2=new double[]{11.0,12.0,13.0};  double[] x2Start=new double[]{10.9,11.9,12.9};  double[] x2End=new double[]{11.1,12.1,13.1};  double[] y2=new double[]{14.0,15.0,16.0};  double[] y2Start=new double[]{11.09,12.09,13.09};  double[] y2End=new double[]{11.11,12.11,13.11};  double[][] data2=new double[][]{x2,x2Start,x2End,y2,y2Start,y2End};  d.addSeries("S2",data2);  return d;}  }
class C{  private char nextchar(){  return (char)input.nextchar();}  }
class C{  protected Node newNode(){  return new SVGOMFEConvolveMatrixElement();}  }
class C{  public static Migrator withSession(final Session session){  return new Migrator(session);}  }
class C{  private synchronized void _stop(){  while (m_activities.size() > 0) {    Activity a=(Activity)m_activities.get(m_activities.size() - 1);    a.cancel();  }  _setRunning(false);  notify();}  }
class C{  protected FastDateFormat(final String pattern,final TimeZone timeZone,final Locale locale){  this(pattern,timeZone,locale,null);}  }
class C{  @Override protected String convertToString(final Object value){  String strValue=value.toString();  return strValue.length() == 0 ? "" : strValue.substring(0,1);}  }
class C{  public EipEditor(){  super();  initializeEditingDomain();}  }
class C{  public void forceRewriteExif(String filename) throws FileNotFoundException, IOException {  forceRewriteExif(filename,getAllTags());}  }
class C{  public void changeDotAmount(int amount){  stopAnimation();  setDotAmount(amount);  setDotPosition(0);  reinitialize();}  }
class C{  void deleteExtent(String extentName) throws VPlexApiException {  s_logger.info("Deleting extent {}",extentName);  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  VPlexExtentInfo extentInfo=discoveryMgr.findExtent(extentName);  String storageVolumeName=extentName.substring(VPlexApiConstants.EXTENT_PREFIX.length(),extentName.indexOf(VPlexApiConstants.EXTENT_SUFFIX));  if (extentInfo != null) {    ClientResponse response=null;    try {      s_logger.info("Destroying extent {}",extentName);      URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_DESTROY_EXTENT);      Map<String,String> argsMap=new HashMap<String,String>();      argsMap.put(VPlexApiConstants.ARG_DASH_S,extentInfo.getPath());      JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,true);      s_logger.info("Destroy extent POST data is {}",postDataObject.toString());      response=_vplexApiClient.post(requestURI,postDataObject.toString());      String responseStr=response.getEntity(String.class);      s_logger.info("Destroy extent response is {}",responseStr);      if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {        if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {          s_logger.info("Destroy extent completing asynchronously");          _vplexApiClient.waitForCompletion(response);        } else {          String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);          throw VPlexApiException.exceptions.deleteExtentFailureStatus(extentName,String.valueOf(response.getStatus()),cause);        }      }      s_logger.info("Successfully destroyed extent {}",extentName);      unclaimStorageVolume(storageVolumeName);    } catch (    VPlexApiException vae) {      throw vae;    }catch (    Exception e) {      throw VPlexApiException.exceptions.failedDeleteExtent(extentName,e);    } finally {      if (response != null) {        response.close();      }    }  } else {    unclaimStorageVolume(storageVolumeName);  }}  }
class C{  public static boolean addField(Document doc,String field,Object fieldValue){  Class<?> clazz=fieldValue.getClass();  if (clazz == String.class) {    doc.add(new TextField(field,(String)fieldValue,Store.NO));  } else   if (clazz == Long.class) {    doc.add(new LongPoint(field,(Long)fieldValue));  } else   if (clazz == Integer.class) {    doc.add(new IntPoint(field,(Integer)fieldValue));  } else   if (clazz == Float.class) {    doc.add(new FloatPoint(field,(Float)fieldValue));  } else   if (clazz == Double.class) {    doc.add(new DoublePoint(field,(Double)fieldValue));  } else {    return false;  }  return true;}  }
class C{  public void addLayoutComponent(String name,Component c){}  }
class C{  public static float abs_floor(float x){  float result;  if (x >= 0.0)   result=MathUtil.floor(x); else   result=MathUtil.ceil(x);  return result;}  }
class C{  protected RemoteParallelGatewaySenderEventProcessor(AbstractGatewaySender sender,Set<Region> userRegions,int id,int nDispatcher){  super(sender,userRegions,id,nDispatcher);}  }
class C{  private void entryCreateInSynchPersistTypeForIOExceptionCase(Region region) throws Exception {  UninterruptibleFileChannel oplogFileChannel=((LocalRegion)region).getDiskRegion().testHook_getChild().getFileChannel();  oplogFileChannel.close();  try {    region.create("key1","value1");    fail("Should have encountered DiskAccessException");  } catch (  DiskAccessException dae) {  }  ((LocalRegion)region).getDiskStore().waitForClose();  assertTrue(cache.isClosed());  region=null;}  }
class C{  public void initialise() throws XMLException {  loader=new MqttSpyDaemonConfigLoader();  showInfo();}  }
class C{  protected void fireAreaInvalidated(Rectangle invalidatedArea){  ToolEvent event=null;  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ToolListener.class) {      if (event == null) {        event=new ToolEvent(this,getView(),invalidatedArea);      }      ((ToolListener)listeners[i + 1]).areaInvalidated(event);    }  }}  }
class C{  public boolean isDottedUnderlineTriple(Node x,Node y,Node z){  return getGraph().isDottedUnderlineTriple(x,y,z);}  }
class C{  public void adjustIndentation(int delta){  if (delta < 0) {    indentationLevel=Math.max(0,indentationLevel + delta);  } else {    indentationLevel+=delta;  }}  }
class C{  public static void createAndShowTableDemoFrame(){  JFrame frame=new JFrame("LGoodDatePicker Table Editors Demo " + InternalUtilities.getProjectVersionString());  frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  TableEditorsDemo tableDemoPanel=new TableEditorsDemo();  frame.setContentPane(tableDemoPanel);  tableDemoPanel.setOpaque(true);  frame.pack();  frame.setSize(new Dimension(1000,700));  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  public void readFromNBT(NBTTagCompound nbt){}  }
class C{  public static byte[] decode(String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  private boolean saveLOBData(){  if (isStoreAttachmentsOnFileSystem) {    return saveLOBDataToFileSystem();  }  return saveLOBDataToDB();}  }
class C{  private static CstString makeShortForm(Prototype prototype){  StdTypeList parameters=prototype.getParameterTypes();  int size=parameters.size();  StringBuilder sb=new StringBuilder(size + 1);  sb.append(shortFormCharFor(prototype.getReturnType()));  for (int i=0; i < size; i++) {    sb.append(shortFormCharFor(parameters.getType(i)));  }  return new CstString(sb.toString());}  }
class C{  public final void mulTransposeBoth(Matrix4f m1,Matrix4f m2){  if (this != m1 && this != m2) {    this.m00=m1.m00 * m2.m00 + m1.m10 * m2.m01 + m1.m20 * m2.m02 + m1.m30 * m2.m03;    this.m01=m1.m00 * m2.m10 + m1.m10 * m2.m11 + m1.m20 * m2.m12 + m1.m30 * m2.m13;    this.m02=m1.m00 * m2.m20 + m1.m10 * m2.m21 + m1.m20 * m2.m22 + m1.m30 * m2.m23;    this.m03=m1.m00 * m2.m30 + m1.m10 * m2.m31 + m1.m20 * m2.m32 + m1.m30 * m2.m33;    this.m10=m1.m01 * m2.m00 + m1.m11 * m2.m01 + m1.m21 * m2.m02 + m1.m31 * m2.m03;    this.m11=m1.m01 * m2.m10 + m1.m11 * m2.m11 + m1.m21 * m2.m12 + m1.m31 * m2.m13;    this.m12=m1.m01 * m2.m20 + m1.m11 * m2.m21 + m1.m21 * m2.m22 + m1.m31 * m2.m23;    this.m13=m1.m01 * m2.m30 + m1.m11 * m2.m31 + m1.m21 * m2.m32 + m1.m31 * m2.m33;    this.m20=m1.m02 * m2.m00 + m1.m12 * m2.m01 + m1.m22 * m2.m02 + m1.m32 * m2.m03;    this.m21=m1.m02 * m2.m10 + m1.m12 * m2.m11 + m1.m22 * m2.m12 + m1.m32 * m2.m13;    this.m22=m1.m02 * m2.m20 + m1.m12 * m2.m21 + m1.m22 * m2.m22 + m1.m32 * m2.m23;    this.m23=m1.m02 * m2.m30 + m1.m12 * m2.m31 + m1.m22 * m2.m32 + m1.m32 * m2.m33;    this.m30=m1.m03 * m2.m00 + m1.m13 * m2.m01 + m1.m23 * m2.m02 + m1.m33 * m2.m03;    this.m31=m1.m03 * m2.m10 + m1.m13 * m2.m11 + m1.m23 * m2.m12 + m1.m33 * m2.m13;    this.m32=m1.m03 * m2.m20 + m1.m13 * m2.m21 + m1.m23 * m2.m22 + m1.m33 * m2.m23;    this.m33=m1.m03 * m2.m30 + m1.m13 * m2.m31 + m1.m23 * m2.m32 + m1.m33 * m2.m33;  } else {    float m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33;    m00=m1.m00 * m2.m00 + m1.m10 * m2.m01 + m1.m20 * m2.m02 + m1.m30 * m2.m03;    m01=m1.m00 * m2.m10 + m1.m10 * m2.m11 + m1.m20 * m2.m12 + m1.m30 * m2.m13;    m02=m1.m00 * m2.m20 + m1.m10 * m2.m21 + m1.m20 * m2.m22 + m1.m30 * m2.m23;    m03=m1.m00 * m2.m30 + m1.m10 * m2.m31 + m1.m20 * m2.m32 + m1.m30 * m2.m33;    m10=m1.m01 * m2.m00 + m1.m11 * m2.m01 + m1.m21 * m2.m02 + m1.m31 * m2.m03;    m11=m1.m01 * m2.m10 + m1.m11 * m2.m11 + m1.m21 * m2.m12 + m1.m31 * m2.m13;    m12=m1.m01 * m2.m20 + m1.m11 * m2.m21 + m1.m21 * m2.m22 + m1.m31 * m2.m23;    m13=m1.m01 * m2.m30 + m1.m11 * m2.m31 + m1.m21 * m2.m32 + m1.m31 * m2.m33;    m20=m1.m02 * m2.m00 + m1.m12 * m2.m01 + m1.m22 * m2.m02 + m1.m32 * m2.m03;    m21=m1.m02 * m2.m10 + m1.m12 * m2.m11 + m1.m22 * m2.m12 + m1.m32 * m2.m13;    m22=m1.m02 * m2.m20 + m1.m12 * m2.m21 + m1.m22 * m2.m22 + m1.m32 * m2.m23;    m23=m1.m02 * m2.m30 + m1.m12 * m2.m31 + m1.m22 * m2.m32 + m1.m32 * m2.m33;    m30=m1.m03 * m2.m00 + m1.m13 * m2.m01 + m1.m23 * m2.m02 + m1.m33 * m2.m03;    m31=m1.m03 * m2.m10 + m1.m13 * m2.m11 + m1.m23 * m2.m12 + m1.m33 * m2.m13;    m32=m1.m03 * m2.m20 + m1.m13 * m2.m21 + m1.m23 * m2.m22 + m1.m33 * m2.m23;    m33=m1.m03 * m2.m30 + m1.m13 * m2.m31 + m1.m23 * m2.m32 + m1.m33 * m2.m33;    this.m00=m00;    this.m01=m01;    this.m02=m02;    this.m03=m03;    this.m10=m10;    this.m11=m11;    this.m12=m12;    this.m13=m13;    this.m20=m20;    this.m21=m21;    this.m22=m22;    this.m23=m23;    this.m30=m30;    this.m31=m31;    this.m32=m32;    this.m33=m33;  }}  }
class C{  private void keepAlive(){  keepAlive(true);}  }
class C{  public EntityAttributeSource createEntityAttributeSource(){  EntityAttributeSourceImpl entityAttributeSource=new EntityAttributeSourceImpl();  return entityAttributeSource;}  }
class C{  private void appendPolygonText(Polygon polygon,int level,boolean indentFirst,Writer writer) throws IOException {  if (polygon.isEmpty()) {    writer.write("EMPTY");  } else {    if (indentFirst)     indent(level,writer);    writer.write("(");    appendLineStringText(polygon.getExteriorRing(),level,false,writer);    for (int i=0; i < polygon.getNumInteriorRing(); i++) {      writer.write(", ");      appendLineStringText(polygon.getInteriorRingN(i),level + 1,true,writer);    }    writer.write(")");  }}  }
class C{  public String format(String raw){  Matcher matcher=delimiterPattern.matcher(raw);  if (!matcher.find()) {    throw new IllegalArgumentException("Unable to find delimiter regex " + delimiterPattern);  } else {    if (matcher.start() == license.length() && raw.startsWith(license)) {      return raw;    } else {      return license + raw.substring(matcher.start());    }  }}  }
class C{  private void checkOutdatedMovieDetails(Cursor cursor){  if (hasIssuedOutdatedRefresh)   return;  cursor.moveToFirst();  long lastUpdated=cursor.getLong(MovieDetailsQuery.UPDATED);  if (System.currentTimeMillis() > lastUpdated + Settings.DB_UPDATE_INTERVAL) {    hasIssuedOutdatedRefresh=true;    startSync(true);  }}  }
class C{  public static Credentials acquireS4U2proxyCreds(String backend,Ticket second,PrincipalName client,Credentials ccreds) throws KrbException, IOException {  KrbTgsReq req=new KrbTgsReq(ccreds,second,new PrincipalName(backend));  Credentials creds=req.sendAndGetCreds();  if (!creds.getClient().equals(client)) {    throw new KrbException("S4U2proxy request not honored by KDC");  }  return creds;}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static boolean isBookOpen(UseCaseConf useCaseConf,Integer bookId) throws BookException, SessionException, ValidationException {  if (bookId != null) {    List listBook=BookSession.getInOutBooksOpen(useCaseConf.getSessionID(),useCaseConf.getLocale(),useCaseConf.getEntidadId());    if (listBook != null && !listBook.isEmpty()) {      for (Iterator iterator=listBook.iterator(); iterator.hasNext(); ) {        ScrRegStateByLanguage book=(ScrRegStateByLanguage)iterator.next();        if (book.getIdocarchhdrId().intValue() == bookId.intValue()) {          return true;        }      }    }  }  return false;}  }
class C{  public static boolean isPrefixMapped(String mapping){  return (mapping.charAt(0) == '/');}  }
class C{  public CampaignConfigurationBuilder withMaxCpc(Money maxCpc){  this.maxCpc=maxCpc;  return this;}  }
class C{  private BeanUtils(){}  }
class C{  public void add_apps(List<InstalledApp> to_add){  _app_adapter.add_apps(to_add);}  }
class C{  public static ContentValues[] values(long restaurantId,Place place){  List<Photo> photos=place.getPhotos();  return !photos.isEmpty() ? values(new ContentValues[photos.size()],restaurantId,place) : null;}  }
class C{  public T caseDelegatingMember(DelegatingMember object){  return null;}  }
class C{  public Node appendNode(Object name,Map attributes,Object value){  return new Node(this,name,attributes,value);}  }
class C{  public HistoryModifiedData clone(){  HistoryModifiedData result=new HistoryModifiedData();  result.DataValues=DataValues == null ? null : DataValues.clone();  if (ModificationInfos != null) {    result.ModificationInfos=new ModificationInfo[ModificationInfos.length];    for (int i=0; i < ModificationInfos.length; i++)     result.ModificationInfos[i]=ModificationInfos[i].clone();  }  return result;}  }
class C{  public double endWaitingTime(){  return endWaitingTime;}  }
class C{  @GET @Path("{jobId}") @ApiOperation(value="JSONP specific method which supports both read operation and store operation using GET") public ProjectAnalysisJob readOrStore(@PathParam("projectId") String projectId,@PathParam(PARAM_NAME) String jobId,@QueryParam("analysisJob") String analysisJobJSON,@QueryParam("timeout") Integer timeout){  if (analysisJobJSON == null) {    ProjectAnalysisJob read=delegate.read(userContext,new ProjectAnalysisJobPK(userContext.getCustomerId(),projectId,jobId));    return read;  } else {    ObjectMapper mapper=new ObjectMapper();    try {      ProjectAnalysisJob analysisJob=mapper.readValue(analysisJobJSON,ProjectAnalysisJob.class);      return delegate.store(userContext,analysisJob,timeout);    } catch (    Exception e) {      throw new WebApplicationException(e);    }  }}  }
class C{  public String replace(final String source){  if (source == null) {    return null;  }  final StrBuilder buf=new StrBuilder(source);  if (substitute(buf,0,source.length()) == false) {    return source;  }  return buf.toString();}  }
class C{  public ConnectionConfig(jmri.jmrix.NetworkPortAdapter p){  super(p);}  }
class C{  public static String escapeAttributeEntities(String str){  if (str == null)   return null;  StringBuffer buffer;  char ch;  String entity;  buffer=null;  for (int i=0; i < str.length(); i++) {    ch=str.charAt(i);switch (ch) {case '<':      entity="&lt;";    break;case '>':  entity="&gt;";break;case '\"':entity="&quot;";break;case '&':entity="&amp;";break;case '\r':entity="&#xD;";break;case '\t':entity="&#x9;";break;case '\n':entity="&#xA;";break;default :entity=null;break;}if (buffer == null) {if (entity != null) {buffer=new StringBuffer(str.length() + 20);buffer.append(str.substring(0,i));buffer.append(entity);}} else {if (entity == null) {buffer.append(ch);} else {buffer.append(entity);}}}return (buffer == null) ? str : buffer.toString();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.REFERENCED_STATE_MACHINE___NAME_1:    return getName_1();case UmplePackage.REFERENCED_STATE_MACHINE___DEFINITION_NAME_1:  return getDefinitionName_1();case UmplePackage.REFERENCED_STATE_MACHINE___EXTENDED_STATE_MACHINE_1:return getExtendedStateMachine_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public ChooserIntentBuilder forIntents(Collection<Intent> intents){  mIntent.putExtra(BottomSheetChooserActivity.EXTRA_SHARE_INTENTS,new ArrayList<>(intents));  return this;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/continuous-copies/failover") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskList failoverProtection(@PathParam("id") URI id,CopiesParam param) throws ControllerException {  TaskResourceRep taskResp=null;  TaskList taskList=new TaskList();  ArgValidator.checkFieldUriType(id,BlockConsistencyGroup.class,"id");  ArgValidator.checkFieldNotEmpty(param.getCopies(),"copies");  final BlockConsistencyGroup consistencyGroup=(BlockConsistencyGroup)queryResource(id);  if (!consistencyGroup.created()) {    throw APIException.badRequests.consistencyGroupNotCreated();  }  List<Copy> copies=param.getCopies();  if (copies.size() > 1) {    throw APIException.badRequests.failoverCopiesParamCanOnlyBeOne();  }  Copy copy=copies.get(0);  ArgValidator.checkFieldUriType(copy.getCopyID(),VirtualArray.class,"copyId");  ArgValidator.checkFieldNotEmpty(copy.getType(),"type");  if (TechnologyType.RP.name().equalsIgnoreCase(copy.getType())) {    taskResp=performProtectionAction(id,copy,ProtectionOp.FAILOVER.getRestOp());    taskList.getTaskList().add(taskResp);  } else   if (TechnologyType.SRDF.name().equalsIgnoreCase(copy.getType())) {    taskResp=performSRDFProtectionAction(id,copy,ProtectionOp.FAILOVER.getRestOp());    taskList.getTaskList().add(taskResp);  } else {    throw APIException.badRequests.invalidCopyType(copy.getType());  }  return taskList;}  }
class C{  public String outputFileTipText(){  return "Set the destination for saving raw output. If the rawOutput " + "option is selected, then output from the splitEvaluator for " + "individual train-test splits is saved. If the destination is a "+ "directory, "+ "then each output is saved to an individual gzip file; if the "+ "destination is a file, then each output is saved as an entry "+ "in a zip file.";}  }
class C{  public static void clearCondition(String condition){  BValue cond;synchronized (conditions) {    cond=(BValue)conditions.get(condition);    if (cond == null) {      return;    }synchronized (cond) {      if (cond.v) {        conditions.remove(condition);      }    }  }}  }
class C{  protected String translate(String key,Object... objects){  return messageSource.getMessage(key,objects,null);}  }
class C{  public double eval(double params[]){  double p1=params[0];  double p2=params[1];  double p3=params[2];  double p4=params[3];  return (p1 > p2) ? p3 : p4;}  }
class C{  private JournalMetadata valueAtIndex(final long index){  final byte[] val=super.valueAt(index);  assert val != null : "Entry has null value: index=" + index;  final JournalMetadata entry=(JournalMetadata)SerializerUtil.deserialize(val);  return entry;}  }
class C{  void visitDot(ExpressionTree node0){  ExpressionTree node=node0;  Deque<ExpressionTree> stack=new ArrayDeque<>();  LOOP:   do {    stack.addFirst(node);    if (node.getKind() == ARRAY_ACCESS) {      node=getArrayBase(node);    }switch (node.getKind()) {case MEMBER_SELECT:      node=((MemberSelectTree)node).getExpression();    break;case METHOD_INVOCATION:  node=getMethodReceiver((MethodInvocationTree)node);break;case IDENTIFIER:node=null;break LOOP;default :node=stack.removeFirst();break LOOP;}} while (node != null);List<ExpressionTree> items=new ArrayList<>(stack);boolean needDot=false;if (node != null) {if (node.getKind() == NEW_CLASS && ((NewClassTree)node).getClassBody() != null) {builder.open(ZERO);scan(getArrayBase(node),null);token(".");} else {builder.open(plusFour);scan(getArrayBase(node),null);builder.breakOp();needDot=true;}formatArrayIndices(getArrayIndices(node));if (stack.isEmpty()) {builder.close();return;}}int prefixIndex=TypeNameClassifier.typePrefixLength(simpleNames(stack));int invocationCount=0;int firstInvocationIndex=-1;{for (int i=0; i < items.size(); i++) {ExpressionTree expression=items.get(i);if (expression.getKind() == METHOD_INVOCATION) {if (i > 0 || node != null) {invocationCount++;}if (firstInvocationIndex < 0) {firstInvocationIndex=i;}}}}if (invocationCount == 1) {prefixIndex=firstInvocationIndex;}if (prefixIndex == -1 && items.get(0) instanceof IdentifierTree) {switch (((IdentifierTree)items.get(0)).getName().toString()) {case "this":case "super":prefixIndex=1;break;default :break;}}if (prefixIndex > 0) {visitDotWithPrefix(items,needDot,prefixIndex);} else {visitRegularDot(node0,items,needDot);}if (node != null) {builder.close();}}  }
class C{  protected NumericLiteral(float n){  this(n,XMLSchema.FLOAT);}  }
class C{  public static boolean isSocketTimeoutException(final InterruptedIOException e){  return e instanceof SocketTimeoutException;}  }
class C{  public void onSuccess(String content){}  }
class C{  public static void sendEvent(int category,int action){  sendEvent(getString(category),getString(action));}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  response.setContentType("text/html");  PrintWriter out=response.getWriter();  out.println("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">");  out.println("<HTML>");  out.println("  <HEAD><TITLE>A Servlet</TITLE></HEAD>");  out.println("  <BODY>");  out.print("    This is ");  out.print(this.getClass());  out.println(", using the POST method");  out.println("  </BODY>");  out.println("</HTML>");  out.flush();  out.close();}  }
class C{  protected void onPrivateMessage(String sender,String login,String hostname,String target,String message){}  }
class C{  @RequestMapping("flush_reference_data_cache") @ResponseStatus(HttpStatus.OK) public void renewReferenceDataCache(){  LOG.info("------ renewReferenceDataCache was called --------");  cacheUpdateService.clearReferenceDataCache();}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy){  startScroll(startX,startY,dx,dy,DEFAULT_DURATION);}  }
class C{  private void decodeArmorAndInternals(Mech mech,int loc,String s){  mech.initializeArmor(Integer.parseInt(s.substring(2,4)),loc);  mech.initializeInternal(Integer.parseInt(s.substring(12)),loc);}  }
class C{  public Object remove(String key){  return this.map.remove(key);}  }
class C{  public void internalFrameClosing(InternalFrameEvent e){  ActionEvent e2=new ActionEvent(e.getSource(),ActionEvent.ACTION_PERFORMED,"FrameClosing");  CloseSessionAction closeSessionAction=new CloseSessionAction();  closeSessionAction.actionPerformed(e2);}  }
class C{  public CSetBreakpointsAction(final CDebugPerspectiveModel model,final List<ITraceEvent> events){  super("Set Breakpoints on events");  m_model=model;  m_events=events;}  }
class C{  public static boolean isWithCall(final String name,final Expression callArguments){  boolean isWithCall="with".equals(name) && callArguments instanceof ArgumentListExpression;  if (isWithCall) {    ArgumentListExpression argList=(ArgumentListExpression)callArguments;    List<Expression> expressions=argList.getExpressions();    isWithCall=expressions.size() == 1 && expressions.get(0) instanceof ClosureExpression;  }  return isWithCall;}  }
class C{  public static boolean isUnsafe(int optionNumber){  return (optionNumber & 2) > 0;}  }
class C{  public static String array2oct(final byte[] array){  return byteArray2String(array,"0o",", ",true,8);}  }
class C{  int adjustTextWidth(int width){  maxTextWidth=Math.max(maxTextWidth,width);  return maxTextWidth;}  }
class C{  public void testRandomSortsOnLargeIndex() throws Exception {  final Collection<String> allFieldNames=getAllSortFieldNames();  final int initialDocs=TestUtil.nextInt(random(),100,200);  final int totalDocs=atLeast(500);  for (int i=1; i <= initialDocs; i++) {    SolrInputDocument doc=buildRandomDocument(i);    assertU(adoc(doc));  }  assertU(commit());  for (  String f : allFieldNames) {    for (    String order : new String[]{" asc"," desc"}) {      String sort=f + order + ("id".equals(f) ? "" : ", id" + order);      String rows="" + TestUtil.nextInt(random(),13,50);      SentinelIntSet ids=assertFullWalkNoDups(totalDocs,params("q","*:*","fl","id","rows",rows,"sort",sort));      assertEquals(initialDocs,ids.size());    }  }  for (int i=initialDocs + 1; i <= totalDocs; i++) {    SolrInputDocument doc=buildRandomDocument(i);    assertU(adoc(doc));  }  assertU(commit());  final int numRandomSorts=atLeast(3);  for (int i=0; i < numRandomSorts; i++) {    final String sort=buildRandomSort(allFieldNames);    final String rows="" + TestUtil.nextInt(random(),63,113);    final String fl=random().nextBoolean() ? "id" : "id,score";    final boolean matchAll=random().nextBoolean();    final String q=matchAll ? "*:*" : buildRandomQuery();    SentinelIntSet ids=assertFullWalkNoDups(totalDocs,params("q",q,"fl",fl,"rows",rows,"sort",sort));    if (matchAll) {      assertEquals(totalDocs,ids.size());    }  }}  }
class C{  public CUdevprop(){}  }
class C{  public TextDocument createTextDocumentView(){  ArrayList<TextBlock> textBlocks=new ArrayList<>();  int i=getNextWebTextIndex(0);  if (i == elements.size())   return new TextDocument(textBlocks);  int curGroup=((WebText)elements.get(i)).getGroupNumber();  int prevGroup=curGroup;  TextBlock curBlock=new TextBlock(elements,i);  for (i++; i < elements.size(); i++) {    if (!(elements.get(i) instanceof WebText))     continue;    curGroup=((WebText)elements.get(i)).getGroupNumber();    if (curGroup == prevGroup) {      curBlock.mergeNext(new TextBlock(elements,i));    } else {      textBlocks.add(curBlock);      prevGroup=curGroup;      curBlock=new TextBlock(elements,i);    }  }  textBlocks.add(curBlock);  return new TextDocument(textBlocks);}  }
class C{  public LockManager(boolean trackLocks){  this(trackLocks,INITIAL_WAIT_TO_COLLECT);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.SEXPERIMENT__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);}return super.eIsSet(featureID);}  }
class C{  private double toLength(IXMLElement elem,String str,double percentFactor) throws IOException {  double scaleFactor=1d;  if (str == null || str.length() == 0 || str.equals("none")) {    return 0d;  }  if (str.endsWith("%")) {    str=str.substring(0,str.length() - 1);    scaleFactor=percentFactor;  } else   if (str.endsWith("px")) {    str=str.substring(0,str.length() - 2);  } else   if (str.endsWith("pt")) {    str=str.substring(0,str.length() - 2);    scaleFactor=1.25;  } else   if (str.endsWith("pc")) {    str=str.substring(0,str.length() - 2);    scaleFactor=15;  } else   if (str.endsWith("mm")) {    str=str.substring(0,str.length() - 2);    scaleFactor=3.543307;  } else   if (str.endsWith("cm")) {    str=str.substring(0,str.length() - 2);    scaleFactor=35.43307;  } else   if (str.endsWith("in")) {    str=str.substring(0,str.length() - 2);    scaleFactor=90;  } else   if (str.endsWith("em")) {    str=str.substring(0,str.length() - 2);    scaleFactor=toLength(elem,readAttribute(elem,"font-size","0"),percentFactor);  } else {    scaleFactor=1d;  }  return Double.parseDouble(str) * scaleFactor;}  }
class C{  private MethodDescriptor[] sortMethodDescriptors(MethodDescriptor[] methodDescriptors){  return methodSorter != null ? methodSorter.sortMethodDescriptors(methodDescriptors) : methodDescriptors;}  }
class C{  public void prune(){  for (Iterator<McRaptorSuboptimalPathProfileRouter.McRaptorState> it=list.iterator(); it.hasNext(); ) {    if (it.next().time >= bestTime + suboptimalSeconds) {      it.remove();    }  }}  }
class C{  @Override public synchronized int size(){  int s=0;  for (  final blobItem bi : this.blobs)   s+=bi.blob.size();  return s;}  }
class C{  public String useEqualFrequencyTipText(){  return "If set to true, equal-frequency binning will be used instead of" + " equal-width binning.";}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.io.File f=getFile(stack);  int height=getInt(stack);  int width=getInt(stack);  float time=getFloat(stack);  float orgtime=time;  MediaFile mf=getMediaFile(stack);  if (mf == null || !mf.isVideo() || mf.isDVD() || mf.isBluRay())   return Boolean.FALSE;  int segment=mf.segmentLocation(Math.round(time * 1000) + mf.getRecordTime(),true);  String pathString=mf.getFile(segment).toString();  time-=(mf.getStart(segment) - mf.getRecordTime()) / 1000.f;  if (time < 0 || time * 1000 > mf.getDuration(segment)) {    if (Sage.DBG)     System.out.println("GenerateThumbnail returning false because the target time is outside of a segment location time=" + orgtime + " "+ mf);    return Boolean.FALSE;  }  if (pathString != null && Sage.client && mf.getGeneralType() != MediaFile.MEDIAFILE_LOCAL_PLAYBACK) {    pathString="stv://" + Sage.preferredServer + "/"+ pathString;  } else   if (mf.isRecording()) {    pathString="stv://localhost/" + pathString;  }  pathString=pathString == null ? null : IOUtils.getLibAVFilenameString(pathString);  boolean deinterlaceGen=false;  sage.media.format.ContainerFormat cf=mf.getFileFormat();  if (cf != null) {    sage.media.format.VideoFormat vidForm=cf.getVideoFormat();    if (vidForm != null && vidForm.isInterlaced())     deinterlaceGen=true;  }  if (width == 0 || height == 0) {    float aspectRatio=mf.getPrimaryVideoAspectRatio(false);    if (aspectRatio <= 0)     aspectRatio=1;    if (width == 0 && height == 0) {      width=Sage.getInt("ui/thumbnail_width_new",512);      height=Sage.getInt("ui/thumbnail_height_new",512);      if (aspectRatio > 1.0f)       height=Math.round(width / aspectRatio); else       width=Math.round(aspectRatio * height);    } else     if (width == 0)     width=Math.round(aspectRatio * height); else     height=Math.round(width / aspectRatio);  }  height-=height % 2;  width-=width % 2;  String res;  try {    res=mf.execVideoThumbGen(pathString,deinterlaceGen,time,width,height,true,f);  } catch (  Exception e) {    return Boolean.FALSE;  }  if (f.isFile() && f.length() > 0)   return Boolean.TRUE;  if (Sage.DBG)   System.out.println("Error with GenerateThumbnail for " + mf + " Output of generator: "+ res);  return Boolean.FALSE;}  }
class C{  @CheckReturnValue @Nonnull static public String unescapeString(@Nonnull String s){  return s.replaceAll("%20"," ").replaceAll("%23","#").replaceAll("%26","&").replaceAll("%27","'").replaceAll("%22","\"").replaceAll("%3C","<").replaceAll("%3E",">");}  }
class C{  public void append(CharSequence s){  text.append(s);}  }
class C{  public void finishInstance(Class<?> clazz){synchronized (activities) {    for (int i=activities.size() - 1; i >= 0; i--) {      if (clazz.isInstance(activities.get(i).getActivity())) {        activities.get(i).finish();        activities.remove(i);      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:34.019 -0500",hash_original_method="26808293282132329FBEA070B2AD722D",hash_generated_method="8BED95A0719243A753F175FC203918B8") public boolean isGlobal(){  return isglobal;}  }
class C{  public void replaceNullIDs(DistributedMember sender){  for (  VersionTag versionTag : this) {    if (versionTag != null) {      versionTag.replaceNullIDs((InternalDistributedMember)sender);    }  }}  }
class C{  public boolean init(){  log.config("");  boolean trl=!Env.isBaseLanguage(Env.getCtx(),"AD_Process");  String sql="SELECT Name, Description, Help, IsReport, ShowHelp " + "FROM AD_Process " + "WHERE AD_Process_ID=?";  if (trl)   sql="SELECT t.Name, t.Description, t.Help, p.IsReport, p.ShowHelp " + "FROM AD_Process p, AD_Process_Trl t " + "WHERE p.AD_Process_ID=t.AD_Process_ID"+ " AND p.AD_Process_ID=? AND t.AD_Language=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_AD_Process_ID);    if (trl)     pstmt.setString(2,Env.getAD_Language(Env.getCtx()));    rs=pstmt.executeQuery();    if (rs.next()) {      m_Name=rs.getString(1);      m_IsReport=rs.getString(4).equals("Y");      m_ShowHelp=rs.getString(5);      m_messageText.append("<b>");      String s=rs.getString(2);      if (rs.wasNull())       m_messageText.append(Msg.getMsg(Env.getCtx(),"StartProcess?")); else       m_messageText.append(s);      m_messageText.append("</b>");      s=rs.getString(3);      if (!rs.wasNull())       m_messageText.append("<p>").append(s).append("</p>");    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (m_Name == null) {    throw new AdempiereException("@NotFound@ @AD_Process_ID@=" + m_AD_Process_ID + ". @CheckMissingTrl@");  }  this.setTitle(m_Name);  message.setText(m_messageText.toString());  bOK.setText(Msg.getMsg(Env.getCtx(),"Start"));  m_pi=new ProcessInfo(m_Name,m_AD_Process_ID);  m_pi.setAD_User_ID(Env.getAD_User_ID(Env.getCtx()));  m_pi.setAD_Client_ID(Env.getAD_Client_ID(Env.getCtx()));  parameterPanel=new ProcessParameterPanel(m_WindowNo,m_pi);  centerPanel.removeAll();  if (parameterPanel.init()) {    centerPanel.add(separator,BorderLayout.NORTH);    centerPanel.add(parameterPanel,BorderLayout.CENTER);  } else {    if (m_ShowHelp != null && m_ShowHelp.equals("N")) {      bOK.doClick();    }  }  if (m_ShowHelp != null && m_ShowHelp.equals("S"))   bOK.doClick();  dialog.revalidate();  return true;}  }
class C{  public InternalDistributedMember(InetAddress addr,int p,boolean isCurrentHost){  netMbr=MemberFactory.newNetMember(addr,p);  if (isCurrentHost) {    defaultToCurrentHost();  }}  }
class C{  @Override public boolean shouldOverrideUrlLoading(WebView view,String url){  return parentEngine.client.onNavigationAttempt(url);}  }
class C{  static <E>ImmutableList<E> asImmutableList(Object[] elements){  return asImmutableList(elements,elements.length);}  }
class C{  private synchronized void writeObject(java.io.ObjectOutputStream s) throws IOException {  s.defaultWriteObject();}  }
class C{  public boolean inTransaction(){  return dbOpenHelper.getWritableDatabase().inTransaction();}  }
class C{  public static float[] cubeToBounds(float[] target,float x,float y,float z,float w,float d,float h){  assert target.length == 6;  target[0]=x;  target[1]=y;  target[2]=z;  target[3]=x + w;  target[4]=y + d;  target[5]=z + h;  return target;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  for (int i=0; i < opSequence.size(); i+=1) {    sb.append(opSequence.get(i) + "\n");  }  return sb.toString();}  }
class C{  public boolean close(){  popupCloser.removeListeners();  if (infoPopup != null) {    infoPopup.close();  }  boolean ret=super.close();  notifyPopupClosed();  return ret;}  }
class C{  public Map<Integer,Field> asMap(){  return fields;}  }
class C{  public DataSet simulateDataFisher(double[][] shocks,int intervalBetweenShocks,double epsilon){  if (intervalBetweenShocks < 1)   throw new IllegalArgumentException("Interval between shocks must be >= 1: " + intervalBetweenShocks);  if (epsilon <= 0.0)   throw new IllegalArgumentException("Epsilon must be > 0: " + epsilon);  int size=variableNodes.size();  if (shocks[0].length != size) {    throw new IllegalArgumentException("The number of columns in the shocks matrix does not equal " + "the number of variables.");  }  setupModel(size);  double[] t1=new double[variableNodes.size()];  double[] t2=new double[variableNodes.size()];  double[][] all=new double[variableNodes.size()][shocks.length];  for (int row=0; row < shocks.length; row++) {    for (int i=0; i < intervalBetweenShocks; i++) {      for (int j=0; j < t1.length; j++) {        t2[j]=shocks[row][j];        for (int k=0; k < parents[j].length; k++) {          t2[j]+=t1[parents[j][k]] * coefs[j][k];        }      }      boolean converged=true;      for (int j=0; j < t1.length; j++) {        if (Math.abs(t2[j] - t1[j]) > epsilon) {          converged=false;          break;        }      }      double[] t3=t1;      t1=t2;      t2=t3;      if (converged) {        break;      }    }    for (int j=0; j < t1.length; j++) {      all[j][row]=t1[j];    }  }  List<Node> continuousVars=new ArrayList<>();  for (  Node node : getVariableNodes()) {    final ContinuousVariable var=new ContinuousVariable(node.getName());    var.setNodeType(node.getNodeType());    continuousVars.add(var);  }  BoxDataSet boxDataSet=new BoxDataSet(new VerticalDoubleDataBox(all),continuousVars);  return DataUtils.restrictToMeasured(boxDataSet);}  }
class C{  public ImageData(Header h) throws FitsException {  this.dataDescription=parseHeader(h);}  }
class C{  public void onFirmwareVersionQueryResponse(OneSheeldDevice device,FirmwareVersion firmwareVersion){}  }
class C{  synchronized void establishConnection() throws IOException {  if (isConnected) {    throw new IOException("Pipe already connected");  }  if (buffer == null) {    buffer=new byte[PipedInputStream.PIPE_SIZE];  }  isConnected=true;}  }
class C{  public StrBuilder appendln(final float value){  return append(value).appendNewLine();}  }
class C{  public void addUrlFeatures(NutchDocument doc,String urlString){  try {    URL url=new URL(urlString);    StringTokenizer names=new StringTokenizer(url.getPath(),"/-");    if (names.hasMoreTokens())     names.nextToken();    while (names.hasMoreTokens()) {      String feature=names.nextToken();      addFeature(doc,feature);    }  } catch (  MalformedURLException e) {    if (LOG.isWarnEnabled()) {      LOG.warn("CC: failed to parse url: " + urlString + " : "+ e);    }  }}  }
class C{  static <T>T doInSuspension(Callable<T> action) throws Exception {  final SolrRequestInfo info=threadLocal.get();  try {    threadLocal.remove();    return action.call();  }  finally {    setRequestInfo(info);  }}  }
class C{  private Transfer writeFloat(float i) throws IOException {  out.writeFloat(i);  return this;}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public static boolean sameURL(URL url1,URL url2){  if (url1 == url2) {    return true;  }  if (url1 == null ^ url2 == null) {    return false;  }  final boolean isFile1="file".equalsIgnoreCase(url1.getProtocol());  final boolean isFile2="file".equalsIgnoreCase(url2.getProtocol());  if (isFile1 && isFile2) {    File file1=new File(url1.getFile());    File file2=new File(url2.getFile());    return file1.equals(file2);  }  if (isFile1 ^ isFile2) {    return false;  }  return getExternalForm(url1).equals(getExternalForm(url2));}  }
class C{  public PercolateRequest preference(String preference){  this.preference=preference;  return this;}  }
class C{  public List<ImportDeclaration> imports(){  return this.imports;}  }
class C{  private void run(){  try {    Thread current=Thread.currentThread();    byte[] buf=new byte[1024];    for (int len=in.read(buf); len != -1; len=in.read(buf)) {      buffer.write(buf,0,len);      if (current != thread) {        break;      }    }    buffer.flush();    buffer.close();  } catch (  IOException e) {    log.error(e.getMessage(),e);  }}  }
class C{  public PacketWrapper create(int packetID,ValueCreator init) throws Exception {  PacketWrapper wrapper=create(packetID);  init.write(wrapper);  return wrapper;}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  protected void parseDownload(final byte[] result) throws ProtocolException {  final int res=ByteArray.byteArrayToInt(result,0);  if (res == Proto.OK) {    if (Cfg.DEBUG) {      Check.log(TAG + " parseDownload, OK");    }    final DataBuffer dataBuffer=new DataBuffer(result,4,result.length - 4);    try {      final int totSize=dataBuffer.readInt();      final int numElem=dataBuffer.readInt();      for (int i=0; i < numElem; i++) {        String file=WChar.readPascal(dataBuffer);        if (Cfg.DEBUG) {          Check.log(TAG + " parseDownload: " + file);        }        file=Directory.expandMacro(file);        file=Protocol.normalizeFilename(file);        Protocol.saveDownloadLog(file);      }    } catch (    final IOException e) {      if (Cfg.EXCEPTION) {        Check.log(e);      }      if (Cfg.DEBUG) {        Check.log(e);      }      throw new ProtocolException();    }  } else   if (res == Proto.NO) {    if (Cfg.DEBUG) {      Check.log(TAG + " Info: parseDownload: no download");    }  } else {    if (Cfg.DEBUG) {      Check.log(TAG + " Error: parseDownload, wrong answer: " + res);    }    throw new ProtocolException();  }}  }
class C{  public static void removeDuplicateBitsets(String javaFile,Charset encoding){  try {    String content=Files.toString(new File(javaFile),encoding);    StringBuilder newContent=new StringBuilder(content.length());    Matcher matcher=bitsetPattern.matcher(content);    int offset=0;    Map<String,String> bitsets=Maps.newHashMap();    Map<String,String> namesToReplace=Maps.newHashMap();    while (matcher.find(offset)) {      String originalFieldName=matcher.group(1);      String synthesizedFieldName="FOLLOW_" + (bitsets.size() + 1);      String bitset=matcher.group(2);      String existing=bitsets.putIfAbsent(bitset,synthesizedFieldName);      if (existing == null) {        existing=synthesizedFieldName;        newContent.append(content,offset,matcher.start(1));        newContent.append(synthesizedFieldName);        newContent.append(" = ");        newContent.append(bitset);      }      namesToReplace.put(originalFieldName,existing);      if (originalFieldName.startsWith("FOLLOW_ruleExpression_in_ruleExpressionStatement")) {        newContent.append(content,offset,matcher.start(1));        newContent.append("FOLLOW_ruleExpression_in_ruleExpressionStatement = ");        newContent.append(existing);      }      offset=matcher.end(2);    }    newContent.append(content,offset,content.length());    content=newContent.toString();    newContent=new StringBuilder(content.length());    String rawFollowPattern="\\bFOLLOW_\\w+\\b";    Pattern followPattern=Pattern.compile(rawFollowPattern);    Matcher followMatcher=followPattern.matcher(content);    Set<String> doNotReplace=Sets.newHashSet(bitsets.values());    doNotReplace.add("FOLLOW_ruleExpression_in_ruleExpressionStatement");    offset=0;    while (followMatcher.find(offset)) {      String replaceMe=followMatcher.group();      String replaceBy=namesToReplace.get(replaceMe);      if (replaceBy == null) {        if (!doNotReplace.contains(replaceMe))         throw new IllegalStateException(replaceMe);        replaceBy=replaceMe;      }      newContent.append(content,offset,followMatcher.start());      newContent.append(replaceBy);      offset=followMatcher.end();    }    newContent.append(content,offset,content.length());    Files.write(newContent,new File(javaFile),encoding);  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  protected void removeTransformerFromManager(Instrumentation manager,ClassFileTransformer transformer){  assertTrue("Transformer not found in manager (" + transformer + ")",manager.removeTransformer(transformer));  if (transformer != null) {    fTransformers.remove(transformer);  }  verbosePrint("Removed transformer " + transformer);}  }
class C{  public void ensureCapacity(int minCapacity){  elements.ensureCapacity(minCapacity);}  }
class C{  public void onSwapWrite(int cnt){  swapPuts.addAndGet(cnt);  if (delegate != null)   delegate.onSwapWrite(cnt);}  }
class C{  @Override public boolean equals(Object o){  if (o == this) {    return true;  }  if (!(o instanceof Map)) {    return false;  }  Map m=(Map)o;  if (m.size() != size()) {    return false;  }  try {    Iterator<Entry> i=entrySet().iterator();    while (i.hasNext()) {      Entry e=i.next();      Object key=e.getKey();      Object value=e.getValue();      if (value == null) {        if (!(m.get(key) == null && m.containsKey(key))) {          return false;        }      } else {        if (!value.equals(m.get(key))) {          return false;        }      }    }  } catch (  ClassCastException unused) {    return false;  }catch (  NullPointerException unused) {    return false;  }  return true;}  }
class C{  public NoSuchMethodException(){  super();}  }
class C{  public IndexOutOfBoundsException(){  super();}  }
class C{  public X509Certificate generateX509Certificate(PrivateKey key,String provider) throws NoSuchProviderException, SecurityException, SignatureException, InvalidKeyException {  return generateX509Certificate(key,provider,null);}  }
class C{  public void testExhaustedLooped() throws Exception {  String algLines[]={"# ----- properties ","content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource","docs.file=" + getReuters20LinesFile(),"content.source.log.step=3","doc.term.vector=false","content.source.forever=false","directory=RAMDirectory","doc.stored=false","doc.tokenized=false","task.max.depth.log=1","# ----- alg ","{ \"Rounds\"","  ResetSystemErase","  CreateIndex","  { \"AddDocs\"  AddDoc > : * ","  CloseIndex","} : 2"};  Benchmark benchmark=execBenchmark(algLines);  IndexReader ir=DirectoryReader.open(benchmark.getRunData().getDirectory());  int ndocsExpected=20;  assertEquals("wrong number of docs in the index!",ndocsExpected,ir.numDocs());  ir.close();}  }
class C{  public static boolean compareAliases(String str1,String str2){  return removeExtraSpaces(str1).equals(removeExtraSpaces(str2));}  }
class C{  public FastAdapterBottomSheetDialog<Item> withOnScrollListener(RecyclerView.OnScrollListener listener){  mRecyclerView.addOnScrollListener(listener);  return this;}  }
class C{  void resume(){  paused.set(false);synchronized (pauseLock) {    pauseLock.notifyAll();  }}  }
class C{  public Tasks<BlockConsistencyGroupRestRep> restoreFullCopy(URI consistencyGroupId,URI fullCopyId){  final String url=getIdUrl() + "/protection/full-copies/{fcid}/restore";  return postTasks(url,consistencyGroupId,fullCopyId);}  }
class C{  @Override public String toString(){  return "RectangleConstraint[" + this.widthConstraintType.toString() + ": width="+ this.width+ ", height="+ this.height+ "]";}  }
class C{  public UnrecoverableKeyException(String msg){  super(msg);}  }
class C{  public char charAt(int index){  return get(index);}  }
class C{  public ExtensionNamespacesManager(){  setPredefinedNamespaces();}  }
class C{  public final void testValidateFails(){  EditText editText=new EditText(getContext());  editText.setText("abc");  EqualValidator equalValidator=new EqualValidator("foo",editText);  assertFalse(equalValidator.validate("123"));}  }
class C{  public InferredTarget findEqualTarget(final Equalities equalities,Set<? extends AnnotationMirror> tops){  for (  Map.Entry<TypeVariable,Set<AnnotationMirror>> targetToHierarchies : equalities.targets.entrySet()) {    final TypeVariable equalTarget=targetToHierarchies.getKey();    final Set<AnnotationMirror> hierarchies=targetToHierarchies.getValue();    boolean targetIsEqualInAllHierarchies=hierarchies.size() == tops.size();    if (targetIsEqualInAllHierarchies) {      return new InferredTarget(equalTarget,new HashSet<AnnotationMirror>());    } else {      final Set<AnnotationMirror> requiredPrimaries=new HashSet<AnnotationMirror>(equalities.primaries.keySet());      requiredPrimaries.removeAll(hierarchies);      boolean typeWithPrimariesIsEqual=(requiredPrimaries.size() + hierarchies.size()) == tops.size();      if (typeWithPrimariesIsEqual) {        return new InferredTarget(equalTarget,requiredPrimaries);      }    }  }  return null;}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public static int rawOffsetRelative(BinaryPositionReadable in,int start){  short flags=in.readShortPositioned(start + GridBinaryMarshaller.FLAGS_POS);  int len=length(in,start);  if (hasSchema(flags)) {    if (hasRaw(flags))     return in.readIntPositioned(start + len - 4); else     return in.readIntPositioned(start + GridBinaryMarshaller.SCHEMA_OR_RAW_OFF_POS);  } else   return in.readIntPositioned(start + GridBinaryMarshaller.SCHEMA_OR_RAW_OFF_POS);}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null) {    zzReader.close();  }}  }
class C{  public <T>T toObject(Class<T> targetClass) throws IOException {  Assert.notNull("targetClass",targetClass);  try {    return mapper.readValue(jsonString,targetClass);  } catch (  IOException e) {    throw e;  }catch (  Exception e) {    throw new IOException(e);  }}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public static MatchesPredicate matches(Property<String> property,String regexp){  return new MatchesPredicate(property(property),regexp);}  }
class C{  public static Field<Boolean> ofBoolean(String name,String description){  return new Field<>(name,Boolean.class,description);}  }
class C{  @Override public boolean hasPassiveShield(int location){  if (isShutDown() || (getCrew().isKoThisRound() || getCrew().isUnconscious())) {    return false;  }  if ((location != Mech.LOC_RARM) && (location != Mech.LOC_LARM)) {    return false;  }  for (int slot=0; slot < this.getNumberOfCriticals(location); slot++) {    CriticalSlot cs=getCritical(location,slot);    if (cs == null) {      continue;    }    if (cs.getType() != CriticalSlot.TYPE_EQUIPMENT) {      continue;    }    if (cs.isDamaged()) {      continue;    }    Mounted m=cs.getMount();    EquipmentType type=m.getType();    if ((type instanceof MiscType) && ((MiscType)type).isShield() && m.curMode().equals(MiscType.S_PASSIVE_SHIELD)) {      return m.getCurrentDamageCapacity(this,m.getLocation()) > 0;    }  }  return false;}  }
class C{  public TFloatHashSet(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public Iterator<E> descendingIterator(){  return m.descendingKeySet().iterator();}  }
class C{  public char skipTo(char to) throws JSONException {  char c;  try {    long startIndex=this.index;    long startCharacter=this.character;    long startLine=this.line;    this.reader.mark(1000000);    do {      c=this.next();      if (c == 0) {        this.reader.reset();        this.index=startIndex;        this.character=startCharacter;        this.line=startLine;        return c;      }    } while (c != to);  } catch (  IOException exc) {    throw new JSONException(exc);  }  this.back();  return c;}  }
class C{  public static String formatMins(long mins){  assert mins >= 0;  if (mins == 0)   return "< 1 min";  SB sb=new SB();  long dd=mins / 1440;  if (dd > 0)   sb.a(dd).a(dd == 1 ? " day " : " days ");  mins%=1440;  long hh=mins / 60;  if (hh > 0)   sb.a(hh).a(hh == 1 ? " hour " : " hours ");  mins%=60;  if (mins > 0)   sb.a(mins).a(mins == 1 ? " min " : " mins ");  return sb.toString().trim();}  }
class C{  public void moveFavorites(Activity activity){  if (!getSharedPrefs().getBoolean(FAVORITES_MOVED,false)) {    String fav=activity.getPreferences(Activity.MODE_PRIVATE).getString("favorites",null);    getSharedPrefs().edit().putString(FAVORITES,fav).putBoolean(FAVORITES_MOVED,true).apply();    Log.d("prefHelper","moved favorites");  }}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera);  }}  }
class C{  public void updateFirewall(){  try {    BTEngine engine=BTEngine.getInstance();    updateFirewallLabel(!engine.isFirewalled());  } catch (  Throwable ignored) {  }}  }
class C{  private void parameterType(Method method){  TypeVariable<Method> typeParameter=getTypeParameter(method);  assertLenghtOne(method.getGenericParameterTypes());  Type genericParameterType=method.getGenericParameterTypes()[0];  assertEquals(typeParameter,genericParameterType);  assertTrue(genericParameterType instanceof TypeVariable);  TypeVariable<?> typeVariable=(TypeVariable<?>)genericParameterType;  assertEquals(method,typeVariable.getGenericDeclaration());  Type[] paramBounds=typeVariable.getBounds();  assertLenghtOne(paramBounds);  Type paramBound=paramBounds[0];  assertEquals(BoundedGenericMethods.class,paramBound);}  }
class C{  public File mapUriToFile(Uri uri){  assertBackgroundThread();switch (getUriType(uri)) {case URI_TYPE_FILE:    return new File(uri.getPath());case URI_TYPE_CONTENT:{    Cursor cursor=contentResolver.query(uri,LOCAL_FILE_PROJECTION,null,null,null);    if (cursor != null) {      try {        int columnIndex=cursor.getColumnIndex(LOCAL_FILE_PROJECTION[0]);        if (columnIndex != -1 && cursor.getCount() > 0) {          cursor.moveToFirst();          String realPath=cursor.getString(columnIndex);          if (realPath != null) {            return new File(realPath);          }        }      }  finally {        cursor.close();      }    }  }}return null;}  }
class C{  public boolean areSubprocessesExtendable(){  return false;}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public int executeProcess(){  final List<String> processStrings=tokenizeString(execCommand);  processStrings.addAll(tokenizeString(script));  logger.info(MessageFormat.format("Executing {0} ...",processStrings));  final ProcessBuilder processBuilder=new ProcessBuilder(processStrings);  if (workingDirectory != null) {    final Path dir=Paths.get(workingDirectory);    if (Files.notExists(dir)) {      try {        Files.createDirectories(dir);      } catch (      IOException e) {        logger.warning("Could not create working directory: " + workingDirectory);        return -3;      }    } else     if (!Files.isDirectory(dir)) {      logger.warning(workingDirectory + " already exists but is not a directory.");      return -4;    }    final File directory=dir.toFile();    processBuilder.directory(directory);  }  processBuilder.redirectErrorStream(true);  Integer exitValue;  try {    logger.info("Starting external process ...");    final Process process=processBuilder.start();    sendInputStringToProcess(process);    handleProcessOutput(process);    try {      exitValue=process.waitFor();    } catch (    InterruptedException e) {      logger.warning("Interrupted while waiting, killing external process ...");      process.destroy();      exitValue=-2;    }    logger.info("External process exit value " + exitValue + ".");  } catch (  IOException e) {    logger.log(SEVERE,"Failed to start external Process: ",e.getCause());    exitValue=-1;  }  return exitValue;}  }
class C{  public static void main(String[] args){  Adempiere.startup(true);  MSystem system=MSystem.get(Env.getCtx());  system.setIsJustMigrated(true);  afterMigration(Env.getCtx());}  }
class C{  public static boolean isXML11ValidLiteral(int c){  return ((c < 0x10000 && ((XML11CHARS[c] & MASK_XML11_VALID) != 0 && (XML11CHARS[c] & MASK_XML11_CONTROL) == 0)) || (0x10000 <= c && c <= 0x10FFFF));}  }
class C{  public boolean isFloat(Type type) throws Exception {  return isFloat(type.getType());}  }
class C{  public void readEntityFromNBT(NBTTagCompound p_70037_1_){  this.field_145791_d=p_70037_1_.getShort("xTile");  this.field_145792_e=p_70037_1_.getShort("yTile");  this.field_145789_f=p_70037_1_.getShort("zTile");  this.ticksInGround=p_70037_1_.getShort("life");  this.field_145790_g=Block.getBlockById(p_70037_1_.getByte("inTile") & 255);  this.inData=p_70037_1_.getByte("inData") & 255;  this.arrowShake=p_70037_1_.getByte("shake") & 255;  this.inGround=p_70037_1_.getByte("inGround") == 1;  if (p_70037_1_.hasKey("damage",99)) {    this.damage=p_70037_1_.getDouble("damage");  }  if (p_70037_1_.hasKey("pickup",99)) {    this.canBePickedUp=p_70037_1_.getByte("pickup");  } else   if (p_70037_1_.hasKey("player",99)) {    this.canBePickedUp=p_70037_1_.getBoolean("player") ? 1 : 0;  }}  }
class C{  public void attributeDecl(String elementName,String attributeName,String type,String[] enumeration,String defaultType,XMLString defaultValue,XMLString nonNormalizedDefaultValue,Augmentations augs) throws XNIException {  try {    if (fDeclHandler != null) {      String elemAttr=new StringBuffer(elementName).append("<").append(attributeName).toString();      if (fDeclaredAttrs.get(elemAttr) != null) {        return;      }      fDeclaredAttrs.put(elemAttr,Boolean.TRUE);      if (type.equals("NOTATION") || type.equals("ENUMERATION")) {        StringBuffer str=new StringBuffer();        if (type.equals("NOTATION")) {          str.append(type);          str.append(" (");        } else {          str.append("(");        }        for (int i=0; i < enumeration.length; i++) {          str.append(enumeration[i]);          if (i < enumeration.length - 1) {            str.append('|');          }        }        str.append(')');        type=str.toString();      }      String value=(defaultValue == null) ? null : defaultValue.toString();      fDeclHandler.attributeDecl(elementName,attributeName,type,defaultType,value);    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  private void changeVolumeName(DbClient dbClient,WBEMClient client,CIMObjectPath volumePath,Volume volume,String name){  Lease lease=null;  try {    _log.info(String.format("Attempting to modify volume %s to %s",volumePath.toString(),name));    if (_propertyFactoryRef.get() == null) {      _propertyFactoryRef.compareAndSet(null,(CIMPropertyFactory)ControllerServiceImpl.getBean("CIMPropertyFactory"));    }    CIMInstance toUpdate=new CIMInstance(volumePath,new CIMProperty[]{_propertyFactoryRef.get().string(SmisConstants.CP_ELEMENT_NAME,name)});    if (_distributedLock.get() == null) {      if (_coordinator.get() == null) {        _coordinator.compareAndSet(null,(CoordinatorClient)ControllerServiceImpl.getBean("coordinator"));      }      _distributedLock.compareAndSet(null,_coordinator.get().getSemaphore(this.getClass().getSimpleName(),MAX_PERMITS));    }    lease=_distributedLock.get().acquireLease();    client.modifyInstance(toUpdate,SmisConstants.PS_ELEMENT_NAME);    _distributedLock.get().returnLease(lease);    lease=null;    volume.setDeviceLabel(name);    dbClient.persistObject(volume);    _log.info(String.format("Volume name has been modified to %s",name));  } catch (  WBEMException e) {    _log.error("Encountered an error while trying to set the volume name",e);  }catch (  DatabaseException e) {    _log.error("Encountered an error while trying to set the volume name",e);  }catch (  Exception e) {    _log.error("Encountered an error while trying to set the volume name",e);  } finally {    if (lease != null) {      try {        _distributedLock.get().returnLease(lease);      } catch (      Exception e) {        _log.error("Exception when trying to return lease",e);      }    }  }}  }
class C{  public void log(String message){  log.fine(message);}  }
class C{  public void write(final DataOutputStream outputStream) throws IOException {  if (service != null && service.length != 0) {    outputStream.write((byte)service.length);    outputStream.write(service);  } else {    outputStream.write((byte)0);  }  outputStream.writeShort((short)fileNameOffset);  outputStream.writeShort((short)fileNameLen);  outputStream.writeShort((short)threadNameOffset);  outputStream.writeShort((short)threadNameLen);  outputStream.write((byte)level);  outputStream.writeShort((short)lineNumberOffset);  outputStream.write((byte)lineNumberLen);  outputStream.writeLong(time);  outputStream.writeShort((short)timeBytesOffset);  outputStream.write((byte)timeBytesLen);  outputStream.writeShort((short)logOffset);  byte[] combinedMsg=getRawLogContent();  if (combinedMsg != null && combinedMsg.length != 0) {    outputStream.writeInt(combinedMsg.length);    outputStream.write(combinedMsg);  } else {    outputStream.writeInt(0);  }}  }
