class C{  public String createDescription(final Controller controller,Wallet wallet,List<TransactionInput> transactionInputs,List<TransactionOutput> transactionOutputs,BigInteger credit,BigInteger debit){  String toReturn="";  WalletData perWalletModelData=null;  if (perWalletModelDataList != null) {    for (    WalletData loopPerWalletModelData : perWalletModelDataList) {      if (wallet.equals(loopPerWalletModelData.getWallet())) {        perWalletModelData=loopPerWalletModelData;        break;      }    }  }  if (perWalletModelData == null) {    return toReturn;  }  TransactionOutput myOutput=null;  TransactionOutput theirOutput=null;  if (transactionOutputs != null) {    for (    TransactionOutput transactionOutput : transactionOutputs) {      if (transactionOutput != null && transactionOutput.isMine(perWalletModelData.getWallet())) {        myOutput=transactionOutput;      }      if (transactionOutput != null && !transactionOutput.isMine(perWalletModelData.getWallet())) {        theirOutput=transactionOutput;      }    }  }  if (credit != null && credit.compareTo(BigInteger.ZERO) > 0) {    try {      String addressString="";      if (myOutput != null) {        Address toAddress=new Address(getNetworkParameters(),myOutput.getScriptPubKey().getPubKeyHash());        addressString=toAddress.toString();      }      String label=null;      if (perWalletModelData.getWalletInfo() != null) {        label=perWalletModelData.getWalletInfo().lookupLabelForReceivingAddress(addressString);      }      if (label != null && !label.equals("")) {        toReturn=controller.getLocaliser().getString("multiBitModel.creditDescriptionWithLabel",new Object[]{addressString,label});      } else {        toReturn=controller.getLocaliser().getString("multiBitModel.creditDescription",new Object[]{addressString});      }    } catch (    ScriptException e) {      log.error(e.getMessage(),e);    }  }  if (debit != null && debit.compareTo(BigInteger.ZERO) > 0) {    try {      if (theirOutput != null) {        String addressString=theirOutput.getScriptPubKey().getToAddress(getNetworkParameters()).toString();        String label=null;        if (perWalletModelData.getWalletInfo() != null) {          label=perWalletModelData.getWalletInfo().lookupLabelForSendingAddress(addressString);        }        if (label != null && !label.equals("")) {          toReturn=controller.getLocaliser().getString("multiBitModel.debitDescriptionWithLabel",new Object[]{addressString,label});        } else {          toReturn=controller.getLocaliser().getString("multiBitModel.debitDescription",new Object[]{addressString});        }      }    } catch (    ScriptException e) {      log.error(e.getMessage(),e);    }  }  return toReturn;}  }
class C{  public static void d(String tag,String msg){  d(tag,msg,null);}  }
class C{  static void membershipKeyTests(NetworkInterface nif,InetAddress group,InetAddress source) throws IOException {  System.out.format("MembershipKey test using %s @ %s\n",group.getHostAddress(),nif.getName());  ProtocolFamily family=(group instanceof Inet4Address) ? StandardProtocolFamily.INET : StandardProtocolFamily.INET6;  DatagramChannel dc=DatagramChannel.open(family).setOption(StandardSocketOptions.SO_REUSEADDR,true).bind(new InetSocketAddress(source,0));  MembershipKey key=dc.join(group,nif);  MembershipKey other=dc.join(group,nif);  if (other != key) {    throw new RuntimeException("existing key not returned");  }  if (!key.isValid())   throw new RuntimeException("key is not valid");  if (!key.group().equals(group))   throw new RuntimeException("group is incorrect");  if (!key.networkInterface().equals(nif))   throw new RuntimeException("network interface is incorrect");  if (key.sourceAddress() != null)   throw new RuntimeException("key is source specific");  key.drop();  if (key.isValid()) {    throw new RuntimeException("key is still valid");  }  try {    key=dc.join(group,nif,source);    other=dc.join(group,nif,source);    if (other != key) {      throw new RuntimeException("existing key not returned");    }    if (!key.isValid())     throw new RuntimeException("key is not valid");    if (!key.group().equals(group))     throw new RuntimeException("group is incorrect");    if (!key.networkInterface().equals(nif))     throw new RuntimeException("network interface is incorrect");    if (!key.sourceAddress().equals(source))     throw new RuntimeException("key's source address incorrect");    key.drop();    if (key.isValid()) {      throw new RuntimeException("key is still valid");    }  } catch (  UnsupportedOperationException x) {  }  dc.close();}  }
class C{  public boolean isReadable(){  return getter != null;}  }
class C{  public CopyTargetEdit(int offset,CopySourceEdit source){  this(offset);  setSourceEdit(source);}  }
class C{  public void acceptImage(ImageEvent imageE){  BufferedImage image=imageE.getImage();  if (m_fileName != null && m_fileName.length() > 0) {    if (m_env == null) {      m_env=Environment.getSystemWide();    }    String filename=m_fileName;    try {      filename=m_env.substitute(m_fileName);    } catch (    Exception ex) {    }    if (filename.toLowerCase().indexOf(".png") < 0) {      filename+=".png";    }    File file=new File(filename);    if (!file.isDirectory()) {      try {        ImageIO.write(image,"png",file);      } catch (      IOException e) {        if (m_logger != null) {          m_logger.statusMessage(statusMessagePrefix() + "WARNING: " + "an error occurred whilte trying to write image (see log)");          m_logger.logMessage("[" + getCustomName() + "] "+ "an error occurred whilte trying to write image: "+ e.getMessage());        } else {          e.printStackTrace();        }      }    } else {      String message="Can't write image to file because supplied filename" + " is a directory!";      if (m_logger != null) {        m_logger.statusMessage(statusMessagePrefix() + "WARNING: " + message);        m_logger.logMessage("[" + getCustomName() + "] "+ message);      }    }  } else {    String message="Can't write image bacause no filename has been supplied!" + " is a directory!";    if (m_logger != null) {      m_logger.statusMessage(statusMessagePrefix() + "WARNING: " + message);      m_logger.logMessage("[" + getCustomName() + "] "+ message);    }  }}  }
class C{  public void reset(){  internalReset(0L);}  }
class C{  public String toString(){  return String.format("(%f, %f) @%s",latitude,longitude,date.toString());}  }
class C{  public BinaryFunction(int numArgs,boolean[] functionColumn){  this.numArgs=numArgs;  if (functionColumn.length > getNumRows()) {    throw new IllegalArgumentException("Function column does not have " + "the right number of rows for " + numArgs + " argument: "+ functionColumn.length);  }  this.functionColumn=new int[getNumRows()];  resetFunction(getIndex(functionColumn));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void loadCalendarData(){  try {    String resourceName=calendarProperties.getProperty(PROP_PREFIX + typeId);    Objects.requireNonNull(resourceName,"Resource missing for calendar: " + PROP_PREFIX + typeId);    Properties props=readConfigProperties(resourceName);    Map<Integer,int[]> years=new HashMap<>();    int minYear=Integer.MAX_VALUE;    int maxYear=Integer.MIN_VALUE;    String id=null;    String type=null;    String version=null;    int isoStart=0;    for (    Map.Entry<Object,Object> entry : props.entrySet()) {      String key=(String)entry.getKey();switch (key) {case KEY_ID:        id=(String)entry.getValue();      break;case KEY_TYPE:    type=(String)entry.getValue();  break;case KEY_VERSION:version=(String)entry.getValue();break;case KEY_ISO_START:{int[] ymd=parseYMD((String)entry.getValue());isoStart=(int)LocalDate.of(ymd[0],ymd[1],ymd[2]).toEpochDay();break;}default :try {int year=Integer.valueOf(key);int[] months=parseMonths((String)entry.getValue());years.put(year,months);maxYear=Math.max(maxYear,year);minYear=Math.min(minYear,year);} catch (NumberFormatException nfe) {throw new IllegalArgumentException("bad key: " + key);}}}if (!getId().equals(id)) {throw new IllegalArgumentException("Configuration is for a different calendar: " + id);}if (!getCalendarType().equals(type)) {throw new IllegalArgumentException("Configuration is for a different calendar type: " + type);}if (version == null || version.isEmpty()) {throw new IllegalArgumentException("Configuration does not contain a version");}if (isoStart == 0) {throw new IllegalArgumentException("Configuration does not contain a ISO start date");}hijrahStartEpochMonth=minYear * 12;minEpochDay=isoStart;hijrahEpochMonthStartDays=createEpochMonths(minEpochDay,minYear,maxYear,years);maxEpochDay=hijrahEpochMonthStartDays[hijrahEpochMonthStartDays.length - 1];for (int year=minYear; year < maxYear; year++) {int length=getYearLength(year);minYearLength=Math.min(minYearLength,length);maxYearLength=Math.max(maxYearLength,length);}} catch (Exception ex) {PlatformLogger logger=PlatformLogger.getLogger("java.time.chrono");logger.severe("Unable to initialize Hijrah calendar proxy: " + typeId,ex);throw new DateTimeException("Unable to initialize HijrahCalendar: " + typeId,ex);}}  }
class C{  public V value(){  return value;}  }
class C{  @Override public NormalCard subTitle(@NotNull String subTitle){  mSubTitle=subTitle;  isSubTitle=true;  return this;}  }
class C{  protected void diff_charsToLines(LinkedList<Diff> diffs,List<String> lineArray){  StringBuilder text;  for (  Diff diff : diffs) {    text=new StringBuilder();    for (int y=0; y < diff.text.length(); y++) {      text.append(lineArray.get(diff.text.charAt(y)));    }    diff.text=text.toString();  }}  }
class C{  public RegionBasedSelection(){  super();}  }
class C{  private boolean overridesSuperclassMethod(JavaClass javaClass,Method method){  if (method.isStatic()) {    return false;  }  try {    JavaClass[] superclassList=javaClass.getSuperClasses();    if (superclassList != null) {      JavaClassAndMethod match=Hierarchy.findMethod(superclassList,method.getName(),method.getSignature(),Hierarchy.INSTANCE_METHOD);      if (match != null) {        return true;      }    }    JavaClass[] interfaceList=javaClass.getAllInterfaces();    if (interfaceList != null) {      JavaClassAndMethod match=Hierarchy.findMethod(interfaceList,method.getName(),method.getSignature(),Hierarchy.INSTANCE_METHOD);      if (match != null) {        return true;      }    }    return false;  } catch (  ClassNotFoundException e) {    return true;  }}  }
class C{  public BenchServerImpl() throws RemoteException {}  }
class C{  public double[] toArrayDegrees(){  return new double[]{this.minLatitude.degrees,this.maxLatitude.degrees,this.minLongitude.degrees,this.maxLongitude.degrees};}  }
class C{  @Override public String convertToString(EDataType eDataType,Object instanceValue){switch (eDataType.getClassifierID()) {case TypesPackage.DIRECTION:    return convertDirectionToString(eDataType,instanceValue);default :  throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  public Type basicGetDefinedType(){  return definedType;}  }
class C{  @Override public V put(K key,V value){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public void removeAllBoundingSectors(){  this.boundingSectors.clear();}  }
class C{  @Override public void putAll(Map<? extends Double,? extends V> map){  Iterator<? extends Entry<? extends Double,? extends V>> it=map.entrySet().iterator();  for (int i=map.size(); i-- > 0; ) {    Entry<? extends Double,? extends V> e=it.next();    this.put(e.getKey(),e.getValue());  }}  }
class C{  public Tomcat70AgentValve(){  super(true);}  }
class C{  public static Scss cs_schol(int order,Scs A){  int n, c[], post[], P[];  Scs C;  Scss S;  if (!Scs_util.CS_CSC(A))   return (null);  n=A.n;  S=new Scss();  P=Scs_amd.cs_amd(order,A);  S.pinv=Scs_pinv.cs_pinv(P,n);  if (order != 0 && S.pinv == null)   return null;  C=Scs_symperm.cs_symperm(A,S.pinv,false);  S.parent=Scs_etree.cs_etree(C,false);  post=Scs_post.cs_post(S.parent,n);  c=Scs_counts.cs_counts(C,S.parent,post,false);  S.cp=new int[n + 1];  S.unz=S.lnz=Scs_cumsum.cs_cumsum(S.cp,c,n);  return ((S.lnz >= 0) ? S : null);}  }
class C{  public void commit(boolean ddl){  currentTransactionName=null;  transactionStart=0;  if (containsUncommitted()) {    database.commit(this);  }  if (temporaryLobs != null) {    for (    Value v : temporaryLobs) {      v.close();    }    temporaryLobs.clear();  }  if (!ddl) {    cleanTempTables(false);    if (autoCommitAtTransactionEnd) {      autoCommit=true;      autoCommitAtTransactionEnd=false;    }  }  endTransaction();  boolean commit=true;  List<SQLException> commitExceptions=New.arrayList();  StringBuilder buf=new StringBuilder();  for (  Map.Entry<String,Connection> entry : connectionHolder.entrySet()) {    if (commit) {      try {        entry.getValue().commit();        buf.append("\ncommit shard " + entry.getKey() + " transaction succeed.");      } catch (      SQLException ex) {        commit=false;        commitExceptions.add(ex);        buf.append("\ncommit shard " + entry.getKey() + " transaction failure.");      }    } else {      try {        entry.getValue().rollback();        buf.append("\nrollback shard " + entry.getKey() + " transaction succeed.");      } catch (      SQLException ex) {        buf.append("\nrollback shard " + entry.getKey() + " transaction failure.");      }    }  }  if (commitExceptions.isEmpty()) {    trace.debug("commit multiple group transaction succeed. commit track list:{0}",buf);  } else {    trace.error(commitExceptions.get(0),"fail to commit multiple group transaction. commit track list:{0}",buf);    DbException.convert(commitExceptions.get(0));  }}  }
class C{  public void rollback(Savepoint s) throws SQLException {  conn.rollback(s);}  }
class C{  @Override protected void initialize(){  super.initialize();  m_PlotShapes=null;  m_Clusterer=null;  m_Evaluation=null;}  }
class C{  private void createFullScreenVao(){  this.vao=glCreateVertexArrays();  int vbo=glCreateBuffers();  ByteBuffer bb=BufferUtils.createByteBuffer(4 * 2 * 6);  FloatBuffer fv=bb.asFloatBuffer();  fv.put(-1.0f).put(-1.0f);  fv.put(1.0f).put(-1.0f);  fv.put(1.0f).put(1.0f);  fv.put(1.0f).put(1.0f);  fv.put(-1.0f).put(1.0f);  fv.put(-1.0f).put(-1.0f);  glNamedBufferData(vbo,bb,GL_STATIC_DRAW);  glEnableVertexArrayAttrib(this.vao,0);  glVertexArrayAttribFormat(this.vao,0,2,GL_FLOAT,false,0);  glVertexArrayVertexBuffer(this.vao,0,vbo,0L,8);  glVertexArrayAttribBinding(this.vao,0,0);}  }
class C{  public void close(int arg){  return;}  }
class C{  ByteVector put12(final int b,final int s){  int length=this.length;  if (length + 3 > data.length) {    enlarge(3);  }  byte[] data=this.data;  data[length++]=(byte)b;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  private static int adjustIntervalIfJitterIsEnabled(final long intervalMillis){  final int minLegal=minimum();  final int maxLegal=maximum();  if (intervalMillis <= minLegal) {    return (int)intervalMillis;  }  int maxValue=maxLegal;  if (intervalMillis < maxLegal) {    maxValue=(int)intervalMillis;  }  return minLegal + jitter.nextInt(maxValue - minLegal + 1);}  }
class C{  public static java.lang.Class forName(java.lang.String className) throws java.lang.ClassNotFoundException {  return null;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public EclipsePreferencesAdapter(IScopeContext context,String qualifier){  fContext=context;  fQualifier=qualifier;}  }
class C{  public StringPropertyMatcherBuilder code(){  return new StringPropertyMatcherBuilder(this,"code",null);}  }
class C{  public void paint(GlyphView v,Graphics g,Shape a,int p0,int p1){  sync(v);  Segment text;  TabExpander expander=v.getTabExpander();  Rectangle alloc=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();  int x=alloc.x;  int p=v.getStartOffset();  int[] justificationData=getJustificationData(v);  if (p != p0) {    text=v.getText(p,p0);    int width=Utilities.getTabbedTextWidth(v,text,metrics,x,expander,p,justificationData);    x+=width;    SegmentCache.releaseSharedSegment(text);  }  int y=alloc.y + metrics.getHeight() - metrics.getDescent();  text=v.getText(p0,p1);  g.setFont(metrics.getFont());  Utilities.drawTabbedText(v,text,x,y,g,expander,p0,justificationData);  SegmentCache.releaseSharedSegment(text);}  }
class C{  @Override public void update(byte[] bArray,int off,int len){  long newCrc=crc ^ LONG_MASK;  for (int i=off; i < off + len; i++) {    newCrc=updateByte(bArray[i],newCrc);  }  crc=newCrc ^ LONG_MASK;}  }
class C{  private void drawTriangle(Canvas canvas,Paint paint,float[] path,float x,float y){  path[0]=x;  path[1]=y - size - size / 2;  path[2]=x - size;  path[3]=y + size;  path[4]=x + size;  path[5]=path[3];  drawPath(canvas,path,paint,true);}  }
class C{  public static Intent createSendEmailIntent(String[] recipients,String subject,String text,Uri stream){  Intent i=new Intent(Intent.ACTION_SEND);  i.setType("message/rfc822");  if (recipients != null) {    i.putExtra(Intent.EXTRA_EMAIL,recipients);  }  i.putExtra(Intent.EXTRA_SUBJECT,subject);  if (!TextUtils.isEmpty(text)) {    i.putExtra(Intent.EXTRA_TEXT,text);  }  if (stream != null) {    i.putExtra(Intent.EXTRA_STREAM,stream);  }  return i;}  }
class C{  protected boolean isOutgoingDiscoveryAllowed(long sw,short port,boolean isStandard,boolean isReverse){  if (isLinkDiscoverySuppressed(sw,port)) {    return false;  }  IOFSwitch iofSwitch=floodlightProvider.getSwitch(sw);  if (iofSwitch == null) {    return false;  }  if (port == OFPort.OFPP_LOCAL.getValue())   return false;  ImmutablePort ofpPort=iofSwitch.getPort(port);  if (ofpPort == null) {    if (log.isTraceEnabled()) {      log.trace("Null physical port. sw={}, port={}",HexString.toHexString(sw),port);    }    return false;  }  if (!isReverse && autoPortFastFeature && iofSwitch.isFastPort(port))   return false;  return true;}  }
class C{  public Class<K> keyType(){  return keyType;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case OrientedPackage.PORT__ID:    return ID_EDEFAULT == null ? id != null : !ID_EDEFAULT.equals(id);case OrientedPackage.PORT__TYPE:  return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);}return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeattributenodeattribute.class,args);}  }
class C{  public static String[] lineToArray(String line){  String[] splitArray;  splitArray=line.split(" ");  return splitArray;}  }
class C{  public void defaultMutate(EvolutionState state,int thread){  IntegerVectorSpecies s=(IntegerVectorSpecies)species;  for (int x=0; x < genome.length; x++)   if (state.random[thread].nextBoolean(s.mutationProbability(x))) {    byte old=genome[x];    for (int retries=0; retries < s.duplicateRetries(x) + 1; retries++) {switch (s.mutationType(x)) {case IntegerVectorSpecies.C_RESET_MUTATION:        genome[x]=(byte)randomValueFromClosedInterval((byte)s.minGene(x),(byte)s.maxGene(x),state.random[thread]);      break;case IntegerVectorSpecies.C_RANDOM_WALK_MUTATION:    int min=(int)s.minGene(x);  int max=(int)s.maxGene(x);if (!s.mutationIsBounded(x)) {  max=Byte.MAX_VALUE;  min=Byte.MIN_VALUE;}do {int n=(int)(state.random[thread].nextBoolean() ? 1 : -1);int g=genome[x];if ((n == 1 && g < max) || (n == -1 && g > min)) genome[x]=(byte)(g + n); else if ((n == -1 && g < max) || (n == 1 && g > min)) genome[x]=(byte)(g - n);} while (state.random[thread].nextBoolean(s.randomWalkProbability(x)));break;default :state.output.fatal("In ByteVectorIndividual.defaultMutate, default case occurred when it shouldn't have");break;}if (genome[x] != old) break;}}}  }
class C{  public boolean canScrollHorizontally(int direction){  final int offset=computeHorizontalScrollOffset();  final int range=computeHorizontalScrollRange() - computeHorizontalScrollExtent();  if (range == 0)   return false;  if (direction < 0) {    return offset > 0;  } else {    return offset < range - 1;  }}  }
class C{  private XlsxCell[] parseNextRowWithContent() throws ParseException, XMLStreamException {  boolean isRowWithContent=false;  boolean isValue=false;  boolean contentFound=false;  int columnIndex=0;  int numberOfColumns=sheetMetaData.getNumberOfColumns();  XlsxCell[] nextRowWithContent=new XlsxCell[numberOfColumns];  while (!isRowWithContent && reader.hasNext()) {switch (reader.next()) {case XMLStreamReader.START_ELEMENT:      String startLocalName=reader.getLocalName();    if (startLocalName.equals(XlsxUtilities.TAG_ROW)) {      String indexValue=XlsxUtilities.getAttributes(reader).getValue(XlsxUtilities.TAG_ROW_INDEX);      try {        parsedRowIndex=Integer.parseInt(indexValue) - 1;      } catch (      NumberFormatException e) {        throw new ParseException(new ParsingError(parsedRowIndex,columnIndex,ErrorCode.FILE_SYNTAX_ERROR,indexValue));      }    } else     if (startLocalName.equals(XlsxUtilities.TAG_CELL)) {      Attributes attributes=XlsxUtilities.getAttributes(reader);      String cellReference=attributes.getValue(XlsxUtilities.TAG_CELL_REFERENCE);      try {        columnIndex=sheetMetaData.mapColumnIndex(XlsxUtilities.convertCellRefToCoordinates(cellReference).columnNumber);      } catch (      IllegalArgumentException e) {        throw new ParseException(new ParsingError(parsedRowIndex,columnIndex,ParsingError.ErrorCode.FILE_SYNTAX_ERROR,cellReference));      }      if (sheetMetaData.isSkipColumn(columnIndex)) {        break;      }      String cellType=attributes.getValue(ATT_CELL_TYPE);      String cellStyle=attributes.getValue(ATT_CELL_STYLE);      XlsxCellType type=XlsxCellType.getCellType(cellType,numberFormats,cellStyle);      if (type != null) {        nextRowWithContent[columnIndex]=new XlsxCell(type);      } else {        throw new ParseException(new ParsingError(parsedRowIndex,columnIndex,ParsingError.ErrorCode.FILE_SYNTAX_ERROR,cellType));      }    } else     if (startLocalName.equals(TAG_VALUE) || startLocalName.equals(TAG_INLINE_STRING)) {      isValue=true;    }  break;case XMLStreamReader.END_ELEMENT:String endLocalName=reader.getLocalName();if (endLocalName.equals(XlsxUtilities.TAG_ROW)) {isRowWithContent=contentFound;} else if (endLocalName.equals(TAG_VALUE) || endLocalName.equals(TAG_INLINE_STRING)) {isValue=false;}break;case XMLStreamReader.CHARACTERS:if (!sheetMetaData.isSkipColumn(columnIndex) && isValue) {String text=reader.getText();if (nextRowWithContent[columnIndex].cellType.equals(XlsxCellType.SHARED_STRING)) {nextRowWithContent[columnIndex].value=sharedStrings[Integer.parseInt(text)];} else {nextRowWithContent[columnIndex].value=text;}emptyColumn[columnIndex]=false;contentFound=true;}break;case XMLStreamReader.END_DOCUMENT:this.hasMoreContent=false;break;default :break;}}return nextRowWithContent;}  }
class C{  public int size(Macros macros){  RegExp1 unary;  RegExp2 binary;  RegExp content;switch (type) {case sym.BAR:    binary=(RegExp2)this;  return binary.r1.size(macros) + binary.r2.size(macros) + 2;case sym.CONCAT:binary=(RegExp2)this;return binary.r1.size(macros) + binary.r2.size(macros);case sym.STAR:unary=(RegExp1)this;content=(RegExp)unary.content;return content.size(macros) + 2;case sym.PLUS:unary=(RegExp1)this;content=(RegExp)unary.content;return content.size(macros) + 2;case sym.QUESTION:unary=(RegExp1)this;content=(RegExp)unary.content;return content.size(macros);case sym.BANG:unary=(RegExp1)this;content=(RegExp)unary.content;return content.size(macros) * content.size(macros);case sym.TILDE:unary=(RegExp1)this;content=(RegExp)unary.content;return content.size(macros) * content.size(macros) * 3;case sym.STRING:case sym.STRING_I:unary=(RegExp1)this;return ((String)unary.content).length() + 1;case sym.CHAR:case sym.CHAR_I:return 2;case sym.CCLASS:case sym.CCLASSNOT:return 2;case sym.MACROUSE:unary=(RegExp1)this;return macros.getDefinition((String)unary.content).size(macros);}throw new Error("unknown regexp type " + type);}  }
class C{  public void start(){  if (mProgressDrawable != null)   ((Animatable)mProgressDrawable).start();}  }
class C{  public com.google.re2j.Pattern standardPattern(){  return matcher.pattern();}  }
class C{  @Override public void handlePatch(Operation patch){  ServiceUtils.logInfo(this,"Handling patch for service %s",getSelfLink());  State startState=getState(patch);  State patchState=patch.getBody(State.class);  validatePatchState(startState,patchState);  State currentState=applyPatch(startState,patchState);  validateStartState(currentState);  patch.complete();  try {    if (ControlFlags.isOperationProcessingDisabled(currentState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping patch handling (disabled)");    } else     if (TaskState.TaskStage.STARTED == currentState.taskState.stage) {      scheduleQueryManagementHosts(currentState);    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  void popNamespaceSupport(){  m_nsSupportStack.pop();}  }
class C{  public void insertRow(int at){  insertRow(at,getDefaultValue());}  }
class C{  public int size(){  return size;}  }
class C{  private static boolean seeAllp(){  SecurityManager sm=System.getSecurityManager();  if (sm == null) {    return true;  } else {    if (debug != null) {      if (sm.getClass().getClassLoader() == null && Policy.getPolicyNoCheck().getClass().getClassLoader() == null) {        return true;      }    } else {      try {        sm.checkPermission(SecurityConstants.GET_POLICY_PERMISSION);        return true;      } catch (      SecurityException se) {      }    }  }  return false;}  }
class C{  public ServiceRef createServiceRef(){  ServiceRefImpl serviceRef=new ServiceRefImpl();  return serviceRef;}  }
class C{  public void start(){  thread=new Thread(this);  thread.start();}  }
class C{  public static void testSecure(String loggerName) throws Exception {  if (System.getSecurityManager() != null) {    throw new Error("Security manager is already set");  }  Policy.setPolicy(new SimplePolicy(TestCase.SECURE));  System.setSecurityManager(new SecurityManager());  test(loggerName);}  }
class C{  public static TypeReference createTrusted(Assumptions assumptions,ResolvedJavaType type){  if (type == null) {    return null;  }  ResolvedJavaType exactType=type.isLeaf() ? type : null;  if (exactType == null) {    Assumptions.AssumptionResult<ResolvedJavaType> leafConcreteSubtype=type.findLeafConcreteSubtype();    if (leafConcreteSubtype != null && leafConcreteSubtype.canRecordTo(assumptions)) {      leafConcreteSubtype.recordTo(assumptions);      exactType=leafConcreteSubtype.getResult();    }  }  if (exactType == null) {    return new TypeReference(type,false);  }  return new TypeReference(exactType,true);}  }
class C{  public void appendXML(StringBuffer xmlCode){  e_xmlCode.append(xmlCode);}  }
class C{  public boolean onOrAfter(Version other){  return encodedValue >= other.encodedValue;}  }
class C{  int readCorner4(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 3,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 2,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(2,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(3,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public static void encodeDimension(int value,byte dest[],int offset){  NumericUtils.intToSortableBytes(value,dest,offset);}  }
class C{  protected void finalize() throws Throwable {  this.reader=null;  this.resolver=null;  this.buffer=null;  super.finalize();}  }
class C{  public boolean tableExists(DatabaseMetaData dbMetaData,String tableName) throws SQLException {  return (tableExistsCaseSensitive(dbMetaData,tableName) || tableExistsCaseSensitive(dbMetaData,tableName.toUpperCase(Locale.US)) || tableExistsCaseSensitive(dbMetaData,tableName.toLowerCase(Locale.US)));}  }
class C{  public Verification verifyExportFile(File exportFile,Wallet wallet,BlockChain blockChain,CharSequence exportPassword,CharSequence walletPassword) throws KeyCrypterException {  boolean thereWereFailures=false;  String messageKey="privateKeysHandler.failedForUnknownReason";  Object[] messageData=new Object[0];  try {    Collection<PrivateKeyAndDate> expectedKeysAndDates=createKeyAndDates(wallet,blockChain,walletPassword);    Collection<PrivateKeyAndDate> importedKeysAndDates=readInPrivateKeys(exportFile,exportPassword);    if (expectedKeysAndDates.size() != importedKeysAndDates.size()) {      messageKey="privateKeysHandler.wrongNumberOfKeys";      thereWereFailures=true;    } else {      for (int i=0; i < expectedKeysAndDates.size(); i++) {        Iterator<PrivateKeyAndDate> iteratorExpected=expectedKeysAndDates.iterator();        Iterator<PrivateKeyAndDate> iteratorImported=importedKeysAndDates.iterator();        PrivateKeyAndDate expected=iteratorExpected.next();        PrivateKeyAndDate imported=iteratorImported.next();        if (!Utils.bytesToHexString(expected.getKey().getPrivKeyBytes()).equals(Utils.bytesToHexString(imported.getKey().getPrivKeyBytes()))) {          messageKey="privateKeysHandler.keysDidNotMatch";          thereWereFailures=true;          break;        }        if ((imported.getDate() != null && imported.getDate().after(expected.getDate())) || (imported.getDate() == null && expected.getDate() != null)) {          messageKey="privateKeysHandler.keysDidNotMatch";          thereWereFailures=true;          break;        }      }    }  } catch (  PrivateKeysHandlerException pkhe) {    messageKey="privateKeysHandler.thereWasAnException";    messageData=new Object[]{pkhe.getMessage()};    thereWereFailures=true;  }  if (!thereWereFailures) {    messageKey="privateKeysHandler.verificationSuccess";  }  return new Verification(!thereWereFailures,messageKey,messageData);}  }
class C{  public static double log2(double arg){  return Math.log(arg) / Math.log(2);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:32.742 -0500",hash_original_method="C8355C5823499E966C6E9C9BBED7B59B",hash_generated_method="9B4EC2BE6527E7B6A8E609E1AB6202B8") public boolean isRemovable(){  return mRemovable;}  }
class C{  @Override public void onMessageReceived(String from,final Bundle data){  String message=data.getString("message");  Log.d(TAG,"From: " + from);  Log.d(TAG,"Message: " + message);  final AccountManager am=AccountManager.get(this);  if (data.keySet().contains(NotifySyncService.EXTRA_SYNC)) {    ContentResolver.requestSync(Sessions.getAccount(am),MessageProvider.AUTHORITY,Bundle.EMPTY);  } else {    if (!Sessions.isLogged(am)) {      final Account account=new Account(data.getString(LoginGCMNotificationService.EXTRA_NAME),AuthenticAuthenticator.ACCOUNT_TYPE);      final Bundle authData=new Bundle();      final int loginType=Integer.valueOf(data.get(LoginGCMNotificationService.EXTRA_TYPE).toString());      authData.putInt(AuthenticAuthenticator.EXTRA_TYPE,loginType);      authData.putString(AuthenticAuthenticator.EXTRA_PASSWORD,data.getString(LoginGCMNotificationService.EXTRA_PASSWORD));      try {        final Bundle result=am.confirmCredentials(account,authData,null,null,null).getResult();        if (result.getBoolean(AccountManager.KEY_BOOLEAN_RESULT)) {          Sessions.addAccount(am,account,data.getString(LoginGCMNotificationService.EXTRA_PASSWORD),Bundle.EMPTY);          am.setUserData(account,AuthenticAuthenticator.EXTRA_TYPE,Integer.toString(loginType));          Intent intent=new Intent(getApplicationContext(),LoggedActivity.class);          intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);          startActivity(intent);        }      } catch (      OperationCanceledException e) {        e.printStackTrace();      }catch (      IOException e) {        e.printStackTrace();      }catch (      AuthenticatorException e) {        e.printStackTrace();      }    }  }}  }
class C{  public String func(Integer arg){  called=true;  actualValue=arg;  return "called";}  }
class C{  public IntegerMemberValue(int index,ConstPool cp){  super('I',cp);  this.valueIndex=index;}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.SEQUATIONS__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case GamlPackage.SEQUATIONS__EQUATIONS:  return equations != null && !equations.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public String toString(){  StringBuffer b=new StringBuffer();  b.append("\n" + m_instancesHeader.classAttribute().name() + " = ");  boolean first=true;  for (int i=0; i < m_coefficients.length; i++) {    if (m_coefficients[i] != 0.0) {      double c=m_coefficients[i];      if (first) {        b.append("\n\t" + Utils.doubleToString(c,12,4).trim() + " * "+ m_instancesHeader.attribute(i).name()+ " ");        first=false;      } else {        b.append("\n\t" + ((m_coefficients[i] < 0) ? "- " + Utils.doubleToString(Math.abs(c),12,4).trim() : "+ " + Utils.doubleToString(Math.abs(c),12,4).trim()) + " * "+ m_instancesHeader.attribute(i).name()+ " ");      }    }  }  b.append("\n\t" + ((m_intercept < 0) ? "- " : "+ ") + Utils.doubleToString(Math.abs(m_intercept),12,4).trim());  return b.toString();}  }
class C{  public Builder withLocalModules(){  rule.withLocalModules=true;  return this;}  }
class C{  @Provides @Qualifiers.BaseEventBusBuilder EventBusBuilder provideEventBusBuilder(){  return EventBus.builder().throwSubscriberException(BuildConfig.DEBUG);}  }
class C{  private static String urlsToPath(URL[] urls){  if (urls.length == 0) {    return null;  } else   if (urls.length == 1) {    return urls[0].toExternalForm();  } else {    StringBuffer path=new StringBuffer(urls[0].toExternalForm());    for (int i=1; i < urls.length; i++) {      path.append(' ');      path.append(urls[i].toExternalForm());    }    return path.toString();  }}  }
class C{  @SuppressWarnings("unchecked") public void writeNClob(NClob x) throws SQLException {  attribs.add(x);}  }
class C{  public void testCertificateFactory05() throws CertificateException, NoSuchProviderException {  if (!X509Support) {    fail(NotSupportMsg);    return;  }  CertificateFactory certF;  for (int i=0; i < validValues.length; i++) {    certF=CertificateFactory.getInstance(validValues[i],defaultProviderName);    assertEquals("Incorrect type",certF.getType(),validValues[i]);    assertEquals("Incorrect provider name",certF.getProvider().getName(),defaultProviderName);  }}  }
class C{  @Override protected void onDraw(Canvas canvas){  super.onDraw(canvas);  if (mBitmapShader == null)   return;  canvas.drawCircle(mCenterX,mCenterY,mCoverRadius,mCoverPaint);  canvas.drawCircle(mCenterX,mCenterY,mCoverRadius,mCoverFrontPaint);  mDurationText=secondsToTime(mDurationSecondsCurrent);  mDurationPaint.getTextBounds(mDurationText,0,mDurationText.length(),mRectDuration);  canvas.drawText(mDurationText,(mCenterX - (mRectDuration.width() / 2.0f)),(mCenterY + (mRectDuration.height() / 2.0f)),mDurationPaint);  if (mBitmapUnselectedAction1 != null && mBitmapSelectedAction1 != null) {    canvas.drawBitmap(isAction1Selected ? mBitmapSelectedAction1 : mBitmapUnselectedAction1,(mCenterX - (5 * (mCenterX / 13.0f))),mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f),mActionPaint);  }  if (mBitmapUnselectedAction2 != null && mBitmapSelectedAction2 != null) {    canvas.drawBitmap(isAction2Selected ? mBitmapSelectedAction2 : mBitmapUnselectedAction2,mCenterX - (mCenterX / 13.0f),mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f),mActionPaint);  }  if (mBitmapUnselectedAction3 != null && mBitmapSelectedAction3 != null) {    canvas.drawBitmap(isAction3Selected ? mBitmapSelectedAction3 : mBitmapUnselectedAction3,(int)(mCenterX + (3 * (mCenterX / 13.0f))),mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f),mActionPaint);  }  canvas.drawArc(mProgressRectF,0,360,false,mPaintEmptyProgress);  canvas.drawArc(mProgressRectF,270,calculatePastProgress(),false,mPaintLoadedProgress);  canvas.drawCircle((float)(mCenterX + ((mCenterX - 20.0f) * Math.cos(Math.toRadians(calculatePastProgress() - 90)))),(float)(mCenterY + ((mCenterX - 20.0f) * Math.sin(Math.toRadians(calculatePastProgress() - 90)))),mRadiusToggle,mPaintProgressToggle);}  }
class C{  public void stepDown(boolean shiftDown){  if (shiftDown)   viewpointNode.drag(0,-1); else   viewpointNode.rotate(-1,0);}  }
class C{  public Object remove(String key){  return this.map.remove(key);}  }
class C{  public Vector2f subtract(Vector2f vec){  return subtract(vec,null);}  }
class C{  public static boolean[] toPrimitive(Boolean[] array,boolean valueForNull){  if (array == null) {    return null;  } else   if (array.length == 0) {    return EMPTY_BOOLEAN_ARRAY;  }  final boolean[] result=new boolean[array.length];  for (int i=0; i < array.length; i++) {    Boolean b=array[i];    result[i]=(b == null ? valueForNull : b.booleanValue());  }  return result;}  }
class C{  public void writeTo(OutputStream out) throws IOException {  out.write(buf,0,count);}  }
class C{  public void rectValuesToPixel(List<RectF> rects){  for (int i=0; i < rects.size(); i++)   rectValueToPixel(rects.get(i));}  }
class C{  private boolean isUpdateValid(String downloadFolderPath,ManifestDiff manifestDiff){  File downloadFolder=new File(downloadFolderPath);  if (!downloadFolder.exists()) {    return false;  }  boolean isValid=true;  List<ManifestFile> updateFileList=manifestDiff.getUpdateFiles();  for (  ManifestFile updatedFile : updateFileList) {    File file=new File(downloadFolder,updatedFile.name);    try {      if (!file.exists() || !FilesUtility.calculateFileHash(file).equals(updatedFile.hash)) {        isValid=false;        break;      }    } catch (    Exception e) {      e.printStackTrace();      isValid=false;      break;    }  }  return isValid;}  }
class C{  @Override public ImmutableSortedMap<K,V> build(){switch (size) {case 0:    return emptyMap(comparator);case 1:  return of(comparator,entries[0].getKey(),entries[0].getValue());default :return fromEntries(comparator,false,entries,size);}}  }
class C{  public static INaviView create(final INaviModule container,final INaviView view) throws InternalTranslationException, CouldntLoadDataException {  Preconditions.checkNotNull(container,"IE01768: Container argument can not be null");  Preconditions.checkNotNull(view,"IE01769: View argument can not be null");  final Map<IAddress,String> textMap=new HashMap<IAddress,String>();  for (  final CCodeNode node : view.getBasicBlocks()) {    for (    final INaviInstruction instruction : node.getInstructions()) {      textMap.put(instruction.getAddress(),instruction.toString());    }  }  final INaviView reilView=CReilViewCreator.create(container,view.getContent().getReilCode().getGraph());  for (  final CCodeNode node : reilView.getBasicBlocks()) {    for (    final INaviInstruction reilInstruction : node.getInstructions()) {      if ((reilInstruction.getAddress().toLong() & 0xFF) == 0) {        try {          node.getComments().appendLocalInstructionComment(reilInstruction,textMap.get(ReilHelpers.toNativeAddress(reilInstruction.getAddress())));        } catch (        final CouldntSaveDataException e) {          CUtilityFunctions.logException(e);        }      }    }  }  return reilView;}  }
class C{  protected void init(Connection conn,String triggerName,String schemaName,String tableName) throws SQLException {  if (this.templates == null) {    this.schemaName=schemaName;    this.triggerName=triggerName;    this.templates=getTemplates(conn);  }  if (templates == null || templates.size() == 0) {    throw new IllegalStateException(String.format("The '%s' SymmetricDS trigger is in an invalid state.  It needs to be dropped.",triggerName));  }}  }
class C{  void listActiveItemsUsingConstants() throws Exception {  System.out.println("Secure Systems Inc. - list active items");  ResultSet rs=stat.executeQuery("SELECT NAME FROM ITEMS WHERE ACTIVE=TYPE_ACTIVE");  while (rs.next()) {    System.out.println("Name: " + rs.getString(1));  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(textindexsizeerroffsetoutofbounds.class,args);}  }
class C{  public static long toLong(byte a,byte b,byte c,byte d,byte e,byte f,byte g,byte h,byte i,byte j,byte k,byte l,byte m,byte n,byte o,byte p){  return (((long)a & NIBBLE_MASK) << (NIBBLE_SIZE * 15)) | (((long)b & NIBBLE_MASK) << (NIBBLE_SIZE * 14)) | (((long)c & NIBBLE_MASK) << (NIBBLE_SIZE * 13))| (((long)d & NIBBLE_MASK) << (NIBBLE_SIZE * 12))| (((long)e & NIBBLE_MASK) << (NIBBLE_SIZE * 11))| (((long)f & NIBBLE_MASK) << (NIBBLE_SIZE * 10))| (((long)g & NIBBLE_MASK) << (NIBBLE_SIZE * 9))| (((long)h & NIBBLE_MASK) << (NIBBLE_SIZE * 8))| (((long)i & NIBBLE_MASK) << (NIBBLE_SIZE * 7))| (((long)j & NIBBLE_MASK) << (NIBBLE_SIZE * 6))| (((long)k & NIBBLE_MASK) << (NIBBLE_SIZE * 5))| (((long)l & NIBBLE_MASK) << (NIBBLE_SIZE * 4))| ((long)m << (NIBBLE_SIZE * 3))| (((long)n & NIBBLE_MASK) << (NIBBLE_SIZE * 2))| (((long)o & NIBBLE_MASK) << NIBBLE_SIZE)| ((long)p & NIBBLE_MASK);}  }
class C{  public MotifSplitPaneDivider(BasicSplitPaneUI ui){  super(ui);  highlightColor=UIManager.getColor("SplitPane.highlight");  shadowColor=UIManager.getColor("SplitPane.shadow");  focusedColor=UIManager.getColor("SplitPane.activeThumb");  setDividerSize(hThumbWidth + pad);}  }
class C{  public long cardinality() throws IOException {switch (format) {case NORMAL:    double E=0.0D;  int V=0;for (int i=0; i < this.m; i++) {  byte rho=getRho(i);  E=E + 1.0D / (1L << (int)rho);  if (0 == (int)rho) {    V++;  }}E=1.0D / E;E=alpha[this.p - 4] * this.m * this.m* E;double Eprime=(E <= 5 * this.m) ? E - estimateBias(E,this.p) : E;double H;if (0 != V) {H=linearCounting(this.m,V);} else {H=Eprime;}if ((p <= 18 && H <= THRESHOLDS[this.p - 4]) || (p > 18 && E <= 5 * this.m)) {return Math.round(H);} else {return Math.round(Eprime);}case SPARSE:merge();return Math.round(linearCounting(mprime,mprime - sparse_list_len));default :return -1;}}  }
class C{  public static void addOreWeight(String ore,int weight){  oreWeights.put(ore,weight);}  }
class C{  public T itemSelected(Object handler,String method){  Common common=new Common().forward(handler,method,true,ON_ITEM_SIG);  return itemSelected(common);}  }
class C{  public synchronized void notifyObservers(Object arg){  for (int i=0; i < observers.size(); i++) {    observers.elementAt(i).update(this,arg);  }}  }
class C{  @Override public void close(){}  }
class C{  private double maxDistLevel(DBID id,int level){  final NumberVector obj=relation.get(id);  final double r=1.0 / (1 << (level - 1));  double dist;  if (t == 1.0) {    dist=0.0;    for (int dim=0; dim < d; dim++) {      final double p_m_r=getDimForObject(obj,dim) % r;      dist+=Math.max(p_m_r,r - p_m_r);    }  } else   if (t == 2.0) {    dist=0.0;    for (int dim=0; dim < d; dim++) {      final double p_m_r=getDimForObject(obj,dim) % r;      double a=Math.max(p_m_r,r - p_m_r);      dist+=a * a;    }    dist=Math.sqrt(dist);  } else   if (!Double.isInfinite(t)) {    dist=0.0;    for (int dim=0; dim < d; dim++) {      final double p_m_r=getDimForObject(obj,dim) % r;      dist+=Math.pow(Math.max(p_m_r,r - p_m_r),t);    }    dist=Math.pow(dist,1.0 / t);  } else {    dist=Double.NEGATIVE_INFINITY;    for (int dim=0; dim < d; dim++) {      final double p_m_r=getDimForObject(obj,dim) % r;      dist=Math.max(dist,Math.max(p_m_r,r - p_m_r));    }  }  return dist * diameter;}  }
class C{  public int read(byte[] buf,int offset,int length) throws IOException {  try {    if (_s == null || _is == null)     return -1;    int readLength=_is.read(buf,offset,length);    if (readLength >= 0)     _totalReadBytes+=readLength;    return readLength;  } catch (  InterruptedIOException e) {    if (_throwReadInterrupts)     throw e;    log.log(Level.FINEST,e.toString(),e);  }catch (  IOException e) {    if (_throwReadInterrupts)     throw e;    log.log(Level.FINER,e.toString(),e);  }  return -1;}  }
class C{  private static float[] RGBtoHSV(float[] rgb,float[] hsv){  if (hsv == null) {    hsv=new float[3];  }  float max=ColorModelHSL.max(rgb[0],rgb[1],rgb[2]);  float min=ColorModelHSL.min(rgb[0],rgb[1],rgb[2]);  float saturation=max - min;  if (saturation > 0.0f) {    saturation/=max;  }  hsv[0]=ColorModelHSL.getHue(rgb[0],rgb[1],rgb[2],max,min);  hsv[1]=saturation;  hsv[2]=max;  return hsv;}  }
class C{  public final void addModule(final ConfigGroup specializedConfigModule){  String name=specializedConfigModule.getName();  if (name == null || name.isEmpty()) {    throw new RuntimeException("cannot insert module with empty name");  }  ConfigGroup m=this.modules.get(name);  if (m != null) {    if (m.getClass() == ConfigGroup.class && specializedConfigModule.getClass() != ConfigGroup.class) {      for (      Map.Entry<String,String> e : m.getParams().entrySet()) {        specializedConfigModule.addParam(e.getKey(),e.getValue());      }      this.modules.put(name,specializedConfigModule);    } else {      throw new IllegalArgumentException("Module " + name + " exists already.");    }  }  this.modules.put(name,specializedConfigModule);}  }
class C{  public void updateText(){  MainWindow mw=Dert.getMainWindow();  if (mw != null)   mw.updateMarbleLocationField();  View view=viewData.getView();  if (view == null) {    return;  }  if (work == null) {    work=new Vector2();  }  Marble marble=(Marble)mapElement;  Vector3 loc=new Vector3(marble.getWorldTranslation());  Landscape.getInstance().localToWorldCoordinate(loc);  String str="Location (meters): " + StringUtil.format(loc) + "\n";  Landscape.getInstance().worldToSphericalCoordinate(loc);  str+="Longitude: " + StringUtil.format(loc.getX()) + StringUtil.DEGREE+ "\n";  str+="Latitude: " + StringUtil.format(loc.getY()) + StringUtil.DEGREE+ "\n";  ReadOnlyVector3 normal=marble.getNormal();  str+="Surface Normal Vector: " + StringUtil.format(normal) + "\n";  ReadOnlyVector3 dir=World.getInstance().getLighting().getLightDirection();  str+="Solar Direction Vector: " + StringUtil.format(dir) + "\n";  Vector3 angle=MathUtil.directionToAzEl(dir,null);  str+="Solar Incidence Angle: " + StringUtil.format(90 - Math.toDegrees(angle.getY())) + "\n";  str+="Sub-solar Azimuth: " + StringUtil.format(Math.toDegrees(angle.getX())) + "\n";  str+="Elevation (meters): " + StringUtil.format(loc.getZ()) + "\n";  str+="Slope: " + StringUtil.format(MathUtil.getSlopeFromNormal(normal)) + StringUtil.DEGREE+ "\n";  str+="Aspect: " + StringUtil.format(MathUtil.getAspectFromNormal(normal)) + StringUtil.DEGREE+ "\n";  ((TextView)view).setText(str);}  }
class C{  public RequestHandle(RequestQueue requestQueue,String url,WebAddress uri,String method,Map<String,String> headers,InputStream bodyProvider,int bodyLength,Request request,Connection conn){  this(requestQueue,url,uri,method,headers,bodyProvider,bodyLength,request);  mConnection=conn;}  }
class C{  private void checkPermittedIP(Set permitted,byte[] ip) throws PKIXNameConstraintValidatorException {  if (permitted == null) {    return;  }  Iterator it=permitted.iterator();  while (it.hasNext()) {    byte[] ipWithSubnet=(byte[])it.next();    if (isIPConstrained(ip,ipWithSubnet)) {      return;    }  }  if (ip.length == 0 && permitted.size() == 0) {    return;  }  throw new PKIXNameConstraintValidatorException("IP is not from a permitted subtree.");}  }
class C{  public static String fromUUID(UUID value){  return DASH_PAT.matcher(value.toString()).replaceAll("");}  }
class C{  public TypedProperties(){  this.map=new HashMap<String,String>();}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement elem){  if (m_selectPattern != null) {    error(XSLTErrorResources.ER_CANT_HAVE_CONTENT_AND_SELECT,new Object[]{"xsl:" + this.getNodeName()});    return null;  }  return super.appendChild(elem);}  }
class C{  public static void moveAtomicReplace(String source,String target){  FilePath.get(source).moveTo(FilePath.get(target),true);}  }
class C{  public Object read(InputNode node) throws Exception {  Instance type=factory.getInstance(node);  Object list=type.getInstance();  if (!type.isReference()) {    return populate(node,list);  }  return list;}  }
class C{  public void addActor(String name,String role,String thumb){  Actor actor=new Actor(name,role,thumb);  actors.add(actor);}  }
class C{  public LazyArray(final ObjectProvider<? extends Type> provider,final Array<? extends Type> array){  super(array);  this.provider=provider;}  }
class C{  public EncodedImage(final byte[] imageData,final String format,final boolean isStatic){  if (imageData == null) {    throw new IllegalArgumentException("imageData parameter is null");  }  if (format == null) {    throw new IllegalArgumentException("format parameter is null");  }  this.image=new ByteBuffer(imageData);  this.extension=format;  this.isStatic=isStatic;}  }
class C{  public List<PoiTag> queryByPoiId(Long poiId){  if (poiId == null) {    return new ArrayList<>();  }  return queryForEq(PoiTag.POI_ID,poiId);}  }
class C{  public static List<CnATreeElement> konsolidiereMassnahmen(BausteinUmsetzung source,BausteinUmsetzung target){  if (!source.getKapitel().equals(target.getKapitel())) {    return Collections.emptyList();  }  List<CnATreeElement> changedElements=new LinkedList<CnATreeElement>();  for (  MassnahmenUmsetzung mn : target.getMassnahmenUmsetzungen()) {    MassnahmenUmsetzung sourceMn=source.getMassnahmenUmsetzung(mn.getUrl());    if (sourceMn != null) {      mn.getEntity().copyEntity(sourceMn.getEntity());      changedElements.add(mn);    }  }  return changedElements;}  }
class C{  private static int secondaryHash(int h){  h^=(h >>> 20) ^ (h >>> 12);  return h ^ (h >>> 7) ^ (h >>> 4);}  }
class C{  public boolean markSupported(){  return true;}  }
class C{  protected void onGotTextViewBackground(T t,TextView view,ViewHelper vp){}  }
class C{  protected void closeEventStream(){  try {    this.eventStream.close();    this.eventStream=null;  } catch (  IOException e) {    String message=Logging.getMessage("generic.ExceptionClosingXmlEventReader");    Logging.logger().warning(message);  }}  }
class C{  public void addEventListener(String type,EventListener listener,boolean useCapture){  addEventListenerNS(null,type,listener,useCapture,null);}  }
class C{  private static boolean isController(Resource resource){  final Boolean b1=resource.getHandlerClasses().stream().map(null).reduce(Boolean.FALSE,null);  final Boolean b2=resource.getHandlerInstances().stream().map(null).reduce(Boolean.FALSE,null);  return b1 || b2;}  }
class C{  public static String documentToXml(Document doc){  return print(doc,DEFAULT);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.332 -0500",hash_original_method="12DAC0CE56878A53F37AFF65E12010EB",hash_generated_method="68CB0655189E46325916378CAE21EACC") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public boolean markSupported(){  return false;}  }
class C{  public InlineQueryResultLocation.InlineQueryResultLocationBuilder longitude(Double longitude){  this.longitude=longitude;  return this;}  }
class C{  public String toString(){  return ((namespaceURI.equals(EMPTY_STRING)) ? localPart : '{' + namespaceURI + '}'+ localPart);}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;  }}  }
class C{  @Override public void putAll(Map<? extends Long,? extends Float> map){  Iterator<? extends Entry<? extends Long,? extends Float>> it=map.entrySet().iterator();  for (int i=map.size(); i-- > 0; ) {    Entry<? extends Long,? extends Float> e=it.next();    this.put(e.getKey(),e.getValue());  }}  }
class C{  public FreeRing(int capacity){  _ringQueue=new QueueRingFixed<T>(capacity);}  }
class C{  public InExpression add(Object object){  this.getChildren().add(new ConstantExpression(object));  return this;}  }
class C{  public void emitop4(int op,int od){  emitop(op);  if (!alive)   return;  emit4(od);switch (op) {case goto_w:    markDead();  break;case jsr_w:break;default :throw new AssertionError(mnem(op));}}  }
class C{  public int lastIndexOf(int offset,float value){  for (int i=offset; i-- > 0; ) {    if (_data[i] == value) {      return i;    }  }  return -1;}  }
class C{  private Object writeReplace() throws java.io.ObjectStreamException {  return new KeyRep(KeyRep.Type.PRIVATE,getAlgorithm(),getFormat(),getEncoded());}  }
class C{  public void addIrregular(String singular,String plural){  addPlural("(.*)(" + singular.substring(0,1) + ")"+ singular.substring(1)+ "$","\\1\\2" + plural.substring(1));  addSingular("(.*)(" + plural.substring(0,1) + ")"+ plural.substring(1)+ "$","\\1\\2" + singular.substring(1));}  }
class C{  public static DoubleDBIDPair newPair(double val,DBIDRef id){  return DBIDFactory.FACTORY.newPair(val,id);}  }
class C{  public JSONObject(Map map){  this.map=new HashMap();  if (map != null) {    Iterator i=map.entrySet().iterator();    while (i.hasNext()) {      Map.Entry e=(Map.Entry)i.next();      Object value=e.getValue();      if (value != null) {        this.map.put(e.getKey(),wrap(value));      }    }  }}  }
class C{  public void onCharacteristicWrite(BluetoothGatt gatt,BluetoothGattCharacteristic characteristic,int status){}  }
class C{  Version readVersion() throws FormatException {  if (parsedVersion != null) {    return parsedVersion;  }  int dimension=bitMatrix.getHeight();  int provisionalVersion=(dimension - 17) / 4;  if (provisionalVersion <= 6) {    return Version.getVersionForNumber(provisionalVersion);  }  int versionBits=0;  int ijMin=dimension - 11;  for (int j=5; j >= 0; j--) {    for (int i=dimension - 9; i >= ijMin; i--) {      versionBits=copyBit(i,j,versionBits);    }  }  Version theParsedVersion=Version.decodeVersionInformation(versionBits);  if (theParsedVersion != null && theParsedVersion.getDimensionForVersion() == dimension) {    parsedVersion=theParsedVersion;    return theParsedVersion;  }  versionBits=0;  for (int i=5; i >= 0; i--) {    for (int j=dimension - 9; j >= ijMin; j--) {      versionBits=copyBit(i,j,versionBits);    }  }  theParsedVersion=Version.decodeVersionInformation(versionBits);  if (theParsedVersion != null && theParsedVersion.getDimensionForVersion() == dimension) {    parsedVersion=theParsedVersion;    return theParsedVersion;  }  throw FormatException.getFormatInstance();}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public static int moduloSignedPowerOfTwo(final int value,final int spot){  if (spot == Integer.MIN_VALUE) {    return value != Integer.MIN_VALUE ? value : 0;  } else {    int s=value >> 31;    return ((value + s ^ s) & abs(spot) - 1) + s ^ s;  }}  }
class C{  public ContractCheckingVisitor(ContractSet contracts,ExceptionPredicate exceptionPredicate){  this.contracts=contracts;  this.exceptionPredicate=exceptionPredicate;}  }
class C{  public Collection<V> remove(final K key){  return mMap.remove(key);}  }
class C{  public QueryStringDecoder(String uri){  this(uri,DEFAULT_CHARSET);}  }
class C{  public PluginIntentFilter(PluginIntentFilter o){  mPriority=o.mPriority;  mActions=new ArrayList<String>(o.mActions);  if (o.mCategories != null) {    mCategories=new ArrayList<String>(o.mCategories);  }  if (o.mDataTypes != null) {    mDataTypes=new ArrayList<String>(o.mDataTypes);  }  if (o.mDataSchemes != null) {    mDataSchemes=new ArrayList<String>(o.mDataSchemes);  }  if (o.mDataSchemeSpecificParts != null) {    mDataSchemeSpecificParts=new ArrayList<PluginPatternMatcher>(o.mDataSchemeSpecificParts);  }  if (o.mDataAuthorities != null) {    mDataAuthorities=new ArrayList<AuthorityEntry>(o.mDataAuthorities);  }  if (o.mDataPaths != null) {    mDataPaths=new ArrayList<PluginPatternMatcher>(o.mDataPaths);  }  mHasPartialTypes=o.mHasPartialTypes;}  }
class C{  public void init(boolean forEncryption,CipherParameters param){  if (param instanceof ParametersWithRandom) {    ParametersWithRandom p=(ParametersWithRandom)param;    this.key=(ElGamalKeyParameters)p.getParameters();    this.random=p.getRandom();  } else {    this.key=(ElGamalKeyParameters)param;    this.random=new SecureRandom();  }  this.forEncryption=forEncryption;  BigInteger p=key.getParameters().getP();  bitSize=p.bitLength();  if (forEncryption) {    if (!(key instanceof ElGamalPublicKeyParameters)) {      throw new IllegalArgumentException("ElGamalPublicKeyParameters are required for encryption.");    }  } else {    if (!(key instanceof ElGamalPrivateKeyParameters)) {      throw new IllegalArgumentException("ElGamalPrivateKeyParameters are required for decryption.");    }  }}  }
class C{  public final AssertSubscriber<T> assertNotTerminated(){  if (cdl.getCount() == 0) {    throw new AssertionError("Terminated",null);  }  return this;}  }
class C{  public static double calcTravelTime(Double startTime,Double endTime){  return endTime - startTime;}  }
class C{  public void close() throws IOException {  if (connection != null) {    connection.close();    connection=null;  }}  }
class C{  public void close(){  if (closed) {    return;  }  FileStore f=fileStore;  if (f != null && !f.isReadOnly()) {    stopBackgroundThread();    if (hasUnsavedChanges()) {      commitAndSave();    }  }  closeStore(true);}  }
class C{  public static VPFLibrary fromFile(VPFDatabase database,String name){  if (database == null) {    String message=Logging.getMessage("nullValue.DatabaseIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (WWUtil.isEmpty(name)) {    String message=Logging.getMessage("nullValue.NameIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  File file=new File(database.getFilePath(),name);  if (!file.exists()) {    String message=Logging.getMessage("generic.FileNotFound",file.getPath());    Logging.logger().severe(message);    throw new WWRuntimeException(message);  }  VPFBufferedRecordData lht=VPFUtils.readTable(new File(file,VPFConstants.LIBRARY_HEADER_TABLE));  if (lht == null) {    String message=Logging.getMessage("VPF.LibraryHeaderTableMissing");    throw new WWRuntimeException(message);  }  VPFBufferedRecordData cat=VPFUtils.readTable(new File(file,VPFConstants.COVERAGE_ATTRIBUTE_TABLE));  if (cat == null) {    String message=Logging.getMessage("VPF.CoverageAttributeTableMissing");    throw new WWRuntimeException(message);  }  VPFBufferedRecordData grt=VPFUtils.readTable(new File(file,VPFConstants.GEOGRAPHIC_REFERENCE_TABLE));  if (grt == null) {    String message=Logging.getMessage("VPF.GeographicReferenceTableMissing");    throw new WWRuntimeException(message);  }  VPFLibrary library=new VPFLibrary(database);  library.setLibraryHeaderTable(lht);  library.setCoverageAttributeTable(cat);  library.setGeographicReferenceTable(grt);  VPFRecord record=database.getLibraryAttributeTable().getRecord("library_name",name);  if (record != null)   library.bounds=VPFUtils.getExtent(record);  record=lht.getRecord(1);  if (record != null) {    VPFUtils.checkAndSetValue(record,"library_name",AVKey.DISPLAY_NAME,library);    VPFUtils.checkAndSetValue(record,"description",AVKey.DESCRIPTION,library);  }  Collection<VPFCoverage> col=createCoverages(library,cat);  if (col != null)   library.setCoverages(col);  VPFCoverage cov=library.getCoverage(VPFConstants.TILE_REFERENCE_COVERAGE);  if (cov != null) {    VPFTile[] tiles=createTiles(cov);    if (tiles != null) {      library.setTiles(tiles);    } else {      String message=Logging.getMessage("VPF.NoTilesInTileReferenceCoverage");      Logging.logger().warning(message);    }  }  for (  VPFCoverage coverage : library.getCoverages()) {    boolean tiled=isCoverageTiled(library,coverage);    coverage.setTiled(tiled);  }  return library;}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  public boolean hasNext(){  return (cur != artificialRoot);}  }
class C{  public DataReadOnlyException(String message){  super(message);}  }
class C{  public void closeFile(SFTPv3FileHandle handle) throws IOException {  if (handle == null)   throw new IllegalArgumentException("the handle argument may not be null");  try {    if (handle.isClosed == false) {      closeHandle(handle.fileHandle);    }  }  finally {    handle.isClosed=true;  }}  }
class C{  public void sign(PrivateKey key,String algorithm,String provider) throws CRLException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException {  try {    if (readOnly)     throw new CRLException("cannot over-write existing CRL");    Signature sigEngine=null;    if ((provider == null) || (provider.length() == 0))     sigEngine=Signature.getInstance(algorithm); else     sigEngine=Signature.getInstance(algorithm,provider);    sigEngine.initSign(key);    sigAlgId=AlgorithmId.get(sigEngine.getAlgorithm());    infoSigAlgId=sigAlgId;    DerOutputStream out=new DerOutputStream();    DerOutputStream tmp=new DerOutputStream();    encodeInfo(tmp);    sigAlgId.encode(tmp);    sigEngine.update(tbsCertList,0,tbsCertList.length);    signature=sigEngine.sign();    tmp.putBitString(signature);    out.write(DerValue.tag_Sequence,tmp);    signedCRL=out.toByteArray();    readOnly=true;  } catch (  IOException e) {    throw new CRLException("Error while encoding data: " + e.getMessage());  }}  }
class C{  @Override public AsciiForm withEntry(String propertyName,String propertyValue){  entries.add(new AsciiFormEntry(propertyName,propertyValue));  return this;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public void writeNext(String[] nextLine,boolean applyQuotesToAll){  if (nextLine == null) {    return;  }  StringBuilder sb=new StringBuilder(INITIAL_STRING_SIZE);  for (int i=0; i < nextLine.length; i++) {    if (i != 0) {      sb.append(separator);    }    String nextElement=nextLine[i];    if (nextElement == null) {      continue;    }    Boolean stringContainsSpecialCharacters=stringContainsSpecialCharacters(nextElement);    if ((applyQuotesToAll || stringContainsSpecialCharacters) && quotechar != NO_QUOTE_CHARACTER) {      sb.append(quotechar);    }    if (stringContainsSpecialCharacters) {      sb.append(processLine(nextElement));    } else {      sb.append(nextElement);    }    if ((applyQuotesToAll || stringContainsSpecialCharacters) && quotechar != NO_QUOTE_CHARACTER) {      sb.append(quotechar);    }  }  sb.append(lineEnd);  pw.write(sb.toString());}  }
class C{  public static GdbInfoProgram parse(GdbOutput gdbOutput) throws GdbParseException {  String output=gdbOutput.getOutput();  Matcher matcher=GDB_PROGRAM_FINISHED.matcher(output);  if (matcher.find()) {    return new GdbInfoProgram(null);  }  matcher=GDB_PROGRAM_STOPPED.matcher(output);  if (matcher.find()) {    String address=matcher.group(1);    return new GdbInfoProgram(address);  }  throw new GdbParseException(GdbInfoProgram.class,output);}  }
class C{  public BadRequestException(String message,Response response){  super(HttpStatus.BAD_REQUEST,message,response);}  }
class C{  public ColorBlender(final int[] colors){  if (colors == null) {    throw new IllegalArgumentException("colors cannot be null");  } else   if (colors.length == 0) {    throw new IllegalArgumentException("colors must have at least one element");  }  this.colors=colors;}  }
class C{  private void initPasswordListener(View shareView){  mOnPasswordInteractionListener=new OnPasswordInteractionListener();  ((Switch)shareView.findViewById(R.id.shareViaLinkPasswordSwitch)).setOnCheckedChangeListener(mOnPasswordInteractionListener);  shareView.findViewById(R.id.shareViaLinkPasswordLabel).setOnClickListener(mOnPasswordInteractionListener);  shareView.findViewById(R.id.shareViaLinkPasswordValue).setOnClickListener(mOnPasswordInteractionListener);}  }
class C{  protected AbstractOrder(){}  }
class C{  protected void addSubScopesPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ExecutionScope_subScopes_feature"),getString("_UI_PropertyDescriptor_description","_UI_ExecutionScope_subScopes_feature","_UI_ExecutionScope_type"),SexecPackage.Literals.EXECUTION_SCOPE__SUB_SCOPES,true,false,true,null,null,null));}  }
class C{  public static boolean isInvalidIdentifierError(Exception e){  return isErrorCode(e,904);}  }
class C{  public ServerHeader createServerHeader(List product) throws ParseException {  if (product == null)   throw new NullPointerException("null productList arg");  Server server=new Server();  server.setProduct(product);  return server;}  }
class C{  public void testClientAuth(){  try {    TestServer server=new TestServer(8088,true,TestServer.CLIENT_AUTH_WANTED);    TestClient client=new TestClient(8088,true);    Thread serverThread=new Thread(server);    Thread clientThread=new Thread(client);    serverThread.start();    clientThread.start();    serverThread.join();    clientThread.join();    if (server.getException() != null) {      throw new RuntimeException(server.getException());    }    if (client.getException() != null) {      throw new RuntimeException(client.getException());    }    X509Certificate[] clientChain=client.getChain();    assertTrue("Client cert chain must not be null",clientChain != null);    assertTrue("Client cert chain must not be empty",clientChain.length != 0);    assertEquals("CN=Test Server, OU=Android, O=Google, L=MTV, ST=California, C=US",clientChain[0].getSubjectDN().toString());    X509Certificate[] serverChain=server.getChain();    assertTrue("Server cert chain must not be null",serverChain != null);    assertTrue("Server cert chain must not be empty",serverChain.length != 0);    assertEquals("CN=Test Client, OU=Android, O=Google, L=MTV, ST=California, C=US",serverChain[0].getSubjectDN().toString());  } catch (  Exception ex) {    throw new RuntimeException(ex);  }}  }
class C{  public synchronized void addDenseVector(DenseVector dv,float[] alpha){  if (this.isExtendable())   this.expandFor(dv.getLength());  int n=dv.getLength();  for (int i=0; i < n; i++) {    u[i]+=alpha[i] * dv.u[i];  }}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  public static DateTime parseRfc822(String str) throws ParseException {  Date date;synchronized (dateTimeFormat822) {    try {      date=dateTimeFormat822.parse(str);    } catch (    java.text.ParseException e) {      throw new ParseException(e);    }  }  return new DateTime(date);}  }
class C{  public boolean isItalic(){  return italic;}  }
class C{  public void initialize(double lat,double lon){  initializeRadians(radians(lat),radians(lon));}  }
class C{  public static boolean isToday(Date date){  return isSameDay(date,Calendar.getInstance().getTime());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public SolrResourceLoader(Path instanceDir,ClassLoader parent){  this(instanceDir,parent,null);}  }
class C{  private void validateBasisOfRecord(String bor,int line,AtomicInteger recordsWithNoBasisOfRecord,AtomicInteger recordsWithNonMatchingBasisOfRecord,AtomicInteger recordsWithAmbiguousBasisOfRecord){  if (Strings.isNullOrEmpty(bor)) {    recordsWithNoBasisOfRecord.getAndIncrement();  } else {    if (!basisOfRecords.containsKey(bor.toLowerCase())) {      writePublicationLogMessage("Line #" + String.valueOf(line) + " has basisOfRecord ["+ bor+ "] that does not match the Darwin Core Type Vocabulary");      recordsWithNonMatchingBasisOfRecord.getAndIncrement();    } else     if (bor.equalsIgnoreCase("occurrence")) {      recordsWithAmbiguousBasisOfRecord.getAndIncrement();    }  }}  }
class C{  public void vspan(long start,long end,Paint color,String legend){  LegendText legendText=new LegendText(color,legend);  comments.add(legendText);  plotElements.add(new VSpan(start,end,color,legendText));}  }
class C{  public SparseSelect(final BitVector bitVector){  this(bitVector.length(),bitVector.count(),bitVector.asLongSet().iterator());}  }
class C{  public FunctionScoreQueryBuilder add(QueryBuilder filter,ScoreFunctionBuilder scoreFunctionBuilder){  if (scoreFunctionBuilder == null) {    throw new IllegalArgumentException("function_score: function must not be null");  }  this.filters.add(filter);  this.scoreFunctions.add(scoreFunctionBuilder);  return this;}  }
class C{  public boolean previous() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public void onUninstalled(){}  }
class C{  @PatchMapping(value="/{id}") @ResponseBody public ResponseEntity<Response<UserVO>> saveImage(@RequestBody @NotNull byte[] image,@PathVariable("id") @NotNull Long id){  service.uploadImageFile(id,image);  return buildResponse(HttpStatus.OK,translate(Messages.SERVER_OK),Messages.SERVER_OK);}  }
class C{  public Builder requestType(RequestType requestType){  this.requestType=requestType;  return this;}  }
class C{  @Override public void acceptTrainingSet(TrainingSetEvent e){  Instances trainingSet=e.getTrainingSet();  DataSetEvent dse=new DataSetEvent(this,trainingSet);  acceptDataSet(dse);}  }
class C{  public final Timestamp addMillis(long amount){  if (amount == 0)   return this;  BigDecimal millis=make_localtime().getDecimalMillis();  millis=millis.add(BigDecimal.valueOf(amount));  Timestamp ts=new Timestamp(millis,_precision,_offset);  ts._fraction=_fraction;  if (_offset != null && _offset != 0) {    ts.apply_offset(_offset);  }  return ts;}  }
class C{  private void restoreSendDir(){  String dir=mKeyValueHelper.getValue(KeyValueHelper.KEY_SEND_DIR);  mSendDir=dir != null ? new File(dir) : mLandingDir;}  }
class C{  public GhciSession(){  super();  queue=new ArrayBlockingQueue<>(1024);  errors=EvictingQueue.create(LOG_SIZE);switch (pickBackend()) {case Clash:    this.catalog=new HaskellCatalog("/catalog/clash.xml");  break;default :this.catalog=new HaskellCatalog("/catalog/haskell.xml");break;}}  }
class C{  public int compareToIgnoreCase(XMLString str){  throw new org.apache.xml.utils.WrappedRuntimeException(new java.lang.NoSuchMethodException("Java 1.2 method, not yet implemented"));}  }
class C{  public static byte[] decodeFromFile(String filename) throws java.io.IOException {  byte[] decodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer;    int length=0;    int numBytes;    if (file.length() > Integer.MAX_VALUE) {      throw new java.io.IOException("File is too big for this convenience method (" + file.length() + " bytes).");    }    buffer=new byte[(int)file.length()];    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  }  finally {    try {      if (bis != null) {        bis.close();      }    } catch (    Exception ignored) {    }  }  return decodedData;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:49.667 -0500",hash_original_method="FD05C240A769227CDB628211DF5EC32E",hash_generated_method="AF8A42319601A3FBBF15621EE9C6404D") public Iterator<NameValue> iterator(){  return this.nameValueMap.values().iterator();}  }
class C{  public Minutes toStandardMinutes(){  checkYearsAndMonths("Minutes");  long millis=getMillis();  millis+=((long)getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;  long minutes=millis / DateTimeConstants.MILLIS_PER_MINUTE;  minutes=FieldUtils.safeAdd(minutes,getMinutes());  minutes=FieldUtils.safeAdd(minutes,((long)getHours()) * ((long)DateTimeConstants.MINUTES_PER_HOUR));  minutes=FieldUtils.safeAdd(minutes,((long)getDays()) * ((long)DateTimeConstants.MINUTES_PER_DAY));  minutes=FieldUtils.safeAdd(minutes,((long)getWeeks()) * ((long)DateTimeConstants.MINUTES_PER_WEEK));  return Minutes.minutes(FieldUtils.safeToInt(minutes));}  }
class C{  public static boolean isSha1String(final String string){  Preconditions.checkNotNull(string,"Error: String argument can't be null");  return (string.length() == 40) && isHexString(string);}  }
class C{  public boolean addGpsTags(double latitude,double longitude){  ExifTag latTag=buildTag(TAG_GPS_LATITUDE,toExifLatLong(latitude));  ExifTag longTag=buildTag(TAG_GPS_LONGITUDE,toExifLatLong(longitude));  ExifTag latRefTag=buildTag(TAG_GPS_LATITUDE_REF,latitude >= 0 ? GpsLatitudeRef.NORTH : GpsLatitudeRef.SOUTH);  ExifTag longRefTag=buildTag(TAG_GPS_LONGITUDE_REF,longitude >= 0 ? GpsLongitudeRef.EAST : GpsLongitudeRef.WEST);  if (latTag == null || longTag == null || latRefTag == null || longRefTag == null) {    return false;  }  setTag(latTag);  setTag(longTag);  setTag(latRefTag);  setTag(longRefTag);  return true;}  }
class C{  public AttachmentObject(int id,boolean deleted){  this.id=id;  this.deleted=deleted;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(", description: ");  result.append(description);  result.append(')');  return result.toString();}  }
class C{  public static Test suite(){  return (new TestSuite(CommandButtonITCase.class));}  }
class C{  public void testAppendParentMissing() throws Exception {  if (!appendSupported())   return;  create(igfsSecondary,paths(DIR,SUBDIR),null);  create(igfs,null,null);  createFile(igfsSecondary,FILE,chunk);  appendFile(igfs,FILE,chunk);  checkExist(igfs,igfsSecondary,SUBDIR);  checkFile(igfs,igfsSecondary,FILE,chunk,chunk);}  }
class C{  public TechnicalServiceActiveException(Object[] params){  super(params);}  }
class C{  public void addCRL(byte[] crlBytes){  this.add(new XMLX509CRL(this.doc,crlBytes));}  }
class C{  public static long convertAmount(ExchangeRateProvider exchangeRates,String sourceCurrencyCode,long sourceAmount,String targetCurrencyCode){  double exchangeRate=exchangeRates.getExchangeRate(sourceCurrencyCode,targetCurrencyCode);  return convertAmount(exchangeRate,sourceCurrencyCode,sourceAmount,targetCurrencyCode);}  }
class C{  @Ignore("TODO: test is disabled") @Test public void testReplicatedSerialPropagationHA_ReceiverAffinityScenario2() throws Exception {  Integer lnPort=(Integer)vm0.invoke(null);  Integer nyPort=(Integer)vm1.invoke(null);  createCacheInVMs(nyPort,vm2,vm3,vm6,vm7);  createReceiverInVMs(vm2,vm3,vm6,vm7);  LogWriterUtils.getLogWriter().info("Started receivers on remote site");  createCacheInVMs(lnPort,vm4,vm5);  vm4.invoke(null);  vm5.invoke(null);  vm2.invoke(null);  vm3.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  startSenderInVMs("ln",vm4,vm5);  LogWriterUtils.getLogWriter().info("Started senders on local site");  vm4.invoke(createReplicatedRegionRunnable());  vm5.invoke(createReplicatedRegionRunnable());  AsyncInvocation inv1=vm5.invokeAsync(null);  LogWriterUtils.getLogWriter().info("Started async puts on local site");  Wait.pause(1000);  Map oldConnectionInfo=(Map)vm4.invoke(null);  assertNotNull(oldConnectionInfo);  String oldServerHost=(String)oldConnectionInfo.get("serverHost");  int oldServerPort=(Integer)oldConnectionInfo.get("serverPort");  LogWriterUtils.getLogWriter().info("Got sender to receiver connection information");  AsyncInvocation inv2=vm4.invokeAsync(null);  inv2.join();  LogWriterUtils.getLogWriter().info("Killed vm4 (primary sender) on local site");  vm5.invoke(null);  LogWriterUtils.getLogWriter().info("vm5 sender has now acquired primary status");  Wait.pause(5000);  LogWriterUtils.getLogWriter().info("Rebuilding vm4....");  createCacheInVMs(lnPort,vm4);  vm4.invoke(null);  vm4.invoke(null);  vm4.invoke(createReplicatedRegionRunnable());  LogWriterUtils.getLogWriter().info("Rebuilt vm4");  inv1.join();  LogWriterUtils.getLogWriter().info("puts in vm5 are done");  inv2=vm5.invokeAsync(null);  inv2.join();  vm4.invoke(null);  Map newConnectionInfo=(Map)vm4.invoke(null);  assertNotNull(newConnectionInfo);  String newServerHost=(String)newConnectionInfo.get("serverHost");  int newServerPort=(Integer)newConnectionInfo.get("serverPort");  LogWriterUtils.getLogWriter().info("Got new sender to receiver connection information");  assertEquals(oldServerHost,newServerHost);  assertEquals(oldServerPort,newServerPort);  LogWriterUtils.getLogWriter().info("Matched the new connection info with old connection info. Receiver affinity verified.");  vm2.invoke(null);  vm3.invoke(null);}  }
class C{  public AsyncMessageHeader(AsyncMessageHeader other){  __isset_bitfield=other.__isset_bitfield;  this.transactionId=other.transactionId;}  }
class C{  public Days toStandardDays(){  return Days.days(getValue() / DateTimeConstants.HOURS_PER_DAY);}  }
class C{  public static Long convertKBToGB(Long size){  if (size == null) {    return 0L;  }  return size / MB;}  }
class C{  final String readOneGame(GameInfo gi){  try {    RandomAccessFile f=new RandomAccessFile(fileName,"r");    byte[] pgnData=new byte[(int)(gi.endPos - gi.startPos)];    f.seek(gi.startPos);    f.readFully(pgnData);    f.close();    return new String(pgnData);  } catch (  IOException e) {  }  return null;}  }
class C{  void reset(JComponent component,Region region,SynthStyle style,int state){  this.component=component;  this.region=region;  this.style=style;  this.state=state;}  }
class C{  public static S2Cap fromAxisAngle(S2Point axis,S1Angle angle){  double d=Math.sin(0.5 * angle.radians());  return new S2Cap(axis,2 * d * d);}  }
class C{  public int updateTrigger(Connection conn,OperableTrigger trigger,String state,JobDetail jobDetail) throws SQLException, IOException {  boolean updateJobData=trigger.getJobDataMap().isDirty();  ByteArrayOutputStream baos=null;  if (updateJobData && trigger.getJobDataMap().size() > 0) {    baos=serializeJobData(trigger.getJobDataMap());  }  PreparedStatement ps=null;  int insertResult=0;  try {    if (updateJobData) {      ps=conn.prepareStatement(rtp(UPDATE_TRIGGER));    } else {      ps=conn.prepareStatement(rtp(UPDATE_TRIGGER_SKIP_DATA));    }    ps.setString(1,trigger.getJobKey().getName());    ps.setString(2,trigger.getJobKey().getGroup());    ps.setString(3,trigger.getDescription());    long nextFireTime=-1;    if (trigger.getNextFireTime() != null) {      nextFireTime=trigger.getNextFireTime().getTime();    }    ps.setBigDecimal(4,new BigDecimal(String.valueOf(nextFireTime)));    long prevFireTime=-1;    if (trigger.getPreviousFireTime() != null) {      prevFireTime=trigger.getPreviousFireTime().getTime();    }    ps.setBigDecimal(5,new BigDecimal(String.valueOf(prevFireTime)));    ps.setString(6,state);    TriggerPersistenceDelegate tDel=findTriggerPersistenceDelegate(trigger);    String type=TTYPE_BLOB;    if (tDel != null)     type=tDel.getHandledTriggerTypeDiscriminator();    ps.setString(7,type);    ps.setBigDecimal(8,new BigDecimal(String.valueOf(trigger.getStartTime().getTime())));    long endTime=0;    if (trigger.getEndTime() != null) {      endTime=trigger.getEndTime().getTime();    }    ps.setBigDecimal(9,new BigDecimal(String.valueOf(endTime)));    ps.setString(10,trigger.getCalendarName());    ps.setInt(11,trigger.getMisfireInstruction());    ps.setInt(12,trigger.getPriority());    if (updateJobData) {      setBytes(ps,13,baos);      ps.setString(14,trigger.getKey().getName());      ps.setString(15,trigger.getKey().getGroup());    } else {      ps.setString(13,trigger.getKey().getName());      ps.setString(14,trigger.getKey().getGroup());    }    insertResult=ps.executeUpdate();    if (tDel == null)     updateBlobTrigger(conn,trigger); else     tDel.updateExtendedTriggerProperties(conn,trigger,state,jobDetail);  }  finally {    closeStatement(ps);  }  return insertResult;}  }
class C{  public Bitmap.Config pixelFormat(){  return _format;}  }
class C{  public ExportTrustedCertificateAction(KseFrame kseFrame,X509Certificate cert){  super(kseFrame);  this.certFromConstructor=cert;  putValue(LONG_DESCRIPTION,res.getString("ExportTrustedCertificateAction.statusbar"));  putValue(NAME,res.getString("ExportTrustedCertificateAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("ExportTrustedCertificateAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("ExportTrustedCertificateAction.image")))));}  }
class C{  @Override protected Value createValue(String valueStr){  return ValueFactory.create(valueStr);}  }
class C{  private void verifyStorageSystemArrayAffinityDiscoveryResults() throws Exception {  log.info("Verifying updated storage system results for StorageSystemArrayAffinityDiscoveryMigration.");  StorageSystem system=_dbClient.queryObject(StorageSystem.class,systemURI);  Assert.assertNotNull("arrayAffinityStatus shouldn't be null",system.getArrayAffinityStatus());  Assert.assertNotNull("lastArrayAffinityRunTime shouldn't be null",system.getLastArrayAffinityRunTime());  Assert.assertNotNull("nextArrayAffinityRunTime shouldn't be null",system.getNextArrayAffinityRunTime());  Assert.assertNotNull("successArrayAffinityTime shouldn't be null",system.getSuccessArrayAffinityTime());}  }
class C{  public static boolean isGenerated(Class<?> c){  return proxyMap.containsKey(c);}  }
class C{  public SmsAddress(String address,SmsTon ton,SmsNpi npi) throws SmsException {  init(address,ton,npi);}  }
class C{  public org.jdom2.Element store(){  org.jdom2.Element e=new org.jdom2.Element(Xml.ITEM);  e.setAttribute(Xml.ID,getId());  e.setAttribute(Xml.SEQUENCE_ID,Integer.toString(getSequenceId()));  e.setAttribute(Xml.RANDOM,getRandom());  e.setAttribute(Xml.TRAIN_SCHEDULE_ID,getSetoutTrainScheduleId());  e.setAttribute(Xml.PICKUP_TRAIN_SCHEDULE_ID,getPickupTrainScheduleId());  e.setAttribute(Xml.COUNT,Integer.toString(getCount()));  e.setAttribute(Xml.WAIT,Integer.toString(getWait()));  e.setAttribute(Xml.TYPE,getTypeName());  e.setAttribute(Xml.ROAD,getRoadName());  e.setAttribute(Xml.LOAD,getReceiveLoadName());  e.setAttribute(Xml.SHIP,getShipLoadName());  if (!getDestinationId().equals(NONE)) {    e.setAttribute(Xml.DESTINATION_ID,getDestinationId());  }  if (!getDestinationTrackId().equals(NONE)) {    e.setAttribute(Xml.DEST_TRACK_ID,getDestinationTrackId());  }  e.setAttribute(Xml.COMMENT,getComment());  e.setAttribute(Xml.HITS,Integer.toString(getHits()));  return e;}  }
class C{  public InGameWindow(String title,WindowDecor decor){  super(title);switch (decor) {case MINIMIZE:    getRightIcons().addAll(new MinimizeIcon(this));  break;case CLOSE:getRightIcons().addAll(new CloseIcon(this));break;case ALL:getRightIcons().addAll(new MinimizeIcon(this),new CloseIcon(this));break;case NONE:default :break;}appW=FXGL.getSettings().getWidth();appH=FXGL.getSettings().getHeight();layoutXProperty().addListener(makeListenerX());layoutYProperty().addListener(makeListenerY());windows.add(this);}  }
class C{  public static <T>T map(final JBBPFieldStruct root,final String structPath,final Class<T> mappingClass){  return map(root,structPath,mappingClass,null);}  }
class C{  @Nullable private static Bitmap makeBitmap(final int minSideLength,final int maxNumOfPixels,@NonNull final Uri uri,@NonNull final ContentResolver cr,@Nullable ParcelFileDescriptor pfd,@Nullable BitmapFactory.Options options){  Bitmap b=null;  try {    if (pfd == null) {      pfd=makeInputStream(uri,cr);    }    if (pfd != null) {      if (options == null) {        options=new BitmapFactory.Options();      }      final FileDescriptor fd=pfd.getFileDescriptor();      options.inSampleSize=1;      options.inJustDecodeBounds=true;      BitmapFactory.decodeFileDescriptor(fd,null,options);      if (options.mCancel || options.outWidth == -1 || options.outHeight == -1) {        return null;      }      options.inSampleSize=computeSampleSize(options,minSideLength,maxNumOfPixels);      options.inJustDecodeBounds=false;      options.inDither=false;      options.inPreferredConfig=Bitmap.Config.ARGB_8888;      b=BitmapFactory.decodeFileDescriptor(fd,null,options);    }  } catch (  OutOfMemoryError ex) {    Log.e(TAG,"Got out of memory exception ",ex);    return null;  } finally {    closeSilently(pfd);  }  return b;}  }
class C{  protected void sequence_DefinitionFacet(ISerializationContext context,Facet semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void unregister(CompletableFuture<Void> future){  unregister(true,future);}  }
class C{  public LegendItem(AttributedString label,String description,String toolTipText,String urlText,Shape line,Stroke lineStroke,Paint linePaint){  this(label,description,toolTipText,urlText,false,UNUSED_SHAPE,false,Color.black,false,Color.black,UNUSED_STROKE,true,line,lineStroke,linePaint);}  }
class C{  protected void ensureConnected(final TFSConnection connection,final IProgressMonitor progressMonitor) throws Exception {  Check.notNull(connection,"connection");  if (connection.hasAuthenticated() && connection.getConnectivityFailureOnLastWebServiceCall() == false) {    return;  }  final TFSCommandConnectionRunnable connectionRunnable=new TFSCommandConnectionRunnable(connection);  new Thread(connectionRunnable,"TFS Connection").start();  final boolean commandCancellable=isCancellable();  setCancellable(true);  progressMonitor.setTaskName(Messages.getString("TFSConnectedCommand.ConnectingTaskName"));  while (connectionRunnable.isComplete() == false) {    if (progressMonitor.isCanceled()) {      throw new CoreException(Status.CANCEL_STATUS);    }    Thread.sleep(100);  }  if (connectionRunnable.getConnectionFailure() != null) {    throw connectionRunnable.getConnectionFailure();  }  setCancellable(commandCancellable);  if (progressMonitor.isCanceled()) {    throw new CoreException(Status.CANCEL_STATUS);  }  progressMonitor.setTaskName(getName());}  }
class C{  @Transactional public void addPointTransferNotification(final JSONObject requestJSONObject) throws ServiceException {  try {    requestJSONObject.put(Notification.NOTIFICATION_DATA_TYPE,Notification.DATA_TYPE_C_POINT_TRANSFER);    addNotification(requestJSONObject);  } catch (  final RepositoryException e) {    final String msg="Adds notification [type=point_transfer] failed";    LOGGER.log(Level.ERROR,msg,e);    throw new ServiceException(msg);  }}  }
class C{  public static long[] cycleLeftI(long[] v,int shift,int len){  long[] t=copy(v,len,shift);  truncateI(t,len);  shiftRightI(v,len - shift);  orI(v,t);  return v;}  }
class C{  public void scrapeMetaData(){  try {    setPosterUrl(result.getPosterUrl());    MediaScrapeOptions options=new MediaScrapeOptions(MediaType.TV_SHOW);    options.setResult(result);    options.setLanguage(LocaleUtils.toLocale(language.name()));    options.setCountry(TvShowModuleManager.SETTINGS.getCertificationCountry());    LOGGER.info("=====================================================");    LOGGER.info("Scraper metadata with scraper: " + mediaScraper.getMediaProvider().getProviderInfo().getId());    LOGGER.info(options.toString());    LOGGER.info("=====================================================");    metadata=((ITvShowMetadataProvider)mediaScraper.getMediaProvider()).getMetadata(options);    setOverview(metadata.getPlot());    setTagline(metadata.getTagline());    if (StringUtils.isBlank(posterUrl) && !metadata.getMediaArt(MediaArtworkType.POSTER).isEmpty()) {      setPosterUrl(metadata.getMediaArt(MediaArtworkType.POSTER).get(0).getPreviewUrl());    }    scraped=true;  } catch (  Exception e) {    LOGGER.error("scrapeMedia",e);    MessageManager.instance.pushMessage(new Message(MessageLevel.ERROR,"TvShowChooser","message.scrape.threadcrashed",new String[]{":",e.getLocalizedMessage()}));  }}  }
class C{  public void reassign(long memOffsetBytes,long capacityBytes){  assertBounds(memOffsetBytes,capacityBytes,mem_.getCapacity());  memOffsetBytes_=memOffsetBytes;  capacityBytes_=capacityBytes;}  }
class C{  @Override public void doTests(){  if (getTestObject() == null) {    println("\n=== No scheme set ===");    return;  }  println("\n=== Check on scheme: " + getTestObject().getClass().getName() + " ===\n");  m_ClasspathProblems=false;  println("--> Checking for interfaces");  canTakeOptions();  boolean weightedInstancesHandler=weightedInstancesHandler()[0];  boolean multiInstanceHandler=multiInstanceHandler()[0];  println("--> Scheme tests");  declaresSerialVersionUID();  testsPerClassType(Attribute.NOMINAL,weightedInstancesHandler,multiInstanceHandler);  testsPerClassType(Attribute.NUMERIC,weightedInstancesHandler,multiInstanceHandler);  testsPerClassType(Attribute.DATE,weightedInstancesHandler,multiInstanceHandler);  testsPerClassType(Attribute.STRING,weightedInstancesHandler,multiInstanceHandler);  testsPerClassType(Attribute.RELATIONAL,weightedInstancesHandler,multiInstanceHandler);}  }
class C{  public boolean isN4jsdModule(){  return n4jsdModule;}  }
class C{  public String toString(){  return String.format("%s on %s",label,contact);}  }
class C{  public Builder filter(MetricFilter filter){  this.filter=filter;  return this;}  }
class C{  protected boolean isRootPackage(Module module,Package pkg){  if (module.isDefaultModule())   return pkg.getNameAsString().isEmpty();  return pkg.getNameAsString().equals(module.getNameAsString());}  }
class C{  public RedirectException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void recordBourneRPEvent(DbClient dbClient,URI uri,String evtType,Operation.Status status,String desc){  RecordableEventManager eventManager=new RecordableEventManager();  eventManager.setDbClient(dbClient);  DataObject dataObj=null;  if (URIUtil.isType(uri,Volume.class)) {    dataObj=dbClient.queryObject(Volume.class,uri);  } else   if (URIUtil.isType(uri,BlockConsistencyGroup.class)) {    dataObj=dbClient.queryObject(BlockConsistencyGroup.class,uri);  }  RecordableBourneEvent event=ControllerUtils.convertToRecordableBourneEvent(dataObj,evtType,desc,"",dbClient,ControllerUtils.BLOCK_EVENT_SERVICE,RecordType.Event.name(),ControllerUtils.BLOCK_EVENT_SOURCE);  try {    eventManager.recordEvents(event);    _log.info("Bourne {} event recorded",evtType);  } catch (  Exception e) {    _log.error("Failed to record event. Event description: {}. Error: ",evtType,e);  }}  }
class C{  private void stepOutput(){  if (!value.isPresent()) {    return;  }  for (  final Port port : Port.VALUES) {    final Pipe sendingPipe=getCasing().getSendingPipe(getFace(),port);    if (!sendingPipe.isWriting()) {      sendingPipe.beginWrite(value.get());    }  }}  }
class C{  protected static EventListener addInternal(EventListener a,EventListener b){  if (a == null)   return b;  if (b == null)   return a;  return new AWTEventMulticaster(a,b);}  }
class C{  private void checkCyclicSubstitution(final String varName,final List<String> priorVariables){  if (priorVariables.contains(varName) == false) {    return;  }  final StrBuilder buf=new StrBuilder(256);  buf.append("Infinite loop in property interpolation of ");  buf.append(priorVariables.remove(0));  buf.append(": ");  buf.appendWithSeparators(priorVariables,"->");  throw new IllegalStateException(buf.toString());}  }
class C{  public void log(ProcessLogInfo processLogInfo){  try {    processLogDAO.log(processLogInfo);  } catch (  Exception e) {    LOGGER.error("Error occurred.",e);    throw new MetadataException(e);  }}  }
class C{  @Override public int hashCode(){  return mainAttributes.hashCode() ^ getEntries().hashCode();}  }
class C{  private void loadPaymentRuleInfo(){  if (fPaymentRule.getSelectedItem() == null)   return;  ValueNamePair pp=fPaymentRule.getSelectedItem().toValueNamePair();  if (pp == null)   return;  String PaymentRule=pp.getValue();  log.info("PaymentRule=" + PaymentRule);  fNoPayments.setText(" ");  String msg=loadPaymentRuleInfo(m_C_PaySelection_ID,PaymentRule);  if (noPayments != null)   fNoPayments.setText(noPayments);  bProcess.setEnabled(PaymentRule.equals("T"));  if (documentNo != null)   fDocumentNo.setValue(documentNo);  if (msg != null && msg.length() > 0)   FDialog.error(m_WindowNo,form,msg);}  }
class C{  @SuppressWarnings("unused") public final void onEventMainThread(@Nullable final ChronosOperationResult<?> operationResult){  if (operationResult == null) {    return;  }  final int operationId=operationResult.getId();  DeliveryMode deliveryMode=null;  if (!RunningOperationStorage.getInstance().isOperationCancelled(operationId)) {    if (mTaggedRequests.containsValue(operationId)) {      deliveryMode=DeliveryMode.NORMAL;    } else     if (mUntaggedRequests.contains(operationResult.getId())) {      mUntaggedRequests.remove(Integer.valueOf(operationId));      deliveryMode=DeliveryMode.NORMAL;    } else     if (operationResult.isBroadcast()) {      deliveryMode=DeliveryMode.BROADCAST;    }  }  if (deliveryMode != null) {    final OperationDelivery<?> operationDelivery=new OperationDelivery<>(operationResult,deliveryMode);    logd("operation delivery: " + operationDelivery);    onOperationFinished(operationDelivery);  }}  }
class C{  public Builder fromConfig(final IClientConfig clientConfig){  return this.authenticator(clientConfig.getAuthenticator()).executors(clientConfig.getExecutors()).httpProvider(clientConfig.getHttpProvider()).logger(clientConfig.getLogger()).serializer(clientConfig.getSerializer());}  }
class C{  public static List<DdiArtifact> createArtifacts(final Target target,final org.eclipse.hawkbit.repository.model.SoftwareModule module,final ArtifactUrlHandler artifactUrlHandler,final SystemManagement systemManagement){  return module.getArtifacts().stream().map(null).collect(Collectors.toList());}  }
class C{  public ExitEventItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public GuacamoleStreamException(GuacamoleStatus status,String message){  super(message);  this.status=status;}  }
class C{  public SipRequest createInvite() throws PayloadException {  try {    SipRequest invite;    SipDialogPath dialogPath=getDialogPath();    if (getFileicon() != null) {      invite=SipMessageFactory.createMultipartInvite(dialogPath,InstantMessagingService.FT_FEATURE_TAGS,dialogPath.getLocalContent(),BOUNDARY_TAG);    } else {      invite=SipMessageFactory.createInvite(dialogPath,InstantMessagingService.FT_FEATURE_TAGS,dialogPath.getLocalContent());    }    invite.addHeader(ChatUtils.HEADER_CONTRIBUTION_ID,getContributionID());    return invite;  } catch (  ParseException e) {    throw new PayloadException("Failed to create invite request!",e);  }}  }
class C{  public DrawerBuilder withRecyclerView(@NonNull RecyclerView recyclerView){  this.mRecyclerView=recyclerView;  return this;}  }
class C{  public List statements(){  return this.statements;}  }
class C{  final public int mark(){  final int tmp=mark;  mark=pos;  return tmp;}  }
class C{  public void follow(int followerId,int followeeId){  if (!follow.containsKey(followerId)) {    LinkedList<Integer> followee=new LinkedList<Integer>();    followee.add(followeeId);    follow.put(followerId,followee);  } else {    if (!follow.get(followerId).contains(followeeId))     follow.get(followerId).add(followeeId);  }}  }
class C{  public String toString(){  return "HDFSUpdateLog{state=" + getState() + ", tlog="+ tlog+ "}";}  }
class C{  private void handleOutputChange(PropertyChangeEvent evt){  Object newValue=evt.getNewValue();  Object oldValue=evt.getOldValue();  if (!((oldValue != null) ^ (newValue != null))) {    throw new IllegalStateException("Exactly one of old or new values must be non-null for INPUT event");  }  if (newValue != null) {    ConnectionEditPart editPart=createOrFindConnection(newValue);    int modelIndex=getModelSourceConnections().indexOf(newValue);    addSourceConnection(editPart,modelIndex);  } else {    List<?> children=getSourceConnections();    ConnectionEditPart partToRemove=null;    for (Iterator<?> iter=children.iterator(); iter.hasNext(); ) {      ConnectionEditPart part=(ConnectionEditPart)iter.next();      if (part.getModel() == oldValue) {        partToRemove=part;        break;      }    }    if (partToRemove != null)     removeSourceConnection(partToRemove);  }  getContentPane().revalidate();}  }
class C{  public void push(Item item){  Node<Item> oldfirst=first;  first=new Node<Item>();  first.item=item;  first.next=oldfirst;  n++;}  }
class C{  public void scheduleAtFixedRate(TimerTask task,long delay,long period){  if (delay < 0 || period <= 0) {    throw new IllegalArgumentException();  }  scheduleImpl(task,delay,period,true);}  }
class C{  protected void afterLoggedIn(){  if (connection.isAuthenticated() && !webAuthConfig.getExternalAuthentication()) {    User user=userSessionSource.getUserSession().getUser();    if (Boolean.TRUE.equals(user.getChangePasswordAtNextLogon())) {      WebWindowManager wm=getWindowManager();      for (      Window window : wm.getOpenWindows()) {        window.setEnabled(false);      }      WindowInfo changePasswordDialog=windowConfig.getWindowInfo("sec$User.changePassword");      Window changePasswordWindow=wm.openWindow(changePasswordDialog,OpenType.DIALOG.closeable(false),ParamsMap.of("cancelEnabled",Boolean.FALSE));      changePasswordWindow.addCloseListener(null);    }  }}  }
class C{  public void addJavaProperty(String prop,String val){  mJavaProperties.put(prop,val);}  }
class C{  public static boolean isValid(final String uri){  return uri.trim().startsWith(PREFIX);}  }
class C{  public CDatabaseContent(final SQLProvider provider,final IDatabase database,final ListenerProvider<IDatabaseListener> listeners,final List<INaviProject> projects,final List<INaviModule> modules,final List<INaviRawModule> rawModules,final CTagManager viewTagManager,final CTagManager nodeTagManager,final DebuggerTemplateManager debuggerDescriptionManager){  m_viewTagManager=Preconditions.checkNotNull(viewTagManager,"IE00051: View tag manager can not be null");  m_provider=Preconditions.checkNotNull(provider,"IE00053: Database content provider can not be null");  m_database=Preconditions.checkNotNull(database,"IE00390: Database can not be null");  m_listeners=Preconditions.checkNotNull(listeners,"IE00391: Database listeners can not be null");  m_projects=Preconditions.checkNotNull(projects,"IE00410: Projects can not be null");  m_modules=Preconditions.checkNotNull(modules,"IE00412: Modules can not be null");  m_rawModules=Preconditions.checkNotNull(rawModules,"IE00420: Raw modules can not be null");  m_nodeTagManager=Preconditions.checkNotNull(nodeTagManager,"IE00441: Node tag manager can not be null");  m_debuggerDescriptionManager=Preconditions.checkNotNull(debuggerDescriptionManager,"IE00442: Debugger descriptor manager can not be null");}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  private boolean isPoolMatchesCapacityForThickProvisioning(StoragePool pool,long requiredCapacityInKB){  if (requiredCapacityInKB > pool.getFreeCapacity()) {    _log.info(String.format("Pool %s is not matching as it doesn't have enough space to create resources. Pool has %dKB, Required capacity of request %dKB",pool.getId(),pool.getFreeCapacity().longValue(),requiredCapacityInKB));    return false;  }  if (!checkThickPoolCandidacy(pool,requiredCapacityInKB,_coordinator)) {    String msg=String.format("Pool %s is not matching as it will have utilization of %s percent after allocation. Pool's max utilization percentage is %s percent .",pool.getId(),100 - getThickPoolFreeCapacityPercentage(pool,requiredCapacityInKB),getMaxPoolUtilizationPercentage(pool,_coordinator));    _log.info(msg);    return false;  }  return true;}  }
class C{  public DCD(){  this(10000,false);}  }
class C{  private String replaceReservedChars(boolean isTableResponseType,String str){  if (str == null) {    return EMPTY_COLUMN_VALUE;  }  return (!isTableResponseType) ? str : str.replace(TAB,WhITESPACE).replace(NEWLINE,WhITESPACE);}  }
class C{  protected void finishInit(){}  }
class C{  private List<URI> orderNetworksByNumberOfPorts(Map<URI,List<StoragePort>> allocatablePorts){  List<URI> orderedNetworks=new ArrayList<URI>();  Map<Integer,Set<URI>> numPortsToNetworkSet=new HashMap<Integer,Set<URI>>();  for (  URI networkURI : allocatablePorts.keySet()) {    int numPorts=allocatablePorts.get(networkURI).size();    if (numPorts > MAX_PORTS_PER_NETWORK) {      numPorts=MAX_PORTS_PER_NETWORK;    }    if (numPortsToNetworkSet.get(numPorts) == null) {      numPortsToNetworkSet.put(numPorts,new HashSet<URI>());    }    numPortsToNetworkSet.get(numPorts).add(networkURI);  }  for (Integer numPorts=1; numPorts <= MAX_PORTS_PER_NETWORK; numPorts++) {    Set<URI> networkURIs=numPortsToNetworkSet.get(numPorts);    if (networkURIs == null) {      continue;    }    for (    URI networkURI : networkURIs) {      orderedNetworks.add(networkURI);    }  }  return orderedNetworks;}  }
class C{  public void valueChanged(ListSelectionEvent e){  Portal portal=_portalList.getSelectedValue();  if (portal != null) {    PortalIcon icon=_parent.getPortalIconMap().get(portal.getName());    setPortalIcon(icon,false);  }}  }
class C{  protected void initDataBindings(){  JListBinding<ExportTemplate,List<ExportTemplate>,JList> jListBinding=SwingBindings.createJListBinding(UpdateStrategy.READ,templatesFound,list);  BeanProperty<ExportTemplate,String> exportTemplateBeanProperty=BeanProperty.create("name");  jListBinding.setDetailBinding(exportTemplateBeanProperty);  jListBinding.bind();  BeanProperty<JList,String> jListBeanProperty=BeanProperty.create("selectedElement.name");  BeanProperty<JLabel,String> jLabelBeanProperty=BeanProperty.create("text");  AutoBinding<JList,String,JLabel,String> autoBinding=Bindings.createAutoBinding(UpdateStrategy.READ,list,jListBeanProperty,lblTemplateName,jLabelBeanProperty);  autoBinding.bind();  BeanProperty<JList,String> jListBeanProperty_1=BeanProperty.create("selectedElement.url");  AutoBinding<JList,String,JLabel,String> autoBinding_1=Bindings.createAutoBinding(UpdateStrategy.READ,list,jListBeanProperty_1,lblUrl,jLabelBeanProperty);  autoBinding_1.bind();  BeanProperty<JList,String> jListBeanProperty_2=BeanProperty.create("selectedElement.description");  BeanProperty<JTextPane,String> jTextPaneBeanProperty=BeanProperty.create("text");  AutoBinding<JList,String,JTextPane,String> autoBinding_2=Bindings.createAutoBinding(UpdateStrategy.READ,list,jListBeanProperty_2,tpDescription,jTextPaneBeanProperty);  autoBinding_2.bind();  BeanProperty<JList,Boolean> jListBeanProperty_3=BeanProperty.create("selectedElement.detail");  BeanProperty<JCheckBox,Boolean> jCheckBoxBeanProperty=BeanProperty.create("selected");  AutoBinding<JList,Boolean,JCheckBox,Boolean> autoBinding_3=Bindings.createAutoBinding(UpdateStrategy.READ,list,jListBeanProperty_3,chckbxTemplateWithDetail,jCheckBoxBeanProperty);  autoBinding_3.bind();}  }
class C{  public void closeOthers(CFrame window){  for (  CFrame w : windows) {    w.removeComponentListener(eventListener);    w.removeWindowListener(eventListener);    if (!w.equals(window)) {      w.dispose();    }  }  windows=new ArrayList<CFrame>();  add(window);}  }
class C{  public FieldInvertState(String name,int position,int length,int numOverlap,int offset,float boost){  this.name=name;  this.position=position;  this.length=length;  this.numOverlap=numOverlap;  this.offset=offset;  this.boost=boost;}  }
class C{  public void write(DataOutputStream out,Environment env) throws IOException {  int length=cpool.length;  if (MoreStuff != null)   length+=MoreStuff.size();  out.writeShort(length);  for (int i=1; i < cpool.length; i++) {    int type=types[i];    Object x=cpool[i];    out.writeByte(type);switch (type) {case CONSTANT_UTF8:      out.writeUTF((String)x);    break;case CONSTANT_INTEGER:  out.writeInt(((Number)x).intValue());break;case CONSTANT_FLOAT:out.writeFloat(((Number)x).floatValue());break;case CONSTANT_LONG:out.writeLong(((Number)x).longValue());i++;break;case CONSTANT_DOUBLE:out.writeDouble(((Number)x).doubleValue());i++;break;case CONSTANT_CLASS:case CONSTANT_STRING:out.writeShort(((Number)x).intValue());break;case CONSTANT_FIELD:case CONSTANT_METHOD:case CONSTANT_INTERFACEMETHOD:case CONSTANT_NAMEANDTYPE:{int value=((Number)x).intValue();out.writeShort(value >> 16);out.writeShort(value & 0xFFFF);break;}case CONSTANT_METHODHANDLE:case CONSTANT_METHODTYPE:case CONSTANT_INVOKEDYNAMIC:out.write((byte[])x,0,((byte[])x).length);break;default :throw new ClassFormatError("invalid constant type: " + (int)types[i]);}}for (int i=cpool.length; i < length; i++) {String string=(String)(MoreStuff.elementAt(i - cpool.length));out.writeByte(CONSTANT_UTF8);out.writeUTF(string);}}  }
class C{  public int count(){  return count;}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public void flush(){  if (ENABLED) {    mMixpanelAPI.flush();  }}  }
class C{  public static String[] toStringArray(boolean[] array){  if (array == null) {    return null;  }  String[] result=new String[array.length];  for (int i=0; i < array.length; i++) {    result[i]=String.valueOf(array[i]);  }  return result;}  }
class C{  public MicroservicesRunner(int... ports){  configureTransport(ports);}  }
class C{  @Override public GamaCoordinateSequence create(final CoordinateSequence coordSeq){  return new GamaCoordinateSequence(coordSeq);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:55.752 -0500",hash_original_method="C1EA9F78A57EB4E786518F27886C353B",hash_generated_method="362BAB9C335DE9C9885E3C4F342891D4") public boolean isLastSlice(){  return mIsLastSlice;}  }
class C{  public void newSymbol(EditorState editorState,char sy){  MetaCharacter meta=metaModel.getSymbol("" + sy);  newCharacter(editorState,meta);}  }
class C{  @Override public boolean add(E element){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public static <T>List<T> difference(final Collection<T> c1,final Collection<T> c2){  if (c1 == null || c1.size() == 0) {    return new ArrayList<>(0);  }  if (c2 == null || c2.size() == 0) {    return new ArrayList<>(c1);  }  final List<T> difference=new ArrayList<>();  for (  final T current : c1) {    if (!c2.contains(current)) {      difference.add(current);    }  }  return difference;}  }
class C{  public CSVWriter(Writer writer,char separator,char quotechar,String lineEnd){  this(writer,separator,quotechar,DEFAULT_ESCAPE_CHARACTER,lineEnd);}  }
class C{  public void extendTables(DatabaseSession session,JPAMSchemaManager schemaManager,boolean build){  buildConstraints(schemaManager,build);  String sequenceTableName=getSequenceTableName(session);  for (  TableDefinition table : getTableDefinitions()) {    if (!table.getName().equals(sequenceTableName)) {      AbstractSession abstractSession=(AbstractSession)session;      boolean alreadyExists=false;      DatabaseException createTableException=null;      if (!alreadyExists) {        try {          schemaManager.createObject(table);          session.getSessionLog().log(SessionLog.FINEST,SessionLog.DDL,"default_tables_created",table.getFullName());        } catch (        DatabaseException exception) {          createTableException=exception;          alreadyExists=true;        }      }      alreadyExists=true;      if (alreadyExists) {        String tableName=table.getTable() == null ? table.getName() : table.getTable().getName();        boolean usesDelimiting=(table.getTable() != null && table.getTable().shouldUseDelimiters());        List<DatabaseRecord> columnInfo=null;        columnInfo=abstractSession.getAccessor().getColumnInfo(null,null,tableName,null,abstractSession);        if (!usesDelimiting && (columnInfo == null || columnInfo.isEmpty())) {          tableName=tableName.toUpperCase();          columnInfo=abstractSession.getAccessor().getColumnInfo(null,null,tableName,null,abstractSession);          if ((columnInfo == null || columnInfo.isEmpty())) {            tableName=tableName.toLowerCase();            columnInfo=abstractSession.getAccessor().getColumnInfo(null,null,tableName,null,abstractSession);          }        }        if (columnInfo != null && !columnInfo.isEmpty()) {          Map<DatabaseField,DatabaseRecord> columns=new HashMap(columnInfo.size());          DatabaseField columnNameLookupField=new DatabaseField("COLUMN_NAME");          DatabaseField schemaLookupField=new DatabaseField("TABLE_SCHEM");          boolean schemaMatchFound=false;          String qualifier=table.getQualifier();          if ((qualifier == null) || (qualifier.length() == 0)) {            qualifier=session.getDatasourcePlatform().getTableQualifier();            if ((qualifier == null) || (qualifier.length() == 0)) {              qualifier=session.getLogin().getUserName();            }          }          boolean checkSchema=(qualifier != null) && (qualifier.length() > 0);          for (          DatabaseRecord record : columnInfo) {            String fieldName=(String)record.get(columnNameLookupField);            if (fieldName != null && fieldName.length() > 0) {              DatabaseField column=new DatabaseField(fieldName);              if (session.getPlatform().shouldForceFieldNamesToUpperCase()) {                column.useUpperCaseForComparisons(true);              }              String schema=(String)record.get(schemaLookupField);              if (schemaMatchFound) {                if (qualifier.equalsIgnoreCase(schema)) {                  columns.put(column,record);                }              } else {                if (checkSchema) {                  if (qualifier.equalsIgnoreCase(schema)) {                    schemaMatchFound=true;                    columns.clear();                  }                }                columns.put(column,record);              }            }          }          for (          FieldDefinition fieldDef : table.getFields()) {            DatabaseField dbField=fieldDef.getDatabaseField();            if (dbField == null) {              dbField=new DatabaseField(fieldDef.getName());            }            if (columns.get(dbField) == null) {              try {                table.addFieldOnDatabase(abstractSession,fieldDef);              } catch (              DatabaseException addFieldEx) {                session.getSessionLog().log(SessionLog.FINEST,SessionLog.DDL,"table_cannot_add_field",dbField.getName(),table.getFullName(),addFieldEx.getMessage());                if (!shouldIgnoreDatabaseException()) {                  throw addFieldEx;                }              }            }          }        } else         if (createTableException != null) {          session.getSessionLog().log(SessionLog.FINEST,SessionLog.DDL,"cannot_create_table",table.getFullName(),createTableException.getMessage());          if (!shouldIgnoreDatabaseException()) {            throw createTableException;          }        }      }    }  }  createConstraints(session,schemaManager,false);  schemaManager.createSequences();}  }
class C{  public void importVirtualVolume(URI arrayURI,Volume importVolume,VirtualPool vpool,String taskId) throws InternalException {  VirtualArray neighborhood=_dbClient.queryObject(VirtualArray.class,importVolume.getVirtualArray());  Project project=_dbClient.queryObject(Project.class,importVolume.getProject());  URI nullPoolURI=NullColumnValueGetter.getNullURI();  BlockConsistencyGroup consistencyGroup=null;  if (importVolume.getConsistencyGroup() != null) {    consistencyGroup=_dbClient.queryObject(BlockConsistencyGroup.class,importVolume.getConsistencyGroup());  }  Set<URI> vplexes=ConnectivityUtil.getVPlexSystemsAssociatedWithArray(_dbClient,arrayURI);  Iterator<URI> vplexIter=vplexes.iterator();  while (vplexIter.hasNext()) {    StorageSystem vplex=_dbClient.queryObject(StorageSystem.class,vplexIter.next());    StringSet vplexVarrays=vplex.getVirtualArrays();    if ((vplexVarrays == null) || (vplexVarrays.isEmpty()) || (!vplexVarrays.contains(neighborhood.getId().toString()))) {      vplexIter.remove();    }  }  if (vplexes.isEmpty()) {    throw APIException.badRequests.noVPlexSystemsAssociatedWithStorageSystem(arrayURI);  }  List<VolumeDescriptor> descriptors=new ArrayList<VolumeDescriptor>();  URI vplexURI=null;  StorageSystem vplexSystem=null;  Volume createVolume=null;  Project vplexProject;  if (vpool.getHighAvailability().equals(VirtualPool.HighAvailabilityType.vplex_distributed.name())) {    VirtualArray requestedHaVarray=null;    VirtualPool requestedHaVirtualPool=vpool;    try {      if (vpool.getHaVarrayVpoolMap() != null && !vpool.getHaVarrayVpoolMap().isEmpty()) {        for (        String haNH : vpool.getHaVarrayVpoolMap().keySet()) {          if (haNH.equals(NullColumnValueGetter.getNullURI().toString())) {            continue;          }          requestedHaVarray=_dbClient.queryObject(VirtualArray.class,new URI(haNH));          String haVirtualPool=vpool.getHaVarrayVpoolMap().get(haNH);          if (haVirtualPool.equals(NullColumnValueGetter.getNullURI().toString())) {            continue;          }          requestedHaVirtualPool=_dbClient.queryObject(VirtualPool.class,new URI(haVirtualPool));          break;        }      }    } catch (    URISyntaxException ex) {      s_logger.error("URISyntaxException",ex);    }    VirtualPoolCapabilityValuesWrapper cosCapabilities=new VirtualPoolCapabilityValuesWrapper();    cosCapabilities.put(VirtualPoolCapabilityValuesWrapper.SIZE,getVolumeCapacity(importVolume));    cosCapabilities.put(VirtualPoolCapabilityValuesWrapper.RESOURCE_COUNT,new Integer(1));    cosCapabilities.put(VirtualPoolCapabilityValuesWrapper.THIN_PROVISIONING,importVolume.getThinlyProvisioned());    List<Recommendation> recommendations=getBlockScheduler().scheduleStorageForImport(neighborhood,vplexes,requestedHaVarray,requestedHaVirtualPool,cosCapabilities);    if (recommendations.isEmpty()) {      throw APIException.badRequests.noStorageFoundForVolumeMigration(requestedHaVirtualPool.getLabel(),requestedHaVarray.getLabel(),importVolume.getId());    }    Recommendation recommendation=recommendations.get(0);    VPlexRecommendation vplexRecommendation=(VPlexRecommendation)recommendation;    vplexURI=vplexRecommendation.getVPlexStorageSystem();    vplexSystem=_dbClient.queryObject(StorageSystem.class,vplexURI);    vplexProject=getVplexProject(vplexSystem,_dbClient,_tenantsService);    VirtualArray haVirtualArray=_dbClient.queryObject(VirtualArray.class,vplexRecommendation.getVirtualArray());    createVolume=prepareVolumeForRequest(getVolumeCapacity(importVolume),vplexProject,haVirtualArray,vpool,vplexRecommendation.getSourceStorageSystem(),vplexRecommendation.getSourceStoragePool(),importVolume.getLabel() + "-1",ResourceOperationTypeEnum.CREATE_BLOCK_VOLUME,taskId,_dbClient);    createVolume.addInternalFlags(Flag.INTERNAL_OBJECT);    _dbClient.updateObject(createVolume);    VolumeDescriptor desc=new VolumeDescriptor(VolumeDescriptor.Type.BLOCK_DATA,createVolume.getStorageController(),createVolume.getId(),createVolume.getPool(),cosCapabilities);    descriptors.add(desc);  } else {    vplexURI=vplexes.toArray(new URI[0])[0];    vplexSystem=_dbClient.queryObject(StorageSystem.class,vplexURI);    vplexProject=getVplexProject(vplexSystem,_dbClient,_tenantsService);  }  Volume vplexVolume=prepareVolumeForRequest(getVolumeCapacity(importVolume),project,neighborhood,vpool,vplexURI,nullPoolURI,importVolume.getLabel(),ResourceOperationTypeEnum.CREATE_BLOCK_VOLUME,taskId,_dbClient);  vplexVolume.setAssociatedVolumes(new StringSet());  vplexVolume.getAssociatedVolumes().add(importVolume.getId().toString());  if (createVolume != null) {    vplexVolume.getAssociatedVolumes().add(createVolume.getId().toString());  }  if (consistencyGroup != null) {    vplexVolume.setConsistencyGroup(consistencyGroup.getId());    consistencyGroup.addRequestedTypes(Arrays.asList(BlockConsistencyGroup.Types.VPLEX.name()));    _dbClient.updateObject(consistencyGroup);  }  vplexVolume.setVirtualPool(vpool.getId());  _dbClient.updateObject(vplexVolume);  VolumeDescriptor desc=new VolumeDescriptor(VolumeDescriptor.Type.VPLEX_VIRT_VOLUME,vplexURI,vplexVolume.getId(),null,null);  descriptors.add(desc);  desc=new VolumeDescriptor(VolumeDescriptor.Type.VPLEX_IMPORT_VOLUME,importVolume.getStorageController(),importVolume.getId(),importVolume.getPool(),null);  descriptors.add(desc);  try {    s_logger.info("Calling VPlex controller.");    VPlexController controller=getController();    controller.importVolume(vplexURI,descriptors,vplexProject.getId(),vplexProject.getTenantOrg().getURI(),vpool.getId(),importVolume.getLabel() + SRC_BACKEND_VOL_LABEL_SUFFIX,null,Boolean.TRUE,taskId);  } catch (  InternalException ex) {    s_logger.error("ControllerException on importVolume",ex);    String errMsg=String.format("ControllerException: %s",ex.getMessage());    Operation statusUpdate=new Operation(Operation.Status.error.name(),errMsg);    _dbClient.updateTaskOpStatus(Volume.class,vplexVolume.getId(),taskId,statusUpdate);    _dbClient.markForDeletion(vplexVolume);    if (createVolume != null) {      _dbClient.markForDeletion(createVolume);    }    throw ex;  }}  }
class C{  public void processFinalRows(){  if (entries != null && entries.size() > 0) {    log.info("Persisting the final few entries...");    insertEntries();  }}  }
class C{  private ArrayList<Positionable> makeSelectionGroup(OBlock block,boolean showPortal){  ArrayList<Positionable> group=new ArrayList<Positionable>();  List<Positionable> circuitIcons=_circuitMap.get(block);  Iterator<Positionable> iter=circuitIcons.iterator();  while (iter.hasNext()) {    Positionable p=iter.next();    if (p instanceof PortalIcon) {      if (showPortal) {        ((PortalIcon)p).setStatus(PortalIcon.VISIBLE);        group.add(p);      }    } else {      group.add(p);    }  }  return group;}  }
class C{  public static String idToHex(long id){  return Long.toHexString(id);}  }
class C{  private int writeInt(byte[] out,int pos,int value){  out[pos + 0]=(byte)((value >> 24) & 0xFF);  out[pos + 1]=(byte)((value >> 16) & 0xFF);  out[pos + 2]=(byte)((value >> 8) & 0xFF);  out[pos + 3]=(byte)((value >> 0) & 0xFF);  return pos + INTEGER_BYTE_COUNT;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private void parseAnyNamespace(Attributes attributes) throws SAXException {  md.anyNamespace=true;  parseRule(NamespaceSpecification.ANY_NAMESPACE,attributes);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodegetlastchildnull.class,args);}  }
class C{  public ParetoConstraintComparator(){  super();}  }
class C{  @Override public PsiReference findReferenceAt(int offset){  PsiElement element=findElementAt(offset);  if (element == null || element instanceof OuterLanguageElement)   return null;  offset=getTextRange().getStartOffset() + offset - element.getTextRange().getStartOffset();  List<PsiReference> referencesList=new ArrayList<PsiReference>();  final PsiFile file=element.getContainingFile();  final PyResolveContext resolveContext=file != null ? PyResolveContext.defaultContext().withTypeEvalContext(TypeEvalContext.codeAnalysis(file.getProject(),file)) : PyResolveContext.defaultContext();  while (element != null) {    addReferences(offset,element,referencesList,resolveContext);    offset=element.getStartOffsetInParent() + offset;    if (element instanceof PsiFile)     break;    element=element.getParent();  }  if (referencesList.isEmpty())   return null;  if (referencesList.size() == 1)   return referencesList.get(0);  return new PsiMultiReference(referencesList.toArray(new PsiReference[referencesList.size()]),referencesList.get(referencesList.size() - 1).getElement());}  }
class C{  private static Pointer computePointer(ShortBuffer buffer){  Pointer result=null;  if (buffer.isDirect()) {    int oldPosition=buffer.position();    buffer.position(0);    result=Pointer.to(buffer.slice()).withByteOffset(oldPosition * Sizeof.SHORT);    buffer.position(oldPosition);  } else   if (buffer.hasArray()) {    ShortBuffer t=ShortBuffer.wrap(buffer.array());    int elementOffset=buffer.position() + buffer.arrayOffset();    result=Pointer.to(t).withByteOffset(elementOffset * Sizeof.SHORT);  }  return result;}  }
class C{  public void loginWithUsername(final String username,final String password,final ResultListener listener){  login(username,null,password,listener);}  }
class C{  public boolean reset(){  boolean wasReset=false;  if (super.reset()) {    resetToSAXHandler();    wasReset=true;  }  return wasReset;}  }
class C{  public void show(Context context){  if (overlayPermRequest(context)) {    return;  }  if (tinyCoach != null) {    tinyCoach.show();    return;  }  setFrameRate(context);  tinyCoach=new TinyCoach((Application)context.getApplicationContext(),fpsConfig);  fpsFrameCallback=new FPSFrameCallback(fpsConfig,tinyCoach);  Choreographer.getInstance().postFrameCallback(fpsFrameCallback);  Foreground.init((Application)context.getApplicationContext()).addListener(foregroundListener);}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public GitHubUser createUser(GHPerson ghPerson) throws IOException {  GitHubUser dtoUser=DtoFactory.getInstance().createDto(GitHubUser.class);  dtoUser.setId(String.valueOf(ghPerson.getId()));  dtoUser.setHtmlUrl(ghPerson.getHtmlUrl().toString());  dtoUser.setAvatarUrl(ghPerson.getAvatarUrl());  dtoUser.setBio(ghPerson.getBlog());  dtoUser.setCompany(ghPerson.getCompany());  dtoUser.setEmail(ghPerson.getEmail());  dtoUser.setFollowers(ghPerson.getFollowersCount());  dtoUser.setFollowing(ghPerson.getFollowingCount());  dtoUser.setLocation(ghPerson.getLocation());  dtoUser.setLogin(ghPerson.getLogin());  dtoUser.setName(ghPerson.getName());  dtoUser.setPublicGists(ghPerson.getPublicGistCount());  dtoUser.setPublicRepos(ghPerson.getPublicRepoCount());  dtoUser.setUrl(String.valueOf(ghPerson.getUrl()));  dtoUser.setGravatarId(ghPerson.getGravatarId());  return dtoUser;}  }
class C{  void detect(String url,OnDetectBigUrlFileListener onDetectBigUrlFileListener,DownloadConfiguration downloadConfiguration){  getDownloadTaskManager().detect(url,onDetectBigUrlFileListener,downloadConfiguration);}  }
class C{  public synchronized void update(Page page){  if (trace.isDebugEnabled()) {    if (!page.isChanged()) {      trace.debug("updateRecord " + page.toString());    }  }  checkOpen();  database.checkWritingAllowed();  page.setChanged(true);  int pos=page.getPos();  if (SysProperties.CHECK && !recoveryRunning) {    if (logMode != LOG_MODE_OFF) {      log.addUndo(pos,null);    }  }  allocatePage(pos);  cache.update(pos,page);}  }
class C{  public void testDoc4_Query4_All_Slops_Should_match() throws Exception {  for (int slop=0; slop < 30; slop++) {    int numResultsExpected=slop < 1 ? 0 : 1;    checkPhraseQuery(DOC_4,QUERY_4,slop,numResultsExpected);  }}  }
class C{  public ConsensusMessage(){}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  protected void validateParameterValues(org.oscm.xsd.ServiceParameter[] param){}  }
class C{  @Override public boolean contains(S2Cell cell){  throw new UnsupportedOperationException("'containment' is not numerically well-defined " + "except at the polyline vertices");}  }
class C{  @Override public void enqueue(final HttpServerRequest request,Buffer buffer,final String queue){  enqueue(request,request.headers(),buffer,queue);}  }
class C{  public void addRaster(float lt,float ln,int w,int h,byte[] bytes,Color[] colorTable,int trans,LinkProperties properties) throws IOException {  LinkRaster.write(lt,ln,w,h,bytes,colorTable,trans,properties,link.dos);}  }
class C{  private void onSchemaError(String message){  throw new InvalidSchemaException(message);}  }
class C{  public BitmapCache(BitmapGlobalConfig globalConfig){  if (globalConfig == null)   throw new IllegalArgumentException("globalConfig may not be null");  this.globalConfig=globalConfig;}  }
class C{  public void write(int value,int numBits){  if (numBits < 0 || numBits > 32) {    throw new IllegalArgumentException("Num bits must be between 0 and 32");  }  ensureCapacity(size + numBits);  for (int numBitsLeft=numBits; numBitsLeft > 0; numBitsLeft--) {    append(((value >> (numBitsLeft - 1)) & 0x01) == 1);  }}  }
class C{  public final static byte[] decode(String s){  int length=s.length();  if (length == 0) {    return new byte[0];  }  int sndx=0, endx=length - 1;  int pad=s.charAt(endx) == '=' ? (s.charAt(endx - 1) == '=' ? 2 : 1) : 0;  int cnt=endx - sndx + 1;  int sepCnt=length > 76 ? (s.charAt(76) == '\r' ? cnt / 78 : 0) << 1 : 0;  int len=((cnt - sepCnt) * 6 >> 3) - pad;  byte[] dest=new byte[len];  int d=0;  for (int cc=0, eLen=(len / 3) * 3; d < eLen; ) {    int i=INV[s.charAt(sndx++)] << 18 | INV[s.charAt(sndx++)] << 12 | INV[s.charAt(sndx++)] << 6 | INV[s.charAt(sndx++)];    dest[d++]=(byte)(i >> 16);    dest[d++]=(byte)(i >> 8);    dest[d++]=(byte)i;    if (sepCnt > 0 && ++cc == 19) {      sndx+=2;      cc=0;    }  }  if (d < len) {    int i=0;    for (int j=0; sndx <= endx - pad; j++) {      i|=INV[s.charAt(sndx++)] << (18 - j * 6);    }    for (int r=16; d < len; r-=8) {      dest[d++]=(byte)(i >> r);    }  }  return dest;}  }
class C{  public void resetFilters(){  filters=null;}  }
class C{  public T caseTypeTypeRef(TypeTypeRef object){  return null;}  }
class C{  protected void drawValueLabel(DrawingContext context,Slice slice,double radius,Row row,int rowIndex){  Comparable<?> value=slice.end - slice.start;  Format format=getValueFormat();  if ((format == null) && (value instanceof Number)) {    format=NumberFormat.getInstance();  }  String text=(format != null) ? format.format(value) : value.toString();  ColorMapper colors=getValueColor();  Paint paint=colors.get(rowIndex);  Font font=getValueFont();  double fontSize=font.getSize2D();  Location location=getValueLocation();  double alignX=getValueAlignmentX();  double alignY=getValueAlignmentY();  double rotation=getValueRotation();  double distance=getValueDistance();  if (MathUtils.isCalculatable(distance)) {    distance*=fontSize;  } else {    distance=0.0;  }  double radiusRelOuter=getOuterRadius();  double radiusRelInner=getInnerRadius();  double radiusOuter=radius * radiusRelOuter;  double radiusInner=radius * radiusRelInner;  double distanceV=distance;  double labelPosV;  if (location == Location.NORTH) {    labelPosV=radiusOuter + distanceV;  } else   if (location == Location.SOUTH) {    labelPosV=Math.max(radiusInner - distanceV,0);  } else {    double sliceHeight=radiusOuter - radiusInner;    if (2.0 * distance >= sliceHeight) {      alignY=0.5;      distanceV=0.0;    }    labelPosV=radiusInner + distanceV + alignY * (sliceHeight - 2.0 * distanceV);  }  double sum=plot.getSum(row.getSource());  if (sum == 0.0) {    return;  }  double sliceStartRel=slice.start / sum;  double sliceEndRel=slice.end / sum;  double circumference=2.0 * labelPosV * Math.PI;  double distanceRelH=distance / circumference;  double sliceWidthRel=sliceEndRel - sliceStartRel;  if (2.0 * distanceRelH >= sliceWidthRel) {    alignX=0.5;    distanceRelH=0.0;  }  double labelPosRelH=sliceStartRel + distanceRelH + alignX * (sliceWidthRel - 2.0 * distanceRelH);  double start=plot.getStart();  double angleStart=Math.toRadians(-start);  double direction=1.0;  if (!plot.isClockwise()) {    direction=-1.0;  }  double angle=angleStart + direction * labelPosRelH * 2.0* Math.PI;  double dirX=Math.cos(angle);  double dirY=Math.sin(angle);  Label label=new Label(text);  label.setAlignmentX(1.0 - 0.5 * dirX - 0.5);  label.setAlignmentY(0.5 * dirY + 0.5);  label.setRotation(rotation);  label.setColor(paint);  label.setFont(font);  Dimension2D sizeLabel=label.getPreferredSize();  double anchorX=0.5;  double anchorY=0.5;  if (location == Location.NORTH || location == Location.SOUTH) {    anchorX=dirX * sizeLabel.getWidth() / 2.0;    anchorY=dirY * sizeLabel.getHeight() / 2.0;    if (location == Location.SOUTH) {      anchorX=-anchorX;      anchorY=-anchorY;    }  }  double x=labelPosV * dirX + anchorX - sizeLabel.getWidth() / 2.0;  double y=labelPosV * dirY + anchorY - sizeLabel.getHeight() / 2.0;  double w=sizeLabel.getWidth();  double h=sizeLabel.getHeight();  label.setBounds(x,y,w,h);  label.draw(context);}  }
class C{  public boolean hasJob(){  return mJob != null;}  }
class C{  protected Instances makeTestDataset(int seed,int numInstances,int numNominal,int numNumeric,int numString,int numDate,int numRelational,int numClasses,int classType,boolean multiInstance) throws Exception {  return makeTestDataset(seed,numInstances,numNominal,numNumeric,numString,numDate,numRelational,numClasses,classType,TestInstances.CLASS_IS_LAST,multiInstance);}  }
class C{  public boolean remove(String displayName){  return (m_Methods.remove(displayName) != null);}  }
class C{  public Pair(final First first,final Second second){  this.first=first;  this.second=second;}  }
class C{  private static String findProviderClass(ExternalContext extContext){  WebConfiguration webConfig=WebConfiguration.getInstance(extContext);  String provider=webConfig.getOptionValue(WebContextInitParameter.InjectionProviderClass);  if (provider != null) {    return provider;  } else {    provider=System.getProperty(INJECTION_PROVIDER_PROPERTY);  }  if (provider != null) {    return provider;  } else {    String[] serviceEntries=getServiceEntries();    if (serviceEntries.length > 0) {      for (int i=0; i < serviceEntries.length; i++) {        provider=getProviderFromEntry(extContext.getApplicationMap(),serviceEntries[i]);        if (provider != null) {          break;        }      }    } else {      return provider;    }  }  return provider;}  }
class C{  public void attributeAsClassAt(int columnIndex){  Reorder reorder;  String order;  int i;  if ((columnIndex > 0) && (columnIndex < getColumnCount())) {    addUndoPoint();    try {      order="";      for (i=1; i < m_Data.numAttributes() + 1; i++) {        if (i == columnIndex) {          continue;        }        if (!order.equals("")) {          order+=",";        }        order+=Integer.toString(i);      }      if (!order.equals("")) {        order+=",";      }      order+=Integer.toString(columnIndex);      reorder=new Reorder();      reorder.setAttributeIndices(order);      reorder.setInputFormat(m_Data);      m_Data=Filter.useFilter(m_Data,reorder);      m_Data.setClassIndex(m_Data.numAttributes() - 1);    } catch (    Exception e) {      e.printStackTrace();      undo();    }    notifyListener(new TableModelEvent(this,TableModelEvent.HEADER_ROW));  }}  }
class C{  public String option2Name(){  return "";}  }
class C{  public static VOServiceReview toVOServiceReview(ProductReview domainObject){  VOServiceReview valueObject=new VOServiceReview();  valueObject.setTitle(domainObject.getTitle());  valueObject.setComment(domainObject.getComment());  valueObject.setRating(domainObject.getRating());  valueObject.setModificationDate(domainObject.getModificationDate());  valueObject.setKey(domainObject.getKey());  valueObject.setVersion(domainObject.getVersion());  valueObject.setProductKey(domainObject.getProductFeedback().getProduct().getKey());  valueObject.setUserId(domainObject.getPlatformUser().getUserId());  mapUserName(domainObject,valueObject);  return valueObject;}  }
class C{  private int computeOffHeapLocalMaxMemory(){  long availableOffHeapMemoryInMB=0;  if (testAvailableOffHeapMemory != null) {    availableOffHeapMemoryInMB=OffHeapStorage.parseOffHeapMemorySize(testAvailableOffHeapMemory) / (1024 * 1024);  } else   if (InternalDistributedSystem.getAnyInstance() == null) {    this.localMaxMemoryExists=false;    return OFF_HEAP_LOCAL_MAX_MEMORY_PLACEHOLDER;  } else {    String offHeapSizeConfigValue=InternalDistributedSystem.getAnyInstance().getOriginalConfig().getOffHeapMemorySize();    availableOffHeapMemoryInMB=OffHeapStorage.parseOffHeapMemorySize(offHeapSizeConfigValue) / (1024 * 1024);  }  if (availableOffHeapMemoryInMB > Integer.MAX_VALUE) {    logger.warn(LocalizedMessage.create(LocalizedStrings.PartitionAttributesImpl_REDUCED_LOCAL_MAX_MEMORY_FOR_PARTITION_ATTRIBUTES_WHEN_SETTING_FROM_AVAILABLE_OFF_HEAP_MEMORY_SIZE));    return Integer.MAX_VALUE;  }  this.localMaxMemoryExists=true;  return (int)availableOffHeapMemoryInMB;}  }
class C{  public Buffer maxDistance(String maxDistance){  this.maxDistance=maxDistance;  return this;}  }
class C{  public Document createDefaultDocument(){  return new DefaultStyledDocument();}  }
class C{  private void addMethod(MethodNode methodNode){  String[] exceptions=new String[methodNode.exceptions.size()];  methodNode.exceptions.toArray(exceptions);  MethodVisitor mv=cv.visitMethod(methodNode.access,methodNode.name,methodNode.desc,methodNode.signature,exceptions);  methodNode.instructions.resetLabels();  methodNode.accept(new RemappingMethodAdapter(methodNode.access,methodNode.desc,mv,new SimpleRemapper(classToMerge.name,baseClassName)));}  }
class C{  public static byte[] toRawByteArray(char[] carr){  byte[] barr=new byte[carr.length << 1];  for (int i=0, bpos=0; i < carr.length; i++) {    char c=carr[i];    barr[bpos++]=(byte)((c & 0xFF00) >> 8);    barr[bpos++]=(byte)(c & 0x00FF);  }  return barr;}  }
class C{  public void clear(){  this.archives.clear();}  }
class C{  public static Result jobHistory(){  return getJobHistory(Version.NEW);}  }
class C{  private void commitText(String text){  mInputConnection.beginBatchEdit();  String commonPrefix=greatestCommonPrefix(mPrevText,text);  int commonPrefixLength=commonPrefix.length();  int prevLength=mPrevText.length();  int deletableLength=prevLength - commonPrefixLength;  if (text.isEmpty()) {    deletableLength+=mGlueCount;  }  if (deletableLength > 0) {    mInputConnection.deleteSurroundingText(deletableLength,0);  }  if (text.isEmpty() || commonPrefixLength == text.length()) {    return;  }  CharSequence leftContext=mInputConnection.getTextBeforeCursor(MAX_DELETABLE_CONTEXT,0);  if (leftContext == null) {    leftContext="";  }  String glue="";  if (commonPrefixLength == 0) {    glue=getGlue(text,leftContext);  } else {    text=text.substring(commonPrefixLength);  }  if (" ".equals(glue)) {    mGlueCount=1;  }  text=capitalizeIfNeeded(text,leftContext);  mInputConnection.commitText(glue + text,1);  mInputConnection.endBatchEdit();}  }
class C{  public OkHttpDownloader(final Context context){  this(Utils.createDefaultCacheDir(context));}  }
class C{  private static CalendarEventEntry createEvent(CalendarService service,String eventTitle,String eventContent,String recurData,boolean isQuickAdd,WebContent wc) throws ServiceException, IOException {  CalendarEventEntry myEntry=new CalendarEventEntry();  myEntry.setTitle(new PlainTextConstruct(eventTitle));  myEntry.setContent(new PlainTextConstruct(eventContent));  myEntry.setQuickAdd(isQuickAdd);  myEntry.setWebContent(wc);  if (recurData == null) {    Calendar calendar=new GregorianCalendar();    DateTime startTime=new DateTime(calendar.getTime(),TimeZone.getDefault());    calendar.add(Calendar.MINUTE,30);    DateTime endTime=new DateTime(calendar.getTime(),TimeZone.getDefault());    When eventTimes=new When();    eventTimes.setStartTime(startTime);    eventTimes.setEndTime(endTime);    myEntry.addTime(eventTimes);  } else {    Recurrence recur=new Recurrence();    recur.setValue(recurData);    myEntry.setRecurrence(recur);  }  return service.insert(eventFeedUrl,myEntry);}  }
class C{  public NoCrowdingScoringFunctionFactory(ScoringFunctionFactory delegate,EventsManager events,ScoreTracker scoreTracker,MatsimServices controler){  this.delegate=delegate;  this.events=events;  this.scoreTracker=scoreTracker;  this.controler=controler;}  }
class C{  String showOutput(String out){  if (!out.isEmpty())   System.err.println(out);  return out;}  }
class C{  protected Pair<String,Boolean> exec(final ConsoleCodeFragment command) throws XmlRpcException {  setExecuting(true);  Object execute=myClient.execute(command.isSingleLine() ? EXEC_LINE : EXEC_MULTILINE,new Object[]{command.getText()});  Object object;  if (execute instanceof Vector) {    object=((Vector)execute).get(0);  } else   if (execute.getClass().isArray()) {    object=((Object[])execute)[0];  } else {    object=execute;  }  Pair<String,Boolean> result=parseResult(object);  if (result.second) {    setExecuting(false);  }  return result;}  }
class C{  private void saveWindowSize(Dimension size){  if (size != null) {    if (getExtendedState() == Frame.NORMAL) {      if (logger.isDebugEnabled())       logger.debug("Saving preference " + PREF_WINDOW_SIZE + "="+ size.width+ ","+ size.height);      this.preferences.put(prefnzPrefix + PREF_WINDOW_SIZE,size.width + "," + size.height);    } else {      if (logger.isDebugEnabled())       logger.debug("Preference " + PREF_WINDOW_SIZE + " not saved, cause window state is not 'normal'.");    }  }}  }
class C{  public SQLWarning(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public void init() throws RecurrenceRuleException {  String freq=rule.getString("frequency");  if (!checkFreq(freq))   throw new RecurrenceRuleException("Recurrence FREQUENCY is a required parameter.");  if (rule.getLong("intervalNumber").longValue() < 1)   throw new RecurrenceRuleException("Recurrence INTERVAL must be a positive integer.");  bySecondList=StringUtil.split(rule.getString("bySecondList"),",");  byMinuteList=StringUtil.split(rule.getString("byMinuteList"),",");  byHourList=StringUtil.split(rule.getString("byHourList"),",");  byDayList=StringUtil.split(rule.getString("byDayList"),",");  byMonthDayList=StringUtil.split(rule.getString("byMonthDayList"),",");  byYearDayList=StringUtil.split(rule.getString("byYearDayList"),",");  byWeekNoList=StringUtil.split(rule.getString("byWeekNoList"),",");  byMonthList=StringUtil.split(rule.getString("byMonthList"),",");  bySetPosList=StringUtil.split(rule.getString("bySetPosList"),",");}  }
class C{  public static byte[] messageToBytes(Soap soap) throws Exception {  if (soap instanceof SoapMessage) {    return ((SoapMessage)soap).getBytes();  }  return soap.getXml().getBytes();}  }
class C{  public void insert(Instruction inst,LinkedList<MethodVariables> mvarList){  list.add(new VariableMapElement(inst,mvarList));}  }
class C{  public StorageSpecification(){  this.version=VERSION_NO;  fileNames=new ArrayList<String>();  fileLengths=new ArrayList<Long>();  fileCrcs=new ArrayList<Long>();  databaseNames=new ArrayList<String>();}  }
class C{  public CollectionExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  protected void initializeLocation(V v,Point2D coord){  Point point=locations.get(v);  coord.setLocation(point.x,point.y);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  double zeta(long st,long n,double theta,double initialsum){  countforzeta=n;  return zetastatic(st,n,theta,initialsum);}  }
class C{  private SchemaFactory loadFromServicesFile(String schemaLanguage,String resourceName,InputStream in){  if (debug)   debugPrintln("Reading " + resourceName);  BufferedReader rd;  try {    rd=new BufferedReader(new InputStreamReader(in,"UTF-8"),DEFAULT_LINE_LENGTH);  } catch (  java.io.UnsupportedEncodingException e) {    rd=new BufferedReader(new InputStreamReader(in),DEFAULT_LINE_LENGTH);  }  String factoryClassName=null;  SchemaFactory resultFactory=null;  while (true) {    try {      factoryClassName=rd.readLine();    } catch (    IOException x) {      break;    }    if (factoryClassName != null) {      int hashIndex=factoryClassName.indexOf('#');      if (hashIndex != -1) {        factoryClassName=factoryClassName.substring(0,hashIndex);      }      factoryClassName=factoryClassName.trim();      if (factoryClassName.length() == 0) {        continue;      }      try {        SchemaFactory foundFactory=(SchemaFactory)createInstance(factoryClassName);        if (foundFactory.isSchemaLanguageSupported(schemaLanguage)) {          resultFactory=foundFactory;          break;        }      } catch (      Exception ignored) {      }    } else {      break;    }  }  IoUtils.closeQuietly(rd);  return resultFactory;}  }
class C{  public static final boolean isSameUser(int uid1,int uid2){  return getUserId(uid1) == getUserId(uid2);}  }
class C{  public void quietCleanup(){  try {    close();  } catch (  Throwable e) {    logger.error("Internal error occurred while cleaning up the connection.",e);  }}  }
class C{  public boolean willViewBeDestroyedPermanently(Context context){  OrientationChangeFragment fragment=getFragment(context);  return fragment.destroyed;}  }
class C{  public void hide(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);}  }
class C{  private void createToolBar(){  toolBar=new JToolBar("TDA Toolbar");  if (listener.runningAsJConsolePlugin || listener.runningAsVisualVMPlugin) {    toolBar.add(createToolBarButton("Request a Thread Dump","FileOpen.png"));    toolBar.setFloatable(false);  } else {    toolBar.add(createToolBarButton("Open Logfile","FileOpen.png"));    closeToolBarButton=createToolBarButton("Close selected Logfile","CloseFile.png");    closeToolBarButton.setEnabled(false);    toolBar.add(closeToolBarButton);  }  toolBar.addSeparator();  toolBar.add(createToolBarButton("Preferences","Preferences.png"));  toolBar.addSeparator();  expandButton=createToolBarButton("Expand all nodes","Expanded.png");  expandButton.setEnabled(false);  toolBar.add(expandButton);  collapseButton=createToolBarButton("Collapse all nodes","Collapsed.png");  collapseButton.setEnabled(false);  toolBar.add(collapseButton);  toolBar.addSeparator();  findLRThreadsButton=createToolBarButton("Find long running threads","FindLRThreads.png");  findLRThreadsButton.setEnabled(false);  toolBar.add(findLRThreadsButton);  toolBar.add(createToolBarButton("Filters","Filters.png"));  toolBar.add(createToolBarButton("Custom Categories","CustomCat.png"));  toolBar.addSeparator();}  }
class C{  public void putAllEnv(Map<String,? extends Object> values){  for (  Map.Entry<String,? extends Object> entry : values.entrySet()) {    this.putEnv(entry.getKey(),entry.getValue());  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public TagTransformation(String sourceTag,String destTag){  this(sourceTag,destTag,true);}  }
class C{  public static float ceil(float fValue){  return (float)Math.ceil(fValue);}  }
class C{  public MissingFormatWidthException(String s){  if (s == null)   throw new NullPointerException();  this.s=s;}  }
class C{  public NodeModel loadXml(String file){  return loadXml(file,true);}  }
class C{  private void addGroupText(FormEntryCaption[] groups){  StringBuilder s=new StringBuilder("");  String t="";  int i;  for (  FormEntryCaption g : groups) {    i=g.getMultiplicity() + 1;    t=g.getLongText();    if (t != null) {      s.append(t);      if (g.repeats() && i > 0) {        s.append(" (" + i + ")");      }      s.append(" > ");    }    Appearance appearance=Appearance.fromString(g.getAppearanceHint());    if (appearance.hasQualifier("invisible")) {      s.setLength(0);    }  }  if (s.length() > 0) {    TextView tv=(TextView)LayoutInflater.from(getContext()).inflate(R.layout.template_text_view_group,null);    tv.setText(s.substring(0,s.length() - 3));    mView.addView(tv,mLayout);  }}  }
class C{  public boolean isDisposed(){  Object oo=get_Value(COLUMNNAME_IsDisposed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private TransportNetwork checkCached(String networkId){  try {    String filename=networkId + "_" + R5Version.version+ ".dat";    File cacheLocation=new File(cacheDir,networkId + "_" + R5Version.version+ ".dat");    if (cacheLocation.exists())     LOG.info("Found locally-cached TransportNetwork at {}",cacheLocation); else {      LOG.info("No locally cached transport network at {}.",cacheLocation);      if (sourceBucket != null) {        LOG.info("Checking for cached transport network on S3.");        S3Object tn;        try {          tn=s3.getObject(sourceBucket,filename);        } catch (        AmazonServiceException ex) {          LOG.info("No cached transport network was found in S3. It will be built from scratch.");          return null;        }        cacheDir.mkdirs();        LOG.info("Copying pre-built transport network from S3 to local file {}",cacheLocation);        FileOutputStream fos=new FileOutputStream(cacheLocation);        InputStream is=tn.getObjectContent();        try {          ByteStreams.copy(is,fos);        }  finally {          is.close();          fos.close();        }      } else {        LOG.info("Transport network was not found");        return null;      }    }    LOG.info("Loading cached transport network at {}",cacheLocation);    FileInputStream fis=new FileInputStream(cacheLocation);    try {      return TransportNetwork.read(fis);    }  finally {      fis.close();    }  } catch (  Exception e) {    LOG.error("Exception occurred retrieving cached transport network",e);    return null;  }}  }
class C{  public static boolean initialAccessCheck(){  boolean bad=false;  for (  final String flag : ACCESSED_FLAGS) {    Diagnostic.warning("Flag: --" + flag + " is accessed before flag registration");    bad=true;  }  resetAccessedStatus();  return !bad;}  }
class C{  public void resetTagDefinitions(){  mTagInfo=null;}  }
class C{  public static void d(String msg,Throwable thr){  if (BuildConfig.DEBUG)   android.util.Log.d(TAG,buildMessage(msg),thr);}  }
class C{  public void updateNodeReports(List<NodeReport> nodeReports){  for (  NodeReport nr : nodeReports) {    LOG.debug("Node report: rackName={}, nodeid={}, numContainers={}, capability={}, used={}, state={}",nr.getRackName(),nr.getNodeId(),nr.getNumContainers(),nr.getCapability(),nr.getUsed(),nr.getNodeState());    nodeReportMap.put(nr.getNodeId().getHost(),nr);    nodeToRack.put(nr.getNodeId().getHost(),nr.getRackName());  }}  }
class C{  @Override public Void visitCatch(CatchTree node,Void p){  checkExceptionParameter(node);  return super.visitCatch(node,p);}  }
class C{  private String partitionFromTargetDirectory(String targetDirectory){  final Matcher m=DirectoryPartitionPattern.matcher(targetDirectory);  if (m.find()) {    return m.group(1);  }  return null;}  }
class C{  public void clearPayment(int index){  paymentInfo.remove(index);}  }
class C{  public TwoDPoint[] generate(int size){  TwoDPoint[] points=new TwoDPoint[size];  for (int i=0; i < size; i++) {    points[i]=new TwoDPoint(xValue,10 * i);  }  return points;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementnotfounderr.class,args);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.834 -0500",hash_original_method="F28B5BF4E03C8DBEAAFF8385872990FD",hash_generated_method="A6B150B9E5EBD7E685808E03558379BE") public NewsgroupInfo[] listNewsgroups(String wildmat) throws IOException {  if (!NNTPReply.isPositiveCompletion(listActive(wildmat)))   return null;  return __readNewsgroupListing();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.CAST_EXPRESSION;}  }
class C{  @Override protected void processTuple(T tuple,boolean isStream1Data){  Spillable.SpillableListMultimap<K,T> store=isStream1Data ? stream1Data : stream2Data;  K key=extractKey(tuple,isStream1Data);  long timeBucket=extractTime(tuple,isStream1Data);  if (!((ManagedTimeStateMultiValue)store).put(key,tuple,timeBucket)) {    return;  }  Spillable.SpillableListMultimap<K,T> valuestore=isStream1Data ? stream2Data : stream1Data;  Future<List> future=((ManagedTimeStateMultiValue)valuestore).getAsync(key);  if (future.isDone()) {    try {      joinStream(tuple,isStream1Data,future.get());    } catch (    InterruptedException|ExecutionException e) {      throw new RuntimeException(e);    }  } else {    waitingEvents.put(new JoinEvent<>(key,tuple,isStream1Data),future);  }}  }
class C{  public void append(StringBuffer buffer,String fieldName,char[] array,Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static Date parseDate(final String format,final String dateString) throws DSSException {  try {    final SimpleDateFormat sdf=new SimpleDateFormat(format);    final Date date=sdf.parse(dateString);    return date;  } catch (  ParseException e) {    throw new DSSException("Unable to parse date " + dateString + " (format:"+ format+ ")",e);  }}  }
class C{  public Matrix4d scaleAround(double sx,double sy,double sz,double ox,double oy,double oz){  return scaleAround(sx,sy,sz,ox,oy,oz,this);}  }
class C{  public boolean isRecordable(int type){  assert type > 0 : "Invalid event type: " + type;  return type < len ? recordableEvts[type] : isUserRecordable0(type);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documenttypegetentitieslength.class,args);}  }
class C{  public static boolean isAssignableFrom(Class<?> destination,Class<?> source){  return destination.isAssignableFrom(source) || isBoxing(destination,source) || isUnBoxing(destination,source);}  }
class C{  public void testServerLeave() throws Throwable {  List<CopycatServer> servers=createServers(3);  CopycatServer server=servers.get(0);  server.leave().thenRun(null);  await(30000);}  }
class C{  public static byte[] toBytes(BigDecimal val){  byte[] valueBytes=val.unscaledValue().toByteArray();  byte[] result=new byte[valueBytes.length + SIZEOF_INT];  int offset=putInt(result,0,val.scale());  putBytes(result,offset,valueBytes,0,valueBytes.length);  return result;}  }
class C{  public ControllerLookupException(List<LocalizedText> messages,Throwable cause){  super(messages,cause);}  }
class C{  public PSPProcessingException(String message){  super(message);}  }
class C{  public void putBMPString(String s) throws IOException {  writeString(s,DerValue.tag_BMPString,"UnicodeBigUnmarked");}  }
class C{  int precedence(){  return (op < opPrecedence.length) ? opPrecedence[op] : 100;}  }
class C{  public final boolean staysHere(){  float rand=myRand(seed);  seed=(int)(rand * IM);  return (rand > 0.1 || back == null);}  }
class C{  private TreeNodeVisitor walkCorruptedPath(TreeLearner model,DataPoint dp,int j,Random rand){  TreeNodeVisitor curNode=model.getTreeNodeVisitor();  while (!curNode.isLeaf()) {    int path=curNode.getPath(dp);    int numChild=curNode.childrenCount();    if (curNode.featuresUsed().contains(j)) {      path=(path + rand.nextInt(numChild)) % numChild;    }    if (curNode.isPathDisabled(path))     break; else     curNode=curNode.getChild(path);  }  return curNode;}  }
class C{  public static Map<String,String> readModList(PluginMessage pluginMessage){  Map<String,String> modTags=Maps.newHashMap();  ByteBuf payload=Unpooled.wrappedBuffer(pluginMessage.getData());  byte discriminator=payload.readByte();  if (discriminator == 2) {    ByteBuf buffer=payload.slice();    int modCount=DefinedPacket.readVarInt(buffer,2);    for (int i=0; i < modCount; i++) {      modTags.put(DefinedPacket.readString(buffer),DefinedPacket.readString(buffer));    }  }  return modTags;}  }
class C{  public Vector3d sub(double x,double y,double z){  this.x-=x;  this.y-=y;  this.z-=z;  return this;}  }
class C{  private void processTriggerDeletes(final State current){  try {    Operation queryDatastoreSet=buildDatastoreSetQuery();    OperationSequence.create(queryDatastoreSet).setCompletion(null).sendWith(this);  } catch (  Exception e) {    failTask(e);  }}  }
class C{  private void initDefinitionsFile() throws ReplicatorException {  try {    logger.info("Using: " + definitionsFile);    String jsonText=readDefinitionsFile(definitionsFile);    Object obj=parser.parse(jsonText);    @SuppressWarnings("unchecked") Map<String,JSONArray> map=(Map<String,JSONArray>)obj;    definitions=map;    Iterator<String> it=definitions.keySet().iterator();    while (it.hasNext()) {      String transformation=it.next();      logger.info("Transformation: " + transformation);      JSONArray array=definitions.get(transformation);      for (      Object o : array) {        JSONObject jo=(JSONObject)o;        String schema=(String)jo.get("schema");        String table=(String)jo.get("table");        JSONArray columns=(JSONArray)jo.get("columns");        logger.info("  In " + schema + "."+ table+ ": ");        for (        Object c : columns) {          String column=(String)c;          definedColumnEntries++;          logger.info("    " + column);        }      }    }  } catch (  ClassCastException e) {    throw new ReplicatorException("Unable to read definitions file (is JSON structure correct?): " + e,e);  }catch (  ParseException e) {    throw new ReplicatorException("Unable to read definitions file (error parsing JSON): " + e,e);  }catch (  IOException e) {    throw new ReplicatorException(e);  }}  }
class C{  public boolean hasOldLduStructure(){  boolean isLduStructure=false;  String searchFilter=String.format("(objectclass=%s)",TRUSTED_CRED_OBJECT_CLASS);  ILdapMessage message=lookupObject(getLduDn(),LdapScope.SCOPE_ONE_LEVEL,searchFilter);  if (message != null) {    ILdapEntry[] entries=message.getEntries();    if (entries != null && entries.length > 0) {      isLduStructure=true;    }  }  return isLduStructure;}  }
class C{  public void testXmlVersionFeature(){  assertFeature("XMLVersion",null);  assertFeature("XMLVersion","");  assertFeature("XMLVersion","1.0");  assertFeature("XMLVersion","1.1");  assertFeature("XMLVERSION","1.1");  assertFeature("+XMLVersion","1.1");  assertNoFeature("XMLVersion","1.2");  assertNoFeature("XMLVersion","2.0");  assertNoFeature("XMLVersion","2.0");}  }
class C{  public static int hash(int seed,double[] doubleArray){  if (doubleArray == null) {    return 0;  }  for (  double aDouble : doubleArray) {    seed=hash(seed,aDouble);  }  return seed;}  }
class C{  public T caseReactionProperty(ReactionProperty object){  return null;}  }
class C{  public <T extends BlockObject>boolean groupHasReplicasInSplitState(StorageSystem storage,List<URI> replicaList,Class<T> clazz){  Iterator<T> replicaObjsItr=_dbClient.queryIterativeObjects(clazz,replicaList,true);  while (replicaObjsItr.hasNext()) {    T replicaObj=replicaObjsItr.next();    CIMObjectPath syncObjCoP=_cimPath.getSyncObject(storage,replicaObj);    _log.debug("Verifying replica {} sync state.",replicaObj.getId());    try {      CIMInstance instance=getInstance(storage,syncObjCoP,false,false,new String[]{SmisConstants.CP_SYNC_STATE});      if (null == instance) {        continue;      }      String syncState=CIMPropertyFactory.getPropertyValue(instance,SmisConstants.CP_SYNC_STATE);      if (SynchronizationState.FRACTURED.toString().equals(syncState)) {        _log.info("Found a replica {} in Split state",replicaObj.getId());        return true;      }    } catch (    Exception e) {      String msg=String.format("Failed to acquire sync instance %s. continuing with next.. ",syncObjCoP);      _log.warn(msg,e);    }  }  _log.info("All replicas in the group are in SYNC state. No resume required");  return false;}  }
class C{  public void startApp(){  if (bFirst == false) {    System.out.println("Starting GPIO Demo");    try {      led1=GPIOManager.getPin(LED1_PIN_ID);      led2=GPIOManager.getPin(LED2_PIN_ID);      ledPort=GPIOManager.getPort(LED_PORT_ID);      button1=GPIOManager.getPin(BUTTON1_PIN_ID);      button2=GPIOManager.getPin(BUTTON2_PIN_ID);      button3=GPIOManager.getPin(BUTTON3_PIN_ID);    } catch (    Exception ex) {      ex.printStackTrace();      System.out.println("Get pin and port fail");      return;    }    System.out.println("set listener for button 1,2,3");    try {      button1.setInputListener(button1Listener);      button2.setInputListener(button2Listener);      button3.setInputListener(button3Listener);    } catch (    Exception ex) {      ex.printStackTrace();    }    bFirst=true;  } else {    System.out.println("GPIO Demo is already started..");  }}  }
class C{  void crossOver(BayesNetRepresentation other){  boolean[] bits=new boolean[m_bits.length];  for (int i=0; i < m_bits.length; i++) {    bits[i]=m_bits[i];  }  int iCrossOverPoint=m_bits.length;  do {    for (int i=iCrossOverPoint; i < m_bits.length; i++) {      m_bits[i]=bits[i];    }    iCrossOverPoint=m_random.nextInt(m_bits.length);    for (int i=iCrossOverPoint; i < m_bits.length; i++) {      m_bits[i]=other.m_bits[i];    }  } while (hasCycles());  calcScore();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.FACET__KEY:    return KEY_EDEFAULT == null ? key != null : !KEY_EDEFAULT.equals(key);case GamlPackage.FACET__EXPR:  return expr != null;case GamlPackage.FACET__BLOCK:return block != null;}return super.eIsSet(featureID);}  }
class C{  private int indexOf(final byte[] array,final int from,final int to){  final byte[] a=array;  final int c=pattern[0];  int i=from < 0 ? -1 : from - 1;  if (caseSensitive) {    while (++i < to)     if ((a[i] & 0xFF) == c)     return i;    return -1;  } else {    while (++i < to)     if (asciiToLowerCase((char)(a[i] & 0xFF)) == c)     return i;    return -1;  }}  }
class C{  public void addExtension(ASN1ObjectIdentifier oid,boolean critical,byte[] value){  if (extensions.containsKey(oid)) {    throw new IllegalArgumentException("extension " + oid + " already added");  }  extOrdering.addElement(oid);  extensions.put(oid,new Extension(oid,critical,new DEROctetString(value)));}  }
class C{  public static void putString2bytes(byte[] destbytes,String srcString,int destOffset,int srcOffset,int count){  for (int i=0; i < count; i++) {    destbytes[count + i]=srcString.getBytes()[i];  }}  }
class C{  protected void writeGraphicCtrlExt() throws IOException {  out.write(0x21);  out.write(0xf9);  out.write(4);  int transp, disp;  if (transparent == null) {    transp=0;    disp=0;  } else {    transp=1;    disp=2;  }  if (dispose >= 0) {    disp=dispose & 7;  }  disp<<=2;  out.write(0 | disp | 0| transp);  writeShort(delay);  out.write(transIndex);  out.write(0);}  }
class C{  public boolean layoutTurnoutHasRequiredSignals(LayoutTurnout t){  if (t.getLinkType() == LayoutTurnout.NO_LINK) {    if ((t.getTurnoutType() == LayoutTurnout.RH_TURNOUT) || (t.getTurnoutType() == LayoutTurnout.LH_TURNOUT) || (t.getTurnoutType() == LayoutTurnout.WYE_TURNOUT)) {      if ((t.getSignalA1Name() != null) && (!t.getSignalA1Name().equals("")) && (t.getSignalB1Name() != null)&& (!t.getSignalB1Name().equals(""))&& (t.getSignalC1Name() != null)&& (!t.getSignalC1Name().equals(""))) {        return true;      } else {        return false;      }    } else     if (t.getTurnoutType() == LayoutTurnout.SINGLE_SLIP || t.getTurnoutType() == LayoutTurnout.DOUBLE_SLIP) {      if ((t.getSignalA1Name() != null) && (!t.getSignalA1Name().equals("")) && (t.getSignalA2Name() != null)&& (!t.getSignalA2Name().equals(""))&& (t.getSignalB1Name() != null)&& (!t.getSignalB1Name().equals(""))&& (t.getSignalC1Name() != null)&& (!t.getSignalC1Name().equals(""))&& (t.getSignalD1Name() != null)&& (!t.getSignalD1Name().equals(""))&& (t.getSignalD2Name() != null)&& (!t.getSignalD2Name().equals(""))) {        if (t.getTurnoutType() == LayoutTurnout.SINGLE_SLIP) {          return true;        }        if (t.getTurnoutType() == LayoutTurnout.DOUBLE_SLIP) {          if ((t.getSignalB2Name() != null) && (!t.getSignalB2Name().equals("")) && (t.getSignalC2Name() != null)&& (!t.getSignalC2Name().equals(""))) {            return true;          }        }      }      return false;    } else {      if ((t.getSignalA1Name() != null) && (!t.getSignalA1Name().equals("")) && (t.getSignalB1Name() != null)&& (!t.getSignalB1Name().equals(""))&& (t.getSignalC1Name() != null)&& (!t.getSignalC1Name().equals(""))&& (t.getSignalD1Name() != null)&& (!t.getSignalD1Name().equals(""))) {        return true;      } else {        return false;      }    }  } else   if (t.getLinkType() == LayoutTurnout.FIRST_3_WAY) {    if ((t.getSignalA1Name() != null) && (!t.getSignalA1Name().equals("")) && (t.getSignalC1Name() != null)&& (!t.getSignalC1Name().equals(""))) {      return true;    } else {      return false;    }  } else   if (t.getLinkType() == LayoutTurnout.SECOND_3_WAY) {    if ((t.getSignalB1Name() != null) && (!t.getSignalB1Name().equals("")) && (t.getSignalC1Name() != null)&& (!t.getSignalC1Name().equals(""))) {      return true;    } else {      return false;    }  } else   if (t.getLinkType() == LayoutTurnout.THROAT_TO_THROAT) {    if ((t.getSignalB1Name() != null) && (!t.getSignalB1Name().equals("")) && (t.getSignalC1Name() != null)&& (!t.getSignalC1Name().equals(""))) {      return true;    } else {      return false;    }  }  return false;}  }
class C{  public static void sensitiveDebug(Player player,String msg,boolean interactiveAsWell){  debug(player,msg,interactiveAsWell);}  }
class C{  public Variable find(String name) throws IllegalArgumentException {  validateIsNotKeyword(name);  for (NameScope n=this; n != null; n=n.outerScope)   if (n.namedVariables.containsKey(name))   return (Variable)n.namedVariables.get(name);  Variable value=new Variable(name);  this.namedVariables.put(name,value);  return value;}  }
class C{  public static SVGPath drawVoronoi(Projection2D proj,List<SweepHullDelaunay2D.Triangle> delaunay,List<double[]> means){  final SVGPath path=new SVGPath();  CanvasSize viewport=proj.estimateViewport();  for (int i=0; i < delaunay.size(); i++) {    SweepHullDelaunay2D.Triangle del=delaunay.get(i);    final double[] projcx=proj.fastProjectDataToRenderSpace(del.m);    if (del.ab > i) {      Triangle oth=delaunay.get(del.ab);      path.moveTo(projcx);      path.drawTo(proj.fastProjectDataToRenderSpace(oth.m));    } else     if (del.ab < 0) {      double[] dirv=VMath.minus(means.get(del.a),means.get(del.b));      VMath.rotate90Equals(dirv);      double[] dir=proj.fastProjectRelativeDataToRenderSpace(dirv);      final double factor=viewport.continueToMargin(projcx,dir);      if (factor > 0) {        path.moveTo(projcx);        path.relativeLineTo(factor * dir[0],factor * dir[1]);      }    }    if (del.bc > i) {      Triangle oth=delaunay.get(del.bc);      path.moveTo(projcx);      path.drawTo(proj.fastProjectDataToRenderSpace(oth.m));    } else     if (del.bc < 0) {      double[] dirv=VMath.minus(means.get(del.b),means.get(del.c));      VMath.rotate90Equals(dirv);      double[] dir=proj.fastProjectRelativeDataToRenderSpace(dirv);      final double factor=viewport.continueToMargin(projcx,dir);      if (factor > 0) {        path.moveTo(projcx);        path.relativeLineTo(factor * dir[0],factor * dir[1]);      }    }    if (del.ca > i) {      Triangle oth=delaunay.get(del.ca);      path.moveTo(projcx);      path.drawTo(proj.fastProjectDataToRenderSpace(oth.m));    } else     if (del.ca < 0) {      double[] dirv=VMath.minus(means.get(del.c),means.get(del.a));      VMath.rotate90Equals(dirv);      double[] dir=proj.fastProjectRelativeDataToRenderSpace(dirv);      final double factor=viewport.continueToMargin(projcx,dir);      if (factor > 0) {        path.moveTo(projcx);        path.relativeLineTo(factor * dir[0],factor * dir[1]);      }    }  }  return path;}  }
class C{  public static void main(final String[] args) throws Exception {  Integer branchingFactorOverride=null;  boolean verify=false;  File journalFile=null;  final List<String> names=new LinkedList<String>();  File outDir=new File(".");  boolean compactingMerge=true;  boolean bufferNodes=true;  BuildEnum buildEnum=BuildEnum.TwoPass;  final File tmpDir=new File(System.getProperty("java.io.tmpdir"));  if (!tmpDir.exists() && !tmpDir.mkdir()) {    throw new IOException("Temporary directory does not exist / can not be created: " + tmpDir);  }{    int i=0;    for (; i < args.length && args[i].startsWith("-"); i++) {      final String arg=args[i];      if (arg.equals("-m")) {        branchingFactorOverride=Integer.valueOf(args[++i]);      } else       if (arg.equals("-O")) {        outDir=new File(args[++i]);      } else       if (arg.equals("-verify")) {        verify=true;      } else       if (arg.equals("-merge")) {        compactingMerge=true;      } else       if (arg.equals("-build")) {        compactingMerge=false;      } else       if (arg.equals("-bufferNodes")) {        bufferNodes=Boolean.valueOf(args[++i]);      } else       if (arg.equals("-alg")) {        buildEnum=BuildEnum.valueOf(args[++i]);      } else       if (arg.equals("-help") || arg.equals("--?")) {        usage(args,null,1);      } else {        throw new UnsupportedOperationException("Unknown option: " + arg);      }    }    if (i == args.length) {      usage(args,"journal name is required.",1);    }    journalFile=new File(args[i++]);    if (!journalFile.exists()) {      throw new FileNotFoundException(journalFile.toString());    }    while (i < args.length) {      names.add(args[i++]);    }    if (journalFile == null) {      throw new RuntimeException("The journal file was not specified.");    }    if (names == null) {      throw new RuntimeException("The index name was not specified.");    }    if (!outDir.exists() && !outDir.mkdirs()) {      throw new IOException("Output directory does not exist and could not be created: " + outDir);    }  }  final Journal journal;{    final Properties properties=new Properties();    properties.setProperty(Journal.Options.FILE,journalFile.toString());    properties.setProperty(Journal.Options.READ_ONLY,Boolean.TRUE.toString());    journal=new Journal(properties);  }  try {    if (names.isEmpty()) {      final ITupleIterator<Name2Addr.Entry> itr=journal.getName2Addr().rangeIterator();      while (itr.hasNext()) {        names.add(itr.next().getObject().name);      }    } else {      for (      String name : names) {        if (journal.getIndex(name) == null) {          throw new RuntimeException("Index not found: " + name);        }        final File outFile=new File(outDir,name + Journal.Options.SEG);        if (outFile.exists() && outFile.length() != 0) {          throw new RuntimeException("Output file exists and is non-empty: " + outFile);        }      }    }    System.out.println("Will process " + names.size() + " indices.");    final long beginAll=System.currentTimeMillis();    for (    String name : names) {      final BTree btree=journal.getIndex(name);      final File outFile=new File(outDir,name + Journal.Options.SEG);      final int m=branchingFactorOverride == null ? btree.getIndexMetadata().getIndexSegmentBranchingFactor() : branchingFactorOverride.intValue();      final long begin=System.currentTimeMillis();      final long commitTime=btree.getLastCommitTime();      System.out.println("Building index segment: in(m=" + btree.getBranchingFactor() + ", rangeCount="+ btree.rangeCount()+ "), out(m="+ m+ "), alg="+ buildEnum);      final IndexSegmentBuilder builder;switch (buildEnum) {case TwoPass:        builder=IndexSegmentBuilder.newInstanceTwoPass(btree,outFile,tmpDir,m,compactingMerge,commitTime,null,null,bufferNodes);      break;case FullyBuffered:    builder=IndexSegmentBuilder.newInstanceFullyBuffered(btree,outFile,tmpDir,m,compactingMerge,commitTime,null,null,bufferNodes);  break;default :throw new AssertionError(buildEnum.toString());}final IndexSegmentCheckpoint checkpoint=builder.call();final long elapsed=System.currentTimeMillis() - begin;final String results="name=" + name + " : elapsed="+ elapsed+ "ms, setup="+ builder.elapsed_setup+ "ms, write="+ builder.elapsed_write+ "ms, m="+ builder.plan.m+ ", size="+ (builder.outFile.length() / Bytes.megabyte)+ "mb, mb/sec="+ builder.mbPerSec;System.out.println(results);if (verify) {final IndexSegmentStore segStore=new IndexSegmentStore(outFile);try {final IndexSegment seg=segStore.loadIndexSegment();try {  System.out.println("Verifying index segment: " + builder.outFile);  assertSameEntryIterator(name,btree.rangeIterator(),seg.rangeIterator());}  finally {  seg.close();}}  finally {segStore.close();}}}final long elapsedAll=System.currentTimeMillis() - beginAll;System.out.println("Processed " + names.size() + " indices in "+ elapsedAll+ "ms");}  finally {journal.close();}}  }
class C{  public EMailProcessor(String host,String user,String password){  m_host=host;  m_user=user;  m_pass=password;}  }
class C{  public static double nextErlang(double variance,double mean,RandomEngine randomGenerator){  int k=(int)((mean * mean) / variance + 0.5);  k=(k > 0) ? k : 1;  double a=k / mean;  double prod=1.0;  for (int i=0; i < k; i++)   prod*=randomGenerator.raw();  return -Math.log(prod) / a;}  }
class C{  public static void clearLocalConfigs(){  _ldmlconf.remove();  _lcconf.remove();}  }
class C{  public GraphicsNode nodeHitAt(Point2D p){  return (contains(p) ? this : null);}  }
class C{  public boolean isEmpty(){  return unassigned.isEmpty();}  }
class C{  public static byte[] stringToGsm7BitPacked(String data,int startingSeptetOffset,boolean throwException,int languageTable,int languageShiftTable) throws EncodeException {  int dataLen=data.length();  int septetCount=countGsmSeptetsUsingTables(data,!throwException,languageTable,languageShiftTable);  if (septetCount == -1) {    throw new EncodeException("countGsmSeptetsUsingTables(): unencodable char");  }  septetCount+=startingSeptetOffset;  if (septetCount > 255) {    throw new EncodeException("Payload cannot exceed 255 septets");  }  int byteCount=((septetCount * 7) + 7) / 8;  byte[] ret=new byte[byteCount + 1];  SparseIntArray charToLanguageTable=sCharsToGsmTables[languageTable];  SparseIntArray charToShiftTable=sCharsToShiftTables[languageShiftTable];  for (int i=0, septets=startingSeptetOffset, bitOffset=startingSeptetOffset * 7; i < dataLen && septets < septetCount; i++, bitOffset+=7) {    char c=data.charAt(i);    int v=charToLanguageTable.get(c,-1);    if (v == -1) {      v=charToShiftTable.get(c,-1);      if (v == -1) {        if (throwException) {          throw new EncodeException("stringToGsm7BitPacked(): unencodable char");        } else {          v=charToLanguageTable.get(' ',' ');        }      } else {        packSmsChar(ret,bitOffset,GSM_EXTENDED_ESCAPE);        bitOffset+=7;        septets++;      }    }    packSmsChar(ret,bitOffset,v);    septets++;  }  ret[0]=(byte)(septetCount);  return ret;}  }
class C{  public boolean contains(Point2D p){  return x.contains(p.x()) && y.contains(p.y());}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getIsSorted_();}  }
class C{  public JavaCompletionProposal(String replacementString,int replacementOffset,int replacementLength,Image image,StyledString displayString,int relevance,boolean inJavadoc){  this(replacementString,replacementOffset,replacementLength,image,displayString,relevance,inJavadoc,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:10.013 -0400",hash_original_method="F5A89712FE44235FF309DF1D852A3C79",hash_generated_method="F881B3B6D3C6920B6F8E4CF715190243") private FilePreferencesImpl(AbstractPreferences parent,String name){  super(parent,name);  path=((FilePreferencesImpl)parent).path + File.separator + name;  initPrefs();}  }
class C{  public void onCreate(View v,Context context,AttributeSet attrs,int defStyleAttr,int defStyleRes){  if (v.isInEditMode())   return;  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.RippleView,defStyleAttr,defStyleRes);  int rippleStyle=a.getResourceId(R.styleable.RippleView_rd_style,0);  RippleDrawable drawable=null;  if (rippleStyle != 0)   drawable=new RippleDrawable.Builder(context,rippleStyle).backgroundDrawable(getBackground(v)).build(); else {    boolean rippleEnable=a.getBoolean(R.styleable.RippleView_rd_enable,false);    if (rippleEnable)     drawable=new RippleDrawable.Builder(context,attrs,defStyleAttr,defStyleRes).backgroundDrawable(getBackground(v)).build();  }  a.recycle();  if (drawable != null)   ViewUtil.setBackground(v,drawable);}  }
class C{  public static double[] add(double[] vec1,double[] vec2){  int m=vec1.length;  double[] res=new double[m];  for (int i=0; i < m; ++i) {    res[i]=vec1[i] + vec2[i];  }  return (res);}  }
class C{  public IScheduleContext buildContext(){  topologies=listToMap(client.listTopologies());  kafkaSources=listToMap(client.listDataSources());  List<PolicyDefinition> enabledPolicies=client.listPolicies().stream().filter(null).collect(Collectors.toList());  policies=listToMap(enabledPolicies);  publishments=listToMap(client.listPublishment());  streamDefinitions=listToMap(client.listStreams());  new NodataMetadataGenerator().execute(config,streamDefinitions,kafkaSources,policies,publishments);  ScheduleState state=client.getVersionedSpec();  assignments=listToMap(state == null ? new ArrayList<PolicyAssignment>() : detectAssignmentsChange(state.getAssignments(),state));  monitoredStreamMap=listToMap(state == null ? new ArrayList<MonitoredStream>() : detectMonitoredStreams(state.getMonitoredStreams()));  usages=buildTopologyUsage();  builtContext=new InMemScheduleConext(topologies,assignments,kafkaSources,policies,publishments,streamDefinitions,monitoredStreamMap,usages);  return builtContext;}  }
class C{  public static void xmlConversionTypeIncorrect(String conversionName,String xmlPath,String className,String type){  throw new XmlConversionTypeException(MSG.INSTANCE.message(xmlConversionTypeException,conversionName,xmlPath,className,type));}  }
class C{  private int abortWait(int phase){  AtomicReference<QNode> head=(phase & 1) == 0 ? evenQ : oddQ;  for (; ; ) {    Thread t;    QNode q=head.get();    int p=(int)(root.state >>> PHASE_SHIFT);    if (q == null || ((t=q.thread) != null && q.phase == p))     return p;    if (head.compareAndSet(q,q.next) && t != null) {      q.thread=null;      LockSupport.unpark(t);    }  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public ApplyMaskFilter(){}  }
class C{  public static Border createEtchedRaised(int highlight,int shadow){  Border b=new Border();  b.type=TYPE_ETCHED_RAISED;  b.themeColors=false;  b.colorA=highlight;  b.colorB=shadow;  b.thickness=2;  return b;}  }
class C{  int big5_probability(byte[] rawtext){  int i, rawtextlen=0;  int dbchars=1, bfchars=1;  float rangeval=0, freqval=0;  long bffreq=0, totalfreq=1;  int row, column;  rawtextlen=rawtext.length;  for (i=0; i < rawtextlen - 1; i++) {    if (rawtext[i] >= 0) {    } else {      dbchars++;      if ((byte)0xA1 <= rawtext[i] && rawtext[i] <= (byte)0xF9 && (((byte)0x40 <= rawtext[i + 1] && rawtext[i + 1] <= (byte)0x7E) || ((byte)0xA1 <= rawtext[i + 1] && rawtext[i + 1] <= (byte)0xFE))) {        bfchars++;        totalfreq+=500;        row=rawtext[i] + 256 - 0xA1;        if (0x40 <= rawtext[i + 1] && rawtext[i + 1] <= 0x7E) {          column=rawtext[i + 1] - 0x40;        } else {          column=rawtext[i + 1] + 256 - 0x61;        }        if (Big5Freq[row][column] != 0) {          bffreq+=Big5Freq[row][column];        } else         if (3 <= row && row <= 37) {          bffreq+=200;        }      }      i++;    }  }  rangeval=50 * ((float)bfchars / (float)dbchars);  freqval=50 * ((float)bffreq / (float)totalfreq);  return (int)(rangeval + freqval);}  }
class C{  public static TextHitInfo leading(int charIndex){  return new TextHitInfo(charIndex,true);}  }
class C{  public KafkaConsumer(MessageDeserializer<T> deserializer,KafkaStream<String,String> stream,int consumerId,ConsumerConnector consumerConnector,boolean autoCommitEnabled){  super(deserializer);  this.consumerConnector=consumerConnector;  this.lastSeenOffset=0;  this.iterator=stream.iterator();  this.consumerId=consumerId;  this.autoCommitEnabled=autoCommitEnabled;}  }
class C{  public boolean addServer(String host,int port,HeartBeater heartBeater,int consecutiveFailures,int consecutiveSuccesses,int pingIntervalSecs,boolean isHealthyInitially){  String serverName=getServerName(host,port);  lock.writeLock().lock();  try {    if (serverTrackerMap.containsKey(serverName)) {      LOG.warn(String.format("Server %s already exists in health check list. Ignore.",serverName));      return false;    }    ServerTracker serverTracker=new ServerTracker(host,port,heartBeater,consecutiveFailures,consecutiveSuccesses,pingIntervalSecs,isHealthyInitially);    serverTrackerMap.put(serverName,serverTracker);    if (pingIntervalSecs > 0) {      ScheduledFuture<?> scheduledFuture=scheduledExecutorService.scheduleWithFixedDelay(new HealthCheckRunnable(serverName),pingIntervalSecs + RANDOM.nextInt(pingIntervalSecs),pingIntervalSecs,TimeUnit.SECONDS);      scheduledFutureMap.put(serverName,scheduledFuture);    }  }  finally {    lock.writeLock().unlock();  }  return true;}  }
class C{  @Override protected char[] escape(int cp){  if (cp < safeOctets.length && safeOctets[cp]) {    return null;  } else   if (cp == ' ' && plusForSpace) {    return URI_ESCAPED_SPACE;  } else   if (cp <= 0x7F) {    char[] dest=new char[3];    dest[0]='%';    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];    dest[1]=UPPER_HEX_DIGITS[cp >>> 4];    return dest;  } else   if (cp <= 0x7ff) {    char[] dest=new char[6];    dest[0]='%';    dest[3]='%';    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[1]=UPPER_HEX_DIGITS[0xC | cp];    return dest;  } else   if (cp <= 0xffff) {    char[] dest=new char[9];    dest[0]='%';    dest[1]='E';    dest[3]='%';    dest[6]='%';    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp];    return dest;  } else   if (cp <= 0x10ffff) {    char[] dest=new char[12];    dest[0]='%';    dest[1]='F';    dest[3]='%';    dest[6]='%';    dest[9]='%';    dest[11]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[10]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp & 0x7];    return dest;  } else {    throw new IllegalArgumentException("Invalid unicode character value " + cp);  }}  }
class C{  protected void startupWithAdditionalTransaction(final int transactionManagerCalls) throws Exception {  mockConfiguration(2);  mockStore();  final HGTransactionManager transactionManager=new HGTransactionManager(storage.getTransactionFactory());  EasyMock.expect(store.getTransactionManager()).andReturn(transactionManager).times(transactionManagerCalls);  replay();  storage.startup(store,configuration);  transactionManager.beginTransaction();}  }
class C{  @Override public void registerIndex(IndexMetadata indexMetadata){  throw new UnsupportedOperationException();}  }
class C{  Builder addEncodedQueryParameter(String encodedName,String encodedValue){  if (encodedName == null)   throw new IllegalArgumentException("encodedName == null");  if (encodedQueryNamesAndValues == null)   encodedQueryNamesAndValues=new ArrayList<>();  encodedQueryNamesAndValues.add(canonicalize(encodedName,QUERY_COMPONENT_ENCODE_SET,true,true));  encodedQueryNamesAndValues.add(encodedValue != null ? canonicalize(encodedValue,QUERY_COMPONENT_ENCODE_SET,true,true) : null);  return this;}  }
class C{  public ObjectIdentifier(String strOid){  this.oid=toIntArray(strOid);  this.soid=strOid;}  }
class C{  public static <S extends HasDragResizeStartHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    DragResizeStartEvent event=new DragResizeStartEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().faster();  return null;}  }
class C{  private void createDriverTask(List<VolumeSnapshot> snapshots){  String taskId=String.format("%s+%s+%s",StorageDriverSimulator.DRIVER_NAME,OP_NAME,UUID.randomUUID().toString());  _log.info("Creating task {} for operation of type {}",taskId,OP_NAME);  _task=new RestoreFromSnapshotDriverTask(taskId,snapshots);  _task.setStatus(DriverTask.TaskStatus.PROVISIONING);}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  HistoryEntityDao.createTable(db,ifNotExists);}  }
class C{  public static void shuffle(int[] a){  int N=a.length;  for (int i=0; i < N; i++) {    int r=i + uniform(N - i);    int temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  protected MicrosecondsOption(OptionSet set,String name,String desc,int defaultUs){  super(set,MICROSECONDS_OPTION,name,desc);  this.value=this.defaultValue=defaultUs;}  }
class C{  public void testField(){  checkDHPublicKey key=new checkDHPublicKey();  assertEquals("Incorrect serialVersionUID",key.getSerVerUID(),-6628103563352519193L);}  }
class C{  private VisorQueryNextPageJob(IgniteBiTuple<String,Integer> arg,boolean debug){  super(arg,debug);}  }
class C{  static void close(Closeable closeable){  try {    if (closeable != null) {      closeable.close();    }  } catch (  IOException e) {    LOGGER.logError(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.ERROR);  }}  }
class C{  public Measurement convert(Reading r,Point3d guess){  this.x=guess.x;  this.y=guess.y;  this.z=guess.z;  return convert(r);}  }
class C{  public boolean isAssociative(){  for (  MeasureMapping mp : mapper.getMeasureMapping()) {    if (!mp.getMapping().isAssociative()) {      return false;    }  }  return true;}  }
class C{  private static void filterRefactoringDescriptors(final RefactoringDescriptorProxy[] proxies,final Set set,final boolean resolve,final int flags,final IProgressMonitor monitor){  Assert.isTrue(flags > RefactoringDescriptor.NONE);  try {    monitor.beginTask(RefactoringCoreMessages.RefactoringHistoryService_retrieving_history,proxies.length);    for (int offset=0; offset < proxies.length; offset++) {      final RefactoringDescriptor descriptor=proxies[offset].requestDescriptor(new SubProgressMonitor(monitor,1));      if (descriptor != null) {        final int filter=descriptor.getFlags();        if ((filter | flags) == filter) {          if (resolve)           set.add(new RefactoringDescriptorProxyAdapter(descriptor)); else           set.add(proxies[offset]);        }      }    }  }  finally {    monitor.done();  }}  }
class C{  public boolean forEachEntry(TFloatIntProcedure procedure){  byte[] states=_states;  float[] keys=_set;  int[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  public Builder addPart(Part part){  if (part == null)   throw new NullPointerException("part == null");  parts.add(part);  return this;}  }
class C{  protected <X>X fromBytes(byte[] bytes) throws IgniteCheckedException {  if (bytes == null || bytes.length == 0)   return null;  return marsh.unmarshal(bytes,getClass().getClassLoader());}  }
class C{  JavaFileObject printSource(Env<AttrContext> env,JCClassDecl cdef) throws IOException {  JavaFileObject outFile=fileManager.getJavaFileForOutput(CLASS_OUTPUT,cdef.sym.flatname.toString(),JavaFileObject.Kind.SOURCE,null);  if (inputFiles.contains(outFile)) {    log.error(cdef.pos(),"source.cant.overwrite.input.file",outFile);    return null;  } else {    BufferedWriter out=new BufferedWriter(outFile.openWriter());    try {      new Pretty(out,true).printUnit(env.toplevel,cdef);      if (verbose)       log.printVerbose("wrote.file",outFile);    }  finally {      out.close();    }    return outFile;  }}  }
class C{  public void removeSessionCache(String tenantName) throws AuthenticationException {  Validate.notEmpty(tenantName);  logger.debug("Removing RSA session cache ... tenant: " + tenantName);  ConcurrentHashMap<String,AuthenticationSession> sessionCache=_rsaSessionCacheLookup.get(tenantName.toLowerCase());  if (sessionCache == null) {    logger.debug("No RSA session cache found ... tenant: " + tenantName);    return;  } else {    Iterator<Entry<String,AuthenticationSession>> it=sessionCache.entrySet().iterator();    while (it.hasNext()) {      it.next().getValue().closeSession();    }  }  _rsaSessionCacheLookup.remove(tenantName.toLowerCase());  logger.debug("RSA session cache removed");}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("FileUpload[");  if (m_fileName != null)   sb.append(m_fileName);  if (m_error != null)   sb.append(";Error=").append(m_error);  if (m_data != null)   sb.append(";Length=").append(m_data.length);  sb.append("]");  return sb.toString();}  }
class C{  public int next(){  int node=_currentNode;  final int nodeType=_nodeType;  if (nodeType >= DTM.NTYPES) {    while (true) {      node++;      if (_sp < 0) {        node=NULL;        break;      } else       if (node >= _stack[_sp]) {        if (--_sp < 0) {          node=NULL;          break;        }      } else       if (_exptype2(node) == nodeType) {        break;      }    }  } else {    int expType;    while (true) {      node++;      if (_sp < 0) {        node=NULL;        break;      } else       if (node >= _stack[_sp]) {        if (--_sp < 0) {          node=NULL;          break;        }      } else {        expType=_exptype2(node);        if (expType < DTM.NTYPES) {          if (expType == nodeType) {            break;          }        } else {          if (m_extendedTypes[expType].getNodeType() == nodeType) {            break;          }        }      }    }  }  _currentNode=node;  return (node == NULL) ? NULL : returnNode(makeNodeHandle(node));}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_derivedAttribute_3_();}  }
class C{  @Override public Object clone(){  try {    IdentityHashMap<K,V> cloneHashMap=(IdentityHashMap<K,V>)super.clone();    cloneHashMap.elementData=newElementArray(elementData.length);    System.arraycopy(elementData,0,cloneHashMap.elementData,0,elementData.length);    return cloneHashMap;  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }}  }
class C{  public void paintMenuBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  void quickRemove(int i){  assert i <= size;  queue[i]=queue[size];  queue[size--]=null;}  }
class C{  public TransportAddress address(){  return address;}  }
class C{  public RC2ParameterSpec(int effectiveKeyBits,byte[] iv){  this(effectiveKeyBits,iv,0);}  }
class C{  public static String copyToString(Reader in) throws IOException {  StringWriter out=new StringWriter();  copy(in,out);  return out.toString();}  }
class C{  public void initMatchPattern(Compiler compiler,String expression,PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException {  m_ops=compiler;  m_namespaceContext=namespaceContext;  m_functionTable=compiler.getFunctionTable();  Lexer lexer=new Lexer(compiler,namespaceContext,this);  lexer.tokenize(expression);  m_ops.setOp(0,OpCodes.OP_MATCHPATTERN);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,2);  nextToken();  Pattern();  if (null != m_token) {    String extraTokens="";    while (null != m_token) {      extraTokens+="'" + m_token + "'";      nextToken();      if (null != m_token)       extraTokens+=", ";    }    error(XPATHErrorResources.ER_EXTRA_ILLEGAL_TOKENS,new Object[]{extraTokens});  }  m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.ENDOP);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);  m_ops.shrink();}  }
class C{  void initInputFrame(final ClassWriter cw,final int access,final Type[] args,final int maxLocals){  inputLocals=new int[maxLocals];  inputStack=new int[0];  int i=0;  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & MethodWriter.ACC_CONSTRUCTOR) == 0) {      inputLocals[i++]=OBJECT | cw.addType(cw.thisName);    } else {      inputLocals[i++]=UNINITIALIZED_THIS;    }  }  for (int j=0; j < args.length; ++j) {    int t=type(cw,args[j].getDescriptor());    inputLocals[i++]=t;    if (t == LONG || t == DOUBLE) {      inputLocals[i++]=TOP;    }  }  while (i < maxLocals) {    inputLocals[i++]=TOP;  }}  }
class C{  @Bean public Repository<Account> eventSourcingRepository(){  EventSourcingRepository eventSourcingRepository=new EventSourcingRepository(Account.class,jdbcEventStore());  eventSourcingRepository.setEventBus(clusteringEventBus());  return eventSourcingRepository;}  }
class C{  public WEMailDialog(Window owner,String title,MUser from,String to,String subject,String message,File attachment){  super();  this.setTitle(title);  this.setWidth("500px");  this.setHeight("500px");  this.setClosable(true);  this.setBorder("normal");  this.setStyle("position:absolute");  commonInit(from,to,subject,message,attachment);}  }
class C{  @Override public String toString(){  return "{" + getClass().getSimpleName() + " oport="+ oport+ " vertex="+ vertex+ " state="+ state+ "}";}  }
class C{  private boolean greater(Key n,Key m){  if (n == null)   return false;  if (m == null)   return true;  return comparator.compare(n,m) > 0;}  }
class C{  public SearchResult(final Object object,final int line,final int index,final int length){  m_object=object;  m_line=line;  m_index=index;  m_length=length;}  }
class C{  private static void resolveTableContent(LayoutContext c,BlockBox parent,List children,ChildBoxInfo info){  IdentValue parentDisplay=parent.getStyle().getIdent(CSSName.DISPLAY);  IdentValue next=getNextTableNestingLevel(parentDisplay);  if (next == null && parent.isAnonymous() && containsOrphanedTableContent(children)) {    resolveChildTableContent(c,parent,children,info,IdentValue.TABLE_CELL);  } else   if (next == null || isAllProperTableNesting(parentDisplay,children)) {    if (parent.isAnonymous()) {      rebalanceInlineContent(children);    }    resolveChildren(c,parent,children,info);  } else {    List childrenForAnonymous=new ArrayList();    List childrenWithAnonymous=new ArrayList();    for (Iterator i=children.iterator(); i.hasNext(); ) {      Styleable child=(Styleable)i.next();      IdentValue childDisplay=child.getStyle().getIdent(CSSName.DISPLAY);      if (isProperTableNesting(parentDisplay,childDisplay)) {        if (childrenForAnonymous.size() > 0) {          createAnonymousTableContent(c,parent,next,childrenForAnonymous,childrenWithAnonymous);          childrenForAnonymous=new ArrayList();        }        childrenWithAnonymous.add(child);      } else {        childrenForAnonymous.add(child);      }    }    if (childrenForAnonymous.size() > 0) {      createAnonymousTableContent(c,parent,next,childrenForAnonymous,childrenWithAnonymous);    }    info.setContainsBlockLevelContent(true);    resolveChildren(c,parent,childrenWithAnonymous,info);  }}  }
class C{  private void deleteDbLog4JConfiguration(String configEntityKey) throws SQLException {  if (configEntityKey != null) {    String sql=String.format("DELETE FROM %s WHERE %s = ?",ConfigurationEntity.TABLE_NAME,ConfigurationEntity.COLUMN_KEY);    executePreparedStatement(sql,configEntityKey);  }}  }
class C{  @Provides @Config("transactionCooldown") public static Duration provideTransactionCooldown(){  return Duration.standardMinutes(5);}  }
class C{  <T extends JCTree>void attribStats(List<T> trees,Env<AttrContext> env){  for (List<T> l=trees; l.nonEmpty(); l=l.tail)   attribStat(l.head,env);}  }
class C{  public void load() throws CouldntLoadDataException {  if (isLoaded()) {    return;  }  try {    m_module.load();  } catch (  com.google.security.zynamics.binnavi.Database.Exceptions.CouldntLoadDataException|LoadCancelledException e) {    throw new CouldntLoadDataException(e);  }}  }
class C{  public static boolean lazyGaussianElimination(final int var2Eq[][],final int c[],final int[] variable,final long[] solution){  return lazyGaussianElimination(null,var2Eq,c,variable,solution);}  }
class C{  public void notifyDataSetInvalidated(){  mDataSetObservable.notifyInvalidated();}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener l){  if (listeners == null) {    return;  }  if (listeners.contains(l)) {    listeners.remove(l);  }}  }
class C{  public ConfigException(){}  }
class C{  public static Iterator<?> iterator(final Object focus,final int rangeStyle){  if (focus == null) {    throw new IllegalArgumentException("The date must not be null");  }  if (focus instanceof Date) {    return iterator((Date)focus,rangeStyle);  } else   if (focus instanceof Calendar) {    return iterator((Calendar)focus,rangeStyle);  } else {    throw new ClassCastException("Could not iterate based on " + focus);  }}  }
class C{  private boolean isWrongInstance(){  if (!isTaskRoot()) {    Intent intent=getIntent();    boolean isMainAction=intent.getAction() != null && intent.getAction().equals(ACTION_MAIN);    return intent.hasCategory(CATEGORY_LAUNCHER) && isMainAction;  }  return false;}  }
class C{  K highestKey(){  Comparator<? super K> cmp=m.comparator;  ConcurrentSkipListMap.Node<K,V> n=hiNode(cmp);  if (n != null) {    K last=n.key;    if (inBounds(last,cmp))     return last;  }  throw new NoSuchElementException();}  }
class C{  public static float function1(float x){  return x * x * x* x* x* x - 2 * x * x* x* x + x * x;}  }
class C{  public Bundler putShortArray(String key,short[] value){  bundle.putShortArray(key,value);  return this;}  }
class C{  public byte[] receive(){  return null;}  }
class C{  public URI(URI p_other){  initialize(p_other);}  }
class C{  @Override public void storeMyIdentity(AbstractIdentity id){  reloadSettings();  Statement statement;  try {    connection=DriverManager.getConnection(IDENTITYDB_CONNECT_STRING);  } catch (  SQLException e) {    logger.error("IdentityManager: Failure to open db connection",e);  }  int storedIdentityID=id.getID();  String sql="";  if (storedIdentityID > 0) {    sql="update " + TABLE_IDENTITY + " set name=(?), firstname=(?), email=(?), keystorePath=(?) where id=(?)";  } else {    sql="insert into " + TABLE_IDENTITY + " VALUES (NULL, (?), (?), (?), (?))";  }  PreparedStatement pStatement;  try {    pStatement=connection.prepareStatement(sql);    pStatement.setString(1,id.getName());    pStatement.setString(2,id.getFirstName());    pStatement.setString(3,id.getEmail());    pStatement.setString(4,KEYSTORE_PATH);    if (storedIdentityID > 0) {      pStatement.setInt(5,storedIdentityID);    }    pStatement.executeUpdate();    if (storedIdentityID < 0) {      ResultSet keys=pStatement.getGeneratedKeys();      storedIdentityID=keys.getInt("last_insert_rowid()");      id.setID(storedIdentityID);    }    statement=connection.createStatement();    statement.setQueryTimeout(30);    String sqlListCPIs="select * from " + TABLE_CLOUDPROVIDER + ", "+ TABLE_CLOUDPROVIDER_MAP+ " where "+ TABLE_CLOUDPROVIDER+ ".id="+ TABLE_CLOUDPROVIDER_MAP+ ".cloudProviderID and "+ TABLE_CLOUDPROVIDER_MAP+ ".identityID="+ storedIdentityID;    for (    CloudProviderInfo cp : id.getCloudProviders().values()) {      if (cp.getId() > 0) {        String upCPI="update " + TABLE_CLOUDPROVIDER + " set name=(?), username=(?) where id=(?)";        PreparedStatement ps=connection.prepareStatement(upCPI);        ps.setString(1,cp.getProviderName());        ps.setString(2,cp.getUsername());        ps.setInt(3,cp.getId());        ps.execute();      } else {        statement.executeUpdate("insert into " + TABLE_CLOUDPROVIDER + " VALUES(NULL, \""+ cp.getProviderName()+ "\", \""+ cp.getUsername()+ "\", NULL"+ ")");        ResultSet keys=statement.getGeneratedKeys();        int cpID=keys.getInt("last_insert_rowid()");        cp.setId(cpID);        statement.executeUpdate("insert into " + TABLE_CLOUDPROVIDER_MAP + " VALUES(\""+ storedIdentityID+ "\", \""+ cpID+ "\")");      }    }    ResultSet r=statement.executeQuery(sqlListCPIs);    LinkedList<Integer> toBeRemoved=new LinkedList<Integer>();    while (r.next()) {      boolean found=false;      int cId=r.getInt("id");      for (      CloudProviderInfo cpi : id.getCloudProviders().values()) {        if (cpi.getId() == cId) {          found=true;          break;        }      }      if (!found) {        toBeRemoved.add(cId);      }    }    for (    Integer cId : toBeRemoved) {      String sqlDel="delete from " + TABLE_CLOUDPROVIDER + " where id="+ cId;      statement.execute(sqlDel);      sqlDel="delete from " + TABLE_CLOUDPROVIDER_MAP + " where cloudProviderID="+ cId+ " and identityID="+ storedIdentityID;      statement.execute(sqlDel);    }  } catch (  SQLException e) {    logger.error("IdentityManager: SQL error while storing the identity",e);  } finally {    if (connection != null) {      try {        connection.close();      } catch (      SQLException e) {        logger.error("IdentityManager: Failure to close db connection while storing the identity",e);      }    }  }  if (null != getAddressBookManager()) {    getAddressBookManager().persistContacts(id.getAddressbook().getContacts(),storedIdentityID);  } else {    System.err.println("IdentityManager: No AddressbookManager set");  }  File keyStoreFile=new File(KEYSTORE_PATH);  FileOutputStream fos;  try {    fos=new FileOutputStream(keyStoreFile);    Identity idCast=(Identity)id;    idCast.getKeyStore().store(fos,KeyConstants.OPEN_KEYSTORE_PASSWORD);    fos.close();  } catch (  KeyStoreException|NoSuchAlgorithmException|CertificateException|IOException e) {    logger.error("IdentityManager: Failure to write keystore",e);  }}  }
class C{  public boolean isMergeAdjacentText(){  return mergeAdjacentText;}  }
class C{  public SessionExpiresHeader createSessionExpiresHeader(int expires) throws InvalidArgumentException {  if (expires < 0)   throw new InvalidArgumentException("bad value " + expires);  SessionExpires s=new SessionExpires();  s.setExpires(expires);  return s;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public String nominalLabelsTipText(){  return "The list of value labels (nominal attribute creation only). " + " The list must be comma-separated, eg: \"red,green,blue\"." + " If this is empty, the created attribute will be numeric.";}  }
class C{  public ParameterTypeVariable2 makeDeclaredParameterTypeVariable(IMethodBinding methodBinding,int parameterIndex,ICompilationUnit cu){  if (methodBinding == null)   return null;  ParameterTypeVariable2 cv=makeParameterTypeVariable(methodBinding,parameterIndex);  if (cv == null)   return null;  cv.setCompilationUnit(cu);  return cv;}  }
class C{  public long mem(){  return this.chunkcache.length;}  }
class C{  public TransformerImpl(StylesheetRoot stylesheet){  m_optimizer=stylesheet.getOptimizer();  m_incremental=stylesheet.getIncremental();  m_source_location=stylesheet.getSource_location();  setStylesheet(stylesheet);  XPathContext xPath=new XPathContext(this);  xPath.setIncremental(m_incremental);  xPath.getDTMManager().setIncremental(m_incremental);  xPath.setSource_location(m_source_location);  xPath.getDTMManager().setSource_location(m_source_location);  if (stylesheet.isSecureProcessing())   xPath.setSecureProcessing(true);  setXPathContext(xPath);  getXPathContext().setNamespaceContext(stylesheet);}  }
class C{  public SpanQuery sor(SpanQuery s,SpanQuery e){  return spanOrQuery(s,e);}  }
class C{  private static void initRedMap(int alpha){  alpha<<=24;  for (int luma=0; luma <= 0xFF; luma++) {    for (int cr=0; cr <= 0xFF; cr++) {      int c=luma - 16;      int e=cr - 128;      int red=(298 * c + 409 * e + 128) >> 8;      red=clamp[red + CLAMP_BASE];      redMap[luma][cr]=alpha | red;    }  }}  }
class C{  public static <T extends ServiceDocument>void expireDocumentOnDelete(Service service,Class<T> serviceDocumentType,Operation deleteOperation){  ServiceUtils.logInfo(service,"Deleting Service %s",service.getSelfLink());  final ServiceDocument currentState=service.getState(deleteOperation);  if (currentState.documentExpirationTimeMicros <= 0) {    currentState.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(ServiceUtils.DEFAULT_ON_DELETE_DOC_EXPIRATION_TIME_MICROS);  }  if (deleteOperation.hasBody()) {    T deleteState=deleteOperation.getBody(serviceDocumentType);    if (deleteState.documentExpirationTimeMicros > 0) {      currentState.documentExpirationTimeMicros=deleteState.documentExpirationTimeMicros;    }  }  if (currentState.documentExpirationTimeMicros > 0) {    ServiceUtils.logInfo(service,"Expiring service %s at %d micros",service.getSelfLink(),currentState.documentExpirationTimeMicros);  }  service.setState(deleteOperation,currentState);  deleteOperation.complete();}  }
class C{  @Override protected void onSaveInstanceState(Bundle outState){  if (LOGV_ENABLED) {    Log.v(LOGTAG,"BrowserActivity.onSaveInstanceState: this=" + this);  }  mController.onSaveInstanceState(outState);}  }
class C{  public void throttleInit(int speed,int f0f4,int f5f8,int f9f12){  log.debug("Setting throttle initial values");  this.speedSetting=speed & 0x7f;  this.f0=(f0f4 & CbusConstants.CBUS_F0) == CbusConstants.CBUS_F0;  this.f1=(f0f4 & CbusConstants.CBUS_F1) == CbusConstants.CBUS_F1;  this.f2=(f0f4 & CbusConstants.CBUS_F2) == CbusConstants.CBUS_F2;  this.f3=(f0f4 & CbusConstants.CBUS_F3) == CbusConstants.CBUS_F3;  this.f4=(f0f4 & CbusConstants.CBUS_F4) == CbusConstants.CBUS_F4;  this.f5=(f5f8 & CbusConstants.CBUS_F5) == CbusConstants.CBUS_F5;  this.f6=(f5f8 & CbusConstants.CBUS_F6) == CbusConstants.CBUS_F6;  this.f7=(f5f8 & CbusConstants.CBUS_F7) == CbusConstants.CBUS_F7;  this.f8=(f5f8 & CbusConstants.CBUS_F8) == CbusConstants.CBUS_F8;  this.f9=(f9f12 & CbusConstants.CBUS_F9) == CbusConstants.CBUS_F9;  this.f10=(f9f12 & CbusConstants.CBUS_F10) == CbusConstants.CBUS_F10;  this.f11=(f9f12 & CbusConstants.CBUS_F11) == CbusConstants.CBUS_F11;  this.f12=(f9f12 & CbusConstants.CBUS_F12) == CbusConstants.CBUS_F12;  this.isForward=(speed & 0x80) == 0x80;}  }
class C{  @SuppressWarnings("unused") public static void run(RobotController rc){  Direction[] directions={Direction.NORTH,Direction.NORTH_EAST,Direction.EAST,Direction.SOUTH_EAST,Direction.SOUTH,Direction.SOUTH_WEST,Direction.WEST,Direction.NORTH_WEST};  RobotType[] robotTypes={RobotType.SCOUT,RobotType.SOLDIER,RobotType.SOLDIER,RobotType.SOLDIER,RobotType.GUARD,RobotType.GUARD,RobotType.VIPER,RobotType.TURRET};  Random rand=new Random(rc.getID());  int myAttackRange=0;  Team myTeam=rc.getTeam();  Team enemyTeam=myTeam.opponent();  if (rc.getType() == RobotType.ARCHON) {    try {    } catch (    Exception e) {      System.out.println(e.getMessage());      e.printStackTrace();    }    while (true) {      try {        int fate=rand.nextInt(1000);        if (fate % 10 == 2) {          rc.broadcastMessageSignal(6370,6147,80);        }        Signal[] signals=rc.emptySignalQueue();        if (signals.length > 0) {          rc.setIndicatorString(0,"I received a signal this turn!");        } else {          rc.setIndicatorString(0,"I don't any signal buddies");        }        if (rc.isCoreReady()) {          if (fate < 800) {            Direction dirToMove=directions[fate % 8];            if (rc.senseRubble(rc.getLocation().add(dirToMove)) >= GameConstants.RUBBLE_OBSTRUCTION_THRESH) {              rc.clearRubble(dirToMove);            } else             if (rc.canMove(dirToMove)) {              rc.move(dirToMove);            }          } else {            RobotType typeToBuild=robotTypes[fate % 8];            if (rc.hasBuildRequirements(typeToBuild)) {              Direction dirToBuild=directions[rand.nextInt(8)];              for (int i=0; i < 8; i++) {                if (rc.canBuild(dirToBuild,typeToBuild)) {                  rc.build(dirToBuild,typeToBuild);                  break;                } else {                  dirToBuild=dirToBuild.rotateLeft();                }              }            }          }        }        Clock.yield();      } catch (      Exception e) {        System.out.println(e.getMessage());        e.printStackTrace();      }    }  } else   if (rc.getType() != RobotType.TURRET) {    try {      myAttackRange=rc.getType().attackRadiusSquared;    } catch (    Exception e) {      System.out.println(e.getMessage());      e.printStackTrace();    }    while (true) {      try {        int fate=rand.nextInt(1000);        if (fate % 5 == 3) {          rc.broadcastSignal(80);        }        boolean shouldAttack=false;        if (myAttackRange > 0) {          RobotInfo[] enemiesWithinRange=rc.senseNearbyRobots(myAttackRange,enemyTeam);          RobotInfo[] zombiesWithinRange=rc.senseNearbyRobots(myAttackRange,Team.ZOMBIE);          if (enemiesWithinRange.length > 0) {            shouldAttack=true;            if (rc.isWeaponReady()) {              rc.attackLocation(enemiesWithinRange[rand.nextInt(enemiesWithinRange.length)].location);            }          } else           if (zombiesWithinRange.length > 0) {            shouldAttack=true;            if (rc.isWeaponReady()) {              rc.attackLocation(zombiesWithinRange[rand.nextInt(zombiesWithinRange.length)].location);            }          }        }        if (!shouldAttack) {          if (rc.isCoreReady()) {            if (fate < 600) {              Direction dirToMove=directions[fate % 8];              if (rc.senseRubble(rc.getLocation().add(dirToMove)) >= GameConstants.RUBBLE_OBSTRUCTION_THRESH) {                rc.clearRubble(dirToMove);              } else               if (rc.canMove(dirToMove)) {                rc.move(dirToMove);              }            }          }        }        Clock.yield();      } catch (      Exception e) {        System.out.println(e.getMessage());        e.printStackTrace();      }    }  } else   if (rc.getType() == RobotType.TURRET) {    try {      myAttackRange=rc.getType().attackRadiusSquared;    } catch (    Exception e) {      System.out.println(e.getMessage());      e.printStackTrace();    }    while (true) {      try {        if (rc.isWeaponReady()) {          RobotInfo[] enemiesWithinRange=rc.senseNearbyRobots(myAttackRange,enemyTeam);          RobotInfo[] zombiesWithinRange=rc.senseNearbyRobots(myAttackRange,Team.ZOMBIE);          if (enemiesWithinRange.length > 0) {            for (            RobotInfo enemy : enemiesWithinRange) {              if (rc.canAttackLocation(enemy.location)) {                rc.attackLocation(enemy.location);                break;              }            }          } else           if (zombiesWithinRange.length > 0) {            for (            RobotInfo zombie : zombiesWithinRange) {              if (rc.canAttackLocation(zombie.location)) {                rc.attackLocation(zombie.location);                break;              }            }          }        }        Clock.yield();      } catch (      Exception e) {        System.out.println(e.getMessage());        e.printStackTrace();      }    }  }}  }
class C{  public boolean cancelScan(){  return false;}  }
class C{  public SystemStreamPartition(SystemStreamPartition other){  this(other.getSystem(),other.getStream(),other.getPartition());}  }
class C{  public static void saveStringToPreference(Context context,String key,String value){  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(context);  if (null == value) {    pref.edit().remove(key).apply();  } else {    pref.edit().putString(key,value).apply();  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public TestCaseClassLoader(String classPath){  scanPath(classPath);  readExcludedPackages();}  }
class C{  public SettingsActionProvider(Context context){  super(context);  mContext=context;}  }
class C{  @Override public void onAction(final Player player,final RPAction action){  String actionStr=action.get("action");  String params=action.get("params");  if ((actionStr == null) || (params == null)) {    logger.warn("missing action attribute in RPAction " + action);    return;  }  new GameEvent(player.getName(),"group",params,actionStr).raise();  Player targetPlayer=null;  if (!actionStr.equals("lootmode") && !actionStr.equals("part") && !actionStr.equals("status")&& !actionStr.equals("kick")) {    targetPlayer=SingletonRepository.getRuleProcessor().getPlayer(params);    if (targetPlayer == null) {      if (params.trim().equals("")) {        player.sendPrivateText(NotificationType.ERROR,"Please include the name of the target player in this command.");      } else {        player.sendPrivateText(NotificationType.ERROR,"Player " + params + " is not online");      }      return;    }  }  if (actionStr.equals("invite")) {    invite(player,targetPlayer);  } else   if (actionStr.equals("join")) {    join(player,targetPlayer);  } else   if (actionStr.equals("leader")) {    leader(player,targetPlayer);  } else   if (actionStr.equals("lootmode")) {    lootmode(player,params);  } else   if (actionStr.equals("kick")) {    kick(player,params);  } else   if (actionStr.equals("part")) {    part(player);  } else   if (actionStr.equals("status")) {    status(player);  } else {    unknown(player,actionStr,params);  }}  }
class C{  public Boolean isGuestStateChangeSupported(){  return guestStateChangeSupported;}  }
class C{  public InteriorIntersectionFinder(LineIntersector li){  this.li=li;  interiorIntersection=null;}  }
class C{  private void rebuildTable(final boolean rebuildHeader){  table.saveSelection(beanColIdx);  if (table.isEditing())   table.getCellEditor().stopCellEditing();  final XTableModel model=table.getXTableModel();  final boolean showRepsCount=Env.APP_SETTINGS.get(Settings.SHOW_REPLAYS_COUNT);  if (rebuildHeader) {    final Vector<String> columns=Utils.asNewVector("Bean","I","Folder","Include sub-folders?","Monitored?","Filters","Position","Comment","# of Replays");    final List<Class<?>> columnClasses=Utils.<Class<?>>asNewList(RepFolderBean.class,TableIcon.class,Path.class,Boolean.class,Boolean.class,Integer.class,Integer.class,String.class,Integer.class);    beanColIdx=0;    pathColIdx=2;    recursiveColIdx=3;    monitoredColIdx=4;    filtersColIdx=5;    positionColIdx=6;    commentColIdx=7;    countColIdx=8;    table.setEditableColModelIndices(pathColIdx,recursiveColIdx,monitoredColIdx,commentColIdx);    table.getXTableRowSorter().setColumnDefaultDescs(true,recursiveColIdx,monitoredColIdx,filtersColIdx,countColIdx);    model.setColumnIdentifiers(columns);    model.setColumnClasses(columnClasses);    if (!showRepsCount)     table.getColumnModel().removeColumn(table.getColumnModel().getColumn(countColIdx));    table.getColumnModel().removeColumn(table.getColumnModel().getColumn(beanColIdx));    table.getRowSorter().setSortKeys(Arrays.asList(new SortKey(positionColIdx,SortOrder.ASCENDING)));  }  model.getDataVector().clear();  model.fireTableDataChanged();  final RepFoldersBean rfsBean=Env.APP_SETTINGS.get(Settings.REPLAY_FOLDERS_BEAN);  int pos=1;  for (  final RepFolderBean rfBean : rfsBean.getReplayFolderBeanList()) {    final Vector<Object> row=Utils.<Object>asNewVector(rfBean,rfBean.getOrigin().tableIcon,rfBean.getPath(),rfBean.getRecursive(),rfBean.getMonitored(),rfBean.getActiveFilterCount(),pos++,rfBean.getComment(),rfBean.getReplaysCount());    model.addRow(row);  }  for (int i=table.getColumnCount() - 1; i >= 0; i--)   if (i != table.convertColumnIndexToView(pathColIdx) && i != table.convertColumnIndexToView(commentColIdx))   table.packColumns(i);  table.restoreSelection(beanColIdx);}  }
class C{  public void endVisit(NullLiteral node){}  }
class C{  @Override public int[] sequenceLengths(final long start,final long end) throws IOException {  final int entrySize=mIndex.getVersion() >= IndexFile.PER_SEQUENCE_CHECKSUM_VERSION ? (mIndex.hasQuality() ? 6 : 5) : 4;  final long internalStart=start + mStart;  final long internalEnd=end + mStart;  final int[] ret=new int[(int)(internalEnd - internalStart)];  if (ret.length == 0) {    return ret;  }  if (mIndex.getMaxLength() == mIndex.getMinLength()) {    Arrays.fill(ret,(int)mIndex.getMaxLength());    return ret;  }  final byte[] buffer=new byte[entrySize * 1024];  final DataFileIndex dataIndex=mSequenceManager.sequenceIndex();  final long[] numSequences=new long[dataIndex.numberEntries()];  int startFileNo=-1;  int endFileNo=-1;  for (int i=0; i < numSequences.length; i++) {    if (i > 0) {      numSequences[i]=numSequences[i - 1] + dataIndex.numberSequences(i);    } else {      numSequences[0]=dataIndex.numberSequences(0);    }    if (internalStart < numSequences[i]) {      if (startFileNo == -1) {        startFileNo=i;      }      if (internalEnd < numSequences[i]) {        endFileNo=i;        break;      }    }  }  final long startLower=startFileNo == 0 ? 0 : numSequences[startFileNo - 1];  final long endLower=endFileNo < 1 ? 0 : numSequences[endFileNo - 1];  int seqNo=0;  for (int i=startFileNo; (endFileNo == -1 || i <= endFileNo) && i < numSequences.length; i++) {    try (RandomAccessFile raf=new RandomAccessFile(SdfFileUtils.sequencePointerFile(mDirectory,i),"r")){      final long pos;      if (i == startFileNo) {        pos=(internalStart - startLower) * entrySize;        raf.seek(pos);      } else {        pos=0;      }      final long endPos=endFileNo == i ? (internalEnd - endLower) * entrySize : raf.length();      seqNo=sequenceLengthsHelper(raf,buffer,ret,seqNo,pos,endPos,entrySize);      if (endFileNo != i && seqNo > 0) {        final long fileLength=dataIndex.dataSize(i);        ret[seqNo - 1]=ret[seqNo - 1] - (int)fileLength;      } else {        if (seqNo != ret.length) {          throw new CorruptSdfException("Should have read " + ret.length + " sequence pointers, got "+ seqNo);        }        raf.read();        ret[seqNo - 1]-=raf.readInt();      }    }   }  ret[ret.length - 1]=0 - ret[ret.length - 1];  return ret;}  }
class C{  protected List refreshTicksVertical(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){  List result=new java.util.ArrayList();  Font tickLabelFont=getTickLabelFont();  g2.setFont(tickLabelFont);  if (isAutoTickUnitSelection()) {    selectAutoTickUnit(g2,dataArea,edge);  }  DateTickUnit unit=getTickUnit();  Date tickDate=calculateLowestVisibleTickValue(unit);  Date upperDate=getMaximumDate();  boolean hasRolled=false;  while (tickDate.before(upperDate)) {    if (!hasRolled) {      tickDate=correctTickDateForPosition(tickDate,unit,this.tickMarkPosition);    }    long lowestTickTime=tickDate.getTime();    long distance=unit.addToDate(tickDate,this.timeZone).getTime() - lowestTickTime;    int minorTickSpaces=getMinorTickCount();    if (minorTickSpaces <= 0) {      minorTickSpaces=unit.getMinorTickCount();    }    for (int minorTick=1; minorTick < minorTickSpaces; minorTick++) {      long minorTickTime=lowestTickTime - distance * minorTick / minorTickSpaces;      if (minorTickTime > 0 && getRange().contains(minorTickTime) && (!isHiddenValue(minorTickTime))) {        result.add(new DateTick(TickType.MINOR,new Date(minorTickTime),"",TextAnchor.TOP_CENTER,TextAnchor.CENTER,0.0));      }    }    if (!isHiddenValue(tickDate.getTime())) {      String tickLabel;      DateFormat formatter=getDateFormatOverride();      if (formatter != null) {        tickLabel=formatter.format(tickDate);      } else {        tickLabel=this.tickUnit.dateToString(tickDate);      }      TextAnchor anchor, rotationAnchor;      double angle=0.0;      if (isVerticalTickLabels()) {        anchor=TextAnchor.BOTTOM_CENTER;        rotationAnchor=TextAnchor.BOTTOM_CENTER;        if (edge == RectangleEdge.LEFT) {          angle=-Math.PI / 2.0;        } else {          angle=Math.PI / 2.0;        }      } else {        if (edge == RectangleEdge.LEFT) {          anchor=TextAnchor.CENTER_RIGHT;          rotationAnchor=TextAnchor.CENTER_RIGHT;        } else {          anchor=TextAnchor.CENTER_LEFT;          rotationAnchor=TextAnchor.CENTER_LEFT;        }      }      Tick tick=new DateTick(tickDate,tickLabel,anchor,rotationAnchor,angle);      result.add(tick);      hasRolled=false;      long currentTickTime=tickDate.getTime();      tickDate=unit.addToDate(tickDate,this.timeZone);      long nextTickTime=tickDate.getTime();      for (int minorTick=1; minorTick < minorTickSpaces; minorTick++) {        long minorTickTime=currentTickTime + (nextTickTime - currentTickTime) * minorTick / minorTickSpaces;        if (getRange().contains(minorTickTime) && (!isHiddenValue(minorTickTime))) {          result.add(new DateTick(TickType.MINOR,new Date(minorTickTime),"",TextAnchor.TOP_CENTER,TextAnchor.CENTER,0.0));        }      }    } else {      tickDate=unit.rollDate(tickDate,this.timeZone);      hasRolled=true;    }  }  return result;}  }
class C{  public boolean createTabWithWebContents(WebContents webContents,int parentId,TabLaunchType type,String url,int startedBy){  if (url == null)   url="";  int pageTransition=startedBy == DocumentMetricIds.STARTED_BY_CHROME_HOME_RECENT_TABS ? PageTransition.RELOAD : PageTransition.AUTO_TOPLEVEL;  AsyncTabCreationParams asyncParams=new AsyncTabCreationParams(new LoadUrlParams(url,pageTransition),webContents);  asyncParams.setDocumentStartedBy(startedBy);  createNewTab(asyncParams,type,parentId);  return true;}  }
class C{  @Override public int size(){  return size;}  }
class C{  @Override public void shutdown(ShutdownModeAmp mode){}  }
class C{  public void validate(FacesContext facesContext,UIComponent component,Object value) throws ValidatorException {  if (value == null) {    return;  }  String currencyCode=value.toString();  if (currencyCode.length() == 0) {    return;  }  try {    Currency.getInstance(currencyCode);  } catch (  IllegalArgumentException e) {    String label=JSFUtils.getLabel(component);    ValidationException ve=new ValidationException(ReasonEnum.INVALID_CURRENCY,label,new Object[]{currencyCode});    String text=JSFUtils.getText(ve.getMessageKey(),new Object[]{currencyCode},facesContext);    throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR,text,null));  }}  }
class C{  protected void println(){  print("\n");}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getActionCommand().equals(ConfirmPanel.A_OK))   dispose();}  }
class C{  public boolean isDrawOutline(){  return this.drawOutline;}  }
class C{  public boolean dispatchKeyEvent(KeyEvent event){  onUserInteraction();  Window win=getWindow();  if (win.superDispatchKeyEvent(event)) {    return true;  }  View decor=mDecor;  if (decor == null)   decor=win.getDecorView();  return event.dispatch(this,decor != null ? decor.getKeyDispatcherState() : null,this);}  }
class C{  public void reset(){  currentRecursion.clear();  reflectionFactory=null;}  }
class C{  public void outputExampleXML(PrintWriter writer,AttributeRule rule){  writer.print(" " + rule.getName() + "=\"");  if (rule.hasExample()) {    writer.print(rule.getExample());  } else {    outputAttributeValue(writer,rule.getAttributeClass());  }  writer.print("\"");}  }
class C{  public ContinuousSigmoidalRule(final SquashingFunction sFunction){  super();  this.sFunction=sFunction;}  }
class C{  protected MouseWheelListener createMouseWheelListener(){  return getHandler();}  }
class C{  private boolean isInitiatorInStorageSystemsNetwork(ExportGroup exportGroup,Initiator initiator,Collection<URI> systems,Set<String> outVarrays){  boolean foundAnAssociatedNetwork=false;  Set<String> exportGroupVarrays=new HashSet<String>();  exportGroupVarrays.add(exportGroup.getVirtualArray().toString());  for (  URI systemURI : systems) {    List<URI> arrayVarrays=ExportUtils.getVarraysForStorageSystemVolumes(exportGroup,systemURI,_dbClient);    for (    URI arrayVarray : arrayVarrays) {      if (!exportGroupVarrays.contains(arrayVarray.toString())) {        exportGroupVarrays.add(arrayVarray.toString());      }    }  }  outVarrays.addAll(exportGroupVarrays);  Set<NetworkLite> networks=NetworkUtil.getEndpointAllNetworksLite(initiator.getInitiatorPort(),_dbClient);  if (networks == null || networks.isEmpty()) {    _log.info(String.format("Initiator %s (%s) is not associated with any network.",initiator.getInitiatorPort(),initiator.getId().toString()));    return false;  } else {    for (    NetworkLite networkLite : networks) {      if (networkLite == null) {        continue;      }      Set<String> varraySet=networkLite.fetchAllVirtualArrays();      if (varraySet != null) {        Set<String> intersection=Sets.intersection(varraySet,exportGroupVarrays);        if (!intersection.isEmpty()) {          _log.info(String.format("Initiator %s (%s) was found to be associated to VirtualArrays %s through network %s.",initiator.getInitiatorPort(),initiator.getId().toString(),intersection.toString(),networkLite.getNativeGuid()));          foundAnAssociatedNetwork=true;        }      }    }  }  return foundAnAssociatedNetwork;}  }
class C{  public static String streamToString(final InputStream stream) throws IOException {  if (stream == null) {    throw new NullPointerException("null stream given");  }  final StringBuilder out=new StringBuilder();  final byte[] b=FileUtils.makeByteBuffer();  int len=stream.read(b);  final int eof=-1;  while (len != eof) {    for (int i=0; i < len; i++) {      out.append((char)b[i]);    }    len=stream.read(b);  }  return out.toString();}  }
class C{  public <V>V transact(Callable<V> transaction,HGTransactionConfig config){  while (true) {    beginTransaction(config);    V result=null;    try {      result=transaction.call();    } catch (    HGUserAbortException ex) {      try {        endTransaction(false);      } catch (      HGTransactionException tex) {        tex.printStackTrace(System.err);      }      return null;    }catch (    Throwable t) {      try {        endTransaction(false);      } catch (      HGTransactionException tex) {        tex.printStackTrace(System.err);      }      if (HGUtils.getRootCause(t) instanceof TransactionIsReadonlyException && config.isWriteUpgradable()) {        config=HGTransactionConfig.DEFAULT;      } else {        handleTxException(t);        conflicted.incrementAndGet();      }      continue;    }    try {      endTransaction(true);      successful.incrementAndGet();      return result;    } catch (    Throwable t) {      if (HGUtils.getRootCause(t) instanceof TransactionIsReadonlyException && config.isWriteUpgradable()) {        config=HGTransactionConfig.DEFAULT;      } else {        handleTxException(t);        conflicted.incrementAndGet();      }    }  }}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TYPE;}  }
class C{  public static String escapeValue(Object val){  return (val instanceof byte[]) ? escapeBinaryValue((byte[])val) : escapeStringValue((String)val);}  }
class C{  public double magnitude(){  return Math.sqrt(this.dot(this));}  }
class C{  @LargeTest public void testMediaVideoItem() throws Exception {  final String videoItemFileName=INPUT_FILE_PATH + "H263_profile0_176x144_15fps_256kbps_AACLC_32kHz_128kbps_s_0_26.3gp";  final int videoItemRenderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaVideoItem1",videoItemFileName,videoItemRenderingMode);  assertTrue("Media Video ID",mediaVideoItem1.getId().equals("mediaVideoItem1"));  assertTrue("Media Video Filename",mediaVideoItem1.getFilename().equals(videoItemFileName));  assertEquals("Media Video Rendering Mode",videoItemRenderingMode,mediaVideoItem1.getRenderingMode());  assertEquals("Media Video Item Duration",mediaVideoItem1.getDuration(),mediaVideoItem1.getTimelineDuration());  assertEquals("Media Video Overlay",0,mediaVideoItem1.getAllOverlays().size());  assertEquals("Media Video Effect",0,mediaVideoItem1.getAllEffects().size());  assertNull("Media Video Begin transition",mediaVideoItem1.getBeginTransition());  assertNull("Media Video End transition",mediaVideoItem1.getEndTransition());  mediaVideoItem1.setExtractBoundaries(1000,11000);  boolean flagForException=false;  if (mediaVideoItem1.getDuration() != mediaVideoItem1.getTimelineDuration()) {    flagForException=true;  }  assertTrue("Media Video Item Duration & Timeline are same",flagForException);}  }
class C{  public LwM2mPath(int objectId,int objectInstanceId){  this.objectId=objectId;  this.objectInstanceId=objectInstanceId;  this.resourceId=null;  this.resourceInstanceId=null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected void removeGrantIfUnused(DLockGrantToken grant){synchronized (this.grantTokens) {synchronized (grant) {      if (isDestroyed() || grant.isDestroyed()) {        return;      } else       if (grant.grantLockToNextRequest()) {        return;      } else       if (!grant.isBeingAccessed() && !grant.isGranted(false) && !grant.hasWaitingRequests()) {        basicRemoveGrantToken(grant);      }    }  }}  }
class C{  private static String buildMultipleIdQuery(Set<Long> ids,String key){  StringBuilder selection=new StringBuilder();  boolean first=true;  for (  Long id : ids) {    if (first) {      first=false;    } else {      selection.append(" OR ");    }    selection.append(key);    selection.append("=");    selection.append(id);  }  return selection.toString();}  }
class C{  public void flush(double[] dst,int dptr){  System.arraycopy(shiftRegister,0,dst,dptr,blockSize);  Sequence.zeroShift(shiftRegister,-blockSize);}  }
class C{  @Override public int compareTo(FrequentItemSet o){  Collection<Item> hisItems=o.getItems();  if (items.size() < hisItems.size()) {    return -1;  } else   if (items.size() > hisItems.size()) {    return 1;  } else {    Iterator<Item> iterator=hisItems.iterator();    for (    Item myCurrentItem : this.items) {      int relation=myCurrentItem.compareTo(iterator.next());      if (relation != 0) {        return relation;      }    }    return 0;  }}  }
class C{  public CloudStackFrame(@NotNull Project project,@NotNull StackFrame frame,@NotNull List<Variable> variableTable,@Nullable List<Variable> evaluatedExpressions,@NotNull ServerToIdeFileResolver fileResolver){  this.frame=frame;  this.variableTable=variableTable;  this.evaluatedExpressions=evaluatedExpressions;  String path=frame.getLocation().getPath();  if (!Strings.isNullOrEmpty(path)) {    sourcePosition=XDebuggerUtil.getInstance().createPosition(fileResolver.getFileFromPath(project,path),frame.getLocation().getLine() - 1);  } else {    sourcePosition=null;  }}  }
class C{  public NodeIterator(int motifNodeID){  this.motifNodeID=motifNodeID;  initialLists=new ArrayList<ArrayList<Node>>();  neighbourLists=new Stack<NodeSet>();  nodeCausingRestriction=new Stack<Node>();  minSetSize=Integer.MAX_VALUE;}  }
class C{  public static UrlTemplate compile(String template){  String[] urlPieces=new String[5];  int[] identifiers=new int[4];  String[] identifierFormatTags=new String[4];  int identifierCount=parseTemplate(template,urlPieces,identifiers,identifierFormatTags);  return new UrlTemplate(urlPieces,identifiers,identifierFormatTags,identifierCount);}  }
class C{  public static <T>ObservableTSeq<T> observableT(Observable<Observable<T>> nested){  return ObservableT.fromObservable(nested);}  }
class C{  public void testDoTag() throws Exception {  System.out.println("doTag");  ForXmlContentTag instance=new ForXmlContentTag();  String value="<div>";  String expected="&lt;div&gt;";  instance.setJspContext(_pageContext);  instance.setValue(value);  instance.doTag();  String results=_response.getContentAsString();  assertEquals(expected,results);}  }
class C{  public GPUImageSmoothToonFilter(){  blurFilter=new GPUImageGaussianBlurFilter();  addFilter(blurFilter);  toonFilter=new GPUImageToonFilter();  addFilter(toonFilter);  getFilters().add(blurFilter);  setBlurSize(0.5f);  setThreshold(0.2f);  setQuantizationLevels(10.0f);}  }
class C{  public static boolean hasAnonymousFunction(TypeSymbol type){  for (  Symbol s : type.getEnclosedElements()) {    if (s instanceof MethodSymbol) {      if (JSweetConfig.ANONYMOUS_FUNCTION_NAME.equals(s.getSimpleName().toString())) {        return true;      }    }  }  return false;}  }
class C{  public boolean unroll(){  return soot.PhaseOptions.getBoolean(options,"unroll");}  }
class C{  @Override protected EClass eStaticClass(){  return ImPackage.Literals.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM;}  }
class C{  void remove_phi(Method m){  Deque<Block> code=dfs(m.entry.to);  SetMap<Block,Edge> pred=preds(code);  Map<Integer,Integer> locals=new TreeMap<Integer,Integer>();  Map<Block,Deque<Expr>> exprs=new TreeMap<Block,Deque<Expr>>();  ConflictGraph conflicts=new ConflictGraph();  printMethod(m,"BEFORE SCHED");  addTraceAttr(m);  restused:   if (m.needsArguments() || m.needsRest()) {    int rest=m.getParams().length;    for (    Expr e : m.entry.to)     if (e.op == OP_arg && e.imm[0] == rest)     break restused;    m.flags&=~(METHOD_Arguments | METHOD_Needrest);    m.flags|=METHOD_IgnoreRest;    verboseStatus("IGNORE_REST for " + m.getName());  }  int max_local=m.getParams().length - 1;  sched_greedy(m,code,locals,pred,exprs,conflicts);  alloc_locals(code,locals,conflicts,m.fixedLocals);  Set<Edge> splits=new TreeSet<Edge>();  for (  Block b : code) {    for (    Expr e : b) {      if (e.op != OP_phi)       break;      if (!locals.containsKey(e.id))       continue;      addTraceAttr(e);      int lhs=locals.get(e.id);      for (int i=e.args.length - 1; i >= 0; i--) {        traceEntry("PhiInput");        addTraceAttr("i",i);        addTraceAttr(e.args[i]);        int rhs=locals.get(e.args[i].id);        if (lhs != rhs) {          Edge p=e.pred[i];          if (!splits.contains(p)) {            split(p,m,pred);            splits.add(p=e.pred[i]);          }          traceEntry("copyPhiInput");          addTraceAttr("lhs",lhs);          addTraceAttr("rhs",rhs);          Expr get=getlocal(m,rhs);          prepend(p,get);          append(p,setlocal(m,lhs,get));        }      }    }    b.exprs=exprs.get(b);    for (    Expr e : b.exprs) {      int loc=max_local;      if (e.op == OP_getlocal || e.op == OP_setlocal) {        loc=e.imm[0]=locals.get(e.imm[0]);      } else       if (e.op == OP_hasnext2) {        int loc0=locals.get(e.locals[0].id);        int loc1=locals.get(e.locals[1].id);        e.imm=new int[]{loc0,loc1};        loc=loc0 > loc1 ? loc0 : loc1;      }      if (loc > max_local)       max_local=loc;    }  }  m.local_count=max_local + 1;  cfgopt(m);  printMethod(m,"AFTER SCHED");}  }
class C{  public void restart(DrawContext dc){  if (this.maxExpiryTime == 0 || this.maxExpiryTime < this.minExpiryTime) {    this.expired=true;  } else {    long now=dc != null ? dc.getFrameTimeStamp() : System.currentTimeMillis();    this.expiryTime=now + this.minExpiryTime + rand.nextInt((int)(this.maxExpiryTime - this.minExpiryTime));    this.expired=false;  }}  }
class C{  private void yy_ScanError(int errorCode){  String message;  try {    message=YY_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=YY_ERROR_MSG[YY_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public void mouseMoved(){  omgraphics.deselect();  repaint();}  }
class C{  public static void encodeVaxIntegerWithoutLength(OutputStream stream,int value) throws IOException {  stream.write(value);  stream.write(value >> 8);  stream.write(value >> 16);  stream.write(value >> 24);}  }
class C{  public void testUnsizedDoublesCountSeq(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=100;  r.doubles().limit(size).forEach(null);  assertEquals(counter.sum(),size);}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (o.getClass().equals(EdgeInfo.class)) {    EdgeInfo ei=(EdgeInfo)o;    return ei.start == start && ei.end == end && ei.capacity == capacity;  }  return false;}  }
class C{  public DefaultRuleTaskFactory(){}  }
class C{  protected boolean checkOverlapCriterion(int proteinLength,PIRSFHmmer2RawMatch pirsfRawMatch,PirsfDatRecord pirsfDatRecord){  int seqFrom=pirsfRawMatch.getLocationStart();  int seqTo=pirsfRawMatch.getLocationEnd();  double locationScore=pirsfRawMatch.getLocationScore();  double meanSeqLen=pirsfDatRecord.getMeanSeqLen();  double minScore=pirsfDatRecord.getMinScore();  double stdDevSeqLen=pirsfDatRecord.getStdDevSeqLen();  float overlap=(float)(seqTo - seqFrom + 1) / (float)proteinLength;  double lenDifference=Math.abs((double)proteinLength - meanSeqLen);  if (overlap >= 0.8f && locationScore >= minScore && (lenDifference < 3.5d * stdDevSeqLen || lenDifference < 50.0d)) {    return true;  } else {    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Raw match filtered out: " + pirsfRawMatch);    }    return false;  }}  }
class C{  public void testABandBCbrokerNetworkWithSelectors() throws Exception {  bridgeBrokers("BrokerA","BrokerB",dynamicOnly,2,true);  bridgeBrokers("BrokerB","BrokerC",dynamicOnly,2,true);  startAllBrokers();  Destination dest=createDestination("TEST.FOO",true);  MessageConsumer clientA=createConsumer("BrokerC",dest,"dummy = 33");  MessageConsumer clientB=createConsumer("BrokerC",dest,"dummy > 30");  MessageConsumer clientC=createConsumer("BrokerC",dest,"dummy = 34");  Thread.sleep(2000);  HashMap<String,Object> props=new HashMap<>();  props.put("dummy",33);  sendMessages("BrokerA",dest,MESSAGE_COUNT,props);  props.put("dummy",34);  sendMessages("BrokerA",dest,MESSAGE_COUNT * 2,props);  MessageIdList msgsA=getConsumerMessages("BrokerC",clientA);  MessageIdList msgsB=getConsumerMessages("BrokerC",clientB);  MessageIdList msgsC=getConsumerMessages("BrokerC",clientC);  msgsA.waitForMessagesToArrive(MESSAGE_COUNT);  msgsB.waitForMessagesToArrive(MESSAGE_COUNT * 3);  msgsC.waitForMessagesToArrive(MESSAGE_COUNT * 2);  assertEquals(MESSAGE_COUNT,msgsA.getMessageCount());  assertEquals(MESSAGE_COUNT * 3,msgsB.getMessageCount());  assertEquals(MESSAGE_COUNT * 2,msgsC.getMessageCount());}  }
class C{  public static ICompilationUnit createCompilationUnitFrom(IFile file,IJavaProject project){  if (file == null)   return null;  if (project == null) {    project=JavaCore.create(file.getProject());  }  IPackageFragment pkg=(IPackageFragment)determineIfOnClasspath(file,project);  if (pkg == null) {    PackageFragmentRoot root=(PackageFragmentRoot)project.getPackageFragmentRoot(file.getParent());    pkg=root.getPackageFragment(CharOperation.NO_STRINGS);    if (VERBOSE) {      System.out.println("WARNING : creating unit element outside classpath (" + Thread.currentThread() + "): "+ file.getFullPath());    }  }  return pkg.getCompilationUnit(file.getName());}  }
class C{  public void markAsInitializerOfHoistedVariable(ExpressionStatement element){  tag(Tag.initializerOfHoistedVariable,element);}  }
class C{  public boolean mayUse(Player player){  if (corpseOwner == null || corpseOwner.equals(player.getName()) || get("class").equals("player")) {    return true;  }  Group group=SingletonRepository.getGroupManager().getGroup(player.getName());  if (group != null) {    if (group.getLootmode().equals("shared") && group.hasMember(corpseOwner)) {      return true;    }  }  return false;}  }
class C{  public SamFilterChain(SamFilter... filters){  mFilters=filters;}  }
class C{  private static boolean isTrashId(IgniteUuid id){  if (id == null)   return false;  UUID gid=id.globalId();  return id.localId() == 0 && gid.getMostSignificantBits() == 0 && gid.getLeastSignificantBits() > 0 && gid.getLeastSignificantBits() <= TRASH_CONCURRENCY;}  }
class C{  public InputStream openStreamRaw(String userAgent,Iterator mimeTypes) throws IOException {  InputStream ret=openStreamInternal(userAgent,mimeTypes,null);  stream=null;  return ret;}  }
class C{  public QuorumVoteServerConnect(int size,StorageManager storageManager){  super(LIVE_FAILOVER_VOTE);  double majority;  if (size <= 2) {    majority=((double)size) / 2;  } else {    majority=((double)size) / 2 + 1;  }  votesNeeded=(int)majority;  latch=new CountDownLatch(votesNeeded);  if (votesNeeded == 0) {    decision=true;  }}  }
class C{  public void parse(Element parent,ElementMetadata<?,?> parentMetadata,Collection<Element> elements,ElementMetadata<?,?> metadata) throws ParseException {  Preconditions.checkState(path.selectsElement(),"An attribute path cannot be used to parse elements.");  Path bound=path.toAbsolute(parentMetadata);  Collection<Element> parents=createParentElements(bound,parent,parentMetadata,elements.size());  ElementKey<?,?> childKey=bound.getSelectedElementKey();  ElementMetadata<?,?> childMetadata=bound.getSelectedElement();  Iterator<Element> pIter=parents.iterator();  Iterator<Element> eIter=elements.iterator();  if (parents.size() > 1) {    checkNotMultiple(childMetadata);    while (pIter.hasNext() && eIter.hasNext()) {      Element p=pIter.next();      p.addElement(eIter.next());    }    return;  }  if (elements.size() > 1 && childMetadata != null && childMetadata.getCardinality() == Cardinality.SINGLE) {    throw new IllegalStateException("Metadata for key " + childKey + " represents a single-cardinality element."+ " The path must contain at least one multiple-cardinality"+ " element in order to parse multiple elements.");  }  parent=pIter.next();  while (eIter.hasNext()) {    parent.addElement(eIter.next());  }}  }
class C{  public DefaultSortedSetDocValuesReaderState(IndexReader reader,String field) throws IOException {  this.field=field;  this.origReader=reader;  SortedSetDocValues dv=getDocValues();  if (dv == null) {    throw new IllegalArgumentException("field \"" + field + "\" was not indexed with SortedSetDocValues");  }  if (dv.getValueCount() > Integer.MAX_VALUE) {    throw new IllegalArgumentException("can only handle valueCount < Integer.MAX_VALUE; got " + dv.getValueCount());  }  valueCount=(int)dv.getValueCount();  String lastDim=null;  int startOrd=-1;  for (int ord=0; ord < valueCount; ord++) {    final BytesRef term=dv.lookupOrd(ord);    String[] components=FacetsConfig.stringToPath(term.utf8ToString());    if (components.length != 2) {      throw new IllegalArgumentException("this class can only handle 2 level hierarchy (dim/value); got: " + Arrays.toString(components) + " "+ term.utf8ToString());    }    if (!components[0].equals(lastDim)) {      if (lastDim != null) {        prefixToOrdRange.put(lastDim,new OrdRange(startOrd,ord - 1));      }      startOrd=ord;      lastDim=components[0];    }  }  if (lastDim != null) {    prefixToOrdRange.put(lastDim,new OrdRange(startOrd,valueCount - 1));  }}  }
class C{  public static Trigger before(String name){  return new Trigger(name,TriggerType.BEFORE);}  }
class C{  private State applyPatch(State current,State patch){  ServiceUtils.logInfo(this,"Moving to stage %s",patch.taskState.stage);  if (patch.nextPageLink == null) {    current.nextPageLink=null;  }  PatchUtils.patchState(current,patch);  return current;}  }
class C{  @Override protected int chooseProfession(int p_180779_1_,int p_180779_2_){  return 666;}  }
class C{  public void background(float gray,float alpha){  g.background(gray,alpha);}  }
class C{  @Override public List refreshTicks(Graphics2D g2,AxisState state,Rectangle2D dataArea,RectangleEdge edge){  List result=new java.util.ArrayList();  if (RectangleEdge.isTopOrBottom(edge)) {    result=refreshTicksHorizontal(g2,dataArea,edge);  } else   if (RectangleEdge.isLeftOrRight(edge)) {    result=refreshTicksVertical(g2,dataArea,edge);  }  return result;}  }
class C{  public Unsafe unsafe(){  return NativeMemory.UNSAFE;}  }
class C{  public static GeoDistanceQueryBuilder geoDistanceQuery(String name){  return new GeoDistanceQueryBuilder(name);}  }
class C{  private void doubleCapacity(){  int p=head;  int n=elements.length;  int r=n - p;  int newCapacity=n << 1;  if (newCapacity < 0)   throw new IllegalStateException("Sorry, deque too big");  Object[] a=new Object[newCapacity];  System.arraycopy(elements,p,a,0,r);  System.arraycopy(elements,0,a,r,p);  elements=a;  head=0;  tail=n;}  }
class C{  private static void writeProperties(PrintStream writer,Map<Object,Object> props){  if (props != null) {    for (    Entry<Object,Object> entry : props.entrySet()) {      writer.print(entry.getKey());      writer.print("=\"");      writer.print(entry.getValue());      writer.print("\" ");    }  }}  }
class C{  public static RelationalOpExpression lt(String propertyName,Object value){  return new RelationalOpExpression(getPropExpr(propertyName),"<",new ConstantExpression(value));}  }
class C{  public T caseGenerate_path_(Generate_path_ object){  return null;}  }
class C{  private void receiveAgent() throws IOException, ClassNotFoundException {synchronized (clm) {    Logger.debug(getClass().getName(),"an AGENT arrived");    String to=(String)ais.readObject();    if (to == null || !to.equals(name)) {      oos.writeByte(NOT_OK);      oos.flush();      Logger.warning(getClass().getName(),"AGENT rejected: I'm not " + to,null);      return;    } else     oos.writeByte(OK);    oos.flush();    String cname=(String)ais.readObject();    if (clm.getLoader(cname) != null)     oos.writeByte(OK); else {      oos.writeByte(GET_JAR);      oos.flush();      clm.putLoader(cname,ais);      oos.writeByte(OK);    }    ais.setClassLoader(clm.getLoader(cname));    try {      oos.flush();      IAgent a=(IAgent)ais.readObject();      Address from=(Address)ais.readObject();      from.host=socket.getInetAddress();      addAgent(a,from,new Address(socket.getLocalAddress(),socket.getLocalPort(),name));    } catch (    Throwable e) {      oos.writeByte(NOT_OK);      if (e instanceof IOException)       throw (IOException)e; else       if (e instanceof ClassNotFoundException)       throw (ClassNotFoundException)e; else       Logger.error(getClass().getName(),"",e);      return;    }    oos.writeByte(OK);  }}  }
class C{  public boolean hasThumbnail(){  return mData.hasCompressedThumbnail();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:06.127 -0500",hash_original_method="DA29AB595B7A4A125EF99100FA337502",hash_generated_method="EB7FE71751A7FA292A28A3D6E4687565") public String encode(){  return headerName + COLON + SP+ encodeBody()+ NEWLINE;}  }
class C{  @Inline public static int blockSize(int blockSizeClass){  return 1 << (LOG_MIN_BLOCK + blockSizeClass);}  }
class C{  public final boolean popAndTop(){  m_index--;  return (m_index >= 0) ? m_values[m_index] : false;}  }
class C{  public VNXeExportResult exportLun(String lunId,List<VNXeHostInitiator> initiators,Integer newhlu) throws VNXeException {  _logger.info("Exporting lun: {}",lunId);  VNXeLun lun=getLun(lunId);  if (lun == null) {    _logger.info("Could not find lun in the vxne: {}",lunId);    throw VNXeException.exceptions.vnxeCommandFailed("Could not find lun : " + lunId);  }  VNXeBase host=prepareHostsForExport(initiators);  List<BlockHostAccess> hostAccesses=lun.getHostAccess();  boolean lunHostAccessExists=false;  if (hostAccesses == null) {    hostAccesses=new ArrayList<BlockHostAccess>();  } else {    for (    BlockHostAccess hostAccess : hostAccesses) {      String hostId=hostAccess.getHost().getId();      if (hostId.equals(host.getId())) {        if (hostAccess.getAccessMask() == HostLUNAccessEnum.SNAPSHOT.getValue()) {          hostAccess.setAccessMask(HostLUNAccessEnum.BOTH.getValue());          lunHostAccessExists=true;          break;        } else         if (hostAccess.getAccessMask() == HostLUNAccessEnum.NOACCESS.getValue()) {          hostAccess.setAccessMask(HostLUNAccessEnum.PRODUCTION.getValue());          lunHostAccessExists=true;          break;        }      }    }  }  if (!lunHostAccessExists) {    BlockHostAccess access=new BlockHostAccess();    access.setHost(host);    access.setAccessMask(BlockHostAccess.HostLUNAccessEnum.PRODUCTION.getValue());    hostAccesses.add(access);  }  LunParam lunParam=new LunParam();  lunParam.setHostAccess(hostAccesses);  LunModifyParam exportParam=new LunModifyParam();  exportParam.setLunParameters(lunParam);  int type=lun.getType();  if (type == VNXeLun.LUNTypeEnum.Standalone.getValue()) {    BlockLunRequests lunReq=new BlockLunRequests(_khClient);    lunReq.modifyLunSync(exportParam,lun.getStorageResource().getId());  } else {    exportParam.setLun(new VNXeBase(lunId));    List<LunModifyParam> list=new ArrayList<LunModifyParam>();    list.add(exportParam);    LunGroupModifyParam groupParam=new LunGroupModifyParam();    groupParam.setLunModify(list);    if (!_khClient.isUnity()) {      LunGroupRequests lunGroupReq=new LunGroupRequests(_khClient);      lunGroupReq.modifyLunGroupSync(lun.getStorageResource().getId(),groupParam);    } else {      ConsistencyGroupRequests cgReq=new ConsistencyGroupRequests(_khClient);      cgReq.modifyConsistencyGroupSync(lun.getStorageResource().getId(),groupParam);    }  }  HostLunRequests hostLunReq=new HostLunRequests(_khClient);  HostLun hostLun=hostLunReq.getHostLun(lunId,host.getId(),HostLunRequests.ID_SEQUENCE_LUN);  int hluResult=hostLun.getHlu();  if (isUnityClient() && newhlu != null && newhlu.intValue() != -1) {    _logger.info("Modify hlu");    modifyHostLunHlu(host.getId(),hostLun.getId(),newhlu);    hluResult=newhlu;  }  VNXeExportResult result=new VNXeExportResult();  result.setHlu(hluResult);  result.setLunId(lunId);  result.setHostId(host.getId());  _logger.info("Done exporting lun: {}",lunId);  return result;}  }
class C{  public Task createAntTask(String taskName){  return this.antTaskFactory.createTask(taskName);}  }
class C{  @SuppressWarnings("unchecked") public static <T extends CharSequence>TransformationStrategy<T> iso(){  return (TransformationStrategy<T>)ISO;}  }
class C{  public void addPolicy(String policyName) throws IOException, InterruptedException {  driver.findElement(By.xpath(uiElementMapper.getElement("emm.policy.add.platform.android"))).click();  WebElement enableElement=driver.findElement(By.xpath(uiElementMapper.getElement("emm.policy.add.profile.passcode.enable")));  actions.moveToElement(enableElement).click().build().perform();  CommonUtil.waitAndClick(driver,By.xpath(uiElementMapper.getElement("emm.policy.add.profile.continue.button.xpath")));  CommonUtil.waitAndClick(driver,By.xpath(uiElementMapper.getElement("emm.policy.add.groups.continue.button.xpath")));  WebElement policyNameField=driver.findElement(By.xpath(uiElementMapper.getElement("emm.policy.add.name.input.xpath")));  policyNameField.sendKeys(policyName);  driver.findElement(By.xpath(uiElementMapper.getElement("emm.policy.add.publish.button.xpath"))).click();  String resultText=driver.findElement(By.id(uiElementMapper.getElement("emm.policy.add.publish.created.msg"))).getText();  if (!resultText.contains("POLICY CREATION IS SUCCESSFUL.")) {    throw new IllegalStateException("Policy was not added");  }}  }
class C{  protected void validateProjects(FactoryDto factory) throws BadRequestException {  for (  ProjectConfigDto project : factory.getWorkspace().getProjects()) {    final String projectName=project.getName();    if (null != projectName && !PROJECT_NAME_VALIDATOR.matcher(projectName).matches()) {      throw new BadRequestException("Project name must contain only Latin letters, " + "digits or these following special characters -._.");    }    if (project.getPath().indexOf('/',1) == -1) {      final String location=project.getSource().getLocation();      final String parameterLocationName="project.source.location";      if (isNullOrEmpty(location)) {        throw new BadRequestException(format(FactoryConstants.PARAMETRIZED_ILLEGAL_PARAMETER_VALUE_MESSAGE,parameterLocationName,location));      }      try {        URLDecoder.decode(location,"UTF-8");      } catch (      IllegalArgumentException|UnsupportedEncodingException e) {        throw new BadRequestException(format(FactoryConstants.PARAMETRIZED_ILLEGAL_PARAMETER_VALUE_MESSAGE,parameterLocationName,location));      }    }  }}  }
class C{  public OMEllipse(LatLonPoint centerPoint,double majorAxisSpan,double minorAxisSpan,Length units,double rotateAngle){  setRenderType(RENDERTYPE_LATLON);  setLineType(LINETYPE_GREATCIRCLE);  setCenter(centerPoint);  setAxis(majorAxisSpan,minorAxisSpan,units);  setRotationAngle(rotateAngle);}  }
class C{  public static void json(String json){  json(TAG,json);}  }
class C{  public void invokeStatic(final Type owner,final Method method){  invokeInsn(Opcodes.INVOKESTATIC,owner,method,false);}  }
class C{  public void sendTamsMessage(TamsMessage m,TamsListener tl){  tm=m;  tmq.offer(tm);  if (tm.isBinary()) {  } else {  }  sendMessage(tm,tl);}  }
class C{  static public FunctionNode sameTerm(final ValueExpressionNode t1,final ValueExpressionNode t2){  return new FunctionNode(FunctionRegistry.SAME_TERM,null,new ValueExpressionNode[]{t1,t2});}  }
class C{  public static boolean hasNextKeyTyped(){synchronized (keyLock) {    return !keysTyped.isEmpty();  }}  }
class C{  @Override public String toString(){  final StringBuffer result=new StringBuffer();  result.append(username);  result.append(":");  result.append((password == null) ? "null" : password);  return result.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.336 -0500",hash_original_method="FD713420BE4BC11FE9D9AB43BBBEAD30",hash_generated_method="2457ABF9713E7ECE18E95E908033EB4B") public PCalledPartyIDHeader createPCalledPartyIDHeader(Address address){  if (address == null)   throw new NullPointerException("null address!");  PCalledPartyID calledPartyID=new PCalledPartyID();  calledPartyID.setAddress(address);  return calledPartyID;}  }
class C{  public static Automaton removeDeadStates(Automaton a){  int numStates=a.getNumStates();  BitSet liveSet=getLiveStates(a);  int[] map=new int[numStates];  Automaton result=new Automaton();  for (int i=0; i < numStates; i++) {    if (liveSet.get(i)) {      map[i]=result.createState();      result.setAccept(map[i],a.isAccept(i));    }  }  Transition t=new Transition();  for (int i=0; i < numStates; i++) {    if (liveSet.get(i)) {      int numTransitions=a.initTransition(i,t);      for (int j=0; j < numTransitions; j++) {        a.getNextTransition(t);        if (liveSet.get(t.dest)) {          result.addTransition(map[i],map[t.dest],t.min,t.max);        }      }    }  }  result.finishState();  assert hasDeadStates(result) == false;  return result;}  }
class C{  public double computeMiOfGivenTupleFromVarIndex(int[] tuple,int fromIndex){  double miCont=0;  if (fromIndex == numVars) {    double prodMarginalProbs=1.0;    int jointValue=0;    for (int i=0; i < numVars; i++) {      prodMarginalProbs*=(double)marginalCounts[i][tuple[i]] / (double)observations;      jointValue*=base;      jointValue+=tuple[i];    }    if (jointCount[jointValue] == 0) {      return 0;    }    double jointProb=(double)jointCount[jointValue] / (double)observations;    double logValue=jointProb / prodMarginalProbs;    double localValue=Math.log(logValue) / log_2;    if (jointProb > 0.0) {      if (!checkedFirst) {        max=localValue;        min=localValue;        checkedFirst=true;      } else {        if (localValue > max) {          max=localValue;        }        if (localValue < min) {          min=localValue;        }      }    }    miCont=jointProb * localValue;  } else {    for (int v=0; v < base; v++) {      tuple[fromIndex]=v;      miCont+=computeMiOfGivenTupleFromVarIndex(tuple,fromIndex + 1);    }  }  return miCont;}  }
class C{  public final boolean hasMoreElements(){  if (m_Counter < m_Vector.size()) {    return true;  }  return false;}  }
class C{  public void close() throws IOException {  out.close();}  }
class C{  public byte[] encrypt(byte[] clearText){  int length=clearText.length;  if (length % 8 != 0) {    System.out.println("Array must be a multiple of 8");    return null;  }  byte[] cipherText=new byte[length];  int count=length / 8;  for (int i=0; i < count; i++)   encrypt(clearText,i * 8,cipherText,i * 8);  return cipherText;}  }
class C{  public final byte[] asUnquotedUTF8(){  byte[] result=_unquotedUTF8Ref;  if (result == null) {    result=JsonStringEncoder.getInstance().encodeAsUTF8(_value);    _unquotedUTF8Ref=result;  }  return result;}  }
class C{  public static boolean isValidIANAEncoding(String ianaEncoding){  if (ianaEncoding != null) {    int length=ianaEncoding.length();    if (length > 0) {      char c=ianaEncoding.charAt(0);      if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {        for (int i=1; i < length; i++) {          c=ianaEncoding.charAt(i);          if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') && (c < '0' || c > '9')&& c != '.' && c != '_' && c != '-') {            return false;          }        }        return true;      }    }  }  return false;}  }
class C{  public NamedVolumesList listVirtualArrayChangeCandidates(URI projectId,URI varrayId){  UriBuilder builder=client.uriBuilder(baseUrl).path("/varray-change");  builder.queryParam("project",projectId);  builder.queryParam("targetVarray",varrayId);  return client.getURI(NamedVolumesList.class,builder.build());}  }
class C{  public static DefUseCoverageTestFitness retrieveGoal(int defId,int useId){  Definition def=DefUsePool.getDefinitionByDefId(defId);  Use use=DefUsePool.getUseByUseId(useId);  return retrieveGoal(def,use);}  }
class C{  public static Pair<FilterValueSetParam,FilterParamIndexBase> findIndex(ArrayDeque<FilterValueSetParam> parameters,List<FilterParamIndexBase> indizes){  for (  FilterValueSetParam parameter : parameters) {    FilterSpecLookupable lookupable=parameter.getLookupable();    FilterOperator operator=parameter.getFilterOperator();    for (    FilterParamIndexBase index : indizes) {      if (index instanceof FilterParamIndexLookupableBase) {        FilterParamIndexLookupableBase propBasedIndex=(FilterParamIndexLookupableBase)index;        if ((lookupable.equals(propBasedIndex.getLookupable())) && (operator.equals(propBasedIndex.getFilterOperator()))) {          return new Pair<FilterValueSetParam,FilterParamIndexBase>(parameter,index);        }      } else       if (index instanceof FilterParamIndexBooleanExpr && parameters.size() == 1) {        if (operator.equals(FilterOperator.BOOLEAN_EXPRESSION)) {          return new Pair<FilterValueSetParam,FilterParamIndexBase>(parameter,index);        }      }    }  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.294 -0500",hash_original_method="F34478A6D1616AB2836BA2A212AE0D49",hash_generated_method="407CF276C84C9D1F86E52E8ABF982FBB") public WarningHeader createWarningHeader(String agent,int code,String comment) throws ParseException, InvalidArgumentException {  if (agent == null)   throw new NullPointerException("null arg");  Warning warning=new Warning();  warning.setAgent(agent);  warning.setCode(code);  warning.setText(comment);  return warning;}  }
class C{  public SignatureAttr(CP signature){  this.signature=signature;}  }
class C{  private Builder(MessageRequest messageRequest){  input=new HashMap<String,Object>(messageRequest.input);  context=new HashMap<String,Object>(messageRequest.context);  alternateIntents=messageRequest.alternateIntents;}  }
class C{  @DSComment("Binding data, need modeling to be safe") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:12.981 -0500",hash_original_method="6A184D6E0EB34E61EA380878C12E3D42",hash_generated_method="4725E2AEE9CDDA06641D129FBE976B4B") public void remove(T object){synchronized (mLock) {    if (mOriginalValues != null) {      mOriginalValues.remove(object);    } else {      mObjects.remove(object);    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public static void invokeIfExists(Object obj,String methodName,float newValue){  try {    invoke(obj,methodName,newValue);  } catch (  NoSuchMethodException e) {  }}  }
class C{  @Override public Object touch(int row){  used=true;  return super.touch(row);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:13.938 -0500",hash_original_method="18A0C6CD1FD66E60B7FF0A9F205CF54C",hash_generated_method="B5384DD3FDF574EF210A93042D49C1B6") public String toString(){  return "primary error: " + getPrimaryError() + " certificate: "+ getCertificate()+ " on URL: "+ getUrl();}  }
class C{  private void injectMotionEvent(int inputSource,int action,long when,float x,float y,float pressure){  final float DEFAULT_SIZE=1.0f;  final int DEFAULT_META_STATE=0;  final float DEFAULT_PRECISION_X=1.0f;  final float DEFAULT_PRECISION_Y=1.0f;  final int DEFAULT_DEVICE_ID=0;  final int DEFAULT_EDGE_FLAGS=0;  MotionEvent event=MotionEvent.obtain(when,when,action,x,y,pressure,DEFAULT_SIZE,DEFAULT_META_STATE,DEFAULT_PRECISION_X,DEFAULT_PRECISION_Y,DEFAULT_DEVICE_ID,DEFAULT_EDGE_FLAGS);  event.setSource(inputSource);  Log.i(TAG,"injectMotionEvent: " + event);  InputManager.getInstance().injectInputEvent(event,InputManager.INJECT_INPUT_EVENT_MODE_WAIT_FOR_FINISH);}  }
class C{  public String reset(){  append("reset()");  clear();  return (null);}  }
class C{  public void addSelectionPaths(TreePath[] paths){  int newPathLength=((paths == null) ? 0 : paths.length);  if (newPathLength > 0) {    if (selectionMode == TreeSelectionModel.SINGLE_TREE_SELECTION) {      setSelectionPaths(paths);    } else     if (selectionMode == TreeSelectionModel.CONTIGUOUS_TREE_SELECTION && !canPathsBeAdded(paths)) {      if (arePathsContiguous(paths)) {        setSelectionPaths(paths);      } else {        TreePath[] newPaths=new TreePath[1];        newPaths[0]=paths[0];        setSelectionPaths(newPaths);      }    } else {      int counter, validCount;      int oldCount;      TreePath beginLeadPath=leadPath;      Vector<PathPlaceHolder> cPaths=null;      if (selection == null)       oldCount=0; else       oldCount=selection.length;      lastPaths.clear();      for (counter=0, validCount=0; counter < newPathLength; counter++) {        if (paths[counter] != null) {          if (uniquePaths.get(paths[counter]) == null) {            validCount++;            if (cPaths == null)             cPaths=new Vector<PathPlaceHolder>();            cPaths.addElement(new PathPlaceHolder(paths[counter],true));            uniquePaths.put(paths[counter],Boolean.TRUE);            lastPaths.put(paths[counter],Boolean.TRUE);          }          leadPath=paths[counter];        }      }      if (leadPath == null) {        leadPath=beginLeadPath;      }      if (validCount > 0) {        TreePath newSelection[]=new TreePath[oldCount + validCount];        if (oldCount > 0)         System.arraycopy(selection,0,newSelection,0,oldCount);        if (validCount != paths.length) {          Enumeration<TreePath> newPaths=lastPaths.keys();          counter=oldCount;          while (newPaths.hasMoreElements()) {            newSelection[counter++]=newPaths.nextElement();          }        } else {          System.arraycopy(paths,0,newSelection,oldCount,validCount);        }        selection=newSelection;        insureUniqueness();        updateLeadIndex();        resetRowSelection();        notifyPathChange(cPaths,beginLeadPath);      } else       leadPath=beginLeadPath;      lastPaths.clear();    }  }}  }
class C{  public void traceObjectNotInBootImage(){  traceNulledWord(": object not in bootimage");}  }
class C{  public IconicsDrawable iconOffsetYRes(int iconOffsetYRes){  return iconOffsetYPx(mContext.getResources().getDimensionPixelSize(iconOffsetYRes));}  }
class C{  private void construct(String domain,Map<String,String> props) throws MalformedObjectNameException {  if (domain == null)   throw new NullPointerException("domain cannot be null");  if (props == null)   throw new NullPointerException("key property list cannot be null");  if (props.isEmpty())   throw new MalformedObjectNameException("key property list cannot be empty");  if (!isDomain(domain))   throw new MalformedObjectNameException("Invalid domain: " + domain);  final StringBuilder sb=new StringBuilder();  sb.append(domain).append(':');  _domain_length=domain.length();  int nb_props=props.size();  _kp_array=new Property[nb_props];  String[] keys=new String[nb_props];  final Map<String,Property> keys_map=new HashMap<String,Property>();  Property prop;  int key_index;  int i=0;  for (  Map.Entry<String,String> entry : props.entrySet()) {    if (sb.length() > 0)     sb.append(",");    String key=entry.getKey();    String value;    try {      value=entry.getValue();    } catch (    ClassCastException e) {      throw new MalformedObjectNameException(e.getMessage());    }    key_index=sb.length();    checkKey(key);    sb.append(key);    keys[i]=key;    sb.append("=");    boolean value_pattern=checkValue(value);    sb.append(value);    if (!value_pattern) {      prop=new Property(key_index,key.length(),value.length());    } else {      _property_value_pattern=true;      prop=new PatternProperty(key_index,key.length(),value.length());    }    addProperty(prop,i,keys_map,key);    i++;  }  int len=sb.length();  char[] initial_chars=new char[len];  sb.getChars(0,len,initial_chars,0);  char[] canonical_chars=new char[len];  System.arraycopy(initial_chars,0,canonical_chars,0,_domain_length + 1);  setCanonicalName(initial_chars,canonical_chars,keys,keys_map,_domain_length + 1,_kp_array.length);}  }
class C{  public static void onEvent(final Context context,final String event_id){  onEvent(context,event_id,1);}  }
class C{  public void exit(){  onExit();  System.exit(0);}  }
class C{  public boolean isHidden(){  return hidden;}  }
class C{  @Override public void updateCharacterStream(String columnLabel,Reader x) throws SQLException {  updateCharacterStream(columnLabel,x,-1);}  }
class C{  public int deleteTrigger(Connection conn,TriggerKey triggerKey) throws SQLException {  PreparedStatement ps=null;  deleteTriggerExtension(conn,triggerKey);  try {    ps=conn.prepareStatement(rtp(DELETE_TRIGGER));    ps.setString(1,triggerKey.getName());    ps.setString(2,triggerKey.getGroup());    return ps.executeUpdate();  }  finally {    closeStatement(ps);  }}  }
class C{  public void write(byte b[],int off,int len) throws IOException {  writeBytes(b,off,len);}  }
class C{  protected List<IEditProposal> sort(List<IEditProposal> proposals){  return proposals;}  }
class C{  public List<byte[]> write(List<InternalLog> logs) throws IOException {  final List<Put> puts=new ArrayList<Put>(logs.size());  final List<byte[]> result=new ArrayList<byte[]>(logs.size());  for (  InternalLog log : logs) {    final byte[] rowkey=RowkeyBuilder.buildRowkey(log);    final Put p=new Put(rowkey);    populateColumnValues(p,log);    puts.add(p);    final List<byte[]> indexRowkeys=log.getIndexRowkeys();    if (indexRowkeys != null) {      writeIndexes(rowkey,indexRowkeys,puts);    }    result.add(rowkey);  }  tbl.put(puts);  return result;}  }
class C{  public boolean isAttributeCapability(){  return ((m_Flags & ATTRIBUTE_CAPABILITY) == ATTRIBUTE_CAPABILITY);}  }
class C{  public PCA(DataSet dataSet,int maxPCs){  this(dataSet,maxPCs,1e-4);}  }
class C{  public boolean check(ResultEntry log){  if (this.level.compareTo(log.getLevel()) < 0) {    return false;  }  if (!(this.sources.contains(log.getSource()) || this.sources.isEmpty())) {    return false;  }  return true;}  }
class C{  public void release(){  reset();  releaseKeepSessionIdAudioTrack();}  }
class C{  public static <T,V>LazyIterable<V> collect(Iterable<T> iterable,Function<? super T,? extends V> function){  return new CollectIterable<>(iterable,function);}  }
class C{  private static String intToHexString(int n){  char[] buf=new char[8];  for (int i=7; i >= 0; i--) {    buf[i]=HEX_DIGITS[n & 0x0F];    n>>>=4;  }  return new String(buf);}  }
class C{  @Override public final void incomingObject(AdeInputStream stream) throws AdeException, AdeFlowException {  super.incomingObject(stream);  final AdeMessageReader adeMessageReader=stream.getReader();  if (adeMessageReader.getLineNumber() > 0) {    MessageRateStats.generateReportForAllSources();  }}  }
class C{  public static boolean intersectCircleCircle(Vector2fc centerA,float radiusSquaredA,Vector2fc centerB,float radiusSquaredB,Vector3f intersectionCenterAndHL){  return intersectCircleCircle(centerA.x(),centerA.y(),radiusSquaredA,centerB.x(),centerB.y(),radiusSquaredB,intersectionCenterAndHL);}  }
class C{  public void add(double x){  Cell[] as;  long b, v;  int m;  Cell a;  if ((as=cells) != null || !casBase(b=base,Double.doubleToRawLongBits(Double.longBitsToDouble(b) + x))) {    boolean uncontended=true;    if (as == null || (m=as.length - 1) < 0 || (a=as[getProbe() & m]) == null || !(uncontended=a.cas(v=a.value,Double.doubleToRawLongBits(Double.longBitsToDouble(v) + x))))     doubleAccumulate(x,null,uncontended);  }}  }
class C{  void updateIM(IntersectionMatrix im){  Edge.updateIM(label,im);}  }
class C{  public void testInvalidTime() throws Exception {  testInvalidGpx(INVALID_TIME_GPX);}  }
class C{  public static void writeContentType(WspEncodingVersion wspEncodingVersion,OutputStream theOs,MimeHeader theContentType) throws IOException {  if (theContentType.getParameters().isEmpty()) {    writeContentType(wspEncodingVersion,theOs,theContentType.getValue());  } else {    String theContentTypeStr=theContentType.getValue();    int wellKnownContentType=WspUtil.getWellKnownContentTypeId(wspEncodingVersion,theContentTypeStr.toLowerCase());    ByteArrayOutputStream baos=new ByteArrayOutputStream();    if (wellKnownContentType == -1) {      writeExtensionMedia(baos,theContentType.getValue());    } else {      writeInteger(baos,wellKnownContentType);    }    for (    MimeHeaderParameter headerParam : theContentType.getParameters()) {      writeParameter(wspEncodingVersion,baos,headerParam.getName(),headerParam.getValue());    }    baos.close();    writeValueLength(theOs,baos.size());    theOs.write(baos.toByteArray());  }}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case CURSOR_ID:  return isSetCursorId();case VALUES:return isSetValues();}throw new IllegalStateException();}  }
class C{  private void processRetrievedCredential(Credential credential,boolean isHint){  Log.d(TAG,"Credential Retrieved: " + credential.getId() + ":"+ anonymizePassword(credential.getPassword()));  if (!isHint) {    showToast("Credential Retrieved");    mCurrentCredential=credential;    findViewById(R.id.button_delete_loaded_credential).setEnabled(true);  } else {    showToast("Credential Hint Retrieved");  }  mEmailField.setText(credential.getId());  mPasswordField.setText(credential.getPassword());  if (!credential.getIdTokens().isEmpty()) {    IdToken idToken=credential.getIdTokens().get(0);    Intent intent=new Intent(this,MockServer.class).putExtra(MockServer.EXTRA_IDTOKEN,idToken.getIdToken());    startService(intent);  } else {    Log.d(TAG,"Credential does not contain ID Tokens.");  }}  }
class C{  public double distance(Instance first,Instance second,PerformanceStats stats) throws Exception {  return distance(first,second,Double.POSITIVE_INFINITY,stats);}  }
class C{  private boolean isCompatibleVersion(VdcPreCheckResponse vdcResp){  final SoftwareVersion version;  String shortId=vdcInfo.getProperty(GeoServiceJob.VDC_SHORT_ID);  try {    log.info("software version of vdc {} is {}",shortId,vdcResp.getSoftwareVersion());    version=new SoftwareVersion(vdcResp.getSoftwareVersion());  } catch (  InvalidSoftwareVersionException e) {    log.error("software version of vdc {} is incorrect",shortId);    return false;  }  SoftwareVersion myVersion=null;  try {    myVersion=dbClient.getCoordinatorClient().getTargetInfo(RepositoryInfo.class).getCurrentVersion();  } catch (  Exception e) {    String errMsg="Not able to get the software version of current vdc";    log.error(errMsg,e);    throw GeoException.fatals.connectVdcPrecheckFail(shortId,errMsg);  }  log.info("Software version of current vdc: {}",myVersion.toString());  if (myVersion.compareTo(version) == 0) {    log.info("software version equals, pass the version check");  } else   if (myVersion.compareTo(version) < 0) {    log.info("to be added vdc has larger version");    if (!vdcResp.getCompatible()) {      log.error("vdc to be added has larger version but incompatible with current vdc");      return false;    }  } else {    log.info("to be added vdc has smaller version");    if (!helper.isCompatibleVersion(version)) {      log.error("vdc to be added has smaller version but incompatible with current vdc");      return false;    }  }  return true;}  }
class C{  String toString(int indentFactor,int indent){  int i;  int n=length();  if (n == 0) {    return "{}";  }  Enumeration keys=keys();  StringBuffer sb=new StringBuffer("{");  int newindent=indent + indentFactor;  Object o;  if (n == 1) {    o=keys.nextElement();    sb.append(quote(o.toString()));    sb.append(": ");    sb.append(valueToString(this.myHashMap.get(o),indentFactor,indent));  } else {    while (keys.hasMoreElements()) {      o=keys.nextElement();      if (sb.length() > 1) {        sb.append(",\n");      } else {        sb.append('\n');      }      for (i=0; i < newindent; i+=1) {        sb.append(' ');      }      sb.append(quote(o.toString()));      sb.append(": ");      sb.append(valueToString(this.myHashMap.get(o),indentFactor,newindent));    }    if (sb.length() > 1) {      sb.append('\n');      for (i=0; i < indent; i+=1) {        sb.append(' ');      }    }  }  sb.append('}');  return sb.toString();}  }
class C{  void scale(float f){  xx*=f;  xy*=f;  xz*=f;  xo*=f;  yx*=f;  yy*=f;  yz*=f;  yo*=f;  zx*=f;  zy*=f;  zz*=f;  zo*=f;}  }
class C{  private void commitRecipe(){  final IPancheonRecipe recipe=getRecipe();  if (recipe != null) {    this.inputSlot.consume(recipe.getInputFluid().amount,true);    final FluidStack top=recipe.getTopOutputFluid();    if (top != null)     this.topSlot.fill(top,true);    final FluidStack bottom=recipe.getBottomOutputFluid();    if (bottom != null)     this.bottomSlot.fill(bottom,true);    markDirty();    markForUpdate();  }}  }
class C{  public Reducer(InferenceContext ic,RuleEnvironment G,N4JSTypeSystem ts,TypeSystemHelper tsh){  this.ic=ic;  this.G=G;  this.ts=ts;  this.tsh=tsh;}  }
class C{  public void engineSetKeyEntry(String alias,byte[] key,Certificate[] chain) throws KeyStoreException {synchronized (entries) {    PrivateKeyEntry entry=new PrivateKeyEntry();    entry.date=new Date();    entry.protectedKey=key.clone();    if ((chain != null) && (chain.length != 0)) {      entry.chain=chain.clone();    } else {      entry.chain=null;    }    entries.put(alias.toLowerCase(Locale.ENGLISH),entry);  }}  }
class C{  void insertOp(int pos,int length,int op){  int totalLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  for (int i=totalLen - 1; i >= pos; i--) {    m_ops.setOp(i + length,m_ops.getOp(i));  }  m_ops.setOp(pos,op);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,totalLen + length);}  }
class C{  public boolean isIPAddress(){  return addressType != HOSTNAME;}  }
class C{  public Map<Installment,BigDecimal> prepareRsnWiseCollForProp(final Property property){  Installment inst=null;  final Map<Installment,BigDecimal> instCollMap=new HashMap<Installment,BigDecimal>();  final EgDemand egDemand=ptDemandDAO.getNonHistoryCurrDmdForProperty(property);  String demandReason="";  BigDecimal amount=BigDecimal.ZERO;  BigDecimal collection=BigDecimal.ZERO;  for (  final EgDemandDetails dmdDet : egDemand.getEgDemandDetails()) {    amount=BigDecimal.ZERO;    collection=dmdDet.getAmtCollected();    demandReason=dmdDet.getEgDemandReason().getEgDemandReasonMaster().getCode();    if (!demandReason.equals(DEMANDRSN_CODE_PENALTY_FINES)) {      inst=dmdDet.getEgDemandReason().getEgInstallmentMaster();      if (instCollMap.get(inst) == null)       instCollMap.put(inst,collection); else {        amount=instCollMap.get(inst);        amount=amount.add(collection);        instCollMap.put(inst,amount);      }    }  }  return instCollMap;}  }
class C{  void reset(Component owner,Component contents,int ownerX,int ownerY){  super.reset(owner,contents,ownerX,ownerY);  Component component=getComponent();  component.setLocation(ownerX,ownerY);  rootPane.getContentPane().add(contents,BorderLayout.CENTER);  contents.invalidate();  component.validate();  pack();}  }
class C{  public int next(int options){  int c=DONE;  isEscaped=false;  for (; ; ) {    c=_current();    _advance(UTF16.getCharCount(c));    if (c == SymbolTable.SYMBOL_REF && buf == null && (options & PARSE_VARIABLES) != 0 && sym != null) {      String name=sym.parseReference(text,pos,text.length());      if (name == null) {        break;      }      bufPos=0;      buf=sym.lookup(name);      if (buf == null) {        throw new IllegalArgumentException("Undefined variable: " + name);      }      if (buf.length == 0) {        buf=null;      }      continue;    }    if ((options & SKIP_WHITESPACE) != 0 && UCharacterProperty.isRuleWhiteSpace(c)) {      continue;    }    if (c == '\\' && (options & PARSE_ESCAPES) != 0) {      int offset[]=new int[]{0};      c=Utility.unescapeAt(lookahead(),offset);      jumpahead(offset[0]);      isEscaped=true;      if (c < 0) {        throw new IllegalArgumentException("Invalid escape");      }    }    break;  }  return c;}  }
class C{  public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {  String methodName=method.getName();  Class[] params=method.getParameterTypes();  if (methodName.equals("equals") && params.length == 1 && params[0].equals(Object.class)) {    Object value=args[0];    if (value == null || !Proxy.isProxyClass(value.getClass()))     return new Boolean(false);    BurlapProxy handler=(BurlapProxy)Proxy.getInvocationHandler(value);    return new Boolean(_url.equals(handler.getURL()));  } else   if (methodName.equals("hashCode") && params.length == 0)   return new Integer(_url.hashCode()); else   if (methodName.equals("getBurlapType"))   return proxy.getClass().getInterfaces()[0].getName(); else   if (methodName.equals("getBurlapURL"))   return _url.toString(); else   if (methodName.equals("toString") && params.length == 0)   return getClass().getSimpleName() + "[" + _url+ "]";  InputStream is=null;  URLConnection conn=null;  HttpURLConnection httpConn=null;  try {    conn=_factory.openConnection(_url);    httpConn=(HttpURLConnection)conn;    httpConn.setRequestMethod("POST");    conn.setRequestProperty("Content-Type","text/xml");    OutputStream os;    try {      os=conn.getOutputStream();    } catch (    Exception e) {      throw new BurlapRuntimeException(e);    }    BurlapOutput out=_factory.getBurlapOutput(os);    if (!_factory.isOverloadEnabled()) {    } else     if (args != null)     methodName=methodName + "__" + args.length; else     methodName=methodName + "__0";    if (log.isLoggable(Level.FINE))     log.fine(this + " calling " + methodName+ " ("+ method+ ")");    out.call(methodName,args);    try {      os.flush();    } catch (    Exception e) {      throw new BurlapRuntimeException(e);    }    if (conn instanceof HttpURLConnection) {      httpConn=(HttpURLConnection)conn;      int code=500;      try {        code=httpConn.getResponseCode();      } catch (      Exception e) {      }      if (code != 200) {        StringBuffer sb=new StringBuffer();        int ch;        try {          is=httpConn.getInputStream();          if (is != null) {            while ((ch=is.read()) >= 0)             sb.append((char)ch);            is.close();          }          is=httpConn.getErrorStream();          if (is != null) {            while ((ch=is.read()) >= 0)             sb.append((char)ch);          }        } catch (        FileNotFoundException e) {          throw new BurlapRuntimeException(code + ": " + String.valueOf(e));        }catch (        IOException e) {        }        if (is != null)         is.close();        throw new BurlapProtocolException(code + ": " + sb.toString());      }    }    is=conn.getInputStream();    AbstractBurlapInput in=_factory.getBurlapInput(is);    return in.readReply(method.getReturnType());  } catch (  BurlapProtocolException e) {    throw new BurlapRuntimeException(e);  } finally {    try {      if (is != null)       is.close();    } catch (    IOException e) {    }    if (httpConn != null)     httpConn.disconnect();  }}  }
class C{  public static void assertWarnings(int expectedSize,StreamReader reader){  assertWarnings(expectedSize,reader.getWarnings());}  }
class C{  private int checkDuplicates(byte[] in,int[] out,HashMap<String,Integer> urlToOutOffset,int inFirst,int inLast,int outOffset){  if (inFirst < 0 || inLast <= inFirst)   return 0;  int urlLen=inLast - inFirst;  String url;  try {    url=new String(in,inFirst,urlLen,"UTF-8");  } catch (  Exception exc) {    return 0;  }  Integer firstOutOffset=urlToOutOffset.get(url);  if (firstOutOffset == null) {    urlToOutOffset.put(url,outOffset);    return 0;  }  out[firstOutOffset]--;  return firstOutOffset;}  }
class C{  public void writeXML(File file) throws IOException {  OutputStream out=new FileOutputStream(file);  if (file.getName().endsWith(".gz")) {    out=new GZIPOutputStream(out);  }  writeXML(out);}  }
class C{  private void createTableColumnLabels(Composite parent){  createTableColumnLabel(parent,"Filter Name",146);  createTableColumnLabel(parent,"Filter Spec",496);  createTableColumnLabel(parent,"Enabled",46);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tnumber of clusters. If omitted or -1 specified, then \n" + "\tcross validation is used to select the number of clusters.","N",1,"-N <num>"));  result.addElement(new Option("\tNumber of folds to use when cross-validating to find the best number of clusters.","X",1,"-X <num>"));  result.addElement(new Option("\tMaximum number of clusters to consider during cross-validation. If omitted or -1 specified, then \n" + "\tthere is no upper limit on the number of clusters.","max",1,"-max <num>"));  result.addElement(new Option("\tMinimum improvement in cross-validated log likelihood required" + "\n\tto consider increasing the number of clusters." + "\n\t(default 1e-6)","ll-cv",1,"-ll-cv <num>"));  result.addElement(new Option("\tmax iterations." + "\n\t(default 100)","I",1,"-I <num>"));  result.addElement(new Option("\tMinimum improvement in log likelihood required" + "\n\tto perform another iteration of the E and M steps." + "\n\t(default 1e-6)","ll-iter",1,"-ll-iter <num>"));  result.addElement(new Option("\tverbose.","V",0,"-V"));  result.addElement(new Option("\tminimum allowable standard deviation for normal density\n" + "\tcomputation\n" + "\t(default 1e-6)","M",1,"-M <num>"));  result.addElement(new Option("\tDisplay model in old format (good when there are " + "many clusters)\n","O",0,"-O"));  result.addElement(new Option("\tNumber of execution slots.\n" + "\t(default 1 - i.e. no parallelism)","num-slots",1,"-num-slots <num>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public TimeChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer){  super(dataset,renderer);}  }
class C{  public synchronized boolean isScanFinished(){  return isProcessFinished;}  }
class C{  public void navigateTo(Fragment fragment){  FragmentTransaction ft=fragmentManager.beginTransaction();  String fragmentTag=fragment.toString();  ft.add(fragmentContainerId,fragment,fragmentTag);  ft.addToBackStack(fragmentTag);  ft.commit();  currentFragent=fragment;  if (fragment instanceof MaterialToolbarSupplier)   ((MaterialToolbarSupplier)fragment).setPresenter(this);}  }
class C{  public ChatMessage sendMessage(Geoloc geoloc) throws RcsPermissionDeniedException, RcsPersistentStorageException, RcsGenericException {  try {    return new ChatMessage(mGroupChatInf.sendMessage2(geoloc));  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsPermissionDeniedException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  protected void addDomainIDPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Domain_domainID_feature"),getString("_UI_PropertyDescriptor_description","_UI_Domain_domainID_feature","_UI_Domain_type"),TypesPackage.Literals.DOMAIN__DOMAIN_ID,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public SVGOMAltGlyphItemElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public void makeSet(R e){  matches.put(e,e);  ranks.put(e,0);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Main(){}  }
class C{  private static String updateLine(String line){  String[] sa=line.split(",");  int year=Integer.parseInt(sa[8].substring(0,4));  int month=Integer.parseInt(sa[8].substring(4,6));  int day=Integer.parseInt(sa[8].substring(6,8));  int hour=Integer.parseInt(sa[9]);  int min=Integer.parseInt(sa[12]);  if (hour < 2 || (hour == 2 && min < 30)) {    day--;    hour+=24;  }  return String.format("%s,%s,%s,%s,%s,%s,%s,%s,%d%02d%02d,%d,%s,%s,%d",sa[0],sa[1],sa[2],sa[3],sa[4],sa[5],sa[6],sa[7],year,month,day,hour,sa[10],sa[11],min);}  }
class C{  public static String[] toStringArray(byte[] array){  if (array == null) {    return null;  }  String[] result=new String[array.length];  for (int i=0; i < array.length; i++) {    result[i]=String.valueOf(array[i]);  }  return result;}  }
class C{  public CBinaryDataSynchronizer(final JPanel hexPanel,final JHexView hexView,final INaviModule module){  m_hexPanel=Preconditions.checkNotNull(hexPanel,"IE01957: Hex panel argument can not be null");  Preconditions.checkNotNull(hexView,"IE01958: Hex view argument can not be null");  m_module=Preconditions.checkNotNull(module,"IE01959: Module argument can not be null");  updateBorder();  hexView.setData(m_provider=new CDataProvider(module));  module.addListener(m_moduleListener);}  }
class C{  static void run(final String[] args){  try {    final Class<?> clazz=Class.forName("games.stendhal.client.update.Bootstrap");    final Object object=clazz.newInstance();    final Object[] params=new Object[2];    params[0]="games.stendhal.client.stendhal";    params[1]=args;    final Class<?>[] paramTypes=new Class[2];    for (int i=0; i < params.length; i++) {      paramTypes[i]=params[i].getClass();    }    final Method method=clazz.getMethod("boot",paramTypes);    method.invoke(object,params);  } catch (  final Exception e) {    e.printStackTrace();    System.exit(1);  }}  }
class C{  public GuacamoleUpstreamException(Throwable cause){  super(cause);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void checkActionSupport(Action actionType){  if (!isSupported(actionType)) {    throw new UnsupportedOperationException("The " + actionType.name() + " action is not supported on the current platform!");  }}  }
class C{  public int indexZ(int i,int j){  return this.xValues.length * j + i;}  }
class C{  @Override protected String defaultErrorMessage(AnnotatedTypeMirror type1,AnnotatedTypeMirror type2,Void v){  throw new UnsupportedOperationException("Comparing two different subclasses of AnnotatedTypeMirror!\n" + "type1=" + type1 + "\n"+ "type2="+ type2+ "\n");}  }
class C{  public void abortAnimation(){  mCurrX=mFinalX;  mCurrY=mFinalY;  mFinished=true;}  }
class C{  protected void initAgents(MessageLogger logger){  List<MapNode> markers=map.getOsmMap().getMarkers();  if (markers.size() < 2) {    logger.log("Error: Please set two markers with mouse-left.");    return;  }  visitedStates.clear();  String[] locs=new String[markers.size()];  for (int i=0; i < markers.size(); i++) {    MapNode node=markers.get(i);    Point2D pt=new Point2D(node.getLon(),node.getLat());    locs[i]=map.getNearestLocation(pt);  }  heuristic.adaptToGoal(locs[1],map);  Agent agent=null;  MapAgentFrame.SelectionState state=frame.getSelection();switch (state.getIndex(MapAgentFrame.AGENT_SEL)) {case 0:    agent=new MapAgent(map,env,search,new String[]{locs[1]});  break;case 1:Problem p=new BidirectionalMapProblem(map,null,locs[1]);OnlineSearchProblem osp=new OnlineSearchProblem(p.getActionsFunction(),p.getGoalTest(),p.getStepCostFunction());agent=new LRTAStarAgent(osp,MapFunctionFactory.getPerceptToStateFunction(),heuristic);break;}env.addAgent(agent,locs[0]);}  }
class C{  @Override public void onPageSelected(int position){  mSavedPosition=position;  mHasSavedPosition=true;  if (mDownloaderBinder == null) {    mRequestWaitingForBinder=true;  } else {    OCFile currentFile=mPreviewImagePagerAdapter.getFileAt(position);    getSupportActionBar().setTitle(currentFile.getFileName());    mDrawerToggle.setDrawerIndicatorEnabled(false);    ((PreviewImagePagerAdapter)mViewPager.getAdapter()).resetZoom();  }}  }
class C{  public void notify(String msg){  if (logger != null)   logger.log(msg);}  }
class C{  @Override public GamaMap mapValue(final IScope scope,final IType keyType,final IType contentType,final boolean copy){  final GamaMap result=GamaMapFactory.create(keyType,contentType);  result.setValueAtIndex(scope,key,value);  return result;}  }
class C{  public int queryLessThanCount(String type,int index,String value,int visibilityScope) throws CloudException {  return ((Integer)queryImpl(type,value,index,0,0,visibilityScope,3,0,false,true,false,null)).intValue();}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  public void visitMethodInsn(int opcode,String owner,String name,String desc){  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc);  }}  }
class C{  public void addValue(Value value){  valueMap.put(value.getKey(),value);}  }
class C{  private static void checkParameters(CategorySeries dataset,DefaultRenderer renderer){  if (dataset == null || renderer == null || dataset.getItemCount() != renderer.getSeriesRendererCount()) {    throw new IllegalArgumentException("Dataset and renderer should be not null and the dataset number of items should be equal to the number of series renderers");  }}  }
class C{  public void testGetServletNamesForJspFileWithMultipleServlets() throws Exception {  String xml=WEBAPP_TEST_HEADER + "  <servlet>" + "    <servlet-name>s1</servlet-name>"+ "    <jsp-file>/s1.jsp</jsp-file>"+ "  </servlet>"+ "  <servlet>"+ "    <servlet-name>s2</servlet-name>"+ "    <servlet-class>sclass2</servlet-class>"+ "  </servlet>"+ "  <servlet>"+ "    <servlet-name>s3</servlet-name>"+ "    <jsp-file>/s3.jsp</jsp-file>"+ "  </servlet>"+ "</web-app>";  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  List<String> servletNames=WebXmlUtils.getServletNamesForJspFile(webXml,"/s3.jsp");  assertEquals(1,servletNames.size());  assertEquals("s3",servletNames.get(0));}  }
class C{  public LazyValue<Form> createBackLazyValue(final Form f){  Vector formNavigationStack=baseFormNavigationStack;  Hashtable p=null;  Command cmd=null;  if (formNavigationStack.size() > 1) {    p=(Hashtable)formNavigationStack.elementAt(formNavigationStack.size() - 2);    String backTitle=getBackCommandText((String)p.get(FORM_STATE_KEY_TITLE));    String commandAction=(String)p.get(FORM_STATE_KEY_NAME);    cmd=createCommandImpl(backTitle,null,BACK_COMMAND_ID,commandAction,true,"");    cmd.putClientProperty(COMMAND_ARGUMENTS,"");    cmd.putClientProperty(COMMAND_ACTION,commandAction);  }  return new LazyValueC(f,p,cmd,this);}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws IOException {  int buckets=capacity();  s.defaultWriteObject();  s.writeInt(buckets);  s.writeInt(size);  internalWriteEntries(s);}  }
class C{  @Override public Object onRetainNonConfigurationInstance(){  FormController formController=Collect.getInstance().getFormController();  if (mFormLoaderTask != null && mFormLoaderTask.getStatus() != AsyncTask.Status.FINISHED)   return mFormLoaderTask;  if (mSaveToDiskTask != null && mSaveToDiskTask.getStatus() != AsyncTask.Status.FINISHED)   return mSaveToDiskTask;  if (formController != null && formController.currentPromptIsQuestion()) {    saveAnswersForCurrentScreen(DO_NOT_EVALUATE_CONSTRAINTS);  }  return null;}  }
class C{  private void copyScheduleIntoFrontier(final int minCapacity,final Iterator<Value> itr){  backing.ensureCapacity(minCapacity);  final Value[] a=backing.array();  int nvertices=0;  while (itr.hasNext()) {    final Value v=itr.next();    a[nvertices++]=v;  }  for (int i=nvertices; i < a.length; i++) {    if (a[i] == null)     break;    a[i]=null;  }  this.vertices=backing.slice(0,nvertices);}  }
class C{  static void appendPatternTo(DateTimeFormatterBuilder builder,String pattern){  parsePatternTo(builder,pattern);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:01.575 -0500",hash_original_method="FCCF2821DEC9011A455F9F98CACE9BF9",hash_generated_method="6429859492A4AC149B8E87DEC540F761") public static ColorStateList valueOf(int color){synchronized (sCache) {    WeakReference<ColorStateList> ref=sCache.get(color);    ColorStateList csl=ref != null ? ref.get() : null;    if (csl != null) {      return csl;    }    csl=new ColorStateList(EMPTY,new int[]{color});    sCache.put(color,new WeakReference<ColorStateList>(csl));    return csl;  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.195 -0500",hash_original_method="EF260C0902D2E84B94B185FE48F20D51",hash_generated_method="8021CD6B00DDAD56B52A7509EA9C07EF") private void guessMimeType(){  if (URLUtil.isDataUrl(mUrl) && mMimeType.length() != 0) {    cancel();    final String text=mContext.getString(R.string.httpErrorBadUrl);    handleError(EventHandler.ERROR_BAD_URL,text);  } else {    mMimeType="text/html";    String newMimeType=guessMimeTypeFromExtension(mUrl);    if (newMimeType != null) {      mMimeType=newMimeType;    }  }}  }
class C{  public static CompilationUnit parseWithASTProvider(ITypeRoot typeRoot,boolean resolveBindings,IProgressMonitor pm){  CompilationUnit cuNode=SharedASTProvider.getAST(typeRoot,SharedASTProvider.WAIT_ACTIVE_ONLY,pm);  if (cuNode != null) {    return cuNode;  } else {    return new RefactoringASTParser(ASTProvider.SHARED_AST_LEVEL).parse(typeRoot,null,resolveBindings,ASTProvider.SHARED_AST_STATEMENT_RECOVERY,ASTProvider.SHARED_BINDING_RECOVERY,pm);  }}  }
class C{  public static <T>T[] copyFrom(T[] array){  return Arrays.copyOf(array,array.length);}  }
class C{  public RegularDegreeEdgeIterator(RegularDegreeEdgePool regularDegreeEdgePool){  this.regularDegreeEdgePool=regularDegreeEdgePool;}  }
class C{  public static String toString(long x){  return toString(x,10);}  }
class C{  public void mouseClicked(MouseEvent e){  mouseSupport.fireMapMouseClicked(e);  if (e.getSource() instanceof MapBean) {    if (e.getClickCount() >= 2) {      drawDistanceObjects=false;      cleanUp();      ((MapBean)e.getSource()).repaint();    }  }}  }
class C{  protected void updateNode(ResultNode node){  while (node != null) {    testTreeViewer.update(node,null);    node=node.getParent();  }}  }
class C{  public void put(Value key,V value){  checkSizePut();  internalPut(key,value);}  }
class C{  protected void configurePostEnhancerEvent(){}  }
class C{  public static void createJavaStandardProject(SWTWorkbenchBot bot,String projectName,String packageName) throws Exception {  GwtRuntimeTestUtilities.addDefaultRuntime();  SwtBotSdkActions.setupGwtSdk(bot);  SwtBotProjectActions.createWebAppProject(bot,projectName,packageName,true,true);  SwtBotWorkbenchActions.waitForIdle(bot);}  }
class C{  public S_Var createS_Var(){  S_VarImpl s_Var=new S_VarImpl();  return s_Var;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  public void disconnected(boolean wasIdle){synchronized (this) {    if (idleFuture != null)     idleFuture.cancel(false);    if (wasIdle)     scheduleIdleReconnectTask(idleReconnectIntervalMsec);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:55.314 -0500",hash_original_method="A7BEDAC109747D82D490F131B6CCC1A3",hash_generated_method="8AB06C0BE9F5D455EF3BC83A95D0EBA3") public TimeInfo(NtpV3Packet message,long returnTime){  this(message,returnTime,null,true);}  }
class C{  public static void forceDelete(File file) throws IOException {  if (file.isDirectory()) {    deleteDirectory(file);  } else {    boolean filePresent=file.exists();    if (!file.delete()) {      if (!filePresent) {        throw new FileNotFoundException("File does not exist: " + file);      }      String message="Unable to delete file: " + file;      throw new IOException(message);    }  }}  }
class C{  public Address leader(){  return leader;}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x87797BDD,version=150) public int sceHttpsLoadDefaultCert(int certIssuer,int certType){  return 0;}  }
class C{  public void testClose() throws SQLException {  PreparedStatement ps1=null;  PreparedStatement ps2=null;  try {    Statement s=conn.createStatement();    s.addBatch("create table t1 (a text);");    s.addBatch("insert into t1 values('abc');");    s.addBatch("insert into t1 values('def');");    s.addBatch("insert into t1 values('ghi');");    s.executeBatch();    s.close();    conn.commit();    ps1=conn.prepareStatement("select * from t1");    ps2=conn.prepareStatement("select * from t1 whe a like '?000'");    ResultSet rs1=ps1.executeQuery();    try {      ResultSet rs2=ps2.executeQuery();      while (rs2.next()) {      }      fail("Should get SQLException");    } catch (    SQLException sqle) {    }    while (rs1.next()) {    }    conn.commit();    rs1.close();    ps1.close();    ps2.close();  }  finally {    try {      if (ps1 != null)       ps1.close();      if (ps2 != null)       ps2.close();      conn.rollback();    } catch (    SQLException e) {      e.printStackTrace();    }  }}  }
class C{  public void add(byte[] v){  if (v == null) {    addNull();  } else {    _add(binaryNode(v));  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public td addWindowCenter(boolean nowrap){  if (m_table == null)   return null;  td center=new td("windowCenter",AlignType.CENTER,AlignType.MIDDLE,nowrap);  center.setColSpan(2);  m_table.addElement(new tr().addElement(center));  return center;}  }
class C{  public void testRouting(boolean withDestinations,TransitLayer transitLayer){  LOG.info("Routing from random vertices in the graph...");  LOG.info("{} goal direction.",withDestinations ? "Using" : "Not using");  StreetRouter router=new StreetRouter(this);  long startTime=System.currentTimeMillis();  final int N=1_000;  final int nVertices=outgoingEdges.size();  Random random=new Random();  for (int n=0; n < N; n++) {    int from=random.nextInt(nVertices);    VertexStore.Vertex vertex=vertexStore.getCursor(from);    router.setOrigin(from);    router.toVertex=withDestinations ? random.nextInt(nVertices) : StreetRouter.ALL_VERTICES;    if (n != 0 && n % 100 == 0) {      LOG.info("    {}/{} searches",n,N);    }  }  double eTime=System.currentTimeMillis() - startTime;  LOG.info("average response time {} msec",eTime / N);}  }
class C{  public ObserveRequest(ContentFormat format,int objectId,int objectInstanceId,int resourceId){  this(format,new LwM2mPath(objectId,objectInstanceId,resourceId),null);}  }
class C{  public String ZMaxTipText(){  return "Z max threshold for responses";}  }
class C{  public void dispose() throws IOException {  string=null;}  }
class C{  public static double bessi1(double x){  double ax, ans;  double y;  if ((ax=Math.abs(x)) < 3.75) {    y=x / 3.75;    y*=y;    ans=ax * (0.5 + y * (0.87890594 + y * (0.51498869 + y * (0.15084934 + y * (0.2658733e-1 + y * (0.301532e-2 + y * 0.32411e-3))))));  } else {    y=3.75 / ax;    ans=0.2282967e-1 + y * (-0.2895312e-1 + y * (0.1787654e-1 - y * 0.420059e-2));    ans=0.39894228 + y * (-0.3988024e-1 + y * (-0.362018e-2 + y * (0.163801e-2 + y * (-0.1031555e-1 + y * ans))));    ans*=(Math.exp(ax) / Math.sqrt(ax));  }  return x < 0.0 ? -ans : ans;}  }
class C{  public void sign(SigningCtx ctx) throws Exception {  signature=ctx.buildSignature(builder);}  }
class C{  public Achievement(String name,String description){  this.name=name;  this.description=description;  achieved.addListener(listener);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  public void debugXML(String s){  if (log.isLoggable(Level.FINE)) {    log.fine("-------------------------------------------------------------------------------------");    log.fine("\n" + s);    log.fine("-------------------------------------------------------------------------------------");  }}  }
class C{  private void generateSerializationHostileMethods(){  MethodVisitor mv=cw.visitMethod(ACC_PRIVATE + ACC_FINAL,NAME_METHOD_WRITE_OBJECT,DESCR_METHOD_WRITE_OBJECT,null,SER_HOSTILE_EXCEPTIONS);  mv.visitCode();  mv.visitTypeInsn(NEW,NAME_NOT_SERIALIZABLE_EXCEPTION);  mv.visitInsn(DUP);  mv.visitLdcInsn("Non-serializable lambda");  mv.visitMethodInsn(INVOKESPECIAL,NAME_NOT_SERIALIZABLE_EXCEPTION,NAME_CTOR,DESCR_CTOR_NOT_SERIALIZABLE_EXCEPTION,false);  mv.visitInsn(ATHROW);  mv.visitMaxs(-1,-1);  mv.visitEnd();  mv=cw.visitMethod(ACC_PRIVATE + ACC_FINAL,NAME_METHOD_READ_OBJECT,DESCR_METHOD_READ_OBJECT,null,SER_HOSTILE_EXCEPTIONS);  mv.visitCode();  mv.visitTypeInsn(NEW,NAME_NOT_SERIALIZABLE_EXCEPTION);  mv.visitInsn(DUP);  mv.visitLdcInsn("Non-serializable lambda");  mv.visitMethodInsn(INVOKESPECIAL,NAME_NOT_SERIALIZABLE_EXCEPTION,NAME_CTOR,DESCR_CTOR_NOT_SERIALIZABLE_EXCEPTION,false);  mv.visitInsn(ATHROW);  mv.visitMaxs(-1,-1);  mv.visitEnd();}  }
class C{  private static int patternMatchVariance(int[] counters,int[] pattern,int maxIndividualVariance){  int numCounters=counters.length;  int total=0;  int patternLength=0;  for (int i=0; i < numCounters; i++) {    total+=counters[i];    patternLength+=pattern[i];  }  if (total < patternLength) {    return Integer.MAX_VALUE;  }  int unitBarWidth=(total << INTEGER_MATH_SHIFT) / patternLength;  maxIndividualVariance=(maxIndividualVariance * unitBarWidth) >> 8;  int totalVariance=0;  for (int x=0; x < numCounters; x++) {    int counter=counters[x] << INTEGER_MATH_SHIFT;    int scaledPattern=pattern[x] * unitBarWidth;    int variance=counter > scaledPattern ? counter - scaledPattern : scaledPattern - counter;    if (variance > maxIndividualVariance) {      return Integer.MAX_VALUE;    }    totalVariance+=variance;  }  return totalVariance / total;}  }
class C{  public static final String timeStamp(){  return timeStamp(new Date(),null);}  }
class C{  static final void decode(byte[] src,int srcOff,int len,byte[] dst,int dstOff){  dst[dstOff]=(byte)((DECODE_TABLE[src[srcOff] & 0x0FF] << 2) | (DECODE_TABLE[src[srcOff + 1] & 0x0FF] >> 4));  if (len > 2) {    dst[dstOff + 1]=(byte)(((DECODE_TABLE[src[srcOff + 1] & 0x0FF] << 4) & 0xF0) | (DECODE_TABLE[src[srcOff + 2] & 0x0FF] >> 2));    if (len > 3) {      dst[dstOff + 2]=(byte)(((DECODE_TABLE[src[srcOff + 2] & 0x0FF] << 6) & 0xC0) | DECODE_TABLE[src[srcOff + 3] & 0x0FF]);    }  }}  }
class C{  public void error(String msg){  log(Log.ERROR,msg,null);}  }
class C{  private static String initialise(Token currentToken,int[][] expectedTokenSequences,String[] tokenImage){  String eol=System.getProperty("line.separator","\n");  StringBuffer expected=new StringBuffer();  int maxSize=0;  for (int i=0; i < expectedTokenSequences.length; i++) {    if (maxSize < expectedTokenSequences[i].length) {      maxSize=expectedTokenSequences[i].length;    }    for (int j=0; j < expectedTokenSequences[i].length; j++) {      expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');    }    if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {      expected.append("...");    }    expected.append(eol).append("    ");  }  String retval="Encountered \"";  Token tok=currentToken.next;  for (int i=0; i < maxSize; i++) {    if (i != 0)     retval+=" ";    if (tok.kind == 0) {      retval+=tokenImage[0];      break;    }    retval+=" " + tokenImage[tok.kind];    retval+=" \"";    retval+=add_escapes(tok.image);    retval+=" \"";    tok=tok.next;  }  retval+="\" at line " + currentToken.next.beginLine + ", column "+ currentToken.next.beginColumn;  retval+="." + eol;  if (expectedTokenSequences.length == 1) {    retval+="Was expecting:" + eol + "    ";  } else {    retval+="Was expecting one of:" + eol + "    ";  }  retval+=expected.toString();  return retval;}  }
class C{  @UninterruptibleNoWarn private int naiveCopyStringToChars(String str,char[] dst,int dstBegin,int dstEnd){  if (VM.VerifyAssertions)   VM._assert(!VM.runningVM);  int len=str.length();  int n=(dstBegin + len <= dstEnd) ? len : (dstEnd - dstBegin);  for (int i=0; i < n; i++)   Services.setArrayNoBarrier(dst,dstBegin + i,str.charAt(i));  return n;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Duration(com.google.maps.model.Duration duration){  this.duration=duration;}  }
class C{  @Override public String convertFrom(Location source,String destination){  return source.getLocationId().toString();}  }
class C{  public void feedFromFile(File f){  try {    feedFromInputStream(new FileInputStream(f),true);  } catch (  FileNotFoundException e) {    throw new PngjInputException(e.getMessage());  }}  }
class C{  public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,int secondOfMinute){  super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,0);}  }
class C{  public void addPropertyChangeListener(java.beans.PropertyChangeListener listener){  if (listener == null) {    String msg=Logging.getMessage("nullValue.ListenerIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.getChangeSupport().addPropertyChangeListener(listener);}  }
class C{  @AfterTest public void deleteResources(){  File storageFolder=getStorageFolder();  if (storageFolder.exists()) {    File[] files=storageFolder.listFiles();    for (    File file : files) {      assertThat("Can not delete storage test file.",file.delete(),is(true));    }    assertThat("Can not delete storage test folder.",storageFolder.delete(),is(true));  }}  }
class C{  @Override protected int calcAttackValue(){  int av=0;  int range=RangeType.rangeBracket(nRange,wtype.getATRanges(),true,false);  if (range == WeaponType.RANGE_SHORT) {    av=wtype.getRoundShortAV();  } else   if (range == WeaponType.RANGE_MED) {    av=wtype.getRoundMedAV();  } else   if (range == WeaponType.RANGE_LONG) {    av=wtype.getRoundLongAV();  } else   if (range == WeaponType.RANGE_EXT) {    av=wtype.getRoundExtAV();  }  Mounted mLinker=weapon.getLinkedBy();  AmmoType atype=(AmmoType)ammo.getType();  int bonus=0;  if (((mLinker != null) && (mLinker.getType() instanceof MiscType) && !mLinker.isDestroyed()&& !mLinker.isMissing()&& !mLinker.isBreached()&& mLinker.getType().hasFlag(MiscType.F_ARTEMIS)) && (atype.getMunitionType() == AmmoType.M_ARTEMIS_CAPABLE)) {    if (atype.getRackSize() > 3) {      bonus=(int)Math.ceil(atype.getRackSize() / 5.0);      if (atype.getAmmoType() == AmmoType.T_SRM) {        bonus=2;      }    }  }  if (((mLinker != null) && (mLinker.getType() instanceof MiscType) && !mLinker.isDestroyed()&& !mLinker.isMissing()&& !mLinker.isBreached()&& mLinker.getType().hasFlag(MiscType.F_ARTEMIS_V)) && (atype.getMunitionType() == AmmoType.M_ARTEMIS_V_CAPABLE)) {    bonus=(int)Math.ceil(atype.getRackSize() / 5.0);    if (atype.getAmmoType() == AmmoType.T_SRM) {      bonus=2;    }  }  av=av + bonus;  if ((atype.getAmmoType() == AmmoType.T_MML) && !atype.hasFlag(AmmoType.F_MML_LRM)) {    av=av * 2;  }  if (bDirect) {    av=Math.min(av + (toHit.getMoS() / 3),av * 2);  }  if (bGlancing) {    av=(int)Math.floor(av / 2.0);  }  av=(int)Math.floor(getBracketingMultiplier() * av);  return (av);}  }
class C{  public FBStreamingBackupManager(String gdsType){  super(gdsType);}  }
class C{  @Override public void init(Properties props) throws BadRealmException, NoSuchRealmException {  super.init(props);  String jaasCtx=props.getProperty(AppservRealm.JAAS_CONTEXT_PARAM);  if (jaasCtx == null) {    jaasCtx=DEFAULT_CONTEXT_NAME;  }  this.setProperty(AppservRealm.JAAS_CONTEXT_PARAM,jaasCtx);  try {    realmImpl=new ADMRealmImpl(_logger,new InitialContext());  } catch (  NamingException e) {    throw new BadRealmException(e);  }}  }
class C{  public boolean isDefaultNamespace(String namespaceURI){  return false;}  }
class C{  public static byte[] decode(String s,int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  boolean dontGunzip=(options & DONT_GUNZIP) != 0;  if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {        e.printStackTrace();      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  private boolean isInTransting(MDDOrder order){  for (  MDDOrderLine line : order.getLines(true,null)) {    if (line.getQtyInTransit().signum() != 0) {      return true;    }  }  return false;}  }
class C{  public void add(final Banks bank,final Entity entity){  final List<Entity> bankAccess=getListAddingUnknownBanks(bank);  if (!bankAccess.contains(entity)) {    bankAccess.add(entity);  }}  }
class C{  public MalformedCookieException(String message){  super(message);}  }
class C{  public static void downloadMissingArtwork(Movie movie){  downloadMissingArtwork(movie,false);}  }
class C{  public boolean connect(final String address){  if (isScanning)   scanLeDevice(false);  close();  if (mBluetoothAdapter == null || address == null) {    Log.w(TAG,"BluetoothAdapter not initialized or unspecified address.");    return false;  }  if (mBluetoothGatt != null && mBluetoothDeviceAddress != null && address.equals(mBluetoothDeviceAddress)) {    Log.d(TAG,"Trying to use an existing mBluetoothGatt for connection.");    if (mBluetoothGatt.connect()) {      mConnState=STATE_CONNECTING;      return true;    } else {      return false;    }  }  final BluetoothDevice device=mBluetoothAdapter.getRemoteDevice(address);  if (device == null) {    Log.w(TAG,"Device not found.  Unable to connect.");    return false;  }  mBluetoothGatt=device.connectGatt(this,false,mGattCallback);  Log.d(TAG,"Trying to create a new connection.");  mBluetoothDeviceAddress=address;  mConnState=STATE_CONNECTING;  return true;}  }
class C{  public SemIm(SemPm semPm,ICovarianceMatrix covMatrix){  this(semPm);  setCovMatrix(covMatrix);}  }
class C{  public PrivilegedBoot(final String className,final String[] args){  this.className=className;  this.args=args;}  }
class C{  public void addEmptyElement(String tag,XmlAttribute[] attribs) throws IOException {  throw new IOException("Not implemented");}  }
class C{  @Override public OptionView build(){  return new OptionView(this);}  }
class C{  private UninitializedMessageException newUninitializedMessageException(MessageType message){  if (message instanceof AbstractMessageLite) {    return ((AbstractMessageLite)message).newUninitializedMessageException();  }  return new UninitializedMessageException(message);}  }
class C{  public static JSONArray readJSONArray(final JSONArray jsonArray,final int index,final boolean required,final boolean notNull) throws JSONException {  if (required) {    return jsonArray.getJSONArray(index);  }  if (notNull && jsonArray.isNull(index)) {    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index));  }  JSONArray value=null;  if (!jsonArray.isNull(index)) {    value=jsonArray.getJSONArray(index);  }  return value;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public EventQueueHandler(){  Settings settings=new Settings(SETTINGS_NAMESPACE);  int nrof=settings.getInt(NROF_SETTING);  this.queues=new ArrayList<EventQueue>();  for (int i=1; i <= nrof; i++) {    Settings s=new Settings(SETTINGS_NAMESPACE + i);    if (s.contains(PATH_SETTING)) {      int preload=0;      String path="";      if (s.contains(PRELOAD_SETTING)) {        preload=s.getInt(PRELOAD_SETTING);      }      path=s.getSetting(PATH_SETTING);      queues.add(new ExternalEventsQueue(path,preload));    } else     if (s.contains(CLASS_SETTING)) {      String className=CLASS_PACKAGE + "." + s.getSetting(CLASS_SETTING);      EventQueue eq=(EventQueue)s.createIntializedObject(className);      queues.add(eq);    }  }}  }
class C{  public void add(Permission permission){  if (!(permission instanceof PropertyPermission))   throw new IllegalArgumentException("invalid permission: " + permission);  if (isReadOnly())   throw new SecurityException("attempt to add a Permission to a readonly PermissionCollection");  PropertyPermission pp=(PropertyPermission)permission;  String propName=pp.getName();synchronized (this) {    PropertyPermission existing=perms.get(propName);    if (existing != null) {      int oldMask=existing.getMask();      int newMask=pp.getMask();      if (oldMask != newMask) {        int effective=oldMask | newMask;        String actions=PropertyPermission.getActions(effective);        perms.put(propName,new PropertyPermission(propName,actions));      }    } else {      perms.put(propName,pp);    }  }  if (!all_allowed) {    if (propName.equals("*"))     all_allowed=true;  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.475 -0500",hash_original_method="1AC3EEF7BC77C90C94CB72A8DD95F4D1",hash_generated_method="4E039E1AE81D078882436CC8AA6BF17D") public String toString(){  CharArrayBuffer buffer=new CharArrayBuffer(16);  buffer.append(this.protocol);  buffer.append('/');  buffer.append(Integer.toString(this.major));  buffer.append('.');  buffer.append(Integer.toString(this.minor));  return buffer.toString();}  }
class C{  public void flushDiskCacheAsyncWithDelay(int delay){  if (DEBUG) {    Log.d(TAG,"flushDishCacheAsync");  }  if (mIsDelayFlushing) {    return;  }  mIsDelayFlushing=true;  new FileCacheTask(FileCacheTaskType.flush_cache).execute(delay);}  }
class C{  public ParseError executeLine(int lineNumber,boolean cached){  if (cached && document.cachedLineDone[lineNumber]) {    return document.parser.execute(null,null,lineNumber);  }  if (toDoList.contains(lineInfo.get(lineNumber))) {    parseLine(lineNumber);  }  String lastLabel=getLastLabel(lineNumber);  String line=getLineByNumber(lineNumber);  if (cached) {    document.cachedLineDone[lineNumber]=true;  }  return document.parser.execute(line,lastLabel,(cached ? lineNumber : -1));}  }
class C{  public int encodeBase64Partial(int bits,int outputBytes,byte[] buffer,int outPtr){  buffer[outPtr++]=_base64ToAsciiB[(bits >> 18) & 0x3F];  buffer[outPtr++]=_base64ToAsciiB[(bits >> 12) & 0x3F];  if (_usesPadding) {    byte pb=(byte)_paddingChar;    buffer[outPtr++]=(outputBytes == 2) ? _base64ToAsciiB[(bits >> 6) & 0x3F] : pb;    buffer[outPtr++]=pb;  } else {    if (outputBytes == 2) {      buffer[outPtr++]=_base64ToAsciiB[(bits >> 6) & 0x3F];    }  }  return outPtr;}  }
class C{  public void testBadMro() throws Exception {  ensureNoMembers("BadMro");}  }
class C{  private void checkReturnType(Method method){  TypeVariable<Method> typeParameter=getTypeParameter(method);  Type genericReturnType=method.getGenericReturnType();  assertEquals(typeParameter,genericReturnType);  assertInstanceOf(TypeVariable.class,genericReturnType);  assertEquals(method,((TypeVariable<?>)genericReturnType).getGenericDeclaration());}  }
class C{  private static Position targetPosition(int x,int y,Action a){  if (a.dir == Direction.TOP) {    return new Position(x,y + 1);  }  if (a.dir == Direction.BOTTOM) {    return new Position(x,y - 1);  }  if (a.dir == Direction.LEFT) {    return new Position(x - 1,y);  }  if (a.dir == Direction.RIGHT) {    return new Position(x + 1,y);  }  return new Position(a.x,a.y);}  }
class C{  public void traceMethodCalls(boolean enable){  return;}  }
class C{  public void resetProperties(){  fogColor=new float[]{1f,1f,1f};  skyColor=new float[]{1f,1f,1f};  sunriseSunsetColors=new float[]{.7f,.2f,.2f,1};  gravitationalMultiplier=1;  rotationalPeriod=24000;  orbitalDist=100;  atmosphereDensity=100;}  }
class C{  public CacheObject load(Object key){  if (key != null) {    String dtedFramePath=key.toString();    DTEDSubframedFrame frame=new DTEDSubframedFrame(dtedFramePath,dtedFramePath.endsWith("dt0"));    frame.initSubframes(numXSubframes,numYSubframes);    if (frame.frame_is_valid) {      return new DTEDCacheObject(dtedFramePath,frame);    }  }  return null;}  }
class C{  public void objectOrUninitialized(int tag,int data,int pos){}  }
class C{  public SimpleExampleReader(DataRowReader drr,ExampleSet exampleSet){  this.dataRowReader=drr;  this.exampleSet=exampleSet;}  }
class C{  protected void sequence_AnnotatedN4MemberDeclaration_AsyncNoTrailingLineBreak_BogusTypeRefFragment_MethodParamsReturnAndBody_StrictFormalParameters_TypeVariables(ISerializationContext context,N4MethodDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public Vec3D signum(){  x=(x < 0 ? -1 : x == 0 ? 0 : 1);  y=(y < 0 ? -1 : y == 0 ? 0 : 1);  z=(z < 0 ? -1 : z == 0 ? 0 : 1);  return this;}  }
class C{  public static void copyFiles(String original,String copy) throws IOException {  InputStream in=FileUtils.newInputStream(original);  OutputStream out=FileUtils.newOutputStream(copy,false);  copyAndClose(in,out);}  }
class C{  private void updateLabels(Waypoint wp){switch (labelType) {case Name:    if (wp != null) {      wp.setLabel(wp.getName());    }  break;case Distance:if (wp != null) {  updateDistanceLabels(wp);}break;case CumulativeDistance:updateCumulativeDistanceLabels();break;case Elevation:if (wp != null) {coord.set(wp.getTranslation());Landscape.getInstance().localToWorldCoordinate(coord);wp.setLabel(StringUtil.format(coord.getZ()));}break;case Slope:if (wp != null) {updateSlopeLabels(wp);}break;case Note:if (wp != null) {wp.setLabel(wp.getState().getAnnotation());}break;}markDirty(DirtyType.RenderState);}  }
class C{  private void traceFixedWidthInt(int x,int length){  if (Inject.verbose) {    CharArrayWriter baStream=new CharArrayWriter();    PrintWriter pStream=new PrintWriter(baStream);    pStream.print(x);    String str=baStream.toString();    for (int cnt=length - str.length(); cnt > 0; --cnt)     trace(" ");    trace(str);  }}  }
class C{  @Override public long length(){  checkCachedValues();  return privateLength;}  }
class C{  private void updateFormTitle(){  if (null != displayedRepositoryDefinition) {    if (displayedRepositoryDefinition instanceof CmrRepositoryDefinition) {      CmrRepositoryDefinition cmrRepositoryDefinition=(CmrRepositoryDefinition)displayedRepositoryDefinition;      mainForm.setImage(ImageFormatter.getCmrRepositoryImage(cmrRepositoryDefinition,true));      mainForm.setText(cmrRepositoryDefinition.getName());      mainForm.setToolTipText(TextFormatter.getCmrRepositoryDescription(cmrRepositoryDefinition));    } else     if (displayedRepositoryDefinition instanceof StorageRepositoryDefinition) {      StorageRepositoryDefinition storageRepositoryDefinition=(StorageRepositoryDefinition)displayedRepositoryDefinition;      mainForm.setImage(ImageFormatter.getStorageRepositoryImage(storageRepositoryDefinition));      mainForm.setText(storageRepositoryDefinition.getName());      mainForm.setToolTipText(getStorageDescirption(storageRepositoryDefinition));    }    mainForm.setMessage(null);  } else {    mainForm.setImage(null);    mainForm.setText("No repository loaded");    mainForm.setMessage("Repositories can be loaded from Repository or Storage Manager",IMessageProvider.WARNING);    mainForm.setToolTipText(null);  }}  }
class C{  protected void updatePreferredSize(int index){  Rectangle bounds=getNodeDimensions(this.getUserObject(),index,getLevel(),isExpanded(),boundsBuffer);  if (bounds == null) {    xOrigin=0;    preferredWidth=preferredHeight=0;    updateNodeSizes=true;  } else   if (bounds.height == 0) {    xOrigin=0;    preferredWidth=preferredHeight=0;    updateNodeSizes=true;  } else {    xOrigin=bounds.x;    preferredWidth=bounds.width;    if (isFixedRowHeight())     preferredHeight=getRowHeight(); else     preferredHeight=bounds.height;  }}  }
class C{  @Override public SolrInfoMBean remove(Object key){  SolrInfoMBean infoBean=get(key);  if (infoBean != null) {    try {      unregister((String)key,infoBean);    } catch (    RuntimeException e) {      LOG.warn("Failed to unregister info bean: " + key,e);    }  }  return super.remove(key);}  }
class C{  public T progress(Dialog dialog){  progress=dialog;  return self();}  }
class C{  AtomicIntChunks(final long length,final int chunkBits){  mLength=length;  assert chunkBits >= 0 && chunkBits <= 31;  mChunkBits=chunkBits;  mChunkSize=1 << mChunkBits;  mChunkMask=mChunkSize - 1;  final long ch=(length + mChunkSize - 1) / mChunkSize;  if (ch > Integer.MAX_VALUE) {    throw new RuntimeException("length requested too long length=" + length + " mChunkSize="+ mChunkSize);  }  final int chunks=(int)ch;  mArray=new AtomicIntegerArray[chunks];  long left=mLength;  long total=0;  for (int i=0; i < chunks; i++) {    final int assignedLength=left <= mChunkSize ? (int)left : mChunkSize;    assert assignedLength > 0;    mArray[i]=new AtomicIntegerArray(assignedLength);    left-=assignedLength;    total+=assignedLength;  }  assert left == 0;}  }
class C{  public Effect createEffect(String effectName){  Class effectClass=getEffectClassByName(effectName);  if (effectClass == null) {    throw new IllegalArgumentException("Cannot instantiate unknown effect '" + effectName + "'!");  }  return instantiateEffect(effectClass,effectName);}  }
class C{  protected Control createCustomArea(Composite parent){  return null;}  }
class C{  final void makeNonRecursive(){  this.unboundedBoundSymbols=null;}  }
class C{  private void init(boolean showTable) throws Exception {  Div div=new Div();  div.setStyle("width: 100%; height: 100%");  Pre pre=new Pre();  Text text=new Text(m_info.toString());  text.setParent(pre);  pre.setParent(div);  Borderlayout layout=new Borderlayout();  layout.setParent(this);  layout.setWidth("100%");  layout.setHeight("100%");  Center center=new Center();  center.setParent(layout);  center.setFlex(true);  if (showTable) {    North north=new North();    north.setParent(layout);    north.appendChild(div);    center.appendChild(table);    table.setWidth("100%");    table.setVflex(true);  } else {    center.appendChild(div);  }  South south=new South();  south.setParent(layout);  south.appendChild(confirmPanel);  confirmPanel.addActionListener(Events.ON_CLICK,this);}  }
class C{  public ProfileDataException(String s){  super(s);}  }
class C{  public void fireNeuronChanged(final Neuron changed){  for (  NeuronListener listener : neuronListeners) {    listener.neuronChanged(new NetworkEvent<Neuron>(this,changed));  }}  }
class C{  public void addContentProposalListener(ICompletionProposalListener listener){  proposalListeners2.add(listener);}  }
class C{  private static Object unMsg(Object src){  Object out=src;  if (src instanceof ArrayValue) {    List l=(ArrayValue)src;    List outList=new ArrayList(l.size());    out=outList;    for (    Object o : l)     outList.add(unMsg(o));  } else   if (src instanceof BooleanValue) {    out=((BooleanValue)src).getBoolean();  } else   if (src instanceof FloatValue) {    out=((FloatValue)src).getFloat();  } else   if (src instanceof IntegerValue) {    try {      out=((IntegerValue)src).getInt();    } catch (    Exception ex) {      out=((IntegerValue)src).getLong();    }  } else   if (src instanceof MapValue) {    Set ents=((MapValue)src).entrySet();    out=new HashMap();    for (    Object ento : ents) {      Map.Entry ent=(Map.Entry)ento;      Object key=unMsg(ent.getKey());      Object val=ent.getValue();      if (ents.size() == 1 && val instanceof RawValue && (key.equals("payload") || key.equals("encoded")))       val=((RawValue)val).getByteArray(); else       val=unMsg(val);      ((Map)out).put(key + "",val);    }    if (((Map)out).containsKey("error") && ((Map)out).containsKey("error_class")) {      armitage.ArmitageMain.print_error("Metasploit Framework Exception: " + ((Map)out).get("error_message").toString() + "\n"+ ((Map)out).get("error_backtrace"));      throw new RuntimeException(((Map)out).get("error_message").toString());    }  } else   if (src instanceof NilValue) {    out=null;  } else   if (src instanceof RawValue) {    out=((RawValue)src).getString();  }  return out;}  }
class C{  void restore(){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean isDataBaseCaseSensitive(String entidad) throws Exception {  String dataBaseType=getDataBaseType(null);  if (dataBaseType.equals("DB2") || dataBaseType.equals("POSTGRESQL") || dataBaseType.equals("ORACLE")) {    return true;  } else {    return false;  }}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public static Curve25519KeyPair keyGen(byte[] randomBytes) throws NoSuchAlgorithmException, DigestException {  byte[] privateKey=keyGenPrivate(randomBytes);  byte[] publicKey=keyGenPublic(privateKey);  return new Curve25519KeyPair(publicKey,privateKey);}  }
class C{  private double map(double val,double min1,double max1,double min2,double max2){  return min2 + (max2 - min2) * ((val - min1) / (max1 - min1));}  }
class C{  @Override public void onCreate(){  mAuthenticator=new RcsContactsAccountAuthenticator(this);}  }
class C{  public List<AddressRO> viewAddressOptions(final ShoppingCart cart,final Shop shop,final String addressType){  final List<AddressRO> ros=new ArrayList<AddressRO>();  final Customer customer=customerServiceFacade.getCheckoutCustomer(shop,cart);  if (customer != null) {    final List<Country> countries=addressBookFacade.getAllCountries(shop.getCode(),addressType);    final List<Address> addresses=new ArrayList<Address>(addressBookFacade.getAddresses(customer,shop,addressType));    for (    final Address address : addresses) {      final AddressRO ro=map(address,AddressRO.class,Address.class);      for (      final Country cnt : countries) {        if (cnt.getCountryCode().equals(ro.getCountryCode())) {          ro.setCountryName(cnt.getName());          ro.setCountryLocalName(cnt.getDisplayName());          final List<State> states=addressBookFacade.getStatesByCountry(ro.getCountryCode());          for (          final State state : states) {            if (state.getStateCode().equals(ro.getStateCode())) {              ro.setStateName(state.getName());              ro.setStateLocalName(state.getDisplayName());              ros.add(ro);              break;            }          }          break;        }      }    }  }  return ros;}  }
class C{  public boolean removeAll(Collection<?> c){  boolean modified=false;  for (  Object e : c)   if (remove(e))   modified=true;  return modified;}  }
class C{  @Override protected void buildActions(final List<String> list){  super.buildActions(list);  User user=User.get();  Sheep sheep=entity;  if (user != null) {    if (!user.hasSheep()) {      list.add(ActionType.OWN.getRepresentation());    } else     if ((sheep != null) && (user.getSheepID() == sheep.getID().getObjectID())) {      list.add(ActionType.LEAVE_SHEEP.getRepresentation());    }  }}  }
class C{  public boolean hasGradientColor(){  return mHasGradientColor;}  }
class C{  @Override public Example next(){  if (!hasNext()) {    return null;  }  Example example=this.parent.next();  if (example == null) {    return null;  }  return new Example(example.getDataRow(),exampleSet);}  }
class C{  public boolean isFullyPopulated(){  return getNumberAvailable() == getLength();}  }
class C{  public static void print(double[][] m,int r){  for (int j=0; j < m[r].length; j++) {    System.out.printf("%5.1f",m[r][j]);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Set<Map.Entry<Metadata.MetadataType,List<Key>>> entrySet(){  return map.entrySet();}  }
class C{  public static String dnl(){  return dnl;}  }
class C{  public PointF mapImageToView(PointF imagePoint){  float[] points=mTempValues;  points[0]=imagePoint.x;  points[1]=imagePoint.y;  mapRelativeToAbsolute(points,points,1);  mActiveTransform.mapPoints(points,0,points,0,1);  return new PointF(points[0],points[1]);}  }
class C{  protected static void processPluginManagerProps(File propsFile){  try {    PluginManager.addFromProperties(propsFile);  } catch (  Exception ex) {  }}  }
class C{  public static PsiElement findEnclosingBlock(PsiElement element){  while (element != null) {    element=PsiTreeUtil.getStubOrPsiParent(element);    if (isValidContainer(element)) {      return element;    }  }  return null;}  }
class C{  void createEdgeEndForPrev(Edge edge,List l,EdgeIntersection eiCurr,EdgeIntersection eiPrev){  int iPrev=eiCurr.segmentIndex;  if (eiCurr.dist == 0.0) {    if (iPrev == 0)     return;    iPrev--;  }  Coordinate pPrev=edge.getCoordinate(iPrev);  if (eiPrev != null && eiPrev.segmentIndex >= iPrev)   pPrev=eiPrev.coord;  Label label=new Label(edge.getLabel());  label.flip();  EdgeEnd e=new EdgeEnd(edge,eiCurr.coord,pPrev,label);  l.add(e);}  }
class C{  @DSComment("OS Bundle data structure") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.498 -0500",hash_original_method="1C56E40FECAB1AC7C31C1D64DCBF74F0",hash_generated_method="0206D8B9EEFAE3F5D1FE5F44A497BC16") public void putByteArray(String key,byte[] value){  unparcel();  mMap.put(key,value);}  }
class C{  public static String hex(byte[] input){  StringBuffer sb=new StringBuffer(input.length * 2);  for (int i=0; i < input.length; i++) {    sb.append(HEX_TABLE[(input[i] >> 4) & 0xf]);    sb.append(HEX_TABLE[input[i] & 0xf]);  }  return sb.toString();}  }
class C{  public ISchedulingRule refreshRule(IResource resource){  if (resource.getType() == IResource.ROOT)   return root;  return factoryFor(resource).refreshRule(resource);}  }
class C{  public static boolean isMavenBuild(){  return sIsMavenBuild;}  }
class C{  public RegexpQuery(Term term,int flags,int maxDeterminizedStates){  this(term,flags,defaultProvider,maxDeterminizedStates);}  }
class C{  public static String toString(int[] array){  if (array == null) {    return NULL;  }  StringBuilder sb=new StringBuilder();  for (int i=0; i < array.length; i++) {    if (i != 0) {      sb.append(',');    }    sb.append(array[i]);  }  return sb.toString();}  }
class C{  public final void removeMessages(int what,Object object){  mExec.removeMessages(what,object);}  }
class C{  public DNetscapeCertificateRenewalUrl(JDialog parent,byte[] value) throws IOException {  super(parent);  setTitle(res.getString("DNetscapeCertificateRenewalUrl.Title"));  initComponents();  prepopulateWithValue(value);}  }
class C{  private void initPositions(){  if (positions == null) {    setFRCTX();    positions=new float[glyphs.length * 2 + 2];    Point2D.Float trackPt=null;    float track=getTracking(font);    if (track != 0) {      track*=font.getSize2D();      trackPt=new Point2D.Float(track,0);    }    Point2D.Float pt=new Point2D.Float(0,0);    if (font.isTransformed()) {      AffineTransform at=font.getTransform();      at.transform(pt,pt);      positions[0]=pt.x;      positions[1]=pt.y;      if (trackPt != null) {        at.deltaTransform(trackPt,trackPt);      }    }    for (int i=0, n=2; i < glyphs.length; ++i, n+=2) {      getGlyphStrike(i).addDefaultGlyphAdvance(glyphs[i],pt);      if (trackPt != null) {        pt.x+=trackPt.x;        pt.y+=trackPt.y;      }      positions[n]=pt.x;      positions[n + 1]=pt.y;    }  }}  }
class C{  public final void normalize(){  double[] tmp_rot=new double[9];  double[] tmp_scale=new double[3];  getScaleRotate(tmp_scale,tmp_rot);  this.m00=tmp_rot[0];  this.m01=tmp_rot[1];  this.m02=tmp_rot[2];  this.m10=tmp_rot[3];  this.m11=tmp_rot[4];  this.m12=tmp_rot[5];  this.m20=tmp_rot[6];  this.m21=tmp_rot[7];  this.m22=tmp_rot[8];}  }
class C{  private void startLocalContainer() throws Exception {  EnvironmentTestData testData=getTestData();  final String message="You have implemented the Remote container. Please also implement a " + "standalone local container for the CARGO samples to pass.";  assertTrue(message,new HasInstalledLocalContainerValidator().validate(getTestData().containerId,ContainerType.INSTALLED));  assertTrue(message,new HasStandaloneConfigurationValidator().validate(getTestData().containerId,ContainerType.INSTALLED));  final ContainerType oldContainerType=getTestData().containerType;  testData.containerType=ContainerType.INSTALLED;  this.localContainer=(InstalledLocalContainer)createContainer(createConfiguration(ConfigurationType.STANDALONE));  testData.containerType=oldContainerType;  if (getTestData().containerId.startsWith("jetty")) {    int jettyVersion=Integer.parseInt(getTestData().containerId.substring(5,getTestData().containerId.length() - 1));    final Deployable jettyDeployerApplication;    if (jettyVersion <= 6) {      jettyDeployerApplication=new DefaultDeployableFactory().createDeployable(this.localContainer.getId(),getTestData().getTestDataFileFor("cargo-jetty-6-and-earlier-deployer"),DeployableType.WAR);    } else {      jettyDeployerApplication=new DefaultDeployableFactory().createDeployable(this.localContainer.getId(),getTestData().getTestDataFileFor("cargo-jetty-7-and-onwards-deployer"),DeployableType.WAR);    }    this.localContainer.getConfiguration().addDeployable(jettyDeployerApplication);  } else   if (getTestData().containerId.startsWith("tomcat")) {    int tomcatVersion=Integer.parseInt(getTestData().containerId.substring(6,getTestData().containerId.length() - 1));    if (tomcatVersion < 7) {      List<User> users=User.parseUsers("cargo:password:manager");      this.localContainer.getConfiguration().getUsers().addAll(users);    } else {      List<User> users=User.parseUsers("cargo:password:manager-script");      this.localContainer.getConfiguration().getUsers().addAll(users);    }  } else   if (getTestData().containerId.startsWith("tomee")) {    List<User> users=User.parseUsers("cargo:password:manager-script");    this.localContainer.getConfiguration().getUsers().addAll(users);  }  this.localContainer.start();}  }
class C{  public static boolean containsCopy(List<ConsistencyGroupCopyUID> cgCopyUIDs,ConsistencyGroupCopyUID cgCopyUID){  for (  ConsistencyGroupCopyUID currentCopyUID : cgCopyUIDs) {    if (copiesEqual(cgCopyUID,currentCopyUID)) {      return true;    }  }  return false;}  }
class C{  public Task<ComputeSystemRestRep> update(URI id,ComputeSystemUpdate input){  return putTask(input,getIdUrl(),id);}  }
class C{  public String evaluate(Associator associator,Instances data) throws Exception {  long startTime;  long endTime;  startTime=System.currentTimeMillis();  associator.buildAssociations(data);  endTime=System.currentTimeMillis();  m_Result=new StringBuffer(associator.toString());  m_Result.append("\n=== Evaluation ===\n\n");  m_Result.append("Elapsed time: " + (((double)(endTime - startTime)) / 1000) + "s");  m_Result.append("\n");  return m_Result.toString();}  }
class C{  private void generateAnchorXml(final ConfProxyProperties conf,final String instanceIdentifier,final OutputStream out) throws Exception {  JAXBContext jaxbCtx=JAXBContext.newInstance(ObjectFactory.class);  Marshaller marshaller=jaxbCtx.createMarshaller();  marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);  ObjectFactory factory=new ObjectFactory();  ConfigurationSourceType sourceType=factory.createConfigurationSourceType();  sourceType.setDownloadURL(conf.getConfigurationProxyURL() + "/" + OutputBuilder.SIGNED_DIRECTORY_NAME);  for (  byte[] cert : conf.getVerificationCerts()) {    sourceType.getVerificationCert().add(cert);  }  ConfigurationAnchorType anchorType=factory.createConfigurationAnchorType();  anchorType.setInstanceIdentifier(instanceIdentifier);  GregorianCalendar gcal=new GregorianCalendar();  gcal.setTimeZone(TimeZone.getTimeZone("UTC"));  XMLGregorianCalendar xgcal=DatatypeFactory.newInstance().newXMLGregorianCalendar(gcal);  anchorType.setGeneratedAt(xgcal);  anchorType.getSource().add(sourceType);  JAXBElement<ConfigurationAnchorType> root=factory.createConfigurationAnchor(anchorType);  marshaller.marshal(root,out);}  }
class C{  protected boolean mustUseAlternateOperationalCondition(AVList modifiers){  return SymbologyConstants.SCHEME_EMERGENCY_MANAGEMENT.equalsIgnoreCase(this.symbolCode.getScheme()) || modifiers.hasKey(SymbologyConstants.OPERATIONAL_CONDITION_ALTERNATE);}  }
class C{  public void selectString(String title,String[] options){  if (options.length == 1) {    Toast.makeText(top,title + ":\n" + options[0],Toast.LENGTH_LONG / 2).show();    top.handle(new Event(Event.EType.STRING).setString(options[0]));    return;  }  HapticFeedback.vibrate(getContext(),AlertType.SELECT);  new SelectStringView(top,title,options);}  }
class C{  public void recordAuditLog(URI tenantId,URI userId,String serviceType,OperationTypeEnum auditType,long timestamp,String operationalStatus,String operationStage,Object... descparams){  StringBuilder s=new StringBuilder(AUDITLOG_VERSION);  s.append("|");  s.append(auditType.toString());  if (operationStage != null) {    s.append("_");    s.append(operationStage);  }  if (operationalStatus.equals(AUDITLOG_FAILURE)) {    s.append("_");    s.append(operationalStatus);  }  for (int i=0; i < descparams.length; i++) {    s.append("|");    if (descparams[i] != null && !descparams[i].toString().isEmpty()) {      s.append(descparams[i].toString());    } else {      s.append("null");    }  }  RecordableAuditLog auditlog=new RecordableAuditLog(PRODUCT_ID,tenantId,userId,serviceType,auditType,timestamp,s.toString(),operationalStatus);  try {    recordAuditLogs(auditlog);  } catch (  Exception ex) {    _log.error("Failed to record auditlog. Auditlog description id: {}",auditType.toString(),ex);  }}  }
class C{  @Override protected void onSetNoExternalMessages(String target,String sourceNick,String sourceLogin,String sourceHostname){  Message message=new Message(service.getString(R.string.message_disable_external,sourceNick));  message.setColor(Message.COLOR_BLUE);  server.getConversation(target).addMessage(message);  service.sendBroadcast(Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target));}  }
class C{  private boolean noLabelsAllowed(){  for (int i=2; i <= assumeProveDepth; i++) {    if (inScopeOfAPDecl[i]) {      return true;    }    ;  }  ;  return false;}  }
class C{  public static <T,K>Consumer<Partition<T,K,InsertionTimeList<T>>> evictOlderWithProcess(long time,TimeUnit unit){  long timeMs=TimeUnit.MILLISECONDS.convert(time,unit);  return null;}  }
class C{  public void moveLeadSelectionIndex(int leadIndex){  if (leadIndex == -1) {    if (this.anchorIndex != -1) {      return;    }  }  updateLeadAnchorIndices(this.anchorIndex,leadIndex);  fireValueChanged();}  }
class C{  private PKIXBuilderParameters CreatePKIXBuilderParameters(X509Certificate endCert) throws CertificatePathBuildingException {  X509CertSelector targetConstraints=new X509CertSelector();  targetConstraints.setCertificate(endCert);  PKIXBuilderParameters params;  try {    params=new PKIXBuilderParameters(trustStore,targetConstraints);    params.setRevocationEnabled(false);  } catch (  KeyStoreException e) {    throw new CertificatePathBuildingException("Error creating PKIXBuilderParameters: Please check trust store" + e.getMessage(),e);  }catch (  InvalidAlgorithmParameterException e) {    throw new CertificatePathBuildingException("Error creating PKIXBuilderParameters:" + e.getMessage(),e);  }catch (  Throwable e) {    throw new CertificatePathBuildingException("Error creating PKIXBuilderParameters:" + e.getMessage(),e);  }  Collection<Object> certCollection=new ArrayList<Object>();  addCertificateCandidates(endCert,certCollection);  if (!certCollection.isEmpty()) {    try {      CertStore certStore=CertStore.getInstance("Collection",new CollectionCertStoreParameters(certCollection));      params.addCertStore(certStore);    } catch (    InvalidAlgorithmParameterException e) {      throw new CertificatePathBuildingException("Error creating CertStore for PKIXBuilderParameters:" + e.getMessage(),e);    }catch (    NoSuchAlgorithmException e) {      throw new CertificatePathBuildingException("Error creating CertStore for  PKIXBuilderParameters:" + e.getMessage(),e);    }  } else {    logger.debug("Revocation check: CRL list empty");  }  return params;}  }
class C{  private void completeEpilogue(boolean isOutermost){  if (method.isSynchronized() && !options.ESCAPE_INVOKEE_THREAD_LOCAL) {    Operand lockObject=getLockObject();    Instruction s=MonitorOp.create(MONITOREXIT,lockObject,new TrueGuardOperand());    appendInstruction(epilogue,s,SYNCHRONIZED_MONITOREXIT_BCI);  }  if (!isOutermost && requiresUnintMarker()) {    Instruction s=Empty.create(UNINT_END);    appendInstruction(epilogue,s,EPILOGUE_BCI);  }  if (isOutermost) {    TypeReference returnType=method.getReturnType();    Operand retVal=returnType.isVoidType() ? null : new RegisterOperand(resultReg,returnType);    Instruction s=Return.create(RETURN,retVal);    appendInstruction(epilogue,s,EPILOGUE_BCI);  }}  }
class C{  private static void print(String msg){  System.out.println();  System.out.println(">>> " + msg);}  }
class C{  public static AffineTransform worldToScreenTransform(final Envelope mapExtent,final java.awt.geom.Rectangle2D.Double viewport){  double scaleX=viewport.width / mapExtent.getWidth();  double scaleY=viewport.height / mapExtent.getHeight();  double tx=-mapExtent.getMinX() * scaleX;  double ty=(mapExtent.getMinY() * scaleY) + viewport.height;  AffineTransform at=new AffineTransform(scaleX,0.0d,0.0d,-scaleY,tx,ty);  AffineTransform originTranslation=AffineTransform.getTranslateInstance(viewport.x,viewport.y);  originTranslation.concatenate(at);  return originTranslation != null ? originTranslation : at;}  }
class C{  public boolean startConnection(){  State state=_state.get();  if (state.isActive()) {    _connectionCount.incrementAndGet();    return true;  }  long now=CurrentTime.currentTime();  long lastFailTime=_lastFailTime;  long recoverTimeout=_dynamicRecoverTimeout.get();  if (now < lastFailTime + recoverTimeout) {    return false;  }  int count;  do {    count=_connectionCount.get();    if (count > 0) {      return false;    }  } while (!_connectionCount.compareAndSet(count,count + 1));  return true;}  }
class C{  public double perpDot(MutableDouble2D other){  return (-this.y) * other.x + this.x * other.y;}  }
class C{  public static void main(String[] args){  ParserPerfTest parserPerfTest=new ParserPerfTest();  parserPerfTest.test();}  }
class C{  private void transferData(State state,InnerState innerState,byte[] data,InputStream entityStream) throws StopRequest {  for (; ; ) {    int bytesRead=readFromResponse(state,innerState,data,entityStream);    if (bytesRead == -1) {      handleEndOfStream(state,innerState);      return;    }    state.mGotData=true;    writeDataToDestination(state,data,bytesRead);    innerState.mBytesSoFar+=bytesRead;    innerState.mBytesThisSession+=bytesRead;    reportProgress(state,innerState);    checkPausedOrCanceled(state);  }}  }
class C{  public void connect(IConnection conn){  if (!(conn instanceof RTMPConnection))   throw new RuntimeException("can only connect through RTMP connections");  if (isConnected())   throw new RuntimeException("already connected");  source=conn;  SharedObjectMessage msg=new SharedObjectMessage(name,0,isPersistentObject());  msg.addEvent(new SharedObjectEvent(Type.SERVER_CONNECT,null,null));  Channel c=((RTMPConnection)conn).getChannel((byte)3);  c.write(msg);}  }
class C{  public void testGaps4(){  final JPanel panel=new JPanel(new GridBagLayout());  final JButton btn1=new JButton();  btn1.setPreferredSize(new Dimension(100,20));  final JButton btn2=new JButton();  btn2.setPreferredSize(new Dimension(100,20));  GridBagConverter converter=new GridBagConverter(new Insets(0,0,0,0),0,7,false,false);  converter.addComponent(btn1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  converter.addComponent(btn2,new GridConstraints(2,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  applyConversionResults(panel,converter);  final Dimension preferredSize=panel.getPreferredSize();  assertEquals(47,preferredSize.height);  panel.setSize(panel.getPreferredSize());  panel.doLayout();}  }
class C{  public CToggleButton(Action a){  this(null,null,false);  setAction(a);}  }
class C{  public Map<String,Object> shallowCopy(){  return new LinkedHashMap<>(propMap);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  UsageConfiguration(){  mProp=new Properties();  final Map<String,String> env=Environment.getEnvironmentMap();  final Boolean enabled=Boolean.valueOf(env.get(ENABLE_USAGE));  mProp.setProperty(ENABLE_USAGE,enabled.toString());  if (enabled) {    for (    String property : new String[]{USAGE_DIR,USAGE_HOST,USAGE_LOG_USERNAME,USAGE_LOG_HOSTNAME,USAGE_LOG_COMMANDLINE}) {      if (env.get(property) != null) {        mProp.setProperty(property,env.get(property));      }    }    if (env.get(USAGE_DIR) == null && env.get(USAGE_HOST) == null) {      mProp.setProperty(USAGE_HOST,DEFAULT_USAGE_HOST);    }  }}  }
class C{  public static long parseMemorySize(String sizeName,String sizeFlag,String defaultFactor,int roundTo,String fullArg,String subArg){  return sysCall.sysParseMemorySize(s2b(sizeName),s2b(sizeFlag),s2b(defaultFactor),roundTo,s2b(fullArg),s2b(subArg));}  }
class C{  public DelegatingUserAgent(){  this._uriResolver=new UriResolver();}  }
class C{  @Override protected GraphDocument generateAnalysisDocument(IProgressMonitor monitor) throws IOException {  GraphModel analysisGraph=new GraphModel();  DependenciesListener builder=new DependenciesDispatcher(analysisGraph.getBuilder());  GraphMLProcessing processing=page.getProcessing();  GraphFactory graphFactory=processing.getGraphFactory();  GraphMLContext context=new GraphMLContext(builder,graphFactory);  monitor.worked(1);  monitor.setTaskName("Loading GraphML...");  try {    processModule(context,page.getPathFile());  } catch (  Exception err) {    Tools.warnThrown("Unable to analyze GraphML at " + page.getPathText(),err);  }  monitor.worked(1);  return createGraphDocument(analysisGraph,graphFactory.getAnalysisPlugins());}  }
class C{  protected boolean beforeDelete(){  return delete_Accounting("C_Project_Acct");}  }
class C{  @Override @SuppressWarnings("unchecked") public Iterator<AbstractNode> postOrderIterator(final byte[] fromKey,final byte[] toKey){  return new Striterator(postOrderIterator2(fromKey,toKey)).append(new SingleValueIterator(this));}  }
class C{  private boolean isSelectionSelected(Object source){  boolean retValue=false;  if (source instanceof JCheckBox)   retValue=((JCheckBox)source).isSelected(); else   if (source instanceof JRadioButton)   retValue=((JRadioButton)source).isSelected(); else   log.log(Level.SEVERE,"Not valid - " + source);  return retValue;}  }
class C{  public void processTransOpener(){  allowSharpQuote=true;  pushState();  yybegin(LEX_TRANS_OPENER);}  }
class C{  public void addStringToTable(byte[] oldString,byte newString){  int length=oldString.length;  byte[] string=new byte[length + 1];  System.arraycopy(oldString,0,string,0,length);  string[length]=newString;  stringTable[tableIndex++]=string;  if (tableIndex == 511) {    bitsToGet=10;  } else   if (tableIndex == 1023) {    bitsToGet=11;  } else   if (tableIndex == 2047) {    bitsToGet=12;  }}  }
class C{  public void tokenizeLines(){  tokenizeLines(0,getDefaultRootElement().getElementCount());}  }
class C{  @Override public void onToggled(){  toggle();}  }
class C{  public static ExceptionMessage translateExceptionMessage(ExceptionMessage oldMessage,Dictionary<?,?> params){  try {    return translateExceptionMessage(oldMessage.getExceptionCode().getCode(),params);  } catch (  MessageTranslatorException x) {    return oldMessage;  }}  }
class C{  public V put(K key,V value){  if (value == null)   throw new NullPointerException();  return doPut(key,value,false);}  }
class C{  public DefaultActivityModel(Object owner,String title){  this(owner,title,null,0,100,true);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void main(String[] ignore){  X.println("   __________  ________________ ","  /  _/ ___/ |/ /  _/_  __/ __/ "," _/ // (7 7    // /  / / / _/   ","/___/\\___/_/|_/___/ /_/ /___/  ","                for Apache Hadoop        "," ","ver. " + ACK_VER_STR,COPYRIGHT);  configureHadoop();}  }
class C{  public static void clearCounters(){  configured=0;  prepared=0;  released=0;}  }
class C{  public final double dotMultiply(AlgVector b){  double sum=0.0;  if (m_Elements != null) {    int n=m_Elements.length;    for (int i=0; i < n; i++) {      sum+=m_Elements[i] * b.m_Elements[i];    }  }  return sum;}  }
class C{  public Directive_ createDirective_(){  Directive_Impl directive_=new Directive_Impl();  return directive_;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ValuePersistenceSettings(Element el){  super(el);  if (PersistenceStrategy.POJO != getStrategy()) {    init();    return;  }  NodeList nodes=el.getElementsByTagName(FIELD_ELEMENT);  fields=detectFields(nodes);  if (fields.isEmpty())   throw new IllegalStateException("Failed to initialize value fields for class '" + getJavaClass().getName() + "'");  checkDuplicates(fields);  init();}  }
class C{  void savePolicy(String filename) throws FileNotFoundException, IOException {  parser.setKeyStoreUrl(keyStoreName);  parser.setKeyStoreType(keyStoreType);  parser.setKeyStoreProvider(keyStoreProvider);  parser.setStorePassURL(keyStorePwdURL);  parser.write(new FileWriter(filename));  modified=false;}  }
class C{  public Crossfader build(){  if (mFirstWidth < mSecondWidth) {    throw new RuntimeException("the first layout has to be the layout with the greater width");  }  ViewGroup container=((ViewGroup)mContent.getParent());  container.removeView(mContent);  mCrossFadeSlidingPaneLayout=(T)LayoutInflater.from(mContent.getContext()).inflate(mBaseLayout,container,false);  container.addView(mCrossFadeSlidingPaneLayout);  FrameLayout mCrossFadePanel=(FrameLayout)mCrossFadeSlidingPaneLayout.findViewById(R.id.panel);  LinearLayout mCrossFadeFirst=(LinearLayout)mCrossFadeSlidingPaneLayout.findViewById(R.id.first);  LinearLayout mCrossFadeSecond=(LinearLayout)mCrossFadeSlidingPaneLayout.findViewById(R.id.second);  LinearLayout mCrossFadeContainer=(LinearLayout)mCrossFadeSlidingPaneLayout.findViewById(R.id.content);  setWidth(mCrossFadePanel,mFirstWidth);  setWidth(mCrossFadeFirst,mFirstWidth);  setWidth(mCrossFadeSecond,mSecondWidth);  setLeftMargin(mCrossFadeContainer,mSecondWidth);  mCrossFadeFirst.addView(mFirst,mFirstWidth,ViewGroup.LayoutParams.MATCH_PARENT);  mCrossFadeSecond.addView(mSecond,mSecondWidth,ViewGroup.LayoutParams.MATCH_PARENT);  mCrossFadeContainer.addView(mContent,ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);  boolean cross_faded=false;  if (mSavedInstance != null) {    cross_faded=mSavedInstance.getBoolean(BUNDLE_CROSS_FADED,false);  }  if (cross_faded) {    mCrossFadeSlidingPaneLayout.setOffset(1);  } else {    mCrossFadeSlidingPaneLayout.setOffset(0);  }  mCrossFadeSlidingPaneLayout.setPanelSlideListener(mPanelSlideListener);  mCrossFadeSlidingPaneLayout.setCanSlide(mCanSlide);  mCrossFadeSlidingPaneLayout.setSliderFadeColor(Color.TRANSPARENT);  enableResizeContentPanel(mResizeContentPanel);  return this;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double numDownslopeNeighbours;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  String pntrType=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  pntrType=args[2].toLowerCase();  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,noData);    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setPreferredPalette("spectrum_black_background.pal");    if ((pntrType.equals("d8") || (pntrType.equals("rho8")))) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          if (pntr.getValue(row,col) != noData) {            z=0;            for (i=0; i < 8; i++) {              if (pntr.getValue(row + dY[i],col + dX[i]) == inflowingVals[i]) {                z++;              }            }            output.setValue(row,col,z);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    } else     if (pntrType.equals("dinf")) {      double flowDir;      double[] startFD=new double[]{180,225,270,315,0,45,90,135};      double[] endFD=new double[]{270,315,360,45,90,135,180,225};      int c;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=pntr.getValue(row,col);          if (flowDir != noData) {            c=0;            for (i=0; i < 8; i++) {              flowDir=pntr.getValue(row + dY[i],col + dX[i]);              if (flowDir != noData) {                if (i != 3) {                  if (flowDir > startFD[i] && flowDir < endFD[i]) {                    c++;                  }                } else {                  if (flowDir > startFD[i] || flowDir < endFD[i]) {                    c++;                  }                }              }            }            output.setValue(row,col,c);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  static void lenbok(String s){  try {    if (s == null)     System.out.println("s is null");  }  finally {    System.out.println(s);  }}  }
class C{  public static int maxFill(final int n,final float f){  return Math.min((int)Math.ceil(n * f),n - 1);}  }
class C{  public boolean match(MarkerAnnotation node,Object other){  if (!(other instanceof MarkerAnnotation)) {    return false;  }  MarkerAnnotation o=(MarkerAnnotation)other;  return safeSubtreeMatch(node.getTypeName(),o.getTypeName());}  }
class C{  public boolean equals(Object v){  try {    ReadonlyVec4D vv=(ReadonlyVec4D)v;    return (x == vv.x() && y == vv.y() && z == vv.z() && w == vv.w());  } catch (  NullPointerException e) {    return false;  }catch (  ClassCastException e) {    return false;  }}  }
class C{  public OptionSet removeProxyScheme(){  proxy_scheme=null;  return this;}  }
class C{  static void loadLibrary(){  try {    File dir=Files.createTempDirectory("libjsass-").toFile();    dir.deleteOnExit();    if (System.getProperty("os.name").toLowerCase().startsWith("win")) {      System.load(saveLibrary(dir,"sass"));    }    System.load(saveLibrary(dir,"jsass"));  } catch (  Exception exception) {    LOG.warn(exception.getMessage(),exception);    throw new LoaderException(exception);  }}  }
class C{  private static List<IGraphPanel> collectPanelsWithAddress(final IDebugger debugger,final UnrelocatedAddress address){  final List<IGraphPanel> panels=new ArrayList<IGraphPanel>();  for (  final IGraphContainerWindow window : CWindowManager.instance().getOpenWindows()) {    for (    final IGraphPanel graphPanel : window) {      final BackEndDebuggerProvider debuggerProvider=graphPanel.getModel().getDebuggerProvider();      for (      final IDebugger d : debuggerProvider) {        if (d == debugger && CViewHelpers.containsAddress(graphPanel.getModel().getGraph().getRawView(),address)) {          panels.add(graphPanel);        }      }    }  }  return panels;}  }
class C{  private void updateLayouter(){  if (getDefaultGraphLayout() == LayoutStyle.HIERARCHIC) {    setCurrentLayouter(ZyLayoutCreator.getHierarchicLayout(this));  } else   if (getDefaultGraphLayout() == LayoutStyle.ORTHOGONAL) {    setCurrentLayouter(ZyLayoutCreator.getOrthogonalLayout(this));  } else {    setCurrentLayouter(ZyLayoutCreator.getCircularLayout(this));  }}  }
class C{  public static long toPeriod(String value,long defaultUnits) throws ConfigException {  if (value == null)   return 0;  long sign=1;  long period=0;  int i=0;  int length=value.length();  if (length > 0 && value.charAt(i) == '-') {    sign=-1;    i++;  }  while (i < length) {    long delta=0;    char ch;    for (; i < length && (ch=value.charAt(i)) >= '0' && ch <= '9'; i++)     delta=10 * delta + ch - '0';    if (length <= i)     period+=defaultUnits * delta; else {      ch=value.charAt(i++);switch (ch) {case 's':        period+=1000 * delta;      break;case 'm':    if (i < value.length() && value.charAt(i) == 's') {      i++;      period+=delta;    } else     period+=60 * 1000 * delta;  break;case 'h':period+=60L * 60 * 1000* delta;break;case 'D':period+=DAY * delta;break;case 'W':period+=7L * DAY * delta;break;case 'M':period+=30L * DAY * delta;break;case 'Y':period+=365L * DAY * delta;break;default :throw new ConfigException(L.l("Unknown unit `{0}' in period `{1}'. Valid units are:\n  '10ms' milliseconds\n  '10s' seconds\n  '10m' minutes\n  '10h' hours\n  '10D' days\n  '10W' weeks\n  '10M' months\n  '10Y' years",String.valueOf(ch),value));}}}period=sign * period;return period;}  }
class C{  private static boolean shouldParkAfterFailedAcquire(Node pred,Node node){  int ws=pred.waitStatus;  if (ws == Node.SIGNAL)   return true;  if (ws > 0) {    do {      node.prev=pred=pred.prev;    } while (pred.waitStatus > 0);    pred.next=node;  } else {    compareAndSetWaitStatus(pred,ws,Node.SIGNAL);  }  return false;}  }
class C{  public DirichletBayesImEditor(DirichletEstimatorWrapper dirichletEstWrapper){  this(dirichletEstWrapper.getEstimatedBayesIm());}  }
class C{  @Inline @Override public final void longWrite(ObjectReference objref,long value,Word offset,Word location,int mode){  Magic.setLongAtOffset(objref.toObject(),offset.toOffset(),value,location.toInt());}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  public void testGetInstanceStringProvider03() throws IllegalArgumentException, NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  KeyAgreement keyA;  for (int i=0; i < validValues.length; i++) {    keyA=KeyAgreement.getInstance(validValues[i],defaultProvider);    assertEquals("Incorrect algorithm",keyA.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",keyA.getProvider(),defaultProvider);  }}  }
class C{  public char loadChar(Offset offset){  return this.plus(offset).loadChar();}  }
class C{  public void customizerClosing(){  m_modelPC.setOffscreenXAxis(m_xAxisBack);  m_modelPC.setOffscreenYAxis(m_yAxisBack);  m_modelPC.setOffscreenWidth(m_widthBack);  m_modelPC.setOffscreenHeight(m_heightBack);  m_modelPC.setOffscreenAdditionalOpts(m_optsBack);  m_modelPC.setOffscreenRendererName(m_rendererNameBack);}  }
class C{  public boolean isMultipleConfiguration(){  return multipleConfiguration;}  }
class C{  private static <K,V>ImmutableSortedMap<K,V> of(Comparator<? super K> comparator,K k1,V v1){  return new ImmutableSortedMap<K,V>(new RegularImmutableSortedSet<K>(ImmutableList.of(k1),checkNotNull(comparator)),ImmutableList.of(v1));}  }
class C{  private final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public InvalidPropertyException(final String msg){  super(msg);}  }
class C{  public static ArrayList<String> stringToArrayList(String string){  return new ArrayList<>(Arrays.asList(string.split(",")));}  }
class C{  public EWMAModelBuilder alpha(double alpha){  this.alpha=alpha;  return this;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:14.296 -0500",hash_original_method="337505C9EECB4FFE48F33491B52A72CA",hash_generated_method="EB3E9FA2C41C0DB7BE83722D8BD7953C") public V remove(Object key){  int hash=hash(key.hashCode());  return segmentFor(hash).remove(key,hash,null);}  }
class C{  public SolrQuery removeSort(String itemName){  if (sortClauses != null) {    for (    SortClause existing : sortClauses) {      if (existing.getItem().equals(itemName)) {        sortClauses.remove(existing);        if (sortClauses.isEmpty())         sortClauses=null;        serializeSorts();        break;      }    }  }  return this;}  }
class C{  protected void publishStartEvent(HttpRequest request){  URI uri=request.getURI();  String spanName=uriScheme(uri) + ":" + uri.getPath();  Span newSpan=this.tracer.createSpan(spanName);  this.spanInjector.inject(newSpan,request);  addRequestTags(request);  newSpan.logEvent(Span.CLIENT_SEND);  if (log.isDebugEnabled()) {    log.debug("Starting new client span [" + newSpan + "]");  }}  }
class C{  public void reset(){  super.reset();  if (localCacheDir != null) {    File localCacheDirFile=new File(localCacheDir);    if (localCacheDirFile.exists()) {      try {        FileUtils.deleteFile(localCacheDirFile);      } catch (      IOException e) {        logger.fine("There's a problem deleting local cache directory: " + e.getMessage());      }    }  }}  }
class C{  public static JavaFileObject toJavaFileObject(JavaFileManager fileManager,File sourceFile) throws IOException {  List<JavaFileObject> javaFileObjects=toJavaFileObjects(fileManager,asList(sourceFile));  return javaFileObjects.isEmpty() ? null : javaFileObjects.get(0);}  }
class C{  public void saveStringToPreference(String key,String value){  if (value == null) {    mSharedPreference.edit().remove(key).apply();  } else {    mSharedPreference.edit().putString(key,value).apply();  }}  }
class C{  void computeLiveout(Deque<Block> code,Map<Block,LocalVarState> live_map){  boolean changed=true;  while (changed) {    changed=false;    for (    Block b : code) {      LocalVarState current_state=live_map.get(b);      BitSet next_liveout=new BitSet();      for (      Edge p : b.succ()) {        next_liveout.or(live_map.get(p.to).getLivein());      }      for (      Edge x : b.xsucc) {        next_liveout.or(live_map.get(x.to).getLivein());      }      changed|=current_state.mergeLiveout(next_liveout);    }  }}  }
class C{  public void initializePackageContents(){  if (isInitialized)   return;  isInitialized=true;  setName(eNAME);  setNsPrefix(eNS_PREFIX);  setNsURI(eNS_URI);  initEClass(modelEClass,Model.class,"Model",IS_ABSTRACT,IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getModel_Name(),ecorePackage.getEString(),"name",null,0,1,Model.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getModel_Namespace(),ecorePackage.getEString(),"namespace",null,0,1,Model.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getModel_Version(),ecorePackage.getEString(),"version",null,0,1,Model.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getModel_References(),this.getModelReference(),null,"references",null,0,-1,Model.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getModel_Description(),ecorePackage.getEString(),"description",null,0,1,Model.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getModel_Displayname(),ecorePackage.getEString(),"displayname",null,0,1,Model.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getModel_Category(),ecorePackage.getEString(),"category",null,0,1,Model.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(modelReferenceEClass,ModelReference.class,"ModelReference",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getModelReference_Version(),ecorePackage.getEString(),"version",null,0,1,ModelReference.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getModelReference_ImportedNamespace(),ecorePackage.getEString(),"importedNamespace",null,0,1,ModelReference.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  createResource(eNS_URI);}  }
class C{  private Image baseFor(IHex hex,Component comp){  HexEntry bestMatch=null;  double match=-1;  Iterator<HexEntry> iter=bases.iterator();  while (iter.hasNext()) {    HexEntry entry=iter.next();    if (entry.getHex().containsTerrain(Terrains.METAL_CONTENT)) {      hex.removeTerrain(Terrains.METAL_CONTENT);    }    double thisMatch=baseMatch(hex,entry.getHex());    if (thisMatch == 1.0) {      bestMatch=entry;      break;    }    if (thisMatch > match) {      bestMatch=entry;      match=thisMatch;    }  }  Image img=bestMatch.getImage(comp,hex.getCoords().hashCode());  if (img == null) {    img=ImageUtil.createAcceleratedImage(HEX_W,HEX_H);  }  return img;}  }
class C{  protected void addKindPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Entry_kind_feature"),getString("_UI_PropertyDescriptor_description","_UI_Entry_kind_feature","_UI_Entry_type"),SGraphPackage.Literals.ENTRY__KIND,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public static Duration diff(Date start,Date end){  return fromMillis(end.getTime() - start.getTime());}  }
class C{  @HLEFunction(nid=0x5DEAC81B,version=150) public int sceNetApctlGetState(TPointer32 stateAddr){  stateAddr.setValue(state);  return 0;}  }
class C{  public synchronized String toString(){  String toString="Thread Auditor - List of monitored threads:\n";  Iterator<ThreadHandle> it=threadHandles.values().iterator();  while (it.hasNext()) {    ThreadHandle threadHandle=(ThreadHandle)it.next();    toString+="   " + threadHandle.toString() + "\n";  }  return toString;}  }
class C{  public synchronized String format(LogRecord record){  StringBuffer sb=new StringBuffer();  Timestamp ts=new Timestamp(record.getMillis());  String text=ts.toString();  sb.append("JUL ");  sb.append(text);  sb.append(" ");  if (record.getSourceClassName() != null) {    sb.append(record.getSourceClassName());  } else {    sb.append(record.getLoggerName());  }  if (record.getSourceMethodName() != null) {    sb.append(" ");    sb.append(record.getSourceMethodName());  }  sb.append(lineSeparator);  String message=formatMessage(record);  sb.append(record.getLevel().getLocalizedName());  sb.append(": ");  sb.append(message);  sb.append(lineSeparator);  if (record.getThrown() != null) {    try {      StringWriter sw=new StringWriter();      PrintWriter pw=new PrintWriter(sw);      record.getThrown().printStackTrace(pw);      pw.close();      sb.append(sw.toString());    } catch (    Exception ex) {    }  }  return sb.toString();}  }
class C{  public JActivityWindow(){  this(ActivityManager.getInstance());}  }
class C{  protected boolean isDefaultFullDetail(){  return defaultFullDetail;}  }
class C{  public void addWarning(String msg,RefactoringStatusContext context){  fEntries.add(new RefactoringStatusEntry(RefactoringStatus.WARNING,msg,context));  fSeverity=Math.max(fSeverity,WARNING);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:55.603 -0500",hash_original_method="79826C36B2AA82EB741C6DACEAF05E13",hash_generated_method="6C63AFB549C6A2DEB4BDFF0FC1F8CCE1") public static ContentProviderOperation newSetOperation(Uri uri,Account account,byte[] data){  ContentValues values=new ContentValues();  values.put(Columns.DATA,data);  return ContentProviderOperation.newInsert(uri).withValue(Columns.ACCOUNT_NAME,account.name).withValue(Columns.ACCOUNT_TYPE,account.type).withValues(values).build();}  }
class C{  public void actionPerformed(ActionEvent evt){  root.panel.view.getSharedContext().setDebug_draw_inline_boxes(!root.panel.view.getSharedContext().debugDrawInlineBoxes());  root.panel.view.repaint();}  }
class C{  public static void main(String[] args) throws Exception {  GUILauncher.launchApplication(Explorer.class,"MEKA Explorer",true,args);}  }
class C{  public String publishMedia(String participantId,boolean isOffer,String sdp,MediaElement loopbackAlternativeSrc,MediaType loopbackConnectionType,boolean doLoopback,MediaElement... mediaElements) throws RoomException {  log.debug("Request [PUBLISH_MEDIA] isOffer={} sdp={} " + "loopbackAltSrc={} lpbkConnType={} doLoopback={} mediaElements={} ({})",isOffer,sdp,loopbackAlternativeSrc == null,loopbackConnectionType,doLoopback,mediaElements,participantId);  SdpType sdpType=isOffer ? SdpType.OFFER : SdpType.ANSWER;  Participant participant=getParticipant(participantId);  String name=participant.getName();  Room room=participant.getRoom();  participant.createPublishingEndpoint();  for (  MediaElement elem : mediaElements) {    participant.getPublisher().apply(elem);  }  String sdpResponse=participant.publishToRoom(sdpType,sdp,doLoopback,loopbackAlternativeSrc,loopbackConnectionType);  if (sdpResponse == null) {    throw new RoomException(Code.MEDIA_SDP_ERROR_CODE,"Error generating SDP response for publishing user " + name);  }  room.newPublisher(participant);  return sdpResponse;}  }
class C{  public boolean isCellEditable(int row,int col){  return false;}  }
class C{  public void filterMovies(Map<MovieSearchOptions,Object> filter){  matcherEditor.filterMovies(filter);  firePropertyChange("filterChanged",filter.isEmpty(),!filter.isEmpty());}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public JSearchPanel(Visualization vis,String group,String field){  this(vis,group,field,true);}  }
class C{  @Override public String toString(){  return currentParsed().toString();}  }
class C{  public synchronized void removeGraphListener(GraphListener cl){  m_graphListeners.remove(cl);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public void addEmbeddedServiceLoader(EmbeddedServiceLoader n){  embeddedServiceLoaders.add(n);}  }
class C{  public String deletionStringFor(DatabaseAccessor accessor){  return "DROP TABLE " + this.getName();}  }
class C{  public void toEPL(StringWriter writer){  writer.append(columnName);  writer.append(" ");  if (optionalExpression != null) {    optionalExpression.toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);  } else {    writer.append(optionalTypeName);    if (optionalTypeIsArray != null && optionalTypeIsArray) {      if (optionalTypeIsPrimitiveArray != null && optionalTypeIsPrimitiveArray) {        writer.append("[primitive]");      } else {        writer.append("[]");      }    }    if (primaryKey) {      writer.append(" primary key");    }  }  if (annotations != null && !annotations.isEmpty()) {    writer.append(" ");    String delimiter="";    for (    AnnotationPart part : annotations) {      if (part.getName() == null) {        continue;      }      writer.append(delimiter);      delimiter=" ";      part.toEPL(writer);    }  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public static void main(String[] args){  AsterixHyracksIntegrationUtil integrationUtil=new AsterixHyracksIntegrationUtil();  run(integrationUtil,Boolean.getBoolean("cleanup.start"),Boolean.getBoolean("cleanup.shutdown"));}  }
class C{  protected void doRenderGraphic(DrawContext dc){  for (  SurfaceCircle ring : this.rings) {    ring.render(dc);  }}  }
class C{  public static String toHex(byte[] buf,int offset,int length){  if (buf == null) {    return null;  }  char[] hex=new char[2 * length];  for (int i=0; i < length; i++) {    int b=buf[i + offset] & 0xff;    hex[2 * i]=HEX[b >>> 4];    hex[2 * i + 1]=HEX[b & 0xf];  }  return new String(hex);}  }
class C{  private void attemptBackgroundPaintSelection(){  Color c;  c=JColorChooser.showDialog(this,localizationResources.getString("Background_Color"),Color.blue);  if (c != null) {    this.backgroundPaintSample.setPaint(c);  }}  }
class C{  private static void addSwatchToRow(TableRow row,View swatch,int rowNumber){  if (rowNumber % 2 == 0) {    row.addView(swatch);  } else {    row.addView(swatch,0);  }}  }
class C{  public ExecutionManager(ParallelTask task){  this.task=task;}  }
class C{  public Hessian2StreamingOutput createHessian2StreamingOutput(OutputStream os){  Hessian2Output out=createHessian2Output(os);  return new Hessian2StreamingOutput(out);}  }
class C{  private TimestampToken addTimestampTokenIncludes(final List<DSSReference> references,final TimestampToken token){  final List<TimestampInclude> includes=new ArrayList<TimestampInclude>();  for (  DSSReference reference : references) {    TimestampInclude include=new TimestampInclude(reference.getUri(),"true");    includes.add(include);  }  token.setTimestampIncludes(includes);  return token;}  }
class C{  protected void extractMatchingPath(List<PathSegment> encodedPathSegments){  StringBuilder preprocessedPath=new StringBuilder();  for (  PathSegment pathSegment : encodedPathSegments) {    preprocessedPath.append("/").append(pathSegment.getPath());  }  matchingPath=preprocessedPath.toString();}  }
class C{  public static Video randomVideo(){  String id=UUID.randomUUID().toString();  String title="Video-" + id;  String category="Category-" + UUID.randomUUID().toString();  Category cat=new Category();  cat.setName(category);  String url="http://coursera.org/some/video-" + id;  long duration=60 * (int)Math.rint(Math.random() * 60) * 1000;  Video v=new Video(title,url,duration);  v.setCategory(cat);  return v;}  }
class C{  public static String encode(String data,String charEncoding) throws UnsupportedEncodingException {  if (data == null) {    data="";  }  if (charEncoding == null) {    charEncoding=DEFAULT_CHAR_ENCODING;  }  ByteArrayOutputStream bos=new ByteArrayOutputStream();  OutputStreamWriter osw=new OutputStreamWriter(bos,charEncoding);  try {    osw.write(data);  } catch (  IOException ioe) {    throw new RuntimeException(ioe.toString());  }  byte[] encodedData=encode(bos.toByteArray());  if (encodedData == null) {    return "";  }  bos=new ByteArrayOutputStream(encodedData.length);  try {    bos.write(encodedData);  } catch (  IOException ioe) {    throw new RuntimeException(ioe.toString());  }  return bos.toString(charEncoding);}  }
class C{  private static String allAs(int len){  StringBuilder sb=new StringBuilder();  for (int i=0; i < len; i++) {    sb.append('a');  }  return sb.toString();}  }
class C{  private void enterBinop(String name,Type left,Type right,Type res,int opcode){  predefClass.members().enter(new OperatorSymbol(makeOperatorName(name),new MethodType(List.of(left,right),res,List.<Type>nil(),methodClass),opcode,predefClass));}  }
class C{  public static ScheduledReporter createConsoleReporter(MetricRegistry metricRegistry,Map<String,Object> config){  return ConsoleReporter.forRegistry(metricRegistry).convertRatesTo(getRatesUnit(config)).convertDurationsTo(getDurationUnit(config)).build();}  }
class C{  public static void quickSort(char[] a,int fromIndex,int toIndex,CharComparator c){  rangeCheck(a.length,fromIndex,toIndex);  quickSort1(a,fromIndex,toIndex - fromIndex,c);}  }
class C{  @Override public boolean flingForward(Selector obj,boolean isVertical) throws UiObjectNotFoundException {  UiScrollable scrollable=new UiScrollable(obj.toUiSelector());  if (isVertical)   scrollable.setAsVerticalList(); else   scrollable.setAsHorizontalList();  return scrollable.flingForward();}  }
class C{  protected String resolveArgument(String key){  return mArguments.get(key);}  }
class C{  public SeriesException(String message){  super(message);}  }
class C{  public void close(){  if (jmdnsInstance != null) {    try {      jmdnsInstance.close();    } catch (    IOException ignored) {    } finally {      jmdnsSubscriberCount.set(0);    }  }}  }
class C{  public void push(String value) throws IOException {  pushValues.add(value);  if (flashVersion < 5) {    flushPushValues();  }}  }
class C{  public ServiceOperationException(String message){  super(message);}  }
class C{  public void writeTo(final PacketOutputStream os){  os.write(ParameterWriter.QUOTE);  os.write(dateToBytes());  ParameterWriter.formatMicroseconds(os,(int)(time.getTime() % 1000) * 1000,fractionalSeconds);  os.write(ParameterWriter.QUOTE);}  }
class C{  public static <V>boolean isEmpty(V[] sourceArray){  return (sourceArray == null || sourceArray.length == 0);}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  m_valueBuffer.append(ch,start,length);}  }
class C{  public void permuteRows(){  List<Integer> permutation=new ArrayList<>();  for (int i=0; i < getNumRows(); i++) {    permutation.add(i);  }  Collections.shuffle(permutation);  Number[][] data2=new Number[data.length][data[0].length];  for (int i=0; i < getNumRows(); i++) {    for (int j=0; j < getNumColumns(); j++) {      data2[i][j]=data[permutation.get(i)][j];    }  }  this.data=data2;}  }
class C{  public void shutdown(){  this.shutdown=true;  this.interrupt();  boolean interrupted=Thread.interrupted();  try {    this.join(15 * 1000);  } catch (  InterruptedException e) {    interrupted=true;  } finally {    if (interrupted) {      Thread.currentThread().interrupt();    }  }  if (this.isAlive()) {    logger.warn(LocalizedMessage.create(LocalizedStrings.HARegionQueue_QUEUEREMOVALTHREAD_IGNORED_CANCELLATION));  }}  }
class C{  public void scheduleReceive(CommChannel channel,InputPort port){  executorService.execute(new CommChannelHandlerRunnable(channel,port));}  }
class C{  public SList(){}  }
class C{  public static boolean belowThan(long a,long b){  return Long.compareUnsigned(a,b) < 0;}  }
class C{  public static void revealInEditor(IProject project,MethodArgumentModel methArg,boolean activate){  MethodModel method=methArg.getMethod();  SourceLocationTag line=getLine(method);  if (line != null) {    String className=line.getClz();    IEditorPart openedEditor=openEditor(project,className,activate);    if (openedEditor != null && openedEditor instanceof ITextEditor) {      ITextEditor textEditor=(ITextEditor)openedEditor;      IDocument document=textEditor.getDocumentProvider().getDocument(textEditor.getEditorInput());      int lineNumber=line.getLine();      boolean isDecl=method.getLines().isEmpty();      IRegion region=getRegion(document,methArg,line,isDecl);      try {        int offset=(region == null) ? document.getLineOffset(lineNumber - 1) : region.getOffset();        int length=(region == null) ? document.getLineLength(lineNumber - 1) : region.getLength();        textEditor.selectAndReveal(offset,length);      } catch (      BadLocationException e) {        e.printStackTrace();      }    }  }}  }
class C{  public void requestUpdate(){  mRecomputePosition=true;  mLayout.requestUpdate();}  }
class C{  public int hashCode(){  return hashValue;}  }
class C{  static ExtractIndexAndSql from(String sql){  return new ExtractIndexAndSql(sql).invoke();}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/check-progress") public VolumeRestRep checkFullCopyProgress(@PathParam("id") URI fullCopyURI) throws InternalException {  Volume fullCopyVolume=queryFullCopy(fullCopyURI);  return getFullCopyManager().checkFullCopyProgress(fullCopyVolume.getAssociatedSourceVolume(),fullCopyURI);}  }
class C{  public void renderRoads(OMGraphicList gl,boolean forceNew){  for (Enumeration e=roads.elements(); e.hasMoreElements(); ) {    Road road=(Road)e.nextElement();    if (road.getFirstIntersection() == this)     road.render(gl,forceNew);  }}  }
class C{  public MyHashMap(int initialCapacity,float loadFactorThreshold){  if (initialCapacity > MAXIMUM_CAPACITY)   this.capacity=MAXIMUM_CAPACITY; else   this.capacity=trimToPowerOf2(initialCapacity);  this.loadFactorThreshold=loadFactorThreshold;  table=new ArrayList<>();  for (int i=0; i < capacity; i++) {    table.add(null);  }}  }
class C{  @Override public Model learn(ExampleSet exampleSet) throws OperatorException {  if (!exampleSet.getAttributes().getLabel().isNominal()) {    throw new UserError(this,119,exampleSet.getAttributes().getLabel().getName(),getName());  }  this.performance=this.prepareWeights(exampleSet);  Model model=this.trainBoostingModel(exampleSet);  Attribute weightAttribute=exampleSet.getAttributes().getWeight();  if (this.oldWeights != null) {    Iterator<Example> reader=exampleSet.iterator();    int i=0;    while (reader.hasNext() && i < this.oldWeights.length) {      reader.next().setValue(weightAttribute,this.oldWeights[i++]);    }  } else {    exampleSet.getAttributes().remove(weightAttribute);    exampleSet.getExampleTable().removeAttribute(weightAttribute);  }  return model;}  }
class C{  public boolean isSchedulerRemote(){  return isRemote;}  }
class C{  public Annotation(String type,boolean isPersistent,String text,int layer,ImageResource image){  this(type,isPersistent,text,layer,image,null);}  }
class C{  public ZipfianGenerator(long _items){  this(0,_items - 1);}  }
class C{  public static boolean isThroughFrontHex(IGame game,Coords src,Entity t){  Coords dest=t.getPosition();  int fa=dest.degree(src) - (t.getFacing() * 60);  if (fa < 0) {    fa+=360;  }  return (fa > 330) || (fa < 30);}  }
class C{  public List<Action> search(Problem p){  clearInstrumentation();  outcome=SearchOutcome.FAILURE;  Node current=nodeExpander.createRootNode(p.getInitialState());  Node neighbor=null;  while (!CancelableThread.currIsCanceled()) {    lastState=current.getState();    metrics.set(METRIC_NODE_VALUE,getValue(current));    List<Node> children=nodeExpander.expand(current,p);    neighbor=getHighestValuedNodeFrom(children,p);    if ((neighbor == null) || (getValue(neighbor) <= getValue(current))) {      if (SearchUtils.isGoalState(p,current))       outcome=SearchOutcome.SOLUTION_FOUND;      return SearchUtils.getSequenceOfActions(current);    }    current=neighbor;  }  return new ArrayList<Action>();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void writePopulation(String outputfolder){  if (sc.getPopulation().getPersons().size() == 0 || sc.getPopulation().getPersonAttributes() == null) {    throw new RuntimeException("Either no persons or person attributes to write.");  } else {    LOG.info("Writing population to file... (" + sc.getPopulation().getPersons().size() + ")");    PopulationWriter pw=new PopulationWriter(sc.getPopulation(),sc.getNetwork());    pw.writeV5(outputfolder + "Population.xml");    LOG.info("Writing person attributes to file...");    ObjectAttributesXmlWriter oaw=new ObjectAttributesXmlWriter(sc.getPopulation().getPersonAttributes());    oaw.setPrettyPrint(true);    oaw.writeFile(outputfolder + "PersonAttributes.xml");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:13.082 -0500",hash_original_method="60868BAA36991408EA660689C2535FBD",hash_generated_method="A8711EF68EBD906ABB8BD5ECE502F8AB") static public void broadcastStickyIntent(Intent intent,String permission){  try {    getDefault().broadcastIntent(null,intent,null,null,Activity.RESULT_OK,null,null,null,false,true);  } catch (  RemoteException ex) {  }}  }
class C{  private static void registerImage(String key,String partialURL){  try {    ImageDescriptor id=ImageDescriptor.createFromURL(new URL(ICON_BASE_URL,partialURL));    imageRegistry.put(key,id);    imageDescriptors.put(key,id);  } catch (  Exception e) {    Trace.trace(Trace.SEVERE,"Error registering image " + key + " from "+ partialURL,e);  }}  }
class C{  public static void checkErrors(){  if (errors > 0)   throw new GeneratorException();}  }
class C{  public static double MAEfitness(boolean useTrainingData,GEPIndividual ind){  double MAE=MAErawFitness(useTrainingData,ind,0);  return (1000.0) / (1.0 + MAE);}  }
class C{  public ArrayStoreException(java.lang.String s){}  }
class C{  public static double norm_1(double[] a){  double sum=0;  for (int i=0; i < a.length; i++) {    sum+=(a[i] < 0 ? -a[i] : a[i]);  }  return sum;}  }
class C{  public static OrderCreateSuccessDialogFragment newInstance(boolean sampleApplication){  OrderCreateSuccessDialogFragment orderCreateSuccessDialogFragment=new OrderCreateSuccessDialogFragment();  orderCreateSuccessDialogFragment.sampleApplication=sampleApplication;  return orderCreateSuccessDialogFragment;}  }
class C{  static String readSDP() throws Throwable {  System.out.println("Paste remote SDP here. Enter an empty " + "line to proceed:");  System.out.println("(we don't mind the [java] prefix in SDP intput)");  BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));  StringBuffer buff=new StringBuffer();  String line;  while ((line=reader.readLine()) != null) {    line=line.replace("[java]","");    line=line.trim();    if (line.length() == 0)     break;    buff.append(line);    buff.append("\r\n");  }  return buff.toString();}  }
class C{  public void read(org.apache.thrift.protocol.TProtocol iprot,SimpleTrigger struct) throws org.apache.thrift.TException {  org.apache.thrift.protocol.TField schemeField;  iprot.readStructBegin();  while (true) {    schemeField=iprot.readFieldBegin();    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {      break;    }switch (schemeField.id) {case 1:      if (schemeField.type == org.apache.thrift.protocol.TType.I32) {        struct.triggerId=iprot.readI32();        struct.setTriggerIdIsSet(true);      } else {        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);      }    break;case 2:  if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {    struct.triggerName=iprot.readString();    struct.setTriggerNameIsSet(true);  } else {    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);  }break;case 3:if (schemeField.type == org.apache.thrift.protocol.TType.I64) {struct.createTime=iprot.readI64();struct.setCreateTimeIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 4:if (schemeField.type == org.apache.thrift.protocol.TType.I32) {struct.operatorId=iprot.readI32();struct.setOperatorIdIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 5:if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {struct.triggerType=iprot.readString();struct.setTriggerTypeIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 6:if (schemeField.type == org.apache.thrift.protocol.TType.I64) {struct.beginTime=iprot.readI64();struct.setBeginTimeIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 7:if (schemeField.type == org.apache.thrift.protocol.TType.I64) {struct.endTime=iprot.readI64();struct.setEndTimeIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 8:if (schemeField.type == org.apache.thrift.protocol.TType.I32) {struct.times=iprot.readI32();struct.setTimesIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 9:if (schemeField.type == org.apache.thrift.protocol.TType.I32) {struct.executeInterval=iprot.readI32();struct.setExecuteIntervalIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 10:if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {struct.intervalUnit=iprot.readString();struct.setIntervalUnitIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default :org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}  }
class C{  public Problem(){  this.occurred=new Date();}  }
class C{  public void sendSiteDegradedMail(String siteName,long degradeTimeStamp){  String degradeTime=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date(degradeTimeStamp));  String to=getMailAddressOfUser("root");  if (to == null || to.isEmpty()) {    log.warn("Can't send mail alert, no email address for root user");    return;  }  Map<String,String> params=Maps.newHashMap();  params.put("siteName",siteName);  params.put("degradeTime",String.format("%s (TimeZone: %s)",degradeTime,TimeZone.getDefault().getID()));  String title=String.format("ATTENTION - %s site has been marked as STANDBY_DEGRADED state",siteName);  String content=MailHelper.readTemplate("StandbySiteDegraded.html");  content=MailHelper.parseTemplate(params,content);  getMailHelper().sendMailMessage(to,title,content);}  }
class C{  @Override public XMLStreamWriter createXMLStreamWriter(OutputStream out) throws XMLStreamException {  return new WbXmlStreamWriter(out,(WbXmlDefinition)props.get(DEFINITION_PROPERTY),(WbXmlEncoder.StrtblType)props.get(ENCODING_TYPE_PROPERTY),(Boolean)props.get(SKIP_SPACES_PROPERTY));}  }
class C{  @Override public void updateApplication(URI storage,ApplicationAddVolumeList addVolList,URI application,String opId) throws ControllerException {  TaskCompleter completer=null;  String waitFor=null;  try {    Workflow workflow=_workflowService.getNewWorkflow(this,UPDATE_VOLUMES_FOR_APPLICATION_WS_NAME,false,opId);    List<URI> volumesToAdd=null;    if (addVolList != null) {      volumesToAdd=addVolList.getVolumes();    }    if (volumesToAdd != null && !volumesToAdd.isEmpty()) {      Map<URI,List<URI>> addVolsMap=new HashMap<URI,List<URI>>();      for (      URI voluri : volumesToAdd) {        Volume vol=_dbClient.queryObject(Volume.class,voluri);        if (vol != null && !vol.getInactive()) {          if (ControllerUtils.isVnxVolume(vol,_dbClient) && vol.isInCG() && !ControllerUtils.isNotInRealVNXRG(vol,_dbClient)) {            URI cguri=vol.getConsistencyGroup();            List<URI> vols=addVolsMap.get(cguri);            if (vols == null) {              vols=new ArrayList<URI>();            }            vols.add(voluri);            addVolsMap.put(cguri,vols);          }        }      }      List<URI> cgs=new ArrayList<URI>(addVolsMap.keySet());      completer=new ApplicationTaskCompleter(application,volumesToAdd,null,cgs,opId);      for (      Map.Entry<URI,List<URI>> entry : addVolsMap.entrySet()) {        _log.info("Creating workflows for adding CG volumes to application");        URI cguri=entry.getKey();        List<URI> cgVolsToAdd=entry.getValue();        URI voluri=cgVolsToAdd.get(0);        Volume vol=_dbClient.queryObject(Volume.class,voluri);        StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,vol.getStorageController());        BlockConsistencyGroup cg=_dbClient.queryObject(BlockConsistencyGroup.class,cguri);        String groupName=ControllerUtils.generateReplicationGroupName(storageSystem,cguri,vol.getReplicationGroupInstance(),_dbClient);        waitFor=workflow.createStep(UPDATE_CONSISTENCY_GROUP_STEP_GROUP,String.format("Removing volumes from consistency group %s",cg.getLabel()),waitFor,storage,storageSystem.getSystemType(),this.getClass(),removeFromConsistencyGroupMethod(storage,cguri,cgVolsToAdd,true),rollbackMethodNullMethod(),null);        waitFor=workflow.createStep(UPDATE_CONSISTENCY_GROUP_STEP_GROUP,String.format("Deleting replication group for consistency group %s",cg.getLabel()),waitFor,storage,storageSystem.getSystemType(),this.getClass(),deleteConsistencyGroupMethod(storage,cguri,groupName,true,false,false),rollbackMethodNullMethod(),null);      }    }    _log.info("Executing workflow plan {}",UPDATE_VOLUMES_FOR_APPLICATION_WS_NAME);    String successMessage=String.format("Update application successful for %s",application.toString());    workflow.executePlan(completer,successMessage);  } catch (  Exception e) {    _log.error("Exception while updating the application",e);    if (completer != null) {      completer.error(_dbClient,DeviceControllerException.exceptions.failedToUpdateVolumesFromAppication(application.toString(),e.getMessage()));    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) @Override public void endWindow(){  boolean emit=(++windowCount) % windowSize == 0;  if (!emit) {    return;  }  for (  Map.Entry<K,V> e : high.entrySet()) {    HighLow<V> hl=new HighLow<V>();    hl.setHigh(getValue(e.getValue().doubleValue()));    hl.setLow(getValue(low.get(e.getKey()).doubleValue()));    range.emit(new KeyValPair(e.getKey(),hl));  }  clearCache();}  }
class C{  public boolean isAdjacentAndEmpty(int fromR,int fromC,int toR,int toC){  if (board[toR][toC] != EmptyMark) {    return false;  }  int dR=Math.abs(fromR - toR);  int dC=Math.abs(fromC - toC);  if ((dC == +1 && dR == 0) || (dC == 0 && dR == +1)) {    return true;  }  return false;}  }
class C{  public Object put(Object key,Object value){  if (!containsKey(key))   keys.add(key);  return super.put(key,value);}  }
class C{  public static void checkNames(int depth,boolean create,String ans,String ask) throws Exception {  int d=depth - 1;  File f=new File(ans);  String n;  if (f.exists()) {    if (Files.isDirectory(f.toPath(),LinkOption.NOFOLLOW_LINKS) && f.list() != null) {      if ((n=findSomeFile(ans,create)) != null)       checkSlashes(d,create,ans + n,ask + n);      if ((n=findSomeDir(ans,create)) != null)       checkSlashes(d,create,ans + n,ask + n);    }    n=findNon(ans);    checkSlashes(d,create,ans + n,ask + n);  } else {    n="foo" + depth;    checkSlashes(d,create,ans + n,ask + n);  }  checkSlashes(d,create,trimTrailingSlashes(ans),ask + ".");  if ((n=f.getParent()) != null) {    String n2;    if (win32 && ((n2=f.getParentFile().getParent()) != null) && n2.equals("\\\\")) {      checkSlashes(d,create,ans,ask + "..");    } else {      checkSlashes(d,create,n,ask + "..");    }  } else {    if (win32)     checkSlashes(d,create,ans,ask + ".."); else {      File thisPath=new File(ask);      File nextPath=new File(ask + "..");      if (!thisPath.getCanonicalPath().equals(nextPath.getCanonicalPath()))       checkSlashes(d,create,ans + "..",ask + "..");    }  }}  }
class C{  public SubscriptionStateException(String message,Reason reason){  super(message);  bean.setReason(reason);  setMessageKey(initMessageKey());}  }
class C{  public MqttSecurityException(int reasonCode){  super(reasonCode);}  }
class C{  @Override public void draw3DRect(int x,int y,int width,int height,boolean raised){  drawRect(x,y,width,height);}  }
class C{  public void connect(TreeLinkNode root){  if (root == null)   return;  TreeLinkNode cur=root;  TreeLinkNode prev;  TreeLinkNode nextHead;  while (cur != null) {    nextHead=null;    prev=null;    while (cur != null) {      if (cur.left != null) {        if (prev != null)         prev.next=cur.left; else         nextHead=cur.left;        prev=cur.left;      }      if (cur.right != null) {        if (prev != null)         prev.next=cur.right; else         nextHead=cur.right;        prev=cur.right;      }      cur=cur.next;    }    cur=nextHead;  }}  }
class C{  public String escapeQuotes(String str){  return StringUtils.replace(str,"\"","\\\"");}  }
class C{  @Deprecated @SuppressWarnings("UnusedDeclaration") public static void authenticate(AuthCallback callback){  authenticate(callback,ThemeUtils.DEFAULT_THEME);}  }
class C{  public final void request(Result<I> result){  I instance=_instance;  if (instance != null && _lifecycle.isActive() && !isModified()) {    result.ok(instance);  } else   if (_lifecycle.isDestroyed()) {    result.ok(null);  } else {    _strategy.request(this,result);  }}  }
class C{  boolean hasBaseline(int row){  return (hasBaseline && baselineType[row] != 0);}  }
class C{  public SVGOMFEDisplacementMapElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public void cacheDocSet(Query query,DocSet optionalAnswer,boolean mustCache) throws IOException {  if (optionalAnswer != null) {    if (filterCache != null) {      filterCache.put(query,optionalAnswer);    }    return;  }  getDocSet(query);}  }
class C{  public UnzipJob(File zip,File targetDir,Action completedAction) throws IllegalArgumentException {  super(zip,targetDir,completedAction);  unzip=new UnzipRunnable(zip,targetDir);}  }
