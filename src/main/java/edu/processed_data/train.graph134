class C{  private void updateChildMaterialWithLights(Object3D child){  Material material=child.getMaterial();  if (material != null && material.lightingEnabled())   material.setLights(mLights);  if (material != null && mFogParams != null)   material.addPlugin(new FogMaterialPlugin(mFogParams));  int numChildren=child.getNumChildren();  for (int i=0; i < numChildren; i++) {    Object3D grandChild=child.getChildAt(i);    updateChildMaterialWithLights(grandChild);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static DateTimeComponents parse(String dateString){  return parse(dateString,null);}  }
class C{  @Override public void unregisterListener(Object listener){  if (listener instanceof IListener)   for (  Map.Entry<Class<? extends IEvent>,List<IListener>> entry : listenerMap.entrySet()) {    entry.getValue().stream().filter(null).forEach(null);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:06.758 -0500",hash_original_method="B238EF3FEB62ADA205D3F3298560A137",hash_generated_method="BAAC5EC1F498C64E9C7C929F02966619") private void checkDestination(InetAddress destAddr,int dstPort){  if (dstPort < 0 || dstPort > 65535) {    throw new IllegalArgumentException("Port out of range: " + dstPort);  }}  }
class C{  private void captureChild(List<TreeNode> tree,int parent,UIComponent c){  if (!c.isTransient()) {    TreeNode n=new TreeNode(parent,c);    int pos=tree.size();    tree.add(n);    captureRest(tree,pos,c);  }}  }
class C{  public static String relativePath(File self,File to) throws IOException {  String fromPath=self.getCanonicalPath();  String toPath=to.getCanonicalPath();  String[] fromPathStack=getPathStack(fromPath);  String[] toPathStack=getPathStack(toPath);  if (0 < toPathStack.length && 0 < fromPathStack.length) {    if (!fromPathStack[0].equals(toPathStack[0])) {      return getPath(Arrays.asList(toPathStack));    }  } else {    return getPath(Arrays.asList(toPathStack));  }  int minLength=Math.min(fromPathStack.length,toPathStack.length);  int same=1;  while (same < minLength && fromPathStack[same].equals(toPathStack[same])) {    same++;  }  List<String> relativePathStack=new ArrayList<String>();  for (int i=same; i < fromPathStack.length; i++) {    relativePathStack.add("..");  }  for (int i=same; i < toPathStack.length; i++) {    relativePathStack.add(toPathStack[i]);  }  return getPath(relativePathStack);}  }
class C{  public MatFileReader(File file,MatFileFilter filter) throws IOException {  this.filter=filter;  data=new LinkedHashMap<String,MLArray>();  FileChannel roChannel=new RandomAccessFile(file,"r").getChannel();  ByteBuffer buf=roChannel.map(FileChannel.MapMode.READ_ONLY,0,(int)roChannel.size());  readHeader(buf);  while (buf.remaining() > 0) {    readData(buf);  }  roChannel.close();}  }
class C{  public void addFeature(Feature f){  f.strId2IdxAdd(fmap);  features.add(f);}  }
class C{  @Override public void drawScreen(int par1,int par2,float par3){  drawBackground(0);  drawCenteredString(fontRendererObj,(entry != null ? "Edit" : "Add") + " Keybind",width / 2,20,16777215);  drawString(fontRendererObj,"Key: " + key,width / 2 - 100,47,10526880);  drawString(fontRendererObj,"Commands (separated by \";\")",width / 2 - 100,87,10526880);  commandBox.drawTextBox();  super.drawScreen(par1,par2,par3);}  }
class C{  public static String toJSONDiffFlatString(boolean diffOnly,Sql sqlA,Sql sqlB,ResultList rsA,ResultList rsB,QueryParameters qpsA,QueryParameters qpsB,int status,String message){  ResultList combined=ResultListMerger.mergeByKey(sqlA,sqlB,rsA,rsB,diffOnly);  StringBuilder sb=new StringBuilder();  sb.append("{\"resp\":{\"status\":").append(status);  sb.append(",\"message\":\"").append(escapeJson(message)).append("\"");  sb.append(",\"request\":{");  if (qpsA != null) {    sb.append("\"a_group\":\"").append(qpsA.getGroup()).append("\"");    sb.append(",\"a_host\":\"").append(qpsA.getHost()).append("\"");    sb.append(",\"a_sql\":\"").append(qpsA.getSql()).append("\"");    for (    Map.Entry<String,String> e : qpsA.getSqlParams().entrySet()) {      sb.append(",\"a_").append(e.getKey()).append("\":\"").append(e.getValue()).append("\"");    }    if (qpsB != null)     sb.append(",");  }  if (qpsB != null) {    sb.append("\"b_group\":\"").append(qpsB.getGroup()).append("\"");    sb.append(",\"b_host\":\"").append(qpsB.getHost()).append("\"");    sb.append(",\"b_sql\":\"").append(qpsB.getSql()).append("\"");    for (    Map.Entry<String,String> e : qpsB.getSqlParams().entrySet()) {      sb.append(",\"b_").append(e.getKey()).append("\":\"").append(e.getValue()).append("\"");    }  }  sb.append("}\r\n");  int cnt=combined != null ? combined.getRows().size() : 0;  List<ColumnInfo> cols=combined != null ? combined.getColumnDescriptor().getColumns() : null;  sb.append(",\"results\":{");  sb.append("\"total\":\"").append(cnt).append("\",");  sb.append("\"columns\":[");  if (cols != null) {    boolean first=true;    for (int i=0; i < cols.size(); i++) {      if (!first)       sb.append(","); else       first=false;      sb.append("\"").append(cols.get(i).getName() + "\"");    }  }  sb.append("],\r\n");  boolean firstRow=true;  sb.append("\"results\":[");  if (combined != null)   for (  ResultRow row : combined.getRows()) {    if (!firstRow)     sb.append(",");    int len=row.getColumns().size();    boolean first=true;    sb.append("{");    for (int i=0; i < len; i++) {      if (!first)       sb.append(",");      sb.append("\"").append(escapeJson(cols.get(i).getName())).append("\":");      if (cols.get(i).isNumberType()) {        if (row.getColumns().get(i) == null || row.getColumns().get(i).trim().length() == 0)         sb.append("\"\""); else {          if (row.getColumns().get(i).startsWith("-."))           sb.append(row.getColumns().get(i).replace("-.","-0.")); else           sb.append(escapeJson(row.getColumns().get(i)));        }      } else       sb.append("\"").append(escapeJson(row.getColumns().get(i))).append("\"");      first=false;    }    sb.append("}\r\n");    firstRow=false;  }  sb.append("]");  sb.append("}");  sb.append("}");  sb.append("}");  return sb.toString();}  }
class C{  public static boolean containsMethods(JCClassDecl classDeclaration){  for (  JCTree member : classDeclaration.getMembers()) {    if (member instanceof JCMethodDecl) {      JCMethodDecl method=(JCMethodDecl)member;      if (method.pos == classDeclaration.pos) {        continue;      }      return true;    } else     if (member instanceof JCVariableDecl) {      if (((JCVariableDecl)member).mods.getFlags().contains(Modifier.STATIC)) {        return true;      }    }  }  return false;}  }
class C{  public static boolean contains(int[] intArray,int value){  for (  int each : intArray) {    if (each == value) {      return true;    }  }  return false;}  }
class C{  public int writeByte(int index,byte b){  this.array.put(this.boundOffset(index),b);  return 1;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  @Override public void write(byte[] buffer,int offset,int length) throws IOException {  while ((mByteToSkip > 0 || mByteToCopy > 0 || mState != STATE_JPEG_DATA) && length > 0) {    if (mByteToSkip > 0) {      int byteToProcess=length > mByteToSkip ? mByteToSkip : length;      length-=byteToProcess;      mByteToSkip-=byteToProcess;      offset+=byteToProcess;    }    if (mByteToCopy > 0) {      int byteToProcess=length > mByteToCopy ? mByteToCopy : length;      out.write(buffer,offset,byteToProcess);      length-=byteToProcess;      mByteToCopy-=byteToProcess;      offset+=byteToProcess;    }    if (length == 0) {      return;    }switch (mState) {case STATE_SOI:      int byteRead=requestByteToBuffer(2,buffer,offset,length);    offset+=byteRead;  length-=byteRead;if (mBuffer.position() < 2) {  return;}mBuffer.rewind();if (mBuffer.getShort() != JpegHeader.SOI) {throw new IOException("Not a valid jpeg image, cannot write exif");}out.write(mBuffer.array(),0,2);mState=STATE_FRAME_HEADER;mBuffer.rewind();writeExifData();break;case STATE_FRAME_HEADER:byteRead=requestByteToBuffer(4,buffer,offset,length);offset+=byteRead;length-=byteRead;if (mBuffer.position() == 2) {short tag=mBuffer.getShort();if (tag == JpegHeader.EOI) {out.write(mBuffer.array(),0,2);mBuffer.rewind();}}if (mBuffer.position() < 4) {return;}mBuffer.rewind();short marker=mBuffer.getShort();if (marker == JpegHeader.APP1) {mByteToSkip=(mBuffer.getShort() & 0x0000ffff) - 2;mState=STATE_JPEG_DATA;} else if (!JpegHeader.isSofMarker(marker)) {out.write(mBuffer.array(),0,4);mByteToCopy=(mBuffer.getShort() & 0x0000ffff) - 2;} else {out.write(mBuffer.array(),0,4);mState=STATE_JPEG_DATA;}mBuffer.rewind();}}if (length > 0) {out.write(buffer,offset,length);}}  }
class C{  public static TextArea findTextAreaText(String text){  return findTextAreaText(Display.getInstance().getCurrent(),text);}  }
class C{  private boolean equalParamTypes(Class<?>[] params1,Class<?>[] params2){  if (params1.length == params2.length) {    for (int i=0; i < params1.length; i++) {      if (params1[i] != params2[i]) {        return false;      }    }    return true;  }  return false;}  }
class C{  @RequestMapping(method=RequestMethod.GET) public String adminHomePage(Model model){  return "adminHomePage_def";}  }
class C{  public ToStringBuilder append(final char[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  @Override protected void onStopLoading(){  cancelLoad();}  }
class C{  public <T extends Enum<T>>boolean isValidEnum(String value,Class<T> enumClass){  for (  T e : enumClass.getEnumConstants()) {    if (e.name().equalsIgnoreCase(value)) {      return true;    }  }  return false;}  }
class C{  public static boolean copyFile(File fromFile,File toFile,boolean forceOverwrite){  if (fromFile == null || !fromFile.exists() || toFile == null) {    return false;  }  if (toFile.exists() && !forceOverwrite) {    return false;  }  try {    InputStream fosFrom=new FileInputStream(fromFile);    OutputStream fosTo=new FileOutputStream(toFile);    byte bytes[]=new byte[1024];    int writeSize=0;    int startIndex=0;    int readCount=0;    while ((readCount=fosFrom.read(bytes)) != -1) {      fosTo.write(bytes,startIndex,readCount);      writeSize+=(readCount - startIndex);    }    fosFrom.close();    fosTo.close();    if (writeSize > 0) {      return true;    } else {      return false;    }  } catch (  Exception e) {    e.printStackTrace();    return false;  }}  }
class C{  protected boolean hasHistory(){  return true;}  }
class C{  public SingleFieldBuilder<MType,BType,IType> mergeFrom(MType value){  if (builder == null && message == message.getDefaultInstanceForType()) {    message=value;  } else {    getBuilder().mergeFrom(value);  }  onChanged();  return this;}  }
class C{  public static double logpdf(double val,double loc,double scale,double shape){  val=(val - loc) / scale;  double e=Math.exp(-val);  return -(val + (shape + 1.0) * Math.log1p(e)) + Math.log(shape);}  }
class C{  protected SVGFeFuncElementBridge(){}  }
class C{  public static String toString(double M_[][],int adp){  StringBuilder sb=new StringBuilder();  for (int j=0; j < M_.length; j++) {    for (int k=0; k < M_[j].length; k++) {      double d=M_[j][k];      String num=String.format("%6.2f",d);      if (adp == 0)       num=String.format("%2.0f",d);      sb.append(num);    }    sb.append("\n");  }  return sb.toString();}  }
class C{  public static Type paramType(Type rawType,Type... actualTypeArguments){  return new DefaultParameterizedType(rawType,actualTypeArguments);}  }
class C{  public byte[] decode(byte[] bytes) throws DecoderException {  return decodeQuotedPrintable(bytes);}  }
class C{  @Override public synchronized boolean retainAll(Collection<?> collection){  return super.retainAll(collection);}  }
class C{  public MapWidget(Context context,String rootMapFolder,int initialZoomLevel){  this(null,context,rootMapFolder,initialZoomLevel);}  }
class C{  public ECKey decrypt(KeyCrypter keyCrypter,KeyParameter aesKey) throws KeyCrypterException {  Preconditions.checkNotNull(keyCrypter);  if (this.keyCrypter != null && !this.keyCrypter.equals(keyCrypter)) {    throw new KeyCrypterException("The keyCrypter being used to decrypt the key is different to the one that was used to encrypt it");  }  byte[] unencryptedPrivateKey=keyCrypter.decrypt(encryptedPrivateKey,aesKey);  ECKey key=new ECKey(new BigInteger(1,unencryptedPrivateKey),null,isCompressed());  if (!Arrays.equals(key.getPubKey(),getPubKey()))   throw new KeyCrypterException("Provided AES key is wrong");  key.setCreationTimeSeconds(creationTimeSeconds);  return key;}  }
class C{  public FastAdapterDialog<Item> withNeutralButton(@StringRes int textRes,OnClickListener listener){  return withButton(BUTTON_NEUTRAL,textRes,listener);}  }
class C{  @Override protected void onDraw(Canvas canvas){  super.onDraw(canvas);  if (!mShouldRender)   return;  final int width=getMeasuredWidth();  final int height=getMeasuredHeight();  if (width <= 0 || height <= 0)   return;  if (mBitmap == null || mCanvas == null || mOldHeight != height || mOldWidth != width) {    if (mBitmap != null)     mBitmap.recycle();    mBitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);    mCanvas=new Canvas(mBitmap);  }  mOldWidth=width;  mOldHeight=height;  mCanvas.drawColor(Color.TRANSPARENT,PorterDuff.Mode.CLEAR);  mCanvas.drawColor(mMaskColour);  if (mEraser == null) {    mEraser=new Paint();    mEraser.setColor(0xFFFFFFFF);    mEraser.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));    mEraser.setFlags(Paint.ANTI_ALIAS_FLAG);  }  mShape.draw(mCanvas,mEraser,mXPosition,mYPosition,mShapePadding);  canvas.drawBitmap(mBitmap,0,0,null);}  }
class C{  @Override public void firePropertyChange(String propertyName,char oldValue,char newValue){}  }
class C{  private ListDocumentsCommand(){}  }
class C{  public void waitSensorActive(Sensor[] mSensors){  if (log.isDebugEnabled()) {    log.debug("waitSensorActive[] starts");  }  waitSensorState(mSensors,Sensor.ACTIVE);}  }
class C{  public Object createImplementation(){  return new JavaSEPortWithSVGSupport();}  }
class C{  public static boolean deleteFilesAndDirsRecursive(final String file){  if (TextUtils.isEmpty(file)) {    Log.e(FileUtils.class,"deleteFilesAndDirsRecursive(): Null or Empty parameter given");    return false;  }  return deleteFilesAndDirsRecursive(new File(file));}  }
class C{  void startFading(){  mHandler.removeMessages(MSG_FADE);  scheduleFade();}  }
class C{  public void removeSensorFromPanel(Sensor sensor){  removeSensorAssignment(sensor);  SensorIcon h=null;  int index=-1;  for (int i=0; (i < layoutEditor.sensorList.size()) && (index == -1); i++) {    h=layoutEditor.sensorList.get(i);    if (h.getSensor() == sensor) {      index=i;    }  }  if (index != (-1) && h != null) {    layoutEditor.sensorList.remove(index);    h.remove();    h.dispose();    needRedraw=true;  }}  }
class C{  public boolean isSetB1(){  return this.b1 != null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.226 -0500",hash_original_method="3A633183B8FA74E726B48B3496916A31",hash_generated_method="57F4C06037F48066098DE384581B21F8") protected final static VersionInfo fromMap(String pckg,Map info,ClassLoader clsldr){  if (pckg == null) {    throw new IllegalArgumentException("Package identifier must not be null.");  }  String module=null;  String release=null;  String timestamp=null;  if (info != null) {    module=(String)info.get(PROPERTY_MODULE);    if ((module != null) && (module.length() < 1))     module=null;    release=(String)info.get(PROPERTY_RELEASE);    if ((release != null) && ((release.length() < 1) || (release.equals("${pom.version}"))))     release=null;    timestamp=(String)info.get(PROPERTY_TIMESTAMP);    if ((timestamp != null) && ((timestamp.length() < 1) || (timestamp.equals("${mvn.timestamp}"))))     timestamp=null;  }  String clsldrstr=null;  if (clsldr != null)   clsldrstr=clsldr.toString();  return new VersionInfo(pckg,module,release,timestamp,clsldrstr);}  }
class C{  public void clear(){  mRecycler.setAdapter(null);}  }
class C{  public static <T>T choice(T... elements){  if (elements.length == 0)   return null;  int position=random.nextInt(elements.length);  return elements[position];}  }
class C{  protected void drawGridBandsHorizontal(Graphics2D g2,Rectangle2D plotArea,Rectangle2D dataArea,boolean firstGridBandIsDark,List ticks){  boolean currentGridBandIsDark=firstGridBandIsDark;  double yy=dataArea.getY();  double xx1, xx2;  double outlineStrokeWidth=1.0;  Stroke outlineStroke=getPlot().getOutlineStroke();  if (outlineStroke != null && outlineStroke instanceof BasicStroke) {    outlineStrokeWidth=((BasicStroke)outlineStroke).getLineWidth();  }  Iterator iterator=ticks.iterator();  ValueTick tick;  Rectangle2D band;  while (iterator.hasNext()) {    tick=(ValueTick)iterator.next();    xx1=valueToJava2D(tick.getValue() - 0.5d,dataArea,RectangleEdge.BOTTOM);    xx2=valueToJava2D(tick.getValue() + 0.5d,dataArea,RectangleEdge.BOTTOM);    if (currentGridBandIsDark) {      g2.setPaint(this.gridBandPaint);    } else {      g2.setPaint(this.gridBandAlternatePaint);    }    band=new Rectangle2D.Double(Math.min(xx1,xx2),yy + outlineStrokeWidth,Math.abs(xx2 - xx1),dataArea.getMaxY() - yy - outlineStrokeWidth);    g2.fill(band);    currentGridBandIsDark=!currentGridBandIsDark;  }}  }
class C{  @Override public CrawlDatum distributeScoreToOutlinks(Text fromUrl,ParseData parseData,Collection<Entry<Text,CrawlDatum>> targets,CrawlDatum adjust,int allCount) throws ScoringFilterException {  LOG.info("------>WE ARE CALCULATING THE SCORE FOR THE OUTLINKS------:");  Boolean semFather=Boolean.parseBoolean(parseData.getMeta(WdcParser.META_CONTAINS_SEM_FATHER_FOR_SUB));  for (  Entry<Text,CrawlDatum> target : targets) {    float score=0.5f;    target.getValue().getMetaData().put(new Text(WdcParser.META_CONTAINS_SEM_FATHER),new Text(Boolean.toString(semFather)));    try {      URI tmpURI=new URI(target.getKey().toString());      AnthURL anthUrl=new AnthURL(hash(target.getKey().toString()),tmpURI,semFather,!semFather,false,false,false);      onlineClassifier.classifyUrl(anthUrl);      double prediction=anthUrl.prediction * 100000000;      LOG.info("THE PREDICTED SCORE of {} IS {}",target.getKey(),prediction);      score+=prediction;    } catch (    Exception e) {      LOG.info("ERROR SETTING THE NEW SCORE FOR THE OUTLINK" + e.getMessage());      e.printStackTrace();      score=0.5f;    }    if (semFather)     score+=0.5;    target.getValue().setScore((float)score);    LOG.info("Setting score of {} to {}",target.getKey(),score);  }  return adjust;}  }
class C{  public ContainerInfo inspectContainer(String container) throws IOException {  return inspectContainer(InspectContainerParams.create(container));}  }
class C{  public List<String> matchAlmost(String key){  return matchAlmost(key,defaultNumReturnValues);}  }
class C{  public ClientMessage createMessage(){  if (session == null) {    throw new IllegalStateException("ClientSession is null");  }  return session.createMessage(isUseDurableMessage());}  }
class C{  public int syncAddOrUpdateNetwork(AsyncChannel channel,WifiConfiguration config){  Message resultMsg=channel.sendMessageSynchronously(CMD_ADD_OR_UPDATE_NETWORK,config);  int result=resultMsg.arg1;  resultMsg.recycle();  return result;}  }
class C{  private void action_loadTree(){  KeyNamePair tree=(KeyNamePair)treeField.getSelectedItem();  log.info("Tree=" + tree);  if (tree.getKey() <= 0) {    centerList.setModel(new DefaultListModel());    return;  }  m_tree=new MTree(Env.getCtx(),tree.getKey(),null);  cbAllNodes.setSelected(m_tree.isAllNodes());  bAddAll.setEnabled(!m_tree.isAllNodes());  bAdd.setEnabled(!m_tree.isAllNodes());  bDelete.setEnabled(!m_tree.isAllNodes());  bDeleteAll.setEnabled(!m_tree.isAllNodes());  DefaultListModel model=new DefaultListModel();  ArrayList<ListItem> items=getTreeItemData();  for (  ListItem item : items)   model.addElement(item);  log.config("#" + model.getSize());  centerList.setModel(model);  centerTree.initTree(m_tree.getAD_Tree_ID());}  }
class C{  public boolean leavesZone(final Rectangle2D shape){  final double x=shape.getX();  final double y=shape.getY();  final double w=shape.getWidth();  final double h=shape.getHeight();  return (x < 0) || (x + w > width) || (y < 0)|| (y + h > height);}  }
class C{  public static Drawable byteToDrawable(byte[] byteArray){  ByteArrayInputStream ins=null;  if (byteArray != null) {    ins=new ByteArrayInputStream(byteArray);  }  return Drawable.createFromStream(ins,null);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case EipPackage.TRANSFORMER__NAME:    setName(NAME_EDEFAULT);  return;case EipPackage.TRANSFORMER__TO_CHANNELS:getToChannels().clear();return;case EipPackage.TRANSFORMER__FROM_CHANNELS:getFromChannels().clear();return;}super.eUnset(featureID);}  }
class C{  protected Object invoke(Method method,Object arg1){  return invoke(method,new Object[]{arg1});}  }
class C{  public static void execute(final Thread task,final long timeout) throws TimeoutException {  task.start();  try {    task.join(timeout);  } catch (  final InterruptedException e) {  }  if (task.isAlive()) {    task.interrupt();    throw new TimeoutException();  }}  }
class C{  public static void logInfo(String message){  getDefault().getLog().log(new Status(Status.INFO,TLCActivator.PLUGIN_ID,message));}  }
class C{  public boolean isS1AcpiManagementSupported(){  return s1AcpiManagementSupported;}  }
class C{  public boolean visit(EnhancedForStatement node){  return true;}  }
class C{  public static int decode(byte[] data,OutputStream out) throws IOException {  return encoder.decode(data,0,data.length,out);}  }
class C{  public byte[] serialize(){  byte[] payloadData=null;  if (payload != null) {    payload.setParent(this);    payloadData=payload.serialize();  }  this.length=(short)(8 + ((payloadData == null) ? 0 : payloadData.length));  byte[] data=new byte[this.length];  ByteBuffer bb=ByteBuffer.wrap(data);  bb.putShort(this.sourcePort);  bb.putShort(this.destinationPort);  bb.putShort(this.length);  bb.putShort(this.checksum);  if (payloadData != null)   bb.put(payloadData);  if (this.parent != null && this.parent instanceof IPv4)   ((IPv4)this.parent).setProtocol(IPv4.PROTOCOL_UDP);  if (this.checksum == 0) {    bb.rewind();    int accumulation=0;    if (this.parent != null && this.parent instanceof IPv4) {      IPv4 ipv4=(IPv4)this.parent;      accumulation+=((ipv4.getSourceAddress() >> 16) & 0xffff) + (ipv4.getSourceAddress() & 0xffff);      accumulation+=((ipv4.getDestinationAddress() >> 16) & 0xffff) + (ipv4.getDestinationAddress() & 0xffff);      accumulation+=ipv4.getProtocol() & 0xff;      accumulation+=this.length & 0xffff;    }    for (int i=0; i < this.length / 2; ++i) {      accumulation+=0xffff & bb.getShort();    }    if (this.length % 2 > 0) {      accumulation+=(bb.get() & 0xff) << 8;    }    accumulation=((accumulation >> 16) & 0xffff) + (accumulation & 0xffff);    this.checksum=(short)(~accumulation & 0xffff);    bb.putShort(6,this.checksum);  }  return data;}  }
class C{  public void cdata(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem() && XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;  String s=new String(ch,start,length);  Node n=m_currentNode.getLastChild();  if (n instanceof CDATASection)   ((CDATASection)n).appendData(s); else   if (n instanceof Comment)   ((Comment)n).appendData(s);}  }
class C{  public BerEncoder(int bufsize){  buf=new byte[bufsize];  this.bufsize=bufsize;  offset=0;  seqOffset=new int[INITIAL_SEQUENCES];  curSeqIndex=0;}  }
class C{  public ResolvedJavaField field(){  return field;}  }
class C{  private void queryHistoryLogAndRefreshView(){  Cursor cursor=null;  List<Integer> selectedProviderIds=getSelectedProviderIds();  String contact=getSelectedContact();  if (!selectedProviderIds.isEmpty()) {    if (getString(R.string.label_sharing_log_contact_spinner_default_value).equals(contact)) {      Uri uri=createSharingLogUri(selectedProviderIds);      cursor=getContentResolver().query(uri,PROJECTION,null,null,SORT_BY);    } else {      Uri uri=createSharingLogUri(selectedProviderIds);      cursor=getContentResolver().query(uri,PROJECTION,WHERE_CLAUSE_WITH_CONTACT,new String[]{contact},SORT_BY);    }  }  mAdapter.changeCursor(cursor);}  }
class C{  public void removeAllSpriteFrames(){  spriteFrames.clear();}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public NoSystemException(String message,Throwable cause){  super(message,cause);}  }
class C{  private static void loadCache(IgniteCache<Long,Person> cache){  long start=System.currentTimeMillis();  cache.loadCache(null,ENTRY_COUNT);  long end=System.currentTimeMillis();  System.out.println(">>> Loaded " + cache.size() + " keys with backups in "+ (end - start)+ "ms.");}  }
class C{  public static double meanDeviation(DoubleArrayList data,double mean){  double[] elements=data.elements();  int size=data.size();  double sum=0;  for (int i=size; --i >= 0; )   sum+=Math.abs(elements[i] - mean);  return sum / size;}  }
class C{  public boolean hasPobox(){  return hasExtension(PoBox.class);}  }
class C{  public boolean isInMemoryDb(){  return path.equalsIgnoreCase(MEMORY_DB_PATH);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.TRACE_ENTITY___TRACE_OPTIONS_1:    return traceOptions_1 != null && !traceOptions_1.isEmpty();case UmplePackage.TRACE_ENTITY___TRACE_ENTITY_1:  return TRACE_ENTITY_1_EDEFAULT == null ? trace_entity_1 != null : !TRACE_ENTITY_1_EDEFAULT.equals(trace_entity_1);case UmplePackage.TRACE_ENTITY___ANONYMOUS_TRACE_ENTITY_11:return anonymous_traceEntity_1_1 != null && !anonymous_traceEntity_1_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @Override public int hashCode(){  return (this.value != null ? this.value.hashCode() : 0);}  }
class C{  public void load(byte input[],int offset,int length,String charset){  this.input=input;  this.offset=offset;  this.length=length;  this.charset=charset;  this.current=0;  this.complete=0;  this.output=new StringBuffer();}  }
class C{  public void addWriterListener(WriterListener writerListener){  if (writerListener == null) {    return;  }synchronized (listeners) {    if (!listeners.contains(writerListener)) {      listeners.add(writerListener);    }  }}  }
class C{  public void test_select_bnode() throws MalformedQueryException, TokenMgrError, ParseException {  final String sparql="select ?s where {?s ?p _:a1}";  final QueryRoot expected=new QueryRoot(QueryType.SELECT);{{      final Map<String,String> prefixDecls=new LinkedHashMap<String,String>(PrefixDeclProcessor.defaultDecls);      expected.setPrefixDecls(prefixDecls);    }    final ProjectionNode projection=new ProjectionNode();    projection.addProjectionVar(new VarNode("s"));    expected.setProjection(projection);    final JoinGroupNode whereClause=new JoinGroupNode();    expected.setWhereClause(whereClause);    final VarNode blankNodeVar=new VarNode("-anon-1");    blankNodeVar.setAnonymous(true);    whereClause.addChild(new StatementPatternNode(new VarNode("s"),new VarNode("p"),blankNodeVar,null,Scope.DEFAULT_CONTEXTS));  }  final QueryRoot actual=parse(sparql,baseURI);  assertSameAST(sparql,expected,actual);}  }
class C{  protected boolean needsSaving(){  return false;}  }
class C{  public boolean isPosted(){  Object oo=get_Value(COLUMNNAME_Posted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void addBitmapToCache(String data,BitmapDrawable bitmap){  if (data == null || bitmap == null) {    return;  }synchronized (mMemoryCache) {    VolleyLog.d(TAG,"Memory cache put - " + data);    if (RecyclingBitmapDrawable.class.isInstance(bitmap)) {      ((RecyclingBitmapDrawable)bitmap).setIsCached(true);    }    mMemoryCache.put(data,bitmap);  }}  }
class C{  public void transformValues(TLongFunction function){  byte[] states=_states;  long[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  @DSComment("OS Bundle data structure") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.485 -0500",hash_original_method="93FD4CBDA1682EAF0E9F2535BF397F65",hash_generated_method="650875F4F65C3A61BA4CCCBEFD84BCF5") public void putSparseParcelableArray(String key,SparseArray<? extends Parcelable> value){  unparcel();  mMap.put(key,value);  mFdsKnown=false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public final ArrayList<Pair<Integer,ProbeResult>> relocatePieceProbe(Position pos,int fromSq){  int p=pos.getPiece(fromSq);  if (p == Piece.EMPTY)   return null;  boolean isPawn=(Piece.makeWhite(p) == Piece.WPAWN);  ArrayList<Pair<Integer,ProbeResult>> ret=new ArrayList<Pair<Integer,ProbeResult>>();  for (int sq=0; sq < 64; sq++) {    if ((sq != fromSq) && (pos.getPiece(sq) != Piece.EMPTY))     continue;    if (isPawn && ((sq < 8) || (sq >= 56)))     continue;    pos.setPiece(fromSq,Piece.EMPTY);    pos.setPiece(sq,p);    ProbeResult res=probe(pos);    pos.setPiece(sq,Piece.EMPTY);    pos.setPiece(fromSq,p);    if (res.type == ProbeResult.Type.NONE)     continue;    if (!pos.whiteMove)     res.wdl=-res.wdl;    ret.add(new Pair<Integer,ProbeResult>(sq,res));  }  return ret;}  }
class C{  public void testAttachmentHTML(){  EMail emailTest=new EMail(System.getProperties(),host,from,to,null,null);  emailTest.addTo(to2);  emailTest.addCc(to3);  emailTest.setMessageHTML("TestAttachmentHTML","Test Attachment HTML Message");  emailTest.addAttachment(new File("C:\\Adempiere\\RUN_Adempiere.sh"));  emailTest.createAuthenticator(usr,pwd);  assertEquals(emailTest.send(),EMail.SENT_OK);}  }
class C{  private void updateVisibilityOfChartPanels(){  for (  JPanel chartPanel : listOfChartPanels) {    if (getModel() != null && getModel().isEnlarged()) {      chartPanel.setVisible(true);    } else {      chartPanel.setVisible(false);    }  }}  }
class C{  public void testGenerateMergedFileClean() throws Exception {  File mergedCodebaseLocation=new File("merged_codebase_7");  expect(fileSystem.getTemporaryDirectory("merged_codebase_")).andReturn(mergedCodebaseLocation);  File origFile=new File("orig/foo");  expect(orig.getFile("foo")).andReturn(origFile);  expect(fileSystem.exists(origFile)).andReturn(true);  File destFile=new File("dest/foo");  expect(dest.getFile("foo")).andReturn(destFile);  expect(fileSystem.exists(destFile)).andReturn(true);  File modFile=new File("mod/foo");  expect(mod.getFile("foo")).andReturn(modFile);  expect(fileSystem.exists(modFile)).andReturn(true);  File mergedFile=new File("merged_codebase_7/foo");  fileSystem.makeDirsForFile(mergedFile);  fileSystem.copyFile(destFile,mergedFile);  List<String> mergeArgs=ImmutableList.of(mergedFile.getAbsolutePath(),origFile.getAbsolutePath(),modFile.getAbsolutePath());  expect(cmd.runCommand("merge",mergeArgs,mergedCodebaseLocation.getAbsolutePath())).andReturn("");  control.replay();  CodebaseMerger merger=new CodebaseMerger(ui,fileSystem,cmd,null,orig,mod,dest);  merger.generateMergedFile("foo");  control.verify();  assertThat(merger.getFailedToMergeFiles()).isEmpty();  assertThat(merger.getMergedFiles()).contains(mergedFile.getAbsolutePath());}  }
class C{  public static void main(String[] args) throws IgniteCheckedException {  System.setProperty("CLIENTS_MODULE_PATH",U.resolveIgnitePath("modules/clients").getAbsolutePath());  try (Ignite g=G.start("modules/clients/src/test/resources/spring-server-ssl-node.xml")){    U.sleep(Long.MAX_VALUE);  } }  }
class C{  public boolean hasOwnedAccessorPair(){  return !members(OWNED,GETTER).isEmpty() && !members(OWNED,SETTER).isEmpty();}  }
class C{  public Agent(VCard vcard){  setVCard(vcard);}  }
class C{  public FXDialog(final Stage parent,final Modality modality,final Parent content,final double width,final double height){  init(parent,modality,content);  dialog.setWidth(width);  dialog.setHeight(height);  final Scene scene=new Scene(content,width,height);  setScene(scene);}  }
class C{  public Reference(){}  }
class C{  public static UTMCoord fromLatLon(Angle latitude,Angle longitude,Globe globe){  if (latitude == null || longitude == null) {    String message=Logging.getMessage("nullValue.LatitudeOrLongitudeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  final UTMCoordConverter converter=new UTMCoordConverter(globe);  long err=converter.convertGeodeticToUTM(latitude.radians,longitude.radians);  if (err != UTMCoordConverter.UTM_NO_ERROR) {    String message=Logging.getMessage("Coord.UTMConversionError");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return new UTMCoord(latitude,longitude,converter.getZone(),converter.getHemisphere(),converter.getEasting(),converter.getNorthing(),Angle.fromRadians(converter.getCentralMeridian()));}  }
class C{  protected String encodeBody(){  return token;}  }
class C{  protected int unwrap() throws IOException {  if (logger != null) {    logger.println("SSLRecordProtocol.unwrap: BEGIN [");  }  int type=in.readUint8();  if ((type < ContentType.CHANGE_CIPHER_SPEC) || (type > ContentType.APPLICATION_DATA)) {    if (logger != null) {      logger.println("Non v3.1 message type:" + type);    }    if (type >= 0x80) {      int length=(type & 0x7f) << 8 | in.read();      byte[] fragment=in.read(length);      handshakeProtocol.unwrapSSLv2(fragment);      if (logger != null) {        logger.println("SSLRecordProtocol:unwrap ] END, SSLv2 type");      }      return ContentType.HANDSHAKE;    }    throw new AlertException(AlertProtocol.UNEXPECTED_MESSAGE,new SSLProtocolException("Unexpected message type has been received: " + type));  }  if (logger != null) {    logger.println("Got the message of type: " + type);  }  if (version != null) {    if ((in.read() != version[0]) || (in.read() != version[1])) {      throw new AlertException(AlertProtocol.UNEXPECTED_MESSAGE,new SSLProtocolException("Unexpected message type has been received: " + type));    }  } else {    in.skip(2);  }  int length=in.readUint16();  if (logger != null) {    logger.println("TLSCiphertext.fragment[" + length + "]: ...");  }  if (length > MAX_CIPHERED_DATA_LENGTH) {    throw new AlertException(AlertProtocol.RECORD_OVERFLOW,new SSLProtocolException("Received message is too big."));  }  byte[] fragment=in.read(length);  if (logger != null) {    logger.print(fragment);  }  if (activeReadState != null) {    fragment=activeReadState.decrypt((byte)type,fragment);    if (logger != null) {      logger.println("TLSPlaintext.fragment:");      logger.print(fragment);    }  }  if (fragment.length > MAX_DATA_LENGTH) {    throw new AlertException(AlertProtocol.DECOMPRESSION_FAILURE,new SSLProtocolException("Decompressed plain data is too big."));  }switch (type) {case ContentType.CHANGE_CIPHER_SPEC:    handshakeProtocol.receiveChangeCipherSpec();  setSession(handshakeProtocol.getSession());if (logger != null) {  logger.println("activeReadState = pendingConnectionState");}activeReadState=pendingConnectionState;break;case ContentType.ALERT:alert(fragment[0],fragment[1]);break;case ContentType.HANDSHAKE:handshakeProtocol.unwrap(fragment);break;case ContentType.APPLICATION_DATA:if (logger != null) {logger.println("TLSCiphertext.unwrap: APP DATA[" + length + "]:");logger.println(new String(fragment));}appData.append(fragment);break;default :throw new AlertException(AlertProtocol.UNEXPECTED_MESSAGE,new SSLProtocolException("Unexpected message type has been received: " + type));}if (logger != null) {logger.println("SSLRecordProtocol:unwrap ] END, type: " + type);}return type;}  }
class C{  public String emitPattern(boolean withWhiteSpace){  StringBuffer result=new StringBuffer();  for (int i=0; i < patterns.size(); ++i) {    PatternEntry entry=patterns.get(i);    if (entry != null) {      entry.addToBuffer(result,true,withWhiteSpace,null);    }  }  return result.toString();}  }
class C{  public boolean remove(final MetricId name){  final Metric metric=metrics.remove(name);  if (metric != null) {    onMetricRemoved(name,metric);    return true;  }  return false;}  }
class C{  public static DenseTernaryPolynomial generateRandom(int N,int numOnes,int numNegOnes,SecureRandom random){  int[] coeffs=Util.generateRandomTernary(N,numOnes,numNegOnes,random);  return new DenseTernaryPolynomial(coeffs);}  }
class C{  private void checkInit(JCTree tree,Env<AttrContext> env,VarSymbol v,boolean onlyWarning){  if ((env.info.enclVar == v || v.pos > tree.pos) && v.owner.kind == TYP && canOwnInitializer(owner(env)) && v.owner == env.info.scope.owner.enclClass() && ((v.flags() & STATIC) != 0) == Resolve.isStatic(env) && (!env.tree.hasTag(ASSIGN) || TreeInfo.skipParens(((JCAssign)env.tree).lhs) != tree)) {    String suffix=(env.info.enclVar == v) ? "self.ref" : "forward.ref";    if (!onlyWarning || isStaticEnumField(v)) {      log.error(tree.pos(),"illegal." + suffix);    } else     if (useBeforeDeclarationWarning) {      log.warning(tree.pos(),suffix,v);    }  }  v.getConstValue();  checkEnumInitializer(tree,env,v);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.369 -0500",hash_original_method="A25997D93DEDDC22BD08A54D133EED79",hash_generated_method="6CE41F0362B47B58394AEC91D327D2EF") static public void fail(String message){  throw new AssertionFailedError(message);}  }
class C{  private StringBuffer stripExceedingChars(StringBuffer reference,int indentLength){  final int tabSize=fPrefs.prefTabSize;  int measured=0;  int chars=reference.length();  int i=0;  for (; measured < indentLength && i < chars; i++) {    char ch=reference.charAt(i);switch (ch) {case '\t':      if (tabSize > 0) {        int reminder=measured % tabSize;        measured+=tabSize - reminder;      }    break;case ' ':  measured++;break;}}int deleteFrom=measured > indentLength ? i - 1 : i;return reference.delete(deleteFrom,chars);}  }
class C{  public boolean isRegOutput(){  return (flags & REG_OUTPUT) != 0;}  }
class C{  public String numFoldsTipText(){  return "Determines the amount of data used for pruning. One fold is used for " + "pruning, the rest for growing the rules.";}  }
class C{  @SuppressWarnings("unchecked") protected void notifyTrainingSetProduced(TrainingSetEvent tse){  Vector<TrainingSetListener> l;synchronized (this) {    l=(Vector<TrainingSetListener>)m_trainingListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      if (m_splitThread == null) {        break;      }      l.elementAt(i).acceptTrainingSet(tse);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.223 -0500",hash_original_method="C6B5BA4CC388DC52CEEC1238FEC9126F",hash_generated_method="8D8204CB3AA50F3A530CD193887F06BD") public int next() throws IOException {  return sendCommand(NNTPCommand.NEXT);}  }
class C{  public ZoomSupport(Object sourceBean){  super(sourceBean);}  }
class C{  private ProtocolVersion negotiateProtocolVersion(ProtocolVersion clientVersion) throws HandshakeException {  ProtocolVersion version=new ProtocolVersion();  if (clientVersion.compareTo(version) >= 0) {    return new ProtocolVersion();  } else {    AlertMessage alert=new AlertMessage(AlertLevel.FATAL,AlertDescription.PROTOCOL_VERSION,session.getPeer());    throw new HandshakeException("The server only supports DTLS v1.2",alert);  }}  }
class C{  private HashMap<String,Boolean> parseFeature(String optString){  if (optString.equals(NULL)) {    return null;  } else {    HashMap<String,Boolean> map=new HashMap<String,Boolean>();    StringTokenizer features=new StringTokenizer(optString,",");    StringTokenizer option;    while (features.hasMoreElements()) {      option=new StringTokenizer(features.nextToken(),"=");      if (option.hasMoreElements()) {        String key=option.nextToken();        Boolean value=option.nextToken().equals("no") ? Boolean.FALSE : Boolean.TRUE;        map.put(key,value);      }    }    return map;  }}  }
class C{  public Long2LongOpenHashMap(final Long2LongMap m,final float f){  this(m.size(),f);  putAll(m);}  }
class C{  private float calcAngle(float value){  return value / mData.getYValueSum() * 360f;}  }
class C{  public InlineKeyboardMarkupBuilder addRow(InlineKeyboardButton... buttons){  return addRow(Arrays.asList(buttons));}  }
class C{  private void initializeNoxItemSize(TypedArray attributes){  float noxItemSizeDefaultValue=getResources().getDimension(R.dimen.default_nox_item_size);  float noxItemSize=attributes.getDimension(R.styleable.nox_item_size,noxItemSizeDefaultValue);  noxConfig.setNoxItemSize(noxItemSize);}  }
class C{  public static void conservativeCheckMemberAccess(Member m) throws SecurityException {  final SecurityManager sm=System.getSecurityManager();  if (sm == null)   return;  final Class<?> declaringClass=m.getDeclaringClass();  checkPackageAccess(declaringClass);  if (Modifier.isPublic(m.getModifiers()) && Modifier.isPublic(declaringClass.getModifiers()))   return;  sm.checkPermission(SecurityConstants.CHECK_MEMBER_ACCESS_PERMISSION);}  }
class C{  boolean returnsAbruptly(){  return hasAlwaysKey("t");}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.588 -0500",hash_original_method="FF57C371186B795A0CEFC17D6A21913E",hash_generated_method="611CD75D4F68FA4F8A749A0A3935CD3E") private void recycle(){synchronized (sStack) {    sStack.push(this);  }}  }
class C{  static boolean isFormRequest(Type type){  return MAP_STRING_WILDCARD.equals(type);}  }
class C{  public static float computeLinearCorpusGain(float[] linearCorpusGainThetas,int hypLength,Map<String,Integer> hypNgramTable,Map<String,Integer> referenceNgramTable){  float res=0;  res+=linearCorpusGainThetas[0] * hypLength;  for (  Entry<String,Integer> entry : hypNgramTable.entrySet()) {    String ngram=entry.getKey();    if (referenceNgramTable.containsKey(ngram)) {      int ngramOrder=Regex.spaces.split(ngram).length;      res+=entry.getValue() * linearCorpusGainThetas[ngramOrder];    }  }  return res;}  }
class C{  public int length(){  return count;}  }
class C{  public GeometryCombiner(Collection geoms){  geomFactory=extractFactory(geoms);  this.inputGeoms=geoms;}  }
class C{  private FDBigInteger(int[] data,int offset){  this.data=data;  this.offset=offset;  this.nWords=data.length;  trimLeadingZeros();}  }
class C{  public void resetItemListeners(){  mItemClickCalled=false;  mItemClickPosition=-1;  mItemSelectedCalled=false;  mItemSelectedPosition=-1;  mNothingSelectedCalled=false;}  }
class C{  static private RowSetFactory loadViaServiceLoader() throws SQLException {  RowSetFactory theFactory=null;  try {    trace("***in loadViaServiceLoader():");    for (    RowSetFactory factory : ServiceLoader.load(javax.sql.rowset.RowSetFactory.class)) {      trace(" Loading done by the java.util.ServiceLoader :" + factory.getClass().getName());      theFactory=factory;      break;    }  } catch (  ServiceConfigurationError e) {    throw new SQLException("RowSetFactory: Error locating RowSetFactory using Service " + "Loader API: " + e,e);  }  return theFactory;}  }
class C{  public void addValue(String key,BigInteger val,String comment) throws HeaderCardException {  addHeaderCard(key,new HeaderCard(key,val,comment));}  }
class C{  public IndexedParent(int index,int lag){  if (index < 0) {    throw new IllegalArgumentException("Index must be >= 0: " + index);  }  if (lag < 0) {    throw new IllegalArgumentException("Lag must be >= 0: " + lag);  }  this.index=index;  this.lag=lag;}  }
class C{  private void createTestDatabaseEntities(List<String> subPartitionValues){  for (int businessObjectFormatVersion=INITIAL_FORMAT_VERSION; businessObjectFormatVersion < NUMBER_OF_FORMAT_VERSIONS; businessObjectFormatVersion++) {    businessObjectFormatDaoTestHelper.createBusinessObjectFormatEntity(NAMESPACE,BDEF_NAME,FORMAT_USAGE_CODE,FORMAT_FILE_TYPE_CODE,businessObjectFormatVersion,FORMAT_DESCRIPTION,businessObjectFormatVersion == SECOND_FORMAT_VERSION,PARTITION_KEY);    for (int businessObjectDataVersion=INITIAL_DATA_VERSION; businessObjectDataVersion < NUMBER_OF_DATA_VERSIONS_PER_FORMAT_VERSION; businessObjectDataVersion++) {      businessObjectDataDaoTestHelper.createBusinessObjectDataEntity(NAMESPACE,BDEF_NAME,FORMAT_USAGE_CODE,FORMAT_FILE_TYPE_CODE,businessObjectFormatVersion,PARTITION_VALUE,subPartitionValues,businessObjectDataVersion,businessObjectDataVersion == SECOND_DATA_VERSION,BDATA_STATUS);    }  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case MappingPackage.OPERATION_SOURCE__OPERATION:    setOperation((Operation)null);  return;}super.eUnset(featureID);}  }
class C{  public Sequence createSequence(){  SequenceImpl sequence=new SequenceImpl();  return sequence;}  }
class C{  private void initPanel(){  repaintPanel();  fillFieldValues();  addListeners();}  }
class C{  public void dispose(){  visibilityStateBox.removeActionListener(visibilityStateBoxListener);}  }
class C{  public static boolean putBoolean(Context context,String key,boolean value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putBoolean(key,value);  return editor.commit();}  }
class C{  void submit(ProcessAndDisplayImageTask task){  initExecutorsIfNeed();  taskExecutorForCachedImages.execute(task);}  }
class C{  public static String quoteJavaIntArray(int[] array){  if (array == null) {    return "null";  }  StatementBuilder buff=new StatementBuilder("new int[]{");  for (  int a : array) {    buff.appendExceptFirst(", ");    buff.append(a);  }  return buff.append('}').toString();}  }
class C{  public LuaValue callCellInit(LuaValue cellData,int pos,int currentItem){  return callCellFunction("Init",cellData,pos,currentItem);}  }
class C{  public static <T extends Comparable<T>>void comparedNotEqual(T a,T b){  if (a == null && b == null) {    fail("Both null");  } else   if (a == null || b == null) {    return;  } else {    boolean equals=a.equals(b);    boolean hashCode=a.hashCode() == b.hashCode();    boolean compareTo=a.compareTo(b) == 0;    assertTrue(!equals && !hashCode && !compareTo);  }}  }
class C{  public IncompleteAnnotationException(Class<? extends Annotation> annotationType,String elementName){  super(annotationType.getName() + " missing element " + elementName.toString());  this.annotationType=annotationType;  this.elementName=elementName;}  }
class C{  @Override public Range findRangeBounds(XYDataset dataset){  return findRangeBounds(dataset,true);}  }
class C{  void incrementNestedOperations(){  nestedOperations++;}  }
class C{  public CTagCriteriumCreator(final ITagManager tagManager){  m_tagManager=tagManager;}  }
class C{  public void clearInterceptors(){  clearRequestInterceptors();  clearResponseInterceptors();}  }
class C{  public static HttpUrl presignV4(Request request,String region,String accessKey,String secretKey,int expires) throws NoSuchAlgorithmException, InvalidKeyException {  String contentSha256="UNSIGNED-PAYLOAD";  DateTime date=DateFormat.AMZ_DATE_FORMAT.parseDateTime(request.header("x-amz-date"));  Signer signer=new Signer(request,contentSha256,date,region,accessKey,secretKey);  signer.setScope();  signer.setPresignCanonicalRequest(expires);  signer.setStringToSign();  signer.setSigningKey();  signer.setSignature();  return signer.url.newBuilder().addEncodedQueryParameter(encodeQueryString("X-Amz-Signature"),encodeQueryString(signer.signature)).build();}  }
class C{  protected String describeAttribute(MBeanAttributeInfo attr){  StringBuilder buf=new StringBuilder();  buf.append("(");  if (attr.isReadable()) {    buf.append("r");  }  if (attr.isWritable()) {    buf.append("w");  }  buf.append(") ").append(attr.getType()).append(" ").append(attr.getName());  return buf.toString();}  }
class C{  public DeltaOptions(){}  }
class C{  public MouseWheelHandler(ChartPanel chartPanel){  this.chartPanel=chartPanel;  this.zoomFactor=0.10;  this.chartPanel.addMouseWheelListener(this);}  }
class C{  @Override protected int sizePendingWorkers(){  return _pendingWorkers.size();}  }
class C{  @Override protected void initListeners(){}  }
class C{  public Stream rest(){  return rest;}  }
class C{  private static boolean clearDirectory(File file){  boolean result=false;  if (file.isDirectory()) {    File[] files=file.listFiles();    for (    File inFolderFile : files) {      if (inFolderFile.isFile()) {        inFolderFile.delete();      } else       if (inFolderFile.isDirectory()) {        boolean clearDirectory=clearDirectory(inFolderFile);        if (!clearDirectory) {          log.warn(inFolderFile.toString() + " could not be cleared successfully.");        }      } else {        log.warn(inFolderFile.toString() + " is neither a file nor a directory!");      }    }    result=file.delete();  } else {    log.warn(file.toString() + " is not a directory!");  }  return result;}  }
class C{  public synchronized void weave(ByteString id,WeaveSpec spec){  pending.put(id,spec);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:10.445 -0500",hash_original_method="4EFDA8834EFC5233A7016DA7BAF37B87",hash_generated_method="733524971F5C6064AEA14C8767E0FE6D") public static Element createPixel(RenderScript rs,DataType dt,DataKind dk){  if (!(dk == DataKind.PIXEL_L || dk == DataKind.PIXEL_A || dk == DataKind.PIXEL_LA || dk == DataKind.PIXEL_RGB || dk == DataKind.PIXEL_RGBA || dk == DataKind.PIXEL_DEPTH)) {    throw new RSIllegalArgumentException("Unsupported DataKind");  }  if (!(dt == DataType.UNSIGNED_8 || dt == DataType.UNSIGNED_16 || dt == DataType.UNSIGNED_5_6_5 || dt == DataType.UNSIGNED_4_4_4_4 || dt == DataType.UNSIGNED_5_5_5_1)) {    throw new RSIllegalArgumentException("Unsupported DataType");  }  if (dt == DataType.UNSIGNED_5_6_5 && dk != DataKind.PIXEL_RGB) {    throw new RSIllegalArgumentException("Bad kind and type combo");  }  if (dt == DataType.UNSIGNED_5_5_5_1 && dk != DataKind.PIXEL_RGBA) {    throw new RSIllegalArgumentException("Bad kind and type combo");  }  if (dt == DataType.UNSIGNED_4_4_4_4 && dk != DataKind.PIXEL_RGBA) {    throw new RSIllegalArgumentException("Bad kind and type combo");  }  if (dt == DataType.UNSIGNED_16 && dk != DataKind.PIXEL_DEPTH) {    throw new RSIllegalArgumentException("Bad kind and type combo");  }  int size=1;switch (dk) {case PIXEL_LA:    size=2;  break;case PIXEL_RGB:size=3;break;case PIXEL_RGBA:size=4;break;case PIXEL_DEPTH:size=2;break;}boolean norm=true;int id=rs.nElementCreate(dt.mID,dk.mID,norm,size);return new Element(id,rs,dt,dk,norm,size);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(Constants.INDENT);  buffer.append("ulMinKeySize: ");  buffer.append(String.valueOf(ulMinKeySize));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("ulMaxKeySize: ");  buffer.append(String.valueOf(ulMaxKeySize));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("flags: ");  buffer.append(String.valueOf(flags));  buffer.append(" = ");  buffer.append(Functions.mechanismInfoFlagsToString(flags));  return buffer.toString();}  }
class C{  protected void notifySent(){  final String methodName="notifySent";  log.fine(CLASS_NAME,methodName,"403",new Object[]{getKey()});synchronized (responseLock) {    this.response=null;    this.completed=false;  }synchronized (sentLock) {    sent=true;    sentLock.notifyAll();  }}  }
class C{  public final double rootMeanSquaredError(){  return Math.sqrt(m_SumSqrErr / (m_WithClass - m_Unclassified));}  }
class C{  private static AdvancingFrontNode pointEvent(DTSweepContext tcx,TriangulationPoint point){  AdvancingFrontNode node, newNode;  node=tcx.locateNode(point);  if (tcx.isDebugEnabled()) {    tcx.getDebugContext().setActiveNode(node);  }  newNode=newFrontTriangle(tcx,point,node);  if (point.getX() <= node.point.getX() + EPSILON) {    fill(tcx,node);  }  tcx.addNode(newNode);  fillAdvancingFront(tcx,newNode);  return newNode;}  }
class C{  public final Flux<T> repeat(BooleanSupplier predicate){  return Flux.onAssembly(new FluxRepeatPredicate<>(this,predicate));}  }
class C{  @Override public boolean onKeyDown(int keyCode,KeyEvent event){switch (keyCode) {case KeyEvent.KEYCODE_DPAD_LEFT:    if (movePrevious()) {      playSoundEffect(SoundEffectConstants.NAVIGATION_LEFT);    }  return true;case KeyEvent.KEYCODE_DPAD_RIGHT:if (moveNext()) {  playSoundEffect(SoundEffectConstants.NAVIGATION_RIGHT);}return true;case KeyEvent.KEYCODE_DPAD_CENTER:case KeyEvent.KEYCODE_ENTER:mReceivedInvokeKeyDown=true;}return super.onKeyDown(keyCode,event);}  }
class C{  public int[] toIntArray(){  int[] array=new int[length];  for (int i=0; i < length; i++) {    array[i]=(int)Math.rint(get(i));  }  return array;}  }
class C{  public static void clear(int[] n){  for (int i=0; i < n.length; i++) {    n[i]=0;  }}  }
class C{  private ChromeTab createNewTab(LoadUrlParams loadUrlParams,TabModel.TabLaunchType type,Tab parent,int position,Intent intent){  try {    TraceEvent.begin("ChromeTabCreator.createNewTab");    int parentId=parent != null ? parent.getId() : Tab.INVALID_TAB_ID;    loadUrlParams.setUrl(UrlUtilities.fixupUrl(loadUrlParams.getUrl()));    loadUrlParams.setTransitionType(getTransitionType(type));    int assignedTabId=intent == null ? Tab.INVALID_TAB_ID : IntentUtils.safeGetIntExtra(intent,IntentHandler.EXTRA_TAB_ID,Tab.INVALID_TAB_ID);    AsyncTabCreationParams asyncParams=AsyncTabCreationParamsManager.remove(assignedTabId);    WebContents webContents=asyncParams == null ? null : asyncParams.getWebContents();    boolean openInForeground=mOrderController.willOpenInForeground(type,mIncognito) || webContents != null;    ChromeTab tab;    if (webContents != null) {      Intent parentIntent=IntentUtils.safeGetParcelableExtra(intent,IntentHandler.EXTRA_PARENT_INTENT);      parentId=IntentUtils.safeGetIntExtra(intent,IntentHandler.EXTRA_PARENT_TAB_ID,parentId);      assert TabModelUtils.getTabIndexById(mTabModel,assignedTabId) == TabModel.INVALID_TAB_INDEX;      tab=ChromeTab.createLiveTab(assignedTabId,mActivity,mIncognito,mNativeWindow,type,parentId,!openInForeground);      tab.initialize(webContents,mTabContentManager,!openInForeground);      tab.setParentIntent(parentIntent);      webContents.resumeLoadingCreatedWebContents();    } else     if (!openInForeground && SysUtils.isLowEndDevice()) {      tab=ChromeTab.createTabForLazyLoad(mActivity,mIncognito,mNativeWindow,type,parentId,loadUrlParams);      tab.initialize(null,mTabContentManager,!openInForeground);      mTabSaver.addTabToSaveQueue(tab);    } else {      webContents=WarmupManager.getInstance().hasPrerenderedUrl(loadUrlParams.getUrl()) ? WarmupManager.getInstance().takePrerenderedWebContents() : null;      tab=ChromeTab.createLiveTab(Tab.INVALID_TAB_ID,mActivity,mIncognito,mNativeWindow,type,parentId,!openInForeground);      tab.initialize(webContents,mTabContentManager,!openInForeground);      tab.loadUrl(loadUrlParams);    }    tab.getTabRedirectHandler().updateIntent(intent);    if (intent != null && intent.hasExtra(ServiceTabLauncher.LAUNCH_REQUEST_ID_EXTRA)) {      ServiceTabLauncher.onWebContentsForRequestAvailable(intent.getIntExtra(ServiceTabLauncher.LAUNCH_REQUEST_ID_EXTRA,0),tab.getWebContents());    }    mTabModel.addTab(tab,position,type);    return tab;  }  finally {    TraceEvent.end("ChromeTabCreator.createNewTab");  }}  }
class C{  public p addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public void paintBorder(final Component c,final Graphics g,final int x,final int y,final int width,final int height){}  }
class C{  public Element store(Object object){  getInstance(object);  Element e=new Element("connection");  if (adapter == null) {    log.warn("No adapter found while saving serial port configuration {}",object.toString());    return null;  }  storeCommon(e,adapter);  if (adapter.getCurrentPortName() != null) {    e.setAttribute("port",adapter.getCurrentPortName());  } else {    e.setAttribute("port",rb.getString("noneSelected"));  }  if (adapter.getCurrentBaudRate() != null) {    e.setAttribute("speed",adapter.getCurrentBaudRate());  } else {    e.setAttribute("speed",rb.getString("noneSelected"));  }  e.setAttribute("class",this.getClass().getName());  extendElement(e);  return e;}  }
class C{  @Override public boolean zoomWhenScrolling(){  return false;}  }
class C{  public boolean isNodeAfter(int nodeHandle1,int nodeHandle2){  return false;}  }
class C{  public void checkRange(double[] range,int scale){  if (mChart instanceof XYChart) {    double[] calcRange=((XYChart)mChart).getCalcRange(scale);    if (calcRange != null) {      if (!mRenderer.isMinXSet(scale)) {        range[0]=calcRange[0];        mRenderer.setXAxisMin(range[0],scale);      }      if (!mRenderer.isMaxXSet(scale)) {        range[1]=calcRange[1];        mRenderer.setXAxisMax(range[1],scale);      }      if (!mRenderer.isMinYSet(scale)) {        range[2]=calcRange[2];        mRenderer.setYAxisMin(range[2],scale);      }      if (!mRenderer.isMaxYSet(scale)) {        range[3]=calcRange[3];        mRenderer.setYAxisMax(range[3],scale);      }    }  }}  }
class C{  private void cleanCommittedMigrations(String migrationPaths) throws VPlexApiException {  URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_CLEAN_MIGRATIONS);  s_logger.info("Clean migrations URI is {}",requestURI.toString());  ClientResponse response=null;  try {    s_logger.info("Cleaning committed migrations");    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_M,migrationPaths);    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,true);    s_logger.info("Clean migrations POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Clean migrations response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Clean migrations is completing asynchronously");        _vplexApiClient.waitForCompletion(response);      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.cleanMigrationsFailureStatus(migrationPaths,String.valueOf(response.getStatus()),cause);      }    }    s_logger.info("Successfully cleaned migrations {}",migrationPaths);  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedCleanMigrations(migrationPaths,e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  java.lang.Object callResolve(NameComponent[] path) throws NamingException {  try {    org.omg.CORBA.Object obj=_nc.resolve(path);    try {      NamingContext nc=NamingContextHelper.narrow(obj);      if (nc != null) {        return new CNCtx(_orb,orbTracker,nc,_env,makeFullName(path));      } else {        return obj;      }    } catch (    org.omg.CORBA.SystemException e) {      return obj;    }  } catch (  Exception e) {    throw ExceptionMapper.mapException(e,this,path);  }}  }
class C{  public boolean input(Instance instance) throws Exception {  if (m_InputFormat == null) {    throw new NullPointerException("No input instance format defined");  }  if (m_NewBatch) {    m_OutputQueue=new Queue();    m_NewBatch=false;  }  bufferInput(instance);  return false;}  }
class C{  public DateMidnight(int year,int monthOfYear,int dayOfMonth,DateTimeZone zone){  super(year,monthOfYear,dayOfMonth,0,0,0,0,zone);}  }
class C{  public void resetIncrementalDefaultDelay(){  if (incrementalDefaultDelay) {    taskCount=new AtomicInteger();  }}  }
class C{  public void waitOnServer(){  assert getCache() != null : "The Cache Server must first be started with a call to start!";  if (!isServing(getCache())) {    Throwable cause=null;    try {      while (isWaiting(getCache())) {        try {synchronized (this) {            wait(500l);          }        } catch (        InterruptedException ignore) {        }      }    } catch (    RuntimeException e) {      cause=e;      throw e;    } finally {      failOnStart(cause);    }  }}  }
class C{  public SQLClientInfoException(String reason,String sqlState,Map<String,ClientInfoStatus> failedProperties){  super(reason,sqlState);  this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties);}  }
class C{  private LinkedList<Diff> diff_compute(String text1,String text2,boolean checklines,long deadline){  LinkedList<Diff> diffs=new LinkedList<Diff>();  if (text1.length() == 0) {    diffs.add(new Diff(Operation.INSERT,text2));    return diffs;  }  if (text2.length() == 0) {    diffs.add(new Diff(Operation.DELETE,text1));    return diffs;  }  String longtext=text1.length() > text2.length() ? text1 : text2;  String shorttext=text1.length() > text2.length() ? text2 : text1;  int i=longtext.indexOf(shorttext);  if (i != -1) {    Operation op=(text1.length() > text2.length()) ? Operation.DELETE : Operation.INSERT;    diffs.add(new Diff(op,longtext.substring(0,i)));    diffs.add(new Diff(Operation.EQUAL,shorttext));    diffs.add(new Diff(op,longtext.substring(i + shorttext.length())));    return diffs;  }  if (shorttext.length() == 1) {    diffs.add(new Diff(Operation.DELETE,text1));    diffs.add(new Diff(Operation.INSERT,text2));    return diffs;  }  String[] hm=diff_halfMatch(text1,text2);  if (hm != null) {    String text1_a=hm[0];    String text1_b=hm[1];    String text2_a=hm[2];    String text2_b=hm[3];    String mid_common=hm[4];    LinkedList<Diff> diffs_a=diff_main(text1_a,text2_a,checklines,deadline);    LinkedList<Diff> diffs_b=diff_main(text1_b,text2_b,checklines,deadline);    diffs=diffs_a;    diffs.add(new Diff(Operation.EQUAL,mid_common));    diffs.addAll(diffs_b);    return diffs;  }  if (checklines && text1.length() > 100 && text2.length() > 100) {    return diff_lineMode(text1,text2,deadline);  }  return diff_bisect(text1,text2,deadline);}  }
class C{  public static Capable checkMagicBranchRefs(Repository repo,Project project){  Capable result=checkMagicBranchRef(NEW_CHANGE,repo,project);  if (result != Capable.OK) {    return result;  }  result=checkMagicBranchRef(NEW_DRAFT_CHANGE,repo,project);  if (result != Capable.OK) {    return result;  }  result=checkMagicBranchRef(NEW_PUBLISH_CHANGE,repo,project);  if (result != Capable.OK) {    return result;  }  return Capable.OK;}  }
class C{  public T caseEIPModel(EIPModel object){  return null;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.NEW_EXPRESSION___IS_PARAMETERIZED:    return isParameterized();}return super.eInvoke(operationID,arguments);}  }
class C{  public Object clone(){  TelURLImpl retval=(TelURLImpl)super.clone();  if (this.telephoneNumber != null)   retval.telephoneNumber=(TelephoneNumber)this.telephoneNumber.clone();  return retval;}  }
class C{  public static int[] pi(int s[],Random r,int t,double beta){  int L=s.length;  System.out.println("--- t = " + t + " , Beta = "+ beta+ "---");  double p[]=new double[s.length];  for (int j=0; j < L; j++) {    p[j]=Math.pow((1. / L),beta * t / (1 + j));  }  Utils.normalize(p);  int j=A.samplePMF(p,r);  System.out.println("elect j=" + j + " from pmf: "+ A.toString(p));  p[j]=0.0;  Utils.normalize(p);  int k=A.samplePMF(p,r);  System.out.println("elect k=" + k + " from pmf: "+ A.toString(p));  return A.swap(s,j,k);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.EVENT__DIRECTION:    return getDirection();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private boolean isDirty(){  return !Objects.equals(inputList.keySet(),cmrRepositoryManager.getCmrRepositoryDefinitions());}  }
class C{  public Religious(){  super();}  }
class C{  public static String layoutCompoundLabel(JComponent c,FontMetrics fm,String text,Icon icon,int verticalAlignment,int horizontalAlignment,int verticalTextPosition,int horizontalTextPosition,Rectangle viewR,Rectangle iconR,Rectangle textR,int textIconGap){  boolean orientationIsLeftToRight=true;  int hAlign=horizontalAlignment;  int hTextPos=horizontalTextPosition;  if (c != null) {    if (!(c.getComponentOrientation().isLeftToRight())) {      orientationIsLeftToRight=false;    }  }switch (horizontalAlignment) {case LEADING:    hAlign=(orientationIsLeftToRight) ? LEFT : RIGHT;  break;case TRAILING:hAlign=(orientationIsLeftToRight) ? RIGHT : LEFT;break;}switch (horizontalTextPosition) {case LEADING:hTextPos=(orientationIsLeftToRight) ? LEFT : RIGHT;break;case TRAILING:hTextPos=(orientationIsLeftToRight) ? RIGHT : LEFT;break;}return layoutCompoundLabel(fm,text,icon,verticalAlignment,hAlign,verticalTextPosition,hTextPos,viewR,iconR,textR,textIconGap);}  }
class C{  protected static QueryPlanNode createStreamPlan(int lookupStream,int[] bestChain,QueryGraph queryGraph,QueryPlanIndex[] indexSpecsPerStream,EventType[] typesPerStream,boolean[] isHistorical,HistoricalStreamIndexList[] historicalStreamIndexLists,TableMetadata[] tablesPerStream){  NestedIterationNode nestedIterNode=new NestedIterationNode(bestChain);  int currentLookupStream=lookupStream;  for (int i=0; i < bestChain.length; i++) {    int indexedStream=bestChain[i];    QueryPlanNode node;    if (isHistorical[indexedStream]) {      if (historicalStreamIndexLists[indexedStream] == null) {        historicalStreamIndexLists[indexedStream]=new HistoricalStreamIndexList(indexedStream,typesPerStream,queryGraph);      }      historicalStreamIndexLists[indexedStream].addIndex(currentLookupStream);      node=new HistoricalDataPlanNode(indexedStream,lookupStream,currentLookupStream,typesPerStream.length,null);    } else {      TableLookupPlan tableLookupPlan=createLookupPlan(queryGraph,currentLookupStream,indexedStream,indexSpecsPerStream[indexedStream],typesPerStream,tablesPerStream[indexedStream]);      node=new TableLookupNode(tableLookupPlan);    }    nestedIterNode.addChildNode(node);    currentLookupStream=bestChain[i];  }  return nestedIterNode;}  }
class C{  private void compareTupleQueryResults(TupleQueryResult queryResult,TupleQueryResult expectedResult,boolean checkOrder) throws Exception {  MutableTupleQueryResult queryResultTable=new MutableTupleQueryResult(queryResult);  MutableTupleQueryResult expectedResultTable=new MutableTupleQueryResult(expectedResult);  boolean resultsEqual;  resultsEqual=QueryResults.equals(queryResultTable,expectedResultTable);  if (checkOrder) {    queryResultTable.beforeFirst();    expectedResultTable.beforeFirst();    while (queryResultTable.hasNext()) {      BindingSet bs=queryResultTable.next();      BindingSet expectedBs=expectedResultTable.next();      if (!bs.equals(expectedBs)) {        resultsEqual=false;        break;      }    }  }  if (!resultsEqual) {    queryResultTable.beforeFirst();    expectedResultTable.beforeFirst();    List<BindingSet> queryBindings=Iterations.asList(queryResultTable);    List<BindingSet> expectedBindings=Iterations.asList(expectedResultTable);    List<BindingSet> missingBindings=new ArrayList<BindingSet>(expectedBindings);    missingBindings.removeAll(queryBindings);    List<BindingSet> unexpectedBindings=new ArrayList<BindingSet>(queryBindings);    unexpectedBindings.removeAll(expectedBindings);    StringBuilder message=new StringBuilder(128);    message.append("\n============ ");    message.append(getName());    message.append(" =======================\n");    if (!missingBindings.isEmpty()) {      message.append("Missing bindings: \n");      for (      BindingSet bs : missingBindings) {        message.append(bs);        message.append("\n");      }      message.append("=============");      StringUtil.appendN('=',getName().length(),message);      message.append("========================\n");    }    if (!unexpectedBindings.isEmpty()) {      message.append("Unexpected bindings: \n");      for (      BindingSet bs : unexpectedBindings) {        message.append(bs);        message.append("\n");      }      message.append("=============");      StringUtil.appendN('=',getName().length(),message);      message.append("========================\n");    }    if (checkOrder && missingBindings.isEmpty() && unexpectedBindings.isEmpty()) {      message.append("Results are not in expected order.\n");      message.append(" =======================\n");      message.append("query result: \n");      for (      BindingSet bs : queryBindings) {        message.append(bs);        message.append("\n");      }      message.append(" =======================\n");      message.append("expected result: \n");      for (      BindingSet bs : expectedBindings) {        message.append(bs);        message.append("\n");      }      message.append(" =======================\n");      System.out.print(message.toString());    }    logger.error(message.toString());    fail(message.toString());  }}  }
class C{  public AbstractWrappingTarget(final LogTarget logTarget,final boolean closeWrappedTarget){  m_wrappedLogTarget=logTarget;  m_closeWrapped=closeWrappedTarget;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SMLAL");  translateAll(environment,instruction,"SMLAL",instructions);}  }
class C{  private void parseAttributes(TypedArray a){  DisplayMetrics metrics=getContext().getResources().getDisplayMetrics();  barWidth=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,barWidth,metrics);  rimWidth=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,rimWidth,metrics);  circleRadius=(int)a.getDimension(R.styleable.ProgressWheel_circleRadius,circleRadius);  fillRadius=a.getBoolean(R.styleable.ProgressWheel_fillRadius,false);  barWidth=(int)a.getDimension(R.styleable.ProgressWheel_barWidth,barWidth);  rimWidth=(int)a.getDimension(R.styleable.ProgressWheel_rimWidth,rimWidth);  float baseSpinSpeed=a.getFloat(R.styleable.ProgressWheel_spinSpeed,spinSpeed / 360.0f);  spinSpeed=baseSpinSpeed * 360;  barSpinCycleTime=a.getInt(R.styleable.ProgressWheel_barSpinCycleTime,(int)barSpinCycleTime);  barColor=a.getColor(R.styleable.ProgressWheel_barColor,barColor);  rimColor=a.getColor(R.styleable.ProgressWheel_rimColor,rimColor);  if (a.getBoolean(R.styleable.ProgressWheel_progressIndeterminate,false)) {    spin();  }  a.recycle();}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj != null && obj instanceof IndexedPropertyDescriptor) {    IndexedPropertyDescriptor other=(IndexedPropertyDescriptor)obj;    Method otherIndexedReadMethod=other.getIndexedReadMethod();    Method otherIndexedWriteMethod=other.getIndexedWriteMethod();    if (!compareMethods(getIndexedReadMethod(),otherIndexedReadMethod)) {      return false;    }    if (!compareMethods(getIndexedWriteMethod(),otherIndexedWriteMethod)) {      return false;    }    if (getIndexedPropertyType() != other.getIndexedPropertyType()) {      return false;    }    return super.equals(obj);  }  return false;}  }
class C{  public String numExecutionSlotsTipText(){  return "The number of execution slots (threads) to use for " + "constructing the ensemble.";}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  previewFormat=parameters.getPreviewFormat();  previewFormatString=parameters.get("preview-format");  Log.d(TAG,"Default preview format: " + previewFormat + '/'+ previewFormatString);  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  screenResolution=new Point(display.getWidth(),display.getHeight());  Log.d(TAG,"Screen resolution: " + screenResolution);  cameraResolution=getCameraResolution(parameters,screenResolution);  Log.d(TAG,"Camera resolution: " + screenResolution);}  }
class C{  public void refreshAhead(long pos){  if (fullPrefetch(pos)) {    first=fetch(pos,bufHalfSize);    second=fetch(pos + bufHalfSize,bufHalfSize);  } else   if (needFlip(pos)) {    first=second;    second=fetch(first.pos + first.len,bufHalfSize);  }}  }
class C{  protected void computePDists(Relation<O> relation,KNNQuery<O> knn,WritableDoubleDataStore pdists){  FiniteProgress prdsProgress=LOG.isVerbose() ? new FiniteProgress("pdists",relation.size(),LOG) : null;  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    final KNNList neighbors=knn.getKNNForDBID(iditer,kreach + 1);    int ks=0;    double ssum=0.;    for (DoubleDBIDListIter neighbor=neighbors.iter(); neighbor.valid() && ks < kreach; neighbor.advance()) {      if (DBIDUtil.equal(neighbor,iditer)) {        continue;      }      final double d=neighbor.doubleValue();      ssum+=d * d;      ks++;    }    double pdist=ks > 0 ? Math.sqrt(ssum / ks) : 0.;    pdists.putDouble(iditer,pdist);    LOG.incrementProcessed(prdsProgress);  }  LOG.ensureCompleted(prdsProgress);}  }
class C{  @Override public void notifyNodeDown(final long eventTime,final String nodeID){  if (!ha) {    return;  }  if (logger.isTraceEnabled()) {    logger.trace("nodeDown " + this + " nodeID="+ nodeID+ " as being down",new Exception("trace"));  }  topology.removeMember(eventTime,nodeID);  if (clusterConnection) {    updateArraysAndPairs();  } else {    if (topology.isEmpty()) {      receivedTopology=false;      topologyArray=null;    } else {      updateArraysAndPairs();      if (topology.nodes() == 1 && topology.getMember(this.nodeID) != null) {        receivedTopology=false;      }    }  }}  }
class C{  public RegisterOperand makeTempOffset(){  return new RegisterOperand(getAddress(),TypeReference.Offset);}  }
class C{  public DataOutputStream(OutputStream out){  super(out);}  }
class C{  private void kNNsInserted(DBIDs insertions,DBIDs updates1,DBIDs updates2,LOFResult<O> lofResult){  StepProgress stepprog=LOG.isVerbose() ? new StepProgress(3) : null;  if (stepprog != null) {    stepprog.beginStep(1,"Recompute LRDs.",LOG);  }  ArrayDBIDs lrd_ids=DBIDUtil.ensureArray(DBIDUtil.union(insertions,updates2));  List<? extends DoubleDBIDList> reachDistRKNNs=lofResult.getRkNNReach().getRKNNForBulkDBIDs(lrd_ids,kreach);  ArrayDBIDs affected_lrd_id_candidates=mergeIDs(reachDistRKNNs,lrd_ids);  ArrayModifiableDBIDs affected_lrd_ids=DBIDUtil.newArray(affected_lrd_id_candidates.size());  WritableDoubleDataStore new_lrds=DataStoreUtil.makeDoubleStorage(affected_lrd_id_candidates,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP);  computeLRDs(lofResult.getKNNReach(),affected_lrd_id_candidates,new_lrds);  for (DBIDIter iter=affected_lrd_id_candidates.iter(); iter.valid(); iter.advance()) {    double new_lrd=new_lrds.doubleValue(iter);    double old_lrd=lofResult.getLrds().doubleValue(iter);    if (Double.isNaN(old_lrd) || old_lrd != new_lrd) {      lofResult.getLrds().putDouble(iter,new_lrd);      affected_lrd_ids.add(iter);    }  }  if (stepprog != null) {    stepprog.beginStep(2,"Recompute LOFS.",LOG);  }  List<? extends DoubleDBIDList> primDistRKNNs=lofResult.getRkNNRefer().getRKNNForBulkDBIDs(affected_lrd_ids,krefer);  ArrayDBIDs affected_lof_ids=mergeIDs(primDistRKNNs,affected_lrd_ids,insertions,updates1);  recomputeLOFs(affected_lof_ids,lofResult);  if (stepprog != null) {    stepprog.beginStep(3,"Inform listeners.",LOG);  }  lofResult.getResult().getHierarchy().resultChanged(lofResult.getResult());  LOG.setCompleted(stepprog);}  }
class C{  public static ComponentUI createUI(JComponent ta){  return new BasicTextAreaUI();}  }
class C{  public boolean addressTypeUnique(){  return false;}  }
class C{  private void evict(){  do {    evictBlock();  } while (usedMemory > maxMemory);}  }
class C{  public void expandListParagraphs(){  if (this.type != BlockType.ORDERED_LIST && this.type != BlockType.UNORDERED_LIST) {    return;  }  Block outer=this.blocks, inner;  boolean hasParagraph=false;  while (outer != null && !hasParagraph) {    if (outer.type == BlockType.ORDERED_LIST_ITEM || outer.type == BlockType.UNORDERED_LIST_ITEM) {      inner=outer.blocks;      while (inner != null && !hasParagraph) {        if (inner.type == BlockType.PARAGRAPH) {          hasParagraph=true;        }        inner=inner.next;      }    }    outer=outer.next;  }  if (hasParagraph) {    outer=this.blocks;    while (outer != null) {      if (outer.type == BlockType.ORDERED_LIST_ITEM || outer.type == BlockType.UNORDERED_LIST_ITEM) {        inner=outer.blocks;        while (inner != null) {          if (inner.type == BlockType.NONE) {            inner.type=BlockType.PARAGRAPH;          }          inner=inner.next;        }      }      outer=outer.next;    }  }}  }
class C{  public NotificationChain basicSetAnnotationList(PropertyAssignmentAnnotationList newAnnotationList,NotificationChain msgs){  PropertyAssignmentAnnotationList oldAnnotationList=annotationList;  annotationList=newAnnotationList;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.PROPERTY_GETTER_DECLARATION__ANNOTATION_LIST,oldAnnotationList,newAnnotationList);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void throttle(){  if (currentCommandStart == 0) {    currentCommandStart=System.currentTimeMillis();  }  if (throttle == 0) {    return;  }  long time=System.currentTimeMillis();  if (lastThrottle + Constants.THROTTLE_DELAY > time) {    return;  }  lastThrottle=time + throttle;  try {    Thread.sleep(throttle);  } catch (  Exception e) {  }}  }
class C{  public static boolean isBodyRotationDiscEnabled(){  return bodyRotationDiscEnabled;}  }
class C{  public boolean isEnabled(){  return mEnabled;}  }
class C{  public ILineSegment[] generate(int size){  ILineSegment[] lines=new ILineSegment[size];  int idx=0;  double delta=max / (size - 1);  double val=max;  for (int i=lines.length - 1; i >= 0; i--) {    lines[idx++]=new TwoDLineSegment(0,val,max - val,0);    val-=delta;  }  return lines;}  }
class C{  protected float clamp(float value){  return MathUtils.clamp(value,min,max);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  private void testSupportedDeployableType(DeployableType type){  assertTrue("DeployableType " + type + " is not supported",capability.supportsDeployableType(type));}  }
class C{  @Autowired public AllocateCashToCashierCommandHandler(final TellerWritePlatformService writePlatformService){  super();  this.writePlatformService=writePlatformService;}  }
class C{  private void clearExplicitKnowledge(){  requiredEdges=new HashSet<>();  explicitlyForbiddenEdges=new HashSet<>();  requiredCommonCauses=new HashSet<>();  forbiddenCommonCauses=new HashSet<>();  this.knowledgeGroups=new ArrayList<>();  this.allRequiredEdges=new HashSet<>();  tierMap=new HashMap<>();}  }
class C{  protected void updateBigNotificationMediaState(@Nullable RemoteViews bigContent){  NotificationMediaState state=notificationInfo.getMediaState();  if (bigContent == null || state == null) {    return;  }  bigContent.setImageViewResource(R.id.playlistcore_big_notification_playpause,state.isPlaying() ? R.drawable.playlistcore_notification_pause : R.drawable.playlistcore_notification_play);  bigContent.setInt(R.id.playlistcore_big_notification_prev,"setVisibility",state.isPreviousEnabled() ? View.VISIBLE : View.INVISIBLE);  bigContent.setInt(R.id.playlistcore_big_notification_next,"setVisibility",state.isNextEnabled() ? View.VISIBLE : View.INVISIBLE);}  }
class C{  public String titleString(){  return "no title form yet";}  }
class C{  public static int discrete(double[] a){  double r=uniform();  double sum=0.0;  for (int i=0; i < a.length; i++) {    sum=sum + a[i];    if (sum >= r)     return i;  }  assert false;  return -1;}  }
class C{  public SolrResourceLoader(Path instanceDir,ClassLoader parent,Properties coreProperties){  if (instanceDir == null) {    this.instanceDir=SolrResourceLoader.locateSolrHome().toAbsolutePath().normalize();    log.debug("new SolrResourceLoader for deduced Solr Home: '{}'",this.instanceDir);  } else {    this.instanceDir=instanceDir.toAbsolutePath().normalize();    log.debug("new SolrResourceLoader for directory: '{}'",this.instanceDir);  }  if (parent == null)   parent=Thread.currentThread().getContextClassLoader();  this.classLoader=new URLClassLoader(new URL[0],parent);  if (!this.instanceDir.equals(SolrResourceLoader.locateSolrHome())) {    Path libDir=this.instanceDir.resolve("lib");    if (Files.exists(libDir)) {      try {        addToClassLoader(getURLs(libDir));      } catch (      IOException e) {        log.warn("Couldn't add files from {} to classpath: {}",libDir,e.getMessage());      }      reloadLuceneSPI();    }  }  this.coreProperties=coreProperties;}  }
class C{  public void box(Type type){  if (TypeUtils.isPrimitive(type)) {    if (type == Type.VOID_TYPE) {      aconst_null();    } else {      Type boxed=TypeUtils.getBoxedType(type);      new_instance(boxed);      if (type.getSize() == 2) {        dup_x2();        dup_x2();        pop();      } else {        dup_x1();        swap();      }      invoke_constructor(boxed,new Signature(Constants.CONSTRUCTOR_NAME,Type.VOID_TYPE,new Type[]{type}));    }  }}  }
class C{  public List query(Interval interval){  List foundItems=new ArrayList();  query(interval,foundItems);  return foundItems;}  }
class C{  public boolean isCashTrx(){  return "X".equals(getTenderType());}  }
class C{  public static void main(String argv[]){  System.out.println(getVersion());}  }
class C{  static void applyWindowSettings(){  ApplicationSettings.RUN_ONCE.setValue(true);  if (GUIMediator.isAppVisible()) {    if ((GUIMediator.getAppFrame().getExtendedState() & Frame.MAXIMIZED_BOTH) == Frame.MAXIMIZED_BOTH) {      ApplicationSettings.MAXIMIZE_WINDOW.setValue(true);    } else {      Dimension dim=GUIMediator.getAppSize();      if ((dim.height > 100) && (dim.width > 100)) {        Point loc=GUIMediator.getAppLocation();        ApplicationSettings.APP_WIDTH.setValue(dim.width);        ApplicationSettings.APP_HEIGHT.setValue(dim.height);        ApplicationSettings.WINDOW_X.setValue(loc.x);        ApplicationSettings.WINDOW_Y.setValue(loc.y);      }    }  }}  }
class C{  public void parseAtom(ExtensionProfile extProfile,Reader reader) throws IOException, ParseException {  AtomHandler handler=new AtomHandler(extProfile);  new XmlParser().parse(reader,handler,Namespaces.atom,"entry");}  }
class C{  ContextualSearchRequest(String searchTerm,@Nullable String alternateTerm,boolean isLowPriorityEnabled){  mWasPrefetch=isLowPriorityEnabled;  mNormalPriorityUri=getUriTemplate(searchTerm,alternateTerm,false);  if (isLowPriorityEnabled) {    Uri baseLowPriorityUri=getUriTemplate(searchTerm,alternateTerm,true);    mLowPriorityUri=baseLowPriorityUri.buildUpon().path("s").appendQueryParameter("sns","1").build();    mIsLowPriority=true;  } else {    mIsLowPriority=false;    mLowPriorityUri=null;  }}  }
class C{  public EventItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static boolean cs_happly(Dcs V,int i,double beta,double[] x){  int p, Vp[], Vi[];  double Vx[], tau=0;  if (!Dcs_util.CS_CSC(V) || x == null)   return (false);  Vp=V.p;  Vi=V.i;  Vx=V.x;  for (p=Vp[i]; p < Vp[i + 1]; p++) {    tau+=Vx[p] * x[Vi[p]];  }  tau*=beta;  for (p=Vp[i]; p < Vp[i + 1]; p++) {    x[Vi[p]]-=Vx[p] * tau;  }  return (true);}  }
class C{  private void handleImpossibleBKViolation(NonUniqueBusinessKeyException e){  SaaSSystemException sse=new SaaSSystemException("Caught SaasNonUniqueBusinessKeyException although there is no business key",e);  logger.logError(Log4jLogger.SYSTEM_LOG,sse,LogMessageIdentifier.ERROR_UNEXPECTED_BK_VIOLATION);  throw sse;}  }
class C{  public JRefundLines(DataLogicSystem dlSystem,DataLogicSales dlsales,JPanelTicketEdits jTicketEdit){  dlSales=dlsales;  m_jTicketEdit=jTicketEdit;  initComponents();  ticketlines=new JTicketLines(dlSystem.getResourceAsXML("Ticket.Line"));  jPanel3.add(ticketlines,BorderLayout.CENTER);}  }
class C{  public GivenName(String value){  this();  setValue(value);}  }
class C{  public AeroSnap(int delay){  mSnapWindowHolder=new SnapWindowHolder();  mHandler=new Handler();  mDelay=delay;  mRange=Util.dp(mRange,MovableWindow.mWindowHolder.mActivity.getApplicationContext());}  }
class C{  public synchronized void waitAndClose(){  while (!open) {    try {      wait();    } catch (    InterruptedException e) {      throw new Error(e);    }  }  open=false;}  }
class C{  public void start(BundleContext context) throws Exception {  super.start(context);  this.colorProvider=new EditorColorProvider(getPreferenceStore());}  }
class C{  private void updatePom(IProject project) throws IOException, XmlPullParserException {  File mavenProjectPomLocation=project.getFile(POM_FILE).getLocation().toFile();  MavenProject mavenProject=MavenUtils.getMavenProject(mavenProjectPomLocation);  Parent msf4jParent=new Parent();  msf4jParent.setGroupId(MSF4J_SERVICE_PARENT_GROUP_ID);  msf4jParent.setArtifactId(MSF4J_SERVICE_PARENT_ARTIFACT_ID);  msf4jParent.setVersion(MSF4JArtifactConstants.getMSF4JServiceParentVersion());  mavenProject.getModel().setParent(msf4jParent);  Properties generatedProperties=mavenProject.getModel().getProperties();  generatedProperties.clear();}  }
class C{  public void add32bit(int value){  add(value >> 24,value >> 16,value >> 8,value);}  }
class C{  public float distanceTo(AnimatableValue other){  return 0f;}  }
class C{  static Multimap<Hue,StandardColor> loadColors(){  Multimap<Hue,StandardColor> standards=LinkedListMultimap.create();  InputStream resourceAsStream=StandardColors.class.getResourceAsStream("/colors.txt");  String[] nextLine;  try (CSVReader reader=new CSVReader(new InputStreamReader(resourceAsStream))){    while ((nextLine=reader.readNext()) != null) {      for (      String colorData : nextLine) {        String[] colorSplit=colorData.trim().split(" ");        String vHue=colorSplit[0];        String valueChroma=colorSplit[1];        String[] valueAndChroma=valueChroma.split("/");        int vValue=Integer.parseInt(valueAndChroma[0]);        int vChroma=Integer.parseInt(valueAndChroma[1]);        String vHex=colorSplit[2];        StandardColor color=new StandardColor(vHue,vChroma,vValue,vHex);        if (!color.hue().equals(Hue.Neutral)) {          standards.put(color.hue(),color);        }      }    }  } catch (  IOException ex) {    throw new RuntimeException("Unable to read predefined colors file",ex);  }  return standards;}  }
class C{  public String toString(){  try {    return '[' + join(",") + ']';  } catch (  Exception e) {    return null;  }}  }
class C{  public PreparedStatement internalPrepareStatement(final String sql,final int resultSetScrollType) throws SQLException {  if (sql != null) {    String sqlQuery=Utils.nativeSql(sql,noBackslashEscapes);    if (options.useServerPrepStmts && PREPARABLE_STATEMENT_PATTERN.matcher(sqlQuery).find()) {      checkConnection();      try {        return new MariaDbServerPreparedStatement(this,sqlQuery,resultSetScrollType,true);      } catch (      SQLNonTransientConnectionException e) {        throw e;      }catch (      SQLException e) {      }    }    return new MariaDbClientPreparedStatement(this,sqlQuery,resultSetScrollType);  } else {    throw new SQLException("SQL value can not be NULL");  }}  }
class C{  public static boolean isInnerClassAccess(INVOKESTATIC inv,ConstantPoolGen cpg){  String methodName=inv.getName(cpg);  return methodName.startsWith("access$");}  }
class C{  @Override public void RemoveFromSuppressLLDPs(long sw,short port){  NodePortTuple npt=new NodePortTuple(sw,port);  this.suppressLinkDiscovery.remove(npt);  discover(npt);}  }
class C{  public final boolean hasArray(){  return false;}  }
class C{  public void handleEvent(Event evt){  MutationEvent me=(MutationEvent)evt;  BridgeUpdateHandler h=getBridgeUpdateHandler(me.getRelatedNode());  if (h != null) {    try {      h.handleDOMNodeInsertedEvent(me);    } catch (    InterruptedBridgeException ibe) {    }catch (    Exception e) {      userAgent.displayError(e);    }  }}  }
class C{  public static Scenario createScenario(final Config config){  if (config == null) {    throw new NullPointerException("config must not be null!");  }  return new ScenarioImplPops(config);}  }
class C{  private void testInterfaces(OverloadedMethodsSubset oms){  assertEquals(Serializable.class,oms.getCommonSupertypeForUnwrappingHint(String.class,Number.class));  assertEquals(C1I1.class,oms.getCommonSupertypeForUnwrappingHint(C2ExtC1I1.class,C3ExtC1I1.class));  assertEquals(Object.class,oms.getCommonSupertypeForUnwrappingHint(C3I1I2.class,C4I1I2.class));  assertEquals(I1.class,oms.getCommonSupertypeForUnwrappingHint(C3I1I2.class,C5I1.class));  assertEquals(I1.class,oms.getCommonSupertypeForUnwrappingHint(C3I1I2.class,I1.class));  assertEquals(I2.class,oms.getCommonSupertypeForUnwrappingHint(C3I1I2.class,I2.class));  assertEquals(I1.class,oms.getCommonSupertypeForUnwrappingHint(I1I2.class,I1.class));  assertEquals(I2.class,oms.getCommonSupertypeForUnwrappingHint(I1I2.class,I2.class));}  }
class C{  protected void construct(ConditionalMutualInfoCalculatorMultiVariate condMiCalc){  this.condMiCalc=condMiCalc;}  }
class C{  public JSONObject optJSONObject(int index){  Object o=this.opt(index);  return o instanceof JSONObject ? (JSONObject)o : null;}  }
class C{  @Override protected void doStop(){  try {    _dispose(_serviceFactory.getWardenService());    _dispose(_serviceFactory.getMonitorService());    _dispose(_serviceFactory.getSchedulingService());    _dispose(_serviceFactory.getGlobalInterlockService());    _dispose(_serviceFactory.getMQService());    _dispose(_serviceFactory.getSchemaService());    _dispose(_serviceFactory.getTSDBService());    _persistService.stop();    _log.info("{} stopped.",getName());  } catch (  Exception ex) {    _log.error(getName() + " shutdown aborted.",ex);  }}  }
class C{  public void testSendWithLossAndOptAckDelayOff(){  PseudoTcpTestTransfer test=new PseudoTcpTestTransfer();  test.setLocalMtu(1500);  test.setRemoteMtu(1500);  test.setLoss(10);  test.setOptAckDelay(0);  test.doTestTransfer(100000);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DatatypePackage.ENUM__ENUMS:    return enums != null && !enums.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void load(SimState state){  super.load(state);  setupPortrayals();}  }
class C{  private void writeFileSection(final String filename,final Map<String,String> textlist,OutputStreamWriter output) throws IOException {  if (!filename.isEmpty()) {    output.write("#File: " + filename + "\n"+ "#---------------------------\n");    for (    String source : textlist.keySet()) {      String target=textlist.get(source);      if (target != null && !target.isEmpty()) {        if (source.equals(target)) {          output.write("#" + source + "=="+ target+ "\n");        } else {          output.write(source + "==" + target+ "\n");        }      } else {        output.write("#" + source + "=="+ source+ "\n");      }    }    output.write("#-----------------------------\n\n");  }}  }
class C{  public PriceModelException(){}  }
class C{  @Override public void updateBytes(String columnLabel,byte[] x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBytes(" + quote(columnLabel) + ", x);");    }    update(columnLabel,x == null ? (Value)ValueNull.INSTANCE : ValueBytes.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public FlushRequest force(boolean force){  this.force=force;  return this;}  }
class C{  public static void writeCfgFile(){  PropReader.writeProp(S.CFG_CUR_LANG,currentLang,new File(CFG_PATH));  PropReader.writeProp(S.CFG_HOST_OS,Cfg.getOs(),new File(CFG_PATH));  PropReader.writeProp(SHOW_DEODEX_ALERT,"" + showDeodexAlert,new File(Cfg.CFG_PATH));  PropReader.writeProp(MAX_JOBS_PROP,"" + Cfg.getMaxJobs(),new File(Cfg.CFG_PATH));  PropReader.writeProp(Cfg.FONT_NAME_PROP,currentFont,new File(Cfg.CFG_PATH));  PropReader.writeProp(Cfg.HEAP_SIZE_PROP,Cfg.maxHeadSize,new File(Cfg.CFG_PATH));  PropReader.writeProp(Cfg.COMP_METHOD_PROP,"" + Cfg.compresionMethod,new File(Cfg.CFG_PATH));  PropReader.writeProp(Cfg.CHECK_UPDATE_PROP,"" + Cfg.checkForUpdate,new File(Cfg.CFG_PATH));  PropReader.writeProp(Cfg.USE_CUSTOM_ADB_BINARY,"" + Cfg.useCustomAdb,new File(Cfg.CFG_PATH));  PropReader.writeProp(Cfg.CUSTOM_ADB_BINARY,"" + Cfg.customAdbBinary,new File(Cfg.CFG_PATH));}  }
class C{  public NotificationChain basicSetAnnotationList(PropertyAssignmentAnnotationList newAnnotationList,NotificationChain msgs){  PropertyAssignmentAnnotationList oldAnnotationList=annotationList;  annotationList=newAnnotationList;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.PROPERTY_SETTER_DECLARATION__ANNOTATION_LIST,oldAnnotationList,newAnnotationList);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override public boolean isSigned(int column) throws SQLException {  try {    debugCodeCall("isSigned",column);    checkColumnIndex(column);    return true;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private boolean isSkipTerm(@Nullable String field,String value){  return field != null && skipTerms != null && skipTerms.contains(new Term(field,value));}  }
class C{  public final DoubleGrid3D add(DoubleGrid3D withThis){  checkBounds(withThis);  double[][][] otherField=withThis.field;  double[][] ofieldx=null;  double[] ofieldxy=null;  double[][] fieldx=null;  double[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    ofieldx=otherField[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      ofieldxy=ofieldx[y];      for (int z=0; z < length; z++)       fieldxy[z]+=ofieldxy[z];    }  }  return this;}  }
class C{  public String concat(String oldBody,String newBody){  if (newBody != null) {    return oldBody + newBody;  } else {    return oldBody;  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static <T>T checkNotNull(T reference){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public void addEventListener(GeolocSharingListener listener) throws RcsServiceNotAvailableException, RcsGenericException {  if (listener == null) {    throw new RcsIllegalArgumentException("listener must not be null!");  }  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    IGeolocSharingListener rcsListener=new GeolocSharingListenerImpl(listener);    mGeolocSharingListeners.put(listener,new WeakReference<>(rcsListener));    mApi.addEventListener2(rcsListener);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public void load(){}  }
class C{  String renameInternalType(String type){  if (type == null) {    return null;  }  if (type.equals(mOldName)) {    return mNewName;  }  if (mOldBase != mOldName && type.equals(mOldBase)) {    return mNewBase;  }  int pos=type.indexOf('$');  if (pos == mOldBase.length() && type.startsWith(mOldBase)) {    return mNewBase + type.substring(pos);  }  if (type.indexOf(';') > 0) {    type=renameTypeDesc(type);  }  return type;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }  previousProgress=progress;}  }
class C{  protected void createLines(){  log.fine("Lines #" + m_lines.size());  for (int i=0; i < m_lines.size(); i++) {    WFLine line=(WFLine)m_lines.get(i);    Rectangle from=findBounds(line.getAD_WF_Node_ID());    Rectangle to=findBounds(line.getAD_WF_Next_ID());    line.setFromTo(from,to);  }}  }
class C{  public AttributeChangeEdit(Figure owner,AttributeKey<T> name,T oldValue,T newValue){  this.owner=owner;  this.name=name;  this.oldValue=oldValue;  this.newValue=newValue;}  }
class C{  public ObjectListAdapter(ObjectArrayList content){  this.content=content;}  }
class C{  private void readAttributeListDeclaration() throws IOException, XmlPullParserException {  read(START_ATTLIST);  skip();  String elementName=readName();  while (true) {    skip();    int c=peekCharacter();    if (c == '>') {      position++;      return;    }    String attributeName=readName();    skip();    if (position + 1 >= limit && !fillBuffer(2)) {      throw new XmlPullParserException("Malformed attribute list",this,null);    }    if (buffer[position] == NOTATION[0] && buffer[position + 1] == NOTATION[1]) {      read(NOTATION);      skip();    }    c=peekCharacter();    if (c == '(') {      position++;      while (true) {        skip();        readName();        skip();        c=peekCharacter();        if (c == ')') {          position++;          break;        } else         if (c == '|') {          position++;        } else {          throw new XmlPullParserException("Malformed attribute type",this,null);        }      }    } else {      readName();    }    skip();    c=peekCharacter();    if (c == '#') {      position++;      c=peekCharacter();      if (c == 'R') {        read(REQUIRED);      } else       if (c == 'I') {        read(IMPLIED);      } else       if (c == 'F') {        read(FIXED);      } else {        throw new XmlPullParserException("Malformed attribute type",this,null);      }      skip();      c=peekCharacter();    }    if (c == '"' || c == '\'') {      position++;      String value=readValue((char)c,true,true,ValueContext.ATTRIBUTE);      if (peekCharacter() == c) {        position++;      }      defineAttributeDefault(elementName,attributeName,value);    }  }}  }
class C{  public boolean contains(Object value){  return containsValue(value);}  }
class C{  @SuppressWarnings({"raw","unchecked"}) public static <T>EqPredicate<T> eq(Property<T> property,Variable variable){  return new EqPredicate(property(property),variable);}  }
class C{  public static boolean hasPossibleStaticMethod(ClassNode cNode,String name,Expression arguments,boolean trySpread){  int count=0;  boolean foundSpread=false;  if (arguments instanceof TupleExpression) {    TupleExpression tuple=(TupleExpression)arguments;    for (    Expression arg : tuple.getExpressions()) {      if (arg instanceof SpreadExpression) {        foundSpread=true;      } else {        count++;      }    }  } else   if (arguments instanceof MapExpression) {    count=1;  }  for (  MethodNode method : cNode.getMethods(name)) {    if (method.isStatic()) {      Parameter[] parameters=method.getParameters();      if (trySpread && foundSpread && parameters.length >= count)       return true;      if (parameters.length == count)       return true;      if (parameters.length > 0 && parameters[parameters.length - 1].getType().isArray()) {        if (count >= parameters.length - 1)         return true;        if (trySpread && foundSpread)         return true;      }      int nonDefaultParameters=0;      for (      Parameter parameter : parameters) {        if (!parameter.hasInitialExpression()) {          nonDefaultParameters++;        }      }      if (count < parameters.length && nonDefaultParameters <= count) {        return true;      }    }  }  return false;}  }
class C{  public void seekPackageFragments(String name,boolean partialMatch,IJavaElementRequestor requestor){  if (partialMatch) {    String[] splittedName=Util.splitOn('.',name,0,name.length());    Object[][] keys=this.packageFragments.keyTable;    for (int i=0, length=keys.length; i < length; i++) {      if (requestor.isCanceled())       return;      String[] pkgName=(String[])keys[i];      if (pkgName != null && Util.startsWithIgnoreCase(pkgName,splittedName,partialMatch)) {        Object value=this.packageFragments.valueTable[i];        if (value instanceof PackageFragmentRoot) {          PackageFragmentRoot root=(PackageFragmentRoot)value;          requestor.acceptPackageFragment(root.getPackageFragment(pkgName));        } else {          IPackageFragmentRoot[] roots=(IPackageFragmentRoot[])value;          for (int j=0, length2=roots.length; j < length2; j++) {            if (requestor.isCanceled())             return;            PackageFragmentRoot root=(PackageFragmentRoot)roots[j];            requestor.acceptPackageFragment(root.getPackageFragment(pkgName));          }        }      }    }  } else {    String[] splittedName=Util.splitOn('.',name,0,name.length());    int pkgIndex=this.packageFragments.getIndex(splittedName);    if (pkgIndex != -1) {      Object value=this.packageFragments.valueTable[pkgIndex];      String[] pkgName=(String[])this.packageFragments.keyTable[pkgIndex];      if (value instanceof PackageFragmentRoot) {        requestor.acceptPackageFragment(((PackageFragmentRoot)value).getPackageFragment(pkgName));      } else {        IPackageFragmentRoot[] roots=(IPackageFragmentRoot[])value;        if (roots != null) {          for (int i=0, length=roots.length; i < length; i++) {            if (requestor.isCanceled())             return;            PackageFragmentRoot root=(PackageFragmentRoot)roots[i];            requestor.acceptPackageFragment(root.getPackageFragment(pkgName));          }        }      }    }  }}  }
class C{  static void test5(){  for (int i=0; i < input.length; i++) {    String s=input[i];    StringBuilder sb=new StringBuilder(s);    int length=sb.length();    for (int j=0; j <= length; j++) {      int result=sb.codePointCount(j,length);      int expected=Character.codePointCount(sb,j,length);      check(result != expected,"codePointCount(input[" + i + "], "+ j+ ", "+ length+ ")",result,expected);    }    for (int j=length; j >= 0; j--) {      int result=sb.codePointCount(0,j);      int expected=Character.codePointCount(sb,0,j);      check(result != expected,"codePointCount(input[" + i + "], 0, "+ j+ ")",result,expected);    }    testCodePointCount(null,0,0,NullPointerException.class);    testCodePointCount(sb,-1,length,IndexOutOfBoundsException.class);    testCodePointCount(sb,0,length + 1,IndexOutOfBoundsException.class);    testCodePointCount(sb,length,length - 1,IndexOutOfBoundsException.class);  }}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public List registerInterestOn(Connection conn,final Object key,final int interestType,final InterestResultPolicy policy,final boolean isDurable,final boolean receiveUpdatesAsInvalidates,final byte regionDataPolicy){  if (interestType == InterestType.KEY && key instanceof List) {    return RegisterInterestListOp.executeOn(conn,this.pool,this.regionName,(List)key,policy,isDurable,receiveUpdatesAsInvalidates,regionDataPolicy);  } else {    return RegisterInterestOp.executeOn(conn,this.pool,this.regionName,key,interestType,policy,isDurable,receiveUpdatesAsInvalidates,regionDataPolicy);  }}  }
class C{  public static String replace(String source,String[] searchFor,String replaceWith){  for (int i=0; i < searchFor.length; i++) {    StringUtils.replace(source,searchFor[i],replaceWith);  }  return source;}  }
class C{  public Matrix minus(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] - B.A[i][j];    }  }  return X;}  }
class C{  public void skippedEntity(String name) throws SAXException {  flushStartDoc();  m_resultContentHandler.skippedEntity(name);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static boolean connect(FileDescriptor fd,InetAddress inetAddress,int port) throws SocketException {  try {    return IoBridge.connect(fd,inetAddress,port,0);  } catch (  SocketTimeoutException ex) {    throw new AssertionError(ex);  }}  }
class C{  public T caseAnonymous_invariant_2_(Anonymous_invariant_2_ object){  return null;}  }
class C{  public NPCGroupsXMLLoader(final URI uri){  this.uri=uri;}  }
class C{  public boolean contains(Element element){  if (this == element) {    return true;  }  if (children != null) {    int i=0;    while (i < children.size()) {      Element child=(Element)children.get(i);      if (child.contains(element)) {        return true;      }      i++;    }  }  return false;}  }
class C{  public void updatePhysicalInventory(URI uri) throws ControllerException {  long start=System.currentTimeMillis();  NetworkSystem networkDev=getDeviceObject(uri);  String msg="unknown status";  NetworkSystemDevice networkDevice=getDevice();  if (networkDevice == null) {    throw NetworkDeviceControllerException.exceptions.updatePhysicalInventoryFailedNull(uri.toString(),networkDev.getSystemType());  }  try {    List<FCEndpoint> currentConnections=new ArrayList<FCEndpoint>();    Map<String,Set<String>> routedEndpoints=new HashMap<String,Set<String>>();    try {      currentConnections=networkDevice.getPortConnections(networkDev,routedEndpoints);      msg=MessageFormat.format("Retrieved {0} connections from device {1} at {2}",new Integer(currentConnections.size()),uri,new Date());      _log.info(msg);    } catch (    Exception e) {      msg=MessageFormat.format("Discovery failed getting port connections for Network System : {0}",uri.toString());      throw (e);    }    try {      reconcileFCEndpoints(networkDev,currentConnections);    } catch (    Exception e) {      msg=MessageFormat.format("Discovery failed reconciling FC endpoints for Network System : {0}",uri.toString());      throw (e);    }    try {      reconcileTransportZones(networkDev,routedEndpoints);    } catch (    Exception e) {      msg=MessageFormat.format("Discovery failed reconciling networks for Network System : {0}",uri.toString());      throw (e);    }    try {      networkDev.setUptime(networkDevice.getUptime(networkDev));    } catch (    Exception e) {      msg=MessageFormat.format("Discovery failed setting version/uptime for Network System : {0}",uri.toString());      throw (e);    }    msg=MessageFormat.format("Discovery completed successfully for Network System : {0}",uri.toString());  } catch (  Exception ex) {    Date date=new Date();    throw NetworkDeviceControllerException.exceptions.updatePhysicalInventoryFailedExc(uri.toString(),date.toString(),ex);  } finally {    if (networkDev != null) {      try {        networkDev.setLastDiscoveryStatusMessage(msg);        dbClient.persistObject(networkDev);        _log.info("Discovery took {}",(System.currentTimeMillis() - start));      } catch (      DatabaseException ex) {        _log.error("Error while persisting object to DB",ex);      }    }  }}  }
class C{  public boolean isVerbose(){  return verbose;}  }
class C{  public void assertAbsolute(final String expectedFileOrDirName){  File fileFound=null;  for (  final File file : actualFiles) {    if (expectedFileOrDirName.equals(file.getPath())) {      fileFound=file;    }  }  if (fileFound == null) {    String message="Could not find file matching path: " + expectedFileOrDirName + "Amongst remaining files which have yet to be asserted:\n";    for (    final File file : actualFiles) {      message+="    [" + file.getPath() + "]\n";    }    fail(message);  } else {    actualFiles.remove(fileFound);  }}  }
class C{  public static String dbNameToClassName(String columnName){  return upperFirstChar(dbNameToVarName(columnName));}  }
class C{  public void stop(){  if (m_auto != null) {    m_auto.stop();  }  m_thread=null;}  }
class C{  protected void maybeMakeSound(int probablility){  if ((sounds != null) && !sounds.isEmpty() && (Rand.rand(100) < probablility)) {    long time=System.currentTimeMillis();    if (lastSoundTime + SOUND_DEAD_TIME < time) {      lastSoundTime=time;      this.addEvent(new SoundEvent(Rand.rand(sounds),SOUND_RADIUS,100,SoundLayer.CREATURE_NOISE));      this.notifyWorldAboutChanges();    }  }}  }
class C{  public void tick(){  advanceTimeBy(1,TimeUnit.MILLISECONDS);}  }
class C{  public static WListbox newDataTable(){  WListbox dataTable=new WListbox();  dataTable.setWidth("100%");  dataTable.setHeight("100%");  dataTable.setFixedLayout(true);  dataTable.setVflex(true);  return dataTable;}  }
class C{  public Vector2(){}  }
class C{  @Override public boolean goBack(){  if (webView.canGoBack()) {    webView.goBack();    return true;  }  return false;}  }
class C{  public static String featureName(Features feature){  String[] words=feature.name().toLowerCase(Locale.ENGLISH).split("_");  if (words.length == 1) {    return words[0];  }  String ret=words[0];  for (int i=1; i < words.length; i++) {    ret+=StringUtils.capitalize(words[i]);  }  return ret;}  }
class C{  protected void sendMail(StatsCollectionEvent sce,String message,boolean flappingStop){  String name=sce.getName();  if (isSeriesDisabled(name)) {    return;  }  Long value=sce.getValue();  Long threshold=this.getThreshold(name);  String subjectInfix="";  String bodyPrefix="";  if (flappingStop) {    subjectInfix=getMessageSourceAccessor().getMessage(BASE_PROPERTY + "flappingStop.subject.infix");    bodyPrefix=getMessageSourceAccessor().getMessage(BASE_PROPERTY + "flappingStop.body.prefix");  }  String subject=getMessageSourceAccessor().getMessage(BASE_PROPERTY + message + ".subject",new Object[]{subjectInfix,name,value,threshold});  String body=getMessageSourceAccessor().getMessage(BASE_PROPERTY + message + ".body",new Object[]{bodyPrefix,name,value,threshold});  MailMessage mail=new MailMessage(null,subject,body);  try {    getMailer().send(mail);  } catch (  MessagingException ex) {    logger.error("Cannot send message",ex);  }}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.artifactPaint=SerialUtilities.readPaint(stream);}  }
class C{  private void genPreambleClassVariableDeclarations(String className) throws JasperException {  if (isPoolingEnabled) {    if (!tagHandlerPoolNames.isEmpty()) {      for (      String tagHandlerPoolName : tagHandlerPoolNames) {        out.printil("private org.apache.jasper.runtime.TagHandlerPool " + tagHandlerPoolName + ";");      }      out.println();    }  }  out.printil("private org.glassfish.jsp.api.ResourceInjector " + "_jspx_resourceInjector;");  out.println();}  }
class C{  static void checkDesc(final String desc,final boolean canBeVoid){  int end=checkDesc(desc,0,canBeVoid);  if (end != desc.length()) {    throw new IllegalArgumentException("Invalid descriptor: " + desc);  }}  }
class C{  public Process start() throws IOException {  String[] cmdArray=command.toArray(new String[command.size()]);  String[] envArray=new String[environment.size()];  int i=0;  for (  Map.Entry<String,String> entry : environment.entrySet()) {    envArray[i++]=entry.getKey() + "=" + entry.getValue();  }  return ProcessManager.getInstance().exec(cmdArray,envArray,directory,redirectErrorStream);}  }
class C{  @Override public final void postSetUp() throws Exception {  Invoke.invokeInEveryVM("connectDistributedSystem",null);  connectDistributedSystem();}  }
class C{  void error(String key,Object... args){  if (apiMode) {    String msg=log.localize(PrefixKind.JAVAC,key,args);    throw new PropagatedException(new IllegalStateException(msg));  }  warning(key,args);  log.printLines(PrefixKind.JAVAC,"msg.usage",ownName);}  }
class C{  public static Map<String,Long> preparePoolCapacityMetrics(Map<String,BigInteger> capacityMetrics){  BigInteger totalCapacity=capacityMetrics.get(StorageMetrics.USABLE.toString());  BigDecimal totalCapacityGb=new BigDecimal(totalCapacity).divideToIntegralValue(kbToGB_BD);  long totalCapacityGbLong=totalCapacityGb.longValue();  BigInteger freeCapacity=capacityMetrics.get(StorageMetrics.FREE.toString());  BigDecimal freeCapacityGb=new BigDecimal(freeCapacity).divideToIntegralValue(kbToGB_BD);  long freeCapacityGbLong=freeCapacityGb.longValue();  BigInteger subscribedCapacity=capacityMetrics.get(StorageMetrics.SUBSCRIBED.toString());  long subscribedCapacityGbLong;  if (!subscribedCapacity.toString().equals(MINUS_ONE.toString())) {    BigDecimal[] result=new BigDecimal(subscribedCapacity).divideAndRemainder(kbToGB_BD);    subscribedCapacityGbLong=result[0].longValue();    if (!result[1].equals(BigDecimal.ZERO)) {      subscribedCapacityGbLong+=1;    }  } else {    subscribedCapacityGbLong=MINUS_ONE_LONG;  }  long usedCapacityGbLong=totalCapacityGbLong - freeCapacityGbLong;  long percentUsed=0;  long percentSubscribed=0;  if (totalCapacityGbLong > 0) {    long temp=usedCapacityGbLong * 100;    percentUsed=(temp % totalCapacityGbLong == 0) ? temp / totalCapacityGbLong : temp / totalCapacityGbLong + 1;    temp=subscribedCapacityGbLong * 100;    percentSubscribed=(temp % totalCapacityGbLong == 0) ? temp / totalCapacityGbLong : temp / totalCapacityGbLong + 1;  }  Map<String,Long> metrics=new HashMap<String,Long>();  metrics.put(StorageMetrics.USABLE.toString(),totalCapacityGbLong);  metrics.put(StorageMetrics.FREE.toString(),freeCapacityGbLong);  metrics.put(StorageMetrics.USED.toString(),usedCapacityGbLong);  metrics.put(StorageMetrics.SUBSCRIBED.toString(),subscribedCapacityGbLong);  metrics.put(StorageMetrics.PERCENT_USED.toString(),percentUsed);  metrics.put(StorageMetrics.PERCENT_SUBSCRIBED.toString(),percentSubscribed);  return metrics;}  }
class C{  public static boolean usingMacLnf(){  String lnfClass=UIManager.getLookAndFeel().getClass().getName();  return OperatingSystem.isMacOs() && UIManager.getSystemLookAndFeelClassName().equals(lnfClass);}  }
class C{  public RootBlockView(final boolean rootBlock0,final ByteBuffer buf,final ChecksumUtility checker) throws RootBlockException {  if (buf == null)   throw new IllegalArgumentException();  if (buf.remaining() != SIZEOF_ROOT_BLOCK) {    throw new IllegalArgumentException("Expecting " + SIZEOF_ROOT_BLOCK + " remaining, actual="+ buf.remaining());  }  this.buf=buf.asReadOnlyBuffer();  this.rootBlock0=rootBlock0;switch (getStoreType()) {case RW:{      am=new RWAddressManager(null);      break;    }case WORM:{    final int offsetBits=getOffsetBits();    am=new WormAddressManager(offsetBits);    break;  }default :throw new RootBlockException("Unknown storeType=" + getStoreType());}if (checker == null) {log.warn("Checksum will not be validated");}this.checker=checker;valid();}  }
class C{  public Builder addGap(int width){  if (!ordered)   throw new IllegalArgumentException("Gaps can only be added to ordered near queries");  this.clauses.add(new SpanGapQuery(field,width));  return this;}  }
class C{  public void testSendReceiveInSeperateSessionTest() throws Exception {  session.close();  int batchCount=10;  for (int i=0; i < batchCount; i++) {{      Session session=resourceProvider.createSession(connection);      this.session=session;      MessageProducer producer=resourceProvider.createProducer(session,destination);      beginTx();      producer.send(session.createTextMessage("Test Message: " + i));      commitTx();      session.close();    }{      Session session=resourceProvider.createSession(connection);      this.session=session;      MessageConsumer consumer=resourceProvider.createConsumer(session,destination);      beginTx();      TextMessage message=(TextMessage)consumer.receive(1000 * 5);      assertNotNull("Received only " + i + " messages in batch ",message);      assertEquals("Test Message: " + i,message.getText());      commitTx();      session.close();    }  }}  }
class C{  @SuppressWarnings("unchecked") public static <S>S fromSpec(final Object context,String spec,final Class<S> type,final String[] packages,final String[] factoryMethod) throws IllegalArgumentException, ClassNotFoundException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException {  spec=spec.trim();  final boolean contextualised=context != NO_CONTEXT;  int endOfName=spec.indexOf('(');  final int length=spec.length();  if (endOfName < 0)   endOfName=length;  Class<? extends S> klass=null;  final String className=spec.substring(0,endOfName).trim();  try {    klass=(Class<? extends S>)Class.forName(className);  } catch (  ClassNotFoundException e) {    if (packages != null)     for (    String p : packages) {      try {        klass=(Class<? extends S>)Class.forName(p + "." + className);      } catch (      ClassNotFoundException niceTry) {      }      if (klass != null)       break;    }  }  if (klass == null)   throw new ClassNotFoundException(className);  if (!type.isAssignableFrom(klass))   throw new ClassCastException("Class " + klass.getSimpleName() + " is not assignable to "+ type);  final ObjectArrayList<Object> args=new ObjectArrayList<Object>();  if (contextualised)   args.add(context);  if (endOfName < length) {    boolean inQuotes, escaped;    MutableString arg=new MutableString();    if (spec.charAt(length - 1) != ')')     throw new IllegalArgumentException("\")\" missing at the end of argument list");    int pos=endOfName;    while (pos < length) {      pos++;      while (pos < length && Character.isWhitespace(spec.charAt(pos)))       pos++;      if (pos == length || args.size() == 0 && pos == length - 1 && spec.charAt(pos) == ')')       break;      arg.setLength(0);      if (inQuotes=spec.charAt(pos) == '"')       pos++;      escaped=false;      char c;      for (; ; ) {        c=spec.charAt(pos);        if (!inQuotes) {          if (c == ',' || pos == length - 1 && c == ')')           break;          arg.append(c);        } else {          if (c == '"' && !escaped) {            do             pos++; while (pos < length && Character.isWhitespace(spec.charAt(pos)));            if (pos == length || (spec.charAt(pos) != ')' && spec.charAt(pos) != ','))             throw new IllegalArgumentException();            break;          }          if (c == '\\' && !escaped)           escaped=true; else {            arg.append(c);            escaped=false;          }        }        pos++;      }      args.add(inQuotes ? arg.toString() : arg.trim().toString());    }  }  final Object[] argArray=args.toArray();  final String[] stringArgArray;  final Class<?>[] argTypes;  if (contextualised) {    argTypes=new Class[args.size()];    stringArgArray=new String[args.size() - 1];    argTypes[0]=Object.class;    for (int i=1; i < argTypes.length; i++) {      argTypes[i]=String.class;      stringArgArray[i - 1]=(String)args.get(i);    }  } else {    argTypes=new Class[args.size()];    stringArgArray=new String[args.size()];    for (int i=0; i < argTypes.length; i++) {      argTypes[i]=String.class;      stringArgArray[i]=(String)args.get(i);    }  }  Method method=null;  S instance=null;  if (factoryMethod != null)   for (  String f : factoryMethod) {    try {      method=klass.getMethod(f,argTypes);      if (Modifier.isStatic(method.getModifiers()))       instance=(S)method.invoke(null,argArray);    } catch (    NoSuchMethodException niceTry) {    }    if (instance != null)     return instance;    try {      if (contextualised) {        method=klass.getMethod(f,Object.class,String[].class);        if (Modifier.isStatic(method.getModifiers()))         instance=(S)method.invoke(null,context,stringArgArray);      } else {        method=klass.getMethod(f,String[].class);        if (Modifier.isStatic(method.getModifiers()))         instance=(S)method.invoke(null,(Object)stringArgArray);      }    } catch (    NoSuchMethodException niceTry) {    }    if (instance != null)     return instance;  }  Constructor<? extends S> constr;  try {    constr=klass.getConstructor(argTypes);    instance=constr.newInstance(argArray);  } catch (  NoSuchMethodException niceTry) {  }  if (instance != null)   return instance;  try {    if (contextualised) {      constr=klass.getConstructor(Object.class,String[].class);      return constr.newInstance(context,stringArgArray);    } else {      constr=klass.getConstructor(String[].class);      return constr.newInstance((Object)stringArgArray);    }  } catch (  NoSuchMethodException e) {    throw new NoSuchMethodException(contextualised ? "No contextual constructor with " + stringArgArray.length + " strings as argument for class "+ klass.getName() : "No constructor with " + stringArgArray.length + " strings as argument for class "+ klass.getName());  }}  }
class C{  private static double dotProduct(double[] a,double[] b,final int len){  double val=0;  final int bn=len % 8;  for (int i=0; i < bn; i++)   val+=a[i] * b[i];  for (int i=bn; i < len; i+=8) {    val+=a[i + 0] * b[i + 0] + a[i + 1] * b[i + 1] + a[i + 2] * b[i + 2] + a[i + 3] * b[i + 3] + a[i + 4] * b[i + 4] + a[i + 5] * b[i + 5] + a[i + 6] * b[i + 6] + a[i + 7] * b[i + 7];  }  return val;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="UW_UNCOND_WAIT",justification="Unconditional wait is give the warrant that now has _stoppingBlock allocated a little time to deallocate it.  This occurs after this method sets _stoppingBlock to null.") @Override public void propertyChange(java.beans.PropertyChangeEvent evt){  if (!(evt.getSource() instanceof NamedBean)) {    if (log.isDebugEnabled())     log.debug(_trainName + " propertyChange \"" + evt.getPropertyName()+ "\" old= "+ evt.getOldValue()+ " new= "+ evt.getNewValue());    return;  }  String property=evt.getPropertyName();  if (log.isDebugEnabled()) {    log.debug(_trainName + " propertyChange \"" + property+ "\" new= "+ evt.getNewValue()+ " source= "+ ((NamedBean)evt.getSource()).getDisplayName()+ " - warrant= "+ getDisplayName());  }  if (_nextSignal != null && _nextSignal == evt.getSource()) {    if (property.equals("Aspect") || property.equals("Appearance")) {synchronized (this) {        notify();      }      return;    }  }  if (_stoppingBlock != null) {    log.debug(_trainName + " CHECKING STOPPINGBLOCKEVENT ((NamedBean) evt.getSource()).getDisplayName() = '" + ((NamedBean)evt.getSource()).getDisplayName()+ "'");    if (((NamedBean)evt.getSource()).getDisplayName().equals(_stoppingBlock.getDisplayName()) && evt.getPropertyName().equals("state") && (((Number)evt.getNewValue()).intValue() & OBlock.UNOCCUPIED) == OBlock.UNOCCUPIED) {      log.debug(_trainName + " being aware that Block " + ((NamedBean)evt.getSource()).getDisplayName()+ " has become free");      _stoppingBlock.removePropertyChangeListener(this);      _stoppingBlock=null;synchronized (this) {        try {          wait(100);        } catch (        InterruptedException e) {        }        notify();      }      return;    }  }}  }
class C{  void start(){  imageFile.getWorkspace().addResourceChangeListener(this);}  }
class C{  public void openAnnotation(){  if (annotationDialog == null) {    annotationDialog=new TextDialog(null,name,400,200,true,false);  }  if (mapElement != null) {    annotationDialog.setMessage(StringUtil.format(mapElement.getLocationInWorld()));  }  annotationDialog.setText(annotation);  annotationDialog.open();}  }
class C{  public void sqlTimingOccured(Spy spy,long execTime,String methodCall,String sql){  if (sqlTimingLogger.isErrorEnabled() && (!DriverSpy.DumpSqlFilteringOn || shouldSqlBeLogged(sql))) {    if (DriverSpy.SqlTimingErrorThresholdEnabled && execTime >= DriverSpy.SqlTimingErrorThresholdMsec) {      sqlTimingLogger.error(buildSqlTimingDump(spy,execTime,methodCall,sql,sqlTimingLogger.isDebugEnabled()));    } else     if (sqlTimingLogger.isWarnEnabled()) {      if (DriverSpy.SqlTimingWarnThresholdEnabled && execTime >= DriverSpy.SqlTimingWarnThresholdMsec) {        sqlTimingLogger.warn(buildSqlTimingDump(spy,execTime,methodCall,sql,sqlTimingLogger.isDebugEnabled()));      } else       if (sqlTimingLogger.isDebugEnabled()) {        sqlTimingLogger.debug(buildSqlTimingDump(spy,execTime,methodCall,sql,true));      } else       if (sqlTimingLogger.isInfoEnabled()) {        sqlTimingLogger.info(buildSqlTimingDump(spy,execTime,methodCall,sql,false));      }    }  }}  }
class C{  protected final JButton searchButton(){  return searchField.getFindButton();}  }
class C{  public void endMethod(){  if ((access & Opcodes.ACC_ABSTRACT) == 0) {    mv.visitMaxs(0,0);  }  mv.visitEnd();}  }
class C{  public CovSEard(int inputDimension){  this.D=inputDimension;  numParameters=D + 1;}  }
class C{  public static String padRight(String inString,int length){  return fixStringLength(inString,length,true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:22.738 -0400",hash_original_method="3443DDA1C14BFAA02F9B5213E85AAAB3",hash_generated_method="B0099F078640672953CCD031EEBC9D5E") private boolean prepareBluetooth(){  if (mBluetoothService.enableNative() != 0) {    return false;  }  int retryCount=2;  boolean eventLoopStarted=false;  while ((retryCount-- > 0) && !eventLoopStarted) {    mEventLoop.start();    int pollCount=5;    while ((pollCount-- > 0) && !eventLoopStarted) {      if (mEventLoop.isEventLoopRunning()) {        eventLoopStarted=true;        break;      }      try {        Thread.sleep(100);      } catch (      InterruptedException e) {        log("prepareBluetooth sleep interrupted: " + pollCount);        break;      }    }  }  if (!eventLoopStarted) {    mBluetoothService.disableNative();    return false;  }  if (!mBluetoothService.prepareBluetooth()) {    mEventLoop.stop();    mBluetoothService.disableNative();    return false;  }  sendMessageDelayed(PREPARE_BLUETOOTH_TIMEOUT,PREPARE_BLUETOOTH_TIMEOUT_TIME);  return true;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private int parseKey(final byte[] b,final int off) throws ParseException {  final int bytesToParseLen=b.length - off;  if (bytesToParseLen >= encryptedKeyLen_) {    encryptedKey_=Arrays.copyOfRange(b,off,off + encryptedKeyLen_);    return encryptedKeyLen_;  } else {    throw new ParseException("Not enough bytes to parse key");  }}  }
class C{  public String toString(){  StringBuilder result=new StringBuilder();  result.append("CE_TEXT: \"" + text + "\"");  result.append("\nCE_BOLD_SPANS: ");  if (boldSpans != null) {    result.append(boldSpans.size());    for (    Span s : boldSpans)     result.append("\n\t" + s + " : \""+ s.getText(text)+ "\"");  } else   result.append("ERROR: boldSpans == null");  result.append("\nCE_ITALIC_SPANS: ");  if (italicSpans != null) {    result.append(italicSpans.size());    for (    Span s : italicSpans)     result.append("\n\t" + s + " : \""+ s.getText(text)+ "\"");  } else   result.append("ERROR: italicSpans == null");  result.append("\nCE_LINKS: ");  if (links != null) {    result.append(links.size());    for (    Link l : links)     result.append("\n" + l);  } else   result.append("ERROR: links == null");  result.append("\nCE_TEMPLATES: ");  if (templates != null) {    result.append(templates.size());    for (    Template t : templates)     result.append("\n" + t);  } else   result.append("ERROR: templates == null");  result.append("\nCE_TAGS: ");  if (templates != null) {    result.append(tags.size());    for (    Span s : tags)     result.append("\n" + s);  } else   result.append("ERROR: templates == null");  return result.toString();}  }
class C{  private static RMIClassLoaderSpi initializeProvider(){  String providerClassName=System.getProperty("java.rmi.server.RMIClassLoaderSpi");  if (providerClassName != null) {    if (providerClassName.equals("default")) {      return defaultProvider;    }    try {      Class<? extends RMIClassLoaderSpi> providerClass=Class.forName(providerClassName,false,ClassLoader.getSystemClassLoader()).asSubclass(RMIClassLoaderSpi.class);      return providerClass.newInstance();    } catch (    ClassNotFoundException e) {      throw new NoClassDefFoundError(e.getMessage());    }catch (    IllegalAccessException e) {      throw new IllegalAccessError(e.getMessage());    }catch (    InstantiationException e) {      throw new InstantiationError(e.getMessage());    }catch (    ClassCastException e) {      Error error=new LinkageError("provider class not assignable to RMIClassLoaderSpi");      error.initCause(e);      throw error;    }  }  Iterator<RMIClassLoaderSpi> iter=ServiceLoader.load(RMIClassLoaderSpi.class,ClassLoader.getSystemClassLoader()).iterator();  if (iter.hasNext()) {    try {      return iter.next();    } catch (    ClassCastException e) {      Error error=new LinkageError("provider class not assignable to RMIClassLoaderSpi");      error.initCause(e);      throw error;    }  }  return defaultProvider;}  }
class C{  private void convergenceStep(final Vec[] xit,int i,final boolean[] converged,final int[] designations,final Vec scratch,final KernelFunction k){  double denom=0.0;  Vec xCur=xit[i];  List<? extends VecPaired<VecPaired<Vec,Integer>,Double>> contrib=mkde.getNearbyRaw(xCur);  if (contrib.size() == 1) {    converged[i]=true;    designations[i]=-1;  } else {    scratch.zeroOut();    for (    VecPaired<VecPaired<Vec,Integer>,Double> v : contrib) {      double g=-k.kPrime(v.getPair());      denom+=g;      scratch.mutableAdd(g,v);    }    scratch.mutableDivide(denom);    if (Math.abs(scratch.pNormDist(2,xCur)) < 1e-5)     converged[i]=true;    scratch.copyTo(xCur);  }}  }
class C{  public static byte[] readFully(InputStream in) throws IOException {  try {    return readFullyNoClose(in);  }  finally {    in.close();  }}  }
class C{  private static int lf_maj(int x,int y,int z){  return (x & y) ^ (x & z) ^ (y & z);}  }
class C{  @Override public DepartmentObject copy(){  return new DepartmentObject(this);}  }
class C{  private void parseUserQuery(MUserQuery userQuery){  String code=userQuery.getCode();  log.fine("Parse user query: " + code);  String[] segments=code.split(Pattern.quote(SEGMENT_SEPARATOR),-1);  advancedTable.stopEditor(true);  DefaultTableModel model=(DefaultTableModel)advancedTable.getModel();  int cnt=model.getRowCount();  for (int i=cnt - 1; i >= 0; i--)   model.removeRow(i);  for (int i=0; i < segments.length; i++) {    String[] fields=segments[i].split(Pattern.quote(FIELD_SEPARATOR));    model.addRow(new Object[]{"","",null,MQuery.OPERATORS[MQuery.EQUAL_INDEX],null,null,""});    String columnName=null;    for (int j=0; j < fields.length; j++) {      if (j == 0) {        for (        ValueNamePair vnp : columnValueNamePairs) {          if (vnp.getValue().equals(fields[j])) {            model.setValueAt(vnp,i,INDEX_COLUMNNAME);            columnName=fields[j];            break;          }        }      } else       if (j == 1) {        for (        ValueNamePair vnp : MQuery.OPERATORS) {          if (vnp.getValue().equals(fields[j])) {            model.setValueAt(vnp,i,INDEX_OPERATOR);            break;          }        }      } else       if (j == 2 && fields[j].length() > 0) {        GridField field=getTargetMField(columnName);        Object value=parseString(field,fields[j]);        model.setValueAt(value,i,INDEX_VALUE);      } else       if (j == 3 && fields[j].length() > 0) {        GridField field=getTargetMField(columnName);        Object value=parseString(field,fields[j]);        model.setValueAt(value,i,INDEX_VALUE2);      } else       if (j == 4 && fields[j].length() > 0) {        if (i != 0)         model.setValueAt(fields[j],i,INDEX_ANDOR);      } else       if (j == 5 && fields[j].length() > 0) {        model.setValueAt(fields[j],i,INDEX_LEFTBRACKET);      } else       if (j == 6 && fields[j].length() > 0) {        model.setValueAt(fields[j],i,INDEX_RIGHTBRACKET);      }    }  }  advancedTable.invalidate();}  }
class C{  private <T>BindingInject<T> findBean(Key<T> key){  for (  InjectProvider provider : _providerList) {    BindingInject<T> bean=(BindingInject)provider.lookup(key.rawClass());    if (bean != null) {      return bean;    }  }  return null;}  }
class C{  public boolean isAttributePresent(){  return attributePresent;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:40.629 -0500",hash_original_method="C87A48D0B50CCC317A58E3CCEC0DEAA5",hash_generated_method="81AC029FBAFBE2C7A7DBE98659F6CBF4") public ClientParamsStack(ClientParamsStack stack,HttpParams aparams,HttpParams cparams,HttpParams rparams,HttpParams oparams){  this((aparams != null) ? aparams : stack.getApplicationParams(),(cparams != null) ? cparams : stack.getClientParams(),(rparams != null) ? rparams : stack.getRequestParams(),(oparams != null) ? oparams : stack.getOverrideParams());}  }
class C{  public void initialize(){  mTabModelSelector.getModel(false).addObserver(mTabModelObserver);}  }
class C{  public void removeNotificationListener(NotificationListener listener,NotificationFilter filter,Object handback) throws ListenerNotFoundException {  broadcaster.removeNotificationListener(listener,filter,handback);}  }
class C{  @Override public void doTests(){  println("Object: " + m_Object.getClass().getName() + "\n");  println("--> Tests");  m_Success=checkGlobalInfo();  if (m_Success) {    m_Success=checkToolTips();  }}  }
class C{  public Date parseMath(String math) throws ParseException {  Calendar cal=Calendar.getInstance(zone,loc);  cal.setTime(getNow());  if (0 == math.length()) {    return cal.getTime();  }  String[] ops=splitter.split(math);  int pos=0;  while (pos < ops.length) {    if (1 != ops[pos].length()) {      throw new ParseException("Multi character command found: \"" + ops[pos] + "\"",pos);    }    char command=ops[pos++].charAt(0);switch (command) {case '/':      if (ops.length < pos + 1) {        throw new ParseException("Need a unit after command: \"" + command + "\"",pos);      }    try {      round(cal,ops[pos++]);    } catch (    IllegalArgumentException e) {      throw new ParseException("Unit not recognized: \"" + ops[pos - 1] + "\"",pos - 1);    }  break;case '+':case '-':if (ops.length < pos + 2) {  throw new ParseException("Need a value and unit for command: \"" + command + "\"",pos);}int val=0;try {val=Integer.valueOf(ops[pos++]);} catch (NumberFormatException e) {throw new ParseException("Not a Number: \"" + ops[pos - 1] + "\"",pos - 1);}if ('-' == command) {val=0 - val;}try {String unit=ops[pos++];add(cal,val,unit);} catch (IllegalArgumentException e) {throw new ParseException("Unit not recognized: \"" + ops[pos - 1] + "\"",pos - 1);}break;default :throw new ParseException("Unrecognized command: \"" + command + "\"",pos - 1);}}return cal.getTime();}  }
class C{  protected int hash(Object key){  int h=key.hashCode();  h+=~(h << 9);  h^=(h >>> 14);  h+=(h << 4);  h^=(h >>> 10);  return h;}  }
class C{  boolean readModule(int row,int column,int numRows,int numColumns){  if (row < 0) {    row+=numRows;    column+=4 - ((numRows + 4) & 0x07);  }  if (column < 0) {    column+=numColumns;    row+=4 - ((numColumns + 4) & 0x07);  }  readMappingMatrix.set(column,row);  return mappingBitMatrix.get(column,row);}  }
class C{  public Sea(){  super();}  }
class C{  public static boolean assertDescending(final double[] a){  for (int i=1; i < a.length; i++) {    Exam.assertTrue("Not descending:" + Arrays.toString(a),a[i - 1] >= a[i]);  }  return true;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean equals(java.lang.Object obj){  return obj != null && obj.getClass() == getClass() && ((Boolean)obj).value == value;}  }
class C{  public void update(){  this.query_count++;  this.query_last=new Date();}  }
class C{  public boolean isEmpty(){  return mChartSeries == null || mChartSeries.isEmpty();}  }
class C{  @Override public int hashCode(){  int hashCode=31 + rtype.hashCode();  for (  Class<?> ptype : ptypes)   hashCode=31 * hashCode + ptype.hashCode();  return hashCode;}  }
class C{  public Type1Font(String platname,Object nativeNames,boolean createdCopy) throws FontFormatException {  super(platname,nativeNames);  fontRank=Font2D.TYPE1_RANK;  checkedNatives=true;  try {    verify();  } catch (  Throwable t) {    if (createdCopy) {      T1DisposerRecord ref=new T1DisposerRecord(platname);      Disposer.addObjectRecord(bufferRef,ref);      bufferRef=null;    }    if (t instanceof FontFormatException) {      throw (FontFormatException)t;    } else {      throw new FontFormatException("Unexpected runtime exception.");    }  }}  }
class C{  private LibraryPlaylistsTableMediator(){  super("LIBRARY_PLAYLISTS_TABLE");  setMediaType(MediaType.getAudioMediaType());}  }
class C{  public void afterDestroy(EntryEvent oevt){  fail("Unexpected listener callback: afterDestroy");}  }
class C{  public void subtractAmount(final int amount){  stillNeededAmount-=amount;}  }
class C{  public int rtf(XPathContext support){  return DTM.NULL;}  }
class C{  public DispatchedAndCurrentEvents(){}  }
class C{  public boolean isNamespaceDeclUris(){  return namespaceDeclUris;}  }
class C{  public void analyse(PersistRequest persistRequest) throws SortPersistException, EntityMissingException {  try {    setCorrectStateForEntitiesWhichMayOrMayNotBeInTheDatabase(persistRequest.getToInsert(),persistRequest.getToUpdate(),persistRequest.getToSave(),persistRequest.getToDelete());    for (    Entity entity : persistRequest.getToInsert()) {      removeAnalysis(entity);      if (entity.getEntityContext() != entityContext) {        throw new IllegalPersistStateException("Cannot persist entity from a different context");      }      analyseCreate(entity);    }    for (    Entity entity : persistRequest.getToUpdate()) {      removeAnalysis(entity);      if (entity.getEntityContext() != entityContext) {        throw new IllegalPersistStateException("Cannot persist entity from a different context");      }      analyseUpdate(entity);    }    for (    Entity entity : persistRequest.getToSave()) {      removeAnalysis(entity);      if (entity.getEntityContext() != entityContext) {        throw new IllegalPersistStateException("Cannot persist entity from a different context");      }      if (entity.isUnclearIfInDatabase()) {        throw new IllegalPersistStateException("We should know at this point if the entity is new or not: " + entity);      }      if (entity.isClearlyNotInDatabase()) {        analyseCreate(entity);      } else {        analyseUpdate(entity);      }    }    for (    Entity entity : persistRequest.getToDelete()) {      removeAnalysis(entity);      if (entity.getEntityContext() != entityContext) {        throw new IllegalPersistStateException("Cannot persist entity from a different context");      }      analyseDelete(entity);    }  }  finally {    analysing.clear();  }}  }
class C{  public Cone(Position centerPosition,double height,double radius){  if (centerPosition == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (radius <= 0) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","radius <= 0");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (height <= 0) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","height <= 0");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.centerPosition=centerPosition;  this.northSouthRadius=radius;  this.verticalRadius=height / 2;  this.eastWestRadius=radius;  this.setUpGeometryCache();}  }
class C{  public void enableDashedLine(float lineLength,float spaceLength,float phase){  mDashPathEffect=new DashPathEffect(new float[]{lineLength,spaceLength},phase);}  }
class C{  private void checkReachability(IR ir){  if (!forward) {    if (DFSCounter != cfg.numberOfNodes()) {      VM.sysWrite(" *** Warning ***\n CFG for method " + ir.method.getName() + " in class "+ ir.method.getDeclaringClass()+ " has unreachable nodes.\n");      VM.sysWrite(" Assuming pessimistic results in dominators computation\n" + " for unreachable nodes.\n");    }  }}  }
class C{  protected Builder edge(final String group,final EDGE_DEF edgeDef){  elementDefs.addEdge(group,edgeDef);  return this;}  }
class C{  private StaticBody(final Map<BodyQName,String> attrMap,final String rawXML){  attrs=attrMap;  raw=rawXML;}  }
class C{  @Override public String toString(){  return "{" + getX() + ","+ getY()+ "}";}  }
class C{  @LargeTest public void testThumbnailForH264HD960() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H264_BP_960x720_25fps_800kbps_AACLC_48Khz_192Kbps_s_1_17.mp4";  final int outWidth=75;  final int outHeight=75;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  final long atTime=mediaVideoItem.getDuration() - 1000;  final Bitmap thumbNailBmp=mediaVideoItem.getThumbnail(outWidth,outHeight,atTime);  validateThumbnail(thumbNailBmp,outWidth,outHeight);}  }
class C{  public boolean isFloatStackEmpty(Interpreter interpreter){  return interpreter.floatStack().size() == 0;}  }
class C{  public JsonValue(List<JsonValue> array){  this.array=array;  value=null;  object=null;  isNull=(array == null);}  }
class C{  boolean goHome(){  if (false) {    try {      ActivityManagerNative.getDefault().stopAppSwitches();    } catch (    RemoteException e) {    }    sendCloseSystemWindows();    startDockOrHome();  } else {    try {      if (SystemProperties.getInt("persist.sys.uts-test-mode",0) == 1) {        Log.d(TAG,"UTS-TEST-MODE");      } else {        ActivityManagerNative.getDefault().stopAppSwitches();        sendCloseSystemWindows();        Intent dock=createHomeDockIntent();        if (dock != null) {          int result=ActivityManagerNative.getDefault().startActivityAsUser(null,null,dock,dock.resolveTypeIfNeeded(mContext.getContentResolver()),null,null,0,ActivityManager.START_FLAG_ONLY_IF_NEEDED,null,null,null,UserHandle.USER_CURRENT);          if (result == ActivityManager.START_RETURN_INTENT_TO_CALLER) {            return false;          }        }      }      int result=ActivityManagerNative.getDefault().startActivityAsUser(null,null,mHomeIntent,mHomeIntent.resolveTypeIfNeeded(mContext.getContentResolver()),null,null,0,ActivityManager.START_FLAG_ONLY_IF_NEEDED,null,null,null,UserHandle.USER_CURRENT);      if (result == ActivityManager.START_RETURN_INTENT_TO_CALLER) {        return false;      }    } catch (    RemoteException ex) {    }  }  return true;}  }
class C{  protected AbstractHashedMap(final int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  public void send(FIXMessage message) throws IOException {  txBodyBuffer.clear();  message.put(txBodyBuffer);  bodyLength.setInt(txBodyBuffer.position());  txHeaderBuffer.clear();  FIXTags.put(txHeaderBuffer,BeginString);  beginString.put(txHeaderBuffer);  FIXTags.put(txHeaderBuffer,BodyLength);  bodyLength.put(txHeaderBuffer);  checkSum.setCheckSum(FIXCheckSums.sum(txHeaderBuffer,0,txHeaderBuffer.position()) + FIXCheckSums.sum(txBodyBuffer,0,txBodyBuffer.position()));  FIXTags.put(txBodyBuffer,CheckSum);  checkSum.put(txBodyBuffer);  txHeaderBuffer.flip();  txBodyBuffer.flip();  int remaining=txHeaderBuffer.remaining() + txBodyBuffer.remaining();  do {    remaining-=channel.write(txBuffers);  } while (remaining > 0);  txMsgSeqNum++;  lastTxMillis=currentTimeMillis;}  }
class C{  @Override public int compareTo(Size other){  int aPixels=this.height * this.width;  int bPixels=other.height * other.width;  if (bPixels < aPixels) {    return 1;  }  if (bPixels > aPixels) {    return -1;  }  return 0;}  }
class C{  public void removeConnection(String host,Integer port) throws ConnectionManagerException {  connectionLock.lock();  try {    String hostAndPort=ConnectionManager.generateConnectionCacheKey(host,port);    internalRemoveConnection(hostAndPort);  }  finally {    connectionLock.unlock();  }}  }
class C{  public void testAbnormalForkJoin(){  testAbnormalForkJoin(mainPool());}  }
class C{  public boolean matches(String id){  return id != null && mPattern.matcher(id).matches();}  }
class C{  public void testPutInt16(){  byte[] expectedResult={6,0,0,1,1,0,2,0,3,0};  MySQLPacket array=new MySQLPacket(16,(byte)1);  ByteArrayOutputStream output=new ByteArrayOutputStream();  try {    array.putInt16(1);    array.putInt16(2);    array.putInt16(3);    array.write(output);    compareBytes(expectedResult,output.toByteArray());  } catch (  IOException e) {    fail("This should not happen!");  }}  }
class C{  public RevisionAPIConfiguration(DatabaseConfiguration existingWikiConfig){  super();  characterSet="UTF-8";  maxAllowedPacket=1024 * 1023;  bufferSize=10000;  chronoStorageSpace=100 * 1024 * 1024;  outputType=OutputTypes.DATABASE;  setHost(existingWikiConfig.getHost());  setDatabase(existingWikiConfig.getDatabase());  setUser(existingWikiConfig.getUser());  setPassword(existingWikiConfig.getPassword());  setLanguage(existingWikiConfig.getLanguage());}  }
class C{  public static float normalizeAngle(float angle,PLRange range){  return normalizeAngle(angle,range.min,range.max);}  }
class C{  public static <K,V>SortedMap<K,V> synchronizedSortedMap(SortedMap<K,V> map){  if (map == null) {    throw new NullPointerException("map == null");  }  return new SynchronizedSortedMap<K,V>(map);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public synchronized int search(Object o){  final Object[] dumpArray=elementData;  final int size=elementCount;  if (o != null) {    for (int i=size - 1; i >= 0; i--) {      if (o.equals(dumpArray[i])) {        return size - i;      }    }  } else {    for (int i=size - 1; i >= 0; i--) {      if (dumpArray[i] == null) {        return size - i;      }    }  }  return -1;}  }
class C{  public String sqlAdmin_connectSchema(int step,String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlAdmin_connectSchema(step,catalogName,schemaName);}  }
class C{  public String greetServer(String input) throws IllegalArgumentException {  return "";}  }
class C{  public static void loadWindowProperties(Window window){  onLoadPosition(window);}  }
class C{  public boolean tic(){  if (lifeExists()) {    if (false) {      assertQueueCorrect();    }    Position p=moveQueue.remove();    if (p.equals(sentinel)) {      moveQueue.add(sentinel);      return true;    }    Action action=requestAction(p.x,p.y);    handleAction(p.x,p.y,action);    return false;  }  return true;}  }
class C{  @Override public boolean intersects(float x,float y){  if (!this.isCrossesDateline()) {    return super.intersects(x,y);  }  return ((x >= this.minx && x <= 180f) || (x >= -180f && x <= this.maxx)) && y >= this.miny && y <= this.maxy;}  }
class C{  public Photo(File d,File f) throws IOException, NumberFormatException {  ExtendedExifInterface exif=new ExtendedExifInterface(f.toString());  String lonStr=exif.getAttribute(ExifInterface.TAG_GPS_LONGITUDE);  if (lonStr == null) {    throw new IOException("No EXIF tag");  }  float lonf=convertToDegree(lonStr);  String lonRef=exif.getAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF);  if (lonRef != null && !lonRef.equals("E")) {    lonf=-lonf;  }  float latf=convertToDegree(exif.getAttribute(ExifInterface.TAG_GPS_LATITUDE));  String latRef=exif.getAttribute(ExifInterface.TAG_GPS_LATITUDE_REF);  if (latRef != null && !latRef.equals("N")) {    latf=-latf;  }  lat=(int)(latf * 1E7d);  lon=(int)(lonf * 1E7d);  Log.d("Photo","lat: " + lat + " lon: "+ lon);  ref=d.getAbsolutePath() + "/" + f.getName();  String dir=exif.getAttribute(ExtendedExifInterface.TAG_GPS_IMG_DIRECTION);  if (dir != null) {    direction=(int)Double.parseDouble(dir);    directionRef=exif.getAttribute(ExtendedExifInterface.TAG_GPS_IMG_DIRECTION_REF);    Log.d("Photo","dir " + dir + " direction "+ direction+ " ref "+ directionRef);  }}  }
class C{  protected Object _readValue(DeserializationConfig cfg,JsonParser jp,JavaType valueType) throws IOException, JsonParseException, JsonMappingException {  Object result;  JsonToken t=_initForReading(jp);  if (t == JsonToken.VALUE_NULL) {    result=_findRootDeserializer(cfg,valueType).getNullValue();  } else   if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {    result=null;  } else {    DeserializationContext ctxt=_createDeserializationContext(jp,cfg);    JsonDeserializer<Object> deser=_findRootDeserializer(cfg,valueType);    if (cfg.isEnabled(DeserializationConfig.Feature.UNWRAP_ROOT_VALUE)) {      result=_unwrapAndDeserialize(jp,valueType,ctxt,deser);    } else {      result=deser.deserialize(jp,ctxt);    }  }  jp.clearCurrentToken();  return result;}  }
class C{  private void removeEntries(){  for (int i=0; i < capacity; i++) {    if (table[i] != null) {      table[i].clear();    }  }}  }
class C{  public DefaultResourceLoader(){  this.classLoader=ClassUtils.getDefaultClassLoader();}  }
class C{  public void release(){  int[] stamp=new int[1];  while (true) {    boolean undeployed=usage.get(stamp);    int r=stamp[0];    assert r > 0 : "Invalid usages count: " + r;    if (usage.compareAndSet(undeployed,undeployed,r,r - 1))     return;  }}  }
class C{  public ParameterDatabase(File file) throws FileNotFoundException, IOException {  this();  label="File: " + file.getPath();  directory=new File(file.getParent());  FileInputStream f=new FileInputStream(file);  load(f);  try {    f.close();  } catch (  IOException e) {  }  for (int x=0; ; x++) {    String s=getProperty("parent." + x);    if (s == null)     return;    if (new File(s).isAbsolute())     parents.addElement(new ParameterDatabase(new File(s))); else     if (s.startsWith(C_CLASS)) {      int i=indexOfFirstWhitespace(s);      if (i == -1)       throw new FileNotFoundException("Could not parse file into filename and classname:\n\tparent." + x + " = "+ s);      String classname=s.substring(C_CLASS.length(),i);      String fname=s.substring(i).trim();      try {        parents.addElement(new ParameterDatabase(fname,Class.forName(classname,true,Thread.currentThread().getContextClassLoader())));      } catch (      ClassNotFoundException ex) {        throw new FileNotFoundException("Could not parse file into filename and classname:\n\tparent." + x + " = "+ s);      }    } else     parents.addElement(new ParameterDatabase(new File(file.getParent(),s)));  }}  }
class C{  private void interpreterNewLine(final boolean additionalInput){  final int position=getInputPane().getCaretPosition();  int currentPosition;  if (position == 0) {    currentPosition=0;  } else {    getDocument().insertChar(position,"\n");    currentPosition=position + 1;  }  m_CurrentPrompt=additionalInput ? "... " : ">>> ";  getDocument().insertPrompt(currentPosition,m_CurrentPrompt);  getInputPane().setCaretPosition(currentPosition + m_CurrentPrompt.length());}  }
class C{  protected boolean inThreadGroup(ThreadGroup g){  if (currentAppletClassLoader() == null)   return false; else   return getThreadGroup().parentOf(g);}  }
class C{  public void testDynLongSortMissingFirst() throws Exception {  checkSortMissingFirst("dyn_longdv_missingfirst","-1","4");}  }
class C{  public List<DeviceDB> queryDeep(String where,String... selectionArg){  Cursor cursor=db.rawQuery(getSelectDeep() + where,selectionArg);  return loadDeepAllAndCloseCursor(cursor);}  }
class C{  public boolean match(Element e,String pseudoE){  return getLocalName().equalsIgnoreCase(pseudoE);}  }
class C{  private static int lf_R(int x,int s){  return (x >>> s);}  }
class C{  void removeItem(final RoundedToolItem roundedToolItem){  checkWidget();  items.remove(roundedToolItem);}  }
class C{  public void dismissComplete(){  if (isShowing()) {    mShowing=false;    try {      mWindowManager.removeViewImmediate(mPopupView);    }  finally {    }  }}  }
class C{  @Override protected void initData(){}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public CubicSplineInterpolator(Date[] dates,double[] values){  this.x=new double[dates.length];  for (int i=0; i < dates.length; i++) {    this.x[i]=Util.getTimestamp(dates[i]);  }  this.y=values;  validate();  spline();}  }
class C{  public void update(long n){  uncounted.add(n);}  }
class C{  public boolean skipPreamble(){  System.arraycopy(boundary,2,boundary,0,boundary.length - 2);  boundaryLength=boundary.length - 2;  try {    discardBodyData();    return readBoundary();  } catch (  MalformedStreamException e) {    return false;  } finally {    System.arraycopy(boundary,0,boundary,2,boundary.length - 2);    boundaryLength=boundary.length;    boundary[0]=CR;    boundary[1]=LF;  }}  }
class C{  public void updatePreviousRunErrorLog(final String previousRunErrorLog){  this.previousRunErrorLog=previousRunErrorLog;}  }
class C{  public void initFetch() throws IOException, QueryException {  if (isBinaryEncoded) {    rowPacket=new BinaryRowPacket(columnsInformation,columnInformationLength);  } else {    rowPacket=new TextRowPacket(columnInformationLength);  }  if (fetchSize == 0 || resultSetScrollType != TYPE_FORWARD_ONLY) {    fetchAllResults();    streaming=false;  } else {    protocol.setActiveStreamingResult(this);    nextStreamingValue();    streaming=true;  }}  }
class C{  @Deprecated public SelectionInputDialog(String key,T[] selectionValues,T initialSelectionValue){  this(ApplicationFrame.getApplicationFrame(),key,selectionValues,initialSelectionValue);}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  public static void joinNodeGroup(ServiceHost host,String peerHost){  joinNodeGroup(host,peerHost,host.getPort());}  }
class C{  @Override public final boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof HttpRoute))   return false;  HttpRoute that=(HttpRoute)o;  boolean equal=this.targetHost.equals(that.targetHost);  equal&=(this.localAddress == that.localAddress) || ((this.localAddress != null) && this.localAddress.equals(that.localAddress));  equal&=(this.proxyChain == that.proxyChain) || ((this.proxyChain != null) && (that.proxyChain != null) && (this.proxyChain.length == that.proxyChain.length));  equal&=(this.secure == that.secure) && (this.tunnelled == that.tunnelled) && (this.layered == that.layered);  if (equal && (this.proxyChain != null)) {    for (int i=0; equal && (i < this.proxyChain.length); i++)     equal=this.proxyChain[i].equals(that.proxyChain[i]);  }  return equal;}  }
class C{  public ExecuteRequest(final int objectId,final int objectInstanceId,final int resourceId){  this(new LwM2mPath(objectId,objectInstanceId,resourceId),null);}  }
class C{  public void checkCast(final Type type){  if (!type.equals(OBJECT_TYPE)) {    typeInsn(Opcodes.CHECKCAST,type);  }}  }
class C{  @Override public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(this.toString(this.getClass()));  buffer.append("[UseDefault=");  buffer.append(this.isUseDefault());  buffer.append(", UseLocaleFormat=");  buffer.append(this.useLocaleFormat);  if (this.pattern != null) {    buffer.append(", Pattern=");    buffer.append(this.pattern);  }  if (this.locale != null) {    buffer.append(", Locale=");    buffer.append(this.locale);  }  buffer.append(']');  return buffer.toString();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @DoNotStrip boolean hasNext(){  if (mIterator.hasNext()) {    Map.Entry entry=mIterator.next();    mKey=entry.getKey();    mValue=entry.getValue();    return true;  } else {    mKey=null;    mValue=null;    return false;  }}  }
class C{  @Override public NativeGoogleMapFragment build(){  if (options == null) {    options=new AirGoogleMapOptions(new GoogleMapOptions());  }  return NativeGoogleMapFragment.newInstance(options);}  }
class C{  public static boolean shouldDisplayWarning(BugInstance bugInstance,ProjectFilterSettings filterSettings){  return filterSettings.displayWarning(bugInstance);}  }
class C{  public static <K>PriorityQueue<K> synchronize(final PriorityQueue<K> q){  return new SynchronizedPriorityQueue<K>(q);}  }
class C{  public static String toString(long[] a){  if (a == null)   return "null";  int iMax=a.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(a[i]);    if (i == iMax)     return b.append(']').toString();    b.append(", ");  }}  }
class C{  public static PGPPublicKey lookupPublicKey(PGPPublicKeyRingCollection keyring,String query,KeyRequirement want){  try {    @SuppressWarnings("unchecked") Iterator<PGPPublicKeyRing> results=keyring.getKeyRings(checkNotNull(query,"query"),true,true);    verify(results.hasNext(),"No public key found matching substring: %s",query);    while (results.hasNext()) {      Optional<PGPPublicKey> result=lookupPublicSubkey(results.next(),want);      if (result.isPresent()) {        return result.get();      }    }    throw new VerifyException(String.format("No public key (%s) found matching substring: %s",want,query));  } catch (  PGPException e) {    throw new VerifyException(String.format("Public key lookup with query %s failed: %s",query,e.getMessage()));  }}  }
class C{  public boolean addBidirectedEdge(Node node1,Node node2){  return addEdge(Edges.bidirectedEdge(node1,node2));}  }
class C{  private int writeElement(Geometry geom,int dim,int offset,List elemTriplets,List ordGeoms){  int interp;  int geomType=OraGeom.geomType(geom);switch (geomType) {case OraGeom.GEOM_TYPE.POINT:    Point point=(Point)geom;  elemTriplets.add(triplet(offset,OraGeom.ETYPE.POINT,OraGeom.INTERP.POINT));ordGeoms.add(point);return offset + dim;case OraGeom.GEOM_TYPE.MULTIPOINT:MultiPoint points=(MultiPoint)geom;int nPts=points.getNumGeometries();elemTriplets.add(triplet(offset,OraGeom.ETYPE.POINT,nPts));ordGeoms.add(points);return offset + dim * nPts;case OraGeom.GEOM_TYPE.LINE:LineString line=(LineString)geom;elemTriplets.add(triplet(offset,OraGeom.ETYPE.LINE,OraGeom.INTERP.LINESTRING));ordGeoms.add(line);return offset + dim * line.getNumPoints();case OraGeom.GEOM_TYPE.MULTILINE:MultiLineString lines=(MultiLineString)geom;for (int i=0; i < lines.getNumGeometries(); i++) {LineString lineElem=(LineString)lines.getGeometryN(i);offset=writeElement(lineElem,dim,offset,elemTriplets,ordGeoms);}return offset;case OraGeom.GEOM_TYPE.POLYGON:Polygon polygon=(Polygon)geom;LineString ring=polygon.getExteriorRing();interp=isWriteAsRectangle(polygon) ? OraGeom.INTERP.RECTANGLE : OraGeom.INTERP.POLYGON;elemTriplets.add(triplet(offset,OraGeom.ETYPE.POLYGON_EXTERIOR,interp));ordGeoms.add(ring);if (interp == OraGeom.INTERP.RECTANGLE) {offset+=4;} else {offset+=dim * ring.getNumPoints();}int holes=polygon.getNumInteriorRing();for (int i=0; i < holes; i++) {ring=polygon.getInteriorRingN(i);elemTriplets.add(triplet(offset,OraGeom.ETYPE.POLYGON_INTERIOR,OraGeom.INTERP.POLYGON));ordGeoms.add(ring);offset+=dim * ring.getNumPoints();}return offset;case OraGeom.GEOM_TYPE.MULTIPOLYGON:MultiPolygon polys=(MultiPolygon)geom;Polygon poly;for (int i=0; i < polys.getNumGeometries(); i++) {poly=(Polygon)polys.getGeometryN(i);offset=writeElement(poly,dim,offset,elemTriplets,ordGeoms);}return offset;case OraGeom.GEOM_TYPE.COLLECTION:GeometryCollection geoms=(GeometryCollection)geom;for (int i=0; i < geoms.getNumGeometries(); i++) {geom=geoms.getGeometryN(i);offset=writeElement(geom,dim,offset,elemTriplets,ordGeoms);}return offset;}throw new IllegalArgumentException("Cannot encode JTS " + geom.getGeometryType() + " as SDO_ELEM_INFO "+ "(Limited to Point, Line, Polygon, GeometryCollection, MultiPoint,"+ " MultiLineString and MultiPolygon)");}  }
class C{  public SmbFile(SmbFile context,String name,int shareAccess) throws MalformedURLException, UnknownHostException {  this(context.isWorkgroup0() ? new URL(null,"smb://" + name,Handler.SMB_HANDLER) : new URL(context.url,name,Handler.SMB_HANDLER),context.auth);  if ((shareAccess & ~(FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE)) != 0) {    throw new RuntimeException("Illegal shareAccess parameter");  }  this.shareAccess=shareAccess;}  }
class C{  public TopDialog(Context context){  super(context);  this.context=context;}  }
class C{  @Override public void acceptTestSet(TestSetEvent e){  DataSetEvent de=new DataSetEvent(e.getSource(),e.getTestSet());  acceptDataSet(de);}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof Video) {    Video other=(Video)obj;    return Objects.equal(name,other.name) && Objects.equal(url,other.url) && duration == other.duration;  } else {    return false;  }}  }
class C{  @Thunk Bitmap readFromDb(WidgetCacheKey key,Bitmap recycle,PreviewLoadTask loadTask){  Cursor cursor=null;  try {    cursor=mDb.query(new String[]{CacheDb.COLUMN_PREVIEW_BITMAP},CacheDb.COLUMN_COMPONENT + " = ? AND " + CacheDb.COLUMN_USER+ " = ? AND "+ CacheDb.COLUMN_SIZE+ " = ?",new String[]{key.componentName.flattenToString(),Long.toString(mUserManager.getSerialNumberForUser(key.user)),key.size});    if (loadTask.isCancelled()) {      return null;    }    if (cursor.moveToNext()) {      byte[] blob=cursor.getBlob(0);      BitmapFactory.Options opts=new BitmapFactory.Options();      opts.inBitmap=recycle;      try {        if (!loadTask.isCancelled()) {          return BitmapFactory.decodeByteArray(blob,0,blob.length,opts);        }      } catch (      Exception e) {        return null;      }    }  } catch (  SQLException e) {    Log.w(TAG,"Error loading preview from DB",e);  } finally {    if (cursor != null) {      cursor.close();    }  }  return null;}  }
class C{  public ProjectContext importProject(String absolutePath) throws ProjectAlreadyImportedException, ProjectOpenException {  for (  ProjectRef ref : registry.getProjects()) {    if (ref.getPath().equals(absolutePath)) {      throw new ProjectAlreadyImportedException("Project " + absolutePath + " is already imported");    }  }  ProjectRef ref=new ProjectRef();  ref.setPath(absolutePath);  try {    ProjectContext context=loadProject(ref);    ref.setName(context.name);    registry.getProjects().add(ref);    kryoManager.saveRegistry(registry);    return context;  } catch (  Exception e) {    throw new ProjectOpenException(e.getMessage());  }}  }
class C{  public void store(Address value){}  }
class C{  @Override public void send(final Message message) throws JMSException {  session.lock();  try {    if (ActiveMQRAMessageProducer.trace) {      ActiveMQRALogger.LOGGER.trace("send " + this + " message="+ message);    }    checkState();    producer.send(message);    if (ActiveMQRAMessageProducer.trace) {      ActiveMQRALogger.LOGGER.trace("sent " + this + " result="+ message);    }  }  finally {    session.unlock();  }}  }
class C{  private boolean swapWithPrevious(Featurizable<IString,String> f){  if (f.prior == null)   return false;  HierBlock phb=(HierBlock)f.prior.getState(this);  return f.prior != null && phb.cs.isContiguous() && (phb.fStart() == fEnd(f) + 1);}  }
class C{  public static void removeMapping(TransitSchedule schedule){  log.info("... Removing reference links and link sequences from schedule");  for (  TransitStopFacility stopFacility : schedule.getFacilities().values()) {    stopFacility.setLinkId(null);  }  for (  TransitLine line : schedule.getTransitLines().values()) {    for (    TransitRoute route : line.getRoutes().values()) {      route.setRoute(null);    }  }}  }
class C{  public MetadataListMethods(){  requestFileName="getstate.query";  responseFile="getstate.answer";}  }
class C{  public final boolean humansTurn(boolean whiteMove){  return whiteMove ? playerWhite() : playerBlack();}  }
class C{  public void schedule(TimerTask task,Date when,long period){  if (period <= 0 || when.getTime() < 0) {    throw new IllegalArgumentException();  }  long delay=when.getTime() - System.currentTimeMillis();  scheduleImpl(task,delay < 0 ? 0 : delay,period,false);}  }
class C{  private static void delete(String path){  File file=new File(path);  file.delete();}  }
class C{  @Override public void insertString(final int offs,final String str,final AttributeSet attr){  if (offs < 0) {    return;  }  if (str.length() > 1) {    int i;    for (i=0; i < str.length(); i++) {      if (str.charAt(i) == '\n') {        remainingTextString=str.substring(i + 1);        remainingTextAttr=attr;        inputKeyListener.keyPressed(new KeyEvent(new Container(),KeyEvent.KEY_PRESSED,0,0,KeyEvent.VK_ENTER,'\n'));        break;      } else {        insertChar(offs + i,"" + str.charAt(i));      }    }  } else   if (str.length() == 1) {    insertChar(offs,str);  }}  }
class C{  protected Object execute(){  init();  if (!checkifEnabledRemotes()) {    return null;  }  if (id == null) {    Ansi buffer=Ansi.ansi();    buffer.fg(RED);    buffer.a("No ID has been defined. It should be a runner or project ID");    buffer.reset();    System.out.println(buffer.toString());    return null;  }  if (id.startsWith("r")) {    stopRunnerProcess();  } else   if (id.startsWith("p")) {    stopProjectProcesses();  } else {    Ansi buffer=Ansi.ansi();    buffer.fg(RED);    buffer.a("Invalid identifier");    buffer.fg(Ansi.Color.DEFAULT);    System.out.println(buffer.toString());  }  return null;}  }
class C{  public void test_getName(){  try {    MockAttributedCharacterIteratorAttribute mac1=new MockAttributedCharacterIteratorAttribute("test1");    assertEquals("Incorrect attribute name","test1",mac1.getName());  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  public StandardDialScale(double lowerBound,double upperBound,double startAngle,double extent,double majorTickIncrement,int minorTickCount){  if (majorTickIncrement <= 0.0) {    throw new IllegalArgumentException("Requires 'majorTickIncrement' > 0.");  }  this.startAngle=startAngle;  this.extent=extent;  this.lowerBound=lowerBound;  this.upperBound=upperBound;  this.tickRadius=0.70;  this.tickLabelsVisible=true;  this.tickLabelFormatter=new DecimalFormat("0.0");  this.firstTickLabelVisible=true;  this.tickLabelFont=new Font("Dialog",Font.BOLD,16);  this.tickLabelPaint=Color.blue;  this.tickLabelOffset=0.10;  this.majorTickIncrement=majorTickIncrement;  this.majorTickLength=0.04;  this.majorTickPaint=Color.black;  this.majorTickStroke=new BasicStroke(3.0f);  this.minorTickCount=minorTickCount;  this.minorTickLength=0.02;  this.minorTickPaint=Color.black;  this.minorTickStroke=new BasicStroke(1.0f);}  }
class C{  public TestProperties(Context context){  this.context=context;  InputStream stream=null;  try {    String filename="test.properties";    stream=getPropertyFileAsStream(filename);    if (stream != null) {      Log.i("TestProperties","Loading properties from: '" + filename + "'");      properties.load(stream);    }  } catch (  Exception e) {    Log.e("TestProperties","caught exception:",e);  } finally {    if (stream != null) {      try {        stream.close();      } catch (      IOException e) {        Log.e("TestProperties","caught exception:",e);      }    }  }}  }
class C{  private Service addVersionInformation(Service service){  ClientVersionHandler versionHandler=new ClientVersionHandler(CTMGApiVersion.version);  return versionHandler.addVersionInformationToClient(service);}  }
class C{  @Override public String toString(){  return "[" + this.getClass().getName() + " name="+ _name+ "]";}  }
class C{  public boolean normalize(){  ArrayList<S2CellId> output=new ArrayList<S2CellId>(cellIds.size());  output.ensureCapacity(cellIds.size());  Collections.sort(cellIds);  for (  S2CellId id : this) {    int size=output.size();    if (!output.isEmpty() && output.get(size - 1).contains(id)) {      continue;    }    while (!output.isEmpty() && id.contains(output.get(output.size() - 1))) {      output.remove(output.size() - 1);    }    while (output.size() >= 3) {      size=output.size();      if ((output.get(size - 3).id() ^ output.get(size - 2).id() ^ output.get(size - 1).id()) != id.id()) {        break;      }      long mask=id.lowestOnBit() << 1;      mask=~(mask + (mask << 1));      long idMasked=(id.id() & mask);      if ((output.get(size - 3).id() & mask) != idMasked || (output.get(size - 2).id() & mask) != idMasked || (output.get(size - 1).id() & mask) != idMasked || id.isFace()) {        break;      }      output.remove(size - 1);      output.remove(size - 2);      output.remove(size - 3);      id=id.parent();    }    output.add(id);  }  if (output.size() < size()) {    initRawSwap(output);    return true;  }  return false;}  }
class C{  protected void calcScore(){  if ((m_namespace == null) && (m_name == null))   m_score=SCORE_NODETEST; else   if (((m_namespace == WILD) || (m_namespace == null)) && (m_name == WILD))   m_score=SCORE_NODETEST; else   if ((m_namespace != WILD) && (m_name == WILD))   m_score=SCORE_NSWILD; else   m_score=SCORE_QNAME;  m_isTotallyWild=(m_namespace == null && m_name == WILD);}  }
class C{  public SafeCloseDatagramSocket() throws SocketException {  super();}  }
class C{  @SuppressWarnings("rawtypes") @Override public void createGroupSnapshots(StorageSystem storage,List<URI> snapshotList,Boolean createInactive,Boolean readOnly,TaskCompleter taskCompleter) throws DeviceControllerException {  try {    URI snapshot=snapshotList.get(0);    BlockSnapshot snapshotObj=_dbClient.queryObject(BlockSnapshot.class,snapshot);    Volume volume=_dbClient.queryObject(Volume.class,snapshotObj.getParent());    TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,volume.getTenant().getURI());    String tenantName=tenant.getLabel();    String snapLabelToUse=_nameGenerator.generate(tenantName,snapshotObj.getSnapsetLabel(),snapshot.toString(),'-',IBMSmisConstants.MAX_SNAPSHOT_NAME_LENGTH);    CIMObjectPath sgPath=_cimPath.getSnapshotGroupPath(storage,snapLabelToUse);    if (sgPath != null) {      _log.error("Failed to create group snapshots: " + IBMSmisConstants.DUPLICATED_SG_NAME_ERROR);      ServiceError error=DeviceControllerErrors.smis.methodFailed("createGroupSnapshots",IBMSmisConstants.DUPLICATED_SG_NAME_ERROR);      taskCompleter.error(_dbClient,error);      setInactive(snapshotList,true);      return;    }    String groupName=_helper.getConsistencyGroupName(snapshotObj,storage);    CIMObjectPath cgPath=_cimPath.getConsistencyGroupPath(storage,groupName);    CIMArgument[] inArgs=_helper.getCreateGroupReplicaInputArguments(storage,cgPath,createInactive,snapLabelToUse);    CIMArgument[] outArgs=new CIMArgument[5];    _helper.callReplicationSvc(storage,IBMSmisConstants.CREATE_GROUP_REPLICA,inArgs,outArgs);    _smisStorageDevicePostProcessor.processCGSnapshotCreation(storage,snapshotList,!createInactive,snapLabelToUse,(BlockSnapshotCreateCompleter)taskCompleter);  } catch (  Exception e) {    _log.info("Problem making SMI-S call: ",e);    ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());    taskCompleter.error(_dbClient,error);    setInactive(snapshotList,true);  }}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  void checkUpdated(int expected){  checkEventCount(expected,updatedListenerFiredCount);}  }
class C{  private void generateAndStoreDeviceID(Context context,int encryption){  if (store == null)   store=new StorageBase(context,encryption);  String privateDeviceID=store.get(DEVICE_PRIVATE_ID_KEY);  String publicDeviceID=store.get(DEVICE_PUBLIC_ID_KEY);  if (privateDeviceID == null || publicDeviceID == null) {    if (privateDeviceID != publicDeviceID) {      if (privateDeviceID == null) {        log.error("Only one of private and public ID are stored! Public is stored, private is null.");      } else {        log.error("Only one of private and public ID are stored! Private is stored, public is null.");      }    }    AsymmetricCipherKeyPair keypair=Crypto.generateUserID();    privateDeviceID=bytesToBase64(Crypto.generatePrivateID(keypair));    publicDeviceID=bytesToBase64(Crypto.generatePublicID(keypair));    store.put(DEVICE_PRIVATE_ID_KEY,privateDeviceID);    store.put(DEVICE_PUBLIC_ID_KEY,publicDeviceID);  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:25.950 -0500",hash_original_method="EA659D41568208E07CC0B460E13AE27A",hash_generated_method="B41A9B2B9E2A47ECAECB03E449C85FA4") public Media newMedia(String type,int port,int portCount,String protocol){  Media media=new Media(type,port,portCount,protocol);  mMedia.add(media);  return media;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws IOException {  TextComponentPeer peer=(TextComponentPeer)this.peer;  if (peer != null) {    text=peer.getText();    selectionStart=peer.getSelectionStart();    selectionEnd=peer.getSelectionEnd();  }  s.defaultWriteObject();  AWTEventMulticaster.save(s,textListenerK,textListener);  s.writeObject(null);}  }
class C{  public String percentTipText(){  return "Percentage of introduced noise to data.";}  }
class C{  private void wakeupSelector(){  Selector s=getSelector();  if (s != null && s.isOpen()) {    this.selector.wakeup();  }}  }
class C{  private td createSelectField(String m_columnName,option[] options){  select sel=new select(m_columnName,options);  sel.setID(m_columnName);  sel.setDisabled(false);  sel.setClass("Cmandatory");  return createTD(sel);}  }
class C{  @Override public void configure(){  MrcPacketizer packets=new MrcPacketizer();  packets.connectPort(this);  this.getSystemConnectionMemo().setMrcTrafficController(packets);  packets.setAdapterMemo(this.getSystemConnectionMemo());  packets.setCabNumber(Integer.parseInt(getOptionState("CabAddress")));  this.getSystemConnectionMemo().configureManagers();  packets.startThreads();}  }
class C{  public static Instances useFilter(Instances data,Filter filter) throws Exception {  for (int i=0; i < data.numInstances(); i++) {    filter.input(data.instance(i));  }  filter.batchFinished();  Instances newData=filter.getOutputFormat();  Instance processed;  while ((processed=filter.output()) != null) {    newData.add(processed);  }  return newData;}  }
class C{  public int lastIndexOf(final String str,int startIndex){  startIndex=(startIndex >= size ? size - 1 : startIndex);  if (str == null || startIndex < 0) {    return -1;  }  final int strLen=str.length();  if (strLen > 0 && strLen <= size) {    if (strLen == 1) {      return lastIndexOf(str.charAt(0),startIndex);    }    outer:     for (int i=startIndex - strLen + 1; i >= 0; i--) {      for (int j=0; j < strLen; j++) {        if (str.charAt(j) != buffer[i + j]) {          continue outer;        }      }      return i;    }  } else   if (strLen == 0) {    return startIndex;  }  return -1;}  }
class C{  private void pop(final String desc){  char c=desc.charAt(0);  if (c == '(') {    pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1);  } else   if (c == 'J' || c == 'D') {    pop(2);  } else {    pop(1);  }}  }
class C{  private JPanel createEditElementsPanel(){  final JPanel pEdits=new JPanel(new GridLayout(6,1,4,4));  pEdits.setBorder(new TitledBorder("General Settings"));  final JPanel idaLocationPanel=new JPanel(new BorderLayout());  idaLocationPanel.setBorder(new EmptyBorder(0,2,0,2));  final JLabel idaLabel=new JLabel("IDA Pro Installation Directory:");  idaLabel.setBorder(new EmptyBorder(0,0,0,10));  idaLocationPanel.add(idaLabel,BorderLayout.CENTER);  idaLocationPanel.add(CHintCreator.createHintPanel(idaDirectoryPanel,"The location of your IDA installation."),BorderLayout.EAST);  pEdits.add(idaLocationPanel);  final JPanel emailBoxPanel=new JPanel(new BorderLayout());  emailBoxPanel.setBorder(new EmptyBorder(0,2,2,2));  final JLabel emailLabel=new JLabel("Your email address" + ":");  emailBoxPanel.add(emailLabel,BorderLayout.CENTER);  emailBoxPanel.add(CHintCreator.createHintPanel(emailBox,"This email address is used to contact you after you have submitted bugs."),BorderLayout.EAST);  pEdits.add(emailBoxPanel,BorderLayout.CENTER);  emailBox.setText(ConfigManager.instance().getGeneralSettings().getSupportEmailAddress());  final JPanel scriptingPanel=new JPanel(new BorderLayout());  scriptingPanel.setBorder(new EmptyBorder(0,2,2,2));  final JLabel scriptingLabel=new JLabel("Default Scripting Language" + ":");  scriptingPanel.add(scriptingLabel,BorderLayout.CENTER);  scriptingPanel.add(CHintCreator.createHintPanel(scriptingBox,"Scripting language that is selected by default when opening scripting dialogs."),BorderLayout.EAST);  pEdits.add(scriptingPanel,BorderLayout.CENTER);  scriptingBox.setSelectedLanguage(ConfigManager.instance().getGeneralSettings().getDefaultScriptingLanguage());  final JPanel logLevelPanel=new JPanel(new BorderLayout());  logLevelPanel.setBorder(new EmptyBorder(0,2,2,2));  final JLabel logLevelLabel=new JLabel("Log Level" + ":");  logLevelPanel.add(logLevelLabel,BorderLayout.CENTER);  logLevelPanel.add(CHintCreator.createHintPanel(logLevelBox,"Determines what messages are logged to the log file."),BorderLayout.EAST);  pEdits.add(logLevelPanel,BorderLayout.CENTER);  logLevelBox.setSelectedIndex(ConfigManager.instance().getGeneralSettings().getLogLevel());  final JPanel logFilePanel=new JPanel(new BorderLayout());  logFilePanel.setBorder(new EmptyBorder(0,2,2,2));  final JLabel logFileLabel=new JLabel("Log File" + ":");  final JPanel fileLabel=new CLogFilePanel();  fileLabel.setPreferredSize(new Dimension(TEXTFIELD_WIDTH,TEXTFIELD_HEIGHT));  logFilePanel.add(logFileLabel,BorderLayout.CENTER);  logFilePanel.add(CHintCreator.createHintPanel(fileLabel,"Location of the BinNavi log file."),BorderLayout.EAST);  pEdits.add(logFilePanel,BorderLayout.CENTER);  return pEdits;}  }
class C{  public UserDeletionConstraintException(String message){  super(message);}  }
class C{  public void init() throws Exception {  loadParameterFromZK();  _invalidLoginCleanupExecutor.scheduleWithFixedDelay(new InvalidLoginCleaner(),CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS,CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS,TimeUnit.MINUTES);  _log.info("Max invalid login attempts from the same client IP: {}",_maxAuthnLoginAttemtsCount);  _log.info("Life time in minutes of invalid login records for a client IP: {}",_maxAuthnLoginAttemtsLifeTimeInMins);  _log.info("Cleanup thread schedule interval: {} minutes",CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS);}  }
class C{  private static String toHexString(byte[] bytes){  if (bytes == null)   return null; else {    StringBuilder hexStringBuilder=new StringBuilder(2 * bytes.length);    char[] hexes=new char[]{'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};    for (int i=0; i < bytes.length; i++) {      byte b=bytes[i];      hexStringBuilder.append(hexes[(b & 0xF0) >> 4]);      hexStringBuilder.append(hexes[b & 0x0F]);    }    return hexStringBuilder.toString();  }}  }
class C{  public boolean isStillBurning(){  if (turnsLeftToBurn > 0 || turnsIVLeftToBurn > 0) {    return true;  }  return false;}  }
class C{  @Ignore public void gatherStatistics(){  InstallationService installationService=webserviceClientReadOnly().getInstance(InstallationService.class);  CubeService occurrenceCubeService=webserviceClientReadOnly().getInstance(CubeService.class);  OrganizationService organizationService=webserviceClientReadOnly().getInstance(OrganizationService.class);  DatasetMetricsService datasetMetricsService=webserviceClientReadOnly().getInstance(DatasetMetricsService.class);  int installationCount=0;  int iptInstallationCount=0;  int iptDatasetCount=0;  int iptChecklistDatasetCount=0;  int iptOccurrenceDatasetCount=0;  int iptMetadataDatasetCount=0;  long totalOccurrenceRecords=0;  long totalNameUsages=0;  long totalOccurrenceRecordsFromChecklists=0;  Set<Country> countriesRepresented=Sets.newHashSet();  Set<UUID> checklistDatasetPublisherKeys=Sets.newHashSet();  Set<UUID> occurrenceDatasetPublisherKeys=Sets.newHashSet();  Set<UUID> metadataDatasetPublisherKeys=Sets.newHashSet();  PagingRequest installationPage=new PagingRequest(0,PAGING_LIMIT);  PagingResponse<Installation> installationsResults;  do {    installationsResults=installationService.list(installationPage);    for (    Installation installation : installationsResults.getResults()) {      installationCount++;      if (installation.getType().equals(InstallationType.IPT_INSTALLATION)) {        iptInstallationCount++;        Organization organization=organizationService.get(installation.getOrganizationKey());        countriesRepresented.add(organization.getCountry());        PagingRequest datasetPage=new PagingRequest(0,PAGING_LIMIT);        PagingResponse<Dataset> datasetsResults;        do {          datasetsResults=installationService.getHostedDatasets(installation.getKey(),datasetPage);          for (          Dataset dataset : datasetsResults.getResults()) {            iptDatasetCount++;            if (dataset.getType().equals(DatasetType.CHECKLIST)) {              iptChecklistDatasetCount++;              checklistDatasetPublisherKeys.add(dataset.getPublishingOrganizationKey());              DatasetMetrics metrics=datasetMetricsService.get(dataset.getKey());              if (metrics != null) {                long numNameUsages=metrics.getUsagesCount();                totalNameUsages=totalNameUsages + numNameUsages;              }              long numOccurrencesForChecklist=occurrenceCubeService.get(new ReadBuilder().at(OccurrenceCube.DATASET_KEY,dataset.getKey()));              if (numOccurrencesForChecklist > 0 && !dataset.getInstallationKey().equals(UUID.fromString("9afa1395-6e93-4848-a42d-bce896f5195e"))) {                totalOccurrenceRecordsFromChecklists=totalOccurrenceRecordsFromChecklists + numOccurrencesForChecklist;              }            } else             if (dataset.getType().equals(DatasetType.OCCURRENCE)) {              iptOccurrenceDatasetCount++;              occurrenceDatasetPublisherKeys.add(dataset.getPublishingOrganizationKey());              long numOccurrences=occurrenceCubeService.get(new ReadBuilder().at(OccurrenceCube.DATASET_KEY,dataset.getKey()));              totalOccurrenceRecords=totalOccurrenceRecords + numOccurrences;            } else {              iptMetadataDatasetCount++;              metadataDatasetPublisherKeys.add(dataset.getPublishingOrganizationKey());            }          }          datasetPage.nextPage();        } while (!datasetsResults.isEndOfRecords());      }    }    installationPage.nextPage();  } while (!installationsResults.isEndOfRecords());  LOG.info(iptInstallationCount + " out of " + installationCount+ " installations are IPTs");  LOG.info(iptInstallationCount + " IPTs hosted in " + countriesRepresented.size()+ " countries serve "+ iptDatasetCount+ " datasets");  LOG.info(iptChecklistDatasetCount + " checklist datasets published by " + checklistDatasetPublisherKeys.size()+ " publishers totalling "+ totalNameUsages+ " usages and "+ totalOccurrenceRecordsFromChecklists+ " occurrence records");  LOG.info(iptOccurrenceDatasetCount + " occurrence datasets published by " + occurrenceDatasetPublisherKeys.size()+ " publishers totalling "+ totalOccurrenceRecords+ " occurrence records");  LOG.info(iptMetadataDatasetCount + " metadata-only datasets published by " + metadataDatasetPublisherKeys.size()+ " publishers");}  }
class C{  public Collection<Object> values(){  ArrayList<Object> answer=new ArrayList<Object>(readMethods.size());  for (Iterator<Object> iter=valueIterator(); iter.hasNext(); ) {    answer.add(iter.next());  }  return Collections.unmodifiableList(answer);}  }
class C{  private int scanAnnotation(int offset,boolean expectRuntimeVisibleAnno,boolean toplevel){  int currentOffset=offset;  int utf8Offset=this.constantPoolOffsets[u2At(offset)] - this.structOffset;  char[] typeName=utf8At(utf8Offset + 3,u2At(utf8Offset + 1));  if (toplevel)   this.typename=typeName;  int numberOfPairs=u2At(offset + 2);  currentOffset+=4;  if (expectRuntimeVisibleAnno && toplevel) {switch (typeName.length) {case 22:      if (CharOperation.equals(typeName,ConstantPool.JAVA_LANG_DEPRECATED)) {        this.standardAnnotationTagBits|=TagBits.AnnotationDeprecated;        return currentOffset;      }    break;case 23:  if (CharOperation.equals(typeName,ConstantPool.JAVA_LANG_SAFEVARARGS)) {    this.standardAnnotationTagBits|=TagBits.AnnotationSafeVarargs;    return currentOffset;  }break;case 29:if (CharOperation.equals(typeName,ConstantPool.JAVA_LANG_ANNOTATION_TARGET)) {currentOffset+=2;return readTargetValue(currentOffset);}break;case 32:if (CharOperation.equals(typeName,ConstantPool.JAVA_LANG_ANNOTATION_RETENTION)) {currentOffset+=2;return readRetentionPolicy(currentOffset);}if (CharOperation.equals(typeName,ConstantPool.JAVA_LANG_ANNOTATION_INHERITED)) {this.standardAnnotationTagBits|=TagBits.AnnotationInherited;return currentOffset;}break;case 33:if (CharOperation.equals(typeName,ConstantPool.JAVA_LANG_ANNOTATION_DOCUMENTED)) {this.standardAnnotationTagBits|=TagBits.AnnotationDocumented;return currentOffset;}break;case 52:if (CharOperation.equals(typeName,ConstantPool.JAVA_LANG_INVOKE_METHODHANDLE_POLYMORPHICSIGNATURE)) {this.standardAnnotationTagBits|=TagBits.AnnotationPolymorphicSignature;return currentOffset;}break;}}for (int i=0; i < numberOfPairs; i++) {currentOffset+=2;currentOffset=scanElementValue(currentOffset);}return currentOffset;}  }
class C{  public void addObject(String namespace,String name,Class clazz,PluggableObjectType type){  addObject(namespace,name,clazz,type,null);}  }
class C{  private void refreshUnitNum(Iterator<Entity> others){  Entity entity=entities.get(0);  choUnitNum.removeAllItems();  entityUnitNum.clear();  choUnitNum.addItem(Messages.getString("CustomMechDialog.doNotSwapUnits"));  entityUnitNum.add(entity);  while (others.hasNext()) {    final Entity other=others.next();    entityUnitNum.add(other);    StringBuffer callsign=new StringBuffer(other.getDisplayName());    callsign.append(" (").append((other.getUnitNumber() + PreferenceManager.getClientPreferences().getUnitStartChar())).append('-').append(other.getId()).append(')');    choUnitNum.addItem(callsign.toString());  }  choUnitNum.setSelectedIndex(0);}  }
class C{  public boolean onOptionsItemSelected(MenuItem item){  return false;}  }
class C{  public SimpleTimeLimiter(ExecutorService executor){  this.executor=checkNotNull(executor);}  }
class C{  public void startDocument() throws org.xml.sax.SAXException {  startDocumentInternal();  m_needToCallStartDocument=false;  return;}  }
class C{  public int compareTo(Object object){  AssociationSessionType that=(AssociationSessionType)object;  if (this._order == that._order)   return 0; else   return this._order > that._order ? 1 : -1;}  }
class C{  private View fillFromTop(int nextTop){  mFirstPosition=Math.min(mFirstPosition,mSelectedPosition);  mFirstPosition=Math.min(mFirstPosition,mItemCount - 1);  if (mFirstPosition < 0) {    mFirstPosition=0;  }  return fillDown(mFirstPosition,nextTop);}  }
class C{  public static Ed25519EncodedFieldElement reduceModGroupOrder(final Ed25519EncodedFieldElement encoded){  final BigInteger b=toBigInteger(encoded).mod(Ed25519Group.GROUP_ORDER);  return toEncodedFieldElement(b);}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.MANDATORY) public long loadPriceModelKeyForSubscriptionHistory(SubscriptionHistory subscriptionHistory) throws BillingRunFailed {  Product productTemplate=new Product();  productTemplate.setKey(subscriptionHistory.getProductObjKey());  List<DomainHistoryObject<?>> productHistories=dm.findHistory(productTemplate);  int size=productHistories.size();  if (size == 0) {    throwBillingRunFailed("History data is missing for product with key '" + subscriptionHistory.getProductObjKey() + "'.",LogMessageIdentifier.ERROR_MISSING_HISTORYDATA_FOR_PRODUCT,String.valueOf(subscriptionHistory.getProductObjKey()));  }  ProductHistory productHistory=(ProductHistory)productHistories.get(size - 1);  return productHistory.getPriceModelObjKey().longValue();}  }
class C{  public static void updateMediaDB_Androd44(Context context,String[] pathNames){  if (Global.debugEnabled) {    Log.i(Global.LOG_CONTEXT,CONTEXT + "updateMediaDB_Androd44(" + pathNames.length+ " files "+ pathNames[0]+ "...");  }  MediaScannerConnection.scanFile(context.getApplicationContext(),pathNames,null,null);}  }
class C{  private void createPartitionRegion(List vmList,int startIndexForRegion,int endIndexForRegion,int localMaxMemory,int redundancy,String prPrefix) throws Exception {  int AsyncInvocationArrSize=4;  AsyncInvocation[] async=new AsyncInvocation[AsyncInvocationArrSize];  int numNodes=0;  Iterator nodeIterator=vmList.iterator();  while (nodeIterator.hasNext()) {    VM vm=(VM)nodeIterator.next();    async[numNodes]=vm.invokeAsync(createMultiplePartitionRegion(prPrefix,startIndexForRegion,endIndexForRegion,redundancy,localMaxMemory));    numNodes++;  }  for (int i=0; i < numNodes; i++) {    ThreadUtils.join(async[i],30 * 1000);  }  for (int i=0; i < numNodes; i++) {    if (async[i].exceptionOccurred()) {      Assert.fail("VM " + i + " encountered this exception during async invocation",async[i].getException());    }  }}  }
class C{  public Action directResponse(final RequestHeader request,final MutableResponseHeader response){  return Action.STREAM;}  }
class C{  @Override public long length() throws SQLException {  try {    debugCodeCall("length");    checkClosed();    if (value.getType() == Value.BLOB) {      long precision=value.getPrecision();      if (precision > 0) {        return precision;      }    }    return IOUtils.copyAndCloseInput(value.getInputStream(),null);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  static void putTarget(int typeRef,TypePath typePath,ByteVector out){switch (typeRef >>> 24) {case 0x00:case 0x01:case 0x16:    out.putShort(typeRef >>> 16);  break;case 0x13:case 0x14:case 0x15:out.putByte(typeRef >>> 24);break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:out.putInt(typeRef);break;default :out.put12(typeRef >>> 24,(typeRef & 0xFFFF00) >> 8);break;}if (typePath == null) {out.putByte(0);} else {int length=typePath.b[typePath.offset] * 2 + 1;out.putByteArray(typePath.b,typePath.offset,length);}}  }
class C{  void switchNodes(){  for (  GetJobsAction action : actions) {    action.switchNodes();  }}  }
class C{  public synchronized void init(){  channelFactory=new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),Executors.newCachedThreadPool());  datagramChannelFactory=new NioDatagramChannelFactory(Executors.newCachedThreadPool());  timer=new HashedWheelTimer();}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public boolean equals(ParameterizedType other){  return this == other ? true : Objects.equals(getOwnerType(),other.getOwnerType()) && Objects.equals(getRawType(),other.getRawType()) && Arrays.equals(getActualTypeArguments(),other.getActualTypeArguments());}  }
class C{  public String replace(final char[] source){  if (source == null) {    return null;  }  final StrBuilder buf=new StrBuilder(source.length).append(source);  substitute(buf,0,source.length);  return buf.toString();}  }
class C{  FileTreeIterator(Path start,int maxDepth,FileVisitOption... options) throws IOException {  this.walker=new FileTreeWalker(Arrays.asList(options),maxDepth);  this.next=walker.walk(start);  assert next.type() == FileTreeWalker.EventType.ENTRY || next.type() == FileTreeWalker.EventType.START_DIRECTORY;  IOException ioe=next.ioeException();  if (ioe != null)   throw ioe;}  }
class C{  private void showHistoryDialog(){  JBList commandsList=new JBList(HistoryUtils.getCommandsFromHistory());  commandsList.setCellRenderer(new HistoryListCellRenderer());  commandsList.setEmptyText("No data to display");  commandsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);  String[] buttons={"OK","Cancel"};  int result=JOptionPane.showOptionDialog(toolWindowContent,commandsList,"Command history",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE,null,buttons,buttons[0]);  if (result == 0) {    updateUiFromCommand((Command)commandsList.getSelectedValue());  }}  }
class C{  public Chunk handleChunk(Chunk request){  if (false)   Log.v("ddm-heap","Handling " + name(request.type) + " chunk");  int type=request.type;  if (type == CHUNK_HPIF) {    return handleHPIF(request);  } else   if (type == CHUNK_HPSG) {    return handleHPSGNHSG(request,false);  } else   if (type == CHUNK_HPDU) {    return handleHPDU(request);  } else   if (type == CHUNK_HPDS) {    return handleHPDS(request);  } else   if (type == CHUNK_NHSG) {    return handleHPSGNHSG(request,true);  } else   if (type == CHUNK_HPGC) {    return handleHPGC(request);  } else   if (type == CHUNK_REAE) {    return handleREAE(request);  } else   if (type == CHUNK_REAQ) {    return handleREAQ(request);  } else   if (type == CHUNK_REAL) {    return handleREAL(request);  } else {    throw new RuntimeException("Unknown packet " + ChunkHandler.name(type));  }}  }
class C{  public static final void printDefaults(){  UIDefaults defaults=UIManager.getDefaults();  Enumeration<Object> keys=defaults.keys();  while (keys.hasMoreElements()) {    Object key=keys.nextElement();    System.out.println(key + ": " + defaults.get(key));  }}  }
class C{  public boolean isDistinct(){  return isDistinct;}  }
class C{  @Override @Nullable public AbstractVcs findVersioningVcs(VirtualFile file){  final VcsDescriptor[] vcsDescriptors=getAllVcss();  VcsDescriptor probableVcs=null;  for (  VcsDescriptor vcsDescriptor : vcsDescriptors) {    if (vcsDescriptor.probablyUnderVcs(file)) {      if (probableVcs != null) {        return null;      }      probableVcs=vcsDescriptor;    }  }  return probableVcs == null ? null : findVcsByName(probableVcs.getName());}  }
class C{  public GitlabUrl parse(String url){  Matcher matcher=GITLAB_PATTERN.matcher(url);  if (!matcher.matches()) {    throw new IllegalArgumentException(String.format("The given github url %s is not a valid URL github url. It should start with https://gitlab.com/<user>/<repo>",url));  }  return new GitlabUrl().username(matcher.group("repoUser")).repository(matcher.group("repoName")).branch(matcher.group("branchName")).subfolder(matcher.group("subFolder"));}  }
class C{  public static String isValidMsg(Geometry g,double distance,Geometry result){  BufferResultValidator validator=new BufferResultValidator(g,distance,result);  if (!validator.isValid())   return validator.getErrorMessage();  return null;}  }
class C{  private void removeComments(Node node){  int i=0;  while (i < node.childNodes().size()) {    Node child=node.childNode(i);    if (child.nodeName().equals("#comment"))     child.remove(); else {      removeComments(child);      i++;    }  }}  }
class C{  public static Vec2D fromDegrees(double angleInDegrees,double magnitude){  double x=magnitude * Math.cos(angleInDegrees * Math.PI / 180);  double y=magnitude * Math.sin(angleInDegrees * Math.PI / 180);  return new Vec2D(x,y);}  }
class C{  public synchronized void stop(){  if (D)   Log.d(TAG,"stop");  if (mConnectThread != null) {    mConnectThread.cancel();    mConnectThread=null;  }  if (mConnectedThread != null) {    mConnectedThread.cancel();    mConnectedThread=null;  }  if (mSecureAcceptThread != null) {    mSecureAcceptThread.cancel();    mSecureAcceptThread=null;  }  if (mInsecureAcceptThread != null) {    mInsecureAcceptThread.cancel();    mInsecureAcceptThread=null;  }  setState(STATE_NONE);}  }
class C{  public static boolean isSystemBarOnBottom(Context ctxt){  Resources res=ctxt.getResources();  Configuration cfg=res.getConfiguration();  DisplayMetrics dm=res.getDisplayMetrics();  boolean canMove=(dm.widthPixels != dm.heightPixels && cfg.smallestScreenWidthDp < 600);  return (!canMove || dm.widthPixels < dm.heightPixels);}  }
class C{  public void testCase20(){  byte aBytes[]={0};  byte bBytes[]={0};  byte rBytes[]={0};  int aSign=0;  int bSign=0;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(0,result.signum());}  }
class C{  @Override public String toString(){  return name;}  }
class C{  private void updateStatus(){  TextView text=(TextView)findViewById(R.id.pwd_status);  if (test()) {    text.setText("Congratulation!");  } else {    text.setText("");  }}  }
class C{  public double value(Attribute att){  return value(att.index());}  }
class C{  private void notifyModuleViews(final INaviModule module){  for (  final INaviView view : module.getContent().getViewContainer().getViews()) {    for (    final IViewContainerListener listener : m_listeners) {      try {        listener.addedView(CProjectContainer.this,view);      } catch (      final Exception exception) {        CUtilityFunctions.logException(exception);      }    }  }}  }
class C{  public int viewToModel(float x,float y,Shape a,Position.Bias[] bias){  if (!isAllocationValid()) {    Rectangle alloc=a.getBounds();    setSize(alloc.width,alloc.height);  }  return super.viewToModel(x,y,a,bias);}  }
class C{  public HttpProcessor(HttpProcessorConfig conf){  this.conf=conf;}  }
class C{  public NetworkModule createNetworkModule(String address,MqttConnectOptions options,String clientid) throws MqttException {  final String methodName="createNetworkModule";  log.fine(className,methodName,"115",new Object[]{address});  NetworkModule netModule;  String shortAddress;  String host;  int port;  int serverURIType=validateURI(address);switch (serverURIType) {case URI_TYPE_TCP:    shortAddress=address.substring(6);  host=getHostName(shortAddress);port=getPort(shortAddress,1883);netModule=new TCPMicroNetworkModule(host,port);break;case URI_TYPE_SSL:shortAddress=address.substring(6);host=getHostName(shortAddress);port=getPort(shortAddress,8883);netModule=new SSLMicroNetworkModule(host,port);break;default :netModule=null;}return netModule;}  }
class C{  public void processPackageAdd(String[] packages){  initVars();  HashSet<String> packageSet=new HashSet<>();  final boolean userAppsExisted=getUserApps(packageSet);  boolean newPackageAdded=false;  long installTime=System.currentTimeMillis();  LauncherAppsCompat launcherApps=LauncherAppsCompat.getInstance(mContext);  for (  String packageName : packages) {    if (!packageSet.contains(packageName)) {      packageSet.add(packageName);      newPackageAdded=true;      List<LauncherActivityInfoCompat> activities=launcherApps.getActivityList(packageName,mUser);      if (!activities.isEmpty()) {        markForAddition(activities.get(0),installTime);      }    }  }  if (newPackageAdded) {    mPrefs.edit().putStringSet(mPackageSetKey,packageSet).apply();    finalizeAdditions(userAppsExisted);  }}  }
class C{  public void testDifferentClassLoaderPrivateMode() throws Exception {  processTestDifferentRemoteClassLoader(DeploymentMode.PRIVATE);}  }
class C{  public void clear(){  mIntentToken=null;  mUri=null;}  }
class C{  protected void deleteCamposDatoExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  ActionErrors errors=null;  CamposTablaForm camposTablaForm=(CamposTablaForm)form;  if ((errors=validateFormParaEliminarCampo(camposTablaForm)) == null) {    String idCamposABorrar[]=camposTablaForm.getCamposABorrar();    GestionDescripcionBI descripcionService=getGestionDescripcionBI(request);    if (!isCampoDatoEnUso(request,idCamposABorrar)) {      descripcionService.deleteCamposDato(idCamposABorrar);      List list=descripcionService.getCamposDatoOrderByPosEnTbl(camposTablaForm.getId());      if (list != null) {        for (int i=0; i < list.size(); i++) {          CampoDatoVO campoDatoVO=(CampoDatoVO)list.get(i);          campoDatoVO.setPosEnTbl(i + 1);          descripcionService.updateCampoDato(campoDatoVO);        }      }    }  } else {    ErrorsTag.saveErrors(request,errors);  }  goLastClientExecuteLogic(mapping,form,request,response);}  }
class C{  public ItemStack drainFluidItemStack(ItemStack container,INetworkCache network,ActionType action){  return container;}  }
class C{  @Pure public Atom descriptorFromClassName(){  if (VM.VerifyAssertions) {    VM._assert(val.length > 0);  }  if (val[0] == '[')   return this;  byte[] sig=new byte[1 + val.length + 1];  sig[0]=(byte)'L';  for (int i=0, n=val.length; i < n; ++i) {    byte b=val[i];    if (b == '.')     b='/';    sig[i + 1]=b;  }  sig[sig.length - 1]=(byte)';';  return findOrCreate(sig,true,null);}  }
class C{  public T caseElementPosition_(ElementPosition_ object){  return null;}  }
class C{  static void testN(ExecutorService pool,SocketChannel source,SocketChannel sink,int... sizes) throws Exception {  System.out.print("write(ByteBuffer[]), sizes=");  for (  int size : sizes)   System.out.print(size + " ");  System.out.println();  int total=0;  int len=sizes.length;  ByteBuffer[] bufs=new ByteBuffer[len];  for (int i=0; i < len; i++) {    int size=sizes[i];    ByteBuffer buf=ByteBuffer.allocate(size);    rand.nextBytes(buf.array());    bufs[i]=buf;    total+=size;  }  Future<Long> result=pool.submit(new Reader(sink,total));  long n=source.write(bufs);  if (n != total)   throw new RuntimeException("Short write detected");  for (int i=0; i < len; i++)   bufs[i].rewind();  long expected=computeChecksum(bufs);  long actual=result.get();  if (actual != expected)   throw new RuntimeException("Checksum did not match");}  }
class C{  public static void startActivity(Context context){  context.startActivity(new Intent(context,SharedPrefsBrowser.class));}  }
class C{  public static int ENOANO(){  return 55;}  }
class C{  @Deprecated public String toISO8601(Date date){  DateFormat df=new SimpleDateFormat(ISO8601);  df.setTimeZone(TimeZone.getTimeZone("UTC"));  String formatted=df.format(date);  return formatted;}  }
class C{  public RFF_RBF(double sigma,int dim){  this(sigma,dim,true);}  }
class C{  public T or(Func0<T> func1){  return value != null ? value : func1.call();}  }
class C{  public FileSendPacket send(File file,SendListener listener){  if (!file.exists())   throw new NullPointerException("Not Find: " + file.getPath());  FileSendPacket entity=new FileSendPacket(file,listener);  send(entity);  return entity;}  }
class C{  public <T>T removeEnv(String key){  String ekey=this.expandString(key);  FlexibleMapAccessor<T> fma=FlexibleMapAccessor.getInstance(ekey);  return removeEnv(fma);}  }
class C{  public void removeNotify(){  super.removeNotify();  firePropertyChange("ancestor",getParent(),null);  unregisterWithKeyboardManager();  deregisterNextFocusableComponent();  if (getCreatedDoubleBuffer()) {    RepaintManager.currentManager(this).resetDoubleBuffer();    setCreatedDoubleBuffer(false);  }  if (autoscrolls) {    Autoscroller.stop(this);  }}  }
class C{  public Loader(ClassLoader parent,ClassPool cp){  super(parent);  init(cp);}  }
class C{  public void clear(){  links.clear();  locationPositions.clear();}  }
class C{  public Builder addCharFilter(Class<? extends CharFilterFactory> factory,Map<String,String> params) throws IOException {  Objects.requireNonNull(factory,"CharFilter name may not be null");  charFilters.add(applyResourceLoader(newFactoryClassInstance(factory,applyDefaultParams(params))));  componentsAdded=true;  return this;}  }
class C{  private HttpResponse buildHttpResponse(String header,String uploadId,String uploadType) throws IOException {  MockHttpTransport.Builder builder=new MockHttpTransport.Builder();  MockLowLevelHttpResponse resp=new MockLowLevelHttpResponse();  builder.setLowLevelHttpResponse(resp);  resp.setStatusCode(200);  GenericUrl url=new GenericUrl(HttpTesting.SIMPLE_URL);  if (header != null) {    resp.addHeader("X-GUploader-UploadID",header);  }  if (uploadId != null) {    url.put("upload_id",uploadId);  }  if (uploadType != null) {    url.put("uploadType",uploadType);  }  return builder.build().createRequestFactory().buildGetRequest(url).execute();}  }
class C{  @NotNull public static String appendToPathEnvVar(@Nullable String source,@NotNull String value){  if (StringUtil.isEmpty(source))   return value;  Set<String> paths=Sets.newHashSet(source.split(File.pathSeparator));  return !paths.contains(value) ? source + File.pathSeparator + value : source;}  }
class C{  private DebuggerMemoryExpressionParser(){}  }
class C{  public static long intersection(long s1,long s2){  return s1 & s2;}  }
class C{  public double narrow() throws OperatorFailedException {  NodeRef i=null, iP=null, j=null, jP=null;  int tries=0;  int beforeMoves=getAllValidNarrowMoves();  while (tries < MAX_TRIES) {    i=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));    while (tree.getRoot() == i || tree.getParent(i,0) == tree.getRoot() || tree.getParent(i,1) == tree.getRoot()) {      i=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));    }    iP=tree.getParent(i,0);    if (tree.isReassortment(i) && MathUtils.nextBoolean())     iP=tree.getParent(i,1);    jP=tree.getParent(iP,0);    if (tree.isReassortment(iP) && MathUtils.nextBoolean())     jP=tree.getParent(iP,1);    j=tree.getChild(jP,0);    if (j == iP) {      j=tree.getChild(jP,1);    }    if (j != iP && i != j && (tree.getNodeHeight(j) < tree.getNodeHeight(iP)) && (tree.getNodeHeight(i) < tree.getNodeHeight(jP))) {      break;    }    tries+=1;  }  if (tries < MAX_TRIES) {    eupdateARG(i,j,iP,jP);    tree.pushTreeChangedEvent(iP);    tree.pushTreeChangedEvent(jP);  } else   throw new OperatorFailedException("Couldn't find valid narrow move on this tree!!");  return Math.log((double)beforeMoves / getAllValidNarrowMoves());}  }
class C{  @Override protected void rejected(final RPEntity user){  if (rejectedMessage != null) {    super.rejected(user);  } else   if (user.getLevel() < minLevel) {    sendMessage(user,"I am too weak to use this portal.");  } else   if (user.getLevel() > maxLevel) {    sendMessage(user,"I am too strong to use this portal.");  }}  }
class C{  private boolean skipNext(FileSystemWAL.FileSystemWALReader reader){  try {    reader.skipNext();    return true;  } catch (  IOException ex) {    try {      reader.close();    } catch (    IOException e) {    }    return false;  }}  }
class C{  private void weighItems(List<? extends PlaidItem> items){  if (items == null || items.isEmpty())   return;  PlaidItemSorting.PlaidItemGroupWeigher weigher=null;switch (items.get(0).dataSource) {case SourceManager.SOURCE_DRIBBBLE_USER_SHOTS:case SourceManager.SOURCE_DRIBBBLE_USER_LIKES:case SourceManager.SOURCE_PRODUCT_HUNT:case PlayerShotsDataManager.SOURCE_PLAYER_SHOTS:case PlayerShotsDataManager.SOURCE_TEAM_SHOTS:    if (naturalOrderWeigher == null) {      naturalOrderWeigher=new PlaidItemSorting.NaturalOrderWeigher();    }  weigher=naturalOrderWeigher;break;default :if (items.get(0) instanceof Shot) {if (shotWeigher == null) shotWeigher=new ShotWeigher();weigher=shotWeigher;} else if (items.get(0) instanceof Story) {if (storyWeigher == null) storyWeigher=new StoryWeigher();weigher=storyWeigher;} else if (items.get(0) instanceof Post) {if (postWeigher == null) postWeigher=new PostWeigher();weigher=postWeigher;}}weigher.weigh(items);}  }
class C{  public PdfPTable createTenderNarrationTable(final TenderResponse tenderResponse){  final PdfPTable tenderNarrationTable=new PdfPTable(13);  tenderNarrationTable.getDefaultCell().setBorderWidth(1);  tenderNarrationTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);  tenderNarrationTable.getDefaultCell().setColspan(13);  tenderNarrationTable.addCell("\t" + (tenderResponse.getNarration() == null ? "" : tenderResponse.getNarration()));  return tenderNarrationTable;}  }
class C{  public static Drawable zoomDrawable(Drawable drawable,int w,int h){  int width=drawable.getIntrinsicWidth();  int height=drawable.getIntrinsicHeight();  Bitmap oldbmp=drawableToBitmap(drawable);  Matrix matrix=new Matrix();  float sx=((float)w / width);  float sy=((float)h / height);  matrix.postScale(sx,sy);  Bitmap newbmp=Bitmap.createBitmap(oldbmp,0,0,width,height,matrix,true);  return new BitmapDrawable(newbmp);}  }
class C{  public Boolean isFeatureRequirementSupported(){  return featureRequirementSupported;}  }
class C{  public void product(Action<PdeProductBuildConfig> productConfig){  this.productConfig=productConfig;}  }
class C{  public static final double[] toDoubleArray(Instance x){  int L=x.classIndex();  return toDoubleArray(x,L);}  }
class C{  public void startNalUnit(int type){  Assertions.checkState(!isFilling);  isFilling=type == targetType;  if (isFilling) {    nalLength=3;    isCompleted=false;  }}  }
class C{  public double[] colConfidence(int j){  double y[]=new double[predictions.size()];  for (int i=0; i < predictions.size(); i++) {    y[i]=rowConfidence(i)[j];  }  return y;}  }
class C{  public Object convert(Class<?> targetType,Object valueToConvert) throws JavaTypeTranslatorException {  Object rVal=null;  if (valueToConvert instanceof Date) {    if (String.class.equals(targetType)) {      rVal=((Date)valueToConvert).toString();    } else {      rVal=JavaTypeTranslator.convert(targetType,((Date)valueToConvert).getDate());    }  } else   if (valueToConvert instanceof JavaFormatForObject) {    Object getFor=((JavaFormatForObject)valueToConvert).getForObject();    String format=((JavaFormatForObject)valueToConvert).getFormat();    if (getFor instanceof Date) {      try {        SimpleDateFormat formatter=new SimpleDateFormat(format);        formatter.setTimeZone(TimeZone.getTimeZone("GMT"));        String sDate=formatter.format(((Date)getFor).getDate());        rVal=JavaTypeTranslator.convert(targetType,sDate);      } catch (      Exception ex) {        throw new JavaTypeTranslatorException(ex,"Unable to convert Date to GMT Date representation using format '" + format + "'");      }    } else {      throw new JavaTypeTranslatorException("Value of JavaFormatForObject.getForObject() must be a Date");    }  } else {    throw new JavaTypeTranslatorException("Value to convert must be a Date");  }  return (rVal);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  protected void openRow(String projectName){}  }
class C{  public static StringDescriptor create(final String value){  return value != null ? new StringDescriptor(value) : null;}  }
class C{  public void saveLearning(LearningConfig config){  config.addCredentials(this);  POST(this.url + "/save-learning",config.toXML());}  }
class C{  public void addParamClone(ModelParam param){  if (param != null) {    ModelParam newParam=new ModelParam(param);    addParam(newParam);  }}  }
class C{  public static void checkOnConsultaEdit(ConsultaVO consulta,ServiceClient user) throws ConsultaActionNotAllowedException {  if (!consulta.isEditable(user))   throw new ConsultaActionNotAllowedException(ArchivoErrorCodes.ERROR_EDICION_NOEDITABLE,Messages.getString(ConsultaActionNotAllowedException.XESTADO,user.getLocale()));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void removeAlertDefinition(Integer defId){  if (logger.isDebugEnabled()) {    logger.debug("Entered AdminDistributedSystemJmxImpl.removeAlertDefinition id *****");  }synchronized (ALERT_DEFINITIONS) {    StatAlertDefinition alertDefinition=(StatAlertDefinition)ALERT_DEFINITIONS.get(defId);    if (alertDefinition != null) {      ALERT_DEFINITIONS.remove(defId);synchronized (alertsStore) {        alertsStore.remove(defId);      }      notifyMembersForAlertDefinitionRemoval(alertDefinition);    }  }  if (logger.isDebugEnabled()) {    logger.debug("Exiting AdminDistributedSystemJmxImpl.removeAlertDefinition() *****");  }}  }
class C{  public static Coords scatterDiveBombs(Coords coords,int moF){  return Compute.scatter(coords,moF);}  }
class C{  public static boolean addSubstituteFonts(String fontPath,final boolean enforceMapping){  boolean hasFonts=false;  InputStream in=null, dir=null;  try {    final String[] dirs={"tt","t1c","t1"};    final String[] types={"/TrueType","/Type1C","/Type1"};    enforceFontSubstitution=enforceMapping;    final ClassLoader loader=FontMappings.class.getClass().getClassLoader();    dir=loader.getResourceAsStream(fontPath);    LogWriter.writeLog("Looking for root " + fontPath);    if (in != null) {      LogWriter.writeLog("Adding fonts fonts found in  tt,t1c,t1 sub-directories of " + fontPath);      hasFonts=true;      for (int i=0; i < dirs.length; i++) {        if (!fontPath.endsWith("/")) {          fontPath+='/';        }        final String path=fontPath + dirs[i] + '/';        in=loader.getResourceAsStream(path);        if (in != null) {          System.out.println("Found  " + path + ' '+ in);          final ArrayList<String> fonts;          try {            if (in instanceof ByteArrayInputStream) {              fonts=readIndirectValues(in);            } else {              fonts=getDirectoryMatches(path);            }            String value, fontName;            for (            final String font : fonts) {              value=font;              if (value == null) {                break;              }              final int pointer=value.indexOf('.');              if (pointer == -1) {                fontName=value.toLowerCase();              } else {                fontName=value.substring(0,pointer).toLowerCase();              }              fontSubstitutionTable.put(fontName,types[i]);              fontSubstitutionLocation.put(fontName,path + value);            }          } catch (          final Exception e) {            LogWriter.writeLog("Exception " + e + " reading substitute fonts");          } finally {            if (in != null) {              try {                in.close();              } catch (              final IOException e) {                LogWriter.writeLog("Exception: " + e.getMessage());              }            }          }        }      }    } else {      LogWriter.writeLog("No fonts found at " + fontPath);    }  } catch (  final Exception e) {    LogWriter.writeLog("Exception adding substitute fonts " + e.getMessage());  } finally {    if (in != null) {      try {        in.close();      } catch (      final IOException e) {        LogWriter.writeLog("Exception: " + e.getMessage());      }    }    if (dir != null) {      try {        dir.close();      } catch (      final IOException e) {        LogWriter.writeLog("Exception: " + e.getMessage());      }    }  }  return hasFonts;}  }
class C{  protected String toString(Map<String,String> values){  StringBuilder buffer=new StringBuilder();  for (  Map.Entry<String,String> entry : values.entrySet()) {    String name=entry.getKey();    String value=entry.getValue();    buffer.append(name);    buffer.append("=\"");    buffer.append(value);    buffer.append("\" ");  }  buffer.setLength(buffer.length() - 1);  return buffer.toString();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] imageFiles=null;  String outputName=null;  String workingDirectory=null;  WhiteboxRasterInfo[] images=null;  int nCols=0;  int nRows=0;  double z;  int numImages;  int progress=0;  int col, row;  int a, i, j;  double[] imageAverages;  double[] imageTotals;  double[] imageNumPixels;  double[][] data;  double[] noDataValues;  String pathSep=File.separator;  boolean standardizedPCA=false;  int numberOfComponentImagesToCreate=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputName=args[1];  if (outputName.toLowerCase().contains(".dep")) {    outputName=outputName.replace(".dep","");  }  standardizedPCA=Boolean.parseBoolean(args[2]);  if (args[3].toLowerCase().contains("not")) {    numberOfComponentImagesToCreate=9999999;  } else {    numberOfComponentImagesToCreate=Integer.parseInt(args[3]);  }  try {    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    images=new WhiteboxRasterInfo[numImages];    imageAverages=new double[numImages];    imageTotals=new double[numImages];    imageNumPixels=new double[numImages];    noDataValues=new double[numImages];    data=new double[numImages][];    for (i=0; i < numImages; i++) {      images[i]=new WhiteboxRasterInfo(imageFiles[i]);      noDataValues[i]=images[i].getNoDataValue();      if (i == 0) {        nCols=images[i].getNumberColumns();        nRows=images[i].getNumberRows();        File file=new File(imageFiles[i]);        workingDirectory=file.getParent();      } else {        if (images[i].getNumberColumns() != nCols || images[i].getNumberRows() != nRows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }    }    for (row=0; row < nRows; row++) {      for (i=0; i < numImages; i++) {        data[i]=images[i].getRowValues(row);      }      for (col=0; col < nCols; col++) {        for (i=0; i < numImages; i++) {          if (data[i][col] != noDataValues[i]) {            imageTotals[i]+=data[i][col];            imageNumPixels[i]++;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress("Calculating image means:",progress);    }    for (i=0; i < numImages; i++) {      imageAverages[i]=imageTotals[i] / imageNumPixels[i];    }    double[] imageTotalDeviation=new double[numImages];    double[][] covariances=new double[numImages][numImages];    double[][] correlationMatrix=new double[numImages][numImages];    for (row=0; row < nRows; row++) {      for (i=0; i < numImages; i++) {        data[i]=images[i].getRowValues(row);      }      for (col=0; col < nCols; col++) {        for (i=0; i < numImages; i++) {          if (data[i][col] != noDataValues[i]) {            imageTotalDeviation[i]+=(data[i][col] - imageAverages[i]) * (data[i][col] - imageAverages[i]);            for (a=0; a < numImages; a++) {              if (data[a][col] != noDataValues[a]) {                covariances[i][a]+=(data[i][col] - imageAverages[i]) * (data[a][col] - imageAverages[a]);              }            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress("Calculating covariances:",progress);    }    for (i=0; i < numImages; i++) {      for (a=0; a < numImages; a++) {        correlationMatrix[i][a]=covariances[i][a] / (Math.sqrt(imageTotalDeviation[i] * imageTotalDeviation[a]));      }    }    for (i=0; i < numImages; i++) {      for (a=0; a < numImages; a++) {        covariances[i][a]=covariances[i][a] / (imageNumPixels[i] - 1);      }    }    Matrix cov=null;    if (!standardizedPCA) {      cov=new Matrix(covariances);    } else {      cov=new Matrix(correlationMatrix);    }    EigenvalueDecomposition eigen=cov.eig();    double[] eigenvalues;    Matrix eigenvectors;    SortedSet<PrincipalComponent> principalComponents;    eigenvalues=eigen.getRealEigenvalues();    eigenvectors=eigen.getV();    double[][] vecs=eigenvectors.getArray();    int numComponents=eigenvectors.getColumnDimension();    principalComponents=new TreeSet<PrincipalComponent>();    for (i=0; i < numComponents; i++) {      double[] eigenvector=new double[numComponents];      for (j=0; j < numComponents; j++) {        eigenvector[j]=vecs[j][i];      }      principalComponents.add(new PrincipalComponent(eigenvalues[i],eigenvector));    }    double totalEigenvalue=0;    for (i=0; i < numComponents; i++) {      totalEigenvalue+=eigenvalues[i];    }    double[][] explainedVarianceArray=new double[numComponents][2];    j=0;    for (    PrincipalComponent pc : principalComponents) {      explainedVarianceArray[j][0]=pc.eigenValue / totalEigenvalue * 100.0;      if (j == 0) {        explainedVarianceArray[j][1]=explainedVarianceArray[j][0];      } else {        explainedVarianceArray[j][1]=explainedVarianceArray[j][0] + explainedVarianceArray[j - 1][1];      }      j++;    }    DecimalFormat df1=new DecimalFormat("0.00");    DecimalFormat df2=new DecimalFormat("0.0000");    DecimalFormat df3=new DecimalFormat("0.000000");    String ret="Principal Component Analysis Report:\n\n";    ret+="Component\tExplained Var.\tCum. %\tEigenvalue\tEigenvector\n";    j=0;    for (    PrincipalComponent pc : principalComponents) {      String explainedVariance=df1.format(explainedVarianceArray[j][0]);      String explainedCumVariance=df1.format(explainedVarianceArray[j][1]);      double[] eigenvector=pc.eigenVector.clone();      ret+=(j + 1) + "\t" + explainedVariance+ "\t"+ explainedCumVariance+ "\t"+ df2.format(pc.eigenValue)+ "\t";      String eigenvec="[";      for (i=0; i < numComponents; i++) {        if (i < numComponents - 1) {          eigenvec+=df3.format(eigenvector[i]) + ", ";        } else {          eigenvec+=df3.format(eigenvector[i]);        }      }      eigenvec+="]";      ret+=eigenvec + "\n";      if (j < numberOfComponentImagesToCreate) {        String outputHeader=workingDirectory + pathSep + outputName+ "_comp"+ (j + 1)+ ".dep";        WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.FLOAT,0);        output.setDataScale(DataScale.CONTINUOUS);        for (row=0; row < nRows; row++) {          for (i=0; i < numImages; i++) {            data[i]=images[i].getRowValues(row);          }          for (col=0; col < nCols; col++) {            if (data[0][col] != noDataValues[0]) {              z=0;              for (i=0; i < numImages; i++) {                z+=data[i][col] * eigenvector[i];              }              output.setValue(row,col,z);            } else {              output.setValue(row,col,noDataValues[0]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (nRows - 1));          updateProgress("Creating component images:",progress);        }        output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");        output.addMetadataEntry("Created on " + new Date());        output.addMetadataEntry("Principal Component Num.: " + (j + 1));        output.addMetadataEntry("Eigenvalue: " + pc.eigenValue);        eigenvec="[";        for (i=0; i < numComponents; i++) {          if (i < numComponents - 1) {            eigenvec+=eigenvector[i] + ", ";          } else {            eigenvec+=eigenvector[i];          }        }        eigenvec+="]";        output.addMetadataEntry("Eigenvector: " + eigenvec);        if (!standardizedPCA) {          output.addMetadataEntry("PCA Type: unstandardized");        } else {          output.addMetadataEntry("PCA Type: standardized");        }        output.close();      }      j++;    }    ret+="\nFactor Loadings:\n";    ret+="\t\tComponent\n\t";    for (i=0; i < numComponents; i++) {      ret+=(i + 1) + "\t";    }    ret+="\n";    double loading=0;    if (!standardizedPCA) {      for (i=0; i < numImages; i++) {        ret+="band" + (i + 1) + "\t";        for (        PrincipalComponent pc : principalComponents) {          double[] eigenvector=pc.eigenVector.clone();          double ev=pc.eigenValue;          loading=(eigenvector[i] * Math.sqrt(ev)) / Math.sqrt(covariances[i][i]);          ret+=df1.format(loading) + "\t";        }        ret+="\n";      }    } else {      for (i=0; i < numImages; i++) {        ret+="band" + (i + 1) + "\t";        for (        PrincipalComponent pc : principalComponents) {          double[] eigenvector=pc.eigenVector.clone();          double ev=pc.eigenValue;          loading=(eigenvector[i] * Math.sqrt(ev));          ret+=df1.format(loading) + "\t";        }        ret+="\n";      }    }    for (i=0; i < numImages; i++) {      images[i].close();    }    returnData(ret);    ScreePlot plot=new ScreePlot(explainedVarianceArray);    returnData(plot);    if (numComponents > 3) {      for (i=2; i >= 0; i--) {        if (i < numberOfComponentImagesToCreate) {          String outputHeader=workingDirectory + pathSep + outputName+ "_comp"+ (i + 1)+ ".dep";          returnData(outputHeader);        }      }    } else {      for (i=numComponents - 1; i >= 0; i--) {        if (i < numberOfComponentImagesToCreate) {          String outputHeader=workingDirectory + pathSep + outputName+ "_comp"+ (i + 1)+ ".dep";          returnData(outputHeader);        }      }    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @SuppressWarnings({"raw","unchecked"}) public static <T>GtPredicate<T> gt(Property<T> property,Variable variable){  return new GtPredicate(property(property),variable);}  }
class C{  private void resetSprite(){  this.parentAnimationMetadata=null;  this.setFramesTextureData(new ArrayList<int[][]>());  this.frameCounter=0;  this.tickCounter=0;}  }
class C{  public LZ2(){  super(30,2,21,22,1);}  }
class C{  protected Converter createConverter(FaceletContext ctx) throws FacesException, ELException, FaceletException {  return ctx.getFacesContext().getApplication().createConverter(this.converterId.getValue(ctx));}  }
class C{  public synchronized boolean hatch(T o) throws IllegalArgumentException {  if (o == null)   throw new IllegalArgumentException("null arg");  if (!hatchMap.containsKey(o))   throw new IllegalArgumentException(o + " is not incubating");  T key=hatchMap.get(o);  hatchMap.put(key,null);  notifyAll();  return key != null;}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof ConditionalTable) {    Set<Assignment> conditions=((ConditionalTable)o).table.keySet();    if (!conditions.equals(table.keySet())) {      return false;    }    for (    Assignment c : conditions) {      IndependentDistribution distrib=table.get(c);      IndependentDistribution distrib2=((ConditionalTable)o).table.get(c);      if (!distrib.equals(distrib2)) {        return false;      }    }    return true;  }  return false;}  }
class C{  public boolean isLocal(){  return true;}  }
class C{  public void newCharacter(EditorState editorState,MetaCharacter meta){  editorState.addArgument(new MathCharacter(meta));}  }
class C{  public void error(String msg,Object[] args){  System.out.println("DOM ERROR! class: " + this.getClass().getName());  throw new RuntimeException(XMLMessages.createXMLMessage(msg,args));}  }
class C{  public Builder convertDurationsTo(TimeUnit durationUnit){  this.durationUnit=durationUnit;  return this;}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    this.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      this.out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        this.out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  public WoolScoreboardEntry(Wool wool,ScoreboardDisplay display){  super(display,"",display.getEntry(" " + ChatColor.WHITE + wool.getComponent().toPlainText(),null),"");  this.wool=wool;  wool.getEntryHolder().addEntry(this);}  }
class C{  private MentionToken(MessageTokenizer tokenizer,int startIndex,int endIndex,T mentionObject){  super(tokenizer,startIndex,endIndex);  mention=mentionObject;}  }
class C{  public ResponseData performLogin(String userName,String password){  return this.loginManager.login(userName,password,queue);}  }
class C{  public static int toInt(Integer num,int defaultValue){  return num == null ? defaultValue : num;}  }
class C{  @Override protected boolean isAllowed(final RPEntity user){  return user.isEquipped(key,quantity);}  }
class C{  public static byte[] decode(String data){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.decode(data,bOut);  } catch (  IOException e) {    throw new RuntimeException("exception decoding base64 string: " + e);  }  return bOut.toByteArray();}  }
class C{  public ComponentAnimation createReplaceTransition(Component current,Component next,Transition t){  return replaceComponents(current,next,t,false,false,null,0,0,false);}  }
class C{  @SuppressWarnings("unchecked") public static <U>Tuple<U> of(Object red,Object black){  return new Tuple<>((U)red,(U)black);}  }
class C{  static void lowerInstrumentation(IR ir){  ArrayList<Instruction> instrumentedInstructions=new ArrayList<Instruction>();  for (Enumeration<BasicBlock> bbe=ir.getBasicBlocks(); bbe.hasMoreElements(); ) {    BasicBlock bb=bbe.nextElement();    Instruction i=bb.firstInstruction();    while (i != null && i != bb.lastInstruction()) {      if (i.operator() == INSTRUMENTED_EVENT_COUNTER) {        instrumentedInstructions.add(i);      }      i=i.nextInstructionInCodeOrder();    }  }  for (  final Instruction i : instrumentedInstructions) {    InstrumentedEventCounterManager counterManager=Instrumentation.eventCounterManager;    counterManager.mutateOptEventCounterInstruction(i,ir);  }}  }
class C{  public static boolean checkRootPermission(){  return execCommand("echo root",true,false).result == 0;}  }
class C{  private static String which(Class clazz){  try {    String classnameAsResource=clazz.getName().replace('.','/') + ".class";    ClassLoader loader=clazz.getClassLoader();    URL it;    if (loader != null) {      it=loader.getResource(classnameAsResource);    } else {      it=ClassLoader.getSystemResource(classnameAsResource);    }    if (it != null) {      return it.toString();    }  } catch (  VirtualMachineError vme) {    throw vme;  }catch (  ThreadDeath td) {    throw td;  }catch (  Throwable t) {    if (debug) {      t.printStackTrace();    }  }  return "unknown location";}  }
class C{  public TransformerConfigurationException(){  super("Configuration Error");}  }
class C{  public List<Article> listUpVotedArticles(UUID voterId,@Nullable FlakeId startArticleId,int size){  FlakeId start=Optional.ofNullable(startArticleId).orElse(FlakeId.MAX);  return jdbc().query("" + " SELECT a.* " + "   FROM ArticleVoter v "+ "   JOIN Article a ON (v.articleId = a.articleId) "+ "  WHERE v.voterId = ? "+ "    AND v.articleId < ? "+ "    AND v.voteState = ? "+ "  ORDER BY v.articleId DESC "+ "  LIMIT ? ",articleDao.getArticleMapper(),voterId,start.value(),VoteState.UP.name(),size);}  }
class C{  public boolean contains(float x,float y){  return left < right && top < bottom && x >= left && x < right && y >= top && y < bottom;}  }
class C{  public static String decodeString(String s){  return new String(decode(s));}  }
class C{  public static ConstantNode forLong(long i,StructuredGraph graph){  return unique(graph,createPrimitive(JavaConstant.forLong(i)));}  }
class C{  private void sendTrapPdu(SnmpPduPacket pdu) throws SnmpStatusException, IOException {  SnmpMessage msg=null;  try {    msg=(SnmpMessage)pduFactory.encodeSnmpPdu(pdu,bufferSize);    if (msg == null) {      throw new SnmpStatusException(SnmpDefinitions.snmpRspAuthorizationError);    }  } catch (  SnmpTooBigException x) {    if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {      SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"sendTrapPdu","Trap pdu is too big. " + "Trap hasn't been sent to anyone");    }    throw new SnmpStatusException(SnmpDefinitions.snmpRspTooBig);  }  int sendingCount=0;  openTrapSocketIfNeeded();  if (ipacl != null) {    Enumeration<InetAddress> ed=ipacl.getTrapDestinations();    while (ed.hasMoreElements()) {      msg.address=ed.nextElement();      Enumeration<String> ec=ipacl.getTrapCommunities(msg.address);      while (ec.hasMoreElements()) {        msg.community=ec.nextElement().getBytes();        try {          sendTrapMessage(msg);          sendingCount++;        } catch (        SnmpTooBigException x) {          if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {            SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"sendTrapPdu","Trap pdu is too big. " + "Trap hasn't been sent to " + msg.address);          }        }      }    }  }  if (sendingCount == 0) {    try {      msg.address=InetAddress.getLocalHost();      sendTrapMessage(msg);    } catch (    SnmpTooBigException x) {      if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {        SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"sendTrapPdu","Trap pdu is too big. " + "Trap hasn't been sent.");      }    }catch (    UnknownHostException e) {      if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {        SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"sendTrapPdu","Trap pdu is too big. " + "Trap hasn't been sent.");      }    }  }  closeTrapSocketIfNeeded();}  }
class C{  private void checkNotRemovingDiscoveredEndpoints(Network network,List<String> endpoints){  List<String> discoveredEndpoints=new ArrayList<String>();  _log.info("checkNotRemovingDiscoveredEndpoints: for {} ",endpoints);  for (  String ep : endpoints) {    if (network.endpointIsDiscovered(ep)) {      discoveredEndpoints.add(ep);    }  }  _log.info("checkNotRemovingDiscoveredEndpoints: these endpoints were discovered in the network  {} ",discoveredEndpoints);  if (!discoveredEndpoints.isEmpty()) {    throw APIException.badRequests.endpointsCannotBeRemoved(discoveredEndpoints.toArray().toString());  }}  }
class C{  public boolean hasFeature(String feature,String version){  if (feature.equals("Core")) {    return version == null || version.equals("1.0") || version.equals("2.0");  }  return false;}  }
class C{  public void onCenterUpdated(LatLng center){  if (circle != null)   circle.setCenter(center);  if (radiusMarker != null)   radiusMarker.setPosition(MarkerAreasUtils.toRadiusLatLng(center,radiusMeters));}  }
class C{  public void addDash(float[] dashary,float phase){  PDFChangeStrokeCmd sc=new PDFChangeStrokeCmd();  sc.setDash(dashary,phase);  addCommand(sc);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static <K extends Parcelable,V extends Parcelable>void writeHashMap(Map<K,V> map,Parcel out,int flags){  if (map != null) {    out.writeInt(map.size());    for (    Entry<K,V> entry : map.entrySet()) {      out.writeParcelable(entry.getKey(),flags);      out.writeParcelable(entry.getValue(),flags);    }  } else {    out.writeInt(-1);  }}  }
class C{  public static OrderFragment newInstance(long orderId){  Bundle args=new Bundle();  args.putLong(ORDER_ID,orderId);  OrderFragment fragment=new OrderFragment();  fragment.setArguments(args);  return fragment;}  }
class C{  public final void testGetType(){  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  assertEquals("TEST_TYPE",c1.getType());}  }
class C{  @Override public Map<String,Object> nextRow(){  return null;}  }
class C{  public static long decode(BinaryVariable binary){  int numberOfBits=binary.getNumberOfBits();  if ((numberOfBits < 1) || (numberOfBits > 63)) {    throw new IllegalArgumentException(INVALID_BITS);  }  long value=0;  for (int i=0; i < numberOfBits; i++) {    if (binary.get(i)) {      value|=(1L << i);    }  }  return value;}  }
class C{  public void updatePoly(double[] llPoints,int units,int lType,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkPoly.write(llPoints,units,lType,properties,link.dos);}  }
class C{  public BridgeContext(UserAgent userAgent){  this(userAgent,sharedPool,new DocumentLoader(userAgent));}  }
class C{  @SuppressWarnings("unchecked") private void unmarshal(Map<String,Object> json,Connection conn){  if (json.containsKey("agreement")) {    try {      this.agreement=new URI((String)json.get("agreement"));    } catch (    ClassCastException|URISyntaxException ex) {      throw new AcmeProtocolException("Illegal agreement URI",ex);    }  }  if (json.containsKey("contact")) {    contacts.clear();    for (    Object c : (Collection<Object>)json.get("contact")) {      try {        contacts.add(new URI((String)c));      } catch (      ClassCastException|URISyntaxException ex) {        throw new AcmeProtocolException("Illegal contact URI",ex);      }    }  }  if (json.containsKey("authorizations")) {    try {      this.authorizations=new URI((String)json.get("authorizations"));    } catch (    ClassCastException|URISyntaxException ex) {      throw new AcmeProtocolException("Illegal authorizations URI",ex);    }  } else {    this.authorizations=null;  }  if (json.containsKey("certificates")) {    try {      this.certificates=new URI((String)json.get("certificates"));    } catch (    ClassCastException|URISyntaxException ex) {      throw new AcmeProtocolException("Illegal certificates URI",ex);    }  } else {    this.certificates=null;  }  if (json.containsKey("status")) {    this.status=Status.parse((String)json.get("status"));  }  URI location=conn.getLocation();  if (location != null) {    setLocation(location);  }  URI tos=conn.getLink("terms-of-service");  if (tos != null) {    this.agreement=tos;  }  loaded=true;}  }
class C{  public static String[] convertStrings(List<String> strings){  String[] ret=new String[strings.size()];  for (int i=0; i < ret.length; i++) {    ret[i]=strings.get(i);  }  return ret;}  }
class C{  public void testOptimisticTransaction() throws Exception {  for (  IgniteCache<Integer,String> cache : caches) {    Transaction tx=cache.unwrap(Ignite.class).transactions().txStart(OPTIMISTIC,REPEATABLE_READ);    try {      cache.put(KEY,VAL);      tx.commit();    }  finally {      tx.close();    }    for (    IgniteCache<Integer,String> cacheInner : caches) {      tx=cacheInner.unwrap(Ignite.class).transactions().txStart(OPTIMISTIC,REPEATABLE_READ);      try {        assert F.eq(VAL,cacheInner.get(KEY));        tx.commit();      }  finally {        tx.close();      }    }    tx=cache.unwrap(Ignite.class).transactions().txStart(OPTIMISTIC,REPEATABLE_READ);    try {      cache.remove(KEY);      tx.commit();    }  finally {      tx.close();    }  }}  }
class C{  public static String encodeFromFile(String filename) throws java.io.IOException {  String encodedData=null;  B64InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4 + 1),40)];    int length=0;    int numBytes=0;    bis=new B64InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  public CoverageAttributeTable(String dcwpath,String libname) throws FormatException {  libraryname=libname;  dirpath=dcwpath + "/" + libraryname;  String cat=dirpath + "/cat";  if (!BinaryFile.exists(cat)) {    cat+=".";  }  DcwRecordFile rf=new DcwRecordFile(cat);  int catcols[]=rf.lookupSchema(CATColumns,true,CATschematype,CATschemalength,false);  List<Object> l=new ArrayList<Object>(rf.getColumnCount());  while (rf.parseRow(l)) {    int topL=((Number)l.get(catcols[2])).intValue();    String desc=(String)l.get(catcols[1]);    String covtype=((String)l.get(catcols[0])).toLowerCase().intern();    coverages.put(covtype,new CoverageEntry(topL,desc));  }  rf.close();  rf=null;  doTileRefStuff(dirpath + "/tileref");}  }
class C{  public boolean insert(long element){  if (size < maxSize) {    add(element);    return false;  } else   if (element > heap[1]) {    heap[1]=element;    updateTop();    return true;  } else {    return false;  }}  }
class C{  @Override public void stopRunning(){  running=false;}  }
class C{  public void deleteGroupChat(String chatId) throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.deleteGroupChat(chatId);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  if (extensionValue == null) {    extensionId=PKIXExtensions.PrivateKeyUsage_Id;    critical=false;    encodeThis();  }  super.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  @Override @SuppressWarnings({"rawtypes","unchecked"}) protected void _write(VCard vcard,List<VCardProperty> properties) throws IOException {  Object previousValue=getCurrentValue();  writer.writeStartVCard();  writer.writeProperty("version",VCardDataType.TEXT,JCardValue.single(targetVersion.getVersion()));  for (  VCardProperty property : properties) {    VCardPropertyScribe scribe=index.getPropertyScribe(property);    JCardValue value;    try {      value=scribe.writeJson(property);    } catch (    SkipMeException e) {      continue;    }catch (    EmbeddedVCardException e) {      continue;    }    String group=property.getGroup();    String name=scribe.getPropertyName().toLowerCase();    VCardParameters parameters=scribe.prepareParameters(property,targetVersion,vcard);    VCardDataType dataType=scribe.dataType(property,targetVersion);    writer.writeProperty(group,name,parameters,dataType,value);  }  writer.writeEndVCard();  setCurrentValue(previousValue);}  }
class C{  public void run(Throwing.Runnable action){  cmdLine.run(action);}  }
class C{  protected boolean isVertexRendered(Context<Graph<V,E>,V> context){  Predicate<Context<Graph<V,E>,V>> vertexIncludePredicate=vv.getRenderContext().getVertexIncludePredicate();  return vertexIncludePredicate == null || vertexIncludePredicate.apply(context);}  }
class C{  private <T extends AlchemyGenericModel>ServiceCall<T> createServiceCall(Map<String,Object> params,AlchemyAPI operation,Class<T> returnType){  final String inputType=getInputFormat(params,IMAGE,URL,HTML);  final String path=AlchemyEndPoints.getPath(operation,inputType);  final RequestBuilder requestBuilder=RequestBuilder.post(path);  if (IMAGE.equals(inputType)) {    if (params.get(IMAGE) instanceof String) {      params.put(IMAGE_POST_MODE,NOT_RAW);    } else {      params.put(IMAGE_POST_MODE,RAW);      final File image=(File)params.get(IMAGE);      if (!image.exists()) {        throw new IllegalArgumentException("The file: " + image.getAbsolutePath() + " does not exist.");      } else {        requestBuilder.body(RequestBody.create(HttpMediaType.BINARY_FILE,(File)params.get(IMAGE)));        params.remove(IMAGE);      }    }  }  params.put(OUTPUT_MODE,"json");  for (  final String param : params.keySet()) {    if (inputType.equals(IMAGE)) {      requestBuilder.query(param,params.get(param));    } else {      requestBuilder.form(param,params.get(param));    }  }  return createServiceCall(requestBuilder.build(),ResponseConverterUtils.getObject(returnType));}  }
class C{  public int expansionNeeded(AABB other){  int total=0;  if (other.minX < minX)   total+=minX - other.minX;  if (other.maxX > maxX)   total+=other.maxX - maxX;  if (other.minY < minY)   total+=minY - other.minY;  if (other.maxY > maxY)   total+=other.maxY - maxY;  if (other.minZ < minZ)   total+=minZ - other.minZ;  if (other.maxZ > maxZ)   total+=other.maxZ - maxZ;  return total;}  }
class C{  public void testGenerateHostLimit() throws Exception {  ArrayList<URLCrawlDatum> list=new ArrayList<URLCrawlDatum>();  list.add(createURLCrawlDatum("http://www.example.com/index1.html",1,1));  list.add(createURLCrawlDatum("http://www.example.com/index2.html",1,1));  list.add(createURLCrawlDatum("http://www.example.com/index3.html",1,1));  createCrawlDB(list);  Configuration myConfiguration=new Configuration(conf);  myConfiguration.setInt(Generator.GENERATOR_MAX_COUNT,2);  Path generatedSegment=generateFetchlist(Integer.MAX_VALUE,myConfiguration,false);  Path fetchlistPath=new Path(new Path(generatedSegment,CrawlDatum.GENERATE_DIR_NAME),"part-00000");  ArrayList<URLCrawlDatum> fetchList=readContents(fetchlistPath);  assertEquals(1,fetchList.size());  myConfiguration=new Configuration(conf);  myConfiguration.setInt(Generator.GENERATOR_MAX_COUNT,3);  generatedSegment=generateFetchlist(Integer.MAX_VALUE,myConfiguration,false);  fetchlistPath=new Path(new Path(generatedSegment,CrawlDatum.GENERATE_DIR_NAME),"part-00000");  fetchList=readContents(fetchlistPath);  assertEquals(2,fetchList.size());  myConfiguration=new Configuration(conf);  myConfiguration.setInt(Generator.GENERATOR_MAX_COUNT,4);  generatedSegment=generateFetchlist(Integer.MAX_VALUE,myConfiguration,false);  fetchlistPath=new Path(new Path(generatedSegment,CrawlDatum.GENERATE_DIR_NAME),"part-00000");  fetchList=readContents(fetchlistPath);  assertEquals(3,fetchList.size());}  }
class C{  public BadPositionCategoryException(String message){  super(message);}  }
class C{  public JSONTokener(InputStream inputStream) throws JSONException {  this(new InputStreamReader(inputStream));}  }
class C{  protected Connection tryMessagesToConnections(List<Message> messages,List<Connection> connections){  for (int i=0, n=connections.size(); i < n; i++) {    Connection con=connections.get(i);    Message started=tryAllMessages(con,messages);    if (started != null) {      return con;    }  }  return null;}  }
class C{  public String globalInfo(){  return "Cluster data using the capopy clustering algorithm, which requires just " + "one pass over the data. Can run in either" + "batch or incremental mode. Results are generally not as good when "+ "running incrementally as the min/max for each numeric attribute is not "+ "known in advance. Has a heuristic (based on attribute std. deviations), "+ "that can be used in batch mode, for setting the T2 distance. The T2 distance "+ "determines how many canopies (clusters) are formed. When the user specifies "+ "a specific number (N) of clusters to generate, the algorithm will return the "+ "top N canopies (as determined by T2 density) when N < number of canopies "+ "(this applies to both batch and incremental learning); "+ "when N > number of canopies, the difference is made up by selecting training "+ "instances randomly (this can only be done when batch training). For more "+ "information see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public void refreshAttacks(){  clearAllAttacks();  for (Enumeration<EntityAction> i=game.getActions(); i.hasMoreElements(); ) {    EntityAction ea=i.nextElement();    if (ea instanceof AttackAction) {      addAttack((AttackAction)ea);    }  }  for (Enumeration<AttackAction> i=game.getCharges(); i.hasMoreElements(); ) {    EntityAction ea=i.nextElement();    if (ea instanceof PhysicalAttackAction) {      addAttack((AttackAction)ea);    }  }  repaint(100);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:13.995 -0400",hash_original_method="F701398B8DEFEDBDFC680CE7749E8EBC",hash_generated_method="7C2EDC33E7104ECFDB7D7540B64FFCAF") private String readAttributeName(boolean returnLowerCase){  skipWhitespace();  int c=find(ATTRIBUTE_NAME_TERMINATORS);  String forSubstring=returnLowerCase ? inputLowerCase : input;  String result=pos < c ? forSubstring.substring(pos,c) : null;  pos=c;  return result;}  }
class C{  private void cmd_report(){  KeyNamePair pp=(KeyNamePair)comboReport.getSelectedItem();  if (pp == null)   return;  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  MPrintFormat pf=null;  int AD_PrintFormat_ID=pp.getKey();  if (AD_PrintFormat_ID == -1) {    int AD_ReportView_ID=m_reportEngine.getPrintFormat().getAD_ReportView_ID();    if (AD_ReportView_ID != 0) {      String name=m_reportEngine.getName();      int index=name.lastIndexOf('_');      if (index != -1)       name=name.substring(0,index);      pf=MPrintFormat.createFromReportView(m_ctx,AD_ReportView_ID,name);    } else {      int AD_Table_ID=m_reportEngine.getPrintFormat().getAD_Table_ID();      pf=MPrintFormat.createFromTable(m_ctx,AD_Table_ID);    }    if (pf != null)     fillComboReport(pf.get_ID()); else     return;  }  if (AD_PrintFormat_ID == -2) {    MPrintFormat current=m_reportEngine.getPrintFormat();    if (current != null) {      pf=MPrintFormat.copyToClient(m_ctx,current.getAD_PrintFormat_ID(),Env.getAD_Client_ID(m_ctx));      if (pf != null)       fillComboReport(pf.get_ID()); else       return;    } else     return;  } else   pf=MPrintFormat.get(Env.getCtx(),AD_PrintFormat_ID,true);  if (m_reportEngine.getPrintFormat() != null) {    pf.setLanguage(m_reportEngine.getPrintFormat().getLanguage());    pf.setTranslationLanguage(m_reportEngine.getPrintFormat().getLanguage());  }  m_reportEngine.setPrintFormat(pf);  revalidate();  cmd_drill();}  }
class C{  protected Expression arg(int opPos) throws TransformerException {  return compile(opPos + 2);}  }
class C{  public static double logGamma(double xx){  double x=xx - 1.0;  double tmp=x + 5.5;  tmp-=(x + 0.5) * Math.log(tmp);  double ser=1.000000000190015;  double[] coeff=cof;  for (int j=0; j <= 5; j++) {    x++;    ser+=coeff[j] / x;  }  return -tmp + Math.log(2.5066282746310005 * ser);}  }
class C{  public void addItem(String generatedName,YeomanGeneratorType selectedType){  if (generatedName == null || "".equals(generatedName)) {    return;  }  if (selectedType == null) {    return;  }  List<String> generatedNames=namesByTypes.get(selectedType);  if (generatedNames == null) {    FoldingPanel foldingPanel=foldingPanelFactory.create(selectedType.getLabelName());    widgetByTypes.put(selectedType,foldingPanel);    view.addFoldingPanel(foldingPanel);    generatedNames=new ArrayList<>();    namesByTypes.put(selectedType,generatedNames);  }  if (generatedNames.contains(generatedName)) {    return;  }  generatedNames.add(generatedName);  GeneratedItemView item=generatedItemViewFactory.create(generatedName,selectedType);  item.setAnchor(view);  widgetByTypes.get(selectedType).add(item);  updateGenerateButton();}  }
class C{  static public Locator southEast(){  return southEast(false);}  }
class C{  public final double squaredDistance(final Entity other){  final Rectangle2D otherArea=other.getArea();  final double otherMiddleX=otherArea.getCenterX();  final double otherMiddleY=otherArea.getCenterY();  final Rectangle2D thisArea=getArea();  final double thisMiddleX=thisArea.getCenterX();  final double thisMiddleY=thisArea.getCenterY();  double xDistance=Math.abs(otherMiddleX - thisMiddleX) - (area.getWidth() + other.area.getWidth()) / 2;  double yDistance=Math.abs(otherMiddleY - thisMiddleY) - (area.getHeight() + other.area.getHeight()) / 2;  if (xDistance < 0) {    xDistance=0;  }  if (yDistance < 0) {    yDistance=0;  }  return xDistance * xDistance + yDistance * yDistance;}  }
class C{  public boolean isSsse3(){  return ssse3;}  }
class C{  public final void connect() throws RcsPermissionDeniedException {  if (!sApiCompatible) {    try {      sApiCompatible=mRcsServiceControl.isCompatible(this);      if (!sApiCompatible) {        throw new RcsPermissionDeniedException("The TAPI client version of the chat service is not compatible with the TAPI service implementation version on this device!");      }    } catch (    RcsServiceException e) {      throw new RcsPermissionDeniedException("The compatibility of TAPI client version with the TAPI service implementation version of this device cannot be checked for the chat service!",e);    }  }  Intent serviceIntent=new Intent(IChatService.class.getName());  serviceIntent.setPackage(RcsServiceControl.RCS_STACK_PACKAGENAME);  mCtx.bindService(serviceIntent,apiConnection,0);}  }
class C{  @Override public boolean isAccountNonExpired(){  return true;}  }
class C{  public int addMultiNewarray(String desc,int dim){  add(MULTIANEWARRAY);  addIndex(constPool.addClassInfo(desc));  add(dim);  growStack(1 - dim);  return dim;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  void handleUnlock(int authenticatedUserId){  if (DEBUG)   Log.d(TAG,"handleUnlock()");  stop();  int currentUserId=mLockPatternUtils.getCurrentUser();  if (authenticatedUserId == currentUserId) {    if (DEBUG)     Log.d(TAG,"Unlocking for user " + authenticatedUserId);    mKeyguardScreenCallback.reportSuccessfulUnlockAttempt();    mKeyguardScreenCallback.dismiss(true);  } else {    Log.d(TAG,"Ignoring unlock for authenticated user (" + authenticatedUserId + ") because the current user is "+ currentUserId);  }}  }
class C{  private int countListenerEvents(){  int count=0;  for (  SupportUpdateListener listener : listeners) {    for (    EventBean[] events : listener.getNewDataList()) {      count+=events.length;    }  }  return count;}  }
class C{  public UnsupportedCallbackException(Callback callback,String msg){  super(msg);  this.callback=callback;}  }
class C{  public boolean addToHistory(Object obj){  if ((m_Editor instanceof GenericObjectEditor) && (obj != null)) {    ((GenericObjectEditor)m_Editor).getHistory().add(obj);    return true;  }  return false;}  }
class C{  protected synchronized void received(int responseCode,String stream,String json){  FollowerInfo result=parseFollowers(stream,json);  if (result != null) {    noError(stream);    cached.put(stream,result);    if (type == Follower.Type.FOLLOWER) {      listener.receivedFollowers(result);      if (hasNewFollowers(result.followers)) {        listener.newFollowers(result);      }    } else     if (type == Follower.Type.SUBSCRIBER) {      listener.receivedSubscribers(result);    }    requested.add(stream);  } else {    String errorMessage="";    if (responseCode == 404) {      errorMessage="Channel not found.";      error(stream,10);    } else     if (responseCode == 200) {      errorMessage="Parse error.";      error(stream,1);    } else     if (responseCode == 401 || responseCode == 403) {      errorMessage="Access denied.";      error(stream,1);    } else     if (responseCode == 422) {      errorMessage="No data for this channel.";      error(stream,10);    } else {      errorMessage="Request error.";      error(stream,1);    }    FollowerInfo errorResult=new FollowerInfo(type,stream,errorMessage);    cached.put(stream,errorResult);    if (type == Follower.Type.FOLLOWER) {      listener.receivedFollowers(errorResult);    } else     if (type == Follower.Type.SUBSCRIBER) {      listener.receivedSubscribers(errorResult);    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public KernelDensityEstimator(double[] data,KernelDensityFunction kernel,double epsilon){  boolean needsort=false;  for (int i=1; i < data.length; i++) {    if (data[i - 1] > data[i]) {      needsort=true;      break;    }  }  if (needsort) {    data=data.clone();    Arrays.sort(data);  }  final double min=data[0];  final double max=data[data.length - 1];  int windows=1 + (int)(Math.log(data.length));  process(data,min,max,kernel,windows,epsilon);}  }
class C{  public DnsDiscovery(String[] hostNames,NetworkParameters netParams){  this.hostNames=hostNames;  this.netParams=netParams;}  }
class C{  protected boolean includeImportTable() throws SQLException {  if (includeSchemas == null) {    return true;  }  if (includeSchemas.contains(importTables.getString("TABLE_SCHEM")) == true) {    return true;  } else {    return false;  }}  }
class C{  public void addStatistics(int seconds){  setStatistic_Count(getStatistic_Count() + 1);  setStatistic_Seconds(getStatistic_Seconds() + seconds);}  }
class C{  private static ClassNode parameterizeLowestUpperBound(final ClassNode lub,final ClassNode a,final ClassNode b,final ClassNode fallback){  if (!lub.isUsingGenerics())   return lub;  ClassNode holderForA=findGenericsTypeHolderForClass(a,lub);  ClassNode holderForB=findGenericsTypeHolderForClass(b,lub);  GenericsType[] agt=holderForA.getGenericsTypes();  GenericsType[] bgt=holderForB.getGenericsTypes();  if (agt == null || bgt == null || agt.length != bgt.length) {    return lub;  }  GenericsType[] lubgt=new GenericsType[agt.length];  for (int i=0; i < agt.length; i++) {    ClassNode t1=agt[i].getType();    ClassNode t2=bgt[i].getType();    ClassNode basicType;    if (areEqualWithGenerics(t1,a) && areEqualWithGenerics(t2,b)) {      basicType=fallback;    } else {      basicType=lowestUpperBound(t1,t2);    }    if (t1.equals(t2)) {      lubgt[i]=new GenericsType(basicType);    } else {      lubgt[i]=GenericsUtils.buildWildcardType(basicType);    }  }  ClassNode plain=lub.getPlainNodeReference();  plain.setGenericsTypes(lubgt);  return plain;}  }
class C{  public static String toString(JSONObject jo) throws JSONException {  StringBuilder sb=new StringBuilder();  sb.append(escape(jo.getString("name")));  sb.append("=");  sb.append(escape(jo.getString("value")));  if (jo.has("expires")) {    sb.append(";expires=");    sb.append(jo.getString("expires"));  }  if (jo.has("domain")) {    sb.append(";domain=");    sb.append(escape(jo.getString("domain")));  }  if (jo.has("path")) {    sb.append(";path=");    sb.append(escape(jo.getString("path")));  }  if (jo.optBoolean("secure")) {    sb.append(";secure");  }  return sb.toString();}  }
class C{  public CreateRequest(String path,LwM2mResource... resources){  this(null,new LwM2mPath(path),null,resources);}  }
class C{  public static String join(Collection c,String delimiter){  StringBuffer buffer=new StringBuffer();  Iterator iter=c.iterator();  while (iter.hasNext()) {    buffer.append(iter.next());    if (iter.hasNext()) {      buffer.append(delimiter);    }  }  return buffer.toString();}  }
class C{  public void onPostSelectedRowChanged(){  if (listbox.getRows().getChildren().isEmpty())   return;  int rowIndex=gridTab.isOpen() ? gridTab.getCurrentRow() : -1;  if (rowIndex >= 0 && pageSize > 0) {    int pgIndex=rowIndex >= 0 ? rowIndex % pageSize : 0;    org.zkoss.zul.Row row=(org.zkoss.zul.Row)listbox.getRows().getChildren().get(pgIndex);    if (!isRowRendered(row,pgIndex)) {      listbox.renderRow(row);    } else {      Row old=renderer.getCurrentRow();      int oldIndex=renderer.getCurrentRowIndex();      renderer.setCurrentRow(row);      if (old != null && old != row && oldIndex >= 0 && oldIndex != gridTab.getCurrentRow()) {        listModel.updateComponent(oldIndex % pageSize);      }    }    if (modeless && !renderer.isEditing()) {      renderer.editCurrentRow();      if (columnOnClick != null && columnOnClick.trim().length() > 0) {        setFocusToField(columnOnClick);        columnOnClick=null;      } else {        renderer.setFocusToEditor();      }    } else {      focusToRow(row);    }  } else   if (rowIndex >= 0) {    org.zkoss.zul.Row row=(org.zkoss.zul.Row)listbox.getRows().getChildren().get(rowIndex);    if (!isRowRendered(row,rowIndex)) {      listbox.renderRow(row);    } else {      Row old=renderer.getCurrentRow();      int oldIndex=renderer.getCurrentRowIndex();      renderer.setCurrentRow(row);      if (old != null && old != row && oldIndex >= 0 && oldIndex != gridTab.getCurrentRow()) {        listModel.updateComponent(oldIndex);      }    }    if (modeless && !renderer.isEditing()) {      renderer.editCurrentRow();      if (columnOnClick != null && columnOnClick.trim().length() > 0) {        setFocusToField(columnOnClick);        columnOnClick=null;      } else {        renderer.setFocusToEditor();      }    } else {      focusToRow(row);    }  }}  }
class C{  public map addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  protected static boolean isTokenCharacter(int ch){  if ((ch < 33) || (ch > 126)) {    return false;  }switch (ch) {case '"':case '(':case ')':case ',':case '/':case ':':case ';':case '<':case '=':case '>':case '?':case '@':case '[':case '\\':case ']':case '{':case '}':    return false;}return true;}  }
class C{  public void addLocalClassPath(ClassLoader loader){  String classpath=null;  if (loader instanceof DynamicClassLoader)   classpath=((DynamicClassLoader)loader).getLocalClassPath(); else   classpath=System.getProperty("java.class.path");  addClassPath(classpath);}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  protected boolean mustAdjustPosition(Balloon balloon){  BalloonAttributes attrs=balloon.getAttributes();  return !(AVKey.SHAPE_NONE.equals(attrs.getLeaderShape()));}  }
class C{  public TriXParser(ValueFactory valueFactory){  super(valueFactory);}  }
class C{  @Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){  if (oldVersion == 1) {    db.execSQL("ALTER TABLE " + ServerConstants.TABLE_NAME + " ADD "+ ServerConstants.CHARSET+ " TEXT AFTER "+ ServerConstants.USE_SSL+ ";");    oldVersion=2;  }  if (oldVersion == 2) {    db.execSQL("CREATE TABLE " + CommandConstants.TABLE_NAME + " ("+ CommandConstants._ID+ " INTEGER PRIMARY KEY AUTOINCREMENT, "+ CommandConstants.COMMAND+ " TEXT NOT NULL, "+ ChannelConstants.SERVER+ " INTEGER"+ ");");    oldVersion=3;  }  if (oldVersion == 3) {    db.execSQL("CREATE TABLE " + AliasConstants.TABLE_NAME + " ("+ AliasConstants._ID+ " INTEGER PRIMARY KEY AUTOINCREMENT, "+ AliasConstants.ALIAS+ " TEXT NOT NULL, "+ AliasConstants.IDENTITY+ " INTEGER"+ ");");    oldVersion=4;  }  if (oldVersion == 4) {    db.execSQL("ALTER TABLE " + ServerConstants.TABLE_NAME + " ADD "+ ServerConstants.NICKSERV_PASSWORD+ " TEXT AFTER "+ ServerConstants.CHARSET+ ";");    db.execSQL("ALTER TABLE " + ServerConstants.TABLE_NAME + " ADD "+ ServerConstants.SASL_USERNAME+ " TEXT AFTER "+ ServerConstants.NICKSERV_PASSWORD+ ";");    db.execSQL("ALTER TABLE " + ServerConstants.TABLE_NAME + " ADD "+ ServerConstants.SASL_PASSWORD+ " TEXT AFTER "+ ServerConstants.SASL_USERNAME+ ";");  }}  }
class C{  public static ColorMatrixRable buildMatrix(float[][] matrix){  if (matrix == null) {    throw new IllegalArgumentException();  }  if (matrix.length != 4) {    throw new IllegalArgumentException();  }  float[][] newMatrix=new float[4][];  for (int i=0; i < 4; i++) {    float[] m=matrix[i];    if (m == null) {      throw new IllegalArgumentException();    }    if (m.length != 5) {      throw new IllegalArgumentException();    }    newMatrix[i]=new float[5];    for (int j=0; j < 5; j++) {      newMatrix[i][j]=m[j];    }  }  ColorMatrixRable8Bit filter=new ColorMatrixRable8Bit();  filter.type=TYPE_MATRIX;  filter.matrix=newMatrix;  return filter;}  }
class C{  @SuppressWarnings("unchecked") private final ArrayList<Object>[] moreComplexRules(ArrayList<Object>[] rules,int numItemsInSet,int numItemsInConsequence,double minConfidence,ArrayList<Hashtable<ItemSet,Integer>> hashtables){  AprioriItemSet newPremise;  ArrayList<Object>[] result, moreResults;  ArrayList<Object> newConsequences, newPremises=new ArrayList<Object>(), newConf=new ArrayList<Object>();  Hashtable<ItemSet,Integer> hashtable;  ArrayList<Object> newLift=null, newLev=null, newConv=null;  newLift=new ArrayList<Object>();  newLev=new ArrayList<Object>();  newConv=new ArrayList<Object>();  if (numItemsInSet > numItemsInConsequence + 1) {    hashtable=hashtables.get(numItemsInSet - numItemsInConsequence - 2);    newConsequences=mergeAllItemSets(rules[1],numItemsInConsequence - 1,m_totalTransactions);    int newNumInConsequence=numItemsInConsequence + 1;    Hashtable<ItemSet,Integer> hashtableForConsequence=hashtables.get(newNumInConsequence - 1);    Enumeration<Object> enu=new WekaEnumeration<Object>(newConsequences);    while (enu.hasMoreElements()) {      AprioriItemSet current=(AprioriItemSet)enu.nextElement();      for (      int m_item : current.m_items) {        if (m_item != -1) {        }      }      current.m_counter=m_counter;      newPremise=subtract(current);      newPremise.m_counter=hashtable.get(newPremise).intValue();      newPremises.add(newPremise);      newConf.add(new Double(confidenceForRule(newPremise,current)));      int consequenceUnconditionedCounter=hashtableForConsequence.get(current).intValue();      double tempLift=liftForRule(newPremise,current,consequenceUnconditionedCounter);      double tempLev=leverageForRule(newPremise,current,newPremise.m_counter,consequenceUnconditionedCounter);      double tempConv=convictionForRule(newPremise,current,newPremise.m_counter,consequenceUnconditionedCounter);      newLift.add(new Double(tempLift));      newLev.add(new Double(tempLev));      newConv.add(new Double(tempConv));    }    result=new ArrayList[rules.length];    result[0]=newPremises;    result[1]=newConsequences;    result[2]=newConf;    result[3]=newLift;    result[4]=newLev;    result[5]=newConv;    pruneRules(result,minConfidence);    moreResults=moreComplexRules(result,numItemsInSet,numItemsInConsequence + 1,minConfidence,hashtables);    if (moreResults != null) {      for (int i=0; i < moreResults[0].size(); i++) {        result[0].add(moreResults[0].get(i));        result[1].add(moreResults[1].get(i));        result[2].add(moreResults[2].get(i));        result[3].add(moreResults[3].get(i));        result[4].add(moreResults[4].get(i));        result[5].add(moreResults[5].get(i));      }    }    return result;  } else {    return null;  }}  }
class C{  private static String normalize(final String path){  String normalized=path;  if (normalized.endsWith("/"))   normalized=normalized.substring(0,normalized.length() - 1);  if (normalized.startsWith("/"))   normalized=normalized.substring(1);  return normalized;}  }
class C{  public static Object[][] sort(Object[][] array,int sortCol,String sortOrder){  ArraySorter sorter=new ArraySorter(array,sortCol,sortOrder);  return sorter.sort();}  }
class C{  public final void testEqualWithContextAndResourceIdParameters(){  assertNotNull(Validators.equal(getContext(),android.R.string.cancel,new EditText(getContext())));}  }
class C{  public boolean isSecure(){  return (correlationContext != null && correlationContext.get(DtlsCorrelationContext.KEY_SESSION_ID) != null);}  }
class C{  private void confWithAttributes(AttributeSet attrs){  TypedArray typedArray=getContext().obtainStyledAttributes(attrs,R.styleable.MultiLevelListView,0,0);  try {    setAlwaysExpanded(typedArray.getBoolean(R.styleable.MultiLevelListView_alwaysExtended,false));    setNestType(NestType.fromValue(typedArray.getInt(R.styleable.MultiLevelListView_nestType,NestType.SINGLE.getValue())));    setList(typedArray.getResourceId(R.styleable.MultiLevelListView_list,0));  }  finally {    typedArray.recycle();  }}  }
class C{  public final LC maxHeight(String height){  setHeight(LayoutUtil.derive(getHeight(),null,null,ConstraintParser.parseUnitValue(height,false)));  return this;}  }
class C{  @RequestMapping(value="/fe/taxreceipts/process/auth",method=RequestMethod.POST) public ResponseEntity<String> auth(){  HttpHeaders responseHeaders=super.createBasicHttpHeaderResponse(APPLICATION_JSON);  Gson gson=new Gson();  ResultResponse resultResponse;  try {    String signature=signatureUtils.generateSignature();    Date currDate=new Date();    OCRTransaction ocrTransaction=new OCRTransaction(signature,currDate,new SimpleDateFormat(Constants.DATE_FORMAT).format(currDate));    ocrTransactionDAO.save(ocrTransaction);    resultResponse=new ResultProcessAuthResponse(true,ocrTransaction.getId(),ocrTransaction.getSignature());  } catch (  Exception ex) {    ex.printStackTrace();    resultResponse=new ResultResponse(false);  }  return new ResponseEntity<>(gson.toJson(resultResponse),responseHeaders,HttpStatus.OK);}  }
class C{  public static Double[] nullToEmpty(Double[] array){  if (array == null || array.length == 0) {    return EMPTY_DOUBLE_OBJECT_ARRAY;  }  return array;}  }
class C{  public static Container encloseIn(int columns,Component... cmps){  return encloseIn(columns,true,cmps);}  }
class C{  protected static void fail(){  System.exit(1);}  }
class C{  @DSModeled() public static Toast makeText(Context context,int resId,int duration) throws Resources.NotFoundException {  return makeText(context,context.getResources().getText(resId),duration);}  }
class C{  public byte readNextByte(){  byte[] bytes=readBytes(1);  return bytes[0];}  }
class C{  protected int readShort(){  return rawData.getShort();}  }
class C{  public void testAsyncRpc_nullResponse(){  FakeConnection fakeConnection=new FakeConnection(RPC_REQUEST);  rpcServer.registerService(fakeServiceImpl);  runHandler(fakeConnection);  assertFalse(fakeConnection.closed);  assertNull(fakeConnection.response);  fakeServiceImpl.callback.run(null);  assertTrue(fakeConnection.response.getCallback());  assertFalse(fakeConnection.response.hasResponseProto());}  }
class C{  private void indexDoc(IndexWriter w,String noteId,String noteName,Paragraph p) throws IOException {  String id=formatId(noteId,p);  Document doc=newDocument(id,noteName,p);  w.addDocument(doc);}  }
class C{  public static boolean find(String str,String regex){  return Pattern.compile(regex).matcher(str).find();}  }
class C{  default R result(S state,Repository repository,LockProvider lockProvider){  return null;}  }
class C{  public Checkpoint(){}  }
class C{  public static void sleep(long millis) throws java.lang.InterruptedException {  return;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:03.757 -0500",hash_original_method="48737B27A1984E395C1B06BCA471AE58",hash_generated_method="FAF14C1DCEFEFDE472765199E90BD518") public static boolean isPhoneNumber(String number){  if (TextUtils.isEmpty(number)) {    return false;  }  Matcher match=Patterns.PHONE.matcher(number);  return match.matches();}  }
class C{  public static TokenSpec findCurrentTokenSpec(){  return findCurrentTokenSpec(null);}  }
class C{  public TDoubleIterator(TDoubleHash hash){  super(hash);  _hash=hash;}  }
class C{  public void initiate(AjaxRequestTarget aTarget,String aFileName){  fileName=aFileName;  String url=getCallbackUrl().toString();  if (addAntiCache) {    url=url + (url.contains("?") ? "&" : "?");    url=url + "antiCache=" + System.currentTimeMillis();  }  aTarget.appendJavaScript("setTimeout(\"window.location.href='" + url + "'\", 100);");}  }
class C{  public static Pattern compile(String regex,int flags){  return new Pattern(regex,flags);}  }
class C{  private void _startScheduledExecutorService(){  DisableWardenAlertsThread disableWardenAlertThread=new DisableWardenAlertsThread();  _scheduledExecutorService.scheduleAtFixedRate(disableWardenAlertThread,0L,TIME_BETWEEN_WARDEN_ALERT_DISABLEMENT_MILLIS,TimeUnit.MILLISECONDS);}  }
class C{  @Override public MetadataIterator iterator(final List<String> classSelectors,final List<Map<String,String>> labelsSelectors) throws IOException {  Set<Integer> called=new HashSet<Integer>();  long selectedmodulus=-1L;  final List<URL> urls=new ArrayList<URL>();  List<Entry<String,DirectoryService.Client>> servers=new ArrayList<Entry<String,DirectoryService.Client>>();synchronized (clientCacheMutex) {    servers.addAll(clientCache.entrySet());  }  Collections.shuffle(servers);  for (  Entry<String,DirectoryService.Client> entry : servers) {    if (!streamingPorts.containsKey(entry.getKey())) {      continue;    }    if (-1L == selectedmodulus) {      selectedmodulus=modulus.get(entry.getKey());    }    if (modulus.get(entry.getKey()) != selectedmodulus) {      continue;    }    if (called.contains(remainder.get(entry.getKey()))) {      continue;    }    String host=hosts.get(entry.getKey());    int port=streamingPorts.get(entry.getKey());    URL url=new URL("http://" + host + ":"+ port+ ""+ Constants.API_ENDPOINT_DIRECTORY_STREAMING_INTERNAL);    urls.add(url);    called.add(remainder.get(entry.getKey()));  }  return new StreamingMetadataIterator(SIPHASH_PSK,classSelectors,labelsSelectors,urls,this.noProxy);}  }
class C{  public static TestDiagnostic fromJavaxToolsDiagnostic(String diagnosticString,boolean noMsgText){  Pair<String,String> trimmed=formatJavaxToolString(diagnosticString,noMsgText);  return fromPatternMatching(DIAGNOSTIC_PATTERN,DIAGNOSTIC_WARNING_PATTERN,trimmed.second,null,trimmed.first);}  }
class C{  public boolean hasTargetMetaData(){  return (m_targetMetaInfo != null);}  }
class C{  @Override protected InputStream openFile(Path curPath) throws IOException {  LOG.info("openFile: curPath = {}",curPath);  path=curPath;  InputStream is=super.openFile(path);  br=new BufferedReader(new InputStreamReader(is));  return is;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.591 -0500",hash_original_method="73417FF22870072B41D9E8892C6ACEAF",hash_generated_method="98D30C9AEE1B66AD2FCFA7D7A2E2B430") private static Message sendMessageSynchronously(Messenger dstMessenger,Message msg){  SyncMessenger sm=SyncMessenger.obtain();  try {    if (dstMessenger != null && msg != null) {      msg.replyTo=sm.mMessenger;synchronized (sm.mHandler.mLockObject) {        dstMessenger.send(msg);        sm.mHandler.mLockObject.wait();      }    } else {      sm.mHandler.mResultMsg=null;    }  } catch (  InterruptedException e) {    sm.mHandler.mResultMsg=null;  }catch (  RemoteException e) {    sm.mHandler.mResultMsg=null;  }  Message resultMsg=sm.mHandler.mResultMsg;  sm.recycle();  return resultMsg;}  }
class C{  public boolean isModifierTransient(){  return isModifierTransient;}  }
class C{  public final void readResponse() throws IOException {  if (hasResponse()) {    responseHeaders.setResponseSource(responseSource);    return;  }  if (responseSource == null) {    throw new IllegalStateException("readResponse() without sendRequest()");  }  if (!responseSource.requiresConnection()) {    return;  }  if (sentRequestMillis == -1) {    if (requestBodyOut instanceof RetryableOutputStream) {      int contentLength=((RetryableOutputStream)requestBodyOut).contentLength();      requestHeaders.setContentLength(contentLength);    }    transport.writeRequestHeaders();  }  if (requestBodyOut != null) {    requestBodyOut.close();    if (requestBodyOut instanceof RetryableOutputStream) {      transport.writeRequestBody((RetryableOutputStream)requestBodyOut);    }  }  transport.flushRequest();  responseHeaders=transport.readResponseHeaders();  responseHeaders.setLocalTimestamps(sentRequestMillis,System.currentTimeMillis());  responseHeaders.setResponseSource(responseSource);  if (responseSource == ResponseSource.CONDITIONAL_CACHE) {    if (cachedResponseHeaders.validate(responseHeaders)) {      release(false);      ResponseHeaders combinedHeaders=cachedResponseHeaders.combine(responseHeaders);      setResponse(combinedHeaders,cachedResponseBody);      OkResponseCache responseCache=client.getOkResponseCache();      responseCache.trackConditionalCacheHit();      responseCache.update(cacheResponse,policy.getHttpConnectionToCache());      return;    } else {      Util.closeQuietly(cachedResponseBody);    }  }  if (hasResponseBody()) {    maybeCache();  }  initContentStream(transport.getTransferStream(cacheRequest));}  }
class C{  public Environment.Variable createSysProperty(String key,String value){  Environment.Variable var=new Environment.Variable();  var.setKey(key);  var.setValue(value);  return var;}  }
class C{  public static RowSummingExactWrapper serializableInstance(){  return new RowSummingExactWrapper(BayesImWrapper.serializableInstance(),new Parameters());}  }
class C{  private static MksTicketResponse checkGetMksTicketResponse(MksTicketResponse mksTicketResponse) throws RpcException {  logger.info("Checking {}",mksTicketResponse);switch (mksTicketResponse.getResult()) {case OK:    break;case SYSTEM_ERROR:  throw new SystemErrorException(mksTicketResponse.getError());case VM_NOT_FOUND:throw new VmNotFoundException(mksTicketResponse.getError());case INVALID_VM_POWER_STATE:throw new InvalidVmPowerStateException(mksTicketResponse.getError());default :throw new RpcException(String.format("Unknown result: %s",mksTicketResponse.getResult()));}return mksTicketResponse;}  }
class C{  public MediaConfig createChannelFileAttachment(String file,MediaConfig config){  config.addCredentials(this);  String xml=POSTFILE(this.url + "/create-channel-attachment",file,config.name,config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    MediaConfig media=new MediaConfig();    media.parseXML(root);    return media;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  public Coordinate(){  this(0.0,0.0);}  }
class C{  public static void logShutdown(final Logger logger,final long endTime){  logger.logMessage(Level.INFO,"DiffTool initiates SHUTDOWN\t" + Time.toClock(endTime));}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  s.writeObject(SerializationTester.test(dtListener) ? dtListener : null);}  }
class C{  @Override public String toString(){  return "Dirichlet(" + Arrays.asList(alphas) + ")";}  }
class C{  public static String toHexString(ByteBuffer buffer,int offset,int size,boolean formatted){  int bufLen=size * 2;  if (formatted) {    bufLen+=size + (7 * ((size + NUM_BYTES_PER_LINE - 1) / NUM_BYTES_PER_LINE));  }  StringBuilder rtn=new StringBuilder(bufLen);  int position=buffer.position();  buffer.position(offset);  size=Math.min(size,buffer.remaining());  for (int i=0; i < size; i++) {    byte b=buffer.get();    byte h=(byte)(b & 0xF0);    h=(byte)(h >>> 4);    h=(byte)(h & 0x0F);    rtn.append(HEX_CHARS[h]);    h=(byte)(b & 0x0F);    rtn.append(HEX_CHARS[h]);    int next=(i + 1);    if (formatted && (next < size)) {      if ((next % NUM_BYTES_PER_LINE) == 0) {        rtn.append("\n");      } else {        rtn.append(" ");        if ((next % NUM_BYTES_PER_BLOCK) == 0) {          rtn.append(" ");        }      }    }  }  buffer.position(position);  return rtn.toString();}  }
class C{  public SurfacePolyline(SurfacePolyline source){  super(source);  this.closed=source.closed;  this.locations=source.locations;}  }
class C{  private void hideProgress(){  findViewById(R.id.progress_bar).setVisibility(View.INVISIBLE);  setViewsEnabled(true,R.id.button_load_credentials,R.id.button_load_hint,R.id.button_save_credential);}  }
class C{  public boolean oppositeColor(int otherSuit){  if ((otherSuit < CLUBS) || (otherSuit > SPADES))   throw new IllegalArgumentException("Suit \"" + suit + "\" is an invalid suit for a card.");  if (otherSuit == suit)   return false;switch (otherSuit) {case CLUBS:    if (suit == SPADES)     break;  return true;case DIAMONDS:if (suit == HEARTS) break;return true;case HEARTS:if (suit == DIAMONDS) break;return true;case SPADES:if (suit == CLUBS) break;return true;}return false;}  }
class C{  public boolean removeEdge(Edge e){  if (!edges.remove(e))   return false;  srcMap.remove(e.getSrc(),e);  tgtMap.remove(e.getTgt(),e);  unitMap.remove(e.srcUnit(),e);  return true;}  }
class C{  public boolean isAutoDecrement(){  return autoDecr;}  }
class C{  public Iterator iterator(){  return getMenuItems().iterator();}  }
class C{  public boolean equals(DD y){  return hi == y.hi && lo == y.lo;}  }
class C{  public void removeAllUsers(){  this.users=new ArrayList<>();  this.fireTableDataChanged();}  }
class C{  public FillFilter(){  this(0xff000000);}  }
class C{  public static void clearBreadcrumb(){  if (ENABLED) {    clearBreadcrumb(Thread.currentThread());    EventIDs.set(null);  }}  }
class C{  public DatasourceArchiveImpl(ArchiveBase<?> archive){  super(archive);}  }
class C{  public static void log(final IStatus status){  if (null != status && Platform.isRunning() && null != context) {    final Bundle bundle=context.getBundle();    if (null != bundle) {      Platform.getLog(bundle).log(status);    }  }}  }
class C{  public SimpleCapabilityProvider(Capability<HANDLER> capability,@Nullable EnumFacing facing,HANDLER instance){  this.capability=capability;  this.instance=instance;  this.facing=facing;}  }
class C{  public AdaptiveParanamer(Paranamer... paranamers){  this.paranamers=paranamers;}  }
class C{  boolean mapNode(int motifNode,Node n){  int[] connections=motif.getConnectionsOfMotifNode(motifNode);  MotifLink[] restrictions=motif.getLinksOfMotifNode(motifNode);  int nrConnections=connections.length;  for (int j=0; j < nrConnections; j++) {    int i=connections[j];    if (mappedNodes[i] != null) {      continue;    }    MotifLink motifLink=restrictions[j];    NodeSet ln=n.neighboursPerType[motifLink.motifLinkID];    if (ln == null) {      return false;    } else {      mapping[i].addRestrictionList(ln,n);      int size=ln.size();      PQmap.add(new PriorityObject(n,motifNode,i,size));    }  }  return true;}  }
class C{  public void configure(){  setCommandStationType(getOptionState(option2Name));  setTurnoutHandling(getOptionState(option3Name));  if (commandStationType == LnCommandStationType.COMMAND_STATION_PR3_ALONE) {    jmri.jmrix.loconet.pr2.LnPr2Packetizer packets=new jmri.jmrix.loconet.pr2.LnPr2Packetizer();    packets.connectPort(this);    this.getSystemConnectionMemo().setLnTrafficController(packets);    this.getSystemConnectionMemo().configureCommandStation(commandStationType,mTurnoutNoRetry,mTurnoutExtraSpace);    this.getSystemConnectionMemo().configureManagersPR2();    packets.startThreads();    LocoNetMessage msg=new LocoNetMessage(6);    msg.setOpCode(0xD3);    msg.setElement(1,0x10);    msg.setElement(2,1);    msg.setElement(3,0);    msg.setElement(4,0);    packets.sendLocoNetMessage(msg);  } else {    LnPacketizer packets=new LnPacketizer();    packets.connectPort(this);    this.getSystemConnectionMemo().setLnTrafficController(packets);    this.getSystemConnectionMemo().configureCommandStation(commandStationType,mTurnoutNoRetry,mTurnoutExtraSpace);    this.getSystemConnectionMemo().configureManagersMS100();    packets.startThreads();    LocoNetMessage msg=new LocoNetMessage(6);    msg.setOpCode(0xD3);    msg.setElement(1,0x10);    msg.setElement(2,0);    if (commandStationType == LnCommandStationType.COMMAND_STATION_STANDALONE) {      msg.setElement(2,3);    }    msg.setElement(3,0);    msg.setElement(4,0);    packets.sendLocoNetMessage(msg);  }}  }
class C{  protected String encodeBody(){  StringBuffer encoding=new StringBuffer();  if (languageRange != null) {    encoding.append(languageRange);  }  if (!parameters.isEmpty()) {    encoding.append(SEMICOLON).append(parameters.encode());  }  return encoding.toString();}  }
class C{  public static <T,U>Map<T,U> nullToEmpty(@Nullable Map<T,U> potentiallyNull){  return firstNonNull(potentiallyNull,ImmutableMap.<T,U>of());}  }
class C{  public VersionedObjectOutput(ObjectOutput out,Version version){  if (version.compareTo(Version.CURRENT) > 0) {    Assert.fail("unexpected version: " + version + ", CURRENT: "+ Version.CURRENT);  }  this.out=out;  this.version=version;}  }
class C{  private void computeTaintInfo(){  taintedDataMap=new TreeMap<String,Map<String,Map<IntRange,Map<String,Set<CallLocationModel>>>>>();  taintSourcesMap=new TreeMap<String,Set<CallLocationModel>>();  Set<MethodOrMethodContext> methodContexts=PTABridge.v().getReachableMethodContexts();  for (  MethodOrMethodContext methodContext : methodContexts) {    SootMethod method=methodContext.method();    String methodName=getSourceMethodID(method);    if (methodName != null) {      SourceLocationTag loc=SootUtils.getMethodLocation(method);      if (loc != null) {        String clsName=loc.getClz();        if (Project.v().isSrcClass(clsName)) {          Map<String,Map<IntRange,Map<String,Set<CallLocationModel>>>> methodMap=taintedDataMap.get(clsName);          if (methodMap == null) {            methodMap=new TreeMap<String,Map<IntRange,Map<String,Set<CallLocationModel>>>>();            taintedDataMap.put(clsName,methodMap);          }          IntRange range=SootUtils.getMethodLineRange(method);          if (range != null) {            Map<IntRange,Map<String,Set<CallLocationModel>>> rangeMap=methodMap.get(methodName);            if (rangeMap == null) {              rangeMap=new TreeMap<IntRange,Map<String,Set<CallLocationModel>>>();              methodMap.put(methodName,rangeMap);            }            Map<String,Set<CallLocationModel>> dataMap=rangeMap.get(range);            if (dataMap == null) {              dataMap=new HashMap<String,Set<CallLocationModel>>();              rangeMap.put(range,dataMap);            }            computeTaintInfoForMethodLocals(methodContext,dataMap);            computeTaintInfoForMethodFieldRefs(methodContext,dataMap);            if (dataMap.isEmpty()) {              rangeMap.remove(range);              if (rangeMap.isEmpty()) {                methodMap.remove(methodName);                if (methodMap.isEmpty())                 taintedDataMap.remove(clsName);              }            }          }        }      }    }  }}  }
class C{  boolean supportsVariableLights(){  String testSysName=ConnectionNameFromSystemName.getPrefixFromName((String)prefixBox.getSelectedItem()) + "L11";  return InstanceManager.lightManagerInstance().supportsVariableLights(testSysName);}  }
class C{  @Deprecated public static <T>PeekingIterator<T> peekingIterator(PeekingIterator<T> iterator){  return checkNotNull(iterator);}  }
class C{  @Override public String toString(){  String responseCode;  try {    responseCode=String.format(Locale.US,"%d",(connection != null) ? connection.getResponseCode() : 200);  } catch (  IOException e) {    responseCode="unknown";  }  return new StringBuilder().append("{Response: ").append(" responseCode: ").append(responseCode).append(", graphObject: ").append(graphObject).append(", error: ").append(error).append("}").toString();}  }
class C{  public NotificationChain basicSetInitializer(Expression newInitializer,NotificationChain msgs){  Expression oldInitializer=initializer;  initializer=newInitializer;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.FORMAL_PARAMETER__INITIALIZER,oldInitializer,newInitializer);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:40.004 -0500",hash_original_method="D2175CC28C327D3A1AEA760A679D2369",hash_generated_method="80D0B91D85C9D2728A674E0E7B1BB8B7") public Builder penaltyFlashScreen(){  return enable(PENALTY_FLASH);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:04.440 -0500",hash_original_method="86E255CE072D46AD6A16D6F678838D23",hash_generated_method="F8C1A4DF4F6558D3827A2824F0C4D016") final DatagramPacket _newDatagram(DatagramPacket datagram,byte[] data){  int fileLength, modeLength;  fileLength=_filename.length();  modeLength=_modeBytes[_mode].length;  data[0]=0;  data[1]=(byte)_type;  System.arraycopy(_filename.getBytes(),0,data,2,fileLength);  data[fileLength + 2]=0;  System.arraycopy(_modeBytes[_mode],0,data,fileLength + 3,modeLength);  datagram.setAddress(_address);  datagram.setPort(_port);  datagram.setData(data);  datagram.setLength(fileLength + modeLength + 3);  return datagram;}  }
class C{  public HeavyVehicleBay(double space,int doors,int bayNumber){  totalSpace=space;  currentSpace=space;  this.doors=doors;  doorsNext=doors;  this.bayNumber=bayNumber;}  }
class C{  public static final String squareToString(int square){  StringBuilder ret=new StringBuilder();  int x=Position.getX(square);  int y=Position.getY(square);  ret.append((char)(x + 'a'));  ret.append((char)(y + '1'));  return ret.toString();}  }
class C{  public boolean isSuccessful(){  return code >= 200 && code < 300;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();}throw new IllegalStateException();}  }
class C{  private static void init(){  initialized=true;  try {    Class.forName("org.slf4j.impl.StaticLoggerBinder");  } catch (  ClassNotFoundException e) {    noLogger=true;    getLogger(LoggerUtil.class).info("No SLF4J compatible logger was found. Using default javacord implementation!");  }}  }
class C{  public tbody addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public Clustering<DendrogramModel> extractClusters(DBIDs ids,DBIDDataStore pi,DoubleDataStore lambda,DoubleDataStore coredist){  FiniteProgress progress=LOG.isVerbose() ? new FiniteProgress("Extracting clusters",ids.size(),LOG) : null;  ArrayDBIDs order=PointerHierarchyRepresentationResult.topologicalSort(ids,pi,lambda);  WritableDataStore<TempCluster> cluster_map=DataStoreUtil.makeStorage(ids,DataStoreFactory.HINT_TEMP,TempCluster.class);  ArrayModifiableDBIDs noise=DBIDUtil.newArray();  ArrayList<TempCluster> toplevel=new ArrayList<>();  DBIDVar olead=DBIDUtil.newVar();  for (DBIDArrayIter clead=order.iter(); clead.valid(); clead.advance()) {    final double dist=lambda.doubleValue(clead);    final double cdist=(coredist != null) ? coredist.doubleValue(clead) : dist;    TempCluster cclus=cluster_map.get(clead);    cluster_map.put(clead,null);    final boolean cSpurious=isSpurious(cclus,cdist <= dist);    pi.assignVar(clead,olead);    if (DBIDUtil.equal(clead,olead) || olead.isEmpty()) {      if (cclus != null) {        if (cclus.isSpurious(minClSize)) {          noise.addDBIDs(cclus.members);        } else {          toplevel.add(cclus);        }        cluster_map.put(clead,null);      } else       if (cSpurious) {        noise.add(clead);      } else {        toplevel.add(new TempCluster(dist,clead));      }      LOG.incrementProcessed(progress);      continue;    }    TempCluster oclus=cluster_map.get(olead);    final double odist=(coredist != null) ? coredist.doubleValue(olead) : dist;    final boolean oSpurious=isSpurious(oclus,odist <= dist);    final TempCluster nclus;    if (!oSpurious && !cSpurious) {      cclus=cclus != null ? cclus : new TempCluster(cdist,clead);      oclus=oclus != null ? oclus : new TempCluster(odist,olead);      nclus=new TempCluster(dist,oclus,cclus);    } else {      if (!oSpurious && oclus != null) {        nclus=oclus.grow(dist,cclus,clead);      } else       if (!cSpurious && cclus != null) {        nclus=cclus.grow(dist,oclus,olead);      } else       if (oclus != null) {        nclus=oclus.grow(dist,cclus,clead).resetAggregate();      } else       if (cclus != null) {        nclus=cclus.grow(dist,oclus,olead).resetAggregate();      } else {        nclus=new TempCluster(dist,clead,olead);      }    }    assert (nclus != null);    cluster_map.put(olead,nclus);    LOG.incrementProcessed(progress);  }  LOG.ensureCompleted(progress);  final Clustering<DendrogramModel> dendrogram=new Clustering<>("Hierarchical Clustering","hierarchical-clustering");  Cluster<DendrogramModel> nclus=null;  if (noise.size() > 0) {    nclus=new Cluster<>("Noise",noise,true,new DendrogramModel(Double.POSITIVE_INFINITY));    dendrogram.addToplevelCluster(nclus);  }  for (  TempCluster clus : toplevel) {    clus.finalizeCluster(dendrogram,nclus,false,hierarchical);  }  return dendrogram;}  }
class C{  public int whichGrabPoint(GrabPoint gp){  GrabPoint[] points=getGrabPoints();  for (int i=0; i < points.length; i++) {    if (gp == points[i]) {      if (gp == gpo) {        return OFFSET_POINT_INDEX;      } else {        return i;      }    }  }  return points.length;}  }
class C{  public static YouTubeFragment newInstance(final String videoId){  final YouTubeFragment youTubeFragment=new YouTubeFragment();  final Bundle bundle=new Bundle();  bundle.putString(KEY_VIDEO_ID,videoId);  youTubeFragment.setArguments(bundle);  return youTubeFragment;}  }
class C{  public static Review first(Cursor c,boolean close){  Review review=null;  if (c.moveToFirst()) {    review=current(c);  }  if (close) {    c.close();  }  return review;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public BinaryRule(short pState,short lState,short rState,double[][][] scores){  this.parentState=pState;  this.leftChildState=lState;  this.rightChildState=rState;  this.scores=scores;}  }
class C{  private static boolean isDefaultPort(String scheme,int port){  return HTTP_SCHEME.equalsIgnoreCase(scheme) && port == HTTP_DEFAULT_PORT || HTTPS_SCHEME.equalsIgnoreCase(scheme) && port == HTTPS_DEFAULT_PORT;}  }
class C{  public void init(){  setInit(true);}  }
class C{  public void test_webapp_structure_status() throws Exception {  doGET(m_serviceURL + "/status");}  }
class C{  public synchronized void addPvChangeListener(PvChangeListener l,int eventMask){  Object oldListener=PvChangeListeners.get(l);  PvChangeListeners.put(l,new Integer(eventMask));  if (oldListener == null) {    log.debug("+PvListener:" + String.valueOf(this) + "->"+ String.valueOf(l));  }}  }
class C{  @Override public void run(){  amIActive=true;  int numFiles;  String fileName;  File file;  int progress=0;  int a, i;  String inputFilesString=null;  String[] imageFiles;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numFiles=imageFiles.length;  if (numFiles < 1) {    showFeedback("At least one file must be specified.");    return;  }  try {    updateProgress("Deleting files:",0);    for (a=0; a < numFiles; a++) {      fileName=imageFiles[a];      file=new File(fileName);      if (file.exists()) {        file.delete();      }      if (fileName.toLowerCase().endsWith(".dep")) {        file=new File(fileName.replace(".dep",".tas"));        if (file.exists()) {          file.delete();        }        file=new File(fileName.replace(".dep",".wstat"));        if (file.exists()) {          file.delete();        }      } else       if (fileName.toLowerCase().endsWith(".shp")) {        file=new File(fileName.replace(".shp",".shx"));        if (file.exists()) {          file.delete();        }        file=new File(fileName.replace(".shp",".dbf"));        if (file.exists()) {          file.delete();        }        file=new File(fileName.replace(".shp",".prj"));        if (file.exists()) {          file.delete();        }        file=new File(fileName.replace(".shp",".sbn"));        if (file.exists()) {          file.delete();        }        file=new File(fileName.replace(".shp",".sbx"));        if (file.exists()) {          file.delete();        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * a / (numFiles - 1));      updateProgress(progress);    }    showFeedback("Operation complete.");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected double[][] computeDistanceMatrix(final List<I> col){  final int size=col.size();  double[][] imat=new double[size][size];  boolean squared=dist instanceof SquaredEuclideanDistanceFunction;  FiniteProgress dprog=LOG.isVerbose() ? new FiniteProgress("Computing distance matrix",(size * (size - 1)) >>> 1,LOG) : null;  for (int x=0; x < size; x++) {    final I ox=col.get(x);    for (int y=x + 1; y < size; y++) {      final I oy=col.get(y);      double distance=dist.distance(ox,oy);      distance*=(squared ? -.5 : (-.5 * distance));      imat[x][y]=distance;      imat[y][x]=distance;    }    if (dprog != null) {      dprog.setProcessed(dprog.getProcessed() + size - x - 1,LOG);    }  }  LOG.ensureCompleted(dprog);  return imat;}  }
class C{  private void updateProductPO(MAcctSchema as){  MClientInfo ci=MClientInfo.get(getCtx(),as.getAD_Client_ID());  if (ci.getC_AcctSchema1_ID() != as.getC_AcctSchema_ID())   return;  StringBuffer sql=new StringBuffer("UPDATE M_Product_PO po " + "SET PriceLastInv = " + "(SELECT currencyConvert(il.PriceActual,i.C_Currency_ID,po.C_Currency_ID,i.DateInvoiced,i.C_ConversionType_ID,i.AD_Client_ID,i.AD_Org_ID) "+ "FROM C_Invoice i, C_InvoiceLine il "+ "WHERE i.C_Invoice_ID=il.C_Invoice_ID"+ " AND po.M_Product_ID=il.M_Product_ID AND po.C_BPartner_ID=i.C_BPartner_ID");  if (DB.isOracle()) {    sql.append(" AND ROWNUM=1 ");  } else {    sql.append(" AND il.C_InvoiceLine_ID = (SELECT MIN(il1.C_InvoiceLine_ID) " + "FROM C_Invoice i1, C_InvoiceLine il1 " + "WHERE i1.C_Invoice_ID=il1.C_Invoice_ID"+ " AND po.M_Product_ID=il1.M_Product_ID AND po.C_BPartner_ID=i1.C_BPartner_ID").append("  AND i1.C_Invoice_ID=").append(get_ID()).append(") ");  }  sql.append("  AND i.C_Invoice_ID=").append(get_ID()).append(") ").append("WHERE EXISTS (SELECT * " + "FROM C_Invoice i, C_InvoiceLine il " + "WHERE i.C_Invoice_ID=il.C_Invoice_ID"+ " AND po.M_Product_ID=il.M_Product_ID AND po.C_BPartner_ID=i.C_BPartner_ID"+ " AND i.C_Invoice_ID=").append(get_ID()).append(")");  int no=DB.executeUpdate(sql.toString(),getTrxName());  log.fine("Updated=" + no);}  }
class C{  public boolean isBurdened(){  if (!isClan()) {    for (    Mounted mounted : getAmmo()) {      if (mounted.getUsableShotsLeft() == 0) {        continue;      }      Mounted weapon=mounted.getLinkedBy();      if ((weapon != null) && weapon.isBodyMounted() && weapon.getType().hasFlag(WeaponType.F_MISSILE)) {        return true;      }    }  }  return false;}  }
class C{  protected boolean hasDividerBeforeChildAt(int childIndex){  if (childIndex == 0) {    return (mShowDividers & SHOW_DIVIDER_BEGINNING) != 0;  } else   if (childIndex == getChildCount()) {    return (mShowDividers & SHOW_DIVIDER_END) != 0;  } else   if ((mShowDividers & SHOW_DIVIDER_MIDDLE) != 0) {    boolean hasVisibleViewBefore=false;    for (int i=childIndex - 1; i >= 0; i--) {      if (getChildAt(i).getVisibility() != GONE) {        hasVisibleViewBefore=true;        break;      }    }    return hasVisibleViewBefore;  }  return false;}  }
class C{  public AttachmentEntry uploadAttachment(File file,BasePageEntry<?> parentPage,String title,String description) throws IOException, ServiceException {  return uploadAttachment(file,parentPage.getSelfLink().getHref(),title,description);}  }
class C{  public void rename(String newName){  this.name=newName;}  }
class C{  @Override public int hashCode(){  return PlainSocketFactory.class.hashCode();}  }
class C{  public void fillRelevantArticles(final Map<String,Object> dataModel,final JSONObject article) throws Exception {  dataModel.put(Common.SIDE_RELEVANT_ARTICLES,articleQueryService.getRelevantArticles(article,Symphonys.getInt("sideRelevantArticlesCnt")));}  }
class C{  private void testDeleteAllMailboxes() throws MailboxException {  LOG.info("deleteAllMailboxes");  mapper.deleteAllMailboxes();  assertEquals(0,mapper.list().size());  fillMailboxList();}  }
class C{  public void init(IWorkbenchWindow window){  this.window=window;}  }
class C{  public final void saveAsSTL(String fileName){  saveAsSTL(fileName,false);}  }
class C{  public Audit(String message,String hostname,JPAEntity entity){  setMessage(message);  setHostName(hostname);  setEntity(entity);}  }
class C{  public TriggerBuilder<T> withDescription(String triggerDescription){  this.description=triggerDescription;  return this;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.463 -0500",hash_original_method="32F3E8827D13E0BAFD4E9DD3BE9CB370",hash_generated_method="109A8D4F1D3CC0C71FA0CA07F80A1FAC") public MessageChannel createMessageChannel(SIPRequest request,MessageProcessor mp,Hop nextHop) throws IOException {  SIPTransaction returnChannel;  Host targetHost=new Host();  targetHost.setHostname(nextHop.getHost());  HostPort targetHostPort=new HostPort();  targetHostPort.setHost(targetHost);  targetHostPort.setPort(nextHop.getPort());  MessageChannel mc=mp.createMessageChannel(targetHostPort);  if (mc == null)   return null;  returnChannel=createClientTransaction(request,mc);  ((SIPClientTransaction)returnChannel).setViaPort(nextHop.getPort());  ((SIPClientTransaction)returnChannel).setViaHost(nextHop.getHost());  addTransactionHash(returnChannel);  return returnChannel;}  }
class C{  public EtagCache(final File file,final long size) throws IOException {  if (DIGEST == null)   throw new IOException("No SHA-1 algorithm available");  cache=DiskLruCache.open(file,1,2,size);}  }
class C{  public static Image verticalPerspective(Image i,float topScaleRatio,float bottomScaleRatio,float verticalShrink){  int[] imageData=i.getRGB();  int sourceWidth=i.getWidth();  int sourceHeight=i.getHeight();  int destinationWidth=(int)(Math.max(topScaleRatio,bottomScaleRatio) * sourceWidth);  int destinationHeight=(int)(verticalShrink * sourceHeight);  int[] destinationArray=new int[destinationWidth * destinationHeight];  float diff;  if (bottomScaleRatio < topScaleRatio) {    float smaller=bottomScaleRatio;    float larger=topScaleRatio;    diff=smaller - larger;  } else {    float larger=bottomScaleRatio;    float smaller=topScaleRatio;    diff=larger - smaller;  }  if (destinationWidth > sourceWidth) {    for (int y=0; y < destinationHeight; y++) {      float positionY=((float)y) / ((float)destinationHeight - 1);      int sourceY=(int)((float)(sourceHeight - 1) * positionY);      float currentRowRatio=(topScaleRatio + (diff * positionY)) / bottomScaleRatio;      int minX=(int)(((float)destinationWidth) * (1 - currentRowRatio));      int maxX=destinationWidth - minX;      float distance=maxX - minX;      for (int x=minX; x < maxX; x++) {        int sourceX=(int)(((float)sourceWidth) * (((float)x - minX) / distance));        destinationArray[x + y * destinationWidth]=imageData[sourceY * sourceWidth + sourceX];      }    }  } else {    for (int y=0; y < destinationHeight; y++) {      float positionY=((float)y) / ((float)destinationHeight);      int sourceY=(int)((float)sourceHeight * positionY);      float currentRowRatio=topScaleRatio + (diff * positionY);      int minX=(int)(((float)destinationWidth) * (1 - currentRowRatio));      int maxX=destinationWidth - minX;      float distance=maxX - minX;      for (int x=minX; x < maxX; x++) {        int sourceX=(int)(((float)sourceWidth) * (((float)x - minX) / distance));        destinationArray[x + y * destinationWidth]=imageData[sourceY * sourceWidth + sourceX];      }    }  }  return Image.createImage(destinationArray,destinationWidth,destinationHeight);}  }
class C{  public static Text[] toTextArray(Document doc,Object o) throws PageException {  if (o instanceof Node[]) {    Node[] nodes=(Node[])o;    if (_isAllOfSameType(nodes,Node.TEXT_NODE))     return (Text[])nodes;    Text[] textes=new Text[nodes.length];    for (int i=0; i < nodes.length; i++) {      textes[i]=toText(doc,nodes[i]);    }    return textes;  } else   if (o instanceof Collection) {    Collection coll=(Collection)o;    Iterator<Object> it=coll.valueIterator();    List<Text> textes=new ArrayList<Text>();    while (it.hasNext()) {      textes.add(toText(doc,it.next()));    }    return textes.toArray(new Text[textes.size()]);  }  Node[] nodes=_toNodeArray(doc,o);  if (nodes != null)   return toTextArray(doc,nodes);  try {    return new Text[]{toText(doc,o)};  } catch (  ExpressionException e) {    throw new XMLException("can't cast Object of type " + Caster.toClassName(o) + " to a XML Text Array");  }}  }
class C{  public void removeAllElements(){  if (null == m_map)   return;  for (int i=0; i < m_firstFree; i++) {    m_map[i]=null;  }  m_firstFree=0;}  }
class C{  public boolean showPopup(){  if (isShowingPopup() || !mIsAttachedToWindow) {    return false;  }  mIsSelectingDefaultActivity=false;  showPopupUnchecked(mInitialActivityCount);  return true;}  }
class C{  @Override public void onNewFrame(final HeadTransform headTransform){  FPSCounter.logFrame();  if (prefShowEnv && !bgEnv.isReady()) {    if (prefShowEnvString.equals("Home Theater"))     bgEnv.init(0); else     bgEnv.init(1);    bgEnv.setFixedModel();    moveThing(bgEnv);  }  Matrix.setLookAtM(mCamera,0,0.0f,0.0f,CAMERA_Z,0.0f,0.0f,0.0f,0.0f,1.0f,0.0f);  GLES20.glClearColor(r,g,b,a);  headTransform.getHeadView(mHeadViewSDK,0);  mHeadViewUse=getHeadView();  if (screen.isLookingAtObject(mHeadViewUse)) {    aimPoint.setAlpha(0);  } else {    aimPoint.setAlpha(1);  }  for (  ButtonThing button : buttonList) {    if (button.isLookingAtObject(mHeadViewUse) && !button.isHidden) {      if (fuseStart == -1) {        fuseStart=SystemClock.elapsedRealtime();        fuseButton=button;      } else       if (fuseButton == button) {        checkFuse(SystemClock.elapsedRealtime());      }    } else     if (fuseButton == button) {      checkFuse(0);      fuseStart=-1;      fuseButton=null;    }  }  Engine.checkGLError("onReadyToDraw");}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image,int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,image.getTransparency());}  }
class C{  public Range adjustToRange(Range range){  if (range != null) {    if (range.getFrom() < from) {      throw new FimInternalError("The Range must begin inside the current Range");    }    if (range.getFrom() < to && range.getTo() > to) {      return new Range(from,range.getTo());    }  }  return new Range(from,to);}  }
class C{  public static boolean containsUUID(UUID uuid){  checkNotNull(uuid);  if (!loaded) {    load();  }  return map.containsKey(uuid);}  }
class C{  public static boolean createNewFolder(String folderPath){  return delFileOrFolder(folderPath) && createFolder(folderPath);}  }
class C{  public void addImplicitCollection(final Class<?> ownerType,final String fieldName){  addImplicitCollection(ownerType,fieldName,null,null);}  }
class C{  private boolean approxEqual(double a,double b){  double THRESHOLD=0.00000001;  double c=a - b;  System.err.println(Math.abs(c) <= THRESHOLD);  return Math.abs(c) <= THRESHOLD;}  }
class C{  public CActionInitialFlowgraphSettings(final JFrame parent){  super("Initial Flow graph Settings");  m_parent=Preconditions.checkNotNull(parent,"IE01845: Parent argument can not be null");  putValue(MNEMONIC_KEY,(int)"HK_MENU_INITIAL_FLOWGRAPH_SETTINGS".charAt(0));}  }
class C{  public static Class<?> forName(String name) throws ClassNotFoundException {  return forName(name,getClassLoader());}  }
class C{  public long nextLong(){  return (long)(-Math.log(Utils.random().nextDouble()) / _gamma);}  }
class C{  public Period plusDays(long daysToAdd){  if (daysToAdd == 0) {    return this;  }  return create(years,months,Math.toIntExact(Math.addExact(days,daysToAdd)));}  }
class C{  ByteVector put11(final int b1,final int b2){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)b1;  data[length++]=(byte)b2;  this.length=length;  return this;}  }
class C{  public boolean doLockForPrimary(boolean tryLock){  boolean locked=lockPrimaryStateReadLock(tryLock);  if (!locked) {    return false;  }  boolean isPrimary=false;  try {    checkForPrimary();    if (cache.isCacheAtShutdownAll()) {      throw new CacheClosedException("Cache is shutting down");    }    isPrimary=true;  }  finally {    if (!isPrimary) {      doUnlockForPrimary();    }  }  return true;}  }
class C{  public int indexOf(Comparable seriesKey){  assert seriesKey instanceof String;  return indexOfGroupName((String)seriesKey);}  }
class C{  private Map<String,Type> findTypesIn(Object model){  final Map<String,Type> map=new HashMap<>();  findTypesIn(requireNonNull(model),map);  return map;}  }
class C{  public static Hashtable scanTag(Reader in) throws IOException {  Hashtable atts=new Hashtable();  skipSpace(in);  while (c >= 0 && c != '>') {    String att=scanIdentifier(in);    String val="";    skipSpace(in);    if (c == '=') {      int quote=-1;      c=in.read();      skipSpace(in);      if ((c == '\'') || (c == '\"')) {        quote=c;        c=in.read();      }      StringBuffer buf=new StringBuffer();      while ((c > 0) && (((quote < 0) && (c != ' ') && (c != '\t')&& (c != '\n')&& (c != '\r')&& (c != '>')) || ((quote >= 0) && (c != quote)))) {        buf.append((char)c);        c=in.read();      }      if (c == quote) {        c=in.read();      }      skipSpace(in);      val=buf.toString();    }    if (!val.equals("")) {      atts.put(att.toLowerCase(java.util.Locale.ENGLISH),val);    }    while (true) {      if ((c == '>') || (c < 0) || ((c >= 'a') && (c <= 'z'))|| ((c >= 'A') && (c <= 'Z'))|| ((c >= '0') && (c <= '9'))|| (c == '_'))       break;      c=in.read();    }  }  return atts;}  }
class C{  public T caseStringLiteral(StringLiteral object){  return null;}  }
class C{  public String readFileContent(File file){  StringBuilder fileContentBuilder=new StringBuilder();  if (file.exists()) {    String stringLine;    try {      FileReader fileReader=new FileReader(file);      BufferedReader bufferedReader=new BufferedReader(fileReader);      while ((stringLine=bufferedReader.readLine()) != null) {        fileContentBuilder.append(stringLine + "\n");      }      bufferedReader.close();      fileReader.close();    } catch (    FileNotFoundException e) {      e.printStackTrace();    }catch (    IOException e) {      e.printStackTrace();    }  }  return fileContentBuilder.toString();}  }
class C{  public static String readString(){  if (isEmpty())   throw new RuntimeException("Reading from empty input stream");  StringBuilder sb=new StringBuilder();  while (!isEmpty()) {    char c=readChar();    sb.append(c);  }  return sb.toString();}  }
class C{  void visitAnnotations(List<? extends AnnotationTree> annotations,BreakOrNot breakBefore,BreakOrNot breakAfter){  if (!annotations.isEmpty()) {    if (breakBefore.isYes()) {      builder.breakToFill(" ");    }    boolean first=true;    for (    AnnotationTree annotation : annotations) {      if (!first) {        builder.breakToFill(" ");      }      scan(annotation,null);      first=false;    }    if (breakAfter.isYes()) {      builder.breakToFill(" ");    }  }}  }
class C{  @Override protected Void doInBackground(Void... notUsed){  MilStd2525.initializeRenderer(getApplicationContext());  return null;}  }
class C{  @Override public boolean isComplete(){  return getProcessed() == total;}  }
class C{  public boolean canIndex(){  return true;}  }
class C{  public NotificationChain basicSetBody(Block newBody,NotificationChain msgs){  Block oldBody=body;  body=newBody;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.N4_FIELD_ACCESSOR__BODY,oldBody,newBody);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public boolean voidIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_VOID);  if (m_processMsg != null)   return false;  if (DOCSTATUS_Closed.equals(getDocStatus()) || DOCSTATUS_Reversed.equals(getDocStatus()) || DOCSTATUS_Voided.equals(getDocStatus())) {    m_processMsg="Document Closed: " + getDocStatus();    setDocAction(DOCACTION_None);    return false;  }  if (DOCSTATUS_Drafted.equals(getDocStatus()) || DOCSTATUS_Invalid.equals(getDocStatus()) || DOCSTATUS_InProgress.equals(getDocStatus())|| DOCSTATUS_Approved.equals(getDocStatus())|| DOCSTATUS_NotApproved.equals(getDocStatus())) {    MInvoiceLine[] lines=getLines(false);    for (int i=0; i < lines.length; i++) {      MInvoiceLine line=lines[i];      BigDecimal old=line.getQtyInvoiced();      if (old.compareTo(Env.ZERO) != 0) {        line.setQty(Env.ZERO);        line.setTaxAmt(Env.ZERO);        line.setLineNetAmt(Env.ZERO);        line.setLineTotalAmt(Env.ZERO);        line.addDescription(Msg.getMsg(getCtx(),"Voided") + " (" + old+ ")");        if (line.getM_InOutLine_ID() != 0) {          MInOutLine ioLine=new MInOutLine(getCtx(),line.getM_InOutLine_ID(),get_TrxName());          ioLine.setIsInvoiced(false);          ioLine.save(get_TrxName());          line.setM_InOutLine_ID(0);        }        line.save(get_TrxName());      }    }    addDescription(Msg.getMsg(getCtx(),"Voided"));    setIsPaid(true);    setC_Payment_ID(0);  } else {    return reverseCorrectIt();  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_VOID);  if (m_processMsg != null)   return false;  setProcessed(true);  setDocAction(DOCACTION_None);  return true;}  }
class C{  public TCPOutputStream(OutputStream outputStream){  this.outputStream=outputStream;  frame=!(outputStream instanceof GoogleRelayedCandidateSocket.TCPOutputStream);}  }
class C{  private boolean igContainsInitiators(StorageSystem storage,CIMInstance igInstance,List<String> initiatorsInDb){  CIMObjectPath igPath=igInstance.getObjectPath();  CloseableIterator<CIMInstance> initiatorsForIg=null;  try {    initiatorsForIg=_helper.getAssociatorInstances(storage,igPath,null,SmisConstants.CP_SE_STORAGE_HARDWARE_ID,null,null,SmisConstants.PS_STORAGE_ID);    if (initiatorsForIg != null) {      while (initiatorsForIg.hasNext()) {        CIMInstance initiatorInstance=initiatorsForIg.next();        String initiatorPort=CIMPropertyFactory.getPropertyValue(initiatorInstance,SmisConstants.CP_STORAGE_ID);        _log.info(String.format("mapInitiatorsToInitiatorGroups - igPath = %s has initiator %s",igPath,initiatorPort));        if (initiatorsInDb.contains(initiatorPort)) {          return true;        }      }    }  } catch (  Exception e) {  } finally {    if (initiatorsForIg != null) {      initiatorsForIg.close();    }  }  return false;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.PRIMITIVE_TYPE__DECLARED_ELEMENT_TYPE:    return getDeclaredElementType();case TypesPackage.PRIMITIVE_TYPE__ASSIGNMENT_COMPATIBLE:  if (resolve)   return getAssignmentCompatible();return basicGetAssignmentCompatible();case TypesPackage.PRIMITIVE_TYPE__AUTOBOXED_TYPE:if (resolve) return getAutoboxedType();return basicGetAutoboxedType();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public KeyboardControlConfig(java.awt.Frame parent,boolean modal){  super(parent,modal);  initComponents();}  }
class C{  public Matrix arrayLeftDivideEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=B.A[i][j] / A[i][j];    }  }  return this;}  }
class C{  public static void removeDivider(Window window){  int id=NativeResources.getIdentifier(IDENTIFIER_NAME_DIVIDER);  View divider=window.findViewById(id);  if (divider != null)   divider.setVisibility(View.GONE);}  }
class C{  public static byte[] readBytesFromByteBuffer(ByteBuffer byteBuffer){  byte[] buffer=new byte[byteBuffer.remaining()];  byteBuffer.get(buffer);  return buffer;}  }
class C{  private void updateFlagsForExportGroups(){  DbClient dbClient=getDbClient();  List<URI> exportGroupURIs=dbClient.queryByType(ExportGroup.class,false);  Iterator<ExportGroup> exportGroups=dbClient.queryIterativeObjects(ExportGroup.class,exportGroupURIs);  while (exportGroups.hasNext()) {    ExportGroup exportGroup=exportGroups.next();    log.debug("Examining export group (id={}) for upgrade",exportGroup.getId().toString());    if (checkIfInitiatorsForRPAfterMigration(exportGroup.getInitiators())) {      log.info("Export group (id={}) must be upgraded",exportGroup.getId().toString());      exportGroup.addInternalFlags(Flag.RECOVERPOINT);      dbClient.persistObject(exportGroup);      log.info("Marked export group (id={}) as RecoverPoint",exportGroup.getId().toString());    }  }}  }
class C{  void relaxNodeLogic(final Link l,final PseudoRemovePriorityQueue<Node> pendingNodes,final double currTime,final double currCost,final Node toNode,final PreProcessDijkstra.DeadEndData ddOutData,final Person person,final Vehicle vehicle,int itID,Map<Id<Node>,DijkstraNodeData> nodeData){  addToPendingNodes(l,l.getToNode(),pendingNodes,currTime,currCost,toNode,person,vehicle,itID,nodeData);}  }
class C{  public void optimizeIndex(){  try {    solrDao.optimize();  } catch (  IOException|SolrServerException ex) {    LOGGER.error("Cannot optimize index",ex);  }}  }
class C{  @Override public double evaluateAttribute(int att) throws Exception {  if (m_eigenvalues == null) {    throw new Exception("Principal components hasn't been built yet!");  }  if (m_transBackToOriginal) {    return 1.0;  }  double cumulative=0.0;  for (int i=m_numAttribs - 1; i >= m_numAttribs - att - 1; i--) {    cumulative+=m_eigenvalues[m_sortedEigens[i]];  }  return 1.0 - cumulative / m_sumOfEigenValues;}  }
class C{  public Protos.TaskInfo constructMesosTaskInfo(Config heronConfig,Config heronRuntime){  String taskIdStr=this.taskId;  Protos.TaskID mesosTaskID=Protos.TaskID.newBuilder().setValue(taskIdStr).build();  Protos.TaskInfo.Builder taskInfo=Protos.TaskInfo.newBuilder().setName(baseContainer.name).setTaskId(mesosTaskID);  Protos.Environment.Builder environment=Protos.Environment.newBuilder();  Set<String> builtinEnvNames=new HashSet<>();  for (  Protos.Environment.Variable variable : environment.getVariablesList()) {    builtinEnvNames.add(variable.getName());  }  for (  BaseContainer.EnvironmentVariable ev : baseContainer.environmentVariables) {    environment.addVariables(Protos.Environment.Variable.newBuilder().setName(ev.name).setValue(ev.value));  }  taskInfo.addResources(scalarResource(TaskResources.CPUS_RESOURCE_NAME,baseContainer.cpu)).addResources(scalarResource(TaskResources.MEM_RESOURCE_NAME,baseContainer.memInMB)).addResources(scalarResource(TaskResources.DISK_RESOURCE_NAME,baseContainer.diskInMB)).addResources(rangeResource(TaskResources.PORT_RESOURCE_NAME,this.freePorts.get(0),this.freePorts.get(this.freePorts.size() - 1))).setSlaveId(this.offer.getSlaveId());  int containerIndex=TaskUtils.getContainerIndexForTaskId(taskIdStr);  String commandStr=executorCommand(heronConfig,heronRuntime,containerIndex);  Protos.CommandInfo.Builder command=Protos.CommandInfo.newBuilder();  List<Protos.CommandInfo.URI> uriProtos=new ArrayList<>();  for (  String uri : baseContainer.dependencies) {    uriProtos.add(Protos.CommandInfo.URI.newBuilder().setValue(uri).setExtract(true).build());  }  command.setValue(commandStr).setShell(baseContainer.shell).setEnvironment(environment).addAllUris(uriProtos);  if (!baseContainer.runAsUser.isEmpty()) {    command.setUser(baseContainer.runAsUser);  }  taskInfo.setCommand(command);  return taskInfo.build();}  }
class C{  @Override public synchronized boolean add(E object){  if (elementCount == elementData.length) {    growByOne();  }  elementData[elementCount++]=object;  modCount++;  return true;}  }
class C{  private void initPanel(){  if (sensorType.getSelectedItem() == "TileSensor") {    clearSensorPanel();    setTitle("Add a tile sensor");    currentSensorPanel=new TileSensorPanel(entity);    mainPanel.add(currentSensorPanel);  } else   if (sensorType.getSelectedItem() == "SmellSensor") {    clearSensorPanel();    setTitle("Add a smell sensor");    currentSensorPanel=new SmellSensorPanel(entity);    mainPanel.add(currentSensorPanel);  } else   if (sensorType.getSelectedItem() == "Tile Set") {    clearSensorPanel();    setTitle("Add a grid of tile sensors");    currentSensorPanel=new TileSetPanel(entity);    mainPanel.add(currentSensorPanel);  } else   if (sensorType.getSelectedItem() == "Hearing") {    clearSensorPanel();    setTitle("Add a hearing sensor");    currentSensorPanel=new HearingSensorPanel(entity);    mainPanel.add(currentSensorPanel);  }  pack();  setLocationRelativeTo(null);}  }
class C{  public void write(int b) throws IOException {  out.write(b);  md5.Update((byte)b);}  }
class C{  XSLTAttributeDef(String namespace,String name,boolean required,boolean supportsAVT,boolean prefixedQNameValAllowed,int errorType,String k1,int v1,String k2,int v2){  this.m_namespace=namespace;  this.m_name=name;  this.m_type=prefixedQNameValAllowed ? this.T_ENUM_OR_PQNAME : this.T_ENUM;  this.m_required=required;  this.m_supportsAVT=supportsAVT;  this.m_errorType=errorType;  m_enums=new StringToIntTable(2);  m_enums.put(k1,v1);  m_enums.put(k2,v2);}  }
class C{  private int charGroup(char c){  int result;  result=0;  if ((c >= 'a') && (c <= 'z')) {    result=2;  } else   if ((c >= '0') && (c <= '9')) {    result=1;  }  return result;}  }
class C{  public static SortedSetDocValues singleton(SortedDocValues dv){  return new SingletonSortedSetDocValues(dv);}  }
class C{  public static CorsServiceBuilder forAnyOrigin(){  return new CorsServiceBuilder();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:14.543 -0500",hash_original_method="94707AFC02D921BFDEDD2070AC4B80C0",hash_generated_method="32F6F382E99E870FA8001B4ADA028C03") static TextLine obtain(){  TextLine tl;synchronized (sCached) {    for (int i=sCached.length; --i >= 0; ) {      if (sCached[i] != null) {        tl=sCached[i];        sCached[i]=null;        return tl;      }    }  }  tl=new TextLine();  if (DEBUG) {    Log.v("TLINE","new: " + tl);  }  return tl;}  }
class C{  private void displayCalendar(){  ListItem listItem=fieldResource.getSelectedItem();  if (listItem == null)   return;  KeyNamePair pp=new KeyNamePair((Integer)listItem.getValue(),listItem.getLabel());  int S_Resource_ID=pp.getKey();  m_mAssignment.setS_Resource_ID(S_Resource_ID);  Date date=fieldDate.getValue();  if (date == null)   date=new Timestamp(System.currentTimeMillis());  m_loading=true;  schedulePane.recreate(S_Resource_ID,date);  m_loading=false;  invalidate();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private FloatMath_Delegate(){}  }
class C{  public static EndpointDescription[] selectByUrl(EndpointDescription[] searchSet,String url){  List<EndpointDescription> result=new ArrayList<EndpointDescription>();  for (  EndpointDescription d : searchSet)   if (url.equalsIgnoreCase(d.getEndpointUrl()))   result.add(d);  return result.toArray(new EndpointDescription[result.size()]);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(Constants.INDENT);  buffer.append("pInitVector: ");  buffer.append(pInitVector);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("ulPasswordLen: ");  buffer.append(pPassword.length);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pPassword: ");  buffer.append(pPassword);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("ulSaltLen: ");  buffer.append(pSalt.length);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pSalt: ");  buffer.append(pSalt);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("ulIteration: ");  buffer.append(ulIteration);  return buffer.toString();}  }
class C{  private void signalNotFull(){  final ReentrantLock putLock=this.putLock;  putLock.lock();  try {    notFull.signal();  }  finally {    putLock.unlock();  }}  }
class C{  @SuppressWarnings("unchecked") @Override public DescriptivePiStatistics statistics(Set<? extends Vertex> vertices){  DescriptivePiStatistics stats=factory.newInstance();  int p0=0;  Set<SampledVertex> samples=SnowballPartitions.<SampledVertex>createSampledPartition((Set<SampledVertex>)vertices);  for (  SampledVertex vertex : samples) {    double p=piEstimator.probability(vertex);    if (p > 0) {      stats.addValue(vertex.getNeighbours().size(),p);    } else     p0++;  }  if (p0 > 0)   logger.warn(String.format("There are %1$s vertices with probability 0!",p0));  return stats;}  }
class C{  public java.lang.Object lookup(String name) throws NamingException {  if (debug) {    System.out.println("Looking up: " + name);  }  return lookup(new CompositeName(name));}  }
class C{  public double evaluate(double[] values){  double sum=0.0;  for (  PolynomialTerm term1 : this.terms) {    sum+=term1.evaluate(values);  }  return sum;}  }
class C{  public TriggerBuilder<T> withIdentity(String name){  key=new TriggerKey(name,null);  return this;}  }
class C{  @After public void tearDown(){  problem=null;  population=null;}  }
class C{  public SslScriptCommand(Configuration configuration,String resourcePath){  super(configuration,resourcePath);}  }
class C{  Writer write(Writer writer,int indentFactor,int indent) throws JSONException {  try {    boolean commanate=false;    int length=this.length();    writer.write('[');    if (length == 1) {      JSONObject.writeValue(writer,this.myArrayList.get(0),indentFactor,indent);    } else     if (length != 0) {      final int newindent=indent + indentFactor;      for (int i=0; i < length; i+=1) {        if (commanate) {          writer.write(',');        }        if (indentFactor > 0) {          writer.write('\n');        }        JSONObject.indent(writer,newindent);        JSONObject.writeValue(writer,this.myArrayList.get(i),indentFactor,newindent);        commanate=true;      }      if (indentFactor > 0) {        writer.write('\n');      }      JSONObject.indent(writer,indent);    }    writer.write(']');    return writer;  } catch (  IOException e) {    throw new JSONException(e);  }}  }
class C{  public ArrayMap(){  mHashes=EMPTY_INTS;  mArray=EMPTY_OBJECTS;  mSize=0;}  }
class C{  public RefUpdate.Result createEdit(Change change,PatchSet ps) throws AuthException, IOException, ResourceConflictException, OrmException {  if (!currentUser.get().isIdentifiedUser()) {    throw new AuthException("Authentication required");  }  IdentifiedUser me=currentUser.get().asIdentifiedUser();  String refPrefix=RefNames.refsEditPrefix(me.getAccountId(),change.getId());  try {    ChangeControl c=changeControlFactory.controlFor(reviewDb.get(),change,me);    if (!c.canAddPatchSet(reviewDb.get())) {      return RefUpdate.Result.REJECTED;    }  } catch (  NoSuchChangeException e) {    return RefUpdate.Result.NO_CHANGE;  }  try (Repository repo=gitManager.openRepository(change.getProject())){    Map<String,Ref> refs=repo.getRefDatabase().getRefs(refPrefix);    if (!refs.isEmpty()) {      throw new ResourceConflictException("edit already exists");    }    try (RevWalk rw=new RevWalk(repo)){      ObjectId revision=ObjectId.fromString(ps.getRevision().get());      String editRefName=RefNames.refsEdit(me.getAccountId(),change.getId(),ps.getId());      Result res=update(repo,me,editRefName,rw,ObjectId.zeroId(),revision,TimeUtil.nowTs());      indexer.index(reviewDb.get(),change);      return res;    }   } }  }
class C{  public Quote(int i){  cusip=1000000000 - i;  quoteId=i;  quoteIdStr=Integer.toString(quoteId);  dealerCode=cusip;  String[] arr1={"moving","binding","non binding","not to exceed","storage","auto transport","mortgage"};  quoteType=arr1[i % 7];  uniqueQuoteType="quoteType" + Integer.toString(i);  String[] arr2={"dealer1","dealer2","dealer3","dealer4","dealer5","dealer6","dealer7"};  dealerPortfolio=arr2[i % 7];  String[] arr3={"channel1","channel2","channel3","channel4","channel5","channel6","channel7"};  channelName=arr3[i % 7];  String[] arr4={"priceType1","priceType2","priceType3","priceType4","priceType5","priceType6","priceType7"};  priceType=arr4[i % 7];  price=(i / 10) * 8;  lowerQty=i + 100;  upperQty=i + 1000;  if ((i % 12) == 0) {    ytm=upperQty - lowerQty;  } else {    ytm=((upperQty - lowerQty) / 12) * (i % 12);  }  restrict.add(new Restricted(i));}  }
class C{  public ExceptionMessage create(ExceptionContext exceptionContext1,ExceptionContext exceptionContext2){  ExceptionMessage returnValue;  returnValue=new ExceptionMessage(m_exceptionMessage);  returnValue.addExceptionContext(exceptionContext1);  returnValue.addExceptionContext(exceptionContext2);  return returnValue;}  }
class C{  public void revokeDBCredential(String owner,String dbGroupName){  getMetaDb().removeDBCredential(owner,dbGroupName);}  }
class C{  public NormalDistribution(final double stdDeviation){  this(stdDeviation,0.0);}  }
class C{  public static void illegalCode(Class<?> destination,Class<?> source,Throwable e){  String additionalInformation=e.getMessage().split(",")[1];  throw new IllegalCodeException(MSG.INSTANCE.message(illegalCode,destination.getSimpleName(),source.getSimpleName(),additionalInformation));}  }
class C{  public StateMachineTransitionBuilder(ObjectPostProcessor<Object> objectPostProcessor,boolean allowConfigurersOfSameType){  super(objectPostProcessor,allowConfigurersOfSameType);}  }
class C{  public void selectionStarted(SelectionEvent evt){}  }
class C{  public ToStringBuilder append(String fieldName,char value){  style.append(buffer,fieldName,value);  return this;}  }
class C{  public static Map<Integer,Set<CTag>> loadViewTags(final CConnection connection,final String tableName,final String containerColumn,final int containerId,final CTagManager viewTagManager) throws SQLException {  final Map<Integer,Set<CTag>> setTag=new HashMap<Integer,Set<CTag>>();  final String query="SELECT " + CTableNames.TAGGED_VIEWS_TABLE + ".view_id, tag_id"+ " FROM "+ CTableNames.TAGGED_VIEWS_TABLE+ " JOIN "+ tableName+ " ON "+ tableName+ ".view_id = "+ CTableNames.TAGGED_VIEWS_TABLE+ ".view_id"+ " WHERE "+ containerColumn+ " = "+ containerId+ " ORDER BY view_id";  final ResultSet resultSet=connection.executeQuery(query,true);  try {    int currentView=0;    Set<CTag> currentTags=new HashSet<CTag>();    while (resultSet.next()) {      final int view=resultSet.getInt("view_id");      final int tagId=resultSet.getInt("tag_id");      if (currentView == 0) {        currentView=view;      }      if (currentView != view) {        setTag.put(currentView,currentTags);        currentTags=new HashSet<CTag>();        currentView=view;      }      currentTags.add(CTagHelpers.findTag(viewTagManager.getRootTag(),tagId));    }    if (!currentTags.isEmpty()) {      setTag.put(currentView,currentTags);    }  }  finally {    resultSet.close();  }  return setTag;}  }
class C{  public static <E>List<E> of(E e1,E e2,E e3,E e4,E e5){  return new ImmutableCollections.ListN<E>(e1,e2,e3,e4,e5);}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public final boolean isEnabled(){  return enabled;}  }
class C{  protected ReadOnlyLeafData(final AbstractFixedByteArrayBuffer buf,final IRabaCoder keysCoder,final IRabaCoder valuesCoder){  if (buf == null)   throw new IllegalArgumentException();  if (keysCoder == null)   throw new IllegalArgumentException();  if (valuesCoder == null)   throw new IllegalArgumentException();  int pos=O_TYPE;  final byte type=buf.getByte(pos);  pos+=SIZEOF_TYPE;  final boolean doubleLinked;switch (type) {case NODE:    throw new AssertionError();case LEAF:  doubleLinked=false;break;case LINKED_LEAF:doubleLinked=true;break;default :throw new AssertionError("type=" + type);}if (doubleLinked) {pos+=SIZEOF_ADDR * 2;}final int version=buf.getShort(pos);pos+=SIZEOF_VERSION;switch (version) {case VERSION0:case VERSION1:break;default :throw new AssertionError("version=" + version);}flags=buf.getShort(pos);pos+=SIZEOF_FLAGS;final boolean hasVersionTimestamps=((flags & FLAG_VERSION_TIMESTAMPS) != 0);final boolean hasDeleteMarkers=((flags & FLAG_DELETE_MARKERS) != 0);final boolean hasRawRecords=((flags & FLAG_RAW_RECORDS) != 0);this.nkeys=buf.getInt(pos);pos+=SIZEOF_NKEYS;final int keysSize=buf.getInt(pos);pos+=SIZEOF_KEYS_SIZE;final int valuesSize=buf.getInt(pos);pos+=SIZEOF_KEYS_SIZE;this.keys=keysCoder.decode(buf.slice(pos,keysSize));pos+=keysSize;if (nkeys != keys.size()) throw new RuntimeException("nkeys=" + nkeys + ", keys.size="+ keys.size());this.vals=valuesCoder.decode(buf.slice(pos,valuesSize));pos+=valuesSize;if (nkeys != vals.size()) throw new RuntimeException("nkeys=" + nkeys + ", vals.size="+ vals.size());if (hasDeleteMarkers) {O_deleteMarkers=pos;pos+=BytesUtil.bitFlagByteLength(nkeys);} else {O_deleteMarkers=-1;}if (hasVersionTimestamps) {versionTimestampBits=buf.getByte(pos);pos++;O_versionTimestamps=pos;minVersionTimestamp=buf.getLong(pos);pos+=(2 * SIZEOF_TIMESTAMP) + BytesUtil.bitFlagByteLength(nkeys * versionTimestampBits);} else {O_versionTimestamps=-1;versionTimestampBits=0;minVersionTimestamp=-1L;}if (hasRawRecords) {O_rawRecords=pos;pos+=BytesUtil.bitFlagByteLength(nkeys);} else {O_rawRecords=-1;}this.b=buf;}  }
class C{  public static String convertDateToString(Date aDate){  return getDateTime(getDatePattern(),aDate);}  }
class C{  private static String removePrefix(String aType){  return aType.replace("_(" + AnnotationState.AGREE.name() + ")","").replace("_(" + AnnotationState.USE.name() + ")","").replace("_(" + AnnotationState.DISAGREE.name() + ")","").replace("_(" + AnnotationState.DO_NOT_USE.name() + ")","").replace("_(" + AnnotationState.NOT_SUPPORTED.name() + ")","");}  }
class C{  public static ExceptionMessage retrieveExceptionMessage(String index) throws MessageTranslatorException {  String code;  String message;  String field=null;  try {    message=getPropAsString(index);    code=getPropAsString(index + CODE_SUFFIX);  } catch (  IOException e) {    throw new MessageTranslatorException(e);  }  try {    field=getPropAsString(index + FIELD_REFERENCE_SUFFIX);  } catch (  PropertyNotFoundException e) {  }catch (  IOException e) {    throw new MessageTranslatorException(e);  }  ExceptionMessage exceptionMessage;  exceptionMessage=new ExceptionMessage(new ExceptionCode(code,field),message);  return exceptionMessage;}  }
class C{  public JSONObject put(String key,double value) throws JSONException {  this.put(key,new Double(value));  return this;}  }
class C{  public FileInputStream OpenInputfile(String filePath){  FileInputStream fileTarget=null;  try {    fileTarget=new FileInputStream(filePath);  } catch (  FileNotFoundException e) {    System.out.println("File not found: " + filePath);    return null;  }  return fileTarget;}  }
class C{  private void readObject(final ObjectInputStream ois) throws ClassNotFoundException, IOException {  ois.defaultReadObject();}  }
class C{  static public Class<?> box(final Class<?> type){  return BOX.get(type);}  }
class C{  protected boolean teleportTo(final String where,final Player player){  StringTokenizer st;  StendhalRPZone zone;  int x;  int y;  st=new StringTokenizer(where," ");  if (!st.hasMoreTokens()) {    return false;  }  zone=SingletonRepository.getRPWorld().getZone(st.nextToken());  if (!st.hasMoreTokens()) {    return false;  }  try {    x=Integer.parseInt(st.nextToken());  } catch (  final NumberFormatException ex) {    return false;  }  if (!st.hasMoreTokens()) {    return false;  }  try {    y=Integer.parseInt(st.nextToken());  } catch (  final NumberFormatException ex) {    return false;  }  return player.teleport(zone,x,y,null,player);}  }
class C{  @SuppressWarnings("unchecked") @Override public List<RoleVO> findForAll() throws Exception {  return this.getCurrentSession().createQuery("SELECT new com.netsteadfast.greenstep.vo.RoleVO(r.oid, r.role, r.description) FROM TbRole r ").list();}  }
class C{  public FDModel loadModel(String filename,String cwd){  String fn=filename;  if (fn == null)   return null;  if (!fn.endsWith("." + fileExtension)) {    fn+="." + fileExtension;  }  ModelPersistenceHandler persistenceHandler=createModelPersistenceHandler(resourceSetProvider.get());  return (FDModel)persistenceHandler.loadModel(fn,cwd);}  }
class C{  public static final Integer extractIplIdentitySlaveFrimwareRevNum(LocoNetMessage m){  return ((m.getElement(10) & 0x78) + ((m.getElement(9) & 0x1) << 7));}  }
class C{  public AbstractWrappingTarget(final LogTarget logTarget){  this(logTarget,false);}  }
class C{  public void visitEnd(){  if (av != null) {    av.visitEnd();  }}  }
class C{  public static void cancel(Context context){  if (!isJobScheduled(context,JOB_ID)) {    Timber.d("This job hasn't already been scheduled, no need to cancel");    return;  }  JobScheduler scheduler=(JobScheduler)context.getSystemService(Context.JOB_SCHEDULER_SERVICE);  scheduler.cancel(JOB_ID);}  }
class C{  public JsonHttpResponseHandler(String encoding){  super(encoding);}  }
class C{  @Override public void writeBatch() throws IOException {  if (getInstances() == null) {    throw new IOException("No instances to save");  }  if (getRetrieval() == INCREMENTAL) {    throw new IOException("Batch and incremental saving cannot be mixed.");  }  setRetrieval(BATCH);  setWriteMode(WRITE);  if (retrieveFile() == null && getWriter() == null) {    Instances data=getInstances();    System.out.println(new Instances(data,0));    for (int i=0; i < data.numInstances(); i++) {      System.out.println(data.instance(i).toStringMaxDecimalDigits(m_MaxDecimalPlaces));    }    setWriteMode(WAIT);    return;  }  PrintWriter outW=new PrintWriter(getWriter());  Instances data=getInstances();  Instances header=new Instances(data,0);  outW.print(header.toString());  for (int i=0; i < data.numInstances(); i++) {    if (i % 1000 == 0) {      outW.flush();    }    outW.println(data.instance(i).toStringMaxDecimalDigits(m_MaxDecimalPlaces));  }  outW.flush();  outW.close();  setWriteMode(WAIT);  outW=null;  resetWriter();  setWriteMode(CANCEL);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void printModel(final Node root){  printModel("",root);}  }
class C{  @Override public ArrayList<ArrayList<Region>> defineRegions(ArrayList<ChartSet> data){  int nSets=data.size();  int nEntries=data.get(0).size();  int yZeroCoord=(int)this.getZeroPosition();  final ArrayList<ArrayList<Region>> result=new ArrayList<ArrayList<Region>>(nSets);  for (int i=0; i < nSets; i++)   result.add(new ArrayList<Region>(nEntries));  float offset;  BarSet barSet;  Bar bar;  for (int i=nEntries - 1; i >= 0; i--) {    offset=data.get(0).getEntry(i).getY() - drawingOffset;    for (int j=0; j < nSets; j++) {      barSet=(BarSet)data.get(j);      bar=(Bar)barSet.getEntry(i);      if (bar.getValue() > 0)       result.get(j).add(new Region(yZeroCoord,(int)offset,(int)bar.getX(),(int)(offset + barWidth))); else       result.get(j).add(new Region((int)bar.getX(),(int)offset,yZeroCoord,(int)(offset + barWidth)));      if (j != nSets - 1)       offset+=style.setSpacing;    }  }  return result;}  }
class C{  @BeforeMethod public void prepareBuffer(){  byteBuffer.clear();}  }
class C{  public boolean isGsaAvailable(){  if (mGsaAvailable != null)   return mGsaAvailable;  mGsaAvailable=false;  PackageManager pm=mContext.getPackageManager();  Intent searchIntent=new Intent(SEARCH_INTENT_ACTION);  searchIntent.setPackage(GSAState.SEARCH_INTENT_PACKAGE);  ResolveInfo resolveInfo=pm.resolveActivity(searchIntent,0);  if (resolveInfo == null || resolveInfo.activityInfo == null) {    mGsaAvailable=false;  } else   if (!isPackageAboveVersion(SEARCH_INTENT_PACKAGE,GSA_VERSION_FOR_DOCUMENT) || !isPackageAboveVersion(GMS_CORE_PACKAGE,GMS_CORE_VERSION)) {    mGsaAvailable=false;  } else {    mGsaAvailable=true;  }  return mGsaAvailable;}  }
class C{  public boolean add(M match){  stack.push(match);  return true;}  }
class C{  private static String padLeft(String s,int minLength){  return String.format("%1$" + minLength + "s",s);}  }
class C{  private void createCheckList(final Component component,final List<CandidatePair> checkList){  List<LocalCandidate> localCnds=component.getLocalCandidates();  List<RemoteCandidate> remoteCnds=component.getRemoteCandidates();  LocalCandidate upnpBase=null;  for (  LocalCandidate lc : localCnds) {    if (lc instanceof UPNPCandidate)     upnpBase=lc.getBase();  }  for (  LocalCandidate localCnd : localCnds) {    if (localCnd == upnpBase)     continue;    for (    RemoteCandidate remoteCnd : remoteCnds) {      if (localCnd.canReach(remoteCnd) && remoteCnd.getTransportAddress().getPort() != 0) {        CandidatePair pair=getParentAgent().createCandidatePair(localCnd,remoteCnd);        checkList.add(pair);      }    }  }}  }
class C{  public ColorIcon(int rgb){  this(new Color(rgb));}  }
class C{  private Object[] parseURL(String url,Properties info) throws SQLException {  if (!acceptsURL(url))   throw new SQLException("Invalid url");  try {    URI uri=new URI(url.substring(12));    String host=uri.getHost();    int port=(uri.getPort() < 0 ? Utils.PORT : uri.getPort());    String index=uri.getPath().length() <= 1 ? null : uri.getPath().split("/")[1];    Properties props=Utils.defaultProps();    if (info != null) {      props.putAll(info);    }    info=props;    if (uri.getQuery() != null)     for (    String keyValue : uri.getQuery().split("&")) {      String[] parts=keyValue.split("=");      if (parts.length > 1)       info.setProperty(parts[0].trim(),parts[1].trim()); else       info.setProperty(parts[0],"");    }    return new Object[]{host,port,index,info};  } catch (  URISyntaxException e) {    throw new SQLException("Unable to parse URL. Pleas use '" + Utils.PREFIX + "//host:port/schema?{0,1}(param=value&)*'",e);  }catch (  ArrayIndexOutOfBoundsException e) {    throw new SQLException("No shema (index) specified. Pleas use '" + Utils.PREFIX + "//host:port/schema?{0,1}(param=value&)*'");  }catch (  Exception e) {    throw new SQLException("Unable to connect to database due to: " + e.getClass().getName(),e);  }}  }
class C{  public FloatRange(double min,double max){  this((float)min,(float)max);}  }
class C{  void handleText(TagElement tag){  if (tag.breaksFlow()) {    space=false;    if (!strict) {      ignoreSpace=true;    }  }  if (textpos == 0) {    if ((!space) || (stack == null) || last.breaksFlow()|| !stack.advance(dtd.pcdata)) {      last=tag;      space=false;      lastBlockStartPos=currentBlockStartPos;      return;    }  }  if (space) {    if (!ignoreSpace) {      if (textpos + 1 > text.length) {        char newtext[]=new char[text.length + 200];        System.arraycopy(text,0,newtext,0,text.length);        text=newtext;      }      text[textpos++]=' ';      if (!strict && !tag.getElement().isEmpty()) {        ignoreSpace=true;      }    }    space=false;  }  char newtext[]=new char[textpos];  System.arraycopy(text,0,newtext,0,textpos);  if (tag.getElement().getName().equals("title")) {    handleTitle(newtext);  } else {    handleText(newtext);  }  lastBlockStartPos=currentBlockStartPos;  textpos=0;  last=tag;  space=false;}  }
class C{  public Envelope boundary(){  Double minLongtitude1=this.rawRectangleRDD.min((RectangleXMinComparator)GeometryComparatorFactory.createComparator("rectangle","x","min")).getMinX();  Double maxLongtitude1=this.rawRectangleRDD.max((RectangleXMinComparator)GeometryComparatorFactory.createComparator("rectangle","x","min")).getMinX();  Double minLatitude1=this.rawRectangleRDD.min((RectangleYMinComparator)GeometryComparatorFactory.createComparator("rectangle","y","min")).getMinY();  Double maxLatitude1=this.rawRectangleRDD.max((RectangleYMinComparator)GeometryComparatorFactory.createComparator("rectangle","y","min")).getMinY();  Double minLongtitude2=this.rawRectangleRDD.min((RectangleXMaxComparator)GeometryComparatorFactory.createComparator("rectangle","x","max")).getMaxX();  Double maxLongtitude2=this.rawRectangleRDD.max((RectangleXMaxComparator)GeometryComparatorFactory.createComparator("rectangle","x","max")).getMaxX();  Double minLatitude2=this.rawRectangleRDD.min((RectangleYMaxComparator)GeometryComparatorFactory.createComparator("rectangle","y","max")).getMaxY();  Double maxLatitude2=this.rawRectangleRDD.max((RectangleYMaxComparator)GeometryComparatorFactory.createComparator("rectangle","y","max")).getMaxY();  if (minLongtitude1 < minLongtitude2) {    boundary[0]=minLongtitude1;  } else {    boundary[0]=minLongtitude2;  }  if (minLatitude1 < minLatitude2) {    boundary[1]=minLatitude1;  } else {    boundary[1]=minLatitude2;  }  if (maxLongtitude1 > maxLongtitude2) {    boundary[2]=maxLongtitude1;  } else {    boundary[2]=maxLongtitude2;  }  if (maxLatitude1 > maxLatitude2) {    boundary[3]=maxLatitude1;  } else {    boundary[3]=maxLatitude2;  }  this.boundaryEnvelope=new Envelope(boundary[0],boundary[2],boundary[1],boundary[3]);  return boundaryEnvelope;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  ArrayList<Double> list=new ArrayList<Double>();  System.out.print("Enter 5 numbers: ");  for (int i=0; i < 5; i++) {    list.add(input.nextDouble());  }  System.out.println("Sum of list: " + sum(list));}  }
class C{  static public void qsort(char[] array){  qsort_h(array,0,array.length - 1);}  }
class C{  protected void decodeImageData(){  int NullCode=-1;  int npix=iw * ih;  int available, clear, code_mask, code_size, end_of_information, in_code, old_code, bits, code, count, i, datum, data_size, first, top, bi, pi;  if ((pixels == null) || (pixels.length < npix)) {    pixels=new byte[npix];  }  if (prefix == null)   prefix=new short[MaxStackSize];  if (suffix == null)   suffix=new byte[MaxStackSize];  if (pixelStack == null)   pixelStack=new byte[MaxStackSize + 1];  data_size=read();  clear=1 << data_size;  end_of_information=clear + 1;  available=clear + 2;  old_code=NullCode;  code_size=data_size + 1;  code_mask=(1 << code_size) - 1;  for (code=0; code < clear; code++) {    prefix[code]=0;    suffix[code]=(byte)code;  }  datum=bits=count=first=top=pi=bi=0;  for (i=0; i < npix; ) {    if (top == 0) {      if (bits < code_size) {        if (count == 0) {          count=readBlock();          if (count <= 0)           break;          bi=0;        }        datum+=(((int)block[bi]) & 0xff) << bits;        bits+=8;        bi++;        count--;        continue;      }      code=datum & code_mask;      datum>>=code_size;      bits-=code_size;      if ((code > available) || (code == end_of_information))       break;      if (code == clear) {        code_size=data_size + 1;        code_mask=(1 << code_size) - 1;        available=clear + 2;        old_code=NullCode;        continue;      }      if (old_code == NullCode) {        pixelStack[top++]=suffix[code];        old_code=code;        first=code;        continue;      }      in_code=code;      if (code == available) {        pixelStack[top++]=(byte)first;        code=old_code;      }      while (code > clear) {        pixelStack[top++]=suffix[code];        code=prefix[code];      }      first=((int)suffix[code]) & 0xff;      if (available >= MaxStackSize)       break;      pixelStack[top++]=(byte)first;      prefix[available]=(short)old_code;      suffix[available]=(byte)first;      available++;      if (((available & code_mask) == 0) && (available < MaxStackSize)) {        code_size++;        code_mask+=available;      }      old_code=in_code;    }    top--;    pixels[pi++]=pixelStack[top];    i++;  }  for (i=pi; i < npix; i++) {    pixels[i]=0;  }}  }
class C{  private static int indexOfNonDigit(String string,int offset){  for (int i=offset; i < string.length(); i++) {    char c=string.charAt(i);    if (c < '0' || c > '9')     return i;  }  return string.length();}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  int length=length();  s.writeInt(length);  for (int i=0; i < length; i++) {    s.writeDouble(get(i));  }}  }
class C{  public AccountHeaderBuilder withHeightPx(int heightPx){  this.mHeight=DimenHolder.fromPixel(heightPx);  return this;}  }
class C{  public <T extends SubSystem>T addSystemIfAbsent(T system){  return addSystemIfAbsent(system.getClass(),system);}  }
class C{  private Listing makeListing(int number){  int mod=number % 3;  int resource;  if (mod == 0) {    resource=R.drawable.house1;  } else   if (mod == 1) {    resource=R.drawable.house2;  } else {    resource=R.drawable.house3;  }  return new Listing(String.format("Generic listing #%d",number),"House for rent","1,000 sq. ft, 2/2 with 2-car garage!","$2,800/mo",resource);}  }
class C{  public void writePath(JsonGenerator generator) throws IOException {  if (parent != null) {    parent.writePath(generator);  }  if ((write == null) || (!write)) {    write=true;    if (property == null) {      generator.writeStartObject();    } else {      generator.writeFieldName(property);      if (isArray()) {        generator.writeStartArray();      } else       if (isObject() || isArrayOfObject()) {        generator.writeStartObject();      }    }  }}  }
class C{  public final Vec2 mulLocal(float a){  x*=a;  y*=a;  return this;}  }
class C{  private String secondsToTime(int seconds){  String time="";  String minutesText=String.valueOf(seconds / 60);  if (minutesText.length() == 1)   minutesText="0" + minutesText;  String secondsText=String.valueOf(seconds % 60);  if (secondsText.length() == 1)   secondsText="0" + secondsText;  time=minutesText + ":" + secondsText;  return time;}  }
class C{  static void notifcation(Context context,String messageString,Intent intent,int notificationTitle){  String ns=Context.NOTIFICATION_SERVICE;  NotificationManager mNotificationManager=(NotificationManager)context.getSystemService(ns);  Calendar.getInstance().getTime().toString();  long when=System.currentTimeMillis();  CharSequence contentTitle=context.getString(notificationTitle);  String ticker=contentTitle + " " + messageString;  PendingIntent pendingIntent=PendingIntent.getActivity(context,ActivityConstants.showHistory,intent,0);  Builder notificationCompat=new Builder(context);  notificationCompat.setAutoCancel(true).setContentTitle(contentTitle).setContentIntent(pendingIntent).setContentText(messageString).setTicker(ticker).setWhen(when).setSmallIcon(R.drawable.ic_launcher);  Notification notification=notificationCompat.build();  mNotificationManager.notify(MessageID,notification);  MessageID++;}  }
class C{  public void parse(String systemId) throws SAXException {  parse(new InputSource(systemId));}  }
class C{  public StripedCounters(final int nstripes,final int batchSize){  if (nstripes < 1)   throw new IllegalArgumentException();  if (batchSize < 1)   throw new IllegalArgumentException();  a=new StripedCounters[nstripes];  locks=new ReentrantLock[nstripes];  for (int i=0; i < nstripes; i++) {    final T t=newStripedCounters();    t.parent=(T)this;    t.batchSize=t.n=batchSize;    a[i]=t;    locks[i]=new ReentrantLock();  }  this.parent=null;  this.batchSize=n=batchSize;}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder(32);  try {    print(buffer);  } catch (  IOException e) {    throw new RuntimeException("Exception printing to StringBuilder",e);  }  return buffer.toString();}  }
class C{  public void post(Runnable runnable){synchronized (mQueue) {    mQueue.add(runnable);    if (mQueue.size() == 1) {      scheduleNextLocked();    }  }}  }
class C{  protected Hashtable<String,Object> backupModelSettings(TableModel model){  Hashtable<String,Object> result;  result=new Hashtable<String,Object>();  result.put(KEY_SORTCOL,m_Model.getSortColumn());  result.put(KEY_SORTORDER,m_Model.isAscending());  if (model instanceof SearchableTableModel) {    if (((SearchableTableModel)model).getSeachString() != null)     result.put(KEY_SEARCHSTRING,((SearchableTableModel)model).getSeachString());    result.put(KEY_SEARCHREGEXP,((SearchableTableModel)model).isRegExpSearch());  }  return result;}  }
class C{  public int convertPosition(int position){  return position;}  }
class C{  public int phenotype(int position,float[] genome){  if (position >= numNodes * (maxArity + 1))   return GENE_OUTPUT;  return position % (maxArity + 1) == 0 ? GENE_FUNCTION : GENE_ARGUMENT;}  }
class C{  protected ConfigurationParameterImpl(String name,String description,Object value,Class type,boolean userModifiable){  if (name == null || name.length() == 0) {    throw new IllegalArgumentException(LocalizedStrings.ConfigurationParameterImpl_CONFIGURATIONPARAMETER_NAME_MUST_BE_SPECIFIED.toLocalizedString());  }  this.name=name;  setInternalState(description,value,type,userModifiable);}  }
class C{  public void storeRttValue(RemoteEndpoint endpoint,long rtt){  endpoint.RTT_sample[currentRtt]=rtt;  currentRtt=(currentRtt + 1) % RemoteEndpoint.RTT_HISTORY_SIZE;}  }
class C{  @Override public void addMessageBatch(byte[][] commands,MessageContext[] msgCtx,int consensusId){  CommandsInfo command=new CommandsInfo(commands,msgCtx);  if (isToLog) {    if (log == null)     createLogFile();    writeCommandToDisk(command,consensusId);  }  setLastCID(consensusId);}  }
class C{  public void write(final String filename){  try (PrintStream stream=new PrintStream(new File(filename))){    write(stream);  } catch (  FileNotFoundException e) {    e.printStackTrace();  }}  }
class C{  public static ModelRelation create(ModelEntity modelEntity,String description,String type,String title,String relEntityName,String fkName,List<ModelKeyMap> keyMaps,boolean isAutoRelation){  if (description == null) {    description="";  }  if (type == null) {    type="";  }  if (title == null) {    title="";  }  if (relEntityName == null) {    relEntityName="";  }  if (fkName == null) {    fkName="";  }  if (keyMaps == null) {    keyMaps=Collections.emptyList();  } else {    keyMaps=Collections.unmodifiableList(keyMaps);  }  return new ModelRelation(modelEntity,description,type,title,relEntityName,fkName,keyMaps,isAutoRelation);}  }
class C{  public int hashCode(){  return 1;}  }
class C{  @Override public Class<CumulativeTimeBucket> handledType(){  return CumulativeTimeBucket.class;}  }
class C{  @Override public String isExportFormatSupported(String mimeType){  return Exportable.FORMAT_NOT_SUPPORTED;}  }
class C{  private DateParser(){}  }
class C{  public UpdateDomainOnlineScriptCommand(Configuration configuration,String resourcePath){  super(configuration,resourcePath);}  }
class C{  private boolean isPortUsed(Map<StoragePort,Integer> portUseCounts,StoragePort port){  return portUseCounts.containsKey(port);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.694 -0400",hash_original_method="27ADFB4EAA62C71913507B549D4CAC10",hash_generated_method="3F5433AC1499670A4A969374E3259C3D") public SuffixFileFilter(String[] suffixes){  this(suffixes,IOCase.SENSITIVE);}  }
class C{  public void paint(GlyphView v,Graphics g,Shape a,int p0,int p1){  if (g instanceof Graphics2D) {    Rectangle2D alloc=a.getBounds2D();    Graphics2D g2d=(Graphics2D)g;    float y=(float)alloc.getY() + layout.getAscent() + layout.getLeading();    float x=(float)alloc.getX();    if (p0 > v.getStartOffset() || p1 < v.getEndOffset()) {      try {        Shape s=v.modelToView(p0,Position.Bias.Forward,p1,Position.Bias.Backward,a);        Shape savedClip=g.getClip();        g2d.clip(s);        layout.draw(g2d,x,y);        g.setClip(savedClip);      } catch (      BadLocationException e) {      }    } else {      layout.draw(g2d,x,y);    }  }}  }
class C{  protected void nextTable() throws ReplicatorException {  if (this.tableNames.size() == 0) {    currentTableName=null;  } else {    currentTableName=this.tableNames.get(0);  }  currentTablePosition=0;  this.prepareCurrentTable();}  }
class C{  public MbFanSearchRunner(GraphWrapper dagWrapper,Parameters params){  super(dagWrapper.getGraph(),params);}  }
class C{  public BatchId(){}  }
class C{  public JSONFormatterException(String message){  super(message);}  }
class C{  public static final double correlation(double y1[],double y2[],int n){  int i;  double av1=0.0, av2=0.0, y11=0.0, y22=0.0, y12=0.0, c;  if (n <= 1) {    return 1.0;  }  for (i=0; i < n; i++) {    av1+=y1[i];    av2+=y2[i];  }  av1/=(double)n;  av2/=(double)n;  for (i=0; i < n; i++) {    y11+=(y1[i] - av1) * (y1[i] - av1);    y22+=(y2[i] - av2) * (y2[i] - av2);    y12+=(y1[i] - av1) * (y2[i] - av2);  }  if (y11 * y22 == 0.0) {    c=1.0;  } else {    c=y12 / Math.sqrt(Math.abs(y11 * y22));  }  return c;}  }
class C{  public void polygon(double[] x,double[] y){  int n=x.length;  GeneralPath path=new GeneralPath();  path.moveTo((float)scaleX(x[0]),(float)scaleY(y[0]));  for (int i=0; i < n; i++)   path.lineTo((float)scaleX(x[i]),(float)scaleY(y[i]));  path.closePath();  offscreen.draw(path);  draw();}  }
class C{  public static <U>UnsafeIntegerFieldUpdater<U> newIntegerFieldUpdater(Class<? super U> tClass,String fieldName){  try {    return new UnsafeIntegerFieldUpdater<>(JUnsafe.getUnsafe(),tClass,fieldName);  } catch (  Throwable t) {    JUnsafe.throwException(t);  }  return null;}  }
class C{  public static double RMSEmaxFitness(GEPIndividual ind){  return 1000.0;}  }
class C{  public static void crawlSym(File file){  if (!file.exists())   return;  try {    File canon=file.getCanonicalFile();    if (!canon.exists())     return;    File configuration=new File(canon,"toast_autorun.conf");    if (!configuration.exists()) {      invalidDrives.add(canon);      logger.warn("Invalid USB Mass Storage Device Detected -- No toast_autorun.conf file: " + canon);      logger.warn("Run 'usb generate' to create a new toast_autorun.conf file on any invalid drives");      return;    }    ProfilerEntity profilerEntity=new ProfilerEntity().start();    ModuleConfig pref=new ModuleConfig(configuration);    String drive_name=pref.getString("toast.device_name","Team_####_USB_Device").replace(" ","_");    MassStorageDevice device=new MassStorageDevice(canon,pref,drive_name);    connectedDevices.add(device);    if (device.override_modules && !device.concurrent_modules)     override=true;    logger.info("USB Mass Storage Device Detected -- Valid! " + canon + " ("+ device.drive_name+ ")");    if (device.config_priority >= config_last) {      config_highest=device;      config_last=device.config_priority;    }    if (device.filesystem_priority >= filesystem_last) {      filesystem_highest=device;      filesystem_last=device.filesystem_priority;    }    profilerEntity.stop();    profilerEntity.setName(drive_name);    Profiler.INSTANCE.section("USB").pushEntity(profilerEntity);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case GamlPackage.SEQUATIONS__EQUATIONS:    return ((InternalEList<?>)getEquations()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static Address minimumObjectRef(Address regionBaseAddr){  return JavaHeader.minimumObjectRef(regionBaseAddr);}  }
class C{  protected boolean directIndexMinMax(AggregateSource source){  PlanNode input=source.getInput();  if (!(input instanceof Select))   return false;  Select select=(Select)input;  if (!select.getConditions().isEmpty())   return false;  input=select.getInput();  if (!(input instanceof IndexScan))   return false;  IndexScan index=(IndexScan)input;  int nequals=index.getNEquality();  List<Sort.OrderByExpression> ordering=index.getOrdering();  int ncols=(nequals < ordering.size()) ? (nequals + 1) : nequals;  AggregateFunctionExpression aggr1=source.getAggregates().get(0);  for (int i=0; i < ncols; i++) {    Sort.OrderByExpression orderBy=ordering.get(i);    if (orderBy.getExpression() == null)     continue;    if (orderBy.getExpression().equals(aggr1.getOperand())) {      if ((i == nequals) && (orderBy.isAscending() != aggr1.getFunction().equals("MIN"))) {        for (        Sort.OrderByExpression otherOtherBy : ordering) {          otherOtherBy.setAscending(!otherOtherBy.isAscending());        }      }      if ((index instanceof SingleIndexScan) && (index.getOrderEffectiveness() == IndexScan.OrderEffectiveness.NONE)) {        SingleIndexScan sindex=(SingleIndexScan)index;        if (sindex.getConditionRange() != null) {          sindex.setOrderEffectiveness(IndexScan.OrderEffectiveness.FOR_MIN_MAX);        }      }      return true;    }  }  return false;}  }
class C{  @Override public void respond(String response){  getChannel().send().message(getUser(),response);}  }
class C{  public boolean continueExecuting(){  return !pathableMob.getEntity().getNavigator().noPath();}  }
class C{  private void recordNetworkEvent(Network network,String type,String description){  RecordableBourneEvent event=new RecordableBourneEvent(type,null,URI.create("ViPR-User"),null,null,EVENT_SERVICE_TYPE,network.getId(),description,System.currentTimeMillis(),null,network.getNativeGuid(),RecordType.Event.name(),EVENT_SERVICE_SOURCE,"","");  try {    eventManager.recordEvents(event);  } catch (  Exception ex) {    _log.error("Failed to record event. Event description: {}. Error: {}.",description,ex);  }}  }
class C{  protected void checkFields(){  if (mRunName == null) {    throw new IllegalArgumentException("run name has not been set");  }  if (mDevice == null) {    throw new IllegalArgumentException("Device has not been set");  }  if (mJarFileName == null) {    throw new IllegalArgumentException("jar file name has not been set");  }  if (mTests == null) {    throw new IllegalArgumentException("tests has not been set");  }  if (mCtsBuild == null) {    throw new IllegalArgumentException("build has not been set");  }  try {    mCtsBuild.getTestApp(mJarFileName);  } catch (  FileNotFoundException e) {    throw new IllegalArgumentException(String.format("Could not find jar %s in CTS build %s",mJarFileName,mCtsBuild.getRootDir().getAbsolutePath()));  }}  }
class C{  public long discardUpstreamSamples(int discardFromIndex){  int discardCount=getWriteIndex() - discardFromIndex;  Assertions.checkArgument(0 <= discardCount && discardCount <= queueSize);  if (discardCount == 0) {    if (absoluteReadIndex == 0) {      return 0;    }    int lastWriteIndex=(relativeWriteIndex == 0 ? capacity : relativeWriteIndex) - 1;    return offsets[lastWriteIndex] + sizes[lastWriteIndex];  }  queueSize-=discardCount;  relativeWriteIndex=(relativeWriteIndex + capacity - discardCount) % capacity;  return offsets[relativeWriteIndex];}  }
class C{  public void lockOrientation(boolean portrait){  impl.lockOrientation(portrait);}  }
class C{  public Object key(){  int dr=+1;  int dc=+1;  boolean rFirst=true;  int d=board[0][0];  if (board[0][2] < d) {    dr=+1;    dc=-1;    d=board[0][2];    rFirst=false;  }  if (board[2][2] < d) {    dr=-1;    dc=-1;    d=board[2][2];    rFirst=true;  }  if (board[2][0] < d) {    dr=-1;    dc=+1;    d=board[2][0];    rFirst=false;  }  StringBuilder sb=new StringBuilder(10);  if (rFirst) {    for (int r=-dr + 1; dr * r <= dr + 1; r+=dr) {      for (int c=-dc + 1; dc * c <= dc + 1; c+=dc) {        sb.append(board[r][c]);      }    }  } else {    for (int c=-dc + 1; dc * c <= dc + 1; c+=dc) {      for (int r=-dr + 1; dr * r <= dr + 1; r+=dr) {        sb.append(board[r][c]);      }    }  }  return sb.toString();}  }
class C{  public static void unregister(RecyclerView view){  if (view == null) {    throw new NullPointerException("Un-registering View must not be null");  }  if (sInstance.mListeners.containsKey(view.hashCode())) {    ToroScrollListener listener=sInstance.mListeners.remove(view.hashCode());    if (listener.getManager().getPlayer() != null) {      final ToroPlayer player=listener.getManager().getPlayer();      final SavedState state;      if (sInstance.mStates.containsKey(view.hashCode())) {        state=sInstance.mStates.get(view.hashCode());      } else {        state=new SavedState();        sInstance.mStates.put(view.hashCode(),state);      }      state.player=player;      state.position=player.getCurrentPosition();      listener.getManager().saveVideoState(player.getMediaId(),player.getCurrentPosition(),player.getDuration());      if (player.isPlaying()) {        listener.getManager().pausePlayback();      }    }    listener.getManager().onUnregistered();    view.removeOnScrollListener(listener);    sInstance.mViews.remove(view.hashCode());  }}  }
class C{  protected boolean isRollbackAllowed() throws SQLException {  return !connection.getAutoCommit();}  }
class C{  public GapTextStore(int lowWatermark,int highWatermark){  this(highWatermark / 2,highWatermark / 2,0f);}  }
class C{  public void testNewOutputStream() throws IOException {  InfoStreamListener stream=new InfoStreamListener("newOutputStream");  Path dir=wrap(createTempDir(),stream);  OutputStream file=Files.newOutputStream(dir.resolve("output"));  assertTrue(stream.sawMessage());  file.close();  try {    Files.newOutputStream(dir.resolve("output"),StandardOpenOption.CREATE_NEW);    fail("didn't get expected exception");  } catch (  IOException expected) {  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:58.008 -0500",hash_original_method="1933FA0EC9823F8DA6E27E5F5995EEC8",hash_generated_method="06B1380EF934ABD70BE5159A4A384BE7") public InhibitAnyPolicy(byte[] encoding) throws IOException {  super(encoding);  this.skipCerts=new BigInteger((byte[])ASN1Integer.getInstance().decode(encoding)).intValue();}  }
class C{  public static int[] subarray(int[] buffer,int offset,int length){  int temp[]=new int[length];  System.arraycopy(buffer,offset,temp,0,length);  return temp;}  }
class C{  public void unloadChangePrivKey(){  changePrivKey=null;}  }
class C{  public static Distribution guessNeighbors(DataSet d){  return new UniformDiscrete(25,Math.min(200,d.getSampleSize() / 5));}  }
class C{  private static int checkFieldTypeSignature(final String signature,int pos){switch (getChar(signature,pos)) {case 'L':    return checkClassTypeSignature(signature,pos);case '[':  return checkTypeSignature(signature,pos + 1);default :return checkTypeVariableSignature(signature,pos);}}  }
class C{  protected static double pointLineDistance(double[] line,double[] point){  return Vector.magnitude(Vector.subtract(Vector.multiply(Vector.dot(line,point) / Vector.dot(line,line),line),point));}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void provideData(Player player,String version){  if (data == null) {    return;  }  List<TransferContent> contents=data.get(version);  if (contents != null) {    StendhalRPAction.transferContent(player,contents);  }}  }
class C{  private static Version[] buildVersions(){  return new Version[]{new Version(1,new int[]{},new ECBlocks(7,new ECB(1,19)),new ECBlocks(10,new ECB(1,16)),new ECBlocks(13,new ECB(1,13)),new ECBlocks(17,new ECB(1,9))),new Version(2,new int[]{6,18},new ECBlocks(10,new ECB(1,34)),new ECBlocks(16,new ECB(1,28)),new ECBlocks(22,new ECB(1,22)),new ECBlocks(28,new ECB(1,16))),new Version(3,new int[]{6,22},new ECBlocks(15,new ECB(1,55)),new ECBlocks(26,new ECB(1,44)),new ECBlocks(18,new ECB(2,17)),new ECBlocks(22,new ECB(2,13))),new Version(4,new int[]{6,26},new ECBlocks(20,new ECB(1,80)),new ECBlocks(18,new ECB(2,32)),new ECBlocks(26,new ECB(2,24)),new ECBlocks(16,new ECB(4,9))),new Version(5,new int[]{6,30},new ECBlocks(26,new ECB(1,108)),new ECBlocks(24,new ECB(2,43)),new ECBlocks(18,new ECB(2,15),new ECB(2,16)),new ECBlocks(22,new ECB(2,11),new ECB(2,12))),new Version(6,new int[]{6,34},new ECBlocks(18,new ECB(2,68)),new ECBlocks(16,new ECB(4,27)),new ECBlocks(24,new ECB(4,19)),new ECBlocks(28,new ECB(4,15))),new Version(7,new int[]{6,22,38},new ECBlocks(20,new ECB(2,78)),new ECBlocks(18,new ECB(4,31)),new ECBlocks(18,new ECB(2,14),new ECB(4,15)),new ECBlocks(26,new ECB(4,13),new ECB(1,14))),new Version(8,new int[]{6,24,42},new ECBlocks(24,new ECB(2,97)),new ECBlocks(22,new ECB(2,38),new ECB(2,39)),new ECBlocks(22,new ECB(4,18),new ECB(2,19)),new ECBlocks(26,new ECB(4,14),new ECB(2,15))),new Version(9,new int[]{6,26,46},new ECBlocks(30,new ECB(2,116)),new ECBlocks(22,new ECB(3,36),new ECB(2,37)),new ECBlocks(20,new ECB(4,16),new ECB(4,17)),new ECBlocks(24,new ECB(4,12),new ECB(4,13))),new Version(10,new int[]{6,28,50},new ECBlocks(18,new ECB(2,68),new ECB(2,69)),new ECBlocks(26,new ECB(4,43),new ECB(1,44)),new ECBlocks(24,new ECB(6,19),new ECB(2,20)),new ECBlocks(28,new ECB(6,15),new ECB(2,16))),new Version(11,new int[]{6,30,54},new ECBlocks(20,new ECB(4,81)),new ECBlocks(30,new ECB(1,50),new ECB(4,51)),new ECBlocks(28,new ECB(4,22),new ECB(4,23)),new ECBlocks(24,new ECB(3,12),new ECB(8,13))),new Version(12,new int[]{6,32,58},new ECBlocks(24,new ECB(2,92),new ECB(2,93)),new ECBlocks(22,new ECB(6,36),new ECB(2,37)),new ECBlocks(26,new ECB(4,20),new ECB(6,21)),new ECBlocks(28,new ECB(7,14),new ECB(4,15))),new Version(13,new int[]{6,34,62},new ECBlocks(26,new ECB(4,107)),new ECBlocks(22,new ECB(8,37),new ECB(1,38)),new ECBlocks(24,new ECB(8,20),new ECB(4,21)),new ECBlocks(22,new ECB(12,11),new ECB(4,12))),new Version(14,new int[]{6,26,46,66},new ECBlocks(30,new ECB(3,115),new ECB(1,116)),new ECBlocks(24,new ECB(4,40),new ECB(5,41)),new ECBlocks(20,new ECB(11,16),new ECB(5,17)),new ECBlocks(24,new ECB(11,12),new ECB(5,13))),new Version(15,new int[]{6,26,48,70},new ECBlocks(22,new ECB(5,87),new ECB(1,88)),new ECBlocks(24,new ECB(5,41),new ECB(5,42)),new ECBlocks(30,new ECB(5,24),new ECB(7,25)),new ECBlocks(24,new ECB(11,12),new ECB(7,13))),new Version(16,new int[]{6,26,50,74},new ECBlocks(24,new ECB(5,98),new ECB(1,99)),new ECBlocks(28,new ECB(7,45),new ECB(3,46)),new ECBlocks(24,new ECB(15,19),new ECB(2,20)),new ECBlocks(30,new ECB(3,15),new ECB(13,16))),new Version(17,new int[]{6,30,54,78},new ECBlocks(28,new ECB(1,107),new ECB(5,108)),new ECBlocks(28,new ECB(10,46),new ECB(1,47)),new ECBlocks(28,new ECB(1,22),new ECB(15,23)),new ECBlocks(28,new ECB(2,14),new ECB(17,15))),new Version(18,new int[]{6,30,56,82},new ECBlocks(30,new ECB(5,120),new ECB(1,121)),new ECBlocks(26,new ECB(9,43),new ECB(4,44)),new ECBlocks(28,new ECB(17,22),new ECB(1,23)),new ECBlocks(28,new ECB(2,14),new ECB(19,15))),new Version(19,new int[]{6,30,58,86},new ECBlocks(28,new ECB(3,113),new ECB(4,114)),new ECBlocks(26,new ECB(3,44),new ECB(11,45)),new ECBlocks(26,new ECB(17,21),new ECB(4,22)),new ECBlocks(26,new ECB(9,13),new ECB(16,14))),new Version(20,new int[]{6,34,62,90},new ECBlocks(28,new ECB(3,107),new ECB(5,108)),new ECBlocks(26,new ECB(3,41),new ECB(13,42)),new ECBlocks(30,new ECB(15,24),new ECB(5,25)),new ECBlocks(28,new ECB(15,15),new ECB(10,16))),new Version(21,new int[]{6,28,50,72,94},new ECBlocks(28,new ECB(4,116),new ECB(4,117)),new ECBlocks(26,new ECB(17,42)),new ECBlocks(28,new ECB(17,22),new ECB(6,23)),new ECBlocks(30,new ECB(19,16),new ECB(6,17))),new Version(22,new int[]{6,26,50,74,98},new ECBlocks(28,new ECB(2,111),new ECB(7,112)),new ECBlocks(28,new ECB(17,46)),new ECBlocks(30,new ECB(7,24),new ECB(16,25)),new ECBlocks(24,new ECB(34,13))),new Version(23,new int[]{6,30,54,78,102},new ECBlocks(30,new ECB(4,121),new ECB(5,122)),new ECBlocks(28,new ECB(4,47),new ECB(14,48)),new ECBlocks(30,new ECB(11,24),new ECB(14,25)),new ECBlocks(30,new ECB(16,15),new ECB(14,16))),new Version(24,new int[]{6,28,54,80,106},new ECBlocks(30,new ECB(6,117),new ECB(4,118)),new ECBlocks(28,new ECB(6,45),new ECB(14,46)),new ECBlocks(30,new ECB(11,24),new ECB(16,25)),new ECBlocks(30,new ECB(30,16),new ECB(2,17))),new Version(25,new int[]{6,32,58,84,110},new ECBlocks(26,new ECB(8,106),new ECB(4,107)),new ECBlocks(28,new ECB(8,47),new ECB(13,48)),new ECBlocks(30,new ECB(7,24),new ECB(22,25)),new ECBlocks(30,new ECB(22,15),new ECB(13,16))),new Version(26,new int[]{6,30,58,86,114},new ECBlocks(28,new ECB(10,114),new ECB(2,115)),new ECBlocks(28,new ECB(19,46),new ECB(4,47)),new ECBlocks(28,new ECB(28,22),new ECB(6,23)),new ECBlocks(30,new ECB(33,16),new ECB(4,17))),new Version(27,new int[]{6,34,62,90,118},new ECBlocks(30,new ECB(8,122),new ECB(4,123)),new ECBlocks(28,new ECB(22,45),new ECB(3,46)),new ECBlocks(30,new ECB(8,23),new ECB(26,24)),new ECBlocks(30,new ECB(12,15),new ECB(28,16))),new Version(28,new int[]{6,26,50,74,98,122},new ECBlocks(30,new ECB(3,117),new ECB(10,118)),new ECBlocks(28,new ECB(3,45),new ECB(23,46)),new ECBlocks(30,new ECB(4,24),new ECB(31,25)),new ECBlocks(30,new ECB(11,15),new ECB(31,16))),new Version(29,new int[]{6,30,54,78,102,126},new ECBlocks(30,new ECB(7,116),new ECB(7,117)),new ECBlocks(28,new ECB(21,45),new ECB(7,46)),new ECBlocks(30,new ECB(1,23),new ECB(37,24)),new ECBlocks(30,new ECB(19,15),new ECB(26,16))),new Version(30,new int[]{6,26,52,78,104,130},new ECBlocks(30,new ECB(5,115),new ECB(10,116)),new ECBlocks(28,new ECB(19,47),new ECB(10,48)),new ECBlocks(30,new ECB(15,24),new ECB(25,25)),new ECBlocks(30,new ECB(23,15),new ECB(25,16))),new Version(31,new int[]{6,30,56,82,108,134},new ECBlocks(30,new ECB(13,115),new ECB(3,116)),new ECBlocks(28,new ECB(2,46),new ECB(29,47)),new ECBlocks(30,new ECB(42,24),new ECB(1,25)),new ECBlocks(30,new ECB(23,15),new ECB(28,16))),new Version(32,new int[]{6,34,60,86,112,138},new ECBlocks(30,new ECB(17,115)),new ECBlocks(28,new ECB(10,46),new ECB(23,47)),new ECBlocks(30,new ECB(10,24),new ECB(35,25)),new ECBlocks(30,new ECB(19,15),new ECB(35,16))),new Version(33,new int[]{6,30,58,86,114,142},new ECBlocks(30,new ECB(17,115),new ECB(1,116)),new ECBlocks(28,new ECB(14,46),new ECB(21,47)),new ECBlocks(30,new ECB(29,24),new ECB(19,25)),new ECBlocks(30,new ECB(11,15),new ECB(46,16))),new Version(34,new int[]{6,34,62,90,118,146},new ECBlocks(30,new ECB(13,115),new ECB(6,116)),new ECBlocks(28,new ECB(14,46),new ECB(23,47)),new ECBlocks(30,new ECB(44,24),new ECB(7,25)),new ECBlocks(30,new ECB(59,16),new ECB(1,17))),new Version(35,new int[]{6,30,54,78,102,126,150},new ECBlocks(30,new ECB(12,121),new ECB(7,122)),new ECBlocks(28,new ECB(12,47),new ECB(26,48)),new ECBlocks(30,new ECB(39,24),new ECB(14,25)),new ECBlocks(30,new ECB(22,15),new ECB(41,16))),new Version(36,new int[]{6,24,50,76,102,128,154},new ECBlocks(30,new ECB(6,121),new ECB(14,122)),new ECBlocks(28,new ECB(6,47),new ECB(34,48)),new ECBlocks(30,new ECB(46,24),new ECB(10,25)),new ECBlocks(30,new ECB(2,15),new ECB(64,16))),new Version(37,new int[]{6,28,54,80,106,132,158},new ECBlocks(30,new ECB(17,122),new ECB(4,123)),new ECBlocks(28,new ECB(29,46),new ECB(14,47)),new ECBlocks(30,new ECB(49,24),new ECB(10,25)),new ECBlocks(30,new ECB(24,15),new ECB(46,16))),new Version(38,new int[]{6,32,58,84,110,136,162},new ECBlocks(30,new ECB(4,122),new ECB(18,123)),new ECBlocks(28,new ECB(13,46),new ECB(32,47)),new ECBlocks(30,new ECB(48,24),new ECB(14,25)),new ECBlocks(30,new ECB(42,15),new ECB(32,16))),new Version(39,new int[]{6,26,54,82,110,138,166},new ECBlocks(30,new ECB(20,117),new ECB(4,118)),new ECBlocks(28,new ECB(40,47),new ECB(7,48)),new ECBlocks(30,new ECB(43,24),new ECB(22,25)),new ECBlocks(30,new ECB(10,15),new ECB(67,16))),new Version(40,new int[]{6,30,58,86,114,142,170},new ECBlocks(30,new ECB(19,118),new ECB(6,119)),new ECBlocks(28,new ECB(18,47),new ECB(31,48)),new ECBlocks(30,new ECB(34,24),new ECB(34,25)),new ECBlocks(30,new ECB(20,15),new ECB(61,16)))};}  }
class C{  protected final ClusterNode affinityNode(List<ClusterNode> affNodes){  if (!canRemap) {    for (    ClusterNode node : affNodes) {      if (cctx.discovery().alive(node))       return node;    }    return null;  } else   return affNodes.get(0);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.usa.com";  String qualifiedName="dmstc:domestic";  Document doc;  Node arg;  NodeList elementList;  Node testAddress;  NamedNodeMap attributes;  Node retnode;  String value;  doc=(Document)load("staffNS",true);  arg=doc.createAttributeNS(namespaceURI,qualifiedName);  arg.setNodeValue("newValue");  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(0);  attributes=testAddress.getAttributes();  retnode=attributes.setNamedItemNS(arg);  value=retnode.getNodeValue();  assertEquals("throw_Equals","Yes",value);}  }
class C{  public static void showToast(String message,int icon){  showToast(message,Toast.LENGTH_LONG,icon,Gravity.FILL_HORIZONTAL | Gravity.TOP);}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deregister") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public NetworkSystemRestRep deregisterNetworkSystem(@PathParam("id") URI id) throws ControllerException {  ArgValidator.checkUri(id);  NetworkSystem networkSystem=_dbClient.queryObject(NetworkSystem.class,id);  ArgValidator.checkEntity(networkSystem,id,isIdEmbeddedInURL(id));  if (!RegistrationStatus.UNREGISTERED.toString().equalsIgnoreCase(networkSystem.getRegistrationStatus())) {    List<Network> networkList=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,Network.class,AlternateIdConstraint.Factory.getConstraint(Network.class,"networkSystems",networkSystem.getId().toString()));    for (    Network network : networkList) {      if (network.getInactive() || DiscoveredDataObject.RegistrationStatus.UNREGISTERED.toString().equals(network.getRegistrationStatus())) {        continue;      }      List<URI> registeredNetworkSystems=NetworkService.getRegisteredNetworkSystems(network,_dbClient);      registeredNetworkSystems.remove(networkSystem.getId());      if (registeredNetworkSystems.isEmpty()) {        network.setRegistrationStatus(RegistrationStatus.UNREGISTERED.toString());        _dbClient.persistObject(network);        auditOp(OperationTypeEnum.DEREGISTER_NETWORK,true,null,id.toString());      }    }    networkSystem.setRegistrationStatus(RegistrationStatus.UNREGISTERED.toString());    _dbClient.persistObject(networkSystem);    auditOp(OperationTypeEnum.DEREGISTER_NETWORK_SYSTEM,true,null,networkSystem.getId().toString(),networkSystem.getLabel(),networkSystem.getPortNumber(),networkSystem.getUsername(),networkSystem.getSmisProviderIP(),networkSystem.getSmisPortNumber(),networkSystem.getSmisUserName(),networkSystem.getSmisUseSSL());  }  return map(networkSystem);}  }
class C{  public static String[] parsePath(String path,boolean decodeSteps) throws CharacterCodingException {  ArrayList<String> arr=new ArrayList<String>();  int firstPos=path.indexOf('/');  while (firstPos >= 0) {    String step;    int nextPos=path.indexOf('/',firstPos + 1);    if (nextPos < 0)     step=path.substring(firstPos + 1); else     step=path.substring(firstPos + 1,nextPos);    if (decodeSteps)     step=UriTools.decodePath(step);    arr.add(step);    firstPos=nextPos;  }  int sz=arr.size();  if (sz == 0)   return (EMPTY_STRING_ARRAY);  return (arr.toArray(new String[sz]));}  }
class C{  private KeyStore loadKeyStore(String keyStoreType,String storeFilePath,char[] keyStorePwd) throws SSLException {  InputStream input=null;  try {    KeyStore keyStore=KeyStore.getInstance(keyStoreType);    input=openFileInputStream(storeFilePath);    keyStore.load(input,keyStorePwd);    return keyStore;  } catch (  GeneralSecurityException e) {    throw new SSLException("Failed to initialize key store (security exception occurred) [type=" + keyStoreType + ", keyStorePath="+ storeFilePath+ ']',e);  }catch (  FileNotFoundException e) {    throw new SSLException("Failed to initialize key store (key store file was not found): [path=" + storeFilePath + ", msg="+ e.getMessage()+ ']');  }catch (  IOException e) {    throw new SSLException("Failed to initialize key store (I/O error occurred): " + storeFilePath,e);  } finally {    if (input != null) {      try {        input.close();      } catch (      IOException ignored) {      }    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static Control createRequestControl(final Class clazz,final Class[] paramTypes,final Object[] params){  Constructor constructor=ClassUtils.getConstructorIfAvailable(clazz,paramTypes);  if (constructor == null) {    LdapExceptionUtils.generateErrorException(LdapErrorCodes.ERR_10005_CONTROL_CONTRUCTOR_NOT_FOUND,new String[]{clazz.toString(),StringUtils.arrayToCommaDelimitedString(paramTypes)},LOGGER);  }  Control result=null;  try {    result=(Control)constructor.newInstance(params);  } catch (  Exception e) {    LdapExceptionUtils.generateErrorException(LdapErrorCodes.ERR_10006_CONTROL_INSTANCE_FAILED,new String[]{clazz.toString(),StringUtils.arrayToCommaDelimitedString(paramTypes),StringUtils.arrayToCommaDelimitedString(params)},LOGGER,e);  }  return result;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:15.130 -0500",hash_original_method="04633BF5293F80973E1AA355DB2C35EF",hash_generated_method="04633BF5293F80973E1AA355DB2C35EF") void initState(){  mIndex=-1;  mWho=null;  mAdded=false;  mRemoving=false;  mResumed=false;  mFromLayout=false;  mInLayout=false;  mRestored=false;  mBackStackNesting=0;  mFragmentManager=null;  mActivity=null;  mFragmentId=0;  mContainerId=0;  mTag=null;  mHidden=false;  mDetached=false;  mRetaining=false;  mLoaderManager=null;  mLoadersStarted=false;  mCheckedForLoaderManager=false;}  }
class C{  public RepeatIterator(@NotNull List<T> master){  this.master=master;  this.source=master.iterator();}  }
class C{  public Seek(int playerId,int value){  super();  addParameterToRequest("playerid",playerId);  addParameterToRequest("value",value);}  }
class C{  public static boolean isEnumeration(FTypeRef typeRef){  return isUserDefinedType(typeRef,FEnumerationType.class);}  }
class C{  private static RGB[] blurRow(final ImageData originalImageData,final int row,final int radius){  final RGB[] rowRGBAverages=new RGB[originalImageData.width];  final int[] lineData=new int[originalImageData.width];  originalImageData.getPixels(0,row,originalImageData.width,lineData,0);  int r=0, g=0, b=0;  int leftSumBoundary=0;  int targetColumn=0;  int rightSumBoundary=0;  int numCols=0;  RGB rgb;  while (targetColumn < lineData.length) {    if (rightSumBoundary < lineData.length) {      do {        rgb=originalImageData.palette.getRGB(lineData[rightSumBoundary]);        r+=rgb.red;        g+=rgb.green;        b+=rgb.blue;        numCols++;        rightSumBoundary++;      } while (rightSumBoundary <= radius);    }    if (targetColumn - leftSumBoundary > radius) {      rgb=originalImageData.palette.getRGB(lineData[leftSumBoundary]);      r-=rgb.red;      g-=rgb.green;      b-=rgb.blue;      numCols--;      leftSumBoundary++;    }    rowRGBAverages[targetColumn]=new RGB(r / numCols,g / numCols,b / numCols);    targetColumn++;  }  return rowRGBAverages;}  }
class C{  public Role(String roleName,List<ObjectName> roleValue) throws IllegalArgumentException {  if (roleName == null || roleValue == null) {    String excMsg="Invalid parameter";    throw new IllegalArgumentException(excMsg);  }  setRoleName(roleName);  setRoleValue(roleValue);  return;}  }
class C{  private static JFreeChart createChart(CategoryDataset dataset){  JFreeChart chart=ChartFactory.createBarChart("Performance: JFreeSVG vs Batik",null,"Milliseconds",dataset);  chart.addSubtitle(new TextTitle("Time to generate 1000 charts in SVG " + "format (lower bars = better performance)"));  chart.setBackgroundPaint(Color.white);  CategoryPlot plot=(CategoryPlot)chart.getPlot();  NumberAxis rangeAxis=(NumberAxis)plot.getRangeAxis();  rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());  BarRenderer renderer=(BarRenderer)plot.getRenderer();  renderer.setDrawBarOutline(false);  chart.getLegend().setFrame(BlockBorder.NONE);  return chart;}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset){  byte[] ALPHABET=_STANDARD_ALPHABET;  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public boolean isClickTouchScreen(){  String s=DeviceInfo.getSoftwareVersion();  if (s.length() > 0) {    int v=Integer.parseInt(s.substring(0,1));    return v <= 5;  }  return false;}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  public Vector3f cross(Vector3f v){  return cross(v,null);}  }
class C{  public void testDeleteAllTracksOnDrive() throws IOException {  if (!RunConfiguration.getInstance().getRunSyncTest()) {    return;  }  EndToEndTestUtils.createTrackIfEmpty(0,true);  EndToEndTestUtils.findMenuItem(EndToEndTestUtils.trackListActivity.getString(R.string.menu_sync_now),true);  SyncTestUtils.checkFilesNumber(drive);  SyncTestUtils.removeKMLFiles(drive);  EndToEndTestUtils.findMenuItem(EndToEndTestUtils.trackListActivity.getString(R.string.menu_sync_now),true);  SyncTestUtils.checkTracksNumber(0);}  }
class C{  private Collection<ScriptCommand> createGlobalSecurityPropertiesScripts(){  Collection<ScriptCommand> globalSecPropertiesCommands=new ArrayList<ScriptCommand>();  String globSecProps=getPropertyValue(WebSpherePropertySet.GLOBAL_SECURITY_PROPERTIES);  if (globSecProps != null && !globSecProps.isEmpty()) {    Properties parsedProperty=PropertyUtils.splitPropertiesOnPipe(globSecProps);    for (    Entry<Object,Object> propertyItem : parsedProperty.entrySet()) {      String propertyName=propertyItem.getKey().toString();      String propertyValue=propertyItem.getValue().toString();      globalSecPropertiesCommands.add(factory.setGlobalSecurityPropertyScript(propertyName,propertyValue));    }  }  return globalSecPropertiesCommands;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof CategoryTick && super.equals(obj)) {    CategoryTick that=(CategoryTick)obj;    if (!ObjectUtilities.equal(this.category,that.category)) {      return false;    }    if (!ObjectUtilities.equal(this.label,that.label)) {      return false;    }    if (!ObjectUtilities.equal(this.labelAnchor,that.labelAnchor)) {      return false;    }    return true;  }  return false;}  }
class C{  @Override UnixMountEntry findMountEntry() throws IOException {  AixFileSystem fs=(AixFileSystem)file().getFileSystem();  UnixPath path=null;  try {    byte[] rp=UnixNativeDispatcher.realpath(file());    path=new UnixPath(fs,rp);  } catch (  UnixException x) {    x.rethrowAsIOException(file());  }  UnixPath parent=path.getParent();  while (parent != null) {    UnixFileAttributes attrs=null;    try {      attrs=UnixFileAttributes.get(parent,true);    } catch (    UnixException x) {      x.rethrowAsIOException(parent);    }    if (attrs.dev() != dev())     break;    path=parent;    parent=parent.getParent();  }  byte[] dir=path.asByteArray();  for (  UnixMountEntry entry : fs.getMountEntries()) {    if (Arrays.equals(dir,entry.dir()))     return entry;  }  throw new IOException("Mount point not found");}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildWishman(zone);}  }
class C{  public void addListener(final INaviGraphListener listener){  super.addListener(listener);  m_listeners.addListener(listener);  m_synchronizer.addListener(listener);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:10.412 -0500",hash_original_method="A1AF1BC51EE82C9340D705103AD7A155",hash_generated_method="B095B45DF7DE60E1EB58901C0B717D81") private void renegotiateNewSession(){  if (parameters.getEnableSessionCreation()) {    isResuming=false;    session=new SSLSessionImpl(parameters.getSecureRandom());    if (engineOwner != null) {      session.setPeer(engineOwner.getPeerHost(),engineOwner.getPeerPort());    } else {      session.setPeer(socketOwner.getInetAddress().getHostName(),socketOwner.getPort());    }    session.protocol=ProtocolVersion.getLatestVersion(parameters.getEnabledProtocols());    recordProtocol.setVersion(session.protocol.version);    startSession();  } else {    status=NOT_HANDSHAKING;    sendWarningAlert(AlertProtocol.NO_RENEGOTIATION);  }}  }
class C{  public void loadDemands(BufferedReader reader) throws IOException {  for (int i=0; i < size; i++) {    String line=reader.readLine();    String[] tokens=line.trim().split("\\s+");    int id=Integer.parseInt(tokens[0]);    int demand=Integer.parseInt(tokens[1]);    demands.put(id,demand);  }}  }
class C{  public static Collection<Unit> transporting(final Unit transport,final Collection<Unit> transportedUnitsPossible){  return new ArrayList<>(((TripleAUnit)transport).getTransporting(transportedUnitsPossible));}  }
class C{  public void addPendingDelete(ShardId shardId,Settings settings){  if (shardId == null) {    throw new IllegalArgumentException("shardId must not be null");  }  if (settings == null) {    throw new IllegalArgumentException("settings must not be null");  }  PendingDelete pendingDelete=new PendingDelete(shardId,settings);  addPendingDelete(shardId.index(),pendingDelete);}  }
class C{  public void check(SnmpValue x,long var,Object data) throws SnmpStatusException {switch ((int)var) {case 120:{      throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);    }case 23:  throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 22:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 21:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 110:{throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);}case 20:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 13:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 12:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 3:if (x instanceof SnmpInt) {try {node.checkJvmMemoryGCCall(new EnumJvmMemoryGCCall(((SnmpInt)x).toInteger()));} catch (IllegalArgumentException e) {throw new SnmpStatusException(SnmpStatusException.snmpRspWrongValue);}} else {throw new SnmpStatusException(SnmpStatusException.snmpRspWrongType);}break;case 11:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 2:if (x instanceof SnmpInt) {try {node.checkJvmMemoryGCVerboseLevel(new EnumJvmMemoryGCVerboseLevel(((SnmpInt)x).toInteger()));} catch (IllegalArgumentException e) {throw new SnmpStatusException(SnmpStatusException.snmpRspWrongValue);}} else {throw new SnmpStatusException(SnmpStatusException.snmpRspWrongType);}break;case 101:{throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);}case 10:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 1:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 100:{throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);}default :throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);}}  }
class C{  private View findFirstVisibleChildClosestToStart(boolean completelyVisible,boolean acceptPartiallyVisible){  if (mShouldReverseLayout) {    return findOneVisibleChild(getChildCount() - 1,-1,completelyVisible,acceptPartiallyVisible);  } else {    return findOneVisibleChild(0,getChildCount(),completelyVisible,acceptPartiallyVisible);  }}  }
class C{  public MockSerializableEntity(final int intValue,final String stringValue,final long longValue){  this.intValue=intValue;  this.stringValue=stringValue;  this.longValue=longValue;}  }
class C{  public void updateObject(int columnIndex,Object x,int scale) throws SQLException {  checkUpdatable();  getField(columnIndex).setObject(x);}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == ReactiveElement.class) {switch (baseFeatureID) {case SGraphPackage.REACTIVE_ELEMENT__LOCAL_REACTIONS:      return SGraphPackage.STATECHART__LOCAL_REACTIONS;default :    return -1;}}if (baseClass == ScopedElement.class) {switch (baseFeatureID) {case SGraphPackage.SCOPED_ELEMENT__SCOPES:  return SGraphPackage.STATECHART__SCOPES;case SGraphPackage.SCOPED_ELEMENT__NAMESPACE:return SGraphPackage.STATECHART__NAMESPACE;default :return -1;}}if (baseClass == CompositeElement.class) {switch (baseFeatureID) {case SGraphPackage.COMPOSITE_ELEMENT__REGIONS:return SGraphPackage.STATECHART__REGIONS;default :return -1;}}if (baseClass == NamedElement.class) {switch (baseFeatureID) {case BasePackage.NAMED_ELEMENT__NAME:return SGraphPackage.STATECHART__NAME;default :return -1;}}if (baseClass == DocumentedElement.class) {switch (baseFeatureID) {case BasePackage.DOCUMENTED_ELEMENT__DOCUMENTATION:return SGraphPackage.STATECHART__DOCUMENTATION;default :return -1;}}if (baseClass == DomainElement.class) {switch (baseFeatureID) {case BasePackage.DOMAIN_ELEMENT__DOMAIN_ID:return SGraphPackage.STATECHART__DOMAIN_ID;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  private void mergeStates(int rowNum,short[] newValues,Vector<Integer> rowsBeingUpdated){  short[] oldValues=tempStateTable.elementAt(rowNum);  boolean isLoopingState=loopingStates.contains(new Integer(rowNum));  for (int i=0; i < oldValues.length; i++) {    if (oldValues[i] == newValues[i]) {      continue;    } else     if (isLoopingState && loopingStates.contains(new Integer(oldValues[i]))) {      if (newValues[i] != 0) {        if (oldValues[i] == 0) {          clearLoopingStates=true;        }        oldValues[i]=newValues[i];      }    } else     if (oldValues[i] == 0) {      oldValues[i]=newValues[i];    } else     if (i == numCategories) {      oldValues[i]=(short)((newValues[i] & ALL_FLAGS) | oldValues[i]);    } else     if (oldValues[i] != 0 && newValues[i] != 0) {      int combinedRowNum=searchMergeList(oldValues[i],newValues[i]);      if (combinedRowNum != 0) {        oldValues[i]=(short)combinedRowNum;      } else {        int oldRowNum=oldValues[i];        int newRowNum=newValues[i];        combinedRowNum=tempStateTable.size();        if (mergeList == null) {          mergeList=new Vector<>();        }        mergeList.addElement(new int[]{oldRowNum,newRowNum,combinedRowNum});        short[] newRow=new short[numCategories + 1];        short[] oldRow=tempStateTable.elementAt(oldRowNum);        System.arraycopy(oldRow,0,newRow,0,numCategories + 1);        tempStateTable.addElement(newRow);        oldValues[i]=(short)combinedRowNum;        if ((decisionPointList.contains(new Integer(oldRowNum)) || decisionPointList.contains(new Integer(newRowNum))) && !decisionPointList.contains(new Integer(combinedRowNum))) {          decisionPointList.addElement(new Integer(combinedRowNum));        }        if ((rowsBeingUpdated.contains(new Integer(oldRowNum)) || rowsBeingUpdated.contains(new Integer(newRowNum))) && !rowsBeingUpdated.contains(new Integer(combinedRowNum))) {          decisionPointList.addElement(new Integer(combinedRowNum));        }        for (int k=0; k < decisionPointStack.size(); k++) {          Vector<Integer> dpl=decisionPointStack.elementAt(k);          if ((dpl.contains(new Integer(oldRowNum)) || dpl.contains(new Integer(newRowNum))) && !dpl.contains(new Integer(combinedRowNum))) {            dpl.addElement(new Integer(combinedRowNum));          }        }        mergeStates(combinedRowNum,tempStateTable.elementAt(newValues[i]),rowsBeingUpdated);      }    }  }  return;}  }
class C{  public static void R2_DTLZ2_M5(double[] x,double[] f,int nx,int n_obj){  int k=nx - n_obj + 1;  double g=0;  double[][] M_10D={{0.0346,-0.7523,0.3561,-0.2958,0.4675,0,0,0,0,0},{0.8159,-0.0423,0.4063,0.3455,-0.2192,0,0,0,0,0},{-0.3499,0.3421,0.8227,-0.2190,-0.1889,0,0,0,0,0},{-0.0963,-0.4747,-0.0998,-0.2429,-0.8345,0,0,0,0,0},{-0.4487,-0.2998,0.1460,0.8283,-0.0363,0,0,0,0,0},{0,0,0,0,0,1,0,0,0,0},{0,0,0,0,0,0,1,0,0,0},{0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,0,0,1}};  double[] lamda_l_10D={0.313,0.312,0.321,0.316,0.456,1,1,1,1,1};  double[][] M_30D={{0.0128,0.2165,0.4374,-0.0800,0.0886,-0.2015,0.1071,0.2886,0.2354,0.2785,-0.1748,0.2147,0.1649,-0.3043,0.5316,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000,0.000},{0.4813,0.2420,-0.3663,-0.0420,-0.0088,-0.4945,-0.3073,0.1990,0.0441,-0.0627,0.0191,0.3880,-0.0618,-0.0319,-0.1833,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000,0.000},{0.4816,-0.2254,0.0663,0.4801,0.2009,-0.0008,-0.1501,0.0269,-0.2037,0.4334,-0.2157,-0.3175,-0.0923,0.1451,0.1118,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000,0.000},{-0.0876,-0.2667,-0.0063,0.2114,0.4506,0.0823,-0.0125,0.2313,0.0840,-0.2376,0.1938,-0.0030,0.3391,0.0863,0.1231,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000,0.000},{-0.1025,0.4011,-0.0117,0.2076,0.2585,0.1124,-0.0288,0.3095,-0.6146,-0.2376,0.1938,-0.0030,0.3391,0.0863,0.1231,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000,0.000},{0.4543,-0.2761,-0.2985,-0.2837,0.0634,0.1070,0.2996,-0.2690,-0.1634,-0.1452,0.1799,-0.0014,0.2394,-0.2745,0.3969,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000,0.000},{-0.1422,-0.4364,0.0751,-0.2235,0.3966,-0.0252,0.0908,0.0477,-0.2254,0.1801,-0.0552,0.5770,-0.0396,0.3765,-0.0522,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000,0.000},{0.3542,-0.2245,0.3497,-0.1609,-0.1107,0.0079,0.2241,0.4517,0.1309,-0.3355,-0.1123,-0.1831,0.3000,0.2045,-0.3191,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000,0.000},{0.0005,0.0377,-0.2808,-0.0641,0.1316,0.2191,0.0207,0.3308,0.4117,0.3839,0.5775,-0.1219,0.1192,0.2435,0.0414,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000,0.000},{-0.1177,-0.0001,-0.1992,-0.4533,0.4234,-0.0191,-0.3740,0.1325,0.0972,-0.2042,-0.3493,-0.4018,-0.1087,0.0918,0.2217,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000,0.000},{0.1818,0.3022,-0.1388,-0.2380,-0.0773,0.6463,0.0450,0.1030,-0.0958,0.2837,-0.3969,0.1779,-0.0251,-0.1543,-0.2452,0,0,0,0,0,0,0,0,0,0,0,0,0,0.000,0.000},{-0.1889,-0.4397,-0.2206,0.0981,-0.5203,0.1325,-0.3427,0.4242,-0.1271,-0.0291,-0.0795,0.1213,0.0565,-0.1092,0.2720,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{-0.1808,-0.0624,-0.2689,0.2289,0.1128,-0.0844,-0.0549,-0.2202,0.2450,0.0825,-0.3319,0.0513,0.7523,0.0043,-0.1472,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{-0.0983,0.0611,-0.4145,0.3017,0.0410,-0.0703,0.6250,0.2449,0.1307,-0.1714,-0.3045,0.0218,-0.2837,0.1408,0.1633,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0.2026,0.0324,0.1496,0.3129,0.1437,0.4331,-0.2629,-0.1498,0.3746,-0.4366,0.0163,0.3316,-0.0697,0.1833,0.2412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}};  double[] lamda_l_30D={0.113,0.105,0.117,0.119,0.108,0.110,0.101,0.107,0.111,0.109,0.120,0.108,0.101,0.105,0.116,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000,1.000};  double[] z=new double[nx];  double[] zz=new double[nx];  double[] p=new double[nx];  double[] psum=new double[n_obj];  double[][] M=new double[nx][nx];  double[] lamda_l=new double[nx];  if (nx == 10) {    for (int i=0; i < nx; i++) {      for (int j=0; j < nx; j++) {        M[i][j]=M_10D[i][j];      }      lamda_l[i]=lamda_l_10D[i];    }  } else {    for (int i=0; i < nx; i++) {      for (int j=0; j < nx; j++) {        M[i][j]=M_30D[i][j];      }      lamda_l[i]=lamda_l_30D[i];    }  }  for (int i=0; i < nx; i++) {    z[i]=0;    for (int j=0; j < nx; j++) {      z[i]+=M[i][j] * x[j];    }    if (z[i] >= 0 && z[i] <= 1) {      zz[i]=z[i];      p[i]=0;    } else     if (z[i] < 0) {      zz[i]=-lamda_l[i] * z[i];      p[i]=-z[i];    } else {      zz[i]=1 - lamda_l[i] * (z[i] - 1);      p[i]=z[i] - 1;    }  }  for (int j=0; j < n_obj; j++) {    psum[j]=0;  }  for (int i=nx - k + 1; i <= nx; i++) {    g+=Math.pow(zz[i - 1] - 0.5,2);    for (int j=0; j < n_obj; j++) {      psum[j]=Math.sqrt(Math.pow(psum[j],2) + Math.pow(p[i - 1],2));    }  }  for (int i=1; i <= n_obj; i++) {    double ff=(1 + g);    for (int j=n_obj - i; j >= 1; j--) {      ff*=Math.cos(zz[j - 1] * PI / 2.0);      psum[i - 1]=Math.sqrt(Math.pow(psum[i - 1],2) + Math.pow(p[j - 1],2));    }    if (i > 1) {      ff*=Math.sin(zz[(n_obj - i + 1) - 1] * PI / 2.0);      psum[i - 1]=Math.sqrt(Math.pow(psum[i - 1],2) + Math.pow(p[(n_obj - i + 1) - 1],2));    }    f[i - 1]=2.0 / (1 + Math.exp(-psum[i - 1])) * (ff + 1);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public LaunchVideo(SantaContext context,LauncherDataChangedCallback adapter,int cardDrawableId,int unlockDate){  super(context,adapter,R.string.video,cardDrawableId);  mCardDrawableId=cardDrawableId;  mUnlockDate=unlockDate;  mMeasurement=FirebaseAnalytics.getInstance(context.getApplicationContext());}  }
class C{  public ValidatorHandler(ValidatorConfig config){  super(config);  this.config=config;  this.validatorId=config.getValidatorId();}  }
class C{  @Override public boolean emitBounds(){  return false;}  }
class C{  private void pop(char c) throws JSONException {  if (this.top <= 0) {    throw new JSONException("Nesting error.");  }  char m=this.stack[this.top - 1] == null ? 'a' : 'k';  if (m != c) {    throw new JSONException("Nesting error.");  }  this.top-=1;  this.mode=this.top == 0 ? 'd' : this.stack[this.top - 1] == null ? 'a' : 'k';}  }
class C{  private void showRoundReport(){  new MiniReportDisplay(frame,client).setVisible(true);}  }
class C{  void fillInTables(boolean f2ary,boolean swap,UCompactIntArray map,Vector<Vector<EntryPair>> cTbl,Vector<int[]> eTbl,IntHashtable cFlgs,short mso,short mto){  frenchSec=f2ary;  seAsianSwapping=swap;  mapping=map;  contractTable=cTbl;  expandTable=eTbl;  contractFlags=cFlgs;  maxSecOrder=mso;  maxTerOrder=mto;}  }
class C{  public static synchronized void userLog(final Throwable t){  final PrintStream log=getLogStream();  if (log != null) {    t.printStackTrace(log);    log.flush();    if (log.checkError()) {      if (!log.equals(System.err)) {        if (!sLogRedirect) {          sLogRedirect=true;          System.err.println(now() + "Logging problem: redirecting logging to System.err.");        }        t.printStackTrace(System.err);        System.err.flush();      }    }  }}  }
class C{  public SsoRequestSettings(String spAlias,String idpAlias){  this(spAlias,idpAlias,false,SamlNames.PERSISTENT,true,false,false,0,null,null);  this.proxyCount=null;  this.isDelegable=false;  this.isRenewable=false;  this.allowScopingElement=true;  this.allowSPNameQualifierInNameIDPolicy=true;  this.allowAllowCreateInNameIDPolicy=true;  this.allowAllowCreateInNameIDPolicy=true;  this.allowRequestedAuthnContext=true;}  }
class C{  private void drawSpectrum(Graphics2D graphics){  Dimension size=getSize();  Rectangle background=new Rectangle(0,0,size.width,size.height);  graphics.setColor(mColorSpectrumBackground);  graphics.draw(background);  graphics.fill(background);  GradientPaint gradient=new GradientPaint(0,(getSize().height - mSpectrumInset) / 2,mColorSpectrumGradientTop,0,getSize().height,mColorSpectrumGradientBottom);  graphics.setBackground(mColorSpectrumBackground);  GeneralPath spectrumShape=new GeneralPath();  spectrumShape.moveTo(size.getWidth(),size.getHeight() - mSpectrumInset);  spectrumShape.lineTo(0,size.getHeight() - mSpectrumInset);  float[] bins=getBins();  if (bins != null) {    float insideHeight=size.height - mSpectrumInset;    float scalor=insideHeight / -mDBScale;    float binSize=(float)size.width / ((float)(bins.length));    for (int x=0; x < bins.length; x++) {      float height;      height=bins[x] * scalor;      if (height > insideHeight) {        height=insideHeight;      }      if (height < 0) {        height=0;      }      float xAxis=(float)x * binSize;      spectrumShape.lineTo(xAxis,height);    }  } else {    graphics.setPaint(gradient);    spectrumShape.lineTo(0,size.getHeight() - mSpectrumInset);    spectrumShape.lineTo(size.getWidth(),size.getHeight() - mSpectrumInset);  }  spectrumShape.lineTo(size.getWidth(),size.getHeight() - mSpectrumInset);  graphics.setPaint(gradient);  graphics.draw(spectrumShape);  graphics.fill(spectrumShape);  graphics.setPaint(mColorSpectrumLine);  graphics.draw(new Line2D.Float(0,size.height - mSpectrumInset,size.width,size.height - mSpectrumInset));}  }
class C{  public void testConverterInheritance(UIViewRoot root) throws ConverterException, InstantiationException, IllegalAccessException, ClassNotFoundException {  System.out.println("Testing ConverterInheritance");  Converter converter;  UIInput text=new UIInput();  text.setId("my_date_converter");  root.getChildren().add(text);  application.addConverter(java.lang.Number.class,"javax.faces.convert.NumberConverter");  converter=application.createConverter(java.lang.Integer.class);  assertTrue(converter != null);  assertTrue(converter instanceof javax.faces.convert.IntegerConverter);  application.addConverter(java.util.Date.class,"javax.faces.convert.DateTimeConverter");  converter=null;  converter=application.createConverter(java.sql.Date.class);  assertTrue(converter != null);  application.addConverter(java.util.AbstractCollection.class,"javax.faces.convert.DateTimeConverter");  converter=null;  try {    converter=application.createConverter(java.util.HashSet.class);  } catch (  javax.faces.FacesException fe) {  }  assertTrue(converter != null);  application.addConverter(java.text.CharacterIterator.class,"javax.faces.convert.CharacterConverter");  converter=null;  converter=application.createConverter(java.text.StringCharacterIterator.class);  assertTrue(converter != null);  application.addConverter(java.lang.Cloneable.class,"javax.faces.convert.CharacterConverter");  converter=null;  converter=application.createConverter(java.text.StringCharacterIterator.class);  assertTrue(converter != null);}  }
class C{  public ExecuteResults(Queue<ResultSet> resultSets){  this.updateCount=-1;  this.additionalResultSets=resultSets;}  }
class C{  public static Document createXMLErrors(UseCaseConf useCaseConf,List badCtrls){  Document document=DocumentHelper.createDocument();  Element root=document.addElement(XML_ERROR_TEXT);  String msg=RBUtil.getInstance(useCaseConf.getLocale()).getProperty(Keys.I18N_ISICRESSRV_QRY_ABORT_CAUSE_INVALID_TEXT);  root.addElement(XML_MESSAGE_TEXT).add(DocumentHelper.createCDATA(msg));  for (Iterator it=badCtrls.iterator(); it.hasNext(); ) {    root.addElement(XML_CTRL_ID).addAttribute(XML_ID_TEXT,it.next().toString());  }  return document;}  }
class C{  private static void swap(double[] x,int a,int b){  double t=x[a];  x[a]=x[b];  x[b]=t;}  }
class C{  public LinkedListNode(Object object,LinkedListNode next,LinkedListNode previous){  this.object=object;  this.next=next;  this.previous=previous;}  }
class C{  public void testNextDoubleBadBounds(){  SplittableRandom sr=new SplittableRandom();  Runnable[] throwingActions={null,null,null,null,null};  assertThrows(IllegalArgumentException.class,throwingActions);}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:50.869 -0500",hash_original_method="97688987A014CB8C0C54BAB32FA72A4F",hash_generated_method="56E445559C692A12AD7C40B5297E4C77") public void readSequence(ASN1Sequence sequence) throws IOException {  if (tag != ASN1Constants.TAG_C_SEQUENCE) {    throw expected("sequence");  }  int begOffset=offset;  int endOffset=begOffset + length;  ASN1Type[] type=sequence.type;  int i=0;  if (isVerify) {    for (; (offset < endOffset) && (i < type.length); i++) {      next();      while (!type[i].checkTag(tag)) {        if (!sequence.OPTIONAL[i] || (i == type.length - 1)) {          throw new ASN1Exception("ASN.1 Sequence: mandatory value is missing at [" + tagOffset + "]");        }        i++;      }      type[i].decode(this);    }    for (; i < type.length; i++) {      if (!sequence.OPTIONAL[i]) {        throw new ASN1Exception("ASN.1 Sequence: mandatory value is missing at [" + tagOffset + "]");      }    }  } else {    int seqTagOffset=tagOffset;    Object[] values=new Object[type.length];    for (; (offset < endOffset) && (i < type.length); i++) {      next();      while (!type[i].checkTag(tag)) {        if (!sequence.OPTIONAL[i] || (i == type.length - 1)) {          throw new ASN1Exception("ASN.1 Sequence: mandatory value is missing at [" + tagOffset + "]");        }        if (sequence.DEFAULT[i] != null) {          values[i]=sequence.DEFAULT[i];        }        i++;      }      values[i]=type[i].decode(this);    }    for (; i < type.length; i++) {      if (!sequence.OPTIONAL[i]) {        throw new ASN1Exception("ASN.1 Sequence: mandatory value is missing at [" + tagOffset + "]");      }      if (sequence.DEFAULT[i] != null) {        values[i]=sequence.DEFAULT[i];      }    }    content=values;    tagOffset=seqTagOffset;  }  if (offset != endOffset) {    throw new ASN1Exception("Wrong encoding at [" + begOffset + "]. Content's length and encoded length are not the same");  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static List<Alert> findByLimitOffsetStatus(EntityManager em,int limit,int offset,boolean enabled){  requireArgument(em != null,"Entity manager can not be null.");  TypedQuery<Alert> query=em.createNamedQuery("Alert.findByStatus",Alert.class);  query.setHint("javax.persistence.cache.storeMode","REFRESH");  try {    query.setParameter("enabled",enabled);    query.setFirstResult(offset);    query.setMaxResults(limit);    return query.getResultList();  } catch (  NoResultException ex) {    return new ArrayList<>(0);  }}  }
class C{  public void addPKClassId(String attributeName,String type){  m_pkClassIDs.put(attributeName,type);}  }
class C{  public void dispose(){  reset();}  }
class C{  NativeObject(long address,long offset){  this.allocationAddress=address;  this.address=address + offset;}  }
class C{  public void testGetDataLength(){  char expectedReturn=0;  char actualReturn=xorOnly.getDataLength();  assertEquals("data length was not 0",expectedReturn,actualReturn);}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder=NonPowerAware.class.getClassLoader().getResource("workload/planetlab").getPath();  String outputFolder="output";  String workload="20110303";  String vmAllocationPolicy="thr";  String vmSelectionPolicy="mu";  String parameter="0.8";  new PlanetLabRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  private void printStatistics(int inputNStopFacilities){  int nArtificialLinks=0;  for (  Link l : network.getLinks().values()) {    if (l.getAllowedModes().contains(PublicTransitMappingStrings.ARTIFICIAL_LINK_MODE)) {      nArtificialLinks++;    }  }  int withoutArtificialLinks=0;  int nRoutes=0;  for (  TransitLine transitLine : this.schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : transitLine.getRoutes().values()) {      nRoutes++;      boolean routeHasArtificialLink=false;      List<Id<Link>> linkIds=ScheduleTools.getTransitRouteLinkIds(transitRoute);      for (      Id<Link> linkId : linkIds) {        if (network.getLinks().get(linkId).getAllowedModes().contains(PublicTransitMappingStrings.ARTIFICIAL_LINK_MODE)) {          routeHasArtificialLink=true;        }      }      if (!routeHasArtificialLink) {        withoutArtificialLinks++;      }    }  }  StopFacilityHistogram histogram=new StopFacilityHistogram(schedule);  log.info("");  log.info("    Artificial Links:");  log.info("       created  " + nArtificialLinks);  log.info("    Stop Facilities:");  log.info("       total input   " + inputNStopFacilities);  log.info("       total output  " + schedule.getFacilities().size());  log.info("       diff.         " + (schedule.getFacilities().size() - inputNStopFacilities));  log.info("    Child Stop Facilities:");  log.info("       median nr created   " + String.format("%.0f",histogram.median()));  log.info("       average nr created  " + String.format("%.2f",histogram.average()));  log.info("       max nr created      " + String.format("%.0f",histogram.max()));  log.info("    Transit Routes:");  log.info("       total routes in schedule         " + nRoutes);  log.info("       routes without artificial links  " + withoutArtificialLinks);  log.info("");  log.info("    Run PlausibilityCheck for further analysis");  log.info("");  log.info("==================================================");}  }
class C{  public static boolean isMimeTypeImage(String mimeType){  if (mimeType.equals(Const.ContentTypes.IMAGE_GIF)) {    return true;  } else   if (mimeType.equals(Const.ContentTypes.IMAGE_JPG)) {    return true;  } else   if (mimeType.equals(Const.ContentTypes.IMAGE_PNG)) {    return true;  }  return false;}  }
class C{  public Builder root(String zkRoot){  this.innerZkRoot=zkRoot;  return this;}  }
class C{  public UnitAttachment(final String name,final Attachable attachable,final GameData gameData){  super(name,attachable,gameData);}  }
class C{  protected boolean isZeppelinHubUrlValid(String url){  boolean valid;  try {    new URI(url).toURL();    valid=true;  } catch (  URISyntaxException|MalformedURLException e) {    LOG.error("Zeppelinhub url is not valid, default ZeppelinHub url will be used.",e);    valid=false;  }  return valid;}  }
class C{  public QuarkFactoryResult create(Properties info) throws QuarkException {  try {    ObjectMapper objectMapper=new ObjectMapper();    RootSchema rootSchema=objectMapper.readValue((String)info.get("model"),RootSchema.class);    ImmutableList.Builder<DataSourceSchema> schemaList=new ImmutableList.Builder<>();    for (    com.qubole.quark.catalog.json.DataSourceSchema secondary : rootSchema.dataSources) {      schemaList.add(secondary);    }    List<DataSourceSchema> schemas=schemaList.build();    return new QuarkFactoryResult(schemas,rootSchema.relSchema,rootSchema.defaultDataSource != null ? schemas.get(rootSchema.defaultDataSource) : null);  } catch (  java.io.IOException e) {    LOG.error("Unexpected Exception during create",e);    throw new QuarkException(e);  }}  }
class C{  protected Color computeBackgroundColor(Color color){  float[] colorArray=new float[4];  Color.RGBtoHSB(color.getRed(),color.getGreen(),color.getBlue(),colorArray);  if (colorArray[2] > 0.5)   return new Color(0,0,0,0.7f); else   return new Color(1,1,1,0.7f);}  }
class C{  public static <T>int binarySearchCeil(List<? extends Comparable<? super T>> list,T key,boolean inclusive,boolean stayInBounds){  int index=Collections.binarySearch(list,key);  index=index < 0 ? ~index : (inclusive ? index : (index + 1));  return stayInBounds ? Math.min(list.size() - 1,index) : index;}  }
class C{  public static void invertImage(BufferedImage image){  WritableRaster inRaster=image.getRaster();  int[] p=new int[3];  for (int x=0; x < inRaster.getWidth(); x++) {    for (int y=0; y < inRaster.getHeight(); y++) {      inRaster.getPixel(x,y,p);      p[0]=255 - p[0];      inRaster.setPixel(x,y,p);    }  }}  }
class C{  public MethodReferenceMatch(IJavaElement enclosingElement,int accuracy,int offset,int length,boolean constructor,boolean synthetic,boolean superInvocation,boolean insideDocComment,SearchParticipant participant,IResource resource){  this(enclosingElement,accuracy,offset,length,constructor,synthetic,insideDocComment,participant,resource);  this.superInvocation=superInvocation;}  }
class C{  public void loading(){  mHintView.setVisibility(View.GONE);  mProgressBar.setVisibility(View.VISIBLE);}  }
class C{  public void checkChanges(){  settings.clearMoviePosterFilenames();  if (cbMoviePosterFilename2.isSelected()) {    settings.addMoviePosterFilename(MoviePosterNaming.MOVIE_JPG);    settings.addMoviePosterFilename(MoviePosterNaming.MOVIE_PNG);  }  if (cbMoviePosterFilename4.isSelected()) {    settings.addMoviePosterFilename(MoviePosterNaming.POSTER_JPG);    settings.addMoviePosterFilename(MoviePosterNaming.POSTER_PNG);  }  if (cbMoviePosterFilename6.isSelected()) {    settings.addMoviePosterFilename(MoviePosterNaming.FOLDER_JPG);    settings.addMoviePosterFilename(MoviePosterNaming.FOLDER_PNG);  }  if (cbMoviePosterFilename7.isSelected()) {    settings.addMoviePosterFilename(MoviePosterNaming.FILENAME_JPG);    settings.addMoviePosterFilename(MoviePosterNaming.FILENAME_PNG);  }  if (cbMoviePosterFilename8.isSelected()) {    settings.addMoviePosterFilename(MoviePosterNaming.FILENAME_POSTER_JPG);    settings.addMoviePosterFilename(MoviePosterNaming.FILENAME_POSTER_PNG);  }  settings.clearMovieFanartFilenames();  if (cbMovieFanartFilename1.isSelected()) {    settings.addMovieFanartFilename(MovieFanartNaming.FILENAME_FANART_JPG);    settings.addMovieFanartFilename(MovieFanartNaming.FILENAME_FANART_PNG);  }  if (cbMovieFanartFilename2.isSelected()) {    settings.addMovieFanartFilename(MovieFanartNaming.FANART_JPG);    settings.addMovieFanartFilename(MovieFanartNaming.FANART_PNG);  }  if (cbMovieFanartFilename3.isSelected()) {    settings.addMovieFanartFilename(MovieFanartNaming.FILENAME_FANART2_JPG);    settings.addMovieFanartFilename(MovieFanartNaming.FILENAME_FANART2_PNG);  }}  }
class C{  public Promise<BitbucketRepositoryFork> forkRepository(final String owner,final String repositorySlug,final String forkName,final boolean isForkPrivate) throws IllegalArgumentException {  checkArgument(owner != null,"owner");  checkArgument(repositorySlug != null,"repositorySlug");  checkArgument(forkName != null && !isNullOrEmpty(forkName),"forkName");  final String requestUrl=getBaseUrl() + REPOSITORIES + '/'+ owner+ '/'+ repositorySlug+ "/fork"+ "?forkName="+ forkName+ "&isForkPrivate="+ isForkPrivate;  return asyncRequestFactory.createPostRequest(requestUrl,null).loader(loaderFactory.newLoader()).send(dtoUnmarshallerFactory.newUnmarshaller(BitbucketRepositoryFork.class));}  }
class C{  @SkipValidation @Action(value="/modifyProperty-modifyForm") public String modifyForm(){  LOGGER.debug("Entered into modifyForm, \nIndexNumber: " + indexNumber + ", BasicProperty: "+ basicProp+ ", OldProperty: "+ oldProperty+ ", PropertyModel: "+ propertyModel);  if (propertyModel.getStatus().equals(PropertyTaxConstants.STATUS_DEMAND_INACTIVE)) {    addActionError(getText("error.msg.demandInactive"));    return COMMON_FORM;  }  String target="";  target=populateFormData(Boolean.FALSE);  isMeesevaUser=propService.isMeesevaUser(securityUtils.getCurrentUser());  if (isMeesevaUser) {    if (getMeesevaApplicationNumber() == null) {      addActionMessage(getText("MEESEVA.005"));      return MEESEVA_ERROR;    } else {      propertyModel.setMeesevaApplicationNumber(getMeesevaApplicationNumber());    }  }  LOGGER.debug("modifyForm: IsAuthProp: " + getIsAuthProp() + ", AreaOfPlot: "+ getAreaOfPlot()+ ", PropTypeId: "+ getPropTypeId()+ ", PropertyCategory: "+ getPropertyCategory()+ ", PropUsageId: "+ getPropUsageId()+ ", PropOccId: "+ getPropOccId());  LOGGER.debug("Exiting from modifyForm");  return target;}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  synchronized void add(Component imgLabel,String imageUrl){  if (started) {    throw new IllegalStateException("ResourceThreadQueue already started! stop/cancel first");  }  images.put(imgLabel,imageUrl);}  }
class C{  public CGraphPanel(final CGraphModel model){  super(new BorderLayout());  Preconditions.checkNotNull(model,"IE01617: Model argument can't be null");  m_model=model;  m_model.setPanel(this);  m_viewModel=new CPerspectiveModel(model);  final CGraphWindow parent=m_model.getParent();  final ZyGraph graph=m_model.getGraph();  final InternalViewSwitcher viewSwitcher=new InternalViewSwitcher();  m_toolBar=new CGraphToolBar(parent,model.getGraphPanel(),graph,m_model.getViewContainer().getModules());  m_menuBar=new CGraphWindowMenuBar(m_model,viewSwitcher);  m_graphSynchronizer=new CGraphPanelSynchronizer(m_model,m_menuBar);  final CDebugPerspectiveModel debugPerspective=((CDebugPerspectiveModel)m_viewModel.getModel(PerspectiveType.DebugPerspective));  m_bottomPanel=new CCombinedBottomPanel(model,m_graphSynchronizer,m_viewModel);  m_centerPanel=new CCombinedCenterPanel(model.getGraph(),debugPerspective);  m_rightPanel=new CCombinedRightPanel(parent,model,m_viewModel);  m_leftPanel=new CCombinedLeftPanel(model,m_viewModel,m_toolBar.getSearchPanel().getSearchField());  createGui();  m_dialogs=new CGraphPanelDialogs(model,m_menuBar);  CGraphHotkeys.registerHotKeys(parent,this,(IFrontEndDebuggerProvider)m_viewModel.getModel(PerspectiveType.DebugPerspective),m_toolBar.getSearchPanel().getSearchField(),m_toolBar.getGotoAddressField());  for (  final IDebugger debugger : model.getDebuggerProvider().getDebuggers()) {    if (debugger.isConnected()) {      debugPerspective.setActiveDebugger(debugger);      viewSwitcher.activateDebugView();      break;    }  }  final IDebugger debugger=debugPerspective.getCurrentSelectedDebugger();  if ((debugger != null) && debugger.isConnected()) {    for (    final TargetProcessThread thread : debugger.getProcessManager().getThreads()) {      final RelocatedAddress address=thread.getCurrentAddress();      if (address != null) {        CDebuggerPainter.updateDebuggerHighlighting(graph,debugger.memoryToFile(address),debugger.getModule(address));      }    }  }}  }
class C{  protected static void writeFileChunks(OutputStream os,@Nullable byte[]... chunks) throws IOException {  if (chunks != null && chunks.length > 0) {    for (    byte[] chunk : chunks)     os.write(chunk);  }}  }
class C{  @Override public void onMessage(Message message){  try {    TextMessage requestMessage=(TextMessage)message;    System.out.println("Received request from " + requestDestination);    System.out.println(requestMessage.toString());    Destination replyDestination=requestMessage.getJMSReplyTo();    TextMessage replyMessage=serverSession.createTextMessage("Hello: " + requestMessage.getText());    replyMessage.setJMSCorrelationID(requestMessage.getJMSMessageID());    if (dynamicallyCreateProducer) {      replyProducer=serverSession.createProducer(replyDestination);      replyProducer.send(replyMessage);    } else {      replyProducer.send(replyDestination,replyMessage);    }    System.out.println("Sent reply to " + replyDestination);    System.out.println(replyMessage.toString());  } catch (  JMSException e) {    onException(e);  }}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  addr=InetAddress.getByAddress(U.readByteArray(in));}  }
class C{  public static byte[] encodeBase64Chunked(final byte[] binaryData){  return encodeBase64(binaryData,true);}  }
class C{  public static void decode(Reader in,OutputStream out) throws Exception {  char[] chars=new char[4];  int[] sixbit=new int[4];  while (true) {    int numread=0;    while (numread < 4) {      int read=in.read();      if (read < 0) {        break;      }      char aChar=(char)read;      if (Character.isWhitespace(aChar)) {        continue;      }      chars[numread++]=aChar;    }    if (numread == 0) {      return;    }    if (numread != 4) {      throw new Exception("Incomplete character quartet at end of Base64 input");    }    for (int i=0; i < 4; i++) {      Integer value=(Integer)charLookup.get(new Character(chars[i]));      if (value == null) {        if (chars[i] != '=' || i < 2) {          throw new Exception("Invalid char (" + chars[i] + ") in Base64 data");        }        sixbit[i]=-1;      } else {        sixbit[i]=value.intValue();      }    }    out.write((sixbit[0] << 2) + (sixbit[1] >> 4));    int val=(sixbit[1] & 0xf) << 4;    if (sixbit[2] >= 0) {      val+=sixbit[2] >> 2;      out.write(val);      val=(sixbit[2] & 0x3) << 6;      if (sixbit[3] >= 0) {        val+=sixbit[3];        out.write(val);      }    }  }}  }
class C{  public UF8(){  this(30);}  }
class C{  public IsilonList<IsilonSMBShare> listShares(String resumeToken) throws IsilonException {  return list(_baseUrl.resolve(URI_SMB_SHARES),"shares",IsilonSMBShare.class,resumeToken);}  }
