class C{  protected ShaderVar addVarying(String name,DataType dataType){  ShaderVar v=getInstanceForDataType(name,dataType);  v.isGlobal(true);  mVaryings.put(v.getName(),v);  return v;}  }
class C{  public static boolean isFSCaseSensitive(){  if (isFSCaseSensitive == null) {    try {      _isFSCaseSensitive(File.createTempFile("abcx","txt"));    } catch (    IOException e) {      File f=new File("abcx.txt").getAbsoluteFile();      try {        f.createNewFile();        _isFSCaseSensitive(f);      } catch (      IOException e1) {        throw new RuntimeException(e1.getMessage());      }    }  }  return isFSCaseSensitive.booleanValue();}  }
class C{  @Override public boolean loadsReferenceToThis(){  if (isInStaticMethod)   return false;  return asmNode.getOpcode() == Opcodes.ALOAD && getLocalVariableSlot() == 0;}  }
class C{  private void gotoNotes(){  if (m_note_Menu_ID == 0)   m_note_Menu_ID=DB.getSQLValue(null,"SELECT AD_Menu_ID " + "FROM AD_Menu m" + " INNER JOIN AD_TABLE t ON (t.AD_Window_ID=m.AD_Window_ID) "+ "WHERE t.AD_Table_ID=?",389);  if (m_note_Menu_ID == 0)   m_note_Menu_ID=233;  (new AMenuStartItem(m_note_Menu_ID,true,Msg.translate(m_ctx,"AD_Note_ID"),this)).start();}  }
class C{  public static byte[] toByteArray(Reader input,String encoding) throws IOException {  return toByteArray(input,Charsets.toCharset(encoding));}  }
class C{  @SuppressWarnings("unchecked") private V report(int s) throws ExecutionException {  Object x=outcome;  if (s == NORMAL)   return (V)x;  if (s >= CANCELLED)   throw new CancellationException();  throw new ExecutionException((Throwable)x);}  }
class C{  private void resetAllTokens(){  getDeltaInfo().edit().clear().commit();  Toast.makeText(getActivity(),getString(R.string.cleared_saved_delta_tokens),Toast.LENGTH_LONG).show();  refresh();}  }
class C{  public void fireVetoableChange(String name,Object oldValue,Object newValue) throws PropertyVetoException {  beanContextChildSupport.fireVetoableChange(name,oldValue,newValue);}  }
class C{  public GPathResult parse(final InputStream input) throws IOException, SAXException {  return parse(new InputSource(input));}  }
class C{  public static int lastIndexOfIgnoreCase(String s,String subS){  return lastIndexOfIgnoreCase(s,subS,s.length(),0);}  }
class C{  public AccountHeaderBuilder withThreeSmallProfileImages(boolean threeSmallProfileImages){  this.mThreeSmallProfileImages=threeSmallProfileImages;  return this;}  }
class C{  public NotificationChain basicSetRightOperand(Expression newRightOperand,NotificationChain msgs){  Expression oldRightOperand=rightOperand;  rightOperand=newRightOperand;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.BITWISE_OR_EXPRESSION__RIGHT_OPERAND,oldRightOperand,newRightOperand);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static DNSQuestion newQuestion(String name,DNSRecordType type,DNSRecordClass recordClass,boolean unique){switch (type) {case TYPE_A:    return new DNS4Address(name,type,recordClass,unique);case TYPE_A6:  return new DNS6Address(name,type,recordClass,unique);case TYPE_AAAA:return new DNS6Address(name,type,recordClass,unique);case TYPE_ANY:return new AllRecords(name,type,recordClass,unique);case TYPE_HINFO:return new HostInformation(name,type,recordClass,unique);case TYPE_PTR:return new Pointer(name,type,recordClass,unique);case TYPE_SRV:return new Service(name,type,recordClass,unique);case TYPE_TXT:return new Text(name,type,recordClass,unique);default :return new DNSQuestion(name,type,recordClass,unique);}}  }
class C{  public cudaPos(){}  }
class C{  @Override public void onDestroy(){  super.onDestroy();}  }
class C{  private static int[] mult128(int[] a,int[] b){  int[] result=new int[8];  int[] a0=new int[2];  System.arraycopy(a,0,a0,0,Math.min(2,a.length));  int[] a1=new int[2];  if (a.length > 2) {    System.arraycopy(a,2,a1,0,Math.min(2,a.length - 2));  }  int[] b0=new int[2];  System.arraycopy(b,0,b0,0,Math.min(2,b.length));  int[] b1=new int[2];  if (b.length > 2) {    System.arraycopy(b,2,b1,0,Math.min(2,b.length - 2));  }  if (a1[1] == 0 && b1[1] == 0) {    if (a1[0] != 0 || b1[0] != 0) {      int[] c=mult32(a1[0],b1[0]);      result[5]^=c[1];      result[4]^=c[0];      result[3]^=c[1];      result[2]^=c[0];    }  } else {    int[] c=mult64(a1,b1);    result[7]^=c[3];    result[6]^=c[2];    result[5]^=c[1] ^ c[3];    result[4]^=c[0] ^ c[2];    result[3]^=c[1];    result[2]^=c[0];  }  a1[0]^=a0[0];  a1[1]^=a0[1];  b1[0]^=b0[0];  b1[1]^=b0[1];  if (a1[1] == 0 && b1[1] == 0) {    int[] d=mult32(a1[0],b1[0]);    result[3]^=d[1];    result[2]^=d[0];  } else {    int[] d=mult64(a1,b1);    result[5]^=d[3];    result[4]^=d[2];    result[3]^=d[1];    result[2]^=d[0];  }  if (a0[1] == 0 && b0[1] == 0) {    int[] e=mult32(a0[0],b0[0]);    result[3]^=e[1];    result[2]^=e[0];    result[1]^=e[1];    result[0]^=e[0];  } else {    int[] e=mult64(a0,b0);    result[5]^=e[3];    result[4]^=e[2];    result[3]^=e[1] ^ e[3];    result[2]^=e[0] ^ e[2];    result[1]^=e[1];    result[0]^=e[0];  }  return result;}  }
class C{  public DERUTCTime(String time){  this.time=Strings.toByteArray(time);  try {    this.getDate();  } catch (  ParseException e) {    throw new IllegalArgumentException("invalid date string: " + e.getMessage());  }}  }
class C{  public static boolean isPrime(int value){  return new BigInteger(String.valueOf(value)).isProbablePrime(100);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:55.720 -0500",hash_original_method="56AE7DDBC8B1739A2C59C89AA12BEB96",hash_generated_method="C733DAA15C5D25B4291552423F457C43") private void initializeJavaContextClassLoader(){  IPackageManager pm=ActivityThread.getPackageManager();  android.content.pm.PackageInfo pi;  try {    pi=pm.getPackageInfo(mPackageName,0);  } catch (  RemoteException e) {    throw new AssertionError(e);  }  boolean sharedUserIdSet=(pi.sharedUserId != null);  boolean processNameNotDefault=(pi.applicationInfo != null && !mPackageName.equals(pi.applicationInfo.processName));  boolean sharable=(sharedUserIdSet || processNameNotDefault);  ClassLoader contextClassLoader=(sharable) ? new WarningContextClassLoader() : mClassLoader;  Thread.currentThread().setContextClassLoader(contextClassLoader);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void error(SAXParseException exception) throws SAXException {  throw exception;}  }
class C{  @Override public void receiveChangeCipherSpec(){  if (isResuming) {    if (serverHello == null) {      unexpectedMessage();    }  } else   if (clientFinished == null) {    unexpectedMessage();  }  changeCipherSpecReceived=true;}  }
class C{  public T caseEntityAttributeSource(EntityAttributeSource object){  return null;}  }
class C{  public void clear(){  setText(null);  requestFocusInWindow();}  }
class C{  public void removeChild(IXMLElement child){  if (child == null) {    throw new IllegalArgumentException("child must not be null");  }  this.children.remove(child);}  }
class C{  private static int isTable(Path path,FileSystem fs) throws IOException, AccessControlException {  int hiddenFileCount=0;  int datePartitionCount=0;  int dataSetCount=0;  int fileCount=0;  int i=0;  String objName;  try {    for (    FileStatus fstat : fs.listStatus(path)) {      objName=fstat.getPath().getName();      if (!fstat.isDirectory()) {        fileCount++;      } else       if (objName.matches("(_|\\.|tmp|temp|_distcp|backup|\\*|test|trash).*")) {        hiddenFileCount++;      } else       if (objName.matches("daily|hourly|hourly.deduped|monthly|weekly|(ds|dt|datepartition|year|month|date)=[0-9-]+")) {        datePartitionCount++;      } else       if (objName.matches("[0-9\\-_]+\\w+[0-9\\-_]+|\\w+_day=[0-9\\-_]+|\\p{Alnum}+=[0-9\\-_]+|[0-9\\-_]+|[0-9]{14}_\\w+|[0-9]{8}_\\w+|[0-9]{4}-[0-9]{2}-[0-9]{2}.*")) {        datePartitionCount++;      } else {        dataSetCount++;      }      i++;    }  } catch (  AccessControlException e) {    return -1;  }catch (  IOException e) {    return -2;  }catch (  Exception e) {    return -3;  }  if (i == 0 || dataSetCount == 0) {    return 1;  } else   if (i > 0 && datePartitionCount > 0) {    return 1;  } else {    return 0;  }}  }
class C{  public Select(final Iterable<T> itb,final Condition<T> cond){  this.list=itb;  this.condition=cond;}  }
class C{  Cubic[] calcNaturalCubic(int n,int[] x){  float[] w=new float[n + 1];  float[] v=new float[n + 1];  float[] y=new float[n + 1];  float[] D=new float[n + 1];  float z, F, G, H;  int k;  w[1]=v[1]=z=1.0f / 4.0f;  y[0]=z * 3 * (x[1] - x[n]);  H=4;  F=3 * (x[0] - x[n - 1]);  G=1;  for (k=1; k < n; k++) {    v[k + 1]=z=1 / (4 - v[k]);    w[k + 1]=-z * w[k];    y[k]=z * (3 * (x[k + 1] - x[k - 1]) - y[k - 1]);    H-=G * w[k];    F-=G * y[k - 1];    G=-v[k] * G;  }  H-=(G + 1) * (v[n] + w[n]);  y[n]=F - (G + 1) * y[n - 1];  D[n]=y[n] / H;  D[n - 1]=y[n - 1] - (v[n] + w[n]) * D[n];  for (k=n - 2; k >= 0; k--) {    D[k]=y[k] - v[k + 1] * D[k + 1] - w[k + 1] * D[n];  }  Cubic[] C=new Cubic[n + 1];  for (k=0; k < n; k++) {    C[k]=new Cubic((float)x[k],D[k],3 * (x[k + 1] - x[k]) - 2 * D[k] - D[k + 1],2 * (x[k] - x[k + 1]) + D[k] + D[k + 1]);  }  C[n]=new Cubic((float)x[n],D[n],3 * (x[0] - x[n]) - 2 * D[n] - D[0],2 * (x[n] - x[0]) + D[n] + D[0]);  return C;}  }
class C{  static void write(SocketChannel chan,byte[] data) throws TimeoutException, IOException {  write(chan,data,-1,DdmPreferences.getTimeOut());}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof FingerprintAttribute))   return false;  if (obj == this)   return true;  FingerprintAttribute att=(FingerprintAttribute)obj;  if (att.getAttributeType() != getAttributeType() || att.getDataLength() != getDataLength()) {    return false;  }  return true;}  }
class C{  public Object[] toArray(){  return al.toArray();}  }
class C{  static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {  SecurityManager security=System.getSecurityManager();  try {    if (security != null) {      final int lastDot=className.lastIndexOf(".");      String packageName=className;      if (lastDot != -1)       packageName=className.substring(0,lastDot);      security.checkPackageAccess(packageName);    }  } catch (  SecurityException e) {    throw e;  }  Class providerClass;  if (cl == null) {    providerClass=Class.forName(className);  } else {    try {      providerClass=cl.loadClass(className);    } catch (    ClassNotFoundException x) {      if (doFallback) {        ClassLoader current=ObjectFactory.class.getClassLoader();        if (current == null) {          providerClass=Class.forName(className);        } else         if (cl != current) {          cl=current;          providerClass=cl.loadClass(className);        } else {          throw x;        }      } else {        throw x;      }    }  }  return providerClass;}  }
class C{  public void go(Writer writer) throws TransformerException {  createXCalDocument().write(writer,outputProperties);}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  private byte calculateNextSensorSortNameFrom(int shift,byte expectedSensorSortNumber){  byte aux=expectedSensorSortNumber;  String sExpected=HexDump.toHexString(aux);  if (sExpected != null && sExpected.length() >= 2) {    while (shift > 0) {      sExpected=HexDump.toHexString(aux);      char sort1=sExpected.charAt(0);      boolean repeated=sExpected.charAt(1) == '1';switch (sort1) {case '0':        aux=(byte)0x10;      if (!repeated)       aux=(byte)0x01;    break;case '1':  aux=(byte)0x20;if (!repeated) aux=(byte)0x11;break;case '2':aux=(byte)0x30;if (!repeated) aux=(byte)0x21;break;case '3':aux=(byte)0x40;if (!repeated) aux=(byte)0x31;break;case '4':aux=(byte)0x50;if (!repeated) aux=(byte)0x41;break;case '5':aux=(byte)0x60;if (!repeated) aux=(byte)0x51;break;case '6':aux=(byte)0x70;if (!repeated) aux=(byte)0x61;break;case '7':aux=(byte)0x00;if (!repeated) aux=(byte)0x71;break;default :aux=(byte)0xff;}shift--;}return aux;} else return (byte)0xff;}  }
class C{  public void addToCatNodes(DefaultMutableTreeNode node){  if (getRootNode() == null) {    setRootNode(new DefaultMutableTreeNode("root"));  }  getRootNode().add(node);}  }
class C{  public void onRestoreInstanceState(Bundle savedInstanceState){  Log.v(TAG,String.format("onRestoreInstanceState(): savedInstanceState[%b]",savedInstanceState != null));  if (savedInstanceState == null) {    mInitializationParams.getScreenManager().onMainScreenRequested();  } else {    if (findCurrentFragment()) {      notifyNewFragment(mContentFragment);    }    mOnBackStackChangedListener.onBackStackChanged();  }}  }
class C{  void advanceFieldInfosGen(){  fieldInfosGen=nextWriteFieldInfosGen;  nextWriteFieldInfosGen=fieldInfosGen + 1;  sizeInBytes=-1;}  }
class C{  private void clearBit(int bitIndex){  int unitIndex=unitIndex(bitIndex);  long bit=bit(bitIndex);  this.units[unitIndex]&=~bit;}  }
class C{  public void drawArc(int x,int y,int width,int height,int startAngle,int arcAngle){  Arc2D arc=new Arc2D.Float(x,y,width,height,startAngle,arcAngle,Arc2D.OPEN);  draw(arc);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void selectAutoTickUnit(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){  if (RectangleEdge.isTopOrBottom(edge)) {    selectHorizontalAutoTickUnit(g2,dataArea,edge);  } else   if (RectangleEdge.isLeftOrRight(edge)) {    selectVerticalAutoTickUnit(g2,dataArea,edge);  }}  }
class C{  private void deployCargoPing(WebLogicLocalContainer container) throws IOException {  String deployDir=getFileHandler().createDirectory(getDomainHome(),container.getAutoDeployDirectory());  getResourceUtils().copyResource(RESOURCE_PATH + "cargocpc.war",getFileHandler().append(deployDir,"cargocpc.war"),getFileHandler());}  }
class C{  public static String replace(String source,String target,String replacement){  StringBuffer output=new StringBuffer();  int n=0;  while (true) {    int off=source.indexOf(target,n);    if (off == -1) {      output.append(source.substring(n));      break;    }    output.append(source.substring(n,off));    output.append(replacement);    n=off + target.length();  }  return output.toString();}  }
class C{  public void put(String key,File files[],String contentType,String customFileName) throws FileNotFoundException {  if (key != null) {    List<FileWrapper> fileWrappers=new ArrayList<FileWrapper>();    for (    File file : files) {      if (file == null || !file.exists()) {        throw new FileNotFoundException();      }      fileWrappers.add(new FileWrapper(file,contentType,customFileName));    }    fileArrayParams.put(key,fileWrappers);  }}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.ttl=entry.ttl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  void process_values(XmlFile xmlFile){  logger.info("Processing values from {}",xmlFile);  BaseElement baseElement=new BaseElement(xmlFile.getDocumentElement(),null);  List<Node> children=baseElement.gather_children();  for (int i=0; i < children.size(); ++i) {    Element element=(Element)children.get(i);    String tagName=element.getTagName();    if (tagName.equals("string")) {      Node firstChild=element.getFirstChild();      if (firstChild != null) {        logger.debug("firstChild {} ",firstChild);        String stringValue=firstChild.getNodeValue();        RString rString=null;        try {          rString=new RString(element,xmlFile,stringValue);        } catch (        InvalidPropertiesFormatException e) {          logger.error("String {} is not formatted correctly in {} : {}",element,xmlFile,e);          AnalysisReport.v().addEntry("String in resources not formatted correctly: " + element + " "+ xmlFile,AnalysisReport.Level.HIGH);          continue;        }        String stringName=rString.name.replace("@+","@");        stringName=stringName.replace("@android:string/","android.R.string.");        stringName=stringName.replace("@string/","string.");        if (!stringName.startsWith("string."))         stringName="string." + stringName;        logger.debug("Adding a string name to string value mapping: ({}:{})",stringName,stringValue);        Set<RString> valueSet=stringNameToRStringSet.get(stringName);        if (valueSet == null) {          valueSet=new HashSet<RString>();          stringNameToRStringSet.put(stringName,valueSet);        }        valueSet.add(rString);      }    }  }  for (int i=0; i < children.size(); ++i) {    Element element=(Element)children.get(i);    String tagName=element.getTagName();    if (tagName.equals("string-array")) {      NodeList stringArrayNodes=element.getChildNodes();      List<String> stringArrayValues=new ArrayList<String>();      for (int j=0; j < stringArrayNodes.getLength(); ++j) {        Node child=stringArrayNodes.item(j);        if (child instanceof Element) {          Element childElement=(Element)child;          Node firstChild=childElement.getFirstChild();          if (firstChild != null) {            String stringArrayValue=firstChild.getNodeValue();            int index=stringArrayValue.indexOf("@string");            String stringName=null;            if (index >= 0)             stringName=stringArrayValue.substring("@string".length() + 1,stringArrayValue.length());            if ((index >= 0) && stringNameToRStringSet.containsKey(stringName)) {              logger.debug("Expanding string {} to put in string array ",stringName);              for (              RString rString : stringNameToRStringSet.get(stringName)) {                stringArrayValues.add(rString.value);              }            } else {              stringArrayValues.add(stringArrayValue);            }          }        }      }      RStringArray rStringArray=null;      try {        rStringArray=new RStringArray(element,xmlFile,stringArrayValues);      } catch (      InvalidPropertiesFormatException e) {        logger.error("string-array {} is not formatted correctly in {} : {}",element,xmlFile,e);        AnalysisReport.v().addEntry("String array in resources file not formatted correctly: " + element + " "+ xmlFile,AnalysisReport.Level.HIGH);        continue;      }      String stringArrayName=rStringArray.name;      stringArrayNameToRStringArray.put(stringArrayName,rStringArray);      logger.info("\nAdding a string-array name to string-array value mapping: ({}:{})",stringArrayName,stringArrayValues);    }  }}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.182 -0400",hash_original_method="E7D0FDC2FC1050BE7968264CFF59C18B",hash_generated_method="088B7C4BF190AF1A36A018E1FD689589") public static void writeStringToFile(File file,String data,String encoding) throws IOException {  writeStringToFile(file,data,encoding,false);}  }
class C{  private static final void copy(Reader r,Writer w,long timeout) throws IOException {  copy(r,w,0xffff,timeout);}  }
class C{  @Override protected double computePrefHeight(double width,double topInset,double rightInset,double bottomInset,double leftInset){  tableRowPrefHeight=super.computePrefHeight(width,topInset,rightInset,bottomInset,leftInset);  return isExpanded() ? tableRowPrefHeight + getContent().prefHeight(width) : tableRowPrefHeight;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.NAMED_IMPORT_SPECIFIER__IMPORTED_ELEMENT:    return importedElement != null;case N4JSPackage.NAMED_IMPORT_SPECIFIER__IMPORTED_ELEMENT_AS_TEXT:  return IMPORTED_ELEMENT_AS_TEXT_EDEFAULT == null ? importedElementAsText != null : !IMPORTED_ELEMENT_AS_TEXT_EDEFAULT.equals(importedElementAsText);case N4JSPackage.NAMED_IMPORT_SPECIFIER__ALIAS:return ALIAS_EDEFAULT == null ? alias != null : !ALIAS_EDEFAULT.equals(alias);}return super.eIsSet(featureID);}  }
class C{  public void notice(String notice){  bot.sendIRC().notice(channel.getName(),notice);}  }
class C{  @Override public int hashCode(){  int hash=7;  hash=HashUtilities.hashCode(hash,this.lowerBound);  hash=HashUtilities.hashCode(hash,this.upperBound);  hash=43 * hash + this.alpha;  return hash;}  }
class C{  @Override public void fillHeader(Header hdr){  try {    Standard.context(AsciiTable.class);    hdr.setXtension("TABLE");    hdr.setBitpix(BasicHDU.BITPIX_BYTE);    hdr.setNaxes(2);    hdr.setNaxis(1,this.rowLen);    hdr.setNaxis(2,this.nRows);    Cursor<String,HeaderCard> iter=hdr.iterator();    iter.setKey(NAXIS2.key());    iter.next();    iter.add(new HeaderCard(PCOUNT.key(),0,PCOUNT.comment()));    iter.add(new HeaderCard(GCOUNT.key(),1,GCOUNT.comment()));    iter.add(new HeaderCard(TFIELDS.key(),this.nFields,TFIELDS.comment()));    for (int i=0; i < this.nFields; i+=1) {      addColInfo(i,iter);    }  } catch (  HeaderCardException e) {    LOG.log(Level.SEVERE,"ImpossibleException in fillHeader:" + e.getMessage(),e);  } finally {    Standard.context(null);  }}  }
class C{  public HadoopFileBlock(String[] hosts,URI file,long start,long len){  A.notNull(hosts,"hosts",file,"file");  this.hosts=hosts;  this.file=file;  this.start=start;  this.len=len;}  }
class C{  protected void addTypePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_FeatureConfiguration_type_feature"),getString("_UI_PropertyDescriptor_description","_UI_FeatureConfiguration_type_feature","_UI_FeatureConfiguration_type"),SGenPackage.Literals.FEATURE_CONFIGURATION__TYPE,true,false,true,null,null,null));}  }
class C{  public static double dot(double x0,double y0,double x1,double y1){  return x0 * x1 + y0 * y1;}  }
class C{  public static List<org.oscm.internal.vo.VOSteppedPrice> convertToUpVOSteppedPrice(List<org.oscm.vo.VOSteppedPrice> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.internal.vo.VOSteppedPrice> newVO=new ArrayList<org.oscm.internal.vo.VOSteppedPrice>();  for (  org.oscm.vo.VOSteppedPrice tmp : oldVO) {    newVO.add(convertToUp(tmp));  }  return newVO;}  }
class C{  private void inferParameterTypesIndirectly(Tree.PositionalArgumentList pal,Type pt){  if (unit.isCallableType(pt)) {    List<Type> paramTypes=unit.getCallableArgumentTypes(pt);    List<Tree.PositionalArgument> args=pal.getPositionalArguments();    int argCount=args.size();    int paramsSize=paramTypes.size();    for (int i=0; i < paramsSize && i < argCount; i++) {      Type paramType=paramTypes.get(i);      paramType=callableFromUnion(paramType);      Tree.PositionalArgument arg=args.get(i);      if (arg instanceof Tree.ListedArgument && unit.isCallableType(paramType)) {        Tree.ListedArgument la=(Tree.ListedArgument)arg;        Tree.Expression e=la.getExpression();        if (e != null) {          Tree.Term term=unwrapExpressionUntilTerm(e.getTerm());          if (term instanceof Tree.FunctionArgument) {            Tree.FunctionArgument fa=(Tree.FunctionArgument)term;            inferParameterTypesFromCallableType(paramType,null,fa);          } else           if (term instanceof Tree.StaticMemberOrTypeExpression) {            Tree.StaticMemberOrTypeExpression smte=(Tree.StaticMemberOrTypeExpression)term;            smte.setParameterType(paramType);          }        }      }    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void testSyncStashReset(){  mockLoggedInUser();  binding=mock(ProjectDebuggeeBinding.class);  when(binding.buildResult(any(Project.class))).thenReturn(new CloudDebugProcessState());  boolean needsStash=true;  boolean hasRemoteRepository=true;  ProjectRepositoryValidator repositoryValidator=mock(ProjectRepositoryValidator.class);  SyncResult syncResult=mockSyncResult(needsStash,hasRemoteRepository);  when(repositoryValidator.checkSyncStashState()).thenReturn(syncResult);  CloudAttachDialog dialog=initDialog();  dialog.setProjectRepositoryValidator(repositoryValidator);  selectProjectWithDebuggableModules();  assertTrue(syncStashCheckbox.isVisible());  needsStash=false;  hasRemoteRepository=false;  syncResult=mockSyncResult(needsStash,hasRemoteRepository);  when(repositoryValidator.checkSyncStashState()).thenReturn(syncResult);  selectEmptyProject();  assertFalse(syncStashCheckbox.isVisible());  dialog.close(0);}  }
class C{  public boolean inMinVertexCover(int v){  validate(v);  return inMinVertexCover[v];}  }
class C{  public boolean sameAs(LockSet other){  return this.identicalSubset(other) && other.identicalSubset(this);}  }
class C{  public String toString(){  return getName();}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new FileWriter(journalFileTmp),IO_BUFFER_SIZE);  writer.write(MAGIC);  writer.write("\n");  writer.write(VERSION_1);  writer.write("\n");  writer.write(Integer.toString(appVersion));  writer.write("\n");  writer.write(Integer.toString(valueCount));  writer.write("\n");  writer.write("\n");  for (  Entry entry : lruEntries.values()) {    if (entry.currentEditor != null) {      writer.write(DIRTY + ' ' + entry.key+ '\n');    } else {      writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');    }  }  writer.close();  journalFileTmp.renameTo(journalFile);  journalWriter=new BufferedWriter(new FileWriter(journalFile,true),IO_BUFFER_SIZE);}  }
class C{  public EllipticalOrbitAnimation3D(Vector3 focalPoint,Vector3 periapsis,double eccentricity,double angle,Axis axis,OrbitDirection direction){  this(focalPoint,periapsis,Vector3.getAxisVector(axis),eccentricity,angle,direction);}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  protected void writeImageDesc() throws IOException {  out.write(0x2c);  writeShort(0);  writeShort(0);  writeShort(width);  writeShort(height);  if (firstFrame) {    out.write(0);  } else {    out.write(0x80 | 0 | 0| 0| palSize);  }}  }
class C{  public GroupShardsIterator activePrimaryShardsGrouped(String[] indices,boolean includeEmpty){  ArrayList<ShardIterator> set=new ArrayList<>();  for (  String index : indices) {    IndexRoutingTable indexRoutingTable=index(index);    if (indexRoutingTable == null) {      throw new IndexNotFoundException(index);    }    for (    IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {      ShardRouting primary=indexShardRoutingTable.primaryShard();      if (primary.active()) {        set.add(primary.shardsIt());      } else       if (includeEmpty) {        set.add(new PlainShardIterator(primary.shardId(),Collections.<ShardRouting>emptyList()));      }    }  }  return new GroupShardsIterator(set);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  double z, val, val2;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  double flowLength=0;  double numUpslopeFlowpaths=0;  double flowpathLengthToAdd=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    double gridResX=pntr.getCellSizeX();    double gridResY=pntr.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,-999);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits(pntr.getXYUnits());    WhiteboxRaster numInflowingNeighbours=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    numInflowingNeighbours.isTemporaryFile=true;    WhiteboxRaster numUpslopeDivideCells=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    numUpslopeDivideCells.isTemporaryFile=true;    WhiteboxRaster totalFlowpathLength=new WhiteboxRaster(outputHeader.replace(".dep","_temp3.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    totalFlowpathLength.isTemporaryFile=true;    updateProgress("Loop 1 of 3:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (pntr.getValue(row,col) != noData) {          z=0;          for (i=0; i < 8; i++) {            if (pntr.getValue(row + dY[i],col + dX[i]) == inflowingVals[i]) {              z++;            }          }          if (z > 0) {            numInflowingNeighbours.setValue(row,col,z);          } else {            numInflowingNeighbours.setValue(row,col,-1);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 3:",progress);    }    updateProgress("Loop 2 of 3:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        val=numInflowingNeighbours.getValue(row,col);        if (val <= 0 && val != noData) {          flag=false;          x=col;          y=row;          do {            val=numInflowingNeighbours.getValue(y,x);            if (val <= 0 && val != noData) {              if (val == -1) {                numUpslopeDivideCells.setValue(y,x,0);                numUpslopeFlowpaths=1;              } else {                numUpslopeFlowpaths=numUpslopeDivideCells.getValue(y,x);              }              numInflowingNeighbours.setValue(y,x,noData);              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                flowLength=gridLengths[c];                val2=totalFlowpathLength.getValue(y,x);                flowpathLengthToAdd=val2 + numUpslopeFlowpaths * flowLength;                x+=dX[c];                y+=dY[c];                numUpslopeDivideCells.setValue(y,x,numUpslopeDivideCells.getValue(y,x) + numUpslopeFlowpaths);                totalFlowpathLength.setValue(y,x,totalFlowpathLength.getValue(y,x) + flowpathLengthToAdd);                numInflowingNeighbours.setValue(y,x,numInflowingNeighbours.getValue(y,x) - 1);              } else {                flag=true;              }            } else {              flag=true;            }          } while (!flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 2 of 3:",progress);    }    numUpslopeDivideCells.flush();    totalFlowpathLength.flush();    numInflowingNeighbours.close();    updateProgress("Loop 3 of 3:",0);    double[] data1=null;    double[] data2=null;    double[] data3=null;    for (row=0; row < rows; row++) {      data1=numUpslopeDivideCells.getRowValues(row);      data2=totalFlowpathLength.getRowValues(row);      data3=pntr.getRowValues(row);      for (col=0; col < cols; col++) {        if (data3[col] != noData) {          if (data1[col] > 0) {            val=data2[col] / data1[col];            output.setValue(row,col,val);          } else {            output.setValue(row,col,0);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 3 of 3:",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    numUpslopeDivideCells.close();    totalFlowpathLength.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @DSComment("not sensitive") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:40.407 -0500",hash_original_method="1FFBADE50F933DAEBE6B8AB97A0787F1",hash_generated_method="127F1A20360C713C7F1AB5B9AF7B63D3") @Override public void close() throws IOException {synchronized (lock) {    if (isClosed()) {      return;    }    Throwable thrown=null;    try {      flushInternal();    } catch (    Throwable e) {      thrown=e;    }    buf=null;    try {      out.close();    } catch (    Throwable e) {      if (thrown == null) {        thrown=e;      }    }    out=null;    if (thrown != null) {      SneakyThrow.sneakyThrow(thrown);    }  }}  }
class C{  public static MosaicDefinition createMosaicDefinition(final String namespaceId,final String name){  return createMosaicDefinition(generateRandomAccount(),Utils.createMosaicId(namespaceId,name),createMosaicProperties());}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public String encode(String value) throws EncoderException {  if (value == null) {    return null;  }  return encode(value,getDefaultCharset());}  }
class C{  public List<List<String>> toStringMatrix(){  for (  String row : allGoldLabels) {    if (!map.containsKey(row)) {      map.put(row,new TreeMap<String,Integer>());    }    for (    String col : allPredictedLabels) {      if (!map.get(row).containsKey(col)) {        map.get(row).put(col,0);      }    }  }  List<List<String>> result=new ArrayList<>();  List<String> allPredictedLabelsSorted=new ArrayList<>();  TreeSet<String> extraPredictedLabels=new TreeSet<>(allPredictedLabels);  extraPredictedLabels.removeAll(allGoldLabels);  allPredictedLabelsSorted.addAll(allGoldLabels);  allPredictedLabelsSorted.addAll(extraPredictedLabels);  List<String> header=new ArrayList<>();  header.add("");  header.addAll(allPredictedLabelsSorted);  result.add(header);  for (  String rowLabel : allGoldLabels) {    List<String> row=new ArrayList<>();    row.add(rowLabel);    for (    String predictedLabel : allPredictedLabelsSorted) {      int value=0;      if (this.map.containsKey(rowLabel) && this.map.get(rowLabel).containsKey(predictedLabel)) {        value=this.map.get(rowLabel).get(predictedLabel);      }      row.add(Integer.toString(value));    }    result.add(row);  }  return result;}  }
class C{  public String asString(){  return new String(bytes,offset,length,US_ASCII);}  }
class C{  public int write(Sequence sequence,int nFileType,File file) throws IOException {  OutputStream outputStream=new FileOutputStream(file);  int nBytes=write(sequence,nFileType,outputStream);  outputStream.close();  return nBytes;}  }
class C{  @Transactional public void unfollowArticle(final String followerId,final String followingArticleId) throws ServiceException {  try {    unfollow(followerId,followingArticleId,Follow.FOLLOWING_TYPE_C_ARTICLE);  } catch (  final RepositoryException e) {    final String msg="User[id=" + followerId + "] unfollows an article[id="+ followingArticleId+ "] failed";    LOGGER.log(Level.ERROR,msg,e);    throw new ServiceException(msg);  }}  }
class C{  public boolean previous() throws SQLException {  checkCursorMove();  boolean result=fbFetcher.previous();  if (result)   notifyRowUpdater();  return result;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void addCheckConstraint(Session session,Expression expr){  if (expr == null) {    return;  }  resolver=new SingleColumnResolver(this);synchronized (this) {    String oldName=name;    if (name == null) {      name="VALUE";    }    expr.mapColumns(resolver,0);    name=oldName;  }  expr=expr.optimize(session);  resolver.setValue(ValueNull.INSTANCE);synchronized (this) {    expr.getValue(session);  }  if (checkConstraint == null) {    checkConstraint=expr;  } else {    checkConstraint=new ConditionAndOr(ConditionAndOr.AND,checkConstraint,expr);  }  checkConstraintSQL=getCheckConstraintSQL(session,name);}  }
class C{  @Override public int quantityDropped(Random random){  return random.nextInt(50) == 0 ? 1 : 0;}  }
class C{  public static String toHexString(ByteBuffer buffer,int offset,int size){  return toHexString(buffer,offset,size,true);}  }
class C{  public boolean hasFormData(){  throw new MustOverrideException();}  }
class C{  public ClaimBuilder put(String key,Object value){  if (key == null) {    throw new NullPointerException("key must not be null");  }  data.put(key,value);  return this;}  }
class C{  public static Object[] normalizedWriteArgs(Map<String,Object> keyMap,Object[] objects){  int index=0;  Boolean using80Delimiters=(Boolean)keyMap.get(Constants.USING_SMIS80_DELIMITERS);  if (using80Delimiters != null && using80Delimiters) {    for (    Object object : objects) {      if (object instanceof CIMObjectPath) {        String string=object.toString();        if (string.contains(Constants.SMIS80_DELIMITER)) {          continue;        }        if (!string.contains("SE_ReplicationGroup") && string.contains(Constants.PLUS)) {          objects[index]=modifyForSMIS80(keyMap,(CIMObjectPath)object);        }      } else       if (object instanceof CIMArgument) {        Object modifiedArgument=modifyAnyCIMObjectPaths(keyMap,object);        if (modifiedArgument != null) {          objects[index]=modifiedArgument;        }      } else       if (object instanceof CIMArgument[]) {        boolean updated=false;        CIMArgument[] arguments=(CIMArgument[])object;        for (int argumentIndex=0; argumentIndex < arguments.length; argumentIndex++) {          CIMArgument currentArgument=arguments[argumentIndex];          CIMArgument modifiedArgument=modifyAnyCIMObjectPaths(keyMap,currentArgument);          if (modifiedArgument != null) {            arguments[argumentIndex]=modifiedArgument;            updated=true;          }        }        if (updated) {          objects[index]=arguments;        }      }      index++;    }  }  return objects;}  }
class C{  protected static RGB blend(RGB bg,RGB fg,float factor){  Assert.isLegal(bg != null);  Assert.isLegal(fg != null);  Assert.isLegal(factor >= 0f && factor <= 1f);  float complement=1f - factor;  return new RGB((int)(complement * bg.red + factor * fg.red),(int)(complement * bg.green + factor * fg.green),(int)(complement * bg.blue + factor * fg.blue));}  }
class C{  public void uninstallDefaults(){  SeaGlassContext context=getContext(this,ENABLED);  style.uninstallDefaults(context);  context.dispose();  style=null;}  }
class C{  public final void testGetCrtCoefficient(){  RSAOtherPrimeInfo ropi=new RSAOtherPrimeInfo(BigInteger.valueOf(1L),BigInteger.valueOf(2L),BigInteger.valueOf(3L));  assertEquals(3L,ropi.getCrtCoefficient().longValue());}  }
class C{  private static boolean userCancelsMakingVisible(final Window parent,final ZyGraph graph,final int invisibleNodes){  return (invisibleNodes >= graph.getSettings().getLayoutSettings().getVisibilityWarningTreshold()) && (JOptionPane.YES_OPTION != CMessageBox.showYesNoCancelQuestion(parent,String.format("The selected operation makes %d more nodes visible. Do you want to continue?",invisibleNodes)));}  }
class C{  public boolean hasOwnerUpdate(){  return hasExtension(OwnerUpdate.class);}  }
class C{  public HttpRequestEvent fireHttpRequestEvent(String request,OutputStream output) throws IOException {  HttpRequestEvent event=new HttpRequestEvent(this,request,output);  HttpRequestListener listener;  Vector list=(Vector)listeners.clone();  Enumeration e=list.elements();  while (e.hasMoreElements()) {    listener=(HttpRequestListener)e.nextElement();    listener.httpRequest(event);  }  return event;}  }
class C{  public <K,V>void removeMap(TransactionMap<K,V> map){  store.removeMap(map);}  }
class C{  public void removeAuxClasspathEntry(int n){  auxClasspathEntryList.remove(n);  isModified=true;}  }
class C{  static void record(ContextMenuParams params,int action){  assert action >= 0;  assert action < NUM_ACTIONS;  String histogramName;  if (params.isVideo()) {    histogramName="ContextMenu.SelectedOption.Video";  } else   if (params.isImage()) {    histogramName=params.isAnchor() ? "ContextMenu.SelectedOption.ImageLink" : "ContextMenu.SelectedOption.Image";  } else {    assert params.isAnchor();    histogramName="ContextMenu.SelectedOption.Link";  }  RecordHistogram.recordEnumeratedHistogram(histogramName,action,NUM_ACTIONS);}  }
class C{  public static void bindBlockedMenuItem(final Context context,final SharedPreferences prefs,final MenuItem item,boolean showBlocked){  if (item == null) {    return;  }  new BindMenuItemTask(context,prefs,item,showBlocked).execute((Void[])null);}  }
class C{  public Vertex createWord(String text,Vertex meaning,boolean prime,Network network,Primitive classification,Primitive tense,Primitive type,Primitive type2,String[] conjugations){  Vertex word=network.createWord(text);  word.setPinned(true);  meaning.setPinned(true);  word.addRelationship(Primitive.MEANING,meaning);  if (classification != Primitive.TYPO) {    Relationship relationship=meaning.addRelationship(Primitive.WORD,word);    if (prime) {      relationship.setCorrectness(2.0f);    }  }  if (classification != null) {    word.addRelationship(Primitive.INSTANTIATION,classification);  }  if (tense != null) {    word.addRelationship(Primitive.TENSE,tense);  }  if (type != null) {    word.addRelationship(Primitive.TYPE,type).setCorrectness(2.0f);  }  if (type2 != null) {    word.addRelationship(Primitive.TYPE,type2).setCorrectness(0.5f);  }  if (conjugations != null) {    for (    String conjugation : conjugations) {      word.addRelationship(Primitive.CONJUGATION,network.createWord(conjugation));    }  }  network.associateCaseInsensitivity(word);  return word;}  }
class C{  @DSComment("Scroller") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:11.186 -0500",hash_original_method="9117CBBBDEAEC710E4E0E8355A758A12",hash_generated_method="ED21D2C461F3D1D44AE129ABEA513092") public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY){  if (mFlywheel && !mFinished) {    float oldVel=getCurrVelocity();    float dx=(float)(mFinalX - mStartX);    float dy=(float)(mFinalY - mStartY);    float hyp=FloatMath.sqrt(dx * dx + dy * dy);    float ndx=dx / hyp;    float ndy=dy / hyp;    float oldVelocityX=ndx * oldVel;    float oldVelocityY=ndy * oldVel;    if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {      velocityX+=oldVelocityX;      velocityY+=oldVelocityY;    }  }  mMode=FLING_MODE;  mFinished=false;  float velocity=FloatMath.sqrt(velocityX * velocityX + velocityY * velocityY);  mVelocity=velocity;  final double l=Math.log(START_TENSION * velocity / ALPHA);  mDuration=(int)(1000.0 * Math.exp(l / (DECELERATION_RATE - 1.0)));  mStartTime=AnimationUtils.currentAnimationTimeMillis();  mStartX=startX;  mStartY=startY;  float coeffX=velocity == 0 ? 1.0f : velocityX / velocity;  float coeffY=velocity == 0 ? 1.0f : velocityY / velocity;  int totalDistance=(int)(ALPHA * Math.exp(DECELERATION_RATE / (DECELERATION_RATE - 1.0) * l));  mMinX=minX;  mMaxX=maxX;  mMinY=minY;  mMaxY=maxY;  mFinalX=startX + Math.round(totalDistance * coeffX);  mFinalX=Math.min(mFinalX,mMaxX);  mFinalX=Math.max(mFinalX,mMinX);  mFinalY=startY + Math.round(totalDistance * coeffY);  mFinalY=Math.min(mFinalY,mMaxY);  mFinalY=Math.max(mFinalY,mMinY);}  }
class C{  private void handleJsonShowEntry(RequestAndResponse requestAndResponse) throws IOException, ServletException {  requestAndResponse.setResponseContentTypeJson();  final String id=requestAndResponse.request.getParameter(DbLogic.Constants.id);  if (!dbLogic.getIdGenerator().isIdWellFormed(id)) {    returnJson400(requestAndResponse,servletText.errorIdIsInvalidFormat());    return;  }  try {    final User user=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));    final Entry entry=dbLogic.getEntryById(id);    if (entry == null) {      returnJson400(requestAndResponse,servletText.errorEntryCouldNotBeFound());      return;    }    final StringBuilder result=new StringBuilder();    if (!dbLogic.canUserSeeEntry(user,entry,isUserAnAdmin(requestAndResponse))) {      if (user == null) {        returnJson400(requestAndResponse,servletText.errorRequiresSignIn(false));      } else {        returnJson400(requestAndResponse,servletText.errorMayNotSeeEntry());      }    } else {      final String parentId=entry.getParentId();      if (parentId == null) {        returnJson400(requestAndResponse,servletText.errorHasNoParent());      } else {        final Entry parentEntry=dbLogic.getEntryById(parentId);        if (parentEntry == null) {          returnJson400(requestAndResponse,servletText.errorParentCouldNotBeFound());        } else         if (!dbLogic.canUserSeeEntry(user,parentEntry,isUserAnAdmin(requestAndResponse))) {          returnJson400(requestAndResponse,servletText.errorMayNotSeeEntry());        } else {          final ArrayList<EntryInfo> entryInfoList=new ArrayList<EntryInfo>();          final StringBuilder innerResult=new StringBuilder();          addEntryHtmlToTreeSimple(entry,innerResult,entryInfoList,defaultNoteDisplayDepth,!entry.isNotebook());          result.append("{ \"subtreeHtml\": " + JsonBuilder.quote(innerResult.toString()) + "\n");          result.append(", \"id\": " + JsonBuilder.quote(entry.getId()) + "\n");          result.append(", \"entryInfoDict\": ");          addJsonForEntryInfos(result,entryInfoList,null);          result.append(" }");        }      }    }    dbLogic.commit();    requestAndResponse.print(result.toString());  } catch (  final PersistenceException e) {    returnJson500(requestAndResponse,servletText.errorInternalDatabase());  }}  }
class C{  public IgniteInterruptedCheckedException(InterruptedException cause){  this(cause.getMessage(),cause);}  }
class C{  protected String processPostRequest(HttpServletRequest request){  com.pearson.statsagg.webui.CreateAlert createAlert=new com.pearson.statsagg.webui.CreateAlert();  JsonObject alertJsonObject=Helper.getJsonObjectFromRequestBody(request);  String result=createAlert.parseAndAlterAlert(alertJsonObject);  return Helper.createSimpleJsonResponse(result);}  }
class C{  @DSComment("ListView") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.206 -0500",hash_original_method="06A7CBCF71002E57CE516EE24D5E8CDC",hash_generated_method="670DAD95C314A4774458F5AE45462EEF") public void addFooterView(View v){  addFooterView(v,null,true);}  }
class C{  @Deprecated public static Source fromReader(Reader reader,String description) throws IOException {  CompilerAsserts.neverPartOfCompilation("do not call Source.fromReader from compiled code");  Content content=new LiteralSourceImpl(description,read(reader));  return new SourceImpl(content);}  }
class C{  public static float[] detectPlane(float[][] points,float distanceThresh,int numIterations,int sufficientSupport){  int numPoints=points.length;  boolean[] picked=new boolean[numPoints];  LinkedList<float[]> supportPointsMax=null;  int supportMax=0;  while (numIterations > 0) {    numIterations--;    int[] p=new int[3];    for (int i=0; i < 3; i++) {      do {        p[i]=(int)(Math.random() * numPoints);      } while (picked[p[i]]);      picked[p[i]]=true;    }    picked[p[0]]=false;    picked[p[1]]=false;    picked[p[2]]=false;    float[] p0=points[p[0]];    float[] p1=points[p[1]];    float[] p2=points[p[2]];    float[] plane=createPlane(p0,p1,p2);    computeSupport(plane,points,distanceThresh);    int support=supportingPoints.size();    if (support > supportMax) {      supportMax=support;      supportPointsMax=supportingPoints;    }    if (supportMax >= sufficientSupport) {      break;    }  }  float[] plane=planeRegression(supportPointsMax);  computeSupport(plane,points,distanceThresh);  return (plane);}  }
class C{  private Object deserialize(byte[] serializedBytes){  Object deserializedObject=serializedBytes;  try {    DataInputStream dis=new DataInputStream(new ByteArrayInputStream(serializedBytes));    deserializedObject=DataSerializer.readObject(dis);  } catch (  Exception e) {  }  return deserializedObject;}  }
class C{  public static int pickFromDistribution(final Object[] objs,final RandomChoiceChooserD chooser,final double prob){  return pickFromDistribution(objs,chooser,prob,CHECKBOUNDARY);}  }
class C{  public void socksAccept() throws IOException {  Socks4Message reply=socksReadReply();  if (reply.getCommandOrResult() != Socks4Message.RETURN_SUCCESS) {    throw new IOException(reply.getErrorString(reply.getCommandOrResult()));  }}  }
class C{  public static boolean mkdir(Context context,@NonNull final File dir){  boolean success=dir.exists();  if (!success)   success=dir.mkdir();  if (!success && Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    DocumentFile document=getDocumentFile(context,dir,true,true);    success=document != null && document.exists();  }  if (success)   scanFile(context,new String[]{dir.getPath()});  return success;}  }
class C{  public void removeMovies(List<Movie> movies){  if (movies == null || movies.size() == 0) {    return;  }  Set<MovieSet> modifiedMovieSets=new HashSet<>();  int oldValue=movieList.size();  for (int i=movies.size() - 1; i >= 0; i--) {    Movie movie=movies.get(i);    movieList.remove(movie);    if (movie.getMovieSet() != null) {      MovieSet movieSet=movie.getMovieSet();      movieSet.removeMovie(movie);      modifiedMovieSets.add(movieSet);      movie.setMovieSet(null);    }    try {      MovieModuleManager.getInstance().removeMovieFromDb(movie);    } catch (    Exception e) {      LOGGER.error("Error removing movie from DB: " + e.getMessage());    }  }  for (  MovieSet movieSet : modifiedMovieSets) {    if (movieSet.getMovies().isEmpty()) {      removeMovieSet(movieSet);    }  }  firePropertyChange("movies",null,movieList);  firePropertyChange("movieCount",oldValue,movieList.size());}  }
class C{  public Location_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_geoJson=jcas.getRequiredFeatureDE(casType,"geoJson","uima.cas.String",featOkTst);  casFeatCode_geoJson=(null == casFeat_geoJson) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_geoJson).getCode();}  }
class C{  public void updateLiveNodes() throws KeeperException, InterruptedException {  refreshLiveNodes(null);}  }
class C{  @SuppressWarnings("unchecked") public static Map<String,Object> loadFile(String fileName){  Map<String,Object> props=new HashMap<>();  if (fileName == null) {    LOG.warning("Config file name cannot be null");    return props;  } else   if (fileName.isEmpty()) {    LOG.warning("Config file name is empty");    return props;  } else {    Path path=Paths.get(fileName);    if (!Files.exists(path)) {      LOG.fine("Config file " + fileName + " does not exist");      return props;    }    if (!Files.isRegularFile(path)) {      LOG.warning("Config file " + fileName + " might be a directory.");      return props;    }    LOG.log(Level.FINE,"Reading config file {0}",fileName);    Map<String,Object> propsYaml=null;    try {      FileInputStream fin=new FileInputStream(new File(fileName));      try {        Yaml yaml=new Yaml();        propsYaml=(Map<String,Object>)yaml.load(fin);        LOG.log(Level.FINE,"Successfully read config file {0}",fileName);      }  finally {        fin.close();      }    } catch (    IOException e) {      LOG.log(Level.SEVERE,"Failed to load config file: " + fileName,e);    }    return propsYaml != null ? propsYaml : props;  }}  }
class C{  protected boolean wasIcon(JInternalFrame f){  return (f.getClientProperty(HAS_BEEN_ICONIFIED_PROPERTY) == Boolean.TRUE);}  }
class C{  public JSONBuffer appendNewline(){  buffer.append("\n");  return this;}  }
class C{  @MainThread @ObjectiveCName("unsubscribeWithListener:") public synchronized void unsubscribe(@NotNull ModelChangedListener<GroupVM> listener){  listeners.remove(listener);}  }
class C{  private synchronized void adb(final String... args){  String[] commands=new String[args.length + 1];  commands[0]=adbPath;  System.arraycopy(args,0,commands,1,args.length);  try {    Runtime.getRuntime().exec(commands).waitFor();  } catch (  IOException ex) {    JOptionPane.showMessageDialog(null,ex.getLocalizedMessage(),"Android DB Viewer",JOptionPane.ERROR_MESSAGE);  }catch (  InterruptedException ex) {    JOptionPane.showMessageDialog(null,ex.getLocalizedMessage(),"Android DB Viewer",JOptionPane.ERROR_MESSAGE);  }}  }
class C{  protected static void printExceptionStack(Throwable th,PrintWriter out,int depth){  boolean printStackDepth=depth > 0;  Throwable wrappedException=ExceptionUtil.wrappedException(th);  if (wrappedException != null) {    printStackDepth=true;    printExceptionStack(wrappedException,out,depth + 1);  }  if (printStackDepth) {    out.write("[" + depth + "]");  }  th.printStackTrace(out);}  }
class C{  public TFloatIterator(TFloatHash hash){  super(hash);  _hash=hash;}  }
class C{  LambdaFormBuffer renameParameter(int pos,Name newParam){  assert (newParam.isParam());  replaceName(pos,newParam);  return this;}  }
class C{  public MultipleCategorySeries(String title){  mTitle=title;}  }
class C{  public void close() throws IOException {  flush();  pw.close();  rawWriter.close();}  }
class C{  public static int positionFor(final Symbol sym,final JCTree tree){  JCTree decl=declarationFor(sym,tree);  return ((decl != null) ? decl : tree).pos;}  }
class C{  public String cause(){  return cause;}  }
class C{  public void shutdown(){  executor.shutdownNow();}  }
class C{  public boolean isPrimitive(){  return false;}  }
class C{  public static String fromIPv4Address(int ipAddress){  StringBuffer sb=new StringBuffer();  int result=0;  for (int i=0; i < 4; ++i) {    result=(ipAddress >> ((3 - i) * 8)) & 0xff;    sb.append(Integer.valueOf(result).toString());    if (i != 3)     sb.append(".");  }  return sb.toString();}  }
class C{  @Timed @ExceptionMetered @GET @Path("backfillhmac") public Response backfillHmac(@QueryParam("id") long id){  boolean success=_backfillHmac(id);  return Response.ok().entity(success).build();}  }
class C{  public T caseImplementedProjects(ImplementedProjects object){  return null;}  }
class C{  public void addAll(double... values){  for (  double value : values) {    add(value);  }}  }
class C{  public static String mangleNativeMethod(String owner,String name,String desc){  StringBuilder sb=new StringBuilder();  sb.append("Java_");  sb.append(mangleNativeString(owner));  sb.append("_");  sb.append(mangleNativeString(name));  if (desc != null) {    sb.append("__");    sb.append(mangleNativeString(desc.substring(1,desc.lastIndexOf(')'))));  }  return sb.toString();}  }
class C{  protected void initializeWorld(){  SimulationBody floor=new SimulationBody();  floor.addFixture(Geometry.createRectangle(15,1));  floor.setMass(MassType.INFINITE);  floor.translate(0.0,-4.0);  this.world.addBody(floor);  ImageBody circle=new ImageBody();  circle.image=BASKETBALL;  circle.addFixture(Geometry.createCircle(0.5),1,0.2,0.5);  circle.setMass(MassType.NORMAL);  circle.translate(2.0,2.0);  circle.applyForce(new Vector2(-100.0,0.0));  circle.setLinearDamping(0.05);  this.world.addBody(circle);  ImageBody rectangle=new ImageBody();  rectangle.image=CRATE;  rectangle.addFixture(Geometry.createRectangle(1,1));  rectangle.setMass(MassType.NORMAL);  rectangle.translate(0.0,1.0);  rectangle.getLinearVelocity().set(-2,0);  this.world.addBody(rectangle);}  }
class C{  public void abortSharing() throws RcsGenericException {  try {    mSharingInf.abortSharing();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  public static byte[] decode(String s){  ByteArrayOutputStream bos=new ByteArrayOutputStream();  try {    decode(s,bos);  } catch (  IOException e) {    throw new RuntimeException();  }  byte[] decodedBytes=bos.toByteArray();  try {    bos.close();    bos=null;  } catch (  IOException ex) {    System.err.println("Error while decoding BASE64: " + ex.toString());  }  return decodedBytes;}  }
class C{  @NonNull public static Animator scaleBy(float scaleX,float scaleY){  return scaleBy(scaleX,scaleY,0);}  }
class C{  public void writeAll(List<Category> categoryList,List<Challenge> challengeList,List<Answer> answerList){  for (  Category category : categoryList) {    writeCategory(category,challengeList,answerList);  }}  }
class C{  public void testReordering() throws Exception {  AtomicIntervalGuard<String> ati=new AtomicIntervalGuard<String>(4);  Integer[] t={new Integer(0),new Integer(1),new Integer(2)};  ati.report(t[0],1,10);  ati.report(t[1],2,20);  ati.report(t[2],3,30);  ati.validate();  ati.report(t[0],8,80);  assertEquals("Head #1",2,ati.getLowSeqno());  assertEquals("Head #1 -time",20,ati.getLowTime());  assertEquals("Tail #1",8,ati.getHiSeqno());  assertEquals("Tail #1 -time",80,ati.getHiTime());  assertEquals("Interval #1",60,ati.getInterval());  ati.validate();  ati.report(t[2],7,70);  assertEquals("Head #2",2,ati.getLowSeqno());  assertEquals("Head #2 -time",20,ati.getLowTime());  assertEquals("Tail #2",8,ati.getHiSeqno());  assertEquals("Tail #2 -time",80,ati.getHiTime());  assertEquals("Interval #2",60,ati.getInterval());  ati.validate();  ati.report(t[1],6,60);  assertEquals("Head #3",6,ati.getLowSeqno());  assertEquals("Head #3 -time",60,ati.getLowTime());  assertEquals("Tail #3",8,ati.getHiSeqno());  assertEquals("Tail #3 -time",80,ati.getHiTime());  assertEquals("Interval #3",20,ati.getInterval());  ati.report(t[0],9,90);  assertEquals("Head #4",6,ati.getLowSeqno());  assertEquals("Head #4 -time",60,ati.getLowTime());  assertEquals("Tail #4",9,ati.getHiSeqno());  assertEquals("Tail #4 -time",90,ati.getHiTime());  assertEquals("Interval #4",30,ati.getInterval());  ati.validate();  ati.report(t[2],10,100);  assertEquals("Head #5",6,ati.getLowSeqno());  assertEquals("Head #5 -time",60,ati.getLowTime());  assertEquals("Tail #5",10,ati.getHiSeqno());  assertEquals("Tail #5 -time",100,ati.getHiTime());  assertEquals("Interval #4",40,ati.getInterval());  ati.validate();}  }
class C{  public CGraphOverview(final ZyGraph zygraph){  super(new BorderLayout());  Graph2DView view=zygraph.getView();  Preconditions.checkNotNull(view,"IE01616: View argument can not be null");  setBorder(new TitledBorder(new LineBorder(Color.LIGHT_GRAY,1,true),"Overview"));  final ZyOverview overview=new ZyOverview(view);  overview.setGraph2DRenderer(new ZyGraphLayeredRenderer<ZyOverview>(overview));  overview.putClientProperty("Overview.AnimateScrollTo",Boolean.TRUE);  overview.putClientProperty("Overview.PaintStyle","Funky");  overview.putClientProperty("Overview.AllowZooming",Boolean.TRUE);  overview.putClientProperty("Overview.AllowKeyboardNavigation",Boolean.TRUE);  overview.putClientProperty("Overview.Inverse",Boolean.TRUE);  overview.putClientProperty("Overview.BorderColor",Color.lightGray);  overview.putClientProperty("Overview.funkyTheta",new Double(0.9));  overview.putClientProperty("Overview.FogColor",new Color(DEFAULT_FOG_COLOR,DEFAULT_FOG_COLOR,DEFAULT_FOG_COLOR,0.5f));  overview.setAntialiasedPainting(true);  overview.setDoubleBuffered(true);  overview.setPreferredSize(new Dimension(DEFAULT_SIZE,DEFAULT_SIZE));  overview.setMinimumSize(new Dimension(0,0));  add(overview,BorderLayout.CENTER);}  }
class C{  public void removeListener(FSMouseListener l){  if (l == null) {    return;  }  if (_handlers.containsKey(l)) {    _handlers.remove(l);  }  if (_enabled && _handlers.size() == 0) {    _panel.removeMouseListener(this);    _panel.removeMouseMotionListener(this);    _enabled=false;  }}  }
class C{  public static Flag registerKeepDuplicatesFlag(final CFlags flags){  return flags.registerOptional(KEEP_DUPLICATES_FLAG,KEEP_DUPLICATES_DESC).setCategory(SENSITIVITY_TUNING);}  }
class C{  public CopyOnWriteArrayList(){  elements=EmptyArray.OBJECT;}  }
class C{  public void addContextToItemsAndTransform(Example examples){  addContextToItems(examples);  transformCombined(examples.example);}  }
class C{  public final void mul(Matrix3d m1){  double m00, m01, m02, m10, m11, m12, m20, m21, m22;  m00=this.m00 * m1.m00 + this.m01 * m1.m10 + this.m02 * m1.m20;  m01=this.m00 * m1.m01 + this.m01 * m1.m11 + this.m02 * m1.m21;  m02=this.m00 * m1.m02 + this.m01 * m1.m12 + this.m02 * m1.m22;  m10=this.m10 * m1.m00 + this.m11 * m1.m10 + this.m12 * m1.m20;  m11=this.m10 * m1.m01 + this.m11 * m1.m11 + this.m12 * m1.m21;  m12=this.m10 * m1.m02 + this.m11 * m1.m12 + this.m12 * m1.m22;  m20=this.m20 * m1.m00 + this.m21 * m1.m10 + this.m22 * m1.m20;  m21=this.m20 * m1.m01 + this.m21 * m1.m11 + this.m22 * m1.m21;  m22=this.m20 * m1.m02 + this.m21 * m1.m12 + this.m22 * m1.m22;  this.m00=m00;  this.m01=m01;  this.m02=m02;  this.m10=m10;  this.m11=m11;  this.m12=m12;  this.m20=m20;  this.m21=m21;  this.m22=m22;}  }
class C{  protected Generate_Impl(){  super();}  }
class C{  public static Float toFloat(Object o) throws PageException {  if (o instanceof Float)   return (Float)o;  return new Float(toFloatValue(o));}  }
class C{  public static String nextString(String s){  if (isAllzs(s)) {    return allAs(s.length() + 1);  }  char[] charVersion=s.toCharArray();  incrementCharArray(charVersion,charVersion.length - 1);  return new String(charVersion);}  }
class C{  public final void mulTransposeLeft(GMatrix m1,GMatrix m2){  int i, j, k;  if (m1.nRow != m2.nRow || nCol != m2.nCol || nRow != m1.nCol) {    throw new MatrixSizeException();  }  if (m1 == this || m2 == this) {    double[][] tmp=new double[nRow][nCol];    for (i=0; i < nRow; i++) {      for (j=0; j < nCol; j++) {        tmp[i][j]=0.0;        for (k=0; k < m1.nRow; k++) {          tmp[i][j]+=m1.values[k][i] * m2.values[k][j];        }      }    }    values=tmp;  } else {    for (i=0; i < nRow; i++) {      for (j=0; j < nCol; j++) {        values[i][j]=0.0;        for (k=0; k < m1.nRow; k++) {          values[i][j]+=m1.values[k][i] * m2.values[k][j];        }      }    }  }}  }
class C{  public FieldContext(String field,IndexFieldData<?> indexFieldData,MappedFieldType fieldType){  this.field=field;  this.indexFieldData=indexFieldData;  this.fieldType=fieldType;}  }
class C{  protected Gfsh(String[] args) throws ClassNotFoundException, IOException {  this(true,args,new GfshConfig());}  }
class C{  public void toEPL(StringWriter writer){  writer.write(" match_recognize (");  if (partitionExpressions.size() > 0) {    String delimiter="";    writer.write(" partition by ");    for (    Expression part : partitionExpressions) {      writer.write(delimiter);      part.toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);      delimiter=", ";    }  }  String delimiter="";  writer.write(" measures ");  for (  SelectClauseExpression part : measures) {    writer.write(delimiter);    part.toEPLElement(writer);    delimiter=", ";  }  if (all) {    writer.write(" all matches");  }  if (skipClause != MatchRecognizeSkipClause.PAST_LAST_ROW) {    writer.write(" after match skip " + skipClause.getText());  }  writer.write(" pattern (");  pattern.writeEPL(writer);  writer.write(")");  if ((intervalClause != null) && (intervalClause.getExpression() != null)) {    writer.write(" interval ");    intervalClause.getExpression().toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);    if (intervalClause.isOrTerminated()) {      writer.write(" or terminated");    }  }  delimiter="";  if (!defines.isEmpty()) {    writer.write(" define ");    for (    MatchRecognizeDefine def : defines) {      writer.write(delimiter);      writer.write(def.getName());      writer.write(" as ");      def.getExpression().toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);      delimiter=", ";    }  }  writer.write(")");}  }
class C{  private int decrement(int index){  index--;  if (index < 0) {    index=maxElements - 1;  }  return index;}  }
class C{  private Object readResolve(){  return ToStringStyle.NO_FIELD_NAMES_STYLE;}  }
class C{  @Override public String toString(){  return String.format("View2D '%s'",m_view.getName());}  }
class C{  public double positivePredictedValue(){  double ppv=0;  for (int i=0; i < confusion.length; i++) {    ppv+=positivePredictedValue(i) * colSum(i);  }  return ppv / totalInstances();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean shouldAutoCreate(String index,ClusterState state){  if (!needToCheck) {    return false;  }  boolean exists=resolver.hasIndexOrAlias(index,state);  if (exists) {    return false;  }  if (globallyDisabled) {    return false;  }  if (matches == null) {    return true;  }  for (int i=0; i < matches.length; i++) {    char c=matches[i].charAt(0);    if (c == '-') {      if (Regex.simpleMatch(matches2[i],index)) {        return false;      }    } else     if (c == '+') {      if (Regex.simpleMatch(matches2[i],index)) {        return true;      }    } else {      if (Regex.simpleMatch(matches[i],index)) {        return true;      }    }  }  return false;}  }
class C{  void loadTypeIds() throws IOException {  int count=mHeaderItem.typeIdsSize;  mTypeIds=new TypeIdItem[count];  seek(mHeaderItem.typeIdsOff);  for (int i=0; i < count; i++) {    mTypeIds[i]=new TypeIdItem();    mTypeIds[i].descriptorIdx=readInt();  }}  }
class C{  private static String countryCodeForPhoneNumber(String normalizedPhoneNumber){  final String phoneWithoutPlusPrefix=normalizedPhoneNumber.replaceFirst("^\\+","");  final int numberLength=phoneWithoutPlusPrefix.length();  for (int i=1; i <= MAX_LENGTH_COUNTRY_CODE && i <= numberLength; i++) {    final String potentialCountryCode=phoneWithoutPlusPrefix.substring(0,i);    final Integer countryCodeKey=Integer.valueOf(potentialCountryCode);    if (CountryCodeToRegionCodeMap.containsKey(countryCodeKey)) {      return potentialCountryCode;    }  }  return DEFAULT_COUNTRY_CODE;}  }
class C{  public void addBranch(IStorageTreeComponent<E> branch){  branches.add(branch);}  }
class C{  public static String join(String separator,List<?> elements){  if (elements == null || elements.size() == 0) {    return "";  }  StringBuffer sb=new StringBuffer(elements.size() * 3);  int i=0;  for (  Object elem : elements) {    if (i++ > 0) {      sb.append(separator);    }    sb.append(format(elem));  }  return sb.toString();}  }
class C{  public void testNullRuntime() throws Exception {  TungstenProperties conf=new TungstenProperties();  conf.setString(ReplicatorConf.SERVICE_NAME,"test");  conf.setString(ReplicatorConf.ROLE,ReplicatorConf.ROLE_MASTER);  conf.setString(ReplicatorConf.PIPELINES,"master");  conf.setString(ReplicatorConf.PIPELINE_ROOT + ".master","extract");  conf.setString(ReplicatorConf.STAGE_ROOT + ".extract",SingleThreadStageTask.class.toString());  conf.setString(ReplicatorConf.STAGE_ROOT + ".extract.extractor","dummy");  conf.setString(ReplicatorConf.STAGE_ROOT + ".extract.applier","dummy");  conf.setString(ReplicatorConf.APPLIER_ROOT + ".dummy",DummyApplier.class.getName());  conf.setString(ReplicatorConf.EXTRACTOR_ROOT + ".dummy",DummyExtractor.class.getName());  ReplicatorRuntime runtime=new ReplicatorRuntime(conf,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  runtime.configure();  runtime.release();}  }
class C{  public void uncollapse(GraphNode master,Object author){  CollapseData removedGroup=collapser.getCollapseData(master);  if (null == removedGroup) {    return;  }  collapser.uncollapse(master);  fireCollapseChanged(CollapseData.EMPTY_LIST,Collections.singleton(removedGroup),author);}  }
class C{  private static void processSymbols(Stack<Character> stack,Character ch){  if ((stack.peek() == '(' && ch == ')') || (stack.peek() == '[' && ch == ']') || (stack.peek() == '{' && ch == '}')) {    stack.pop();  } else   if ((stack.peek() != '(' && ch == ')') || (stack.peek() != '[' && ch == ']') || (stack.peek() != '{' && ch == '}')) {    System.out.println("The Java source-code does not have" + " correct pairs.");    System.exit(1);  }}  }
class C{  @Override public void show(){  renderer=new ShapeRenderer();  renderer.setAutoShapeType(true);  viewport=new ExtendViewport(WORLD_SIZE,WORLD_SIZE);  ball=new BouncingBall(viewport);  Gdx.input.setInputProcessor(ball);}  }
class C{  public void insertInventoryFromPlayer(EntityPlayer player,INetworkCache cache,int slotID){}  }
class C{  protected String convertToString(Object value) throws Throwable {  int size=0;  Iterator iterator=null;  Class type=value.getClass();  if (type.isArray()) {    size=Array.getLength(value);  } else {    Collection collection=convertToCollection(type,value);    size=collection.size();    iterator=collection.iterator();  }  if (size == 0) {    return (String)getDefault(String.class);  }  if (onlyFirstToString) {    size=1;  }  StringBuffer buffer=new StringBuffer();  for (int i=0; i < size; i++) {    if (i > 0) {      buffer.append(delimiter);    }    Object element=iterator == null ? Array.get(value,i) : iterator.next();    element=elementConverter.convert(String.class,element);    if (element != null) {      buffer.append(element);    }  }  return buffer.toString();}  }
class C{  public boolean endOfMessage(AbstractMRReply msg){  if (expectLength) {    expectLength=false;    countingBytes=true;    remainingBytes=msg.getElement(1) & 0xF;    if (logDebug) {      log.debug("Receive count set to " + remainingBytes);    }    return false;  }  if (remainingBytes > 0) {    if (remainingBytes > 8) {      log.error("Invalid remainingBytes: " + remainingBytes);      remainingBytes=0;      return true;    }    remainingBytes--;    if (remainingBytes == 0) {      countingBytes=false;      return true;    }    return false;  }  if ((msg.getElement(0) & 0xFF) == Constants.POLL_REQ) {    SerialMessage m=new SpecificMessage(1);    m.setElement(0,Constants.POLL_ACK);    expectLength=true;    forwardToPort(m,null);    return false;  }  if (((msg.getElement(0) & 0xFF) == Constants.TIME_REQ_CP10) || ((msg.getElement(0) & 0xFF) == Constants.TIME_REQ_CP11)) {    SerialMessage m=SpecificMessage.setCM11Time(X10Sequence.encode(1));    forwardToPort(m,null);    return true;  }  if ((msg.getElement(0) & 0xFF) == 0x5B) {    if (msg.getNumDataElements() >= 3) {      return true;    } else {      return false;    }  }  if (sendInterlock) {    if (logDebug) {      log.debug("Send interlock");    }    sendInterlock=false;    SerialMessage m=new SpecificMessage(1);    m.setElement(0,0);    forwardToPort(m,null);    return false;  }  if (logDebug) {    log.debug("end of message: " + msg);  }  return true;}  }
class C{  public boolean isDisplayed(){  Object oo=get_Value(COLUMNNAME_IsDisplayed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void removeHeader(Header header){  if (header == null) {    return;  }  headers.remove(header);}  }
class C{  protected void decodeBufferPrefix(PushbackInputStream inStream,OutputStream outStream){  sequence=0;}  }
class C{  private void releasePrecachingWakeLock(){  if (mPrecachingWakeLock != null && mPrecachingWakeLock.isHeld()) {    mPrecachingWakeLock.release();  }}  }
class C{  public void afterLast() throws SQLException {  if (numRows > 0) {    cursorPos=numRows + 1;    absolutePos=0;    notifyCursorMoved();  }}  }
class C{  public void enableErrorMessageCollection(boolean pNewState){  mMessageCollectionEnabled=pNewState;  if (mMessages == null && mMessageCollectionEnabled) {    mMessages=new ArrayList<String>();  }}  }
class C{  public void clearBatch() throws SQLException {  batchList.clear();}  }
class C{  @SuppressWarnings("deprecation") private static void readBinaryBlockMatrixFromHDFS(Path path,JobConf job,FileSystem fs,MatrixBlock dest,long rlen,long clen,int brlen,int bclen) throws IOException, DMLRuntimeException {  boolean sparse=dest.isInSparseFormat();  MatrixIndexes key=new MatrixIndexes();  MatrixBlock value=new MatrixBlock();  long lnnz=0;  if (MRJobConfiguration.USE_BINARYBLOCK_SERIALIZATION)   MRJobConfiguration.addBinaryBlockSerializationFramework(job);  for (  Path lpath : getSequenceFilePaths(fs,path)) {    SequenceFile.Reader reader=new SequenceFile.Reader(fs,lpath,job);    try {      while (reader.next(key,value)) {        if (value.isEmptyBlock(false))         continue;        int row_offset=(int)(key.getRowIndex() - 1) * brlen;        int col_offset=(int)(key.getColumnIndex() - 1) * bclen;        int rows=value.getNumRows();        int cols=value.getNumColumns();        if (row_offset + rows < 0 || row_offset + rows > rlen || col_offset + cols < 0 || col_offset + cols > clen) {          throw new IOException("Matrix block [" + (row_offset + 1) + ":"+ (row_offset + rows)+ ","+ (col_offset + 1)+ ":"+ (col_offset + cols)+ "] "+ "out of overall matrix range [1:"+ rlen+ ",1:"+ clen+ "].");        }        if (sparse) {          dest.appendToSparse(value,row_offset,col_offset);        } else {          dest.copy(row_offset,row_offset + rows - 1,col_offset,col_offset + cols - 1,value,false);        }        lnnz+=value.getNonZeros();      }    }  finally {      IOUtilFunctions.closeSilently(reader);    }  }  dest.setNonZeros(lnnz);  if (sparse && clen > bclen) {    dest.sortSparseRows();  }}  }
class C{  public String diff_text2(LinkedList<Diff> diffs){  StringBuilder text=new StringBuilder();  for (  Diff aDiff : diffs) {    if (aDiff.operation != Operation.DELETE) {      text.append(aDiff.text);    }  }  return text.toString();}  }
class C{  protected Iterator<Element> asElementIterator(Object object){  return asElementList(object).iterator();}  }
class C{  public static Object eval(String script) throws ScriptException {  requireLoad();  checkSupported();  return engine.eval(script);}  }
class C{  private static boolean isContainer(final String entryName){  final boolean manifest=entryName.equals(META_INF_FOLDER + "container.xml");  return manifest;}  }
class C{  public boolean removeAction(Action action){  if (action == null) {    throw new IllegalArgumentException("The given action is null.");  }  if ((action.getVerb() == null) || (action.getCommand() == null)) {    throw new IllegalArgumentException("the given action object has null verb field or command field.");  }  if (actionList != null) {    return actionList.remove(action);  }  return false;}  }
class C{  public void waitForConnected(){synchronized (this) {    while (!isConnected()) {      try {        this.wait(10 * 1000);      } catch (      InterruptedException e) {        e.printStackTrace();      }    }  }}  }
class C{  private void verifyUseFollowsDef(String where){  HashSet<Object> definedVariables=new HashSet<Object>();  verifyUseFollowsDef(where,definedVariables,cfg.entry(),new BitVector(cfg.numberOfNodes()),new ArrayList<BasicBlock>(),5,true);}  }
class C{  @Override public int hashCode(){  int h=hash;  if (h == 0) {    for (int i=0; i < chars.length; i++) {      h=31 * h + chars[i];    }    hash=h;  }  return h;}  }
class C{  private void requestLocationInternal(){  Log.v(TAG,ACTION_REQUEST_LOCATION);  GoogleApiClient googleApiClient=new GoogleApiClient.Builder(this).addApi(LocationServices.API).build();  ConnectionResult connectionResult=googleApiClient.blockingConnect(Constants.GOOGLE_API_CLIENT_TIMEOUT_S,TimeUnit.SECONDS);  if (connectionResult.isSuccess() && googleApiClient.isConnected()) {    Intent locationUpdatedIntent=new Intent(this,UtilityService.class);    locationUpdatedIntent.setAction(ACTION_LOCATION_UPDATED);    Location location=FusedLocationApi.getLastLocation(googleApiClient);    if (location != null) {      Intent lastLocationIntent=new Intent(locationUpdatedIntent);      lastLocationIntent.putExtra(FusedLocationProviderApi.KEY_LOCATION_CHANGED,location);      startService(lastLocationIntent);    }    LocationRequest mLocationRequest=new LocationRequest().setPriority(LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY);    FusedLocationApi.requestLocationUpdates(googleApiClient,mLocationRequest,PendingIntent.getService(this,0,locationUpdatedIntent,0));    googleApiClient.disconnect();  } else {    Log.e(TAG,String.format(Constants.GOOGLE_API_CLIENT_ERROR_MSG,connectionResult.getErrorCode()));  }}  }
class C{  public boolean canBatch(int cmdSize){  assert getType() == TYPE_APPEND_ENTRY_REQ;  return batching && size + cmdSize + 2 <= buffer.length && !isHeartbeat();}  }
class C{  public FindReplaceDialog(AgentDebuggerFrame parent,DialogType type){  super(parent,type == DialogType.REPLACE ? "Replace" : "Find",true);  this.parent=parent;  cbSearch=new JComboBox();  cbSearch.setEditable(true);  cbReplace=new JComboBox();  cbReplace.setEditable(true);  KeyHandler handler=new KeyHandler();  tfSearchEditor=(JTextField)cbSearch.getEditor().getEditorComponent();  tfSearchEditor.addKeyListener(handler);  tfReplaceEditor=(JTextField)cbReplace.getEditor().getEditorComponent();  tfReplaceEditor.addKeyListener(handler);  GridBagLayout gridbag=new GridBagLayout();  GridBagConstraints constraints=new GridBagConstraints();  getContentPane().setLayout(gridbag);  ((JPanel)getContentPane()).setBorder(BorderFactory.createEmptyBorder(4,4,4,4));  int gridX=0;  int gridY=0;  JLabel findLabel=new JLabel("Find");  buildConstraints(constraints,gridX,gridY,1,1,0,0);  constraints.anchor=GridBagConstraints.WEST;  gridbag.setConstraints(findLabel,constraints);  getContentPane().add(findLabel);  gridX++;  buildConstraints(constraints,gridX,gridY,1,1,100,0);  constraints.fill=GridBagConstraints.HORIZONTAL;  constraints.anchor=GridBagConstraints.CENTER;  gridbag.setConstraints(cbSearch,constraints);  getContentPane().add(cbSearch);  gridX++;  btnFind=new JButton("Find");  btnFind.setToolTipText("Find text in scripts");  btnFind.setMnemonic('F');  btnFind.addActionListener(this);  buildConstraints(constraints,gridX,gridY,1,1,0,0);  constraints.anchor=GridBagConstraints.CENTER;  gridbag.setConstraints(btnFind,constraints);  getContentPane().add(btnFind);  getRootPane().setDefaultButton(btnFind);  gridX++;  btnCancel=new JButton("Cancel");  btnCancel.setMnemonic('C');  btnCancel.addActionListener(this);  buildConstraints(constraints,gridX,gridY,1,1,0,0);  constraints.anchor=GridBagConstraints.CENTER;  gridbag.setConstraints(btnCancel,constraints);  getContentPane().add(btnCancel);  gridY++;  gridX=0;  if (type == DialogType.REPLACE) {    JLabel replaceLabel=new JLabel("Replace");    buildConstraints(constraints,gridX,gridY,1,1,0,0);    constraints.anchor=GridBagConstraints.WEST;    gridbag.setConstraints(replaceLabel,constraints);    getContentPane().add(replaceLabel);    gridX++;    buildConstraints(constraints,gridX,gridY,1,1,100,0);    constraints.fill=GridBagConstraints.HORIZONTAL;    constraints.anchor=GridBagConstraints.CENTER;    gridbag.setConstraints(cbReplace,constraints);    getContentPane().add(cbReplace);    gridX++;    btnReplace=new JButton("Replace");    btnReplace.setToolTipText("REplace in script");    btnReplace.setMnemonic('R');    btnReplace.addActionListener(this);    buildConstraints(constraints,gridX,gridY,1,1,0,0);    constraints.anchor=GridBagConstraints.CENTER;    gridbag.setConstraints(btnReplace,constraints);    getContentPane().add(btnReplace);    gridX++;    btnReplaceAll=new JButton("Replace All");    btnReplaceAll.addActionListener(this);    buildConstraints(constraints,gridX,gridY,1,1,0,0);    constraints.anchor=GridBagConstraints.CENTER;    gridbag.setConstraints(btnReplaceAll,constraints);    getContentPane().add(btnReplaceAll);    btnReplace.addKeyListener(handler);    btnReplaceAll.addKeyListener(handler);    gridY++;    gridX=0;  }  TitledBorder border=new TitledBorder("Options");  JPanel panel=new JPanel(new GridLayout(1,4));  panel.setBorder(border);  checkboxWrap=new JCheckBox("Wrap Search");  panel.add(checkboxWrap);  checkboxMatchCase=new JCheckBox("Case sensitive");  panel.add(checkboxMatchCase);  checkboxRegexp=new JCheckBox("Regular expressions");  panel.add(checkboxRegexp);  buildConstraints(constraints,gridX,gridY,4,1,100,100);  constraints.anchor=GridBagConstraints.WEST;  gridbag.setConstraints(panel,constraints);  getContentPane().add(panel);  FontMetrics fm=getFontMetrics(getFont());  cbSearch.setPreferredSize(new Dimension(18 * fm.charWidth('m'),(int)cbSearch.getPreferredSize().height));  cbReplace.setPreferredSize(new Dimension(18 * fm.charWidth('m'),(int)cbReplace.getPreferredSize().height));  pack();  WindowUtil.centerOnParent(this);  btnFind.addKeyListener(handler);  btnCancel.addKeyListener(handler);  checkboxMatchCase.addKeyListener(handler);  checkboxRegexp.addKeyListener(handler);}  }
class C{  private void evict(){  do {    evictBlock();  } while (usedMemory > maxMemory);}  }
class C{  public static void drawInRound(Bitmap src,Bitmap dest,int clearColor){  if (dest.getWidth() != dest.getHeight()) {    throw new RuntimeException("dest Bitmap must have square size");  }  clearBitmap(dest,clearColor);  Canvas canvas=new Canvas(dest);  int r=dest.getWidth() / 2;  Rect sourceRect=WorkCache.RECT1.get();  Rect destRect=WorkCache.RECT2.get();  sourceRect.set(0,0,src.getWidth(),src.getHeight());  destRect.set(0,0,dest.getWidth(),dest.getHeight());  Paint paint=WorkCache.PAINT.get();  paint.reset();  paint.setStyle(Paint.Style.FILL);  paint.setColor(Color.RED);  paint.setAntiAlias(true);  canvas.drawCircle(r,r,r,paint);  paint.reset();  paint.setFilterBitmap(true);  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));  canvas.drawBitmap(src,sourceRect,destRect,paint);  canvas.setBitmap(null);}  }
class C{  public List<NamedRelatedResourceRep> listStoragePools(URI id){  StoragePoolList response=client.get(StoragePoolList.class,getIdUrl() + "/storage-pools",id);  return defaultList(response.getPools());}  }
class C{  @CanIgnoreReturnValue @Override public int add(E element,int occurrences){  checkNotNull(element);  if (occurrences == 0) {    return count(element);  }  CollectPreconditions.checkPositive(occurrences,"occurences");  while (true) {    AtomicInteger existingCounter=Maps.safeGet(countMap,element);    if (existingCounter == null) {      existingCounter=countMap.putIfAbsent(element,new AtomicInteger(occurrences));      if (existingCounter == null) {        return 0;      }    }    while (true) {      int oldValue=existingCounter.get();      if (oldValue != 0) {        try {          int newValue=IntMath.checkedAdd(oldValue,occurrences);          if (existingCounter.compareAndSet(oldValue,newValue)) {            return oldValue;          }        } catch (        ArithmeticException overflow) {          throw new IllegalArgumentException("Overflow adding " + occurrences + " occurrences to a count of "+ oldValue);        }      } else {        AtomicInteger newCounter=new AtomicInteger(occurrences);        if ((countMap.putIfAbsent(element,newCounter) == null) || countMap.replace(element,existingCounter,newCounter)) {          return 0;        }        break;      }    }  }}  }
class C{  Collection<CipherSuite> collection(){  return cipherSuites;}  }
class C{  public JSONTokener(InputStream inputStream) throws JSONException {  this(new InputStreamReader(inputStream));}  }
class C{  @POST @Path("/tenants") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN}) public OSTenantListRestRep createOpenStackTenants(OpenStackTenantListParam param){  _log.debug("Keystone Service - createOpenStackTenants");  if (param.getOpenstackTenants() == null || param.getOpenstackTenants().isEmpty()) {    throw APIException.internalServerErrors.targetIsNullOrEmpty("Tenant list param");  }  List<OSTenant> openstackTenants=new ArrayList<>();  for (  OpenStackTenantParam openStackTenantParam : param.getOpenstackTenants()) {    openstackTenants.add(prepareOpenstackTenant(openStackTenantParam));  }  if (!openstackTenants.isEmpty()) {    _dbClient.createObject(openstackTenants);  }  AuthnProvider keystoneProvider=_keystoneUtils.getKeystoneProvider();  if (keystoneProvider == null) {    throw APIException.internalServerErrors.targetIsNullOrEmpty("Keystone Authentication Provider");  }  if (keystoneProvider.getAutoRegCoprHDNImportOSProjects()) {    if (_openStackSynchronizationTask.getSynchronizationTask() == null) {      _authService.createTenantsAndProjectsForAutomaticKeystoneRegistration();      _openStackSynchronizationTask.startSynchronizationTask(_openStackSynchronizationTask.getTaskInterval(keystoneProvider));    }  }  return map(openstackTenants);}  }
class C{  private void onGrumpy(final String message){  if (messageChanged(grumpy,message)) {    grumpy=message;    fireChange(PROP_GRUMPY);    if (message != null) {      addTextIndicator("Grumpy",NotificationType.INFORMATION);    } else {      addTextIndicator("Receptive",NotificationType.INFORMATION);    }  }}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public static CopyParticipant[] loadCopyParticipants(RefactoringStatus status,RefactoringProcessor processor,Object element,CopyArguments arguments,String affectedNatures[],SharableParticipants shared){  return loadCopyParticipants(status,processor,element,arguments,null,affectedNatures,shared);}  }
class C{  public static InjectorBuilderImpl manager(ClassLoader loader){  return new InjectorBuilderImpl(loader);}  }
class C{  private void drawTexts(Canvas canvas,float textSize,Typeface typeface,String[] texts,float[] textGridWidths,float[] textGridHeights){  mPaint.setTextSize(textSize);  mPaint.setTypeface(typeface);  canvas.drawText(texts[0],textGridWidths[3],textGridHeights[0],mPaint);  canvas.drawText(texts[1],textGridWidths[4],textGridHeights[1],mPaint);  canvas.drawText(texts[2],textGridWidths[5],textGridHeights[2],mPaint);  canvas.drawText(texts[3],textGridWidths[6],textGridHeights[3],mPaint);  canvas.drawText(texts[4],textGridWidths[5],textGridHeights[4],mPaint);  canvas.drawText(texts[5],textGridWidths[4],textGridHeights[5],mPaint);  canvas.drawText(texts[6],textGridWidths[3],textGridHeights[6],mPaint);  canvas.drawText(texts[7],textGridWidths[2],textGridHeights[5],mPaint);  canvas.drawText(texts[8],textGridWidths[1],textGridHeights[4],mPaint);  canvas.drawText(texts[9],textGridWidths[0],textGridHeights[3],mPaint);  canvas.drawText(texts[10],textGridWidths[1],textGridHeights[2],mPaint);  canvas.drawText(texts[11],textGridWidths[2],textGridHeights[1],mPaint);}  }
class C{  public GZIPOutputStream(OutputStream out,boolean syncFlush) throws IOException {  this(out,512,syncFlush);}  }
class C{  private void swap(double a[],int i,int j){  double T;  T=a[i];  a[i]=a[j];  a[j]=T;  int t;  t=order[i];  order[i]=order[j];  order[j]=t;}  }
class C{  public static boolean addressesAreInSameSubnet(String host1,String host2,short prefix) throws Exception {  if (prefix <= 0) {    throw new Exception("Invalid prefix " + prefix);  }  HostAddress host1Address=getByName(host1);  HostAddress host2Address=getByName(host2);  byte[] netMask=netMaskFromPrefixLength(prefix);  byte[] host1Raw=host1Address.getAddress();  byte[] host2Raw=host2Address.getAddress();  for (int octet=0; octet < 3; octet++) {    if ((host1Raw[octet] & netMask[octet]) != (host2Raw[octet] & netMask[octet]))     return false;  }  return true;}  }
class C{  public void cancel(int entryId){  if (mEnabled)   CENTER.cancel(entryId);}  }
class C{  public static XYSeriesCollection createTestXYSeriesCollection(){  XYSeriesCollection result=new XYSeriesCollection();  XYSeries series1=new XYSeries("Series 1",false,false);  series1.add(1.0,2.0);  series1.add(2.0,5.0);  XYSeries series2=new XYSeries("Series 2",false,false);  series2.add(1.0,4.0);  series2.add(2.0,3.0);  result.addSeries(series1);  result.addSeries(series2);  return result;}  }
class C{  public void removeRestartListener(RestartListener listener){  listeners.removeListener(listener);}  }
class C{  @DELETE @Produces(MediaType.APPLICATION_JSON) @Path("/{batchId}") @Description("Deletes the batch having the given ID.") public Response deleteBatch(@Context HttpServletRequest req,@PathParam("batchId") String batchId){  _validateBatchId(batchId);  PrincipalUser currentOwner=validateAndGetOwner(req,null);  BatchMetricQuery batch=batchService.findBatchById(batchId);  if (batch != null) {    PrincipalUser actualOwner=userService.findUserByUsername(batch.getOwnerName());    validateResourceAuthorization(req,actualOwner,currentOwner);    batchService.deleteBatch(batchId);    return Response.status(Response.Status.OK).build();  }  throw new WebApplicationException(Response.Status.NOT_FOUND.getReasonPhrase(),Response.Status.NOT_FOUND);}  }
class C{  public static double[][] rowVector(double[] x){  return mergeRows(x);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.CONSTRAINT_EXPR___NEGATIVE_CONSTRAINT_1:    return getNegativeConstraint_1();case UmplePackage.CONSTRAINT_EXPR___STRING_EXPR_1:  return getStringExpr_1();case UmplePackage.CONSTRAINT_EXPR___BOOL_EXPR_1:return getBoolExpr_1();case UmplePackage.CONSTRAINT_EXPR___GEN_EXPR_1:return getGenExpr_1();case UmplePackage.CONSTRAINT_EXPR___NUM_EXPR_1:return getNumExpr_1();case UmplePackage.CONSTRAINT_EXPR___LONE_BOOLEAN_1:return getLoneBoolean_1();case UmplePackage.CONSTRAINT_EXPR___ANONYMOUS_CONSTRAINT_EXPR_11:return getAnonymous_constraintExpr_1_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public String post_xml(String path,String xml_data) throws IOException, HttpResponseException {  HttpPost request=new HttpPost(api(path));  if (xml_data != null) {    request.setEntity(new StringEntity(xml_data,ContentType.APPLICATION_XML));  }  HttpResponse response=client.execute(request,localContext);  int status=response.getStatusLine().getStatusCode();  if (status < 200 || status >= 300) {    throw new HttpResponseException(status,response.getStatusLine().getReasonPhrase());  }  try {    InputStream content=response.getEntity().getContent();    Scanner s=new Scanner(content,CHARSET_UTF_8);    StringBuffer sb=new StringBuffer();    while (s.hasNext()) {      sb.append(s.next());    }    return sb.toString();  }  finally {    EntityUtils.consume(response.getEntity());  }}  }
class C{  public boolean isInMemory(){  return !isThresholdExceeded();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static IMount createResourceMount(Class modClass,String domain,String subPath){  findCC();  if (computerCraft_createResourceMount != null) {    try {      return (IMount)computerCraft_createResourceMount.invoke(null,modClass,domain,subPath);    } catch (    Exception e) {    }  }  return null;}  }
class C{  private static void checkNotNull(Object v){  if (v == null)   throw new NullPointerException();}  }
class C{  @Benchmark public long test8_UsingJava8StreamApiParallel() throws IOException {  final long[] i={0};  map.entrySet().stream().parallel().forEach(null);  return i[0];}  }
class C{  public Matcher matcher(CharSequence cs){  regExp=createExpression(pattern,flags);  return new Matcher(this,cs);}  }
class C{  public SIPHeader parse() throws ParseException {  Subject subject=new Subject();  if (debug)   dbg_enter("SubjectParser.parse");  try {    headerName(TokenTypes.SUBJECT);    this.lexer.SPorHT();    String s=this.lexer.getRest();    subject.setSubject(s.trim());  }  finally {    if (debug)     dbg_leave("SubjectParser.parse");  }  return subject;}  }
class C{  public RemoveWorkingSetModificationStrategy(final IWorkingSet toRemoved){  this.toRemove=toRemoved;}  }
class C{  public void addWebAppDebugModelListener(IWebAppDebugModelListener listener){synchronized (privateInstanceLock) {    webAppDebugModelListeners.add(listener);  }}  }
class C{  private static void printCacheEntries(IgniteCache<Integer,Integer> cache){  System.out.println();  System.out.println(">>> Entries in the cache.");  Map<Integer,Integer> entries=cache.getAll(KEYS_SET);  if (entries.isEmpty())   System.out.println("No entries in the cache."); else {    for (    Map.Entry<Integer,Integer> entry : entries.entrySet())     System.out.println("Entry [key=" + entry.getKey() + ", value="+ entry.getValue()+ ']');  }}  }
class C{  public BlockDenseDoubleMatrix2D(final int rows,final int cols,final int blockStripeSize,final BlockOrder blockOrder){  super(rows,cols);  verifyTrue(rows > 0,"rows<=0");  verifyTrue(cols > 0,"cols<=0");  verifyTrue(blockStripeSize > 0,"blockStripeSize<=0");  verifyTrue(blockOrder != null,"blockOrder == null");  if (UJMPSettings.getInstance().getNumberOfThreads() != 1) {    System.err.println("WARNING: setting number of threads to 1 for BlockMatrix");    UJMPSettings.getInstance().setNumberOfThreads(1);  }  this.size=new long[]{rows,cols};  this.layout=new BlockMatrixLayout(rows,cols,blockStripeSize,blockOrder);  this.data=new double[this.layout.numberOfBlocks][];}  }
class C{  protected void resolveExternalSubsetAndRead() throws IOException, XNIException {  fDTDDescription.setValues(null,null,fEntityManager.getCurrentResourceIdentifier().getExpandedSystemId(),null);  fDTDDescription.setRootName(fElementQName.rawname);  XMLInputSource src=fExternalSubsetResolver.getExternalSubset(fDTDDescription);  if (src != null) {    fDoctypeName=fElementQName.rawname;    fDoctypePublicId=src.getPublicId();    fDoctypeSystemId=src.getSystemId();    if (fDocumentHandler != null) {      fDocumentHandler.doctypeDecl(fDoctypeName,fDoctypePublicId,fDoctypeSystemId,null);    }    try {      if (fValidationManager == null || !fValidationManager.isCachedDTD()) {        fDTDScanner.setInputSource(src);        while (fDTDScanner.scanDTDExternalSubset(true))         ;      } else {        fDTDScanner.setInputSource(null);      }    }  finally {      fEntityManager.setEntityHandler(XMLDocumentScannerMMImpl.this);    }  }}  }
class C{  public static boolean isConfirmed(final String title,final String text){  return isConfirmed(null,title,text,-1);}  }
class C{  public boolean hasMoreEvents(){  return false;}  }
class C{  @Override public ParsedPage parse(String src){  if (!runConfig()) {    return null;  }  if (src == null || src.length() == 0) {    return null;  }  SpanManager sm=new SpanManager(src.replace('\t',' ') + lineSeparator);  if (calculateSrcSpans) {    sm.enableSrcPosCalculation();  }  ParsedPage ppResult=new ParsedPage();  ContentElementParsingParameters cepp=new ContentElementParsingParameters();  deleteComments(sm);  deleteTOCTag(sm);  sm.manageList(cepp.noWikiSpans);  parseSpecifiedTag(sm,cepp.noWikiSpans,cepp.noWikiStrings,"PRE"," ");  parseSpecifiedTag(sm,cepp.noWikiSpans,cepp.noWikiStrings,"NOWIKI");  if (cepp.noWikiSpans.size() == 0) {    sm.removeManagedList(cepp.noWikiSpans);  }  sm.manageList(cepp.mathSpans);  parseSpecifiedTag(sm,cepp.mathSpans,cepp.mathStrings,"MATH");  if (cepp.mathSpans.size() == 0) {    sm.removeManagedList(cepp.mathSpans);  }  parseTemplates(sm,cepp.templateSpans,cepp.templates,ppResult);  parseTags(sm,cepp.tagSpans);  convertGalleriesToImages(sm,cepp.tagSpans);  parseImagesAndInternalLinks(sm,cepp.linkSpans,cepp.links);  LinkedList<Span> lineSpans=new LinkedList<Span>();  getLineSpans(sm,lineSpans);  ppResult.setCategoryElement(getSpecialLinks(sm,cepp.linkSpans,cepp.links," - ",categoryIdentifers));  ppResult.setLanguagesElement(getSpecialLinks(sm,cepp.linkSpans,cepp.links," - ",languageIdentifers));  ppResult.setSections(EmptyStructureRemover.eliminateEmptyStructures(parseSections(sm,cepp,lineSpans)));  setFirstParagraph(ppResult);  if (calculateSrcSpans) {    SrcPosRangeChecker.checkRange(ppResult);  }  return ppResult;}  }
class C{  public static Intent loginIntent(Context context){  return new Intent(context,LoginActivity.class);}  }
class C{  final public boolean isOptional(){  return false;}  }
class C{  public static void fillRow(Matrix A,int i,int from,int to,double val){  for (int j=from; j < to; j++)   A.set(i,j,val);}  }
class C{  public int lengthOfMonth(){  return lengthOfMonth(get(YEAR),get(MONTH));}  }
class C{  public static Geometry scaledNoding(Geometry geom,double scaleFactor){  List segs=createSegmentStrings(geom);  PrecisionModel fixedPM=new PrecisionModel(scaleFactor);  Noder noder=new ScaledNoder(new MCIndexSnapRounder(new PrecisionModel(1.0)),fixedPM.getScale());  noder.computeNodes(segs);  Collection nodedSegStrings=noder.getNodedSubstrings();  return SegmentStringUtil.toGeometry(nodedSegStrings,FunctionsUtil.getFactoryOrDefault(geom));}  }
class C{  @Override public synchronized void println(Object x){  print(x);  println();}  }
class C{  private MarkupContainer createNegativeItemAllocationResultFragment(final String sku){  final ProductSku productSku=productServiceFacade.getProductSkuBySkuCode(sku);  final Map<String,Object> param=new HashMap<String,Object>();  param.put("product",getI18NSupport().getFailoverModel(productSku.getDisplayName(),productSku.getName()).getValue(getLocale().getLanguage()));  param.put("sku",sku);  final String errorMessage=WicketUtil.createStringResourceModel(this,ALLOCATION_DETAIL,param).getString();  error(errorMessage);  return new Fragment(RESULT_CONTAINER,NEGATIVE_ALLOCATION_RESULT_FRAGMENT,this).add(new Label(ALLOCATION_DETAIL,errorMessage));}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.PROPERTY_NAME_VALUE_PAIR__DECLARED_TYPE_REF:    return basicSetDeclaredTypeRef(null,msgs);case N4JSPackage.PROPERTY_NAME_VALUE_PAIR__BOGUS_TYPE_REF:  return basicSetBogusTypeRef(null,msgs);case N4JSPackage.PROPERTY_NAME_VALUE_PAIR__EXPRESSION:return basicSetExpression(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void save() throws CouldntSaveDataException {  try {    naviView.save();  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  public VPFLayer(){  setProjectionChangePolicy(new com.bbn.openmap.layer.policy.ListResetPCPolicy(this));  setMouseModeIDsForEvents(new String[]{"Gestures"});}  }
class C{  public Filter createFilter(BridgeContext ctx,Element filterElement,Element filteredElement,GraphicsNode filteredNode,Filter inputFilter,Rectangle2D filterRegion,Map filterMap){  int[] orderXY=convertOrder(filterElement,ctx);  float[] kernelMatrix=convertKernelMatrix(filterElement,orderXY,ctx);  float divisor=convertDivisor(filterElement,kernelMatrix,ctx);  float bias=convertNumber(filterElement,SVG_BIAS_ATTRIBUTE,0,ctx);  int[] targetXY=convertTarget(filterElement,orderXY,ctx);  PadMode padMode=convertEdgeMode(filterElement,ctx);  double[] kernelUnitLength=convertKernelUnitLength(filterElement,ctx);  boolean preserveAlpha=convertPreserveAlpha(filterElement,ctx);  Filter in=getIn(filterElement,filteredElement,filteredNode,inputFilter,filterMap,ctx);  if (in == null) {    return null;  }  Rectangle2D defaultRegion=in.getBounds2D();  Rectangle2D primitiveRegion=SVGUtilities.convertFilterPrimitiveRegion(filterElement,filteredElement,filteredNode,defaultRegion,filterRegion,ctx);  PadRable pad=new PadRable8Bit(in,primitiveRegion,PadMode.ZERO_PAD);  ConvolveMatrixRable convolve=new ConvolveMatrixRable8Bit(pad);  for (int i=0; i < kernelMatrix.length; i++) {    kernelMatrix[i]/=divisor;  }  convolve.setKernel(new Kernel(orderXY[0],orderXY[1],kernelMatrix));  convolve.setTarget(new Point(targetXY[0],targetXY[1]));  convolve.setBias(bias);  convolve.setEdgeMode(padMode);  convolve.setKernelUnitLength(kernelUnitLength);  convolve.setPreserveAlpha(preserveAlpha);  handleColorInterpolationFilters(convolve,filterElement);  PadRable filter=new PadRable8Bit(convolve,primitiveRegion,PadMode.ZERO_PAD);  updateFilterMap(filterElement,filter,filterMap);  return filter;}  }
class C{  public BatchRequest resoluteRequest(final BatchRequest request,final BatchResponse parentResponse){  final BatchRequest br=request;  final JsonModel responseJsonModel=JsonModel.model(parentResponse.getBody());  final JsonObject jsonRequestBody=this.fromJsonHelper.parse(request.getBody()).getAsJsonObject();  JsonObject jsonResultBody=new JsonObject();  for (  Entry<String,JsonElement> element : jsonRequestBody.entrySet()) {    final String key=element.getKey();    final JsonElement value=resolveDependentVariables(element,responseJsonModel);    jsonResultBody.add(key,value);  }  br.setBody(jsonResultBody.toString());  String relativeUrl=request.getRelativeUrl();  if (relativeUrl.contains("$.")) {    String queryParams="";    if (relativeUrl.contains("?")) {      queryParams=relativeUrl.substring(relativeUrl.indexOf("?"));      relativeUrl=relativeUrl.substring(0,relativeUrl.indexOf("?"));    }    final String[] parameters=relativeUrl.split("/");    for (    String parameter : parameters) {      if (parameter.contains("$.")) {        final String resParamValue=responseJsonModel.get(parameter).toString();        relativeUrl=relativeUrl.replace(parameter,resParamValue);        br.setRelativeUrl(relativeUrl + queryParams);      }    }  }  return br;}  }
class C{  public void addField(FormField field){synchronized (fields) {    fields.add(field);  }}  }
class C{  public Builder withMaxSegmentSize(long maxSegmentSize){  buffer.writeUnsignedInt(24,maxSegmentSize);  return this;}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  builder.put(k2,v2);  builder.put(k3,v3);  builder.put(k4,v4);  return builder.build();}  }
class C{  public PowerModelSquare(double maxPower,double staticPowerPercent){  setMaxPower(maxPower);  setStaticPower(staticPowerPercent * maxPower);  setConstant((maxPower - getStaticPower()) / Math.pow(100,2));}  }
class C{  public void hashJoinAndEmit(final IBindingSet[] chunk,final BOpStats stats,final IBuffer<IBindingSet> outputBuffer,final IConstraint[] joinConstraints,final IVariable<?> askVar){  final JVMHashIndex rightSolutions=getRightSolutions();  if (log.isInfoEnabled()) {    log.info("rightSolutions: #buckets=" + rightSolutions.bucketCount() + ",#solutions="+ getRightSolutionCount());  }  final boolean noJoinVars=getJoinVars().length == 0;  for (  final IBindingSet left : chunk) {    final Bucket bucket=rightSolutions.getBucket(left);    nleftConsidered.increment();    boolean matchExists=false;    if (bucket != null) {      final Iterator<SolutionHit> ritr=bucket.iterator();      while (ritr.hasNext()) {        final SolutionHit right=ritr.next();        nrightConsidered.increment();        if (log.isDebugEnabled())         log.debug("Join with " + right);        nJoinsConsidered.increment();        if (noJoinVars && nJoinsConsidered.get() == getNoJoinVarsLimit()) {          if (nleftConsidered.get() > 1 && nrightConsidered.get() > 1) {            throw new UnconstrainedJoinException();          }        }        final IBindingSet outSolution=BOpContext.bind(right.solution,left,joinConstraints,getSelectVars());        matchExists|=outSolution != null;switch (getJoinType()) {case Normal:case Optional:{            if (outSolution != null) {              if (askVar != null) {                outSolution.set(askVar,new Constant<XSDBooleanIV<?>>(XSDBooleanIV.valueOf(true)));              }              outputSolution(outputBuffer,outSolution);            }            break;          }case Exists:case NotExists:        break;default :      throw new AssertionError();  }}}switch (getJoinType()) {case Optional:case NotExists:if (!matchExists) {  outputSolution(outputBuffer,left);}break;case Exists:{if (askVar != null) {left.set(askVar,new Constant<XSDBooleanIV<?>>(XSDBooleanIV.valueOf(matchExists)));outputSolution(outputBuffer,left);}break;}case Normal:break;default :throw new AssertionError();}}}  }
class C{  public HookMessageDeserializer(){  super(NotificationInterface.HOOK_VERSIONED_MESSAGE_TYPE,AbstractNotification.CURRENT_MESSAGE_VERSION,getDeserializerMap(),NOTIFICATION_LOGGER);}  }
class C{  public WrappedByteBuffer skip(int size){  _autoExpand(size);  _buf.position(_buf.position() + size);  return this;}  }
class C{  public boolean addCount(Link link,int h,double volumen){  if (h < 1 || h > 24)   return false;  Count<Link> c=counts.getCount(link.getId());  if (c == null)   return false;  if (c.getVolume(h) == null) {    c.createVolume(h,volumen);    return true;  } else   return false;}  }
class C{  @Override public int isNullable(int param) throws SQLException {  try {    debugCodeCall("isNullable",param);    return getParameter(param).getNullable();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public final void forward(Vector3d direction){  location.add(direction);  updateLocation();}  }
class C{  public static JPopupButton createDrawingColorButton(DrawingEditor editor,AttributeKey<Color> attributeKey,java.util.List<ColorIcon> swatches,int columnCount,String labelKey,ResourceBundleUtil labels,@Nullable Map<AttributeKey,Object> defaultAttributes){  return createDrawingColorButton(editor,attributeKey,swatches,columnCount,labelKey,labels,defaultAttributes,new Rectangle(1,17,20,4));}  }
class C{  public static SpannableStringBuilder warpChooserTitle(Activity context,String appName){  @SuppressLint("StringFormatMatches") String title=String.format(context.getString(R.string.select_transfer_way_apk,appName));  ForegroundColorSpan fontSpanRed=new ForegroundColorSpan(Utils.getColorWarp(context,R.color.colorAccent));  int start=2;  int end=start + appName.length() + 3;  SpannableStringBuilder mSpannableBuilder=new SpannableStringBuilder(title);  mSpannableBuilder.setSpan(fontSpanRed,start,end,Spanned.SPAN_INCLUSIVE_INCLUSIVE);  return mSpannableBuilder;}  }
class C{  public static void handleErrorViolations(Formatter formatter,long numErrors){  ExitCode exitCode=formatter.getExitStatus(numErrors);  if (exitCode != ExitCode.SUCCESS) {    System.exit(exitCode.ordinal());  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ASSOCIATION_CLASS_CONTENT___COMMENT_1:    return ((InternalEList<?>)getComment_1()).basicRemove(otherEnd,msgs);case UmplePackage.ASSOCIATION_CLASS_CONTENT___CLASS_DEFINITION_1:  return ((InternalEList<?>)getClassDefinition_1()).basicRemove(otherEnd,msgs);case UmplePackage.ASSOCIATION_CLASS_CONTENT___POSITION_1:return ((InternalEList<?>)getPosition_1()).basicRemove(otherEnd,msgs);case UmplePackage.ASSOCIATION_CLASS_CONTENT___DISPLAY_COLOR_1:return ((InternalEList<?>)getDisplayColor_1()).basicRemove(otherEnd,msgs);case UmplePackage.ASSOCIATION_CLASS_CONTENT___INVARIANT_1:return ((InternalEList<?>)getInvariant_1()).basicRemove(otherEnd,msgs);case UmplePackage.ASSOCIATION_CLASS_CONTENT___SOFTWARE_PATTERN_1:return ((InternalEList<?>)getSoftwarePattern_1()).basicRemove(otherEnd,msgs);case UmplePackage.ASSOCIATION_CLASS_CONTENT___DEPEND_1:return ((InternalEList<?>)getDepend_1()).basicRemove(otherEnd,msgs);case UmplePackage.ASSOCIATION_CLASS_CONTENT___SINGLE_ASSOCIATION_END_1:return ((InternalEList<?>)getSingleAssociationEnd_1()).basicRemove(otherEnd,msgs);case UmplePackage.ASSOCIATION_CLASS_CONTENT___STATE_MACHINE_1:return ((InternalEList<?>)getStateMachine_1()).basicRemove(otherEnd,msgs);case UmplePackage.ASSOCIATION_CLASS_CONTENT___ATTRIBUTE_1:return ((InternalEList<?>)getAttribute_1()).basicRemove(otherEnd,msgs);case UmplePackage.ASSOCIATION_CLASS_CONTENT___ASSOCIATION_1:return ((InternalEList<?>)getAssociation_1()).basicRemove(otherEnd,msgs);case UmplePackage.ASSOCIATION_CLASS_CONTENT___INLINE_ASSOCIATION_1:return ((InternalEList<?>)getInlineAssociation_1()).basicRemove(otherEnd,msgs);case UmplePackage.ASSOCIATION_CLASS_CONTENT___EXTRA_CODE_1:return ((InternalEList<?>)getExtraCode_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static byte[] concat(final byte[]... arrays){  int totalSize=0;  for (  final byte[] array : arrays) {    totalSize+=array.length;  }  int startIndex=0;  final byte[] result=new byte[totalSize];  for (  final byte[] array : arrays) {    System.arraycopy(array,0,result,startIndex,array.length);    startIndex+=array.length;  }  return result;}  }
class C{  @SuppressWarnings("unchecked") public void mousePressed(MouseEvent e){  if (e.getModifiers() == modifiers) {    VisualizationViewer<V,E> vv=(VisualizationViewer<V,E>)e.getSource();    GraphElementAccessor<V,E> pickSupport=vv.getPickSupport();    PickedState<V> pickedVertexState=vv.getPickedVertexState();    Layout<V,E> layout=vv.getGraphLayout();    if (pickSupport != null && pickedVertexState != null) {      Point2D p=e.getPoint();      vertex=pickSupport.getVertex(layout,p.getX(),p.getY());      if (vertex != null) {        if (pickedVertexState.isPicked(vertex) == false) {          pickedVertexState.clear();          pickedVertexState.pick(vertex,true);        }      }    }    e.consume();  }}  }
class C{  public static String escapeQuoteCharsInQuotes(String line,Pattern separatorPattern,char quotingChar,char escapeChar,boolean showWarning){  char lastChar='0';  boolean openedQuote=false;  List<Integer> rememberQuotePosition=new LinkedList<>();  for (int i=0; i < line.length(); i++) {    if (lastChar == quotingChar) {      if (openedQuote) {        boolean matches=Pattern.matches(separatorPattern.pattern() + ".*",line.substring(i));        if (matches) {          openedQuote=false;        } else {          rememberQuotePosition.add(i - 1);        }      } else {        openedQuote=true;      }    }    lastChar=line.charAt(i);  }  if (openedQuote && lastChar == quotingChar) {    openedQuote=false;  }  if (showWarning && !rememberQuotePosition.isEmpty()) {    StringBuilder positions=new StringBuilder();    int j=1;    for (int i=0; i < rememberQuotePosition.size(); i++) {      if (j % 10 == 0) {        positions.append("\n");      }      positions.append(rememberQuotePosition.get(i));      if (i + 1 < rememberQuotePosition.size()) {        positions.append(", ");      }      j++;    }    String lineBeginning=line;    if (line.length() > 20) {      lineBeginning=line.substring(0,20);    }    String warning="While reading the line starting with \n\n\t" + lineBeginning + "   ...\n\n"+ ",an unescaped quote character was substituted by an escaped quote at the position(s) "+ positions.toString()+ ". "+ "In particular der character '"+ Character.toString(lastChar)+ "' was replaced by '"+ Character.toString(escapeChar)+ Character.toString(lastChar)+ ".";    LogService.getRoot().log(Level.WARNING,warning);  }  if (!rememberQuotePosition.isEmpty()) {    String newLine="";    int pos=rememberQuotePosition.remove(0);    int i=0;    for (    Character c : line.toCharArray()) {      if (i == pos) {        newLine+=Character.toString(escapeChar) + c;        if (!rememberQuotePosition.isEmpty()) {          pos=rememberQuotePosition.remove(0);        }      } else {        newLine+=c;      }      i++;    }    line=newLine;  }  return line;}  }
class C{  public void increment(String key,Number amount){  if (values.containsKey(key)) {    SabresValue sabresValue=values.get(key);    if (sabresValue instanceof NumberValue) {      ((NumberValue)sabresValue).increment(amount);      dirtyKeys.add(key);    } else {      throw new IllegalArgumentException(String.format("Key %s is not a number. Cannot increment",key));    }  } else {    throw new IllegalArgumentException(String.format("Key %s does not exist. Cannot increment",key));  }}  }
class C{  public static int[] toIntArray(BigInteger[] input){  int[] result=new int[input.length];  for (int i=0; i < input.length; i++) {    result[i]=input[i].intValue();  }  return result;}  }
class C{  protected boolean scanRootElementHook() throws IOException, XNIException {  if (fExternalSubsetResolver != null && !fSeenDoctypeDecl && !fDisallowDoctype && (fValidation || fLoadExternalDTD)) {    scanStartElementName();    resolveExternalSubsetAndRead();    if (scanStartElementAfterName()) {      setScannerState(SCANNER_STATE_TRAILING_MISC);      setDispatcher(fTrailingMiscDispatcher);      return true;    }  } else   if (scanStartElement()) {    setScannerState(SCANNER_STATE_TRAILING_MISC);    setDispatcher(fTrailingMiscDispatcher);    return true;  }  return false;}  }
class C{  public Object object(){  return str();}  }
class C{  public static <T extends Object & java.lang.Comparable<? super T>>T max(Collection<? extends T> collection){  Iterator<? extends T> it=collection.iterator();  T max=it.next();  if (NumberComparator.isNumber(max)) {    return (T)max(collection,NumberComparator.createComparator(max.getClass()));  }  while (it.hasNext()) {    T next=it.next();    if (max.compareTo(next) < 0) {      max=next;    }  }  return max;}  }
class C{  public static boolean isOperationResult(final Message message){  return message.containsProperty(ManagementHelper.HDR_OPERATION_SUCCEEDED);}  }
class C{  public void clear(){  headers.clear();}  }
class C{  @Override protected boolean handleMovement(final RPEntity entity){  if (rand.nextDouble() < probability) {    doDamage(entity);  }  return true;}  }
class C{  public IPv6AddressValidator(@NonNull final Context context,@StringRes final int resourceId){  super(context,resourceId,REGEX);}  }
class C{  public static void print(byte[] bytes,PrintStream out){  print(wrap(bytes),out,0,bytes.length);}  }
class C{  public static final Number SUM(Number[] vals){  try {    double sum=0.0;    for (int i=0; i < vals.length; i++) {      sum=sum + vals[i].doubleValue();    }    return Double.valueOf(sum);  } catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  Throwable t) {    SystemFailure.checkFailure();    return null;  }}  }
class C{  private <T>T safeOp(Callable<T> act){  if (enterBusy()) {    try {      return act.call();    } catch (    Exception e) {      throw IgfsUtils.toIgfsException(e);    } finally {      busyLock.leaveBusy();    }  } else   throw new IllegalStateException("Failed to perform IGFS action because grid is stopping.");}  }
class C{  public boolean isSignatureValid(ContentVerifierProvider verifierProvider) throws CertException {  TBSCertList tbsCRL=x509CRL.getTBSCertList();  if (!CertUtils.isAlgIdEqual(tbsCRL.getSignature(),x509CRL.getSignatureAlgorithm())) {    throw new CertException("signature invalid - algorithm identifier mismatch");  }  ContentVerifier verifier;  try {    verifier=verifierProvider.get((tbsCRL.getSignature()));    OutputStream sOut=verifier.getOutputStream();    DEROutputStream dOut=new DEROutputStream(sOut);    dOut.writeObject(tbsCRL);    sOut.close();  } catch (  Exception e) {    throw new CertException("unable to process signature: " + e.getMessage(),e);  }  return verifier.verify(x509CRL.getSignature().getBytes());}  }
class C{  public static MetadataContext forVersion(Version version){  return forContext(null,null,version);}  }
class C{  public ContainsResult contains(BytesRef value){  int hash=hashFunction.hash(value);  if (hash < 0) {    hash=hash * -1;  }  return mayContainValue(hash);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  static Event<? extends Entity> create(Entity entity,RPEvent rpevent){  Event<? extends Entity> res=null;  if (entity instanceof RPEntity) {    res=createEventsForRPEntity((RPEntity)entity,rpevent);  }  if (res == null) {    res=createEventsForEntity(entity,rpevent);  }  if (res == null) {    Event<Entity> unknown=new UnknownEvent<Entity>();    unknown.init(entity,rpevent);    res=unknown;  }  logger.debug("Created event: " + res);  return res;}  }
class C{  @Override public void process(final DM dm,final ReplyProcessor21 p){  final long startTime=getTimestamp();  FetchKeysResponse processor=(FetchKeysResponse)p;  if (processor == null) {    if (logger.isTraceEnabled(LogMarker.DM)) {      logger.trace(LogMarker.DM,"FetchKeysReplyMessage processor not found");    }    return;  }  processor.process(this);  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"{} Remote-processed {}",processor,this);  }  dm.getStats().incReplyMessageTime(DistributionStats.getStatTime() - startTime);}  }
class C{  public Block split(final Line line){  final Block block=new Block();  block.lines=this.lines;  block.lineTail=line;  this.lines=line.next;  line.next=null;  if (this.lines == null) {    this.lineTail=null;  } else {    this.lines.previous=null;  }  if (this.blocks == null) {    this.blocks=this.blockTail=block;  } else {    this.blockTail.next=block;    this.blockTail=block;  }  return block;}  }
class C{  public int receive() throws IOException {  int bytes=channel.read(rxBuffer);  if (bytes <= 0)   return bytes;  rxBuffer.flip();  while (parser.parse(rxBuffer))   ;  rxBuffer.compact();  if (rxBuffer.position() == rxBuffer.capacity())   throw new FIXMessageOverflowException("Too long message");  lastRxMillis=currentTimeMillis;  return bytes;}  }
class C{  public void write(final AbstractIndex index) throws SQLException {  Statement statement;  StringBuilder cmd;  while (index.size() > 0) {    System.out.println("Transmit Index [" + index + "]");    cmd=index.remove();    statement=connection.createStatement();    statement.execute(cmd.toString());    statement.close();  }}  }
class C{  public Element popElement(){  if (lastElementIndex < 0) {    return null;  }  return stack[lastElementIndex--];}  }
class C{  public static double logFactorial(int k){  if (k >= 30) {    double r, rr;    final double C0=9.18938533204672742e-01;    final double C1=8.33333333333333333e-02;    final double C3=-2.77777777777777778e-03;    final double C5=7.93650793650793651e-04;    final double C7=-5.95238095238095238e-04;    r=1.0 / (double)k;    rr=r * r;    return (k + 0.5) * Math.log(k) - k + C0 + r * (C1 + rr * (C3 + rr * (C5 + rr * C7)));  } else   return logFactorials[k];}  }
class C{  public AdaptiveCpuLoadProbe(){}  }
class C{  private boolean shouldDividerTitleBeShown(){  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(getActivity());  String key=getString(R.string.show_divider_title_preference_key);  boolean defaultValue=getResources().getBoolean(R.bool.show_divider_title_preference_default_value);  return sharedPreferences.getBoolean(key,defaultValue);}  }
class C{  static boolean isDeclaredIn(Method m,Class<?>... classes){  Class<?> dc=m.getDeclaringClass();  for (  Class<?> c : classes) {    if (c == dc)     return true;  }  return false;}  }
class C{  public T caseUnionTypeExpression(UnionTypeExpression object){  return null;}  }
class C{  public KMLNetworkLinkTreeNode(KMLNetworkLink networkLink){  super(networkLink);}  }
class C{  public void replaceClassName(String oldName,String newName){  checkModify();}  }
class C{  public String makeUniqueName(String prefix){  throw new RuntimeException("not available in " + getName());}  }
class C{  public static void testImsExtension(String ext) throws ServerApiPermissionDeniedException, ServerApiServiceNotRegisteredException {  if (!isImsConnected()) {    throw new ServerApiServiceNotRegisteredException("Core is not connected to IMS");  }  if (!Core.getInstance().getImsModule().getExtensionManager().isExtensionAuthorized(ext)) {    throw new ServerApiPermissionDeniedException("Extension not authorized");  }}  }
class C{  public void testIdWithADot(){  String jndiName="jdbc.DataSource";  String propertyString=DatasourcePropertySet.JNDI_LOCATION + "=" + jndiName;  DataSource ds=dataSourceConverter.fromPropertyString(propertyString);  assertEquals("DataSource",ds.getId());}  }
class C{  public boolean isAdapterConfiguredByDhcp(int adapter){  return NETWORK_SETTING_DHCP.equals(getNicSetting(adapter));}  }
class C{  public MosaicDefinitionMetaDataPair(final Deserializer deserializer){  super("mosaic","meta",null,null,deserializer);}  }
class C{  public void addFile(String filename){synchronized (files) {    if (!files.contains(filename)) {      files.add(filename);    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  int i=0;  int rows, cols;  double imageTotal=0;  long imageN=0;  double imageAverage=0;  double imageTotalDeviation=0;  double crispness=0;  double z=0;  float progress=0;  int col, row;  int a;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    }  }  if (inputHeader == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=image.getValue(row,col);        if (z != noData) {          if (z < 0 || z > 1) {            showFeedback("This tool should only be used with " + "membership probability images containing " + "values that range from 0 to 1.");            break;          }          imageTotal+=z;          imageN++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Calculating image average:",(int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=image.getValue(row,col);        if (z != noData) {          imageTotalDeviation+=(z - imageAverage) * (z - imageAverage);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Calculating the image total squared deviation:",(int)progress);    }    image.close();    double denominator;    denominator=Math.pow(imageTotal * (1 - imageAverage),2) + Math.pow(imageAverage,2) * (imageN - imageTotal);    crispness=imageTotalDeviation / denominator;    DecimalFormat df;    df=new DecimalFormat("0.000");    String retstr="CRISPNESS INDEX";    retstr=retstr + "\nInput image:\t" + inputHeader;    retstr=retstr + "\nCrispness (C):\t" + df.format(crispness);    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void statement_close(FilterChain chain,StatementProxy statement) throws SQLException {  super.statement_close(chain,statement);  statementLog("{conn-" + statement.getConnectionProxy().getId() + ", "+ stmtId(statement)+ "} closed");}  }
class C{  public static void main(String[] args){  String ipAddress="NIC_DOES_NOT_EXIST";  try {    if (args.length == 0) {      ipAddress=getIpAddressByLocalHost();    } else {      if (args[0].equals("getIpAddressByLocalHost")) {        ipAddress=getIpAddressByLocalHost();      } else       if (args[0].equals("getIpAddress")) {        if (args.length == 2) {          String tmpIpAddress=NicUtil.getIpAddress(args[1]);          if (tmpIpAddress != null)           ipAddress=tmpIpAddress;        } else         if (args.length == 3) {          String tmpIpAddress=NicUtil.getIpAddress(args[1],0,args[2],false);          if (tmpIpAddress != null)           ipAddress=tmpIpAddress;        }      } else {        ipAddress="NIC_UTIL_FAILURE";        System.out.println("NicUtil Failure: unexpected number of " + "arguments (" + args.length + ")");      }    }  } catch (  Throwable t) {    ipAddress="NIC_UTIL_FAILURE";    t.printStackTrace();  }  System.out.println(ipAddress);}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiFileChooserUI();  return MultiLookAndFeel.createUIs(mui,((MultiFileChooserUI)mui).uis,a);}  }
class C{  public Offset loadOffset(Offset offset){  return new Offset(loadArchitecturalWord(offset));}  }
class C{  public static String quoteString(String orig,String quote){  return quote + orig + quote;}  }
class C{  @GET @Path("no_produces1") public String noProduces1(){  return "hello.jsp";}  }
class C{  public ImageFetcher(Context context){  super(context);  setParams(new ImageFetcherParams());}  }
class C{  protected void doStateScouting(){  if (r.nextInt(5) == 0) {    turnBy(r.nextInt(40) - 20);  }  doStepOutgoing(null);  foundSource();  if (nectarLoad <= nectarForReturn) {    forgetSource(Color.white,State.returnWithoutInfo);  }}  }
class C{  private void onOrderClicked(){  String coffee;  String message;  String number=etNumber.getText().toString();  boolean cream=chkCream.isChecked();  boolean sugar=chkSugar.isChecked();  if (optExpresso.isChecked()) {    coffee="Expresso";  } else   if (optColombian.isChecked()) {    coffee="Colombian";  } else {    coffee="Decaf";  }  if (cream && sugar) {    message=coffee + " with cream and sugar.";  } else   if (cream) {    message=coffee + " with cream.";  } else   if (sugar) {    message=coffee + " with sugar.";  } else {    message=coffee + ".";  }  message="Order no: " + number + ".\n"+ message;  showMessage(message);}  }
class C{  public void saveToFile(File temp,File destFile) throws IOException {  FileOutputStream stream=null;  lock.lock();  try {    stream=new FileOutputStream(temp);    saveToFileStream(stream);    stream.flush();    stream.getFD().sync();    stream.close();    stream=null;    if (Utils.isWindows()) {      File canonical=destFile.getCanonicalFile();      if (canonical.exists() && !canonical.delete())       throw new IOException("Failed to delete canonical wallet file for replacement with autosave");      if (temp.renameTo(canonical))       return;      throw new IOException("Failed to rename " + temp + " to "+ canonical);    } else     if (!temp.renameTo(destFile)) {      throw new IOException("Failed to rename " + temp + " to "+ destFile);    }  } catch (  RuntimeException e) {    log.error("Failed whilst saving wallet",e);    throw e;  } finally {    lock.unlock();    if (stream != null) {      stream.close();    }    if (temp.exists()) {      log.warn("Temp file still exists after failed save.");    }  }}  }
class C{  String p2state(){  StateBuilder state=new StateBuilder(project);  state.add("ideDir",getIdeDir());  state.add("p2",p2);  state.addFile("icon",icon);  state.addFile("splash",splash);  state.add("name",name);  state.add("perspective",perspective);  return state.toString();}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  private void processRunCompletedTag(String identifier){  Pattern timePattern=Pattern.compile(".*\\((\\d+) ms total\\)");  Matcher time=timePattern.matcher(identifier);  if (time.find()) {    try {      mTotalRunTime=Long.parseLong(time.group(1));    } catch (    NumberFormatException e) {      Log.e(LOG_TAG,"Unable to determine the total running time, received: " + time.group(1));    }  }  reportTestRunEnded();  mTestRunInProgress=false;}  }
class C{  public static boolean isCSSURICharacter(char c){  return c >= 128 || ((URI[c >> 5] & (1 << (c & 0x1F))) != 0);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static IdentityClassNameRewriter instance(){  return theInstance;}  }
class C{  public boolean hasName(){  return getName() != null;}  }
class C{  private static final String toUrlEncoded(String str){  return str.replaceAll("=","%3D");}  }
class C{  public static void interfaceClass(String className){  throw new IllegalArgumentException(MSG.INSTANCE.message(illegalArgumentException1,className));}  }
class C{  @Inline @Entrypoint public static void addressFieldWrite(Object ref,Address value,Offset offset,int locationMetadata){  if (NEEDS_ADDRESS_GC_WRITE_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    Selected.Mutator.get().addressWrite(src,src.toAddress().plus(offset),value,offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @DSVerified @DSBan(DSCat.DROIDSAFE_INTERNAL) public static void modelActivity(android.app.Activity activity){  if (mApplication != null)   activity.setApplication(mApplication);  Bundle b=new Bundle();  activity.performCreate(b,context);  activity.onAttachedToWindow();  activity.onWindowFocusChanged(true);  activity.onBackPressed();  activity.onContentChanged();  activity.onCreateDescription();  activity.onLowMemory();  activity.onRetainNonConfigurationInstance();  activity.onUserInteraction();  activity.onConfigurationChanged(new Configuration());  activity.droidsafeOnSavedInstanceState(b);  activity.droidsafeOnResume();  activity.droidsafeOnPause();  activity.droidsafeSubActivityCallbackHook();  activity.droidsafeOnStop();  activity.droidsafeOnRestart();  activity.droidsafeOnDestroy();  activity.droidsafePerformRestoreInstanceState(b);  activity.onDetachedFromWindow();}  }
class C{  boolean insert(BinarySearchTreeNode<E> item){  if (this.root == null) {    this.root=item;    this.size++;    return true;  } else {    return this.insert(item,this.root);  }}  }
class C{  private PlaceInfo fillLocalInfo(final Processor P,final Place where,final Converter env,final int lastEdit){  pushScope("add to scope");  try {    for (    final Shadow<PsiPackage> spkg : P.packages) {      final PsiPackage pkg=spkg.e;      final Item ipkg=env.addContainer(pkg);      scopeItems.put(ipkg,spkg.shadowingPriority);    }    for (    final Shadow<PsiClass> scls : P.classes) {      final PsiClass cls=scls.e;      final Item icls=env.addClass(cls);      scopeItems.put(icls,scls.shadowingPriority);    }    for (    final Shadow<PsiMethod> smethod : P.methods) {      final PsiMethod method=smethod.e;      final Item imethod=env.addMethod(method);      if (!(imethod instanceof ConstructorItem)) {        scopeItems.put(imethod,smethod.shadowingPriority);      }    }    for (    final Shadow<PsiVariable> svar : P.variables) {      final PsiVariable var=svar.e;      if (var instanceof PsiField) {        final Item ivar=env.addField((PsiField)var);        scopeItems.put(ivar,svar.shadowingPriority);      } else {        final Item i=env.addLocal(var);        scopeItems.put(i,svar.shadowingPriority);      }    }    localItems.addAll(env.items.values());  }  finally {    popScope();  }  ParentItem placeItem=null;  boolean inside_continuable=false;  boolean inside_breakable=false;  boolean inStatic=false;  PsiElement place=where.place;  pushScope("walk up");  try {    while (place != null) {      if (placeItem != null) {        if (place instanceof PsiLabeledStatement) {          final PsiLabeledStatement lab=(PsiLabeledStatement)place;          final boolean continuable=!(lab instanceof PsiSwitchStatement);          localItems.add(new Label(lab.getLabelIdentifier().getText(),continuable));        }        if (place instanceof PsiSwitchStatement) {          inside_breakable=true;        }        if (place instanceof PsiLoopStatement) {          inside_breakable=true;          inside_continuable=true;        }      }      if (!inStatic && place instanceof PsiClass && !((PsiClass)place).isInterface()) {        final ClassItem c=(ClassItem)env.addClass((PsiClass)place);        assert scopeItems.containsKey(c);        final int p=scopeItems.get(c);        final ThisItem ti=new ThisItem(c);        localItems.add(ti);        scopeItems.put(ti,p);        localItems.add(ti.up());        scopeItems.put(ti.up(),p);      }      if ((place instanceof PsiMethod || place instanceof PsiClass) && ((PsiModifierListOwner)place).hasModifierProperty(PsiModifier.STATIC))       inStatic=true;      if (place instanceof PsiMethod || place instanceof PsiClass || place instanceof PsiPackage) {        if (placeItem == null) {          placeItem=(ParentItem)env.lookup(place);          assert placeItem != null : "cannot find placeItem " + place + ", possibly in anonymous local class";        }      } else       if (place instanceof PsiJavaFile) {        final PsiPackage pkg=Place.getPackage((PsiJavaFile)place,env.project);        if (pkg == null) {          if (placeItem == null)           placeItem=LocalPkg$.MODULE$;        } else {          if (placeItem == null) {            assert env.knows(pkg);            placeItem=env.addContainer(pkg);          }        }        break;      }      place=place.getParent();    }    assert placeItem != null;  }  finally {    popScope();  }  log("environment (" + localItems.size() + " local items, "+ scopeItems.size()+ " in scope) taken inside "+ placeItem);  return Environment.PlaceInfoJava(placeItem,where.place,inside_breakable,inside_continuable,lastEdit);}  }
class C{  private static boolean isDefaultPartition(IDocument document,int position,String partitioning){  Assert.isTrue(position >= 0);  Assert.isTrue(position <= document.getLength());  try {    ITypedRegion region=TextUtilities.getPartition(document,partitioning,position,false);    return region.getType().equals(IDocument.DEFAULT_CONTENT_TYPE);  } catch (  BadLocationException e) {  }  return false;}  }
class C{  public void testFinishRecord(){  AbstractThrottle instance=new AbstractThrottleImpl();  instance.finishRecord();}  }
class C{  @Override public void doFrame(long frameTimeNanos){  if (isPaused.get() && !isRunningTasks.get()) {    return;  }  long frameTimeMillis=frameTimeNanos / 1000000;synchronized (mTimerGuard) {    while (!mTimers.isEmpty() && mTimers.peek().mTargetTime < frameTimeMillis) {      Timer timer=mTimers.poll();      WritableArray timersForContext=mTimersToCall.get(timer.mExecutorToken);      if (timersForContext == null) {        timersForContext=Arguments.createArray();        mTimersToCall.put(timer.mExecutorToken,timersForContext);      }      timersForContext.pushInt(timer.mCallbackID);      if (timer.mRepeat) {        timer.mTargetTime=frameTimeMillis + timer.mInterval;        mTimers.add(timer);      } else {        SparseArray<Timer> timers=mTimerIdsToTimers.get(timer.mExecutorToken);        if (timers != null) {          timers.remove(timer.mCallbackID);          if (timers.size() == 0) {            mTimerIdsToTimers.remove(timer.mExecutorToken);          }        }      }    }  }  for (  Map.Entry<ExecutorToken,WritableArray> entry : mTimersToCall.entrySet()) {    getReactApplicationContext().getJSModule(entry.getKey(),JSTimersExecution.class).callTimers(entry.getValue());  }  mTimersToCall.clear();  Assertions.assertNotNull(mReactChoreographer).postFrameCallback(ReactChoreographer.CallbackType.TIMERS_EVENTS,this);}  }
class C{  @Deprecated public static double[] readDoubles(String filename){  return new In(filename).readAllDoubles();}  }
class C{  public List<byte[]> sort(final byte[] key){  checkIsInMulti();  client.sort(key);  return client.getBinaryMultiBulkReply();}  }
class C{  LiveSet with(Declaration d){  return with(d.getIdentifierName(),ScopeAnalyzer.definingScopeForNode(d));}  }
class C{  public ByteString md5(){  return digest("MD5");}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private static final PipelineOp addOrderBy(PipelineOp left,final QueryBase queryBase,final OrderByNode orderBy,final AST2BOpContext ctx){  final Properties queryHints=queryBase.getQueryHints();  final Set<IVariable<IV>> vars=new LinkedHashSet<IVariable<IV>>();  final ISortOrder<IV>[] sortOrders=new ISortOrder[orderBy.size()];  final Iterator<OrderByExpr> it=orderBy.iterator();  for (int i=0; it.hasNext(); i++) {    final OrderByExpr orderByExpr=it.next();    IValueExpression<?> expr=orderByExpr.getValueExpression();    if (!(expr instanceof IVariableOrConstant<?> && !(expr instanceof IBind))) {      expr=new Bind(Var.var("--anon" + ctx.nextId()),expr);    }    if (expr instanceof IVariable<?>) {      vars.add((IVariable<IV>)expr);    } else {      StaticAnalysis.gatherVarsToMaterialize(expr,vars);    }    sortOrders[i]=new SortOrder(expr,orderByExpr.isAscending());  }  final int sortId=ctx.nextId();  left=addMaterializationSteps2(left,sortId,vars,queryHints,ctx);  left=applyQueryHints(new MemorySortOp(leftOrEmpty(left),NV.asMap(new NV[]{new NV(MemorySortOp.Annotations.BOP_ID,sortId),new NV(MemorySortOp.Annotations.SORT_ORDER,sortOrders),new NV(MemorySortOp.Annotations.VALUE_COMPARATOR,new IVComparator()),new NV(MemorySortOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(MemorySortOp.Annotations.PIPELINED,true),new NV(MemorySortOp.Annotations.MAX_PARALLEL,1),new NV(MemorySortOp.Annotations.REORDER_SOLUTIONS,false),new NV(MemorySortOp.Annotations.LAST_PASS,true)})),queryHints,ctx);  return left;}  }
class C{  public int[] values(){  crop();  return data;}  }
class C{  public DateTimeZone toDateTimeZone(String id,boolean outputID){  if (id == null) {    throw new IllegalArgumentException();  }  ArrayList<Transition> transitions=new ArrayList<Transition>();  DSTZone tailZone=null;  long millis=Long.MIN_VALUE;  int saveMillis=0;  int ruleSetCount=iRuleSets.size();  for (int i=0; i < ruleSetCount; i++) {    RuleSet rs=iRuleSets.get(i);    Transition next=rs.firstTransition(millis);    if (next == null) {      continue;    }    addTransition(transitions,next);    millis=next.getMillis();    saveMillis=next.getSaveMillis();    rs=new RuleSet(rs);    while ((next=rs.nextTransition(millis,saveMillis)) != null) {      if (addTransition(transitions,next)) {        if (tailZone != null) {          break;        }      }      millis=next.getMillis();      saveMillis=next.getSaveMillis();      if (tailZone == null && i == ruleSetCount - 1) {        tailZone=rs.buildTailZone(id);      }    }    millis=rs.getUpperLimit(saveMillis);  }  if (transitions.size() == 0) {    if (tailZone != null) {      return tailZone;    }    return buildFixedZone(id,"UTC",0,0);  }  if (transitions.size() == 1 && tailZone == null) {    Transition tr=transitions.get(0);    return buildFixedZone(id,tr.getNameKey(),tr.getWallOffset(),tr.getStandardOffset());  }  PrecalculatedZone zone=PrecalculatedZone.create(id,outputID,transitions,tailZone);  if (zone.isCachable()) {    return CachedDateTimeZone.forZone(zone);  }  return zone;}  }
class C{  public void tagDefineBitsJPEG2(int id,byte[] data) throws IOException {  startTag(TAG_DEFINEBITSJPEG2,id,true);  out.write(data);  completeTag();}  }
class C{  public boolean isEmpty(){  return count == 0;}  }
class C{  private void validatePortConnectivity(ExportGroup exportGroup,List<Initiator> initiators){  Map<URI,Map<URI,Integer>> storageMap=ExportUtils.getStorageToVolumeMap(exportGroup,false,_dbClient);  for (  URI storage : storageMap.keySet()) {    StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storage);    List<URI> varrays=ExportUtils.getVarraysForStorageSystemVolumes(exportGroup,storage,_dbClient);    for (    Initiator initiator : initiators) {      if (!hasConnectivityToSystem(storageSystem,varrays,initiator)) {        throw APIException.badRequests.initiatorNotConnectedToStorage(initiator.toString(),storageSystem.getNativeGuid());      }    }  }}  }
class C{  @Override protected void initData(){}  }
class C{  public Object echo(Object value){  return value;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public ParsedQuery(String sourceString,TupleExpr tupleExpr,Dataset dataset){  this(sourceString,tupleExpr);  setDataset(dataset);}  }
class C{  public ConcatExpression add(String propertyName){  this.getChildren().add(new PropertyValueExpression(propertyName));  return this;}  }
class C{  @Override public List<T> findAllBy(final String query,final Object... params){  return persistenceService.findAllBy(query,params);}  }
class C{  public Stream<RayTraceBlockResult> rayTraceBlocks(World world){  return rayTraceBlocks(IntStream.range(0,(int)distance + 1).mapToObj(null).flatMap(null).distinct().map(null).filter(null).map(null));}  }
class C{  public static int mergeModifiers(int m1,int m2){  return m1 | m2;}  }
class C{  @Override protected void onSaveInstanceState(final Bundle outState){  Log.d(DEBUG_TAG,"onSaveInstaceState");  super.onSaveInstanceState(outState);  outState.putInt(CURRENTITEM,mViewPager.getCurrentItem());  outState.putBoolean(PANELAYOUT,usePaneLayout);}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  public void testCompare22To22() throws Exception {  assertTrue(WebXmlVersion.V2_2.compareTo(WebXmlVersion.V2_2) == 0);}  }
class C{  public boolean deleteTrack(Track track){synchronized (tracks) {    return tracks.removeElement(track);  }}  }
class C{  private void readContentSpec() throws IOException, XmlPullParserException {  skip();  int c=peekCharacter();  if (c == '(') {    int depth=0;    do {      if (c == '(') {        depth++;      } else       if (c == ')') {        depth--;      } else       if (c == -1) {        throw new XmlPullParserException("Unterminated element content spec",this,null);      }      position++;      c=peekCharacter();    } while (depth > 0);    if (c == '*' || c == '?' || c == '+') {      position++;    }  } else   if (c == EMPTY[0]) {    read(EMPTY);  } else   if (c == ANY[0]) {    read(ANY);  } else {    throw new XmlPullParserException("Expected element content spec",this,null);  }}  }
class C{  public boolean isPanXEnabled(){  return mPanXEnabled;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:04.907 -0500",hash_original_method="49EB4E4C3BC63D2BEAA8F5D24053BB96",hash_generated_method="6316FE0C28F71E43C5CEBED904127F25") public boolean isMeasureWithLargestChildEnabled(){  return mUseLargestChild;}  }
class C{  @Override public void begin(int type){  this.cc.tessBegin(type);}  }
class C{  public static void writeStringToFile(Path file,String text) throws IOException {  byte[] buf=text.getBytes(StandardCharsets.UTF_8);  Files.write(file,buf);}  }
class C{  public static <T>T max(Iterator<T> self){  return max((Iterable<T>)toList(self));}  }
class C{  public void clearAll(){  if (items != null) {    items.clear();  }  if (emptyItems != null) {    emptyItems.clear();  }}  }
class C{  public static void LDC2_W(double x){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.LDC2_W(x);  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  public E peek(){  return list[size - 1];}  }
class C{  public StateMachineTestPlan<S,E> build(){  return new StateMachineTestPlan<S,E>(stateMachines,steps,defaultAwaitTime);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.724 -0500",hash_original_method="7307A74E42B27B76827D43357DA8B367",hash_generated_method="AF19ECCE81B80C3183B5B4B3820F72D8") private SipAddress(){}  }
class C{  public void addEntityModifiersByString(EntityLivingBase entity,String savedMods){  if (!getIsRareEntity(entity)) {    MobModifier mod=stringToMobModifiers(savedMods);    if (mod != null) {      proxy.getRareMobs().put(entity,mod);      mod.onSpawningComplete(entity);      mod.setHealthAlreadyHacked(entity);    } else {      System.err.println("Infernal Mobs error, could not instantiate modifier " + savedMods);    }  }}  }
class C{  private void socksRequestConnection(InetAddress applicationServerAddress,int applicationServerPort) throws IOException {  socksSendRequest(Socks4Message.COMMAND_CONNECT,applicationServerAddress,applicationServerPort);  Socks4Message reply=socksReadReply();  if (reply.getCommandOrResult() != Socks4Message.RETURN_SUCCESS) {    throw new IOException(reply.getErrorString(reply.getCommandOrResult()));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:07.619 -0500",hash_original_method="53DC6FE247829A3F8E1E61F886EC8A69",hash_generated_method="65643C99224ACA0B92F439A799746A56") public void disconnect(){  if (isClosed() || !isConnected()) {    return;  }  impl.disconnect();  address=null;  port=-1;  isConnected=false;}  }
class C{  public Interval copy(){  return new Interval(start,end);}  }
class C{  private void broadcastNewFile(Uri nativeUri){  Intent intent=new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,nativeUri);  context.sendBroadcast(intent);}  }
class C{  IceControlAttribute(boolean isControlling){  super(isControlling ? ICE_CONTROLLING : ICE_CONTROLLED);  this.isControlling=isControlling;}  }
class C{  public void coreEventOnFolderContentChanged(final FolderContentChangedEvent e){  refresh();}  }
class C{  public static ReadableByteChannel newChannel(InputStream inputStream){  return new InputStreamChannel(inputStream);}  }
class C{  public AbTaskItem(){  super();}  }
class C{  static int[] uniquify(int[] ints){  IntSet iset=new IntSet();  for (  int i : ints) {    iset.add(i);  }  return iset.toIntArray();}  }
class C{  public void reload(String name){  SolrCore core=solrCores.getCoreFromAnyList(name,false);  if (core == null)   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"No such core: " + name);  CoreDescriptor cd=core.getCoreDescriptor();  try {    solrCores.waitAddPendingCoreOps(name);    ConfigSet coreConfig=coreConfigService.getConfig(cd);    log.info("Reloading SolrCore '{}' using configuration from {}",cd.getName(),coreConfig.getName());    SolrCore newCore=core.reload(coreConfig);    registerCore(name,newCore,false,false);  } catch (  SolrCoreState.CoreIsClosedException e) {    throw e;  }catch (  Exception e) {    coreInitFailures.put(cd.getName(),new CoreLoadFailure(cd,e));    throw new SolrException(ErrorCode.SERVER_ERROR,"Unable to reload core [" + cd.getName() + "]",e);  } finally {    solrCores.removeFromPendingOps(name);  }}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  MessageResources rsc=(MessageResources)super.getServlet().getServletContext().getAttribute(Globals.MESSAGES_KEY);  if (op.equals(rsc.getMessage("button.deleteSubjectArea"))) {    SubjectArea sa=new SubjectAreaDAO().get(getUniqueId());    if (sa.hasOfferedCourses()) {      errors.add("uniqueid",new ActionMessage("errors.generic","A subject area with offered classes cannot be deleted"));    }  } else {    if (abbv == null || abbv.trim().length() == 0) {      errors.add("abbv",new ActionMessage("errors.required","Abbreviation"));    }    if (title == null || title.trim().length() == 0) {      errors.add("title",new ActionMessage("errors.required","Title"));    }    if (department == null || department.longValue() <= 0) {      errors.add("department",new ActionMessage("errors.required","Department"));    }    if (errors.size() == 0) {      Long sessionId=HttpSessionContext.getSessionContext(request.getSession().getServletContext()).getUser().getCurrentAcademicSessionId();      SubjectArea sa=SubjectArea.findByAbbv(sessionId,abbv);      if (uniqueId == null && sa != null)       errors.add("abbv",new ActionMessage("errors.generic","A subject area with the abbreviation exists for the academic session"));      if (uniqueId != null && sa != null && !sa.getUniqueId().equals(uniqueId))       errors.add("abbv",new ActionMessage("errors.generic","A subject area with the abbreviation exists for the academic session"));    }  }  return errors;}  }
class C{  public void clearTabStops(){  tabstops.clear();}  }
class C{  public void addExcludedAttribute(final String elementName,final String attrName){  if ((elementName == null) || (elementName.trim().equals(""))) {    return;  }  if ((attrName == null) || (attrName.trim().equals(""))) {    return;  }  List attrNames=null;  if ((attrNames=(List)_excludedElementAttrsMap.get(elementName)) == null) {    attrNames=new ArrayList();  }  attrNames.add(attrName);  _excludedElementAttrsMap.put(elementName,attrNames);}  }
class C{  public void onClick(View view){  if (view.equals(btnOK)) {    Log.i(TAG,"User selected OK for class: " + currentSelection);    Intent intent=new Intent(this,TestsHarness.class);    intent.putExtra(SELECTED_APP_CLASS,currentSelection);    intent.putExtra(ENABLE_MOUSE_EVENTS,enableMouseEvents);    intent.putExtra(ENABLE_JOYSTICK_EVENTS,enableJoystickEvents);    startActivity(intent);  } else   if (view.equals(btnCancel)) {    Log.i(TAG,"User selected Cancel");    finish();  }}  }
class C{  public static byte[] toByteArray(InputStream in) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream(Math.max(32,in.available()));  copy(in,out);  return out.toByteArray();}  }
class C{  public RdKNNLeafEntry(DBID id,NumberVector vector,double knnDistance){  super(id,vector);  this.knnDistance=knnDistance;}  }
class C{  public EscapeHTML(){  super("text_transformation.escape_html",1);}  }
class C{  public boolean explain(){  return this.explain;}  }
class C{  public final void interrupt(){  int ngroupsSnapshot;  ThreadGroup[] groupsSnapshot;synchronized (this) {    checkAccess();    for (int i=0; i < nthreads; i++) {      threads[i].interrupt();    }    ngroupsSnapshot=ngroups;    if (groups != null) {      groupsSnapshot=Arrays.copyOf(groups,ngroupsSnapshot);    } else {      groupsSnapshot=null;    }  }  for (int i=0; i < ngroupsSnapshot; i++) {    groupsSnapshot[i].interrupt();  }}  }
class C{  private JTabbedPane createTabbedPane(final boolean isDefaultSettingsDialog,final boolean isCallgraph){  final JTabbedPane tab=new JTabbedPane();  addTab(tab,"Automatism",new CAutomatismPanel(m_settings,isDefaultSettingsDialog));  addTab(tab,"Edges",new CEdgePanel(m_settings));  addTab(tab,"Hierarchic",new CHierarchicPanel(m_settings));  addTab(tab,"Orthogonal",new COrthogonalPanel(m_settings));  addTab(tab,"Circular",new CCircularPanel(m_settings));  if (!isCallgraph) {    addTab(tab,"Disassembly",new CDisassemblyPanel(m_settings));  }  addTab(tab,"Controls",new CControlsPanel(m_settings));  addTab(tab,"Miscellaneous",new CMiscPanel(m_settings,!isDefaultSettingsDialog || isCallgraph));  tab.setPreferredSize(new Dimension(FRAME_WIDTH,FRAME_HEIGHT));  return tab;}  }
class C{  public K maximumKey(){  return root.maximum()._1();}  }
class C{  public synchronized void onJoinFinished(){  joinFinishedTs=U.currentTimeMillis();}  }
class C{  public void syncTraktMovieCollection(){  if (!isEnabled()) {    return;  }  syncTraktMovieCollection(new ArrayList<>(MovieList.getInstance().getMovies()));}  }
class C{  public static <T>T orderAccesses(T ref){  theVolatile=0;  return ref;}  }
class C{  public void addNativeChildAt(ReactShadowNode child,int nativeIndex){  Assertions.assertCondition(!mIsLayoutOnly);  Assertions.assertCondition(!child.mIsLayoutOnly);  if (mNativeChildren == null) {    mNativeChildren=new ArrayList<>(4);  }  mNativeChildren.add(nativeIndex,child);  child.mNativeParent=this;}  }
class C{  public Collection<MailAddress> match(Mail mail) throws MessagingException {  Exception anException=null;  try {    MimeMessage message=mail.getMessage();    Object content;    if (message.getContentType() == null) {      return null;    }    content=message.getContent();    if (content instanceof Multipart) {      Multipart multipart=(Multipart)content;      for (int i=0; i < multipart.getCount(); i++) {        try {          Part part=multipart.getBodyPart(i);          if (isAttachment(part)) {            return mail.getRecipients();          }        } catch (        MessagingException e) {          anException=e;        }      }    } else {      if (isAttachment(message)) {        return mail.getRecipients();      }    }  } catch (  Exception e) {    anException=e;  }  if (anException != null) {    throw new MessagingException("Malformed message",anException);  }  return null;}  }
class C{  private void addMenuItems(JMenu menu){  Locale locale=getRootPane().getLocale();  JMenuItem mi=menu.add(restoreAction);  int mnemonic=MetalUtils.getInt("MetalTitlePane.restoreMnemonic",-1);  if (mnemonic != -1) {    mi.setMnemonic(mnemonic);  }  mi=menu.add(iconifyAction);  mnemonic=MetalUtils.getInt("MetalTitlePane.iconifyMnemonic",-1);  if (mnemonic != -1) {    mi.setMnemonic(mnemonic);  }  if (Toolkit.getDefaultToolkit().isFrameStateSupported(Frame.MAXIMIZED_BOTH)) {    mi=menu.add(maximizeAction);    mnemonic=MetalUtils.getInt("MetalTitlePane.maximizeMnemonic",-1);    if (mnemonic != -1) {      mi.setMnemonic(mnemonic);    }  }  menu.add(new JSeparator());  mi=menu.add(closeAction);  mnemonic=MetalUtils.getInt("MetalTitlePane.closeMnemonic",-1);  if (mnemonic != -1) {    mi.setMnemonic(mnemonic);  }}  }
class C{  public static void disableChannelWarnings(){  ignoreChannelWarnings.set(true);}  }
class C{  public void testPrivateMode() throws Exception {  processTest(DeploymentMode.PRIVATE);}  }
class C{  public void populateInitiator(Initiator initiator,BaseInitiatorParam param){  initiator.setInitiatorPort(param.getPort());  initiator.setInitiatorNode(param.getNode());  initiator.setProtocol(param.getProtocol());  if (StringUtils.isEmpty(initiator.getLabel()) && StringUtils.isEmpty(param.getName())) {    initiator.setLabel(initiator.getInitiatorPort());  } else   if (param.getName() != null) {    initiator.setLabel(param.getName());  }}  }
class C{  private static void notifyDrawable(Drawable drawable,final boolean isDisplayed){  if (drawable instanceof RecyclingBitmapDrawable) {    ((RecyclingBitmapDrawable)drawable).setIsDisplayed(isDisplayed);  } else   if (drawable instanceof LayerDrawable) {    LayerDrawable layerDrawable=(LayerDrawable)drawable;    for (int i=0, z=layerDrawable.getNumberOfLayers(); i < z; i++) {      notifyDrawable(layerDrawable.getDrawable(i),isDisplayed);    }  }}  }
class C{  @SuppressWarnings("unchecked") public Set<VarNode> dropVars(){  return (Set<VarNode>)super.getProperty(Annotations.DROP_VARS);}  }
class C{  public DefaultMapEntry(final Object key,final Object value){  super(key,value);}  }
class C{  public void updateLayerStatus(LayerStatusEvent evt){  fireStatusUpdate(evt);}  }
class C{  public BreakpointCondition(final String condition,final ConditionNode root){  this.condition=condition;  this.root=root;}  }
class C{  public CompositeDataProvider(@NotNull DataProvider<? extends Comparable<?>,?>... providers){  for (int i=0; i < providers.length; i++) {    DataProvider<? extends Comparable<?>,?> provider=providers[i];    if (provider.getData() == null) {      providers[i]=null;    }  }  myProviders=providers;  sort();}  }
class C{  @Override public void updateStatus(JobContext jobContext) throws Exception {  CloseableIterator<CIMObjectPath> iterator=null;  DbClient dbClient=jobContext.getDbClient();  JobStatus jobStatus=getJobStatus();  try {    if (jobStatus == JobStatus.IN_PROGRESS) {      return;    }    int volumeCount=0;    String opId=getTaskCompleter().getOpId();    StringBuilder logMsgBuilder=new StringBuilder(String.format("Updating status of job %s to %s",opId,jobStatus.name()));    CIMConnectionFactory cimConnectionFactory=jobContext.getCimConnectionFactory();    WBEMClient client=getWBEMClient(dbClient,cimConnectionFactory);    iterator=client.associatorNames(getCimJob(),null,SmisConstants.CIM_STORAGE_VOLUME,null,null);    Calendar now=Calendar.getInstance();    if (jobStatus == JobStatus.SUCCESS || jobStatus == JobStatus.FAILED || jobStatus == JobStatus.FATAL_ERROR) {      SmisUtils.updateStoragePoolCapacity(dbClient,client,_storagePool);      StoragePool pool=dbClient.queryObject(StoragePool.class,_storagePool);      StringMap reservationMap=pool.getReservedCapacityMap();      for (      URI volumeId : getTaskCompleter().getIds()) {        reservationMap.remove(volumeId.toString());      }      dbClient.persistObject(pool);    }    if (jobStatus == JobStatus.SUCCESS) {      List<URI> volumes=new ArrayList<URI>();      while (iterator.hasNext()) {        CIMObjectPath volumePath=iterator.next();        CIMProperty<String> deviceID=(CIMProperty<String>)volumePath.getKey(SmisConstants.CP_DEVICE_ID);        String nativeID=deviceID.getValue();        URI volumeId=getTaskCompleter().getId(volumeCount++);        volumes.add(volumeId);        persistVolumeNativeID(dbClient,volumeId,nativeID,now);        processVolume(jobContext,volumePath,nativeID,volumeId,client,dbClient,logMsgBuilder,now);      }      addVolumesToConsistencyGroup(jobContext,volumes);    } else     if (jobStatus == JobStatus.FAILED) {      if (iterator.hasNext()) {        while (iterator.hasNext()) {          CIMObjectPath volumePath=iterator.next();          CIMProperty<String> deviceID=(CIMProperty<String>)volumePath.getKey(SmisConstants.CP_DEVICE_ID);          String nativeID=deviceID.getValue();          URI volumeId=getTaskCompleter().getId(volumeCount++);          if ((nativeID != null) && (nativeID.length() != 0)) {            persistVolumeNativeID(dbClient,volumeId,nativeID,now);            processVolume(jobContext,volumePath,nativeID,volumeId,client,dbClient,logMsgBuilder,now);          } else {            logMsgBuilder.append("\n");            logMsgBuilder.append(String.format("Task %s failed to create volume: %s",opId,volumeId));            Volume volume=dbClient.queryObject(Volume.class,volumeId);            volume.setInactive(true);            dbClient.persistObject(volume);          }        }      } else {        for (        URI id : getTaskCompleter().getIds()) {          logMsgBuilder.append("\n");          logMsgBuilder.append(String.format("Task %s failed to create volume: %s",opId,id.toString()));          Volume volume=dbClient.queryObject(Volume.class,id);          volume.setInactive(true);          dbClient.persistObject(volume);        }      }    }    _log.info(logMsgBuilder.toString());  } catch (  Exception e) {    _log.error("Caught an exception while trying to updateStatus for SmisCreateVolumeJob",e);    setPostProcessingErrorStatus("Encountered an internal error during volume create job status processing : " + e.getMessage());  } finally {    super.updateStatus(jobContext);    if (iterator != null) {      iterator.close();    }  }}  }
class C{  public boolean isExcluded(IResource resource){  String filename=getRelativePath(resource).toString();  for (  String exclude : getDefaultOrDefinedExclude()) {    if (filename.startsWith(exclude)) {      return true;    }  }  return false;}  }
class C{  public void log(String message,Level level,Object... arguments){  this.bot.log(this,message,level,arguments);}  }
class C{  protected Long wrapKey(long k){  return new Long(k);}  }
class C{  private ResultPointsAndTransitions transitionsBetween(ResultPoint from,ResultPoint to){  int fromX=(int)from.getX();  int fromY=(int)from.getY();  int toX=(int)to.getX();  int toY=(int)to.getY();  boolean steep=Math.abs(toY - fromY) > Math.abs(toX - fromX);  if (steep) {    int temp=fromX;    fromX=fromY;    fromY=temp;    temp=toX;    toX=toY;    toY=temp;  }  int dx=Math.abs(toX - fromX);  int dy=Math.abs(toY - fromY);  int error=-dx / 2;  int ystep=fromY < toY ? 1 : -1;  int xstep=fromX < toX ? 1 : -1;  int transitions=0;  boolean inBlack=image.get(steep ? fromY : fromX,steep ? fromX : fromY);  for (int x=fromX, y=fromY; x != toX; x+=xstep) {    boolean isBlack=image.get(steep ? y : x,steep ? x : y);    if (isBlack != inBlack) {      transitions++;      inBlack=isBlack;    }    error+=dy;    if (error > 0) {      if (y == toY) {        break;      }      y+=ystep;      error-=dx;    }  }  return new ResultPointsAndTransitions(from,to,transitions);}  }
class C{  @Override public void write(byte[] data,final int offset,final int length){  currentBlock=getOrCreateCurrentBlock();  try {    currentBlock.write(data,offset,length);  } catch (  Block.OutOfBlockBufferMemoryException e) {    reallocateBlock();    currentBlock.write(data,offset,length);  }  size+=length;}  }
class C{  public Poisson(){  this(1);}  }
class C{  public String createListSnapshotStep(Workflow workflow,String waitFor,StorageSystem storageSystem,List<URI> snapshotList) throws ControllerException {  URI storage=storageSystem.getId();  waitFor=workflow.createStep(CREATE_SNAPSHOTS_STEP_GROUP,"Create list snapshot",waitFor,storage,storageSystem.getSystemType(),this.getClass(),createListSnapshotMethod(storage,snapshotList,false,false),rollbackListSnapshotMethod(storage,snapshotList),null);  return waitFor;}  }
class C{  public static void main(final String[] args){  show(new Shell(Display.getDefault()),new Exception());}  }
class C{  @Override protected void prepareRequest(){}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  protected void clearValidationExceptions(){  validationExceptions.clear();}  }
class C{  public SVG12BridgeContext(UserAgent userAgent){  super(userAgent);}  }
class C{  public boolean columnExistsCaseSensitive(DatabaseMetaData dbMetaData,String tableName,String columnName) throws SQLException {  ResultSet rsTables=dbMetaData.getColumns(null,null,tableName,columnName);  try {    return rsTables.next();  }  finally {    closeJDBCResultSet(rsTables);  }}  }
class C{  public void onBackPressed(){  if (mCancelable) {    cancel();  }}  }
class C{  public long manhattanDistance(final java.awt.Point p){  return Math.abs((long)this.x - p.x) + Math.abs((long)this.y - p.y);}  }
class C{  public static String removeNamespace(String xmlSource) throws TransformerException {  TransformerFactory factory=TransformerFactory.newInstance();  InputStream xsltRemoveNamespace=XmlUtils.class.getResourceAsStream("/remove-namespace.xslt");  if (xsltRemoveNamespace == null)   throw new ExceptionInInitializerError(new FileNotFoundException("No XSLT resource is found!"));  Templates transformer=factory.newTemplates(new StreamSource(xsltRemoveNamespace));  ByteArrayOutputStream baos=new ByteArrayOutputStream();  Result result=new StreamResult(baos);  Source src=new StreamSource(new StringReader(xmlSource));  transformer.newTransformer().transform(src,result);  String newXml=baos.toString();  try {    xsltRemoveNamespace.close();    baos.close();  } catch (  IOException e) {  }  return newXml;}  }
class C{  @Override public String toString(){  StringBuilder builder=new StringBuilder(100).append(simpleName(instance.getClass())).append('{');  return JOINER.appendTo(builder,fieldString).append('}').toString();}  }
class C{  public static List<double[]> readCodeBook(InputStream in){  LinkedList<double[]> result=null;  try {    BufferedReader br=new BufferedReader(new InputStreamReader(in));    String line=null;    double[] buffer=new double[1024];    int numDimensions=0;    result=new LinkedList<double[]>();    while ((line=br.readLine()) != null) {      String[] d=line.split("\\s+");      numDimensions=0;      for (int i=0; i < d.length; i++) {        if (d[i].length() > 0) {          buffer[numDimensions]=Double.parseDouble(d[i]);          numDimensions++;        }      }      double[] r=new double[numDimensions];      System.arraycopy(buffer,0,r,0,numDimensions);      result.add(r);    }  } catch (  IOException e) {    e.printStackTrace();  }  return result;}  }
class C{  public final String toString(){  return TextIO.moveToUCIString(this);}  }
class C{  private void stopUi(){  if (DEBUG)   Log.d(TAG,"stopUi()");synchronized (mServiceRunningLock) {    if (mServiceRunning) {      Log.d(TAG,"Stopping Face Unlock");      try {        mService.stopUi();      } catch (      RemoteException e) {        Log.e(TAG,"Caught exception stopping Face Unlock: " + e.toString());      }      mServiceRunning=false;    } else {      if (DEBUG)       Log.d(TAG,"stopUi() attempted while not running");    }  }}  }
class C{  public static void reverse(boolean[] array){  if (array == null) {    return;  }  int i=0;  int j=array.length - 1;  boolean tmp;  while (j > i) {    tmp=array[j];    array[j]=array[i];    array[i]=tmp;    j--;    i++;  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] shapefiles;  int numFiles;  String outputFile;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry g1=null;  com.vividsolutions.jts.geom.Geometry g2=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputFile=args[1];  if ((inputFilesString == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  shapefiles=inputFilesString.split(";");  numFiles=shapefiles.length;  if (numFiles < 2) {    showFeedback("At least two input vector files must be specified.");    return;  }  try {    com.vividsolutions.jts.geom.Geometry[] recJTSGeometries=null;    ArrayList<com.vividsolutions.jts.geom.Geometry> inputGeometryList=new ArrayList<>();    com.vividsolutions.jts.geom.Geometry outputGeometry=null;    for (int k=0; k < numFiles; k++) {      ShapeFile input=new ShapeFile(shapefiles[k]);      shapeType=input.getShapeType();      numRecs=input.getNumberOfRecords();      if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {        showFeedback("This tool can only work for shapefiles of a " + "POLYLINE or POLYGON shape-type. Tool execution " + "ceased.");        return;      } else       if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {        outputShapeType=ShapeType.POLYLINE;      }      oneHundredthTotal=numRecs / 100;      progress=0;      n=0;      for (      ShapeFileRecord record : input.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            recJTSGeometries[a].setUserData(record.getRecordNumber());            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Loop " + (k + 1) + " of "+ numFiles+ ": Reading data:",progress);        }      }      if (k == 0) {        g1=factory.buildGeometry(inputGeometryList);        inputGeometryList.clear();      } else {        g2=factory.buildGeometry(inputGeometryList);        updateProgress("Performing operation (progress will not be updated):",-1);        try {          outputGeometry=g1.intersection(g2);        } catch (        Exception ex) {          outputGeometry=com.vividsolutions.jts.operation.overlay.snap.SnapOverlayOp.intersection(g1,g2);        }        g1=(com.vividsolutions.jts.geom.Geometry)outputGeometry.clone();        inputGeometryList.clear();      }    }    ShapeFile output=null;    DBFWriter writer=null;    if (outputGeometry instanceof GeometryCollection) {      com.vividsolutions.jts.geom.Geometry gN0=outputGeometry.getGeometryN(0);      if (gN0 instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POLYLINE) {        outputShapeType=ShapeType.POINT;      }      output=new ShapeFile(outputFile,outputShapeType);      output.setProjectionStringFromOtherShapefile(new ShapeFile(shapefiles[0]));      DBFField fields[]=new DBFField[1];      fields[0]=new DBFField();      fields[0].setName("FID");      fields[0].setDataType(DBFField.DBFDataType.NUMERIC);      fields[0].setFieldLength(10);      fields[0].setDecimalCount(0);      String DBFName=output.getDatabaseFile();      writer=new DBFWriter(new File(DBFName));      writer.setFields(fields);      int numGeometries=outputGeometry.getNumGeometries();      oneHundredthTotal=(int)(numGeometries / 100.0);      progress=0;      n=0;      FID=0;      for (int a=0; a < numGeometries; a++) {        com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);        if (gN instanceof LineString) {          LineString ls=(LineString)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts={0};          Coordinate[] coords=ls.getCoordinates();          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[1];          rowData[0]=(double)FID;          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (!Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[1];          rowData[0]=(double)FID;          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (!Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          writer.addRecord(rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POINT) {          com.vividsolutions.jts.geom.Point p=(com.vividsolutions.jts.geom.Point)gN;          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(p.getX(),p.getY());          output.addRecord(wbGeometry);          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          writer.addRecord(rowData);        } else {        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    } else {      showFeedback("An error was encountered when saving the output file.");      return;    }    output.write();    writer.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Document load(java.net.URL url) throws DOMTestLoadException {  try {    java.io.InputStream stream=url.openStream();    return (org.w3c.dom.Document)createDocument.invoke(domFactory,new Object[]{url.toString(),stream});  } catch (  InvocationTargetException ex) {    ex.printStackTrace();    throw new DOMTestLoadException(ex.getTargetException());  }catch (  Exception ex) {    ex.printStackTrace();    throw new DOMTestLoadException(ex);  }}  }
class C{  @Override public int hashCode(){  return (int)(milliseconds >>> 32) ^ (int)milliseconds;}  }
class C{  private void creatureCheck(int x,int y,String actionStr){  if (!isCreature(x,y)) {    String msg=String.format("Something tried to %s at " + "(%d, %d), but no creature exists at that spot.",actionStr,x,y);    throw new IllegalArgumentException(msg);  }}  }
class C{  public void configure(){  NceTrafficController tc=new NceTrafficController();  this.getSystemConnectionMemo().setNceTrafficController(tc);  tc.setAdapterMemo(this.getSystemConnectionMemo());  tc.connectPort(this);  this.getSystemConnectionMemo().configureCommandStation(NceTrafficController.OPTION_2006);  tc.setCmdGroups(NceTrafficController.CMDS_MEM | NceTrafficController.CMDS_AUI_READ | NceTrafficController.CMDS_PROGTRACK| NceTrafficController.CMDS_OPS_PGM| NceTrafficController.CMDS_USB| NceTrafficController.CMDS_NOT_USB| NceTrafficController.CMDS_CLOCK| NceTrafficController.CMDS_ALL_SYS);  tc.setUsbSystem(NceTrafficController.USB_SYSTEM_NONE);  this.getSystemConnectionMemo().configureManagers();  jmri.jmrix.nce.ActiveFlag.setActive();  sourceThread=new Thread(this);  sourceThread.setName("Nce Simulator");  sourceThread.setPriority(Thread.MIN_PRIORITY);  sourceThread.start();}  }
class C{  public void removeValue(String paymentProductFieldId){  if (paymentProductFieldId == null) {    throw new InvalidParameterException("Error removing value from PaymentRequest, paymentProductFieldId may not be null");  }  fieldValues.remove(paymentProductFieldId);}  }
class C{  public void breakpointReached(BreakpointEvent event){  println("Got BreakpointEvent - " + event);  try {    checkFrames(event.thread(),bpPlaces[bpCnt++]);    if (bpCnt >= bpPlaces.length) {      eventRequestManager().deleteAllBreakpoints();    }  } catch (  Exception exc) {    failure("FAIL: breakpoint checking threw " + exc);  }}  }
class C{  public static Parser<Character,String> string(String value){  Parser<Character,String> p=null;  return p.label(value);}  }
class C{  public boolean shouldSelectCell(EventObject anEvent){  return true;}  }
class C{  public static void logArticleRead(final Logger logger,final Task<Revision> article,final long time){  logger.logMessage(Level.INFO,"Read article\t" + Time.toClock(time) + "\t"+ article.toString());}  }
class C{  public void endVisit(CompilationUnit node){}  }
class C{  public CUDA_TEXTURE_DESC(){}  }
class C{  private void validate(Detail detail) throws Exception {  ParameterMap registry=scanner.getParameters();  List<Parameter> list=registry.getAll();  for (  Parameter parameter : list) {    Label label=resolve(parameter);    String path=parameter.getPath();    if (label == null) {      throw new ConstructorException("Parameter '%s' does not have a match in %s",path,detail);    }    validateParameter(label,parameter);  }  validateConstructors();}  }
class C{  public static void selectParentsOfSelection(final ZyGraph graph){  Preconditions.checkNotNull(graph,"IE01742: Graph argument can not be null");  final SelectableGraph<NaviNode> selectableGraph=SelectableGraph.wrap(graph);  if (graph.getSettings().getProximitySettings().getProximityBrowsingFrozen()) {    GraphHelpers.selectPredecessorsOfSelection(selectableGraph);  } else {    final Collection<INaviViewNode> rawNodes=GraphConverters.convert(graph.getSelectedNodes());    graph.selectNodes(GraphConverters.convert(graph,GraphAlgorithms.getPredecessors(rawNodes)),true);  }}  }
class C{  public static long[] invertI(long[] v){  for (int i=0; i < v.length; i++) {    v[i]=~v[i];  }  return v;}  }
class C{  private String fixFileName(String name){  if (normalizeNames) {    name=StringUtil.replaceAll(name,"/","_");    name=StringUtil.replaceAll(name,"\\","_");    name=StringUtil.replaceAll(name,"%","_");    name=StringUtil.replaceAll(name,"?","_");    name=StringUtil.replaceAll(name,"*","_");    name=StringUtil.replaceAll(name,":","_");    name=StringUtil.replaceAll(name,"=","_");  }  return name;}  }
class C{  public boolean isGroupTransfer(){  return mGroupTransfer;}  }
class C{  public boolean exists(String key){  return exists(key,false);}  }
class C{  public void updateArc(float latPoint,float lonPoint,float radius,float s,float e,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkArc.write(latPoint,lonPoint,radius,-1,-1,s,e,properties,link.dos);}  }
class C{  protected IndexImpl mutateAddIndex(TableUpdater mutator) throws IOException {  IndexBuilder index=mutator.getIndex();  JetFormat format=mutator.getFormat();  mutator.addTdefLen(format.SIZE_INDEX_INFO_BLOCK);  int nameByteLen=DBMutator.calculateNameLength(index.getName());  mutator.addTdefLen(nameByteLen);  ByteBuffer tableBuffer=loadCompleteTableDefinitionBufferForUpdate(mutator);  IndexImpl newIdx=null;  boolean success=false;  try {    ByteUtil.forward(tableBuffer,35);    tableBuffer.putInt(_logicalIndexCount + 1);    tableBuffer.position(format.SIZE_TDEF_HEADER + (_indexCount * format.SIZE_INDEX_DEFINITION));    ByteUtil.forward(tableBuffer,(_columns.size() * format.SIZE_COLUMN_DEF_BLOCK));    skipNames(tableBuffer,_columns.size());    ByteUtil.forward(tableBuffer,(_indexCount * format.SIZE_INDEX_COLUMN_BLOCK));    ByteUtil.forward(tableBuffer,(_logicalIndexCount * format.SIZE_INDEX_INFO_BLOCK));    int idxDefPos=tableBuffer.position();    ByteUtil.insertEmptyData(tableBuffer,format.SIZE_INDEX_INFO_BLOCK);    IndexImpl.writeDefinition(mutator,index,tableBuffer);    skipNames(tableBuffer,_logicalIndexCount);    ByteUtil.insertEmptyData(tableBuffer,nameByteLen);    writeName(tableBuffer,index.getName(),mutator.getCharset());    validateTableDefUpdate(mutator,tableBuffer);    tableBuffer.position(idxDefPos);    newIdx=new IndexImpl(tableBuffer,_indexDatas,format);    newIdx.setName(index.getName());    writeTableDefinitionBuffer(tableBuffer,_tableDefPageNumber,mutator,mutator.getNextPages());    success=true;  }  finally {    if (!success) {      _tableDefBufferH.invalidate();    }  }  ++_logicalIndexCount;  _indexes.add(newIdx);  completeTableMutation(tableBuffer);  return newIdx;}  }
class C{  private static Set<Integer> load(String filename){  LineNumberReader reader=IOTools.getReaderFromFile(filename);  Set<Integer> set=Collections.synchronizedSet(new HashSet<Integer>(20000));  try {    for (String line; (line=reader.readLine()) != null; ) {      set.add(Integer.parseInt(line.trim()));    }    reader.close();  } catch (  IOException e) {    throw new RuntimeException(e);  }  return set;}  }
class C{  public InputMethodHighlight(boolean selected,int state){  this(selected,state,0,null);}  }
class C{  public static void dumpStack(){  OSProcess.printStacks(0,false);}  }
class C{  public StringValue(short type,String s){  unitType=type;  value=s;}  }
class C{  public synchronized boolean isSettlementTransaction(Transaction tx){  try {    tx.verify();    tx.getInput(0).verify(multisigContract.getOutput(0));    return true;  } catch (  VerificationException e) {    return false;  }}  }
class C{  @Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){switch (requestCode) {case REQUEST_STORAGE_READ_ACCESS_PERMISSION:    if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {      pickFromGallery();    }  break;default :super.onRequestPermissionsResult(requestCode,permissions,grantResults);}}  }
class C{  private static List<LoadMetadataDetails> checkPreserveSegmentsPropertyReturnRemaining(List<LoadMetadataDetails> segments){  int numberOfSegmentsToBePreserved=0;  numberOfSegmentsToBePreserved=CarbonProperties.getInstance().getNumberOfSegmentsToBePreserved();  return CarbonDataMergerUtil.getValidLoadDetailsWithRetaining(segments,numberOfSegmentsToBePreserved);}  }
class C{  private void updateSkipRemindersSummary(String value){  if (mSkipReminders != null) {    int index=0;    CharSequence[] values=mSkipReminders.getEntryValues();    CharSequence[] entries=mSkipReminders.getEntries();    for (int value_i=0; value_i < values.length; value_i++) {      if (values[value_i].equals(value)) {        index=value_i;        break;      }    }    mSkipReminders.setSummary(entries[index].toString());    if (value == null) {      mSkipReminders.setValue(values[index].toString());    }  }}  }
class C{  public ThreadPoolContext(ScheduledExecutorService parent,Serializer serializer){  this.parent=Assert.notNull(parent,"parent");  this.serializer=Assert.notNull(serializer,"serializer");  runner=null;}  }
class C{  public PolynomialFunction integral(double value){  int n=coefficients.length + 1;  double coef[]=new double[n];  coef[0]=value;  for (int i=1; i < n; i++)   coef[i]=coefficients[i - 1] / i;  return new PolynomialFunction(coef);}  }
class C{  @Override public Object buildElementClone(Object attributeValue,Object parent,CacheKey parentCacheKey,Integer refreshCascade,AbstractSession cloningSession,boolean isExisting,boolean isFromSharedCache){  Object aggregateClone=buildClonePart(attributeValue,parent,parentCacheKey,refreshCascade,cloningSession,!isExisting);  if (aggregateClone != null && cloningSession.isUnitOfWork()) {    ClassDescriptor descriptor=getReferenceDescriptor(aggregateClone,cloningSession);    descriptor.getObjectChangePolicy().setAggregateChangeListener(parent,aggregateClone,(UnitOfWorkImpl)cloningSession,descriptor,getAttributeName());  }  return aggregateClone;}  }
class C{  public DataflowExampleUtils(DataflowPipelineOptions options,boolean isUnbounded) throws IOException {  this.options=options;  setupResourcesAndRunner(isUnbounded);}  }
class C{  public long copy(Path srcDir,Path destDir,List<String> copyAttributes) throws IOException {  Random random=new Random();  long randomLong=Math.abs(random.nextLong());  PathBuilder tmpDirPathBuilder=new PathBuilder(tmpDir).add("distcp_tmp");  for (  String attribute : copyAttributes) {    tmpDirPathBuilder.add(attribute);  }  Path distCpTmpDir=tmpDirPathBuilder.add(Long.toHexString(randomLong)).toPath();  PathBuilder logDirPathBuilder=new PathBuilder(tmpDir).add("distcp_logs");  for (  String attribute : copyAttributes) {    logDirPathBuilder.add(attribute);  }  Path distCpLogDir=logDirPathBuilder.add(Long.toHexString(randomLong)).toPath();  try {    DistCpWrapper distCpWrapper=new DistCpWrapper(conf);    DistCpWrapperOptions options=new DistCpWrapperOptions(srcDir,destDir,distCpTmpDir,distCpLogDir).setAtomic(true).setSyncModificationTimes(checkFileModificationTimes);    long copyJobTimeoutSeconds=conf.getLong(ConfigurationKeys.COPY_JOB_TIMEOUT_SECONDS,-1);    if (copyJobTimeoutSeconds > 0) {      options.setDistCpJobTimeout(copyJobTimeoutSeconds * 1000);    }    long bytesCopied=distCpWrapper.copy(options);    return bytesCopied;  } catch (  DistCpException e) {    throw new IOException(e);  }}  }
class C{  public static GTSWrapper clip(GTSWrapper wrapper,long from,long to){  GTSDecoder decoder=new GTSDecoder(wrapper.getBase(),ByteBuffer.wrap(unwrapEncoded(wrapper)));  GTSEncoder encoder=wrapper.isSetKey() ? new GTSEncoder(wrapper.getBase(),wrapper.getKey()) : new GTSEncoder(wrapper.getBase());  while (decoder.next()) {    if (decoder.getTimestamp() >= from && decoder.getTimestamp() <= to) {      try {        encoder.addValue(decoder.getTimestamp(),decoder.getLocation(),decoder.getElevation(),decoder.getValue());      } catch (      IOException ioe) {        return null;      }    }  }  GTSWrapper clipped=new GTSWrapper();  clipped.setBase(wrapper.getBase());  clipped.setBucketcount(wrapper.getBucketcount());  clipped.setBucketspan(wrapper.getBucketspan());  clipped.setCount(encoder.getCount());  clipped.setEncoded(encoder.getBytes());  clipped.setLastbucket(wrapper.getLastbucket());  clipped.setMetadata(new Metadata(wrapper.getMetadata()));  if (wrapper.isSetKey()) {    clipped.setKey(wrapper.getKey());  }  return clipped;}  }
class C{  protected byte[] engineUpdate(byte[] input,int inputOffset,int inputLen){  return core.update(input,inputOffset,inputLen);}  }
class C{  public static void install(){  final String os=System.getProperty("os.name");  final boolean macintosh=os != null && os.indexOf("Mac") != -1;  if (macintosh) {    return;  }  final PopupFactory factory=PopupFactory.getSharedInstance();  if (factory instanceof ShadowPopupFactory) {    return;  }  PopupFactory.setSharedInstance(new ShadowPopupFactory(factory));}  }
class C{  public ClassPool(){  this(null);}  }
class C{  public static ObjectInputStream newObjectInputStream(InputStream inputStream) throws IOException {  return new ObjectInputStream(inputStream);}  }
class C{  public boolean isCoverPlaceable(byte aSide,GT_ItemStack aStack,ICoverable aTileEntity){  return true;}  }
class C{  public void markDataStale(){  m_isMetaDataStale=true;}  }
class C{  public void endAdding(GL10 gl){  checkState(STATE_ADDING,STATE_INITIALIZED);  mTexture.bind(gl);  GLUtils.texImage2D(GL10.GL_TEXTURE_2D,0,mBitmap,0);  mBitmap.recycle();  mBitmap=null;  mCanvas=null;}  }
class C{  private void choosePlayerColor(final Player player){  if (player.isGhostMode()) {    drawColor=COLOR_GHOST;  } else {    if (User.isPlayerInGroup(player.getName())) {      drawColor=COLOR_GROUP;    } else {      drawColor=COLOR_PLAYER;    }  }}  }
class C{  protected Label readLabel(int offset,Label[] labels){  if (labels[offset] == null) {    labels[offset]=new Label();  }  return labels[offset];}  }
class C{  public boolean statelessAllowed(){  return _allowStateless;}  }
class C{  public void testProvidesChecksum(){  ParallaxRfidProtocol instance=new ParallaxRfidProtocol();  assertEquals(false,instance.providesChecksum());}  }
class C{  private void doScrollY(int delta){  if (delta != 0) {    if (mSmoothScrollingEnabled) {      smoothScrollBy(0,delta);    } else {      scrollBy(0,delta);    }  }}  }
class C{  public String recombine(){  if (fRecombinedName == null) {    if (isPathPackageAndFilename()) {      char slashChar;      if (fOriginalName.indexOf('\\') != -1)       slashChar='\\'; else       slashChar='/';      fRecombinedName=fOriginalName.replaceAll(";;",";").replace(';',slashChar);    } else {      fRecombinedName=fOriginalName;    }  }  return fRecombinedName;}  }
class C{  public boolean isGuarded(){  return this.guarded;}  }
class C{  private void generateAnimate(final View view,final boolean swap,final boolean swapRight,final int position){  if (SwipeListView.DEBUG) {    Log.d(SwipeListView.TAG,"swap: " + swap + " - swapRight: "+ swapRight+ " - position: "+ position);  }  if (swipeCurrentAction == SwipeListView.SWIPE_ACTION_REVEAL) {    generateRevealAnimate(view,swap,swapRight,position);  }  if (swipeCurrentAction == SwipeListView.SWIPE_ACTION_DISMISS) {    generateDismissAnimate(parentView,swap,swapRight,position);  }  if (swipeCurrentAction == SwipeListView.SWIPE_ACTION_CHOICE) {    generateChoiceAnimate(view,position);  }}  }
class C{  protected void register(IEventListener listener){  listeners.add(listener);  ownerMessage.addEvent(Type.CLIENT_INITIAL_DATA,null,null);  if (!isPersistentObject()) {    ownerMessage.addEvent(Type.CLIENT_CLEAR_DATA,null,null);  }  if (!attributes.isEmpty()) {    ownerMessage.addEvent(new SharedObjectEvent(Type.CLIENT_UPDATE_DATA,null,getAttributes()));  }  notifyModified();}  }
class C{  public static void execute(ExecutablePool pool,ServerLocation server){  AbstractOp op=new PingOpImpl();  pool.executeOn(server,op,false,false);}  }
class C{  static void clearFactories(){  factoryRegister.clear();}  }
class C{  public void testGetUnsignedLong(){  byte[] bytes={32,0,0,1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-128,-1,-1,-1,-1,-1,-1,-1,127};  MySQLPacket array=new MySQLPacket(bytes.length - MySQLPacket.HEADER_LENGTH,bytes,(byte)1);  assertEquals("ffffffffffffffff",array.getUnsignedLong().toString(16));  assertEquals("0",array.getUnsignedLong().toString(16));  assertEquals("8000000000000000",array.getUnsignedLong().toString(16));  assertEquals("7fffffffffffffff",array.getUnsignedLong().toString(16));}  }
class C{  private static String newString(final byte[] bytes,final Charset charset){  return bytes == null ? null : new String(bytes,charset);}  }
class C{  public void clear(){  for (int i=0; i < sampleQueues.size(); i++) {    sampleQueues.valueAt(i).clear();  }}  }
class C{  public static void showToast(Context context,String message){  Toast.makeText(context,message,Toast.LENGTH_SHORT).show();}  }
class C{  public void testCloseTwice() throws Exception {  Statement closeMe=this.conn.createStatement();  closeMe.close();  closeMe.close();}  }
class C{  public Rectangle intersection(Rectangle r){  return intersection(r.x,r.y,r.size.getWidth(),r.size.getHeight());}  }
class C{  private boolean hasFallbackChildren(){  for (ElemTemplateElement child=m_firstChild; child != null; child=child.m_nextSibling) {    if (child.getXSLToken() == Constants.ELEMNAME_FALLBACK)     return true;  }  return false;}  }
class C{  @Override public void run(){  Statistics stats=new Statistics(50,3000);  try {    Thread.sleep(mCacheSize);    long delta=0;    while (mBufferCommitted.tryAcquire(4,TimeUnit.SECONDS)) {      if (mOldTimestamp != 0) {        if ((mTimestamps[mBufferOut] - mOldTimestamp) > 0) {          stats.push(mTimestamps[mBufferOut] - mOldTimestamp);          long d=stats.average() / 1000000;          if (mCacheSize > 0)           Thread.sleep(d);        } else         if ((mTimestamps[mBufferOut] - mOldTimestamp) < 0) {          Log.e(TAG,"TS: " + mTimestamps[mBufferOut] + " OLD: "+ mOldTimestamp);        }        delta+=mTimestamps[mBufferOut] - mOldTimestamp;        if (delta > 500000000 || delta < 0) {          delta=0;        }      }      mReport.update(mPackets[mBufferOut].getLength(),System.nanoTime(),(mTimestamps[mBufferOut] / 100L) * (mClock / 1000L) / 10000L);      mOldTimestamp=mTimestamps[mBufferOut];      if (mCount++ > 30)       mSocket.send(mPackets[mBufferOut]);      if (++mBufferOut >= mBufferCount)       mBufferOut=0;      mBufferRequested.release();    }  } catch (  Exception e) {    e.printStackTrace();  }  mThread=null;  resetFifo();}  }
class C{  public void keyPressed(GraphicsNodeKeyEvent evt){  if (!isDown) {    isDown=true;    dispatchKeyEvent("keydown",evt);  }  if (evt.getKeyChar() == KeyEvent.CHAR_UNDEFINED) {    dispatchKeyEvent("keypress",evt);  }}  }
class C{  public static Set<String> subparts(String word,int nMin,int nMax){  Set<String> subparts=new HashSet<String>();  for (int n=nMin; n <= nMax; n++) {    for (int i=0; i < word.length(); i++) {      StringBuilder builder=new StringBuilder();      String w=word.substring(i,Math.min(i + n,word.length()));      for (      char c : w.toCharArray()) {        builder.append(escape(c));      }      subparts.add(builder.toString());    }  }  return subparts;}  }
class C{  private void refreshMuteVideoButton(){  if ((null != mCall) && mCall.isVideo()) {    mMuteLocalCameraView.setVisibility(View.VISIBLE);    boolean isMuted=mCall.isVideoRecordingMuted();    Log.d(LOG_TAG,"## refreshMuteVideoButton(): isMuted=" + isMuted);    int iconId=isMuted ? R.drawable.ic_material_videocam_off_pink_red : R.drawable.ic_material_videocam_off_grey;    mMuteLocalCameraView.setImageResource(iconId);  } else {    Log.d(LOG_TAG,"## refreshMuteVideoButton(): View.INVISIBLE");    mMuteLocalCameraView.setVisibility(View.INVISIBLE);  }}  }
class C{  public final void selectAll(){  select(0,getDocumentLength());}  }
class C{  public ToDoubleFunction<I> similarity(I i1){  return null;}  }
class C{  public static BufferedReader newReader(File file,Charset charset) throws FileNotFoundException {  checkNotNull(file);  checkNotNull(charset);  return new BufferedReader(new InputStreamReader(new FileInputStream(file),charset));}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public boolean visitNumberLiteral(ExpressionOwner owner,XNumber num){  return true;}  }
class C{  public ListenableFuture<CameraProxy> openPortabilityDevice(Lifetime requestLifetime,CameraId cameraId){  CameraDeviceKey key=new CameraDeviceKey(ApiType.CAMERA_API_PORTABILITY_AUTO,cameraId);  return openDevice(requestLifetime,key,mPortabilityCameraActionProvider);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws Exception {  StreamDuplicater oper=new StreamDuplicater();  CountTestSink mergeSink1=new CountTestSink();  CountTestSink mergeSink2=new CountTestSink();  oper.out1.setSink(mergeSink1);  oper.out2.setSink(mergeSink2);  oper.beginWindow(0);  int numtuples=1000;  Integer input=0;  for (int i=0; i < numtuples; i++) {    oper.data.process(input);  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",numtuples,mergeSink1.count);  Assert.assertEquals("number emitted tuples",numtuples,mergeSink2.count);}  }
class C{  private Serializer<?> findSerializerForClass(Class<?> clazz){  Class<?> classToCheck=clazz;  while (!objectWriters.containsKey(classToCheck) && classToCheck != Object.class) {    classToCheck=classToCheck.getSuperclass();  }  return objectWriters.get(classToCheck);}  }
class C{  public void addRestrictionList(NodeSet list,Node node){  if (!neighbourLists.contains(list)) {    neighbourLists.push(list);    if (list.size() < minSetSize) {      minSetSize=list.size();    }    nodeCausingRestriction.push(node);  }}  }
class C{  public Vertex randomSynthesize(Vertex source,Vertex phrase){  log("random synthesize",Level.FINE,phrase);  return synthesizeResponse(null,phrase,null,true,null,phrase.getNetwork());}  }
class C{  public Iterator<T> iterator(){  return new Iter();}  }
class C{  private void executeShowRepositoryCommand(RepositoryDefinition repositoryDefinition){  try {    IHandlerService handlerService=(IHandlerService)PlatformUI.getWorkbench().getService(IHandlerService.class);    ICommandService commandService=(ICommandService)PlatformUI.getWorkbench().getService(ICommandService.class);    Command command=commandService.getCommand(ShowRepositoryHandler.COMMAND);    ExecutionEvent executionEvent=handlerService.createExecutionEvent(command,new Event());    IEvaluationContext context=(IEvaluationContext)executionEvent.getApplicationContext();    context.addVariable(ShowRepositoryHandler.REPOSITORY_DEFINITION,repositoryDefinition);    command.executeWithChecks(executionEvent);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  @SuppressWarnings("unused") public void moreDataLoaded(int positionStart,int itemCount){  loading=false;  mAdapter.notifyItemRangeInserted(positionStart,itemCount);}  }
class C{  public void removeTemplateFromCache(String name) throws IOException {  Locale loc=getLocale();  removeTemplateFromCache(name,loc,getEncoding(loc),true);}  }
class C{  public boolean isEmpty(){  if (root == null)   return true;  return false;}  }
class C{  private void updateWLB(int i){  if (wlb.size() < n) {    wlb.add(pf[i]);  } else {    HilFeature head=wlb.peek();    if (pf[i].lbound > head.lbound) {      wlb.replaceTopElement(pf[i]);    }  }}  }
class C{  @Deprecated public Vector times(double alpha){  Vector c=new Vector(d);  for (int i=0; i < d; i++)   c.data[i]=alpha * data[i];  return c;}  }
class C{  public int end(int group){  return matcher.end(group);}  }
class C{  public void init(String btxn,BusinessTxnConfig btc){  FilterProcessor fp=null;  if (btc.getFilter() != null) {    fp=new FilterProcessor(btxn,btc);  }synchronized (filterMap) {    FilterProcessor oldfp=filterMap.get(btxn);    if (oldfp != null) {      globalExclusionFilters.remove(oldfp);      btxnFilters.remove(oldfp);    }    if (fp != null) {      filterMap.put(btxn,fp);      if (fp.isIncludeAll()) {        globalExclusionFilters.add(fp);      } else {        btxnFilters.add(fp);      }    } else {      filterMap.remove(btxn);    }  }}  }
class C{  public ApplicationDescription[] discoverApplications(String connectUrl,String discoverServerEndpointUri) throws ServiceResultException {  SecurityMode mode=SecurityMode.NONE;  SecureChannel channel=createSecureChannel(connectUrl,discoverServerEndpointUri,mode,null);  ChannelService chan=new ChannelService(channel);  try {    FindServersRequest req=new FindServersRequest(null,discoverServerEndpointUri,new String[0],new String[0]);    req.setRequestHeader(new RequestHeader());    req.getRequestHeader().setTimeoutHint(UnsignedInteger.valueOf(getTimeout()));    FindServersResponse res=chan.FindServers(req);    return res.getServers();  }  finally {    channel.close();    channel.dispose();  }}  }
class C{  default void environmentConfigure(EnvironmentClassLoader loader){}  }
class C{  public long size(){  return conn.getContentLength();}  }
class C{  protected void rewriteSetPartitionReplicationFactor(OptNode n,HashMap<String,PDataPartitionFormat> partitionedMatrices,LocalVariableMap vars) throws DMLRuntimeException {  boolean apply=false;  double sizeReplicated=0;  int replication=ParForProgramBlock.WRITE_REPLICATION_FACTOR;  ParForProgramBlock pfpb=(ParForProgramBlock)OptTreeConverter.getAbstractPlanMapping().getMappedProg(n.getID())[1];  if (n.getExecType() == ExecType.MR && n.getParam(ParamType.DATA_PARTITIONER).equals(PDataPartitioner.REMOTE_MR.toString()) && n.hasNestedParallelism(false) && n.hasNestedPartitionReads(false)) {    apply=true;    replication=(int)Math.min(_N,_rnk);    replication=(int)Math.min(replication,MAX_REPLICATION_FACTOR_EXPORT);    try {      FileSystem fs=FileSystem.get(ConfigurationManager.getCachedJobConf());      long hdfsCapacityRemain=fs.getStatus().getRemaining();      long sizeInputs=0;      for (      String var : partitionedMatrices.keySet()) {        MatrixObject mo=(MatrixObject)vars.get(var);        Path fname=new Path(mo.getFileName());        if (fs.exists(fname))         sizeInputs+=fs.getContentSummary(fname).getLength();      }      replication=(int)Math.min(replication,Math.floor(0.9 * hdfsCapacityRemain / sizeInputs));      replication=Math.max(replication,ParForProgramBlock.WRITE_REPLICATION_FACTOR);      sizeReplicated=replication * sizeInputs;    } catch (    Exception ex) {      throw new DMLRuntimeException("Failed to analyze remaining hdfs capacity.",ex);    }  }  if (apply)   pfpb.setPartitionReplicationFactor(replication);  _numEvaluatedPlans++;  LOG.debug(getOptMode() + " OPT: rewrite 'set partition replication factor' - result=" + apply+ ((apply) ? " (" + replication + ", "+ toMB(sizeReplicated)+ ")" : ""));}  }
class C{  public void cancelButtonActionPerformed(){  editMode=false;  curNode=null;  addButton.setVisible(true);  editButton.setVisible(true);  deleteButton.setVisible(true);  doneButton.setVisible(true);  updateButton.setVisible(false);  cancelButton.setVisible(false);  statusText1.setText(stdStatus1);  statusText2.setText(stdStatus2);  statusText3.setText(stdStatus3);}  }
class C{  public void testAuthentication() throws Exception {  URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/authentication-war/test");  final String expected="Principal name [someone], Is user in \"cargo\" role [true]";  Map<String,String> requestProperties=new HashMap<String,String>();  requestProperties.put("Authorization","Basic " + new String(Base64.encodeBase64("someone:passw0rd".getBytes())));  PingUtils.assertPingTrue("Failed authentication",expected,url,requestProperties,logger);}  }
class C{  private void parse(final String osmFilename,final InputStream stream) throws UncheckedIOException {  if (this.hierarchyLayers.isEmpty()) {    log.warn("No hierarchy layer specified. Will convert every highway specified by setHighwayDefaults.");  }  OsmXmlParser parser=null;  if (this.slowButLowMemory) {    log.info("parsing osm file first time: identifying nodes used by ways");    parser=new OsmXmlParser(this.nodes,this.ways,this.reations,this.transform);    parser.enableOptimization(1);    if (stream != null) {      parser.parse(new InputSource(stream));    } else {      parser.readFile(osmFilename);    }    log.info("parsing osm file second time: loading required nodes and ways");    parser.enableOptimization(2);    if (stream != null) {      parser.parse(new InputSource(stream));    } else {      parser.readFile(osmFilename);    }    log.info("done loading data");  } else {    parser=new OsmXmlParser(this.nodes,this.ways,this.reations,this.transform);    if (stream != null) {      parser.parse(new InputSource(stream));    } else {      parser.readFile(osmFilename);    }  }  convert();  log.info("= conversion statistics: ==========================");  log.info("osm: # nodes read:                " + parser.nodeCounter.getCounter());  log.info("osm: # ways read:                 " + parser.wayCounter.getCounter());  log.info("osm: # relations read:            " + parser.relationCounter.getCounter());  log.info("MATSim: # nodes created:          " + this.network.getNodes().size());  log.info("MATSim: # links created:          " + this.network.getLinks().size());  log.info("MATSim: # stops created:          " + this.schedule.getFacilities().size());  log.info("MATSim: # transit lines created:  " + this.schedule.getTransitLines().size());  log.info("MATSim: # transit routes created: " + this.transitRoutesCounter);  if (this.unknownHighways.size() > 0) {    log.info("The following highway-types had no defaults set and were thus NOT converted:");    for (    String highwayType : this.unknownHighways) {      log.info("- \"" + highwayType + "\"");    }  }  log.info("= end of conversion statistics ====================");}  }
class C{  public void updateUI(){  setUI((TextUI)UIManager.getUI(this));  invalidate();}  }
class C{  public void updateJavaScriptEnabled(boolean enabled){  if (enabled) {    addAccessibilityApisIfNecessary();  } else {    removeAccessibilityApisIfNecessary();  }  mWebView.reload();}  }
class C{  public void dumpSizes() throws SQLException, BlockStoreException {  maybeConnect();  Statement s=conn.get().createStatement();  long size=0;  long totalSize=0;  int count=0;  ResultSet rs=s.executeQuery("SELECT name, value FROM settings");  while (rs.next()) {    size+=rs.getString(1).length();    size+=rs.getBytes(2).length;    count++;  }  rs.close();  System.out.printf("Settings size: %d, count: %d, average size: %f%n",size,count,(double)size / count);  totalSize+=size;  size=0;  count=0;  rs=s.executeQuery("SELECT chainWork, header FROM headers");  while (rs.next()) {    size+=28;    size+=rs.getBytes(1).length;    size+=4;    size+=rs.getBytes(2).length;    count++;  }  rs.close();  System.out.printf("Headers size: %d, count: %d, average size: %f%n",size,count,(double)size / count);  totalSize+=size;  size=0;  count=0;  rs=s.executeQuery("SELECT txOutChanges, transactions FROM undoableBlocks");  while (rs.next()) {    size+=28;    size+=4;    byte[] txOutChanges=rs.getBytes(1);    byte[] transactions=rs.getBytes(2);    if (txOutChanges == null)     size+=transactions.length; else     size+=txOutChanges.length;    count++;  }  rs.close();  System.out.printf("Undoable Blocks size: %d, count: %d, average size: %f%n",size,count,(double)size / count);  totalSize+=size;  size=0;  count=0;  long scriptSize=0;  rs=s.executeQuery("SELECT value, scriptBytes FROM openOutputs");  while (rs.next()) {    size+=32;    size+=4;    size+=4;    size+=rs.getBytes(1).length;    size+=rs.getBytes(2).length;    scriptSize+=rs.getBytes(2).length;    count++;  }  rs.close();  System.out.printf("Open Outputs size: %d, count: %d, average size: %f, average script size: %f (%d in id indexes)%n",size,count,(double)size / count,(double)scriptSize / count,count * 8);  totalSize+=size;  System.out.println("Total Size: " + totalSize);  s.close();}  }
class C{  public boolean isActivationModeChangeable() throws RcsGenericException {  if (sAccurateLog) {    Log.d(LOG_TAG,"isActivationModeChangeable: Request()");  }  Bundle result=queryRcsStackByIntent(new Intent(Intents.Service.ACTION_GET_ACTIVATION_MODE_CHANGEABLE));  boolean activationModeChangeable=result.getBoolean(Intents.Service.EXTRA_GET_ACTIVATION_MODE_CHANGEABLE,false);  if (sAccurateLog) {    Log.d(LOG_TAG,"isActivationModeChangeable: Response() = " + activationModeChangeable + " (in "+ result.getLong(TIME_SPENT,-1)+ "ms)");  }  return activationModeChangeable;}  }
class C{  static void checkFlags(int flags){  int allowedFlags=READ_ONLY_FLAG_MASK | EMPTY_FLAG_MASK | COMPACT_FLAG_MASK| ORDERED_FLAG_MASK;  int flagsMask=~allowedFlags;  if ((flags & flagsMask) > 0) {    throw new SketchesArgumentException("Possible corruption: Invalid flags field: " + Integer.toBinaryString(flags));  }}  }
class C{  public boolean removeMemberFromSystem(ObjectName objectName,MemberMXBean proxy,FederationComponent oldState){  if (thisMemberName.equals(objectName)) {    ObjectName distrObjectName=MBeanJMXAdapter.getDistributedSystemName();    service.unregisterMBean(distrObjectName);  }  if (mapOfMembers != null) {    mapOfMembers.remove(objectName);    memberSetSize=mapOfMembers.values().size();    if (mapOfMembers.values().size() == 0) {      memberSetSize=0;      return true;    }  }  updateMember(objectName,null,oldState);  try {    mbeanServer.removeNotificationListener(objectName,distListener);  } catch (  ListenerNotFoundException e) {    logger.info(LocalizedMessage.create(ManagementStrings.LISTENER_NOT_FOUND_FOR_0,objectName));    if (logger.isDebugEnabled()) {      logger.debug(e.getMessage(),e);    }  }catch (  InstanceNotFoundException e) {    logger.info(LocalizedMessage.create(ManagementStrings.INSTANCE_NOT_FOUND,objectName));    if (logger.isDebugEnabled()) {      logger.debug(e.getMessage(),e);    }  }  return false;}  }
class C{  public SourcePrinter(PrintStream out,String[] tokenNames,boolean newLines){  this.tokenNames=tokenNames;  tabLevel=0;  lastLinePrinted=0;  this.out=out;  this.newLines=newLines;  this.stack=new Stack();}  }
class C{  private double scoreWaypointResult(SearchQuery query,Waypoint waypoint){  double score=1.0;  Location location=waypoint.getLocation();  score*=getTitleBoost(query,waypoint.getName(),waypoint.getDescription(),waypoint.getCategory());  score*=getDistanceBoost(query,location.getLatitude(),location.getLongitude());  score*=getTimeBoost(query,location.getTime());  if (query.currentTrackId != -1 && waypoint.getTrackId() == query.currentTrackId) {    score*=CURRENT_TRACK_WAYPOINT_PROMOTION;  }  return score;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:34.386 -0500",hash_original_method="E605CEDD3D735C877CD5828196F893EC",hash_generated_method="A197A3EA3EA4ED335C81DA684AD7D6F7") public static void sort(short[] a){  doSort(a,0,a.length - 1);}  }
class C{  private static boolean sqlType(Object obj){  return obj == null || obj instanceof BigDecimal || obj instanceof Boolean || obj instanceof Byte || obj instanceof byte[] || obj instanceof Date || obj instanceof Double || obj instanceof Float || obj instanceof Integer || obj instanceof Long || obj instanceof Short || obj instanceof String || obj instanceof URL;}  }
class C{  public AccountHeaderBuilder withOnlyMainProfileImageVisible(boolean onlyMainProfileImageVisible){  this.mOnlyMainProfileImageVisible=onlyMainProfileImageVisible;  return this;}  }
class C{  public static final double[] timesPlus(final double[] v1,final double s1,final double[] v2){  assert (v1.length == v2.length) : ERR_VEC_DIMENSIONS;  final double[] result=new double[v1.length];  for (int i=0; i < result.length; i++) {    result[i]=v1[i] * s1 + v2[i];  }  return result;}  }
class C{  public DiskDistributedNoAckAsyncRegionDUnitTest(){  super();}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  getDocument().removeUndoableEditListener(undoManager);  s.defaultWriteObject();  getDocument().addUndoableEditListener(undoManager);}  }
class C{  protected void initOtherResourceBundle(UIDefaults table){  table.addResourceBundle("org.jb2011.lnf.beautyeye.resources.beautyeye");}  }
class C{  public boolean isCallToPublicMethod(){  if (!isMethodCall())   return false;  if (getCalledCFG() == null) {    return false;  }  return getCalledCFG().isPublicMethod();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:20.556 -0500",hash_original_method="00F8174F9E89D0C972FA6D3F19742382",hash_generated_method="D90463461B2A94FF94D13FDF69BB80C9") public int describeContents(){  return 0;}  }
class C{  Copier(byte[] info,ConstPool src,ConstPool dest,Map map){  this(info,src,dest,map,true);}  }
class C{  private boolean saveItem(){  String subType=mSubTypeTextView.getText().toString();  if (subType.isEmpty()) {    IntrusiveToast.show(this,getString(R.string.please_pick_the_type));    return false;  }  long date=DateUtil.parse(mDateTextView.getText().toString());  long amount=CurrencyUtil.fromString(mAmountEditText.getText().toString());  String details=mDetailsTextView.getText().toString();  final int id;  if (mOriginalItem != null) {    id=mOriginalItem.getId();  } else {    id=Item.NO_ID;  }  final Item item=new Item(mActivityItemType,subType,details,amount,date,id);  mItemDetailsPresenter.saveItem(item);  return true;}  }
class C{  public Matrix3d invert(){  return invert(this);}  }
class C{  public LabeledOMPoly(int[] xypoints){  super(xypoints);}  }
class C{  public CoapObserveRelation observe(Request request,CoapHandler handler){  if (request.getOptions().hasObserve()) {    Endpoint outEndpoint=getEffectiveEndpoint(request);    CoapObserveRelation relation=new CoapObserveRelation(request,outEndpoint);    request.addMessageObserver(new ObserveMessageObserverImpl(handler,relation));    send(request,outEndpoint);    return relation;  } else {    throw new IllegalArgumentException("please make sure that the request has observe option set.");  }}  }
class C{  public static Object createValue(String str,Class clazz) throws ParseException {  if (PatternOptionBuilder.STRING_VALUE == clazz) {    return str;  } else   if (PatternOptionBuilder.OBJECT_VALUE == clazz) {    return createObject(str);  } else   if (PatternOptionBuilder.NUMBER_VALUE == clazz) {    return createNumber(str);  } else   if (PatternOptionBuilder.DATE_VALUE == clazz) {    return createDate(str);  } else   if (PatternOptionBuilder.CLASS_VALUE == clazz) {    return createClass(str);  } else   if (PatternOptionBuilder.FILE_VALUE == clazz) {    return createFile(str);  } else   if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {    return createFile(str);  } else   if (PatternOptionBuilder.FILES_VALUE == clazz) {    return createFiles(str);  } else   if (PatternOptionBuilder.URL_VALUE == clazz) {    return createURL(str);  } else {    return null;  }}  }
class C{  public void testGetName() throws Exception {  Container c=new Jetty6xInstalledLocalContainer(null);  String name=c.getName();  assertEquals("Jetty 6.x",name);}  }
class C{  public static boolean isLinux(){  setType();  return (type == LINUX);}  }
class C{  public ExpressionException(String message,int line){  super(message);  errorLine=line;}  }
class C{  public static SoapMessageImpl toResponse(SoapMessageImpl request,int requestId) throws Exception {  addRequestId(requestId,request);  return SoapUtils.toResponse(request);}  }
class C{  private <T>void checkAtomicCoderFactory(Class<? extends Coder<T>> coderClazz,Coder<T> expectedCoder){  CoderFactory factory=CoderFactories.fromStaticMethods(coderClazz);  @SuppressWarnings("unchecked") Coder<T> actualCoder=(Coder<T>)factory.create(Collections.<Coder<?>>emptyList());  assertEquals(expectedCoder,actualCoder);}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  public KillContainerParams withSignal(int signal){  this.signal=signal;  return this;}  }
class C{  public double readDouble() throws IOException, ImportException {  String token=readToken();  try {    return Double.parseDouble(token);  } catch (  NumberFormatException nfe) {    throw new ImportException("Number format error: " + nfe.getMessage());  }}  }
class C{  @Override public void clear(){  size=0;  for (int i=0; i < elementData.length; i++) {    elementData[i]=null;  }  modCount++;}  }
class C{  public void addParameter(final String parameterName,final File parameterFile) throws FileNotFoundException {  LOG.trace("enter MultipartPostMethod.addParameter(String parameterName, " + "File parameterFile)");  final Part param=new FilePart(parameterName,parameterFile);  parameters.add(param);}  }
class C{  void deleteFromUseChain(HeapOperand<Object> op){  HeapVariable<Object> hv=op.getHeapVariable();  HashSet<HeapOperand<Object>> u=UseChain.get(hv);  u.remove(op);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS04.class,args);}  }
class C{  public AdaptiveMetropolis(int numberOfParents,int numberOfOffspring,double jumpRateCoefficient){  super();  this.numberOfParents=numberOfParents;  this.numberOfOffspring=numberOfOffspring;  this.jumpRateCoefficient=jumpRateCoefficient;}  }
class C{  private boolean isUpwardGesture(){  return touchDelta > 0;}  }
class C{  public WriteException(WriteRequest request,Throwable cause){  initCause(cause);  this.requests=asRequestList(request);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:31.816 -0500",hash_original_method="7283B730E23CF76E918B6507D245B3B6",hash_generated_method="743A7251449C0A32C2DFA041DA0279BF") public static byte[] convertPinToBytes(String pin){  if (pin == null) {    return null;  }  byte[] pinBytes;  try {    pinBytes=pin.getBytes("UTF-8");  } catch (  UnsupportedEncodingException uee) {    Log.e(TAG,"UTF-8 not supported?!?");    return null;  }  if (pinBytes.length <= 0 || pinBytes.length > 16) {    return null;  }  return pinBytes;}  }
class C{  private void loadProperties(){  appProperties=new Properties();  InputStream stream=null;  try {    stream=new FileInputStream(System.getProperty("user.dir") + "/app.properties");    appProperties.load(stream);    stream.close();    return;  } catch (  FileNotFoundException e) {    LOG.warn("Could not find app.properties file.");  }catch (  IOException e) {    e.printStackTrace();  }  if (stream == null) {    LOG.warn("Loading app.properties file from resources folder");    try {      stream=this.getClass().getResourceAsStream("/app.properties");      if (stream != null) {        appProperties.load(stream);        stream.close();      } else {        LOG.fatal("You do not have an app.properties file. Please create one.");      }    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public boolean pendingUndeploy(){  return pendingUndeploy;}  }
class C{  @Override public void receive(ComplexBuffer sampleBuffer){  mDFTProcessor.receive(sampleBuffer);}  }
class C{  public InvalidConfigException(TYPE type,String message){  super(message);  this.type=type;}  }
class C{  @Override public void updatePixels(){  bitmap.setPixels(pixels,0,width,0,0,width,height);}  }
class C{  public String toString(){  return toString(false);}  }
class C{  public void testValueOfUnknownDocType() throws Exception {  DocType docType=new DocType("application","foo","bar");  assertNull(ApplicationXmlVersion.valueOf(docType));}  }
class C{  @Category(FlakyTest.class) @Test public void testCreateGatewayReceiver_onMultipleMembers(){  VM puneLocator=Host.getLocator();  int punePort=(Integer)puneLocator.invoke(null);  Properties props=getDistributedSystemProperties();  props.setProperty(MCAST_PORT,"0");  props.setProperty(LOCATORS,"localhost[" + punePort + "]");  setUpJmxManagerOnVm0ThenConnect(props);  Integer nyPort=(Integer)vm2.invoke(null);  vm3.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  final DistributedMember vm3Member=(DistributedMember)vm3.invoke(null);  final DistributedMember vm4Member=(DistributedMember)vm4.invoke(null);  String command=CliStrings.CREATE_GATEWAYRECEIVER + " --" + CliStrings.CREATE_GATEWAYRECEIVER__MANUALSTART+ "=true"+ " --"+ CliStrings.CREATE_GATEWAYRECEIVER__BINDADDRESS+ "=localhost"+ " --"+ CliStrings.CREATE_GATEWAYRECEIVER__STARTPORT+ "=10000"+ " --"+ CliStrings.CREATE_GATEWAYRECEIVER__ENDPORT+ "=11000"+ " --"+ CliStrings.CREATE_GATEWAYRECEIVER__MAXTIMEBETWEENPINGS+ "=100000"+ " --"+ CliStrings.CREATE_GATEWAYRECEIVER__SOCKETBUFFERSIZE+ "=512000"+ " --"+ CliStrings.CREATE_GATEWAYRECEIVER__MEMBER+ "="+ vm3Member.getId()+ ","+ vm4Member.getId();  CommandResult cmdResult=executeCommand(command);  if (cmdResult != null) {    String strCmdResult=commandResultToString(cmdResult);    getLogWriter().info("testCreateGatewayReceiver stringResult : " + strCmdResult + ">>>>");    assertEquals(Result.Status.OK,cmdResult.getStatus());    TabularResultData resultData=(TabularResultData)cmdResult.getResultData();    List<String> status=resultData.retrieveAllValues("Status");    assertEquals(2,status.size());    for (int i=0; i < status.size(); i++) {      assertTrue("GatewayReceiver creation failed with: " + status.get(i),status.get(i).indexOf("ERROR:") == -1);    }  } else {    fail("testCreateGatewayReceiver failed as did not get CommandResult");  }  vm3.invoke(null);  vm4.invoke(null);}  }
class C{  protected TraceWhen_Impl(){  super();}  }
class C{  public boolean hasFeedLink(){  return hasExtension(FeedLink.class);}  }
class C{  public void __chain_b(){  String b=this.b;  int n=x.len(b);  this.b2j=x.dict();  dict<list<Integer>> b2j=this.b2j;  populardict=x.dict();  for (  tuple2<Integer,String> item : x.enumerate(b)) {    int i=item.index;    String elt=item.value;    if (x.String(elt).in(b2j)) {      list<Integer> indices=x.list();      indices=b2j.get(elt);      if (n >= 200 && x.len(indices) * 100 > n) {        populardict.setAt(elt).value(1);      } else {        indices.append(i);      }    } else {      b2j.setAt(elt).value(x.listOf(i));    }  }  for (  String elt : populardict) {    b2j.del(elt);  }}  }
class C{  public ClusterConfig(List<Node> nodes,short thisNodeId) throws SyncException {  init(nodes,thisNodeId,AuthScheme.NO_AUTH,null,null);}  }
class C{  public void testSubmitRunnable2() throws Throwable {  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    Future<String> future=e.submit(new NoOpRunnable(),TEST_STRING);    assertSame(TEST_STRING,future.get());    assertTrue(future.isDone());    assertFalse(future.isCancelled());  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  private void assignJoinVars(final StaticAnalysis sa,final GraphPatternGroup<IGroupMemberNode> group){  if (group.getParentGraphPatternGroup() != null) {    final Set<IVariable<?>> boundByGroup=sa.getDefinitelyProducedBindings(group,new LinkedHashSet<IVariable<?>>(),true);    final Set<IVariable<?>> incomingBindings=sa.getDefinitelyIncomingBindings((GraphPatternGroup<?>)group,new LinkedHashSet<IVariable<?>>());    boundByGroup.retainAll(incomingBindings);    @SuppressWarnings("rawtypes") final IVariable[] joinVars=boundByGroup.toArray(new IVariable[0]);    group.setJoinVars(joinVars);    final Set<IVariable<?>> definitelyBoundInGroup=sa.getDefinitelyProducedBindings(group,new LinkedHashSet<IVariable<?>>(),true);    final Set<IVariable<?>> maybeIncomingBindings=sa.getMaybeIncomingBindings((GraphPatternGroup<?>)group,new LinkedHashSet<IVariable<?>>());    if (group instanceof JoinGroupNode) {      final JoinGroupNode jgn=(JoinGroupNode)group;      if (jgn.isOptional()) {        final Set<FilterNode> filters=new LinkedHashSet<FilterNode>();        for (        BOp node : jgn.args()) {          final Iterator<BOp> it=BOpUtility.preOrderIterator(node);          while (it.hasNext()) {            final BOp bop=it.next();            if (bop instanceof FilterNode) {              filters.add((FilterNode)bop);            } else             if (node instanceof StatementPatternNode) {              final StatementPatternNode nodeAsSP=(StatementPatternNode)node;              final List<FilterNode> attachedFilters=nodeAsSP.getAttachedJoinFilters();              for (              final FilterNode filter : attachedFilters) {                filters.add(filter);              }            }          }        }        for (        FilterNode fn : filters) {          definitelyBoundInGroup.addAll(sa.getSpannedVariables(fn,true,new LinkedHashSet<IVariable<?>>()));        }      }    }    definitelyBoundInGroup.retainAll(maybeIncomingBindings);    @SuppressWarnings("rawtypes") final IVariable[] projectInVars=definitelyBoundInGroup.toArray(new IVariable[0]);    group.setProjectInVars(projectInVars);  }  for (  IGroupMemberNode child : group) {    if (child instanceof GraphPatternGroup<?>) {      @SuppressWarnings("unchecked") final GraphPatternGroup<IGroupMemberNode> subGroup=(GraphPatternGroup<IGroupMemberNode>)child;      assignJoinVars(sa,subGroup);    } else     if (child instanceof QueryBase) {      final QueryBase subquery=(QueryBase)child;      @SuppressWarnings("unchecked") final GraphPatternGroup<IGroupMemberNode> subGroup=(GraphPatternGroup<IGroupMemberNode>)subquery.getWhereClause();      assignJoinVars(sa,subGroup);    }  }}  }
class C{  public Document createDocument(String ns,String root,String uri,Reader r) throws IOException {  if (!SVGDOMImplementation.SVG_NAMESPACE_URI.equals(ns) || !"svg".equals(root)) {    throw new RuntimeException("Bad root element");  }  return createDocument(uri,r);}  }
class C{  public TestNanoSparqlServerWithProxyIndexManager2(String name){  this(name,getTemporaryJournal(),TestMode.triples);}  }
class C{  public void paintRootPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static <E>List<E> sealList(E... a){  return Collections.unmodifiableList(Arrays.asList(a));}  }
class C{  public NukeCommand(Server server){  super(server,"nuke","Drops a nuke onto the board, to be exploded at" + "the end of the next weapons attack phase." + "Allowed formats:"+ "/nuke <x> <y> <type> and"+ "/nuke <x> <y> <damage> <degredation> <secondary radius> <craterdepth>"+ "where type is 0-4 (0: Davy-Crockett-I, 1: Davy-Crockett-M, 2: Alamo, 3: Santa Ana, 4: Peacemaker)"+ "and hex x,y is x=column number and y=row number (hex 0923 would be x=9 and y=23)");}  }
class C{  Entry(K k,V v){  value=v;  key=k;}  }
class C{  public void addActionListener(ActionListener newA){  m_Listeners.add(newA);}  }
class C{  public void remove(String handleId){  handles.remove(handleId);}  }
class C{  public void startSession(){  if (logger.isActivated()) {    logger.debug("Start the session");  }  if (processor != null) {    processor.startProcessing();  }}  }
class C{  public static void put_dc(MpegEncContext s,int[] dest_y_base,int dest_y_offset,int[] dest_cb_base,int dest_cb_offset,int[] dest_cr_base,int dest_cr_offset,int mb_x,int mb_y){  int dc, dcu, dcv, y, i;  for (i=0; i < 4; i++) {    dc=dc_val_base[dc_val[0] + mb_x * 2 + (i & 1) + (mb_y * 2 + (i >> 1)) * s.b8_stride];    if (dc < 0)     dc=0; else     if (dc > 2040)     dc=2040;    for (y=0; y < 8; y++) {      int x;      for (x=0; x < 8; x++) {        dest_y_base[dest_y_offset + x + (i & 1) * 8 + (y + (i >> 1) * 8) * s.linesize]=dc / 8;      }    }  }  dcu=dc_val_base[dc_val[1] + mb_x + mb_y * s.mb_stride];  dcv=dc_val_base[dc_val[2] + mb_x + mb_y * s.mb_stride];  if (dcu < 0)   dcu=0; else   if (dcu > 2040)   dcu=2040;  if (dcv < 0)   dcv=0; else   if (dcv > 2040)   dcv=2040;  for (y=0; y < 8; y++) {    int x;    for (x=0; x < 8; x++) {      dest_cb_base[dest_cb_offset + x + y * (s.uvlinesize)]=dcu / 8;      dest_cr_base[dest_cr_offset + x + y * (s.uvlinesize)]=dcv / 8;    }  }}  }
class C{  private CBreakpointPainter(){}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static boolean escapeUnprintable(StringBuffer result,int c){  if (isUnprintable(c)) {    result.append('\\');    if ((c & ~0xFFFF) != 0) {      result.append('U');      result.append(DIGITS[0xF & (c >> 28)]);      result.append(DIGITS[0xF & (c >> 24)]);      result.append(DIGITS[0xF & (c >> 20)]);      result.append(DIGITS[0xF & (c >> 16)]);    } else {      result.append('u');    }    result.append(DIGITS[0xF & (c >> 12)]);    result.append(DIGITS[0xF & (c >> 8)]);    result.append(DIGITS[0xF & (c >> 4)]);    result.append(DIGITS[0xF & c]);    return true;  }  return false;}  }
class C{  public static long[] nandI(long[] v,long[] o){  int i=0;  for (; i < o.length; i++) {    v[i]&=~o[i];  }  return v;}  }
class C{  private void doTestQuery(int cardinality,String[] fields) throws Exception {  String[] startOptions=new String[]{"(","["};  String[] endOptions=new String[]{")","]"};  Integer[] qRange=getRandomRange(cardinality,"id");  ModifiableSolrParams params=new ModifiableSolrParams();  params.set("q","id:[" + qRange[0] + " TO "+ qRange[1]+ "]");  params.set("facet","true");  params.set("rows","0");  String field=fields[random().nextInt(fields.length)];  params.set("facet.interval",field);  for (int i=0; i < 1 + random().nextInt(20); i++) {    Integer[] interval=getRandomRange(cardinality,field);    String open=startOptions[interval[0] % 2];    String close=endOptions[interval[1] % 2];    params.add("f." + field + ".facet.interval.set",open + interval[0] + ","+ interval[1]+ close);  }  query(params);}  }
class C{  public static Script createP2SHOutputScript(Script redeemScript){  byte[] hash=Utils.sha256hash160(redeemScript.getProgram());  return ScriptBuilder.createP2SHOutputScript(hash);}  }
class C{  public void addInternalEntity(String name,String value){  if (!this.entities.containsKey(name)) {    this.entities.put(name,value);  }}  }
class C{  public OPTRecord(int payloadSize,int xrcode,int version,int flags,List options){  super(Name.root,Type.OPT,payloadSize,0);  checkU16("payloadSize",payloadSize);  checkU8("xrcode",xrcode);  checkU8("version",version);  checkU16("flags",flags);  ttl=((long)xrcode << 24) + ((long)version << 16) + flags;  if (options != null) {    this.options=new ArrayList(options);  }}  }
class C{  public long length(){  return length;}  }
class C{  protected boolean acceptType(IType type,int acceptFlags,boolean isSourceType){  if (acceptFlags == 0 || acceptFlags == ACCEPT_ALL)   return true;  try {    int kind=isSourceType ? TypeDeclaration.kind(((SourceTypeElementInfo)((SourceType)type).getElementInfo()).getModifiers()) : TypeDeclaration.kind(((IBinaryType)((BinaryType)type).getElementInfo()).getModifiers());switch (kind) {case TypeDeclaration.CLASS_DECL:      return (acceptFlags & ACCEPT_CLASSES) != 0;case TypeDeclaration.INTERFACE_DECL:    return (acceptFlags & ACCEPT_INTERFACES) != 0;case TypeDeclaration.ENUM_DECL:  return (acceptFlags & ACCEPT_ENUMS) != 0;default :return (acceptFlags & ACCEPT_ANNOTATIONS) != 0;}} catch (JavaModelException npe) {return false;}}  }
class C{  EndLineAction(String nm,boolean select){  super(nm);  this.select=select;}  }
class C{  private void printError(final String locale,HttpServletResponse resp,String errorText) throws IOException {  resp.setCharacterEncoding("UTF-8");  resp.setContentType("text/html; charset=UTF-8");  String title=Messages.get(locale,"servlet_notification_title");  String error=Messages.get(locale,"servlet_notification_error",new Object[]{errorText});  String html=Messages.get(locale,"servlet_notification_html",new Object[]{title,title,error});  PrintWriter out=resp.getWriter();  out.println(html);  out.close();}  }
class C{  CipherSuiteList(HandshakeInStream in) throws IOException {  byte[] bytes=in.getBytes16();  if ((bytes.length & 1) != 0) {    throw new SSLException("Invalid ClientHello message");  }  cipherSuites=new ArrayList<CipherSuite>(bytes.length >> 1);  for (int i=0; i < bytes.length; i+=2) {    cipherSuites.add(CipherSuite.valueOf(bytes[i],bytes[i + 1]));  }}  }
class C{  public InternalException(String message){  super(message);}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public static boolean readAssignment(BashPsiBuilder builder,Mode mode,boolean markAsVarDef,boolean acceptArrayVars){  final PsiBuilder.Marker assignment=builder.mark();switch (mode) {case SimpleMode:    if (acceptArrayVars && builder.getTokenType() == ASSIGNMENT_WORD) {      break;    }  if (!Parsing.word.parseWord(builder)) {    assignment.drop();    return false;  }break;case LaxAssignmentMode:if (builder.getTokenType() == ASSIGNMENT_WORD) {builder.advanceLexer();} else if (Parsing.var.isValid(builder)) {if (!Parsing.var.parse(builder)) {  assignment.drop();  return false;}} else if (!Parsing.word.parseWord(builder,false,BashTokenTypes.EQ_SET,TokenSet.EMPTY)) {assignment.drop();return false;}break;case StrictAssignmentMode:{if (builder.isEvalMode() && ParserUtil.hasNextTokens(builder,false,VARIABLE,EQ)) {markAsVarDef=false;if (!Parsing.var.parse(builder)) {assignment.drop();return false;}break;}final IElementType nextToken=ParserUtil.getTokenAndAdvance(builder);if (nextToken != ASSIGNMENT_WORD) {ParserUtil.error(assignment,"parser.unexpected.token");return false;}break;}default :assignment.drop();throw new IllegalStateException("Invalid parsing mode found");}if (mode == Mode.SimpleMode && acceptArrayVars && builder.getTokenType() == ASSIGNMENT_WORD) {builder.advanceLexer();boolean hasArrayIndex=readArrayIndex(builder,assignment);if (!hasArrayIndex) {return false;}}if (mode != Mode.SimpleMode) {if (!readArrayIndex(builder,assignment)) {return false;}final IElementType nextToken=builder.getTokenType(true);boolean hasAssignment=nextToken == EQ || nextToken == ADD_EQ;if (!hasAssignment && mode == Mode.StrictAssignmentMode) {ParserUtil.error(assignment,"parser.unexpected.token");return false;}if (hasAssignment) {builder.advanceLexer();}if (hasAssignment) {if (builder.getTokenType(true) == LEFT_PAREN) {final boolean ok=parseAssignmentList(builder);if (!ok) {ParserUtil.error(builder,"parser.unexpected.token");assignment.drop();return false;}}final IElementType token=builder.getTokenType(true);final boolean isEndToken=assignmentSeparators.contains(token);if (token != null && !isEndToken) {if (!Parsing.word.parseWord(builder,true,TokenSet.EMPTY,validWordTokens)) {ParserUtil.error(builder,"parser.unexpected.token");assignment.drop();return false;}}}}if (markAsVarDef) {assignment.done(VAR_DEF_ELEMENT);} else {assignment.drop();}return true;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("================== LocalTagEntryBatch ======================\n");  sb.append(this.header.toString());  for (  Map.Entry<Integer,MXFUID> entry : this.localTagToUID.entrySet()) {    int localTag=entry.getKey();    byte[] bytes=entry.getValue().getUID();    sb.append(String.format("localTag = 0x%04x UID = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",localTag,bytes[0],bytes[1],bytes[2],bytes[3],bytes[4],bytes[5],bytes[6],bytes[7],bytes[8],bytes[9],bytes[10],bytes[11],bytes[12],bytes[13],bytes[14],bytes[15]));  }  return sb.toString();}  }
class C{  private void dynInit(){  String sql=MRole.getDefault().addAccessSQL("SELECT AD_Role_ID, Name FROM AD_Role ORDER BY 2","AD_Role",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  roleField=new Listbox(DB.getKeyNamePairs(sql,false));  roleField.setMold("select");  sql="SELECT * FROM AD_Record_Access " + "WHERE AD_Table_ID=? AND Record_ID=? AND AD_Client_ID=?";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_AD_Table_ID);    pstmt.setInt(2,m_Record_ID);    pstmt.setInt(3,Env.getAD_Client_ID(Env.getCtx()));    ResultSet rs=pstmt.executeQuery();    while (rs.next())     m_recordAccesss.add(new MRecordAccess(Env.getCtx(),rs,null));    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  log.fine("#" + m_recordAccesss.size());  setLine(0,false);}  }
class C{  public void startSettingActivity(Context context){  startSettingActivity(context,null);}  }
class C{  public ReferencesHeader createReferencesHeader(String callId,String rel) throws ParseException {  ReferencesHeader retval=new References();  retval.setCallId(callId);  retval.setRel(rel);  return retval;}  }
class C{  public FunctionException(){}  }
class C{  public boolean hasSameRules(TimeZone other){  if (this == other) {    return true;  }  if (other == null) {    return false;  }  if (!(other instanceof ZoneInfo)) {    if (getRawOffset() != other.getRawOffset()) {      return false;    }    if ((transitions == null) && (useDaylightTime() == false) && (other.useDaylightTime() == false)) {      return true;    }    return false;  }  if (getLastRawOffset() != ((ZoneInfo)other).getLastRawOffset()) {    return false;  }  return (checksum == ((ZoneInfo)other).checksum);}  }
class C{  public static void help(Context cx,Scriptable thisObj,Object[] args,Function funObj){  PrintStream out=getInstance(funObj).getOut();  out.println(ToolErrorReporter.getMessage("msg.help"));}  }
class C{  public double delta(final double spot){  QL.require(spot > 0.0,"positive spot value required");  final double DforwardDs=forward / spot;  final double temp=stdDev * spot;  final double DalphaDs=dAlpha_dD1 / temp;  final double DbetaDs=dBeta_dD2 / temp;  final double temp2=DalphaDs * forward + alpha * DforwardDs + DbetaDs * x + beta * dX_dS;  return discount * temp2;}  }
class C{  private void updateSizes(){  int length=0;  if (progressBar.getOrientation() == JProgressBar.HORIZONTAL) {    length=getBoxLength(componentInnards.width,componentInnards.height);    maxPosition=componentInnards.x + componentInnards.width - length;  } else {    length=getBoxLength(componentInnards.height,componentInnards.width);    maxPosition=componentInnards.y + componentInnards.height - length;  }  delta=2.0 * (double)maxPosition / (double)numFrames;}  }
class C{  public Event newSubEvent(final Object minorEventType,final Map<String,Object> details){  final Event e=newSubEvent(minorEventType);  if (details != null) {    e.addDetails(details);  }  return e;}  }
class C{  public int size(){  return m_firstFree;}  }
class C{  public ZkDataNode(String myId){  this(null,myId);}  }
class C{  public static void main(String... a) throws Exception {  TestBase test=TestBase.createCaller().init();  test.config.mvcc=true;  test.config.lockTimeout=20000;  test.config.memory=true;  test.test();}  }
class C{  public RangeQueryBuilder gt(Object from){  this.from=from;  this.includeLower=false;  return this;}  }
class C{  static public byte[] encode1(final String s){  final int slen=s.length();  if (slen > Short.MAX_VALUE)   throw new UnsupportedOperationException();  final int capacity=Bytes.SIZEOF_SHORT + (slen << 1);  final IKeyBuilder k=new KeyBuilder(capacity);  k.append((short)slen);  for (int i=0; i < slen; i++) {    final char ch=s.charAt(i);    final short sh=(short)ch;    k.append(sh);  }  assert k.array().length == capacity;  return k.array();}  }
class C{  @Override public void doGenerate(Monitor monitor) throws IOException {  super.doGenerate(monitor);}  }
class C{  private static boolean isSynchronized(Method m,Object target,Object... args){  Thread t=new Thread(new InvokeTask(m,target,args));  Boolean isSynchronized=null;synchronized (target) {    t.start();    while (isSynchronized == null) {switch (t.getState()) {case NEW:case RUNNABLE:case WAITING:case TIMED_WAITING:        Thread.yield();      break;case BLOCKED:    isSynchronized=true;  break;case TERMINATED:isSynchronized=false;break;}}}try {t.join();} catch (InterruptedException ex) {ex.printStackTrace();}return isSynchronized;}  }
class C{  private RefactoringStatus checkForConflictingRename(IField currentField,String newName){  RefactoringStatus status=new RefactoringStatus();  for (Iterator<IJavaElement> iter=fFinalSimilarElementToName.keySet().iterator(); iter.hasNext(); ) {    IJavaElement element=iter.next();    if (element instanceof IField) {      IField alreadyRegisteredField=(IField)element;      String alreadyRegisteredFieldName=fFinalSimilarElementToName.get(element);      if (alreadyRegisteredFieldName.equals(newName)) {        if (alreadyRegisteredField.getDeclaringType().equals(currentField.getDeclaringType())) {          String message=Messages.format(RefactoringCoreMessages.RenameTypeProcessor_cannot_rename_fields_same_new_name,new String[]{BasicElementLabels.getJavaElementName(alreadyRegisteredField.getElementName()),BasicElementLabels.getJavaElementName(currentField.getElementName()),BasicElementLabels.getJavaElementName(alreadyRegisteredField.getDeclaringType().getFullyQualifiedName('.')),BasicElementLabels.getJavaElementName(newName)});          status.addFatalError(message);          return status;        }      }    }  }  return status;}  }
class C{  public static void expressionAttributes(SimpleMethod method,Element element,String... attributeNames) throws ValidationException {  for (  String name : attributeNames) {    String attributeValue=element.getAttribute(name);    if (attributeValue.length() > 0) {      if (attributeValue.startsWith("${") && attributeValue.endsWith("}")) {        attributeValue=attributeValue.substring(2,attributeValue.length() - 1);      }      if (MiniLangUtil.containsScript(attributeValue)) {        handleError("Expression attribute \"" + name + "\" cannot contain a script (remove script).",method,element);      }    }  }}  }
class C{  public static void checkMethodSignature(final String signature){  int pos=0;  if (getChar(signature,0) == '<') {    pos=checkFormalTypeParameters(signature,pos);  }  pos=checkChar('(',signature,pos);  while ("ZCBSIFJDL[T".indexOf(getChar(signature,pos)) != -1) {    pos=checkTypeSignature(signature,pos);  }  pos=checkChar(')',signature,pos);  if (getChar(signature,pos) == 'V') {    ++pos;  } else {    pos=checkTypeSignature(signature,pos);  }  while (getChar(signature,pos) == '^') {    ++pos;    if (getChar(signature,pos) == 'L') {      pos=checkClassTypeSignature(signature,pos);    } else {      pos=checkTypeVariableSignature(signature,pos);    }  }  if (pos != signature.length()) {    throw new IllegalArgumentException(signature + ": error at index " + pos);  }}  }
class C{  Document processInstructions(Document doc){  for (  Object c : doc.getContent()) {    if (c instanceof ProcessingInstruction) {      try {        doc=processOneInstruction((ProcessingInstruction)c,doc);      } catch (      org.jdom2.transform.XSLTransformException ex) {        log.error("XSLT error while transforming with " + c + ", ignoring transform",ex);      }catch (      org.jdom2.JDOMException ex) {        log.error("JDOM error while transforming with " + c + ", ignoring transform",ex);      }catch (      java.io.IOException ex) {        log.error("IO error while transforming with " + c + ", ignoring transform",ex);      }    }  }  return doc;}  }
class C{  public boolean intersects(S2Cell cell){  if (isEmpty()) {    return false;  }  if (contains(cell.getCenter())) {    return true;  }  if (cell.contains(getCenter().toPoint())) {    return true;  }  if (!intersects(cell.getRectBound())) {    return false;  }  S2Point[] cellV=new S2Point[4];  S2LatLng[] cellLl=new S2LatLng[4];  for (int i=0; i < 4; ++i) {    cellV[i]=cell.getVertex(i);    cellLl[i]=new S2LatLng(cellV[i]);    if (contains(cellLl[i])) {      return true;    }  }  for (int i=0; i < 4; ++i) {    S1Interval edgeLng=S1Interval.fromPointPair(cellLl[i].lng().radians(),cellLl[(i + 1) & 3].lng().radians());    if (!lng.intersects(edgeLng)) {      continue;    }    final S2Point a=cellV[i];    final S2Point b=cellV[(i + 1) & 3];    if (edgeLng.contains(lng.lo())) {      if (intersectsLngEdge(a,b,lat,lng.lo())) {        return true;      }    }    if (edgeLng.contains(lng.hi())) {      if (intersectsLngEdge(a,b,lat,lng.hi())) {        return true;      }    }    if (intersectsLatEdge(a,b,lat.lo(),lng)) {      return true;    }    if (intersectsLatEdge(a,b,lat.hi(),lng)) {      return true;    }  }  return false;}  }
class C{  public boolean requiresTunnel(){  return route.address.sslSocketFactory != null && route.proxy.type() == Proxy.Type.HTTP;}  }
class C{  private void trackWeakOnes(int x,int y,int width,byte[] buffer){  for (int xx=x - 1; xx <= x + 1; xx++)   for (int yy=y - 1; yy <= y + 1; yy++) {    if (((int)buffer[(yy) * width + (xx)] & 0xFF) > 0 && ((int)buffer[(yy) * width + (xx)] & 0xFF) < 255) {      buffer[(yy) * width + (xx)]=(byte)0;      trackWeakOnes(xx,yy,width,buffer);    }  }}  }
class C{  public CF7(int numberOfVariables){  super(numberOfVariables,2,2);}  }
class C{  public void pushValue(ValueType value){  if (VERIFY_INTEGRITY && value == null) {    throw new IllegalArgumentException();  }  if (!isValid()) {    throw new IllegalStateException("accessing top or bottom frame");  }  slotList.add(value);}  }
class C{  public void addAlias(String entityAlias,String name,String field,String colAlias,Boolean primKey,Boolean groupBy,String function){  addAlias(entityAlias,name,field,colAlias,primKey,groupBy,function,null,null);}  }
class C{  private void doDelete() throws SearchException, PageException {  required("collection",action,"collection",collection);  getCollection().delete();}  }
class C{  private void initializeLiveAttributes(){  preserveAspectRatio=createLiveAnimatedPreserveAspectRatio();}  }
class C{  public ConnectionConfig(jmri.jmrix.NetworkPortAdapter p){  super(p);}  }
class C{  public static DiscordRecords series2Discords(double[] series,int discordsNumToReport,int windowSize,int paaSize,int alphabetSize,NumerosityReductionStrategy strategy,double nThreshold) throws Exception {  Date start=new Date();  NormalAlphabet normalA=new NormalAlphabet();  SAXRecords sax=sp.ts2saxViaWindow(series,windowSize,paaSize,normalA.getCuts(alphabetSize),strategy,nThreshold);  Date saxEnd=new Date();  LOGGER.debug("discretized in {}, words: {}, indexes: {}",SAXProcessor.timeToString(start.getTime(),saxEnd.getTime()),sax.getRecords().size(),sax.getIndexes().size());  ArrayList<MagicArrayEntry> magicArray=new ArrayList<MagicArrayEntry>(sax.getRecords().size());  for (  SAXRecord sr : sax.getRecords()) {    magicArray.add(new MagicArrayEntry(String.valueOf(sr.getPayload()),sr.getIndexes().size()));  }  Date hashEnd=new Date();  LOGGER.debug("Magic array filled in : {}",SAXProcessor.timeToString(saxEnd.getTime(),hashEnd.getTime()));  DiscordRecords discords=getDiscordsWithMagic(series,sax,windowSize,magicArray,discordsNumToReport,nThreshold);  Date end=new Date();  LOGGER.debug("{} discords found in {}",discords.getSize(),SAXProcessor.timeToString(start.getTime(),end.getTime()));  return discords;}  }
class C{  public CbusEventFilterFrame(CbusConsolePane console){  super();  log.debug("CbusEventFilterFrame(CbusEventFilter) ctor called");  for (int i=0; i < FILTERS; i++) {    _filter[i]=new CbusEventFilter();    _filterActive[i]=false;  }  _console=console;  this.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);  log.debug("CbusEventFilterFrame(CbusEventFilter) ctor done");}  }
class C{  public EntityEvaluationResponse evaluateUnmovedEnemy(Entity enemy,MovePath path,boolean useExtremeRange,boolean useLOSRange){  final String METHOD_NAME="EntityEvaluationResponse evaluateUnmovedEnemy(Entity,MovePath,IGame)";  getOwner().methodBegin(getClass(),METHOD_NAME);  try {    final double damageDiscount=0.25;    EntityEvaluationResponse returnResponse=new EntityEvaluationResponse();    if (enemy instanceof Aero) {      return returnResponse;    }    Coords finalCoords=path.getFinalCoords();    int myFacing=path.getFinalFacing();    Coords behind=finalCoords.translated((myFacing + 3) % 6);    Coords leftFlank=finalCoords.translated((myFacing + 2) % 6);    Coords rightFlank=finalCoords.translated((myFacing + 4) % 6);    Coords closest=getClosestCoordsTo(enemy.getId(),finalCoords);    if (closest == null) {      return returnResponse;    }    int range=closest.distance(finalCoords);    HexLine leftBounds;    HexLine rightBounds;    if (path.getEntity().canChangeSecondaryFacing()) {      leftBounds=new HexLine(behind,(myFacing + 2) % 6,getOwner());      rightBounds=new HexLine(behind,(myFacing + 4) % 6,getOwner());    } else {      leftBounds=new HexLine(behind,(myFacing + 1) % 6,getOwner());      rightBounds=new HexLine(behind,(myFacing + 5) % 6,getOwner());    }    boolean inMyLos=isInMyLoS(enemy,leftBounds,rightBounds);    if (inMyLos) {      returnResponse.addToMyEstimatedDamage(getMaxDamageAtRange(fireControl,path.getEntity(),range,useExtremeRange,useLOSRange) * damageDiscount);    }    returnResponse.addToEstimatedEnemyDamage(getMaxDamageAtRange(fireControl,enemy,range,useExtremeRange,useLOSRange) * damageDiscount);    if (canFlankAndKick(enemy,behind,leftFlank,rightFlank,myFacing)) {      returnResponse.addToEstimatedEnemyDamage(Math.ceil(enemy.getWeight() / 5.0) * damageDiscount);    }    return returnResponse;  }  finally {    getOwner().methodEnd(getClass(),METHOD_NAME);  }}  }
class C{  private static String[] splitValueAndUnit(String encodedValueAndUnit){  String[] result=new String[2];  int len=encodedValueAndUnit.length();  int firstLetterIndex=len;  while (firstLetterIndex > 0 && Character.isLetter(encodedValueAndUnit.charAt(firstLetterIndex - 1))) {    firstLetterIndex--;  }  result[0]=encodedValueAndUnit.substring(0,firstLetterIndex);  result[1]=encodedValueAndUnit.substring(firstLetterIndex);  return result;}  }
class C{  public void close(){  if (mDiskCache != null)   mDiskCache.close();}  }
class C{  public synchronized void checkState(State requiredState) throws IllegalStateException {  if (requiredState != currentState) {    throw new IllegalStateException(String.format(Locale.US,"Expected state %s, but in state %s",requiredState,currentState));  }}  }
class C{  public Term(String fld,BytesRefBuilder bytesBuilder){  field=fld;  this.bytes=bytesBuilder.toBytesRef();}  }
class C{  public long add(long instant,int amount){  return getWrappedField().add(instant,amount * iDivisor);}  }
class C{  public static boolean isEmptyValue(Object object){  return object == null || object.toString().length() == 0;}  }
class C{  public void handleEvent(Event evt){  EventTarget target=evt.getTarget();  if (target != evt.getCurrentTarget()) {    return;  }  MutationEvent mevt=(MutationEvent)evt;  if (mevt.getAttrName().equals(XBL_BINDINGS_ATTRIBUTE)) {    Element imp=(Element)target;    removeImport(imp);    addImport(imp);  }}  }
class C{  WorkspaceKeyAdapter(Workspace workspace){  this.workspace=workspace;}  }
class C{  public void assign(AbstractIntDoubleMap other){  if (!(other instanceof OpenIntDoubleHashMap)) {    super.assign(other);    return;  }  OpenIntDoubleHashMap source=(OpenIntDoubleHashMap)other;  OpenIntDoubleHashMap copy=(OpenIntDoubleHashMap)source.copy();  this.values=copy.values;  this.table=copy.table;  this.state=copy.state;  this.freeEntries=copy.freeEntries;  this.distinct=copy.distinct;  this.lowWaterMark=copy.lowWaterMark;  this.highWaterMark=copy.highWaterMark;  this.minLoadFactor=copy.minLoadFactor;  this.maxLoadFactor=copy.maxLoadFactor;}  }
class C{  public ArrayIterator(T[] array){  this.array=array;}  }
class C{  public static void addInvitationListener(Connection conn,InvitationListener listener){  InvitationsMonitor.getInvitationsMonitor(conn).addInvitationListener(listener);}  }
class C{  private void ensureHost(){  if (null != this.host && (null == this.hostIp || this.hostIp.equals(this.host.getAddress()))) {    logger.info("Using host = [{}] with datastores = [{}] to upload image.",this.host.getAddress(),this.host.getDatastores());    return;  }  ResourceList<Host> hostList=null;  if (null != this.hostIp) {    hostList=this.hostBackend.filterByAddress(this.hostIp,Optional.absent());  }  if ((null == hostList || 0 == hostList.getItems().size()) && this.lookForImageDatstoreHostsIfNeeded) {    hostList=this.hostBackend.filterByState(HostState.READY,Optional.of(1));  }  checkState(null != hostList && null != hostList.getItems() && hostList.getItems().size() > 0,"Could not find any host to upload image.");  logger.info("Host candidates for uploading image: {}.",hostList.getItems());  this.host=hostList.getItems().get(0);  logger.info("Using host = [{}] with datastores = [{}] to upload image.",this.host.getAddress(),this.host.getDatastores());}  }
class C{  public int readRawVarint32() throws IOException {  byte tmp=readRawByte();  if (tmp >= 0) {    return tmp;  }  int result=tmp & 0x7f;  if ((tmp=readRawByte()) >= 0) {    result|=tmp << 7;  } else {    result|=(tmp & 0x7f) << 7;    if ((tmp=readRawByte()) >= 0) {      result|=tmp << 14;    } else {      result|=(tmp & 0x7f) << 14;      if ((tmp=readRawByte()) >= 0) {        result|=tmp << 21;      } else {        result|=(tmp & 0x7f) << 21;        result|=(tmp=readRawByte()) << 28;        if (tmp < 0) {          for (int i=0; i < 5; i++) {            if (readRawByte() >= 0) {              return result;            }          }          throw InvalidProtocolBufferException.malformedVarint();        }      }    }  }  return result;}  }
class C{  public void registerEditor(RTEditText editor,boolean useRichTextEditing){  mEditors.put(editor.getId(),editor);  editor.register(this,mRTApi);  editor.setRichTextEditing(useRichTextEditing,false);  updateToolbarVisibility();}  }
class C{  public PromotionPanel(){}  }
class C{  @Override public Iterator<Map.Entry<K1,List<V1>>> iterator(){  return new EntryIterator<>(_map);}  }
class C{  public VLADBuilder(IndexReader reader,LireFeature lireFeature,int numDocsForVocabulary,int numClusters){  this.numDocsForVocabulary=numDocsForVocabulary;  this.numClusters=numClusters;  this.reader=reader;  this.lireFeature=lireFeature;}  }
class C{  public boolean isFullyZoomedOutY(){  if (mScaleY > mMinScaleY || mMinScaleY > 1f)   return false; else   return true;}  }
class C{  public void destroy(){  mWindowManager.removeView(mFrameLayout);}  }
class C{  private void addRoadElements(IHex x,int boardX,int boardY){  final int[] roadTypes=new int[]{Terrains.ROAD,Terrains.BRIDGE};  for (  int j : roadTypes) {    if ((x.getTerrain(j) != null) && (m_terrainColors[j] != null)) {      int[] roadHex={boardX,boardY,x.getTerrain(j).getExits()};      roadHexIndexes.addElement(roadHex);    }  }}  }
class C{  protected JButton makeOkButton(){  return makeOkButton("ok");}  }
class C{  public DistributedLogClientBuilder finagleNameStr(String finagleNameStr){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._routingServiceBuilder=RoutingUtils.buildRoutingService(finagleNameStr);  newBuilder._enableRegionStats=false;  return newBuilder;}  }
class C{  @Override public int hashCode(){  int hc=13 * sort;  if (sort >= ARRAY) {    for (int i=off, end=i + len; i < end; i++) {      hc=17 * (hc + buf[i]);    }  }  return hc;}  }
class C{  private static void copyContent(String classpathElement,WritableByteChannel outputChannel) throws IOException {  final File classpathElementFile=new File(classpathElement);  if (classpathElementFile.isDirectory()) {    ZipFiles.zipDirectory(classpathElementFile,Channels.newOutputStream(outputChannel));  } else {    Files.asByteSource(classpathElementFile).copyTo(Channels.newOutputStream(outputChannel));  }}  }
class C{  public boolean needsGui(){  if (inNeedsGui) {    return false;  }  inNeedsGui=true;  try {    if (getBeanContextPeer() != this) {      if (getBeanContextPeer().needsGui()) {        return true;      }    }    Object childs[]=copyChildren();    for (int i=0; i < childs.length; i++) {      if (childs[i] instanceof Component) {        return true;      }      Visibility v=getChildVisibility(childs[i]);      if (v != null && v.needsGui()) {        return true;      }    }    return false;  }  finally {    inNeedsGui=false;  }}  }
class C{  public LinLogDiscretizer(double linearBinWidth,double base){  super(new LinearDiscretizer(linearBinWidth),new LogDiscretizer(base));}  }
class C{  public void onSuccess(HttpResponse resp){}  }
class C{  @Before public void before() throws Exception {  conf=new AccumuloRdfConfiguration();  conf.setTablePrefix("triplestore_");  String tableName=GeoMesaGeoIndexer.getTableName(conf);  conf.setBoolean(ConfigUtils.USE_MOCK_INSTANCE,true);  conf.set(ConfigUtils.CLOUDBASE_USER,"USERNAME");  conf.set(ConfigUtils.CLOUDBASE_PASSWORD,"PASS");  conf.set(ConfigUtils.CLOUDBASE_AUTHS,"U");  TableOperations tops=ConfigUtils.getConnector(conf).tableOperations();  Set<String> toDel=Sets.newHashSet();  for (  String t : tops.list()) {    if (t.startsWith(tableName)) {      toDel.add(t);    }  }  for (  String t : toDel) {    tops.delete(t);  }  g=new GeoMesaGeoIndexer();  g.setConf(conf);  g.storeStatement(RyaStatement(A,schemaToTest,encodeMethod));  g.storeStatement(RyaStatement(B,schemaToTest,encodeMethod));  g.storeStatement(RyaStatement(C,schemaToTest,encodeMethod));  g.storeStatement(RyaStatement(D,schemaToTest,encodeMethod));  g.storeStatement(RyaStatement(F,schemaToTest,encodeMethod));  g.storeStatement(RyaStatement(E,schemaToTest,encodeMethod));  g.storeStatement(RyaStatement(G,schemaToTest,encodeMethod));}  }
class C{  public void clipToPossible(){  if (steps.size() == 0) {    return;  }  final Vector<MoveStep> goodSteps=new Vector<>();  for (  MoveStep step : steps) {    if (step.getMovementType(isEndStep(step)) != EntityMovementType.MOVE_ILLEGAL) {      goodSteps.addElement(step);    } else {      break;    }  }  steps=goodSteps;}  }
class C{  public Task<BlockSnapshotRestRep> expose(URI id){  return postTask(getIdUrl() + "/expose",id);}  }
class C{  public static void convertActivityToTranslucentBeforeL(Activity activity){  try {    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method method=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz);    method.setAccessible(true);    method.invoke(activity,new Object[]{null});  } catch (  Throwable t) {  }}  }
class C{  private static double computeAER(SymmetricalWordAlignment[] ref,SymmetricalWordAlignment[] hyp){  int tpC=0, refC=0, hypC=0;  double totalPrec=0.0, totalRecall=0.0, totalF=0.0;  if (ref.length != hyp.length)   throw new RuntimeException("Not same number of aligned sentences!");  for (int i=0; i < ref.length; ++i) {    int _tpC=0, _refC=0, _hypC=0;    SymmetricalWordAlignment r=ref[i], h=hyp[i];    assert (r.f().equals(h.f()));    assert (r.e().equals(h.e()));    for (int j=0; j < r.fSize(); ++j) {      for (      int k : r.f2e(j)) {        if (h.f2e(j).contains(k))         ++_tpC;      }      _refC+=r.f2e(j).size();      _hypC+=h.f2e(j).size();    }    tpC+=_tpC;    refC+=_refC;    hypC+=_hypC;    double _prec=(_hypC > 0) ? _tpC * 1.0 / _hypC : 0;    double _recall=(_refC > 0) ? _tpC * 1.0 / _refC : 0;    double _f=(_prec + _recall > 0) ? 2 * _prec * _recall / (_prec + _recall) : 0.0;    totalPrec+=_prec;    totalRecall+=_recall;    totalF+=_f;    if (DEBUG) {      int len=r.f().size() + r.e().size();      System.err.printf("sent\t%d\t%g\t%g\t%g\n",len,_prec,_recall,_f);    }  }  double prec=tpC * 1.0 / hypC;  double recall=tpC * 1.0 / refC;  double fMeasure=2 * prec * recall / (prec + recall);  if (DEBUG) {    System.err.printf("micro: Precision = %.3g, Recall = %.3g, F = %.3g (TP=%d, HC=%d, RC=%d)\n",prec,recall,fMeasure,tpC,hypC,refC);    System.err.printf("macro: Precision = %.3g, Recall = %.3g, F = %.3g\n",totalPrec / ref.length,totalRecall / ref.length,totalF / ref.length);  }  return 1 - fMeasure;}  }
class C{  private void scheduleAccessibilityEventSender(){  if (mAccessibilityEventSender == null) {    mAccessibilityEventSender=new AccessibilityEventSender();  } else {    removeCallbacks(mAccessibilityEventSender);  }  postDelayed(mAccessibilityEventSender,TIMEOUT_SEND_ACCESSIBILITY_EVENT);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe class index\n" + "\t(default: last)","c",1,"-c <class index>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  @Override @Generated("This method was generated using jOOQ-tools") default ReactiveSeq<Tuple10<Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>>> window(final WindowSpecification<T> specification1,final WindowSpecification<T> specification2,final WindowSpecification<T> specification3,final WindowSpecification<T> specification4,final WindowSpecification<T> specification5,final WindowSpecification<T> specification6,final WindowSpecification<T> specification7,final WindowSpecification<T> specification8,final WindowSpecification<T> specification9,final WindowSpecification<T> specification10){  return fromStream(Seq.super.window(specification1,specification2,specification3,specification4,specification5,specification6,specification7,specification8,specification9,specification10));}  }
class C{  @Override protected boolean hasLeafNodes(INode node){  if (node.getTotalLength() > 0)   return true;  if (node instanceof ICompositeNode) {    return ((ICompositeNode)node).getLastChild() instanceof ILeafNode;  }  return false;}  }
class C{  @Override public boolean isQueryAllowed(String qry){  HqlParser parser=HqlParser.getInstance(qry);  try {    parser.statement();    AST ast=parser.getAST();    if (isQueryRoot(ast)) {      AST queryStart=ast.getFirstChild();      if (isAllowedStatementBeginning(queryStart)) {        List<AST> selectStatements=getAllSelectStatements(ast);        if (!validateSelectStatements(qry,ast,selectStatements)) {          return false;        }      } else {        return false;      }    } else {      return false;    }  } catch (  RecognitionException e) {    LOG.error("Error parsing the hql-qry",e);    return false;  }catch (  TokenStreamException e) {    LOG.error("Error parsing the hql-qry",e);    return false;  }  return true;}  }
class C{  public boolean isPerfectSquareB(int num){  int i=1;  while (num > 0) {    num-=i;    i+=2;  }  return num == 0;}  }
class C{  @SuppressWarnings({"unchecked"}) public void addOrderedHandler(Object topic,IgniteBiInClosure<UUID,? extends GridCacheMessage> c){  IgniteLogger log0=log;  if (orderedHandlers.putIfAbsent(topic,c) == null) {    cctx.gridIO().addMessageListener(topic,new OrderedMessageListener((IgniteBiInClosure<UUID,GridCacheMessage>)c));    if (log0 != null && log0.isTraceEnabled())     log0.trace("Registered ordered cache communication handler [topic=" + topic + ", handler="+ c+ ']');  } else   if (log0 != null)   U.warn(log0,"Failed to register ordered cache communication handler because it is already " + "registered for this topic [topic=" + topic + ", handler="+ c+ ']');}  }
class C{  @RequestMapping(value="/contacts/filter",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @JsonView(Contact.WithAnnuals.class) @RolesAllowed(AuthoritiesConstants.ADMIN) @Transactional(readOnly=true) public ResponseEntity<Collection<Contact>> filter(@RequestBody Filter<Contact> filter) throws URISyntaxException {  log.debug("REST filter request");  Collection<Contact> contacts=contactRepository.findAll(filter.getSpec());  lazyService.initializeForJsonView(contacts,Contact.WithAnnuals.class);  return new ResponseEntity<>(contacts,HttpStatus.OK);}  }
class C{  public boolean isRemove(){  boolean is;  if (m_editFlag == FolderEditFlag.REMOVE)   is=true; else   is=false;  return is;}  }
class C{  public void translate(double x,double y){  translateX(x);  translateY(y);}  }
class C{  public boolean bit() throws IOException {  return read(1) != 0;}  }
class C{  public _ChangeType(final String[] flagStrings){  super(flagStrings);}  }
class C{  @Override public int available() throws IOException {  int a=0;  if (isReadAllowed()) {    a=super.available();  }  return a;}  }
class C{  protected double[] distributionForInstance(Instance instance) throws Exception {  double[] returnedDist=null;  if (m_Attribute > -1) {    if (instance.isMissing(m_Attribute)) {      returnedDist=new double[m_Info.numClasses()];      for (int i=0; i < m_Successors.length; i++) {        double[] help=m_Successors[i].distributionForInstance(instance);        if (help != null) {          for (int j=0; j < help.length; j++) {            returnedDist[j]+=m_Prop[i] * help[j];          }        }      }    } else     if (m_Info.attribute(m_Attribute).isNominal()) {      returnedDist=m_Successors[(int)instance.value(m_Attribute)].distributionForInstance(instance);    } else {      if (instance.value(m_Attribute) < m_SplitPoint) {        returnedDist=m_Successors[0].distributionForInstance(instance);      } else {        returnedDist=m_Successors[1].distributionForInstance(instance);      }    }  }  if ((m_Attribute == -1) || (returnedDist == null)) {    if (m_ClassProbs == null) {      return m_ClassProbs;    }    return m_ClassProbs.clone();  } else {    return returnedDist;  }}  }
class C{  public void toggle(){  toggle(false,null,null);}  }
class C{  protected void sequence_WildcardNewNotation(ISerializationContext context,Wildcard semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static String formatMinutes(int time){  if (time > 0) {    int hours=time / 60;    int minutes=time % 60;    return String.format(FORMAT_MINUTES,hours,minutes);  }  return "0:00";}  }
class C{  public boolean adjustValue(long key,float amount){  int index=index(key);  if (index < 0) {    return false;  } else {    _values[index]+=amount;    return true;  }}  }
class C{  public final void removeAllElements(){  for (int i=0; i < m_firstFree; i++) {    m_map[i]=null;  }  m_firstFree=0;}  }
class C{  public void handleUpdateLayout(ReactShadowNode node){  if (!ENABLED) {    mUIViewOperationQueue.enqueueUpdateLayout(Assertions.assertNotNull(node.getParent()).getReactTag(),node.getReactTag(),node.getScreenX(),node.getScreenY(),node.getScreenWidth(),node.getScreenHeight());    return;  }  applyLayoutBase(node);}  }
class C{  public static ByteString bagId(short queryId,short adviceId){  return ByteString.copyFrom(ByteBuffer.allocate(4).putShort(queryId).putShort(adviceId).array());}  }
class C{  public static int showConfirmDialog(Component parentComponent,Object message,String title,int optionType,int messageType) throws HeadlessException {  return showConfirmDialog(parentComponent,message,title,optionType,messageType,null);}  }
class C{  public boolean isPostServices(){  Object oo=get_Value(COLUMNNAME_IsPostServices);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public byte[] serialize(){  byte[] payloadData=null;  if (payload != null) {    payload.setParent(this);    payloadData=payload.serialize();  }  this.length=(short)(8 + ((payloadData == null) ? 0 : payloadData.length));  byte[] data=new byte[this.length];  ByteBuffer bb=ByteBuffer.wrap(data);  bb.putShort((short)this.sourcePort.getPort());  bb.putShort((short)this.destinationPort.getPort());  bb.putShort(this.length);  bb.putShort(this.checksum);  if (payloadData != null)   bb.put(payloadData);  if (this.parent != null && this.parent instanceof IPv4)   ((IPv4)this.parent).setProtocol(IpProtocol.UDP);  if (this.checksum == 0) {    bb.rewind();    int accumulation=0;    if (this.parent != null && this.parent instanceof IPv4) {      IPv4 ipv4=(IPv4)this.parent;      accumulation+=((ipv4.getSourceAddress().getInt() >> 16) & 0xffff) + (ipv4.getSourceAddress().getInt() & 0xffff);      accumulation+=((ipv4.getDestinationAddress().getInt() >> 16) & 0xffff) + (ipv4.getDestinationAddress().getInt() & 0xffff);      accumulation+=ipv4.getProtocol().getIpProtocolNumber() & 0xff;      accumulation+=this.length & 0xffff;    }    for (int i=0; i < this.length / 2; ++i) {      accumulation+=0xffff & bb.getShort();    }    if (this.length % 2 > 0) {      accumulation+=(bb.get() & 0xff) << 8;    }    accumulation=((accumulation >> 16) & 0xffff) + (accumulation & 0xffff);    this.checksum=(short)(~accumulation & 0xffff);    bb.putShort(6,this.checksum);  }  return data;}  }
class C{  @Override public double[][] predictIntervals(Instance inst,double confidenceLevel) throws Exception {  inst=filterInstance(inst);  Matrix k=new Matrix(m_NumTrain,1);  for (int i=0; i < m_NumTrain; i++) {    k.set(i,0,m_kernel.eval(-1,i,inst));  }  double estimate=k.transpose().times(m_t).get(0,0) + m_avg_target;  double sigma=computeStdDev(inst,k);  confidenceLevel=1.0 - ((1.0 - confidenceLevel) / 2.0);  double z=Statistics.normalInverse(confidenceLevel);  double[][] interval=new double[1][2];  interval[0][0]=estimate - z * sigma;  interval[0][1]=estimate + z * sigma;  interval[0][0]=(interval[0][0] - m_Blin) / m_Alin;  interval[0][1]=(interval[0][1] - m_Blin) / m_Alin;  return interval;}  }
class C{  public static double rMSErawFitness(boolean useTrainingData,GEPIndividual ind,int chromosomeNum){  double sumOfSquaredRelativeError=0.0;  double expectedResult;  double result;  double error;  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  double dvValues[]=dv.getDependentVariableValues(chromosomeNum);  for (int i=0; i < dvValues.length; i++) {    expectedResult=dvValues[i];    result=ind.eval(chromosomeNum,useTrainingData,i);    if (expectedResult == 0.0) {      expectedResult=RELATIVE_ERROR_ZERO_FACTOR;      result+=RELATIVE_ERROR_ZERO_FACTOR;      System.err.println("Warning: expected result (test value) is 0 in rMSE fitness calculation. Adjusting to avoid division by zero.");    }    error=(result - expectedResult) / expectedResult;    sumOfSquaredRelativeError+=error * error;  }  return (sumOfSquaredRelativeError / dvValues.length);}  }
class C{  public int nextInt(int n){  if (n <= 0)   throw new IllegalArgumentException("n must be positive, got: " + n);  if ((n & -n) == n) {    int y;    if (mti >= N) {      int kk;      final int[] mt=this.mt;      final int[] mag01=this.mag01;      for (kk=0; kk < N - M; kk++) {        y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);        mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];      }      for (; kk < N - 1; kk++) {        y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);        mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];      }      y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);      mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];      mti=0;    }    y=mt[mti++];    y^=y >>> 11;    y^=(y << 7) & TEMPERING_MASK_B;    y^=(y << 15) & TEMPERING_MASK_C;    y^=(y >>> 18);    return (int)((n * (long)(y >>> 1)) >> 31);  }  int bits, val;  do {    int y;    if (mti >= N) {      int kk;      final int[] mt=this.mt;      final int[] mag01=this.mag01;      for (kk=0; kk < N - M; kk++) {        y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);        mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];      }      for (; kk < N - 1; kk++) {        y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);        mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];      }      y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);      mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];      mti=0;    }    y=mt[mti++];    y^=y >>> 11;    y^=(y << 7) & TEMPERING_MASK_B;    y^=(y << 15) & TEMPERING_MASK_C;    y^=(y >>> 18);    bits=(y >>> 1);    val=bits % n;  } while (bits - val + (n - 1) < 0);  return val;}  }
class C{  private static void loadRenderArgs(){  boolean reconfigSupported=true;  boolean unsupportedPlatform=BourneUtil.getViprClient().vdcs().isGeoSetup();  if (unsupportedPlatform) {    reconfigSupported=false;    Logger.info(UNSUPPORTED_KEY + "  isGeo: " + unsupportedPlatform);    flash.put("warning",MessagesUtils.get(UNSUPPORTED_KEY));  }  ClusterState clusterState=getClusterStateFromCoordinator();  if (clusterState == null || !clusterState.equals(ClusterState.STABLE)) {    reconfigSupported=false;    flash.put("warning",MessagesUtils.get(UNSTABLE_KEY));  }  renderArgs.put("reconfigSupported",reconfigSupported);  renderArgs.put("vip",vip);}  }
class C{  public String cancelLocalize(){  setLocalizeVisible(false);  menuBean.setCurrentPageLink(MenuBean.LINK_SERVICE_EDIT);  return null;}  }
class C{  private MustacheTemplateEngine(){  mustacheFactory=new DefaultMustacheFactory("templates");}  }
class C{  protected void initialize(){  String part;  URLClassLoader sysLoader;  URL[] urls;  m_Cache=new Hashtable<String,HashSet<String>>();  sysLoader=(URLClassLoader)getClass().getClassLoader();  urls=sysLoader.getURLs();  for (  URL url : urls) {    if (VERBOSE) {      System.out.println("Classpath-part: " + part);    }    part=url.toString();    initFromClasspathPart(part);  }}  }
class C{  Orientation findOrientation(Triangle oth){  if (this.a == oth.a) {    if (this.b == oth.c) {      return Orientation.ORIENT_AB_AC;    }    if (this.c == oth.b) {      return Orientation.ORIENT_CA_BA;    }  }  if (this.a == oth.b) {    if (this.b == oth.a) {      return Orientation.ORIENT_AB_BA;    }    if (this.c == oth.c) {      return Orientation.ORIENT_CA_CB;    }  }  if (this.a == oth.c) {    if (this.b == oth.b) {      return Orientation.ORIENT_AB_CB;    }    if (this.c == oth.a) {      return Orientation.ORIENT_CA_AC;    }  }  if (this.b == oth.b && this.c == oth.a) {    return Orientation.ORIENT_BC_BA;  }  if (this.b == oth.c && this.c == oth.b) {    return Orientation.ORIENT_BC_CB;  }  if (this.b == oth.a && this.c == oth.c) {    return Orientation.ORIENT_BC_AC;  }  return null;}  }
class C{  private void addRequestHeaders(InnerState innerState,HttpGet request){  if (innerState.mContinuingDownload) {    if (innerState.mHeaderETag != null) {      request.addHeader("If-Match",innerState.mHeaderETag);    }    request.addHeader("Range","bytes=" + innerState.mBytesSoFar + "-");  }}  }
class C{  public RotationComponent(){  this(0);}  }
class C{  private String soapMessage2String(SOAPMessage msg){  if (msg == null)   return "";  try (ByteArrayOutputStream streamOut=new ByteArrayOutputStream()){    Transformer transformer=TransformerFactory.newInstance().newTransformer();    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");    Source sc=msg.getSOAPPart().getContent();    StreamResult result=new StreamResult(streamOut);    transformer.transform(sc,result);    String strMessage=streamOut.toString();    return escapeXmlString(strMessage);  } catch (  Exception e) {    System.out.println("Exception in printing SOAP message: " + e.getMessage());    return "";  }}  }
class C{  public AudioData(){  this(IoBuffer.allocate(0).flip());}  }
class C{  public String toXmlErrorMessage(){  return toXmlErrorMessage(false);}  }
class C{  public static float[] cmykFromRgb(int rgbColor){  int red=(0xff0000 & rgbColor) >> 16;  int green=(0xff00 & rgbColor) >> 8;  int blue=(0xff & rgbColor);  float black=Math.min(1.0f - red / 255.0f,Math.min(1.0f - green / 255.0f,1.0f - blue / 255.0f));  float cyan=1.0f;  float magenta=1.0f;  float yellow=1.0f;  if (black != 1.0f) {    cyan=(1.0f - (red / 255.0f) - black) / (1.0f - black);    magenta=(1.0f - (green / 255.0f) - black) / (1.0f - black);    yellow=(1.0f - (blue / 255.0f) - black) / (1.0f - black);  }  return new float[]{cyan,magenta,yellow,black};}  }
class C{  public synchronized <T extends Object>T enqueue(IDbOperation<?> operation){  if (operation.getCallback() == null) {    return execute(operation);  }synchronized (opQueue) {    opQueue.add(operation);  }  new Thread(this).start();  return null;}  }
class C{  private void printStatusMessages(AbstractTestSuiteChromosome<? extends ExecutableChromosome> suite,int coveredLines,double fitness){  if (coveredLines > maxCoveredLines) {    maxCoveredLines=coveredLines;    logger.info("(Lines) Best individual covers " + coveredLines + "/"+ lines+ " lines");    logger.info("Fitness: " + fitness + ", size: "+ suite.size()+ ", length: "+ suite.totalLengthOfTestCases());  }  if (fitness < bestFitness) {    logger.info("(Fitness) Best individual covers " + coveredLines + "/"+ lines+ " lines");    bestFitness=fitness;    logger.info("Fitness: " + fitness + ", size: "+ suite.size()+ ", length: "+ suite.totalLengthOfTestCases());  }}  }
class C{  public static void copy(byte[] in,OutputStream out) throws IOException {  Assert.notNull(in,"No input byte array specified");  Assert.notNull(out,"No OutputStream specified");  out.write(in);}  }
class C{  public FacebookDialogException(String message,int errorCode,String failingUrl){  super(message);  this.errorCode=errorCode;  this.failingUrl=failingUrl;}  }
class C{  public final synchronized void removeSubTree(){  abortSearch();  game.removeSubTree();  updateComputeThreads();  setSelection();  updateGUI();}  }
class C{  public static String cos(String[] params) throws FBSQLParseException {  if (params.length != 1)   throw new FBSQLParseException("Incorrect number of " + "parameters of function cos : " + params.length);  return "cos(" + params[0] + ")";}  }
class C{  public static Object lowest(GeoTimeSerie gts) throws WarpScriptException {  Object[] parms=new Object[6];  int i=0;  parms[i++]=0L;  parms[i++]=0L;  parms[i++]=Arrays.copyOf(gts.ticks,gts.values);  if (null != gts.locations) {    parms[i++]=Arrays.copyOf(gts.locations,gts.values);  } else {    parms[i++]=new long[gts.values];    Arrays.fill((long[])parms[i - 1],GeoTimeSerie.NO_LOCATION);  }  if (null != gts.elevations) {    parms[i++]=Arrays.copyOf(gts.elevations,gts.values);  } else {    parms[i++]=new long[gts.values];    Arrays.fill((long[])parms[i - 1],GeoTimeSerie.NO_ELEVATION);  }  parms[i++]=new Object[gts.values];  for (int j=0; j < gts.values; j++) {    ((Object[])parms[5])[j]=valueAtIndex(gts,j);  }  Object[] result=(Object[])((WarpScriptAggregatorFunction)WarpScriptLib.getFunction(WarpScriptLib.MAPPER_LOWEST)).apply(parms);  return result[3];}  }
class C{  public void saveZipFile(MimeMultipart inputZipFile){  try {    MimeBodyPart bdp=(MimeBodyPart)inputZipFile.getBodyPart(0);    DataHandler dh=bdp.getDataHandler();    File part=new File(getEntryPath());    FileOutputStream fos=new FileOutputStream(part);    dh.writeTo(fos);    fos.close();    System.gc();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public DefaultUriDataSource(Context context,TransferListener listener,String userAgent,boolean allowCrossProtocolRedirects){  this(context,listener,new DefaultHttpDataSource(userAgent,null,listener,DefaultHttpDataSource.DEFAULT_CONNECT_TIMEOUT_MILLIS,DefaultHttpDataSource.DEFAULT_READ_TIMEOUT_MILLIS,allowCrossProtocolRedirects));}  }
class C{  @Override public void onTabClosed(long time,int id,int nextId,boolean incognito){  super.onTabClosed(time,id,nextId,incognito);  if (mClosedTab != null) {    TabModel nextModel=mTabModelSelector.getModelForTabId(nextId);    if (nextModel != null) {      LayoutTab nextLayoutTab=createLayoutTab(nextId,nextModel.isIncognito(),NO_CLOSE_BUTTON,NO_TITLE);      nextLayoutTab.setDrawDecoration(false);      mLayoutTabs=new LayoutTab[]{nextLayoutTab,mClosedTab};      updateCacheVisibleIds(new LinkedList<Integer>(Arrays.asList(nextId,mClosedTab.getId())));    } else {      mLayoutTabs=new LayoutTab[]{mClosedTab};    }    forceAnimationToFinish();    mAnimatedTab=mClosedTab;    addToAnimation(this,Property.DISCARD_AMOUNT,0,getDiscardRange(),TAB_CLOSED_ANIMATION_DURATION,0,false,BakedBezierInterpolator.FADE_OUT_CURVE);    mClosedTab=null;    if (nextModel != null) {      mTabModelSelector.selectModel(nextModel.isIncognito());    }  }  startHiding(nextId,false);}  }
class C{  public void updateSeries(CandleSeries source,int skip,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleSeries).");  }  if (getLength() == null || getLength() < 1) {    throw new IllegalArgumentException("MA period must be greater than zero.");  }  if (source.getItemCount() > skip) {    if (source.getItemCount() > 1) {      CandleItem candleItem=(CandleItem)source.getDataItem(skip);      CandleItem prevCandleItem=(CandleItem)source.getDataItem(skip - 1);      double prevTypicalPrice=(prevCandleItem.getHigh() + prevCandleItem.getLow() + prevCandleItem.getClose()) / 3;      if (this.getRollingCandle()) {        prevTypicalPrice=(source.getPreviousRollingCandle().getClose() + source.getPreviousRollingCandle().getHigh() + source.getPreviousRollingCandle().getLow()) / 3;      }      if (0 != candleItem.getClose()) {        double typicalPrice=(candleItem.getClose() + candleItem.getHigh() + candleItem.getLow()) / 3;        double value=typicalPrice * candleItem.getVolume();        if (typicalPrice < prevTypicalPrice)         value=typicalPrice * candleItem.getVolume() * -1;        if (this.getRollingCandle()) {          typicalPrice=(source.getRollingCandle().getClose() + source.getRollingCandle().getHigh() + source.getRollingCandle().getLow()) / 3;          value=typicalPrice * source.getRollingCandle().getVolume();          if (typicalPrice < prevTypicalPrice)           value=typicalPrice * source.getRollingCandle().getVolume() * -1;        }        if (value > 0) {          positiveSum=positiveSum + value;        } else {          negativeSum=negativeSum + Math.abs(value);        }        if (this.yyValues.size() == getLength()) {          if (newBar) {            if (this.yyValues.getLast() > 0) {              positiveSum=positiveSum - this.yyValues.getLast();            } else {              negativeSum=negativeSum - Math.abs(this.yyValues.getLast());            }            this.yyValues.removeLast();            this.yyValues.addFirst(value);            this.volValues.removeLast();            this.volValues.addFirst(candleItem.getVolume());          } else {            if (this.yyValues.getFirst() > 0) {              positiveSum=positiveSum - this.yyValues.getFirst();            } else {              negativeSum=negativeSum - Math.abs(this.yyValues.getFirst());            }            this.yyValues.removeFirst();            this.yyValues.addFirst(value);          }        } else {          if (newBar) {            this.yyValues.addFirst(value);            this.volValues.addFirst(candleItem.getVolume());          } else {            if (this.yyValues.getFirst() > 0) {              positiveSum=positiveSum - this.yyValues.getFirst();            } else {              negativeSum=negativeSum - Math.abs(this.yyValues.getFirst());            }            this.yyValues.removeFirst();            this.yyValues.addFirst(value);            this.volValues.removeFirst();            this.volValues.addFirst(candleItem.getVolume());          }        }        if (this.yyValues.size() == this.getLength()) {          if (negativeSum == 0)           negativeSum=1;          double mfi=100 - (100 / (1 + (positiveSum / negativeSum)));          if (newBar) {            MoneyFlowIndexItem dataItem=new MoneyFlowIndexItem(candleItem.getPeriod(),new BigDecimal(mfi));            this.add(dataItem,false);          } else {            MoneyFlowIndexItem dataItem=(MoneyFlowIndexItem)this.getDataItem(this.getItemCount() - 1);            dataItem.setMoneyFlowIndex(mfi);          }        }      }    }  }}  }
class C{  public void run(){  ActivationLibrary.deactivate(this,getID());}  }
class C{  public void validateSourceS3Files(List<StorageFile> expectedStorageFiles,List<S3ObjectSummary> actualS3Files,String storageName,BusinessObjectDataKey businessObjectDataKey){  validateS3Files(expectedStorageFiles,actualS3Files,storageName,businessObjectDataKey,"registered");}  }
class C{  @Override protected void onLoad(){  super.onLoad();  shim.setPixelSize(getOffsetWidth(),getOffsetHeight());  add(shim,0,0);}  }
class C{  public static String max(String content,int max){  return max(content,max,"");}  }
class C{  public IndexOutOfBoundsException(java.lang.String s){  super(s);}  }
class C{  public ServiceOperationException(){  super();}  }
class C{  public GUIMenuBar(final GUIFrame frame){  this.frame=frame;  JMenu domainMenu=new JMenu("Domain");  JMenuItem newDomain=new JMenuItem("New");  newDomain.addActionListener(null);  domainMenu.add(newDomain);  JMenuItem openDomain=new JMenuItem("Open File");  openDomain.addActionListener(null);  domainMenu.add(openDomain);  saveDomain=new JMenuItem("Save");  saveDomain.addActionListener(null);  KeyStroke keyStrokeToOpen=KeyStroke.getKeyStroke(KeyEvent.VK_S,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());  saveDomain.setAccelerator(keyStrokeToOpen);  domainMenu.add(saveDomain);  saveDomainAs=new JMenuItem("Save As...");  saveDomainAs.addActionListener(null);  domainMenu.add(saveDomainAs);  domainMenu.add(new JSeparator());  JMenu importMenu=new JMenu("Import");  domainMenu.add(importMenu);  final JMenuItem importState=new JMenuItem("Dialogue State");  importState.addActionListener(null);  importMenu.add(importState);  final JMenuItem importParams=new JMenuItem("Parameters");  importParams.addActionListener(null);  importMenu.add(importParams);  JMenu exportMenu=new JMenu("Export");  domainMenu.add(exportMenu);  exportState=new JMenuItem("Dialogue State");  exportState.addActionListener(null);  exportMenu.add(exportState);  exportParams=new JMenuItem("Parameters");  exportParams.addActionListener(null);  exportMenu.add(exportParams);  domainMenu.add(new JSeparator());  final JMenuItem exit=new JMenuItem("Close OpenDial");  exit.addActionListener(null);  domainMenu.add(exit);  add(domainMenu);  JMenu traceMenu=new JMenu("Interaction");  resetItem=new JMenuItem("Reset");  resetItem.addActionListener(null);  KeyStroke keyStrokeToReset=KeyStroke.getKeyStroke(KeyEvent.VK_R,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());  resetItem.setAccelerator(keyStrokeToReset);  traceMenu.add(resetItem);  freezeItem=new JMenuItem("Pause/Resume");  freezeItem.addActionListener(null);  KeyStroke keyStrokeToPause=KeyStroke.getKeyStroke(KeyEvent.VK_P,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask());  freezeItem.setAccelerator(keyStrokeToPause);  traceMenu.add(freezeItem);  traceMenu.add(new JSeparator());  JMenuItem connect=new JMenuItem("Connect to Remote Client");  connect.addActionListener(null);  traceMenu.add(connect);  JMenu roleMenu=new JMenu("Interaction role");  ButtonGroup modeGroup=new ButtonGroup();  JRadioButtonMenuItem userRole=new JRadioButtonMenuItem("User");  ItemListener inversion=null;  modeGroup.add(userRole);  userRole.setSelected(true);  roleMenu.add(userRole);  systemRole=new JRadioButtonMenuItem("System");  modeGroup.add(systemRole);  roleMenu.add(systemRole);  traceMenu.add(roleMenu);  userRole.addItemListener(inversion);  systemRole.addItemListener(inversion);  traceMenu.add(new JSeparator());  JMenu runThrough=new JMenu("Import Dialogue From...");  JMenuItem normal=new JMenuItem("Normal Transcript");  JMenuItem woz=new JMenuItem("Wizard-of-Oz Transcript");  runThrough.add(normal);  runThrough.add(woz);  normal.addActionListener(null);  woz.addActionListener(null);  traceMenu.add(runThrough);  final JMenuItem saveInteraction=new JMenuItem("Save Dialogue As...");  saveInteraction.addActionListener(null);  traceMenu.add(saveInteraction);  add(traceMenu);  JMenu optionMenu=new JMenu("Options");  inputMenu=new JMenu("Audio input");  ButtonGroup inputGroup=new ButtonGroup();  List<Mixer.Info> mixers=AudioUtils.getInputMixers();  for (  final Mixer.Info mixer : mixers) {    JRadioButtonMenuItem mixerButton=new JRadioButtonMenuItem(mixer.getName());    mixerButton.addActionListener(null);    inputGroup.add(mixerButton);    inputMenu.add(mixerButton);    if (mixer.equals(frame.getSystem().getSettings().inputMixer)) {      mixerButton.setSelected(true);    }  }  optionMenu.add(inputMenu);  outputMenu=new JMenu("Audio output");  ButtonGroup outputGroup=new ButtonGroup();  for (  final Mixer.Info mixer : AudioUtils.getOutputMixers()) {    JRadioButtonMenuItem mixerButton=new JRadioButtonMenuItem(mixer.getName());    mixerButton.addActionListener(null);    outputGroup.add(mixerButton);    outputMenu.add(mixerButton);    if (mixer.equals(frame.getSystem().getSettings().outputMixer)) {      mixerButton.setSelected(true);    }  }  optionMenu.add(outputMenu);  JMenu interactionMenu=new JMenu("View Utterances");  ButtonGroup group=new ButtonGroup();  JRadioButtonMenuItem singleBest=new JRadioButtonMenuItem("Single-best");  singleBest.addActionListener(null);  JRadioButtonMenuItem threeBest=new JRadioButtonMenuItem("3-best list");  threeBest.addActionListener(null);  JRadioButtonMenuItem allBest=new JRadioButtonMenuItem("Full N-best list");  allBest.addActionListener(null);  group.add(singleBest);  group.add(threeBest);  group.add(allBest);  allBest.setSelected(true);  interactionMenu.add(singleBest);  interactionMenu.add(threeBest);  interactionMenu.add(allBest);  optionMenu.add(interactionMenu);  JMenu recording=new JMenu("Record Intermediate States");  ButtonGroup group2=new ButtonGroup();  JRadioButtonMenuItem none=new JRadioButtonMenuItem("None");  none.addActionListener(null);  JRadioButtonMenuItem last=new JRadioButtonMenuItem("Last input");  last.addActionListener(null);  JRadioButtonMenuItem all=new JRadioButtonMenuItem("Full history");  all.addActionListener(null);  group2.add(none);  group2.add(last);  group2.add(all);switch (frame.getSystem().getSettings().recording) {case NONE:    none.setSelected(true);  break;case LAST_INPUT:last.setSelected(true);break;case ALL:all.setSelected(true);break;}recording.add(none);recording.add(last);recording.add(all);optionMenu.add(recording);stateDisplayMenu=new JMenuItem("Show/Hide parameters");stateDisplayMenu.addActionListener(null);optionMenu.add(stateDisplayMenu);optionMenu.add(new JSeparator());JMenuItem config=new JMenuItem("Settings");config.addActionListener(null);optionMenu.add(config);add(optionMenu);JMenu helpMenu=new JMenu("Help");JMenuItem aboutItem=new JMenuItem("About");aboutItem.addActionListener(null);JMenuItem docItem=new JMenuItem("Documentation");docItem.addActionListener(null);helpMenu.add(aboutItem);helpMenu.add(docItem);add(helpMenu);}  }
class C{  public void rotate(float rot){  Matrix3f tmp=new Matrix3f();  tmp.loadRotate(rot);  multiply(tmp);}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.196 -0400",hash_original_method="E25718AB6960845CFAC1401B9BC3C91E",hash_generated_method="7CEA953081E3CE1BD0564A61883076F1") public static void forceDelete(File file) throws IOException {  if (file.isDirectory()) {    deleteDirectory(file);  } else {    boolean filePresent=file.exists();    if (!file.delete()) {      if (!filePresent) {        throw new FileNotFoundException("File does not exist: " + file);      }      String message="Unable to delete file: " + file;      throw new IOException(message);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:48.230 -0500",hash_original_method="DC309B64F8D7236BD3D5DA9945B2E659",hash_generated_method="68C78FD967A9D3987D5B594BFCB3C1DD") protected boolean filterHeader(int index){  if (this.headerName == null)   return true;  final String name=((Header)this.allHeaders.get(index)).getName();  return this.headerName.equalsIgnoreCase(name);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  private String splitLines(String lines,int width){  String lineSeparator=System.getProperty("line.separator");  StringBuilder res=new StringBuilder();  StringTokenizer st=new StringTokenizer(lines,"\r\n");  while (st.hasMoreTokens()) {    String line=st.nextToken();    while (line.length() > width) {      res.append(line.substring(0,width));      res.append(lineSeparator);      line=line.substring(width);    }    res.append(line);    res.append(lineSeparator);  }  return res.toString();}  }
class C{  public boolean removeChildEdge(Edge e){  edgeCheck(e,true);  return removeChild(getTargetNode(e.getRow()));}  }
class C{  public Boolean isExpressCheckoutIndicator(){  return expressCheckoutIndicator;}  }
class C{  private static ImmutableMap<String,FileDescriptorProto> computeDescriptorProtoIndex(FileDescriptorSet fileDescriptorSet){  ImmutableMap.Builder<String,FileDescriptorProto> resultBuilder=ImmutableMap.builder();  for (  FileDescriptorProto descriptorProto : fileDescriptorSet.getFileList()) {    resultBuilder.put(descriptorProto.getName(),descriptorProto);  }  return resultBuilder.build();}  }
class C{  public static Builder builder(AltFormat format){  return new Builder(format);}  }
class C{  protected void endDoc() throws PrinterException {  if (mPSStream != null) {    mPSStream.println(EOF_COMMENT);    mPSStream.flush();    if (mDestType != RasterPrinterJob.STREAM) {      mPSStream.close();    }  }  if (mDestType == RasterPrinterJob.PRINTER) {    PrintService pServ=getPrintService();    if (pServ != null) {      mDestination=pServ.getName();      if (isMac) {        PrintServiceAttributeSet psaSet=pServ.getAttributes();        if (psaSet != null) {          mDestination=psaSet.get(PrinterName.class).toString();        }      }    }    PrinterSpooler spooler=new PrinterSpooler();    java.security.AccessController.doPrivileged(spooler);    if (spooler.pex != null) {      throw spooler.pex;    }  }}  }
class C{  public static void awaitTermination(Logger logger,ExecutorService executor){  try {    if (!executor.awaitTermination(EXECUTOR_SHUTDOWN_INTERVAL_MINUTES,TimeUnit.MINUTES)) {      logger.log(Level.WARNING,"Executor service can't be shutdown for AWS. Trying to shutdown now...");      executor.shutdownNow();    }    logger.log(Level.FINE,"Executor service shutdown for AWS");  } catch (  InterruptedException e) {    logger.log(Level.SEVERE,Utils.toString(e));    Thread.currentThread().interrupt();  }catch (  Exception e) {    logger.log(Level.SEVERE,Utils.toString(e));  }}  }
class C{  boolean isExposedOnExit(HeapVariable<Object> H){  for (Iterator<HeapOperand<Object>> i=iterateHeapUses(H); i.hasNext(); ) {    HeapOperand<Object> op=i.next();    Instruction s=op.instruction;    if (exits.contains(s)) {      return true;    }  }  return false;}  }
class C{  public K progress(Dialog dialog){  return progress((Object)dialog);}  }
class C{  @SuppressWarnings("unchecked") public void initialize(Subject subject,CallbackHandler callbackHandler,Map<String,?> sharedState,Map<String,?> options){  this.subject=subject;  this.callbackHandler=callbackHandler;  this.sharedState=(Map<String,Object>)sharedState;  this.options=options;  debug="true".equalsIgnoreCase((String)options.get("debug"));  storeKey="true".equalsIgnoreCase((String)options.get("storeKey"));  doNotPrompt="true".equalsIgnoreCase((String)options.get("doNotPrompt"));  useTicketCache="true".equalsIgnoreCase((String)options.get("useTicketCache"));  useKeyTab="true".equalsIgnoreCase((String)options.get("useKeyTab"));  ticketCacheName=(String)options.get("ticketCache");  keyTabName=(String)options.get("keyTab");  if (keyTabName != null) {    keyTabName=sun.security.krb5.internal.ktab.KeyTab.normalize(keyTabName);  }  princName=(String)options.get("principal");  refreshKrb5Config="true".equalsIgnoreCase((String)options.get("refreshKrb5Config"));  renewTGT="true".equalsIgnoreCase((String)options.get("renewTGT"));  String isInitiatorValue=((String)options.get("isInitiator"));  if (isInitiatorValue == null) {  } else {    isInitiator="true".equalsIgnoreCase(isInitiatorValue);  }  tryFirstPass="true".equalsIgnoreCase((String)options.get("tryFirstPass"));  useFirstPass="true".equalsIgnoreCase((String)options.get("useFirstPass"));  storePass="true".equalsIgnoreCase((String)options.get("storePass"));  clearPass="true".equalsIgnoreCase((String)options.get("clearPass"));  if (debug) {    System.out.print("Debug is  " + debug + " storeKey "+ storeKey+ " useTicketCache "+ useTicketCache+ " useKeyTab "+ useKeyTab+ " doNotPrompt "+ doNotPrompt+ " ticketCache is "+ ticketCacheName+ " isInitiator "+ isInitiator+ " KeyTab is "+ keyTabName+ " refreshKrb5Config is "+ refreshKrb5Config+ " principal is "+ princName+ " tryFirstPass is "+ tryFirstPass+ " useFirstPass is "+ useFirstPass+ " storePass is "+ storePass+ " clearPass is "+ clearPass+ "\n");  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"cmpsb");  new CmpsGenerator().generate(environment,ReilHelpers.toReilAddress(instruction.getAddress()).toLong(),OperandSize.BYTE,instructions);}  }
class C{  RegionCommit(TXCommitMessage msg){  this.msg=msg;}  }
class C{  public ConcurrentLazy(){  super();}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("SuspendThreadTarg");  targetClass=(ClassType)bpe.location().declaringType();  mainThread=bpe.thread();  EventRequestManager erm=vm().eventRequestManager();  Location loc1=findMethod(targetClass,"bkpt","()V").location();  bkptRequest=erm.createBreakpointRequest(loc1);  bkptRequest.setSuspendPolicy(EventRequest.SUSPEND_EVENT_THREAD);  bkptRequest.enable();  debuggeeCountField=targetClass.fieldByName("count");  try {    addListener(this);  } catch (  Exception ex) {    ex.printStackTrace();    failure("failure: Could not add listener");    throw new Exception("SuspendThreadTest: failed");  }  int prevBkptCount;  vm().resume();  while (bkptCount < maxBkpts) {    prevBkptCount=bkptCount;    try {      Thread.sleep(5000);    } catch (    InterruptedException ee) {    }    if (prevBkptCount == bkptCount) {      failure("failure: test hung");      break;    }    prevBkptCount=bkptCount;  }  println("done with loop");  bkptRequest.disable();  removeListener(this);  if (!testFailed) {    println("SuspendThreadTest: passed");  } else {    throw new Exception("SuspendThreadTest: failed");  }}  }
class C{  public boolean hasExportRequestor(){  return hasExtension(DocumentExportRequestor.class);}  }
class C{  public void writeTripPlansFile(Network network,DgCommodities commodities,String outputDirectory,String filename,double startTimeSecMorningPeak,double endTimeSecMorningPeak){  this.network=network;  this.population=ScenarioUtils.createScenario(ConfigUtils.createConfig()).getPopulation();  this.startTimeSecMorningPeak=startTimeSecMorningPeak;  this.endTimeSecMorningPeak=endTimeSecMorningPeak;  for (  DgCommodity com : commodities.getCommodities().values()) {    for (int i=0; i < com.getFlow(); i++) {      Person person=population.getFactory().createPerson(Id.create(com.getId().toString() + i,Person.class));      Plan plan=population.getFactory().createPlan();      plan.addActivity(createDummySourceAct(com));      plan.addLeg(population.getFactory().createLeg(TransportMode.car));      plan.addActivity(createDummyDrainAct(com));      person.addPlan(plan);      population.addPerson(person);    }  }  String[] fileAttributes=filename.split("_");  String outputFile=outputDirectory + "trip_plans_from_morning_peak_ks_commodities_minFlow" + fileAttributes[2]+ ".xml";  MatsimWriter popWriter=new PopulationWriter(population,this.network);  popWriter.write(outputFile);  log.info("plans file of simplified population written to " + outputFile);}  }
class C{  private void initProxyChain() throws SocketException, IOException {  List<SocksProxy> proxyChain=new ArrayList<SocksProxy>();  SocksProxy temp=proxy;  while (temp.getChainProxy() != null) {    temp.getChainProxy().setProxySocket(proxySocket);    proxyChain.add(temp.getChainProxy());    temp=temp.getChainProxy();  }  logger.debug("Proxy chain has:{} proxy",proxyChain.size());  if (proxyChain.size() > 0) {    SocksProxy pre=proxy;    for (int i=0; i < proxyChain.size(); i++) {      SocksProxy chain=proxyChain.get(i);      pre.requestConnect(chain.getInetAddress(),chain.getPort());      proxy.getChainProxy().buildConnection();      pre=chain;    }  }}  }
class C{  @JsonCreator public Patch(@JsonProperty("op") Operation operation,@JsonProperty("path") String path,@JsonProperty("value") JsonNode value){  this.operation=operation;  this.path=path;  this.value=value;}  }
class C{  public EnterMonitorStmt newEnterMonitorStmt(Value op){  return new JEnterMonitorStmt(op);}  }
class C{  private X509Certificate analyze(String keyType,String signatureId,X509Certificate delegateCert,X509Certificate requestSigningCertificate,boolean actAsReq,ServerValidatableSamlToken samlToken) throws ContradictoryHoKConditionsException {  if (signatureId != null && requestSigningCertificate == null) {    throw new InvalidSecurityHeaderException("SignatureId is not null but the signing certificate is");  }  validateNotContradicting(signatureId,delegateCert);  X509Certificate hokCertificate=null;  if (keyType == null) {    hokCertificate=getHoKCertificate(requestSigningCertificate,signatureId,delegateCert,samlToken);  } else   if (keyType.equalsIgnoreCase(BEARER_KEY_TYPE)) {    if (delegateToReq(delegateCert) || actAsReq) {      throw new ContradictoryHoKConditionsException("Cannot issue delegated bearer token");    }  } else   if (keyType.equalsIgnoreCase(HOK_KEY_TYPE)) {    if ((samlToken != null) && (samlToken.getConfirmationType() == ConfirmationType.BEARER)) {      throw new ContradictoryHoKConditionsException("Cannot issue Hok token authenticating by bearer token.");    }    hokCertificate=getHoKCertificate(requestSigningCertificate,signatureId,delegateCert,samlToken);    if (hokCertificate == null) {      throw new ContradictoryHoKConditionsException("Cannot find certificate to use.");    }  } else {    throw new ContradictoryHoKConditionsException("Unknown KeyType");  }  logger.debug("Found HoK certificate {}",hokCertificate);  return hokCertificate;}  }
class C{  public static boolean isConnected(Context context){  NetworkInfo info=Connectivity.getNetworkInfo(context);  return (info != null && info.isConnected());}  }
class C{  public static char gsmToChar(int gsmChar){  if (gsmChar >= 0 && gsmChar < 128) {    return sLanguageTables[0].charAt(gsmChar);  } else {    return ' ';  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MColorSchema[");  sb.append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  public static int intersectPolygonRay(float[] verticesXY,float originX,float originY,float dirX,float dirY,Vector2f p){  float nearestT=Float.MAX_VALUE;  int count=verticesXY.length >> 1;  int edgeIndex=-1;  float aX=verticesXY[(count - 1) << 1], aY=verticesXY[((count - 1) << 1) + 1];  for (int i=0; i < count; i++) {    float bX=verticesXY[i << 1], bY=verticesXY[(i << 1) + 1];    float doaX=originX - aX, doaY=originY - aY;    float dbaX=bX - aX, dbaY=bY - aY;    float invDbaDir=1.0f / (dbaY * dirX - dbaX * dirY);    float t=(dbaX * doaY - dbaY * doaX) * invDbaDir;    if (t >= 0.0f && t < nearestT) {      float t2=(doaY * dirX - doaX * dirY) * invDbaDir;      if (t2 >= 0.0f && t2 <= 1.0f) {        edgeIndex=(i - 1 + count) % count;        nearestT=t;        p.x=originX + t * dirX;        p.y=originY + t * dirY;      }    }    aX=bX;    aY=bY;  }  return edgeIndex;}  }
class C{  public void refresh(){  checkWidget();  this.popup.dispose();  this.popup=null;  createPopup();  updateSelection();}  }
class C{  public void testUnsizedDoublesCount(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=100;  r.doubles().limit(size).parallel().forEach(null);  assertEquals(counter.sum(),size);}  }
class C{  private boolean okServerResponse(int statusCode){  return !(statusCode / 100 == 5);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.N4_CLASS_EXPRESSION__ANNOTATION_LIST:    return basicSetAnnotationList(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean isValid(Object key){  if (key == null)   return true;  MLocator loc=(MLocator)m_lookup.get(key);  if (loc == null)   loc=getMLocator(key,null);  return isValid(loc);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:40.729 -0500",hash_original_method="3644EE7A7CD6AEAD3C58A3E47BD5EAC7",hash_generated_method="320151FEF5A6590F3282C2B362B54FEA") public void addThreadEvent(ThreadEvent event){  if (event == null) {    throw new NullPointerException("event == null");  }  ThreadEvent old=threadIdToThreadEvent.put(event.threadId,event);switch (event.type) {case START:    if (old != null) {      throw new IllegalArgumentException("ThreadEvent already registered for id " + event.threadId);    }  break;case END:if (old != null && old.type == ThreadEventType.END) {  throw new IllegalArgumentException("Duplicate ThreadEvent.end for id " + event.threadId);}break;}threadHistory.add(event);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public SamplingXYLineRenderer(){  this.legendLine=new Line2D.Double(-7.0,0.0,7.0,0.0);  setBaseLegendShape(this.legendLine);  setTreatLegendShapeAsLine(true);}  }
class C{  public MechTileset(File dir_path){  if (dir_path == null) {    throw new IllegalArgumentException("must provide dir_path");  }  dir=dir_path;}  }
class C{  public synchronized void add(int index,double x,double y){  while (mXY.get(x) != null) {    x+=getPadding();  }  mXY.put(index,x,y);  updateRange(x,y);}  }
class C{  public MetadatableItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void testCase12(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  int aSign=1;  int bSign=-1;  byte rBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  protected static void disconnect(DTNHost node){  Coord loc=node.getLocation();  node.setLocation(disconnectLocation);  node.update(true);  node.setLocation(loc);}  }
class C{  protected void continueOutputProcessingView(boolean doOutput,boolean forceUpdate){  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().qOutputRateConditionOutputNow();  }  if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {    log.debug(".continueOutputProcessingView");  }  boolean isGenerateSynthetic=parent.getStatementResultService().isMakeSynthetic();  boolean isGenerateNatural=parent.getStatementResultService().isMakeNatural();  UniformPair<EventBean[]> newOldEvents=resultSetProcessor.processOutputLimitedView(deltaSet.getViewEventsSet(),isGenerateSynthetic,parent.getOutputLimitLimitType());  if (parent.isDistinct() && newOldEvents != null) {    newOldEvents.setFirst(EventBeanUtility.getDistinctByProp(newOldEvents.getFirst(),parent.getEventBeanReader()));    newOldEvents.setSecond(EventBeanUtility.getDistinctByProp(newOldEvents.getSecond(),parent.getEventBeanReader()));  }  if ((!isGenerateSynthetic) && (!isGenerateNatural)) {    if (AuditPath.isAuditEnabled) {      OutputStrategyUtil.indicateEarlyReturn(parent.getStatementContext(),newOldEvents);    }    resetEventBatches();    if (InstrumentationHelper.ENABLED) {      InstrumentationHelper.get().aOutputRateConditionOutputNow(false);    }    return;  }  if (doOutput) {    output(forceUpdate,newOldEvents);  }  resetEventBatches();  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().aOutputRateConditionOutputNow(true);  }}  }
class C{  static boolean isHighUTF16Surrogate(char ch){  return ('\uD800' <= ch && ch <= '\uDBFF');}  }
class C{  public static void traverse(final File directory,final IDirectoryTraversalCallback callback){  traverse(directory,callback,true);}  }
class C{  public void test_setLjava_lang_ObjectILjava_lang_Object(){  int[] x={0};  boolean thrown=false;  try {    Array.set(x,0,new Integer(1));  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,((Integer)Array.get(x,0)).intValue());  try {    Array.set(new Object(),0,new Object());  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    Array.set(x,4,new Integer(1));  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  boolean exception=false;  try {    Array.set(new int[1],0,null);  } catch (  IllegalArgumentException e) {    exception=true;  }  assertTrue("expected exception not thrown",exception);  thrown=false;  try {    Array.set(null,0,2);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  public final boolean hasCategory(String category){  return mCategories != null && mCategories.contains(category);}  }
class C{  public void run(){  try {    TimerAlarmClockNotification notif=new TimerAlarmClockNotification(this);    listener.notifyAlarmClock(notif);  } catch (  Exception e) {    TIMER_LOGGER.logp(Level.FINEST,Timer.class.getName(),"run","Got unexpected exception when sending a notification",e);  }}  }
class C{  public void clipRect(int x,int y,int width,int height){  impl.clipRect(nativeGraphics,xTranslate + x,yTranslate + y,width,height);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.BLOCK__STATEMENTS:    return ((InternalEList<?>)getStatements()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static BufferedImage createCompatibleImage(int width,int height){  return CONFIGURATION.createCompatibleImage(width,height);}  }
class C{  public void close() throws IOException {  if (in != null) {    try {      in.close();    }  finally {      in=null;    }  }}  }
class C{  protected void removeDescendantToggledPaths(Enumeration<TreePath> toRemove){  if (toRemove != null) {    while (toRemove.hasMoreElements()) {      Enumeration<?> descendants=getDescendantToggledPaths(toRemove.nextElement());      if (descendants != null) {        while (descendants.hasMoreElements()) {          expandedState.remove(descendants.nextElement());        }      }    }  }}  }
class C{  public static float[] convertDoublesToFloats(double[] input,float[] output){  if (input == null || output == null)   return output;  for (int i=0; i < input.length; ++i) {    output[i]=(float)input[i];  }  return output;}  }
class C{  private PostgreSQLProjectFunctions(){}  }
class C{  public static void revealEditText(EditText text){  int cx=text.getRight() - 30;  int cy=text.getBottom() - 60;  int finalRadius=Math.max(text.getWidth(),text.getHeight());  Animator anim=ViewAnimationUtils.createCircularReveal(text,cx,cy,0,finalRadius);  text.setVisibility(View.VISIBLE);  anim.start();}  }
class C{  public ToolBarWindowIsActiveState(){  super("WindowIsActive");}  }
class C{  public InlineTempRefactoring(ICompilationUnit unit,int selectionStart,int selectionLength){  this(unit,null,selectionStart,selectionLength);}  }
class C{  @Override public boolean isAllowedToLeave() throws RemoteException {  try {    if (isGroupChatAbandoned()) {      if (sLogger.isActivated()) {        sLogger.debug("Cannot leave group chat with group chat Id '" + mChatId + "'");      }      return false;    }    return true;  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  @Override public V remove(Object key){  Entry<K,V> entry=removeEntry(key);  if (entry != null) {    return entry.value;  }  return null;}  }
class C{  private VCardBuilder appendNamePropertiesV40(final List<ContentValues> contentValuesList){  if (mIsDoCoMo || mNeedsToConvertPhoneticString) {    Log.w(LOG_TAG,"Invalid flag is used in vCard 4.0 construction. Ignored.");  }  if (contentValuesList == null || contentValuesList.isEmpty()) {    appendLine(VCardConstants.PROPERTY_FN,"");    return this;  }  final ContentValues contentValues=getPrimaryContentValueWithStructuredName(contentValuesList);  String familyName=contentValues.getAsString(StructuredName.FAMILY_NAME);  final String middleName=contentValues.getAsString(StructuredName.MIDDLE_NAME);  final String givenName=contentValues.getAsString(StructuredName.GIVEN_NAME);  final String prefix=contentValues.getAsString(StructuredName.PREFIX);  final String suffix=contentValues.getAsString(StructuredName.SUFFIX);  final String formattedName=contentValues.getAsString(StructuredName.DISPLAY_NAME);  if (TextUtils.isEmpty(familyName) && TextUtils.isEmpty(givenName) && TextUtils.isEmpty(middleName)&& TextUtils.isEmpty(prefix)&& TextUtils.isEmpty(suffix)) {    if (TextUtils.isEmpty(formattedName)) {      appendLine(VCardConstants.PROPERTY_FN,"");      return this;    }    familyName=formattedName;  }  final String phoneticFamilyName=contentValues.getAsString(StructuredName.PHONETIC_FAMILY_NAME);  final String phoneticMiddleName=contentValues.getAsString(StructuredName.PHONETIC_MIDDLE_NAME);  final String phoneticGivenName=contentValues.getAsString(StructuredName.PHONETIC_GIVEN_NAME);  final String escapedFamily=escapeCharacters(familyName);  final String escapedGiven=escapeCharacters(givenName);  final String escapedMiddle=escapeCharacters(middleName);  final String escapedPrefix=escapeCharacters(prefix);  final String escapedSuffix=escapeCharacters(suffix);  mBuilder.append(VCardConstants.PROPERTY_N);  if (!(TextUtils.isEmpty(phoneticFamilyName) && TextUtils.isEmpty(phoneticMiddleName) && TextUtils.isEmpty(phoneticGivenName))) {    mBuilder.append(VCARD_PARAM_SEPARATOR);    final String sortAs=escapeCharacters(phoneticFamilyName) + ';' + escapeCharacters(phoneticGivenName)+ ';'+ escapeCharacters(phoneticMiddleName);    mBuilder.append("SORT-AS=").append(VCardUtils.toStringAsV40ParamValue(sortAs));  }  mBuilder.append(VCARD_DATA_SEPARATOR);  mBuilder.append(escapedFamily);  mBuilder.append(VCARD_ITEM_SEPARATOR);  mBuilder.append(escapedGiven);  mBuilder.append(VCARD_ITEM_SEPARATOR);  mBuilder.append(escapedMiddle);  mBuilder.append(VCARD_ITEM_SEPARATOR);  mBuilder.append(escapedPrefix);  mBuilder.append(VCARD_ITEM_SEPARATOR);  mBuilder.append(escapedSuffix);  mBuilder.append(VCARD_END_OF_LINE);  if (TextUtils.isEmpty(formattedName)) {    Log.w(LOG_TAG,"DISPLAY_NAME is empty.");    final String escaped=escapeCharacters(VCardUtils.constructNameFromElements(VCardConfig.getNameOrderType(mVCardType),familyName,middleName,givenName,prefix,suffix));    appendLine(VCardConstants.PROPERTY_FN,escaped);  } else {    final String escapedFormatted=escapeCharacters(formattedName);    mBuilder.append(VCardConstants.PROPERTY_FN);    mBuilder.append(VCARD_DATA_SEPARATOR);    mBuilder.append(escapedFormatted);    mBuilder.append(VCARD_END_OF_LINE);  }  appendPhoneticNameFields(contentValues);  return this;}  }
class C{  public boolean containsKey(String url){  return getFromCache(url) != null;}  }
class C{  private void navigateClass(fr.gael.dhus.olingo.v1.entity.Class c,int segment) throws ODataException {  NavigationSegment nextSeg=navigationSegments.get(segment);  EdmEntitySet es=nextSeg.getEntitySet();  if (nextSeg.getKeyPredicates().isEmpty()) {    if (es.getName().equals(V1Model.CLASS.getName()))     this.result=new ClassMap(c); else {      throw new ODataException("Unexpected EntitySet for Segment(" + segment + ")");    }  } else {    KeyPredicate kp=nextSeg.getKeyPredicates().get(0);    if (es.getName().equals(V1Model.CLASS.getName())) {      fr.gael.dhus.olingo.v1.entity.Class cl=new ClassMap(c).get(getKeyValue(kp,String.class));      if (navigationSegments.size() == segment + 1)       this.result=cl; else       navigateClass(cl,segment + 1);    }  }}  }
class C{  public double distance(final Int2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  public static void destroyRefreshTimerTasks(){  if (_refreshTimer != null) {    _refreshTimer.cancel();    _refreshTimer.purge();    _refreshTimer=null;  }}  }
class C{  static MediaType createImageType(String subtype){  return create(IMAGE_TYPE,subtype);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  String outputHeader=null;  boolean outputResidualImage=false;  double yEstimate;  double residual;  boolean standardizeResiduals=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader1=args[0];  inputHeader2=args[1];  if (!args[2].toLowerCase().equals("not specified")) {    outputHeader=args[2];    outputResidualImage=true;    standardizeResiduals=Boolean.parseBoolean(args[3]);  }  if (inputHeader1 == null || inputHeader2 == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double x, y;    float progress=0;    WhiteboxRaster image1=new WhiteboxRaster(inputHeader1,"r");    int rows=image1.getNumberRows();    int cols=image1.getNumberColumns();    double noData1=image1.getNoDataValue();    WhiteboxRaster image2=new WhiteboxRaster(inputHeader2,"r");    if (rows != image2.getNumberRows() || cols != image2.getNumberColumns()) {      showFeedback("The input images must have the same dimensions (rows and columns).");      return;    }    double noData2=image2.getNoDataValue();    double sumX=0, sumY=0, sumXY=0, sumXX=0, sumYY=0;    long N=0;    double[] data1, data2;    for (row=0; row < rows; row++) {      data1=image1.getRowValues(row);      data2=image2.getRowValues(row);      for (col=0; col < cols; col++) {        x=data1[col];        y=data2[col];        if (x != noData1 && y != noData2) {          sumX+=x;          sumY+=y;          sumXY+=x * y;          sumXX+=x * x;          sumYY+=y * y;          N++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    double slope=(N * sumXY - (sumX * sumY)) / (N * sumXX - (sumX * sumX));    double intercept=(sumY - slope * sumX) / N;    double r=(N * sumXY - (sumX * sumY)) / ((Math.sqrt(N * sumXX - (sumX * sumX)) * (Math.sqrt(N * sumYY - (sumY * sumY)))));    double rSqr=r * r;    double yMean=sumY / N;    double xMean=sumX / N;    double SSreg=0;    double SStotal=0;    double SSerror=0;    int dfReg=1;    int dfError=(int)(N - 2);    for (row=0; row < rows; row++) {      data1=image1.getRowValues(row);      data2=image2.getRowValues(row);      for (col=0; col < cols; col++) {        x=data1[col];        y=data2[col];        if (x != noData1 && y != noData2) {          yEstimate=slope * x + intercept;          SSerror+=(y - yEstimate) * (y - yEstimate);          SStotal+=(y - yMean) * (y - yMean);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    SSreg=SStotal - SSerror;    double MSreg=SSreg / dfReg;    double MSerror=SSerror / dfError;    double Fstat=MSreg / MSerror;    double SEofEstimate=Math.sqrt(MSerror);    FDistribution f=new FDistribution(1,dfError);    double pValue=1.0 - f.cumulativeProbability(Fstat);    double msse=(Math.max(0d,sumYY - sumXY * sumXY / sumXX)) / (N - 2);    double interceptSE=Math.sqrt(msse * ((1d / N) + (xMean * xMean) / sumXX));    double interceptT=intercept / interceptSE;    TDistribution distribution=new TDistribution(N - 2);    double interceptPValue=2d * (1.0 - distribution.cumulativeProbability(Math.abs(intercept) / interceptSE));    double slopeSE=Math.sqrt(msse / sumXX);    double slopeT=slope / slopeSE;    double slopePValue=2d * (1.0 - distribution.cumulativeProbability(Math.abs(slope) / slopeSE));    if (outputResidualImage) {      WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      output.setPreferredPalette("blue_white_red.pal");      if (standardizeResiduals) {        for (row=0; row < rows; row++) {          data1=image1.getRowValues(row);          data2=image2.getRowValues(row);          for (col=0; col < cols; col++) {            x=data1[col];            y=data2[col];            yEstimate=slope * x + intercept;            residual=(y - yEstimate) / SEofEstimate;            output.setValue(row,col,residual);          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress((int)progress);        }      } else {        for (row=0; row < rows; row++) {          data1=image1.getRowValues(row);          data2=image2.getRowValues(row);          for (col=0; col < cols; col++) {            x=data1[col];            y=data2[col];            yEstimate=slope * x + intercept;            residual=y - yEstimate;            output.setValue(row,col,residual);          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress((int)progress);        }      }      output.close();    }    DecimalFormat df=new DecimalFormat("###,###,###,##0.000");    DecimalFormat df2=new DecimalFormat("###,###,###,###");    String retstr=null;    retstr="IMAGE REGRESSION REPORT\n\n";    retstr+="Input Image 1 (X):\t\t" + image1.getShortHeaderFile() + "\n";    retstr+="Input Image 2 (Y):\t\t" + image2.getShortHeaderFile() + "\n\n";    retstr+="Model Summary:\n";    retstr+="R\tR Square\tStd. Error of the Estimate\n";    retstr+=df.format(r) + "\t" + df.format(rSqr)+ "\t"+ df.format(SEofEstimate)+ "\n\n";    String ANOVA="\nAnalysis of Variance (ANOVA):\n";    ANOVA+="Source\tSS\tdf\tMS\tF\tP\n";    ANOVA+="Regression\t" + df.format(SSreg) + "\t"+ df2.format(dfReg)+ "\t"+ df.format(MSreg)+ "\t"+ df.format(Fstat)+ "\t"+ df.format(pValue)+ "\n";    ANOVA+="Residual\t" + df.format(SSerror) + "\t"+ df2.format(dfError)+ "\t"+ df.format(MSerror)+ "\n";    ANOVA+="Total\t" + df.format(SStotal) + "\n\n";    retstr+=ANOVA;    String coefficents="Coefficients:\n";    coefficents+="Variable\tB\tStd. Error\tt\tSig.\n";    coefficents+="Constant\t" + df.format(intercept) + "\t"+ df.format(interceptSE)+ "\t"+ df.format(interceptT)+ "\t"+ df.format(interceptPValue)+ "\n";    coefficents+="Slope\t" + df.format(slope) + "\t"+ df.format(slopeSE)+ "\t"+ df.format(slopeT)+ "\t"+ df.format(slopePValue)+ "\n\n";    retstr+=coefficents;    if (intercept >= 0) {      retstr+="Regression Equation:\t\t" + image2.getShortHeaderFile() + " = "+ df.format(slope)+ " \u00D7 "+ image2.getShortHeaderFile()+ " + "+ df.format(intercept)+ "\n";    } else {      retstr+="Regression Equation:\t\t" + image2.getShortHeaderFile() + " = "+ df.format(slope)+ " \u00D7 "+ image2.getShortHeaderFile()+ " - "+ df.format(-intercept)+ "\n";    }    returnData(retstr);    if (outputResidualImage) {      returnData(outputHeader);    }    image1.close();    image2.close();  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public BusinessObjectDataEntity createDatabaseEntitiesForFinalizeRestoreTesting(BusinessObjectDataKey businessObjectDataKey){  return createDatabaseEntitiesForInitiateRestoreTesting(businessObjectDataKey,AbstractServiceTest.STORAGE_NAME_ORIGIN,AbstractServiceTest.S3_BUCKET_NAME_ORIGIN,StorageUnitStatusEntity.RESTORING,AbstractServiceTest.STORAGE_NAME_GLACIER,AbstractServiceTest.S3_BUCKET_NAME_GLACIER,StorageUnitStatusEntity.ENABLED,AbstractServiceTest.S3_BUCKET_NAME_ORIGIN + "/" + AbstractServiceTest.TEST_S3_KEY_PREFIX);}  }
class C{  public synchronized void resetStatistics(){  statistics=null;}  }
class C{  public boolean isMimeTypeEqual(String mimeType){  if (mimeType == null) {    throw new NullPointerException("mimeType");  }  if (this.mimeType == null) {    return false;  }  try {    return this.mimeType.match(new MimeType(mimeType));  } catch (  MimeTypeParseException mtpe) {    return false;  }}  }
class C{  public static void main(String[] args) throws IOException, TException, UnknownWordException, InterruptedException {  demoWord();}  }
class C{  private static void sendPackets(PacketStreamer.Client client,short numPackets,OFMessageType ofType,boolean sync) throws TException {  while (numPackets-- > 0) {    Message msg=new Message();    Packet packet=new Packet();    List<String> sids=new ArrayList<String>();    sids.add("session1");    sids.add("session2");    msg.setSessionIDs(sids);    packet.setMessageType(ofType);    long sw_dpid=numPackets / 40 + 1;    packet.setSwPortTuple(new SwitchPortTuple(sw_dpid,(short)(numPackets - (sw_dpid - 1) * 40)));    String strData="New data, sequence " + numPackets;    packet.setData(strData.getBytes());    msg.setPacket(packet);    try {      if (sync) {        client.pushMessageSync(msg);        log.debug("Send packet sync: " + msg.toString());      } else {        client.pushMessageAsync(msg);        log.debug("Send packet sync: " + msg.toString());      }    } catch (    TTransportException e) {      log.error(e.toString());    }    try {      Thread.sleep(100);    } catch (    Exception e) {    }  }}  }
class C{  public InstancesIterable(FeatureStore featureStore){  this.featureStore=featureStore;  instanceCounter=0;}  }
class C{  @Uninterruptible @Override public void adjustESP(Offset delta,boolean traceAdjustments){  Word old=getGPRs().get(ESP.value());  getGPRs().set(ESP.value(),old.plus(delta));  if (traceAdjustments) {    VM.sysWrite(" esp =");    VM.sysWrite(getGPRs().get(ESP.value()));  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:50.751 -0500",hash_original_method="045B5F1BFA94DC7C2BFF459F85DF0833",hash_generated_method="104DA174A6EFC5A4FFC070905649B9FB") private static ZygoteConnection acceptCommandPeer(){  try {    return new ZygoteConnection(sServerSocket.accept());  } catch (  IOException ex) {    throw new RuntimeException("IOException during accept()",ex);  }}  }
class C{  static byte[] concatAndHash(String x,String y) throws NoSuchAlgorithmException, UnsupportedEncodingException {  MessageDigest md;  md=MessageDigest.getInstance("SHA-256");  md.update((x + y).getBytes("UTF-8"));  return md.digest();}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  private void initialize(@Nullable final AttributeSet attributeSet){  obtainStyledAttributes(attributeSet);  getView().setOnItemSelectedListener(createItemSelectedListener());}  }
class C{  public static int writeLong(byte[] array,int offset,long v){  array[offset + 0]=(byte)(v >>> 56);  array[offset + 1]=(byte)(v >>> 48);  array[offset + 2]=(byte)(v >>> 40);  array[offset + 3]=(byte)(v >>> 32);  array[offset + 4]=(byte)(v >>> 24);  array[offset + 5]=(byte)(v >>> 16);  array[offset + 6]=(byte)(v >>> 8);  array[offset + 7]=(byte)(v >>> 0);  return SIZE_LONG;}  }
class C{  public static Object[] readAll(String filename) throws Exception {  return readAll(new FileInputStream(filename));}  }
class C{  public Boolean isIpv6Enabled(){  return ipv6Enabled;}  }
class C{  private boolean findDestinationAndTrack(Car car,RouteLocation rl,int routeIndex,int routeEnd) throws BuildFailedException {  if (routeIndex + 1 == routeEnd) {    log.debug("Car ({}) is at the last location in the train's route",car.toString());  }  addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildFindDestinationForCar"),new Object[]{car.toString(),car.getTypeName(),car.getLoadName(),(car.getLocationName() + ", " + car.getTrackName())}));  if (car.getKernel() != null) {    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCarLeadKernel"),new Object[]{car.toString(),car.getKernelName(),car.getKernel().getSize(),car.getKernel().getTotalLength(),Setup.getLengthUnit().toLowerCase()}));  }  int start=routeIndex;  RouteLocation rld=null;  RouteLocation rldSave=null;  Track trackSave=null;  Track finalDestinationTrackSave=null;  boolean multiplePickup=false;  if (!_train.isLocalSwitcher()) {    start++;  }  if (_train.isSendCarsToTerminalEnabled() && !splitString(rl.getName()).equals(splitString(_departLocation.getName())) && routeEnd == _routeList.size()) {    addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildSendToTerminal"),new Object[]{_terminateLocation.getName()}));    start=routeEnd - 1;    while (start > routeIndex) {      if (!splitString(_routeList.get(start - 1).getName()).equals(splitString(_terminateLocation.getName()))) {        break;      }      start--;    }  }  for (int k=start; k < routeEnd; k++) {    rld=_routeList.get(k);    if (checkForLaterPickUp(rl,rld,car)) {      multiplePickup=true;    }    if (rld.isDropAllowed() || car.hasFred() || car.isCaboose()) {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildSearchingLocation"),new Object[]{rld.getName()}));    } else {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildRouteNoDropLocation"),new Object[]{_train.getRoute().getName(),rld.getId(),rld.getName()}));      continue;    }    if (_train.skipsLocation(rld.getId())) {      addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildLocSkipped"),new Object[]{rld.getName(),rld.getId(),_train.getName()}));      continue;    }    if (rld.getCarMoves() >= rld.getMaxCarMoves()) {      addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildNoAvailableMovesDest"),new Object[]{_train.getRoute().getName(),rld.getId(),rld.getName()}));      continue;    }    Location testDestination=rld.getLocation();    if (testDestination == null) {      throw new BuildFailedException(MessageFormat.format(Bundle.getMessage("buildErrorRouteLoc"),new Object[]{_train.getRoute().getName(),rld.getName()}));    }    Track trackTemp=null;    Track finalDestinationTrackTemp=null;    if (splitString(rl.getName()).equals(splitString(rld.getName())) && !_train.isLocalSwitcher() && !car.isPassenger()&& !car.isCaboose()&& !car.hasFred()) {      if ((_train.isAllowReturnToStagingEnabled() || Setup.isAllowReturnToStagingEnabled()) && testDestination.isStaging() && trackSave == null) {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildReturnCarToStaging"),new Object[]{car.toString(),rld.getName()}));      } else {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCarLocEqualDestination"),new Object[]{car.toString(),rld.getName()}));        continue;      }    }    if (!car.getTrack().acceptsDestination(testDestination)) {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildDestinationNotServiced"),new Object[]{testDestination.getName(),car.getTrackName()}));      continue;    }    if (!testDestination.acceptsTypeName(car.getTypeName())) {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCanNotDropLocation"),new Object[]{car.toString(),car.getTypeName(),testDestination.getName()}));      continue;    }    if (!checkDropTrainDirection(rld)) {      continue;    }    if (!checkTrainLength(car,rl,rld)) {      break;    }    if (!_train.isAllowThroughCarsEnabled() && !_train.isLocalSwitcher() && !car.isCaboose()&& !car.hasFred()&& !car.isPassenger()&& splitString(car.getLocationName()).equals(splitString(_departLocation.getName()))&& splitString(rld.getName()).equals(splitString(_terminateLocation.getName()))) {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildThroughTrafficNotAllow"),new Object[]{_departLocation.getName(),_terminateLocation.getName()}));      continue;    }    if (rld == _train.getTrainTerminatesRouteLocation() && _terminateStageTrack != null) {      String status=car.testDestination(testDestination,_terminateStageTrack);      if (status.equals(Track.OKAY)) {        trackTemp=_terminateStageTrack;      } else       if (status.startsWith(Track.LOAD) && car.getTrack() == _departStageTrack && car.getLoadName().equals(CarLoads.instance().getDefaultEmptyName()) && rldSave == null && (_departStageTrack.isAddCustomLoadsAnyStagingTrackEnabled() || _departStageTrack.isAddCustomLoadsEnabled() || _departStageTrack.isAddCustomLoadsAnySpurEnabled())) {        if (generateLoadCarDepartingAndTerminatingIntoStaging(car,_terminateStageTrack)) {          trackTemp=_terminateStageTrack;        } else {          addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCanNotDropCarBecause"),new Object[]{car.toString(),_terminateStageTrack.getName(),status,_terminateStageTrack.getTrackTypeName()}));          continue;        }      } else {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCanNotDropCarBecause"),new Object[]{car.toString(),_terminateStageTrack.getName(),status,_terminateStageTrack.getTrackTypeName()}));        continue;      }    } else {      for (      Track track : testDestination.getTrackByNameList(null)) {        if (track.isAlternate()) {          addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildTrackIsAlternate"),new Object[]{car.toString(),track.getTrackTypeName(),track.getName()}));        }      }      for (      Track testTrack : testDestination.getTrackByMovesList(null)) {        if (testTrack == car.getTrack() && !car.isPassenger() && !car.isCaboose() && !car.hasFred()) {          addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCanNotDropCarSameTrack"),new Object[]{car.toString(),testTrack.getName()}));          continue;        }        if (!checkDropTrainDirection(car,rld,testTrack)) {          continue;        }        if (!checkTrainCanDrop(car,testTrack)) {          continue;        }        if (testTrack.getIgnoreUsedLengthPercentage() > 0) {          int available=testTrack.getLength() - (testTrack.getUsedLength() * (100 - testTrack.getIgnoreUsedLengthPercentage()) / 100 + testTrack.getReservedLengthDrops());          int available3=testTrack.getLength() + (testTrack.getLength() * testTrack.getIgnoreUsedLengthPercentage() / 100) - (testTrack.getUsedLength() + testTrack.getReserved());          if (available3 < available) {            available=available3;          }          addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildTrackHasPlannedPickups"),new Object[]{testTrack.getName(),testTrack.getIgnoreUsedLengthPercentage(),testTrack.getLength(),Setup.getLengthUnit().toLowerCase(),testTrack.getUsedLength(),testTrack.getReserved(),testTrack.getReservedLengthDrops(),testTrack.getReservedLengthDrops() - testTrack.getReserved(),available}));        }        String status=car.testDestination(testDestination,testTrack);        if (status.equals(Track.OKAY) && !testTrack.getScheduleId().equals(Track.NONE) && !car.getLoadName().equals(CarLoads.instance().getDefaultEmptyName())&& !car.getLoadName().equals(CarLoads.instance().getDefaultLoadName())) {          addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildSpurScheduleLoad"),new Object[]{testTrack.getName(),car.getLoadName()}));          addCarToTrain(car,rl,rld,testTrack);          return true;        }        if (!status.equals(Track.OKAY) && !status.startsWith(Track.TYPE) && !status.startsWith(Track.LENGTH)&& !status.startsWith(Track.CAPACITY)&& testTrack.getTrackType().equals(Track.SPUR)&& !testTrack.getScheduleId().equals(Track.NONE)&& (car.getTrack().isAddCustomLoadsEnabled() || car.getTrack().isAddCustomLoadsAnySpurEnabled())&& car.getLoadName().equals(CarLoads.instance().getDefaultEmptyName())) {          if (!testTrack.isSpaceAvailable(car)) {            addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildNoDestTrackSpace"),new Object[]{car.toString(),testTrack.getLocation().getName(),testTrack.getName(),testTrack.getNumberOfCarsInRoute(),testTrack.getReservedInRoute(),Setup.getLengthUnit().toLowerCase(),testTrack.getReservationFactor()}));            continue;          }          addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildGenerateLoad"),new Object[]{car.toString(),car.getTypeName(),testDestination.getName(),testTrack.getName()}));          String carLoad=car.getLoadName();          ScheduleItem si=getScheduleItem(car,testTrack);          if (si != null) {            car.setLoadName(si.getReceiveLoadName());            if (car.testDestination(testDestination,testTrack).equals(Track.OKAY)) {              addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildAddingScheduleLoad"),new Object[]{si.getReceiveLoadName(),car.toString()}));              car.setLoadGeneratedFromStaging(true);              testTrack.bumpSchedule();              addCarToTrain(car,rl,rld,testTrack);              return true;            }          }          car.setLoadName(carLoad);        }        if (status.startsWith(Track.LENGTH) && testTrack.getAlternateTrack() != null && car.getFinalDestination() == null && testTrack.getScheduleId().equals(Track.NONE) && car.getTrack() != testTrack.getAlternateTrack() && car.testDestination(testDestination,testTrack.getAlternateTrack()).equals(Track.OKAY)) {          addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildTrackFullHasAlternate"),new Object[]{testDestination.getName(),testTrack.getName(),testTrack.getAlternateTrack().getName()}));          finalDestinationTrackTemp=testTrack;          trackTemp=testTrack.getAlternateTrack();          break;        }        if (!status.equals(Track.OKAY)) {          addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCanNotDropCarBecause"),new Object[]{car.toString(),testTrack.getName(),status,testTrack.getTrackTypeName()}));          continue;        }        if (_train.isLocalSwitcher() && !Setup.isLocalSpurMovesEnabled() && testTrack.getTrackType().equals(Track.SPUR)&& car.getTrack().getTrackType().equals(Track.SPUR)) {          addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildNoSpurToSpurMove"),new Object[]{car.getTrackName(),testTrack.getName()}));          continue;        }        if (_train.isLocalSwitcher() && !Setup.isLocalYardMovesEnabled() && testTrack.getTrackType().equals(Track.YARD)&& car.getTrack().getTrackType().equals(Track.YARD)&& !car.isCaboose()&& !car.hasFred()) {          addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildNoYardToYardMove"),new Object[]{car.getTrackName(),testTrack.getName()}));          continue;        }        if (_train.isLocalSwitcher() && !Setup.isLocalInterchangeMovesEnabled() && testTrack.getTrackType().equals(Track.INTERCHANGE)&& car.getTrack().getTrackType().equals(Track.INTERCHANGE)) {          addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildNoInterchangeToInterchangeMove"),new Object[]{car.getTrackName(),testTrack.getName()}));          continue;        }        if (!testTrack.getTrackType().equals(Track.STAGING)) {          trackTemp=testTrack;          break;        }      }    }    if (trackTemp != null) {      addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildCarCanDropMoves"),new Object[]{car.toString(),trackTemp.getTrackTypeName(),trackTemp.getLocation().getName(),trackTemp.getName(),+rld.getCarMoves(),rld.getMaxCarMoves()}));      if (rldSave == null && multiplePickup) {        addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildCarHasSecond"),new Object[]{car.toString(),car.getLocationName()}));        trackSave=null;        break;      }      if (rldSave != null) {        double saveCarMoves=rldSave.getCarMoves();        double saveRatio=saveCarMoves / rldSave.getMaxCarMoves();        double nextCarMoves=rld.getCarMoves();        double nextRatio=nextCarMoves / rld.getMaxCarMoves();        if (rld == _train.getTrainTerminatesRouteLocation()) {          nextRatio=nextRatio * nextRatio;          log.debug("Location ({}) is terminate location, adjusted nextRatio {}",rld.getName(),Double.toString(nextRatio));        }        if (!trackTemp.getScheduleId().equals(Track.NONE)) {          nextRatio=nextRatio * nextRatio;          log.debug("Track ({}) has schedule ({}), adjusted nextRatio {}",trackTemp.getName(),trackTemp.getScheduleName(),Double.toString(nextRatio));        }        for (int m=start; m < routeEnd; m++) {          RouteLocation rle=_routeList.get(m);          if (rle == rld) {            break;          }          if (rle.getName().equals(rld.getName()) && (rle.getMaxCarMoves() - rle.getCarMoves() > 0) && rle.isDropAllowed()&& checkDropTrainDirection(car,rle,trackTemp)) {            log.debug("Found an earlier drop for car ({}) destination ({})",car.toString(),rle.getName());            nextCarMoves=rle.getCarMoves();            nextRatio=nextCarMoves / rle.getMaxCarMoves();            rld=rle;            break;          }        }        log.debug("{} = {}, {} = {}",rldSave.getName(),Double.toString(saveRatio),rld.getName(),Double.toString(nextRatio));        if (saveRatio < nextRatio) {          rld=rldSave;          trackTemp=trackSave;          finalDestinationTrackTemp=finalDestinationTrackSave;        } else         if (multiplePickup) {          addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildCarHasSecond"),new Object[]{car.toString(),car.getLocationName()}));          trackSave=null;          break;        }      }      rldSave=rld;      trackSave=trackTemp;      finalDestinationTrackSave=finalDestinationTrackTemp;    } else {      addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildCouldNotFindDestForCar"),new Object[]{car.toString(),rld.getName()}));    }  }  if (trackSave != null) {    if (finalDestinationTrackSave != null) {      car.setFinalDestination(finalDestinationTrackSave.getLocation());      car.setFinalDestinationTrack(finalDestinationTrackSave);    }    addCarToTrain(car,rl,rldSave,trackSave);    return true;  }  checkCarOrder(car);  return false;}  }
class C{  public static long ipToLong(String address){  if (address == null)   return 0L;  String[] quads=address.split("\\.");  long result=0;  if (quads.length != 4)   return 0L;  try {    result+=Integer.parseInt(quads[3]);    result+=Long.parseLong(quads[2]) << 8L;    result+=Long.parseLong(quads[1]) << 16L;    result+=Long.parseLong(quads[0]) << 24L;  } catch (  Exception ex) {    return result;  }  return result;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SMULL");  translateAll(environment,instruction,"SMULL",instructions);}  }
class C{  public static Object socketReadBegin(){  return IoTraceHandler.socketReadBegin();}  }
class C{  @Override public int hashCode(){  return s1 ^ s2;}  }
class C{  @Override public String toString(){  return "{\"status\":" + status + ",\"title\":\""+ title+ "\"}";}  }
class C{  public boolean isHeadOnPanel(SignalHead head){  SignalHeadIcon h=null;  for (int i=0; i < layoutEditor.signalList.size(); i++) {    h=layoutEditor.signalList.get(i);    if (h.getSignalHead() == head) {      return true;    }  }  return false;}  }
class C{  public static List<String> bytesToStringList(byte[] bytes){  List<String> lines=new ArrayList<String>();  if (bytes == null) {    return lines;  }  BufferedReader r=null;  try {    r=new BufferedReader(new InputStreamReader(new ByteArrayInputStream(bytes),"UTF-8"));  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }  try {    try {      for (String line=r.readLine(); line != null; line=r.readLine()) {        lines.add(line);      }    }  finally {      r.close();    }  } catch (  IOException e) {    throw new RuntimeException(e);  }  return lines;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (kind: ");  result.append(kind);  result.append(", literalName: ");  result.append(literalName);  result.append(", computedName: ");  result.append(computedName);  result.append(')');  return result.toString();}  }
class C{  public static String stripJavaxFacesPrefix(String identifier){  if (identifier.startsWith(PREFIX)) {    return (identifier.substring(PREFIX.length()));  } else {    return (identifier);  }}  }
class C{  public UpdatableStacking(UpdateableRegressor aggregatingRegressor,List<UpdateableRegressor> baseRegressors){  this.aggregatingRegressor=aggregatingRegressor;  this.baseRegressors=baseRegressors;  boolean allClassifiers=aggregatingRegressor instanceof UpdateableClassifier;  for (  UpdateableRegressor reg : baseRegressors)   if (!(reg instanceof UpdateableClassifier))   allClassifiers=false;  if (allClassifiers) {    aggregatingClassifier=(UpdateableClassifier)aggregatingRegressor;    baseClassifiers=(List)baseRegressors;  }}  }
class C{  public MetadataEditorCompat putBitmap(int key,Bitmap bitmap){  if (sHasRemoteControlAPIs) {    try {      mPutBitmapMethod.invoke(mActualMetadataEditor,key,bitmap);    } catch (    Exception e) {      throw new RuntimeException(e.getMessage(),e);    }  }  return this;}  }
class C{  public SegmentedTimeline(long segmentSize,int segmentsIncluded,int segmentsExcluded){  this.segmentSize=segmentSize;  this.segmentsIncluded=segmentsIncluded;  this.segmentsExcluded=segmentsExcluded;  this.groupSegmentCount=this.segmentsIncluded + this.segmentsExcluded;  this.segmentsIncludedSize=this.segmentsIncluded * this.segmentSize;  this.segmentsExcludedSize=this.segmentsExcluded * this.segmentSize;  this.segmentsGroupSize=this.segmentsIncludedSize + this.segmentsExcludedSize;  int offset=TimeZone.getDefault().getRawOffset();  TimeZone z=new SimpleTimeZone(offset,"UTC-" + offset);  this.workingCalendarNoDST=new GregorianCalendar(z,Locale.getDefault());}  }
class C{  public void printStackTrace(java.io.PrintWriter s){  if (s == null)   s=new java.io.PrintWriter(System.err);  try {    super.printStackTrace(s);  } catch (  Exception e) {  }  boolean isJdk14OrHigher=false;  try {    Throwable.class.getMethod("getCause",(Class<?>)null);    isJdk14OrHigher=true;  } catch (  NoSuchMethodException nsme) {  }  if (!isJdk14OrHigher) {    Throwable exception=m_exception;    for (int i=0; (i < 10) && (null != exception); i++) {      s.println("---------");      try {        exception.printStackTrace(s);      } catch (      Exception e) {        s.println("Could not print stack trace...");      }      if (exception instanceof TransformerException) {        TransformerException se=(TransformerException)exception;        Throwable prev=exception;        exception=se.getException();        if (prev == exception) {          exception=null;          break;        }      } else {        exception=null;      }    }  }}  }
class C{  public int removeByPrimaryKey(GenericPK primaryKey) throws GenericEntityException {  if (primaryKey == null)   return 0;  if (Debug.verboseOn())   Debug.logVerbose("Removing GenericPK: " + primaryKey.toString(),module);  return genericDAO.delete(primaryKey);}  }
class C{  public CacheObject load(Object key){  if (key != null) {    String dtedFramePath=key.toString();    DTEDFrame frame=new DTEDFrame(dtedFramePath,true);    if (frame.frame_is_valid) {      return new DTEDCacheObject(dtedFramePath,frame);    }  }  return null;}  }
class C{  private void visitDotWithPrefix(List<ExpressionTree> items,boolean needDot,int prefixIndex){  boolean trailingDereferences=prefixIndex >= 0 && prefixIndex < items.size() - 1;  builder.open(plusFour);  builder.open(trailingDereferences ? ZERO : ZERO);  BreakTag nameTag=genSym();  for (int i=0; i < items.size(); i++) {    ExpressionTree e=items.get(i);    if (needDot) {      FillMode fillMode;      if (prefixIndex >= 0 && i <= prefixIndex) {        fillMode=FillMode.INDEPENDENT;      } else {        fillMode=FillMode.UNIFIED;      }      builder.breakOp(fillMode,"",ZERO,Optional.of(nameTag));      token(".");    }    BreakTag tyargTag=genSym();    dotExpressionUpToArgs(e,Optional.of(tyargTag));    if (prefixIndex >= 0 && i == prefixIndex) {      builder.close();    }    Indent tyargIndent=Indent.If.make(tyargTag,plusFour,ZERO);    Indent argsIndent=Indent.If.make(nameTag,plusFour,trailingDereferences ? plusFour : ZERO);    dotExpressionArgsAndParen(e,tyargIndent,argsIndent);    needDot=true;  }  builder.close();}  }
class C{  public SPARQLMinusIteration(Iteration<BindingSet,X> leftArg,Iteration<BindingSet,X> rightArg,boolean distinct){  super(leftArg);  assert rightArg != null;  this.rightArg=rightArg;  this.distinct=distinct;  this.initialized=false;}  }
class C{  public CategoryGraph(Wikipedia pWiki,List<String> filterList) throws WikiApiException {  constructCategoryGraph(pWiki,pWiki.__getCategories(),filterList);}  }
class C{  @Override public String description(){  return "DistanceValueSource(" + strategy + ", "+ from+ ")";}  }
class C{  public void addToLog(String name,Object val){  toLog.add(name,val);}  }
class C{  public BasicAttribute(String id){  this(id,false);}  }
class C{  public void disconnectPort(AbstractPortController p){  if (controller != p) {    log.warn("disconnectPort: disconnect called from non-connected AbstractPortController");  }  controller=null;}  }
class C{  @CanIgnoreReturnValue public static <T>T checkNotNull(T reference,@Nullable Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public boolean isActive(String tenantName,PrincipalId principalId) throws Exception {  return getService().IsActive(tenantName,principalId,this.getServiceContext());}  }
class C{  @Override public String generateToolTipFragment(String toolTipText){  return " onMouseOver=\"return overlib('" + ImageMapUtilities.javascriptEscape(toolTipText) + "');\" onMouseOut=\"return nd();\"";}  }
class C{  public WeakReference(T referent,ReferenceQueue<? super T> q){  super(referent,q);}  }
class C{  static byte[] convertToBytes(int n){  byte[] bytes=new byte[4];  bytes[0]=(byte)(0xff & n);  bytes[1]=(byte)((0xff00 & n) >> 8);  bytes[2]=(byte)((0xff0000 & n) >> 16);  bytes[3]=(byte)((0xff000000 & n) >> 24);  return bytes;}  }
class C{  private int[] parseMonths(String line){  int[] months=new int[12];  String[] numbers=line.split("\\s");  if (numbers.length != 12) {    throw new IllegalArgumentException("wrong number of months on line: " + Arrays.toString(numbers) + "; count: "+ numbers.length);  }  for (int i=0; i < 12; i++) {    try {      months[i]=Integer.valueOf(numbers[i]);    } catch (    NumberFormatException nfe) {      throw new IllegalArgumentException("bad key: " + numbers[i]);    }  }  return months;}  }
class C{  public static PatternFilterExpr filter(Filter filter,String tagName){  return new PatternFilterExpr(filter,tagName);}  }
class C{  public void removeIndex(String index,String reason){  removeIndex(index,reason,false);}  }
class C{  public void computeRange(int arc,boolean aptGunnery){  double optimizer[]={0,0,0,0};  Arrays.fill(range_damages,0);  rd_bracket=long_range / 4;  for (int range_walk=(entity instanceof Infantry ? 0 : 1); range_walk < long_range; range_walk++) {    if (range_walk <= rd_bracket) {      optimizer[RANGE_SHORT]+=damages[arc][range_walk];      range_damages[RANGE_SHORT]+=damages[arc][range_walk];    }    if ((range_walk > rd_bracket) & (range_walk <= (2 * rd_bracket))) {      optimizer[RANGE_MEDIUM]+=getModifiedDamage(arc,range_walk,-2,aptGunnery);      range_damages[RANGE_MEDIUM]+=damages[arc][range_walk];    }    if ((range_walk > (2 * rd_bracket)) & (range_walk <= (3 * rd_bracket))) {      optimizer[RANGE_LONG]+=getModifiedDamage(arc,range_walk,-4,aptGunnery);      range_damages[RANGE_LONG]+=damages[arc][range_walk];    }    range_damages[RANGE_ALL]+=damages[arc][range_walk];  }  if (rd_bracket > 0) {    range_damages[RANGE_SHORT]/=rd_bracket;    optimizer[RANGE_SHORT]/=rd_bracket;    range_damages[RANGE_MEDIUM]/=rd_bracket;    optimizer[RANGE_MEDIUM]/=rd_bracket;    range_damages[RANGE_LONG]/=rd_bracket;    optimizer[RANGE_LONG]/=rd_bracket;    range_damages[RANGE_ALL]/=(rd_bracket * 3);  } else {    range_damages[RANGE_SHORT]=damages[arc][0];    optimizer[RANGE_SHORT]=damages[arc][0];    range_damages[RANGE_MEDIUM]=damages[arc][0];    optimizer[RANGE_MEDIUM]=damages[arc][0];    range_damages[RANGE_LONG]=damages[arc][0];    optimizer[RANGE_LONG]=damages[arc][0];    range_damages[RANGE_ALL]=damages[arc][0];  }  int best_range=RANGE_ALL;  for (range=RANGE_SHORT; range <= RANGE_LONG; range++) {    if (optimizer[range] > optimizer[best_range]) {      best_range=range;    }  }  range=best_range;}  }
class C{  public static boolean isPasswordValid(String value){  return value != null && value.length() >= 8 && value.length() <= 20 && StringUtils.isAsciiPrintable(value);}  }
class C{  public final Mono<T> ignoreElements(){  return Mono.ignoreElements(this);}  }
class C{  public int hashCode(){  return 0;}  }
class C{  public QueryEvaluationException(Throwable cause){  super(cause);}  }
class C{  public CGSize displaySize(){  return CGSize.make(surfaceSize_.width,surfaceSize_.height);}  }
class C{  public static void safeCloseStream(OutputStream out){  if (out != null) {    try {      out.close();    } catch (    Exception e) {      log.error(e.getMessage(),e);    }  }}  }
class C{  private boolean checkEntityIsReachable(final Player player,final Entity entity){  final List<Node> path=Path.searchPath(player,player.getX(),player.getY(),entity.getArea(),7);  if (path.isEmpty() && !entity.nextTo(player)) {    player.sendPrivateText("That " + entity.getTitle() + " is too far away.");    return false;  }  return true;}  }
class C{  private static Date parseDate(String when) throws ParseException {  if (!DATE_TIME.matcher(when).matches()) {    throw new ParseException(when,0);  }  if (when.length() == 8) {    return DATE_FORMAT.parse(when);  } else {    Date date;    if (when.length() == 16 && when.charAt(15) == 'Z') {      date=DATE_TIME_FORMAT.parse(when.substring(0,15));      Calendar calendar=new GregorianCalendar();      long milliseconds=date.getTime();      milliseconds+=calendar.get(Calendar.ZONE_OFFSET);      calendar.setTime(new Date(milliseconds));      milliseconds+=calendar.get(Calendar.DST_OFFSET);      date=new Date(milliseconds);    } else {      date=DATE_TIME_FORMAT.parse(when);    }    return date;  }}  }
class C{  protected long reportReturn(String methodCall,long value){  reportAllReturns(methodCall,"" + value);  return value;}  }
class C{  public static MetadataFeaturesData newInstance(InputStream stream){  if (stream == null) {    throw new IllegalArgumentException("Metadata stream can not be null");  }  return new MetadataFeaturesData(stream);}  }
class C{  private boolean isValidItemIndex(int index){  return viewAdapter != null && viewAdapter.getItemsCount() > 0 && (isCyclic || index >= 0 && index < viewAdapter.getItemsCount());}  }
class C{  public Source<List<T>> ofSizeBetween(int minimumSize,int maximumSize){  checkBoundedListArguments(minimumSize,maximumSize);  return Lists.alternatingBoundedListsOf(source,minimumSize,maximumSize);}  }
class C{  protected SecretKey engineTranslateKey(SecretKey key) throws InvalidKeyException {  if ((key != null) && (key.getAlgorithm().equalsIgnoreCase("PBKDF2WithHmacSHA1")) && (key.getFormat().equalsIgnoreCase("RAW"))) {    if (key instanceof com.sun.crypto.provider.PBKDF2KeyImpl) {      return key;    }    if (key instanceof javax.crypto.interfaces.PBEKey) {      javax.crypto.interfaces.PBEKey pKey=(javax.crypto.interfaces.PBEKey)key;      try {        PBEKeySpec spec=new PBEKeySpec(pKey.getPassword(),pKey.getSalt(),pKey.getIterationCount(),pKey.getEncoded().length * 8);        return new PBKDF2KeyImpl(spec,"HmacSHA1");      } catch (      InvalidKeySpecException re) {        InvalidKeyException ike=new InvalidKeyException("Invalid key component(s)");        ike.initCause(re);        throw ike;      }    }  }  throw new InvalidKeyException("Invalid key format/algorithm");}  }
class C{  private static HashSet<IHex> extendRiverToSide(IBoard board,Point hexloc,int width,int direction,HashMap<IHex,Point> reverseHex){  Point current=new Point(hexloc);  HashSet<IHex> result=new HashSet<IHex>();  IHex hex;  hex=board.getHexInDir(current.x,current.y,direction);  while ((hex != null) && (width-- > 0)) {    hex.removeAllTerrains();    hex.addTerrain(Terrains.getTerrainFactory().createTerrain(Terrains.WATER,1));    result.add(hex);    current=reverseHex.get(hex);    hex=board.getHexInDir(current.x,current.y,direction);  }  return result;}  }
class C{  private final void invokeEnterMethods(int stateStackEnteringIndex){  for (int i=stateStackEnteringIndex; i <= mStateStackTopIndex; i++) {    if (mDbg)     mSm.log("invokeEnterMethods: " + mStateStack[i].state.getName());    mStateStack[i].state.enter();    mStateStack[i].active=true;  }}  }
class C{  public KeyDeclaration(Stylesheet parentNode,int docOrderNumber){  m_parentNode=parentNode;  setUid(docOrderNumber);}  }
class C{  public Vec2D closestPointTo(ReadonlyVec2D p){  final Vec2D v=b.sub(a);  final float t=p.sub(a).dot(v) / v.magSquared();  if (t < 0.0f) {    return a.copy();  } else   if (t > 1.0f) {    return b.copy();  }  return a.add(v.scaleSelf(t));}  }
class C{  private boolean isClustered(IAnalyzedMessageSummary ams){  if (m_baseScorer != null) {    final Double context=ams.getStatistics().getDoubleStat(m_baseScorer + "." + MAIN);    return context != null && context == 0;  } else {    return false;  }}  }
class C{  private void reset(){  isConnected=false;  if ((null != influxDB) && influxDB.isBatchEnabled()) {    influxDB.disableBatch();  }  if ((null != availabilityCheckTask) && !availabilityCheckTask.isDone()) {    availabilityCheckTask.cancel(false);  }}  }
class C{  private static <T>T run(PrivilegedAction<T> action){  return System.getSecurityManager() != null ? AccessController.doPrivileged(action) : action.run();}  }
class C{  public static boolean registerNamespace(final String prefix,final String namespace){  final String put=namespaces.put(prefix,namespace);  namespacePrefixMapper.registerNamespace(prefix,namespace);  return put == null;}  }
class C{  public GridNode(String id,Coord coord){  this(id);  this.isShifting=false;  this.xMean=coord.getX();  this.yMean=coord.getY();}  }
class C{  private static void decodeHanziSegment(BitSource bits,StringBuilder result,int count) throws FormatException {  if (count * 13 > bits.available()) {    throw FormatException.getFormatInstance();  }  byte[] buffer=new byte[2 * count];  int offset=0;  while (count > 0) {    int twoBytes=bits.readBits(13);    int assembledTwoBytes=((twoBytes / 0x060) << 8) | (twoBytes % 0x060);    if (assembledTwoBytes < 0x003BF) {      assembledTwoBytes+=0x0A1A1;    } else {      assembledTwoBytes+=0x0A6A1;    }    buffer[offset]=(byte)((assembledTwoBytes >> 8) & 0xFF);    buffer[offset + 1]=(byte)(assembledTwoBytes & 0xFF);    offset+=2;    count--;  }  try {    result.append(new String(buffer,StringUtils.GB2312));  } catch (  UnsupportedEncodingException uee) {    throw FormatException.getFormatInstance();  }}  }
class C{  public boolean equalTo(Test t){  return (m_AttIndex == t.m_AttIndex && m_Split == t.m_Split && m_Not == t.m_Not);}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  private void createCategoryPlot(){  if (chart == null) {    CategoryAxis xAxis=new CategoryAxis("");    NumberAxis yAxis=new NumberAxis("Value");    yAxis.setAutoRangeIncludesZero(false);    final BoxAndWhiskerRenderer renderer=new BoxAndWhiskerRenderer();    renderer.setFillBox(true);    renderer.setBaseToolTipGenerator(new BoxAndWhiskerToolTipGenerator());    final CategoryPlot plot=new CategoryPlot();    plot.setDomainAxis(xAxis);    plot.setRangeAxis(yAxis);    plot.setRenderer(renderer);    chart=new JFreeChart("",JFreeChart.DEFAULT_TITLE_FONT,plot,true);    ChartFactory.getChartTheme().apply(chart);  } else   if (!(chart.getPlot() instanceof CategoryPlot)) {    throw new FrameworkException("Can not combine XY plot and categorial plot");  }}  }
class C{  public ByteLazyValue(ByteSupplier supplier){  Validate.notNull(supplier,"supplier can't be null!");  this.supplier=supplier;}  }
class C{  public void submitTask(Runnable task) throws IllegalArgumentException {  stateCheck();  if (task == null) {    throw new IllegalArgumentException("No task specified.");  }synchronized (jobList) {    jobList.add(jobList.size(),task);    jobList.notify();  }  createThread();}  }
class C{  public boolean remove(Marker marker){  Collection collection=mAllMarkers.get(marker);  return collection != null && collection.remove(marker);}  }
class C{  protected AbstractGraph(int[][] edges,int numberOfVertices){  for (int i=0; i < numberOfVertices; i++)   addVertex((V)(new Integer(i)));  createAjacencyLists(edges,numberOfVertices);}  }
class C{  public T caseFeatureConfiguration(FeatureConfiguration object){  return null;}  }
class C{  public static Message newRegistrationMessage(final String messageId,final String action,final String tenantId,final String deviceId,final String replyTo){  final Message message=ProtonHelper.message();  message.setMessageId(messageId);  message.setReplyTo(replyTo);  final HashMap<String,String> map=new HashMap<>();  map.put(MessageHelper.APP_PROPERTY_DEVICE_ID,deviceId);  map.put(MessageHelper.APP_PROPERTY_TENANT_ID,tenantId);  map.put(RegistrationConstants.APP_PROPERTY_ACTION,action);  final ApplicationProperties applicationProperties=new ApplicationProperties(map);  message.setApplicationProperties(applicationProperties);  return message;}  }
class C{  public void ponderHit(Move move){  throw new UnsupportedOperationException("ponderHit is not yet implemented");}  }
class C{  protected void removeDefinitionRef(Element defRef){  ImportRecord ir=(ImportRecord)imports.get(defRef);  NodeEventTarget et=(NodeEventTarget)defRef;  et.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",refAttrListener,false);  DefinitionRecord defRec=(DefinitionRecord)definitions.get(ir.node,defRef);  removeDefinition(defRec);  imports.remove(defRef);}  }
class C{  private void readCrlf() throws IOException {  final int crsymbol=this.origin.read();  final int lfsymbol=this.origin.read();  if (crsymbol != '\r' || lfsymbol != '\n') {    throw new IOException(String.format("%s %d%s%d","CRLF expected at end of chunk: ",crsymbol,"/",lfsymbol));  }}  }
class C{  public static void printSystemInfo(){  err("Java version:  " + System.getProperty("java.version"));  err("Runtime name:  " + System.getProperty("java.runtime.name"));  err("Vendor:        " + System.getProperty("java.vendor"));  err("VM version:    " + System.getProperty("java.vm.version"));  err("VM vendor:     " + System.getProperty("java.vm.vendor"));  err("VM name:       " + System.getProperty("java.vm.name"));  err("VM info:       " + System.getProperty("java.vm.info"));  err("OS name:       " + System.getProperty("os.name"));  err("OS arch:       " + System.getProperty("os.arch"));  err("OS version:    " + System.getProperty("os.version"));  err("Encoding:      " + System.getProperty("file.encoding"));  err("JFlex version: " + Main.version);}  }
class C{  public boolean hasChildren(){  return children != null && children.size() > 0;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementhasattribute03.class,args);}  }
class C{  protected void prepare(){  for (  ProcessInfoParameter para : getParameter()) {    String name=para.getParameterName();    if (para.getParameter() == null)     ; else     if (name.equals("M_Product_Category_ID")) {      p_M_Product_Category_ID=para.getParameterAsInt();    } else     if (name.equals(MPPProductPlanning.COLUMNNAME_M_Warehouse_ID)) {      p_M_Warehouse_ID=para.getParameterAsInt();    } else     if (name.equals(MPPProductPlanning.COLUMNNAME_S_Resource_ID)) {      p_S_Resource_ID=para.getParameterAsInt();    } else     if (name.equals(MPPProductPlanning.COLUMNNAME_IsCreatePlan)) {      p_CreatePlan="Y".equals((String)para.getParameter());    } else     if (name.equals(MPPProductPlanning.COLUMNNAME_IsMPS)) {      p_MPS="Y".equals((String)para.getParameter());    } else     if (name.equals(MPPProductPlanning.COLUMNNAME_DD_NetworkDistribution_ID)) {      p_DD_NetworkDistribution_ID=para.getParameterAsInt();    } else     if (name.equals(MPPProductPlanning.COLUMNNAME_AD_Workflow_ID)) {      p_AD_Workflow_ID=para.getParameterAsInt();    } else     if (name.equals(MPPProductPlanning.COLUMNNAME_TimeFence)) {      p_TimeFence=((BigDecimal)para.getParameter());    } else     if (name.equals(MPPProductPlanning.COLUMNNAME_TransferTime)) {      p_TransferTime=((BigDecimal)para.getParameter());    } else     if (name.equals(MPPProductPlanning.COLUMNNAME_SafetyStock)) {      p_SafetyStock=((BigDecimal)para.getParameter());    } else     if (name.equals(MPPProductPlanning.COLUMNNAME_Order_Min)) {      p_Order_Min=((BigDecimal)para.getParameter());    } else     if (name.equals(MPPProductPlanning.COLUMNNAME_Order_Max)) {      p_Order_Max=((BigDecimal)para.getParameter());    } else     if (name.equals(MPPProductPlanning.COLUMNNAME_Order_Pack)) {      p_Order_Pack=((BigDecimal)para.getParameter());    } else     if (name.equals(MPPProductPlanning.COLUMNNAME_Order_Qty)) {      p_Order_Qty=((BigDecimal)para.getParameter());    } else     if (name.equals(MPPProductPlanning.COLUMNNAME_WorkingTime)) {      p_WorkingTime=((BigDecimal)para.getParameter());    } else     if (name.equals(MPPProductPlanning.COLUMNNAME_Yield)) {      p_Yield=((BigDecimal)para.getParameter()).intValue();    } else     if (name.equals(MPPProductPlanning.COLUMNNAME_DeliveryTime_Promised)) {      p_DeliveryTime_Promised=((BigDecimal)para.getParameter());    } else     if (name.equals(MPPProductPlanning.COLUMNNAME_Order_Period)) {      p_OrderPeriod=((BigDecimal)para.getParameter());    } else     if (name.equals(MPPProductPlanning.COLUMNNAME_Order_Policy)) {      p_OrderPolicy=((String)para.getParameter());    } else     if (name.equals(MPPProductPlanning.COLUMNNAME_Planner_ID)) {      p_Planner=para.getParameterAsInt();    } else {      log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);    }  }  m_AD_Client_ID=Env.getAD_Client_ID(getCtx());  if (p_M_Warehouse_ID > 0) {    MWarehouse w=MWarehouse.get(getCtx(),p_M_Warehouse_ID);    m_AD_Org_ID=w.getAD_Org_ID();  }}  }
class C{  protected void addControlPoints(Iterable<Position> positions,RenderableLayer layer){  PointPlacemarkAttributes attrs=new PointPlacemarkAttributes();  attrs.setUsePointAsDefaultImage(true);  int i=1;  for (  Position p : positions) {    PointPlacemark placemark=new PointPlacemark(p);    placemark.setValue(AVKey.DISPLAY_NAME,"Tactical Graphic Position " + i);    placemark.setAttributes(attrs);    placemark.setHighlightAttributes(attrs);    layer.addRenderable(placemark);    i++;  }}  }
class C{  public BayesIm maximization(double threshhold){  double distance=Double.MAX_VALUE;  BayesIm oldBayesIm=estimatedIm;  BayesIm newBayesIm=null;  while (Double.isNaN(distance) || distance > threshhold) {    expectation(oldBayesIm);    newBayesIm=getEstimatedIm();    distance=BayesImDistanceFunction.distance(newBayesIm,oldBayesIm);    oldBayesIm=newBayesIm;  }  return newBayesIm;}  }
class C{  protected void removeStableID(Object item){  mIdMap.remove(item);}  }
class C{  public void append(String value){  if (count == data.length) {    data=PApplet.expand(data);  }  data[count++]=value;}  }
class C{  public boolean remove(Object o){  hashCodeUpToDate=false;  if (o == null) {    for (int index=0; index < size; index++)     if (elementData[index] == null) {      fastRemove(index);      return true;    }  } else {    for (int index=0; index < size; index++)     if (o.equals(elementData[index])) {      fastRemove(index);      return true;    }  }  return false;}  }
class C{  public final boolean signIn(final String gitkitToken) throws AbelanaClientException {  if (isConnectedToServerOrTryToConnect()) {    SignInRequest signInRequest=new SignInRequest();    signInRequest.gitkitToken=gitkitToken;    try {      SignInResponse signInResponse=mBlockingStub.signIn(signInRequest);      if (signInResponse.error == null) {        setUserIdToken(signInResponse.userToken);        return true;      } else {        throw new AbelanaClientException(mContext.getString(R.string.server_authentication_error));      }    } catch (    RuntimeException e) {      throw new AbelanaClientException(mContext.getString(R.string.server_connection_error));    }  } else {    throw new AbelanaClientException(mContext.getString(R.string.server_connection_error));  }}  }
class C{  private static Pair<String,String> methodWithPairResult(){  return new ImmutablePair<>("valueA","valueB");}  }
class C{  public Matrix3f(){  mMat=new float[9];  loadIdentity();}  }
class C{  public static OFGroup createL2DCOFloodOverUnicastTunnels(U16 index,U16 tunnelId){  return OFGroup.of(0 | (index.getRaw() & 0x03ff) | (tunnelId.getRaw() << 12)| (L2OverlaySubType.L2_OVERLAY_FLOOD_OVER_UNICAST_TUNNELS << 10)| (OFDPAGroupType.L2_DATA_CENTER_OVERLAY << 28));}  }
class C{  private boolean extractorQueueEmpty() throws InterruptedException {  if (extractor.hasMoreEvents())   return false; else   if (blockCommitIntervalMillis <= 0)   return true; else {    long nextCommitMillis=lastCommitMillis + blockCommitIntervalMillis;    long sleepMillis=nextCommitMillis - System.currentTimeMillis();    while (sleepMillis > 0) {      Thread.sleep(1);      if (extractor.hasMoreEvents())       return false;      sleepMillis=nextCommitMillis - System.currentTimeMillis();    }    return true;  }}  }
class C{  public PasswordPortal(){}  }
class C{  private void showSelectedNodes(){  final Set<NaviNode> selectedNodes=m_graph.getSelectedNodes();  final List<NaviNode> allNodes=GraphHelpers.getNodes(m_graph);  allNodes.removeAll(selectedNodes);  showNodes(selectedNodes,allNodes);}  }
class C{  public boolean hasNestedTransaction(){  return mTransactionStack != null && mTransactionStack.mParent != null;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:37.891 -0500",hash_original_method="2AE1DB426BA66F196E718F42EC30B693",hash_generated_method="78A913CBFB33499650BFF4E14048024E") public byte[] encodeAsBytes(String transport){  if (this.isNullRequest()) {    return "\r\n\r\n".getBytes();  } else   if (this.requestLine == null) {    return new byte[0];  }  byte[] rlbytes=null;  if (requestLine != null) {    try {      rlbytes=requestLine.encode().getBytes("UTF-8");    } catch (    UnsupportedEncodingException ex) {      InternalErrorHandler.handleException(ex);    }  }  byte[] superbytes=super.encodeAsBytes(transport);  byte[] retval=new byte[rlbytes.length + superbytes.length];  System.arraycopy(rlbytes,0,retval,0,rlbytes.length);  System.arraycopy(superbytes,0,retval,rlbytes.length,superbytes.length);  return retval;}  }
class C{  private static void initTestFile(File blah) throws Exception {  FileOutputStream fos=new FileOutputStream(blah);  BufferedWriter awriter=new BufferedWriter(new OutputStreamWriter(fos,"8859_1"));  for (int i=0; i < 4000; i++) {    String number=new Integer(i).toString();    for (int h=0; h < 4 - number.length(); h++)     awriter.write("0");    awriter.write("" + i);    awriter.newLine();  }  awriter.flush();  awriter.close();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean empty(){  return size == 0;}  }
class C{  private void onPackageStatsLoaded(View headerView){  if (mPackageStats == null)   return;  TextView sizeCodeView=(TextView)headerView.findViewById(R.id.size_code);  sizeCodeView.setText(getReadableSize(mPackageStats.codeSize));  TextView sizeCacheView=(TextView)headerView.findViewById(R.id.size_cache);  sizeCacheView.setText(getReadableSize(mPackageStats.cacheSize));  TextView sizeDataView=(TextView)headerView.findViewById(R.id.size_data);  sizeDataView.setText(getReadableSize(mPackageStats.dataSize));  TextView sizeExtCodeView=(TextView)headerView.findViewById(R.id.size_ext_code);  sizeExtCodeView.setText(getReadableSize(mPackageStats.externalCodeSize));  TextView sizeExtCacheView=(TextView)headerView.findViewById(R.id.size_ext_cache);  sizeExtCacheView.setText(getReadableSize(mPackageStats.externalCacheSize));  TextView sizeExtDataView=(TextView)headerView.findViewById(R.id.size_ext_data);  sizeExtDataView.setText(getReadableSize(mPackageStats.externalDataSize));  TextView sizeObb=(TextView)headerView.findViewById(R.id.size_ext_obb);  sizeObb.setText(getReadableSize(mPackageStats.externalObbSize));  TextView sizeMedia=(TextView)headerView.findViewById(R.id.size_ext_media);  sizeMedia.setText(getReadableSize(mPackageStats.externalMediaSize));}  }
class C{  public static boolean isProtected(int mod){  return (mod & PROTECTED) != 0;}  }
class C{  public void romoveEntryFromMonitoringRegionMap(DistributedMember member){  monitoringRegionMap.remove(member);}  }
class C{  private static LosEffects losDivided(IGame game,AttackInfo ai,boolean diagramLoS,boolean partialCover){  ArrayList<Coords> in=Coords.intervening(ai.attackPos,ai.targetPos,true);  LosEffects los=new LosEffects();  boolean targetInBuilding=false;  if (ai.targetEntity) {    targetInBuilding=Compute.isInBuilding(game,ai.targetAbsHeight - game.getBoard().getHex(ai.targetPos).surface(),ai.targetPos);  }  if (targetInBuilding && Compute.isInBuilding(game,ai.attackAbsHeight - game.getBoard().getHex(ai.attackPos).surface(),ai.attackPos)) {    los.setThruBldg(game.getBoard().getBuildingAt(in.get(0)));    los.buildingLevelsOrHexes+=(Math.abs((ai.attackAbsHeight - ai.attackHeight) - (ai.targetAbsHeight - ai.targetHeight)));  }  for (int i=3; i < in.size() - 2; i+=3) {    los.add(losForCoords(game,ai,in.get(i),los.getThruBldg(),diagramLoS,partialCover));  }  if ((ai.minimumWaterDepth < 1) && ai.underWaterCombat) {    los.blocked=true;  }  if (los.losModifiers(game).getValue() == TargetRoll.IMPOSSIBLE) {    return los;  }  if (in.size() < 2) {    return los;  }  LosEffects totalLeftLos=new LosEffects();  LosEffects totalRightLos=new LosEffects();  for (int i=1; i < in.size() - 2; i+=3) {    LosEffects leftLos=losForCoords(game,ai,in.get(i),los.getThruBldg(),diagramLoS,partialCover);    LosEffects rightLos=losForCoords(game,ai,in.get(i + 1),los.getThruBldg(),diagramLoS,partialCover);    if (ai.targetInfantry && targetInBuilding) {      if (null == leftLos.getThruBldg()) {        leftLos.infProtected=true;      } else       if (null == rightLos.getThruBldg()) {        rightLos.infProtected=true;      }    }    if (game.getOptions().booleanOption("tacops_partial_cover") && ai.targetIsMech) {      boolean losBlockedByCover=false;      if (leftLos.targetCover == COVER_HORIZONTAL && rightLos.targetCover == COVER_NONE) {        leftLos.targetCover=COVER_LOWLEFT;        rightLos.targetCover=COVER_LOWLEFT;        rightLos.setCoverBuildingPrimary(leftLos.getCoverBuildingPrimary());        rightLos.setCoverDropshipPrimary(leftLos.getCoverDropshipPrimary());        rightLos.setDamagableCoverTypePrimary(leftLos.getDamagableCoverTypePrimary());        rightLos.setCoverLocPrimary(leftLos.getCoverLocPrimary());      } else       if ((leftLos.targetCover == COVER_NONE && rightLos.targetCover == COVER_HORIZONTAL)) {        leftLos.targetCover=COVER_LOWRIGHT;        rightLos.targetCover=COVER_LOWRIGHT;        leftLos.setCoverBuildingPrimary(rightLos.getCoverBuildingPrimary());        leftLos.setCoverDropshipPrimary(rightLos.getCoverDropshipPrimary());        leftLos.setDamagableCoverTypePrimary(rightLos.getDamagableCoverTypePrimary());        leftLos.setCoverLocPrimary(rightLos.getCoverLocPrimary());      } else       if (leftLos.targetCover == COVER_FULL && rightLos.targetCover == COVER_NONE) {        leftLos.targetCover=COVER_LEFT;        rightLos.targetCover=COVER_LEFT;        rightLos.setCoverBuildingPrimary(leftLos.getCoverBuildingPrimary());        rightLos.setCoverDropshipPrimary(leftLos.getCoverDropshipPrimary());        rightLos.setDamagableCoverTypePrimary(leftLos.getDamagableCoverTypePrimary());        rightLos.setCoverLocPrimary(leftLos.getCoverLocPrimary());        losBlockedByCover=true;      } else       if (leftLos.targetCover == COVER_NONE && rightLos.targetCover == COVER_FULL) {        leftLos.targetCover=COVER_RIGHT;        rightLos.targetCover=COVER_RIGHT;        leftLos.setCoverBuildingPrimary(rightLos.getCoverBuildingPrimary());        leftLos.setCoverDropshipPrimary(rightLos.getCoverDropshipPrimary());        leftLos.setDamagableCoverTypePrimary(rightLos.getDamagableCoverTypePrimary());        leftLos.setCoverLocPrimary(rightLos.getCoverLocPrimary());        losBlockedByCover=true;      } else       if (leftLos.targetCover == COVER_FULL && rightLos.targetCover == COVER_HORIZONTAL) {        leftLos.targetCover=COVER_75LEFT;        rightLos.targetCover=COVER_75LEFT;        setSecondaryCover(leftLos,rightLos);        losBlockedByCover=true;      } else       if (leftLos.targetCover == COVER_HORIZONTAL && rightLos.targetCover == COVER_FULL) {        leftLos.targetCover=COVER_75RIGHT;        rightLos.targetCover=COVER_75RIGHT;        setSecondaryCover(leftLos,rightLos);        losBlockedByCover=true;      } else       if (leftLos.targetCover == COVER_HORIZONTAL && rightLos.targetCover == COVER_HORIZONTAL) {        setSecondaryCover(leftLos,rightLos);      }      if (!los.blocked && (!leftLos.blocked || !rightLos.blocked) && losBlockedByCover) {        leftLos.blocked=false;        rightLos.blocked=false;      }    }    if (game.getOptions().booleanOption("tacops_partial_cover") && ai.attackerIsMech) {      boolean losBlockedByCover=false;      if (leftLos.attackerCover == COVER_HORIZONTAL && rightLos.attackerCover == COVER_NONE) {        leftLos.attackerCover=COVER_LOWLEFT;        rightLos.attackerCover=COVER_LOWLEFT;        rightLos.targetCover=COVER_LOWLEFT;        rightLos.setCoverBuildingPrimary(leftLos.getCoverBuildingPrimary());        rightLos.setCoverDropshipPrimary(leftLos.getCoverDropshipPrimary());        rightLos.setDamagableCoverTypePrimary(leftLos.getDamagableCoverTypePrimary());        rightLos.setCoverLocPrimary(leftLos.getCoverLocPrimary());      } else       if ((leftLos.attackerCover == COVER_NONE && rightLos.attackerCover == COVER_HORIZONTAL)) {        leftLos.attackerCover=COVER_LOWRIGHT;        rightLos.attackerCover=COVER_LOWRIGHT;        leftLos.setCoverBuildingPrimary(rightLos.getCoverBuildingPrimary());        leftLos.setCoverDropshipPrimary(rightLos.getCoverDropshipPrimary());        leftLos.setDamagableCoverTypePrimary(rightLos.getDamagableCoverTypePrimary());        leftLos.setCoverLocPrimary(rightLos.getCoverLocPrimary());      } else       if (leftLos.attackerCover == COVER_FULL && rightLos.attackerCover == COVER_NONE) {        leftLos.attackerCover=COVER_LEFT;        rightLos.attackerCover=COVER_LEFT;        losBlockedByCover=true;      } else       if (leftLos.attackerCover == COVER_NONE && rightLos.attackerCover == COVER_FULL) {        leftLos.attackerCover=COVER_RIGHT;        rightLos.attackerCover=COVER_RIGHT;        losBlockedByCover=true;      } else       if (leftLos.attackerCover == COVER_FULL && rightLos.attackerCover == COVER_HORIZONTAL) {        leftLos.attackerCover=COVER_75LEFT;        rightLos.attackerCover=COVER_75LEFT;        losBlockedByCover=true;      } else       if (leftLos.attackerCover == COVER_HORIZONTAL && rightLos.attackerCover == COVER_FULL) {        leftLos.attackerCover=COVER_75RIGHT;        rightLos.attackerCover=COVER_75RIGHT;        losBlockedByCover=true;      }      if (!los.blocked && (!leftLos.blocked || !rightLos.blocked) && losBlockedByCover) {        leftLos.blocked=false;        rightLos.blocked=false;      }    }    totalLeftLos.add(leftLos);    totalRightLos.add(rightLos);  }  int lVal=totalLeftLos.losModifiers(game).getValue();  int rVal=totalRightLos.losModifiers(game).getValue();  if ((lVal > rVal) || ((lVal == rVal) && totalLeftLos.isAttackerCover())) {    los.add(totalLeftLos);  } else {    los.add(totalRightLos);  }  return los;}  }
class C{  public static void writeAttribute(final XMLStreamWriter writer,final String attributeName,final String value) throws XMLStreamException {  if (value == null) {    return;  }  writer.writeAttribute(attributeName,value);}  }
class C{  public static void clearAllCaches(){  for (  UtilCache<?,?> cache : utilCacheTable.values()) {    cache.clear();  }}  }
class C{  private void initRange(){  mMinValue=MathHelper.NULL_VALUE;  mMaxValue=MathHelper.NULL_VALUE;  int length=getItemCount();  for (int k=0; k < length; k++) {    updateRange(getValue(k));  }}  }
class C{  public Points(Config config){}  }
class C{  @Override synchronized public void shutdown(){  if (!isOpen())   return;  open=false;  if (log.isInfoEnabled())   log.info("begin");  final long begin=System.currentTimeMillis();  final long shutdownTimeout=this.shutdownTimeout == 0L ? Long.MAX_VALUE : this.shutdownTimeout;  final TimeUnit unit=TimeUnit.MILLISECONDS;  txWriteService.shutdown();  readService.shutdown();  writeService.shutdown();  if (sampleService != null)   sampleService.shutdown();  try {    if (log.isInfoEnabled())     log.info("Awaiting transaction service termination");    final long elapsed=System.currentTimeMillis() - begin;    if (!txWriteService.awaitTermination(shutdownTimeout - elapsed,unit)) {      log.warn("Transaction service termination: timeout");    }  } catch (  InterruptedException ex) {    log.warn("Interrupted awaiting transaction service termination.",ex);  }  try {    if (log.isInfoEnabled())     log.info("Awaiting read service termination");    final long elapsed=System.currentTimeMillis() - begin;    if (!readService.awaitTermination(shutdownTimeout - elapsed,unit)) {      log.warn("Read service termination: timeout");    }  } catch (  InterruptedException ex) {    log.warn("Interrupted awaiting read service termination.",ex);  }  try {    final long elapsed=System.currentTimeMillis() - begin;    final long timeout=shutdownTimeout - elapsed;    if (log.isInfoEnabled())     log.info("Awaiting write service termination: will wait " + timeout + "ms");    if (!writeService.awaitTermination(timeout,unit)) {      log.warn("Write service termination : timeout");    }  } catch (  InterruptedException ex) {    log.warn("Interrupted awaiting write service termination.",ex);  }  final long elapsed=System.currentTimeMillis() - begin;  if (log.isInfoEnabled())   log.info("Done: elapsed=" + elapsed + "ms");}  }
class C{  public static String toString(final InputStream is) throws IOException {  final BufferedReader br=new BufferedReader(new InputStreamReader(is));  final StringBuffer content=new StringBuffer();  String line=br.readLine();  if (line != null) {    content.append(line);    while ((line=br.readLine()) != null)     content.append("\n" + line);  }  br.close();  return content.toString();}  }
class C{  public PackedDataInput(DataInput in){  this.in=in;  skipToNextByte();}  }
class C{  @VisibleForTesting public void initialize(){  UiThreadUtil.assertOnUiThread();  Assertions.assertCondition(!mInitialized,"This catalyst instance has already been initialized");  mInitialized=true;  mJavaRegistry.notifyCatalystInstanceInitialized();}  }
class C{  public static byte[] convertToXmlDSig(final EncryptionAlgorithm algorithm,byte[] signatureValue){  if (EncryptionAlgorithm.ECDSA == algorithm) {    return convertECDSAASN1toXMLDSIG(signatureValue);  } else   if (EncryptionAlgorithm.DSA == algorithm) {    return convertDSAASN1toXMLDSIG(signatureValue);  } else {    return signatureValue;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public RasterPlotComponent(final String name,final RasterModel model){  super(name);  this.model=model;  initializeAttributes();  addListener();}  }
class C{  protected void read(byte[] normBytes,byte[] fcdBytes,byte[] auxBytes,char[] extraData,char[] combiningTable) throws IOException {  dataInputStream.readFully(normBytes);  for (int i=0; i < extraData.length; i++) {    extraData[i]=dataInputStream.readChar();  }  for (int i=0; i < combiningTable.length; i++) {    combiningTable[i]=dataInputStream.readChar();  }  dataInputStream.readFully(fcdBytes);  dataInputStream.readFully(auxBytes);}  }
class C{  private double calculateLogLikelihood(){  if (!isValidate(indexVariable.getValues())) {    return Double.NEGATIVE_INFINITY;  }  Double maxI=(double)(int)getMaxIndex(indexVariable.getValues());  maxIndexVariable.setValue(0,maxI);  return 0.0;}  }
class C{  public void addCollect(int regency,SignedObject signedCollect){  HashSet<SignedObject> c=collects.get(regency);  if (c == null)   c=new HashSet<SignedObject>();  c.add(signedCollect);  collects.put(regency,c);}  }
class C{  public ICC_ColorSpace(ICC_Profile profile){  super(profile.getColorSpaceType(),profile.getNumComponents());  int profileClass=profile.getProfileClass();  if ((profileClass != ICC_Profile.CLASS_INPUT) && (profileClass != ICC_Profile.CLASS_DISPLAY) && (profileClass != ICC_Profile.CLASS_OUTPUT)&& (profileClass != ICC_Profile.CLASS_COLORSPACECONVERSION)&& (profileClass != ICC_Profile.CLASS_NAMEDCOLOR)&& (profileClass != ICC_Profile.CLASS_ABSTRACT)) {    throw new IllegalArgumentException("Invalid profile type");  }  thisProfile=profile;  setMinMax();}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  public ChromeWindow(ChromeActivity activity){  super(activity);}  }
class C{  public static Sequence zero(Type c){  return new Sequence().extend(TypedOperation.createNullOrZeroInitializationForType(c),new ArrayList<Variable>());}  }
class C{  @Override protected int computeHorizontalScrollRange(){  int count=getChildCount();  return count == 0 ? getWidth() : (getChildAt(0)).getRight();}  }
class C{  public Boolean isUseAutoDetect(){  return useAutoDetect;}  }
class C{  public static final MediaFormat createVideoFormat(String mime,int width,int height){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_WIDTH,width);  format.setInteger(KEY_HEIGHT,height);  return format;}  }
class C{  public void pushSscrCssIfSwitchingEnabled(int css){  if (!isSscrSSDSet()) {    setSscrPSS(getSscrCSS());    setSscrCSS(css);  }}  }
class C{  public static Duration parseDuration(String s){  return dtFactory.newDuration(s);}  }
class C{  public void testSpokenTextMomentConstruction(){  String xml="";  xml+=createStartMissionXml("start","Name");  xml+=createSpokenTextMomentXml("start","start","Hello!");  xml+=createEndMissionXml();  InputStream momentInputStream=new ByteArrayInputStream(xml.getBytes());  mMission=new Mission(mMissionData);  try {    mMission.readMoments(momentInputStream);  } catch (  MissionParseException e) {    e.printStackTrace();  }  Assert.assertEquals("Mission 1",mMissionData.getMissionId());  Assert.assertEquals(1,mMissionData.getNumMoments());  Assert.assertEquals(true,mMissionData.getMomentFromId("start") instanceof SpokenTextMoment);  Assert.assertEquals("start",mMissionData.getMomentFromId("start").getNextMomentId());}  }
class C{  public void testEquals(){  Object obj=null;  boolean expectedReturn=false;  optionalAttribute.setBody(expectedAttributeValue,0,expectedAttributeValue.length);  boolean actualReturn=optionalAttribute.equals(obj);  assertEquals("failed null comparison",expectedReturn,actualReturn);  obj="hehe :)";  actualReturn=optionalAttribute.equals(obj);  assertEquals("failed wrong type comparison",expectedReturn,actualReturn);  obj=new OptionalAttribute(msgFixture.optionalAttributeType);  ((OptionalAttribute)obj).setBody(expectedAttributeValue,0,expectedAttributeValue.length);  expectedReturn=true;  actualReturn=optionalAttribute.equals(obj);  assertEquals("failed null comparison",expectedReturn,actualReturn);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.008 -0400",hash_original_method="84EBDF4A6DAAA2DC457105BE949DDD50",hash_generated_method="2325DB5571F48AF038D1FF76201F97FE") public final void debug(Object message){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG)) {    log(SimpleLog.LOG_LEVEL_DEBUG,message,null);  }}  }
class C{  public void endVisit(BooleanLiteral node){}  }
class C{  public void testConnectFibonacciBackoffStrategy() throws Throwable {  ConnectionStrategy strategy=ConnectionStrategies.FIBONACCI_BACKOFF;  ConnectionStrategy.Attempt attempt;  attempt=mock(ConnectionStrategy.Attempt.class);  when(attempt.attempt()).thenReturn(1);  strategy.attemptFailed(attempt);  verify(attempt).retry(Duration.ofSeconds(1));  attempt=mock(ConnectionStrategy.Attempt.class);  when(attempt.attempt()).thenReturn(2);  strategy.attemptFailed(attempt);  verify(attempt).retry(Duration.ofSeconds(1));  attempt=mock(ConnectionStrategy.Attempt.class);  when(attempt.attempt()).thenReturn(3);  strategy.attemptFailed(attempt);  verify(attempt).retry(Duration.ofSeconds(2));  attempt=mock(ConnectionStrategy.Attempt.class);  when(attempt.attempt()).thenReturn(4);  strategy.attemptFailed(attempt);  verify(attempt).retry(Duration.ofSeconds(3));  attempt=mock(ConnectionStrategy.Attempt.class);  when(attempt.attempt()).thenReturn(5);  strategy.attemptFailed(attempt);  verify(attempt).retry(Duration.ofSeconds(5));  attempt=mock(ConnectionStrategy.Attempt.class);  when(attempt.attempt()).thenReturn(6);  strategy.attemptFailed(attempt);  verify(attempt).retry(Duration.ofSeconds(8));  attempt=mock(ConnectionStrategy.Attempt.class);  when(attempt.attempt()).thenReturn(7);  strategy.attemptFailed(attempt);  verify(attempt).retry(Duration.ofSeconds(13));  attempt=mock(ConnectionStrategy.Attempt.class);  when(attempt.attempt()).thenReturn(8);  strategy.attemptFailed(attempt);  verify(attempt).retry(Duration.ofSeconds(13));}  }
class C{  public void cancelCellEditing(){  fireEditingCanceled();}  }
class C{  protected final void addFunction(String name,Method method){  this.functions.put(name,method);}  }
class C{  public void recompose(Vector recomposableElements) throws TransformerException {  int n=getIncludeCountComposed();  for (int i=-1; i < n; i++) {    Stylesheet included=getIncludeComposed(i);    int s=included.getOutputCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getOutput(j));    }    s=included.getAttributeSetCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getAttributeSet(j));    }    s=included.getDecimalFormatCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getDecimalFormat(j));    }    s=included.getKeyCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getKey(j));    }    s=included.getNamespaceAliasCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getNamespaceAlias(j));    }    s=included.getTemplateCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getTemplate(j));    }    s=included.getVariableOrParamCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getVariableOrParam(j));    }    s=included.getStripSpaceCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getStripSpace(j));    }    s=included.getPreserveSpaceCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getPreserveSpace(j));    }  }}  }
class C{  public void testPrefixedCommand() throws Exception {  ProcessHelper processHelper=new ProcessHelper();  processHelper.setCmdPrefix("bash -c");  processHelper.configure();  processHelper.exec("Running a prefixed echo command","echo");}  }
class C{  public static <E extends Comparable<E>>void quickSort(List<E> array){  if (array.isEmpty()) {    return;  }  recursiveQuickSort(array,0,array.size() - 1);}  }
class C{  @Override public void resetDistribution(Instances data) throws Exception {  Instances insts=new Instances(data,data.numInstances());  for (int i=0; i < data.numInstances(); i++) {    if (whichSubset(data.instance(i)) > -1) {      insts.add(data.instance(i));    }  }  Distribution newD=new Distribution(insts,this);  newD.addInstWithUnknown(data,m_attIndex);  m_distribution=newD;}  }
class C{  public void createBuffer(BufferInfo bufferInfo,BufferType type,Buffer buffer,int target){  createBuffer(bufferInfo,type,buffer,target,bufferInfo.usage);}  }
class C{  public iOSActionBarWorker(ABv7 actionb){  super(actionb);}  }
class C{  void addVolumesToConsistencyGroup(String cgName,List<String> virtualVolumeNames) throws VPlexApiException {  s_logger.info("Request to add volumes {} to a consistency group {}",virtualVolumeNames,cgName);  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  List<VPlexClusterInfo> clusterInfoList=discoveryMgr.getClusterInfoLite();  Map<String,List<VPlexVirtualVolumeInfo>> clusterToVirtualVolumes=new HashMap<String,List<VPlexVirtualVolumeInfo>>();  for (  VPlexClusterInfo clusterInfo : clusterInfoList) {    List<VPlexVirtualVolumeInfo> clusterVolumeInfoList=discoveryMgr.getVirtualVolumesForCluster(clusterInfo.getName());    clusterToVirtualVolumes.put(clusterInfo.getName(),clusterVolumeInfoList);  }  List<VPlexVirtualVolumeInfo> virtualVolumeInfoList=new ArrayList<VPlexVirtualVolumeInfo>();  List<String> notFoundVirtualVolumeNames=new ArrayList<String>();  for (  String virtualVolumeName : virtualVolumeNames) {    s_logger.info("Find virtual volume {}",virtualVolumeName);    VPlexVirtualVolumeInfo virtualVolumeInfo=null;    for (    String clusterId : clusterToVirtualVolumes.keySet()) {      List<VPlexVirtualVolumeInfo> clusterVolumeInfoList=clusterToVirtualVolumes.get(clusterId);      for (      VPlexVirtualVolumeInfo volumeInfo : clusterVolumeInfoList) {        s_logger.info("Virtual volume Info: {}",volumeInfo.toString());        if (volumeInfo.getName().equals(virtualVolumeName)) {          s_logger.info("Found virtual volume {}",volumeInfo.getName());          virtualVolumeInfo=volumeInfo;          break;        }      }      if (virtualVolumeInfo != null) {        break;      }    }    if (virtualVolumeInfo == null) {      notFoundVirtualVolumeNames.add(virtualVolumeName);    } else {      virtualVolumeInfoList.add(virtualVolumeInfo);    }  }  if (!notFoundVirtualVolumeNames.isEmpty()) {    throw VPlexApiException.exceptions.cantFindRequestedVolume(notFoundVirtualVolumeNames.toString());  }  VPlexConsistencyGroupInfo cgInfo=discoveryMgr.findConsistencyGroup(cgName,clusterInfoList,false);  ClientResponse response=null;  try {    URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_ADD_VOLUMES_TO_CG);    s_logger.info("Add volumes to consistency group URI is {}",requestURI.toString());    StringBuilder argBuilder=new StringBuilder();    for (    VPlexVirtualVolumeInfo virtualVolumeInfo : virtualVolumeInfoList) {      if (argBuilder.length() != 0) {        argBuilder.append(",");      }      argBuilder.append(virtualVolumeInfo.getPath());    }    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_V,argBuilder.toString());    argsMap.put(VPlexApiConstants.ARG_DASH_G,cgInfo.getPath());    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,false);    s_logger.info("Add volumes to consistency group POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Add volumes to consistency group response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        if (!areVolumesInCG(cgName,clusterInfoList,virtualVolumeNames)) {          s_logger.info("Add volumes to consistency group completing asynchronously");          try {            _vplexApiClient.waitForCompletion(response);          } catch (          VPlexApiException ex) {            if (!areVolumesInCG(cgName,clusterInfoList,virtualVolumeNames)) {              throw ex;            }          }        }      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.addVolumesToCGFailureStatus(cgInfo.getName(),String.valueOf(response.getStatus()),cause);      }    }    s_logger.info("Successfully added volumes to consistency group");  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedAddingVolumesToCG(cgInfo.getName(),e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  public static void main(String args[]) throws ParseException {  String r[]={"P-Charging-Function-Addresses: ccf=\"test str\"; ecf=token\n","P-Charging-Function-Addresses: ccf=192.1.1.1; ccf=192.1.1.2; ecf=192.1.1.3; ecf=192.1.1.4\n","P-Charging-Function-Addresses: ccf=[5555::b99:c88:d77:e66]; ccf=[5555::a55:b44:c33:d22]; " + "ecf=[5555::1ff:2ee:3dd:4cc]; ecf=[5555::6aa:7bb:8cc:9dd]\n"};  for (int i=0; i < r.length; i++) {    PChargingFunctionAddressesParser parser=new PChargingFunctionAddressesParser(r[i]);    System.out.println("original = " + r[i]);    PChargingFunctionAddresses chargAddr=(PChargingFunctionAddresses)parser.parse();    System.out.println("encoded = " + chargAddr.encode());  }}  }
class C{  private int numPropagatedImageReferences(ImageToProcess img,Set<TaskImageContainer> tasks) throws RuntimeException {  int countImageRefs=0;  for (  TaskImageContainer task : tasks) {    if (task.mImage != null && task.mImage != img) {      throw new RuntimeException("ERROR:  Spawned tasks cannot reference new images!");    }    if (task.mImage != null) {      countImageRefs++;    }  }  return countImageRefs;}  }
class C{  @Override public void nullSafeSet(PreparedStatement st,Object value,int index,SessionImplementor session) throws HibernateException, SQLException {  if (value == null) {    st.setNull(index,Types.OTHER);    return;  }  st.setObject(index,value,Types.OTHER);}  }
class C{  public STGroupFile(String fileName){  this(fileName,'<','>');}  }
class C{  public static void show(Context context,@StringRes int resId,@Duration int duration){  ToastBean bean=new ToastBean(context,resId,duration);  show(bean);}  }
class C{  public boolean hasVisited(SimpleMethod method){  return simpleMethodNameSet.contains(method.getLocationAndName());}  }
class C{  public boolean betterThan(Fitness fitness){  return paretoDominates((MultiObjectiveFitness)fitness);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static synchronized void loadMacro(Macro macro){  currentMacro=macro;}  }
class C{  public boolean exists(World world){  return world.getChunkProvider().chunkExists(xCoord >> 4,zCoord >> 4);}  }
class C{  private void fireEdit(ISelection selection){  managedForm.fireSelectionChanged(this,selection);  if (selection.isEmpty()) {    selectedAssignment=null;  } else {    selectedAssignment=(AbstractClassSensorAssignment<?>)((StructuredSelection)selection).getFirstElement();  }  updateButtonsState(selection);}  }
class C{  public Attribute(String name,String friendlyName,Collection<String> values){  this.name=name;  this.friendlyName=friendlyName;  this.values=values;}  }
class C{  public static Bitmap create(float width,float height,String character,int textSize,Align textAlign,int textColor,int backgroundColor,Context context){  Bitmap bitmap=Bitmap.createBitmap((int)width,(int)height,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(bitmap);  Paint paint=new Paint();  paint.setTextSize(textSize);  paint.setTextAlign(textAlign);  paint.setFakeBoldText(true);  paint.setColor(textColor);  canvas.drawColor(backgroundColor);  canvas.drawText(character,width / 2,height / 1.6f,paint);  return bitmap;}  }
class C{  public static <T>T withDataOutputStream(Path self,@ClosureParams(value=SimpleType.class,options="java.io.DataOutputStream") Closure<T> closure) throws IOException {  return IOGroovyMethods.withStream(newDataOutputStream(self),closure);}  }
class C{  public float floatValue(){  return (float)doubleValue;}  }
class C{  public static MatrixCharacteristics computeMatrixCharacteristics(JavaPairRDD<MatrixIndexes,MatrixBlock> input,int brlen,int bclen){  MatrixCharacteristics ret=input.map(new AnalyzeBlockMatrixCharacteristics(brlen,bclen)).reduce(new AggregateMatrixCharacteristics());  return ret;}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof SerializableLocation)) {    System.err.println("Not an instance of SerializableLocation.");    return false;  } else {    SerializableLocation sl=(SerializableLocation)o;    return approxEqual(latitude,sl.latitude) && approxEqual(longitude,sl.longitude) && approxEqual(accuracy,sl.accuracy)&& approxEqual(altitude,sl.altitude)&& approxEqual(bearing,sl.bearing)&& provider.equals(sl.provider)&& approxEqual(speed,sl.speed)&& this.time == sl.time && this.hasAccuracy == sl.hasAccuracy && this.hasAltitude == sl.hasAltitude && this.hasBearing == sl.hasBearing && this.hasSpeed == sl.hasSpeed;  }}  }
class C{  public long count(){  return xStats.count();}  }
class C{  @SuppressWarnings("null") public void removeSignalMastFromPanel(SignalMast signalMast){  removeSignalMastAssignment(signalMast);  SignalMastIcon h=null;  int index=-1;  for (int i=0; (i < layoutEditor.signalMastList.size()) && (index == -1); i++) {    h=layoutEditor.signalMastList.get(i);    if (h.getSignalMast() == signalMast) {      index=i;    }  }  if (index != (-1)) {    layoutEditor.signalMastList.remove(index);    h.remove();    h.dispose();    needRedraw=true;  }}  }
class C{  public AnnotatingModalGraphMouse(RenderContext<V,E> rc,AnnotatingGraphMousePlugin<V,E> annotatingPlugin,float in,float out){  super(in,out);  this.rc=rc;  this.basicTransformer=rc.getMultiLayerTransformer();  this.annotatingPlugin=annotatingPlugin;  loadPlugins();  setModeKeyListener(new ModeKeyAdapter(this));}  }
class C{  public UserModificationConstraintException(){  super();}  }
class C{  @SuppressWarnings("unchecked") @Override public void execute(Tuple tuple){  if (stopped)   return;  if (!(tuple.getValueByField(igniteTupleField) instanceof Map))   throw new IgniteException("Map as a streamer input is expected!");  final Map<K,V> gridVals=(Map<K,V>)tuple.getValueByField(igniteTupleField);  try {    if (log.isDebugEnabled())     log.debug("Tuple (id:" + tuple.getMessageId() + ") from storm: "+ gridVals);    getStreamer().addData(gridVals);    collector.ack(tuple);  } catch (  Exception e) {    log.error("Error while processing tuple of " + gridVals,e);    collector.fail(tuple);  }}  }
class C{  public static JPanel center(JComponent c){  JPanel p=new JPanel(new FlowLayout(FlowLayout.CENTER,0,0));  p.add(c);  return p;}  }
class C{  protected void indent() throws IOException {  indent(m_elemContext.m_currentElemDepth);}  }
class C{  private CIMInstance isRegisteredProfileValid(Iterator<CIMInstance> profileinstances){  CIMInstance profileInstance=null;  while (profileinstances.hasNext()) {    profileInstance=profileinstances.next();    String registeredName=getCIMPropertyValue(profileInstance,REGISTEREDNAME);    String registeredVersion=getCIMPropertyValue(profileInstance,REGISTEREDVERSION);    String registeredOrganization=getCIMPropertyValue(profileInstance,REGISTEREDORGANIZATION);    if (registeredName.contains(ARRAY) && registeredOrganization.equalsIgnoreCase(ELEVEN)) {      if (highestVersion.isEmpty()) {        highestVersionRegProfile=profileInstance;        highestVersion=registeredVersion;      } else       if (compareVersions(registeredVersion,highestVersion) > 0) {        highestVersionRegProfile=profileInstance;        highestVersion=registeredVersion;      }    }  }  return highestVersionRegProfile;}  }
class C{  private void checkForDuplicateDevice(URI id,String ip_address,Integer port_number,String smis_provider_ip,Integer smis_port_number,String name){  List<URI> existingDevices=_dbClient.queryByType(NetworkSystem.class,true);  for (  URI uri : existingDevices) {    NetworkSystem existing=_dbClient.queryObject(NetworkSystem.class,uri);    if (existing == null || existing.getId().equals(id)) {      continue;    }    if (existing.getIpAddress() != null && existing.getPortNumber() != null && ip_address != null && port_number != null && existing.getIpAddress().equalsIgnoreCase(ip_address) && existing.getPortNumber().equals(port_number)) {      throw APIException.badRequests.networkSystemExistsAtIPAddress(ip_address);    }    if (existing.getSmisProviderIP() != null && existing.getSmisPortNumber() != null && smis_provider_ip != null && smis_port_number != null && existing.getSmisProviderIP().equalsIgnoreCase(smis_provider_ip) && existing.getSmisPortNumber().equals(smis_port_number)) {      throw APIException.badRequests.networkSystemSMISProviderExistsAtIPAddress(smis_provider_ip);    }    if (existing.getLabel() != null && name != null && existing.getLabel().equalsIgnoreCase(name)) {      throw APIException.badRequests.resourceExistsWithSameName(NetworkSystem.class.getSimpleName());    }  }}  }
class C{  public OrientedResourceImpl(URI uri){  super(uri);}  }
class C{  private void updateCollForChequeBounce(final EgDemand demand,final BillReceiptInfo billRcptInfo){  LOGGER.debug("reconcileCollForChequeBounce : Updating Collection Started For Demand : " + demand + " with BillReceiptInfo - "+ billRcptInfo);  final BigDecimal totalCollChqBounced=getTotalChequeAmt(billRcptInfo);  final BigDecimal chqBouncePenalty=getChqBouncePenaltyAmt(totalCollChqBounced);  cancelBill(Long.valueOf(billRcptInfo.getBillReferenceNum()));  EgDemandDetails dmdDet=null;  final EgDemandDetails penaltyDmdDet=ptBillServiceImpl.getDemandDetail(demand,currInstallment,DEMANDRSN_STR_CHQ_BOUNCE_PENALTY);  if (penaltyDmdDet == null)   dmdDet=ptBillServiceImpl.insertDemandDetails(DEMANDRSN_CODE_CHQ_BOUNCE_PENALTY,chqBouncePenalty,currInstallment); else {    BigDecimal existDmdDetAmt=penaltyDmdDet.getAmount();    existDmdDetAmt=existDmdDetAmt == null || existDmdDetAmt.equals(BigDecimal.ZERO) ? existDmdDetAmt=BigDecimal.ZERO : existDmdDetAmt;    penaltyDmdDet.setAmount(existDmdDetAmt.add(chqBouncePenalty));    dmdDet=penaltyDmdDet;  }  demand.setMinAmtPayable(totalCollChqBounced.add(chqBouncePenalty));  demand.setAmtCollected(demand.getAmtCollected().subtract(billRcptInfo.getTotalAmount()));  demand.setBaseDemand(demand.getBaseDemand().add(chqBouncePenalty));  demand.setStatus(DMD_STATUS_CHEQUE_BOUNCED);  demand.addEgDemandDetails(dmdDet);  updateDmdDetForRcptCancel(demand,billRcptInfo);  LOGGER.debug("reconcileCollForChequeBounce : Updating Collection finished For Demand : " + demand);}  }
class C{  public int size(){  removeClearedEntries();  return map.size();}  }
class C{  public Builder supports(String artistName){  if (artistName == null) {    throw new IllegalStateException("Artist name can't be null");  }  this.artistName=artistName;  return this;}  }
class C{  private static boolean isEngineIDExist(int id,SQLiteDatabase db){  Cursor cursor=db.query(CustomEngineTable.TABLE_NAME,new String[]{CustomEngineTable.COLUMN_ID},CustomEngineTable.COLUMN_ID + "=?",new String[]{String.valueOf(id)},null,null,null);  boolean ans=cursor.getCount() == 1;  cursor.close();  return ans;}  }
class C{  static String encodeURLString(String stringToEncode){  try {    return java.net.URLEncoder.encode(stringToEncode,"UTF-8").replace("+",ENCODED_SPACE_CHARACTER);  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public void zoom(double percent){  for (int axisIdx=0; axisIdx < getAxisCount(); axisIdx++) {    final ValueAxis axis=getAxis(axisIdx);    if (axis != null) {      if (percent > 0.0) {        double radius=axis.getUpperBound();        double scaledRadius=radius * percent;        axis.setUpperBound(scaledRadius);        axis.setAutoRange(false);      } else {        axis.setAutoRange(true);      }    }  }}  }
class C{  public FastByteArrayOutputStream(final byte[] a){  array=a;}  }
class C{  protected void checkExplicitTxTimeout(final IgniteCache<Object,Object> cache,final Ignite ignite) throws Exception {  try (final Transaction tx=ignite.transactions().txStart()){    assert tx != null;    sleepForTxFailure();    cache.put("key","val");    fail("Timeout exception must be thrown");  } catch (  CacheException e) {    assert e.getCause() instanceof TransactionTimeoutException;  }  assert !cache.containsKey("key");}  }
class C{  private void initializePainters(){  mBarFillPaint=new Paint(Paint.ANTI_ALIAS_FLAG);  mBarFillPaint.setColor(mBarColor);  mBarFillPaint.setAntiAlias(true);  mBarFillPaint.setStrokeWidth(0);  mBarFillPaint.setStyle(Paint.Style.FILL);}  }
class C{  public Builder connectTimeout(final int connectTimeout){  clientConfig.setConnectTimeout(connectTimeout);  return this;}  }
class C{  public static NumericEntityEscaper between(final int codepointLow,final int codepointHigh){  return new NumericEntityEscaper(codepointLow,codepointHigh,true);}  }
class C{  public void commit(){  if (closed)   throw Exceptions.alreadyClosed();  tx().commit();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:29.856 -0500",hash_original_method="9CBF59A81FEE9822185147DE8DCD075A",hash_generated_method="394172050377204AF59B47DCF537242A") public CipherParameters generateDerivedMacParameters(int keySize){  return generateDerivedParameters(keySize);}  }
class C{  public byte[] extractMark(byte[] stegoData,String stegoFileName,byte[] origSigData) throws OpenStegoException {  if (!this.plugin.getPurposes().contains(OpenStegoPlugin.Purpose.WATERMARKING)) {    throw new OpenStegoException(null,OpenStego.NAMESPACE,OpenStegoException.PLUGIN_DOES_NOT_SUPPORT_WM);  }  return this.plugin.extractData(stegoData,stegoFileName,origSigData);}  }
class C{  public boolean hasStats(){  return owner.getExtension(Stats.class) != null;}  }
class C{  public static Seconds secondsIn(ReadableInterval interval){  if (interval == null) {    return Seconds.ZERO;  }  int amount=BaseSingleFieldPeriod.between(interval.getStart(),interval.getEnd(),DurationFieldType.seconds());  return Seconds.seconds(amount);}  }
class C{  public static String postImmediate(int WindowNo,int AD_Client_ID,int AD_Table_ID,int Record_ID,boolean force){  log.config("Window=" + WindowNo + ", AD_Table_ID="+ AD_Table_ID+ "/"+ Record_ID+ ", Force="+ force);  String error=DocumentEngine.postImmediate(Env.getCtx(),AD_Client_ID,AD_Table_ID,Record_ID,force,null);  return error;}  }
class C{  @Override public Trie optimize(Trie orig){  List<CharSequence> cmds=orig.cmds;  List<Row> rows=new ArrayList<>();  List<Row> orows=orig.rows;  int remap[]=new int[orows.size()];  for (int j=orows.size() - 1; j >= 0; j--) {    Row now=new Remap(orows.get(j),remap);    boolean merged=false;    for (int i=0; i < rows.size(); i++) {      Row q=merge(now,rows.get(i));      if (q != null) {        rows.set(i,q);        merged=true;        remap[j]=i;        break;      }    }    if (merged == false) {      remap[j]=rows.size();      rows.add(now);    }  }  int root=remap[orig.root];  Arrays.fill(remap,-1);  rows=removeGaps(root,rows,new ArrayList<Row>(),remap);  return new Trie(orig.forward,remap[root],cmds,rows);}  }
class C{  static public void addResizeHandles(Figure f,Collection<Handle> handles){  handles.add(new BoundsOutlineHandle(f));  if (f.isTransformable()) {    addCornerResizeHandles(f,handles);    addEdgeResizeHandles(f,handles);  }}  }
class C{  public void addPart(int index,PduPart part){  if (null == part) {    throw new NullPointerException();  }  putPartToMaps(part);  mParts.add(index,part);}  }
class C{  public void remove(int position){synchronized (lock) {    if (items == null || position < 0 || position > getItemCount()) {      return;    }    items.remove(position);  }  if (notifyOnChange) {    notifyItemRemoved(position);  }}  }
class C{  public StyledMenuItemUI(Style style){  this.style=style;  selectionBackground=style.getHighLightColor();  selectionForeground=style.getShadowColor();}  }
class C{  protected void ordinalLayout(VisualTable labels){  ObjectRangeModel model=(ObjectRangeModel)m_model;  double span=m_hi - m_lo;  double pspan=m_prevhi - m_prevlo;  Rectangle2D b=getLayoutBounds();  double breadth=getBreadth(b);  double scale=breadth / span;  int step=getOrdinalStep(span,scale);  if (step <= 0)   step=1;  Iterator iter=labels.tuples();  while (iter.hasNext()) {    VisualItem item=(VisualItem)iter.next();    reset(item);    double v=item.getDouble(VALUE);    double x=span == 0 ? 0.5 * breadth : ((v - m_lo) / span) * breadth;    set(item,x,b);  }  Index index=labels.index(VALUE);  for (int r, v=(int)m_lo; v <= m_hi; v+=step) {    if ((r=index.get((double)v)) >= 0) {      VisualItem item=labels.getItem(r);      item.set(VisualItem.LABEL,model.getObject(v).toString());      item.setVisible(true);      item.setEndVisible(true);    } else {      VisualItem item=labels.addItem();      item.set(VisualItem.LABEL,model.getObject(v).toString());      item.setDouble(VisualItem.VALUE,v);      double f=pspan == 0 ? 0.5 : ((v - m_prevlo) / pspan);      if (f <= 0 || f >= 1.0)       item.setStartVisible(true);      set(item,f * breadth,b);      set(item,(v - m_lo) * breadth / span,b);    }  }}  }
class C{  public void print(Reader r,Writer w) throws TranscoderException, IOException {  try {    scanner=new XMLScanner(r);    output=new OutputManager(this,w);    writer=w;    type=scanner.next();    printXMLDecl();    misc1:     for (; ; ) {switch (type) {case LexicalUnits.S:        output.printTopSpaces(getCurrentValue());      scanner.clearBuffer();    type=scanner.next();  break;case LexicalUnits.COMMENT:output.printComment(getCurrentValue());scanner.clearBuffer();type=scanner.next();break;case LexicalUnits.PI_START:printPI();break;default :break misc1;}}printDoctype();misc2: for (; ; ) {scanner.clearBuffer();switch (type) {case LexicalUnits.S:output.printTopSpaces(getCurrentValue());scanner.clearBuffer();type=scanner.next();break;case LexicalUnits.COMMENT:output.printComment(getCurrentValue());scanner.clearBuffer();type=scanner.next();break;case LexicalUnits.PI_START:printPI();break;default :break misc2;}}if (type != LexicalUnits.START_TAG) {throw fatalError("element",null);}printElement();misc3: for (; ; ) {switch (type) {case LexicalUnits.S:output.printTopSpaces(getCurrentValue());scanner.clearBuffer();type=scanner.next();break;case LexicalUnits.COMMENT:output.printComment(getCurrentValue());scanner.clearBuffer();type=scanner.next();break;case LexicalUnits.PI_START:printPI();break;default :break misc3;}}} catch (XMLException e) {errorHandler.fatalError(new TranscoderException(e.getMessage()));}}  }
class C{  @CanIgnoreReturnValue @Override public Builder<K,V> put(Entry<? extends K,? extends V> entry){  builderMultimap.put(checkNotNull(entry.getKey()),checkNotNull(entry.getValue()));  return this;}  }
class C{  protected void finalize() throws Throwable {  super.finalize();  quit();}  }
class C{  private void createNewIndexEntry(String indexName) throws SQLException {  ResultSet rs;  String unique="";  String tableName="";  rs=stmtdb2.executeQuery("select table_name, uniqueness from user_indexes where index_name='" + indexName + "'");  if (rs.next()) {    tableName=rs.getString("TABLE_NAME");    unique=rs.getString("UNIQUENESS");    if (unique.equals("NONUNIQUE")) {      unique="";    }  }  rs.close();  String createStatement="CREATE " + unique + " INDEX "+ indexName+ " ON "+ tableName+ " (";  rs=stmtdb2.executeQuery("select column_name from user_ind_columns where index_name='" + indexName + "' order by column_position");  int k=0;  while (rs.next()) {    if (k != 0) {      createStatement+=" ,";    }    createStatement+=rs.getString("COLUMN_NAME");    k++;  }  rs.close();  createStatement+=");";  m_newIndexStatements.add(createStatement);}  }
class C{  void unbind(){}  }
class C{  public InvalidCommandLengthException(String message){  super(message);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MAttribute[");  sb.append(get_ID()).append("-").append(getName()).append(",Type=").append(getAttributeValueType()).append(",Instance=").append(isInstanceAttribute()).append("]");  return sb.toString();}  }
class C{  public static <T>T clone(final T obj){  if (obj instanceof Cloneable) {    final Object result;    if (obj.getClass().isArray()) {      final Class<?> componentType=obj.getClass().getComponentType();      if (!componentType.isPrimitive()) {        result=((Object[])obj).clone();      } else {        int length=Array.getLength(obj);        result=Array.newInstance(componentType,length);        while (length-- > 0) {          Array.set(result,length,Array.get(obj,length));        }      }    } else {      try {        final Method clone=obj.getClass().getMethod("clone");        result=clone.invoke(obj);      } catch (      final NoSuchMethodException e) {        throw new CloneFailedException("Cloneable type " + obj.getClass().getName() + " has no clone method",e);      }catch (      final IllegalAccessException e) {        throw new CloneFailedException("Cannot clone Cloneable type " + obj.getClass().getName(),e);      }catch (      final InvocationTargetException e) {        throw new CloneFailedException("Exception cloning Cloneable type " + obj.getClass().getName(),e.getCause());      }    }    @SuppressWarnings("unchecked") final T checked=(T)result;    return checked;  }  return null;}  }
class C{  public static EncodedImage create(byte[] data){  if (data == null) {    throw new NullPointerException();  }  return new EncodedImage(new byte[][]{data});}  }
class C{  public static void test_diff_getStaticVariable(){  Target2.setStaticIgram(220);  assertSame(220,Target2.staticIgram);}  }
class C{  @Nullable public Function<Object,Boolean> shouldCancelFun(){synchronized (CANCEL_FUN_LOCK) {    return myShouldCancelFun;  }}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  mOpsOptionsMenu=menu;  MenuInflater inflater=getMenuInflater();  inflater.inflate(R.menu.ops_options_menu,menu);  return true;}  }
class C{  public DefaultConnectFuture(){  super(null);}  }
class C{  public static double[] pageRank(MatrixInterface preparedMatrix,int maxIteration){  double[] init=new double[preparedMatrix.getRowsCount()];  for (int i=0; i != init.length; i++)   init[i]=1.0;  return pageRank(preparedMatrix,maxIteration,DEFAULT_D,init);}  }
class C{  public static String encrypt(SecretKey key,String clearText,String charset,String transform) throws UnsupportedEncodingException, IllegalBlockSizeException, InvalidKeyException, BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException {  if (clearText == null)   return null;  byte[] result=encrypt(key,clearText.getBytes(charset),transform);  return Base64.encodeToString(result,Base64.DEFAULT);}  }
class C{  private static String paragraphToHtml(Paragraph p){  return contentElementToHtml(p,"Paragraph","Paragraph: " + p.getType());}  }
class C{  protected boolean shouldFillGap(int currentRun,int tabIndex,int x,int y){  return false;}  }
class C{  public void resetAndCollapse(){  mConfigArea.collapse();  bindStage(mInitialDate,mStage);}  }
class C{  @Override public void free(){  debugCodeCall("free");  value=null;}  }
class C{  @Override protected Instances process(Instances instances) throws Exception {  Instances result;  double[] newValues;  double[] oldValues;  int i;  int start;  int n;  Instance newInstance;  Instance oldInstance;  double[] distribution;  if (!isFirstBatchDone()) {    getActualClassifier();    if (!getSerializedClassifierFile().isDirectory()) {      if ((m_SerializedHeader != null) && (!m_SerializedHeader.equalHeaders(instances))) {        throw new WekaException("Training header of classifier and filter dataset don't match:\n" + m_SerializedHeader.equalHeadersMsg(instances));      }    } else {      m_ActualClassifier.buildClassifier(instances);    }  }  result=getOutputFormat();  for (i=0; i < instances.numInstances(); i++) {    oldInstance=instances.instance(i);    oldValues=oldInstance.toDoubleArray();    newValues=new double[result.numAttributes()];    start=oldValues.length;    if (getRemoveOldClass()) {      start--;    }    System.arraycopy(oldValues,0,newValues,0,start);    if (getOutputClassification()) {      newValues[start]=m_ActualClassifier.classifyInstance(oldInstance);      start++;    }    if (getOutputDistribution()) {      distribution=m_ActualClassifier.distributionForInstance(oldInstance);      for (n=0; n < distribution.length; n++) {        newValues[start]=distribution[n];        start++;      }    }    if (getOutputErrorFlag()) {      if (result.classAttribute().isNominal()) {        if (oldInstance.classValue() == m_ActualClassifier.classifyInstance(oldInstance)) {          newValues[start]=0;        } else {          newValues[start]=1;        }      } else {        newValues[start]=m_ActualClassifier.classifyInstance(oldInstance) - oldInstance.classValue();      }      start++;    }    if (oldInstance instanceof SparseInstance) {      newInstance=new SparseInstance(oldInstance.weight(),newValues);    } else {      newInstance=new DenseInstance(oldInstance.weight(),newValues);    }    copyValues(newInstance,false,oldInstance.dataset(),getOutputFormat());    result.add(newInstance);  }  return result;}  }
class C{  public static String toString(int m){  StringBuffer buffer=new StringBuffer();  if (isPublic(m))   buffer.append("public "); else   if (isPrivate(m))   buffer.append("private "); else   if (isProtected(m))   buffer.append("protected ");  if (isAbstract(m))   buffer.append("abstract ");  if (isStatic(m))   buffer.append("static ");  if (isFinal(m))   buffer.append("final ");  if (isSynchronized(m))   buffer.append("synchronized ");  if (isNative(m))   buffer.append("native ");  if (isTransient(m))   buffer.append("transient ");  if (isVolatile(m))   buffer.append("volatile ");  if (isStrictFP(m))   buffer.append("strictfp ");  if (isAnnotation(m))   buffer.append("annotation ");  if (isEnum(m))   buffer.append("enum ");  if (isInterface(m))   buffer.append("interface ");  return (buffer.toString()).trim();}  }
class C{  @Override public String toString(){  return "search='" + getSearchString() + "', "+ "regexp="+ isRegExp()+ ", "+ "integer="+ isInteger()+ ", "+ "double="+ isDouble();}  }
class C{  public void register(Class<?> clazz,int id){  Preconditions.checkArgument(id > 0,"invalid id");  this.kryo.register(clazz,id);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void testSenderWithSpringXmlAndQueue() throws Exception {  String config="spring-queue.xml";  assertSenderConfig(config);}  }
class C{  @Override public void onGeolocationPermissionsShowPrompt(String origin,Callback callback){  super.onGeolocationPermissionsShowPrompt(origin,callback);  callback.invoke(origin,true,false);}  }
class C{  private boolean registerRepository(RepositoryMetaData repositoryMetaData) throws IOException {  RepositoryHolder previous=repositories.get(repositoryMetaData.name());  if (previous != null) {    if (!previous.type.equals(repositoryMetaData.type()) && previous.settings.equals(repositoryMetaData.settings())) {      return false;    }  }  RepositoryHolder holder=createRepositoryHolder(repositoryMetaData);  if (previous != null) {    closeRepository(repositoryMetaData.name(),previous);  }  Map<String,RepositoryHolder> newRepositories=newHashMap(repositories);  newRepositories.put(repositoryMetaData.name(),holder);  repositories=ImmutableMap.copyOf(newRepositories);  return true;}  }
class C{  public Comparator<Point2D> atan2Order(){  return new Atan2Order();}  }
class C{  public String toString(int indentFactor) throws JSONException {  StringWriter w=new StringWriter();synchronized (w.getBuffer()) {    return this.write(w,indentFactor,0).toString();  }}  }
class C{  public boolean canBlobsOverlap(int x,int y,int z,AreaBlob otherBlob){  return blobHandler.canBlobsOverlap(new BlockPosition(x,y,z),otherBlob);}  }
class C{  public static double normalizeLatitude(double degrees){  double lat=degrees % 180;  double normalizedLat=lat > 90 ? 180 - lat : (lat < -90 ? -180 - lat : lat);  int numEquatorCrosses=(int)(degrees / 180);  return (numEquatorCrosses % 2 == 0) ? normalizedLat : -normalizedLat;}  }
class C{  public DefaultColorSliderModel(ColorSpace sys){  setColorSpace(sys);}  }
class C{  public ModuleDeclaration withAssembler(String classname) throws AssemblyException {  Class<? extends Assembler> clazz=loadClass(classname);  return withAssembler(clazz);}  }
class C{  public LoadRiskAnalyses(Integer scopeId){  parentDbId=scopeId;}  }
class C{  public static byte[] step4(SMState bstate,byte[] input) throws SMException {  BigInteger[] msg3=unserialize(input);  bstate.smProgState=PROG_CHEATED;  BigInteger[] msg4=new BigInteger[3];  if (checkGroupElem(msg3[0]) || checkGroupElem(msg3[1]) || checkGroupElem(msg3[5])|| checkExpon(msg3[3])|| checkExpon(msg3[4])|| checkExpon(msg3[7])) {    throw new SMException("Invalid Parameter");  }  if (checkEqualCoords(msg3[2],msg3[3],msg3[4],msg3[0],msg3[1],bstate,6) != 0)   throw new SMException("Invalid Parameter");  BigInteger inv=bstate.p.modInverse(MODULUS_S);  bstate.pab=msg3[0].multiply(inv).mod(MODULUS_S);  inv=bstate.q.modInverse(MODULUS_S);  bstate.qab=msg3[1].multiply(inv).mod(MODULUS_S);  if (checkEqualLogs(msg3[6],msg3[7],msg3[5],bstate,7) != 0) {    throw new SMException("Proof checking failed");  }  msg4[0]=bstate.qab.modPow(bstate.x3,MODULUS_S);  BigInteger[] res=proofEqualLogs(bstate,8);  msg4[1]=res[0];  msg4[2]=res[1];  byte[] output=serialize(msg4);  BigInteger rab=msg3[5].modPow(bstate.x3,MODULUS_S);  int comp=rab.compareTo(bstate.pab);  bstate.smProgState=(comp != 0) ? PROG_FAILED : PROG_SUCCEEDED;  return output;}  }
class C{  public void open(Config conf){  this.config=new Config(conf);}  }
class C{  protected void onException(final Exception e){  throw WroRuntimeException.wrap(e);}  }
class C{  public void initOrder(AccessibilityNodeInfoCompat compatRoot){  if (compatRoot == null) {    return;  }  NodeCachedBoundsCalculator boundsCalculator=new NodeCachedBoundsCalculator();  boundsCalculator.setSpeakNodesCache(mSpeakNodesCache);  mTree=createWorkingTree(AccessibilityNodeInfoCompat.obtain(compatRoot),null,boundsCalculator);  reorderTree();}  }
class C{  public Cookie(final String name,final String value) throws IllegalArgumentException {  this(name,value,null,null);}  }
class C{  public void testNotIsmissing(){  m_Filter=getFilter("not ismissing(ATT3)");  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(m_Instances.numInstances() - 3,result.numInstances());}  }
class C{  private boolean startProcess(){  log.fine(m_pi.toString());  boolean started=false;  boolean clientOnly=false;  if (!m_pi.getClassName().toLowerCase().startsWith(MRule.SCRIPT_PREFIX)) {    try {      Class<?> processClass=Class.forName(m_pi.getClassName());      if (ClientProcess.class.isAssignableFrom(processClass))       clientOnly=true;    } catch (    Exception e) {    }  }  if (m_IsServerProcess && !clientOnly) {    Server server=CConnection.get().getServer();    try {      if (server != null) {        m_pi=server.process(Env.getRemoteCallCtx(Env.getCtx()),m_pi);        log.finest("server => " + m_pi);        started=true;      }    } catch (    UndeclaredThrowableException ex) {      Throwable cause=ex.getCause();      if (cause != null) {        if (cause instanceof InvalidClassException)         log.log(Level.SEVERE,"Version Server <> Client: " + cause.toString() + " - "+ m_pi,ex); else         log.log(Level.SEVERE,"AppsServer error(1b): " + cause.toString() + " - "+ m_pi,ex);      } else       log.log(Level.SEVERE," AppsServer error(1) - " + m_pi,ex);      started=false;    }catch (    Exception ex) {      Throwable cause=ex.getCause();      if (cause == null)       cause=ex;      log.log(Level.SEVERE,"AppsServer error - " + m_pi,cause);      started=false;    }  }  if (!started && (!m_IsServerProcess || clientOnly)) {    if (m_pi.getClassName().toLowerCase().startsWith(MRule.SCRIPT_PREFIX)) {      return ProcessUtil.startScriptProcess(Env.getCtx(),m_pi,m_trx);    } else {      return ProcessUtil.startJavaProcess(Env.getCtx(),m_pi,m_trx);    }  }  return !m_pi.isError();}  }
class C{  @Override public Network createMutualBaseGrid(String path2ZonesFile){  Network mutualRepresentation=NetworkUtils.createNetwork();  NetworkFactory networkFactory=mutualRepresentation.getFactory();  Long[] sides=boundingBoxOfZones(path2ZonesFile);  long maxLongitude=sides[1];  long maxLatitude=sides[3];  long cellId=1;  long latitude=sides[2];  do {    long longitude=sides[0];    do {      mutualRepresentation.addNode(networkFactory.createNode(Id.create(cellId++,Node.class),new Coord((double)longitude,(double)latitude)));      longitude+=gridcellsize;    } while (longitude < (maxLongitude + gridcellsize));    latitude+=gridcellsize;  } while (latitude < (maxLatitude + gridcellsize));  return mutualRepresentation;}  }
class C{  private boolean isFinalStage(State s){  return s.taskState.stage == TaskState.TaskStage.FINISHED || s.taskState.stage == TaskState.TaskStage.FAILED || s.taskState.stage == TaskState.TaskStage.CANCELLED;}  }
class C{  public PersonalChest(){  this(DEFAULT_BANK);}  }
