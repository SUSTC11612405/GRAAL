class C{  public static synchronized ProviderList beginThreadProviderList(ProviderList list){  if (ProviderList.debug != null) {    ProviderList.debug.println("ThreadLocal providers: " + list);  }  ProviderList oldList=threadLists.get();  threadListsUsed++;  threadLists.set(list);  return oldList;}  }
class C{  public boolean isKnownAsBranch(BytecodeInstruction instruction){  return isKnownAsNormalBranchInstruction(instruction) || isKnownAsSwitchBranchInstruction(instruction);}  }
class C{  public static LimeProps instance(){  return INSTANCE;}  }
class C{  protected void alert(byte level,byte description){  if (logger != null) {    logger.println("SSLRecordProtocol.allert: " + level + " "+ description);  }  alertProtocol.alert(level,description);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public Builder addDecodingCapability(ImageFormat imageFormat,ImageFormat.FormatChecker imageFormatChecker,ImageDecoder decoder){  if (mCustomImageFormats == null) {    mCustomImageFormats=new ArrayList<>();  }  mCustomImageFormats.add(imageFormatChecker);  overrideDecoder(imageFormat,decoder);  return this;}  }
class C{  @ParameterParser(syntax="('at' (arg2=STRING ('apply' arg3=STRING)? ('resource=' arg5=STRING)?  (arg4=ID)? )? )? )?") @Xpect @ConsumedIssues({Severity.INFO,Severity.ERROR,Severity.WARNING}) public void quickFix(@StringDiffExpectation(whitespaceSensitive=false) IStringDiffExpectation expectation,@ThisResource XtextResource resource,RegionWithCursor offset,String selected,String mode,String specifiedResourcePath,@IssuesByLine Multimap<Integer,Issue> offset2issue) throws Exception {  quickFix(expectation,resource,offset,selected,mode,specifiedResourcePath,offset2issue,true);}  }
class C{  public DateRangeConditionBuilder to(Object to){  this.to=to;  return this;}  }
class C{  @Override public void sync(){}  }
class C{  public final void update(String rosterGroup){  update(rosterGroup,_roadName,_roadNumber,_dccAddress,_mfg,_decoderMfgID,_decoderVersionID,_id);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TOBJECT_PROTOTYPE__DECLARED_TYPE_ACCESS_MODIFIER:    setDeclaredTypeAccessModifier(DECLARED_TYPE_ACCESS_MODIFIER_EDEFAULT);  return;case TypesPackage.TOBJECT_PROTOTYPE__DECLARED_PROVIDED_BY_RUNTIME:setDeclaredProvidedByRuntime(DECLARED_PROVIDED_BY_RUNTIME_EDEFAULT);return;case TypesPackage.TOBJECT_PROTOTYPE__DECLARED_ELEMENT_TYPE:setDeclaredElementType((TypeRef)null);return;case TypesPackage.TOBJECT_PROTOTYPE__SUPER_TYPE:setSuperType((ParameterizedTypeRef)null);return;case TypesPackage.TOBJECT_PROTOTYPE__DECLARED_FINAL:setDeclaredFinal(DECLARED_FINAL_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  @Override public boolean handles(Class cls){  return (ClassDiscovery.isSubclass(Instances.class,cls));}  }
class C{  protected SVGOMGlyphRefElement(){}  }
class C{  public final double determinant(){  double total;  total=this.m00 * (this.m11 * this.m22 - this.m12 * this.m21) + this.m01 * (this.m12 * this.m20 - this.m10 * this.m22) + this.m02 * (this.m10 * this.m21 - this.m11 * this.m20);  return total;}  }
class C{  private int actionButton(CButton button){  String keyColumn=button.getActionCommand();  log.info(keyColumn);  String whereClause="(IsSummary='N' OR IsSummary IS NULL)";  String lookupColumn=keyColumn;  int record_id=m_data.getButtonRecordID(keyColumn);  if (keyColumn.equals("Account_ID")) {    lookupColumn="C_ElementValue_ID";    MAcctSchemaElement ase=m_data.ASchema.getAcctSchemaElement(X_C_AcctSchema_Element.ELEMENTTYPE_Account);    if (ase != null)     whereClause+=" AND C_Element_ID=" + ase.getC_Element_ID();  } else   if (keyColumn.equals("User1_ID")) {    lookupColumn="C_ElementValue_ID";    MAcctSchemaElement ase=m_data.ASchema.getAcctSchemaElement(X_C_AcctSchema_Element.ELEMENTTYPE_UserList1);    if (ase != null)     whereClause+=" AND C_Element_ID=" + ase.getC_Element_ID();  } else   if (keyColumn.equals("User2_ID")) {    lookupColumn="C_ElementValue_ID";    MAcctSchemaElement ase=m_data.ASchema.getAcctSchemaElement(X_C_AcctSchema_Element.ELEMENTTYPE_UserList2);    if (ase != null)     whereClause+=" AND C_Element_ID=" + ase.getC_Element_ID();  } else   if (keyColumn.equals("M_Product_ID")) {    whereClause="";  } else   if (selDocument.isSelected())   whereClause="";  if (button == selRecord)   record_id=m_data.Record_ID; else   record_id=m_data.getButtonRecordID(keyColumn);  String tableName=lookupColumn.substring(0,lookupColumn.length() - 3);  Info info=Info.create(this,true,m_data.WindowNo,tableName,lookupColumn,record_id,"",false,true,whereClause);  if (!info.loadedOK()) {    info.dispose();    info=null;    button.setText("");    m_data.whereInfo.put(keyColumn,"");    m_data.buttonRecordID.put(keyColumn,null);    return 0;  }  info.setVisible(true);  boolean isCancelled=info.isCancelled();  boolean isOK=info.isOk();  Integer key=0;  if (isCancelled && !isOK) {    key=0;    if (button == selRecord)     m_data.Record_ID=key.intValue(); else {      m_data.whereInfo.put(keyColumn,"");      m_data.buttonRecordID.put(keyColumn,key.intValue());    }    button.setText("");  } else   if (!isCancelled && isOK) {    String selectSQL=info.getSelectedSQL();    key=(Integer)info.getSelectedKey();    log.config(keyColumn + " - " + key);    if (button == selRecord)     m_data.Record_ID=key.intValue(); else {      m_data.whereInfo.put(keyColumn,keyColumn + "=" + key.intValue());      m_data.buttonRecordID.put(keyColumn,key.intValue());    }    button.setText(m_data.getButtonText(tableName,lookupColumn,selectSQL));    pack();  } else   if (!(isCancelled ^ isOK)) {    if (button == selRecord)     key=m_data.Record_ID=key.intValue(); else     key=m_data.getButtonRecordID(keyColumn);  }  info=null;  return key.intValue();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public String userIdFromRange(Object ominId,Object omaxId){  int minId=FunctionHandler.getInt(ominId);  int maxId=FunctionHandler.getInt(omaxId);  Stack<Integer> stack=getStack(minId,maxId);  if (stack.size() > 0) {    return Integer.toString(stack.pop());  }  throw new IllegalArgumentException("Exhausted random User Ids. Range not large enough for the number of calls.");}  }
class C{  private static XmlAttributeDescriptor[] updateAttributeDescriptorsFromAny(final XmlTag context,final ComplexTypeDescriptor typeDescriptor,XmlAttributeDescriptor[] attributeDescriptors,final String ns){  if (typeDescriptor.canContainAttribute(ns,null) != ComplexTypeDescriptor.CanContainAttributeType.CanNotContain) {    final XmlNSDescriptor descriptor=context.getNSDescriptor(ns,true);    if (descriptor instanceof XmlNSDescriptorImpl) {      XmlAttributeDescriptor[] rootDescriptors=((XmlNSDescriptorImpl)descriptor).getRootAttributeDescriptors(context);      attributeDescriptors=ArrayUtil.mergeArrays(attributeDescriptors,rootDescriptors);    }  }  return attributeDescriptors;}  }
class C{  public synchronized void closeStack(){  if (mSipInterface == null) {    return;  }  mSipInterface.close();  mSipInterface=null;}  }
class C{  public void grantParoleIfPlayerWasAPrisoner(final Player player){  arrestWarrants.removeByName(player.getName());}  }
class C{  public void resetClasses(List<String> classesToReset){  ClassLoader loader=TestGenerationContext.getInstance().getClassLoaderForSUT();  resetClasses(classesToReset,loader);}  }
class C{  public void addRow(boolean functionRow,int levelNo){  m_nodes=new ArrayList<Object>();  m_row=m_rows.size();  m_rows.add(m_nodes);  if (functionRow)   m_functionRows.add(new Integer(m_row));  if (m_hasLevelNo && levelNo != 0)   addNode(new PrintDataElement(LEVEL_NO,new Integer(levelNo),DisplayType.Integer,null));}  }
class C{  public DOMSource(Node n){  setNode(n);}  }
class C{  private EntranceProcessingItem createEntrancePi(EntranceProcessor processor){  EntranceProcessingItem epi=this.componentFactory.createEntrancePi(processor);  this.topology.addEntranceProcessingItem(epi);  if (this.mapProcessorToProcessingItem == null)   this.mapProcessorToProcessingItem=new HashMap<Processor,IProcessingItem>();  this.mapProcessorToProcessingItem.put(processor,epi);  return epi;}  }
class C{  public static <A>ListTValue<A> of(final AnyMValue<? extends List<A>> monads){  return new ListTValue<>(monads);}  }
class C{  public final float readFloat() throws IOException {  return Float.intBitsToFloat(readInt());}  }
class C{  public void afterPrimaryRecovered(ServerLocation location){}  }
class C{  private static boolean useAutoCompleteForNode(String nodeName){  if (nodeName.equalsIgnoreCase(NODE_ENCOUNTER_LOCATION_ID) && XformsUtil.usesJquery()) {    if (useAutoCompleteForLocations == null) {      useAutoCompleteForLocations=Boolean.valueOf(Context.getAdministrationService().getGlobalProperty(XformConstants.XFORM_GP_USE_AUTOCOMPLETE_FOR_LOCATIONS));    }    return useAutoCompleteForLocations;  } else   if (nodeName.equalsIgnoreCase(NODE_ENCOUNTER_PROVIDER_ID) && XformsUtil.isOnePointNineAndAbove()) {    if (useAutoCompleteForProviders == null) {      useAutoCompleteForProviders=Boolean.valueOf(Context.getAdministrationService().getGlobalProperty(XformConstants.XFORM_GP_USE_AUTOCOMPLETE_FOR_PROVIDERS));    }    return useAutoCompleteForProviders;  }  return false;}  }
class C{  public float key(){  return _map._set[_index];}  }
class C{  private MouseInputListener createWindowMouseInputListener(JRootPane root){  return new MouseInputHandler();}  }
class C{  public void testNextDoubleBounded2(){  for (double least=0.0001; least < 1.0e20; least*=8) {    for (double bound=least * 1.001; bound < 1.0e20; bound*=16) {      double f=ThreadLocalRandom.current().nextDouble(least,bound);      assertTrue(least <= f && f < bound);      int i=0;      double j;      while (i < NCALLS && (j=ThreadLocalRandom.current().nextDouble(least,bound)) == f) {        assertTrue(least <= j && j < bound);        ++i;      }      assertTrue(i < NCALLS);    }  }}  }
class C{  public static void fixGTFSBusSingapore2() throws IOException {  Collection<String> trips=new HashSet<String>();  File oldFile=new File("./data/gtfs/buses/trips2.txt");  File newFile=new File("./data/gtfs/buses/trips.txt");  BufferedReader reader=new BufferedReader(new FileReader(oldFile));  PrintWriter writer=new PrintWriter(newFile);  String line=reader.readLine();  writer.println(line);  line=reader.readLine();  while (line != null) {    String[] parts=line.split(",");    if (!parts[2].endsWith("-S") && !parts[2].endsWith("-E")) {      trips.add(parts[2]);      writer.println(line);    } else     if (parts[2].endsWith("-E") && !trips.contains(parts[2].substring(0,parts[2].lastIndexOf('-')))) {      String tripId=parts[2].substring(0,parts[2].lastIndexOf('-'));      trips.add(tripId);      writer.print(parts[0] + "," + parts[1]+ ","+ tripId);      int i=3;      for (; i < parts.length; i++)       writer.print("," + parts[i]);      for (; i < 5; i++)       writer.print(",");      writer.println();    }    line=reader.readLine();  }  writer.close();  reader.close();  Map<String,String> startDepartures=new HashMap<String,String>();  Map<String,String> endDepartures=new HashMap<String,String>();  oldFile=new File("./data/gtfs/buses/stop_times2.txt");  newFile=new File("./data/gtfs/buses/stop_times.txt");  reader=new BufferedReader(new FileReader(oldFile));  writer=new PrintWriter(newFile);  line=reader.readLine();  writer.println(line);  line=reader.readLine();  while (line != null) {    String[] parts=line.split(",");    if (parts[0].endsWith("-S")) {      String tripId=parts[0].substring(0,parts[0].lastIndexOf('-'));      if (startDepartures.get(tripId) == null)       startDepartures.put(tripId,parts[2]);      writer.print(tripId);      for (int i=1; i < parts.length; i++)       writer.print("," + parts[i]);      writer.println();    }    if (parts[0].endsWith("-E")) {      String tripId=parts[0].substring(0,parts[0].lastIndexOf('-'));      if (endDepartures.get(tripId) == null) {        String[] parts3=parts[2].split(":");        int hour=Integer.parseInt(parts3[0]);        if (hour < 12) {          hour+=24;          endDepartures.put(tripId,Integer.toString(hour) + ":" + parts3[1]+ ":"+ parts3[2]);        } else         endDepartures.put(tripId,parts[2]);      }    }    line=reader.readLine();  }  writer.close();  reader.close();  oldFile=new File("./data/gtfs/buses/frequencies2.txt");  newFile=new File("./data/gtfs/buses/frequencies.txt");  reader=new BufferedReader(new FileReader(oldFile));  writer=new PrintWriter(newFile);  line=reader.readLine();  writer.println(line);  String previous=line;  line=reader.readLine();  String[] parts=line.split(",");  String tripId=parts[0];  previous=parts[0] + "," + startDepartures.get(parts[0]);  for (int i=2; i < parts.length; i++)   previous+="," + parts[i];  line=reader.readLine();  while (line != null) {    parts=line.split(",");    if (!parts[0].equals(tripId)) {      String[] parts2=previous.split(",");      for (int i=0; i < 2; i++)       writer.print(parts2[i] + ",");      writer.println(endDepartures.get(parts2[0]) + "," + parts2[3]);      tripId=parts[0];      previous=parts[0] + "," + startDepartures.get(parts[0]);      for (int i=2; i < parts.length; i++)       previous+="," + parts[i];    } else {      writer.println(previous);      previous=line;    }    line=reader.readLine();  }  String[] parts2=previous.split(",");  for (int i=0; i < 2; i++)   writer.print(parts2[i] + ",");  writer.println(endDepartures.get(parts2[0]) + "," + parts2[3]);  writer.close();  reader.close();}  }
class C{  public void verifyNotLogged(String substring){  verifyNotLogged(matcher(substring));}  }
class C{  public static String toDateAsString(final long milliseconds){  return DATE_FORMAT.format(milliseconds);}  }
class C{  private static HostAndPort createUrlAddress(HostAndPort address){  if (address.getHostText().equals("::") || address.getHostText().equals("0.0.0.0")) {    return address.getPortOrDefault(DEFAULT_PORT) == DEFAULT_PORT ? HostAndPort.fromHost(getCanonicalHostName()) : HostAndPort.fromParts(getCanonicalHostName(),address.getPort());  } else {    return address.getPortOrDefault(DEFAULT_PORT) == DEFAULT_PORT ? HostAndPort.fromHost(address.getHostText()) : address;  }}  }
class C{  private static boolean matchIntlPrefix(String a,int len){  int state=0;  for (int i=0; i < len; i++) {    char c=a.charAt(i);switch (state) {case 0:      if (c == '+')       state=1; else       if (c == '0')       state=2; else       if (isNonSeparator(c))       return false;    break;case 2:  if (c == '0')   state=3; else   if (c == '1')   state=4; else   if (isNonSeparator(c))   return false;break;case 4:if (c == '1') state=5; else if (isNonSeparator(c)) return false;break;default :if (isNonSeparator(c)) return false;break;}}return state == 1 || state == 3 || state == 5;}  }
class C{  public static void addCommentLines(final ZyLabelContent content,final INaviEdge edge,final List<IComment> localComment,final List<IComment> globalComment){  Preconditions.checkNotNull(content,"IE00914: Content argument can't be null");  final ColorsConfigItem colors=ConfigManager.instance().getColorSettings();  if (localComment != null) {    addCommentLines(content,localComment,colors.getLocalCommentColor(),new CLocalEdgeCommentWrapper(edge));  }  if (globalComment != null) {    addCommentLines(content,globalComment,colors.getGlobalCommentColor(),new CGlobalEdgeCommentWrapper(edge));  }}  }
class C{  public DrawerBuilder withFooterClickable(boolean footerClickable){  this.mFooterClickable=footerClickable;  return this;}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z2 != 0) {              outputFile.setValue(row,col,z1 % z2);            } else {              outputFile.setValue(row,col,Double.POSITIVE_INFINITY);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData && constant2 != 0) {            outputFile.setValue(row,col,z1 % constant2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData && z2 != 0) {            outputFile.setValue(row,col,constant1 % z2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Coin times(final int factor){  return multiply(factor);}  }
class C{  public Aggregator resolveTopmostAggregator(Aggregator root){  AggregationPath.PathElement token=pathElements.get(0);  Aggregator aggregator=root.subAggregator(token.name);  assert (aggregator instanceof SingleBucketAggregator) || (aggregator instanceof NumericMetricsAggregator) : "this should be picked up before aggregation execution - on validate";  return aggregator;}  }
class C{  public boolean hasRel(){  return getRel() != null;}  }
class C{  private Channel createChannel(Node channelNode){  Element channelElement=(Element)channelNode;  Channel channel=EipFactory.eINSTANCE.createChannel();  channel.setName(channelElement.getAttribute("id"));  channelsMap.put(channel.getName(),channel);  return channel;}  }
class C{  public String toString(){  return label + ": " + cards.toString();}  }
class C{  @Bean public FanoutExchange exchangeQueueToConnector(){  return new FanoutExchange(amqpProperties.getSenderForSpExchange(),false,true);}  }
class C{  public static void addUnchangedFileToList(CachedFile f){  if (!listOfUnchangedCatalogFiles.contains(f)) {    listOfUnchangedCatalogFiles.add(f);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.UNSCHEDULE_TIME_EVENT__TIME_EVENT:    if (resolve)     return getTimeEvent();  return basicGetTimeEvent();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void stepLoadData(String storerStepId,String stepId){  try {    URI workflowURI=workflowService.getWorkflowFromStepId(stepId).getWorkflowURI();    String workflowData=(String)workflowService.loadStepData(workflowURI.toString());    Assert.assertEquals("workflow-data",workflowData);    String stepData=(String)workflowService.loadStepData(storerStepId);    Assert.assertEquals("step-data",stepData);    ;    String keyaData=(String)workflowService.loadStepData(storerStepId,"keya");    Assert.assertEquals("keya-data",keyaData);    String keybData=(String)workflowService.loadStepData(storerStepId,"keyb");    Assert.assertEquals("keyb-data",keybData);    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  Exception ex) {    log.error("Exception in stepLoadData: ",ex.getMessage(),ex);    ServiceCoded coded=WorkflowException.errors.unforeseen();    WorkflowStepCompleter.stepFailed(stepId,coded);  }}  }
class C{  AVT processAVT(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  try {    AVT avt=new AVT(handler,uri,name,rawName,value,owner);    return avt;  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:10.273 -0500",hash_original_method="62F3D976050C390A4D28EE7C5F1BA715",hash_generated_method="8D23A41AC14097A194B8A0B66A4D6D61") public boolean isComplex(){  if (mElements == null) {    return false;  }  for (int ct=0; ct < mElements.length; ct++) {    if (mElements[ct].mElements != null) {      return true;    }  }  return false;}  }
class C{  public static boolean put(String key,Object value){  return put(null,key,value);}  }
class C{  public static void initializeClassForDynamicLink(RVMClass cls){  if (VM.TraceClassLoading) {    VM.sysWrite("RuntimeEntrypoints.initializeClassForDynamicLink: (begin) " + cls + "\n");  }  cls.resolve();  cls.instantiate();  cls.initialize();  if (VM.TraceClassLoading) {    VM.sysWrite("RuntimeEntrypoints.initializeClassForDynamicLink: (end)   " + cls + "\n");  }}  }
class C{  public static boolean isOctalDigit(char c){  return c >= '0' && c <= '7';}  }
class C{  public static void sort(long[] array){  DualPivotQuicksort.sort(array);}  }
class C{  @Override public boolean equals(Object obj){  return (obj == this || (obj instanceof InputStreamResource && ((InputStreamResource)obj).inputStream.equals(this.inputStream)));}  }
class C{  public NextAction(){  super("Next");}  }
class C{  public Object invoke(Object target,Object... arguments){  try {    return this.method.invoke(target,arguments);  } catch (  IllegalAccessException|IllegalArgumentException e) {    throw new RuntimeException("Cannot invoke method " + this.method,e);  }catch (  InvocationTargetException e) {    throw DioriteUtils.sneakyThrow(e.getCause());  }catch (  Exception e) {    throw DioriteUtils.sneakyThrow(e);  }}  }
class C{  private void testIsoWeekJanuary1thSunday() throws Exception {  assertEquals(52,getIsoWeek(parse("2011-12-31")));  assertEquals(52,getIsoWeek(parse("2012-01-01")));  assertEquals(1,getIsoWeek(parse("2012-01-02")));  assertEquals(1,getIsoWeek(parse("2012-01-08")));  assertEquals(2,getIsoWeek(parse("2012-01-09")));}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  long processingEndTime=System.currentTimeMillis();  Object iceProcessingState=evt.getNewValue();  logger.log(Level.INFO,"Local agent entered the " + iceProcessingState + " state.");  if (iceProcessingState == IceProcessingState.COMPLETED) {    logger.log(Level.INFO,"Local - Total ICE processing time: " + (processingEndTime - startTime) + "ms");    Agent agent=(Agent)evt.getSource();    logger.log(Level.INFO,"Local: Create pseudo tcp stream");    IceMediaStream dataStream=agent.getStream("data");    Component udpComponent=dataStream.getComponents().get(0);    CandidatePair selectedPair=udpComponent.getSelectedPair();    if (selectedPair != null) {      LocalCandidate localCandidate=selectedPair.getLocalCandidate();      Candidate<?> remoteCandidate=selectedPair.getRemoteCandidate();      logger.log(Level.INFO,"Local: " + localCandidate);      logger.log(Level.INFO,"Remote: " + remoteCandidate);      try {        localJob=new LocalPseudoTcpJob(selectedPair.getDatagramSocket());      } catch (      UnknownHostException ex) {        logger.log(Level.SEVERE,"Error while trying to create" + " local pseudotcp thread " + ex);      }    } else {      logger.log(Level.INFO,"Failed to select any candidate pair");    }  } else {    if (iceProcessingState == IceProcessingState.TERMINATED || iceProcessingState == IceProcessingState.FAILED) {      if ((localJob != null) && (iceProcessingState == IceProcessingState.TERMINATED)) {        localJob.start();      }synchronized (localAgentMonitor) {        localAgentMonitor.notifyAll();      }    }  }}  }
class C{  public boolean hasNext(){  return mCurrent.size() != 0;}  }
class C{  public static Paint newRotateBottomImagePaint(){  final Paint paint=new Paint();  paint.setColor(Color.WHITE);  paint.setStrokeWidth(3);  return paint;}  }
class C{  public SignatureVisitor visitSuperclass(){  return this;}  }
class C{  public static void writeln(Word w){  writeln(w,true);}  }
class C{  public ArrayIndexOutOfBoundsException(){}  }
class C{  public BrowsePath clone(){  BrowsePath result=new BrowsePath();  result.StartingNode=StartingNode;  result.RelativePath=RelativePath == null ? null : RelativePath.clone();  return result;}  }
class C{  public void markMessagesDelivered(String charname) throws SQLException {  DBTransaction transaction=TransactionPool.get().beginWork();  try {    markMessagesDelivered(transaction,charname);  }  finally {    TransactionPool.get().commit(transaction);  }}  }
class C{  public void assertTermStats(TermsEnum leftTermsEnum,TermsEnum rightTermsEnum) throws Exception {  assertEquals(leftTermsEnum.docFreq(),rightTermsEnum.docFreq());  if (leftTermsEnum.totalTermFreq() != -1 && rightTermsEnum.totalTermFreq() != -1) {    assertEquals(leftTermsEnum.totalTermFreq(),rightTermsEnum.totalTermFreq());  }}  }
class C{  public void flush(){  while (current > 1) {    writeBit(0);  }  try {    out.flush();  } catch (  IOException e) {    throw new IllegalStateException(e);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ExpressionsPackage.DOUBLE_LITERAL__VALUE:    return value != VALUE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public static P2AntRunner create(String taskType,Action<Node> setup){  Node rootTask=new Node(null,taskType);  setup.execute(rootTask);  P2AntRunner antTask=new P2AntRunner();  antTask.setTask(rootTask);  return antTask;}  }
class C{  private void checkRDFAtts(Atts atts) throws RDFParseException {  Iterator<Att> iter=atts.iterator();  while (iter.hasNext()) {    Att att=iter.next();    if (RDF.NAMESPACE.equals(att.getNamespace())) {      String localName=att.getLocalName();      if (localName.equals("Seq") || localName.equals("Bag") || localName.equals("Alt")|| localName.equals("Statement")|| localName.equals("Property")|| localName.equals("List")|| localName.equals("subject")|| localName.equals("predicate")|| localName.equals("object")|| localName.equals("type")|| localName.equals("value")|| localName.equals("first")|| localName.equals("rest")|| localName.equals("nil")|| localName.startsWith("_")) {      } else       if (localName.equals("Description") || localName.equals("li") || localName.equals("RDF")|| localName.equals("ID")|| localName.equals("about")|| localName.equals("parseType")|| localName.equals("resource")|| localName.equals("nodeID")|| localName.equals("datatype")) {        reportError("'" + att.getQName() + "' not allowed as attribute name",XMLParserSettings.FAIL_ON_NON_STANDARD_ATTRIBUTES);        iter.remove();      } else       if (localName.equals("bagID") || localName.equals("aboutEach") || localName.equals("aboutEachPrefix")) {        reportError(att.getQName() + " is no longer a valid RDF name",XMLParserSettings.FAIL_ON_NON_STANDARD_ATTRIBUTES);      } else {        reportWarning("unknown rdf attribute '" + att.getQName() + "'");      }    }  }}  }
class C{  private byte[] readChunkedData(int chunkSize,String endTag) throws NetworkException {  try {    byte[] result=null;    if (chunkSize != 0) {      result=new byte[chunkSize];      int nbRead=0;      int nbData=-1;      while ((nbRead < chunkSize) && ((nbData=mStream.read(result,nbRead,chunkSize - nbRead)) != -1)) {        nbRead+=nbData;      }    } else {      int b;      int tagLength=endTag.length();      int[] tail=new int[tagLength];      byte[] buffer=new byte[mBufferLength + tagLength + 2];      int[] match=new int[tagLength];      for (int i=0; i < tagLength; i++) {        match[i]=endTag.charAt(tagLength - i - 1);      }      for (int j=0; (b=mStream.read()) != -1; j++) {        System.arraycopy(tail,0,tail,1,tagLength - 1);        tail[0]=b;        if (b != match[0]) {          buffer[j]=(byte)b;        } else {          boolean tagFound=true;          for (int k=1; k < tagLength - 1; k++) {            if (tail[k] != match[k]) {              buffer[j]=(byte)b;              tagFound=false;              break;            }          }          if (tagFound) {            result=new byte[j - tagLength];            System.arraycopy(buffer,0,result,0,j - tagLength - 1);            result[j - tagLength - 1]=(byte)mStream.read();            break;          }        }      }    }    mStream.read();    mStream.read();    return result;  } catch (  IOException e) {    throw new NetworkException("Failed to read chunk data!",e);  }}  }
class C{  @Override public int doFinal(final byte[] out,final int outOff) throws BadCiphertextException {  if (contentCryptoHandler_ == null) {    return 0;  } else {    int result=contentCryptoHandler_.doFinal(out,outOff);    return result;  }}  }
class C{  public LandsatLayer(String serviceAddress){  if (serviceAddress == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"LandsatLayer","constructor","missingServiceAddress"));  }  WmsLayerConfig config=new WmsLayerConfig();  config.serviceAddress=serviceAddress;  config.wmsVersion="1.3.0";  config.layerNames="esat";  config.coordinateSystem="EPSG:4326";  this.setDisplayName("Landsat");  this.setConfiguration(new Sector().setFullSphere(),15,config);}  }
class C{  public void startAccounts(List<String> matrixIds){  for (  String matrixId : matrixIds) {    if (mMatrixIds.indexOf(matrixId) < 0) {      MXSession session=Matrix.getInstance(getApplicationContext()).getSession(matrixId);      mSessions.add(session);      mMatrixIds.add(matrixId);      session.getDataHandler().addListener(mListener);      session.startEventStream(null);    }  }}  }
class C{  public void update(Color foreground,Color background){  super.setForeground(foreground);  super.setBackground(background);}  }
class C{  private DateUtil(){}  }
class C{  public ObjectNotFoundException(){  super();}  }
class C{  public DataSet simulateDataCholesky(int sampleSize,boolean latentDataSaved){  List<Node> variables=new LinkedList<>();  if (latentDataSaved) {    for (    Node node : getVariableNodes()) {      variables.add(node);    }  } else {    for (    Node node : getMeasuredNodes()) {      variables.add(node);    }  }  List<Node> newVariables=new ArrayList<>();  for (  Node node : variables) {    ContinuousVariable continuousVariable=new ContinuousVariable(node.getName());    continuousVariable.setNodeType(node.getNodeType());    newVariables.add(continuousVariable);  }  TetradMatrix impliedCovar=implCovar();  DataSet fullDataSet=new ColtDataSet(sampleSize,newVariables);  TetradMatrix cholesky=MatrixUtils.choleskyC(impliedCovar);  ROW:   for (int row=0; row < sampleSize; row++) {    double exoData[]=new double[cholesky.rows()];    for (int i=0; i < exoData.length; i++) {      exoData[i]=RandomUtil.getInstance().nextNormal(0,1);    }    double point[]=new double[exoData.length];    for (int i=0; i < exoData.length; i++) {      double sum=0.0;      for (int j=0; j <= i; j++) {        sum+=cholesky.get(i,j) * exoData[j];      }      point[i]=sum;    }    for (int col=0; col < variables.size(); col++) {      int index=getVariableNodes().indexOf(variables.get(col));      double value=point[index] + variableMeans[col];      if (Double.isNaN(value) || Double.isInfinite(value)) {        throw new IllegalArgumentException("Value out of range: " + value);      }      if (isSimulatedPositiveDataOnly() && value < 0) {        row--;        continue ROW;      }      fullDataSet.setDouble(row,col,value);    }  }  if (latentDataSaved) {    return fullDataSet;  } else {    return DataUtils.restrictToMeasured(fullDataSet);  }}  }
class C{  private Drawable tileifyIndeterminate(Drawable drawable){  if (drawable instanceof AnimationDrawable) {    AnimationDrawable background=(AnimationDrawable)drawable;    final int N=background.getNumberOfFrames();    AnimationDrawable newBg=new AnimationDrawable();    newBg.setOneShot(background.isOneShot());    for (int i=0; i < N; i++) {      Drawable frame=tileify(background.getFrame(i),true);      frame.setLevel(10000);      newBg.addFrame(frame,background.getDuration(i));    }    newBg.setLevel(10000);    drawable=newBg;  }  return drawable;}  }
class C{  @Override public List<String> addEmrMasterSecurityGroups(String clusterId,List<String> securityGroups,AwsParamsDto awsParams) throws Exception {  ListInstancesRequest listInstancesRequest=new ListInstancesRequest().withClusterId(clusterId).withInstanceGroupTypes(InstanceGroupType.MASTER);  List<Instance> instances=emrOperations.listClusterInstancesRequest(getEmrClient(awsParams),listInstancesRequest).getInstances();  if (instances.size() == 0) {    throw new IllegalArgumentException("No master instances found for the cluster \"" + clusterId + "\".");  }  for (  Instance instance : instances) {    ec2Dao.addSecurityGroupsToEc2Instance(instance.getEc2InstanceId(),securityGroups,awsParams);  }  return securityGroups;}  }
class C{  public static int indexOfChars(String string,char[] chars,int startindex){  int stringLen=string.length();  int charsLen=chars.length;  for (int i=startindex; i < stringLen; i++) {    char c=string.charAt(i);    for (int j=0; j < charsLen; j++) {      if (c == chars[j]) {        return i;      }    }  }  return -1;}  }
class C{  public static void callAgentApp(Context context,String operation,String appUri,String appName){  Intent intent=new Intent(Constants.AGENT_APP_SERVICE_NAME);  Intent explicitIntent=createExplicitFromImplicitIntent(context,intent);  if (explicitIntent != null) {    intent=explicitIntent;  }  intent.putExtra("code",operation);  intent.setPackage(Constants.PACKAGE_NAME);  if (appUri != null) {    intent.putExtra("appUri",appUri);  }  if (appName != null) {    intent.putExtra("appName",appName);  }  context.startService(intent);}  }
class C{  public static boolean begin() throws GenericTransactionException {  return begin(0);}  }
class C{  @Deprecated public void clearCache(){  if (appView == null) {    init();  }  this.appView.clearCache(true);}  }
class C{  public boolean isMember(int x){  Assert.check(currentState != BitsState.UNKNOWN);  return 0 <= x && x < (bits.length << wordshift) && (bits[x >>> wordshift] & (1 << (x & wordmask))) != 0;}  }
class C{  public boolean isRfQQty(){  Object oo=get_Value(COLUMNNAME_IsRfQQty);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public double vega(final double maturity){  QL.require(maturity >= 0.0,"negative maturity not allowed");  final double temp=Math.log(strike / forward) / variance;  final double DalphaDsigma=dAlpha_dD1 * (temp + 0.5);  final double DbetaDsigma=dBeta_dD2 * (temp - 0.5);  final double temp2=DalphaDsigma * forward + DbetaDsigma * x;  return discount * Math.sqrt(maturity) * temp2;}  }
class C{  public boolean isPollable(){  return isPollable;}  }
class C{  @SuppressWarnings("unchecked") public static List<String> tokenize(CharSequence self,CharSequence token){  return InvokerHelper.asList(new StringTokenizer(self.toString(),token.toString()));}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE_NAME;case 3:return KEY;case 4:return VERSIONED_VALUE;case 5:return VALUE;default :return null;}}  }
class C{  public Namespace(String qualifier,PrincipalUser creator){  this(creator,qualifier,creator,new HashSet<PrincipalUser>());}  }
class C{  public <T extends B>MinMaxPriorityQueue<T> create(){  return create(Collections.<T>emptySet());}  }
class C{  @CanIgnoreReturnValue @Override public int remove(@Nullable Object element,int occurrences){  if (occurrences == 0) {    return count(element);  }  CollectPreconditions.checkPositive(occurrences,"occurences");  AtomicInteger existingCounter=Maps.safeGet(countMap,element);  if (existingCounter == null) {    return 0;  }  while (true) {    int oldValue=existingCounter.get();    if (oldValue != 0) {      int newValue=Math.max(0,oldValue - occurrences);      if (existingCounter.compareAndSet(oldValue,newValue)) {        if (newValue == 0) {          countMap.remove(element,existingCounter);        }        return oldValue;      }    } else {      return 0;    }  }}  }
class C{  void decodeStats() throws IOException {  final int upto=(int)ord % INTERVAL;  final int oldBlockOrd=statsBlockOrd;  statsBlockOrd=(int)ord / INTERVAL;  if (oldBlockOrd != statsBlockOrd) {    refillStats();  }  state.docFreq=docFreq[upto];  state.totalTermFreq=totalTermFreq[upto];}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isBoundsEnforced(){  return boundsEnforced;}  }
class C{  protected Collection<BindingSet> makeIterationCache(CloseableIteration<BindingSet,QueryEvaluationException> iter){  return new ArrayList<BindingSet>();}  }
class C{  public PasswordScopeAccessProvider(String userId,String password,String projectId,String authUrl,String prefferedRegion){  mUserId=userId;  mPassword=password;  mProjectId=projectId;  mAuthUrl=authUrl;  mPrefferedRegion=prefferedRegion;}  }
class C{  @Override public void connectionStateChanged(State state){}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  public static boolean validateTypeName(final TypeManager typeManager,final JTextField name){  return !name.getText().isEmpty() && !typeManager.isTypeExisting(name.getText());}  }
class C{  private PrimitiveTypeMap(){}  }
class C{  public static int length(RegExp re){  RegExp2 r;switch (re.type) {case sym.BAR:{      r=(RegExp2)re;      int l1=length(r.r1);      if (l1 < 0)       return -1;      int l2=length(r.r2);      if (l1 == l2)       return l1; else       return -1;    }case sym.CONCAT:{    r=(RegExp2)re;    int l1=length(r.r1);    if (l1 < 0)     return -1;    int l2=length(r.r2);    if (l2 < 0)     return -1;    return l1 + l2;  }case sym.STAR:case sym.PLUS:case sym.QUESTION:return -1;case sym.CCLASS:case sym.CCLASSNOT:case sym.CHAR:case sym.CHAR_I:return 1;case sym.STRING:case sym.STRING_I:{String content=(String)((RegExp1)re).content;return content.length();}case sym.TILDE:case sym.BANG:return -1;case sym.MACROUSE:return length(macros.getDefinition((String)((RegExp1)re).content));}throw new Error("Unknown expression type " + re.type + " in "+ re);}  }
class C{  public GOV3Function<T> build() throws IOException {  if (built)   throw new IllegalStateException("This builder has been already used");  built=true;  if (transform == null) {    if (chunkedHashStore != null)     transform=chunkedHashStore.transform(); else     throw new IllegalArgumentException("You must specify a TransformationStrategy, either explicitly or via a given ChunkedHashStore");  }  return new GOV3Function<T>(keys,transform,signatureWidth,values,outputWidth,indirect,compacted,tempDir,chunkedHashStore);}  }
class C{  public boolean addAll(Collection<?> collection){  throw new UnsupportedOperationException();}  }
class C{  void emitMaximumCodePoint(PrintWriter writer){  writer.append("  public static final int maximumCodePoint").append(" = 0x").append(Integer.toString(maximumCodePoint,16)).append(";\n");}  }
class C{  public static long dateValue(long year,int month,int day){  return (year << SHIFT_YEAR) | (month << SHIFT_MONTH) | day;}  }
class C{  public static void closeStatement(Statement stmt){  if (stmt != null) {    try {      stmt.close();    } catch (    SQLException ex) {      LOG.debug("Could not close JDBC Statement",ex);    }catch (    Throwable ex) {      LOG.info("Unexpected exception on closing JDBC Statement",ex);    }  }}  }
class C{  public void testConfiguratorSetterNameWithUppercaseFirstLetter(){  String setterName=AbstractJonasStandaloneLocalConfiguration.getConfiguratorSetterName(JonasPropertySet.CONFIGURATOR_PREFIX + "HttpSessionReplicationActivation");  assertEquals("setHttpSessionReplicationActivation",setterName);}  }
class C{  public static String h(final String name){  return "html/help/" + name + ".html";}  }
class C{  public void removeSizeChangedListener(ActionListener l){  if (sizeChangedListener == null) {    return;  }  sizeChangedListener.removeListener(l);}  }
class C{  private void resetStringValueSection(){  disposeOptionalControls(HTTP_PARAMETER_ID);  validationManager.validationRemoved(HTTP_PARAMETER_ID);  disposeOptionalControls(METHOD_PARAMETER_ID);  validationManager.validationRemoved(METHOD_PARAMETER_ID);}  }
class C{  protected void prepareBarHighlight(float x,float y1,float y2,float barspaceHalf,Transformer trans){  float barWidth=0.5f;  float left=x - barWidth + barspaceHalf;  float right=x + barWidth - barspaceHalf;  float top=y1;  float bottom=y2;  mBarRect.set(left,top,right,bottom);  trans.rectValueToPixel(mBarRect,mAnimator.getPhaseY());}  }
class C{  public void addSubSession(SubSession sub){  if (subSessions == null) {    subSessions=new ArrayList<SubSession>(INITIAL_SUB_SESSION_NUMBER);    subSessions.add(sub);  } else {    subSessions.add(sub);  }}  }
class C{  public void write(OutputStream out,Drawing drawing,AffineTransform drawingTransform,Dimension imageSize) throws IOException {  write(out,drawing.getChildren(),drawingTransform,imageSize);}  }
class C{  static double incompleteBetaFraction1(double a,double b,double x) throws ArithmeticException {  double xk, pk, pkm1, pkm2, qk, qkm1, qkm2;  double k1, k2, k3, k4, k5, k6, k7, k8;  double r, t, ans, thresh;  int n;  k1=a;  k2=a + b;  k3=a;  k4=a + 1.0;  k5=1.0;  k6=b - 1.0;  k7=k4;  k8=a + 2.0;  pkm2=0.0;  qkm2=1.0;  pkm1=1.0;  qkm1=1.0;  ans=1.0;  r=1.0;  n=0;  thresh=3.0 * MACHEP;  do {    xk=-(x * k1 * k2) / (k3 * k4);    pk=pkm1 + pkm2 * xk;    qk=qkm1 + qkm2 * xk;    pkm2=pkm1;    pkm1=pk;    qkm2=qkm1;    qkm1=qk;    xk=(x * k5 * k6) / (k7 * k8);    pk=pkm1 + pkm2 * xk;    qk=qkm1 + qkm2 * xk;    pkm2=pkm1;    pkm1=pk;    qkm2=qkm1;    qkm1=qk;    if (qk != 0)     r=pk / qk;    if (r != 0) {      t=Math.abs((ans - r) / r);      ans=r;    } else     t=1.0;    if (t < thresh)     return ans;    k1+=1.0;    k2+=1.0;    k3+=2.0;    k4+=2.0;    k5+=1.0;    k6-=1.0;    k7+=2.0;    k8+=2.0;    if ((Math.abs(qk) + Math.abs(pk)) > big) {      pkm2*=biginv;      pkm1*=biginv;      qkm2*=biginv;      qkm1*=biginv;    }    if ((Math.abs(qk) < biginv) || (Math.abs(pk) < biginv)) {      pkm2*=big;      pkm1*=big;      qkm2*=big;      qkm1*=big;    }  } while (++n < 300);  return ans;}  }
class C{  public static long currentTimeMillis(){  return Time.currentTimeMillis();}  }
class C{  Set<Class<?>> flattenHierarchy(Class<?> concreteClass){  Set<Class<?>> classes=flattenHierarchyCache.get(concreteClass);  if (classes == null) {    classes=getClassesFor(concreteClass);    flattenHierarchyCache.put(concreteClass,classes);  }  return classes;}  }
class C{  protected boolean isShowDirectionOfMovement(){  String code=this.maskedSymbolCode;  return TacGrpSidc.MOBSU_CBRN_NDGZ.equalsIgnoreCase(code) || TacGrpSidc.MOBSU_CBRN_FAOTP.equalsIgnoreCase(code) || TacGrpSidc.MOBSU_CBRN_REEVNT_BIO.equalsIgnoreCase(code)|| TacGrpSidc.MOBSU_CBRN_REEVNT_CML.equalsIgnoreCase(code);}  }
class C{  public TeXParser(boolean isPartial,String parseString,TeXFormula formula,boolean firstpass,boolean space){  this(isPartial,parseString,formula,firstpass);  this.ignoreWhiteSpace=space;}  }
class C{  public Member(String uri){  super(uri);}  }
class C{  Node(Node<K,V> parent,K key,int hash,Node<K,V> next,Node<K,V> prev){  this.parent=parent;  this.key=key;  this.hash=hash;  this.height=1;  this.next=next;  this.prev=prev;  prev.next=this;  next.prev=this;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.588 -0400",hash_original_method="D59462ADF236F9BB2B2797E094BBD843",hash_generated_method="917B382B3C67AEF69FC9055FD2505276") public void run(){  try {    Thread.sleep(timeout);    thread.interrupt();  } catch (  InterruptedException e) {  }}  }
class C{  @Inject public TokenTypeRewriter(N4JSGrammarAccess ga){  ImmutableMap.Builder<AbstractElement,Integer> builder=ImmutableMap.builder();  rewriteRegExLiterals(ga,builder);  rewriteTemplateLiterals(ga,builder);  rewriteAnnotationReferences(ga,builder);  rewriteTypeReferences(ga,builder);  rewriteIdentifiers(ga,builder);  rewriteEnumLiterals(ga,builder);  rewriteTypeVariables(ga,builder);  rewriteNumberLiterals(ga,builder);  rewriteKeywords(ga,builder);  this.mapping=builder.build();}  }
class C{  public OutputStream openOutput() throws IOException {  HttpLog.i("Request URL : " + connection.getURL());  if (connect)   return output; else {    output=connection.getOutputStream();    connect=true;    return output;  }}  }
class C{  protected void paintEmptyRows(Graphics g){  final int rowCount=getRowCount();  final Rectangle clip=g.getClipBounds();  final int height=clip.y + clip.height;  if (rowCount * rowHeight < height) {    for (int i=rowCount; i <= height / rowHeight; ++i) {      g.setColor(colorForRow(i));      g.fillRect(clip.x,i * rowHeight,clip.width,rowHeight);    }    if (System.getProperty("os.name").contains("Mac") && getShowVerticalLines()) {      g.setColor(MAC_UNFOCUSED_UNSELECTED_VERTICAL_LINE_COLOR);      TableColumnModel columnModel=getColumnModel();      int x=0;      for (int i=0; i < columnModel.getColumnCount(); ++i) {        TableColumn column=columnModel.getColumn(i);        x+=column.getWidth();        g.drawLine(x - 1,rowCount * rowHeight,x - 1,height);      }    }  }}  }
class C{  public Context[] findChildren(){  List<Context> contexts=new ArrayList<Context>();  Object[] children=(Object[])invoke(hostFindChildren);  for (  Object child : children) {    if (child.getClass().isAssignableFrom(contextClass)) {      contexts.add(new Context(child));    }  }  Context[] contextsArray=new Context[contexts.size()];  contextsArray=contexts.toArray(contextsArray);  return contextsArray;}  }
class C{  public PubsubFuture<Void> modifyAckDeadline(final String project,final String subscription,final int ackDeadlineSeconds,final List<String> ackIds){  return modifyAckDeadline(Subscription.canonicalSubscription(project,subscription),ackDeadlineSeconds,ackIds);}  }
class C{  public PLRect(){  this(0.0f,0.0f,0.0f,0.0f,0.0f,0.0f);}  }
class C{  @Deprecated public DomModelImpl(T mergedModel,@NotNull Set<XmlFile> configFiles){  myMergedModel=DomUtil.getFileElement(mergedModel);  myConfigFiles=configFiles;}  }
class C{  public static int compare(String left,double right){  if (Decision.isNumber(left)) {    if (left.length() > 9) {      try {        return new BigDecimal(left).compareTo(new BigDecimal(right));      } catch (      Throwable t) {      }    }    return compare(Caster.toDoubleValue(left,Double.NaN),right);  }  if (Decision.isBoolean(left))   return compare(Caster.toBooleanValue(left,false),right);  if (left.length() == 0)   return -1;  char leftFirst=left.charAt(0);  if (leftFirst >= '0' && leftFirst <= '9')   return left.compareToIgnoreCase(Caster.toString(right));  return leftFirst - '0';}  }
class C{  private void applyFilters(){  if (!model.isSortingAndFilteringAllowed()) {    return;  }  int visibleCount=model.getTotalSize();  if ("".equals(model.getFilterNameString())) {    for (    AbstractAttributeStatisticsModel statModel : backupInitialOrderList) {      model.setAttributeStatisticsModelVisible(statModel,true);    }  } else {    for (    AbstractAttributeStatisticsModel statModel : model.getOrderedAttributeStatisticsModels()) {      String attName=statModel.getAttribute().getName();      boolean show=attName.contains(model.getFilterNameString());      if (!show) {        visibleCount--;      }      model.setAttributeStatisticsModelVisible(statModel,attName.contains(model.getFilterNameString()));    }  }  for (  AbstractAttributeStatisticsModel statModel : model.getOrderedAttributeStatisticsModels()) {    if (!model.isShowSpecialAttributes() && statModel.isSpecialAtt()) {      if (model.setAttributeStatisticsModelVisible(statModel,false)) {        visibleCount--;      }    }    if (!model.isShowRegularAttributes() && !statModel.isSpecialAtt()) {      if (model.setAttributeStatisticsModelVisible(statModel,false)) {        visibleCount--;      }    }    ExampleSet exSet=model.getExampleSetOrNull();    if (exSet != null) {      if (model.isShowOnlyMissingsAttributes() && exSet.getStatistics(statModel.getAttribute(),Statistics.UNKNOWN) <= 0) {        if (model.setAttributeStatisticsModelVisible(statModel,false)) {          visibleCount--;        }      }    }    boolean showValueType=true;    for (    String valueTypeString : Ontology.VALUE_TYPE_NAMES) {      int valueType=Ontology.ATTRIBUTE_VALUE_TYPE.mapName(valueTypeString);      if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(statModel.getAttribute().getValueType(),valueType)) {        showValueType&=model.getAttributeTypeVisibility(valueType);        if (!showValueType) {          break;        }      }    }    if (!showValueType) {      if (model.setAttributeStatisticsModelVisible(statModel,false)) {        visibleCount--;      }    }  }  model.setVisibleCount(visibleCount);  if (model.getCurrentPageIndex() >= model.getNumberOfPages()) {    model.setCurrentPageIndex(0);  }  model.fireFilterChangedEvent();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:33.669 -0500",hash_original_method="CF0F4FD99D6D1B74E2AB7A4A0D0FE283",hash_generated_method="44E44BDA28644E4921175850ACFF8056") void trackMotionScroll(int deltaX){  if (getChildCount() == 0) {    return;  }  boolean toLeft=deltaX < 0;  int limitedDeltaX=getLimitedMotionScrollAmount(toLeft,deltaX);  if (limitedDeltaX != deltaX) {    mFlingRunnable.endFling(false);    onFinishedMovement();  }  offsetChildrenLeftAndRight(limitedDeltaX);  detachOffScreenChildren(toLeft);  if (toLeft) {    fillToGalleryRight();  } else {    fillToGalleryLeft();  }  mRecycler.clear();  setSelectionToCenterChild();  onScrollChanged(0,0,0,0);  invalidate();}  }
class C{  public boolean intersectsSegment(Vec3 pointA,Vec3 pointB){  if (pointA == null || pointB == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Frustum","containsPoint","missingPoint"));  }  if (this.containsPoint(pointA) || this.containsPoint(pointB))   return true;  if (pointA.equals(pointB))   return false;  for (  Plane plane : this.planes) {    if (plane.onSameSide(pointA,pointB) < 0)     return false;    if (plane.clip(pointA,pointB) != null)     return true;  }  return false;}  }
class C{  public Action<T> whenPermissionsRefused(PermissionsRefusedListener listener){  this.permissionsRefusedRef=new WeakReference<>(listener);  return this;}  }
class C{  public EightLongs(long a,long b,long c,long d,long e,long f,long g,long h){  this.a=a;  this.b=b;  this.c=c;  this.d=d;  this.e=e;  this.f=f;  this.g=g;  this.h=h;}  }
class C{  public void addQueryField(String fullName,String type,String alias){  A.notNull(fullName,"fullName");  A.notNull(type,"type");  fields.put(fullName,type);  if (alias != null)   aliases.put(fullName,alias);}  }
class C{  public ContentFilterElementResult clone(){  ContentFilterElementResult result=new ContentFilterElementResult();  result.StatusCode=StatusCode;  result.OperandStatusCodes=OperandStatusCodes == null ? null : OperandStatusCodes.clone();  result.OperandDiagnosticInfos=OperandDiagnosticInfos == null ? null : OperandDiagnosticInfos.clone();  return result;}  }
class C{  public void unloadCurrentMethodState(){  nextUnloadPointer=nextUnloadPointer.getPrevious();}  }
class C{  public static Uri withAppendedId(Uri contentUri,long id){  return appendId(contentUri.buildUpon(),id).build();}  }
class C{  @RequestMapping(value="/invitation/account",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Transactional public ResponseEntity<Void> sendCreateAccountInvitation(@RequestParam(value="passwordReset") boolean passwordReset,@RequestBody @Valid AccountCreationDTO request,HttpServletRequest servletRequest) throws URISyntaxException {  log.debug("REST request to send account creation invitation : {}",request);  Email email=emailRepository.findOneByEmailAddress(request.getEmail()).orElseGet(null);  Set<UserEmail> userEmails=email.getUserEmails();  userEmails.stream().forEach(null);  if (!passwordReset || userEmails.size() == 0) {    userEmails.stream().filter(null).findFirst().orElseGet(null);  }  for (  UserEmail userEmail : userEmails) {    UserEmailActivation activation=userEmail.getUserEmailActivations().stream().findFirst().orElseGet(null);    activation.setDateSent(new DateTime());    activation=userEmailActivationRepository.save(activation);  }  ;  String baseUrl=servletRequest.getScheme() + "://" + servletRequest.getServerName()+ ":"+ servletRequest.getServerPort();  if (passwordReset) {    mailService.sendPasswordResetEmail(email,request.getLangKey(),baseUrl);  } else {    mailService.sendAccountCreationEmail(email,request.getLangKey(),baseUrl);  }  return ResponseEntity.ok().build();}  }
class C{  public void addOutboundRule(final OutboundRule outboundRule){  outboundRule.setId(outboundRuleIdCounter++);  outboundRules.add(outboundRule);}  }
class C{  public JSONObject(JSONTokener x) throws JSONException {  this();  char c;  String key;  if (x.nextClean() != '{') {    throw x.syntaxError("A JSONObject text must begin with '{'");  }  for (; ; ) {    c=x.nextClean();switch (c) {case 0:      throw x.syntaxError("A JSONObject text must end with '}'");case '}':    return;default :  x.back();key=x.nextValue().toString();}c=x.nextClean();if (c == '=') {if (x.next() != '>') {x.back();}} else if (c != ':') {throw x.syntaxError("Expected a ':' after a key");}this.putOnce(key,x.nextValue());switch (x.nextClean()) {case ';':case ',':if (x.nextClean() == '}') {return;}x.back();break;case '}':return;default :throw x.syntaxError("Expected a ',' or '}'");}}}  }
class C{  public void addSquelchStateListener(Listener<SquelchState> listener){  mSquelchStateBroadcaster.addListener(listener);}  }
class C{  @Override public OptionGUI createOptionGUI(){  LOG.trace(getName() + ": " + "GUI Requested");  m_OptionManager.initAttackCfg();  return new OptionPayloadEncGUI(this,getCollection().getOwnerPlugin());}  }
class C{  public static TruncatedNormal serializableInstance(){  return new TruncatedNormal();}  }
class C{  private void resolveProtocols(ClassLoader loader){  ServiceLoader<ProtocolManagerFactory> serviceLoader=ServiceLoader.load(ProtocolManagerFactory.class,loader);  loadProtocolManagerFactories(serviceLoader);}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof Map) {    Map<?,?> map=(Map)object;    if (size() != map.size()) {      return false;    }    Set<Map.Entry<K,V>> set=entrySet();    return set.equals(map.entrySet());  }  return false;}  }
class C{  protected short reportReturn(String methodCall,short value){  reportAllReturns(methodCall,"" + value);  return value;}  }
class C{  public void messageArrived(DMessage msg,DProtocol which){  int type=msg.getType();  if (type < 0 || type >= DMessage.InSIZE)   type=DMessage.InSIZE;  Object inLock=getInLock();  if (!m_isolate) {synchronized (m_isolateLock) {      if (m_lastIsolate != Isolate.DEFAULT_ID) {        DMessageCounter counter=m_isolateCounterMap.get(m_lastIsolate);        inLock=counter.getInLock();      }    }  }synchronized (inLock) {    if (type == DMessage.InIsolate) {      long isolate=msg.getDWord();      if (isolate != Isolate.DEFAULT_ID) {        if (!m_isolateCounterMap.containsKey(isolate)) {          DMessageCounter isolateCounter=new DMessageCounter();          isolateCounter.setIsolate(true);          m_isolateCounterMap.put(isolate,isolateCounter);        }      }synchronized (m_isolateLock) {        m_lastIsolate=isolate;      }      m_inCounts[type]+=1;      inLock.notifyAll();    } else     if (!m_isolate && m_lastIsolate != Isolate.DEFAULT_ID) {      DMessageCounter counter=m_isolateCounterMap.get(m_lastIsolate);      counter.messageArrived(msg,which);synchronized (counter.getInLock()) {        counter.getInLock().notifyAll();      }    } else {      m_inCounts[type]+=1;      inLock.notifyAll();    }  }}  }
class C{  @Override public int doAfterBody() throws JspException {  if (getBodyContent() != null) {    String value=getBodyContent().getString();    if (value != null) {      UIOutput output=(UIOutput)getComponentInstance();      output.setValue(value);      getBodyContent().clearBody();    }  }  return (getDoAfterBodyValue());}  }
class C{  private void appendPolygon(Polygon polygon,int level,Writer writer) throws IOException {  if (polygon.getNumInteriorRing() == 0) {    appendPolygonPolygon(polygon,level,false,writer);  } else {    appendPolygonPath(polygon,level,false,writer);  }}  }
class C{  protected void finalize() throws Throwable {  this.reader=null;  this.resolver=null;  this.buffer=null;  super.finalize();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void updateADEntry(String tableName,ADDataElement data2,Vector<String> keycolumns,Vector<Column> columns2){  String alterStatement="UPDATE " + tableName + " SET ";  boolean comma=false;  for (int i=0; i < columns2.size(); i++) {    final Column column=columns2.get(i);    if (!keycolumns.contains(column.getColumnName()) && !"DATE".equals(column.getDataType())) {      if (comma) {        alterStatement+=",";      }      comma=true;      final String columnName=column.getColumnName();      alterStatement+=column.getColumnName() + "=";      if (column.isStringType()) {        if (data2.getValueForColumn(columnName) == null) {          alterStatement+="null";          continue;        }        alterStatement+="'" + data2.getValueForColumn(columnName).replaceAll("'","''") + "'";      } else {        alterStatement+=data2.getValueForColumn(columnName);      }    }  }  alterStatement+=" WHERE ";  boolean and=false;  for (int i=0; i < columns2.size(); i++) {    final Column column=columns2.get(i);    final String columnName=column.getColumnName();    if (keycolumns.contains(columnName)) {      if (and) {        alterStatement+=" AND ";      }      and=true;      if (data2.getValueForColumn(columnName) == null) {        alterStatement+=column.getColumnName() + " is null ";        continue;      }      alterStatement+=column.getColumnName() + "=";      if (column.isStringType()) {        alterStatement+="'" + data2.getValueForColumn(columnName).replaceAll("'","''") + "'";      } else {        alterStatement+=data2.getValueForColumn(columnName);      }    }  }  alterStatement+=";";  m_alterADEntry.add(alterStatement);}  }
class C{  private Throwable extractThrowable(Runnable runnable){  if ((runnable instanceof Future<?>) && ((Future<?>)runnable).isDone()) {    try {      ((Future<?>)runnable).get();    } catch (    CancellationException e) {      LOG.info("Task {} cancelled",runnable,e.getCause());    }catch (    InterruptedException e) {      LOG.info("Task {} was interrupted",runnable,e);    }catch (    ExecutionException e) {      return e.getCause();    }  }  return null;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:38.306 -0500",hash_original_method="2BA78033DAE740186A6855D293FFDC43",hash_generated_method="6E79BC3AC105495601645C17C9BDCD4E") private void sendFile() throws IOException {  int reply;  write("STOR " + url.getFile().substring(url.getFile().lastIndexOf('/') + 1,url.getFile().length()) + "\r\n");  reply=getReply();  if (!(reply == FTP_OPENDATA || reply == FTP_OK || reply == FTP_DATAOPEN)) {    throw new IOException("Unable to store file");  }}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream bytes=new DerOutputStream();  DerOutputStream temp=new DerOutputStream();  if (addresses != null && addresses.length > 0) {    for (int i=0; i < addresses.length; i++)     bytes.write(addresses[i].asn1Encode());  }  temp.write(DerValue.tag_Sequence,bytes);  return temp.toByteArray();}  }
class C{  public RegionRoleException(String s,String regionFullPath,Throwable ex){  super(s,ex);  this.regionFullPath=regionFullPath;}  }
class C{  public StatisticResourceImpl(StatResource statResource,SystemMember member) throws org.apache.geode.admin.AdminException {  this.statResource=statResource;  this.member=member;  this.name=this.statResource.getName();  this.description=this.statResource.getDescription();  this.type=this.statResource.getType();}  }
class C{  public static String readRGBs(ByteBuffer buffer,int strLen){  long l=Buffers.readUInt(buffer);  StringBuilder sb=new StringBuilder();  for (int i=strLen / 2 - 1; i >= 0; i--) {    sb.append(Integer.toHexString((int)((l >> i * 8) & 0xff)));  }  return sb.toString();}  }
class C{  @Deprecated public EmailListEntry retrieveEmailList(String emailList) throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Retrieving email list '" + emailList + "'.");  URL retrieveUrl=new URL(domainUrlBase + "emailList/" + SERVICE_VERSION+ "/"+ emailList);  return emailListService.getEntry(retrieveUrl,EmailListEntry.class);}  }
class C{  public static List<Point2D> divideConquerBrownianBridge(double D,Point2D t0y0,Point2D t1y1,int depth,SpaceTimeRejector1D rejector){  List<Point2D> points=new LinkedList<Point2D>();  points.add(t0y0);  points.add(t1y1);  divideConquerBrownianBridge(D,0,points,depth,rejector);  return points;}  }
class C{  public File resourceDwcaFile(@NotNull String resourceName,@NotNull BigDecimal version){  String fn="dwca-" + version.toPlainString() + ".zip";  return dataFile(RESOURCES_DIR + "/" + resourceName+ "/"+ fn);}  }
class C{  public static void appendLong(AbstractStringBuilder sb,long l){  convertLong(sb,l);}  }
class C{  public ModpackInitializationPanel(WizardController controller,Map wizardData,Vector<String> versions,String selVersion){  initComponents();  this.controller=controller;  this.wizardData=wizardData;  wizardData.put(KEY_GAME_VERSION,versions);  wizardData.put("selVersion",selVersion);  wizardData.put(KEY_INCLUDING_LAUNCHER,false);  configureComboContents();  checkProblem();}  }
class C{  public static KeyczarReader readerFromKeyczar(GenericKeyczar keyczar){  HashMap<Integer,KeyczarKey> keys=new HashMap<Integer,KeyczarKey>();  for (  KeyVersion v : keyczar.getVersions()) {    keys.put(v.getVersionNumber(),keyczar.getKey(v));  }  return new MemoryKeyReader(keyczar.getMetadata(),keys);}  }
class C{  @Override public Generator<ILineSegment> construct(String[] args){  return new SlidingLadderGenerator(Double.valueOf(args[0]));}  }
class C{  public void solve(){  while (true) {    try {      if (checkProofOfWork(false))       return;      setNonce(getNonce() + 1);    } catch (    VerificationException e) {      throw new RuntimeException(e);    }  }}  }
class C{  public boolean templateExists(String templateName){  return (ri.getLoaderNameForResource(templateName) != null);}  }
class C{  public void message(CanMessage f){  if (addrActive.match(f)) {    setOwnState(Sensor.ACTIVE);  } else   if (addrInactive.match(f)) {    setOwnState(Sensor.INACTIVE);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.610 -0500",hash_original_method="6FCA9AA6353D4B452135E8444180D2C6",hash_generated_method="BDA28BABE71D91786DFE8D4E9E911424") private static void log(String s){  Slog.d(TAG,s);}  }
class C{  public void close(){  namespace.close();}  }
class C{  private void handleUserNotFound(SipTransactionContext ctx) throws ContactManagerException, FileAccessException {  if (sLogger.isActivated()) {    sLogger.info("User not found (" + ctx.getStatusCode() + " error)");  }  mContactManager.setContactCapabilities(mContact,Capabilities.sDefaultCapabilities,RcsStatus.NOT_RCS,RegistrationState.UNKNOWN);}  }
class C{  public static boolean rdfGroupHasSwappedVolumes(DbClient dbClient,URI projectURI,URI rdfGroupURI){  if (rdfGroupURI == null) {    return false;  }  URIQueryResultList volumeIds=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getProjectVolumeConstraint(projectURI),volumeIds);  Iterator<Volume> volumeItr=dbClient.queryIterativeObjects(Volume.class,volumeIds);  while (volumeItr.hasNext()) {    Volume volume=volumeItr.next();    if (rdfGroupURI.equals(volume.getSrdfGroup())) {      if (Volume.LinkStatus.SWAPPED.name().equals(volume.getLinkStatus())) {        return true;      }    }  }  return false;}  }
class C{  public boolean isMatted(){  return matted;}  }
class C{  @Deprecated public UpdateRequest script(String script){  updateOrCreateScript(script,ScriptType.INLINE,null,null);  return this;}  }
class C{  static boolean handleWebSearchIntent(Activity activity,Controller controller,Intent intent){  if (intent == null)   return false;  String url=null;  final String action=intent.getAction();  if (Intent.ACTION_VIEW.equals(action)) {    Uri data=intent.getData();    if (data != null)     url=data.toString();  } else   if (Intent.ACTION_SEARCH.equals(action) || MediaStore.INTENT_ACTION_MEDIA_SEARCH.equals(action) || Intent.ACTION_WEB_SEARCH.equals(action)) {    url=intent.getStringExtra(SearchManager.QUERY);  }  return handleWebSearchRequest(activity,controller,url,intent.getBundleExtra(SearchManager.APP_DATA),intent.getStringExtra(SearchManager.EXTRA_DATA_KEY));}  }
class C{  public TextLayout(String string,Map<? extends Attribute,?> attributes,FontRenderContext frc){  if (string == null) {    throw new IllegalArgumentException("Null string passed to TextLayout constructor.");  }  if (attributes == null) {    throw new IllegalArgumentException("Null map passed to TextLayout constructor.");  }  if (string.length() == 0) {    throw new IllegalArgumentException("Zero length string passed to TextLayout constructor.");  }  char[] text=string.toCharArray();  Font font=singleFont(text,0,text.length,attributes);  if (font != null) {    fastInit(text,font,attributes,frc);  } else {    AttributedString as=new AttributedString(string,attributes);    standardInit(as.getIterator(),text,frc);  }}  }
class C{  public static List<Double> softmax(List<Double> input){  double min=min(input).getSecond();  double denominator=0d;  for (  double d : input)   denominator+=exp(d - min);  List<Double> output=new ArrayList<>();  for (  double a : input)   output.add(exp(a - min) / denominator);  return output;}  }
class C{  protected ServerRequestHandler(){  mConnectionId=-1;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public SQLWarning(Throwable cause){  super(cause);}  }
class C{  @Override public Properties trackScreenView(@NonNull String screenName,@Nullable String courseId,@Nullable String action){  return trackScreenView(screenName,courseId,action,null);}  }
class C{  public boolean isUsingZOrder(Context context){  return !Settings.getInstance(context).preferStaticShadows();}  }
class C{  public JobConfigServlet(BaleenJobManager manager){  super("jobs",manager,JobConfigServlet.class);}  }
class C{  public static int[] calculateCoordinates(IDocument document,FindReplaceDocumentAdapter searchAdapter,String id) throws CoreException {  try {    IRegion foundId=searchAdapter.find(0,id,true,true,false,false);    if (foundId == null) {      return EMPTY_LOCATION;    } else {      return regionToLocation(document,foundId,true);    }  } catch (  BadLocationException e) {    throw new CoreException(new Status(IStatus.ERROR,TLCActivator.PLUGIN_ID,"Error during detection of the id position in MC.tla.",e));  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  static int findDominantColorByHue(Bitmap bitmap,int samples){  final int height=bitmap.getHeight();  final int width=bitmap.getWidth();  int sampleStride=(int)Math.sqrt((height * width) / samples);  if (sampleStride < 1) {    sampleStride=1;  }  float[] hsv=new float[3];  float[] hueScoreHistogram=new float[360];  float highScore=-1;  int bestHue=-1;  for (int y=0; y < height; y+=sampleStride) {    for (int x=0; x < width; x+=sampleStride) {      int argb=bitmap.getPixel(x,y);      int alpha=0xFF & (argb >> 24);      if (alpha < 0x80) {        continue;      }      int rgb=argb | 0xFF000000;      Color.colorToHSV(rgb,hsv);      int hue=(int)hsv[0];      if (hue < 0 || hue >= hueScoreHistogram.length) {        continue;      }      float score=hsv[1] * hsv[2];      hueScoreHistogram[hue]+=score;      if (hueScoreHistogram[hue] > highScore) {        highScore=hueScoreHistogram[hue];        bestHue=hue;      }    }  }  SparseArray<Float> rgbScores=new SparseArray<Float>();  int bestColor=0xff000000;  highScore=-1;  for (int y=0; y < height; y+=sampleStride) {    for (int x=0; x < width; x+=sampleStride) {      int rgb=bitmap.getPixel(x,y) | 0xff000000;      Color.colorToHSV(rgb,hsv);      int hue=(int)hsv[0];      if (hue == bestHue) {        float s=hsv[1];        float v=hsv[2];        int bucket=(int)(s * 100) + (int)(v * 10000);        float score=s * v;        Float oldTotal=rgbScores.get(bucket);        float newTotal=oldTotal == null ? score : oldTotal + score;        rgbScores.put(bucket,newTotal);        if (newTotal > highScore) {          highScore=newTotal;          bestColor=rgb;        }      }    }  }  return bestColor;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:11.971 -0500",hash_original_method="3BE812D13F4292433A7C6B8D5ADAC2E8",hash_generated_method="1EAD57D36840D6CAEA4FEE7766AE3376") public boolean isStale(){  assertOpen();  try {    this.inbuffer.isDataAvailable(1);    return false;  } catch (  IOException ex) {    return true;  }}  }
class C{  protected SVGOMForeignObjectElement(){}  }
class C{  public boolean isSupportedLookAndFeel(){  return true;}  }
class C{  public EntityCreate(Location location,BaseEntity state,Entity entity){  checkNotNull(location);  checkNotNull(state);  checkNotNull(entity);  this.location=location;  this.state=state;  this.entity=entity;}  }
class C{  @Deprecated public boolean allowThreadSuspension(boolean b){  this.vmAllowSuspension=b;  if (!b) {    VM.unsuspendSomeThreads();  }  return true;}  }
class C{  public boolean isLowerOrEqual(final Priority other){  return m_priority <= other.getValue();}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static boolean supportsMultipleUsers(){  return getMaxSupportedUsers() > 1;}  }
class C{  public static Collection<File> collectFiles(final Collection<File> in,final FileFilter filter){  if (in == null)   throw new IllegalArgumentException();  if (filter == null)   throw new IllegalArgumentException();  final Collection<File> out=new LinkedList<File>();  for (  File file : in) {    if (file.isDirectory()) {      if (log.isInfoEnabled())       log.info("Reading directory: " + file);      final File[] files=file.listFiles(filter);      out.addAll(collectFiles(Arrays.asList(files),filter));    } else {      if (filter.accept(file)) {        out.add(file);      }    }  }  return out;}  }
class C{  private static Object copyArrayGrow1(Object array,Class newArrayComponentType){  if (array != null) {    int arrayLength=Array.getLength(array);    Object newArray=Array.newInstance(array.getClass().getComponentType(),arrayLength + 1);    System.arraycopy(array,0,newArray,0,arrayLength);    return newArray;  }  return Array.newInstance(newArrayComponentType,1);}  }
class C{  public void print(Object s) throws IOException {  boolean align=needsAlign;  if (needsNewLine && !onNewLine) {    println();  }  if (align && !aligned) {    align();  }  if (needsSpace && !onNewLine && !aligned) {    out.write(' ');  }  needsSpace=false;  out.write(s.toString());  onNewLine=false;  aligned=false;}  }
class C{  public void insert(MyMap myMap){  if (!getMapNameList().contains(myMap.getMapName())) {    myMaps.add(myMap);    notifyItemInserted(getItemCount() - 1);  }}  }
class C{  public FileLoginConfig(String passwordFile){  Map<String,String> options;  if (passwordFile != null) {    options=new HashMap<String,String>(1);    options.put(PASSWORD_FILE_OPTION,passwordFile);  } else {    options=Collections.emptyMap();  }  entries=new AppConfigurationEntry[]{new AppConfigurationEntry(FILE_LOGIN_MODULE,AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,options)};}  }
class C{  public Tree<String> extractBestMaxRuleParse1(int start,int end,int state,List<String> sentence){  int cState=maxcChild[start][end][state];  if (cState == -1) {    return extractBestMaxRuleParse2(start,end,state,sentence);  } else {    List<Tree<String>> child=new ArrayList<Tree<String>>();    child.add(extractBestMaxRuleParse2(start,end,cState,sentence));    String stateStr=(String)tagNumberer.object(state);    if (stateStr.endsWith("^g"))     stateStr=stateStr.substring(0,stateStr.length() - 2);    totalUsedUnaries++;    int intermediateNode=grammar.getUnaryIntermediate((short)state,(short)cState);    if (intermediateNode > 0) {      List<Tree<String>> restoredChild=new ArrayList<Tree<String>>();      nTimesRestoredUnaries++;      String stateStr2=(String)tagNumberer.object(intermediateNode);      if (stateStr2.endsWith("^g"))       stateStr2=stateStr2.substring(0,stateStr2.length() - 2);      restoredChild.add(new Tree<String>(stateStr2,child));      return new Tree<String>(stateStr,restoredChild);    }    return new Tree<String>(stateStr,child);  }}  }
class C{  public DrawerBuilder withFireOnInitialOnClick(boolean fireOnInitialOnClick){  this.mFireInitialOnClick=fireOnInitialOnClick;  return this;}  }
class C{  @Override protected void initializeBounds(){  Rectangle screenBounds=getPreferences().getRectangle(PreferenceKeys.APP_WINDOW_BOUNDS);  if (screenBounds.width == -1 || screenBounds.height == -1) {    Rectangle fullViewBounds=Display.getCurrent().getPrimaryMonitor().getBounds();    screenBounds.width=fullViewBounds.width;    screenBounds.height=fullViewBounds.height;  }  getShell().setSize(screenBounds.width,screenBounds.height);  getShell().setLocation(screenBounds.x,screenBounds.y);}  }
class C{  public void showTextPropertyDialog(){  TextDialog dialog=new TextDialog(getSelectedText());  dialog.setLocationRelativeTo(null);  dialog.setVisible(true);}  }
class C{  @Override public boolean addAll(int index,Collection<? extends E> collection){  int s=size;  if (index > s || index < 0) {    throwIndexOutOfBoundsException(index,s);  }  Object[] newPart=collection.toArray();  int newPartSize=newPart.length;  if (newPartSize == 0) {    return false;  }  Object[] a=array;  int newSize=s + newPartSize;  if (newSize <= a.length) {    System.arraycopy(a,index,a,index + newPartSize,s - index);  } else {    int newCapacity=newCapacity(newSize - 1);    Object[] newArray=new Object[newCapacity];    System.arraycopy(a,0,newArray,0,index);    System.arraycopy(a,index,newArray,index + newPartSize,s - index);    array=a=newArray;  }  System.arraycopy(newPart,0,a,index,newPartSize);  size=newSize;  modCount++;  return true;}  }
class C{  public void fatal(String msg,Object arg0,Object arg1){  innerLog(Level.FATAL,null,msg,arg0,arg1,UNKNOWN_ARG,null);}  }
class C{  public static boolean isJME31(Project project){  EditableProperties properties=getProperties(project);  String jmeVersion=properties.getProperty("jme.project.version");  if ("3.1".equals(jmeVersion))   return true;  String javacClasspath=properties.getProperty("javac.classpath");  if (javacClasspath != null) {    for (    String[] s : libraries.values()) {      for (      String t : s) {        if (javacClasspath.contains(t))         return true;      }    }    for (    String s : libraries.keySet()) {      if (javacClasspath.contains(s))       return false;    }  }  logger.log(Level.WARNING,"Could not determine whether the Project {0} is a JME 3.1 project or not. Assuming: No.",ProjectUtils.getInformation(project).getDisplayName());  return false;}  }
class C{  public char skipTo(char to) throws JSONException {  char c;  try {    long startIndex=this.index;    long startCharacter=this.character;    long startLine=this.line;    this.reader.mark(1000000);    do {      c=this.next();      if (c == 0) {        this.reader.reset();        this.index=startIndex;        this.character=startCharacter;        this.line=startLine;        return c;      }    } while (c != to);  } catch (  IOException exception) {    throw new JSONException(exception);  }  this.back();  return c;}  }
class C{  public int size(){  if (size == 0)   return 0;  expungeStaleEntries();  return size;}  }
class C{  public void copyFromGeometry3D(Geometry3D geom){  this.mNumIndices=geom.getNumIndices();  this.mNumVertices=geom.getNumVertices();  this.mVertexBufferInfo=geom.getVertexBufferInfo();  this.mIndexBufferInfo=geom.getIndexBufferInfo();  this.mTexCoordBufferInfo=geom.getTexCoordBufferInfo();  this.mOnlyShortBufferSupported=geom.areOnlyShortBuffersSupported();  if (mColors == null)   this.mColorBufferInfo=geom.getColorBufferInfo();  this.mNormalBufferInfo=geom.getNormalBufferInfo();  this.mOriginalGeometry=geom;  this.mHasNormals=geom.hasNormals();  this.mHasTextureCoordinates=geom.hasTextureCoordinates();}  }
class C{  private void doStepFlying(Tuple3d targetLocation,boolean checkBoundaries,boolean checkHive){  nectarLoad-=nectarForOneStep;  if (targetLocation != null) {    headTo(targetLocation);  }  if (getState() != State.foraging)   foragingCosts+=nectarForOneStep;  if (nectarLoad < 0) {    setState(State.dead);    return;  }  boolean hiveCollision=checkHive & hive.isInSphere(this);  if (hiveCollision) {    turnBy(Math.toRadians(180 + (r.nextDouble() * 10) - 5),Math.toRadians(180 + (r.nextDouble() * 10) - 5));    forward();    return;  } else {    if (checkBoundaries) {      boolean boundCollisionXY=getSimulation().isOutsideXY(this);      boolean boundCollisionZ=is3dMode() & getSimulation().isOutsideZ(this);      double turnAzimuth=0.0d;      double turnElevation=0.0d;      if (boundCollisionXY)       turnAzimuth=Math.toRadians(180 + (r.nextDouble() * 10) - 5);      if (boundCollisionZ)       turnElevation=Math.toRadians(180 + (r.nextDouble() * 10) - 5);      if (boundCollisionXY | boundCollisionZ) {        turnBy(turnAzimuth,turnElevation);        forward();        return;      }    }  }  if (getSimulation().avoidObstacles) {    Vector3d av=computeAvoidance(targetLocation);    av.scale(5);    av.add(getVelocityVector());    av.normalize();    forward(av);  } else {    forward();  }}  }
class C{  public boolean IsEmbedded(){  return widthIsEmbedded;}  }
class C{  public void putFloat(String key,float value){  editor.putFloat(key,value);  editor.apply();}  }
class C{  private void handleEmptyAxis(T firstLeft,T firstRight){  if (firstLeft == null) {    mLeftAxisMax=mRightAxisMax;    mLeftAxisMin=mRightAxisMin;  } else   if (firstRight == null) {    mRightAxisMax=mLeftAxisMax;    mRightAxisMin=mLeftAxisMin;  }}  }
class C{  public boolean match(VariableDeclarationStatement node,Object other){  if (!(other instanceof VariableDeclarationStatement)) {    return false;  }  VariableDeclarationStatement o=(VariableDeclarationStatement)other;  int level=node.getAST().apiLevel;  if (level == AST.JLS2_INTERNAL) {    if (node.getModifiers() != o.getModifiers()) {      return false;    }  }  if (level >= AST.JLS3) {    if (!safeSubtreeListMatch(node.modifiers(),o.modifiers())) {      return false;    }  }  return safeSubtreeMatch(node.getType(),o.getType()) && safeSubtreeListMatch(node.fragments(),o.fragments());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void useDefaultVisual(){  m_visual.loadIcons(BeanVisual.ICON_PATH + "DefaultGraph.gif",BeanVisual.ICON_PATH + "DefaultGraph_animated.gif");}  }
class C{  public BumpMap(RenderedImage texture,double surfaceScale,double scaleX,double scaleY){  this.texture=texture;  this.surfaceScaleX=surfaceScale * scaleX;  this.surfaceScaleY=surfaceScale * scaleY;  this.surfaceScale=surfaceScale;  this.scaleX=scaleX;  this.scaleY=scaleY;}  }
class C{  protected FunctionNode noneary(final SimpleNode node,final URI functionURI) throws VisitorException {  return new FunctionNode(functionURI,null,new ValueExpressionNode[]{});}  }
class C{  public boolean isUrl(String url){  return URL_VALIDATOR.isValid(url);}  }
class C{  public void writeHeaderPart(AnnotatedOutput out){  throwIfNotPrepared();  if (writeSize == -1) {    throw new RuntimeException("write size not yet set");  }  int sz=writeSize;  int offset=(sz == 0) ? 0 : getFileOffset();  String name=getName();  if (name == null) {    name="<unnamed>";  }  int spaceCount=15 - name.length();  char[] spaceArr=new char[spaceCount];  Arrays.fill(spaceArr,' ');  String spaces=new String(spaceArr);  if (out.annotates()) {    out.annotate(4,name + "_size:" + spaces+ Hex.u4(sz));    out.annotate(4,name + "_off: " + spaces+ Hex.u4(offset));  }  out.writeInt(sz);  out.writeInt(offset);}  }
class C{  @Override public String toString(){  Enumeration<String> enm;  StringBuffer result;  result=new StringBuffer();  enm=elements();  while (enm.hasMoreElements()) {    result.append(enm.nextElement().toString());    if (enm.hasMoreElements()) {      result.append(",");    }  }  return result.toString();}  }
class C{  @Deprecated public Task<VolumeRestRep> migrate(MigrationParam input){  return postTask(input,PathConstants.MIGRATION_URL);}  }
class C{  private static void parseHandlers(PsiBuilder builder,GroovyParser parser){  PsiBuilder.Marker catchMarker=builder.mark();  ParserUtils.getToken(builder,GroovyTokenTypes.kCATCH);  if (!ParserUtils.getToken(builder,GroovyTokenTypes.mLPAREN,GroovyBundle.message("lparen.expected"))) {    catchMarker.done(GroovyElementTypes.CATCH_CLAUSE);    return;  }  if (!ParameterDeclaration.parseCatchParameter(builder,parser)) {    builder.error(GroovyBundle.message("param.expected"));  }  if (!ParserUtils.getToken(builder,GroovyTokenTypes.mRPAREN,GroovyBundle.message("rparen.expected"))) {    catchMarker.done(GroovyElementTypes.CATCH_CLAUSE);    return;  }  PsiBuilder.Marker warn=builder.mark();  ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);  if (!GroovyTokenTypes.mLCURLY.equals(builder.getTokenType()) || !OpenOrClosableBlock.parseOpenBlock(builder,parser)) {    warn.rollbackTo();    builder.error(GroovyBundle.message("lcurly.expected"));  } else {    warn.drop();  }  catchMarker.done(GroovyElementTypes.CATCH_CLAUSE);  if (builder.getTokenType() == GroovyTokenTypes.kCATCH || ParserUtils.lookAhead(builder,GroovyTokenTypes.mNLS,GroovyTokenTypes.kCATCH)) {    ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);    parseHandlers(builder,parser);  }}  }
class C{  public RecordsMatcher<T> anyOfThem(){  return new RecordsMatcher<>(MatcherCombiner.any(matchers));}  }
class C{  public boolean contains(IHypercube h) throws IllegalArgumentException {  if (dimension != h.dimensionality()) {    throw new IllegalArgumentException("Unable to check containment for hypercubes of different dimensions.");  }  for (int i=1; i <= dimension; i++) {    double innerLeft=h.getLeft(i);    double innerRight=h.getRight(i);    if (getLeft(i) <= innerLeft && innerLeft <= innerRight && innerRight <= getRight(i)) {    } else {      return false;    }  }  return true;}  }
class C{  public final void addFail(Position pos,Move m,int depth){  int p=pos.getPiece(m.from);  int cnt=depth;  countFail[p][m.to]+=cnt;  score[p][m.to]=-1;}  }
class C{  public Boolean isWakeOnLanCapable(){  return wakeOnLanCapable;}  }
class C{  public int findDuplicate1(int[] nums){  int slow=0;  int fast=0;  while (true) {    slow=nums[slow];    fast=nums[nums[fast]];    if (slow == fast)     break;  }  int find=0;  while (slow != find) {    slow=nums[slow];    find=nums[find];  }  return find;}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  out.defaultWriteObject();  doWriteObject(out);}  }
class C{  public ViewChangeEntity(int x,int y){  this.x=x;  this.y=y;  setResistance(0);}  }
class C{  public @NonNull JsRuntimeReplFactoryBuilder importPackage(@NonNull String packageName){  mPackages.add(packageName);  return this;}  }
class C{  public static ClientId fromStream(InputStream stream) throws IOException {  Preconditions.checkNotNull(stream);  JsonObjectParser parser=new JsonObjectParser(OAuth2Utils.JSON_FACTORY);  GenericJson parsedJson=parser.parseAndClose(stream,StandardCharsets.UTF_8,GenericJson.class);  return fromJson(parsedJson);}  }
class C{  public boolean isDefiniteClause(){  return cachedPositiveSymbols.size() == 1;}  }
class C{  public Set adviseRequiresTwoMessages(){  return adviseNotInitialized();}  }
class C{  public String addSymbol(char[] buffer,int offset,int length){  int bucket=hash(buffer,offset,length) % fTableSize;  OUTER:   for (Entry entry=fBuckets[bucket]; entry != null; entry=entry.next) {    if (length == entry.characters.length) {      for (int i=0; i < length; i++) {        if (buffer[offset + i] != entry.characters[i]) {          continue OUTER;        }      }      return entry.symbol;    }  }  Entry entry=new Entry(buffer,offset,length,fBuckets[bucket]);  fBuckets[bucket]=entry;  return entry.symbol;}  }
class C{  public Duration toStandardDuration(){  long days=getValue();  return new Duration(days * DateTimeConstants.MILLIS_PER_DAY);}  }
class C{  public static String fromTag(ListTag<Tag> tag){  StringBuilder builder=new StringBuilder();  builder.append(ARRAY_START);  boolean start=true;  for (  Tag value : tag.getValue()) {    if (start) {      start=false;    } else {      builder.append(ELEMENT_SEPERATOR);    }    builder.append(fromGenericTag(value));  }  builder.append(ARRAY_END);  return builder.toString();}  }
class C{  public static boolean isSuccessfulTLS12Connection(){  try {    SSLContext sslContext=SSLContext.getInstance("TLS");    sslContext.init(null,null,null);    HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());    URL url=new URL("https://tlstest.paypal.com");    HttpsURLConnection httpsConnection=(HttpsURLConnection)url.openConnection();    httpsConnection.connect();    BufferedReader reader=new BufferedReader(new InputStreamReader(httpsConnection.getInputStream()));    StringBuilder body=new StringBuilder();    while (reader.ready()) {      body.append(reader.readLine());    }    httpsConnection.disconnect();    if (body.toString().equals("PayPal_Connection_OK")) {      return true;    }  } catch (  NoSuchAlgorithmException e) {  }catch (  UnknownHostException e) {  }catch (  IOException e) {  }catch (  KeyManagementException e) {  }  return false;}  }
class C{  public Prepared prepare(String sql){  return prepare(sql,false);}  }
class C{  public double calcAngleWithRatios(Entry p1,Entry p2){  float dx=p2.getXIndex() * mDeltaRatio - p1.getXIndex() * mDeltaRatio;  float dy=p2.getVal() * mScaleRatio - p1.getVal() * mScaleRatio;  double angle=Math.atan2(dy,dx) * 180.0 / Math.PI;  return angle;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public long startTime(){  return startTime;}  }
class C{  public void registerProxy(Proxy proxy){  model.registerProxy(proxy);}  }
class C{  public char previous(){  if (pos > 0) {    pos--;    return chars[pos];  } else {    pos=0;    return DONE;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element docElem;  NodeList elementList;  doc=(Document)load("staffNS",false);  docElem=doc.getDocumentElement();  elementList=docElem.getElementsByTagNameNS("http://www.nist.gov","nomatch");  assertSize("size",0,elementList);}  }
class C{  public static TextHitInfo beforeOffset(int offset){  return new TextHitInfo(offset - 1,false);}  }
class C{  protected static String extractSecretAccessKey(String s3uri){  return s3uri.substring(s3uri.indexOf(':',s3uri.indexOf("://") + 1) + 1,s3uri.indexOf('@'));}  }
class C{  public static ccColor4F ccc4FFromccc4B(ccColor4B c){  return new ccColor4F(c.r / 255.f,c.g / 255.f,c.b / 255.f,c.a / 255.f);}  }
class C{  SignedMutableBigInteger(int val){  super(val);}  }
class C{  private static boolean checkCommandLine(CommandLine commandLine,boolean hasInputArguments){  if (commandLine.getArgList().size() == 2 || (hasInputArguments && commandLine.getArgList().size() == 1)) {    return true;  }  System.out.println("Invalid number of arguments\n");  return false;}  }
class C{  public void collectSubstitutes(Scope scope,TypeBinding actualType,InferenceContext inferenceContext,int constraint){  if ((this.tagBits & TagBits.HasTypeVariable) == 0)   return;  if (actualType == TypeBinding.NULL)   return;switch (actualType.kind()) {case Binding.ARRAY_TYPE:    int actualDim=actualType.dimensions();  if (actualDim == this.dimensions) {    this.leafComponentType.collectSubstitutes(scope,actualType.leafComponentType(),inferenceContext,constraint);  } else   if (actualDim > this.dimensions) {    ArrayBinding actualReducedType=this.environment.createArrayType(actualType.leafComponentType(),actualDim - this.dimensions);    this.leafComponentType.collectSubstitutes(scope,actualReducedType,inferenceContext,constraint);  }break;case Binding.TYPE_PARAMETER:break;}}  }
class C{  public void validateIdentityStatements(){  if (method.isAbstract())   return;  Body body=method.getActiveBody();  Chain<Unit> units=body.getUnits().getNonPatchingChain();  boolean foundNonThisOrParamIdentityStatement=false;  boolean firstStatement=true;  for (  Unit unit : units) {    if (unit instanceof IdentityStmt) {      IdentityStmt identityStmt=(IdentityStmt)unit;      if (identityStmt.getRightOp() instanceof ThisRef) {        if (method.isStatic()) {          throw new RuntimeException("@this-assignment in a static method!");        }        if (!firstStatement) {          throw new RuntimeException("@this-assignment statement should precede all other statements");        }      } else       if (identityStmt.getRightOp() instanceof ParameterRef) {        if (foundNonThisOrParamIdentityStatement) {          throw new RuntimeException("@param-assignment statements should precede all non-identity statements");        }      } else {        foundNonThisOrParamIdentityStatement=true;      }    } else {      foundNonThisOrParamIdentityStatement=true;    }    firstStatement=false;  }}  }
class C{  public Hashtable readFault() throws IOException {  expectStartTag("fault");  Hashtable map=new Hashtable();  while (parseTag()) {    peekTag=true;    Object key=readObject(null);    Object value=readObject(null);    if (key != null && value != null)     map.put(key,value);  }  if (!sbuf.toString().equals("fault"))   throw new BurlapProtocolException("expected </fault>");  return map;}  }
class C{  private Unit insertGotoAfter(Unit node,Unit target){  Unit newGoto=Jimple.v().newGotoStmt(target);  body.getUnits().insertAfter(newGoto,node);  return newGoto;}  }
class C{  public void dischargeItem(ItemStack aStack){  increaseStoredEnergyUnits(GT_ModHandler.dischargeElectricItem(aStack,(int)Math.min(Integer.MAX_VALUE,getEUCapacity() - getStoredEU()),(int)Math.min(Integer.MAX_VALUE,mMetaTileEntity.getInputTier()),false,false,false),true);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] parameters=getParameter();  for (  ProcessInfoParameter para : parameters) {    String name=para.getParameterName();    if (para.getParameter() == null)     ; else     if (name.equals("IsImportOnlyNoErrors"))     m_IsImportOnlyNoErrors="Y".equals(para.getParameter()); else     if (name.equals("DeleteOldImported"))     m_DeleteOldImported="Y".equals(para.getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public DSASigner(DSAKCalculator kCalculator){  this.kCalculator=kCalculator;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public void update(final Observable o,final Object arg){  if (!SwingUtilities.isEventDispatchThread()) {    SwingUtilities.invokeLater(null);    return;  } else {    loadAll();    layoutComponents();  }}  }
class C{  public boolean blockInteract(GlowPlayer player,GlowBlock block,BlockFace face,Vector clickedLoc){  return false;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.VARIABLE_DECLARATION_CONTAINER__VAR_DECLS_OR_BINDINGS:    getVarDeclsOrBindings().clear();  getVarDeclsOrBindings().addAll((Collection<? extends VariableDeclarationOrBinding>)newValue);return;case N4JSPackage.VARIABLE_DECLARATION_CONTAINER__VAR_STMT_KEYWORD:setVarStmtKeyword((VariableStatementKeyword)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static void dispose(){  disposeColors();  disposeImages();  disposeFonts();  disposeCursors();}  }
class C{  private void useGemFirePropertiesFileInTemporaryFolder(final String fileName,final Properties gemfireProperties) throws Exception {  File propertiesFile=new File(this.temporaryFolder.getRoot().getCanonicalPath(),fileName);  System.setProperty(DistributedSystem.PROPERTIES_FILE_PROPERTY,propertiesFile.getCanonicalPath());  gemfireProperties.store(new FileWriter(propertiesFile,false),this.testName.getMethodName());  assertThat(propertiesFile.isFile()).isTrue();  assertThat(propertiesFile.exists()).isTrue();}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    if (!useOneShotPreviewCallback) {      camera.setPreviewCallback(null);    }    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public MenuLockLayer(){  this(null,0);}  }
class C{  public void render(DrawContext dc){  if (dc.getFrameTimeStamp() != this.frameNumber) {    if (this.isAutoScrolling()) {      long now=System.currentTimeMillis();      if (now > this.nextAutoScroll) {        int delay=this.getAutoScrollDelay();        this.scroll(this.autoScrollIncrement);        dc.setRedrawRequested(delay);        this.nextAutoScroll=now + delay;      }    }    this.computeBounds();    this.frameNumber=dc.getFrameTimeStamp();  }  if (!this.canDrawInBounds())   return;  if (dc.isPickingMode()) {    this.doPick(dc);  } else {    this.draw(dc);  }}  }
class C{  public void removeCapabilitiesListener2(ContactId contact,ICapabilitiesListener listener) throws RemoteException {  if (contact == null) {    throw new ServerApiIllegalArgumentException("contact must not be null!");  }  if (listener == null) {    throw new ServerApiIllegalArgumentException("listener must not be null!");  }  try {synchronized (mLock) {      mCapabilitiesBroadcaster.removeContactCapabilitiesListener(contact,listener);    }  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  private void startServer(Future<Void> startFuture,Router mainRouter,HttpServerOptions options){  vertx.createHttpServer(options).requestHandler(null).listen(null);}  }
class C{  private void crop(){  if (count != data.length) {    data=PApplet.subset(data,0,count);  }}  }
class C{  @GET @Controller @Produces("text/html;charset=utf-8") @Path("view1/{id}") public String view1(@PathParam("id") String id){  book.setId(id);  book.setTitle("Some title");  book.setAuthor("Some author");  book.setIsbn("Some ISBN");  return "book.jsp";}  }
class C{  @Override public Boolean hexists(final byte[] key,final byte[] field){  checkIsInMultiOrPipeline();  client.hexists(key,field);  return client.getIntegerReply() == 1;}  }
class C{  protected void initContextLoaderListener(ServletContext servletContext){  AnnotationConfigWebApplicationContext contextLoaderListenerContext=new AnnotationConfigWebApplicationContext();  ApplicationContextHolder.setApplicationContext(contextLoaderListenerContext);  contextLoaderListenerContext.register(CoreSpringModuleConfig.class,DaoSpringModuleConfig.class,DaoEnvSpringModuleConfig.class,ServiceSpringModuleConfig.class,ServiceEnvSpringModuleConfig.class,UiSpringModuleConfig.class,UiEnvSpringModuleConfig.class,RestSpringModuleConfig.class,AppSpringModuleConfig.class);  servletContext.addListener(new ContextLoaderListener(contextLoaderListenerContext));}  }
class C{  public FasDeterministic(Graph graph,IndependenceTest test){  this.graph=graph;  this.test=test;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @SuppressWarnings("unused") @Subscribe public void onEvent(UpdateIsReadyToInstallEvent event){  final ContentConfig newContentConfig=event.applicationConfig().getContentConfig();  Log.d("CHCP","Update is ready for installation: " + newContentConfig.getReleaseVersion());  pluginInternalPrefs.setReadyForInstallationReleaseVersionName(newContentConfig.getReleaseVersion());  pluginInternalPrefsStorage.storeInPreference(pluginInternalPrefs);  PluginResult jsResult=PluginResultHelper.pluginResultFromEvent(event);  if (downloadJsCallback != null) {    downloadJsCallback.sendPluginResult(jsResult);    downloadJsCallback=null;  }  sendMessageToDefaultCallback(jsResult);  if (chcpXmlConfig.isAutoInstallIsAllowed() && newContentConfig.getUpdateTime() == UpdateTime.NOW) {    installUpdate(null);  }}  }
class C{  public final DD subtract(DD y){  return add(y.negate());}  }
class C{  private static void addOID(ObjectIdentifier oid){  int[] newOid=oid.getOid();  int index=hashIntArray(newOid) % CAPACITY;  ObjectIdentifier[] list=KNOWN_OIDS[index];  int i=0;  for (; list[i] != null; i++) {    if (Arrays.equals(newOid,list[i].getOid())) {      throw new Error("ObjectIdentifier: invalid static initialization; " + "duplicate OIDs: " + oid.getName() + " "+ list[i].getName());    }  }  if (i == (CAPACITY - 1)) {    throw new Error("ObjectIdentifier: invalid static initialization; " + "small OID pool capacity");  }  list[i]=oid;}  }
class C{  private boolean isInterOrg(MAcctSchema as){  MAcctSchemaElement elementorg=as.getAcctSchemaElement(MAcctSchemaElement.ELEMENTTYPE_Organization);  if (elementorg == null || !elementorg.isBalanced()) {    return false;  }  if (m_receiptLine != null && m_invoiceLine != null && m_receiptLine.getAD_Org_ID() != m_invoiceLine.getAD_Org_ID())   return true;  return false;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFlowParaElement(prefix,(AbstractDocument)doc);}  }
class C{  protected void configure(CheMojo mojo,File baseDir) throws IllegalAccessException {  this.rule.setVariableValueToObject(mojo,"srcJavaFolder",new File(baseDir,"src" + File.separator + "main"+ File.separator+ "java"));  this.rule.setVariableValueToObject(mojo,"cheFolder",new File(baseDir,"src" + File.separator + "main"+ File.separator+ "che"));  this.rule.setVariableValueToObject(mojo,"ymlFile",new File(baseDir,"che-plugin.yml"));  this.rule.setVariableValueToObject(mojo,"destFile",new File(baseDir,"assembly-test.zip"));}  }
class C{  public PopulationPlotter(ExampleSet exampleSet,int plotGenerations,boolean setDrawRange,boolean drawDominated){  this.exampleSet=exampleSet;  this.plotGenerations=plotGenerations;  this.setDrawRange=setDrawRange;  this.drawDominated=drawDominated;}  }
class C{  public boolean contains(V vector){  for (  CLIQUEInterval interval : intervals) {    final double value=vector.doubleValue(interval.getDimension());    if (interval.getMin() > value || value >= interval.getMax()) {      return false;    }  }  return true;}  }
class C{  public VectorClock(VectorClock other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetVersions()) {    List<ClockEntry> __this__versions=new ArrayList<ClockEntry>();    for (    ClockEntry other_element : other.versions) {      __this__versions.add(new ClockEntry(other_element));    }    this.versions=__this__versions;  }  this.timestamp=other.timestamp;}  }
class C{  public void calcMinTick(){  if (minData == 0.0)   minTick=0; else   minTick=Math.floor(minData / majorTick) * majorTick;}  }
class C{  protected void killRats(int numb){  int count=0;  logger.info("number of rats to kill: " + numb);  for (int i=0; i < numb; i++) {    String name=TPPQuestHelperFunctions.getRats().get(0).getName();    int kind=RAT_TYPES.indexOf(name);    killRat(TPPQuestHelperFunctions.getRats().get(0),count);    count++;    killedRats[kind]++;    rewardMoneys=rewardMoneys + RAT_REWARDS.get(kind);  }}  }
class C{  private static int[] filterBySetPos(int[] members,int[] bySetPos){  members=Util.uniquify(members);  IntSet iset=new IntSet();  for (  int pos : bySetPos) {    if (pos == 0) {      continue;    }    if (pos < 0) {      pos+=members.length;    } else {      --pos;    }    if (pos >= 0 && pos < members.length) {      iset.add(members[pos]);    }  }  return iset.toIntArray();}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.569 -0500",hash_original_method="79BA5457C24B1F2BABB705E59D2E5DE3",hash_generated_method="58F2E9D2C05DB337905336250F7AC6FA") public MessageChannel createRawMessageChannel(String sourceIpAddress,int sourcePort,Hop nextHop) throws UnknownHostException {  Host targetHost;  HostPort targetHostPort;  Iterator processorIterator;  MessageProcessor nextProcessor;  MessageChannel newChannel;  targetHost=new Host();  targetHost.setHostname(nextHop.getHost());  targetHostPort=new HostPort();  targetHostPort.setHost(targetHost);  targetHostPort.setPort(nextHop.getPort());  newChannel=null;  processorIterator=messageProcessors.iterator();  while (processorIterator.hasNext() && newChannel == null) {    nextProcessor=(MessageProcessor)processorIterator.next();    if (nextHop.getTransport().equalsIgnoreCase(nextProcessor.getTransport()) && sourceIpAddress.equals(nextProcessor.getIpAddress().getHostAddress()) && sourcePort == nextProcessor.getPort()) {      try {        newChannel=nextProcessor.createMessageChannel(targetHostPort);      } catch (      UnknownHostException ex) {        if (stackLogger.isLoggingEnabled())         stackLogger.logException(ex);        throw ex;      }catch (      IOException e) {        if (stackLogger.isLoggingEnabled())         stackLogger.logException(e);      }    }  }  return newChannel;}  }
class C{  void allowOffer(boolean allow){  offerButton.setEnabled(allow);}  }
class C{  private static Polygon calcDiceSleeve(Point[] dice){  int[] xpoint=new int[4];  int[] ypoint=new int[4];  xpoint[0]=dice[0].x;  xpoint[1]=dice[1].x;  xpoint[2]=dice[2].x;  xpoint[3]=dice[3].x;  ypoint[0]=dice[0].y;  ypoint[1]=dice[1].y;  ypoint[2]=dice[2].y;  ypoint[3]=dice[3].y;  return new Polygon(xpoint,ypoint,4);}  }
class C{  static private final int O_NULLS(final byte version){  if (version == VERSION0)   return O_SIZE + SIZEOF_SIZE;  return O_SIZE + SIZEOF_SIZE + SIZEOF_CAPACITY;}  }
class C{  public void loadScale(float x,float y,float z){  loadIdentity();  mMat[0]=x;  mMat[5]=y;  mMat[10]=z;}  }
class C{  protected void printDeclaration(Writer out,Document doc,String encoding) throws IOException {  out.write("<?xml version=\"1.0\"");  out.write(" encoding=\"" + encoding + "\"");  out.write("?>");  out.write(lineSeparator);}  }
class C{  public synchronized void notifyConnected(String title){  connectedServerTitles.add(title);  updateNotification(getString(R.string.notification_connected,title),null,false,false,false);}  }
class C{  private FlexibleNode readBranch(TaxonList taxonList) throws IOException, ImportException {  double length=0.0;  FlexibleNode branch;  if (nextCharacter() == '(') {    branch=readInternalNode(taxonList);  } else {    branch=readExternalNode(taxonList);  }  final String comment=getLastMetaComment();  if (comment != null) {    branch.setAttribute(COMMENT,comment);    clearLastMetaComment();  }  if (getLastDelimiter() == ':') {    length=readDouble(",():;");  }  branch.setLength(length);  return branch;}  }
class C{  public int decode(String data,OutputStream out) throws IOException {  byte[] bytes;  byte b1;  byte b2;  byte b3;  byte b4;  int length=0;  int end=data.length();  while (end > 0) {    if (!ignore(data.charAt(end - 1)))     break;    end--;  }  int i=0;  int finish=end - 4;  while (i < finish) {    while ((i < finish) && ignore(data.charAt(i)))     i++;    b1=decodingTable[data.charAt(i++)];    while ((i < finish) && ignore(data.charAt(i)))     i++;    b2=decodingTable[data.charAt(i++)];    while ((i < finish) && ignore(data.charAt(i)))     i++;    b3=decodingTable[data.charAt(i++)];    while ((i < finish) && ignore(data.charAt(i)))     i++;    b4=decodingTable[data.charAt(i++)];    out.write((b1 << 2) | (b2 >> 4));    out.write((b2 << 4) | (b3 >> 2));    out.write((b3 << 6) | b4);    length+=3;  }  if (data.charAt(end - 2) == padding) {    b1=decodingTable[data.charAt(end - 4)];    b2=decodingTable[data.charAt(end - 3)];    out.write((b1 << 2) | (b2 >> 4));    length+=1;  } else   if (data.charAt(end - 1) == padding) {    b1=decodingTable[data.charAt(end - 4)];    b2=decodingTable[data.charAt(end - 3)];    b3=decodingTable[data.charAt(end - 2)];    out.write((b1 << 2) | (b2 >> 4));    out.write((b2 << 4) | (b3 >> 2));    length+=2;  } else {    b1=decodingTable[data.charAt(end - 4)];    b2=decodingTable[data.charAt(end - 3)];    b3=decodingTable[data.charAt(end - 2)];    b4=decodingTable[data.charAt(end - 1)];    out.write((b1 << 2) | (b2 >> 4));    out.write((b2 << 4) | (b3 >> 2));    out.write((b3 << 6) | b4);    length+=3;  }  return length;}  }
class C{  public int updateRegionSignalStrength(final long id,final int accuracy){  mSingleArg[0]=String.valueOf(id);  final ContentValues values=new ContentValues();  values.put(BeaconContract.Beacon.SIGNAL_STRENGTH,accuracy);  return mDatabase.update(Tables.REGIONS,values,ID_SELECTION,mSingleArg);}  }
class C{  @Override public void update(Synapse synapse){  boolean sourceSpiking=synapse.getSource().getUpdateRule().isSpikingNeuron();  boolean targetSpiking=synapse.getTarget().getUpdateRule().isSpikingNeuron();  if (!sourceSpiking || !targetSpiking) {    return;  }  SpikingNeuronUpdateRule src=(SpikingNeuronUpdateRule)synapse.getSource().getUpdateRule();  SpikingNeuronUpdateRule tar=(SpikingNeuronUpdateRule)synapse.getTarget().getUpdateRule();  double delta_t, delta_w;  final double timeStep=synapse.getNetwork().getTimeStep();  delta_t=(src.getLastSpikeTime()) - tar.getLastSpikeTime();  if (synapse.getStrength() >= 0) {    double noise=(1 + ProbDistribution.NORMAL.nextRand(0,noiseVar));    if (delta_t < 0) {      calcW_plusTerm(synapse);      delta_w=timeStep * learningRate * (W_plus * Math.exp(delta_t / tau_plus))* (1 + noise);    } else     if (delta_t > 0) {      calcW_minusTerm(synapse);      delta_w=timeStep * learningRate * (-W_minus * Math.exp(-delta_t / tau_minus))* (1 + noise);    } else {      delta_w=0;    }    if (synapse.getTarget().isSpike()) {      synapse.setStrength(synapse.clip(synapse.getStrength() - (learningRate * 0.05)));    }  } else {    if (delta_t > 0) {      delta_w=timeStep * learningRate * -1.0* Math.exp(-delta_t / tau_plus);    } else     if (delta_t < 0) {      delta_w=timeStep * learningRate * 1.5* Math.exp(delta_t / tau_plus);    } else {      delta_w=0;    }    if (synapse.getSource().isSpike()) {      synapse.setStrength(synapse.clip(synapse.getStrength() + (learningRate * 0.05)));    }  }  if (synapse.getStrength() <= 0) {    if (delta_t > 0) {      delta_w=learningRate * 1.5 * Math.exp(-delta_t / tau_plus);    } else     if (delta_t < 0) {      delta_w=learningRate * -1 * Math.exp(delta_t / tau_minus);    } else {      delta_w=0;    }    synapse.setStrength(synapse.clip(synapse.getStrength() - delta_w));    if (synapse.getSource().isSpike()) {      synapse.setStrength(synapse.clip(synapse.getStrength() + learningRate * 0.2));    }  }}  }
class C{  public void unlock(){  verifyState();  cacheLocked.set(false);}  }
class C{  public void syncScrollBars(){  if (sourceImage == null) {    redraw();    return;  }  AffineTransform af=transform;  double sx=af.getScaleX(), sy=af.getScaleY();  double tx=af.getTranslateX(), ty=af.getTranslateY();  if (tx > 0)   tx=0;  if (ty > 0)   ty=0;  ScrollBar horizontal=getHorizontalBar();  horizontal.setIncrement(getClientArea().width / 100);  horizontal.setPageIncrement(getClientArea().width);  Rectangle imageBound=sourceImage.getBounds();  int cw=getClientArea().width, ch=getClientArea().height;  if (imageBound.width * sx > cw) {    horizontal.setMaximum((int)(imageBound.width * sx));    horizontal.setEnabled(true);    if (((int)-tx) > horizontal.getMaximum() - cw)     tx=-horizontal.getMaximum() + cw;  } else {    horizontal.setEnabled(false);    tx=(cw - imageBound.width * sx) / 2;  }  horizontal.setSelection((int)(-tx));  horizontal.setThumb(getClientArea().width);  ScrollBar vertical=getVerticalBar();  vertical.setIncrement(getClientArea().height / 100);  vertical.setPageIncrement(getClientArea().height);  if (imageBound.height * sy > ch) {    vertical.setMaximum((int)(imageBound.height * sy));    vertical.setEnabled(true);    if (((int)-ty) > vertical.getMaximum() - ch)     ty=-vertical.getMaximum() + ch;  } else {    vertical.setEnabled(false);    ty=(ch - imageBound.height * sy) / 2;  }  vertical.setSelection((int)(-ty));  vertical.setThumb(getClientArea().height);  af=AffineTransform.getScaleInstance(sx,sy);  af.preConcatenate(AffineTransform.getTranslateInstance(tx,ty));  transform=af;  redraw();}  }
class C{  public boolean popRewindMark(){  boolean top=mark_size.empty();  m_size=top ? m_emptyNodeCount : mark_size.pop();  m_exptype.setSize(m_size);  m_firstch.setSize(m_size);  m_nextsib.setSize(m_size);  m_prevsib.setSize(m_size);  m_parent.setSize(m_size);  m_elemIndexes=null;  int ds=top ? m_emptyNSDeclSetCount : mark_nsdeclset_size.pop();  if (m_namespaceDeclSets != null) {    m_namespaceDeclSets.setSize(ds);  }  int ds1=top ? m_emptyNSDeclSetElemsCount : mark_nsdeclelem_size.pop();  if (m_namespaceDeclSetElements != null) {    m_namespaceDeclSetElements.setSize(ds1);  }  m_data.setSize(top ? m_emptyDataCount : mark_data_size.pop());  m_chars.setLength(top ? m_emptyCharsCount : mark_char_size.pop());  m_dataOrQName.setSize(top ? m_emptyDataQNCount : mark_doq_size.pop());  return m_size == 0;}  }
class C{  public HandleMulticaster(Collection<Handle> handles){  this.handles=new LinkedList<Handle>(handles);}  }
class C{  public TaskProcess(TaskDef taskDef){  this.taskDef=taskDef;}  }
class C{  public void delete(T entity){  PMF.get().getPersistenceManager().deletePersistent(entity);}  }
class C{  private void displayTitle(Player player,String nameToShowUser,String msg){  try {    PacketSender.sendTitlePacket(player,"{\"text\":\"" + nameToShowUser + "\"}","{\"text\":\"" + msg + "\"}");  } catch (  Exception e) {    plugin.getLogger().log(Level.SEVERE,"Errors while trying to display achievement screen title. Is your server up-to-date? ",e);  }}  }
class C{  @Override public void onEnterAmbient(Bundle ambientDetails){  super.onEnterAmbient(ambientDetails);  mMapFragment.onEnterAmbient(ambientDetails);}  }
class C{  public TenantConfigurationValueBuilder<T> createdBy(final String createdBy){  this.configuration.createdBy=createdBy;  return this;}  }
class C{  private static String makeOptionString(Clusterer clusterer,boolean globalInfo){  StringBuffer optionsText=new StringBuffer("");  optionsText.append("\n\nGeneral options:\n\n");  optionsText.append("-h or -help\n");  optionsText.append("\tOutput help information.\n");  optionsText.append("-synopsis or -info\n");  optionsText.append("\tOutput synopsis for clusterer (use in conjunction " + " with -h)\n");  optionsText.append("-t <name of training file>\n");  optionsText.append("\tSets training file.\n");  optionsText.append("-T <name of test file>\n");  optionsText.append("\tSets test file.\n");  optionsText.append("-force-batch-training\n");  optionsText.append("\tAlways train the clusterer in batch mode, never incrementally.\n");  optionsText.append("-l <name of input file>\n");  optionsText.append("\tSets model input file.\n");  optionsText.append("-d <name of output file>\n");  optionsText.append("\tSets model output file.\n");  optionsText.append("-p <attribute range>\n");  optionsText.append("\tOutput predictions. Predictions are for " + "training file" + "\n\tif only training file is specified,"+ "\n\totherwise predictions are for the test file."+ "\n\tThe range specifies attribute values to be output"+ "\n\twith the predictions. Use '-p 0' for none.\n");  optionsText.append("-x <number of folds>\n");  optionsText.append("\tOnly Distribution Clusterers can be cross validated.\n");  optionsText.append("-s <random number seed>\n");  optionsText.append("\tSets the seed for randomizing the data in cross-validation\n");  optionsText.append("-c <class index>\n");  optionsText.append("\tSet class attribute. If supplied, class is ignored");  optionsText.append("\n\tduring clustering but is used in a classes to");  optionsText.append("\n\tclusters evaluation.\n");  if (clusterer instanceof Drawable) {    optionsText.append("-g <name of graph file>\n");    optionsText.append("\tOutputs the graph representation of the clusterer to the file.\n");  }  if (clusterer instanceof OptionHandler) {    optionsText.append("\nOptions specific to " + clusterer.getClass().getName() + ":\n\n");    Enumeration<Option> enu=((OptionHandler)clusterer).listOptions();    while (enu.hasMoreElements()) {      Option option=enu.nextElement();      optionsText.append(option.synopsis() + '\n');      optionsText.append(option.description() + "\n");    }  }  if (globalInfo) {    try {      String gi=getGlobalInfo(clusterer);      optionsText.append(gi);    } catch (    Exception ex) {    }  }  return optionsText.toString();}  }
class C{  public ServiceChangedException(){  super();}  }
class C{  private boolean isUserIdUnique(String userId){  if (userId == null) {    return false;  }  PlatformUser queryUser=new PlatformUser();  queryUser.setUserId(userId);  return (dm.find(queryUser) == null);}  }
class C{  public void resetOffset(){  resetOffset(false);}  }
class C{  public static long reverseByteOrder(long value,int numOfLowerBytesToInvert){  if (numOfLowerBytesToInvert < 1 || numOfLowerBytesToInvert > 8) {    throw new IllegalArgumentException("Wrong number of bytes [" + numOfLowerBytesToInvert + ']');  }  long result=0;  int offsetInResult=(numOfLowerBytesToInvert - 1) * 8;  while (numOfLowerBytesToInvert-- > 0) {    final long thebyte=value & 0xFF;    value>>>=8;    result|=(thebyte << offsetInResult);    offsetInResult-=8;  }  return result;}  }
class C{  public TIntIntMap buildOneDistanceTable(int stop){  int originVertex=streetVertexForStop.get(stop);  if (originVertex == -1) {    LOG.warn("Stop {} has not been linked to the street network, cannot build a distance table for it.",stop);    return null;  }  StreetRouter router=new StreetRouter(parentNetwork.streetLayer);  router.distanceLimitMeters=DISTANCE_TABLE_SIZE_METERS;  router.dominanceVariable=StreetRouter.State.RoutingVariable.DISTANCE_MILLIMETERS;  router.setOrigin(originVertex);  router.route();  return router.getReachedVertices();}  }
class C{  public void addDconst(double d){  if (d == 0.0 || d == 1.0)   addOpcode(14 + (int)d); else   addLdc2w(d);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void doConvert(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  final String baseURI=req.getRequestURL().toString();  final String contentType=req.getContentType();  if (log.isInfoEnabled())   log.info("Request body: " + contentType);  final RDFFormat requestBodyFormat=RDFFormat.forMIMEType(new MiniMime(contentType).getMimeType());  if (requestBodyFormat == null) {    buildAndCommitResponse(resp,HTTP_BADREQUEST,MIME_TEXT_PLAIN,"Content-Type not recognized as RDF: " + contentType);    return;  }  final RDFParserFactory rdfParserFactory=RDFParserRegistry.getInstance().get(requestBodyFormat);  if (rdfParserFactory == null) {    buildAndCommitResponse(resp,HTTP_INTERNALERROR,MIME_TEXT_PLAIN,"Parser factory not found: Content-Type=" + contentType + ", format="+ requestBodyFormat);    return;  }  final Graph g=new LinkedHashModel();  try {    final RDFParser rdfParser=rdfParserFactory.getParser();    rdfParser.setValueFactory(new ValueFactoryImpl());    rdfParser.setVerifyData(true);    rdfParser.setStopAtFirstError(true);    rdfParser.setDatatypeHandling(RDFParser.DatatypeHandling.IGNORE);    rdfParser.setRDFHandler(new StatementCollector(g));    rdfParser.parse(req.getInputStream(),baseURI);    sendGraph(req,resp,g);  } catch (  Throwable t) {    BigdataRDFServlet.launderThrowable(t,resp,null);  }}  }
class C{  public JobAttributes(int copies,DefaultSelectionType defaultSelection,DestinationType destination,DialogType dialog,String fileName,int maxPage,int minPage,MultipleDocumentHandlingType multipleDocumentHandling,int[][] pageRanges,String printer,SidesType sides){  setCopies(copies);  setDefaultSelection(defaultSelection);  setDestination(destination);  setDialog(dialog);  setFileName(fileName);  setMaxPage(maxPage);  setMinPage(minPage);  setMultipleDocumentHandling(multipleDocumentHandling);  setPageRanges(pageRanges);  setPrinter(printer);  setSides(sides);}  }
class C{  public SVGFeCompositeElementBridge(){}  }
class C{  public static void addSmelterBlastOre(String oreType){  NBTTagCompound toSend=new NBTTagCompound();  toSend.setString("oreType",oreType);  FMLInterModComms.sendMessage("ThermalExpansion","SmelterBlastOreType",toSend);}  }
class C{  public static double sum(TDoubleDoubleHashMap histogram){  TDoubleDoubleIterator it=histogram.iterator();  double sum=0;  for (int i=0; i < histogram.size(); i++) {    it.advance();    sum+=it.value();  }  return sum;}  }
class C{  private static boolean isForwardedImportedFunction(final INaviFunction function){  return (function != null) && CFunctionHelpers.isForwardableFunction(function) && (function.getForwardedFunctionAddress() != null);}  }
class C{  @Override protected void removeAt(int index){  _values[index]=0;  super.removeAt(index);}  }
class C{  void save(){  if (kSave == null) {    kSave=new byte[blockSize];  }  System.arraycopy(k,0,kSave,0,blockSize);}  }
class C{  protected String _becomeMaster(){  _logger.info("Attempting to become " + lockType + " master.");  Date now=new Date();  Date expiration=new Date(System.currentTimeMillis() + GLOBAL_LOCK_EXPIRATION_PERIOD_MS);  String lockNote=MessageFormat.format(GLOBAL_LOCK_NOTE_TEMPLATE,lockType,now,expiration);synchronized (_globalInterlockService) {    String key=_globalInterlockService.obtainLock(GLOBAL_LOCK_EXPIRATION_PERIOD_MS,lockType,lockNote);    _logger.info("Attempt to become {} master {}.",lockType,(key == null ? "did not succeed" : "succeeded"));    return key;  }}  }
class C{  public static double fractionOfFriendsPriority(double priority,int sharedFriends,int myFriends){  double trustMultiplier;  if (sharedFriends == 0 || myFriends == 0) {    trustMultiplier=EPSILON_TRUST;  } else {    trustMultiplier=sharedFriends / (double)myFriends;  }  return priority * trustMultiplier;}  }
class C{  public RandomProjectionLSH(List<V> vecs,int ints,int poolSize){  randProjMatrix=new NormalMatrix(ints * Integer.SIZE,vecs.get(0).length(),poolSize);  setUpVecs(vecs);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:14.514 -0400",hash_original_method="4316092F2544918F0321F7854295EA91",hash_generated_method="4316092F2544918F0321F7854295EA91") ConcurrentSkipListSet(ConcurrentNavigableMap<E,Object> m){  this.m=m;}  }
class C{  public boolean isShipment(){  return shipment;}  }
class C{  public long cnswap(){  return Long.parseLong(fields[36]);}  }
class C{  protected Collection(ElementKey<?,? extends Collection> key){  super(key);}  }
class C{  private void showOfflineMessage(){  if (webview != null) {    webview.setVisibility(View.GONE);  }  TextView offlineModeTv=(TextView)findViewById(R.id.offline_mode_message);  if (offlineModeTv != null) {    offlineModeTv.setVisibility(View.VISIBLE);  }}  }
class C{  public static String escapeSpecialChars(final String str){  return str.replaceAll("\\s\\s+|\\r\\n","<br/>").replaceAll("\'","\\\\'");}  }
class C{  private void addInterfence(int newReg,int oldReg){  newRegInterference.ensureCapacity(newReg + 1);  while (newReg >= newRegInterference.size()) {    newRegInterference.add(new BitIntSet(newReg + 1));  }  oldRegInterference.mergeInterferenceSet(oldReg,newRegInterference.get(newReg));}  }
class C{  @TargetApi(8) @Override public void onReceivedSslError(WebView view,SslErrorHandler handler,SslError error){  final String packageName=parentEngine.cordova.getActivity().getPackageName();  final PackageManager pm=parentEngine.cordova.getActivity().getPackageManager();  ApplicationInfo appInfo;  try {    appInfo=pm.getApplicationInfo(packageName,PackageManager.GET_META_DATA);    if ((appInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {      handler.proceed();      return;    } else {      super.onReceivedSslError(view,handler,error);    }  } catch (  NameNotFoundException e) {    super.onReceivedSslError(view,handler,error);  }}  }
class C{  private static String join(final List elements,final String token){  if ((elements != null) && (!elements.isEmpty())) {    StringBuffer buffer=new StringBuffer();    Iterator itElements=elements.iterator();    while (itElements.hasNext()) {      if (buffer.length() > 0) {        buffer.append(token);      }      buffer.append(itElements.next().toString());    }  }  return null;}  }
class C{  public IMouseState createNodeDraggedLeftState(final Node n,final MouseEvent event,final double xDist,final double yDist){  final CNodeDraggedLeftState<NodeType,EdgeType> state=new CNodeDraggedLeftState<NodeType,EdgeType>(this,m_graph,n,event,xDist,yDist);  m_factory.createNodeDraggedLeftAction().execute(state,event);  return state;}  }
class C{  public PbrpcConnectionException(){  super();}  }
class C{  @Override protected void sort(final int modelColumnIndex){  sorting=false;}  }
class C{  public static List<String> generateXVals(int from,int to){  List<String> xvals=new ArrayList<String>();  for (int i=from; i < to; i++) {    xvals.add("" + i);  }  return xvals;}  }
class C{  public EnhancedServer remoteConnection(String name,RemoteConnection.Consumer config){  return remoteConnection(null);}  }
class C{  public void createSubUsageScenario08() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.daysToMillis(15);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO08_PERUNIT_MONTH",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO08_PERUNIT_MONTH",serviceDetails,null,role);  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") - DateTimeHandling.daysToMillis(3);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO08_PERUNIT_MONTH",subDetails);}  }
class C{  public static byte[] decode(byte[] input,int offset,int len){  return Base64.decode(input,offset,len,BASE64_FLAG);}  }
class C{  public static String stripGenerics(String className){  String name=className;  if (name.contains("<")) {    name=name.substring(0,name.indexOf("<"));  }  if (name.contains("[")) {    name=name.substring(0,name.indexOf("["));  }  return name;}  }
class C{  protected boolean hasConcreteOverride(Method m0,JavaType implementedType){  final String name=m0.getName();  final Class<?>[] argTypes=m0.getParameterTypes();  for (JavaType curr=implementedType; (curr != null) && !curr.isJavaLangObject(); curr=curr.getSuperClass()) {    try {      Method effectiveMethod=curr.getRawClass().getDeclaredMethod(name,argTypes);      if (effectiveMethod != null && BeanUtil.isConcrete(effectiveMethod)) {        return true;      }    } catch (    NoSuchMethodException e) {    }  }  return false;}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  Set<RawProtein<HamapRawMatch>> rawMatches=rawMatchDAO.getProteinsByIdRange(stepInstance.getBottomProtein(),stepInstance.getTopProtein(),signatureLibraryRelease);  if (rawMatches.size() == 0) {    Long sequenceCout=stepInstance.getTopProtein() - stepInstance.getBottomProtein();    Utilities.verboseLog(10,"Zero matches found: on " + sequenceCout + " proteins stepinstance:"+ stepInstance.toString());    int waitTimeFactor=2;    if (!Utilities.isRunningInSingleSeqMode()) {      waitTimeFactor=Utilities.getWaitTimeFactorLogE(10 * sequenceCout.intValue()).intValue();    }    Utilities.sleep(waitTimeFactor * 1000);    rawMatches=rawMatchDAO.getProteinsByIdRange(stepInstance.getBottomProtein(),stepInstance.getTopProtein(),signatureLibraryRelease);    Utilities.verboseLog(10,"matches after waitTimeFactor: " + waitTimeFactor + " - "+ rawMatches.size());  }  int matchCount=0;  for (  final RawProtein rawProtein : rawMatches) {    matchCount+=rawProtein.getMatches().size();  }  Utilities.verboseLog(10," HAMAP: Retrieved " + rawMatches.size() + " proteins to post-process.");  Utilities.verboseLog(10," HAMAP: A total of " + matchCount + " raw matches.");  Map<String,RawProtein<HamapRawMatch>> proteinIdToRawProteinMap=new HashMap<String,RawProtein<HamapRawMatch>>(rawMatches.size());  for (  RawProtein<HamapRawMatch> rawMatch : rawMatches) {    proteinIdToRawProteinMap.put(rawMatch.getProteinIdentifier(),rawMatch);  }  Map<String,RawProtein<HamapRawMatch>> filteredMatches=postProcessor.process(proteinIdToRawProteinMap);  matchCount=0;  for (  final RawProtein rawProtein : filteredMatches.values()) {    matchCount+=rawProtein.getMatches().size();  }  Utilities.verboseLog(10," HAMAP: " + filteredMatches.size() + " proteins passed through post processing.");  Utilities.verboseLog(10," HAMAP: A total of " + matchCount + " matches PASSED.");  filteredMatchDAO.persist(filteredMatches.values());  Utilities.verboseLog(10," HAMAP: filteredMatches persisted");}  }
class C{  public SimpleCheckBoxItem(String label,BooleanProperty property,String tooltip){  this(label,property,tooltip,NO_DECORATOR);}  }
class C{  public static void rm(Path... locations) throws IOException {  LinkedHashMap<Path,Throwable> unremoved=rm(new LinkedHashMap<Path,Throwable>(),locations);  if (!unremoved.isEmpty()) {    StringBuilder b=new StringBuilder("Could not remove the following files (in the order of attempts):\n");    for (    Map.Entry<Path,Throwable> kv : unremoved.entrySet()) {      b.append("   ").append(kv.getKey().toAbsolutePath()).append(": ").append(kv.getValue()).append("\n");    }    throw new IOException(b.toString());  }}  }
class C{  public TemplateFile updateServiceTemplateFile(long templatefileId,String fileNo,String fileName,ActionRequest actionRequest,ActionResponse actionResponse,ServiceContext serviceContext) throws PortalException, SystemException {  UploadPortletRequest uploadPortletRequest=PortalUtil.getUploadPortletRequest(actionRequest);  long size=uploadPortletRequest.getSize("uploadedFile");  Date now=new Date();  TemplateFile template=templateFilePersistence.fetchByPrimaryKey(templatefileId);  FileEntry file=null;  if (Validator.isNotNull(template)) {    if (size > 0) {      try {        FileEntry entry=DLAppServiceUtil.getFileEntry(template.getFileEntryId());        if (Validator.isNotNull(entry)) {          DLAppServiceUtil.deleteFileEntry(template.getFileEntryId());        }        file=updateFileEntry(actionRequest,actionResponse);        if (Validator.isNotNull(file)) {          template.setModifiedDate(now);          template.setFileEntryId(file.getFileEntryId());          template.setFileName(fileName);          template.setFileNo(fileNo);          templateFilePersistence.update(template);        }      } catch (      Exception e) {        _log.info(e);      }    } else {      template.setModifiedDate(now);      template.setFileName(fileName);      template.setFileNo(fileNo);      templateFilePersistence.update(template);    }  }  return template;}  }
class C{  public void unregisterEventProcessor() throws InterruptedException, ExecutionException {  logWithHost(Level.INFO,"Stopping event processing");  if (this.partitionManager != null) {    try {      Future<?> stoppingPartitions=this.partitionManager.stopPartitions();      if (stoppingPartitions != null) {        stoppingPartitions.get();      }      if (EventProcessorHost.weOwnExecutor) {        if ((EventProcessorHost.executorRefCount <= 0) && EventProcessorHost.autoShutdownExecutor) {          EventProcessorHost.executorService.awaitTermination(10,TimeUnit.MINUTES);        }      }    } catch (    InterruptedException|ExecutionException e) {      logWithHost(Level.SEVERE,"Failure shutting down",e);      throw e;    }  }}  }
class C{  public void start(){  onEmit();  getBeginNode().emitOutput();}  }
class C{  public int lastByte(){  return lastByte;}  }
class C{  static public SerialSensorManager instance(){  if (_instance == null) {    _instance=new SerialSensorManager();  }  return _instance;}  }
class C{  public static <S>S fromSpec(Object context,String spec,final Class<S> type,final String[] packages) throws IllegalArgumentException, ClassNotFoundException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException {  return fromSpec(context,spec,type,packages,null);}  }
class C{  public ScriptAction(String name,NetworkPanel panel){  super(name);  this.scriptName=name;  this.networkPanel=panel;  this.network=panel.getNetwork();}  }
class C{  public GuacamoleUpstreamException(String message){  super(message);}  }
class C{  public void unload(){  setEstimatedMajorSpan(true);  removeAll();}  }
class C{  public Variable resolve(String path){  return alias.get(path);}  }
class C{  public SVGFeImageElementBridge(){}  }
class C{  public static PubSubServer startServer(String bindToHostName,int bindToPort) throws IOException {  PubSubServer server=new PubSubServer(bindToHostName,bindToPort);  server.start();  return server;}  }
class C{  private static <W>ContextEncodedProbBackoffLm<W> secondPassContextEncoded(final ConfigOptions opts,final LmReader<ProbBackoffPair,ArpaLmReaderCallback<ProbBackoffPair>> lmFile,final WordIndexer<W> wordIndexer,final FirstPassCallback<ProbBackoffPair> valueAddingCallback,final LongArray[] numNgramsForEachWord){  final boolean contextEncoded=true;  final boolean reversed=false;  final boolean compress=false;  final NgramMap<ProbBackoffPair> map=buildMapArpa(opts,lmFile,wordIndexer,valueAddingCallback,numNgramsForEachWord,contextEncoded,reversed,compress);  return new ContextEncodedProbBackoffLm<W>(map.getMaxNgramOrder(),wordIndexer,(ContextEncodedNgramMap<ProbBackoffPair>)map,opts);}  }
class C{  public Builder neighbors(boolean neighbors){  this.neighbors=neighbors;  return this;}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof PaintScaleLegend)) {    return false;  }  PaintScaleLegend that=(PaintScaleLegend)obj;  if (!this.scale.equals(that.scale)) {    return false;  }  if (!this.axis.equals(that.axis)) {    return false;  }  if (!this.axisLocation.equals(that.axisLocation)) {    return false;  }  if (this.axisOffset != that.axisOffset) {    return false;  }  if (this.stripWidth != that.stripWidth) {    return false;  }  if (this.stripOutlineVisible != that.stripOutlineVisible) {    return false;  }  if (!PaintUtilities.equal(this.stripOutlinePaint,that.stripOutlinePaint)) {    return false;  }  if (!this.stripOutlineStroke.equals(that.stripOutlineStroke)) {    return false;  }  if (!PaintUtilities.equal(this.backgroundPaint,that.backgroundPaint)) {    return false;  }  if (this.subdivisions != that.subdivisions) {    return false;  }  return super.equals(obj);}  }
class C{  public Row(DataInput is) throws IOException {  for (int i=is.readInt(); i > 0; i--) {    char ch=is.readChar();    Cell c=new Cell();    c.cmd=is.readInt();    c.cnt=is.readInt();    c.ref=is.readInt();    c.skip=is.readInt();    cells.put(ch,c);  }}  }
class C{  public final boolean contains(CharSequence s){  return toString().contains(s);}  }
class C{  @Override public void writeNdefTooSmall(int required,int capacity){  toast(getString(R.string.tagTooSmallMessage,required,capacity));}  }
class C{  public static final List<Integer> toIndicesSet(Instance x,int L){  List<Integer> y_list=new ArrayList<Integer>();  for (int j=0; j < L; j++) {    if (x.value(j) > 0.) {      y_list.add(j);    }  }  return y_list;}  }
class C{  public static boolean isValid(@Nullable CloseableReference<?> ref){  return ref != null && ref.isValid();}  }
class C{  public T caseGreaterOp_(GreaterOp_ object){  return null;}  }
class C{  public boolean validSystemNameConfig(String systemName,char type){  if (!validSystemNameFormat(systemName,type)) {    log.warn(systemName + " invalid; bad format");    return false;  }  return true;}  }
class C{  MyRectangle2D(double x,double y,double width,double height){  this.x=x;  this.y=y;  this.width=width;  this.height=height;}  }
class C{  private void checkDimension(DataPoint point){  if ((point.getDimension() > 1) && (point.getDimension() != dimensions)) {    throw new IllegalArgumentException("Error: Dataset is " + dimensions + " dimensional, added data is "+ point.getDimension()+ " dimensional");  }}  }
class C{  public <T>T connect(String collectionName,CollectionCallback<T> callback){  MongoClient client=null;  T t=null;  try {    client=getConnectedClient();    MongoDatabase database=client.getDatabase(databaseName);    MongoCollection<Document> collection=database.getCollection(collectionName);    t=callback.doInCollection(collection);  }  finally {    if (client != null) {      client.close();    }  }  return t;}  }
class C{  public static boolean isWhiteSpace(char ch[],int start,int length){  int end=start + length;  for (int s=start; s < end; s++) {    if (!isWhiteSpace(ch[s]))     return false;  }  return true;}  }
class C{  @Override public String validate(ILaunchConfiguration launchConfig,IJavaProject javaProject,List<String> programArgs,List<String> vmArgs) throws CoreException {  String gwtVersion=GwtVersionUtil.getProjectGwtVersion(javaProject);  List<String> errors=new ArrayList<String>();  if (GwtVersionUtil.isGwtVersionlessThan25(javaProject)) {    return null;  } else   if (GWTLaunchConstants.SUPERDEVMODE_LAUNCH_LEGACY_VERSIONS.contains(gwtVersion)) {    String error=validateSuperDevModeLinkerExists(javaProject,launchConfig);    if (error != null) {      errors.add(error);    }  }  if (errors.size() > 0) {    return ERRORS + " " + StringUtilities.join(errors,", ");  }  return null;}  }
class C{  public Builder textSizeRelative(float textSizeRelative){  this.textSizeRelative=textSizeRelative;  return this;}  }
class C{  public boolean shouldParseTimestamp(){  return shouldParseTimestamp;}  }
class C{  public void optimize(TupleExpr tupleExpr,Dataset dataset,BindingSet bindings){  tupleExpr.visit(new TreeSanitizer());}  }
class C{  public static void writeln(Address a){  writeln(a,true);}  }
class C{  protected ManagedResource createManagedResource(ManagedResourceRegistration reg) throws SolrException {  ManagedResource res=null;  try {    Constructor<? extends ManagedResource> ctor=reg.implClass.getConstructor(String.class,SolrResourceLoader.class,StorageIO.class);    res=ctor.newInstance(reg.resourceId,loader,storageIO);    res.loadManagedDataAndNotify(reg.observers);  } catch (  Exception e) {    String errMsg=String.format(Locale.ROOT,"Failed to create new ManagedResource %s of type %s due to: %s",reg.resourceId,reg.implClass.getName(),e);    throw new SolrException(ErrorCode.SERVER_ERROR,errMsg,e);  }  return res;}  }
class C{  public Enumeration children(){  if (!this.isExpanded()) {    return DefaultMutableTreeNode.EMPTY_ENUMERATION;  } else {    return super.children();  }}  }
class C{  public DeserializableList(final Deserializer deserializer,final ObjectDeserializer<T> elementDeserializer){  this(deserializer,elementDeserializer,DEFAULT_LABEL);}  }
class C{  public static org.oscm.internal.vo.VOBillingContact convertToUp(org.oscm.vo.VOBillingContact oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOBillingContact newVO=new org.oscm.internal.vo.VOBillingContact();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setEmail(oldVO.getEmail());  newVO.setCompanyName(oldVO.getCompanyName());  newVO.setAddress(oldVO.getAddress());  newVO.setOrgAddressUsed(oldVO.isOrgAddressUsed());  newVO.setId(oldVO.getId());  return newVO;}  }
class C{  @Override public int hashCode(){  return super.hashCode();}  }
class C{  @Override public int position(){  return m_position;}  }
class C{  @Redirect(method="onUpdate",at=@At(value="INVOKE",target=BLOCK_POS_GETY),require=2) private int checkHeightYReplace(BlockPos pos){  return MixinUtils.getReplacementY(worldObj,pos);}  }
class C{  protected void createVertices(Terrain terrain,ShapeData shapeData,boolean skipOuterBoundary){  for (  ExtrudedBoundaryInfo boundary : shapeData) {    if (boundary != shapeData.getOuterBoundaryInfo() || !skipOuterBoundary)     this.computeBoundaryVertices(terrain,boundary,shapeData.getReferencePoint());  }}  }
class C{  public boolean isIncompleteImage(){  return incomplete;}  }
class C{  public boolean previous(){  checkState();  if (mPlayerPlaylist.isEmpty()) {    return false;  }  PlaybackService.play(getContext(),mClientKey,mPlayerPlaylist.previous());  return true;}  }
class C{  public synchronized void start(){  if (D)   Log.d(TAG,"start");  if (mConnectThread != null) {    mConnectThread.cancel();    mConnectThread=null;  }  if (mConnectedThread != null) {    mConnectedThread.cancel();    mConnectedThread=null;  }  setState(STATE_LISTEN);  if (mSecureAcceptThread == null) {    mSecureAcceptThread=new AcceptThread(true);    mSecureAcceptThread.start();  }  if (mInsecureAcceptThread == null) {    mInsecureAcceptThread=new AcceptThread(false);    mInsecureAcceptThread.start();  }}  }
class C{  public FluidSlot(int max,int id){  MAX_FLUID=max;  fluidID=id;}  }
class C{  public HttpServer(int port) throws IOException {  this(port,false);}  }
class C{  public static RelationalOpExpression lt(Expression left,Expression right){  return new RelationalOpExpression(left,"<",right);}  }
class C{  public void rollbackMethodNull(String stepId) throws WorkflowException {  WorkflowStepCompleter.stepSucceded(stepId);}  }
class C{  private void update(){  String selected=combo.getSettingValue();  boolean shorten=selected.equals("keepShortened");  maxLength.setEnabled(shorten);  maxLengthLabel.setEnabled(shorten);  maxLengthLabel2.setEnabled(shorten);}  }
class C{  @DSComment("Data serialization/deserialization") @DSSafe(DSCat.SERIALIZATION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.480 -0500",hash_original_method="478D5F3649CF3C1019BEE6D895BDE15B",hash_generated_method="8EE2EE37DEC8E216CE30AD3A34E60139") public Intent putExtra(String name,Parcelable[] value){  mExtras.put(name,value);  return this;}  }
class C{  private void clinkstep3(DBIDRef id,DBIDArrayIter i,int n,WritableDBIDDataStore pi,WritableDoubleDataStore lambda,WritableDoubleDataStore m){  DBIDVar p_i=DBIDUtil.newVar();  for (i.seek(0); i.getOffset() < n; i.advance()) {    double l_i=lambda.doubleValue(i);    double m_i=m.doubleValue(i);    if (l_i < m_i) {      p_i.from(pi,i);      double mp_i=m.doubleValue(p_i);      if (mp_i < m_i) {        m.putDouble(p_i,m_i);      }      m.putDouble(i,Double.POSITIVE_INFINITY);    }  }}  }
class C{  public Set<PersonUser> findPersonUsersByName(String tenantName,SearchCriteria criteria,int limit) throws Exception {  return getService().findPersonUsersByName(tenantName,criteria,limit,this.getServiceContext());}  }
class C{  public static BigDecimal addFirstEntryAmount(BigDecimal initialValue,List<GenericValue> transactions,String fieldName,int decimals,int rounding) throws GenericEntityException {  if ((transactions != null) && (transactions.size() == 1)) {    GenericValue firstEntry=transactions.get(0);    if (firstEntry.get(fieldName) != null) {      BigDecimal valueToAdd=firstEntry.getBigDecimal(fieldName);      return initialValue.add(valueToAdd).setScale(decimals,rounding);    } else {      return initialValue;    }  } else {    return initialValue;  }}  }
class C{  public int arityOf(int fn){  if (fn == F_NOT)   return 1;  if (fn == F_NEG)   return 1;  return fn > F_NEG ? 3 : 2;}  }
class C{  private static boolean accepts(final String acceptHeader,final String toAccept){  final String[] acceptValues=acceptHeader.split("\\s*(,|;)\\s*");  Arrays.sort(acceptValues);  return Arrays.binarySearch(acceptValues,toAccept) > -1 || Arrays.binarySearch(acceptValues,toAccept.replaceAll("/.*$","/*")) > -1 || Arrays.binarySearch(acceptValues,"*/*") > -1;}  }
class C{  public GeoQuery(final GeoLocation location){  this.location=location;  ip=null;}  }
class C{  public float scale(float domainValue){  return mRangeA + (domainValue - mDomainA) * mScale;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  requestWindowFeature(Window.FEATURE_NO_TITLE);  setContentView(R.layout.activity_code_scan);  CameraManager.init(getApplication());  initControl();  hasSurface=false;  inactivityTimer=new InactivityTimer(this);  Bundle bundle=getIntent().getExtras();  if (bundle != null && bundle.getBoolean("isNoCute")) {    isNoCute=true;  } else {    isNoCute=false;  }}  }
class C{  protected boolean isDrawMinimized(){  return this.isMinimized() && !this.isAnimating();}  }
class C{  public static void writeToFileComplex_2D(String format,int n1,int n2,double[] x,String filename){  try {    BufferedWriter out=new BufferedWriter(new FileWriter(filename));    for (int i=0; i < n1; i++) {      for (int j=0; j < 2 * n2; j=j + 2) {        if ((Math.abs(x[i * 2 * n2 + j]) < 5e-5) && (Math.abs(x[i * 2 * n2 + j + 1]) < 5e-5)) {          if (x[i * 2 * n2 + j + 1] >= 0.0) {            out.write("0 + 0i\t");          } else {            out.write("0 - 0i\t");          }          continue;        }        if (Math.abs(x[i * 2 * n2 + j + 1]) < 5e-5) {          if (x[i * 2 * n2 + j + 1] >= 0.0) {            out.write(String.format(format,x[i * 2 * n2 + j]) + " + 0i\t");          } else {            out.write(String.format(format,x[i * 2 * n2 + j]) + " - 0i\t");          }          continue;        }        if (Math.abs(x[i * 2 * n2 + j]) < 5e-5) {          if (x[i * 2 * n2 + j + 1] >= 0.0) {            out.write("0 + " + String.format(format,x[i * 2 * n2 + j + 1]) + "i\t");          } else {            out.write("0 - " + String.format(format,-x[i * 2 * n2 + j + 1]) + "i\t");          }          continue;        }        if (x[i * 2 * n2 + j + 1] < 0) {          out.write(String.format(format,x[i * 2 * n2 + j]) + " - " + String.format(format,-x[i * 2 * n2 + j + 1])+ "i\t");          continue;        }        out.write(String.format(format,x[i * 2 * n2 + j]) + " + " + String.format(format,x[i * 2 * n2 + j + 1])+ "i\t");      }      out.newLine();    }    out.newLine();    out.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void endVisit(ParameterizedType node){}  }
class C{  public TradestrategyOrders findPositionOrdersByTradestrategyId(final Integer idTradestrategy) throws PersistentModelException {  TradestrategyOrders instance=m_tradestrategyHome.findPositionOrdersByTradestrategyId(idTradestrategy);  if (null == instance)   throw new PersistentModelException("Tradestrategy not found for id: " + idTradestrategy);  return instance;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.PROPERTY_NAME_VALUE_PAIR___GET_DEFINED_MEMBER:    return getDefinedMember();case N4JSPackage.PROPERTY_NAME_VALUE_PAIR___IS_VALID_NAME:  return isValidName();}return super.eInvoke(operationID,arguments);}  }
class C{  public void eof(){  eof=true;}  }
class C{  public Analyzer clear(){  data.clear();  return this;}  }
class C{  public static void verifyCGVolumesAttachedToSplitter(FunctionalAPIImpl impl,ConsistencyGroupUID groupUID) throws RecoverPointException {  ConsistencyGroupSettings groupSettings;  try {    groupSettings=impl.getGroupSettings(groupUID);    for (    ReplicationSetSettings replicationSet : groupSettings.getReplicationSetsSettings()) {      for (      UserVolumeSettings userVolume : replicationSet.getVolumes()) {        logger.info("Volume : " + RecoverPointUtils.getGuidBufferAsString(userVolume.getVolumeInfo().getRawUids(),false) + " is of type "+ userVolume.getVolumeType());        if (userVolume.getAttachedSplitters().isEmpty()) {          String volumeWWN=RecoverPointUtils.getGuidBufferAsString(userVolume.getVolumeInfo().getRawUids(),false);          logger.warn("Volume " + volumeWWN + " is not attached to any splitters");          Set<SplitterUID> splittersToAttachTo=getSplittersToAttachToForVolume(impl,userVolume.getClusterUID(),userVolume.getVolumeInfo().getVolumeID());          for (          SplitterUID splitterUID : splittersToAttachTo) {            SetVolumeParam volumeParam=new SetVolumeParam();            volumeParam.setShouldAttachAsClean(false);            volumeParam.setVolumeID(userVolume.getVolumeInfo().getVolumeID());            logger.info("Attaching volume " + volumeWWN + " to splitter"+ impl.getSplitterName(splitterUID));            impl.attachVolumeToSplitter(splitterUID,volumeParam);          }        } else {          for (          SplitterUID splitterUID : userVolume.getAttachedSplitters()) {            logger.info("Volume " + RecoverPointUtils.getGuidBufferAsString(userVolume.getVolumeInfo().getRawUids(),false) + " is attached to splitter "+ impl.getSplitterName(splitterUID));          }        }      }    }  } catch (  FunctionalAPIActionFailedException_Exception e) {    logger.error(e.getMessage(),e);    throw RecoverPointException.exceptions.exceptionGettingSettingsCG(e);  }catch (  FunctionalAPIInternalError_Exception e) {    logger.error(e.getMessage(),e);    throw RecoverPointException.exceptions.exceptionGettingSettingsCG(e);  }}  }
class C{  public static String generateAssignmentFields(String[] fields,String separator){  String[] fieldAssignment=new String[fields.length];  for (int i=0; i < fields.length; i++) {    fieldAssignment[i]="`" + fields[i] + "`=?";  }  return String.join(separator,fieldAssignment);}  }
class C{  public FactoryConfigurationError(){  this.exception=null;}  }
class C{  @Override public int hashCode(){  return 36;}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  @Override public Thread newThread(Runnable r){  Thread t=getWrappedFactory().newThread(r);  initializeThread(t);  return t;}  }
class C{  @RpcMethod public void detachISO(String vmId,boolean isDeleteFile,AsyncMethodCallback<Host.AsyncClient.detach_iso_call> handler) throws RpcException {  ensureClient();  DetachISORequest detachISORequest=new DetachISORequest(vmId);  detachISORequest.setDelete_file(isDeleteFile);  clientProxy.setTimeout(DETACH_ISO_TIMEOUT_MS);  logger.info("detach_iso vm {}, target {}, request {}",vmId,getHostIp(),detachISORequest);  try {    clientProxy.detach_iso(detachISORequest,handler);  } catch (  TException e) {    throw new RpcException(e.getMessage());  }}  }
class C{  public static String toStringUTF8(byte[] bytes,int offset,int length){  if (bytes == null) {    return null;  }  try {    return new String(bytes,offset,length,"UTF-8");  } catch (  UnsupportedEncodingException e) {    return null;  }catch (  IndexOutOfBoundsException e) {    return null;  }}  }
class C{  public TypeScriptAutoIndentStrategy(String partitioning,ITypeScriptFile project,ISourceViewer viewer){  fPartitioning=partitioning;  fProject=project;  fViewer=viewer;}  }
class C{  public EaseIn(){  this(DEFAULT_AMPLITUDE,DEFAULT_PERIOD);}  }
class C{  @SuppressWarnings("unchecked") public Report(Report r){  messageId=r.messageId;  indentation=r.indentation;  newlines=r.newlines;  tagData=(Vector<String>)r.tagData.clone();  tagTranslate=r.tagTranslate;  type=r.type;  subject=r.subject;  obscuredIndexes=(Hashtable<Integer,Boolean>)r.obscuredIndexes.clone();  obscuredRecipients=(Vector<String>)r.obscuredRecipients.clone();  tagCounter=r.tagCounter;}  }
class C{  protected void newLine(PrintWriter file,String string,boolean isManifest){  String[] lines=string.split(NEW_LINE);  for (  String line : lines) {    String[] words=line.split(SPACE);    StringBuffer sb=new StringBuffer();    for (    String word : words) {      if (checkStringLength(sb.toString() + word,isManifest)) {        sb.append(word + SPACE);      } else {        sb.setLength(sb.length() - 1);        addLine(file,sb.toString());        sb=new StringBuffer(word + SPACE);      }    }    if (sb.length() > 0) {      sb.setLength(sb.length() - 1);    }    addLine(file,sb.toString());  }}  }
class C{  public static String formatDate(Context context,long millis,FileTimeDisplay fileTimeDisplay){  Calendar cal=Calendar.getInstance();  cal.setTimeInMillis(millis);  return formatDate(context,cal,fileTimeDisplay);}  }
class C{  public Builder aliasPrefix(String aliasPrefix){  this.aliasPrefix=aliasPrefix;  return this;}  }
class C{  public String makeServiceCall(String url,int method,List<NameValuePair> params){  try {    DefaultHttpClient httpClient=new DefaultHttpClient();    HttpEntity httpEntity=null;    HttpResponse httpResponse=null;    if (method == POST) {      HttpPost httpPost=new HttpPost(url);      if (params != null) {        httpPost.setEntity(new UrlEncodedFormEntity(params));      }      httpResponse=httpClient.execute(httpPost);    } else     if (method == GET) {      if (params != null) {        String paramString=URLEncodedUtils.format(params,"utf-8");        url+="?" + paramString;      }      HttpGet httpGet=new HttpGet(url);      httpResponse=httpClient.execute(httpGet);    }    httpEntity=httpResponse.getEntity();    response=EntityUtils.toString(httpEntity);  } catch (  UnsupportedEncodingException e) {    e.printStackTrace();  }catch (  ClientProtocolException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  return response;}  }
class C{  public void destroy(){  log=null;  serverChain=null;}  }
class C{  public CertificateNotYetValidException(String message){  super(message);}  }
class C{  private void showImage(int position){  Intent intent=new Intent(ImageGalleryActivity.this,ImageDisplayActivity.class);  intent.putExtra(ImageGalleryActivity.IMAGE_ID,position);  startActivity(intent);  overridePendingTransition(R.anim.fadein,R.anim.fastzoom);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public boolean isWatching(){  BasicKeyChain.State basicState=basic.isWatching();  BasicKeyChain.State activeState=BasicKeyChain.State.EMPTY;  if (!chains.isEmpty()) {    if (getActiveKeyChain().isWatching())     activeState=BasicKeyChain.State.WATCHING; else     activeState=BasicKeyChain.State.REGULAR;  }  if (basicState == BasicKeyChain.State.EMPTY) {    if (activeState == BasicKeyChain.State.EMPTY)     throw new IllegalStateException("Empty key chain group: cannot answer isWatching() query");    return activeState == BasicKeyChain.State.WATCHING;  } else   if (activeState == BasicKeyChain.State.EMPTY)   return basicState == BasicKeyChain.State.WATCHING; else {    if (activeState != basicState)     throw new IllegalStateException("Mix of watching and non-watching keys in wallet");    return activeState == BasicKeyChain.State.WATCHING;  }}  }
class C{  public void valueChange(ValueChangeEvent e){  log.config(e.getPropertyName() + "=" + e.getNewValue());  if (e.getPropertyName().equals("C_BPartner_ID")) {    int C_BPartner_ID=((Integer)e.getNewValue()).intValue();    initBPOrderDetails(C_BPartner_ID,true);  }  window.tableChanged(null);}  }
class C{  public List arguments(){  return this.arguments;}  }
class C{  public void drawFlattenedForm(final PdfStreamDecoder pdfStreamDecoder,final PdfObject form,final boolean isHTML,final PdfObject AcroRes) throws PdfException {  if (exclusionOption != FormExclusion.ExcludeNone && !showForm(form)) {    return;  }  final int type=form.getParameterConstant(PdfDictionary.Subtype);  if (type == PdfDictionary.Highlight) {    AnnotationFactory.renderFlattenedAnnotation(form,pdfStreamDecoder.current,pdfStreamDecoder.parserOptions.getPageNumber(),pdfStreamDecoder.pageData.getRotation(pdfStreamDecoder.parserOptions.getPageNumber()));    return;  }  final GraphicsState oldGS=pdfStreamDecoder.gs;  pdfStreamDecoder.gs=new GraphicsState();  pdfStreamDecoder.parserOptions.setFlattenedForm(true);  final boolean[] characteristic=((FormObject)form).getCharacteristics();  if (characteristic[0] || characteristic[1] || characteristic[5]|| (!form.getBoolean(PdfDictionary.Open) && form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Popup)) {    return;  }  PdfObject imgObj=null;  final PdfObject APobjN=form.getDictionary(PdfDictionary.AP).getDictionary(PdfDictionary.N);  if (APobjN != null || form.getDictionary(PdfDictionary.MK).getDictionary(PdfDictionary.I) != null) {    final String defaultState=form.getName(PdfDictionary.AS);    final Object[] values=FormStream.getNormalKeyValues(form);    if (defaultState != null && defaultState.equals(((FormObject)form).getNormalOnState())) {      ((FormObject)form).setNormalOnState((String)values[0]);      imgObj=(PdfObject)values[1];    } else {      imgObj=(PdfObject)values[2];    }  }  if (imgObj != null) {    final byte[] formData=imgObj.getDecodedStream();    if (formData != null) {      final String str=new String(formData);      if (str.isEmpty() || (str.contains("BMC") && !str.contains("BT"))) {        imgObj=null;      }    }  }  final byte[] DA=form.getTextStreamValueAsByte(PdfDictionary.DA);  if (imgObj == null) {    String V=form.getTextStreamValue(PdfDictionary.V);    if (V == null && type == PdfDictionary.FreeText) {      V=form.getTextStreamValue(PdfDictionary.Contents);    }    if (DA != null || (V != null && !V.isEmpty())) {      final ReadOnlyTextIcon textIcon=new ReadOnlyTextIcon(form,0,pdfStreamDecoder.currentPdfFile,AcroRes);      textIcon.decipherAppObject((FormObject)form);      if (V != null) {        textIcon.setText(V);        imgObj=textIcon.getFakeObject();      } else       if (DA != null) {        imgObj=textIcon.getFakeObject();        imgObj.setDecodedStream(DA);      }    }    if (imgObj == null && DA == null) {      if (type == PdfDictionary.Text) {        AnnotationFactory.renderFlattenedAnnotation(form,pdfStreamDecoder.current,pdfStreamDecoder.parserOptions.getPageNumber(),pdfStreamDecoder.pageData.getRotation(pdfStreamDecoder.parserOptions.getPageNumber()));      }      return;    }  }  if (imgObj != null) {    pdfStreamDecoder.currentPdfFile.checkResolved(imgObj);  }  byte[] formData=null;  if (imgObj != null) {    formData=imgObj.getDecodedStream();  }  if (imgObj != null) {    final PdfObject resources=imgObj.getDictionary(PdfDictionary.Resources);    if (resources != null) {      pdfStreamDecoder.readResources(resources,false);    }  }  float[] BBox=form.getFloatArray(PdfDictionary.Rect);  if (imgObj != null && imgObj.getObjectType() == PdfDictionary.XFA_APPEARANCE) {    final Rectangle rect=((FormObject)form).getBoundingRectangle();    if (rect != null) {      BBox=new float[]{rect.x,rect.y,rect.width,rect.height};    }  }  if (BBox == null) {    BBox=new float[]{0,0,1,1};  }  final int pageRotation=pdfStreamDecoder.pageData.getRotation(pdfStreamDecoder.parserOptions.getPageNumber());  if (pageRotation == 0) {    if (BBox[1] > BBox[3]) {      float t=BBox[1];      BBox[1]=BBox[3];      BBox[3]=t;    }    if (BBox[0] > BBox[2]) {      float t=BBox[0];      BBox[0]=BBox[2];      BBox[2]=t;    }  }  if (pdfStreamDecoder.parserOptions.isFlattenedForm()) {    pdfStreamDecoder.parserOptions.setOffsets(BBox[0],BBox[1]);  }  float[] matrix={1,0,0,1,0,0};  if (imgObj != null) {    matrix=imgObj.getFloatArray(PdfDictionary.Matrix);  }  float x=BBox[0], y=BBox[1];  Area newClip=null;  if (matrix != null) {    float yScale=1;    if (imgObj != null && pageRotation == 0 && matrix[4] > 0 && matrix[5] > 0) {      final float[] BoundingBox=imgObj.getFloatArray(PdfDictionary.BBox);      if (BoundingBox[1] > BoundingBox[3]) {        float t=BoundingBox[1];        BoundingBox[1]=BoundingBox[3];        BoundingBox[3]=t;      }      if (BoundingBox[0] > BoundingBox[2]) {        float t=BoundingBox[0];        BoundingBox[0]=BoundingBox[2];        BoundingBox[2]=t;      }      matrix[0]=(BBox[2] - BBox[0]) / (BoundingBox[2] - BoundingBox[0]);      matrix[1]=0;      matrix[2]=0;      matrix[3]=(BBox[3] - BBox[1]) / (BoundingBox[3] - BoundingBox[1]);      matrix[4]=(BBox[0] - BoundingBox[0]);      matrix[5]=(BBox[1] - BoundingBox[1]);      pdfStreamDecoder.gs.CTM=new float[][]{{matrix[0],matrix[1],0},{matrix[2],matrix[3],0},{matrix[4],matrix[5],1}};      newClip=new Area(new Rectangle((int)BBox[0],(int)BBox[1],(int)((BBox[2] - BBox[0]) + 2),(int)((BBox[3] - BBox[1]) + 2)));      x=(matrix[4]);      y=(matrix[5]);    } else {      PdfObject temp=form.getDictionary(PdfDictionary.AP);      if (temp != null) {        temp=temp.getDictionary(PdfDictionary.N);        if (temp != null) {          final float[] BoundingBox=temp.getFloatArray(PdfDictionary.BBox);          if (BoundingBox != null) {            if (BBox[0] != BoundingBox[0] && BBox[1] != BoundingBox[1] && BBox[2] != BoundingBox[2] && BBox[3] != BoundingBox[3]) {              if (matrix[0] * matrix[3] == 1.0f && matrix[1] * matrix[2] == 0.0f) {                final float bbh=BBox[3] - BBox[1];                final float imh=BoundingBox[3] - BoundingBox[1];                if ((int)bbh != (int)imh) {                  yScale=bbh / imh;                }              } else {                if (matrix[0] * matrix[3] == 0.0f && matrix[1] * matrix[2] == -1.0f) {                  float bbh=BBox[2] - BBox[0];switch (pageRotation) {case 90:                    bbh=BBox[2] - BBox[0];                  break;case 180:                break;case 270:              bbh=BBox[2] - BBox[0];            break;        }        final float imh=BoundingBox[3] - BoundingBox[1];        if ((int)bbh != (int)imh) {          yScale=bbh / imh;        }      }    }  }}}}switch (pageRotation) {case 90:if (BBox[0] < BBox[2]) {x=BBox[0] + (matrix[4] * yScale);} else {x=BBox[2] + (matrix[4] * yScale);}if (matrix[4] < 0) {x=BBox[0] + (matrix[4] * yScale);}break;default :x=BBox[0] + (matrix[4] * yScale);newClip=new Area(new Rectangle((int)(BBox[0] - 1),(int)(BBox[1] - 1),(int)((BBox[2] - BBox[0]) + 2),(int)((BBox[3] - BBox[1]) + 2)));break;}y=BBox[1] + (matrix[5] * yScale);pdfStreamDecoder.gs.CTM=new float[][]{{matrix[0] * yScale,matrix[1] * yScale,0},{matrix[2] * yScale,matrix[3] * yScale,0},{x,y,1}};}} else {if (imgObj != null && form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Widget && form.getNameAsConstant(PdfDictionary.FT) != PdfDictionary.Sig) {float[] values2=imgObj.getFloatArray(PdfDictionary.BBox);if (values2 != null) {float xScale=(BBox[2] - BBox[0]) / (values2[2] - values2[0]);if (xScale < 0) {xScale=-xScale;}float yScale=(BBox[3] - BBox[1]) / (values2[3] - values2[1]);if (yScale < 0) {yScale=-yScale;}pdfStreamDecoder.gs.CTM=new float[][]{{xScale,0,0},{0,yScale,0},{x,y,1}};} else {pdfStreamDecoder.gs.CTM=new float[][]{{1,0,0},{0,1,0},{x,y,1}};}newClip=new Area(new Rectangle((int)BBox[0],(int)BBox[1],(int)BBox[2],(int)BBox[3]));} else {pdfStreamDecoder.gs.CTM=new float[][]{{1,0,0},{0,1,0},{x,y,1}};newClip=new Area(new Rectangle((int)BBox[0],(int)BBox[1],(int)BBox[2],(int)BBox[3]));}}newClip=ClipUtils.convertPDFClipToJavaClip(newClip);drawForm(imgObj,form,pdfStreamDecoder,newClip,isHTML,BBox,x,y,formData,APobjN,oldGS);}  }
class C{  private int pop(){  if (outputStackTop > 0) {    return outputStack[--outputStackTop];  } else {    return STACK | -(--owner.inputStackTop);  }}  }
class C{  public FeatureConfigurationItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public boolean onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){  return ((requestCode == this.requestCode) && (grantResults.length > 0) && (grantResults[0] == PackageManager.PERMISSION_GRANTED));}  }
class C{  public static boolean convertToStringContent(PsiBuilder b,int l){  IElementType tokenType=b.getTokenType();  assert b instanceof PerlBuilder;  boolean isStopOnNumericGt=((PerlBuilder)b).isStopOnNumericGt();  IElementType extraStopQuote=((PerlBuilder)b).getExtraStopQuote();  if (tokenType != null && !(isStopOnNumericGt && tokenType == OPERATOR_GT_NUMERIC) && !(!isStopOnNumericGt && CLOSE_QUOTES.contains(tokenType)) && tokenType != extraStopQuote) {    IElementType targetToken=PerlLexerUtil.remapSQToken(tokenType);    PsiBuilder.Marker m=b.mark();    if (targetToken == STRING_PACKAGE && b.rawLookup(1) == IDENTIFIER) {      b.advanceLexer();    }    b.advanceLexer();    m.collapse(targetToken);    PerlStringWrapper stringWrapper=((PerlBuilder)b).getStringWrapper();    if (stringWrapper != null && targetToken == STRING_IDENTIFIER && stringWrapper.canProcess()) {      stringWrapper.wrapMarker(m);    }    return true;  }  return false;}  }
class C{  public static void createVerticalSpacer(Composite parent,int numlines){  Label lbl=new Label(parent,SWT.NONE);  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  Layout layout=parent.getLayout();  if (layout instanceof GridLayout) {    gd.horizontalSpan=((GridLayout)parent.getLayout()).numColumns;  }  gd.heightHint=numlines;  lbl.setLayoutData(gd);}  }
class C{  private String valueAsString(final Object object){  return valueAsString(object,null);}  }
class C{  public static void addChemicalInfuserRecipe(GasStack leftInput,GasStack rightInput,GasStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addChemicalInfuserRecipe",GasStack.class,GasStack.class,GasStack.class);    m.invoke(null,leftInput,rightInput,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public static PricedParameter createPricedParameter(final BigDecimal pricePerUser,final BigDecimal pricePerSubscription,final PriceModel priceModel,final Parameter parameter,DataService dataManager) throws NonUniqueBusinessKeyException {  if (parameter.getParameterDefinition().getValueType() == ParameterValueType.STRING) {    throw new RuntimeException("No priced parameter must be based on a type string parameter.");  }  PricedParameter pricedParameter=new PricedParameter();  pricedParameter.setPricePerUser(pricePerUser);  pricedParameter.setPricePerSubscription(pricePerSubscription);  pricedParameter.setPriceModel(priceModel);  pricedParameter.setParameter(parameter);  dataManager.persist(pricedParameter);  dataManager.flush();  priceModel.getSelectedParameters().add(pricedParameter);  return pricedParameter;}  }
class C{  static String wrapAddress(String address){  if (address.contains(":")) {    return "[" + address + "]";  }  return address;}  }
class C{  public int hashCode(){  return julian;}  }
class C{  public void declare(final GangliaState gangliaState){  gangliaState.putIfAbsent(heartbeat());  gangliaState.putIfAbsent(gexec());  gangliaState.putIfAbsent(mem_free());  gangliaState.putIfAbsent(mem_shared());  gangliaState.putIfAbsent(mem_buffers());  gangliaState.putIfAbsent(mem_cached());  gangliaState.putIfAbsent(mem_total());  gangliaState.putIfAbsent(swap_free());  gangliaState.putIfAbsent(swap_total());  gangliaState.putIfAbsent(load_one());  gangliaState.putIfAbsent(load_five());  gangliaState.putIfAbsent(load_fifteen());  gangliaState.putIfAbsent(proc_run());  gangliaState.putIfAbsent(proc_total());  gangliaState.putIfAbsent(cpu_user());  gangliaState.putIfAbsent(cpu_system());  gangliaState.putIfAbsent(cpu_idle());  gangliaState.putIfAbsent(cpu_nice());  gangliaState.putIfAbsent(cpu_aidle());  gangliaState.putIfAbsent(cpu_wio());  gangliaState.putIfAbsent(cpu_intr());  gangliaState.putIfAbsent(cpu_sintr());  gangliaState.putIfAbsent(bytes_in());  gangliaState.putIfAbsent(bytes_out());  gangliaState.putIfAbsent(pkts_in());  gangliaState.putIfAbsent(pkts_out());  gangliaState.putIfAbsent(disk_total());  gangliaState.putIfAbsent(disk_free());  gangliaState.putIfAbsent(part_max_used());  gangliaState.putIfAbsent(boottime());  gangliaState.putIfAbsent(machine_type());  gangliaState.putIfAbsent(os_name());  gangliaState.putIfAbsent(os_release());  gangliaState.putIfAbsent(cpu_num());  gangliaState.putIfAbsent(cpu_speed());  gangliaState.putIfAbsent(location());}  }
class C{  @VisibleForTesting public AppData(String siteUrl,String packageName){  mSiteUrl=siteUrl;  mPackageName=packageName;}  }
class C{  public static void removeListener(final PropertyChangeListener listener){  PM.removeListener(listener);}  }
class C{  public boolean containsValue(Object value){  if (value == null)   throw new NullPointerException();  Entry tab[]=getTableForReading();  for (int i=0; i < tab.length; ++i) {    for (Entry e=tab[i]; e != null; e=e.next)     if (value.equals(e.value))     return true;  }  return false;}  }
class C{  public OMToolSet(){  super();  Debug.message("omtoolset","OMToolSet()");  setLayout(new FlowLayout(FlowLayout.LEFT));  navPanel=new NavigatePanel();  zoomPanel=new ZoomPanel();  scaleField=new ScaleTextPanel();  add(navPanel);  add(zoomPanel);  add(scaleField);  createFace();}  }
class C{  public static boolean isDistributionTag(final Component source){  if (source instanceof DragAndDropWrapper) {    final String wrapperData=((DragAndDropWrapper)source).getData().toString();    final String id=wrapperData.replace(SPUIDefinitions.DISTRIBUTION_TAG_BUTTON,"");    if (wrapperData.contains(SPUIDefinitions.DISTRIBUTION_TAG_BUTTON) && !id.trim().isEmpty()) {      return true;    }  }  return false;}  }
class C{  public void error(SAXParseException e) throws SAXException {}  }
class C{  public void actionPerformed(ActionEvent e){  Transferable transferable=InternalClipboard.getInstance().getContents(null);  if (!(transferable instanceof LayoutSelection)) {    return;  }  LayoutSelection selection=(LayoutSelection)transferable;  DataFlavor flavor=new DataFlavor(LayoutSelection.class,"Layout");  try {    Graph layoutGrpah=(Graph)selection.getTransferData(flavor);    if (layoutGrpah != null) {      this.layoutEditable.layoutByGraph(layoutGrpah);    }  } catch (  Exception e1) {    throw new RuntimeException(e1);  }}  }
class C{  private ReplicationConnectionProxy(List<String> masterHostList,Properties masterProperties,List<String> slaveHostList,Properties slaveProperties) throws SQLException {  super();  this.thisAsReplicationConnection=(ReplicationConnection)this.thisAsConnection;  String enableJMXAsString=masterProperties.getProperty("replicationEnableJMX","false");  try {    this.enableJMX=Boolean.parseBoolean(enableJMXAsString);  } catch (  Exception e) {    throw SQLError.createSQLException(Messages.getString("ReplicationConnectionProxy.badValueForReplicationEnableJMX",new Object[]{enableJMXAsString}),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,null);  }  String allowMasterDownConnectionsAsString=masterProperties.getProperty("allowMasterDownConnections","false");  try {    this.allowMasterDownConnections=Boolean.parseBoolean(allowMasterDownConnectionsAsString);  } catch (  Exception e) {    throw SQLError.createSQLException(Messages.getString("ReplicationConnectionProxy.badValueForAllowMasterDownConnections",new Object[]{allowMasterDownConnectionsAsString}),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,null);  }  String allowSlaveDownConnectionsAsString=masterProperties.getProperty("allowSlaveDownConnections","false");  try {    this.allowSlaveDownConnections=Boolean.parseBoolean(allowSlaveDownConnectionsAsString);  } catch (  Exception e) {    throw SQLError.createSQLException(Messages.getString("ReplicationConnectionProxy.badValueForAllowSlaveDownConnections",new Object[]{allowSlaveDownConnectionsAsString}),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,null);  }  String readFromMasterWhenNoSlavesAsString=masterProperties.getProperty("readFromMasterWhenNoSlaves");  try {    this.readFromMasterWhenNoSlavesOriginal=Boolean.parseBoolean(readFromMasterWhenNoSlavesAsString);  } catch (  Exception e) {    throw SQLError.createSQLException(Messages.getString("ReplicationConnectionProxy.badValueForReadFromMasterWhenNoSlaves",new Object[]{readFromMasterWhenNoSlavesAsString}),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,null);  }  String group=masterProperties.getProperty("replicationConnectionGroup",null);  if (group != null) {    this.connectionGroup=ReplicationConnectionGroupManager.getConnectionGroupInstance(group);    if (this.enableJMX) {      ReplicationConnectionGroupManager.registerJmx();    }    this.connectionGroupID=this.connectionGroup.registerReplicationConnection(this.thisAsReplicationConnection,masterHostList,slaveHostList);    this.slaveHosts=new ArrayList<String>(this.connectionGroup.getSlaveHosts());    this.masterHosts=new ArrayList<String>(this.connectionGroup.getMasterHosts());  } else {    this.slaveHosts=new ArrayList<String>(slaveHostList);    this.masterHosts=new ArrayList<String>(masterHostList);  }  this.driver=new NonRegisteringDriver();  this.slaveProperties=slaveProperties;  this.masterProperties=masterProperties;  resetReadFromMasterWhenNoSlaves();  try {    initializeSlavesConnection();  } catch (  SQLException e) {    if (!this.allowSlaveDownConnections) {      if (this.connectionGroup != null) {        this.connectionGroup.handleCloseConnection(this.thisAsReplicationConnection);      }      throw e;    }  }  SQLException exCaught=null;  try {    this.currentConnection=initializeMasterConnection();  } catch (  SQLException e) {    exCaught=e;  }  if (this.currentConnection == null) {    if (this.allowMasterDownConnections && this.slavesConnection != null) {      this.readOnly=true;      this.currentConnection=this.slavesConnection;    } else {      if (this.connectionGroup != null) {        this.connectionGroup.handleCloseConnection(this.thisAsReplicationConnection);      }      if (exCaught != null) {        throw exCaught;      }      throw SQLError.createSQLException(Messages.getString("ReplicationConnectionProxy.initializationWithEmptyHostsLists"),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,null);    }  }}  }
class C{  public void removeTour(Tour tour){synchronized (tours) {    tours.remove(tour);  }  if (autoRepaint) {    repaint();  }}  }
class C{  public boolean mouseClicked(MouseEvent e){  Debug.message("link","AmpLinkLayer mouseClicked");  LinkOMGraphicList graphics=getGraphicList();  OMGraphic gesGraphic=null;  gesGraphic=graphics.findClosest(e.getX(),e.getY(),distanceLimit);  if (gesGraphic == null) {    gesGraphic=extraGraphics.findClosest(e.getX(),e.getY(),distanceLimit);  }  if (gesGraphic != null && drawingTool != null) {    DrawingTool dt=getDrawingTool();    OMGraphic graphic=null;    if (dt != null) {      graphic=dt.edit(gesGraphic,layer);    }    if (graphic != null) {      Debug.message("link","AmpLinkLayer editing graphic");      return true;    } else {      Debug.message("link","AmpLinkLayer unable to edit graphic");    }  }  return super.mouseClicked(e);}  }
class C{  public final Flux<T> switchIfEmpty(Publisher<? extends T> alternate){  return onAssembly(new FluxSwitchIfEmpty<>(this,alternate));}  }
class C{  public char current(){  if (offset == end) {    return DONE;  }  return string.charAt(offset);}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        int b=in.read();        if (b >= 0) {          b3[i]=(byte)b;          numBinaryBytes++;        } else {          break;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  public final AlertDialog initiateScan(int cameraId){  return initiateScan(ALL_CODE_TYPES,cameraId);}  }
class C{  @Ignore @Deprecated public void copyTo(Array<Element> destination,int sourcePosition,int destinationPosition){  copyTo(destination,(long)sourcePosition,(long)destinationPosition);}  }
class C{  public State advanceToNextElement(){  if (!canFork || matchCount < patternElement.minOccur()) {    return null;  }  State advance=new State(this,basicBlock,instructionIterator.duplicate(),patternElement.getNext(),0,currentMatch,bindingSet,true);  this.canFork=false;  return advance;}  }
class C{  public void layerProtocol(HttpContext context,HttpParams params) throws IOException {  if (params == null) {    throw new IllegalArgumentException("Parameters must not be null.");  }  if ((this.tracker == null) || !this.tracker.isConnected()) {    throw new IllegalStateException("Connection not open.");  }  if (!this.tracker.isTunnelled()) {    throw new IllegalStateException("Protocol layering without a tunnel not supported.");  }  if (this.tracker.isLayered()) {    throw new IllegalStateException("Multiple protocol layering not supported.");  }  final HttpHost target=tracker.getTargetHost();  connOperator.updateSecureConnection(this.connection,target,context,params);  this.tracker.layerProtocol(this.connection.isSecure());}  }
class C{  @CanIgnoreReturnValue public final double addAndGet(double delta){  while (true) {    long current=value;    double currentVal=longBitsToDouble(current);    double nextVal=currentVal + delta;    long next=doubleToRawLongBits(nextVal);    if (updater.compareAndSet(this,current,next)) {      return nextVal;    }  }}  }
class C{  public UserGroupRestRep create(UserGroupCreateParam input){  return client.post(UserGroupRestRep.class,input,baseUrl);}  }
class C{  protected int lengthOfByteStream(jmri.jmrix.AbstractMRMessage m){  int len=m.getNumDataElements() + 2;  int cr=0;  if (!m.isBinary()) {    cr=1;  }  return len + cr;}  }
class C{  public Process executeAsync(final CommandLine command,Map<String,String> environment) throws IOException {  if (workingDirectory != null && !workingDirectory.exists()) {    throw new IOException(workingDirectory + " doesn't exist.");  }  return executeInternal(command,environment,workingDirectory,streamHandler,null);}  }
class C{  public static void dataChanged(String packageName){  checkServiceBinder();  if (sService != null) {    try {      sService.dataChanged(packageName);    } catch (    RemoteException e) {      Log.d(TAG,"dataChanged(pkg) couldn't connect");    }  }}  }
class C{  @Override public long idleStartTime(){  return _idleStartTime;}  }
class C{  protected boolean isParentNodeOneOfFosterTableElements(Node parentNode){  if (parentNode == null) {    return false;  }  if (parentNode.getNodeName() == null) {    return false;  }  String nodeName=parentNode.getNodeName().toLowerCase();  return StringUtil.equalsOne(nodeName,FOSTER_TABLE_ELEMENTS) != -1;}  }
class C{  public PluginBag(Class<T> klass,SolrCore core){  this(klass,core,false);}  }
class C{  public CloudSdkAppEngineHelper(@NotNull Project project){  this.project=project;}  }
class C{  public void invalidate(){  valid=false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.164 -0500",hash_original_method="5873C88FB18B86DA11D334099F5AE064",hash_generated_method="A09433F3D27BC274B9CEE81390A27CFC") public ContactHeader createContactHeader(){  Contact contact=new Contact();  contact.setWildCardFlag(true);  contact.setExpires(0);  return contact;}  }
class C{  public static boolean bernoulli(){  return bernoulli(0.5);}  }
class C{  public void addHyperlinkListener(HyperlinkListener listener){  EDITOR_PANE.addHyperlinkListener(listener);}  }
class C{  public StatisticsDisabledException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public synchronized void dispatch(Event event){  if (client.isReady() || event instanceof DiscordDisconnectedEvent) {    eventExecutor.submit(null);  }}  }
class C{  protected void onClose(){}  }
class C{  public void testNegationLeafRewriting01(){  final ASTFilterNormalizationOptimizer rewriter=new ASTFilterNormalizationOptimizer();  final IBindingSet[] bsets=new IBindingSet[]{new ListBindingSet()};  final QueryRoot given=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    given.setProjection(projection);    projection.addProjectionVar(new VarNode("s"));    final JoinGroupNode whereClause=new JoinGroupNode();    whereClause.setProperty(QueryHints.NORMALIZE_FILTER_EXPRESSIONS,"true");    given.setWhereClause(whereClause);    final FunctionNode filterEq=FunctionNode.EQ(new VarNode("s"),new VarNode("o"));    final FunctionNode filterNeq=FunctionNode.NE(new VarNode("s"),new VarNode("o"));    final FunctionNode filterLe=FunctionNode.LE(new VarNode("s"),new VarNode("o"));    final FunctionNode filterLt=FunctionNode.LT(new VarNode("s"),new VarNode("o"));    final FunctionNode filterGe=FunctionNode.GE(new VarNode("s"),new VarNode("o"));    final FunctionNode filterGt=FunctionNode.GT(new VarNode("s"),new VarNode("o"));    final FunctionNode comb1=FunctionNode.AND(filterEq,filterNeq);    final FunctionNode comb2=FunctionNode.AND(filterLe,filterLt);    final FunctionNode comb3=FunctionNode.AND(filterGt,filterGe);    final FilterNode filterNode=new FilterNode(FunctionNode.NOT(FunctionNode.AND(FunctionNode.AND(comb1,comb2),comb3)));    assertFalse(StaticAnalysis.isCNF(filterNode));    whereClause.addChild(filterNode);  }  final QueryRoot expected=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    expected.setProjection(projection);    projection.addProjectionVar(new VarNode("s"));    final JoinGroupNode whereClause=new JoinGroupNode();    whereClause.setProperty(QueryHints.NORMALIZE_FILTER_EXPRESSIONS,"true");    expected.setWhereClause(whereClause);    final FunctionNode filterEqInv=FunctionNode.NE(new VarNode("s"),new VarNode("o"));    final FunctionNode filterNeqInv=FunctionNode.EQ(new VarNode("s"),new VarNode("o"));    final FunctionNode filterLeInv=FunctionNode.GT(new VarNode("s"),new VarNode("o"));    final FunctionNode filterLtInv=FunctionNode.GE(new VarNode("s"),new VarNode("o"));    final FunctionNode filterGeInv=FunctionNode.LT(new VarNode("s"),new VarNode("o"));    final FunctionNode filterGtInv=FunctionNode.LE(new VarNode("s"),new VarNode("o"));    final FunctionNode comb1=FunctionNode.OR(filterEqInv,filterNeqInv);    final FunctionNode comb2=FunctionNode.OR(filterLeInv,filterLtInv);    final FunctionNode comb3=FunctionNode.OR(filterGtInv,filterGeInv);    final FilterNode filterNode=new FilterNode(FunctionNode.OR(FunctionNode.OR(comb1,comb2),comb3));    assertTrue(StaticAnalysis.isCNF(filterNode));    whereClause.addChild(filterNode);  }  final AST2BOpContext context=new AST2BOpContext(new ASTContainer(given),store);  final IQueryNode actual=rewriter.optimize(context,new QueryNodeWithBindingSet(given,bsets)).getQueryNode();  assertSameAST(expected,actual);}  }
class C{  public static double[][] random(int m,int n){  double[][] array=new double[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      array[i][j]=Random.raw();    }  }  return array;}  }
class C{  public static String locateSolrHome(){  String home=null;  try {    Context c=new InitialContext();    home=(String)c.lookup("java:comp/env/" + project + "/home");    log.info("Using JNDI solr.home: " + home);  } catch (  NoInitialContextException e) {    log.info("JNDI not configured for " + project + " (NoInitialContextEx)");  }catch (  NamingException e) {    log.info("No /" + project + "/home in JNDI");  }catch (  RuntimeException ex) {    log.warn("Odd RuntimeException while testing for JNDI: " + ex.getMessage());  }  if (home == null) {    String prop=project + ".solr.home";    home=System.getProperty(prop);    if (home != null) {      log.info("using system property " + prop + ": "+ home);    }  }  if (home == null) {    home=project + '/';    log.info(project + " home defaulted to '" + home+ "' (could not find system property or JNDI)");  }  return normalizeDir(home);}  }
class C{  @Field(40) public Pointer<Short> puiVal(){  return this.io.getPointerField(this,40);}  }
class C{  public final Bag clear(){  Bag bag=new Bag();  Object[] fieldx=null;  final int width=this.width;  final int height=this.height;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      assert sim.util.LocationLog.it(this,new Int2D(x,y));      if (fieldx[y] != null)       bag.add(fieldx[y]);      fieldx[y]=null;    }  }  return bag;}  }
class C{  private static byte CallNonvirtualByteMethodA(JNIEnvironment env,int objJREF,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualByteMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,objJREF,methodID,argAddress,TypeReference.Byte,true);  return Reflection.unwrapByte(returnObj);}  }
class C{  public static REnvironment lookupOnSearchPath(String name){  SearchPath searchPath=RContext.getInstance().stateREnvironment.getSearchPath();  int i=lookupIndexOnSearchPath(name);  return i <= 0 ? null : searchPath.get(i - 1);}  }
class C{  @Override public void tearDown() throws Exception {  ctag.doEndTag();  rtag.doEndTag();  ctag=null;  rtag=null;  super.tearDown();}  }
class C{  @Override public void changeCursor(Cursor c){  if (DBG)   Log.d(LOG_TAG,"changeCursor(" + c + ")");  if (mClosed) {    Log.w(LOG_TAG,"Tried to change cursor after adapter was closed.");    if (c != null)     c.close();    return;  }  try {    super.changeCursor(c);    if (c != null) {      mText1Col=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_1);      mText2Col=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_2);      mText2UrlCol=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_2_URL);      mIconName1Col=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_ICON_1);      mIconName2Col=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_ICON_2);      mFlagsCol=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_FLAGS);    }  } catch (  Exception e) {    Log.e(LOG_TAG,"error changing cursor and caching columns",e);  }}  }
class C{  public static void checkState(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:53.137 -0500",hash_original_method="E9F0477F2CE17224EFC5A824AF02534D",hash_generated_method="9283CCC4E13A24806ACE928243B74A32") public static boolean isIPv6Reference(String address){  return address.charAt(0) == '[' && address.charAt(address.length() - 1) == ']';}  }
class C{  public Uri onRestoreRingtone(){  final String uriString=getPersistedString(null);  return !TextUtils.isEmpty(uriString) ? Uri.parse(uriString) : null;}  }
class C{  public static void println(long x){  out.println(x);}  }
class C{  public BytesReference querySource(){  return querySource;}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(IMAGE_TIMEOUT_MS,IMAGE_MAX_RETRIES,IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;}  }
class C{  private void moveStagedEventsToDispatchQueue(){synchronized (mEventsStagingLock) {synchronized (mEventsToDispatchLock) {      for (int i=0; i < mEventStaging.size(); i++) {        Event event=mEventStaging.get(i);        if (!event.canCoalesce()) {          addEventToEventsToDispatch(event);          continue;        }        long eventCookie=getEventCookie(event.getViewTag(),event.getEventName(),event.getCoalescingKey());        Event eventToAdd=null;        Event eventToDispose=null;        Integer lastEventIdx=mEventCookieToLastEventIdx.get(eventCookie);        if (lastEventIdx == null) {          eventToAdd=event;          mEventCookieToLastEventIdx.put(eventCookie,mEventsToDispatchSize);        } else {          Event lastEvent=mEventsToDispatch[lastEventIdx];          Event coalescedEvent=event.coalesce(lastEvent);          if (coalescedEvent != lastEvent) {            eventToAdd=coalescedEvent;            mEventCookieToLastEventIdx.put(eventCookie,mEventsToDispatchSize);            eventToDispose=lastEvent;            mEventsToDispatch[lastEventIdx]=null;          } else {            eventToDispose=event;          }        }        if (eventToAdd != null) {          addEventToEventsToDispatch(eventToAdd);        }        if (eventToDispose != null) {          eventToDispose.dispose();        }      }    }    mEventStaging.clear();  }}  }
class C{  public ReadEventDetails clone(){  ReadEventDetails result=new ReadEventDetails();  result.NumValuesPerNode=NumValuesPerNode;  result.StartTime=StartTime;  result.EndTime=EndTime;  result.Filter=Filter == null ? null : Filter.clone();  return result;}  }
class C{  public void wantClientAuth(boolean wantClientAuth){  this.wantClientAuth=wantClientAuth;}  }
class C{  public static DataUri parse(String uri){  String scheme="data:";  if (uri.length() < scheme.length() || !uri.substring(0,scheme.length()).equalsIgnoreCase(scheme)) {    throw Messages.INSTANCE.getIllegalArgumentException(22);  }  String contentType=null;  String charset=null;  boolean base64=false;  String dataStr=null;  int tokenStart=scheme.length();  for (int i=scheme.length(); i < uri.length(); i++) {    char c=uri.charAt(i);    if (c == ';') {      String token=uri.substring(tokenStart,i);      if (contentType == null) {        contentType=token.toLowerCase();      } else {        String cs=StringUtils.afterPrefixIgnoreCase(token,"charset=");        if (cs != null) {          charset=cs;        } else         if ("base64".equalsIgnoreCase(token)) {          base64=true;        }      }      tokenStart=i + 1;      continue;    }    if (c == ',') {      String token=uri.substring(tokenStart,i);      if (contentType == null) {        contentType=token.toLowerCase();      } else {        String cs=StringUtils.afterPrefixIgnoreCase(token,"charset=");        if (cs != null) {          charset=cs;        } else         if ("base64".equalsIgnoreCase(token)) {          base64=true;        }      }      dataStr=uri.substring(i + 1);      break;    }  }  if (dataStr == null) {    throw Messages.INSTANCE.getIllegalArgumentException(23);  }  String text=null;  byte[] data=null;  if (base64) {    dataStr=dataStr.replaceAll("\\s","");    data=Base64.decodeBase64(dataStr);    if (charset != null) {      try {        text=new String(data,charset);      } catch (      UnsupportedEncodingException e) {        throw new IllegalArgumentException(Messages.INSTANCE.getExceptionMessage(24,charset),e);      }      data=null;    }  } else {    text=dataStr;  }  return new DataUri(contentType,data,text);}  }
class C{  public void ifNonNull(final Label label){  mv.visitJumpInsn(Opcodes.IFNONNULL,label);}  }
class C{  public HexIntLiteral createHexIntLiteral(){  HexIntLiteralImpl hexIntLiteral=new HexIntLiteralImpl();  return hexIntLiteral;}  }
class C{  protected static long parseLongInteger(ByteArrayInputStream pduDataStream){  assert (null != pduDataStream);  int temp=pduDataStream.read();  assert (-1 != temp);  int count=temp & 0xFF;  if (count > LONG_INTEGER_LENGTH_MAX) {    throw new RuntimeException("Octet count greater than 8 and I can't represent that!");  }  long result=0;  for (int i=0; i < count; i++) {    temp=pduDataStream.read();    assert (-1 != temp);    result<<=8;    result+=(temp & 0xFF);  }  return result;}  }
class C{  public ExecutionSlotImpl(){  super();}  }
class C{  @SuppressWarnings("unchecked") public synchronized E lastElement(){  try {    return (E)elementData[elementCount - 1];  } catch (  IndexOutOfBoundsException e) {    throw new NoSuchElementException();  }}  }
class C{  @RequestMapping("/accounts/owner/{name}") public List<Account> byOwner(@PathVariable("name") String partialName){  logger.info("accounts-service byOwner() invoked: " + accountRepository.getClass().getName() + " for "+ partialName);  List<Account> accounts=accountRepository.findByOwnerContainingIgnoreCase(partialName);  logger.info("accounts-service byOwner() found: " + accounts);  if (accounts == null || accounts.size() == 0)   throw new AccountNotFoundException(partialName); else {    return accounts;  }}  }
class C{  public Kern(int[] firstGlyphCodes,int[] secondGlyphCodes,UnicodeRange[] firstUnicodeRanges,UnicodeRange[] secondUnicodeRanges,float adjustValue){  this.firstGlyphCodes=firstGlyphCodes;  this.secondGlyphCodes=secondGlyphCodes;  this.firstUnicodeRanges=firstUnicodeRanges;  this.secondUnicodeRanges=secondUnicodeRanges;  this.kerningAdjust=adjustValue;  if (firstGlyphCodes != null)   Arrays.sort(this.firstGlyphCodes);  if (secondGlyphCodes != null)   Arrays.sort(this.secondGlyphCodes);}  }
class C{  public int currentTextureUnit(){  return this.textureUnit;}  }
class C{  public ResultVO infoResp(ErrorType errorType){  return infoResp(errorType,errorType.description());}  }
class C{  private RequestInfo loadRequest(String requestDirPath) throws Exception {  String json;  try (InputStream is=new FileInputStream(getMetadataPath(requestDirPath))){    json=IOUtils.toString(is,StandardCharsets.UTF_8);  }   LOG.debug("Request info loaded as JSON string: '{}'",json);  try {    return RequestInfo.fromJson(json);  } catch (  CorruptQueueException e) {    LOG.error("Load request failed: {}",e);    return recoverFromRequestCorruption();  }}  }
class C{  @Override protected void init(){  super.init();  failed=false;  validatorInfo=new ValidatorInfo();  idTagParser=new IdTagParserImpl();  idTagParser.setValidatorInfo(validatorInfo);  coreTagParser=new CoreTagParserImpl();  coreTagParser.setValidatorInfo(validatorInfo);}  }
class C{  public Buffer read() throws Exception {  Buffer buffer=(Buffer)fifo.getObject();  return buffer;}  }
class C{  public static Sector intersection(Iterable<? extends Sector> sectors){  if (sectors == null) {    String msg=Logging.getMessage("nullValue.SectorListIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Sector result=null;  for (  Sector s : sectors) {    if (s == null)     continue;    if (result == null)     result=s; else     if ((result=result.intersection(s)) == null)     break;  }  return result;}  }
class C{  public Asin(){  super(Number.class,Number.class);}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.767 -0500",hash_original_method="A353E7BDC7FDA36E1EC9624F6104E3C2",hash_generated_method="6B1EE76508F69753203669C02453636B") public boolean isErrorEnabled(){  return (getLogger().isLoggable(Level.SEVERE));}  }
class C{  synchronized void stop(){  if (DEBUG)   Log.v(TAG,"stop:mStatredCount=" + mStatredCount);  mStatredCount--;  if ((mEncoderCount > 0) && (mStatredCount <= 0)) {    mMediaMuxer.stop();    mMediaMuxer.release();    mIsStarted=false;    if (DEBUG)     Log.v(TAG,"MediaMuxer stopped:");  }}  }
class C{  public Type5(Type1 model1,Type1 model2,Parameters parameters){}  }
class C{  private void modifyLine(){  if (line == null) {    line=createLine(1.0);  }  if (dialog == null) {    dialog=new EditParallelLineDialog();  }  if (horizontalLineRadiobutton.isSelected()) {    if (!yField.getInputVerifier().verify(yField)) {      yField.requestFocusInWindow();      return;    }    line.setValue(Double.parseDouble(yField.getText()));  } else {    if (!xField.getInputVerifier().verify(xField)) {      xField.requestFocusInWindow();      return;    }    line.setValue(Double.parseDouble(xField.getText()));  }  dialog.setLine(line,false);  dialog.showDialog();}  }
class C{  protected boolean visitTypevarSupertype(AnnotatedTypeMirror subtype,AnnotatedTypeVariable supertype,VisitHistory visited){  return checkAndSubtype(subtype,supertype.getLowerBound(),visited);}  }
class C{  public int hashCode(){  if (cachedHashCode == Integer.MIN_VALUE) {    int hashCode=0;    getAnnotationType();    Method[] methods=annotationType.getDeclaredMethods();    for (int i=0; i < methods.length; ++i) {      String name=methods[i].getName();      int valueHashCode=0;      MemberValue mv=annotation.getMemberValue(name);      Object value=null;      try {        if (mv != null)         value=mv.getValue(classLoader,pool,methods[i]);        if (value == null)         value=getDefault(name,methods[i]);      } catch (      RuntimeException e) {        throw e;      }catch (      Exception e) {        throw new RuntimeException("Error retrieving value " + name + " for annotation "+ annotation.getTypeName(),e);      }      if (value != null) {        if (value.getClass().isArray())         valueHashCode=arrayHashCode(value); else         valueHashCode=value.hashCode();      }      hashCode+=127 * name.hashCode() ^ valueHashCode;    }    cachedHashCode=hashCode;  }  return cachedHashCode;}  }
class C{  public Boolean isRELToken(){  return relToken;}  }
class C{  public void testSetNStringServer() throws Exception {  createTable("testSetNStringServer","(c1 NATIONAL CHARACTER(10)) ENGINE=InnoDB");  Properties props1=new Properties();  props1.put("useServerPrepStmts","true");  props1.put("useUnicode","true");  props1.put("characterEncoding","latin1");  Connection conn1=getConnectionWithProps(props1);  PreparedStatement pstmt1=conn1.prepareStatement("INSERT INTO testSetNStringServer (c1) VALUES (?)");  try {    pstmt1.setNString(1,"aaa");    fail();  } catch (  SQLException e) {    assertEquals("Can not call setNString() when connection character set isn't UTF-8",e.getMessage());  }  pstmt1.close();  conn1.close();  createTable("testSetNStringServer","(c1 NATIONAL CHARACTER(10)) ENGINE=InnoDB");  Properties props2=new Properties();  props2.put("useServerPrepStmts","true");  props2.put("useUnicode","true");  props2.put("characterEncoding","UTF-8");  Connection conn2=getConnectionWithProps(props2);  PreparedStatement pstmt2=conn2.prepareStatement("INSERT INTO testSetNStringServer (c1) VALUES (?)");  pstmt2.setNString(1,"\'aaa\'");  pstmt2.execute();  ResultSet rs2=this.stmt.executeQuery("SELECT c1 FROM testSetNStringServer");  rs2.next();  assertEquals("\'aaa\'",rs2.getString(1));  rs2.close();  pstmt2.close();  conn2.close();}  }
class C{  public <T extends SuperModel>boolean update(T model){  Object[] objects=model.getUpdateSql();  return execSQL(objects[0].toString(),Arrays.copyOfRange(objects,1,objects.length));}  }
class C{  public static String generateCopySnapshotsToTargetWorkflow(Workflow workflow,String previousStep,StorageSystem storageSystem,List<URI> snapshotList){  String copyToTargetStep=workflow.createStepId();  BlockSnapshotCopyGroupToTargetsCompleter taskCompleter=new BlockSnapshotCopyGroupToTargetsCompleter(BlockSnapshot.class,snapshotList,copyToTargetStep);  Workflow.Method copy2TargetMethod=new Workflow.Method("doCopySnapshotsToTarget",storageSystem.getId(),snapshotList,taskCompleter);  copyToTargetStep=workflow.createStep("CopyGroupSnapshotToTargets","Copying snapshots to targets",previousStep,storageSystem.getId(),storageSystem.getSystemType(),SnapshotWorkflowEntryPoints.class,copy2TargetMethod,null,copyToTargetStep);  return copyToTargetStep;}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  setPropertiesFromAttributes(handler,rawName,attributes,this);  try {    Source sourceFromURIResolver=getSourceFromUriResolver(handler);    String hrefUrl=getBaseURIOfIncludedStylesheet(handler,sourceFromURIResolver);    if (handler.importStackContains(hrefUrl)) {      throw new org.xml.sax.SAXException(XSLMessages.createMessage(getStylesheetInclErr(),new Object[]{hrefUrl}));    }    handler.pushImportURL(hrefUrl);    handler.pushImportSource(sourceFromURIResolver);    int savedStylesheetType=handler.getStylesheetType();    handler.setStylesheetType(this.getStylesheetType());    handler.pushNewNamespaceSupport();    try {      parse(handler,uri,localName,rawName,attributes);    }  finally {      handler.setStylesheetType(savedStylesheetType);      handler.popImportURL();      handler.popImportSource();      handler.popNamespaceSupport();    }  } catch (  TransformerException te) {    handler.error(te.getMessage(),te);  }}  }
class C{  public static void toast(Context context,Object... msg){  if (LuaViewConfig.isDebug()) {    Toast.makeText(context,getMsg(msg),Toast.LENGTH_SHORT).show();  }}  }
class C{  public JsonSerializer(final boolean enforceReadWriteOrder){  this(null,enforceReadWriteOrder);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.948 -0500",hash_original_method="D31498501931F002B6E02A5E6FE68BA6",hash_generated_method="DB8B9A412CEC8BA8F2B1DB42594F3045") public PaintFlagsDrawFilter(int clearBits,int setBits){  mNativeInt=nativeConstructor(clearBits,setBits);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public T caseBackspace(Backspace object){  return null;}  }
class C{  @NotNull public String fetchMasterHostName() throws IOException {  try {    HierarchicalINIConfiguration iniFile=new HierarchicalINIConfiguration();    iniFile.load(puppetConfFile.toFile());    SubnodeConfiguration section=iniFile.getSection("main");    if (section.getString("certname","").isEmpty()) {      Map<String,String> codenvyProperties=loadInstalledCodenvyConfig().getProperties();      if (codenvyProperties.containsKey(Config.PUPPET_MASTER_HOST_NAME)) {        return codenvyProperties.get(Config.PUPPET_MASTER_HOST_NAME);      }      throw new IllegalStateException("There is no puppet master host name in the configuration");    }    return section.getString("certname");  } catch (  ConfigurationException e) {    throw new IOException(e);  }}  }
class C{  private static boolean CallBooleanMethod(JNIEnvironment env,int objJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallBooleanMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(obj,methodID,TypeReference.Boolean,false);    return Reflection.unwrapBoolean(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return false;  }}  }
class C{  public boolean isLockSyssuperuser(){  boolean isLockSyssuperuser=false;  try {    String qual="WHERE " + UasDaoUserTbl.CD_ID.getName() + " =0";    int stat=DbSelectFns.selectLongInteger(null,"IUSERUSERHDR","STAT",qual);    if (stat > 0)     isLockSyssuperuser=true;  } catch (  Exception e) {    _logger.debug(e);  } finally {    System.out.println();  }  return isLockSyssuperuser;}  }
class C{  private static String formatSetContents(Set<?> set){  for (  Object obj : set) {    if (!Primitives.isWrapperType(obj.getClass()) && !(obj instanceof String)) {      return "\n        " + Joiner.on(",\n        ").join(set);    }  }  return " " + set;}  }
class C{  public void fireQueueSimulationInitializedEvent(){  MobsimInitializedEvent<Mobsim> event=new MobsimInitializedEvent<>(sim);  MobsimInitializedListener[] listener=this.listenerList.getListeners(MobsimInitializedListener.class);  for (  MobsimInitializedListener aListener : listener) {    aListener.notifyMobsimInitialized(event);  }}  }
class C{  public static void addInputLine(String input){  if (input == null) {    return;  }synchronized (monitor) {    String line=input + "\n";    for (    byte b : line.getBytes()) {      singleton.data.add((Byte)b);    }    singleton.endReached=false;  }}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public void start(@NonNull Activity activity){  start(activity,REQUEST_CROP);}  }
class C{  private boolean cleanUpFile(File file){  if (file.exists()) {    return file.delete();  }  return true;}  }
class C{  public void createVoucher(String indexNum,Map<Installment,Map<String,BigDecimal>> amounts,String transaction){  LOGGER.info("createVoucher: IndexNumber==>" + indexNum + " amounts==>"+ amounts+ "actionName==>"+ transaction);  Map<String,Map<String,BigDecimal>> resultMap=prepareDemandForGlcode(amounts);  Map<String,BigDecimal> arrearsDemandMap=resultMap.get(ARREARS_DEMAND);  Map<String,BigDecimal> currentDemandMap=resultMap.get(CURRENT_DEMAND);  HashMap<String,Object> headerdetails=createHeaderDetails(indexNum,transaction);  List<HashMap<String,Object>> accountDetList=new ArrayList<HashMap<String,Object>>();  try {    for (    Map.Entry<String,BigDecimal> arrearsDemand : arrearsDemandMap.entrySet()) {      if (arrearsDemand.getValue().compareTo(BigDecimal.ZERO) == 1) {        accountDetList.add(createAccDetailmap(GLCODEMAP_FOR_ARREARTAX.get(arrearsDemand.getKey()),arrearsDemand.getValue().abs(),BigDecimal.ZERO));        accountDetList.add(createAccDetailmap(GLCODEMAP_FOR_TAX_PAYABLE.get(arrearsDemand.getKey()),BigDecimal.ZERO,arrearsDemand.getValue().abs()));      } else       if (arrearsDemand.getValue().compareTo(BigDecimal.ZERO) == -1) {        accountDetList.add(createAccDetailmap(GLCODEMAP_FOR_ARREARTAX.get(arrearsDemand.getKey()),BigDecimal.ZERO,arrearsDemand.getValue().abs()));        accountDetList.add(createAccDetailmap(GLCODEMAP_FOR_TAX_PAYABLE.get(arrearsDemand.getKey()),arrearsDemand.getValue().abs(),BigDecimal.ZERO));      }    }    for (    Map.Entry<String,BigDecimal> currentDemand : currentDemandMap.entrySet()) {      if (currentDemand.getValue().compareTo(BigDecimal.ZERO) == 1) {        accountDetList.add(createAccDetailmap(GLCODEMAP_FOR_CURRENTTAX.get(currentDemand.getKey()),currentDemand.getValue().abs(),BigDecimal.ZERO));        accountDetList.add(createAccDetailmap(GLCODEMAP_FOR_TAX_PAYABLE.get(currentDemand.getKey()),BigDecimal.ZERO,currentDemand.getValue().abs()));      } else       if (currentDemand.getValue().compareTo(BigDecimal.ZERO) == -1) {        if (currentDemand.getKey().equalsIgnoreCase(PropertyTaxConstants.DEMANDRSN_CODE_ADVANCE)) {          accountDetList.add(createAccDetailmap(PropertyTaxConstants.GLCODE_FOR_ADVANCE,BigDecimal.ZERO,currentDemand.getValue().abs()));          accountDetList.add(createAccDetailmap(PropertyTaxConstants.GLCODE_FOR_ADVANCE,currentDemand.getValue().abs(),BigDecimal.ZERO));        } else {          accountDetList.add(createAccDetailmap(GLCODEMAP_FOR_CURRENTTAX.get(currentDemand.getKey()),BigDecimal.ZERO,currentDemand.getValue().abs()));          accountDetList.add(createAccDetailmap(GLCODEMAP_FOR_TAX_PAYABLE.get(currentDemand.getKey()),currentDemand.getValue().abs(),BigDecimal.ZERO));        }      }    }    CVoucherHeader cvh=createVoucher.createVoucher(headerdetails,accountDetList,new ArrayList<HashMap<String,Object>>());    if (cvh == null) {      LOGGER.error("Voucher Creation failed. CVoucherHeader is null.");      throw new ApplicationRuntimeException("Voucher Creation failed.");    }    LOGGER.info("createVoucherForPTIS(): Voucher is created for PTIS with the voucher number : " + cvh.getVoucherNumber());  } catch (  Throwable t) {    LOGGER.error(t.getMessage(),t);    throw new ApplicationRuntimeException("Unable to create a voucher.",t);  }}  }
class C{  @Override public boolean dispatchKeyEvent(KeyEvent event){  boolean useVolumeKeys=PreferenceManager.getDefaultSharedPreferences(this).getBoolean(Settings.KEY_PREF_USE_HARDWARE_VOLUME_KEYS,Settings.DEFAULT_PREF_USE_HARDWARE_VOLUME_KEYS);  if (useVolumeKeys) {    int action=event.getAction();    int keyCode=event.getKeyCode();switch (keyCode) {case KeyEvent.KEYCODE_VOLUME_UP:      if (action == KeyEvent.ACTION_DOWN) {        new Application.SetVolume(GlobalType.IncrementDecrement.INCREMENT).execute(hostManager.getConnection(),null,null);      }    return true;case KeyEvent.KEYCODE_VOLUME_DOWN:  if (action == KeyEvent.ACTION_DOWN) {    new Application.SetVolume(GlobalType.IncrementDecrement.DECREMENT).execute(hostManager.getConnection(),null,null);  }return true;}}return super.dispatchKeyEvent(event);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TFORMAL_PARAMETER__ANNOTATIONS:    return annotations != null && !annotations.isEmpty();case TypesPackage.TFORMAL_PARAMETER__AST_ELEMENT:  return astElement != null;case TypesPackage.TFORMAL_PARAMETER__VARIADIC:return variadic != VARIADIC_EDEFAULT;case TypesPackage.TFORMAL_PARAMETER__TYPE_REF:return typeRef != null;}return super.eIsSet(featureID);}  }
class C{  public static synchronized void trace(Item item,String pattern,Object... args){  Clock.assertStopped();  if (isEnabled(item)) {    printf(item,pattern + "%n",args);  }}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  @Override public int index(double value){  throw new UnsupportedOperationException("It is no obvious what to return here. Probably you want to use a linear discretizer with bin width 1.0");}  }
class C{  public static Printer create(Printer printer,String prefix){  if (prefix == null || prefix.equals("")) {    return printer;  }  return new PrefixPrinter(printer,prefix);}  }
class C{  public void computePackageFragmentRoots(IClasspathEntry[] resolvedClasspath,ObjectVector accumulatedRoots,HashSet rootIDs,IClasspathEntry referringEntry,boolean retrieveExportedRoots,Map rootToResolvedEntries) throws JavaModelException {  if (referringEntry == null) {    rootIDs.add(rootID());  }  for (int i=0, length=resolvedClasspath.length; i < length; i++) {    computePackageFragmentRoots(resolvedClasspath[i],accumulatedRoots,rootIDs,referringEntry,retrieveExportedRoots,rootToResolvedEntries);  }}  }
class C{  public ProxyConfig(Type type,String host,int port,String user,String password,boolean expectContinue){  this(type,host,port,user,password,expectContinue,Collections.emptySet());}  }
class C{  @RequestMapping(value="/account",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<String> saveAccount(@RequestBody UserDTO userDTO){  Optional<User> existingUser=userRepository.findOneByEmail(userDTO.getEmail());  if (existingUser.isPresent() && (!existingUser.get().getLogin().equalsIgnoreCase(userDTO.getLogin()))) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("user-management","emailexists","Email already in use")).body(null);  }  return userRepository.findOneByLogin(SecurityUtils.getCurrentUserLogin()).map(null).orElseGet(null);}  }
class C{  public BasicColorBlockExtractor(java.awt.image.BufferedImage image){  if (image == null) {    String message=Logging.getMessage("nullValue.ImageIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.width=image.getWidth();  this.height=image.getHeight();  this.image=image;  this.buffer=new int[16];}  }
class C{  public static final void sort(int[] a,double[] b,int begin,int end){  mergesort(a,b,begin,end - 1);}  }
class C{  protected int diff_commonOverlap(String text1,String text2){  int text1_length=text1.length();  int text2_length=text2.length();  if (text1_length == 0 || text2_length == 0) {    return 0;  }  if (text1_length > text2_length) {    text1=text1.substring(text1_length - text2_length);  } else   if (text1_length < text2_length) {    text2=text2.substring(0,text1_length);  }  int text_length=Math.min(text1_length,text2_length);  if (text1.equals(text2)) {    return text_length;  }  int best=0;  int length=1;  while (true) {    String pattern=text1.substring(text_length - length);    int found=text2.indexOf(pattern);    if (found == -1) {      return best;    }    length+=found;    if (found == 0 || text1.substring(text_length - length).equals(text2.substring(0,length))) {      best=length;      length++;    }  }}  }
class C{  public List<CompoundCurve3D> parseResourceString(Context context,int resourceId){  InputStream rawResource=context.getResources().openRawResource(resourceId);  String l;  BufferedReader r=new BufferedReader(new InputStreamReader(rawResource));  StringBuilder s=new StringBuilder();  try {    while ((l=r.readLine()) != null) {      s.append(l + "\n");    }    rawResource.close();    r.close();  } catch (  IOException e) {  }  return parseString(s.toString());}  }
class C{  @Deprecated protected final void removeOperator(Operator operator){  throw new UnsupportedOperationException("removeOperator is deprecated. Use getSubprocess(int).removeOperator()");}  }
class C{  public GeoLocation[] boundingCoordinates(double distance,double radius){  if (radius < 0d || distance < 0d)   throw new IllegalArgumentException();  double radDist=distance / radius;  double minLat=radLat - radDist;  double maxLat=radLat + radDist;  double minLon, maxLon;  if (minLat > MIN_LAT && maxLat < MAX_LAT) {    double deltaLon=Math.asin(Math.sin(radDist) / Math.cos(radLat));    minLon=radLon - deltaLon;    if (minLon < MIN_LON)     minLon+=2d * Math.PI;    maxLon=radLon + deltaLon;    if (maxLon > MAX_LON)     maxLon-=2d * Math.PI;  } else {    minLat=Math.max(minLat,MIN_LAT);    maxLat=Math.min(maxLat,MAX_LAT);    minLon=MIN_LON;    maxLon=MAX_LON;  }  return new GeoLocation[]{fromRadians(minLat,minLon),fromRadians(maxLat,maxLon)};}  }
class C{  public InterfaceMemberDeclaration_ createInterfaceMemberDeclaration_(){  InterfaceMemberDeclaration_Impl interfaceMemberDeclaration_=new InterfaceMemberDeclaration_Impl();  return interfaceMemberDeclaration_;}  }
class C{  public void waitForFrame(String jumpLabel) throws IOException {  writeCode(WAIT_FOR_FRAME_2);  out.writeUI16(1);  int here=(int)out.getBytesWritten();  out.writeUI8(0);  if (skips == null) {    skips=new ArrayList();  }  skips.add(new Object[]{jumpLabel,new int[]{count,here}});}  }
class C{  public boolean process(String parameter){  long start=System.currentTimeMillis();  StringBuffer param=new StringBuffer(parameter);  param.append("&PARTNER=").append(p_mpp.getPartnerID()).append("&VENDOR=").append(p_mpp.getVendorID()).append("&USER=").append(p_mpp.getUserID()).append("&PWD=").append(p_mpp.getPassword());  log.fine("-> " + param.toString());  int rc=m_pp.CreateContext(p_mpp.getHostAddress(),p_mpp.getHostPort(),getTimeout(),p_mpp.getProxyAddress(),p_mpp.getProxyPort(),p_mpp.getProxyLogon(),p_mpp.getProxyPassword());  String response=m_pp.SubmitTransaction(param.toString());  m_pp.DestroyContext();  long ms=System.currentTimeMillis() - start;  log.fine("<- " + ms + "ms - "+ rc+ " - "+ response);  p_mp.setR_Result("");  p_mp.setR_Info(response);  StringTokenizer st=new StringTokenizer(response,"&",false);  while (st.hasMoreTokens()) {    String token=st.nextToken();    int pos=token.indexOf('=');    String name=token.substring(0,pos);    String value=token.substring(pos + 1);    if (name.equals("RESULT")) {      p_mp.setR_Result(value);      m_ok=RESULT_OK.equals(value);    } else     if (name.equals("PNREF"))     p_mp.setR_PnRef(value); else     if (name.equals("RESPMSG"))     p_mp.setR_RespMsg(value); else     if (name.equals("AUTHCODE"))     p_mp.setR_AuthCode(value); else     if (name.equals("AVSADDR"))     p_mp.setR_AvsAddr(value); else     if (name.equals("AVSZIP"))     p_mp.setR_AvsZip(value); else     if (name.equals("IAVS"))     ; else     if (name.equals("CVV2MATCH"))     ; else     log.log(Level.SEVERE,"Response unknown = " + token);  }  return m_ok;}  }
class C{  public final BooleanProperty customTitleBarProperty(){  return customTitleBarProperty;}  }
class C{  private void addObjectsToBuilder(@NotNull StringBuilder builder,@NotNull List<String> objects,@NotNull ObjectTypes type){  Preconditions.checkArgument(objects.size() >= 1);  for (  String s : objects) {    if (objects.indexOf(s) != 0) {      builder.append(" , ");    }    builder.append(encapsulateObject(s,type));  }}  }
class C{  public static void wtf(String tag,Throwable tr){  wtf(tag,null,tr);}  }
class C{  public final int exponent(){  return this.exponent;}  }
class C{  public IElementType captureFormat(){  popState();  CharSequence buffer=getBuffer();  int tokenStart=getTokenEnd();  setTokenStart(tokenStart);  int bufferEnd=getBufferEnd();  int currentPosition=tokenStart;  int linePos=currentPosition;  while (true) {    while (linePos < bufferEnd && buffer.charAt(linePos) != '\n' && buffer.charAt(linePos) != '\r') {      linePos++;    }    int lineContentsEnd=linePos;    if (linePos < bufferEnd && buffer.charAt(linePos) == '\r') {      linePos++;    }    if (linePos < bufferEnd && buffer.charAt(linePos) == '\n') {      linePos++;    }    if (lineContentsEnd == currentPosition + 1 && buffer.charAt(currentPosition) == '.') {      preparsedTokensList.clear();      preparsedTokensList.add(new CustomToken(currentPosition,lineContentsEnd,FORMAT_TERMINATOR));      if (currentPosition > tokenStart) {        setTokenStart(tokenStart);        setTokenEnd(currentPosition);        return FORMAT;      } else {        return getPreParsedToken();      }    } else     if (linePos == bufferEnd) {      if (currentPosition > tokenStart) {        setTokenStart(tokenStart);        setTokenEnd(currentPosition);        return FORMAT;      } else {        return null;      }    }    currentPosition=linePos;  }}  }
class C{  @Inject DistributedDatabaseSchedulingService(AlertService alertService,UserService userService,ServiceManagementService serviceManagementRecordService,AuditService auditService,SystemConfiguration config,DistributedSchedulingLockService distributedSchedulingLockService){  super(config);  requireArgument(alertService != null,"Alert service cannot be null.");  requireArgument(userService != null,"User service cannot be null.");  requireArgument(serviceManagementRecordService != null,"Service management record service cannot be null.");  requireArgument(auditService != null,"Audit service cannot be null.");  requireArgument(config != null,"System configuration cannot be null.");  _alertService=alertService;  _userService=userService;  _serviceManagementRecordService=serviceManagementRecordService;  _auditService=auditService;  _configuration=config;  _distributedSchedulingService=distributedSchedulingLockService;}  }
class C{  public static boolean isFileValid(@Nullable File file){  return file != null && file.exists();}  }
class C{  public CompiledST compile(String srcName,String name,List<FormalArgument> args,String template,Token templateToken){  Compiler c=new Compiler(this);  return c.compile(srcName,name,args,template,templateToken);}  }
class C{  public EffectWeightedRandomList concat(@Nonnull List<WeightedEffect> other){  effects.addAll(other);  return this;}  }
class C{  public boolean onUpdate(){  Entity ent=lightSource.getAttachmentEntity();  if (!ent.isEntityAlive()) {    return true;  }  if (hasEntityMoved(ent)) {    ent.worldObj.checkLightFor(EnumSkyBlock.BLOCK,new BlockPos(x,y,z));    ent.worldObj.checkLightFor(EnumSkyBlock.BLOCK,new BlockPos(prevX,prevY,prevZ));  }  return false;}  }
class C{  public static SourceCallTree v(){  if (v == null)   v=new SourceCallTree();  return v;}  }
class C{  public int switchMode(boolean forward){  if (type.hasModes()) {    int nMode=0;    if (pendingMode > -1) {      if (forward) {        nMode=(pendingMode + 1) % type.getModesCount();      } else {        nMode=(pendingMode - 1);        if (nMode < 0) {          nMode=type.getModesCount() - 1;        }      }    } else {      if (forward) {        nMode=(mode + 1) % type.getModesCount();      } else {        nMode=(mode - 1);        if (nMode < 0) {          nMode=type.getModesCount() - 1;        }      }    }    setMode(nMode);    return nMode;  }  return -1;}  }
class C{  public boolean forEach(LongProcedure procedure){  long[] theElements=elements;  int theSize=size;  for (int i=0; i < theSize; )   if (!procedure.apply(theElements[i++]))   return false;  return true;}  }
class C{  public PollingWait pollEvery(long timeAmount,@Nonnull TimeUnit timeUnit){  if (timeAmount <= 0) {    throw new IllegalArgumentException("Invalid timeAmount: " + timeAmount + " -- must be greater than 0");  }  pollIntervalMillis=timeUnit.toMillis(timeAmount);  return this;}  }
class C{  public void increment(int position,long value){  assert value >= 0;  if (position >= mHistogram.length) {    mHistogram=Arrays.copyOf(mHistogram,position + 1);  }  mHistogram[position]+=value;}  }
class C{  @Override public XYItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,XYPlot plot,XYDataset dataset,PlotRenderingInfo info){  return new XYItemRendererState(info);}  }
class C{  public void rollback() throws SQLException {  conn.rollback();}  }
class C{  public void testTableSize(){  int numParents=RandomUtil.getInstance().nextInt(5);  List parents=new ArrayList();  for (int i=0; i < numParents; i++) {    parents.add(new IndexedParent(1,2));  }  BooleanFunction function=new BooleanFunction((IndexedParent[])parents.toArray(new IndexedParent[0]));  int size=1;  for (int i=0; i < numParents; i++) {    size*=2;  }  assertEquals(size,function.getNumRows());}  }
class C{  public Builder deleteRoles(List<String> deleteRoles){  this.deleteRoles=deleteRoles;  return this;}  }
class C{  public void removeControlListener(Control cl){  m_controls.remove(cl);}  }
class C{  public void start(){  if (hasVibratePermission(mContext)) {    mVibrator=(Vibrator)mContext.getSystemService(Service.VIBRATOR_SERVICE);  }  mIsGloballyEnabled=checkGlobalSetting(mContext);  Uri uri=Settings.System.getUriFor(Settings.System.HAPTIC_FEEDBACK_ENABLED);  mContext.getContentResolver().registerContentObserver(uri,false,mContentObserver);}  }
class C{  public boolean keepCarriageReturns(){  return keepCR;}  }
class C{  public void addUrl(View view){  if (mIsEditTextVisible) {    UiUtils.hideEditText(mUrlEditText);    mIsEditTextVisible=false;    int animRedId=R.anim.fab_rotate_backward;    mAddFab.startAnimation(AnimationUtils.loadAnimation(this,animRedId));    UiUtils.hideFab(mDownloadFab);  } else {    UiUtils.revealEditText(mUrlEditText);    mIsEditTextVisible=true;    mUrlEditText.requestFocus();    int animRedId=R.anim.fab_rotate_forward;    mAddFab.startAnimation(AnimationUtils.loadAnimation(this,animRedId));  }}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public GenericNotation(String name,String pubId,String sysId,AbstractDocument owner){  ownerDocument=owner;  setNodeName(name);  setPublicId(pubId);  setSystemId(sysId);}  }
class C{  public static String httpGetString(String httpUrl){  HttpResponse response=httpGet(new HttpRequest(httpUrl));  return response == null ? null : response.getResponseBody();}  }
class C{  protected void onShow(){}  }
class C{  public FileContext(URI inputPath,URI outputPath,Options options){  super(inputPath,outputPath,options);}  }
class C{  public void rollback(Savepoint s) throws SQLException {  conn.rollback(s);}  }
class C{  public boolean nextConflict() throws SQLException {  boolean bool=false;  crsSync.setShowDeleted(true);  while (crsSync.next()) {    crsRes.previous();    rowStatus++;    if ((rowStatus - 1) >= stats.size()) {      bool=false;      break;    }    if (((Integer)stats.get(rowStatus - 1)).intValue() == SyncResolver.NO_ROW_CONFLICT) {      ;    } else {      bool=true;      break;    }  }  crsSync.setShowDeleted(false);  return bool;}  }
class C{  public VisionWorldModelEvent(final VisionWorldModel source,final SensorMatrix oldSensorMatrix,final SensorMatrix sensorMatrix){  super(source);  if (oldSensorMatrix == null) {    throw new IllegalArgumentException("oldSensorMatrix must not be null");  }  if (sensorMatrix == null) {    throw new IllegalArgumentException("sensorMatrix must not be null");  }  this.oldPixelMatrix=null;  this.pixelMatrix=null;  this.oldSensorMatrix=oldSensorMatrix;  this.sensorMatrix=sensorMatrix;}  }
class C{  public void writeOutputFiles(String ditaOutputDir,String outputDir,boolean lenient){  if (asDocUtil.isErrors()) {    if (outputDir.endsWith(File.separator)) {      errorFile=outputDir + errorFile;    } else {      errorFile=outputDir + File.separator + errorFile;    }    try {      FileUtil.writeFile(errorFile,asDocUtil.getValidationErrors());    } catch (    IOException ex) {      System.out.println("Error in writing error file " + ex.getMessage());    }    ThreadLocalToolkit.log(new ValidationMessage(errorFile));    if (!lenient) {      return;    }  }  String ditaDTDLoc="";  NodeList ditaDTDDirList=asDocConfig.getElementsByTagName("ditaDTDDir");  if (ditaDTDDirList != null && ditaDTDDirList.getLength() != 0) {    ditaDTDLoc=ditaDTDDirList.item(0).getTextContent();  }  TreeSet<String> packageNames=new TreeSet<String>(new SortComparator());  TransformerFactory transfac=TransformerFactory.newInstance();  Transformer trans=null;  try {    trans=transfac.newTransformer();    trans.setOutputProperty(OutputKeys.ENCODING,"UTF-8");    trans.setOutputProperty(OutputKeys.INDENT,"no");    if (!ditaDTDLoc.equals("")) {      trans.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM,ditaDTDLoc + "/" + "adobeAPIPackage.dtd");    }  } catch (  Exception ex) {    ex.printStackTrace(System.err);  }  StringWriter sw=null;  StreamResult result=null;  DOMSource source=null;  String fileName=null;  Element packages=asDocUtil.getElementByTagName(root,"packages");  if (packages != null) {    NodeList apiPackageList=packages.getElementsByTagName("apiPackage");    OutputStreamWriter osw=null;    if (apiPackageList != null && apiPackageList.getLength() != 0) {      for (int packageCount=0; packageCount < apiPackageList.getLength(); packageCount++) {        Element apiPackage=(Element)apiPackageList.item(packageCount);        String id=apiPackage.getAttribute("id");        fileName=ditaOutputDir + File.separator + id+ ".xml";        source=new DOMSource(apiPackage);        try {          sw=new StringWriter();          result=new StreamResult(sw);          trans.transform(source,result);          String xmlString=sw.toString();          Pattern pattern=Pattern.compile("\r");          Matcher match=pattern.matcher(xmlString);          xmlString=match.replaceAll("");          pattern=Pattern.compile("\n\n");          match=pattern.matcher(xmlString);          xmlString=match.replaceAll("\n");          xmlString=xmlString.replaceAll("<!\\[CDATA\\[","");          xmlString=xmlString.replaceAll("\\]\\]>","");          xmlString=xmlString.replaceAll("<mxml>","<mxml><!\\[CDATA\\[");          xmlString=xmlString.replaceAll("</mxml>","\\]\\]></mxml>");          osw=new OutputStreamWriter(new BufferedOutputStream(new FileOutputStream(fileName)),"UTF-8");          osw.write(xmlString,0,xmlString.length());        } catch (        Exception ex) {          ex.printStackTrace(System.err);        } finally {          try {            if (osw != null) {              osw.close();            }          } catch (          IOException ex) {            ex.printStackTrace();          }        }        packageNames.add(id);      }    }    Element apiMap=asDocUtil.createApiMap(packageNames,outputObject);    String ditaTOC="packages.dita";    try {      fileName=ditaOutputDir + File.separator + ditaTOC;      result=new StreamResult(new BufferedOutputStream(new FileOutputStream(fileName)));      source=new DOMSource(apiMap);      trans.transform(source,result);    } catch (    Exception ex) {      ex.printStackTrace(System.err);    }  }}  }
class C{  public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY,int overX,int overY){  if (mFlywheel && !isFinished()) {    float oldVelocityX=mScrollerX.mCurrVelocity;    float oldVelocityY=mScrollerY.mCurrVelocity;    if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {      velocityX+=oldVelocityX;      velocityY+=oldVelocityY;    }  }  mScrollerX.mMode=mScrollerY.mMode=FLING_MODE;  mScrollerX.fling(startX,velocityX,minX,maxX,overX);  mScrollerY.fling(startY,velocityY,minY,maxY,overY);}  }
class C{  public EventRaisingExpression createEventRaisingExpression(){  EventRaisingExpressionImpl eventRaisingExpression=new EventRaisingExpressionImpl();  return eventRaisingExpression;}  }
class C{  public XYDotRenderer(){  super();  this.dotWidth=1;  this.dotHeight=1;  this.legendShape=new Rectangle2D.Double(-3.0,-3.0,6.0,6.0);}  }
class C{  @Override public final FastVector<E> copy(){  return Utils.cast(clone());}  }
class C{  protected void fireDOMFocusInEvent(EventTarget target,EventTarget relatedTarget){  DocumentEvent docEvt=(DocumentEvent)((Element)target).getOwnerDocument();  DOMUIEvent uiEvt=(DOMUIEvent)docEvt.createEvent("UIEvents");  uiEvt.initUIEventNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMFocusIn",true,false,null,0);  int limit=DefaultXBLManager.computeBubbleLimit((Node)relatedTarget,(Node)target);  ((AbstractEvent)uiEvt).setBubbleLimit(limit);  target.dispatchEvent(uiEvt);}  }
class C{  public boolean isOverflowAllowed(){  return overflowAllowed.get();}  }
class C{  private static void printGaData(GaData results){  System.out.println("printing results for profile: " + results.getProfileInfo().getProfileName());  if (results.getRows() == null || results.getRows().isEmpty()) {    System.out.println("No results Found.");  } else {    for (    ColumnHeaders header : results.getColumnHeaders()) {      System.out.printf("%30s",header.getName());    }    System.out.println();    for (    List<String> row : results.getRows()) {      for (      String column : row) {        System.out.printf("%30s",column);      }      System.out.println();    }    System.out.println();  }}  }
class C{  public static WebSocketFrame createPongFrame(byte[] payload){  return createPongFrame().setPayload(payload);}  }
class C{  public void finish() throws IOException {  checkClosed();  write();}  }
class C{  public void generateLogicalAnd(BlockScope currentScope,boolean valueRequired){  Constant condConst;  if ((this.left.implicitConversion & TypeIds.COMPILE_TYPE_MASK) == TypeIds.T_boolean) {    if ((condConst=this.left.optimizedBooleanConstant()) != Constant.NotAConstant) {      if (condConst.booleanValue() == true) {        this.left.generateCode(currentScope,false);        this.right.generateCode(currentScope,valueRequired);      } else {        this.left.generateCode(currentScope,false);        this.right.generateCode(currentScope,false);      }      return;    }    if ((condConst=this.right.optimizedBooleanConstant()) != Constant.NotAConstant) {      if (condConst.booleanValue() == true) {        this.left.generateCode(currentScope,valueRequired);        this.right.generateCode(currentScope,false);      } else {        this.left.generateCode(currentScope,false);        this.right.generateCode(currentScope,false);      }      return;    }  }  this.left.generateCode(currentScope,valueRequired);  this.right.generateCode(currentScope,valueRequired);}  }
class C{  protected ParameterizedTypeRef_IMImpl(){  super();}  }
class C{  public SessionManager(WorldEdit worldEdit){  checkNotNull(worldEdit);  this.worldEdit=worldEdit;  worldEdit.getEventBus().register(this);}  }
class C{  public StopSpec(String id){  this.id=id;}  }
class C{  private static CategoryDataset createDataset(){  DefaultCategoryDataset dataset=new DefaultCategoryDataset();  dataset.addValue(7445,"JFreeSVG","Warm-up");  dataset.addValue(24448,"Batik","Warm-up");  dataset.addValue(4297,"JFreeSVG","Test");  dataset.addValue(21022,"Batik","Test");  return dataset;}  }
class C{  public Long findCandleCount(Integer idTradingday,Integer idContract){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Object> query=builder.createQuery();    Root<Candle> from=query.from(Candle.class);    Expression<Long> id=from.get("idCandle");    Expression<Long> minExpression=builder.count(id);    List<Predicate> predicates=new ArrayList<Predicate>();    if (null != idTradingday) {      Join<Candle,Tradingday> tradingday=from.join("tradingday");      Predicate predicate=builder.equal(tradingday.get("idTradingDay"),idTradingday);      predicates.add(predicate);    }    if (null != idContract) {      Join<Candle,Contract> contract=from.join("contract");      Predicate predicate=builder.equal(contract.get("idContract"),idContract);      predicates.add(predicate);    }    query.where(predicates.toArray(new Predicate[]{}));    CriteriaQuery<Object> select=query.select(minExpression);    TypedQuery<Object> typedQuery=entityManager.createQuery(select);    Object item=typedQuery.getSingleResult();    entityManager.getTransaction().commit();    if (null == item)     item=new Long(0);    return (Long)item;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  private boolean isGitUrlCorrect(@NotNull String url){  if (WHITE_SPACE.test(url)) {    view.showUrlError(locale.importProjectMessageStartWithWhiteSpace());    return false;  }  if (SCP_LIKE_SYNTAX.test(url)) {    view.hideUrlError();    return true;  }  if (!PROTOCOL.test(url)) {    view.showUrlError(locale.importProjectMessageProtocolIncorrect());    return false;  }  if (!(HOST1.test(url) || HOST2.test(url))) {    view.showUrlError(locale.importProjectMessageHostIncorrect());    return false;  }  if (!(REPO_NAME.test(url))) {    view.showUrlError(locale.importProjectMessageNameRepoIncorrect());    return false;  }  view.hideUrlError();  return true;}  }
class C{  public void disconnected(){}  }
class C{  public BeanFactoryTypeConverter(){synchronized (BeanFactoryTypeConverter.class) {    if (defaultConversionService == null) {      defaultConversionService=new DefaultConversionService();    }  }  this.conversionService=defaultConversionService;}  }
class C{  public AttributeSelectionPanel(){  this(true,true,true,true);}  }
class C{  public DeviceAutomator launchApp(String packageName){  return launchApp(packageName,5000);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public String classify(String cps){  String modelLabel="";  int i;  intCps.clear();  StringTokenizer strTok=new StringTokenizer(cps," \t\r\n");  int count=strTok.countTokens();  for (i=0; i < count; i++) {    String cpStr=strTok.nextToken();    Integer cpInt=(Integer)data.cpStr2Int.get(cpStr);    if (cpInt != null) {      intCps.add(cpInt);    }  }  Observation obsr=new Observation(intCps);  inference.classify(obsr);  String lbStr=(String)data.lbInt2Str.get(new Integer(obsr.modelLabel));  if (lbStr != null) {    modelLabel=lbStr;  }  return modelLabel;}  }
class C{  private void swap(double a[],int i,int j){  double T;  T=a[i];  a[i]=a[j];  a[j]=T;  int t;  t=order[i];  order[i]=order[j];  order[j]=t;}  }
class C{  public void dispose(){  m_jtree.removeTreeSelectionListener(m_treeSelectionListener);  m_ctree.removeListener(m_treeCriteriumlListener);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static XPathExtractor xpath(String query){  return new XPathExtractor(query);}  }
class C{  public ObjectChunks(final long length){  this(length,CHUNK_BITS);}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String action=request.getParameter("action");switch (action != null ? action : "") {case "delete":    deleteTodo(request,response);  break;case "save":saveTodo(request,response);break;default :throw new ServletException("Unknown action");}}  }
class C{  public BackwardsFileStream(File file) throws IOException {  raf=new RandomAccessFile(file,"r");  seekPos=raf.length();}  }
class C{  public static String decode(final String str){  if (str == null) {    return "";  }  StringBuilder sb=new StringBuilder();  for (int i=0; i < str.length(); i++) {    char c=str.charAt(i);    int codepoint=str.codePointAt(i);    if (codepoint < 0x80) {      sb.append(c);      continue;    }    if (codepoint > 0xffff)     continue;    int section=codepoint >> 8;    int position=codepoint % 256;    String[] table=getCache(section);    if (table != null && table.length > position) {      String charCandidate=table[position];      if (x.str(str).get(i).equals(x.str(str).get(i).toLowerCase())) {        charCandidate=table[position].toLowerCase();      }      sb.append(charCandidate);    }  }  return sb.toString().trim();}  }
class C{  boolean disableNetwork(int netId){  return disableNetwork(netId,WifiConfiguration.DISABLED_UNKNOWN_REASON);}  }
class C{  @Override public void drawElement(Graphics sc,IMultiPoint p){  double x=p.getCoordinate(1);  double y=getHeight() - p.getCoordinate(2);  sc.setColor(Color.white);  sc.fillOval((int)x - 4,(int)y - 4,8,8);  sc.setColor(Color.black);  sc.drawOval((int)x - 4,(int)y - 4,8,8);}  }
class C{  public static int dpToPx(float val){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,val,_dm);}  }
class C{  public boolean isEnableBatchPicking(){  return false;}  }
class C{  public boolean isShutdown(){  for (  Stage stage : stages) {    if (!stage.isShutdown())     return false;  }  return true;}  }
class C{  public static int moduloSignedPowerOfTwo(int value,int spot){  if (ASSERTIONS)   assert (isSignedPowerOfTwo(spot));  if (spot == Integer.MIN_VALUE) {    return (value != Integer.MIN_VALUE) ? value : 0;  } else {    int s=(value >> 31);    return ((((value + s) ^ s) & (abs(spot) - 1)) + s) ^ s;  }}  }
class C{  public BubbleActions withDuration(int duration){  overlay.setAnimationDuration(duration);  return this;}  }
class C{  public void addAnewarray(CtClass clazz,int length){  addIconst(length);  addOpcode(ANEWARRAY);  addIndex(constPool.addClassInfo(clazz));}  }
class C{  public GlowWorld(GlowServer server,WorldCreator creator){  this.server=server;  name=creator.name();  environment=creator.environment();  worldType=creator.type();  generateStructures=creator.generateStructures();  ChunkGenerator generator=creator.generator();  storageProvider=new AnvilWorldStorageProvider(new File(server.getWorldContainer(),name));  storageProvider.setWorld(this);  populators=generator.getDefaultPopulators(this);  ticksPerAnimal=server.getTicksPerAnimalSpawns();  ticksPerMonster=server.getTicksPerMonsterSpawns();  monsterLimit=server.getMonsterSpawnLimit();  animalLimit=server.getAnimalSpawnLimit();  waterAnimalLimit=server.getWaterAnimalSpawnLimit();  ambientLimit=server.getAmbientSpawnLimit();  keepSpawnLoaded=server.keepSpawnLoaded();  populateAnchoredChunks=server.populateAnchoredChunks();  difficulty=server.getDifficulty();  maxBuildHeight=server.getMaxBuildHeight();  WorldFinalValues values=null;  values=storageProvider.getMetadataService().readWorldData();  if (values != null) {    if (values.getSeed() == 0L) {      seed=creator.seed();    } else {      seed=values.getSeed();    }    uid=values.getUuid();  } else {    seed=creator.seed();    uid=UUID.randomUUID();  }  chunks=new ChunkManager(this,storageProvider.getChunkIoService(),generator);  structures=storageProvider.getStructureDataService().readStructuresData();  server.addWorld(this);  server.getLogger().info("Preparing spawn for " + name + "...");  EventFactory.callEvent(new WorldInitEvent(this));  spawnChunkLock=keepSpawnLoaded ? newChunkLock("spawn") : null;  if (spawnLocation == null) {    Location spawn=generator.getFixedSpawnLocation(this,random);    setSpawnLocation(spawn.getBlockX(),spawn.getBlockY(),spawn.getBlockZ());  } else {    setKeepSpawnInMemory(keepSpawnLoaded);  }  server.getLogger().info("Preparing spawn for " + name + ": done");  EventFactory.callEvent(new WorldLoadEvent(this));}  }
class C{  public boolean hasMethod(){  return method != null;}  }
class C{  protected byte[] _decodeBase64(Base64Variant b64variant) throws IOException, JsonParseException {  ByteArrayBuilder builder=_getByteArrayBuilder();  while (true) {    char ch;    do {      if (_inputPtr >= _inputEnd) {        loadMoreGuaranteed();      }      ch=_inputBuffer[_inputPtr++];    } while (ch <= INT_SPACE);    int bits=b64variant.decodeBase64Char(ch);    if (bits < 0) {      if (ch == '"') {        return builder.toByteArray();      }      bits=_decodeBase64Escape(b64variant,ch,0);      if (bits < 0) {        continue;      }    }    int decodedData=bits;    if (_inputPtr >= _inputEnd) {      loadMoreGuaranteed();    }    ch=_inputBuffer[_inputPtr++];    bits=b64variant.decodeBase64Char(ch);    if (bits < 0) {      bits=_decodeBase64Escape(b64variant,ch,1);    }    decodedData=(decodedData << 6) | bits;    if (_inputPtr >= _inputEnd) {      loadMoreGuaranteed();    }    ch=_inputBuffer[_inputPtr++];    bits=b64variant.decodeBase64Char(ch);    if (bits < 0) {      if (bits != Base64Variant.BASE64_VALUE_PADDING) {        if (ch == '"' && !b64variant.usesPadding()) {          decodedData>>=4;          builder.append(decodedData);          return builder.toByteArray();        }        bits=_decodeBase64Escape(b64variant,ch,2);      }      if (bits == Base64Variant.BASE64_VALUE_PADDING) {        if (_inputPtr >= _inputEnd) {          loadMoreGuaranteed();        }        ch=_inputBuffer[_inputPtr++];        if (!b64variant.usesPaddingChar(ch)) {          throw reportInvalidBase64Char(b64variant,ch,3,"expected padding character '" + b64variant.getPaddingChar() + "'");        }        decodedData>>=4;        builder.append(decodedData);        continue;      }    }    decodedData=(decodedData << 6) | bits;    if (_inputPtr >= _inputEnd) {      loadMoreGuaranteed();    }    ch=_inputBuffer[_inputPtr++];    bits=b64variant.decodeBase64Char(ch);    if (bits < 0) {      if (bits != Base64Variant.BASE64_VALUE_PADDING) {        if (ch == '"' && !b64variant.usesPadding()) {          decodedData>>=2;          builder.appendTwoBytes(decodedData);          return builder.toByteArray();        }        bits=_decodeBase64Escape(b64variant,ch,3);      }      if (bits == Base64Variant.BASE64_VALUE_PADDING) {        decodedData>>=2;        builder.appendTwoBytes(decodedData);        continue;      }    }    decodedData=(decodedData << 6) | bits;    builder.appendThreeBytes(decodedData);  }}  }
class C{  private static void addSwatchToRow(TableRow row,View swatch,int rowNumber){  if (rowNumber % 2 == 0) {    row.addView(swatch);  } else {    row.addView(swatch,0);  }}  }
class C{  public String generate(int wordsCount,boolean startWithCommon){  Collection<String> sentences=new LinkedList<String>();  int totalWords=0;  String[] words;  if (startWithCommon) {    words=Arrays.copyOfRange(COMMON_P,0,Math.min(wordsCount,COMMON_P.length));    if (words.length > 5) {      words[4]+=',';    }    totalWords+=words.length;    sentences.add(sentence(words,'.'));  }  while (totalWords < wordsCount) {    words=sample(WORDS,Math.min(rand(3,12) * rand(1,5),wordsCount - totalWords));    totalWords+=words.length;    insertCommas(words);    sentences.add(sentence(words));  }  return StringUtil.join(sentences," ");}  }
class C{  private String createString(String f){  StringBuilder sb=new StringBuilder();switch (resType) {case cudaResourceType.cudaResourceTypeArray:    sb.append("array=" + array_array + f);  break;case cudaResourceType.cudaResourceTypeMipmappedArray:sb.append("mipmap=" + mipmap_mipmap + f);break;case cudaResourceType.cudaResourceTypeLinear:sb.append("devPtr=" + linear_devPtr + f);sb.append("format=" + linear_desc + f);sb.append("sizeInBytes=" + linear_sizeInBytes + f);break;case cudaResourceType.cudaResourceTypePitch2D:sb.append("devPtr=" + pitch2D_devPtr + f);sb.append("format=" + pitch2D_desc + f);sb.append("width=" + pitch2D_width + f);sb.append("height=" + pitch2D_height + f);sb.append("pitchInBytes=" + pitch2D_pitchInBytes + f);break;default :sb.append("INVALID");}return sb.toString();}  }
class C{  public Collection<MailAddress> processMail(MailAddress sender,MailAddress recipient,MimeMessage message) throws MessagingException {  if (recipient == null) {    throw new IllegalArgumentException("Recipient for mail to be spooled cannot be null.");  }  if (message == null) {    throw new IllegalArgumentException("Mail message to be spooled cannot be null.");  }  if (usersRepository instanceof RecipientRewriteTable) {    Mappings mappings;    try {      mappings=((RecipientRewriteTable)usersRepository).getMappings(recipient.getLocalPart(),recipient.getDomain());    } catch (    ErrorMappingException e) {      String errorBuffer="A problem as occoured trying to alias and forward user " + recipient + ": "+ e.getMessage();      throw new MessagingException(errorBuffer);    }catch (    RecipientRewriteTableException e) {      String errorBuffer="A problem as occoured trying to alias and forward user " + recipient + ": "+ e.getMessage();      throw new MessagingException(errorBuffer);    }    if (mappings != null) {      return handleMappings(mappings,sender,recipient,message);    }  }  ArrayList<MailAddress> ret=new ArrayList<MailAddress>();  ret.add(recipient);  return ret;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void putLongArray(String key,long[] value){  map.put(key,value);}  }
class C{  public Classification(String classValue){  super(classValue);}  }
class C{  public static void closeQuietly(final Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    final RuntimeException rethrown) {      throw rethrown;    }catch (    final Exception ignored) {    }  }}  }
class C{  public PopupMenuItemContextInclude(){  super("IncludeInContextX",true);}  }
class C{  @Override public void timeChanged(TimeChangeEvent event){  LocalTime oldTime=event.getOldTime();  LocalTime newTime=event.getNewTime();  String oldTimeString=PickerUtilities.localTimeToString(oldTime,"(null)");  String newTimeString=PickerUtilities.localTimeToString(newTime,"(null)");  String messageStart="\nThe time in " + timePickerName + " has changed from: ";  String fullMessage=messageStart + oldTimeString + " to: "+ newTimeString+ ".";  if (!panel.messageTextArea.getText().startsWith(messageStart)) {    panel.messageTextArea.setText("");  }  panel.messageTextArea.append(fullMessage);}  }
class C{  public static Book book(String name){  if (name.equals(DEFAULT_DB_NAME))   throw new PaperDbException(DEFAULT_DB_NAME + " name is reserved for default library name");  return getBook(name);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Container createInstance(ComponentEntry root,EditableResources res){  ArrayList<Runnable> postCreateTasks=new ArrayList<Runnable>();  Container c=(Container)createInstance(root,res,null,null,postCreateTasks);  for (  Runnable r : postCreateTasks) {    r.run();  }  return c;}  }
class C{  public static boolean isBug367599(Throwable t){  if (t instanceof FilerException) {    for (    StackTraceElement ste : t.getStackTrace()) {      if (ste.toString().contains("org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeFilerImpl.create")) {        return true;      }    }  }  if (t.getCause() != null) {    return isBug367599(t.getCause());  }  return false;}  }
class C{  public TimeValue masterNodeTimeout(){  return masterNodeTimeout;}  }
class C{  public Result regress(DiscreteVariable x,List<Node> regressors){  if (!binary(x)) {    throw new IllegalArgumentException("Target must be binary.");  }  for (  Node node : regressors) {    if (!(node instanceof ContinuousVariable || binary(node))) {      throw new IllegalArgumentException("Regressors must be continuous or binary.");    }  }  double[][] _regressors=new double[regressors.size()][getRows().length];  for (int j=0; j < regressors.size(); j++) {    int col=dataSet.getColumn(regressors.get(j));    double[] dataCol=dataCols[col];    for (int i=0; i < getRows().length; i++) {      _regressors[j][i]=dataCol[getRows()[i]];    }  }  int[] target=new int[getRows().length];  int col=dataSet.getColumn(dataSet.getVariable(x.getName()));  for (int i=0; i < getRows().length; i++) {    target[i]=dataSet.getInt(getRows()[i],col);  }  List<String> regressorNames=new ArrayList<>();  for (  Node node : regressors) {    regressorNames.add(node.getName());  }  return regress(target,x.getName(),_regressors,regressorNames);}  }
class C{  public void put(String key,Object value,int roundDPs){  roundingHT.put(key,new Integer(roundDPs));  put(key,value);}  }
class C{  @YesNoResult public static int showYesNoDialog(String message,@NotNull @Nls(capitalization=Nls.Capitalization.Title) String title,@Nullable Icon icon){  try {    if (canShowMacSheetPanel()) {      return MacMessages.getInstance().showYesNoDialog(title,message,YES_BUTTON,NO_BUTTON,null);    }  } catch (  MessageException ignored) {  }catch (  Exception reportThis) {    LOG.error(reportThis);  }  int result=showYesNoDialog(message,title,YES_BUTTON,NO_BUTTON,icon);  LOG.assertTrue(result == YES || result == NO,result);  return result;}  }
class C{  private void doTestPivotStatsFromOneShard() throws Exception {  SolrParams params=params("q","*:*","rows","0","facet","true","stats","true","facet.pivot","{!stats=s1}place_t,company_t","stats.field","{!tag=s1}solo_i","stats.field","{!tag=s1}solo_s","stats.field","{!tag=s1}solo_dt");  QueryResponse rsp=query(params);  List<PivotField> placePivots=rsp.getFacetPivot().get("place_t,company_t");  PivotField placePivot=placePivots.get(0);  assertEquals("dublin",placePivot.getValue());  assertEquals(4,placePivot.getCount());  PivotField companyPivot=placePivot.getPivot().get(2);  assertEquals("null",companyPivot.getValue());  assertEquals(3,companyPivot.getCount());  for (  PivotField pf : new PivotField[]{placePivot,companyPivot}) {    assertThereCanBeOnlyOne(pf,pf.getFieldStatsInfo().get("solo_s"),"lonely");    assertThereCanBeOnlyOne(pf,pf.getFieldStatsInfo().get("solo_i"),42.0D);    assertEquals(pf.getField() + ":" + pf.getValue()+ ": int mean",42.0D,pf.getFieldStatsInfo().get("solo_i").getMean());    Object expected=new Date(194923425000L);    assertThereCanBeOnlyOne(pf,pf.getFieldStatsInfo().get("solo_dt"),expected);    assertEquals(pf.getField() + ":" + pf.getValue()+ ": date mean",expected,pf.getFieldStatsInfo().get("solo_dt").getMean());  }}  }
class C{  public RandomSequence(Collection steps){  this(steps,false);}  }
class C{  public boolean isInterfaceMember(){  return lastRetrievedSource == IMPLEMENTED;}  }
class C{  public GammaDistr(int shape,double scale){  numGen=new GammaDistribution(shape,scale);}  }
class C{  public String asString(String charset) throws IOException {  Reader reader=buildReader(charset);  return consumeReader(reader);}  }
class C{  public boolean isBold(){  return bold;}  }
class C{  public static BufferedImage createCompatibleImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height);}  }
class C{  public static int convertToPix(float density,int sizeInDips){  float size=sizeInDips * density;  return (int)size;}  }
class C{  public void nextPhase() throws CompilationFailedException {  gotoPhase(this.phase + 1);}  }
class C{  @SuppressWarnings("rawtypes") public static void createAnnotationDocumentContent(ZipFile zip,Project aProject,RepositoryService aRepository) throws IOException {  for (Enumeration zipEnumerate=zip.entries(); zipEnumerate.hasMoreElements(); ) {    ZipEntry entry=(ZipEntry)zipEnumerate.nextElement();    String entryName=normalizeEntryName(entry);    if (entryName.startsWith(ANNOTATION_AS_SERIALISED_CAS + "/")) {      String fileName=entryName.replace(ANNOTATION_AS_SERIALISED_CAS + "/","");      String username=FilenameUtils.getBaseName(fileName).replace(".ser","");      fileName=fileName.replace(FilenameUtils.getName(fileName),"").replace("/","");      de.tudarmstadt.ukp.clarin.webanno.model.SourceDocument sourceDocument=aRepository.getSourceDocument(aProject,fileName);      File annotationFilePath=aRepository.getCasFile(sourceDocument,username);      FileUtils.copyInputStreamToFile(zip.getInputStream(entry),annotationFilePath);      LOG.info("Imported annotation document content for user [" + username + "] for source document ["+ sourceDocument.getId()+ "] in project ["+ aProject.getName()+ "] with id ["+ aProject.getId()+ "]");    }  }}  }
class C{  public PendingChange add(final PendingChange newPendingChange,final boolean forRefill){  Check.notNull(newPendingChange,"newPendingChange");  Check.notNull(newPendingChange.getServerItem(),"newPendingChange.serverItem");  PendingChange oldPendingChange=null;synchronized (lock) {    if (!forRefill) {      oldPendingChange=remove(newPendingChange);    }    addInternal(newPendingChange);  }  return oldPendingChange;}  }
class C{  public AnalysisResultSet(AnalysisRequest req,List<Map<String,Object>> result){  logger.trace("result > " + result);  results.put(TABLE,new TableLogAnalysisResult(req,result));  results.put(GRAPHIC,new GraphicLogAnalysisResult(req,result));}  }
class C{  private JSONObject putOnce(String key,Object value){  if (key != null && value != null) {    if (this.opt(key) != null) {      throw new RuntimeException("Duplicate key \"" + key + "\"");    }    this.put(key,value);  }  return this;}  }
class C{  public MPPOrderNodeNext(Properties ctx,int PP_OrderNodeNext_ID,String trxName){  super(ctx,PP_OrderNodeNext_ID,trxName);  if (PP_OrderNodeNext_ID == 0) {    setEntityType(ENTITYTYPE_UserMaintained);    setIsStdUserWorkflow(false);    setSeqNo(10);  }}  }
class C{  public static RegExpExpression regexp(Expression left,Expression right,String escape){  return new RegExpExpression(left,right,new ConstantExpression(escape));}  }
class C{  public BatchFraction defaultJobRepository(final InMemoryJobRepository<?> jobRepository){  return defaultJobRepository(jobRepository.getKey());}  }
class C{  public static void tagResources(AmazonEC2AsyncClient client,Collection<Tag> tags,String... resourceIds){  if (isAwsClientMock()) {    return;  }  CreateTagsRequest req=new CreateTagsRequest().withResources(resourceIds).withTags(tags);  client.createTags(req);}  }
class C{  public BurlapSkeleton(Object service,Class apiClass){  super(apiClass);  _service=service;}  }
class C{  public String str(){  String str=m_DTMXRTreeFrag.getDTM().getStringValue(m_dtmRoot).toString();  return (null == str) ? "" : str;}  }
class C{  public double put(float key,double value){  double previous=0;  int index=insertionIndex(key);  boolean isNewMapping=true;  if (index < 0) {    index=-index - 1;    previous=_values[index];    isNewMapping=false;  }  byte previousState=_states[index];  _set[index]=key;  _states[index]=FULL;  _values[index]=value;  if (isNewMapping) {    postInsertHook(previousState == FREE);  }  return previous;}  }
class C{  @Override public boolean execute(String sql,int[] columnIndexes) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("execute(" + quote(sql) + ", "+ quoteIntArray(columnIndexes)+ ");");    }    return executeInternal(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public ScriptingEnvironment(BridgeContext ctx){  super(ctx);  updateManager=ctx.getUpdateManager();  updateRunnableQueue=updateManager.getUpdateRunnableQueue();  addScriptingListeners(document.getDocumentElement());  addDocumentListeners();}  }
class C{  private static void drawChunk(Image image,Graphics g,boolean stretch,int dx1,int dy1,int dx2,int dy2,int sx1,int sy1,int sx2,int sy2,boolean xDirection){  if (dx2 - dx1 <= 0 || dy2 - dy1 <= 0 || sx2 - sx1 <= 0 || sy2 - sy1 <= 0) {    return;  }  if (stretch) {    g.drawImage(image,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,null);  } else {    int xSize=sx2 - sx1;    int ySize=sy2 - sy1;    int deltaX;    int deltaY;    if (xDirection) {      deltaX=xSize;      deltaY=0;    } else {      deltaX=0;      deltaY=ySize;    }    while (dx1 < dx2 && dy1 < dy2) {      int newDX2=Math.min(dx2,dx1 + xSize);      int newDY2=Math.min(dy2,dy1 + ySize);      g.drawImage(image,dx1,dy1,newDX2,newDY2,sx1,sy1,sx1 + newDX2 - dx1,sy1 + newDY2 - dy1,null);      dx1+=deltaX;      dy1+=deltaY;    }  }}  }
class C{  @Override public boolean isLeapYear(){  return IsoChronology.INSTANCE.isLeapYear(year);}  }
class C{  protected void sequence_ActionFakeDefinition(ISerializationContext context,ActionFakeDefinition semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.GAML_DEFINITION__NAME) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.GAML_DEFINITION__NAME));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getActionFakeDefinitionAccess().getNameValid_IDParserRuleCall_1_0(),semanticObject.getName());  feeder.finish();}  }
class C{  public static Path uniqueFile(Path file){  if (!Files.exists(file))   return file;  final Path folder=file.getParent();  final Pair<String,String> nameExt=getFileNameAndExt(file);  final StringBuilder sb=new StringBuilder(nameExt.value1).append(" (");  final String ext=nameExt.value2 == null ? null : '.' + nameExt.value2;  final int nameLength=sb.length();  for (int counter=2; true; counter++) {    sb.append(counter).append(')');    if (ext != null)     sb.append(ext);    file=folder.resolve(sb.toString());    if (!Files.exists(file))     return file;    sb.setLength(nameLength);  }}  }
class C{  @Override public boolean storesMixedCaseQuotedIdentifiers() throws SQLException {  debugCodeCall("storesMixedCaseQuotedIdentifiers");  String m=getMode();  return !m.equals("MySQL");}  }
class C{  public Boolean isGuestOperationsReady(){  return guestOperationsReady;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void updateVarsAndTerminals(){  if (rules == null) {    vars=new ArrayList<String>();    terminals=new ArrayList<String>();    return;  }  for (int i=0; i < rules.size(); i++) {    Rule r=rules.get(i);    updateVarsAndTerminals(r);  }}  }
class C{  public ArrayList<Face> process(ThreadChunkDeligate chunk,int chunk_x,int chunk_z){  optimisedFaces=new ArrayList<Face>();  int xmin, xmax, ymin, ymax, zmin, zmax;  Rectangle xy, xz;  xy=chunk.getXYBoundaries();  xz=chunk.getXZBoundaries();  xmin=xy.x;  xmax=xmin + xy.width;  ymin=xy.y;  ymax=ymin + xy.height;  zmin=xz.y;  zmax=zmin + xz.height;  int xs=chunk_x * 16;  int zs=chunk_z * 16;  int xe=xs + 16;  int ze=zs + 16;  if (xs < xmin)   xs=xmin;  if (xe > xmax)   xe=xmax;  if (zs < zmin)   zs=zmin;  if (ze > zmax)   ze=zmax;  for (int z=zs; z < ze; z++) {    for (int x=xs; x < xe; x++) {      for (int y=ymin; y < ymax; y++) {        short blockID=chunk.getBlockID(x,y,z);        byte blockData=chunk.getBlockData(x,y,z);        byte blockBiome=chunk.getBlockBiome(x,z);        if (blockID == 0)         continue;        if (Options.excludeBlocks.contains(blockID))         continue;        if (Options.convertOres) {          if (blockID == 14 || blockID == 15 || blockID == 16 || blockID == 21 || blockID == 56 || blockID == 73 || blockID == 74 || blockID == 129) {            blockID=1;          }        }        if (Options.objectPerBlock)         chunk_idx_count++;        try {          BlockTypes.get(blockID).getModel().addModel(this,chunk,x,y,z,blockData,blockBiome);        } catch (        Exception ex) {          Log.error("Error rendering block, skipping.",ex);        }      }    }  }  if (Options.optimiseGeometry) {    HashMap<String,ArrayList<Face>> faceAxisArray=new HashMap<String,ArrayList<Face>>();    for (    Face f : optimisedFaces) {      int planar=f.isPlanar();      if (planar == 3) {        faces.add(f);        continue;      }      String key="";switch (planar) {case 0:        key+="X ";      break;case 1:    key+="Y ";  break;case 2:key+="Z ";break;default :Log.debug("isPlanar returned an unknown value!");break;}key+=Float.toString(f.vertices[0].getByInt(planar));ArrayList<Face> faceList=getOrDefault(faceAxisArray,key,new ArrayList<Face>());faceList.add(f);faceAxisArray.put(key,faceList);}for (ArrayList<Face> faceList : faceAxisArray.values()) {faceList=mergeAxisFaces(faceList,0);faceList=mergeAxisFaces(faceList,1);faceList=mergeAxisFaces(faceList,2);for (Face face : faceList) {if (!face.remove) {faces.add(face);}}}optimisedFaces=new ArrayList<Face>();}if (Options.renderEntities) {for (TAG_Compound entity : chunk.getEntities(chunk_x,chunk_z)) {Entity handler=EntityTypes.getEntity(entity);try {if (handler != null) handler.addEntity(this,entity);} catch (Exception ex) {Log.error("Error rendering entity, skipping.",ex);}}for (TAG_Compound entity : chunk.getTileEntities(chunk_x,chunk_z)) {Entity handler=EntityTypes.getEntity(entity);try {if (handler != null) handler.addEntity(this,entity);} catch (Exception ex) {Log.error("Error rendering tyle entity, skipping.",ex);}}}for (Face face : optimisedFaces) {faces.add(face);}return faces;}  }
class C{  public boolean query(){  return query(getFrameList());}  }
class C{  public KeyPair generateKeyPair(){  if (random == null) {    random=SunJCE.getRandom();  }  if (params == null) {    try {      params=ParameterCache.getDHParameterSpec(pSize,random);    } catch (    GeneralSecurityException e) {      throw new ProviderException(e);    }  }  BigInteger p=params.getP();  BigInteger g=params.getG();  if (lSize <= 0) {    lSize=pSize >> 1;    if (lSize < 384) {      lSize=384;    }  }  BigInteger x;  BigInteger pMinus2=p.subtract(BigInteger.valueOf(2));  do {    x=new BigInteger(lSize,random);  } while ((x.compareTo(BigInteger.ONE) < 0) || ((x.compareTo(pMinus2) > 0)) || (x.bitLength() != lSize));  BigInteger y=g.modPow(x,p);  DHPublicKey pubKey=new DHPublicKey(y,p,g,lSize);  DHPrivateKey privKey=new DHPrivateKey(x,p,g,lSize);  return new KeyPair(pubKey,privKey);}  }
class C{  public Vec4 toHomogeneousDirection3(){  if (this.w == 0.0)   return this;  return new Vec4(this.x,this.y,this.z,0.0);}  }
class C{  public static double chiSquared(double[][] matrix,boolean yates){  int df=(matrix.length - 1) * (matrix[0].length - 1);  return Statistics.chiSquaredProbability(chiVal(matrix,yates),df);}  }
class C{  public double[] asDegreesArray(){  return new double[]{this.getMinLatitude().degrees,this.getMaxLatitude().degrees,this.getMinLongitude().degrees,this.getMaxLongitude().degrees};}  }
class C{  public static <T>AtomicIntegerFieldUpdater<T> newAtomicIntegerFieldUpdater(Class<T> tClass,String fieldName){  try {    return new UnsafeAtomicIntegerFieldUpdater<>(JUnsafe.getUnsafe(),tClass,fieldName);  } catch (  Throwable t) {    return AtomicIntegerFieldUpdater.newUpdater(tClass,fieldName);  }}  }
class C{  public Vector2d fma(Vector2dc a,Vector2dc b){  x+=a.x() * b.x();  y+=a.y() * b.y();  return this;}  }
class C{  public CCachedVisibilityCriterium(final VisibilityState visibilityState){  m_visibilityState=visibilityState;}  }
class C{  public void optimize(final int size){  if (size < 1)   return;  getDefaultConnector().optimize(size);  if (this.writeWebgraph)   getWebgraphConnector().optimize(size);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void save(Graph<V,E> g,String filename) throws IOException {  save(g,filename,null,null,null);}  }
class C{  @Override public MemBufferHolder<NonVolatileMemAllocator> retrieveBuffer(long phandler,boolean autoreclaim){  MemBufferHolder<NonVolatileMemAllocator> ret=null;  ByteBuffer bb=m_nvmasvc.retrieveByteBuffer(m_nid,getEffectiveAddress(phandler));  if (null != bb) {    ret=new MemBufferHolder<NonVolatileMemAllocator>(this,bb);    if (autoreclaim) {      m_bufcollector.register(ret);    }  }  return ret;}  }
class C{  public void countLocalSearchOnTest(){  tests++;}  }
class C{  public void switchRows(int from,int to,int sortColumn,boolean ascending){  log.fine(from + " - " + to+ " - "+ sortColumn+ " - "+ ascending);  if (from == to) {    log.finest("nothing to do - from == to");    return;  }  if (!(m_mTable.isRowEditable(from) && m_mTable.isRowEditable(to))) {    log.finest("row not editable - return");    return;  }  to=verifyRow(to);  if (to == -1) {    log.finest("Row range check - return");    return;  }  m_mTable.dataSave(to,false);  int lineCol=m_mTable.findColumn("Line");  if (lineCol == -1) {    lineCol=m_mTable.findColumn("SeqNo");  }  if (lineCol == -1) {    return;  }  Integer lineNoCurrentRow=null;  Integer lineNoNextRow=null;  if (m_mTable.getValueAt(from,lineCol) instanceof Integer) {    lineNoCurrentRow=(Integer)m_mTable.getValueAt(from,lineCol);    lineNoNextRow=(Integer)m_mTable.getValueAt(to,lineCol);  } else   if (m_mTable.getValueAt(from,lineCol) instanceof BigDecimal) {    lineNoCurrentRow=new Integer(((BigDecimal)m_mTable.getValueAt(from,lineCol)).intValue());    lineNoNextRow=new Integer(((BigDecimal)m_mTable.getValueAt(to,lineCol)).intValue());  } else {    log.fine("unknown value format - return");    return;  }  if (lineNoCurrentRow >= 9900 || lineNoNextRow >= 9900) {    log.fine("don't sort - might be special lines");    return;  }  m_mTable.setValueAt(lineNoCurrentRow,to,lineCol);  setCurrentRow(to,false);  m_mTable.dataSave(true);  m_mTable.setValueAt(lineNoNextRow,from,lineCol);  setCurrentRow(from,false);  m_mTable.dataSave(true);  if (sortColumn != -1) {    m_mTable.sort(sortColumn,ascending);  } else {    m_mTable.sort(lineCol,true);  }  navigate(to);}  }
class C{  public static cern.colt.list.DoubleArrayList newEquiDepthPhis(int quantiles){  cern.colt.list.DoubleArrayList phis=new cern.colt.list.DoubleArrayList(quantiles - 1);  for (int i=1; i <= quantiles - 1; i++)   phis.add(i / (double)quantiles);  return phis;}  }
class C{  public static ActivityFacilities createMeasuringPointsFromNetworkBounds(Network network,double cellSize){  BoundingBox boundingBox=BoundingBox.createBoundingBox(network);  double xMin=boundingBox.getXMin();  double xMax=boundingBox.getXMax();  double yMin=boundingBox.getYMin();  double yMax=boundingBox.getYMax();  ActivityFacilities measuringPoints=GridUtils.createGridLayerByGridSizeByBoundingBoxV2(xMin,yMin,xMax,yMax,cellSize);  return measuringPoints;}  }
class C{  private <T extends AlchemyGenericModel>ServiceCall<T> createServiceCall(final Map<String,Object> params,AlchemyAPI operation,Class<T> returnType,String... acceptedFormats){  final Map<String,Object> paramsCopy=new HashMap<String,Object>(params);  final String format=getInputFormat(paramsCopy,acceptedFormats);  final String path=AlchemyEndPoints.getPath(operation,format);  paramsCopy.put(OUTPUT_MODE,"json");  if (!paramsCopy.containsKey(LANGUAGE) && (language != LanguageSelection.DETECT)) {    paramsCopy.put(LANGUAGE,language.toString().toLowerCase());  }  paramsCopy.remove(JSONP);  final RequestBuilder requestBuilder=RequestBuilder.post(path);  for (  final String param : paramsCopy.keySet()) {    requestBuilder.form(param,paramsCopy.get(param));  }  if ((operation == AlchemyAPI.TYPED) && params.containsKey(MODEL_ID)) {    requestBuilder.query(MODEL_ID,params.get(MODEL_ID));  }  return createServiceCall(requestBuilder.build(),ResponseConverterUtils.getObject(returnType));}  }
class C{  RestaurantHolder photo(String url,GridView view){  photo(Picasso.with(mContext).load(url),view,null);  return this;}  }
class C{  public void putInFUnits(final int key,int value){  value=(int)((value * scale) + 0.5);  if (key >= 0 && key < cvt.length) {    cvt[key]=value;  } else   if (LogWriter.isRunningFromIDE) {    System.err.println("Cvt.putInFUnits(): Key out of range. (" + key + ')');  }}  }
class C{  public boolean isSet(Option option,String value){  return (values.get(option.text + value) != null);}  }
class C{  public void updateLast(Player p,Cell c){  DoubleLinkedList<Cell> list=lastMoves.get(p);  if (list == null) {    list=new DoubleLinkedList<Cell>();    lastMoves.put(p,list);  }  list.insert(c);}  }
class C{  protected void addToEndpointPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Channel_toEndpoint_feature"),getString("_UI_PropertyDescriptor_description","_UI_Channel_toEndpoint_feature","_UI_Channel_type"),EipPackage.Literals.CHANNEL__TO_ENDPOINT,true,false,true,null,null,null));}  }
class C{  public byte[] toBinary3Tight(){  BigInteger sum=Constants.BIGINT_ZERO;  for (int i=coeffs.length - 1; i >= 0; i--) {    sum=sum.multiply(BigInteger.valueOf(3));    sum=sum.add(BigInteger.valueOf(coeffs[i] + 1));  }  int size=(BigInteger.valueOf(3).pow(coeffs.length).bitLength() + 7) / 8;  byte[] arr=sum.toByteArray();  if (arr.length < size) {    byte[] arr2=new byte[size];    System.arraycopy(arr,0,arr2,size - arr.length,arr.length);    return arr2;  }  if (arr.length > size) {    arr=Arrays.copyOfRange(arr,1,arr.length);  }  return arr;}  }
class C{  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {  SCHEMES.get(iprot.getScheme()).getScheme().read(iprot,this);}  }
class C{  public DoubleSparseArrayDataRow(int size){  super(size);  values=new double[size];}  }
class C{  @Override protected void emit_iload_caload(int index){  try {    Offset offset=localOffset(index);    if (offset.EQ(Offset.zero())) {      asm.emitMOV_Reg_RegInd(T0,SP);    } else {      asm.emitMOV_Reg_RegDisp(T0,SP,offset);    }    asm.emitPOP_Reg(S0);    genBoundsCheck(asm,T0,S0);    if (VM.BuildFor32Addr) {      asm.emitMOVZX_Reg_RegIdx_Word(T1,S0,T0,SHORT,NO_SLOT);    } else {      asm.emitMOVZXQ_Reg_RegIdx_Word(T1,S0,T0,SHORT,NO_SLOT);    }    asm.emitPUSH_Reg(T1);  } catch (  UnreachableBytecodeException e) {    asm.emitINT_Imm(TRAP_UNREACHABLE_BYTECODE + RVM_TRAP_BASE);  }}  }
class C{  protected void internalTransform(Body b,String phaseName,Map options){  StmtBody body=(StmtBody)b;  boolean onlyStackVars=PhaseOptions.getBoolean(options,"only-stack-locals");  int aggregateCount=1;  if (Options.v().time())   Timers.v().aggregationTimer.start();  boolean changed=false;  Map<ValueBox,Zone> boxToZone=new HashMap<ValueBox,Zone>(body.getUnits().size() * 2 + 1,0.7f);{    Zonation zonation=new Zonation(body);    Iterator unitIt=body.getUnits().iterator();    while (unitIt.hasNext()) {      Unit u=(Unit)unitIt.next();      Zone zone=zonation.getZoneOf(u);      Iterator boxIt=u.getUseBoxes().iterator();      while (boxIt.hasNext()) {        ValueBox box=(ValueBox)boxIt.next();        boxToZone.put(box,zone);      }      boxIt=u.getDefBoxes().iterator();      while (boxIt.hasNext()) {        ValueBox box=(ValueBox)boxIt.next();        boxToZone.put(box,zone);      }    }  }  do {    if (Options.v().verbose())     G.v().out.println("[" + body.getMethod().getName() + "] Aggregating iteration "+ aggregateCount+ "...");    changed=internalAggregate(body,boxToZone,onlyStackVars);    aggregateCount++;  } while (changed);  if (Options.v().time())   Timers.v().aggregationTimer.end();}  }
class C{  @Override public SelectableChannel selectableChannel(){  return socketChannel;}  }
class C{  public void scrollRectToVisible(Rectangle r){  Insets i=getInsets();  int x0=r.x + visibility.getValue() - i.left;  int x1=x0 + r.width;  if (x0 < visibility.getValue()) {    visibility.setValue(x0);  } else   if (x1 > visibility.getValue() + visibility.getExtent()) {    visibility.setValue(x1 - visibility.getExtent());  }}  }
class C{  public double median(double[] series){  double[] clonedSeries=series.clone();  Arrays.sort(clonedSeries);  double median;  if (clonedSeries.length % 2 == 0) {    median=(clonedSeries[clonedSeries.length / 2] + (double)clonedSeries[clonedSeries.length / 2 - 1]) / 2;  } else {    median=clonedSeries[clonedSeries.length / 2];  }  return median;}  }
class C{  public boolean isXYPosition(){  Object oo=get_Value(COLUMNNAME_IsXYPosition);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void onDisconnect(){  if (isConnected()) {    onCancelAllRealtimeData();  }  this.fireConnectionClosed(false);}  }
class C{  public void onEmojiconInputEvent(CharSequence emojiContent){  editText.append(emojiContent);}  }
class C{  public SelectResults filterEvaluate(ExecutionContext context,SelectResults intermediateResults) throws FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException {  RuntimeIterator indpndntItr=null;  List currentScopeIndpndntItrs=context.getAllIndependentIteratorsOfCurrentScope();  Set rntmItrs=QueryUtils.getCurrentScopeUltimateRuntimeIteratorsIfAny(this,context);  if (rntmItrs.size() == 1 && currentScopeIndpndntItrs.size() == 1) {    indpndntItr=(RuntimeIterator)rntmItrs.iterator().next();  }  return filterEvaluate(context,intermediateResults,true,null,indpndntItr != null ? new RuntimeIterator[]{indpndntItr} : null,true,this.isConditioningNeededForIndex(indpndntItr,context,true),true);}  }
class C{  private void updateFixutreFilterCategory(int category){  Filter filter=bodyFixture.getFilter();  if (filter == Filter.DEFAULT_FILTER) {    CategoryFilter cf=new CategoryFilter(category,Integer.MAX_VALUE);    bodyFixture.setFilter(cf);  } else {    CategoryFilter cf=new CategoryFilter(category,((CategoryFilter)filter).getMask());    bodyFixture.setFilter(cf);  }}  }
class C{  public String normalizeSystemName(String systemName){  return (SerialAddress.normalizeSystemName(systemName));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean hasListenerFor(EventType eventType){  return (listenerPresent[eventType.ordinal()]);}  }
class C{  public void close(int port){  for (Iterator i=_listeners.keySet().iterator(); i.hasNext(); ) {    Object k=i.next();    Object s=_listeners.get(k);    if (s instanceof SocketHandler) {      SocketHandler sh=(SocketHandler)s;      if (port == -1 || sh.isPort(port)) {        sh.interrupt();        sh.close();        _transactions.remove(s);        _listeners.remove(k);      }    }  }}  }
class C{  public void clear(){  histogram.clear();}  }
class C{  public ParsedDescribeQuery(String sourceString,TupleExpr tupleExpr){  super(sourceString,tupleExpr);}  }
class C{  public static GeoTimeSerie standardize(GeoTimeSerie gts){  if ((TYPE.DOUBLE != gts.getType() && TYPE.LONG != gts.getType()) || 0 == gts.values) {    return gts.clone();  }  double sum=0.0D;  double sumsq=0.0D;  for (int i=0; i < gts.values; i++) {    double value=((Number)GTSHelper.valueAtIndex(gts,i)).doubleValue();    sum+=value;    sumsq+=value * value;  }  double mean=sum / (double)gts.values;  double variance=(sumsq / (double)gts.values) - (sum * sum) / ((double)gts.values * (double)gts.values);  if (gts.values > 1) {    variance=variance * ((double)gts.values) / (gts.values - 1.0D);  }  double sd=Math.sqrt(variance);  GeoTimeSerie standardized=new GeoTimeSerie(gts.lastbucket,gts.bucketcount,gts.bucketspan,gts.values);  standardized.setName(gts.getName());  standardized.setLabels(gts.getLabels());  for (int i=0; i < gts.values; i++) {    double value=((Number)GTSHelper.valueAtIndex(gts,i)).doubleValue();    value=value - mean;    if (0.0D != sd) {      value=value / sd;    }    GTSHelper.setValue(standardized,gts.ticks[i],null != gts.locations ? gts.locations[i] : GeoTimeSerie.NO_LOCATION,null != gts.elevations ? gts.elevations[i] : GeoTimeSerie.NO_ELEVATION,value,false);  }  return standardized;}  }
class C{  public boolean hasConversionScript(){  return hasExtension(GwoConversionScript.class);}  }
class C{  public final double KBRelativeInformation() throws Exception {  if (!m_ClassIsNominal) {    throw new Exception("Can't compute K&B Info score: " + "class numeric!");  }  if (m_NoPriors) {    return Double.NaN;  }  return 100.0 * KBInformation() / priorEntropy();}  }
class C{  public static void closeTerminal(Properties ctx,int terminalId,MCash cashJournal,BigDecimal cashAmount,BigDecimal checkAmount,BigDecimal cardAmount,String trxName) throws OperationException {  if (isTerminalLocked(ctx,terminalId)) {    throw new TerminalLockedException("Terminal is locked");  }  MPOSTerminal terminal=loadTerminal(ctx,terminalId,trxName);  int cashBookId=cashJournal.getC_CashBook_ID();  MCashBook cashBook=new MCashBook(ctx,cashBookId,trxName);  int currencyId=cashBook.getC_Currency_ID();  Timestamp dateAcct=cashJournal.getStatementDate();  if (MPOSTerminal.CASHBOOKTRANSFERTYPE_BankAccount.equals(terminal.getCashBookTransferType())) {    int bankAccountId=terminal.getCashTransferBankAccount_ID();    CashManager.createBankTransferCashEntry(ctx,cashJournal,cashAmount,bankAccountId,trxName);  } else   if (MPOSTerminal.CASHBOOKTRANSFERTYPE_CashBook.equals(terminal.getCashBookTransferType())) {    int toCashBookId=terminal.getCashTransferCashBook_ID();    CashTransferManager.transferFromJournalToCashBook(ctx,cashJournal,toCashBookId,currencyId,cashAmount,dateAcct,trxName);  }  if (MPOSTerminal.CHECKTRANSFERTYPE_BankAccount.equals(terminal.getCheckTransferType())) {    int fromBankAccountId=terminal.getCheck_BankAccount_ID();    int toBankAccountId=terminal.getCheckTransferBankAccount_ID();    CashTransferManager.transferBankToBank(ctx,fromBankAccountId,toBankAccountId,currencyId,checkAmount,dateAcct,trxName);  } else   if (MPOSTerminal.CHECKTRANSFERTYPE_CashBook.equals(terminal.getCheckTransferType())) {    int fromBankAccountId=terminal.getCheck_BankAccount_ID();    int toCashBookId=terminal.getCheckTransferCashBook_ID();    MCash toCashJournal=CashManager.getCashJournal(ctx,toCashBookId,trxName);    CashManager.createBankTransferCashEntry(ctx,toCashJournal,checkAmount.negate(),fromBankAccountId,trxName);  }  if (MPOSTerminal.CARDTRANSFERTYPE_BankAccount.equals(terminal.getCardTransferType())) {    int fromBankAccountId=terminal.getCard_BankAccount_ID();    int toBankAccountId=terminal.getCard_BankAccount_ID();    CashTransferManager.transferBankToBank(ctx,fromBankAccountId,toBankAccountId,currencyId,cardAmount,dateAcct,trxName);  } else   if (MPOSTerminal.CARDTRANSFERTYPE_CashBook.equals(terminal.getCardTransferType())) {    int fromBankAccountId=terminal.getCard_BankAccount_ID();    int toCashBookId=terminal.getCardTransferCashBook_ID();    MCash toCashJournal=CashManager.getCashJournal(ctx,toCashBookId,trxName);    CashManager.createBankTransferCashEntry(ctx,toCashJournal,cardAmount.negate(),fromBankAccountId,trxName);  }  if (terminal.isAutoLock()) {    terminal.setLocked(true);  }  PoManager.save(terminal);}  }
class C{  private void verifyBooleanString(String propertyString,String property){  if (!(propertyString.equalsIgnoreCase("true") || propertyString.equalsIgnoreCase("false"))) {    throw new IllegalArgumentException(LocalizedStrings.DiskWriteAttributesImpl_0_PROPERTY_HAS_TO_BE_TRUE_OR_FALSE_OR_NULL_AND_CANNOT_BE_1.toLocalizedString(new Object[]{property,propertyString}));  }}  }
class C{  public TimedExpirySupport(){  this.minExpiryTime=2000;  this.maxExpiryTime=3000;}  }
class C{  @DSComment("not sensitive/not an action") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:44.567 -0500",hash_original_method="5FAF0F37EA51171D6350539680C2708B",hash_generated_method="110CF4BDE569CD145CF9EAC2D3053CD0") public void unregisterObserver(T observer){  if (observer == null) {    throw new IllegalArgumentException("The observer is null.");  }synchronized (mObservers) {    int index=mObservers.indexOf(observer);    if (index == -1) {      throw new IllegalStateException("Observer " + observer + " was not registered.");    }    mObservers.remove(index);  }}  }
class C{  public static String todayTimestamp(){  DateTime dateTimeNow=DateTime.now();  return createDateTimeString(getTwoDigitsInt(dateTimeNow.getYear()),getTwoDigitsInt(dateTimeNow.getMonthOfYear()),getTwoDigitsInt(dateTimeNow.getDayOfMonth()),true);}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public static byte[] decode(String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  public static Text valueOf(boolean b){  return b ? TRUE : FALSE;}  }
class C{  public static synchronized void reentrantOuterSemaphore(){  try {    mutex.acquire();    reentrantInnerSemaphore();  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  } finally {    mutex.release();  }}  }
class C{  public int put(K key,V val){  final Set<V> theSet;  if (theMap.containsKey(key)) {    theSet=theMap.get(key);  } else {    theSet=new HashSet<>(23);    theMap.put(key,theSet);  }  theSet.add(val);  return theSet.size();}  }
class C{  public CharStreamConsumer(InputStream stream,String charset) throws UnsupportedEncodingException {  this(new InputStreamReader(new BufferedInputStream(stream),charset));}  }
class C{  public TestMultiVocabulary(){  super();}  }
class C{  public boolean isPrime(){  return isPrime(value);}  }
class C{  public LayoutBlockRouteTableAction(String s,LayoutBlock lBlock){  super(s);  this.lBlock=lBlock;}  }
class C{  public void removeListener(DiscoveryManagerListener listener){  discoveryListeners.remove(listener);}  }
class C{  private boolean isLogLibraryAvailable(String name,String classname){  if (isDiagnosticsEnabled()) {    logDiagnostic("Checking for '" + name + "'.");  }  try {    Log log=createLogFromClass(classname,this.getClass().getName(),false);    if (log == null) {      if (isDiagnosticsEnabled()) {        logDiagnostic("Did not find '" + name + "'.");      }      return false;    } else {      if (isDiagnosticsEnabled()) {        logDiagnostic("Found '" + name + "'.");      }      return true;    }  } catch (  LogConfigurationException e) {    if (isDiagnosticsEnabled()) {      logDiagnostic("Logging system '" + name + "' is available but not useable.");    }    return false;  }}  }
class C{  public boolean hasComparison(){  return getComparison() != null;}  }
class C{  public void removeImage(final RemoveImageParams params) throws IOException {  try (DockerConnection connection=connectionFactory.openConnection(dockerDaemonUri).method("DELETE").path(apiVersionPathPrefix + "/images/" + params.getImage())){    addQueryParamIfNotNull(connection,"force",params.isForce());    final DockerResponse response=connection.request();    if (OK.getStatusCode() != response.getStatus()) {      throw getDockerException(response);    }  } }  }
class C{  public static CommandContext workingDirectory(Path path){  return workingDirectory(UniformPath.fromPath(path));}  }
class C{  public RegexTokenizer(CharSequence line,Pattern delimiterPattern,char quoteChar){  chars=line;  this.quoteChar=quoteChar;  delimiterMatcher=delimiterPattern.matcher(line);  quoteCharMatcher=Pattern.compile(Character.toString(quoteChar)).matcher(line);  for (int i=0; i < line.length(); i++) {    if (line.charAt(i) != ' ') {      position=i;      break;    }  }}  }
class C{  public <T,E extends T>void copyPropertiesOfInheritedClass(final T src,final E dest){  if (src == null)   throw new IllegalArgumentException("src can't be null");  if (dest == null)   throw new IllegalArgumentException("dest can't be null");  final Class<? extends Object> srcClz=src.getClass();  final Class<? extends Object> destClz=dest.getClass();  if (srcClz.isArray()) {    if (!destClz.isArray())     throw new IllegalArgumentException("can't copy from array to non-array class " + destClz);    final int length=Array.getLength(src);    for (int i=0; i < length; i++) {      final Object v=Array.get(src,i);      Array.set(dest,i,v);    }    return;  }  final List<Field> fields=allFields(srcClz);  final List<Field> destFields=allFields(dest.getClass());  for (  final Field field : fields) {    if (!Modifier.isStatic(field.getModifiers())) {      try {        final Object fieldObject=field.get(src);        field.setAccessible(true);        if (destFields.contains(field)) {          field.set(dest,fieldObject);        }      } catch (      final IllegalArgumentException e) {        throw new RuntimeException(e);      }catch (      final IllegalAccessException e) {        throw new RuntimeException(e);      }    }  }}  }
class C{  @Override public void exportGroupRemoveVolumes(URI protectionDevice,URI exportGroupID,List<URI> snapshotIDs,String token) throws InternalException {  TaskCompleter taskCompleter=null;  try {    ProtectionSystem rpSystem=getRPSystem(protectionDevice);    taskCompleter=new RPCGExportDeleteCompleter(exportGroupID,token);    String newToken=UUID.randomUUID().toString();    Workflow workflow=_workflowService.getNewWorkflow(this,"exportRemoveVolume",true,newToken);    addDisableImageAccessSteps(workflow,rpSystem,exportGroupID,snapshotIDs);    addExportRemoveVolumeSteps(workflow,rpSystem,exportGroupID,snapshotIDs);    String successMessage=String.format("Workflow of Export Group %s Remove Volume successfully created",exportGroupID);    workflow.executePlan(taskCompleter,successMessage);  } catch (  InternalException e) {    _log.error("Operation failed with Exception: ",e);    if (taskCompleter != null) {      taskCompleter.error(_dbClient,e);    }  }catch (  Exception e) {    _log.error("Operation failed with Exception: ",e);    if (taskCompleter != null) {      taskCompleter.error(_dbClient,DeviceControllerException.errors.jobFailed(e));    }  }}  }
class C{  public static void printNumberOfRideStatistics(String population){  LOG.info("Checking for mode 'ride'...");  int rideChains=0;  int chains=0;  int rideTrips=0;  int trips=0;  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  PopulationReader pr=new PopulationReader(sc);  pr.readFile(population);  for (  Id<Person> pid : sc.getPopulation().getPersons().keySet()) {    Plan plan=sc.getPopulation().getPersons().get(pid).getSelectedPlan();    boolean chainHasRide=false;    for (    PlanElement pe : plan.getPlanElements()) {      if (pe instanceof Leg) {        Leg leg=(Leg)pe;        if (leg.getMode().equalsIgnoreCase("ride")) {          rideTrips++;          chainHasRide=true;        }        trips++;      }    }    chains++;    if (chainHasRide) {      rideChains++;    }  }  LOG.info("Done");  LOG.info("----------------------------------------------");  LOG.info("    Total number of trips: " + trips);  LOG.info("   Trips with mode 'ride': " + rideTrips);  LOG.info("   Total number of chains: " + chains);  LOG.info("  Chains with mode 'ride': " + rideChains);  LOG.info("----------------------------------------------");}  }
class C{  public Map<String,String> parse(final String str,char[] separators){  if (separators == null || separators.length == 0) {    return new HashMap<String,String>();  }  char separator=separators[0];  if (str != null) {    int idx=str.length();    for (int i=0; i < separators.length; i++) {      int tmp=str.indexOf(separators[i]);      if (tmp != -1) {        if (tmp < idx) {          idx=tmp;          separator=separators[i];        }      }    }  }  return parse(str,separator);}  }
class C{  public static void runShellCommand(Shell shell,Command command) throws IOException {  shell.add(command);}  }
class C{  public void componentMoved(ComponentEvent e){}  }
class C{  public void addStoragePool(StoragePool pool){  this.pool=pool;}  }
class C{  private static void initializeEntitiesTables(){  for (int i=0; i < html_entities_table.length; ++i) {    htmlentities_map.put((Integer)html_entities_table[i][1],(String)html_entities_table[i][0]);    unhtmlentities_map.put((String)html_entities_table[i][0],(Integer)html_entities_table[i][1]);  }}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public boolean isAllowsUnsignedChanges(){  return allowsUnsignedChanges;}  }
class C{  public void calcSunAndMoon(){  double out[]=doCalc(getSun());  sunAz=out[0];  sunEl=out[1];  sunRise=out[2];  sunSet=out[3];  sunTransit=out[4];  sunTransitElev=out[5];  sunDist=out[8];  int niter=3;  sunRise=obtainAccurateRiseSetTransit(sunRise,2,niter,true);  sunSet=obtainAccurateRiseSetTransit(sunSet,3,niter,true);  sunTransit=obtainAccurateRiseSetTransit(sunTransit,4,niter,true);  if (sunTransit == -1) {    sunTransitElev=0;  } else {    double jd=this.jd_UT;    setUTDate(sunTransit);    out=doCalc(getSun());    sunTransitElev=out[5];    setUTDate(jd);  }  out=doCalc(getMoon());  moonAz=out[0];  moonEl=out[1];  moonRise=out[2];  moonSet=out[3];  moonTransit=out[4];  moonTransitElev=out[5];  moonDist=out[8];  double ma=moonAge;  niter=5;  moonRise=obtainAccurateRiseSetTransit(moonRise,2,niter,false);  moonSet=obtainAccurateRiseSetTransit(moonSet,3,niter,false);  moonTransit=obtainAccurateRiseSetTransit(moonTransit,4,niter,false);  if (moonTransit == -1) {    moonTransitElev=0;  } else {    double jd=this.jd_UT;    setUTDate(moonTransit);    out=doCalc(getMoon());    moonTransitElev=out[5];    setUTDate(jd);  }  moonAge=ma;}  }
class C{  public boolean removeLeadingEmptyLines(){  boolean wasEmpty=false;  Line line=this.lines;  while (line != null && line.isEmpty) {    this.removeLine(line);    line=this.lines;    wasEmpty=true;  }  return wasEmpty;}  }
class C{  public static String realFormatArray(final double[] x){  final StringBuilder sb=new StringBuilder();  sb.append("[");  for (int i=0; i < x.length; i++) {    if (i > 0) {      sb.append(", ");    }    sb.append(realFormat(x[i]));  }  sb.append("]");  return sb.toString();}  }
class C{  public static void displayLocalImage(String uri,ImageView imageView,DisplayImageOptions options){  ImageLoader.getInstance().displayImage("file://" + uri,new ImageViewAware(imageView),options,null,null);}  }
class C{  private Watcher initWatcher(SolrZkClient zkClient){  wrappedWatcher=new ProcessStateWatcher();  return zkClient.wrapWatcher(wrappedWatcher);}  }
class C{  public synchronized void internalRemoveRelationships(Primitive type){  internalRemoveRelationships(this.network.createVertex(type));}  }
class C{  private ThriftWriter openThriftWriter(String filePath) throws IOException {  ThriftWriter thriftWriter=new ThriftWriter(filePath,true);  thriftWriter.open();  return thriftWriter;}  }
class C{  public static CacheConfiguration readCacheConfiguration(BinaryRawReaderEx in){  assert in != null;  CacheConfiguration ccfg=new CacheConfiguration();  ccfg.setAtomicityMode(CacheAtomicityMode.fromOrdinal(in.readInt()));  ccfg.setAtomicWriteOrderMode(CacheAtomicWriteOrderMode.fromOrdinal((byte)in.readInt()));  ccfg.setBackups(in.readInt());  ccfg.setCacheMode(CacheMode.fromOrdinal(in.readInt()));  ccfg.setCopyOnRead(in.readBoolean());  ccfg.setEagerTtl(in.readBoolean());  ccfg.setSwapEnabled(in.readBoolean());  ccfg.setEvictSynchronized(in.readBoolean());  ccfg.setEvictSynchronizedConcurrencyLevel(in.readInt());  ccfg.setEvictSynchronizedKeyBufferSize(in.readInt());  ccfg.setEvictSynchronizedTimeout(in.readLong());  ccfg.setInvalidate(in.readBoolean());  ccfg.setStoreKeepBinary(in.readBoolean());  ccfg.setLoadPreviousValue(in.readBoolean());  ccfg.setDefaultLockTimeout(in.readLong());  ccfg.setLongQueryWarningTimeout(in.readLong());  ccfg.setMaxConcurrentAsyncOperations(in.readInt());  ccfg.setEvictMaxOverflowRatio(in.readFloat());  ccfg.setMemoryMode(CacheMemoryMode.values()[in.readInt()]);  ccfg.setName(in.readString());  ccfg.setOffHeapMaxMemory(in.readLong());  ccfg.setReadFromBackup(in.readBoolean());  ccfg.setRebalanceBatchSize(in.readInt());  ccfg.setRebalanceDelay(in.readLong());  ccfg.setRebalanceMode(CacheRebalanceMode.fromOrdinal(in.readInt()));  ccfg.setRebalanceThrottle(in.readLong());  ccfg.setRebalanceTimeout(in.readLong());  ccfg.setSqlEscapeAll(in.readBoolean());  ccfg.setSqlOnheapRowCacheSize(in.readInt());  ccfg.setStartSize(in.readInt());  ccfg.setWriteBehindBatchSize(in.readInt());  ccfg.setWriteBehindEnabled(in.readBoolean());  ccfg.setWriteBehindFlushFrequency(in.readLong());  ccfg.setWriteBehindFlushSize(in.readInt());  ccfg.setWriteBehindFlushThreadCount(in.readInt());  ccfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.fromOrdinal(in.readInt()));  ccfg.setReadThrough(in.readBoolean());  ccfg.setWriteThrough(in.readBoolean());  Object storeFactory=in.readObjectDetached();  if (storeFactory != null)   ccfg.setCacheStoreFactory(new PlatformDotNetCacheStoreFactoryNative(storeFactory));  int qryEntCnt=in.readInt();  if (qryEntCnt > 0) {    Collection<QueryEntity> entities=new ArrayList<>(qryEntCnt);    for (int i=0; i < qryEntCnt; i++)     entities.add(readQueryEntity(in));    ccfg.setQueryEntities(entities);  }  if (in.readBoolean())   ccfg.setNearConfiguration(readNearConfiguration(in));  ccfg.setEvictionPolicy(readEvictionPolicy(in));  ccfg.setAffinity(readAffinityFunction(in));  return ccfg;}  }
class C{  public void addObserver(Observer observer){  if (observer == null) {    throw new NullPointerException("observer == null");  }synchronized (this) {    if (!observers.contains(observer))     observers.add(observer);  }}  }
class C{  private void validateAutomaticExpirationNumber(String expiration){  if (expiration == null) {    return;  }  try {    int expNum=Integer.parseInt(expiration);    if (expNum < 1 || expNum > 256) {      throw APIException.badRequests.schduleInfoInvalid("automatic expiration number");    }  } catch (  Exception e) {    throw APIException.badRequests.schduleInfoInvalid("automatic expiration number");  }}  }
class C{  public static void fill(float[] a,int fromIndex,int toIndex,float val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  int crossOver(int index,E x){  int minChildIndex=findMinChild(index);  if ((minChildIndex > 0) && (ordering.compare(elementData(minChildIndex),x) < 0)) {    queue[index]=elementData(minChildIndex);    queue[minChildIndex]=x;    return minChildIndex;  }  return crossOverUp(index,x);}  }
class C{  @Override public double useKarma(final double scale){  return useKarma(-scale,scale);}  }
class C{  default boolean isEmpty(){  return false;}  }
class C{  public Quaterniond rotateTo(double fromDirX,double fromDirY,double fromDirZ,double toDirX,double toDirY,double toDirZ){  return rotateTo(fromDirX,fromDirY,fromDirZ,toDirX,toDirY,toDirZ,this);}  }
class C{  protected void append(int entries,long term) throws Throwable {  for (int i=0; i < entries; i++) {    try (TestEntry entry=serverContext.getLog().create(TestEntry.class)){      entry.setTerm(term);      serverContext.getLog().append(entry);    }   }}  }
class C{  public Boolean isIpv6EnableSettable(){  return ipv6EnableSettable;}  }
class C{  private IgniteSpiLoadBalancingSelfTestSuite(){}  }
class C{  @Override protected void initListeners(){  this.findViewById(R.id.dynamic_broadcast_receiver_bt).setOnClickListener(this);}  }
class C{  public static Path2D generateBorderShape(Rectangle bounds,int side,BorderPropertySet border,boolean drawInterior){  return generateBorderShape(bounds,side,border,drawInterior,0,1);}  }
class C{  private Type(final int sort,final char[] buf,final int off,final int len){  this.sort=sort;  this.buf=buf;  this.off=off;  this.len=len;}  }
class C{  public synchronized void stop(){  if (!mOpened) {    return;  }  if (!mStarted) {    return;  }  mVideoStartTime=0L;  mStarted=false;  mFrameProcess.interrupt();  mEventListener.onPlayerStopped();}  }
class C{  public static void startServiceIfNotRunning(Context context){  Intent intent=new Intent(context,QuasselService.class);  context.startService(intent);}  }
class C{  public void zoomAndPan(boolean magnify){  isMagnify=magnify;  hasZoomAndPanParams=true;}  }
class C{  protected void sequence_ThisTypeRefNominal_TypeRefWithModifiers_TypeRefWithoutModifiers(ISerializationContext context,ThisTypeRefNominal semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public boolean isInJavadocFormalReference(){  return false;}  }
class C{  public LinkObject(String url,Map<String,?> attributes){  this.url=url;  if (attributes != null) {    this.attributes=Collections.unmodifiableMap(new HashMap<String,Object>(attributes));  } else {    this.attributes=Collections.unmodifiableMap(new HashMap<String,Object>());  }}  }
class C{  public static String rowToString(JSONArray ja){  StringBuffer sb=new StringBuffer();  for (int i=0; i < ja.length(); i+=1) {    if (i > 0) {      sb.append(',');    }    Object object=ja.opt(i);    if (object != null) {      String string=object.toString();      if (string.length() > 0 && (string.indexOf(',') >= 0 || string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 || string.indexOf(0) >= 0 || string.charAt(0) == '"')) {        sb.append('"');        int length=string.length();        for (int j=0; j < length; j+=1) {          char c=string.charAt(j);          if (c >= ' ' && c != '"') {            sb.append(c);          }        }        sb.append('"');      } else {        sb.append(string);      }    }  }  sb.append('\n');  return sb.toString();}  }
class C{  public static void show(@NonNull ToastBean portrait,@NonNull ToastBean landscape){  mToastBeanLandscape=landscape;  mToastBeanPortrait=portrait;  Context context=portrait.mContext;  ToastBean bean;  int orientation=context.getResources().getConfiguration().orientation;  if (orientation == Configuration.ORIENTATION_PORTRAIT) {    bean=mToastBeanPortrait;  } else {    bean=mToastBeanLandscape;  }  show(bean,true);}  }
class C{  private static Address alignDown(Address addr,int modulus){  Word mask=Word.fromIntSignExtend(modulus - 1).not();  return addr.toWord().and(mask).toAddress();}  }
class C{  protected void onReleaseResources(List<ApplicationItem> data){}  }
class C{  @Override public ImmutableSet<Entry<K,V>> entrySet(){  return super.entrySet();}  }
class C{  @Override public void writeData(CarbonMessage carbonMessage,InputStream ipStream,String mediaType,int chunkSize,CarbonCallback cb){  try {    if (chunkSize == Response.NO_CHUNK || chunkSize == Response.DEFAULT_CHUNK_SIZE) {      chunkSize=DEFAULT_CHUNK_SIZE;    }    carbonMessage.setHeader(Constants.HTTP_TRANSFER_ENCODING,CHUNKED);    carbonMessage.setHeader(Constants.HTTP_CONTENT_TYPE,mediaType);    carbonMessage.setBufferContent(false);    cb.done(carbonMessage);    byte[] data=new byte[chunkSize];    int len;    while ((len=ipStream.read(data)) != -1) {      carbonMessage.addMessageBody(ByteBuffer.wrap(data,0,len));    }    ipStream.close();    carbonMessage.setEndOfMsgAdded(true);  } catch (  IOException e) {    throw new RuntimeException("Error occurred while reading from InputStream",e);  }}  }
class C{  public void endEntity(String name) throws SAXException {}  }
class C{  public void initElements(){  this.guidedTourElement=getChildElement(bodyElement,"hopscotch-bubble animated");  this.bubbleContainerElement=getChildElement(guidedTourElement,"hopscotch-bubble-container");  this.arrowElement=getChildElement(guidedTourElement,"hopscotch-bubble-arrow-container");  this.bubbleNumberElement=getChildElement(bubbleContainerElement,"hopscotch-bubble-number");  this.contentElement=getChildElement(bubbleContainerElement,"hopscotch-bubble-content");}  }
class C{  protected PropertyAssignmentAnnotationListImpl(){  super();}  }
class C{  public final void testWriteint05() throws IOException {  ByteArrayOutputStream bos=new ByteArrayOutputStream(MY_MESSAGE_LEN);  DigestOutputStream dos=new DigestOutputStream(bos,null);  dos.on(false);  for (int i=0; i < MY_MESSAGE_LEN; i++) {    dos.write(myMessage[i]);  }  assertTrue(Arrays.equals(MDGoldenData.getMessage(),bos.toByteArray()));}  }
class C{  private IgnitionEx(){}  }
class C{  private void testValueConversion() throws SQLException {  deleteDb("spatial");  Connection conn=getConnection(URL);  Statement stat=conn.createStatement();  stat.execute("CREATE ALIAS OBJ_STRING FOR \"" + TestSpatial.class.getName() + ".getObjectString\"");  ResultSet rs=stat.executeQuery("select OBJ_STRING('POINT( 15 25 )'::geometry)");  assertTrue(rs.next());  assertEquals("POINT (15 25)",rs.getString(1));  conn.close();  deleteDb("spatial");}  }
class C{  public JDABuilder useSharding(int shardId,int numShards){  if (shardId < 0 || numShards < 2 || shardId >= numShards) {    throw new RuntimeException("This configuration of shardId and numShards is not allowed! 0 <= shardId < numShards with numShards > 1");  }  sharding=new int[]{shardId,numShards};  return this;}  }
class C{  public void mailboxAdded(MailboxSession session,Mailbox mailbox){  listener.event(eventFactory.mailboxAdded(session,mailbox));}  }
class C{  private static int type(final ClassWriter cw,final String desc){  String t;  int index=desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0;switch (desc.charAt(index)) {case 'V':    return 0;case 'Z':case 'C':case 'B':case 'S':case 'I':  return INTEGER;case 'F':return FLOAT;case 'J':return LONG;case 'D':return DOUBLE;case 'L':t=desc.substring(index + 1,desc.length() - 1);return OBJECT | cw.addType(t);default :int data;int dims=index + 1;while (desc.charAt(dims) == '[') {++dims;}switch (desc.charAt(dims)) {case 'Z':data=BOOLEAN;break;case 'C':data=CHAR;break;case 'B':data=BYTE;break;case 'S':data=SHORT;break;case 'I':data=INTEGER;break;case 'F':data=FLOAT;break;case 'J':data=LONG;break;case 'D':data=DOUBLE;break;default :t=desc.substring(dims + 1,desc.length() - 1);data=OBJECT | cw.addType(t);}return (dims - index) << 28 | data;}}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public static void clear(DefaultComboBoxModel self){  self.removeAllElements();}  }
class C{  public X509Certificate engineLookupResolveX509Certificate(Element element,String baseURI,StorageResolver storage){  if (!XMLUtils.elementIsInSignatureSpace(element,Constants._TAG_RETRIEVALMETHOD)) {    return null;  }  try {    RetrievalMethod rm=new RetrievalMethod(element,baseURI);    String type=rm.getType();    XMLSignatureInput resource=resolveInput(rm,baseURI,secureValidation);    if (RetrievalMethod.TYPE_RAWX509.equals(type)) {      return getRawCertificate(resource);    }    Element e=obtainReferenceElement(resource);    if (XMLUtils.elementIsInSignatureSpace(e,Constants._TAG_RETRIEVALMETHOD)) {      if (secureValidation) {        String error="Error: It is forbidden to have one RetrievalMethod " + "point to another with secure validation";        if (log.isLoggable(java.util.logging.Level.FINE)) {          log.log(java.util.logging.Level.FINE,error);        }        return null;      }      RetrievalMethod rm2=new RetrievalMethod(e,baseURI);      XMLSignatureInput resource2=resolveInput(rm2,baseURI,secureValidation);      Element e2=obtainReferenceElement(resource2);      if (e2 == element) {        if (log.isLoggable(java.util.logging.Level.FINE)) {          log.log(java.util.logging.Level.FINE,"Error: Can't have RetrievalMethods pointing to each other");        }        return null;      }    }    return resolveCertificate(e,baseURI,storage);  } catch (  XMLSecurityException ex) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"XMLSecurityException",ex);    }  }catch (  CertificateException ex) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"CertificateException",ex);    }  }catch (  IOException ex) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"IOException",ex);    }  }catch (  ParserConfigurationException e) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"ParserConfigurationException",e);    }  }catch (  SAXException e) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"SAXException",e);    }  }  return null;}  }
class C{  public static PropertyValuesHolder ofInt(Property<?,Integer> property,int... values){  return new IntPropertyValuesHolder(property,values);}  }
class C{  public static final boolean isLeapYear(int year){  return ((year & 0x3) == 0) && ((year % 100 != 0) || (year % 400 == 0));}  }
class C{  public static synchronized void error(Throwable e){  LogFactory.getLog(getSource(e)).error(e.getMessage(),e);}  }
class C{  public boolean isAlias(){  return alias;}  }
class C{  public DtoAddressServiceImpl(final DtoFactory dtoFactory,final GenericService<Address> addressGenericService,final AdaptersRepository adaptersRepository){  super(dtoFactory,addressGenericService,adaptersRepository);}  }
class C{  public static void copyFile(File sourceFile,File destFile) throws IOException {  assert sourceFile.exists() && sourceFile.isFile();  destFile.getParentFile().mkdirs();  if (!destFile.getParentFile().exists()) {    throw new IOException("Could not make parent directories");  }  destFile.createNewFile();  if (!destFile.exists()) {    throw new IOException("Could not create destination file");  }  FileOutputStream fos=null;  FileInputStream fis=null;  try {    fos=new FileOutputStream(destFile);    fis=new FileInputStream(sourceFile);    byte[] buf=new byte[4096];    int numRead;    while ((numRead=fis.read(buf)) >= 0) {      fos.write(buf,0,numRead);    }  }  finally {    try {      if (fis != null) {        fis.close();      }    }  finally {      if (fos != null) {        fos.close();      }    }  }}  }
class C{  public static Rectangle2D convertPatternRegion(Element patternElement,Element paintedElement,GraphicsNode paintedNode,BridgeContext ctx){  String xStr=getChainableAttributeNS(patternElement,null,SVG_X_ATTRIBUTE,ctx);  if (xStr.length() == 0) {    xStr=SVG_PATTERN_X_DEFAULT_VALUE;  }  String yStr=getChainableAttributeNS(patternElement,null,SVG_Y_ATTRIBUTE,ctx);  if (yStr.length() == 0) {    yStr=SVG_PATTERN_Y_DEFAULT_VALUE;  }  String wStr=getChainableAttributeNS(patternElement,null,SVG_WIDTH_ATTRIBUTE,ctx);  if (wStr.length() == 0) {    throw new BridgeException(ctx,patternElement,ERR_ATTRIBUTE_MISSING,new Object[]{SVG_WIDTH_ATTRIBUTE});  }  String hStr=getChainableAttributeNS(patternElement,null,SVG_HEIGHT_ATTRIBUTE,ctx);  if (hStr.length() == 0) {    throw new BridgeException(ctx,patternElement,ERR_ATTRIBUTE_MISSING,new Object[]{SVG_HEIGHT_ATTRIBUTE});  }  short unitsType;  String units=getChainableAttributeNS(patternElement,null,SVG_PATTERN_UNITS_ATTRIBUTE,ctx);  if (units.length() == 0) {    unitsType=OBJECT_BOUNDING_BOX;  } else {    unitsType=parseCoordinateSystem(patternElement,SVG_PATTERN_UNITS_ATTRIBUTE,units,ctx);  }  UnitProcessor.Context uctx=UnitProcessor.createContext(ctx,paintedElement);  return convertRegion(xStr,yStr,wStr,hStr,unitsType,paintedNode,uctx);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private IntegerPolynomial mod2ToModq(IntegerPolynomial Fq,int q){  if (Util.is64BitJVM() && q == 2048) {    LongPolynomial2 thisLong=new LongPolynomial2(this);    LongPolynomial2 FqLong=new LongPolynomial2(Fq);    int v=2;    while (v < q) {      v*=2;      LongPolynomial2 temp=(LongPolynomial2)FqLong.clone();      temp.mult2And(v - 1);      FqLong=thisLong.mult(FqLong).mult(FqLong);      temp.subAnd(FqLong,v - 1);      FqLong=temp;    }    return FqLong.toIntegerPolynomial();  } else {    int v=2;    while (v < q) {      v*=2;      IntegerPolynomial temp=new IntegerPolynomial(Arrays.copyOf(Fq.coeffs,Fq.coeffs.length));      temp.mult2(v);      Fq=mult(Fq,v).mult(Fq,v);      temp.sub(Fq,v);      Fq=temp;    }    return Fq;  }}  }
class C{  private int createProgram(String vertexSource,String fragmentSource){  mVShaderHandle=loadShader(GLES20.GL_VERTEX_SHADER,vertexSource);  if (mVShaderHandle == 0) {    return 0;  }  mFShaderHandle=loadShader(GLES20.GL_FRAGMENT_SHADER,fragmentSource);  if (mFShaderHandle == 0) {    return 0;  }  int program=GLES20.glCreateProgram();  if (program != 0) {    GLES20.glAttachShader(program,mVShaderHandle);    GLES20.glAttachShader(program,mFShaderHandle);    GLES20.glLinkProgram(program);    int[] linkStatus=new int[1];    GLES20.glGetProgramiv(program,GLES20.GL_LINK_STATUS,linkStatus,0);    if (linkStatus[0] != GLES20.GL_TRUE) {      RajLog.e("Could not link program in " + getClass().getCanonicalName() + ": ");      RajLog.e(GLES20.glGetProgramInfoLog(program));      GLES20.glDeleteProgram(program);      program=0;    }  }  return program;}  }
class C{  @Realtime(limit=LINEAR) public void or(BitSet that){  long[] thatBits=(that instanceof BitSet) ? ((BitSet)that).bits : that.toLongArray();  ensureCapacity(thatBits.length);  for (int i=thatBits.length; --i >= 0; ) {    bits[i]|=thatBits[i];  }}  }
class C{  public void refreshListView(){  getDir(currentDir,listView.onSaveInstanceState());}  }
class C{  public NBTTagCompound write(NBTTagCompound nbtTags){  nbtTags.setString("gasName",getName());  return nbtTags;}  }
class C{  public LongArray(long[] array){  this(true,array);}  }
class C{  public void endDocument() throws SAXException {  if (contentHandler != null) {    contentHandler.endDocument();  }}  }
class C{  public boolean isSelectedAsDefault(){  return selectedAsDefault;}  }
class C{  public static int startsWithOne(String src,String[] dest){  for (int i=0; i < dest.length; i++) {    String m=dest[i];    if (m == null) {      continue;    }    if (src.startsWith(m)) {      return i;    }  }  return -1;}  }
class C{  @DSComment("Event associated with motion") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:10.772 -0500",hash_original_method="A056A38EFEDA7A73CC0FCCF73A42E3E9",hash_generated_method="EF7246B441D70BC6654A3D23D2C639CD") static public MotionEvent obtain(MotionEvent other){  if (other == null) {    throw new IllegalArgumentException("other motion event must not be null");  }  MotionEvent ev=obtain();  ev.mNativePtr=nativeCopy(ev.mNativePtr,other.mNativePtr,true);  return ev;}  }
class C{  public void writePersonTollToCells(){  Map<Id<Person>,Double> personTollPolicy=new HashMap<>();  SpatialDataInputs inputs=new SpatialDataInputs(LinkWeightMethod.point,policyCase);  inputs.setBoundingBox(xMin,xMax,yMin,yMax);  inputs.setTargetCRS(targetCRS);  inputs.setGridInfo(GridType.HEX,gridSize);  inputs.setShapeFile("../../../repos/shared-svn/projects/detailedEval/Net/shapeFromVISUM/urbanSuburban/cityArea.shp");  SpatialInterpolation plot=new SpatialInterpolation(inputs,runDir + "/analysis/spatialPlots/");  Scenario scPolicy=LoadMyScenarios.loadScenarioFromOutputDir(policyCase);  personTollPolicy=getPersonIdToTollPayments(scPolicy);  for (  Person p : scPolicy.getPopulation().getPersons().values()) {    Id<Person> id=p.getId();    Activity act=scPolicy.getPopulation().getFactory().createActivityFromLinkId("NA",Id.createLinkId("NA"));    for (    PlanElement pe : p.getSelectedPlan().getPlanElements()) {      if (pe instanceof Activity) {        act=(Activity)pe;        break;      }    }    double processableIntensity=0;    if (personTollPolicy.containsKey(id))     processableIntensity=-countScaleFactor * personTollPolicy.get(id); else     processableIntensity=0;    plot.processHomeLocation(act,processableIntensity);  }  plot.writeRData("tollAtHomeLocation",isWritingGGPLOTData);}  }
class C{  public void reportCompilationRate(int compiler,double rate){  if (Controller.options.LOGGING_LEVEL >= 1) {    printlnToLogWithTimePrefix("Compilation Rate (bytecode/msec) for " + CompilerDNA.getCompilerString(compiler) + " compiler: "+ rate);  }}  }
class C{  protected boolean establish(Socket socket) throws IOException {  DataInputStream in=new DataInputStream(socket.getInputStream());  DataOutputStream out=new DataOutputStream(socket.getOutputStream());  byte[] cmd=new byte[3];  cmd[0]=(byte)0x05;  cmd[1]=(byte)0x01;  cmd[2]=(byte)0x00;  out.write(cmd);  out.flush();  byte[] response=new byte[2];  in.readFully(response);  if (response[0] != (byte)0x05 || response[1] != (byte)0x00) {    return false;  }  byte[] connectionRequest=createSocks5ConnectRequest();  out.write(connectionRequest);  out.flush();  byte[] connectionResponse;  try {    connectionResponse=Socks5Utils.receiveSocks5Message(in);  } catch (  XMPPException e) {    return false;  }  connectionRequest[1]=(byte)0x00;  return Arrays.equals(connectionRequest,connectionResponse);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:38.218 -0500",hash_original_method="DF68EC2DBEDB1856460C90C9AF4C7622",hash_generated_method="B64734F5844BCD4345193A892466A394") public boolean match(final Cookie cookie,final CookieOrigin origin){  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  int port=origin.getPort();  if (cookie instanceof ClientCookie && ((ClientCookie)cookie).containsAttribute(ClientCookie.PORT_ATTR)) {    if (cookie.getPorts() == null) {      return false;    }    if (!portMatch(port,cookie.getPorts())) {      return false;    }  }  return true;}  }
class C{  public void configureManagers(){  jmri.jmrix.cmri.serial.SerialTurnoutManager t=new jmri.jmrix.cmri.serial.SerialTurnoutManager(this);  jmri.InstanceManager.setTurnoutManager(t);  setTurnoutManager(t);  jmri.jmrix.cmri.serial.SerialLightManager l=new jmri.jmrix.cmri.serial.SerialLightManager(this);  jmri.InstanceManager.setLightManager(l);  setLightManager(l);  jmri.jmrix.cmri.serial.SerialSensorManager s=new jmri.jmrix.cmri.serial.SerialSensorManager(this);  jmri.InstanceManager.setSensorManager(s);  tc.setSensorManager(s);  setSensorManager(s);}  }
class C{  public synchronized void parse(byte[] bytes) throws IOException {  List records=createRecords(bytes);  processRecords(records);}  }
class C{  public boolean equals(Object otherObject){  if (otherObject == null) {    return false;  }  if (!otherObject.getClass().equals(this.getClass())) {    return false;  }  NameValueList other=(NameValueList)otherObject;  if (hmap.size() != other.hmap.size()) {    return false;  }  Iterator<String> li=this.hmap.keySet().iterator();  while (li.hasNext()) {    String key=(String)li.next();    NameValue nv1=this.getNameValue(key);    NameValue nv2=(NameValue)other.hmap.get(key);    if (nv2 == null)     return false; else     if (!nv2.equals(nv1))     return false;  }  return true;}  }
class C{  public void write(OutputNode node,Object source) throws Exception {  String text=factory.getText(source);  if (text != null) {    node.setValue(text);  }}  }
class C{  public boolean isEmpty(){  return (mLayout == R.layout.file_details_empty || getFile() == null || mAccount == null);}  }
class C{  private void writeJsonObjectBegin(BaseContext context) throws TException {  getCurrentContext().write();  if (getCurrentContext().isMapKey()) {    pushWriter(new ByteArrayOutputStream());  }  pushContext(context);  try {    getCurrentWriter().writeStartObject();  } catch (  IOException ex) {    throw new TException(ex);  }}  }
class C{  public void addIPAddress(String vcenter,String datacenter,String cluster,String vlan,String ipAddress) throws Exception {  logger.debug("vcenter: " + vcenter + "  datacenter: "+ datacenter+ "  cluster: "+ cluster+ "  vlan: "+ vlan+ "  ipaddress: "+ ipAddress);  if (vcenter == null) {    throw new Exception("vCenter not defined");  }  if (datacenter == null) {    throw new Exception("datacenter not defined");  }  if (cluster == null) {    throw new Exception("cluster not defined");  }  if (vlan == null) {    throw new Exception("vlan not defined");  }  if (ipAddress == null) {    throw new Exception("ipaddress not defined");  }  String query="INSERT INTO IPPOOL VALUES (DEFAULT,?,?,?)";  try (Connection con=getDatasource().getConnection()){    int vlanTkey=getVLANTKey(con,vcenter,datacenter,cluster,vlan);    if (vlanTkey == -1) {      throw new SQLException("Failed to add IP address. Unknown VLAN " + vlan);    }    try (PreparedStatement stmt=con.prepareStatement(query)){      stmt.setString(1,ipAddress);      stmt.setBoolean(2,false);      stmt.setInt(3,vlanTkey);      stmt.execute();    }   } }  }
class C{  protected int contains(long[] array,long val){  for (int i=0; i < array.length; i++)   if (array[i] == val)   return i;  return -1;}  }
class C{  private void refreshPhotoList(){  mLoadMore=false;  mRecyclerView.getLayoutManager().scrollToPosition(0);  new LoadPhotoList().execute(mFragmentType);}  }
class C{  public ModbusUDPTransaction(UDPMasterConnection con){  setTerminal(con.getTerminal());}  }
class C{  protected ObjectMatrix1D viewSelectionLike(int[] offsets){  return new SelectedSparseObjectMatrix1D(this.elements,offsets);}  }
class C{  @Override public void step(SimState state){  if (tile.exit) {    Entrance e=space.exit(tile);    if (e == null) {      tile.removePed(this);      world.peds.remove(this);      return;    } else     if (e.entrance.peds.size() > 0) {      state.schedule.scheduleOnce(this,(int)(1 + tile.baseheight));      return;    }    tile.removePed(this);    space=e.space;    tile=e.entrance;    tile.addPed(this);  } else {    Bag neighbors=new Bag();    space.field.getNeighborsMaxDistance(tile.loc_x,tile.loc_y,1,false,neighbors,null,null);    ArrayList<Tile> mins=new ArrayList<Tile>();    double currentheight=tile.baseheight;    for (    Object o : neighbors) {      Tile b=(Tile)o;      if (b.peds.size() > 0) {        continue;      } else       if (b.baseheight <= currentheight) {        mins.add(b);      }    }    if (mins.size() > 0) {      Tile newbasin=mins.get(state.random.nextInt(mins.size()));      tile.removePed(this);      newbasin.addPed(this);      tile=newbasin;    }  }  state.schedule.scheduleOnce(this,(int)(1 + tile.baseheight));}  }
class C{  public void query(String structuredQuery) throws IOException, ServiceException {  ListQuery query=new ListQuery(listFeedUrl);  query.setSpreadsheetQuery(structuredQuery);  ListFeed feed=service.query(query,ListFeed.class);  out.println("Results for [" + structuredQuery + "]");  for (  ListEntry entry : feed.getEntries()) {    printAndCacheEntry(entry);  }}  }
class C{  public void push(final Type value){  if (value == null) {    mv.visitInsn(Opcodes.ACONST_NULL);  } else {switch (value.getSort()) {case Type.BOOLEAN:      mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Boolean","TYPE",CLDESC);    break;case Type.CHAR:  mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Character","TYPE",CLDESC);break;case Type.BYTE:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Byte","TYPE",CLDESC);break;case Type.SHORT:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Short","TYPE",CLDESC);break;case Type.INT:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Integer","TYPE",CLDESC);break;case Type.FLOAT:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Float","TYPE",CLDESC);break;case Type.LONG:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Long","TYPE",CLDESC);break;case Type.DOUBLE:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Double","TYPE",CLDESC);break;default :mv.visitLdcInsn(value);}}}  }
class C{  public static String generateHostName(String vmName,String hostId){  String hostname=vmName + '-' + hostId;  Preconditions.checkState(hostname.equals(hostname.toLowerCase()),"hostname should not contain upper case characters");  return hostname;}  }
class C{  int[] decodeEnd(BitArray row) throws NotFoundException {  row.reverse();  try {    int endStart=skipWhiteSpace(row);    int[] endPattern=findGuardPattern(row,endStart,END_PATTERN_REVERSED);    validateQuietZone(row,endPattern[0]);    int temp=endPattern[0];    endPattern[0]=row.getSize() - endPattern[1];    endPattern[1]=row.getSize() - temp;    return endPattern;  }  finally {    row.reverse();  }}  }
class C{  public Intent putExtra(String name,CharSequence[] value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putCharSequenceArray(name,value);  return this;}  }
class C{  public static KRBSafeBody parse(DerInputStream data,byte explicitTag,boolean optional) throws Asn1Exception, IOException {  if ((optional) && (((byte)data.peekByte() & (byte)0x1F) != explicitTag))   return null;  DerValue der=data.getDerValue();  if (explicitTag != (der.getTag() & (byte)0x1F))   throw new Asn1Exception(Krb5.ASN1_BAD_ID); else {    DerValue subDer=der.getData().getDerValue();    return new KRBSafeBody(subDer);  }}  }
class C{  public static Graph cyclicGraph2(int numNodes,int numEdges,int maxDegree){  List<Node> nodes=new ArrayList<>();  for (int i=0; i < numNodes; i++) {    nodes.add(new GraphNode("X" + (i + 1)));  }  Graph graph=new EdgeListGraph(nodes);  LOOP:   while (graph.getEdges().size() < numEdges) {    int cycleSize=RandomUtil.getInstance().nextInt(3) + 3;    List<Node> cycleNodes=new ArrayList<>();    int count2=-1;    for (int i=0; i < cycleSize; i++) {      Node node=nodes.get(RandomUtil.getInstance().nextInt(nodes.size()));      if (cycleNodes.contains(node)) {        i--;        ++count2;        if (count2 < 10) {          continue;        }      }      cycleNodes.add(node);    }    for (int i=0; i < cycleNodes.size(); i++) {      if (graph.getDegree(cycleNodes.get(i)) >= maxDegree) {        continue LOOP;      }    }    Edge edge;    for (int i=0; i < cycleNodes.size() - 1; i++) {      edge=Edges.directedEdge(cycleNodes.get(i + 1),cycleNodes.get(i));      if (graph.containsEdge(edge)) {        continue LOOP;      }    }    edge=Edges.directedEdge(cycleNodes.get(0),cycleNodes.get(cycleNodes.size() - 1));    if (graph.containsEdge(edge)) {      continue;    }    for (int i=0; i < cycleNodes.size() - 1; i++) {      edge=Edges.directedEdge(cycleNodes.get(i),cycleNodes.get(i + 1));      if (!graph.containsEdge(edge)) {        graph.addEdge(edge);        if (graph.getNumEdges() == numEdges) {          break LOOP;        }      }    }    edge=Edges.directedEdge(cycleNodes.get(cycleNodes.size() - 1),cycleNodes.get(0));    if (!graph.containsEdge(edge)) {      graph.addEdge(edge);      if (graph.getNumEdges() == numEdges) {        break;      }    }  }  GraphUtils.circleLayout(graph,200,200,150);  return graph;}  }
class C{  public void updateDiameter(){  double diameter;  double upperBound=synapse.getUpperBound();  double lowerBound=synapse.getLowerBound();  double strength=synapse.getStrength();  if (upperBound == 0) {    upperBound=ZERO_PROXY;  }  if (lowerBound == 0) {    lowerBound=ZERO_PROXY;  }  if (strength < lowerBound) {    strength=lowerBound;  }  if (strength > upperBound) {    strength=upperBound;  }  if (synapse.getStrength() == 0) {    diameter=minDiameter;  } else   if (synapse.getStrength() > 0) {    diameter=((maxDiameter - minDiameter) * (strength / upperBound) + minDiameter);  } else {    diameter=(((maxDiameter - minDiameter) * (Math.abs(strength / lowerBound))) + minDiameter);  }  double delta=(circle.getBounds().getWidth() - diameter) / 2;  circle.setWidth(diameter);  circle.setHeight(diameter);  circle.offset(delta,delta);  setBounds(circle.getFullBounds());}  }
class C{  @Override protected void onPostExecute(Result result){  if (result != null) {    boolean completeCalled=false;    if (!isCancelled()) {      CropImageView cropImageView=mCropImageViewReference.get();      if (cropImageView != null) {        completeCalled=true;        cropImageView.onSetImageUriAsyncComplete(result);      }    }    if (!completeCalled && result.bitmap != null) {      result.bitmap.recycle();    }  }}  }
class C{  public int read(){  if (fpDDF == null) {    reopen();  }  if (fpDDF != null) {    try {      return fpDDF.read();    } catch (    IOException ioe) {      Debug.error("DDFModule.read(): IOException caught");    }  }  return 0;}  }
class C{  public Element store(Object o){  TurnoutSignalMast p=(TurnoutSignalMast)o;  Element e=new Element("turnoutsignalmast");  e.setAttribute("class",this.getClass().getName());  e.addContent(new Element("systemName").addContent(p.getSystemName()));  storeCommon(p,e);  Element unlit=new Element("unlit");  if (p.allowUnLit()) {    unlit.setAttribute("allowed","yes");    unlit.addContent(new Element("turnout").addContent(p.getUnLitTurnoutName()));    if (p.getUnLitTurnoutState() == Turnout.CLOSED) {      unlit.addContent(new Element("turnoutstate").addContent("closed"));    } else {      unlit.addContent(new Element("turnoutstate").addContent("thrown"));    }  } else {    unlit.setAttribute("allowed","no");  }  e.addContent(unlit);  SignalAppearanceMap appMap=p.getAppearanceMap();  if (appMap != null) {    java.util.Enumeration<String> aspects=appMap.getAspects();    while (aspects.hasMoreElements()) {      String key=aspects.nextElement();      Element el=new Element("aspect");      el.setAttribute("defines",key);      el.addContent(new Element("turnout").addContent(p.getTurnoutName(key)));      if (p.getTurnoutState(key) == Turnout.CLOSED) {        el.addContent(new Element("turnoutstate").addContent("closed"));      } else {        el.addContent(new Element("turnoutstate").addContent("thrown"));      }      e.addContent(el);    }  }  List<String> disabledAspects=p.getDisabledAspects();  if (disabledAspects != null) {    Element el=new Element("disabledAspects");    for (    String aspect : disabledAspects) {      Element ele=new Element("disabledAspect");      ele.addContent(aspect);      el.addContent(ele);    }    if (disabledAspects.size() != 0) {      e.addContent(el);    }  }  if (p.resetPreviousStates()) {    e.addContent(new Element("resetPreviousStates").addContent("yes"));  }  return e;}  }
class C{  public PTQuery_Partial Let(String newVarName,String replacementExpression,String... replacementVariables) throws PTQueryException {  PTQuery_Partial copy=new PTQuery_Partial(this);  copy.checkVarName(newVarName);  List<Var> vars=Lists.newArrayList(copy.requireInputs(replacementVariables));  LetVar let=new LetVar(newVarName,replacementExpression,vars);  copy.constructed.put(newVarName,let);  return copy;}  }
class C{  private boolean storeQueriesInFile(ObjectNode queries){  boolean operationStatus=false;  FileOutputStream fileOut=null;  File file=new File(Repository.get().getPulseConfig().getQueryHistoryFileName());  try {    fileOut=new FileOutputStream(file);    if (!file.exists()) {      file.createNewFile();    }    byte[] contentInBytes=queries.toString().getBytes();    fileOut.write(contentInBytes);    fileOut.flush();    operationStatus=true;  } catch (  FileNotFoundException e) {    if (LOGGER.fineEnabled()) {      LOGGER.fine(resourceBundle.getString("LOG_MSG_DATA_BROWSER_QUERY_HISTORY_FILE_NOT_FOUND") + " : " + e.getMessage());    }  }catch (  IOException e) {    if (LOGGER.infoEnabled()) {      LOGGER.info(e.getMessage());    }  } finally {    if (fileOut != null) {      try {        fileOut.close();      } catch (      IOException e) {        if (LOGGER.infoEnabled()) {          LOGGER.info(e.getMessage());        }      }    }  }  return operationStatus;}  }
class C{  @Deprecated public SqlToRelConverter(RelOptTable.ViewExpander viewExpander,SqlValidator validator,Prepare.CatalogReader catalogReader,RelOptPlanner planner,RexBuilder rexBuilder,SqlRexConvertletTable convertletTable){  this(viewExpander,validator,catalogReader,RelOptCluster.create(planner,rexBuilder),convertletTable);}  }
class C{  @POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @RequiresRole(role=Role.ADMINISTRATOR) public RelyingPartyDTO add(RelyingPartyDTO relyingParty){  try {    RelyingParty rp=RelyingPartyMapper.getRelyingParty(relyingParty);    getIDMClient().addRelyingParty(tenant,rp);    return RelyingPartyMapper.getRelyingPartyDTO(getIDMClient().getRelyingParty(tenant,relyingParty.getName()));  } catch (  NoSuchTenantException e) {    log.debug("Failed to add a relying party for tenant '{}' due to missing tenant",tenant,e);    throw new NotFoundException(sm.getString("ec.404"),e);  }catch (  DTOMapperException|InvalidArgumentException e) {    log.debug("Failed to add a relying party for tenant '{}' due to a client side error",tenant,e);    throw new BadRequestException(sm.getString("res.relyingparty.create.failed",tenant),e);  }catch (  Exception e) {    log.error("Failed to add a relying party for tenant '{}' due to a server side error",tenant,e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  protected void paintDropLine(Graphics g){  JTree.DropLocation loc=tree.getDropLocation();  if (!isDropLine(loc)) {    return;  }  Color c=UIManager.getColor("Tree.dropLineColor");  if (c != null) {    g.setColor(c);    Rectangle rect=getDropLineRect(loc);    g.fillRect(rect.x,rect.y,rect.width,rect.height);  }}  }
class C{  public TextureAtlasHelper(int texSize,int segmentSize,int padding){  this(texSize,texSize,segmentSize,segmentSize,padding,padding);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public CacheWriterException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public void delete(ArchivoVO archivoVO){  final String qual=new StringBuffer().append(DBUtils.WHERE).append(DBUtils.generateEQTokenField(ID_FIELD,archivoVO.getId())).toString();  deleteVO(qual,TABLE_NAME);}  }
class C{  public static Point coordinate2Point(Coordinate coordinate){  return geoFac.createPoint(coordinate);}  }
class C{  private static boolean meetsRequirements(){  return Build.VERSION.SDK_INT >= 8;}  }
class C{  public boolean isAwake(){  return awake;}  }
class C{  public static Object previous(Enum self){  final Method[] methods=self.getClass().getMethods();  for (int i=0; i < methods.length; i++) {    Method method=methods[i];    if (method.getName().equals("previous") && method.getParameterTypes().length == 0) {      return InvokerHelper.invokeMethod(self,"previous",NO_ARGS);    }  }  Object[] values=(Object[])InvokerHelper.invokeStaticMethod(self.getClass(),"values",NO_ARGS);  int index=Arrays.asList(values).indexOf(self);  return values[index > 0 ? index - 1 : values.length - 1];}  }
class C{  @Override protected Node removeFromFrontier(){  Node result=frontier.remove();  updateMetrics(frontier.size());  return result;}  }
class C{  public static synchronized String makeLdLibraryPath(){  assertInitialized();  ArrayList<String> pathElements=new ArrayList<>();  SoSource[] soSources=sSoSources;  for (int i=0; i < soSources.length; ++i) {    soSources[i].addToLdLibraryPath(pathElements);  }  return TextUtils.join(":",pathElements);}  }
class C{  public ArrayDeque<E> clone(){  try {    @SuppressWarnings("unchecked") ArrayDeque<E> result=(ArrayDeque<E>)super.clone();    result.elements=Arrays.copyOf(elements,elements.length);    return result;  } catch (  CloneNotSupportedException e) {    throw new AssertionError();  }}  }
class C{  public void initMoveLeftAnim(){  PropertyValuesHolder imageA_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageA.getIndexLable()],endCoordinateXs[imageB.getIndexLable()]);  PropertyValuesHolder imageA_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageA.getIndexLable()],endCoordinateYs[imageB.getIndexLable()]);  if (imageA.getIndexLable() % 5 == 3) {    PropertyValuesHolder imageA_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue,1);    PropertyValuesHolder imageA_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue,1);    imageAAnimToLeft=ObjectAnimator.ofPropertyValuesHolder(imageA,imageA_translate_x,imageA_translate_y,imageA_scale_x,imageA_scale_y);  } else   if (imageA.getIndexLable() % 5 == 4) {    PropertyValuesHolder imageA_scale_x=PropertyValuesHolder.ofFloat("scaleX",1,mScaleValue);    PropertyValuesHolder imageA_scale_y=PropertyValuesHolder.ofFloat("scaleY",1,mScaleValue);    imageAAnimToLeft=ObjectAnimator.ofPropertyValuesHolder(imageA,imageA_translate_x,imageA_translate_y,imageA_scale_x,imageA_scale_y);  } else {    imageAAnimToLeft=ObjectAnimator.ofPropertyValuesHolder(imageA,imageA_translate_x,imageA_translate_y);  }  imageAAnimToLeft.setDuration(mDuration);  PropertyValuesHolder imageB_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageB.getIndexLable()],endCoordinateXs[imageC.getIndexLable()]);  PropertyValuesHolder imageB_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageB.getIndexLable()],endCoordinateYs[imageC.getIndexLable()]);  if (imageB.getIndexLable() % 5 == 3) {    PropertyValuesHolder imageB_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue,1);    PropertyValuesHolder imageB_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue,1);    imageBAnimToLeft=ObjectAnimator.ofPropertyValuesHolder(imageB,imageB_translate_x,imageB_translate_y,imageB_scale_x,imageB_scale_y);  } else   if (imageB.getIndexLable() % 5 == 4) {    PropertyValuesHolder imageB_scale_x=PropertyValuesHolder.ofFloat("scaleX",1,mScaleValue);    PropertyValuesHolder imageB_scale_y=PropertyValuesHolder.ofFloat("scaleY",1,mScaleValue);    imageBAnimToLeft=ObjectAnimator.ofPropertyValuesHolder(imageB,imageB_translate_x,imageB_translate_y,imageB_scale_x,imageB_scale_y);  } else {    imageBAnimToLeft=ObjectAnimator.ofPropertyValuesHolder(imageB,imageB_translate_x,imageB_translate_y);  }  imageBAnimToLeft.setDuration(mDuration);  PropertyValuesHolder imageC_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageC.getIndexLable()],endCoordinateXs[imageD.getIndexLable()]);  PropertyValuesHolder imageC_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageC.getIndexLable()],endCoordinateYs[imageD.getIndexLable()]);  if (imageC.getIndexLable() % 5 == 3) {    PropertyValuesHolder imageC_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue,1);    PropertyValuesHolder imageC_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue,1);    imageCAnimToLeft=ObjectAnimator.ofPropertyValuesHolder(imageC,imageC_translate_x,imageC_translate_y,imageC_scale_x,imageC_scale_y);  } else   if (imageC.getIndexLable() % 5 == 4) {    PropertyValuesHolder imageC_scale_x=PropertyValuesHolder.ofFloat("scaleX",1,mScaleValue);    PropertyValuesHolder imageC_scale_y=PropertyValuesHolder.ofFloat("scaleY",1,mScaleValue);    imageCAnimToLeft=ObjectAnimator.ofPropertyValuesHolder(imageC,imageC_translate_x,imageC_translate_y,imageC_scale_x,imageC_scale_y);  } else {    imageCAnimToLeft=ObjectAnimator.ofPropertyValuesHolder(imageC,imageC_translate_x,imageC_translate_y);  }  imageCAnimToLeft.setDuration(mDuration);  PropertyValuesHolder imageD_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageD.getIndexLable()],endCoordinateXs[imageE.getIndexLable()]);  PropertyValuesHolder imageD_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageD.getIndexLable()],endCoordinateYs[imageE.getIndexLable()]);  if (imageD.getIndexLable() % 5 == 3) {    PropertyValuesHolder imageD_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue,1);    PropertyValuesHolder imageD_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue,1);    imageDAnimToLeft=ObjectAnimator.ofPropertyValuesHolder(imageD,imageD_translate_x,imageD_translate_y,imageD_scale_x,imageD_scale_y);  } else   if (imageD.getIndexLable() % 5 == 4) {    PropertyValuesHolder imageD_scale_x=PropertyValuesHolder.ofFloat("scaleX",1,mScaleValue);    PropertyValuesHolder imageD_scale_y=PropertyValuesHolder.ofFloat("scaleY",1,mScaleValue);    imageDAnimToLeft=ObjectAnimator.ofPropertyValuesHolder(imageD,imageD_translate_x,imageD_translate_y,imageD_scale_x,imageD_scale_y);  } else {    imageDAnimToLeft=ObjectAnimator.ofPropertyValuesHolder(imageD,imageD_translate_x,imageD_translate_y);  }  imageDAnimToLeft.setDuration(mDuration);  PropertyValuesHolder imageE_translate_x=PropertyValuesHolder.ofFloat("x",endCoordinateXs[imageE.getIndexLable()],endCoordinateXs[imageA.getIndexLable()]);  PropertyValuesHolder imageE_translate_y=PropertyValuesHolder.ofFloat("y",endCoordinateYs[imageE.getIndexLable()],endCoordinateYs[imageA.getIndexLable()]);  if (imageE.getIndexLable() % 5 == 3) {    PropertyValuesHolder imageE_scale_x=PropertyValuesHolder.ofFloat("scaleX",mScaleValue,1);    PropertyValuesHolder imageE_scale_y=PropertyValuesHolder.ofFloat("scaleY",mScaleValue,1);    imageEAnimToLeft=ObjectAnimator.ofPropertyValuesHolder(imageE,imageE_translate_x,imageE_translate_y,imageE_scale_x,imageE_scale_y);  } else   if (imageE.getIndexLable() % 5 == 4) {    PropertyValuesHolder imageE_scale_x=PropertyValuesHolder.ofFloat("scaleX",1,mScaleValue);    PropertyValuesHolder imageE_scale_y=PropertyValuesHolder.ofFloat("scaleY",1,mScaleValue);    imageEAnimToLeft=ObjectAnimator.ofPropertyValuesHolder(imageE,imageE_translate_x,imageE_translate_y,imageE_scale_x,imageE_scale_y);  } else {    imageEAnimToLeft=ObjectAnimator.ofPropertyValuesHolder(imageE,imageE_translate_x,imageE_translate_y);  }  imageEAnimToLeft.setDuration(mDuration);}  }
class C{  public void grab(){synchronized (grabReleaseSynchronizer) {    usageCount++;  }  getThreadGroup();}  }
class C{  public static Intersection intersect(Line line,double vax,double vay,double vaz,double vbx,double vby,double vbz,double vcx,double vcy,double vcz){  if (line == null) {    String msg=Logging.getMessage("nullValue.LineIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Vec4 origin=line.getOrigin();  Vec4 dir=line.getDirection();  double edge1x=vbx - vax;  double edge1y=vby - vay;  double edge1z=vbz - vaz;  double edge2x=vcx - vax;  double edge2y=vcy - vay;  double edge2z=vcz - vaz;  double pvecx=(dir.y * edge2z) - (dir.z * edge2y);  double pvecy=(dir.z * edge2x) - (dir.x * edge2z);  double pvecz=(dir.x * edge2y) - (dir.y * edge2x);  double det=edge1x * pvecx + edge1y * pvecy + edge1z * pvecz;  if (det > -EPSILON && det < EPSILON)   return null;  double detInv=1d / det;  double tvecx=origin.x - vax;  double tvecy=origin.y - vay;  double tvecz=origin.z - vaz;  double u=detInv * (tvecx * pvecx + tvecy * pvecy + tvecz * pvecz);  if (u < 0 || u > 1)   return null;  double qvecx=(tvecy * edge1z) - (tvecz * edge1y);  double qvecy=(tvecz * edge1x) - (tvecx * edge1z);  double qvecz=(tvecx * edge1y) - (tvecy * edge1x);  double v=detInv * (dir.x * qvecx + dir.y * qvecy + dir.z * qvecz);  if (v < 0 || u + v > 1)   return null;  double t=detInv * (edge2x * qvecx + edge2y * qvecy + edge2z * qvecz);  if (t < 0)   return null;  return new Intersection(line.getPointAt(t),t,false);}  }
class C{  public ByteBuffer decompress(ByteBuffer bin){  return bin;}  }
class C{  public int prestartAllCoreThreads(){  int n=0;  while (addWorker(null,true))   ++n;  return n;}  }
class C{  public void play(int page,float positionOffset){  if (page >= pageAnimations.size())   return;  ArrayList<PageAnimation> pageAnimationsInPage=pageAnimations.get(page);  if (pageAnimationsInPage != null) {    for (    PageAnimation pageAnimation : pageAnimationsInPage) {      pageAnimation.play(onView,positionOffset);    }  }}  }
class C{  public RotatedProblem(Problem problem,RealMatrix rotation){  super();  this.problem=problem;  this.rotation=rotation;  Solution solution=problem.newSolution();  center=new double[getNumberOfVariables()];  lowerBounds=new double[getNumberOfVariables()];  upperBounds=new double[getNumberOfVariables()];  for (int i=0; i < getNumberOfVariables(); i++) {    RealVariable variable=(RealVariable)solution.getVariable(i);    center[i]=(variable.getLowerBound() + variable.getUpperBound()) / 2.0;    lowerBounds[i]=Math.sqrt(2.0) * (variable.getLowerBound() - center[i]);    upperBounds[i]=Math.sqrt(2.0) * (variable.getUpperBound() - center[i]);  }}  }
class C{  public void tagSoundStreamHead(int playbackFrequency,boolean playback16bit,boolean playbackStereo,int streamFormat,int streamFrequency,boolean stream16bit,boolean streamStereo,int averageSampleCount) throws IOException {  writeSoundStreamHead(TAG_SOUNDSTREAMHEAD,playbackFrequency,playback16bit,playbackStereo,streamFormat,streamFrequency,stream16bit,streamStereo,averageSampleCount);}  }
class C{  public Synchronizer(long sync_id){  this(SYNCHRONIZER_SERVICE.getSynchronizerConfById(sync_id));}  }
class C{  private void checkCoordinates(final int x,final int y){  if (x < 0) {    throw new ArrayIndexOutOfBoundsException("x must be greater than 0, was " + x);  }  if (y < 0) {    throw new ArrayIndexOutOfBoundsException("y must be greater than 0, was " + y);  }  if (x > (getWidth() - 1)) {    throw new ArrayIndexOutOfBoundsException("x must be less than or equal to (getWidth() - 1), was " + x);  }  if (y > (getHeight() - 1)) {    throw new ArrayIndexOutOfBoundsException("y must be less than or equal to (getHeight() - 1), was " + y);  }}  }
class C{  private boolean allocateNextBlock(BlockOrder bo){  if (bo == null) {    log.info("allocateNextBlock: BlockOrder null");    return false;  }  OBlock block=bo.getBlock();  String blockMsg=block.allocate(this);  if (blockMsg != null || (block.getState() & OBlock.OCCUPIED) != 0) {    setStoppingBlock(block);    log.info("allocateNextBlock " + (blockMsg != null ? blockMsg : (block.getDisplayName() + " allocated, but Occupied.")));    return false;  }  blockMsg=bo.setPath(this);  if (blockMsg != null) {    log.info("allocateNextBlock: Warrant \"" + getDisplayName() + "\" shares a turnout. "+ blockMsg);    return false;  }  return true;}  }
class C{  private void startServer(){  if (this.isStarted) {    return;  }  try {    doStartServer(this.args);  } catch (  Exception e) {    throw new ContainerException("Error starting server",e);  }  this.isStarted=true;  start();}  }
class C{  private boolean isPossibleBoolean(IAType type){  while (NonTaggedFormatUtil.isOptional(type)) {    IAType actualType=((AUnionType)type).getActualType();    if (actualType.getTypeTag() == ATypeTag.BOOLEAN || actualType.getTypeTag() == ATypeTag.ANY) {      return true;    }  }  return false;}  }
class C{  public void nextToken(){  previousLine=line;  previousColumn=column;  while (pos < matcher.regionStart()) {    if (text.charAt(pos) == '\n') {      ++line;      column=0;    } else {      ++column;    }    ++pos;  }  if (matcher.regionStart() == matcher.regionEnd()) {    currentToken="";  } else {    matcher.usePattern(TOKEN);    if (matcher.lookingAt()) {      currentToken=matcher.group();      matcher.region(matcher.end(),matcher.regionEnd());    } else {      currentToken=String.valueOf(text.charAt(pos));      matcher.region(pos + 1,matcher.regionEnd());    }    skipWhitespace();  }}  }
class C{  public void fatalError(SAXParseException e) throws SAXException {  if (errorHandler != null) {    errorHandler.fatalError(e);  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  XYBlockRenderer clone=(XYBlockRenderer)super.clone();  if (this.paintScale instanceof PublicCloneable) {    PublicCloneable pc=(PublicCloneable)this.paintScale;    clone.paintScale=(PaintScale)pc.clone();  }  return clone;}  }
class C{  private void assertEmrClusterCreationLogNotExist(EmrCluster emrCluster){  List<EmrClusterCreationLogEntity> list=getEmrClusterCreationLogEntities(emrCluster.getNamespace(),emrCluster.getEmrClusterDefinitionName(),emrCluster.getEmrClusterName());  assertTrue("EMR cluster creation log empty",list.isEmpty());}  }
class C{  private static void replaceAltDmovInstructions(){  fillInstructionMap(0x0800,0xFF00,new FrInstruction(InstructionFormat.D,0,0,"LD","@4u,A","",Instruction.FlowType.NONE,false,false,dmovDir10R13SimulationCode));  fillInstructionMap(0x0900,0xFF00,new FrInstruction(InstructionFormat.D,0,0,"LDUH","@2u,A","",Instruction.FlowType.NONE,false,false,dmovhDir9R13SimulationCode));  fillInstructionMap(0x0A00,0xFF00,new FrInstruction(InstructionFormat.D,0,0,"LDUB","@u,A","",Instruction.FlowType.NONE,false,false,dmovbDir8R13SimulationCode));  fillInstructionMap(0x1800,0xFF00,new FrInstruction(InstructionFormat.D,0,0,"ST","A,@4u","",Instruction.FlowType.NONE,false,false,dmovR13Dir10SimulationCode));  fillInstructionMap(0x1900,0xFF00,new FrInstruction(InstructionFormat.D,0,0,"STUH","A,@2u","",Instruction.FlowType.NONE,false,false,dmovhR13Dir9SimulationCode));  fillInstructionMap(0x1A00,0xFF00,new FrInstruction(InstructionFormat.D,0,0,"STUB","A,@u","",Instruction.FlowType.NONE,false,false,dmovbR13Dir8SimulationCode));}  }
class C{  public RotatedProblem(Problem problem,RealMatrix rotation){  super();  this.problem=problem;  this.rotation=rotation;  Solution solution=problem.newSolution();  center=new double[getNumberOfVariables()];  lowerBounds=new double[getNumberOfVariables()];  upperBounds=new double[getNumberOfVariables()];  for (int i=0; i < getNumberOfVariables(); i++) {    RealVariable variable=(RealVariable)solution.getVariable(i);    center[i]=(variable.getLowerBound() + variable.getUpperBound()) / 2.0;    lowerBounds[i]=Math.sqrt(2.0) * (variable.getLowerBound() - center[i]);    upperBounds[i]=Math.sqrt(2.0) * (variable.getUpperBound() - center[i]);  }}  }
class C{  public String toTitleString(ObjectMatrix3D matrix,String[] sliceNames,String[] rowNames,String[] columnNames,String sliceAxisName,String rowAxisName,String columnAxisName,String title){  if (matrix.size() == 0)   return "Empty matrix";  StringBuffer buf=new StringBuffer();  for (int i=0; i < matrix.slices(); i++) {    if (i != 0)     buf.append(sliceSeparator);    buf.append(toTitleString(matrix.viewSlice(i),rowNames,columnNames,rowAxisName,columnAxisName,title + "\n" + sliceAxisName+ "="+ sliceNames[i]));  }  return buf.toString();}  }
class C{  public synchronized String readFile(String fileName) throws IOException, BadLocationException {  FileReader fileReader=null;  try {    if ((fileName == null) || fileName.equals("")) {      return null;    }    fileReader=new FileReader(fileName);    return readInputStream(fileReader);  }  finally {    if (null != fileReader)     fileReader.close();  }}  }
class C{  private void stopJetty(){  try {    if (httpSrv != null) {      if (httpSrv.isStarted())       ctx.ports().deregisterPorts(getClass());      boolean interrupted=Thread.interrupted();      try {        httpSrv.stop();      }  finally {        if (interrupted)         Thread.currentThread().interrupt();      }    }  } catch (  InterruptedException ignored) {    if (log.isDebugEnabled())     log.debug("Thread has been interrupted.");    Thread.currentThread().interrupt();  }catch (  Exception e) {    U.error(log,"Failed to stop Jetty HTTP server.",e);  }}  }
class C{  public void removeFreeShippingProductPromoAction(GenericPK productPromoActionPK){  if (productPromoActionPK == null)   return;  Iterator<GenericValue> fsppas=this.freeShippingProductPromoActions.iterator();  while (fsppas.hasNext()) {    if (productPromoActionPK.equals((fsppas.next()).getPrimaryKey())) {      fsppas.remove();    }  }}  }
class C{  public void debugPrint(String name,PrintStream out) throws AdeException {  if (name != null) {    out.println("Last seen model for " + name + ": "+ getLLMax());  }  if (m_pointScores != null && !m_pointScores.isEmpty()) {    for (    Entry<Integer,Double> pointScore : m_pointScores.entrySet()) {      out.println("  " + pointScore.getKey() + ", "+ pointScore.getValue());    }    out.println("  missing, " + -m_logHalf);  }}  }
class C{  private void push(final int type){  if (outputStack == null) {    outputStack=new int[10];  }  int n=outputStack.length;  if (outputStackTop >= n) {    int[] t=new int[Math.max(outputStackTop + 1,2 * n)];    System.arraycopy(outputStack,0,t,0,n);    outputStack=t;  }  outputStack[outputStackTop++]=type;  int top=owner.inputStackTop + outputStackTop;  if (top > owner.outputStackMax) {    owner.outputStackMax=top;  }}  }
class C{  public MembershipProtocol(ITransport transport,MembershipConfig config){  this.transport=transport;  this.config=config;  this.member=new Member(IdGenerator.generateId(),transport.address(),config.getMetadata());  String nameFormat="sc-membership-" + transport.address().toString();  this.executor=Executors.newSingleThreadScheduledExecutor(new ThreadFactoryBuilder().setNameFormat(nameFormat).setDaemon(true).build());  this.scheduler=Schedulers.from(executor);  this.seedMembers=cleanUpSeedMembers(config.getSeedMembers());}  }
class C{  @Override public void clear(){  super.clear();  spatialIndex=new Quadtree();  geometries.clear();  needToRebuildIndex=false;}  }
class C{  public static void cleanupAllFiles(FileSystem fileSystem,String BaseUri) throws IOException {  try {    if (fileSystem != null) {      Path rootDir=new Path(BaseUri);      FileStatus[] files=fileSystem.listStatus(rootDir);      for (      FileStatus file : files) {        fileSystem.delete(file.getPath(),false);      }    }  } catch (  Exception e) {    LOG.error("Error in deleting all files.");  }}  }
class C{  public WeightedMultiClassPerformance(){  this(UNDEFINED);}  }
class C{  public static Document convertToStandardDataConfigDocument(Document doc){  if (doc == null) {    String message=Logging.getMessage("nullValue.DocumentIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Element el=doc.getDocumentElement();  if (el == null) {    return null;  }  if (isInstalledDataDescriptorConfigDocument(el)) {    return transformInstalledDataDescriptorConfigDocument(el);  }  if (isWWDotNetLayerSetConfigDocument(el)) {    return transformWWDotNetLayerSetConfigDocument(el);  }  return doc;}  }
class C{  private Base64(){}  }
class C{  public boolean containsOneCategory(List categories){  for (Iterator iter=categories.iterator(); iter.hasNext(); ) {    GroupCategory category=(GroupCategory)iter.next();    if (contains(category))     return true;  }  return false;}  }
class C{  public CharMemberValue(ConstPool cp){  super('C',cp);  setValue('\0');}  }
class C{  @Override protected int sizeOf(String key,Bitmap bitmap){  final int bitmapSize=getBitmapSize(bitmap) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  public static boolean isIndependentPooledWilkinson(List<IndependenceTest> independenceTests,Node x,Node y,List<Node> condSet,int r){  double alpha=independenceTests.get(0).getAlpha();  double p[]=new double[independenceTests.size()];  int k=0;  for (  IndependenceTest independenceTest : independenceTests) {    p[k]=independenceTest.getPValue();    k++;  }  java.util.Arrays.sort(p);  return (p[r] > (1 - Math.pow(1 - Math.pow(alpha,1.0 / (double)r),(r / (double)independenceTests.size()))));}  }
class C{  public CorsServiceBuilder maxAge(final long maxAge){  if (maxAge <= 0) {    throw new IllegalArgumentException("maxAge: " + maxAge + " (expected: > 0)");  }  this.maxAge=maxAge;  return this;}  }
class C{  private static void printReportInfo(GaData gaData){  System.out.println();  System.out.println("Response:");  System.out.println("ID:" + gaData.getId());  System.out.println("Self link: " + gaData.getSelfLink());  System.out.println("Kind: " + gaData.getKind());  System.out.println("Contains Sampled Data: " + gaData.getContainsSampledData());}  }
class C{  public void process(Set<MultiKey<EventBean>> newEvents,Set<MultiKey<EventBean>> oldEvents,ExprEvaluatorContext exprEvaluatorContext){  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().qOutputProcessWConditionJoin(newEvents,oldEvents);  }  if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {    log.debug(".process Received update, " + "  newData.length==" + ((newEvents == null) ? 0 : newEvents.size()) + "  oldData.length=="+ ((oldEvents == null) ? 0 : oldEvents.size()));  }  if (parent.isHasAfter()) {    boolean afterSatisfied=super.checkAfterCondition(newEvents,parent.getStatementContext());    if (!afterSatisfied) {      if (!parent.isUnaggregatedUngrouped()) {        addToChangeset(newEvents,oldEvents,deltaSet);      }      if (InstrumentationHelper.ENABLED) {        InstrumentationHelper.get().aOutputProcessWConditionJoin(false);      }      return;    } else {      addToChangeset(newEvents,oldEvents,deltaSet);    }  } else {    addToChangeset(newEvents,oldEvents,deltaSet);  }  int newEventsSize=0;  if (newEvents != null) {    newEventsSize=newEvents.size();  }  int oldEventsSize=0;  if (oldEvents != null) {    oldEventsSize=oldEvents.size();  }  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().qOutputRateConditionUpdate(newEventsSize,oldEventsSize);  }  outputCondition.updateOutputCondition(newEventsSize,oldEventsSize);  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().aOutputRateConditionUpdate();  }  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().aOutputProcessWConditionJoin(true);  }}  }
class C{  @Override public T defaultCase(EObject object){  return null;}  }
class C{  @Override public void updateInt(int columnIndex,int x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateInt(" + columnIndex + ", "+ x+ ");");    }    update(columnIndex,ValueInt.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void unmark(){  getElement().removeAttribute("success");  getElement().removeAttribute("error");}  }
class C{  protected void finish() throws IOException {  out.flush();  if (filename != null) {    outputstream.close();    RandomAccessFile raf=new RandomAccessFile(filename,"rw");    int length=(int)raf.length();    byteout=new ByteArrayOutputStream();    out=new OutStream(byteout);    writeHeader(version,length,rate,frameCount);    out.flush();    raf.write(byteout.toByteArray());    raf.close();    return;  }  if (byteout != null) {    byte[] bytes=byteout.toByteArray();    long length=12L + frameSize.getLength() + bytes.length;    out=new OutStream(outputstream);    writeHeader(version,length,rate,frameCount);    out.write(bytes);    out.flush();  }}  }
class C{  public void windowClosing(WindowEvent e){  ((WindowListener)a).windowClosing(e);  ((WindowListener)b).windowClosing(e);}  }
class C{  public List<Connection> restoreConnections(Context context) throws PersistenceException {  String[] connectionColumns={COLUMN_CLIENT_HANDLE,COLUMN_HOST,COLUMN_port,COLUMN_client_ID,COLUMN_ssl,COLUMN_KEEP_ALIVE,COLUMN_CLEAN_SESSION,COLUMN_TIME_OUT,COLUMN_USER_NAME,COLUMN_PASSWORD,COLUMN_TOPIC,COLUMN_MESSAGE,COLUMN_RETAINED,COLUMN_QOS,_ID};  String[] subscriptionColumns={COLUMN_CLIENT_HANDLE,SUBSCRIPTIONS_COLUMN_TOPIC,SUBSCRIPTIONS_COLUMN_NOTIFY,SUBSCRIPTIONS_COLUMN_QOS,_ID};  String subscriptionWhereQuery=COLUMN_CLIENT_HANDLE + "=?";  String sort=COLUMN_HOST;  SQLiteDatabase db=getReadableDatabase();  Cursor c=db.query(TABLE_CONNECTIONS,connectionColumns,null,null,null,null,sort);  ArrayList<Connection> list=new ArrayList<Connection>(c.getCount());  Connection connection=null;  for (int i=0; i < c.getCount(); i++) {    if (!c.moveToNext()) {      throw new PersistenceException("Failed restoring connection - count: " + c.getCount() + "loop iteration: "+ i);    }    Long id=c.getLong(c.getColumnIndexOrThrow(_ID));    String clientHandle=c.getString(c.getColumnIndexOrThrow(COLUMN_CLIENT_HANDLE));    String host=c.getString(c.getColumnIndexOrThrow(COLUMN_HOST));    String clientID=c.getString(c.getColumnIndexOrThrow(COLUMN_client_ID));    int port=c.getInt(c.getColumnIndexOrThrow(COLUMN_port));    String username=c.getString(c.getColumnIndexOrThrow(COLUMN_USER_NAME));    String password=c.getString(c.getColumnIndexOrThrow(COLUMN_PASSWORD));    String topic=c.getString(c.getColumnIndexOrThrow(COLUMN_TOPIC));    String message=c.getString(c.getColumnIndexOrThrow(COLUMN_MESSAGE));    int qos=c.getInt(c.getColumnIndexOrThrow(COLUMN_QOS));    int keepAlive=c.getInt(c.getColumnIndexOrThrow(COLUMN_KEEP_ALIVE));    int timeout=c.getInt(c.getColumnIndexOrThrow(COLUMN_TIME_OUT));    boolean cleanSession=c.getInt(c.getColumnIndexOrThrow(COLUMN_CLEAN_SESSION)) == 1;    boolean retained=c.getInt(c.getColumnIndexOrThrow(COLUMN_RETAINED)) == 1;    boolean ssl=c.getInt(c.getColumnIndexOrThrow(COLUMN_ssl)) == 1;    MqttConnectOptions opts=new MqttConnectOptions();    opts.setCleanSession(cleanSession);    opts.setKeepAliveInterval(keepAlive);    opts.setConnectionTimeout(timeout);    opts.setPassword(password != null ? password.toCharArray() : null);    opts.setUserName(username);    if (topic != null) {      opts.setWill(topic,message.getBytes(),qos,retained);    }    connection=Connection.createConnection(clientHandle,clientID,host,port,context,ssl);    connection.addConnectionOptions(opts);    connection.assignPersistenceId(id);    String[] args={clientHandle};    System.out.println("SUB: " + connection.toString());    Cursor sub_c=db.query(TABLE_SUBSCRIPTIONS,subscriptionColumns,subscriptionWhereQuery,args,null,null,sort);    ArrayList<Subscription> subscriptions=new ArrayList<Subscription>(sub_c.getCount());    for (int x=0; x < sub_c.getCount(); x++) {      if (!sub_c.moveToNext()) {        throw new PersistenceException("Failed restoring subscription - count: " + sub_c.getCount() + "loop iteration: "+ x);      }      Long sub_id=sub_c.getLong(sub_c.getColumnIndexOrThrow(_ID));      String sub_clientHandle=sub_c.getString(sub_c.getColumnIndexOrThrow(COLUMN_CLIENT_HANDLE));      String sub_topic=sub_c.getString(sub_c.getColumnIndexOrThrow(SUBSCRIPTIONS_COLUMN_TOPIC));      boolean sub_notify=sub_c.getInt(sub_c.getColumnIndexOrThrow(SUBSCRIPTIONS_COLUMN_NOTIFY)) == 1;      int sub_qos=sub_c.getInt(sub_c.getColumnIndexOrThrow(SUBSCRIPTIONS_COLUMN_QOS));      Subscription sub=new Subscription(sub_topic,sub_qos,sub_clientHandle,sub_notify);      sub.setPersistenceId(sub_id);      Log.d(TAG,"Restoring Subscription: " + sub.toString());      subscriptions.add(sub);    }    connection.setSubscriptions(subscriptions);    list.add(connection);  }  c.close();  db.close();  return list;}  }
class C{  private static final PipelineOp addSlice(PipelineOp left,final QueryBase queryBase,final SliceNode slice,final AST2BOpContext ctx){  final int bopId=ctx.nextId();  left=applyQueryHints(new SliceOp(leftOrEmpty(left),new NV(SliceOp.Annotations.BOP_ID,bopId),new NV(SliceOp.Annotations.OFFSET,slice.getOffset()),new NV(SliceOp.Annotations.LIMIT,slice.getLimit()),new NV(SliceOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(SliceOp.Annotations.PIPELINED,true),new NV(SliceOp.Annotations.MAX_PARALLEL,1),new NV(SliceOp.Annotations.REORDER_SOLUTIONS,false),new NV(SliceOp.Annotations.SHARED_STATE,true)),queryBase,ctx);  return left;}  }
class C{  public void removeAttribute(String key){  attributes.remove(key);}  }
class C{  public static float trunc(Float number){  if (number < 0f) {    return (float)Math.ceil(number.doubleValue());  }  return (float)Math.floor(number.doubleValue());}  }
class C{  private static boolean push(double y[],int K[],int j){  if (j >= y.length) {    return true;  } else   if (y[j] < K[j] - 1) {    y[j]++;    return false;  } else {    y[j]=0.0;    return push(y,K,++j);  }}  }
class C{  public static MultiAdaptersCreator items(@NonNull List<?> items){  return new MultiAdaptersCreator(items);}  }
class C{  @Override public void onUpgrade(SQLiteDatabase db,ConnectionSource connectionSource,int oldVersion,int newVersion){  Log.i(TAG,"onUpgrade " + oldVersion + " -> "+ newVersion);  try {    updateDatabase(oldVersion,db);  } catch (  SQLiteException exc) {    exc.printStackTrace();    clearDatabase(db);    onCreate(db,connectionSource);  }}  }
class C{  public XMLString xstr(){  return XMLStringFactoryImpl.getFactory().newstr(str());}  }
class C{  public int generateExtendedSequenceNumber(int seq){  return seq + (RTP_SEQ_MOD * cycles);}  }
class C{  private List<String> createTargetDevices(StorageSystem storage,CIMObjectPath poolPath,CIMObjectPath volumeGroupPath,CIMInstance storageSetting,String sourceGroupName,String label,Boolean createInactive,int count,long capacity,TaskCompleter taskCompleter) throws DeviceControllerException {  _log.info(format("Creating target devices: Storage System: {0}, Consistency Group: {1}, Pool: {2}, Count: {3}",storage.getId(),sourceGroupName,poolPath,count));  try {    CIMObjectPath configSvcPath=_cimPath.getConfigSvcPath(storage);    CIMArgument[] inArgs=null;    if (storage.checkIfVmax3()) {      inArgs=_helper.getCreateVolumesBasedOnVolumeGroupInputArguments(storage,poolPath,volumeGroupPath,label,count,capacity);    } else {      inArgs=_helper.getCreateVolumesBasedOnSettingInputArguments(storage,poolPath,storageSetting,label,count,capacity);    }    CIMArgument[] outArgs=new CIMArgument[5];    SmisCreateVmaxCGTargetVolumesJob job=new SmisCreateVmaxCGTargetVolumesJob(null,storage.getId(),sourceGroupName,label,createInactive,taskCompleter);    _helper.invokeMethodSynchronously(storage,configSvcPath,_helper.createVolumesMethodName(storage),inArgs,outArgs,job);    return job.getTargetDeviceIds();  } catch (  Exception e) {    final String errMsg=format("An error occurred when creating target devices on storage system {0}",storage.getId());    _log.error(errMsg,e);    taskCompleter.error(_dbClient,SmisException.errors.methodFailed(_helper.createVolumesMethodName(storage),e.getMessage()));    throw new SmisException(errMsg,e);  }}  }
class C{  public T caseReactiveElement(ReactiveElement object){  return null;}  }
class C{  public ExpConstExpDemographic(Type units){  super(units);}  }
class C{  public void addMultiplePolicy(List<String> policyNameList) throws IOException, InterruptedException {  addPolicy(policyNameList.get(0));  policyNameList.remove(0);  for (  String policyName : policyNameList) {    driver.findElement(By.xpath(uiElementMapper.getElement("emm.policy.add.add.another.link"))).click();    addPolicy(policyName);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void skipDownTo(int y){  spanIter.skipDownTo(y);}  }
class C{  public static boolean doesProjectDomainMatchesWithVNASDomain(PermissionsHelper permissionsHelper,Project project,VirtualNAS vNAS){  Set<String> projectDomains=getDomainsOfProject(permissionsHelper,project);  return doesProjectDomainMatchesWithVNASDomain(projectDomains,vNAS);}  }
class C{  public String quit(){  checkIsInMulti();  client.quit();  return client.getStatusCodeReply();}  }
class C{  public boolean isFull(){  return (head == tail) && counter > 0;}  }
class C{  public void remove(Object key){  if (arrayTable != null) {    arrayTable.remove(key);  }}  }
class C{  private static int gcd(int a,int b){  if (b == 0)   return 0;  while (b != 0) {    int tmp=b;    b=a % b;    a=tmp;  }  return a;}  }
class C{  public ConversionException(String message,Throwable cause){  super(message);  this.cause=cause;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public String describeAttribute(String attributeName){  String ret="Attribute not found";  try {    MBeanAttributeInfo[] attributes=beanInfo.getAttributes();    for (    MBeanAttributeInfo attribute : attributes) {      if (attribute.getName().equals(attributeName)) {        return describeAttribute(attribute);      }    }  } catch (  Exception e) {    throwException("Could not describe attribute '" + attributeName + "'. Reason: ",e);  }  return ret;}  }
class C{  public boolean isShowLegend(){  return mShowLegend;}  }
class C{  public void addSeries(String key,double[] values,int bins){  if (key == null) {    throw new IllegalArgumentException("Null 'key' argument.");  }  if (values == null) {    throw new IllegalArgumentException("Null 'values' argument.");  } else   if (bins < 1) {    throw new IllegalArgumentException("The 'bins' value must be at least 1.");  }  if (values.length == 0) {    return;  }  if (dataMap.get(key) != null) {    HistogramBin[] original=dataMap.get(key).data;    double range=getRange(original);    if (range >= maxRangeValue - maxRangeValue / 10 && range <= maxRangeValue + maxRangeValue / 10) {      double newMax=Double.MIN_VALUE;      for (      ColoredDataSeries data : dataMap.values()) {        if (data.equals(dataMap.get(key))) {          continue;        }        range=getRange(data.data);        if (range > newMax) {          newMax=range;        }      }      maxRangeValue=newMax;    }  }  Arrays.sort(values);  double range=Math.abs(values[values.length - 1] - values[0]);  if (range > maxRangeValue) {    maxRangeValue=range;  }  HistogramBin[] histBins=new HistogramBin[0];  double binWidth=0;  if (values.length != 0) {    binWidth=(maxRangeValue) / bins;    histBins=new HistogramBin[bins];    int index=0;    HistogramBin bin;    double endVal=0;    double startVal=values[0];    for (int i=0; i < bins; i++) {      if (index < values.length) {        endVal=startVal + binWidth;        bin=new HistogramBin(startVal,endVal);        while (index < values.length && values[index] <= endVal) {          bin.incrementCount();          index++;        }        startVal=endVal;      } else {        bin=new HistogramBin(0,0);      }      histBins[i]=bin;    }  }  ColoredDataSeries packet=new ColoredDataSeries(histBins);  dataMap.put(key,packet);  this.fireDatasetChanged();}  }
class C{  public CellEntry(int row,int col,String newInputValue){  this(new Cell(row,col,newInputValue));}  }
class C{  public void paintLayeredHighlights(Graphics g,int p0,int p1,Shape viewBounds,JTextComponent editor,View view){  paintListLayered(g,p0,p1,viewBounds,editor,view,markedOccurrences);  super.paintLayeredHighlights(g,p0,p1,viewBounds,editor,view);  paintListLayered(g,p0,p1,viewBounds,editor,view,parserHighlights);}  }
class C{  private TechnicalProduct findTechnicalProductAndCheckOwner(Organization provider,VOTechnicalService voTechnicalProduct) throws ObjectNotFoundException, OperationNotPermittedException {  TechnicalProduct techProd=dm.getReference(TechnicalProduct.class,voTechnicalProduct.getKey());  PermissionCheck.owns(techProd,provider,logger,sessionCtx);  return techProd;}  }
class C{  private static XMLReader createReader() throws IOException {  XMLReader reader=null;  try {    reader=XMLReaderFactory.createXMLReader();  } catch (  SAXException e) {    try {      reader=XMLReaderFactory.createXMLReader("org.apache.crimson.parser.XMLReaderImpl");    } catch (    SAXException se) {      throw new IOException(se.toString());    }  }  return reader;}  }
class C{  Item newFloat(final float value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(FLOAT).putInt(key.intVal);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  public void enqueue(TerminatingRunnable r){synchronized (queue) {    queue.add(r);    queue.notifyAll();  }}  }
class C{  public void addElement(Object object,String tooltip){  super.addElement(object);  toolTipMap.put(object,tooltip);  enabledMap.put(object,true);}  }
class C{  public void awaitCompletion(BulkConnection connection,JobInfo job,List<BatchInfo> batchInfoList) throws AsyncApiException {  long sleepTime=0L;  Set<String> incompleteBatchInfos=new HashSet<String>();  for (  BatchInfo bi : batchInfoList) {    incompleteBatchInfos.add(bi.getId());  }  while (!incompleteBatchInfos.isEmpty()) {    try {      Thread.sleep(sleepTime);    } catch (    InterruptedException e) {      ApexUnitUtils.shutDownWithDebugLog(e,"InterruptedException encountered while the thread was attempting to sleep");    }    LOG.debug("Awaiting results... Batches remaining for processing: " + incompleteBatchInfos.size());    sleepTime=10000L;    BatchInfo[] statusList=connection.getBatchInfoList(job.getId()).getBatchInfo();    for (    BatchInfo batchInfo : statusList) {      if (batchInfo.getState() == BatchStateEnum.Completed) {        if (incompleteBatchInfos.remove(batchInfo.getId())) {          LOG.debug("BATCH STATUS:" + batchInfo.getStateMessage());        }      } else       if (batchInfo.getState() == BatchStateEnum.NotProcessed) {        LOG.info("Batch " + batchInfo.getId() + " did not process, terminating it");        incompleteBatchInfos.remove(batchInfo.getId());      } else       if (batchInfo.getState() == BatchStateEnum.Failed) {        ApexUnitUtils.shutDownWithErrMsg("BATCH STATUS:" + batchInfo.getStateMessage());      }    }  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.SINGLE_ASSOCIATION_END___MULTIPLICITY_1:    getMultiplicity_1().clear();  return;case UmplePackage.SINGLE_ASSOCIATION_END___TYPE_1:setType_1(TYPE_1_EDEFAULT);return;case UmplePackage.SINGLE_ASSOCIATION_END___ROLE_NAME_1:setRoleName_1(ROLE_NAME_1_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  private void deserializeClass(File file) throws RuntimeException {  try {    FileInputStream in=new FileInputStream(file);    ObjectInputStream objIn=new ObjectInputStream(in);    Object o=objIn.readObject();    in.close();  } catch (  ClassNotFoundException e) {    throw new RuntimeException("There is no class in the model API " + "to deserialize the object in " + file + ". Perhaps the "+ "class was renamed, moved to another package, or removed. "+ "In any case, please put it back where it was.",e);  }catch (  IOException e) {    throw new RuntimeException("There was an I/O error associated with " + "the process of deserializing the file " + file + ".",e);  }}  }
class C{  public static AlertDialog quickDialog(final Activity context,final String message){  final SpannableString s=new SpannableString(message);  Linkify.addLinks(s,Linkify.ALL);  Builder builder=new AlertDialog.Builder(context);  builder.setMessage(s);  builder.setPositiveButton(android.R.string.ok,closeDialogListener());  AlertDialog dialog=builder.create();  dialog.show();  ((TextView)dialog.findViewById(android.R.id.message)).setMovementMethod(LinkMovementMethod.getInstance());  return dialog;}  }
class C{  public static Map<Unit,Unit> mapTransportsToLoadUsingMinTransports(final Collection<Unit> units,final Collection<Unit> transports){  final List<Unit> canBeTransported=sortByTransportCostDescending(units);  final List<Unit> canTransport=sortByTransportCapacityDescendingThenMovesDescending(transports);  final Map<Unit,Unit> mapping=new HashMap<>();  Optional<Unit> finalTransport=Optional.empty();  for (  final Unit currentTransport : canTransport) {    final int capacity=TransportTracker.getAvailableCapacity(currentTransport);    final int remainingCost=getTransportCost(canBeTransported);    if (remainingCost <= capacity) {      if (!finalTransport.isPresent() || capacity < TransportTracker.getAvailableCapacity(finalTransport.get())) {        finalTransport=Optional.of(currentTransport);      }      continue;    }    if (finalTransport.isPresent()) {      break;    }    loadMaxUnits(currentTransport,canBeTransported,mapping);  }  if (finalTransport.isPresent()) {    loadMaxUnits(finalTransport.get(),canBeTransported,mapping);  }  return mapping;}  }
class C{  void addArg(String arg){  args.add(arg);}  }
class C{  public CommentObject(boolean deleted){  this.deleted=deleted;}  }
class C{  public synchronized void reset(){  setRendererFactory(null);  Iterator iter=m_focus.entrySet().iterator();  while (iter.hasNext()) {    Map.Entry entry=(Map.Entry)iter.next();    TupleSet ts=(TupleSet)entry.getValue();    ts.clear();  }  LinkedHashMap processed_m_visual=new LinkedHashMap(m_visual);  iter=processed_m_visual.keySet().iterator();  while (iter.hasNext()) {    String key=(String)iter.next();    removeGroup(key);  }  LinkedHashMap processed_m_source=new LinkedHashMap(m_source);  iter=processed_m_source.keySet().iterator();  while (iter.hasNext()) {    String key=(String)iter.next();    removeGroup(key);  }  for (  Object name : m_actions.allKeys()) {    cancel(name.toString());  }  ActivityManager.stopThread();  m_actions=new ActivityMap();  m_renderers=new DefaultRendererFactory();  m_visual=new LinkedHashMap();  m_source=new HashMap();  m_focus=new HashMap();  m_displays=new ArrayList();  addFocusGroup(Visualization.FOCUS_ITEMS,new DefaultTupleSet());  addFocusGroup(Visualization.SELECTED_ITEMS,new DefaultTupleSet());}  }
class C{  public Matrix4x3f transpose3x3(){  return transpose3x3(this);}  }
class C{  public static int measureByteSize(MOAObject obj){  return 0;}  }
class C{  public PlaceProperty(){}  }
class C{  @Ignore @Test public void testNotEqualCoupledWithUndefinedAndNotNull(){  LogWriter logger=CacheUtils.getLogger();  try {    ExecutionContext context=new QueryExecutionContext(null,CacheUtils.getCache());    this.bindIteratorsAndCreateIndex(context);    CompiledValue[] cv1=new CompiledValue[3];    cv1[0]=new CompiledComparison(new CompiledPath(new CompiledID("p"),"ID"),new CompiledLiteral(new Integer(7)),OQLLexerTokenTypes.TOK_NE);    cv1[1]=new CompiledComparison(new CompiledPath(new CompiledID("p"),"ID"),new CompiledLiteral(null),OQLLexerTokenTypes.TOK_NE);    cv1[2]=new CompiledUndefined(new CompiledPath(new CompiledID("p"),"ID"),false);    OrganizedOperands oo=this.oganizedOperandsSingleRangeJunctionCreation(OQLLexerTokenTypes.LITERAL_and,cv1,context);    assertTrue("Filter Openad of OrganizedOperand is not of type RangeJunction",oo.filterOperand instanceof RangeJunction);    RangeJunction rj=(RangeJunction)oo.filterOperand;    OrganizedOperands oo1=rj.organizeOperands(context);    assertTrue(oo1.filterOperand instanceof GroupJunction);    CompiledValue[] ops=((GroupJunction)oo1.filterOperand)._operands;    assertTrue(cv1[0] == ops[0] || cv1[0] == ops[1] || cv1[0] == ops[2]);    assertTrue(cv1[1] == ops[0] || cv1[1] == ops[1] || cv1[1] == ops[2]);    assertTrue(cv1[2] == ops[0] || cv1[2] == ops[1] || cv1[2] == ops[2]);  } catch (  Exception e) {    logger.error(e.toString());    fail(e.toString());  }}  }
class C{  public void addMarker(int x,int z,Color color){  MapMarker marker=new MapMarker();  marker.x=x;  marker.z=z;  marker.color=color;  markers.add(marker);}  }
class C{  public Observable<Long> publish(final String topic,PubSubData event){  if (event != null)   return publish(topic,event.arguments,event.keywordArguments); else   return publish(topic,null,null);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public T instantiate(Map<Property<T>,Object> properties) throws Throwable {  Object[] args=new Object[constructor.getParameterCount()];  BinarySerialization serialization=BinarySerialization.getInstance();  for (int i=0; i < args.length; i++) {    Property<T> property=this.constructorProperties.get(i);    Optional<Object> suppliedProperty=findProperty(properties,property.getName());    if (suppliedProperty.isPresent()) {      args[i]=suppliedProperty.get();    } else {      TypeHandler typeHandler=property.getTypeHandler();      ByteBuffer buffer=serialization.getSerializer(typeHandler).serialize(typeHandler,args[i]);      buffer.rewind();      Object o=serialization.getDeserializer(typeHandler).deserialize(typeHandler,buffer);      args[i]=o;    }    Class<?> constructorArgType=constructor.getParameterTypes()[i];    if (!isAssignableFrom(constructorArgType,args[i].getClass())) {      throw new IllegalArgumentException("Property " + property.getName() + ": expected "+ constructorArgType+ ", got "+ args[i].getClass());    }  }  T t=constructor.newInstance(args);  if (!setters.isEmpty()) {    for (    Map.Entry<String,MethodHandle> entry : setters.entrySet()) {      Optional<Object> suppliedProperty=findProperty(properties,entry.getKey());      if (suppliedProperty.isPresent()) {        entry.getValue().invoke(t,suppliedProperty.get());      }    }  }  return t;}  }
class C{  private void updateMiniController(IMiniController controller) throws TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  checkRemoteMediaPlayerAvailable();  if (mRemoteMediaPlayer.getStreamDuration() > 0 || isRemoteStreamLive()) {    MediaInfo mediaInfo=getRemoteMediaInformation();    MediaMetadata mm=mediaInfo.getMetadata();    controller.setStreamType(mediaInfo.getStreamType());    controller.setPlaybackStatus(mState,mIdleReason);    controller.setSubTitle(mContext.getResources().getString(R.string.casting_to_device,mDeviceName));    controller.setTitle(mm.getString(MediaMetadata.KEY_TITLE));    if (!mm.getImages().isEmpty()) {      controller.setIcon(mm.getImages().get(0).getUrl());    }  }}  }
class C{  public R1Indicator(Problem problem,int subdivisions,NondominatedPopulation referenceSet){  this(problem,subdivisions,referenceSet,new ChebychevUtility());}  }
class C{  public SortControl(SortKey[] sortBy,boolean criticality) throws IOException {  super(OID,criticality,null);  super.value=setEncodedValue(sortBy);}  }
class C{  public void loadFile(Resource res,String resourcePath) throws IOException {  res.createFile(true);  InputStream is=InfoImpl.class.getResourceAsStream(resourcePath);  IOUtil.copy(is,res,true);}  }
class C{  public CActionToggleBreakpointStatus(final BreakpointManager manager,final INaviModule module,final UnrelocatedAddress address){  super("Toggle Breakpoint Status");  m_manager=manager;  m_module=module;  m_address=address;}  }
class C{  protected void onArrayEnd(final Object obj,final Field field,final Bin annotation){}  }
class C{  public EntryStream<K,V> removeValues(Predicate<? super V> valuePredicate){  return filterValues(valuePredicate.negate());}  }
class C{  public static Schema loadSchema(Configuration conf){  SchemaWritable schema=new SchemaWritable();  try {    FileSystem fs=FileSystem.get(conf);    Path schemaPath=getSchemaPath(conf);    if (fs.isDirectory(schemaPath)) {      for (      FileStatus status : fs.listStatus(schemaPath)) {        schemaPath=status.getPath();        if (status.isFile() && status.getLen() > 0 && !schemaPath.getName().startsWith(DEBUG_OUT)) {          break;        }      }    }    SequenceFile.Reader in=new SequenceFile.Reader(conf,SequenceFile.Reader.file(schemaPath));    NullWritable key=NullWritable.get();    in.next(key,schema);    in.close();  } catch (  IOException e) {    e.printStackTrace();  }  return schema;}  }
class C{  public State(String name,String zone,Set districts){  this.name=name;  this.zone=zone;  this.districts=districts;}  }
class C{  public static Bitmap decodeSampledBitmapFromDescriptor(FileDescriptor fileDescriptor,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  return BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);}  }
class C{  public void reset(){  mPieces=new ArrayList<Piece>();  setText("");}  }
class C{  private void createFields(String[] fields,int row){  ListItem listItem=new ListItem();  listItem.setWidth("100%");  Listbox listColumn=new Listbox();  listColumn.setId("listColumn" + listItem.getId());  listColumn.setName("listColumn");  listColumn.setMold("select");  listColumn.setRows(0);  listColumn.addEventListener(Events.ON_SELECT,this);  Listbox listOperator=new Listbox();  listOperator.setId("listOperator" + listItem.getId());  listOperator.setName("listOperator");  listOperator.setMold("select");  listOperator.setRows(0);  listOperator.addEventListener(Events.ON_SELECT,this);  Listbox listAndOr=new Listbox();  listAndOr.setId("listAndOr" + listItem.getId());  listAndOr.setName("listAndOr");  listAndOr.setMold("select");  listAndOr.setRows(0);  listAndOr.addEventListener(Events.ON_SELECT,this);  Listbox listLeftBracket=new Listbox();  listLeftBracket.setId("listLeftBracket" + listItem.getId());  listLeftBracket.setName("listLeftBracket");  listLeftBracket.setMold("select");  listLeftBracket.setRows(0);  listLeftBracket.addEventListener(Events.ON_SELECT,this);  Listbox listRightBracket=new Listbox();  listRightBracket.setId("listRightBracket" + listItem.getId());  listRightBracket.setName("listRightBracket");  listRightBracket.setMold("select");  listRightBracket.setRows(0);  listRightBracket.addEventListener(Events.ON_SELECT,this);  setValues(listColumn,listOperator,fields);  ValueNamePair[] andOr=new ValueNamePair[]{new ValueNamePair("",""),new ValueNamePair("AND",Msg.getMsg(Env.getCtx(),"AND")),new ValueNamePair("OR",Msg.getMsg(Env.getCtx(),"OR"))};  for (  ValueNamePair item : andOr)   listAndOr.appendItem(item.getName(),item.getValue());  if (row <= 0) {    listAndOr.setSelectedIndex(0);    listAndOr.setVisible(false);  } else {    listAndOr.setSelectedIndex(1);    listAndOr.setVisible(true);  }  ValueNamePair[] leftBracket=new ValueNamePair[]{new ValueNamePair("",""),new ValueNamePair("(","("),new ValueNamePair("((","(("),new ValueNamePair("(((","(((")};  for (  ValueNamePair item : leftBracket)   listLeftBracket.appendItem(item.getName(),item.getValue());  listLeftBracket.setSelectedIndex(0);  ValueNamePair[] rightBracket=new ValueNamePair[]{new ValueNamePair("",""),new ValueNamePair(")",")"),new ValueNamePair("))","))"),new ValueNamePair(")))",")))")};  for (  ValueNamePair item : rightBracket)   listRightBracket.appendItem(item.getName(),item.getValue());  listRightBracket.setSelectedIndex(0);  ListCell cellColumn=new ListCell();  cellColumn.appendChild(listColumn);  cellColumn.setId("cellColumn" + listItem.getId());  ListCell cellOperator=new ListCell();  cellOperator.appendChild(listOperator);  cellOperator.setId("cellOperator" + listItem.getId());  ListCell cellQueryFrom=new ListCell();  cellQueryFrom.setId("cellQueryFrom" + listItem.getId());  ListCell cellQueryTo=new ListCell();  cellQueryTo.setId("cellQueryTo" + listItem.getId());  ListCell cellAndOr=new ListCell();  cellAndOr.appendChild(listAndOr);  cellAndOr.setId("cellAndOr" + listItem.getId());  ListCell cellLeftBracket=new ListCell();  cellLeftBracket.appendChild(listLeftBracket);  cellLeftBracket.setId("cellLeftBracket" + listItem.getId());  ListCell cellRightBracket=new ListCell();  cellRightBracket.appendChild(listRightBracket);  cellRightBracket.setId("cellRightBracket" + listItem.getId());  listItem.appendChild(cellAndOr);  listItem.appendChild(cellLeftBracket);  listItem.appendChild(cellColumn);  listItem.appendChild(cellOperator);  listItem.appendChild(cellQueryFrom);  listItem.appendChild(cellQueryTo);  listItem.appendChild(cellRightBracket);  advancedPanel.appendChild(listItem);  advancedPanel.setSelectedItem(listItem);  if (fields != null) {    String columnName=listColumn.getSelectedItem().getValue().toString();    if (columnName == null || columnName == "")     return;    String value=fields.length > INDEX_VALUE ? fields[INDEX_VALUE] : "";    if (value.length() > 0) {      cellQueryFrom.setAttribute("value",value);      cellQueryFrom.appendChild(parseString(getTargetMField(columnName),value,listItem,false));    }    String value2=fields.length > INDEX_VALUE2 ? fields[INDEX_VALUE2] : "";    if (value2.length() > 0) {      cellQueryTo.setAttribute("value",value);      cellQueryTo.appendChild(parseString(getTargetMField(columnName),value2,listItem,true));    }    String sandOr=fields.length > INDEX_ANDOR ? fields[INDEX_ANDOR] : "";    if (sandOr.length() > 0) {      for (int i=0; i < listAndOr.getItems().size(); i++) {        if (listAndOr.getItemAtIndex(i).getValue().equals(sandOr)) {          listAndOr.setSelectedIndex(i);          break;        }      }    }    String sLeftBracket=fields.length > INDEX_LEFTBRACKET ? fields[INDEX_LEFTBRACKET] : "";    if (sLeftBracket.length() > 0) {      for (int i=0; i < listLeftBracket.getItems().size(); i++) {        if (listLeftBracket.getItemAtIndex(i).getValue().equals(sLeftBracket)) {          listLeftBracket.setSelectedIndex(i);          break;        }      }    }    String sRightBracket=fields.length > INDEX_RIGHTBRACKET ? fields[INDEX_RIGHTBRACKET] : "";    if (sRightBracket.length() > 0) {      for (int i=0; i < listRightBracket.getItems().size(); i++) {        if (listRightBracket.getItemAtIndex(i).getValue().equals(sRightBracket)) {          listRightBracket.setSelectedIndex(i);          break;        }      }    }  }}  }
class C{  public void parse(final InputStream stream) throws UncheckedIOException {  parse(null,stream);}  }
class C{  private Object writeReplace(){  return new Ser(Ser.INSTANT_TYPE,this);}  }
class C{  public boolean remove(T obj){  if (head == null)   return false;  if (head.prev == head) {    if (head.element.equals(obj)) {      head=null;      return true;    } else     return false;  }  Node<T> start=head;  Node<T> current=head;  do {    if (current.element.equals(obj)) {      current.prev.next=current.next;      current.next.prev=current.prev;      if (current == head)       head=current.next;      return true;    }    current=current.next;  } while (current != start);  return false;}  }
class C{  public static char[] encode(byte[] in){  return encode(in,0,in.length);}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  private static Connector createUDPConnector(final InetSocketAddress address,final NetworkConfig config){  UDPConnector c=new UDPConnector(address);  c.setReceiverThreadCount(config.getInt(NetworkConfig.Keys.NETWORK_STAGE_RECEIVER_THREAD_COUNT));  c.setSenderThreadCount(config.getInt(NetworkConfig.Keys.NETWORK_STAGE_SENDER_THREAD_COUNT));  c.setReceiveBufferSize(config.getInt(NetworkConfig.Keys.UDP_CONNECTOR_RECEIVE_BUFFER));  c.setSendBufferSize(config.getInt(NetworkConfig.Keys.UDP_CONNECTOR_SEND_BUFFER));  c.setReceiverPacketSize(config.getInt(NetworkConfig.Keys.UDP_CONNECTOR_DATAGRAM_SIZE));  return c;}  }
class C{  public static void checkArgument(boolean test,String message,Object... arguments){  if (!test) {    throw newIllegalArgumentException(message,arguments);  }}  }
class C{  private void addRowEditor(Component component,ListCell listcell){  listcell.setLabel("");  listcell.getChildren().clear();  listcell.appendChild(component);}  }
class C{  public SOAPFault(final String message,final QName code,final String actor,final String language,final Node detail,final SOAPFaultSubCode subCode,final Throwable throwable){  super(message,throwable);  this.code=code;  this.actor=actor;  this.language=language;  this.detail=detail;  this.subCode=subCode;}  }
class C{  public List displayPathOnRoad(Point start,Point end,Route route,List segments){  List newPoints;  try {    if (route == null) {      OMPoint point=new RedPoint(start.x,start.y,5);      toDraw.add(point);      point=new RedPoint(end.x,end.y,5);      toDraw.add(point);      return null;    }    if (drawResults) {      OMPoint point=new YellowPoint(start.x,start.y,10);      toDraw.add(point);      point=new YellowPoint(end.x,end.y,10);      toDraw.add(point);    }    newPoints=new ArrayList();    populatePointsAndSegments(route,newPoints,segments);    if (drawResults) {      Point last=null;      Point first=null;      for (Iterator iter=newPoints.iterator(); iter.hasNext(); ) {        Point pt=(Point)iter.next();        if (last != null) {          OMLine line=new BlueLine(last.x,last.y,pt.x,pt.y);          toDraw.add(line);        }        if (first == null)         first=pt;        last=pt;      }      if (first != null && last != null) {        OMLine line=new YellowLine(start.x,start.y,first.x,first.y,10);        toDraw.add(line);        line=new YellowLine(last.x,last.y,end.x,end.y,10);        toDraw.add(line);      }    }  } catch (  Exception e) {    logger.warning("Got exception " + e);    e.printStackTrace();    return null;  }  return newPoints;}  }
class C{  public void isReady(){  if (!isConnected()) {    throw new IllegalStateException("Engine is not connected.");  }  if (isProcessingGo()) {  } else {    if (LOG.isDebugEnabled()) {      LOG.debug("Entering isReady()");    }    send("isready");    try {      String reply=readLine();      while (reply != null && !reply.equalsIgnoreCase("readyok")) {        reply=readLine();      }    } catch (    Throwable t) {      LOG.error("Error occured in isReady. Disconnecting.",t);      disconnect();    }  }}  }
class C{  public String vertexId(){  return id;}  }
class C{  public final boolean check(double minNoObj){  int counter=0;  int i;  for (i=0; i < m_perBag.length; i++) {    if (Utils.grOrEq(m_perBag[i],minNoObj)) {      counter++;    }  }  if (counter > 1) {    return true;  } else {    return false;  }}  }
class C{  public boolean isSpeechEnabled(){  return isSpeechEnabled;}  }
class C{  @Override public void clear(){  this.centerBlock=null;  this.topBlock=null;  this.bottomBlock=null;  this.leftBlock=null;  this.rightBlock=null;}  }
class C{  public void removeActionListener(ActionListener listener){  forwardProjectionButton.addActionListener(listener);  backProjectionButton.addActionListener(listener);}  }
class C{  public BlockBorder(double top,double left,double bottom,double right){  this(new RectangleInsets(top,left,bottom,right),Color.black);}  }
class C{  public boolean isTextBtn1(){  return isTextBtn1;}  }
class C{  public static void main(String[] args){  Traveler cal=new Traveler("General Ackbar",5,8);  treasureChest(cal);  trap(cal);  treasureChest(cal);  superTrap(cal);  cal.endJourney();}  }
class C{  public HttpCache(){  this(HttpCache.DEFAULT_CACHE_SIZE,HttpCache.DEFAULT_EXPIRY_TIME);}  }
class C{  @Override public void initialize(){  super.initialize();  m_Quality=1.0f;  m_Background=Color.WHITE;  setScalingEnabled(false);}  }
class C{  @Override public void start(){  _httpContainer=_httpBuilder.build();  _httpContainer.start();}  }
class C{  public boolean isProtected(){  return this.modifierKeyword == ModifierKeyword.PROTECTED_KEYWORD;}  }
class C{  public static SearchScrollRequest searchScrollRequest(String scrollId){  return new SearchScrollRequest(scrollId);}  }
class C{  public SessionEditorEdge(SessionEditorNode node1,SessionEditorNode node2,int sessionEdgeMode){  super(node1,node2,DisplayEdge.DIRECTED);  if ((sessionEdgeMode >= 0) && (sessionEdgeMode <= 1)) {    this.sessionEdgeMode=sessionEdgeMode;  } else {    throw new IllegalArgumentException();  }}  }
class C{  public Interpreter(ConsoleInterface console,NameSpace globalNameSpace){  this(console.getIn(),console.getOut(),console.getErr(),true,globalNameSpace);  setConsole(console);}  }
class C{  public static Path uniqueFile(Path file,final Set<Path> existing){  if (!existing.contains(file)) {    existing.add(file);    return file;  }  final Path folder=file.getParent();  final Pair<String,String> nameExt=getFileNameAndExt(file);  final StringBuilder sb=new StringBuilder(nameExt.value1).append(" (");  final String ext=nameExt.value2 == null ? null : '.' + nameExt.value2;  final int nameLength=sb.length();  for (int counter=2; true; counter++) {    sb.append(counter).append(')');    if (ext != null)     sb.append(ext);    file=folder == null ? Paths.get(sb.toString()) : folder.resolve(sb.toString());    if (!existing.contains(file)) {      existing.add(file);      return file;    }    sb.setLength(nameLength);  }}  }
class C{  private boolean menuItemAction(int screenX,int screenY,int action){  ListView listView=mAppMenu.getPopup().getListView();  ArrayList<View> itemViews=new ArrayList<View>();  for (int i=0; i < listView.getChildCount(); ++i) {    boolean hasImageButtons=false;    if (listView.getChildAt(i) instanceof LinearLayout) {      LinearLayout layout=(LinearLayout)listView.getChildAt(i);      for (int j=0; j < layout.getChildCount(); ++j) {        itemViews.add(layout.getChildAt(j));        if (layout.getChildAt(j) instanceof ImageButton)         hasImageButtons=true;      }    }    if (!hasImageButtons)     itemViews.add(listView.getChildAt(i));  }  boolean didPerformClick=false;  for (int i=0; i < itemViews.size(); ++i) {    View itemView=itemViews.get(i);    boolean shouldPerform=itemView.isEnabled() && itemView.isShown() && getScreenVisibleRect(itemView).contains(screenX,screenY);switch (action) {case ITEM_ACTION_HIGHLIGHT:      itemView.setPressed(shouldPerform);    break;case ITEM_ACTION_PERFORM:  if (shouldPerform) {    itemView.performClick();    didPerformClick=true;  }break;case ITEM_ACTION_CLEAR_HIGHLIGHT_ALL:itemView.setPressed(false);break;default :assert false;break;}}return didPerformClick;}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  super.readExternal(in);  approximation=(PolynomialApproximation)in.readObject();}  }
class C{  public int idLowCodeAsValueFromSystemName(String systemName){  int dCode=-1;  if (!iCodes.reset(systemName).matches() || !validSystemNameFormat(systemName,iCodes.group(2).charAt(0))) {  } else {    if (iCodes.groupCount() == 5) {      try {        dCode=Integer.parseInt(iCodes.group(5),16);      } catch (      Exception e) {        log.error("illegal character in high id system name: " + systemName);        return -1;      }    }  }  return dCode;}  }
class C{  public ViewDetailsIcon(){  this.width=getOrigWidth();  this.height=getOrigHeight();}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.camera);  CameraManager.init(getApplication());  viewfinderView=(ViewfinderView)findViewById(R.id.viewfinder_view);  cancelScanButton=(Button)this.findViewById(R.id.btn_cancel_scan);  hasSurface=false;  inactivityTimer=new InactivityTimer(this);}  }
class C{  public void close() throws IOException {  if (!closed) {    streamCount--;    Util.getImplementation().closingOutput(out);    Util.getImplementation().logStreamClose(name,false,streamCount);    try {      flush();    } catch (    Exception ignored) {    } finally {      Util.cleanup(out);    }    if (connection != null) {      Util.getImplementation().cleanup(connection);    }    closed=true;  } else {    Util.getImplementation().logStreamDoubleClose(name,false);  }}  }
class C{  public HeatChart(double[][] zValues,double low,double high){  this.zValues=zValues;  this.lowValue=low;  this.highValue=high;  setXValues(0,1);  setYValues(0,1);  this.cellSize=new Dimension(20,20);  this.margin=10;  this.backgroundColour=Color.WHITE;  this.title=null;  this.titleFont=new Font("Sans-Serif",Font.BOLD,12);  this.titleColour=Color.BLACK;  this.xAxisLabel=null;  this.yAxisLabel=null;  this.axisThickness=2;  this.axisColour=Color.BLACK;  this.axisLabelsFont=new Font("Sans-Serif",Font.PLAIN,10);  this.axisLabelColour=Color.BLACK;  this.axisValuesColour=Color.BLACK;  this.axisValuesFont=new Font("Sans-Serif",Font.PLAIN,8);  this.xAxisValuesFrequency=1;  this.xAxisValuesHeight=0;  this.xValuesHorizontal=false;  this.showXAxisValues=false;  this.showYAxisValues=false;  this.yAxisValuesFrequency=1;  this.yAxisValuesHeight=0;  this.yValuesHorizontal=true;  this.highValueColour=Color.BLACK;  this.lowValueColour=Color.WHITE;  this.colourScale=SCALE_LINEAR;}  }
class C{  protected final int transitiveAnyFusion(int mode){  QueueSubscription<R> qs=this.qs;  if (qs != null) {    int m=qs.requestFusion(mode);    if (m != Fuseable.NONE) {      fusionMode=m;    }    return m;  }  return Fuseable.NONE;}  }
class C{  public static String printProof(Proof proof){  StringBuilder sb=new StringBuilder();  sb.append("Proof, Answer Bindings: ");  sb.append(proof.getAnswerBindings());  sb.append("\n");  List<ProofStep> steps=proof.getSteps();  int maxStepWidth="Step".length();  int maxProofWidth="Proof".length();  int maxJustificationWidth="Justification".length();  for (  ProofStep step : steps) {    String sn="" + step.getStepNumber();    if (sn.length() > maxStepWidth) {      maxStepWidth=sn.length();    }    if (step.getProof().length() > maxProofWidth) {      maxProofWidth=step.getProof().length();    }    if (step.getJustification().length() > maxJustificationWidth) {      maxJustificationWidth=step.getJustification().length();    }  }  maxStepWidth+=1;  maxProofWidth+=1;  maxJustificationWidth+=1;  String f="|%-" + maxStepWidth + "s| %-"+ maxProofWidth+ "s|%-"+ maxJustificationWidth+ "s|\n";  int barWidth=5 + maxStepWidth + maxProofWidth+ maxJustificationWidth;  StringBuilder bar=new StringBuilder();  for (int i=0; i < barWidth; i++) {    bar.append("-");  }  bar.append("\n");  sb.append(bar);  sb.append(String.format(f,"Step","Proof","Justification"));  sb.append(bar);  for (  ProofStep step : steps) {    sb.append(String.format(f,"" + step.getStepNumber(),step.getProof(),step.getJustification()));  }  sb.append(bar);  return sb.toString();}  }
class C{  void loadMethodIds() throws IOException {  int count=mHeaderItem.methodIdsSize;  mMethodIds=new MethodIdItem[count];  seek(mHeaderItem.methodIdsOff);  for (int i=0; i < count; i++) {    mMethodIds[i]=new MethodIdItem();    mMethodIds[i].classIdx=readShort() & 0xffff;    mMethodIds[i].protoIdx=readShort() & 0xffff;    mMethodIds[i].nameIdx=readInt();  }}  }
