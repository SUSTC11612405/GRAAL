class C{  public Object trunc(InstanceScope scope,Object v){  if (v == null)   return null;  if (v instanceof List) {    List<?> elems=(List<?>)v;    if (elems.size() <= 1)     return null;    return elems.subList(0,elems.size() - 1);  }  v=convertAnythingIteratableToIterator(scope,v);  if (v instanceof Iterator) {    List<Object> a=new ArrayList<Object>();    Iterator<?> it=(Iterator<?>)v;    while (it.hasNext()) {      Object o=it.next();      if (it.hasNext())       a.add(o);    }    return a;  }  return null;}  }
class C{  private synchronized long flushBuffer() throws IOException {  long pos=channel.position();  int len=(int)buffer.getFilePointer();  byte[] bytes=new byte[len];  buffer.writeTo(bytes,0);  buffer.reset();  intBuffer[0]=(byte)(len >> 24);  intBuffer[1]=(byte)(len >> 16);  intBuffer[2]=(byte)(len >> 8);  intBuffer[3]=(byte)len;  intByteBuffer.limit(4);  intByteBuffer.position(0);  writeBytesToChannel(intByteBuffer);  writeBytesToChannel(ByteBuffer.wrap(bytes));  return pos;}  }
class C{  public double norm2(){  return (new SingularValueDecomposition(this).norm2());}  }
class C{  public boolean isSpringDamper(){  return this.frequency > 0.0 && this.dampingRatio > 0.0;}  }
class C{  public DeathmatchEngine(final Player player,final DeathmatchInfo deathmatchInfo,final EventRaiser raiser){  this.dmInfo=deathmatchInfo;  this.player=player;  this.raiser=raiser;  initialize();}  }
class C{  public static Element selectElement(XPathExpression expr,Node context){  try {    Object result=expr.evaluate(context,XPathConstants.NODE);    if (result == null) {      return null;    } else     if (result instanceof Element) {      return (Element)result;    } else {      throw new XmlException("Not an element: " + result);    }  } catch (  XPathExpressionException e) {    throw new XmlException(e);  }}  }
class C{  public void handleUploadStarted(){  if (mLogger.isActivated()) {    mLogger.debug("File upload started");  }synchronized (mLock) {    setState(FileUpload.State.STARTED);  }}  }
class C{  protected void create(boolean stream) throws IOException {}  }
class C{  public void updatePlatform(final String aOs,final String aArch,final ByteOrder aByteOrder){  _os=aOs.toLowerCase();  _arch=aArch.toLowerCase();  String[] chmod={"chmod","755",null};  if (_arch.equals("x86") || _arch.equals("i386") || _arch.equals("i486")|| _arch.equals("i586")|| _arch.equals("i686")) {    _arch=ARCH_X86_32;  }  if (_arch.equals("amd64")) {    _arch=ARCH_X86_64;  }  if (_arch.equals("powerpc")) {    _arch=ARCH_PPC;  }  if (_os.startsWith("windows")) {    _os=OS_WINDOWS;    _executableSuffix=".exe";    chmod=null;  }  if (_os.startsWith("mac")) {    _os=OS_OSX;  }  if (_os.startsWith("linux")) {    _os=OS_LINUX;  }  if (_os.startsWith("sun")) {    _os=OS_SOLARIS;  }  _chmodCmd=chmod;  _byteOrder=aByteOrder;}  }
class C{  void stop(){  if (mRunning) {    mTriggerPercentage=0;    mFinishTime=AnimationUtils.currentAnimationTimeMillis();    mRunning=false;    mParent.postInvalidate();  }}  }
class C{  public static ODataUri createODataUriForServiceDocument(MediaType... mediaTypes){  return createODataUriForServiceDocument(SERVICE_ROOT,mediaTypes);}  }
class C{  public List<String> listPcjTables(final Connector accumuloConn,final String ryaInstanceName){  checkNotNull(accumuloConn);  checkNotNull(ryaInstanceName);  final List<String> pcjTables=new ArrayList<>();  final String pcjPrefix=ryaInstanceName + "INDEX";  boolean foundInstance=false;  for (  final String tableName : accumuloConn.tableOperations().list()) {    if (tableName.startsWith(ryaInstanceName)) {      foundInstance=true;      if (tableName.startsWith(pcjPrefix)) {        pcjTables.add(tableName);      }    } else     if (foundInstance) {      break;    }  }  return pcjTables;}  }
class C{  private byte skipTagForward(){  int initialCharIndex=charIndex;  while (charIndex < length) {    lastChar=text.charAt(charIndex++);    if (lastChar == '>') {      return Character.DIRECTIONALITY_WHITESPACE;    }    if (lastChar == '"' || lastChar == '\'') {      char quote=lastChar;      while (charIndex < length && (lastChar=text.charAt(charIndex++)) != quote) {      }    }  }  charIndex=initialCharIndex;  lastChar='<';  return Character.DIRECTIONALITY_OTHER_NEUTRALS;}  }
class C{  public Type3Message(int flags,byte[] lmResponse,byte[] ntResponse,String domain,String user,String workstation){  setFlags(flags);  setLMResponse(lmResponse);  setNTResponse(ntResponse);  setDomain(domain);  setUser(user);  setWorkstation(workstation);}  }
class C{  public void testSetF12(){  boolean f12=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF12(f12);  jmri.util.JUnitAppender.assertErrorMessage("sendFunctionGroup3 needs to be implemented if invoked");}  }
class C{  public ArrayList<ChartSet> prepareEnterAnimation(ChartView chartView){  mIsExiting=false;  return prepareAnimation(chartView);}  }
class C{  public void sendResponse(int code,byte[] header) throws IOException {  int totalLength=3;  byte[] data=null;  if (header != null) {    totalLength+=header.length;    data=new byte[totalLength];    data[0]=(byte)code;    data[1]=(byte)(totalLength >> 8);    data[2]=(byte)totalLength;    System.arraycopy(header,0,data,3,header.length);  } else {    data=new byte[totalLength];    data[0]=(byte)code;    data[1]=(byte)0x00;    data[2]=(byte)totalLength;  }  mOutput.write(data);  mOutput.flush();}  }
class C{  public static byte[] serializeObject(final Object obj) throws IOException {  final ByteArrayOutputStream out=new ByteArrayOutputStream();  ObjectOutputStream objOut=null;  try {    objOut=new ObjectOutputStream(out);    objOut.writeObject(obj);    objOut.flush();    return out.toByteArray();  }  finally {    close(objOut);  }}  }
class C{  MessageInstanceImpl(String sourceId,Date date,String messageId,String messageText,Severity severity,int count,int countFailed){  this(sourceId,date,messageId,messageText,severity);  m_count=count;  m_countFailed=countFailed;}  }
class C{  public void ungreySubTree(TreePath path){  removeFromGreyedPathsSet(path);  for (  TreePath childPath : getChildrenPath(path)) {    ungreySubTree(childPath);  }}  }
class C{  public textarea addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public void score(INode state){  state.score(eval(state));}  }
class C{  protected Precondition makePrecondition(final InputPort port,int portIndex){  return makePrecondition(port);}  }
class C{  @Override public void respond(String response){  getChannel().send().message(getUser(),response);}  }
class C{  public static TransactionSignature decodeFromBitcoin(byte[] bytes,boolean requireCanonicalEncoding,boolean requireCanonicalSValue) throws VerificationException {  if (requireCanonicalEncoding && !isEncodingCanonical(bytes))   throw new VerificationException("Signature encoding is not canonical.");  ECKey.ECDSASignature sig;  try {    sig=ECKey.ECDSASignature.decodeFromDER(bytes);  } catch (  IllegalArgumentException e) {    throw new VerificationException("Could not decode DER",e);  }  if (requireCanonicalSValue && !sig.isCanonical())   throw new VerificationException("S-value is not canonical.");  return new TransactionSignature(sig.r,sig.s,bytes[bytes.length - 1]);}  }
class C{  private void sendReInvite(SipRequest reInvite) throws PayloadException, NetworkException {  try {    if (mLogger.isActivated()) {      mLogger.debug("Send RE-INVITE");    }    SipTransactionContext ctx=mSession.getImsService().getImsModule().getSipManager().sendSipMessageAndWait(reInvite,mSession.getResponseTimeout());    if (ctx.isSipResponse()) {switch (ctx.getStatusCode()) {case Response.OK:        if (mLogger.isActivated()) {          mLogger.debug("Session timer refresh with success");        }      mSession.getDialogPath().setSigEstablished();    mLastSessionRefresh=System.currentTimeMillis();  if (mLogger.isActivated()) {    mLogger.debug("Send ACK");  }mSession.getImsService().getImsModule().getSipManager().sendSipAck(mSession.getDialogPath());mSession.getDialogPath().setSessionEstablished();Dialog dlg=mSession.getDialogPath().getStackDialog();if (dlg != null) {dlg.incrementLocalSequenceNumber();}startProcessing();break;case Response.METHOD_NOT_ALLOWED:if (mLogger.isActivated()) {mLogger.debug("Session timer refresh not supported");}break;case Response.PROXY_AUTHENTICATION_REQUIRED:if (mLogger.isActivated()) {mLogger.info("407 response received. Send second RE-INVITE");}mSession.getDialogPath().incrementCseq();SipRequest newReInvite=SipMessageFactory.createReInvite(mSession.getDialogPath());mSession.getAuthenticationAgent().readProxyAuthenticateHeader(ctx.getSipResponse());mSession.getAuthenticationAgent().setProxyAuthorizationHeader(newReInvite);sendReInvite(newReInvite);break;default :if (mLogger.isActivated()) {mLogger.debug("Session timer refresh has failed: close the session");}mSession.terminateSession(TerminationReason.TERMINATION_BY_TIMEOUT);ContactId contact=mSession.getRemoteContact();mSession.getImsService().getImsModule().getCapabilityService().requestContactCapabilities(contact);break;}} else {throw new PayloadException("No response received: timeout!");}} catch (InvalidArgumentException e) {throw new PayloadException("Unable to fetch Authorization header!",e);}catch (ParseException e) {throw new PayloadException("Unable to fetch Authorization header!",e);}}  }
class C{  public Template(){  this("","","","","",true);}  }
class C{  private void onChanged(){  if (builder != null) {    message=null;  }  if (isClean && parent != null) {    parent.markDirty();    isClean=false;  }}  }
class C{  public static LazyListX<Integer> range(int start,int end){  return fromStreamS(ReactiveSeq.range(start,end));}  }
class C{  @Override protected void consumeAttributes(AttributeHelper helper) throws ParseException {  methodType=helper.consumeEnum(METHODTYPE,true,MethodType.class,MethodType.METATAG);  inUse=helper.consumeBoolean(INUSE,true);  fileContent=helper.consume(FILECONTENT,false);  String content=helper.consumeContent(false);  if (content != null) {    value=content;  }}  }
class C{  public AppEngineStopTask(AppEngineStop stop,String module,String version){  this.stop=stop;  this.module=module;  this.version=version;}  }
class C{  public Weight(BigDecimal magnitude,WeightUnit unit){  this.magnitude=magnitude;  this.unit=unit;}  }
class C{  private boolean isFileValid(File file,String methodName){  if (file == null) {    Log.printConcatLine(name,".",methodName,": Warning - the given file is null.");    return false;  }  String fileName=file.getName();  if (fileName == null || fileName.length() == 0) {    Log.printConcatLine(name,"." + methodName,": Warning - invalid file name.");    return false;  }  return true;}  }
class C{  protected AbstractResourceUndoState(){  super();}  }
class C{  public void clearImageBorderSpecialTile(){  specialTile=null;  trackComponent=null;}  }
class C{  @Provides @Config("rdeStagingLockTimeout") public static Duration provideRdeStagingLockTimeout(){  return Duration.standardHours(5);}  }
class C{  public CommandLine clear(){  line.clear();  return this;}  }
class C{  public boolean mayLaunchUrl(Uri url,Bundle extras,List<Bundle> otherLikelyBundles){  try {    return mService.mayLaunchUrl(mCallback,url,extras,otherLikelyBundles);  } catch (  RemoteException e) {    return false;  }}  }
class C{  public Object atomUnmarshall(String oDataEntityXml,String fullResponse,ODataClientQuery query) throws UnsupportedEncodingException, ODataClientException {  Object unmarshalledEntity;  ODataRequest request=buildODataRequestFromString(oDataEntityXml,query);  ODataRequestContext requestContext=new ODataRequestContext(request,createODataUri(url,query.getEdmEntityName()),entityDataModel);  try {    unmarshalledEntity=getODataAtomParser(requestContext).getODataEntity();  } catch (  ODataException|RuntimeException e) {    throw new ODataClientParserException(format("Caught exception {0}: {1} when parsing response received from OData service",e.getClass().getSimpleName(),e.getMessage()),e,oDataEntityXml,fullResponse);  }  return unmarshalledEntity;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.STRING_EXPR___NAME_1:    setName_1(NAME_1_EDEFAULT);  return;case UmplePackage.STRING_EXPR___EQUALITY_OP_1:getEqualityOp_1().clear();return;case UmplePackage.STRING_EXPR___STRING_LIT_1:getStringLit_1().clear();return;case UmplePackage.STRING_EXPR___INDEX_1:setIndex_1(INDEX_1_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  private boolean routeProfilesEqual(TransitRoute transitRoute,TransitRoute transitRoute2){  if (transitRoute.getStops().size() != transitRoute2.getStops().size())   return false;  for (int i=0; i < transitRoute.getStops().size(); i++) {    if (!(transitRoute.getStops().get(i).getStopFacility().getId().equals(transitRoute2.getStops().get(i).getStopFacility().getId())))     break;    if (i == transitRoute.getStops().size() - 1)     return true;  }  return false;}  }
class C{  private void needNewBuffer(int newSize){  int delta=newSize - size;  int newBufferSize=Math.max(minChunkLen,delta);  currentBufferIndex++;  currentBuffer=new char[newBufferSize];  offset=0;  if (currentBufferIndex >= buffers.length) {    int newLen=buffers.length << 1;    char[][] newBuffers=new char[newLen][];    System.arraycopy(buffers,0,newBuffers,0,buffers.length);    buffers=newBuffers;  }  buffers[currentBufferIndex]=currentBuffer;  buffersCount++;}  }
class C{  public void testNotEveryEdgeToOneNode(){  Graph<Integer,Number> graph=generateAndTestSizeOfBarabasiAlbertGraph(graphFactory,vertexFactory,edgeFactory,init_vertices,edges_to_add_per_timestep,random_seed,num_tests);  for (  Integer v : graph.getVertices()) {    assertTrue(graph.inDegree(v) < graph.getEdgeCount());  }}  }
class C{  protected boolean hasZoom(){  return true;}  }
class C{  @NonNull public ActionMode onLongClick(AppCompatActivity activity,int position){  if (mActionMode == null) {    mActionMode=activity.startSupportActionMode(this);  }  toggleSelection(position);  return mActionMode;}  }
class C{  public static Class<?> loadProxyClass(String codebase,String[] interfaces,ClassLoader defaultLoader) throws MalformedURLException, ClassNotFoundException {  if (loaderLog.isLoggable(Log.BRIEF)) {    loaderLog.log(Log.BRIEF,"interfaces = " + Arrays.asList(interfaces) + ", "+ "codebase = \""+ (codebase != null ? codebase : "")+ "\""+ (defaultLoader != null ? ", defaultLoader = " + defaultLoader : ""));  }  ClassLoader parent=getRMIContextClassLoader();  if (loaderLog.isLoggable(Log.VERBOSE)) {    loaderLog.log(Log.VERBOSE,"(thread context class loader: " + parent + ")");  }  URL[] urls;  if (codebase != null) {    urls=pathToURLs(codebase);  } else {    urls=getDefaultCodebaseURLs();  }  SecurityManager sm=System.getSecurityManager();  if (sm == null) {    try {      Class<?> c=loadProxyClass(interfaces,defaultLoader,parent,false);      if (loaderLog.isLoggable(Log.VERBOSE)) {        loaderLog.log(Log.VERBOSE,"(no security manager: codebase disabled) " + "proxy class defined by " + c.getClassLoader());      }      return c;    } catch (    ClassNotFoundException e) {      if (loaderLog.isLoggable(Log.BRIEF)) {        loaderLog.log(Log.BRIEF,"(no security manager: codebase disabled) " + "proxy class resolution failed",e);      }      throw new ClassNotFoundException(e.getMessage() + " (no security manager: RMI class loader disabled)",e.getException());    }  }  Loader loader=lookupLoader(urls,parent);  try {    if (loader != null) {      loader.checkPermissions();    }  } catch (  SecurityException e) {    try {      Class<?> c=loadProxyClass(interfaces,defaultLoader,parent,false);      if (loaderLog.isLoggable(Log.VERBOSE)) {        loaderLog.log(Log.VERBOSE,"(access to codebase denied) " + "proxy class defined by " + c.getClassLoader());      }      return c;    } catch (    ClassNotFoundException unimportant) {      if (loaderLog.isLoggable(Log.BRIEF)) {        loaderLog.log(Log.BRIEF,"(access to codebase denied) " + "proxy class resolution failed",e);      }      throw new ClassNotFoundException("access to class loader denied",e);    }  }  try {    Class<?> c=loadProxyClass(interfaces,defaultLoader,loader,true);    if (loaderLog.isLoggable(Log.VERBOSE)) {      loaderLog.log(Log.VERBOSE,"proxy class defined by " + c.getClassLoader());    }    return c;  } catch (  ClassNotFoundException e) {    if (loaderLog.isLoggable(Log.BRIEF)) {      loaderLog.log(Log.BRIEF,"proxy class resolution failed",e);    }    throw e;  }}  }
class C{  public Account findByAccountNumber(String accountNumber){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Account> query=builder.createQuery(Account.class);    Root<Account> from=query.from(Account.class);    query.select(from);    query.where(builder.equal(from.get("accountNumber"),accountNumber));    List<Account> items=entityManager.createQuery(query).getResultList();    for (    Account account : items) {      account.getPortfolioAccounts().size();    }    entityManager.getTransaction().commit();    if (items.size() > 0) {      return items.get(0);    }    return null;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public static long sizeOf(float[] arr){  return alignObjectSize((long)NUM_BYTES_ARRAY_HEADER + (long)Float.BYTES * arr.length);}  }
class C{  public void resolve(AbsoluteTableIdentifier absoluteTableIdentifier){  DimColumnResolvedFilterInfo dimColumnEvaluatorInfo=null;  MeasureColumnResolvedFilterInfo msrColumnEvalutorInfo=null;  int index=0;  if (exp instanceof ConditionalExpression) {    ConditionalExpression conditionalExpression=(ConditionalExpression)exp;    List<ColumnExpression> columnList=conditionalExpression.getColumnList();    for (    ColumnExpression columnExpression : columnList) {      if (columnExpression.isDimension()) {        dimColumnEvaluatorInfo=new DimColumnResolvedFilterInfo();        dimColumnEvaluatorInfo.setColumnIndex(columnExpression.getCarbonColumn().getOrdinal());        dimColumnEvaluatorInfo.setRowIndex(index++);        dimColumnEvaluatorInfo.setDimension(columnExpression.getDimension());        dimColumnEvaluatorInfo.setDimensionExistsInCurrentSilce(false);        dimColEvaluatorInfoList.add(dimColumnEvaluatorInfo);      } else {        msrColumnEvalutorInfo=new MeasureColumnResolvedFilterInfo();        msrColumnEvalutorInfo.setRowIndex(index++);        msrColumnEvalutorInfo.setAggregator(((CarbonMeasure)columnExpression.getCarbonColumn()).getAggregateFunction());        msrColumnEvalutorInfo.setColumnIndex(((CarbonMeasure)columnExpression.getCarbonColumn()).getOrdinal());        msrColumnEvalutorInfo.setType(columnExpression.getCarbonColumn().getDataType());        msrColEvalutorInfoList.add(msrColumnEvalutorInfo);      }    }  }}  }
class C{  public synchronized ZooKeeperClientBuilder connectionTimeoutMs(int connectionTimeoutMs){  this.conectionTimeoutMs=connectionTimeoutMs;  return this;}  }
class C{  @Override protected int makePressColor(){  return Color.parseColor("#88DDDDDD");}  }
class C{  public float dot(Quaternion other){  return x * other.x + y * other.y + z * other.z + w * other.w;}  }
class C{  public void reinitializeRegion(){  GemFireCacheImpl cache=this.region.getCache();  String regionName=this.region.getName();  this.region.destroyRegion();  Exception problem=null;  try {    createHARegion(regionName,cache);  } catch (  IOException e) {    problem=e;  }catch (  ClassNotFoundException e) {    problem=e;  }  if (problem != null) {    throw new InternalGemFireException("Problem recreating region queue '" + regionName + "'");  }  try {    this.putGIIDataInRegion();  } catch (  InterruptedException e) {    cache.getCancelCriterion().checkCancelInProgress(e);    Thread.currentThread().interrupt();  }}  }
class C{  public static void sendScreenView(String screenName){  if (canSend()) {    mTracker.setScreenName(screenName);    mTracker.send(new HitBuilders.AppViewBuilder().build());    Log.d(TAG,"Screen View recorded: " + screenName);  } else {    Log.d(TAG,"Screen View NOT recorded (analytics disabled or not ready).");  }}  }
class C{  public boolean isBluetoothOn(){  BluetoothAdapter mBluetoothAdapter=BluetoothAdapter.getDefaultAdapter();  if (mBluetoothAdapter == null) {    Toast.makeText(mContext,"Bluetooth not supported",Toast.LENGTH_SHORT).show();    return false;  }  return mBluetoothAdapter.isEnabled();}  }
class C{  public JavaModelStatus(int code,IPath path){  super(ERROR,JavaCore.PLUGIN_ID,code,"JavaModelStatus",null);  this.elements=JavaElement.NO_ELEMENTS;  this.path=path;}  }
class C{  private void startIfReady(Animator dependencyAnimation){  if (mAnimatorSet.mTerminated) {    return;  }  Dependency dependencyToRemove=null;  int numDependencies=mNode.tmpDependencies.size();  for (int i=0; i < numDependencies; ++i) {    Dependency dependency=mNode.tmpDependencies.get(i);    if (dependency.rule == mRule && dependency.node.animation == dependencyAnimation) {      dependencyToRemove=dependency;      dependencyAnimation.removeListener(this);      break;    }  }  mNode.tmpDependencies.remove(dependencyToRemove);  if (mNode.tmpDependencies.size() == 0) {    mNode.animation.start();    mAnimatorSet.mPlayingSet.add(mNode.animation);  }}  }
class C{  public Sqrt(){  super("sqrt",1);}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + freedom+ ")";}  }
class C{  public void clear(){  fMap.clear();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  WhiteboxRaster image;  WhiteboxRaster output;  int cols, rows;  int progress=0;  int col, row;  double z;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader.isEmpty()) || (outputHeader.isEmpty())) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("blue_white_red.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    image.close();    Random generator=new Random();    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          z=generator.nextInt(101) / 100.0;          output.setValue(row,col,z);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(row * 100.0 / rows);      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.597 -0500",hash_original_method="6CA7282E928AA840C6D25E995C5EBFEA",hash_generated_method="EE2364AE0179C423F2BD973FF5B92F49") private void replyDisconnected(int status){  Message msg=mSrcHandler.obtainMessage(CMD_CHANNEL_DISCONNECTED);  msg.arg1=status;  msg.obj=this;  msg.replyTo=mDstMessenger;  mSrcHandler.sendMessage(msg);}  }
class C{  private byte[] inflateInput(final byte[] zipinput,final int start){  ByteArrayOutputStream stream;  try {    byte[] compressedInput=zipinput;    Inflater decompresser=new Inflater();    decompresser.setInput(compressedInput,start,compressedInput.length - start);    byte[] output=new byte[1000];    stream=new ByteArrayOutputStream();    int cLength;    do {      cLength=decompresser.inflate(output);      stream.write(output,0,cLength);    } while (cLength == 1000);  } catch (  DataFormatException e) {    throw new RuntimeException(e);  }  return stream.toByteArray();}  }
class C{  private void internalUnion(CharSet that){  chars=doUnion(that.chars);}  }
class C{  public static Value<String> string(String text){  return Value.ofText(requireNonNull(text));}  }
class C{  public File chooseForRead(){  File result;  if (mReal.exists()) {    result=mReal;    if (mTemp.exists()) {      mTemp.delete();    }  } else   if (mTemp.exists()) {    result=mTemp;    mTemp.renameTo(mReal);  } else {    return mReal;  }  return result;}  }
class C{  public boolean namespaceEquals(ExpandedNodeId expandedNodeId1,ExpandedNodeId expandedNodeId2){  int expandedNamespaceIndex1=expandedNodeId1.getNamespaceUri() != null ? getIndex(expandedNodeId1.getNamespaceUri()) : expandedNodeId1.getNamespaceIndex();  int expandedNamespaceIndex2=expandedNodeId2.getNamespaceUri() != null ? getIndex(expandedNodeId2.getNamespaceUri()) : expandedNodeId2.getNamespaceIndex();  return expandedNamespaceIndex1 == expandedNamespaceIndex2;}  }
class C{  void resetRootStreams(){  SSGCspy.ss0Driver.resetRootsStream();  SSGCspy.ss1Driver.resetRootsStream();  SSGCspy.immortalDriver.resetRootsStream();  SSGCspy.losNurseryDriver.resetRootsStream();  SSGCspy.losDriver.resetRootsStream();  SSGCspy.plosNurseryDriver.resetRootsStream();  SSGCspy.plosDriver.resetRootsStream();  ss.getCursor();}  }
class C{  @Override public boolean writeLogs(String container,OutputStream output) throws IOException {  try {    Process executedProcess=followLogs(container);    IOUtils.copy(executedProcess.getInputStream(),output);    executedProcess.waitFor(COMMAND_TIMEOUT.getMillis(),MILLISECONDS);  } catch (  InterruptedException e) {    return false;  }  return true;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public DiskDevice(DiskDevice other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetPath()) {    this.path=other.path;  }  this.block_size_bytes=other.block_size_bytes;  this.total_lba_blocks=other.total_lba_blocks;  this.totalSpace=other.totalSpace;}  }
class C{  public SolrHttpRequestRetryHandler(){  this(3);}  }
class C{  private void extractKeys(Properties props){  String keyspec=props.getProperty(INDEX_KAFKA_METADATA_MAC);  if (null != keyspec) {    byte[] key=this.keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length,"Key " + INDEX_KAFKA_METADATA_MAC + " MUST be 128 bits long.");    this.keystore.setKey(KeyStore.SIPHASH_KAFKA_METADATA,key);  }  keyspec=props.getProperty(INDEX_KAFKA_METADATA_AES);  if (null != keyspec) {    byte[] key=this.keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length || 24 == key.length || 32 == key.length,"Key " + INDEX_KAFKA_METADATA_AES + " MUST be 128, 192 or 256 bits long.");    this.keystore.setKey(KeyStore.AES_KAFKA_METADATA,key);  }  keyspec=props.getProperty(INDEX_HBASE_METADATA_AES);  if (null != keyspec) {    byte[] key=this.keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length || 24 == key.length || 32 == key.length,"Key " + INDEX_HBASE_METADATA_AES + " MUST be 128, 192 or 256 bits long.");    this.keystore.setKey(KeyStore.AES_HBASE_METADATA,key);  }  keyspec=props.getProperty(INDEX_KAFKA_DATA_MAC);  if (null != keyspec) {    byte[] key=this.keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length,"Key " + INDEX_KAFKA_DATA_MAC + " MUST be 128 bits long.");    this.keystore.setKey(KeyStore.SIPHASH_KAFKA_DATA,key);  }  keyspec=props.getProperty(INDEX_KAFKA_DATA_AES);  if (null != keyspec) {    byte[] key=this.keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length || 24 == key.length || 32 == key.length,"Key " + INDEX_KAFKA_DATA_AES + " MUST be 128, 192 or 256 bits long.");    this.keystore.setKey(KeyStore.AES_KAFKA_DATA,key);  }  keyspec=props.getProperty(INDEX_HBASE_DATA_AES);  if (null != keyspec) {    byte[] key=this.keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length || 24 == key.length || 32 == key.length,"Key " + INDEX_HBASE_DATA_AES + " MUST be 128, 192 or 256 bits long.");    this.keystore.setKey(KeyStore.AES_HBASE_DATA,key);  }  keyspec=props.getProperty(INDEX_KAFKA_INDEX_MAC);  if (null != keyspec) {    byte[] key=this.keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length,"Key " + INDEX_KAFKA_INDEX_MAC + " MUST be 128 bits long.");    this.keystore.setKey(KeyStore.SIPHASH_KAFKA_INDEX,key);  }  keyspec=props.getProperty(INDEX_KAFKA_INDEX_AES);  if (null != keyspec) {    byte[] key=this.keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length || 24 == key.length || 32 == key.length,"Key " + INDEX_KAFKA_INDEX_AES + " MUST be 128, 192 or 256 bits long.");    this.keystore.setKey(KeyStore.AES_KAFKA_INDEX,key);  }  keyspec=props.getProperty(INDEX_HBASE_INDEX_AES);  if (null != keyspec) {    byte[] key=this.keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length || 24 == key.length || 32 == key.length,"Key " + INDEX_HBASE_INDEX_AES + " MUST be 128, 192 or 256 bits long.");    this.keystore.setKey(KeyStore.AES_HBASE_INDEX,key);  }}  }
class C{  public static Instance linkTransformation(Instance x,int excl[],Instances _D){  Instance copy=(Instance)x.copy();  copy.setDataset(null);  for (int i=excl.length - 1; i >= 0; i--) {    copy.deleteAttributeAt(excl[i]);  }  copy.setDataset(_D);  return copy;}  }
class C{  public final String readUTF() throws IOException {  return readUTF(this);}  }
class C{  private boolean removeIvrZone(MDSDialog edgeDialog,IvrZone ivrZone){  boolean isSameHost=ivrZone.getIvrNetworkSystem().getIpAddress().equals(edgeDialog.getSession().getSession().getHost());  MDSDialog dialog=isSameHost ? edgeDialog : null;  try {    if (dialog == null) {      dialog=setUpDialog(ivrZone.getIvrNetworkSystem());    }    List<IvrZoneset> ivrZonesets=dialog.showIvrZonesets(false);    if (ivrZonesets == null || !isInZonesets(ivrZone,ivrZonesets)) {      return false;    }    dialog.config();    String zoneName=ivrZone.getName();    _log.info("Removing ivr zone: " + zoneName);    dialog.ivrZoneName(zoneName,false);    for (    IvrZoneMember ivrZoneMember : ivrZone.getMembers()) {      dialog.ivrZoneMember(ivrZoneMember.getPwwn(),ivrZoneMember.getVsanId(),true);    }    dialog.ivrZoneName(zoneName,true);    IvrZoneset activeIvrZoneset=dialog.showActiveIvrZoneset();    dialog.ivrZonesetName(activeIvrZoneset.getName(),false);    dialog.ivrZonesetMember(zoneName,true);    commitIvrZones(dialog,activeIvrZoneset);    dialog.copyRunningConfigToStartupFabric();    dialog.endConfig();    return true;  } catch (  Exception ex) {    throw NetworkDeviceControllerException.exceptions.removeZonesStrategyFailed(ex);  } finally {    if (dialog.isInSession()) {      dialog.endConfig();      dialog.config();      dialog.ivrAbort();      dialog.endConfig();    }    if (!isSameHost) {      disconnect(dialog);    }  }}  }
class C{  public String toString(){  int left=day * 1440 + start;  int right=day * 1440 + end;  return "[" + left + ","+ right+ ")";}  }
class C{  @Deprecated public final SprogCommandStation instance(){  return null;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (delegationSuperClassSteps: ");  result.append(delegationSuperClassSteps);  result.append(", delegationTargetIsAbstract: ");  result.append(delegationTargetIsAbstract);  result.append(')');  return result.toString();}  }
class C{  public static Coordinate[] closestPoints(Geometry g0,Geometry g1){  DistanceOp distOp=new DistanceOp(g0,g1);  return distOp.nearestPoints();}  }
class C{  public static ChainingJsonParser<ChainingJsonParser<?>> parseJson(File file){  return new ChainingJsonParser<ChainingJsonParser<?>>(file);}  }
class C{  private void flushRemainder() throws IOException {  try {    if (remainder != null) {      remainder=igfsCtx.data().storeDataBlocks(fileInfo,length() + space,null,0,ByteBuffer.wrap(remainder,0,remainderDataLen),true,streamRange,batch);      remainder=null;      remainderDataLen=0;    }  } catch (  IgniteCheckedException e) {    throw new IOException("Failed to flush data (remainder) [path=" + path + ", space="+ space+ ']',e);  }}  }
class C{  public void checkAccountOfCurrentDownload(){  if (mCurrentDownload != null && !AccountUtils.exists(mCurrentDownload.getAccount(),getApplicationContext())) {    mCurrentDownload.cancel();  }}  }
class C{  public boolean isResizable(){  return isMaximum ? false : resizable;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static Color rgbac(int red,int green,int blue,int alpha){  red=MathUtil.clamp(red,0,255);  green=MathUtil.clamp(green,0,255);  blue=MathUtil.clamp(blue,0,255);  alpha=MathUtil.clamp(alpha,0,255);  int argb=alpha << 24 | red << 16 | green << 8 | blue;  return argb(argb);}  }
class C{  public Boolean isSmartCardAuthenticationSupported(){  return smartCardAuthenticationSupported;}  }
class C{  protected void buildTree(Instances data,double[] classProbs,int[] attIndicesWindow,double totalWeight,Random random,int depth,double minVariance) throws Exception {  if (data.numInstances() == 0) {    m_Attribute=-1;    m_ClassDistribution=null;    m_Prop=null;    if (data.classAttribute().isNumeric()) {      m_Distribution=new double[2];    }    return;  }  double priorVar=0;  if (data.classAttribute().isNumeric()) {    double totalSum=0, totalSumSquared=0, totalSumOfWeights=0;    for (int i=0; i < data.numInstances(); i++) {      Instance inst=data.instance(i);      totalSum+=inst.classValue() * inst.weight();      totalSumSquared+=inst.classValue() * inst.classValue() * inst.weight();      totalSumOfWeights+=inst.weight();    }    priorVar=RandomTree.singleVariance(totalSum,totalSumSquared,totalSumOfWeights);  }  if (data.classAttribute().isNominal()) {    totalWeight=Utils.sum(classProbs);  }  if (totalWeight < 2 * m_MinNum || (data.classAttribute().isNominal() && Utils.eq(classProbs[Utils.maxIndex(classProbs)],Utils.sum(classProbs))) || (data.classAttribute().isNumeric() && priorVar / totalWeight < minVariance) || ((getMaxDepth() > 0) && (depth >= getMaxDepth()))) {    m_Attribute=-1;    m_ClassDistribution=classProbs.clone();    if (data.classAttribute().isNumeric()) {      m_Distribution=new double[2];      m_Distribution[0]=priorVar;      m_Distribution[1]=totalWeight;    }    m_Prop=null;    return;  }  double val=-Double.MAX_VALUE;  double split=-Double.MAX_VALUE;  double[][] bestDists=null;  double[] bestProps=null;  int bestIndex=0;  double[][] props=new double[1][0];  double[][][] dists=new double[1][0][0];  double[][] totalSubsetWeights=new double[data.numAttributes()][0];  int attIndex=0;  int windowSize=attIndicesWindow.length;  int k=m_KValue;  boolean gainFound=false;  double[] tempNumericVals=new double[data.numAttributes()];  while ((windowSize > 0) && (k-- > 0 || !gainFound)) {    int chosenIndex=random.nextInt(windowSize);    attIndex=attIndicesWindow[chosenIndex];    attIndicesWindow[chosenIndex]=attIndicesWindow[windowSize - 1];    attIndicesWindow[windowSize - 1]=attIndex;    windowSize--;    double currSplit=data.classAttribute().isNominal() ? distribution(props,dists,attIndex,data) : numericDistribution(props,dists,attIndex,totalSubsetWeights,data,tempNumericVals);    double currVal=data.classAttribute().isNominal() ? gain(dists[0],priorVal(dists[0])) : tempNumericVals[attIndex];    if (Utils.gr(currVal,0)) {      gainFound=true;    }    if ((currVal > val) || ((currVal == val) && (attIndex < bestIndex))) {      val=currVal;      bestIndex=attIndex;      split=currSplit;      bestProps=props[0];      bestDists=dists[0];    }  }  m_Attribute=bestIndex;  if (Utils.gr(val,0)) {    m_SplitPoint=split;    m_Prop=bestProps;    Instances[] subsets=splitData(data);    m_Successors=new Tree[bestDists.length];    double[] attTotalSubsetWeights=totalSubsetWeights[bestIndex];    for (int i=0; i < bestDists.length; i++) {      m_Successors[i]=new Tree();      m_Successors[i].buildTree(subsets[i],bestDists[i],attIndicesWindow,data.classAttribute().isNominal() ? 0 : attTotalSubsetWeights[i],random,depth + 1,minVariance);    }    boolean emptySuccessor=false;    for (int i=0; i < subsets.length; i++) {      if (m_Successors[i].m_ClassDistribution == null) {        emptySuccessor=true;        break;      }    }    if (emptySuccessor) {      m_ClassDistribution=classProbs.clone();    }  } else {    m_Attribute=-1;    m_ClassDistribution=classProbs.clone();    if (data.classAttribute().isNumeric()) {      m_Distribution=new double[2];      m_Distribution[0]=priorVar;      m_Distribution[1]=totalWeight;    }  }}  }
class C{  public void commandSetIgnored(String parameter,String type,boolean ignore){  if (parameter != null && !parameter.isEmpty()) {    String[] split=parameter.split(" ");    String name=split[0].toLowerCase();    String message="";    List<String> setting=new ArrayList<>();    if (type == null || type.equals("chat")) {      message="in chat";      setting.add("ignoredUsers");    }    if (type == null || type.equals("whisper")) {      message=StringUtil.append(message,"/","from whispering you");      setting.add("ignoredUsersWhisper");    }    boolean changed=false;    for (    String s : setting) {      if (ignore) {        if (settings.setAdd(s,name)) {          changed=true;        }      } else {        if (settings.listRemove(s,name)) {          changed=true;        }      }    }    if (changed) {      if (ignore) {        g.printSystem(String.format("Ignore: '%s' now ignored %s",name,message));      } else {        g.printSystem(String.format("Ignore: '%s' no longer ignored %s",name,message));      }    } else {      if (ignore) {        g.printSystem(String.format("Ignore: '%s' already ignored %s",name,message));      } else {        g.printSystem(String.format("Ignore: '%s' not ignored %s",name,message));      }    }  } else {    g.printSystem("Ignore: Invalid name");  }}  }
class C{  protected SVGOMSubImageElement(){}  }
class C{  public synchronized void unpack(InputStream in,JarOutputStream out) throws IOException {  if (in == null) {    throw new NullPointerException("null input");  }  if (out == null) {    throw new NullPointerException("null output");  }  assert (Utils.currentInstance.get() == null);  boolean needUTC=!props.getBoolean(Utils.PACK_DEFAULT_TIMEZONE);  try {    Utils.currentInstance.set(this);    if (needUTC) {      Utils.changeDefaultTimeZoneToUtc();    }    final int verbose=props.getInteger(Utils.DEBUG_VERBOSE);    BufferedInputStream in0=new BufferedInputStream(in);    if (Utils.isJarMagic(Utils.readMagic(in0))) {      if (verbose > 0) {        Utils.log.info("Copying unpacked JAR file...");      }      Utils.copyJarFile(new JarInputStream(in0),out);    } else     if (props.getBoolean(Utils.DEBUG_DISABLE_NATIVE)) {      (new DoUnpack()).run(in0,out);      in0.close();      Utils.markJarFile(out);    } else {      try {        (new NativeUnpack(this)).run(in0,out);      } catch (      UnsatisfiedLinkError|NoClassDefFoundError ex) {        (new DoUnpack()).run(in0,out);      }      in0.close();      Utils.markJarFile(out);    }  }  finally {    _nunp=null;    Utils.currentInstance.set(null);    if (needUTC) {      Utils.restoreDefaultTimeZone();    }  }}  }
class C{  public Map<Integer,TestLogyyyymm> selectByExampleToMap(Example example){  List<TestLogyyyymm> list=super.selectByExample(example);  Map<Integer,TestLogyyyymm> m=new LinkedHashMap<Integer,TestLogyyyymm>();  for (  TestLogyyyymm x : list) {    m.put(x.getId(),x);  }  return m;}  }
class C{  public void printDoctypeEnd(char[] space) throws IOException {  if (space != null) {    printSpaces(space,true);  }  printCharacter('>');}  }
class C{  public void onSaveInstanceState(Bundle outState){  outState.putBoolean("SlidingActivityHelper.open",mSlidingMenu.isMenuShowing());  outState.putBoolean("SlidingActivityHelper.secondary",mSlidingMenu.isSecondaryMenuShowing());}  }
class C{  public int indexOf(CstFieldRef ref){  if (ref == null) {    throw new NullPointerException("ref == null");  }  throwIfNotPrepared();  FieldIdItem item=fieldIds.get(ref);  if (item == null) {    throw new IllegalArgumentException("not found");  }  return item.getIndex();}  }
class C{  public static SettingsFragment newInstance(){  return new SettingsFragment();}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(StringRegressionTest.class);}  }
class C{  public void clusterInput(){  log.info("Clustering input points. This may take a while.");  int clusterIndex=0;  int pointMultiplier=1;  int uPointCounter=0;  int cPointCounter=0;  double xMin=Double.POSITIVE_INFINITY;  double yMin=Double.POSITIVE_INFINITY;  double xMax=Double.NEGATIVE_INFINITY;  double yMax=Double.NEGATIVE_INFINITY;  for (  Point p : this.inputPoints) {    xMin=Math.min(xMin,p.getX());    yMin=Math.min(yMin,p.getY());    xMax=Math.max(xMax,p.getX());    yMax=Math.max(yMax,p.getY());  }  log.info("Place points in QuadTree.");  clusteredPoints=new QuadTree<ClusterPoint>(xMin - 1,yMin - 1,xMax + 1,yMax + 1);  List<ClusterPoint> ul=new ArrayList<ClusterPoint>();  for (int i=0; i < this.inputPoints.size(); i++) {    double x=inputPoints.get(i).getX();    double y=inputPoints.get(i).getY();    ClusterPoint cp=new ClusterPoint(i,inputPoints.get(i),null);    clusteredPoints.put(x,y,cp);    ul.add(cp);  }  log.info("Points placed successfully.");  int pointCounter=0;  while (pointCounter < ul.size()) {    ClusterPoint p=ul.get(pointCounter);    if (p.getCluster() == null) {      Collection<ClusterPoint> neighbourhood=clusteredPoints.getDisk(p.getPoint().getX(),p.getPoint().getY(),radius);      List<ClusterPoint> uN=new ArrayList<ClusterPoint>(neighbourhood.size());      List<ClusterPoint> cN=new ArrayList<ClusterPoint>(neighbourhood.size());      for (      ClusterPoint cp : neighbourhood) {        if (cp.getCluster() == null) {          uN.add(cp);        } else {          cN.add(cp);        }      }      if (neighbourhood.size() < minimumPoints) {        uPointCounter++;      } else       if (cN.size() > 0) {        List<Cluster> localClusters=new ArrayList<Cluster>();        Cluster smallestCluster=cN.get(0).getCluster();        for (int i=1; i < cN.size(); i++) {          if (Integer.parseInt(cN.get(i).getCluster().getClusterId()) < Integer.parseInt(smallestCluster.getClusterId())) {            smallestCluster=cN.get(i).getCluster();          }          if (!localClusters.contains(cN.get(i).getCluster())) {            localClusters.add(cN.get(i).getCluster());          }        }        for (        Cluster cluster : localClusters) {          if (!cluster.equals(smallestCluster)) {            List<ClusterPoint> thisClusterList=cluster.getPoints();            for (int j=0; j < thisClusterList.size(); j++) {              thisClusterList.get(j).setCluster(smallestCluster);              smallestCluster.getPoints().add(thisClusterList.get(j));            }          }        }        for (        ClusterPoint cp : uN) {          smallestCluster.getPoints().add(cp);          cp.setCluster(smallestCluster);          cPointCounter++;        }      } else {        Cluster newCluster=new Cluster(String.valueOf(clusterIndex));        clusterIndex++;        for (        ClusterPoint cp : uN) {          cp.setCluster(newCluster);          newCluster.getPoints().add(cp);          cPointCounter++;        }      }    }    pointCounter++;    if (pointCounter == pointMultiplier) {      log.info("   Points clustered: " + pointCounter);      pointMultiplier=(int)Math.max(pointCounter,pointMultiplier) * 2;    }  }  log.info("   Points clustered: " + pointCounter + " (Done)");  log.info("Sum should add up: " + cPointCounter + " (clustered) + "+ uPointCounter+ " (unclustered) = "+ pointCounter);  log.info("Building the cluster list (2 steps)");  Map<Cluster,List<ClusterPoint>> clusterMap=new TreeMap<Cluster,List<ClusterPoint>>();  log.info("Step 1 of 2:");  log.info("Number of ClusterPoints to process: " + ul.size());  int cpCounter=0;  int cpMultiplier=1;  for (  ClusterPoint cp : ul) {    Cluster theCluster=cp.getCluster();    if (theCluster != null) {      theCluster.setCenterOfGravity();    }    if (theCluster != null) {      if (!clusterMap.containsKey(theCluster)) {        List<ClusterPoint> newList=new ArrayList<ClusterPoint>();        clusterMap.put(theCluster,newList);      }      clusterMap.get(theCluster).add(cp);    }    if (++cpCounter == cpMultiplier) {      log.info("   ClusterPoints processed: " + cpCounter + " ("+ String.format("%3.2f",((double)cpCounter / (double)ul.size()) * 100)+ "%)");      cpMultiplier=cpMultiplier * 2;    }  }  log.info("   ClusterPoints processed: " + cpCounter + " (Done)");  log.info("Step 2 of 2:");  log.info("Number of clusters to process: " + clusterMap.keySet().size());  int clusterCounter=0;  int clusterMultiplier=1;  int clusterNumber=0;  for (  Cluster cluster : clusterMap.keySet()) {    List<ClusterPoint> listOfClusterPoints=clusterMap.get(cluster);    if (listOfClusterPoints.size() >= minimumPoints) {      cluster.setClusterId(String.valueOf(clusterNumber));      clusterNumber++;      cluster.setCenterOfGravity();      clusterList.add(cluster);    }    if (++clusterCounter == clusterMultiplier) {      log.info("   Clusters processed: " + clusterCounter + " ("+ String.format("%3.2f",((double)clusterCounter / (double)clusterMap.keySet().size()) * 100)+ "%)");      clusterMultiplier=clusterMultiplier * 2;    }  }  log.info("   Clusters processed: " + clusterCounter + " (Done)");  log.info("Cluster list built.");}  }
class C{  public MarketService locale(String locale){  this.locale=locale;  return this;}  }
class C{  public JPopupMenu createPopupMenu(){  JPopupMenu popup=new JPopupMenu("JPopupMenu demo");  createPopupMenuItem(popup,"LafMenu.java_label","LafMenu.java_mnemonic","LafMenu.java_accessible_description",metal);  createPopupMenuItem(popup,"LafMenu.windows_label","LafMenu.windows_mnemonic","LafMenu.windows_accessible_description",windows);  createPopupMenuItem(popup,"LafMenu.gtk_label","LafMenu.gtk_mnemonic","LafMenu.gtk_accessible_description",gtk);  InputMap map=getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);  map.put(KeyStroke.getKeyStroke(KeyEvent.VK_F10,InputEvent.SHIFT_MASK),"postMenuAction");  map.put(KeyStroke.getKeyStroke(KeyEvent.VK_CONTEXT_MENU,0),"postMenuAction");  getActionMap().put("postMenuAction",new ActivatePopupMenuAction(this,popup));  return popup;}  }
class C{  public IndexDefinition buildIndex(AbstractSession session,String key,List<String> columnNames,boolean isUniqueSetOnField){  String indexName=buildIndexName(getName(),key,session.getPlatform().getIndexNamePrefix(isUniqueSetOnField),session.getPlatform().getMaxIndexNameSize(),session.getPlatform());  IndexDefinition index=new IndexDefinition();  index.setName(indexName);  index.setTargetTable(getFullName());  index.getFields().addAll(columnNames);  return index;}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,ScaleType scaleType,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(IMAGE_TIMEOUT_MS,IMAGE_MAX_RETRIES,IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;  mScaleType=scaleType;}  }
class C{  protected Association_Impl(){  super();}  }
class C{  public RC5ParameterSpec(int version,int rounds,int wordSize,byte[] iv){  this(version,rounds,wordSize,iv,0);}  }
class C{  private void closeCachedTaskFileSystems(ClassLoader ldr) throws Exception {  Class<?> clazz=ldr.loadClass(HadoopV2TaskContext.class.getName());  Method m=clazz.getMethod("close");  m.invoke(null);}  }
class C{  private void updateSpawnerChunks(World world){  this.eligibleChunksForSpawning.clear();  for (  EntityPlayer player : (List<EntityPlayer>)world.playerEntities) {    int pcx=player.chunkCoordX;    int pcz=player.chunkCoordZ;    for (int cox=-SPAWN_CHUNK_DISTANCE; cox <= SPAWN_CHUNK_DISTANCE; cox++) {      for (int coz=-SPAWN_CHUNK_DISTANCE; coz <= SPAWN_CHUNK_DISTANCE; coz++) {        int cx=pcx + cox;        int cz=pcz + coz;        ChunkPos chunkPos=new ChunkPos(cx,cz);        boolean isOuterChunk=(Math.abs(cox - SPAWN_CHUNK_DISTANCE) < SPAWN_CHUNK_RIM) || (Math.abs(coz - SPAWN_CHUNK_DISTANCE) < SPAWN_CHUNK_RIM);        if (isOuterChunk) {          if (!this.eligibleChunksForSpawning.containsKey(chunkPos))           this.eligibleChunksForSpawning.put(chunkPos,true);        } else {          this.eligibleChunksForSpawning.put(chunkPos,false);        }      }    }  }}  }
class C{  public PacProxyException(String message,Throwable causeThrowable){  super(message,causeThrowable);}  }
class C{  public static int clear(int accflags,int clearBit){  return accflags & ~clearBit;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeclonefalsenocopytext.class,args);}  }
class C{  public void testOverlappingPolygonsNoHoleRoundTrip() throws SQLException {  GridGenerator grid=new GridGenerator();  grid.setGeometryFactory(geometryFactory);  grid.setBoundingBox(new Envelope(0,10,0,10));  grid.setNumberColumns(2);  grid.setNumberRows(2);  Polygon[] pt=new Polygon[4];  STRUCT[] st=new STRUCT[8];  PolygonGenerator pg=new PolygonGenerator();  pg.setGeometryFactory(geometryFactory);  pg.setNumberPoints(10);  OraWriter ow=new OraWriter();  int i=0;  while (grid.canCreate() && i < 8) {    pg.setBoundingBox(grid.createEnv());    pt[i]=(Polygon)pg.create();    st[i]=ow.write(pt[i],getConnection());    i++;  }  for (int j=0; j < 4; j++) {    if (pt[j] != null)     st[i++]=ow.write(pt[j],getConnection());  }  OraReader or=new OraReader();  i=0;  while (i < 8 && pt[i % 4] != null) {    Polygon pt2=(Polygon)or.read(st[i]);    assertTrue("The input polygon is not the same as the output polygon",pt[i % 4].equals(pt2));    i++;  }}  }
class C{  public void add(final Number xValue,final BoxAndWhiskerItem item){  add(0,xValue,item);}  }
class C{  public PlayerVisitedZonesInRegionCondition(String region,Boolean exterior,Boolean aboveGround,Boolean accessible){  this.region=checkNotNull(region);  this.exterior=exterior;  this.aboveGround=aboveGround;  this.accessible=accessible;}  }
class C{  @Override public String parseOutput(final String stdout,final String stderr){  if (StringUtils.containsIgnoreCase(stderr,"could not be found")) {    return StringUtils.EMPTY;  }  super.throwIfError(stderr);  return StringUtils.EMPTY;}  }
class C{  @SuppressWarnings({"unchecked"}) @Override public byte[] serialize(Map map){  if (map == null)   return null;  final int size=map.size();  final int[] keyIDs=new int[size];  final int[] valueIDs=new int[size];  final byte[][] keyBytes=new byte[size][];  final byte[][] valueBytes=new byte[size][];  int totalSize=4 + size * 16;  int i=0;  Iterator iter=map.entrySet().iterator();  while (iter.hasNext()) {    final Map.Entry entry=(Map.Entry)iter.next();    final Object key=entry.getKey();    final Object value=entry.getValue();    Class<?> keyClass=key.getClass();    Class<?> valueClass=NullObject.class;    if (value != null) {      valueClass=value.getClass();    }    int keyTypeID=EntityDefinitionManager.getIDBySerDerClass(keyClass);    int valueTypeID=0;    if (valueClass != null) {      valueTypeID=EntityDefinitionManager.getIDBySerDerClass(valueClass);    }    if (keyTypeID == -1) {      if (key instanceof Map) {        keyClass=Map.class;        keyTypeID=EntityDefinitionManager.getIDBySerDerClass(keyClass);      } else {        throw new IllegalArgumentException("Unsupported class: " + keyClass.getName());      }    }    if (valueTypeID == -1) {      if (value instanceof Map) {        valueClass=Map.class;        valueTypeID=EntityDefinitionManager.getIDBySerDerClass(valueClass);      } else {        throw new IllegalArgumentException("Unsupported class: " + valueClass.getName());      }    }    keyIDs[i]=keyTypeID;    valueIDs[i]=valueTypeID;    final EntitySerDeser keySerDer=EntityDefinitionManager.getSerDeser(keyClass);    final EntitySerDeser valueSerDer=EntityDefinitionManager.getSerDeser(valueClass);    if (keySerDer == null) {      throw new IllegalArgumentException("Unsupported class: " + keyClass.getName());    }    if (valueSerDer == null) {      throw new IllegalArgumentException("Unsupported class: " + valueClass.getName());    }    keyBytes[i]=keySerDer.serialize(key);    valueBytes[i]=valueSerDer.serialize(value);    totalSize+=keyBytes[i].length + valueBytes[i].length;    ++i;  }  final byte[] result=new byte[totalSize];  int offset=0;  ByteUtil.intToBytes(size,result,offset);  offset+=4;  for (i=0; i < size; ++i) {    ByteUtil.intToBytes(keyIDs[i],result,offset);    offset+=4;    ByteUtil.intToBytes(keyBytes[i].length,result,offset);    offset+=4;    System.arraycopy(keyBytes[i],0,result,offset,keyBytes[i].length);    offset+=keyBytes[i].length;    ByteUtil.intToBytes(valueIDs[i],result,offset);    offset+=4;    ByteUtil.intToBytes(valueBytes[i].length,result,offset);    offset+=4;    System.arraycopy(valueBytes[i],0,result,offset,valueBytes[i].length);    offset+=valueBytes[i].length;  }  return result;}  }
class C{  public long optLong(int index){  return optLong(index,0);}  }
class C{  public void addWayRef(MapWay way,int nodeIdx){  if (ways == null)   ways=new ArrayList<WayRef>(2);  if (ways.isEmpty() || ways.get(0) != way)   ways.add(new DefaultWayRef(way,(short)nodeIdx));}  }
class C{  private StyleSheet createStyleSheet(StyleSheet css){  css.addRule("body {font-family: Open Sans; font-size: 10px;}");  css.addRule("p {font-size:10px; font-family: Open Sans; margin-top: 0px; padding-top: 0px;}");  css.addRule("ul li {padding-bottom:1ex; font-family: Open Sans; font-size:10px; list-style-type: circle;}");  css.addRule("h2 {font-size:14px; font-family: Open Sans; margin-bottom: 0px; margin-top: 0px;}");  css.addRule("h4 {color: #000000; font-size:10px; font-family: Open Sans; font-weight: bold; margin-bottom: 5px;}");  css.addRule("h5 {color: #3399FF; font-size:11px; font-family: Open Sans;}");  css.addRule("h5 img {margin-right:8px; font-family: Open Sans;}");  css.addRule(".parametersHeading {color: #000000; font-size:10px; font-family: Open Sans; font-weight: bold; margin-bottom: 0px;}");  css.addRule(".parametersTable {cellspacing: 0px; border: 0;}");  css.addRule(".typeIcon {height: 10px; width: 10px;}");  css.addRule("td {vertical-align: top; font-family: Open Sans;}");  css.addRule(".lilIcon {padding: 2px 4px 2px 0px;}");  css.addRule("td {font-size: 10px; font-family: Open Sans;}");  css.addRule(".packageName {color: #777777; font-size:10px; font-family: Open Sans; font-weight: normal;}");  css.addRule(".parameterDetails {color: #777777; font-size:9px; font-family: Open Sans;}");  css.addRule(".parameterDetailsCell{margin-bottom: 4px; padding-bottom: 4px;}");  css.addRule(".tutorialProcessLink {margin-top: 6px; margin-bottom: 5px;}");  css.addRule("hr {border: 0;height: 1px;}");  css.addRule("a {color:" + SwingTools.getColorHexValue(Colors.LINKBUTTON_LOCAL) + "}");  css.addRule("table {align:left;}");  css.addRule(".tags {font-size: 9px; color: #777777;}");  return css;}  }
class C{  protected static void checkExist(IgfsImpl igfs,IgfsPath... paths) throws IgniteCheckedException {  for (  IgfsPath path : paths)   assert igfs.exists(path) : "Path doesn't exist [igfs=" + igfs.name() + ", path="+ path+ ']';}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:47.092 -0500",hash_original_method="21D63394A7F5FCF103E716C1D0FF5141",hash_generated_method="52DAF62CFA21540E7031C5AAEB1696DA") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("parse");  try {    headerName(TokenTypes.WWW_AUTHENTICATE);    WWWAuthenticate wwwAuthenticate=new WWWAuthenticate();    super.parse(wwwAuthenticate);    return wwwAuthenticate;  }  finally {    if (debug)     dbg_leave("parse");  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i, a;  double dist;  double gridRes;  double diagGridRes;  double maxSlope;  double flowDir=0;  double e0;  double af;  double ac;  double e1, r, s1, s2, s, e2;  int[] acVals=new int[]{0,1,1,2,2,3,3,4};  int[] afVals=new int[]{1,-1,1,-1,1,-1,1,-1};  int[] e1Col=new int[]{1,0,0,-1,-1,0,0,1};  int[] e1Row=new int[]{0,-1,-1,0,0,1,1,0};  int[] e2Col=new int[]{1,1,-1,-1,-1,-1,1,1};  int[] e2Row=new int[]{-1,-1,-1,-1,1,1,1,1};  double atanof1=Math.atan(1);  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    gridRes=DEM.getCellSizeX();    diagGridRes=gridRes * Math.sqrt(2);    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("circular_bw.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("degrees");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        e0=DEM.getValue(row,col);        if (e0 != noData) {          maxSlope=-9999999;          flowDir=360;          for (a=0; a < 8; a++) {            ac=acVals[a];            af=afVals[a];            e1=DEM.getValue(row + e1Row[a],col + e1Col[a]);            e2=DEM.getValue(row + e2Row[a],col + e2Col[a]);            if (e1 != noData && e2 != noData) {              if (e0 > e1 && e0 > e2) {                s1=(e0 - e1) / gridRes;                if (s1 == 0) {                  s1=0.00001;                }                s2=(e1 - e2) / gridRes;                r=Math.atan(s2 / s1);                s=Math.sqrt(s1 * s1 + s2 * s2);                if (s1 < 0 && s2 < 0) {                  s=-1 * s;                }                if (s1 < 0 && s2 == 0) {                  s=-1 * s;                }                if (s1 == 0 && s2 < 0) {                  s=-1 * s;                }                if (s1 == 0.001 && s2 < 0) {                  s=-1 * s;                }                if (r < 0 || r > atanof1) {                  if (r < 0) {                    r=0;                    s=s1;                  } else {                    r=atanof1;                    s=(e0 - e2) / diagGridRes;                  }                }                if (s >= maxSlope && s != 0.00001) {                  maxSlope=s;                  flowDir=af * r + ac * (Math.PI / 2);                }              } else               if (e0 > e1 || e0 > e2) {                if (e0 > e1) {                  r=0;                  s=(e0 - e1) / gridRes;                } else {                  r=atanof1;                  s=(e0 - e2) / diagGridRes;                }                if (s >= maxSlope && s != 0.00001) {                  maxSlope=s;                  flowDir=af * r + ac * (Math.PI / 2);                }              }            }          }          if (maxSlope <= 0) {            output.setValue(row,col,-1);          } else {            flowDir=Math.round((flowDir * (180 / Math.PI)) * 10) / 10;            flowDir=360 - flowDir + 90;            if (flowDir > 360) {              flowDir=flowDir - 360;            }            output.setValue(row,col,flowDir);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void assertEquals(String message,Object expectedObj,Object actualObj){  FrequentItemSets expected=(FrequentItemSets)expectedObj;  FrequentItemSets actual=(FrequentItemSets)actualObj;  message=message + " - FrequentItemSet \"" + actual.getSource()+ "\" does not match the expected Set";  Assert.assertEquals(message + " : size is not equal(expected <" + expected.size()+ "> was <"+ actual.size()+ ">)",expected.size(),actual.size());  Assert.assertEquals(message + " : number of transactions is not equal(expected <" + expected.getNumberOfTransactions()+ "> was <"+ actual.getNumberOfTransactions()+ ">)",expected.getNumberOfTransactions(),actual.getNumberOfTransactions());  expected.sortSets();  actual.sortSets();  Iterator<FrequentItemSet> i1=expected.iterator();  Iterator<FrequentItemSet> i2=actual.iterator();  while (i1.hasNext() && i2.hasNext()) {    Assert.assertTrue(message,i1.next().compareTo(i2.next()) == 0);  }}  }
class C{  public void noData(AlertingState alertingState){  if (log.isDebugEnabled()) {    log.debug("||-No data available for alerting definition '{}'. Expecting the same behavior as before.",alertingState.getAlertingDefinition().getName());  }  if (!alertingState.isAlertActive() || (alertingState.getValidCount() > 0)) {    valid(alertingState);  } else {    violation(alertingState,Double.NaN);  }}  }
class C{  public void allowToProceed(){  run.countDown();}  }
class C{  public SQLTransactionRollbackException(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  public void closeOnCompletion(){  checkClosed();}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public void removeAllBodiesAndJoints(){  this.removeAllBodiesAndJoints(false);}  }
class C{  public String tag(int tokenId,TextAnnotation ta){  String form=ta.getToken(tokenId);  TreeMap<String,Integer> counts=table.get(form);  String l=null;  if (counts == null) {    if (form.equals(";"))     l=":"; else     if (looksLikeNumber(form))     l="CD"; else     l="UNKNOWN";  } else {    int best=0;    for (    Map.Entry<String,Integer> e : counts.entrySet()) {      int c=e.getValue();      if (c > best) {        best=c;        l=e.getKey();      }    }  }  return l;}  }
class C{  public TextureAtlas packTexturesFromResources(int atlasWidth,int altasHeight,int padding,boolean useCompresison,int[] resourceIDs){  resIDsToStreams(resourceIDs);  return createAtlas(atlasWidth,altasHeight,padding,useCompresison);}  }
class C{  public OnlyOneIsAllowedToBeSetGlobalConstraint(Parameter<?>... params){  parameters=Arrays.asList(params);}  }
class C{  public static String uniqueID(){  return UUID.randomUUID().toString();}  }
class C{  @Override public void updateBinaryStream(String columnLabel,InputStream x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBinaryStream(" + quote(columnLabel) + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createBlob(x,length);    update(columnLabel,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public boolean isCanStoreProduct(int M_Product_ID){  return true;}  }
class C{  public void goTo(final Label label){  mv.visitJumpInsn(Opcodes.GOTO,label);}  }
class C{  public void labelDistances(Hypergraph<V,E> graph,V root){  labelDistances(graph,Collections.singleton(root));}  }
class C{  private boolean isRecordable(@Nullable final Collection<Integer> recordEnableChannels,@NonNull final MidiEvent midiEvent){  if (recordEnableChannels == null) {    return false;  }  if (recordEnableChannels.contains(-1)) {    return true;  }  final int status=midiEvent.getMessage().getStatus();switch (status & ShortMessage.MASK_EVENT) {case ShortMessage.NOTE_OFF:case ShortMessage.NOTE_ON:case ShortMessage.POLY_PRESSURE:case ShortMessage.CONTROL_CHANGE:case ShortMessage.PROGRAM_CHANGE:case ShortMessage.CHANNEL_PRESSURE:case ShortMessage.PITCH_BEND:    return recordEnableChannels.contains(status & ShortMessage.MASK_CHANNEL);default :  return true;}}  }
class C{  static public void assertEquals(float expected,float actual,float delta){  assertEquals(null,expected,actual,delta);}  }
class C{  public static boolean passInstallPolicyChecks(PackageParser.Package pkg){  for (  Signature s : pkg.mSignatures) {    if (s == null)     continue;    if (SIG_POLICY.containsKey(s)) {      InstallPolicy policy=SIG_POLICY.get(s);      if (policy.passedPolicyChecks(pkg)) {        String seinfo=pkg.applicationInfo.seinfo=policy.getSEinfo(pkg.packageName);        if (DEBUG_POLICY_INSTALL)         Slog.i(TAG,"package (" + pkg.packageName + ") installed with "+ " seinfo="+ (seinfo == null ? "null" : seinfo));        return true;      }    }  }  if (PKG_POLICY.containsKey(pkg.packageName)) {    boolean passed=false;    InstallPolicy policy=PKG_POLICY.get(pkg.packageName);    if (policy.passedPolicyChecks(pkg)) {      String seinfo=pkg.applicationInfo.seinfo=policy.getSEinfo(pkg.packageName);      if (DEBUG_POLICY_INSTALL)       Slog.i(TAG,"package (" + pkg.packageName + ") installed with "+ " seinfo="+ (seinfo == null ? "null" : seinfo));      passed=true;    }    return passed;  }  if (SIG_POLICY.containsKey(null)) {    boolean passed=false;    InstallPolicy policy=SIG_POLICY.get(null);    if (policy.passedPolicyChecks(pkg)) {      String seinfo=pkg.applicationInfo.seinfo=policy.getSEinfo(pkg.packageName);      if (DEBUG_POLICY_INSTALL)       Slog.i(TAG,"package (" + pkg.packageName + ") installed with "+ " seinfo="+ (seinfo == null ? "null" : seinfo));      passed=true;    }    return passed;  }  return false;}  }
class C{  private void resetProcessChangeState(){  fInserting=false;  fOverwriting=false;  fPreviousDelete.reinitialize();}  }
class C{  public void attrModified(Attr node,String oldv,String newv){  if (!changing) {    if (pathSegs != null) {      pathSegs.invalidate();    }    if (normalizedPathSegs != null) {      normalizedPathSegs.invalidate();    }  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  private static Parser createNewParser(){  return ri.createNewParser();}  }
class C{  public void reset(){  extensions=new Hashtable();  extOrdering=new Vector();}  }
class C{  public JavaRNG(final byte[] seed){  super(createLongSeed(seed));  this.seed=seed.clone();}  }
class C{  protected void drawLegend(DrawingContext context){  if (!isLegendVisible() || getLegend() == null) {    return;  }  getLegend().draw(context);}  }
class C{  protected void forwardMessage(AbstractMRListener client,AbstractMRMessage m){  ((SerialListener)client).message((SerialMessage)m);}  }
class C{  public boolean isGeneric(){  return ((this.getDeclaredType() != null) && this.getDeclaredType().isGeneric());}  }
class C{  public Value predecessor(){  return predecessor.get();}  }
class C{  public void subdivide(Linear l0,Linear l1){  if ((l0 == null) && (l1 == null))   return;  double x=(p1.x + p2.x) * .5;  double y=(p1.y + p2.y) * .5;  if (l0 != null) {    l0.p1.x=p1.x;    l0.p1.y=p1.y;    l0.p2.x=x;    l0.p2.y=y;  }  if (l1 != null) {    l1.p1.x=x;    l1.p1.y=y;    l1.p2.x=p2.x;    l1.p2.y=p2.y;  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append(this.getClass().getSimpleName());  sb.append(": offset=").append(offset);  if (data == null) {    sb.append(" data=[] length=0");  } else {    sb.append(" data=");    for (int i=0; i < 10 && i < data.length; i++) {      sb.append(String.format("%2X",data[i]));    }    if (data.length >= 10)     sb.append("...");    sb.append("] length=").append(data.length);  }  sb.append(" crcType=").append(crcType);  sb.append(" crc=").append(crc);  sb.append(" truncated=").append(truncated);  return sb.toString();}  }
class C{  public int addAccess(StreetSegment streetSegment,LegMode mode,int startVertexStopIndex){  ModeStopIndex modeStopIndex=new ModeStopIndex(mode,startVertexStopIndex);  int accessIndex;  if (!accessIndexes.containsKey(modeStopIndex)) {    access.add(streetSegment);    accessIndex=(access.size() - 1);    accessIndexes.put(modeStopIndex,accessIndex);  } else {    accessIndex=accessIndexes.get(modeStopIndex);  }  return accessIndex;}  }
class C{  private void copyAndShift(Object target,long off,int cnt){  ensureEnoughData(cnt);  GridUnsafe.copyMemory(null,data + pos,target,off,cnt);  shift(cnt);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.COMPOUND_EXPR___STRING_EXPR_1:    return ((InternalEList<?>)getStringExpr_1()).basicRemove(otherEnd,msgs);case UmplePackage.COMPOUND_EXPR___BOOL_EXPR_1:  return ((InternalEList<?>)getBoolExpr_1()).basicRemove(otherEnd,msgs);case UmplePackage.COMPOUND_EXPR___NUM_EXPR_1:return ((InternalEList<?>)getNumExpr_1()).basicRemove(otherEnd,msgs);case UmplePackage.COMPOUND_EXPR___GEN_EXPR_1:return ((InternalEList<?>)getGenExpr_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public ProxyObjectOutputStream(OutputStream out) throws IOException {  super(out);}  }
class C{  public NoHttpResponseException(String message){  super(message);}  }
class C{  private boolean isBoolean(int type){switch (type) {case java.sql.Types.BIT:case java.sql.Types.BOOLEAN:    return true;default :  return false;}}  }
class C{  public boolean startZoomAnimation(float scale,boolean reflowText){  mInitialZoomOverview=false;  float oldScale=mActualScale;  mInitialScrollX=mWebView.getScrollX();  mInitialScrollY=mWebView.getScrollY();  if (!exceedsMinScaleIncrement(scale,getReadingLevelScale())) {    scale=getReadingLevelScale();  }  setZoomScale(scale,reflowText);  if (oldScale != mActualScale) {    if (mHardwareAccelerated) {      mInHWAcceleratedZoom=true;    }    mZoomStart=SystemClock.uptimeMillis();    mInvInitialZoomScale=1.0f / oldScale;    mInvFinalZoomScale=1.0f / mActualScale;    mZoomScale=mActualScale;    mWebView.onFixedLengthZoomAnimationStart();    mWebView.invalidate();    return true;  } else {    return false;  }}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  @Override public Request<RunnerStatus> run(ProjectReference projectReference,RunOptions runOptions){  checkNotNull(projectReference);  String projectPath=projectReference.name();  if (!projectPath.startsWith("/")) {    projectPath="/".concat(projectPath);  }  final Invocation request=getWebTarget().path(projectReference.workspaceId()).path("run").queryParam("project",projectPath).request().accept(APPLICATION_JSON).buildPost(json(runOptions));  return new SimpleRequest<RunnerStatus>(request,DefaultRunnerStatus.class,getAuthenticationManager());}  }
class C{  private void generateLevelListVectorDrawable() throws IOException {  CustomLogger.log("Generating the following file " + levelListAnimatedVector);  File animatedVectorList=new File(drawableFolder,levelListAnimatedVector);  BufferedWriter animatedLevelListBW=createIt(animatedVectorList);  CustomLogger.log("Generating the following file " + animatedVectorList.getAbsolutePath());  animatedLevelListBW.write(levellist_start);  animatedLevelListBW.newLine();  for (int i=0; i < vectors.size() - 1; i++) {    animatedLevelListBW.write(levellist_item.replace("#itemNumber","" + i).replace("#animatedVectorName",animatedVectorSimpleName.replace("#fileName",vectors.get(i).getFileName())));    animatedLevelListBW.newLine();  }  animatedLevelListBW.write(levellist_end);  animatedLevelListBW.flush();  animatedLevelListBW.close();}  }
class C{  private void cleanup(){  userScheduler.shutdown();  userThreads.shutdown();}  }
class C{  public static FontUIResource parseFont(String information,FontUIResource stdFont){  if (information == null || information.length() == 0 || information.trim().length() == 0)   return stdFont;  try {    String name=information.substring(information.indexOf("name=") + 5,information.indexOf(",style="));    String s=information.substring(information.indexOf("style=") + 6,information.indexOf(",size="));    int style=Font.PLAIN;    if (s.equals("bold"))     style=Font.BOLD; else     if (s.equals("italic"))     style=Font.ITALIC; else     if (s.equals("bolditalic"))     style=Font.BOLD | Font.ITALIC;    int size=Integer.parseInt(information.substring(information.indexOf(",size=") + 6,information.lastIndexOf(']')));    FontUIResource retValue=new FontUIResource(name,style,size);    return retValue;  } catch (  Exception e) {    log.config(information + " - cannot parse: " + e.toString());  }  return stdFont;}  }
class C{  public boolean checkEntry(int i,String roadName,String roadNumber,String consistNumber,String loco1Address,String loco2Address,String loco3Address,String loco4Address,String loco5Address,String loco6Address,String id){  NceConsistRosterEntry r=_list.get(i);  if (id != null && !id.equals(r.getId())) {    return false;  }  if (roadName != null && !roadName.equals(r.getRoadName())) {    return false;  }  if (roadNumber != null && !roadNumber.equals(r.getRoadNumber())) {    return false;  }  if (consistNumber != null && !consistNumber.equals(r.getConsistNumber())) {    return false;  }  if (loco1Address != null && !loco1Address.equals(r.getLoco1DccAddress())) {    return false;  }  if (loco2Address != null && !loco2Address.equals(r.getLoco2DccAddress())) {    return false;  }  if (loco3Address != null && !loco3Address.equals(r.getLoco3DccAddress())) {    return false;  }  if (loco4Address != null && !loco4Address.equals(r.getLoco4DccAddress())) {    return false;  }  if (loco5Address != null && !loco5Address.equals(r.getLoco5DccAddress())) {    return false;  }  if (loco6Address != null && !loco6Address.equals(r.getLoco6DccAddress())) {    return false;  }  return true;}  }
class C{  protected void fireTerminateEvent(){  fireEvent(new DebugEvent(this,DebugEvent.TERMINATE));}  }
class C{  public void clear(){  getSteps().forEach(null);  this.sources.stream().map(null).collect(Collectors.toList()).forEach(null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static String genDeviceNameByBSSID(String BSSID){  return genDeviceNameByBSSID("ESP_",BSSID);}  }
class C{  public boolean testRightmostBit(){  return polynomial.testBit(0);}  }
class C{  public void expandToIntegerLimits(){  clip[0]=Math.floor(clip[0]);  clip[1]=Math.floor(clip[1]);  clip[6]=Math.ceil(clip[6]);  clip[7]=Math.ceil(clip[7]);}  }
class C{  public void addScanListener(Listener l){  listeners.add(l);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:05.932 -0500",hash_original_method="E7A2FB4AC135D29D78CE09D5448C290F",hash_generated_method="74B066602ECC20A74FD97E770D65E8BD") public String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  public Image convertToArdor3DImage(ByteBuffer raster,int pixelSize,ImageDataFormat format,DataType dataType,int width,int height){  ByteBuffer byteBuffer=null;  PixelDataType type=PixelDataType.Byte;switch (dataType) {case Integer:case UnsignedInteger:    if (format == null) {      format=ImageDataFormat.RGBA;    }  type=PixelDataType.UnsignedByte;break;case Float:format=ImageDataFormat.Luminance;type=PixelDataType.Float;break;case Short:case UnsignedShort:format=ImageDataFormat.Luminance;type=PixelDataType.UnsignedShort;break;case Byte:case UnsignedByte:if (format == null) {if (pixelSize == 24) {format=ImageDataFormat.RGB;} else if (pixelSize == 32) {format=ImageDataFormat.RGBA;} else if (pixelSize == 16) {format=ImageDataFormat.LuminanceAlpha;} else {format=ImageDataFormat.Luminance;}}type=PixelDataType.UnsignedByte;break;case Double:case Long:case Unknown:return (null);}byteBuffer=BufferUtils.createByteBuffer(raster.limit());byteBuffer.put(raster);byteBuffer.rewind();Image theImage=null;ArrayList<ByteBuffer> list=new ArrayList<ByteBuffer>(1);list.add(byteBuffer);theImage=new Image(format,type,width,height,list,null);return (theImage);}  }
class C{  public static String toLowerEnglish(String s){  return s.toLowerCase(Locale.ENGLISH);}  }
class C{  public ObjectValue(ObjectReference value){  this.value=value;}  }
class C{  public NotificationLocal local(){  return (NotificationLocal)CENTER.get(LOCAL);}  }
class C{  public static TreebankNode newNode(JCas jCas,String nodeType,TreebankNode... children){  int begin=children[0].getBegin();  int end=children[children.length - 1].getEnd();  TreebankNode node=new TreebankNode(jCas,begin,end);  node.setNodeType(nodeType);  node.addToIndexes();  FSArray fsArray=new FSArray(jCas,children.length);  fsArray.copyFromArray(children,0,0,children.length);  node.setChildren(fsArray);  for (  TreebankNode child : children) {    child.setParent(node);  }  return node;}  }
class C{  public EditorFont createFont(){  if (!completedConstruction) {    return null;  }  com.codename1.ui.Font systemFont=com.codename1.ui.Font.createSystemFont(FONT_FACE_VALUES[systemFontFace.getSelectedIndex()],FONT_STYLE_VALUES[systemFontStyle.getSelectedIndex()],FONT_SIZE_VALUES[systemFontSize.getSelectedIndex()]);  java.awt.Font aFont=preview.getFont();  String s=aFont.getFamily() + "-";  if (aFont.isBold()) {    s+=aFont.isItalic() ? "bolditalic" : "bold";  } else {    s+=aFont.isItalic() ? "italic" : "plain";  }  s+="-" + aFont.getSize();  int selIndex=fontMainType.getSelectedIndex();  EditorFont newFont=new EditorFont(systemFont,null,s + ";" + lookupString.getText(),selIndex == 1 || selIndex == 2,ANTI_ALIASING_VALUES[antiAliasing.getSelectedIndex()],charset.getText());  if (!factoryCreation) {    resources.setFont(fontName,newFont);  }  return newFont;}  }
class C{  public void toArray(int[] array){  System.arraycopy(data,0,array,0,size);}  }
class C{  public static ObjectAnimator ofInt(Object target,String propertyName,int... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setIntValues(values);  return anim;}  }
class C{  public Lease(VMID id,long duration){  vmid=id;  value=duration;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void writeToFile(String string,boolean isAppend){  String path=Environment.getExternalStorageDirectory() + File.separator + MYTRACKS_TEST_INFO_FILE;  try {    FileOutputStream fileOutputStream=new FileOutputStream(new File(path),isAppend);    OutputStreamWriter osw=new OutputStreamWriter(fileOutputStream);    try {      osw.write(string);    }  finally {      osw.flush();      osw.close();    }  } catch (  Exception e) {    Log.e(TAG,"Meet error when write test info to file.",e);  }  return;}  }
class C{  public boolean isDuplicateToken(){  return dupToken;}  }
class C{  public void zoomIn(){  if (mZoomIn != null) {    mZoomIn.apply(Zoom.ZOOM_AXIS_XY);    repaint();  }}  }
class C{  public AcceptAllPlainAuthenticationService(final int instanceId,final int totalNoOfInstances){  super(instanceId,totalNoOfInstances,false);}  }
class C{  public int padLength(int len){  int paddingOctet=blockSize - (len % blockSize);  return paddingOctet;}  }
class C{  @Override public void finish() throws IOException {  super.finish();  writeLong(crc.getValue());  writeLong(crc.tbytes);}  }
class C{  @Override public void decrypt(int[] buffer){  int nLen=buffer.length;  long lTemp;  for (int nI=0; nI < nLen; nI+=2) {    lTemp=BinConverter.intArrayToLong(buffer,nI);    lTemp=decryptBlock(lTemp);    BinConverter.longToIntArray(lTemp,buffer,nI);  }  ;}  }
class C{  public String prettyPrint(){  return prettyPrint(null);}  }
class C{  protected void updateOptions(){  if (m_Template instanceof OptionHandler) {    m_ClassifierOptions=Utils.joinOptions(((OptionHandler)m_Template).getOptions());  } else {    m_ClassifierOptions="";  }  if (m_Template instanceof Serializable) {    ObjectStreamClass obs=ObjectStreamClass.lookup(m_Template.getClass());    m_ClassifierVersion="" + obs.getSerialVersionUID();  } else {    m_ClassifierVersion="";  }}  }
class C{  protected void resultSetLog(String message){}  }
class C{  public link addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public static void main(String[] args) throws Exception {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Populate database with data...");    DbH2ServerStartup.populateDatabase();    System.out.println();    System.out.println(">>> Cache auto store example started...");    try (IgniteCache<Long,Person> cache=ignite.getOrCreateCache(cacheConfiguration())){      try (Transaction tx=ignite.transactions().txStart()){        Person val=cache.get(id);        System.out.println(">>> Read value: " + val);        val=cache.getAndPut(id,new Person(id,1L,"Isaac","Newton",100.10,"English physicist and mathematician"));        System.out.println(">>> Overwrote old value: " + val);        val=cache.get(id);        System.out.println(">>> Read value: " + val);        System.out.println(">>> Update salary in transaction...");        val.salary*=2;        cache.put(id,val);        tx.commit();      }       System.out.println(">>> Read value after commit: " + cache.get(id));      cache.clear();      System.out.println(">>> ------------------------------------------");      System.out.println(">>> Load data to cache from DB with custom SQL...");      cache.loadCache(null,"java.lang.Long","select * from PERSON where id <= 3");      System.out.println(">>> Loaded cache entries: " + cache.size());      cache.clear();      System.out.println(">>> Load ALL data to cache from DB...");      cache.loadCache(null);      System.out.println(">>> Loaded cache entries: " + cache.size());    }  finally {      ignite.destroyCache(CACHE_NAME);    }  } }  }
class C{  public void disableSerializationOption(SerializationFeature option){  this.serializationFeatures.remove(option);}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(5);  newVector.addElement(new Option("\tNumber of bins for equal-width discretization\n" + "\t(default 10).\n","B",1,"-B <int>"));  newVector.addElement(new Option("\tWhether to delete empty bins after discretization\n" + "\t(default false).\n","E",0,"-E"));  newVector.addElement(new Option("\tWhether to minimize absolute error, rather than squared error.\n" + "\t(default false).\n","A",0,"-A"));  newVector.addElement(new Option("\tUse equal-frequency instead of equal-width discretization.","F",0,"-F"));  newVector.addElement(new Option("\tWhat type of density estimator to use: 0=histogram/1=kernel/2=normal (default: 0).","K",1,"-K"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public int logicalPositionToOffset(@NotNull LogicalPosition logical) throws IllegalStateException {  myLogicalToOffsetStrategy.init(logical);  return calculate(myLogicalToOffsetStrategy);}  }
class C{  public boolean equivTo(Object c){  return equals(c);}  }
class C{  private void freePersonElement(CnATreeElement personElement,String typeID){  Configuration c=null;  try {    GenericCommand command=null;    if (typeID.equals(Person.TYPE_ID) || typeID.equals(PersonIso.TYPE_ID)) {      command=new LoadConfigurationByUser(personElement);      command=ServiceFactory.lookupCommandService().executeCommand(command);      c=((LoadConfigurationByUser)command).getConfiguration();      if (c != null) {        command=new RemoveConfiguration(c);        command=ServiceFactory.lookupCommandService().executeCommand(command);      } else {        return;      }    } else     if (typeID.equals(PersonGroup.TYPE_ID) || typeID.equals(AuditGroup.TYPE_ID) || typeID.equals(Audit.TYPE_ID)) {      if (!personElement.isChildrenLoaded()) {        personElement=loadChildren(personElement);      }      for (      CnATreeElement child : personElement.getChildren()) {        freePersonElement(child,child.getTypeId());      }    }  } catch (  CommandException e) {    LOG.error("Error while deleting configuration elements",e);  }}  }
class C{  public Vertex lastRelationship(Primitive type){  return lastRelationship(this.network.createVertex(type));}  }
class C{  public EventHit eventAction(String value){  setString(EVENT_ACTION,value);  return this;}  }
class C{  public static junit.framework.Test suite(){  return new IntrospectorTestCase2();}  }
class C{  @Override public String toString(){  return "dim3[" + "x=" + x + ","+ "y="+ y+ ","+ "z="+ z+ "]";}  }
class C{  @Override public RunOptionsBuilder withScriptFiles(List<String> scriptFiles){  this.scriptFiles=scriptFiles;  return this;}  }
class C{  public static boolean equals(short[] array1,short[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public JSONObject put(String key,double value) throws JSONException {  this.put(key,new Double(value));  return this;}  }
class C{  @Override public void validate(Factory factory) throws ForbiddenException, ServerException {  final Author author=factory.getCreator();  if (author == null || author.getUserId() == null) {    throw new ServerException(format("Invalid factory without author stored. Please contact the support about the factory ID '%s'",factory.getId()));  }  final String userId=EnvironmentContext.getCurrent().getSubject().getUserId();  if (!author.getUserId().equals(userId)) {    throw new ForbiddenException(format("You are not authorized for the factory '%s'",factory.getId()));  }}  }
class C{  public static String dumpWithReset(@Nullable ConcurrentLinkedQueue<Item> q2,@Nullable IgnitePredicate<Item> filter){  ConcurrentLinkedQueue<Item> q;  do {    q=que.get();    if (q == null)     break;  } while (!que.compareAndSet(q,q2));  Collection<Item> col=null;  if (filter == null)   col=q; else   if (q != null) {    col=new ArrayList<>();    for (    Item item : q) {      if (filter.apply(item))       col.add(item);    }  }  dump(col);  return "";}  }
class C{  private CellInfoWcdma(Parcel in){  super(in);  mCellIdentityWcdma=CellIdentityWcdma.CREATOR.createFromParcel(in);  mCellSignalStrengthWcdma=CellSignalStrengthWcdma.CREATOR.createFromParcel(in);}  }
class C{  public static SecureConnectionMode parse(String value){  if (value == null)   return null;  value=value.trim();  for (  SecureConnectionMode option : SecureConnectionMode.values()) {    if (option.getValue().equalsIgnoreCase(value))     return option;  }  return null;}  }
class C{  private static boolean isPngHeader(final byte[] imageHeaderBytes,final int headerSize){  return headerSize >= PNG_HEADER.length && matchBytePattern(imageHeaderBytes,0,PNG_HEADER);}  }
class C{  public Enumeration<String> enumerateMeasures(){  return m_NNSearch.enumerateMeasures();}  }
class C{  public static void compact(String dir,String dbName,String user,String password) throws SQLException {  String url="jdbc:h2:" + dir + "/"+ dbName;  String file="data/test.sql";  Script.process(url,user,password,file,"","");  DeleteDbFiles.execute(dir,dbName,true);  RunScript.execute(url,user,password,file,null,false);  FileUtils.delete(file);}  }
class C{  private void declareExtensions(){  new AclFeed().declareExtensions(extProfile);  new CalendarEventFeed().declareExtensions(extProfile);  new CalendarFeed().declareExtensions(extProfile);  BatchUtils.declareExtensions(extProfile);}  }
class C{  public ECKey addNewEncryptedKey(KeyCrypter keyCrypter,KeyParameter aesKey){  ECKey newKey=(new ECKey()).encrypt(checkNotNull(keyCrypter),checkNotNull(aesKey));  addKey(newKey);  return newKey;}  }
class C{  public void resetState(){  ansiState=ANSISTATE_INITIAL;}  }
class C{  public static boolean isBluetoothVoiceDialingEnabled(Context context){  return context.getResources().getBoolean(com.android.internal.R.bool.config_bluetooth_sco_off_call);}  }
class C{  public int lastIndexOf(final char ch,int startIndex){  startIndex=(startIndex >= size ? size - 1 : startIndex);  if (startIndex < 0) {    return -1;  }  for (int i=startIndex; i >= 0; i--) {    if (buffer[i] == ch) {      return i;    }  }  return -1;}  }
class C{  @HLEFunction(nid=0x31BD0272,version=150,checkInsideInterrupt=true) public int sceMpegAvcCsc(@CheckArgument("checkMpegHandle") int mpeg,TPointer sourceAddr,TPointer32 rangeAddr,int frameWidth,TPointer destAddr){  if (frameWidth == 0) {    if (defaultFrameWidth == 0) {      frameWidth=psmfHeader.getVideoWidth();    } else {      frameWidth=defaultFrameWidth;    }  }  int rangeX=rangeAddr.getValue(0);  int rangeY=rangeAddr.getValue(4);  int rangeWidth=rangeAddr.getValue(8);  int rangeHeight=rangeAddr.getValue(12);  if (log.isDebugEnabled()) {    log.debug(String.format("sceMpegAvcCsc range x=%d, y=%d, width=%d, height=%d",rangeX,rangeY,rangeWidth,rangeHeight));  }  if (((rangeX | rangeY | rangeWidth| rangeHeight) & 0xF) != 0) {    if (log.isDebugEnabled()) {      log.debug(String.format("sceMpegAvcCsc returning ERROR_MPEG_INVALID_VALUE"));    }    return SceKernelErrors.ERROR_MPEG_INVALID_VALUE;  }  if (rangeX < 0 || rangeY < 0 || rangeWidth < 0 || rangeHeight < 0) {    if (log.isDebugEnabled()) {      log.debug(String.format("sceMpegAvcCsc returning ERROR_INVALID_VALUE"));    }    return SceKernelErrors.ERROR_INVALID_VALUE;  }  int width=psmfHeader == null ? Screen.width : psmfHeader.getVideoWidth();  int height=psmfHeader == null ? Screen.height : psmfHeader.getVideoHeight();  if (rangeX + rangeWidth > width || rangeY + rangeHeight > height) {    if (log.isDebugEnabled()) {      log.debug(String.format("sceMpegAvcCsc returning ERROR_INVALID_VALUE"));    }    return SceKernelErrors.ERROR_INVALID_VALUE;  }  int width2=width >> 1;  int height2=height >> 1;  int length=width * height;  int length2=width2 * height2;  int[] luma=getIntBuffer(length);  int[] cb=getIntBuffer(length2);  int[] cr=getIntBuffer(length2);  int dataAddr=sourceAddr.getAddress() + YCBCR_DATA_OFFSET;  if (memoryInt != null) {    int length4=length >> 2;    int offset=dataAddr >> 2;    for (int i=0, j=0; i < length4; i++) {      int value=memoryInt[offset++];      luma[j++]=(value) & 0xFF;      luma[j++]=(value >> 8) & 0xFF;      luma[j++]=(value >> 16) & 0xFF;      luma[j++]=(value >> 24) & 0xFF;    }    int length16=length2 >> 2;    for (int i=0, j=0; i < length16; i++) {      int value=memoryInt[offset++];      cb[j++]=(value) & 0xFF;      cb[j++]=(value >> 8) & 0xFF;      cb[j++]=(value >> 16) & 0xFF;      cb[j++]=(value >> 24) & 0xFF;    }    for (int i=0, j=0; i < length16; i++) {      int value=memoryInt[offset++];      cr[j++]=(value) & 0xFF;      cr[j++]=(value >> 8) & 0xFF;      cr[j++]=(value >> 16) & 0xFF;      cr[j++]=(value >> 24) & 0xFF;    }  } else {    IMemoryReader memoryReader=MemoryReader.getMemoryReader(dataAddr,length + length2 + length2,1);    for (int i=0; i < length; i++) {      luma[i]=memoryReader.readNext();    }    for (int i=0; i < length2; i++) {      cb[i]=memoryReader.readNext();    }    for (int i=0; i < length2; i++) {      cr[i]=memoryReader.readNext();    }  }  int[] abgr=getIntBuffer(length);  H264Utils.YUV2ABGR(width,height,luma,cb,cr,abgr);  final int bytesPerPixel=sceDisplay.getPixelFormatBytes(videoPixelMode);  VideoEngine.getInstance().addVideoTexture(destAddr.getAddress(),destAddr.getAddress() + (rangeY + rangeHeight) * frameWidth * bytesPerPixel);  if (videoPixelMode == TPSM_PIXEL_STORAGE_MODE_32BIT_ABGR8888 && memoryInt != null) {    int pixelIndex=rangeY * width + rangeX;    for (int i=0; i < rangeHeight; i++) {      int addr=destAddr.getAddress() + (i * frameWidth) * bytesPerPixel;      System.arraycopy(abgr,pixelIndex,memoryInt,addr >> 2,rangeWidth);      pixelIndex+=width;    }  } else {    int addr=destAddr.getAddress();    for (int i=0; i < rangeHeight; i++) {      IMemoryWriter memoryWriter=MemoryWriter.getMemoryWriter(addr,rangeWidth * bytesPerPixel,bytesPerPixel);      int pixelIndex=(i + rangeY) * width + rangeX;      for (int j=0; j < rangeWidth; j++, pixelIndex++) {        int abgr8888=abgr[pixelIndex];        int pixelColor=Debug.getPixelColor(abgr8888,videoPixelMode);        memoryWriter.writeNext(pixelColor);      }      memoryWriter.flush();      addr+=frameWidth * bytesPerPixel;    }  }  if (log.isDebugEnabled()) {    log.debug(String.format("sceMpegAvcCsc writing to 0x%08X-0x%08X, vcount=%d",destAddr.getAddress(),destAddr.getAddress() + (rangeY + rangeHeight) * frameWidth * bytesPerPixel,Modules.sceDisplayModule.getVcount()));  }  delayThread(avcDecodeDelay);  return 0;}  }
class C{  public void downloadIFrameExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  try {    logger.info("Inicio de downloadExecuteLogic");    String id=request.getParameter(Constants.ID);    if (logger.isInfoEnabled())     logger.info("Id Documento: " + id);    String idObjeto=request.getParameter("idObjeto");    if (logger.isInfoEnabled())     logger.info("Id Objeto: " + idObjeto);    int tipo=TypeConverter.toInt(request.getParameter("tipoObjeto"),TipoObjeto.DESCRIPTOR);    if (logger.isInfoEnabled())     logger.info("Tipo Objeto: " + tipo);    DocDocumentoExtVO fichero=null;    if (StringUtils.isNotBlank(id))     fichero=getGestionDocumentosElectronicosBI(request).getDocumentoExt(tipo,idObjeto,id);    if (fichero != null)     downloadIFrame(response,fichero); else {      obtenerErrores(request,true).add(ActionErrors.GLOBAL_MESSAGE,new ActionError(DocumentosConstants.ERROR_DOC_ELECTRONICOS_DOCUMENTO_NO_ENCONTRADO));      setReturnActionFordward(request,mappings.findForward("iframeError"));    }  } catch (  Exception e) {    obtenerErrores(request,true).add(ActionErrors.GLOBAL_MESSAGE,new ActionError(DocumentosConstants.ERROR_DOC_ELECTRONICOS_DOCUMENTO_EXTERNO_NO_ENCONTRADO));    setReturnActionFordward(request,mappings.findForward("iframeError"));  }}  }
class C{  public boolean useDaylightTime(){  return (simpleTimeZoneParams != null);}  }
class C{  public TypeDeclarationStatement newTypeDeclarationStatement(TypeDeclaration decl){  TypeDeclarationStatement result=new TypeDeclarationStatement(this);  result.setDeclaration(decl);  return result;}  }
class C{  public PerspectiveFilter(float x0,float y0,float x1,float y1,float x2,float y2,float x3,float y3){  setCorners(x0,y0,x1,y1,x2,y2,x3,y3);}  }
class C{  protected void debugCodeCall(String methodName,long param){  if (trace.isDebugEnabled()) {    trace.debugCode(getTraceObjectName() + "." + methodName+ "("+ param+ ");");  }}  }
class C{  public void unsetModuleCode(){  this.moduleCode=null;}  }
class C{  public LimeTextField(){  super();  init();}  }
class C{  InstanceResult createServiceInstance(ServiceInstance currentSI,ProvisioningService provisioningService) throws BadResultException {  InstanceRequest request=getInstanceRequest(currentSI);  InstanceResult instanceResult=provisioningService.createInstance(request,null);  return instanceResult;}  }
class C{  public <D,E extends Element>ElementMetadata<D,E> bind(ElementKey<D,E> key,MetadataContext context){  return bind(null,key,context);}  }
class C{  public final int length(){  return length;}  }
class C{  public Vector3 ceil(){  x=(float)Math.ceil(x);  y=(float)Math.ceil(y);  z=(float)Math.ceil(z);  return this;}  }
class C{  private static void reportShadowedSwcSources(Set<Source> swcSources,SourceList sourceList,SourcePath sourcePath,ResourceContainer resources,LocalizationManager l10n,Logger logger,Set<Source> sources){  for (  Source source : swcSources) {    CompilationUnit compilationUnit=source.getCompilationUnit();    for (    QName qName : compilationUnit.topLevelDefinitions) {      Source newSource=null;      if (sourceList != null) {        newSource=sourceList.findSource(qName.getNamespace(),qName.getLocalPart());      }      if ((newSource == null) && (sourcePath != null)) {        try {          newSource=sourcePath.findSource(qName.getNamespace(),qName.getLocalPart());        } catch (        CompilerException compilerException) {        }      }      if ((newSource == null) && (resources != null)) {        newSource=resources.findSource(qName.getNamespace(),qName.getLocalPart());      }      if ((newSource != null) && (newSource != source) && (newSource.getLastModified() != source.getLastModified())) {        String message=l10n.getLocalizedTextString(new SwcDefinitionObsoleted(newSource.getName()));        logger.needsCompilation(source.getName(),message);        sources.remove(source);      }    }  }}  }
class C{  public boolean isCompile(){  return compile;}  }
class C{  public boolean isExpanded(){  return expanded;}  }
class C{  public static void exportToPNG(OutputStream os,NLPCanvasRenderer renderer,NLPInstance instance,double scaleFactor) throws IOException {  BufferedImage image=getImage(renderer,instance,scaleFactor);  ImageIO.write(image,"PNG",os);}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer analyzer=new IndonesianAnalyzer();  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);  analyzer.close();}  }
class C{  void _verify(String s,int verify_tags){  if (x.isFalse(ChunkString._VALID.find(s))) {    throw new IllegalArgumentException("Transformation generated invalid chunkstring:\n" + s);  }  String brackets=ChunkString._BRACKETS.sub("",s);  for (  int i : x.countTo((int)(1 + x.len(brackets) / 5000))) {    String substr=x.String(brackets).slice(i * 5000,i * 5000 + 5000);    if (x.isFalse(ChunkString._BALANCED_BRACKETS.find(substr))) {      throw new IllegalArgumentException("Transformation generated invalid chunkstring:\n" + s);    }  }  if (verify_tags <= 0)   return;  list<String> tags1=(x.Regex("[\\{\\}<>]+").split(s)).slice(1,-1);  list<String> tags2=x.list(x.<String>yield().apply(_tag).forEach(this._pieces));  if (!x.Object(tags1).equals(tags2)) {    throw new IllegalArgumentException("Transformation generated invalid chunkstring: tag changed");  }}  }
class C{  public Quaterniond lookAlong(Vector3dc dir,Vector3dc up){  return lookAlong(dir.x(),dir.y(),dir.z(),up.x(),up.y(),up.z(),this);}  }
class C{  public URIResolver createURIResolver(SVGDocument doc,DocumentLoader dl){  return new URIResolver(doc,dl);}  }
class C{  public static long interleave(int x,int y,int z){  return MultiDimension.getInstance().interleave(new int[]{x,y,z});}  }
class C{  public static void update(VisualItem item,String field,Object val){  item.set(getStartField(field),item.get(field));  item.set(field,val);  item.set(getEndField(field),val);}  }
class C{  private void prepareNext(){  if (range.negated) {    if (current == Character.MAX_VALUE) {      hasNext=false;    } else     if (current + 1 == range.start) {      if (range.end == Character.MAX_VALUE) {        hasNext=false;      } else {        current=(char)(range.end + 1);      }    } else {      current=(char)(current + 1);    }  } else   if (current < range.end) {    current=(char)(current + 1);  } else {    hasNext=false;  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case StextPackage.TRANSITION_SPECIFICATION__REACTION:    return basicSetReaction(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (curNumberOfParameters == 2) {    int masky=getMediaMask(stack);    return Wizard.getInstance().searchForPeople(getString(stack),masky);  } else   return Wizard.getInstance().searchForPeople(getString(stack),DBObject.MEDIA_MASK_ALL);}  }
class C{  public void expectFailure(){  expectedApiCalls.add(new ApiCall(FAILURE));}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public LiteralExtensionIV createIVFromZOrderByteArray(final byte[] zOrderByteArray){  final byte[] zOrderByteArrayTwoCompl=padLeadingZero(zOrderByteArray);  final BigInteger bi=new BigInteger(zOrderByteArrayTwoCompl);  final AbstractLiteralIV delegate=new XSDIntegerIV(bi);  return new LiteralExtensionIV(delegate,datatype.getIV());}  }
class C{  private void closeWindow(){  setJMenuBar(null);  setVisible(false);  dispose();}  }
class C{  private void executeAnotherRequest() throws SQLException {  Random random=new Random();  int value=random.nextInt();  PreparedStatement preparedStatement=sharedConnection.prepareStatement("SELECT " + value);  ResultSet rs=preparedStatement.executeQuery();  rs.next();  assertEquals(value,rs.getInt(1));}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"RFE");  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  instructions.add(ReilHelpers.createUnknown(baseOffset++));}  }
class C{  private void handleUpdateFailure(Entity entity,Throwable throwable) throws SortPersistException {  EntityContext tempCtx=entity.getEntityContext().newEntityContextSharingTransaction();  Entity loadedEntity=tempCtx.getEntityOrLoadEntity(entity.getEntityType(),entity.getKey().getValue(),false);  if (loadedEntity == null) {    throw new EntityMissingException(entity.getEntityType(),entity.getKey().getValue());  } else   if (loadedEntity.getOptimisticLock() != null && !Objects.equals(loadedEntity.getOptimisticLock().getValue(),entity.getOptimisticLock().getValue())) {    throw new OptimisticLockMismatchException(entity,loadedEntity);  } else {    throw new SortPersistException("Could not update entity: " + entity,throwable);  }}  }
class C{  private static BitMatrix bitMatrixFromEncoder(PDF417 encoder,String contents,int width,int height,int margin) throws WriterException {  int errorCorrectionLevel=2;  encoder.generateBarcodeLogic(contents,errorCorrectionLevel);  int lineThickness=2;  int aspectRatio=4;  byte[][] originalScale=encoder.getBarcodeMatrix().getScaledMatrix(lineThickness,aspectRatio * lineThickness);  boolean rotated=false;  if ((height > width) ^ (originalScale[0].length < originalScale.length)) {    originalScale=rotateArray(originalScale);    rotated=true;  }  int scaleX=width / originalScale[0].length;  int scaleY=height / originalScale.length;  int scale;  if (scaleX < scaleY) {    scale=scaleX;  } else {    scale=scaleY;  }  if (scale > 1) {    byte[][] scaledMatrix=encoder.getBarcodeMatrix().getScaledMatrix(scale * lineThickness,scale * aspectRatio * lineThickness);    if (rotated) {      scaledMatrix=rotateArray(scaledMatrix);    }    return bitMatrixFrombitArray(scaledMatrix,margin);  }  return bitMatrixFrombitArray(originalScale,margin);}  }
class C{  private List<D> collectRangeToSelect(D startNode,D endNode,boolean includeStart,boolean includeEnd){  D parentNode=dataAdapter.getParent(startNode);  assert (parentNode != null) : "Null parent node when doing range select!";  assert (parentNode.equals(dataAdapter.getParent(endNode))) : "Different parent nodes when doing range highlight!";  assert (dataAdapter.compare(startNode,endNode) <= 0) : "Nodes are in reverse order for range select! " + dataAdapter.getNodeName(startNode) + " - "+ dataAdapter.getNodeName(endNode);  List<D> range=new ArrayList<>();  List<D> children=dataAdapter.getChildren(parentNode);  int i=0;  boolean adding=false;  for (int n=children.size(); i < n; i++) {    D child=children.get(i);    if (child.equals(startNode)) {      adding=true;      if (includeStart) {        range.add(child);      }      continue;    }    if (adding) {      if (child.equals(endNode)) {        if (!includeEnd) {          break;        }        range.add(child);        break;      }      range.add(child);    }  }  if (i == children.size()) {  }  return range;}  }
class C{  private boolean start(String type){  long timePassed=System.currentTimeMillis() - start;  if (timePassed > MAX_TIME) {    close();  }  if (!type.equals(mode)) {    close();  }  if (mode == null) {    mode=type;    start=System.currentTimeMillis();    length=0;    return true;  }  return false;}  }
class C{  private boolean showConfirmationDialogAndWait(){  if (!pipeline.getSteps().isEmpty() && project.isSaveDirty()) {    final ButtonType save=new ButtonType("Save");    final ButtonType dontSave=ButtonType.NO;    final ButtonType cancel=ButtonType.CANCEL;    final Dialog<ButtonType> dialog=new Dialog<>();    dialog.getDialogPane().getStylesheets().addAll(root.getStylesheets());    dialog.getDialogPane().setStyle(root.getStyle());    dialog.setTitle("Save Project?");    dialog.setHeaderText("Save the current project first?");    dialog.getDialogPane().getButtonTypes().setAll(save,dontSave,cancel);    if (!dialog.showAndWait().isPresent()) {      return false;    } else     if (dialog.getResult().equals(cancel)) {      return false;    } else     if (dialog.getResult().equals(save)) {      try {        return saveProject();      } catch (      IOException e) {        logger.log(Level.SEVERE,e.getMessage(),e.getCause());      }    }  }  return true;}  }
class C{  private PaymentPanelFac(){}  }
class C{  @Override public void updateNCharacterStream(String columnLabel,Reader x) throws SQLException {  updateNCharacterStream(columnLabel,x,-1);}  }
class C{  public void paint(Graphics g){  super.paint(g);  Border border=getBorder();  if (border != null) {    Dimension size=getSize();    border.paintBorder(this,g,0,0,size.width,size.height);  }}  }
class C{  public Signature addSignature(Signature signature) throws IllegalArgumentException {  if (signature == null) {    throw new IllegalArgumentException("'signature' must not be null");  }  signatures.add(signature);  signature.setEntry(this);  return signature;}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  if (keyidentifier != null) {    v.add(new DERTaggedObject(false,0,keyidentifier));  }  if (certissuer != null) {    v.add(new DERTaggedObject(false,1,certissuer));  }  if (certserno != null) {    v.add(new DERTaggedObject(false,2,certserno));  }  return new DERSequence(v);}  }
class C{  @Override public void onSdkAvailable(final boolean isSandboxMode){  Log.v(TAG,"onSdkAvailable recieved: Response -" + isSandboxMode);  PurchasingManager.initiateGetUserIdRequest();}  }
class C{  public static DatatypeFactory init(){  try {    DatatypeFactory theDatatypeFactory=(DatatypeFactory)EPackage.Registry.INSTANCE.getEFactory(DatatypePackage.eNS_URI);    if (theDatatypeFactory != null) {      return theDatatypeFactory;    }  } catch (  Exception exception) {    EcorePlugin.INSTANCE.log(exception);  }  return new DatatypeFactoryImpl();}  }
class C{  public Vec3 multiplyByMatrix(Matrix4 matrix){  if (matrix == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Vec3","multiplyByMatrix","missingMatrix"));  }  double[] m=matrix.m;  double x=(m[0] * this.x) + (m[1] * this.y) + (m[2] * this.z)+ m[3];  double y=(m[4] * this.x) + (m[5] * this.y) + (m[6] * this.z)+ m[7];  double z=(m[8] * this.x) + (m[9] * this.y) + (m[10] * this.z)+ m[11];  double w=(m[12] * this.x) + (m[13] * this.y) + (m[14] * this.z)+ m[15];  this.x=x / w;  this.y=y / w;  this.z=z / w;  return this;}  }
class C{  public void sync(){  List<Object> unformatted=client.getAll();  for (  Object o : unformatted) {    generateResponse(o);  }}  }
class C{  public boolean isValidName(){  String _name=this.getName();  boolean _equals=Objects.equal("prototype",_name);  if (_equals) {    return false;  }  boolean _and=false;  String _name_1=this.getName();  boolean _equals_1=Objects.equal("constructor",_name_1);  if (!_equals_1) {    _and=false;  } else {    LiteralOrComputedPropertyName _declaredName=this.getDeclaredName();    PropertyNameKind _kind=null;    if (_declaredName != null) {      _kind=_declaredName.getKind();    }    boolean _tripleNotEquals=(_kind != PropertyNameKind.COMPUTED);    _and=_tripleNotEquals;  }  if (_and) {    return false;  }  return true;}  }
class C{  public String iterativeClassifierTipText(){  return "The iterative classifier to be optimized.";}  }
class C{  public BinarySchemaRegistry schemaRegistry(int typeId){  Map<Integer,BinarySchemaRegistry> schemas0=schemas;  if (schemas0 == null) {synchronized (this) {      schemas0=schemas;      if (schemas0 == null) {        schemas0=new HashMap<>();        BinarySchemaRegistry reg=new BinarySchemaRegistry();        schemas0.put(typeId,reg);        schemas=schemas0;        return reg;      }    }  }  BinarySchemaRegistry reg=schemas0.get(typeId);  if (reg == null) {synchronized (this) {      reg=schemas.get(typeId);      if (reg == null) {        reg=new BinarySchemaRegistry();        schemas0=new HashMap<>(schemas);        schemas0.put(typeId,reg);        schemas=schemas0;      }    }  }  return reg;}  }
class C{  public synchronized void connect() throws Exception {  if (connection != null && !connection.isConnected()) {    connection.connect();    transaction=connection.getModbusTransport().createTransaction();    setTransaction(transaction);  }}  }
class C{  @Override public void showSelectedNeuronProperties(){  StandardDialog dialog=getNeuronDialog(getSelectedNeurons());  dialog.pack();  dialog.setLocationRelativeTo(null);  dialog.setVisible(true);}  }
class C{  public static void writeStringToFile(File file,String data,String encoding) throws IOException {  writeStringToFile(file,data,encoding,false);}  }
class C{  public void bondContractDetails(int reqId,ContractDetails contractDetails){  _log.debug("bondContractDetails:" + reqId);}  }
class C{  private void checkCache(Container parent){  if (parent == null)   return;  if (dirty)   grid=null;  cleanConstraintMaps(parent);  int mc=PlatformDefaults.getModCount();  if (lastModCount != mc) {    grid=null;    lastModCount=mc;  }  if (!parent.isValid()) {    if (!lastWasInvalid) {      lastWasInvalid=true;      int hash=0;      boolean resetLastInvalidOnParent=false;      for (      ComponentWrapper wrapper : ccMap.keySet()) {        Object component=wrapper.getComponent();        if (component instanceof JTextArea || component instanceof JEditorPane)         resetLastInvalidOnParent=true;        hash^=wrapper.getLayoutHashCode();        hash+=285134905;      }      if (resetLastInvalidOnParent)       resetLastInvalidOnParent(parent);      if (hash != lastHash) {        grid=null;        lastHash=hash;      }      Dimension ps=parent.getSize();      if (lastInvalidSize == null || !lastInvalidSize.equals(ps)) {        grid=null;        lastInvalidSize=ps;      }    }  } else {    lastWasInvalid=false;  }  ContainerWrapper par=checkParent(parent);  setDebug(par,getDebugMillis() > 0);  if (grid == null)   grid=new Grid(par,lc,rowSpecs,colSpecs,ccMap,callbackList);  dirty=false;}  }
class C{  public void writeFile(File file,CvTableModel cvModel,IndexedCvTableModel iCvModel,VariableTableModel variableModel,RosterEntry r){  if (log.isDebugEnabled()) {    log.debug("writeFile to " + file.getAbsolutePath() + " "+ file.getName());  }  try {    Element root=new Element("locomotive-config");    root.setAttribute("noNamespaceSchemaLocation","http://jmri.org/xml/schema/locomotive-config" + Roster.schemaVersion + ".xsd",org.jdom2.Namespace.getNamespace("xsi","http://www.w3.org/2001/XMLSchema-instance"));    Document doc=newDocument(root);    java.util.Map<String,String> m=new java.util.HashMap<>();    m.put("type","text/xsl");    m.put("href",xsltLocation + "locomotive.xsl");    ProcessingInstruction p=new ProcessingInstruction("xml-stylesheet",m);    doc.addContent(0,p);    Element locomotive=r.store();    root.addContent(locomotive);    Element values=new Element("values");    locomotive.addContent(values);    Element decoderDef;    values.addContent(decoderDef=new Element("decoderDef"));    if (variableModel != null) {      for (int i=0; i < variableModel.getRowCount(); i++) {        decoderDef.addContent(new Element("varValue").setAttribute("item",variableModel.getLabel(i)).setAttribute("value",variableModel.getValString(i)));      }      variableModel.setFileDirty(false);    }    if (cvModel != null) {      for (int i=0; i < cvModel.getRowCount(); i++) {        values.addContent(new Element("CVvalue").setAttribute("name",cvModel.getName(i)).setAttribute("value",cvModel.getValString(i)));      }    }    if (iCvModel != null) {      for (int i=0; i < iCvModel.getRowCount(); i++) {        values.addContent(new Element("indexedCVvalue").setAttribute("name",iCvModel.getName(i)).setAttribute("piCv","" + (iCvModel.getCvByRow(i)).piCv()).setAttribute("piVal","" + (iCvModel.getCvByRow(i)).piVal()).setAttribute("siCv","" + (iCvModel.getCvByRow(i)).siCv()).setAttribute("siVal","" + (iCvModel.getCvByRow(i)).siVal()).setAttribute("iCv","" + (iCvModel.getCvByRow(i)).iCv()).setAttribute("value",iCvModel.getValString(i)));      }    }    writeXML(file,doc);  } catch (  java.io.IOException ex) {    log.error("IOException",ex);  }}  }
class C{  public boolean checkStationaryPoint(final double xOld,final double xNew,final int statStateIterations,final Type ecType){  if (Math.abs(xNew - xOld) >= rootEpsilon_) {    this.statStateIterations=0;    return false;  }  this.statStateIterations++;  if (statStateIterations <= maxStationaryStateIterations_)   return false;  this.ecType=Type.StationaryPoint;  return true;}  }
class C{  public EstadoNotificacionBD(){}  }
class C{  public MunitionFlightPath(String sidc){  super(sidc);}  }
class C{  @Override @SuppressWarnings("unchecked") public V put(K key,V value){  return putImpl(key,value);}  }
class C{  boolean supportsLanguage(String language){  return languages.contains(language);}  }
class C{  public static Intent resolvePendingIntent(Intent intent,int type){  if (type == PluginDescriptor.BROADCAST) {    Intent newIntent=PluginIntentResolver.resolveReceiver(intent).get(0);    return newIntent;  } else   if (type == PluginDescriptor.ACTIVITY) {    PluginIntentResolver.resolveActivity(intent);    return intent;  } else   if (type == PluginDescriptor.SERVICE) {    PluginIntentResolver.resolveService(intent);    return intent;  }  return intent;}  }
class C{  public static long parse(FacesContext context,UIComponent uiComponent,String value) throws ValidatorException {  if (!GenericValidator.isLong(value)) {    Object[] args=null;    String label=JSFUtils.getLabel(uiComponent);    if (label != null) {      args=new Object[]{label};    }    ValidationException e=new ValidationException(ValidationException.ReasonEnum.LONG,label,null);    String message=JSFUtils.getText(e.getMessageKey(),args,context);    throw getException(message);  }  return Long.parseLong(value);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.MULTIPLE_IS_A__EXTENDS_NAME_1:    return EXTENDS_NAME_1_EDEFAULT == null ? extendsName_1 != null : !EXTENDS_NAME_1_EDEFAULT.equals(extendsName_1);case UmplePackage.MULTIPLE_IS_A__ANONYMOUS_MULTIPLE_IS_A11:  return anonymous_multipleIsA_1_1 != null && !anonymous_multipleIsA_1_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @Override public View newView(Context context,Cursor cursor,ViewGroup parent){  View v=super.newView(context,cursor,parent);  v.setTag(new ChildViewCache(v));  return v;}  }
class C{  public static void main(String args[]){  registerShutdownHook();  loadConfiguration();  initAkka();  startReporters();}  }
class C{  @Override public Model learn(){  RegressionProblem problem=(RegressionProblem)this.problem;  int numExamples=problem.getProblemSize();  int numBases=numExamples + 1;  double initBeta=1.0 / Math.pow(parameter.initSigma,2);  double[][] x=problem.getInputVectors();  KernelBasisFunction[] kernels=problem.getKernels();  double[][] PHI=new double[numExamples][numBases];  int i, j;  for (j=0; j < numBases - 1; j++) {    for (i=0; i < numExamples; i++) {      PHI[i][j + 1]=kernels[j + 1].eval(x[i]);    }  }  for (i=0; i < numExamples; i++) {    PHI[i][0]=1.0;  }  double[] alphas=new double[numBases];  for (j=0; j < numBases; j++) {    alphas[j]=parameter.initAlpha;  }  Matrix matrixPHI=new Matrix(PHI);  Matrix vectorT=new Matrix(problem.getTargetVectors());  Matrix vectorAlpha=new Matrix(alphas,numBases);  Matrix vectorPHI_T=(matrixPHI.transpose()).times(vectorT);  LinkedList<Integer> unprunedIndicesList=null;  int[] unprunedIndicesArray=null;  Matrix prunedVectorWeights=null;  for (i=1; i <= parameter.maxIterations; i++) {    unprunedIndicesList=new LinkedList<Integer>();    for (j=0; j < numBases; j++) {      if (vectorAlpha.get(j,0) >= parameter.alpha_max) {      } else {        unprunedIndicesList.add(Integer.valueOf(j));      }    }    unprunedIndicesArray=new int[unprunedIndicesList.size()];    Iterator iter=unprunedIndicesList.iterator();    for (j=0; j < unprunedIndicesList.size(); j++) {      unprunedIndicesArray[j]=((Integer)iter.next()).intValue();    }    Matrix prunedMatrixPHI=matrixPHI.getMatrix(0,matrixPHI.getRowDimension() - 1,unprunedIndicesArray);    Matrix prunedVectorPHI_T=vectorPHI_T.getMatrix(unprunedIndicesArray,0,0);    Matrix prunedVectorAlpha=vectorAlpha.getMatrix(unprunedIndicesArray,0,0);    Matrix matrixAlphaDiag=new Matrix(prunedVectorAlpha.getRowDimension(),prunedVectorAlpha.getRowDimension(),0);    for (j=0; j < prunedVectorAlpha.getRowDimension(); j++) {      matrixAlphaDiag.set(j,j,prunedVectorAlpha.get(j,0));    }    Matrix matrixSIGMAInv=(prunedMatrixPHI.transpose()).times(prunedMatrixPHI);    matrixSIGMAInv.timesEquals(initBeta);    matrixSIGMAInv.plusEquals(matrixAlphaDiag);    SECholeskyDecomposition CD=new SECholeskyDecomposition(matrixSIGMAInv.getArray());    Matrix matrixU=CD.getPTR().times(CD.getL());    Matrix matrixUInv=matrixU.inverse();    prunedVectorWeights=((matrixUInv.transpose()).times(matrixUInv.times(prunedVectorPHI_T))).times(initBeta);    double[] diagSIGMA=new double[matrixUInv.getRowDimension()];    for (j=0; j < diagSIGMA.length; j++) {      double value=0;      for (int k=0; k < diagSIGMA.length; k++) {        value+=matrixUInv.get(k,j) * matrixUInv.get(k,j);      }      diagSIGMA[j]=value;    }    double[] gammas=new double[diagSIGMA.length];    for (j=0; j < gammas.length; j++) {      gammas[j]=1.0 - prunedVectorAlpha.get(j,0) * diagSIGMA[j];    }    double[] logAlphas=new double[prunedVectorAlpha.getRowDimension()];    for (j=0; j < logAlphas.length; j++) {      logAlphas[j]=Math.log(prunedVectorAlpha.get(j,0));    }    for (j=0; j < prunedVectorAlpha.getRowDimension(); j++) {      double newAlpha=gammas[j] / (prunedVectorWeights.get(j,0) * prunedVectorWeights.get(j,0));      prunedVectorAlpha.set(j,0,newAlpha);    }    double maxLogAlphaChange=0;    for (j=0; j < logAlphas.length; j++) {      double change=Math.abs(logAlphas[j] - Math.log(prunedVectorAlpha.get(j,0)));      if (change > maxLogAlphaChange) {        maxLogAlphaChange=change;      }    }    if (maxLogAlphaChange < parameter.min_delta_log_alpha) {      break;    }    double dataError=0;    Matrix dataDelta=vectorT.minus(prunedMatrixPHI.times(prunedVectorWeights));    for (j=0; j < numExamples; j++) {      dataError+=(dataDelta.get(j,0) * dataDelta.get(j,0));    }    double sumGammas=0;    for (j=0; j < gammas.length; j++) {      sumGammas+=gammas[j];    }    initBeta=(numExamples - sumGammas) / dataError;    for (j=0; j < prunedVectorAlpha.getRowDimension(); j++) {      vectorAlpha.set(unprunedIndicesArray[j],0,prunedVectorAlpha.get(j,0));    }  }  double[] finalWeights=new double[unprunedIndicesArray.length];  KernelBasisFunction[] finalKernels=new KernelBasisFunction[unprunedIndicesArray.length];  boolean bias=false;  for (j=0; j < unprunedIndicesArray.length; j++) {    finalWeights[j]=prunedVectorWeights.get(j,0);    if (unprunedIndicesArray[j] == 0) {      bias=true;      finalKernels[j]=new KernelBasisFunction(new KernelRadial());    } else {      finalKernels[j]=kernels[unprunedIndicesArray[j]];    }  }  Model model=new Model(finalWeights,finalKernels,bias,true);  return model;}  }
class C{  public String testEMail(){  if (getWStoreEMail() == null || getWStoreEMail().length() == 0)   return "No Web Store EMail for " + getName();  EMail email=createEMail(getWStoreEMail(),"Adempiere WebStore EMail Test","Adempiere WebStore EMail Test: " + toString());  if (email == null)   return "Could not create Web Store EMail: " + getName();  try {    String msg=email.send();    if (EMail.SENT_OK.equals(email.send())) {      log.info("Sent Test EMail to " + getWStoreEMail());      return "OK";    } else {      log.warning("Could NOT send Test Email to " + getWStoreEMail() + ": "+ msg);      return msg;    }  } catch (  Exception ex) {    log.severe(getName() + " - " + ex.getLocalizedMessage());    return ex.getLocalizedMessage();  }}  }
class C{  protected Double scale(double value){  return (value - getOffset()) / getScale();}  }
class C{  public double distanceSq(final double x,final double y,final double z){  final double dx=(double)this.x - x;  final double dy=(double)this.y - y;  final double dz=(double)this.z - z;  return (dx * dx + dy * dy + dz * dz);}  }
class C{  public static DataDisplayTable listUnmappedGlyphs(Font font){  String[] header={"Glyph ID"};  Align[] displayAlignment={Align.Right};  DataDisplayTable table=new DataDisplayTable(Arrays.asList(header));  table.setAlignment(Arrays.asList(displayAlignment));  Set<Integer> mappedGlyphs=new HashSet<Integer>();  CMapTable cmapTable=FontUtils.getCMapTable(font);  for (  CMap cmap : cmapTable) {    for (    Integer codePoint : cmap) {      mappedGlyphs.add(cmap.glyphId(codePoint));    }  }  LocaTable locaTable=FontUtils.getLocaTable(font);  for (int i=0; i < locaTable.numGlyphs(); i++) {    if (!mappedGlyphs.contains(i)) {      table.add(Arrays.asList(new String[]{String.format("%d",i)}));    }  }  return table;}  }
class C{  private void checkElementPresence(Elements elements,TestSolutionHandler testSolutionHandler){  TestSolution checkResult=getSuccessSolution();  if (elements.size() == 1) {    for (    Element el : elements) {      addSourceCodeRemark(getSuccessSolution(),el,getSuccessMsgCode());    }  } else {    checkResult=getFailureSolution();    for (    Element el : elements) {      addSourceCodeRemark(getFailureSolution(),el,getFailureMsgCode());    }  }  testSolutionHandler.addTestSolution(checkResult);}  }
class C{  public void validate(URL url) throws SAXException, IOException {  validate(new StreamSource(url.toExternalForm()));}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  @Deprecated public UpdateRequest script(String script,ScriptService.ScriptType scriptType){  updateOrCreateScript(script,scriptType,null,null);  return this;}  }
class C{  public static RequestQueue newRequestQueue(){  return newRequestQueue(3);}  }
class C{  private static void addEncounterForm(Document doc,Element formNode,Element modelNode,Element groupNode){  String formId=Context.getAdministrationService().getGlobalProperty("xforms.patientRegEncounterFormId","0");  if ("0".equals(formId))   return;  FormService formService=(FormService)Context.getService(FormService.class);  Form form=formService.getForm(Integer.parseInt(formId));  if (form == null)   return;  String templateXml=FormEntryWrapper.getFormTemplate(form);  Document templateDoc=XformBuilder.getDocument(templateXml);  Element rootNode=templateDoc.getRootElement();  for (int index=0; index < rootNode.getChildCount(); index++) {    if (rootNode.getType(index) != Element.ELEMENT)     continue;    Element child=(Element)rootNode.getChild(index);    if (child.getName().equalsIgnoreCase("patient")) {      removeNonUsedPatientChildNodes(child);      break;    }  }  formNode.addChild(org.kxml2.kdom.Element.ELEMENT,rootNode);  Document xformSchemaDoc=new Document();  xformSchemaDoc.setEncoding(XformConstants.DEFAULT_CHARACTER_ENCODING);  Element xformSchemaNode=doc.createElement(NAMESPACE_XML_SCHEMA,null);  xformSchemaNode.setName(NODE_SCHEMA);  xformSchemaDoc.addChild(org.kxml2.kdom.Element.ELEMENT,xformSchemaNode);  Hashtable bindings=new Hashtable();  Hashtable<String,String> problemList=new Hashtable<String,String>();  Hashtable<String,String> problemListItems=new Hashtable<String,String>();  parseTemplate(modelNode,formNode,formNode,bindings,groupNode,problemList,problemListItems,0);  Document schemaDoc=XformBuilder.getDocument(XformsUtil.getSchema(form));  parseSchema(schemaDoc.getRootElement(),groupNode,modelNode,xformSchemaNode,bindings,problemList,problemListItems);  removeNonUsedUINodes(groupNode);}  }
class C{  private void sendSelfPatch(State state){  Operation patch=Operation.createPatch(UriUtils.buildUri(getHost(),getSelfLink())).setBody(state);  this.sendRequest(patch);}  }
class C{  boolean isPandasAndPandasqlInstalled(){  PythonInterpreter python=getPythonInterpreter();  String output=python.sendCommandToPython("\n\nimport pandas\nimport pandasql\n");  return !output.contains("ImportError");}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (!doPadding && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  @Field(8) public __VARIANT_NAME_3_union scode(int scode){  this.io.setIntField(this,8,scode);  return this;}  }
class C{  public StorageOSUser findOne(String userContext){  StorageOSUser user=_userFromRequestHelper.getStorageOSUser(userContext);  if (user == null) {    throw SecurityException.fatals.couldNotConstructUserObjectFromRequest();  }  addRoles(user);  return user;}  }
class C{  public String toString(){  String policyName=StringUtils.equalsIgnoreCase(autoTierPolicyName,Constants.NONE) ? NON_FAST_POLICY : getAutoTierPolicyName();  if (isHostIOLimitBandwidthSet()) {    policyName+="_bw" + getHostIOLimitBandwidth();  }  if (isHostIOLimitIOPsSet()) {    policyName+="_iops" + getHostIOLimitIOPs();  }  if (getCompression()) {    policyName+="_" + COMP;  }  return policyName;}  }
class C{  private long newSlice(int level){  final long newSlice=sizes[level]++;  if (ordinals[level] == null) {    ordinals[level]=new PagedGrowableWriter(8L * numSlots(level),PAGE_SIZE,startBitsPerValue,acceptableOverheadRatio);  } else {    ordinals[level]=ordinals[level].grow(sizes[level] * numSlots(level));    if (nextLevelSlices[level] != null) {      nextLevelSlices[level]=nextLevelSlices[level].grow(sizes[level]);    }  }  return newSlice;}  }
class C{  private static void SetStaticDoubleField(JNIEnvironment env,int classJREF,int fieldID,double fieldValue){  if (traceJNI)   VM.sysWrite("JNI called: SetStaticDoubleField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    field.setDoubleValueUnchecked(null,fieldValue);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean shouldStripWhiteSpace(org.apache.xpath.XPathContext support,org.w3c.dom.Element targetElement) throws TransformerException {  StylesheetRoot sroot=this.getStylesheetRoot();  return (null != sroot) ? sroot.shouldStripWhiteSpace(support,targetElement) : false;}  }
class C{  public void print(PrintStream out){  super.print(out);  if (getValue() != null) {    getValue().print(out);    out.println();  }}  }
class C{  public static byte[] intToByteArray(final int src,final int srcPos,final byte[] dst,final int dstPos,final int nBytes){  if (0 == nBytes) {    return dst;  }  if ((nBytes - 1) * 8 + srcPos >= 32) {    throw new IllegalArgumentException("(nBytes-1)*8+srcPos is greather or equal to than 32");  }  int shift=0;  for (int i=0; i < nBytes; i++) {    shift=i * 8 + srcPos;    dst[dstPos + i]=(byte)(0xff & (src >> shift));  }  return dst;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:05:56.919 -0400",hash_original_method="4A83D552C770AFA297B6A54A26C1925F",hash_generated_method="7CBCE5E8059592A8B8EAE549D42D87D3") public FilterFunction createFunction(Class filterClass,Object... parameters){  String filterName="FilterFunction(" + filterClass.getSimpleName() + ")";  Filter filter=FilterFactory.sharedFactory().createFilterByClass(filterClass,filterName);  filter.initWithAssignmentList(parameters);  return new FilterFunction(getContext(),filter);}  }
class C{  protected Term randomTerm(){  return new Term("field","" + randomChar());}  }
class C{  protected TableGroupJoinNode singleBranchPending(TableGroupJoinNode rootTable,List<TableSource> tableSources){  TableGroupJoinNode leafTable=leafLeftMostPending(rootTable);  assert (leafTable != null);  pendingTableSources(leafTable,rootTable,tableSources);  return leafTable;}  }
class C{  public String toString(){  return wrappedCert.toString();}  }
class C{  private void showGridView(){  gridView=(GridView)contentContainer.findViewById(R.id.bottom_sheet_grid_view);  if (gridView != null) {    contentContainer.setVisibility(View.VISIBLE);    if (getStyle() == Style.GRID) {      int horizontalPadding=getContext().getResources().getDimensionPixelSize(R.dimen.bottom_sheet_grid_item_horizontal_padding);      int paddingBottom=getContext().getResources().getDimensionPixelSize(R.dimen.bottom_sheet_grid_padding_bottom);      gridView.setPadding(horizontalPadding,0,horizontalPadding,paddingBottom);      gridView.setNumColumns(GridView.AUTO_FIT);      gridView.setColumnWidth(getContext().getResources().getDimensionPixelSize(R.dimen.bottom_sheet_grid_item_size));    } else {      int paddingBottom=getContext().getResources().getDimensionPixelSize(R.dimen.bottom_sheet_list_padding_bottom);      gridView.setPadding(0,0,0,paddingBottom);      gridView.setNumColumns(getStyle() == Style.LIST_COLUMNS && (getDeviceType(getContext()) == DisplayUtil.DeviceType.TABLET || getOrientation(getContext()) == DisplayUtil.Orientation.LANDSCAPE) ? 2 : 1);    }    gridView.setOnItemClickListener(createItemClickListener());    gridView.setOnItemLongClickListener(createItemLongClickListener());    gridView.setAdapter(adapter);  }}  }
class C{  public <T>String soapToJson(SoapObject soapObject,Class<T> clazz){  long start=System.currentTimeMillis();  JSONObject jsonResult=new JSONObject();  HashSet<String> hashset=new HashSet<String>();  getSoapresult(soapObject,jsonResult,hashset);  String json=getSoapJsonResult(jsonResult,hashset);  NLog.e(tag,"soapToJson: " + json.toString());  long end=System.currentTimeMillis();  NLog.e(tag,"soapToJson take time : " + (end - start));  return json;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'HideImage' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'BEYOND_GROUP_ID' INTEGER,"+ "'TITLE' TEXT,"+ "'DISPLAY_NAME' TEXT,"+ "'MIME_TYPE' TEXT,"+ "'OLD_PATH_URL' TEXT,"+ "'NEW_PATH_URL' TEXT,"+ "'SIZE' INTEGER,"+ "'MOVE_DATE' INTEGER);");}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private static synchronized void clearCurrent(String where){  current.put(where,null);}  }
class C{  @Override public void nextBytes(final byte[] bytes){  for (int x=0; x < bytes.length; x++) {    bytes[x]=(byte)next(8);  }}  }
class C{  public void hide(){  loader.setSuccess(LoaderPresenter.Phase.WORKSPACE_STOPPED);}  }
class C{  private void startRecording(){  if (isRecording) {    return;  }  recordingTrack=sequence.createTrack();  recordingStartedTime=System.currentTimeMillis();  recordStartedTick=getTickPosition();  isRecording=true;}  }
class C{  public double cond(DoubleMatrix2D A){  return svd(A).cond();}  }
class C{  private void checkIsBackupOrPrimary(Affinity testAff,Affinity aff){  for (int i=0; i < 10000; i++)   for (  ClusterNode n : nodes()) {    assertEquals(testAff.isBackup(n,i),aff.isBackup(n,i));    assertEquals(testAff.isPrimary(n,i),aff.isPrimary(n,i));    assertEquals(testAff.isPrimaryOrBackup(n,i),aff.isPrimaryOrBackup(n,i));  }}  }
class C{  public void addWidgets(WidgetsModel model){  mRecyclerView.setWidgets(model);  mAdapter.setWidgetsModel(model);  mAdapter.notifyDataSetChanged();}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public char popChar(){  BaseTypeWrapper wrapper=(BaseTypeWrapper)this.pop();  Character value=(Character)wrapper.getValue();  return value.charValue();}  }
class C{  @Override public void resetLearning(){  learner.resetLearning();}  }
class C{  static public IDoubleVector colSums(IDoubleMatrix matrix){  final double[] vals=new double[matrix.getColNum()];  for (int i=0; i < matrix.getRowNum(); ++i) {    for (int j=0; j < matrix.getColNum(); ++j) {      vals[j]+=matrix.get(i,j);    }  }  return DoubleVector.wrapArray(vals);}  }
class C{  public PartitionerResponse(int partition,boolean critical){  this.partition=partition;  this.critical=critical;}  }
class C{  public Boolean isOnboardKeyGeneration(){  return onboardKeyGeneration;}  }
class C{  static boolean makeDir(@NonNull final File file){  if (file.exists()) {    return file.isDirectory();  }  if (file.mkdirs()) {    return true;  }  if (Helper.isAtLeastAPI(LOLLIPOP)) {    DocumentFile document=getDocumentFile(file,true);    if (document != null) {      return document.exists();    }  }  return false;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ASSOCIATION_CLASS_CONTENT___COMMENT_1:    return comment_1 != null && !comment_1.isEmpty();case UmplePackage.ASSOCIATION_CLASS_CONTENT___CLASS_DEFINITION_1:  return classDefinition_1 != null && !classDefinition_1.isEmpty();case UmplePackage.ASSOCIATION_CLASS_CONTENT___POSITION_1:return position_1 != null && !position_1.isEmpty();case UmplePackage.ASSOCIATION_CLASS_CONTENT___DISPLAY_COLOR_1:return displayColor_1 != null && !displayColor_1.isEmpty();case UmplePackage.ASSOCIATION_CLASS_CONTENT___INVARIANT_1:return invariant_1 != null && !invariant_1.isEmpty();case UmplePackage.ASSOCIATION_CLASS_CONTENT___SOFTWARE_PATTERN_1:return softwarePattern_1 != null && !softwarePattern_1.isEmpty();case UmplePackage.ASSOCIATION_CLASS_CONTENT___DEPEND_1:return depend_1 != null && !depend_1.isEmpty();case UmplePackage.ASSOCIATION_CLASS_CONTENT___SINGLE_ASSOCIATION_END_1:return singleAssociationEnd_1 != null && !singleAssociationEnd_1.isEmpty();case UmplePackage.ASSOCIATION_CLASS_CONTENT___STATE_MACHINE_1:return stateMachine_1 != null && !stateMachine_1.isEmpty();case UmplePackage.ASSOCIATION_CLASS_CONTENT___ATTRIBUTE_1:return attribute_1 != null && !attribute_1.isEmpty();case UmplePackage.ASSOCIATION_CLASS_CONTENT___ASSOCIATION_1:return association_1 != null && !association_1.isEmpty();case UmplePackage.ASSOCIATION_CLASS_CONTENT___INLINE_ASSOCIATION_1:return inlineAssociation_1 != null && !inlineAssociation_1.isEmpty();case UmplePackage.ASSOCIATION_CLASS_CONTENT___EXTRA_CODE_1:return extraCode_1 != null && !extraCode_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static String nextCode(final String immCode,final boolean mainCycle,final Date referenceDate){  final Date date=nextDate(immCode,mainCycle,referenceDate);  return code(date);}  }
class C{  public void clear(){  individuals.clear();}  }
class C{  private CnATreeElement loadContainer(Class clazz){  CnATreeElement container=containerMap.get(clazz);  if (container == null) {    LoadImportObjectsHolder cmdLoadContainer=new LoadImportObjectsHolder(clazz);    try {      cmdLoadContainer=getCommandService().executeCommand(cmdLoadContainer);    } catch (    CommandException e) {      getLog().error("Error while loading container",e);      throw new RuntimeCommandException("Error while loading container",e);    }    container=cmdLoadContainer.getHolder();    if (container == null) {      container=createContainer(clazz);    }    container.getParent().getTitle();    containerMap.put(clazz,container);  }  return container;}  }
class C{  public iframe addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @Override public final void applyAttachedObject(FacesContext ctx,UIComponent parent){  getAttachedObjectHandlerHelper().applyAttachedObject(ctx,parent);}  }
class C{  public BackgroundJob(String m,Runnable job,Handler handler){  message=m;  mJob=job;  mHandler=handler;}  }
class C{  private ImageFileFactory(){}  }
class C{  public boolean engineCanResolveURI(ResourceResolverContext context){  if (context.uriToResolve == null) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"Quick fail for null uri");    }    return false;  }  if (context.uriToResolve.equals("") || ((context.uriToResolve.charAt(0) == '#') && !context.uriToResolve.startsWith("#xpointer("))) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"State I can resolve reference: \"" + context.uriToResolve + "\"");    }    return true;  }  if (log.isLoggable(java.util.logging.Level.FINE)) {    log.log(java.util.logging.Level.FINE,"Do not seem to be able to resolve reference: \"" + context.uriToResolve + "\"");  }  return false;}  }
class C{  public Interval withEndMillis(long endInstant){  if (endInstant == getEndMillis()) {    return this;  }  return new Interval(getStartMillis(),endInstant,getChronology());}  }
class C{  private void removeBodyAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxBody) {      SandboxBody body=(SandboxBody)node.getUserObject();      int choice=JOptionPane.showConfirmDialog(ControlUtilities.getParentWindow(this),MessageFormat.format(Messages.getString("menu.context.body.remove.warning"),body.getName()),Messages.getString("menu.context.body.remove.warning.title"),JOptionPane.YES_NO_CANCEL_OPTION);      if (choice == JOptionPane.YES_OPTION) {synchronized (Simulation.LOCK) {          this.simulation.getWorld().removeBody(body);        }        this.model.removeNodeFromParent(node);        this.notifyActionListeners("remove-body",body);      }    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.EVENT_SPEC;}  }
class C{  public boolean findRRset(Name name,int type){  return (findRRset(name,type,Section.ANSWER) || findRRset(name,type,Section.AUTHORITY) || findRRset(name,type,Section.ADDITIONAL));}  }
class C{  public void clear(){  rows.clear();}  }
class C{  private void put122(final int b,final int s1,final int s2){  pool.put12(b,s1).putShort(s2);}  }
class C{  private NodeBreakpointIterator(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:28.755 -0500",hash_original_method="87395C94E1724A33A91DB9FA52BA76C0",hash_generated_method="60E3F41C72F85167B31502908A898E91") protected final void resolveClass(Class<?> clazz){}  }
class C{  public GridLayout(){  this(1,0,0,0);}  }
class C{  void checkSemantics(DirectiveList dirList) throws SaslException {  Iterator directives=dirList.getIterator();  ParsedDirective directive;  String name;  while (directives.hasNext()) {    directive=(ParsedDirective)directives.next();    name=directive.getName();    if (name.equals("realm"))     handleRealm(directive); else     if (name.equals("nonce"))     handleNonce(directive); else     if (name.equals("qop"))     handleQop(directive); else     if (name.equals("maxbuf"))     handleMaxbuf(directive); else     if (name.equals("charset"))     handleCharset(directive); else     if (name.equals("algorithm"))     handleAlgorithm(directive); else     if (name.equals("cipher"))     handleCipher(directive); else     if (name.equals("stale"))     handleStale(directive);  }  if (-1 == m_maxBuf)   m_maxBuf=65536;  if (m_qop == 0)   m_qop=QOP_AUTH; else   if ((m_qop & QOP_AUTH) != QOP_AUTH)   throw new SaslException("Only qop-auth is supported by client"); else   if (((m_qop & QOP_AUTH_CONF) == QOP_AUTH_CONF) && (0 == (m_cipherOptions & CIPHER_RECOGNIZED_MASK)))   throw new SaslException("Invalid cipher options"); else   if (null == m_nonce)   throw new SaslException("Missing nonce directive"); else   if (m_staleFlag)   throw new SaslException("Unexpected stale flag"); else   if (null == m_algorithm)   throw new SaslException("Missing algorithm directive");}  }
class C{  public Drawer buildView(){  mSliderLayout=(RelativeLayout)mActivity.getLayoutInflater().inflate(R.layout.material_drawer_slider,mDrawerLayout,false);  mSliderLayout.setBackgroundColor(UIUtils.getThemeColorFromAttrOrRes(mActivity,R.attr.material_drawer_background,R.color.material_drawer_background));  DrawerLayout.LayoutParams params=(DrawerLayout.LayoutParams)mSliderLayout.getLayoutParams();  if (params != null) {    params.gravity=mDrawerGravity;    params=DrawerUtils.processDrawerLayoutParams(this,params);    mSliderLayout.setLayoutParams(params);  }  createContent();  Drawer result=new Drawer(this);  if (mAccountHeader != null) {    mAccountHeader.setDrawer(result);  }  if (mSavedInstance != null && mSavedInstance.getBoolean(Drawer.BUNDLE_DRAWER_CONTENT_SWITCHED,false)) {    mAccountHeader.toggleSelectionList(mActivity);  }  handleShowOnFirstLaunch();  if (!mAppended && mGenerateMiniDrawer) {    mMiniDrawer=new MiniDrawer().withDrawer(result).withAccountHeader(mAccountHeader);  }  mActivity=null;  return result;}  }
class C{  public NewCookie(String name,String value){  this(name,value,null,null,DEFAULT_VERSION,null,DEFAULT_MAX_AGE,false,false);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String[] audioFilters=DShowMediaPlayer.getAudioDecoderFilters();  java.util.ArrayList rv=new java.util.ArrayList();  rv.add(Sage.rez("Default"));  rv.addAll(java.util.Arrays.asList(audioFilters));  return rv.toArray(Pooler.EMPTY_STRING_ARRAY);}  }
class C{  protected AbstractRed(CachableRed src,Map props){  init(src,src.getBounds(),src.getColorModel(),src.getSampleModel(),src.getTileGridXOffset(),src.getTileGridYOffset(),props);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double minVal=Double.MAX_VALUE;  double maxVal=-Double.MAX_VALUE;  int progress=0;  double z=0;  int row, col;  int rows=0;  int cols=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    image.isReflectedAtEdges=true;    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    minVal=image.getMinimumValue();    maxVal=image.getMaximumValue();    double range=maxVal - minVal;    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          z=(data[col] - minVal) / range * 100;          outputFile.setValue(row,col,z);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2",progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    image.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected void incomingNetLoadReply(Object obj,long lastModifiedTime,Object callbackArg,Exception e,boolean serialized,boolean requestorTimedOut){synchronized (this) {    if (requestorTimedOut) {      signalTimedOut();      return;    }    this.result=obj;    this.lastModified=lastModifiedTime;    this.remoteException=e;    this.aCallbackArgument=callbackArg;    computeRemainingTimeout();    this.isSerialized=serialized;    signalDone();  }}  }
class C{  public void restore(){  eyeX=0;  eyeY=0;  eyeZ=CCCamera.getZEye();  centerX=0;  centerY=0;  centerZ=0.0f;  upX=0.0f;  upY=1.0f;  upZ=0.0f;  dirty=false;}  }
class C{  @Override protected void onAttachedToWindow(){  super.onAttachedToWindow();  getSpring().addListener(springListener);}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  private void addGoalsNotIncludedInTargetCriteria(List<ExecutionResult> results){  List<Properties.Criterion> requiredCriteria=new ArrayList<>(Arrays.asList(new Properties.Criterion[]{Properties.Criterion.OUTPUT,Properties.Criterion.INPUT,Properties.Criterion.METHOD,Properties.Criterion.METHODNOEXCEPTION,Properties.Criterion.EXCEPTION}));  requiredCriteria.removeAll(Arrays.asList(Properties.CRITERION));  results=getUpdatedResults(requiredCriteria,results);  for (  Properties.Criterion c : requiredCriteria) {    TestFitnessFactory<? extends TestFitnessFunction> goalFactory=FitnessFunctions.getFitnessFactory(c);    List<? extends TestFitnessFunction> goals=goalFactory.getCoverageGoals();    for (    ExecutionResult result : results) {      for (      TestFitnessFunction goal : goals) {        if (goal.isCovered(result))         result.test.addCoveredGoal(goal);      }    }  }}  }
class C{  public void truncate(int size){  if (pos > size) {    byte[] buff=new byte[size];    System.arraycopy(data,0,buff,0,size);    this.pos=size;    data=buff;  }}  }
class C{  public void addAnswer(DNSIncoming in,DNSRecord rec) throws IOException {  if ((in == null) || !rec.suppressedBy(in)) {    this.addAnswer(rec,0);  }}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  private void processResource(final Group group,final Resource resource){  final UriLocator uriLocator=locatorFactory.getInstance(resource.getUri());  if (uriLocator instanceof WildcardUriLocatorSupport) {    final WildcardStreamLocator wildcardStreamLocator=((WildcardUriLocatorSupport)uriLocator).getWildcardStreamLocator();    if (wildcardStreamLocator.hasWildcard(resource.getUri()) && wildcardStreamLocator instanceof WildcardExpanderHandlerAware) {      final WildcardExpanderHandlerAware expandedHandler=(WildcardExpanderHandlerAware)wildcardStreamLocator;      LOG.debug("Expanding resource: {}",resource.getUri());      final String baseNameFolder=computeBaseNameFolder(resource,uriLocator,expandedHandler);      LOG.debug("baseNameFolder: {}",baseNameFolder);      expandedHandler.setWildcardExpanderHandler(createExpanderHandler(group,resource,baseNameFolder));      try {        uriLocator.locate(resource.getUri());      } catch (      final IOException e) {        LOG.debug("[FAIL] problem while trying to expand wildcard for the following resource uri: {}",resource.getUri());      } finally {        expandedHandler.setWildcardExpanderHandler(null);      }    }  }}  }
class C{  public static Response createBindingResponse(Request request,TransportAddress mappedAddress) throws IllegalArgumentException {  Response bindingResponse=new Response();  bindingResponse.setMessageType(Message.BINDING_SUCCESS_RESPONSE);  XorMappedAddressAttribute xorMappedAddressAttribute=AttributeFactory.createXorMappedAddressAttribute(mappedAddress,request.getTransactionID());  bindingResponse.putAttribute(xorMappedAddressAttribute);  return bindingResponse;}  }
class C{  public static List<Volume> queryVolumesByIterativeQuery(DbClient dbClient,List<URI> volumeURIs){  List<Volume> volumes=new ArrayList<Volume>();  @SuppressWarnings("unchecked") Iterator<Volume> volumeIterator=dbClient.queryIterativeObjects(Volume.class,volumeURIs);  while (volumeIterator.hasNext()) {    volumes.add(volumeIterator.next());  }  return volumes;}  }
class C{  public LocalDate(int year,int monthOfYear,int dayOfMonth){  this(year,monthOfYear,dayOfMonth,ISOChronology.getInstanceUTC());}  }
class C{  public static char[] sort(String s){  char[] str=new char[s.length()];  for (int i=0; i < str.length; i++)   str[i]=s.charAt(i);  for (int i=0; i < str.length - 1; i++) {    char min=str[i];    int minIndex=i;    for (int j=i + 1; j < str.length; j++) {      if (min > str[j]) {        min=str[j];        minIndex=j;      }    }    if (minIndex != i) {      str[minIndex]=str[i];      str[i]=min;    }  }  return str;}  }
class C{  public void truncate(int newSize){  if (size <= newSize)   return;  for (int i=newSize; i < size; i++)   items[i]=null;  size=newSize;}  }
class C{  private String canonicalize(SortedMap<String,String> sortedParamMap){  if (sortedParamMap.isEmpty()) {    return "";  }  StringBuffer buffer=new StringBuffer();  Iterator<Map.Entry<String,String>> iter=sortedParamMap.entrySet().iterator();  while (iter.hasNext()) {    Map.Entry<String,String> kvpair=iter.next();    buffer.append(percentEncodeRfc3986(kvpair.getKey()));    buffer.append("=");    buffer.append(percentEncodeRfc3986(kvpair.getValue()));    if (iter.hasNext()) {      buffer.append("&");    }  }  String cannoical=buffer.toString();  return cannoical;}  }
class C{  protected double[] gatherCoords(OMGeometry omg,double[] current){  if (omg instanceof OMList<?>) {    OMList<OMGeometry> oml=(OMList<OMGeometry>)omg;    for (    OMGeometry omgy : oml) {      current=gatherCoords(omgy,current);    }    return current;  } else   if (omg.getRenderType() == OMGraphic.RENDERTYPE_LATLON) {    if (omg instanceof OMPoly) {      current=combineCoords(current,ProjMath.arrayRadToDeg(((OMPoly)omg).getLatLonArrayCopy()));    } else     if (omg instanceof OMLine) {      current=combineCoords(current,((OMLine)omg).getLL());    } else     if (omg instanceof OMPoint) {      OMPoint omp=(OMPoint)omg;      double lat=omp.getLat();      double lon=omp.getLon();      current=combineCoords(current,new double[]{lat,lon});    }  }  return current;}  }
class C{  public static void closeQuietly(Closeable c){  if (c != null) {    try {      c.close();    } catch (    IOException ignored) {    }  }}  }
class C{  public JSONArray put(Object value){  this.myArrayList.add(value);  return this;}  }
class C{  public static TypeReference findOrCreate(String tn){  return findOrCreate(BootstrapClassLoader.getBootstrapClassLoader(),Atom.findOrCreateAsciiAtom(tn));}  }
class C{  public void addAll(List<LineageRecord> rawLineageRecords){  for (  LineageRecord lr : rawLineageRecords) {    DatasetPath datasetPath=PathAnalyzer.analyze(lr.getFullObjectName());    if (datasetPath != null) {      lr.updateDataset(datasetPath);      addToMap(lr);    }  }}  }
class C{  public SkuAttributesView(final String id,final ProductSku sku,final boolean productOnly){  super(id);  final String selectedLocale=getLocale().getLanguage();  final long productTypeId=sku.getProduct().getProducttype().getProducttypeId();  if (productOnly) {    attributesToShow=adapt(productServiceFacade.getProductAttributes(selectedLocale,sku.getProduct().getProductId(),0L,productTypeId));  } else {    attributesToShow=adapt(productServiceFacade.getProductAttributes(selectedLocale,sku.getProduct().getProductId(),sku.getSkuId(),productTypeId));  }}  }
class C{  private void sort(){  if (!mSorted) {    Collections.sort(mItems);    mSorted=true;  }}  }
class C{  protected ClassNode buildName(AST node){  if (isType(TYPE,node)) {    node=node.getFirstChild();  }  ClassNode answer=null;  if (isType(DOT,node) || isType(OPTIONAL_DOT,node)) {    answer=ClassHelper.make(qualifiedName(node));  } else   if (isPrimitiveTypeLiteral(node)) {    answer=ClassHelper.make(node.getText());  } else   if (isType(INDEX_OP,node) || isType(ARRAY_DECLARATOR,node)) {    AST child=node.getFirstChild();    answer=buildName(child).makeArray();    configureAST(answer,node);    return answer;  } else {    String identifier=node.getText();    answer=ClassHelper.make(identifier);  }  AST nextSibling=node.getNextSibling();  if (isType(INDEX_OP,nextSibling) || isType(ARRAY_DECLARATOR,node)) {    answer=answer.makeArray();    configureAST(answer,node);    return answer;  } else {    configureAST(answer,node);    return answer;  }}  }
class C{  public Proposal(String replacementString,int replacementOffset,int replacementLength,int cursorPosition){  this(replacementString,replacementOffset,replacementLength,cursorPosition,null,null,null,null);}  }
class C{  public String toString(){  TreeMap<String,String> map=new TreeMap<String,String>(hash);  return map.toString();}  }
class C{  private String fetch() throws IOException {  return this.token.method("POST").header("Content-Type","application/x-www-form-urlencoded;charset=UTF-8").header("Authorization",String.format("Basic %s",DatatypeConverter.printBase64Binary(new Utf8String(String.format("%s:%s",this.app,this.key)).bytes()))).fetch().as(RestResponse.class).assertStatus(HttpURLConnection.HTTP_OK).as(JsonResponse.class).json().readObject().getString(PsTwitter.ACCESS_TOKEN);}  }
class C{  public static String removeLastWord(String string){  String word=string;  boolean reachedWord=false;  for (int i=word.length() - 1; i >= 0; i--) {    if (word.charAt(i) == ' ') {      if (reachedWord) {        break;      } else {        word=word.substring(0,i);      }    } else {      if (!reachedWord) {        reachedWord=true;      }      word=word.substring(0,i);    }  }  return word;}  }
class C{  public RaftParameters withSyncSnapshotBlockSize(int size){  this.snapshotBlockSize=size;  return this;}  }
class C{  public void text(float num,float x,float y){  g.text(num,x,y);}  }
class C{  @Override public void updateRowId(int columnIndex,RowId x) throws SQLException {  throw unsupported("rowId");}  }
class C{  public static SignedMarkRevocationList parse(List<String> lines){  ImmutableMap.Builder<String,DateTime> revokes=new ImmutableMap.Builder<>();  List<String> firstLine=Splitter.on(',').splitToList(lines.get(0));  checkArgument(firstLine.size() == 2,String.format("Line 1: Expected 2 elements, found %d",firstLine.size()));  Integer version=Integer.valueOf(firstLine.get(0));  checkArgument(version == 1,String.format("Line 1: Expected version 1, found %d",version));  DateTime creationTime=DateTime.parse(firstLine.get(1)).withZone(UTC);  List<String> secondLine=Splitter.on(',').splitToList(lines.get(1));  checkArgument(secondLine.size() == 2,String.format("Line 2: Expected 2 elements, found %d",secondLine.size()));  checkArgument("smd-id".equals(secondLine.get(0)),String.format("Line 2: Expected header \"smd-id\", found \"%s\"",secondLine.get(0)));  checkArgument("insertion-datetime".equals(secondLine.get(1)),String.format("Line 2: Expected header \"insertion-datetime\", found \"%s\"",secondLine.get(1)));  for (int i=2; i < lines.size(); i++) {    List<String> currentLine=Splitter.on(',').splitToList(lines.get(i));    checkArgument(currentLine.size() == 2,String.format("Line %d: Expected 2 elements, found %d",i + 1,currentLine.size()));    String smdId=currentLine.get(0);    DateTime revokedTime=DateTime.parse(currentLine.get(1));    revokes.put(smdId,revokedTime);  }  return SignedMarkRevocationList.create(creationTime,revokes.build());}  }
class C{  protected String doIt() throws Exception {  log.info("R_MailText_ID=" + mailTextId);  mailText=new MMailText(getCtx(),mailTextId,get_TrxName());  if (mailText.getR_MailText_ID() == 0)   throw new Exception("@R_MailText_ID@=" + mailTextId + " @NotFound@ ");  client=MClient.get(getCtx());  if (client.getAD_Client_ID() == 0)   throw new Exception(" @AD_Client_ID@  @NotFound@ ");  if (client.getSMTPHost() == null || client.getSMTPHost().length() == 0)   throw new Exception("@SMTPHost@  @NotFound@ ");  long start=System.currentTimeMillis();  if (bPartnerId > 0) {    employee=new MBPartner(getCtx(),bPartnerId,get_TrxName());    if (employee == null)     throw new Exception("@C_BPartner_ID@=" + bPartnerId + " @NotFound@");    sendIndividualMail(bPartnerId,null);  } else   sendBPGroup();  log.fine("From " + employee);  return "@Created@=" + m_counter + ", @Errors@="+ m_errors+ " - "+ (System.currentTimeMillis() - start)+ "ms";}  }
class C{  NotificationChannel(String channelName,KTextEdit channel,boolean blackList,String defaultTypes){  name=channelName;  this.channel=channel;  if (blackList) {    eventTypes=EnumSet.allOf(NotificationType.class);  } else {    eventTypes=EnumSet.noneOf(NotificationType.class);  }  WtWindowManager wm=WtWindowManager.getInstance();  String value=wm.getProperty("ui.channel." + name,defaultTypes);  for (  String typeString : value.split(",")) {    if ("".equals(typeString)) {      continue;    }    try {      NotificationType type=NotificationType.valueOf(typeString);      setTypeFiltering(type,!blackList);    } catch (    RuntimeException e) {      logger.error("Unrecognized notification type '" + typeString + "'",e);    }  }}  }
class C{  public void deleteHostStorageDomain(String systemObjectId,String hsdObjectId,String model) throws Exception {  InputStream responseStream=null;  try {    Map<String,Object> attributeMap=new HashMap<String,Object>();    StorageArray array=new StorageArray(systemObjectId);    Delete deleteOp=new Delete(HDSConstants.HOST_STORAGE_DOMAIN);    attributeMap.put(HDSConstants.STORAGEARRAY,array);    attributeMap.put(HDSConstants.DELETE,deleteOp);    attributeMap.put(HDSConstants.MODEL,model);    HostStorageDomain inputHsd=new HostStorageDomain(hsdObjectId);    attributeMap.put(HDSConstants.HOST_STORAGE_DOMAIN,inputHsd);    String deleteHSDFromSystemQuery=InputXMLGenerationClient.getInputXMLString(HDSConstants.DELETE_HSD_FROM_SYSTEM_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);    log.info("Query to delete HostStorageDomain: {}",deleteHSDFromSystemQuery);    URI endpointURI=hdsApiClient.getBaseURI();    ClientResponse response=hdsApiClient.post(endpointURI,deleteHSDFromSystemQuery);    if (HttpStatus.SC_OK == response.getStatus()) {      responseStream=response.getEntityInputStream();      JavaResult javaResult=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.SMOOKS_CONFIG_FILE);      verifyErrorPayload(javaResult);      log.info("Deleted HSD {} from system {}",hsdObjectId,systemObjectId);    } else {      throw HDSException.exceptions.invalidResponseFromHDS(String.format("Not able to delete HostStorageDomain due to invalid response %1$s from server",response.getStatus()));    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("IOException occurred while closing the response stream");      }    }  }}  }
class C{  public int parseInt(String localeFormattedInteger){  return Integer.parseInt(localeFormattedInteger);}  }
class C{  public static void invokeMethod(String className,String methodName,String[] args){  try {    Class.forName(className).getMethod(methodName,new Class[]{String[].class}).invoke(null,new Object[]{args});  } catch (  Exception e) {    InternalError error=new InternalError("Failed to invoke method: " + methodName);    error.initCause(e);    throw error;  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:19.862 -0500",hash_original_method="5E2755BFE298194FA4E39DBC872CF6D4",hash_generated_method="CC06C753E8140A21D9D985E65F2F5230") public String substring(int start,int end){  char[] buf=new char[end - start];  getChars(start,end,buf,0);  return new String(buf);}  }
class C{  public void addLayoutComponent(final String name,final Component child){  if (name == null) {    throw new IllegalArgumentException("name not specified");  }  childMap.put(name,child);}  }
class C{  private int[] readCharset(final int charset,final int nGlyphs,final FontData fontDataAsObject,final byte[] fontDataAsArray){  final boolean isByteArray=fontDataAsArray != null;  final int[] glyphNames;  int i, j;  if (debugFont) {    System.out.println("charset=" + charset);  }  if (hasCIDToGIDMap || (isCIDFont && charset > 3000)) {    glyphNames=new int[nGlyphs];    glyphNames[0]=0;    for (i=1; i < nGlyphs; ++i) {      glyphNames[i]=i;    }  } else   if (charset == 0) {    glyphNames=ISOAdobeCharset;  } else   if (charset == 1) {    glyphNames=ExpertCharset;  } else   if (charset == 2) {    glyphNames=ExpertSubCharset;  } else {    glyphNames=new int[nGlyphs + 1];    glyphNames[0]=0;    int top=charset;    final int charsetFormat;    if (isByteArray) {      charsetFormat=fontDataAsArray[top++] & 0xff;    } else {      charsetFormat=fontDataAsObject.getByte(top++) & 0xff;    }    if (debugFont) {      System.out.println("charsetFormat=" + charsetFormat);    }    if (charsetFormat == 0) {      for (i=1; i < nGlyphs; ++i) {        if (isByteArray) {          glyphNames[i]=getWord(fontDataAsArray,top,2);        } else {          glyphNames[i]=getWord(fontDataAsObject,top,2);        }        top+=2;      }    } else     if (charsetFormat == 1) {      i=1;      int c, nLeft;      while (i < nGlyphs) {        if (isByteArray) {          c=getWord(fontDataAsArray,top,2);        } else {          c=getWord(fontDataAsObject,top,2);        }        top+=2;        if (isByteArray) {          nLeft=fontDataAsArray[top++] & 0xff;        } else {          nLeft=fontDataAsObject.getByte(top++) & 0xff;        }        for (j=0; j <= nLeft; ++j) {          glyphNames[i++]=c++;        }      }    } else     if (charsetFormat == 2) {      i=1;      int c, nLeft;      while (i < nGlyphs) {        if (isByteArray) {          c=getWord(fontDataAsArray,top,2);        } else {          c=getWord(fontDataAsObject,top,2);        }        top+=2;        if (isByteArray) {          nLeft=getWord(fontDataAsArray,top,2);        } else {          nLeft=getWord(fontDataAsObject,top,2);        }        top+=2;        for (j=0; j <= nLeft; ++j) {          glyphNames[i++]=c++;        }      }    }  }  return glyphNames;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void addBatch(String sql) throws SQLException {  try {    debugCodeCall("addBatch",sql);    checkClosed();    sql=JdbcConnection.translateSQL(sql,escapeProcessing);    if (batchCommands == null) {      batchCommands=New.arrayList();    }    batchCommands.add(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void saveContactList(List<EaseUser> contactList){  DemoDBManager.getInstance().saveContactList(contactList);}  }
class C{  @Ignore @Test public void testInfiniteLoops() throws IOException {  checkIfMuted(InfiniteLoops.class.getCanonicalName(),"This should not be printed");}  }
class C{  public int next(){  int next=_currentNode;  int pos=--m_ancestorsPos;  _currentNode=(pos >= 0) ? m_ancestors[m_ancestorsPos] : DTM.NULL;  return returnNode(next);}  }
class C{  public boolean partial(){  return partial;}  }
class C{  public BerInputStream(InputStream in,int initialSize) throws IOException {  this.in=in;  buffer=new byte[initialSize];  next();  if (length != INDEFINIT_LENGTH) {    if (buffer.length < (length + offset)) {      byte[] newBuffer=new byte[length + offset];      System.arraycopy(buffer,0,newBuffer,0,offset);      buffer=newBuffer;    }  } else {    isIndefinedLength=true;    throw new ASN1Exception("Decoding indefinite length encoding is not supported");  }}  }
class C{  public BasicBlock firstBasicBlockInCodeOrder(){  return cfg.firstInCodeOrder();}  }
class C{  @Override public void close() throws IOException {  in.close();}  }
class C{  public EmbeddedActiveMQResource(String filename){  if (filename == null) {    throw new IllegalArgumentException("ActiveMQServer configuration file name cannot be null");  }  FileDeploymentManager deploymentManager=new FileDeploymentManager(filename);  FileConfiguration config=new FileConfiguration();  deploymentManager.addDeployable(config);  try {    deploymentManager.readConfiguration();  } catch (  Exception ex) {    throw new EmbeddedActiveMQResourceException(String.format("Failed to read configuration file %s",filename),ex);  }  this.configuration=config;  init();}  }
class C{  public ShoppingCart(Delegator delegator,String productStoreId,String webSiteId,Locale locale,String currencyUom){  this(delegator,productStoreId,webSiteId,locale,currencyUom,null,null);}  }
class C{  @Override protected void configureCurrentHandlerHook(int dialogType){  super.configureCurrentHandlerHook(dialogType);  if (m_CurrentHandler != null) {    if (getSelectedFile() != null)     ((FileBasedEvaluationStatisticsHandler)m_CurrentHandler).setFile(getSelectedFile());  }}  }
class C{  public SolutionUser findSolutionUser(String tenantName,String username) throws Exception {  return getService().findSolutionUser(tenantName,username,this.getServiceContext());}  }
class C{  public RenderableImageProducer(RenderableImage rdblImage,RenderContext rc){  this.rdblImage=rdblImage;  this.rc=rc;}  }
class C{  private void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {  in.defaultReadObject();  dataUpdated(this);}  }
class C{  protected void doHeartBeat(){  frameCount++;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:43.433 -0500",hash_original_method="9C5089EA8774478643AAED9197A2D229",hash_generated_method="1B419A4432CD72352E4A475FF0C7FEE9") public SIPMessage parseSIPMessage(byte[] msgBuffer) throws ParseException {  if (msgBuffer == null || msgBuffer.length == 0)   return null;  int i=0;  try {    while (msgBuffer[i] < 0x20)     i++;  } catch (  ArrayIndexOutOfBoundsException e) {    return null;  }  String currentLine=null;  String currentHeader=null;  boolean isFirstLine=true;  SIPMessage message=null;  do {    int lineStart=i;    try {      while (msgBuffer[i] != '\r' && msgBuffer[i] != '\n')       i++;    } catch (    ArrayIndexOutOfBoundsException e) {      break;    }    int lineLength=i - lineStart;    try {      currentLine=new String(msgBuffer,lineStart,lineLength,"UTF-8");    } catch (    UnsupportedEncodingException e) {      throw new ParseException("Bad message encoding!",0);    }    currentLine=trimEndOfLine(currentLine);    if (currentLine.length() == 0) {      if (currentHeader != null && message != null) {        processHeader(currentHeader,message);      }    } else {      if (isFirstLine) {        message=processFirstLine(currentLine);      } else {        char firstChar=currentLine.charAt(0);        if (firstChar == '\t' || firstChar == ' ') {          if (currentHeader == null)           throw new ParseException("Bad header continuation.",0);          currentHeader+=currentLine.substring(1);        } else {          if (currentHeader != null && message != null) {            processHeader(currentHeader,message);          }          currentHeader=currentLine;        }      }    }    if (msgBuffer[i] == '\r' && msgBuffer.length > i + 1 && msgBuffer[i + 1] == '\n')     i++;    i++;    isFirstLine=false;  } while (currentLine.length() > 0);  if (message == null)   throw new ParseException("Bad message",0);  message.setSize(i);  if (readBody && message.getContentLength() != null && message.getContentLength().getContentLength() != 0) {    int bodyLength=msgBuffer.length - i;    byte[] body=new byte[bodyLength];    System.arraycopy(msgBuffer,i,body,0,bodyLength);    message.setMessageContent(body,computeContentLengthFromMessage,message.getContentLength().getContentLength());  }  return message;}  }
class C{  public static String format(int numFracDigits,float f,String col){  String res=padd + numFormat[numFracDigits].format(f);  return res.substring(res.length() - col.length());}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream temp=new DerOutputStream();  DerOutputStream bytes=new DerOutputStream();  temp.putInteger(BigInteger.valueOf(pvno));  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),temp);  temp=new DerOutputStream();  temp.putInteger(BigInteger.valueOf(msgType));  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),temp);  if (cTime != null) {    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x02),cTime.asn1Encode());  }  if (cuSec != null) {    temp=new DerOutputStream();    temp.putInteger(BigInteger.valueOf(cuSec.intValue()));    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x03),temp);  }  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x04),sTime.asn1Encode());  temp=new DerOutputStream();  temp.putInteger(BigInteger.valueOf(suSec.intValue()));  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x05),temp);  temp=new DerOutputStream();  temp.putInteger(BigInteger.valueOf(errorCode));  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x06),temp);  if (cname != null) {    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x07),cname.getRealm().asn1Encode());    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x08),cname.asn1Encode());  }  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x09),sname.getRealm().asn1Encode());  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x0A),sname.asn1Encode());  if (eText != null) {    temp=new DerOutputStream();    temp.putDerValue(new KerberosString(eText).toDerValue());    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x0B),temp);  }  if (eData != null) {    temp=new DerOutputStream();    temp.putOctetString(eData);    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x0C),temp);  }  if (eCksum != null) {    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x0D),eCksum.asn1Encode());  }  temp=new DerOutputStream();  temp.write(DerValue.tag_Sequence,bytes);  bytes=new DerOutputStream();  bytes.write(DerValue.createTag(DerValue.TAG_APPLICATION,true,(byte)0x1E),temp);  return bytes.toByteArray();}  }
class C{  public static int intersectRayAar(float originX,float originY,float dirX,float dirY,float minX,float minY,float maxX,float maxY,Vector2f result){  float invDirX=1.0f / dirX, invDirY=1.0f / dirY;  float tNear, tFar, tymin, tymax;  if (invDirX >= 0.0f) {    tNear=(minX - originX) * invDirX;    tFar=(maxX - originX) * invDirX;  } else {    tNear=(maxX - originX) * invDirX;    tFar=(minX - originX) * invDirX;  }  if (invDirY >= 0.0f) {    tymin=(minY - originY) * invDirY;    tymax=(maxY - originY) * invDirY;  } else {    tymin=(maxY - originY) * invDirY;    tymax=(minY - originY) * invDirY;  }  if (tNear > tymax || tymin > tFar)   return OUTSIDE;  tNear=tymin > tNear || Float.isNaN(tNear) ? tymin : tNear;  tFar=tymax < tFar || Float.isNaN(tFar) ? tymax : tFar;  int side=-1;  if (tNear < tFar && tFar >= 0.0f) {    float px=originX + tNear * dirX;    float py=originY + tNear * dirY;    result.x=tNear;    result.y=tFar;    float daX=Math.abs(px - minX);    float daY=Math.abs(py - minY);    float dbX=Math.abs(px - maxX);    float dbY=Math.abs(py - maxY);    side=0;    float min=daX;    if (daY < min) {      min=daY;      side=1;    }    if (dbX < min) {      min=dbX;      side=2;    }    if (dbY < min)     side=3;  }  return side;}  }
class C{  public TvShowEpisodeToXbmcNfoConnector(){  actors=new ArrayList<>();  director=new ArrayList<>();  credits=new ArrayList<>();  tags=new ArrayList<>();  unsupportedElements=new ArrayList<>();}  }
class C{  public HttpClient(URL url){  this.url=url.toExternalForm();}  }
class C{  public DailyTimeIntervalTriggerImpl(String name,String group,String jobName,String jobGroup,Date startTime,Date endTime,TimeOfDay startTimeOfDay,TimeOfDay endTimeOfDay,IntervalUnit intervalUnit,int repeatInterval){  super(name,group,jobName,jobGroup);  setStartTime(startTime);  setEndTime(endTime);  setRepeatIntervalUnit(intervalUnit);  setRepeatInterval(repeatInterval);  setStartTimeOfDay(startTimeOfDay);  setEndTimeOfDay(endTimeOfDay);}  }
class C{  public void unexpectedPCData(String systemID,int lineNr,String parentElementName) throws XMLValidationException {  XMLUtil.errorUnexpectedPCData(systemID,lineNr,parentElementName);}  }
class C{  public void shouldHaveExitValue(int expectedExitValue){  if (getExitValue() != expectedExitValue) {    reportDiagnosticSummary();    throw new RuntimeException("Expected to get exit value of [" + expectedExitValue + "]\n");  }}  }
class C{  public boolean hasAddress(){  return super.hasAttribute(ADDRESS);}  }
class C{  public void addTextLabel(double x,String text){  addXTextLabel(x,text);}  }
class C{  public boolean lessThan(DMatch it){  return distance < it.distance;}  }
class C{  public void send(CoordinatorStreamMessage message){  log.debug("Sending {}",message);  try {    String source=message.getSource();    byte[] key=keySerde.toBytes(Arrays.asList(message.getKeyArray()));    byte[] value=null;    if (!message.isDelete()) {      value=messageSerde.toBytes(message.getMessageMap());    }    OutgoingMessageEnvelope envelope=new OutgoingMessageEnvelope(systemStream,Integer.valueOf(0),key,value);    systemProducer.send(source,envelope);  } catch (  Exception e) {    throw new SamzaException(e);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public MultiStopsGradient(){  super("Multi-stops Gradient");  add(new GradientLabel("Gradients"));  setSize(320,43);  setLocationRelativeTo(null);}  }
class C{  protected void requireVariableValues(String... names){  StringBuilder missing=new StringBuilder();  for (  String name : names) {    if (!hasVariableValue(name)) {      if (missing.length() > 0) {        missing.append(", ");      }      missing.append(name);    }  }  if (missing.length() > 0) {    throw new CommandException("Missing required value(s): " + missing);  }}  }
class C{  public static QuerySolutionMap asQuerySolutionMap(Binding binding){  QuerySolutionMap map=new QuerySolutionMap();  Iterator<Var> vars=binding.vars();  while (vars.hasNext()) {    Var var=vars.next();    Node node=binding.get(var);    if (node != null) {      map.add(var.getName(),dummyModel.asRDFNode(node));    }  }  return map;}  }
class C{  public byte[] toEntropy(List<String> words) throws MnemonicException.MnemonicLengthException, MnemonicException.MnemonicWordException, MnemonicException.MnemonicChecksumException {  if (words.size() % 3 > 0)   throw new MnemonicException.MnemonicLengthException("Word list size must be multiple of three words.");  int concatLenBits=words.size() * 11;  boolean[] concatBits=new boolean[concatLenBits];  int wordindex=0;  for (  String word : words) {    int ndx=Collections.binarySearch(this.wordList,word);    if (ndx < 0)     throw new MnemonicException.MnemonicWordException(word);    for (int ii=0; ii < 11; ++ii)     concatBits[(wordindex * 11) + ii]=(ndx & (1 << (10 - ii))) != 0;    ++wordindex;  }  int checksumLengthBits=concatLenBits / 33;  int entropyLengthBits=concatLenBits - checksumLengthBits;  byte[] entropy=new byte[entropyLengthBits / 8];  for (int ii=0; ii < entropy.length; ++ii)   for (int jj=0; jj < 8; ++jj)   if (concatBits[(ii * 8) + jj])   entropy[ii]|=1 << (7 - jj);  byte[] hash=Sha256Hash.create(entropy).getBytes();  boolean[] hashBits=bytesToBits(hash);  for (int i=0; i < checksumLengthBits; ++i)   if (concatBits[entropyLengthBits + i] != hashBits[i])   throw new MnemonicException.MnemonicChecksumException();  return entropy;}  }
class C{  private int parseFuzziness(State state){  char slopText[]=new char[state.length];  int slopLength=0;  if (state.data[state.index] == '~') {    while (state.index < state.length) {      state.index++;      if (state.index < state.length) {        if (tokenFinished(state)) {          break;        }        slopText[slopLength]=state.data[state.index];        slopLength++;      }    }    int fuzziness=0;    try {      fuzziness=Integer.parseInt(new String(slopText,0,slopLength));    } catch (    NumberFormatException e) {    }    if (fuzziness < 0) {      fuzziness=0;    }    return fuzziness;  }  return 0;}  }
class C{  private Image cacheAnnotationImage(final WorkflowAnnotation anno,final int cacheId){  Rectangle2D loc=anno.getLocation();  Dimension size=new Dimension((int)loc.getWidth(),(int)loc.getHeight());  pane.setSize(size);  pane.setText(AnnotationDrawUtils.createStyledCommentString(anno));  pane.setCaretPosition(0);  BufferedImage img=new BufferedImage((int)loc.getWidth(),(int)loc.getHeight(),BufferedImage.TYPE_INT_ARGB);  Graphics2D gImg=img.createGraphics();  gImg.setRenderingHints(ProcessDrawer.HI_QUALITY_HINTS);  gImg.setComposite(AlphaComposite.SrcOver);  pane.paint(gImg);  displayCache.put(anno.getId(),new WeakReference<Image>(img));  cachedID.put(anno.getId(),cacheId);  return img;}  }
class C{  private Session validateAndGetSession(QualifiedName name){  checkNotNull(name,"name cannot be null");  checkState(name.isViewDefinition(),"name %s is not for a view",name);  if (!Iterables.contains(SUPPORTED_SOURCES,name.getCatalogName())) {    throw new MetacatNotSupportedException(String.format("This catalog (%s) doesn't support views",name.getCatalogName()));  }  return sessionProvider.getSession(name);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static double normalize(double angle){  while (angle > Math.PI)   angle-=PI_TIMES_2;  while (angle <= -Math.PI)   angle+=PI_TIMES_2;  return angle;}  }
class C{  public synchronized void syncNotify(){  notify();}  }
class C{  public int length(int integer){  return this.thrus[integer] - this.froms[integer];}  }
class C{  public void clearValues(){  valueMap.clear();}  }
class C{  @DSSink({DSSinkKind.SYSTEM_SETTINGS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:26.733 -0500",hash_original_method="F3233E69134CF9902E31FB14516EC03E",hash_generated_method="3BDA4F3791893CE28474E7EF4881A9B8") public void reqAddApnContext(ApnContext apnContext){  Message response=sendMessageSynchronously(REQ_ADD_APNCONTEXT,apnContext);  if (DBG)   log("reqAddApnContext");}  }
class C{  public void rebaseEdit(ChangeEdit edit,PatchSet current) throws AuthException, ResourceConflictException, InvalidChangeOperationException, IOException {  if (!currentUser.get().isIdentifiedUser()) {    throw new AuthException("Authentication required");  }  Change change=edit.getChange();  IdentifiedUser me=currentUser.get().asIdentifiedUser();  String refName=RefNames.refsEdit(me.getAccountId(),change.getId(),current.getId());  try (Repository repo=gitManager.openRepository(change.getProject());RevWalk rw=new RevWalk(repo);ObjectInserter inserter=repo.newObjectInserter()){    BatchRefUpdate ru=repo.getRefDatabase().newBatchUpdate();    RevCommit editCommit=edit.getEditCommit();    if (editCommit.getParentCount() == 0) {      throw new InvalidChangeOperationException("Rebase edit against root commit not supported");    }    RevCommit tip=rw.parseCommit(ObjectId.fromString(current.getRevision().get()));    ThreeWayMerger m=MergeStrategy.RESOLVE.newMerger(repo,true);    m.setObjectInserter(inserter);    m.setBase(ObjectId.fromString(edit.getBasePatchSet().getRevision().get()));    if (m.merge(tip,editCommit)) {      ObjectId tree=m.getResultTreeId();      CommitBuilder commit=new CommitBuilder();      commit.setTreeId(tree);      for (int i=0; i < tip.getParentCount(); i++) {        commit.addParentId(tip.getParent(i));      }      commit.setAuthor(editCommit.getAuthorIdent());      commit.setCommitter(new PersonIdent(editCommit.getCommitterIdent(),TimeUtil.nowTs()));      commit.setMessage(editCommit.getFullMessage());      ObjectId newEdit=inserter.insert(commit);      inserter.flush();      ru.addCommand(new ReceiveCommand(ObjectId.zeroId(),newEdit,refName));      ru.addCommand(new ReceiveCommand(edit.getRef().getObjectId(),ObjectId.zeroId(),edit.getRefName()));      ru.execute(rw,NullProgressMonitor.INSTANCE);      for (      ReceiveCommand cmd : ru.getCommands()) {        if (cmd.getResult() != ReceiveCommand.Result.OK) {          throw new IOException("failed: " + cmd);        }      }    } else {      throw new ResourceConflictException("merge conflict");    }  } }  }
class C{  public void initialize(){  final ActorSystem actorSystem=actorSystemManager.retrieveActorSystem();  ClusterSingletonManagerSettings settings=ClusterSingletonManagerSettings.create(actorSystem);  actorSystem.actorOf(ClusterSingletonManager.props(Props.create(AkkaRedriverTask.class,this.noOfRedriverWorkers),PoisonPill.getInstance(),settings),"redriverActor");  ClusterSingletonProxySettings proxySettings=ClusterSingletonProxySettings.create(actorSystem);  this.redriverActorProxy=actorSystem.actorOf(ClusterSingletonProxy.props("/user/redriverActor",proxySettings),"redriverActorProxy");}  }
class C{  protected TraceCondition_Impl(){  super();}  }
class C{  private void addPropertiesToModel(List localProperties,Item parent){  for (Iterator iter=localProperties.iterator(); iter.hasNext(); ) {    Property property=(Property)iter.next();    Item propertyItem=new Item(property,parent);    model.add(propertyItem);    Property[] subProperties=property.getSubProperties();    if (subProperties != null && subProperties.length > 0)     addPropertiesToModel(Arrays.asList(subProperties),propertyItem);  }}  }
class C{  public SQLIntegrityConstraintViolationException(String reason){  super(reason,null,0);}  }
class C{  public void clickByImage(String targetImgPath){  Point2D coords=getCoords(takeScreenshot(),targetImgPath);  if ((coords.getX() >= 0) && (coords.getY() >= 0)) {    driver.tap(1,(int)coords.getX(),(int)coords.getY(),100);  } else {    throw new ElementNotVisibleException("Element not found - " + targetImgPath);  }}  }
class C{  @Override public final int hashCode(){  long firsthash=Double.doubleToLongBits(first);  firsthash=firsthash ^ (firsthash >> 32);  long secondhash=Double.doubleToLongBits(second);  secondhash=secondhash ^ (secondhash >> 32);  return (int)(firsthash * 2654435761L + secondhash);}  }
class C{  public boolean removeNode(int node){  Table nodeTable=getNodeTable();  if (nodeTable.isValidRow(node)) {    int id=getInDegree(node);    if (id > 0) {      int[] links=(int[])m_links.get(node,INLINKS);      for (int i=id; --i >= 0; )       removeEdge(links[i]);    }    int od=getOutDegree(node);    if (od > 0) {      int[] links=(int[])m_links.get(node,OUTLINKS);      for (int i=od; --i >= 0; )       removeEdge(links[i]);    }  }  return nodeTable.removeRow(node);}  }
class C{  public void evaluateCrossValidation(int folds,Random rand){  if (folds < 2)   throw new UntrainedModelException("Model could not be evaluated because " + folds + " is < 2, and not valid for cross validation");  List<ClassificationDataSet> lcds=dataSet.cvSet(folds,rand);  evaluateCrossValidation(lcds);}  }
class C{  private void markSubroutineWalk(final BitSet sub,final int index,final BitSet anyvisited){  if (LOGGING) {    log("markSubroutineWalk: sub=" + sub + " index="+ index);  }  markSubroutineWalkDFS(sub,index,anyvisited);  boolean loop=true;  while (loop) {    loop=false;    for (Iterator<TryCatchBlockNode> it=tryCatchBlocks.iterator(); it.hasNext(); ) {      TryCatchBlockNode trycatch=it.next();      if (LOGGING) {        log("Scanning try/catch " + trycatch);      }      int handlerindex=instructions.indexOf(trycatch.handler);      if (sub.get(handlerindex)) {        continue;      }      int startindex=instructions.indexOf(trycatch.start);      int endindex=instructions.indexOf(trycatch.end);      int nextbit=sub.nextSetBit(startindex);      if (nextbit != -1 && nextbit < endindex) {        if (LOGGING) {          log("Adding exception handler: " + startindex + '-'+ endindex+ " due to "+ nextbit+ " handler "+ handlerindex);        }        markSubroutineWalkDFS(sub,handlerindex,anyvisited);        loop=true;      }    }  }}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (cv != null) {    return cv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  public boolean isActive(){  return active;}  }
class C{  private boolean isLiveAtDef(Register r1,Register r2,LiveAnalysis live){  for (Iterator<LiveIntervalElement> e=live.iterateLiveIntervals(r1); e.hasNext(); ) {    LiveIntervalElement elem=e.next();    BasicBlock bb=elem.getBasicBlock();    Instruction begin=(elem.getBegin() == null) ? bb.firstInstruction() : elem.getBegin();    Instruction end=(elem.getEnd() == null) ? bb.lastInstruction() : elem.getEnd();    int low=instNumbers.get(begin);    int high=instNumbers.get(end);    for (Enumeration<RegisterOperand> defs=DefUse.defs(r2); defs.hasMoreElements(); ) {      Operand def=defs.nextElement();      int n=instNumbers.get(def.instruction);      if (n >= low && n < high) {        return true;      }    }  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  DShowTVPlayer.setDscalerMode(DShowTVPlayer.getDscalerCode(getString(stack)));  return null;}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeHeader(v)) {      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  public static boolean equals(byte[] array1,byte[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public static double roundDouble(double value,int afterDecimalPoint){  double mask=Math.pow(10.0,(double)afterDecimalPoint);  return (double)(Math.round(value * mask)) / mask;}  }
class C{  public void put(E e) throws InterruptedException {  if (e == null)   throw new NullPointerException();  int c=-1;  final ReentrantLock putLock=this.putLock;  final AtomicInteger count=this.count;  putLock.lockInterruptibly();  try {    while (count.get() >= capacity) {      notFull.await();    }    enqueue(e);    c=count.getAndIncrement();    if (c + 1 < capacity)     notFull.signal();  }  finally {    putLock.unlock();  }  if (c == 0)   signalNotEmpty();}  }
class C{  public String toString(){  return getMessage();}  }
class C{  private static boolean isExternalStorageWritable(){  return Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState());}  }
class C{  public static boolean isPowerOfTwo(int value){  while ((value & 1) == 0)   value=value >> 1;  return (value == 1);}  }
class C{  public boolean equals(Object o){  if (o == null || !(o instanceof ERDEntity))   return false;  return object.equals(((ERDEntity)o).object);}  }
class C{  private void checkSupporting(List<ResourceImpl> resources) throws NotFoundException {  final Set<String> resourcesTypes=resources.stream().map(null).collect(Collectors.toSet());  for (  String resourcesType : resourcesTypes) {    if (!this.resourcesTypes.containsKey(resourcesType)) {      throw new NotFoundException(String.format("'%s' resource type is not supported",resourcesType));    }  }}  }
class C{  public DrawerBuilder withStickyFooter(@NonNull ViewGroup stickyFooter){  this.mStickyFooterView=stickyFooter;  return this;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:14.272 -0500",hash_original_method="1D5F6259D73E7678D3D06BFBE271A26B",hash_generated_method="977930B97BBB4E4BBE639EFAC3F7FF54") public boolean isEmpty(){  final Segment<K,V>[] segments=this.segments;  int[] mc=new int[segments.length];  int mcsum=0;  for (int i=0; i < segments.length; ++i) {    if (segments[i].count != 0)     return false; else     mcsum+=mc[i]=segments[i].modCount;  }  if (mcsum != 0) {    for (int i=0; i < segments.length; ++i) {      if (segments[i].count != 0 || mc[i] != segments[i].modCount)       return false;    }  }  return true;}  }
class C{  public SignatureVisitor visitClassBound(){  return this;}  }
class C{  public void reset(){  resetMappings();  notifyDataSetChanged();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatainsertdatanomodificationallowederr.class,args);}  }
class C{  public boolean hasWarnings(){  return this.warnings != null;}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  private void logPlayer(final PreparedStatement ps,final String name,final RPObject object) throws SQLException {  int age=-1;  String release="0.0";  if (object.has("age")) {    age=object.getInt("age");  }  if (object.has("release")) {    release=object.get("release");  }  ps.setDate(1,date);  ps.setString(2,name);  ps.setInt(3,age);  ps.setString(4,release);  ps.executeUpdate();}  }
class C{  private void isiDeleteSnapshot(IsilonApi isi,FileDeviceInputOutput args) throws IsilonException {  args.setFileOperation(false);  isiDeleteExports(isi,args);  isiDeleteShares(isi,args);  if (args.getSnapshotExtensions() != null && args.getSnapshotExtensions().containsKey("id")) {    isi.deleteSnapshot(args.getSnapshotExtensions().get("id"));  }}  }
class C{  <D,E extends Element>ElementMetadata<D,E> toMetadata(Schema schema,ElementKey<?,?> parent,ElementKey<D,E> key,MetadataContext context){  return new ElementMetadataImpl<D,E>(schema,this,parent,key,context);}  }
class C{  public void googleJavaFormat(){  googleJavaFormat(GoogleJavaFormat.DEFAULT_VERSION);}  }
class C{  private BlockSnapshot initSnapshot(final BlockObject blockObj,final String label,final String setLabel,final URI projectUri){  BlockSnapshot createdSnap=new BlockSnapshot();  createdSnap.setId(URIUtil.createId(BlockSnapshot.class));  createdSnap.setConsistencyGroup(blockObj.getConsistencyGroup());  createdSnap.setSourceNativeId(blockObj.getNativeId());  createdSnap.setParent(new NamedURI(blockObj.getId(),label));  createdSnap.setLabel(label);  createdSnap.setStorageController(blockObj.getStorageController());  createdSnap.setSystemType(blockObj.getSystemType());  createdSnap.setVirtualArray(blockObj.getVirtualArray());  createdSnap.setProtocol(new StringSet());  createdSnap.getProtocol().addAll(blockObj.getProtocol());  if (blockObj instanceof Volume) {    createdSnap.setProject(new NamedURI(projectUri,label));  } else   if (blockObj instanceof BlockSnapshot) {    createdSnap.setProject(new NamedURI(projectUri,label));  }  createdSnap.setSnapsetLabel(ResourceOnlyNameGenerator.removeSpecialCharsForName(setLabel,SmisConstants.MAX_SNAPSHOT_NAME_LENGTH));  return createdSnap;}  }
class C{  @Override public synchronized Restlet createInboundRoot(){  Router router=new Router(getContext());  router.attach("/entity",newFinder(EntitiesResource.class));  router.attach("/entity/{reference}",newFinder(EntityResource.class));  router.attach("/query",newFinder(SPARQLResource.class));  router.attach("/query/sparqlhtml",newFinder(SPARQLResource.class));  router.attach("/query/index",newFinder(IndexResource.class));  return router;}  }
class C{  private ConfirmDialog(JFrame p,String title,String question,boolean includeCheckbox,char defButton){  super(p,title,true);  super.setResizable(false);  useCheckbox=includeCheckbox;  setLayout(gridbag);  addQuestion(question);  setupButtons();  addInputs();  if (defButton == 'n') {    defaultButton=butNo;  } else {    defaultButton=butYes;  }  finishSetup(p);}  }
class C{  public static Bitmap createReflectionImageWithOrigin(Bitmap bitmap){  final int reflectionGap=4;  int w=bitmap.getWidth();  int h=bitmap.getHeight();  Matrix matrix=new Matrix();  matrix.preScale(1,-1);  Bitmap reflectionImage=Bitmap.createBitmap(bitmap,0,h / 2,w,h / 2,matrix,false);  Bitmap bitmapWithReflection=Bitmap.createBitmap(w,(h + h / 2),Config.ARGB_8888);  Canvas canvas=new Canvas(bitmapWithReflection);  canvas.drawBitmap(bitmap,0,0,null);  Paint deafalutPaint=new Paint();  canvas.drawRect(0,h,w,h + reflectionGap,deafalutPaint);  canvas.drawBitmap(reflectionImage,0,h + reflectionGap,null);  Paint paint=new Paint();  LinearGradient shader=new LinearGradient(0,bitmap.getHeight(),0,bitmapWithReflection.getHeight() + reflectionGap,0x70ffffff,0x00ffffff,TileMode.CLAMP);  paint.setShader(shader);  paint.setXfermode(new PorterDuffXfermode(Mode.DST_IN));  canvas.drawRect(0,h,w,bitmapWithReflection.getHeight() + reflectionGap,paint);  return bitmapWithReflection;}  }
class C{  public static byte[] readFully(InputStream is) throws IOException {  ByteArrayOutputStream baos=null;  try {    baos=new ByteArrayOutputStream();    byte[] buffer=new byte[2048];    int read=0;    while ((read=is.read(buffer)) != -1) {      baos.write(buffer,0,read);    }    return baos.toByteArray();  }  finally {    IOUtils.closeQuietly(baos);    IOUtils.closeQuietly(is);  }}  }
class C{  public void close() throws IOException {  in=-1;  closedByReader=true;}  }
class C{  private boolean matchAndwriteOneAuditLog(BufferedWriter writer,AuditLog auditlog,String keyword) throws MarshallingExcetion {  try {    AuditLogUtils.resetDesc(auditlog,resb);    if (AuditLogUtils.isKeywordContained(auditlog,keyword)) {      if (_count.getAndIncrement() > 0) {        while (!_firstWritten.get()) {          try {            Thread.sleep(1);          } catch (          InterruptedException e) {            _logger.warn("Sleep interrupted");          }        }        writer.write("," + _mapper.writeValueAsString(auditlog));      } else {        writer.write(_mapper.writeValueAsString(auditlog));        _firstWritten.set(true);      }      return true;    }    _logger.debug("{} filter out by description keyword {}",auditlog.getDescription(),keyword);    return false;  } catch (  JsonGenerationException e) {    throw new MarshallingExcetion("JSON Generation Error",e);  }catch (  JsonMappingException e) {    throw new MarshallingExcetion("JSON Mapping Error",e);  }catch (  IOException e) {    throw new MarshallingExcetion("JSON streaming failed: ",e);  }}  }
class C{  public void removeVertexAndReferences(Vertex vertex){  throwReadOnly();}  }
class C{  public int copyLandedCostFrom(MInvoiceLine otherInvoiceLine){  if (otherInvoiceLine == null)   return 0;  MLandedCost[] fromLandedCosts=otherInvoiceLine.getLandedCost(null);  int count=0;  for (int i=0; i < fromLandedCosts.length; i++) {    MLandedCost landedCost=new MLandedCost(getCtx(),0,get_TrxName());    MLandedCost fromLandedCost=fromLandedCosts[i];    PO.copyValues(fromLandedCost,landedCost,fromLandedCost.getAD_Client_ID(),fromLandedCost.getAD_Org_ID());    landedCost.setC_InvoiceLine_ID(getC_InvoiceLine_ID());    landedCost.set_ValueNoCheck("C_LandedCost_ID",I_ZERO);    if (landedCost.save(get_TrxName()))     count++;  }  if (fromLandedCosts.length != count)   log.log(Level.SEVERE,"LandedCost difference - From=" + fromLandedCosts.length + " <> Saved="+ count);  return count;}  }
class C{  public boolean enableCarbons(){  return setCarbonsEnabled(true);}  }
class C{  @Override public String[] punctuationWords(){  return pennPunctWords;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4mfPackage.IMPLEMENTED_PROJECTS__IMPLEMENTED_PROJECTS:    return ((InternalEList<?>)getImplementedProjects()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  Rule conditionalXorExpressionChaining(){  return forLeftAssociativeBinaryExpression("exprLogicalXor",String("^^"),conditionalAndExpressionChaining());}  }
class C{  private void executeDownload(State state,AndroidHttpClient client,HttpGet request) throws StopRequest, RetryDownload {  InnerState innerState=new InnerState();  byte data[]=new byte[Constants.BUFFER_SIZE];  checkPausedOrCanceled(state);  setupDestinationFile(state,innerState);  addRequestHeaders(innerState,request);  checkConnectivity(state);  mNotification.onDownloadStateChanged(IDownloaderClient.STATE_CONNECTING);  HttpResponse response=sendRequest(state,client,request);  handleExceptionalStatus(state,innerState,response);  if (Constants.LOGV) {    Log.v(Constants.TAG,"received response for " + mInfo.mUri);  }  processResponseHeaders(state,innerState,response);  InputStream entityStream=openResponseEntity(state,response);  mNotification.onDownloadStateChanged(IDownloaderClient.STATE_DOWNLOADING);  transferData(state,innerState,data,entityStream);}  }
class C{  int maxConcurrentExecutions(){  if (circuit.getSuccessThreshold() != null)   return circuit.getSuccessThreshold().denominator; else   if (circuit.getFailureThreshold() != null)   return circuit.getFailureThreshold().denominator; else   return 1;}  }
class C{  @Override public boolean equals(Object o){  return this.hashCode() == o.hashCode();}  }
class C{  private boolean bothLinksHaveSameLinkStats(Link linkA,Link linkB){  boolean bothLinksHaveSameLinkStats=true;  if (!linkA.getAllowedModes().equals(linkB.getAllowedModes())) {    bothLinksHaveSameLinkStats=false;  }  if (linkA.getFreespeed() != linkB.getFreespeed()) {    bothLinksHaveSameLinkStats=false;  }  if (linkA.getCapacity() != linkB.getCapacity()) {    bothLinksHaveSameLinkStats=false;  }  if (linkA.getNumberOfLanes() != linkB.getNumberOfLanes()) {    bothLinksHaveSameLinkStats=false;  }  return bothLinksHaveSameLinkStats;}  }
class C{  public void connect(final Server server){  service.connect(server);}  }
class C{  void init(boolean decrypting,String algorithm,byte[] key,byte[] iv) throws InvalidKeyException {  if ((key == null) || (iv == null) || (iv.length != blockSize)) {    throw new InvalidKeyException("Internal error");  }  this.iv=iv;  reset();  embeddedCipher.init(false,algorithm,key);}  }
class C{  public boolean correctArmor(StringBuffer buff){  boolean correct=true;  int maxArmorPoints=ba.getMaximumArmorPoints();  for (int loc=0; loc < ba.locations(); loc++) {    if (ba.getOArmor(loc) > maxArmorPoints) {      buff.append(printArmorLocation(loc)).append(printArmorLocProp(loc,maxArmorPoints)).append("\n");      correct=false;    }  }  return correct;}  }
class C{  static int compareParameterTypes(Class[] left,Class[] right,Class[] actual){  float leftCost=getTotalTransformationCost(actual,left);  float rightCost=getTotalTransformationCost(actual,right);  return leftCost < rightCost ? -1 : rightCost < leftCost ? 1 : 0;}  }
class C{  public TagException(Tag tag){  super(tag.toString());}  }
class C{  public T casePostcondition_(Postcondition_ object){  return null;}  }
class C{  private static boolean dependenciesSatisfied(Set<Type> dependencies,List<VariableReference> objects){  for (  Type type : dependencies) {    boolean found=false;    for (    VariableReference var : objects) {      if (var.getType().equals(type)) {        found=true;        break;      }    }    if (!found)     return false;  }  return true;}  }
class C{  @Override public void performOnBackground(final Runnable runnable){  mLogger.logDebug("Starting background task, current active count: " + mBackgroundExecutor.getActiveCount());  mBackgroundExecutor.execute(runnable);}  }
class C{  private boolean testRandom(){  int l;  boolean done=false;  fieldPolynomial=new GF2Polynomial(mDegree + 1);  l=0;  while (!done) {    l++;    fieldPolynomial.randomize();    fieldPolynomial.setBit(mDegree);    fieldPolynomial.setBit(0);    if (fieldPolynomial.isIrreducible()) {      done=true;      return done;    }  }  return done;}  }
class C{  private List<ClassInfo> loadCondigs() throws Exception {  String[] configPkgs=blade.applicationConfig().getConfigPkgs();  if (null != configPkgs && configPkgs.length > 0) {    List<ClassInfo> configs=new ArrayList<ClassInfo>(10);    for (int i=0, len=configPkgs.length; i < len; i++) {      Set<ClassInfo> configClasses=classReader.getClassByAnnotation(configPkgs[i],Component.class,false);      if (null != configClasses) {        for (        ClassInfo classInfo : configClasses) {          Class<?>[] interfaces=classInfo.getClazz().getInterfaces();          for (          Class<?> in : interfaces) {            if (in.equals(BaseConfig.class)) {              configs.add(classInfo);            }          }          if (classInfo.getClazz().getSuperclass().getName().equals("com.blade.aop.AbstractMethodInterceptor")) {            aopInterceptors.add(classInfo.newInstance());          }        }      }    }    Collections.sort(configs,orderComparator);    return configs;  }  return null;}  }
class C{  public boolean isShowA(){  return showA;}  }
class C{  public NokiaPictureMessage(byte[] bitmapData,String msg){  this(bitmapData,msg,false);}  }
class C{  public static OnUpdateClause create(String windowName,String optionalAsName){  return new OnUpdateClause(windowName,optionalAsName);}  }
class C{  public static final Criterion flagIsSet(String flag){  return new CustomFlagCriterion(flag,BooleanOperator.set());}  }
class C{  @Override public void execute(){  SoundLayer layer=SoundLayer.AMBIENT_SOUND;  int idx=event.getInt("layer");  if (idx < SoundLayer.values().length) {    layer=SoundLayer.values()[idx];  }  float volume=1.0f;  if (event.has("volume")) {    volume=Numeric.intToFloat(event.getInt("volume"),100.0f);  }  String soundName=event.get("sound");  AudibleArea area;  if (event.has("radius")) {    int radius=event.getInt("radius");    area=new AudibleCircleArea(Algebra.vecf((float)entity.getX(),(float)entity.getY()),radius / 4.0f,radius);  } else {    area=new InfiniteAudibleArea();  }  SoundGroup group=ClientSingletonRepository.getSound().getGroup(layer.groupName);  group.loadSound(soundName,soundName + ".ogg",SoundFileType.OGG,false);  group.play(soundName,volume,0,area,null,false,true);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UQSUB8");  translateAll(environment,instruction,"UQSUB8",instructions);}  }
class C{  public void writeToParcel(Parcel dest,int flags){  if (mContact != null) {    dest.writeInt(1);    mContact.writeToParcel(dest,flags);  } else {    dest.writeInt(0);  }  dest.writeInt(mOnline ? 1 : 0);  if (mCapabilities != null) {    dest.writeInt(1);    mCapabilities.writeToParcel(dest,flags);  } else {    dest.writeInt(0);  }  dest.writeString(mDisplayName);  dest.writeInt(mBlocked ? 1 : 0);  dest.writeLong(mBlockingTimestamp);}  }
class C{  private CCFGNode determineNextRelevantNode(CCFGNode node,Set<CCFGNode> handled){  CCFGNode nextNode;  while (ccfg.outDegreeOf(node) == 1 && (nextNode=ccfg.getSingleChild(node)) instanceof CCFGCodeNode && !((CCFGCodeNode)nextNode).getCodeInstruction().isDefUse() && !handled.contains(nextNode)) {    node=nextNode;  }  return node;}  }
class C{  public Map<String,Object> deleteFromCart(Map<String,? extends Object> context){  Map<String,Object> result=null;  ArrayList<String> errorMsgs=new ArrayList<String>();  for (  String o : context.keySet()) {    if (o.toUpperCase().startsWith("DELETE")) {      try {        String indexStr=o.substring(o.lastIndexOf('_') + 1);        int index=Integer.parseInt(indexStr);        try {          this.cart.removeCartItem(index,dispatcher);        } catch (        CartItemModifyException e) {          errorMsgs.add(e.getMessage());        }      } catch (      NumberFormatException nfe) {      }    }  }  if (errorMsgs.size() > 0) {    result=ServiceUtil.returnError(errorMsgs);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    return result;  }  result=ServiceUtil.returnSuccess();  return result;}  }
class C{  public List<DefaultCreature> load(){  final GroupsXMLLoader groupsLoader=new GroupsXMLLoader(uri);  final List<DefaultCreature> list=new LinkedList<DefaultCreature>();  try {    List<URI> groups=groupsLoader.load();    for (    final URI tempUri : groups) {      final CreaturesXMLLoader loader=new CreaturesXMLLoader();      try {        list.addAll(loader.load(tempUri));      } catch (      final SAXException ex) {        LOGGER.error("Error loading creature group: " + tempUri,ex);      }    }  } catch (  SAXException e) {    LOGGER.error(e,e);  }catch (  IOException e) {    LOGGER.error(e,e);  }  return list;}  }
class C{  public static TypeReference newSuperTypeReference(int itfIndex){  itfIndex&=0xFFFF;  return new TypeReference((CLASS_EXTENDS << 24) | (itfIndex << 8));}  }
class C{  public static double guessDate(String s){  int i=s.length();  char c;  do {    i--;    c=s.charAt(i);  } while (i >= 0 && (Character.isDigit(c) || c == '.'));  if (i == s.length()) {    return 0.0;  }  return Double.parseDouble(s.substring(i + 1));}  }
class C{  public String forceGetValueAsString(){  if (mValue == null) {    return "";  } else   if (mValue instanceof byte[]) {    if (mDataType == TYPE_ASCII) {      return new String((byte[])mValue,US_ASCII);    } else {      return Arrays.toString((byte[])mValue);    }  } else   if (mValue instanceof long[]) {    if (((long[])mValue).length == 1) {      return String.valueOf(((long[])mValue)[0]);    } else {      return Arrays.toString((long[])mValue);    }  } else   if (mValue instanceof Object[]) {    if (((Object[])mValue).length == 1) {      Object val=((Object[])mValue)[0];      if (val == null) {        return "";      } else {        return val.toString();      }    } else {      return Arrays.toString((Object[])mValue);    }  } else {    return mValue.toString();  }}  }
class C{  public OrganizationAlreadyExistsException(){}  }
class C{  public void pixelsToValue(float[] pixels){  Matrix tmp=new Matrix();  mMatrixOffset.invert(tmp);  tmp.mapPoints(pixels);  mViewPortHandler.getMatrixTouch().invert(tmp);  tmp.mapPoints(pixels);  mMatrixValueToPx.invert(tmp);  tmp.mapPoints(pixels);}  }
class C{  private boolean isJsFile(URI uri){  ResourceType resourceType=ResourceType.getResourceType(uri);  return resourceType.equals(ResourceType.JS);}  }
class C{  private static synchronized <D,S>IMapper<D,S> createMapper(MapperBuilder mapper) throws Throwable {  Class<Mapper<D,S>> mapperClass=mapper.exist() ? mapper.<D,S>get() : mapper.<D,S>generate();  return mapperClass.newInstance();}  }
class C{  public SkyView(Context context){  super(context);  this.initialize();}  }
class C{  private void copyToArrays(){  colorExtracted=pdf_data.isColorExtracted();  final int count=pdf_data.getRawTextElementCount();  isUsed=new boolean[count];  fontSize=new int[count];  writingMode=new int[count];  spaceWidth=new float[count];  content=new StringBuilder[count];  textLength=new int[count];  f_x1=new float[count];  f_colorTag=new String[count];  f_x2=new float[count];  f_y1=new float[count];  f_y2=new float[count];  for (int i=0; i < count; i++) {    content[i]=new StringBuilder(pdf_data.contents[i]);    fontSize[i]=pdf_data.f_end_font_size[i];    writingMode[i]=pdf_data.f_writingMode[i];    f_x1[i]=pdf_data.f_x1[i];    f_colorTag[i]=pdf_data.colorTag[i];    f_x2[i]=pdf_data.f_x2[i];    f_y1[i]=pdf_data.f_y1[i];    f_y2[i]=pdf_data.f_y2[i];    spaceWidth[i]=pdf_data.space_width[i];    textLength[i]=pdf_data.text_length[i];  }}  }
class C{  static public FunctionNode NOT(final ValueExpressionNode inner){  return new FunctionNode(FunctionRegistry.NOT,null,new ValueExpressionNode[]{inner});}  }
class C{  public void add(FontBuilder fontBuilder,double height,String text,Color color,int xOffset,int yOffset) throws IOException {  fontBuilders.add(fontBuilder);  BufferedReader reader=new BufferedReader(new StringReader(text));  String line;  char[] chars;  int yCount=0;  double t_width=0.0f;  double t_height=0.0f;  while (true) {    line=reader.readLine();    if ((line == null) || (line.length() == 0))     break;    TextRecord tr=getStyleRecord(fontBuilder,height,color,xOffset,(int)(yOffset + yCount * height * SwfConstants.TWIPS_PER_PIXEL));    chars=line.toCharArray();    tr.entries=new GlyphEntry[chars.length];    double w=0;    for (int i=0; i < chars.length; i++) {      char c=chars[i];      GlyphEntry ge=(GlyphEntry)fontBuilder.getGlyph(c).clone();      ge.advance=(int)((ge.advance / 1024f) * tr.height);      tr.entries[i]=ge;      w+=ge.advance;    }    if (w > t_width)     t_width=w;    tag.records.add(tr);    yCount++;  }  t_height=yCount * height;  double x1=0;  double y1=0;  double x2=x1 + t_width;  double y2=y1 + t_height;  x1=x1 * SwfConstants.TWIPS_PER_PIXEL;  x2=x2 * SwfConstants.TWIPS_PER_PIXEL;  y1=y1 * SwfConstants.TWIPS_PER_PIXEL;  y2=y2 * SwfConstants.TWIPS_PER_PIXEL;  if (x1 > Integer.MAX_VALUE)   x1=0;  if (x2 > Integer.MAX_VALUE)   x2=0;  if (y1 > Integer.MAX_VALUE)   y1=0;  if (y2 > Integer.MAX_VALUE)   y2=0;  tag.bounds=new Rect((int)x1,(int)x2,(int)y1,(int)y2);}  }
class C{  public SparseVector(Vec toCopy){  this(toCopy.length(),toCopy.nnz());  for (  IndexValue iv : toCopy) {    indexes[used]=iv.getIndex();    values[used++]=iv.getValue();  }}  }
class C{  public JavaCompiler(Context context){  this.context=context;  context.put(compilerKey,this);  if (context.get(JavaFileManager.class) == null)   JavacFileManager.preRegister(context);  names=Names.instance(context);  log=Log.instance(context);  diagFactory=JCDiagnostic.Factory.instance(context);  reader=ClassReader.instance(context);  make=TreeMaker.instance(context);  writer=ClassWriter.instance(context);  jniWriter=JNIWriter.instance(context);  enter=Enter.instance(context);  todo=Todo.instance(context);  fileManager=context.get(JavaFileManager.class);  parserFactory=ParserFactory.instance(context);  compileStates=CompileStates.instance(context);  try {    syms=Symtab.instance(context);  } catch (  CompletionFailure ex) {    log.error("cant.access",ex.sym,ex.getDetailValue());    if (ex instanceof ClassReader.BadClassFile)     throw new Abort();  }  source=Source.instance(context);  Target target=Target.instance(context);  attr=Attr.instance(context);  chk=Check.instance(context);  gen=Gen.instance(context);  flow=Flow.instance(context);  transTypes=TransTypes.instance(context);  lower=Lower.instance(context);  annotate=Annotate.instance(context);  types=Types.instance(context);  taskListener=MultiTaskListener.instance(context);  reader.sourceCompleter=thisCompleter;  options=Options.instance(context);  verbose=options.isSet(VERBOSE);  sourceOutput=options.isSet(PRINTSOURCE);  stubOutput=options.isSet("-stubs");  relax=options.isSet("-relax");  printFlat=options.isSet("-printflat");  attrParseOnly=options.isSet("-attrparseonly");  encoding=options.get(ENCODING);  lineDebugInfo=options.isUnset(G_CUSTOM) || options.isSet(G_CUSTOM,"lines");  genEndPos=options.isSet(XJCOV) || context.get(DiagnosticListener.class) != null;  devVerbose=options.isSet("dev");  processPcks=options.isSet("process.packages");  werror=options.isSet(WERROR);  if (source.compareTo(Source.DEFAULT) < 0) {    if (options.isUnset(XLINT_CUSTOM,"-" + LintCategory.OPTIONS.option)) {      if (fileManager instanceof BaseFileManager) {        if (((BaseFileManager)fileManager).isDefaultBootClassPath())         log.warning(LintCategory.OPTIONS,"source.no.bootclasspath",source.name);      }    }  }  checkForObsoleteOptions(target);  verboseCompilePolicy=options.isSet("verboseCompilePolicy");  if (attrParseOnly)   compilePolicy=CompilePolicy.ATTR_ONLY; else   compilePolicy=CompilePolicy.decode(options.get("compilePolicy"));  implicitSourcePolicy=ImplicitSourcePolicy.decode(options.get("-implicit"));  completionFailureName=options.isSet("failcomplete") ? names.fromString(options.get("failcomplete")) : null;  shouldStopPolicyIfError=options.isSet("shouldStopPolicy") ? CompileState.valueOf(options.get("shouldStopPolicy")) : options.isSet("shouldStopPolicyIfError") ? CompileState.valueOf(options.get("shouldStopPolicyIfError")) : CompileState.INIT;  shouldStopPolicyIfNoError=options.isSet("shouldStopPolicyIfNoError") ? CompileState.valueOf(options.get("shouldStopPolicyIfNoError")) : CompileState.GENERATE;  if (options.isUnset("oldDiags"))   log.setDiagnosticFormatter(RichDiagnosticFormatter.instance(context));}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + " or hasPermission(#cube, 'ADMINISTRATION') or hasPermission(#cube, 'OPERATION') or hasPermission(#cube, 'MANAGEMENT')") public CubeInstance purgeCube(CubeInstance cube) throws IOException, JobException {  String cubeName=cube.getName();  RealizationStatusEnum ostatus=cube.getStatus();  if (null != ostatus && !RealizationStatusEnum.DISABLED.equals(ostatus)) {    throw new InternalErrorException("Only disabled cube can be purged, status of " + cubeName + " is "+ ostatus);  }  try {    this.releaseAllSegments(cube);    return cube;  } catch (  IOException e) {    throw e;  }}  }
class C{  public Bounds windowView(Bounds rangeBounds){  Bounds newBounds=new Bounds(this.start - rangeBounds.start,this.end - rangeBounds.start);  if ((newBounds.start >= rangeBounds.size()) || (newBounds.end <= 0)) {    return null;  }  newBounds.start=Math.max(newBounds.start,0);  newBounds.end=Math.min(newBounds.end,rangeBounds.size());  return newBounds;}  }
class C{  @ObjectiveCName("registerApplePushKitWithApnsId:withToken:") public void registerApplePushKit(int apnsId,String token){  modules.getPushesModule().registerApplePushKit(apnsId,token);}  }
class C{  public void onSocialLoginSuccess(String accessToken,String backend,Task task){  tryToSetUIInteraction(false);  task.setProgressDialog(activityLoginBinding.progress.progressIndicator);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case MappingPackage.ENUM_ATTRIBUTE_SOURCE__ATTRIBUTE:    return getAttribute();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void split(){  if (hasChildren()) {    return;  }  final boolean issplit=(maxSplitDimension >= (getDimensionality() - 1));  final int childLevel=issplit ? level + 1 : level;  final int splitDim=issplit ? 0 : maxSplitDimension + 1;  final double splitPoint=getMin(splitDim) + (getMax(splitDim) - getMin(splitDim)) * .5;  for (int i=0; i < 2; i++) {    double[] min=SpatialUtil.getMin(this);    double[] max=SpatialUtil.getMax(this);    if (i == 0) {      min[splitDim]=splitPoint;    } else {      max[splitDim]=splitPoint;    }    ModifiableDBIDs childIDs=split.determineIDs(getIDs(),new HyperBoundingBox(min,max),d_min,d_max);    if (childIDs != null) {      if (i == 0) {        rightChild=new CASHInterval(min,max,split,childIDs,splitDim,childLevel,d_min,d_max);      } else {        leftChild=new CASHInterval(min,max,split,childIDs,splitDim,childLevel,d_min,d_max);      }    }  }  if (LoggingConfiguration.DEBUG) {    StringBuilder msg=new StringBuilder();    msg.append("\nchild level ").append(childLevel).append(",  split Dim   ").append(splitDim);    if (leftChild != null) {      msg.append("\nleft   ").append(leftChild);    }    if (rightChild != null) {      msg.append("\nright   ").append(rightChild);    }    Logger.getLogger(this.getClass().getName()).fine(msg.toString());  }}  }
class C{  public static EncodedImage create(InputStream i,int size) throws IOException {  byte[] buffer=new byte[size];  Util.readFully(i,buffer);  return new EncodedImage(new byte[][]{buffer});}  }
class C{  private void pop(final String desc){  char c=desc.charAt(0);  if (c == '(') {    pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1);  } else   if (c == 'J' || c == 'D') {    pop(2);  } else {    pop(1);  }}  }
class C{  public E createEntry(){  E entry;  try {    entry=entryClass.newInstance();  } catch (  InstantiationException e) {    throw new IllegalStateException(e);  }catch (  IllegalAccessException e) {    throw new IllegalStateException(e);  }  if (feedState.service != null) {    entry.setService(feedState.service);  }  return entry;}  }
class C{  public void savePoiTypesByDefault(){  savePoiTypes(poiAssetLoader.loadPoiTypesByDefault());}  }
class C{  public void createLayout(){  GridBagLayout gbl=new GridBagLayout();  GridBagConstraints c=new GridBagConstraints();  setLayout(gbl);  c.gridx=0;  c.gridy=0;  c.weightx=c.weighty=0.0;  c.fill=GridBagConstraints.HORIZONTAL;  gbl.setConstraints(toolbar,c);  add(toolbar);  c.gridx++;  c.gridy++;  c.weightx=c.weighty=0.0;  c.insets=new Insets(5,0,5,5);  gbl.setConstraints(backward,c);  add(backward);  c.gridx++;  gbl.setConstraints(forward,c);  add(forward);  c.gridx++;  gbl.setConstraints(reload,c);  add(reload);  c.gridx++;  c.fill=GridBagConstraints.NONE;  c.weightx=c.weighty=0.0;  gbl.setConstraints(print_preview,c);  add(print_preview);  c.gridx++;  c.fill=GridBagConstraints.HORIZONTAL;  c.ipadx=5;  c.ipady=5;  c.weightx=10.0;  c.insets=new Insets(5,0,5,0);  gbl.setConstraints(url,c);  url.setBorder(BorderFactory.createLoweredBevelBorder());  add(url);  c.gridx++;  c.fill=GridBagConstraints.NONE;  c.weightx=c.weighty=0.0;  c.insets=new Insets(0,5,0,0);  gbl.setConstraints(goToPage,c);  add(goToPage);  c.gridx=0;  c.gridy++;  c.ipadx=0;  c.ipady=0;  c.fill=GridBagConstraints.BOTH;  c.gridwidth=7;  c.weightx=c.weighty=10.0;  gbl.setConstraints(scroll,c);  add(scroll);  c.gridx=0;  c.gridy++;  c.fill=GridBagConstraints.HORIZONTAL;  c.weighty=0.1;  gbl.setConstraints(status,c);  add(status);}  }
class C{  private static StringAndLocation innerGetCurrentToken(SyntaxTreeNode stn,Location location){  int kind=stn.getKind();  if (kind == SyntaxTreeConstants.N_GeneralId) {    return new StringAndLocation(concatHeirTokens(stn),stn.getLocation());  }  SyntaxTreeNode[] heirs=stn.getHeirs();  if (heirs.length == 0) {    return new StringAndLocation(stn.getImage(),stn.getLocation());  }  for (int i=0; i < heirs.length; i++) {    if (locationContainment(location,heirs[i].getLocation())) {      return innerGetCurrentToken(heirs[i],location);    }  }  return null;}  }
class C{  public static void recordAllocationForceForTestReal(int count,String desc,Object newObj,int recurse){  if (recurse != 0) {    recordAllocationForceForTestReal(count,desc,newObj,recurse - 1);    return;  }}  }
class C{  private void receivedClientHello(ClientHello clientHello) throws HandshakeException {  handshakeStarted();  if (!clientHello.getCipherSuites().contains(session.getCipherSuite())) {    throw new HandshakeException("Client wants to change cipher suite in resumed session",new AlertMessage(AlertLevel.FATAL,AlertDescription.ILLEGAL_PARAMETER,clientHello.getPeer()));  } else   if (!clientHello.getCompressionMethods().contains(session.getCompressionMethod())) {    throw new HandshakeException("Client wants to change compression method in resumed session",new AlertMessage(AlertLevel.FATAL,AlertDescription.ILLEGAL_PARAMETER,clientHello.getPeer()));  } else {    DTLSFlight flight=new DTLSFlight(getSession());    md.update(clientHello.getRawMessage());    clientRandom=clientHello.getRandom();    serverRandom=new Random(new SecureRandom());    ServerHello serverHello=new ServerHello(clientHello.getClientVersion(),serverRandom,session.getSessionIdentifier(),session.getCipherSuite(),session.getCompressionMethod(),null,clientHello.getPeer());    flight.addMessage(wrapMessage(serverHello));    md.update(serverHello.toByteArray());    calculateKeys(session.getMasterSecret());    ChangeCipherSpecMessage changeCipherSpecMessage=new ChangeCipherSpecMessage(clientHello.getPeer());    flight.addMessage(wrapMessage(changeCipherSpecMessage));    setCurrentWriteState();    MessageDigest mdWithServerFinished=null;    try {      mdWithServerFinished=(MessageDigest)md.clone();    } catch (    CloneNotSupportedException e) {      throw new HandshakeException("Cannot create FINISHED message hash",new AlertMessage(AlertLevel.FATAL,AlertDescription.INTERNAL_ERROR,clientHello.getPeer()));    }    handshakeHash=md.digest();    Finished finished=new Finished(session.getMasterSecret(),false,handshakeHash,clientHello.getPeer());    flight.addMessage(wrapMessage(finished));    mdWithServerFinished.update(finished.toByteArray());    handshakeHash=mdWithServerFinished.digest();    recordLayer.sendFlight(flight);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TANNOTATION__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case TypesPackage.TANNOTATION__ARGS:  return args != null && !args.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @Override public String execute(){  if (cancel != null) {    return CANCEL;  }  if (ServletActionContext.getRequest().getMethod().equals("GET")) {    return INPUT;  }  return SUCCESS;}  }
class C{  public static String toStringType(short type){  if (type == Variant.VariantEmpty)   return "empty"; else   if (type == Variant.VariantNull)   return "null"; else   if (type == Variant.VariantShort)   return "Short"; else   if (type == Variant.VariantInt)   return "Integer"; else   if (type == Variant.VariantFloat)   return "Float"; else   if (type == Variant.VariantDouble)   return "Double"; else   if (type == Variant.VariantCurrency)   return "Currency"; else   if (type == Variant.VariantDate)   return "Date"; else   if (type == Variant.VariantString)   return "String"; else   if (type == Variant.VariantBoolean)   return "Boolean"; else   if (type == Variant.VariantByte)   return "Byte"; else   if (type == Variant.VariantArray)   return "Array"; else   if (type == Variant.VariantDispatch)   return "Dispatch"; else   if (type == Variant.VariantByref)   return "Byref"; else   if (type == Variant.VariantCurrency)   return "Currency"; else   if (type == Variant.VariantError)   return "Error"; else   if (type == Variant.VariantInt)   return "int"; else   if (type == Variant.VariantObject)   return "Object"; else   if (type == Variant.VariantTypeMask)   return "TypeMask"; else   if (type == Variant.VariantVariant)   return "Variant"; else   return "unknow";}  }
class C{  protected static String _defaultTypeId(Class<?> cls){  String n=cls.getName();  int ix=n.lastIndexOf('.');  return (ix < 0) ? n : n.substring(ix + 1);}  }
class C{  public int findFirstCompletelyVisibleItemPosition(){  final View child=findOneVisibleChild(0,layoutManager.getChildCount(),true,false);  return child == null ? NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TypeArgument.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_ARGUMENT___GET_TYPE_REF_AS_STRING:      return TypeRefsPackage.COMPOSED_TYPE_REF___GET_TYPE_REF_AS_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_REF___IS_DYNAMIC:  return TypeRefsPackage.COMPOSED_TYPE_REF___IS_DYNAMIC;case TypeRefsPackage.TYPE_REF___GET_TYPE_REF_AS_STRING:return TypeRefsPackage.COMPOSED_TYPE_REF___GET_TYPE_REF_AS_STRING;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void handlePresenceSharingNotification(ContactId contact,String status,String reason){  if (sLogger.isActivated()) {    sLogger.debug("Handle event presence sharing notification for " + contact + " ("+ status+ ":"+ reason+ ")");  }}  }
class C{  @Override public int read(){  return -1;}  }
class C{  public ADProviderResource activeDirectory(){  return adProvider;}  }
class C{  @Override protected T doSwitch(int classifierID,EObject theEObject){switch (classifierID) {case TypesPackage.TYPE_DEFS:{      TypeDefs typeDefs=(TypeDefs)theEObject;      T result=caseTypeDefs(typeDefs);      if (result == null)       result=defaultCase(theEObject);      return result;    }case TypesPackage.TMODULE:{    TModule tModule=(TModule)theEObject;    T result=caseTModule(tModule);    if (result == null)     result=caseSyntaxRelatedTElement(tModule);    if (result == null)     result=caseTAnnotableElement(tModule);    if (result == null)     result=defaultCase(theEObject);    return result;  }case TypesPackage.TYPABLE_ELEMENT:{  TypableElement typableElement=(TypableElement)theEObject;  T result=caseTypableElement(typableElement);  if (result == null)   result=defaultCase(theEObject);  return result;}case TypesPackage.IDENTIFIABLE_ELEMENT:{IdentifiableElement identifiableElement=(IdentifiableElement)theEObject;T result=caseIdentifiableElement(identifiableElement);if (result == null) result=caseTypableElement(identifiableElement);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TEXPORTABLE_ELEMENT:{TExportableElement tExportableElement=(TExportableElement)theEObject;T result=caseTExportableElement(tExportableElement);if (result == null) result=caseIdentifiableElement(tExportableElement);if (result == null) result=caseTypableElement(tExportableElement);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TANNOTATION:{TAnnotation tAnnotation=(TAnnotation)theEObject;T result=caseTAnnotation(tAnnotation);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TANNOTATION_ARGUMENT:{TAnnotationArgument tAnnotationArgument=(TAnnotationArgument)theEObject;T result=caseTAnnotationArgument(tAnnotationArgument);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TANNOTATION_STRING_ARGUMENT:{TAnnotationStringArgument tAnnotationStringArgument=(TAnnotationStringArgument)theEObject;T result=caseTAnnotationStringArgument(tAnnotationStringArgument);if (result == null) result=caseTAnnotationArgument(tAnnotationStringArgument);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TANNOTATION_TYPE_REF_ARGUMENT:{TAnnotationTypeRefArgument tAnnotationTypeRefArgument=(TAnnotationTypeRefArgument)theEObject;T result=caseTAnnotationTypeRefArgument(tAnnotationTypeRefArgument);if (result == null) result=caseTAnnotationArgument(tAnnotationTypeRefArgument);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TANNOTABLE_ELEMENT:{TAnnotableElement tAnnotableElement=(TAnnotableElement)theEObject;T result=caseTAnnotableElement(tAnnotableElement);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TYPE_VARIABLE:{TypeVariable typeVariable=(TypeVariable)theEObject;T result=caseTypeVariable(typeVariable);if (result == null) result=caseType(typeVariable);if (result == null) result=caseTExportableElement(typeVariable);if (result == null) result=caseTAnnotableElement(typeVariable);if (result == null) result=caseIdentifiableElement(typeVariable);if (result == null) result=caseTypableElement(typeVariable);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.INFERENCE_VARIABLE:{InferenceVariable inferenceVariable=(InferenceVariable)theEObject;T result=caseInferenceVariable(inferenceVariable);if (result == null) result=caseTypeVariable(inferenceVariable);if (result == null) result=caseType(inferenceVariable);if (result == null) result=caseTExportableElement(inferenceVariable);if (result == null) result=caseTAnnotableElement(inferenceVariable);if (result == null) result=caseIdentifiableElement(inferenceVariable);if (result == null) result=caseTypableElement(inferenceVariable);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TFUNCTION:{TFunction tFunction=(TFunction)theEObject;T result=caseTFunction(tFunction);if (result == null) result=caseDeclaredTypeWithAccessModifier(tFunction);if (result == null) result=caseSyntaxRelatedTElement(tFunction);if (result == null) result=caseType(tFunction);if (result == null) result=caseAccessibleTypeElement(tFunction);if (result == null) result=caseTExportableElement(tFunction);if (result == null) result=caseTAnnotableElement(tFunction);if (result == null) result=caseIdentifiableElement(tFunction);if (result == null) result=caseTypableElement(tFunction);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TYPE:{Type type=(Type)theEObject;T result=caseType(type);if (result == null) result=caseTExportableElement(type);if (result == null) result=caseTAnnotableElement(type);if (result == null) result=caseIdentifiableElement(type);if (result == null) result=caseTypableElement(type);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.ACCESSIBLE_TYPE_ELEMENT:{AccessibleTypeElement accessibleTypeElement=(AccessibleTypeElement)theEObject;T result=caseAccessibleTypeElement(accessibleTypeElement);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.DECLARED_TYPE_WITH_ACCESS_MODIFIER:{DeclaredTypeWithAccessModifier declaredTypeWithAccessModifier=(DeclaredTypeWithAccessModifier)theEObject;T result=caseDeclaredTypeWithAccessModifier(declaredTypeWithAccessModifier);if (result == null) result=caseType(declaredTypeWithAccessModifier);if (result == null) result=caseAccessibleTypeElement(declaredTypeWithAccessModifier);if (result == null) result=caseTExportableElement(declaredTypeWithAccessModifier);if (result == null) result=caseTAnnotableElement(declaredTypeWithAccessModifier);if (result == null) result=caseIdentifiableElement(declaredTypeWithAccessModifier);if (result == null) result=caseTypableElement(declaredTypeWithAccessModifier);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.CONTAINER_TYPE:{ContainerType<?> containerType=(ContainerType<?>)theEObject;T result=caseContainerType(containerType);if (result == null) result=caseType(containerType);if (result == null) result=caseTExportableElement(containerType);if (result == null) result=caseTAnnotableElement(containerType);if (result == null) result=caseIdentifiableElement(containerType);if (result == null) result=caseTypableElement(containerType);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.VIRTUAL_BASE_TYPE:{VirtualBaseType virtualBaseType=(VirtualBaseType)theEObject;T result=caseVirtualBaseType(virtualBaseType);if (result == null) result=caseContainerType(virtualBaseType);if (result == null) result=caseType(virtualBaseType);if (result == null) result=caseTExportableElement(virtualBaseType);if (result == null) result=caseTAnnotableElement(virtualBaseType);if (result == null) result=caseIdentifiableElement(virtualBaseType);if (result == null) result=caseTypableElement(virtualBaseType);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.MODULE_NAMESPACE_VIRTUAL_TYPE:{ModuleNamespaceVirtualType moduleNamespaceVirtualType=(ModuleNamespaceVirtualType)theEObject;T result=caseModuleNamespaceVirtualType(moduleNamespaceVirtualType);if (result == null) result=caseType(moduleNamespaceVirtualType);if (result == null) result=caseSyntaxRelatedTElement(moduleNamespaceVirtualType);if (result == null) result=caseTExportableElement(moduleNamespaceVirtualType);if (result == null) result=caseTAnnotableElement(moduleNamespaceVirtualType);if (result == null) result=caseIdentifiableElement(moduleNamespaceVirtualType);if (result == null) result=caseTypableElement(moduleNamespaceVirtualType);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.PRIMITIVE_TYPE:{PrimitiveType primitiveType=(PrimitiveType)theEObject;T result=casePrimitiveType(primitiveType);if (result == null) result=caseContainerType(primitiveType);if (result == null) result=caseArrayLike(primitiveType);if (result == null) result=caseType(primitiveType);if (result == null) result=caseTExportableElement(primitiveType);if (result == null) result=caseTAnnotableElement(primitiveType);if (result == null) result=caseIdentifiableElement(primitiveType);if (result == null) result=caseTypableElement(primitiveType);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.BUILT_IN_TYPE:{BuiltInType builtInType=(BuiltInType)theEObject;T result=caseBuiltInType(builtInType);if (result == null) result=caseType(builtInType);if (result == null) result=caseTExportableElement(builtInType);if (result == null) result=caseTAnnotableElement(builtInType);if (result == null) result=caseIdentifiableElement(builtInType);if (result == null) result=caseTypableElement(builtInType);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.ANY_TYPE:{AnyType anyType=(AnyType)theEObject;T result=caseAnyType(anyType);if (result == null) result=caseBuiltInType(anyType);if (result == null) result=caseType(anyType);if (result == null) result=caseTExportableElement(anyType);if (result == null) result=caseTAnnotableElement(anyType);if (result == null) result=caseIdentifiableElement(anyType);if (result == null) result=caseTypableElement(anyType);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.UNDEFINED_TYPE:{UndefinedType undefinedType=(UndefinedType)theEObject;T result=caseUndefinedType(undefinedType);if (result == null) result=caseBuiltInType(undefinedType);if (result == null) result=caseType(undefinedType);if (result == null) result=caseTExportableElement(undefinedType);if (result == null) result=caseTAnnotableElement(undefinedType);if (result == null) result=caseIdentifiableElement(undefinedType);if (result == null) result=caseTypableElement(undefinedType);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.NULL_TYPE:{NullType nullType=(NullType)theEObject;T result=caseNullType(nullType);if (result == null) result=caseBuiltInType(nullType);if (result == null) result=caseType(nullType);if (result == null) result=caseTExportableElement(nullType);if (result == null) result=caseTAnnotableElement(nullType);if (result == null) result=caseIdentifiableElement(nullType);if (result == null) result=caseTypableElement(nullType);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.VOID_TYPE:{VoidType voidType=(VoidType)theEObject;T result=caseVoidType(voidType);if (result == null) result=caseBuiltInType(voidType);if (result == null) result=caseType(voidType);if (result == null) result=caseTExportableElement(voidType);if (result == null) result=caseTAnnotableElement(voidType);if (result == null) result=caseIdentifiableElement(voidType);if (result == null) result=caseTypableElement(voidType);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TSTRUCTURAL_TYPE:{TStructuralType tStructuralType=(TStructuralType)theEObject;T result=caseTStructuralType(tStructuralType);if (result == null) result=caseContainerType(tStructuralType);if (result == null) result=caseSyntaxRelatedTElement(tStructuralType);if (result == null) result=caseType(tStructuralType);if (result == null) result=caseTExportableElement(tStructuralType);if (result == null) result=caseTAnnotableElement(tStructuralType);if (result == null) result=caseIdentifiableElement(tStructuralType);if (result == null) result=caseTypableElement(tStructuralType);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TCLASSIFIER:{TClassifier tClassifier=(TClassifier)theEObject;T result=caseTClassifier(tClassifier);if (result == null) result=caseContainerType(tClassifier);if (result == null) result=caseSyntaxRelatedTElement(tClassifier);if (result == null) result=caseType(tClassifier);if (result == null) result=caseTExportableElement(tClassifier);if (result == null) result=caseTAnnotableElement(tClassifier);if (result == null) result=caseIdentifiableElement(tClassifier);if (result == null) result=caseTypableElement(tClassifier);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TOBJECT_PROTOTYPE:{TObjectPrototype tObjectPrototype=(TObjectPrototype)theEObject;T result=caseTObjectPrototype(tObjectPrototype);if (result == null) result=caseTClassifier(tObjectPrototype);if (result == null) result=caseDeclaredTypeWithAccessModifier(tObjectPrototype);if (result == null) result=caseArrayLike(tObjectPrototype);if (result == null) result=caseContainerType(tObjectPrototype);if (result == null) result=caseSyntaxRelatedTElement(tObjectPrototype);if (result == null) result=caseAccessibleTypeElement(tObjectPrototype);if (result == null) result=caseType(tObjectPrototype);if (result == null) result=caseTExportableElement(tObjectPrototype);if (result == null) result=caseTAnnotableElement(tObjectPrototype);if (result == null) result=caseIdentifiableElement(tObjectPrototype);if (result == null) result=caseTypableElement(tObjectPrototype);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.ARRAY_LIKE:{ArrayLike arrayLike=(ArrayLike)theEObject;T result=caseArrayLike(arrayLike);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TN4_CLASSIFIER:{TN4Classifier tn4Classifier=(TN4Classifier)theEObject;T result=caseTN4Classifier(tn4Classifier);if (result == null) result=caseTClassifier(tn4Classifier);if (result == null) result=caseDeclaredTypeWithAccessModifier(tn4Classifier);if (result == null) result=caseContainerType(tn4Classifier);if (result == null) result=caseSyntaxRelatedTElement(tn4Classifier);if (result == null) result=caseAccessibleTypeElement(tn4Classifier);if (result == null) result=caseType(tn4Classifier);if (result == null) result=caseTExportableElement(tn4Classifier);if (result == null) result=caseTAnnotableElement(tn4Classifier);if (result == null) result=caseIdentifiableElement(tn4Classifier);if (result == null) result=caseTypableElement(tn4Classifier);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TCLASS:{TClass tClass=(TClass)theEObject;T result=caseTClass(tClass);if (result == null) result=caseTN4Classifier(tClass);if (result == null) result=caseTClassifier(tClass);if (result == null) result=caseDeclaredTypeWithAccessModifier(tClass);if (result == null) result=caseContainerType(tClass);if (result == null) result=caseSyntaxRelatedTElement(tClass);if (result == null) result=caseAccessibleTypeElement(tClass);if (result == null) result=caseType(tClass);if (result == null) result=caseTExportableElement(tClass);if (result == null) result=caseTAnnotableElement(tClass);if (result == null) result=caseIdentifiableElement(tClass);if (result == null) result=caseTypableElement(tClass);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TINTERFACE:{TInterface tInterface=(TInterface)theEObject;T result=caseTInterface(tInterface);if (result == null) result=caseTN4Classifier(tInterface);if (result == null) result=caseTClassifier(tInterface);if (result == null) result=caseDeclaredTypeWithAccessModifier(tInterface);if (result == null) result=caseContainerType(tInterface);if (result == null) result=caseSyntaxRelatedTElement(tInterface);if (result == null) result=caseAccessibleTypeElement(tInterface);if (result == null) result=caseType(tInterface);if (result == null) result=caseTExportableElement(tInterface);if (result == null) result=caseTAnnotableElement(tInterface);if (result == null) result=caseIdentifiableElement(tInterface);if (result == null) result=caseTypableElement(tInterface);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TMEMBER:{TMember tMember=(TMember)theEObject;T result=caseTMember(tMember);if (result == null) result=caseIdentifiableElement(tMember);if (result == null) result=caseTAnnotableElement(tMember);if (result == null) result=caseSyntaxRelatedTElement(tMember);if (result == null) result=caseTypableElement(tMember);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TMEMBER_WITH_ACCESS_MODIFIER:{TMemberWithAccessModifier tMemberWithAccessModifier=(TMemberWithAccessModifier)theEObject;T result=caseTMemberWithAccessModifier(tMemberWithAccessModifier);if (result == null) result=caseTMember(tMemberWithAccessModifier);if (result == null) result=caseIdentifiableElement(tMemberWithAccessModifier);if (result == null) result=caseTAnnotableElement(tMemberWithAccessModifier);if (result == null) result=caseSyntaxRelatedTElement(tMemberWithAccessModifier);if (result == null) result=caseTypableElement(tMemberWithAccessModifier);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TSTRUCT_MEMBER:{TStructMember tStructMember=(TStructMember)theEObject;T result=caseTStructMember(tStructMember);if (result == null) result=caseTMember(tStructMember);if (result == null) result=caseIdentifiableElement(tStructMember);if (result == null) result=caseTAnnotableElement(tStructMember);if (result == null) result=caseSyntaxRelatedTElement(tStructMember);if (result == null) result=caseTypableElement(tStructMember);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TMETHOD:{TMethod tMethod=(TMethod)theEObject;T result=caseTMethod(tMethod);if (result == null) result=caseTFunction(tMethod);if (result == null) result=caseTMemberWithAccessModifier(tMethod);if (result == null) result=caseDeclaredTypeWithAccessModifier(tMethod);if (result == null) result=caseTMember(tMethod);if (result == null) result=caseType(tMethod);if (result == null) result=caseAccessibleTypeElement(tMethod);if (result == null) result=caseSyntaxRelatedTElement(tMethod);if (result == null) result=caseTExportableElement(tMethod);if (result == null) result=caseTAnnotableElement(tMethod);if (result == null) result=caseIdentifiableElement(tMethod);if (result == null) result=caseTypableElement(tMethod);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TSTRUCT_METHOD:{TStructMethod tStructMethod=(TStructMethod)theEObject;T result=caseTStructMethod(tStructMethod);if (result == null) result=caseTMethod(tStructMethod);if (result == null) result=caseTStructMember(tStructMethod);if (result == null) result=caseTFunction(tStructMethod);if (result == null) result=caseTMemberWithAccessModifier(tStructMethod);if (result == null) result=caseDeclaredTypeWithAccessModifier(tStructMethod);if (result == null) result=caseTMember(tStructMethod);if (result == null) result=caseType(tStructMethod);if (result == null) result=caseAccessibleTypeElement(tStructMethod);if (result == null) result=caseSyntaxRelatedTElement(tStructMethod);if (result == null) result=caseTExportableElement(tStructMethod);if (result == null) result=caseTAnnotableElement(tStructMethod);if (result == null) result=caseIdentifiableElement(tStructMethod);if (result == null) result=caseTypableElement(tStructMethod);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TFORMAL_PARAMETER:{TFormalParameter tFormalParameter=(TFormalParameter)theEObject;T result=caseTFormalParameter(tFormalParameter);if (result == null) result=caseIdentifiableElement(tFormalParameter);if (result == null) result=caseTAnnotableElement(tFormalParameter);if (result == null) result=caseSyntaxRelatedTElement(tFormalParameter);if (result == null) result=caseTypableElement(tFormalParameter);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TANONYMOUS_FORMAL_PARAMETER:{TAnonymousFormalParameter tAnonymousFormalParameter=(TAnonymousFormalParameter)theEObject;T result=caseTAnonymousFormalParameter(tAnonymousFormalParameter);if (result == null) result=caseTFormalParameter(tAnonymousFormalParameter);if (result == null) result=caseIdentifiableElement(tAnonymousFormalParameter);if (result == null) result=caseTAnnotableElement(tAnonymousFormalParameter);if (result == null) result=caseSyntaxRelatedTElement(tAnonymousFormalParameter);if (result == null) result=caseTypableElement(tAnonymousFormalParameter);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TFIELD:{TField tField=(TField)theEObject;T result=caseTField(tField);if (result == null) result=caseTMemberWithAccessModifier(tField);if (result == null) result=caseTMember(tField);if (result == null) result=caseIdentifiableElement(tField);if (result == null) result=caseTAnnotableElement(tField);if (result == null) result=caseSyntaxRelatedTElement(tField);if (result == null) result=caseTypableElement(tField);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TSTRUCT_FIELD:{TStructField tStructField=(TStructField)theEObject;T result=caseTStructField(tStructField);if (result == null) result=caseTField(tStructField);if (result == null) result=caseTStructMember(tStructField);if (result == null) result=caseTMemberWithAccessModifier(tStructField);if (result == null) result=caseTMember(tStructField);if (result == null) result=caseIdentifiableElement(tStructField);if (result == null) result=caseTAnnotableElement(tStructField);if (result == null) result=caseSyntaxRelatedTElement(tStructField);if (result == null) result=caseTypableElement(tStructField);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.FIELD_ACCESSOR:{FieldAccessor fieldAccessor=(FieldAccessor)theEObject;T result=caseFieldAccessor(fieldAccessor);if (result == null) result=caseTMemberWithAccessModifier(fieldAccessor);if (result == null) result=caseTMember(fieldAccessor);if (result == null) result=caseIdentifiableElement(fieldAccessor);if (result == null) result=caseTAnnotableElement(fieldAccessor);if (result == null) result=caseSyntaxRelatedTElement(fieldAccessor);if (result == null) result=caseTypableElement(fieldAccessor);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TGETTER:{TGetter tGetter=(TGetter)theEObject;T result=caseTGetter(tGetter);if (result == null) result=caseFieldAccessor(tGetter);if (result == null) result=caseTMemberWithAccessModifier(tGetter);if (result == null) result=caseTMember(tGetter);if (result == null) result=caseIdentifiableElement(tGetter);if (result == null) result=caseTAnnotableElement(tGetter);if (result == null) result=caseSyntaxRelatedTElement(tGetter);if (result == null) result=caseTypableElement(tGetter);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TSTRUCT_GETTER:{TStructGetter tStructGetter=(TStructGetter)theEObject;T result=caseTStructGetter(tStructGetter);if (result == null) result=caseTGetter(tStructGetter);if (result == null) result=caseTStructMember(tStructGetter);if (result == null) result=caseFieldAccessor(tStructGetter);if (result == null) result=caseTMemberWithAccessModifier(tStructGetter);if (result == null) result=caseTMember(tStructGetter);if (result == null) result=caseIdentifiableElement(tStructGetter);if (result == null) result=caseTAnnotableElement(tStructGetter);if (result == null) result=caseSyntaxRelatedTElement(tStructGetter);if (result == null) result=caseTypableElement(tStructGetter);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TSETTER:{TSetter tSetter=(TSetter)theEObject;T result=caseTSetter(tSetter);if (result == null) result=caseFieldAccessor(tSetter);if (result == null) result=caseTMemberWithAccessModifier(tSetter);if (result == null) result=caseTMember(tSetter);if (result == null) result=caseIdentifiableElement(tSetter);if (result == null) result=caseTAnnotableElement(tSetter);if (result == null) result=caseSyntaxRelatedTElement(tSetter);if (result == null) result=caseTypableElement(tSetter);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TSTRUCT_SETTER:{TStructSetter tStructSetter=(TStructSetter)theEObject;T result=caseTStructSetter(tStructSetter);if (result == null) result=caseTSetter(tStructSetter);if (result == null) result=caseTStructMember(tStructSetter);if (result == null) result=caseFieldAccessor(tStructSetter);if (result == null) result=caseTMemberWithAccessModifier(tStructSetter);if (result == null) result=caseTMember(tStructSetter);if (result == null) result=caseIdentifiableElement(tStructSetter);if (result == null) result=caseTAnnotableElement(tStructSetter);if (result == null) result=caseSyntaxRelatedTElement(tStructSetter);if (result == null) result=caseTypableElement(tStructSetter);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TENUM:{TEnum tEnum=(TEnum)theEObject;T result=caseTEnum(tEnum);if (result == null) result=caseDeclaredTypeWithAccessModifier(tEnum);if (result == null) result=caseSyntaxRelatedTElement(tEnum);if (result == null) result=caseType(tEnum);if (result == null) result=caseAccessibleTypeElement(tEnum);if (result == null) result=caseTExportableElement(tEnum);if (result == null) result=caseTAnnotableElement(tEnum);if (result == null) result=caseIdentifiableElement(tEnum);if (result == null) result=caseTypableElement(tEnum);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TENUM_LITERAL:{TEnumLiteral tEnumLiteral=(TEnumLiteral)theEObject;T result=caseTEnumLiteral(tEnumLiteral);if (result == null) result=caseSyntaxRelatedTElement(tEnumLiteral);if (result == null) result=caseIdentifiableElement(tEnumLiteral);if (result == null) result=caseTypableElement(tEnumLiteral);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.SYNTAX_RELATED_TELEMENT:{SyntaxRelatedTElement syntaxRelatedTElement=(SyntaxRelatedTElement)theEObject;T result=caseSyntaxRelatedTElement(syntaxRelatedTElement);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TVARIABLE:{TVariable tVariable=(TVariable)theEObject;T result=caseTVariable(tVariable);if (result == null) result=caseTExportableElement(tVariable);if (result == null) result=caseSyntaxRelatedTElement(tVariable);if (result == null) result=caseTAnnotableElement(tVariable);if (result == null) result=caseAccessibleTypeElement(tVariable);if (result == null) result=caseIdentifiableElement(tVariable);if (result == null) result=caseTypableElement(tVariable);if (result == null) result=defaultCase(theEObject);return result;}default :return defaultCase(theEObject);}}  }
class C{  public BNetwork(){  nodes=new HashMap<String,BNode>();  chanceNodes=new HashMap<String,ChanceNode>();  utilityNodes=new HashMap<String,UtilityNode>();  actionNodes=new HashMap<String,ActionNode>();}  }
class C{  public UnfilledArrowhead(){  setupControlPoints(3);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.N4_CLASS_DECLARATION__ANNOTATION_LIST:    return basicSetAnnotationList(null,msgs);case N4JSPackage.N4_CLASS_DECLARATION__TYPE_VARS:  return ((InternalEList<?>)getTypeVars()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public synchronized void remove(int index){  XYEntry<Double,Double> removedEntry=mXY.removeByIndex(index);  double removedX=removedEntry.getKey();  double removedY=removedEntry.getValue();  if (removedX == mMinX || removedX == mMaxX || removedY == mMinY || removedY == mMaxY) {    initRange();  }}  }
class C{  public void add(KeyValue keyvalue){  this.constructionElement.appendChild(keyvalue.getElement());  XMLUtils.addReturnToElement(this.constructionElement);}  }
class C{  public boolean hasErrors(){  return mHasErrors;}  }
class C{  private void updateUndrawnTiles(final List<Tile> undrawnTiles,final int preDrawMargin,final boolean forceInMemory){  if (undrawnTiles.isEmpty()) {    final Rectangle2D extendedBounds=new Rectangle2D.Double(Math.max(m_model.getX() - preDrawMargin,0),Math.max(m_model.getY() - preDrawMargin,0),getScaledWidth() + (2 * preDrawMargin),getScaledHeight() + (2 * preDrawMargin));    final List<Tile> tileList=tileManager.getTiles(extendedBounds);    for (    final Tile tile : tileList) {      if (tile.isDirty()) {        undrawnTiles.add(tile);      } else       if (forceInMemory) {        images.add(tile);      }    }  }}  }
class C{  public void replace(EncodedImage newImage){  data=newImage.getImageData();  super.resetCache();  replaced=true;}  }
class C{  void drawLineGrid(Graphics screenGraphics,Graphics g){  g.setColor(Color.white);  g.fillRect(0,0,getWidth(),getHeight());  for (int srcQuad=0; srcQuad < NUM_QUADS; ++srcQuad) {    for (int dstQuad=0; dstQuad < NUM_QUADS; ++dstQuad) {      for (int srcPoint=0; srcPoint < quadrants[srcQuad].length; ++srcPoint) {        int sx=quadrants[srcQuad][srcPoint].x;        int sy=quadrants[srcQuad][srcPoint].y;        for (int dstPoint=0; dstPoint < quadrants[dstQuad].length; ++dstPoint) {          int dx=quadrants[dstQuad][dstPoint].x;          int dy=quadrants[dstQuad][dstPoint].y;          if (!rectTest) {            g.setColor(unclippedColor);            g.drawLine(sx,sy,dx,dy);            g.setClip(clipX1,clipY1,clipSize,clipSize);            g.setColor(clippedColor);            g.drawLine(sx,sy,dx,dy);          } else {            g.setColor(unclippedColor);            int w=dx - sx;            int h=dy - sy;            g.drawRect(sx,sy,w,h);            g.setClip(clipX1,clipY1,clipSize,clipSize);            g.setColor(clippedColor);            g.drawRect(sx,sy,w,h);          }          g.setClip(null);        }        if (!dynamic) {          screenGraphics.drawImage(testImage,0,0,this);          if (!quickTest && gridError(g)) {            throw new java.lang.RuntimeException("Failed");          }        }      }    }    if (!dynamic && quickTest && gridError(g)) {      throw new java.lang.RuntimeException("Failed");    }  }  if (!dynamic) {    System.out.println("PASSED");    if (!keepRunning) {      f.dispose();    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:22.971 -0400",hash_original_method="8E86CE3516C821BDCB62BBE2DB825108",hash_generated_method="936384515711523E10D0690E4675B3CC") private int internalAwaitAdvance(int phase,QNode node){  releaseWaiters(phase - 1);  boolean queued=false;  int lastUnarrived=0;  int spins=SPINS_PER_ARRIVAL;  long s;  int p;  while ((p=(int)((s=state) >>> PHASE_SHIFT)) == phase) {    if (node == null) {      int unarrived=(int)s & UNARRIVED_MASK;      if (unarrived != lastUnarrived && (lastUnarrived=unarrived) < NCPU)       spins+=SPINS_PER_ARRIVAL;      boolean interrupted=Thread.interrupted();      if (interrupted || --spins < 0) {        node=new QNode(this,phase,false,false,0L);        node.wasInterrupted=interrupted;      }    } else     if (node.isReleasable())     break; else     if (!queued) {      AtomicReference<QNode> head=(phase & 1) == 0 ? evenQ : oddQ;      QNode q=node.next=head.get();      if ((q == null || q.phase == phase) && (int)(state >>> PHASE_SHIFT) == phase)       queued=head.compareAndSet(q,node);    } else {      try {        ForkJoinPool.managedBlock(node);      } catch (      InterruptedException ie) {        node.wasInterrupted=true;      }    }  }  if (node != null) {    if (node.thread != null)     node.thread=null;    if (node.wasInterrupted && !node.interruptible)     Thread.currentThread().interrupt();    if (p == phase && (p=(int)(state >>> PHASE_SHIFT)) == phase)     return abortWait(phase);  }  releaseWaiters(phase);  return p;}  }
class C{  public boolean hasUUID(){  return !(this.uuidLSBs == 0 && this.uuidMSBs == 0);}  }
class C{  public static String bytesToSequenceIncCG(final byte[] seq,final int start,final int length){  final StringBuilder sb=new StringBuilder();  for (int i=start; i < start + length; i++) {    if (i < 0 || i >= seq.length) {      sb.append('N');    } else     if (seq[i] != 5) {      sb.append(BASES[seq[i]]);    }  }  return sb.toString();}  }
class C{  public JSONAPIConverterFactory(ObjectMapper mapper,Class<?>... classes){  this.deserializer=new ResourceConverter(mapper,classes);  this.serializer=this.deserializer;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  private void addLongitudeBound(double longitude){  if (leftLongitude == null && rightLongitude == null) {    leftLongitude=longitude;    rightLongitude=longitude;  } else {    double currentLeftLongitude=leftLongitude;    double currentRightLongitude=rightLongitude;    if (currentRightLongitude < currentLeftLongitude)     currentRightLongitude+=2.0 * Math.PI;    if (longitude < currentLeftLongitude)     longitude+=2.0 * Math.PI;    if (longitude < currentLeftLongitude || longitude > currentRightLongitude) {      double leftExtensionAmt;      double rightExtensionAmt;      if (longitude < currentLeftLongitude) {        leftExtensionAmt=currentLeftLongitude - longitude;      } else {        leftExtensionAmt=currentLeftLongitude + 2.0 * Math.PI - longitude;      }      if (longitude > currentRightLongitude) {        rightExtensionAmt=longitude - currentRightLongitude;      } else {        rightExtensionAmt=longitude + 2.0 * Math.PI - currentRightLongitude;      }      if (leftExtensionAmt < rightExtensionAmt) {        currentLeftLongitude=leftLongitude - leftExtensionAmt;        while (currentLeftLongitude <= -Math.PI) {          currentLeftLongitude+=2.0 * Math.PI;        }        leftLongitude=currentLeftLongitude;      } else {        currentRightLongitude=rightLongitude + rightExtensionAmt;        while (currentRightLongitude > Math.PI) {          currentRightLongitude-=2.0 * Math.PI;        }        rightLongitude=currentRightLongitude;      }    }  }  double testRightLongitude=rightLongitude;  if (testRightLongitude < leftLongitude)   testRightLongitude+=Math.PI * 2.0;  if (testRightLongitude - leftLongitude >= Math.PI) {    noLongitudeBound=true;    leftLongitude=null;    rightLongitude=null;  }}  }
class C{  public static RectF trapToRect(float[] array){  RectF r=new RectF(Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY,Float.NEGATIVE_INFINITY,Float.NEGATIVE_INFINITY);  for (int i=1; i < array.length; i+=2) {    float x=array[i - 1];    float y=array[i];    r.left=(x < r.left) ? x : r.left;    r.top=(y < r.top) ? y : r.top;    r.right=(x > r.right) ? x : r.right;    r.bottom=(y > r.bottom) ? y : r.bottom;  }  r.sort();  return r;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:08.541 -0400",hash_original_method="BAD9AB04EE2D7DBA90CB3CAC66702FCA",hash_generated_method="CB34046073F390C8E1AE14B275B246E2") private String parseFileName(int gen){  int cur=0;  int next=0;  boolean hasUniqueID=false;  boolean hasGeneration=false;  String tempPath=System.getProperty("java.io.tmpdir");  boolean tempPathHasSepEnd=(tempPath == null ? false : tempPath.endsWith(File.separator));  String homePath=System.getProperty("user.home");  boolean homePathHasSepEnd=(homePath == null ? false : homePath.endsWith(File.separator));  StringBuilder sb=new StringBuilder();  pattern=pattern.replace('/',File.separatorChar);  char[] value=pattern.toCharArray();  while ((next=pattern.indexOf('%',cur)) >= 0) {    if (++next < pattern.length()) {switch (value[next]) {case 'g':        sb.append(value,cur,next - cur - 1).append(gen);      hasGeneration=true;    break;case 'u':  sb.append(value,cur,next - cur - 1).append(uniqueID);hasUniqueID=true;break;case 't':sb.append(value,cur,next - cur - 1).append(tempPath);if (!tempPathHasSepEnd) {sb.append(File.separator);}break;case 'h':sb.append(value,cur,next - cur - 1).append(homePath);if (!homePathHasSepEnd) {sb.append(File.separator);}break;case '%':sb.append(value,cur,next - cur - 1).append('%');break;default :sb.append(value,cur,next - cur);}cur=++next;} else {}}sb.append(value,cur,value.length - cur);if (!hasGeneration && count > 1) {sb.append(".").append(gen);}if (!hasUniqueID && uniqueID > 0) {sb.append(".").append(uniqueID);}return sb.toString();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ConcurrentUpdateSolrServer(String solrServerUrl,HttpClient client,int queueSize,int threadCount,ExecutorService es,boolean streamDeletes){  this.server=new HttpSolrServer(solrServerUrl,client);  this.server.setFollowRedirects(false);  queue=new LinkedBlockingQueue<>(queueSize);  this.threadCount=threadCount;  runners=new LinkedList<>();  scheduler=es;  this.streamDeletes=streamDeletes;}  }
class C{  public SecretsBundle(String path){  String subPathString=new File(path,SIGNING_RELATIVE_PATH).getPath();  logger.info("loading signing key from {}",subPathString);  try {    signingKey=new Signer(new KeyczarFileReader(subPathString));  } catch (  KeyczarException e) {    throw new RuntimeException("Unable to load signing key",e);  }}  }
class C{  private void renderAxes(Camera camera){  glPushMatrix();  glLoadIdentity();  float rotX=camera.getRotation().x;  float rotY=camera.getRotation().y;  float rotZ=0;  glRotatef(rotX,1.0f,0.0f,0.0f);  glRotatef(rotY,0.0f,1.0f,0.0f);  glRotatef(rotZ,0.0f,0.0f,1.0f);  glLineWidth(2.0f);  glBegin(GL_LINES);  glColor3f(1.0f,0.0f,0.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(1.0f,0.0f,0.0f);  glColor3f(0.0f,1.0f,0.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(0.0f,1.0f,0.0f);  glColor3f(1.0f,1.0f,1.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(0.0f,0.0f,1.0f);  glEnd();  glPopMatrix();}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public void saveUserInfo(UserInfo user){  UserInfoEx userResolved=resolveDomainFQDNInAcctInfo(user);  PrincipalId principal=new PrincipalId(user.getName(),user.getDomain());  updateAcctCache(principal,userResolved);}  }
class C{  public BandPassBuilder stopFrequency1(int stopFrequency){  mStopFrequency1=stopFrequency;  return this;}  }
class C{  public static NewPlaylistFragment newInstance(Playlist playlist){  NewPlaylistFragment fragment=new NewPlaylistFragment();  Bundle bundle=new Bundle();  bundle.putParcelable(KEY_PLAYLIST,playlist);  fragment.setArguments(bundle);  return fragment;}  }
class C{  public void loadFile(File objfile,String overwriteName) throws IOException {  objects=new HashMap<String,OBJGroup>();  default_object=null;  BufferedReader in=new BufferedReader(new FileReader(objfile));  int vertex_count=1;  int uv_count=1;  int norm_count=1;  OBJGroup group=null;  String material=null;  String line;  int line_count=0;  while ((line=in.readLine()) != null) {    line_count++;    if (line.length() == 0)     continue;    if (line.startsWith("#"))     continue;    if (line.startsWith("mtllib "))     continue;    if (line.startsWith("s "))     continue;    if (line.startsWith("o ") || line.startsWith("g ")) {      group=new OBJGroup();      String objObjName=line.substring(2).trim();      if (overwriteName != null) {        objObjName=overwriteName;      }      objects.put(objObjName,group);      if (default_object == null)       default_object=group;      continue;    }    if (line.startsWith("usemtl ")) {      material=line.substring(7);      continue;    }    if (line.startsWith("v ")) {      Scanner scanner=new Scanner(line.substring(2));      try {        float x, y, z;        scanner.useLocale(Locale.ROOT);        x=scanner.nextFloat();        y=scanner.nextFloat();        z=scanner.nextFloat();        Vertex v=new Vertex(x,y,z);        vertices.add(v);        vertex_count++;      } catch (      Exception e) {        Log.info("ERROR vertex format exception in file " + objfile.getName() + "["+ line_count+ "]: "+ e);      } finally {        scanner.close();      }      continue;    }    if (line.startsWith("vt ")) {      try {        UV uv=new UV(0,0);        String[] parts=line.split("\\s+");        if (parts.length > 1)         uv.u=Float.parseFloat(parts[1]);        if (parts.length > 2)         uv.v=Float.parseFloat(parts[2]);        texCoords.add(uv);        uv_count++;      } catch (      Exception e) {        Log.info("ERROR texture format exception in file " + objfile.getName() + "["+ line_count+ "]: "+ e);      }      continue;    }    if (line.startsWith("vn ")) {      try {        Vertex norm=new Vertex(0,0,0);        String[] parts=line.split("\\s+");        if (parts.length > 1)         norm.x=Float.parseFloat(parts[1]);        if (parts.length > 2)         norm.y=Float.parseFloat(parts[2]);        if (parts.length > 3)         norm.z=Float.parseFloat(parts[3]);        normals.add(norm);        norm_count++;      } catch (      Exception e) {        Log.info("ERROR normal format exception in file " + objfile.getName() + "["+ line_count+ "]: "+ e);      }      continue;    }    if (line.startsWith("f ")) {      String[] vs=line.substring(2).split("\\s+");      if (vs.length < 3) {        Log.error("ERROR wrong number of vertices in face in file " + objfile.getName() + "["+ line_count+ "]",null);        continue;      }      OBJFace f=new OBJFace(vs.length);      boolean has_uv=false;      boolean has_norm=false;      for (int i=0; i < vs.length; i++) {        try {          int v, n, t;          String[] vt=vs[i].split("/+");          if (vt.length == 1) {            v=Integer.parseInt(vs[i]);            if (v < 0)             v=vertex_count - v;            f.vertices[i]=v;          } else           if (vt.length == 2) {            if (vs[i].contains("//")) {              v=Integer.parseInt(vt[0]);              n=Integer.parseInt(vt[1]);              if (v < 0)               v=vertex_count + v + 1;              if (n < 0)               n=norm_count + n + 1;              f.vertices[i]=v;              f.normals[i]=n;              has_norm=true;            } else {              v=Integer.parseInt(vt[0]);              t=Integer.parseInt(vt[1]);              if (v < 0)               v=vertex_count + v + 1;              if (t < 0)               t=uv_count + t + 1;              f.vertices[i]=v;              f.uv[i]=t;              has_uv=true;            }          } else           if (vt.length == 3) {            v=Integer.parseInt(vt[0]);            t=Integer.parseInt(vt[1]);            n=Integer.parseInt(vt[2]);            if (v < 0)             v=vertex_count + v + 1;            if (t < 0)             t=uv_count + t + 1;            if (n < 0)             n=norm_count + n + 1;            f.vertices[i]=v;            f.uv[i]=t;            f.normals[i]=n;            has_uv=true;            has_norm=true;          } else           Log.info("ERROR unknown vertex format in file " + objfile.getName() + "["+ line_count+ "]");        } catch (        Exception e) {          Log.info("ERROR unknown vertex format in file " + objfile.getName() + "["+ line_count+ "]: "+ e);        }      }      if (!has_uv)       f.uv=null;      if (!has_norm)       f.normals=null;      f.mtl=material;      if (group == null) {        group=new OBJGroup();        objects.put("",group);        default_object=group;      }      group.faces.add(f);      continue;    }    Log.info("ERROR unknown line in OBJ file " + objfile.getName() + "["+ line_count+ "]: "+ line);  }  in.close();}  }
class C{  public static int padding(int alignCode){  if (alignCode == ALIGN_CODE_NONE)   return 0;  return (MAX_ALIGN_WORDS << FIELD_SHIFT);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  int childLength;  java.util.List result=new java.util.ArrayList();  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.deleteData(30,5);  childData=child.getData();  assertEquals("data","1230 North Ave. Dallas, Texas ",childData);  childLength=(int)child.getLength();  assertEquals("length",30,childLength);}  }
class C{  public MalformedURLException(){}  }
class C{  @Override public void registerResourceFactories(ResourceSet resourceSet){  super.registerResourceFactories(resourceSet);}  }
class C{  public void fill(double o){  double[] objs=this.objs;  int numObjs=this.numObjs;  for (int x=0; x < numObjs; x++)   objs[x]=o;}  }
class C{  public Matrix zoom(float scaleX,float scaleY,float x,float y){  Matrix save=new Matrix();  save.set(mMatrixTouch);  save.postScale(scaleX,scaleY,x,y);  return save;}  }
class C{  public static java.util.Date toDate(String monthStr,String dayStr,String yearStr,String hourStr,String minuteStr,String secondStr){  int month, day, year, hour, minute, second;  try {    month=Integer.parseInt(monthStr);    day=Integer.parseInt(dayStr);    year=Integer.parseInt(yearStr);    hour=Integer.parseInt(hourStr);    minute=Integer.parseInt(minuteStr);    second=Integer.parseInt(secondStr);  } catch (  Exception e) {    return null;  }  return toDate(month,day,year,hour,minute,second);}  }
class C{  Builder reencodeForUri(){  for (int i=0, size=encodedPathSegments.size(); i < size; i++) {    String pathSegment=encodedPathSegments.get(i);    encodedPathSegments.set(i,canonicalize(pathSegment,PATH_SEGMENT_ENCODE_SET_URI,true,true,false,true));  }  if (encodedQueryNamesAndValues != null) {    for (int i=0, size=encodedQueryNamesAndValues.size(); i < size; i++) {      String component=encodedQueryNamesAndValues.get(i);      if (component != null) {        encodedQueryNamesAndValues.set(i,canonicalize(component,QUERY_COMPONENT_ENCODE_SET_URI,true,true,true,true));      }    }  }  if (encodedFragment != null) {    encodedFragment=canonicalize(encodedFragment,FRAGMENT_ENCODE_SET_URI,true,true,false,false);  }  return this;}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  public boolean approveIt(){  log.info(toString());  setIsApproved(true);  return true;}  }
class C{  public void removeListener(Class<? extends Entity> entityClass,Class<?> listenerClass){  lock.writeLock().lock();  try {    Set<String> set=dynamicListeners.get(entityClass);    if (set != null) {      set.remove(listenerClass.getName());    }    cache.clear();  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public static void updateTileEntityField(TileEntity te,String field){  try {    if (NetworkManager_updateTileEntityField == null)     NetworkManager_updateTileEntityField=Class.forName(getPackage() + ".core.network.NetworkManager").getMethod("updateTileEntityField",TileEntity.class,String.class);    if (instance == null)     instance=getInstance();    NetworkManager_updateTileEntityField.invoke(instance,te,field);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public static NumberUnit<Float> toFloatUnit(String string){  if (string == null) {    return null;  }  int firstSpace=findFirstSpace(string);  String beforeSpace=beforeSpace(string,firstSpace);  return new NumberUnit<Float>(new Float(beforeSpace),parseUnit(string,firstSpace));}  }
class C{  @Override public void end(){  super.end();  m_currentPickingPlayer=null;}  }
class C{  public void buildFinalClassLoader(){  for (  Dependency dependency : this.pluginDependencies) {    final Plugin other=getPluginByExtensionId(dependency.getPluginExtensionId());    classLoader.addDependency(other);  }}  }
class C{  public String toHex(){  String hex=Integer.toHexString(toARGB());  if (hex.length() > 6) {    hex=hex.substring(2);  }  return hex;}  }
class C{  protected Extent computeExtent(BoundaryInfo boundary,Vec4 refPoint){  if (boundary == null || boundary.vertices == null)   return null;  Box boundingBox=Box.computeBoundingBox(Arrays.asList(boundary.vertices));  return boundingBox != null ? boundingBox.translate(refPoint) : null;}  }
class C{  public void remove(Production production){  productions.remove(production);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getTraceType_();}  }
class C{  public String readLine(long wait){  long start=System.currentTimeMillis();  while (true) {synchronized (list) {      if (list.size() > 0) {        return list.removeFirst();      }      try {        list.wait(wait);      } catch (      InterruptedException e) {      }      long time=System.currentTimeMillis() - start;      if (time >= wait) {        return null;      }    }  }}  }
class C{  protected void paintNumeric(Graphics gx){  setFonts(gx);  if (m_HorizontalPad == 0) {    setCindex(m_cIndex);  }  int w=this.getWidth();  double rs=15;  double incr=240.0 / (w - (m_HorizontalPad * 2));  int hf=m_labelMetrics.getAscent();  for (int i=m_HorizontalPad; i < (w - m_HorizontalPad); i++) {    Color c=new Color((int)rs,150,(int)(255 - rs));    gx.setColor(c);    gx.drawLine(i,0,i,0 + m_spectrumHeight);    rs+=incr;  }  int whole=(int)Math.abs(m_maxC);  double decimal=Math.abs(m_maxC) - whole;  int nondecimal;  nondecimal=(whole > 0) ? (int)(Math.log(whole) / Math.log(10)) : 1;  m_precisionC=(decimal > 0) ? (int)Math.abs(((Math.log(Math.abs(m_maxC)) / Math.log(10)))) + 2 : 1;  if (m_precisionC > VisualizeUtils.MAX_PRECISION) {    m_precisionC=1;  }  String maxStringC=Utils.doubleToString(m_maxC,nondecimal + 1 + m_precisionC,m_precisionC);  int mswc=m_labelMetrics.stringWidth(maxStringC);  int tmsc=mswc;  if (w > (2 * tmsc)) {    gx.setColor(Color.black);    gx.drawLine(m_HorizontalPad,(m_spectrumHeight + 5),w - m_HorizontalPad,(m_spectrumHeight + 5));    gx.drawLine(w - m_HorizontalPad,(m_spectrumHeight + 5),w - m_HorizontalPad,(m_spectrumHeight + 5 + m_tickSize));    gx.drawString(maxStringC,(w - m_HorizontalPad) - (mswc / 2),(m_spectrumHeight + 5 + m_tickSize+ hf));    gx.drawLine(m_HorizontalPad,(m_spectrumHeight + 5),m_HorizontalPad,(m_spectrumHeight + 5 + m_tickSize));    whole=(int)Math.abs(m_minC);    decimal=Math.abs(m_minC) - whole;    nondecimal=(whole > 0) ? (int)(Math.log(whole) / Math.log(10)) : 1;    m_precisionC=(decimal > 0) ? (int)Math.abs(((Math.log(Math.abs(m_minC)) / Math.log(10)))) + 2 : 1;    if (m_precisionC > VisualizeUtils.MAX_PRECISION) {      m_precisionC=1;    }    maxStringC=Utils.doubleToString(m_minC,nondecimal + 1 + m_precisionC,m_precisionC);    mswc=m_labelMetrics.stringWidth(maxStringC);    gx.drawString(maxStringC,m_HorizontalPad - (mswc / 2),(m_spectrumHeight + 5 + m_tickSize+ hf));    if (w > (3 * tmsc)) {      double mid=m_minC + ((m_maxC - m_minC) / 2.0);      gx.drawLine(m_HorizontalPad + ((w - (2 * m_HorizontalPad)) / 2),(m_spectrumHeight + 5),m_HorizontalPad + ((w - (2 * m_HorizontalPad)) / 2),(m_spectrumHeight + 5 + m_tickSize));      whole=(int)Math.abs(mid);      decimal=Math.abs(mid) - whole;      nondecimal=(whole > 0) ? (int)(Math.log(whole) / Math.log(10)) : 1;      m_precisionC=(decimal > 0) ? (int)Math.abs(((Math.log(Math.abs(mid)) / Math.log(10)))) + 2 : 1;      if (m_precisionC > VisualizeUtils.MAX_PRECISION) {        m_precisionC=1;      }      maxStringC=Utils.doubleToString(mid,nondecimal + 1 + m_precisionC,m_precisionC);      mswc=m_labelMetrics.stringWidth(maxStringC);      gx.drawString(maxStringC,m_HorizontalPad + ((w - (2 * m_HorizontalPad)) / 2) - (mswc / 2),(m_spectrumHeight + 5 + m_tickSize+ hf));    }  }}  }
class C{  public void start(){  if (cameras != null) {    CameraDescriptor camera=cameras.get(currentCamera);    CameraView cv=getPreview(camera);    if (cv.isAvailable()) {      open();    }  }}  }
class C{  public void intersection(double x,double y,double w,double h){  if (status == INVALID)   return;  if (status == EMPTY) {    setClip(x,y,w,h);    status=INUSE;    return;  }  clip[0]=Math.max(clip[0],x);  clip[1]=Math.max(clip[1],y);  clip[6]=Math.min(clip[6],x + w);  clip[7]=Math.min(clip[7],y + h);}  }
class C{  private int actionButton(Button button) throws Exception {  String keyColumn=button.getName();  log.info(keyColumn);  String whereClause="(IsSummary='N' OR IsSummary IS NULL)";  String lookupColumn=keyColumn;  int record_id=m_data.getButtonRecordID(keyColumn);  if ("Account_ID".equals(keyColumn)) {    lookupColumn="C_ElementValue_ID";    MAcctSchemaElement ase=m_data.ASchema.getAcctSchemaElement(X_C_AcctSchema_Element.ELEMENTTYPE_Account);    if (ase != null)     whereClause+=" AND C_Element_ID=" + ase.getC_Element_ID();  } else   if ("User1_ID".equals(keyColumn)) {    lookupColumn="C_ElementValue_ID";    MAcctSchemaElement ase=m_data.ASchema.getAcctSchemaElement(X_C_AcctSchema_Element.ELEMENTTYPE_UserList1);    if (ase != null)     whereClause+=" AND C_Element_ID=" + ase.getC_Element_ID();  } else   if ("User2_ID".equals(keyColumn)) {    lookupColumn="C_ElementValue_ID";    MAcctSchemaElement ase=m_data.ASchema.getAcctSchemaElement(X_C_AcctSchema_Element.ELEMENTTYPE_UserList2);    if (ase != null)     whereClause+=" AND C_Element_ID=" + ase.getC_Element_ID();  } else   if (keyColumn.equals("M_Product_ID")) {    whereClause="";  } else   if (selDocument.isChecked())   whereClause="";  if (button == selRecord)   record_id=m_data.Record_ID; else   record_id=m_data.getButtonRecordID(keyColumn);  String tableName=lookupColumn.substring(0,lookupColumn.length() - 3);  InfoPanel info=InfoPanel.create(m_data.WindowNo,tableName,lookupColumn,record_id,"",false,whereClause);  if (!info.loadedOK()) {    info.dispose();    info=null;    button.setLabel("");    m_data.whereInfo.put(keyColumn,"");    m_data.buttonRecordID.put(keyColumn,null);    return 0;  }  info.setVisible(true);  AEnv.showWindow(info);  boolean isCancelled=info.isCancelled();  boolean isOK=info.isOk();  Integer key=0;  if (isCancelled && !isOK) {    key=0;    if (button == selRecord)     m_data.Record_ID=key.intValue(); else {      m_data.whereInfo.put(keyColumn,"");      m_data.buttonRecordID.put(keyColumn,key.intValue());    }    button.setLabel("");  } else   if (!isCancelled && isOK) {    String selectSQL=info.getSelectedSQL();    key=(Integer)info.getSelectedKey();    log.config(keyColumn + " - " + key);    if (button == selRecord)     m_data.Record_ID=key.intValue(); else {      m_data.whereInfo.put(keyColumn,keyColumn + "=" + key.intValue());      m_data.buttonRecordID.put(keyColumn,key.intValue());    }    button.setLabel(m_data.getButtonText(tableName,lookupColumn,selectSQL));  } else   if (!(isCancelled ^ isOK)) {    if (button == selRecord)     key=m_data.Record_ID=key.intValue(); else     key=m_data.getButtonRecordID(keyColumn);  }  info=null;  return key.intValue();}  }
class C{  public CacheMetricsSnapshot(CacheMetrics m){  reads=m.getCacheGets();  puts=m.getCachePuts();  hits=m.getCacheHits();  misses=m.getCacheMisses();  txCommits=m.getCacheTxCommits();  txRollbacks=m.getCacheTxRollbacks();  evicts=m.getCacheEvictions();  removes=m.getCacheRemovals();  putAvgTimeNanos=m.getAveragePutTime();  getAvgTimeNanos=m.getAverageGetTime();  rmvAvgTimeNanos=m.getAverageRemoveTime();  commitAvgTimeNanos=m.getAverageTxCommitTime();  rollbackAvgTimeNanos=m.getAverageTxRollbackTime();  cacheName=m.name();  overflowSize=m.getOverflowSize();  offHeapGets=m.getOffHeapGets();  offHeapPuts=m.getOffHeapPuts();  offHeapRemoves=m.getOffHeapRemovals();  offHeapEvicts=m.getOffHeapEvictions();  offHeapHits=m.getOffHeapHits();  offHeapMisses=m.getOffHeapMisses();  offHeapEntriesCnt=m.getOffHeapEntriesCount();  offHeapPrimaryEntriesCnt=m.getOffHeapPrimaryEntriesCount();  offHeapBackupEntriesCnt=m.getOffHeapBackupEntriesCount();  offHeapAllocatedSize=m.getOffHeapAllocatedSize();  offHeapMaxSize=m.getOffHeapMaxSize();  swapGets=m.getSwapGets();  swapPuts=m.getSwapPuts();  swapRemoves=m.getSwapRemovals();  swapHits=m.getSwapHits();  swapMisses=m.getSwapMisses();  swapEntriesCnt=m.getSwapEntriesCount();  swapSize=m.getSwapSize();  size=m.getSize();  keySize=m.getKeySize();  isEmpty=m.isEmpty();  dhtEvictQueueCurrSize=m.getDhtEvictQueueCurrentSize();  txThreadMapSize=m.getTxThreadMapSize();  txXidMapSize=m.getTxXidMapSize();  txCommitQueueSize=m.getTxCommitQueueSize();  txPrepareQueueSize=m.getTxPrepareQueueSize();  txStartVerCountsSize=m.getTxStartVersionCountsSize();  txCommittedVersionsSize=m.getTxCommittedVersionsSize();  txRolledbackVersionsSize=m.getTxRolledbackVersionsSize();  txDhtThreadMapSize=m.getTxDhtThreadMapSize();  txDhtXidMapSize=m.getTxDhtXidMapSize();  txDhtCommitQueueSize=m.getTxDhtCommitQueueSize();  txDhtPrepareQueueSize=m.getTxDhtPrepareQueueSize();  txDhtStartVerCountsSize=m.getTxDhtStartVersionCountsSize();  txDhtCommittedVersionsSize=m.getTxDhtCommittedVersionsSize();  txDhtRolledbackVersionsSize=m.getTxDhtRolledbackVersionsSize();  isWriteBehindEnabled=m.isWriteBehindEnabled();  writeBehindFlushSize=m.getWriteBehindFlushSize();  writeBehindFlushThreadCnt=m.getWriteBehindFlushThreadCount();  writeBehindFlushFreq=m.getWriteBehindFlushFrequency();  writeBehindStoreBatchSize=m.getWriteBehindStoreBatchSize();  writeBehindTotalCriticalOverflowCnt=m.getWriteBehindTotalCriticalOverflowCount();  writeBehindCriticalOverflowCnt=m.getWriteBehindCriticalOverflowCount();  writeBehindErrorRetryCnt=m.getWriteBehindErrorRetryCount();  writeBehindBufSize=m.getWriteBehindBufferSize();  keyType=m.getKeyType();  valType=m.getValueType();  isStoreByVal=m.isStoreByValue();  isStatisticsEnabled=m.isStatisticsEnabled();  isManagementEnabled=m.isManagementEnabled();  isReadThrough=m.isReadThrough();  isWriteThrough=m.isWriteThrough();}  }
class C{  public InvertibleComparator(Comparator<T> comparator,boolean ascending){  Assert.notNull(comparator,"Comparator must not be null");  this.comparator=comparator;  setAscending(ascending);}  }
class C{  public Iterator<Item> iterator(){  return new ReverseArrayIterator();}  }
class C{  public Builder sku(String sku){  mSku=sku;  return this;}  }
class C{  public Set<K> keySet(){  Set<K> ks=keySet;  return (ks != null ? ks : (keySet=new KeySet()));}  }
class C{  private void updateTexts(DocumentEvent e){  Document doc=e.getDocument();  if (doc == projectNameTextField.getDocument() || doc == projectLocationTextField.getDocument()) {    String projectName=projectNameTextField.getText();    String projectFolder=projectLocationTextField.getText();    createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);  }  panel.fireChangeEvent();}  }
class C{  public synchronized boolean removeElement(Object object){  int index;  if ((index=indexOf(object,0)) == -1) {    return false;  }  removeElementAt(index);  return true;}  }
class C{  private Tuple<Message,Connection> tryOtherMessages(){  List<Tuple<Message,Connection>> messages=new ArrayList<Tuple<Message,Connection>>();  Collection<Message> msgCollection=getMessageCollection();  for (  Connection con : getConnections()) {    DTNHost other=con.getOtherNode(getHost());    MaxPropRouterWithEstimation othRouter=(MaxPropRouterWithEstimation)other.getRouter();    if (othRouter.isTransferring()) {      continue;    }    for (    Message m : msgCollection) {      if (othRouter.hasMessage(m.getId()) || m.getHops().contains(other)) {        continue;      }      messages.add(new Tuple<Message,Connection>(m,con));    }  }  if (messages.size() == 0) {    return null;  }  Collections.sort(messages,new MaxPropTupleComparator(calcThreshold()));  return tryMessagesForConnected(messages);}  }
class C{  public TextLineDecoder(Charset charset,String delimiter){  this(charset,new LineDelimiter(delimiter));}  }
class C{  public static <A>ListTSeq<A> of(final AnyMSeq<? extends List<A>> monads){  return new ListTSeq<>(monads);}  }
class C{  public static java.lang.String toBinaryString(int i){  return null;}  }
class C{  public HCardParser(File file) throws IOException {  this(file,null);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public ObfuscateCustomizerPanel(ProjectExtensionProperties properties){  this.properties=properties;  initComponents();  loadProperties();  HelpCtx.setHelpIDString(this,"sdk.application_deployment");}  }
class C{  protected boolean isSpdyProxyEnabledForUrl(String url){  if (DataReductionProxySettings.getInstance().isDataReductionProxyEnabled() && url != null && !url.toLowerCase(Locale.US).startsWith("https://") && !isIncognito()) {    return true;  }  return false;}  }
class C{  @Deprecated public SimpleTriggerImpl(String name,Date startTime,Date endTime,int repeatCount,long repeatInterval){  this(name,null,startTime,endTime,repeatCount,repeatInterval);}  }
class C{  public int freeBlocks(int num){  assert num >= 0 : "free blocks must be >= 0 but was: " + num;  final int stop;  final int count;  if (num > freeBlocks) {    stop=0;    count=freeBlocks;  } else {    stop=freeBlocks - num;    count=num;  }  while (freeBlocks > stop) {    freeByteBlocks[--freeBlocks]=null;  }  bytesUsed.addAndGet(-count * blockSize);  assert bytesUsed.get() >= 0;  return count;}  }
class C{  public JSONObject(JSONTokener x) throws JSONException {  this();  char c;  String key;  if (x.nextClean() != '{') {    throw x.syntaxError("A JSONObject text must begin with '{'");  }  for (; ; ) {    c=x.nextClean();switch (c) {case 0:      throw x.syntaxError("A JSONObject text must end with '}'");case '}':    return;default :  x.back();key=x.nextValue().toString();}c=x.nextClean();if (c != ':') {throw x.syntaxError("Expected a ':' after a key");}this.putOnce(key,x.nextValue());switch (x.nextClean()) {case ';':case ',':if (x.nextClean() == '}') {return;}x.back();break;case '}':return;default :throw x.syntaxError("Expected a ',' or '}'");}}}  }
class C{  @Override public void processUrlViewIntent(String url,String referer,String headers,TabOpenType tabOpenType,String externalAppId,int tabIdToBringToFront,boolean hasUserGesture,Intent intent){  TabModel tabModel=getCurrentTabModel();switch (tabOpenType) {case REUSE_URL_MATCHING_TAB_ELSE_NEW_TAB:    if (tabModel.getCount() > 0 && mUIInitialized && mLayoutManager.overviewVisible()) {      mLayoutManager.hideOverview(true);    }  mTabModelSelectorImpl.tryToRestoreTabStateForUrl(url);int tabToBeClobberedIndex=TabModelUtils.getTabIndexByUrl(tabModel,url);Tab tabToBeClobbered=tabModel.getTabAt(tabToBeClobberedIndex);if (tabToBeClobbered != null) {TabModelUtils.setIndex(tabModel,tabToBeClobberedIndex);tabToBeClobbered.reload();RecordUserAction.record("MobileTabClobbered");} else {launchIntent(url,referer,headers,externalAppId,true,intent);}RecordUserAction.record("MobileReceivedExternalIntent");int shortcutSource=intent.getIntExtra(ShortcutHelper.EXTRA_SOURCE,ShortcutSource.UNKNOWN);LaunchMetrics.recordHomeScreenLaunchIntoTab(url,shortcutSource);break;case REUSE_APP_ID_MATCHING_TAB_ELSE_NEW_TAB:launchIntent(url,referer,headers,externalAppId,false,intent);RecordUserAction.record("MobileReceivedExternalIntent");break;case BRING_TAB_TO_FRONT:mTabModelSelectorImpl.tryToRestoreTabStateForId(tabIdToBringToFront);int tabIndex=TabModelUtils.getTabIndexById(tabModel,tabIdToBringToFront);if (tabIndex == TabModel.INVALID_TAB_INDEX) {TabModel otherModel=getTabModelSelector().getModel(!tabModel.isIncognito());tabIndex=TabModelUtils.getTabIndexById(otherModel,tabIdToBringToFront);if (tabIndex != TabModel.INVALID_TAB_INDEX) {getTabModelSelector().selectModel(otherModel.isIncognito());TabModelUtils.setIndex(otherModel,tabIndex);}} else {TabModelUtils.setIndex(tabModel,tabIndex);}RecordUserAction.record("MobileReceivedExternalIntent");break;case CLOBBER_CURRENT_TAB:ChromeTab currentTab=ChromeTab.fromTab(getActivityTab());if (currentTab != null) {currentTab.getTabRedirectHandler().updateIntent(intent);int transitionType=PageTransition.LINK | PageTransition.FROM_API;LoadUrlParams loadUrlParams=new LoadUrlParams(url,transitionType);loadUrlParams.setIntentReceivedTimestamp(mIntentHandlingTimeMs);loadUrlParams.setHasUserGesture(hasUserGesture);currentTab.loadUrl(loadUrlParams);RecordUserAction.record("MobileTabClobbered");} else {launchIntent(url,referer,headers,externalAppId,true,intent);}break;case OPEN_NEW_TAB:launchIntent(url,referer,headers,externalAppId,true,intent);RecordUserAction.record("MobileReceivedExternalIntent");break;case OPEN_NEW_INCOGNITO_TAB:if (url == null || url.equals(UrlConstants.NTP_URL)) {if (TextUtils.equals(externalAppId,getPackageName())) {getTabCreator(true).launchUrl(UrlConstants.NTP_URL,TabLaunchType.FROM_MENU_OR_OVERVIEW);} else {getTabCreator(true).launchUrl(UrlConstants.NTP_URL,TabLaunchType.FROM_EXTERNAL_APP);RecordUserAction.record("MobileReceivedExternalIntent");}} else {if (TextUtils.equals(externalAppId,getPackageName())) {getTabCreator(true).launchUrl(url,TabLaunchType.FROM_LINK,intent,mIntentHandlingTimeMs);} else {getTabCreator(true).launchUrlFromExternalApp(url,referer,headers,externalAppId,true,intent,mIntentHandlingTimeMs);RecordUserAction.record("MobileReceivedExternalIntent");}}break;default :assert false : "Unknown TabOpenType: " + tabOpenType;break;}getToolbarManager().setUrlBarFocus(false);}  }
class C{  public JarException(String s){  super(s);}  }
class C{  public EnumMemberValue(ConstPool cp){  super('e',cp);  typeIndex=valueIndex=0;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void showAuthCommonErrorMessage(){  CommonDialogUtils.stopProgressDialog(progressDialog);  CommonDialogUtils.getAlertDialogWithOneButtonAndTitle(context,getResources().getString(R.string.title_head_authentication_error),getResources().getString(R.string.error_for_all_unknown_authentication_failures),getResources().getString(R.string.button_ok),null);}  }
class C{  public SizeVariantSpinnerAdapter(Context context,List<ProductVariant> sizes){  super(context,layoutID,sizes);  this.productSizeList=sizes;  this.layoutInflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);}  }
class C{  protected DecoratingClientFactory(ClientFactory delegate){  this.delegate=requireNonNull(delegate,"delegate");}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FssRepInfo[");  buffer.append("m_type = ").append(m_type);  buffer.append(", m_os = ").append(m_os);  buffer.append(", m_path = ").append(m_path);  buffer.append(", m_srv = ").append(m_srv);  buffer.append(", m_port = ").append(m_port);  buffer.append(", m_usr = ").append(m_usr);  buffer.append(", m_pwd = ").append(m_pwd);  buffer.append(", m_flags = ").append(m_flags);  buffer.append("]");  return buffer.toString();}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MInventoryLineMA[");  sb.append("M_InventoryLine_ID=").append(getM_InventoryLine_ID()).append(",M_AttributeSetInstance_ID=").append(getM_AttributeSetInstance_ID()).append(", Qty=").append(getMovementQty()).append("]");  return sb.toString();}  }
class C{  public void addBee(@Nonnull Item bee,int meta){  logger.debug("Adding Bee {%s}:%d",bee,meta);  beesList.add(new ItemKey(bee,meta));}  }
class C{  private static MatrixBlock transpose(MatrixBlock in,MatrixBlock out) throws DMLRuntimeException {  if (out == null)   out=new MatrixBlock(in.getNumColumns(),in.getNumRows(),in.getNonZeros()); else   out.reset(in.getNumColumns(),in.getNumRows(),in.getNonZeros());  return LibMatrixReorg.transpose(in,out);}  }
class C{  public void saveParser(LRParser parser){  try {    FileOutputStream fos=new FileOutputStream(fFileName);    ObjectOutputStream oos=new ObjectOutputStream(fos);    oos.useProtocolVersion(ObjectOutputStream.PROTOCOL_VERSION_1);    oos.writeObject(parser);    fos.close();    oos.close();  } catch (  FileNotFoundException fnfe) {    System.err.println("FileNotFoundException " + fnfe.getMessage());  }catch (  IOException ioe) {    System.err.println("IOException " + ioe.getMessage());    ioe.printStackTrace();  }}  }
class C{  public AttributeSet addAttributes(AttributeSet old,AttributeSet attr){  if (!(attr instanceof HTMLDocument.TaggedAttributeSet)) {    old=removeHTMLTags(old,attr);  }  return super.addAttributes(old,convertAttributeSet(attr));}  }
class C{  public static Attribute parseAttributeDef(ActionAST action,Pair<String,Integer> decl,Grammar g){  if (decl.a == null)   return null;  Attribute attr=new Attribute();  boolean inID=false;  int start=-1;  int rightEdgeOfDeclarator=decl.a.length() - 1;  int equalsIndex=decl.a.indexOf('=');  if (equalsIndex > 0) {    attr.initValue=decl.a.substring(equalsIndex + 1,decl.a.length());    rightEdgeOfDeclarator=equalsIndex - 1;  }  for (int i=rightEdgeOfDeclarator; i >= 0; i--) {    if (!inID && Character.isLetterOrDigit(decl.a.charAt(i))) {      inID=true;    } else     if (inID && !(Character.isLetterOrDigit(decl.a.charAt(i)) || decl.a.charAt(i) == '_')) {      start=i + 1;      break;    }  }  if (start < 0 && inID) {    start=0;  }  if (start < 0) {    g.tool.errMgr.grammarError(ErrorType.CANNOT_FIND_ATTRIBUTE_NAME_IN_DECL,g.fileName,action.token,decl);  }  int stop=-1;  for (int i=start; i <= rightEdgeOfDeclarator; i++) {    if (!(Character.isLetterOrDigit(decl.a.charAt(i)) || decl.a.charAt(i) == '_')) {      stop=i;      break;    }    if (i == rightEdgeOfDeclarator) {      stop=i + 1;    }  }  attr.name=decl.a.substring(start,stop);  attr.type=decl.a.substring(0,start);  if (stop <= rightEdgeOfDeclarator) {    attr.type+=decl.a.substring(stop,rightEdgeOfDeclarator + 1);  }  attr.type=attr.type.trim();  if (attr.type.length() == 0) {    attr.type=null;  }  attr.decl=decl.a;  if (action != null) {    String actionText=action.getText();    int[] lines=new int[actionText.length()];    int[] charPositionInLines=new int[actionText.length()];    for (int i=0, line=0, col=0; i < actionText.length(); i++, col++) {      lines[i]=line;      charPositionInLines[i]=col;      if (actionText.charAt(i) == '\n') {        line++;        col=-1;      }    }    int[] charIndexes=new int[actionText.length()];    for (int i=0, j=0; i < actionText.length(); i++, j++) {      charIndexes[j]=i;      if (i < actionText.length() - 1 && actionText.charAt(i) == '/' && actionText.charAt(i + 1) == '/') {        while (i < actionText.length() && actionText.charAt(i) != '\n') {          i++;        }      }    }    int declOffset=charIndexes[decl.b];    int declLine=lines[declOffset + start];    int line=action.getToken().getLine() + declLine;    int charPositionInLine=charPositionInLines[declOffset + start];    if (declLine == 0) {      charPositionInLine+=action.getToken().getCharPositionInLine() + 1;    }    int offset=((CommonToken)action.getToken()).getStartIndex();    attr.token=new CommonToken(action.getToken().getInputStream(),ANTLRParser.ID,BaseRecognizer.DEFAULT_TOKEN_CHANNEL,offset + declOffset + start+ 1,offset + declOffset + stop);    attr.token.setLine(line);    attr.token.setCharPositionInLine(charPositionInLine);    assert attr.name.equals(attr.token.getText()) : "Attribute text should match the pseudo-token text at this point.";  }  return attr;}  }
class C{  public CmpgExpr newCmpgExpr(Value op1,Value op2){  return new JCmpgExpr(op1,op2);}  }
class C{  public MLOutput execute(String dmlScriptFilePath) throws IOException, DMLException, ParseException {  return execute(dmlScriptFilePath,false,null);}  }
class C{  public LogMessage(String template,int code){  this(template,null,EMPTY_STRING_ARRAY,code,Optional.empty());}  }
class C{  private void startField(Attributes atts){  String name=atts.getValue(NAME);  String value=atts.getValue(VALUE);  pw.println("<tr valign=\"top\">");  pw.println("  <td></td>");  pw.println("  <td width=\"10\"></td>");  pw.println("  <td colspan=\"2\">" + name + "</td>");  pw.println("  <td colspan=\"2\">" + value + "</td>");  pw.println("</tr>");}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB) public Spinner(@NonNull final Context context,@Nullable final AttributeSet attributeSet,final int defaultStyle){  super(context,attributeSet,defaultStyle);  initialize(attributeSet);}  }
class C{  private File createTempFile(String suffix) throws IOException {  String prefix="gerrit_test_";  if (!Strings.isNullOrEmpty(getName())) {    prefix+=getName() + "_";  }  File tmp=File.createTempFile(prefix,suffix);  toCleanup.add(tmp);  return tmp;}  }
class C{  public LinkedList<Patch> patch_make(LinkedList<Diff> diffs){  if (diffs == null) {    throw new IllegalArgumentException("Null inputs. (patch_make)");  }  String text1=diff_text1(diffs);  return patch_make(text1,diffs);}  }
class C{  protected void DFS(BasicBlock block){  push(block);  recurse:   while (!empty()) {    block=peek();    if (DEBUG) {      System.out.println(" Processing (peek)" + block);    }    if (block == null) {      if (DEBUG) {        System.out.println(" Popping");      }      pop();      continue;    }    if (forward && block == cfg.exit()) {      if (DEBUG) {        System.out.println(" Popping");      }      pop();      continue;    }    Enumeration<BasicBlock> e;    e=LTDominatorInfo.getInfo(block,ir).getEnum();    if (e == null) {      if (DEBUG) {        System.out.println(" Initial processing of " + block);      }      DFSCounter++;      LTDominatorInfo.getInfo(block,ir).setSemiDominator(DFSCounter);      vertex[DFSCounter]=block;      e=getNextNodes(block);    } else {      if (DEBUG) {        System.out.println(" Resuming processing of " + block);      }    }    while (e.hasMoreElements()) {      BasicBlock next=e.nextElement();      if (DEBUG) {        System.out.println("    Inspecting next node: " + next);      }      if (forward && next.isExit()) {        continue;      }      if (getSemi(next) == 0) {        LTDominatorInfo.getInfo(next,ir).setParent(block);        LTDominatorInfo.getInfo(block,ir).setEnum(e);        if (DEBUG) {          System.out.println(" Pushing" + next);        }        push(next);        continue recurse;      }    }    if (DEBUG) {      System.out.println(" Popping");    }    pop();  }}  }
class C{  private boolean isMessageForMe(UpdateMessage msg){  if (msg == null) {    return false;  }  return isMessageEligibleForMyOs(msg) && isMessageEligibleForMyLang(msg) && isMessageEligibleForMyVersion(msg);}  }
class C{  public JSONWriter key(String string) throws JSONException {  if (string == null) {    throw new JSONException("Null key.");  }  if (this.mode == 'k') {    try {      this.stack[this.top - 1].putOnce(string,Boolean.TRUE);      if (this.comma) {        this.writer.write(',');      }      this.writer.write(JSONObject.quote(string));      this.writer.write(':');      this.comma=false;      this.mode='o';      return this;    } catch (    IOException e) {      throw new JSONException(e);    }  }  throw new JSONException("Misplaced key.");}  }
class C{  protected void calculatePartialsPartialsPruning(double[] partials1,double[] matrices1,double[] partials2,double[] matrices2,double[] partials3){  double sum1, sum2;  int u=0;  int v=0;  int w=0;  int x, y;  for (int l=0; l < matrixCount; l++) {    for (int k=0; k < patternCount; k++) {      x=w;      for (int i=0; i < 20; i++) {        y=v;        sum1=matrices1[x] * partials1[y];        sum2=matrices2[x] * partials2[y];        x++;        y++;        sum1+=matrices1[x] * partials1[y];        sum2+=matrices2[x] * partials2[y];        x++;        y++;        sum1+=matrices1[x] * partials1[y];        sum2+=matrices2[x] * partials2[y];        x++;        y++;        sum1+=matrices1[x] * partials1[y];        sum2+=matrices2[x] * partials2[y];        x++;        y++;        sum1+=matrices1[x] * partials1[y];        sum2+=matrices2[x] * partials2[y];        x++;        y++;        sum1+=matrices1[x] * partials1[y];        sum2+=matrices2[x] * partials2[y];        x++;        y++;        sum1+=matrices1[x] * partials1[y];        sum2+=matrices2[x] * partials2[y];        x++;        y++;        sum1+=matrices1[x] * partials1[y];        sum2+=matrices2[x] * partials2[y];        x++;        y++;        sum1+=matrices1[x] * partials1[y];        sum2+=matrices2[x] * partials2[y];        x++;        y++;        sum1+=matrices1[x] * partials1[y];        sum2+=matrices2[x] * partials2[y];        x++;        y++;        sum1+=matrices1[x] * partials1[y];        sum2+=matrices2[x] * partials2[y];        x++;        y++;        sum1+=matrices1[x] * partials1[y];        sum2+=matrices2[x] * partials2[y];        x++;        y++;        sum1+=matrices1[x] * partials1[y];        sum2+=matrices2[x] * partials2[y];        x++;        y++;        sum1+=matrices1[x] * partials1[y];        sum2+=matrices2[x] * partials2[y];        x++;        y++;        sum1+=matrices1[x] * partials1[y];        sum2+=matrices2[x] * partials2[y];        x++;        y++;        sum1+=matrices1[x] * partials1[y];        sum2+=matrices2[x] * partials2[y];        x++;        y++;        sum1+=matrices1[x] * partials1[y];        sum2+=matrices2[x] * partials2[y];        x++;        y++;        sum1+=matrices1[x] * partials1[y];        sum2+=matrices2[x] * partials2[y];        x++;        y++;        sum1+=matrices1[x] * partials1[y];        sum2+=matrices2[x] * partials2[y];        x++;        y++;        sum1+=matrices1[x] * partials1[y];        sum2+=matrices2[x] * partials2[y];        x++;        y++;        partials3[u]=sum1 * sum2;        u++;      }      v+=20;    }    w+=matrixSize;  }}  }
class C{  private void createRasterFrameBufferObject(){  this.fbo=glGenFramebuffers();  this.depthBuffer=glGenRenderbuffers();  glBindFramebuffer(GL_FRAMEBUFFER,fbo);  IntBuffer renderBuffers=BufferUtils.createIntBuffer(2).put(GL_COLOR_ATTACHMENT0).put(GL_COLOR_ATTACHMENT1);  renderBuffers.flip();  glDrawBuffers(renderBuffers);  glBindRenderbuffer(GL_RENDERBUFFER,depthBuffer);  glRenderbufferStorage(GL_RENDERBUFFER,GL_DEPTH_COMPONENT,width,height);  glFramebufferTexture2D(GL_FRAMEBUFFER,GL_COLOR_ATTACHMENT0,GL_TEXTURE_2D,positionTexture,0);  glFramebufferTexture2D(GL_FRAMEBUFFER,GL_COLOR_ATTACHMENT1,GL_TEXTURE_2D,normalTexture,0);  glFramebufferRenderbuffer(GL_FRAMEBUFFER,GL_DEPTH_ATTACHMENT,GL_RENDERBUFFER,depthBuffer);  int fboStatus=glCheckFramebufferStatus(GL_FRAMEBUFFER);  if (fboStatus != GL_FRAMEBUFFER_COMPLETE) {    throw new AssertionError("Could not create FBO: " + fboStatus);  }  glBindFramebuffer(GL_FRAMEBUFFER,0);  glBindRenderbuffer(GL_RENDERBUFFER,0);}  }
class C{  public void infoSQL(String sql,String params,int count,long time){  if (!isEnabled(TraceSystem.INFO)) {    return;  }  StringBuilder buff=new StringBuilder(sql.length() + params.length() + 20);  buff.append("/*SQL");  boolean space=false;  if (params.length() > 0) {    space=true;    buff.append(" l:").append(sql.length());  }  if (count > 0) {    space=true;    buff.append(" r:").append(count);  }  if (time > 0) {    space=true;    buff.append(" t:").append(time);  }  if (!space) {    buff.append(' ');  }  buff.append("*/").append(StringUtils.javaEncode(sql)).append(StringUtils.javaEncode(params)).append(';');  sql=buff.toString();  traceWriter.write(TraceSystem.INFO,sql,null);}  }
class C{  private void loadBasisOfRecordMapFromVocabulary(){  if (basisOfRecords == null) {    basisOfRecords=new HashMap<String,String>();    basisOfRecords.putAll(vocabManager.getI18nVocab(Constants.VOCAB_URI_BASIS_OF_RECORDS,Locale.ENGLISH.getLanguage(),false));    basisOfRecords=MapUtils.getMapWithLowercaseKeys(basisOfRecords);  }}  }
class C{  public RectF toPreviewSpace(RectF source){  RectF result=new RectF();  mCameraToPreviewTransform.mapRect(result,source);  return result;}  }
class C{  public int size(){  return listeners.length;}  }
class C{  public void resetOffset(String pipelineName,String rev) throws ApiException {  Object postBody=null;  byte[] postBinaryBody=null;  if (pipelineName == null) {    throw new ApiException(400,"Missing the required parameter 'pipelineName' when calling resetOffset");  }  String path="/v1/pipeline/{pipelineName}/resetOffset".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pipelineName" + "\\}",apiClient.escapeString(pipelineName.toString()));  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,Object> formParams=new HashMap<String,Object>();  queryParams.addAll(apiClient.parameterToPairs("","rev",rev));  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  String[] authNames=new String[]{"basic"};  apiClient.invokeAPI(path,"POST",queryParams,postBody,postBinaryBody,headerParams,formParams,accept,contentType,authNames,null);}  }
class C{  private void updateHubHeartbeatSelf(){  _isHubHeartbeatSelf=true;  if (_hubHeartbeatCount < 2) {    for (    Result<Boolean> result : _hubHeartbeatList) {      result.ok(true);    }    _hubHeartbeatList.clear();  }}  }
class C{  private void drawFrequencyLine(Graphics2D graphics,float xaxis,Color color){  graphics.setColor(color);  graphics.draw(new Line2D.Float(xaxis,0,xaxis,(float)(getSize().getHeight()) - mSpectrumInset));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Long(Sage.getDiskFreeSpace(getString(stack)));}  }
class C{  public static Map<String,Object> cloneDelegateAndGetContent(Closure<?> c){  JsonDelegate delegate=new JsonDelegate();  Closure<?> cloned=(Closure<?>)c.clone();  cloned.setDelegate(delegate);  cloned.setResolveStrategy(Closure.DELEGATE_FIRST);  cloned.call();  return delegate.getContent();}  }
class C{  private static RetainFragment findOrCreateRetainFragment(FragmentManager fm){  RetainFragment mRetainFragment=(RetainFragment)fm.findFragmentByTag(TAG);  if (mRetainFragment == null) {    mRetainFragment=new RetainFragment();    fm.beginTransaction().add(mRetainFragment,TAG).commitAllowingStateLoss();  }  return mRetainFragment;}  }
class C{  public float baselineTf(float freq){  if (0.0f == freq)   return 0.0f;  return (freq <= tf_min) ? tf_base : (float)Math.sqrt(freq + (tf_base * tf_base) - tf_min);}  }
class C{  public boolean isDisableMigrations(){  return disableMigrations;}  }
class C{  public String read(){  StringBuffer text=new StringBuffer((int)file.length());  try {    FileReader fr=new FileReader(file);    BufferedReader b=new BufferedReader(fr);    boolean eof=false;    String line;    String ret="\n";    while (!eof) {      line=b.readLine();      if (line == null) {        eof=true;      } else {        text.append(line);        text.append(ret);      }    }    b.close();  } catch (  IOException e) {    throw new IllegalArgumentException("File " + file.getName() + " is unreadable : "+ e.toString());  }  return text.toString();}  }
class C{  public void writeRawLittleEndian64(final long value) throws IOException {  writeRawByte((int)(value) & 0xFF);  writeRawByte((int)(value >> 8) & 0xFF);  writeRawByte((int)(value >> 16) & 0xFF);  writeRawByte((int)(value >> 24) & 0xFF);  writeRawByte((int)(value >> 32) & 0xFF);  writeRawByte((int)(value >> 40) & 0xFF);  writeRawByte((int)(value >> 48) & 0xFF);  writeRawByte((int)(value >> 56) & 0xFF);}  }
class C{  public Vector3f divideLocal(Vector3f scalar){  x/=scalar.x;  y/=scalar.y;  z/=scalar.z;  return this;}  }
class C{  public void shuffle(java.util.Random random){  double[] objs=this.objs;  int numObjs=this.numObjs;  double obj;  int rand;  for (int x=numObjs - 1; x >= 1; x--) {    rand=random.nextInt(x + 1);    obj=objs[x];    objs[x]=objs[rand];    objs[rand]=obj;  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  void copy(WebappInfo newInfo){  mIsInitialized=newInfo.mIsInitialized;  mEncodedIcon=newInfo.mEncodedIcon;  mDecodedIcon=newInfo.mDecodedIcon;  mId=newInfo.mId;  mUri=newInfo.mUri;  mName=newInfo.mName;  mShortName=newInfo.mShortName;  mOrientation=newInfo.mOrientation;  mSource=newInfo.mSource;  mThemeColor=newInfo.mThemeColor;  mBackgroundColor=newInfo.mBackgroundColor;}  }
class C{  private boolean hasSearchableColumns(){  boolean retValue=false;  m_tableName=MQuery.getZoomTableName(m_columnName);  m_keyColumnName=MQuery.getZoomColumnName(m_columnName);  if (m_columnName.equals("M_Product_ID") || m_columnName.equals("C_BPartner_ID") || m_columnName.equals("C_Order_ID")|| m_columnName.equals("C_Invoice_ID")|| m_columnName.equals("M_InOut_ID")|| m_columnName.equals("C_Payment_ID")|| m_columnName.equals("GL_JournalBatch_ID")|| m_columnName.equals("SalesRep_ID")) {    retValue=true;  } else {    String query="SELECT t.TableName, c.ColumnName " + "FROM AD_Column c " + " INNER JOIN AD_Table t ON (c.AD_Table_ID=t.AD_Table_ID AND t.IsView='N')"+ " WHERE (c.ColumnName IN ('DocumentNo', 'Value', 'Name') OR c.IsIdentifier='Y')"+ " AND c.AD_Reference_ID IN (10,14)"+ " AND EXISTS (SELECT * FROM AD_Column cc WHERE cc.AD_Table_ID=t.AD_Table_ID"+ " AND cc.IsKey='Y' AND cc.ColumnName=?)";    PreparedStatement pstmt=null;    ResultSet rs=null;    try {      pstmt=DB.prepareStatement(query,null);      pstmt.setString(1,m_keyColumnName);      rs=pstmt.executeQuery();      if (rs.next()) {        retValue=true;      }    } catch (    SQLException ex) {      log.log(Level.SEVERE,query,ex);    } finally {      DB.close(rs,pstmt);      rs=null;      pstmt=null;    }  }  return retValue;}  }
class C{  @Nonnull public BugInstance addClass(@SlashedClassName(when=When.UNKNOWN) String className){  ClassAnnotation classAnnotation=new ClassAnnotation(ClassName.toDottedClassName(className));  add(classAnnotation);  return this;}  }
class C{  public void mapExportMaskToExportGroup(URI exportMask,ExportGroup exportGroup){  maskExportGroupMap.put(exportMask,exportGroup);}  }
class C{  public static String classNameToSignature(String name){  int nameLength=name.length();  int colonPos=1 + nameLength;  char[] buf=new char[colonPos + 1];  buf[0]='L';  buf[colonPos]=';';  name.getChars(0,nameLength,buf,1);  for (int i=1; i != colonPos; ++i) {    if (buf[i] == '.') {      buf[i]='/';    }  }  return new String(buf,0,colonPos + 1);}  }
class C{  public static void addDirToClasspath(File directory) throws IOException {  if (directory.exists()) {    File[] files=directory.listFiles();    for (int i=0; i < files.length; i++) {      File file=files[i];      addURL(file.toURI().toURL());    }  } else {    System.err.println("The directory \"" + directory + "\" does not exist!");  }}  }
class C{  public boolean contains(long version){  if (version <= this.previousVersion) {    return false;  }  return (this.received != null && (this.received.contains(version)));}  }
class C{  public static <T>Consumer<T> wrap(Consumer<T> w){  TaskContext c=current();  if (c != null) {    return null;  }  return w;}  }
class C{  Node(E item){  UNSAFE.putObject(this,itemOffset,item);}  }
class C{  @Override public void onDraw(Canvas canvas){  mLastDrawTimeMs=System.currentTimeMillis();  super.onDraw(canvas);}  }
class C{  public void removed(Container cont){  OMGraphicList list=getList();  if (list != null) {    list.clear();    list=null;  }  if (spatialIndex != null) {    spatialIndex.close(true);  }}  }
class C{  private static @Nonnull URL[] createClassloaderUrls(@Nonnull URL url) throws PluginException {  List<URL> urls=new ArrayList<URL>();  urls.add(url);  Manifest mf=null;  File f=new File(url.getPath());  if (!f.isDirectory()) {    JarInputStream jis=null;    try {      jis=new JarInputStream(url.openStream());      mf=jis.getManifest();    } catch (    IOException ioe) {      throw new PluginException("Failed loading manifest for plugin jar: " + url,ioe);    } finally {      IO.close(jis);    }  } else {    File manifest=guessManifest(f);    if (manifest != null) {      FileInputStream is=null;      try {        is=new FileInputStream(manifest);        mf=new Manifest(is);      } catch (      IOException e) {        throw new PluginException("Failed loading manifest for plugin jar: " + url,e);      } finally {        IO.close(is);      }    }  }  if (mf != null) {    try {      addClassPathFromManifest(url,urls,mf);    } catch (    MalformedURLException e) {      throw new PluginException("Failed loading manifest for plugin jar: " + url,e);    }  }  return urls.toArray(new URL[urls.size()]);}  }
class C{  public boolean isSetPaymentTerm(){  Object oo=get_Value(COLUMNNAME_IsSetPaymentTerm);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public FluentBiFunction<T1,T2,R> after(final TriConsumer<T1,T2,R> action){  return withFn(null);}  }
class C{  public static URI resolve(final URI baseURI,URI reference){  if (baseURI == null) {    throw new IllegalArgumentException("Base URI may nor be null");  }  if (reference == null) {    throw new IllegalArgumentException("Reference URI may nor be null");  }  boolean emptyReference=reference.toString().length() == 0;  if (emptyReference) {    reference=URI.create("#");  }  URI resolved=baseURI.resolve(reference);  if (emptyReference) {    String resolvedString=resolved.toString();    resolved=URI.create(resolvedString.substring(0,resolvedString.indexOf('#')));  }  return resolved;}  }
class C{  private void updateList(){  listModel=new ThreadListModel<ListItem>();  for (int i=1; i <= workspace.getUpdater().getNumThreads(); i++) {    ListItem label=new ListItem("Thread " + i);    listModel.add(label);  }  list.setModel(listModel);  updaterNumThreads.setText("" + workspace.getUpdater().getNumThreads());}  }
class C{  protected final <StsResponseType>StsResponseType parseStsResponse(Node soapResponseNode,Class<StsResponseType> responseType,boolean skipValidation) throws ParserException {  JAXBElement<StsResponseType> jaxbParserResult;  try {    Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();    if (!skipValidation) {      unmarshaller.setSchema(wsTrustSchema);    }    jaxbParserResult=unmarshaller.unmarshal(soapResponseNode,responseType);  } catch (  JAXBException e) {    String message="Error parsing the response document";    log.debug(message);    throw new ParserException(message,e);  }  log.debug("Parsing the responce object to JAXB classes completed");  return jaxbParserResult.getValue();}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  assert digester.peek() instanceof ManagedBeanBean : "Assertion Error: Expected ManagedBeanBean to be at the top of the stack";  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[ManagedPropertyRule]{" + digester.getMatch() + "} Push "+ CLASS_NAME);  }  Class clazz=digester.getClassLoader().loadClass(CLASS_NAME);  ManagedPropertyBean mpb=(ManagedPropertyBean)clazz.newInstance();  digester.push(mpb);}  }
class C{  private void loadData(){  showProgressBar(true);  sHandler.postDelayed(mRunnable,MOCK_LOAD_DATA_DELAYED_TIME);}  }
class C{  public static byte[] decode(final String s){  return Base64.decode(s,Base64.NO_OPTIONS);}  }
class C{  public static final int blue(int color){  return color & 0xFF;}  }
class C{  public QueryIndex(String field){  this(field,QueryIndexType.SORTED,true);}  }
class C{  public static <Type>Validator<Type> negate(@NonNull final Context context,@StringRes final int resourceId,@NonNull final Validator<Type> validator){  return NegateValidator.create(context,resourceId,validator);}  }
class C{  public static void clearObligationMarkers(IResource resource) throws CoreException {  if (resource.exists()) {    resource.deleteMarkers(OBLIGATION_MARKER,false,IResource.DEPTH_ONE);  }}  }
class C{  public static void checkFieldMinimum(final long value,final long minimum,final String fieldName){  checkFieldMinimum(value,minimum,"",fieldName);}  }
class C{  public BlockFactory(Context context){  mResources=context.getResources();}  }
class C{  public boolean isChainFileLocked() throws IOException {  RandomAccessFile file2=null;  try {    File file=new File(directory,filePrefix + ".spvchain");    if (!file.exists())     return false;    if (file.isDirectory())     return false;    file2=new RandomAccessFile(file,"rw");    FileLock lock=file2.getChannel().tryLock();    if (lock == null)     return true;    lock.release();    return false;  }  finally {    if (file2 != null)     file2.close();  }}  }
class C{  private void writeNewUpdateProperties() throws IOException {  PrintStream ps=new PrintStream(new FileOutputStream(newFile));  UpdatePropertiesWriter writer=new UpdatePropertiesWriter(prop,ps);  writer.process();  ps.close();}  }
class C{  public static float[] centeredCubeBounds(float[] target,float w,float d,float h){  final float x=(1 - w) / 2;  final float y=(1 - d) / 2;  final float z=(1 - h) / 2;  return cubeToBounds(target,x,y,z,w,d,h);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(", variadic: ");  result.append(variadic);  result.append(')');  return result.toString();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.STATEMENT__KEY:    return getKey();case GamlPackage.STATEMENT__FIRST_FACET:  return getFirstFacet();case GamlPackage.STATEMENT__EXPR:return getExpr();case GamlPackage.STATEMENT__FACETS:return getFacets();case GamlPackage.STATEMENT__BLOCK:return getBlock();}return super.eGet(featureID,resolve,coreType);}  }
class C{  void appendChild(NewElement newElement,Element relatedToNew,Element parent){  final int level=level(parent) + 1;  final int lengthBefore=xml.length;  final int insertHere=lastIndexOf(xml,'>',parent.end.left) + 1;  xml=insertInto(xml,insertHere,'\n' + tabulate(newElement.asString(),level));  shiftSegments(insertHere,xml.length - lengthBefore);  applySegments(newElement,relatedToNew,insertHere - 1,level);  registerElement(relatedToNew);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  @Override public Version version(){  return VersionUtil.versionFor(getClass());}  }
class C{  public void checkMsrpTransactionInfo(){  if (mTransactionInfoMap != null) {    List<MsrpTransactionInfo> msrpTransactionInfos;synchronized (mTransactionMsgIdMapLock) {      msrpTransactionInfos=new ArrayList<>(mTransactionInfoMap.values());    }    for (    MsrpTransactionInfo msrpTransactionInfo : msrpTransactionInfos) {      long delta=System.currentTimeMillis() - msrpTransactionInfo.mTimestamp;      if ((delta >= TRANSACTION_INFO_EXPIRY_PERIOD) || (delta < 0)) {        if (sLogger.isActivated()) {          sLogger.debug("Transaction info have expired (transactionId: " + msrpTransactionInfo.mTransactionId + ", msgId: "+ msrpTransactionInfo.mMsrpMsgId+ ")");        }        mTransactionInfoMap.remove(msrpTransactionInfo.mTransactionId);        if (mMessageTransactionMap != null) {          mMessageTransactionMap.remove(msrpTransactionInfo.mMsrpMsgId);        }      }    }  }}  }
class C{  public BasicTextFieldUI(){  super();}  }
class C{  public AbstractMRMessage encodeForHardware(CanMessage m){  GridConnectMessage ret=new GridConnectMessage(m);  return ret;}  }
class C{  private void saveAsSVG(File f) throws IOException {  File file=f;  if (file == null) {    JFileChooser fileChooser=new JFileChooser();    fileChooser.setCurrentDirectory(this.defaultDirectoryForSaveAs);    FileNameExtensionFilter filter=new FileNameExtensionFilter(localizationResources.getString("SVG_Files"),"svg");    fileChooser.addChoosableFileFilter(filter);    fileChooser.setFileFilter(filter);    int option=fileChooser.showSaveDialog(this);    if (option == JFileChooser.APPROVE_OPTION) {      String filename=fileChooser.getSelectedFile().getPath();      if (isEnforceFileExtensions()) {        if (!filename.endsWith(".svg")) {          filename=filename + ".svg";        }      }      file=new File(filename);      if (file.exists()) {        String fileExists=localizationResources.getString("FILE_EXISTS_CONFIRM_OVERWRITE");        int response=JOptionPane.showConfirmDialog(this,fileExists,localizationResources.getString("Save_as_SVG"),JOptionPane.OK_CANCEL_OPTION);        if (response == JOptionPane.CANCEL_OPTION) {          file=null;        }      }    }  }  if (file != null) {    String svg=generateSVG(getWidth(),getHeight());    BufferedWriter writer=null;    try {      writer=new BufferedWriter(new FileWriter(file));      writer.write("<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n");      writer.write(svg + "\n");      writer.flush();    }  finally {      try {        if (writer != null) {          writer.close();        }      } catch (      IOException ex) {        throw new RuntimeException(ex);      }    }  }}  }
class C{  public void moveForward(boolean finishThis){  if (nextStep != null) {    Activity current=getCurrentActivity();    if (current != null) {      Intent intent=new Intent(current,nextStep.toClazz());      if (nextStep.getExtras() != null) {        for (int i=0; i < nextStep.getExtras().size(); i++) {          ActivityExtra extra=nextStep.getExtras().get(i);          intent.putExtra(extra.getKey(),extra.getValue());        }      }      getCurrentActivity().startActivity(intent);      if (finishThis)       current.finish();    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public GermanLightStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  @SuppressWarnings("unused") public static void bindToRegister(float value){}  }
class C{  public void update(long n){  uncounted.addAndGet(n);}  }
class C{  public JSONArray(JSONTokener x) throws JSONException {  this();  if (x.nextClean() != '[') {    throw x.syntaxError("A JSONArray text must start with '['");  }  if (x.nextClean() != ']') {    x.back();    for (; ; ) {      if (x.nextClean() == ',') {        x.back();        this.list.add(JSONObject.NULL);      } else {        x.back();        this.list.add(x.nextValue());      }switch (x.nextClean()) {case ',':        if (x.nextClean() == ']') {          return;        }      x.back();    break;case ']':  return;default :throw x.syntaxError("Expected a ',' or ']'");}}}}  }
class C{  public surfaceReference(){}  }
class C{  @Inline @Entrypoint public static void intFieldWrite(Object ref,int value,Offset offset,int locationMetadata){  if (NEEDS_INT_GC_WRITE_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    Selected.Mutator.get().intWrite(src,src.toAddress().plus(offset),value,offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public boolean isTopLevel(){  return fTopLevel;}  }
class C{  public void execute(){  Object model=getDataModel();  if (model == null && getSourceGraph() != null) {    model=getSourceGraph();  }  if (model == null) {    throw new RuntimeException("Data source is unspecified. You may need to double click all your data boxes, \n" + "then click Save, and then right click on them and select Propagate Downstream. \n" + "The issue is that we use a seed to simulate from IM's, so your data is not saved to \n"+ "file when you save the session. It can, however, be recreated from the saved seed.");  }  double penaltyDiscount=20.0;  if (model instanceof Graph) {    IndependenceTest test=new IndTestDSep((Graph)model);    Score score=new GraphScore((Graph)model);    ccd=new GCcd(test,score);    ccd.setVerbose(true);  } else {    if (model instanceof DataSet) {      DataSet dataSet=(DataSet)model;      if (dataSet.isContinuous()) {        SemBicScore gesScore=new SemBicScore(new CovarianceMatrixOnTheFly((DataSet)model));        IndependenceTest test=new IndTestScore(gesScore);        gesScore.setPenaltyDiscount(penaltyDiscount);        System.out.println("Score done");        ccd=new GCcd(test,gesScore);      } else {        throw new IllegalStateException("Data set must either be continuous or discrete.");      }    } else     if (model instanceof ICovarianceMatrix) {      SemBicScore gesScore=new SemBicScore((ICovarianceMatrix)model);      gesScore.setPenaltyDiscount(penaltyDiscount);      gesScore.setPenaltyDiscount(penaltyDiscount);      IndependenceTest test=new IndTestScore(gesScore);      ccd=new GCcd(test,gesScore);    } else     if (model instanceof DataModelList) {      DataModelList list=(DataModelList)model;      for (      DataModel dataModel : list) {        if (!(dataModel instanceof DataSet || dataModel instanceof ICovarianceMatrix)) {          throw new IllegalArgumentException("Need a combination of all continuous data sets or " + "covariance matrices, or else all discrete data sets, or else a single initialGraph.");        }      }      if (list.size() != 1) {        throw new IllegalArgumentException("FGS takes exactly one data set, covariance matrix, or initialGraph " + "as input. For multiple data sets as input, use IMaGES.");      }      if (allContinuous(list)) {        double penalty=4;        SemBicScoreImages fgsScore=new SemBicScoreImages(list);        fgsScore.setPenaltyDiscount(penalty);        IndependenceTest test=new IndTestScore(fgsScore);        ccd=new GCcd(test,fgsScore);      } else {        throw new IllegalArgumentException("Data must be either all discrete or all continuous.");      }    } else {      System.out.println("No viable input.");    }  }  ccd.setVerbose(true);  Graph graph=ccd.search();  if (getSourceGraph() != null) {    GraphUtils.arrangeBySourceGraph(graph,getSourceGraph());  }{    GraphUtils.circleLayout(graph,200,200,150);  }  setResultGraph(graph);}  }
class C{  private Request generateRequest(String tag,Uri uri,Options options,Callback callback){  Hunter hunter=null;  for (  Hunter h : hunterSet) {    if (h.canHandle(uri)) {      hunter=h;      break;    }  }  if (hunter != null) {    return new Request(context,tag,uri,options,callback,hunter,uiHandler,cacheDir);  }  return null;}  }
class C{  public void clear(){  target.clear();}  }
class C{  public static double P_Accuracy(int Y[][],int Ypred[][]){  int allMissings=0;  int N=Y.length;  double accuracy=0.0;  for (int i=0; i < Y.length; i++) {    if (allMissing(Y[i])) {      allMissings++;      continue;    }    accuracy+=P_Accuracy(Y[i],Ypred[i]);  }  return accuracy / (double)(N - allMissings);}  }
class C{  public IPackageFragmentRoot[] computePackageFragmentRoots(IClasspathEntry[] resolvedClasspath,boolean retrieveExportedRoots,Map rootToResolvedEntries) throws JavaModelException {  ObjectVector accumulatedRoots=new ObjectVector();  computePackageFragmentRoots(resolvedClasspath,accumulatedRoots,new HashSet(5),null,retrieveExportedRoots,rootToResolvedEntries);  IPackageFragmentRoot[] rootArray=new IPackageFragmentRoot[accumulatedRoots.size()];  accumulatedRoots.copyInto(rootArray);  return rootArray;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:00.156 -0500",hash_original_method="554CF3040E9CF07F05663E3B5F16517A",hash_generated_method="A8F0E5EA62744C26D0169D65C29CE734") static boolean isLatinLetter(char letter){  if (!Character.isLetter(letter) && Character.getType(letter) != Character.NON_SPACING_MARK) {    return false;  }  UnicodeBlock block=UnicodeBlock.of(letter);  return block.equals(UnicodeBlock.BASIC_LATIN) || block.equals(UnicodeBlock.LATIN_1_SUPPLEMENT) || block.equals(UnicodeBlock.LATIN_EXTENDED_A)|| block.equals(UnicodeBlock.LATIN_EXTENDED_ADDITIONAL)|| block.equals(UnicodeBlock.LATIN_EXTENDED_B)|| block.equals(UnicodeBlock.COMBINING_DIACRITICAL_MARKS);}  }
class C{  @SuppressLint("MissingSuperCall") @Override public void draw(Canvas canvas){}  }
class C{  public void testAbnormalForkGet(){  testAbnormalForkGet(mainPool());}  }
class C{  public String toHTML(Boolean showRabbitID){  Calendar cal=Calendar.getInstance();  cal.setTime(getCollectedDate());  Integer y=cal.get(Calendar.YEAR);  Integer m=cal.get(Calendar.MONTH) + 1;  Integer d=cal.get(Calendar.DAY_OF_MONTH);  String filterlevelURL=String.format("/log/list.err?id=%s&y=%d&m=%d&d=%d&filter=true&filter_level=%s",rabbitId,y,m,d,loggingEvent.level);  SimpleDateFormat format=new SimpleDateFormat("HH:mm:ss:SSS");  StringBuilder sb=new StringBuilder();  sb.append(String.format("<li class='log' data-e='%s' data-poload='/log/popover_data?id=%s'>",loggingEvent.getThrowableInfo() != null ? "true" : "",id.toString()));  sb.append(String.format("<span class='time' data-toggle='popover' data-placement='right' data-trigger='hover' title='Application time' data-content='Server collecting time : %s'>%s</span>",format.format(collectedDate),format.format(loggingEvent.timeStampDate)));  sb.append(String.format("<span class='level %s %s' data-url='%s'>%s</span>",loggingEvent.level,loggingEvent.getThrowableInfo() != null ? "has_exception" : "",filterlevelURL,loggingEvent.level));  sb.append("<div class='contgroup'>");  if (showRabbitID) {    sb.append(String.format("<span class='rabbit_id' data-toggle='tooltip' data-placement='right' title='%s'>%s</span>",rabbitId,rabbitId));  }  String filterClassURL=String.format("/log/list.err?id=%s&y=%d&m=%d&d=%d&filter=true&filter_level=%s&filter_class=%s",rabbitId,y,m,d,loggingEvent.level,loggingEvent.getCategoryName());  sb.append(String.format("<span class='categoryName' data-url='%s'>%s</span>",filterClassURL,loggingEvent.categoryName));  sb.append(String.format("<span class='message'>%s</span>",loggingEvent.getRenderedMessage()));  sb.append("</div>");  sb.append("</li>");  return sb.toString();}  }
class C{  private FileResult downloadXform(String formName,String url) throws Exception {  String rootName=formName.replaceAll("[^\\p{L}\\p{Digit}]"," ");  rootName=rootName.replaceAll("\\p{javaWhitespace}+"," ");  rootName=rootName.trim();  String path=Collect.getInstance().getFormsPath() + File.separator + rootName+ ".xml";  int i=2;  File f=new File(path);  while (f.exists()) {    path=Collect.getInstance().getFormsPath() + File.separator + rootName+ "_"+ i+ ".xml";    f=new File(path);    i++;  }  downloadFile(f,url);  boolean isNew=true;  String[] projection={FormsColumns.FORM_FILE_PATH};  String[] selectionArgs={FileUtils.getMd5Hash(f)};  String selection=FormsColumns.MD5_HASH + "=?";  Cursor c=null;  try {    c=Collect.getInstance().getApplication().getContentResolver().query(FormsColumns.CONTENT_URI,projection,selection,selectionArgs,null);    if (c.getCount() > 0) {      c.moveToFirst();      isNew=false;      Log.w(t,"A duplicate file has been found, we need to remove the downloaded file and return the other one.");      FileUtils.deleteAndReport(f);      String existingPath=c.getString(c.getColumnIndex(FormsColumns.FORM_FILE_PATH));      f=new File(existingPath);      Log.w(t,"Will use " + existingPath);    }  }  finally {    if (c != null) {      c.close();    }  }  return new FileResult(f,isNew);}  }
class C{  public void sendData(byte[][] data,String targetHostName,int targetPort,long interval){  sendData(data,0,data.length,targetHostName,targetPort,interval);}  }
class C{  protected Record[] lookup(String namestr,int type,String typeDesc) throws TemporaryResolutionException {  try {    Lookup l=new Lookup(namestr,type);    l.setCache(cache);    l.setResolver(resolver);    l.setCredibility(dnsCredibility);    l.setSearchPath(searchPaths);    Record[] r=l.run();    try {      if (l.getResult() == Lookup.TRY_AGAIN) {        throw new TemporaryResolutionException("DNSService is temporary not reachable");      } else {        return r;      }    } catch (    IllegalStateException ise) {      logger.debug("Error determining result ",ise);      throw new TemporaryResolutionException("DNSService is temporary not reachable");    }  } catch (  TextParseException tpe) {    logger.error("Couldn't parse name " + namestr,tpe);    return null;  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:50.087 -0500",hash_original_method="3A06B4F1BF7736CF10F2183ECBC34EF4",hash_generated_method="54FBC06F523132A1C8B176E554D3E94D") private Object writeReplace(){  return new SynchronizedList<E>(list);}  }
class C{  public ShockStatus(){  super("shock");}  }
class C{  private static Member.Static parseStatic(String str){switch (str) {case "Instance":    return Member.Static.NO;case "Static":  return Member.Static.YES;default :throw new IllegalArgumentException("Unexpected member type: '" + str + "'");}}  }
class C{  public int classIndex(){  if (m_Dataset == null) {    throw new UnassignedDatasetException("Instance doesn't have access to a dataset!");  }  return m_Dataset.classIndex();}  }
class C{  public ResourceFormatException(String s,String className,String key){  super(s);  this.className=className;  this.key=key;}  }
class C{  public synchronized void close() throws IOException {  writable=false;  if (map != null) {    ByteArrayUtil.unmapByteBuffer(map);    map=null;  }  if (lock != null) {    lock.release();    lock=null;  }  file.close();}  }
class C{  protected STVWidget stvWidget(java.io.DataInput in,byte version) throws java.io.IOException {  int id=in.readInt();  String type=in.readUTF();  String name=null;  java.util.Properties properties=new java.util.Properties();  int propCount=in.readInt();  for (int i=0; i < propCount; i++)   properties.setProperty(in.readUTF(),in.readUTF());  int num=in.readInt();  int[] contents=num == 0 ? sage.Pooler.EMPTY_INT_ARRAY : new int[num];  for (int i=0; i < contents.length; i++)   contents[i]=in.readInt();  num=in.readInt();  int[] containers=num == 0 ? sage.Pooler.EMPTY_INT_ARRAY : new int[num];  for (int i=0; i < containers.length; i++)   containers[i]=in.readInt();  STVWidget sw=new STVWidget(type,properties,contents,containers);  idMap.put(new Integer(id),sw);  return (sw);}  }
class C{  public boolean isCyclic(){  return cyclic;}  }
class C{  public static String parseContentDisposition(String contentDisposition){  if (contentDisposition == null) {    return null;  }  try {    Matcher m=CONTENT_DISPOSITION_PATTERN.matcher(contentDisposition);    if (m.find()) {      return m.group(1);    }  } catch (  IllegalStateException ex) {  }  return null;}  }
class C{  public static String escapeString(String label){  try {    StringBuilder sb=new StringBuilder(2 * label.length());    escapeString(label,sb);    return sb.toString();  } catch (  IOException e) {    throw new AssertionError();  }}  }
class C{  protected void onRoll(Angle rollChange,ViewInputAttributes.ActionAttributes actionAttribs){  View view=this.getView();  if (view == null) {    return;  }  if (view instanceof BasicFlyView) {    BasicFlyView flyView=(BasicFlyView)view;    this.setRoll(flyView,this.uiAnimControl,flyView.getRoll().add(rollChange),actionAttribs);    view.firePropertyChange(AVKey.VIEW,null,view);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.replaceData(5,5,"South");  childData=child.getData();  assertEquals("characterdataReplaceDataMiddleAssert","1230 South Ave. Dallas, Texas 98551",childData);}  }
class C{  public CommonsAssistantException(IEnum iEnum){  super(iEnum);}  }
class C{  public static boolean isWindows98(){  return osName.indexOf("Windows") > -1 && osVersion.equals("4.1");}  }
class C{  public void stringLengthMB() throws IOException {  writeCode(MB_STRING_LENGTH);}  }
class C{  public static boolean exists(String file){  return (new File(file)).exists();}  }
class C{  public String name(){  return GridFilenameUtils.getName(path);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  protected void parseEnd(final byte[] result) throws ProtocolException {  checkOk(result);}  }
class C{  @Override public XMLEventReader createXMLEventReader(InputStream in,String encoding) throws XMLStreamException {  try {    return new WbXmlEventReader(in,(WbXmlDefinition)props.get(DEFINITION_PROPERTY));  } catch (  IOException e) {    throw new XMLStreamException(e);  }}  }
class C{  TypeVariable(ParameterBound lowerBound,ParameterBound upperBound){  this.lowerBound=lowerBound;  this.upperBound=upperBound;}  }
class C{  private RedirectStream(InputStream inputStream){  this(inputStream,null);}  }
class C{  public T caseSimpleAttribute_(SimpleAttribute_ object){  return null;}  }
class C{  public static Position interpolateGreatCircle(double amount,Position value1,Position value2){  if (value1 == null || value2 == null) {    throw new IllegalArgumentException("Position Is Null");  }  LatLon latLon=LatLon.interpolateGreatCircle(amount,value1,value2);  double elevation=WWMath.mix(amount,value1.getElevation(),value2.getElevation());  return new Position(latLon,elevation);}  }
class C{  public static void fill(char[] array,char x){  for (int i=0, size=array.length; i < size; i++) {    array[i]=x;  }}  }
class C{  public static long now(){  return System.currentTimeMillis();}  }
class C{  public static Value from(ValueDeclaration decl){  Type type=decl.getType();  return new Value(type,decl.getName());}  }
class C{  public void installGooglePlayApp(Operation operation) throws AndroidAgentException {  String packageName;  try {    JSONObject appData=new JSONObject(operation.getPayLoad().toString());    packageName=(String)appData.get(getContextResources().getString(R.string.intent_extra_package));  } catch (  JSONException e) {    operation.setStatus(getContextResources().getString(R.string.operation_value_error));    operation.setOperationResponse("Error in parsing APPLICATION payload.");    getResultBuilder().build(operation);    throw new AndroidAgentException("Invalid JSON format.",e);  }  if (Constants.DEBUG_MODE_ENABLED) {    Log.d(TAG,"Started installing GoogleApp");  }  operation.setStatus(getContextResources().getString(R.string.operation_value_completed));  getResultBuilder().build(operation);  triggerGooglePlayApp(packageName);}  }
class C{  public boolean processLine(){  MMovementLine line=getLine();  line.setTargetQty(getConfirmedQty());  line.setConfirmedQty(getConfirmedQty());  line.setScrappedQty(getScrappedQty());  return line.save(get_TrxName());}  }
class C{  public String[] apply(String[] words){  words=getMVImputeAgent().apply(words);  words=getRecodeAgent().apply(words);  words=getBinAgent().apply(words);  words=getDummycodeAgent().apply(words);  _numTransformedRows++;  return words;}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.TENANT_ADMIN}) @Path("/{id}") public TaskResourceRep updateVcenter(@PathParam("id") URI id,VcenterUpdateParam updateParam,@QueryParam("validate_connection") @DefaultValue("false") final Boolean validateConnection,@QueryParam("discover_vcenter") @DefaultValue("true") final Boolean discoverVcenter){  Vcenter vcenter=queryObject(Vcenter.class,id,true);  validateVcenter(updateParam,vcenter,validateConnection);  verifyAuthorizedSystemAdminOrTenantOrgUser(_permissionsHelper.convertToACLEntries(vcenter.getAcls()));  populateVcenterData(vcenter,updateParam);  validateVcenterLastDiscoveryJobStatus(vcenter);  _dbClient.persistObject(vcenter);  auditOp(OperationTypeEnum.UPDATE_VCENTER,true,null,vcenter.auditParameters());  if (discoverVcenter) {    return doDiscoverVcenter(vcenter);  } else {    return createManualReadyTask(vcenter);  }}  }
class C{  @Override public void updateTime(int columnIndex,Time x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateTime(" + columnIndex + ", x);");    }    update(columnIndex,x == null ? (Value)ValueNull.INSTANCE : ValueTime.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void mute(boolean m){  for (  VSDSound vs : sound_list.values()) {    vs.mute(m);  }}  }
class C{  public void addRowSetListener(RowSetListener listener){  listeners.add(listener);}  }
class C{  public byte[] invoke(byte[] request,TOMMessageType reqType){  canSendLock.lock();  Arrays.fill(replies,null);  receivedReplies=0;  response=null;  replyQuorum=getReplyQuorum();  reqId=generateRequestId(reqType);  operationId=generateOperationId();  requestType=reqType;  replyServer=-1;  hashResponseController=null;  if (requestType == TOMMessageType.UNORDERED_HASHED_REQUEST) {    replyServer=getRandomlyServerId();    Logger.println("[" + this.getClass().getName() + "] replyServerId("+ replyServer+ ") "+ "pos("+ getViewManager().getCurrentViewPos(replyServer)+ ")");    hashResponseController=new HashResponseController(getViewManager().getCurrentViewPos(replyServer),getViewManager().getCurrentViewProcesses().length);    TOMMessage sm=new TOMMessage(getProcessId(),getSession(),reqId,operationId,request,getViewManager().getCurrentViewId(),requestType);    sm.setReplyServer(replyServer);    TOMulticast(sm);  } else {    TOMulticast(request,reqId,operationId,reqType);  }  Logger.println("Sending request (" + reqType + ") with reqId="+ reqId);  Logger.println("Expected number of matching replies: " + replyQuorum);  try {    if (reqType == TOMMessageType.UNORDERED_HASHED_REQUEST) {      if (!this.sm.tryAcquire(invokeUnorderedHashedTimeout,TimeUnit.SECONDS)) {        System.out.println("######## UNORDERED HASHED REQUEST TIMOUT ########");        canSendLock.unlock();        return invoke(request,TOMMessageType.ORDERED_REQUEST);      }    } else {      if (!this.sm.tryAcquire(invokeTimeout,TimeUnit.SECONDS)) {        Logger.println("###################TIMEOUT#######################");        Logger.println("Reply timeout for reqId=" + reqId);        System.out.print(getProcessId() + " // " + reqId+ " // TIMEOUT // ");        System.out.println("Replies received: " + receivedReplies);        canSendLock.unlock();        return null;      }    }  } catch (  InterruptedException ex) {    ex.printStackTrace();  }  Logger.println("Response extracted = " + response);  byte[] ret=null;  if (response == null) {    Logger.println("Received n-f replies and no response could be extracted.");    canSendLock.unlock();    if (reqType == TOMMessageType.UNORDERED_REQUEST || reqType == TOMMessageType.UNORDERED_HASHED_REQUEST) {      Logger.println("###################RETRY#######################");      return invokeOrdered(request);    } else {      throw new RuntimeException("Received n-f replies without f+1 of them matching.");    }  } else {    if (reqType == TOMMessageType.ORDERED_REQUEST) {      if (response.getViewID() == getViewManager().getCurrentViewId()) {        ret=response.getContent();      } else {        reconfigureTo((View)TOMUtil.getObject(response.getContent()));        canSendLock.unlock();        return invoke(request,reqType);      }    } else     if (reqType == TOMMessageType.UNORDERED_REQUEST || reqType == TOMMessageType.UNORDERED_HASHED_REQUEST) {      if (response.getViewID() == getViewManager().getCurrentViewId()) {        ret=response.getContent();      } else {        canSendLock.unlock();        return invoke(request,TOMMessageType.ORDERED_REQUEST);      }    } else {      if (response.getViewID() > getViewManager().getCurrentViewId()) {        Logger.println("Reconfiguration request' reply received!");        Object r=TOMUtil.getObject(response.getContent());        if (r instanceof View) {          reconfigureTo((View)r);          canSendLock.unlock();          return invoke(request,reqType);        } else         if (r instanceof ReconfigureReply) {          reconfigureTo(((ReconfigureReply)r).getView());          ret=response.getContent();        } else {          Logger.println("Unknown response type");        }      } else {        Logger.println("Unexpected execution flow");      }    }  }  canSendLock.unlock();  return ret;}  }
class C{  protected void explainSlowQuery(byte[] querySQL,String truncatedQuery) throws SQLException {  if (StringUtils.startsWithIgnoreCaseAndWs(truncatedQuery,EXPLAINABLE_STATEMENT) || (versionMeetsMinimum(5,6,3) && StringUtils.startsWithIgnoreCaseAndWs(truncatedQuery,EXPLAINABLE_STATEMENT_EXTENSION) != -1)) {    PreparedStatement stmt=null;    java.sql.ResultSet rs=null;    try {      stmt=(PreparedStatement)this.connection.clientPrepareStatement("EXPLAIN ?");      stmt.setBytesNoEscapeNoQuotes(1,querySQL);      rs=stmt.executeQuery();      StringBuilder explainResults=new StringBuilder(Messages.getString("MysqlIO.8") + truncatedQuery + Messages.getString("MysqlIO.9"));      ResultSetUtil.appendResultSetSlashGStyle(explainResults,rs);      this.connection.getLog().logWarn(explainResults.toString());    } catch (    SQLException sqlEx) {    } finally {      if (rs != null) {        rs.close();      }      if (stmt != null) {        stmt.close();      }    }  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  default Filterable<T> retainAll(final T... values){  return retainAll(Stream.of(values));}  }
class C{  public void startThreads(){  int priority=Thread.currentThread().getPriority();  log.debug("startThreads current priority = " + priority + " max available = "+ Thread.MAX_PRIORITY+ " default = "+ Thread.NORM_PRIORITY+ " min available = "+ Thread.MIN_PRIORITY);  int xmtpriority=(Thread.MAX_PRIORITY - 1 > priority ? Thread.MAX_PRIORITY : Thread.MAX_PRIORITY - 1);  if (xmtHandler == null) {    xmtHandler=new XmtHandler();  }  Thread xmtThread=new Thread(xmtHandler,"Mrc transmit handler");  log.debug("Xmt thread starts at priority " + xmtpriority);  xmtThread.setDaemon(true);  xmtThread.setPriority(Thread.MAX_PRIORITY - 1);  xmtThread.start();  if (rcvHandler == null) {    rcvHandler=new RcvHandler(this);  }  Thread rcvThread=new Thread(rcvHandler,"Mrc receive handler " + Thread.MAX_PRIORITY);  rcvThread.setDaemon(true);  rcvThread.setPriority(Thread.MAX_PRIORITY);  rcvThread.start();}  }
class C{  private void detachFromService(){  trackRecordingService=null;  attachInterface(null,null);  if (deathRecipient != null) {    deathRecipient.binderDied();  }}  }
class C{  private void registerMouseListener(){  this.addMouseListener(createOrGetHoverMouseListener());  textareaInfoText.addMouseListener(createOrGetDispatchMouseListener());  lblReturnTypeIcon.addMouseListener(createOrGetDispatchMouseListener());  lblFunctionName.addMouseListener(createOrGetDispatchMouseListener());  infoPanel.addMouseListener(createOrGetDispatchMouseListener());}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public static void trustAllHttpsCertificates(){  if (isDeprecatedSSLProtocol()) {    __trustAllHttpsCertificates();  } else {    _trustAllHttpsCertificates();  }}  }
class C{  public static StringBuffer replaceStrStr(final StringBuffer string,final String oldPattern,final String newPattern){  if ((string == null) || (oldPattern == null) || oldPattern.equals("")|| (newPattern == null)) {    return string;  }  final StringBuffer replaced=new StringBuffer();  int startIdx=0;  int idxOld;  while ((idxOld=string.indexOf(oldPattern,startIdx)) >= 0) {    replaced.append(string.substring(startIdx,idxOld));    replaced.append(newPattern);    startIdx=idxOld + oldPattern.length();  }  replaced.append(string.substring(startIdx));  return replaced;}  }
class C{  public DoubleLinkedList<IPoint> points(){  return points;}  }
class C{  static void outputInstructionStack(TemplateElement[] instructionStackSnapshot,boolean terseMode,Writer w){  final PrintWriter pw=(PrintWriter)(w instanceof PrintWriter ? w : null);  try {    if (instructionStackSnapshot != null) {      final int totalFrames=instructionStackSnapshot.length;      int framesToPrint=terseMode ? (totalFrames <= TERSE_MODE_INSTRUCTION_STACK_TRACE_LIMIT ? totalFrames : TERSE_MODE_INSTRUCTION_STACK_TRACE_LIMIT - 1) : totalFrames;      boolean hideNestringRelatedFrames=terseMode && framesToPrint < totalFrames;      int nestingRelatedFramesHidden=0;      int trailingFramesHidden=0;      int framesPrinted=0;      for (int frameIdx=0; frameIdx < totalFrames; frameIdx++) {        TemplateElement stackEl=instructionStackSnapshot[frameIdx];        final boolean nestingRelatedElement=(frameIdx > 0 && stackEl instanceof BodyInstruction) || (frameIdx > 1 && instructionStackSnapshot[frameIdx - 1] instanceof BodyInstruction);        if (framesPrinted < framesToPrint) {          if (!nestingRelatedElement || !hideNestringRelatedFrames) {            w.write(frameIdx == 0 ? "\t- Failed at: " : (nestingRelatedElement ? "\t~ Reached through: " : "\t- Reached through: "));            w.write(instructionStackItemToString(stackEl));            if (pw != null)             pw.println(); else             w.write('\n');            framesPrinted++;          } else {            nestingRelatedFramesHidden++;          }        } else {          trailingFramesHidden++;        }      }      boolean hadClosingNotes=false;      if (trailingFramesHidden > 0) {        w.write("\t... (Had ");        w.write(String.valueOf(trailingFramesHidden + nestingRelatedFramesHidden));        w.write(" more, hidden for tersenes)");        hadClosingNotes=true;      }      if (nestingRelatedFramesHidden > 0) {        if (hadClosingNotes) {          w.write(' ');        } else {          w.write('\t');        }        w.write("(Hidden " + nestingRelatedFramesHidden + " \"~\" lines for terseness)");        if (pw != null)         pw.println(); else         w.write('\n');        hadClosingNotes=true;      }      if (hadClosingNotes) {        if (pw != null)         pw.println(); else         w.write('\n');      }    } else {      w.write("(The stack was empty)");      if (pw != null)       pw.println(); else       w.write('\n');    }  } catch (  IOException e) {    LOG.error("Failed to print FTL stack trace",e);  }}  }
class C{  private void dropTemporaryIndexes(){  resetDBObjects(DBObject_Index.class);  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"dropTemporaryIndexes",new Object[]{m_objectTypes,m_direction});  m_counterDrp=new Integer(0);  m_totalDrp=new Integer(0);  Vector<String> v=new Vector<String>(m_tempIndexes.keySet());  java.util.Collections.sort(v);  for (Iterator<String> it=v.iterator(); it.hasNext(); ) {    String key=it.next();    DBObject index=m_tempIndexes.get(key);    if (index.drop())     m_counterDrp=new Integer(m_counterDrp.intValue() + 1);    m_totalDrp=new Integer(m_totalDrp.intValue() + 1);  }  logResults();}  }
class C{  public boolean hasExtraFeatures(){  int major=this.getMajorVersion();  int minor=this.getMinorVersion();  if (log.isDebugEnabled()) {    log.debug("Major: " + major + " Minor: "+ minor);  }  if (this.sprogType.isSprogII() && (((major == 1) && (minor >= 6)) || ((major == 2) && (minor >= 1)) || (major >= 3)) || ((this.sprogType.sprogType >= SprogType.SPROGIIv3) && (this.sprogType.sprogType < SprogType.NANO))) {    if (log.isDebugEnabled()) {      log.debug("This version has extra features");    }    return true;  }  if (log.isDebugEnabled()) {    log.debug("This version does not have extra features");  }  return false;}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  globalRoomFeatures=new ArrayList();  departmentRoomFeatures=new ArrayList();}  }
class C{  public static void main(String[] args){  if (args.length > 0) {    NUM_THREADS=Integer.valueOf(args[0]);  }  System.out.println("Number Threads:" + NUM_THREADS);  int MAX_R=21;  int NUM_TRIALS=20;  int MIN_N=65536;  int MAX_N=1048576;  UniformGenerator ug=new UniformGenerator();  TrialSuite singleThreaded=new TrialSuite();  TrialSuite multiThreaded=new TrialSuite();  TrialSuite[] lastO=new TrialSuite[MAX_R];  for (int r=0; r < MAX_R; r++) {    lastO[r]=new TrialSuite();  }  for (int size=MIN_N; size <= MAX_N; size*=2) {    for (int t=0; t < NUM_TRIALS; t++) {      IPoint[] pts=ug.generate(size / 2);      runTrialNormal(size,singleThreaded,pts,new LastSelector());      runTrialParallel(size,multiThreaded,pts,new LastSelector());      for (int r=0; r < MAX_R; r++) {        int ratio=r + 1;        if (r == MAX_R - 1) {          ratio=Integer.MAX_VALUE;        }        runTrialOneHelper(size,lastO[r],pts,new LastSelector(),ratio);      }    }  }  System.out.println("SingleThreaded");  System.out.println(singleThreaded.computeTable());  System.out.println("MultiThreaded(r=5)");  System.out.println(multiThreaded.computeTable());  String lastT=TrialSuiteHelper.combine(lastO);  System.out.println("MultiThreaded(r=1..20,MaxInt)");  System.out.println(lastT);}  }
class C{  private HyperGraph createGoalNode(){  Stack lastStack=stacks.get(sentence.length());  for (  Hypothesis hyp : lastStack) {    float score=hyp.getScore();    List<HGNode> tailNodes=new ArrayList<>();    tailNodes.add(hyp);    float finalTransitionScore=ComputeNodeResult.computeFinalCost(featureFunctions,tailNodes,0,sentence.length(),null,sentence);    if (null == this.end)     this.end=new Hypothesis(null,score + finalTransitionScore,hyp,sentence.length(),null);    HyperEdge edge=new HyperEdge(null,score + finalTransitionScore,finalTransitionScore,tailNodes,null);    end.addHyperedgeInNode(edge);  }  return new HyperGraph(end,-1,-1,this.sentence);}  }
class C{  public boolean isForcePersistence(){  return forcePersistence;}  }
class C{  private void check(){  if (getChildCount() != 2) {    throw new RuntimeException("SplitPaneLayout must have exactly two child views.");  }}  }
class C{  public boolean equals(Object object){  return super.equals(object) && object instanceof CopiesSupported;}  }
class C{  protected void tearDown() throws Exception {  m_Instances=null;  super.tearDown();}  }
class C{  @SuppressLint("NewApi") @SuppressWarnings({"static-access"}) public static void sendLocatNotification(Context mContext,String title,String message,@SuppressWarnings("SameParameterValue") Intent mIntent){  System.out.println("called: " + title + " : "+ message);  int appIconResId=0;  PendingIntent pIntent=null;  if (mIntent != null)   pIntent=PendingIntent.getActivity(mContext,0,mIntent,PendingIntent.FLAG_UPDATE_CURRENT);  final PackageManager pm=mContext.getPackageManager();  String packageName=mContext.getPackageName();  ApplicationInfo applicationInfo;  try {    applicationInfo=pm.getApplicationInfo(packageName,PackageManager.GET_META_DATA);    appIconResId=applicationInfo.icon;  } catch (  NameNotFoundException e1) {    e1.printStackTrace();  }  Notification notification;  if (mIntent == null) {    notification=new Notification.Builder(mContext).setSmallIcon(appIconResId).setWhen(System.currentTimeMillis()).setContentTitle(message).setStyle(new Notification.BigTextStyle().bigText(message)).setAutoCancel(true).setContentText(message).setContentIntent(PendingIntent.getActivity(mContext,0,new Intent(),0)).getNotification();  } else {    notification=new Notification.Builder(mContext).setSmallIcon(appIconResId).setWhen(System.currentTimeMillis()).setContentTitle(message).setContentText(message).setAutoCancel(true).setStyle(new Notification.BigTextStyle().bigText(message)).setContentIntent(pIntent).getNotification();  }  notification.flags|=Notification.FLAG_AUTO_CANCEL;  notification.defaults|=Notification.DEFAULT_SOUND;  notification.defaults|=Notification.DEFAULT_VIBRATE;  NotificationManager manager=(NotificationManager)mContext.getSystemService(mContext.NOTIFICATION_SERVICE);  manager.notify(R.string.app_name,notification);}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 1) {    System.err.println("Usage: java Dump <class file name>");    return;  }  DataInputStream in=new DataInputStream(new FileInputStream(args[0]));  ClassFile w=new ClassFile(in);  PrintWriter out=new PrintWriter(System.out,true);  out.println("*** constant pool ***");  w.getConstPool().print(out);  out.println();  out.println("*** members ***");  ClassFilePrinter.print(w,out);}  }
class C{  @Scheduled(initialDelay=120_000,fixedDelay=120_000) @Override public void refresh(){  super.refresh();}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>();  newVector.addElement(new Option("\tSpecify list of columns to copy. First and last are valid\n" + "\tindexes. (default first-last)","R",1,"-R <index1,index2-index4,...>"));  return newVector.elements();}  }
class C{  public static void debug(String message){  StringBuilder output=new StringBuilder();  output.append(new Date(System.currentTimeMillis()));  output.append(" - [");  output.append(Thread.currentThread().getName());  output.append("] ");  Job currentJob=Job.getJobManager().currentJob();  if (currentJob != null) {    output.append(currentJob.getClass().getName());    output.append("(");    output.append(currentJob.getName());    output.append("): ");  }  output.append(message);  System.out.println(output.toString());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.028 -0500",hash_original_method="825F17E8D5A2A3E333D66101B84E14D2",hash_generated_method="AD4FC447AE529D97C7B0E291B2C3206A") public SupportedParser(String supported){  super(supported);}  }
class C{  @SuppressWarnings("unused") private BufferedImage readTriumphPicture(){  File f2=new File("/Users/johanwjoubert/Documents/Personal/Financing/Triumph/Pictures/S1.jpg");  BufferedImage bi=null;  try {    bi=ImageIO.read(f2);  } catch (  IOException e) {    e.printStackTrace();  }  return bi;}  }
class C{  private K lowestKey(){  ConcurrentSkipListMap.Node<K,V> n=loNode();  if (isBeforeEnd(n))   return n.key; else   throw new NoSuchElementException();}  }
class C{  public String bgrewriteaof(){  client.bgrewriteaof();  return client.getStatusCodeReply();}  }
class C{  public static void validateName(String nameOfStream) throws InvalidStreamNameException {  String reason=null;  char chars[]=nameOfStream.toCharArray();  char c;  for (int i=0; i < chars.length; i++) {    c=chars[i];    if (c == 0) {      reason="null character not allowed @" + i;      break;    } else     if (c == '/') {      reason="'/' not allowed @" + i;      break;    } else     if (c > '\u0000' && c < '\u001f' || c > '\u007f' && c < '\u009F' || c > '\ud800' && c < '\uf8ff' || c > '\ufff0' && c < '\uffff') {      reason="invalid charater @" + i;      break;    }  }  if (null != reason) {    throw new InvalidStreamNameException(nameOfStream,reason);  }  if (isReservedStreamName(nameOfStream)) {    throw new InvalidStreamNameException(nameOfStream,"Stream Name is reserved");  }}  }
class C{  public String toString(){  return "(" + x + ","+ y+ ")";}  }
class C{  public static void separateLinkCandidates(Set<LinkCandidate> linkCandidatesCurrent,Set<LinkCandidate> linkCandidatesNext){  Set<LinkCandidate> removeFromCurrent=new HashSet<>();  Set<LinkCandidate> removeFromNext=new HashSet<>();  for (  LinkCandidate lcCurrent : linkCandidatesCurrent) {    for (    LinkCandidate lcNext : linkCandidatesNext) {      if (lcCurrent.getLinkId().equals(lcNext.getLinkId())) {        if (lcCurrent.getStopFacilityDistance() > lcNext.getStopFacilityDistance()) {          removeFromCurrent.add(lcCurrent);        } else {          removeFromNext.add(lcNext);        }      }    }  }  removeFromCurrent.forEach(null);  removeFromNext.forEach(null);}  }
class C{  public void defineField(long where,ClassDefinition c,String doc,int mod,Type t,IdentifierToken name,IdentifierToken args[],IdentifierToken exp[],Node val){  Identifier nm=name.getName();  if (sourceClass.isInterface()) {    if ((mod & (M_PRIVATE | M_PROTECTED)) == 0)     mod|=M_PUBLIC;    if (t.isType(TC_METHOD)) {      mod|=M_ABSTRACT;    } else {      mod|=M_STATIC | M_FINAL;    }  }  if (nm.equals(idInit)) {    Type rt=t.getReturnType();    Identifier retname=!rt.isType(TC_CLASS) ? idStar : rt.getClassName();    Identifier clsname=sourceClass.getLocalName();    if (clsname.equals(retname)) {      t=Type.tMethod(Type.tVoid,t.getArgumentTypes());    } else     if (clsname.equals(retname.getFlatName().getName())) {      t=Type.tMethod(Type.tVoid,t.getArgumentTypes());      env.error(where,"invalid.method.decl.qual");    } else     if (retname.isQualified() || retname.equals(idStar)) {      env.error(where,"invalid.method.decl.name");      return;    } else {      env.error(where,"invalid.method.decl");      return;    }  }  if (args == null && t.isType(TC_METHOD)) {    args=new IdentifierToken[0];  }  if (exp == null && t.isType(TC_METHOD)) {    exp=new IdentifierToken[0];  }  MemberDefinition f=env.makeMemberDefinition(env,where,sourceClass,doc,mod,t,nm,args,exp,val);  if (env.dump()) {    f.print(System.out);  }}  }
class C{  public Assignment(Token t,Symbol variable,Expression expr){  super(t);  this.symbol=variable;  this.expr=expr;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:23.599 -0400",hash_original_method="C8C0C7A546F219CB7EBA97386ADA6910",hash_generated_method="6786551AA4FCB5415D8D3C23BA5F60A2") private void layoutItems(int width){  int numItems=getChildCount();  if (numItems == 0) {    mLayoutNumRows=0;    return;  }  int curNumRows=Math.min((int)Math.ceil(numItems / (float)mMaxItemsPerRow),mMaxRows);  for (; curNumRows <= mMaxRows; curNumRows++) {    layoutItemsUsingGravity(curNumRows,numItems);    if (curNumRows >= numItems) {      break;    }    if (doItemsFit()) {      break;    }  }}  }
class C{  private byte[] read(FSDataInputStream channel,int size,long offset){  byte[] byteBffer=new byte[size];  try {    channel.seek(offset);    channel.readFully(byteBffer);  } catch (  Exception e) {    LOGGER.error(e,e.getMessage());  }  return byteBffer;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static ResponseData parse(String responseData){  int index=responseData.indexOf(':');  String mainData, extraData;  if (-1 == index) {    mainData=responseData;    extraData="";  } else {    mainData=responseData.substring(0,index);    extraData=index >= responseData.length() ? "" : responseData.substring(index + 1);  }  String[] fields=TextUtils.split(mainData,Pattern.quote("|"));  if (fields.length < 6) {    throw new IllegalArgumentException("Wrong number of fields.");  }  ResponseData data=new ResponseData();  data.extra=extraData;  data.responseCode=Integer.parseInt(fields[0]);  data.nonce=Integer.parseInt(fields[1]);  data.packageName=fields[2];  data.versionCode=fields[3];  data.userId=fields[4];  data.timestamp=Long.parseLong(fields[5]);  return data;}  }
class C{  public void changeFragmentShader(String fragmentShader){  if (fragmentShader == null) {    fragmentShader=FRAGMENT_SHADER;  }  GLES20.glDeleteProgram(mProgram);  mProgram=createProgram(VERTEX_SHADER,fragmentShader);  if (mProgram == 0) {    throw new RuntimeException("failed creating program");  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSSafe(DSCat.GRAPHICS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.250 -0500",hash_original_method="3ECD815B6409768DB15813B06CD42DD5",hash_generated_method="CAD5522B69D979DEA8767B5667599229") public void addRoundRect(RectF rect,float rx,float ry,Direction dir){  if (rect == null) {    throw new NullPointerException("need rect parameter");  }  isSimplePath=false;  addTaint(rect.getTaintInt() + rx + ry+ dir.nativeInt);}  }
class C{  public final double doOperation(){  System.out.println("do operation of sequential sampling");  setMembershipToClusterLabelIndexes();  numNodes=treeModel.getNodeCount();  updateK();  int K_int=(int)K.getParameterValue(0);  int[] cutNode=new int[K_int];  int[] oldclusterLabelArray=new int[numNodes];  int[] clusterLabelArray=null;  int[] onPoints=new int[K_int];  int numOn=0;  for (int i=0; i < binSize; i++) {    if ((int)status.getParameterValue(i) == 1) {      onPoints[numOn]=i;      numOn++;    }  }  cutNode=new int[1];  cutNode[0]=785;  onPoints=new int[1];  onPoints[0]=0;  resetStatusAndBreakpointsGivenCutNodes(cutNode,onPoints);  clusterLabelArray=setClusterLabelsByTestCutNodeByNodeOrder(cutNode);  relabelClusterLabels(clusterLabelArray,oldclusterLabelArray);  for (int i=0; i < numdata; i++) {    clusterLabels.setParameterValue(i,clusterLabelArray[i]);  }  setVirusLocationAutoCorrelatedModel();  double topLogProb=clusterLikelihood.getLogLikelihood();  System.out.println(topLogProb);  cutNode=new int[2];  cutNode[0]=785;  onPoints=new int[2];  onPoints[0]=0;  onPoints[1]=1;  double[] logNumerator=new double[numNodes];  for (int curTest=0; curTest < numNodes; curTest++) {    int hasBeenAdded=checkSiteHasBeenAddedToOnIndicators(curTest);    if (hasBeenAdded == 0) {      cutNode=new int[2];      cutNode[0]=785;      cutNode[1]=curTest;      resetStatusAndBreakpointsGivenCutNodes(cutNode,onPoints);      clusterLabelArray=setClusterLabelsByTestCutNodeByNodeOrder(cutNode);      relabelClusterLabels(clusterLabelArray,oldclusterLabelArray);      for (int i=0; i < numdata; i++) {        clusterLabels.setParameterValue(i,clusterLabelArray[i]);      }      setVirusLocationAutoCorrelatedModel();      logNumerator[curTest]+=clusterLikelihood.getLogLikelihood();    } else {      logNumerator[curTest]=Double.NEGATIVE_INFINITY;      System.out.println("Don't calculate for node" + cutNode[0]);    }  }  double answer=verifyAssumption(topLogProb,logNumerator);  System.out.println("the ratio is " + answer);  System.exit(0);  double tmpMu1=mu.getParameter(onPoints[7] + 1).getParameterValue(0);  double tmpMu2=mu.getParameter(onPoints[7] + 1).getParameterValue(1);  mu.getParameter(onPoints[7] + 1).setParameterValue(0,mu.getParameter(onPoints[8] + 1).getParameterValue(0));  mu.getParameter(onPoints[7] + 1).setParameterValue(1,mu.getParameter(onPoints[8] + 1).getParameterValue(1));  mu.getParameter(onPoints[8] + 1).setParameterValue(0,tmpMu1);  mu.getParameter(onPoints[8] + 1).setParameterValue(1,tmpMu2);  for (int curNode=8; curNode < K_int; curNode++) {    cutNode[0]=785;    cutNode[1]=775;    cutNode[2]=763;    cutNode[3]=697;    cutNode[4]=747;    cutNode[5]=679;    cutNode[6]=662;    cutNode[7]=638;    double[] logNumeratorProb=new double[numNodes];    for (int curTest=0; curTest < numNodes; curTest++) {      int hasBeenAdded=checkSiteHasBeenAddedToOnIndicators(curTest);      if (hasBeenAdded == 0) {        int[] testCutNode=new int[curNode + 1];        for (int i=0; i < curNode; i++) {          testCutNode[i]=cutNode[i];        }        testCutNode[curNode]=curTest;        resetStatusAndBreakpointsGivenCutNodes(testCutNode,onPoints);        clusterLabelArray=setClusterLabelsByTestCutNodeByNodeOrder(testCutNode);        relabelClusterLabels(clusterLabelArray,oldclusterLabelArray);        for (int i=0; i < numdata; i++) {          clusterLabels.setParameterValue(i,clusterLabelArray[i]);        }        setVirusLocationAutoCorrelatedModel();        if (curNode == 0 && curTest == 0) {          for (int i=0; i < numdata; i++) {            Parameter v=virusLocations.getParameter(i);          }        }        logNumeratorProb[curTest]=clusterLikelihood.getLogLikelihood();      } else {        logNumeratorProb[curTest]=Double.NEGATIVE_INFINITY;      }    }    double[] condDistribution=calculateConditionalProbabilityGivenLogNumeratorProb(logNumeratorProb);    for (int i=0; i < numNodes; i++) {      System.out.println("node " + i + " p="+ condDistribution[i]);    }    System.out.println("===============================");    int site_add=MathUtils.randomChoicePDF(condDistribution);    int[] newCutNode=new int[curNode + 1];    for (int i=0; i < curNode; i++) {      newCutNode[i]=cutNode[i];    }    newCutNode[curNode]=site_add;    cutNode=newCutNode;    clusterLabelArray=setClusterLabelsByTestCutNodeByNodeOrder(newCutNode);    relabelClusterLabels(clusterLabelArray,oldclusterLabelArray);    oldclusterLabelArray=clusterLabelArray;  }  printCutNode(cutNode);  resetStatusAndBreakpointsGivenCutNodes(cutNode,onPoints);  clusterLabelArray=setClusterLabelsByTestCutNodeByNodeOrder(cutNode);  relabelClusterLabels(clusterLabelArray,oldclusterLabelArray);  for (int i=0; i < numdata; i++) {    clusterLabels.setParameterValue(i,clusterLabelArray[i]);  }  setVirusLocationAutoCorrelatedModel();  System.out.println(clusterLikelihood.getLogLikelihood());  cutNode[0]=785;  cutNode[1]=775;  cutNode[2]=763;  cutNode[3]=697;  cutNode[4]=747;  cutNode[5]=679;  cutNode[6]=662;  cutNode[7]=638;  cutNode[8]=521;  resetStatusAndBreakpointsGivenCutNodes(cutNode,onPoints);  clusterLabelArray=setClusterLabelsByTestCutNodeByNodeOrder(cutNode);  relabelClusterLabels(clusterLabelArray,oldclusterLabelArray);  for (int i=0; i < numdata; i++) {    clusterLabels.setParameterValue(i,clusterLabelArray[i]);  }  setVirusLocationAutoCorrelatedModel();  System.out.println(clusterLikelihood.getLogLikelihood());  System.exit(0);  return (Double.POSITIVE_INFINITY);}  }
class C{  private static void addHeader(Message message,String name,String value){  Map<String,List<String>> protocolHeaders=CastUtils.cast((Map<?,?>)message.get(Message.PROTOCOL_HEADERS));  if (protocolHeaders == null) {    protocolHeaders=new TreeMap<String,List<String>>(String.CASE_INSENSITIVE_ORDER);    message.put(Message.PROTOCOL_HEADERS,protocolHeaders);  }  List<String> header=CastUtils.cast((List<?>)protocolHeaders.get(name));  if (header == null) {    header=new ArrayList<String>();    protocolHeaders.put(name,header);  }  if (header.size() == 0) {    header.add(value);  } else {    header.set(0,header.get(0) + "," + value);  }}  }
class C{  public static Object callGetter(Object o,String prop) throws SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {  prop="get" + prop;  Class c=o.getClass();  Method m=getMethodParameterPairIgnoreCase(c,prop,null).getMethod();  if (m.getReturnType().getName().equals("void"))   throw new NoSuchMethodException("invalid return Type, method [" + m.getName() + "] can't have return type void");  return m.invoke(o,null);}  }
class C{  public HadoopCounters counters(){  return counters;}  }
class C{  public Completion findByChallengeAndUser(long challengeId,long userId){  return mDaoSession.getCompletionDao().queryBuilder().where(CompletionDao.Properties.ChallengeId.eq(challengeId),CompletionDao.Properties.UserId.eq(userId)).unique();}  }
class C{  public void mouseClicked(MouseEvent e){  if (controller == null) {    return;  }  if (controller.getCurrentState() != GameController.IN_PROGRESS) {    return;  }  if (humanPlayer == null) {    return;  }  if ((controller.getCurrentTurn() == GameController.XTURN) && (humanPlayer.getMark() != Player.XMARK)) {    return;  }  if ((controller.getCurrentTurn() == GameController.OTURN) && (humanPlayer.getMark() != Player.OMARK)) {    return;  }  int x=e.getX();  int y=e.getY();  Cell cell=controller.interpretXY(x,y);  Move m=controller.interpretMove(cell,humanPlayer);  if (m == null) {    applet.output("Invalid move. Try again");    return;  }  humanPlayer.setMove(m);  int rc=controller.playTurn();  applet.repaint();  if (rc != GameController.IN_PROGRESS) {    if (rc == GameController.DRAW) {      applet.output("Game is drawn");    } else {      applet.output("Game over. You Win!");    }  } else {    Player currentPlayer;    int turn=controller.getCurrentTurn();    if (turn == GameController.XTURN) {      currentPlayer=(Player)controller.getXPlayer();    } else {      currentPlayer=(Player)controller.getOPlayer();    }    if (currentPlayer instanceof MousePlayer) {      humanPlayer=(MousePlayer)currentPlayer;      return;    }    rc=controller.playTurn();    if (rc != GameController.IN_PROGRESS) {      if (rc == GameController.DRAW) {        applet.output("Game is drawn");      } else {        applet.output("Game over. You Lose!!!!!");      }    }  }}  }
class C{  @Override public XMLStreamWriter createXMLStreamWriter(Writer writer) throws XMLStreamException {  throw new XMLStreamException("The WBXML is a binary format!");}  }
class C{  public AdaptiveLocationListenerPolicy(long minInterval,long maxInterval,int minDistance){  this.minInterval=minInterval;  this.maxInterval=maxInterval;  this.minDistance=minDistance;}  }
class C{  protected ApplicationContext createSpringContext(){  return null;}  }
class C{  @SuppressWarnings("unchecked") private void findNext() throws IgniteCheckedException {  curr=null;  while (idx < docs.length) {    Document doc;    try {      doc=searcher.doc(docs[idx++].doc);    } catch (    IOException e) {      throw new IgniteCheckedException(e);    }    ClassLoader ldr=null;    if (ctx != null && ctx.deploy().enabled())     ldr=ctx.cache().internalCache(spaceName).context().deploy().globalLoader();    K k=unmarshall(org.apache.commons.codec.binary.Base64.decodeBase64(doc.get(KEY_FIELD_NAME)),ldr);    V v=type.valueClass() == String.class ? (V)doc.get(VAL_STR_FIELD_NAME) : this.<V>unmarshall(doc.getBinaryValue(VAL_FIELD_NAME),ldr);    assert v != null;    if (!filter(k,v))     continue;    curr=new IgniteBiTuple<>(k,v);    break;  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DatatypePackage.PRIMITIVE_PROPERTY_TYPE__TYPE:    return getType();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public void removeListener(final IEventLayerListener e){}  }
class C{  private void releaseFreeChunks(Address freedPage,int pagesFreed){  int pageOffset=Conversions.bytesToPages(freedPage.diff(start));  if (metaDataPagesPerRegion > 0) {    if (pagesFreed == (PAGES_IN_CHUNK - metaDataPagesPerRegion)) {      freeContiguousChunk(Conversions.chunkAlign(freedPage,true));    }  } else {    if (pagesFreed % PAGES_IN_CHUNK == 0) {      int regionStart=pageOffset & ~(PAGES_IN_CHUNK - 1);      int nextRegionStart=regionStart + PAGES_IN_CHUNK;      while (regionStart >= 0 && freeList.isCoalescable(regionStart))       regionStart-=PAGES_IN_CHUNK;      while (nextRegionStart < GenericFreeList.MAX_UNITS && freeList.isCoalescable(nextRegionStart))       nextRegionStart+=PAGES_IN_CHUNK;      if (VM.VERIFY_ASSERTIONS)       VM.assertions._assert(regionStart >= 0 && nextRegionStart < GenericFreeList.MAX_UNITS);      if (pagesFreed == nextRegionStart - regionStart) {        freeContiguousChunk(start.plus(Conversions.pagesToBytes(regionStart)));      }    }  }}  }
class C{  public ShortMemberValue(ConstPool cp){  super('S',cp);  setValue((short)0);}  }
class C{  public ST(String template){  this(STGroup.defaultGroup,template);}  }
class C{  public VerletParticle3D addConstraint(ParticleConstraint3D c){  if (constraints == null) {    constraints=new ArrayList<ParticleConstraint3D>(1);  }  constraints.add(c);  return this;}  }
class C{  private IgfsEntryInfo primaryInfoForListing(IgfsPath path) throws IgniteCheckedException {  IgniteUuid fileId=meta.fileId(path);  return fileId != null ? meta.info(fileId) : null;}  }
class C{  @Override public void paintTrack(Graphics g){  super.paintTrack(g);  Rectangle trackBounds=trackRect;  if (slider.getOrientation() == JSlider.HORIZONTAL) {    int lowerX=thumbRect.x + (thumbRect.width / 2);    int upperX=upperThumbRect.x + (upperThumbRect.width / 2);    int cy=(trackBounds.height / 2) - 2;    Color oldColor=g.getColor();    g.translate(trackBounds.x,trackBounds.y + cy);    g.setColor(rangeColor);    for (int y=0; y <= 3; y++) {      g.drawLine(lowerX - trackBounds.x,y,upperX - trackBounds.x,y);    }    g.translate(-trackBounds.x,-(trackBounds.y + cy));    g.setColor(oldColor);  } else {    int lowerY=thumbRect.x + (thumbRect.width / 2);    int upperY=upperThumbRect.x + (upperThumbRect.width / 2);    int cx=(trackBounds.width / 2) - 2;    Color oldColor=g.getColor();    g.translate(trackBounds.x + cx,trackBounds.y);    g.setColor(rangeColor);    for (int x=0; x <= 3; x++) {      g.drawLine(x,lowerY - trackBounds.y,x,upperY - trackBounds.y);    }    g.translate(-(trackBounds.x + cx),-trackBounds.y);    g.setColor(oldColor);  }}  }
class C{  public void writeToWriter(Writer out) throws IOException {}  }
class C{  protected SparseDoubleMatrix3D(int slices,int rows,int columns,AbstractIntDoubleMap elements,int sliceZero,int rowZero,int columnZero,int sliceStride,int rowStride,int columnStride){  setUp(slices,rows,columns,sliceZero,rowZero,columnZero,sliceStride,rowStride,columnStride);  this.elements=elements;  this.isNoView=false;}  }
class C{  private static final void addSuperClasses(final TypeDecl t,final HashSet result){  if (t == null)   return;  if (t.isClassDecl() && !result.contains(t)) {    result.add((ClassDecl)t);  } else   if (t.isTypeVariable()) {    TypeVariable var=(TypeVariable)t;    for (int i=0; i < var.getNumTypeBound(); i++)     addSuperClasses(var.getTypeBound(i).type(),result);  } else   if (t instanceof LUBType || t instanceof GLBType) {    result.add(t);  } else   if (t.isInterfaceDecl())   result.add((ClassDecl)t.typeObject());}  }
class C{  public final void push(Address addr1,Address addr2,Address addr3){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!addr1.isZero());  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!addr2.isZero());  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!addr3.isZero());  checkHeadInsert(3);  uncheckedHeadInsert(addr3);  uncheckedHeadInsert(addr2);  uncheckedHeadInsert(addr1);}  }
class C{  @Override protected void onRestoreInstanceState(Bundle savedInstanceState){  super.onRestoreInstanceState(savedInstanceState);  if (savedInstanceState != null && savedInstanceState.containsKey(Intent.EXTRA_UID)) {    Intent intent=new Intent(Intent.ACTION_VIEW);    intent.putExtra(Intent.EXTRA_UID,savedInstanceState.getLong(Intent.EXTRA_UID));    if (!initActivityState(intent)) {      finish();      return;    }    Log.d(TAG,"Restoring from killed activity");  }}  }
class C{  public IncomingMessageEnvelope(SystemStreamPartition systemStreamPartition,String offset,Object key,Object message,int size){  this.systemStreamPartition=systemStreamPartition;  this.offset=offset;  this.key=key;  this.message=message;  this.size=size;}  }
class C{  public void addSigner(PrivateKey key,X509Certificate cert,String digestOID,AttributeTable signedAttr,AttributeTable unsignedAttr) throws IllegalArgumentException {  addSigner(key,cert,getEncOID(key,digestOID),digestOID,signedAttr,unsignedAttr);}  }
class C{  private Point mirror_2nd_OctantPoint(Point firstOctantPoint){  int correctedX=firstOctantPoint.getX() - mX0;  int correctedY=firstOctantPoint.getY() - mY0;  return correctedX != correctedY ? new Point(correctedY + mX0,correctedX + mY0) : null;}  }
class C{  public JBBPOut Bool(final boolean value) throws IOException {  assertNotEnded();  if (this.processCommands) {    this.outStream.write(value ? 1 : 0);  }  return this;}  }
class C{  public boolean isSafe(){  return (this.status == DroidsafeIssueResolutionStatus.SAFE);}  }
class C{  public static byte[] I2OSP(long input){  byte[] output=new byte[8];  output[0]=(byte)input;  output[1]=(byte)(input >>> 8);  output[2]=(byte)(input >>> 16);  output[3]=(byte)(input >>> 24);  output[4]=(byte)(input >>> 32);  output[5]=(byte)(input >>> 40);  output[6]=(byte)(input >>> 48);  output[7]=(byte)(input >>> 56);  return output;}  }
class C{  private boolean isASCIIDigit(char c){  return (c >= '0' && c <= '9');}  }
class C{  private XjcRdeHeader readHeader(){  if (!nextElement(RDE_HEADER_URI,"header")) {    throw new IllegalStateException("No RDE Header found");  }  XjcRdeHeaderElement element=(XjcRdeHeaderElement)unmarshalElement(RDE_HEADER_URI,"header");  return element.getValue();}  }
class C{  public BigdataTurtleWriter(OutputStream out){  super(out);}  }
class C{  protected void readContributor(Revision rev,String str) throws IOException, ArticleReaderException {  char[] contrChars=str.toCharArray();  int size;  StringBuilder buffer=null;  this.keywords.reset();  for (  char curChar : contrChars) {    if (buffer != null) {      buffer.append(curChar);    }    if (this.keywords.check(curChar)) {switch (this.keywords.getValue()) {case KEY_START_ID:case KEY_START_IP:case KEY_START_USERNAME:        buffer=new StringBuilder();      break;case KEY_END_IP:    size=buffer.length();  buffer.delete(size - WikipediaXMLKeys.KEY_END_IP.getKeyword().length(),size);rev.setContributorName(SQLEscape.escape(buffer.toString()));rev.setContributorIsRegistered(false);buffer=null;break;case KEY_END_USERNAME:size=buffer.length();buffer.delete(size - WikipediaXMLKeys.KEY_END_USERNAME.getKeyword().length(),size);rev.setContributorName(SQLEscape.escape(buffer.toString()));rev.setContributorIsRegistered(true);buffer=null;break;case KEY_END_ID:size=buffer.length();buffer.delete(size - WikipediaXMLKeys.KEY_END_ID.getKeyword().length(),size);String id=buffer.toString();if (!id.isEmpty()) {rev.setContributorId(Integer.parseInt(buffer.toString()));}buffer=null;break;}}}}  }
class C{  private synchronized boolean activateReplicatedBackup(SimpleString nodeID) throws Exception {  Configuration configuration=server.getConfiguration().copy();  ActiveMQServer backup=server.createBackupServer(configuration);  try {    TopologyMember member=server.getClusterManager().getDefaultConnection(null).getTopology().getMember(nodeID.toString());    int portOffset=haPolicy.getBackupPortOffset() * (backupServers.size() + 1);    String name="colocated_backup_" + backupServers.size() + 1;    haPolicy.getBackupPolicy().setRestartBackup(false);    backup.setHAPolicy(haPolicy.getBackupPolicy());    updateReplicatedConfiguration(configuration,name,portOffset,haPolicy.getExcludedConnectors(),haPolicy.getBackupPolicy().getScaleDownPolicy() == null);    backup.addActivationParam(ActivationParams.REPLICATION_ENDPOINT,member);    backupServers.put(configuration.getName(),backup);    backup.start();  } catch (  Exception e) {    backup.stop();    ActiveMQServerLogger.LOGGER.activateReplicatedBackupFailed(e);    return false;  }  ActiveMQServerLogger.LOGGER.activatingReplica(nodeID);  return true;}  }
class C{  public int optInt(int index){  return this.optInt(index,0);}  }
class C{  public static List<SpellCheckerSubtype> sort(Context context,int flags,SpellCheckerInfo sci,List<SpellCheckerSubtype> subtypeList){  if (sci == null)   return subtypeList;  final HashSet<SpellCheckerSubtype> subtypesSet=new HashSet<SpellCheckerSubtype>(subtypeList);  final ArrayList<SpellCheckerSubtype> sortedList=new ArrayList<SpellCheckerSubtype>();  int N=sci.getSubtypeCount();  for (int i=0; i < N; ++i) {    SpellCheckerSubtype subtype=sci.getSubtypeAt(i);    if (subtypesSet.contains(subtype)) {      sortedList.add(subtype);      subtypesSet.remove(subtype);    }  }  for (  SpellCheckerSubtype subtype : subtypesSet) {    sortedList.add(subtype);  }  return sortedList;}  }
class C{  private String parsePath(String path){  path=Path.fixPath(path);  try {    URI uri=new URI(path);    return uri.getPath();  } catch (  URISyntaxException e) {    return null;  }}  }
class C{  public void removePermission(String queueUrl,String label) throws AmazonServiceException, AmazonClientException {  amazonSqsToBeExtended.removePermission(queueUrl,label);}  }
class C{  private SimpleSink.SimpleWriteOperation buildWriteOperation(String baseTemporaryFilename){  SimpleSink sink=buildSink();  return new SimpleSink.SimpleWriteOperation(sink,appendToTempFolder(baseTemporaryFilename));}  }
class C{  public void install(){  if (!installed.compareAndSet(false,true))   return;  preinstall();}  }
class C{  public void forEach(Insn.Visitor visitor){  int sz=size();  for (int i=0; i < sz; i++) {    get(i).accept(visitor);  }}  }
class C{  public static boolean equals(byte[] b1,int offset1,byte[] b2,int offset2,int length){  for (int i=0; i < length; i++) {    if (b1[i + offset1] != b2[i + offset2]) {      return false;    }  }  return true;}  }
class C{  public int compareToIgnoreCase(String str){  return value.compareToIgnoreCase(str);}  }
class C{  public void afterCacheClose(SystemMemberCacheEvent event){  adminDS.handleCacheCloseEvent(event);}  }
class C{  public boolean adjustEntry(E entry,DBID routingObjectID,double parentDistance,AbstractMTree<O,N,E,?> mTree){  boolean changed=entry.setRoutingObjectID(routingObjectID);  changed|=entry.setParentDistance(parentDistance);  changed|=entry.setCoveringRadius(coveringRadiusFromEntries(routingObjectID,mTree));  return changed;}  }
class C{  public UniformDesignGenerator(int numberOfObjectives,int numberOfPoints){  super();  this.numberOfObjectives=numberOfObjectives;  this.numberOfPoints=numberOfPoints;}  }
class C{  public void createServer(VM server,boolean accessor,int redundantCopies){  createServer(server,0,accessor,redundantCopies);}  }
class C{  public DCDs(int maxIterations,boolean useL1){  this(maxIterations,1e-3,1,useL1);}  }
class C{  public void addEventSourceListener(EventSourceListener listener){  LOG.entering(CLASS_NAME,"addEventSourceListener",listener);  _getDelegate().addEventSourceListener(listener);}  }
class C{  private void removeSelection(){  IStructuredSelection selection=(IStructuredSelection)tableSelected.getSelection();  List selectionList=selection.toList();  for (  Object item : selectionList) {    if (item instanceof PropertyType) {      PropertyType propertyType=(PropertyType)item;      selectedProperties.remove(propertyType);      unselectedProperties.add(propertyType);    }    if (item instanceof PropertyGroup) {      PropertyGroup group=(PropertyGroup)item;      selectedProperties.removeAll(group.getPropertyTypes());      unselectedProperties.addAll(group.getPropertyTypes());    }  }  selectedContentProvider.setVisibleTyps(selectedProperties);  contentProvider.setVisibleTyps(unselectedProperties);  tableSelected.setInput(selectedItems);  table.setInput(selectedItems);  table.setSelection(selection);  tableSelected.getControl().setFocus();}  }
class C{  public int size(){  return n;}  }
class C{  protected boolean isHTMLFlavor(DataFlavor flavor){  DataFlavor[] flavors=htmlFlavors;  for (int i=0; i < flavors.length; i++) {    if (flavors[i].equals(flavor)) {      return true;    }  }  return false;}  }
class C{  public void startQuery(Query query){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public JSONObject createType(String typeDefinition) throws AtlasException {  return createOrUpdateTypes(typeDefinition,false);}  }
class C{  public static InputStream post(URL url,Object[] parameters) throws IOException {  return new ClientHttpRequest(url).post(parameters);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:59.330 -0500",hash_original_method="B1D6BF5FEA5681AEA45EA9D4CACD9FB8",hash_generated_method="673E4F7B4FF2676DD37E8389FD4B4F4A") protected String encodeBody(){  String retval=Integer.toString(expires);  if (!parameters.isEmpty()) {    retval+=SEMICOLON + parameters.encode();  }  return retval;}  }
class C{  @POST @Path("rename/create") @Produces("application/json") @Consumes("application/json") public RenameRefactoringSession createRenameRefactoring(CreateRenameRefactoring settings) throws CoreException, RefactoringException {  IJavaProject javaProject=model.getJavaProject(settings.getProjectPath());  IJavaElement elementToRename;  ICompilationUnit cu=null;switch (settings.getType()) {case COMPILATION_UNIT:    elementToRename=javaProject.findType(settings.getPath()).getCompilationUnit();  break;case PACKAGE:elementToRename=javaProject.findPackageFragment(new org.eclipse.core.runtime.Path(settings.getPath()));break;case JAVA_ELEMENT:cu=javaProject.findType(settings.getPath()).getCompilationUnit();elementToRename=getSelectionElement(cu,settings.getOffset());break;default :elementToRename=null;}if (elementToRename == null) {throw new RefactoringException("Can't find java element to rename.");}return manager.createRenameRefactoring(elementToRename,cu,settings.getOffset(),settings.isRefactorLightweight());}  }
class C{  public TimestampToken generateXAdESContentTimestampAsTimestampToken(final DSSDocument toSignDocument,final XAdESSignatureParameters externalParameters,final TimestampType timestampType){  if (externalParameters == null) {    throw new NullPointerException();  }  final XAdESSignatureParameters signatureParameters=setSignatureParameters(externalParameters);  final XAdESLevelBaselineB levelBaselineB=new XAdESLevelBaselineB(commonCertificateVerifier);  byte[] signatureValueBytes=Base64.decodeBase64(fakeSignatureValue);  final DSSDocument fullSignature=levelBaselineB.signDocument(toSignDocument,signatureParameters,signatureValueBytes);  final List<Reference> references=getReferencesFromValidatedSignature(toSignDocument,fullSignature);  byte[] concatenatedReferences=concatenateReferencesAsByteArray(references);switch (timestampType) {case ALL_DATA_OBJECTS_TIMESTAMP:case INDIVIDUAL_DATA_OBJECTS_TIMESTAMP:    return generateTimestampToken(timestampType,externalParameters,concatenatedReferences);default :  throw new DSSException("Incompatible timestamp type");}}  }
class C{  public static boolean isXML11ValidQName(String str){  final int colon=str.indexOf(':');  if (colon == 0 || colon == str.length() - 1) {    return false;  }  if (colon > 0) {    final String prefix=str.substring(0,colon);    final String localPart=str.substring(colon + 1);    return isXML11ValidNCName(prefix) && isXML11ValidNCName(localPart);  } else {    return isXML11ValidNCName(str);  }}  }
class C{  public String toSignatureString(){  String ret="";  if (hasReceiver())   ret+=receiverValues; else   ret+=getCname();  ret+=": " + getRtype() + " "+ this.getName()+ "(";  for (int i=0; i < args.length; i++) {    if (i > 0)     ret+=", ";    ret+=args[i].toString();  }  return ret + ")";}  }
class C{  protected void forwardMessage(AbstractMRListener client,AbstractMRMessage m){  ((TamsListener)client).message((TamsMessage)m);}  }
class C{  public static int RKASK(int x){  return ((x) | BITRK);}  }
class C{  public boolean isNoGrid(){  return noGrid;}  }
class C{  public static void extractIdat(InputStream is,OutputStream os,boolean stripFilterByte,boolean checkCrc){  try {    ChunkSeqPngRawPixels cr=new ChunkSeqPngRawPixels(is,os);    cr.setCheckCrc(checkCrc);    cr.setOmitFilterByte(stripFilterByte);    cr.readAll();    is.close();    os.close();  } catch (  IOException e) {    throw new PngjException(e);  }}  }
class C{  public double pdf(double x){  if (x < 0.0)   return 0.0;  return lambda * Math.exp(-x * lambda);}  }
class C{  private void transformTag(StringBuffer target,SourceCode cfml,Tag tag,URL url) throws MalformedURLException {  char quote=0;  boolean inside=false;  StringBuffer value=new StringBuffer();  while (!cfml.isAfterLast()) {    if (inside) {      if (quote != 0 && cfml.forwardIfCurrent(quote)) {        inside=false;        target.append(add(url,value.toString()));        target.append(quote);      } else       if (quote == 0 && (cfml.isCurrent(' ') || cfml.isCurrent("/>") || cfml.isCurrent('>')|| cfml.isCurrent('\t')|| cfml.isCurrent('\n'))) {        inside=false;        target.append(new URL(url,value.toString()));        target.append(cfml.getCurrent());        cfml.next();      } else {        value.append(cfml.getCurrent());        cfml.next();      }    } else     if (cfml.forwardIfCurrent('>')) {      target.append('>');      break;    } else {      for (int i=0; i < tag.attributes.length; i++) {        if (cfml.forwardIfCurrent(tag.attributes[i])) {          target.append(tag.attributes[i]);          cfml.removeSpace();          if (cfml.isCurrent('=')) {            inside=true;            target.append('=');            cfml.next();            cfml.removeSpace();            quote=cfml.getCurrent();            value=new StringBuffer();            if (quote != '"' && quote != '\'')             quote=0; else {              target.append(quote);              cfml.next();            }          }        }      }      if (!inside) {        target.append(cfml.getCurrent());        cfml.next();      }    }  }}  }
class C{  public static Collection toRef(Collection o){  return o;}  }
class C{  private void registerStore0(PlatformCacheStore store,boolean convertBinary) throws IgniteCheckedException {  if (store instanceof PlatformDotNetCacheStore) {    PlatformDotNetCacheStore store0=(PlatformDotNetCacheStore)store;    store0.initialize(ctx,convertBinary);  } else   throw new IgniteCheckedException("Unsupported interop store: " + store);}  }
class C{  public void goingInactive(){  log.debug("Block {} goes UNOCCUPIED",getSystemName());  int currPathCnt=paths.size();  for (int i=0; i < currPathCnt; i++) {    Block b=paths.get(i).getBlock();    if (b != null) {      b.SetAsEntryBlockIfPossible(this);    }  }  setValue(null);  setDirection(Path.NONE);  setState(UNOCCUPIED);}  }
class C{  @Override public void intercept(RequestFacade request){  if (!loggedIn) {    try {      FormUrlEncodedTypedOutput to=new FormUrlEncodedTypedOutput();      to.addField("username",username);      to.addField("password",password);      to.addField("client_id",clientId);      to.addField("client_secret",clientSecret);      to.addField("grant_type","password");      String base64Auth=BaseEncoding.base64().encode(new String(clientId + ":" + clientSecret).getBytes());      List<Header> headers=new ArrayList<Header>();      headers.add(new Header("Authorization","Basic " + base64Auth));      Request req=new Request("POST",tokenIssuingEndpoint,headers,to);      Response resp=client.execute(req);      if (resp.getStatus() < 200 || resp.getStatus() > 299) {        throw new SecuredRestException("Login failure: " + resp.getStatus() + " - "+ resp.getReason());      } else {        String body=IOUtils.toString(resp.getBody().in());        accessToken=new Gson().fromJson(body,JsonObject.class).get("access_token").getAsString();        request.addHeader("Authorization","Bearer " + accessToken);        loggedIn=true;      }    } catch (    Exception e) {      throw new SecuredRestException(e);    }  } else {    request.addHeader("Authorization","Bearer " + accessToken);  }}  }
class C{  @DSSink({DSSinkKind.IO}) @DSComment("Activity on IO class") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:49.619 -0500",hash_original_method="A77584E214A9D3ECC7E83106209731E2",hash_generated_method="B8415B4CF44291581AD37B7E19828B7B") public final void writeBoolean(boolean val) throws IOException {  out.write(val ? 1 : 0);  written++;}  }
class C{  public boolean isMarker(){  return marker;}  }
class C{  public static RectF toRectF(Rect rect){  return new RectF(rect.left,rect.top,rect.right,rect.bottom);}  }
class C{  private double[] crunch(double[] doubleHistogram){  double[] result=new double[doubleHistogram.length / 2];  for (int i=0; i < doubleHistogram.length; i+=2) {    result[i / 2]=doubleHistogram[i] + doubleHistogram[i + 1] / 16d;  }  return result;}  }
class C{  public Bigquery create(String applicationName,HttpTransport transport,JsonFactory jsonFactory,HttpRequestInitializer httpRequestInitializer){  return subfactory.create(applicationName,transport,jsonFactory,httpRequestInitializer);}  }
class C{  public void addColumn(Object columnName,Object[] columnData){  addColumn(columnName,convertToVector(columnData));}  }
class C{  public EnumerationTypeItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static FXGParser createDefaultParser(){  return new FXGSAXParser(FXG_PROFILE_DESKTOP);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE_NAME:  return isSetStoreName();case KEY:return isSetKey();case VERSION:return isSetVersion();}throw new IllegalStateException();}  }
class C{  public void notifyInternal(int notepos){  int onNotePosition=scopePosition(notepos);  if (mMode == LayouMode.DEFAULT) {  } else   if (mMode == LayouMode.SINGLE_CHOICE) {    for (int i=0; i < mChildViews.size(); i++) {      if (mChildViews.get(i) instanceof TagView) {        TagView tag=(TagView)mChildViews.get(i);        if (onNotePosition == i) {          tag.applyProfile(profile_active);          tag.setFlag_on(true);        } else {          tag.setFlag_on(false);          tag.applyProfile(profile_normal);        }        tag.postInvalidate();      }    }  } else   if (mMode == LayouMode.SINGLE_CHOICE_OVERLAY_PRESET) {    for (int i=0; i < mChildViews.size(); i++) {      if (mChildViews.get(i) instanceof TagView) {        TagView tag=(TagView)mChildViews.get(i);        if (onNotePosition == i) {          tag.applyProfile(profile_active);          tag.setFlag_on(true);        } else {          processPreselectedOptionsOff(i,tag);        }        tag.postInvalidate();      }    }  } else   if (mMode == LayouMode.MULTIPLE_CHOICE) {    if (mChildViews.get(onNotePosition) instanceof TagView) {      TagView tag=(TagView)mChildViews.get(onNotePosition);      if (tag.isFlag_on()) {        processPreselectedOptions(notepos,tag,profile_normal,false);      } else {        processPreselectedOptions(notepos,tag,profile_active,true);      }      tag.postInvalidate();    }  }}  }
class C{  public boolean doSendCapicityExceeded(LicenseInfoExt licenseInfo) throws Exception {  if (licenseInfo == null) {    return true;  }  String lastCapacityExceedDate=licenseInfo.getLastCapacityExceededEventDate();  if (lastCapacityExceedDate == null || lastCapacityExceedDate.isEmpty() || lastCapacityExceedDate.equals(CallHomeConstants.VALUE_NOT_SET)) {    _log.info("There is no previous capacity-exceeded event sent.");    return true;  }  _log.info("Previous capacity-exceeded event was sent on: {}",lastCapacityExceedDate);  SimpleDateFormat storedDate=new SimpleDateFormat(SERIALIZE_DATE_FORMAT);  Date zkDate=storedDate.parse(lastCapacityExceedDate);  Date today=Calendar.getInstance().getTime();  int days=Days.daysBetween(new DateTime(zkDate),new DateTime(today)).getDays();  if (days > (CallHomeConstants.CAPACITY_EXCEEDED_EVENT_THRESHOLD - 1)) {    _log.info("It's been {} days since last capacity-exceeded event was sent. Sending another one now. ",days);    return true;  }  _log.info("Capacity-exceeded event was sent {} days back. Will send another one in {} days.",days,(CallHomeConstants.CAPACITY_EXCEEDED_EVENT_THRESHOLD - days));  return false;}  }
class C{  private ClassConstant parseClassConstant(int index) throws IOException {  int nameIndex=readShort();  return new ClassConstant(_class.getConstantPool(),index,nameIndex);}  }
class C{  protected void close(){  this.open=false;  if (has("open")) {    remove("open");  }  notifyWorldAboutChanges();}  }
class C{  public ASN1Primitive toASN1Primitive(){  return id.toASN1Primitive();}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MBank[");  sb.append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  void resolve(ReferenceType refType){synchronized (eventRequestSpecs) {    for (    EventRequestSpec spec : eventRequestSpecs) {      spec.attemptResolve(refType);    }  }}  }
class C{  public WaitingDialog(java.awt.Frame parent){  super(parent,true);  initComponents();  setTitle(ValueHolder.WINDOW_TITLE);}  }
class C{  private static double CallStaticDoubleMethodA(JNIEnvironment env,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallStaticDoubleMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,0,methodID,argAddress,TypeReference.Double,true);  return Reflection.unwrapDouble(returnObj);}  }
class C{  @Override public void pushMessageAsync(Message msg) throws org.apache.thrift.TException {  pushMessageSync(msg);  return;}  }
class C{  static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  private void resetToSAXHandler(){  this.m_lexHandler=null;  this.m_saxHandler=null;  this.m_state=null;  this.m_shouldGenerateNSAttribute=false;}  }
class C{  void onPoiMarkerClick(LocationMarkerView<Poi> marker){  Bitmap bitmap=mapFragment.getBitmapHandler().getMarkerBitmap(marker.getRelatedObject().getType(),Poi.computeState(true,false,false));  if (bitmap != null) {    marker.setIcon(IconFactory.getInstance(mapFragment.getActivity()).fromBitmap(bitmap));  }  mapFragment.switchMode(MapMode.DETAIL_POI);  mapFragment.changeMapPositionSmooth(marker.getPosition());  mapFragment.setMarkerSelectedId(-1L);}  }
class C{  static MediaType createTextType(String subtype){  return create(TEXT_TYPE,subtype);}  }
class C{  public boolean isInvoiced(){  Object oo=get_Value(COLUMNNAME_IsInvoiced);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static long toPeriod(String value) throws ConfigException {  return toPeriod(value,1000);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ExpressionsPackage.NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION__LEFT_OPERAND:    return basicSetLeftOperand(null,msgs);case ExpressionsPackage.NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION__RIGHT_OPERAND:  return basicSetRightOperand(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public EclipseIniLauncher(File installationRoot) throws FileNotFoundException, IOException {  FileMisc.assertMacApp(installationRoot);  Objects.requireNonNull(installationRoot);  eclipseIni=EclipseIni.parseFrom(new File(installationRoot,FileMisc.macContentsEclipse() + "eclipse.ini"));}  }
class C{  public boolean isThumbnailCompressed(){  return mData.hasCompressedThumbnail();}  }
class C{  public static Object newInstance(Class<?> componentType,int[] dimensions) throws NegativeArraySizeException, IllegalArgumentException {  return VMCommonLibrarySupport.createArray(componentType,dimensions);}  }
class C{  public FaultException fault(){  return fault;}  }
class C{  @SuppressLint("ClickableViewAccessibility") @Override public boolean onTouchEvent(MotionEvent event){  if (event.getAction() == MotionEvent.ACTION_UP) {    setAlpha(1.0f);  } else   if (event.getAction() == MotionEvent.ACTION_DOWN) {    setAlpha(0.6f);  }  return super.onTouchEvent(event);}  }
class C{  public boolean determines(List<Node> z,Node x) throws UnsupportedOperationException {  throw new UnsupportedOperationException();}  }
class C{  public Builder deletePhoneNumber(PhoneNumber phoneNumber){  PhoneNumber deletePhoneNumber=new PhoneNumber.Builder().setValue(phoneNumber.getValue()).setType(phoneNumber.getType()).setOperation(DELETE).build();  phoneNumbers.add(deletePhoneNumber);  return this;}  }
class C{  private void addOriginalContentBookmarkOnce(){  if (!singleShotService.isFirstTime("add_original_content_bookmarks"))   return;  bookmarkService.get().first().subscribe(null,Actions.empty());}  }
class C{  protected void init(Filter src){  touch();  this.srcs=new Vector(1);  if (src != null) {    this.srcs.add(src);  }}  }
class C{  public GuacamoleClientTooManyException(Throwable cause){  super(cause);}  }
class C{  public static ByteBuffer makeByteBuffer(byte[] arr){  ByteBuffer bb=ByteBuffer.allocateDirect(arr.length);  bb.order(ByteOrder.nativeOrder());  bb.put(arr);  bb.position(0);  return bb;}  }
class C{  public synchronized void dropMergingUpdates(){  mergingDVUpdates.clear();  isMerging=false;}  }
class C{  public static ServerBartender currentSelfServer(){  NetworkSystem clusterService=current();  if (clusterService == null)   throw new IllegalStateException(L.l("{0} is not available in this context",NetworkSystem.class.getSimpleName()));  return clusterService.selfServer();}  }
class C{  private boolean isTxtTblMultCreated(){  boolean isMTxt=false;  if (_flds.getMultFldsCount() > 0) {    for (int i=0; i < _flds.count(); i++) {      ArchiveFldImpl fld=(ArchiveFldImpl)_flds.get(i);      if (fld.isMult()) {        int type=fld.getType();        if (type == ArchiveFldType.SHORT_TEXT)         isMTxt=true;      }    }  }  return isMTxt;}  }
class C{  public static boolean isDownloadingStatus(DownloadFileInfo downloadFileInfo){  if (!DownloadFileUtil.isLegal(downloadFileInfo)) {    return false;  }switch (downloadFileInfo.getStatus()) {case Status.DOWNLOAD_STATUS_WAITING:case Status.DOWNLOAD_STATUS_RETRYING:case Status.DOWNLOAD_STATUS_PREPARING:case Status.DOWNLOAD_STATUS_PREPARED:case Status.DOWNLOAD_STATUS_DOWNLOADING:    return true;}return false;}  }
class C{  public boolean removeFooterView(View v){  if (mFooterViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeFooter(v)) {      result=true;    }    removeFixedViewInfo(v,mFooterViewInfos);    return result;  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:21.603 -0500",hash_original_method="A7F2A84C27DF1EE7C10C6ACC7D9300BF",hash_generated_method="EF86E0A5518881FF07C9FC3B533D6929") public Chunk handleChunk(Chunk request){  if (false)   Log.v("ddm-thread","Handling " + name(request.type) + " chunk");  int type=request.type;  if (type == CHUNK_THEN) {    return handleTHEN(request);  } else   if (type == CHUNK_THST) {    return handleTHST(request);  } else   if (type == CHUNK_STKL) {    return handleSTKL(request);  } else {    throw new RuntimeException("Unknown packet " + ChunkHandler.name(type));  }}  }
class C{  public Language(final String id){  super(id);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  long l=getLong(stack);  String s=getString(stack);  java.io.File newDir=getFile(stack);  Seeker.getInstance().changeVideoDirectory(getFile(stack),newDir,s,l);  return null;}  }
class C{  @Override public TableDto create(@Nonnull QualifiedName name){  TableDto result=null;  log.info("Get the table {}",name);  Optional<TableDto> oTable=tableService.get(name,false);  if (oTable.isPresent()) {    TableDto table=oTable.get();    String viewName=createViewName(name);    QualifiedName targetName=QualifiedName.ofTable(name.getCatalogName(),VIEW_DB_NAME,viewName);    log.info("Check if the view table {} exists.",targetName);    Optional<TableDto> oViewTable=Optional.empty();    try {      oViewTable=tableService.get(targetName,false);    } catch (    NotFoundException ignored) {    }    if (!oViewTable.isPresent()) {      log.info("Creating view {}.",targetName);      result=tableService.copy(table,targetName);    } else {      result=oViewTable.get();    }  } else {    throw new TableNotFoundException(new SchemaTableName(name.getDatabaseName(),name.getTableName()));  }  return result;}  }
class C{  public static boolean equals(double[] field1,double[] field2){  if (field1 == null || field1.length == 0) {    return field2 == null || field2.length == 0;  } else {    return Arrays.equals(field1,field2);  }}  }
class C{  public void contourRenderer(Graphics2D g2,Rectangle2D dataArea,PlotRenderingInfo info,ContourPlot plot,ValueAxis horizontalAxis,ValueAxis verticalAxis,ColorBar colorBar,ContourDataset data,CrosshairState crosshairState){  Rectangle2D.Double entityArea;  EntityCollection entities=null;  if (info != null) {    entities=info.getOwner().getEntityCollection();  }  Rectangle2D.Double rect;  rect=new Rectangle2D.Double();  Object antiAlias=g2.getRenderingHint(RenderingHints.KEY_ANTIALIASING);  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_OFF);  Number[] xNumber=data.getXValues();  Number[] yNumber=data.getYValues();  Number[] zNumber=data.getZValues();  double[] x=new double[xNumber.length];  double[] y=new double[yNumber.length];  for (int i=0; i < x.length; i++) {    x[i]=xNumber[i].doubleValue();    y[i]=yNumber[i].doubleValue();  }  int[] xIndex=data.indexX();  int[] indexX=data.getXIndices();  boolean vertInverted=((NumberAxis)verticalAxis).isInverted();  boolean horizInverted=false;  if (horizontalAxis instanceof NumberAxis) {    horizInverted=((NumberAxis)horizontalAxis).isInverted();  }  double transX=0.0;  double transXm1;  double transXp1;  double transDXm1;  double transDXp1=0.0;  double transDX=0.0;  double transY;  double transYm1;  double transYp1;  double transDYm1;  double transDYp1=0.0;  double transDY;  int iMax=xIndex[xIndex.length - 1];  for (int k=0; k < x.length; k++) {    int i=xIndex[k];    if (indexX[i] == k) {      if (i == 0) {        transX=horizontalAxis.valueToJava2D(x[k],dataArea,RectangleEdge.BOTTOM);        transXm1=transX;        transXp1=horizontalAxis.valueToJava2D(x[indexX[i + 1]],dataArea,RectangleEdge.BOTTOM);        transDXm1=Math.abs(0.5 * (transX - transXm1));        transDXp1=Math.abs(0.5 * (transX - transXp1));      } else       if (i == iMax) {        transX=horizontalAxis.valueToJava2D(x[k],dataArea,RectangleEdge.BOTTOM);        transXm1=horizontalAxis.valueToJava2D(x[indexX[i - 1]],dataArea,RectangleEdge.BOTTOM);        transXp1=transX;        transDXm1=Math.abs(0.5 * (transX - transXm1));        transDXp1=Math.abs(0.5 * (transX - transXp1));      } else {        transX=horizontalAxis.valueToJava2D(x[k],dataArea,RectangleEdge.BOTTOM);        transXp1=horizontalAxis.valueToJava2D(x[indexX[i + 1]],dataArea,RectangleEdge.BOTTOM);        transDXm1=transDXp1;        transDXp1=Math.abs(0.5 * (transX - transXp1));      }      if (horizInverted) {        transX-=transDXp1;      } else {        transX-=transDXm1;      }      transDX=transDXm1 + transDXp1;      transY=verticalAxis.valueToJava2D(y[k],dataArea,RectangleEdge.LEFT);      transYm1=transY;      if (k + 1 == y.length) {        continue;      }      transYp1=verticalAxis.valueToJava2D(y[k + 1],dataArea,RectangleEdge.LEFT);      transDYm1=Math.abs(0.5 * (transY - transYm1));      transDYp1=Math.abs(0.5 * (transY - transYp1));    } else     if ((i < indexX.length - 1 && indexX[i + 1] - 1 == k) || k == x.length - 1) {      transY=verticalAxis.valueToJava2D(y[k],dataArea,RectangleEdge.LEFT);      transYm1=verticalAxis.valueToJava2D(y[k - 1],dataArea,RectangleEdge.LEFT);      transYp1=transY;      transDYm1=Math.abs(0.5 * (transY - transYm1));      transDYp1=Math.abs(0.5 * (transY - transYp1));    } else {      transY=verticalAxis.valueToJava2D(y[k],dataArea,RectangleEdge.LEFT);      transYp1=verticalAxis.valueToJava2D(y[k + 1],dataArea,RectangleEdge.LEFT);      transDYm1=transDYp1;      transDYp1=Math.abs(0.5 * (transY - transYp1));    }    if (vertInverted) {      transY-=transDYm1;    } else {      transY-=transDYp1;    }    transDY=transDYm1 + transDYp1;    rect.setRect(transX,transY,transDX,transDY);    if (zNumber[k] != null) {      g2.setPaint(colorBar.getPaint(zNumber[k].doubleValue()));      g2.fill(rect);    } else     if (this.missingPaint != null) {      g2.setPaint(this.missingPaint);      g2.fill(rect);    }    entityArea=rect;    if (entities != null) {      String tip="";      if (getToolTipGenerator() != null) {        tip=this.toolTipGenerator.generateToolTip(data,k);      }      String url=null;      ContourEntity entity=new ContourEntity((Rectangle2D.Double)entityArea.clone(),tip,url);      entity.setIndex(k);      entities.add(entity);    }    if (plot.isDomainCrosshairLockedOnData()) {      if (plot.isRangeCrosshairLockedOnData()) {        crosshairState.updateCrosshairPoint(x[k],y[k],transX,transY,PlotOrientation.VERTICAL);      } else {        crosshairState.updateCrosshairX(transX);      }    } else {      if (plot.isRangeCrosshairLockedOnData()) {        crosshairState.updateCrosshairY(transY);      }    }  }  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,antiAlias);}  }
class C{  public void testParseLanguage(){  String tests[][]={{"(SCHEME=ISO.639-1) sv","sv"},{"(SCHEME=RFC1766) sv-FI","sv"},{"(SCHEME=Z39.53) SWE","sv"},{"EN_US, SV, EN, EN_UK","en"},{"English Swedish","en"},{"English, swedish","en"},{"English,Swedish","en"},{"Other (Svenska)","sv"},{"SE","se"},{"SV","sv"},{"SV charset=iso-8859-1","sv"},{"SV-FI","sv"},{"SV; charset=iso-8859-1","sv"},{"SVE","sv"},{"SW","sw"},{"SWE","sv"},{"SWEDISH","sv"},{"Sv","sv"},{"Sve","sv"},{"Svenska","sv"},{"Swedish","sv"},{"Swedish, svenska","sv"},{"en, sv","en"},{"sv","sv"},{"sv, be, dk, de, fr, no, pt, ch, fi, en","sv"},{"sv,en","sv"},{"sv-FI","sv"},{"sv-SE","sv"},{"sv-en","sv"},{"sv-fi","sv"},{"sv-se","sv"},{"sv; Content-Language: sv","sv"},{"sv_SE","sv"},{"sve","sv"},{"svenska, swedish, engelska, english","sv"},{"sw","sw"},{"swe","sv"},{"swe.SPR.","sv"},{"sweden","sv"},{"swedish","sv"},{"swedish,","sv"},{"text/html; charset=sv-SE","sv"},{"text/html; sv","sv"},{"torp, stuga, uthyres, bed & breakfast",null}};  for (int i=0; i < 44; i++) {    assertEquals(tests[i][1],HTMLLanguageParser.LanguageParser.parseLanguage(tests[i][0]));  }}  }
class C{  protected void calculateBranchLengths(){  nodeHeightsToLengths((FlexibleNode)getRoot(),getRootHeight());  lengthsKnown=true;}  }
class C{  @Override public boolean supportsLikeEscapeClause(){  debugCodeCall("supportsLikeEscapeClause");  return true;}  }
class C{  public List<AnnotationNode> visit(AnnotationNode collector,AnnotationNode aliasAnnotationUsage,AnnotatedNode aliasAnnotated,SourceUnit source){  List<AnnotationNode> ret=getTargetAnnotationList(collector,aliasAnnotationUsage,source);  Set<String> unusedNames=new HashSet<String>(aliasAnnotationUsage.getMembers().keySet());  for (  AnnotationNode an : ret) {    for (    String name : aliasAnnotationUsage.getMembers().keySet()) {      if (an.getClassNode().hasMethod(name,Parameter.EMPTY_ARRAY)) {        unusedNames.remove(name);        an.setMember(name,aliasAnnotationUsage.getMember(name));      }    }  }  if (!unusedNames.isEmpty()) {    String message="Annotation collector got unmapped names " + unusedNames.toString() + ".";    addError(message,aliasAnnotationUsage,source);  }  return ret;}  }
class C{  public void actionPerformed(ActionEvent e){  log.info(e.getActionCommand());  if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL))   cmd_cancel(); else   if (e.getActionCommand().equals(ConfirmPanel.A_REFRESH))   cmd_refresh(); else   if (e.getActionCommand().equals(ConfirmPanel.A_NEW)) {    m_query=MQuery.getNoRecordQuery(m_tableName,true);    m_total=0;    dispose();  } else   if (e.getSource() == bIgnore)   cmd_ignore(); else   if (e.getSource() == bNew)   cmd_new(); else   if (e.getSource() == bSave)   cmd_save(true); else   if (e.getSource() == bDelete)   cmd_delete(); else   if (e.getSource() == columns) {    String columnName=null;    Object selected=columns.getSelectedItem();    if (selected != null) {      if (selected instanceof ValueNamePair) {        ValueNamePair column=(ValueNamePair)selected;        columnName=column.getValue();      } else {        columnName=selected.toString();      }    }    if (columnName != null) {      log.config("Column: " + columnName);      if (columnName.endsWith("_ID") || columnName.endsWith("_Acct"))       operators.setModel(new DefaultComboBoxModel(MQuery.OPERATORS_ID)); else       if (columnName.startsWith("Is"))       operators.setModel(new DefaultComboBoxModel(MQuery.OPERATORS_YN)); else       operators.setModel(new DefaultComboBoxModel(MQuery.OPERATORS));    }  } else   if (e.getSource() == fQueryName) {    int index=fQueryName.getSelectedIndex();    if (index < 0) {      if (fQueryName.getSelectedItem() == null || fQueryName.getSelectedItem().equals(m_sTipText)) {        return;      }    } else     if (index == 0) {      advancedTable.stopEditor(false);      DefaultTableModel model=(DefaultTableModel)advancedTable.getModel();      int cnt=model.getRowCount();      if (cnt > 0) {        for (int i=cnt - 1; i >= 0; i--) {          model.removeRow(i);        }        cmd_new();      }      fQueryName.setSelectedIndex(-1);      fQueryName.setSelectedItem(m_sTipText);      advancedTable.requestFocusInWindow();    } else     parseUserQuery(userQueries[index - 1]);  } else {    if (e.getSource() == confirmPanelA.getOKButton())     cmd_ok_Advanced(); else     if (e.getSource() == confirmPanelS.getOKButton())     cmd_ok_Simple(); else     if (e.getSource() instanceof JTextField && tabbedPane.getSelectedIndex() == 0)     cmd_ok_Simple();  }}  }
class C{  public static boolean areSamePrimitiveTypes(TypeMirror left,TypeMirror right){  if (!isPrimitive(left) || !isPrimitive(right)) {    return false;  }  return (left.getKind() == right.getKind());}  }
class C{  private void addAlias(Alias alias){  mTableFilterHeader.setAdaptiveChoices(false);  int index=mAliasModel.addAlias(alias);  mTableFilterHeader.setAdaptiveChoices(true);  if (index >= 0) {    int translatedIndex=mAliasTable.convertRowIndexToView(index);    mAliasTable.setRowSelectionInterval(translatedIndex,translatedIndex);    mAliasTable.scrollRectToVisible(new Rectangle(mAliasTable.getCellRect(translatedIndex,0,true)));  }}  }
class C{  public static void checkAndAppendTextArrayElement(AVList params,String paramKey,Element context,String path){  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Object o=params.getValue(paramKey);  if (o != null && o instanceof String[]) {    String[] strings=(String[])o;    if (strings.length > 0) {      appendTextArray(context,path,(String[])o);    }  }}  }
class C{  public synchronized void waitSensorChange(Sensor[] mSensors){  waitChange(mSensors);  return;}  }
class C{  @SuppressWarnings("unchecked") public static Object parseMemberValue(Class<?> memberType,ByteBuffer buf,ConstantPool constPool,Class<?> container){  Object result=null;  int tag=buf.get();switch (tag) {case 'e':    return parseEnumValue((Class<? extends Enum<?>>)memberType,buf,constPool,container);case 'c':  result=parseClassValue(buf,constPool,container);break;case '@':result=parseAnnotation(buf,constPool,container,true);break;case '[':return parseArray(memberType,buf,constPool,container);default :result=parseConst(tag,buf,constPool);}if (!(result instanceof ExceptionProxy) && !memberType.isInstance(result)) result=new AnnotationTypeMismatchExceptionProxy(result.getClass() + "[" + result+ "]");return result;}  }
class C{  void indexProcess(Record record){  Proc proc=processes.get(record.pid);  if (proc == null) {    Proc parent=processes.get(record.ppid);    proc=new Proc(parent,record.pid);    processes.put(proc.id,proc);    if (parent != null) {      parent.children.add(proc);    }  }  proc.setName(record.processName);}  }
class C{  public void testAfterSaveError_BF2849122() throws Exception {  assertNotNull("TrxName should not be null",getTrxName());  MyTestPO t1=new MyTestPO(getCtx(),false,getTrxName());  t1.saveEx();  assertTrue("Object not found(1) - t1=" + t1,MyTestPO.exists(t1.get_ID(),getTrxName()));  assertTrue("Object not found(1) - t1(dep)=" + t1,MyTestPO.exists(t1.getDependent_ID(),getTrxName()));  final MyTestPO t2=new MyTestPO(getCtx(),true,getTrxName());  try {    t2.saveEx();  } catch (  Exception e) {  }  assertTrue("Object not found(2) - t1=" + t1,MyTestPO.exists(t1.get_ID(),getTrxName()));  assertTrue("Object not found(2) - t1(dep)=" + t1,MyTestPO.exists(t1.getDependent_ID(),getTrxName()));  assertFalse("Object found(2) - t2=" + t2,MyTestPO.exists(t2.get_ID(),getTrxName()));  assertFalse("Object found(2) - t2(dep)=" + t2,MyTestPO.exists(t2.getDependent_ID(),getTrxName()));  final MyTestPO t3=new MyTestPO(getCtx(),false,getTrxName());  t3.saveEx();  assertTrue("Object not found(3) - t1=" + t1,MyTestPO.exists(t1.get_ID(),getTrxName()));  assertTrue("Object not found(3) - t1(dep)=" + t1,MyTestPO.exists(t1.getDependent_ID(),getTrxName()));  assertFalse("Object found(3) - t2=" + t2,MyTestPO.exists(t2.get_ID(),getTrxName()));  assertFalse("Object found(3) - t2(dep)=" + t2,MyTestPO.exists(t2.getDependent_ID(),getTrxName()));  assertTrue("Object not found(3) - t3=" + t3,MyTestPO.exists(t3.get_ID(),getTrxName()));  assertTrue("Object not found(3) - t3(dep)=" + t3,MyTestPO.exists(t3.getDependent_ID(),getTrxName()));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.PRE_OR_POST_CONDITION___ANONYMOUS_PRE_OR_POST_CONDITION_11:    return anonymous_PreOrPostCondition_1_1 != null && !anonymous_PreOrPostCondition_1_1.isEmpty();case UmplePackage.PRE_OR_POST_CONDITION___TRACE_CONDITION_1:  return traceCondition_1 != null && !traceCondition_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private void refreshAsciiSet(){  asciiSet.clear();  for (char ch=MIN_CHAR; ch <= MAX_ASCII_CHAR; ch++) {    if (testRanges(ch)) {      asciiSet.set(ch);    }  }}  }
class C{  protected void visitNullAssertion(NullAssertion assertion){  VariableReference source=assertion.getSource();  Boolean value=(Boolean)assertion.getValue();  if (value.booleanValue()) {    testCode+="assertNull(" + getVariableName(source) + ");";  } else   testCode+="assertNotNull(" + getVariableName(source) + ");";}  }
class C{  private void calculateStatesPartialsPruning(int[] states1,BigDecimal[] matrices1,BigDecimal[] partials2,BigDecimal[] matrices2,BigDecimal[] partials3){  BigDecimal sum, tmp;  int u=0;  int v=0;  for (int l=0; l < matrixCount; l++) {    for (int k=0; k < patternCount; k++) {      int state1=states1[k];      int w=l * matrixSize;      if (state1 < stateCount) {        for (int i=0; i < stateCount; i++) {          tmp=matrices1[w + state1];          sum=BigDecimal.ZERO;          for (int j=0; j < stateCount; j++) {            sum=sum.add(matrices2[w].multiply(partials2[v + j],precision),precision);            w++;          }          partials3[u]=tmp.multiply(sum,precision);          u++;        }        v+=stateCount;      } else {        for (int i=0; i < stateCount; i++) {          sum=BigDecimal.ZERO;          for (int j=0; j < stateCount; j++) {            sum=sum.add(matrices2[w].multiply(partials2[v + j],precision),precision);            w++;          }          partials3[u]=sum;          u++;        }        v+=stateCount;      }    }  }}  }
class C{  private boolean isCategoryVisibleInShop(final Long categoryId){  final Set<Long> catIds=shopService.getShopCategoriesIds(ShopCodeContext.getShopId());  Category category=categoryService.getById(categoryId);  final Date now=new Date();  while (category != null && DomainApiUtils.isObjectAvailableNow(true,category.getAvailablefrom(),category.getAvailableto(),now) && category.getCategoryId() != category.getParentId()) {    if (catIds.contains(categoryId)) {      return true;    }    category=categoryService.getById(category.getParentId());  }  return false;}  }
class C{  public static double atan2(double y,double x){  if (USE_JDK_MATH) {    return STRICT_MATH ? StrictMath.atan2(y,x) : Math.atan2(y,x);  }  if (x > 0.0) {    if (y == 0.0) {      return (1 / y == Double.NEGATIVE_INFINITY) ? -0.0 : 0.0;    }    if (x == Double.POSITIVE_INFINITY) {      if (y == Double.POSITIVE_INFINITY) {        return Math.PI / 4;      } else       if (y == Double.NEGATIVE_INFINITY) {        return -Math.PI / 4;      } else       if (y > 0.0) {        return 0.0;      } else       if (y < 0.0) {        return -0.0;      } else {        return Double.NaN;      }    } else {      return FastMath.atan(y / x);    }  } else   if (x < 0.0) {    if (y == 0.0) {      return (1 / y == Double.NEGATIVE_INFINITY) ? -Math.PI : Math.PI;    }    if (x == Double.NEGATIVE_INFINITY) {      if (y == Double.POSITIVE_INFINITY) {        return 3 * Math.PI / 4;      } else       if (y == Double.NEGATIVE_INFINITY) {        return -3 * Math.PI / 4;      } else       if (y > 0.0) {        return Math.PI;      } else       if (y < 0.0) {        return -Math.PI;      } else {        return Double.NaN;      }    } else     if (y > 0.0) {      return Math.PI / 2 + FastMath.atan(-x / y);    } else     if (y < 0.0) {      return -Math.PI / 2 - FastMath.atan(x / y);    } else {      return Double.NaN;    }  } else   if (x == 0.0) {    if (y == 0.0) {      if (1 / x == Double.NEGATIVE_INFINITY) {        return (1 / y == Double.NEGATIVE_INFINITY) ? -Math.PI : Math.PI;      } else {        return (1 / y == Double.NEGATIVE_INFINITY) ? -0.0 : 0.0;      }    }    if (y > 0.0) {      return Math.PI / 2;    } else     if (y < 0.0) {      return -Math.PI / 2;    } else {      return Double.NaN;    }  } else {    return Double.NaN;  }}  }
class C{  public CStringBuilder(int capacity){  super(capacity);}  }
class C{  protected TimeEventImpl(){  super();}  }
class C{  protected MappingModelImpl(){  super();}  }
class C{  public ValidationResult(String s){  setResponseCode(HttpServletResponse.SC_OK);  setStatus(s);  setSubstatus(null);}  }
class C{  public final String toString(int depth){  if (depth <= 0)   return "";  return ("\n*DecimalNode" + super.toString(depth) + "Mantissa: "+ mantissa+ "; exponent: "+ exponent+ "; big value: "+ (bigVal != null ? bigVal.toString() : "<null>")+ "\n; image = "+ image);}  }
class C{  protected int rangeSingle(String single){  if (single.toLowerCase().equals("first")) {    return 0;  }  if (single.toLowerCase().equals("last")) {    return m_Upper;  }  int index=Integer.parseInt(single) - 1;  if (index < 0) {    index=0;  }  if (index > m_Upper) {    index=m_Upper;  }  return index;}  }
class C{  private boolean validateEmail(final String email){  if (email.isEmpty()) {    badEmailTitle="Email address is empty";    badEmailReason="You didn't enter an email address.\n";    return false;  } else {    if (!email.contains("@") || !email.contains(".") || (email.length() <= 5)) {      badEmailTitle="Misspelled email address?";      badEmailReason="The email address you entered is probably misspelled.\n";      return false;    }  }  return true;}  }
class C{  public TimerData(Timestamp timeStamp,long platformIdent,long sensorTypeIdent,long methodIdent,List<ParameterContentData> parameterContentData){  super(timeStamp,platformIdent,sensorTypeIdent,methodIdent,parameterContentData);}  }
class C{  public Boolean isChecksumEnabled(){  return checksumEnabled;}  }
class C{  public String toString(){  return name;}  }
class C{  public int compareTo(PropertyMapping propertyMapping){  return this.getTerm().qualifiedName().compareTo(propertyMapping.getTerm().qualifiedName());}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.DECLARATION__TYPE_SPECIFIER:    setTypeSpecifier((TypeSpecifier)newValue);  return;case TypesPackage.DECLARATION__NAME:setName((String)newValue);return;case TypesPackage.DECLARATION__ANNOTATIONS:getAnnotations().clear();getAnnotations().addAll((Collection<? extends Annotation>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isLocalSet(int index) throws TransformerException {  return (_stackFrames[index + _currentFrameBottom] != null);}  }
class C{  public void putStatic(final Type owner,final String name,final Type type){  fieldInsn(Opcodes.PUTSTATIC,owner,name,type);}  }
class C{  public void testOkDupFields() throws Exception {  OkDupFieldBean bean=new OkDupFieldBean(1,2);  Map<String,Object> json=writeAndMap(new ObjectMapper(),bean);  assertEquals(2,json.size());  assertEquals(Integer.valueOf(1),json.get("x"));  assertEquals(Integer.valueOf(2),json.get("y"));}  }
class C{  public static Bitmap scaleImageTo(Bitmap org,int newWidth,int newHeight){  float scaleWidth=(float)newWidth / org.getWidth();  float scaleHeight=(float)newHeight / org.getHeight();  float scale=Math.max(scaleWidth,scaleHeight);  return scaleImage(org,scale,scale);}  }
class C{  public void writeComment(Object comment) throws IOException {  if (comment == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"comment"));  }  closeStartIfNecessary();  writer.write("<!-- ");  writer.write(comment.toString());  writer.write(" -->");}  }
class C{  private IgfsMessage execute(IgfsClientSession ses,IgfsIpcCommand cmd,IgfsMessage msg,@Nullable DataInput in) throws Exception {switch (cmd) {case HANDSHAKE:    return processHandshakeRequest((IgfsHandshakeRequest)msg);case STATUS:  return processStatusRequest();case EXISTS:case INFO:case PATH_SUMMARY:case UPDATE:case RENAME:case DELETE:case MAKE_DIRECTORIES:case LIST_PATHS:case LIST_FILES:case SET_TIMES:case AFFINITY:case OPEN_READ:case OPEN_CREATE:case OPEN_APPEND:return processPathControlRequest(ses,cmd,msg);case CLOSE:case READ_BLOCK:case WRITE_BLOCK:return processStreamControlRequest(ses,cmd,msg,in);default :throw new IgniteCheckedException("Unsupported IPC command: " + cmd);}}  }
class C{  public synchronized void remove(Clockable clockable){  for (int i=0; i < entries.size(); i++) {    ClockableEntry entry=entries.get(i);    if (entry.clockable == clockable) {      entries.remove(entry);      break;    }  }  requestResheduling();}  }
class C{  @Override public Iterator<SAXRecord> iterator(){  return this.records.values().iterator();}  }
class C{  public final static boolean isDialable(char c){  return (c >= '0' && c <= '9') || c == '*' || c == '#' || c == '+' || c == WILD;}  }
class C{  private static DataStream<String> sourceStream(BenchmarkConfig config,StreamExecutionEnvironment env){  RichParallelSourceFunction<String> source;  String sourceName;  if (config.useLocalEventGenerator) {    HighKeyCardinalityGeneratorSource eventGenerator=new HighKeyCardinalityGeneratorSource(config);    source=eventGenerator;    sourceName="EventGenerator";  } else {    source=new FlinkKafkaConsumer082<>(config.kafkaTopic,new SimpleStringSchema(),config.getParameters().getProperties());    sourceName="Kafka";  }  return env.addSource(source,sourceName);}  }
class C{  public ClusteredXYBarRenderer(double margin,boolean centerBarAtStartValue){  super(margin);  this.centerBarAtStartValue=centerBarAtStartValue;}  }
class C{  public synchronized boolean suspendProcessing(){  if (!isRunningOrHasItems()) {    Log.d(TAG,"Suspend processing");    mHoldProcessing=true;    return true;  } else {    Log.d(TAG,"Not able to suspend processing.");    return false;  }}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Object getObjectFieldValue(java.lang.Object,long)")) {    java_io_ObjectOutputStream_getObjectFieldValue(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public Map<ClusterUID,Set<String>> mapCGToStorageArraysNoConnection(ConsistencyGroupSettings groupSettings) throws RecoverPointException {  Set<String> siteArraySet=null;  Map<ClusterUID,Set<String>> returnMap=new HashMap<ClusterUID,Set<String>>();  Set<ClusterUID> siteSet=new HashSet<ClusterUID>();  ClusterUID ClusterUID=null;  boolean foundSite=false;  for (  ReplicationSetSettings replicationSet : groupSettings.getReplicationSetsSettings()) {    for (    UserVolumeSettings userVolume : replicationSet.getVolumes()) {      ClusterUID=userVolume.getClusterUID();      foundSite=false;      for (      ClusterUID mappedSite : siteSet) {        if (ClusterUID.getId() == mappedSite.getId()) {          foundSite=true;          break;        }      }      if (!foundSite) {        siteSet.add(ClusterUID);      }    }  }  for (  ClusterUID mappedSite : siteSet) {    siteArraySet=new HashSet<String>();    for (    ReplicationSetSettings replicationSet1 : groupSettings.getReplicationSetsSettings()) {      for (      UserVolumeSettings userVolume : replicationSet1.getVolumes()) {        ClusterUID=userVolume.getClusterUID();        if (ClusterUID.getId() == mappedSite.getId()) {          if (userVolume.getVolumeInfo().getVendorName().equalsIgnoreCase("DGC")) {            siteArraySet.add(userVolume.getVolumeInfo().getArraySerialNumber());          }        }      }    }    if (!siteArraySet.isEmpty()) {      returnMap.put(mappedSite,siteArraySet);    }  }  if (!returnMap.isEmpty()) {    return returnMap;  } else {    return null;  }}  }
class C{  public DoubleNode<E> first(){  return head;}  }
class C{  public String encodeBody(){  this.parameters.setSeparator(Separators.COMMA);  return this.scheme + SP + parameters.encode();}  }
class C{  public boolean isSelectionEmpty(){  return (selection == null || selection.length == 0);}  }
class C{  public JettyRemoteDeployer(RemoteContainer container){  super(container);  Configuration configuration=container.getConfiguration();  username=configuration.getPropertyValue(RemotePropertySet.USERNAME);  password=configuration.getPropertyValue(RemotePropertySet.PASSWORD);  deployerUrl=configuration.getPropertyValue(JettyPropertySet.DEPLOYER_URL);  if (deployerUrl == null) {    this.deployerUrl=createDefaultDeployerUrl(configuration);  }}  }
class C{  public void display(String title){  left.setIcon(new ImageIcon(copyImage(original)));  right.setIcon(new ImageIcon(copyImage(image)));  if (first) {    first=false;    f.getContentPane().setLayout(new GridLayout(1,2));    f.getContentPane().add(left);    f.getContentPane().add(right);    f.pack();    f.setVisible(true);  }  f.setTitle(title);  f.repaint();}  }
class C{  public void flush(){}  }
class C{  public static void expandTriangleFan(List<Integer> indices,FloatBuffer inBuf,FloatBuffer outBuf){  if (indices == null) {    String msg=Logging.getMessage("nullValue.ListIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (inBuf == null || outBuf == null) {    String msg=Logging.getMessage("nullValue.BufferIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  int nunTriangles=indices.size() - 2;  if (nunTriangles * 3 * 3 > outBuf.limit() - outBuf.position()) {    String msg=Logging.getMessage("generic.BufferSize",outBuf.limit() - outBuf.position());    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  int k=indices.get(0) * 3;  float v0x=inBuf.get(k);  float v0y=inBuf.get(k + 1);  float v0z=inBuf.get(k + 2);  for (int i=1; i < indices.size() - 1; i++) {    outBuf.put(v0x).put(v0y).put(v0z);    k=indices.get(i) * 3;    outBuf.put(inBuf.get(k)).put(inBuf.get(k + 1)).put(inBuf.get(k + 2));    k=indices.get(i + 1) * 3;    outBuf.put(inBuf.get(k)).put(inBuf.get(k + 1)).put(inBuf.get(k + 2));  }}  }
class C{  @Override public StreamImpl openReadImpl() throws IOException {  return HttpStream.openRead(this);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void endRequest(){}  }
class C{  public static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize){  Encoder[] encoders={new ASCIIEncoder(),new C40Encoder(),new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};  EncoderContext context=new EncoderContext(msg);  context.setSymbolShape(shape);  context.setSizeConstraints(minSize,maxSize);  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {    context.writeCodeword(MACRO_05);    context.setSkipAtEnd(2);    context.pos+=MACRO_05_HEADER.length();  } else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {    context.writeCodeword(MACRO_06);    context.setSkipAtEnd(2);    context.pos+=MACRO_06_HEADER.length();  }  int encodingMode=ASCII_ENCODATION;  while (context.hasMoreCharacters()) {    encoders[encodingMode].encode(context);    if (context.getNewEncoding() >= 0) {      encodingMode=context.getNewEncoding();      context.resetEncoderSignal();    }  }  int len=context.getCodewordCount();  context.updateSymbolInfo();  int capacity=context.getSymbolInfo().getDataCapacity();  if (len < capacity) {    if (encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION) {      context.writeCodeword('\u00fe');    }  }  StringBuilder codewords=context.getCodewords();  if (codewords.length() < capacity) {    codewords.append(PAD);  }  while (codewords.length() < capacity) {    codewords.append(randomize253State(PAD,codewords.length() + 1));  }  return context.getCodewords().toString();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(Seeker.getInstance().getDisableProfilerRecording());}  }
class C{  public static void isTag(String member,String value) throws ValidationException {  maxLength(member,value,ADMValidator.LENGTH_TAG,true);  final String INVALID_CHAR=",";  if (value.contains(INVALID_CHAR)) {    ValidationException vf=new ValidationException(ReasonEnum.INVALID_CHAR,member,new Object[]{INVALID_CHAR});    logValidationFailure(vf);    throw vf;  }}  }
class C{  @SuppressWarnings("ConstantConditions") public static ExternalResources initialize(@NonNull ExternalResources externalResources){  if (null == externalResources) {    throw new IllegalArgumentException("ExternalResources must not be null.");  }synchronized (ExternalResources.class) {    if (null != singleton) {      throw new IllegalStateException("Singleton instance already exists.");    }    singleton=externalResources;  }  return singleton;}  }
class C{  public KeySelectorException(String message){  super(message);}  }
class C{  private static int[][] calculateBlackPoints(byte[] luminances,int subWidth,int subHeight,int width,int height){  int[][] blackPoints=new int[subHeight][subWidth];  for (int y=0; y < subHeight; y++) {    int yoffset=y << BLOCK_SIZE_POWER;    int maxYOffset=height - BLOCK_SIZE;    if (yoffset > maxYOffset) {      yoffset=maxYOffset;    }    for (int x=0; x < subWidth; x++) {      int xoffset=x << BLOCK_SIZE_POWER;      int maxXOffset=width - BLOCK_SIZE;      if (xoffset > maxXOffset) {        xoffset=maxXOffset;      }      int sum=0;      int min=0xFF;      int max=0;      for (int yy=0, offset=yoffset * width + xoffset; yy < BLOCK_SIZE; yy++, offset+=width) {        for (int xx=0; xx < BLOCK_SIZE; xx++) {          int pixel=luminances[offset + xx] & 0xFF;          sum+=pixel;          if (pixel < min) {            min=pixel;          }          if (pixel > max) {            max=pixel;          }        }        if (max - min > MIN_DYNAMIC_RANGE) {          for (yy++, offset+=width; yy < BLOCK_SIZE; yy++, offset+=width) {            for (int xx=0; xx < BLOCK_SIZE; xx++) {              sum+=luminances[offset + xx] & 0xFF;            }          }        }      }      int average=sum >> (BLOCK_SIZE_POWER * 2);      if (max - min <= MIN_DYNAMIC_RANGE) {        average=min / 2;        if (y > 0 && x > 0) {          int averageNeighborBlackPoint=(blackPoints[y - 1][x] + (2 * blackPoints[y][x - 1]) + blackPoints[y - 1][x - 1]) / 4;          if (min < averageNeighborBlackPoint) {            average=averageNeighborBlackPoint;          }        }      }      blackPoints[y][x]=average;    }  }  return blackPoints;}  }
class C{  public tr addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public XMLStreamException(String msg){  super(msg);}  }
class C{  public void refreshMailSenderConfiguration(){  mailSender.setJavaMailProperties(props);  mailSender.setHost(mailSettings.getMailHost().get());  mailSender.setUsername(mailSettings.getMailUser().get());  mailSender.setPassword(mailSettings.getMailPassword().get());  mailSender.setPort(mailSettings.getMailPort().get());}  }
class C{  public boolean isUplinkPortgroup(){  return uplinkPortgroup;}  }
class C{  public void suppressTestAllOpsCvWrite(){  int[] result=new int[100];  int addressRange, cvNum, data;  byte buffer[]=new byte[6];  boolean test_retval;  test_retval=MakePacket.setPreambleLength(15);  Assert.assertTrue(test_retval);  for (addressRange=0; addressRange < 10239; addressRange++) {    for (cvNum=2; cvNum < 512; cvNum++) {      for (data=0; data < 127; data++) {        buffer=NmraPacket.opsCvWriteByte(addressRange,true,cvNum,data);        result=MakePacket.createStream(buffer);        if (result[0] == 0) {          Assert.assertEquals("test ops CV write (long addresses) -  invalid lenght",10,result[0]);        }        if (addressRange < 127) {          buffer=NmraPacket.opsCvWriteByte(addressRange,false,cvNum,data);          result=MakePacket.createStream(buffer);          if (result[0] == 0) {            Assert.assertEquals("test ops CV write (short addresses) -  invalid lenght",10,result[0]);          }        }      }    }  }}  }
class C{  public int hashCode(Object key){  return (key.hashCode() & 0x7FFFFFFF) % this.keyTable.length;}  }
class C{  protected Object execute(){  init();  if (!checkifEnabledRemotes()) {    return null;  }  if (id == null) {    Ansi buffer=Ansi.ansi();    buffer.fg(RED);    buffer.a("No ID has been defined. It should be a project, runner or builder ID");    buffer.reset();    System.out.println(buffer.toString());    return null;  }  if (id.startsWith("r")) {    openRunner();  } else   if (id.startsWith("b")) {    openBuilder();  } else   if (id.startsWith("p")) {    openProject();  } else {    Ansi buffer=Ansi.ansi();    buffer.fg(RED);    buffer.a("Invalid identifier");    buffer.fg(Ansi.Color.DEFAULT);    System.out.println(buffer.toString());  }  return null;}  }
class C{  public boolean isVerbose(){  return verbose;}  }
class C{  public static boolean isSafeToCopy(String id){  return (!Character.isUpperCase(id.charAt(3)));}  }
class C{  public void reset(){  edge_index.clear();}  }
class C{  @Override public synchronized Restlet createInboundRoot(){  log.info("createInboundRoot started for /config");  router.attachDefault(RestManager.ManagedEndpoint.class);  RestManager restManager=RestManager.getRestManager(SolrRequestInfo.getRequestInfo());  restManager.attachManagedResources(RestManager.CONFIG_BASE_PATH,router);  log.info("createInboundRoot complete for /config");  return router;}  }
class C{  long purge(final int sampleSize){  final int limit=Math.min(sampleSize,getNumActive());  int numSamples=0;  int i=0;  final long[] samples=new long[limit];  while (numSamples < limit) {    if (isActive(i)) {      samples[numSamples]=values[i];      numSamples++;    }    i++;  }  final long val=QuickSelect.select(samples,0,numSamples - 1,limit / 2);  adjustAllValuesBy(-1 * val);  keepOnlyPositiveCounts();  return val;}  }
class C{  private static AC parseAxisConstraint(String s,boolean isCols){  s=s.trim();  if (s.length() == 0) {    return new AC();  }  s=s.toLowerCase();  ArrayList<String> parts=getRowColAndGapsTrimmed(s);  BoundSize[] gaps=new BoundSize[(parts.size() >> 1) + 1];  for (int i=0, iSz=parts.size(), gIx=0; i < iSz; i+=2, gIx++) {    gaps[gIx]=parseBoundSize(parts.get(i),true,isCols);  }  DimConstraint[] colSpecs=new DimConstraint[parts.size() >> 1];  for (int i=0, gIx=0; i < colSpecs.length; i++, gIx++) {    if (gIx >= gaps.length - 1) {      gIx=gaps.length - 2;    }    colSpecs[i]=parseDimConstraint(parts.get((i << 1) + 1),gaps[gIx],gaps[gIx + 1],isCols);  }  AC ac=new AC();  ac.setConstaints(colSpecs);  return ac;}  }
class C{  public Mosaic(final Deserializer deserializer){  this.mosaicId=deserializer.readObject("mosaicId",null);  this.quantity=Quantity.readFrom(deserializer,"quantity");}  }
class C{  public void deleteProvider(String tenantName,String providerName) throws Exception {  getService().deleteProvider(tenantName,providerName,this.getServiceContext());}  }
class C{  public CertificateIssuerName(InputStream in) throws IOException {  DerValue derVal=new DerValue(in);  dnName=new X500Name(derVal);}  }
class C{  private void configureProjectTree(){  bind(SettingsProvider.class).to(DummySettingsProvider.class).in(Singleton.class);  bind(ProjectExplorerView.class).to(ProjectExplorerViewImpl.class).in(Singleton.class);  bind(ProjectExplorerPart.class).to(ProjectExplorerPresenter.class).in(Singleton.class);  GinMultibinder<NodeIconProvider> themeBinder=GinMultibinder.newSetBinder(binder(),NodeIconProvider.class);  themeBinder.addBinding().to(FileIconProvider.class);  themeBinder.addBinding().to(DockerfileIconProvider.class);  bind(TreeResourceRevealer.class);}  }
class C{  protected void hideNotify(){  setVisible(false);}  }
class C{  public boolean isLeave(){  return fieldLeave;}  }
class C{  private Point validatePointForBubbleInViewport(Point position){  int xOffset=0;  int yOffset=0;  int x=position.x;  int y=position.y;  if (getRealAlignment() != null) {switch (getRealAlignment()) {case LEFTBOTTOM:case LEFTTOP:      xOffset=this.getObjectWidth();case RIGHTBOTTOM:case RIGHTTOP:    yOffset=(int)(this.getObjectHeight() * 0.5);  break;case TOPLEFT:case TOPRIGHT:yOffset=this.getObjectHeight();case BOTTOMLEFT:case BOTTOMRIGHT:xOffset=(int)(this.getObjectWidth() * 0.5);break;default :}}if (!(position.x + xOffset >= viewport.getLocationOnScreen().x)) {x=viewport.getLocationOnScreen().x - xOffset;}if (!(position.x + xOffset <= viewport.getLocationOnScreen().x + viewport.getSize().width)) {x=viewport.getLocationOnScreen().x + viewport.getSize().width - xOffset;}if (!(position.y + yOffset >= viewport.getLocationOnScreen().y)) {y=viewport.getLocationOnScreen().y - yOffset;}if (!(position.y + yOffset <= viewport.getLocationOnScreen().y + viewport.getSize().height)) {y=viewport.getLocationOnScreen().y + viewport.getSize().height - yOffset;}return new Point(x,y);}  }
class C{  public void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (callAttrs) {    if (null != m_countMatchPattern)     m_countMatchPattern.getExpression().callVisitors(m_countMatchPattern,visitor);    if (null != m_fromMatchPattern)     m_fromMatchPattern.getExpression().callVisitors(m_fromMatchPattern,visitor);    if (null != m_valueExpr)     m_valueExpr.getExpression().callVisitors(m_valueExpr,visitor);    if (null != m_format_avt)     m_format_avt.callVisitors(visitor);    if (null != m_groupingSeparator_avt)     m_groupingSeparator_avt.callVisitors(visitor);    if (null != m_groupingSize_avt)     m_groupingSize_avt.callVisitors(visitor);    if (null != m_lang_avt)     m_lang_avt.callVisitors(visitor);    if (null != m_lettervalue_avt)     m_lettervalue_avt.callVisitors(visitor);  }  super.callChildVisitors(visitor,callAttrs);}  }
class C{  public boolean removeListener(Listener listener){  return this.listeners.remove(listener);}  }
class C{  private boolean initBrowser(){  List<MBrowseField> fields=initBrowserTable();  if (fields == null)   return false;  StringBuilder where=new StringBuilder("");  setContextWhere(m_Browse,null);  if (p_whereClause.length() > 0) {    where.append(p_whereClause);  }  prepareTable(fields,m_View.getFromClause(),where.toString(),"2");  return true;}  }
class C{  public void clear(){  clear(DEFAULT_CAPACITY);}  }
class C{  @Override public void updateStatus(JobContext jobContext) throws Exception {  LogicalUnit logicalUnit=null;  try {    if (_status == JobStatus.IN_PROGRESS) {      return;    }    DbClient dbClient=jobContext.getDbClient();    StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,getStorageSystemURI());    HDSApiClient hdsApiClient=jobContext.getHdsApiFactory().getClient(HDSUtils.getHDSServerManagementServerInfo(storageSystem),storageSystem.getSmisUserName(),storageSystem.getSmisPassword());    if (_status == JobStatus.SUCCESS || _status == JobStatus.FAILED) {      StoragePool storagePool=dbClient.queryObject(StoragePool.class,storagePoolURI);      HDSUtils.updateStoragePoolCapacity(dbClient,hdsApiClient,storagePool);      StringMap reservationMap=storagePool.getReservedCapacityMap();      URI volumeId=getTaskCompleter().getId();      reservationMap.remove(volumeId.toString());      dbClient.persistObject(storagePool);    }    String opId=getTaskCompleter().getOpId();    StringBuilder logMsgBuilder=new StringBuilder(String.format("Updating status of job %s to %s, task: %s",this.getJobName(),_status.name(),opId));    if (_status == JobStatus.SUCCESS) {      VolumeExpandCompleter taskCompleter=(VolumeExpandCompleter)getTaskCompleter();      Volume volume=dbClient.queryObject(Volume.class,taskCompleter.getId());      volume.setCapacity(taskCompleter.getSize());      volume.setIsComposite(taskCompleter.isComposite());      volume.setCompositionType(taskCompleter.getMetaVolumeType());      logicalUnit=(LogicalUnit)_javaResult.getBean("logicalunit");      if (null != logicalUnit) {        long capacityInBytes=(Long.valueOf(logicalUnit.getCapacityInKB())) * 1024L;        volume.setProvisionedCapacity(capacityInBytes);        volume.setAllocatedCapacity(capacityInBytes);      }      logMsgBuilder.append(String.format("%n   Capacity: %s, Provisioned capacity: %s, Allocated Capacity: %s",volume.getCapacity(),volume.getProvisionedCapacity(),volume.getAllocatedCapacity()));      if (volume.getIsComposite()) {        logMsgBuilder.append(String.format("%n  Is Meta: %s, Total meta member capacity: %s, Meta member count %s, Meta member size: %s",volume.getIsComposite(),volume.getTotalMetaMemberCapacity(),volume.getMetaMemberCount(),volume.getMetaMemberSize()));      }      _log.info(logMsgBuilder.toString());      dbClient.persistObject(volume);      WorkflowService.getInstance().storeStepData(opId,new ArrayList<String>());    }  } catch (  Exception e) {    _log.error("Caught an exception while trying to updateStatus for HDSVolumeExpandJob",e);    setErrorStatus("Encountered an internal error during volume expand job status processing : " + e.getMessage());  } finally {    super.updateStatus(jobContext);  }}  }
class C{  public final synchronized long size(){  return this.count;}  }
class C{  public static <E>List<E> of(E e1,E e2){  return new ImmutableCollections.List2<E>(e1,e2);}  }
class C{  public Map<Integer,TestRecord> selectByExampleToMap(Example example){  List<TestRecord> list=super.selectByExample(example);  Map<Integer,TestRecord> m=new LinkedHashMap<Integer,TestRecord>();  for (  TestRecord x : list) {    m.put(x.getRecordId(),x);  }  return m;}  }
class C{  public ExplicitVersionPolicy copy(){  ExplicitVersionPolicy clone=new ExplicitVersionPolicy();  resolvable.forEach(null);  return clone;}  }
class C{  @Inline public static Object moveObject(Object fromObj,Object toObj,int numBytes,RVMClass type){  return moveObject(Address.zero(),fromObj,toObj,numBytes);}  }
class C{  protected void fireEndDoc() throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENDDOCUMENT);  }}  }
class C{  public void test_getBundleLjava_lang_StringLjava_util_Locale(){  ResourceBundle bundle;  String name="tests.support.Support_TestResource";  Locale defLocale=Locale.getDefault();  Locale.setDefault(new Locale("en","US"));  bundle=ResourceBundle.getBundle(name,new Locale("fr","FR","VAR"));  assertEquals("Wrong bundle fr_FR_VAR","frFRVARValue4",bundle.getString("parent4"));  bundle=ResourceBundle.getBundle(name,new Locale("fr","FR","v1"));  assertEquals("Wrong bundle fr_FR_v1","frFRValue4",bundle.getString("parent4"));  bundle=ResourceBundle.getBundle(name,new Locale("fr","US","VAR"));  assertEquals("Wrong bundle fr_US_var","frValue4",bundle.getString("parent4"));  bundle=ResourceBundle.getBundle(name,new Locale("de","FR","VAR"));  assertEquals("Wrong bundle de_FR_var","enUSValue4",bundle.getString("parent4"));  Locale.setDefault(new Locale("fr","FR","VAR"));  bundle=ResourceBundle.getBundle(name,new Locale("de","FR","v1"));  assertEquals("Wrong bundle de_FR_var 2","frFRVARValue4",bundle.getString("parent4"));  Locale.setDefault(new Locale("de","US"));  bundle=ResourceBundle.getBundle(name,new Locale("de","FR","var"));  assertEquals("Wrong bundle de_FR_var 2","parentValue4",bundle.getString("parent4"));  try {    ResourceBundle.getBundle(null,Locale.US);    fail("NullPointerException expected");  } catch (  NullPointerException ee) {  }  try {    ResourceBundle.getBundle("blah",(Locale)null);    fail("NullPointerException expected");  } catch (  NullPointerException ee) {  }  try {    ResourceBundle.getBundle("",new Locale("xx","yy"));    fail("MissingResourceException expected");  } catch (  MissingResourceException ee) {  }}  }
class C{  public static boolean isUserDefinedFunction(Object object){  return object instanceof UDF;}  }
class C{  public int size(){  return urls.size();}  }
