class C{  public void testCase5(){  byte aBytes[]={1,2,3,4,5,6,7};  byte bBytes[]={3,4,5,6,7,8,9};  byte rBytes[]={-3,-3,-3,-3,-3,-3,-2};  int aSign=1;  int bSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  private void notifyDownloadCompleted(int status,boolean countRetry,int retryAfter,int redirectCount,boolean gotData,String filename){  updateDownloadDatabase(status,countRetry,retryAfter,redirectCount,gotData,filename);  if (DownloaderService.isStatusCompleted(status)) {  }}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public static void check(Random random,Query q1,IndexSearcher s){  check(random,q1,s,true);}  }
class C{  public static void saveAsImage(int width,int height,String path) throws FileNotFoundException {  saveAsImage(0,0,width,height,path,CompressFormat.PNG,100);}  }
class C{  public void processCurrentTimeLine(short[] timeLine,Set<Long> timeLineSet,IAnalyzedInterval contextElement){  final boolean hasTimeline=!ArrayUtils.isEmpty(timeLine);  final long millisPerTick=contextElement.getInterval().getIntervalSize() / SummarizationProperties.TIMELINE_RESOLUTION;  if (hasTimeline) {    Short prevPos=null;    for (    short pos : timeLine) {      if (prevPos == null) {        prevPos=pos;        continue;      }      Long delta=(pos - prevPos) * millisPerTick;      m_deltasInSeconds.add(delta / DateTimeUtils.MILLIS_IN_SECOND);      prevPos=pos;      timeLineSet.add(contextElement.getIntervalStartTime() + pos * millisPerTick);    }  }}  }
class C{  public double calculateLogLikelihood(){  double logL=0.0;  for (int j=0; j < tree.getInternalNodeCount(); j++) {    logL+=branchingModel.logNodeProbability(tree,tree.getInternalNode(j));  }  return logL;}  }
class C{  public MultiPercolateRequest add(PercolateRequest request){  if (request.indices() == null && indices != null) {    request.indices(indices);  }  if (request.documentType() == null && documentType != null) {    request.documentType(documentType);  }  if (request.indicesOptions() == IndicesOptions.strictExpandOpenAndForbidClosed() && indicesOptions != IndicesOptions.strictExpandOpenAndForbidClosed()) {    request.indicesOptions(indicesOptions);  }  requests.add(request);  return this;}  }
class C{  public static boolean isSOTrx(String TableName,String whereClause){  if (TableName == null || TableName.length() == 0) {    log.severe("No TableName");    return true;  }  if (whereClause == null || whereClause.length() == 0) {    log.severe("No Where Clause");    return true;  }  boolean isSOTrx=true;  boolean noIsSOTrxColumn=false;  if (MTable.get(Env.getCtx(),TableName).getColumn("IsSOTrx") == null) {    noIsSOTrxColumn=true;  } else {    String sql="SELECT IsSOTrx FROM " + TableName + " WHERE "+ whereClause;    PreparedStatement pstmt=null;    ResultSet rs=null;    try {      pstmt=DB.prepareStatement(sql,null);      rs=pstmt.executeQuery();      if (rs.next())       isSOTrx="Y".equals(rs.getString(1));    } catch (    Exception e) {      noIsSOTrxColumn=true;    } finally {      close(rs,pstmt);      rs=null;      pstmt=null;    }  }  if (noIsSOTrxColumn && TableName.endsWith("Line")) {    noIsSOTrxColumn=false;    String hdr=TableName.substring(0,TableName.indexOf("Line"));    if (MTable.get(Env.getCtx(),hdr).getColumn("IsSOTrx") == null) {      noIsSOTrxColumn=true;    } else {      String sql="SELECT IsSOTrx FROM " + hdr + " h WHERE h."+ hdr+ "_ID IN (SELECT l."+ hdr+ "_ID FROM "+ TableName+ " l WHERE "+ whereClause+ ")";      PreparedStatement pstmt2=null;      ResultSet rs2=null;      try {        pstmt2=DB.prepareStatement(sql,null);        rs2=pstmt2.executeQuery();        if (rs2.next())         isSOTrx="Y".equals(rs2.getString(1));      } catch (      Exception ee) {        noIsSOTrxColumn=true;      } finally {        close(rs2,pstmt2);        rs2=null;        pstmt2=null;      }    }  }  if (noIsSOTrxColumn)   log.log(Level.FINEST,TableName + " - No SOTrx");  return isSOTrx;}  }
class C{  public static boolean isRegTrue(SpaceEffGraphEdge edge){  return (edge.getInfo() & REG_TRUE) != 0;}  }
class C{  private byte[] createPacket(Command cmd,@Nullable String cacheName,@Nullable Object key,@Nullable Object val,int opaque,@Nullable Long[] extras) throws IgniteCheckedException {  assert cmd != null;  assert opaque >= 0;  byte[] cacheNameBytes=cacheName != null ? cacheName.getBytes() : null;  Data keyData=encode(key);  Data valData=encode(val);  int cacheNameLength=cacheNameBytes != null ? cacheNameBytes.length : 0;  int extrasLength=cmd.extrasLength() + cacheNameLength;  byte[] packet=new byte[HDR_LEN + extrasLength + keyData.length()+ valData.length()];  packet[0]=(byte)0x80;  packet[1]=cmd.operationCode();  U.shortToBytes((short)keyData.length(),packet,2);  packet[4]=(byte)(extrasLength);  U.intToBytes(extrasLength + keyData.length() + valData.length(),packet,8);  U.intToBytes(opaque,packet,12);  if (extrasLength > 0) {    if (extras != null) {      int offset=HDR_LEN;      for (      Long extra : extras) {        if (extra != null)         U.longToBytes(extra,packet,offset);        offset+=8;      }    } else {      U.shortToBytes(keyData.getFlags(),packet,HDR_LEN);      U.shortToBytes(valData.getFlags(),packet,HDR_LEN + 2);    }  }  if (cacheNameBytes != null)   U.arrayCopy(cacheNameBytes,0,packet,HDR_LEN + cmd.extrasLength(),cacheNameLength);  if (keyData.getBytes() != null)   U.arrayCopy(keyData.getBytes(),0,packet,HDR_LEN + extrasLength,keyData.length());  if (valData.getBytes() != null)   U.arrayCopy(valData.getBytes(),0,packet,HDR_LEN + extrasLength + keyData.length(),valData.length());  return packet;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }  previousProgress=progress;}  }
class C{  public void elementDecl(String name,String model) throws SAXException {}  }
class C{  protected OFControllerRole extractNiciraRoleReply(OFMessage vendorMessage){  if (!(vendorMessage instanceof OFNiciraControllerRoleReply))   return null;  OFNiciraControllerRoleReply roleReply=(OFNiciraControllerRoleReply)vendorMessage;  return NiciraRoleUtils.niciraToOFRole(roleReply);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:50:10.437 -0400",hash_original_method="C0F28EFFA12EB925946E5A09D033B9DF",hash_generated_method="C4670C3CAAA247B824E4F50CA5B3F75B") public static PrintServiceInfo create(ResolveInfo resolveInfo,Context context){  String settingsActivityName=null;  String addPrintersActivityName=null;  String advancedPrintOptionsActivityName=null;  XmlResourceParser parser=null;  PackageManager packageManager=context.getPackageManager();  parser=resolveInfo.serviceInfo.loadXmlMetaData(packageManager,PrintService.SERVICE_META_DATA);  if (parser != null) {    try {      int type=0;      while (type != XmlPullParser.END_DOCUMENT && type != XmlPullParser.START_TAG) {        type=parser.next();      }      String nodeName=parser.getName();      if (!TAG_PRINT_SERVICE.equals(nodeName)) {        Log.e(LOG_TAG,"Ignoring meta-data that does not start with " + TAG_PRINT_SERVICE + " tag");      } else {        Resources resources=packageManager.getResourcesForApplication(resolveInfo.serviceInfo.applicationInfo);        AttributeSet allAttributes=Xml.asAttributeSet(parser);        TypedArray attributes=resources.obtainAttributes(allAttributes,com.android.internal.R.styleable.PrintService);        settingsActivityName=attributes.getString(com.android.internal.R.styleable.PrintService_settingsActivity);        addPrintersActivityName=attributes.getString(com.android.internal.R.styleable.PrintService_addPrintersActivity);        advancedPrintOptionsActivityName=attributes.getString(com.android.internal.R.styleable.PrintService_advancedPrintOptionsActivity);        attributes.recycle();      }    } catch (    IOException ioe) {      Log.w(LOG_TAG,"Error reading meta-data:" + ioe);    }catch (    XmlPullParserException xppe) {      Log.w(LOG_TAG,"Error reading meta-data:" + xppe);    }catch (    NameNotFoundException e) {      Log.e(LOG_TAG,"Unable to load resources for: " + resolveInfo.serviceInfo.packageName);    } finally {      if (parser != null) {        parser.close();      }    }  }  return new PrintServiceInfo(resolveInfo,settingsActivityName,addPrintersActivityName,advancedPrintOptionsActivityName);}  }
class C{  public boolean isWrapperFor(Class<?> iface) throws SQLException {  checkClosed();  return iface.isInstance(this);}  }
class C{  public static void startPickImageActivity(@NonNull Activity activity){  activity.startActivityForResult(getPickImageChooserIntent(activity),PICK_IMAGE_CHOOSER_REQUEST_CODE);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.547 -0400",hash_original_method="91E45CED25486B1014FA96D2D1068DED",hash_generated_method="0EE6818C2A3063927FAF52717401A186") public static boolean wildcardMatch(String filename,String wildcardMatcher,IOCase caseSensitivity){  if (filename == null && wildcardMatcher == null) {    return true;  }  if (filename == null || wildcardMatcher == null) {    return false;  }  if (caseSensitivity == null) {    caseSensitivity=IOCase.SENSITIVE;  }  String[] wcs=splitOnTokens(wildcardMatcher);  boolean anyChars=false;  int textIdx=0;  int wcsIdx=0;  Stack<int[]> backtrack=new Stack<int[]>();  do {    if (backtrack.size() > 0) {      int[] array=backtrack.pop();      wcsIdx=array[0];      textIdx=array[1];      anyChars=true;    }    while (wcsIdx < wcs.length) {      if (wcs[wcsIdx].equals("?")) {        textIdx++;        if (textIdx > filename.length()) {          break;        }        anyChars=false;      } else       if (wcs[wcsIdx].equals("*")) {        anyChars=true;        if (wcsIdx == wcs.length - 1) {          textIdx=filename.length();        }      } else {        if (anyChars) {          textIdx=caseSensitivity.checkIndexOf(filename,textIdx,wcs[wcsIdx]);          if (textIdx == -1) {            break;          }          int repeat=caseSensitivity.checkIndexOf(filename,textIdx + 1,wcs[wcsIdx]);          if (repeat >= 0) {            backtrack.push(new int[]{wcsIdx,repeat});          }        } else {          if (!caseSensitivity.checkRegionMatches(filename,textIdx,wcs[wcsIdx])) {            break;          }        }        textIdx+=wcs[wcsIdx].length();        anyChars=false;      }      wcsIdx++;    }    if (wcsIdx == wcs.length && textIdx == filename.length()) {      return true;    }  } while (backtrack.size() > 0);  return false;}  }
class C{  public static double distSquaredCartesian(double[] vec1,double[] vec2){  double result=0;  for (int i=0; i < vec1.length; i++) {    double v=vec1[i] - vec2[i];    result+=v * v;  }  return result;}  }
class C{  public JSONException(String message){  super(message);}  }
class C{  public Shapefile(InputStream shpStream,InputStream shxStream,InputStream dbfStream,InputStream prjStream){  this(shpStream,shxStream,dbfStream,prjStream,null);}  }
class C{  public static <T>T checkArgumentNotNull(T reference){  checkArgument(reference != null);  return reference;}  }
class C{  public static String XHTMLEnc(String s){  return XMLOrHTMLEnc(s,true,true,HTML_APOS);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static char firstNonWsCharUc(String searchIn){  return firstNonWsCharUc(searchIn,0);}  }
class C{  protected BasicPoolEntry createEntry(RouteSpecificPool rospl,ClientConnectionOperator op){  if (log.isDebugEnabled()) {    log.debug("Creating new connection [" + rospl.getRoute() + "]");  }  BasicPoolEntry entry=new BasicPoolEntry(op,rospl.getRoute(),refQueue);  poolLock.lock();  try {    rospl.createdEntry(entry);    numConnections++;    issuedConnections.add(entry.getWeakRef());  }  finally {    poolLock.unlock();  }  return entry;}  }
class C{  public static CandleSeries createSeries(CandleDataset source,int seriesIndex,Contract contract,int bars,ZonedDateTime startTime,ZonedDateTime endTime){  if (source.getSeries(seriesIndex) == null) {    throw new IllegalArgumentException("Null source (CandleDataset).");  }  CandleSeries series=new CandleSeries(source.getSeries(seriesIndex),bars,startTime,endTime);  for (int i=0; i < source.getSeries(seriesIndex).getItemCount() - 1; i++) {    series.updateSeries(source.getSeries(seriesIndex),i,true);  }  return series;}  }
class C{  private void onBluetoothBroadcastRemoteUUID(Context context,Intent intent){  BluetoothDevice device=(BluetoothDevice)intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);  Parcelable[] uuids=intent.getParcelableArrayExtra(BluetoothDevice.EXTRA_UUID);  for (  Parcelable uuid : uuids) {  }  log.info("Bluetooth broadcast: remoteUUID");}  }
class C{  public void addSubpart(SimpleItypeConfig config){  config.setParent(this);  subparts.addElement(config);}  }
class C{  public int compare(String o1,String o2){  return o1.compareToIgnoreCase(o2);}  }
class C{  public static boolean equals(boolean[] field1,boolean[] field2){  if (field1 == null || field1.length == 0) {    return field2 == null || field2.length == 0;  } else {    return Arrays.equals(field1,field2);  }}  }
class C{  protected XMLReader createXMLReader() throws SAXException {  return SAXHelper.createXMLReader(true);}  }
class C{  public static Days days(int days){switch (days) {case 0:    return ZERO;case 1:  return ONE;case 2:return TWO;case 3:return THREE;case 4:return FOUR;case 5:return FIVE;case 6:return SIX;case 7:return SEVEN;case Integer.MAX_VALUE:return MAX_VALUE;case Integer.MIN_VALUE:return MIN_VALUE;default :return new Days(days);}}  }
class C{  public Value root(){  return root;}  }
class C{  public void testRequest1(){  SubmissionPublisher<Integer> p=basicPublisher();  TestSubscriber s1=new TestSubscriber();  s1.request=false;  p.subscribe(s1);  s1.awaitSubscribe();  assertTrue(p.estimateMinimumDemand() == 0);  TestSubscriber s2=new TestSubscriber();  p.subscribe(s2);  p.submit(1);  p.submit(2);  s2.awaitNext(1);  assertEquals(0,s1.nexts);  s1.sn.request(3);  p.submit(3);  p.close();  s2.awaitComplete();  assertEquals(3,s2.nexts);  assertEquals(1,s2.completes);  s1.awaitComplete();  assertTrue(s1.nexts > 0);  assertEquals(1,s1.completes);}  }
class C{  public Zipper<A> removeBefore() throws NoSuchElementException {  return new Zipper<>(front.tail(),back,position - 1);}  }
class C{  public int[] cleanAbsoluteSources(int[] sources,int dest){  int[] cleaned=new int[numSources];  int countOfSources=0;  for (int index=0; index < sources.length; index++) {    if (sources[index] != dest) {      if (countOfSources == numSources) {        countOfSources++;        break;      }      cleaned[countOfSources]=sources[index];      countOfSources++;    }  }  if (countOfSources < numSources) {    throw new RuntimeException("Too few sources in absolutes");  } else   if (countOfSources > numSources) {    throw new RuntimeException("Too many sources in absolutes");  }  return cleaned;}  }
class C{  @Override public void validate(final IDescription description){  final SpeciesDescription species=description.getSpeciesContext();  final String keyword=description.getKeyword();  final SkillDescription control=species.getControl();  if (!FsmArchitecture.class.isAssignableFrom(control.getJavaBase())) {    if (keyword.equals(STATE)) {      description.error("A state can only be defined in an fsm-controlled or user-controlled species",IGamlIssue.WRONG_CONTEXT);      return;    } else     if (control.getJavaBase() == FsmArchitecture.class) {      description.error("A " + description.getKeyword() + " can only be defined in a user-controlled species (one of"+ AllowedArchitectures+ ")",IGamlIssue.WRONG_CONTEXT);      return;    }  }  if (!Assert.nameIsValid(description)) {    return;  }  IExpression expr=description.getFacetExpr(INITIAL);  if (IExpressionFactory.TRUE_EXPR.equals(expr)) {    assertNoOther(description,INITIAL);  } else {    expr=description.getFacetExpr(FINAL);    if (IExpressionFactory.TRUE_EXPR.equals(expr)) {      assertNoOther(description,FINAL);    } else {      assertAtLeastOne(description,INITIAL);    }  }}  }
class C{  public boolean isOnline(Activity activity){  if (activity == null) {    throw new InvalidParameterException("Error checking connection capabilities, activity may not be null");  }  ConnectivityManager cm=(ConnectivityManager)activity.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo netInfo=cm.getActiveNetworkInfo();  if (netInfo != null && netInfo.isConnectedOrConnecting()) {    return true;  }  return false;}  }
class C{  public static <T>Queue<T> asLifoQueue(Deque<T> deque){  return new AsLIFOQueue<T>(deque);}  }
class C{  public void goLastClientExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  InvocationStack invocationStack=getInvocationStack(request);  ClientInvocation lastClientInvocation=popLastInvocation(request);  if ((lastClientInvocation != null) && (lastClientInvocation == invocationStack.getHome())) {    setReturnActionFordward(request,new ActionForward("/action/homepage?method=loadBandeja",true));  } else {    ActionRedirect redirect=new ActionRedirect(new ActionForward(lastClientInvocation.getInvocationURI(),true),true);    if (lastClientInvocation.getTreeView() != null) {      redirect.addParameter(Constants.TREE_VIEW_RELOAD,Boolean.TRUE);    }    setReturnActionFordward(request,redirect);  }}  }
class C{  public CompareResult<LinkAddress> compareAddresses(LinkProperties target){  CompareResult<LinkAddress> result=new CompareResult<LinkAddress>();  result.removed=new ArrayList<LinkAddress>(mLinkAddresses);  result.added.clear();  if (target != null) {    for (    LinkAddress newAddress : target.getLinkAddresses()) {      if (!result.removed.remove(newAddress)) {        result.added.add(newAddress);      }    }  }  return result;}  }
class C{  @Pointcut("execution(* org.finra.herd.dao.*Operations.*(..))") protected void operationsMethods(){}  }
class C{  public static LogStream initialLog(final String name){  try {    return new LogFile(File.createTempFile(name.replace(' ','-'),"." + FileUtils.LOG_SUFFIX,new File(System.getProperty("user.dir"))));  } catch (  final IOException e) {    return null;  }}  }
class C{  static void finishTag(@NonNull XmlPullParser parser) throws XmlPullParserException, IOException {  while (parser.getEventType() != XmlPullParser.END_TAG) {    if (parser.getEventType() == XmlPullParser.START_TAG) {      Utils.skipTag(parser);    }    parser.next();  }}  }
class C{  @SuppressWarnings("rawtypes") public void callModifyReplica(StorageSystem storage,CIMArgument[] inArgs) throws Exception {  callReplicationSvc(storage,MODIFY_REPLICA_SYNCHRONIZATION,inArgs,new CIMArgument[5]);}  }
class C{  public NewCookie(String name,String value,String path,String domain,String comment,int maxAge,boolean secure,boolean httpOnly){  this(name,value,path,domain,DEFAULT_VERSION,comment,maxAge,secure,httpOnly);}  }
class C{  public void removeActionListener(ActionListener listener){  listenerList.remove(ActionListener.class,listener);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.913 -0400",hash_original_method="1F07F2996D4303D16171195260C51826",hash_generated_method="3323F907E6CEC5C0205A9AAF6E5F9261") public XmlStreamWriter(OutputStream out){  this(out,null);}  }
class C{  public static Element find(Node parent,String name){  NodeList list=parent.getChildNodes();  for (int i=0; i < list.getLength(); i++) {    Node n=list.item(i);    if (n instanceof Element) {      Element e=(Element)n;      if (name.equals(e.getAttribute("id"))) {        return e;      }    }    Element r=find(n,name);    if (r != null) {      return r;    }  }  return null;}  }
class C{  private void parseRowEvent(OneRowChange oneRowChange,boolean isKeySpec,int cols) throws SQLException {  ArrayList<ColumnSpec> specs=(isKeySpec ? oneRowChange.getKeySpec() : oneRowChange.getColumnSpec());  if (specs.isEmpty()) {    if (logger.isDebugEnabled())     logger.debug("Adding column or key specs (not defined so far)");    for (int i=1; i <= cols; i++) {      ColumnSpec colSpec=oneRowChange.new ColumnSpec();      colSpec.setIndex(i);      colSpec.setType(resultset.getMetaData().getColumnType(i));      colSpec.setName(resultset.getMetaData().getColumnLabel(i));      specs.add(colSpec);    }  }  ArrayList<ArrayList<OneRowChange.ColumnVal>> rows=(isKeySpec ? oneRowChange.getKeyValues() : oneRowChange.getColumnValues());  ArrayList<OneRowChange.ColumnVal> columns=new ArrayList<ColumnVal>();  rows.add(columns);  for (int i=1; i <= cols; i++) {    ColumnVal value=oneRowChange.new ColumnVal();    value.setValue((Serializable)resultset.getObject(i));    if (resultset.wasNull())     value.setValueNull();    columns.add(value);  }}  }
class C{  public void finish() throws Exception {}  }
class C{  public boolean removeMiddleOfLastThree(){  if (!hasThree())   return false;  int pos=points.size();  points.remove(pos - 2);  return true;}  }
class C{  public static Collection<ContentStream> toContentStreams(final String str,final String contentType){  ArrayList<ContentStream> streams=new ArrayList<>();  ContentStreamBase stream=new ContentStreamBase.StringStream(str);  if (contentType != null)   stream.setContentType(contentType);  streams.add(stream);  return streams;}  }
class C{  public EditableOMDistance(OMDistance omp){  super(omp);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:42.856 -0500",hash_original_method="3B66BCE498E2DD0699CFFBB4FE4F7076",hash_generated_method="2CFFD26EC90D471349D71F1206290F26") public TestRunner(){  this(System.out);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static <T>T checkNotNull(T reference,Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public final int numInstances(){  return m_Instances.size();}  }
class C{  public final int[] hash(final SparseDoubleVector vector){  return hashSignature(sb.signature(vector));}  }
class C{  public Builder slideIn(){  mSlideIn=true;  return this;}  }
class C{  private int write(Chunk chunk,WriteBuffer buff){  int start=buff.position();  int len=keys.length;  int type=children != null ? DataUtils.PAGE_TYPE_NODE : DataUtils.PAGE_TYPE_LEAF;  buff.putInt(0).putShort((byte)0).putVarInt(map.getId()).putVarInt(len);  int typePos=buff.position();  buff.put((byte)type);  if (type == DataUtils.PAGE_TYPE_NODE) {    writeChildren(buff);    for (int i=0; i <= len; i++) {      buff.putVarLong(children[i].count);    }  }  int compressStart=buff.position();  map.getKeyType().write(buff,keys,len,true);  if (type == DataUtils.PAGE_TYPE_LEAF) {    map.getValueType().write(buff,values,len,false);  }  MVStore store=map.getStore();  int expLen=buff.position() - compressStart;  if (expLen > 16) {    int compressionLevel=store.getCompressionLevel();    if (compressionLevel > 0) {      Compressor compressor;      int compressType;      if (compressionLevel == 1) {        compressor=map.getStore().getCompressorFast();        compressType=DataUtils.PAGE_COMPRESSED;      } else {        compressor=map.getStore().getCompressorHigh();        compressType=DataUtils.PAGE_COMPRESSED_HIGH;      }      byte[] exp=new byte[expLen];      buff.position(compressStart).get(exp);      byte[] comp=new byte[expLen * 2];      int compLen=compressor.compress(exp,expLen,comp,0);      int plus=DataUtils.getVarIntLen(compLen - expLen);      if (compLen + plus < expLen) {        buff.position(typePos).put((byte)(type + compressType));        buff.position(compressStart).putVarInt(expLen - compLen).put(comp,0,compLen);      }    }  }  int pageLength=buff.position() - start;  int chunkId=chunk.id;  int check=DataUtils.getCheckValue(chunkId) ^ DataUtils.getCheckValue(start) ^ DataUtils.getCheckValue(pageLength);  buff.putInt(start,pageLength).putShort(start + 4,(short)check);  if (pos != 0) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,"Page already stored");  }  pos=DataUtils.getPagePos(chunkId,start,pageLength,type);  store.cachePage(pos,this,getMemory());  if (type == DataUtils.PAGE_TYPE_NODE) {    store.cachePage(pos,this,getMemory());  }  long max=DataUtils.getPageMaxLength(pos);  chunk.maxLen+=max;  chunk.maxLenLive+=max;  chunk.pageCount++;  chunk.pageCountLive++;  if (removedInMemory) {    map.removePage(pos,memory);  }  return typePos + 1;}  }
class C{  @Override public double[] toDoubleArray(){  double[] newValues=new double[m_AttValues.length];  System.arraycopy(m_AttValues,0,newValues,0,m_AttValues.length);  return newValues;}  }
class C{  public static JSONArray toJSONArray(JSONArray names,JSONTokener x) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  JSONArray ja=new JSONArray();  for (; ; ) {    JSONObject jo=rowToJSONObject(names,x);    if (jo == null) {      break;    }    ja.put(jo);  }  if (ja.length() == 0) {    return null;  }  return ja;}  }
class C{  public static Stopwatch createUnstarted(Ticker ticker){  return new Stopwatch(ticker);}  }
class C{  public Packet nextResult(long timeout){  try {    return resultQueue.poll(timeout,TimeUnit.MILLISECONDS);  } catch (  InterruptedException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case FunctionblockPackage.RETURN_PRIMITIVE_TYPE__RETURN_TYPE:    return getReturnType();case FunctionblockPackage.RETURN_PRIMITIVE_TYPE__CONSTRAINT_RULE:  return getConstraintRule();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isContinuous(){  return (m_clustertype == SubspaceCluster.CONTINUOUS);}  }
class C{  public static Object read(String filename) throws Exception {  return read(new FileInputStream(filename));}  }
class C{  public void cacheInvoke(long outMemPtr,long inMemPtr){  enter();  try {    PlatformCallbackUtils.cacheInvoke(envPtr,outMemPtr,inMemPtr);  }  finally {    leave();  }}  }
class C{  protected AbstractRpcResponse(Throwable cause){  requireNonNull(cause,"cause");  completeExceptionally(cause);}  }
class C{  public static void closeCacheFeeder(){  if (cacheFeeder != null && !cacheFeeder.isClosed()) {    cacheFeeder.close();    cacheFeeder.getDistributedSystem().disconnect();  }}  }
class C{  protected void beforeHide(){}  }
class C{  BigInteger sumCoeffs(){  BigInteger sum=Constants.BIGINT_ZERO;  for (int i=0; i < coeffs.length; i++) {    sum=sum.add(coeffs[i]);  }  return sum;}  }
class C{  public void onEmojiconDeleteEvent(){  if (!TextUtils.isEmpty(editText.getText())) {    KeyEvent event=new KeyEvent(0,0,0,KeyEvent.KEYCODE_DEL,0,0,0,0,KeyEvent.KEYCODE_ENDCALL);    editText.dispatchKeyEvent(event);  }}  }
class C{  public static void e(String tag,String msg){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg);}  }
class C{  public boolean isFault(){  return (fault != null);}  }
class C{  public final void writeAsSerializedByteArray(Object v) throws IOException {  if (v instanceof HeapDataOutputStream) {    HeapDataOutputStream other=(HeapDataOutputStream)v;    InternalDataSerializer.writeArrayLength(other.size(),this);    other.sendTo((ByteBufferWriter)this);    other.rewind();    return;  }  if (this.overflowBuf != null) {    this.overflowBuf.writeAsSerializedByteArray(v);    return;  }  if (isOverflowMode()) {    int remainingSpace=this.buffer.capacity() - this.buffer.position();    if (remainingSpace < 5) {      this.overflowBuf=new HeapDataOutputStream(this.buffer.capacity() - Connection.MSG_HEADER_BYTES,Version.CURRENT);      this.overflowBuf.writeAsSerializedByteArray(v);      return;    }  } else {    ensureCapacity(5 + 1024);  }  int lengthPos=this.buffer.position();  this.buffer.position(lengthPos + 5);  enableOverflowMode();  boolean finished=false;  try {    try {      DataSerializer.writeObject(v,this);    } catch (    IOException e) {      RuntimeException e2=new IllegalArgumentException(LocalizedStrings.MsgStreamer_AN_EXCEPTION_WAS_THROWN_WHILE_SERIALIZING.toLocalizedString());      e2.initCause(e);      throw e2;    }    int baLength=this.buffer.position() - (lengthPos + 5);    HeapDataOutputStream overBuf=this.overflowBuf;    if (overBuf != null) {      baLength+=overBuf.size();    }    this.buffer.put(lengthPos,InternalDataSerializer.INT_ARRAY_LEN);    this.buffer.putInt(lengthPos + 1,baLength);    disableOverflowMode();    finished=true;    if (overBuf != null && !isOverflowMode()) {      overBuf.sendTo((ByteBufferWriter)this);    }  }  finally {    if (!finished) {      this.buffer.position(lengthPos);      disableOverflowMode();    }  }}  }
class C{  private void addNormalRecords(ServiceCatalog serviceCatalog,String title){  Map<String,StringBuilder> changedMap=new HashMap<String,StringBuilder>();  for (  Map.Entry<ApiIdentifier,ApiDescriptor> entry : serviceCatalog.getApiMap().entrySet()) {    String componentName=serviceCatalog.getServiceName() + Constants.NAME_STRING_SEPARATOR + entry.getKey().getPath().split(Constants.URL_PATH_SEPARATOR)[1];    StringBuilder componentValue=changedMap.get(componentName);    if (componentValue == null) {      componentValue=new StringBuilder();      if (componentMap.get(componentName) == null) {        componentValue.append(HtmlSerializerHelper.buildDivHeader(componentName));        componentValue.append(HtmlSerializerHelper.buildContent("Component",componentName,3));      }      componentValue.append(HtmlSerializerHelper.buildTableHeader());      componentValue.append(HtmlSerializerHelper.buildTableHeaderRow(2,new Pair<String,Integer>(title,100)));      changedMap.put(componentName,componentValue);    }    componentValue.append(addNormalRecord(entry.getKey(),entry.getValue(),serviceCatalog.getElementMap()));  }  for (  StringBuilder builder : changedMap.values()) {    builder.append(HtmlSerializerHelper.buildTableTailer());  }  Iterator<Map.Entry<String,StringBuilder>> iterator=changedMap.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,StringBuilder> entry=iterator.next();    StringBuilder builder=componentMap.get(entry.getKey());    if (builder == null) {      builder=new StringBuilder();      componentMap.put(entry.getKey(),builder);    }    builder.append(entry.getValue().toString());    iterator.remove();  }}  }
class C{  public final synchronized void startGame(){  updateComputeThreads();  setSelection();  updateGUI();  updateGameMode();}  }
class C{  public void error(SAXParseException ex){  print("error: " + print(ex));}  }
class C{  public String processBufferedMessages(ArrayList<byte[]> bufferedMessages){  StringBuffer sResponse=new StringBuffer("");  int calibrationSelectedAux=0;  log.debug("processBufferedMessages");synchronized (calibrationSelectedLock) {    calibrationSelectedAux=calibrationSelected;  }  try {    for (    byte[] readData : bufferedMessages) {      if (checkFirstByte(readData[0])) {switch (getAnswerType(readData[0])) {case MedtronicConstants.DATA_ANSWER:          log.debug("IS DATA ANSWER");        if (isMessageFromMyDevices(readData)) {          log.debug("IS FROM MY DEVICES");switch (readData[2]) {case MedtronicConstants.MEDTRONIC_PUMP:            log.debug("IS A PUMP MESSAGE");          sResponse.append(processPumpDataMessage(readData,calibrationSelectedAux)).append("\n");        if (lastMedtronicPumpRecord == null) {          lastMedtronicPumpRecord=new MedtronicPumpRecord();          calculateDate(lastMedtronicPumpRecord,new Date(),0);          lastMedtronicPumpRecord.deviceId=prefs.getString("medtronic_cgm_id","");        }      lastMedtronicPumpRecord.isWarmingUp=prefs.getBoolean("isWarmingUp",false);    break;case MedtronicConstants.MEDTRONIC_GL:{    log.debug("GLUCOMETER DATA RECEIVED");    if (lastGlucometerMessage == null || lastGlucometerMessage.length == 0) {      lastGlucometerMessage=Arrays.copyOfRange(readData,0,readData.length);      SharedPreferences.Editor editor=settings.edit();      editor.putString("lastGlucometerMessage",HexDump.toHexString(lastGlucometerMessage));      editor.commit();    } else {      boolean isEqual=Arrays.equals(lastGlucometerMessage,readData);      if (isEqual && (System.currentTimeMillis() - lastGlucometerDate < MedtronicConstants.TIME_15_MIN_IN_MS)) {        continue;      }      lastGlucometerDate=System.currentTimeMillis();      lastGlucometerMessage=Arrays.copyOfRange(readData,0,readData.length);    }    sResponse.append(processGlucometerDataMessage(readData,false)).append("\n");    if (lastGlucometerValue > 0) {      isCalibrating=calibrationSelectedAux == MedtronicConstants.CALIBRATION_GLUCOMETER;      if (previousRecord == null) {        MedtronicSensorRecord auxRecord=new MedtronicSensorRecord();        auxRecord.isCalibrating=calibrationSelectedAux == MedtronicConstants.CALIBRATION_GLUCOMETER;        log.debug("1");        writeLocalCSV(auxRecord,context);      } else {        previousRecord.isCalibrating=calibrationSelectedAux == MedtronicConstants.CALIBRATION_GLUCOMETER;        log.debug("2");        writeLocalCSV(previousRecord,context);      }      SharedPreferences.Editor editor=settings.edit();      editor.putBoolean("isCalibrating",calibrationSelectedAux == MedtronicConstants.CALIBRATION_GLUCOMETER);      if (calibrationSelectedAux == MedtronicConstants.CALIBRATION_GLUCOMETER)       sendMessageToUI("isCalibrating",false);      sendMessageToUI("glucometer data received",false);      editor.commit();    }    break;  }case MedtronicConstants.MEDTRONIC_SENSOR1:{  if (prefs.getString("glucSrcTypes","1").equals("2")) {    log.debug("Sensor value received, but value is took only by pump logs");    break;  }  log.debug("WARMING_UP");  SharedPreferences.Editor editor=settings.edit();  editor.remove("lastGlucometerMessage");  editor.remove("previousValue");  editor.remove("expectedSensorSortNumber");  editor.remove("isCalibrating");  calibrationStatus=MedtronicConstants.WITHOUT_ANY_CALIBRATION;  editor.putInt("calibrationStatus",MedtronicConstants.WITHOUT_ANY_CALIBRATION);  editor.remove("calibrationFactor");  log.debug("remove lastCalibrationDate");  editor.remove("lastCalibrationDate");  editor.remove("lastGlucometerValue");  editor.remove("lastGlucometerDate");  editor.remove("expectedSensorSortNumber");  editor.remove("expectedSensorSortNumberForCalibration0");  editor.remove("expectedSensorSortNumberForCalibration1");  editor.remove("isCheckedWUP");  if (!prefs.getBoolean("isWarmingUp",false)) {    if (lastMedtronicPumpRecord == null) {      lastMedtronicPumpRecord=new MedtronicPumpRecord();      calculateDate(lastMedtronicPumpRecord,new Date(),0);      lastMedtronicPumpRecord.deviceId=prefs.getString("medtronic_cgm_id","");    }    editor.putBoolean("isWarmingUp",true);    lastMedtronicPumpRecord.isWarmingUp=true;  }  if (previousRecord == null) {    MedtronicSensorRecord auxRecord=new MedtronicSensorRecord();    calculateDate(auxRecord,new Date(),0);    log.debug("3");    writeLocalCSV(auxRecord,context);  } else {    calculateDate(previousRecord,new Date(),0);    log.debug("4");    writeLocalCSV(previousRecord,context);  }  sendMessageToUI("sensor data wUp.",false);  editor.commit();  break;}case MedtronicConstants.MEDTRONIC_SENSOR2:if (lastMedtronicPumpRecord != null) lastMedtronicPumpRecord.isWarmingUp=false;if (prefs.getString("glucSrcTypes","1").equals("2")) {if (prefs.getBoolean("isWarmingUp",false)) {if (lastMedtronicPumpRecord == null) {  lastMedtronicPumpRecord=new MedtronicPumpRecord();  calculateDate(lastMedtronicPumpRecord,new Date(),0);  lastMedtronicPumpRecord.deviceId=prefs.getString("medtronic_cgm_id","");}lastMedtronicPumpRecord.isWarmingUp=false;SharedPreferences.Editor editor1=prefs.edit();editor1.putBoolean("isWarmingUp",false);editor1.commit();}log.debug("Sensor value received, but value is took only by pump logs");break;}Log.i("MEdtronic","process sensor2");log.debug("SENSOR DATA RECEIVED");if (prefs.getBoolean("isWarmingUp",false)) {if (lastMedtronicPumpRecord == null) {lastMedtronicPumpRecord=new MedtronicPumpRecord();calculateDate(lastMedtronicPumpRecord,new Date(),0);lastMedtronicPumpRecord.deviceId=prefs.getString("medtronic_cgm_id","");}lastMedtronicPumpRecord.isWarmingUp=false;SharedPreferences.Editor editor=prefs.edit();editor.remove("isWarmingUp");editor.commit();}boolean calculateCalibration=false;if (isCalibrating) {calculateCalibration=true;}sResponse.append(processSensorDataMessage(readData)).append("\n");if (calculateCalibration && !isCalibrating) {SharedPreferences.Editor editor=settings.edit();editor.putBoolean("isCalibrating",false);editor.commit();}sendMessageToUI("sensor data value received",false);break;default :Log.i("MEdtronic","No Match");log.debug("I can't understand this message");sResponse.append("I can't process this message, no device match.").append("\n");break;}} else {Log.i("Medtronic","I dont have to listen to this. This message comes from another source.");log.debug("I don't have to listen to this message. This message comes from another source.");sResponse.append("I don't have to listen to this. This message comes from another source.").append("\n");}break;case MedtronicConstants.COMMAND_ANSWER:log.debug("ACK Received");synchronized (sendingCommandLock) {sendingCommand=false;}break;case MedtronicConstants.FILTER_COMMAND:if (readData[0] == (byte)0x13) sResponse.append("FILTER DEACTIVATED").append("\n"); else sResponse.append("FILTER ACTIVATED").append("\n");break;default :{log.debug("I don't understand this message " + HexDump.toHexString(readData));sResponse.append("I don't understand the received message ").append("\n");}}} else {sResponse.append("CRC Error ").append("\n");log.debug("CRC ERROR!!! " + HexDump.dumpHexString(readData));}}} catch (Exception ex2) {StringBuffer sb1=new StringBuffer("");sb1.append("EXCEPTION!!!!!! " + ex2.getMessage() + " "+ ex2.getCause());for (StackTraceElement st : ex2.getStackTrace()) {sb1.append(st.toString());}sendMessageToUI(sb1.toString(),false);}SharedPreferences.Editor editor=settings.edit();editor.remove("last_read");editor.commit();return sResponse.toString();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static String americanize(String str,boolean capitalizeTimex){  if (capitalizeTimex && timexMapping.containsKey(str)) {    return timexMapping.get(str);  } else   if (mapping.containsKey(str)) {    return mapping.get(str);  } else {    for (int i=0; i < pats.length; i++) {      Pattern ex=excepts[i];      if (ex != null) {        Matcher me=ex.matcher(str);        if (me.find()) {          continue;        }      }      Matcher m=pats[i].matcher(str);      if (m.find()) {        return m.replaceAll(reps[i]);      }    }    return str;  }}  }
class C{  public static JPanel createVerticalHintBox(JComponent c,String txt){  JPanel p=new JPanel();  p.setOpaque(false);  p.setLayout(new BoxLayout(p,BoxLayout.Y_AXIS));  JLabel l1=N9ComponentFactory.createLabel_style3(txt);  l1.setAlignmentX(Component.CENTER_ALIGNMENT);  p.add(l1);  c.setAlignmentX(Component.CENTER_ALIGNMENT);  p.add(c);  p.setBorder(BorderFactory.createEmptyBorder(10,0,5,0));  return p;}  }
class C{  public void addByte(byte x){  prep(1,0);  putByte(x);}  }
class C{  public boolean canValidateMemory(){  return targetInformation.getDebuggerOptions().canValidMemory();}  }
class C{  protected String findUpperLimit(String prefix){  if (prefix.isEmpty()) {    return "z";  }  if (prefix.length() == 1) {    char c=prefix.charAt(0);    return c < 'z' ? Character.toString((char)(c + 1)) : "z";  }  char lastChar=prefix.charAt(prefix.length() - 1);  if (lastChar < 'z') {    return prefix.substring(0,prefix.length() - 1) + Character.toString((char)(lastChar + 1));  }  return findUpperLimit(prefix.substring(0,prefix.length() - 1));}  }
class C{  String scanString() throws IOException {  int ch=read();switch (ch) {case 'N':    return null;case 0x00:case 0x01:case 0x02:case 0x03:case 0x04:case 0x05:case 0x06:case 0x07:case 0x08:case 0x09:case 0x0a:case 0x0b:case 0x0c:case 0x0d:case 0x0e:case 0x0f:case 0x10:case 0x11:case 0x12:case 0x13:case 0x14:case 0x15:case 0x16:case 0x17:case 0x18:case 0x19:case 0x1a:case 0x1b:case 0x1c:case 0x1d:case 0x1e:case 0x1f:  return readString(ch - 0x00);default :throw new UnsupportedOperationException(getClass().getName());}}  }
class C{  public void paint(Graphics g,Shape a){  Rectangle alloc=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();  int x=0;  int y=alloc.y + SPACE_ABOVE + (int)topMargin;  int width=alloc.width - (int)(leftMargin + rightMargin);  if (widthValue != null) {    width=(int)widthValue.getValue((float)width);  }  int height=alloc.height - (SPACE_ABOVE + SPACE_BELOW + (int)topMargin+ (int)bottomMargin);  if (size > 0)   height=size;switch (alignment) {case StyleConstants.ALIGN_CENTER:    x=alloc.x + (alloc.width / 2) - (width / 2);  break;case StyleConstants.ALIGN_RIGHT:x=alloc.x + alloc.width - width - (int)rightMargin;break;case StyleConstants.ALIGN_LEFT:default :x=alloc.x + (int)leftMargin;break;}if (noshade != null) {g.setColor(Color.black);g.fillRect(x,y,width,height);} else {Color bg=getContainer().getBackground();Color bottom, top;if (bg == null || bg.equals(Color.white)) {top=Color.darkGray;bottom=Color.lightGray;} else {top=Color.darkGray;bottom=Color.white;}g.setColor(bottom);g.drawLine(x + width - 1,y,x + width - 1,y + height - 1);g.drawLine(x,y + height - 1,x + width - 1,y + height - 1);g.setColor(top);g.drawLine(x,y,x + width - 1,y);g.drawLine(x,y,x,y + height - 1);}}  }
class C{  public ImageIcon createImageIcon(String filename,String description){  String path="/resources/images/" + filename;  return new ImageIcon(getClass().getResource(path));}  }
class C{  @Override public void openElement(String tagName){  XMLElement newElement=new XMLElement();  newElement.setName(tagName);  current.addChild(newElement);  stack.push(current);  current=newElement;}  }
class C{  private static void s_ucumm(SparseBlock a,double[] agg,double[] c,int m,int n,int rl,int ru){  double[] cprod=(agg != null) ? agg : new double[n];  if (agg == null)   Arrays.fill(cprod,1);  int[] cnt=new int[n];  for (int i=rl, ix=rl * n; i < ru; i++, ix+=n) {    if (!a.isEmpty(i)) {      int apos=a.pos(i);      int alen=a.size(i);      int[] aix=a.indexes(i);      double[] avals=a.values(i);      productAgg(avals,cprod,aix,apos,0,alen);      countAgg(avals,cnt,aix,apos,alen);    }    for (int j=0; j < n; j++)     if (cnt[j] < i + 1)     cprod[j]*=0;    System.arraycopy(cprod,0,c,ix,n);  }}  }
class C{  public boolean next() throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    if (this.onInsertRow) {      this.onInsertRow=false;    }    if (this.doingUpdates) {      this.doingUpdates=false;    }    boolean b;    if (!reallyResult()) {      throw SQLError.createSQLException(Messages.getString("ResultSet.ResultSet_is_from_UPDATE._No_Data_115"),SQLError.SQL_STATE_GENERAL_ERROR,getExceptionInterceptor());    }    if (this.thisRow != null) {      this.thisRow.closeOpenStreams();    }    if (this.rowData.size() == 0) {      b=false;    } else {      this.thisRow=this.rowData.next();      if (this.thisRow == null) {        b=false;      } else {        clearWarnings();        b=true;      }    }    setRowPositionValidity();    return b;  }}  }
class C{  public boolean equals(BST<E> tree){  if (tree.size != size)   return false;  return equals(root,tree.root);}  }
class C{  public void clear(){  numAuthExceptions=0;  numIoExceptions=0;  numParseExceptions=0;  numConflictDetectedExceptions=0;  numInserts=0;  numUpdates=0;  numDeletes=0;  numEntries=0;  numSkippedEntries=0;}  }
class C{  public static boolean isValidEmail(CharSequence text){  return !isEmpty(text) && EMAIL_ADDRESS.matcher(text).matches();}  }
class C{  private boolean isIBMXIVVolume(VolumeRestRep vol){  return vol != null && IBMXIV_SYSTEM_TYPE.equals(vol.getSystemType());}  }
class C{  public boolean hasBlock1(){  return block1 != null;}  }
class C{  public void delete(Key key){  if (key == null)   throw new NullPointerException("argument to delete() is null");  if (!contains(key))   return;  if (!isRed(root.left) && !isRed(root.right))   root.color=RED;  root=delete(root,key);  if (!isEmpty())   root.color=BLACK;}  }
class C{  @Override public ContextedRuntimeException addContextValue(final String label,final Object value){  exceptionContext.addContextValue(label,value);  return this;}  }
class C{  private static void copyFile(File src,File dst,Integer port,boolean internalCompression) throws IOException {  BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(src),StandardCharsets.UTF_8));  Writer out=new OutputStreamWriter(new FileOutputStream(dst),StandardCharsets.UTF_8);  for (String line=in.readLine(); null != line; line=in.readLine()) {    if (null != port)     line=line.replace("TEST_PORT",port.toString());    line=line.replace("COMPRESSION",internalCompression ? "internal" : "false");    out.write(line);  }  in.close();  out.close();}  }
class C{  public synchronized void remove(String packageName,UserHandleCompat user){  HashSet<CacheKey> forDeletion=new HashSet<CacheKey>();  for (  CacheKey key : mCache.keySet()) {    if (key.componentName.getPackageName().equals(packageName) && key.user.equals(user)) {      forDeletion.add(key);    }  }  for (  CacheKey condemned : forDeletion) {    mCache.remove(condemned);  }}  }
class C{  public void collapseAll(){  if (chkExpand.isChecked())   chkExpand.setChecked(false);  TreeUtils.collapseAll(menuTree);}  }
class C{  public static GdbBreak parse(GdbOutput gdbOutput) throws GdbParseException {  String output=gdbOutput.getOutput();  Matcher matcher=GDB_BREAK.matcher(output);  if (matcher.find()) {    String address=matcher.group(2);    String file=matcher.group(3);    String lineNumber=matcher.group(4);    return new GdbBreak(address,file,lineNumber);  }  throw new GdbParseException(GdbBreak.class,output);}  }
class C{  private Workflow.Method createVirtualVolumesMethod(URI vplexURI,List<URI> vplexVolumeURIs,Map<URI,URI> computeResourceMap){  return new Workflow.Method(CREATE_VIRTUAL_VOLUMES_METHOD_NAME,vplexURI,vplexVolumeURIs,computeResourceMap);}  }
class C{  public TIntHash(){  _hashingStrategy=this;}  }
class C{  @Override public WeightVector train(SLProblem problem,WeightVector init) throws Exception {  log.info("Starting Structured Perceptron learner");  long start=System.currentTimeMillis();  WeightVector avg=new WeightVector(10000);  WeightVector w=init;  int epoch=0;  boolean done=false;  int count=1;  while (!done) {    if (epoch % params.PROGRESS_REPORT_ITER == 0)     log.info("Starting epoch {}",epoch);    count=doOneIteration(w,avg,problem,epoch,count);    if (epoch % params.PROGRESS_REPORT_ITER == 0)     log.info("End of epoch {}. {} updates made",epoch,epochUpdateCount);    epoch++;    done=!reachedStoppingCriterion(w,epoch);    if (params.PROGRESS_REPORT_ITER > 0 && (epoch + 1) % params.PROGRESS_REPORT_ITER == 0 && this.f != null)     f.run(w,inference);  }  long end=System.currentTimeMillis();  log.info("Learning complete. Took {}s","" + (end - start) * 1.0 / 1000);  WeightVector a=new WeightVector(w);  a.addDenseVector(avg,-1.0f / (count));  return a;}  }
class C{  public Pair W(){  char d2=(char)(diagonal - 1);  if (d2 < 'A')   return null;  return new Pair(d2,row);}  }
class C{  @Override public void mark(int readAheadLimit) throws IOException {  if (readAheadLimit < 0) {    throw new IllegalArgumentException("Read-ahead limit < 0");  }  ensureOpen();  mark=next;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object val=stack.pop();  String name=getString(stack);  PseudoMenu ui=stack.getUIMgrSafe().getCurrUI();  return Boolean.valueOf(ui.setFocusByValue(name,val));}  }
class C{  public static Ed25519EncodedFieldElement prepareForScalarMultiply(final PrivateKey key){  final byte[] hash=Hashes.sha3_512(ArrayUtils.toByteArray(key.getRaw(),32));  final byte[] a=Arrays.copyOfRange(hash,0,32);  a[31]&=0x7F;  a[31]|=0x40;  a[0]&=0xF8;  return new Ed25519EncodedFieldElement(a);}  }
class C{  @Override public String toString(){  final StringBuffer sb=new StringBuffer("[RemoteThread@");  sb.append(System.identityHashCode(this)).append(": ");  sb.append("member@").append(System.identityHashCode(this.member)).append("=").append(this.member);  sb.append(", threadId=").append(this.threadId);  sb.append("]");  return sb.toString();}  }
class C{  @Override @Deprecated public Condition duplicate(){  return this;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void trackPageView(String argPageURL,String argPageTitle,String argHostName){  if (argPageURL == null)   throw new IllegalArgumentException("Page URL cannot be null, Google will not track the data.");  AnalyticsRequestData data=new AnalyticsRequestData();  data.setHostName(argHostName);  data.setPageTitle(argPageTitle);  data.setPageURL(argPageURL);  makeCustomRequest(data);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static Intent offerBusyBox(Activity activity,int requestCode){  return getInternals().offerBusyBox(activity,requestCode);}  }
class C{  public static String readStream(InputStream inputStream) throws IOException {  if (inputStream == null) {    return null;  }  ByteArrayOutputStream bout=new ByteArrayOutputStream();  byte[] buf=new byte[8192];  int r;  while ((r=inputStream.read(buf)) != -1) {    bout.write(buf,0,r);  }  return bout.toString("UTF-8");}  }
class C{  public CertificateMessage(HandshakeIODataStream in,int length) throws IOException {  int l=in.readUint24();  if (l == 0) {    if (length != 3) {      fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect CertificateMessage");    }    certs=new X509Certificate[0];    encoded_certs=new byte[0][0];    this.length=3;    return;  }  CertificateFactory cf;  try {    cf=CertificateFactory.getInstance("X509");  } catch (  CertificateException e) {    fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR",e);    return;  }  ArrayList<X509Certificate> certsList=new ArrayList<X509Certificate>();  int size=0;  int enc_size=0;  while (l > 0) {    size=in.readUint24();    l-=3;    try {      certsList.add((X509Certificate)cf.generateCertificate(in));    } catch (    CertificateException e) {      fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR",e);    }    l-=size;    enc_size+=size;  }  certs=certsList.toArray(new X509Certificate[certsList.size()]);  this.length=3 + 3 * certs.length + enc_size;  if (this.length != length) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect CertificateMessage");  }}  }
class C{  private InterpreterResult processIndex(String[] urlItems,String data){  if (urlItems.length < 2 || urlItems.length > 3) {    return new InterpreterResult(InterpreterResult.Code.ERROR,"Bad URL (it should be /index/type or /index/type/id)");  }  final IndexResponse response=client.prepareIndex(urlItems[0],urlItems[1],urlItems.length == 2 ? null : urlItems[2]).setSource(data).get();  return new InterpreterResult(InterpreterResult.Code.SUCCESS,InterpreterResult.Type.TEXT,response.getId());}  }
class C{  public Tree<String> extractBestMaxRuleParse2(int start,int end,int state,List<String> sentence){  List<Tree<String>> children=new ArrayList<Tree<String>>();  String stateStr=(String)tagNumberer.object(state);  if (stateStr.endsWith("^g"))   stateStr=stateStr.substring(0,stateStr.length() - 2);  boolean posLevel=(end - start == 1);  if (posLevel) {    if (grammar.isGrammarTag(state)) {      List<Tree<String>> childs=new ArrayList<Tree<String>>();      childs.add(new Tree<String>(sentence.get(start)));      String stateStr2=(String)tagNumberer.object(maxcChild[start][end][state]);      children.add(new Tree<String>(stateStr2,childs));    } else     children.add(new Tree<String>(sentence.get(start)));  } else {    int split=maxcSplit[start][end][state];    if (split == -1) {      System.err.println("Warning: no symbol can generate the span from " + start + " to "+ end+ ".");      System.err.println("The score is " + maxcScore[start][end][state] + " and the state is supposed to be "+ stateStr);      System.err.println("The insideScores are " + Arrays.toString(iScore[start][end][state]) + " and the outsideScores are "+ Arrays.toString(oScore[start][end][state]));      System.err.println("The maxcScore is " + maxcScore[start][end][state]);      return new Tree<String>("ROOT");    }    int lState=maxcLeftChild[start][end][state];    int rState=maxcRightChild[start][end][state];    Tree<String> leftChildTree=extractBestMaxRuleParse1(start,split,lState,sentence);    Tree<String> rightChildTree=extractBestMaxRuleParse1(split,end,rState,sentence);    children.add(leftChildTree);    children.add(rightChildTree);  }  return new Tree<String>(stateStr,children);}  }
class C{  public boolean handleSyncOffer(String storeName,byte[] key,Iterable<VectorClock> versions) throws SyncException {  SynchronizingStorageEngine store=storeRegistry.get(storeName);  if (store == null)   return true;  List<Versioned<byte[]>> values=store.get(new ByteArray(key));  if (values == null || values.size() == 0)   return true;  for (  VectorClock vc : versions) {    for (    Versioned<byte[]> value : values) {      VectorClock existingVc=(VectorClock)value.getVersion();      if (!vc.compare(existingVc).equals(Occurred.BEFORE))       return true;    }  }  return false;}  }
class C{  public synchronized void removeSeries(XYSeries series){  mSeries.remove(series);}  }
class C{  private boolean resourceIsHostPage(IResource resource){  IProject project=resource.getProject();  if (WebAppUtilities.isWebApp(project)) {    IFolder war=WebAppUtilities.getWarSrc(project);    if (war != null) {      if (war.getFullPath().isPrefixOf(resource.getFullPath())) {        return ResourceUtils.hasJspOrHtmlExtension(resource);      }    }  } else {    return "html".equalsIgnoreCase(resource.getFileExtension());  }  return false;}  }
class C{  public static TechnicalServiceActiveException convertToApi(org.oscm.internal.types.exception.TechnicalServiceActiveException oldEx){  return convertExceptionToApi(oldEx,TechnicalServiceActiveException.class);}  }
class C{  protected List<TransformableFeature> selectTransformableFeatures(Instance<OUTCOME_T> instance){  List<TransformableFeature> features=new ArrayList<TransformableFeature>();  Stack<Feature> featuresToProcess=new Stack<Feature>();  featuresToProcess.addAll(instance.getFeatures());  while (!featuresToProcess.isEmpty()) {    Feature currFeature=featuresToProcess.pop();    if (currFeature instanceof TransformableFeature) {      TransformableFeature transformable=(TransformableFeature)currFeature;      if (transformable.getName().equals(this.name)) {        features.add(transformable);      } else {        featuresToProcess.addAll(transformable.getFeatures());      }    }  }  return features;}  }
class C{  public static String composeConnectionName(final String clientId,final String serverURIs){  return clientId + "@" + serverURIs;}  }
class C{  public static byte[] toIPv4AddressBytes(int ipAddress){  return new byte[]{(byte)(ipAddress >>> 24),(byte)(ipAddress >>> 16),(byte)(ipAddress >>> 8),(byte)ipAddress};}  }
class C{  public boolean hasRel(){  return getRel() != null;}  }
class C{  @ObjectiveCName("isInAppNotificationVibrationEnabled") public boolean isInAppNotificationVibrationEnabled(){  return modules.getSettingsModule().isInAppVibrationEnabled();}  }
class C{  @Override protected void initListeners(){}  }
class C{  public void upgradeUserAccess(AppContext ctx,Project project){  Role check=AccessRightsUtils.getInstance().getRole(ctx.getUser(),project);  if (check == Role.EXECUTE) {    ctx.getUser().getUpgrades().add("guest_" + project.getId().getProjectId());  }}  }
class C{  void remove(RegisterOperand item){  if (DEBUG) {    System.out.println("\tLiveSet.remove (item) called with reg " + item);  }  if (first != null) {    int itemNumber=item.getRegister().number;    if (first.getRegister().number == itemNumber) {      first=first.getNext();    } else {      LiveSetElement current=first.getNext();      LiveSetElement prev=first;      while (current != null && current.getRegister().number < itemNumber) {        prev=current;        current=current.getNext();      }      if (current != null && current.getRegister().number == itemNumber) {        prev.setNext(current.getNext());      }    }  }}  }
class C{  public SageDataFile(SageFileSource sageFileSource,String charset){  this.sageFileSource=sageFileSource;  SageFileSource newSource=getUnencryptedRandomFile(sageFileSource);  if (newSource != null)   unencryptedFileSource=newSource; else   unencryptedFileSource=sageFileSource;  this.charset=charset;  isI18N=Sage.I18N_CHARSET.equals(charset);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void decreaseKey(Entry<T> entry,double newPriority){  checkPriority(newPriority);  if (newPriority > entry.mPriority)   throw new IllegalArgumentException("New priority exceeds old.");  decreaseKeyUnchecked(entry,newPriority);}  }
class C{  public Object saveState(){  if (iSavedState == null) {    iSavedState=new SavedState();  }  return iSavedState;}  }
class C{  public void save(){synchronized (sSavedGame) {    SavedGame save=sSavedGame;    boolean[] bricks=new boolean[BRICK_ROWS * BRICK_COLUMNS];    for (int i=0; i < bricks.length; i++) {      bricks[i]=mBricks[i].isAlive();    }    save.mLiveBricks=bricks;    save.mBallXDirection=mBall.getXDirection();    save.mBallYDirection=mBall.getYDirection();    save.mBallXPosition=mBall.getXPosition();    save.mBallYPosition=mBall.getYPosition();    save.mBallSpeed=mBall.getSpeed();    save.mPaddlePosition=mPaddle.getXPosition();    save.mGamePlayState=mGamePlayState;    save.mGameStatusMessageNum=mGameStatusMessageNum;    save.mLivesRemaining=mLivesRemaining;    save.mScore=mScore;    save.mIsValid=true;  }}  }
class C{  protected String[] options(){  String[] options={"-Dcom.sun.management.jmxremote.authenticate=false","-Dcom.sun.management.jmxremote.ssl=false","-Dcom.sun.management.jmxremote=true","-Dcom.sun.management.jmxremote.port=" + String.valueOf(jmxPort),"-Dcom.sun.management.jmxremote.autodiscovery=false","-Dcom.sun.management.jdp.pause=1","-Dcom.sun.management.jdp.name=" + jdpName,"-Djava.util.logging.SimpleFormatter.format='%1$tF %1$tT %4$-7s %5$s %n'",testName};  return options;}  }
class C{  protected void onBufferingEnded(){}  }
class C{  public static File savepointFile(File instancePath){  File tempDir=new File(Collect.getInstance().getCachePath());  return new File(tempDir,instancePath.getName() + ".save");}  }
class C{  public static void logPromoOpenCount(int count){  RecordHistogram.recordCountHistogram("Search.ContextualSearchPromoOpenCount",count);}  }
class C{  public double value(){  return _map._values[_index];}  }
class C{  public void receiveResultdeleteServiceSessionsForSubscription(org.oscm.example.client.SessionServiceStub.DeleteServiceSessionsForSubscriptionResponseE result){}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  if (actions == null)   getActions();  s.defaultWriteObject();}  }
class C{  private double randomGaussianMeanMax(double mean,double max){  assert mean <= max && mean >= 0;  double g=randomGaussian();  double mean2=mean;  double flip=1;  if (g < 0) {    mean2=max - mean;    flip=-1;    g*=-1;  }  double pivotMax=max - mean2;  double pivot=Math.min(mean2,pivotMax / 2);  assert pivot >= 0 && pivotMax >= pivot && g >= 0;  double pivotResult;  if (g <= 1)   pivotResult=pivot * g; else   pivotResult=Math.min(pivotMax,(g - 1) * (pivotMax - pivot) + pivot);  double result=mean + flip * pivotResult;  return (result < 0 || result > max) ? mean : result;}  }
class C{  JavaCompiler finalCompiler(){  try {    Context nextCtx=nextContext();    JavacProcessingEnvironment.this.context=nextCtx;    JavaCompiler c=JavaCompiler.instance(nextCtx);    c.log.initRound(compiler.log);    return c;  }  finally {    compiler.close(false);  }}  }
class C{  public void run(){  ThreadingUtils.logThreadStarting("Script Health Detector");  while (script.getStatus().equals(ScriptRunningState.RUNNING)) {    if (logger.isTraceEnabled()) {      logger.trace("Checking script {} for responsiveness, last touch = {}, timeout = {}, current time = {}",script.getName(),script.getLastTouch(),script.getScriptTimeout(),TimeUtils.getMonotonicTime());    }    if (script.getLastTouch() + script.getScriptTimeout() < TimeUtils.getMonotonicTime()) {      logger.warn("Script {} detected as frozen, last touch = {}, current time = {}",script.getName(),script.getLastTouch(),TimeUtils.getMonotonicTime());      ScriptRunner.changeState(eventBus,script.getName(),ScriptRunningState.FROZEN,script,executor);    }    if (ThreadingUtils.sleep(1000)) {      break;    }  }  ThreadingUtils.logThreadEnding();}  }
class C{  public void addExplainHint(IExplainHint explainHint){  if (explainHint == null) {    return;  }  final ExplainHints explainHints=getExplainHints();  if (explainHints == null) {    setProperty(Annotations.EXPLAIN_HINTS,new ExplainHints(explainHint));  } else {    explainHints.addExplainHint(explainHint);  }}  }
class C{  public NotificationChain basicSetCallableCtor(TMethod newCallableCtor,NotificationChain msgs){  TMethod oldCallableCtor=callableCtor;  callableCtor=newCallableCtor;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypesPackage.CONTAINER_TYPE__CALLABLE_CTOR,oldCallableCtor,newCallableCtor);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public double calcAngle(Entry p1,Entry p2){  float dx=p2.getXIndex() - p1.getXIndex();  float dy=p2.getVal() - p1.getVal();  double angle=Math.atan2(dy,dx) * 180.0 / Math.PI;  return angle;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.472 -0400",hash_original_method="F5C674A4B4C3C6B0C4DE10E9E5CA4DD0",hash_generated_method="2FBC03AD389DEBB693FDBCA5D35E4519") public ProxyInputStream(InputStream proxy){  super(proxy);}  }
class C{  @SuppressWarnings("unused") private static ParcelFileDescriptor makeInputStream(Uri uri,ContentResolver cr){  try {    return cr.openFileDescriptor(uri,"r");  } catch (  IOException ex) {    return null;  }}  }
class C{  @Override public ValueLob copyToTemp(){  ValueLob lob;  if (type == CLOB) {    lob=ValueLob.createClob(getReader(),precision,handler);  } else {    lob=ValueLob.createBlob(getInputStream(),precision,handler);  }  return lob;}  }
class C{  public Note removeNote(@Named("id") String id,User user) throws UnauthorizedException, NotFoundException {  if (user == null) {    throw new UnauthorizedException("missing user");  }  EntityManager mgr=getEntityManager();  Note note=null;  try {    note=mgr.find(Note.class,id);    if (note == null || !note.getEmailAddress().equalsIgnoreCase(user.getEmail())) {      throw new NotFoundException("note not found");    }    mgr.remove(note);  }  finally {    mgr.close();  }  DevicePing.pingAllDevices(user.getEmail(),id,"remove");  return note;}  }
class C{  public String toString(){  Annotation[] a=getAnnotations();  StringBuilder sbuf=new StringBuilder();  int i=0;  while (i < a.length) {    sbuf.append(a[i++].toString());    if (i != a.length)     sbuf.append(", ");  }  return sbuf.toString();}  }
class C{  public static StatementSpecUnMapResult unmap(StatementSpecRaw statementSpec){  StatementSpecUnMapContext unmapContext=new StatementSpecUnMapContext();  EPStatementObjectModel model=unmapInternal(statementSpec,unmapContext);  return new StatementSpecUnMapResult(model,unmapContext.getSubstitutionParams());}  }
class C{  protected void minimizeFrame(JInternalFrame f){  if (!f.isIcon()) {    BasicLookAndFeel.playSound(frame,"InternalFrame.restoreDownSound");  }  getDesktopManager().minimizeFrame(f);}  }
class C{  public static Area grow(final Shape s,final double offset){  return grow(s,offset,BasicStroke.JOIN_MITER,10f);}  }
class C{  public Object parse(Reader in,ContainerFactory containerFactory) throws IOException, ParseException {  reset(in);  LinkedList statusStack=new LinkedList();  LinkedList valueStack=new LinkedList();  try {    do {      nextToken();switch (status) {case S_INIT:switch (token.type) {case Yytoken.TYPE_VALUE:          status=S_IN_FINISHED_VALUE;        statusStack.addFirst(status);      valueStack.addFirst(token.value);    break;case Yytoken.TYPE_LEFT_BRACE:  status=S_IN_OBJECT;statusStack.addFirst(status);valueStack.addFirst(createObjectContainer(containerFactory));break;case Yytoken.TYPE_LEFT_SQUARE:status=S_IN_ARRAY;statusStack.addFirst(status);valueStack.addFirst(createArrayContainer(containerFactory));break;default :status=S_IN_ERROR;}break;case S_IN_FINISHED_VALUE:if (token.type == Yytoken.TYPE_EOF) return valueStack.removeFirst(); else throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);case S_IN_OBJECT:switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:if (token.value instanceof String) {String key=(String)token.value;valueStack.addFirst(key);status=S_PASSED_PAIR_KEY;statusStack.addFirst(status);} else status=S_IN_ERROR;break;case Yytoken.TYPE_RIGHT_BRACE:if (valueStack.size() > 1) {statusStack.removeFirst();valueStack.removeFirst();status=peekStatus(statusStack);} else status=S_IN_FINISHED_VALUE;break;default :status=S_IN_ERROR;break;}break;case S_PASSED_PAIR_KEY:switch (token.type) {case Yytoken.TYPE_COLON:break;case Yytoken.TYPE_VALUE:statusStack.removeFirst();String key=(String)valueStack.removeFirst();Map parent=(Map)valueStack.getFirst();parent.put(key,token.value);status=peekStatus(statusStack);break;case Yytoken.TYPE_LEFT_SQUARE:statusStack.removeFirst();key=(String)valueStack.removeFirst();parent=(Map)valueStack.getFirst();List newArray=createArrayContainer(containerFactory);parent.put(key,newArray);status=S_IN_ARRAY;statusStack.addFirst(status);valueStack.addFirst(newArray);break;case Yytoken.TYPE_LEFT_BRACE:statusStack.removeFirst();key=(String)valueStack.removeFirst();parent=(Map)valueStack.getFirst();Map newObject=createObjectContainer(containerFactory);parent.put(key,newObject);status=S_IN_OBJECT;statusStack.addFirst(status);valueStack.addFirst(newObject);break;default :status=S_IN_ERROR;}break;case S_IN_ARRAY:switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:List val=(List)valueStack.getFirst();val.add(token.value);break;case Yytoken.TYPE_RIGHT_SQUARE:if (valueStack.size() > 1) {statusStack.removeFirst();valueStack.removeFirst();status=peekStatus(statusStack);} else status=S_IN_FINISHED_VALUE;break;case Yytoken.TYPE_LEFT_BRACE:val=(List)valueStack.getFirst();Map newObject=createObjectContainer(containerFactory);val.add(newObject);status=S_IN_OBJECT;statusStack.addFirst(status);valueStack.addFirst(newObject);break;case Yytoken.TYPE_LEFT_SQUARE:val=(List)valueStack.getFirst();List newArray=createArrayContainer(containerFactory);val.add(newArray);status=S_IN_ARRAY;statusStack.addFirst(status);valueStack.addFirst(newArray);break;default :status=S_IN_ERROR;}break;case S_IN_ERROR:throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}if (status == S_IN_ERROR) throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);} while (token.type != Yytoken.TYPE_EOF);} catch (IOException ie) {throw ie;}throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}  }
class C{  private static Map<IBlockNode,CCodeNode> createNodes(final INaviView view,final INaviFunction function,final INaviGroupNode parentGroup){  final LinkedHashMap<IBlockNode,CCodeNode> map=new LinkedHashMap<IBlockNode,CCodeNode>();  for (  final IBlockNode blockNode : function.getBasicBlocks()) {    createNode(view,function,blockNode,map,parentGroup);  }  return map;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.184 -0400",hash_original_method="58151B4DA62D82E62869FF632AE48FF5",hash_generated_method="299A3DFDE9481F7798F49A556FF9A854") private String doHttpStream(BOMInputStream bom,BOMInputStream pis,String httpContentType,boolean lenient) throws IOException {  String bomEnc=bom.getBOMCharsetName();  String xmlGuessEnc=pis.getBOMCharsetName();  String xmlEnc=getXmlProlog(pis,xmlGuessEnc);  try {    return calculateHttpEncoding(httpContentType,bomEnc,xmlGuessEnc,xmlEnc,lenient);  } catch (  XmlStreamReaderException ex) {    if (lenient) {      return doLenientDetection(httpContentType,ex);    } else {      throw ex;    }  }}  }
class C{  @POST @Path("backup") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value="Performs Codenvy backup",response=BackupInfo.class) @ApiResponses(value={@ApiResponse(code=201,message="Successfully created"),@ApiResponse(code=500,message="Server error")}) public Response backup(@DefaultValue(CDECArtifact.NAME) @QueryParam(value="artifact") @ApiParam(allowableValues=CDECArtifact.NAME) String artifactName){  try {    BackupConfig config=new BackupConfig();    config.setArtifactName(artifactName);    config.setBackupDirectory(backupDir);    BackupInfo backupInfo=facade.backup(config);    return Response.status(Response.Status.CREATED).entity(backupInfo).build();  } catch (  Exception e) {    return handleException(e);  }}  }
class C{  public void init(InputStream is){  _is=is;  _method=null;  _peek=-1;  _peekTag=-1;  _refs=null;  _replyFault=null;  if (_serializerFactory == null)   _serializerFactory=new SerializerFactory();}  }
class C{  public PersonMoneyEvent(final double time,final Id<Person> agentId,final double amount){  super(time);  this.personId=agentId;  this.amount=amount;}  }
class C{  public void ivrZoneName(String zoneName,boolean isRemove) throws NetworkDeviceControllerException {  ivrZoneName(false,zoneName,false,isRemove);}  }
class C{  protected String computeFullUrl(URL baseUrl,String link){  if (link == null || link.length() == 0) {    return null;  }  if (!link.startsWith("http")) {    if (link.startsWith("/")) {      link=baseUrl.getProtocol() + "://" + baseUrl.getAuthority()+ link;    } else {      if (link.contains(":")) {        return null;      }      String path=baseUrl.getPath();      if (!path.endsWith("/")) {        int sep=path.lastIndexOf("/");        String file=path.substring(sep + 1);        if (file.contains(".") || file.contains("?"))         path=path.substring(0,sep);      }      link=baseUrl.getProtocol() + "://" + baseUrl.getAuthority()+ path+ "/"+ link;    }  }  link=normalizeUrlEnding(link);  String l=link.toLowerCase(Locale.ROOT);  if (l.endsWith(".jpg") || l.endsWith(".jpeg") || l.endsWith(".png")|| l.endsWith(".gif")) {    return null;  }  return link;}  }
class C{  public static RoleDefinition addRoleDefinition(String roleIdentifier,TechnicalProduct tProd,DataService mgr,Long historyModificationTime) throws NonUniqueBusinessKeyException {  RoleDefinition rd=new RoleDefinition();  rd.setRoleId(roleIdentifier);  rd.setTechnicalProduct(tProd);  if (historyModificationTime != null) {    rd.setHistoryModificationTime(historyModificationTime);  }  tProd.getRoleDefinitions().add(rd);  mgr.persist(rd);  mgr.flush();  return rd;}  }
class C{  public void store(Element root){  store(root,Xml.LENGTHS,Xml.LENGTH,Xml.CAR_LENGTHS);}  }
class C{  public X509CRLEntryImpl(TBSCertList.RevokedCertificate rcert,X500Principal issuer){  this.rcert=rcert;  this.extensions=rcert.getCrlEntryExtensions();  this.issuer=issuer;}  }
class C{  @Override public int hashCode(){  return tree.hashCode();}  }
class C{  public final void writeInt(int v) throws java.io.IOException {  return;}  }
class C{  public void register(Object value){  if (JSONzip.probe) {    int integer=find(value);    if (integer >= 0) {      JSONzip.log("\nDuplicate key " + value);    }  }  if (this.length >= this.capacity) {    compact();  }  this.list[this.length]=value;  this.map.put(value,new Integer(this.length));  this.uses[this.length]=1;  if (JSONzip.probe) {    JSONzip.log("<" + this.length + " "+ value+ "> ");  }  this.length+=1;}  }
class C{  public boolean isChangeFlag(){  return changeFlag;}  }
class C{  public void testNumericField() throws Exception {  Directory dir=newDirectory();  IndexWriter iw=new IndexWriter(dir,newIndexWriterConfig(null));  Document doc=new Document();  doc.add(new NumericDocValuesField("foo",3));  iw.addDocument(doc);  DirectoryReader dr=DirectoryReader.open(iw);  LeafReader r=getOnlyLeafReader(dr);  assertNotNull(DocValues.getNumeric(r,"foo"));  assertNotNull(DocValues.getSortedNumeric(r,"foo"));  expectThrows(IllegalStateException.class,null);  expectThrows(IllegalStateException.class,null);  expectThrows(IllegalStateException.class,null);  dr.close();  iw.close();  dir.close();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 16:08:59.950 -0500",hash_original_method="05B79AA47FCD7786BCA7F2CBA77DDD75",hash_generated_method="67AC12132FAB2C2CFE4C1A9249045FFA") public Base64InputStream(InputStream in,boolean doEncode){  super(in);  this.doEncode=doEncode;  this.base64=new Base64();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected DownloaderOutputManifestDto createDownloaderOutputManifestDto(BusinessObjectData businessObjectData,StorageUnit storageUnit,String s3KeyPrefix){  DownloaderOutputManifestDto downloaderOutputManifestDto=new DownloaderOutputManifestDto();  downloaderOutputManifestDto.setNamespace(businessObjectData.getNamespace());  downloaderOutputManifestDto.setBusinessObjectDefinitionName(businessObjectData.getBusinessObjectDefinitionName());  downloaderOutputManifestDto.setBusinessObjectFormatUsage(businessObjectData.getBusinessObjectFormatUsage());  downloaderOutputManifestDto.setBusinessObjectFormatFileType(businessObjectData.getBusinessObjectFormatFileType());  downloaderOutputManifestDto.setBusinessObjectFormatVersion(String.valueOf(businessObjectData.getBusinessObjectFormatVersion()));  downloaderOutputManifestDto.setPartitionKey(businessObjectData.getPartitionKey());  downloaderOutputManifestDto.setPartitionValue(businessObjectData.getPartitionValue());  downloaderOutputManifestDto.setSubPartitionValues(businessObjectData.getSubPartitionValues());  downloaderOutputManifestDto.setBusinessObjectDataVersion(String.valueOf(businessObjectData.getVersion()));  downloaderOutputManifestDto.setStorageName(storageUnit.getStorage().getName());  List<ManifestFile> manifestFiles=new ArrayList<>();  downloaderOutputManifestDto.setManifestFiles(manifestFiles);  if (!CollectionUtils.isEmpty(storageUnit.getStorageFiles())) {    for (    StorageFile storageFile : storageUnit.getStorageFiles()) {      ManifestFile manifestFile=new ManifestFile();      manifestFiles.add(manifestFile);      manifestFile.setFileName(storageFile.getFilePath().replace(s3KeyPrefix,""));      manifestFile.setFileSizeBytes(storageFile.getFileSizeBytes());      manifestFile.setRowCount(storageFile.getRowCount());    }  }  HashMap<String,String> attributes=new HashMap<>();  if (!CollectionUtils.isEmpty(businessObjectData.getAttributes())) {    for (    Attribute attribute : businessObjectData.getAttributes()) {      attributes.put(attribute.getName(),attribute.getValue());    }  }  downloaderOutputManifestDto.setAttributes(attributes);  downloaderOutputManifestDto.setBusinessObjectDataParents(businessObjectData.getBusinessObjectDataParents());  downloaderOutputManifestDto.setBusinessObjectDataChildren(businessObjectData.getBusinessObjectDataChildren());  return downloaderOutputManifestDto;}  }
class C{  public Long deleteRoomById(long user_level,long rooms_id){  try {    if (authLevelManagement.checkAdminLevel(user_level)) {      this.deleteAllRoomsOrganisationOfRoom(rooms_id);      return this.deleteRoom(this.getRoomById(rooms_id));    }  } catch (  Exception ex2) {    log.error("[deleteRoomById] ",ex2);  }  return null;}  }
class C{  public void deleteRow(Object[] row) throws IOException {  if (!enforcing()) {    return;  }  initialize();  for (  Joiner joiner : _primaryJoinersChkDel) {    requireNoSecondaryValues(joiner,row);  }  for (  Joiner joiner : _primaryJoinersDoDel) {    joiner.deleteRows(row);  }  for (  Joiner joiner : _primaryJoinersDoNull) {    nullSecondaryValues(joiner,row);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodedocumentfragmentnodetype.class,args);}  }
class C{  protected void initializeReferenceDescriptor(ClassDescriptor clonedDescriptor,AbstractSession session){  if (aggregateKeyTable != null) {    clonedDescriptor.setDefaultTable(aggregateKeyTable);    Vector<DatabaseTable> tables=new Vector<DatabaseTable>(1);    tables.add(aggregateKeyTable);    clonedDescriptor.setTables(tables);  } else {    clonedDescriptor.setDefaultTable(getDescriptor().getDefaultTable());    clonedDescriptor.setTables(getDescriptor().getTables());    clonedDescriptor.setPrimaryKeyFields(getDescriptor().getPrimaryKeyFields());    if (clonedDescriptor.hasTargetForeignKeyMapping(session) && !isJPAIdNested(session)) {      for (      DatabaseField pkField : getDescriptor().getPrimaryKeyFields()) {        if (!getAggregateToSourceFields().containsKey(pkField.getName())) {          clonedDescriptor.getObjectBuilder().getFieldsMap().put(pkField,pkField);        }      }    }  }  if (this.getDescriptor().hasFetchGroupManager() && FetchGroupTracker.class.isAssignableFrom(clonedDescriptor.getJavaClass())) {    if (clonedDescriptor.getFetchGroupManager() == null) {      clonedDescriptor.setFetchGroupManager(new FetchGroupManager());    }  }}  }
class C{  @Override public void validate(FacesContext context,UIComponent component,Object value){  if (UIInput.isEmpty(value)) {    FacesMessage msg;    String requiredMessageStr=null;    if (component instanceof UIInput) {      requiredMessageStr=((UIInput)component).getRequiredMessage();    }    if (requiredMessageStr != null) {      msg=new FacesMessage(FacesMessage.SEVERITY_ERROR,requiredMessageStr,requiredMessageStr);    } else {      msg=MessageFactory.getMessage(context,UIInput.REQUIRED_MESSAGE_ID,MessageFactory.getLabel(context,component));    }    throw new ValidatorException(msg);  }}  }
class C{  public void putAll(Collection<V> c){  ensureCapacity(m_data.length + c.size());  for (  V e : c) {    put(e.getOsmId(),e);  }}  }
class C{  private boolean deleteConsistencyGroupSnapshot(StorageSystem storage,BlockSnapshot snap,TaskCompleter taskCompleter) throws DeviceControllerException {  boolean wasSuccess=false;  try {    callEMCRefreshIfRequired(_dbClient,_helper,storage,Arrays.asList(snap.getId()));    CIMObjectPath syncObjectPath=_cimPath.getSyncObject(storage,snap);    if (_helper.checkExists(storage,syncObjectPath,false,false) != null) {      deactivateSnapshot(storage,snap,syncObjectPath);      CIMArgument[] outArgs=new CIMArgument[5];      _helper.callModifyReplica(storage,_helper.getDeleteSnapshotSynchronousInputArguments(syncObjectPath),outArgs);      if (snap.getSettingsInstance() != null) {        Volume volume=_dbClient.queryObject(Volume.class,snap.getParent());        outArgs=new CIMArgument[5];        _helper.callModifySettingsDefineState(storage,_helper.getDeleteSettingsForSnapshotInputArguments(storage,volume,snap),outArgs);      }    }    wasSuccess=true;  } catch (  WBEMException e) {    String message=String.format("Error encountered during delete snapshot %s on array %s",snap.getId().toString(),storage.getSerialNumber());    _log.error(message,e);    ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());    taskCompleter.error(_dbClient,error);  }catch (  Exception e) {    String message=String.format("Generic exception when trying to delete snapshot %s on array %s",snap.getId().toString(),storage.getSerialNumber());    _log.error(message,e);    ServiceError error=DeviceControllerErrors.smis.methodFailed("deleteConsistencyGroupSnapshot",e.getMessage());    taskCompleter.error(_dbClient,error);  }  return wasSuccess;}  }
class C{  public void animateXY(int durationMillisX,int durationMillisY,Easing.EasingOption easingX,Easing.EasingOption easingY){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setInterpolator(Easing.getEasingFunctionFromOption(easingY));  animatorY.setDuration(durationMillisY);  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setInterpolator(Easing.getEasingFunctionFromOption(easingX));  animatorX.setDuration(durationMillisX);  if (durationMillisX > durationMillisY) {    animatorX.addUpdateListener(mListener);  } else {    animatorY.addUpdateListener(mListener);  }  animatorX.start();  animatorY.start();}  }
class C{  public Boolean isCloneFromSnapshotSupported(){  return cloneFromSnapshotSupported;}  }
class C{  public VNXeCommandJob detachLunSnap(String snapId) throws VNXeException {  StringBuilder urlBuilder=new StringBuilder(URL_INSTANCE);  urlBuilder.append(snapId);  urlBuilder.append(URL_DETACH);  _url=urlBuilder.toString();  return postRequestAsync(null);}  }
class C{  private void adjustLeft(RectF rect,float left,RectF bounds,float snapMargin,float aspectRatio,boolean topMoves,boolean bottomMoves){  float newLeft=left;  if (newLeft < 0) {    newLeft/=1.05f;    mTouchOffset.x-=newLeft / 1.1f;  }  if (newLeft < bounds.left) {    mTouchOffset.x-=(newLeft - bounds.left) / 2f;  }  if (newLeft - bounds.left < snapMargin) {    newLeft=bounds.left;  }  if (rect.right - newLeft < mMinCropWidth) {    newLeft=rect.right - mMinCropWidth;  }  if (rect.right - newLeft > mMaxCropWidth) {    newLeft=rect.right - mMaxCropWidth;  }  if (newLeft - bounds.left < snapMargin) {    newLeft=bounds.left;  }  if (aspectRatio > 0) {    float newHeight=(rect.right - newLeft) / aspectRatio;    if (newHeight < mMinCropHeight) {      newLeft=Math.max(bounds.left,rect.right - mMinCropHeight * aspectRatio);      newHeight=(rect.right - newLeft) / aspectRatio;    }    if (newHeight > mMaxCropHeight) {      newLeft=Math.max(bounds.left,rect.right - mMaxCropHeight * aspectRatio);      newHeight=(rect.right - newLeft) / aspectRatio;    }    if (topMoves && bottomMoves) {      newLeft=Math.max(newLeft,Math.max(bounds.left,rect.right - bounds.height() * aspectRatio));    } else {      if (topMoves && rect.bottom - newHeight < bounds.top) {        newLeft=Math.max(bounds.left,rect.right - (rect.bottom - bounds.top) * aspectRatio);        newHeight=(rect.right - newLeft) / aspectRatio;      }      if (bottomMoves && rect.top + newHeight > bounds.bottom) {        newLeft=Math.max(newLeft,Math.max(bounds.left,rect.right - (bounds.bottom - rect.top) * aspectRatio));      }    }  }  rect.left=newLeft;}  }
class C{  public static int nextObjectId(){  return nextObjectId;}  }
class C{  protected VarNode createSidVar(){  final VarNode var=new VarNode("-sid-" + constantVarID++);  return var;}  }
class C{  private void removeDevice(Versioned<DeviceSyncRepresentation> dev){  try {    cntDeviceRemovedFromStore.updateCounterWithFlush();    storeClient.delete(dev.getValue().getKey(),dev.getVersion());  } catch (  ObsoleteVersionException e) {  }catch (  SyncException e) {    cntSyncException.updateCounterWithFlush();    logger.error("Failed to remove device entry for " + dev.toString() + " from store.",e);  }}  }
class C{  public final void connect() throws RcsPermissionDeniedException {  if (!sApiCompatible) {    try {      sApiCompatible=mRcsServiceControl.isCompatible(this);      if (!sApiCompatible) {        throw new RcsPermissionDeniedException("The TAPI client version of the file transfer service is not compatible with the TAPI service implementation version on this device!");      }    } catch (    RcsServiceException e) {      throw new RcsPermissionDeniedException("The compatibility of TAPI client version with the TAPI service implementation version of this device cannot be checked for the file transfer service!",e);    }  }  Intent serviceIntent=new Intent(IFileTransferService.class.getName());  serviceIntent.setPackage(RcsServiceControl.RCS_STACK_PACKAGENAME);  mCtx.bindService(serviceIntent,apiConnection,0);}  }
class C{  public int currentFramebuffer(){  return this.framebufferId;}  }
class C{  protected Object sput(Object key,Object value,int hash){  Entry[] tab=table;  int index=hash & (tab.length - 1);  Entry first=tab[index];  Entry e=first;  for (; ; ) {    if (e == null) {      Entry newEntry=new Entry(hash,key,value,first);      tab[index]=newEntry;      if (++count >= threshold)       rehash(); else       recordModification(newEntry);      return null;    } else     if (e.hash == hash && eq(key,e.key)) {      Object oldValue=e.value;      e.value=value;      return oldValue;    } else     e=e.next;  }}  }
class C{  private void handleIllegalArgumentException(Exception ex){  handleGenericException(ex);}  }
class C{  public static boolean createFolder(File targetFolder){  if (targetFolder.exists()) {    if (targetFolder.isDirectory())     return true;    targetFolder.delete();  }  return targetFolder.mkdirs();}  }
class C{  public static Object readDeclaredField(final Object target,final String fieldName,final boolean forceAccess) throws IllegalAccessException {  if (target == null) {    throw new IllegalArgumentException("target object must not be null");  }  Class<?> cls=target.getClass();  Field field=FieldUtils.getDeclaredField(cls,fieldName,forceAccess);  if (field == null) {    throw new IllegalArgumentException("Cannot locate declared field " + cls.getName() + "."+ fieldName);  }  return FieldUtils.readField(field,target);}  }
class C{  public ServiceCall<Classification> classify(final String classifierId,final String text){  Validator.isTrue((classifierId != null) && !classifierId.isEmpty(),"classifierId cannot be null or empty");  Validator.isTrue((text != null) && !text.isEmpty(),"text cannot be null or empty");  final JsonObject contentJson=new JsonObject();  contentJson.addProperty(TEXT,text);  final String path=String.format(PATH_CLASSIFY,classifierId);  final Request request=RequestBuilder.post(path).bodyJson(contentJson).build();  return createServiceCall(request,ResponseConverterUtils.getObject(Classification.class));}  }
class C{  @Deprecated @Override public void applyConfig(final ConfigSettings config){  throw new UnsupportedOperationException();}  }
class C{  public Iterator<Field> fieldsFor(final Class<?> cls){  return buildMap(cls,true).values().iterator();}  }
class C{  protected void addSizePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ArrayTypeSpecifier_size_feature"),getString("_UI_PropertyDescriptor_description","_UI_ArrayTypeSpecifier_size_feature","_UI_ArrayTypeSpecifier_type"),TypesPackage.Literals.ARRAY_TYPE_SPECIFIER__SIZE,true,false,false,ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,null,null));}  }
class C{  private static boolean isRnc(String schemaType){  if (schemaType == null)   return false;  schemaType=schemaType.trim();  return schemaType.equals(RNC_MEDIA_TYPE) || schemaType.equals(LEGACY_RNC_MEDIA_TYPE);}  }
class C{  public Coord center(){  return _map.projection().toWGS84(_center);}  }
class C{  public X509CertificateHolder(Certificate x509Certificate){  this.x509Certificate=x509Certificate;  this.extensions=x509Certificate.getTBSCertificate().getExtensions();}  }
class C{  public void animateX(int durationMillis,Easing.EasingOption easing){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setInterpolator(Easing.getEasingFunctionFromOption(easing));  animatorX.setDuration(durationMillis);  animatorX.addUpdateListener(mListener);  animatorX.start();}  }
class C{  public Repeat(Integer count){  super(count);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public static TextEdit format(IDocument document,Map javaFormattingPrefs,Map javaScriptFormattingPrefs,String[] originalJsniMethods){  TextEdit combinedEdit=new MultiTextEdit();  try {    ITypedRegion[] regions=TextUtilities.computePartitioning(document,GWTPartitions.GWT_PARTITIONING,0,document.getLength(),false);    int i=0;    for (    ITypedRegion region : regions) {      if (region.getType().equals(GWTPartitions.JSNI_METHOD)) {        String originalJsniMethod=null;        if (originalJsniMethods != null && i < originalJsniMethods.length) {          originalJsniMethod=originalJsniMethods[i];        }        TextEdit edit=format(document,new TypedPosition(region),javaFormattingPrefs,javaScriptFormattingPrefs,originalJsniMethod);        if (edit != null) {          combinedEdit.addChild(edit);        }        i++;      }    }    return combinedEdit;  } catch (  BadLocationException e) {    GWTPluginLog.logError(e);    return null;  }}  }
class C{  public void onTcpClosed(PseudoTCPBase tcp,IOException e){  if (e != null) {    logger.log(Level.SEVERE,"PseudoTcp closed: " + e);  } else {    logger.log(Level.FINE,"PseudoTcp closed");  }  runReceive=false;  runClock=false;  this.exception=e;  releaseAllLocks();  cancelClockTask(true);}  }
class C{  public static List<TestCase> extractSequences(final String packageToBeConsidered,final Class<?>... targetClasses){  if (packageToBeConsidered == null) {    throw new NullPointerException("Name of the package to be considered must not be null");  }  if (targetClasses == null || targetClasses.length == 0) {    throw new IllegalArgumentException("No targets for sequence extraction specified");  }  final Collection<String> classes=getPossibleCandidates(packageToBeConsidered);  final ArrayList<TestCase> carvedSequences=new ArrayList<TestCase>();  CarvingTestRunner testRunner;  Class<?> clazz;  TestCase carvedSequence;  for (  final String className : classes) {    try {      clazz=Class.forName(Utils.getClassNameFromResourcePath(className));      if (isJUnitTestClass(clazz)) {        try {          testRunner=new CarvingTestRunner(clazz,targetClasses);          testRunner.run(new RunNotifier());          carvedSequence=testRunner.getCarvedTest();          if (carvedSequence == null) {            logger.warn("For some reason, no carving took place for test class " + className);          } else {            carvedSequences.add(carvedSequence);          }        } catch (        final InitializationError e) {          logger.error("An error occurred while initializing CarvingTestRunner for test class " + className,e);        }      }    } catch (    final Throwable e) {      logger.error("Couldn't get class instance of class " + className,e);    }  }  return carvedSequences;}  }
class C{  private void fillFromDir(PsiDirectory targetDir,@Nullable InsertHandler<LookupElement> insertHandler){  if (targetDir != null) {    PsiFile initPy=targetDir.findFile(PyNames.INIT_DOT_PY);    if (initPy instanceof PyFile) {      PyModuleType moduleType=new PyModuleType((PyFile)initPy);      ProcessingContext context=new ProcessingContext();      context.put(PyType.CTX_NAMES,myNamesAlready);      Object[] completionVariants=moduleType.getCompletionVariants("",getElement(),context);      if (insertHandler != null) {        replaceInsertHandler(completionVariants,insertHandler);      }      myObjects.addAll(Arrays.asList(completionVariants));    } else {      myObjects.addAll(PyModuleType.getSubModuleVariants(targetDir,myElement,myNamesAlready));    }  }}  }
class C{  private boolean isStandardTextRepresentationClass(){  return isRepresentationClassReader() || String.class.equals(representationClass) || isRepresentationClassCharBuffer()|| char[].class.equals(representationClass);}  }
class C{  public Vec2D projectOnto(Vec2D otherVector){  return otherVector.multiply(dot(otherVector) / otherVector.dot(otherVector));}  }
class C{  public void add(int index,E element){  insertElementAt(element,index);}  }
class C{  public void add(Object o){  int n=map.getMappedIndex(o);  vector.set(n);}  }
class C{  public boolean createFile(String path){  try {    File tmpFile=new File(activity.getCacheDir() + path);    if (!tmpFile.getParentFile().exists())     tmpFile.getParentFile().mkdirs();    tmpFile.createNewFile();    FileInputStream fis=new FileInputStream(tmpFile);    mDBApi.putFile(path,fis,0,null,null);    fis.close();  } catch (  DropboxException e) {    e.printStackTrace();    return false;  }catch (  IOException e) {    e.printStackTrace();  }  return true;}  }
class C{  @GET @Controller @Produces("text/html") @Path("view1/{id}") public String view1(@PathParam("id") String id){  final Book book=new Book();  book.setId(id);  book.setAuthor("Some author");  book.setTitle("Some title");  book.setIsbn("Some ISBN");  models.put("book",book);  return "book.jsp";}  }
class C{  private static byte[] makeRandomChallenge() throws AuthenticationException {  if (RND_GEN == null) {    throw new AuthenticationException("Random generator not available");  }  final byte[] rval=new byte[8];synchronized (RND_GEN) {    RND_GEN.nextBytes(rval);  }  return rval;}  }
class C{  public void testBug25009() throws Exception {  if (!versionMeetsMinimum(4,1)) {    return;  }  Properties props=new Properties();  props.setProperty("allowMultiQueries","true");  Connection multiConn=getConnectionWithProps(props);  createTable("testBug25009","(field1 INT)");  try {    Statement multiStmt=multiConn.createStatement();    multiStmt.execute("SELECT 1;SET @a=1; SET @b=2; SET @c=3; INSERT INTO testBug25009 VALUES (1)");    assertEquals(-1,multiStmt.getUpdateCount());    this.rs=multiStmt.getResultSet();    assertTrue(this.rs.next());    assertEquals(multiStmt.getMoreResults(),false);    for (int i=0; i < 3; i++) {      assertEquals(0,multiStmt.getUpdateCount());      assertEquals(multiStmt.getMoreResults(),false);    }    assertEquals(1,multiStmt.getUpdateCount());    this.rs=multiStmt.executeQuery("SELECT field1 FROM testBug25009");    assertTrue(this.rs.next());    assertEquals(1,this.rs.getInt(1));  }  finally {    if (multiConn != null) {      multiConn.close();    }  }}  }
class C{  public void clear(String className){  instructionMap.remove(className);}  }
class C{  public Matrix4 multiplyByMatrix(double m11,double m12,double m13,double m14,double m21,double m22,double m23,double m24,double m31,double m32,double m33,double m34,double m41,double m42,double m43,double m44){  double[] m=this.m;  double mr1, mr2, mr3, mr4;  mr1=m[0];  mr2=m[1];  mr3=m[2];  mr4=m[3];  m[0]=(mr1 * m11) + (mr2 * m21) + (mr3 * m31)+ (mr4 * m41);  m[1]=(mr1 * m12) + (mr2 * m22) + (mr3 * m32)+ (mr4 * m42);  m[2]=(mr1 * m13) + (mr2 * m23) + (mr3 * m33)+ (mr4 * m43);  m[3]=(mr1 * m14) + (mr2 * m24) + (mr3 * m34)+ (mr4 * m44);  mr1=m[4];  mr2=m[5];  mr3=m[6];  mr4=m[7];  m[4]=(mr1 * m11) + (mr2 * m21) + (mr3 * m31)+ (mr4 * m41);  m[5]=(mr1 * m12) + (mr2 * m22) + (mr3 * m32)+ (mr4 * m42);  m[6]=(mr1 * m13) + (mr2 * m23) + (mr3 * m33)+ (mr4 * m43);  m[7]=(mr1 * m14) + (mr2 * m24) + (mr3 * m34)+ (mr4 * m44);  mr1=m[8];  mr2=m[9];  mr3=m[10];  mr4=m[11];  m[8]=(mr1 * m11) + (mr2 * m21) + (mr3 * m31)+ (mr4 * m41);  m[9]=(mr1 * m12) + (mr2 * m22) + (mr3 * m32)+ (mr4 * m42);  m[10]=(mr1 * m13) + (mr2 * m23) + (mr3 * m33)+ (mr4 * m43);  m[11]=(mr1 * m14) + (mr2 * m24) + (mr3 * m34)+ (mr4 * m44);  mr1=m[12];  mr2=m[13];  mr3=m[14];  mr4=m[15];  m[12]=(mr1 * m11) + (mr2 * m21) + (mr3 * m31)+ (mr4 * m41);  m[13]=(mr1 * m12) + (mr2 * m22) + (mr3 * m32)+ (mr4 * m42);  m[14]=(mr1 * m13) + (mr2 * m23) + (mr3 * m33)+ (mr4 * m43);  m[15]=(mr1 * m14) + (mr2 * m24) + (mr3 * m34)+ (mr4 * m44);  return this;}  }
class C{  public XmlDocument(){  m_domDoc=null;}  }
class C{  @Override public IBinder onBind(Intent intent){  return sSyncAdapter.getSyncAdapterBinder();}  }
class C{  private Type(final int sort,final char[] buf,final int off,final int len){  this.sort=sort;  this.buf=buf;  this.off=off;  this.len=len;}  }
class C{  public CharBuffer insert(int offset,char ch){  return insert(offset,String.valueOf(ch));}  }
class C{  public boolean isSetPersist(){  return EncodingUtils.testBit(__isset_bitfield,__PERSIST_ISSET_ID);}  }
class C{  @Nonnull public BugInstance addReferencedField(FieldAnnotation fa){  addField(fa);  return this;}  }
class C{  public boolean addToErrorList(DownloadInfoRunnable downloadInfoRunnable){  return mErrorList.add(downloadInfoRunnable);}  }
class C{  public static ReilInstruction createMod(final long offset,final OperandSize firstSize,final String firstValue,final OperandSize secondSize,final String secondValue,final OperandSize thirdSize,final String thirdValue){  return createTrinaryInstruction(ReilHelpers.OPCODE_MOD,new CAddress(offset),firstSize,firstValue,secondSize,secondValue,thirdSize,thirdValue);}  }
class C{  public static void writeTo(MimeMessage message,OutputStream headerOs,OutputStream bodyOs,String[] ignoreList) throws IOException, MessagingException {  MimeMessage testMessage=message;  if (message instanceof MimeMessageCopyOnWriteProxy) {    MimeMessageCopyOnWriteProxy wr=(MimeMessageCopyOnWriteProxy)message;    testMessage=wr.getWrappedMessage();  }  if (testMessage instanceof MimeMessageWrapper) {    MimeMessageWrapper wrapper=(MimeMessageWrapper)testMessage;    if (!wrapper.isModified()) {      wrapper.writeTo(headerOs,bodyOs,ignoreList);      return;    }  }  writeToInternal(message,headerOs,bodyOs,ignoreList);}  }
class C{  public void createChain(Vector2[] vertices){  Vec2[] v=new Vec2[vertices.length];  for (int i=0; i < vertices.length; i++) {    v[i]=new Vec2(vertices[i].x,vertices[i].y);  }  shape.createChain(v,v.length);  isLooped=false;}  }
class C{  public boolean visitPredicate(ExpressionOwner owner,Expression pred){  return true;}  }
class C{  public CountedByteOutputStream(OutputStream out){  super(out);  count=0;}  }
class C{  public BundleCapabilityContainerTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  private List<Header> buildTableHeadersForSerialization(List<Integer> tableOrdering){  List<Integer> finalTableOrdering=this.generateTableOrdering(tableOrdering);  List<Header> tableHeaders=new ArrayList<Header>(this.numTables());  int tableOffset=Offset.tableRecordBegin.offset + this.numTables() * Offset.tableRecordSize.offset;  for (  Integer tag : finalTableOrdering) {    Table table=this.tables.get(tag);    if (table != null) {      tableHeaders.add(new Header(tag,table.calculatedChecksum(),tableOffset,table.header().length()));      tableOffset+=(table.dataLength() + 3) & ~3;    }  }  return tableHeaders;}  }
class C{  protected Attribute(final String type){  this.type=type;}  }
class C{  public static boolean isChild(final CommandName parent,final CommandName name){  if (name instanceof NestedCommandNameImpl) {    return parent.equals(((NestedCommandNameImpl)name).parent);  }  if (parent == CMD_ROOT) {    return true;  }  return false;}  }
class C{  public AbCompassView(Context context){  this(context,null);}  }
class C{  @Override protected void preProcessRow(){  super.preProcessRow();  rowinfo.update(getRown());  unfilterRow();  rowinfo.updateBuf(rowUnfiltered,rowinfo.bytesRow + 1);}  }
class C{  public void deleteRow(Value[] current) throws SQLException {  StatementBuilder buff=new StatementBuilder("DELETE FROM ");  appendTableName(buff);  appendKeyCondition(buff);  PreparedStatement prep=conn.prepareStatement(buff.toString());  setKey(prep,1,current);  int count=prep.executeUpdate();  if (count != 1) {    throw DbException.get(ErrorCode.NO_DATA_AVAILABLE);  }}  }
class C{  public FgsMbRunner(GraphWrapper dagWrapper,KnowledgeBoxModel knowledgeBoxModel,Parameters params){  super(dagWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  public MessageBuilder appendDecoration(String message,MessageDecoration... decorations){  for (  MessageDecoration decoration : decorations) {    strBuilder.append(decoration.getPrefix());  }  strBuilder.append(message);  for (  MessageDecoration decoration : decorations) {    strBuilder.append(decoration.getSuffix());  }  return this;}  }
class C{  public SetPublishingModeResponse SetPublishingMode(SetPublishingModeRequest req) throws ServiceFaultException, ServiceResultException {  return (SetPublishingModeResponse)channel.serviceRequest(req);}  }
class C{  public static Test suite(){  return (new TestSuite(DynamicAddITCase.class));}  }
class C{  public static <T extends IIdentifyable>T checkId(@NonNull T item){  if (item.getIdentifier() == -1) {    item.withIdentifier(idDistributor.incrementAndGet());  }  return item;}  }
class C{  public DefaultHttpRequest(HttpHeaders headers,boolean keepAlive){  this.headers=requireNonNull(headers,"headers");  this.keepAlive=keepAlive;}  }
class C{  protected void assertSame(String regexp) throws IOException {  RegexpQuery docValues=new RegexpQuery(new Term(fieldName,regexp),RegExp.NONE);  docValues.setRewriteMethod(new DocValuesRewriteMethod());  RegexpQuery inverted=new RegexpQuery(new Term(fieldName,regexp),RegExp.NONE);  TopDocs invertedDocs=searcher1.search(inverted,25);  TopDocs docValuesDocs=searcher2.search(docValues,25);  CheckHits.checkEqual(inverted,invertedDocs.scoreDocs,docValuesDocs.scoreDocs);}  }
class C{  public Set<Map.Entry<String,Object>> valueSet(){  return mValues.entrySet();}  }
class C{  public static List<String> readNormalizeCharacters(String line){  List<String> normalizedChars=new ArrayList<String>();  int i=0;  while (i < line.length()) {    Tuple2<String,Integer> normalizedCharAndLength=readNormalizeCharAt(line,i);    String c=normalizedCharAndLength._1;    int length=normalizedCharAndLength._2;    normalizedChars.add(c);    i+=length;  }  return normalizedChars;}  }
class C{  @Override public void run(){  amIActive=true;  String DEMHeader=null;  String watershedHeader=null;  String outputHeader=null;  int progress=0;  double z=0;  int row, col;  int rows=0;  int cols=0;  int i;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      DEMHeader=args[i];    } else     if (i == 1) {      watershedHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((DEMHeader == null) || (watershedHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(DEMHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    double DEM_noData=DEM.getNoDataValue();    WhiteboxRaster watersheds=new WhiteboxRaster(watershedHeader,"r");    if (watersheds.getNumberRows() != rows || watersheds.getNumberColumns() != cols) {      showFeedback("The input images must be the same dimension, i.e. number of " + "rows and columns.");      return;    }    double watersheds_noData=watersheds.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",DEMHeader,WhiteboxRaster.DataType.FLOAT,DEM_noData,0);    output.setPreferredPalette("spectrum.pal");    int minWatershedVal=9999999;    int maxWatershedVal=-9999999;    double[] watershedData;    updateProgress("Loop 1 of 3",0);    for (row=0; row < rows; row++) {      watershedData=watersheds.getRowValues(row);      for (col=0; col < cols; col++) {        if (watershedData[col] != watersheds_noData && watershedData[col] > 0) {          if (watershedData[col] < minWatershedVal) {            minWatershedVal=(int)watershedData[col];          }          if (watershedData[col] > maxWatershedVal) {            maxWatershedVal=(int)watershedData[col];          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 3",progress);    }    int numWatersheds=maxWatershedVal - minWatershedVal + 1;    double[][] elevations=new double[3][numWatersheds];    for (i=0; i < numWatersheds; i++) {      elevations[0][i]=9999999;      elevations[1][i]=-9999999;    }    double[] data;    int watershedVal;    updateProgress("Loop 2 of 3",0);    for (row=0; row < rows; row++) {      watershedData=watersheds.getRowValues(row);      data=DEM.getRowValues(row);      for (col=0; col < cols; col++) {        if (watershedData[col] != watersheds_noData && watershedData[col] > 0) {          watershedVal=(int)watershedData[col];          z=data[col];          if (z != DEM_noData) {            if (z < elevations[0][watershedVal - minWatershedVal]) {              elevations[0][watershedVal - minWatershedVal]=z;            }            if (z > elevations[1][watershedVal - minWatershedVal]) {              elevations[1][watershedVal - minWatershedVal]=z;            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 2 of 3",progress);    }    for (i=0; i < numWatersheds; i++) {      elevations[2][i]=elevations[1][i] - elevations[0][i];    }    updateProgress("Loop 3 of 3",0);    for (row=0; row < rows; row++) {      watershedData=watersheds.getRowValues(row);      data=DEM.getRowValues(row);      for (col=0; col < cols; col++) {        if (watershedData[col] != watersheds_noData && watershedData[col] > 0) {          watershedVal=(int)watershedData[col];          z=data[col];          if (z != DEM_noData) {            i=watershedVal - minWatershedVal;            output.setValue(row,col,(z - elevations[0][i]) / elevations[2][i] * 100);          } else {            output.setValue(row,col,DEM_noData);          }        } else {          output.setValue(row,col,DEM_noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 3 of 3",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    watersheds.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static GdbInfoLine parse(GdbOutput gdbOutput) throws GdbParseException {  String output=gdbOutput.getOutput();  Matcher matcher=GDB_INFO_LINE.matcher(output);  if (matcher.find()) {    String lineNumber=matcher.group(1);    String file=matcher.group(2);    return new GdbInfoLine(new LocationImpl(file,Integer.parseInt(lineNumber)));  }  matcher=GDB_LINE_OUT_OF_RANGE.matcher(output);  if (matcher.find()) {    String lineNumber=matcher.group(1);    String file=matcher.group(2);    return new GdbInfoLine(new LocationImpl(file,Integer.parseInt(lineNumber)));  }  throw new GdbParseException(GdbInfoLine.class,output);}  }
class C{  public synchronized void connect() throws SQLException {  super.connect();}  }
class C{  public DHPrivateKeySpec(BigInteger x,BigInteger p,BigInteger g){  this.x=x;  this.p=p;  this.g=g;}  }
class C{  @Override public void beginProcessTokens(){  tokentuple=new ArrayList<String>();  stokentuple=new ArrayList<HashMap<String,ArrayList<String>>>();}  }
class C{  @Override public void replaceTextRange(int start,int replaceLength,String text){  int length=text.length();  if (length != replaceLength || start + length > data.length())   return;  data.replace(start,start + length,text);}  }
class C{  public void start(){  ps.println("package games.stendhal.client.script;");  ps.println("import games.stendhal.client.scripting.*;");  ps.println("/**");  ps.println(" * TO" + "DO: write documentation");  ps.println(" * ");  ps.println(" * @author recorded by " + User.get().getName());  ps.println(" */");  ps.println("public class " + classname + " extends ClientScriptImpl {");  ps.println("");  ps.println("\t@Override");  ps.println("\tpublic void run(String args) {");  lastTimestamp=System.currentTimeMillis();}  }
class C{  private static void bidirectionalOverlapHelper(ByteKeyRange left,ByteKeyRange right,boolean result){  assertEquals(String.format("%s overlaps %s",left,right),result,left.overlaps(right));  assertEquals(String.format("%s overlaps %s",right,left),result,right.overlaps(left));}  }
class C{  public Task<BlockSnapshotRestRep> activate(URI id){  return postTask(getIdUrl() + "/activate",id);}  }
class C{  protected IV<?,?>[] resolveTerms(final URI[] terms) throws Exception {  final BigdataValueFactory vf=database.getValueFactory();  final BigdataValue[] values=new BigdataValue[terms.length];  for (int i=0; i < terms.length; i++) {    values[i]=vf.asValue(terms[i]);  }  database.addTerms(values);  final IV<?,?>[] ivs=new IV[terms.length];  for (int i=0; i < values.length; i++) {    ivs[i]=values[i].getIV();  }  return ivs;}  }
class C{  @Override public void onGuiClosed(){  Keyboard.enableRepeatEvents(false);}  }
class C{  public static <K,V>Map<K,V> singletonMap(K key,V value){  return new SingletonMap<>(key,value);}  }
class C{  private long bytesToLong(byte[] bytes){  return ((bytes[7] & 0xffL) << 56) | ((bytes[6] & 0xffL) << 48) | ((bytes[5] & 0xffL) << 40)| ((bytes[4] & 0xffL) << 32)| ((bytes[3] & 0xffL) << 24)| ((bytes[2] & 0xffL) << 16)| ((bytes[1] & 0xffL) << 8)| ((bytes[0] & 0xffL));}  }
class C{  public static RefactoringStatus createWarningStatus(String msg){  return createStatus(WARNING,msg,null,null,RefactoringStatusEntry.NO_CODE,null);}  }
class C{  private void removeStale(){  PhantomReferenceElement<E> ref;  while ((ref=(PhantomReferenceElement<E>)refQ.poll()) != null) {    store.remove(ref);    onGc(ref.get());  }}  }
class C{  @SuppressWarnings({"ObjectEquality"}) public void release(SB builder){  if (this.builder == builder) {    builder.setLength(0);    used=false;  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (begin: ");  result.append(begin);  result.append(", end: ");  result.append(end);  result.append(')');  return result.toString();}  }
class C{  public AABorder(){  super(new Insets(TOP,LEFT,BOTTOM,RIGHT),NPHelper.createNinePatch(Launch.class.getResource("imgs/np/225.9.png"),false));}  }
class C{  @Override public float floatValue(){  return (float)numerator / (float)denominator;}  }
class C{  public Date convertStringToDate(final String dateInString) throws ParseException {  final SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");  final Date stringToDate=sdf.parse(dateInString);  return stringToDate;}  }
class C{  public static AllowFilter instance(){  return INSTANCE;}  }
class C{  private void processEditionMode(){  boolean isEnabled;  if (null != mSwitchDeletionMenuItem) {    if (!isUserAdmin()) {      isEnabled=false;    } else     if (1 == mAdapter.getItemsCount()) {      isEnabled=false;    } else {      isEnabled=true;    }    mSwitchDeletionMenuItem.setVisible(isEnabled);    mSwitchDeletionMenuItem.setEnabled(isEnabled);  }}  }
class C{  public UnionIterator(Iterable<? extends E>... args){  this(Arrays.asList(args));}  }
class C{  public void clearListeners(){  listeners=new ArrayList<T>();}  }
class C{  public Builder withAutoScaleDownBalancedByAttributeName(String name){  this.autoScaleDownBalancedByAttributeName=name;  return this;}  }
class C{  private void doAcquireShared(long arg){  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        long r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          if (interrupted)           selfInterrupt();          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  protected final Object clone(){  return this;}  }
class C{  public void installation(Object installation){  installations.add(extension.project.file(installation));}  }
class C{  protected Rectangle lineToRect(Shape a,int line){  Rectangle r=null;  updateMetrics();  if (metrics != null) {    Rectangle alloc=a.getBounds();    lineHeight=host != null ? host.getLineHeight() : lineHeight;    r=new Rectangle(alloc.x,alloc.y + line * lineHeight,alloc.width,lineHeight);  }  return r;}  }
class C{  protected void onStructEnd(final Object obj,final Field field,final Bin annotation){}  }
class C{  public static Drawable bitmapToDrawable(@SuppressWarnings("UnusedParameters") Context mContext,Bitmap bitmap){  return new BitmapDrawable(bitmap);}  }
class C{  public noframes removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public void toggleAccess(boolean b){  MSBAccess=!MSBAccess;}  }
class C{  public MariaDbX509KeyManager(KeyStore keyStore,char[] pwd) throws KeyStoreException {  super();  Enumeration<String> aliases=keyStore.aliases();  while (aliases.hasMoreElements()) {    String alias=aliases.nextElement();    if (keyStore.entryInstanceOf(alias,KeyStore.PrivateKeyEntry.class)) {      try {        privateKeyHash.put(alias,(KeyStore.PrivateKeyEntry)keyStore.getEntry(alias,new KeyStore.PasswordProtection(pwd)));      } catch (      UnrecoverableEntryException unrecoverableEntryEx) {      }catch (      NoSuchAlgorithmException noSuchAlgorithmEx) {      }    }  }}  }
class C{  public static long ceil(double value){  return Math.round(Math.ceil(value));}  }
class C{  public void visitJumpInsn(int opcode,Label label){  if (mv != null) {    mv.visitJumpInsn(opcode,label);  }}  }
class C{  public GridBoundedConcurrentOrderedSet(int max,Comparator<? super E> comp){  super(comp);  assert max > 0;  this.max=max;}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.topic_like_tv:    if (!added) {      this.topicEla.addView(this.addIv);      this.added=true;      this.likeTv.setTextColor(likeAddedColor);      this.omitTv.setText(this.getString(this.getOmitVieStringFormatId(),Constant.AVATARS.length + 1));    } else {      this.topicEla.removeView(this.addIv);      this.added=false;      this.likeTv.setTextColor(likeColor);      this.omitTv.setText(this.getString(this.getOmitVieStringFormatId(),Constant.AVATARS.length));    }  break;case R.id.topic_share_tv:break;case R.id.topic_chat_tv:break;}}  }
class C{  public String returnType(){  if (!atEnd()) {    throw new InternalError("Illegal use of SignatureIterator");  }  return sig.substring(idx + 1,sig.length());}  }
class C{  public Pair(final S first,final T second){  this.first=first;  this.second=second;}  }
class C{  public boolean filterResult(long node,SmallArrayBasedLongToDoubleMap[] socialProofs){  for (  ResultFilter resultFilter : resultFilterSet) {    resultFilter.inputCounter.incr();    if (resultFilter.filterResult(node,socialProofs)) {      resultFilter.filteredCounter.incr();      return true;    }  }  return false;}  }
class C{  private void resize(int newSize){  Object[] keys=_keys;  int values[]=_values;  _keys=new Object[newSize];  _values=new int[newSize];  _size=0;  _prime=getBiggestPrime(_keys.length);  for (int i=keys.length - 1; i >= 0; i--) {    Object key=keys[i];    if (key != null) {      put(key,values[i],true);    }  }}  }
class C{  @PropertyUpdate(properties={"buffer.minOldSpaceOccupancy","buffer.maxOldSpaceOccupancy","buffer.minOldSpaceOccupancyActiveTillOldGenSize","buffer.maxOldSpaceOccupancyActiveFromOldGenSize"}) protected void updateBufferSizeAndRelated(){  this.maxSize.set(bufferProperties.getInitialBufferSize());  this.objectSizes.setObjectSecurityExpansionRate(bufferProperties.getObjectSecurityExpansionRate(maxSize.get()));  this.flagsSetOnBytes=bufferProperties.getFlagsSetOnBytes(this.maxSize.get());}  }
class C{  public void add(int position,@NonNull T item){synchronized (lock) {    if (items == null) {      items=new ArrayList<>();    }    items.add(position,item);  }  if (notifyOnChange) {    notifyItemInserted(position);  }}  }
class C{  public static MemFileChannel newChannel(){  return new MemFileChannel();}  }
class C{  private byte radiansToBrads(double angleRadians){  return (byte)Math.round(angleRadians * 128 / Math.PI);}  }
class C{  public static long doubleAsLongBits(double number){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return -1;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:52.199 -0500",hash_original_method="CE2F7F897A262F67EB6F40C6D613EBB1",hash_generated_method="FEC6BA4F7A6D19163BF63B509F6E91D8") @Override public void onNdefPushComplete(){  NfcAdapter.OnNdefPushCompleteCallback callback=null;synchronized (NfcActivityManager.this) {    for (    NfcActivityState state : mNfcState.values()) {      if (state.resumed) {        callback=state.onNdefPushCompleteCallback;      }    }  }  if (callback != null) {    callback.onNdefPushComplete(mDefaultEvent);  }}  }
class C{  public static String formatByteCountToBitsPerSec(long n){  double dbl=n * 8;  int unitIndex=UNIT_B;  long div=1000;  while (dbl >= div && unitIndex < unitsStopAt) {    dbl/=div;    unitIndex++;  }  int precision=UNITS_PRECISION[unitIndex];  return (formatDecimal(dbl,precision,true,true) + units_bits[unitIndex] + per_sec);}  }
class C{  private void addAssertions(TestCase test,Set<Integer> killed,Map<Integer,Mutation> mutants){  if (test.isEmpty())   return;  logger.debug("Generating assertions");  int s1=killed.size();  logger.debug("Running on original");  ExecutionResult origResult=runTest(test);  if (origResult.hasTimeout() || origResult.hasTestException()) {    logger.debug("Skipping test, as it has timeouts or exceptions");    return;  }  Map<Mutation,List<OutputTrace<?>>> mutationTraces=new HashMap<Mutation,List<OutputTrace<?>>>();  List<Mutation> executedMutants=new ArrayList<Mutation>();  for (  Integer mutationId : origResult.getTrace().getTouchedMutants()) {    if (!mutants.containsKey(mutationId)) {    } else     executedMutants.add(mutants.get(mutationId));  }  Randomness.shuffle(executedMutants);  logger.debug("Executed mutants: " + origResult.getTrace().getTouchedMutants());  int numExecutedMutants=0;  for (  Mutation m : executedMutants) {    numExecutedMutants++;    if (!TimeController.getInstance().isThereStillTimeInThisPhase()) {      logger.info("Reached maximum time to generate assertions!");      break;    }    assert (m != null);    if (MutationTimeoutStoppingCondition.isDisabled(m)) {      killed.add(m.getId());      continue;    }    if (timedOutMutations.containsKey(m)) {      if (timedOutMutations.get(m) >= Properties.MUTATION_TIMEOUTS) {        logger.debug("Skipping timed out mutant");        killed.add(m.getId());        continue;      }    }    if (exceptionMutations.containsKey(m)) {      if (exceptionMutations.get(m) >= Properties.MUTATION_TIMEOUTS) {        logger.debug("Skipping mutant with exceptions");        killed.add(m.getId());        continue;      }    }    if (Properties.MAX_MUTANTS_PER_TEST > 0 && numExecutedMutants > Properties.MAX_MUTANTS_PER_TEST)     break;    logger.debug("Running test on mutation {}",m.getMutationName());    ExecutionResult mutantResult=runTest(test,m);    int numKilled=0;    for (    Class<?> observerClass : observerClasses) {      if (mutantResult.getTrace(observerClass) == null || origResult.getTrace(observerClass) == null)       continue;      numKilled+=origResult.getTrace(observerClass).getAssertions(test,mutantResult.getTrace(observerClass));    }    List<OutputTrace<?>> traces=new ArrayList<OutputTrace<?>>(mutantResult.getTraces());    mutationTraces.put(m,traces);    if (mutantResult.hasTimeout()) {      logger.debug("Increasing timeout count!");      if (!timedOutMutations.containsKey(m)) {        timedOutMutations.put(m,1);      } else {        timedOutMutations.put(m,timedOutMutations.get(m) + 1);      }      MutationTimeoutStoppingCondition.timeOut(m);    } else     if (!mutantResult.noThrownExceptions() && origResult.noThrownExceptions()) {      logger.debug("Increasing exception count.");      if (!exceptionMutations.containsKey(m)) {        exceptionMutations.put(m,1);      } else {        exceptionMutations.put(m,exceptionMutations.get(m) + 1);      }      MutationTimeoutStoppingCondition.raisedException(m);    }    if (numKilled > 0 || mutantResult.hasTimeout() || (!mutantResult.noThrownExceptions() && origResult.noThrownExceptions())) {      killed.add(m.getId());    }  }  List<Assertion> assertions=test.getAssertions();  logger.info("Got " + assertions.size() + " assertions");  Map<Integer,Set<Integer>> killMap=new HashMap<Integer,Set<Integer>>();  int num=0;  for (  Assertion assertion : assertions) {    Set<Integer> killedMutations=new HashSet<Integer>();    for (    Mutation m : executedMutants) {      boolean isKilled=false;      if (mutationTraces.containsKey(m)) {        for (        OutputTrace<?> trace : mutationTraces.get(m)) {          if (trace.isDetectedBy(assertion)) {            isKilled=true;            break;          }        }      }      if (isKilled) {        killedMutations.add(m.getId());        assertion.addKilledMutation(m);      }    }    killMap.put(num,killedMutations);    num++;  }  int killedBefore=getNumKilledMutants(test,mutationTraces,executedMutants);  logger.debug("Need to kill mutants: " + killedBefore);  logger.debug(killMap.toString());  minimize(test,executedMutants,assertions,killMap);  int killedAfter=getNumKilledMutants(test,mutationTraces,executedMutants);  int s2=killed.size() - s1;  assert (killedBefore == killedAfter) : "Mutants killed before / after / should be: " + killedBefore + "/"+ killedAfter+ "/"+ s2+ ": "+ test.toCode();  logger.info("Mutants killed before / after / should be: " + killedBefore + "/"+ killedAfter+ "/"+ s2);  logger.info("Assertions in this test: " + test.getAssertions().size());  if (primitiveWithoutAssertion(test.getStatement(test.size() - 1))) {    logger.info("Last statement has primitive return value but no assertions: " + test.toCode());    for (    Assertion assertion : assertions) {      if (assertion instanceof PrimitiveAssertion) {        if (assertion.getStatement().equals(test.getStatement(test.size() - 1))) {          logger.debug("Adding a primitive assertion " + assertion);          test.getStatement(test.size() - 1).addAssertion(assertion);          break;        }      }    }    filterInspectorPrimitiveDuplication(test.getStatement(test.size() - 1));  }  if (test.getStatement(test.size() - 1).getAssertions().isEmpty() || justNullAssertion(test.getStatement(test.size() - 1))) {    logger.info("Last statement has no assertions: " + test.toCode());    logger.info("Assertions to choose from: " + assertions.size());    if (test.getStatement(test.size() - 1).getAssertions().isEmpty()) {      logger.debug("Last statement: " + test.getStatement(test.size() - 1).getCode());    }    if (origResult.isThereAnExceptionAtPosition(test.size() - 1))     logger.debug("Exception on last statement!");    if (justNullAssertion(test.getStatement(test.size() - 1)))     logger.debug("Just null assertions on last statement: " + test.toCode());    boolean haveAssertion=false;    for (    Assertion assertion : assertions) {      if (assertion instanceof PrimitiveAssertion) {        if (assertion.getStatement().equals(test.getStatement(test.size() - 1))) {          logger.debug("Adding a primitive assertion " + assertion);          test.getStatement(test.size() - 1).addAssertion(assertion);          haveAssertion=true;          break;        }      }    }    if (!haveAssertion) {      logger.info("Could not find a primitive assertion, continuing search");      for (      Assertion assertion : assertions) {        if (assertion instanceof NullAssertion)         continue;        if (assertion.getStatement().equals(test.getStatement(test.size() - 1))) {          logger.info("Adding an assertion: " + assertion);          test.getStatement(test.size() - 1).addAssertion(assertion);          haveAssertion=true;          break;        }      }    }    if (!haveAssertion) {      logger.info("After second round we still have no assertion");      Method inspectorMethod=null;      if (test.getStatement(test.size() - 1) instanceof MethodStatement) {        MethodStatement methodStatement=(MethodStatement)test.getStatement(test.size() - 1);        Method method=methodStatement.getMethod().getMethod();        if (method.getParameterTypes().length == 0) {          if (method.getReturnType().isPrimitive() && !method.getReturnType().equals(void.class)) {            inspectorMethod=method;          }        }      }      for (      OutputTrace<?> trace : origResult.getTraces()) {        trace.getAllAssertions(test);      }      Set<Assertion> target=new HashSet<Assertion>(test.getStatement(test.size() - 1).getAssertions());      logger.debug("Found assertions: " + target.size());      test.removeAssertions();      VariableReference targetVar=test.getStatement(test.size() - 1).getReturnValue();      if (!targetVar.isVoid()) {        logger.debug("Return value is non void: " + targetVar.getClassName());        int maxAssertions=1;        int numAssertions=0;        for (        Assertion ass : target) {          if (ass.getReferencedVariables().contains(targetVar) && !(ass instanceof NullAssertion)) {            if (ass instanceof InspectorAssertion) {              if (((InspectorAssertion)ass).inspector.getMethod().equals(inspectorMethod)) {                continue;              }            }            test.getStatement(test.size() - 1).addAssertion(ass);            logger.debug("Adding assertion " + ass.getCode());            if (++numAssertions >= maxAssertions)             break;          } else {            logger.debug("Assertion does not contain target: " + ass.getCode());          }        }        if (numAssertions == 0) {          for (          Assertion ass : target) {            if (ass.getReferencedVariables().contains(targetVar)) {              test.getStatement(test.size() - 1).addAssertion(ass);              logger.debug("Adding assertion " + ass.getCode());              if (++numAssertions >= maxAssertions)               break;            } else {              logger.debug("Assertion does not contain target: " + ass.getCode());            }          }        }      } else {        logger.debug("Return value is void");        Set<VariableReference> targetVars=test.getStatement(test.size() - 1).getVariableReferences();        int maxAssertions=1;        int numAssertions=0;        for (        Assertion ass : target) {          Set<VariableReference> vars=ass.getReferencedVariables();          vars.retainAll(targetVars);          if (!vars.isEmpty()) {            test.getStatement(test.size() - 1).addAssertion(ass);            if (++numAssertions >= maxAssertions)             break;          }        }      }      logger.info("1. Done with assertions");    }    logger.info("2. Done with assertions");    filterInspectorPrimitiveDuplication(test.getStatement(test.size() - 1));  }  if (!origResult.noThrownExceptions()) {    if (!test.getStatement(test.size() - 1).getAssertions().isEmpty()) {      logger.debug("Removing assertions after exception");      test.getStatement(test.size() - 1).removeAssertions();    }  }}  }
class C{  public void requestRedraw(){  if (Thread.currentThread() != Looper.getMainLooper().getThread()) {    this.mainThreadHandler.sendEmptyMessage(MSG_ID_REQUEST_REDRAW);    return;  }  if (!this.isWaitingForRedraw && !this.isPaused && !this.viewport.isEmpty()) {    Choreographer.getInstance().postFrameCallback(this);    this.isWaitingForRedraw=true;  }}  }
class C{  private void removeFixtureAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof BodyFixture) {      DefaultMutableTreeNode parent=(DefaultMutableTreeNode)node.getParent();      SandboxBody body=(SandboxBody)parent.getUserObject();      BodyFixture fixture=(BodyFixture)node.getUserObject();      int choice=JOptionPane.showConfirmDialog(ControlUtilities.getParentWindow(this),MessageFormat.format(Messages.getString("menu.context.fixture.remove.warning"),fixture.getUserData(),body.getName()),Messages.getString("menu.context.fixture.remove.warning.title"),JOptionPane.YES_NO_CANCEL_OPTION);      if (choice == JOptionPane.YES_OPTION) {synchronized (Simulation.LOCK) {          body.removeFixture(fixture);          if (!body.isMassExplicit()) {            body.updateMass();          }        }        this.model.removeNodeFromParent(node);      }    }  }}  }
class C{  public void removeSelectionChangedListener(SelectionChangedListener l){  table.removeSelectionChangedListener(l);}  }
class C{  public EC2Discovery(){  this(new Config.FromProperties(),new EC2ClientProvider.Smart(new AWSCredentialsFromProperties(),new Config.FromProperties()));}  }
class C{  public void unlock(final ItemStack stack){  if (Items.isKeyCreative(stack)) {    lock=Optional.empty();    getCasingWorld().markBlockForUpdate(getPosition());  } else {    getKeyFromStack(stack).ifPresent(null);  }}  }
class C{  private CellIdentityWcdma(Parcel in){  mMcc=in.readInt();  mMnc=in.readInt();  mLac=in.readInt();  mCid=in.readInt();  mPsc=in.readInt();  if (DBG)   log("CellIdentityWcdma(Parcel): " + toString());}  }
class C{  public static void printDate(PrintWriter pw,String value){  long millis=System.currentTimeMillis();  pw.write(FORMAT.format(new Date(millis)) + " " + value+ "\n");  pw.flush();}  }
class C{  public void addRosterListener(RosterListener rosterListener){  if (!rosterListeners.contains(rosterListener)) {    rosterListeners.add(rosterListener);  }}  }
class C{  public JSONException(Throwable cause){  super(cause.getMessage());  this.cause=cause;}  }
class C{  public void poweroff() throws LocalRepositoryException {  final String prefix="poweroff(): ";  _log.debug(prefix);  final String[] cmd={_SYSTOOL_CMD,_SYSTOOL_POWEROFF};  final Exec.Result result=Exec.sudo(_SYSTOOL_TIMEOUT,cmd);  checkFailure(result,prefix);}  }
class C{  public static Uri formatContactIdToUri(ContactId contactId){  if (contactId == null) {    throw new IllegalArgumentException("ContactId is null");  }  if (sRcsSettings.isTelUriFormatUsed()) {    return Uri.parse(TEL_URI_HEADER.concat(contactId.toString()));  }  return Uri.parse(SIP_URI_HEADER + contactId + "@"+ sRcsSettings.getUserProfileImsDomain()+ ";user=phone");}  }
class C{  public boolean contains(Terminal terminal){  Integer index=indices.get(terminal);  if (index == null)   throw new IllegalArgumentException("Unregistered terminal: " + terminal);  return getBit(index);}  }
class C{  public boolean isFtHttpCapAlwaysOn(){  return readBoolean(RcsSettingsData.FT_HTTP_CAP_ALWAYS_ON);}  }
class C{  public TextInputFormat(TextHolderFigure prototype,String formatName,String description,String fileExtension,boolean isMultiline){  this.prototype=prototype;  this.formatName=formatName;  this.description=description;  this.fileExtension=fileExtension;  this.isMultiline=isMultiline;}  }
class C{  public void shutdown(){  this.running=false;}  }
class C{  public static void run(AdSense adsense) throws Exception {  System.out.println("=================================================================");  System.out.println("Listing all metrics for default account");  System.out.println("=================================================================");  Metadata metrics=adsense.metadata().metrics().list().execute();  if (metrics.getItems() != null && !metrics.getItems().isEmpty()) {    for (    ReportingMetadataEntry metric : metrics.getItems()) {      boolean firstProduct=true;      StringBuilder products=new StringBuilder();      for (      String product : metric.getSupportedProducts()) {        if (!firstProduct) {          products.append(", ");        }        products.append(product);        firstProduct=false;      }      System.out.printf("Metric id \"%s\" for product(s): [%s] was found.\n",metric.getId(),products.toString());    }  } else {    System.out.println("No metrics found.");  }  System.out.println();}  }
class C{  public double canonicalForm(){  double scaleN=N.a[N.order];  for (int i=0; i < N.a.length; i++)   N.a[i]/=scaleN;  double scaleD=D.a[D.order];  for (int i=0; i < D.a.length; i++)   D.a[i]/=scaleD;  return scaleN / scaleD;}  }
class C{  public void deleteCertificate(String tenantName,String fingerprint,CertificateType certificateType) throws Exception {  getService().deleteCertificate(tenantName,fingerprint,certificateType,this.getServiceContext());}  }
class C{  @Override public boolean applyRules(Map<URI,Map<URI,Integer>> initiatorsToVolumes){  return applyVolumesToMasksUsingRules(context.storage,context.exportGroup,context.masksToUpdateWithVolumes,initiatorsToVolumes,context.exportMaskToPolicy,context.masksToUpdateWithInitiators,context.partialMasks,context.token);}  }
class C{  public SpecialInvokeExpr newSpecialInvokeExpr(Local base,SootMethodRef method){  return new JSpecialInvokeExpr(base,method,new ArrayList());}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public static void tryToRestoreAccount(String account){  File userProfile=new File(Environment.getDataDirectory().toString() + DATABASE_LOCATION);  try {    restoreUserProfile(userProfile,account);  } catch (  FileNotFoundException e) {    if (sLogger.isActivated()) {      sLogger.debug(e.getMessage());    }  }catch (  IOException e) {    if (sLogger.isActivated()) {      sLogger.debug(e.getMessage());    }    try {      FileUtils.deleteDirectory(new File(userProfile,account));    } catch (    IOException ex) {      if (sLogger.isActivated()) {        sLogger.debug(ex.getMessage());      }    }    try {      FileUtils.deleteDirectory(userProfile);    } catch (    IOException ex) {      if (sLogger.isActivated()) {        sLogger.debug(ex.getMessage());      }    }  }}  }
class C{  protected final ResultSetImpl readResultsForQueryOrUpdate(StatementImpl callingStatement,int maxRows,int resultSetType,int resultSetConcurrency,boolean streamResults,String catalog,Buffer resultPacket,boolean isBinaryEncoded,long preSentColumnCount,Field[] metadataFromCache) throws SQLException {  long columnCount=resultPacket.readFieldLength();  if (columnCount == 0) {    return buildResultSetWithUpdates(callingStatement,resultPacket);  } else   if (columnCount == Buffer.NULL_LENGTH) {    String charEncoding=null;    if (this.connection.getUseUnicode()) {      charEncoding=this.connection.getEncoding();    }    String fileName=null;    if (this.platformDbCharsetMatches) {      fileName=((charEncoding != null) ? resultPacket.readString(charEncoding,getExceptionInterceptor()) : resultPacket.readString());    } else {      fileName=resultPacket.readString();    }    return sendFileToServer(callingStatement,fileName);  } else {    com.mysql.jdbc.ResultSetImpl results=getResultSet(callingStatement,columnCount,maxRows,resultSetType,resultSetConcurrency,streamResults,catalog,isBinaryEncoded,metadataFromCache);    return results;  }}  }
class C{  public RFF_RBF(double sigma){  this(sigma,512);}  }
class C{  public void fill(Shape s){  mGraphics.fill(s);}  }
class C{  private boolean isElementIndex(int index){  return index >= 0 && index < size;}  }
class C{  public void store32(int addr,int value){  store8(addr,value >> 24);  store8(addr + 1,value >> 16);  store8(addr + 2,value >> 8);  store8(addr + 3,value);}  }
class C{  public void testConfiguratorSetterNameWithInvalidPropertyName(){  try {    AbstractJonasStandaloneLocalConfiguration.getConfiguratorSetterName("test");    fail("Non-configurator property name got accepted");  } catch (  IllegalArgumentException expected) {    assertTrue("Exception should contain " + JonasPropertySet.CONFIGURATOR_PREFIX,expected.getMessage().contains(JonasPropertySet.CONFIGURATOR_PREFIX));  }}  }
class C{  private void writeSequenceEnd() throws TException {  try {    getCurrentWriter().writeEndArray();  } catch (  IOException ex) {    throw new TTransportException(ex);  }  popContext();}  }
class C{  public IndexedPropertyDescriptor(String propertyName,Class<?> beanClass,String getterName,String setterName,String indexedGetterName,String indexedSetterName) throws IntrospectionException {  super(propertyName,beanClass,getterName,setterName);  setIndexedByName(beanClass,indexedGetterName,indexedSetterName);}  }
class C{  StunDiscoveryReport(){}  }
class C{  public int readMessages(Reader is) throws IOException {  try (OutboxAmp outbox=OutboxAmp.currentOrCreate(getManager())){    return readMessages(is,outbox);  }  finally {  }}  }
class C{  private void disableAll(){  acsTxt.setEnabled(false);  certTxt.setEnabled(false);  relTxt.setEnabled(false);  combo.setEnabled(false);  acsLbl.setEnabled(false);  certLbl.setEnabled(false);  lblLoc.setEnabled(false);  relLbl.setEnabled(false);  depCheck.setEnabled(false);  browseBtn.setEnabled(false);  newCertBtn.setEnabled(false);  location.setEnabled(false);  requiresHttpsCheck.setEnabled(false);  embedCertCheck.setEnabled(false);  certInfoTxt.setEnabled(false);}  }
class C{  private static LiteralByteString concatenateBytes(ByteString left,ByteString right){  int leftSize=left.size();  int rightSize=right.size();  byte[] bytes=new byte[leftSize + rightSize];  left.copyTo(bytes,0,0,leftSize);  right.copyTo(bytes,0,leftSize,rightSize);  return new LiteralByteString(bytes);}  }
class C{  public void checkCode(int code){  if (mCode != code) {    throw new IllegalStateException("Expected " + code + " but was: "+ this);  }}  }
class C{  @ZeppelinApi public void run(String id){  run(id,interpreterContext);}  }
class C{  private int addToFeatureVector(int vectorIndex,final double[] vector,final int sentencePosition,final List<InputWord> words){  final double[] embedding=getEmbedding(words,sentencePosition);  vectorIndex=addToVector(vectorIndex,vector,embedding);  final double[] suffix=getSuffix(words,sentencePosition);  vectorIndex=addToVector(vectorIndex,vector,suffix);  final double[] caps=getCapitalization(words,sentencePosition);  vectorIndex=addToVector(vectorIndex,vector,caps);  return vectorIndex;}  }
class C{  public A action(){  return action;}  }
class C{  public CharSequence onCreateDescription(){  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:32:11.950 -0400",hash_original_method="6035C9CB1BC41BE82E57FED6332D139D",hash_generated_method="4BD2DF9B7737E1EFC4AA0007C5528CC5") public void startMonitoring(Context context,Handler target){  mContext=context;  mCsHandler=target;  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  if (adapter != null) {    adapter.getProfileProxy(mContext,mProfileServiceListener,BluetoothProfile.PAN);  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;default :  return null;}}  }
class C{  protected ExifTag addTag(ExifTag tag){  if (tag != null) {    int ifd=tag.getIfd();    return addTag(tag,ifd);  }  return null;}  }
class C{  public TextEditModeAction(final NetworkPanel networkPanel){  super("Text",networkPanel,EditMode.TEXT);  putValue(SMALL_ICON,ResourceManager.getImageIcon("Text.png"));  putValue(SHORT_DESCRIPTION,"Text Mode (t)");  putValue(SHORT_DESCRIPTION,"Text Mode (t)");}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException {  setHints(null);  return decodeInternal(image);}  }
class C{  private static int findCodewordIndex(long symbol){  int first=0;  int upto=SYMBOL_TABLE.length;  while (first < upto) {    int mid=(first + upto) >>> 1;    if (symbol < SYMBOL_TABLE[mid]) {      upto=mid;    } else     if (symbol > SYMBOL_TABLE[mid]) {      first=mid + 1;    } else {      return mid;    }  }  return -1;}  }
class C{  public void zoomOut(){  if (_zoom > _map.minZoomLevel()) {    _zoom-=1;    _needTiles=true;  }}  }
class C{  private synchronized void removePendingAction(@Nullable PermissionsResultAction action){  for (Iterator<WeakReference<PermissionsResultAction>> iterator=mPendingActions.iterator(); iterator.hasNext(); ) {    WeakReference<PermissionsResultAction> weakRef=iterator.next();    if (weakRef.get() == action || weakRef.get() == null) {      iterator.remove();    }  }}  }
class C{  protected boolean isBouncing() throws MessagingException {  @SuppressWarnings("unchecked") Enumeration<String> enumeration=getMessageIn().getMatchingHeaderLines(new String[]{"X-fetched-from"});  int count=0;  while (enumeration.hasMoreElements()) {    String header=enumeration.nextElement();    if (header.equals(getFetchTaskName()))     count++;  }  return count >= 3;}  }
class C{  private void appendGeometryCollectionTaggedText(GeometryCollection geometryCollection,int level,Writer writer) throws IOException {  appendGeometryCollectionText(geometryCollection,level,writer);}  }
class C{  public static int EBFONT(){  return 59;}  }
class C{  public void put(StoredObject object){  storedObjects.put(object.getClass(),object);}  }
class C{  public boolean load(String fileLocation,int type){  if (mHasLoaded) {    return false;  }  String shaderCode;  try {    shaderCode=ShaderUtils.getStringFromFileInAssets(mContext,fileLocation,true);  } catch (  IOException e) {    e.printStackTrace();    mIsCompiled=false;    return false;  }  mHasLoaded=true;  mShaderId=GLES20.glCreateShader(type);  if (mShaderId == 0) {    String msg=(type == GLES20.GL_VERTEX_SHADER ? "Vertex" : "Fragment");    Log.e(TAG,"Error creating shader of type " + msg);    return false;  }  GLES20.glShaderSource(mShaderId,shaderCode);  GLES20.glCompileShader(mShaderId);  int[] compileStatus=new int[1];  GLES20.glGetShaderiv(mShaderId,GLES20.GL_COMPILE_STATUS,compileStatus,0);  mIsCompiled=(compileStatus[0] == GLES20.GL_TRUE);  if (!mIsCompiled) {    String compileError=GLES20.glGetShaderInfoLog(mShaderId);    Log.e(TAG,compileError);    GLES20.glDeleteShader(mShaderId);  }  return mIsCompiled && mHasLoaded;}  }
class C{  public List<FileShare> prepareFileSystems(FileSystemParam param,String task,TaskList taskList,Project project,VirtualArray varray,VirtualPool vpool,List<Recommendation> recommendations,VirtualPoolCapabilityValuesWrapper cosCapabilities,Boolean createInactive){  List<FileShare> preparedFileSystems=new ArrayList<>();  Iterator<Recommendation> recommendationsIter=recommendations.iterator();  while (recommendationsIter.hasNext()) {    FileRecommendation recommendation=(FileRecommendation)recommendationsIter.next();    if (recommendation.getId() != null) {      continue;    }    if (recommendation.getFileType().toString().equals(FileRecommendation.FileType.FILE_SYSTEM_DATA.toString())) {      FileShare fileShare=getPrecreatedFile(taskList,param.getLabel());      _log.info(String.format("createFileSystem --- FileShare: %1$s, StoragePool: %2$s, StorageSystem: %3$s",fileShare.getId(),recommendation.getSourceStoragePool(),recommendation.getSourceStorageSystem()));      setFileRecommendation(recommendation,fileShare,vpool,createInactive);      preparedFileSystems.add(fileShare);    }  }  return preparedFileSystems;}  }
class C{  public DriverScriptCommand(Configuration configuration,String resourcePath,DataSource dataSource,String driverModule){  super(configuration,resourcePath);  this.ds=dataSource;  this.driverModule=driverModule;}  }
class C{  public <AnnotationType extends Annotation>void register(TypeBinder<AnnotationType> typeBinder){  @Nullable AnnotatedType<AnnotationType> annotatedType=AnnotatedTypes.get(typeBinder.getAnnotationClass(),this.annotatedType);  if (annotatedType != null) {    objectBinders.add(new AnnotatedTypeBinder<>(typeBinder,annotatedType));  }}  }
class C{  public int read() throws IOException {  if (_byteBuffer != null) {    if (_byteBuffer.hasRemaining()) {      byte b=_byteBuffer.get();      return (b >= 0) ? b : read2(b);    } else {      return -1;    }  } else {    throw new IOException("Reader closed");  }}  }
class C{  public void mergeTree(ProfilingTimerNode otherRoot){  ProfilingTimerNode currentNode=current.get();  Preconditions.checkNotNull(currentNode);  mergeOrAddNode(currentNode,otherRoot);}  }
class C{  @Override public void onThreadEnd(){  _threadCount.getAndDecrement();  wake();}  }
class C{  public static double I(Instances D,int j,int k){  double I=0.0;  for (int x=0; x < D.attribute(j).numValues(); x++) {    double p_x=p(D,j,x);    for (int y=0; y < D.attribute(k).numValues(); y++) {      double p_y=p(D,k,y);      double p_xy=P(D,j,x,k,y);      I+=p_xy * Math.log(p_xy / (p_x * p_y));    }  }  return I;}  }
class C{  private void applyHeaderMask(ByteBuffer buffer){  byte[] headerMask=_format.HEADER_MASK;  for (int idx=0; idx < headerMask.length; ++idx) {    int pos=idx + _format.OFFSET_MASKED_HEADER;    byte b=(byte)(buffer.get(pos) ^ headerMask[idx]);    buffer.put(pos,b);  }}  }
class C{  private void index() throws IOException {  IndexWriter indexWriter=new IndexWriter(indexDir,new IndexWriterConfig(new WhitespaceAnalyzer()).setOpenMode(OpenMode.CREATE));  DirectoryTaxonomyWriter taxoWriter=new DirectoryTaxonomyWriter(taxoDir);  Document doc=new Document();  doc.add(new FacetField("Author","Bob"));  doc.add(new FacetField("Publish Date","2010","10","15"));  indexWriter.addDocument(config.build(taxoWriter,doc));  doc=new Document();  doc.add(new FacetField("Author","Lisa"));  doc.add(new FacetField("Publish Date","2010","10","20"));  indexWriter.addDocument(config.build(taxoWriter,doc));  doc=new Document();  doc.add(new FacetField("Author","Lisa"));  doc.add(new FacetField("Publish Date","2012","1","1"));  indexWriter.addDocument(config.build(taxoWriter,doc));  doc=new Document();  doc.add(new FacetField("Author","Susan"));  doc.add(new FacetField("Publish Date","2012","1","7"));  indexWriter.addDocument(config.build(taxoWriter,doc));  doc=new Document();  doc.add(new FacetField("Author","Frank"));  doc.add(new FacetField("Publish Date","1999","5","5"));  indexWriter.addDocument(config.build(taxoWriter,doc));  indexWriter.close();  taxoWriter.close();}  }
class C{  public synchronized boolean isConsumer(ImageConsumer ic){  return theConsumers.contains(ic);}  }
class C{  public FloatConstantOperand(float v){  value=v;  if (v == 0.f) {    offset=Entrypoints.zeroFloatField.getOffset();  } else   if (v == 1.f) {    offset=Entrypoints.oneFloatField.getOffset();  } else   if (v == 2.f) {    offset=Entrypoints.twoFloatField.getOffset();  } else {    offset=Offset.zero();  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'WifiLock' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'BEYOUND_WIFI_MANAGER' TEXT,"+ "'PACKAGE_NAME' TEXT);");}  }
class C{  public JarTypeResolver(File file) throws IOException {  if (file == null) {    throw new IllegalArgumentException("Null is not an acceptable value for file");  }  if (!file.exists() || !file.isFile()) {    throw new IllegalArgumentException("Not existing or not a file: " + file.getPath());  }  this.file=file;  JarFile jarFile=new JarFile(file.getPath());  JarEntry entry=null;  for (Enumeration<JarEntry> e=jarFile.entries(); e.hasMoreElements(); entry=e.nextElement()) {    if (entry != null && !entry.isDirectory() && entry.getName().endsWith(".class")) {      if (file.getName().startsWith(FunctionDefinitionNode.CLASS_PREFIX)) {        String name=classFileToFunctionName(entry.getName());        if (!JvmNameUtils.isSimpleName(name)) {          packages.add(JvmNameUtils.getPackagePart(name));        }        functionElements.put(name,new JarClasspathElement(this,jarFile,entry,name));      } else {        String name=entryPathToClassName(entry.getName());        if (!JvmNameUtils.isSimpleName(name)) {          packages.add(JvmNameUtils.getPackagePart(name));        }        classpathElements.put(name,new JarClasspathElement(this,jarFile,entry,name));      }    }  }  ClassPoolFactory.INSTANCE.addJar(new CompiledClassPath());}  }
class C{  public static boolean equalsIgnoreXid(OFMessage a,OFMessage b){  OFMessage.Builder mb=b.createBuilder().setXid(a.getXid());  return a.equals(mb.build());}  }
class C{  public ObjectOutputStream createObjectOutputStream(final Writer writer,final String rootNodeName) throws IOException {  return createObjectOutputStream(hierarchicalStreamDriver.createWriter(writer),rootNodeName);}  }
class C{  public Object plus(Object o){  throw new NullPointerException("Cannot execute null+" + String.valueOf(o));}  }
class C{  private static String[] tokenizeToStringArray(String str,String delimiters){  if (str == null) {    return null;  }  StringTokenizer st=new StringTokenizer(str,delimiters);  List<String> tokens=new ArrayList<String>();  while (st.hasMoreTokens()) {    String token=st.nextToken();    token=token.trim();    if (token.length() > 0) {      tokens.add(token);    }  }  return tokens.toArray(new String[tokens.size()]);}  }
class C{  public static void createPersistenceFile(IProject project) throws CoreException {  String[] persistenceFileData=new String[]{"<?xml version=\"1.0\" encoding=\"UTF-8\"?>","<persistence version=\"2.0\" xmlns=\"http://java.sun.com/xml/ns/persistence\" ","    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ","    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence ","    http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\">","  <persistence-unit name=\"JPA1\">","  </persistence-unit>","</persistence>"};  IFolder srcFolder=project.getFolder("src");  if (!srcFolder.exists()) {    srcFolder.create(true,true,null);  }  IFolder metaFolder=srcFolder.getFolder("META-INF");  if (!metaFolder.exists()) {    metaFolder.create(true,true,null);  }  IFile persistenceXml=metaFolder.getFile("persistence.xml");  if (!persistenceXml.exists()) {    String data=Joiner.on('\n').join(persistenceFileData);    InputStream is=new ByteArrayInputStream(Charset.forName("UTF-8").encode(data).array());    persistenceXml.create(is,true,null);  }}  }
class C{  private static synchronized String parseQuotedString(String s) throws UnsupportedEncodingException, CharacterCodingException {  StringBuffer result=new StringBuffer();  StringCharacterIterator iterator=new StringCharacterIterator(s);  char c=iterator.current();  while (iterator.getIndex() < iterator.getEndIndex()) {switch (c) {case '\\':{        result.append(parseEscapedSequence(iterator));        break;      }default :{      result.append(c);      break;    }}c=iterator.next();}return result.toString();}  }
class C{  public TGetter basicGetDefinedGetter(){  return definedGetter;}  }
class C{  public void load(InputStream in) throws IOException {  InputStreamReader reader=new InputStreamReader(in);  BufferedReader data=new BufferedReader(reader);  for (String ln=data.readLine(); ln != null; ln=data.readLine()) {    if (ln.startsWith("PUBLIC")) {      int len=ln.length();      int i=6;      while ((i < len) && (ln.charAt(i) != '"'))       i++;      int j=++i;      while ((j < len) && (ln.charAt(j) != '"'))       j++;      String id=ln.substring(i,j);      i=++j;      while ((i < len) && ((ln.charAt(i) == ' ') || (ln.charAt(i) == '\t')))       i++;      j=i + 1;      while ((j < len) && (ln.charAt(j) != ' ') && (ln.charAt(j) != '\t'))       j++;      String where=ln.substring(i,j);      put(id,baseStr + where);    }  }  data.close();}  }
class C{  private final void buildInterface(String title,Collection<T> initialItems){  this.setLayout(new GridLayout(2,1));  this.add(this.getTitlePane(title));  this.add(this.getComboBox());  for (  T t : initialItems) {    this.comboBox.addItem(t);  }}  }
class C{  public static int toIntFromNibbles(byte[] nibbles,int start){  return toInt(nibbles[start],nibbles[start + 1],nibbles[start + 2],nibbles[start + 3],nibbles[start + 4],nibbles[start + 5],nibbles[start + 6],nibbles[start + 7]);}  }
class C{  private void paintBackgroundApart(Graphics2D g,int width,int height){  Shape s=shapeGenerator.createScrollButtonApart(0,0,width,height);  dropShadow.fill(g,s);  fillScrollBarButtonInteriorColors(g,s,isIncrease,buttonsTogether);}  }
class C{  @Override public boolean supportsCapability(OperatorCapability lc){switch (lc) {case NUMERICAL_ATTRIBUTES:case POLYNOMINAL_LABEL:case BINOMINAL_LABEL:case NUMERICAL_LABEL:case WEIGHTED_EXAMPLES:    return true;default :  return false;}}  }
class C{  public static String javaEncode(String s){  int length=s.length();  StringBuilder buff=new StringBuilder(length);  for (int i=0; i < length; i++) {    char c=s.charAt(i);switch (c) {case '\t':      buff.append("\\t");    break;case '\n':  buff.append("\\n");break;case '\f':buff.append("\\f");break;case '\r':buff.append("\\r");break;case '"':buff.append("\\\"");break;case '\\':buff.append("\\\\");break;default :int ch=c & 0xffff;if (ch >= ' ' && (ch < 0x80)) {buff.append(c);} else {buff.append("\\u");String hex=Integer.toHexString(ch);for (int len=hex.length(); len < 4; len++) {buff.append('0');}buff.append(hex);}}}return buff.toString();}  }
class C{  public TBParVec particleClosure(){  TBPar positive_closure=this.positiveClosure();  Vect alphas=positive_closure.alphaTriples();  Vect betas=positive_closure.betaTriples();  return particleClosure(this,alphas,betas);}  }
class C{  private void processStatus(){  int count=0;  String sql="SELECT * FROM R_Request r WHERE EXISTS (" + "SELECT * FROM R_Status s " + "WHERE r.R_Status_ID=s.R_Status_ID"+ " AND s.TimeoutDays > 0 AND s.Next_Status_ID > 0"+ " AND r.DateLastAction+s.TimeoutDays < SysDate"+ ") "+ "ORDER BY R_Status_ID";  PreparedStatement pstmt=null;  MStatus status=null;  MStatus next=null;  try {    pstmt=DB.prepareStatement(sql,null);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      MRequest r=new MRequest(getCtx(),rs,null);      if (status == null || status.getR_Status_ID() != r.getR_Status_ID())       status=MStatus.get(getCtx(),r.getR_Status_ID());      if (status.getTimeoutDays() <= 0 || status.getNext_Status_ID() == 0)       continue;      if (next == null || next.getR_Status_ID() != status.getNext_Status_ID())       next=MStatus.get(getCtx(),status.getNext_Status_ID());      String result=Msg.getMsg(getCtx(),"RequestStatusTimeout") + ": " + status.getName()+ " -> "+ next.getName();      r.setResult(result);      r.setR_Status_ID(status.getNext_Status_ID());      if (r.save())       count++;    }    rs.close();  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(pstmt);  }  m_summary.append("Status Timeout #").append(count).append(" - ");}  }
class C{  public void add(ChronixAggregation aggregation,double value){  if (aggregationSize < aggregations.length) {    aggregations[aggregationSize]=aggregation;    aggregationValues[aggregationSize]=value;    aggregationSize++;  } else {    throw new IndexOutOfBoundsException("Try to put aggregation to map with max size " + aggregations.length + " but index "+ aggregationSize+ " is out of range.");  }}  }
class C{  protected SVGOMGlyphElement(){}  }
class C{  private void updatePlanCycles(){switch (currentCycle.getType()) {case PlanConstants.DATA:    cycleModel.updateDataCycle(currentCycle);  break;case PlanConstants.TALK:cycleModel.updateTalkCycle(currentCycle);break;case PlanConstants.TEXT:cycleModel.updateTextCycle(currentCycle);break;}}  }
class C{  private boolean hasMatchingParametersMethod(final Method method){  return MethodUtils.getAccessibleMethod(target.getClass(),methodName,method.getParameterTypes()) != null;}  }
class C{  public AnimatorBuilder applyTranslation(final View viewToTranslate,final Point finalPoint){  if (viewToTranslate == null) {    throw new RuntimeException("You passed a null view");  }  final Point from=buildPointView(viewToTranslate);  Float translationX=calculateTranslationX(from,finalPoint);  Float translationY=calculateTranslationY(from,finalPoint);  return applyTranslation(viewToTranslate,translationX,translationY);}  }
class C{  @SuppressWarnings("unused") protected final boolean cancelOperation(final int id){  return mHelper.cancelOperation(id,true);}  }
class C{  public TEnum createTEnum(){  TEnumImpl tEnum=new TEnumImpl();  return tEnum;}  }
class C{  @Override protected Instances process(Instances instances) throws Exception {  if (!isFirstBatchDone()) {    HashSet<DecisionTableHashKey> hs=new HashSet<DecisionTableHashKey>();    Instances newInstances=new Instances(instances,instances.numInstances());    for (    Instance inst : instances) {      DecisionTableHashKey key=new DecisionTableHashKey(inst,instances.numAttributes(),true);      if (hs.add(key)) {        newInstances.add(inst);      }    }    newInstances.compactify();    return newInstances;  }  throw new Exception("The process method should never be called for subsequent batches.");}  }
class C{  @LargeTest public void testThumbnailForH264854_480() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "MPEG4_SP_854x480_15fps_256kbps_AACLC_16khz_48kbps_s_0_26.mp4";  final int outWidth=128;  final int outHeight=128;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  MediaVideoItem mediaVideoItem=null;  mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  final long atTime=mediaVideoItem.getDuration() - 1000;  final Bitmap thumbNailBmp=mediaVideoItem.getThumbnail(outWidth,outHeight,atTime);  validateThumbnail(thumbNailBmp,outWidth,outHeight);}  }
class C{  public Iterator<String> parameterSignatureIterator(){  return new ParameterSignatureIterator();}  }
class C{  public boolean nextBoolean(){  return next(1) != 0;}  }
class C{  public MockCluster(String name,HiveMetastoreClient client,Path fsRoot,Path tmpDir){  this.name=name;  this.client=client;  this.fsRoot=fsRoot;  this.tmpDir=tmpDir;}  }
class C{  public void documentPartitioningChanged(DocumentPartitioningChangedEvent event){  IDocument document=event.getDocument();  try {    IRegion changedRegion=event.getCoverage();    IDocumentPartitioner partitioner=document.getDocumentPartitioner();    ITypedRegion[] regions=partitioner.computePartitioning(lastPartitionEnd,changedRegion.getOffset() + changedRegion.getLength() - lastPartitionEnd);    analyzer.resetUserPartitions();    int offsetToRemove=0;    for (int i=0; i < regions.length; i++) {      if (!TagBasedTLCOutputTokenScanner.DEFAULT_CONTENT_TYPE.equals(regions[i].getType())) {        int currentPartitionEnd=regions[i].getOffset() + regions[i].getLength();        if (currentPartitionEnd > lastPartitionEnd) {          lastPartitionEnd=currentPartitionEnd;        }        if (TagBasedTLCOutputTokenScanner.TAG_OPEN.equals(regions[i].getType())) {          if (analyzer.hasUserPartitions() && !analyzer.inTag()) {            ITypedRegion mergedPartition=analyzer.getUserRegion();            source.onOutput(mergedPartition,document.get(mergedPartition.getOffset(),mergedPartition.getLength()));          }          analyzer.addTagStart(regions[i]);        } else         if (TagBasedTLCOutputTokenScanner.TAG_CLOSED.equals(regions[i].getType())) {          analyzer.addTagEnd(regions[i]);          if (!analyzer.inTag()) {            ITypedRegion tag=analyzer.getTaggedRegion();            source.onOutput(tag,document.get(tag.getOffset(),tag.getLength()));          }        } else {          Assert.isTrue(regions[i].getLength() == 0,"Parsing bug");        }      } else {        analyzer.addUserRegion(regions[i]);      }    }    if (!analyzer.inTag()) {      offsetToRemove=lastPartitionEnd;      lastPartitionEnd=0;    }    if (mode == Mode.INCREMENTAL && offsetToRemove > 0) {      document.replace(0,offsetToRemove,"");    }  } catch (  BadLocationException e) {    TLCUIActivator.getDefault().logError("Error removing text or retrieving text from the parser's document." + "This is a bug.",e);  }}  }
class C{  private static boolean isCharacterInC0orC1Range(char ch){  if (ch == 0x09 || ch == 0x0A || ch == 0x0D)   return false; else   return (ch >= 0x7F && ch <= 0x9F) || (ch >= 0x01 && ch <= 0x1F);}  }
class C{  public void close(){  getScheduler().shutdownNow();  userThreads.shutdownNow();  invokeAction(null);  notifyCompleter();  List<Runnable> unfinished=controlScheduler.shutdownNow();  if (!unfinished.isEmpty()) {    System.err.println("Could not finish " + unfinished.size() + " tasks");  }}  }
class C{  public ROMMA(){  this(true);}  }
class C{  public SuspendThreadCommand(final int packetId,final long tid){  super(DebugCommandType.CMD_SUSPEND_THREAD,packetId);  addArgument(new DebugMessageIntegerArgument((int)tid));}  }
class C{  private TaskList stopVplexMirrors(URI id,URI copyID){  ArgValidator.checkFieldUriType(id,Volume.class,"id");  Volume sourceVolume=queryVolumeResource(id);  ArgValidator.checkEntity(sourceVolume,id,true);  StringSet mirrors=sourceVolume.getMirrors();  if (mirrors == null || mirrors.isEmpty()) {    throw APIException.badRequests.invalidParameterVolumeHasNoContinuousCopies(sourceVolume.getId());  }  ArrayList<URI> mirrorList=null;  if (copyID != null) {    ArgValidator.checkFieldUriType(copyID,VplexMirror.class,"copyID");    VplexMirror mirror=queryVplexMirror(copyID);    ArgValidator.checkEntity(mirror,copyID,true);    if (!mirror.getSource().getURI().equals(id)) {      throw APIException.badRequests.invalidParameterBlockCopyDoesNotBelongToVolume(copyID,id);    } else {      mirrorList=new ArrayList();      mirrorList.add(mirror.getId());    }  }  String task=UUID.randomUUID().toString();  BlockServiceApi blockServiceApi;  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,sourceVolume.getStorageController());  blockServiceApi=getBlockServiceImpl(DiscoveredDataObject.Type.vplex.name());  return blockServiceApi.stopNativeContinuousCopies(storageSystem,sourceVolume,mirrorList,task);}  }
class C{  public Element writeLoader(Element parent,Object o,String name) throws Exception {  Element node;  weka.core.converters.Loader loader;  File file;  boolean known;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  loader=(weka.core.converters.Loader)o;  node=addElement(parent,name,loader.getClass().getName(),false);  known=true;  file=null;  if (loader instanceof weka.core.converters.AbstractFileLoader) {    file=((weka.core.converters.AbstractFileLoader)loader).retrieveFile();  } else {    known=false;  }  if (!known) {    System.out.println("WARNING: unknown loader class '" + loader.getClass().getName() + "' - cannot retrieve file!");  }  Boolean relativeB=null;  if (loader instanceof weka.core.converters.FileSourcedConverter) {    boolean relative=((weka.core.converters.FileSourcedConverter)loader).getUseRelativePath();    relativeB=new Boolean(relative);  }  if ((file == null) || (file.isDirectory())) {    invokeWriteToXML(node,"",VAL_FILE);  } else {    String withResourceSeparators=file.getPath().replace(File.pathSeparatorChar,'/');    boolean notAbsolute=(((weka.core.converters.AbstractFileLoader)loader).getUseRelativePath() || (loader instanceof EnvironmentHandler && Environment.containsEnvVariables(file.getPath())) || this.getClass().getClassLoader().getResource(withResourceSeparators) != null || !file.exists());    String path=(notAbsolute) ? file.getPath() : file.getAbsolutePath();    path=path.replace('\\','/');    invokeWriteToXML(node,path,VAL_FILE);  }  if (relativeB != null) {    invokeWriteToXML(node,relativeB.toString(),VAL_RELATIVE_PATH);  }  if (loader instanceof weka.core.OptionHandler) {    String[] opts=((weka.core.OptionHandler)loader).getOptions();    invokeWriteToXML(node,opts,VAL_OPTIONS);  }  return node;}  }
class C{  public RepeatedFieldBuilder<MType,BType,IType> addAllMessages(Iterable<? extends MType> values){  for (  final MType value : values) {    if (value == null) {      throw new NullPointerException();    }  }  if (values instanceof Collection) {    @SuppressWarnings("unchecked") final Collection<MType> collection=(Collection<MType>)values;    if (collection.size() == 0) {      return this;    }    ensureMutableMessageList();    for (    MType value : values) {      addMessage(value);    }  } else {    ensureMutableMessageList();    for (    MType value : values) {      addMessage(value);    }  }  onChanged();  incrementModCounts();  return this;}  }
class C{  public MenuInflater(Context context,Object realOwner){  mContext=context;  mRealOwner=realOwner;  mActionViewConstructorArguments=new Object[]{context};  mActionProviderConstructorArguments=mActionViewConstructorArguments;}  }
class C{  @SuppressWarnings("unchecked") @Test(dataProvider="hostCounts") public void testTaskFailureInsideCreateContainer(Integer hostCount) throws Throwable {  machine=createTestEnvironment(deployerTestConfig,listeningExecutorService,dockerProvisionerFactory,healthCheckHelperFactory,hostCount);  DockerProvisioner dockerProvisioner=mock(DockerProvisioner.class);  when(dockerProvisionerFactory.create(anyString())).thenReturn(dockerProvisioner);  when(dockerProvisioner.launchContainer(anyString(),anyString(),anyInt(),anyLong(),anyMap(),anyMap(),anyString(),anyBoolean(),anyMap(),anyBoolean(),anyBoolean(),Matchers.<String>anyVararg())).thenThrow(new DockerException("Start container " + "failed",500));  createHostEntitiesAndAllocateVmsAndContainers(3,7);  createDeploymentServiceDocuments();  CreateContainersWorkflowService.State finalState=machine.callServiceAndWaitForState(CreateContainersWorkflowFactoryService.SELF_LINK,startState,CreateContainersWorkflowService.State.class,null);  assertThat(finalState.taskState.stage,is(TaskState.TaskStage.FAILED));}  }
class C{  public void hide(boolean animate){  hide(animate,fadeOut);}  }
class C{  public KeywordRepeatFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  private static boolean isPostgresAlreadyExistsError(SQLException e){  PSQLException p=extractPSQLException(e);  return (null != p) && (p.getSQLState().equals(POSTGRES_DUPLICATE_TABLE_SQLSTATE));}  }
class C{  public void hideKeyboard(){  mEditText.clearFocus();  ((InputMethodManager)getContext().getSystemService(Context.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(mEditText.getWindowToken(),0);}  }
class C{  public ComplexVector copy(){  ComplexVector copy=new ComplexVector(dimension,opMode);switch (opMode) {case POLAR_SPARSE:    copy.sparseOffsets=new short[sparseOffsets.length];  for (int i=0; i < sparseOffsets.length; ++i) {    copy.sparseOffsets[i]=sparseOffsets[i];  }copy.opMode=Mode.POLAR_SPARSE;break;case POLAR_DENSE:for (int i=0; i < dimension; ++i) {copy.phaseAngles[i]=phaseAngles[i];}break;case CARTESIAN:for (int i=0; i < 2 * dimension; ++i) {copy.coordinates[i]=coordinates[i];}break;case HERMITIAN:for (int i=0; i < 2 * dimension; ++i) {copy.coordinates[i]=coordinates[i];}break;}return copy;}  }
class C{  @Override public double updateContainerProcessing(final double currentTime,final List<Double> mipsShare){  double time=super.updateContainerProcessing(currentTime,mipsShare);  if (currentTime > getPreviousTime() && (currentTime - 0.2) % getSchedulingInterval() == 0) {    double utilization=getTotalUtilizationOfCpu(getContainerCloudletScheduler().getPreviousTime());    if (CloudSim.clock() != 0 || utilization != 0) {      addUtilizationHistoryValue(utilization);    }    setPreviousTime(currentTime);  }  return time;}  }
class C{  @Override public void beginWindow(long windowId){}  }
class C{  @Override public ShardResponse takeCompletedOrError(){  return take(true);}  }
class C{  public void visitEnd(){}  }
class C{  public IceTcpServerSocketWrapper(ServerSocket serverSocket,Component component){  this.serverSocket=serverSocket;  this.component=component;  acceptThread=new ThreadAccept();  acceptThread.start();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String grassFile=null;  String whiteboxHeaderFile=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  double noData=-32768;  InputStream inStream=null;  OutputStream outStream=null;  int progress=0;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    }  }  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      whiteboxHeaderFile=imageFiles[i];      if (!((new File(whiteboxHeaderFile)).exists())) {        showFeedback("Whitebox raster file does not exist.");        break;      }      WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"r");      rows=wbr.getNumberRows();      cols=wbr.getNumberColumns();      noData=wbr.getNoDataValue();      grassFile=whiteboxHeaderFile.replace(".dep",".grd");      (new File(grassFile)).delete();      fw=new FileWriter(grassFile,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str1="DSAA";      out.println(str1);      str1=String.valueOf(cols) + " " + String.valueOf(rows);      out.println(str1);      double xMin=Math.min(wbr.getEast(),wbr.getWest());      double xMax=Math.max(wbr.getEast(),wbr.getWest());      str1=String.valueOf(xMin) + " " + String.valueOf(xMax);      out.println(str1);      double yMin=Math.min(wbr.getNorth(),wbr.getSouth());      double yMax=Math.max(wbr.getNorth(),wbr.getSouth());      str1=String.valueOf(yMin) + " " + String.valueOf(yMax);      out.println(str1);      str1=String.valueOf(0) + " " + String.valueOf(1);      out.println(str1);      double[] data=null;      String line="";      if (wbr.getDataType() == WhiteboxRaster.DataType.FLOAT || wbr.getDataType() == WhiteboxRaster.DataType.DOUBLE) {        for (row=rows - 1; row >= 0; row--) {          data=wbr.getRowValues(row);          line="";          str1="";          for (col=0; col < cols; col++) {            if (col != 0) {              str1=" ";            }            if (data[col] != noData) {              str1+=String.valueOf((float)data[col]);            } else {              str1+="-9999";            }            line+=str1;          }          out.println(line);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * (rows - 1 - row) / (rows - 1));          updateProgress(progress);        }      } else {        for (row=rows - 1; row >= 0; row--) {          data=wbr.getRowValues(row);          line="";          str1="";          for (col=0; col < cols; col++) {            if (col != 0) {              str1=" ";            }            if (data[col] != noData) {              str1+=String.valueOf((int)data[col]);            } else {              str1+="-9999";            }            line+=str1;          }          out.println(line);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * (rows - 1 - row) / (rows - 1));          updateProgress(progress);        }      }      wbr.close();      (new File(whiteboxHeaderFile.replace(".dep","_temp.dep"))).delete();    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean isDirty(){  return content != null && content.isDirty();}  }
class C{  public static StddevProjectionExpression stddevDistinct(Expression expression){  return new StddevProjectionExpression(expression,true);}  }
class C{  private long address(long offset,int b){  return address + offset + b;}  }
class C{  public void addText(String text) throws ConfigException {  _bytes=toBytes(text);}  }
class C{  public long roundHalfEven(long instant){  throw unsupported();}  }
class C{  public CMAES(Problem problem,int lambda,FitnessEvaluator fitnessEvaluator,NondominatedPopulation archive){  this(problem,lambda,fitnessEvaluator,archive,null,false,-1,-1,-1,-1,-1,-1,-1);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FssDaoFileRecA[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_volId = ").append(m_volId);  buffer.append(", m_loc = ").append(m_loc);  buffer.append(", m_flags = ").append(m_flags);  buffer.append(", m_size = ").append(m_size);  buffer.append("]");  return buffer.toString();}  }
class C{  @Override public boolean[] existsAll(List<Get> gets) throws IOException {  boolean[] ret=new boolean[gets.size()];  int i=0;  for (  boolean b : exists(gets)) {    ret[i++]=b;  }  return ret;}  }
class C{  boolean isComplete(){  return mTestName != null && mTestClass != null;}  }
class C{  @Override public void evaluate(Tag tag,TagLibTag libTag,FunctionLib[] flibs) throws EvaluatorException {  evaluate(tag);  evaluate(tag,libTag);}  }
class C{  public static void dumpHeader(Object ref){  VM.sysWrite(" STATUS=");  VM.sysWriteHex(Magic.getWordAtOffset(ref,STATUS_OFFSET).toAddress());}  }
class C{  public static void main(String[] args) throws Exception {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    if (!ExamplesUtils.checkMinTopologySize(ignite.cluster(),2))     return;    System.out.println();    System.out.println(">>> Messaging ping-pong example started.");    ClusterGroup nodeB=ignite.cluster().forRemotes().forRandom();    ignite.message(nodeB).remoteListen(null,null);    int MAX_PLAYS=10;    final CountDownLatch cnt=new CountDownLatch(MAX_PLAYS);    ignite.message().localListen(null,null);    ignite.message(nodeB).send(null,"PING");    try {      cnt.await();    } catch (    InterruptedException e) {      System.err.println("Hm... let us finish the game!\n" + e);    }  } }  }
class C{  public static void isNotNull(Object object){  isNotNull(object,"");}  }
class C{  public void disable(){  if (useDefaultDisplayVsync) {    vsyncSampler.removeObserver();  }}  }
class C{  public void cmd(File workingDir,String cmd){  run(null);}  }
class C{  public boolean accept(File dir,String name){  File file=new File(dir,name);  if (file.isDirectory())   return true;  String filterString=getFilterString();  if (filterString == null || filterString.length() == 0)   return true;  if (name == null)   return false;  if (name.indexOf('~') != -1 || name.equals("FileUtil.java"))   return false;  return name.indexOf(filterString) != -1;}  }
class C{  static String normalizeHostnamePattern(String hostnamePattern){  requireNonNull(hostnamePattern,"hostnamePattern");  if (needsNormalization(hostnamePattern)) {    hostnamePattern=IDN.toASCII(hostnamePattern,IDN.ALLOW_UNASSIGNED);  }  if (!"*".equals(hostnamePattern) && !HOSTNAME_PATTERN.matcher(hostnamePattern.startsWith("*.") ? hostnamePattern.substring(2) : hostnamePattern).matches()) {    throw new IllegalArgumentException("hostnamePattern: " + hostnamePattern);  }  return hostnamePattern.toLowerCase(Locale.ENGLISH);}  }
class C{  public WekaEnumeration(List<E> vector,int special){  m_Vector=vector;  m_SpecialElement=special;  if (special == 0) {    m_Counter=1;  } else {    m_Counter=0;  }}  }
class C{  @JsonCreator public VectorClock(@JsonProperty("entries") List<ClockEntry> versions,@JsonProperty("timestamp") long timestamp){  this.versions=versions;  this.timestamp=timestamp;}  }
class C{  public void startScanning(){  if (mServiceConnected) {    mBeaconsListFragment.startScanning(mServiceConnection);  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (generator: ");  result.append(generator);  result.append(", declaredAsync: ");  result.append(declaredAsync);  result.append(')');  return result.toString();}  }
class C{  @Override public void addPropertyChangeListener(String name,PropertyChangeListener pcl){  m_bcSupport.addPropertyChangeListener(name,pcl);}  }
class C{  public void handleMapRequest(Properties requestProperties,OutputStream out) throws IOException, MapRequestFormatException {  byte[] image=handleMapRequest(requestProperties);  if (Debug.debugging("imageserver")) {    Debug.output("MRH: have completed image, size " + image.length);  }  String contentType=getFormatterContentType(getFormatter());  if (contentType == null) {    contentType=HttpConnection.CONTENT_PLAIN;  }  Debug.message("imageserver","MRH: have type = " + contentType);  HttpConnection.writeHttpResponse(out,contentType,image);}  }
class C{  public T caseCatchVariable(CatchVariable object){  return null;}  }
class C{  public boolean onTouchEvent(final MotionEvent event){  int action=MotionEventCompat.getActionMasked(event);switch (action) {case MotionEvent.ACTION_DOWN:    touchX=event.getX();  touchY=event.getY();isOutsideView=drawRect.contains(touchX,touchY);startRipple();return true;case MotionEvent.ACTION_CANCEL:case MotionEvent.ACTION_UP:finishRipple();return true;}return false;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case InformationModelPackage.INFORMATION_MODEL__REFERENCES:    return ((InternalEList<?>)getReferences()).basicRemove(otherEnd,msgs);case InformationModelPackage.INFORMATION_MODEL__PROPERTIES:  return ((InternalEList<?>)getProperties()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:39.182 -0500",hash_original_method="FABC86F56C336DE2152BE8F133BAAD74",hash_generated_method="FABC86F56C336DE2152BE8F133BAAD74") BigInteger copy(){  prepareJavaRepresentation();  int[] copyDigits=new int[numberLength];  System.arraycopy(digits,0,copyDigits,0,numberLength);  return new BigInteger(sign,numberLength,copyDigits);}  }
class C{  public static LazyPOrderedSetX<Integer> range(int start,int end){  return fromStreamS(ReactiveSeq.range(start,end));}  }
class C{  @Override protected void resetList(){  clearRecycledState(mHeaderViewInfos);  clearRecycledState(mFooterViewInfos);  super.resetList();  mLayoutMode=LAYOUT_NORMAL;}  }
class C{  @Override public void updateUI(){  super.updateUI();  setForeground(null);  setBackground(null);}  }
class C{  protected void doStateInHiveWithInfo(){  double pForgettingSource=getSimulation().pForgettingSource;  double pForagingAgain=getSimulation().pForagingAgain;  setColor(Color.yellow);  receptive=true;  double colonyNectarNeed=getSimulation().colonyNectarNeed;  double threshold_forgetting=pForgettingSource * (100 - sourceQuality);  if (threshold_forgetting > r.nextDouble()) {    forgetSource(Color.yellow,State.inHiveWithoutInfo);    goInHive();    return;  }  if ((dancingThreshold > -1) && (dancingThreshold * colonyNectarNeed) > (r.nextDouble() * 10000)) {    setColor(foodSource.getColor());    setState(State.dancing);    repeatedDance++;    receptive=false;    dancingTime=(int)Math.round(10 + dancingThreshold * .33);    dancingThreshold*=.75;    if (dancingThreshold < 1) {      dancingThreshold=-1;      repeatedDance=0;      receptive=true;    }    goInHive();    return;  }  if ((pForagingAgain * colonyNectarNeed) > r.nextDouble()) {    double nectar=nectarForReturn + sourceDistance * nectarForOneStep + r.nextDouble() * 5;    nectarLoad=this.requestNectarFromHive(nectar);    setState(State.leaveHive);    goInHive();    return;  }  goInHive();}  }
class C{  private static Field findField(Object instance,String name) throws NoSuchFieldException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Field field=clazz.getDeclaredField(name);      if (!field.isAccessible()) {        field.setAccessible(true);      }      return field;    } catch (    NoSuchFieldException e) {    }  }  throw new NoSuchFieldException("Field " + name + " not found in "+ instance.getClass());}  }
class C{  public static void checkArgument(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public long recrawlIfOlder(){  final String r=get(CrawlAttribute.RECRAWL_IF_OLDER.key);  if (r == null)   return 0L;  try {    final long l=Long.parseLong(r);    return (l < 0) ? 0L : l;  } catch (  final NumberFormatException e) {    ConcurrentLog.logException(e);    return 0L;  }}  }
class C{  @Override public synchronized void initialize(){  mEntries.initialize();}  }
class C{  public CNodeChooserRenderer(final CNodeChooserTable nodeChooserTable,final ZyGraph graph,final GraphSearcher searcher){  m_table=Preconditions.checkNotNull(nodeChooserTable,"IE01770: Table can't be null.");  m_graph=Preconditions.checkNotNull(graph,"IE01771: Graph can't be null.");  m_searcher=Preconditions.checkNotNull(searcher,"IE01772: Graph searcher can't be null.");  setOpaque(true);}  }
class C{  public static int sp2px(Context context,int px){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,px,context.getResources().getDisplayMetrics());}  }
class C{  public long addServer(Server server,int identityId){  ContentValues values=new ContentValues();  values.put(ServerConstants.TITLE,server.getTitle());  values.put(ServerConstants.HOST,server.getHost());  values.put(ServerConstants.PORT,server.getPort());  values.put(ServerConstants.PASSWORD,server.getPassword());  values.put(ServerConstants.AUTOCONNECT,false);  values.put(ServerConstants.USE_SSL,server.useSSL());  values.put(ServerConstants.IDENTITY,identityId);  values.put(ServerConstants.CHARSET,server.getCharset());  Authentication authentication=server.getAuthentication();  values.put(ServerConstants.NICKSERV_PASSWORD,authentication.getNickservPassword());  values.put(ServerConstants.SASL_USERNAME,authentication.getSaslUsername());  values.put(ServerConstants.SASL_PASSWORD,authentication.getSaslPassword());  return this.getWritableDatabase().insert(ServerConstants.TABLE_NAME,null,values);}  }
class C{  public String elementalvectorfile(){  return elementalvectorfile;}  }
class C{  public static Coordinate intersection(Coordinate p1,Coordinate p2,Coordinate q1,Coordinate q2) throws NotRepresentableException {  double px=p1.y - p2.y;  double py=p2.x - p1.x;  double pw=p1.x * p2.y - p2.x * p1.y;  double qx=q1.y - q2.y;  double qy=q2.x - q1.x;  double qw=q1.x * q2.y - q2.x * q1.y;  double x=py * qw - qy * pw;  double y=qx * pw - px * qw;  double w=px * qy - qx * py;  double xInt=x / w;  double yInt=y / w;  if ((Double.isNaN(xInt)) || (Double.isInfinite(xInt) || Double.isNaN(yInt)) || (Double.isInfinite(yInt))) {    throw new NotRepresentableException();  }  return new Coordinate(xInt,yInt);}  }
class C{  @Override public void profile(){  profileCount++;  for (  ThreadInfo thread : getAllRunnableThreads()) {    if (thread.getStackTrace().length > 0) {      String traceKey=StackTraceFormatter.formatStackTrace(thread.getStackTrace());      if (filter.includeStackTrace(traceKey)) {        traces.increment(traceKey,1);      }    }  }  if (profileCount == reportingFrequency) {    profileCount=0;    recordMethodCounts();  }}  }
class C{  public boolean isFill(){  return fill;}  }
class C{  public Bean(){}  }
class C{  private void applyStyleToUIElement(Component ui,CSSElement selector,HTMLElement element,HTMLComponent htmlC){  int styles=getApplicableStyles(ui,selector);  if (HTMLComponent.FIXED_WIDTH) {    int space=selector.getAttrVal(CSSElement.CSS_WHITE_SPACE);    if (space != -1) {switch (space) {case WHITE_SPACE_NORMAL:        setWrapRecursive(element,htmlC);      break;case WHITE_SPACE_NOWRAP:    setNowrapRecursive(element);  break;case WHITE_SPACE_PRE:break;}}}String v=selector.getAttributeById(CSSElement.CSS_WAP_INPUT_FORMAT);if ((v != null) && ((element.getTagId() == HTMLElement.TAG_TEXTAREA) || (element.getTagId() == HTMLElement.TAG_INPUT)) && (ui instanceof TextArea)) {v=omitQuotesIfExist(v);ui=htmlC.setInputFormat((TextArea)ui,v);element.setAssociatedComponents(ui);}int inputRequired=selector.getAttrVal(CSSElement.CSS_WAP_INPUT_REQUIRED);if ((inputRequired != -1) && ((element.getTagId() == HTMLElement.TAG_TEXTAREA) || (element.getTagId() == HTMLElement.TAG_INPUT)) && (ui instanceof TextArea)) {if (inputRequired == INPUT_REQUIRED_TRUE) {htmlC.setInputRequired(((TextArea)ui),true);} else if (inputRequired == INPUT_REQUIRED_FALSE) {htmlC.setInputRequired(((TextArea)ui),false);}}int disp=selector.getAttrVal(CSSElement.CSS_DISPLAY);switch (disp) {case DISPLAY_NONE:if (ui.getParent() != null) {ui.getParent().removeComponent(ui);} else {if (ui instanceof Container) {((Container)ui).removeAll();}}return;case DISPLAY_MARQUEE:htmlC.marqueeComponents.addElement(ui);break;}int visibility=selector.getAttrVal(CSSElement.CSS_VISIBILITY);if (visibility != -1) {boolean visible=(visibility == VISIBILITY_VISIBLE);setVisibleRecursive(ui,visible);if (!visible) {return;} else {setParentsVisible(ui);}}int bgColor=selector.getAttrVal(CSSElement.CSS_BACKGROUND_COLOR);if (bgColor != -1) {if ((styles & STYLE_UNSELECTED) != 0) {ui.getUnselectedStyle().setBgColor(bgColor);ui.getUnselectedStyle().setBgTransparency(255);}if ((styles & STYLE_SELECTED) != 0) {ui.getSelectedStyle().setBgColor(bgColor);ui.getSelectedStyle().setBgTransparency(255);}if ((styles & STYLE_PRESSED) != 0) {((HTMLLink)ui).getPressedStyle().setBgColor(bgColor);((HTMLLink)ui).getPressedStyle().setBgTransparency(255);}}int fgColor=selector.getAttrVal(CSSElement.CSS_COLOR);if (fgColor != -1) {setColorRecursive(ui,fgColor,selector);}v=selector.getAttributeById(CSSElement.CSS_BACKGROUND_IMAGE);if (v != null) {String url=getCSSUrl(v);if (url != null) {CSSBgPainter bgPainter=new CSSBgPainter(ui);byte bgType=(byte)selector.getAttrVal(CSSElement.CSS_BACKGROUND_REPEAT);if (bgType == -1) {bgType=Style.BACKGROUND_IMAGE_TILE_BOTH;}if ((styles & STYLE_SELECTED) != 0) {ui.getSelectedStyle().setBgPainter(bgPainter);ui.getSelectedStyle().setBackgroundType(bgType);}if ((styles & STYLE_UNSELECTED) != 0) {ui.getUnselectedStyle().setBgPainter(bgPainter);ui.getUnselectedStyle().setBackgroundType(bgType);}if ((styles & STYLE_PRESSED) != 0) {((HTMLLink)ui).getPressedStyle().setBgPainter(bgPainter);((HTMLLink)ui).getPressedStyle().setBackgroundType(bgType);}if (htmlC.showImages) {if (htmlC.getDocumentInfo() != null) {htmlC.getThreadQueue().addBgImage(ui,htmlC.convertURL(url),styles);} else {if (DocumentInfo.isAbsoluteURL(url)) {htmlC.getThreadQueue().addBgImage(ui,url,styles);} else {if (htmlC.getHTMLCallback() != null) {htmlC.getHTMLCallback().parsingError(HTMLCallback.ERROR_NO_BASE_URL,selector.getTagName(),selector.getAttributeName(new Integer(CSSElement.CSS_BACKGROUND_IMAGE)),url,"Ignoring background image file referred in a CSS file/segment (" + url + "), since page was set by setBody/setHTML/setDOM so there's no way to access relative URLs");}}}}for (int i=CSSElement.CSS_BACKGROUND_POSITION_X; i <= CSSElement.CSS_BACKGROUND_POSITION_Y; i++) {int pos=selector.getAttrVal(i);if (pos != -1) {bgPainter.setPosition(i,pos);}}if (selector.getAttrVal((CSSElement.CSS_BACKGROUND_ATTACHMENT)) == BG_ATTACHMENT_FIXED) {bgPainter.setFixed();}}}Component marginComp=ui;if (ui instanceof Label) {marginComp=ui.getParent();} else if ((element.getTagId() == HTMLElement.TAG_LI) && (ui.getParent().getLayout() instanceof BorderLayout)) {marginComp=ui.getParent();}for (int i=CSSElement.CSS_MARGIN_TOP; i <= CSSElement.CSS_MARGIN_RIGHT; i++) {int marginPixels=-1;if ((i == CSSElement.CSS_MARGIN_TOP) || (i == CSSElement.CSS_MARGIN_BOTTOM)) {marginPixels=selector.getAttrLengthVal(i,ui,htmlC.getHeight());} else {marginPixels=selector.getAttrLengthVal(i,ui,htmlC.getWidth());}if (marginPixels >= 0 && marginComp != null) {if ((styles & STYLE_SELECTED) != 0) {marginComp.getSelectedStyle().setMargin(i - CSSElement.CSS_MARGIN_TOP,marginPixels);if ((ui instanceof HTMLLink) && (styles == STYLE_SELECTED)) {((HTMLLink)ui).setParentChangesOnFocus();}}if ((styles & STYLE_UNSELECTED) != 0) {marginComp.getUnselectedStyle().setMargin(i - CSSElement.CSS_MARGIN_TOP,marginPixels);}}}Component padComp=ui;if (ui instanceof Label) {padComp=ui.getParent();} else if ((element.getTagId() == HTMLElement.TAG_LI) && (ui.getParent().getLayout() instanceof BorderLayout)) {padComp=ui.getParent();}for (int i=CSSElement.CSS_PADDING_TOP; i <= CSSElement.CSS_PADDING_RIGHT; i++) {int padPixels=-1;if ((i == CSSElement.CSS_PADDING_TOP) || (i == CSSElement.CSS_PADDING_BOTTOM)) {padPixels=selector.getAttrLengthVal(i,ui,htmlC.getHeight());} else {padPixels=selector.getAttrLengthVal(i,ui,htmlC.getWidth());}if (padPixels >= 0) {if ((styles & STYLE_SELECTED) != 0) {if (padComp != null) {padComp.getSelectedStyle().setPadding(i - CSSElement.CSS_PADDING_TOP,padPixels);}if ((ui instanceof HTMLLink) && (styles == STYLE_SELECTED)) {((HTMLLink)ui).setParentChangesOnFocus();}}if ((styles & STYLE_UNSELECTED) != 0) {if (padComp != null) {padComp.getUnselectedStyle().setPadding(i - CSSElement.CSS_PADDING_TOP,padPixels);}}}}int align=selector.getAttrVal(CSSElement.CSS_TEXT_ALIGN);if (align != -1) {switch (element.getTagId()) {case HTMLElement.TAG_TD:case HTMLElement.TAG_TH:setTableCellAlignment(element,ui,align,true);break;case HTMLElement.TAG_TR:setTableCellAlignmentTR(element,ui,align,true);break;case HTMLElement.TAG_TABLE:setTableAlignment(ui,align,true);break;default :setTextAlignmentRecursive(ui,align);}}int valign=selector.getAttrVal(CSSElement.CSS_VERTICAL_ALIGN);if (valign != -1) {switch (element.getTagId()) {case HTMLElement.TAG_TD:case HTMLElement.TAG_TH:setTableCellAlignment(element,ui,valign,false);break;case HTMLElement.TAG_TR:setTableCellAlignmentTR(element,ui,valign,false);break;default :}}int transform=selector.getAttrVal(CSSElement.CSS_TEXT_TRANSFORM);if (transform != -1) {setTextTransformRecursive(ui,transform);}int indent=selector.getAttrLengthVal(CSSElement.CSS_TEXT_INDENT,ui,htmlC.getWidth());if (indent >= 0) {setTextIndentationRecursive(ui,indent);}String fontFamily=selector.getAttributeById(CSSElement.CSS_FONT_FAMILY);if (fontFamily != null) {int index=fontFamily.indexOf(',');if (index != -1) {fontFamily=fontFamily.substring(0,index);}}int fontStyle=selector.getAttrVal(CSSElement.CSS_FONT_STYLE);int fontWeight=selector.getAttrVal(CSSElement.CSS_FONT_WEIGHT);int fontSize=selector.getAttrLengthVal(CSSElement.CSS_FONT_SIZE,ui,ui.getStyle().getFont().getHeight());if (fontSize < -1) {int curSize=ui.getStyle().getFont().getHeight();if (fontSize == CSSElement.FONT_SIZE_LARGER) {fontSize=curSize + 2;} else if (fontSize == CSSElement.FONT_SIZE_SMALLER) {fontSize=curSize - 2;}}int fontVariant=selector.getAttrVal(CSSElement.CSS_FONT_VARIANT);if ((fontVariant == FONT_VARIANT_SMALLCAPS) && (htmlC.isSmallCapsFontAvailable())) {fontFamily=CSSElement.SMALL_CAPS_STRING;}if ((fontFamily != null) || (fontSize != -1) || (fontStyle != -1)|| (fontWeight != -1)) {setFontRecursive(htmlC,ui,fontFamily,fontSize,fontStyle,fontWeight,selector);}int listType=-1;String listImg=null;Component borderUi=ui;if ((element.getTagId() == HTMLElement.TAG_LI) || (element.getTagId() == HTMLElement.TAG_UL) || (element.getTagId() == HTMLElement.TAG_OL)|| (element.getTagId() == HTMLElement.TAG_DIR)|| (element.getTagId() == HTMLElement.TAG_MENU)) {int listPos=selector.getAttrVal(CSSElement.CSS_LIST_STYLE_POSITION);if (listPos == LIST_STYLE_POSITION_INSIDE) {ui.getStyle().setPadding(Component.LEFT,ui.getStyle().getMargin(Component.LEFT) + INDENT_LIST_STYLE_POSITION);Container parent=ui.getParent();if (parent.getLayout() instanceof BorderLayout) {borderUi=parent;}}listType=selector.getAttrVal(CSSElement.CSS_LIST_STYLE_TYPE);listImg=getCSSUrl(selector.getAttributeById(CSSElement.CSS_LIST_STYLE_IMAGE));}Border[] borders=new Border[4];boolean leftBorder=false;boolean rightBorder=false;boolean hasBorder=false;if ((borderUi == ui) && (element.getUi().size() > 1)) {if (element.getUi().firstElement() == borderUi) {leftBorder=true;} else if (element.getUi().lastElement() == borderUi) {rightBorder=true;}} else {leftBorder=true;rightBorder=true;}for (int i=Component.TOP; i <= Component.RIGHT; i++) {if ((i == Component.BOTTOM) || (i == Component.TOP) || ((i == Component.LEFT) && (leftBorder))|| ((i == Component.RIGHT) && (rightBorder))) {borders[i]=createBorder(selector,borderUi,i,styles,BORDER);if (borders[i] != null) {hasBorder=true;}}}if (hasBorder) {Border curBorder=borderUi.getUnselectedStyle().getBorder();if (((styles & STYLE_SELECTED) != 0) && ((styles & STYLE_UNSELECTED) == 0)) {curBorder=borderUi.getSelectedStyle().getBorder();}if ((styles & STYLE_PRESSED) != 0) {curBorder=((HTMLLink)borderUi).getSelectedStyle().getBorder();}if ((curBorder != null) && (curBorder.getCompoundBorders() != null)) {Border[] oldBorders=curBorder.getCompoundBorders();for (int i=Component.TOP; i <= Component.RIGHT; i++) {if (borders[i] == null) {borders[i]=oldBorders[i];}}}Border border=Border.createCompoundBorder(borders[Component.TOP],borders[Component.BOTTOM],borders[Component.LEFT],borders[Component.RIGHT]);if (border != null) {if ((styles & STYLE_SELECTED) != 0) {borderUi.getSelectedStyle().setBorder(border);}if ((styles & STYLE_UNSELECTED) != 0) {borderUi.getUnselectedStyle().setBorder(border);}if ((styles & STYLE_PRESSED) != 0) {((HTMLLink)borderUi).getPressedStyle().setBorder(border);}if (borderUi.getParent() != null) {borderUi.getParent().revalidate();} else if (borderUi instanceof Container) {((Container)borderUi).revalidate();}}}v=selector.getAttributeById(CSSElement.CSS_WAP_ACCESSKEY);if ((v != null) && (v.length() >= 1) && ((element.getTagId() == HTMLElement.TAG_INPUT) || (element.getTagId() == HTMLElement.TAG_TEXTAREA) || (element.getTagId() == HTMLElement.TAG_LABEL)|| ((element.getTagId() == HTMLElement.TAG_A) && (ui instanceof HTMLLink) && ((HTMLLink)ui).parentLink == null))) {int index=v.indexOf(',');boolean assigned=false;while (index != -1) {String key=v.substring(0,index).trim();v=v.substring(index + 1);assigned=processAccessKeys(key,htmlC,ui);if (assigned) {break;}index=v.indexOf(',');}if (!assigned) {processAccessKeys(v.trim(),htmlC,ui);}}if (!HTMLComponent.PROCESS_HTML_MP1_ONLY) {int decoration=selector.getAttrVal(CSSElement.CSS_TEXT_DECORATION);if (decoration == TEXT_DECOR_NONE) {removeTextDecorationRecursive(ui,selector);} else if (decoration == TEXT_DECOR_UNDERLINE) {setTextDecorationRecursive(ui,Style.TEXT_DECORATION_UNDERLINE,selector);} else if (decoration == TEXT_DECOR_LINETHROUGH) {setTextDecorationRecursive(ui,Style.TEXT_DECORATION_STRIKETHRU,selector);} else if (decoration == TEXT_DECOR_OVERLINE) {setTextDecorationRecursive(ui,Style.TEXT_DECORATION_OVERLINE,selector);}if (!HTMLComponent.FIXED_WIDTH) {int wordSpace=selector.getAttrLengthVal(CSSElement.CSS_WORD_SPACING,ui,0);if (wordSpace != -1) {setWordSpacingRecursive(ui,wordSpace);}}int lineHeight=selector.getAttrLengthVal(CSSElement.CSS_LINE_HEIGHT,ui,ui.getStyle().getFont().getHeight());if (lineHeight != -1) {lineHeight=Math.max(0,lineHeight - ui.getStyle().getFont().getHeight());setLineHeightRecursive(ui,lineHeight / 2);}String quotesStr=selector.getAttributeById(CSSElement.CSS_QUOTES);if (quotesStr != null) {Vector quotes=htmlC.getWords(quotesStr,Component.LEFT,false);int size=quotes.size();if ((size == 2) || (size == 4)) {String[] quotesArr=new String[4];for (int i=0; i < size; i++) {quotesArr[i]=omitQuotesIfExist((String)quotes.elementAt(i));}if (size == 2) {quotesArr[2]=quotesArr[0];quotesArr[3]=quotesArr[1];}setQuotesRecursive(ui,quotesArr);}}Border outline=createBorder(selector,borderUi,0,styles,OUTLINE);if (outline != null) {if ((styles & STYLE_SELECTED) != 0) {addOutlineToStyle(borderUi.getSelectedStyle(),outline);}if ((styles & STYLE_UNSELECTED) != 0) {addOutlineToStyle(borderUi.getUnselectedStyle(),outline);}if ((styles & STYLE_PRESSED) != 0) {addOutlineToStyle(((HTMLLink)borderUi).getPressedStyle(),outline);}if (borderUi.getParent() != null) {borderUi.getParent().revalidate();} else if (borderUi instanceof Container) {((Container)borderUi).revalidate();}}int dir=selector.getAttrVal(CSSElement.CSS_DIRECTION);if (dir != -1) {setDirectionRecursive(ui,dir == DIRECTION_RTL);}if (ui instanceof HTMLTable) {int tableProp=selector.getAttrVal(CSSElement.CSS_BORDER_COLLAPSE);if (tableProp != -1) {((HTMLTable)ui).setCollapseBorder(tableProp == BORDER_COLLAPSE_COLLAPSE);}tableProp=selector.getAttrVal(CSSElement.CSS_EMPTY_CELLS);if (tableProp != -1) {((HTMLTable)ui).setDrawEmptyCellsBorder(tableProp == EMPTY_CELLS_SHOW);}tableProp=selector.getAttrVal(CSSElement.CSS_CAPTION_SIDE);if (tableProp != -1) {Container tableParentCont=ui.getParent();int tablePos=tableParentCont.getComponentIndex(ui);if (tableProp != tablePos) {Component caption=tableParentCont.getComponentAt((tablePos + 1) % 2);tableParentCont.removeComponent(caption);tableParentCont.addComponent(tablePos,caption);}}String spacing=selector.getAttributeById(CSSElement.CSS_BORDER_SPACING);if (spacing != null) {spacing=spacing.trim();int index=spacing.indexOf(' ');int spaceH=0;int spaceV=0;if (index == -1) {spaceH=CSSElement.convertLengthVal(CSSElement.convertUnitsOrPercentage(spacing),ui,ui.getPreferredW());spaceV=spaceH;} else {String spaceHoriz=spacing.substring(0,index);String spaceVert=spacing.substring(index + 1);spaceH=CSSElement.convertLengthVal(CSSElement.convertUnitsOrPercentage(spaceHoriz),ui,ui.getPreferredW());spaceV=CSSElement.convertLengthVal(CSSElement.convertUnitsOrPercentage(spaceVert),ui,ui.getPreferredH());}((HTMLTable)ui).setBorderSpacing(spaceH,spaceV);}}}if ((listType != -1) || (listImg != null)) {if (element.getTagId() == HTMLElement.TAG_LI) {if (ui instanceof Container) {Container liCont=(Container)ui;Container liParent=liCont.getParent();Component firstComp=liParent.getComponentAt(0);if (firstComp instanceof Container) {Container bulletCont=(Container)firstComp;if (bulletCont.getComponentCount() > 0) {Component listItemCmp=bulletCont.getComponentAt(0);if (listItemCmp instanceof Component) {HTMLListItem listItem=((HTMLListItem)listItemCmp);listItem.setStyleType(listType);listItem.setImage(listImg);}}}}} else if ((element.getTagId() == HTMLElement.TAG_UL) || (element.getTagId() == HTMLElement.TAG_OL) || (element.getTagId() == HTMLElement.TAG_DIR)|| (element.getTagId() == HTMLElement.TAG_MENU)) {Container ulCont=(Container)ui;for (int i=0; i < ulCont.getComponentCount(); i++) {Component cmp=ulCont.getComponentAt(i);if (cmp instanceof Container) {Container liCont=(Container)cmp;if (liCont.getComponentCount() >= 1) {cmp=liCont.getComponentAt(0);if (cmp instanceof Container) {Container liContFirstLine=(Container)cmp;if (liContFirstLine.getComponentCount() >= 1) {cmp=liContFirstLine.getComponentAt(0);if (cmp instanceof HTMLListItem) {HTMLListItem listItem=(HTMLListItem)cmp;listItem.setStyleType(listType);listItem.setImage(listImg);}}}}}}}}}  }
class C{  public BinaryTypeImpl wrap(BinaryContext ctx){  return new BinaryTypeImpl(ctx,this);}  }
class C{  private void updateForNewPosition(){  if (!currentPosition.equals("Top 100 Recruits")) {    String[] splitty=currentPosition.split(" ");    setPlayerList(splitty[0]);    setPlayerInfoMap(splitty[0]);    expListAdapter.notifyDataSetChanged();  } else {    players=availAll;    playersInfo=new LinkedHashMap<String,List<String>>();    for (    String p : players) {      ArrayList<String> pInfoList=new ArrayList<String>();      pInfoList.add(getPlayerDetails(p,p.split(",")[0]));      playersInfo.put(p.substring(0,p.length() - 2),pInfoList);    }    expListAdapter.notifyDataSetChanged();  }}  }
class C{  public static double jaccard(String strA,String strB){  Set<String> setA=jaccardSet(strA);  Set<String> setB=jaccardSet(strB);  return jaccard(setA,setB);}  }
class C{  @Override public void onCancel(Bundle cause){  if (BuildConfig.DEBUG) {    Log.e(TAG,"User cancelled authorization");    Util.showAuthToast(mContext,"Authorization cancelled");  }  if (mCallback != null) {    mCallback.onCancel();  }}  }
class C{  private void createFieldAnnotation(JCas jcas,String localName,int begin,int end){  String fieldName=null;  if (useSubstitution) {    fieldName=substitution.get(localName);    if (fieldName == null) {      fieldName=localName;    }  } else {    fieldName=localName;  }  Field field=new Field(jcas,begin,end);  field.setName(fieldName);  field.addToIndexes();}  }
class C{  public final void writeBoolean(boolean val) throws IOException {  out.write(val ? 1 : 0);  written++;}  }
class C{  public static void mergePropertiesIntoMap(Properties props,Map map){  if (map == null) {    throw new IllegalArgumentException("Map must not be null");  }  if (props != null) {    for (Enumeration en=props.propertyNames(); en.hasMoreElements(); ) {      String key=(String)en.nextElement();      map.put(key,props.getProperty(key));    }  }}  }
class C{  @DSComment("Data structure/no action") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:51.995 -0500",hash_original_method="8ACE5368F7F34FD7A997EC13F4BFCCE5",hash_generated_method="E655A327F19083075E83F5EF7D96B406") public boolean isPassword(){  return getBooleanProperty(PROPERTY_PASSWORD);}  }
class C{  final boolean acquireQueued(final Node node,int arg){  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return interrupted;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public void testgetPasswordForUser() throws ConfigurationException {  PasswordManager pwd=null;  String goodPassword=null;  try {    pwd=new PasswordManager("sample.security.properties");  } catch (  ConfigurationException e) {    assertTrue(false);  }  goodPassword=pwd.getClearTextPasswordForUser("tungsten");  assertNotNull(goodPassword);  goodPassword=pwd.getClearTextPasswordForUser("non_existing_user");  assertNull(goodPassword);}  }
class C{  protected void checkNegativeSpiProperty(IgniteSpi spi,String propName,Object val,boolean checkExMsg) throws Exception {  assert spi != null;  assert propName != null;  getTestData().getTestResources().inject(spi);  String mtdName="set" + propName.substring(0,1).toUpperCase() + propName.substring(1);  Method mtd=null;  for (  Method m : spi.getClass().getMethods())   if (m.getName().equals(mtdName)) {    mtd=m;    break;  }  assert mtd != null : "The setter is not found for property: " + propName;  boolean err=false;  try {    mtd.invoke(spi,val);  } catch (  InvocationTargetException e) {    info("SPI property setter thrown exception: " + e);    if (e.getCause() instanceof IllegalArgumentException)     err=true; else     throw e;  }  if (!err)   try {    if (!(spi instanceof DiscoverySpi))     spi.getNodeAttributes();    spi.spiStart(getTestGridName());  } catch (  IgniteSpiException e) {    info("SPI start thrown exception: " + e);    if (checkExMsg)     assert e.getMessage().contains("SPI parameter failed condition check: ") : "SPI has returned wrong exception message [propName=" + propName + ", msg="+ e+ ']';    err=true;  }  assert err : "No check for property [property=" + propName + ", value="+ val+ ']';}  }
class C{  public static String clreol(){  return ESC + "[K";}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  public MRegion(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  public SimpleBinding(String name,Value value){  assert name != null : "name must not be null";  assert value != null : "value must not be null";  this.name=name;  this.value=value;}  }
class C{  public void stopImmediately(){  this.donePlaying=true;  this.repeat=false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static <T>boolean addAll(Collection<T> self,Iterator<? extends T> items){  boolean changed=false;  while (items.hasNext()) {    T next=items.next();    if (self.add(next))     changed=true;  }  return changed;}  }
class C{  public static int hash(Object key){  return hash(key.hashCode());}  }
class C{  public Token(int kind){  this(kind,null);}  }
class C{  private void initBPartner(){  m_greeting=fillGreeting();  fValue.addEventListener(Events.ON_CHANGE,this);  createLine(fValue,"Value",true);  fGreetingBP.setMold("select");  fGreetingBP.setRows(0);  for (int i=0; i < m_greeting.length; i++)   fGreetingBP.appendItem(m_greeting[i].toString(),m_greeting[i]);  createLine(fGreetingBP,"Greeting",false);  fName.addEventListener(Events.ON_CLICK,this);  createLine(fName,"Name",false);  createLine(fName2,"Name2",false);  createLine(fContact,"Contact",true);  fGreetingC.setMold("select");  fGreetingC.setRows(0);  for (int i=0; i < m_greeting.length; i++)   fGreetingC.appendItem(m_greeting[i].toString(),m_greeting[i]);  createLine(fGreetingC,"Greeting",false);  createLine(fTitle,"Title",false);  createLine(fEMail,"EMail",false);  boolean ro=m_readOnly;  if (!ro)   ro=!MRole.getDefault().canUpdate(Env.getAD_Client_ID(Env.getCtx()),Env.getAD_Org_ID(Env.getCtx()),MBPartnerLocation.Table_ID,0,false);  if (!ro)   ro=!MRole.getDefault().canUpdate(Env.getAD_Client_ID(Env.getCtx()),Env.getAD_Org_ID(Env.getCtx()),MLocation.Table_ID,0,false);  fAddress=new WLocationEditor("C_Location_ID",false,ro,true,new MLocationLookup(Env.getCtx(),m_WindowNo));  fAddress.addValueChangeListener(this);  fAddress.setValue(null);  createLine(fAddress.getComponent(),"C_Location_ID",true);  createLine(fPhone,"Phone",true);  createLine(fPhone2,"Phone2",false);  createLine(fFax,"Fax",false);}  }
class C{  public static void finishMockSleep(){  if (mockSleepQueue != null) {    mockSleepQueue.offer(true);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:26.627 -0500",hash_original_method="18DD28AAA16190424D7A39669B473895",hash_generated_method="6F98FA24140B54FC18045E1E12996FA5") public Point[] newArray(int size){  return new Point[size];}  }
class C{  protected boolean skipCommaSpaces2() throws IOException {  wsp1:   for (; ; ) {switch (current) {default :      break wsp1;case 0x20:case 0x9:case 0xD:case 0xA:    break;}current=reader.read();}if (current != ',') return false;wsp2: for (; ; ) {switch (current=reader.read()) {default :  break wsp2;case 0x20:case 0x9:case 0xD:case 0xA:break;}}return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean overlap(UserGroup userGroup){  boolean overlaps=false;  if (!commonCompare(userGroup)) {    return overlaps;  }  if (!checkIfAllKeysAvailable(userGroup)) {    _log.debug("User group {} does not contain all the attribute keys of {}",userGroup.getLabel(),this.getLabel());    return overlaps;  }  for (  String attributeParamString : this._attributes) {    overlaps=checkOverlappingAttributes(userGroup,attributeParamString);    if (!overlaps) {      break;    }  }  return overlaps;}  }
class C{  @SuppressWarnings({"SuspiciousMethodCalls"}) @Override public boolean contains(Object o){  return map.containsKey(o);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.io.File f=getFile(stack);  return Boolean.valueOf(f != null && f.isFile());}  }
class C{  public ClcMessenger(@NotNull Configuration configuration,String context){  super(configuration);  setContext(context);  ((ClcContext)Storage.getStorageRuntime()).setContext(context);}  }
class C{  public static void close(InputStream in){  try {    if (in != null) {      in.close();    }  } catch (  IOException ioE) {  }}  }
class C{  public double evaluationForSingleInstance(double[] dist,Instance instance,boolean storePredictions) throws Exception {  double pred;  if (m_ClassIsNominal) {    pred=Utils.maxIndex(dist);    if (dist[(int)pred] <= 0) {      pred=Utils.missingValue();    }    updateStatsForClassifier(dist,instance);    if (storePredictions && !m_DiscardPredictions) {      if (m_Predictions == null) {        m_Predictions=new ArrayList<Prediction>();      }      m_Predictions.add(new NominalPrediction(instance.classValue(),dist,instance.weight()));    }  } else {    pred=dist[0];    updateStatsForPredictor(pred,instance);    if (storePredictions && !m_DiscardPredictions) {      if (m_Predictions == null) {        m_Predictions=new ArrayList<Prediction>();      }      m_Predictions.add(new NumericPrediction(instance.classValue(),pred,instance.weight()));    }  }  return pred;}  }
class C{  public boolean hasTransport(){  return hasParameter(TRANSPORT);}  }
class C{  protected <T>Database makeSimpleDatabase(String filename,int expectedSize){  return makeSimpleDatabase(filename,expectedSize,new ListParameterization(),null);}  }
class C{  public KeywordMap(boolean ignoreCase){  this(ignoreCase,52);  this.ignoreCase=ignoreCase;}  }
class C{  @ApiOperation(value="Create a Factory and return data",notes="Save factory to storage and return stored data. Field 'factoryUrl' should contains factory url information.",response=Factory.class,position=1) @ApiResponses(value={@ApiResponse(code=200,message="OK"),@ApiResponse(code=409,message="Conflict error. Some parameter is missing"),@ApiResponse(code=500,message="Unable to identify user from context")}) @RolesAllowed("user") @POST @Consumes({MediaType.MULTIPART_FORM_DATA}) @Produces({MediaType.APPLICATION_JSON}) public Factory saveFactory(Iterator<FileItem> formData,@Context UriInfo uriInfo) throws ApiException {  try {    EnvironmentContext context=EnvironmentContext.getCurrent();    if (context.getUser() == null || context.getUser().getName() == null || context.getUser().getId() == null) {      throw new ServerException("Unable to identify user from context");    }    Set<FactoryImage> images=new HashSet<>();    Factory factory=null;    while (formData.hasNext()) {      FileItem item=formData.next();      String fieldName=item.getFieldName();      if (fieldName.equals("factoryUrl")) {        try {          factory=factoryBuilder.buildEncoded(item.getInputStream());        } catch (        JsonSyntaxException e) {          throw new ConflictException("You have provided an invalid JSON.  For more information, " + "please visit http://docs.codenvy.com/user/creating-factories/factory-parameter-reference/");        }      } else       if (fieldName.equals("image")) {        try (InputStream inputStream=item.getInputStream()){          FactoryImage factoryImage=FactoryImage.createImage(inputStream,item.getContentType(),NameGenerator.generate(null,16));          if (factoryImage.hasContent()) {            images.add(factoryImage);          }        }       }    }    if (factory == null) {      LOG.warn("No factory URL information found in 'factoryUrl' section of multipart form-data.");      throw new ConflictException("No factory URL information found in 'factoryUrl' section of multipart/form-data.");    }    processDefaults(factory);    createValidator.validateOnCreate(factory);    String factoryId=factoryStore.saveFactory(factory,images);    factory=factoryStore.getFactory(factoryId);    factory=factory.withLinks(linksHelper.createLinks(factory,images,uriInfo));    LOG.info("EVENT#factory-created# WS#{}# USER#{}# PROJECT#{}# TYPE#{}# REPO-URL#{}# FACTORY-URL#{}# AFFILIATE-ID#{}# ORG-ID#{}#","",context.getUser().getName(),"",nullToEmpty(factory.getProject() != null ? factory.getProject().getType() : null),factory.getSource().getProject().getLocation(),linksHelper.getLinkByRelation(factory.getLinks(),"create-project").iterator().next().getHref(),"",nullToEmpty(factory.getCreator().getAccountId()));    return factory;  } catch (  IOException e) {    LOG.error(e.getLocalizedMessage(),e);    throw new ServerException(e.getLocalizedMessage(),e);  }}  }
class C{  private void fillLists(CnATreeElement el) throws CommandException {  for (  CnATreeElement cl : el.getChildren()) {    for (    CnATreeElement clcl : cl.getChildren()) {      if (clcl instanceof MassnahmenUmsetzung) {        TodoViewItem item=createToDoItem((MassnahmenUmsetzung)clcl);        if (item != null) {          massnahmen.add(item);        }      } else {        hydrate(clcl);        String entityTypeId=clcl.getTypeId();        if (Anwendung.TYPE_ID.equals(entityTypeId)) {          anwendungList.add(clcl);        } else         if (Client.TYPE_ID.equals(entityTypeId)) {          clienteList.add(clcl);        } else         if (Gebaeude.TYPE_ID.equals(entityTypeId)) {          gebaeudeList.add(clcl);        } else         if (Person.TYPE_ID.equals(entityTypeId)) {          personList.add(clcl);        } else         if (NetzKomponente.TYPE_ID.equals(entityTypeId)) {          netzList.add(clcl);        } else         if (Raum.TYPE_ID.equals(entityTypeId)) {          raumList.add(clcl);        } else         if (Server.TYPE_ID.equals(entityTypeId)) {          serverList.add(clcl);        } else         if (TelefonKomponente.TYPE_ID.equals(entityTypeId)) {          tkKomponenteList.add(clcl);        } else         if (SonstIT.TYPE_ID.equals(entityTypeId)) {          sonstItList.add(clcl);        } else {          LOG.error("Unknown object type: " + entityTypeId);        }      }    }  }  Collections.sort(anwendungList,cnAComparator);  Collections.sort(clienteList,cnAComparator);  Collections.sort(gebaeudeList,cnAComparator);  Collections.sort(personList,cnAComparator);  Collections.sort(netzList,cnAComparator);  Collections.sort(raumList,cnAComparator);  Collections.sort(serverList,cnAComparator);  Collections.sort(tkKomponenteList,cnAComparator);  Collections.sort(sonstItList,cnAComparator);  FindResponsiblePersons command=new FindResponsiblePersons(unresolvedItems,MassnahmenUmsetzung.P_VERANTWORTLICHE_ROLLEN_UMSETZUNG);  command=this.getCommandService().executeCommand(command);  unresolvedItems=command.getResolvedItems();  for (  UnresolvedItem resolvedItem : unresolvedItems) {    massnahmen.add(resolvedItem.getItem());  }}  }
class C{  public byte asByte(){  return asNumber().byteValue();}  }
class C{  private int checkUserLink(HtmlEscapeStringBuilder out,String in,int start){  int pos=start + 3;  StringBuilder temp=new StringBuilder();  String targetString=in.substring(pos,Math.min(in.length(),pos + Account.NAME_MAX));  for (int i=0; i < targetString.length(); i++) {    char c=targetString.charAt(i);    if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')|| c == '_') {      temp.append(c);    } else {      break;    }  }  String username=temp.toString();  if (username.length() < Account.NAME_MIN || username.equalsIgnoreCase("null")) {    return -1;  }  this.config.decorator.openLink(out);  out.appendHtml(" href=\"").append("/u/").append(username).appendHtml("\" class=\"user-link\">").append("/u/").append(username);  out.appendHtml("</a>");  return pos + username.length() - 1;}  }
class C{  public CopyOnAccessInMemoryStateInternals<?> commitState(){  if (stateInternals != null) {    return stateInternals.commit();  }  return null;}  }
class C{  public double interceptStdErr(){  return Math.sqrt(svar0);}  }
class C{  public void startReadingFromNextNode(){  if (isActive()) {    return;  }  final AccessibilityNodeInfoCompat currentNode=mCursorController.getCursor();  if (currentNode == null) {    return;  }  setReadingState(STATE_READING_FROM_NEXT);  mCursorController.setGranularity(CursorGranularity.DEFAULT,false);  if (!mWakeLock.isHeld()) {    mWakeLock.acquire();  }  if (WebInterfaceUtils.hasLegacyWebContent(currentNode)) {    moveIntoWebContent();  } else {    moveForward();  }  currentNode.recycle();}  }
class C{  @POST @Path("event") @Consumes(MediaType.APPLICATION_JSON) @ApiResponses(value={@ApiResponse(code=202,message="Successfully log"),@ApiResponse(code=400,message="Event doesn't comply requirements for parameters."),@ApiResponse(code=500,message="Unexpected error occurred")}) @ApiOperation(value="Log SaaS Codenvy Analytics event. Requirements for event parameters: " + " maximum parameters number = " + Event.MAX_EXTENDED_PARAMS_NUMBER + ", "+ " maximum parameter name length = "+ Event.MAX_PARAM_NAME_LENGTH+ ", "+ " maximum parameter value length = "+ Event.MAX_PARAM_VALUE_LENGTH) public Response logSaasAnalyticsEvent(Event event){  try {    Event.validateNumberOfParametersTreatingAsExtended(event.getParameters());    String saasUserToken=null;    if (saasUserCredentials != null) {      saasUserToken=saasUserCredentials.getToken();    }    facade.logSaasAnalyticsEvent(event,saasUserToken);    return Response.status(Response.Status.ACCEPTED).build();  } catch (  IllegalArgumentException e) {    return handleException(e,Response.Status.BAD_REQUEST);  }catch (  Exception e) {    return handleException(e);  }}  }
class C{  public MissingDataException(String msg){  super(msg);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:34.307 -0500",hash_original_method="55BF8FCE42D97AAB2D67412B08D832BA",hash_generated_method="632817AFA767493BA72EC19BBB90A656") protected void deleteLeastUsedEntry(){  try {    poolLock.lock();    BasicPoolEntry entry=freeConnections.remove();    if (entry != null) {      deleteEntry(entry);    } else     if (log.isDebugEnabled()) {      log.debug("No free connection to delete.");    }  }  finally {    poolLock.unlock();  }}  }
class C{  protected void applyToBlock(Block b){  if (b instanceof Title) {    applyToTitle((Title)b);  } else   if (b instanceof LabelBlock) {    LabelBlock lb=(LabelBlock)b;    lb.setFont(this.regularFont);    lb.setPaint(this.legendItemPaint);  }}  }
class C{  public void minus(Set x){  if (size() > x.size()) {    Enumeration elements=x.elements();    while (elements.hasMoreElements())     remove(elements.nextElement());  } else {    Enumeration elements=elements();    Object a;    while (elements.hasMoreElements()) {      a=elements.nextElement();      if (x.in(a))       remove(a);    }  }}  }
class C{  public static byte[] zipBytes(byte[] input) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream(DFLT_BUFFER_SIZE);  try (ZipOutputStream zos=new ZipOutputStream(baos)){    ZipEntry entry=new ZipEntry("");    try {      entry.setSize(input.length);      zos.putNextEntry(entry);      zos.write(input);    }  finally {      zos.closeEntry();    }  }   return baos.toByteArray();}  }
class C{  void convertObjectLiteral(Node classMembers,Node objectLiteralMember,boolean isStatic){  Preconditions.checkState(objectLiteralMember.isStringKey() || objectLiteralMember.isMemberFunctionDef());  Node value=objectLiteralMember.getFirstChild();  value.detachFromParent();  if (value.isFunction()) {    Node n=IR.memberFunctionDef(objectLiteralMember.getString(),value);    n.setJSDocInfo(objectLiteralMember.getJSDocInfo());    n.setStaticMember(isStatic);    classMembers.addChildToBack(n);    nodeComments.moveComment(objectLiteralMember,n);  } else {    Node n=Node.newString(Token.MEMBER_VARIABLE_DEF,objectLiteralMember.getString());    n.addChildToBack(value);    n.setJSDocInfo(objectLiteralMember.getJSDocInfo());    n.setStaticMember(isStatic);    addFieldToClassMembers(classMembers,n);    nodeComments.moveComment(objectLiteralMember,n);  }}  }
class C{  public void addStaticField(EncodedField field,Constant value){  if (field == null) {    throw new NullPointerException("field == null");  }  if (staticValuesConstant != null) {    throw new UnsupportedOperationException("static fields already sorted");  }  staticFields.add(field);  staticValues.put(field,value);}  }
class C{  public static boolean handleException(IOException ioe,ErrorType errorType){  Throwable e=ioe;  while (e != null) {    String msg=e.getMessage();    if (msg != null) {      msg=msg.toLowerCase();      DetailErrorType detailType=null;      if (StringUtils.contains(msg,"no space left") || StringUtils.contains(msg,"not enough space")) {        detailType=DetailErrorType.DISK_FULL;      } else       if (StringUtils.contains(msg,"being used by another process") || StringUtils.contains(msg,"with a user-mapped section open")) {        detailType=DetailErrorType.FILE_LOCKED;      } else       if (StringUtils.contains(msg,"access is denied") || StringUtils.contains(msg,"permission denied")) {        detailType=DetailErrorType.NO_PRIVS;      } else       if (StringUtils.contains(msg,"invalid argument")) {        detailType=DetailErrorType.BAD_CHARS;      }      if (detailType != null) {        MessageService.instance().showError(errorDescs.get(errorType).get(detailType));        return true;      }    }    e=e.getCause();  }  return false;}  }
class C{  protected String createOperationKey(String operation,int params){  return operation + "_" + params;}  }
class C{  public void addDataSources(final int numDataSources){  for (int i=0; i < numDataSources; i++) {    addDataSource();  }}  }
class C{  public ItemStack drainFluidItemStack(ItemStack container,INetworkCache network,ActionType action){  if (FluidContainerRegistry.isContainer(container)) {    return drainFluidContainer(container,network,action);  } else   if ((container.getItem() instanceof IFluidContainerItem)) {    return drainFluidHandler(container,network,action);  }  return container;}  }
class C{  public List<Local> listar(){  List<Local> dados=new ArrayList<>();  try {    String sql="SELECT local.*, setor.nome FROM tb_local AS local, tb_setor AS setor WHERE  local.fk_setor =  setor.id_setor ";    stm=conector.prepareStatement(sql);    rs=stm.executeQuery(sql);    while (rs.next()) {      Setor setor=new Setor(rs.getInt(4),rs.getString(5));      Local local=new Local(rs.getInt(1),rs.getString(2),rs.getString(3),setor);      dados.add(local);    }    stm.close();    rs.close();  } catch (  SQLException ex) {    Mensagem.erro("Erro ao consultar local na base de dados! \n" + ex);  }  return dados;}  }
class C{  private void checkClosed(){  if (closed)   throw DbException.throwInternalError();}  }
class C{  private void ensureNotClosed() throws SQLException {  if (closed)   throw new SQLException("Result set is closed.");}  }
class C{  @Deprecated public static Sort parseSort(String sortSpec,SolrQueryRequest req){  return parseSortSpec(sortSpec,req).getSort();}  }
class C{  private static void updateStatisticsContainer(Context context,RemoteViews remoteViews,Track track){  PendingIntent pendingIntent;  if (track != null) {    Intent intent=IntentUtils.newIntent(context,TrackDetailActivity.class).putExtra(TrackDetailActivity.EXTRA_TRACK_ID,track.getId());    pendingIntent=TaskStackBuilder.create(context).addParentStack(TrackDetailActivity.class).addNextIntent(intent).getPendingIntent(0,0);  } else {    Intent intent=IntentUtils.newIntent(context,TrackListActivity.class);    pendingIntent=TaskStackBuilder.create(context).addNextIntent(intent).getPendingIntent(0,0);  }  remoteViews.setOnClickPendingIntent(R.id.track_widget_stats_container,pendingIntent);}  }
class C{  public CopyOnWriteArrayList(Collection<? extends E> c){  Object[] elements;  if (c.getClass() == CopyOnWriteArrayList.class)   elements=((CopyOnWriteArrayList<?>)c).getArray(); else {    elements=c.toArray();    if (elements.getClass() != Object[].class)     elements=Arrays.copyOf(elements,elements.length,Object[].class);  }  setArray(elements);}  }
class C{  @Field(13) public __VARIANT_NAME_3_union pdispVal(Pointer<IDispatch> pdispVal){  this.io.setPointerField(this,13,pdispVal);  return this;}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) public boolean isShowPickedLine(){  return this.showPickedLine;}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.ACTION_ARGUMENTS;}  }
class C{  protected final void notifyPrimaryClipChanged(){synchronized (mPrimaryClipChangedListeners) {    for (int i=0; i < mPrimaryClipChangedListeners.size(); i++) {      mPrimaryClipChangedListeners.get(i).onPrimaryClipChanged();    }  }}  }
class C{  public TextNode(){}  }
class C{  final Node predecessor() throws NullPointerException {  Node p=prev;  if (p == null)   throw new NullPointerException(); else   return p;}  }
class C{  private void handle403Forbidden(){  Context appContext=AndroidFactory.getApplicationContext();  int regForbiddenCount=LauncherUtils.getRegForbiddenCount(appContext);  if (regForbiddenCount < MAX_403_REGISTRATION_FAILURES) {    if (sLogger.isActivated()) {      sLogger.debug("Received 403 Forbidden : Retry count " + regForbiddenCount);    }    regForbiddenCount++;    LauncherUtils.setRegForbiddenCount(appContext,regForbiddenCount);    LauncherUtils.stopRcsCoreService(appContext);    HttpsProvisioningService.startHttpsProvisioningService(appContext,true,false);  } else {    if (sLogger.isActivated()) {      sLogger.debug("Received 403 Forbidden & Reached max retry count");    }    LauncherUtils.stopRcsService(appContext);    mRcsSettings.resetConfigParameters();    mRcsSettings.setConfigurationValid(false);    LauncherUtils.setRegForbiddenCount(appContext,0);  }}  }
class C{  @Override public void close() throws IOException {  flush();  writer.close();}  }
class C{  public void addHostkeys(File knownHosts) throws IOException {  initialize(knownHosts);}  }
class C{  protected void systemsMenu(JMenuBar menuBar,WindowInterface wi){  ActiveSystemsMenu.addItems(menuBar);}  }
class C{  @Ignore("recursion not supported") @Test public void testCyclicReplacement(){  final Map<String,String> map=new HashMap<String,String>();  map.put("animal","${critter}");  map.put("target","${pet}");  map.put("pet","${petCharacteristic} dog");  map.put("petCharacteristic","lazy");  map.put("critter","${critterSpeed} ${critterColor} ${critterType}");  map.put("critterSpeed","quick");  map.put("critterColor","brown");  map.put("critterType","${animal}");  InternalStrSubstitutor sub=new InternalStrSubstitutor(map);  try {    sub.replace("The ${animal} jumps over the ${target}.");    fail("Cyclic replacement was not detected!");  } catch (  final IllegalStateException ex) {  }  map.put("critterType","${animal:-fox}");  sub=new InternalStrSubstitutor(map);  try {    sub.replace("The ${animal} jumps over the ${target}.");    fail("Cyclic replacement was not detected!");  } catch (  final IllegalStateException ex) {  }}  }
class C{  public int size(){  return data.size();}  }
class C{  public static long flags(JCTree tree){switch (tree.getTag()) {case VARDEF:    return ((JCVariableDecl)tree).mods.flags;case METHODDEF:  return ((JCMethodDecl)tree).mods.flags;case CLASSDEF:return ((JCClassDecl)tree).mods.flags;case BLOCK:return ((JCBlock)tree).flags;default :return 0;}}  }
class C{  public void removeEventListenerNS(String namespaceURI,String type,EventListener listener,boolean useCapture){  super.removeEventListenerNS(namespaceURI,type,listener,useCapture);  if (namespaceURI == null || namespaceURI.equals(XMLConstants.XML_EVENTS_NAMESPACE_URI)) {    String alias=(String)eventTypeAliases.get(type);    if (alias != null) {      super.removeEventListenerNS(namespaceURI,alias,listener,useCapture);    }  }}  }
class C{  public T addHighlightedField(String name){  highlightBuilder().field(name);  return (T)this;}  }
class C{  @Override public void run(){  amIActive=true;  int numFiles;  String fileName;  File file;  int progress=0;  int a, i;  String inputFilesString=null;  String[] imageFiles;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numFiles=imageFiles.length;  if (numFiles < 1) {    showFeedback("At least one file must be specified.");    return;  }  try {    updateProgress("Deleting files:",0);    for (a=0; a < numFiles; a++) {      fileName=imageFiles[a];      file=new File(fileName);      if (file.exists()) {        file.delete();      }      if (fileName.toLowerCase().endsWith(".dep")) {        file=new File(fileName.replace(".dep",".tas"));        if (file.exists()) {          file.delete();        }        file=new File(fileName.replace(".dep",".wstat"));        if (file.exists()) {          file.delete();        }      } else       if (fileName.toLowerCase().endsWith(".shp")) {        file=new File(fileName.replace(".shp",".shx"));        if (file.exists()) {          file.delete();        }        file=new File(fileName.replace(".shp",".dbf"));        if (file.exists()) {          file.delete();        }        file=new File(fileName.replace(".shp",".prj"));        if (file.exists()) {          file.delete();        }        file=new File(fileName.replace(".shp",".sbn"));        if (file.exists()) {          file.delete();        }        file=new File(fileName.replace(".shp",".sbx"));        if (file.exists()) {          file.delete();        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * a / (numFiles - 1));      updateProgress(progress);    }    showFeedback("Operation complete.");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static boolean isNotEmpty(String str){  return ((str != null) && (str.trim().length() > 0));}  }
class C{  public ReadSerialDiagnosticsRequest(){  super();  setFunctionCode(Modbus.READ_SERIAL_DIAGNOSTICS);  setDataLength(4);}  }
class C{  private void registerInitiators(VPlexClusterInfo clusterInfo,List<VPlexInitiatorInfo> initiatorInfoList) throws VPlexApiException {  for (  VPlexInitiatorInfo initiatorInfo : initiatorInfoList) {    if (!initiatorInfo.getName().startsWith(VPlexApiConstants.UNREGISTERED_INITIATOR_PREFIX)) {      continue;    }    String initiatorName=initiatorInfo.getName();    s_logger.info("Registering initiator {}",initiatorName);    ClientResponse response=null;    try {      StringBuilder argBuilder=new StringBuilder();      argBuilder.append(initiatorInfo.getPortWwnRaw());      String nodeWWN=initiatorInfo.getNodeWwnRaw();      String portWWN=initiatorInfo.getPortWwnRaw();      if ((nodeWWN != null) && (nodeWWN.length() != 0)) {        argBuilder.append(VPlexApiConstants.INITIATOR_REG_DELIM);        argBuilder.append(nodeWWN);      }      URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_REGISTER_INITIATOR);      s_logger.info("Register initiator URI is {}",requestURI.toString());      Map<String,String> argsMap=new HashMap<String,String>();      argsMap.put(VPlexApiConstants.ARG_DASH_I,initiatorInfo.getRegistrationName());      argsMap.put(VPlexApiConstants.ARG_DASH_P,argBuilder.toString());      argsMap.put(VPlexApiConstants.ARG_DASH_C,clusterInfo.getPath());      if (isRecoverPointInitiator(portWWN)) {        argsMap.put(VPlexApiConstants.ARG_DASH_T,"recoverpoint");      }      Initiator_Type initiatorType=initiatorInfo.getInitiatorType();      if (initiatorType != Initiator_Type.DEFAULT) {        argsMap.put(VPlexApiConstants.ARG_DASH_T,initiatorType.getType());      }      JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,false);      s_logger.info("Register initiator POST data is {}",postDataObject.toString());      response=_vplexApiClient.post(requestURI,postDataObject.toString());      String responseStr=response.getEntity(String.class);      s_logger.info("Register initiator response is {}",responseStr);      if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {        if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {          s_logger.info("Initiator registration completing asynchronously");          _vplexApiClient.waitForCompletion(response);        } else {          String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);          throw VPlexApiException.exceptions.registerInitiatorFailureStatus(initiatorName,String.valueOf(response.getStatus()),cause);        }      }      initiatorInfo.updateOnRegistration();      s_logger.info(String.format("Successfully registered initiator %s",initiatorInfo.getName()));    } catch (    VPlexApiException vae) {      throw vae;    }catch (    Exception e) {      throw VPlexApiException.exceptions.failedRegisterInitiator(initiatorName,e);    } finally {      if (response != null) {        response.close();      }    }  }}  }
class C{  public static void divCol(Matrix A,int j,int start,int to,double c){  for (int i=start; i < to; i++)   A.set(i,j,A.get(i,j) / c);}  }
class C{  public Train(Element e){  org.jdom2.Attribute a;  if ((a=e.getAttribute(Xml.ID)) != null) {    _id=a.getValue();  } else {    log.warn("no id attribute in train element when reading operations");  }  if ((a=e.getAttribute(Xml.NAME)) != null) {    _name=a.getValue();  }  if ((a=e.getAttribute(Xml.DESCRIPTION)) != null) {    _description=a.getValue();  }  if ((a=e.getAttribute(Xml.DEPART_HOUR)) != null) {    String hour=a.getValue();    if ((a=e.getAttribute(Xml.DEPART_MINUTE)) != null) {      String minute=a.getValue();      setDepartureTime(hour,minute);    }  }  Element eRowColor=e.getChild(Xml.ROW_COLOR);  if (eRowColor != null && (a=eRowColor.getAttribute(Xml.NAME)) != null) {    _tableRowColorName=a.getValue();  }  if (eRowColor != null && (a=eRowColor.getAttribute(Xml.RESET_ROW_COLOR)) != null) {    _tableRowColorResetName=a.getValue();  }  Element eRoute=e.getChild(Xml.ROUTE);  if (eRoute != null) {    if ((a=eRoute.getAttribute(Xml.ID)) != null) {      setRoute(RouteManager.instance().getRouteById(a.getValue()));    }    if (eRoute.getChild(Xml.SKIPS) != null) {      @SuppressWarnings("unchecked") List<Element> skips=eRoute.getChild(Xml.SKIPS).getChildren(Xml.LOCATION);      String[] locs=new String[skips.size()];      for (int i=0; i < skips.size(); i++) {        Element loc=skips.get(i);        if ((a=loc.getAttribute(Xml.ID)) != null) {          locs[i]=a.getValue();        }      }      setTrainSkipsLocations(locs);    }  } else {    if ((a=e.getAttribute(Xml.ROUTE_ID)) != null) {      setRoute(RouteManager.instance().getRouteById(a.getValue()));    } else     if ((a=e.getAttribute(Xml.ROUTE)) != null) {      setRoute(RouteManager.instance().getRouteByName(a.getValue()));    }    if ((a=e.getAttribute(Xml.SKIP)) != null) {      String locationIds=a.getValue();      String[] locs=locationIds.split("%%");      setTrainSkipsLocations(locs);    }  }  if (e.getChild(Xml.TYPES) != null) {    @SuppressWarnings("unchecked") List<Element> carTypes=e.getChild(Xml.TYPES).getChildren(Xml.CAR_TYPE);    String[] types=new String[carTypes.size()];    for (int i=0; i < carTypes.size(); i++) {      Element type=carTypes.get(i);      if ((a=type.getAttribute(Xml.NAME)) != null) {        types[i]=a.getValue();      }    }    setTypeNames(types);    @SuppressWarnings("unchecked") List<Element> locoTypes=e.getChild(Xml.TYPES).getChildren(Xml.LOCO_TYPE);    types=new String[locoTypes.size()];    for (int i=0; i < locoTypes.size(); i++) {      Element type=locoTypes.get(i);      if ((a=type.getAttribute(Xml.NAME)) != null) {        types[i]=a.getValue();      }    }    setTypeNames(types);  } else   if ((a=e.getAttribute(Xml.CAR_TYPES)) != null) {    String names=a.getValue();    String[] types=names.split("%%");    setTypeNames(types);  }  if ((a=e.getAttribute(Xml.CAR_ROAD_OPERATION)) != null) {    _roadOption=a.getValue();  }  if ((a=e.getAttribute(Xml.CAR_ROAD_OPTION)) != null) {    _roadOption=a.getValue();  }  if (e.getChild(Xml.CAR_ROADS) != null) {    @SuppressWarnings("unchecked") List<Element> carRoads=e.getChild(Xml.CAR_ROADS).getChildren(Xml.CAR_ROAD);    String[] roads=new String[carRoads.size()];    for (int i=0; i < carRoads.size(); i++) {      Element road=carRoads.get(i);      if ((a=road.getAttribute(Xml.NAME)) != null) {        roads[i]=a.getValue();      }    }    setRoadNames(roads);  } else   if ((a=e.getAttribute(Xml.CAR_ROADS)) != null) {    String names=a.getValue();    String[] roads=names.split("%%");    log.debug("Train ({}) {} car roads: {}",getName(),getRoadOption(),names);    setRoadNames(roads);  }  if ((a=e.getAttribute(Xml.CAR_LOAD_OPTION)) != null) {    _loadOption=a.getValue();  }  if ((a=e.getAttribute(Xml.CAR_OWNER_OPTION)) != null) {    _ownerOption=a.getValue();  }  if ((a=e.getAttribute(Xml.BUILT_START_YEAR)) != null) {    _builtStartYear=a.getValue();  }  if ((a=e.getAttribute(Xml.BUILT_END_YEAR)) != null) {    _builtEndYear=a.getValue();  }  if (e.getChild(Xml.CAR_LOADS) != null) {    @SuppressWarnings("unchecked") List<Element> carLoads=e.getChild(Xml.CAR_LOADS).getChildren(Xml.CAR_LOAD);    String[] loads=new String[carLoads.size()];    for (int i=0; i < carLoads.size(); i++) {      Element load=carLoads.get(i);      if ((a=load.getAttribute(Xml.NAME)) != null) {        loads[i]=a.getValue();      }    }    setLoadNames(loads);  } else   if ((a=e.getAttribute(Xml.CAR_LOADS)) != null) {    String names=a.getValue();    String[] loads=names.split("%%");    log.debug("Train ({}) {} car loads: {}",getName(),getLoadOption(),names);    setLoadNames(loads);  }  if (e.getChild(Xml.CAR_OWNERS) != null) {    @SuppressWarnings("unchecked") List<Element> carOwners=e.getChild(Xml.CAR_OWNERS).getChildren(Xml.CAR_OWNER);    String[] owners=new String[carOwners.size()];    for (int i=0; i < carOwners.size(); i++) {      Element owner=carOwners.get(i);      if ((a=owner.getAttribute(Xml.NAME)) != null) {        owners[i]=a.getValue();      }    }    setOwnerNames(owners);  } else   if ((a=e.getAttribute(Xml.CAR_OWNERS)) != null) {    String names=a.getValue();    String[] owners=names.split("%%");    log.debug("Train ({}) {} car owners: {}",getName(),getOwnerOption(),names);    setOwnerNames(owners);  }  if ((a=e.getAttribute(Xml.NUMBER_ENGINES)) != null) {    _numberEngines=a.getValue();  }  if ((a=e.getAttribute(Xml.LEG2_ENGINES)) != null) {    _leg2Engines=a.getValue();  }  if ((a=e.getAttribute(Xml.LEG3_ENGINES)) != null) {    _leg3Engines=a.getValue();  }  if ((a=e.getAttribute(Xml.ENGINE_ROAD)) != null) {    _engineRoad=a.getValue();  }  if ((a=e.getAttribute(Xml.LEG2_ROAD)) != null) {    _leg2Road=a.getValue();  }  if ((a=e.getAttribute(Xml.LEG3_ROAD)) != null) {    _leg3Road=a.getValue();  }  if ((a=e.getAttribute(Xml.ENGINE_MODEL)) != null) {    _engineModel=a.getValue();  }  if ((a=e.getAttribute(Xml.LEG2_MODEL)) != null) {    _leg2Model=a.getValue();  }  if ((a=e.getAttribute(Xml.LEG3_MODEL)) != null) {    _leg3Model=a.getValue();  }  if ((a=e.getAttribute(Xml.REQUIRES)) != null) {    try {      _requires=Integer.parseInt(a.getValue());    } catch (    NumberFormatException ee) {      log.error("Requires ({}) isn't a valid number for train ({})",a.getValue(),getName());    }  }  if ((a=e.getAttribute(Xml.CABOOSE_ROAD)) != null) {    _cabooseRoad=a.getValue();  }  if ((a=e.getAttribute(Xml.LEG2_CABOOSE_ROAD)) != null) {    _leg2CabooseRoad=a.getValue();  }  if ((a=e.getAttribute(Xml.LEG3_CABOOSE_ROAD)) != null) {    _leg3CabooseRoad=a.getValue();  }  if ((a=e.getAttribute(Xml.LEG2_OPTIONS)) != null) {    try {      _leg2Options=Integer.parseInt(a.getValue());    } catch (    NumberFormatException ee) {      log.error("Leg 2 options ({}) isn't a valid number for train ({})",a.getValue(),getName());    }  }  if ((a=e.getAttribute(Xml.LEG3_OPTIONS)) != null) {    try {      _leg3Options=Integer.parseInt(a.getValue());    } catch (    NumberFormatException ee) {      log.error("Leg 3 options ({}) isn't a valid number for train ({})",a.getValue(),getName());    }  }  if ((a=e.getAttribute(Xml.BUILD_NORMAL)) != null) {    _buildNormal=a.getValue().equals(Xml.TRUE);  }  if ((a=e.getAttribute(Xml.TO_TERMINAL)) != null) {    _sendToTerminal=a.getValue().equals(Xml.TRUE);  }  if ((a=e.getAttribute(Xml.ALLOW_LOCAL_MOVES)) != null) {    _allowLocalMoves=a.getValue().equals(Xml.TRUE);  }  if ((a=e.getAttribute(Xml.ALLOW_THROUGH_CARS)) != null) {    _allowThroughCars=a.getValue().equals(Xml.TRUE);  }  if ((a=e.getAttribute(Xml.ALLOW_RETURN)) != null) {    _allowCarsReturnStaging=a.getValue().equals(Xml.TRUE);  }  if ((a=e.getAttribute(Xml.SERVICE_ALL)) != null) {    _serviceAllCarsWithFinalDestinations=a.getValue().equals(Xml.TRUE);  }  if ((a=e.getAttribute(Xml.BUILD_CONSIST)) != null) {    _buildConsist=a.getValue().equals(Xml.TRUE);  }  if ((a=e.getAttribute(Xml.SEND_CUSTOM_STAGING)) != null) {    _sendCarsWithCustomLoadsToStaging=a.getValue().equals(Xml.TRUE);  }  if ((a=e.getAttribute(Xml.BUILT)) != null) {    _built=a.getValue().equals(Xml.TRUE);  }  if ((a=e.getAttribute(Xml.BUILD)) != null) {    _build=a.getValue().equals(Xml.TRUE);  }  if ((a=e.getAttribute(Xml.BUILD_FAILED)) != null) {    _buildFailed=a.getValue().equals(Xml.TRUE);  }  if ((a=e.getAttribute(Xml.BUILD_FAILED_MESSAGE)) != null) {    _buildFailedMessage=a.getValue();  }  if ((a=e.getAttribute(Xml.PRINTED)) != null) {    _printed=a.getValue().equals(Xml.TRUE);  }  if ((a=e.getAttribute(Xml.MODIFIED)) != null) {    _modified=a.getValue().equals(Xml.TRUE);  }  if ((a=e.getAttribute(Xml.SWITCH_LIST_STATUS)) != null) {    _switchListStatus=a.getValue();  }  if ((a=e.getAttribute(Xml.LEAD_ENGINE)) != null) {    _leadEngineId=a.getValue();  }  if ((a=e.getAttribute(Xml.TERMINATION_DATE)) != null) {    _statusTerminatedDate=a.getValue();  }  if ((a=e.getAttribute(Xml.REQUESTED_CARS)) != null) {    try {      _statusCarsRequested=Integer.parseInt(a.getValue());    } catch (    NumberFormatException ee) {      log.error("Status cars requested ({}) isn't a valid number for train ({})",a.getValue(),getName());    }  }  if ((a=e.getAttribute(Xml.STATUS)) != null && e.getAttribute(Xml.STATUS_CODE) == null) {    String status=a.getValue();    if (status.startsWith(BUILD_FAILED)) {      _statusCode=CODE_BUILD_FAILED;    } else     if (status.startsWith(BUILT)) {      _statusCode=CODE_BUILT;    } else     if (status.startsWith(PARTIAL_BUILT)) {      _statusCode=CODE_PARTIAL_BUILT;    } else     if (status.startsWith(TERMINATED)) {      String[] splitStatus=status.split(" ");      if (splitStatus.length > 1) {        _statusTerminatedDate=splitStatus[1];      }      _statusCode=CODE_TERMINATED;    } else     if (status.startsWith(TRAIN_EN_ROUTE)) {      _statusCode=CODE_TRAIN_EN_ROUTE;    } else     if (status.startsWith(TRAIN_RESET)) {      _statusCode=CODE_TRAIN_RESET;    } else {      _statusCode=CODE_UNKNOWN;    }  }  if ((a=e.getAttribute(Xml.STATUS_CODE)) != null) {    try {      _statusCode=Integer.parseInt(a.getValue());    } catch (    NumberFormatException ee) {      log.error("Status code ({}) isn't a valid number for train ({})",a.getValue(),getName());    }  }  if ((a=e.getAttribute(Xml.OLD_STATUS_CODE)) != null) {    try {      _oldStatusCode=Integer.parseInt(a.getValue());    } catch (    NumberFormatException ee) {      log.error("Old status code ({}) isn't a valid number for train ({})",a.getValue(),getName());    }  } else {    _oldStatusCode=getStatusCode();  }  if ((a=e.getAttribute(Xml.COMMENT)) != null) {    _comment=OperationsXml.convertFromXmlComment(a.getValue());  }  if (_route != null) {    if ((a=e.getAttribute(Xml.CURRENT)) != null) {      _current=_route.getLocationById(a.getValue());    }    if ((a=e.getAttribute(Xml.LEG2_START)) != null) {      _leg2Start=_route.getLocationById(a.getValue());    }    if ((a=e.getAttribute(Xml.LEG3_START)) != null) {      _leg3Start=_route.getLocationById(a.getValue());    }    if ((a=e.getAttribute(Xml.LEG2_END)) != null) {      _end2Leg=_route.getLocationById(a.getValue());    }    if ((a=e.getAttribute(Xml.LEG3_END)) != null) {      _leg3End=_route.getLocationById(a.getValue());    }    if ((a=e.getAttribute(Xml.DEPARTURE_TRACK)) != null) {      Location location=LocationManager.instance().getLocationByName(getTrainDepartsName());      if (location != null) {        _departureTrack=location.getTrackById(a.getValue());      } else {        log.error("Departure location not found for track " + a.getValue());      }    }    if ((a=e.getAttribute(Xml.TERMINATION_TRACK)) != null) {      Location location=LocationManager.instance().getLocationByName(getTrainTerminatesName());      if (location != null) {        _terminationTrack=location.getTrackById(a.getValue());      } else {        log.error("Termiation location not found for track " + a.getValue());      }    }  }  if (e.getChild(Xml.SCRIPTS) != null) {    @SuppressWarnings("unchecked") List<Element> lb=e.getChild(Xml.SCRIPTS).getChildren(Xml.BUILD);    for (    Element es : lb) {      if ((a=es.getAttribute(Xml.NAME)) != null) {        addBuildScript(a.getValue());      }    }    @SuppressWarnings("unchecked") List<Element> lab=e.getChild(Xml.SCRIPTS).getChildren(Xml.AFTER_BUILD);    for (    Element es : lab) {      if ((a=es.getAttribute(Xml.NAME)) != null) {        addAfterBuildScript(a.getValue());      }    }    @SuppressWarnings("unchecked") List<Element> lm=e.getChild(Xml.SCRIPTS).getChildren(Xml.MOVE);    for (    Element es : lm) {      if ((a=es.getAttribute(Xml.NAME)) != null) {        addMoveScript(a.getValue());      }    }    @SuppressWarnings("unchecked") List<Element> lt=e.getChild(Xml.SCRIPTS).getChildren(Xml.TERMINATE);    for (    Element es : lt) {      if ((a=es.getAttribute(Xml.NAME)) != null) {        addTerminationScript(a.getValue());      }    }  }  if ((e.getChild(Xml.RAIL_ROAD) != null) && (a=e.getChild(Xml.RAIL_ROAD).getAttribute(Xml.NAME)) != null) {    String name=a.getValue();    setRailroadName(name);  }  if ((e.getChild(Xml.MANIFEST_LOGO) != null)) {    if ((a=e.getChild(Xml.MANIFEST_LOGO).getAttribute(Xml.NAME)) != null) {      setManifestLogoURL(a.getValue());    }  }  if ((a=e.getAttribute(Xml.SHOW_TIMES)) != null) {    _showTimes=a.getValue().equals(Xml.TRUE);  }  addPropertyChangeListerners();}  }
class C{  public void edit(Object plotCanvas){  String _label=JOptionPane.showInputDialog((PlotCanvas)plotCanvas,"Choose axis label",label);  if (_label != null) {    setLegend(_label);  }}  }
class C{  @Transactional public void updateCheque_DD_Card_Deposit(Map<String,Object> instrumentMap){  contraService.updateCheque_DD_Card_Deposit(instrumentMap);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:04.191 -0400",hash_original_method="EC875E7AA6A1D85F1F673F6AF14F38A1",hash_generated_method="03EFB55C7D2BDE74BB746547A5958F99") public CryptoProvider(){  super("Crypto",1.0,"HARMONY (SHA1 digest; SecureRandom; SHA1withDSA signature)");  final String MD_NAME="org.apache.harmony.security.provider.crypto.SHA1_MessageDigestImpl";  final String SR_NAME="org.apache.harmony.security.provider.crypto.SHA1PRNG_SecureRandomImpl";  final String SIGN_NAME="org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl";  final String SIGN_ALIAS="SHA1withDSA";  final String KEYF_NAME="org.apache.harmony.security.provider.crypto.DSAKeyFactoryImpl";  put("MessageDigest.SHA-1",MD_NAME);  put("MessageDigest.SHA-1 ImplementedIn","Software");  put("Alg.Alias.MessageDigest.SHA1","SHA-1");  put("Alg.Alias.MessageDigest.SHA","SHA-1");  put("SecureRandom.SHA1PRNG",SR_NAME);  put("SecureRandom.SHA1PRNG ImplementedIn","Software");  put("Signature.SHA1withDSA",SIGN_NAME);  put("Signature.SHA1withDSA ImplementedIn","Software");  put("Alg.Alias.Signature.SHAwithDSA",SIGN_ALIAS);  put("Alg.Alias.Signature.DSAwithSHA1",SIGN_ALIAS);  put("Alg.Alias.Signature.SHA1/DSA",SIGN_ALIAS);  put("Alg.Alias.Signature.SHA/DSA",SIGN_ALIAS);  put("Alg.Alias.Signature.SHA-1/DSA",SIGN_ALIAS);  put("Alg.Alias.Signature.DSA",SIGN_ALIAS);  put("Alg.Alias.Signature.DSS",SIGN_ALIAS);  put("Alg.Alias.Signature.OID.1.2.840.10040.4.3",SIGN_ALIAS);  put("Alg.Alias.Signature.1.2.840.10040.4.3",SIGN_ALIAS);  put("Alg.Alias.Signature.1.3.14.3.2.13",SIGN_ALIAS);  put("Alg.Alias.Signature.1.3.14.3.2.27",SIGN_ALIAS);  put("KeyFactory.DSA",KEYF_NAME);  put("KeyFactory.DSA ImplementedIn","Software");  put("Alg.Alias.KeyFactory.1.3.14.3.2.12","DSA");  put("Alg.Alias.KeyFactory.1.2.840.10040.4.1","DSA");}  }
class C{  private static boolean implementsMethod(ClassNode classNode,String methodName,Class[] argTypes){  List methods=classNode.getMethods();  if (argTypes == null || argTypes.length == 0) {    for (Iterator i=methods.iterator(); i.hasNext(); ) {      MethodNode mn=(MethodNode)i.next();      boolean methodMatch=mn.getName().equals(methodName);      if (methodMatch)       return true;    }  }  return false;}  }
class C{  private void copyBreakpointsFrom(SourceInfo old){  int end=old.breakpoints.length;  if (end > this.breakpoints.length) {    end=this.breakpoints.length;  }  for (int line=0; line != end; ++line) {    if (old.breakpoints[line]) {      this.breakpoints[line]=true;    }  }}  }
class C{  void refreshIfEmpty(){  if (ancestor != null) {    ancestor.refreshIfEmpty();    if (ancestor.getDelegate() != ancestorDelegate) {      throw new ConcurrentModificationException();    }  } else   if (delegate.isEmpty()) {    List<V> newDelegate=map.get(key);    if (newDelegate != null) {      delegate=newDelegate;    }  }}  }
class C{  DataType(Class<?> primitive,Class<?> reference){  this.primitive=primitive;  this.reference=reference;}  }
class C{  protected void updateActionBarTitleAndHomeButton(OCFile chosenFile){  String title=getString(R.string.default_display_name_for_root_folder);  boolean inRoot;  if (chosenFile == null) {    chosenFile=mFile;  }  inRoot=(chosenFile == null || (chosenFile.isFolder() && chosenFile.getParentId() == FileDataStorageManager.ROOT_PARENT_ID));  if (!inRoot) {    title=chosenFile.getFileName();  }  getSupportActionBar().setTitle(title);  View actionBarTitleView=getWindow().getDecorView().findViewById(getResources().getIdentifier("action_bar_title","id","android"));  if (actionBarTitleView != null) {    actionBarTitleView.setContentDescription(title);  }  mDrawerToggle.setDrawerIndicatorEnabled(inRoot);  getSupportActionBar().setDisplayHomeAsUpEnabled(true);  getSupportActionBar().setDisplayShowTitleEnabled(true);}  }
class C{  public static Path resolveIgfsProfilerLogsDir(IgniteFileSystem igfs) throws IgniteCheckedException {  String logsDir;  if (igfs instanceof IgfsEx)   logsDir=((IgfsEx)igfs).clientLogDirectory(); else   if (igfs == null)   throw new IgniteCheckedException("Failed to get profiler log folder (IGFS instance not found)"); else   throw new IgniteCheckedException("Failed to get profiler log folder (unexpected IGFS instance type)");  URL logsDirUrl=U.resolveIgniteUrl(logsDir != null ? logsDir : DFLT_IGFS_LOG_DIR);  return logsDirUrl != null ? new File(logsDirUrl.getPath()).toPath() : null;}  }
class C{  public static void main(String[] args){  try {    BVDecompose bvd=new BVDecompose();    try {      bvd.setOptions(args);      Utils.checkForRemainingOptions(args);    } catch (    Exception ex) {      String result=ex.getMessage() + "\nBVDecompose Options:\n\n";      Enumeration<Option> enu=bvd.listOptions();      while (enu.hasMoreElements()) {        Option option=(Option)enu.nextElement();        result+=option.synopsis() + "\n" + option.description()+ "\n";      }      throw new Exception(result);    }    bvd.decompose();    System.out.println(bvd.toString());  } catch (  Exception ex) {    System.err.println(ex.getMessage());  }}  }
class C{  public static final void saveBookmark(Context c,String title,String url){  Intent intent=new Intent(c,AddBookmarkPage.class);  intent.putExtra(BrowserContract.Bookmarks.URL,url);  intent.putExtra(BrowserContract.Bookmarks.TITLE,title);  c.startActivity(intent);}  }
class C{  public BusinessObjectDefinitionEntity createBusinessObjectDefinitionEntity(BusinessObjectDefinitionKey businessObjectDefinitionKey,String dataProviderName,String businessObjectDefinitionDescription){  return createBusinessObjectDefinitionEntity(businessObjectDefinitionKey.getNamespace(),businessObjectDefinitionKey.getBusinessObjectDefinitionName(),dataProviderName,businessObjectDefinitionDescription,null);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  private static Map<String,SnmpOid> buildPoolIndexMap(SnmpCachedData cached){  if (cached == null)   return Collections.emptyMap();  final SnmpOid[] indexes=cached.indexes;  final Object[] datas=cached.datas;  final int len=indexes.length;  final Map<String,SnmpOid> m=new HashMap<>(len);  for (int i=0; i < len; i++) {    final SnmpOid index=indexes[i];    if (index == null)     continue;    final MemoryPoolMXBean mpm=(MemoryPoolMXBean)datas[i];    if (mpm == null)     continue;    final String name=mpm.getName();    if (name == null)     continue;    m.put(name,index);  }  return m;}  }
class C{  public void select(final int[] indices){  select(indices,true);}  }
class C{  private static InlineBox doBidi(LayoutContext c,Text textNode,Element parent,CalculatedStyle parentStyle,InlineBox previousIB,List children){  Paragraph para=c.getParagraphSplitter().lookupParagraph(textNode);  assert (para != null);  int startIndex=para.getFirstCharIndexInParagraph(textNode);  int nodeIndex=0;  String runText;  BidiTextRun prevSplit=para.prevSplit(startIndex);  assert (prevSplit != null);  assert (prevSplit.getStart() <= startIndex);  int maxRunLength=prevSplit.getLength() - (startIndex - prevSplit.getStart());  int splitLength=Math.min(maxRunLength,textNode.getLength());  nodeIndex+=splitLength;  startIndex+=splitLength;  assert (prevSplit.getDirection() == BidiSplitter.LTR || prevSplit.getDirection() == BidiSplitter.RTL);  if (splitLength == textNode.getLength()) {    runText=textNode.getData();  } else {    runText=textNode.getData().substring(0,nodeIndex);  }  if (prevSplit.getDirection() == BidiSplitter.RTL) {    runText=c.getBidiReorderer().shapeText(runText);  }  InlineBox child=createInlineBox(runText,parent,parentStyle,textNode);  child.setTextDirection(prevSplit.getDirection());  previousIB=setupInlineChild(child,previousIB);  children.add(child);  if (splitLength != textNode.getLength()) {    do {      BidiTextRun newSplit=para.nextSplit(startIndex);      assert (newSplit != null);      int newLength;      if (newSplit != null) {        int newMaxRunLength=newSplit.getLength() - (startIndex - newSplit.getStart());        newLength=Math.min(newMaxRunLength,textNode.getLength() - nodeIndex);        runText=textNode.getData().substring(nodeIndex,nodeIndex + newLength);        if (newSplit.getDirection() == BidiSplitter.RTL) {          runText=c.getBidiReorderer().shapeText(runText);        }        startIndex+=newLength;        nodeIndex+=newLength;        child=createInlineBox(runText,parent,parentStyle,textNode);        child.setTextDirection(newSplit.getDirection());        previousIB=setupInlineChild(child,previousIB);        children.add(child);      } else {        newLength=textNode.getLength() - nodeIndex;        runText=textNode.getData().substring(nodeIndex,newLength);        child=createInlineBox(runText,parent,parentStyle,textNode);        child.setTextDirection(c.getDefaultTextDirection());        previousIB=setupInlineChild(child,previousIB);        children.add(child);        startIndex+=newLength;        nodeIndex+=newLength;      }    } while (nodeIndex < textNode.getLength());  }  return previousIB;}  }
class C{  protected void computeCOBMatrix(GF2nField B1){  if (mDegree != B1.mDegree) {    throw new IllegalArgumentException("GF2nPolynomialField.computeCOBMatrix: B1 has a different " + "degree and thus cannot be coverted to!");  }  if (B1 instanceof GF2nONBField) {    B1.computeCOBMatrix(this);    return;  }  int i, j;  GF2nElement[] gamma;  GF2nElement u;  GF2Polynomial[] COBMatrix=new GF2Polynomial[mDegree];  for (i=0; i < mDegree; i++) {    COBMatrix[i]=new GF2Polynomial(mDegree);  }  do {    u=B1.getRandomRoot(fieldPolynomial);  } while (u.isZero());  if (u instanceof GF2nONBElement) {    gamma=new GF2nONBElement[mDegree];    gamma[mDegree - 1]=GF2nONBElement.ONE((GF2nONBField)B1);  } else {    gamma=new GF2nPolynomialElement[mDegree];    gamma[mDegree - 1]=GF2nPolynomialElement.ONE((GF2nPolynomialField)B1);  }  gamma[mDegree - 2]=u;  for (i=mDegree - 3; i >= 0; i--) {    gamma[i]=(GF2nElement)gamma[i + 1].multiply(u);  }  if (B1 instanceof GF2nONBField) {    for (i=0; i < mDegree; i++) {      for (j=0; j < mDegree; j++) {        if (gamma[i].testBit(mDegree - j - 1)) {          COBMatrix[mDegree - j - 1].setBit(mDegree - i - 1);        }      }    }  } else {    for (i=0; i < mDegree; i++) {      for (j=0; j < mDegree; j++) {        if (gamma[i].testBit(j)) {          COBMatrix[mDegree - j - 1].setBit(mDegree - i - 1);        }      }    }  }  fields.addElement(B1);  matrices.addElement(COBMatrix);  B1.fields.addElement(this);  B1.matrices.addElement(invertMatrix(COBMatrix));}  }
class C{  private void ensureValid(){  if (!isValid(this)) {    throw new NullReferenceException();  }}  }
class C{  public ExpressionParserBuilder withProcess(Process process){  this.process=process;  return this;}  }
class C{  public ActivateFailedException(String s){  super(s);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void notationDecl(String name,String pubID,String sysID) throws SAXException {  try {    DTDprolog();    m_writer.write("<!NOTATION ");    m_writer.write(name);    if (pubID != null) {      m_writer.write(" PUBLIC \"");      m_writer.write(pubID);    } else {      m_writer.write(" SYSTEM \"");      m_writer.write(sysID);    }    m_writer.write("\" >");    m_writer.write(m_lineSep,0,m_lineSepLen);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private void confirmAndCancelAction(final Long actionId){  if (actionId == null) {    return;  }  final ConfirmationDialog confirmDialog=new ConfirmationDialog(i18n.get("caption.cancel.action.confirmbox"),i18n.get("message.cancel.action.confirm"),i18n.get(BUTTON_OK),i18n.get(BUTTON_CANCEL),null);  UI.getCurrent().addWindow(confirmDialog.getWindow());  confirmDialog.getWindow().bringToFront();}  }
class C{  public String description(){  return mDescription;}  }
class C{  public static void CF3(double[] x,double[] f,double[] c,int nx){  int count1=0;  int count2=0;  double sum1=0.0;  double sum2=0.0;  double prod1=1.0;  double prod2=1.0;  double yj;  double pj;  double N=2.0;  double a=1.0;  for (int j=2; j <= nx; j++) {    yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);    pj=Math.cos(20.0 * yj * PI / Math.sqrt(j + 0.0));    if (j % 2 == 0) {      sum2+=yj * yj;      prod2*=pj;      count2++;    } else {      sum1+=yj * yj;      prod1*=pj;      count1++;    }  }  f[0]=x[0] + 2.0 * (4.0 * sum1 - 2.0 * prod1 + 2.0) / (double)count1;  f[1]=1.0 - x[0] * x[0] + 2.0 * (4.0 * sum2 - 2.0 * prod2 + 2.0) / (double)count2;  c[0]=f[1] + f[0] * f[0] - a * Math.sin(N * PI * (f[0] * f[0] - f[1] + 1.0)) - 1.0;}  }
class C{  public long readBitsLong(int n){  if (n == 0) {    return 0;  }  long retval=0;  while (n >= 8) {    n-=8;    retval|=(readUnsignedByte() << n);  }  if (n > 0) {    int nextBit=bitOffset + n;    byte writeMask=(byte)(0xFF >> (8 - n));    if (nextBit > 8) {      retval|=(((getUnsignedByte(byteOffset) << (nextBit - 8) | (getUnsignedByte(byteOffset + 1) >> (16 - nextBit))) & writeMask));      byteOffset++;    } else {      retval|=((getUnsignedByte(byteOffset) >> (8 - nextBit)) & writeMask);      if (nextBit == 8) {        byteOffset++;      }    }    bitOffset=nextBit % 8;  }  return retval;}  }
class C{  @Bean public PlayOnLinuxContext playOnLinuxContext(){  return playOnLinuxContext;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ASSOCIATION_DEFINITION___NAME_1:    return getName_1();case UmplePackage.ASSOCIATION_DEFINITION___ASSOCIATION_1:  return getAssociation_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public String toString(){  return "[Signer]" + super.toString();}  }
class C{  private List<URI> prepareTargetVolumes(final Project project,final VirtualPool vpool,final SRDFRecommendation recommendation,final StringBuilder volumeLabelBuilder,final VirtualArray targetVirtualArray,final VpoolRemoteCopyProtectionSettings settings,final Volume srcVolume,final String task,final TaskList taskList,final String size){  Volume volume;  List<URI> volumeURIs=new ArrayList<URI>();  VirtualPool targetVpool=vpool;  if (settings.getVirtualPool() != null) {    targetVpool=_dbClient.queryObject(VirtualPool.class,settings.getVirtualPool());  }  volume=prepareVolume(null,project,targetVirtualArray,targetVpool,size,recommendation,new StringBuilder(volumeLabelBuilder.toString()).append("-target-" + targetVirtualArray.getLabel()).toString(),null,task,true,Volume.PersonalityTypes.TARGET,srcVolume.getId(),recommendation.getVirtualArrayTargetMap().get(targetVirtualArray.getId()).getSourceRAGroup(),settings.getCopyMode());  volumeURIs.add(volume.getId());  if (recommendation.getVpoolChangeVolume() != null) {    taskList.getTaskList().add(toTask(volume,task));  }  return volumeURIs;}  }
class C{  public PCCTest(String name){  super(name);}  }
class C{  @SuppressWarnings("unchecked") public boolean remove(Object obj){  boolean res=false;  if (contains(obj)) {    Unit successor;    if ((successor=getSuccOf((E)obj)) == null)     successor=getPredOf((E)obj);    res=innerChain.remove(obj);    ((E)obj).redirectJumpsToThisTo(successor);  }  return res;}  }
class C{  public boolean isModified(){synchronized (this) {    if (_isChecking || _isModified) {      return _isModified;    }    _isChecking=true;  }  try {    long now;    now=CurrentTime.currentTime();    if (now < _lastCheckTime + _checkInterval)     return _isModified;    _lastCheckTime=now;    for (int i=_dependencyList.size() - 1; i >= 0; i--) {      Dependency dependency=_dependencyList.get(i);      if (dependency.isModified()) {        dependency.logModified(log());        _isModified=true;        return _isModified;      }    }    return _isModified;  }  finally {    _isChecking=false;  }}  }
class C{  public boolean addBiome(int biomeId){  BiomeGenBase biome=BiomeGenBase.getBiome(biomeId);  if (biomeId == 0 || biome != BiomeGenBase.ocean) {    List<BiomeGenBase> biomes=new ArrayList<BiomeGenBase>();    biomes.add(biome);    allowedBiomes.addAll(getBiomesEntries(biomes));    return true;  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:14.497 -0400",hash_original_method="3D6ED86CB32057B75140F25F5AFE5484",hash_generated_method="AC2B6074B8350E280C8D594B75EA9D8C") public void on(boolean on){  isOn=on;}  }
class C{  public static long firstFlag(long flags){  long flag=1;  while ((flag & flags & ExtendedStandardFlags) == 0)   flag=flag << 1;  return flag;}  }
class C{  public void readExif(byte[] jpeg) throws IOException {  readExif(new ByteArrayInputStream(jpeg));}  }
class C{  private boolean same_location(URL url1,URL url2){  if (!url1.getProtocol().equals(url2.getProtocol()))   return false;  if (url1.getProtocol().equals("jar")) {    String jar1=extract_jar_path(url1);    String jar2=extract_jar_path(url2);    return (jar1.equals(jar2));  } else   if (url1.getProtocol().equals("file")) {    String loc1=url1.getFile().replaceFirst("org\\.apache\\.bcel\\..*$","");    String loc2=url2.getFile().replaceFirst("org\\.apache\\.bcel\\..*$","");    return (loc1.equals(loc2));  } else {    assert false : "unexpected protocol " + url1.getProtocol();  }  return (false);}  }
class C{  @RequestMapping(value="/SAML2/Metadata/{tenant:.*}",method=RequestMethod.GET) public void metadata(Locale locale,@PathVariable(value="tenant") String tenant,Model model,HttpServletResponse response) throws IOException {  logger.info("Welcome to Metadata handler! " + "The client locale is " + locale.toString() + ", tenant is "+ tenant);  String correlationId=UUID.randomUUID().toString();  DefaultIdmAccessorFactory factory=new DefaultIdmAccessorFactory(correlationId);  try {    IdmAccessor accessor=factory.getIdmAccessor();    accessor.setTenant(tenant);    String metadata=accessor.exportConfigurationAsString();    Validate.notNull(metadata);    response.setHeader("Content-Disposition","attachment; filename=" + SAML_METADATA_FILENAME);    Shared.sendResponse(response,Shared.METADATA_CONTENT_TYPE,metadata);  } catch (  Exception e) {    logger.error("Caught exception",e);    ValidationResult vr=new ValidationResult(HttpServletResponse.SC_BAD_REQUEST,"BadRequest",null);    String message=vr.getMessage(messageSource,locale);    response.sendError(vr.getResponseCode(),message);    logger.info("Responded with ERROR " + vr.getResponseCode() + ", message "+ message);  }  model.addAttribute("tenant",tenant);}  }
class C{  public JSONObject put(String key,boolean value) throws JSONException {  this.put(key,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public boolean equals(Object other){  if (other == this) {    return true;  } else   if (other instanceof TLongArrayList) {    TLongArrayList that=(TLongArrayList)other;    if (that.size() != this.size()) {      return false;    } else {      for (int i=_pos; i-- > 0; ) {        if (this._data[i] != that._data[i]) {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  public SpreadsheetCustomFieldMap(String title,String description,String start,String end,String location,String website,String calendarUrl,String baseUrl){  fieldMap=new HashMap<String,String>();  setField("title",title);  setField("description",description);  setField("start",start);  setField("end",end);  setField("location",location);  setField("website",website);  setField("calendarUrl",calendarUrl);  setField("baseUrl",baseUrl);}  }
class C{  public static boolean checkForIndexNonfatal(final EvolutionState state,GPNode toBchecked,int index){  if (!(toBchecked instanceof IndexNode)) {    return false;  }  if (((IndexNode)toBchecked).getIndex() != index) {    return false;  } else {    return true;  }}  }
class C{  private static boolean checkArgs(String[] args){  boolean result=(args.length > 0);  if (!result) {    System.out.println("Usage: java -jar JWPLTimeMachine.jar <config-file>");  }  return result;}  }
class C{  public PolygonShape(){  super(new org.jbox2d.collision.shapes.PolygonShape());  shape=(org.jbox2d.collision.shapes.PolygonShape)super.shape;}  }
class C{  void add(long timestamp,boolean accelerating){  purge(timestamp - MAX_WINDOW_SIZE);  Sample added=pool.acquire();  added.timestamp=timestamp;  added.accelerating=accelerating;  added.next=null;  if (newest != null) {    newest.next=added;  }  newest=added;  if (oldest == null) {    oldest=added;  }  sampleCount++;  if (accelerating) {    acceleratingCount++;  }}  }
class C{  public boolean handleEvent(Event e){  this.handledEvents++;  if (this.ptModes.contains(super.getMode())) {    handler.handleEvent(e);    if (this.handledEvents == this.nrOfExpEvents) {      handler.finish(this);      return true;    } else {      return false;    }  } else {    if (first == null) {      first=e.getTime();    } else {      last=e.getTime();    }    if (this.handledEvents == nrOfExpEvents) {      this.tripTTime=last - first;      return true;    } else {      return false;    }  }}  }
class C{  public void clccResponse(int index,int direction,int status,int mode,boolean mpty,String number,int type){  if (mService != null && isEnabled()) {    try {      mService.clccResponse(index,direction,status,mode,mpty,number,type);    } catch (    RemoteException e) {      Log.e(TAG,e.toString());    }  } else {    Log.w(TAG,"Proxy not attached to service");    if (DBG)     Log.d(TAG,Log.getStackTraceString(new Throwable()));  }}  }
class C{  protected void addCSSClasses(SVGPlot svgp){  if (!svgp.getCSSClassManager().contains(CSS_RANGEMARKER)) {    final CSSClass rcls=new CSSClass(this,CSS_RANGEMARKER);    final StyleLibrary style=context.getStyleLibrary();    rcls.setStatement(SVGConstants.CSS_FILL_PROPERTY,style.getColor(StyleLibrary.SELECTION_ACTIVE));    rcls.setStatement(SVGConstants.CSS_OPACITY_PROPERTY,style.getOpacity(StyleLibrary.SELECTION_ACTIVE));    svgp.addCSSClassOrLogError(rcls);  }}  }
class C{  public byte[] encode(byte[] pArray){  return encodeBase64(pArray,false);}  }
class C{  @Override public Instance convertInstance(Instance instance) throws Exception {  if (m_eigenvalues == null) {    throw new Exception("convertInstance: Principal components not " + "built yet");  }  double[] newVals=new double[m_outputNumAtts];  Instance tempInst=(Instance)instance.copy();  if (!instance.dataset().equalHeaders(m_trainHeader)) {    throw new Exception("Can't convert instance: header's don't match: " + "PrincipalComponents\n" + instance.dataset().equalHeadersMsg(m_trainHeader));  }  m_replaceMissingFilter.input(tempInst);  m_replaceMissingFilter.batchFinished();  tempInst=m_replaceMissingFilter.output();  m_nominalToBinFilter.input(tempInst);  m_nominalToBinFilter.batchFinished();  tempInst=m_nominalToBinFilter.output();  if (m_attributeFilter != null) {    m_attributeFilter.input(tempInst);    m_attributeFilter.batchFinished();    tempInst=m_attributeFilter.output();  }  if (!m_center) {    m_standardizeFilter.input(tempInst);    m_standardizeFilter.batchFinished();    tempInst=m_standardizeFilter.output();  } else {    m_centerFilter.input(tempInst);    m_centerFilter.batchFinished();    tempInst=m_centerFilter.output();  }  if (m_hasClass) {    newVals[m_outputNumAtts - 1]=instance.value(instance.classIndex());  }  double cumulative=0;  for (int i=m_numAttribs - 1; i >= 0; i--) {    double tempval=0.0;    for (int j=0; j < m_numAttribs; j++) {      tempval+=(m_eigenvectors[j][m_sortedEigens[i]] * tempInst.value(j));    }    newVals[m_numAttribs - i - 1]=tempval;    cumulative+=m_eigenvalues[m_sortedEigens[i]];    if ((cumulative / m_sumOfEigenValues) >= m_coverVariance) {      break;    }  }  if (!m_transBackToOriginal) {    if (instance instanceof SparseInstance) {      return new SparseInstance(instance.weight(),newVals);    } else {      return new DenseInstance(instance.weight(),newVals);    }  } else {    if (instance instanceof SparseInstance) {      return convertInstanceToOriginal(new SparseInstance(instance.weight(),newVals));    } else {      return convertInstanceToOriginal(new DenseInstance(instance.weight(),newVals));    }  }}  }
class C{  public static long unsigned(int value){  return value & 0xFFFFFFFFL;}  }
class C{  public boolean isOnSaturday(){  Object oo=get_Value(COLUMNNAME_OnSaturday);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  static void putUByte(long ptr,short data){  unsafe.putByte(ptr,(byte)data);}  }
class C{  public static String numberToString(Number number) throws JSONException {  if (number == null) {    throw new JSONException("Null pointer");  }  testValidity(number);  String string=number.toString();  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  protected void invokeContainer(String action,JvmLauncher java) throws Exception {  String base=getFileHandler().getAbsolutePath(getConfiguration().getHome());  java.setSystemProperty("catalina.home",getFileHandler().getAbsolutePath(getHome()));  java.setSystemProperty("catalina.base",base);  String jvmArgs=getConfiguration().getPropertyValue(GeneralPropertySet.JVMARGS);  if (jvmArgs == null || !jvmArgs.contains("java.io.tmpdir")) {    java.setSystemProperty("java.io.tmpdir",getFileHandler().append(base,"temp"));  }  if (jvmArgs == null || !jvmArgs.contains("java.util.logging.manager")) {    java.setSystemProperty("java.util.logging.manager","org.apache.juli.ClassLoaderLogManager");  }  if (jvmArgs == null || !jvmArgs.contains("java.util.logging.config.file")) {    java.setSystemProperty("java.util.logging.config.file",getFileHandler().append(base,"conf/logging.properties"));  }  java.addClasspathEntries(new File(getHome(),"bin/bootstrap.jar"));  addToolsJarToClasspath(java);  java.setMainClass("org.apache.catalina.startup.Bootstrap");  java.addAppArguments(action);  java.start();}  }
class C{  public boolean isPeriodic(){  return periodic;}  }
class C{  private ChronoLocalDate ofWeekBasedYear(Chronology chrono,int yowby,int wowby,int dow){  ChronoLocalDate date=chrono.date(yowby,1,1);  int ldow=localizedDayOfWeek(date);  int offset=startOfWeekOffset(1,ldow);  int yearLen=date.lengthOfYear();  int newYearWeek=computeWeek(offset,yearLen + weekDef.getMinimalDaysInFirstWeek());  wowby=Math.min(wowby,newYearWeek - 1);  int days=-offset + (dow - 1) + (wowby - 1) * 7;  return date.plus(days,DAYS);}  }
class C{  public TileImageFilter(){  this(32,32);}  }
class C{  public boolean isNamed(String namespace,String localName){  return namespace.equals(this.namespace) && localName.equals(this.localName);}  }
class C{  @Override protected int calcAttackValue(){  double av=0;  int range=RangeType.rangeBracket(nRange,wtype.getATRanges(),true,false);  for (  int wId : weapon.getBayWeapons()) {    Mounted m=ae.getEquipment(wId);    if (!m.isBreached() && !m.isDestroyed() && !m.isJammed()) {      WeaponType bayWType=((WeaponType)m.getType());      if (range == WeaponType.RANGE_SHORT) {        av=av + bayWType.getShortAV();      } else       if (range == WeaponType.RANGE_MED) {        av=av + bayWType.getMedAV();      } else       if (range == WeaponType.RANGE_LONG) {        av=av + bayWType.getLongAV();      } else       if (range == WeaponType.RANGE_EXT) {        av=av + bayWType.getExtAV();      }    }  }  if (bDirect) {    av=Math.min(av + (toHit.getMoS() / 3),av * 2);  }  if (bGlancing) {    av=(int)Math.floor(av / 2.0);  }  av=(int)Math.floor(getBracketingMultiplier() * av);  return (int)Math.ceil(av);}  }
class C{  public final CC growX(float w){  hor.setGrow(new Float(w));  return this;}  }
class C{  public static int maxLevel(){  return LEVELS - 1;}  }
class C{  public static boolean writeFile(File file,InputStream stream){  return writeFile(file,stream,false);}  }
class C{  public TestBase(String name){  testName=name;}  }
class C{  public static AccessibilityNodeInfo obtain(){  AccessibilityNodeInfo info=sPool.acquire();  return (info != null) ? info : new AccessibilityNodeInfo();}  }
class C{  public static void createDesktopFileForLinux(File desktop){  if (SystemUtils.IS_OS_WINDOWS || SystemUtils.IS_OS_MAC) {    return;  }  String path=new File(TinyMediaManager.class.getProtectionDomain().getCodeSource().getLocation().getPath()).getParent();  try {    path=URLDecoder.decode(path,"UTF-8");  } catch (  UnsupportedEncodingException e1) {    path=URLDecoder.decode(path);  }  StringBuilder sb=new StringBuilder(60);  sb.append("[Desktop Entry]\n");  sb.append("Type=Application\n");  sb.append("Name=tinyMediaManager\n");  sb.append("Path=");  sb.append(path);  sb.append('\n');  sb.append("Exec=/bin/sh \"");  sb.append(path);  sb.append("/tinyMediaManager.sh\"\n");  sb.append("Icon=");  sb.append(path);  sb.append("/tmm.png\n");  sb.append("Categories=AudioVideo;Video;Database;Java;");  sb.append("\n");  FileWriterWithEncoding writer;  try {    writer=new FileWriterWithEncoding(desktop,"UTF-8");    writer.write(sb.toString());    writer.close();    desktop.setExecutable(true);  } catch (  IOException e) {    LOGGER.warn(e.getMessage());  }}  }
class C{  public static void main(String[] args){  int[][] m={{1,2},{3,4},{5,6},{7,8},{9,10}};  shuffle(m);  for (int i=0; i < m.length; i++) {    for (int j=0; j < m[i].length; j++) {      System.out.print(m[i][j] + " ");    }    System.out.println();  }}  }
class C{  public static void decorateRPVolumesCGInfo(List<Volume> rpVolumes,ProtectionSet pset,BlockConsistencyGroup rpCG,Set<DataObject> updatedObjects,DbClient dbClient,IngestionRequestContext requestContext){  for (  Volume volume : rpVolumes) {    volume.setConsistencyGroup(rpCG.getId());    volume.setProtectionSet(new NamedURI(pset.getId(),pset.getLabel()));    volume.clearInternalFlags(BlockRecoverPointIngestOrchestrator.INTERNAL_VOLUME_FLAGS);    if (volume.getPersonality().equalsIgnoreCase(Volume.PersonalityTypes.METADATA.toString())) {      volume.addInternalFlags(Flag.INTERNAL_OBJECT,Flag.SUPPORTS_FORCE);    }    _logger.info("Updating volume " + volume.getLabel() + " flags/settings to "+ volume.getInternalFlags());    if (volume.isVPlexVolume(dbClient)) {      if (volume.getAssociatedVolumes() != null) {        for (        String associatedVolumeIdStr : volume.getAssociatedVolumes()) {          Volume associatedVolume=requestContext.findDataObjectByType(Volume.class,URI.create(associatedVolumeIdStr),true);          if (associatedVolume != null) {            _logger.info("Setting BlockConsistencyGroup {} on VPLEX backend Volume {}",rpCG.forDisplay(),associatedVolume.forDisplay());            if (NullColumnValueGetter.isNotNullValue(associatedVolume.getReplicationGroupInstance())) {              _logger.info(String.format("Turning on array consistency on the consistency group because CG info exists on volume %s",associatedVolume.getLabel()));              rpCG.setArrayConsistency(true);            }            associatedVolume.setConsistencyGroup(rpCG.getId());            updatedObjects.add(associatedVolume);          } else {            _logger.warn("Could not find the volume in DB or volume contexts: " + associatedVolumeIdStr);          }        }      }    }    if (!volume.isVPlexVolume(dbClient) && NullColumnValueGetter.isNotNullValue(volume.getReplicationGroupInstance())) {      _logger.info(String.format("Turning on array consistency on the consistency group because CG info exists on volume %s",volume.getLabel()));      rpCG.setArrayConsistency(true);    }    updatedObjects.add(volume);  }}  }
class C{  public ProtoIdsSection(DexFile file){  super("proto_ids",file,4);  protoIds=new TreeMap<Prototype,ProtoIdItem>();}  }
class C{  private void cmd_displayErrors(){  Vector data=CLogErrorBuffer.get(true).getLogData(bErrorsOnly.isSelected());  Vector columnNames=CLogErrorBuffer.get(true).getColumnNames(Env.getCtx());  DefaultTableModel model=new DefaultTableModel(data,columnNames);  errorTable.setModel(model);  if (bErrorsOnly.isSelected())   tabPane.setTitleAt(4,Msg.getMsg(Env.getCtx(),"Errors") + " (" + data.size()+ ")"); else   tabPane.setTitleAt(4,Msg.getMsg(Env.getCtx(),"TraceInfo") + " (" + data.size()+ ")");  errorTable.autoSize();}  }
class C{  private boolean syncNodes(SyncInfo syncinfo,String controlNodeInSync,String svcId){  boolean needToWaitSyncFinish=true;  if (controlNodeInSync == null) {    if (!isRemoteDownloadAllowed()) {      if (coordinator.hasRemoteDownloadLock(svcId)) {        log.info("Step3a: Leader gives up lock");        coordinator.releaseRemoteDownloadLock(svcId);        wakeupOtherNodes();      }    } else     if (coordinator.hasRemoteDownloadLock(svcId) || coordinator.getRemoteDownloadLock(svcId)) {      try {        if (drUtil.isStandby()) {          log.info("Step3a: sync'ing with active site as leader of standby site");          Site activeSite=drUtil.getActiveSite();          URI activeVipEndpoint=URI.create(String.format(SysClientFactory.BASE_URL_FORMAT,activeSite.getVipEndPoint(),service.getEndpoint().getPort()));          if (!coordinator.isActiveSiteStable(activeSite)) {            log.info("Step3a: software image {} not sync'ed on active site yet. Retry later",syncinfo);          } else           if (syncToNodeInSync(activeVipEndpoint,syncinfo)) {            coordinator.setNodeSessionScopeInfo(localRepository.getRepositoryInfo());            coordinator.releaseRemoteDownloadLock(svcId);            wakeupOtherNodes();          }        } else {          log.info("Step3a: sync'ing with remote repo as leader");          if (syncWithRemote(localInfo,targetInfo,syncinfo)) {            coordinator.setNodeSessionScopeInfo(localRepository.getRepositoryInfo());            coordinator.releaseRemoteDownloadLock(svcId);            wakeupOtherNodes();          }        }      } catch (      Exception e) {        log.error("Step3a: ",e);        if ((e instanceof APIException) && (((APIException)e).getServiceCode() == ServiceCode.SYS_DOWNLOAD_IMAGE_ERROR)) {          needToWaitSyncFinish=false;          log.info("Step3a: Leader gives up lock");          coordinator.releaseRemoteDownloadLock(svcId);          wakeupOtherNodes();        }      }    } else {      log.info("Step3a: Wait nodeInSync to finish download");    }  } else   if (controlNodeInSync != null) {    try {      if (syncToNodeInSync(coordinator.getNodeEndpointForSvcId(controlNodeInSync),syncinfo)) {        coordinator.setNodeSessionScopeInfo(localRepository.getRepositoryInfo());        wakeupOtherNodes();      }    } catch (    Exception e) {      log.error("Step3b: {}",e);    }  }  return needToWaitSyncFinish;}  }
class C{  protected Node export(Node n,AbstractDocument d){  super.export(n,d);  AbstractAttrNS aa=(AbstractAttrNS)n;  aa.namespaceURI=namespaceURI;  return n;}  }
class C{  public MovieMatcherEditor(){}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  if (resourceBundleName != null) {    try {      rb=ResourceBundle.getBundle(resourceBundleName);    } catch (    MissingResourceException e) {      rb=null;    }  }}  }
class C{  public static ClusterState load(SolrZkClient zkClient,Set<String> liveNodes,ZkStateReader stateReader) throws KeeperException, InterruptedException {  Stat stat=new Stat();  byte[] state=zkClient.getData(ZkStateReader.CLUSTER_STATE,null,stat,true);  return load(stat.getVersion(),state,liveNodes);}  }
class C{  public static double distanceNM(double lat1,double lon1,double lat2,double lon2){  return Geo.distanceNM(new Geo(lat1,lon1),new Geo(lat2,lon2));}  }
class C{  public Builder byMinute(Integer... minutes){  return byMinute(Arrays.asList(minutes));}  }
class C{  private void createFramebufferTexture(){  this.tex=glGenTextures();  glBindTexture(GL_TEXTURE_2D,tex);  glTexImage2D(GL_TEXTURE_2D,0,GL_RGBA32F_ARB,width,height,0,GL_RGBA,GL_FLOAT,(ByteBuffer)null);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glBindTexture(GL_TEXTURE_2D,0);}  }
class C{  public String convertRelationalOperatorToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  @Deprecated public static void liftingFromBottom(View view,float baseRotation,float fromY,int duration,int startDelay){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,fromY);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  final int doOffer(long nanos,T item,BiPredicate<Flow.Subscriber<? super T>,? super T> onDrop){  Objects.requireNonNull(item);  int lag=0, drops=0;  boolean complete;synchronized (this) {    complete=closed;    BufferedSubscription<T> b=clients;    if (!complete) {      BufferedSubscription<T> pred=null, r=null, rtail=null;      while (b != null) {        BufferedSubscription<T> next=b.next;        int stat=b.offer(item);        if (stat < 0) {          b.next=null;          if (pred == null)           clients=next; else           pred.next=next;        } else {          if (stat > lag)           lag=stat; else           if (stat == 0) {            b.nextRetry=null;            if (rtail == null)             r=b; else             rtail.nextRetry=b;            rtail=b;          } else           if (stat > lag)           lag=stat;          pred=b;        }        b=next;      }      while (r != null) {        BufferedSubscription<T> nextRetry=r.nextRetry;        r.nextRetry=null;        int stat=(nanos > 0L) ? r.timedOffer(item,nanos) : r.offer(item);        if (stat == 0 && onDrop != null && onDrop.test(r.subscriber,item))         stat=r.offer(item);        if (stat == 0)         ++drops; else         if (stat > lag)         lag=stat; else         if (stat < 0 && clients == r)         clients=r.next;        r=nextRetry;      }    }  }  if (complete)   throw new IllegalStateException("Closed"); else   return (drops > 0) ? -drops : lag;}  }
class C{  protected OffAudioAction(SwingSet2 swingset){  super("Audio Off");  this.swingset=swingset;}  }
class C{  public static Pair<ZooKeeperServerShim,Integer> runZookeeperOnAnyPort(int basePort,File zkDir) throws Exception {  final int MAX_RETRIES=20;  final int MIN_PORT=1025;  final int MAX_PORT=65535;  ZooKeeperServerShim zks=null;  int zkPort=basePort;  boolean success=false;  int retries=0;  while (!success) {    try {      LOG.info("zk trying to bind to port " + zkPort);      zks=LocalBookKeeper.runZookeeper(1000,zkPort,zkDir);      success=true;    } catch (    BindException be) {      retries++;      if (retries > MAX_RETRIES) {        throw be;      }      zkPort++;      if (zkPort > MAX_PORT) {        zkPort=MIN_PORT;      }    }  }  return Pair.of(zks,zkPort);}  }
class C{  private void ensureOpen() throws IOException {  if (str == null) {    throw new IOException("Stream closed");  }}  }
class C{  public KMLScale(String namespaceURI){  super(namespaceURI);}  }
class C{  public static void notEmpty(String string,String msg){  if (string == null || string.length() == 0)   throw new IllegalArgumentException(msg);}  }
class C{  public Word plus(Extent w2){  return null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementremoveattributeaftercreate.class,args);}  }
class C{  public static int intersectPolygonRay(Vector2dc[] vertices,double originX,double originY,double dirX,double dirY,Vector2d p){  double nearestT=Double.MAX_VALUE;  int count=vertices.length;  int edgeIndex=-1;  double aX=vertices[count - 1].x(), aY=vertices[count - 1].y();  for (int i=0; i < count; i++) {    Vector2dc b=vertices[i];    double bX=b.x(), bY=b.y();    double doaX=originX - aX, doaY=originY - aY;    double dbaX=bX - aX, dbaY=bY - aY;    double invDbaDir=1.0 / (dbaY * dirX - dbaX * dirY);    double t=(dbaX * doaY - dbaY * doaX) * invDbaDir;    if (t >= 0.0 && t < nearestT) {      double t2=(doaY * dirX - doaX * dirY) * invDbaDir;      if (t2 >= 0.0 && t2 <= 1.0) {        edgeIndex=(i - 1 + count) % count;        nearestT=t;        p.x=originX + t * dirX;        p.y=originY + t * dirY;      }    }    aX=bX;    aY=bY;  }  return edgeIndex;}  }
class C{  public File dataFile(String where){  return new File(dataPath(where));}  }
class C{  public void endDocument() throws org.xml.sax.SAXException {}  }
class C{  public ShowPrintAndExportDialogAction(PrintableComponent comp,boolean smallIcon){  this(smallIcon);  this.comp=comp;}  }
class C{  private int nextTlsMode(){  if (nextTlsMode == TLS_MODE_MODERN) {    nextTlsMode=TLS_MODE_COMPATIBLE;    return TLS_MODE_MODERN;  } else   if (nextTlsMode == TLS_MODE_COMPATIBLE) {    nextTlsMode=TLS_MODE_NULL;    return TLS_MODE_COMPATIBLE;  } else {    throw new AssertionError();  }}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    FileOutputStream fos=new FileOutputStream(file);    CacheHeader e=new CacheHeader(key,entry);    e.writeHeader(fos);    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  private UasMdoAuth(){}  }
class C{  @Override public boolean isSorted(){  return sorted;}  }
class C{  public void addFillOutsideLine(FillOutsideLine fill){  mFillBelowLine.add(fill);}  }
class C{  private void sendEvent(EventHolder event){  if (connection != null) {    sendEvent(event,connection);  }}  }
class C{  public static void shuffle(double[] a){  if (a == null)   throw new NullPointerException("argument array is null");  int n=a.length;  for (int i=0; i < n; i++) {    int r=i + uniform(n - i);    double temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  public void clearBackground(){  mBackgroundManager.setThemeDrawableResourceId(mDefaultBackground);}  }
class C{  private static void checkServerCallLog() throws Exception {  ByteArrayOutputStream serverCallLog=new ByteArrayOutputStream();  RemoteServer.setLog(serverCallLog);  Naming.list(LOCATION);  verifyLog(serverCallLog,"list");  serverCallLog.reset();  RemoteServer.setLog(null);  PrintStream callStream=RemoteServer.getLog();  if (callStream != null) {    TestLibrary.bomb("call stream not null after calling " + "setLog(null)");  } else {    System.err.println("call stream should be null and it is");  }  Naming.list(LOCATION);  if (usingOld) {    if (serverCallLog.toString().indexOf("UnicastServerRef") >= 0) {      TestLibrary.bomb("server call logging not turned off");    }  } else   if (serverCallLog.toByteArray().length != 0) {    TestLibrary.bomb("call log contains output but it " + "should be empty");  }  serverCallLog.reset();  RemoteServer.setLog(serverCallLog);  try {    Naming.lookup(LOCATION + "notthere");  } catch (  Exception e) {  }  verifyLog(serverCallLog,"exception");  serverCallLog.reset();  RemoteServer.setLog(serverCallLog);  callStream=RemoteServer.getLog();  callStream.println("bingo, this is a getLog test");  verifyLog(serverCallLog,"bingo");}  }
class C{  @WorkerThread public void logIn(String user,String password) throws ParticleCloudException {  try {    Responses.LogInResponse response=identityApi.logIn("password",user,password);    onLogIn(response,user,password);  } catch (  RetrofitError error) {    throw new ParticleCloudException(error);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public void addScreenLocation(String name){  if (name != null) {    this.screenLocationSet.add(name);  }}  }
class C{  @Override protected void buildRepresentation(IEntity entity){  String translate=translate(getClassResourcePath());  logger.debug("Sprite path: " + translate);  setSprite(SpriteStore.get().getSprite(translate));}  }
class C{  public static Value decodeValue(String encodedValue,ValueFactory valueFactory){  if (encodedValue != null) {    return NTriplesUtil.parseValue(encodedValue,valueFactory);  }  return null;}  }
class C{  public HandshakeCompletedEvent(SSLSocket sock,SSLSession s){  super(sock);  session=s;}  }
class C{  public String toString(){  ByteArrayOutputStream baos=new ByteArrayOutputStream();  PrintStream p=new PrintStream(baos);  p.print(algorithm + " Message Digest from " + provider.getName()+ ", ");switch (state) {case INITIAL:    p.print("<initialized>");  break;case IN_PROGRESS:p.print("<in progress>");break;}p.println();return (baos.toString());}  }
class C{  public static SimpleType constructUnsafe(Class<?> raw){  return new SimpleType(raw,null,null,null,null);}  }
class C{  public void restart(long sleepTime){  socket.kill();  logger.trace("host proxy port " + socket.localport + " for "+ host+ " started");  Executors.newSingleThreadScheduledExecutor().schedule(socket,sleepTime,TimeUnit.MILLISECONDS);}  }
class C{  public String parseGetValue(String str){  String returnVal=null;  if (str == null) {  }  if (str.indexOf(':') != -1) {    String tokens[]=str.split(":");    returnVal=tokens[1].trim();  } else   if (str.equals("No value in cache.")) {    returnVal=str;  }  return returnVal;}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  MessageResources rsc=getResources(request);  ClassInstructorAssignmentForm frm=(ClassInstructorAssignmentForm)form;  String op=(request.getParameter("op") == null) ? (frm.getOp() == null || frm.getOp().length() == 0) ? (request.getAttribute("op") == null) ? null : request.getAttribute("op").toString() : frm.getOp() : request.getParameter("op");  if (op == null)   op=request.getParameter("hdnOp");  if (op == null || op.trim().length() == 0)   throw new Exception(MSG.exceptionOperationNotInterpreted() + op);  String instrOffrConfigId="";  frm.setOp(op);  frm.setProxy(WebSolver.getClassAssignmentProxy(request.getSession()));  instrOffrConfigId=(request.getParameter("uid") == null) ? (request.getAttribute("uid") == null) ? frm.getInstrOffrConfigId() != null ? frm.getInstrOffrConfigId().toString() : null : request.getAttribute("uid").toString() : request.getParameter("uid");  InstrOfferingConfigDAO iocDao=new InstrOfferingConfigDAO();  InstrOfferingConfig ioc=iocDao.get(Long.valueOf(instrOffrConfigId));  frm.setInstrOffrConfigId(Long.valueOf(instrOffrConfigId));  sessionContext.checkPermission(ioc,Right.AssignInstructors);  ArrayList instructors=new ArrayList(ioc.getDepartment().getInstructors());  Collections.sort(instructors,new DepartmentalInstructorComparator());  request.setAttribute(DepartmentalInstructor.INSTR_LIST_ATTR_NAME,instructors);  if (op.equalsIgnoreCase(MSG.actionAssignInstructors())) {    doLoad(request,frm,instrOffrConfigId,ioc);  }  if (op.equals(MSG.actionUpdateClassInstructorsAssignment()) || op.equals(MSG.actionNextIO()) || op.equals(MSG.actionPreviousIO())|| op.equals(MSG.actionUnassignAllInstructorsFromConfig())) {    if (op.equals(MSG.actionUnassignAllInstructorsFromConfig())) {      frm.unassignAllInstructors();    }    ActionMessages errors=frm.validate(mapping,request);    if (errors.size() == 0) {      try {        frm.updateClasses();        InstrOfferingConfig cfg=new InstrOfferingConfigDAO().get(frm.getInstrOffrConfigId());        org.hibernate.Session hibSession=InstructionalOfferingDAO.getInstance().getSession();        ChangeLog.addChange(hibSession,sessionContext,cfg,ChangeLog.Source.CLASS_INSTR_ASSIGN,ChangeLog.Operation.UPDATE,cfg.getInstructionalOffering().getControllingCourseOffering().getSubjectArea(),null);        if (permissionOfferingLockNeeded.check(sessionContext.getUser(),cfg.getInstructionalOffering())) {          StudentSectioningQueue.offeringChanged(hibSession,sessionContext.getUser(),cfg.getInstructionalOffering().getSessionId(),cfg.getInstructionalOffering().getUniqueId());        }        hibSession.flush();        String className=ApplicationProperty.ExternalActionInstrOfferingConfigAssignInstructors.value();        if (className != null && className.trim().length() > 0) {          ExternalInstrOfferingConfigAssignInstructorsAction assignAction=(ExternalInstrOfferingConfigAssignInstructorsAction)(Class.forName(className).newInstance());          assignAction.performExternalInstrOfferingConfigAssignInstructorsAction(ioc,InstrOfferingConfigDAO.getInstance().getSession());        }        if (op.equals(MSG.actionNextIO())) {          response.sendRedirect(response.encodeURL("classInstructorAssignment.do?uid=" + frm.getNextId() + "&op="+ URLEncoder.encode(MSG.actionAssignInstructors(),"UTF-8")));          return null;        }        if (op.equals(MSG.actionPreviousIO())) {          response.sendRedirect(response.encodeURL("classInstructorAssignment.do?uid=" + frm.getPreviousId() + "&op="+ URLEncoder.encode(MSG.actionAssignInstructors(),"UTF-8")));          return null;        }        ActionRedirect redirect=new ActionRedirect(mapping.findForward("instructionalOfferingDetail"));        redirect.addParameter("io",frm.getInstrOfferingId());        redirect.addParameter("op","view");        return redirect;      } catch (      Exception e) {        throw e;      }    } else {      saveErrors(request,errors);    }  }  if (op.equals(rsc.getMessage("button.delete"))) {    frm.deleteInstructor();  }  if (op.equals(rsc.getMessage("button.addInstructor"))) {    frm.addInstructor();  }  return mapping.findForward("classInstructorAssignment");}  }
class C{  @Override public String toString(){  return "cudaResourceDesc[" + createString(",") + "]";}  }
class C{  @Override public void drawAngularGridLines(Graphics2D g2,PolarPlot plot,List ticks,Rectangle2D dataArea){  g2.setFont(plot.getAngleLabelFont());  g2.setStroke(plot.getAngleGridlineStroke());  g2.setPaint(plot.getAngleGridlinePaint());  ValueAxis axis=plot.getAxis();  double centerValue, outerValue;  if (axis.isInverted()) {    outerValue=axis.getLowerBound();    centerValue=axis.getUpperBound();  } else {    outerValue=axis.getUpperBound();    centerValue=axis.getLowerBound();  }  Point center=plot.translateToJava2D(0,centerValue,axis,dataArea);  Iterator iterator=ticks.iterator();  while (iterator.hasNext()) {    NumberTick tick=(NumberTick)iterator.next();    double tickVal=tick.getNumber().doubleValue();    Point p=plot.translateToJava2D(tickVal,outerValue,axis,dataArea);    g2.setPaint(plot.getAngleGridlinePaint());    g2.drawLine(center.x,center.y,p.x,p.y);    if (plot.isAngleLabelsVisible()) {      int x=p.x;      int y=p.y;      g2.setPaint(plot.getAngleLabelPaint());      TextUtilities.drawAlignedString(tick.getText(),g2,x,y,tick.getTextAnchor());    }  }}  }
class C{  public static Stat parseFacts(String facts){  long modify=0;  long localModify=0;  Stat.Type type=Stat.Type.ERROR;  long size=0;  for (  String fact : facts.split(";")) {    int cut=fact.indexOf('=');    if (cut != -1) {      String key=fact.substring(0,cut);      String value=fact.substring(cut + 1);      if ("Type".equals(key)) {        if (value.equals("dir")) {          type=Stat.Type.DIR;        } else         if (value.equals("file")) {          type=Stat.Type.FILE;        }      } else       if ("Modify".equals(key) || "X.LocalModify".equals(key)) {        int dot=value.indexOf('.');        if (dot != -1) {          value=value.substring(0,dot);        }        try {          long m=DATE_FORMAT.parse(value).getTime();          if ("Modify".equals(key)) {            modify=m;          } else {            localModify=m;          }        } catch (        ParseException e) {        }      } else       if ("Size".equals(key)) {        try {          size=Integer.parseInt(value);        } catch (        Exception e) {        }      }    }  }  return new Stat(type,size,modify,localModify == 0 ? modify : localModify);}  }
class C{  public static float calculateAspectRatio(float left,float top,float right,float bottom){  final float width=right - left;  final float height=bottom - top;  final float aspectRatio=width / height;  return aspectRatio;}  }
class C{  public void closeNavDrawer(){  if (mDrawerLayout != null) {    mDrawerLayout.closeDrawer(GravityCompat.START);  }}  }
class C{  @Override protected void keyTyped(char par1,int par2){  nameBox.textboxKeyTyped(par1,par2);  if (par2 == 28 || par2 == 156)   actionPerformed((GuiButton)buttonList.get(0));}  }
class C{  private void registerBroadCastReceiver(){  IntentFilter filter=new IntentFilter();  filter.addAction(AudioManager.RINGER_MODE_CHANGED_ACTION);  filter.addAction(Intent.ACTION_SCREEN_ON);  filter.addAction(Intent.ACTION_SCREEN_OFF);  registerReceiver(mBroadcastReceiver,filter,null,null);}  }
class C{  public void addContextToQuery(BooleanQuery.Builder query,BytesRef context,BooleanClause.Occur clause){  query.add(new TermQuery(new Term(CONTEXTS_FIELD_NAME,context)),clause);}  }
class C{  public void removePropertyChangeListener(String propertyName,PropertyChangeListener listener){  if (listener == null || propertyName == null) {    return;  }  listener=this.map.extract(listener);  if (listener != null) {    this.map.remove(propertyName,listener);  }}  }
class C{  public <K,V>Builder<K,V> builder(){  return new Builder<K,V>(this);}  }
class C{  public void addPropertyChangeListener(String propertyName,PropertyChangeListener in_pcl){  pcSupport.addPropertyChangeListener(propertyName,in_pcl);}  }
class C{  public static Ed25519GroupElement affine(final Ed25519FieldElement x,final Ed25519FieldElement y,final Ed25519FieldElement Z){  return new Ed25519GroupElement(CoordinateSystem.AFFINE,x,y,Z,null);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof SimpleHistogramDataset)) {    return false;  }  SimpleHistogramDataset that=(SimpleHistogramDataset)obj;  if (!this.key.equals(that.key)) {    return false;  }  if (this.adjustForBinSize != that.adjustForBinSize) {    return false;  }  if (!this.bins.equals(that.bins)) {    return false;  }  return true;}  }
class C{  public static String convertObjectToString(Object obj){  if (obj == null)   return "";  String s="";  if (obj instanceof byte[]) {    byte[] bArray=(byte[])obj;    for (int i=0; i < bArray.length; i++)     s+=bArray[i] + " ";    return s;  }  if (obj instanceof int[]) {    int[] iArray=(int[])obj;    for (int i=0; i < iArray.length; i++)     s+=iArray[i] + " ";    return s;  }  if (obj instanceof short[]) {    short[] sArray=(short[])obj;    for (int i=0; i < sArray.length; i++)     s+=sArray[i] + " ";    return s;  }  return obj.toString();}  }
class C{  private boolean conditionM0(String value,int index){  if (charAt(value,index + 1) == 'M') {    return true;  }  return contains(value,index - 1,3,"UMB") && ((index + 1) == value.length() - 1 || contains(value,index + 2,2,"ER"));}  }
class C{  public void addAlgorithm(String key,SimilarityAlgorithm algorithm){  this.algorithms.put(key,algorithm);}  }
class C{  public void executeChildTemplates(ElemTemplateElement elem,ContentHandler handler) throws TransformerException {  SerializationHandler xoh=this.getSerializationHandler();  SerializationHandler savedHandler=xoh;  try {    xoh.flushPending();    LexicalHandler lex=null;    if (handler instanceof LexicalHandler) {      lex=(LexicalHandler)handler;    }    m_serializationHandler=new ToXMLSAXHandler(handler,lex,savedHandler.getEncoding());    m_serializationHandler.setTransformer(this);    executeChildTemplates(elem,true);  } catch (  TransformerException e) {    throw e;  }catch (  SAXException se) {    throw new TransformerException(se);  } finally {    m_serializationHandler=savedHandler;  }}  }
class C{  public void openOrderEnd(ConcurrentHashMap<Integer,TradeOrder> openOrders){}  }
class C{  public Vertex evaluateSYMBOL(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  if (!checkArguments(expression,arguments,1,network)) {    return network.createVertex(Primitive.NULL);  }  Vertex argument=arguments.get(0).getTarget();  Vertex result=evaluateExpression(argument,variables,network,startTime,maxTime,stack);  return network.createVertex(new Primitive(((String.valueOf(result.getData()).toLowerCase()))));}  }
class C{  public static WSDefinition defineWebService(String url,String serviceName,int returnType,int... argumentTypes){  WSDefinition def=new WSDefinition();  def.url=url;  def.name=serviceName;  def.returnType=returnType;  def.arguments=argumentTypes;  return def;}  }
class C{  public void addExtension(String oid,boolean isCritical,byte[] value){  removeExtension(oid);  if (isCritical) {    criticalExtensions.put(oid,value);  } else {    nonCriticalExtensions.put(oid,value);  }}  }
class C{  private void adaptTitleContainerVisibility(){  if (titleContainer != null) {    if (customTitleView == null && customTitleViewId == -1) {      titleContainer.setVisibility(!TextUtils.isEmpty(title) || icon != null ? View.VISIBLE : View.GONE);    } else {      titleContainer.setVisibility(View.VISIBLE);    }  }}  }
class C{  default B unbreakable(final RepairableMeta src){  this.meta().setUnbreakable(src.isUnbreakable());  return this.getBuilder();}  }
class C{  protected static String makeDebugDir(File root,String folderName){  if (root == null) {    return null;  }  if (!root.exists() || !root.isDirectory()) {    throw new RuntimeException("Gcam debug directory not valid or doesn't exist: " + root.getAbsolutePath());  }  String serialSubstring="";  String serial=android.os.Build.SERIAL;  if (serial != null) {    int length=serial.length();    if (length > DEBUG_FOLDER_SERIAL_LENGTH) {      serialSubstring=serial.substring(length - DEBUG_FOLDER_SERIAL_LENGTH,length);    } else {      serialSubstring=serial;    }  }  SimpleDateFormat simpleDateFormat=new SimpleDateFormat("yyyyMMdd_HHmmss_SSS");  simpleDateFormat.setTimeZone(TimeZone.getDefault());  String currentDateAndTime=simpleDateFormat.format(new Date());  String burstFolderName=String.format("%s_%s",serialSubstring,currentDateAndTime);  File destFolder=new File(new File(root,folderName),burstFolderName);  if (!destFolder.mkdirs()) {    throw new RuntimeException("Could not create Gcam debug data folder.");  }  String destFolderPath=destFolder.getAbsolutePath();  return destFolderPath;}  }
class C{  public void onAdvertised(PeerSettings settings){  send(new RTCAdvertised(deviceId,settings));}  }
class C{  public float[] generateTransformedValuesBarChart(List<? extends Entry> entries,int dataSet,BarData bd,float phaseY){  float[] valuePoints=new float[entries.size() * 2];  int setCount=bd.getDataSetCount();  float space=bd.getGroupSpace();  for (int j=0; j < valuePoints.length; j+=2) {    Entry e=entries.get(j / 2);    float x=e.getXIndex() + (j / 2 * (setCount - 1)) + dataSet+ space * (j / 2) + space / 2f;    float y=e.getVal();    valuePoints[j]=x;    valuePoints[j + 1]=y * phaseY;  }  pointValuesToPixel(valuePoints);  return valuePoints;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:34.688 -0500",hash_original_method="3E56E5809677C3FC79921E23C4FBCC34",hash_generated_method="3C90B9653382FF7F7553ECE11AC58DB1") private Primality(){}  }
class C{  public void startDocument() throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#startDocument");  m_insideParse=true;  if (m_contentHandler != null) {    if (m_incremental) {      m_transformer.setSourceTreeDocForThread(m_dtm.getDocument());      int cpriority=Thread.currentThread().getPriority();      m_transformer.runTransformThread(cpriority);    }    m_contentHandler.startDocument();  }}  }
class C{  public DrawerBuilder withFullscreen(boolean fullscreen){  this.mFullscreen=fullscreen;  if (fullscreen) {    withTranslucentStatusBar(true);    withTranslucentNavigationBar(false);  }  return this;}  }
class C{  public void testCompare12To13() throws Exception {  assertTrue(ApplicationXmlVersion.V1_2.compareTo(ApplicationXmlVersion.V1_3) < 0);}  }
class C{  protected void onException(final Throwable e,Object... context){  if (e != null) {    e.printStackTrace();  }}  }
class C{  public AttributeParameterPrecondition(InputPort inport,Operator operator,String parameterName,int attributeType){  this(inport,operator,parameterName,null,attributeType);}  }
class C{  public boolean containsSessionParticipant(String sessionParticipantIndex){  Validate.notNull(sessionParticipantIndex);  return this.participants.containsKey(sessionParticipantIndex);}  }
class C{  public static long checkArgumentNonnegative(final long value,final String errorMessage){  if (value < 0) {    throw new IllegalArgumentException(errorMessage);  }  return value;}  }
class C{  public boolean startsWith(String prefix){  return value.startsWith(prefix,0);}  }
class C{  @BeforeTest(alwaysRun=true) public void beforeTest(final ITestContext testContext,final XmlTest xmlTest){  SeleniumTestsContextManager.initTestLevelContext(testContext,xmlTest);}  }
class C{  @Override public byte[] toByteArray(){  byte[] p=priv.toByteArray();  if (p.length != 32) {    byte[] tmp=new byte[32];    System.arraycopy(p,Math.max(0,p.length - 32),tmp,Math.max(0,32 - p.length),Math.min(32,p.length));    p=tmp;  }  return p;}  }
class C{  @Override public Data execute(Data kObj,double sum,double corr) throws DMLRuntimeException {  kplus.execute(kObj,sum,corr);  return kObj;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>();  newVector.add(new Option("\tSet the loss function to minimize.\n\t0 = " + "hinge loss (SVM), 1 = log loss (logistic regression),\n\t" + "2 = squared loss (regression), 3 = epsilon insensitive loss (regression),"+ "\n\t4 = Huber loss (regression).\n\t(default = 0)","F",1,"-F"));  newVector.add(new Option("\tThe learning rate. If normalization is\n" + "\tturned off (as it is automatically for streaming data), then the\n\t" + "default learning rate will need to be reduced "+ "(try 0.0001).\n\t(default = 0.01).","L",1,"-L"));  newVector.add(new Option("\tThe lambda regularization constant " + "(default = 0.0001)","R",1,"-R <double>"));  newVector.add(new Option("\tThe number of epochs to perform (" + "batch learning only, default = 500)","E",1,"-E <integer>"));  newVector.add(new Option("\tThe epsilon threshold (" + "epsilon-insenstive and Huber loss only, default = 1e-3)","C",1,"-C <double>"));  newVector.add(new Option("\tDon't normalize the data","N",0,"-N"));  newVector.add(new Option("\tDon't replace missing values","M",0,"-M"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public boolean stop(ShutdownModeAmp mode){  Objects.requireNonNull(mode);  if (!_lifecycle.toStop()) {    return false;  }  _shutdownMode=mode;  return true;}  }
class C{  private void createRayTracingProgram() throws IOException {  int program=glCreateProgram();  int vshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/quad.vs",GL_VERTEX_SHADER,"330");  int fshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/raytracingUbo.fs",GL_FRAGMENT_SHADER);  int random=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/random.glsl",GL_FRAGMENT_SHADER);  int randomCommon=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/randomCommon.glsl",GL_FRAGMENT_SHADER,"330");  glAttachShader(program,vshader);  glAttachShader(program,fshader);  glAttachShader(program,random);  glAttachShader(program,randomCommon);  glBindAttribLocation(program,0,"vertex");  glBindFragDataLocation(program,0,"color");  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.rayTracingProgram=program;}  }
class C{  public ResultFileInfo(){  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:29.517 -0500",hash_original_method="14B57626E7341DE57616D6DE76633AEC",hash_generated_method="E7176FCA346CD988C0AA6C947270DFB3") public DERTaggedObject(int tagNo){  super(false,tagNo,new DERSequence());}  }
class C{  public static ArrayList<File> listAllFiles(File folder){  ArrayList<File> list=new ArrayList<File>();  if (!folder.exists() || folder.listFiles() == null || folder.listFiles().length <= 0 || !folder.canRead()) {    return list;  }  File[] listf=folder.listFiles();  for (  File f : listf) {    if (f.isFile()) {      list.add(f);    } else {      if (listAllFiles(f) != null)       for (      File f1 : listAllFiles(f)) {        list.add(f1);      }    }  }  return list;}  }
class C{  public static void isIngestionRequestValidForUnManagedFileSystems(List<URI> UnManagedFileSystems,VirtualPool cos,DbClient dbClient) throws DatabaseException {  for (  URI unManagedFileSystemUri : UnManagedFileSystems) {    ArgValidator.checkUri(unManagedFileSystemUri);    UnManagedFileSystem unManagedFileSystem=dbClient.queryObject(UnManagedFileSystem.class,unManagedFileSystemUri);    ArgValidator.checkEntityNotNull(unManagedFileSystem,unManagedFileSystemUri,false);    if (null == unManagedFileSystem.getFileSystemCharacterstics() || null == unManagedFileSystem.getFileSystemInformation()) {      continue;    }    StringSetMap unManagedFileSystemInformation=unManagedFileSystem.getFileSystemInformation();    String fileSystemNativeGuid=unManagedFileSystem.getNativeGuid().replace(UNMANAGEDFILESYSTEM,FILESYSTEM);    if (VirtualPoolUtil.checkIfFileSystemExistsInDB(fileSystemNativeGuid,dbClient)) {      throw APIException.internalServerErrors.objectAlreadyManaged("FileSystem",fileSystemNativeGuid);    }    checkStoragePoolValidForUnManagedFileSystemUri(unManagedFileSystemInformation,dbClient,unManagedFileSystemUri);    checkVirtualPoolValidForGivenUnManagedFileSystemUris(unManagedFileSystem.getSupportedVpoolUris(),unManagedFileSystemUri,cos.getId());  }}  }
class C{  public void write(OutputNode node,Object source) throws Exception {  Collection list=(Collection)source;  if (group.isInline()) {    if (!list.isEmpty()) {      write(node,list);    } else     if (!node.isCommitted()) {      node.remove();    }  } else {    write(node,list);  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);}  }
class C{  public static double xlogx(int c){  if (c == 0) {    return 0.0;  }  return c * Utils.log2(c);}  }
class C{  public SparseMatrix(final int numRows,final int numCols,final int initialCapacityPerRow){  super(numRows,numCols);  this.numRows=numRows;  this.initialCapacityPerRow=initialCapacityPerRow;  this.values=new double[numRows][];  this.cols=new int[numRows][];  this.maxIndices=new int[numRows];  for (int i=0; i < numRows; ++i) {    this.values[i]=new double[initialCapacityPerRow];    this.cols[i]=new int[initialCapacityPerRow];    this.maxIndices[i]=0;  }}  }
class C{  public MqttUnacceptableProtocolVersionException(String message){  super(message);}  }
class C{  public static MobileDoc create(String title){  return create(false,title,false);}  }
class C{  static public JCheckBox createJCheckBoxForTable(boolean selected){  JCheckBox checkBox=new JCheckBox();  checkBox.setOpaque(true);  checkBox.setHorizontalAlignment(SwingConstants.CENTER);  checkBox.setForeground(TABLE_COMPONENT_FG_COLOR);  checkBox.setBackground(TABLE_COMPONENT_BG_COLOR);  checkBox.setSelected(selected);  return checkBox;}  }
class C{  public int startPos(JCTree tree){  if (tree == null)   return Position.NOPOS;  return TreeInfo.getStartPos(tree);}  }
class C{  public synchronized void handleResponse(){synchronized (this) {    waitingCount--;  }  totalReceivedResponses++;  if (isWaiting) {    if (waitingCount == 0) {      super.notify();    } else {      stopTimer();      startTimer();    }  }}  }
class C{  public static ReportMailingJobRunHistory newInstance(final ReportMailingJob reportMailingJob,final DateTime startDateTime,final DateTime endDateTime,final String status,final String errorMessage,final String errorLog){  return new ReportMailingJobRunHistory(reportMailingJob,startDateTime,endDateTime,status,errorMessage,errorLog);}  }
class C{  public boolean hasTimeZoneChanged(WatchFaceTime otherTime){  return (timezone == null ? otherTime.timezone != null : !timezone.equals(otherTime.timezone));}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  Camera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.setOneShotPreviewCallback(previewCallback);  }}  }
class C{  public static BufferedImage createCompatibleImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height);}  }
class C{  public static byte[] hexStringToByteArray(String s){  int len=s.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(s.charAt(i),16) << 4) + Character.digit(s.charAt(i + 1),16));  }  return data;}  }
class C{  public DiscoverItems discoverItems(String entityID) throws XMPPException {  return discoverItems(entityID,null);}  }
class C{  @Field(44) public Pointer<Integer> puintVal(){  return this.io.getPointerField(this,44);}  }
class C{  public static void validateIpInterfacesRegistered(List<String> clients,DbClient dbClient){  if (clients != null) {    for (    String client : clients) {      List<IpInterface> ipInterfaces=CustomQueryUtility.queryActiveResourcesByAltId(dbClient,IpInterface.class,"ipAddress",client);      for (      IpInterface ipInterface : ipInterfaces) {        if (ipInterface.getRegistrationStatus().equals(RegistrationStatus.UNREGISTERED.toString())) {          throw APIException.badRequests.invalidParameterIpInterfaceIsDeregistered(client);        }      }    }  }}  }
class C{  private boolean isOverloadingMethod(final MethodSymbol method){  try {    if (method.owner.isInterface())     return overloaded(method,method.owner.type.tsym,types);    if (method.owner.type.tsym.getQualifiedName().toString().equals("ceylon.language.Exception"))     return false;    for (Type superType=types.supertype(method.owner.type); superType.tsym != null; superType=types.supertype(superType)) {      TypeSymbol i=superType.tsym;      String fqn=i.getQualifiedName().toString();      if (fqn.equals("ceylon.language.Anything"))       break;      try {        for (Entry e=i.members().lookup(method.name); e.scope != null; e=e.next()) {          if (isIgnored(e.sym))           continue;          if (!method.overrides(e.sym,(TypeSymbol)method.owner,types,false)) {            return true;          }        }        if (overloaded(method,i,types))         return true;      } catch (      Symbol.CompletionFailure x) {      }      if (fqn.equals("ceylon.language.Exception"))       break;    }    if (overloaded(method,method.owner.type.tsym,types))     return true;    return false;  } catch (  CompletionFailure x) {    handleCompletionFailure(method,x);    return false;  }}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  public int score(IGameState state,IPlayer ip){  TicTacToeState tttState=(TicTacToeState)state;  TicTacToeBoard board=tttState.board();  Player p=(Player)ip;  int pscore=0;  int n=numInRow(board,3,p.getOpponentMark());  if (n > 0) {    return MoveEvaluation.minimum();  }  if (board.isDraw()) {    return 0;  }  n=numInRow(board,3,p.getMark());  if (n > 0) {    return MoveEvaluation.maximum();  }  n=numInRow(board,2,p.getMark());  if (n > 1) {    pscore=10000;  } else   if (n == 1) {    pscore=1000;  }  return pscore;}  }
class C{  public static void writeShort(byte[] memory,int index,short value){  memory[index + 0]=(byte)((value >> (8 * 1)) & 0xFF);  memory[index + 1]=(byte)(value & 0xFF);}  }
class C{  public T caseAnnotatableElement(AnnotatableElement object){  return null;}  }
class C{  public static Stream<Transaction> streamDefault(final Transaction transaction){  return streamSelfAndFirstChildTransactions(transaction);}  }
class C{  public Schema(String[] names,Class[] types,Object[] defaults){  this(names.length);  if (names.length != types.length || types.length != defaults.length) {    throw new IllegalArgumentException("Input arrays should be the same length");  }  for (int i=0; i < names.length; ++i) {    addColumn(names[i],types[i],defaults[i]);  }}  }
class C{  public DHParameterSpec(BigInteger p,BigInteger g,int l){  this.p=p;  this.g=g;  this.l=l;}  }
class C{  public boolean canPace(){  return false;}  }
class C{  public static void isPositiveAndNonZeroNumber(String member,long inputValue) throws ValidationException {  if (!(Long.valueOf(inputValue).compareTo(Long.valueOf(0)) > 0)) {    ValidationException vf=new ValidationException(ReasonEnum.POSITIVE_NUMBER,member,new Object[]{Long.valueOf(inputValue)});    logValidationFailure(vf);    throw vf;  }}  }
class C{  public static Font[] loadFont(File file,boolean fingerprint) throws IOException {  FontFactory fontFactory=FontFactory.getInstance();  fontFactory.fingerprintFont(fingerprint);  FileInputStream is=null;  try {    is=new FileInputStream(file);    return fontFactory.loadFonts(is);  }  finally {    if (is != null) {      is.close();    }  }}  }
class C{  @Override public void write(Integer value){  for (  InternalSlavePartner internalSlavePartner : internalSlavePartners) {    internalSlavePartner.reverseWrite(value);  }}  }
class C{  protected void _writeLastChunk(byte[] buffer,long index) throws FileEncryptionException, RandomDataGenerationException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException, IOException {  byte[] iv=generateRandomChunkIV();  IvParameterSpec spec=new IvParameterSpec(iv);  lastChunkCipher.init(Cipher.ENCRYPT_MODE,getFileKey(),spec);  byte[] encChunk=lastChunkCipher.doFinal(buffer);  if ((encChunk == null) || (encChunk.length != (buffer.length + CHUNK_TLEN))) {    throw new FileEncryptionException("Encrypted chunk length mismatch!");  }  long oldpos=backingRandomAccessFile.getFilePointer();  backingRandomAccessFile.seek(chunkOffset(index));  backingRandomAccessFile.write(iv);  backingRandomAccessFile.write(encChunk);  backingRandomAccessFile.seek(oldpos);}  }
class C{  @Bean public Queue dmfReceiverQueue(){  return new Queue(amqpProperties.getReceiverQueue(),true,false,false,amqpDeadletterProperties.getDeadLetterExchangeArgs(amqpProperties.getDeadLetterExchange()));}  }
class C{  private final void logTestHistory(){  String classname=getTestClass().getSimpleName();  testHistory.add(classname);  System.out.println("Previously run tests: " + testHistory);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void onDisconnect(){  setMode(MODE.OFFLINE);}  }
class C{  private boolean calibrationSuccessful(int calibrationCode){  return calibrationCode != 0 && calibrationCode != 0x0F;}  }
class C{  public SQLXML readSQLXML() throws SQLException {  return (SQLXML)getNextAttribute();}  }
class C{  public static <T>Mono<T> singleToMono(Single<T> source){  return new SingleAsMono<>(source);}  }
class C{  Signature(Class<?> type,String name,Class<?>[] args){  this.type=type;  this.name=name;  this.args=args;}  }
class C{  private static Paint darkerLinearGradientPaint(LinearGradientPaint paint){  final Color[] paintColors=paint.getColors();  for (int i=0; i < paintColors.length; i++) {    paintColors[i]=darker(paintColors[i]);  }  return new LinearGradientPaint(paint.getStartPoint(),paint.getEndPoint(),paint.getFractions(),paintColors,paint.getCycleMethod(),paint.getColorSpace(),paint.getTransform());}  }
class C{  public ChildrenBuilder childType(String childType){  this.childType=childType;  return this;}  }
class C{  public static boolean createDirectory(final String dir){  final File file=new File(dir);  file.mkdirs();  return file.exists() && file.isDirectory();}  }
class C{  @Override public void buildEvaluator(Instances data) throws Exception {  data=new Instances(data);  data.deleteWithMissingClass();  ReplaceMissingValues rmv=new ReplaceMissingValues();  rmv.setInputFormat(data);  data=Filter.useFilter(data,rmv);  int numClasses=data.classAttribute().numValues();  int classIndex=data.classIndex();  int numInstances=data.numInstances();  m_correlations=new double[data.numAttributes()];  List<Integer> numericIndexes=new ArrayList<Integer>();  List<Integer> nominalIndexes=new ArrayList<Integer>();  if (m_detailedOutput) {    m_detailedOutputBuff=new StringBuffer();  }  double[][][] nomAtts=new double[data.numAttributes()][][];  for (int i=0; i < data.numAttributes(); i++) {    if (data.attribute(i).isNominal() && i != classIndex) {      nomAtts[i]=new double[data.attribute(i).numValues()][data.numInstances()];      Arrays.fill(nomAtts[i][0],1.0);      nominalIndexes.add(i);    } else     if (data.attribute(i).isNumeric() && i != classIndex) {      numericIndexes.add(i);    }  }  if (nominalIndexes.size() > 0) {    for (int i=0; i < data.numInstances(); i++) {      Instance current=data.instance(i);      for (int j=0; j < current.numValues(); j++) {        if (current.attribute(current.index(j)).isNominal() && current.index(j) != classIndex) {          nomAtts[current.index(j)][(int)current.valueSparse(j)][i]+=1;          nomAtts[current.index(j)][0][i]-=1;        }      }    }  }  if (data.classAttribute().isNumeric()) {    double[] classVals=data.attributeToDoubleArray(classIndex);    for (    Integer i : numericIndexes) {      double[] numAttVals=data.attributeToDoubleArray(i);      m_correlations[i]=Utils.correlation(numAttVals,classVals,numAttVals.length);      if (m_correlations[i] == 1.0) {        if (Utils.variance(numAttVals) == 0) {          m_correlations[i]=0;        }      }    }    if (nominalIndexes.size() > 0) {      for (      Integer i : nominalIndexes) {        double sum=0;        double corr=0;        double sumCorr=0;        double sumForValue=0;        if (m_detailedOutput) {          m_detailedOutputBuff.append("\n\n").append(data.attribute(i).name());        }        for (int j=0; j < data.attribute(i).numValues(); j++) {          sumForValue=Utils.sum(nomAtts[i][j]);          corr=Utils.correlation(nomAtts[i][j],classVals,classVals.length);          if (sumForValue == numInstances || sumForValue == 0) {            corr=0;          }          if (corr < 0.0) {            corr=-corr;          }          sumCorr+=sumForValue * corr;          sum+=sumForValue;          if (m_detailedOutput) {            m_detailedOutputBuff.append("\n\t").append(data.attribute(i).value(j)).append(": ");            m_detailedOutputBuff.append(Utils.doubleToString(corr,6));          }        }        m_correlations[i]=(sum > 0) ? sumCorr / sum : 0;      }    }  } else {    double[][] binarizedClasses=new double[data.classAttribute().numValues()][data.numInstances()];    double[] classValCounts=new double[data.classAttribute().numValues()];    for (int i=0; i < data.numInstances(); i++) {      Instance current=data.instance(i);      binarizedClasses[(int)current.classValue()][i]=1;    }    for (int i=0; i < data.classAttribute().numValues(); i++) {      classValCounts[i]=Utils.sum(binarizedClasses[i]);    }    double sumClass=Utils.sum(classValCounts);    if (numericIndexes.size() > 0) {      for (      Integer i : numericIndexes) {        double[] numAttVals=data.attributeToDoubleArray(i);        double corr=0;        double sumCorr=0;        for (int j=0; j < data.classAttribute().numValues(); j++) {          corr=Utils.correlation(numAttVals,binarizedClasses[j],numAttVals.length);          if (corr < 0.0) {            corr=-corr;          }          if (corr == 1.0) {            if (Utils.variance(numAttVals) == 0) {              corr=0;            }          }          sumCorr+=classValCounts[j] * corr;        }        m_correlations[i]=sumCorr / sumClass;      }    }    if (nominalIndexes.size() > 0) {      for (      Integer i : nominalIndexes) {        if (m_detailedOutput) {          m_detailedOutputBuff.append("\n\n").append(data.attribute(i).name());        }        double sumForAtt=0;        double corrForAtt=0;        for (int j=0; j < data.attribute(i).numValues(); j++) {          double sumForValue=Utils.sum(nomAtts[i][j]);          double corr=0;          double sumCorr=0;          double avgCorrForValue=0;          sumForAtt+=sumForValue;          for (int k=0; k < numClasses; k++) {            corr=Utils.correlation(nomAtts[i][j],binarizedClasses[k],binarizedClasses[k].length);            if (sumForValue == numInstances || sumForValue == 0) {              corr=0;            }            if (corr < 0.0) {              corr=-corr;            }            sumCorr+=classValCounts[k] * corr;          }          avgCorrForValue=sumCorr / sumClass;          corrForAtt+=sumForValue * avgCorrForValue;          if (m_detailedOutput) {            m_detailedOutputBuff.append("\n\t").append(data.attribute(i).value(j)).append(": ");            m_detailedOutputBuff.append(Utils.doubleToString(avgCorrForValue,6));          }        }        m_correlations[i]=(sumForAtt > 0) ? corrForAtt / sumForAtt : 0;      }    }  }  if (m_detailedOutputBuff != null && m_detailedOutputBuff.length() > 0) {    m_detailedOutputBuff.append("\n");  }}  }
class C{  @SuppressWarnings("unchecked") private void mergeHi(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  Object[] a=this.a;  Object[] tmp=ensureCapacity(len2);  System.arraycopy(a,base2,tmp,0,len2);  int cursor1=base1 + len1 - 1;  int cursor2=len2 - 1;  int dest=base2 + len2 - 1;  a[dest--]=a[cursor1--];  if (--len1 == 0) {    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);    return;  }  if (len2 == 1) {    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];    return;  }  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      if (((Comparable)tmp[cursor2]).compareTo(a[cursor1]) < 0) {        a[dest--]=a[cursor1--];        count1++;        count2=0;        if (--len1 == 0)         break outer;      } else {        a[dest--]=tmp[cursor2--];        count2++;        count1=0;        if (--len2 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      count1=len1 - gallopRight((Comparable)tmp[cursor2],a,base1,len1,len1 - 1);      if (count1 != 0) {        dest-=count1;        cursor1-=count1;        len1-=count1;        System.arraycopy(a,cursor1 + 1,a,dest + 1,count1);        if (len1 == 0)         break outer;      }      a[dest--]=tmp[cursor2--];      if (--len2 == 1)       break outer;      count2=len2 - gallopLeft((Comparable)a[cursor1],tmp,0,len2,len2 - 1);      if (count2 != 0) {        dest-=count2;        cursor2-=count2;        len2-=count2;        System.arraycopy(tmp,cursor2 + 1,a,dest + 1,count2);        if (len2 <= 1)         break outer;      }      a[dest--]=a[cursor1--];      if (--len1 == 0)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len2 == 1) {    if (DEBUG)     assert len1 > 0;    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];  } else   if (len2 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len1 == 0;    if (DEBUG)     assert len2 > 0;    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);  }}  }
class C{  private void mergeForceCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] < runLen[n + 1])     n--;    mergeAt(n);  }}  }
class C{  public void interpolatePathDataNode(PathDataNode nodeFrom,PathDataNode nodeTo,float fraction){  for (int i=0; i < nodeFrom.mParams.length; i++) {    mParams[i]=nodeFrom.mParams[i] * (1 - fraction) + nodeTo.mParams[i] * fraction;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementnotfounderr.class,args);}  }
class C{  public void visitInsn(int opcode){  if (mv != null) {    mv.visitInsn(opcode);  }}  }
class C{  public static ExpectedVersion streamExists(){  return STREAM_EXISTS;}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  if (!getItemVisible(series,item)) {    return;  }  IntervalXYDataset intervalDataset=(IntervalXYDataset)dataset;  double value0;  double value1;  if (this.useYInterval) {    value0=intervalDataset.getStartYValue(series,item);    value1=intervalDataset.getEndYValue(series,item);  } else {    value0=this.base;    value1=intervalDataset.getYValue(series,item);  }  if (Double.isNaN(value0) || Double.isNaN(value1)) {    return;  }  if (value0 <= value1) {    if (!rangeAxis.getRange().intersects(value0,value1)) {      return;    }  } else {    if (!rangeAxis.getRange().intersects(value1,value0)) {      return;    }  }  double translatedValue0=rangeAxis.valueToJava2D(value0,dataArea,plot.getRangeAxisEdge());  double translatedValue1=rangeAxis.valueToJava2D(value1,dataArea,plot.getRangeAxisEdge());  double bottom=Math.min(translatedValue0,translatedValue1);  double top=Math.max(translatedValue0,translatedValue1);  double startX=intervalDataset.getStartXValue(series,item);  if (Double.isNaN(startX)) {    return;  }  double endX=intervalDataset.getEndXValue(series,item);  if (Double.isNaN(endX)) {    return;  }  if (startX <= endX) {    if (!domainAxis.getRange().intersects(startX,endX)) {      return;    }  } else {    if (!domainAxis.getRange().intersects(endX,startX)) {      return;    }  }  if (this.barAlignmentFactor >= 0.0 && this.barAlignmentFactor <= 1.0) {    double x=intervalDataset.getXValue(series,item);    double interval=endX - startX;    startX=x - interval * this.barAlignmentFactor;    endX=startX + interval;  }  RectangleEdge location=plot.getDomainAxisEdge();  double translatedStartX=domainAxis.valueToJava2D(startX,dataArea,location);  double translatedEndX=domainAxis.valueToJava2D(endX,dataArea,location);  double translatedWidth=Math.max(1,Math.abs(translatedEndX - translatedStartX));  double left=Math.min(translatedStartX,translatedEndX);  if (getMargin() > 0.0) {    double cut=translatedWidth * getMargin();    translatedWidth=translatedWidth - cut;    left=left + cut / 2;  }  Rectangle2D bar=null;  PlotOrientation orientation=plot.getOrientation();  if (orientation.isHorizontal()) {    bottom=Math.max(bottom,dataArea.getMinX());    top=Math.min(top,dataArea.getMaxX());    bar=new Rectangle2D.Double(bottom,left,top - bottom,translatedWidth);  } else   if (orientation.isVertical()) {    bottom=Math.max(bottom,dataArea.getMinY());    top=Math.min(top,dataArea.getMaxY());    bar=new Rectangle2D.Double(left,bottom,translatedWidth,top - bottom);  }  boolean positive=(value1 > 0.0);  boolean inverted=rangeAxis.isInverted();  RectangleEdge barBase;  if (orientation.isHorizontal()) {    if (positive && inverted || !positive && !inverted) {      barBase=RectangleEdge.RIGHT;    } else {      barBase=RectangleEdge.LEFT;    }  } else {    if (positive && !inverted || !positive && inverted) {      barBase=RectangleEdge.BOTTOM;    } else {      barBase=RectangleEdge.TOP;    }  }  if (state.getElementHinting()) {    beginElementGroup(g2,dataset.getSeriesKey(series),item);  }  if (getShadowsVisible()) {    this.barPainter.paintBarShadow(g2,this,series,item,bar,barBase,!this.useYInterval);  }  this.barPainter.paintBar(g2,this,series,item,bar,barBase);  if (state.getElementHinting()) {    endElementGroup(g2);  }  if (isItemLabelVisible(series,item)) {    XYItemLabelGenerator generator=getItemLabelGenerator(series,item);    drawItemLabel(g2,dataset,series,item,plot,generator,bar,value1 < 0.0);  }  double x1=(startX + endX) / 2.0;  double y1=dataset.getYValue(series,item);  double transX1=domainAxis.valueToJava2D(x1,dataArea,location);  double transY1=rangeAxis.valueToJava2D(y1,dataArea,plot.getRangeAxisEdge());  int domainAxisIndex=plot.getDomainAxisIndex(domainAxis);  int rangeAxisIndex=plot.getRangeAxisIndex(rangeAxis);  updateCrosshairValues(crosshairState,x1,y1,domainAxisIndex,rangeAxisIndex,transX1,transY1,plot.getOrientation());  EntityCollection entities=state.getEntityCollection();  if (entities != null) {    addEntity(entities,bar,dataset,series,item,0.0,0.0);  }}  }
class C{  public static int findName(String name,String[] table){  for (int i=0; i < table.length; i++) {    if (name.equals(table[i])) {      return i;    }  }  return -1;}  }
class C{  public void putStringArrayList(String key,ArrayList<String> value){  map.put(key,value);}  }
class C{  public void requestBrowserContent(InfoDisplayEvent event){  fireRequestBrowserContent(new InfoDisplayEvent(this,event.getInformation()));}  }
class C{  public String[] readAllLines(){  ArrayList<String> lines=new ArrayList<String>();  while (hasNextLine()) {    lines.add(readLine());  }  return lines.toArray(new String[0]);}  }
class C{  private void deleteGroup(List<Segment> group){  for (  Segment oldSegment : group) {    oldSegment.close();    oldSegment.delete();  }}  }
class C{  public GroovyThread(Script owner,String[] args){  super(owner,args);}  }
class C{  @Override @Suspendable public void stop() throws Exception {}  }
class C{  public void fatalError(TranscoderException ex) throws TranscoderException {  throw ex;}  }
class C{  public void onJobUnlock(){  assert !done;  lock.readLock().unlock();}  }
class C{  @Override public void activateGroupSnapshots(StorageSystem storage,URI snapshot,TaskCompleter taskCompleter) throws DeviceControllerException {  try {    _log.info("activateGroupSnapshots operation START");    BlockSnapshot snapshotObj=_dbClient.queryObject(BlockSnapshot.class,snapshot);    if (snapshotObj.getIsSyncActive()) {      _log.warn("Trying to activate CG snapshot, which is already active",snapshotObj.getId().toString());      return;    }    String groupName=ConsistencyGroupUtils.getSourceConsistencyGroupName(snapshotObj,_dbClient);    storage=findProviderFactory.withGroup(storage,groupName).find();    if (storage == null) {      ServiceError error=DeviceControllerErrors.smis.noConsistencyGroupWithGivenName();      taskCompleter.error(_dbClient,error);      return;    }    Volume sourceVolume=_dbClient.queryObject(Volume.class,snapshotObj.getParent().getURI());    boolean isSuccess=VmaxGroupOperationsUtils.activateGroupReplicas(storage,sourceVolume,snapshotObj,SYNC_TYPE.SNAPSHOT,taskCompleter,_dbClient,_helper,_cimPath);    if (isSuccess) {      List<BlockSnapshot> snapshots=ControllerUtils.getSnapshotsPartOfReplicationGroup(snapshotObj,_dbClient);      setIsSyncActive(snapshots,true);      for (      BlockSnapshot it : snapshots) {        it.setRefreshRequired(true);      }      _dbClient.persistObject(snapshots);      taskCompleter.ready(_dbClient);    }  } catch (  Exception e) {    _log.info("Problem making SMI-S call: ",e);    ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());    taskCompleter.error(_dbClient,error);  } finally {    _log.info("activateGroupSnapshots operation END");  }}  }
class C{  public static void checkEquals(BigDecimal expected,BigDecimal actual){  checkEqualsWithScaleOfTen("",expected,actual);}  }
class C{  @Override public Long sort(final String key,final String dstkey){  checkIsInMultiOrPipeline();  client.sort(key,dstkey);  return client.getIntegerReply();}  }
class C{  public RepositoryImpl(){  init(ISicresAdminDefsKeys.NULL_ID);}  }
class C{  private List<int[]> purify(List actualClusterings,List clusterIds,List<Set<String>> forbiddenList){  for (int i=0; i < actualClusterings.size() && i < 10; i++) {    List partition=(List)actualClusterings.get(i);    printLatentClique((int[])clusterIds.get(i),clustersize(partition));    Clusters clustering=new Clusters();    int clusterId=0;    Iterator it=partition.iterator();    printClustering(partition);    while (it.hasNext()) {      int codes[]=(int[])it.next();      for (int k=0; k < codes.length; k++) {        String var=tetradTest.getVarNames()[codes[k]];        clustering.addToCluster(clusterId,var);      }      clusterId++;    }    List<List<Node>> partition2=new ArrayList<>();    for (int j=0; j < partition.size(); j++) {      int[] clusterIndices=(int[])partition.get(j);      List<Node> cluster=new ArrayList<>();      for (int k=0; k < clusterIndices.length; k++) {        cluster.add(tetradTest.getVariables().get(clusterIndices[k]));      }      partition2.add(cluster);    }    System.out.println("Partition 2 = " + partition2);    Purify purifier=new Purify(tetradTest,clustering);    purifier.setForbiddenList(forbiddenList);    purifier.setOutputMessage(this.outputMessage);    Graph solutionGraph=purifier.search();    if (solutionGraph != null && solutionGraph.getNodes().size() > 1) {      List clusteringOutput=convertGraphToList(solutionGraph);      return clusteringOutput;    } else     if (actualClusterings.size() > 1) {      rebuildClusteringList(actualClusterings,i,clusterIds);    }    return new ArrayList<>();  }  return new ArrayList<>();}  }
class C{  public void tryRollback(final Graph graph){  if (graph.features().graph().supportsTransactions())   graph.tx().rollback();}  }
class C{  public static void main(String... a) throws Exception {  TestBase test=TestBase.createCaller().init();  test.config.big=true;  test.test();}  }
class C{  public static boolean isJavaKeyword(String string,int start,int end){  int length=end - start;  OUTER:   for (int i=0; i < tokensArray.length; i++) {    String token=tokensArray[i];    if (token.length() != length)     continue;    for (int c=0; c < length; c++) {      if (string.charAt(c + start) != token.charAt(c))       continue OUTER;    }    return true;  }  return false;}  }
class C{  public void selected(SelectEvent event){  if (event == null || this.isConsumed(event))   return;  if (this.parent != null)   this.parent.selected(event);}  }
class C{  public GuacamoleServerException(Throwable cause){  super(cause);}  }
class C{  public static void copyData(Raster src,WritableRaster dst){  if (is_INT_PACK_Data(src.getSampleModel(),false) && is_INT_PACK_Data(dst.getSampleModel(),false)) {    copyData_INT_PACK(src,dst);    return;  }  copyData_FALLBACK(src,dst);}  }
class C{  private Converter lookup(Type type,Object value) throws Exception {  Class real=type.getType();  if (value != null) {    real=value.getClass();  }  return registry.lookup(real);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StackedBarRenderer)) {    return false;  }  StackedBarRenderer that=(StackedBarRenderer)obj;  if (this.renderAsPercentages != that.renderAsPercentages) {    return false;  }  return super.equals(obj);}  }
class C{  void processSignChange(){  if (this.displayMode == DISPLAY_MODE.INPUT) {    final String input=getDisplayString();    if (input.length() > 0 && !input.equals(CHARACTER_ZERO)) {      if (input.indexOf(OPERATOR_MINUS) == 0) {        setDisplayString(input.substring(1));      } else {        setDisplayString(OPERATOR_MINUS + input);      }    }  } else   if (this.displayMode == DISPLAY_MODE.RESULT) {    final double numberInDisplay=getDisplayedNumber();    if (numberInDisplay != 0) {      displayResult(-numberInDisplay);    }  }}  }
class C{  public PdfGenerationException(Throwable cause){  super(DefaultPdfView.class,Messages.getString("DefaultPdfView.errorexporting"),cause);}  }
class C{  public Future<Pipeline> shutdownAfterHeartbeat(String name) throws InterruptedException, ReplicatorException {  ArrayList<Future<ReplDBMSHeader>> taskShutdownFutures=new ArrayList<Future<ReplDBMSHeader>>();  for (int i=0; i < stages.size(); i++) {    taskShutdownFutures.add(stages.get(i).watchForProcessedHeartbeat(name,true));  }  return scheduleWait("Offline at heartbeat event: " + name,taskShutdownFutures);}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  ActionMessages errors=new ActionMessages();  CourseOfferingEditForm frm=(CourseOfferingEditForm)form;  String op=(request.getParameter("op") == null) ? (frm.getOp() == null || frm.getOp().length() == 0) ? (request.getAttribute("op") == null) ? null : request.getAttribute("op").toString() : frm.getOp() : request.getParameter("op");  if (op == null)   op=request.getParameter("hdnOp");  if (op == null || op.trim().length() == 0) {    op="reload";  }  Debug.debug("Op: " + op);  if (op.equals(MSG.actionEditCourseOffering())) {    String courseOfferingId=(request.getParameter("courseOfferingId") == null) ? (request.getAttribute("courseOfferingId") == null) ? null : request.getAttribute("courseOfferingId").toString() : request.getParameter("courseOfferingId");    if (courseOfferingId == null && frm.getCourseOfferingId() != null) {      courseOfferingId=frm.getCourseOfferingId().toString();    }    if (courseOfferingId == null || courseOfferingId.trim().isEmpty()) {      throw new Exception(MSG.errorCourseDataNotCorrect() + courseOfferingId);    } else {      doLoad(request,frm,courseOfferingId);    }    return mapping.findForward("edit");  }  if (op.equals(MSG.actionAddCourseOffering())) {    frm.setSubjectAreaId(request.getParameter("subjAreaId") == null ? null : Long.valueOf(request.getParameter("subjAreaId")));    frm.setCourseNbr(request.getParameter("courseNbr"));    TreeSet<SubjectArea> subjects=SubjectArea.getUserSubjectAreas(sessionContext.getUser());    if (frm.getSubjectAreaId() == null && !subjects.isEmpty())     frm.setSubjectAreaId(subjects.first().getUniqueId());    frm.setIsControl(true);    frm.setAllowDemandCourseOfferings(true);    for (int i=0; i < Constants.PREF_ROWS_ADDED; i++)     frm.getInstructors().add(Preference.BLANK_PREF_VALUE);    frm.setAdd(true);    Session session=SessionDAO.getInstance().get(sessionContext.getUser().getCurrentAcademicSessionId());    frm.setWkEnrollDefault(session.getLastWeekToEnroll());    frm.setWkChangeDefault(session.getLastWeekToChange());    frm.setWkDropDefault(session.getLastWeekToDrop());    frm.setWeekStartDayOfWeek(Localization.getDateFormat("EEEE").format(session.getSessionBeginDateTime()));    doReload(request,frm);  }  if (op.equals(MSG.actionUpdateCourseOffering()) || op.equals(MSG.actionSaveCourseOffering())) {    errors=frm.validate(mapping,request);    if (errors.size() == 0) {      if (frm.isAdd())       doSave(request,frm); else       doUpdate(request,frm);      String cn=(String)sessionContext.getAttribute(SessionAttribute.OfferingsCourseNumber);      if (cn != null)       sessionContext.setAttribute(SessionAttribute.OfferingsCourseNumber,frm.getCourseNbr());      ActionRedirect redirect=new ActionRedirect(mapping.findForward("instructionalOfferingDetail"));      redirect.addParameter("io",frm.getInstrOfferingId());      redirect.addParameter("op","view");      return redirect;    } else {      saveErrors(request,errors);      doReload(request,frm);    }  }  if (op.equals(MSG.actionAddCoordinator())) {    for (int i=0; i < Constants.PREF_ROWS_ADDED; i++)     frm.getInstructors().add(Preference.BLANK_PREF_VALUE);    doReload(request,frm);  }  if (op.equals(MSG.actionRemoveCoordinator()) && request.getParameter("deleteType") != null && request.getParameter("deleteType").equals("coordinator")) {    try {      int deleteId=Integer.parseInt(request.getParameter("deleteId"));      if (deleteId >= 0)       frm.getInstructors().remove(deleteId);    } catch (    Exception e) {    }    doReload(request,frm);  }  if (op.equals("reload")) {    doReload(request,frm);  }  return mapping.findForward(frm.isAdd() ? "add" : "edit");}  }
class C{  @Override public ReadableFontData slice(int offset,int length){  if (offset < 0 || length < 0 || offset > Integer.MAX_VALUE - length || (offset + length) > this.size()) {    throw new IndexOutOfBoundsException("Attempt to bind data outside of its limits.");  }  ReadableFontData slice=new ReadableFontData(this,offset,length);  return slice;}  }
class C{  protected void createShapes(DrawContext dc){  this.paths=new Path[2];  this.paths[0]=this.createPath(Arrays.asList(this.startPosition,this.endPosition));  Globe globe=dc.getGlobe();  Vec4 p1=globe.computePointFromPosition(this.startPosition);  Vec4 p2=globe.computePointFromPosition(this.endPosition);  Vec4 v21=p1.subtract3(p2);  double arrowheadLength=v21.getLength3() * this.getArrowLength();  List<Position> positions=this.computeArrowheadPositions(dc,p2,v21,arrowheadLength);  this.paths[1]=createPath(positions);}  }
class C{  public INNER_JOIN INNER_JOIN(String tableToJoin){  return new INNER_JOIN(this,tableToJoin);}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals(org.compiere.model.GridField.PROPERTY))   setValue(evt.getNewValue());}  }
class C{  public BaseDateTime(long instant,DateTimeZone zone){  this(instant,ISOChronology.getInstance(zone));}  }
class C{  public synchronized void addZoomListener(ZoomListener listener){  zoomDelegate.add(listener);}  }
class C{  public Pageable createPageable(){  return new DrawingPageable(view.getDrawing());}  }
class C{  @Override public SQLXML createSQLXML() throws SQLException {  throw unsupported("SQLXML");}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public static Bigquery createAuthorizedClient() throws IOException {  HttpTransport transport=new NetHttpTransport();  JsonFactory jsonFactory=new JacksonFactory();  GoogleCredential credential=GoogleCredential.getApplicationDefault(transport,jsonFactory);  if (credential.createScopedRequired()) {    credential=credential.createScoped(BigqueryScopes.all());  }  return new Bigquery.Builder(transport,jsonFactory,credential).setApplicationName("Bigquery Samples").build();}  }
class C{  public static int[] rectToCell(int width,int height,int[] result){  LauncherAppState app=LauncherAppState.getInstance();  DeviceProfile grid=app.getDynamicGrid().getDeviceProfile();  Rect padding=grid.getWorkspacePadding(grid.isLandscape ? CellLayout.LANDSCAPE : CellLayout.PORTRAIT);  int parentWidth=grid.calculateCellWidth(grid.widthPx - padding.left - padding.right,(int)grid.numColumns);  int parentHeight=grid.calculateCellHeight(grid.heightPx - padding.top - padding.bottom,(int)grid.numRows);  int smallerSize=Math.min(parentWidth,parentHeight);  int spanX=(int)Math.ceil(width / (float)smallerSize);  int spanY=(int)Math.ceil(height / (float)smallerSize);  if (result == null) {    return new int[]{spanX,spanY};  }  result[0]=spanX;  result[1]=spanY;  return result;}  }
class C{  public boolean isConnected(){  return m_DbUtils.isConnected();}  }
class C{  public RequestHandle head(String url,ResponseHandlerInterface responseHandler){  return head(null,url,null,responseHandler);}  }
class C{  public synchronized void removeXTextLabel(double x){  mXTextLabels.remove(x);}  }
class C{  public MapObject(Object id,Drawable drawable,int x,int y,boolean isTouchable){  this(id,drawable,x,y,isTouchable,true);}  }
class C{  public static int readSignedVarint(ByteBuffer buffer) throws IOException {  final int raw=readUnsignedVarint(buffer);  return (raw >>> 1) ^ -(raw & 1);}  }
class C{  private static void initializeGlobalComment(final CNaviViewEdge edge,final ArrayList<IComment> globalComments,final SQLProvider provider){  final INaviViewNode source=edge.getSource();  final INaviViewNode target=edge.getTarget();  if ((source instanceof INaviCodeNode) && (target instanceof IAddressNode)) {    CommentManager.get(provider).initializeGlobalEdgeComment(edge,globalComments);  } else   if ((source instanceof INaviFunctionNode) && (target instanceof IAddressNode)) {    CommentManager.get(provider).initializeGlobalEdgeComment(edge,globalComments);  }}  }
class C{  @Override public Date unmarshal(String string) throws Exception {  return new Date(Long.parseLong(string));}  }
class C{  public SpawnFilterParser(Element element) throws FilterException {  String spawnReasonProperty=element.getText();  if (spawnReasonProperty == null) {    throw new MissingFilterPropertyException("spawn reason",element);  }  try {    spawnReason=CreatureSpawnEvent.SpawnReason.valueOf(Strings.getTechnicalName(spawnReasonProperty));  } catch (  IllegalArgumentException e) {    throw new InvalidFilterPropertyException("spawn reason",element);  }}  }
class C{  public static synchronized void addFromProperties(File propsFile) throws Exception {  BufferedInputStream bi=new BufferedInputStream(new FileInputStream(propsFile));  addFromProperties(bi);}  }
class C{  @Override public synchronized void disconnectionNotification(String eventName,Object source){  if (m_Filter instanceof ConnectionNotificationConsumer) {    ((ConnectionNotificationConsumer)m_Filter).disconnectionNotification(eventName,source);  }  m_listenees.remove(eventName);}  }
class C{  public static void finishedDrawing(){  sDrawPrepared=false;  GLES20.glDisableVertexAttribArray(sPositionHandle);  GLES20.glUseProgram(0);}  }
class C{  @Path("info") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) @RolesAllowed("workspace/developer") public InfoResponse info(final InfoRequest request) throws ServerException, IOException {  request.withProjectPath(getRealPath(request.getProjectPath()));  return this.subversionApi.info(request);}  }
class C{  public void configureManagers(){  powerManager=new jmri.jmrix.tams.TamsPowerManager(getTrafficController());  jmri.InstanceManager.store(powerManager,jmri.PowerManager.class);  InstanceManager.setProgrammerManager(getProgrammerManager());  turnoutManager=new jmri.jmrix.tams.TamsTurnoutManager(this);  jmri.InstanceManager.setTurnoutManager(turnoutManager);  throttleManager=new jmri.jmrix.tams.TamsThrottleManager(this);  jmri.InstanceManager.setThrottleManager(throttleManager);  sensorManager=new jmri.jmrix.tams.TamsSensorManager(this);  jmri.InstanceManager.setSensorManager(sensorManager);}  }
class C{  private HashMap<String,Object> createAccDetailmap(String glcode,BigDecimal debitAmount,BigDecimal creditAmount){  HashMap<String,Object> accountdetailmap=new HashMap<String,Object>();  accountdetailmap.put(VoucherConstant.GLCODE,glcode);  accountdetailmap.put(VoucherConstant.DEBITAMOUNT,debitAmount);  accountdetailmap.put(VoucherConstant.CREDITAMOUNT,creditAmount);  accountdetailmap.put(VoucherConstant.FUNCTIONCODE,getFunctionaryCode());  return accountdetailmap;}  }
class C{  private boolean stringToBoolean(String condition){  boolean result=false;  if (condition != null && condition.length() > 0) {    String s=condition.substring(0,1);    if (s.equalsIgnoreCase("Y") || s.equals("1") || s.equalsIgnoreCase("T"))     result=true;  }  return result;}  }
class C{  public Result run(Database db,Relation<O> relation){  DistanceQuery<O> dq=db.getDistanceQuery(relation,getDistanceFunction());  ArrayDBIDs ids=DBIDUtil.ensureArray(relation.getDBIDs());  final int size=ids.size();  LOG.verbose("Notice: SLINK is a much faster algorithm for single-linkage clustering!");  double[][] matrix=new double[size][size];  DBIDArrayIter ix=ids.iter(), iy=ids.iter();  for (int x=0; ix.valid(); x++, ix.advance()) {    iy.seek(0);    for (int y=0; y < x; y++, iy.advance()) {      final double dist=dq.distance(ix,iy);      matrix[x][y]=dist;      matrix[y][x]=dist;    }  }  double[] height=new double[size];  Arrays.fill(height,Double.POSITIVE_INFINITY);  ArrayModifiableDBIDs parent=DBIDUtil.newArray(ids);  TIntObjectMap<ModifiableDBIDs> clusters=new TIntObjectHashMap<>();  final int stop=size - numclusters;  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Agglomerative clustering",stop,LOG) : null;  for (int i=0; i < stop; i++) {    double min=Double.POSITIVE_INFINITY;    int minx=-1, miny=-1;    for (int x=0; x < size; x++) {      if (height[x] < Double.POSITIVE_INFINITY) {        continue;      }      for (int y=0; y < x; y++) {        if (height[y] < Double.POSITIVE_INFINITY) {          continue;        }        if (matrix[x][y] < min) {          min=matrix[x][y];          minx=x;          miny=y;        }      }    }    assert (minx >= 0 && miny >= 0);    ix.seek(minx);    iy.seek(miny);    height[minx]=min;    parent.set(minx,iy);    ModifiableDBIDs cx=clusters.get(minx);    ModifiableDBIDs cy=clusters.get(miny);    if (cy == null) {      cy=DBIDUtil.newHashSet();      cy.add(iy);    }    if (cx == null) {      cy.add(ix);    } else {      cy.addDBIDs(cx);      clusters.remove(minx);    }    clusters.put(miny,cy);    for (int j=0; j < size; j++) {      matrix[j][miny]=Math.min(matrix[j][minx],matrix[j][miny]);      matrix[miny][j]=Math.min(matrix[minx][j],matrix[miny][j]);    }    LOG.incrementProcessed(prog);  }  LOG.ensureCompleted(prog);  final Clustering<Model> dendrogram=new Clustering<>("Hierarchical-Clustering","hierarchical-clustering");  for (int x=0; x < size; x++) {    if (height[x] < Double.POSITIVE_INFINITY) {      DBIDs cids=clusters.get(x);      if (cids == null) {        ix.seek(x);        cids=DBIDUtil.deref(ix);      }      Cluster<Model> cluster=new Cluster<>("Cluster",cids);      dendrogram.addToplevelCluster(cluster);    }  }  return dendrogram;}  }
class C{  public void dataMoverAvgPortMetrics(URI storageSystemURI){  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storageSystemURI);  StringSet storagePorts=null;  Double portPercentBusy=0.0;  Double avgPortPercentBusy=0.0;  Double percentBusy=0.0;  Double avgPercentBusy=0.0;  int noOfInterface=0;  if (storageSystem != null) {    URIQueryResultList vNASURIs=new URIQueryResultList();    _dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceVirtualNasConstraint(storageSystemURI),vNASURIs);    List<VirtualNAS> virtualNAS=_dbClient.queryObject(VirtualNAS.class,vNASURIs);    for (    VirtualNAS vNAS : virtualNAS) {      if (vNAS != null && !vNAS.getInactive()) {        storagePorts=vNAS.getStoragePorts();        if (storagePorts != null && !storagePorts.isEmpty()) {          for (          String sp : storagePorts) {            StoragePort storagePort=_dbClient.queryObject(StoragePort.class,URI.create(sp));            portPercentBusy=portPercentBusy + MetricsKeys.getDouble(MetricsKeys.avgPortPercentBusy,storagePort.getMetrics());            percentBusy=percentBusy + MetricsKeys.getDouble(MetricsKeys.avgPercentBusy,storagePort.getMetrics());          }          noOfInterface=storagePorts.size();          if (noOfInterface != 0) {            avgPortPercentBusy=portPercentBusy / noOfInterface;            avgPercentBusy=percentBusy / noOfInterface;          }          StringMap dbMetrics=vNAS.getMetrics();          MetricsKeys.putDouble(MetricsKeys.avgPortPercentBusy,avgPortPercentBusy,dbMetrics);          MetricsKeys.putDouble(MetricsKeys.avgPercentBusy,avgPercentBusy,dbMetrics);          _dbClient.persistObject(vNAS);        }      }    }  }}  }
class C{  public int[][] generateRandomInts(int rows,int columns,int cap){  int[][] data=new int[rows][columns];  for (int r=0; r < rows; r++) {    for (int c=0; c < columns; c++) {      data[r][c]=random.nextInt(cap);    }  }  return data;}  }
class C{  private static void deletePortfolioEntry(FinanceService service,String entryUrl) throws IOException, MalformedURLException, ServiceException {  System.out.println("Deleting Entry at location: " + entryUrl);  service.delete(new URL(entryUrl));  System.out.println("Delete Successful");}  }
class C{  @SuppressWarnings("unused") private static void sendViaBatch(AmazonKinesis producer,String streamName,RecordAggregator aggregator){  System.out.println("Creating " + ProducerConfig.RECORDS_TO_TRANSMIT + " records...");  for (int i=1; i <= ProducerConfig.RECORDS_TO_TRANSMIT; i++) {    String pk=ProducerUtils.randomPartitionKey();    String ehk=ProducerUtils.randomExplicitHashKey();    byte[] data=ProducerUtils.randomData(i,ProducerConfig.RECORD_SIZE_BYTES);    AggRecord aggRecord=aggregator.addUserRecord(pk,ehk,data);    if (aggRecord != null) {      ForkJoinPool.commonPool().execute(null);    }  }  flushAndFinish(producer,streamName,aggregator);}  }
class C{  public void testAlgorithmParameterGenerator06() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!DSASupported) {    fail(validAlgName + " algorithm is not supported");    return;  }  AlgorithmParameterGenerator apg;  for (int i=0; i < algs.length; i++) {    apg=AlgorithmParameterGenerator.getInstance(algs[i],validProviderName);    assertEquals("Incorrect algorithm",algs[i],apg.getAlgorithm());    assertEquals("Incorrect provider",apg.getProvider().getName(),validProviderName);  }}  }
class C{  @SuppressLint("DefaultLocale") public void elementType(String name,int model,int memberOf,int flags){  ElementType e=new ElementType(name,model,memberOf,flags,this);  theElementTypes.put(name.toLowerCase(),e);  if (memberOf == M_ROOT)   theRoot=e;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  String readSubstring(String source,int ofs,int end){  if (source == null || ofs > source.length() || end > source.length()) {    return null;  }  return source.substring(ofs,end);}  }
class C{  public void load() throws IOException {  parseHeaderItem();  loadStrings();  loadTypeIds();  loadProtoIds();  loadFieldIds();  loadMethodIds();  loadClassDefs();  markInternalClasses();}  }
class C{  private static boolean hasConnectivityToSystem(StorageSystem storageSystem,List<URI> varrays,Initiator initiator,DbClient dbClient){  try {    return ConnectivityUtil.isInitiatorConnectedToStorageSystem(initiator,storageSystem,varrays,dbClient);  } catch (  PlacementException ex) {    _log.info(String.format("Initiator %s (%s) has no connectivity to StorageSystem %s (%s) in varray %s",initiator.getInitiatorPort(),initiator.getId(),storageSystem.getNativeGuid(),storageSystem.getId(),varrays));    return false;  }catch (  Exception ex) {    throw APIException.badRequests.errorVerifyingInitiatorConnectivity(initiator.toString(),storageSystem.getNativeGuid(),ex.getMessage());  }}  }
class C{  protected Transferable createTransferable(JComponent comp){  exportComp=(JTextComponent)comp;  shouldRemove=true;  p0=exportComp.getSelectionStart();  p1=exportComp.getSelectionEnd();  return (p0 != p1) ? (new TextTransferable(exportComp,p0,p1)) : null;}  }
class C{  public static GraphRequest newPostOpenGraphObjectRequest(AccessToken accessToken,JSONObject openGraphObject,Callback callback){  if (openGraphObject == null) {    throw new FacebookException("openGraphObject cannot be null");  }  if (Utility.isNullOrEmpty(openGraphObject.optString("type"))) {    throw new FacebookException("openGraphObject must have non-null 'type' property");  }  if (Utility.isNullOrEmpty(openGraphObject.optString("title"))) {    throw new FacebookException("openGraphObject must have non-null 'title' property");  }  String path=String.format(MY_OBJECTS_FORMAT,openGraphObject.optString("type"));  Bundle bundle=new Bundle();  bundle.putString(OBJECT_PARAM,openGraphObject.toString());  return new GraphRequest(accessToken,path,bundle,HttpMethod.POST,callback);}  }
class C{  public static void writeShort(byte[] memory,int index,short value){  memory[index + 0]=(byte)((value >> (8 * 1)) & 0xFF);  memory[index + 1]=(byte)(value & 0xFF);}  }
class C{  public static int numberOfTrailingZerosSigned(long[] v){  for (int p=0; ; p++) {    if (p == v.length) {      return -1;    }    if (v[p] != 0) {      return Long.numberOfTrailingZeros(v[p]) + p * Long.SIZE;    }  }}  }
class C{  public boolean updateBorder(){  String title=null;  String oldTitle=null;  if (myBorderTitle != null) {    oldTitle=myBorderTitle.getResolvedValue();    myBorderTitle.setResolvedValue(null);    if (myBorderTitle.getValue() != null) {      title=myBorderTitle.getValue();    } else {      title=StringDescriptorManager.getInstance(getModule()).resolve(this,myBorderTitle);    }  }  Font font=(myBorderTitleFont != null) ? myBorderTitleFont.getResolvedFont(getDelegee().getFont()) : null;  Color titleColor=(myBorderTitleColor != null) ? myBorderTitleColor.getResolvedColor() : null;  Color borderColor=(myBorderColor != null) ? myBorderColor.getResolvedColor() : null;  getDelegee().setBorder(myBorderType.createBorder(title,myBorderTitleJustification,myBorderTitlePosition,font,titleColor,myBorderSize,borderColor));  return myBorderTitle != null && !Comparing.equal(oldTitle,myBorderTitle.getResolvedValue());}  }
class C{  public static AccessibilityNodeInfoCompat searchFromBfs(AccessibilityNodeInfoCompat node,NodeFilter filter){  if (node == null) {    return null;  }  final LinkedList<AccessibilityNodeInfoCompat> queue=new LinkedList<>();  Set<AccessibilityNodeInfoCompat> visitedNodes=new HashSet<>();  queue.add(AccessibilityNodeInfoCompat.obtain(node));  try {    while (!queue.isEmpty()) {      final AccessibilityNodeInfoCompat item=queue.removeFirst();      visitedNodes.add(item);      if (filter.accept(item)) {        return item;      }      final int childCount=item.getChildCount();      for (int i=0; i < childCount; i++) {        final AccessibilityNodeInfoCompat child=item.getChild(i);        if (child != null && !visitedNodes.contains(child)) {          queue.addLast(child);        }      }      item.recycle();    }  }  finally {    while (!queue.isEmpty()) {      queue.removeFirst().recycle();    }  }  return null;}  }
class C{  private void sendPrivateMessage(RPEntity user,String message){  if (user instanceof Player) {    Player player=(Player)user;    player.sendPrivateText(message);  }}  }
class C{  public static <T>T withReader(File file,String charset,@ClosureParams(value=SimpleType.class,options="java.io.BufferedReader") Closure<T> closure) throws IOException {  return IOGroovyMethods.withReader(newReader(file,charset),closure);}  }
class C{  public static void main(String... args) throws Exception {  new Migrate().execute(new File(args.length == 1 ? args[0] : "."),true,USER,PASSWORD,false);}  }
class C{  public static Document createXMLTypeDoc(Document doc,Locale locale){  List nodeList=doc.selectNodes(XPATH_TYPEDOCS_TYPEDOC);  if ((nodeList != null) && (!nodeList.isEmpty())) {    for (Iterator iterator=nodeList.iterator(); iterator.hasNext(); ) {      Element node=(Element)iterator.next();      String codigoText=((Element)node.selectObject(XML_TYPEDOC_CODIGO)).getText();      if (codigoText != null) {        String descripcionText=null;        try {          descripcionText=RBExternUtil.getInstance(locale).getProperty(ROOT_PROPERTY + codigoText);          if ((descripcionText != null) && (!descripcionText.equals(""))) {            Element descriptionElement=(Element)node.selectObject(XML_TYPEDOC_DESCRIPCION);            node.remove(descriptionElement);            node.addElement(XML_TYPEDOC_DESCRIPCION).add(DocumentHelper.createCDATA(descripcionText));          }        } catch (        Exception e) {          _logger.error("Imposible obtener la descripcion del tipo de documento con codigo: " + codigoText,e);        }      }    }  }  return doc;}  }
class C{  public StoppableReentrantLock(boolean fair,CancelCriterion stopper){  Assert.assertTrue(stopper != null);  this.stopper=stopper;  this.lock=new ReentrantLock();}  }
class C{  public DefaultTableModel(String[] columnNames,Object[][] data,boolean editable){  for (  Object[] o : data) {    this.data.add(o);  }  this.columnNames=columnNames;  this.editable=editable;}  }
class C{  public String sendMail(String toEmail,String replyTo,String subj,String message){  try {    mailThread.doSend(toEmail,replyTo,subj,message);    return "success";  } catch (  Exception ex) {    log.error("[sendMail] ",ex);    return "Error: " + ex;  }}  }
class C{  public static String cidrMaskToNetMask(String cidrMask){  if (cidrMask == null) {    return null;  }  int cidrMaskValue=0;  try {    cidrMaskValue=Integer.parseInt(cidrMask);  } catch (  NumberFormatException e) {    return null;  }  int cidrMaskFull=0xffffffff << (32 - cidrMaskValue);  int cidrMaskBits1=cidrMaskFull >> 24 & 0xff;  int cidrMaskBits2=cidrMaskFull >> 16 & 0xff;  int cidrMaskBits3=cidrMaskFull >> 8 & 0xff;  int cidrMaskBits4=cidrMaskFull >> 0 & 0xff;  StringBuffer netMaskBuf=new StringBuffer();  netMaskBuf.append(cidrMaskBits1);  netMaskBuf.append('.');  netMaskBuf.append(cidrMaskBits2);  netMaskBuf.append('.');  netMaskBuf.append(cidrMaskBits3);  netMaskBuf.append('.');  netMaskBuf.append(cidrMaskBits4);  return netMaskBuf.toString();}  }
class C{  @PUT @Path("/{stateMachineId}/{stateId}/unsideline") @Produces(MediaType.APPLICATION_JSON) @Transactional public Response unsidelineState(@PathParam("stateMachineId") Long stateMachineId,@PathParam("stateId") Long stateId){  this.workFlowExecutionController.unsidelineState(stateMachineId,stateId);  return Response.status(Response.Status.ACCEPTED.getStatusCode()).build();}  }
class C{  private static void emit(String s){  try {    out.write(s,0,s.length());  } catch (  IOException e) {    throw new Error(e);  }}  }
class C{  public static void takePersistableContentUriPermission(Context context,Uri file){  if (!(ContentResolver.SCHEME_CONTENT.equals(file.getScheme()))) {    return;  }  if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    ContentResolver contentResolver=context.getContentResolver();    contentResolver.takePersistableUriPermission(file,Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);  }}  }
class C{  @Mod.EventHandler public void init(FMLInitializationEvent e){  proxy.init(e);  compatHandler.init();  configWrapper.refresh();}  }
class C{  public HelyxFileFilter(String description,String... extensions){  this.description=description;  this.extensions=extensions;}  }
class C{  public void freeze(){  this.cframe=cframe.copyType();}  }
class C{  @Before public void before(){  try {    dbLogic.rollback();  } catch (  final PersistenceException e) {  }  dbLogic.clearData();  dbLogic.getIdGenerator().reset();}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("UasAuthTokenGroups[");  buffer.append("m_al = ").append(m_al);  buffer.append("]");  return buffer.toString();}  }
class C{  public static String gensalt(){  return gensalt(GENSALT_DEFAULT_LOG2_ROUNDS);}  }
class C{  public void recordModifications(){  getAST().recordModifications(this);}  }
class C{  protected void paintText(Graphics g,AbstractButton b,Rectangle textRect,String text){  WindowsGraphicsUtils.paintText(g,b,textRect,text,getTextShiftOffset());}  }
class C{  @Override public boolean hasActiveShield(int location,boolean rear){switch (location) {case Mech.LOC_CT:case Mech.LOC_HEAD:    if (rear) {      return false;    }  if (hasActiveShield(Mech.LOC_LARM) || hasActiveShield(Mech.LOC_RARM)) {    return true;  }return false;case Mech.LOC_LARM:case Mech.LOC_LT:case Mech.LOC_LLEG:return hasActiveShield(Mech.LOC_LARM);default :return hasActiveShield(Mech.LOC_RARM);}}  }
class C{  @Override public boolean batchFinished(){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (!isFirstBatchDone()) {    createSubsample();  }  flushInput();  m_NewBatch=true;  m_FirstBatchDone=true;  return (numPendingOutput() != 0);}  }
class C{  public boolean hasSource(){  return getSource() != null;}  }
class C{  public void addMessageParams(java.lang.String param){  if (localMessageParams == null) {    localMessageParams=new java.lang.String[]{};  }  localMessageParamsTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localMessageParams);  list.add(param);  this.localMessageParams=(java.lang.String[])list.toArray(new java.lang.String[list.size()]);}  }
class C{  public static Vector padLeft(Collection strings){  Vector v=new Vector();  int length=maxLength(strings);  for (Iterator i=strings.iterator(); i.hasNext(); ) {    String string=(String)i.next();    v.add(padLeft(string,length));  }  return v;}  }
class C{  public boolean isBold(){  return bold;}  }
class C{  public void stop(){  if (tcpRouter != null) {    try {      tcpRouter.stop();    } catch (    Exception e) {      U.error(log,"Error while stopping the router.",e);    }  }}  }
class C{  public void push(BasicBlock b){  if (b.inq != true) {    b.inq=true;    q.add(b);  }}  }
class C{  public static void xml(String xml){  printer.xml(xml);}  }
class C{  protected DenseDoubleMatrix2D(int rows,int columns,double[] elements,int rowZero,int columnZero,int rowStride,int columnStride){  setUp(rows,columns,rowZero,columnZero,rowStride,columnStride);  this.elements=elements;  this.isNoView=false;}  }
class C{  @RequestMapping(value="/jobDefinitions",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_JOB_DEFINITIONS_POST) public JobDefinition createJobDefinition(@RequestBody JobDefinitionCreateRequest request) throws Exception {  return jobDefinitionService.createJobDefinition(request,true);}  }
class C{  public static void verify(final ClassReader cr,final ClassLoader loader,final boolean dump,final PrintWriter pw){  ClassNode cn=new ClassNode();  cr.accept(new CheckClassAdapter(cn,false),ClassReader.SKIP_DEBUG);  Type syperType=cn.superName == null ? null : Type.getObjectType(cn.superName);  List<MethodNode> methods=cn.methods;  List<Type> interfaces=new ArrayList<Type>();  for (Iterator<String> i=cn.interfaces.iterator(); i.hasNext(); ) {    interfaces.add(Type.getObjectType(i.next()));  }  for (int i=0; i < methods.size(); ++i) {    MethodNode method=methods.get(i);    SimpleVerifier verifier=new SimpleVerifier(Type.getObjectType(cn.name),syperType,interfaces,(cn.access & Opcodes.ACC_INTERFACE) != 0);    Analyzer<BasicValue> a=new Analyzer<BasicValue>(verifier);    if (loader != null) {      verifier.setClassLoader(loader);    }    try {      a.analyze(cn.name,method);      if (!dump) {        continue;      }    } catch (    Exception e) {      e.printStackTrace(pw);    }    printAnalyzerResult(method,a,pw);  }  pw.flush();}  }
class C{  public void displayState(){  one.display();  two.display();  discardPile.display();  System.out.print("Draw pile: ");  System.out.println(drawPile.size() + " cards");}  }
class C{  public void reject(){  RejectPacket rejectPacket=new RejectPacket(this.session.getWorkgroupJID());  connection.sendPacket(rejectPacket);  rejected=true;}  }
class C{  JavaFXGeneral(){  initComponents();}  }
class C{  @Override protected void onRead(@NotNull DocumentContext in,@NotNull WireOut outWire){  if (in.isMetaData())   outWire.writeDocument(true,null); else   outWire.writeDocument(false,null);}  }
class C{  public void testGetColumnsMetaData() throws Exception {  DatabaseMetaData dmd=con.getMetaData();  ResultSet rs=dmd.getColumns(null,null,"Table doesn't exist",null);  assertNotNull(rs);  ResultSetMetaData rsmd=rs.getMetaData();  assertNotNull(rsmd.getCatalogName(1));  assertNotNull(rsmd.getColumnClassName(1));  rsmd.getColumnCount();  assertTrue(0 != rsmd.getColumnDisplaySize(1));  assertNotNull(rsmd.getColumnLabel(1));  assertNotNull(rsmd.getColumnName(1));  rsmd.getColumnType(1);  assertNotNull(rsmd.getColumnTypeName(1));  rsmd.getPrecision(1);  rsmd.getScale(1);  assertNotNull(rsmd.getSchemaName(1));  assertNotNull(rsmd.getTableName(1));  rsmd.isAutoIncrement(1);  rsmd.isCaseSensitive(1);  rsmd.isCurrency(1);  rsmd.isDefinitelyWritable(1);  rsmd.isNullable(1);  rsmd.isReadOnly(1);  rsmd.isSearchable(1);  rsmd.isSigned(1);  rsmd.isWritable(1);  rs.close();}  }
class C{  public static void onError(final Context context,final String error){  log.onError(context,error);}  }
class C{  void retain(JSObject obj){  objectMap.put(new Integer(obj.objectId),Display.getInstance().createSoftWeakRef(obj));  if (objectMap.size() > objectMapThresholdSize || cleanupRandomizer.nextDouble() < cleanupProbability) {    cleanup();  }}  }
class C{  public DNetscapeRevocationUrl(JDialog parent,byte[] value) throws IOException {  super(parent);  setTitle(res.getString("DNetscapeRevocationUrl.Title"));  initComponents();  prepopulateWithValue(value);}  }
class C{  public boolean isPreDestroyCalled(){  return this.preDestroyCalled;}  }
class C{  static void checkCyclicBalancing(RoundRobinLoadBalancingSpi spi,List<ClusterNode> allNodes,List<UUID> orderedNodes,ComputeTaskSession ses){  ClusterNode firstNode=spi.getBalancedNode(ses,allNodes,new GridTestJob());  int startIdx=firstBalancedNodeIndex(firstNode,orderedNodes);  for (int i=0; i < allNodes.size() * 2; i++) {    int actualIdx=(startIdx + i + 1) % allNodes.size();    ClusterNode nextNode=spi.getBalancedNode(ses,allNodes,new GridTestJob());    assertEquals("Balancer returns node out of order",nextNode.id(),orderedNodes.get(actualIdx));  }}  }
class C{  public static int minIndex(int[] ints){  int minimum=0;  int minIndex=0;  for (int i=0; i < ints.length; i++) {    if ((i == 0) || (ints[i] < minimum)) {      minIndex=i;      minimum=ints[i];    }  }  return minIndex;}  }
class C{  protected void readExtras(@NonNull Bundle bundle){}  }
class C{  public static Class<?> resolveClass(String className,boolean optional){  try {    ClassLoader cl=ClassLoader.getSystemClassLoader();    return Class.forName(className,false,cl);  } catch (  ClassNotFoundException e) {    if (optional) {      return null;    }    throw new GraalError("Could not resolve type " + className);  }}  }
class C{  public static void processCommandLineOptions(OptOptions options,int optLevel,int maxOptLevel,String[] optCompilerOptions){  String prefix="opt" + optLevel + ":";  for (  String optCompilerOption : optCompilerOptions) {    if (optCompilerOption.startsWith("opt:")) {      String option=optCompilerOption.substring(4);      if (!options.processAsOption("-X:recomp:",option)) {        VM.sysWrite("vm: Unrecognized optimizing compiler command line argument: \"" + option + "\" passed in as "+ optCompilerOption+ "\n");      }    } else     if (optCompilerOption.startsWith(prefix)) {      String option=optCompilerOption.substring(5);      if (!options.processAsOption("-X:recomp:" + prefix,option)) {        VM.sysWrite("vm: Unrecognized optimizing compiler command line argument: \"" + option + "\" passed in as "+ optCompilerOption+ "\n");      }    }  }  for (  String optCompilerOption1 : optCompilerOptions) {    if (!optCompilerOption1.startsWith("opt")) {      continue;    }    if (!optCompilerOption1.startsWith("opt:")) {      int endPoint=optCompilerOption1.indexOf(':');      if (endPoint == -1) {        VM.sysWrite("vm: Unrecognized optimization level in optimizing compiler command line argument: \"" + optCompilerOption1 + "\"\n");      }      String optLevelS;      try {        optLevelS=optCompilerOption1.substring(3,endPoint);      } catch (      IndexOutOfBoundsException e) {        VM.sysWrite("vm internal error: trying to find opt level has thrown indexOutOfBoundsException\n");        e.printStackTrace();        continue;      }      try {        Integer optLevelI=Integer.valueOf(optLevelS);        int cmdOptLevel=optLevelI;        if (cmdOptLevel > maxOptLevel) {          VM.sysWrite("vm: Invalid optimization level in optimizing compiler command line argument: \"" + optCompilerOption1 + "\"\n"+ "  Specified optimization level "+ cmdOptLevel+ " must be less than "+ maxOptLevel+ "\n");        }      } catch (      NumberFormatException e) {        VM.sysWrite("vm: Unrecognized optimization level in optimizing compiler command line argument: \"" + optCompilerOption1 + "\"\n");      }    }  }}  }
class C{  public jMatrix transpose(){  jMatrix X=new jMatrix(n,m);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[j][i]=A[i][j];    }  }  return X;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DomPackage.CONTENT_NODE__OWNER:    return basicSetOwner(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public String classify(List<Feature> features) throws CleartkProcessingException {  Map<String,Double> scores=this.score(features);  Ordering<String> byScore=Ordering.natural().onResultOf(Functions.forMap(scores));  return byScore.max(scores.keySet());}  }
class C{  private void stopRing(){  if (defaultRingtone != null && defaultRingtone.isPlaying()) {    defaultRingtone.stop();  }  audio.setStreamVolume(AudioManager.STREAM_RING,DEFAULT_VOLUME,DEFAULT_FLAG);  audio.setRingerMode(AudioManager.RINGER_MODE_SILENT);}  }
class C{  public void testNextInt(){  Random r=new Random();  int f=r.nextInt();  int i=0;  while (i < NCALLS && r.nextInt() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  private V doGet(Object okey){  Comparable<? super K> key=comparable(okey);  for (; ; ) {    Node<K,V> n=findNode(key);    if (n == null)     return null;    Object v=n.value;    if (v != null)     return (V)v;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:22.703 -0500",hash_original_method="F11E8CFFE1E2D808987B2E38C68D609A",hash_generated_method="3D283D46B7B460AB16F48E80CAA027C2") protected void onAddEditTextToDialogView(View dialogView,EditText editText){  ViewGroup container=(ViewGroup)dialogView.findViewById(com.android.internal.R.id.edittext_container);  if (container != null) {    container.addView(editText,ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);  }}  }
class C{  public static void validateActiveFullCopyCount(BlockObject fcSourceObj,int numRequested,DbClient dbClient){  validateActiveFullCopyCount(fcSourceObj,numRequested,0,dbClient);}  }
class C{  public JSONException(String message){  super(message);}  }
class C{  public boolean equals(Object obj){  return this == obj;}  }
class C{  public boolean remove(final HGHandle handle){  return remove(handle,config.isKeepIncidentLinksOnRemoval());}  }
class C{  private static <E>int calculateSize(List<E> sortedInputList,Comparator<? super E> comparator){  long permutations=1;  int n=1;  int r=1;  while (n < sortedInputList.size()) {    int comparison=comparator.compare(sortedInputList.get(n - 1),sortedInputList.get(n));    if (comparison < 0) {      permutations*=binomial(n,r);      r=0;      if (!isPositiveInt(permutations)) {        return Integer.MAX_VALUE;      }    }    n++;    r++;  }  permutations*=binomial(n,r);  if (!isPositiveInt(permutations)) {    return Integer.MAX_VALUE;  }  return (int)permutations;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  private HashIndexSet(int initialCapacity,float loadFactor){  setUp(initialCapacity,loadFactor);}  }
class C{  private void addDefaultUri() throws IgniteSpiException {  assert uriEncodedList != null;  URI uri;  try {    uri=U.resolveWorkDirectory(DFLT_DEPLOY_DIR,false).toURI();  } catch (  IgniteCheckedException e) {    throw new IgniteSpiException("Failed to initialize default file scanner",e);  }  uriEncodedList.add(uri);}  }
class C{  private static void notifyDrawable(Drawable drawable,final boolean isDisplayed){  if (drawable instanceof RecyclingBitmapDrawable) {    ((RecyclingBitmapDrawable)drawable).setIsDisplayed(isDisplayed);  } else   if (drawable instanceof LayerDrawable) {    LayerDrawable layerDrawable=(LayerDrawable)drawable;    for (int i=0, z=layerDrawable.getNumberOfLayers(); i < z; i++) {      notifyDrawable(layerDrawable.getDrawable(i),isDisplayed);    }  }}  }
class C{  public T caseEscapedCharacterClassAtom(EscapedCharacterClassAtom object){  return null;}  }
class C{  public boolean hasFailed(){  return exception_ != null;}  }
class C{  public static void w(String tag,String msg,Throwable tr){  println(WARN,tag,msg,tr);}  }
class C{  public final void addToCluster(int index,String var){  if (isClustersBounded() && index >= getNumClusters()) {    throw new IllegalArgumentException();  }  clusters.put(var,index);}  }
class C{  private void requestForDownload(OCFile file){  Intent i=new Intent(mContext,FileDownloader.class);  i.putExtra(FileDownloader.EXTRA_ACCOUNT,mAccount);  i.putExtra(FileDownloader.EXTRA_FILE,file);  mContext.startService(i);  mTransferWasRequested=true;}  }
class C{  @Inline @Override public final Word wordAtomicWrite(ObjectReference ref,Word target,Word offset,Word unused,int mode){  Word oldValue;  do {    oldValue=Magic.prepareWord(ref.toObject(),offset.toOffset());  } while (!Magic.attemptWord(ref.toObject(),offset.toOffset(),oldValue,target));  return oldValue;}  }
class C{  public boolean startsWith(XMLString prefix,int toffset){  FastStringBuffer fsb=fsb();  int to=m_start + toffset;  int tlim=m_start + m_length;  int po=0;  int pc=prefix.length();  if ((toffset < 0) || (toffset > m_length - pc)) {    return false;  }  while (--pc >= 0) {    if (fsb.charAt(to) != prefix.charAt(po)) {      return false;    }    to++;    po++;  }  return true;}  }
class C{  protected boolean isDocumentAcquired(){  return fAcquireCount > 0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:21.290 -0500",hash_original_method="FF1AB110B94FCC8AEFA697D75FFC57DD",hash_generated_method="B371B1A5EBF86980C6290FA035BAE684") public void connected(){}  }
class C{  public boolean inRange(final double value,final boolean includeBoundary){  if (lower <= upper) {    if (includeBoundary)     return (value >= lower && value <= upper); else     return (value > lower && value < upper);  } else {    if (includeBoundary)     return (value >= upper && value <= lower); else     return (value > upper && value < lower);  }}  }
class C{  public void testInfo() throws Exception {  create(igfs,paths(DIR),null);  IgfsFile info=igfs.info(DIR);  assert info != null;  assertEquals(DIR,info.path());}  }
class C{  public static void main(String[] args) throws IgniteException {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Compute broadcast example started.");    hello(ignite);    gatherSystemInfo(ignite);  } }  }
class C{  @Deprecated @Override public final void add(int index,E element){  throw new UnsupportedOperationException();}  }
class C{  public BatchUpdateException(String reason,String SQLState,int[] updateCounts,Throwable cause){  super(reason,SQLState,cause);  this.updateCounts=updateCounts;}  }
class C{  public String toString(){  return "[" + left + ","+ right+ ")";}  }
class C{  protected void drawImage(BufferedImage backingImage,BufferedImage image,int x,int y,boolean drawBorder){  int w=image.getWidth();  int h=image.getHeight();  Graphics2D g=backingImage.createGraphics();  try {    g.setComposite(AlphaComposite.Src);    g.drawImage(image,x,y,null);    if (drawBorder) {      g.drawImage(image,x - 1,y - 1,x,y,0,0,1,1,null);      g.drawImage(image,x,y - 1,x + w,y,0,0,w,1,null);      g.drawImage(image,x + w,y - 1,x + w + 1,y,w - 1,0,w,1,null);      g.drawImage(image,x + w,y,x + w + 1,y + h,w - 1,0,w,h,null);      g.drawImage(image,x + w,y + h,x + w + 1,y + h + 1,w - 1,h - 1,w,h,null);      g.drawImage(image,x,y + h,x + w,y + h + 1,0,h - 1,w,h,null);      g.drawImage(image,x - 1,y + h,x,y + h + 1,0,h - 1,1,h,null);      g.drawImage(image,x - 1,y,x,y + h,0,0,1,h,null);    }  }  finally {    g.dispose();  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","xagdyz");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  static int processQuery(final Cursor alertCursor,final Context context,final long currentTime,ArrayList<NotificationInfo> highPriorityEvents,ArrayList<NotificationInfo> mediumPriorityEvents,ArrayList<NotificationInfo> lowPriorityEvents){  String skipRemindersPref=Utils.getSharedPreference(context,OtherPreferences.KEY_OTHER_REMINDERS_RESPONDED,"");  boolean remindRespondedOnly=skipRemindersPref.equals(context.getResources().getStringArray(R.array.preferences_skip_reminders_values)[1]);  boolean useQuietHours=Utils.getSharedPreference(context,OtherPreferences.KEY_OTHER_QUIET_HOURS,false);  int quietHoursStartHour=OtherPreferences.QUIET_HOURS_DEFAULT_START_HOUR;  int quietHoursStartMinute=OtherPreferences.QUIET_HOURS_DEFAULT_START_MINUTE;  int quietHoursEndHour=OtherPreferences.QUIET_HOURS_DEFAULT_END_HOUR;  int quietHoursEndMinute=OtherPreferences.QUIET_HOURS_DEFAULT_END_MINUTE;  if (useQuietHours) {    quietHoursStartHour=Utils.getSharedPreference(context,OtherPreferences.KEY_OTHER_QUIET_HOURS_START_HOUR,OtherPreferences.QUIET_HOURS_DEFAULT_START_HOUR);    quietHoursStartMinute=Utils.getSharedPreference(context,OtherPreferences.KEY_OTHER_QUIET_HOURS_START_MINUTE,OtherPreferences.QUIET_HOURS_DEFAULT_START_MINUTE);    quietHoursEndHour=Utils.getSharedPreference(context,OtherPreferences.KEY_OTHER_QUIET_HOURS_END_HOUR,OtherPreferences.QUIET_HOURS_DEFAULT_END_HOUR);    quietHoursEndMinute=Utils.getSharedPreference(context,OtherPreferences.KEY_OTHER_QUIET_HOURS_END_MINUTE,OtherPreferences.QUIET_HOURS_DEFAULT_END_MINUTE);  }  Time time=new Time();  ContentResolver cr=context.getContentResolver();  HashMap<Long,NotificationInfo> eventIds=new HashMap<Long,NotificationInfo>();  int numFired=0;  try {    while (alertCursor.moveToNext()) {      final long alertId=alertCursor.getLong(ALERT_INDEX_ID);      final long eventId=alertCursor.getLong(ALERT_INDEX_EVENT_ID);      final int minutes=alertCursor.getInt(ALERT_INDEX_MINUTES);      final String eventName=alertCursor.getString(ALERT_INDEX_TITLE);      final String description=alertCursor.getString(ALERT_INDEX_DESCRIPTION);      final String location=alertCursor.getString(ALERT_INDEX_EVENT_LOCATION);      final int status=alertCursor.getInt(ALERT_INDEX_SELF_ATTENDEE_STATUS);      final boolean declined=status == Attendees.ATTENDEE_STATUS_DECLINED;      final boolean responded=status != Attendees.ATTENDEE_STATUS_NONE && status != Attendees.ATTENDEE_STATUS_INVITED;      final long beginTime=alertCursor.getLong(ALERT_INDEX_BEGIN);      final long endTime=alertCursor.getLong(ALERT_INDEX_END);      final Uri alertUri=ContentUris.withAppendedId(CalendarAlerts.CONTENT_URI,alertId);      final long alarmTime=alertCursor.getLong(ALERT_INDEX_ALARM_TIME);      boolean forceQuiet=false;      if (useQuietHours) {        time.set(alarmTime);        boolean alarmAfterQuietHoursStart=(time.hour > quietHoursStartHour || (time.hour == quietHoursStartHour && time.minute >= quietHoursStartMinute));        boolean alarmBeforeQuietHoursEnd=(time.hour < quietHoursEndHour || (time.hour == quietHoursEndHour && time.minute <= quietHoursEndMinute));        boolean quietHoursCrossesMidnight=quietHoursStartHour > quietHoursEndHour || (quietHoursStartHour == quietHoursEndHour && quietHoursStartMinute > quietHoursEndMinute);        if (quietHoursCrossesMidnight) {          if (alarmAfterQuietHoursStart || alarmBeforeQuietHoursEnd) {            forceQuiet=true;          }        } else {          if (alarmAfterQuietHoursStart && alarmBeforeQuietHoursEnd) {            forceQuiet=true;          }        }      }      int state=alertCursor.getInt(ALERT_INDEX_STATE);      final boolean allDay=alertCursor.getInt(ALERT_INDEX_ALL_DAY) != 0;      boolean newAlertOverride=false;      if (AlertUtils.BYPASS_DB && ((currentTime - alarmTime) / MINUTE_MS < 1)) {        boolean alreadyFired=AlertUtils.hasAlertFiredInSharedPrefs(context,eventId,beginTime,alarmTime);        if (!alreadyFired) {          newAlertOverride=true;        }      }      if (DEBUG) {        StringBuilder msgBuilder=new StringBuilder();        msgBuilder.append("alertCursor result: alarmTime:").append(alarmTime).append(" alertId:").append(alertId).append(" eventId:").append(eventId).append(" state: ").append(state).append(" minutes:").append(minutes).append(" declined:").append(declined).append(" responded:").append(responded).append(" beginTime:").append(beginTime).append(" endTime:").append(endTime).append(" allDay:").append(allDay).append(" alarmTime:").append(alarmTime).append(" forceQuiet:").append(forceQuiet);        if (AlertUtils.BYPASS_DB) {          msgBuilder.append(" newAlertOverride: " + newAlertOverride);        }        Log.d(TAG,msgBuilder.toString());      }      ContentValues values=new ContentValues();      int newState=-1;      boolean newAlert=false;      boolean sendAlert=!declined;      if (remindRespondedOnly) {        sendAlert=sendAlert && responded;      }      if (sendAlert) {        if (state == CalendarAlerts.STATE_SCHEDULED || newAlertOverride) {          newState=CalendarAlerts.STATE_FIRED;          numFired++;          if (!forceQuiet) {            newAlert=true;          }          values.put(CalendarAlerts.RECEIVED_TIME,currentTime);        }      } else {        newState=CalendarAlerts.STATE_DISMISSED;      }      if (newState != -1) {        values.put(CalendarAlerts.STATE,newState);        state=newState;        if (AlertUtils.BYPASS_DB) {          AlertUtils.setAlertFiredInSharedPrefs(context,eventId,beginTime,alarmTime);        }      }      if (state == CalendarAlerts.STATE_FIRED) {        values.put(CalendarAlerts.NOTIFY_TIME,currentTime);      }      if (values.size() > 0)       cr.update(alertUri,values,null,null);      if (state != CalendarAlerts.STATE_FIRED) {        continue;      }      NotificationInfo newInfo=new NotificationInfo(eventName,location,description,beginTime,endTime,eventId,allDay,newAlert);      long beginTimeAdjustedForAllDay=beginTime;      String tz=null;      if (allDay) {        tz=TimeZone.getDefault().getID();        beginTimeAdjustedForAllDay=Utils.convertAlldayUtcToLocal(null,beginTime,tz);      }      if (eventIds.containsKey(eventId)) {        NotificationInfo oldInfo=eventIds.get(eventId);        long oldBeginTimeAdjustedForAllDay=oldInfo.startMillis;        if (allDay) {          oldBeginTimeAdjustedForAllDay=Utils.convertAlldayUtcToLocal(null,oldInfo.startMillis,tz);        }        long oldStartInterval=oldBeginTimeAdjustedForAllDay - currentTime;        long newStartInterval=beginTimeAdjustedForAllDay - currentTime;        boolean dropOld;        if (newStartInterval < 0 && oldStartInterval > 0) {          dropOld=Math.abs(newStartInterval) < MIN_DEPRIORITIZE_GRACE_PERIOD_MS;        } else {          dropOld=Math.abs(newStartInterval) < Math.abs(oldStartInterval);        }        if (dropOld) {          highPriorityEvents.remove(oldInfo);          mediumPriorityEvents.remove(oldInfo);          if (DEBUG) {            Log.d(TAG,"Dropping alert for recurring event ID:" + oldInfo.eventId + ", startTime:"+ oldInfo.startMillis+ " in favor of startTime:"+ newInfo.startMillis);          }        } else {          continue;        }      }      eventIds.put(eventId,newInfo);      long highPriorityCutoff=currentTime - getGracePeriodMs(beginTime,endTime,allDay);      if (beginTimeAdjustedForAllDay > highPriorityCutoff) {        highPriorityEvents.add(newInfo);      } else       if (allDay && tz != null && DateUtils.isToday(beginTimeAdjustedForAllDay)) {        mediumPriorityEvents.add(newInfo);      } else {        lowPriorityEvents.add(newInfo);      }    }    GlobalDismissManager.processEventIds(context,eventIds.keySet());  }  finally {    if (alertCursor != null) {      alertCursor.close();    }  }  return numFired;}  }
class C{  @Override public int compareTo(Candidate other){  if (score == other.score) {    return other.term.compareTo(term);  } else {    return Double.compare(score,other.score);  }}  }
class C{  public BlendedInfixSuggester(Directory dir,Analyzer analyzer) throws IOException {  super(dir,analyzer);  this.blenderType=BlenderType.POSITION_LINEAR;  this.numFactor=DEFAULT_NUM_FACTOR;}  }
class C{  private static void printLocale(Locale loc){  System.out.println();  System.out.println(loc.getDisplayName());  System.out.println(loc.getCountry());  System.out.println(loc.getLanguage());  System.out.println(loc.getDisplayCountry());  System.out.println(loc.getDisplayLanguage());  System.out.println(loc.getDisplayName());  System.out.println(loc.getISO3Country());  System.out.println(loc.getISO3Language());}  }
class C{  public void appendLongInt(int val){  buf[pos++]=(byte)((val >>> 24) & 0xFF);  buf[pos++]=(byte)((val >>> 16) & 0xFF);  buf[pos++]=(byte)((val >>> 8) & 0xFF);  buf[pos++]=(byte)(val & 0xFF);}  }
class C{  public static CCMenu menu(CCMenuItem... items){  return new CCMenu(items);}  }
class C{  public ColladaParam(String ns){  super(ns);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.N4_ENUM_LITERAL__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case N4JSPackage.N4_ENUM_LITERAL__VALUE:  return VALUE_EDEFAULT == null ? value != null : !VALUE_EDEFAULT.equals(value);case N4JSPackage.N4_ENUM_LITERAL__DEFINED_LITERAL:return definedLiteral != null;}return super.eIsSet(featureID);}  }
class C{  public Builder workingDirectory(UniformPath path){  workingDir=Optional.of(path);  return this;}  }
class C{  static public void arrayCopy(Object src,Object dst){  System.arraycopy(src,0,dst,0,Array.getLength(src));}  }
class C{  FlowState manageActivationProcess(FlowState flowState,InstanceStatus result) throws APPlatformException {  FlowState newState=null;switch (flowState) {case ACTIVATION_REQUESTED:    newState=manageOperationProcess(FlowState.START_REQUESTED,result);  break;case DEACTIVATION_REQUESTED:newState=manageOperationProcess(FlowState.STOP_REQUESTED,result);break;default :newState=manageOperationProcess(flowState,result);}return newState;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected int computeScrollDeltaToGetChildRectOnScreen(Rect rect){  if (mHorizontal) {    return computeScrollDeltaToGetChildRectOnScreenHorizontal(rect);  } else {    return computeScrollDeltaToGetChildRectOnScreenVertical(rect);  }}  }
class C{  public boolean isEmpty(){  return listeners.length == 0;}  }
class C{  @Override protected int doFill(ForgeDirection dir,FluidStack stack,boolean doFill){  if (dir == ForgeDirection.UP)   return 0;  int result=0;  if (MilkRegistry.instance().churn().isFluidIngredient(stack)) {    result=inputFluidSlot.fill(stack,doFill);  }  return result;}  }
class C{  public static IntentFilter makeGetIntentFilter(){  return new IntentFilter(ACTION_GET);}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  protected void removeTextEventListeners(BridgeContext ctx,NodeEventTarget e){  e.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",childNodeRemovedEventListener,true);  e.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMSubtreeModified",subtreeModifiedEventListener,false);}  }
class C{  public static boolean isRegistered(Class<?> clazz){  return regModules.containsKey(clazz.getName());}  }
class C{  public MarketplaceAccessTypeUneligibleForOperationException(){  super();}  }
class C{  protected void sequence_TFormalParameter(ISerializationContext context,TFormalParameter semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static int domainCount(final EventOrigin stack,final String domain){  assert domain != null : "domain = null";  assert getDomains(stack) != null : "getDomains(" + stack + ") = null";  return getDomains(stack).get(domain);}  }
class C{  public SubjectKeyIdentifier(SubjectPublicKeyInfo spki){  this.keyidentifier=getDigest(spki);}  }
class C{  private int checkEdgeCrossings(S2Loop b,S2EdgeUtil.WedgeRelation relation){  DataEdgeIterator it=getEdgeIterator(b.numVertices);  int result=1;  for (int j=0; j < b.numVertices(); ++j) {    S2EdgeUtil.EdgeCrosser crosser=new S2EdgeUtil.EdgeCrosser(b.vertex(j),b.vertex(j + 1),vertex(0));    int previousIndex=-2;    for (it.getCandidates(b.vertex(j),b.vertex(j + 1)); it.hasNext(); it.next()) {      int i=it.index();      if (previousIndex != i - 1) {        crosser.restartAt(vertex(i));      }      previousIndex=i;      int crossing=crosser.robustCrossing(vertex(i + 1));      if (crossing < 0) {        continue;      }      if (crossing > 0) {        return -1;      }      if (vertex(i + 1).equals(b.vertex(j + 1))) {        result=Math.min(result,relation.test(vertex(i),vertex(i + 1),vertex(i + 2),b.vertex(j),b.vertex(j + 2)));        if (result < 0) {          return result;        }      }    }  }  return result;}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public ParameterizedTypeImpl(Class<?> rawType,Type[] actualTypeArguments){  this(null,rawType,actualTypeArguments);}  }
class C{  @Override protected SetConfigResponse doInBackground(Void... params){  return getSetConfigResponse(context,url);}  }
class C{  @Override public void reset(){  broadcast(new DecoderStateEvent(this,Event.RESET,State.IDLE));  broadcast(new MetadataReset());  mState=State.IDLE;  broadcast(ChangedAttribute.CHANNEL_STATE);}  }
class C{  public void add(final ArchiveDescription archive){  this.archives.add(archive);}  }
class C{  public boolean hasKind(){  return getKind() != null;}  }
class C{  public String toMaskedString(){  SymbolCode masked=new SymbolCode();  masked.setValues(this);  masked.setStandardIdentity(null);  masked.setStatus(null);  masked.setEchelon(null);  masked.setSymbolModifier(null);  masked.setCountryCode(null);  masked.setOrderOfBattle(null);  return masked.toString();}  }
class C{  public void writeMapEnd() throws IOException {  os.write('z');}  }
class C{  public String authorizeCapture(final CustomerOrder order,final Map params){  return super.authorizeCapture(order,params);}  }
class C{  public boolean queue(PngChunk c){  queuedChunks.add(c);  return true;}  }
class C{  public final void readFromStream(DataInputStream dis,int version) throws IOException, ChessParseError {  event=dis.readUTF();  site=dis.readUTF();  date=dis.readUTF();  round=dis.readUTF();  white=dis.readUTF();  black=dis.readUTF();  startPos=TextIO.readFEN(dis.readUTF());  currentPos=new Position(startPos);  timeControl=dis.readUTF();  if (version >= 2) {    whiteTimeControl=dis.readUTF();    blackTimeControl=dis.readUTF();  } else {    whiteTimeControl="?";    blackTimeControl="?";  }  int nTags=dis.readInt();  tagPairs.clear();  for (int i=0; i < nTags; i++) {    TagPair tp=new TagPair();    tp.tagName=dis.readUTF();    tp.tagValue=dis.readUTF();    tagPairs.add(tp);  }  rootNode=new Node();  Node.readFromStream(dis,rootNode);  currentNode=rootNode;  int pathLen=dis.readInt();  for (int i=0; i < pathLen; i++)   goForward(dis.readInt());  updateListener();}  }
class C{  @Override public int executeUpdate(String sql,int[] columnIndexes) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("executeUpdate(" + quote(sql) + ", "+ quoteIntArray(columnIndexes)+ ");");    }    return executeUpdateInternal(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void loadNames() throws IOException {  mNames=new PrereadNames(mDirectory,mRegion,false);  if (mIndex.getVersion() >= IndexFile.SEPARATE_CHECKSUM_VERSION && mRegion.getStart() == 0 && mRegion.getEnd() == mIndex.getNumberSequences()) {    if (mNames.calcChecksum() != mIndex.getNameChecksum()) {      throw new CorruptSdfException("Sequence names failed checksum - SDF may be corrupt: \"" + mDirectory + "\"");    } else {      Diagnostic.developerLog("Sequence names passed checksum");    }  }}  }
class C{  private static void usage(){  System.out.println("Usage: java CodeSearchClient --query query_regex [--nresults number_of_results]" + " [--start start_index] ");  System.out.println("\nA simple application that uses the provided query\n" + "and returns the results provided by the Google CodeSearch Service\n");}  }
class C{  public CursorRequestMessage(CursorRequestMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStoreName()) {    this.storeName=other.storeName;  }  this.cursorId=other.cursorId;  this.close=other.close;}  }
class C{  @Override protected boolean isSwitchFor(EPackage ePackage){  return ePackage == modelPackage;}  }
class C{  public static SemGraph serializableInstance(){  return new SemGraph();}  }
class C{  public final ArrayList<Pair<Integer,ProbeResult>> movePieceProbe(Position pos,int fromSq){  int p=pos.getPiece(fromSq);  if ((p == Piece.EMPTY) || (pos.whiteMove != Piece.isWhite(p)))   return null;  ArrayList<Pair<Integer,ProbeResult>> ret=new ArrayList<Pair<Integer,ProbeResult>>();  ArrayList<Move> moveList=new MoveGen().legalMoves(pos);  UndoInfo ui=new UndoInfo();  for (  Move m : moveList) {    if (m.from != fromSq)     continue;    pos.makeMove(m,ui);    boolean isZeroing=pos.halfMoveClock == 0;    ProbeResult res=probe(pos);    pos.unMakeMove(m,ui);    if (res.type == ProbeResult.Type.NONE)     continue;    res.wdl=-res.wdl;    if (isZeroing && (res.type == ProbeResult.Type.DTZ)) {      res.score=1;    } else     if (res.type != ProbeResult.Type.WDL) {      res.score++;    }    ret.add(new Pair<Integer,ProbeResult>(m.to,res));  }  return ret;}  }
class C{  boolean bindAttribute(String ns,String wildcard,AttributeActionSet actions){  NamespaceSpecification nss=new NamespaceSpecification(ns,wildcard);  if (nssAttributeMap.get(nss) != null)   return false;  for (Enumeration e=nssAttributeMap.keys(); e.hasMoreElements(); ) {    NamespaceSpecification nssI=(NamespaceSpecification)e.nextElement();    if (nss.compete(nssI)) {      return false;    }  }  nssAttributeMap.put(nss,actions);  return true;}  }
class C{  public DynamicInvokeExpr newDynamicInvokeExpr(SootMethodRef bootstrapMethodRef,List bootstrapArgs,SootMethodRef methodRef,List args){  return new JDynamicInvokeExpr(bootstrapMethodRef,bootstrapArgs,methodRef,args);}  }
class C{  public long wchan(){  return Long.parseLong(fields[34]);}  }
class C{  @SuppressWarnings("static-method") @Test public void testLogsumFormulas(){  double betaWalkTT=-10. / 3600.0;  double betaWalkTD=-10.;  double betaCarTT=-12 / 3600.0;  double betaCarTD=-12;  double betaCarTMC=-1;  double cijTT=1.5 / 60.;  double chiTT=1.2 / 60.;  double cijTD=500.;  double chiTD=20.;  double cijTMC=10;  double VhjOldTT=(cijTT * betaCarTT) + (chiTT * betaWalkTT);  double VhjOldTD=(cijTD * betaCarTD) + (chiTD * betaWalkTD);  double VhjOldTMC=cijTMC * betaCarTMC + 0;  double VhjOld=VhjOldTT + VhjOldTD + VhjOldTMC;  double VijCar=(cijTT * betaCarTT) + (cijTD * betaCarTD) + (cijTMC * betaCarTMC);  double VhiWalk=(chiTT * betaWalkTT) + (chiTD * betaWalkTD);  double VhjNew=VijCar + VhiWalk;  Assert.assertTrue(VhjOld == VhjNew);  double dummyVijCar=-0.9123;  double dummyVhiWalk=-0.023;  double dummyExp1=Math.exp(dummyVijCar + dummyVhiWalk);  double dummyExp2=Math.exp(dummyVijCar) * Math.exp(dummyVhiWalk);  Assert.assertEquals(dummyExp1,dummyExp2,1.e-10);}  }
class C{  static boolean drawGradient(Component c,Graphics g,String key,int x,int y,int w,int h,boolean vertical){  java.util.List gradient=(java.util.List)UIManager.get(key);  if (gradient == null || !(g instanceof Graphics2D)) {    return false;  }  if (w <= 0 || h <= 0) {    return true;  }  GradientPainter.INSTANCE.paint(c,(Graphics2D)g,gradient,x,y,w,h,vertical);  return true;}  }
class C{  BinaryTree<Integer> buildLeftLinear(int n){  BinaryTree<Integer> bt=new BinaryTree<Integer>();  for (int i=n; i > 0; i--) {    bt.insert(i);  }  return bt;}  }
class C{  void trip(){  ToHitData toHit=TripAttackAction.toHit(clientgui.getClient().getGame(),cen,target);  String title=Messages.getString("PhysicalDisplay.TripDialog.title",new Object[]{target.getDisplayName()});  String message=Messages.getString("PhysicalDisplay.TripDialog.message",new Object[]{toHit.getValueAsString(),new Double(Compute.oddsAbove(toHit.getValue(),ce().getCrew().getOptions().booleanOption(OptionsConstants.PILOT_APTITUDE_PILOTING))),toHit.getDesc()});  if (clientgui.doYesNoDialog(title,message)) {    disableButtons();    if (GUIPreferences.getInstance().getAutoDeclareSearchlight()) {      doSearchlight();    }    attacks.addElement(new TripAttackAction(cen,target.getTargetType(),target.getTargetId()));    ready();  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:41.008 -0500",hash_original_method="BBF050FF37EED8F05F0CD887F679CFE4",hash_generated_method="04ECA89011DBD82E72A31991912E536D") public AttributeCertificateIssuer(AttCertIssuer issuer){  form=issuer.getIssuer();}  }
class C{  public boolean markSupported(){  return true;}  }
class C{  public Integer remove(Float key){  return wrapValue(_map.remove(unwrapKey(key)));}  }
class C{  public Address loadAddress(Offset offset){  return new Address(loadArchitecturalWord(offset));}  }
class C{  public boolean isEmpty(){  return (exchange_keys.length == 0);}  }
class C{  public void addSpecificDamage(String s){  int ewSpot=s.indexOf(':');  if (s.isEmpty() || (ewSpot < 1)) {    return;  }  int loc=Integer.parseInt(s.substring(1,ewSpot));  int setTo=Integer.parseInt(s.substring(ewSpot + 1));  boolean rear=(s.charAt(0) == 'R');  boolean internal=(s.charAt(0) == 'I');  specificDammage.add(new SpecDam(loc,setTo,rear,internal));}  }
class C{  public static String addResourcePathToPackagePath(Class<?> clazz,String resourceName){  Assert.notNull(resourceName,"Resource name must not be null");  if (!resourceName.startsWith("/")) {    return classPackageAsResourcePath(clazz) + "/" + resourceName;  }  return classPackageAsResourcePath(clazz) + resourceName;}  }
class C{  public static void drawToDot(final File dest,final AnnotatedTypeMirror type){  final Drawing drawer=new Drawing("Type",type);  drawer.draw(dest);}  }
class C{  public static String elapsedTime(long start,long end){  if (start > end) {    return null;  }  long[] elapsedTime=new long[TIME_FACTOR.length];  for (int i=0; i < TIME_FACTOR.length; i++) {    elapsedTime[i]=start > end ? -1 : (end - start) / TIME_FACTOR[i];    start+=TIME_FACTOR[i] * elapsedTime[i];  }  NumberFormat nf=NumberFormat.getInstance();  nf.setMinimumIntegerDigits(2);  StringBuffer buf=new StringBuffer();  for (int i=0; i < elapsedTime.length; i++) {    if (i > 0) {      buf.append(":");    }    buf.append(nf.format(elapsedTime[i]));  }  return buf.toString();}  }
class C{  private BufferedOutputStream openStreamForFile(File file) throws FileNotFoundException {  return new BufferedOutputStream(new FileOutputStream(file,true));}  }
class C{  static boolean lengthsEqual(final Map<String,Integer> sequenceLengths,RegionRestriction r1,RegionRestriction r2){  return length(sequenceLengths,r1) == length(sequenceLengths,r2);}  }
class C{  public JavaModelStatus(int code,IJavaElement[] elements){  super(ERROR,JavaCore.PLUGIN_ID,code,"JavaModelStatus",null);  this.elements=elements;  this.path=null;}  }
class C{  public Instances(Reader reader) throws IOException {  ArffReader arff=new ArffReader(reader);  Instances dataset=arff.getData();  initialize(dataset,dataset.numInstances());  dataset.copyInstances(0,this,dataset.numInstances());  compactify();}  }
class C{  public NemRequestResult(final int type,final int code,final String message){  this.type=type;  this.code=code;  this.message=message;}  }
class C{  public final String stringVal(){  if (!hasSpecial) {    return this.subString(np + 1,sp);  } else {    return new String(sbuf,0,sp);  }}  }
class C{  public ImageView(final String id,final Depictable depictable){  super(id);  this.depictable=depictable;}  }
class C{  private static int checkClassTypeSignature(final String signature,int pos){  pos=checkChar('L',signature,pos);  pos=checkIdentifier(signature,pos);  while (getChar(signature,pos) == '/') {    pos=checkIdentifier(signature,pos + 1);  }  if (getChar(signature,pos) == '<') {    pos=checkTypeArguments(signature,pos);  }  while (getChar(signature,pos) == '.') {    pos=checkIdentifier(signature,pos + 1);    if (getChar(signature,pos) == '<') {      pos=checkTypeArguments(signature,pos);    }  }  return checkChar(';',signature,pos);}  }
class C{  public JSONObject toJSONObject(JSONArray names) throws JSONException {  if (names == null || names.length() == 0 || this.length() == 0) {    return null;  }  JSONObject jo=new JSONObject();  for (int i=0; i < names.length(); i+=1) {    jo.put(names.getString(i),this.opt(i));  }  return jo;}  }
class C{  public boolean containsPrefix(final CharSequence prefix,final int offset,final int length){  if (prefix == null) {    return false;  }  final Node match=_getNode(prefix,offset,length);  return match != null;}  }
class C{  public void generate(int x1,int y1,int x2,int y2){  Point midPoint=new Point();  Point arcCenter=new Point();  Point2D peakPoint=new Point2D.Float();  double distance=Math.sqrt(Math.pow(Math.abs(y2 - y1),2.0) + Math.pow(Math.abs(x2 - x1),2.0));  double straightLineSlope=Math.atan((double)(y2 - y1) / (double)(x2 - x1));  double inverseSlope=straightLineSlope - (Math.PI / 2.0);  if (Debug.debugging("arc")) {    Debug.output("ArcCalc.generate: Slope is " + Math.toDegrees(straightLineSlope) + " degrees, distance = "+ distance+ " pixels.");  }  midPoint.setLocation(x1 + ((x2 - x1) / 2),y1 + ((y2 - y1) / 2));  if (Debug.debugging("arc")) {    Debug.output("ArcCalc.generate: Center point for (" + x1 + ", "+ y1+ ") to ("+ x2+ ", "+ y2+ ") is ("+ midPoint.x+ ", "+ midPoint.y+ ")");  }  double arccos=Math.cos(arcAngle);  double arcRadius;  if (arccos != 1.0) {    arcRadius=distance / Math.sqrt(2.0 * (1.0 - Math.cos(arcAngle)));  } else {    arcRadius=distance / Math.sqrt(2.0);  }  if (Debug.debugging("arc")) {    Debug.output("ArcCalc.generate: radius of arc = " + arcRadius);  }  double x=arcRadius - arcRadius * Math.cos(arcAngle);  double rPrime=(distance / 2.0) * (Math.sqrt(1.0 - Math.pow(x / distance,2.0))) / Math.sin(arcAngle / 2.0);  if (Debug.debugging("arc")) {    Debug.output("ArcCalc.generate: rPrime = " + rPrime);  }  int direction=1;  if (arcUp)   direction=-1;  arcCenter.x=midPoint.x + (direction * (int)(rPrime * Math.cos(inverseSlope)));  arcCenter.y=midPoint.y + (direction * (int)(rPrime * Math.sin(inverseSlope)));  if (Debug.debugging("arc")) {    Debug.output("ArcCalc.generateArc: creating supplimental graphics list");    arcGraphics=new OMGraphicList();    double dist1=Math.sqrt(Math.pow((double)(arcCenter.x - x1),2.0) + Math.pow((double)(arcCenter.y - y1),2.0));    double dist2=Math.sqrt(Math.pow((double)(arcCenter.x - x2),2.0) + Math.pow((double)(arcCenter.y - y2),2.0));    Debug.output("ArcCalc.generate: Center focus for arc is (" + arcCenter.x + ", "+ arcCenter.y+ ") along slope line of "+ Math.toDegrees(inverseSlope)+ " degrees).");    Debug.output("ArcCalc.generate: Distance to point 1 from arc focus = " + dist1 + "\n                    Distance to point 2 from arc focus = "+ dist2);    OMRect point1=new OMRect(x1 - 1,y1 - 1,x1 + 1,y1 + 1);    OMRect point2=new OMRect(x2 - 1,y2 - 1,x2 + 1,y2 + 1);    OMRect arcPoint=new OMRect(arcCenter.x - 1,arcCenter.y - 1,arcCenter.x + 1,arcCenter.y + 1);    point1.setLinePaint(OMColor.red);    point2.setLinePaint(OMColor.red);    arcPoint.setLinePaint(OMColor.blue);    arcGraphics.add(point1);    arcGraphics.add(point2);    arcGraphics.add(arcPoint);    OMLine line1=new OMLine(x1,y1,x2,y2);    OMLine line2=new OMLine(midPoint.x,midPoint.y,arcCenter.x,arcCenter.y);    arcGraphics.add(line1);    arcGraphics.add(line2);  }  int realCount=0;  double startSlope=getRealAngle((float)arcCenter.getX(),(float)arcCenter.getY(),x1,y1);  double endSlope=getRealAngle((float)arcCenter.getX(),(float)arcCenter.getY(),x2,y2);  double smallSlope, largeSlope;  double angleIncrement;  smallSlope=(startSlope > endSlope) ? endSlope : startSlope;  largeSlope=(smallSlope == startSlope) ? endSlope : startSlope;  while (Math.abs(smallSlope - largeSlope) > Math.PI) {    if (Math.abs(largeSlope - smallSlope - Math.PI) < .001) {      break;    }    Debug.message("arc","ArcCalc.generate: Modifying the starting slope.");    double tmpSlope=smallSlope + MoreMath.TWO_PI;    smallSlope=largeSlope;    largeSlope=tmpSlope;  }  if (MoreMath.approximately_equal(arcAngle,Math.PI) && arcUp) {    Debug.message("arc","ArcCalc.generate: Modifying 180 angle points.");    double tmpSlope=smallSlope + MoreMath.TWO_PI;    smallSlope=largeSlope;    largeSlope=tmpSlope;  }  if (Math.abs(y2 - y1) < Math.abs(x2 - x1)) {    angleIncrement=Math.PI / Math.abs(x2 - x1);  } else {    angleIncrement=Math.PI / Math.abs(y2 - y1);  }  int numPoints=(int)(Math.abs(smallSlope - largeSlope) / angleIncrement + 2);  float[] xPoints=new float[numPoints];  float[] yPoints=new float[numPoints];  if (Debug.debugging("arc")) {    Debug.output("ArcCalc.generate: angle to x1, y1 is " + startSlope + " ("+ Math.toDegrees(startSlope)+ " degrees), angle to x2, y2 is "+ endSlope+ " ("+ Math.toDegrees(endSlope)+ " degrees)");    Debug.output("ArcCalc.generate: Starting angle is " + smallSlope + "("+ Math.toDegrees(smallSlope)+ " degrees), end angle is "+ largeSlope+ " ("+ Math.toDegrees(largeSlope)+ " degrees), incrementing by "+ angleIncrement+ " ("+ Math.toDegrees(angleIncrement)+ " degrees)");  }  reversed=false;  while (smallSlope < largeSlope && realCount < numPoints) {    xPoints[realCount]=arcCenter.x + (int)(arcRadius * Math.cos(smallSlope));    yPoints[realCount]=arcCenter.y + (int)(arcRadius * Math.sin(smallSlope));    if (realCount == 0 && xPoints[realCount] == x2) {      Debug.message("arc","ArcCalc: line reversed");      reversed=true;    }    if (Debug.debugging("arc") && realCount == 0) {      OMLine startLine=new OMLine(arcCenter.x,arcCenter.y,(int)xPoints[0],(int)yPoints[0]);      startLine.setLinePaint(OMColor.white);      arcGraphics.add(startLine);    } else     if (Debug.debugging("arcdetail")) {      Debug.output("  angle " + smallSlope + " ("+ smallSlope * 180 / Math.PI + " degrees)  = " + xPoints[realCount] + ", " + yPoints[realCount]);    }    if (Math.abs(largeSlope - smallSlope - (arcAngle / 2.0)) < angleIncrement) {      peakPoint.setLocation(xPoints[realCount],yPoints[realCount]);      Debug.message("arc","ArcCalc: Found a midpoint.");    }    smallSlope+=angleIncrement;    realCount++;  }  xpoints=new float[realCount];  ypoints=new float[realCount];  System.arraycopy(xPoints,0,xpoints,0,realCount);  System.arraycopy(yPoints,0,ypoints,0,realCount);}  }
class C{  BookmarkItem(Context context){  super(context);  setClickable(false);  setEnableScrolling(false);  LayoutInflater factory=LayoutInflater.from(context);  factory.inflate(R.layout.history_item,this);  mTextView=(TextView)findViewById(R.id.title);  mUrlText=(TextView)findViewById(R.id.url);  mTileView=(SiteTileView)findViewById(R.id.favicon);  View star=findViewById(R.id.star);  star.setVisibility(View.GONE);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  StubSkeletonWriter(BatchEnvironment env,RemoteClass remoteClass,StubVersion version){  this.env=env;  this.remoteClass=remoteClass;  this.version=version;  stubClassName=Util.binaryNameOf(remoteClass.classDoc()) + "_Stub";  skeletonClassName=Util.binaryNameOf(remoteClass.classDoc()) + "_Skel";  int i=stubClassName.lastIndexOf('.');  packageName=(i != -1 ? stubClassName.substring(0,i) : "");  stubClassSimpleName=stubClassName.substring(i + 1);  skeletonClassSimpleName=skeletonClassName.substring(i + 1);  remoteMethods=remoteClass.remoteMethods();  methodFieldNames=nameMethodFields(remoteMethods);}  }
class C{  static int applyMaskPenaltyRule1(ByteMatrix matrix){  return applyMaskPenaltyRule1Internal(matrix,true) + applyMaskPenaltyRule1Internal(matrix,false);}  }
class C{  public TIntStack(int capacity){  _list=new TIntArrayList(capacity);}  }
class C{  public int offsetByCodePoints(int index,int codePointOffset){  int s=index + offset;  int r=Character.offsetByCodePoints(value,offset,count,s,codePointOffset);  return r - offset;}  }
class C{  public TInput(String type,String name,String value){  super(type,name);  this.value=value;}  }
class C{  public Sample(Assignment a){  super(a);}  }
class C{  protected MessageImpl(final byte type,final boolean durable,final long expiration,final long timestamp,final byte priority,final int initialMessageBufferSize){  this();  this.type=type;  this.durable=durable;  this.expiration=expiration;  this.timestamp=timestamp;  this.priority=priority;  createBody(initialMessageBufferSize);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:42.021 -0500",hash_original_method="1D5FD647F40A8A30082BEBDADF028E9F",hash_generated_method="C11B90FE13D5D91010819DF98F43D8F7") public boolean isForkedResponse(){  return super.getClientTransaction() == null && m_originalTransaction != null;}  }
class C{  public static Codec[] generateEncodingCodecChain(String encoding){  if (encoding.equalsIgnoreCase(H264VideoFormat.ENCODING)) {    Codec[] chain={new com.gsma.rcs.core.ims.protocol.rtp.codec.video.h264.JavaPacketizer()};    return chain;  }  return new Codec[0];}  }
class C{  public void fileReused(File f){  if (!recentFiles.contains(f)) {    throw new IllegalStateException("Selected a recent project that doesn't exist?");  } else {    recentFiles.remove(f);    recentFiles.add(f);  }}  }
class C{  public static void validateFieldsArePresentInSchema(Schema schema,String... requiredFields){  for (  String field : requiredFields) {    if (schema.getField(field) == null) {      throw new IllegalArgumentException(String.format("Field : '%s' is not present in the input schema",field));    }  }}  }
class C{  private void delayedHide(int delayMillis){  mHideHandler.removeCallbacks(mHideRunnable);  mHideHandler.postDelayed(mHideRunnable,delayMillis);}  }
class C{  private static List<String[]> readSentence(BufferedReader aReader) throws IOException {  List<String[]> words=new ArrayList<String[]>();  String line;  while ((line=aReader.readLine()) != null) {    if (StringUtils.isBlank(line)) {      break;    }    if (line.startsWith("<")) {      break;    }    String[] fields=line.split("\t");    words.add(fields);  }  if (line == null && words.isEmpty()) {    return null;  } else {    return words;  }}  }
class C{  private String fixWildcard(String value){  if (value.contains("*") && !value.contains(".*")) {    return value.replace("*",".");  }  return value;}  }
class C{  public ServiceHost startFactory(Service instanceService){  final Class<? extends Service> serviceClass=instanceService.getClass();  return startFactory(serviceClass,null);}  }
class C{  public boolean isLayerDragEnabled(){  return this.layerDragEnabled;}  }
class C{  @Override protected T doSwitch(int classifierID,EObject theEObject){switch (classifierID) {case ModelPackage.MODEL:{      Model model=(Model)theEObject;      T result=caseModel(model);      if (result == null)       result=defaultCase(theEObject);      return result;    }case ModelPackage.MODEL_REFERENCE:{    ModelReference modelReference=(ModelReference)theEObject;    T result=caseModelReference(modelReference);    if (result == null)     result=defaultCase(theEObject);    return result;  }default :return defaultCase(theEObject);}}  }
class C{  public static void gotoTableFromString(OFFlowMod.Builder fmb,String inst,Logger log){  if (inst == null || inst.equals("")) {    return;  }  if (fmb.getVersion().compareTo(OFVersion.OF_11) < 0) {    log.error("Goto Table Instruction not supported in OpenFlow 1.0");    return;  }  OFInstructionGotoTable.Builder ib=OFFactories.getFactory(fmb.getVersion()).instructions().buildGotoTable();  if (inst.startsWith("0x")) {    ib.setTableId(TableId.of(Integer.parseInt(inst.replaceFirst("0x",""),16)));  } else {    ib.setTableId(TableId.of(Integer.parseInt(inst))).build();  }  log.debug("Appending GotoTable instruction: {}",ib.build());  appendInstruction(fmb,ib.build());  log.debug("All instructions after append: {}",fmb.getInstructions());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (!Sage.isNonLocalClient())   return "INVALID API CALL - Client Plugins not supported in this mode";  if (pluggy != null)   return sage.plugin.CorePluginManager.getInstance().getPluginIncompatibleReason(pluggy,stack.getUIMgr());  return "";}  }
class C{  public static String cleanPath(String path){  if (path == null) {    return null;  }  String pathToUse=replace(path,WINDOWS_FOLDER_SEPARATOR,FOLDER_SEPARATOR);  int prefixIndex=pathToUse.indexOf(":");  String prefix="";  if (prefixIndex != -1) {    prefix=pathToUse.substring(0,prefixIndex + 1);    pathToUse=pathToUse.substring(prefixIndex + 1);  }  if (pathToUse.startsWith(FOLDER_SEPARATOR)) {    prefix=prefix + FOLDER_SEPARATOR;    pathToUse=pathToUse.substring(1);  }  String[] pathArray=delimitedListToStringArray(pathToUse,FOLDER_SEPARATOR);  List<String> pathElements=new LinkedList<>();  int tops=0;  for (int i=pathArray.length - 1; i >= 0; i--) {    String element=pathArray[i];    if (CURRENT_PATH.equals(element)) {    } else     if (TOP_PATH.equals(element)) {      tops++;    } else {      if (tops > 0) {        tops--;      } else {        pathElements.add(0,element);      }    }  }  for (int i=0; i < tops; i++) {    pathElements.add(0,TOP_PATH);  }  return prefix + collectionToDelimitedString(pathElements,FOLDER_SEPARATOR);}  }
class C{  public static terminal find(String with_name){  if (with_name == null)   return null; else   return (terminal)_all.get(with_name);}  }
class C{  private static String updateInstLabels(String inst,LocalVariableMap map) throws DMLRuntimeException {  if (inst.contains(Lop.VARIABLE_NAME_PLACEHOLDER)) {    int skip=Lop.VARIABLE_NAME_PLACEHOLDER.toString().length();    while (inst.contains(Lop.VARIABLE_NAME_PLACEHOLDER)) {      int startLoc=inst.indexOf(Lop.VARIABLE_NAME_PLACEHOLDER) + skip;      String varName=inst.substring(startLoc,inst.indexOf(Lop.VARIABLE_NAME_PLACEHOLDER,startLoc));      String replacement=getVarNameReplacement(inst,varName,map);      inst=inst.replaceAll(Lop.VARIABLE_NAME_PLACEHOLDER + varName + Lop.VARIABLE_NAME_PLACEHOLDER,replacement);    }  }  return inst;}  }
class C{  public boolean contains(T listener){  if (mListeners != null) {    return mListeners.contains(listener);  } else {    return false;  }}  }
class C{  public byte[] reserved(){  return uint8_4FromData(12);}  }
class C{  private void validateTagTypeUpdateRequest(TagTypeUpdateRequest request){  Assert.notNull(request,"A tag type update request must be specified.");  request.setDisplayName(alternateKeyHelper.validateStringParameter("display name",request.getDisplayName()));  Assert.notNull(request.getTagTypeOrder(),"A tag type order must be specified.");}  }
class C{  void simulateReboot(){synchronized (lock) {    pendingTasks.clear();  }}  }
class C{  @Override public String toString(){  return "CUmipmappedArray[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (o instanceof Pair) {    Pair p=(Pair)o;    return p.element.equals(element) && p.match.equals(match);  }  return false;}  }
class C{  public void addOneForTeamA(View v){  scoreTeamA=scoreTeamA + 1;  displayForTeamA(scoreTeamA);}  }
class C{  public COperandTree(final COperandTreeNode rootNode,final SQLProvider provider,final TypeManager typeManager,final TypeInstanceContainer instanceContainer){  Preconditions.checkNotNull(rootNode,"IE00212: Root node can't be null.");  this.typeManager=Preconditions.checkNotNull(typeManager,"Type manager can not be null.");  this.instanceContainer=Preconditions.checkNotNull(instanceContainer,"Type instance container can not be null.");  this.provider=Preconditions.checkNotNull(provider,"Sql provider can not be null.");  if (rootNode.getChildren().size() == 0) {    final COperandTreeNode realParent=new COperandTreeNode(-1,IOperandTree.NODE_TYPE_SIZE_PREFIX_ID,"b4",null,new ArrayList<IReference>(),provider,typeManager,instanceContainer);    COperandTreeNode.link(realParent,rootNode);    root=realParent;  } else {    root=rootNode;  }  initializeTree(root);}  }
class C{  @Override public void actionPerformed(ActionEvent e){  controller.displayView(viewToDisplay);}  }
