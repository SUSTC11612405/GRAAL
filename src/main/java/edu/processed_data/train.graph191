class C{  private void addBOMLines(MProduct product,BigDecimal qty){  MProductBOM[] bomLines=MProductBOM.getBOMLines(product);  for (int i=0; i < bomLines.length; i++) {    grpSelectProd.appendChild(new Separator());    addBOMLine(bomLines[i],qty);    grpSelectProd.appendChild(new Separator());  }  log.fine("#" + bomLines.length);}  }
class C{  public boolean isLocallyValid(boolean isProxy){  if (this.op == OP_NULL) {    if (isProxy) {      return true;    } else {      return !Token.isInvalidOrRemoved(getOriginalValue());    }  } else {    return this.op >= OP_CREATE && !Token.isInvalid(getNearSidePendingValue());  }}  }
class C{  public Node attr(final String attr,final Object value) throws IOException {  m_writer.write(" " + attr + "=\""+ attrib(value.toString())+ "\"");  m_attrs++;  return this;}  }
class C{  @Override public CreateAutoTimestamp loadValue(Date datastoreValue){  return CreateAutoTimestamp.create(new DateTime(datastoreValue,UTC));}  }
class C{  public static DateTimeFormatter yearMonthDay(){  if (ymd == null) {    ymd=new DateTimeFormatterBuilder().append(yearElement()).append(monthElement()).append(dayOfMonthElement()).toFormatter();  }  return ymd;}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area){  draw(g2,area,null);}  }
class C{  public void newLine() throws IOException {  if (writer != null) {    writer.write(LINE_SEPARATOR);  } else {    write(LINE_SEPARATOR);  }}  }
class C{  private void assertCostShipmentAdjust(CostResult costResult,int C_OrderLine_ID,MAcctSchema as,String trxName){  MCost cost=assertCost(costResult);  String whereClause="M_Product_ID=? AND M_CostElement_ID=? AND M_CostType_ID=?  AND M_InOutLine_ID IN (SELECT M_InOutLine_ID FROM M_InOutLine iol WHERE iol.C_OrderLine_ID=?)";  ArrayList<Object> parameters=new ArrayList();  parameters.add(costResult.M_Product_ID);  parameters.add(cost.getM_CostElement_ID());  parameters.add(cost.getM_CostType_ID());  parameters.add(C_OrderLine_ID);  assertCostDetail(costResult,whereClause,parameters);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ProcessParameterPanel(int WindowNo,ProcessInfo pi,String width){  m_WindowNo=WindowNo;  m_processInfo=pi;  this.width=width;  initComponent();}  }
class C{  public Move interpretMove(IGameState gameState,int col,int row,Player player){  TicTacToeState state=(TicTacToeState)gameState;  TicTacToeBoard board=state.board();  if (board.isClear(col,row)) {    return new PlaceMark(col,row,player);  }  AnnihilateMove move=new AnnihilateMove(col,row,player);  if (move.isValid(board)) {    return move;  }  return null;}  }
class C{  public static int byteToMeg(long bytes){  return (int)(bytes / MB);}  }
class C{  private double psi(double lambda,double mu){  return lambda * lambda + 2 * lambda - 2 * lambda * mu;}  }
class C{  public StorageSystemRestRep register(URI id){  return client.post(StorageSystemRestRep.class,getIdUrl() + "/register",id);}  }
class C{  public static String implode(final Collection<String> strings,final String delim,final boolean quoteStringsWithSpaces){  return implode(strings.toArray(new String[strings.size()]),delim,quoteStringsWithSpaces);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node oldChild;  Node newChild;  NodeList elementList;  Node elementNode;  Node replacedNode;  doc=(Document)load("hc_staff",true);  newChild=doc.createElement("br");  oldChild=doc.createElement("b");  elementList=doc.getElementsByTagName("p");  elementNode=elementList.item(1);{    boolean success=false;    try {      replacedNode=elementNode.replaceChild(newChild,oldChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  public void addKdContainer(){  KdistanceContainer container=new KdistanceContainer(this);  this.listOfkDContainers.add(container);}  }
class C{  public void removeAllValuesForX(Number x){  ParamChecks.nullNotPermitted(x,"x");  boolean savedState=this.propagateEvents;  this.propagateEvents=false;  for (int s=0; s < this.data.size(); s++) {    XYSeries series=(XYSeries)this.data.get(s);    series.remove(x);  }  this.propagateEvents=savedState;  this.xPoints.remove(x);  fireDatasetChanged();}  }
class C{  public static String encode(byte[] binaryData){  if (binaryData == null) {    return null;  }  int lengthDataBits=binaryData.length * EIGHTBIT;  if (lengthDataBits == 0) {    return "";  }  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  int numberQuartet=fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;  char encodedData[]=null;  encodedData=new char[numberQuartet * 4];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  for (int i=0; i < numberTriplets; i++) {    b1=binaryData[dataIndex++];    b2=binaryData[dataIndex++];    b3=binaryData[dataIndex++];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex++]=lookUpBase64Alphabet[b3 & 0x3f];  }  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex++]=PAD;    encodedData[encodedIndex++]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex++]=PAD;  }  return new String(encodedData);}  }
class C{  public void onMessage(Message message){  MapMessage mapMessage=null;  if (Debug.verboseOn())   Debug.logVerbose("JMS Message Received --> " + message,module);  if (message instanceof MapMessage) {    mapMessage=(MapMessage)message;  } else {    Debug.logError("Received message is not a MapMessage!",module);    return;  }  runService(mapMessage);}  }
class C{  static void init(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:22.449 -0500",hash_original_method="DF8889919B491656E0252194C5FFA90E",hash_generated_method="D87174C4B8E2D68B4A903DF949F60DBE") public void appendDataTo(StringBuilder stringBuilder){  stringBuilder.append(buffer);}  }
class C{  public void initializeScreen(){  mEditTextEmailInput=(EditText)findViewById(R.id.edit_text_email);  mEditTextPasswordInput=(EditText)findViewById(R.id.edit_text_password);  LinearLayout linearLayoutLoginActivity=(LinearLayout)findViewById(R.id.linear_layout_login_activity);  initializeBackground(linearLayoutLoginActivity);  mAuthProgressDialog=new ProgressDialog(this);  mAuthProgressDialog.setTitle(getString(R.string.progress_dialog_loading));  mAuthProgressDialog.setMessage(getString(R.string.progress_dialog_authenticating_with_firebase));  mAuthProgressDialog.setCancelable(false);  setupGoogleSignIn();}  }
class C{  public void invite(Channel otherChannel){  if (otherChannel == null)   throw new IllegalArgumentException("Can't send invite to null invite channel");  bot.sendIRC().invite(otherChannel.getName(),channel.getName());}  }
class C{  private void initWeights(int d,int h){  this.W=makeW(d,h);  this.dW_=new Matrix(W.getRowDimension(),W.getColumnDimension());}  }
class C{  @Override public double cloudletResume(int cloudletId){  boolean found=false;  int position=0;  for (  ResCloudlet rcl : getCloudletPausedList()) {    if (rcl.getCloudletId() == cloudletId) {      found=true;      break;    }    position++;  }  if (found) {    ResCloudlet rgl=getCloudletPausedList().remove(position);    rgl.setCloudletStatus(Cloudlet.INEXEC);    getCloudletExecList().add(rgl);    double remainingLength=rgl.getRemainingCloudletLength();    double estimatedFinishTime=CloudSim.clock() + (remainingLength / (getCapacity(getCurrentMipsShare()) * rgl.getNumberOfPes()));    return estimatedFinishTime;  }  return 0.0;}  }
class C{  public LoadKnowledgeAction(KnowledgeEditable knowledgeEditable){  super("Load Knowledge...");  if (knowledgeEditable == null) {    throw new NullPointerException();  }  this.knowledgeEditable=knowledgeEditable;}  }
class C{  public static Pos3D fromMotion(Entity entity){  return new Pos3D(entity.motionX,entity.motionY,entity.motionZ);}  }
class C{  public InputStreamTransferable(DataFlavor[] flavors,byte[] data){  super(flavors);  this.data=data;}  }
class C{  @NotNull public Runner addRunner(@NotNull ApplicationProcessDescriptor processDescriptor){  RunOptions runOptions=dtoFactory.createDto(RunOptions.class);  Runner runner=modelsFactory.createRunner(runOptions);  String environmentId=processDescriptor.getEnvironmentId();  if (environmentId != null && environmentId.startsWith(PROJECT_PREFIX)) {    runner.setScope(PROJECT);  }  runnersId.add(processDescriptor.getProcessId());  runner.setProcessDescriptor(processDescriptor);  runner.setRAM(processDescriptor.getMemorySize());  runner.setStatus(Runner.Status.DONE);  runner.resetCreationTime();  history.addRunner(runner);  onSelectionChanged(RUNNER);  runnerTimer.schedule(ONE_SEC.getValue());  LaunchAction launchAction=actionFactory.createLaunch();  runnerActions.put(runner,launchAction);  launchAction.perform(runner);  selectHistoryTab();  return runner;}  }
class C{  public void ignorableWhitespace(StylesheetHandler handler,char ch[],int start,int length) throws org.xml.sax.SAXException {}  }
class C{  private IProject createProject(IProject projectHandle,IProgressMonitor monitor) throws CoreException {  try {    monitor.beginTask("",2000);    projectHandle.create(new SubProgressMonitor(monitor,1000));    if (monitor.isCanceled()) {      throw new OperationCanceledException();    }    projectHandle.open(new SubProgressMonitor(monitor,1000));    if (monitor.isCanceled()) {      throw new OperationCanceledException();    }  }  finally {    monitor.done();  }  return projectHandle;}  }
class C{  public void addBlock(int x,int y,int z){  BlockPosition blockPos=new BlockPosition(x,y,z);  addBlock(blockPos);}  }
class C{  public final void offset(int dx,int dy){  x+=dx;  y+=dy;}  }
class C{  public TIntHashSet(TIntHashingStrategy strategy){  super(strategy);}  }
class C{  protected int addNodeInDocOrder(int node){  assertion(hasCache(),"addNodeInDocOrder must be done on a mutable sequence!");  int insertIndex=-1;  NodeVector vec=getVector();  int size=vec.size(), i;  for (i=size - 1; i >= 0; i--) {    int child=vec.elementAt(i);    if (child == node) {      i=-2;      break;    }    DTM dtm=m_dtmMgr.getDTM(node);    if (!dtm.isNodeAfter(node,child)) {      break;    }  }  if (i != -2) {    insertIndex=i + 1;    vec.insertElementAt(node,insertIndex);  }  return insertIndex;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=ECQrCodeManager.getInstance(activity).getCameraManager().buildLuminanceSource(rotatedData,width,height);  if (source != null) {    BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));    try {      rawResult=multiFormatReader.decodeWithState(bitmap);    } catch (    ReaderException re) {    } finally {      multiFormatReader.reset();    }  }  if (rawResult != null) {  }  Handler handler=ECQrCodeManager.getInstance(activity).getActivityHandler();  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode in " + (end - start) + " ms");    if (handler != null) {      Message message=Message.obtain(handler,ECGlobalConstance.DECODE_SUCCEEDED,rawResult);      Bundle bundle=new Bundle();      bundleThumbnail(source,bundle);      message.setData(bundle);      message.sendToTarget();    }  } else {    if (handler != null) {      Message message=Message.obtain(handler,ECGlobalConstance.DECODE_FAILED);      message.sendToTarget();    }  }}  }
class C{  public org.smpte_ra.schemas.st2067_2_2016.EssenceDescriptorBaseType buildEssenceDescriptorBaseType(UUID id,Node node){  org.smpte_ra.schemas.st2067_2_2016.EssenceDescriptorBaseType essenceDescriptorBaseType=new org.smpte_ra.schemas.st2067_2_2016.EssenceDescriptorBaseType();  essenceDescriptorBaseType.setId(UUIDHelper.fromUUID(id));  this.essenceDescriptorIDMap.put(node,UUIDHelper.fromUUID(id));  essenceDescriptorBaseType.getAny().add(node);  return essenceDescriptorBaseType;}  }
class C{  public void putAll(Map<? extends K,? extends V> m){  for (  Map.Entry<? extends K,? extends V> e : m.entrySet())   put(e.getKey(),e.getValue());}  }
class C{  @CheckForNull public static String colorToColorName(@Nullable Color color){  if (color == null) {    return null;  }  String colorName=colorToName(color);  if (colorName != null) {    return colorName;  }  return colorToHexString(color);}  }
class C{  public void write(OutputStream out,Map<String,String> outputProperties) throws TransformerException {  write(new Utf8Writer(out),outputProperties);}  }
class C{  public boolean isZoneBasedAccessibility(){  return zoneBasedAccessibility;}  }
class C{  private Field(final String str,final int id){  this.str=str;  this.id=id;}  }
class C{  public JavaType resolveAbstractType(DeserializationConfig config,JavaType type){  return null;}  }
class C{  protected void prepareGetRequestContext(String source) throws IOException, ODataUnmarshallingException {  prepareRequestContext(source,GET);}  }
class C{  private static double threePointsAngle(Point vertex,Point A,Point B){  double b=pointsDistance(vertex,A);  double c=pointsDistance(A,B);  double a=pointsDistance(B,vertex);  return Math.toDegrees(Math.acos((a * a + b * b - c * c) / (2 * a * b)));}  }
class C{  public LinearRegression(float[] x,float[] y){  if (x.length != y.length) {    throw new IllegalArgumentException("array lengths are not equal");  }  N=x.length;  double sumx=0.0, sumy=0.0, sumx2=0.0;  for (int i=0; i < N; i++)   sumx+=x[i];  for (int i=0; i < N; i++)   sumx2+=x[i] * x[i];  for (int i=0; i < N; i++)   sumy+=y[i];  double xbar=sumx / N;  double ybar=sumy / N;  double xxbar=0.0, yybar=0.0, xybar=0.0;  for (int i=0; i < N; i++) {    xxbar+=(x[i] - xbar) * (x[i] - xbar);    yybar+=(y[i] - ybar) * (y[i] - ybar);    xybar+=(x[i] - xbar) * (y[i] - ybar);  }  beta=xybar / xxbar;  alpha=ybar - beta * xbar;  double rss=0.0;  double ssr=0.0;  for (int i=0; i < N; i++) {    double fit=beta * x[i] + alpha;    rss+=(fit - y[i]) * (fit - y[i]);    ssr+=(fit - ybar) * (fit - ybar);  }  int degreesOfFreedom=N - 2;  R2=ssr / yybar;  svar=rss / degreesOfFreedom;  svar1=svar / xxbar;  svar0=svar / N + xbar * xbar * svar1;}  }
class C{  public static void closeMqttClientQuite(IMqttClient iMqttClient){  if (iMqttClient != null) {    try {      iMqttClient.disconnectForcibly();    } catch (    MqttException e) {      logger.info("Close Mqtt Client quite.",e);    }  }}  }
class C{  public AsyncResult QueryFirstAsync(QueryFirstRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public static double toRadians(double angdeg){  return angdeg / 180.0 * PI;}  }
class C{  private void moveClient(InetSocketAddress address){  logger.debug("Try to move a client to {}",address);  C newClient=null;  for (  InetSocketAddress availableClientAddress : availableClients.keySet()) {    if (availableClients.get(availableClientAddress).size() > 1) {      logger.debug("Address {} has {} clients, move one to {}",availableClientAddress,availableClients.get(availableClientAddress).size(),address);      try {        newClient=createNewClient(address);        removeClient(availableClients.get(availableClientAddress).remove(0));        break;      } catch (      Throwable ex) {        logger.error("moveClient: fail to create new client for {}",address);        return;      }    }  }  if (newClient == null) {    logger.debug("No client to move in {}",availableClients);    return;  }  availableClients.put(address,newClient);}  }
class C{  public boolean unscheduleJob(TriggerKey triggerKey) throws SchedulerException {  return sched.unscheduleJob(triggerKey);}  }
class C{  public static void addHintTimeoutMS(Intent toPlugin,int timeoutMS){  getHintsBundle(toPlugin,"addHintTimeoutMS").putInt(BUNDLE_KEY_HINT_TIMEOUT_MS,timeoutMS);}  }
class C{  public Zone(Name zone,String file) throws IOException {  data=new TreeMap();  if (zone == null)   throw new IllegalArgumentException("no zone name specified");  Master m=new Master(file,zone);  Record record;  origin=zone;  while ((record=m.nextRecord()) != null)   maybeAddRecord(record);  validate();}  }
class C{  private static String[] toArray(List<String> a,List<String> b){  if (a == null)   a=new ArrayList<String>();  if (b == null)   b=new ArrayList<String>();  String[] cmdline=new String[a.size() + b.size()];  int n=0;  for (  String aElem : a)   cmdline[n++]=aElem;  for (  String bElem : b)   cmdline[n++]=bElem;  return cmdline;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementnormalize2.class,args);}  }
class C{  public AnnotationDefaultAttribute(ConstPool cp,byte[] info){  super(cp,tag,info);}  }
class C{  protected boolean isMonitored(InvocationContext ctx){  return true;}  }
class C{  public static void write(int x1,int y1,Image image,int image_width,int image_height,LinkProperties properties,DataOutputStream dos) throws IOException, InterruptedException {  int[] pixels=new int[image_width * image_height];  PixelGrabber pixelgrabber=new PixelGrabber(image,0,0,image_width,image_height,pixels,0,image_width);  pixelgrabber.grabPixels();  LinkRaster.write(x1,y1,image_width,image_height,pixels,properties,dos);}  }
class C{  public void printStackTrace(){  super.printStackTrace();  if (this.encapsulatedException != null) {    System.err.println("*** Nested Exception:");    this.encapsulatedException.printStackTrace();  }}  }
class C{  public String randomPositiveWhole(Object olength){  int length=FunctionHandler.getInt(olength);  if (length == 0) {    return "";  }  StringBuilder output=new StringBuilder(length);  output.append(rnd.nextInt(8) + 1);  for (int i=0; i < length - 1; i++) {    output.append(rnd.nextInt(9));  }  return output.toString();}  }
class C{  @Override public Object clone(){  GenericEntity newEntity=new GenericEntity();  newEntity.init(this);  newEntity.setDelegator(internalDelegator);  return newEntity;}  }
class C{  private List<Set<GraphChange>> findChanges(Map<Collection<Node>,List<PossibleDConnectingPath>> paths){  List<Set<GraphChange>> pagChanges=new ArrayList<>();  Set<Map.Entry<Collection<Node>,List<PossibleDConnectingPath>>> entries=paths.entrySet();  for (  Map.Entry<Collection<Node>,List<PossibleDConnectingPath>> entry : entries) {    Collection<Node> conditions=entry.getKey();    List<PossibleDConnectingPath> dConnecting=entry.getValue();    for (    PossibleDConnectingPath possible : dConnecting) {      List<Node> possPath=possible.getPath();      Set<GraphChange> pathChanges=new HashSet<>(2 * possPath.size());      List<Node> outsidePath=new ArrayList<>(conditions.size());      for (      Node condition : conditions) {        if (!possPath.contains(condition))         outsidePath.add(condition);      }      for (int i=0; i < possPath.size() - 1; i++) {        Node current=possPath.get(i);        Node next=possPath.get(i + 1);        GraphChange gc;        gc=new GraphChange();        gc.addRemove(possible.getPag().getEdge(current,next));        pathChanges.add(gc);        if (conditions.contains(current) && i > 0) {          gc=new GraphChange();          Triple nonColider=new Triple(possPath.get(i - 1),current,next);          gc.addNonCollider(nonColider);          pathChanges.add(gc);        }        if ((!conditions.contains(current)) && i > 0) {          Triple colider=new Triple(possPath.get(i - 1),current,next);          if (possible.getPag().isUnderlineTriple(possPath.get(i - 1),current,next))           continue;          Edge edge1=possible.getPag().getEdge(colider.getX(),colider.getY());          Edge edge2=possible.getPag().getEdge(colider.getZ(),colider.getY());          if (edge1.getNode1().equals(colider.getY())) {            if (edge1.getEndpoint1().equals(Endpoint.TAIL)) {              continue;            }          } else           if (edge1.getNode2().equals(colider.getY())) {            if (edge1.getEndpoint2().equals(Endpoint.TAIL)) {              continue;            }          }          if (edge2.getNode1().equals(colider.getY())) {            if (edge2.getEndpoint1().equals(Endpoint.TAIL)) {              continue;            }          } else           if (edge2.getNode2().equals(colider.getY())) {            if (edge2.getEndpoint2().equals(Endpoint.TAIL)) {              continue;            }          }          if (outsidePath.size() == 0) {            gc=new GraphChange();            gc.addCollider(colider);            pathChanges.add(gc);            continue;          }          for (          Node outside : outsidePath) {            List<PossibleDConnectingPath> decendantPaths=new ArrayList<>();            decendantPaths=PossibleDConnectingPath.findDConnectingPaths(possible.getPag(),current,outside,new ArrayList<Node>());            if (decendantPaths.isEmpty()) {              gc=new GraphChange();              gc.addCollider(colider);              pathChanges.add(gc);              continue;            }            for (            PossibleDConnectingPath decendantPDCPath : decendantPaths) {              List<Node> decendantPath=decendantPDCPath.getPath();              boolean impliesDecendant=true;              Set<GraphChange> colideChanges=new HashSet<>();              for (int j=0; j < decendantPath.size() - 1; j++) {                Node from=decendantPath.get(j);                Node to=decendantPath.get(j + 1);                Edge currentEdge=possible.getPag().getEdge(from,to);                if (currentEdge.getEndpoint1().equals(Endpoint.ARROW)) {                  impliesDecendant=false;                  break;                }                gc=new GraphChange();                gc.addCollider(colider);                gc.addRemove(currentEdge);                colideChanges.add(gc);                gc=new GraphChange();                gc.addCollider(colider);                gc.addOrient(to,from);                colideChanges.add(gc);              }              if (impliesDecendant)               pathChanges.addAll(colideChanges);            }          }        }      }      pagChanges.add(pathChanges);    }  }  return pagChanges;}  }
class C{  @Override public boolean canSeekForward(){  return getNumberOfFrames() > 1;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.CODE_LANGS___ANONYMOUS_CODE_LANGS_11:    getAnonymous_codeLangs_1_1().clear();  getAnonymous_codeLangs_1_1().addAll((Collection<? extends Anonymous_codeLangs_1_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public void txUnlock(IgniteInternalTx tx) throws GridCacheEntryRemovedException {  removeLock(tx.xidVersion());}  }
class C{  @Override public java.lang.Iterable iterable(final IScope scope){  return listValue(scope,Types.NO_TYPE,false);}  }
class C{  private static int GetStringLength(JNIEnvironment env,int objJREF){  if (traceJNI)   VM.sysWrite("JNI called: GetStringLength  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    String str=(String)env.getJNIRef(objJREF);    return str.length();  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public static void stopAll(){  ZeroConfService.stopAll(false);}  }
class C{  public TestManagedBeanFactory(String name){  super(name);}  }
class C{  public String toString(){  return "Triangle: side1 = " + side1 + " side2 = "+ side2+ " side3 = "+ side3;}  }
class C{  private void addFlag(final List<String> args,final String argName,final boolean value){  if (value) {    args.add(argName);  }}  }
class C{  void stopAnimation(){  mHasAnimation=false;  if (mIndeterminateDrawable instanceof Animatable) {    ((Animatable)mIndeterminateDrawable).stop();    mShouldStartAnimationDrawable=false;  }  postInvalidate();}  }
class C{  protected Node export(Node n,AbstractDocument d){  super.export(n,d);  ((AbstractElement)n).initializeAttributes();  super.export(n,d);  return n;}  }
class C{  private void linkDependencies(Map<String,TimestampClass> compiledTimestampClasses,Multimap<String,String> dependecies){  for (  Map.Entry<String,TimestampClass> entry : compiledTimestampClasses.entrySet()) {    String className=entry.getKey();    TimestampClass timestampClass=entry.getValue();    Collection<String> dependencyClasses=dependecies.get(className);    timestampClass.dependencies.addAll(dependencyClasses);    for (    String dependencyClassName : timestampClass.dependencies) {      TimestampClass dependencyClass=compiled.get(dependencyClassName);      if (dependencyClass != null) {        dependencyClass.dependent.add(className);      }    }  }}  }
class C{  public static RelatedType find(String value){  return enums.find(value);}  }
class C{  private Map<TestCase,Set<TestFitnessFunction>> initializeCoverageMapFromResults(List<ExecutionResult> results){  Map<TestCase,Set<TestFitnessFunction>> testToGoals=new LinkedHashMap<>();  for (  ExecutionResult result : results) {    testToGoals.put(result.test,filterSupportedGoals(new LinkedHashSet<>(result.test.getCoveredGoals())));  }  return testToGoals;}  }
class C{  public static SnmpEngineId createEngineId(int iana,InetAddress addr){  if (addr == null)   throw new IllegalArgumentException("InetAddress is null.");  byte[] address=addr.getAddress();  byte[] engineid=new byte[5 + address.length];  engineid[0]=(byte)((iana & 0xFF000000) >> 24);  engineid[0]|=0x80;  engineid[1]=(byte)((iana & 0x00FF0000) >> 16);  engineid[2]=(byte)((iana & 0x0000FF00) >> 8);  engineid[3]=(byte)(iana & 0x000000FF);  if (address.length == 4)   engineid[4]=0x01;  if (address.length == 16)   engineid[4]=0x02;  for (int i=0; i < address.length; i++) {    engineid[i + 5]=address[i];  }  return new SnmpEngineId(engineid);}  }
class C{  @Override public int hashCode(){  return Objects.hash(group,key,value);}  }
class C{  synchronized public void updateMessage(int msgId,ContentValues values){  SQLiteDatabase db=dbHelper.getWritableDatabase();  if (db.isOpen()) {    db.update(InviteMessgeDao.TABLE_NAME,values,InviteMessgeDao.COLUMN_NAME_ID + " = ?",new String[]{String.valueOf(msgId)});  }}  }
class C{  public static double tan(double a){  return 0.0d;}  }
class C{  public static DenseVector toDenseVec(double... array){  return new DenseVector(array);}  }
class C{  public Vector2 mul(Vector2 v){  float x=vals[POS_X] + vals[COS] * v.x + -vals[SIN] * v.y;  float y=vals[POS_Y] + vals[SIN] * v.x + vals[COS] * v.y;  v.x=x;  v.y=y;  return v;}  }
class C{  private static ResourcePoolQueryHelper.QueryResult runHelperSynchronously(VerificationHost host,ResourcePoolQueryHelper helper){  ResourcePoolQueryHelper.QueryResult[] resultHolder={null};  TestContext ctx=host.testCreate(1);  helper.query(null);  host.testWait(ctx);  return resultHolder[0];}  }
class C{  @Override public void writeFullPath(final Writer w,final String path) throws IOException {  writePath(w,path,0);}  }
class C{  public DistributionSquare(int veinCount,int veinSize,int minY,int maxY){  this(minY - veinSize / 2,minY,maxY,maxY + veinSize / 2,DistributionHelpers.calculateChance(veinCount,veinSize,minY,maxY));}  }
class C{  public static Validator<CharSequence> iPv6Address(@NonNull final CharSequence errorMessage){  return new IPv6AddressValidator(errorMessage);}  }
class C{  private void insertBatch(){  if (index == 0) {    return;  }  Arrays.sort(batch,0,index);  int start=0;  if (samples.isEmpty()) {    samples.add(new SampleItem(batch[0],0,1));    start++;  }  final ListIterator<SampleItem> it=samples.listIterator();  SampleItem prev=it.next();  for (int i=start; i < index; i++) {    final double value=batch[i];    while (it.nextIndex() < samples.size() && prev.value < value) {      prev=it.next();    }    if (prev.value > value) {      it.previous();    }    final int delta=calculateDelta(it.previousIndex(),it.nextIndex());    final SampleItem next=new SampleItem(value,delta,1);    it.add(next);    prev=next;  }  index=0;}  }
class C{  @Override public void process(Map<K,V> tuple){  addTuple(tuple,denominators);}  }
class C{  @Override protected void initListeners(){}  }
class C{  public ProtocolInteractor buildProtocolSession(String fileName) throws Exception {  ProtocolInteractor session=new ProtocolSession();  addTestFile(fileName,session);  return session;}  }
class C{  public Object encode(Object raw) throws EncoderException {  if (!(raw instanceof byte[])) {    throw new EncoderException("argument not a byte array");  }  return toAsciiChars((byte[])raw);}  }
class C{  public boolean containsKey(int key){  Entry tab[]=table;  int index=(key & 0x7FFFFFFF) % tab.length;  for (Entry e=tab[index]; e != null; e=e.next) {    if (e.key == key) {      return true;    }  }  return false;}  }
class C{  public boolean retrieveFirstConnection(){  return sharedPreferences.getBoolean(application.getString(R.string.shared_prefs_first_connection),true);}  }
class C{  protected void update(TimerStatus newStatus){  if (newStatus == TimerStatus.FORWARD) {    if (Debug.debugging("timedetail")) {      Debug.output("TimerControlButtonPanel: TIMER_FORWARD");    }    backwardButton.setIcon(backwardIcon);    backwardButton.setActionCommand(TimerStatus.TIMER_BACKWARD);    forwardButton.setIcon(pauseIcon);    forwardButton.setActionCommand(TimerStatus.TIMER_STOPPED);  } else   if (newStatus == TimerStatus.BACKWARD) {    if (Debug.debugging("timedetail")) {      Debug.output("TimerControlButtonPanel: TIMER_BACKWARD");    }    forwardButton.setIcon(forwardIcon);    forwardButton.setActionCommand(TimerStatus.TIMER_FORWARD);    backwardButton.setIcon(pauseIcon);    backwardButton.setActionCommand(TimerStatus.TIMER_STOPPED);  } else   if (newStatus == TimerStatus.STOPPED) {    if (Debug.debugging("timedetail")) {      Debug.output("TimerControlButtonPanel: TIMER_STOPPED");    }    forwardButton.setIcon(forwardIcon);    forwardButton.setActionCommand(TimerStatus.TIMER_FORWARD);    backwardButton.setIcon(backwardIcon);    backwardButton.setActionCommand(TimerStatus.TIMER_BACKWARD);  }  checkClock(newStatus);}  }
class C{  Schema.Builder<?> lookup(String relPointerString,JSONObject ctx){  String absPointerString=ReferenceResolver.resolve(ls.id,relPointerString).toString();  if (ls.pointerSchemas.containsKey(absPointerString)) {    return ls.pointerSchemas.get(absPointerString);  }  boolean isExternal=!absPointerString.startsWith("#");  JSONPointer pointer=isExternal ? JSONPointer.forURL(ls.httpClient,absPointerString) : JSONPointer.forDocument(ls.rootSchemaJson,absPointerString);  ReferenceSchema.Builder refBuilder=ReferenceSchema.builder().refValue(relPointerString);  ls.pointerSchemas.put(absPointerString,refBuilder);  JSONPointer.QueryResult result=pointer.query();  JSONObject resultObject=extend(withoutRef(ctx),result.getQueryResult());  SchemaLoader childLoader=ls.initChildLoader().resolutionScope(isExternal ? withoutFragment(absPointerString) : ls.id).schemaJson(resultObject).rootSchemaJson(result.getContainingDocument()).build();  Schema referredSchema=childLoader.load().build();  refBuilder.build().setReferredSchema(referredSchema);  return refBuilder;}  }
class C{  public TcpClient(){  connector=new NioSocketConnector();  connector.setHandler(this);  ConnectFuture connFuture=connector.connect(new InetSocketAddress("localhost",TcpServer.PORT));  connFuture.awaitUninterruptibly();  session=connFuture.getSession();}  }
class C{  public static void triggerRebirth(Context context,Intent nextIntent){  Intent intent=new Intent(context,ProcessPhoenix.class);  intent.addFlags(FLAG_ACTIVITY_NEW_TASK);  intent.putExtra(KEY_RESTART_INTENT,nextIntent);  context.startActivity(intent);  if (context instanceof Activity) {    ((Activity)context).finish();  }  Runtime.getRuntime().exit(0);}  }
class C{  public Socket(){  this.impl=factory != null ? factory.createSocketImpl() : new PlainSocketImpl();  this.proxy=null;}  }
class C{  public boolean isSetVNodes(){  return EncodingUtils.testBit(__isset_bitfield,__VNODES_ISSET_ID);}  }
class C{  private FacetResult drillDown() throws IOException {  DirectoryReader indexReader=DirectoryReader.open(indexDir);  IndexSearcher searcher=new IndexSearcher(indexReader);  TaxonomyReader taxoReader=new DirectoryTaxonomyReader(taxoDir);  DrillDownQuery q=new DrillDownQuery(config);  q.add("tags","solr");  FacetsCollector fc=new FacetsCollector();  FacetsCollector.search(searcher,q,10,fc);  Facets facets=new TaxonomyFacetSumFloatAssociations("$genre",taxoReader,config,fc);  FacetResult result=facets.getTopChildren(10,"genre");  indexReader.close();  taxoReader.close();  return result;}  }
class C{  private static int gallopRight(Comparable<Object> key,Object[] a,int base,int len,int hint){  if (DEBUG)   assert len > 0 && hint >= 0 && hint < len;  int ofs=1;  int lastOfs=0;  if (key.compareTo(a[base + hint]) < 0) {    int maxOfs=hint + 1;    while (ofs < maxOfs && key.compareTo(a[base + hint - ofs]) < 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  } else {    int maxOfs=len - hint;    while (ofs < maxOfs && key.compareTo(a[base + hint + ofs]) >= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  }  if (DEBUG)   assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (key.compareTo(a[base + m]) < 0)     ofs=m; else     lastOfs=m + 1;  }  if (DEBUG)   assert lastOfs == ofs;  return ofs;}  }
class C{  private List queryByJdbc(final String query) throws ApplicationRuntimeException {  List resultlist=null;  List returnList=null;  try {    resultlist=getCurrentSession().createSQLQuery(query).list();    if (resultlist != null)     returnList=resultSetToArrayList(resultlist);  } catch (  final Exception e) {    LOGGER.error("Error occurred in EgovMasterDataCaching queryByJdbc",e);    throw new ApplicationRuntimeException("Error occurred in EgovMasterDataCaching queryByJdbc",e);  }  return returnList;}  }
class C{  public void addKdContainer(int index){  KdistanceContainer container=new KdistanceContainer(this);  this.listOfkDContainers.add(index,container);}  }
class C{  public String toString(){  return getClass().getName() + "[" + getName()+ " "+ getClassName()+ "]";}  }
class C{  public void removeScoreModule(Match match,PlayingPlayerContainer container){  PlayerContainerScore score=getScore(match,container);  if (score != null) {    scores.get(match).remove(score);  }}  }
class C{  void load(int position,boolean useCircularTransformation){  if (isDownloading(position)) {    return;  }  NoxItem noxItem=noxItems.get(position);  if ((noxItem.hasUrl() && !isBitmapReady(position)) || noxItem.hasResourceId() && !isDrawableReady(position)) {    loading[position]=true;    loadNoxItem(position,noxItem,useCircularTransformation);  }}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder="";  String outputFolder="";  String workload="random";  String vmAllocationPolicy="mad";  String vmSelectionPolicy="mu";  String parameter="2.5";  new RandomRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public Constant(){}  }
class C{  public static void load(final AbstractSQLProvider provider,final INaviView view,final List<INaviViewNode> nodes) throws CouldntLoadDataException {  Preconditions.checkNotNull(provider,"IE02516: provider argument can not be null");  Preconditions.checkNotNull(view,"IE02517: view argument can not be null");  Preconditions.checkNotNull(nodes,"IE02518: nodes argument can not be null");  final Map<Integer,INaviTextNode> commentIdToTextNode=new HashMap<Integer,INaviTextNode>();  final String query="SELECT id, comment_id, x, y, width, height, color, selected, visible " + " FROM " + CTableNames.NODES_TABLE + " JOIN "+ CTableNames.TEXT_NODES_TABLE+ " ON id = node_id "+ " WHERE view_id = "+ view.getConfiguration().getId();  try {    final PreparedStatement statement=provider.getConnection().getConnection().prepareStatement(query);    final ResultSet resultSet=statement.executeQuery();    try {      while (resultSet.next()) {        final int nodeId=resultSet.getInt("id");        Integer commentId=resultSet.getInt("comment_id");        if (resultSet.wasNull()) {          commentId=null;        }        final double xPos=resultSet.getDouble("x");        final double yPos=resultSet.getDouble("y");        final double width=resultSet.getDouble("width");        final double height=resultSet.getDouble("height");        final Color color=new Color(resultSet.getInt("color"));        final boolean selected=resultSet.getBoolean("selected");        final boolean visible=resultSet.getBoolean("visible");        final INaviTextNode textNode=new CTextNode(nodeId,xPos,yPos,width,height,color,selected,visible,new HashSet<CTag>(),null,provider);        if (commentId != null) {          commentIdToTextNode.put(commentId,textNode);        }        nodes.add(textNode);      }    }  finally {      resultSet.close();    }    if (!commentIdToTextNode.isEmpty()) {      final HashMap<Integer,ArrayList<IComment>> commentIdToComments=PostgreSQLCommentFunctions.loadMultipleCommentsById(provider,commentIdToTextNode.keySet());      for (      final Entry<Integer,ArrayList<IComment>> commentIdToComment : commentIdToComments.entrySet()) {        commentIdToTextNode.get(commentIdToComment.getKey()).initializeComment(commentIdToComment.getValue());      }    }  } catch (  final SQLException exception) {    throw new CouldntLoadDataException(exception);  }}  }
class C{  public SingleParameter(String paramId,int dimension){  this.paramId=paramId;  this.dimension=dimension;}  }
class C{  public void removeTodoPattern(TodoPattern pattern){  LOG.assertTrue(myTodoPatterns.contains(pattern));  myTodoPatterns.remove(pattern);}  }
class C{  public void GetInstance02(int mode) throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, InvalidAlgorithmParameterException {  try {    KeyPairGenerator.getInstance(null,mProv.getName());    fail("NullPointerException or KeyStoreException must be thrown");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyPairGenerator.getInstance(invalidValues[i],mProv.getName());      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  String prov=null;  for (int i=0; i < validValues.length; i++) {    String alg=validValues[i].concat(post);    try {      KeyPairGenerator.getInstance(alg,prov);      fail("IllegalArgumentException must be thrown when provider is null (algorithm: ".concat(alg).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  for (int i=0; i < validValues.length; i++) {    String alg=validValues[i].concat(post);    for (int j=1; j < invalidValues.length; j++) {      try {        KeyPairGenerator.getInstance(alg,invalidValues[j]);        fail("NoSuchProviderException must be thrown (algorithm: ".concat(alg).concat(" provider: ").concat(invalidValues[j]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }  KeyPairGenerator kpG;  for (int i=0; i < validValues.length; i++) {    String alg=validValues[i].concat(post);    kpG=KeyPairGenerator.getInstance(alg,mProv.getName());    assertEquals("Incorrect algorithm",kpG.getAlgorithm().toUpperCase(),(mode <= 2 ? resAlg : alg).toUpperCase());    assertEquals("Incorrect provider",kpG.getProvider().getName(),mProv.getName());    checkResult(kpG,mode);  }}  }
class C{  public boolean visit(IResourceDelta delta) throws CoreException {  IResource resource=delta.getResource();  if ((resource instanceof IProject)) {    iprojects.add((IProject)resource);    return false;  }  return true;}  }
class C{  @RequestMapping(value="/property/createProperty",method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON,produces=MediaType.APPLICATION_JSON) public String createProperty(@RequestBody String createPropertyDetails) throws IOException, ParseException {  String responseJson=new String();  ApplicationThreadLocals.setUserId(2L);  CreatePropertyDetails createPropDetails=(CreatePropertyDetails)getObjectFromJSONRequest(createPropertyDetails,CreatePropertyDetails.class);  ErrorDetails errorDetails=validationUtil.validateCreateRequest(createPropDetails,PropertyTaxConstants.PROPERTY_MODE_CREATE);  if (errorDetails != null) {    responseJson=JsonConvertor.convert(errorDetails);  } else {    AssessmentsDetails assessmentsDetails=createPropDetails.getAssessmentDetails();    PropertyAddressDetails propAddressDetails=createPropDetails.getPropertyAddressDetails();    Boolean isCorrAddrDiff=propAddressDetails.getIsCorrAddrDiff();    CorrespondenceAddressDetails corrAddressDetails=propAddressDetails.getCorrAddressDetails();    String corrAddr1=StringUtils.EMPTY;    String corrAddr2=StringUtils.EMPTY;    String corrPinCode=StringUtils.EMPTY;    if (corrAddressDetails != null) {      corrAddr1=corrAddressDetails.getCorrAddr1();      corrAddr2=corrAddressDetails.getCorrAddr2();      corrPinCode=corrAddressDetails.getCorrPinCode();    }    List<Document> documents=null;    NewPropertyDetails newPropertyDetails=null;    if (createPropDetails.getPropertyTypeMasterCode().equalsIgnoreCase(PropertyTaxConstants.OWNERSHIP_TYPE_VAC_LAND)) {      VacantLandDetails vacantLandDetails=createPropDetails.getVacantLandDetails();      SurroundingBoundaryDetails surroundingBoundaryDetails=createPropDetails.getSurroundingBoundaryDetails();      newPropertyDetails=propertyExternalService.createNewProperty(createPropDetails.getPropertyTypeMasterCode(),createPropDetails.getCategoryCode(),null,createPropDetails.getApartmentCmplxCode(),createPropDetails.getOwnerDetails(),assessmentsDetails.getMutationReasonCode(),null,false,null,assessmentsDetails.getRegdDocNo(),assessmentsDetails.getRegdDocDate(),propAddressDetails.getLocalityNum(),propAddressDetails.getBlockNum(),propAddressDetails.getZoneNum(),propAddressDetails.getStreetNum(),propAddressDetails.getElectionWardNum(),propAddressDetails.getDoorNo(),propAddressDetails.getEnumerationBlockCode(),propAddressDetails.getPinCode(),isCorrAddrDiff,corrAddr1,corrAddr2,corrPinCode,false,false,false,false,false,false,false,null,null,null,null,Collections.emptyList(),vacantLandDetails.getSurveyNumber(),vacantLandDetails.getPattaNumber(),vacantLandDetails.getVacantLandArea(),vacantLandDetails.getMarketValue(),vacantLandDetails.getCurrentCapitalValue(),vacantLandDetails.getEffectiveDate(),surroundingBoundaryDetails.getNorthBoundary(),surroundingBoundaryDetails.getSouthBoundary(),surroundingBoundaryDetails.getEastBoundary(),surroundingBoundaryDetails.getWestBoundary(),assessmentsDetails.getParentPropertyAssessmentNo(),documents);    } else {      AmenitiesDetails amenitiesDetails=createPropDetails.getAmenitiesDetails();      ConstructionTypeDetails constructionTypeDetails=createPropDetails.getConstructionTypeDetails();      List<FloorDetails> floorDetailsList=createPropDetails.getFloorDetails();      newPropertyDetails=propertyExternalService.createNewProperty(createPropDetails.getPropertyTypeMasterCode(),createPropDetails.getCategoryCode(),null,createPropDetails.getApartmentCmplxCode(),createPropDetails.getOwnerDetails(),assessmentsDetails.getMutationReasonCode(),assessmentsDetails.getExtentOfSite(),assessmentsDetails.getIsExtentAppurtenantLand(),assessmentsDetails.getOccupancyCertificationNo(),assessmentsDetails.getRegdDocNo(),assessmentsDetails.getRegdDocDate(),propAddressDetails.getLocalityNum(),propAddressDetails.getBlockNum(),propAddressDetails.getZoneNum(),propAddressDetails.getStreetNum(),propAddressDetails.getElectionWardNum(),propAddressDetails.getDoorNo(),propAddressDetails.getEnumerationBlockCode(),propAddressDetails.getPinCode(),isCorrAddrDiff,corrAddr1,corrAddr2,corrPinCode,amenitiesDetails.hasLift(),amenitiesDetails.hasToilet(),amenitiesDetails.hasWaterTap(),amenitiesDetails.hasElectricity(),amenitiesDetails.hasAttachedBathroom(),amenitiesDetails.hasWaterHarvesting(),amenitiesDetails.hasCableConnection(),constructionTypeDetails.getFloorTypeId(),constructionTypeDetails.getRoofTypeId(),constructionTypeDetails.getWallTypeId(),constructionTypeDetails.getWoodTypeId(),floorDetailsList,null,null,null,null,null,floorDetailsList.get(0).getOccupancyDate(),null,null,null,null,assessmentsDetails.getParentPropertyAssessmentNo(),documents);    }    responseJson=JsonConvertor.convert(newPropertyDetails);  }  return responseJson;}  }
class C{  public static ChainingXmlMemoryParser parseXml(Document document){  return new ChainingXmlMemoryParser(document);}  }
class C{  public void addToBucketIndexes(Region r,Index index){synchronized (this.bucketIndexes) {    List<Index> indexes=this.bucketIndexes.get(r);    if (indexes == null) {      indexes=new ArrayList<Index>();    }    indexes.add(index);    bucketIndexes.put(r,indexes);  }}  }
class C{  private static String findCallersClassName(){  Iterator<StackTraceElement> elements=Iterators.forArray(Thread.currentThread().getStackTrace());  while (elements.hasNext()) {    StackTraceElement next=elements.next();    if (PIPELINE_OPTIONS_FACTORY_CLASSES.contains(next.getClassName())) {      break;    }  }  while (elements.hasNext()) {    StackTraceElement next=elements.next();    if (!PIPELINE_OPTIONS_FACTORY_CLASSES.contains(next.getClassName())) {      try {        return Class.forName(next.getClassName()).getSimpleName();      } catch (      ClassNotFoundException e) {        break;      }    }  }  return "unknown";}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private static int countRunAndMakeAscending(Object[] a,int lo,int hi){  assert lo < hi;  int runHi=lo + 1;  if (runHi == hi)   return 1;  if (((Comparable)a[runHi++]).compareTo(a[lo]) < 0) {    while (runHi < hi && ((Comparable)a[runHi]).compareTo(a[runHi - 1]) < 0)     runHi++;    reverseRange(a,lo,runHi);  } else {    while (runHi < hi && ((Comparable)a[runHi]).compareTo(a[runHi - 1]) >= 0)     runHi++;  }  return runHi - lo;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public R addParams(String key,InputStream stream){  addParams(key,stream,null);  return (R)this;}  }
class C{  @Pure public TypeReference[] parseForParameterTypes(ClassLoader cl){  if (VM.VerifyAssertions) {    VM._assert(val.length > 0);    VM._assert(val[0] == '(',"Method descriptors start with `(`");  }  TypeReferenceVector sigs=new TypeReferenceVector();  int i=1;  while (true) {    if (VM.VerifyAssertions) {      VM._assert(i < val.length,"Method descriptor missing closing `)`");    }switch (val[i++]) {case VoidTypeCode:      sigs.addElement(TypeReference.Void);    continue;case BooleanTypeCode:  sigs.addElement(TypeReference.Boolean);continue;case ByteTypeCode:sigs.addElement(TypeReference.Byte);continue;case ShortTypeCode:sigs.addElement(TypeReference.Short);continue;case IntTypeCode:sigs.addElement(TypeReference.Int);continue;case LongTypeCode:sigs.addElement(TypeReference.Long);continue;case FloatTypeCode:sigs.addElement(TypeReference.Float);continue;case DoubleTypeCode:sigs.addElement(TypeReference.Double);continue;case CharTypeCode:sigs.addElement(TypeReference.Char);continue;case ClassTypeCode:{int off=i - 1;while (val[i++] != ';') {if (VM.VerifyAssertions) {VM._assert(i < val.length,"class descriptor missing a final ';'");}}sigs.addElement(TypeReference.findOrCreate(cl,findOrCreate(val,off,i - off,toUnicodeStringInternal())));continue;}case ArrayTypeCode:{int off=i - 1;while (val[i] == ArrayTypeCode) {if (VM.VerifyAssertions) {VM._assert(i < val.length,"malformed array descriptor");}++i;}if (val[i++] == ClassTypeCode) while (val[i++] != ';') ;sigs.addElement(TypeReference.findOrCreate(cl,findOrCreate(val,off,i - off,toUnicodeStringInternal())));continue;}case (byte)')':return sigs.finish();default :if (VM.VerifyAssertions) {String msg="The class descriptor \"" + this + "\" contains the illegal"+ " character '"+ ((char)val[i])+ "'";VM._assert(VM.NOT_REACHED,msg);}}}}  }
class C{  public void delete(int startIndex,int endIndex){  if (isEditable() && isEnabled()) {    try {      int p0=Math.min(startIndex,endIndex);      int p1=Math.max(startIndex,endIndex);      if (p0 != p1) {        Document doc=getDocument();        doc.remove(p0,p1 - p0);      }    } catch (    BadLocationException e) {    }  } else {    UIManager.getLookAndFeel().provideErrorFeedback(JTextComponent.this);  }}  }
class C{  public void loadThis(){  if ((access & Opcodes.ACC_STATIC) != 0) {    throw new IllegalStateException("no 'this' pointer within static method");  }  mv.visitVarInsn(Opcodes.ALOAD,0);}  }
class C{  public static String format(Date date){  Calendar c=new GregorianCalendar(TimeZone.getTimeZone("UTC"));  StringBuffer sb=new StringBuffer();  c.setTime(date);  sb.append(w4.format(c.get(Calendar.YEAR)));  sb.append(w2.format(c.get(Calendar.MONTH) + 1));  sb.append(w2.format(c.get(Calendar.DAY_OF_MONTH)));  sb.append(w2.format(c.get(Calendar.HOUR_OF_DAY)));  sb.append(w2.format(c.get(Calendar.MINUTE)));  sb.append(w2.format(c.get(Calendar.SECOND)));  return sb.toString();}  }
class C{  public BasicEditorPaneUI(){  super();}  }
class C{  public boolean canBeSubmitted(Jobs jobs){  final StepExecutionState state=getState();  if (StepExecutionState.NEW_STEP_INSTANCE == state || (StepExecutionState.STEP_EXECUTION_FAILED == state && this.getExecutions().size() < this.getStep(jobs).getRetries())) {    if (dependsUpon != null) {      for (      StepInstance dependency : dependsUpon) {        if (dependency.getState() != StepExecutionState.STEP_EXECUTION_SUCCESSFUL) {          LOGGER.debug("can be submitted dependency: " + dependency.getStepId() + " id: "+ dependency.getId()+ " state: "+ dependency.getState());          return false;        }      }    }    return true;  }  return false;}  }
class C{  public void populateConnectionByIvrZone(Map<String,Set<String>> routedEndpoints){  List<IvrZone> ivrZones=this.showIvrZones(false);  for (  IvrZone ivrZone : ivrZones) {    for (    IvrZoneMember zoneMember : ivrZone.getMembers()) {      Integer vsanId=zoneMember.getVsanId();      Map<Integer,String> idWwnMap=getVsanWwns(vsanId);      String fabricWwn=idWwnMap.get(vsanId);      if (NullColumnValueGetter.isNullValue(fabricWwn)) {        continue;      }      Set<String> netRoutedEndpoints=routedEndpoints.get(fabricWwn.toUpperCase());      if (netRoutedEndpoints == null) {        netRoutedEndpoints=new HashSet<String>();        routedEndpoints.put(fabricWwn.toUpperCase(),netRoutedEndpoints);      }      Set<String> connectedPwwns=this.getOtherMemberPwwn(ivrZone.getMembers(),zoneMember.getPwwn());      netRoutedEndpoints.addAll(connectedPwwns);    }  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_MULTIPLE_IS_A1__EXTENDS_NAME_1:    setExtendsName_1(EXTENDS_NAME_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public HelpAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(KeyEvent.VK_F1,0));  putValue(LONG_DESCRIPTION,res.getString("HelpAction.statusbar"));  putValue(NAME,res.getString("HelpAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("HelpAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("HelpAction.image")))));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  CharacterData entText;  EntityReference entReference;  Node appendedNode;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entReference=doc.createEntityReference("ent3");  assertNotNull("createdEntRefNotNull",entReference);  appendedNode=genderNode.appendChild(entReference);  entText=(CharacterData)entReference.getFirstChild();  assertNotNull("entTextNotNull",entText);{    boolean success=false;    try {      entText.replaceData(1,3,"newArg");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  protected void checkOpen(){  if (!open)   throw new IllegalStateException("bytes not open");}  }
class C{  public final boolean isDouble(){  return mCurrentToken.mType == TokenType.TOKEN_DOUBLE || mCurrentToken.mType == TokenType.TOKEN_INT;}  }
class C{  private boolean isItemBelowOtherPlayer(final Player player,final Entity entity){  final List<Player> players=player.getZone().getPlayers();  for (  final Player otherPlayer : players) {    if (player.equals(otherPlayer)) {      continue;    }    if ((entity instanceof Item) && player.getName().equals(((Item)entity).getBoundTo())) {      return false;    }    if (otherPlayer.getArea().intersects(entity.getArea())) {      player.sendPrivateText("You cannot take items which are below other players.");      return true;    }  }  return false;}  }
class C{  public org.oscm.example.client.SessionServiceStub.DeleteServiceSessionResponseE deleteServiceSession(org.oscm.example.client.SessionServiceStub.DeleteServiceSessionE deleteServiceSession4) throws java.rmi.RemoteException {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[2].getName());    _operationClient.getOptions().setAction("http://oscm.org/SessionService/deleteServiceSessionRequest");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),deleteServiceSession4,optimizeContent(new javax.xml.namespace.QName("http://oscm.org","deleteServiceSession")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.oscm.example.client.SessionServiceStub.DeleteServiceSessionResponseE.class,getEnvelopeNamespaces(_returnEnv));    return (org.oscm.example.client.SessionServiceStub.DeleteServiceSessionResponseE)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  public void addError(String msg,RefactoringStatusContext context){  fEntries.add(new RefactoringStatusEntry(RefactoringStatus.ERROR,msg,context));  fSeverity=Math.max(fSeverity,ERROR);}  }
class C{  private long waitForFileSavedAndReturnLength(String path){  return getLength(path);}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiListUI();  return MultiLookAndFeel.createUIs(mui,((MultiListUI)mui).uis,a);}  }
class C{  public Awareness awareness(){  return awareness;}  }
class C{  public RtcpPacket handlePacket(Packet p){  stats.numRtcpPkts++;  stats.numRtcpBytes+=p.length;  RtcpPacket result;  try {    result=parseRtcpPacket(p);  } catch (  Exception e) {    stats.numBadRtcpPkts++;    return null;  }  return result;}  }
class C{  protected String engineGetURI(){  return implementedTransformURI;}  }
class C{  public Builder addPlugin(Class<? extends Plugin> pluginClass){  pluginClasses.add(pluginClass);  return this;}  }
class C{  @Override public boolean ownUpdatesAreVisible(int type){  debugCodeCall("ownUpdatesAreVisible",type);  return true;}  }
class C{  @NotNull @ObjectiveCName("signUpCommandWithName:WithSex:withAvatar:") public Command<AuthState> signUp(String name,Sex sex,String avatarPath){  return modules.getAuthModule().signUp(name,ApiSex.UNKNOWN,avatarPath);}  }
class C{  public void tabClosureCancelled(long time,int id){  final boolean selected=TabModelUtils.getCurrentTabId(mModel) == id;  tabCreated(time,id,Tab.INVALID_TAB_ID,selected);}  }
class C{  public boolean canView(Properties ctx,String TableLevel){  String userLevel=getUserLevel();  boolean retValue=true;  if (X_AD_Table.ACCESSLEVEL_All.equals(TableLevel))   retValue=true; else   if (X_AD_Table.ACCESSLEVEL_SystemOnly.equals(TableLevel) && userLevel.charAt(0) != 'S')   retValue=false; else   if (X_AD_Table.ACCESSLEVEL_ClientOnly.equals(TableLevel) && userLevel.charAt(1) != 'C')   retValue=false; else   if (X_AD_Table.ACCESSLEVEL_Organization.equals(TableLevel) && userLevel.charAt(2) != 'O')   retValue=false; else   if (X_AD_Table.ACCESSLEVEL_ClientPlusOrganization.equals(TableLevel) && (!(userLevel.charAt(1) == 'C' || userLevel.charAt(2) == 'O')))   retValue=false; else   if (X_AD_Table.ACCESSLEVEL_SystemPlusClient.equals(TableLevel) && (!(userLevel.charAt(0) == 'S' || userLevel.charAt(1) == 'C')))   retValue=false;  if (retValue)   return retValue;  log.saveWarning("AccessTableNoView","Required=" + TableLevel + "("+ getTableLevelString(Env.getAD_Language(ctx),TableLevel)+ ") != UserLevel="+ userLevel);  log.info(toString());  return retValue;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private void randomizeRates(){  for (int i=0; i < treeModel.getNodeCount(); i++) {    if (!treeModel.isRoot(treeModel.getNode(i))) {      double r=MathUtils.nextDouble();      rateCategoryQuantiles.setNodeValue(treeModel,treeModel.getNode(i),r);    }  }  updateRates=false;}  }
class C{  public Dimension maximumLayoutSize(Container target){  return new Dimension(Integer.MAX_VALUE,Integer.MAX_VALUE);}  }
class C{  public Lucene62Codec(){  this(Mode.BEST_SPEED);}  }
class C{  public void tagPlaceObject(int charId,int depth,Matrix matrix,AlphaTransform cxform) throws IOException {  if (tags != null) {    tags.tagPlaceObject(charId,depth,matrix,cxform);  }}  }
class C{  @Override protected void translateCore(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions){  final OperandSize dw=OperandSize.DWORD;  final OperandSize wd=OperandSize.WORD;  final OperandSize bt=OperandSize.BYTE;  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  final IOperandTreeNode registerOperand1=instruction.getOperands().get(0).getRootNode().getChildren().get(0).getChildren().get(0).getChildren().get(0);  final IOperandTreeNode registerOperand2=instruction.getOperands().get(0).getRootNode().getChildren().get(0).getChildren().get(0).getChildren().get(1);  final String firstRegister=registerOperand1.getValue();  final String secondRegister=registerOperand2.getValue();  final String memoryAddress=environment.getNextVariableString();  final String halfword=environment.getNextVariableString();  final String twoTimesHalfword=environment.getNextVariableString();  final String jumpTarget=environment.getNextVariableString();  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,firstRegister,dw,secondRegister,dw,memoryAddress));  instructions.add(ReilHelpers.createLdm(baseOffset++,dw,memoryAddress,bt,halfword));  instructions.add(ReilHelpers.createMul(baseOffset++,bt,halfword,wd,String.valueOf(2),dw,twoTimesHalfword));  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,"PC",dw,twoTimesHalfword,dw,jumpTarget));  instructions.add(ReilHelpers.createJcc(baseOffset++,bt,String.valueOf(1),dw,jumpTarget));}  }
class C{  public void cleanup(){  diffusers.cleanup();}  }
class C{  @Override protected boolean mergeItemStack(ItemStack aStack,int aStartIndex,int aSlotCount,boolean par4){  boolean var5=false;  int var6=aStartIndex;  mTileEntity.markDirty();  if (par4) {    var6=aSlotCount - 1;  }  Slot var7;  ItemStack var8;  if (aStack.isStackable()) {    while (aStack.stackSize > 0 && (!par4 && var6 < aSlotCount || par4 && var6 >= aStartIndex)) {      var7=(Slot)this.inventorySlots.get(var6);      var8=var7.getStack();      if (!(var7 instanceof GT_Slot_Holo) && !(var7 instanceof GT_Slot_Output) && var8 != null && var8.getItem() == aStack.getItem() && (!aStack.getHasSubtypes() || aStack.getItemDamage() == var8.getItemDamage()) && ItemStack.areItemStackTagsEqual(aStack,var8)) {        int var9=var8.stackSize + aStack.stackSize;        if (var9 <= aStack.getMaxStackSize()) {          aStack.stackSize=0;          var8.stackSize=var9;          var7.onSlotChanged();          var5=true;        } else         if (var8.stackSize < aStack.getMaxStackSize()) {          aStack.stackSize-=aStack.getMaxStackSize() - var8.stackSize;          var8.stackSize=aStack.getMaxStackSize();          var7.onSlotChanged();          var5=true;        }      }      if (par4) {        --var6;      } else {        ++var6;      }    }  }  if (aStack.stackSize > 0) {    if (par4) {      var6=aSlotCount - 1;    } else {      var6=aStartIndex;    }    while (!par4 && var6 < aSlotCount || par4 && var6 >= aStartIndex) {      var7=(Slot)this.inventorySlots.get(var6);      var8=var7.getStack();      if (var8 == null) {        var7.putStack(GT_Utility.copy(aStack));        var7.onSlotChanged();        aStack.stackSize=0;        var5=true;        break;      }      if (par4) {        --var6;      } else {        ++var6;      }    }  }  return var5;}  }
class C{  BasicBlock(int startval,int endval,int blockNumber){  start=startval;  end=endval;  this.blockNumber=blockNumber;  restPredecessors=new short[STARTPREDSIZE];}  }
class C{  private boolean addDescription(Utterance utterance,AccessibilityNodeInfoCompat announcedNode,AccessibilityEvent event,AccessibilityNodeInfoCompat source){  utterance.addSpokenFlag(FeedbackItem.FLAG_DURING_RECO);  final CharSequence treeDescription=mNodeProcessor.getDescriptionForTree(announcedNode,event,source);  if (!TextUtils.isEmpty(treeDescription)) {    utterance.addSpoken(treeDescription);    return true;  }  final CharSequence eventDescription=AccessibilityEventUtils.getEventTextOrDescription(event);  if (!TextUtils.isEmpty(eventDescription)) {    utterance.addSpoken(eventDescription);    return true;  }  utterance.addSpoken(DEFAULT_DESCRIPTION);  return false;}  }
class C{  static public void main(String args[]){  ArgParser ap=new ArgParser("Main");  String propArgs=null;  ap.add("properties","A resource, file path or URL to properties file\n Ex: http://myhost.com/xyz.props or file:/myhome/abc.pro\n See Java Documentation for java.net.URL class for more details",1);  ap.parse(args);  String[] arg=ap.getArgValues("properties");  if (arg != null) {    propArgs=arg[0];  }  Main.create(propArgs);}  }
class C{  public static final HashMap readMapXml(InputStream in) throws XmlPullParserException, java.io.IOException {  XmlPullParser parser=Xml.newPullParser();  parser.setInput(in,null);  return (HashMap)readValueXml(parser,new String[1]);}  }
class C{  private String checkRegistrar(String registrarName,boolean summarize){  HistoryEntryStats historyEntryStats=new HistoryEntryStats().recordRegistrarHistory(registrarName);  List<String> failureMessages=historyEntryStats.findFailures();  String passedFraction=String.format("%2d/%2d",StatType.NUM_REQUIREMENTS - failureMessages.size(),StatType.NUM_REQUIREMENTS);  String status=failureMessages.isEmpty() ? "PASS" : "FAIL";  return summarize ? String.format("Num actions: %4d - Reqs passed: %s - Overall: %s",historyEntryStats.statCounts.size(),passedFraction,status) : String.format("%s\n%s\nRequirements passed: %s\nOverall OT&E status: %s\n",historyEntryStats,Joiner.on('\n').join(failureMessages),passedFraction,status);}  }
class C{  public ProtocolException(final boolean bye_){  bye=bye_;}  }
class C{  public double evaluateClustering(Database db,Relation<O> rel,DistanceQuery<O> dq,Clustering<?> c){  List<? extends Cluster<?>> clusters=c.getAllClusters();  MeanVariance msil=new MeanVariance();  int ignorednoise=0;  for (  Cluster<?> cluster : clusters) {    if (cluster.size() <= 1 || cluster.isNoise()) {switch (noiseOption) {case IGNORE_NOISE:        ignorednoise+=cluster.size();      continue;case TREAT_NOISE_AS_SINGLETONS:    msil.put(0.,cluster.size());  continue;case MERGE_NOISE:break;}}ArrayDBIDs ids=DBIDUtil.ensureArray(cluster.getIDs());double[] as=new double[ids.size()];DBIDArrayIter it1=ids.iter(), it2=ids.iter();for (it1.seek(0); it1.valid(); it1.advance()) {double a=as[it1.getOffset()];for (it2.seek(it1.getOffset() + 1); it2.valid(); it2.advance()) {final double dist=dq.distance(it1,it2);a+=dist;as[it2.getOffset()]+=dist;}a/=(ids.size() - 1);double b=Double.POSITIVE_INFINITY;for (Cluster<?> ocluster : clusters) {if (ocluster == cluster) {continue;}if (ocluster.size() <= 1 || ocluster.isNoise()) {switch (noiseOption) {case IGNORE_NOISE:  continue;case TREAT_NOISE_AS_SINGLETONS:for (DBIDIter it3=ocluster.getIDs().iter(); it3.valid(); it3.advance()) {  final double dist=dq.distance(it1,it3);  b=dist < b ? dist : b;}continue;case MERGE_NOISE:break;}}final DBIDs oids=ocluster.getIDs();double btmp=0.;for (DBIDIter it3=oids.iter(); it3.valid(); it3.advance()) {btmp+=dq.distance(it1,it3);}btmp/=oids.size();b=btmp < b ? btmp : b;}b=b < Double.POSITIVE_INFINITY ? b : a;msil.put((b - a) / (b > a ? b : a));}}double penalty=1.;if (penalize && ignorednoise > 0) {penalty=(rel.size() - ignorednoise) / (double)rel.size();}final double meansil=penalty * msil.getMean();final double stdsil=penalty * msil.getSampleStddev();if (LOG.isStatistics()) {LOG.statistics(new StringStatistic(key + ".silhouette.noise-handling",noiseOption.toString()));if (ignorednoise > 0) {LOG.statistics(new LongStatistic(key + ".silhouette.noise",ignorednoise));}LOG.statistics(new DoubleStatistic(key + ".silhouette.mean",meansil));LOG.statistics(new DoubleStatistic(key + ".silhouette.stddev",stdsil));}EvaluationResult ev=EvaluationResult.findOrCreate(db.getHierarchy(),c,"Internal Clustering Evaluation","internal evaluation");MeasurementGroup g=ev.findOrCreateGroup("Distance-based Evaluation");g.addMeasure("Silhouette +-" + FormatUtil.NF2.format(stdsil),meansil,-1.,1.,0.,false);db.getHierarchy().resultChanged(ev);return meansil;}  }
class C{  public MyGraph(V[] vertices,int[][] edges){  super(vertices,edges);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MRfQResponse[");  sb.append(get_ID()).append(",Complete=").append(isComplete()).append(",Winner=").append(isSelectedWinner()).append("]");  return sb.toString();}  }
class C{  public DateTimeParseException(String message,CharSequence parsedData,int errorIndex){  super(message);  this.parsedString=parsedData.toString();  this.errorIndex=errorIndex;}  }
class C{  public NegativeArraySizeException(@Nullable String s){  super(s);}  }
class C{  public FormUploadException(String msg,Throwable cause){  super(msg);  this.cause=cause;}  }
class C{  public static synchronized void startDiscoveryService(InetAddress address,int port,String instanceName,String url) throws IOException, JdpException {  int ttl=getInteger(System.getProperty("com.sun.management.jdp.ttl"),1,"Invalid jdp packet ttl");  int pause=getInteger(System.getProperty("com.sun.management.jdp.pause"),5,"Invalid jdp pause");  pause=pause * 1000;  InetAddress sourceAddress=getInetAddress(System.getProperty("com.sun.management.jdp.source_addr"),null,"Invalid source address provided");  UUID id=UUID.randomUUID();  JdpJmxPacket packet=new JdpJmxPacket(id,url);  String javaCommand=System.getProperty("sun.java.command");  if (javaCommand != null) {    String[] arr=javaCommand.split(" ",2);    packet.setMainClass(arr[0]);  }  packet.setInstanceName(instanceName);  String rmiHostname=System.getProperty("java.rmi.server.hostname");  packet.setRmiHostname(rmiHostname);  packet.setBroadcastInterval(new Integer(pause).toString());  Integer pid=getProcessId();  if (pid != null) {    packet.setProcessId(pid.toString());  }  JdpBroadcaster bcast=new JdpBroadcaster(address,sourceAddress,port,ttl);  stopDiscoveryService();  controller=new JDPControllerRunner(bcast,packet,pause);  Thread t=new Thread(controller,"JDP broadcaster");  t.setDaemon(true);  t.start();}  }
class C{  public static SocksProxyServer newUsernamePasswordAuthenticationServer(User... users){  return newUsernamePasswordAuthenticationServer(DEFAULT_PORT,users);}  }
class C{  public void logWarnings(Context cx){  if (ContextStatics.useSanityStyleErrors || ContextStatics.useSimpleLogWarnings) {    simpleLogWarnings(cx,false);  } else {    StringBuilder out=new StringBuilder();    out.append(newline).append("Warning Report:").append(newline);    out.append("---------------").append(newline).append(newline);    for (    Integer code : pWarnings.keySet()) {      ObjectList<WarningRecord> warnings=pWarnings.get(code);      out.append("[Coach] Warning #").append(code).append(": ").append(warningConstantsMap.get(code)).append(newline);      out.append("-------------------------------------------------------------------------").append(newline);      for (      WarningRecord pRec : warnings) {        createWarning(pRec,out,code);        out.append(newline);      }      out.append("-------------------------------------------------------------------------").append(newline).append(newline);    }    if (pWarnings.keySet().size() > 0) {      if (cx.getHandler() != null) {        cx.getHandler().warning("",-1,-1,out.toString(),"");      } else {        System.err.println(out.toString());      }      if (output_to_file) {        BufferedOutputStream warningOut=null;        try {          int dotPos=scriptName.indexOf('.');          if (dotPos == -1)           dotPos=scriptName.length();          String outName=scriptName.substring(0,dotPos) + "_warnings.txt";          warningOut=new BufferedOutputStream(new FileOutputStream(new File(outName)));          warningOut.write(out.toString().getBytes());          warningOut.flush();        } catch (        IOException ex) {          ex.printStackTrace();        } finally {          if (warningOut != null) {            try {              warningOut.close();            } catch (            IOException ex) {            }          }        }      }    }  }}  }
class C{  public void incubate(ByteBuffer buf){synchronized (queue) {    queue.incubate(buf);  }}  }
class C{  private void cleanup(){  while (!buffer.isEmpty()) {    ReferenceCountUtil.release(buffer.remove());  }}  }
class C{  public void save(){  pullRequest.endMerge();  pullRequest.update();}  }
class C{  @Override protected void onStart(){  super.onStart();  Log.d(TAG,"onStart() - the activity is about to become visible");}  }
class C{  private void configureAnnotationModel(final DocumentHandle documentHandle){  final AnnotationModel annotationModel=configuration.getAnnotationModel();  if (annotationModel == null) {    return;  }  if (textEditor instanceof HasAnnotationRendering) {    ((HasAnnotationRendering)textEditor).configure(annotationModel,documentHandle);  }  annotationModel.setDocumentHandle(documentHandle);  documentHandle.getDocEventBus().addHandler(DocumentChangeEvent.TYPE,annotationModel);  documentHandle.getDocEventBus().addHandler(QueryAnnotationsEvent.TYPE,annotationModel);}  }
class C{  @Override protected void extendElement(Element e){  if (adapter.getSystemConnectionMemo() != null) {    e.setAttribute("transmitPrefix",((JMRIClientSystemConnectionMemo)adapter.getSystemConnectionMemo()).getTransmitPrefix());  }}  }
class C{  public static void validateVPlexClusterExport(DbClient dbClient,URI srcVarray,URI haVarray,List<URI> initiatorURIs,Map<URI,List<URI>> varrayToInitiators){  if (srcVarray == null && haVarray == null) {    return;  }  Set<String> unconnectedHostNames=new HashSet<>();  List<Initiator> initiators=dbClient.queryObject(Initiator.class,initiatorURIs);  Map<URI,List<Initiator>> hostToInitiators=BlockStorageScheduler.getInitiatorsByHostMap(initiators);  List<URI> srcVarrayInitiators=new ArrayList<>();  if (srcVarray != null && varrayToInitiators.get(srcVarray) != null) {    srcVarrayInitiators=varrayToInitiators.get(srcVarray);  }  List<URI> haVarrayInitiators=new ArrayList<>();  if (haVarray != null && varrayToInitiators.get(haVarray) != null) {    haVarrayInitiators=varrayToInitiators.get(haVarray);  }  int connectedHostCount=0;  for (  List<Initiator> hostInitiators : hostToInitiators.values()) {    boolean connected=false;    String hostName="unknown-host";    for (    Initiator initiator : hostInitiators) {      hostName=getInitiatorHostResourceName(initiator);      if (srcVarrayInitiators.contains(initiator.getId()) || haVarrayInitiators.contains(initiator.getId())) {        connected=true;        break;      }    }    if (!connected) {      unconnectedHostNames.add(hostName);    } else {      connectedHostCount++;    }  }  String whichVarray=(srcVarray == null ? "high availability" : (haVarray == null ? "source" : "source or high availability"));  if (!unconnectedHostNames.isEmpty()) {    _log.info(String.format("The following initiators are not connected to the %s varrays: %s",whichVarray,unconnectedHostNames.toString()));  }  if (srcVarray != null && haVarray != null) {    if (!unconnectedHostNames.isEmpty()) {      throw VPlexApiException.exceptions.exportCreateAllHostsNotConnected(unconnectedHostNames.toString());    }  } else   if (connectedHostCount == 0) {    throw VPlexApiException.exceptions.exportCreateNoHostsConnected(whichVarray,unconnectedHostNames.toString());  }}  }
class C{  private void parseErrorExpected(String expected) throws ParseException {  if (tokenizer.ttype == StreamTokenizer.TT_NUMBER)   Assert.shouldNeverReachHere("Unexpected NUMBER token");  if (tokenizer.ttype == StreamTokenizer.TT_EOL)   Assert.shouldNeverReachHere("Unexpected EOL token");  String tokenStr=tokenString();  parseErrorWithLine("Expected " + expected + " but found "+ tokenStr);}  }
class C{  public void projectionChanged(ProjectionEvent e){  Projection newProj=e.getProjection();  if (logger.isLoggable(Level.FINE)) {    logger.fine(newProj != null ? newProj.toString() : "null");  }  if (newProj != null && (projection == null || (!projection.equals(newProj)))) {    setProjection((Projection)newProj.makeClone());    Object source=e.getSource();    if (source instanceof Component) {      projComponent=(Component)source;    }  }}  }
class C{  public Option(int number){  this.number=number;  this.value=new byte[0];}  }
class C{  private static int[] toIntArray(String str,boolean shouldThrow){  if (str == null) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("str == null");  }  int length=str.length();  if (length == 0) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("Incorrect syntax");  }  int count=1;  boolean wasDot=true;  char c;  for (int i=0; i < length; i++) {    c=str.charAt(i);    if (c == '.') {      if (wasDot) {        if (!shouldThrow) {          return null;        }        throw new IllegalArgumentException("Incorrect syntax");      }      wasDot=true;      count++;    } else     if (c >= '0' && c <= '9') {      wasDot=false;    } else {      if (!shouldThrow) {        return null;      }      throw new IllegalArgumentException("Incorrect syntax");    }  }  if (wasDot) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("Incorrect syntax");  }  if (count < 2) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("Incorrect syntax");  }  int[] oid=new int[count];  for (int i=0, j=0; i < length; i++) {    c=str.charAt(i);    if (c == '.') {      j++;    } else {      oid[j]=oid[j] * 10 + c - 48;    }  }  if (oid[0] > 2) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("Incorrect syntax");  } else   if (oid[0] != 2 && oid[1] > 39) {    if (!shouldThrow) {      return null;    }    throw new IllegalArgumentException("Incorrect syntax");  }  return oid;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String shortestMatch(String input){  TrieNode node=root;  for (int i=0; i < input.length(); i++) {    node=node.getChild(input.charAt(i));    if (node == null)     return null;    if (node.isTerminal())     return input.substring(0,i + 1);  }  return null;}  }
class C{  protected double adjust(double v){switch (m_scale) {case Constants.LOG_SCALE:    return Math.pow(10,v);case Constants.SQRT_SCALE:  return v * v;case Constants.LINEAR_SCALE:default :return v;}}  }
class C{  public static void remove(){  DATA.remove();  clearLogListener();}  }
class C{  public CompileStringTest(String syntax,OutputStyle outputStyle,boolean isIndentedStyle){  super(syntax,outputStyle);  this.isIndentedStyle=isIndentedStyle;}  }
class C{  void updateInterval(){  int interval=Integer.parseInt(delay.getText());  log.debug("set interval to " + interval);  Engine.instance().setPollingInterval(interval);}  }
class C{  public RGBImage(Image img){  super(null);  width=img.getWidth();  height=img.getHeight();  rgb=img.getRGBCached();}  }
class C{  public static float measureText(final IFont pFont,final CharSequence pText,final int pStart,final int pEnd,final float[] pWidths){  final int textLength=pEnd - pStart;  if (pStart == pEnd) {    return 0;  } else   if (textLength == 1) {    return pFont.getLetter(pText.charAt(pStart)).mWidth;  }  Letter previousLetter=null;  float width=0;  for (int pos=pStart, i=0; pos < pEnd; pos++, i++) {    final Letter letter=pFont.getLetter(pText.charAt(pos));    if (previousLetter != null) {      width+=previousLetter.getKerning(letter.mCharacter);    }    previousLetter=letter;    if (pos == (pEnd - 1)) {      width+=letter.mOffsetX + letter.mWidth;    } else {      width+=letter.mAdvance;    }    if (pWidths != null) {      pWidths[i]=width;    }  }  return width;}  }
class C{  public static ColorMode create(String name,int primaryColor,int secondaryColor,int tertiaryColor,int primarySubcolor,int secondarySubcolor,int textColor,int invertedTextColor){  ColorMode colorMode=new ColorMode(name,primaryColor,secondaryColor,tertiaryColor,primarySubcolor,secondarySubcolor,textColor,invertedTextColor);  ColorMode.COLOR_MODE_LIST.add(colorMode);  return colorMode;}  }
class C{  public void zoomOutImage(float scale,float centerX,float centerY){  if (scale >= getMinScale()) {    postScale(scale / getCurrentScale(),centerX,centerY);  }}  }
class C{  private CGraphOpener(){}  }
class C{  public IntegratedParserConfigurationMMImpl(SymbolTable symbolTable,XMLGrammarPool grammarPool){  this(symbolTable,grammarPool,null);}  }
class C{  public synchronized void releaseInternal(){  if (!done) {    if (cursor != null) {      cursor.release();      cursor=null;    }    diskLog=null;    done=true;  }}  }
class C{  public static boolean isMacro(Object o){  if (null == o) {    return false;  }  return o instanceof Macro;}  }
class C{  public CompositeLineDecoration(){}  }
class C{  private static void addAndCreateFolderLibraryEntry(IJavaProject javaProject,String folderName) throws CoreException, UnsupportedEncodingException {  IFolder projLibFolder=javaProject.getProject().getFolder(folderName);  ResourceUtils.createFolderStructure(javaProject.getProject(),projLibFolder.getProjectRelativePath());  JavaProjectUtilities.addRawClassPathEntry(javaProject,JavaCore.newLibraryEntry(projLibFolder.getFullPath(),null,null,true));}  }
class C{  public String decode(String pString) throws DecoderException {  if (pString == null) {    return null;  }  try {    return decode(pString,getDefaultCharset());  } catch (  UnsupportedEncodingException e) {    throw new DecoderException(e.getMessage());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:07.082 -0500",hash_original_method="71B2FD618F41F3F10AED78DDC584C5B5",hash_generated_method="D5C1464D9CBFFD7FDEF25798ABF91481") public static RouteInfo selectBestRoute(Collection<RouteInfo> routes,InetAddress dest){  if ((routes == null) || (dest == null))   return null;  RouteInfo bestRoute=null;  for (  RouteInfo route : routes) {    if (NetworkUtils.addressTypeMatches(route.mDestination.getAddress(),dest)) {      if ((bestRoute != null) && (bestRoute.mDestination.getNetworkPrefixLength() >= route.mDestination.getNetworkPrefixLength())) {        continue;      }      if (route.matches(dest))       bestRoute=route;    }  }  return bestRoute;}  }
class C{  public void run(){  MSetup ms=new MSetup(Env.getCtx(),m_WindowNo);  m_frame.setBusyTimer(45);  boolean ok=ms.createClient(fClientName.getText(),fOrgValue.getText(),fOrgName.getText(),fUserClient.getText(),fUserOrg.getText(),null,null,null,null,null,null,null,0);  String info=ms.getInfo();  if (ok) {    KeyNamePair currency=(KeyNamePair)fCurrency.getSelectedItem();    if (!ms.createAccounting(currency,fProduct.isSelected(),fBPartner.isSelected(),fProject.isSelected(),fMCampaign.isSelected(),fSRegion.isSelected(),null,0,m_file)) {      ADialog.error(m_WindowNo,this,"AccountSetupError");      dispose();    } else {      KeyNamePair p=(KeyNamePair)fCountry.getSelectedItem();      int C_Country_ID=p.getKey();      p=(KeyNamePair)fRegion.getSelectedItem();      int C_Region_ID=p.getKey();      ms.createEntities(C_Country_ID,fCity.getText(),C_Region_ID,currency.getKey(),null,null);      info+=ms.getInfo();      PrintUtil.setupPrintForm(ms.getAD_Client_ID());    }  }  ADialog.info(m_WindowNo,this,"VSetup",info);  dispose();}  }
class C{  public static SocksProxyServer newNoAuthenticationServer(int port){  SocksProxyServer proxyServer=new BasicSocksProxyServer(Socks5Handler.class,port);  proxyServer.setBufferSize(BUFFER_SIZE);  proxyServer.setTimeout(TIMEOUT);  proxyServer.setSupportMethods(new NoAuthenticationRequiredMethod());  return proxyServer;}  }
class C{  int exclusiveTimeMicros(){  long exclusive=inclusiveTimeNanos();  for (  Operation child : subops) {    exclusive-=child.inclusiveTimeNanos();  }  if (exclusive < 0) {    throw new AssertionError(loadedClass.name);  }  return nanosToMicros(exclusive);}  }
class C{  public void sort(int[] A,int left,int right){  int index=partition(A,left,right);  if (left < index - 1)   sort(A,left,index - 1);  if (index < right)   sort(A,index,right);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String matchNTE=getString(stack);  String source=getString(stack);  return (source == null || matchNTE == null) ? Boolean.FALSE : new Boolean(StringMatchUtils.substringMatchesNte(source,0,matchNTE.toLowerCase()));}  }
class C{  private void editWorldAction(){synchronized (Simulation.LOCK) {    EditWorldDialog.show(ControlUtilities.getParentWindow(this),this.simulation.getWorld());  }  this.model.nodeChanged(this.root);}  }
class C{  public void reduceRTOvalue(){  meanOverallRTO=(long)(1000 + (0.5 * meanOverallRTO));}  }
class C{  public UnsignedInteger subtract(UnsignedInteger decrement){  return valueOf(getValue() - decrement.getValue());}  }
class C{  private void mergeMethodHandleStore(final int index,final MethodHandle methodHandle){  localVariables.merge(index,new MethodHandle(methodHandle),null);}  }
class C{  public void testAbnormalForkQuietlyJoin(){  testAbnormalForkQuietlyJoin(mainPool());}  }
class C{  public final void useCompression(final boolean useCompression1){  this.useCompression=Boolean.valueOf(useCompression1);}  }
class C{  public static <V>PropertyValuesHolder ofObject(Property property,TypeEvaluator<V> evaluator,V... values){  PropertyValuesHolder pvh=new PropertyValuesHolder(property);  pvh.setObjectValues(values);  pvh.setEvaluator(evaluator);  return pvh;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:32.659 -0500",hash_original_method="31B2EAABC2E978FD5373BC4C4C4BC54F",hash_generated_method="F90DC233681EAF1A64DC1578856C0693") public void removeTTL(){  if (uriParms != null)   uriParms.delete(TTL);}  }
class C{  public void clearGaussian(){  __haveNextNextGaussian=false;}  }
class C{  private void checkConfiguration(){  if (configuration == null) {    throw new IllegalStateException(ERROR_NOT_INIT);  }}  }
class C{  public static void ensureNon(String fn){  if ((new File(fn)).exists()) {    throw new RuntimeException("Test path " + fn + " exists");  }}  }
class C{  private ParseResult mergeSelectWithSelect(ParseResult top,ParseResult nested) throws SQLException {  int limit=Math.min(top.getLimit(),nested.getLimit());  if (limit <= 0)   limit=Math.max(top.getLimit(),nested.getLimit());  List<OrderBy> sorts=nested.getSorts();  sorts.addAll(top.getSorts());  QueryBuilder query=QueryBuilders.boolQuery().must(top.getQuery()).must(nested.getQuery());  boolean score=top.getRequestScore() || nested.getRequestScore();  boolean useCache=top.getUseCache() || nested.getUseCache();  Heading head=new Heading();  if (top.getHeading().hasAllCols())   head=nested.getHeading(); else {    for (    Column col : top.getHeading().columns()) {      Column col2=nested.getHeading().getColumnByNameAndOp(col.getColumn(),Operation.NONE);      if (col2 == null)       col2=nested.getHeading().getColumnByLabel(col.getAlias());      if (col2 == null)       throw new SQLException("Unable to determine column '" + col.getLabel() + "' within nested query");      String alias=(col.getAlias() == null ? col.getColumn() : col.getAlias());      head.add(new Column(col2.getColumn()).setAlias(alias).setSqlType(col2.getSqlType()));    }  }  return new ParseResult(head,nested.getSources(),query,null,null,sorts,limit,useCache,score);}  }
class C{  public void waitForTick(long periodMs){  long remaining=periodMs - (long)period.milliseconds();  if (remaining > 0) {    try {      Thread.sleep(remaining);    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();    }  }  period.reset();}  }
class C{  public static BufferedImage createRGBImageFromCMYK(Raster cmykRaster,ICC_Profile cmykProfile){  BufferedImage image;  int w=cmykRaster.getWidth();  int h=cmykRaster.getHeight();  if (cmykProfile != null) {    ColorSpace cmykCS=new ICC_ColorSpace(cmykProfile);    image=new BufferedImage(w,h,BufferedImage.TYPE_INT_RGB);    WritableRaster rgbRaster=image.getRaster();    ColorSpace rgbCS=image.getColorModel().getColorSpace();    ColorConvertOp cmykToRgb=new ColorConvertOp(cmykCS,rgbCS,null);    cmykToRgb.filter(cmykRaster,rgbRaster);  } else {    int[] rgb=new int[w * h];    int[] C=cmykRaster.getSamples(0,0,w,h,0,(int[])null);    int[] M=cmykRaster.getSamples(0,0,w,h,1,(int[])null);    int[] Y=cmykRaster.getSamples(0,0,w,h,2,(int[])null);    int[] K=cmykRaster.getSamples(0,0,w,h,3,(int[])null);    for (int i=0, imax=C.length; i < imax; i++) {      int k=K[i];      rgb[i]=(255 - Math.min(255,C[i] + k)) << 16 | (255 - Math.min(255,M[i] + k)) << 8 | (255 - Math.min(255,Y[i] + k));    }    Raster rgbRaster=Raster.createPackedRaster(new DataBufferInt(rgb,rgb.length),w,h,w,new int[]{0xff0000,0xff00,0xff},null);    ColorSpace cs=ColorSpace.getInstance(ColorSpace.CS_sRGB);    ColorModel cm=new DirectColorModel(cs,24,0xff0000,0xff00,0xff,0x0,false,DataBuffer.TYPE_INT);    image=new BufferedImage(cm,(WritableRaster)rgbRaster,true,null);  }  return image;}  }
class C{  public int readChar() throws IOException {  return this.read();}  }
class C{  public boolean hasInitialResponse(){  return false;}  }
class C{  public void testDoCheckWithEmptyElements(){  LOGGER.debug("doCheckWithEmptyElements");  TextBelongsToBlackListChecker instance=new TextBelongsToBlackListChecker(mockTextElementBuilder,BLACKLIST_NOM_NAME,DETECTION_MSG);  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler);}  }
class C{  public static <T extends Annotation>T of(Class<T> type,String name,Object value){  return of(type,Map.of(name,value));}  }
class C{  public boolean isLicensed(CoordinatorClient.LicenseType type){  boolean licensed=Boolean.TRUE.equals(licensedCache.get(type));  if (!licensed) {    licensed=_coordinatorClient.isStorageProductLicensed(type);    licensedCache.put(type,licensed);  }  return licensed;}  }
class C{  public static Conversion conversion(String name){  return new Conversion(name);}  }
class C{  default B effect(final FireworkEffectMeta src){  this.meta().setEffect(src.getEffect());  return this.getBuilder();}  }
class C{  boolean restoreVolumeFromSnapshot(String snapshotName){  NaElement elem=new NaElement("snapshot-restore-volume");  elem.addNewChild("volume",name);  elem.addNewChild("snapshot",snapshotName);  try {    server.invokeElem(elem);  } catch (  Exception e) {    String msg="Failed to restore volume to specified snapshot: " + snapshotName;    log.error(msg,e);    throw new NetAppException(msg,e);  }  return true;}  }
class C{  private void readPois(Settings s){  Coord offset=map.getOffset();  if (!s.contains(POI_SELECT_S)) {    return;  }  double[] groupPois=s.getCsvDoubles(POI_SELECT_S);  String fqSetting=s.getFullPropertyName(POI_SELECT_S);  if (groupPois.length % 2 != 0) {    throw new SettingsError("Invalid amount of POI selection-" + "probability values (" + groupPois.length + "). Must be "+ "divisable by 2 in "+ fqSetting);  }  for (int i=0; i < groupPois.length - 1; i+=2) {    int index=(int)groupPois[i];    double prob=groupPois[i + 1];    if (prob < 0.0 || prob > 1.0) {      throw new SettingsError("Invalid probability value (" + prob + ") for POI at index "+ index+ " in "+ fqSetting);    }    if (index < poiLists.size() && poiLists.get(index) != null) {      throw new SettingsError("Duplicate definition for POI index " + index + " in "+ fqSetting);    }    List<MapNode> nodes=readPoisOf(index,offset);    if (poiLists.size() <= index) {      for (int j=poiLists.size(); j <= index; j++) {        poiLists.add(j,null);      }    }    poiLists.set(index,nodes);    poiProbs.add(new Tuple<Double,Integer>(groupPois[i + 1],index));  }  double probSum=0;  for (  Tuple<Double,Integer> t : poiProbs) {    probSum+=t.getKey();  }  if (probSum > 1.0) {    throw new SettingsError("Sum of POI probabilities (" + String.format("%.2f",probSum) + ") exceeds 1.0 in "+ fqSetting);  }}  }
class C{  public LogStream print(int i){  if (ps != null) {    indent();    lineBuffer.append(i);  }  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:50.856 -0500",hash_original_method="8E0BB334F5FA3F917B6C3297724E29A6",hash_generated_method="F12DA633716B414DEB1D1B8126ED0973") public void readInteger() throws IOException {  if (tag != ASN1Constants.TAG_INTEGER) {    throw expected("integer");  }  if (length < 1) {    throw new ASN1Exception("Wrong length for ASN.1 integer at [" + tagOffset + "]");  }  readContent();  if (length > 1) {    byte firstByte=buffer[offset - length];    byte secondByte=(byte)(buffer[offset - length + 1] & 0x80);    if (firstByte == 0 && secondByte == 0 || firstByte == (byte)0xFF && secondByte == (byte)0x80) {      throw new ASN1Exception("Wrong content for ASN.1 integer at [" + (offset - length) + "]. An integer MUST be encoded in minimum number of octets");    }  }}  }
class C{  public static void resetLinkLength(Network network,String networkMode){  for (  Link link : network.getLinks().values()) {    if (link.getAllowedModes().contains(networkMode)) {      double l=CoordUtils.calcEuclideanDistance(link.getFromNode().getCoord(),link.getToNode().getCoord());      link.setLength(l > 0 ? l : 1);    }  }}  }
class C{  @Override public void run(){  running=true;  Vector<Region> regions=null;  try {    regions=Region.loadAllRegions(savepath);  } catch (  IOException e1) {    JOptionPane.showMessageDialog(null,"Couldn't load regions: " + e1);    return;  }  long last_time=System.currentTimeMillis(), this_time;  for (  Region region : regions) {    for (    Chunk chunk : region) {      if (chunk == null) {        Log.error("Chunk couldn't be loaded.",null);        return;      }      chunk.renderImages(0,Integer.MAX_VALUE,preview.fastrendermode);      BufferedImage height_img=null;      if (!preview.fastrendermode)       chunk.getHeightImage();      BufferedImage img=chunk.getBlockImage();      int ix=chunk.getPosX();      int iy=chunk.getPosZ();      preview.addImage(img,height_img,ix * 64,iy * 64);      this_time=System.currentTimeMillis();      if (this_time - last_time > REPAINT_FREQUENCY) {        preview.repaint();        last_time=this_time;      }      if (!running)       return;    }  }  if (!preview.fastrendermode)   preview.redraw(false);  preview.repaint();  running=false;}  }
class C{  @Override public synchronized void flush() throws IOException {  mActionTracer.flush();}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute("adqstatus") @Valid AppDeploymentQueueStatus adqStatus,BindingResult bindingResult,Principal principal){  LOGGER.debug("Entering into update for adq_status table");  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    com.wipro.ats.bdre.md.dao.jpa.AppDeploymentQueueStatus jpaAdqStatus=new com.wipro.ats.bdre.md.dao.jpa.AppDeploymentQueueStatus();    jpaAdqStatus.setDescription(adqStatus.getDescription());    appDeploymentQueueStatusDAO.update(jpaAdqStatus);    LOGGER.debug("Updating Adq Status Id" + jpaAdqStatus.getAppDeploymentStatusId());    LOGGER.debug("Exiting from update for deploy_status table");    restWrapper=new RestWrapper(adqStatus,RestWrapper.OK);    LOGGER.info(RECORDWITHID + adqStatus.getAppDeploymentStatusId() + " updated in AppDeploymentQueueStatus by User:"+ principal.getName()+ adqStatus);  } catch (  Exception e) {    LOGGER.error(e);    return new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  private int offset(final long position){  return (int)(position % allocator.getBlockSize());}  }
class C{  public void commitBuffer(int length) throws IOException {  updateSequence();  mPackets[mBufferIn].setLength(length);  mAverageBitrate.push(length);  if (++mBufferIn >= mBufferCount)   mBufferIn=0;  mBufferCommitted.release();  if (mThread == null) {    mThread=new Thread(this);    mThread.start();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeappendchildinvalidnodetype.class,args);}  }
class C{  public VmHostData(String hostName,boolean isDomainController){  ValidateUtil.validateNotEmpty(hostName,"hostName");  _hostName=hostName;  _isDomainController=isDomainController;}  }
class C{  private int distanceToView(View descendant){  int distance=0;  descendant.getDrawingRect(mTempRect);  offsetDescendantRectToMyCoords(descendant,mTempRect);  final int listBottom=mBottom - mTop - mListPadding.bottom;  if (mTempRect.bottom < mListPadding.top) {    distance=mListPadding.top - mTempRect.bottom;  } else   if (mTempRect.top > listBottom) {    distance=mTempRect.top - listBottom;  }  return distance;}  }
class C{  public ExtendedBufferedReader(Reader r,int bufSize){  super(r,bufSize);}  }
class C{  public CellEntry(){  getCategories().add(CATEGORY);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String surferFile=null;  String whiteboxHeaderFile=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  int progress=0;  double cellsize=0;  double north=0;  double east=0;  double west=0;  double south=0;  double arcNoData=-9999;  double whiteboxNoData=-32768d;  double z=0;  String delimiter=" ";  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  DataInputStream in=null;  BufferedReader br=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    }  }  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      surferFile=imageFiles[i];      if (!((new File(surferFile)).exists())) {        showFeedback("Surfer raster file does not exist.");        break;      }      if (surferFile.lastIndexOf(".") >= 0) {        String extension=surferFile.substring(surferFile.lastIndexOf("."));        whiteboxHeaderFile=surferFile.replace(extension,".dep");      } else {        whiteboxHeaderFile=surferFile + ".dep";      }      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxHeaderFile.replace(".dep",".tas"))).delete();      FileInputStream fstream=new FileInputStream(surferFile);      rows=0;      cols=0;      in=new DataInputStream(fstream);      br=new BufferedReader(new InputStreamReader(in));      if (surferFile != null) {        String line;        String[] str;        i=1;        while ((line=br.readLine()) != null && i < 5) {          str=line.split(delimiter);          if (str.length <= 1 && i > 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if (i == 1) {            if (!(str[0].toLowerCase().equals("dsaa"))) {              showFeedback("Warning: Surfer ASCII GRD ID value " + "was not located. This file may be " + "improperly structured.");            }          } else           if (i == 2) {            cols=Integer.parseInt(str[0]);            rows=Integer.parseInt(str[str.length - 1]);          } else           if (i == 3) {            west=Double.parseDouble(str[0]);            east=Double.parseDouble(str[str.length - 1]);          } else           if (i == 4) {            south=Double.parseDouble(str[0]);            north=Double.parseDouble(str[str.length - 1]);          } else {            break;          }          i++;        }        fw=new FileWriter(whiteboxHeaderFile,false);        bw=new BufferedWriter(fw);        out=new PrintWriter(bw,true);        str1="Min:\t" + Double.toString(Integer.MAX_VALUE);        out.println(str1);        str1="Max:\t" + Double.toString(Integer.MIN_VALUE);        out.println(str1);        str1="North:\t" + Double.toString(north);        out.println(str1);        str1="South:\t" + Double.toString(south);        out.println(str1);        str1="East:\t" + Double.toString(east);        out.println(str1);        str1="West:\t" + Double.toString(west);        out.println(str1);        str1="Cols:\t" + Integer.toString(cols);        out.println(str1);        str1="Rows:\t" + Integer.toString(rows);        out.println(str1);        str1="Data Type:\t" + "float";        out.println(str1);        str1="Z Units:\t" + "not specified";        out.println(str1);        str1="XY Units:\t" + "not specified";        out.println(str1);        str1="Projection:\t" + "not specified";        out.println(str1);        str1="Data Scale:\tcontinuous";        out.println(str1);        str1="Preferred Palette:\t" + "spectrum.pal";        out.println(str1);        str1="NoData:\t-32768";        out.println(str1);        if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {          str1="Byte Order:\t" + "LITTLE_ENDIAN";        } else {          str1="Byte Order:\t" + "BIG_ENDIAN";        }        out.println(str1);        WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"rw");        delimiter=" ";        row=rows - 1;        col=0;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          for (i=0; i < str.length; i++) {            if (!str[i].trim().isEmpty()) {              z=Double.parseDouble(str[i]);              wbr.setValue(row,col,z);              col++;              if (col == cols) {                col=0;                row--;              }            }          }        }        in.close();        br.close();        wbr.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");        wbr.addMetadataEntry("Created on " + new Date());        wbr.flush();        wbr.findMinAndMaxVals();        wbr.close();        returnData(whiteboxHeaderFile);      }    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private static void checkValidValue(final long value,final String name){  if (!(value == -1 || value > 0)) {    throw new IllegalArgumentException(name + " must be > 0 or -1");  }}  }
class C{  private static Document emptyDocument(){  try {    return DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();  } catch (  final ParserConfigurationException ex) {    throw new IllegalStateException("Could not instantiate DocumentBuilderFactory and build empty Document",ex);  }}  }
class C{  public void iterate(VertexIterator iterator){  if ((iterator.getDepth() == 0) && (iterator.getPath() == Path.BreadthFirst)) {    Map<Vertex,Vertex> currentLevel=new IdentityHashMap<Vertex,Vertex>();    iterator.setBreadthSet(currentLevel);    iterator.incrementDepth();    iterate(iterator);    iterator.decrementDepth();    Map<Vertex,Vertex> nextLevel=currentLevel;    while (!nextLevel.isEmpty()) {      iterator.incrementDepth();      if (iterator.isMaxDepth()) {        return;      }      currentLevel=nextLevel;      nextLevel=new IdentityHashMap<Vertex,Vertex>();      iterator.setBreadthSet(nextLevel);      for (      Vertex vertex : currentLevel.values()) {        vertex.iterate(iterator);        if (iterator.isMaxIterations()) {          return;        }      }    }  } else {    if (iterator.getTraversed().containsKey(this)) {      return;    }    if (iterator.isMaxIterations()) {      return;    }    if (iterator.getIgnorePrimitives() && isPrimitive()) {      return;    }    iterator.getTraversed().put(this,this);    boolean iterateRelationships=iterator.iterate(this);    if (!iterateRelationships) {      return;    }    if (getRelationships().isEmpty()) {      return;    }    if (iterator.getPath() == Path.BreadthFirst) {      for (      Map<Relationship,Relationship> relationships : getRelationships().values()) {        for (        Relationship relationship : relationships.values()) {          iterator.addBreadth(relationship.getTarget());        }      }    } else {      if (iterator.isMaxDepth()) {        return;      }      iterator.incrementDepth();      for (      Map<Relationship,Relationship> relationships : getRelationships().values()) {        for (        Relationship relationship : relationships.values()) {          relationship.getTarget().iterate(iterator);          if (iterator.isMaxIterations()) {            return;          }        }      }      iterator.decrementDepth();    }  }}  }
class C{  public boolean hasDependency(Capability c){  if (doNotCheckCapabilities()) {    return false;  }  return m_Dependencies.contains(c);}  }
class C{  @Override public SnmpMibHandler addMib(SnmpMibAgent mib,String contextName) throws IllegalArgumentException {  return addMib(mib);}  }
class C{  public static Bitmap stackBlur(Bitmap bitmapIn,int radius){  Bitmap bitmap=bitmapIn.copy(bitmapIn.getConfig(),true);  int w=bitmap.getWidth();  int h=bitmap.getHeight();  int[] pix=new int[w * h];  bitmap.getPixels(pix,0,w,0,0,w,h);  int wm=w - 1;  int hm=h - 1;  int wh=w * h;  int div=radius + radius + 1;  int r[]=new int[wh];  int g[]=new int[wh];  int b[]=new int[wh];  int rsum;  int gsum;  int bsum;  int x;  int y;  int i;  int p;  int yp;  int yi=0;  int yw=0;  int vmin[]=new int[Math.max(w,h)];  int divsum=(div + 1) >> 1;  divsum*=divsum;  int dv[]=new int[256 * divsum];  for (i=0; i < 256 * divsum; i++) {    dv[i]=i / divsum;  }  int[][] stack=new int[div][3];  int stackpointer;  int stackstart;  int[] sir;  int rbs;  int r1=radius + 1;  int routsum;  int goutsum;  int boutsum;  int rinsum;  int ginsum;  int binsum;  for (y=0; y < h; y++) {    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;    for (i=-radius; i <= radius; i++) {      p=pix[yi + Math.min(wm,Math.max(i,0))];      sir=stack[i + radius];      sir[0]=(p & 0xff0000) >> 16;      sir[1]=(p & 0x00ff00) >> 8;      sir[2]=p & 0x0000ff;      rbs=r1 - Math.abs(i);      rsum+=sir[0] * rbs;      gsum+=sir[1] * rbs;      bsum+=sir[2] * rbs;      if (i > 0) {        rinsum+=sir[0];        ginsum+=sir[1];        binsum+=sir[2];      } else {        routsum+=sir[0];        goutsum+=sir[1];        boutsum+=sir[2];      }    }    stackpointer=radius;    for (x=0; x < w; x++) {      r[yi]=dv[rsum];      g[yi]=dv[gsum];      b[yi]=dv[bsum];      rsum-=routsum;      gsum-=goutsum;      bsum-=boutsum;      stackstart=stackpointer - radius + div;      sir=stack[stackstart % div];      routsum-=sir[0];      goutsum-=sir[1];      boutsum-=sir[2];      if (y == 0) {        vmin[x]=Math.min(x + radius + 1,wm);      }      p=pix[yw + vmin[x]];      sir[0]=(p & 0xff0000) >> 16;      sir[1]=(p & 0x00ff00) >> 8;      sir[2]=p & 0x0000ff;      rinsum+=sir[0];      ginsum+=sir[1];      binsum+=sir[2];      rsum+=rinsum;      gsum+=ginsum;      bsum+=binsum;      stackpointer=(stackpointer + 1) % div;      sir=stack[stackpointer % div];      routsum+=sir[0];      goutsum+=sir[1];      boutsum+=sir[2];      rinsum-=sir[0];      ginsum-=sir[1];      binsum-=sir[2];      yi++;    }    yw+=w;  }  for (x=0; x < w; x++) {    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;    yp=-radius * w;    for (i=-radius; i <= radius; i++) {      yi=Math.max(0,yp) + x;      sir=stack[i + radius];      sir[0]=r[yi];      sir[1]=g[yi];      sir[2]=b[yi];      rbs=r1 - Math.abs(i);      rsum+=r[yi] * rbs;      gsum+=g[yi] * rbs;      bsum+=b[yi] * rbs;      if (i > 0) {        rinsum+=sir[0];        ginsum+=sir[1];        binsum+=sir[2];      } else {        routsum+=sir[0];        goutsum+=sir[1];        boutsum+=sir[2];      }      if (i < hm) {        yp+=w;      }    }    yi=x;    stackpointer=radius;    for (y=0; y < h; y++) {      pix[yi]=(0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8)| dv[bsum];      rsum-=routsum;      gsum-=goutsum;      bsum-=boutsum;      stackstart=stackpointer - radius + div;      sir=stack[stackstart % div];      routsum-=sir[0];      goutsum-=sir[1];      boutsum-=sir[2];      if (x == 0) {        vmin[y]=Math.min(y + r1,hm) * w;      }      p=x + vmin[y];      sir[0]=r[p];      sir[1]=g[p];      sir[2]=b[p];      rinsum+=sir[0];      ginsum+=sir[1];      binsum+=sir[2];      rsum+=rinsum;      gsum+=ginsum;      bsum+=binsum;      stackpointer=(stackpointer + 1) % div;      sir=stack[stackpointer];      routsum+=sir[0];      goutsum+=sir[1];      boutsum+=sir[2];      rinsum-=sir[0];      ginsum-=sir[1];      binsum-=sir[2];      yi+=w;    }  }  bitmap.setPixels(pix,0,w,0,0,w,h);  return bitmap;}  }
class C{  public void addClickingListener(OnWheelClickedListener listener){  clickingListeners.add(listener);}  }
class C{  public void add(BasicBlock block){  blocks.add(block);}  }
class C{  public Graphics create(int x,int y,int width,int height){  return new ProxyGraphics(g.create(x,y,width,height));}  }
class C{  private void showPopup(Component source){  actionSource=source;  actionSource.addComponentListener(this);  if (actionSource instanceof JToggleButton) {    JToggleButton toggleSource=(JToggleButton)actionSource;    toggleSource.setSelected(true);  }  containingWindow=SwingUtilities.windowForComponent(actionSource);  containingWindow.addComponentListener(this);  Point position=calculatePosition(source);  popupComponent.setLocation(position);  popupComponent.setVisible(true);  popup=new ContainerPopupDialog(containingWindow,popupComponent,position);  popup.setVisible(true);  popup.requestFocus();  popupComponent.startTracking(containingWindow,actionSource);}  }
class C{  protected List executeCriteriaReturnScrOficList(Locale locale,StringBuffer query) throws HibernateException {  List result=null;  Criteria criteriaResults=getSession().createCriteria(getScrOficLanguage(locale.getLanguage()));  criteriaResults.add(Expression.sql(query.toString()));  result=criteriaResults.list();  return result;}  }
class C{  public boolean hasCFIn(Coords coords){  return currentCF.containsKey(coords);}  }
class C{  public static InfoRegister createFolder(User user,Integer bookId,List atts,List inter,Map documents,String entidad,boolean consolidacion) throws ValidationException, SecurityException, BookException, SessionException, TecDocException, ParseException, AttributesException {  InfoRegister result=new InfoRegister();  String sessionID=new String();  try {    sessionID=Login.login(user,entidad);    setOfficeUserRegister(entidad,sessionID,atts);    BookSession.openBook(sessionID,bookId,entidad);    Integer launchDistOutRegister=RegisterServicesUtil.getInvesConfActions(entidad);    RegisterServicesUtil.canCreateFolder(sessionID,bookId,documents,user,atts,entidad,consolidacion);    AxSf axsfQ=BookSession.getFormFormat(sessionID,bookId,entidad);    FieldFormat fieldFormat=RegisterServicesUtil.getFieldFormat(sessionID,bookId);    Map translatedIds=RegisterServicesUtil.getFieldsWithSustitute(atts,axsfQ,sessionID,bookId,entidad);    AxSf newAxSF=RegisterServicesUtil.initInOrOutFolder(user,axsfQ);    newAxSF=RegisterServicesUtil.completeFolder(translatedIds,axsfQ,newAxSF,user.getLocale(),atts,fieldFormat,consolidacion);    FolderDataSession data=Register.createNewFolder(sessionID,bookId,newAxSF,inter,documents,launchDistOutRegister,user.getLocale(),entidad,consolidacion);    result=ConsultRegister.consultRegisterInfo(bookId,data.getAxsfNew(),data.getNewRegisterID(),data.getScrofic(),data.getUserName(),user.getLocale());  }  finally {    BookSession.closeBook(sessionID,bookId);    SecuritySession.logout(sessionID,entidad);  }  return result;}  }
class C{  private void addCommitmentType(final CAdESSignatureParameters parameters,final ASN1EncodableVector signedAttributes){  final BLevelParameters bLevelParameters=parameters.bLevel();  final List<String> commitmentTypeIndications=bLevelParameters.getCommitmentTypeIndications();  if (CollectionUtils.isNotEmpty(commitmentTypeIndications)) {    final int size=commitmentTypeIndications.size();    ASN1Encodable[] asn1Encodables=new ASN1Encodable[size];    for (int ii=0; ii < size; ii++) {      final String commitmentTypeId=commitmentTypeIndications.get(ii);      final ASN1ObjectIdentifier objectIdentifier=new ASN1ObjectIdentifier(commitmentTypeId);      asn1Encodables[ii]=new DERSequence(objectIdentifier);    }    final DERSet attrValues=new DERSet(asn1Encodables);    final Attribute attribute=new Attribute(id_aa_ets_commitmentType,attrValues);    signedAttributes.add(attribute);  }}  }
class C{  public void refresh(CloudObject[] objects,CloudResponse<Integer> response){  refreshImpl(objects,response);}  }
class C{  private void parsePatternParameters() throws IgniteCheckedException {  assert pat != null;  String regEx="(\\{(\\*|\\d+),\\s*(\\*|\\d+)\\})?(.*)";  Matcher matcher=Pattern.compile(regEx).matcher(pat.trim());  if (matcher.matches()) {    String delayStr=matcher.group(2);    if (delayStr != null)     if ("*".equals(delayStr))     delay=0; else     try {      delay=Integer.valueOf(delayStr);    } catch (    NumberFormatException e) {      throw new IgniteCheckedException("Invalid delay parameter in schedule pattern [delay=" + delayStr + ", pattern="+ pat+ ']',e);    }    String numOfCallsStr=matcher.group(3);    if (numOfCallsStr != null) {      int maxCalls0;      if ("*".equals(numOfCallsStr))       maxCalls0=0; else {        try {          maxCalls0=Integer.valueOf(numOfCallsStr);        } catch (        NumberFormatException e) {          throw new IgniteCheckedException("Invalid number of calls parameter in schedule pattern [numOfCalls=" + numOfCallsStr + ", pattern="+ pat+ ']',e);        }        if (maxCalls0 <= 0)         throw new IgniteCheckedException("Number of calls must be greater than 0 or must be equal to \"*\"" + " in schedule pattern [numOfCalls=" + maxCalls0 + ", pattern="+ pat+ ']');      }synchronized (mux) {        maxCalls=maxCalls0;      }    }    cron=matcher.group(4);    if (cron != null)     cron=cron.trim();    if (cron.isEmpty() || !SchedulingPattern.validate(cron))     throw new IgniteCheckedException("Invalid cron expression in schedule pattern: " + pat);  } else   throw new IgniteCheckedException("Invalid schedule pattern: " + pat);}  }
class C{  public EntryPseudoState(State<S,E> state){  this.state=state;}  }
class C{  public void handleLongRunningJobs(){  Utilities.verboseLog("Report: Unfinished StepInstances");  Utilities.verboseLog("Unfinished StepInstances: " + stepInstanceDAO.retrieveUnfinishedStepInstances().size());  int unfinishedRemoteJobsCount=0;  int unfinishedLocalJobsCount=0;  int totalUnfinishedJobs=0;  for (  StepInstance stepInstance : stepInstanceDAO.retrieveUnfinishedStepInstances()) {    final Step step=stepInstance.getStep(jobs);    final boolean canRunRemotely=!step.isRequiresDatabaseAccess();    String StepInstanceId=step.getId() + ": " + stepInstance.getId();    if (canRunRemotely) {      Utilities.verboseLog(totalUnfinishedJobs + ":" + StepInstanceId+ " canRunRemotely ");      unfinishedRemoteJobsCount++;    } else {      Utilities.verboseLog(totalUnfinishedJobs + ":" + StepInstanceId+ " is local");      unfinishedLocalJobsCount++;      continue;    }    Utilities.verboseLog("   depends on : " + step.getDependsUpon());    int size=stepInstance.getExecutions().size();    int count=0;    Utilities.verboseLog("      Step executions for" + StepInstanceId);    List<String> stepExecutions=new ArrayList<String>();    boolean candidateForResubmission=false;    for (    StepExecution exec : stepInstance.getExecutions()) {      final StepExecutionState executionState=exec.getState();      stepExecutions.add(executionState.name());switch (executionState) {case NEW_STEP_EXECUTION:        LOGGER.debug("This step is a new step execution : " + stepInstance.getStepId());      break;case STEP_EXECUTION_SUBMITTED:    LOGGER.debug("This job has been submitted : " + stepInstance.getStepId());  candidateForResubmission=true;break;case STEP_EXECUTION_RUNNING:LOGGER.debug("This step is running : " + stepInstance.getStepId());candidateForResubmission=true;break;case STEP_EXECUTION_SUCCESSFUL:LOGGER.debug("This step has run and was successful: " + stepInstance.getStepId());break;default :LOGGER.debug("This step has unknown state: " + executionState);break;}count++;if (count == size) {}}totalUnfinishedJobs=unfinishedLocalJobsCount + unfinishedRemoteJobsCount;Utilities.verboseLog("          " + stepExecutions.toString());if (candidateForResubmission) {if (System.currentTimeMillis() - statsUtil.getLastMessageReceivedTime() > 120 * 60 * 1000) {LOGGER.warn("This stepInstance runstate is Execution state unknown, reset for resubmition : " + stepInstance);failedStepExecutions.putIfAbsent(stepInstance.getId(),stepInstance);}}}if (ftMode) {statsUtil.printNonAcknowledgedSubmittedStepInstances();}}  }
class C{  public Circle(Point center,Double radius){  this.center=center;  this.radius=radius;}  }
class C{  @SuppressWarnings("deprecation") private void cancelRequestAndWorkers(){  for (  ActorRef worker : workers.values()) {    if (worker != null && !worker.isTerminated()) {      worker.tell(OperationWorkerMsgType.CANCEL,getSelf());    }  }  logger.info("ExecutionManager sending cancelPendingRequest at time: " + PcDateUtils.getNowDateTimeStr());}  }
class C{  public ShareDialog(Activity activity){  super(activity,DEFAULT_REQUEST_CODE);  ShareInternalUtility.registerStaticShareCallback(DEFAULT_REQUEST_CODE);}  }
class C{  public void publishComplete(){  if (logger.isTraceEnabled()) {    logger.trace(this.state + " publishComplete");  }  this.state.get().publishComplete(this);}  }
class C{  ShardProgress(String shardId,String stageName){  this.shardId=shardId;  this.stageName=stageName;}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar,char escape,int line,boolean strictQuotes,boolean ignoreLeadingWhiteSpace,boolean keepCR){  this(reader,line,new CSVParser(separator,quotechar,escape,strictQuotes,ignoreLeadingWhiteSpace),keepCR,DEFAULT_VERIFY_READER);}  }
class C{  @Nullable public static PsiElement addClassAttributeIfNotExist(@NotNull final PyClass aClass,@NotNull final String attributeName,@NotNull final String value){  if (aClass.findClassAttribute(attributeName,false) != null) {    return null;  }  final PyElementGenerator generator=PyElementGenerator.getInstance(aClass.getProject());  final String text=String.format("%s = %s",attributeName,value);  final LanguageLevel level=LanguageLevel.forElement(aClass);  final PyAssignmentStatement assignmentStatement=generator.createFromText(level,PyAssignmentStatement.class,text);  return PyUtil.addElementToStatementList(assignmentStatement,aClass.getStatementList(),true);}  }
class C{  public String id(){  return id;}  }
class C{  public void fatalError(SAXParseException spe){  if (LOG.isErrorEnabled()) {    LOG.error("Fatal err: " + spe.toString() + ": "+ spe.getMessage());    LOG.error("Last known line is " + location.getLineNumber() + ", column "+ location.getColumnNumber());  }}  }
class C{  public static void dragViewToTop(InstrumentationTestCase test,View v){  dragViewToTop(test,v,4);}  }
class C{  public static List<IndirectCall> find(final Module module){  final Set<Address> importedFunctionCalls=getDirectFunctionCalls(module);  final Map<Address,Function> functionMap=new HashMap<Address,Function>();  for (  final Function function : module.getFunctions()) {    functionMap.put(function.getAddress(),function);  }  final String callMnemonics="'call', " + "'bal', 'bgezal', 'bgezall', 'bltzal', 'bltzall', 'jal', 'jalr', " + "'bl', 'blx', "+ "'bcctrl', 'bcctr'";  final String registerOrdinal=String.valueOf(ExpressionType.Register.ordinal() + 1);  final String dereferenceOrdinal=String.valueOf(ExpressionType.MemDeref.ordinal() + 1);  final String query="SELECT ft.address AS faddress, it.address AS iaddress " + " FROM " + TableNames.FUNCTIONS_TABLE + " AS ft "+ " JOIN "+ TableNames.FUNCTION_VIEWS_TABLE+ " AS fvt ON ft.address = fvt.function "+ " AND ft.module_id = fvt.module_id"+ " JOIN "+ TableNames.NODES_TABLE+ " AS nt ON fvt.view_id = nt.view_id "+ " JOIN "+ TableNames.CODENODE_INSTRUCTIONS_TABLE+ " AS cit ON nt.id = cit.node_id "+ " AND cit.module_id = ft.module_id "+ " JOIN "+ TableNames.INSTRUCTIONS_TABLE+ " AS it ON it.address = cit.address "+ " AND it.module_id = cit.module_id"+ " JOIN "+ TableNames.OPERANDS_TABLE+ " AS ot ON it.address = ot.address "+ " AND it.module_id = ot.module_id"+ " JOIN "+ TableNames.EXPRESSION_TREE_MAPPING_TABLE+ " AS etm ON ot.expression_tree_id = etm.tree_id "+ " AND etm.module_id = ft.module_id"+ " JOIN "+ TableNames.EXPRESSION_TREE_TABLE+ " AS et ON et.id = etm.tree_node_id "+ " AND et.module_id = ft.module_id"+ " WHERE ft.module_id = "+ module.getId()+ " and mnemonic in ("+ callMnemonics+ ") "+ " AND (et.type in ("+ registerOrdinal+ ", "+ dereferenceOrdinal+ "))"+ " GROUP BY faddress, iaddress";  final List<IndirectCall> addresses=new ArrayList<IndirectCall>();  try {    final ResultSet resultSet=module.getDatabase().executeQuery(query);    try {      while (resultSet.next()) {        final Address address=new Address(resultSet.getLong("iaddress"));        if (importedFunctionCalls.contains(address)) {          continue;        }        final Address faddress=new Address(resultSet.getLong("faddress"));        final Function function=functionMap.get(faddress);        addresses.add(new IndirectCall(module,function,address));      }    }  finally {      resultSet.close();    }    return addresses;  } catch (  final SQLException exception) {    exception.printStackTrace();    return new ArrayList<IndirectCall>();  }}  }
class C{  public static void moveFile(String sourceFilePath,String destFilePath){  if (TextUtils.isEmpty(sourceFilePath) || TextUtils.isEmpty(destFilePath)) {    throw new RuntimeException("Both sourceFilePath and destFilePath cannot be null.");  }  moveFile(new File(sourceFilePath),new File(destFilePath));}  }
class C{  public LittleEndianOutputStream(OutputStream out){  super(out);}  }
class C{  public void show(StackPane dialogContainer){  this.setDialogContainer(dialogContainer);  animation.play();}  }
class C{  private void invalidateCompiledState(){  compiledPolicies=null;}  }
class C{  protected InternalDistributedSystem createSystem(Properties props){  assertFalse(org.apache.geode.distributed.internal.DistributionManager.isDedicatedAdminVM);  this.system=(InternalDistributedSystem)DistributedSystem.connect(props);  return this.system;}  }
class C{  private void populate(Detail detail) throws Exception {  List<Signature> list=scanner.getSignatures();  for (  Signature signature : list) {    populate(signature);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:10.206 -0500",hash_original_method="0886675D1825D54CCEFC14FCAD88ED18",hash_generated_method="1A19F7366982B53A293C960C684ED792") public void close() throws IOException {  implCreateIfNeeded();  impl.close();}  }
class C{  public void dispose(){  tc.removeLocoNetListener(~0,this);  tc=null;}  }
class C{  static Record createRecord(String name,String type,JsonObject location,JsonObject metadata){  Objects.requireNonNull(name);  Objects.requireNonNull(type);  Objects.requireNonNull(location);  Record record=new Record().setName(name).setType(TYPE).setLocation(location);  if (metadata != null) {    record.setMetadata(metadata);  }  record.setMetadata(new JsonObject().put(DS_TYPE,type));  return record;}  }
class C{  @Override public T merge(final T model){  return persistenceService.merge(model);}  }
class C{  protected Boolean matchSuperClass(String superClassName){  return null;}  }
class C{  void storeSearchResults(Divider<T> d,List<Divider<T>> l){  tempOverlapSearchMap.put(d,l);}  }
class C{  public long distanceSquared(int x,int y,int z){  int dx=this.x - x;  int dy=this.y - y;  int dz=this.z - z;  return dx * dx + dy * dy + dz * dz;}  }
class C{  public UserInfo(String id,String name){  m_sId=id;  m_sName=name;}  }
class C{  public long max(){  if (size() == 0) {    throw new IllegalStateException("cannot find maximum of an empty list");  }  long max=_data[_pos - 1];  for (int i=_pos - 1; i-- > 0; ) {    max=Math.max(max,_data[_pos]);  }  return max;}  }
class C{  protected void init(){  status=STATUS_OK;  frameCount=0;  frames=new ArrayList<>();  gct=null;  lct=null;}  }
class C{  public void resurfaceHex(Coords c){  if (board.contains(c)) {    IHex newHex=curHex.duplicate();    newHex.setLevel(board.getHex(c).getLevel());    board.resetStoredElevation();    board.setHex(c,newHex);  }}  }
class C{  private void writeAttributePatterns(AbstractPartitionData partition,XMLWriter writer){  String traitName=partition.getTraits().get(0).getName();  writer.writeComment("Data pattern for discrete trait, '" + traitName + "'");  String prefix=partition.getName() + ".";  writer.writeOpenTag(AttributePatternsParser.ATTRIBUTE_PATTERNS,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,prefix + "pattern"),new Attribute.Default<String>(AttributePatternsParser.ATTRIBUTE,traitName)});  String prefix2="";  if (!options.hasIdenticalTaxa()) {    prefix2=partition.getPartitionTreeModel().getPrefix();  }  writer.writeIDref(TaxaParser.TAXA,prefix2 + TaxaParser.TAXA);  writer.writeIDref(GeneralDataTypeParser.GENERAL_DATA_TYPE,partition.getPartitionSubstitutionModel().getName() + ".dataType");  writer.writeCloseTag(AttributePatternsParser.ATTRIBUTE_PATTERNS);}  }
class C{  @Override protected void commit(char[] text,int off,int len){  builder.append(text,off,len);}  }
class C{  private static boolean hasModernRasterizer(){  try {    Class.forName(AWT_UTILITIES_CLASS_NAME);    return true;  } catch (  ClassNotFoundException e) {    return false;  }}  }
class C{  public long run(String[] args) throws Exception {  int size=Integer.parseInt(args[0]);  int nbatches=Integer.parseInt(args[1]);  int ncycles=Integer.parseInt(args[2]);  char[][] arrays=new char[ncycles][size];  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,arrays,1);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,arrays,nbatches);  return System.currentTimeMillis() - start;}  }
class C{  private static void initScanner(final WebAppContext web,final Configs config){  int scanIntervalSeconds=config.getScanIntervalSeconds();  final ArrayList<File> scanList=new ArrayList<File>();  System.err.println("init scanning folders...");  if (config.getScanlist() != null) {    String[] items=config.getScanlist().split(File.pathSeparator);    for (    String item : items) {      File f=new File(item);      scanList.add(f);      System.err.println("add to scan list:" + item);    }  }  Scanner scanner=new Scanner();  scanner.setScanInterval(scanIntervalSeconds);  scanner.setScanDirs(scanList);  scanner.setRecursive(true);  scanner.setReportExistingFilesOnStartup(true);  scanner.addListener(new RJRFileChangeListener(web,config));  System.err.println("Starting scanner at interval of " + scanIntervalSeconds + " seconds.");  scanner.start();}  }
class C{  public void saveSharesToAssetAccountMapping(final JsonElement element,final String paramName,final Long productId,final int placeHolderTypeId){  saveProductToAccountMapping(element,paramName,productId,placeHolderTypeId,GLAccountType.ASSET,PortfolioProductType.SHARES);}  }
class C{  public Record process(GenericData.Record record,String topic) throws Exception {  if (record != null) {    final GenericData.Record auditHeader=(GenericData.Record)record.get("auditHeader");    final JsonNode rootNode=new ObjectMapper().readTree(record.toString());    DatasetInfoDao.updateDatasetInventory(rootNode);  }  return null;}  }
class C{  public BufferedFileChannel(SageFileChannel fileChannel,int readBufferSize,int writeBufferSize,boolean direct){  readonly=fileChannel.isReadOnly();  this.fileChannel=fileChannel;  readBuffer=direct ? ByteBuffer.allocateDirect(readBufferSize) : ByteBuffer.allocate(readBufferSize);  readBuffer.clear().limit(0);  if (readonly) {    this.writeBuffer=empty;  } else {    this.writeBuffer=direct ? ByteBuffer.allocateDirect(writeBufferSize) : ByteBuffer.allocate(writeBufferSize);    this.writeBuffer.clear();  }}  }
class C{  private boolean isViewTopAligned(ViewGroup.MarginLayoutParams layoutParams){  final int top=getView().getTop();  boolean viewTopAligned=top == 0 || top == layoutParams.topMargin;  LOGGER.trace("View is {} aligned",viewTopAligned ? "TOP" : "BOTTOM");  return viewTopAligned;}  }
class C{  final long computeZobristHash(){  long hash=0;  for (int sq=0; sq < 64; sq++) {    int p=squares[sq];    hash^=psHashKeys[p][sq];  }  if (whiteMove)   hash^=whiteHashKey;  hash^=castleHashKeys[castleMask];  hash^=epHashKeys[(epSquare >= 0) ? getX(epSquare) + 1 : 0];  return hash;}  }
class C{  public int lengthCRL(){  return this.length(Constants.SignatureSpecNS,Constants._TAG_X509CRL);}  }
class C{  @Override public void addTileEntity(@Nonnull BlockPos pos,TileEntity blockEntity){  getCube(pos).addTileEntity(pos,blockEntity);}  }
class C{  @Override public void info(String msg,Throwable t){  if (logger.isLoggable(Level.INFO)) {    log(SELF,Level.INFO,msg,t);  }}  }
class C{  public Table.Builder<? extends Table> removeTableBuilder(int tag){  return this.tableBuilders.remove(tag);}  }
class C{  @DSSink({DSSinkKind.SMS_MMS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:02.500 -0500",hash_original_method="4E34C2A3F0747FC60FF3AABB1F75DE9B",hash_generated_method="20C79CB174C727D459AFA4D98687B9EC") public boolean updateMessageOnIccEf(int index,int status,byte[] pdu){  if (DBG)   log("updateMessageOnIccEf: index=" + index + " status="+ status+ " ==> "+ "("+ pdu+ ")");  enforceReceiveAndSend("Updating message on RUIM");synchronized (mLock) {    mSuccess=false;    Message response=mHandler.obtainMessage(EVENT_UPDATE_DONE);    if (status == STATUS_ON_ICC_FREE) {      mPhone.mCM.deleteSmsOnRuim(index,response);    } else {      byte[] record=makeSmsRecordData(status,pdu);      mPhone.getIccFileHandler().updateEFLinearFixed(IccConstants.EF_SMS,index,record,null,response);    }    try {      mLock.wait();    } catch (    InterruptedException e) {      log("interrupted while trying to update by index");    }  }  return mSuccess;}  }
class C{  static protected void initLog4J(){  String logFile="default.lcf";  try {    if (new java.io.File(logFile).canRead()) {      org.apache.log4j.PropertyConfigurator.configure(logFile);    } else {      org.apache.log4j.BasicConfigurator.configure();      org.apache.log4j.Logger.getRootLogger().setLevel(org.apache.log4j.Level.ERROR);    }  } catch (  java.lang.NoSuchMethodError e) {    log.error("Exception starting logging: " + e);  }  Thread.setDefaultUncaughtExceptionHandler(new jmri.util.exceptionhandler.UncaughtExceptionHandler());}  }
class C{  public boolean approveIt(){  log.info("approveIt - " + toString());  setIsApproved(true);  return true;}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  builder.put(k2,v2);  builder.put(k3,v3);  builder.put(k4,v4);  return builder.build();}  }
class C{  public static void main(String[] args){  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Cache atomic reentrant lock example started.");    final String reentrantLockName=UUID.randomUUID().toString();    IgniteLock lock=ignite.reentrantLock(reentrantLockName,true,false,true);    IgniteCache<String,Integer> cache=ignite.getOrCreateCache(CACHE_NAME);    cache.put(QUEUE_ID,0);    cache.put(SYNC_NAME,NUM_PRODUCERS + NUM_CONSUMERS);    for (int i=0; i < NUM_CONSUMERS; i++)     ignite.compute().withAsync().run(new Consumer(reentrantLockName));    for (int i=0; i < NUM_PRODUCERS; i++)     ignite.compute().withAsync().run(new Producer(reentrantLockName));    System.out.println("Master node is waiting for all other nodes to finish...");    try {      lock.lock();      IgniteCondition notDone=lock.getOrCreateCondition(SYNC_NAME);      int count=cache.get(SYNC_NAME);      while (count > 0) {        notDone.await();        count=cache.get(SYNC_NAME);      }    }  finally {      lock.unlock();    }  }   System.out.flush();  System.out.println();  System.out.println("Finished reentrant lock example...");  System.out.println("Check all nodes for output (this node is also part of the cluster).");}  }
class C{  public String toString(){  return "SoundInfo: no-multiplay=" + noMultiplePlay + " stop="+ stopPlaying+ " envelope="+ ((envelope == null) ? "none" : ("" + envelope.length + " points"))+ " in-point="+ inPoint+ " out-point="+ outPoint+ " loop-count="+ loopCount;}  }
class C{  protected Map createMap(){  return new HashMap();}  }
class C{  public Enumeration<String> elements(){  Vector<String> list=new Vector<String>();  list.addAll(m_Words);  Collections.sort(list);  return list.elements();}  }
class C{  public BitVector copy(){  return (BitVector)clone();}  }
class C{  private void migrateBlockObjects(List<BlockObject> blockObjects){  for (  BlockObject blockObject : blockObjects) {    String consistencyGroups="No consistency groups to migrate";    if (blockObject.getConsistencyGroups() != null && !blockObject.getConsistencyGroups().isEmpty() && blockObject.getConsistencyGroups().size() == 1) {      consistencyGroups=blockObject.getConsistencyGroups().toString();      String cgUriStr=blockObject.getConsistencyGroups().iterator().next();      blockObject.setConsistencyGroup(URI.create(cgUriStr));      StringSet cgs=blockObject.getConsistencyGroups();      cgs.remove(cgUriStr);      blockObject.setConsistencyGroups(cgs);      dbClient.persistObject(blockObject);    }    log.info("Migrated BlockConsistencyGroups [{}] on BlockObject (label={}).",consistencyGroups,blockObject.getLabel());  }}  }
class C{  public Relation_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_relationshipType=jcas.getRequiredFeatureDE(casType,"relationshipType","uima.cas.String",featOkTst);  casFeatCode_relationshipType=(null == casFeat_relationshipType) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_relationshipType).getCode();  casFeat_source=jcas.getRequiredFeatureDE(casType,"source","uk.gov.dstl.baleen.types.semantic.Entity",featOkTst);  casFeatCode_source=(null == casFeat_source) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_source).getCode();  casFeat_target=jcas.getRequiredFeatureDE(casType,"target","uk.gov.dstl.baleen.types.semantic.Entity",featOkTst);  casFeatCode_target=(null == casFeat_target) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_target).getCode();  casFeat_value=jcas.getRequiredFeatureDE(casType,"value","uima.cas.String",featOkTst);  casFeatCode_value=(null == casFeat_value) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_value).getCode();  casFeat_relationSubType=jcas.getRequiredFeatureDE(casType,"relationSubType","uima.cas.String",featOkTst);  casFeatCode_relationSubType=(null == casFeat_relationSubType) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_relationSubType).getCode();}  }
class C{  public InlineQueryResultPhoto build(){  return new InlineQueryResultPhoto(id,photo_url,photo_width,photo_height,thumb_url,title,description,caption,reply_markup,input_message_content);}  }
class C{  public static boolean isLinux(){  return isOS(LINUX_OS_NAME);}  }
class C{  public TerminalSeqSet(ITerminalSeq... sequences){  super();  this.set=new HashSet<TerminalSeqf>();  for (  ITerminalSeq seq : sequences) {    this.set.add(new TerminalSeqf(seq.getTerminals()));  }}  }
class C{  @SuppressWarnings("IfMayBeConditional") public static int[] unique(int[] a,int aLen,int[] b,int bLen){  assert a != null;  assert b != null;  assert isIncreasingArray(a,aLen);  assert isIncreasingArray(b,bLen);  int[] res=new int[aLen + bLen];  int resLen=0;  int i=0;  int j=0;  while (i < aLen && j < bLen) {    if (a[i] == b[j])     i++; else     if (a[i] < b[j])     res[resLen++]=a[i++]; else     res[resLen++]=b[j++];  }  while (i < aLen)   res[resLen++]=a[i++];  while (j < bLen)   res[resLen++]=b[j++];  return copyIfExceeded(res,resLen);}  }
class C{  @Override protected void register(ConfigurationFactory configurationFactory){  configurationFactory.registerConfiguration("wildfly8x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,WildFly8xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("wildfly8x",ContainerType.INSTALLED,ConfigurationType.EXISTING,WildFly8xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("wildfly8x",ContainerType.REMOTE,ConfigurationType.RUNTIME,WildFly8xRuntimeConfiguration.class);  configurationFactory.registerConfiguration("wildfly9x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,WildFly9xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("wildfly9x",ContainerType.INSTALLED,ConfigurationType.EXISTING,WildFly9xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("wildfly9x",ContainerType.REMOTE,ConfigurationType.RUNTIME,WildFly9xRuntimeConfiguration.class);  configurationFactory.registerConfiguration("wildfly10x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,WildFly10xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("wildfly10x",ContainerType.INSTALLED,ConfigurationType.EXISTING,WildFly10xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("wildfly10x",ContainerType.REMOTE,ConfigurationType.RUNTIME,WildFly10xRuntimeConfiguration.class);}  }
class C{  protected void append(final Object[] objs){  mObjects=Utils.append(mObjects,objs);}  }
class C{  public int binarySearchFromTo(int key,int from,int to){  return cern.colt.Sorting.binarySearchFromTo(this.elements,key,from,to);}  }
class C{  public final ResolvableMethod matching(Predicate<Method> methodPredicate){  this.predicates.add(methodPredicate);  return this;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    double multiplier=Math.PI / 180;    if (inputFile.getZUnits().toLowerCase().contains("rad")) {      multiplier=1;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.cosh(z * multiplier));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void recordLayoutId(int layoutId){  if (mLayoutIds == null)   mLayoutIds=new ArrayList<>();  if (!mLayoutIds.contains(layoutId)) {    mLayoutIds.add(layoutId);  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:01.800 -0500",hash_original_method="D10F41EFD32E726343E3CA8A142B1A5C",hash_generated_method="7B2AD6982289DBBA5D12226CFF0E7842") private int nativeGetRightsList(DrmRights[] rights,int numRights){  addTaint(rights[0].getTaint());  addTaint(numRights);  return getTaintInt();}  }
class C{  @Override public byte[] convertIndexToRGB(final byte[] index){  isConverted=true;  final int count=index.length;  final byte[] newIndex=new byte[count * 3];  for (int i=0; i < count; i++) {    final byte value=index[i];    for (int j=0; j < 3; j++) {      newIndex[(i * 3) + j]=value;    }  }  return newIndex;}  }
class C{  public SystemMonitor(final Composite parent,final int style){  super(parent,style | SWT.DOUBLE_BUFFERED);  this.samples=new LinkedHashMap<String,SampleWrapper>();  this.captionVisible=true;  this.borderColor=new Color(getDisplay(),96,96,96);  this.gridColor=new Color(getDisplay(),89,89,89);  this.gridColorBackground=new Color(getDisplay(),50,50,50);  this.gridSize=12;  this.refreshTime=300;  this.keepRunning=true;  createListeners();  launchDataCollecting();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void verbose(String tag,String text){  try {    Log.v(tag,getFormattedLogLine() + text);  } catch (  OutOfMemoryError error) {    error.printStackTrace();  }catch (  Exception exception) {    exception.printStackTrace();  }}  }
class C{  private static int extent(Alignment alignment,int cellSize,int componentSize){  return alignment == FILL ? cellSize : componentSize;}  }
class C{  public DeltaTetradTest2(ICovarianceMatrix cov){  if (cov == null) {    throw new NullPointerException();  }  this.cov=cov;  this.N=cov.getSampleSize();  this.variables=cov.getVariables();  this.variablesHash=new HashMap<>();  for (int i=0; i < variables.size(); i++) {    variablesHash.put(variables.get(i),i);  }}  }
class C{  protected void onCreateRoot(String rootName){}  }
class C{  private char[] mapNumericReference(int c){  char[] data;  if (c >= 0xffff) {    try {      data=Character.toChars(c);    } catch (    IllegalArgumentException e) {      data=new char[0];    }  } else {    data=new char[1];    data[0]=(c < 130 || c > 159) ? (char)c : cp1252Map[c - 130];  }  return data;}  }
class C{  public int bimerge(int spr_val,boolean direction){  int rv=value;  BiSortVal pl=left;  BiSortVal pr=right;  boolean rightexchange=(rv > spr_val) ^ direction;  if (rightexchange) {    value=spr_val;    spr_val=rv;  }  while (pl != null) {    int lv=pl.value;    BiSortVal pll=pl.left;    BiSortVal plr=pl.right;    rv=pr.value;    BiSortVal prl=pr.left;    BiSortVal prr=pr.right;    boolean elementexchange=(lv > rv) ^ direction;    if (rightexchange) {      if (elementexchange) {        pl.swapValRight(pr);        pl=pll;        pr=prl;      } else {        pl=plr;        pr=prr;      }    } else {      if (elementexchange) {        pl.swapValLeft(pr);        pl=plr;        pr=prr;      } else {        pl=pll;        pr=prl;      }    }  }  if (left != null) {    value=left.bimerge(value,direction);    spr_val=right.bimerge(spr_val,direction);  }  return spr_val;}  }
class C{  public void testZonesAndTentsDisplayed_afterRoundView(){  inUserLoginGoToLocationSelection();  inLocationSelectionClickLocation(LOCATION_NAME);  pressBack();  inLocationSelectionCheckZonesAndTentsDisplayed();}  }
class C{  public String[] validBaudRates(){  return new String[]{"57,600","115,200","230,400","250,000","288,000","333,333","460,800"};}  }
class C{  private static XjcRdeDeposit unmarshalFullDeposit() throws Exception {  return unmarshal(XjcRdeDeposit.class,new ByteArrayInputStream(RDE_DEPOSIT_FULL.getBytes(UTF_8)));}  }
class C{  protected void sequence_EmptyStatement(ISerializationContext context,EmptyStatement semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public UCrop useSourceImageAspectRatio(){  mCropIntent.putExtra(EXTRA_ASPECT_RATIO_SET,true);  mCropIntent.putExtra(EXTRA_ASPECT_RATIO_X,0);  mCropIntent.putExtra(EXTRA_ASPECT_RATIO_Y,0);  return this;}  }
class C{  private static void zipDir(File dir,ZipOutputStream zos,String prefix){  File[] entries=dir.listFiles();  for (int i=0; i < entries.length; i++) {    if (entries[i].isDirectory()) {      ZipEntry zi=new ZipEntry(prefix + "/" + entries[i].getName()+ "/");      try {        zos.putNextEntry(zi);        zos.closeEntry();      } catch (      IOException ioex) {        ioex.printStackTrace();      }      zipDir(entries[i],zos,prefix + "/" + entries[i].getName());    } else {      FileInputStream fis=null;      try {        fis=new FileInputStream(entries[i]);        ZipEntry zi=new ZipEntry(prefix + "/" + entries[i].getName());        zos.putNextEntry(zi);        copystream(fis,zos);        zos.closeEntry();      } catch (      FileNotFoundException ex) {        ex.printStackTrace();      }catch (      IOException ioex) {        ioex.printStackTrace();      } finally {        try {          if (fis != null)           fis.close();        } catch (        Exception e) {        }      }    }  }}  }
class C{  private void register(Path dir) throws IOException {  WatchKey key=dir.register(watcher,ENTRY_CREATE,ENTRY_DELETE,ENTRY_MODIFY);  count++;  if (trace)   System.out.format("register: %s\n",dir);}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == AnnotableElement.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == ModifiableElement.class) {switch (derivedFeatureID) {case N4JSPackage.N4_MEMBER_ANNOTATION_LIST__DECLARED_MODIFIERS:    return N4JSPackage.MODIFIABLE_ELEMENT__DECLARED_MODIFIERS;default :  return -1;}}if (baseClass == TypeProvidingElement.class) {switch (derivedFeatureID) {default :return -1;}}if (baseClass == TypableElement.class) {switch (derivedFeatureID) {default :return -1;}}if (baseClass == NamedElement.class) {switch (derivedFeatureID) {default :return -1;}}if (baseClass == N4MemberDeclaration.class) {switch (derivedFeatureID) {case N4JSPackage.N4_MEMBER_ANNOTATION_LIST__OWNER:return N4JSPackage.N4_MEMBER_DECLARATION__OWNER;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  protected void doLoadData(){  final URL n3=TestGOM.class.getResource("testgom.n3");  try {    ((IGOMProxy)m_delegate).load(n3,RDFFormat.N3);  } catch (  Exception e) {    fail("Unable to load test data");  }}  }
class C{  public static boolean checkForInternetConnection(Context context,String TAG){  boolean internetIsAvailable=false;  try {    ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);    NetworkInfo activeNetworkInfo=connectivityManager.getActiveNetworkInfo();    if (activeNetworkInfo != null && activeNetworkInfo.isConnected() && activeNetworkInfo.isAvailable()) {      internetIsAvailable=true;    }  } catch (  Exception e) {    logThis(TAG,"checkForInternetConnection Exception " + e.getMessage(),e);  }  return internetIsAvailable;}  }
class C{  protected void makeEllipsoid(double a,double b,double c,int subdivisions,Geometry dest){  GeometryBuilder gb=this.getGeometryBuilder();  gb.setOrientation(GeometryBuilder.OUTSIDE);  GeometryBuilder.IndexedTriangleBuffer itb=gb.tessellateEllipsoidBuffer((float)a,(float)b,(float)c,subdivisions);  FloatBuffer normalBuffer=Buffers.newDirectFloatBuffer(3 * itb.getVertexCount());  gb.makeIndexedTriangleBufferNormals(itb,normalBuffer);  dest.setElementData(GL.GL_TRIANGLES,itb.getIndexCount(),itb.getIndices());  dest.setVertexData(itb.getVertexCount(),itb.getVertices());  dest.setNormalData(normalBuffer.limit(),normalBuffer);}  }
class C{  public byte[] encode(){  char type=getAttributeType();  byte[] binValue=new byte[HEADER_LENGTH + getDataLength()];  binValue[0]=(byte)(type >> 8);  binValue[1]=(byte)(type & 0x00FF);  binValue[2]=(byte)(getDataLength() >> 8);  binValue[3]=(byte)(getDataLength() & 0x00FF);  binValue[4]=(byte)((tieBreaker & 0xFF00000000000000L) >> 56);  binValue[5]=(byte)((tieBreaker & 0x00FF000000000000L) >> 48);  binValue[6]=(byte)((tieBreaker & 0x0000FF0000000000L) >> 40);  binValue[7]=(byte)((tieBreaker & 0x000000FF00000000L) >> 32);  binValue[8]=(byte)((tieBreaker & 0x00000000FF000000L) >> 24);  binValue[9]=(byte)((tieBreaker & 0x0000000000FF0000L) >> 16);  binValue[10]=(byte)((tieBreaker & 0x000000000000FF00L) >> 8);  binValue[11]=(byte)(tieBreaker & 0x00000000000000FFL);  return binValue;}  }
class C{  public void onCreate(SQLiteDatabase paramSQLiteDatabase){  int numSchemas=sSchemas.length;  for (int i=0; i < numSchemas; i++) {    try {      String[][] schema=(String[][])sSchemas[i];      paramSQLiteDatabase.execSQL(createTableQueryFromArray(sTables[i],schema));    } catch (    Exception localException) {      while (true)       localException.printStackTrace();    }  }}  }
class C{  public void testNegativeRangeQuery(){  assertQ("Collated RangeQ: ",req("fl","id","q","sort_ar:[\u062F TO \u0698]","sort","id asc"),"//*[@numFound='0']");}  }
class C{  public void scale(float x,float y,float z){  g.scale(x,y,z);}  }
class C{  public int leader(){  return leader;}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  private BindingSet joinBindingSets(BindingSet leftBs,BindingSet rightBs){  Set<String> commonVars=Sets.intersection(leftBs.getBindingNames(),rightBs.getBindingNames());  for (  String s : commonVars) {    if (!leftBs.getValue(s).equals(rightBs.getValue(s)) && !unAssuredVariables.contains(s)) {      return EMPTY_BINDINGSET;    }  }  QueryBindingSet bs=new QueryBindingSet(removeConstants(leftBs));  rightBs=removeConstants(rightBs);  for (  String s : rightBs.getBindingNames()) {    if (bs.getValue(s) == null) {      bs.addBinding(s,rightBs.getValue(s));    }  }  return bs;}  }
class C{  public T caseAnonymous_numExpr_4_(Anonymous_numExpr_4_ object){  return null;}  }
class C{  public Builder aclWriteRoles(List<String> aclWriteRoles){  aclBuilder().writeRoles(aclWriteRoles);  return this;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof CombinedRangeCategoryPlot)) {    return false;  }  CombinedRangeCategoryPlot that=(CombinedRangeCategoryPlot)obj;  if (this.gap != that.gap) {    return false;  }  if (!ObjectUtilities.equal(this.subplots,that.subplots)) {    return false;  }  return super.equals(obj);}  }
class C{  public ArrayMemberValue(MemberValue t,ConstPool cp){  super('[',cp);  type=t;  values=null;}  }
class C{  public CUipcEventHandle(){}  }
class C{  private OCFile(Parcel source){  mId=source.readLong();  mParentId=source.readLong();  mLength=source.readLong();  mCreationTimestamp=source.readLong();  mModifiedTimestamp=source.readLong();  mModifiedTimestampAtLastSyncForData=source.readLong();  mRemotePath=source.readString();  mLocalPath=source.readString();  mMimeType=source.readString();  mNeedsUpdating=source.readInt() == 0;  mFavorite=source.readInt() == 1;  mLastSyncDateForProperties=source.readLong();  mLastSyncDateForData=source.readLong();  mEtag=source.readString();  mShareByLink=source.readInt() == 1;  mPublicLink=source.readString();  mPermissions=source.readString();  mRemoteId=source.readString();  mNeedsUpdateThumbnail=source.readInt() == 1;  mIsDownloading=source.readInt() == 1;  mEtagInConflict=source.readString();  mShareWithSharee=source.readInt() == 1;}  }
class C{  public void validateNoDuplicateQueryStringParams(Map<String,String[]> parameterMap,String... parametersToCheck) throws IllegalArgumentException {  List<String> parametersToCheckList=Arrays.asList(parametersToCheck);  for (  Map.Entry<String,String[]> mapEntry : parameterMap.entrySet()) {    if ((parametersToCheckList.contains(mapEntry.getKey())) && (mapEntry.getValue().length != 1)) {      throw new IllegalArgumentException("Found " + mapEntry.getValue().length + " occurrences of query string parameter \""+ mapEntry.getKey()+ "\", but 1 expected. Values found: \""+ StringUtils.join(mapEntry.getValue(),", ")+ "\".");    }  }}  }
class C{  public boolean has(String key){  return this.map.containsKey(key);}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public static boolean isBasicType(Object object){  for (  Class<?> clazz : BASIC_DATA_TYPES) {    if (object.getClass().equals(clazz)) {      return true;    } else     if (clazz.isAssignableFrom(object.getClass())) {      return true;    }  }  return false;}  }
class C{  public synchronized void unpack(File in,JarOutputStream out) throws IOException {  if (in == null) {    throw new NullPointerException("null input");  }  if (out == null) {    throw new NullPointerException("null output");  }  try (FileInputStream instr=new FileInputStream(in)){    unpack(instr,out);  }   if (props.getBoolean(Utils.UNPACK_REMOVE_PACKFILE)) {    in.delete();  }}  }
class C{  public EncodingTagTest(String testName){  super(testName);}  }
class C{  public CipherParameters decrypt(byte[] in,int keyLen){  return decrypt(in,0,in.length,keyLen);}  }
class C{  public static void showWarning(final Component parent,final String msg){  JOptionPane.showMessageDialog(isIconified(parent) ? null : parent,msg,System.getProperty(DEFAULT_WINDOW_TITLE_PROPERTY),JOptionPane.WARNING_MESSAGE);}  }
class C{  public final void writeBoolean(boolean v){  write(v ? 1 : 0);}  }
class C{  @Override public void collectMetaInformation(final GamlProperties meta){}  }
class C{  public static void notify(Context context,String tag,int id,NotificationCompat.Builder builder){  NotificationManagerCompat nm=NotificationManagerCompat.from(context);  nm.notify(tag,id,builder.build());}  }
class C{  public static Sha256Hash of(File file) throws IOException {  FileInputStream in=new FileInputStream(file);  try {    return of(ByteStreams.toByteArray(in));  }  finally {    in.close();  }}  }
class C{  public int size(){  return delegate.size();}  }
class C{  public void print(PrintWriter output,int w,int d){  DecimalFormat format=new DecimalFormat();  format.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));  format.setMinimumIntegerDigits(1);  format.setMaximumFractionDigits(d);  format.setMinimumFractionDigits(d);  format.setGroupingUsed(false);  print(output,format,w + 2);}  }
class C{  @RequestMapping(value="/users",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Secured(AuthoritiesConstants.ADMIN) public ResponseEntity<User> createUser(@RequestBody User user) throws URISyntaxException {  log.debug("REST request to save User : {}",user);  if (user.getId() != null) {    return ResponseEntity.badRequest().header("Failure","A new user cannot already have an ID").body(null);  }  User result=userRepository.save(user);  return ResponseEntity.created(new URI("/api/users/" + result.getId())).headers(HeaderUtil.createEntityCreationAlert("user",result.getId().toString())).body(result);}  }
class C{  public static int[] selectionSort(int[] list){  for (int i=0; i < list.length - 1; i++) {    int smallestVal=list[i];    int smallestIndex=i;    for (int j=i + 1; j < list.length; j++) {      if (i != j && list[j] < smallestVal) {        smallestIndex=j;        smallestVal=list[j];      }    }    int cup=list[i];    list[i]=smallestVal;    list[smallestIndex]=cup;  }  return list;}  }
class C{  public static String printCustomerBarcode(Properties ctx,CustomerCart cart,String trxName) throws Exception {  ArrayList<CustomerBean> customerList=null;  CustomerCart customerCart=cart;  if (customerCart != null) {    customerList=cart.getCustomers();  } else {    customerList=new ArrayList<CustomerBean>();  }  StringBuffer barcodeData=new StringBuffer();  int bpartnerId=0;  for (int i=0; i < customerList.size(); i++) {    CustomerBean customerBean=customerList.get(i);    bpartnerId=customerBean.getBpartnerId();    StringBuffer customerName=new StringBuffer();    if (customerBean.getPartnerName() != null) {      customerName.append(customerBean.getPartnerName()).append(" ");    }    if (customerBean.getSurname() != null) {      customerName.append(customerBean.getSurname());    }    barcodeData.append(BarcodeManager.getBarcodeData(customerName.toString(),null,bpartnerId + "",null,null,1,false));  }  return barcodeData.toString();}  }
class C{  public static JSONArray toJSONArray(String string) throws JSONException {  return toJSONArray(new XMLTokener(string));}  }
class C{  public ResultPage(final PageParameters params){  super(params);  add(new StandardFooter(FOOTER));  add(new StandardHeader(HEADER));  add(new FeedbackPanel(FEEDBACK));  add(new ServerSideJs("serverSideJs"));  add(new HeaderMetaInclude("headerInclude"));}  }
class C{  public static int mostSignificantBit(long x){  if (x == 0)   return -1;  int msb=0;  if ((x & 0xFFFFFFFF00000000L) != 0) {    x>>>=(1 << 5);    msb+=(1 << 5);  }  if ((x & 0xFFFF0000) != 0) {    x>>>=(1 << 4);    msb+=(1 << 4);  }  x|=x << 16;  x|=x << 32;  final long y=x & 0xFF00F0F0CCCCAAAAL;  long t=0x8000800080008000L & (y | ((y | 0x8000800080008000L) - (x ^ y)));  t|=t << 15;  t|=t << 30;  t|=t << 60;  return (int)(msb + (t >>> 60));}  }
class C{  public void negate(){  type=getType().negate();  negateStrings();}  }
class C{  @Override public String generateToolTip(XYDataset data,int series,int item){  return getToolTipText(series,item);}  }
class C{  public void show(int timeout){  if (!mShowing && mAnchor != null) {    setProgress();    if (mPauseButton != null) {      mPauseButton.requestFocus();    }    disableUnsupportedButtons();    updateFloatingWindowLayout();    mWindowManager.addView(mDecor,mDecorLayoutParams);    mShowing=true;  }  updatePausePlay();  mHandler.sendEmptyMessage(SHOW_PROGRESS);  if (timeout != 0) {    mHandler.removeMessages(FADE_OUT);    Message msg=mHandler.obtainMessage(FADE_OUT);    mHandler.sendMessageDelayed(msg,timeout);  }}  }
class C{  public T caseAnonymous_traceDirective_1_(Anonymous_traceDirective_1_ object){  return null;}  }
class C{  public ConcurrentHashMapPro(int initialCapacity,float loadFactor){  this(initialCapacity,loadFactor,DEFAULT_CONCURRENCY_LEVEL);}  }
class C{  public void reload(){  internalLoad();}  }
class C{  @Override public String render(String view,Object model){  Mustache mustache=mustacheFactory.compile(view);  StringWriter stringWriter=new StringWriter();  try {    mustache.execute(stringWriter,model).close();  } catch (  IOException e) {    throw new RuntimeTemplateException(e);  }  return stringWriter.toString();}  }
class C{  protected SVGOMComponentTransferFunctionElement(){}  }
class C{  public ConjunctionMatcher<T> and(Matcher<T> matcher){  requireNonNull(matcher,"matcher");  return new ConjunctionMatcher<>(compositeDescription,concat(matchers,matcher));}  }
class C{  public void reset(){  reset(true,true);}  }
class C{  private static Emoticon parseEmote(JSONObject o,String urlTemplate,String channelRestriction){  try {    String url=urlTemplate;    String code=(String)o.get("code");    String info=(String)o.get("channel");    String id=(String)o.get("id");    String imageType=null;    if (o.get("imageType") instanceof String) {      imageType=(String)o.get("imageType");    }    if (code == null || code.isEmpty() || id == null || id.isEmpty()) {      return null;    }    Emoticon.Builder builder=new Emoticon.Builder(Emoticon.Type.BTTV,code,url);    builder.setStream(info);    builder.setLiteral(true);    builder.setStringId(id);    if (channelRestriction != null) {      builder.addStreamRestriction(channelRestriction);    }    if (imageType != null && imageType.equals("gif")) {      builder.setAnimated(true);    }    Object restriction=o.get("restrictions");    if (restriction != null && restriction instanceof JSONObject) {      JSONObject restrictions=(JSONObject)restriction;      for (      Object r : restrictions.keySet()) {        boolean knownAndValid=addRestriction(r,restrictions,builder);        if (!knownAndValid) {          return null;        }      }    }    return builder.build();  } catch (  ClassCastException|NullPointerException ex) {    LOGGER.warning("BTTV: Error parsing emote: " + o + " ["+ ex+ "]");    return null;  }}  }
class C{  public FSScrollPane(JPanel aview){  super(aview,VERTICAL_SCROLLBAR_ALWAYS,HORIZONTAL_SCROLLBAR_ALWAYS);  getVerticalScrollBar().setUnitIncrement(15);}  }
class C{  @SuppressWarnings("unchecked") public ListIterator<AbstractInsnNode> iterator(int index){  return new InsnListIterator(index);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  void disableNonexistentListeners(){  int currentUser=ActivityManager.getCurrentUser();  String flatIn=Settings.Secure.getStringForUser(mContext.getContentResolver(),Settings.Secure.ENABLED_NOTIFICATION_LISTENERS,currentUser);  if (!TextUtils.isEmpty(flatIn)) {    if (DBG)     Slog.v(TAG,"flat before: " + flatIn);    PackageManager pm=mContext.getPackageManager();    List<ResolveInfo> installedServices=pm.queryIntentServicesAsUser(new Intent(NotificationListenerService.SERVICE_INTERFACE),PackageManager.GET_SERVICES | PackageManager.GET_META_DATA,currentUser);    Set<ComponentName> installed=new HashSet<ComponentName>();    for (int i=0, count=installedServices.size(); i < count; i++) {      ResolveInfo resolveInfo=installedServices.get(i);      ServiceInfo info=resolveInfo.serviceInfo;      if (!android.Manifest.permission.BIND_NOTIFICATION_LISTENER_SERVICE.equals(info.permission)) {        Slog.w(TAG,"Skipping notification listener service " + info.packageName + "/"+ info.name+ ": it does not require the permission "+ android.Manifest.permission.BIND_NOTIFICATION_LISTENER_SERVICE);        continue;      }      installed.add(new ComponentName(info.packageName,info.name));    }    String flatOut="";    if (!installed.isEmpty()) {      String[] enabled=flatIn.split(ENABLED_NOTIFICATION_LISTENERS_SEPARATOR);      ArrayList<String> remaining=new ArrayList<String>(enabled.length);      for (int i=0; i < enabled.length; i++) {        ComponentName enabledComponent=ComponentName.unflattenFromString(enabled[i]);        if (installed.contains(enabledComponent)) {          remaining.add(enabled[i]);        }      }      flatOut=TextUtils.join(ENABLED_NOTIFICATION_LISTENERS_SEPARATOR,remaining);    }    if (DBG)     Slog.v(TAG,"flat after: " + flatOut);    if (!flatIn.equals(flatOut)) {      Settings.Secure.putStringForUser(mContext.getContentResolver(),Settings.Secure.ENABLED_NOTIFICATION_LISTENERS,flatOut,currentUser);    }  }}  }
class C{  public String toString(String fmt){  return toString(fmt,"[","]",", ","; ");}  }
class C{  public static Eml loadWithLocale(File emlFile,Locale locale){  Eml eml=null;  Locale currentLocale=Locale.getDefault();  try {    InputStream in=new FileInputStream(emlFile);synchronized (currentLocale) {      Locale.setDefault(locale);      eml=EmlFactory.build(in);      Locale.setDefault(currentLocale);    }  } catch (  FileNotFoundException e) {    eml=new Eml();  }catch (  IOException e) {    LOG.error(e);  }catch (  SAXException e) {    LOG.error("Invalid EML document",e);    eml=new Eml();  }catch (  Exception e) {    eml=new Eml();  } finally {    Locale.setDefault(currentLocale);  }  return eml;}  }
class C{  public ValidationResult(){  setResponseCode(HttpServletResponse.SC_OK);}  }
class C{  protected CCLabelAtlas(CharSequence theString,String charmapfile,int w,int h,char c){  super(charmapfile,w,h,theString.length());  string_=new TextBuilder(theString.length());  string_.append(theString);  mapStartChar=c;  updateAtlasValues();}  }
class C{  public JarEntry(JarEntry je){  this((ZipEntry)je);  this.attr=je.attr;  this.certs=je.certs;  this.signers=je.signers;}  }
class C{  public void initWeights(int d,int L,int H[]) throws Exception {  int numHidden=H.length;  if (getDebug()) {    System.out.println("Initializing " + (H.length) + " hidden Layers ...");    System.out.println("d = " + d);    System.out.println("L = " + L);  }  Matrix W[]=new Matrix[H.length + 1];  int h=H[0];  H=new int[]{d,h,L};  System.out.println("" + Arrays.toString(H));  for (int n=0; n < H.length - 1; n++) {    W[n]=MatrixUtils.randomn(H[n] + 1,H[n + 1],r).timesEquals(0.1);    if (getDebug())     System.out.println("W[" + n + "] = "+ (H[n] + 1)+ " x "+ H[n + 1]);  }  this.W=W;  makeMomentumMatrices();}  }
class C{  public static boolean putInt(Context context,String key,int value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putInt(key,value);  return editor.commit();}  }
class C{  public void displayInfoMessage(String text){  displayMessage(name,text,TrayIcon.MessageType.INFO);}  }
class C{  public static RuntimeException approxSourceException(Node node,Throwable cause){  final StackTraceElement[] elements=approxSourceStackTraceElement(node);  return createBailoutException(cause == null ? "" : cause.getMessage(),cause,elements);}  }
class C{  @Override protected String createRelation(String relStr){  return relStr;}  }
class C{  public static User createUser(){  return new UserImpl();}  }
class C{  public String printLeafModels(){  StringBuffer text=new StringBuffer();  if (m_isLeaf) {    text.append("\nLM num: " + m_leafModelNum);    text.append(m_nodeModel.toString());    text.append("\n");  } else {    text.append(m_left.printLeafModels());    text.append(m_right.printLeafModels());  }  return text.toString();}  }
class C{  public void add(Component farLeft,Component left,Component center,Component right,Component farRight){  gbc.insets=new Insets(0,2,0,2);  gbc.gridy=y;  if (farLeft != null) {    gbc.gridx=0;    gbc.weightx=0;    gbc.anchor=GridBagConstraints.WEST;    gbc.fill=GridBagConstraints.NONE;    gbc.gridwidth=1;    gridbag.setConstraints(farLeft,gbc);    consolePanel.add(farLeft);  }  if (left != null) {    gbc.gridx=1;    gbc.weightx=0;    gbc.anchor=GridBagConstraints.EAST;    gbc.fill=GridBagConstraints.NONE;    gbc.gridwidth=1;    gridbag.setConstraints(left,gbc);    consolePanel.add(left);  }  if (center != null) {    gbc.gridx=2;    gbc.weightx=0;    gbc.anchor=GridBagConstraints.CENTER;    gbc.fill=GridBagConstraints.NONE;    gbc.gridwidth=1;    gridbag.setConstraints(center,gbc);    consolePanel.add(center);  }  if (right != null) {    gbc.gridx=3;    gbc.weightx=1;    gbc.anchor=GridBagConstraints.WEST;    gbc.fill=GridBagConstraints.HORIZONTAL;    gbc.gridwidth=1;    gridbag.setConstraints(right,gbc);    consolePanel.add(right);  }  if (farRight != null) {    gbc.gridx=4;    gbc.weightx=0;    gbc.anchor=GridBagConstraints.EAST;    gbc.fill=GridBagConstraints.NONE;    gbc.gridwidth=GridBagConstraints.REMAINDER;    gridbag.setConstraints(farRight,gbc);    consolePanel.add(farRight);  }  y++;}  }
class C{  public void sendAttackData(int aen,Vector<EntityAction> attacks){  Object[] data=new Object[2];  data[0]=aen;  data[1]=attacks;  send(new Packet(Packet.COMMAND_ENTITY_ATTACK,data));  flushConn();}  }
class C{  @SuppressWarnings("PMD.DoNotCallSystemExit") public static void main(String[] args){  ReturnValue returnValue;  try {    LoggerContext loggerContext=Configurator.initialize(null,ToolsCommonConstants.LOG4J_CONFIG_LOCATION);    if (loggerContext == null) {      throw new IllegalArgumentException("Invalid configuration found at resource location: \"" + ToolsCommonConstants.LOG4J_CONFIG_LOCATION + "\".");    }    DownloaderApp downloaderApp=new DownloaderApp();    returnValue=downloaderApp.go(args);  } catch (  Exception e) {    LOGGER.error("Error running herd downloader. {}",e.toString(),e);    returnValue=ReturnValue.FAILURE;  }  System.exit(returnValue.getReturnCode());}  }
class C{  public Query except(Query query){  if (immutable) {    return fork().except(query);  }  addCompoundSelect(CompoundSelect.except(query));  return this;}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] reverse(T[] self){  return reverse(self,false);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.USE_STATEMENT___USE_1:    return USE_1_EDEFAULT == null ? use_1 != null : !USE_1_EDEFAULT.equals(use_1);}return super.eIsSet(featureID);}  }
class C{  @ZeppelinApi public void remove(String name){  ResourcePool resourcePool=interpreterContext.getResourcePool();  resourcePool.remove(name);}  }
class C{  public boolean isFresh(){  return (m_next == 0);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_ENTRY_OR_EXIT_ACTION_1__CODE_LANG_1:    return codeLang_1 != null && !codeLang_1.isEmpty();case UmplePackage.ANONYMOUS_ENTRY_OR_EXIT_ACTION_1__CODE_LANGS_1:  return codeLangs_1 != null && !codeLangs_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public Object readRemote() throws IOException {  String type=readType();  String url=readString();  return resolveRemote(type,url);}  }
class C{  public void executeCqs() throws CqException {  try {    getCqService().executeAllClientCqs();  } catch (  CqException cqe) {    if (logger.isDebugEnabled()) {      logger.debug("Unable to execute all cqs. Error :{}",cqe.getMessage(),cqe);    }  }}  }
class C{  void wakeOut(){  OnAvailable outFlow=_outFlow;  if (outFlow == null) {    return;  }  if (_creditsIn <= _queue.head()) {    return;  }  StateOutPipe stateOld;  StateOutPipe stateNew;  do {    stateOld=_stateOutRef.get();    if (!stateOld.isFull()) {      return;    }    stateNew=stateOld.toWake();  } while (!_stateOutRef.compareAndSet(stateOld,stateNew));  try (OutboxAmp outbox=OutboxAmp.currentOrCreate(_outRef.services())){    Objects.requireNonNull(outbox);    PipeWakeOutMessage<T> msg=new PipeWakeOutMessage<>(outbox,_outRef,this,outFlow);    outbox.offer(msg);  } }  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public CircularRangeFan(String sidc){  super(sidc);  this.rings=new ArrayList<SurfaceCircle>();}  }
class C{  private static boolean validateCheckinConflicts(final Shell shell,final TFSRepository repository,final CheckinEvaluationResult evaluationResult){  final CheckinConflict[] conflicts=evaluationResult.getConflicts();  if (conflicts.length == 0) {    return true;  }  for (int i=0; i < conflicts.length; i++) {    if (VersionControlConstants.ITEM_NOT_CHECKED_OUT_EXCEPTION.equals(conflicts[i].getCode())) {      final RefreshPendingChangesCommand refreshCommand=new RefreshPendingChangesCommand(repository);      final ICommandExecutor executor=UICommandExecutorFactory.newUICommandExecutor(shell);      executor.execute(refreshCommand);      MessageDialog.openError(shell,Messages.getString("CheckinControl.CheckinConflictsDialogTitle"),Messages.getString("CheckinControl.PendingChangesOutdated"));      return false;    }  }  return true;}  }
class C{  public void error(OutputStream os,String to,HeadersAmp headers,ErrorAmp error) throws IOException {  init(os);  OutH3 out=_out;  if (out == null)   return;  if (log.isLoggable(Level.FINEST)) {    log.finest("error" + error + " (in "+ this+ ")"+ " {to:"+ to+ ", "+ headers+ "}");  }  out.writeLong(MessageTypeHamp.ERROR.ordinal());  writeHeaders(out,headers);  writeFromAddress(out,to);  out.writeString(error.getCode().toString());  out.writeString(error.getMessage());  out.writeObject(error.getDetail());  out.flush();}  }
class C{  public IJavaElement createLambdaTypeElement(LambdaExpression expression,ICompilationUnit unit,HashSet existingElements,HashMap knownScopes){  return createElement(expression.scope,expression.sourceStart(),unit,existingElements,knownScopes).getParent();}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) @Override public IType findCommonSupertypeWith(final IType<?> type){  return type == this ? this : type.id() == IType.FLOAT ? type : Types.NO_TYPE;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:41.123 -0500",hash_original_method="C319F61C77453FA6E7A0623E5D902038",hash_generated_method="17F9EECE1A2A53AF05E8AE65670A5B6E") public static void write(HprofData data,OutputStream outputStream) throws IOException {  new BinaryHprofWriter(data,outputStream).write();}  }
class C{  public void show(){  show(sDefaultTimeout);}  }
class C{  public BlogPostQuery(URL feedUrl){  super(feedUrl);}  }
class C{  public static Integer parse(String str) throws NumberFormatException {  if (str == null || str.isEmpty())   return null;  return new Integer(str);}  }
class C{  public static void write(String data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  private void enableEvents(){  for (int i=0; i < getTabCount(); i++)   getTab(i).enableEvents();}  }
class C{  @Override protected void finishUp(){  super.finishUp();  process();}  }
class C{  protected void attachNavMesh(Mesh navMesh){  if (navMesh == null)   return;  if (navGeom == null)   navGeom=new Geometry("NavMesh");  navGeom.setMesh(navMesh);  navGeom.setMaterial(getNavMaterial());  toolsNode.attachChild(navGeom);}  }
class C{  public Instant end(){  return end;}  }
class C{  public TIntDoubleHashMapDecorator(TIntDoubleHashMap map){  super();  this._map=map;}  }
class C{  @Nullable @Override public JobNotification findRevision(int id,int revisionNumber){  JobNotification result=null;  try {    begin();    AuditReader reader=AuditReaderFactory.get(getEntityManager());    result=reader.find(JobNotification.class,id,revisionNumber);    Hibernate.initialize(result.getLifecycleEvents());    result.getLifecycleEvents().contains(JobLifecycleEvent.QUEUE_ADD);    commit();  } catch (  NoResultException e) {    LOG.warn("No result for revision " + revisionNumber + " with id of "+ id);  } finally {    cleanup();  }  return result;}  }
class C{  public final synchronized boolean inCheck(){  return MoveGen.inCheck(game.tree.currentPos);}  }
class C{  public WordAlignmentState(final Rule rule,final int start){  trgPoints=new LinkedList<>();  srcLength=rule.getFrench().length;  numNT=rule.getArity();  srcStart=start;  final Map<Integer,List<Integer>> alignmentMap=rule.getAlignmentMap();  final int[] nonTerminalSourcePositions=rule.getNonTerminalSourcePositions();  final int[] trg=rule.getEnglish();  for (int trgIndex=0; trgIndex < trg.length; trgIndex++) {    final AlignedSourceTokens trgPoint=new AlignedSourceTokens();    if (trg[trgIndex] >= 0) {      if (alignmentMap.containsKey(trgIndex)) {        for (        int srcIdx : alignmentMap.get(trgIndex)) {          trgPoint.add(srcStart + srcIdx);        }      } else {        trgPoint.setNull();      }    } else {      trgPoint.setNonTerminal();      final int absoluteNonTerminalSourcePosition=srcStart + nonTerminalSourcePositions[Math.abs(trg[trgIndex]) - 1];      trgPoint.add(absoluteNonTerminalSourcePosition);    }    trgPoints.add(trgPoint);  }}  }
class C{  private void destroyNestedWorkflows(Workflow parent){  Set<URI> childWorkflowSet=parent._childWorkflows;  if (childWorkflowSet == null || childWorkflowSet.isEmpty()) {    return;  }  _log.info("Destroying child workflows: " + childWorkflowSet.toString());  for (  URI childWorkflowURI : childWorkflowSet) {    for (int retryCount=0; retryCount < WORKFLOW_DESTROY_MAX_RETRIES; retryCount++) {      if (retryCount > 0) {        _log.info(String.format("Waiting on child workflow %s to reach terminal state, retryCount %d",childWorkflowURI,retryCount));      }      Workflow childWorkflow=null;      try {        childWorkflow=loadWorkflowFromUri(childWorkflowURI);      } catch (      Exception ex) {        _log.info(String.format("Workflow %s unable to load child workflow %s for destruction",parent.getWorkflowURI(),childWorkflowURI));        break;      }      if (childWorkflow != null) {        if (childWorkflow.allStatesTerminal()) {          destroyWorkflow(childWorkflow);          break;        } else {          _log.info(String.format("Child workflow %s still executing but parent %s being destroyed; may need to be manually removed from ZK",childWorkflow.getWorkflowURI(),parent.getWorkflowURI()));          try {            Thread.sleep(1000);          } catch (          Exception ex) {            _log.info("Early sleep awaking waiting on child workflow: " + childWorkflowURI.toString());          }        }      }    }  }}  }
class C{  public CGlobalNodeCommentWrapper(final INaviViewNode node){  m_node=node;}  }
class C{  public OutputTargetsITCase(String name){  super(name);}  }
class C{  public static long parseLong(String s){  s=trimPlusSign(s);  return Long.parseLong(s);}  }
class C{  void write(EngineArgs ea,Authenticator authenticator,CipherBox writeCipher) throws IOException {  assert (contentType() == ct_application_data);  if (authenticator == MAC.NULL) {    return;  }  if (ea.getAppRemaining() == 0) {    return;  }  int length;  if (engine.needToSplitPayload(writeCipher,protocolVersion)) {    write(ea,authenticator,writeCipher,0x01);    ea.resetLim();    length=Math.min(ea.getAppRemaining(),maxDataSizeMinusOneByteRecord);  } else {    length=Math.min(ea.getAppRemaining(),maxDataSize);  }  if (length > 0) {    write(ea,authenticator,writeCipher,length);  }  return;}  }
class C{  private void addLine(GridField field,VEditor editor,boolean mandatory){  log.fine("Field=" + field);  JLabel label=VEditorFactory.getLabel(field);  label.setLabelFor((Component)editor);  editor.setReadWrite(true);  editor.setMandatory(mandatory);  field.addPropertyChangeListener(editor);  if (m_newRow) {    m_gbc.gridy=m_line++;    m_gbc.gridx=0;  } else   m_gbc.gridx=2;  m_gbc.insets=m_labelInsets;  m_gbc.fill=GridBagConstraints.HORIZONTAL;  m_gbc.weightx=0;  parameterPanel.add(label,m_gbc);  if (m_newRow)   m_gbc.gridx=1; else   m_gbc.gridx=3;  m_gbc.insets=m_fieldInsets;  m_gbc.fill=GridBagConstraints.HORIZONTAL;  m_gbc.weightx=1;  parameterPanel.add((Component)editor,m_gbc);  m_newRow=!m_newRow;}  }
class C{  public static History build(Weather weather){  History history=new History();  history.location=weather.base.location;  history.date=weather.base.date;  history.maxiTemp=weather.dailyList.get(0).temps[0];  history.miniTemp=weather.dailyList.get(0).temps[1];  return history;}  }
class C{  private int nextChunk() throws IOException {  int available=super.available();  if (available <= 0) {    available=1;  }  if (available > inBuf.length) {    available=super.read(inBuf,0,inBuf.length);  } else {    available=super.read(inBuf,0,available);  }  if (available < 0) {    if (finalized) {      return -1;    }    try {      if (bufferedBlockCipher != null) {        maxBuf=bufferedBlockCipher.doFinal(buf,0);      } else {        maxBuf=0;      }    } catch (    Exception e) {      throw new IOException("error processing stream: " + e.toString());    }    bufOff=0;    finalized=true;    if (bufOff == maxBuf) {      return -1;    }  } else {    bufOff=0;    try {      if (bufferedBlockCipher != null) {        maxBuf=bufferedBlockCipher.processBytes(inBuf,0,available,buf,0);      } else {        streamCipher.processBytes(inBuf,0,available,buf,0);        maxBuf=available;      }    } catch (    Exception e) {      throw new IOException("error processing stream: " + e.toString());    }    if (maxBuf == 0) {      return nextChunk();    }  }  return maxBuf;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.BINDING_PROPERTY__VALUE:    setValue((BindingElement)null);  return;case N4JSPackage.BINDING_PROPERTY__VAR_DECL:setVarDecl((VariableDeclaration)null);return;}super.eUnset(featureID);}  }
class C{  public void testEmptyMappings() throws Exception {  checkNullOrEmptyMappings(new HashMap<String,String>());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void addMembers(Relation relation,ArrayList<OsmElement> members){  createCheckpoint(R.string.undo_action_update_relations);  getDelegator().addMembersToRelation(relation,members);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ListDeadLetterSourceQueuesResult listDeadLetterSourceQueues(ListDeadLetterSourceQueuesRequest listDeadLetterSourceQueuesRequest) throws AmazonServiceException, AmazonClientException {  return amazonSqsToBeExtended.listDeadLetterSourceQueues(listDeadLetterSourceQueuesRequest);}  }
class C{  private static void doSort(double[] a,int left,int right,double[] work,int workBase,int workLen){  if (right - left < QUICKSORT_THRESHOLD) {    sort(a,left,right,true);    return;  }  int[] run=new int[MAX_RUN_COUNT + 1];  int count=0;  run[0]=left;  for (int k=left; k < right; run[count]=k) {    if (a[k] < a[k + 1]) {      while (++k <= right && a[k - 1] <= a[k])       ;    } else     if (a[k] > a[k + 1]) {      while (++k <= right && a[k - 1] >= a[k])       ;      for (int lo=run[count] - 1, hi=k; ++lo < --hi; ) {        double t=a[lo];        a[lo]=a[hi];        a[hi]=t;      }    } else {      for (int m=MAX_RUN_LENGTH; ++k <= right && a[k - 1] == a[k]; ) {        if (--m == 0) {          sort(a,left,right,true);          return;        }      }    }    if (++count == MAX_RUN_COUNT) {      sort(a,left,right,true);      return;    }  }  if (run[count] == right++) {    run[++count]=right;  } else   if (count == 1) {    return;  }  byte odd=0;  for (int n=1; (n<<=1) < count; odd^=1)   ;  double[] b;  int ao, bo;  int blen=right - left;  if (work == null || workLen < blen || workBase + blen > work.length) {    work=new double[blen];    workBase=0;  }  if (odd == 0) {    System.arraycopy(a,left,work,workBase,blen);    b=a;    bo=0;    a=work;    ao=workBase - left;  } else {    b=work;    ao=0;    bo=workBase - left;  }  for (int last; count > 1; count=last) {    for (int k=(last=0) + 2; k <= count; k+=2) {      int hi=run[k], mi=run[k - 1];      for (int i=run[k - 2], p=i, q=mi; i < hi; ++i) {        if (q >= hi || p < mi && a[p + ao] <= a[q + ao]) {          b[i + bo]=a[p++ + ao];        } else {          b[i + bo]=a[q++ + ao];        }      }      run[++last]=hi;    }    if ((count & 1) != 0) {      for (int i=right, lo=run[count - 1]; --i >= lo; b[i + bo]=a[i + ao])       ;      run[++last]=right;    }    double[] t=a;    a=b;    b=t;    int o=ao;    ao=bo;    bo=o;  }}  }
class C{  @Override public final boolean sendValues(){  return false;}  }
class C{  protected static FrequencySet<String> combineAndClip(FrequencySet<String> a,FrequencySet<String> b,int clip){  FrequencySet<String> result=new FrequencySet<String>();  for (  Map.Entry<String,MutableInt> entry : a.entrySet()) {    for (int i=0; i < entry.getValue().v; i++) {      result.add(entry.getKey());    }  }  for (  Map.Entry<String,MutableInt> entry : b.entrySet()) {    for (int i=0; i < entry.getValue().v; i++) {      result.add(entry.getKey());    }  }  for (  Map.Entry<String,MutableInt> entry : result.entrySet()) {    entry.getValue().v=Math.min(entry.getValue().v,clip);  }  return result;}  }
class C{  public ElementReferenceExpressionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private StringBuffer format(BigInteger number,StringBuffer result,FieldPosition fieldPosition){  fieldPosition.setBeginIndex(0);  fieldPosition.setEndIndex(0);  return format(number,result,fieldPosition.getFieldDelegate(),false);}  }
class C{  public void invalidate(){  size=-1;}  }
class C{  public IndependenceTest indTestSubset(List vars){  if (vars.isEmpty()) {    throw new IllegalArgumentException("Subset may not be empty.");  }  int[] indices=new int[vars.size()];  int j=-1;  for (int i=0; i < variables.size(); i++) {    if (!vars.contains(variables.get(i))) {      continue;    }    indices[++j]=i;  }  DataSet newDataSet=dataSet.subsetColumns(indices);  return new IndTestGSquare(newDataSet,alpha);}  }
class C{  final V doRemove(Object key,Object value){  if (key == null)   throw new NullPointerException();  Comparator<? super K> cmp=comparator;  outer:   for (; ; ) {    for (Node<K,V> b=findPredecessor(key,cmp), n=b.next; ; ) {      Object v;      int c;      if (n == null)       break outer;      Node<K,V> f=n.next;      if (n != b.next)       break;      if ((v=n.value) == null) {        n.helpDelete(b,f);        break;      }      if (b.value == null || v == n)       break;      if ((c=cpr(cmp,key,n.key)) < 0)       break outer;      if (c > 0) {        b=n;        n=f;        continue;      }      if (value != null && !value.equals(v))       break outer;      if (!n.casValue(v,null))       break;      if (!n.appendMarker(f) || !b.casNext(n,f))       findNode(key); else {        findPredecessor(key,cmp);        if (head.right == null)         tryReduceLevel();      }      @SuppressWarnings("unchecked") V vv=(V)v;      return vv;    }  }  return null;}  }
class C{  private boolean testSQL(String sqlplus){  StringBuffer sbOut=new StringBuffer();  StringBuffer sbErr=new StringBuffer();  int result=-1;  try {    Process p=Runtime.getRuntime().exec(sqlplus);    InputStream in=p.getInputStream();    int c;    while ((c=in.read()) != -1) {      sbOut.append((char)c);      System.out.print((char)c);    }    in.close();    in=p.getErrorStream();    while ((c=in.read()) != -1)     sbErr.append((char)c);    in.close();    try {      Thread.yield();      result=p.exitValue();    } catch (    Exception e) {      Thread.sleep(200);      result=p.exitValue();    }  } catch (  Exception ex) {    log.warning(ex.toString());  }  log.finer(sbOut.toString());  if (sbErr.length() > 0)   log.warning(sbErr.toString());  return result == 0;}  }
class C{  @SubscribeEvent public void onPlayerTick(PlayerTickEvent event){  if (event.player.worldObj.provider.dimensionId == Configuration.spaceDimId) {    if (event.player.posY < 0 && !event.player.worldObj.isRemote) {      ISpaceObject object=getSpaceStationFromBlockCoords((int)event.player.posX,(int)event.player.posZ);      if (object != null) {        BlockPosition loc=object.getSpawnLocation();        event.player.fallDistance=0;        event.player.motionY=0;        event.player.setPositionAndUpdate(loc.x,loc.y,loc.z);        event.player.addChatComponentMessage(new ChatComponentText("You wake up finding yourself back on the station"));      }    }    int result=Math.abs(2 * (((int)event.player.posZ + Configuration.stationSize / 2) % (2 * Configuration.stationSize)) / Configuration.stationSize);    if (result == 0 || result == 3) {      event.player.motionZ=-event.player.motionZ;      if (result == 0) {        event.player.setPosition(event.player.posX,event.player.posY,event.player.posZ + (event.player.posZ < 0 ? Math.abs(event.player.posZ % 16) : (16 - event.player.posZ % 16)));      } else       event.player.setPosition(event.player.posX,event.player.posY,event.player.posZ - (event.player.posZ < 0 ? 16 - Math.abs(event.player.posZ % 16) : (event.player.posZ % 16)));    }    result=Math.abs(2 * (((int)event.player.posX + Configuration.stationSize / 2) % (2 * Configuration.stationSize)) / Configuration.stationSize);    if (event.player.posX < -Configuration.stationSize / 2)     if (result == 3)     result=0; else     if (result == 0)     result=3;    if (result == 0 || result == 3) {      event.player.motionX=-event.player.motionX;      if (result == 0) {        event.player.setPosition(event.player.posX + (event.player.posX < 0 ? Math.abs(event.player.posX % 16) : (16 - event.player.posX % 16)),event.player.posY,event.player.posZ);      } else       event.player.setPosition(event.player.posX - (event.player.posX < 0 ? 16 - Math.abs(event.player.posX % 16) : (event.player.posX % 16)),event.player.posY,event.player.posZ);    }  }}  }
class C{  public static void updateIM(Label label,IntersectionMatrix im){  im.setAtLeastIfValid(label.getLocation(0,Position.ON),label.getLocation(1,Position.ON),1);  if (label.isArea()) {    im.setAtLeastIfValid(label.getLocation(0,Position.LEFT),label.getLocation(1,Position.LEFT),2);    im.setAtLeastIfValid(label.getLocation(0,Position.RIGHT),label.getLocation(1,Position.RIGHT),2);  }}  }
class C{  public ConfigHandler(ConfigPersister persister,Class<?> configInterface){  this.persister=persister;  this.configInterface=configInterface;}  }
class C{  public static @Nullable SafetyNetResponse parse(@NonNull String decodedJWTPayload){  Log.d(TAG,"decodedJWTPayload json:" + decodedJWTPayload);  SafetyNetResponse response=new SafetyNetResponse();  try {    JSONObject root=new JSONObject(decodedJWTPayload);    if (root.has("nonce")) {      response.nonce=root.getString("nonce");    }    if (root.has("apkCertificateDigestSha256")) {      JSONArray jsonArray=root.getJSONArray("apkCertificateDigestSha256");      if (jsonArray != null) {        String[] certDigests=new String[jsonArray.length()];        for (int i=0; i < jsonArray.length(); i++) {          certDigests[i]=jsonArray.getString(i);        }        response.apkCertificateDigestSha256=certDigests;      }    }    if (root.has("apkDigestSha256")) {      response.apkDigestSha256=root.getString("apkDigestSha256");    }    if (root.has("apkPackageName")) {      response.apkPackageName=root.getString("apkPackageName");    }    if (root.has("ctsProfileMatch")) {      response.ctsProfileMatch=root.getBoolean("ctsProfileMatch");    }    if (root.has("timestampMs")) {      response.timestampMs=root.getLong("timestampMs");    }    return response;  } catch (  JSONException e) {    Log.e(TAG,"problem parsing decodedJWTPayload:" + e.getMessage(),e);  }  return null;}  }
class C{  public static ILaunchConfigurationWorkingCopy createLaunchConfigWorkingCopy(String launchConfigName,final IProject project,String url,boolean isExternal,boolean isGwtSuperDevModeEnabled) throws CoreException, OperationCanceledException {  assert (url != null);  ILaunchManager manager=DebugPlugin.getDefault().getLaunchManager();  ILaunchConfigurationType type=manager.getLaunchConfigurationType(WebAppLaunchConfiguration.TYPE_ID);  final ILaunchConfigurationWorkingCopy wc=type.newInstance(null,launchConfigName);  setDefaults(wc,project);  LaunchConfigurationUtilities.setProjectName(wc,project.getName());  if (isExternal) {    WebAppLaunchConfigurationWorkingCopy.setRunServer(wc,false);  }  GWTLaunchConfigurationWorkingCopy.setStartupUrl(wc,url);  IPath warDir=null;  if (WebAppUtilities.hasManagedWarOut(project)) {    warDir=WebAppUtilities.getManagedWarOut(project).getLocation();  }  if (warDir != null) {    WarArgumentProcessor warArgProcessor=new WarArgumentProcessor();    warArgProcessor.setWarDirFromLaunchConfigCreation(warDir.toOSString());    LaunchConfigurationProcessorUtilities.updateViaProcessor(warArgProcessor,wc);  }  wc.setMappedResources(new IResource[]{project});  GWTLaunchConfigurationWorkingCopy.setSuperDevModeEnabled(wc,isGwtSuperDevModeEnabled);  SuperDevModeArgumentProcessor sdmArgsProcessor=new SuperDevModeArgumentProcessor();  LaunchConfigurationProcessorUtilities.updateViaProcessor(sdmArgsProcessor,wc);  return wc;}  }
class C{  void updateForDecoderNotID(int pMfgID,int pModelID){  String msg="Found mfg " + pMfgID + " version "+ pModelID+ "; no such manufacterer defined";  log.warn(msg);  _statusLabel.setText(msg);  dTree.clearSelection();}  }
class C{  public JIntegerField(Composite parent,int style){  this(parent,style,0,true);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Element ownerElement;  String ownerElementName;  Attr attr;  Attr newAttr;  doc=(Document)load("staffNS",false);  element=doc.createElement("root");  attr=doc.createAttributeNS("http://www.w3.org/DOM/L1","L1:att");  newAttr=element.setAttributeNodeNS(attr);  ownerElement=attr.getOwnerElement();  ownerElementName=ownerElement.getNodeName();  assertEqualsIgnoreCase("attrgetownerelement02","root",ownerElementName);}  }
class C{  public static void main(String[] args){  TestWarnBadParamNames tester=new TestWarnBadParamNames();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.MODEL__MODEL:    return model != null;}return super.eIsSet(featureID);}  }
class C{  public static void sort(long[] array,int start,int end){  DualPivotQuicksort.sort(array,start,end);}  }
class C{  protected Parser(Scanner scanner) throws IOException {  super(scanner.env);  this.scanner=scanner;  ((Scanner)this).env=scanner.env;  ((Scanner)this).token=scanner.token;  ((Scanner)this).pos=scanner.pos;  this.actions=this;}  }
class C{  public CouldntConnectException(final Exception exception,final int errorCode,final String sqlState){  super(exception);  m_errorCode=errorCode;  m_sqlState=sqlState;  m_stackStacktrace=exception.getStackTrace();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static long[] subarray(long[] array,int startIndexInclusive,int endIndexExclusive){  if (array == null) {    return null;  }  if (startIndexInclusive < 0) {    startIndexInclusive=0;  }  if (endIndexExclusive > array.length) {    endIndexExclusive=array.length;  }  int newSize=endIndexExclusive - startIndexInclusive;  if (newSize <= 0) {    return EMPTY_LONG_ARRAY;  }  long[] subarray=new long[newSize];  System.arraycopy(array,startIndexInclusive,subarray,0,newSize);  return subarray;}  }
class C{  void attribClass(ClassSymbol c) throws CompletionFailure {  if (c.type.hasTag(ERROR))   return;  chk.checkNonCyclic(null,c.type);  Type st=types.supertype(c.type);  if ((c.flags_field & Flags.COMPOUND) == 0) {    if (st.hasTag(CLASS))     attribClass((ClassSymbol)st.tsym);    if (c.owner.kind == TYP && c.owner.type.hasTag(CLASS))     attribClass((ClassSymbol)c.owner);  }  if ((c.flags_field & UNATTRIBUTED) != 0) {    c.flags_field&=~UNATTRIBUTED;    Env<AttrContext> env=typeEnvs.get(c);    Env<AttrContext> lintEnv=env;    while (lintEnv.info.lint == null)     lintEnv=lintEnv.next;    env.info.lint=lintEnv.info.lint.augment(c);    Lint prevLint=chk.setLint(env.info.lint);    JavaFileObject prev=log.useSource(c.sourcefile);    ResultInfo prevReturnRes=env.info.returnResult;    try {      deferredLintHandler.flush(env.tree);      env.info.returnResult=null;      if (st.tsym == syms.enumSym && ((c.flags_field & (Flags.ENUM | Flags.COMPOUND)) == 0))       log.error(env.tree.pos(),"enum.no.subclassing");      if (st.tsym != null && ((st.tsym.flags_field & Flags.ENUM) != 0) && ((c.flags_field & (Flags.ENUM | Flags.COMPOUND)) == 0)) {        log.error(env.tree.pos(),"enum.types.not.extensible");      }      if (isSerializable(c.type)) {        env.info.isSerializable=true;      }      attribClassBody(env,c);      chk.checkDeprecatedAnnotation(env.tree.pos(),c);      chk.checkClassOverrideEqualsAndHashIfNeeded(env.tree.pos(),c);      chk.checkFunctionalInterface((JCClassDecl)env.tree,c);    }  finally {      env.info.returnResult=prevReturnRes;      log.useSource(prev);      chk.setLint(prevLint);    }  }}  }
class C{  public void createDatabaseEntitiesForUploadDownloadTesting(String namespaceCode,String businessObjectDefinitionName,String businessObjectFormatUsage,String businessObjectFormatFileType,Integer businessObjectFormatVersion){  businessObjectFormatDaoTestHelper.createBusinessObjectFormatEntity(namespaceCode,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,AbstractServiceTest.FORMAT_DESCRIPTION,AbstractServiceTest.LATEST_VERSION_FLAG_SET,AbstractServiceTest.PARTITION_KEY);}  }
class C{  private void saveAgentMapping(AgentMappings agentMappings) throws JAXBException, IOException {  transformator.marshall(pathResolver.getAgentMappingFilePath(),agentMappings,getRelativeToSchemaPath(pathResolver.getDefaultCiPath()).toString());}  }
class C{  @Override public boolean loadWeapon(Mounted mounted,Mounted mountedAmmo){  boolean success=false;  WeaponType wtype=(WeaponType)mounted.getType();  AmmoType atype=(AmmoType)mountedAmmo.getType();  if (mounted.getLocation() != mountedAmmo.getLocation()) {    return success;  }  Mounted bay=whichBay(getEquipmentNum(mounted));  if ((bay != null) && !bay.ammoInBay(getEquipmentNum(mountedAmmo))) {    return success;  }  if (mountedAmmo.isAmmoUsable() && !wtype.hasFlag(WeaponType.F_ONESHOT) && (atype.getAmmoType() == wtype.getAmmoType())&& (atype.getRackSize() == wtype.getRackSize())) {    mounted.setLinked(mountedAmmo);    success=true;  }  return success;}  }
class C{  @Override public boolean isReplaceable(){  return this.replaceable;}  }
class C{  private static boolean isValidInteger(String str){  return intPattern.matcher(str).matches();}  }
class C{  public boolean isDocOrdered(){  return true;}  }
class C{  public CompressedBlockOutputStream(OutputStream os,int size) throws IOException {  this(os,size,Deflater.DEFAULT_COMPRESSION,Deflater.DEFAULT_STRATEGY);}  }
class C{  void shiftBy(int start,int shift){  if (!isFinal && !isNull) {    final ListIterator<Integer> it=this.listIterator();    while (it.hasNext()) {      final int x=it.next();      if (x > start) {        it.set(x + shift);      }    }  }}  }
class C{  public double distance(final GeoPoint othr){  return distance(this.lat(),this.lon(),othr.lat(),othr.lon());}  }
class C{  public final void mul(double scalar){  m00*=scalar;  m01*=scalar;  m02*=scalar;  m10*=scalar;  m11*=scalar;  m12*=scalar;  m20*=scalar;  m21*=scalar;  m22*=scalar;}  }
class C{  public i addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public int size(){  return rules.size();}  }
class C{  public long run(String[] args) throws Exception {  int ncycles=Integer.parseInt(args[0]);  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  ObjectStreamClass[] descs=genDescs();  doReps(oout,oin,sbuf,descs,1);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,descs,ncycles);  return System.currentTimeMillis() - start;}  }
class C{  private String stringFromExpressionsAfter(final Expression expr){  if (expr == null) {    return null;  }  final Iterator<Expression> it=iteratorFromExpression(expr);  final Iterator<Expression> it2=iteratorFromExpression(expr);  if (it2.hasNext()) {    final Expression e2=it2.next();    if (e2.isNumeral()) {      it.next();    }  }  final SentenceBuilder buffer=new SentenceBuilder();  if (buffer.appendUntilBreak(it) > 0) {    return buffer.toString();  } else {    return null;  }}  }
class C{  private String convertLessThanOneThousand(int number,int w){  String soFar;  if (number % 100 < 20) {    soFar=numNames[number % 100][w];    number/=100;  } else {    soFar=numNames[number % 10][w];    number/=10;    if (soFar.compareTo("") == 0) {      soFar=tensNames[number % 10];    } else {      soFar=tensNames[number % 10] + " " + concat+ " "+ soFar;    }    number/=10;  }  if (number == 0)   return soFar;  return hundredNames[number] + " " + soFar;}  }
class C{  public Response doPost(final Request req) throws Exception {  return new Response(HTTP_METHOD_NOT_ALLOWED,MIME_TEXT_PLAIN,req.method);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void initializePackageContents(){  if (isInitialized)   return;  isInitialized=true;  setName(eNAME);  setNsPrefix(eNS_PREFIX);  setNsURI(eNS_URI);  SGraphPackage theSGraphPackage=(SGraphPackage)EPackage.Registry.INSTANCE.getEPackage(SGraphPackage.eNS_URI);  BasePackage theBasePackage=(BasePackage)EPackage.Registry.INSTANCE.getEPackage(BasePackage.eNS_URI);  TypesPackage theTypesPackage=(TypesPackage)EPackage.Registry.INSTANCE.getEPackage(TypesPackage.eNS_URI);  ExpressionsPackage theExpressionsPackage=(ExpressionsPackage)EPackage.Registry.INSTANCE.getEPackage(ExpressionsPackage.eNS_URI);  executionFlowEClass.getESuperTypes().add(theSGraphPackage.getScopedElement());  executionFlowEClass.getESuperTypes().add(this.getExecutionScope());  executionFlowEClass.getESuperTypes().add(this.getExecutionNode());  executionNodeEClass.getESuperTypes().add(this.getMappedElement());  executionNodeEClass.getESuperTypes().add(theBasePackage.getNamedElement());  executionStateEClass.getESuperTypes().add(this.getExecutionNode());  executionStateEClass.getESuperTypes().add(this.getExecutionScope());  executionScopeEClass.getESuperTypes().add(this.getMappedElement());  executionScopeEClass.getESuperTypes().add(theBasePackage.getNamedElement());  executionRegionEClass.getESuperTypes().add(this.getExecutionScope());  executionEntryEClass.getESuperTypes().add(this.getExecutionNode());  executionExitEClass.getESuperTypes().add(this.getExecutionNode());  executionChoiceEClass.getESuperTypes().add(this.getExecutionNode());  executionSynchronizationEClass.getESuperTypes().add(this.getExecutionNode());  reactionEClass.getESuperTypes().add(this.getMappedElement());  reactionEClass.getESuperTypes().add(theBasePackage.getNamedElement());  timeEventEClass.getESuperTypes().add(theTypesPackage.getEvent());  stepEClass.getESuperTypes().add(theBasePackage.getNamedElement());  sequenceEClass.getESuperTypes().add(this.getStep());  checkEClass.getESuperTypes().add(this.getStep());  checkRefEClass.getESuperTypes().add(this.getCheck());  ifEClass.getESuperTypes().add(this.getStep());  executionEClass.getESuperTypes().add(this.getStep());  enterStateEClass.getESuperTypes().add(this.getStep());  exitStateEClass.getESuperTypes().add(this.getStep());  callEClass.getESuperTypes().add(this.getStep());  scheduleTimeEventEClass.getESuperTypes().add(this.getStep());  unscheduleTimeEventEClass.getESuperTypes().add(this.getStep());  stateSwitchEClass.getESuperTypes().add(this.getStep());  saveHistoryEClass.getESuperTypes().add(this.getStep());  historyEntryEClass.getESuperTypes().add(this.getStep());  traceEClass.getESuperTypes().add(this.getStep());  traceNodeExecutedEClass.getESuperTypes().add(this.getTrace());  reactionFiredEClass.getESuperTypes().add(this.getTrace());  traceReactionWillFireEClass.getESuperTypes().add(this.getTrace());  traceStateEnteredEClass.getESuperTypes().add(this.getTrace());  traceStateExitedEClass.getESuperTypes().add(this.getTrace());  traceBeginRunCycleEClass.getESuperTypes().add(this.getTrace());  traceEndRunCycleEClass.getESuperTypes().add(this.getTrace());  initEClass(mappedElementEClass,MappedElement.class,"MappedElement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getMappedElement_SourceElement(),ecorePackage.getEObject(),null,"sourceElement",null,0,1,MappedElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(executionFlowEClass,ExecutionFlow.class,"ExecutionFlow",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getExecutionFlow_States(),this.getExecutionState(),null,"states",null,0,-1,ExecutionFlow.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getExecutionFlow_Nodes(),this.getExecutionNode(),null,"nodes",null,0,-1,ExecutionFlow.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getExecutionFlow_Regions(),this.getExecutionRegion(),null,"regions",null,0,-1,ExecutionFlow.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getExecutionFlow_HistoryVector(),this.getStateVector(),null,"historyVector",null,0,1,ExecutionFlow.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getExecutionFlow_EntryAction(),this.getStep(),null,"entryAction",null,0,1,ExecutionFlow.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getExecutionFlow_ExitAction(),this.getStep(),null,"exitAction",null,0,1,ExecutionFlow.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getExecutionFlow_StaticInitSequence(),this.getSequence(),null,"staticInitSequence",null,0,1,ExecutionFlow.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(executionNodeEClass,ExecutionNode.class,"ExecutionNode",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getExecutionNode_Reactions(),this.getReaction(),null,"reactions",null,0,-1,ExecutionNode.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getExecutionNode_SimpleName(),ecorePackage.getEString(),"simpleName",null,0,1,ExecutionNode.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getExecutionNode_ReactSequence(),this.getSequence(),null,"reactSequence",null,0,1,ExecutionNode.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(executionStateEClass,ExecutionState.class,"ExecutionState",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getExecutionState_Leaf(),ecorePackage.getEBoolean(),"leaf","false",0,1,ExecutionState.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getExecutionState_EntryAction(),this.getStep(),null,"entryAction",null,0,1,ExecutionState.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getExecutionState_ExitAction(),this.getStep(),null,"exitAction",null,0,1,ExecutionState.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(executionScopeEClass,ExecutionScope.class,"ExecutionScope",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getExecutionScope_StateVector(),this.getStateVector(),null,"stateVector",null,0,1,ExecutionScope.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getExecutionScope_SubScopes(),this.getExecutionScope(),this.getExecutionScope_SuperScope(),"subScopes",null,0,-1,ExecutionScope.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getExecutionScope_SuperScope(),this.getExecutionScope(),this.getExecutionScope_SubScopes(),"superScope",null,0,1,ExecutionScope.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getExecutionScope_EnterSequences(),this.getSequence(),null,"enterSequences",null,0,-1,ExecutionScope.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getExecutionScope_ExitSequence(),this.getSequence(),null,"exitSequence",null,0,1,ExecutionScope.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getExecutionScope_InitSequence(),this.getSequence(),null,"initSequence",null,0,1,ExecutionScope.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(executionRegionEClass,ExecutionRegion.class,"ExecutionRegion",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getExecutionRegion_DeepEnterSequence(),this.getSequence(),null,"deepEnterSequence",null,0,1,ExecutionRegion.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getExecutionRegion_ShallowEnterSequence(),this.getSequence(),null,"shallowEnterSequence",null,0,1,ExecutionRegion.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getExecutionRegion_HistoryVector(),this.getStateVector(),null,"historyVector",null,0,1,ExecutionRegion.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getExecutionRegion_Nodes(),this.getExecutionNode(),null,"nodes",null,0,-1,ExecutionRegion.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(executionEntryEClass,ExecutionEntry.class,"ExecutionEntry",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(executionExitEClass,ExecutionExit.class,"ExecutionExit",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(executionChoiceEClass,ExecutionChoice.class,"ExecutionChoice",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(executionSynchronizationEClass,ExecutionSynchronization.class,"ExecutionSynchronization",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(reactionEClass,Reaction.class,"Reaction",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getReaction_Check(),this.getCheck(),null,"check",null,0,1,Reaction.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getReaction_Effect(),this.getStep(),null,"effect",null,0,1,Reaction.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getReaction_Transition(),ecorePackage.getEBoolean(),"transition",null,0,1,Reaction.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(stateVectorEClass,StateVector.class,"StateVector",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getStateVector_Size(),ecorePackage.getEInt(),"size","1",0,1,StateVector.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getStateVector_Offset(),ecorePackage.getEInt(),"offset","0",0,1,StateVector.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(timeEventEClass,TimeEvent.class,"TimeEvent",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getTimeEvent_Periodic(),ecorePackage.getEBoolean(),"periodic","false",0,1,TimeEvent.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(stepEClass,Step.class,"Step",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getStep_Comment(),ecorePackage.getEString(),"comment",null,0,1,Step.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getStep_Caller(),this.getCall(),this.getCall_Step(),"caller",null,0,-1,Step.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(sequenceEClass,Sequence.class,"Sequence",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getSequence_Steps(),this.getStep(),null,"steps",null,0,-1,Sequence.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(checkEClass,Check.class,"Check",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getCheck_Condition(),theExpressionsPackage.getExpression(),null,"condition",null,0,1,Check.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getCheck_Refs(),this.getCheckRef(),this.getCheckRef_Check(),"refs",null,0,-1,Check.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(checkRefEClass,CheckRef.class,"CheckRef",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getCheckRef_Check(),this.getCheck(),this.getCheck_Refs(),"check",null,0,1,CheckRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(ifEClass,If.class,"If",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getIf_Check(),this.getCheck(),null,"check",null,0,1,If.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getIf_ThenStep(),this.getStep(),null,"thenStep",null,0,1,If.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getIf_ElseStep(),this.getStep(),null,"elseStep",null,0,1,If.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(executionEClass,Execution.class,"Execution",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getExecution_Statement(),theExpressionsPackage.getExpression(),null,"statement",null,0,1,Execution.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(enterStateEClass,EnterState.class,"EnterState",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getEnterState_State(),this.getExecutionState(),null,"state",null,0,1,EnterState.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(exitStateEClass,ExitState.class,"ExitState",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getExitState_State(),this.getExecutionState(),null,"state",null,0,1,ExitState.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(callEClass,Call.class,"Call",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getCall_Step(),this.getStep(),this.getStep_Caller(),"step",null,0,1,Call.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(scheduleTimeEventEClass,ScheduleTimeEvent.class,"ScheduleTimeEvent",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getScheduleTimeEvent_TimeEvent(),this.getTimeEvent(),null,"timeEvent",null,0,1,ScheduleTimeEvent.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getScheduleTimeEvent_TimeValue(),theExpressionsPackage.getExpression(),null,"timeValue",null,0,1,ScheduleTimeEvent.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(unscheduleTimeEventEClass,UnscheduleTimeEvent.class,"UnscheduleTimeEvent",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getUnscheduleTimeEvent_TimeEvent(),this.getTimeEvent(),null,"timeEvent",null,0,1,UnscheduleTimeEvent.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(stateSwitchEClass,StateSwitch.class,"StateSwitch",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getStateSwitch_Cases(),this.getStateCase(),null,"cases",null,0,-1,StateSwitch.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getStateSwitch_StateConfigurationIdx(),ecorePackage.getEInt(),"stateConfigurationIdx","0",0,1,StateSwitch.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getStateSwitch_HistoryRegion(),this.getExecutionRegion(),null,"historyRegion",null,0,1,StateSwitch.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(stateCaseEClass,StateCase.class,"StateCase",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getStateCase_State(),this.getExecutionState(),null,"state",null,0,1,StateCase.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getStateCase_Step(),this.getStep(),null,"step",null,0,1,StateCase.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(saveHistoryEClass,SaveHistory.class,"SaveHistory",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getSaveHistory_Region(),this.getExecutionRegion(),null,"region",null,0,1,SaveHistory.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getSaveHistory_Deep(),ecorePackage.getEBoolean(),"deep",null,0,1,SaveHistory.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(historyEntryEClass,HistoryEntry.class,"HistoryEntry",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getHistoryEntry_InitialStep(),this.getStep(),null,"initialStep",null,0,1,HistoryEntry.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getHistoryEntry_Deep(),ecorePackage.getEBoolean(),"deep",null,0,1,HistoryEntry.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getHistoryEntry_Region(),this.getExecutionRegion(),null,"region",null,0,1,HistoryEntry.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getHistoryEntry_HistoryStep(),this.getStep(),null,"historyStep",null,0,1,HistoryEntry.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(traceEClass,Trace.class,"Trace",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(traceNodeExecutedEClass,TraceNodeExecuted.class,"TraceNodeExecuted",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTraceNodeExecuted_Node(),this.getExecutionNode(),null,"node",null,0,1,TraceNodeExecuted.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(reactionFiredEClass,ReactionFired.class,"ReactionFired",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getReactionFired_Reaction(),this.getReaction(),null,"reaction",null,0,1,ReactionFired.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(traceReactionWillFireEClass,TraceReactionWillFire.class,"TraceReactionWillFire",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTraceReactionWillFire_Reaction(),this.getReaction(),null,"reaction",null,0,1,TraceReactionWillFire.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(traceStateEnteredEClass,TraceStateEntered.class,"TraceStateEntered",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTraceStateEntered_State(),this.getExecutionState(),null,"state",null,0,1,TraceStateEntered.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(traceStateExitedEClass,TraceStateExited.class,"TraceStateExited",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTraceStateExited_State(),this.getExecutionState(),null,"state",null,0,1,TraceStateExited.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(traceBeginRunCycleEClass,TraceBeginRunCycle.class,"TraceBeginRunCycle",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(traceEndRunCycleEClass,TraceEndRunCycle.class,"TraceEndRunCycle",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  createResource(eNS_URI);}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public AsyncResult TestStackExAsync(RequestHeader RequestHeader,UnsignedInteger TestId,Integer Iteration,CompositeTestType Input){  TestStackExRequest req=new TestStackExRequest(RequestHeader,TestId,Iteration,Input);  return channel.serviceRequestAsync(req);}  }
class C{  public static void expandSysCall(Instruction s,IR ir){  RegisterOperand ip=(RegisterOperand)Call.getClearAddress(s);  int numberParams=Call.getNumberOfParams(s);  for (int i=0; i < numberParams; i++) {    Operand arg=Call.getParam(s,i);    if (arg instanceof LongConstantOperand) {      LongConstantOperand op=(LongConstantOperand)Call.getClearParam(s,i);      RegisterOperand rop=ir.regpool.makeTempLong();      s.insertBefore(Move.create(LONG_MOVE,rop,op));      Call.setParam(s,i,rop.copy());    } else     if (arg instanceof DoubleConstantOperand) {      DoubleConstantOperand op=(DoubleConstantOperand)Call.getClearParam(s,i);      RegisterOperand rop=ir.regpool.makeTempDouble();      s.insertBefore(Move.create(DOUBLE_MOVE,rop,op));      Call.setParam(s,i,rop.copy());    } else     if (arg instanceof FloatConstantOperand) {      FloatConstantOperand op=(FloatConstantOperand)Call.getClearParam(s,i);      RegisterOperand rop=ir.regpool.makeTempFloat();      s.insertBefore(Move.create(FLOAT_MOVE,rop,op));      Call.setParam(s,i,rop.copy());    }  }  int parameterWords;  if (VM.BuildFor32Addr) {    parameterWords=0;    for (int i=0; i < numberParams; i++) {      parameterWords++;      Operand op=Call.getParam(s,i);      if (op instanceof RegisterOperand) {        RegisterOperand reg=(RegisterOperand)op;        if (reg.getType().isLongType() || reg.getType().isDoubleType()) {          parameterWords++;        }      }    }  } else {    parameterWords=numberParams;  }  ir.stackManager.allocateParameterSpace((6 + parameterWords) * BYTES_IN_ADDRESS);  Instruction s2=Store.create(REF_STORE,ir.regpool.makeJTOCOp(),ir.regpool.makeFPOp(),AC(Offset.fromIntSignExtend(5 * BYTES_IN_ADDRESS)),null);  s.insertBefore(s2);  if (VM.BuildForPower64ELF_ABI) {    s2=Load.create(REF_LOAD,ir.regpool.makeJTOCOp().asRegister(),ip,AC(Offset.fromIntZeroExtend(BYTES_IN_ADDRESS)),null);    s.insertBefore(s2);    RegisterOperand iptmp=ir.regpool.makeTempAddress();    s2=Load.create(REF_LOAD,iptmp,ip.copyRO(),AC(Offset.zero()),null);    s.insertBefore(s2);    ip=iptmp;  }  Call.mutate0(s,SYSCALL,Call.getClearResult(s),ip.copyRO(),null);  s2=Load.create(REF_LOAD,(RegisterOperand)ir.regpool.makeJTOCOp(),ir.regpool.makeFPOp(),AC(Offset.fromIntSignExtend(5 * BYTES_IN_ADDRESS)),null);  s.insertAfter(s2);  RegisterOperand temp=ir.regpool.makeTempInt();  s2=Move.create(INT_MOVE,temp,IC(ir.compiledMethod.getId()));  Instruction s3=Store.create(INT_STORE,temp.copy(),ir.regpool.makeFPOp(),AC(STACKFRAME_METHOD_ID_OFFSET),null);  s.insertAfter(s3);  s.insertAfter(s2);}  }
class C{  public void disableTracing(Target target,String targetId) throws AdminException {}  }
class C{  public IndexType canGoThroughIndex(ORExpression query,List<byte[]> rowkeys){  if (query == null || query.getANDExprList() == null || query.getANDExprList().isEmpty())   return IndexType.NON_CLUSTER_INDEX;  if (rowkeys != null) {    rowkeys.clear();  }  final Map<String,String> indexfieldMap=new HashMap<String,String>();  for (  ANDExpression andExpr : query.getANDExprList()) {    indexfieldMap.clear();    for (    AtomicExpression ae : andExpr.getAtomicExprList()) {      final String fieldName=parseEntityAttribute(ae.getKey());      if (fieldName != null && ComparisonOperator.EQUAL.equals(ae.getOp())) {        indexfieldMap.put(fieldName,ae.getValue());      }    }    final String[] partitions=entityDef.getPartitions();    int[] partitionValueHashs=null;    if (partitions != null) {      partitionValueHashs=new int[partitions.length];      for (int i=0; i < partitions.length; ++i) {        final String value=indexfieldMap.get(partitions[i]);        if (value == null) {          throw new IllegalArgumentException("Partition " + partitions[i] + " is not defined in the query: "+ query.toString());        }        partitionValueHashs[i]=value.hashCode();      }    }    final byte[][] indexFieldValues=new byte[columns.length][];    for (int i=0; i < columns.length; ++i) {      final IndexColumn col=columns[i];      if (!indexfieldMap.containsKey(col.getColumnName())) {        return IndexType.NON_INDEX;      }      final String value=indexfieldMap.get(col.getColumnName());      indexFieldValues[i]=value.getBytes();    }    final byte[] rowkey=generateUniqueIndexRowkey(indexFieldValues,partitionValueHashs,null);    if (rowkeys != null) {      rowkeys.add(rowkey);    }  }  if (index.unique()) {    return IndexType.UNIQUE_INDEX;  }  return IndexType.NON_CLUSTER_INDEX;}  }
class C{  public void addBoardViewListener(BoardViewListener listener){  if (!boardListeners.contains(listener)) {    boardListeners.add(listener);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String inputFile=null;  String whiteboxHeaderFile=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  String str;  int numImages=0;  int progress=0;  double cellsize=0;  double north=0;  double east=0;  double west=0;  double south=0;  double cdedNoData=-32767;  double whiteboxNoData=-32768d;  double z=0;  String delimiter=" ";  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  FileInputStream fis=null;  try {    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      inputFile=imageFiles[i];      if (!((new File(inputFile)).exists())) {        showFeedback("DEM file does not exist.");        return;      }      if (inputFile.lastIndexOf(".") >= 0) {        String extension=inputFile.substring(inputFile.lastIndexOf("."));        whiteboxHeaderFile=inputFile.replace(extension,".dep");      } else {        whiteboxHeaderFile=inputFile + ".dep";      }      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxHeaderFile.replace(".dep",".tas"))).delete();      WhiteboxRaster wbr=null;      fis=new FileInputStream(inputFile);      rows=0;      cols=0;      row=0;      col=0;      long validValueNum=0;      int oldProgress=-1;      byte[] bytes=new byte[1024];      int remaining=bytes.length;      int blockNumber=1;      while (true) {        int read=fis.read(bytes,bytes.length - remaining,remaining);        if (read >= 0) {          remaining-=read;          str=new String(bytes,Charset.forName("US-ASCII"));          if (remaining == 0) {            if (blockNumber == 1) {              String producer=str.substring(40,100).trim();              String southwest=str.substring(109,135);              String processCode=str.substring(135,136).trim();              String originCode=str.substring(140,144).trim();              int demLevelCode=Integer.parseInt(str.substring(144,150).trim());              int elevationPattern=Integer.parseInt(str.substring(150,156).trim());              String str2=str.substring(156,162).trim();              String refSystem="";switch (str2) {case "0":                refSystem="geographic";              break;case "1":            refSystem="UTM";          break;case "2":        refSystem="state plane";      break;default :    refSystem="geographic";}String xyUnits="";str2=str.substring(533,539).trim();switch (str2) {case "0":  xyUnits="radians";break;case "1":xyUnits="feet";break;case "2":xyUnits="meters";break;case "3":xyUnits="arc seconds";break;default :xyUnits="arc seconds";}if (xyUnits.equals("arc seconds")) {xyUnits="degrees";}String zUnits="";str2=str.substring(539,545).trim();switch (str2) {case "1":zUnits="feet";break;case "2":zUnits="meters";break;default :zUnits="meters";}west=Double.parseDouble(str.substring(546,570).trim()) / 3600;south=Double.parseDouble(str.substring(570,594).trim()) / 3600;north=Double.parseDouble(str.substring(618,642).trim()) / 3600;east=Double.parseDouble(str.substring(652,676).trim()) / 3600;cols=Integer.parseInt(str.substring(858,864).trim());;rows=1201;fw=new FileWriter(whiteboxHeaderFile,false);bw=new BufferedWriter(fw);out=new PrintWriter(bw,true);str1="Min:\t" + Double.toString(Integer.MAX_VALUE);out.println(str1);str1="Max:\t" + Double.toString(Integer.MIN_VALUE);out.println(str1);str1="North:\t" + Double.toString(north);out.println(str1);str1="South:\t" + Double.toString(south);out.println(str1);str1="East:\t" + Double.toString(east);out.println(str1);str1="West:\t" + Double.toString(west);out.println(str1);str1="Cols:\t" + Integer.toString(cols);out.println(str1);str1="Rows:\t" + Integer.toString(rows);out.println(str1);str1="Data Type:\t" + "float";out.println(str1);str1="Z Units:\t" + zUnits;out.println(str1);str1="XY Units:\t" + xyUnits;out.println(str1);str1="Projection:\t" + refSystem;out.println(str1);str1="Data Scale:\tcontinuous";out.println(str1);str1="Preferred Palette:\t" + "spectrum.pal";out.println(str1);str1="NoData:\t" + whiteboxNoData;out.println(str1);if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {str1="Byte Order:\t" + "LITTLE_ENDIAN";} else {str1="Byte Order:\t" + "BIG_ENDIAN";}out.println(str1);wbr=new WhiteboxRaster(whiteboxHeaderFile,"rw");row=rows - 1;col=0;} else {String[] splitStr=str.split(" ");if (wbr == null) {showFeedback("Error reading file.");return;}for (String splitStr1 : splitStr) {if (!splitStr1.trim().isEmpty()) {validValueNum++;if (validValueNum >= 10) {z=Double.parseDouble(splitStr1);if (z != cdedNoData) {wbr.setValue(row,col,z);} else {wbr.setValue(row,col,whiteboxNoData);}row--;if (row == -1) {validValueNum=0;row=rows - 1;col++;progress=(int)(100f * col / (cols - 1));if (progress > oldProgress) {updateProgress(progress);oldProgress=progress;}}}}}}blockNumber++;remaining=bytes.length;}} else {if (remaining < bytes.length) {}break;}}if (wbr == null) {showFeedback("Error reading file.");return;}wbr.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");wbr.addMetadataEntry("Created on " + new Date());wbr.flush();wbr.findMinAndMaxVals();wbr.close();returnData(whiteboxHeaderFile);}} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {if (out != null || bw != null) {out.flush();out.close();}if (fis != null) {try {fis.close();} catch (IOException e) {}}updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public static void callSystemApp(Context context,String operation,String command,String appUri){  if (Constants.SYSTEM_APP_ENABLED) {    Intent intent=new Intent(Constants.SYSTEM_APP_SERVICE_START_ACTION);    Intent explicitIntent=createExplicitFromImplicitIntent(context,intent);    if (explicitIntent != null) {      intent=explicitIntent;    }    intent.putExtra(Constants.OPERATION_CODE,operation);    intent.setPackage(Constants.PACKAGE_NAME);    if (appUri != null) {      intent.putExtra("appUri",appUri);    }    if (command != null) {      if (Constants.Operation.UPGRADE_FIRMWARE.equals(operation)) {        try {          JSONObject upgradeData=new JSONObject(command);          if (upgradeData.isNull(context.getResources().getString(R.string.firmware_upgrade_automatic_retry)) && Preference.hasPreferenceKey(context,context.getResources().getString(R.string.is_automatic_firmware_upgrade))) {            boolean isFirmwareUpgradeAutoRetry=Preference.getBoolean(context,context.getResources().getString(R.string.is_automatic_firmware_upgrade));            upgradeData.put(context.getResources().getString(R.string.firmware_upgrade_automatic_retry),isFirmwareUpgradeAutoRetry);            command=upgradeData.toString();            Log.d(TAG,"Updated payload: " + command);          } else           if (!upgradeData.isNull(context.getResources().getString(R.string.firmware_upgrade_automatic_retry))) {            Preference.putBoolean(context,context.getResources().getString(R.string.is_automatic_firmware_upgrade),upgradeData.getBoolean(context.getResources().getString(R.string.firmware_upgrade_automatic_retry)));          } else {            upgradeData.put(context.getResources().getString(R.string.firmware_upgrade_automatic_retry),true);            Preference.putBoolean(context,context.getResources().getString(R.string.is_automatic_firmware_upgrade),true);            Log.d(TAG,"Updated payload: " + command);          }        } catch (        JSONException e) {          Log.e(TAG,"Could not parse Firmware upgrade operation",e);        }        intent.putExtra("operationId",Preference.getInt(context,"firmwareOperationId"));      }      intent.putExtra("command",command);    }    context.startServiceAsUser(intent,android.os.Process.myUserHandle());  } else {    Log.e(TAG,"System app not enabled.");  }}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  private DescribeInstancesRequest request(final String tag,final String value){  final Filter filter=new Filter().withName(tag).withValues(value);  return new DescribeInstancesRequest().withFilters(filter);}  }
class C{  public GermanAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  @Override protected void initListeners(){}  }
class C{  private Operation(String name,boolean isLocal,boolean isRegion,byte opType,int opDetails){  this.name=name;  this.isLocal=isLocal;  this.isRegion=isRegion;  this.opType=opType;  this.opDetails=opDetails;  this.ordinal=nextOrdinal++;  VALUES[this.ordinal]=this;}  }
class C{  public static void main(String[] args){  Integer[] list={-44,-5,-3,3,3,1,-4,0,1,2,4,5,53};  heapSort(list);  for (int i=0; i < list.length; i++)   System.out.print(list[i] + " ");  System.out.println();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (character: ");  result.append(character);  result.append(", sequence: ");  result.append(sequence);  result.append(')');  return result.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:54.784 -0500",hash_original_method="7FE7A3338730D66992FED5507DFFCCC7",hash_generated_method="75C27C046264D60F350FE6AF36283750") public TimeStamp(Date d){  ntpTime=(d == null) ? 0 : toNtpTime(d.getTime());}  }
class C{  public SchedulingThread(String name,LockType lockType){  super(name);  this.lockType=lockType;}  }
class C{  @SuppressWarnings("unchecked") public <T>void addSpecificMapping(Class<T> forClass,JsonDeserializer<? extends T> deser){  ClassKey key=new ClassKey(forClass);  if (_directClassMappings == null) {    _directClassMappings=new HashMap<ClassKey,JsonDeserializer<Object>>();  }  _directClassMappings.put(key,(JsonDeserializer<Object>)deser);}  }
class C{  public boolean equals(MyString1 s){  if (chars.length != s.length())   return false;  for (int i=0; i < chars.length; i++) {    if (chars[i] != s.charAt(i))     return false;  }  return true;}  }
class C{  protected TagLib(boolean isCore){  this.isCore=isCore;}  }
class C{  void addOKListener(ActionListener listener){  myOkListeners.add(listener);}  }
class C{  public static Drawable byteToDrawable(byte[] b){  return bitmapToDrawable(byteToBitmap(b));}  }
class C{  @Override public String toString(final int indent){  return super.toString(indent) + " [mockFilter]";}  }
class C{  private char[] fFormatDigits(final double x){  String sx;  int i, j, k;  final int n1In;  final int n2In;  int expon=0;  boolean minusSign=false;  if (x > 0.0) {    sx=Double.toString(x);  } else   if (x < 0.0) {    sx=Double.toString(-x);    minusSign=true;  } else {    sx=Double.toString(x);    if (sx.charAt(0) == '-') {      minusSign=true;      sx=sx.substring(1);    }  }  final int ePos=sx.indexOf('E');  final int rPos=sx.indexOf('.');  if (rPos != -1) {    n1In=rPos;  } else   if (ePos != -1) {    n1In=ePos;  } else {    n1In=sx.length();  }  if (rPos != -1) {    if (ePos != -1) {      n2In=ePos - rPos - 1;    } else {      n2In=sx.length() - rPos - 1;    }  } else {    n2In=0;  }  if (ePos != -1) {    int ie=ePos + 1;    expon=0;    if (sx.charAt(ie) == '-') {      for (++ie; ie < sx.length(); ie++) {        if (sx.charAt(ie) != '0') {          break;        }      }      if (ie < sx.length()) {        expon=-Integer.parseInt(sx.substring(ie));      }    } else {      if (sx.charAt(ie) == '+') {        ++ie;      }      for (; ie < sx.length(); ie++) {        if (sx.charAt(ie) != '0') {          break;        }      }      if (ie < sx.length()) {        expon=Integer.parseInt(sx.substring(ie));      }    }  }  final int p;  if (precisionSet) {    p=precision;  } else {    p=defaultDigits - 1;  }  final char[] ca1=sx.toCharArray();  final char[] ca2=new char[n1In + n2In];  final char[] ca3;  final char[] ca4;  final char[] ca5;  for (j=0; j < n1In; j++) {    ca2[j]=ca1[j];  }  i=j + 1;  for (k=0; k < n2In; j++, i++, k++) {    ca2[j]=ca1[i];  }  if (n1In + expon <= 0) {    ca3=new char[-expon + n2In];    for (j=0, k=0; k < (-n1In - expon); k++, j++) {      ca3[j]='0';    }    for (i=0; i < (n1In + n2In); i++, j++) {      ca3[j]=ca2[i];    }  } else {    ca3=ca2;  }  boolean carry=false;  if (p < -expon + n2In) {    if (expon < 0) {      i=p;    } else {      i=p + n1In;    }    carry=checkForCarry(ca3,i);    if (carry) {      carry=startSymbolicCarry(ca3,i - 1,0);    }  }  if (n1In + expon <= 0) {    ca4=new char[2 + p];    if (!carry) {      ca4[0]='0';    } else {      ca4[0]='1';    }    if (alternateForm || !precisionSet || precision != 0) {      ca4[1]='.';      for (i=0, j=2; i < Math.min(p,ca3.length); i++, j++) {        ca4[j]=ca3[i];      }      for (; j < ca4.length; j++) {        ca4[j]='0';      }    }  } else {    if (!carry) {      if (alternateForm || !precisionSet || precision != 0) {        ca4=new char[n1In + expon + p+ 1];      } else {        ca4=new char[n1In + expon];      }      j=0;    } else {      if (alternateForm || !precisionSet || precision != 0) {        ca4=new char[n1In + expon + p+ 2];      } else {        ca4=new char[n1In + expon + 1];      }      ca4[0]='1';      j=1;    }    for (i=0; i < Math.min(n1In + expon,ca3.length); i++, j++) {      ca4[j]=ca3[i];    }    for (; i < n1In + expon; i++, j++) {      ca4[j]='0';    }    if (alternateForm || !precisionSet || precision != 0) {      ca4[j]='.';      j++;      for (k=0; i < ca3.length && k < p; i++, j++, k++) {        ca4[j]=ca3[i];      }      for (; j < ca4.length; j++) {        ca4[j]='0';      }    }  }  int nZeros=0;  if (!leftJustify && leadingZeros) {    int xThousands=0;    if (thousands) {      int xlead=0;      if (ca4[0] == '+' || ca4[0] == '-' || ca4[0] == ' ') {        xlead=1;      }      int xdp=xlead;      for (; xdp < ca4.length; xdp++) {        if (ca4[xdp] == '.') {          break;        }      }      xThousands=(xdp - xlead) / 3;    }    if (fieldWidthSet) {      nZeros=fieldWidth - ca4.length;    }    if ((!minusSign && (leadingSign || leadingSpace)) || minusSign) {      nZeros--;    }    nZeros-=xThousands;    if (nZeros < 0) {      nZeros=0;    }  }  j=0;  if ((!minusSign && (leadingSign || leadingSpace)) || minusSign) {    ca5=new char[ca4.length + nZeros + 1];    j++;  } else {    ca5=new char[ca4.length + nZeros];  }  if (!minusSign) {    if (leadingSign) {      ca5[0]='+';    }    if (leadingSpace) {      ca5[0]=' ';    }  } else {    ca5[0]='-';  }  for (i=0; i < nZeros; i++, j++) {    ca5[j]='0';  }  for (i=0; i < ca4.length; i++, j++) {    ca5[j]=ca4[i];  }  int lead=0;  if (ca5[0] == '+' || ca5[0] == '-' || ca5[0] == ' ') {    lead=1;  }  int dp=lead;  for (; dp < ca5.length; dp++) {    if (ca5[dp] == '.') {      break;    }  }  final int nThousands=(dp - lead) / 3;  if (dp < ca5.length) {    ca5[dp]=dfs.getDecimalSeparator();  }  char[] ca6=ca5;  if (thousands && nThousands > 0) {    ca6=new char[ca5.length + nThousands + lead];    ca6[0]=ca5[0];    for (i=lead, k=lead; i < dp; i++) {      if (i > 0 && (dp - i) % 3 == 0) {        ca6[k]=dfs.getGroupingSeparator();        ca6[k + 1]=ca5[i];        k+=2;      } else {        ca6[k]=ca5[i];        k++;      }    }    for (; i < ca5.length; i++, k++) {      ca6[k]=ca5[i];    }  }  return ca6;}  }
class C{  protected void unregister(IEventListener listener){  listeners.remove(listener);  checkRelease();}  }
class C{  private static String[] splitByCharacterType(final String str,final boolean camelCase){  if (str == null) {    return null;  }  if (str.length() == 0) {    return ArrayUtils.EMPTY_STRING_ARRAY;  }  char[] c=str.toCharArray();  List<String> list=new ArrayList<String>();  int tokenStart=0;  int currentType=Character.getType(c[tokenStart]);  for (int pos=tokenStart + 1; pos < c.length; pos++) {    int type=Character.getType(c[pos]);    if (type == currentType) {      continue;    }    if (camelCase && type == Character.LOWERCASE_LETTER && currentType == Character.UPPERCASE_LETTER) {      int newTokenStart=pos - 1;      if (newTokenStart != tokenStart) {        list.add(new String(c,tokenStart,newTokenStart - tokenStart));        tokenStart=newTokenStart;      }    } else {      list.add(new String(c,tokenStart,pos - tokenStart));      tokenStart=pos;    }    currentType=type;  }  list.add(new String(c,tokenStart,c.length - tokenStart));  return list.toArray(new String[list.size()]);}  }
class C{  public static boolean eq(double a,double b){  return (a == b) || ((a - b < SMALL) && (b - a < SMALL));}  }
class C{  private void obtainPasswordVerificationPrefix(@NonNull final TypedArray typedArray){  String format=typedArray.getString(R.styleable.PasswordEditText_passwordVerificationPrefix);  if (format == null) {    format=getResources().getString(R.string.password_verification_prefix);  }  setPasswordVerificationPrefix(format);}  }
class C{  public void configureVPN(org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException {  String serverAddress=null;  JSONObject result=new JSONObject();  try {    JSONObject vpnData=new JSONObject(operation.getPayLoad().toString());    if (!vpnData.isNull(resources.getString(R.string.intent_extra_server))) {      serverAddress=(String)vpnData.get(resources.getString(R.string.intent_extra_server));    }  } catch (  JSONException e) {    operation.setStatus(resources.getString(R.string.operation_value_error));    operation.setOperationResponse("Error in parsing VPN payload.");    resultBuilder.build(operation);    throw new AndroidAgentException("Invalid JSON format.",e);  }  if (serverAddress != null) {    Intent intent=new Intent(context,AlertActivity.class);    intent.putExtra(resources.getString(R.string.intent_extra_message_text),resources.getString(R.string.toast_message_vpn));    intent.putExtra(resources.getString(R.string.intent_extra_operation_id),operation.getId());    intent.putExtra(resources.getString(R.string.intent_extra_payload),operation.getPayLoad().toString());    intent.putExtra(resources.getString(R.string.intent_extra_type),Constants.Operation.VPN);    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);    intent.setFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);    context.startActivity(intent);  }  if (Constants.DEBUG_MODE_ENABLED) {    Log.d(TAG,"VPN configured");  }  operation.setStatus(resources.getString(R.string.operation_value_completed));  operation.setPayLoad(result.toString());  resultBuilder.build(operation);}  }
class C{  public String numBinsTipText(){  return "Number of bins for discretization.";}  }
class C{  private static void createInvertedIndex() throws Exception {  IndexInverter indexInverter=new IndexInverter(new File(luceneIndexPath),new File(esaIndexPath));  indexInverter.setMinDocumentFrequency(1);  indexInverter.createInvertedIndex();}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (getBayesUpdater() == null) {    throw new NullPointerException();  }}  }
class C{  public final void removeVetoableChangeListener(String propertyName,VetoableChangeListener listener){  vcs.removeVetoableChangeListener(propertyName,listener);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Album al=getAlbum(stack);  return (al == null) ? null : al.getThumbnail(stack.getUIComponent());}  }
class C{  public DBasicConstraints(JDialog parent){  super(parent);  setTitle(res.getString("DBasicConstraints.Title"));  initComponents();}  }
class C{  public boolean memoryIsLow(){  m_MemoryUsage=m_MemoryMXBean.getHeapMemoryUsage();  if (isEnabled()) {    long lowThreshold=(long)(0.2 * m_MemoryUsage.getMax());    if (lowThreshold < LOW_MEMORY_MINIMUM) {      lowThreshold=LOW_MEMORY_MINIMUM;    }    long avail=m_MemoryUsage.getMax() - m_MemoryUsage.getUsed();    return (avail < lowThreshold);  } else {    return false;  }}  }
class C{  private static Matrix parseTransform(String s){  Matrix matrix=new Matrix();  while (true) {    parseTransformItem(s,matrix);    final int rparen=s.indexOf(")");    if (rparen > 0 && s.length() > rparen + 1) {      s=TRANSFORM_SEP.matcher(s.substring(rparen + 1)).replaceFirst("");    } else {      break;    }  }  return matrix;}  }
class C{  void hitOrDraw2(Graphics2D graphics,DrawInfo2D info,Bag putInHere){  GeomVectorField geomField=(GeomVectorField)field;  if (geomField == null) {    return;  }  boolean objectSelected=!selectedWrappers.isEmpty();  geomField.updateTransform(info);  Bag geometries;  geometries=geomField.queryField(geomField.clipEnvelope);  if (geometries == null || geometries.isEmpty()) {    geometries=geomField.getGeometries();    if (geometries.isEmpty()) {      return;    }  }  GeomInfo2D gInfo=new GeomInfo2D(info,geomField.worldToScreen);  final double xScale=info.draw.width / geomField.getFieldWidth();  final double yScale=info.draw.height / geomField.getFieldHeight();  GeomInfo2D newinfo=new GeomInfo2D(new DrawInfo2D(info.gui,info.fieldPortrayal,new Rectangle2D.Double(0,0,xScale,yScale),info.clip),geomField.worldToScreen);  newinfo.fieldPortrayal=this;  GeometryFactory geomFactory=((MasonGeometry)geometries.objs[0]).getGeometry().getFactory();  Geometry clipGeometry=geomFactory.toGeometry(geomField.clipEnvelope);  for (int i=0; i < geometries.size(); i++) {    MasonGeometry gm=(MasonGeometry)geometries.objs[i];    if (gm == null) {      continue;    }    Geometry geom=gm.getGeometry();    if (clipGeometry.intersects(geom.getEnvelope())) {      Portrayal p=getPortrayalForObject(gm);      if (!(p instanceof SimplePortrayal2D)) {        throw new RuntimeException("Unexpected Portrayal " + p + " for object "+ gm+ " -- expected a SimplePortrayal2D or a GeomPortrayal");      }      SimplePortrayal2D portrayal=(SimplePortrayal2D)p;      if (graphics == null) {        if (portrayal.hitObject(gm,info)) {          putInHere.add(new LocationWrapper(gm,gm.getGeometry().getCentroid(),this));        }      } else {        if (portrayal instanceof GeomPortrayal) {          portrayal.draw(gm,graphics,gInfo);        } else {          Point pt=gm.geometry.getCentroid();          pt.apply(geomField.jtsTransform);          pt.geometryChanged();          newinfo.selected=(objectSelected && selectedWrappers.get(gm) != null);          newinfo.draw.x=pt.getX();          newinfo.draw.y=pt.getY();          portrayal.draw(gm,graphics,newinfo);        }      }    }  }}  }
class C{  public static Method findSuperMethod(Object self,String name,String desc){  Class clazz=self.getClass();  return findSuperClassMethod(clazz,name,desc);}  }
class C{  public final void testGetW(){  assertEquals("wrong w value",w,ecpks.getW());}  }
class C{  public String decrypt(String sCipherText){  int nLen=(sCipherText.length() >> 1) & ~7;  if (nLen < BlowfishECB.BLOCKSIZE)   return null;  byte[] cbciv=new byte[BlowfishECB.BLOCKSIZE];  int nNumOfBytes=BinConverter.binHexToBytes(sCipherText,cbciv,0,0,BlowfishECB.BLOCKSIZE);  if (nNumOfBytes < BlowfishECB.BLOCKSIZE)   return null;  m_bfish.setCBCIV(cbciv);  nLen-=BlowfishECB.BLOCKSIZE;  if (nLen == 0)   return "";  byte[] buf=new byte[nLen];  nNumOfBytes=BinConverter.binHexToBytes(sCipherText,buf,BlowfishECB.BLOCKSIZE * 2,0,nLen);  if (nNumOfBytes < nLen)   return null;  m_bfish.decrypt(buf);  int nPadByte=buf[buf.length - 1] & 0x0ff;  if ((nPadByte > 8) || (nPadByte < 0))   nPadByte=0;  nNumOfBytes-=nPadByte;  if (nNumOfBytes < 0)   return "";  return BinConverter.byteArrayToUNCString(buf,0,nNumOfBytes);}  }
class C{  public static SpanQuery spanNearUnorderedQuery(int slop,SpanQuery... subqueries){  return spanQuery(new SpanNearQuery(subqueries,slop,false));}  }
class C{  public static AndroidHttpClient newInstance(String userAgent,Context context){  HttpParams params=new BasicHttpParams();  HttpConnectionParams.setStaleCheckingEnabled(params,false);  HttpConnectionParams.setConnectionTimeout(params,SOCKET_OPERATION_TIMEOUT);  HttpConnectionParams.setSoTimeout(params,SOCKET_OPERATION_TIMEOUT);  HttpConnectionParams.setSocketBufferSize(params,8192);  HttpClientParams.setRedirecting(params,false);  Object sessionCache=null;  if (null != context && null != sSslSessionCacheClass) {    Constructor<?> ct;    try {      ct=sSslSessionCacheClass.getConstructor(Context.class);      sessionCache=ct.newInstance(context);    } catch (    SecurityException e) {      e.printStackTrace();    }catch (    NoSuchMethodException e) {      e.printStackTrace();    }catch (    IllegalArgumentException e) {      e.printStackTrace();    }catch (    InstantiationException e) {      e.printStackTrace();    }catch (    IllegalAccessException e) {      e.printStackTrace();    }catch (    InvocationTargetException e) {      e.printStackTrace();    }  }  HttpProtocolParams.setUserAgent(params,userAgent);  SchemeRegistry schemeRegistry=new SchemeRegistry();  schemeRegistry.register(new Scheme("http",PlainSocketFactory.getSocketFactory(),80));  SocketFactory sslCertificateSocketFactory=null;  if (null != sessionCache) {    Method getHttpSocketFactoryMethod;    try {      getHttpSocketFactoryMethod=SSLCertificateSocketFactory.class.getDeclaredMethod("getHttpSocketFactory",Integer.TYPE,sSslSessionCacheClass);      sslCertificateSocketFactory=(SocketFactory)getHttpSocketFactoryMethod.invoke(null,SOCKET_OPERATION_TIMEOUT,sessionCache);    } catch (    SecurityException e) {      e.printStackTrace();    }catch (    NoSuchMethodException e) {      e.printStackTrace();    }catch (    IllegalArgumentException e) {      e.printStackTrace();    }catch (    IllegalAccessException e) {      e.printStackTrace();    }catch (    InvocationTargetException e) {      e.printStackTrace();    }  }  if (null == sslCertificateSocketFactory) {    sslCertificateSocketFactory=SSLSocketFactory.getSocketFactory();  }  schemeRegistry.register(new Scheme("https",sslCertificateSocketFactory,443));  ClientConnectionManager manager=new ThreadSafeClientConnManager(params,schemeRegistry);  return new AndroidHttpClient(manager,params);}  }
class C{  public void write(Writer out) throws IOException {  out.append(text);}  }
class C{  public static double parseDouble(String text,double defaultValue){  try {    return Double.parseDouble(text);  } catch (  NumberFormatException|NullPointerException ex) {    return defaultValue;  }}  }
class C{  private void ensureSortedByIndex(){  if (currentSortOrder != SORT_ORDER_BY_INDEX) {    Collections.sort(samples,INDEX_COMPARATOR);    currentSortOrder=SORT_ORDER_BY_INDEX;  }}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  writer.enumConstValue(cp.getUtf8Info(typeIndex),getValue());}  }
class C{  public NodedSegmentString(Coordinate[] pts,Object data){  this.pts=pts;  this.data=data;}  }
class C{  public static void main(String[] args){  Header.printHeader(IntraAreaIdentifier.class.toString(),args);  String populationFile=args[0];  String attributesFile=args[1];  String shapefile=args[2];  String attributeName=args[3];  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  new PopulationReader(sc).readFile(populationFile);  new ObjectAttributesXmlReader(sc.getPopulation().getPersonAttributes()).readFile(attributesFile);  IntraAreaIdentifier.run(sc,shapefile,false,attributeName);  Header.printFooter();}  }
class C{  private boolean checkSupportedControl(final String control,final LdapContext context){  boolean ret=false;  try {    Attributes attrs=context.getAttributes("",new String[]{LdapConstants.SUPPORTED_CONTROL_ATTRIBUTE});    Attribute attr=attrs.get(LdapConstants.SUPPORTED_CONTROL_ATTRIBUTE);    for (int i=0; i < attr.size(); ++i) {      if (attr.get(i).equals(control)) {        ret=true;        break;      }    }  } catch (  NamingException e) {    LdapLogDebugUtils.generateDebug(LdapErrorCodes.ERR_10010_CONTROL_NOT_SUPPORTED_ERROR,new String[]{control},LOGGER,e);  }  return ret;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  private static void d_ucummxx(double[] a,double[] agg,double[] c,int m,int n,double init,Builtin builtin,int rl,int ru){  double[] cmxx=(agg != null) ? agg : new double[n];  if (agg == null)   Arrays.fill(cmxx,init);  for (int i=rl, aix=rl * n; i < ru; i++, aix+=n) {    builtinAgg(a,cmxx,aix,n,builtin);    System.arraycopy(cmxx,0,c,aix,n);  }}  }
class C{  private List<IEspStatusSensor> __processDataList(final List<IEspStatusSensor> dataList,final long startTimestamp,final long endTimestamp,final long interval,final EspDeviceType deviceType){  log.info("##__processDataList: startTimestamp = " + TimeUtil.getDateStr(startTimestamp,null));  log.info("##__processDataList: endTimestamp = " + TimeUtil.getDateStr(endTimestamp,null));  if (dataList.isEmpty()) {    return Collections.emptyList();  }  List<IEspStatusSensor> result=new ArrayList<IEspStatusSensor>();  long sectionCount=0;  long sectionAt=startTimestamp / interval * interval;  double sectionX=0;  double sectionY=0;  long currentAt;  long headAt=dataList.get(0).getAt() / interval * interval;  while (sectionAt < headAt) {    result.add(null);    sectionAt+=interval;  }  for (  IEspStatusSensor statusData : dataList) {    currentAt=statusData.getAt();    sectionCount++;    sectionX+=statusData.getX();    if (statusData.isYSupported()) {      sectionY+=statusData.getY();    }    if (currentAt - sectionAt > interval) {      IEspStatusSensor data=__createStatusByDeviceType(deviceType);      data.setAt(sectionAt);      data.setX(sectionX / sectionCount);      if (statusData.isYSupported()) {        data.setY(sectionY / sectionCount);      }      result.add(data);      sectionCount=0;      sectionAt+=interval;      sectionX=0;      if (data.isYSupported()) {        sectionY=0;      }      while (currentAt - sectionAt > interval) {        result.add(null);        sectionAt+=interval;      }    }  }  if (sectionCount != 0) {    IEspStatusSensor data=__createStatusByDeviceType(deviceType);    data.setAt(sectionAt);    data.setX(sectionX / sectionCount);    if (data.isYSupported()) {      data.setY(sectionY / sectionCount);    }    result.add(data);  }  long tailAt=(dataList.get(dataList.size() - 1).getAt() + interval - 1) / interval * interval;  while (sectionAt < tailAt) {    result.add(null);    sectionAt+=interval;  }  int start=0;  int end=0;  IEspStatusSensor currentSensor;  long currentTimestamp;  for (int i=0; i < result.size(); i++) {    currentSensor=result.get(i);    if (currentSensor == null) {      continue;    }    currentTimestamp=currentSensor.getAt();    if (currentTimestamp < startTimestamp) {      start=i;    }    if (currentTimestamp < endTimestamp) {      end=i;    }  }  end++;  for (int i=start; i < end; i++) {    if (result.get(i) == null) {      continue;    }  }  return result.subList(start,end);}  }
class C{  public void close(){  animation.setRate(-1);  animation.play();  animation.setOnFinished(null);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void pulse(LivingEntity entity,PotionEffect effect){  checkNotNull(entity,"entity must not be null");  if (!impl.instant || effect.getDuration() != 0) {    impl.pulse(entity,effect.getAmplifier(),effect.getDuration());  }}  }
class C{  public strong removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public static TcFeature create(String id,Class<? extends Resource> featureName,Object... parameters){  List<Object> params=getParameterAsString(parameters);  params.add(FeatureExtractorResource_ImplBase.PARAM_UNIQUE_EXTRACTOR_NAME);  params.add(id);  TcFeature tcFeature=new TcFeature(featureName,id,params.toArray());  return tcFeature;}  }
class C{  private void configureToolbar(){  final ToolbarDecorator decorator=ToolbarDecorator.createDecorator(table).disableUpDownActions().disableAddAction().setToolbarPosition(ActionToolbarPosition.TOP);  decorator.setRemoveAction(new RemoveSelectedBreakpointsAction());  decorator.addExtraAction(new RemoveAllBreakpointsAction());  decorator.addExtraAction(new ReactivateBreakpointAction());  this.add(decorator.createPanel());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public OptionCompleter(String... options){  this();  for (  String option : options) {    add(option);  }}  }
class C{  public double computeFishTankCeiling(){  return 0.5 * initialVelocity * initialVelocity / GRAVITY_ACC;}  }
class C{  public boolean isScrollToSource(){  return _scrollToSource;}  }
class C{  private void createVMs(Host host){  for (int i=0; i < 4; i++) {    vm[i]=host.getVM(i);  }}  }
class C{  private boolean hasSpaceToDraw(int previousPosition,int tickLabelPosition,String previousTickLabel,String tickLabel){  Dimension tickLabelSize=FigureUtilities.getTextExtents(tickLabel,scale.getFont());  Dimension previousTickLabelSize=FigureUtilities.getTextExtents(previousTickLabel,scale.getFont());  int interval=tickLabelPosition - previousPosition;  int textLength=(int)(scale.isHorizontal() ? (tickLabelSize.width / 2.0 + previousTickLabelSize.width / 2.0) : tickLabelSize.height);  boolean noLapOnPrevoius=true;  boolean noLapOnEnd=true;  if (tickLabelPosition != tickLabelPositions.get(tickLabelPositions.size() - 1)) {    noLapOnPrevoius=interval > (textLength + TICK_LABEL_GAP);    Dimension endTickLabelSize=FigureUtilities.getTextExtents(tickLabels.get(tickLabels.size() - 1),scale.getFont());    interval=tickLabelPositions.get(tickLabelPositions.size() - 1) - tickLabelPosition;    textLength=(int)(scale.isHorizontal() ? (tickLabelSize.width / 2.0 + endTickLabelSize.width / 2.0) : tickLabelSize.height);    noLapOnEnd=interval > textLength + TICK_LABEL_GAP;  }  return noLapOnPrevoius && noLapOnEnd;}  }
class C{  public boolean canDoMechanizedBA(){  if (getChassisType() != CHASSIS_TYPE_QUAD) {    if (hasWorkingMisc(MiscType.F_MAGNETIC_CLAMP)) {      return true;    }    int tBasicManipulatorCount=countWorkingMisc(MiscType.F_BASIC_MANIPULATOR);    int tArmoredGloveCount=countWorkingMisc(MiscType.F_ARMORED_GLOVE);    int tBattleClawCount=countWorkingMisc(MiscType.F_BATTLE_CLAW);switch (getWeightClass()) {case EntityWeightClass.WEIGHT_ULTRA_LIGHT:case EntityWeightClass.WEIGHT_LIGHT:      if ((tArmoredGloveCount > 1) || (tBasicManipulatorCount > 0) || (tBattleClawCount > 0)) {        return true;      }    break;case EntityWeightClass.WEIGHT_MEDIUM:  if ((tBasicManipulatorCount > 0) || (tBattleClawCount > 0)) {    return true;  }break;case EntityWeightClass.WEIGHT_HEAVY:if ((tBasicManipulatorCount > 0) || (tBattleClawCount > 0)) {return true;}break;case EntityWeightClass.WEIGHT_ASSAULT:default :return false;}}return false;}  }
class C{  public void registerConverter(final Converter converter){  registerConverter(converter,PRIORITY_NORMAL);}  }
class C{  @GET @Path("no_produces1") public String noProduces1(){  return "hello.jsp";}  }
class C{  public void commitHistogram(){  RecordHistogram.recordBooleanHistogram(mHistogramName,mIsHit);  mIsHit=false;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SRuntimePackage.EXECUTION_SLOT__VALUE:    return getValue();case SRuntimePackage.EXECUTION_SLOT__FQ_NAME:  return getFqName();case SRuntimePackage.EXECUTION_SLOT__WRITABLE:return isWritable();case SRuntimePackage.EXECUTION_SLOT__TYPE:if (resolve) return getType();return basicGetType();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isUnload(){  if (hasNoSteps()) {    return false;  }  return getStart().isWater() && !getEnd().isWater();}  }
class C{  public static Request createRefreshRequest(){  Request refreshRequest=new Request();  try {    refreshRequest.setMessageType(Message.REFRESH_REQUEST);  } catch (  IllegalArgumentException iaex) {    logger.log(Level.FINE,"Failed to set message type.",iaex);  }  return refreshRequest;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public NoSuchFileException(String file){  super(file);}  }
class C{  public void close() throws IOException {  closeStartIfNecessary();  writer.close();}  }
class C{  public List<Certificate> peerCertificates(){  return peerCertificates;}  }
class C{  @Override public void connect() throws IOException {  File f=new File(filename);  if (f.isDirectory()) {    isDir=true;    is=getDirectoryListing(f);  } else {    is=new BufferedInputStream(new FileInputStream(f));    long lengthAsLong=f.length();    length=lengthAsLong <= Integer.MAX_VALUE ? (int)lengthAsLong : Integer.MAX_VALUE;  }  connected=true;}  }
class C{  protected void fillData(){  filterTypeButtons[0].setSelection(true);  boolOpButtons[0].setSelection(true);  numberOfPredClauses=1;  int typeFieldIndex=-1;  for (int i=0; i < filterFields.length; i++) {    if (filterFields[i].equals("type")) {      typeFieldIndex=i;      numberOfPredClauses=2;      break;    }  }  for (int i=0; i < MAX_PRED_CLAUSES; i++) {    fieldCombos[i].setItems(filterFields);    compOpCombos[i].setItems(CompareOp.strings);    compOpCombos[i].select(0);    if (i >= numberOfPredClauses) {      setPredVisible(i,false);      clausesComplete[i]=false;    } else {      int index=i;      if (typeFieldIndex >= 0) {        index=(i == 0) ? typeFieldIndex : (typeFieldIndex == 0) ? 1 : 0;      }      fieldCombos[i].select(index);      setFieldValue(i);      clausesComplete[i]=true;    }  }  setPageComplete(true);}  }
class C{  private ScriptEngine newScriptEngine(String name) throws ScriptException {  ScriptEngineManager manager=new ScriptEngineManager();  ScriptEngine engine=manager.getEngineByName(name);  if (engine == null) {    throw new ScriptException("no scripting engine for " + name);  }  return engine;}  }
class C{  @Inline @Uninterruptible private static int decodeLongEncoding(byte[] code,int index){  int value;  value=(code[index]) & 0x000000fc;  value|=(code[index + 1] << BITS_IN_BYTE) & 0x0000ff00;  value|=(code[index + 2] << (2 * BITS_IN_BYTE)) & 0x00ff0000;  value|=(code[index + 3] << (3 * BITS_IN_BYTE)) & 0xff000000;  return value;}  }
class C{  public boolean isPanEnabled(){  return mPanEnabled;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (declaredTypeAccessModifier: ");  result.append(declaredTypeAccessModifier);  result.append(", declaredProvidedByRuntime: ");  result.append(declaredProvidedByRuntime);  result.append(')');  return result.toString();}  }
class C{  @Override public void onDrawEye(Eye eye){  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);  Engine.checkGLError("mColorParam");  if (!prefOrientationProviderString.equals("0")) {    if (firstOnDrawEye > 0) {      firstOnDrawEye--;      float[] m=new float[16];      Matrix.invertM(m,0,mHeadViewSDK,0);      Matrix.multiplyMM(m,0,eye.getEyeView(),0,m,0);      if (eye.getType() == Eye.Type.RIGHT) {        mEyeRightView=m;      } else       if (eye.getType() == Eye.Type.LEFT) {        mEyeLeftView=m;      }      return;    }    float[] m=new float[16];    if (eye.getType() == Eye.Type.RIGHT) {      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeRightView,0);    } else {      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeLeftView,0);    }    Matrix.multiplyMM(mView,0,m,0,mCamera,0);  } else {    Matrix.multiplyMM(mView,0,eye.getEyeView(),0,mCamera,0);  }  float[] perspective=eye.getPerspective(Z_NEAR,Z_FAR);  GLES20.glEnable(GLES20.GL_DEPTH_TEST);  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);  GLES20.glEnable(GLES20.GL_BLEND);  if (prefShowEnv && bgEnv.isReady()) {    Matrix.multiplyMM(mModelView,0,mView,0,bgEnv.model,0);    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);    bgEnv.draw(eye.getType(),mModelViewProjection);  }  GLES20.glDisable(GLES20.GL_DEPTH_TEST);  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,cameraPreview.model,0);  cameraPreview.draw(eye.getType(),mModelViewProjection);  Matrix.multiplyMM(mModelView,0,mView,0,screen.model,0);  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);  screen.draw(eye.getType(),mModelViewProjection);  for (  ButtonThing button : buttonList) {    Matrix.multiplyMM(mModelView,0,mView,0,button.model,0);    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);    button.draw(eye.getType(),mModelViewProjection);  }  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,aimPoint.model,0);  aimPoint.draw(Eye.Type.MONOCULAR,mModelViewProjection);}  }
class C{  public static DoubleMatrix jblas_solve(double[][] A,double[][] B){  return org.jblas.Solve.solve(new DoubleMatrix(A),new DoubleMatrix(B));}  }
class C{  public void testGetHttpMethod_NameWithoutRestPrefix(){  initializePsiClass("\"\"","\"\"");  initializePsiMethod("foo","\"\"","\"\"");  MockitoAnnotations.initMocks(this);  RestSignatureInspection inspection=new RestSignatureInspection();  String httpMethod=inspection.getHttpMethod(mockPsiMethod);  assertEquals("POST",httpMethod);}  }
class C{  @Override protected void validate(){  failIf((this.value < 0 || this.value > 1.0),"Ratio must be a float between 0 and 1");}  }
class C{  public void addFocusListener(FocusListener l){  getTextComponent().addFocusListener(l);}  }
class C{  public boolean isActive(){  return active;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  SubContextList subContextList=xctxt.getCurrentNodeList();  int currentNode=DTM.NULL;  if (null != subContextList) {    if (subContextList instanceof PredicatedNodeTest) {      LocPathIterator iter=((PredicatedNodeTest)subContextList).getLocPathIterator();      currentNode=iter.getCurrentContextNode();    } else     if (subContextList instanceof StepPattern) {      throw new RuntimeException(XSLMessages.createMessage(XSLTErrorResources.ER_PROCESSOR_ERROR,null));    }  } else {    currentNode=xctxt.getContextNode();  }  return new XNodeSet(currentNode,xctxt.getDTMManager());}  }
class C{  protected void assertEntryNotEquals(File file,String key,int skip,double expected) throws IOException {  Assert.assertTrue(Math.abs(expected - getEntryValue(file,key,skip)) > TestThresholds.STATISTICS_EPS);}  }
class C{  @Override public double evaluate(Recommendation<U,I> recommendation){  U u=recommendation.getUser();  RelevanceModel.UserRelevanceModel<U,I> userRelModel=relModel.getModel(u);  ItemNovelty.UserItemNoveltyModel<U,I> uinm=novelty.getModel(u);  if (uinm == null) {    return 0.0;  }  double nov=0.0;  double norm=0.0;  int rank=0;  for (  Tuple2od<I> iv : recommendation.getItems()) {    nov+=disc.disc(rank) * userRelModel.gain(iv.v1) * uinm.novelty(iv.v1);    norm+=disc.disc(rank);    rank++;    if (rank >= cutoff) {      break;    }  }  if (norm > 0.0) {    nov/=norm;  }  return nov;}  }
class C{  public static List<Graph> generateMbDags(Graph mbPattern,boolean orientBidirectedEdges,IndependenceTest test,int depth,Node target){  return new LinkedList<>(listMbDags(new EdgeListGraph(mbPattern),orientBidirectedEdges,test,depth,target));}  }
class C{  public ServiceConfigurationError(Throwable x){  super(x);}  }
class C{  public boolean containsValue(byte[] val){  for (  NSObject o : dict.values()) {    if (o.getClass().equals(NSData.class)) {      NSData dat=(NSData)o;      if (Arrays.equals(dat.bytes(),val))       return true;    }  }  return false;}  }
class C{  public Collection<?> toCollection(int column) throws SQLException {  return super.toCollection(column);}  }
class C{  public JRangeSlider createHorizontalRangeSlider(){  return createRangeSlider(JRangeSlider.HORIZONTAL,JRangeSlider.LEFTRIGHT_TOPBOTTOM);}  }
class C{  private BinarySchema createSchema(){  assert fieldIdLen == BinaryUtils.FIELD_ID_LEN;  BinarySchema.Builder builder=BinarySchema.Builder.newBuilder();  int searchPos=footerStart;  int searchEnd=searchPos + footerLen;  while (searchPos < searchEnd) {    int fieldId=in.readIntPositioned(searchPos);    builder.addField(fieldId);    searchPos+=BinaryUtils.FIELD_ID_LEN + fieldOffLen;  }  return builder.build();}  }
class C{  private void sb2(int a,int b,int c,int d){  int t1=~a;  int t2=b ^ d;  int t3=c & t1;  X0=t2 ^ t3;  int t5=c ^ t1;  int t6=c ^ X0;  int t7=b & t6;  X3=t5 ^ t7;  X2=a ^ ((d | t7) & (X0 | t5));  X1=(t2 ^ X3) ^ (X2 ^ (d | t1));}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processRequest(request,response);}  }
class C{  protected long __getPageHibernateId(int pageID){  long hibernateID=-1;  if (idMapPages.containsKey(pageID)) {    return idMapPages.get(pageID);  }  Session session=this.__getHibernateSession();  session.beginTransaction();  Object retObjectPage=session.createQuery("select page.id from Page as page where page.pageId = :pageId").setParameter("pageId",pageID,IntegerType.INSTANCE).uniqueResult();  session.getTransaction().commit();  if (retObjectPage != null) {    hibernateID=(Long)retObjectPage;    idMapPages.put(pageID,hibernateID);    return hibernateID;  }  return hibernateID;}  }
class C{  @Override public TopicSubscriber createSubscriber(final Topic topic,final String messageSelector,final boolean noLocal) throws JMSException {  lock();  try {    TopicSession session=getTopicSessionInternal();    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createSubscriber " + session + " topic="+ topic+ " selector="+ messageSelector+ " noLocal="+ noLocal);    }    TopicSubscriber result=session.createSubscriber(topic,messageSelector,noLocal);    result=new ActiveMQRATopicSubscriber(result,this);    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createdSubscriber " + session + " ActiveMQTopicSubscriber="+ result);    }    addConsumer(result);    return result;  }  finally {    unlock();  }}  }
class C{  public EventEntry addReminder(Reminder reminder){  super.addElement(Reminder.KEY,reminder);  return this;}  }
class C{  public void replaceItem(@NotNull final ComponentItem itemToBeReplaced,@NotNull final ComponentItem replacement){  LOG.assertTrue(myItems.contains(itemToBeReplaced));  final int index=myItems.indexOf(itemToBeReplaced);  myItems.set(index,replacement);}  }
class C{  public void appendEnd(StringBuffer buffer,Object object){  if (this.fieldSeparatorAtEnd == false) {    removeLastFieldSeparator(buffer);  }  appendContentEnd(buffer);  unregister(object);}  }
class C{  void writeHeaders(List<Header> headerBlock) throws IOException {  for (int i=0, size=headerBlock.size(); i < size; i++) {    ByteString name=headerBlock.get(i).name.toAsciiLowercase();    Integer staticIndex=NAME_TO_FIRST_INDEX.get(name);    if (staticIndex != null) {      writeInt(staticIndex + 1,PREFIX_4_BITS,0);      writeByteString(headerBlock.get(i).value);    } else {      out.writeByte(0x00);      writeByteString(name);      writeByteString(headerBlock.get(i).value);    }  }}  }
class C{  public void test_ticket_1007() throws Exception {  new TestHelper("ticket-1007","ticket-1007.rq","ticket-1007.trig","ticket-1007.srx",false).runTest();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrcreatetextnode.class,args);}  }
class C{  public void testCreateRoleMap(){  List<User> users=User.parseUsers("u1:p1:r1,r2|u2:p2:r2,r3");  Map<String,List<User>> roles=User.createRoleMap(users);  assertNotNull(roles.get("r1"));  assertNotNull(roles.get("r2"));  assertNotNull(roles.get("r3"));  assertEquals(1,roles.get("r1").size());  assertEquals("u1",roles.get("r1").get(0).getName());  assertEquals(2,roles.get("r2").size());  assertEquals("u1",roles.get("r2").get(0).getName());  assertEquals("u2",roles.get("r2").get(1).getName());  assertEquals(1,roles.get("r3").size());  assertEquals("u2",roles.get("r3").get(0).getName());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:32:03.423 -0400",hash_original_method="193D8407C7F47AF7E61D4646969A2F9A",hash_generated_method="DB552426ACF60CB19ED3AFB8ADA728F0") private ContentValues toValues(){  ContentValues map=new ContentValues();  map.put(MediaStore.MediaColumns.DATA,mPath);  map.put(MediaStore.MediaColumns.TITLE,mTitle);  map.put(MediaStore.MediaColumns.DATE_MODIFIED,mLastModified);  map.put(MediaStore.MediaColumns.SIZE,mFileSize);  map.put(MediaStore.MediaColumns.MIME_TYPE,mMimeType);  map.put(MediaStore.MediaColumns.IS_DRM,mIsDrm);  if (mWidth > 0 && mHeight > 0) {    map.put(MediaStore.MediaColumns.WIDTH,mWidth);    map.put(MediaStore.MediaColumns.HEIGHT,mHeight);  }  if (!mNoMedia) {    if (MediaFile.isVideoFileType(mFileType)) {      map.put(Video.Media.ARTIST,(mArtist != null && mArtist.length() > 0 ? mArtist : MediaStore.UNKNOWN_STRING));      map.put(Video.Media.ALBUM,(mAlbum != null && mAlbum.length() > 0 ? mAlbum : MediaStore.UNKNOWN_STRING));      map.put(Video.Media.DURATION,mDuration);    } else     if (MediaFile.isImageFileType(mFileType)) {    } else     if (MediaFile.isAudioFileType(mFileType)) {      map.put(Audio.Media.ARTIST,(mArtist != null && mArtist.length() > 0) ? mArtist : MediaStore.UNKNOWN_STRING);      map.put(Audio.Media.ALBUM_ARTIST,(mAlbumArtist != null && mAlbumArtist.length() > 0) ? mAlbumArtist : null);      map.put(Audio.Media.ALBUM,(mAlbum != null && mAlbum.length() > 0) ? mAlbum : MediaStore.UNKNOWN_STRING);      map.put(Audio.Media.COMPOSER,mComposer);      map.put(Audio.Media.GENRE,mGenre);      if (mYear != 0) {        map.put(Audio.Media.YEAR,mYear);      }      map.put(Audio.Media.TRACK,mTrack);      map.put(Audio.Media.DURATION,mDuration);      map.put(Audio.Media.COMPILATION,mCompilation);    }  }  return map;}  }
class C{  public boolean isOneParentDiseased(){  return isDiseased(MOTHER_INDEX) ^ isDiseased(FATHER_INDEX);}  }
class C{  @Transactional public Token generate(final String tokenIdentity,final String service){  return generate(DEFAULT_ALLOWED_TOKEN_AGE_SECS,tokenIdentity,service);}  }
class C{  public static void cancelThumbnailRequest(ContentResolver cr,long origId,long groupId){  InternalThumbnails.cancelThumbnailRequest(cr,origId,EXTERNAL_CONTENT_URI,groupId);}  }
class C{  public void reloadWorkspace(){  mModel.resetLoadedState(false,true);  mModel.startLoaderFromBackground();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.203 -0500",hash_original_method="4DE074146D6A81FB201A39A399764E9F",hash_generated_method="F7FB78044DCFD0CD6B05FD966C0EA7AC") public InReplyToHeader createInReplyToHeader(String callId) throws ParseException {  if (callId == null)   throw new NullPointerException("null callId arg");  InReplyTo inReplyTo=new InReplyTo();  inReplyTo.setCallId(callId);  return inReplyTo;}  }
class C{  public JSONArray put(boolean value){  this.put(value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  private void realizaFiltrado(String usuarioOrigen,Collection prestamos,ArrayList prestamosFinal){  Iterator prestamos_it=prestamos.iterator();  while (prestamos_it.hasNext()) {    PrestamoVO prestamo=(PrestamoVO)prestamos_it.next();    if (!(prestamo.getEstado() == PrestamosConstants.ESTADO_PRESTAMO_DENEGADO || prestamo.getEstado() == PrestamosConstants.ESTADO_PRESTAMO_DEVUELTO)) {      if (usuarioOrigen != null && usuarioOrigen.trim().length() > 0) {        if (prestamo.getIdusrgestor().equals(usuarioOrigen))         prestamosFinal.add(prestamo);      } else       prestamosFinal.add(prestamo);    }  }}  }
class C{  void convertDescToDITA(Element input,HashMap<String,String> oldNewNamesMap,Boolean isTableElement){  NodeList descendants=input.getChildNodes();  if (descendants != null && descendants.getLength() != 0) {    CDATASection cdataSection=(CDATASection)descendants.item(0);    String inputString=cdataSection.getData();    if (inputString != null && !inputString.equals("")) {      Document targetDocument=null;      TransformerFactory transfac=TransformerFactory.newInstance();      Transformer trans=null;      try {        inputString="<cdatastring>" + inputString + "</cdatastring>";        trans=transfac.newTransformer();        StringReader stringReader=new StringReader(inputString);        StreamSource source=new StreamSource(stringReader);        DOMResult result=new DOMResult();        trans.transform(source,result);        targetDocument=(Document)result.getNode();      } catch (      Exception ex) {        ex.printStackTrace();      }      if (targetDocument != null) {        NodeList cDataDescendants=targetDocument.getDocumentElement().getChildNodes();        for (int iy=0; iy < cDataDescendants.getLength(); iy++) {          Node childNode=cDataDescendants.item(iy);          if (childNode.getNodeType() != Node.ELEMENT_NODE) {            continue;          }          Element child=(Element)childNode;          convert(child,targetDocument.getDocumentElement(),oldNewNamesMap,targetDocument,isTableElement);        }        cDataDescendants=targetDocument.getDocumentElement().getChildNodes();        for (int iy=0; iy < cDataDescendants.getLength(); iy++) {          Node childNode=cDataDescendants.item(iy);          if (childNode.getNodeType() != Node.ELEMENT_NODE) {            continue;          }          Element child=(Element)childNode;          convertChildren(child,oldNewNamesMap,targetDocument,isTableElement);        }        try {          StringWriter sw=new StringWriter();          StreamResult result=new StreamResult(sw);          DOMSource source=new DOMSource(targetDocument);          trans.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,"yes");          trans.transform(source,result);          String xmlString=sw.toString();          xmlString=xmlString.replaceAll("<cdatastring>","");          xmlString=xmlString.replaceAll("</cdatastring>","");          cdataSection.setData(xmlString);        } catch (        Exception ex) {          ex.printStackTrace();        }      }    }  }}  }
class C{  protected void formDescriptorExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  logger.info("Inicio de formDescriptorExecuteLogic");  GestionDescripcionBI descripcionBI=getGestionDescripcionBI(request);  String id=request.getParameter(Constants.ID);  logger.info("Id descriptor: " + id);  if (StringUtils.isNotBlank(id)) {    saveCurrentInvocation(KeysClientsInvocations.DESCRIPCION_LISTAS_DESCRIPTORAS_DESCRIPTOR_EDIT,request);    ((DescriptorForm)form).set(descripcionBI.getDescriptorExt(id));  } else {    saveCurrentInvocation(KeysClientsInvocations.DESCRIPCION_LISTAS_DESCRIPTORAS_DESCRIPTOR_FORM,request);    String idLista=request.getParameter("idLista");    ListaDescrVO listaDescriptora=descripcionBI.getListaDescriptora(idLista);    if (listaDescriptora != null)     ((DescriptorForm)form).setNombreLista(listaDescriptora.getNombre());  }  request.setAttribute(DescripcionConstants.FICHAS_DESCRIPCION_KEY,descripcionBI.getFichasByTiposNivel(new int[]{ElementoCuadroClasificacion.TIPO_DESCRIPTOR,ElementoCuadroClasificacion.TIPO_ALL}));  request.setAttribute(DescripcionConstants.LISTAS_CONTROL_ACCESO_KEY,getGestionControlUsuarios(request).getListasControlAccesoByTipo(TipoListaControlAcceso.DESCRIPTOR));  cargarListaRepositoriosECM(request);  setReturnActionFordward(request,mapping.findForward("editar_descriptor"));}  }
class C{  public static boolean acceptsUrl(String url){  return (url != null) && (url.startsWith("jdbc:mariadb:") || url.startsWith("jdbc:mysql:") || url.startsWith("jdbc:mariadb_" + Version.version + ":"));}  }
class C{  private void performNextTask(){  if (!mOnScreenRemoveMarkerTasks.isEmpty()) {    removeMarker(mOnScreenRemoveMarkerTasks.poll());  } else   if (!mAnimationTasks.isEmpty()) {    mAnimationTasks.poll().perform();  } else   if (!mOnScreenCreateMarkerTasks.isEmpty()) {    mOnScreenCreateMarkerTasks.poll().perform(this);  } else   if (!mCreateMarkerTasks.isEmpty()) {    mCreateMarkerTasks.poll().perform(this);  } else   if (!mRemoveMarkerTasks.isEmpty()) {    removeMarker(mRemoveMarkerTasks.poll());  }}  }
class C{  public final boolean isFinished(){  return mScrollerX.mFinished && mScrollerY.mFinished;}  }
class C{  @DSComment("Potential intent to trigger other processing") @DSSafe(DSCat.INTENT_EXCHANGE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.472 -0500",hash_original_method="FDAB0726590DA4887C7F048C162A9588",hash_generated_method="1C66BD585F85E5DE9F834C9668DEEE1F") public Intent putExtra(String name,double value){  mExtras.put(name,value);  return this;}  }
class C{  private int readEncodedContent(byte[] cont) throws Exception {  int glyphCount=0;  String line;  final String rd="rd";  final String nd="nd";  final int size=cont.length;  int charstringStart=-1;  int end=-1;  int i;  int cipher;  int plain;  StringBuilder tmp;  for (i=4; i < size; i++) {    if ((cont[i - 3] == 101) && (cont[i - 2] == 120) && (cont[i - 1] == 101)&& (cont[i] == 99)) {      charstringStart=i + 1;      while (cont[charstringStart] == 10 || cont[charstringStart] == 13) {        charstringStart++;      }      i=size;    }  }  if (charstringStart != -1) {    for (i=charstringStart; i < size - 10; i++) {      if ((cont[i] == 99) && (cont[i + 1] == 108) && (cont[i + 2] == 101)&& (cont[i + 3] == 97)&& (cont[i + 4] == 114)&& (cont[i + 5] == 116)&& (cont[i + 6] == 111)&& (cont[i + 7] == 109)&& (cont[i + 8] == 97)&& (cont[i + 9] == 114)&& (cont[i + 10] == 107)) {        end=i - 1;        while ((cont[end] == 10) || (cont[end] == 13)) {          end--;        }        i=size;      }    }  }  if (end == -1) {    end=size;  }  int r=55665;  final int n=4;  boolean isAscii=true;  for (i=charstringStart; i < charstringStart + (n * 2); i++) {    final char c=(char)(cont[i]);    if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f')) {    } else {      isAscii=false;      break;    }  }  if (charstringStart != -1) {    final FastByteArrayOutputStream bos=new FastByteArrayOutputStream(end - charstringStart);    if (isFontSubstituted && !isAscii) {      charstringStart=charstringStart + 2 + skipBytes;    }    for (i=charstringStart; i < end; i++) {      if (!isAscii) {        cipher=cont[i] & 0xff;      } else {        int chars=0;        tmp=new StringBuilder();        while (chars < 2) {          cipher=cont[i] & 0xff;          i++;          if (cipher != 10 && cipher != 13 && cipher != 9 && cipher != 32) {            tmp.append((char)cipher);            chars++;          }        }        i--;        cipher=Integer.parseInt(tmp.toString(),16);      }      plain=(cipher ^ (r >> 8));      r=((cipher + r) * c1 + c2) & 0xffff;      if (i > charstringStart + n) {        bos.write(plain);      }    }    cont=bos.toByteArray();  }  final BufferedReader br=new BufferedReader(new StringReader(new String(cont)));  while (true) {    line=br.readLine();    if (line == null) {      break;    }    if (line.startsWith("/lenIV")) {      final StringTokenizer vals=new StringTokenizer(line);      vals.nextToken();      skipBytes=Integer.parseInt(vals.nextToken());    }  }  br.close();  final int l=cont.length;  int p=0;  charstringStart=-1;  int subrsStart=-1;  int blueValuesStart=-1;  int otherBluesStart=-1;  int familyBluesStart=-1;  int familyOtherBluesStart=-1;  int blueScaleStart=-1;  int blueShiftStart=-1;  int blueFuzzStart=-1;  int stdHWStart=-1;  int stdVWStart=-1;  int stemSnapHStart=-1;  int stemSnapVStart=-1;  int forceBoldStart=-1;  int languageGroupStart=-1;  final char[] charstringsChars="/CharStrings".toCharArray();  final char[] subrsChars="/Subrs".toCharArray();  final char[] blueValuesChars="/BlueValues".toCharArray();  final char[] otherBluesChars="/OtherBlues".toCharArray();  final char[] familyBluesChars="/FamilyBlues".toCharArray();  final char[] familyOtherBluesChars="/FamilyOtherBlues".toCharArray();  final char[] blueScaleChars="/BlueScale".toCharArray();  final char[] blueShiftChars="/BlueShift".toCharArray();  final char[] blueFuzzChars="/BlueFuzz".toCharArray();  final char[] stdHWChars="/StdHW".toCharArray();  final char[] stdVWChars="/StdVW".toCharArray();  final char[] stemSnapHChars="/StemSnapH".toCharArray();  final char[] stemSnapVChars="/StemSnapV".toCharArray();  final char[] forceBoldChars="/ForceBold".toCharArray();  final char[] languageGroupChars="/LanguageGroup".toCharArray();  while (p < l) {    if (p == l) {      break;    }    if (charstringStart == -1 && (p + 11 < l) && checkForString(cont,p,charstringsChars)) {      charstringStart=p + 11;    } else     if (subrsStart == -1 && (p + 5 < l) && checkForString(cont,p,subrsChars)) {      subrsStart=p + 6;    } else     if (blueValuesStart == -1 && (p + 11 < l) && checkForString(cont,p,blueValuesChars)) {      blueValuesStart=p + 11;    } else     if (otherBluesStart == -1 && (p + 11 < l) && checkForString(cont,p,otherBluesChars)) {      otherBluesStart=p + 11;    } else     if (familyBluesStart == -1 && (p + 12 < l) && checkForString(cont,p,familyBluesChars)) {      familyBluesStart=p + 12;    } else     if (familyOtherBluesStart == -1 && (p + 17 < l) && checkForString(cont,p,familyOtherBluesChars)) {      familyOtherBluesStart=p + 17;    } else     if (blueScaleStart == -1 && (p + 10 < l) && checkForString(cont,p,blueScaleChars)) {      blueScaleStart=p + 10;    } else     if (blueShiftStart == -1 && (p + 10 < l) && checkForString(cont,p,blueShiftChars)) {      blueShiftStart=p + 10;    } else     if (blueFuzzStart == -1 && (p + 9 < l) && checkForString(cont,p,blueFuzzChars)) {      blueFuzzStart=p + 9;    } else     if (stdHWStart == -1 && (p + 6 < l) && checkForString(cont,p,stdHWChars)) {      stdHWStart=p + 6;    } else     if (stdVWStart == -1 && (p + 6 < l) && checkForString(cont,p,stdVWChars)) {      stdVWStart=p + 6;    } else     if (stemSnapHStart == -1 && (p + 10 < l) && checkForString(cont,p,stemSnapHChars)) {      stemSnapHStart=p + 10;    } else     if (stemSnapVStart == -1 && (p + 10 < l) && checkForString(cont,p,stemSnapVChars)) {      stemSnapVStart=p + 10;    } else     if (forceBoldStart == -1 && (p + 10 < l) && checkForString(cont,p,forceBoldChars)) {      forceBoldStart=p + 10;    } else     if (languageGroupStart == -1 && (p + 14 < l) && checkForString(cont,p,languageGroupChars)) {      languageGroupStart=p + 14;    }    if (subrsStart > -1 && charstringStart > -1 && blueValuesStart > -1 && otherBluesStart > -1 && familyBluesStart > -1 && familyOtherBluesStart > -1 && blueScaleStart > -1 && blueShiftStart > -1 && blueFuzzStart > -1 && stdHWStart > -1 && stdVWStart > -1 && stemSnapHStart > -1 && stemSnapVStart > -1 && forceBoldStart > -1 && languageGroupStart > -1) {      break;    }    p++;  }  if (charstringStart == -1) {    this.isFontSubstituted=false;    LogWriter.writeLog("No glyph data found");  } else {    glyphCount=extractFontData(skipBytes,cont,charstringStart,rd,l,nd);  }  if (subrsStart > -1) {    extractSubroutineData(skipBytes,cont,subrsStart,charstringStart,rd,l,nd);  }  if (blueValuesStart > -1) {    blueValues=readIntArray(cont,blueValuesStart);  }  if (otherBluesStart > -1) {    otherBlues=readIntArray(cont,otherBluesStart);  }  if (familyBluesStart > -1) {    familyBlues=readIntArray(cont,familyBluesStart);  }  if (familyOtherBluesStart > -1) {    familyOtherBlues=readIntArray(cont,familyOtherBluesStart);  }  if (stdHWStart > -1) {    stdHW=readReal(cont,stdHWStart);  }  if (stdVWStart > -1) {    stdVW=readReal(cont,stdVWStart);  }  if (stemSnapHStart > -1) {    stemSnapH=readIntArray(cont,stemSnapHStart);  }  if (stemSnapVStart > -1) {    stemSnapV=readIntArray(cont,stemSnapVStart);  }  if (blueScaleStart > -1) {    blueScale=readReal(cont,blueScaleStart);  }  if (blueShiftStart > -1) {    blueShift=readInteger(cont,blueShiftStart);  }  if (blueFuzzStart > -1) {    blueFuzz=readInteger(cont,blueFuzzStart);  }  if (forceBoldStart > -1) {    int j=forceBoldStart;    int forceBoldEnd=-1;    while (j < l && forceBoldEnd == -1) {      if (checkForString(cont,j,DEF_CHARS)) {        forceBoldEnd=j;      }      j++;    }    final String val=new String(cont,forceBoldStart,forceBoldEnd - forceBoldStart);    try {      forceBold=Boolean.parseBoolean(val);    } catch (    final NumberFormatException e) {      LogWriter.writeLog("Exception " + e);    }  }  if (languageGroupStart > -1) {    languageGroup=readInteger(cont,languageGroupStart);  }  return glyphCount;}  }
class C{  public static void v(String tag,String msg){  v(tag,msg,null);}  }
class C{  public static int numberOfLeadingZerosSigned(long[] v){  for (int p=0, ip=v.length - 1; ; p++, ip--) {    if (p == v.length) {      return -1;    }    if (v[ip] != 0) {      return Long.numberOfLeadingZeros(v[ip]) + p * Long.SIZE;    }  }}  }
class C{  @Override public void readFields(DataInput in) throws IOException {  this.check();  int size=in.readInt();  for (int i=0; i < size; i++) {    try {      E item=itemTypeClass.newInstance();      item.readFields(in);      this.add(item);    } catch (    InstantiationException e) {      throw new IOException("Got exception to create instance for class: " + itemTypeClass + ": "+ e.getMessage(),e);    }catch (    IllegalAccessException e) {      throw new IOException("Got exception to create instance for class: " + itemTypeClass + ": "+ e.getMessage(),e);    }  }}  }
class C{  public static Stopwatch createStarted(Ticker ticker){  return new Stopwatch(ticker).start();}  }
class C{  public boolean doClearAllRegisters(){  return m_clearRegisterCheckbox.isSelected();}  }
class C{  void streamCompressionDenied(){synchronized (this) {    this.notify();  }}  }
class C{  public static double MCMSEfitness(boolean useTrainingData,GEPIndividual ind){  double MMSE=0.0;  int numDepVars=((GEPSpecies)ind.species).numberOfChromosomes;  for (int i=0; i < numDepVars; i++)   MMSE+=MSErawFitness(useTrainingData,ind,i);  MMSE=MMSE / numDepVars;  return (1000.0) / (1.0 + MMSE);}  }
class C{  protected Set<String> filterFields(Collection<String> fields){  Set<String> filteredSet=new LinkedHashSet<>();  for (  String field : fields) {    try {      if (checkIncludeSparseField(requestScope.getSparseFields(),type,field)) {        if (requestScope.getPermissionExecutor().shouldShortCircuitPermissionChecks(ReadPermission.class,getResourceClass(),field)) {          filteredSet.add(field);          continue;        }        ExpressionResult expressionResult=requestScope.getPermissionExecutor().checkUserPermissions(this,ReadPermission.class,field);        if (expressionResult == ExpressionResult.PASS) {          filteredSet.add(field);          continue;        }        checkFieldAwarePermissions(ReadPermission.class,field,(Object)null,(Object)null);        filteredSet.add(field);      }    } catch (    ForbiddenAccessException e) {    }  }  return filteredSet;}  }
class C{  public static void saveBooleanToPreference(Context context,String key,Boolean value){  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(context);  if (value == null) {    pref.edit().remove(key).apply();  } else {    pref.edit().putBoolean(key,value).apply();  }}  }
class C{  protected <P extends IRequestablePage>void addPage(Class<P> pageClass,Function<PageParameters,P> factory){  pageFactories.put(pageClass,factory);}  }
class C{  protected Node deepCopyInto(Node n){  GenericProcessingInstruction p;  p=(GenericProcessingInstruction)super.deepCopyInto(n);  p.setTarget(getTarget());  return p;}  }
class C{  protected void clearExpiredPoints(){  Date now=new Date();  Set<Date> expiredSet=new HashSet<>();  for (  Date date : eventTimes) {    long diff=now.getTime() - date.getTime();    long seconds=TimeUnit.MILLISECONDS.toSeconds(diff);    if (seconds > mapping.getCondition().getPeriodSec()) {      expiredSet.add(date);    } else {      break;    }  }  logger.debug("expiredSet : " + expiredSet);  eventTimes.removeAll(expiredSet);  logger.debug("eventTimes after clean :" + eventTimes);}  }
class C{  protected GraphDocument provideGraphDocument(IFile file){  GraphDocument result=retrieveGraphDocument(file);  if (null != result) {    return result;  }  return loadGraphDocument(file);}  }
class C{  protected DateTimeSyntax(Date value){  if (value == null) {    throw new NullPointerException("value is null");  }  this.value=value;}  }
class C{  public void parse(File file) throws SAXException, IOException {  InputStream in=new FileInputStream(file);  try {    parse(in);  }  finally {    try {      in.close();    } catch (    IOException ignore) {    }  }}  }
class C{  public void addAnimatedNode(Region node,Callback<Boolean,ArrayList<KeyValue>> animationCallBack){  if (node instanceof JFXNodesList) {    StackPane container=new StackPane(node);    container.setPickOnBounds(false);    addAnimatedNode(container,animationCallBack);    return;  }  node.setVisible(false);  node.minWidthProperty().bind(node.prefWidthProperty());  node.minHeightProperty().bind(node.prefHeightProperty());  if (this.getChildren().size() > 0)   initNode(node); else {    if (node instanceof Button)     ((Button)node).setOnAction(null); else     node.setOnMouseClicked(null);    node.getStyleClass().add("trigger-node");  }  if (this.getChildren().size() == 0) {    node.setVisible(true);    this.minHeightProperty().bind(node.prefHeightProperty());    this.maxHeightProperty().bind(node.prefHeightProperty());    this.minWidthProperty().bind(node.prefWidthProperty());    this.maxWidthProperty().bind(node.prefWidthProperty());  }  this.getChildren().add(node);  this.rotateProperty().addListener(null);  if (animationCallBack == null && this.getChildren().size() != 1)   animationCallBack=null; else   if (animationCallBack == null && this.getChildren().size() == 1)   animationCallBack=null;  animationsMap.put(node,animationCallBack);}  }
class C{  public void appendSuper(StringBuffer buffer,String superToString){  appendToString(buffer,superToString);}  }
class C{  public SocketSecurityException(String s){  super(s);}  }
class C{  private int scrubSomeCells(SortedMap<Long,Multimap<TableReference,Cell>> scrubTimestampToTableNameToCell,TransactionManager txManager,long maxScrubTimestamp){  if (log.isTraceEnabled()) {    log.trace("Attempting to scrub cells: " + scrubTimestampToTableNameToCell);  }  if (log.isInfoEnabled()) {    int numCells=0;    Set<TableReference> tables=Sets.newHashSet();    for (    Multimap<TableReference,Cell> v : scrubTimestampToTableNameToCell.values()) {      tables.addAll(v.keySet());      numCells+=v.size();    }    log.info("Attempting to scrub " + numCells + " cells from tables "+ tables);  }  if (scrubTimestampToTableNameToCell.size() == 0) {    return 0;  }  Multimap<Long,Cell> toRemoveFromScrubQueue=HashMultimap.create();  int numCellsReadFromScrubTable=0;  List<Future<Void>> scrubFutures=Lists.newArrayList();  for (  Map.Entry<Long,Multimap<TableReference,Cell>> entry : scrubTimestampToTableNameToCell.entrySet()) {    final long scrubTimestamp=entry.getKey();    final Multimap<TableReference,Cell> tableNameToCell=entry.getValue();    numCellsReadFromScrubTable+=tableNameToCell.size();    long commitTimestamp=getCommitTimestampRollBackIfNecessary(scrubTimestamp,tableNameToCell);    if (commitTimestamp >= maxScrubTimestamp) {      continue;    } else     if (commitTimestamp != TransactionConstants.FAILED_COMMIT_TS) {      for (      final List<Entry<TableReference,Cell>> batch : Iterables.partition(tableNameToCell.entries(),batchSizeSupplier.get())) {        final Multimap<TableReference,Cell> batchMultimap=HashMultimap.create();        for (        Entry<TableReference,Cell> e : batch) {          batchMultimap.put(e.getKey(),e.getValue());        }        scrubFutures.add(exec.submit(null));      }    }    toRemoveFromScrubQueue.putAll(scrubTimestamp,tableNameToCell.values());  }  for (  Future<Void> future : scrubFutures) {    Futures.getUnchecked(future);  }  Multimap<Cell,Long> cellToScrubTimestamp=HashMultimap.create();  scrubberStore.markCellsAsScrubbed(Multimaps.invertFrom(toRemoveFromScrubQueue,cellToScrubTimestamp),batchSizeSupplier.get());  if (log.isTraceEnabled()) {    log.trace("Finished scrubbing cells: " + scrubTimestampToTableNameToCell);  }  if (log.isInfoEnabled()) {    Set<TableReference> tables=Sets.newHashSet();    for (    Multimap<TableReference,Cell> v : scrubTimestampToTableNameToCell.values()) {      tables.addAll(v.keySet());    }    long minTimestamp=Collections.min(scrubTimestampToTableNameToCell.keySet());    long maxTimestamp=Collections.max(scrubTimestampToTableNameToCell.keySet());    log.info("Finished scrubbing " + numCellsReadFromScrubTable + " cells at "+ scrubTimestampToTableNameToCell.size()+ " timestamps ("+ minTimestamp+ "..."+ maxTimestamp+ ") from tables "+ tables);  }  return numCellsReadFromScrubTable;}  }
class C{  private boolean isHandlerRequest(final HttpServletRequest request){  String apiHandlerValue=request.getParameter(PATH_API);  return PATH_HANDLER.equals(apiHandlerValue) && retrieveCacheKey(request) != null;}  }
class C{  public static Properties readJadFile(File jadFile) throws IOException {  LineNumberReader lnr=null;  try {    Properties jadProperties=new Properties();    lnr=new LineNumberReader(new InputStreamReader(new FileInputStream(jadFile)));    String line=null;    while ((line=lnr.readLine()) != null) {      int index=line.indexOf(": ");      if (index == -1) {        throw new IOException(res.getString("NoReadJadCorrupt.exception.message"));      }      String name=line.substring(0,index);      String value=line.substring(index + 2);      jadProperties.setProperty(name,value);    }    return jadProperties;  }  finally {    IOUtils.closeQuietly(lnr);  }}  }
class C{  protected void pushText(int start,int end){  if (start <= this.cursorLocation && this.cursorLocation <= end) {    this.scanner.resetTo(start,end);    boolean tokenizeWhiteSpace=this.scanner.tokenizeWhiteSpace;    this.scanner.tokenizeWhiteSpace=true;    try {      Object typeRef=null;      this.pushText=true;      int previousToken=TerminalTokens.TokenNameWHITESPACE;      while (!this.scanner.atEnd() && this.completionNode == null && !this.abort) {        int token=readTokenSafely();switch (token) {case TerminalTokens.TokenNameStringLiteral:          int strStart=0, strEnd=0;        if ((strStart=this.scanner.getCurrentTokenStartPosition() + 1) <= this.cursorLocation && this.cursorLocation <= (strEnd=this.scanner.getCurrentTokenEndPosition() - 1)) {          this.scanner.resetTo(strStart,strEnd);        }      consumeToken();    break;case TerminalTokens.TokenNameERROR:  consumeToken();if (this.scanner.currentCharacter == '#') {  Object member=null;  try {    this.scanner.tokenizeWhiteSpace=false;    member=parseMember(typeRef);  } catch (  InvalidInputException e) {    consumeToken();  }  this.scanner.tokenizeWhiteSpace=true;  if (this.completionNode != null) {    int flags=this.inlineTagStarted ? 0 : CompletionOnJavadoc.TEXT | CompletionOnJavadoc.ONLY_INLINE_TAG;    if (member instanceof JavadocMessageSend) {      JavadocMessageSend msgSend=(JavadocMessageSend)member;      this.completionNode=new CompletionOnJavadocMessageSend(msgSend,this.memberStart,flags);    } else     if (member instanceof JavadocAllocationExpression) {      JavadocAllocationExpression alloc=(JavadocAllocationExpression)member;      this.completionNode=new CompletionOnJavadocAllocationExpression(alloc,this.memberStart,flags);    } else {      this.completionNode.addCompletionFlags(flags);    }  }}break;case TerminalTokens.TokenNameIdentifier:try {this.scanner.tokenizeWhiteSpace=false;typeRef=parseQualifiedName(true);if (this.completionNode == null) {consumeToken();this.scanner.resetTo(this.tokenPreviousPosition,end);this.index=this.tokenPreviousPosition;}} catch (InvalidInputException e) {consumeToken();} finally {this.scanner.tokenizeWhiteSpace=true;}if (previousToken != TerminalTokens.TokenNameWHITESPACE) {typeRef=null;this.completionNode=null;}break;case TerminalTokens.TokenNameAT:consumeToken();try {this.scanner.tokenizeWhiteSpace=false;int startPosition=this.scanner.getCurrentTokenStartPosition();parseTag(startPosition);if (this.completionNode != null) {if (this.inlineTagStarted) {} else {}}} catch (InvalidInputException e) {consumeToken();}this.scanner.tokenizeWhiteSpace=true;break;default :consumeToken();typeRef=null;break;}previousToken=token;}}  finally {this.scanner.tokenizeWhiteSpace=tokenizeWhiteSpace;this.pushText=false;}this.index=end;this.scanner.currentPosition=end;consumeToken();if (this.completionNode != null) {if (this.inlineTagStarted) {this.completionNode.addCompletionFlags(CompletionOnJavadoc.FORMAL_REFERENCE);} else {this.completionNode.addCompletionFlags(CompletionOnJavadoc.TEXT);}}}}  }
class C{  void put(final ByteVector out){  int n=0;  int size=2;  AnnotationWriter aw=this;  AnnotationWriter last=null;  while (aw != null) {    ++n;    size+=aw.bv.length;    aw.visitEnd();    aw.prev=last;    last=aw;    aw=aw.next;  }  out.putInt(size);  out.putShort(n);  aw=last;  while (aw != null) {    out.putByteArray(aw.bv.data,0,aw.bv.length);    aw=aw.prev;  }}  }
class C{  public Long updateFileOrFolderName(String SID,Long fileExplorerItemId,String fileName) throws AxisFault {  try {    Long webservice_users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(webservice_users_id);    if (authLevelManagement.checkWebServiceLevel(user_level)) {      log.debug("deleteFileOrFolder " + fileExplorerItemId);      fileExplorerItemDao.updateFileOrFolderName(fileExplorerItemId,fileName);    }  } catch (  Exception err) {    log.error("[updateFileOrFolderName] ",err);  }  return null;}  }
class C{  public Conjunction(){}  }
class C{  private static <V extends LongRepresentable<V>>FirstPassCallback<V> firstPassCommon(final LmReader<V,? super FirstPassCallback<V>> arpaLmReader,final boolean reverse){  Logger.startTrack("Counting values");  final FirstPassCallback<V> valueAddingCallback=new FirstPassCallback<V>(reverse);  arpaLmReader.parse(valueAddingCallback);  Logger.endTrack();  return valueAddingCallback;}  }
class C{  public final java_cup.runtime.Symbol CUP$LexParse$do_action(int CUP$LexParse$act_num,java_cup.runtime.lr_parser CUP$LexParse$parser,java.util.Stack CUP$LexParse$stack,int CUP$LexParse$top) throws java.lang.Exception {  java_cup.runtime.Symbol CUP$LexParse$result;switch (CUP$LexParse$act_num) {case 104:{      Vector RESULT=null;      RESULT=makePreClass(sym.UNICODE_FINAL_QUOTE_PUNCTUATION);      CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);    }  return CUP$LexParse$result;case 103:{  Vector RESULT=null;  RESULT=makePreClass(sym.UNICODE_INITIAL_QUOTE_PUNCTUATION);  CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 102:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_OTHER_SYMBOL);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 101:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_MODIFIER_SYMBOL);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 100:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_CURRENCY_SYMBOL);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 99:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_MATH_SYMBOL);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 98:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_OTHER_PUNCTUATION);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 97:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_CONNECTOR_PUNCTUATION);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 96:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_END_PUNCTUATION);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 95:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_START_PUNCTUATION);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 94:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_DASH_PUNCTUATION);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 93:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_SURROGATE);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 92:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_PRIVATE_USE);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 91:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_FORMAT);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 90:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_CONTROL);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 89:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_PARAGRAPH_SEPARATOR);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 88:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_LINE_SEPARATOR);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 87:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_SPACE_SEPARATOR);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 86:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_OTHER_NUMBER);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 85:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_LETTER_NUMBER);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 84:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_DECIMAL_DIGIT_NUMBER);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 83:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_COMBINING_SPACING_MARK);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 82:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_ENCLOSING_MARK);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 81:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_NON_SPACING_MARK);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 80:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_OTHER_LETTER);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 79:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_MODIFIER_LETTER);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 78:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_TITLECASE_LETTER);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 77:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_LOWERCASE_LETTER);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 76:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_UPPERCASE_LETTER);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 75:{Vector RESULT=null;RESULT=makePreClass(sym.UNICODE_UNASSIGNED);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 74:{Vector RESULT=null;RESULT=makePreClass(sym.LOWERCLASS);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 73:{Vector RESULT=null;RESULT=makePreClass(sym.UPPERCLASS);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 72:{Vector RESULT=null;RESULT=makePreClass(sym.DIGITCLASS);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 71:{Vector RESULT=null;RESULT=makePreClass(sym.LETTERCLASS);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 70:{Vector RESULT=null;RESULT=makePreClass(sym.JLETTERDIGITCLASS);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 69:{Vector RESULT=null;RESULT=makePreClass(sym.JLETTERCLASS);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("preclass",14,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 68:{Interval RESULT=null;int cleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int cright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Character c=(Character)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;RESULT=new Interval(c.charValue(),c.charValue());CUP$LexParse$result=parser.getSymbolFactory().newSymbol("classcontentelem",10,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 67:{Interval RESULT=null;int c1left=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left;int c1right=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).right;Character c1=(Character)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).value;int c2left=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int c2right=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Character c2=(Character)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;RESULT=new Interval(c1.charValue(),c2.charValue());CUP$LexParse$result=parser.getSymbolFactory().newSymbol("classcontentelem",10,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 66:{Vector RESULT=null;int identleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int identright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;String ident=(String)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;syntaxError(ErrorMessages.CHARCLASS_MACRO,identleft,identright);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("classcontent",13,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 65:{Vector RESULT=null;int listleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;int listright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;Vector list=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;int identleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int identright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;String ident=(String)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;syntaxError(ErrorMessages.CHARCLASS_MACRO,identleft,identright);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("classcontent",13,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 64:{Vector RESULT=null;int sleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int sright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;String s=(String)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;RESULT=new Vector();for (int i=0; i < s.length(); i++) RESULT.addElement(new Interval(s.charAt(i),s.charAt(i)));CUP$LexParse$result=parser.getSymbolFactory().newSymbol("classcontent",13,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 63:{Vector RESULT=null;int listleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;int listright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;Vector list=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;int sleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int sright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;String s=(String)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;for (int i=0; i < s.length(); i++) list.addElement(new Interval(s.charAt(i),s.charAt(i)));RESULT=list;CUP$LexParse$result=parser.getSymbolFactory().newSymbol("classcontent",13,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 62:{Vector RESULT=null;int listleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int listright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Vector list=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;RESULT=list;CUP$LexParse$result=parser.getSymbolFactory().newSymbol("classcontent",13,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 61:{Vector RESULT=null;int listleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;int listright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;Vector list=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;int plistleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int plistright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Vector plist=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;for (Enumeration e=plist.elements(); e.hasMoreElements(); ) list.addElement(e.nextElement());RESULT=list;CUP$LexParse$result=parser.getSymbolFactory().newSymbol("classcontent",13,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 60:{Vector RESULT=null;int elemleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int elemright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Interval elem=(Interval)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;Vector list=new Vector();list.addElement(elem);RESULT=list;CUP$LexParse$result=parser.getSymbolFactory().newSymbol("classcontent",13,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 59:{Vector RESULT=null;int listleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;int listright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;Vector list=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;int elemleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int elemright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Interval elem=(Interval)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;list.addElement(elem);RESULT=list;CUP$LexParse$result=parser.getSymbolFactory().newSymbol("classcontent",13,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 58:{RegExp RESULT=null;int listleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;int listright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;Vector list=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;int closeleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int closeright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Object close=(Object)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;try {list.addElement(new Interval('-','-'));charClasses.makeClassNot(list,Options.jlex && scanner.caseless);} catch (CharClassException e) {syntaxError(ErrorMessages.CHARSET_2_SMALL,closeleft,closeright);}RESULT=new RegExp1(sym.CCLASSNOT,list);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("charclass",8,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 57:{RegExp RESULT=null;int listleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;int listright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;Vector list=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;int closeleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int closeright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Object close=(Object)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;try {list.addElement(new Interval('-','-'));charClasses.makeClass(list,Options.jlex && scanner.caseless);} catch (CharClassException e) {syntaxError(ErrorMessages.CHARSET_2_SMALL,closeleft,closeright);}RESULT=new RegExp1(sym.CCLASS,list);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("charclass",8,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 56:{RegExp RESULT=null;int listleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;int listright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;Vector list=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;int closeleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int closeright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Object close=(Object)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;try {charClasses.makeClassNot(list,Options.jlex && scanner.caseless);} catch (CharClassException e) {syntaxError(ErrorMessages.CHARSET_2_SMALL,closeleft,closeright);}RESULT=new RegExp1(sym.CCLASSNOT,list);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("charclass",8,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 55:{RegExp RESULT=null;int closeleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int closeright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Object close=(Object)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;Vector list=new Vector();list.addElement(new Interval((char)0,CharClasses.maxChar));try {charClasses.makeClass(list,false);} catch (CharClassException e) {syntaxError(ErrorMessages.CHARSET_2_SMALL,closeleft,closeright);}RESULT=new RegExp1(sym.CCLASS,list);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("charclass",8,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 54:{RegExp RESULT=null;int listleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;int listright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;Vector list=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;int closeleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int closeright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Object close=(Object)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;try {charClasses.makeClass(list,Options.jlex && scanner.caseless);} catch (CharClassException e) {syntaxError(ErrorMessages.CHARSET_2_SMALL,closeleft,closeright);}RESULT=new RegExp1(sym.CCLASS,list);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("charclass",8,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 53:{RegExp RESULT=null;RESULT=new RegExp1(sym.CCLASS,null);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("charclass",8,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 52:{RegExp RESULT=null;int cleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int cright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Character c=(Character)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;try {if (scanner.caseless) {charClasses.makeClass(c.charValue(),true);RESULT=new RegExp1(sym.CHAR_I,c);} else {charClasses.makeClass(c.charValue(),false);RESULT=new RegExp1(sym.CHAR,c);}} catch (CharClassException e) {syntaxError(ErrorMessages.CS2SMALL_CHAR,cleft,cright);}CUP$LexParse$result=parser.getSymbolFactory().newSymbol("regexp",7,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 51:{RegExp RESULT=null;Vector any=new Vector();any.addElement(new Interval('\n','\n'));charClasses.makeClass('\n',false);RESULT=new RegExp1(sym.CCLASSNOT,any);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("regexp",7,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 50:{RegExp RESULT=null;int strleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int strright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;String str=(String)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;try {if (scanner.caseless) {charClasses.makeClass(str,true);RESULT=new RegExp1(sym.STRING_I,str);} else {charClasses.makeClass(str,false);RESULT=new RegExp1(sym.STRING,str);}} catch (CharClassException e) {syntaxError(ErrorMessages.CS2SMALL_STRING,strleft,strright);}CUP$LexParse$result=parser.getSymbolFactory().newSymbol("regexp",7,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 49:{RegExp RESULT=null;int listleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int listright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Vector list=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;try {charClasses.makeClass(list,false);} catch (CharClassException e) {syntaxError(ErrorMessages.CHARSET_2_SMALL,listleft);}RESULT=new RegExp1(sym.CCLASS,list);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("regexp",7,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 48:{RegExp RESULT=null;int cleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int cright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;RegExp c=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;RESULT=c;CUP$LexParse$result=parser.getSymbolFactory().newSymbol("regexp",7,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 47:{RegExp RESULT=null;int identleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int identright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;String ident=(String)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;if (!scanner.macroDefinition) {if (!macros.markUsed(ident)) throw new ScannerException(scanner.file,ErrorMessages.MACRO_UNDECL,identleft,identright);}RESULT=new RegExp1(sym.MACROUSE,ident);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("regexp",7,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 46:{RegExp RESULT=null;int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;RESULT=r;CUP$LexParse$result=parser.getSymbolFactory().newSymbol("regexp",7,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 45:{RegExp RESULT=null;int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).left;int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).right;RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).value;int n1left=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left;int n1right=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).right;Integer n1=(Integer)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).value;int n2left=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;int n2right=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;Integer n2=(Integer)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;RESULT=makeRepeat(r,n1.intValue(),n2.intValue(),n1left,n2right);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("regexp",7,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 44:{RegExp RESULT=null;int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left;int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).right;RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).value;int nleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;int nright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;Integer n=(Integer)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;int bleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int bright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Object b=(Object)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;RESULT=makeRepeat(r,n.intValue(),n.intValue(),bleft,bright);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("regexp",7,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 43:{RegExp RESULT=null;int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;RESULT=new RegExp1(sym.QUESTION,r);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("regexp",7,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 42:{RegExp RESULT=null;int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;RESULT=new RegExp1(sym.PLUS,r);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("regexp",7,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 41:{RegExp RESULT=null;int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;RESULT=new RegExp1(sym.STAR,r);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("regexp",7,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 40:{RegExp RESULT=null;int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;RESULT=new RegExp1(sym.TILDE,r);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("nregexp",6,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 39:{RegExp RESULT=null;int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;RESULT=new RegExp1(sym.BANG,r);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("nregexp",6,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 38:{RegExp RESULT=null;int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;RESULT=r;CUP$LexParse$result=parser.getSymbolFactory().newSymbol("nregexp",6,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 37:{RegExp RESULT=null;int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;RESULT=r;CUP$LexParse$result=parser.getSymbolFactory().newSymbol("concs",5,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 36:{RegExp RESULT=null;int r1left=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;int r1right=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;RegExp r1=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;int r2left=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int r2right=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;RegExp r2=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;RESULT=new RegExp2(sym.CONCAT,r1,r2);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("concs",5,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 35:{RegExp RESULT=null;int bleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int bright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Object b=(Object)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;syntaxError(ErrorMessages.REGEXP_EXPECTED,bleft,bright);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("series",4,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 34:{RegExp RESULT=null;int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;RESULT=r;CUP$LexParse$result=parser.getSymbolFactory().newSymbol("series",4,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 33:{RegExp RESULT=null;int r1left=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left;int r1right=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).right;RegExp r1=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).value;int r2left=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int r2right=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;RegExp r2=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;RESULT=new RegExp2(sym.BAR,r1,r2);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("series",4,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 32:{Boolean RESULT=null;RESULT=new Boolean(false);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("hatOPT",16,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 31:{Boolean RESULT=null;charClasses.makeClass('\n',false);RESULT=new Boolean(true);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("hatOPT",16,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 30:{Vector RESULT=null;int cleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int cright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Object c=(Object)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;syntaxError(ErrorMessages.REGEXP_EXPECTED,cleft,cright + 1);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("states",11,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 29:{Vector RESULT=null;int idleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int idright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;String id=(String)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;Vector list=new Vector();stateNumber=scanner.states.getNumber(id);if (stateNumber != null) list.addElement(stateNumber); else {throw new ScannerException(scanner.file,ErrorMessages.LEXSTATE_UNDECL,idleft,idright);}RESULT=list;CUP$LexParse$result=parser.getSymbolFactory().newSymbol("states",11,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 28:{Vector RESULT=null;int idleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left;int idright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).right;String id=(String)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).value;int listleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int listright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Vector list=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;stateNumber=scanner.states.getNumber(id);if (stateNumber != null) list.addElement(stateNumber); else {throw new ScannerException(scanner.file,ErrorMessages.LEXSTATE_UNDECL,idleft,idright);}RESULT=list;CUP$LexParse$result=parser.getSymbolFactory().newSymbol("states",11,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 27:{Vector RESULT=null;RESULT=new Vector();CUP$LexParse$result=parser.getSymbolFactory().newSymbol("statesOPT",12,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 26:{Vector RESULT=null;int listleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;int listright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;Vector list=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;RESULT=list;CUP$LexParse$result=parser.getSymbolFactory().newSymbol("statesOPT",12,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 25:{Action RESULT=null;CUP$LexParse$result=parser.getSymbolFactory().newSymbol("actions",18,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 24:{Action RESULT=null;int aleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int aright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Action a=(Action)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;RESULT=a;CUP$LexParse$result=parser.getSymbolFactory().newSymbol("actions",18,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 23:{Action RESULT=null;int aleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int aright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Action a=(Action)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;RESULT=a;CUP$LexParse$result=parser.getSymbolFactory().newSymbol("act",17,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 22:{RegExp RESULT=null;int sleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;int sright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;RegExp s=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;RESULT=new RegExp2(sym.CONCAT,s,makeNL());CUP$LexParse$result=parser.getSymbolFactory().newSymbol("lookahead",9,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 21:{RegExp RESULT=null;int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;RESULT=r;CUP$LexParse$result=parser.getSymbolFactory().newSymbol("lookahead",9,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 20:{RegExp RESULT=null;RESULT=makeNL();CUP$LexParse$result=parser.getSymbolFactory().newSymbol("lookahead",9,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 19:{Integer RESULT=null;CUP$LexParse$result=parser.getSymbolFactory().newSymbol("rule",2,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 18:{Integer RESULT=null;int sleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left;int sright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).right;Vector s=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).value;int aleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int aright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Action a=(Action)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;RESULT=new Integer(regExps.insert(s,a));CUP$LexParse$result=parser.getSymbolFactory().newSymbol("rule",2,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 17:{Integer RESULT=null;int sleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)).left;int sright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)).right;Vector s=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)).value;int bolleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).left;int bolright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).right;Boolean bol=(Boolean)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).value;int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left;int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).right;RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).value;int lleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;int lright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;RegExp l=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;int aleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int aright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Object a=(Object)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;syntaxError(ErrorMessages.LOOKAHEAD_NEEDS_ACTION,aleft,aright + 1);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("rule",2,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 16:{Integer RESULT=null;int sleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)).left;int sright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)).right;Vector s=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)).value;int bolleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).left;int bolright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).right;Boolean bol=(Boolean)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).value;int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left;int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).right;RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).value;int lleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;int lright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;RegExp l=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;int aleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int aright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Action a=(Action)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;RESULT=new Integer(regExps.insert(rleft,s,r,a,bol,l));CUP$LexParse$result=parser.getSymbolFactory().newSymbol("rule",2,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 15:{Integer RESULT=null;int sleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).left;int sright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).right;Vector s=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).value;int bolleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left;int bolright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).right;Boolean bol=(Boolean)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).value;int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;int aleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int aright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Action a=(Action)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;RESULT=new Integer(regExps.insert(rleft,s,r,a,bol,null));CUP$LexParse$result=parser.getSymbolFactory().newSymbol("rule",2,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 14:{Vector RESULT=null;int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Integer r=(Integer)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;RESULT=new Vector();RESULT.addElement(r);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("rules",15,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 13:{Vector RESULT=null;int statesleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)).left;int statesright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)).right;Vector states=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)).value;int rlistleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;int rlistright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;Vector rlist=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;Enumeration rs=rlist.elements();while (rs.hasMoreElements()) {Integer elem=(Integer)rs.nextElement();if (elem != null) {regExps.addStates(elem.intValue(),states);}}RESULT=rlist;CUP$LexParse$result=parser.getSymbolFactory().newSymbol("rules",15,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 5)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 12:{Vector RESULT=null;int rlist1left=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 6)).left;int rlist1right=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 6)).right;Vector rlist1=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 6)).value;int statesleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)).left;int statesright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)).right;Vector states=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)).value;int rlist2left=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;int rlist2right=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;Vector rlist2=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;Enumeration rs=rlist2.elements();while (rs.hasMoreElements()) {Integer elem=(Integer)rs.nextElement();if (elem != null) {regExps.addStates(elem.intValue(),states);}rlist1.addElement(elem);}RESULT=rlist1;CUP$LexParse$result=parser.getSymbolFactory().newSymbol("rules",15,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 6)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 11:{Vector RESULT=null;int rlistleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;int rlistright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;Vector rlist=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Integer r=(Integer)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;rlist.addElement(r);RESULT=rlist;CUP$LexParse$result=parser.getSymbolFactory().newSymbol("rules",15,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 10:{Object RESULT=null;int eleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).left;int eright=((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).right;Object e=(Object)((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()).value;syntaxError(ErrorMessages.REGEXP_EXPECTED,eleft,eright);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("macro",1,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 9:{Object RESULT=null;int nameleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).left;int nameright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).right;String name=(String)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).value;int definitionleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;int definitionright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;RegExp definition=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;macros.insert(name,definition);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("macro",1,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 8:{Object RESULT=null;charClasses.setMaxCharCode(0xFFFF);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("macro",1,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 7:{Object RESULT=null;charClasses.setMaxCharCode(255);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("macro",1,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 6:{Object RESULT=null;charClasses.setMaxCharCode(127);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("macro",1,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 5:{Object RESULT=null;CUP$LexParse$result=parser.getSymbolFactory().newSymbol("macros",0,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 4:{Object RESULT=null;CUP$LexParse$result=parser.getSymbolFactory().newSymbol("macros",0,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 3:{Object RESULT=null;CUP$LexParse$result=parser.getSymbolFactory().newSymbol("macros",0,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 2:{NFA RESULT=null;fatalError(ErrorMessages.NO_LEX_SPEC);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("specification",3,((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 1:{NFA RESULT=null;scanner.t.stop();Out.checkErrors();Out.time(ErrorMessages.PARSING_TOOK,t);macros.expand();Enumeration unused=macros.unused();while (unused.hasMoreElements()) {Out.warning("Macro \"" + unused.nextElement() + "\" has been declared but never used.");}SemCheck.check(regExps,macros,scanner.file);regExps.checkActions();regExps.checkLookAheads();Out.checkErrors();if (Options.dump) charClasses.dump();Out.print("Constructing NFA : ");t.start();int num=regExps.getNum();RESULT=new NFA(charClasses.getNumClasses(),scanner,regExps,macros,charClasses);eofActions.setNumLexStates(scanner.states.number());for (int i=0; i < num; i++) {if (regExps.isEOF(i)) eofActions.add(regExps.getStates(i),regExps.getAction(i)); else RESULT.addRegExp(i);}if (scanner.standalone) RESULT.addStandaloneRule();t.stop();Out.time("");Out.time(ErrorMessages.NFA_TOOK,t);CUP$LexParse$result=parser.getSymbolFactory().newSymbol("specification",3,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}return CUP$LexParse$result;case 0:{Object RESULT=null;int start_valleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;int start_valright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;NFA start_val=(NFA)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;RESULT=start_val;CUP$LexParse$result=parser.getSymbolFactory().newSymbol("$START",0,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)),((java_cup.runtime.Symbol)CUP$LexParse$stack.peek()),RESULT);}CUP$LexParse$parser.done_parsing();return CUP$LexParse$result;default :throw new Exception("Invalid action number found in internal parse table");}}  }
class C{  public StorageBase(Context context,int encryptionMode) throws IllegalArgumentException {  if (encryptionMode != ENCRYPTION_NONE) {    throw new IllegalArgumentException("encryptionMode " + encryptionMode + " not supported.");  }  store=context.getSharedPreferences(STORE_FILE_NAME,Context.MODE_PRIVATE);  editor=store.edit();}  }
class C{  private void checkValid(Point g){  checkInvalidCoordinates(g.getCoordinates());}  }
class C{  public boolean isAttribute(String name){  return attributes.containsKey(name);}  }
class C{  default String renderClasses(Generator gen,M model){  return gen.onEach(model.getClasses()).collect(joining(dnl()));}  }
class C{  public static void writeApplicationXml(ApplicationXml appXml,File file) throws IOException {  writeApplicationXml(appXml,file,null,false);}  }
class C{  public void writeRawBytes(final ByteString value,int offset,int length) throws IOException {  if (limit - position >= length) {    value.copyTo(buffer,offset,position,length);    position+=length;  } else {    final int bytesWritten=limit - position;    value.copyTo(buffer,offset,position,bytesWritten);    offset+=bytesWritten;    length-=bytesWritten;    position=limit;    refreshBuffer();    if (length <= limit) {      value.copyTo(buffer,offset,0,length);      position=length;    } else {      InputStream inputStreamFrom=value.newInput();      if (offset != inputStreamFrom.skip(offset)) {        throw new IllegalStateException("Skip failed? Should never happen.");      }      while (length > 0) {        int bytesToRead=Math.min(length,limit);        int bytesRead=inputStreamFrom.read(buffer,0,bytesToRead);        if (bytesRead != bytesToRead) {          throw new IllegalStateException("Read failed? Should never happen");        }        output.write(buffer,0,bytesRead);        length-=bytesRead;      }    }  }}  }
class C{  public void stopJumping(){  for (  JumpingBeansSpan bean : jumpingBeans) {    if (bean != null) {      bean.teardown();    }  }  TextView tv=textView.get();  if (tv != null) {    CharSequence text=tv.getText();    if (text instanceof Spanned) {      CharSequence cleanText=removeJumpingBeansSpans((Spanned)text);      tv.setText(cleanText);    }  }}  }
class C{  public boolean matchesWild(final Sentence sentence){  if (state == ConversationStates.ANY) {    for (    Expression triggerExpr : triggers) {      if (sentence.getTriggerExpression().matches(triggerExpr)) {        return true;      }    }  }  return false;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  double centreValue;  float progress=0;  int a, j, n;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  ArrayList<Double> data=new ArrayList<Double>();  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("blue_white_red.pal");    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=inputFile.getValue(row,col);        if (centreValue != noData) {          data.clear();          n=0;          z=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              data.add(z);              n++;            }          }          Collections.sort(data);          j=-1;          for (a=0; a < numPixelsInFilter; a++) {            if (data.get(a) == centreValue) {              j=a;              break;            }          }          if (j >= 0) {            outputFile.setValue(row,col,(double)j / n * 100);          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public boolean hasNext(){  return dataRowReader.hasNext();}  }
class C{  @Override public void process(Map<K,V> tuple){  for (  Map.Entry<K,V> e : tuple.entrySet()) {    HashMap<V,Object> vals=mapkeyval.get(e.getKey());    if ((vals == null) || !vals.containsKey(e.getValue())) {      HashMap<K,V> otuple=new HashMap<K,V>(1);      otuple.put(cloneKey(e.getKey()),cloneValue(e.getValue()));      distinct.emit(otuple);      if (vals == null) {        vals=new HashMap<V,Object>();        mapkeyval.put(cloneKey(e.getKey()),vals);      }      vals.put(cloneValue(e.getValue()),null);    }  }}  }
class C{  @Override public double variance(double totalWeight,double totalPositiveWeight,Hypothesis hypo){  double fp=hypo.getCoveredWeight() - hypo.getPositiveWeight();  double tn=totalWeight - totalPositiveWeight - fp;  double correctPredictions=hypo.getPositiveWeight() + tn;  double mean=correctPredictions / totalWeight;  double innerTerm=correctPredictions * Math.pow(1.0d - mean,2) + (totalWeight - correctPredictions) * Math.pow(0.0d - mean,2);  return Math.sqrt(innerTerm) / totalWeight;}  }
class C{  public boolean hasIcons(){  return mContent.getShortcutsAndWidgets().getChildCount() > 1;}  }
class C{  public void testFlipBitLeftmostNegative(){  byte aBytes[]={1,-128,56,100,-15,35,26};  int aSign=-1;  int number=48;  byte rBytes[]={-1,127,-57,-101,14,-36,-26,49};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public boolean drawCPointFeatures(){  return drawCPointFeatures;}  }
class C{  public void incSoldForItem(String name,int quantity){  itemCounter.incSoldForItem(name,quantity);}  }
class C{  private void parseArguments(final String[] args){  if (args.length == 0) {    System.out.println("Too few arguments.");    printUsage();    System.exit(1);  }  Iterator<String> argIter=new ArgumentParser(args).iterator();  while (argIter.hasNext()) {    String arg=argIter.next();    if (arg.equals("-h") || arg.equals("--help")) {      printUsage();      System.exit(0);    } else {      if (arg.contains(".xml"))       this.configfile=arg; else       if (arg.contains("events"))       this.eventsfile=arg; else {        System.out.println("Unrecognized file \"" + arg + "\"");        printUsage();        System.exit(1);      }    }  }}  }
class C{  public boolean isSavePassword(){  return m_database.getConfiguration().isSavePassword();}  }
class C{  public void hide(){  mImpl.hide();}  }
class C{  public JdbcValueConverters(){  this(true,ZoneOffset.UTC);}  }
class C{  public static void assignBucketsToPartitions(Region<?,?> region){  PartitionedRegion pr=isPartitionedCheck(region);  RecoveryLock lock=null;  try {    lock=pr.getRecoveryLock();    lock.lock();    for (int i=0; i < getNumberOfBuckets(pr); i++) {      pr.createBucket(i,0,null);    }  }  finally {    if (lock != null) {      lock.unlock();    }  }}  }
class C{  public void configure(){  TrafficController tc;  if (getOptionState(option2Name).equals(ConfigurationManager.MERGCBUS)) {    tc=new MergTrafficController();    try {      tc.setCanId(Integer.parseInt(getOptionState("CANID")));    } catch (    Exception e) {      log.error("Cannot parse CAN ID - check your preference settings " + e);      log.error("Now using default CAN ID");    }  } else {    tc=new GcTrafficController();  }  this.getSystemConnectionMemo().setTrafficController(tc);  log.debug("Connecting port");  tc.connectPort(this);  this.getSystemConnectionMemo().setProtocol(getOptionState(option2Name));  this.getSystemConnectionMemo().configureManagers();  if (socketConn != null) {    log.info("Connection complete with " + socketConn.getInetAddress());  }}  }
class C{  public String elementalpredicatevectorfile(){  return elementalpredicatevectorfile;}  }
class C{  public int graphType(){  if (m_Classifier instanceof Drawable)   return ((Drawable)m_Classifier).graphType(); else   return Drawable.NOT_DRAWABLE;}  }
class C{  private static StringBuffer doTerritoryDefinitions(final List<String> allTerritoryNames,final String waterString){  Collections.sort(allTerritoryNames,new AlphanumComparator());  final StringBuffer output=new StringBuffer();  output.append("<!-- Territory Definitions -->\r\n");  final Pattern waterPattern=Pattern.compile(waterString);  for (  final String t : allTerritoryNames) {    final Matcher matcher=waterPattern.matcher(t);    if (matcher.find()) {      output.append("<territory name=\"").append(t).append("\" water=\"true\"/>\r\n");    } else {      output.append("<territory name=\"").append(t).append("\"/>\r\n");    }  }  output.append("\r\n");  return output;}  }
class C{  public OracleDocument createDocumentFromStream(InputStream content){  return (new OracleDocumentImpl(null,null,null,content,null));}  }
class C{  private void upgradeDelta(TableEntry10 table,TableUpgrade upgradeTable,Page10 page,Delta10 delta) throws IOException {  try (ReadStream is=openRead(page.segment().address(),page.segment().length())){    is.position(delta.address());    long tail=delta.address() + delta.length();    while (is.position() < tail) {      upgradeDelta(is,table,upgradeTable,page);    }  } }  }
class C{  public StandeeAndSittersScoringFunctionFactory(ScoringFunctionFactory delegate){  this.delegate=delegate;}  }
class C{  public void dispose(){  ctx.removeViewport(e);  super.dispose();}  }
class C{  public void testNullCallBack() throws IOException {  String reqdata="Request Data";  Request request=Request.newBuilder().setStrData(reqdata).build();  FakeSocket socket=new FakeSocket(false).withNoResponse(true);  SocketRpcChannel rpcChannel=new SocketRpcChannel("host",-1,new FakeSocketFactory().returnsSocket(socket));  FakeCallback callback=callAsync(rpcChannel,request,null);  verifyRequestToSocket(request,socket);  assertTrue(callback.invoked);  assertNull(callback.response);  assertNull(callSync(rpcChannel,request,null));  verifyRequestToSocket(request,socket);}  }
class C{  static boolean shiftRight(int result[],int resultLen,int source[],int intCount,int count){  int i;  boolean allZero=true;  for (i=0; i < intCount; i++) {    allZero&=source[i] == 0;  }  if (count == 0) {    System.arraycopy(source,intCount,result,0,resultLen);    i=resultLen;  } else {    int leftShiftCount=32 - count;    allZero&=(source[i] << leftShiftCount) == 0;    for (i=0; i < resultLen - 1; i++) {      result[i]=(source[i + intCount] >>> count) | (source[i + intCount + 1] << leftShiftCount);    }    result[i]=(source[i + intCount] >>> count);    i++;  }  return allZero;}  }
class C{  public static void run(){  if (PTABridge.v() == null) {    logger.error("The GeoPTA pass has not been run. Value analysis requires it.");    droidsafe.main.Main.exit(1);  }  v();  try {    vaErrorsLog=new FileWriter(Project.v().getOutputDir() + File.separator + "va-errors.log");  } catch (  Exception e) {    logger.warn("Unable to open va-errors.log:",e);  }  try {    vaResultsLog=new FileWriter(Project.v().getOutputDir() + File.separator + "va-results.log");  } catch (  Exception e) {    logger.warn("Unable to open va-results.log: ",e);  }  am.createObjectModels();  if (USE_PTA_ONLY)   am.collectPTAResults(); else   am.visitMethodContexts();  if (Config.v().debug)   am.logResults();  try {    vaErrorsLog.close();  } catch (  IOException e) {    logger.warn("Unable to close the va-errors.log file.",e);  }  try {    vaResultsLog.close();  } catch (  IOException e) {    logger.warn("Unable to close the va-results.log file.",e);  }}  }
class C{  boolean inSameSubroutine(final Label block){  if ((status & VISITED) == 0 || (block.status & VISITED) == 0) {    return false;  }  for (int i=0; i < srcAndRefPositions.length; ++i) {    if ((srcAndRefPositions[i] & block.srcAndRefPositions[i]) != 0) {      return true;    }  }  return false;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_Org_ID"))     p_AD_Org_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("M_Warehouse_ID"))     p_M_Warehouse_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("M_Product_Category_ID"))     p_M_Product_Category_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("M_Product_ID"))     p_M_Product_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_BP_Group_ID"))     p_C_BP_Group_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_BPartner_ID"))     p_C_BPartner_ID=((BigDecimal)para[i].getParameter()).intValue(); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  public boolean match(AnnotationTypeDeclaration node,Object other){  if (!(other instanceof AnnotationTypeDeclaration)) {    return false;  }  AnnotationTypeDeclaration o=(AnnotationTypeDeclaration)other;  return (safeSubtreeMatch(node.getJavadoc(),o.getJavadoc()) && safeSubtreeListMatch(node.modifiers(),o.modifiers()) && safeSubtreeMatch(node.getName(),o.getName())&& safeSubtreeListMatch(node.bodyDeclarations(),o.bodyDeclarations()));}  }
class C{  private static void insertInto(int pos,int[] starts,int numStarts){  while (starts[--numStarts] > pos) {    starts[numStarts]+=1;  }}  }
class C{  public boolean saveFileWriter(String fileName){  boolean result=false;  try {    Writer w=new FileWriter(fileName);    this.write(w);    w.close();    result=true;  } catch (  Throwable t) {    JOptionPane.showMessageDialog(this,"Could not save file " + fileName,"Warning",JOptionPane.WARNING_MESSAGE);    result=false;  }  return result;}  }
class C{  public void onQueryCompleted(long duration,boolean fail){  minTime.setIfLess(duration);  maxTime.setIfGreater(duration);  if (fail)   fails.increment(); else {    completed.increment();    sumTime.add(duration);  }}  }
class C{  public ZipStreamImpl openReadImpl(PathImpl path) throws IOException {  String pathName=path.getPath();  return openReadImpl(pathName);}  }
class C{  public static int reverse(int i){  i=((i >>> 1) & 0x55555555) | ((i & 0x55555555) << 1);  i=((i >>> 2) & 0x33333333) | ((i & 0x33333333) << 2);  i=((i >>> 4) & 0x0F0F0F0F) | ((i & 0x0F0F0F0F) << 4);  i=((i >>> 8) & 0x00FF00FF) | ((i & 0x00FF00FF) << 8);  return ((i >>> 16)) | ((i) << 16);}  }
class C{  public NavigationITCase(String name){  super(name);}  }
class C{  public static long New(char[] c){  return Extend(IrredPoly,c,0,c.length);}  }
class C{  public static StructType convertFrameSchemaToDFSchema(ValueType[] fschema,boolean containsID){  List<StructField> fields=new ArrayList<StructField>();  if (containsID)   fields.add(DataTypes.createStructField(RDDConverterUtils.DF_ID_COLUMN,DataTypes.DoubleType,true));  int col=1;  for (  ValueType schema : fschema) {    DataType dt=null;switch (schema) {case STRING:      dt=DataTypes.StringType;    break;case DOUBLE:  dt=DataTypes.DoubleType;break;case INT:dt=DataTypes.LongType;break;case BOOLEAN:dt=DataTypes.BooleanType;break;default :dt=DataTypes.StringType;LOG.warn("Using default type String for " + schema.toString());}fields.add(DataTypes.createStructField("C" + col++,dt,true));}return DataTypes.createStructType(fields);}  }
class C{  @SuppressWarnings("unused") public void addCountryVat(final AjaxBehaviorEvent event){  final List<String> beanCountries=this.getCountries();  final List<VOCountryVatRate> countryVatRates=this.getCountryVats();  for (  VOCountryVatRate voCountryVatRate : countryVatRates) {    if (voCountryVatRate != null) {      beanCountries.remove(voCountryVatRate.getCountry());    }  }  if (beanCountries.size() > 0) {    final VOCountryVatRate vo=new VOCountryVatRate();    countryVatRates.add(vo);    addToVatStrings(vo);  }}  }
class C{  public void addDocument(String name,int parentDivId,String fileExt,InputStream inputStreamDocumentFile,Reader readerAnnFile) throws Exception {  int sortOrder=m_documents.getNextSortOrder();  addDocument(name,parentDivId,fileExt,sortOrder,inputStreamDocumentFile,readerAnnFile);}  }
class C{  public static IndexColumn[] wrap(Column[] columns){  IndexColumn[] list=new IndexColumn[columns.length];  for (int i=0; i < list.length; i++) {    list[i]=new IndexColumn();    list[i].column=columns[i];  }  return list;}  }
class C{  public static <T extends DataObject>T findInCollection(Collection<T> col,URI id){  if (col != null && id != null) {    for (    T t : col) {      if (t.getId().equals(id)) {        return t;      }    }  }  return null;}  }
class C{  @SuppressWarnings("rawtypes") protected void firePvChanged(PvChangeEvent e){  log.debug("PvChange:" + e.toString());  Integer evtMask;  Map.Entry curr;  Set entries=PvChangeListeners.entrySet();  Iterator it=entries.iterator();  while (it.hasNext()) {    curr=(Map.Entry)it.next();    if (curr.getKey() != null && curr.getKey() != this) {      evtMask=(Integer)curr.getValue();      if ((evtMask.intValue() & e.getType()) != 0) {        log.debug("Notify:" + curr);        ((PvChangeListener)curr.getKey()).pvChanged(e);      }    }  }}  }
class C{  public TMap readMapBegin() throws TException {  int size=readVarint32();  checkContainerReadLength(size);  byte keyAndValueType=size == 0 ? 0 : readByte();  return new TMap(getTType((byte)(keyAndValueType >> 4)),getTType((byte)(keyAndValueType & 0xf)),size);}  }
class C{  private String loadConvert(String theString){  char aChar;  int len=theString.length();  StringBuilder outBuffer=new StringBuilder(len);  for (int x=0; x < len; ) {    aChar=theString.charAt(x++);    if (aChar == '\\') {      aChar=theString.charAt(x++);      if (aChar == 'u') {        int value=0;        for (int i=0; i < 4; i++) {          aChar=theString.charAt(x++);switch (aChar) {case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':{              value=(value << 4) + aChar - '0';              break;            }case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':{            value=(value << 4) + 10 + aChar - 'a';            break;          }case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':{          value=(value << 4) + 10 + aChar - 'A';          break;        }default :{        throw new IllegalArgumentException("Malformed \\uxxxx encoding.");      }  }}outBuffer.append((char)value);} else {if (aChar == 't') {  aChar='\t';} else if (aChar == 'r') {  aChar='\r';} else if (aChar == 'n') {  aChar='\n';} else if (aChar == 'f') {  aChar='\f';}outBuffer.append(aChar);}} else {outBuffer.append(aChar);}}return outBuffer.toString();}  }
class C{  public static int clearBit(int value,int bit){  return value & ~(1 << bit);}  }
class C{  public synchronized void curl(PointF curlPos,PointF curlDir,double radius){  if (DRAW_CURL_POSITION) {    mBufCurlPositionLines.position(0);    mBufCurlPositionLines.put(curlPos.x);    mBufCurlPositionLines.put(curlPos.y - 1.0f);    mBufCurlPositionLines.put(curlPos.x);    mBufCurlPositionLines.put(curlPos.y + 1.0f);    mBufCurlPositionLines.put(curlPos.x - 1.0f);    mBufCurlPositionLines.put(curlPos.y);    mBufCurlPositionLines.put(curlPos.x + 1.0f);    mBufCurlPositionLines.put(curlPos.y);    mBufCurlPositionLines.put(curlPos.x);    mBufCurlPositionLines.put(curlPos.y);    mBufCurlPositionLines.put(curlPos.x + curlDir.x * 2);    mBufCurlPositionLines.put(curlPos.y + curlDir.y * 2);    mBufCurlPositionLines.position(0);  }  mBufVertices.position(0);  mBufColors.position(0);  if (DRAW_TEXTURE) {    mBufTexCoords.position(0);  }  double curlAngle=Math.acos(curlDir.x);  curlAngle=curlDir.y > 0 ? -curlAngle : curlAngle;  mArrTempVertices.addAll(mArrRotatedVertices);  mArrRotatedVertices.clear();  for (int i=0; i < 4; ++i) {    Vertex v=mArrTempVertices.remove(0);    v.set(mRectangle[i]);    v.translate(-curlPos.x,-curlPos.y);    v.rotateZ(-curlAngle);    int j=0;    for (; j < mArrRotatedVertices.size(); ++j) {      Vertex v2=mArrRotatedVertices.get(j);      if (v.mPosX > v2.mPosX) {        break;      }      if (v.mPosX == v2.mPosX && v.mPosY > v2.mPosY) {        break;      }    }    mArrRotatedVertices.add(j,v);  }  int lines[][]={{0,1},{0,2},{1,3},{2,3}};{    Vertex v0=mArrRotatedVertices.get(0);    Vertex v2=mArrRotatedVertices.get(2);    Vertex v3=mArrRotatedVertices.get(3);    double dist2=Math.sqrt((v0.mPosX - v2.mPosX) * (v0.mPosX - v2.mPosX) + (v0.mPosY - v2.mPosY) * (v0.mPosY - v2.mPosY));    double dist3=Math.sqrt((v0.mPosX - v3.mPosX) * (v0.mPosX - v3.mPosX) + (v0.mPosY - v3.mPosY) * (v0.mPosY - v3.mPosY));    if (dist2 > dist3) {      lines[1][1]=3;      lines[2][1]=2;    }  }  mVerticesCountFront=mVerticesCountBack=0;  if (DRAW_SHADOW) {    mArrTempShadowVertices.addAll(mArrDropShadowVertices);    mArrTempShadowVertices.addAll(mArrSelfShadowVertices);    mArrDropShadowVertices.clear();    mArrSelfShadowVertices.clear();  }  double curlLength=Math.PI * radius;  mArrScanLines.clear();  if (mMaxCurlSplits > 0) {    mArrScanLines.add((double)0);  }  for (int i=1; i < mMaxCurlSplits; ++i) {    mArrScanLines.add((-curlLength * i) / (mMaxCurlSplits - 1));  }  mArrScanLines.add(mArrRotatedVertices.get(3).mPosX - 1);  double scanXmax=mArrRotatedVertices.get(0).mPosX + 1;  for (int i=0; i < mArrScanLines.size(); ++i) {    double scanXmin=mArrScanLines.get(i);    for (int j=0; j < mArrRotatedVertices.size(); ++j) {      Vertex v=mArrRotatedVertices.get(j);      if (v.mPosX >= scanXmin && v.mPosX <= scanXmax) {        Vertex n=mArrTempVertices.remove(0);        n.set(v);        Array<Vertex> intersections=getIntersections(mArrRotatedVertices,lines,n.mPosX);        if (intersections.size() == 1 && intersections.get(0).mPosY > v.mPosY) {          mArrOutputVertices.addAll(intersections);          mArrOutputVertices.add(n);        } else         if (intersections.size() <= 1) {          mArrOutputVertices.add(n);          mArrOutputVertices.addAll(intersections);        } else {          mArrTempVertices.add(n);          mArrTempVertices.addAll(intersections);        }      }    }    Array<Vertex> intersections=getIntersections(mArrRotatedVertices,lines,scanXmin);    if (intersections.size() == 2) {      Vertex v1=intersections.get(0);      Vertex v2=intersections.get(1);      if (v1.mPosY < v2.mPosY) {        mArrOutputVertices.add(v2);        mArrOutputVertices.add(v1);      } else {        mArrOutputVertices.addAll(intersections);      }    } else     if (intersections.size() != 0) {      mArrTempVertices.addAll(intersections);    }    while (mArrOutputVertices.size() > 0) {      Vertex v=mArrOutputVertices.remove(0);      mArrTempVertices.add(v);      boolean textureFront;      if (i == 0) {        textureFront=true;        mVerticesCountFront++;      } else       if (i == mArrScanLines.size() - 1 || curlLength == 0) {        v.mPosX=-(curlLength + v.mPosX);        v.mPosZ=2 * radius;        v.mPenumbraX=-v.mPenumbraX;        textureFront=false;        mVerticesCountBack++;      } else {        double rotY=Math.PI * (v.mPosX / curlLength);        v.mPosX=radius * Math.sin(rotY);        v.mPosZ=radius - (radius * Math.cos(rotY));        v.mPenumbraX*=Math.cos(rotY);        v.mColorFactor=(float)(.1f + .9f * Math.sqrt(Math.sin(rotY) + 1));        if (v.mPosZ >= radius) {          textureFront=false;          mVerticesCountBack++;        } else {          textureFront=true;          mVerticesCountFront++;        }      }      if (textureFront != mFlipTexture) {        v.mTexX*=mTextureRectFront.right;        v.mTexY*=mTextureRectFront.bottom;        v.mColor=mTexturePage.getColor(CurlPage.SIDE_FRONT);      } else {        v.mTexX*=mTextureRectBack.right;        v.mTexY*=mTextureRectBack.bottom;        v.mColor=mTexturePage.getColor(CurlPage.SIDE_BACK);      }      v.rotateZ(curlAngle);      v.translate(curlPos.x,curlPos.y);      addVertex(v);      if (DRAW_SHADOW && v.mPosZ > 0 && v.mPosZ <= radius) {        ShadowVertex sv=mArrTempShadowVertices.remove(0);        sv.mPosX=v.mPosX;        sv.mPosY=v.mPosY;        sv.mPosZ=v.mPosZ;        sv.mPenumbraX=(v.mPosZ / 2) * -curlDir.x;        sv.mPenumbraY=(v.mPosZ / 2) * -curlDir.y;        sv.mPenumbraColor=v.mPosZ / radius;        int idx=(mArrDropShadowVertices.size() + 1) / 2;        mArrDropShadowVertices.add(idx,sv);      }      if (DRAW_SHADOW && v.mPosZ > radius) {        ShadowVertex sv=mArrTempShadowVertices.remove(0);        sv.mPosX=v.mPosX;        sv.mPosY=v.mPosY;        sv.mPosZ=v.mPosZ;        sv.mPenumbraX=((v.mPosZ - radius) / 3) * v.mPenumbraX;        sv.mPenumbraY=((v.mPosZ - radius) / 3) * v.mPenumbraY;        sv.mPenumbraColor=(v.mPosZ - radius) / (2 * radius);        int idx=(mArrSelfShadowVertices.size() + 1) / 2;        mArrSelfShadowVertices.add(idx,sv);      }    }    scanXmax=scanXmin;  }  mBufVertices.position(0);  mBufColors.position(0);  if (DRAW_TEXTURE) {    mBufTexCoords.position(0);  }  if (DRAW_SHADOW) {    mBufShadowColors.position(0);    mBufShadowVertices.position(0);    mDropShadowCount=0;    for (int i=0; i < mArrDropShadowVertices.size(); ++i) {      ShadowVertex sv=mArrDropShadowVertices.get(i);      mBufShadowVertices.put((float)sv.mPosX);      mBufShadowVertices.put((float)sv.mPosY);      mBufShadowVertices.put((float)sv.mPosZ);      mBufShadowVertices.put((float)(sv.mPosX + sv.mPenumbraX));      mBufShadowVertices.put((float)(sv.mPosY + sv.mPenumbraY));      mBufShadowVertices.put((float)sv.mPosZ);      for (int j=0; j < 4; ++j) {        double color=SHADOW_OUTER_COLOR[j] + (SHADOW_INNER_COLOR[j] - SHADOW_OUTER_COLOR[j]) * sv.mPenumbraColor;        mBufShadowColors.put((float)color);      }      mBufShadowColors.put(SHADOW_OUTER_COLOR);      mDropShadowCount+=2;    }    mSelfShadowCount=0;    for (int i=0; i < mArrSelfShadowVertices.size(); ++i) {      ShadowVertex sv=mArrSelfShadowVertices.get(i);      mBufShadowVertices.put((float)sv.mPosX);      mBufShadowVertices.put((float)sv.mPosY);      mBufShadowVertices.put((float)sv.mPosZ);      mBufShadowVertices.put((float)(sv.mPosX + sv.mPenumbraX));      mBufShadowVertices.put((float)(sv.mPosY + sv.mPenumbraY));      mBufShadowVertices.put((float)sv.mPosZ);      for (int j=0; j < 4; ++j) {        double color=SHADOW_OUTER_COLOR[j] + (SHADOW_INNER_COLOR[j] - SHADOW_OUTER_COLOR[j]) * sv.mPenumbraColor;        mBufShadowColors.put((float)color);      }      mBufShadowColors.put(SHADOW_OUTER_COLOR);      mSelfShadowCount+=2;    }    mBufShadowColors.position(0);    mBufShadowVertices.position(0);  }}  }
class C{  public THLEvent(long seqno,short fragno,boolean lastFrag,String sourceId,short type,long epochNumber,Timestamp localEnqueueTstamp,Timestamp sourceTstamp,String eventId,String shardId,ReplEvent event){  this.seqno=seqno;  this.fragno=fragno;  this.lastFrag=lastFrag;  this.sourceId=sourceId;  this.type=type;  this.epochNumber=epochNumber;  this.localEnqueueTstamp=localEnqueueTstamp;  this.sourceTstamp=sourceTstamp;  this.eventId=eventId;  this.shardId=shardId;  this.event=event;}  }
class C{  public String docValidate(PO po,int timing){  return null;}  }
class C{  private static String readStringWithLength(SeekableByteChannel chan) throws IOException {  ByteBuffer bb=ByteBuffer.allocate(4);  bb.order(ByteOrder.nativeOrder());  chan.read(bb);  bb.flip();  int len=bb.getInt();  if (len > 1024) {    throw new IOException("Invalid string length");  }  bb=ByteBuffer.allocate(len);  if (chan.read(bb) != len) {    throw new IOException("Not enough string");  }  byte[] data=bb.array();  return (data[len - 1] == 0) ? new String(data,0,len - 1,StandardCharsets.UTF_8) : new String(data,StandardCharsets.UTF_8);}  }
class C{  @SuppressWarnings("ConstantConditions") public static boolean sameMonth(long first,long second){  if (isNotTime(first) || isNotTime(second)) {    return false;  }  DateOnlyCalendar firstCalendar=DateOnlyCalendar.fromTime(first);  DateOnlyCalendar secondCalendar=DateOnlyCalendar.fromTime(second);  boolean same=firstCalendar.sameMonth(secondCalendar);  firstCalendar.recycle();  secondCalendar.recycle();  return same;}  }
class C{  public float descent(){  return height - ascent();}  }
class C{  private static boolean isPeerCacheRunnable(Runnable r){  String name=r.getClass().getName();  return name.startsWith("org.apache.hadoop.hdfs.PeerCache");}  }
class C{  static void errorMissingElement(String systemID,int lineNr,String parentElementName,String missingElementName) throws XMLValidationException {  throw new XMLValidationException(XMLValidationException.MISSING_ELEMENT,systemID,lineNr,missingElementName,null,null,"Element " + parentElementName + " expects to have a "+ missingElementName);}  }
class C{  private void convertInstance(Instance instance){  Instance inst=null;  if (instance instanceof SparseInstance) {    double[] vals=new double[instance.numValues()];    int[] newIndices=new int[instance.numValues()];    for (int j=0; j < instance.numValues(); j++) {      Attribute att=getInputFormat().attribute(instance.index(j));      if ((!att.isNumeric()) || (instance.index(j) == getInputFormat().classIndex())) {        vals[j]=instance.valueSparse(j);      } else {        if (instance.isMissingSparse(j)) {          vals[j]=instance.valueSparse(j);        } else {          vals[j]=1;        }      }      newIndices[j]=instance.index(j);    }    inst=new SparseInstance(instance.weight(),vals,newIndices,outputFormatPeek().numAttributes());  } else {    double[] vals=new double[outputFormatPeek().numAttributes()];    for (int j=0; j < getInputFormat().numAttributes(); j++) {      Attribute att=getInputFormat().attribute(j);      if ((!att.isNumeric()) || (j == getInputFormat().classIndex())) {        vals[j]=instance.value(j);      } else {        if (instance.isMissing(j) || (instance.value(j) == 0)) {          vals[j]=instance.value(j);        } else {          vals[j]=1;        }      }    }    inst=new DenseInstance(instance.weight(),vals);  }  inst.setDataset(instance.dataset());  push(inst);}  }
class C{  public ReservedSubStringValidator(final String parameterValue){  this.parameterValue=parameterValue;}  }
class C{  public double splitVal(){  return m_splitValue;}  }
class C{  protected MAsset(MIFixedAsset ifa){  this(ifa.getCtx(),0,ifa.get_TrxName());  setAD_Org_ID(ifa.getAD_Org_ID());  setIsOwned(true);  setIsInPosession(true);  String inventoryNo=ifa.getInventoryNo();  if (inventoryNo != null) {    inventoryNo=inventoryNo.trim();    setInventoryNo(inventoryNo);    setValue(inventoryNo);  }  setA_Asset_CreateDate(ifa.getAssetServiceDate());  MProduct product=ifa.getProduct();  if (product != null) {    setM_Product_ID(product.getM_Product_ID());    setA_Asset_Group_ID(ifa.getA_Asset_Group_ID());    MAttributeSetInstance asi=MAttributeSetInstance.create(getCtx(),product,get_TrxName());    setM_AttributeSetInstance_ID(asi.getM_AttributeSetInstance_ID());  }  setDateAcct(ifa.getDateAcct());  setName(ifa.getName());  setDescription(ifa.getDescription());}  }
class C{  public String toString(int ident){  String spaces=WbXmlLiterals.identString(ident);  StringBuilder sb=new StringBuilder(spaces);  sb.append(this.getClass().getSimpleName());  sb.append(": ");  sb.append("tag=");  sb.append(tag);  ident++;  sb.append(System.getProperty("line.separator"));  for (  WbXmlAttribute a : attributes) {    sb.append(a.toString(ident));    sb.append(System.getProperty("line.separator"));  }  for (  WbXmlContent c : contents) {    sb.append(c.toString(ident));  }  return sb.toString();}  }
class C{  public static Query not(Query q){  return new BooleanQuery.Builder().add(new MatchAllDocsQuery(),Occur.MUST).add(q,Occur.MUST_NOT).build();}  }
class C{  private void ensureOpen(){  if (myIsClosed) {    throw new IllegalStateException("The handler was already closed");  }}  }
class C{  private void processExit() throws NonRegularLoopException {  if (header != exit) {    checkInEdgesAreInLoop(exit);  }  Enumeration<BasicBlock> exitBlock_outEdges=exit.getOut();  boolean exits=false;  while (exitBlock_outEdges.hasMoreElements()) {    BasicBlock curExitBlockOutEdgeBB=exitBlock_outEdges.nextElement();    if (isInLoop(curExitBlockOutEdgeBB)) {    } else {      exits=true;      successor=curExitBlockOutEdgeBB;      if (successor == header) {        throw new NonRegularLoopException("Unimplemented condition - see LoopUnrolling.java : 240");      }    }  }  if (!exits) {    throw new NonRegularLoopException("Exit block (containing back edge to header) doesn't have an out of loop out edge.");  } else {    ifCmpInstr=exit.firstBranchInstruction();    if (ifCmpInstr == null) {      throw new NonRegularLoopException("Exit block branch doesn't have a (1st) branching instruction.");    } else     if (ifCmpInstr.getOpcode() != INT_IFCMP_opcode) {      throw new NonRegularLoopException("branch is int_ifcmp but " + ifCmpInstr.operator() + "\n");    } else {      carriedLoopIterator=follow(IfCmp.getVal1(ifCmpInstr));      terminalIteratorValue=follow(IfCmp.getVal2(ifCmpInstr));      condition=(ConditionOperand)IfCmp.getCond(ifCmpInstr).copy();{        boolean iteratorInvariant=isLoopInvariant(carriedLoopIterator,loop,header);        boolean terminalValueInvariant=isLoopInvariant(terminalIteratorValue,loop,header);        if (iteratorInvariant) {          if (terminalValueInvariant) {            throw new NonRegularLoopException("Exit block condition values are both invariant (single or infinite loop):\n" + "Loop = " + loop.toString() + "\nIterator = "+ carriedLoopIterator+ "\nTerminal = "+ terminalIteratorValue);          } else {            Operand temp=terminalIteratorValue;            terminalIteratorValue=carriedLoopIterator;            carriedLoopIterator=temp;          }        } else {          if (terminalValueInvariant) {          } else {            throw new NonRegularLoopException("Exit block condition values are both variant.");          }        }      }      if (Label.getBlock(IfCmp.getTarget(ifCmpInstr).target).block != header) {        throw new NonRegularLoopException("Target of exit block branch isn't the loop header.");      }      Enumeration<RegisterOperand> iteratorDefs=DefUse.defs(((RegisterOperand)carriedLoopIterator).getRegister());      while (iteratorDefs.hasMoreElements()) {        Operand curDef=follow(iteratorDefs.nextElement());        if (isInLoop(curDef.instruction.getBasicBlock())) {          if ((iteratorInstr == null) || (iteratorInstr == curDef.instruction)) {            iteratorInstr=curDef.instruction;          } else {            throw new NonRegularLoopException("Multiple definitions of the iterator.");          }        }      }      if (iteratorInstr == null) {        throw new NonRegularLoopException("No iterator definition found.");      } else       if ((iteratorInstr.getOpcode() != INT_ADD_opcode) && (iteratorInstr.getOpcode() != INT_SUB_opcode)) {        throw new NonRegularLoopException("Unrecognized iterator operator " + iteratorInstr.operator());      } else {        Operand iteratorUse=follow(Binary.getVal1(iteratorInstr));        if (!carriedLoopIterator.similar(iteratorUse)) {          Instruction phiInstr=iteratorUse.instruction;          if (!Phi.conforms(phiInstr)) {            throw new NonRegularLoopException("Iterator (" + iteratorUse + ") not using a phi instruction but "+ phiInstr);          }          strideValue=follow(Binary.getVal2(iteratorInstr));          initialIteratorValue=follow(Phi.getValue(phiInstr,0));          phiLoopIterator=iteratorUse;          if (initialIteratorValue instanceof BasicBlockOperand) {            throw new Error("BasicBlock mess up!");          }          if (initialIteratorValue == iteratorUse) {            initialIteratorValue=follow(Phi.getValue(phiInstr,1));          }          if (initialIteratorValue instanceof BasicBlockOperand) {            throw new Error("BasicBlock mess up!2");          }        } else {          throw new NonRegularLoopException("Iterator modifies (uses and defines) operand " + iteratorUse + " and is therefore not in SSA form.");        }        if (!isLoopInvariant(initialIteratorValue,loop,header)) {          throw new NonRegularLoopException("Initial iterator not constant or defined outside the loop - " + initialIteratorValue);        } else         if (!(strideValue instanceof ConstantOperand)) {          throw new NonRegularLoopException("Stride not constant - " + strideValue);        }      }    }  }}  }
class C{  SegmentTreeNode<?> computeLeftChild(SegmentTreeNode<?> node){  if (node.right - node.left > 1) {    return constructor.construct(node.left,(node.left + node.right) / 2);  }  return null;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    int oldProgress=-1;    int progress;    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,(double)Math.ceil(z1));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @ReactMethod public void manageChildren(int viewTag,@Nullable ReadableArray moveFrom,@Nullable ReadableArray moveTo,@Nullable ReadableArray addChildTags,@Nullable ReadableArray addAtIndices,@Nullable ReadableArray removeFrom){  ReactShadowNode cssNodeToManage=mShadowNodeRegistry.getNode(viewTag);  int numToMove=moveFrom == null ? 0 : moveFrom.size();  int numToAdd=addChildTags == null ? 0 : addChildTags.size();  int numToRemove=removeFrom == null ? 0 : removeFrom.size();  if (numToMove != 0 && (moveTo == null || numToMove != moveTo.size())) {    throw new IllegalViewOperationException("Size of moveFrom != size of moveTo!");  }  if (numToAdd != 0 && (addAtIndices == null || numToAdd != addAtIndices.size())) {    throw new IllegalViewOperationException("Size of addChildTags != size of addAtIndices!");  }  ViewAtIndex[] viewsToAdd=new ViewAtIndex[numToMove + numToAdd];  int[] indicesToRemove=new int[numToMove + numToRemove];  int[] tagsToRemove=new int[indicesToRemove.length];  int[] tagsToDelete=new int[numToRemove];  if (numToMove > 0) {    Assertions.assertNotNull(moveFrom);    Assertions.assertNotNull(moveTo);    for (int i=0; i < numToMove; i++) {      int moveFromIndex=moveFrom.getInt(i);      int tagToMove=cssNodeToManage.getChildAt(moveFromIndex).getReactTag();      viewsToAdd[i]=new ViewAtIndex(tagToMove,moveTo.getInt(i));      indicesToRemove[i]=moveFromIndex;      tagsToRemove[i]=tagToMove;    }  }  if (numToAdd > 0) {    Assertions.assertNotNull(addChildTags);    Assertions.assertNotNull(addAtIndices);    for (int i=0; i < numToAdd; i++) {      int viewTagToAdd=addChildTags.getInt(i);      int indexToAddAt=addAtIndices.getInt(i);      viewsToAdd[numToMove + i]=new ViewAtIndex(viewTagToAdd,indexToAddAt);    }  }  if (numToRemove > 0) {    Assertions.assertNotNull(removeFrom);    for (int i=0; i < numToRemove; i++) {      int indexToRemove=removeFrom.getInt(i);      int tagToRemove=cssNodeToManage.getChildAt(indexToRemove).getReactTag();      indicesToRemove[numToMove + i]=indexToRemove;      tagsToRemove[numToMove + i]=tagToRemove;      tagsToDelete[i]=tagToRemove;    }  }  Arrays.sort(viewsToAdd,ViewAtIndex.COMPARATOR);  Arrays.sort(indicesToRemove);  int lastIndexRemoved=-1;  for (int i=indicesToRemove.length - 1; i >= 0; i--) {    int indexToRemove=indicesToRemove[i];    if (indexToRemove == lastIndexRemoved) {      throw new IllegalViewOperationException("Repeated indices in Removal list for view tag: " + viewTag);    }    cssNodeToManage.removeChildAt(indicesToRemove[i]);    lastIndexRemoved=indicesToRemove[i];  }  for (int i=0; i < viewsToAdd.length; i++) {    ViewAtIndex viewAtIndex=viewsToAdd[i];    ReactShadowNode cssNodeToAdd=mShadowNodeRegistry.getNode(viewAtIndex.mTag);    if (cssNodeToAdd == null) {      throw new IllegalViewOperationException("Trying to add unknown view tag: " + viewAtIndex.mTag);    }    cssNodeToManage.addChildAt(cssNodeToAdd,viewAtIndex.mIndex);  }  if (!cssNodeToManage.isVirtual() && !cssNodeToManage.isVirtualAnchor()) {    mNativeViewHierarchyOptimizer.handleManageChildren(cssNodeToManage,indicesToRemove,tagsToRemove,viewsToAdd,tagsToDelete);  }  for (int i=0; i < tagsToDelete.length; i++) {    removeCSSNode(tagsToDelete[i]);  }}  }
class C{  public ElementKindSelectorTool(Composite parent,int style){  super(parent,style);  setLayout(new GridLayout());  elementKindPicker=new ElementKindPicker(this,SWT.NONE);  elementKindPicker.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));}  }
class C{  void onMessage(WampMessage message){  if (currentState instanceof SessionEstablishedState)   ((SessionEstablishedState)currentState).onMessage(message); else   if (currentState instanceof HandshakingState)   ((HandshakingState)currentState).onMessage(message);}  }
class C{  public String toString(){  String s="";  s+=String.format("%.2f N + %.2f",slope(),intercept());  return s + "  (R^2 = " + String.format("%.3f",R2())+ ")";}  }
class C{  public ExpectedRecords<T> expect(T record,int times){  if (record == null) {    throw new IllegalArgumentException("Record has too be not null!");  }  expectedRecords.add(record);  return this;}  }
class C{  public void resetLastMethod(){  lastMtd=null;}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,double[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    if (i > 0) {      buffer.append(arraySeparator);    }    appendDetail(buffer,fieldName,array[i]);  }  buffer.append(arrayEnd);}  }
class C{  public void stop(){  if (this.cache.getEventTrackerTask() != null) {    this.cache.getEventTrackerTask().removeTracker(this);  }}  }
class C{  @Override public void accumulate(Object value){  Object[] array=(Object[])value;  this.count+=((Integer)array[0]).intValue();  super.accumulate(array[1]);}  }
class C{  public NumberLiteral literal(final String text){  final NumberLiteral $=ast.newNumberLiteral();  $.setToken(text);  return $;}  }
class C{  public void actionPerformed(ActionEvent e){  this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  if (e.getSource() == bZoom)   cmd_zoom(); else   if (e.getSource() == bOK) {    bOK.setEnabled(false);    cmd_OK();    bOK.setEnabled(true);  } else   if (e.getSource() == fAnswerButton)   cmd_button();  this.setCursor(Cursor.getDefaultCursor());}  }
class C{  public Flag unregister(final String name){  if (!mLongNames.containsKey(name)) {    return null;  }  final Flag flag=mLongNames.get(name);  mLongNames.remove(flag.getName());  if (flag.getChar() != null) {    mShortNames.remove(flag.getChar());  }  mRegisteredFlags.remove(flag);  return flag;}  }
class C{  @Override public void windowActivated(WindowEvent e){}  }
class C{  public void populateBeans(UniqueList<Table> finalInTableNodes,UniqueList<Table> finalOutTableNodes,List<Function> finalFunctions,UniqueList<Constant> finalConstants,List<Relation> finalRelations,LineageQuery lineageQuery){  lineageTableNodes=new UniqueList<LineageNodeInfo>();  lineageColumnNodes=new UniqueList<LineageNodeInfo>();  lineageFunctionNodes=new UniqueList<LineageNodeInfo>();  lineageConstantNodes=new UniqueList<LineageNodeInfo>();  lineageRelationInfos=new UniqueList<LineageRelationInfo>();  for (  Table table : finalInTableNodes) {    LineageNodeInfo node=new LineageNodeInfo();    node.setNodeId(table.getId());    node.setContainerNodeId(null);    node.setDisplayName(table.getDisplayName());    node.setDotLabel(table.getLabel());    node.setDotString(table.toDotString());    if (table.isDataBaseTable())     node.setNodeTypeId(LineageNodeTypeEnumInfo.TABLE.getNodeTypeId()); else     node.setNodeTypeId(LineageNodeTypeEnumInfo.TEMPTABLE.getNodeTypeId());    lineageTableNodes.addToList(node);    for (    Column column : table.getColumns()) {      node=new LineageNodeInfo();      node.setNodeId(column.getId());      node.setContainerNodeId(String.valueOf(column.getTable().getId()));      node.setDisplayName(column.getDisplayName());      node.setDotLabel(column.getLabel());      node.setDotString(column.toDotString());      node.setNodeOrder(column.getOrdinalPosition());      if (column.isUsedInQuery())       node.setNodeTypeId(LineageNodeTypeEnumInfo.COLUMN.getNodeTypeId()); else       node.setNodeTypeId(LineageNodeTypeEnumInfo.IDLECOLUMN.getNodeTypeId());      lineageColumnNodes.addToList(node);    }  }  for (  Table table : finalOutTableNodes) {    LineageNodeInfo node=new LineageNodeInfo();    node.setNodeId(table.getId());    node.setContainerNodeId(null);    node.setDisplayName(table.getDisplayName());    node.setDotLabel(table.getLabel());    node.setDotString(table.toDotString());    if (table.isDataBaseTable())     node.setNodeTypeId(LineageNodeTypeEnumInfo.TABLE.getNodeTypeId()); else     node.setNodeTypeId(LineageNodeTypeEnumInfo.TEMPTABLE.getNodeTypeId());    lineageTableNodes.addToList(node);    for (    Column column : table.getColumns()) {      node=new LineageNodeInfo();      node.setNodeId(column.getId());      node.setContainerNodeId(String.valueOf(column.getTable().getId()));      node.setDisplayName(column.getDisplayName());      node.setDotLabel(column.getLabel());      node.setDotString(column.toDotString());      node.setNodeOrder(column.getOrdinalPosition());      if (column.isUsedInQuery())       node.setNodeTypeId(LineageNodeTypeEnumInfo.COLUMN.getNodeTypeId()); else       node.setNodeTypeId(LineageNodeTypeEnumInfo.IDLECOLUMN.getNodeTypeId());      lineageColumnNodes.addToList(node);    }  }  for (  Function function : finalFunctions) {    LineageNodeInfo node=new LineageNodeInfo();    node.setNodeId(function.getId());    node.setContainerNodeId(null);    node.setDisplayName(function.getDisplayName());    node.setDotLabel(function.getLabel());    node.setDotString(function.toDotString());    node.setNodeTypeId(LineageNodeTypeEnumInfo.FUNCTION.getNodeTypeId());    lineageFunctionNodes.add(node);  }  for (  Constant constant : finalConstants) {    LineageNodeInfo node=new LineageNodeInfo();    node.setNodeId(constant.getId());    node.setContainerNodeId(null);    node.setDisplayName(constant.getDisplayName());    node.setDotLabel(constant.getLabel());    node.setDotString(constant.toDotString());    node.setNodeTypeId(LineageNodeTypeEnumInfo.CONSTANT.getNodeTypeId());    lineageConstantNodes.add(node);  }  for (  Relation relation : finalRelations) {    if (relation.getSource() instanceof Column && relation.getDestination() instanceof Column) {      if (!(((Column)relation.getSource()).getTable().getTableName().equals(((Column)relation.getDestination()).getTable().getTableName()) && ((Column)relation.getSource()).getColumnName().equals(((Column)relation.getDestination()).getColumnName()))) {        LOGGER.info("source and destination are not same columns = " + relation);        LineageRelationInfo lineageRelationInfo=new LineageRelationInfo();        lineageRelationInfo.setRelationId(UUID.randomUUID().toString());        lineageRelationInfo.setQueryId(lineageQuery.getQueryId());        lineageRelationInfo.setSrcNodeId(relation.getSource().getId());        lineageRelationInfo.setTargetNodeId(relation.getDestination().getId());        lineageRelationInfo.setDotString(relation.toDotString());        lineageRelationInfos.addToList(lineageRelationInfo);      }    } else {      LineageRelationInfo lineageRelationInfo=new LineageRelationInfo();      lineageRelationInfo.setRelationId(UUID.randomUUID().toString());      lineageRelationInfo.setQueryId(lineageQuery.getQueryId());      lineageRelationInfo.setSrcNodeId(relation.getSource().getId());      lineageRelationInfo.setTargetNodeId(relation.getDestination().getId());      lineageRelationInfo.setDotString(relation.toDotString());      lineageRelationInfos.addToList(lineageRelationInfo);    }  }}  }
class C{  public synchronized void addCenterListener(CenterListener listener){  centerDelegate.add(listener);}  }
class C{  public int read() throws IOException {  return _file.read();}  }
class C{  public boolean hasAccessor(){  return hasGetter() || hasSetter();}  }
class C{  @Override public String toString(){  MoreObjects.ToStringHelper s=MoreObjects.toStringHelper(this);  if (initialCapacity != UNSET_INT) {    s.add("initialCapacity",initialCapacity);  }  if (concurrencyLevel != UNSET_INT) {    s.add("concurrencyLevel",concurrencyLevel);  }  if (keyStrength != null) {    s.add("keyStrength",Ascii.toLowerCase(keyStrength.toString()));  }  if (valueStrength != null) {    s.add("valueStrength",Ascii.toLowerCase(valueStrength.toString()));  }  if (keyEquivalence != null) {    s.addValue("keyEquivalence");  }  return s.toString();}  }
class C{  public void addDirtyRegion(Window window,int x,int y,int w,int h){  addDirtyRegion0(window,x,y,w,h);}  }
class C{  public BatchFraction defaultJobRepository(final DatasourcesFraction datasource){  return defaultJobRepository(datasource.getKey(),datasource);}  }
class C{  public static boolean addInventoryLine(Properties ctx,Integer inventoryId,Integer productId,BigDecimal qtyCsv,BigDecimal qtyCount,boolean updateCount,String trxName) throws OperationException {  if (productId == null || productId.intValue() == 0) {    throw new ProductNotFoundException("product not available");  }  MProduct product=new MProduct(ctx,productId.intValue(),trxName);  if (product.getProductType().equalsIgnoreCase(MProduct.PRODUCTTYPE_Service)) {    throw new CannotCreateInventoryLineException("product is a service, cannot add to inventory");  }  MInventory inventory=new MInventory(ctx,inventoryId,trxName);  MInventoryLine inventoryLine[]=inventory.getLines(true);  boolean added=true;  if (inventoryLine.length > 0) {    for (int i=0; i < inventoryLine.length; i++) {      if (productId == inventoryLine[i].getM_Product_ID()) {        BigDecimal countQty=inventoryLine[i].getQtyCount();        countQty=countQty.add(qtyCount);        BigDecimal countCsv=inventoryLine[i].getQtyCsv();        countCsv=countCsv.add(qtyCsv);        saveCountQtyInInventoryLine(ctx,inventoryLine[i].get_ID(),countCsv,countQty,trxName);        return added;      }    }  }  ProcessInfoParameter param[]={new ProcessInfoParameter("ProductValue",product.getValue(),null,null,null),new ProcessInfoParameter("DeleteOld","N",null,null,null)};  MPInstance instance=new MPInstance(ctx,CREATE_INVENTORY_COUNT_LIST_PROCESS,inventoryId.intValue());  instance.saveEx();  ProcessInfo poInfo=new ProcessInfo("Create Inventory Count List",CREATE_INVENTORY_COUNT_LIST_PROCESS);  poInfo.setParameter(param);  poInfo.setRecord_ID(inventoryId.intValue());  poInfo.setAD_Process_ID(CREATE_INVENTORY_COUNT_LIST_PROCESS);  poInfo.setAD_PInstance_ID(instance.get_ID());  InventoryCountCreate countCreate=new InventoryCountCreate();  Trx trx=null;  if (trxName != null) {    trx=Trx.get(trxName,false);  }  boolean success=countCreate.startProcess(ctx,poInfo,trx);  if (success == false) {    throw new OperationException("Problem encountered while creating inventory");  }  if (updateCount == true) {    int createdInvLineId=getInventoryLineId(ctx,inventoryId,productId,trxName);    MInventoryLine createdInvLine=new MInventoryLine(ctx,createdInvLineId,trxName);    createdInvLine.setQtyCount(qtyCount);    createdInvLine.setQtyCsv(qtyCsv);    PoManager.save(createdInvLine);  }  return added;}  }
class C{  private void startDownloadActivity(){  if (isOnline()) {    Intent intent=new Intent(this,DownloadMapActivity.class);    startActivity(intent);  } else {    Toast.makeText(this,"Add new Map need internet connection!",Toast.LENGTH_LONG).show();  }}  }
class C{  public final boolean equalsIgnoreCase(CharSegment b){  int length=_length;  if (length != b._length)   return false;  char[] buffer=_buffer;  char[] bBuffer=b._buffer;  int offset=_offset;  int bOffset=b._offset;  for (int i=length - 1; i >= 0; i--) {    char ca=buffer[offset + i];    char cb=bBuffer[bOffset + i];    if (ca != cb && Character.toLowerCase(ca) != Character.toLowerCase(cb))     return false;  }  return true;}  }
class C{  public static void main(String... args) throws Exception {  new PgTcpRedirect().loop(args);}  }
class C{  public void delete(RRset rrset){  for (Iterator it=rrset.rrs(); it.hasNext(); )   delete((Record)it.next());}  }
class C{  public static float euclideanDistance(float x1,float y1,float x2,float y2){  float dx=x1 - x2;  float dy=y1 - y2;  return (float)Math.sqrt(dx * dx + dy * dy);}  }
class C{  public void onReqManagedAccount() throws BrokerModelException {}  }
class C{  public MemorySection findOffset(final BigInteger offset){  Preconditions.checkNotNull(offset,"IE00749: Offset argument can not be null");  for (  final MemorySection section : memorySections) {    if ((section.getStart().toBigInteger().compareTo(offset) <= 0) && (section.getEnd().toBigInteger().compareTo(offset) >= 0)) {      return section;    }  }  return null;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  private Collection<Integer> generateTestKeys(){  Collection<Integer> ret=new ArrayList<>(TEST_MAP_SIZE);  for (int i=0; i < TEST_MAP_SIZE; i++)   ret.add(i);  return ret;}  }
class C{  public static long tte(String method){  long nanoTime=Debug.threadCpuTimeNanos() - ttsTime;  totalTime=totalTime + nanoTime;  LogUtil.d("[Debug-time]",method,totalTime / 1000000,totalTime);  return totalTime;}  }
class C{  public void ivrZonesetMember(String ivrZonename,boolean isRemove) throws NetworkDeviceControllerException {  _log.info(MessageFormat.format("Host: {0}, Port: {1} - Add or remove ivrZonesetMember: {2} - Remove {3}",new Object[]{getSession().getSession().getHost(),getSession().getSession().getPort(),ivrZonename,isRemove}));  SSHPrompt[] prompts={SSHPrompt.MDS_CONFIG_IVR_ZONESET};  if (!inConfigMode) {    throw NetworkDeviceControllerException.exceptions.mdsDeviceNotInConfigMode();  }  if (!Arrays.asList(prompts).contains(lastPrompt)) {    String message=Arrays.asList(prompts).toString();    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedLastPrompt(lastPrompt.toString(),message);  }  String noString=isRemove ? MDSDialogProperties.getString("MDSDialog.zoneNameVsan.no.cmd") : "";  StringBuilder buf=new StringBuilder();  String payload=MessageFormat.format(noString + MDSDialogProperties.getString("MDSDialog.ivr.zonesetMember.cmd"),ivrZonename);  boolean retryNeeded=true;  for (int retryCount=0; retryCount < sessionLockRetryMax && retryNeeded; retryCount++) {    lastPrompt=sendWaitFor(payload,defaultTimeout,prompts,buf);    String[] lines=getLines(buf);    for (    String line : lines) {      if (line.indexOf(MDSDialogProperties.getString("MDSDialog.ivr.zone.not.found")) >= 0 && !isRemove) {        throw new NetworkDeviceControllerException(line + ": " + ivrZonename);      }    }    retryNeeded=checkForEnhancedZoneSession(lines,retryCount);  }}  }
class C{  public static boolean hasAppEngineFacet(IFacetedProject project){  FacetedProjectHelper facetedProjectHelper=new FacetedProjectHelper();  return facetedProjectHelper.projectHasFacet(project,ID);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public StateMachineDefinition_ createStateMachineDefinition_(){  StateMachineDefinition_Impl stateMachineDefinition_=new StateMachineDefinition_Impl();  return stateMachineDefinition_;}  }
class C{  @Override protected ItemsFilter createFilter(){  this.setCurrentFilter(new AbsoluteOrSimpleSpecifierFilter());  return this.getCurrentFilter();}  }
class C{  public ReportServiceImpl(final List<ReportDescriptor> reportDescriptors,final Map<String,ReportWorker> reportWorkers,final ReportGenerator reportGenerator){  this.reportDescriptors=reportDescriptors;  this.reportWorkers=reportWorkers;  this.reportGenerator=reportGenerator;}  }
class C{  public void addRetrievalMethod(String uri,Transforms transforms,String Type){  this.add(new RetrievalMethod(this.doc,uri,transforms,Type));}  }
class C{  protected void syncProvider(Uri uri,String accountName,String authority) throws Exception {  Bundle extras=new Bundle();  extras.putBoolean(ContentResolver.SYNC_EXTRAS_IGNORE_SETTINGS,true);  Account account=new Account(accountName,"com.google");  ContentResolver.requestSync(account,authority,extras);  long startTimeInMillis=SystemClock.elapsedRealtime();  long endTimeInMillis=startTimeInMillis + MAX_TIME_FOR_SYNC_IN_MINS * 60000;  int counter=0;  while (counter < 2) {    Thread.sleep(1000);    if (SystemClock.elapsedRealtime() > endTimeInMillis) {      break;    }    if (ContentResolver.isSyncActive(account,authority)) {      counter=0;      continue;    }    counter++;  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isOkPoint(){  if (getCode() > 0) {    return true;  }  return false;}  }
class C{  public static String makeCompositeParam(String prefix,String suffix){  return prefix + COMPOSITE_DELIMITER + suffix;}  }
class C{  public static void eachObject(Path self,Closure closure) throws IOException, ClassNotFoundException {  IOGroovyMethods.eachObject(newObjectInputStream(self),closure);}  }
class C{  private static void run(Recurrence recur,DateValue start,TimeZone tz,DateValue advanceTo,DateValue[] expected){  RecurrenceIterator it=RecurrenceIteratorFactory.createRecurrenceIterator(recur,start,tz);  if (advanceTo != null) {    it.advanceTo(advanceTo);  }  boolean iteratorIsTerminating=(recur.getUntil() != null || recur.getCount() != null);  assertIterator(Arrays.asList(expected),it,iteratorIsTerminating);  if (advanceTo == null) {    it=RecurrenceIteratorFactory.createRecurrenceIterator(recur,start,tz);    it.advanceTo(start);    assertIterator(Arrays.asList(expected),it,iteratorIsTerminating);  }}  }
class C{  public void testPSpecified(){  try {    new PSource.PSpecified(null);    fail("NullPointerException should be thrown in the case of " + "null p array.");  } catch (  NullPointerException e) {  }  assertEquals("The PSource.PSpecified DEFAULT value should be byte[0]",0,PSource.PSpecified.DEFAULT.getValue().length);  byte[] p=new byte[]{1,2,3,4,5};  PSource.PSpecified ps=new PSource.PSpecified(p);  p[0]++;  assertFalse("The change of p specified in the constructor " + "should not cause the change of internal array.",p[0] == ps.getValue()[0]);}  }
class C{  public String toSummaryString(){  return toSummaryString("");}  }
class C{  public CholeskyDecomposition(jMatrix Arg){  double[][] A=Arg.getArray();  n=Arg.getRowDimension();  L=new double[n][n];  isspd=(Arg.getColumnDimension() == n);  for (int j=0; j < n; j++) {    double[] Lrowj=L[j];    double d=0.0;    for (int k=0; k < j; k++) {      double[] Lrowk=L[k];      double s=0.0;      for (int i=0; i < k; i++) {        s+=Lrowk[i] * Lrowj[i];      }      Lrowj[k]=s=(A[j][k] - s) / L[k][k];      d=d + s * s;      isspd=isspd & (A[k][j] == A[j][k]);    }    d=A[j][j] - d;    isspd=isspd & (d > 0.0);    L[j][j]=Math.sqrt(Math.max(d,0.0));    for (int k=j + 1; k < n; k++) {      L[j][k]=0.0;    }  }}  }
class C{  public Notify(){  super(Type.SERVICE_CALL);}  }
class C{  GridNioFuture<?> deferredWrite(ByteBuffer buf){  assert isHeldByCurrentThread();  GridNioEmbeddedFuture<Object> fut=new GridNioEmbeddedFuture<>();  ByteBuffer cp=copy(buf);  deferredWriteQueue.offer(new WriteRequest(fut,cp));  return fut;}  }
class C{  private static int skipWhiteSpace(BitArray row) throws NotFoundException {  int width=row.getSize();  int endStart=row.getNextSet(0);  if (endStart == width) {    throw NotFoundException.getNotFoundInstance();  }  return endStart;}  }
class C{  public boolean understandsProperty(String propertyToTest){  if (properties == null) {    return false;  }  return properties.get(propertyToTest) != null;}  }
class C{  public boolean isExpired(final Date now){  return (cookieExpiryDate != null && cookieExpiryDate.getTime() <= now.getTime());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:56.775 -0500",hash_original_method="99232C70861F540E42FB57435D811DAE",hash_generated_method="A89B3B729B64F331E1D8043057407503") public static SmsMessage createFromPdu(byte[] pdu){  SmsMessage msg=new SmsMessage();  try {    msg.parsePdu(pdu);    return msg;  } catch (  RuntimeException ex) {    Log.e(LOG_TAG,"SMS PDU parsing failed: ",ex);    return null;  }}  }
class C{  public BeaconAnalysis(){  this.left=BeaconColor.UNKNOWN;  this.right=BeaconColor.UNKNOWN;  this.confidence=0.0f;  this.location=new Rectangle();  this.leftButton=null;  this.rightButton=null;}  }
class C{  public void addAllIndividuals(Collection<Individual> newIndividuals){  individuals.addAll(newIndividuals);}  }
class C{  public static void xmlClassInexistent(String path,Class<?> aClass){  throw new XmlMappingClassDoesNotExistException(MSG.INSTANCE.message(xmlMappingClassDoesNotExistException1,path,aClass.getSimpleName()));}  }
class C{  public ResultMatrixHTML(){  this(1,1);}  }
class C{  public ContactEntry(BaseEntry<?> sourceEntry){  super(sourceEntry);  getCategories().add(CONTACT_CATEGORY);}  }
class C{  public void onNewIntent(Intent intent){}  }
class C{  public static Result runCmd(File directory,String cmd) throws IOException {  return runCmd(directory,cmd,true,true);}  }
class C{  public TemporaryLookupException(String message){  super(message);}  }
class C{  public String useKononenkoTipText(){  return "Use Kononenko's MDL criterion. If set to false" + " uses the Fayyad & Irani criterion.";}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override public T store(AppContext ctx,T object){  if (object.getId() == null) {    throw new APIException("Object should not have a null id",ctx.isNoError());  }  CreateOrUpdateVisitor createOrUpdateVisitor=new CreateOrUpdateVisitor(ctx);  object.accept(createOrUpdateVisitor);  return object;}  }
class C{  private void breakBarrier(){  generation.broken=true;  count=parties;  trip.signalAll();}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:35.662 -0500",hash_original_method="8BDEFE6980DC0197E43DC25D26C94143",hash_generated_method="C5424F955C0A4BA4C1BE08A81A337C61") public Response createResponse(int statusCode,Request request,ContentTypeHeader contentType,byte[] content) throws ParseException {  if (request == null || content == null || contentType == null)   throw new NullPointerException("null Parameters");  SIPRequest sipRequest=(SIPRequest)request;  SIPResponse sipResponse=sipRequest.createResponse(statusCode);  sipResponse.setHeader((ContentType)contentType);  sipResponse.setMessageContent(content);  if (server != null) {    sipResponse.setHeader(server);  }  return sipResponse;}  }
class C{  public void removeDocument(int docId) throws Exception {  m_fdr.getDocumentTree().removeDocument(docId);}  }
class C{  public Vset checkValue(Environment env,Context ctx,Vset vset,Hashtable exp){  vset=checkCommon(env,ctx,vset,exp);  if (type != Type.tError) {    env.error(where,"undef.var.super",idSuper);  }  return vset;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.PROPERTY_GETTER_DECLARATION;}  }
class C{  QuartzSchedulerThread(QuartzScheduler qs,QuartzSchedulerResources qsRsrcs){  this(qs,qsRsrcs,qsRsrcs.getMakeSchedulerThreadDaemon(),Thread.NORM_PRIORITY);}  }
class C{  public LineReuseRatio(){  super(Options.set,"Line Reuse Ratio","Blocks with this fraction marked may be reused for allocation",DEFAULT_LINE_REUSE_RATIO);}  }
class C{  public void testRegexps() throws Exception {  int num=atLeast(500);  for (int i=0; i < num; i++) {    assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random()),RegExp.NONE).toAutomaton());  }}  }
class C{  public String toString(){  return this.getTypeRefAsString();}  }
class C{  public String writeFeatureExample(String label,Collection<Feature> activeFeatures){  int lab=getLabel(label);  int[] featIds=new int[activeFeatures.size()];  int index=0;  for (  Feature f : activeFeatures)   featIds[index++]=featureLex.getFeatureId(f.getName());  Arrays.sort(featIds);  StringBuilder bldr=new StringBuilder();  bldr.append(lab);  for (  int featId : featIds)   bldr.append(" ").append(featId).append(":1");  return bldr.toString();}  }
class C{  public static void writeFileAffinityRange(BinaryRawWriter writer,@Nullable IgfsFileAffinityRange affRange){  if (affRange != null) {    writer.writeBoolean(true);    affRange.writeRawBinary(writer);  } else   writer.writeBoolean(false);}  }
class C{  public void update(Graphics g,JComponent c){  if (c.isOpaque())   CompiereUtils.fillRectange((Graphics2D)g,c,CompiereLookAndFeel.ROUND);  paint(g,c);}  }
class C{  void verifyExceptionCaptured(Class<? extends Throwable> expectedExceptionClass){  assertTrue("Excpected exception not thrown",exceptionEventCapture.hasCaptured());  Throwable caughtEx=exceptionEventCapture.getValue().getCause();  assertEquals(expectedExceptionClass,caughtEx.getClass());  exceptionEventCapture.reset();}  }
class C{  public void copy(Column source){  checkConstraint=source.checkConstraint;  checkConstraintSQL=source.checkConstraintSQL;  displaySize=source.displaySize;  name=source.name;  precision=source.precision;  scale=source.scale;  nullable=source.nullable;  defaultExpression=source.defaultExpression;  originalSQL=source.originalSQL;  convertNullToDefault=source.convertNullToDefault;  sequence=source.sequence;  comment=source.comment;  computeTableFilter=source.computeTableFilter;  isComputed=source.isComputed;  selectivity=source.selectivity;  primaryKey=source.primaryKey;}  }
class C{  public boolean isUserNameToLowerCase(){  return userNameToLowerCase;}  }
class C{  private final byte[] urlHashComputation(){  assert this.hash == null;  final int id=Domains.getDomainID(this.host,this.hostAddress);  final boolean isHTTP=isHTTP();  int p=(this.host == null || this.host.indexOf(':') >= 0) ? -1 : this.host.lastIndexOf('.');  String dom=(p > 0) ? dom=this.host.substring(0,p) : "";  p=dom.lastIndexOf('.');  final String subdom;  if (p <= 0) {    subdom="";  } else {    subdom=dom.substring(0,p);    dom=dom.substring(p + 1);  }  final String normalizedPath;  if (this.isFile() && this.path.indexOf('\\') >= 0)   normalizedPath=this.path.replace('\\','/'); else   normalizedPath=this.path;  int rootpathStart=0;  int rootpathEnd=normalizedPath.length() - 1;  if (!normalizedPath.isEmpty() && (normalizedPath.charAt(0) == '/'))   rootpathStart=1;  if (normalizedPath.endsWith("/"))   rootpathEnd=normalizedPath.length() - 2;  p=normalizedPath.indexOf('/',rootpathStart);  String rootpath="";  if (p > 0 && p < rootpathEnd) {    rootpath=normalizedPath.substring(rootpathStart,p);  }  final int l=dom.length();  final int domlengthKey=(l <= 8) ? 0 : (l <= 12) ? 1 : (l <= 16) ? 2 : 3;  final byte flagbyte=(byte)(((isHTTP) ? 0 : 32) | (id << 2) | domlengthKey);  final StringBuilder hashs=new StringBuilder(12);  assert hashs.length() == 0;  final String normalform=toNormalform(true,true);  final String b64l=Base64Order.enhancedCoder.encode(Digest.encodeMD5Raw(normalform));  if (b64l.length() < 5)   return null;  hashs.append(b64l.substring(0,5));  assert hashs.length() == 5;  hashs.append(subdomPortPath(subdom,this.port,rootpath));  assert hashs.length() == 6;  hashs.append(hosthash5(this.protocol,this.host,this.port));  assert hashs.length() == 11;  hashs.append(Base64Order.enhancedCoder.encodeByte(flagbyte));  assert hashs.length() == 12;  final byte[] b=ASCII.getBytes(hashs.toString());  assert b.length == 12;  return b;}  }
class C{  public Quaternionf rotate(float angleX,float angleY,float angleZ){  return rotate(angleX,angleY,angleZ,this);}  }
class C{  public static String escapeElementEntities(String str){  if (str == null)   return null;  StringBuffer buffer;  char ch;  String entity;  buffer=null;  for (int i=0; i < str.length(); i++) {    ch=str.charAt(i);switch (ch) {case '<':      entity="&lt;";    break;case '>':  entity="&gt;";break;case '&':entity="&amp;";break;case '\r':entity="&#xD;";break;default :entity=null;break;}if (buffer == null) {if (entity != null) {buffer=new StringBuffer(str.length() + 20);buffer.append(str.substring(0,i));buffer.append(entity);}} else {if (entity == null) {buffer.append(ch);} else {buffer.append(entity);}}}return (buffer == null) ? str : buffer.toString();}  }
class C{  public NATURAL_INNER_JOIN NATURAL_INNER_JOIN(String tableToJoin){  return new NATURAL_INNER_JOIN(this,tableToJoin);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void onReqOpenOrders(){}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public static void blur(int[] src,int[] out,int w,int h,int size){  float[] k=new float[size];  int off=size / 2;  getGaussianMask(k);  int[] tmp=new int[src.length];  int rowPointer=0;  for (int y=0; y < h; y++) {    for (int x=0; x < w; x++) {      int sum=0;      for (int i=0; i < k.length; i++) {        int dx=x + i - off;        dx=clamp(dx,0,w - 1);        sum=addPixel(sum,src[rowPointer + dx],k[i]);      }      tmp[x + rowPointer]=sum;    }    rowPointer+=w;  }  for (int x=0; x < w; x++) {    rowPointer=0;    for (int y=0; y < h; y++) {      int sum=0;      for (int i=0; i < k.length; i++) {        int dy=y + i - off;        dy=clamp(dy,0,h - 1);        sum=addPixel(sum,tmp[dy * w + x],k[i]);      }      out[x + rowPointer]=sum;      rowPointer+=w;    }  }}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines,boolean append) throws IOException {  writeLines(file,encoding,lines,null,append);}  }
class C{  public static JavaUnicodeEscaper below(final int codepoint){  return outsideOf(codepoint,Integer.MAX_VALUE);}  }
class C{  public void centralizeContent(){  int measuredWidth=getMeasuredWidth();  int measuredHeight=getMeasuredHeight();  int scaledContentWidth=getScaledContentWidth();  int scaledContentHeight=getScaledContentHeight();  mContentX=0;  mContentY=0;  updateMatrixScaleRotate();}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void fireEntityAdded(final OdorWorldEntity entity){  for (  WorldListener listener : listenerList) {    listener.entityAdded(entity);  }}  }
class C{  public DD rint(){  if (isNaN())   return this;  DD plus5=this.add(0.5);  return plus5.floor();}  }
class C{  private void initParameterRows(List<VOParameter> parameters,boolean initDefault){  parameterRows=new ArrayList<ParameterRow>();  for (  VOParameter voParameter : parameters) {    VOParameterDefinition parameterDefinition=voParameter.getParameterDefinition();    ParameterRow row=new ParameterRow(voParameter,null,initDefault);    parameterRows.add(row);    if (parameterDefinition.getValueType() == ParameterValueType.ENUMERATION) {      int optionIndex=0;      for (      VOParameterOption option : parameterDefinition.getParameterOptions()) {        ParameterRow optionRow=new ParameterRow(voParameter,option,initDefault);        optionRow.setOptionIndex(optionIndex);        optionIndex++;        parameterRows.add(optionRow);      }    }  }}  }
class C{  private Snapshot updateSnapExport(DbClient dbClient,VNXeApiClient apiClient,FileExport newExport){  _logger.info("upading snap export. ");  URI snapId=getTaskCompleter().getId();  Snapshot snapObj=dbClient.queryObject(Snapshot.class,snapId);  FSExportMap exports=snapObj.getFsExports();  if (exports == null) {    exports=new FSExportMap();  }  VNXeNfsShare nfsShare=apiClient.findSnapNfsShare(snapObj.getNativeId(),shareName);  String nfsShareId=nfsShare.getId();  newExport.setIsilonId(nfsShareId);  exports.put(newExport.getFileExportKey(),newExport);  snapObj.setFsExports(exports);  updateExportRules(snapObj.getId(),newExport,dbClient);  dbClient.persistObject(snapObj);  return snapObj;}  }
class C{  public TermPayloadInvertedIndexInputStream(Index index,String structureName,Iterator<? extends Pointer> lexInputStream,Class<? extends IterablePosting> postingIteratorClass) throws IOException {  super(index,structureName,lexInputStream,postingIteratorClass);}  }
class C{  public StructImpl(int type){  this(type,HashMapPro.DEFAULT_INITIAL_CAPACITY);}  }
class C{  public static String random(int count,int start,int end,boolean letters,boolean numbers){  return random(count,start,end,letters,numbers,null,RANDOM);}  }
class C{  public DependenceResult updateMember(final BaseType parentType,final BaseType oldMemberType,final BaseType newMemberType){  Preconditions.checkNotNull(parentType,"IE02767: Parent type can not be null.");  Preconditions.checkNotNull(oldMemberType,"IE02768: Old member type can not be null.");  Preconditions.checkNotNull(newMemberType,"IE02769: New member type can not be null.");  final ImmutableSet<BaseType> affectedTypes=determineDependentTypes(parentType);  if (affectedTypes.contains(parentType)) {    return new DependenceResult(false,affectedTypes);  } else {    deleteMember(parentType,oldMemberType);    addMember(parentType,newMemberType);    return new DependenceResult(true,affectedTypes);  }}  }
class C{  int readNext(){  current=null;  current=Chunk.read(in,readKey);  if (current == null) {    return 0;  }  return current.value.length;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof BlockContainer)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  BlockContainer that=(BlockContainer)obj;  if (!this.arrangement.equals(that.arrangement)) {    return false;  }  if (!this.blocks.equals(that.blocks)) {    return false;  }  return true;}  }
class C{  protected void loadInvoice(int C_Invoice_ID,int M_Locator_ID){  loadTableOIS(getInvoiceData(C_Invoice_ID,M_Locator_ID));}  }
class C{  public ProductIndexerImpl(final GenericDAO<Product,Long> productDao,final int queueLength,final int threadPoolSize){  this.productDao=productDao;  reindexQueue=new ArrayBlockingQueue<Long>(queueLength);  threadPool=Executors.newFixedThreadPool(threadPoolSize);}  }
class C{  public boolean isMetadataNode(DefaultMutableTreeNode node){  Object uo=node.getUserObject();  if (uo instanceof XNodeInfo) {switch (((XNodeInfo)uo).getType()) {case ATTRIBUTES:case NOTIFICATIONS:case OPERATIONS:      return true;default :    return false;}} else {return false;}}  }
class C{  void forceInsertAttributeAt(int position){  double[] newValues=new double[m_AttValues.length + 1];  System.arraycopy(m_AttValues,0,newValues,0,position);  newValues[position]=MISSING_VALUE;  System.arraycopy(m_AttValues,position,newValues,position + 1,m_AttValues.length - position);  m_AttValues=newValues;}  }
class C{  public CSV(){  this(',','"');}  }
class C{  public String toString(){  return addr.toString();}  }
class C{  public static TypedBlock[] makeBlocks(MethodInfo minfo,CodeAttribute ca,boolean optimize) throws BadBytecode {  TypedBlock[] blocks=(TypedBlock[])new Maker().make(minfo);  if (optimize && blocks.length < 2)   if (blocks.length == 0 || blocks[0].incoming == 0)   return null;  ConstPool pool=minfo.getConstPool();  boolean isStatic=(minfo.getAccessFlags() & AccessFlag.STATIC) != 0;  blocks[0].initFirstBlock(ca.getMaxStack(),ca.getMaxLocals(),pool.getClassName(),minfo.getDescriptor(),isStatic,minfo.isConstructor());  return blocks;}  }
class C{  public Switch(Context context,AttributeSet attrs){  this(context,attrs,com.android.internal.R.attr.switchStyle);}  }
class C{  public void render(Camera camera,final Matrix4 vpMatrix,final Matrix4 projMatrix,final Matrix4 vMatrix,final Matrix4 parentMatrix,Material sceneMaterial){  if (!mIsVisible && !mRenderChildrenAsBatch)   return;  Material material=sceneMaterial == null ? mMaterial : sceneMaterial;  preRender();  boolean modelMatrixWasRecalculated=onRecalculateModelMatrix(parentMatrix);  mMVMatrix.setAll(vMatrix).multiply(mMMatrix);  mMVPMatrix.setAll(vpMatrix).multiply(mMMatrix);  if (mGeometry.hasBoundingBox())   mGeometry.getBoundingBox().transform(getModelMatrix());  if (mGeometry.hasBoundingSphere())   mGeometry.getBoundingSphere().transform(getModelMatrix());  mIsInFrustum=true;  if (mFrustumTest && mGeometry.hasBoundingBox()) {    BoundingBox bbox=mGeometry.getBoundingBox();    if (!camera.getFrustum().boundsInFrustum(bbox)) {      mIsInFrustum=false;    }  }  if (!mIsContainerOnly && mIsInFrustum) {    mPMatrix=projMatrix;    if (mDoubleSided) {      GLES20.glDisable(GLES20.GL_CULL_FACE);    } else {      GLES20.glEnable(GLES20.GL_CULL_FACE);      if (mBackSided) {        GLES20.glCullFace(GLES20.GL_FRONT);      } else {        GLES20.glCullFace(GLES20.GL_BACK);        GLES20.glFrontFace(GLES20.GL_CCW);      }    }    if (mEnableBlending) {      GLES20.glEnable(GLES20.GL_BLEND);      GLES20.glBlendFunc(mBlendFuncSFactor,mBlendFuncDFactor);    }    if (!mEnableDepthTest)     GLES20.glDisable(GLES20.GL_DEPTH_TEST); else {      GLES20.glEnable(GLES20.GL_DEPTH_TEST);      GLES20.glDepthFunc(GLES20.GL_LESS);    }    GLES20.glDepthMask(mEnableDepthMask);    if (!mIsPartOfBatch) {      if (material == null) {        RajLog.e("[" + this.getClass().getName() + "] This object can't render because there's no material attached to it.");        throw new RuntimeException("This object can't render because there's no material attached to it.");      }      material.useProgram();      setShaderParams(camera);      material.bindTextures();      if (mGeometry.hasTextureCoordinates())       material.setTextureCoords(mGeometry.getTexCoordBufferInfo());      if (mGeometry.hasNormals())       material.setNormals(mGeometry.getNormalBufferInfo());      if (mMaterial.usingVertexColors())       material.setVertexColors(mGeometry.getColorBufferInfo());      material.setVertices(mGeometry.getVertexBufferInfo());    }    material.setCurrentObject(this);    if (mOverrideMaterialColor) {      material.setColor(mColor);    }    material.applyParams();    GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER,0);    material.setMVPMatrix(mMVPMatrix);    material.setModelMatrix(mMMatrix);    material.setModelViewMatrix(mMVMatrix);    if (mIsVisible) {      GLES20.glBindBuffer(GLES20.GL_ELEMENT_ARRAY_BUFFER,mGeometry.getIndexBufferInfo().bufferHandle);      GLES20.glDrawElements(mDrawingMode,mGeometry.getNumIndices(),mElementsBufferType,0);      GLES20.glBindBuffer(GLES20.GL_ELEMENT_ARRAY_BUFFER,0);    }    if (!mIsPartOfBatch && !mRenderChildrenAsBatch && sceneMaterial == null) {      material.unbindTextures();    }    material.unsetCurrentObject(this);    if (mEnableBlending) {      GLES20.glDisable(GLES20.GL_BLEND);    }    if (mDoubleSided) {      GLES20.glEnable(GLES20.GL_CULL_FACE);    } else     if (mBackSided) {      GLES20.glCullFace(GLES20.GL_BACK);    }    if (!mEnableDepthTest) {      GLES20.glEnable(GLES20.GL_DEPTH_TEST);      GLES20.glDepthFunc(GLES20.GL_LESS);    }  }  if (mShowBoundingVolume) {    if (mGeometry.hasBoundingBox())     mGeometry.getBoundingBox().drawBoundingVolume(camera,vpMatrix,projMatrix,vMatrix,mMMatrix);    if (mGeometry.hasBoundingSphere())     mGeometry.getBoundingSphere().drawBoundingVolume(camera,vpMatrix,projMatrix,vMatrix,mMMatrix);  }  for (int i=0, j=mChildren.size(); i < j; i++) {    Object3D child=mChildren.get(i);    if (mRenderChildrenAsBatch || mIsPartOfBatch) {      child.setPartOfBatch(true);    }    if (modelMatrixWasRecalculated)     child.markModelMatrixDirty();    child.render(camera,vpMatrix,projMatrix,vMatrix,mMMatrix,sceneMaterial);  }  if (mRenderChildrenAsBatch && sceneMaterial == null) {    material.unbindTextures();  }}  }
class C{  public static int fixedFromGregorian(int year,int month,int day){  int yearM1=year - 1;  return 365 * yearM1 + yearM1 / 4 - yearM1 / 100 + yearM1 / 400 + (367 * month - 362) / 12 + (month <= 2 ? 0 : isLeapYear(year) ? -1 : -2) + day;}  }
class C{  private void shutdown(){  removeListeners();  fCurrent=null;  fPreviousDelete=null;  fTextBuffer=null;  fPreservedTextBuffer=null;  disposeUndoHistory();}  }
class C{  public boolean equalsChars(String a,int ai,String b,int bi,boolean ignoreCase){  char ca=a.charAt(ai);  char cb=b.charAt(bi);  if (ignoreCase) {    ca=Character.toUpperCase(ca);    cb=Character.toUpperCase(cb);  }  return ca == cb;}  }
class C{  public InferenceResult ask(FOLKnowledgeBase KB,Sentence query){  if (!(query instanceof AtomicSentence)) {    throw new IllegalArgumentException("Only Atomic Queries are supported.");  }  FCAskAnswerHandler ansHandler=new FCAskAnswerHandler();  Literal alpha=new Literal((AtomicSentence)query);  List<Literal> newSentences=new ArrayList<Literal>();  Set<Map<Variable,Term>> answers=KB.fetch(alpha);  if (answers.size() > 0) {    ansHandler.addProofStep(new ProofStepFoChAlreadyAFact(alpha));    ansHandler.setAnswers(answers);    return ansHandler;  }  do {    newSentences.clear();    for (    Clause impl : KB.getAllDefiniteClauseImplications()) {      impl=KB.standardizeApart(impl);      for (      Map<Variable,Term> theta : KB.fetch(invert(impl.getNegativeLiterals()))) {        Literal qDelta=KB.subst(theta,impl.getPositiveLiterals().get(0));        if (!KB.isRenaming(qDelta) && !KB.isRenaming(qDelta,newSentences)) {          newSentences.add(qDelta);          ansHandler.addProofStep(impl,qDelta,theta);          theta=KB.unify(qDelta.getAtomicSentence(),alpha.getAtomicSentence());          if (null != theta) {            for (            Literal l : newSentences) {              Sentence s=null;              if (l.isPositiveLiteral()) {                s=l.getAtomicSentence();              } else {                s=new NotSentence(l.getAtomicSentence());              }              KB.tell(s);            }            ansHandler.setAnswers(KB.fetch(alpha));            return ansHandler;          }        }      }    }    for (    Literal l : newSentences) {      Sentence s=null;      if (l.isPositiveLiteral()) {        s=l.getAtomicSentence();      } else {        s=new NotSentence(l.getAtomicSentence());      }      KB.tell(s);    }  } while (newSentences.size() > 0);  return ansHandler;}  }
class C{  public ClosenessCentrality(Hypergraph<V,E> graph,Distance<V> distance){  super(graph,distance,true);}  }
class C{  public boolean flattenForms(){  return false;}  }
class C{  private void buildErrMsg(StringBuffer errMsgBuilder,Exception re,String msg){  if (errMsgBuilder.length() != 0) {    errMsgBuilder.append(", ");  }  errMsgBuilder.append(msg);  errMsgBuilder.append(", ");  errMsgBuilder.append(re.getMessage());  _log.error(msg,re);}  }
class C{  public static double[] divide(double[] v1,double[] v2){  checkLength(v1,v2.length);  double[] array=new double[v1.length];  for (int i=0; i < v1.length; i++)   array[i]=v1[i] / v2[i];  return array;}  }
class C{  public static boolean deleteSelf(){  return false;}  }
class C{  public Object eval(Reader reader) throws ScriptException {  return eval(reader,context);}  }
class C{  private BitmapUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  public boolean areAllSegmentPresent(int datasetSize){  return mPieSegmentList.size() == datasetSize;}  }
class C{  private static int extractCharCode(String s,int charIndex,boolean relaxedUnicode,StringBuilder unicode){  int len=s.length();  CharSequence subSequence=s.subSequence(charIndex,Math.min(len,charIndex + 15));  Matcher matcher;  if (relaxedUnicode) {    matcher=HEX_RELAXED.matcher(subSequence);  } else {    matcher=HEX_STRICT.matcher(subSequence);  }  if (matcher.find() || ((matcher=DECIMAL.matcher(subSequence)).find())) {    charIndex+=matcher.end() - 1;    unicode.append(matcher.group(1));  }  return charIndex;}  }
class C{  public void connect(AsyncService srcAsyncService,Messenger dstMessenger){  connect(srcAsyncService,srcAsyncService.getHandler(),dstMessenger);}  }
class C{  public static Token newString(String text,int startLine,int startColumn){  return new Token(Types.STRING,text,startLine,startColumn);}  }
class C{  @RequestMapping(value=ApiUrl.EMPLOYEE_LOGOUT,method=RequestMethod.POST) public ResponseEntity<String> logout(final HttpServletRequest request,final OAuth2Authentication authentication){  try {    final OAuth2AccessToken token=tokenStore.getAccessToken(authentication);    if (token == null)     return ApiResponse.newInstance().error(getMessage("msg.logout.unknown"));    tokenStore.removeAccessToken(token);    return ApiResponse.newInstance().success("",getMessage("msg.logout.success"));  } catch (  final Exception ex) {    LOGGER.error(EGOV_API_ERROR,ex);    return ApiResponse.newInstance().error(getMessage("server.error"));  }}  }
class C{  public GreaterEqualConstraint(Number constraintValue){  super(constraintValue);}  }
class C{  private boolean isLineStringContainedInBoundary(LineString line){  CoordinateSequence seq=line.getCoordinateSequence();  Coordinate p0=new Coordinate();  Coordinate p1=new Coordinate();  for (int i=0; i < seq.size() - 1; i++) {    seq.getCoordinate(i,p0);    seq.getCoordinate(i + 1,p1);    if (!isLineSegmentContainedInBoundary(p0,p1))     return false;  }  return true;}  }
class C{  protected void appendShortLength(int value){  append(value);}  }
class C{  public ReadOnlyValuesRaba(final int size,final byte[][] a){  this(0,size,a.length,a);}  }
class C{  public void connect(XNetInterface i){  destination=i;  connected=true;  i.addXNetListener(XNetInterface.ALL,this);}  }
class C{  public void endPreserving() throws org.xml.sax.SAXException {  m_ispreserve=m_preserves.isEmpty() ? false : m_preserves.pop();}  }
class C{  @RequestMapping(value="/SAML2/SSO/{tenant:.*}",method={RequestMethod.GET,RequestMethod.POST}) public String sso(Locale locale,@PathVariable(value="tenant") String tenant,Model model,HttpServletRequest request,HttpServletResponse response) throws IOException {  logger.info("Welcome to SP-initiated AuthnRequest handler! " + "The client locale is " + locale.toString() + ", tenant is "+ tenant);  logger.info("Request URL is " + request.getRequestURL().toString());  try {    AuthenticationFilter<AuthnRequestState> authenticator=chooseAuthenticator(request);    AuthnRequestState requestState=new AuthnRequestState(request,response,sessionManager,tenant);    processSsoRequest(locale,tenant,request,response,authenticator,requestState,messageSource,sessionManager);    model.addAttribute("tenant",tenant);    model.addAttribute("protocol","websso");    if (requestState.isChooseIDPViewRequired() != null && requestState.isChooseIDPViewRequired()) {      setupChooseIDPModel(model,locale,tenant,requestState);      return "chooseidp";    } else     if (requestState.isLoginViewRequired() != null && requestState.isLoginViewRequired()) {      setupAuthenticationModel(model,locale,tenant,request,requestState);      return "unpentry";    }  } catch (  Exception e) {    logger.error("Could not handle SAML Authentication request ",e);    sendError(locale,response,e.getMessage());  }  return null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static boolean isNCNameStart(int c){  return c < 0x10000 && (CHARS[c] & MASK_NCNAME_START) != 0;}  }
class C{  private void analyseTrimAndDebugOption(){  if (args[0].equals(OPTION_TRIM)) {    TRIM_CONTEXT=true;    firstFileIndexCorrection=1;    fileSize=fileSize - 1;    if (args[1].equals(OPTION_DEBUG)) {      DEBUG=true;      firstFileIndexCorrection=2;      fileSize=fileSize - 1;    }  } else   if (args[0].equals(OPTION_DEBUG)) {    DEBUG=true;    firstFileIndexCorrection=1;    fileSize=fileSize - 1;    if (args[1].equals(OPTION_TRIM)) {      TRIM_CONTEXT=true;      firstFileIndexCorrection=2;      fileSize=fileSize - 1;    }  }  CustomLogger.log("The file size is so :" + fileSize);}  }
class C{  public void removeStatement(String key){  setStatement(key,null);}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public static StringBuilder prefix(StringBuilder query){  return query.append("PREFIX schema: <").append(NAMESPACE).append(">\n");}  }
class C{  @LargeTest public void testPropertiesPNG() throws Exception {  final String imageItemFilename=INPUT_FILE_PATH + "IMG_640x480.png";  final int imageItemDuration=10000;  final int aspectRatio=MediaProperties.ASPECT_RATIO_4_3;  final int fileType=MediaProperties.FILE_PNG;  final int width=640;  final int height=480;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaImageItem mii=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",imageItemFilename,imageItemDuration,renderingMode);  validateImageProperties(aspectRatio,fileType,width,height,mii);}  }
class C{  @Override public DummyProjectBuilder withDescription(String description){  return this;}  }
class C{  public boolean isViewClippingEnabled(){  return viewClippingEnabled;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.263 -0500",hash_original_method="704645B9B50E78F1B3F526FB095B5A0C",hash_generated_method="D6E6AD9CBBC79DF1403EF93AA313E6B0") public void scale(float scale,Region dst){  addTaintLocal(scale);  if (dst != null)   addTaintLocal(dst.getTaintInt());}  }
class C{  public PropagatedTimesStore runRaptor(TIntIntMap accessTimes,PointSetTimes nonTransitTimes,TaskStatistics ts){  long beginCalcTime=System.currentTimeMillis();  TIntIntMap initialStops=new TIntIntHashMap(accessTimes);  TIntIntIterator initialIterator=accessTimes.iterator();  while (initialIterator.hasNext()) {    initialIterator.advance();    int stopIndex=initialIterator.key();    int accessTime=initialIterator.value();    if (accessTime <= 0) {      LOG.error("access time to stop {} is {}",stopIndex,accessTime);    }    initialStops.put(stopIndex,accessTime);  }  boolean doPropagation=targets != null;  if (propagatedTimesStore == null) {    if (doPropagation) {      propagatedTimesStore=new PropagatedTimesStore(targets.size());    } else {      propagatedTimesStore=new StaticPropagatedTimesStore(data.getStopCount());    }  }  int nTargets=targets != null ? targets.size() : data.getStopCount();  int iterations=(req.toTime - req.fromTime - DEPARTURE_STEP_SEC) / DEPARTURE_STEP_SEC + 1;  int monteCarloDraws=(int)Math.ceil((double)req.monteCarloDraws / iterations);  if (data.hasFrequencies) {    iterations*=(monteCarloDraws + 2);  }  ts.searchCount=iterations;  timesAtTargetsEachIteration=new int[iterations][nTargets];  ts.timeStep=DEPARTURE_STEP_SEC;  int[] scheduledTimesAtTargets=new int[nTargets];  Arrays.fill(scheduledTimesAtTargets,UNREACHED);  int iteration=0;  int minuteNumber=0;  for (int departureTime=req.toTime - DEPARTURE_STEP_SEC; departureTime >= req.fromTime; departureTime-=DEPARTURE_STEP_SEC) {    if (minuteNumber++ % 15 == 0) {      LOG.info("minute {}",minuteNumber);    }    final int departureTimeFinal=departureTime;    scheduleState.stream().forEach(null);    this.runRaptorScheduled(initialStops,departureTime);    if (doPropagation) {      this.doPropagation(scheduleState.get(round).bestNonTransferTimes,scheduledTimesAtTargets,departureTime);      for (int i=0; i < scheduledTimesAtTargets.length; i++) {        int nonTransitTravelTime=nonTransitTimes.getTravelTimeToPoint(i);        int nonTransitClockTime=nonTransitTravelTime + departureTime;        if (nonTransitTravelTime != UNREACHED && nonTransitClockTime < scheduledTimesAtTargets[i]) {          scheduledTimesAtTargets[i]=nonTransitClockTime;        }      }    }    if (data.hasFrequencies) {      for (int i=0; i < monteCarloDraws + 2; i++, iteration++) {        RaptorState stateCopy;        if (i == 0) {          stateCopy=this.runRaptorFrequency(departureTime,BoardingAssumption.BEST_CASE);        } else         if (i == 1) {          stateCopy=this.runRaptorFrequency(departureTime,BoardingAssumption.WORST_CASE);        } else {          offsets.randomize();          stateCopy=this.runRaptorFrequency(departureTime,BoardingAssumption.RANDOM);          includeInAverages.set(iteration);        }        int[] frequencyTimesAtTargets=timesAtTargetsEachIteration[iteration];        if (doPropagation) {          System.arraycopy(scheduledTimesAtTargets,0,frequencyTimesAtTargets,0,scheduledTimesAtTargets.length);          this.doPropagation(stateCopy.bestNonTransferTimes,frequencyTimesAtTargets,departureTime);        } else {          System.arraycopy(stateCopy.bestNonTransferTimes,0,frequencyTimesAtTargets,0,stateCopy.bestNonTransferTimes.length);        }        if (statesEachIteration != null)         statesEachIteration.add(stateCopy.deepCopy());        for (int t=0; t < frequencyTimesAtTargets.length; t++) {          if (frequencyTimesAtTargets[t] != UNREACHED)           frequencyTimesAtTargets[t]-=departureTime;        }      }    } else {      final int dt=departureTime;      final RaptorState state=scheduleState.get(round);      timesAtTargetsEachIteration[iteration]=IntStream.of(doPropagation ? scheduledTimesAtTargets : state.bestNonTransferTimes).map(null).toArray();      includeInAverages.set(iteration);      if (statesEachIteration != null)       statesEachIteration.add(state.deepCopy());      iteration++;    }    advanceToNextMinute();  }  if (iteration != iterations) {    throw new IllegalStateException("Iterations did not completely fill output array");  }  for (int it=0; it < timesAtTargetsEachIteration.length; it++) {    for (int target=0; target < timesAtTargetsEachIteration[it].length; target++) {      if (timesAtTargetsEachIteration[it][target] > req.maxTripDurationMinutes * 60) {        timesAtTargetsEachIteration[it][target]=UNREACHED;      }    }  }  long calcTime=System.currentTimeMillis() - beginCalcTime;  LOG.info("calc time {}sec",calcTime / 1000.0);  LOG.info("  propagation {}sec",totalPropagationTime / 1000.0);  LOG.info("  raptor {}sec",(calcTime - totalPropagationTime) / 1000.0);  LOG.info("    scheduled {}",scheduledSearchTime / 1000.0);  LOG.info("    frequency {}",frequencySearchTime / 1000.0);  LOG.info("  requested {} monte carlo draws, ran {}",req.monteCarloDraws,monteCarloDraws * minuteNumber);  LOG.info("{} rounds",round);  ts.propagation=(int)totalPropagationTime;  ts.transitSearch=(int)(calcTime - totalPropagationTime);  propagatedTimesStore.setFromArray(timesAtTargetsEachIteration,includeInAverages,ConfidenceCalculationMethod.MIN_MAX,req.reachabilityThreshold);  return propagatedTimesStore;}  }
class C{  public Action(String... permissions){  this.permissions=permissions;}  }
class C{  public SnmpCachedData(long lastUpdated,TreeMap<SnmpOid,Object> indexMap,boolean b){  final int size=indexMap.size();  this.lastUpdated=lastUpdated;  this.indexes=new SnmpOid[size];  this.datas=new Object[size];  if (b) {    indexMap.keySet().toArray(this.indexes);    indexMap.values().toArray(this.datas);  } else   indexMap.values().toArray(this.datas);}  }
class C{  public Schema(int ncols){  m_names=new String[ncols];  m_types=new Class[ncols];  m_dflts=new Object[ncols];  m_size=0;  m_locked=false;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGraphPackage.REACTION__TRIGGER:    setTrigger((Trigger)newValue);  return;case SGraphPackage.REACTION__EFFECT:setEffect((Effect)newValue);return;case SGraphPackage.REACTION__PROPERTIES:getProperties().clear();getProperties().addAll((Collection<? extends ReactionProperty>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public Builder threadFactory(ThreadFactory threadFactory){  this.threadFactory=threadFactory;  return this;}  }
class C{  public Insert(int playlistId,int position,PlaylistType.Item item){  super();  addParameterToRequest("playlistid",playlistId);  addParameterToRequest("position",position);  addParameterToRequest("item",item);}  }
class C{  public void startDocument() throws SAXException {  try {    if (null == m_resultContentHandler)     createResultContentHandler(m_result);  } catch (  TransformerException te) {    throw new SAXException(te.getMessage(),te);  }  m_flushedStartDoc=false;  m_foundFirstElement=false;}  }
class C{  protected void addAnchor(AnchorURL anchor){  this.anchors.add(anchor);  this.fireAddAnchor(anchor.toNormalform(false));}  }
class C{  public int lowDateTime(){  final int low=(int)(ticks);  return low;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:33.811 -0500",hash_original_method="C26DE5726C89C8A41E4FE63D33F7E7C2",hash_generated_method="A717FDEA4592ACC45D2C3115C70CF958") @Override protected void detach(){  super.detach();  poolEntry=null;}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  public static boolean isCompleted(int status){  return isSuccess(status) || isFailure(status);}  }
class C{  public MissingResourceException(String s,String className,String key){  super(s);  this.className=className;  this.key=key;}  }
class C{  public Source<Character> basicLatinCharacters(){  return Compositions.weightWithValues(Characters.ofCharacters(BASIC_LATIN_FIRST_CODEPOINT,BASIC_LATIN_LAST_CODEPOINT),LARGEST_LATIN_CHARACTER,SMALLEST_LATIN_CHARACTER);}  }
class C{  public void focusLost(FocusEvent e){  m_setting=true;  try {    String clear=getText();    if (clear.length() > m_fieldLength)     clear=clear.substring(0,m_fieldLength);    fireVetoableChange(m_columnName,m_oldText,clear);  } catch (  PropertyVetoException pve) {  }  m_setting=false;  m_infocus=false;  setText(getText());}  }
class C{  private void initialize(){  if (selection != null && selection.isEmpty() == false && selection instanceof IStructuredSelection) {    final IStructuredSelection ssel=(IStructuredSelection)selection;    if (ssel.size() > 1) {      return;    }    final Object obj=ssel.getFirstElement();    if (obj instanceof IResource) {      IContainer container;      if (obj instanceof IContainer) {        container=(IContainer)obj;      } else {        container=((IResource)obj).getParent();      }      containerText.setText(container.getFullPath().toString());    }  }  fileText.setText("new.gaml");}  }
class C{  void incrementHue(boolean positive){  float hue=triangle.getGTKColorChooserPanel().getHue();  if (positive) {    hue+=1.0f / 360.0f;  } else {    hue-=1.0f / 360.0f;  }  if (hue > 1) {    hue-=1;  } else   if (hue < 0) {    hue+=1;  }  getGTKColorChooserPanel().setHue(hue,true);}  }
class C{  public JSONObject put(String key,Collection<Object> value) throws JSONException {  this.put(key,new JSONArray(value));  return this;}  }
class C{  private boolean isModelUseful(ContingencyMatrix cm){  for (int row=0; row < cm.getNumberOfPredictions(); row++) {    for (int col=0; col < cm.getNumberOfClasses(); col++) {      if (Math.abs(cm.getLift(row,col) - 1) > MIN_ADVANTAGE) {        return true;      }    }  }  return false;}  }
class C{  private void createShaders(){  if (!mIsDirty)   return;  if (mCustomVertexShader == null && mCustomFragmentShader == null) {    List<ATexture> diffuseTextures=null;    List<ATexture> normalMapTextures=null;    List<ATexture> envMapTextures=null;    List<ATexture> skyTextures=null;    List<ATexture> specMapTextures=null;    List<ATexture> alphaMapTextures=null;    boolean hasCubeMaps=false;    boolean hasVideoTexture=false;    for (int i=0; i < mTextureList.size(); i++) {      ATexture texture=mTextureList.get(i);switch (texture.getTextureType()) {case VIDEO_TEXTURE:        hasVideoTexture=true;case DIFFUSE:case RENDER_TARGET:      if (diffuseTextures == null)       diffuseTextures=new ArrayList<ATexture>();    diffuseTextures.add(texture);  break;case NORMAL:if (normalMapTextures == null) normalMapTextures=new ArrayList<ATexture>();normalMapTextures.add(texture);break;case CUBE_MAP:hasCubeMaps=true;case SPHERE_MAP:boolean isSkyTexture=false;boolean isEnvironmentTexture=false;if (texture.getClass() == SphereMapTexture.class) {isSkyTexture=((SphereMapTexture)texture).isSkyTexture();isEnvironmentTexture=((SphereMapTexture)texture).isEnvironmentTexture();} else if (texture.getClass() == CubeMapTexture.class) {isSkyTexture=((CubeMapTexture)texture).isSkyTexture();isEnvironmentTexture=((CubeMapTexture)texture).isEnvironmentTexture();}if (isSkyTexture) {if (skyTextures == null) skyTextures=new ArrayList<>();skyTextures.add(texture);} else if (isEnvironmentTexture) {if (envMapTextures == null) envMapTextures=new ArrayList<>();envMapTextures.add(texture);}break;case SPECULAR:if (specMapTextures == null) specMapTextures=new ArrayList<>();specMapTextures.add(texture);break;case ALPHA:if (alphaMapTextures == null) alphaMapTextures=new ArrayList<>();alphaMapTextures.add(texture);break;default :break;}}mVertexShader=new VertexShader();mVertexShader.enableTime(mTimeEnabled);mVertexShader.hasCubeMaps(hasCubeMaps);mVertexShader.hasSkyTexture(skyTextures != null && skyTextures.size() > 0);mVertexShader.useVertexColors(mUseVertexColors);mVertexShader.initialize();mFragmentShader=new FragmentShader();mFragmentShader.enableTime(mTimeEnabled);mFragmentShader.hasCubeMaps(hasCubeMaps);mFragmentShader.initialize();if (diffuseTextures != null && diffuseTextures.size() > 0) {DiffuseTextureFragmentShaderFragment fragment=new DiffuseTextureFragmentShaderFragment(diffuseTextures);mFragmentShader.addShaderFragment(fragment);}if (normalMapTextures != null && normalMapTextures.size() > 0) {NormalMapFragmentShaderFragment fragment=new NormalMapFragmentShaderFragment(normalMapTextures);mFragmentShader.addShaderFragment(fragment);}if (envMapTextures != null && envMapTextures.size() > 0) {EnvironmentMapFragmentShaderFragment fragment=new EnvironmentMapFragmentShaderFragment(envMapTextures);mFragmentShader.addShaderFragment(fragment);}if (skyTextures != null && skyTextures.size() > 0) {SkyTextureFragmentShaderFragment fragment=new SkyTextureFragmentShaderFragment(skyTextures);mFragmentShader.addShaderFragment(fragment);}if (hasVideoTexture) mFragmentShader.addPreprocessorDirective("#extension GL_OES_EGL_image_external : require");checkForPlugins(PluginInsertLocation.PRE_LIGHTING);if (mLightingEnabled && mLights != null && mLights.size() > 0) {mVertexShader.setLights(mLights);mFragmentShader.setLights(mLights);mLightsVertexShaderFragment=new LightsVertexShaderFragment(mLights);mLightsVertexShaderFragment.setAmbientColor(mAmbientColor);mLightsVertexShaderFragment.setAmbientIntensity(mAmbientIntensity);mVertexShader.addShaderFragment(mLightsVertexShaderFragment);mFragmentShader.addShaderFragment(new LightsFragmentShaderFragment(mLights));checkForPlugins(PluginInsertLocation.PRE_DIFFUSE);if (mDiffuseMethod != null) {mDiffuseMethod.setLights(mLights);IShaderFragment fragment=mDiffuseMethod.getVertexShaderFragment();if (fragment != null) mVertexShader.addShaderFragment(fragment);fragment=mDiffuseMethod.getFragmentShaderFragment();mFragmentShader.addShaderFragment(fragment);}checkForPlugins(PluginInsertLocation.PRE_SPECULAR);if (mSpecularMethod != null) {mSpecularMethod.setLights(mLights);mSpecularMethod.setTextures(specMapTextures);IShaderFragment fragment=mSpecularMethod.getVertexShaderFragment();if (fragment != null) mVertexShader.addShaderFragment(fragment);fragment=mSpecularMethod.getFragmentShaderFragment();if (fragment != null) mFragmentShader.addShaderFragment(fragment);}}checkForPlugins(PluginInsertLocation.PRE_ALPHA);if (alphaMapTextures != null && alphaMapTextures.size() > 0) {AlphaMapFragmentShaderFragment fragment=new AlphaMapFragmentShaderFragment(alphaMapTextures);mFragmentShader.addShaderFragment(fragment);}checkForPlugins(PluginInsertLocation.PRE_TRANSFORM);checkForPlugins(PluginInsertLocation.POST_TRANSFORM);mVertexShader.buildShader();mFragmentShader.buildShader();} else {mVertexShader=mCustomVertexShader;mFragmentShader=mCustomFragmentShader;if (mVertexShader.needsBuild()) mVertexShader.initialize();if (mFragmentShader.needsBuild()) mFragmentShader.initialize();if (mVertexShader.needsBuild()) mVertexShader.buildShader();if (mFragmentShader.needsBuild()) mFragmentShader.buildShader();}if (RajLog.isDebugEnabled()) {RajLog.d("-=-=-=- VERTEX SHADER -=-=-=-");RajLog.d(mVertexShader.getShaderString());RajLog.d("-=-=-=- FRAGMENT SHADER -=-=-=-");RajLog.d(mFragmentShader.getShaderString());}mProgramHandle=createProgram(mVertexShader.getShaderString(),mFragmentShader.getShaderString());if (mProgramHandle == 0) {mIsDirty=false;return;}mVertexShader.setLocations(mProgramHandle);mFragmentShader.setLocations(mProgramHandle);for (int i=0; i < mTextureList.size(); i++) {ATexture texture=mTextureList.get(i);setTextureParameters(texture);}mIsDirty=false;}  }
class C{  private void updateIndexColumnButtons(){  indexRemoveButton.setEnabled(false);  indexUpButton.setEnabled(false);  indexDownButton.setEnabled(false);  int index=selectedColumns.getSelectionIndex();  if (index >= 0) {    indexRemoveButton.setEnabled(true);    if (index > 0) {      indexUpButton.setEnabled(true);    } else     if (index < selectedColumns.getItemCount() - 1) {      indexDownButton.setEnabled(true);    }  }}  }
class C{  public void registerAcelaNode(AcelaNode node){synchronized (this) {    super.registerNode(node);    setMustInit(node,false);    if (node.getNumOutputBitsPerCard() == 0) {      node.setStartingOutputAddress(-1);      node.setEndingOutputAddress(-1);    } else {      if (currentOutputAddress == -1) {        currentOutputAddress=0;      }      node.setStartingOutputAddress(currentOutputAddress);      currentOutputAddress=currentOutputAddress + node.getNumOutputBitsPerCard() - 1;      node.setEndingOutputAddress(currentOutputAddress);      currentOutputAddress=currentOutputAddress + 1;    }    if (node.getNumSensorBitsPerCard() == 0) {      node.setStartingSensorAddress(-1);      node.setEndingSensorAddress(-1);    } else {      if (currentSensorAddress == -1) {        currentSensorAddress=0;      }      node.setStartingSensorAddress(currentSensorAddress);      currentSensorAddress=currentSensorAddress + node.getNumSensorBitsPerCard() - 1;      node.setEndingSensorAddress(currentSensorAddress);      currentSensorAddress=currentSensorAddress + 1;    }  }}  }
class C{  public TodoFilter(){  setName("");  myTodoPatterns=new HashSet<TodoPattern>(1);}  }
class C{  private void db(String val){  VM.sysWrite("IRGEN " + bcodes.getDeclaringClass() + "."+ gc.getMethod().getName()+ ":"+ val+ "\n");}  }
class C{  public static Test suite(){  return (new TestSuite(RenderKitsITCase.class));}  }
class C{  public DistributedLogClientBuilder periodicDumpOwnershipCache(boolean enabled){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setPeriodicDumpOwnershipCacheEnabled(enabled);  return newBuilder;}  }
class C{  @Override public void manipulateChildElements(List<HierarchyWrapper> children){  for (int i=0; i < children.size(); i++) {    HierarchyWrapper wrapperImpl=children.get(i);    final Wrapper<Element> wrapper=wrapperImpl.getElementContent();    if (wrapper != null && wrapper.isSortable()) {      insertChildInSortedOrder(children,i,wrapperImpl,wrapper);    }  }}  }
class C{  public final static boolean isLowercaseAlpha(char c){  return (c >= 'a') && (c <= 'z');}  }
class C{  public void add(DSAKeyValue dsakeyvalue){  this.add(new KeyValue(this.doc,dsakeyvalue));}  }
class C{  public JSONArray put(int value){  this.put(new Integer(value));  return this;}  }
class C{  public boolean hasFastMode(){  return getChangeSet() == null;}  }
class C{  public ZDT1(int numberOfVariables){  super(numberOfVariables);}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  float halfShapeWidth=SHAPE_WIDTH / 2;  canvas.drawRect(x,y - halfShapeWidth,x + SHAPE_WIDTH,y + halfShapeWidth,paint);}  }
class C{  @Override public void updateTimestamp(int columnIndex,Timestamp x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateTimestamp(" + columnIndex + ", x);");    }    update(columnIndex,x == null ? (Value)ValueNull.INSTANCE : ValueTimestamp.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void writeEntry(PreparedStatement stmt,SearchIndexEntry entry) throws SQLException {  stmt.setString(1,entry.getSearchTerm());  stmt.setString(2,String.valueOf(entry.getEntityType()));  stmt.setString(3,entry.getEntityName());  stmt.setInt(4,entry.getSearchScore());  stmt.addBatch();}  }
class C{  public static void migrateTabs(boolean toDocumentMode,final Activity activity,boolean terminate){  StrictMode.ThreadPolicy oldPolicy=StrictMode.allowThreadDiskReads();  StrictMode.allowThreadDiskWrites();  try {    int terminateMode=terminate ? FINALIZE_MODE_RESTART_APP : FINALIZE_MODE_FINISH_ACTIVITY;    if (toDocumentMode) {      migrateTabsFromClassicToDocument(activity,terminateMode);    } else {      migrateTabsFromDocumentToClassic(activity,terminateMode);    }  }  finally {    StrictMode.setThreadPolicy(oldPolicy);  }}  }
class C{  public static int validateGeoJson(InputStream is){  int n=0;  JsonFactory f=new JsonFactory();  try {    JsonParser jp=f.createParser(is);    JsonToken current=jp.nextToken();    if (current != JsonToken.START_OBJECT) {      LOG.error("Root of OTPA GeoJSON should be a JSON object.");      return -1;    }    while (jp.nextToken() != JsonToken.END_OBJECT) {      String key=jp.getCurrentName();      current=jp.nextToken();      if (key.equals("features")) {        if (current != JsonToken.START_ARRAY) {          LOG.error("Error: GeoJSON features are not in an array.");          return -1;        }        while (jp.nextToken() != JsonToken.END_ARRAY) {          n+=1;          jp.skipChildren();        }      } else {        jp.skipChildren();      }    }    if (n == 0)     return -1;    return n;  } catch (  Exception ex) {    LOG.error("Exception while validating GeoJSON: {}",ex);    return -1;  }}  }
class C{  public static boolean isEmailAddress(String address){  if (TextUtils.isEmpty(address)) {    return false;  }  String s=extractAddrSpec(address);  Matcher match=Patterns.EMAIL_ADDRESS.matcher(s);  return match.matches();}  }
class C{  public synchronized Class<?> loadClassGarOnly(String name) throws ClassNotFoundException {  Class<?> cls=findLoadedClass(name);  if (cls == null) {    try {      cls=findClass(name);    } catch (    ClassNotFoundException e) {      throw e;    }catch (    Exception e) {      throw new ClassNotFoundException("Failed to load class due to unexpected error: " + name,e);    }  }  return cls;}  }
class C{  public String arrayToString(List list){  StringBuffer result=new StringBuffer();  if (list != null && list.size() > 0) {    Iterator iter=list.iterator();    while (iter.hasNext()) {      result.append(iter.next());      result.append(" ");    }    result.deleteCharAt(result.length() - 1);  }  return result.toString();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public NamedWindowConsumerLatchWait(NamedWindowConsumerLatchFactory factory){  super(null,null);  this.factory=factory;  isCompleted=true;  earlier=null;}  }
class C{  public void save(File file) throws IOException {  writeAttributeWeights(file,Tools.getDefaultEncoding());}  }
class C{  public TriggerOption accumulatingFiredPanes(){  this.accumulationMode=AccumulationMode.ACCUMULATING;  return this;}  }
class C{  public OutputStream openOutputStream(Uri uri,boolean append) throws IOException {  assertBackgroundThread();switch (getUriType(uri)) {case URI_TYPE_FILE:{      File localFile=new File(uri.getPath());      File parent=localFile.getParentFile();      if (parent != null) {        parent.mkdirs();      }      return new FileOutputStream(localFile,append);    }case URI_TYPE_CONTENT:case URI_TYPE_RESOURCE:{    AssetFileDescriptor assetFd=contentResolver.openAssetFileDescriptor(uri,append ? "wa" : "w");    return assetFd.createOutputStream();  }}throw new FileNotFoundException("URI not supported by CordovaResourceApi: " + uri);}  }
class C{  public static <S extends HasFilterChangedHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    FilterChangedEvent event=new FilterChangedEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public static String extractCollectionFromPath(String path){  String extractedCollectionName=null;  String pathModified=removeFromEndOfString(path,SLASH);  String[] pathSegments=pathModified.split("/");  if (pathSegments.length > 0) {    extractedCollectionName=pathSegments[pathSegments.length - 1];  }  return extractedCollectionName;}  }
class C{  public void testFieldDocReverse() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(newStringField("value","foo",Field.Store.NO));  writer.addDocument(doc);  doc=new Document();  doc.add(newStringField("value","bar",Field.Store.NO));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField(null,SortField.Type.DOC,true));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(2,td.totalHits);  assertEquals(1,td.scoreDocs[0].doc);  assertEquals(0,td.scoreDocs[1].doc);  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static int StringStartsWith(String value,String prefix,int start){  int len=Math.min(prefix.length(),value.length());  ConstantPoolManager.getInstance().addDynamicConstant(prefix + value);  return StringEquals(value.substring(start,Math.min(start + len,value.length())),prefix);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.854 -0500",hash_original_method="4695ACF3E76D112BC6AF0E9543CB0BFB",hash_generated_method="26219DFEC35E0FC3E1128B7D5373CEE0") private List<Runnable> drainQueue(){  BlockingQueue<Runnable> q=workQueue;  List<Runnable> taskList=new ArrayList<Runnable>();  q.drainTo(taskList);  if (!q.isEmpty()) {    for (    Runnable r : q.toArray(new Runnable[0])) {      if (q.remove(r))       taskList.add(r);    }  }  return taskList;}  }
class C{  private int monthLength(int month,int gregorianYear){  return CalendarUtils.isGregorianLeapYear(gregorianYear) ? GregorianCalendar.LEAP_MONTH_LENGTH[month] : GregorianCalendar.MONTH_LENGTH[month];}  }
class C{  WindowsPathType type(){  return type;}  }
class C{  public boolean isNominal(){  if (getInputFormat() == null) {    return false;  } else {    return getInputFormat().attribute(m_AttIndex.getIndex()).isNominal();  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.928 -0500",hash_original_method="6A79DB871F5C4E97C4452F0A1C04756A",hash_generated_method="F8C3AE05EF7B3B150E7A2CC92E85E9EF") public ViewPropertyAnimator translationX(float value){  animateProperty(TRANSLATION_X,value);  return this;}  }
class C{  public void hide(boolean animate){  hide(animate,fadeOut);}  }
class C{  protected void writeLSD() throws IOException {  writeShort(width);  writeShort(height);  out.write((0x80 | 0x70 | 0x00| palSize));  out.write(0);  out.write(0);}  }
class C{  public boolean equalsIgnoreCase(StrBuilder other){  if (this == other) {    return true;  }  if (this.size != other.size) {    return false;  }  char thisBuf[]=this.buffer;  char otherBuf[]=other.buffer;  for (int i=size - 1; i >= 0; i--) {    char c1=thisBuf[i];    char c2=otherBuf[i];    if (c1 != c2 && Character.toUpperCase(c1) != Character.toUpperCase(c2)) {      return false;    }  }  return true;}  }
class C{  public Not(){  super(Boolean.class,Boolean.class);}  }
class C{  public IOTask<DataFile> loadTask(SaveFile saveFile){  log.debug(null);  return FS.<DataFile>readDataTask(saveDir() + saveFile.getName() + DATA_FILE_EXT);}  }
class C{  public PaymentLineImpl(final String skuCode,final String skuName,final BigDecimal quantity,final BigDecimal unitPrice,final BigDecimal taxAmount){  this.skuName=skuName;  this.skuCode=skuCode;  this.quantity=quantity;  this.unitPrice=unitPrice;  this.taxAmount=taxAmount;  shipment=false;}  }
class C{  public img(String src,String name){  setSrc(src);  setName(name);}  }
class C{  public void testSendWhileClosed() throws Exception {  connection2=createConnection();  connection2.setClientID("test");  connection2.start();  session2=connection2.createSession(false,Session.AUTO_ACKNOWLEDGE);  producer2=session2.createProducer(null);  producer2.setDeliveryMode(deliveryMode);  producerDestination2=session2.createTopic(getProducerSubject() + "2");  Thread.sleep(1000);  consumeSession2=connection2.createSession(false,Session.AUTO_ACKNOWLEDGE);  consumerDestination2=session2.createTopic(getConsumerSubject() + "2");  consumer2=consumeSession2.createDurableSubscriber((Topic)consumerDestination2,getName());  Thread.sleep(1000);  consumer2.close();  TextMessage message=session2.createTextMessage("test");  message.setStringProperty("test","test");  message.setJMSType("test");  producer2.send(producerDestination2,message);  LOG.info("Creating durable consumer");  consumer2=consumeSession2.createDurableSubscriber((Topic)consumerDestination2,getName());  Message msg=consumer2.receive(1000);  assertNotNull(msg);  assertEquals(((TextMessage)msg).getText(),"test");  assertEquals(msg.getJMSType(),"test");  assertEquals(msg.getStringProperty("test"),"test");  connection2.stop();  connection2.close();}  }
class C{  public JSONWriter value(double d) throws JSONException {  return this.value(new Double(d));}  }
class C{  public static String replaceParametersWithQuestionMarks(String statement){  if (statement == null) {    return null;  }  String result="";  int i=0;  int len=statement.length();  char last='\0';  while (i < len) {    char c=statement.charAt(i);    if (c == '$') {      last=c;      i++;      continue;    }    if ((last == '$') && (c >= '0') && (c <= '9')) {      i++;      while ((i < len) && (Character.isDigit(statement.charAt(i)))) {        i++;      }      last='\0';      c='?';      i--;    }    result+=c;    i++;  }  return result;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static BufferedImage createCompatibleTranslucentImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,Transparency.TRANSLUCENT);}  }
class C{  public DrmRights(String rightsFilePath,String mimeType){  File file=new File(rightsFilePath);  instantiate(file,mimeType);}  }
class C{  private void update(EnumerationContext ctx){  if (ctx.computeStates.size() == 0) {    logInfo("No compute states available for update");    ctx.subStage=EnumerationSubStages.CREATE;    handleSubStage(ctx);    return;  }  Iterator<Entry<String,ComputeState>> iterator=ctx.computeStates.entrySet().iterator();  AtomicInteger numOfUpdates=new AtomicInteger(ctx.computeStates.size());  while (iterator.hasNext()) {    Entry<String,ComputeState> csEntry=iterator.next();    ComputeState computeState=csEntry.getValue();    ctx.computeStatesForPatching.put(csEntry.getKey(),computeState);    VirtualMachine virtualMachine=ctx.virtualMachines.get(csEntry.getKey());    iterator.remove();    updateHelper(ctx,computeState,virtualMachine,numOfUpdates);  }}  }
class C{  private void addInteresado(HttpServletRequest request,HttpSession session){  ArrayList interesados=(ArrayList)WebUtils.getOrCreateSessionAttribute(session,INTERESADOS,ArrayList.class);  String id=WebUtils.findParameterValue(request,"tercero.id");  TerceroValidadoVO terceroValidadoVO=getTercerosDelegate().retrieve(id);  InteresadoVO interesado=new InteresadoVO();  interesado.setId(String.valueOf(interesados.size()));  interesado.setOrden(interesados.size());  interesado.setTercero(terceroValidadoVO);  BaseDireccionVO direccionNotificacion=getDireccionNotificacion(terceroValidadoVO);  interesado.setDireccionNotificacion(direccionNotificacion);  InteresadoVO inter=null;  if (null != (inter=(InteresadoVO)CollectionUtils.find(interesados,new BeanPropertyValueEqualsPredicate("tercero.id",id)))) {    interesado.setId(inter.getId());    interesado.setRepresentante(inter.getRepresentante());    interesados.set(Integer.valueOf(interesado.getId()),interesado);  } else {    interesados.add(interesado);  }  WebUtils.setSessionAttribute(request,INTERESADOS,interesados);}  }
class C{  public boolean isShowTickMarks(){  return mShowTickMarks;}  }
class C{  private void markSubroutines(){  BitSet anyvisited=new BitSet();  markSubroutineWalk(mainSubroutine,0,anyvisited);  for (Iterator<Map.Entry<LabelNode,BitSet>> it=subroutineHeads.entrySet().iterator(); it.hasNext(); ) {    Map.Entry<LabelNode,BitSet> entry=it.next();    LabelNode lab=entry.getKey();    BitSet sub=entry.getValue();    int index=instructions.indexOf(lab);    markSubroutineWalk(sub,index,anyvisited);  }}  }
class C{  public void testUpdate3(){  int newValue1=-1;  int newValue2=-2;  String updateQuery="UPDATE " + DatabaseCreator.TEST_TABLE1 + " SET field2="+ newValue1+ ", field3="+ newValue2;  try {    int num=statement.executeUpdate(updateQuery);    assertEquals("Not all records in the database were updated",numberOfRecords,num);    String selectQuery="SELECT field2, field3 FROM " + DatabaseCreator.TEST_TABLE1;    ResultSet result=statement.executeQuery(selectQuery);    while (result.next()) {    }    result.close();  } catch (  SQLException e) {    fail("Unexpected exception" + e.getMessage());  }}  }
class C{  public DoubleMatrix1D assign(double value){  if (this.isNoView && value == 0)   this.elements.clear(); else   super.assign(value);  return this;}  }
class C{  static void dumpTestThreads(){  ThreadMXBean threadMXBean=ManagementFactory.getThreadMXBean();  System.err.println("------ stacktrace dump start ------");  for (  ThreadInfo info : threadMXBean.dumpAllThreads(true,true)) {    String name=info.getThreadName();    if ("Signal Dispatcher".equals(name))     continue;    if ("Reference Handler".equals(name) && info.getLockName().startsWith("java.lang.ref.Reference$Lock"))     continue;    if ("Finalizer".equals(name) && info.getLockName().startsWith("java.lang.ref.ReferenceQueue$Lock"))     continue;    if ("process reaper".equals(name))     continue;    if (name != null && name.startsWith("ForkJoinPool.commonPool-worker"))     continue;    System.err.print(info);  }  System.err.println("------ stacktrace dump end ------");}  }
class C{  @Benchmark public String findBaseline(){  return getRandomClassName();}  }
class C{  private static void swap(double x[],int a,int b){  double t=x[a];  x[a]=x[b];  x[b]=t;}  }
class C{  public N4MethodDeclaration createN4MethodDeclaration(){  N4MethodDeclarationImpl n4MethodDeclaration=new N4MethodDeclarationImpl();  return n4MethodDeclaration;}  }
class C{  public static void copy(byte[] src,int srcOffset,ByteBuffer dest,int destOffset,int length){  long destAddress=destOffset;  Object destBase=null;  if (dest.isDirect()) {    destAddress=destAddress + ((DirectBuffer)dest).address();  } else {    destAddress=destAddress + BYTE_ARRAY_BASE_OFFSET + dest.arrayOffset();    destBase=dest.array();  }  long srcAddress=srcOffset + BYTE_ARRAY_BASE_OFFSET;  theUnsafe.copyMemory(src,srcAddress,destBase,destAddress,length);}  }
class C{  public void jump(String jumpLabel) throws IOException {  writeJump(jumpLabel,JUMP);}  }
class C{  protected Map<String,String> parseValues(String text){  Map<String,String> data=new HashMap<String,String>();  StringTokenizer s=new StringTokenizer(text," =\'\"",true);  while (s.hasMoreTokens()) {    String name=getName(s);    if (s.hasMoreTokens()) {      String value=getValue(s);      data.put(name,value);    }  }  return data;}  }
class C{  public boolean hasReachedAchievement(String identifier){  if (getAchievements() != null) {    return getAchievements().contains(identifier);  } else {    return false;  }}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  java.util.Vector vnames=sroot.getComposeState().getVariableNames();  if (null != m_name_atv)   m_name_atv.fixupVariables(vnames,sroot.getComposeState().getGlobalsSize());}  }
class C{  public EnumVariableValue(){}  }
class C{  public void run(){  analysis.log("CorpusLoader thread started: will wake up every " + BayesianAnalysis.CORPUS_RELOAD_INTERVAL + " ms");  try {    Thread.sleep(BayesianAnalysis.CORPUS_RELOAD_INTERVAL);    while (true) {      if (analysis.getLastCorpusLoadTime() < JDBCBayesianAnalyzer.getLastDatabaseUpdateTime()) {        analysis.log("Reloading Corpus ...");        try {          analysis.loadData(analysis.datasource.getConnection());          analysis.log("Corpus reloaded");        } catch (        java.sql.SQLException se) {          analysis.log("SQLException: ",se);        }      }      if (Thread.interrupted()) {        break;      }      Thread.sleep(BayesianAnalysis.CORPUS_RELOAD_INTERVAL);    }  } catch (  InterruptedException ex) {    interrupt();  }}  }
class C{  public double error(double result,double expectedResult){  double delta=Math.abs(result - expectedResult);  if (!(delta < BIG_NUMBER))   delta=BIG_NUMBER; else   if (delta < PROBABLY_ZERO)   delta=0.0;  return delta;}  }
class C{  private static byte[] copyOfRange(byte[] from,int start,int end){  int length=end - start;  byte[] result=new byte[length];  System.arraycopy(from,start,result,0,length);  return result;}  }
class C{  @SuppressWarnings("unchecked") public AmqpMessage(AmqpReceiver receiver,Message message,Delivery delivery){  this.receiver=receiver;  this.message=message;  this.delivery=delivery;  if (message.getMessageAnnotations() != null) {    messageAnnotationsMap=message.getMessageAnnotations().getValue();  }  if (message.getApplicationProperties() != null) {    applicationPropertiesMap=message.getApplicationProperties().getValue();  }  if (message.getDeliveryAnnotations() != null) {    deliveryAnnotationsMap=message.getDeliveryAnnotations().getValue();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:59.709 -0500",hash_original_method="A41710B20845F3ACFCFCC726F9248A81",hash_generated_method="84B622DEBBBB9D20E9EF8071DC92C693") public static byte[] ipStrToBytes(String ip) throws IOException {  if (!InetAddress.isNumeric(ip)) {    throw new IOException("Not an IP address: " + ip);  }  return InetAddress.getByName(ip).getAddress();}  }
class C{  public Input(int bufferSize){  this.capacity=bufferSize;  buffer=new byte[bufferSize];}  }
class C{  private int measureWidth(int measureSpec){  int result=0;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=IMAGE_WIDTH + MAX_TEXT_WIDTH + TOAST_HEIGHT;    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public int countLinesInFile(String filename) throws IOException {  InputStream is=new BufferedInputStream(new FileInputStream(filename));  try {    byte[] c=new byte[1024];    int count=0;    int readChars=0;    while ((readChars=is.read(c)) != -1) {      for (int i=0; i < readChars; ++i) {        if (c[i] == '\n') {          ++count;        }      }    }    return count;  }  finally {    is.close();  }}  }
class C{  private void writeAttributes(Attributes atts) throws SAXException {  int len=atts.getLength();  for (int i=0; i < len; i++) {    char ch[]=atts.getValue(i).toCharArray();    write(' ');    writeName(atts.getURI(i),atts.getLocalName(i),atts.getQName(i),false);    if (htmlMode && booleanAttribute(atts.getLocalName(i),atts.getQName(i),atts.getValue(i)))     break;    write("=\"");    writeEsc(ch,0,ch.length,true);    write('"');  }}  }
class C{  public NodeTypeDescription clone(){  NodeTypeDescription result=new NodeTypeDescription();  result.TypeDefinitionNode=TypeDefinitionNode;  result.IncludeSubTypes=IncludeSubTypes;  if (DataToReturn != null) {    result.DataToReturn=new QueryDataDescription[DataToReturn.length];    for (int i=0; i < DataToReturn.length; i++)     result.DataToReturn[i]=DataToReturn[i].clone();  }  return result;}  }
class C{  @EventHandler public void onPlayerQuit(PlayerQuitEvent event){  removePlayer(event.getPlayer());}  }
class C{  public static void illegalCode(Exception e,String methodName,String className,String path){  throw new IllegalCodeException(MSG.INSTANCE.message(nullPointerPath,methodName,className,path,e.getClass().getSimpleName(),"" + e.getMessage()));}  }
class C{  public String toShortString(){  return parentStream.getName() + "." + getName();}  }
class C{  public int next(){  int node=_currentNode;  int expType;  int nodeType=_nodeType;  int startID=_startNodeID;  if (nodeType >= DTM.NTYPES) {    while (node != NULL && node != startID && _exptype(node) != nodeType) {      node=_nextsib(node);    }  } else {    while (node != NULL && node != startID) {      expType=_exptype(node);      if (expType < DTM.NTYPES) {        if (expType == nodeType) {          break;        }      } else {        if (m_expandedNameTable.getType(expType) == nodeType) {          break;        }      }      node=_nextsib(node);    }  }  if (node == DTM.NULL || node == _startNodeID) {    _currentNode=NULL;    return NULL;  } else {    _currentNode=_nextsib(node);    return returnNode(makeNodeHandle(node));  }}  }
class C{  public void renameDocument(int docId,String name) throws Exception {  m_fdr.getDocumentTree().renameDocument(docId,name);}  }
class C{  private static void clearNetwork(String ssid){  List<WifiConfiguration> configs=mManager.getConfiguredNetworks();  for (  WifiConfiguration c : configs) {    if (c.SSID.contains(ssid)) {      mManager.removeNetwork(c.networkId);    }  }}  }
class C{  public static boolean withinClassOrInterface(Declaration decl){  return ModelUtil.withinClassOrInterface(decl);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  String pre="    ";  int idx=0;  for (int i=0; i < 5; i++) {    sb.append(pre);    for (int j=0; j <= i; j++) {      if (filled[idx++]) {        sb.append('*');      } else {        sb.append('.');      }      sb.append(' ');    }    sb.append('\n');    if (pre.length() != 0) {      pre=pre.substring(1);    }  }  return sb.toString();}  }
class C{  private void reportProgress(State state,InnerState innerState){  long now=System.currentTimeMillis();  if (innerState.mBytesSoFar - innerState.mBytesNotified > Constants.MIN_PROGRESS_STEP && now - innerState.mTimeLastNotification > Constants.MIN_PROGRESS_TIME) {    mInfo.mCurrentBytes=innerState.mBytesSoFar;    mDB.updateDownloadCurrentBytes(mInfo);    innerState.mBytesNotified=innerState.mBytesSoFar;    innerState.mTimeLastNotification=now;    long totalBytesSoFar=innerState.mBytesThisSession + mService.mBytesSoFar;    if (Constants.LOGVV) {      Log.v(Constants.TAG,"downloaded " + mInfo.mCurrentBytes + " out of "+ mInfo.mTotalBytes);      Log.v(Constants.TAG,"     total " + totalBytesSoFar + " out of "+ mService.mTotalLength);    }    mService.notifyUpdateBytes(totalBytesSoFar);  }}  }
class C{  protected final void BOOLEAN_CMP_LONG(Instruction s,RegisterOperand res,Operand val1,Operand val2,ConditionOperand cond){  if (cond.isLESS() && val2.isLongConstant() && val2.asLongConstant().value == 0 && val1.isRegister()) {    Register val1_reg=val1.asRegister().getRegister();    EMIT(MIR_Move.create(IA32_MOV,res.copyRO(),new RegisterOperand(val1_reg,TypeReference.Int)));    EMIT(MIR_BinaryAcc.mutate(s,IA32_SHR,res,IC(31)));  } else   if (cond.isGREATER_EQUAL() && val2.isLongConstant() && val2.asLongConstant().value == 0 && val1.isRegister()) {    Register val1_reg=val1.asRegister().getRegister();    EMIT(MIR_Move.create(IA32_MOV,res.copyRO(),new RegisterOperand(val1_reg,TypeReference.Int)));    EMIT(MIR_BinaryAcc.mutate(s,IA32_SHR,res,IC(31)));    EMIT(MIR_BinaryAcc.create(IA32_XOR,res.copyRO(),IC(1)));  } else {    if (cond.isGREATER() || cond.isLESS_EQUAL()) {      Operand swap_temp;      cond.flipOperands();      swap_temp=val1;      val1=val2;      val2=swap_temp;    }    if (VM.VerifyAssertions) {      opt_assert(cond.isEQUAL() || cond.isNOT_EQUAL() || cond.isLESS()|| cond.isGREATER_EQUAL());    }    RegisterOperand one=regpool.makeTempInt();    RegisterOperand lone=regpool.makeTempInt();    Operand two, ltwo;    if (val1 instanceof RegisterOperand) {      Register val1_reg=val1.asRegister().getRegister();      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,one,new RegisterOperand(val1_reg,TypeReference.Int))));      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,lone,new RegisterOperand(regpool.getSecondReg(val1_reg),TypeReference.Int))));    } else {      LongConstantOperand tmp=(LongConstantOperand)val1;      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,one,IC(tmp.upper32()))));      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,lone,IC(tmp.lower32()))));    }    if (val2 instanceof RegisterOperand) {      two=val2;      ((RegisterOperand)two).setType(TypeReference.Int);      ltwo=new RegisterOperand(burs.ir.regpool.getSecondReg(val2.asRegister().getRegister()),TypeReference.Int);    } else {      LongConstantOperand tmp=(LongConstantOperand)val2;      two=IC(tmp.upper32());      ltwo=IC(tmp.lower32());    }    if (cond.isEQUAL() || cond.isNOT_EQUAL()) {      EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SUB,lone.copyRO(),ltwo)));      EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SBB,one.copyRO(),two)));      EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_OR,one.copyRO(),lone.copyRO())));    } else {      EMIT(CPOS(s,MIR_Compare.create(IA32_CMP,lone.copyRO(),ltwo)));      EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SBB,one.copyRO(),two)));    }    RegisterOperand temp=regpool.makeTemp(TypeReference.Boolean);    EMIT(CPOS(s,MIR_Set.create(IA32_SET__B,temp,COND(cond))));    EMIT(MIR_Unary.mutate(s,IA32_MOVZX__B,res,temp.copyRO()));  }}  }
class C{  @Override public boolean needsSolrIndexSearcher(){  return true;}  }
class C{  protected void clearEditInfo() throws Exception {  int i;  FolderTokenExtFld fld=null;  for (i=0; i < count(); i++) {    fld=get(i);    fld.clearEditInfo();  }}  }
class C{  public SignerInfoGenerator build(ContentSigner contentSigner,X509CertificateHolder certHolder) throws OperatorCreationException {  SignerIdentifier sigId=new SignerIdentifier(new IssuerAndSerialNumber(certHolder.toASN1Structure()));  SignerInfoGenerator sigInfoGen=createGenerator(contentSigner,sigId);  sigInfoGen.setAssociatedCertificate(certHolder);  return sigInfoGen;}  }
class C{  public int lengthIssuerSerial(){  return this.length(Constants.SignatureSpecNS,Constants._TAG_X509ISSUERSERIAL);}  }
class C{  private Connections(Context context){  connections=new HashMap<String,Connection>();  persistence=new Persistence(context);  try {    List<Connection> l=persistence.restoreConnections(context);    for (    Connection c : l) {      connections.put(c.handle(),c);    }  } catch (  PersistenceException e) {    e.printStackTrace();  }}  }
class C{  public void comment(char ch[],int start,int length) throws SAXException {  flushStartDoc();  if (null != m_resultLexicalHandler)   m_resultLexicalHandler.comment(ch,start,length);}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  @Override public Date computeFirstFireTime(org.quartz.Calendar calendar){  nextFireTime=getFireTimeAfter(new Date(getStartTime().getTime() - 1000L));  while (nextFireTime != null && calendar != null && !calendar.isTimeIncluded(nextFireTime.getTime())) {    nextFireTime=getFireTimeAfter(nextFireTime);    if (nextFireTime == null)     break;    java.util.Calendar c=java.util.Calendar.getInstance();    c.setTime(nextFireTime);    if (c.get(java.util.Calendar.YEAR) > YEAR_TO_GIVEUP_SCHEDULING_AT) {      return null;    }  }  return nextFireTime;}  }
class C{  @Inject public FocusManager(EventBus eventBus){  this.eventBus=eventBus;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:12.200 -0500",hash_original_method="BDBA762FEAF5C103321D9E7FB6720E1A",hash_generated_method="A5963EF9635EBF2275DCE7C1479416FD") public AtomicReference(V initialValue){  value=initialValue;}  }
class C{  public void testCase15(){  byte aBytes[]={1,2,3,4,5,6,7};  byte bBytes[]={0};  int aSign=1;  int bSign=0;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  try {    aNumber.remainder(bNumber);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  public static FloatBuffer createFloatBuffer(int elements){  ByteBuffer byteBuffer=ByteBuffer.allocateDirect(elements * 4);  byteBuffer.order(ByteOrder.nativeOrder());  return byteBuffer.asFloatBuffer();}  }
class C{  private void handleAcks(){  ConsumerRecord<K,V> record=this.acks.poll();  while (record != null) {    if (this.logger.isTraceEnabled()) {      this.logger.trace("Ack: " + record);    }    processAck(record);    record=this.acks.poll();  }}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:16.074 -0500",hash_original_method="4FFA41D6F7F1FFB50CF7951492094FCE",hash_generated_method="CE65233D6945B45F5217A055FCCED981") public Socket sendBytes(InetAddress senderAddress,InetAddress receiverAddress,int contactPort,String transport,byte[] bytes,boolean retry,MessageChannel messageChannel) throws IOException {  int retry_count=0;  int max_retry=retry ? 2 : 1;  int length=bytes.length;  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("sendBytes " + transport + " inAddr "+ receiverAddress.getHostAddress()+ " port = "+ contactPort+ " length = "+ length);  }  if (sipStack.isLoggingEnabled() && sipStack.isLogStackTraceOnMessageSend()) {    sipStack.getStackLogger().logStackTrace(StackLogger.TRACE_INFO);  }  if (transport.compareToIgnoreCase(TCP) == 0) {    String key=makeKey(receiverAddress,contactPort);    try {      boolean retval=this.ioSemaphore.tryAcquire(10000,TimeUnit.MILLISECONDS);      if (!retval) {        throw new IOException("Could not acquire IO Semaphore after 10 seconds -- giving up ");      }    } catch (    InterruptedException ex) {      throw new IOException("exception in acquiring sem");    }    Socket clientSock=getSocket(key);    try {      while (retry_count < max_retry) {        if (clientSock == null) {          if (sipStack.isLoggingEnabled()) {            sipStack.getStackLogger().logDebug("inaddr = " + receiverAddress);            sipStack.getStackLogger().logDebug("port = " + contactPort);          }          clientSock=sipStack.getNetworkLayer().createSocket(receiverAddress,contactPort,senderAddress);          OutputStream outputStream=clientSock.getOutputStream();          writeChunks(outputStream,bytes,length);          putSocket(key,clientSock);          break;        } else {          try {            OutputStream outputStream=clientSock.getOutputStream();            writeChunks(outputStream,bytes,length);            break;          } catch (          IOException ex) {            if (sipStack.isLoggingEnabled())             sipStack.getStackLogger().logDebug("IOException occured retryCount " + retry_count);            removeSocket(key);            try {              clientSock.close();            } catch (            Exception e) {            }            clientSock=null;            retry_count++;          }        }      }    }  finally {      ioSemaphore.release();    }    if (clientSock == null) {      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug(this.socketTable.toString());        sipStack.getStackLogger().logError("Could not connect to " + receiverAddress + ":"+ contactPort);      }      throw new IOException("Could not connect to " + receiverAddress + ":"+ contactPort);    } else     return clientSock;  } else   if (transport.compareToIgnoreCase(TLS) == 0) {    String key=makeKey(receiverAddress,contactPort);    try {      boolean retval=this.ioSemaphore.tryAcquire(10000,TimeUnit.MILLISECONDS);      if (!retval)       throw new IOException("Timeout acquiring IO SEM");    } catch (    InterruptedException ex) {      throw new IOException("exception in acquiring sem");    }    Socket clientSock=getSocket(key);    try {      while (retry_count < max_retry) {        if (clientSock == null) {          if (sipStack.isLoggingEnabled()) {            sipStack.getStackLogger().logDebug("inaddr = " + receiverAddress);            sipStack.getStackLogger().logDebug("port = " + contactPort);          }          clientSock=sipStack.getNetworkLayer().createSSLSocket(receiverAddress,contactPort,senderAddress);          SSLSocket sslsock=(SSLSocket)clientSock;          HandshakeCompletedListener listner=new HandshakeCompletedListenerImpl((TLSMessageChannel)messageChannel);          ((TLSMessageChannel)messageChannel).setHandshakeCompletedListener(listner);          sslsock.addHandshakeCompletedListener(listner);          sslsock.setEnabledProtocols(sipStack.getEnabledProtocols());          sslsock.startHandshake();          OutputStream outputStream=clientSock.getOutputStream();          writeChunks(outputStream,bytes,length);          putSocket(key,clientSock);          break;        } else {          try {            OutputStream outputStream=clientSock.getOutputStream();            writeChunks(outputStream,bytes,length);            break;          } catch (          IOException ex) {            if (sipStack.isLoggingEnabled())             sipStack.getStackLogger().logException(ex);            removeSocket(key);            try {              clientSock.close();            } catch (            Exception e) {            }            clientSock=null;            retry_count++;          }        }      }    }  finally {      ioSemaphore.release();    }    if (clientSock == null) {      throw new IOException("Could not connect to " + receiverAddress + ":"+ contactPort);    } else     return clientSock;  } else {    DatagramSocket datagramSock=sipStack.getNetworkLayer().createDatagramSocket();    datagramSock.connect(receiverAddress,contactPort);    DatagramPacket dgPacket=new DatagramPacket(bytes,0,length,receiverAddress,contactPort);    datagramSock.send(dgPacket);    datagramSock.close();    return null;  }}  }
class C{  private boolean isViewWasReused(){  String currentCacheKey=engine.getLoadingUriForView(imageAware);  return !memoryCacheKey.equals(currentCacheKey);}  }
class C{  public static void addToConversation(Vertex input,Vertex conversation){  input.addRelationship(Primitive.CONVERSATION,conversation);  Vertex previous=conversation.lastRelationship(Primitive.INPUT);  if (previous != null) {    previous.addRelationship(Primitive.NEXT,input);    input.addRelationship(Primitive.PREVIOUS,previous);  }  conversation.addRelationship(Primitive.INPUT,input,Integer.MAX_VALUE);  Vertex sentence=input.getRelationship(Primitive.INPUT);  if (sentence != null && sentence.instanceOf(Primitive.SENTENCE)) {    conversation.addRelationship(Primitive.SENTENCE,sentence);  }}  }
class C{  private <T>String format(final Optional<T> value,final String absentValue){  requireNonNull(value);  String formatted="unavailable";  if (value.isPresent()) {    formatted=value.get().toString();  }  return formatted;}  }
class C{  private ELNode.Nodes parseEL(){  StringBuilder buf=new StringBuilder();  ELexpr=new ELNode.Nodes();  while (hasNext()) {    nextToken();    if (curToken instanceof Char) {      if (curToken.toChar() == '}') {        break;      }      buf.append(curToken.toChar());    } else {      if (buf.length() > 0) {        ELexpr.add(new ELNode.ELText(buf.toString()));      }      if (!parseFunction()) {        ELexpr.add(new ELNode.ELText(curToken.toString()));      }    }  }  if (buf.length() > 0) {    ELexpr.add(new ELNode.ELText(buf.toString()));  }  return ELexpr;}  }
class C{  private int[] transformIntegerArray(Object[] integerObjectArray){  int[] intArray=null;  if (integerObjectArray != null) {    intArray=new int[integerObjectArray.length];    for (int i=0; i < integerObjectArray.length; i++) {      intArray[i]=((Integer)integerObjectArray[i]).intValue();    }  }  return intArray;}  }
class C{  private static int appendTypeSignature(char[] string,int start,boolean fullyQualifyTypeNames,StringBuffer buffer){  return appendTypeSignature(string,start,fullyQualifyTypeNames,buffer,false);}  }
class C{  public static ForgeDirection randomDirection4(Random random){  return DIR4[random.nextInt(DIR4.length)];}  }
class C{  protected void processPrefAction(HttpServletRequest request,PreferencesForm frm,ActionMessages errors){  String op=frm.getOp();  if (op == null)   return;  if (op.equals(MSG.actionAddRoomGroupPreference()))   addRoomGroup(request,frm,errors);  if (op.equals(MSG.actionAddRoomPreference()))   addRoomPref(request,frm,errors);  if (op.equals(MSG.actionAddBuildingPreference()))   addBldgPref(request,frm,errors);  if (op.equals(MSG.actionAddDistributionPreference()))   addDistPref(request,frm,errors);  if (op.equals(MSG.actionAddRoomFeaturePreference()))   addRoomFeatPref(request,frm,errors);  if (op.equals(MSG.actionAddTimePreference()))   addTimePattern(request,frm,errors);  if (op.equals(MSG.actionRemoveBuildingPreference()) || op.equals(MSG.actionRemoveDistributionPreference()) || op.equals(MSG.actionRemoveRoomFeaturePreference())|| op.equals(MSG.actionRemoveRoomGroupPreference())|| op.equals(MSG.actionRemoveRoomPreference())|| op.equals(MSG.actionRemoveTimePattern())|| op.equals(MSG.actionRemoveInstructor()))   doDelete(request,frm);}  }
class C{  private boolean onTouchLockedMode(MotionEvent event){  return false;}  }
class C{  protected void LaunchApp(){  startActivitySync(mIntent);  waitForIdleSync();}  }
class C{  public static String stringFor(int n){switch (n) {case cudaGLMapFlagsNone:    return "cudaGLMapFlagsNone";case cudaGLMapFlagsReadOnly:  return "cudaGLMapFlagsReadOnly";case cudaGLMapFlagsWriteDiscard:return "cudaGLMapFlagsWriteDiscard";}return "INVALID cudaGLMapFlags: " + n;}  }
class C{  public static Range<Character> valueOfCharacter(String str){  return Range.valueOf(str,null);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean equals(Object o){  if (o == this) {    return true;  } else   if (o instanceof IdentityHashMap) {    IdentityHashMap m=(IdentityHashMap)o;    if (m.size() != size) {      return false;    }    Object[] tab=m.table;    for (int i=0; i < tab.length; i+=2) {      Object k=tab[i];      if (k != null && !containsMapping(k,tab[i + 1]))       return false;    }    return true;  } else   if (o instanceof Map) {    Map m=(Map)o;    return entrySet().equals(m.entrySet());  } else {    return false;  }}  }
class C{  public static String showInputBox(Component parent,String title,String msg,Object initialValue){  Object result;  if (title == null)   title="Input...";  result=JOptionPane.showInputDialog(parent,msg,title,JOptionPane.QUESTION_MESSAGE,getImageIcon("question.gif"),null,initialValue);  if (result != null)   return result.toString(); else   return null;}  }
class C{  private void onServerLinkClose(String hostName){  ServerHeartbeat server=_root.getServer(hostName);  if (server == null) {    return;  }  if (!isHub(server) && !isHub(_serverSelf)) {    return;  }  if (server.onHeartbeatStop()) {    onServerStop(server);    if (server.getRack() != null) {      server.getRack().update();    }    updateHeartbeats();  }}  }
class C{  public void applyMissingValuesTreatment(double[] values) throws Exception {  for (int i=0; i < m_miningMeta.size(); i++) {    MiningFieldMetaInfo mfi=m_miningMeta.get(i);    values[i]=mfi.applyMissingValueTreatment(values[i]);  }}  }
class C{  @Override protected void parse(){  try {    maximumInstances=getConfig().getInt(PARAM_MAXIMUM_INSTANCES,DEFAULT_MAXIMUM_INSTANCES);  } catch (  ConversionException e) {    LOGGER.error("Failed to load the \"Maximum instances\" configuration: " + e.getMessage(),e);  }  try {    mergeRelatedIssues=getConfig().getBoolean(PARAM_MERGE_RELATED_ISSUES,true);  } catch (  ConversionException e) {    LOGGER.error("Failed to load the \"old format\" configuration: " + e.getMessage(),e);  }  try {    overridesFilename=getConfig().getString(PARAM_OVERRIDES_FILENAME,"");  } catch (  ConversionException e) {    LOGGER.error("Failed to load the \"Overrides filename\" configuration: " + e.getMessage(),e);  }}  }
class C{  Token(final Object value,final int count){  this.value=value;  this.count=count;}  }
class C{  @Override public java.lang.Iterable<Integer> iterable(final IScope scope){  return Ints.asList(matrix);}  }
class C{  @Override public boolean isResponsible(Class<?> clazz){  return clazz == String.class;}  }
class C{  public boolean complete(){  if (log == null)   log=CLogger.getCLogger(getClass());  if (isRunning()) {    m_state=STATE_Completed;    log.info("completing ...");    return true;  }  String msg="complete failed: Not Running (" + getState() + ")";  if (m_throwException)   throw new IllegalStateException(msg);  log.warning(msg);  return false;}  }
class C{  public DoubleMatrix2D viewRow(int row){  checkRow(row);  int viewRows=this.slices;  int viewColumns=this.columns;  int viewRowZero=sliceZero;  int viewColumnZero=columnZero;  int viewOffset=this.offset + _rowOffset(_rowRank(row));  int viewRowStride=this.sliceStride;  int viewColumnStride=this.columnStride;  int[] viewRowOffsets=this.sliceOffsets;  int[] viewColumnOffsets=this.columnOffsets;  return new SelectedSparseDoubleMatrix2D(viewRows,viewColumns,this.elements,viewRowZero,viewColumnZero,viewRowStride,viewColumnStride,viewRowOffsets,viewColumnOffsets,viewOffset);}  }
class C{  public static long allocateUnpooled(int cap){  assert cap > 0;  long memPtr=GridUnsafe.allocateMemory(MEM_HDR_LEN);  long dataPtr=GridUnsafe.allocateMemory(cap);  GridUnsafe.putLong(memPtr,dataPtr);  GridUnsafe.putInt(memPtr + MEM_HDR_OFF_CAP,cap);  GridUnsafe.putInt(memPtr + MEM_HDR_OFF_LEN,0);  GridUnsafe.putInt(memPtr + MEM_HDR_OFF_FLAGS,0);  return memPtr;}  }
