class C{  public boolean union(RWSet other){  if (other == null)   return false;  if (isFull)   return false;  boolean ret=false;  if (other instanceof MethodRWSet) {    MethodRWSet o=(MethodRWSet)other;    if (o.getCallsNative()) {      ret=!getCallsNative() | ret;      setCallsNative();    }    if (o.isFull) {      ret=!isFull | ret;      isFull=true;      if (true)       throw new RuntimeException("attempt to add full set " + o + " into "+ this);      globals=null;      fields=null;      return ret;    }    if (o.globals != null) {      if (globals == null)       globals=new HashSet();      ret=globals.addAll(o.globals) | ret;      if (globals.size() > MAX_SIZE) {        globals=null;        isFull=true;        throw new RuntimeException("attempt to add full set " + o + " into "+ this);      }    }    if (o.fields != null) {      for (      Object element : o.fields.keySet()) {        final Object field=element;        PointsToSet os=o.getBaseForField(field);        ret=addFieldRef(os,field) | ret;      }    }  } else   if (other instanceof StmtRWSet) {    StmtRWSet oth=(StmtRWSet)other;    if (oth.base != null) {      ret=addFieldRef(oth.base,oth.field) | ret;    } else     if (oth.field != null) {      ret=addGlobal((SootField)oth.field) | ret;    }  } else   if (other instanceof SiteRWSet) {    SiteRWSet oth=(SiteRWSet)other;    for (    RWSet set : oth.sets) {      this.union(set);    }  }  if (!getCallsNative() && other.getCallsNative()) {    setCallsNative();    return true;  }  return ret;}  }
class C{  public static Role loadById(long id){  return Helper.load(id,Role.class);}  }
class C{  public final Abstraction deriveNewAbstractionOnCatch(Value taint){  assert this.exceptionThrown;  Abstraction abs=deriveNewAbstractionMutable(new AccessPath(taint,true),null);  abs.exceptionThrown=false;  return abs;}  }
class C{  public static void i(String tag,String msg){  if (LOG_ENABLE) {    Log.i(tag,buildMsg(msg));  }}  }
class C{  public static String slurpFile(String filename) throws IOException {  return slurpReader(new FileReader(filename));}  }
class C{  public <T>Constant<T> constant(T constant){  return new Constant<T>(constant);}  }
class C{  public static void expandID(String numberString,WordRelation wordRelation,Item tokenItem){  int numberDigits=numberString.length();  if ((numberDigits == 4) && (numberString.charAt(2) == '0') && (numberString.charAt(3) == '0')) {    if (numberString.charAt(1) == '0') {      expandNumber(numberString,wordRelation,tokenItem);    } else {      expandNumber(numberString.substring(0,2),wordRelation,tokenItem);      wordRelation.addWord(tokenItem,"hundred");    }  } else   if ((numberDigits == 2) && (numberString.charAt(0) == '0')) {    wordRelation.addWord(tokenItem,"oh");    expandDigits(numberString.substring(1,2),wordRelation,tokenItem);  } else   if ((numberDigits == 4 && numberString.charAt(1) == '0') || numberDigits < 3) {    expandNumber(numberString,wordRelation,tokenItem);  } else   if (numberDigits % 2 == 1) {    String firstDigit=digit2num[numberString.charAt(0) - '0'];    wordRelation.addWord(tokenItem,firstDigit);    expandID(numberString.substring(1,numberDigits),wordRelation,tokenItem);  } else {    expandNumber(numberString.substring(0,2),wordRelation,tokenItem);    expandID(numberString.substring(2,numberDigits),wordRelation,tokenItem);  }}  }
class C{  public boolean isDeny(){  return message != null;}  }
class C{  public void release(){  this.isDown=false;}  }
class C{  public String toString(){  return "(" + x + ", "+ y+ ")";}  }
class C{  public void remove(){  if (conductorSet == null) {    return;  }  final int memberCount=conductorSet.memberCount;  if (memberCount <= 1) {    return;  }  for (  IChargeConductor hereConductor : conductorSet.getMembers(conductor)) {    if (hereConductor == conductor) {      continue;    }    Charge hereCharge=hereConductor.getCharge();    final int val=hereCharge.getValue();    new ConductorSet(hereConductor).totalCharge=val;    conductorSet.memberCount--;    conductorSet.totalCharge-=val;  }  conductorSet=null;}  }
class C{  public ExceptionWithContext(String message,Object... formatArgs){  this(null,message,formatArgs);}  }
class C{  private void typeChanged(ValueComboBoxData valueComboBoxData){  if (valueComboBoxData != null) {    CardLayout cl=(CardLayout)(editPanel.getLayout());    cl.show(editPanel,valueComboBoxData.getKey());  }}  }
class C{  public IfStmt newIfStmt(Value condition,Unit target){  return new GIfStmt(condition,target);}  }
class C{  public boolean canGetLong(){  return canGet(long.class);}  }
class C{  public CalcBehaviour(String sDoc1,String sDoc2,int iWordNGramSize_Min,int iWordNGramSize_Max,int iWord_Dmax,int iCharacterNGramSize_Min,int iCharacterNGramSize_Max,int iCharacter_Dmax,boolean bDoCharNGrams,boolean bDoWordNGrams,boolean bSilent,String sID){  Doc1=sDoc1;  Doc2=sDoc2;  ID=sID;  WordNGramSize_Min=iWordNGramSize_Min;  WordNGramSize_Max=iWordNGramSize_Max;  Word_Dmax=iWord_Dmax;  CharacterNGramSize_Min=iCharacterNGramSize_Min;  CharacterNGramSize_Max=iCharacterNGramSize_Max;  Character_Dmax=iCharacter_Dmax;  DoCharNGrams=bDoCharNGrams;  DoWordNGrams=bDoWordNGrams;  Silent=bSilent;}  }
class C{  public void parse(String[] tokens,int numberOfTokens) throws IOException {  if (numberOfTokens < 11) {    throw new IOException("Too few tokens in line: " + numberOfTokens);  }  setQueryName(tokens[0]);  setFlag(Basic.parseInt(tokens[1]));  setRefName(tokens[2]);  setPos(Basic.parseInt(tokens[3]));  setMapQuality(Basic.parseInt(tokens[4]));  setCigarString(tokens[5]);  setRNext(tokens[6]);  setPNext(Basic.parseInt(tokens[7]));  setTLength(Basic.parseInt(tokens[8]));  setSequence(tokens[9].toUpperCase());  setQuality(tokens[10]);  for (int i=11; i < numberOfTokens; i++) {    final String word=tokens[i];    int pos1=word.indexOf(':');    int pos2=word.indexOf(':',pos1 + 1);    if (pos2 == -1)     throw new IOException("Failed to parse: " + word);    final String[] three=new String[]{word.substring(0,pos1),word.substring(pos1 + 1,pos2),word.substring(pos2 + 1)};    final Object object;switch (three[1].charAt(0)) {case 'A':      object=three[2].charAt(0);    break;case 'i':  object=Integer.parseInt(three[2]);break;case 'f':object=Float.parseFloat(three[2]);break;case 'Z':object=three[2];break;case 'H':object=new Integer(three[2]);break;default :throw new IOException("Failed to parse: " + word);}optionalFields.put(three[0],object);}Flag theFlag=new Flag(flag);if (pairedReadSuffix1 != null && !theFlag.isFirstFragment() && !getQueryName().endsWith(pairedReadSuffix1)) setQueryName(getQueryName() + pairedReadSuffix1);if (pairedReadSuffix2 != null && !theFlag.isLastFragment() && !getQueryName().endsWith(pairedReadSuffix2)) setQueryName(getQueryName() + pairedReadSuffix2);}  }
class C{  public FriendsGetOnlineQueryWithMobile count(Integer value){  return unsafeParam("count",value);}  }
class C{  public Table instantiate(int nrows){  Table t=new Table(nrows,m_size);  for (int i=0; i < m_size; ++i) {    t.addColumn(m_names[i],m_types[i],m_dflts[i]);  }  return t;}  }
class C{  public void outputOrigin(){  System.out.println("After decoding:");  for (int i=0; i < disks; i++) {    System.out.printf("idata:%d:  ",i);    System.out.println(Arrays.toString(idata[i]));  }}  }
class C{  public Builder withGalleryRequestCode(int requestCode){  this.mGalleryRequestCode=requestCode;  return this;}  }
class C{  @Override public Type[] supportedTypes(Metadata<Optional> metadata){  Type[] typeParam={metadata.getType()};  return typeParam;}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public static Cache.Entry makeRandomCacheEntry(byte[] data,boolean isExpired,boolean needsRefresh){  Random random=new Random();  Cache.Entry entry=new Cache.Entry();  if (data != null) {    entry.data=data;  } else {    entry.data=new byte[random.nextInt(1024)];  }  entry.etag=String.valueOf(random.nextLong());  entry.lastModified=random.nextLong();  entry.ttl=isExpired ? 0 : Long.MAX_VALUE;  entry.softTtl=needsRefresh ? 0 : Long.MAX_VALUE;  return entry;}  }
class C{  private void checkFieldType(int fieldIndex,List<FieldConfigBase> fieldList,FunctionName functionName,List<String> argList){  int adjustedIndex=(fieldIndex >= functionName.getArgumentNames().size()) ? functionName.getArgumentNames().size() - 1 : fieldIndex;  String label=functionName.getArgumentNames().get(adjustedIndex);  String debugMessage=String.format("%s/%d %s",functionName.getName(),fieldIndex,label);  FieldConfigPopulate field=fieldList.get(fieldIndex);  assertNotNull(debugMessage,field);  Parameter<?> parameterType=functionName.getArguments().get(adjustedIndex);  Class<?> actual=typeMap.get(parameterType.getType());  assertEquals(debugMessage,field.getClass(),actual);  assertTrue(debugMessage,field.getLabel().compareTo(label) == 0);  argList.add(parameterType.getType().getSimpleName());}  }
class C{  public static double acosh(final double a){  return FastMath.log(a + FastMath.sqrt(a * a - 1));}  }
class C{  void parseFinish(){  mChildren=mCurrentGroup.getChildren();}  }
class C{  public boolean isValid(){  return S2.isUnitLength(axis) && height <= 2;}  }
class C{  public boolean forEachValue(TObjectProcedure<V> procedure){  byte[] states=_states;  V[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  @deprecated public byte elementAt(char index){  return this.values[((this.indices[(index >> '\007')] & 0xFFFF) + (index & 0x7F))];}  }
class C{  public NotesDeleteCommentQuery(VkApiClient client,UserActor actor,int commentId){  super(client,"notes.deleteComment",OkResponse.class);  accessToken(actor.getAccessToken());  commentId(commentId);}  }
class C{  @Override public void readConfig(){  Properties mainProperties=new Properties();  if (configPropertiesFile != null) {    if (configPropertiesFile.exists()) {      try {        FileInputStream file=new FileInputStream(configPropertiesFile);        mainProperties.load(file);        file.close();      } catch (      FileNotFoundException e) {        e.printStackTrace();      }catch (      IOException e) {        e.printStackTrace();      }    }  }  fieldValueMap.clear();  for (  Object key : mainProperties.keySet()) {    String fieldName=(String)key;    fieldValueMap.put(fieldName,mainProperties.getProperty(fieldName));  }}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  protected WallEditCommentQuery commentId(int value){  return unsafeParam("comment_id",value);}  }
class C{  private List<Sweet> extractSweetsForFeature(Mat img,int feature,int i,int orientation){  List<Sweet> featureSweets=new ArrayList<>();  int rowLimit=adjustLimitAccordingToOrientation(orientation,img.rows());  for (int k=0; k < rowLimit; k+=WALK) {    for (int l=0; l < img.cols(); l+=WALK) {      lookForFeatureInPixel(img,feature,i,featureSweets,k,l);    }  }  return featureSweets;}  }
class C{  public static String bind(String id,String binding1,String binding2){  return bind(id,new String[]{binding1,binding2});}  }
class C{  public boolean isApplicable(){  ChartViewer chartViewer=(ChartViewer)getViewer();  return chartViewer.getChartDrawer() != null && chartViewer.getChartDrawer().canShowXAxis();}  }
class C{  public synchronized ZooKeeperClientBuilder statsLogger(StatsLogger statsLogger){  this.statsLogger=statsLogger;  return this;}  }
class C{  public String toString(){  return "null";}  }
class C{  public boolean isSelected(int position){  return selectedItems.contains(Integer.valueOf(position));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCBuff_A_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201261,skillcaster,skilltarget,skillname);}  }
class C{  protected void drawGridBackground(Canvas c){  if (mDrawGridBackground) {    c.drawRect(mViewPortHandler.getContentRect(),mGridBackgroundPaint);  }  if (mDrawBorders) {    c.drawRect(mViewPortHandler.getContentRect(),mBorderPaint);  }}  }
class C{  public static LinkedHashMap<Integer,FolderData> readGallery(final GalleryActivity activity){  Cursor cursor;  int columnBucketId, columnThumbnailData, columnIndexFolderName, columnPath;  LinkedHashMap<Integer,FolderData> listOfAllImages=new LinkedHashMap<>();  String[] projection;  Uri galleryUri;  if (activity.getType() == Const.GalleryType.IMAGE || activity.getType() == Const.GalleryType.IMAGE_VIDEO) {    galleryUri=MediaStore.Images.Media.EXTERNAL_CONTENT_URI;    projection=new String[]{MediaStore.Images.Media.BUCKET_ID,MediaStore.Images.Media.BUCKET_DISPLAY_NAME,MediaStore.Images.Thumbnails._ID,MediaStore.Images.ImageColumns.DATA,MediaStore.Images.ImageColumns.DATE_TAKEN};    cursor=activity.getContentResolver().query(galleryUri,projection,null,null,MediaStore.Images.Media.BUCKET_DISPLAY_NAME + " ASC, " + MediaStore.Images.ImageColumns.DATE_TAKEN+ " DESC");    columnBucketId=cursor.getColumnIndexOrThrow(projection[0]);    columnIndexFolderName=cursor.getColumnIndexOrThrow(projection[1]);    columnThumbnailData=cursor.getColumnIndexOrThrow(projection[2]);    columnPath=cursor.getColumnIndexOrThrow(projection[3]);    FolderData folderData;    while (cursor.moveToNext()) {      int bucketId=cursor.getInt(columnBucketId);      folderData=listOfAllImages.get(bucketId);      if (null == folderData) {        folderData=new FolderData();        folderData.setDisplayName(cursor.getString(columnIndexFolderName));        folderData.setPreviewImageId(cursor.getInt(columnThumbnailData));        folderData.increaseCount();        folderData.setPreviewPath(cursor.getString(columnPath));        listOfAllImages.put(cursor.getInt(columnBucketId),folderData);      } else {        folderData.increaseCount();      }    }    cursor.close();  }  if (activity.getType() == Const.GalleryType.VIDEO || activity.getType() == Const.GalleryType.IMAGE_VIDEO) {    galleryUri=MediaStore.Video.Media.EXTERNAL_CONTENT_URI;    projection=new String[]{MediaStore.Video.Media.BUCKET_ID,MediaStore.Video.Media.BUCKET_DISPLAY_NAME,MediaStore.Video.Thumbnails._ID,MediaStore.Video.VideoColumns.DATA};    FolderData folderData;    cursor=activity.getContentResolver().query(galleryUri,projection,null,null,MediaStore.Images.Media.BUCKET_DISPLAY_NAME + " ASC");    if (cursor == null) {      return listOfAllImages;    }    columnBucketId=cursor.getColumnIndexOrThrow(projection[0]);    columnIndexFolderName=cursor.getColumnIndexOrThrow(projection[1]);    columnThumbnailData=cursor.getColumnIndexOrThrow(projection[2]);    columnPath=cursor.getColumnIndexOrThrow(projection[3]);    while (cursor.moveToNext()) {      int bucketId=cursor.getInt(columnBucketId);      folderData=listOfAllImages.get(bucketId);      if (null == folderData) {        folderData=new FolderData();        folderData.setDisplayName(cursor.getString(columnIndexFolderName));        folderData.setPreviewImageId(cursor.getInt(columnThumbnailData));        folderData.increaseCount();        folderData.setPreviewPath(cursor.getString(columnPath));        listOfAllImages.put(cursor.getInt(columnBucketId),folderData);      } else {        folderData.increaseCount();      }    }    cursor.close();  }  return listOfAllImages;}  }
class C{  @Override public void dispose(){}  }
class C{  private void signOut(){  mFirebaseAuth.signOut();  Auth.GoogleSignInApi.signOut(mGoogleApiClient);  startActivity(new Intent(this,LoginActivity.class));  finish();}  }
class C{  public void editItem(Configuration.Item item,ItemChangedListener listener){  Intent editIntent=new Intent(this,ItemActivity.class);  this.itemChangedListener=listener;  if (item != null) {    editIntent.putExtra("ITEM_TITLE",item.title);    editIntent.putExtra("ITEM_LOCATION",item.location);    editIntent.putExtra("ITEM_STATE",item.state);  }  startActivityForResult(editIntent,REQUEST_ITEM_EDIT);}  }
class C{  @Override public void init(String configPrefix) throws MaryConfigurationException {  String precomputedJoinCostFileName=MaryProperties.getFilename(configPrefix + ".precomputedJoinCostFile");  try {    load(precomputedJoinCostFileName,null,null,0);  } catch (  IOException ioe) {    throw new MaryConfigurationException("Problem loading join file " + precomputedJoinCostFileName,ioe);  }}  }
class C{  static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {  return createObject(factoryId,null,fallbackClassName);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CANT_USE_ITEM_OUT_OF_USABLE_COUNT(String value0){  return new SM_SYSTEM_MESSAGE(1300394,value0);}  }
class C{  public boolean isAssignableFrom(EntryClass cls){  for (EntryClass sup=cls; sup != null; sup=sup.superclass) {    if (hash == sup.hash)     return true;  }  return false;}  }
class C{  private synchronized static void compareConnection(final ProcessConnectionResponse processConnectionResponse){  if (ActiveRequestSenderTest.testType == TestType.CONNECT_SUCCESS) {    assertNotNull(processConnectionResponse);    assertEquals(PROCESS_NAME,processConnectionResponse.getProcessName());    assertEquals(PROCESS_PIK,processConnectionResponse.getProcessPIK());  } else   if (ActiveRequestSenderTest.testType == TestType.CONNECT_REJECT) {    assertNotNull(processConnectionResponse);    assertEquals(PROCESS_NAME,processConnectionResponse.getProcessName());    assertEquals(PIK_REJECTED,processConnectionResponse.getProcessPIK());  } else   if (ActiveRequestSenderTest.testType == TestType.CONNECT_TIME_OUT) {    assertEquals(null,processConnectionResponse);  } else {    assertNotNull(null,"ERROR - No test for PIK was found.");  }}  }
class C{  public MessagesMarkAsImportantQuery messageIds(Integer... value){  return unsafeParam("message_ids",value);}  }
class C{  @Nullable public static PsiFile asFileSearch(PsiElement elementToSearch){  if (elementToSearch instanceof PsiFile) {    return (PsiFile)elementToSearch;  }  for (  PsiFileProvider provider : PsiFileProvider.EP_NAME.getExtensions()) {    PsiFile file=provider.asFileSearch(elementToSearch);    if (file != null) {      return file;    }  }  return null;}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  Camera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.setOneShotPreviewCallback(previewCallback);  }}  }
class C{  public static void write(File file,CharSequence data,String encoding) throws IOException {  write(file,data,encoding,false);}  }
class C{  private void mapPut(Map map,String name,Object preference) throws IOException {  isEmpty=false;  if ((name.length() == 0) || (name == null)) {    throw new IOException("no name specified in preference" + " expression");  }  if (map.put(name,preference) != null) {    throw new IOException("duplicate map entry: " + name);  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public GEExpr fullCopy(){  GEExpr tree=(GEExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_ABSORBED_PARTY_ENEMY(String skilltarget,String skillcaster){  return new SM_SYSTEM_MESSAGE(1230223,skilltarget,skillcaster);}  }
class C{  public void clearPayment(String id){  CartPaymentInfo inf=this.getPaymentInfo(id);  paymentInfo.remove(inf);}  }
class C{  private String emailToString(String subject,String msg,String... to){  return "[" + msg + "] to "+ Arrays.asList(to)+ " with subject ["+ subject+ "]";}  }
class C{  public MessagesSearchQuery peerId(Integer value){  return unsafeParam("peer_id",value);}  }
class C{  public Water(Biome biome,int original){  super(biome,original);}  }
class C{  public static AbstractGridFormat choose(File rasterFile,ChooseRasterFormatInterface selectionPanel){  if (rasterFile != null) {    final Set<AbstractGridFormat> formats=GridFormatFinder.findFormats(rasterFile,GeoTools.getDefaultHints());    if (formats.size() > 1) {      if (selectionPanel != null) {        AbstractGridFormat selectedFormat=selectionPanel.showPanel(formats);        if (selectedFormat != null) {          return selectedFormat;        }      }    }    final Iterator<AbstractGridFormat> it=formats.iterator();    if (it.hasNext()) {      return it.next();    }  }  return new UnknownFormat();}  }
class C{  public static Long[] transformLongArray(long[] source){  Long[] destin=new Long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  private void updateScrollPane(){  if (chartDrawer.getScrollBackReferenceRect() != null) {    chartDrawer.computeScrollBackReferenceRect();    if (chartDrawer.getScrollBackReferencePoint() != null && chartDrawer.getScrollBackWindowPoint() != null) {      Point2D apt=chartDrawer.convertReferenceToWindow(chartDrawer.getScrollBackReferencePoint());      int scrollX=(int)Math.round(apt.getX() - chartDrawer.getScrollBackWindowPoint().getX());      int scrollY=(int)Math.round(apt.getY() - chartDrawer.getScrollBackWindowPoint().getY());      chartDrawer.setScrollBackReferencePoint(null);      chartDrawer.setScrollBackWindowPoint(null);      if (scrollX != 0) {        scrollPane.getHorizontalScrollBar().setValue(scrollPane.getHorizontalScrollBar().getValue() + scrollX);      }      if (scrollY != 0) {        scrollPane.getVerticalScrollBar().setValue(scrollPane.getVerticalScrollBar().getValue() + scrollY);      }    }  }}  }
class C{  public HTSModel generateHTSModel(HMMData htsData,FeatureDefinition feaDef,FeatureVector fv,double oldErr){  HTSModel m=new HTSModel(getNumStates());  String phoneFeature=fv.getFeatureAsString(feaDef.getFeatureIndex("phone"),feaDef);  m.setPhoneName(phoneFeature);  try {    double diffDur=searchDurInCartTree(m,fv,htsData,oldErr);    m.setDurError(diffDur);    searchLf0InCartTree(m,fv,feaDef,htsData.getUV());    searchMgcInCartTree(m,fv,feaDef);    if (htsData.getTreeStrStream() != null)     searchStrInCartTree(m,fv,feaDef);    if (htsData.getTreeMagStream() != null)     searchMagInCartTree(m,fv,feaDef);  } catch (  Exception e) {    e.printStackTrace();    throw new RuntimeException(e);  }  return m;}  }
class C{  public static void main(String args[]){  if (args.length < 2) {    System.out.println("Error: Must have 2 parameters, one is config filename, " + "the other is the local filename to upload");    return;  }  System.out.println("java.version=" + System.getProperty("java.version"));  String conf_filename=args[0];  String local_filename=args[1];  try {    ClientGlobal.init(conf_filename);    System.out.println("network_timeout=" + ClientGlobal.g_network_timeout + "ms");    System.out.println("charset=" + ClientGlobal.g_charset);    long startTime;    ServerInfo[] servers;    TrackerClient tracker=new TrackerClient();    TrackerServer trackerServer=tracker.getConnection();    StorageServer storageServer=null;    StorageClient1 client=new StorageClient1(trackerServer,storageServer);    byte[] file_buff;    NameValuePair[] meta_list;    String group_name;    String appender_file_id;    String file_ext_name;    int errno;    meta_list=new NameValuePair[4];    meta_list[0]=new NameValuePair("width","800");    meta_list[1]=new NameValuePair("heigth","600");    meta_list[2]=new NameValuePair("bgcolor","#FFFFFF");    meta_list[3]=new NameValuePair("author","Mike");    file_buff="this is a test".getBytes(ClientGlobal.g_charset);    System.out.println("file length: " + file_buff.length);    group_name=null;    StorageServer[] storageServers=tracker.getStoreStorages(trackerServer,group_name);    if (storageServers == null) {      System.err.println("get store storage servers fail, error code: " + tracker.getErrorCode());    } else {      System.err.println("store storage servers count: " + storageServers.length);      for (int k=0; k < storageServers.length; k++) {        System.err.println((k + 1) + ". " + storageServers[k].getInetSocketAddress().getAddress().getHostAddress()+ ":"+ storageServers[k].getInetSocketAddress().getPort());      }      System.err.println("");    }    startTime=System.currentTimeMillis();    appender_file_id=client.upload_appender_file1(file_buff,"txt",meta_list);    System.out.println("upload_appender_file1 time used: " + (System.currentTimeMillis() - startTime) + " ms");    if (appender_file_id == null) {      System.err.println("upload file fail, error code: " + client.getErrorCode());      return;    } else {      System.err.println(client.get_file_info1(appender_file_id));      servers=tracker.getFetchStorages1(trackerServer,appender_file_id);      if (servers == null) {        System.err.println("get storage servers fail, error code: " + tracker.getErrorCode());      } else {        System.err.println("storage servers count: " + servers.length);        for (int k=0; k < servers.length; k++) {          System.err.println((k + 1) + ". " + servers[k].getIpAddr()+ ":"+ servers[k].getPort());        }        System.err.println("");      }      meta_list=new NameValuePair[4];      meta_list[0]=new NameValuePair("width","1024");      meta_list[1]=new NameValuePair("heigth","768");      meta_list[2]=new NameValuePair("bgcolor","#000000");      meta_list[3]=new NameValuePair("title","Untitle");      startTime=System.currentTimeMillis();      errno=client.set_metadata1(appender_file_id,meta_list,ProtoCommon.STORAGE_SET_METADATA_FLAG_MERGE);      System.out.println("set_metadata time used: " + (System.currentTimeMillis() - startTime) + " ms");      if (errno == 0) {        System.err.println("set_metadata success");      } else {        System.err.println("set_metadata fail, error no: " + errno);      }      meta_list=client.get_metadata1(appender_file_id);      if (meta_list != null) {        for (int i=0; i < meta_list.length; i++) {          System.out.println(meta_list[i].getName() + " " + meta_list[i].getValue());        }      }      startTime=System.currentTimeMillis();      file_buff=client.download_file1(appender_file_id);      System.out.println("download_file time used: " + (System.currentTimeMillis() - startTime) + " ms");      if (file_buff != null) {        System.out.println("file length:" + file_buff.length);        System.out.println((new String(file_buff)));      }      file_buff="this is a slave buff".getBytes(ClientGlobal.g_charset);      file_ext_name="txt";      startTime=System.currentTimeMillis();      errno=client.append_file1(appender_file_id,file_buff);      System.out.println("append_file time used: " + (System.currentTimeMillis() - startTime) + " ms");      if (errno == 0) {        System.err.println(client.get_file_info1(appender_file_id));      } else {        System.err.println("append file fail, error no: " + errno);      }      startTime=System.currentTimeMillis();      errno=client.delete_file1(appender_file_id);      System.out.println("delete_file time used: " + (System.currentTimeMillis() - startTime) + " ms");      if (errno == 0) {        System.err.println("Delete file success");      } else {        System.err.println("Delete file fail, error no: " + errno);      }    }    appender_file_id=client.upload_appender_file1(local_filename,null,meta_list);    if (appender_file_id != null) {      int ts;      String token;      String file_url;      InetSocketAddress inetSockAddr;      inetSockAddr=trackerServer.getInetSocketAddress();      file_url="http://" + inetSockAddr.getAddress().getHostAddress();      if (ClientGlobal.g_tracker_http_port != 80) {        file_url+=":" + ClientGlobal.g_tracker_http_port;      }      file_url+="/" + appender_file_id;      if (ClientGlobal.g_anti_steal_token) {        ts=(int)(System.currentTimeMillis() / 1000);        token=ProtoCommon.getToken(appender_file_id,ts,ClientGlobal.g_secret_key);        file_url+="?token=" + token + "&ts="+ ts;      }      System.err.println(client.get_file_info1(appender_file_id));      System.err.println("file url: " + file_url);      errno=client.download_file1(appender_file_id,0,0,"c:\\" + appender_file_id.replaceAll("/","_"));      if (errno == 0) {        System.err.println("Download file success");      } else {        System.err.println("Download file fail, error no: " + errno);      }      errno=client.download_file1(appender_file_id,0,0,new DownloadFileWriter("c:\\" + appender_file_id.replaceAll("/","-")));      if (errno == 0) {        System.err.println("Download file success");      } else {        System.err.println("Download file fail, error no: " + errno);      }      file_ext_name=null;      startTime=System.currentTimeMillis();      errno=client.append_file1(appender_file_id,local_filename);      System.out.println("append_file time used: " + (System.currentTimeMillis() - startTime) + " ms");      if (errno == 0) {        System.err.println(client.get_file_info1(appender_file_id));      } else {        System.err.println("append file fail, error no: " + errno);      }    }    File f;    f=new File(local_filename);    int nPos=local_filename.lastIndexOf('.');    if (nPos > 0 && local_filename.length() - nPos <= ProtoCommon.FDFS_FILE_EXT_NAME_MAX_LEN + 1) {      file_ext_name=local_filename.substring(nPos + 1);    } else {      file_ext_name=null;    }    appender_file_id=client.upload_appender_file1(null,f.length(),new UploadLocalFileSender(local_filename),file_ext_name,meta_list);    if (appender_file_id != null) {      System.out.println(client.get_file_info1(appender_file_id));      startTime=System.currentTimeMillis();      errno=client.append_file1(appender_file_id,f.length(),new UploadLocalFileSender(local_filename));      System.out.println("append_file time used: " + (System.currentTimeMillis() - startTime) + " ms");      if (errno == 0) {        System.err.println(client.get_file_info1(appender_file_id));      } else {        System.err.println("append file fail, error no: " + errno);      }      startTime=System.currentTimeMillis();      errno=client.modify_file1(appender_file_id,0,f.length(),new UploadLocalFileSender(local_filename));      System.out.println("modify_file time used: " + (System.currentTimeMillis() - startTime) + " ms");      if (errno == 0) {        System.err.println(client.get_file_info1(appender_file_id));      } else {        System.err.println("modify file fail, error no: " + errno);      }      startTime=System.currentTimeMillis();      errno=client.truncate_file1(appender_file_id,0);      System.out.println("truncate_file time used: " + (System.currentTimeMillis() - startTime) + " ms");      if (errno == 0) {        System.err.println(client.get_file_info1(appender_file_id));      } else {        System.err.println("truncate file fail, error no: " + errno);      }    } else {      System.err.println("Upload file fail, error no: " + errno);    }    storageServer=tracker.getFetchStorage1(trackerServer,appender_file_id);    if (storageServer == null) {      System.out.println("getFetchStorage fail, errno code: " + tracker.getErrorCode());      return;    }    System.out.println("active test to storage server: " + ProtoCommon.activeTest(storageServer.getSocket()));    storageServer.close();    System.out.println("active test to tracker server: " + ProtoCommon.activeTest(trackerServer.getSocket()));    trackerServer.close();  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public IonObjectReader(Class typeClass,IIonObjectReaderConfigurator configurator){  this.typeClass=typeClass;  Field[] fields=this.typeClass.getDeclaredFields();  IonFieldReaderConfiguration fieldConfiguration=new IonFieldReaderConfiguration();  for (int i=0; i < fields.length; i++) {    fieldConfiguration.field=fields[i];    fieldConfiguration.include=true;    fieldConfiguration.fieldName=fields[i].getName();    fieldConfiguration.alias=null;    configurator.configure(fieldConfiguration);    if (fieldConfiguration.include) {      if (fieldConfiguration.alias == null) {        putFieldReader(fields[i].getName(),IonUtil.createFieldReader(fields[i],configurator));      } else {        putFieldReader(fieldConfiguration.alias,IonUtil.createFieldReader(fields[i],configurator));      }    }  }}  }
class C{  public WallRepostQuery(VkApiClient client,UserActor actor,String object){  super(client,"wall.repost",RepostResponse.class);  accessToken(actor.getAccessToken());  object(object);}  }
class C{  public void java_lang_Class_getMethod0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getMethodObject());}  }
class C{  public boolean contains(){  int next=0;  final int size=fValues.size();  LOOP:   for (int i=0; i < size; i=next) {    next=i + fFieldCount;    for (int j=0; j < fFieldCount; j++) {      Object value1=fLocalValues[j];      Object value2=fValues.elementAt(i);      short valueType1=fLocalValueTypes[j];      short valueType2=getValueTypeAt(i);      if (value1 == null || value2 == null || valueType1 != valueType2 || !(value1.equals(value2))) {        continue LOOP;      } else       if (valueType1 == XSConstants.LIST_DT || valueType1 == XSConstants.LISTOFUNION_DT) {        ShortList list1=fLocalItemValueTypes[j];        ShortList list2=getItemValueTypeAt(i);        if (list1 == null || list2 == null || !list1.equals(list2))         continue LOOP;      }      i++;    }    return true;  }  return false;}  }
class C{  private static void shareWithLastUsed(Activity activity,String title,String url,Bitmap screenshot){  ComponentName component=getLastShareComponentName(activity);  if (component == null)   return;  makeIntentAndShare(activity,title,url,screenshot,component);}  }
class C{  public Node findRootNode(String path,long revision,WorkListener listener){  long r=revision;  long pr=r;  RandomAccessFile logMessages=null;  try {    logMessages=new RandomAccessFile(logMessagesFile,"r");    ISVNLogMessage[] buffer=new ISVNLogMessage[MAX_LOG_MESSAGES];    do {      r-=(MAX_LOG_MESSAGES) - 1;      if (r < 1) {        r=1;      }      logMessages.seek(getSeek(r));      int size=(int)(pr - r + 1);      if (size == 0)       break;      readNext(logMessages,buffer,size);      for (int k=0; k < size; k++) {        ISVNLogMessage lm=buffer[k];        ISVNLogMessageChangePath[] changedPaths=lm.getChangedPaths();        for (int n=0; n < changedPaths.length; n++) {          ISVNLogMessageChangePath cp=changedPaths[n];          if (lm.getRevision().getNumber() <= revision && cp.getAction() == 'A') {            if (cp.getCopySrcPath() != null) {              if (isEqualsOrParent(cp.getPath(),Util.unescape(path))) {                revision=lm.getRevision().getNumber();                path=cp.getCopySrcPath() + Util.unescape(path).substring(cp.getPath().length());              }            } else {              if (cp.getPath().equals(Util.unescape(path))) {                revision=lm.getRevision().getNumber();                Node node=new Node();                node.setPath(Util.unescape(path));                node.setRevision(revision);                return node;              }            }          }        }        if (listener != null)         listener.worked();      }      pr=r;    } while (true);  } catch (  IOException e) {    throw new CacheException("Error while finding root node",e);  } finally {    closeFile(logMessages);  }  Node n=new Node();  n.setPath(Util.unescape(path));  n.setRevision(revision);  return n;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GATHER_FAIL_3_MINING(String value0){  return new SM_SYSTEM_MESSAGE(1330023,value0);}  }
class C{  public void initializeFromSettings(){  setSvnClientConfigDir(store.getString(ISVNUIConstants.PREF_SVNCONFIGDIR));  setSvnClientInterface(store.getString(ISVNUIConstants.PREF_SVNINTERFACE));  setSvnChangePathOnDemand(store.getBoolean(ISVNUIConstants.PREF_FETCH_CHANGE_PATH_ON_DEMAND));}  }
class C{  public Distribution addTo(Distribution dOther){  double dSimilarity=0.0;  TreeMap<Object,Double> tOverAll=new TreeMap<Object,Double>();  Iterator iThisIter=hDistro.entrySet().iterator();  Iterator iOtherIter=dOther.asTreeMap().entrySet().iterator();  while (iThisIter.hasNext()) {    java.util.Map.Entry e=(java.util.Map.Entry)iThisIter.next();    tOverAll.put(e.getKey(),(Double)e.getValue());  }  while (iOtherIter.hasNext()) {    java.util.Map.Entry e=(java.util.Map.Entry)iOtherIter.next();    double dVal;    if (tOverAll.containsKey(e.getKey())) {      dVal=(Double)tOverAll.get(e.getKey()).doubleValue();      dVal+=((Double)e.getValue()).doubleValue();    } else {      dVal=(Double)e.getValue();    }    tOverAll.put(e.getKey(),dVal);  }  return new Distribution(tOverAll);}  }
class C{  public static void o(Z[][] A,int w,int d){  int nr=A.length;  int nc=A[0].length;  String temp=Integer.toString(nr - 1);  int rfw=temp.length() + 1;  int ww=w + d + 10;  int ncp=(Parameters.PageWidth - rfw) / ww;  int jl=0;  while (jl < nc) {    int ju=Math.min(nc,jl + ncp);    System.out.print("\n");    String head="";    while (head.length() < rfw)     head=head + " ";    System.out.print(head);    for (int j=jl; j < ju; j++) {      head=Integer.toString(j);      while (head.length() < ww)       head=" " + head;      System.out.print(head);    }    System.out.print("\n");    for (int i=0; i < nr; i++) {      String row=Integer.toString(i);      while (row.length() < rfw)       row=" " + row;      System.out.print(row);      for (int j=jl; j < ju; j++) {        String snum=DoubletoEstring(A[i][j].re,w,d);        if (A[i][j].im < 0)         snum=snum + " - " + DoubletoEstring(-A[i][j].im,d + 6,d)+ "i"; else         snum=snum + " + " + DoubletoEstring(A[i][j].im,d + 6,d)+ "i";        System.out.print(snum);      }      System.out.print("\n");    }    jl=jl + ncp;  }}  }
class C{  public synchronized void zoomAbs(final Point2D p,double scale){  ;  double zx=p.getX(), zy=p.getY();  damageReport();  m_transform.translate(zx,zy);  m_transform.scale(scale,scale);  m_transform.translate(-zx,-zy);  try {    m_itransform=m_transform.createInverse();  } catch (  Exception e) {  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case APPKEY:    return isSetAppkey();case SEND_TIME:  return isSetSendTime();case LOAD_INFO:return isSetLoadInfo();case STATUS:return isSetStatus();}throw new IllegalStateException();}  }
class C{  public synchronized void stop() throws Exception {  stop(interval);}  }
class C{  public void clear(){  args=null;}  }
class C{  public FileUtils(){  super();}  }
class C{  private void cancelAlarm(Context context){  cancelAlarmOnSystem(context,getPendingAlarmIntent(context));}  }
class C{  public void addDependency(Dependency dependency){  this.arcs.add(dependency);}  }
class C{  public BucketIntegrationTest(){  setResponseLogLengthLimit(1000);  experiment=ExperimentFactory.createExperiment();  experiment.startTime="2013-08-01T00:00:00+0000";  experiment.endTime="2013-08-08T00:00:00+0000";  experiment.samplingPercent=0.5;  experiment.label="experiment";  experiment.applicationName="qbo" + UUID.randomUUID();  DefaultNameExclusionStrategy experimentComparisonStrategy=new DefaultNameExclusionStrategy("creationTime","modificationTime","ruleJson");  experiment.setSerializationStrategy(experimentComparisonStrategy);}  }
class C{  public GroupsCreateQuery(VkApiClient client,UserActor actor,String title){  super(client,"groups.create",Group.class);  accessToken(actor.getAccessToken());  title(title);}  }
class C{  private static String encodeToString(BufferedImage image,String type){  String imageString=null;  ByteArrayOutputStream bos=new ByteArrayOutputStream();  try {    ImageIO.write(image,type,bos);    byte[] imageBytes=bos.toByteArray();    imageString=DatatypeConverter.printBase64Binary(imageBytes);    bos.close();  } catch (  IOException e) {    e.printStackTrace();  }  return imageString;}  }
class C{  @Override public Vector whatCanGoHere(int[] state){  int curState=state[0];  if (curState < 0)   curState=state[1];  Occurence o=(fCountingStates != null) ? fCountingStates[curState] : null;  int count=state[2];  Vector ret=new Vector();  for (int elemIndex=0; elemIndex < fElemMapSize; elemIndex++) {    int nextState=fTransTable[curState][elemIndex];    if (nextState != -1) {      if (o != null) {        if (curState == nextState) {          if (count >= o.maxOccurs && o.maxOccurs != SchemaSymbols.OCCURRENCE_UNBOUNDED) {            continue;          }        } else         if (count < o.minOccurs) {          continue;        }      }      ret.addElement(fElemMap[elemIndex]);    }  }  return ret;}  }
class C{  public int decrement(int val){  if (val < 0) {    return increment(-val);  }  lock.lock();  int newValue=(value-=val);  lock.unlock();  return newValue;}  }
class C{  public static ServiceType toServiceType(Class cls) throws MarshalException {  if (cls != null)   return toServiceTypeBase(cls,false).type;  return null;}  }
class C{  @Deprecated public static double[] combine(double[] x,double[] y){  int len=0;  if (x != null)   len+=x.length;  if (y != null)   len+=y.length;  double[] z=null;  if (len > 0) {    z=new double[len];    int currentPos=0;    if (x != null) {      System.arraycopy(x,0,z,currentPos,x.length);      currentPos=x.length;    }    if (y != null)     System.arraycopy(y,0,z,currentPos,y.length);  }  return z;}  }
class C{  public JsonArray add(int value){  values.add(Json.value(value));  return this;}  }
class C{  public CreatePageWindow waitToBeDisplayed(){  bobcatWait.withTimeout(Timeouts.BIG).until(ExpectedConditions.visibilityOf(currentWindow));  return this;}  }
class C{  public void handleBtnLogin(ActionEvent event){  try {    Parent login=FXMLLoader.load(getClass().getResource("login.fxml"));    StackPane root=(StackPane)btnLogin.getScene().getRoot();    root.getChildren().add(login);    login.setTranslateX(350);    Timeline timeline=new Timeline();    KeyValue keyValue=new KeyValue(login.translateXProperty(),0);    KeyFrame keyFrame=new KeyFrame(Duration.millis(100),keyValue);    timeline.getKeyFrames().add(keyFrame);    timeline.play();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public GaussWindow(int length,double prescalingFactor){  this(length,DEFAULT_SIGMA,prescalingFactor);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_ROOM_JOIN_FAIL_WRONG_PASSWORD(String value0){  return new SM_SYSTEM_MESSAGE(1300854,value0);}  }
class C{  private String convertToFileName(String string){  return string.replace("/","_").replace("\\","_");}  }
class C{  public void appendPanel(BasePanel panel){  if (panel != null) {    padding.removePadding();    logger.debug(String.format("%s : %s -> %s",Localisation.getString(StandardPanel.class,"StandardPanel.addingPanel"),panel.getClass().getName(),this.getClass().getName()));    for (int index=0; index < panel.box.getComponentCount(); index++) {      box.add(panel.box.getComponent(index));    }    padding.addPadding();  }}  }
class C{  private void debugPrint(String msg){  if (debug) {    System.out.println(toString() + ": " + msg);  }}  }
class C{  public void onNotifyNpcSpawned(int questId,int npcId){  QuestHandler handler=questHandlers.get(questId);  if (handler == null || !(handler instanceof ConstantSpawnHandler)) {    return;  }  ConstantSpawnHandler checker=(ConstantSpawnHandler)handler;  HashSet<Integer> allNpcs=checker.getNpcIds();  if (allNpcs == null) {    return;  }  allNpcs.remove(npcId);}  }
class C{  public static GeometryTypeEnum combineGeometryType(List<GeometryTypeEnum> geometryFeatures){  if (geometryFeatures != null) {    if (geometryFeatures.size() == 1) {      return geometryFeatures.get(0);    } else {      return geometryFeatures.get(0);    }  }  return GeometryTypeEnum.UNKNOWN;}  }
class C{  @Deprecated public static void disableLogging(){  writeLogs(false);}  }
class C{  private boolean unseenNode(Node candidate){  if (candidate != null && !alreadySeen.contains(candidate)) {    current=candidate;    alreadySeen.add(current);    return true;  }  return false;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public StaticInitializer fullCopy(){  StaticInitializer tree=(StaticInitializer)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public void caseLocal(Local l){  setResult(fetchNode(l));}  }
class C{  TxnManagerTransaction(TransactionManager mgr,LogManager logmgr,long id,TaskManager threadpool,WakeupManager wm,TxnSettler settler,Uuid uuid,long lease,boolean persistent,Object externalXid,ConcurrentMap<String,IDirectSpaceProxy> proxiesMap){  if (logmgr == null)   throw new IllegalArgumentException("TxnManagerTransaction: " + "log manager must be non-null");  if (mgr == null)   throw new IllegalArgumentException("TxnManagerTransaction: " + "transaction manager must be non-null");  if (threadpool == null)   throw new IllegalArgumentException("TxnManagerTransaction: " + "threadpool must be non-null");  if (wm == null)   throw new IllegalArgumentException("TxnManagerTransaction: " + "wakeup manager must be non-null");  if (settler == null)   throw new IllegalArgumentException("TxnManagerTransaction: " + "settler must be non-null");  if (uuid == null)   throw new IllegalArgumentException("TxnManagerTransaction: " + "uuid must be non-null");  this.threadpool=threadpool;  this.wm=wm;  this.logmgr=logmgr;  if (externalXid != null) {    _externalXid=externalXid;    str=new GSServerTransaction(mgr,externalXid,lease);    str.id=id;  } else {    _externalXid=null;    str=new ServerTransaction(mgr,id,lease);  }  this.settler=settler;  this.uuid=uuid;  _persistent=persistent;  _proxiesMap=proxiesMap;  finer_op_logger=operationsLogger.isLoggable(Level.FINER);  finest_tr_logger=transactionsLogger.isLoggable(Level.FINEST);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Fall_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200820,skillcaster,skillname);}  }
class C{  public static void checkSubtractionCompatible(final AnyMatrix left,final AnyMatrix right) throws MathIllegalArgumentException {  if ((left.getRowDimension() != right.getRowDimension()) || (left.getColumnDimension() != right.getColumnDimension())) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH_2x2,left.getRowDimension(),left.getColumnDimension(),right.getRowDimension(),right.getColumnDimension());  }}  }
class C{  public static final void updateGroup(Player player,GroupEvent groupEvent){  PlayerGroup group=player.getPlayerGroup2();  if (group != null) {    group.onEvent(new PlayerGroupUpdateEvent(group,player,groupEvent));  }}  }
class C{  public WallSearchQuery fields(List<EnumParam> value){  return unsafeParam("fields",value);}  }
class C{  @Override public void refreshIndex(String rowId,DimensionRow dimensionRow,DimensionRow dimensionRowOld){  refreshIndex(Collections.singletonMap(rowId,new Pair<>(dimensionRow,dimensionRowOld)));}  }
class C{  public static SparseGradient createConstant(final double value){  return new SparseGradient(value,Collections.<Integer,Double>emptyMap());}  }
class C{  public static Vector3f sphericalToCartesianZ(Vector3f sphereCoords,Vector3f store){  store.z=sphereCoords.x * FastMath.sin(sphereCoords.z);  float a=sphereCoords.x * FastMath.cos(sphereCoords.z);  store.x=a * FastMath.cos(sphereCoords.y);  store.y=a * FastMath.sin(sphereCoords.y);  return store;}  }
class C{  public static void recordExplicitUserNavigation(String destinationUrl,int rapporMetric){switch (rapporMetric) {case RAPPOR_ACTION_NAVIGATED_USING_OMNIBOX:    RapporServiceBridge.sampleDomainAndRegistryFromURL("NTP.ExplicitUserAction.PageNavigation.OmniboxNonSearch",destinationUrl);  return;case RAPPOR_ACTION_VISITED_SUGGESTED_TILE:RapporServiceBridge.sampleDomainAndRegistryFromURL("NTP.ExplicitUserAction.PageNavigation.NTPTileClick",destinationUrl);return;default :return;}}  }
class C{  public synchronized int size(){  return count;}  }
class C{  public static float calculateLeft(float top,float right,float bottom,float targetAspectRatio){  final float height=bottom - top;  return right - (targetAspectRatio * height);}  }
class C{  @Override public LimitAngle copySelf(){  return this;}  }
class C{  public void addSaveLatch(String ticket,CountDownLatch latch){  saveLatches.put(ticket,latch);}  }
class C{  private static HelpNode fromXml(InputSource source) throws ParserConfigurationException, SAXException, IOException {  SAXParserFactory factory=SAXParserFactory.newInstance();  SAXParser parser=factory.newSAXParser();  HelpReader reader=new HelpReader();  parser.parse(source,reader);  return reader.root;}  }
class C{  private void inflateEmptyView(){  emptyView.removeAllViewsInLayout();  LayoutInflater.from(mContext).inflate(mEmptyLayout,emptyView);  if (mEmptyLayout == R.layout.layout_empty) {    textEmpty=(TextView)emptyView.findViewById(R.id.text_empty);    inflateEmptyText();    inflateEmptyTextColor();  }}  }
class C{  @Override public final void writeShort(int v) throws IOException {  work[0]=(byte)v;  work[1]=(byte)(v >> 8);  dis.write(work,0,2);}  }
class C{  public static boolean supports(String db,int majorVersion,int minorVersion){  return MYSQL_DB_NAME.equals(db) && majorVersion == 5;}  }
class C{  public void draw(float[] mvpMatrix,FloatBuffer vertexBuffer,int firstVertex,int vertexCount,int coordsPerVertex,int vertexStride,float[] texMatrix,FloatBuffer texBuffer,int textureId,int texStride){  GlUtil.checkGlError("draw start");  GLES20.glUseProgram(programHandle);  GlUtil.checkGlError("glUseProgram");  GLES20.glActiveTexture(GLES20.GL_TEXTURE0);  GLES20.glBindTexture(textureTarget,textureId);  GLES20.glUniformMatrix4fv(mvpMatrixLoc,1,false,mvpMatrix,0);  GlUtil.checkGlError("glUniformMatrix4fv");  GLES20.glUniformMatrix4fv(texMatrixLoc,1,false,texMatrix,0);  GlUtil.checkGlError("glUniformMatrix4fv");  GLES20.glEnableVertexAttribArray(positionLoc);  GlUtil.checkGlError("glEnableVertexAttribArray");  GLES20.glVertexAttribPointer(positionLoc,coordsPerVertex,GLES20.GL_FLOAT,false,vertexStride,vertexBuffer);  GlUtil.checkGlError("glVertexAttribPointer");  GLES20.glEnableVertexAttribArray(textureCoordLoc);  GlUtil.checkGlError("glEnableVertexAttribArray");  GLES20.glVertexAttribPointer(textureCoordLoc,2,GLES20.GL_FLOAT,false,texStride,texBuffer);  GlUtil.checkGlError("glVertexAttribPointer");  if (kernelLoc >= 0) {    GLES20.glUniform1fv(kernelLoc,KERNEL_SIZE,kernel,0);    GLES20.glUniform2fv(texOffsetLoc,KERNEL_SIZE,texOffset,0);    GLES20.glUniform1f(colorAdjustLoc,colorAdjust);  }  GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP,firstVertex,vertexCount);  GlUtil.checkGlError("glDrawArrays");  GLES20.glDisableVertexAttribArray(positionLoc);  GLES20.glDisableVertexAttribArray(textureCoordLoc);  GLES20.glBindTexture(textureTarget,0);  GLES20.glUseProgram(0);}  }
class C{  static String generateErrorCorrection(CharSequence dataCodewords,int errorCorrectionLevel){  int k=getErrorCorrectionCodewordCount(errorCorrectionLevel);  char[] e=new char[k];  int sld=dataCodewords.length();  for (int i=0; i < sld; i++) {    int t1=(dataCodewords.charAt(i) + e[e.length - 1]) % 929;    int t2;    int t3;    for (int j=k - 1; j >= 1; j--) {      t2=(t1 * EC_COEFFICIENTS[errorCorrectionLevel][j]) % 929;      t3=929 - t2;      e[j]=(char)((e[j - 1] + t3) % 929);    }    t2=(t1 * EC_COEFFICIENTS[errorCorrectionLevel][0]) % 929;    t3=929 - t2;    e[0]=(char)(t3 % 929);  }  StringBuilder sb=new StringBuilder(k);  for (int j=k - 1; j >= 0; j--) {    if (e[j] != 0) {      e[j]=(char)(929 - e[j]);    }    sb.append(e[j]);  }  return sb.toString();}  }
class C{  public PhotosReportQuery reason(ReportReason value){  return unsafeParam("reason",value);}  }
class C{  public GeometricMean(SumOfLogs sumOfLogs){  this.sumOfLogs=sumOfLogs;  incSumOfLogs=false;}  }
class C{  public AdsImportTargetContactsQuery(VkApiClient client,UserActor actor,int accountId,int targetGroupId,String contacts){  super(client,"ads.importTargetContacts",Integer.class);  accessToken(actor.getAccessToken());  accountId(accountId);  targetGroupId(targetGroupId);  contacts(contacts);}  }
class C{  public static void init(Context context){  if (cameraManager == null) {    cameraManager=new CameraManager(context);  }}  }
class C{  @Deprecated public static byte matchColor(int r,int g,int b){  return matchColor(new Color(r,g,b));}  }
class C{  @Override public String writeToString(Node wnode) throws DOMException, LSException {  XMLSerializer ser=null;  String ver=_getXmlVersion(wnode);  if (ver != null && ver.equals("1.1")) {    if (xml11Serializer == null) {      xml11Serializer=new XML11Serializer();      initSerializer(xml11Serializer);    }    copySettings(serializer,xml11Serializer);    ser=xml11Serializer;  } else {    ser=serializer;  }  StringWriter destination=new StringWriter();  try {    prepareForSerialization(ser,wnode);    ser._format.setEncoding("UTF-16");    ser.setOutputCharStream(destination);    if (wnode.getNodeType() == Node.DOCUMENT_NODE) {      ser.serialize((Document)wnode);    } else     if (wnode.getNodeType() == Node.DOCUMENT_FRAGMENT_NODE) {      ser.serialize((DocumentFragment)wnode);    } else     if (wnode.getNodeType() == Node.ELEMENT_NODE) {      ser.serialize((Element)wnode);    } else {      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.SERIALIZER_DOMAIN,"unable-to-serialize-node",null);      if (ser.fDOMErrorHandler != null) {        DOMErrorImpl error=new DOMErrorImpl();        error.fType="unable-to-serialize-node";        error.fMessage=msg;        error.fSeverity=DOMError.SEVERITY_FATAL_ERROR;        ser.fDOMErrorHandler.handleError(error);      }      throw new LSException(LSException.SERIALIZE_ERR,msg);    }  } catch (  LSException lse) {    throw lse;  }catch (  RuntimeException e) {    if (e == DOMNormalizer.abort) {      return null;    }    throw (LSException)DOMUtil.createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();  }catch (  IOException ioe) {    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"STRING_TOO_LONG",new Object[]{ioe.getMessage()});    throw new DOMException(DOMException.DOMSTRING_SIZE_ERR,msg);  } finally {    ser.clearDocumentState();  }  return destination.toString();}  }
class C{  public void resetCircleColors(){  mCircleColors=new ArrayList<Integer>();}  }
class C{  public ForceDirectedLayout(String group,boolean enforceBounds,boolean runonce){  super(group);  m_nodeGroup=PrefuseLib.getGroupName(group,Graph.NODES);  m_edgeGroup=PrefuseLib.getGroupName(group,Graph.EDGES);  m_enforceBounds=enforceBounds;  m_runonce=runonce;  m_fsim=new ForceSimulator();  m_fsim.addForce(new NBodyForce());  m_fsim.addForce(new SpringForce());  m_fsim.addForce(new DragForce());}  }
class C{  public RequestHandle post(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){  return post(context,url,paramsToEntity(params,responseHandler),null,responseHandler);}  }
class C{  private void DrawPrimitive(DrawLine l,World w) throws Exception {  XMLBlockState blockType=new XMLBlockState(l.getType(),l.getColour(),l.getFace(),l.getVariant());  if (!blockType.isValid())   throw new Exception("Unrecognised block type: " + l.getType().value());  XMLBlockState stepType=blockType;  if (l.getSteptype() != null) {    stepType=new XMLBlockState(l.getSteptype(),l.getColour(),l.getFace(),l.getVariant());    if (!stepType.isValid())     throw new Exception("Unrecognised block type: " + l.getSteptype().value());  }  float dx=(l.getX2() - l.getX1());  float dy=(l.getY2() - l.getY1());  float dz=(l.getZ2() - l.getZ1());  float steps=(int)Math.max(Math.max(Math.abs(dx),Math.abs(dy)),Math.abs(dz));  if (steps < 1)   steps=1;  dx/=steps;  dy/=steps;  dz/=steps;  int prevY=l.getY1();  int prevZ=l.getZ1();  int prevX=l.getX1();  for (int i=0; i <= steps; i++) {    int x=Math.round(l.getX1() + (float)i * dx);    int y=Math.round(l.getY1() + (float)i * dy);    int z=Math.round(l.getZ1() + (float)i * dz);    BlockPos pos=new BlockPos(x,y,z);    clearEntities(w,x - 0.5,y - 0.5,z - 0.5,x + 0.5,y + 0.5,z + 0.5);    setBlockState(w,pos,y == prevY ? blockType : stepType);    if (x != prevX && z != prevZ) {      pos=new BlockPos(x,y,prevZ);      clearEntities(w,x - 0.5,y - 0.5,prevZ - 0.5,x + 0.5,y + 0.5,prevZ + 0.5);      setBlockState(w,pos,y == prevY ? blockType : stepType);    }    prevY=y;    prevX=x;    prevZ=z;  }}  }
class C{  private boolean sameQuery(byte[] a,byte[] b){  int top=Math.min(a.length,b.length);  for (int i=0; i < top; i++) {    if (a[i] != b[i])     return false;    if (a[i] == '\t')     return true;  }  return a.length == b.length;}  }
class C{  @deprecated protected int writeValueAndFinal(int i,boolean isFinal){  if ((0 <= i) && (i <= 64)) {    return write(16 + i << 1 | (isFinal ? 1 : 0));  }  int length=1;  if ((i < 0) || (i > 16777215)) {    this.intBytes[0]=Byte.MAX_VALUE;    this.intBytes[1]=((byte)(i >> 24));    this.intBytes[2]=((byte)(i >> 16));    this.intBytes[3]=((byte)(i >> 8));    this.intBytes[4]=((byte)i);    length=5;  } else {    if (i <= 6911) {      this.intBytes[0]=((byte)(81 + (i >> 8)));    } else {      if (i <= 1179647) {        this.intBytes[0]=((byte)(108 + (i >> 16)));      } else {        this.intBytes[0]=126;        this.intBytes[1]=((byte)(i >> 16));        length=2;      }      this.intBytes[(length++)]=((byte)(i >> 8));    }    this.intBytes[(length++)]=((byte)i);  }  this.intBytes[0]=((byte)(this.intBytes[0] << 1 | (isFinal ? 1 : 0)));  return write(this.intBytes,length);}  }
class C{  private void writeInt(String key,int value){  SharedPreferences.Editor ed=mSharedPreferences.edit();  ed.putInt(key,value);  ed.apply();}  }
class C{  public PowellOptimizer(double rel,double abs){  this(rel,abs,null);}  }
class C{  public static void changeViceCaptain(Player player,AssignType assignType){  PlayerAlliance alliance=player.getPlayerAlliance2();  if (alliance != null) {    alliance.onEvent(new AssignViceCaptainEvent(alliance,player,assignType));  }}  }
class C{  public ElementType(String name,int model,int memberOf,int flags,Schema schema){  theName=name;  theModel=model;  theMemberOf=memberOf;  theFlags=flags;  theAtts=new AttributesImpl();  theSchema=schema;  theNamespace=namespace(name,false);  theLocalName=localName(name);}  }
class C{  XSParticleDecl traverseSequence(Element seqDecl,XSDocumentInfo schemaDoc,SchemaGrammar grammar,int allContextFlags,XSObject parent){  return traverseSeqChoice(seqDecl,schemaDoc,grammar,allContextFlags,false,parent);}  }
class C{  public static String encodeFromFile(String filename) throws java.io.IOException {  String encodedData=null;  InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4 + 1),40)];    int length=0;    int numBytes=0;    bis=new InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  public BetaDistribution(double alpha,double beta,double inverseCumAccuracy){  super(inverseCumAccuracy);  this.alpha=alpha;  this.beta=beta;  this.z=Gamma.logGamma(alpha) + Gamma.logGamma(beta) - Gamma.logGamma(alpha + beta);}  }
class C{  public ObjectFactory(){}  }
class C{  public boolean accept(File file){  return false;}  }
class C{  public void reset(byte[] buf,int offset,int length){  this.buf=buf;  this.offset=offset;  this.length=length;}  }
class C{  @Override public void resolve(AbsoluteTableIdentifier absoluteTableIdentifier){}  }
class C{  private static List<Path> file_listing_(Path dir) throws IOException {  try (Stream<Path> files=Files.list(dir)){    return files.collect(Collectors.toList());  } }  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHANGE_REMAIN_PLAYTIME(String value0){  return new SM_SYSTEM_MESSAGE(1300720,value0);}  }
class C{  private static RotateBitmapResult rotateBitmapByExif(Bitmap bitmap,ExifInterface exif){  int degrees;  int orientation=exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,ExifInterface.ORIENTATION_NORMAL);switch (orientation) {case ExifInterface.ORIENTATION_ROTATE_90:    degrees=90;  break;case ExifInterface.ORIENTATION_ROTATE_180:degrees=180;break;case ExifInterface.ORIENTATION_ROTATE_270:degrees=270;break;default :degrees=0;break;}return new RotateBitmapResult(bitmap,degrees);}  }
class C{  public double distance(final Line line){  final Vector3D normal=Vector3D.crossProduct(direction,line.direction);  final double n=normal.getNorm();  if (n < Precision.SAFE_MIN) {    return distance(line.zero);  }  final double offset=line.zero.subtract(zero).dotProduct(normal) / n;  return FastMath.abs(offset);}  }
class C{  public Polyline2D(){  xpoints=new float[4];  ypoints=new float[4];}  }
class C{  @Override public int hashCode(){  IJSpace thisProxy=getProxy();  if (thisProxy == null)   return -1;  return thisProxy.hashCode();}  }
class C{  public double totalCount(){  if (!dirty) {    return cacheTotal;  }  double total=0.0;  for (  Entry<E,Double> entry : entries.entrySet()) {    total+=entry.getValue();  }  cacheTotal=total;  dirty=false;  return total;}  }
class C{  private static int byteswap(int val){  return (((val & 0xff000000) >>> 24) + ((val & 0x00ff0000) >>> 8) + ((val & 0x0000ff00) << 8)+ ((val & 0x000000ff) << 24));}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  processRequest(request,response);}  }
class C{  private static Rectangle[] buildRectList(BitSet subset,Rectangle[] rectList){  Rectangle[] inside=new Rectangle[subset.cardinality()];  int count=0;  for (int i=subset.nextSetBit(0); i >= 0; i=subset.nextSetBit(i + 1)) {    inside[count++]=new Rectangle(rectList[i]);  }  return inside;}  }
class C{  public ArrayList<DataHolder> readGallery(final GalleryActivity activity){  ArrayList<DataHolder> listOfAllImages=new ArrayList<>();  prepareDataForReading();  if (activity.getType() == Const.GalleryType.IMAGE || activity.getType() == Const.GalleryType.IMAGE_VIDEO) {    listOfAllImages.addAll(getImages());  }  if (activity.getType() == Const.GalleryType.VIDEO || activity.getType() == Const.GalleryType.IMAGE_VIDEO) {    listOfAllImages.addAll(getVideos());  }  Collections.sort(listOfAllImages,new DataHolderComparator());  return listOfAllImages;}  }
class C{  public FieldVector3D<T> subtract(final T factor,final FieldVector3D<T> v){  return new FieldVector3D<T>(x.getField().getOne(),this,factor.negate(),v);}  }
class C{  public void action(){synchronized (myAgent) {    NGramDocumentComparatorAgent a=(NGramDocumentComparatorAgent)myAgent;    ACLMessage msg=new ACLMessage(ACLMessage.AGREE);    msg.setSender(a.getAID());    msg.addReceiver(a.ResultConsumer);    try {      msg.setContentObject(a.getName());    } catch (    IOException ex) {      System.err.println("Cannot send move completion message. Sending empty message.");      ex.printStackTrace(System.err);    }    a.send(msg);    if (!a.Silent) {synchronized (System.err) {        System.err.println("Sending move completion message");      }    }    a.addBehaviour(new ReceiveTextsBehaviour(a,100));  }}  }
class C{  public Matrix arrayTimesEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] * B.A[i][j];    }  }  return this;}  }
class C{  public SuperMapDemoAnnotation(LatLng latLng){  this.latLng=latLng;}  }
class C{  public static void write(String fileName,Column column) throws IOException {  try (CSVWriter writer=new CSVWriter(new FileWriter(fileName))){    String[] header={column.name()};    writer.writeNext(header);    for (int r=0; r < column.size(); r++) {      String[] entries={column.getString(r)};      writer.writeNext(entries);    }  } }  }
class C{  public AvgTask(Class<R> reduceType,Task<T> task,AsyncResultFilter<T> filter) throws IllegalArgumentException {  super(task,filter);  this.reducer=new AvgReducer<T,R>(reduceType);}  }
class C{  protected void notifyChangingListeners(int oldValue,int newValue){  for (  OnWheelChangedListener listener : changingListeners) {    listener.onChanged(this,oldValue,newValue);  }}  }
class C{  private void sendOnTextChanged(CharSequence s,int start,int before,int count){  if (mListeners != null) {    for (int i=0; i < mListeners.size(); i++) {      mListeners.get(i).onTextChanged(s,start,before,count);    }  }}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=getItemCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  private static long countBytes(String s,boolean shortLength) throws UTFDataFormatException {  long result=0;  final int length=s.length();  for (int i=0; i < length; ++i) {    char ch=s.charAt(i);    if (ch != 0 && ch <= 127) {      ++result;    } else     if (ch <= 2047) {      result+=2;    } else {      result+=3;    }    if (shortLength && result > 65535) {      throw new UTFDataFormatException("String more than 65535 UTF bytes long");    }  }  return result;}  }
class C{  public static String toBase58(byte[] b){  if (b.length == 0) {    return "";  }  int lz=0;  while (lz < b.length && b[lz] == 0) {    ++lz;  }  StringBuilder s=new StringBuilder();  BigInteger n=new BigInteger(1,b);  while (n.compareTo(BigInteger.ZERO) > 0) {    BigInteger[] r=n.divideAndRemainder(BigInteger.valueOf(58));    n=r[0];    char digit=b58[r[1].intValue()];    s.append(digit);  }  while (lz > 0) {    --lz;    s.append("1");  }  return s.reverse().toString();}  }
class C{  protected String encodeCookie(SerializableOkHttpCookies cookie){  if (cookie == null)   return null;  ByteArrayOutputStream os=new ByteArrayOutputStream();  try {    ObjectOutputStream outputStream=new ObjectOutputStream(os);    outputStream.writeObject(cookie);  } catch (  IOException e) {    Log.d(LOG_TAG,"IOException in encodeCookie",e);    return null;  }  return byteArrayToHexString(os.toByteArray());}  }
class C{  public static DecodeBitmapResult decodeSampledBitmap(Context context,Uri uri,int reqWidth,int reqHeight){  try {    ContentResolver resolver=context.getContentResolver();    BitmapFactory.Options options=decodeImageForOption(resolver,uri);    options.inSampleSize=Math.max(calculateInSampleSizeByReqestedSize(options.outWidth,options.outHeight,reqWidth,reqHeight),calculateInSampleSizeByMaxTextureSize(options.outWidth,options.outHeight));    Bitmap bitmap=decodeImage(resolver,uri,options);    return new DecodeBitmapResult(bitmap,options.inSampleSize);  } catch (  Exception e) {    throw new RuntimeException("Failed to load sampled bitmap: " + uri + "\r\n"+ e.getMessage(),e);  }}  }
class C{  private static boolean findActivity(List<ResolveInfo> apps,ComponentName component){  final String className=component.getClassName();  for (  ResolveInfo info : apps) {    final ActivityInfo activityInfo=info.activityInfo;    if (activityInfo.name.equals(className)) {      return true;    }  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_PROTECT_SKILL_A_to_ME(String skillname,String skillcaster){  return new SM_SYSTEM_MESSAGE(1201171,skillname,skillcaster);}  }
class C{  protected boolean hasColumn(String name){  return getColumnNumber(name) != -1;}  }
class C{  public void animateY(int durationMillis){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setDuration(durationMillis);  animatorY.addUpdateListener(mListener);  animatorY.start();}  }
class C{  private static int calculateBestInSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float inSampleSize=1.0f;  while ((inSampleSize * 2) <= ratio) {    inSampleSize*=2;  }  return (int)inSampleSize;}  }
class C{  public static byte[] toByteArray(Reader input,String encoding) throws IOException {  return toByteArray(input,Charsets.toCharset(encoding));}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  AlignmentViewer viewer=(AlignmentViewer)getViewer();  String fastA=viewer.getAlignmentViewerPanel().getSelectedAlignment();  if (fastA != null) {    StringWriter w=new StringWriter();    BufferedReader r=new BufferedReader(new StringReader(fastA));    String aLine;    while ((aLine=r.readLine()) != null) {      aLine=aLine.trim();      if (aLine.startsWith(">"))       w.write(aLine + "\n"); else {        for (int i=0; i < aLine.length() - 2; i+=3) {          w.write(SequenceUtils.getAminoAcid(aLine.charAt(i),aLine.charAt(i + 1),aLine.charAt(i + 2)));        }        w.write("\n");      }    }    System.out.println(w.toString());    NotificationsInSwing.showInformation(viewer.getFrame(),w.toString());  }}  }
class C{  private boolean isPrimitiveBooleanType(Field field){  Class<?> fieldType=field.getType();  if ("boolean".equals(fieldType.getName())) {    return true;  }  return false;}  }
class C{  public GroupsEditQuery marketCity(Integer... value){  return unsafeParam("market_city",value);}  }
class C{  private void unlinkReverse(){  if (reverse != null) {    reverse.reverse=null;  }  reverse=null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnAttacked_INTERVAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200984,skilltarget,num0,skillcaster,skillname);}  }
class C{  public void addTypeParameter(TypeVariable node){  List<TypeVariable> list=(parent == null || state == null) ? getTypeParameterListNoTransform() : getTypeParameterList();  list.addChild(node);}  }
class C{  public static float adjustDamages(Creature attacker,Creature target,float damages,int pvpDamage,boolean useMovement){  if (attacker instanceof Npc) {    if (((Npc)attacker).getAi2() != null) {      if (((Npc)attacker).getAi2().getName().equalsIgnoreCase("artifact")) {        return damages;      }    }  }  if (attacker.isPvpTarget(target)) {    if (pvpDamage > 0) {      damages*=pvpDamage * 0.01;    }    damages=Math.round(damages * 0.50f);    float pvpAttackBonus=attacker.getGameStats().getStat(StatEnum.PVP_ATTACK_RATIO,0).getCurrent();    float pvpDefenceBonus=target.getGameStats().getStat(StatEnum.PVP_DEFEND_RATIO,0).getCurrent();switch (elements) {case NONE:      pvpAttackBonus+=attacker.getGameStats().getStat(StatEnum.PVP_PHYSICAL_ATTACK,0).getCurrent();    pvpDefenceBonus+=target.getGameStats().getStat(StatEnum.PVP_PHYSICAL_DEFEND,0).getCurrent();  break;case FIRE:case WATER:case WIND:case EARTH:case LIGHT:case DARK:pvpAttackBonus+=attacker.getGameStats().getStat(StatEnum.PVP_MAGICAL_ATTACK,0).getCurrent();pvpDefenceBonus+=target.getGameStats().getStat(StatEnum.PVP_MAGICAL_DEFEND,0).getCurrent();break;default :break;}pvpAttackBonus=pvpAttackBonus * 0.001f;pvpDefenceBonus=pvpDefenceBonus * 0.001f;damages=Math.round(damages + (damages * pvpAttackBonus) - (damages * pvpDefenceBonus));if (attacker.getRace() != target.getRace() && !attacker.isInInstance()) {damages*=Influence.getInstance().getPvpRaceBonus(attacker.getRace());}} else if (target instanceof Npc) {int levelDiff=target.getLevel() - attacker.getLevel();damages*=(1f - getNpcLevelDiffMod(levelDiff,0));}if (useMovement) {damages=movementDamageBonus(attacker,damages);}return damages;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_HE_BECOME_OFFLINE(String value0){  return new SM_SYSTEM_MESSAGE(1300222,value0);}  }
class C{  public void processAttributesDom(){  processNode(getDomDoc());}  }
class C{  public static boolean isFifoGroupingPoll(int mod){  return Modifiers.contains(mod,FIFO_GROUPING_POLL);}  }
class C{  public DataOutputBuffer reset(){  this.written=0;  buffer.reset();  return this;}  }
class C{  public LoadObject(int state){  this.state=state;}  }
class C{  @Override protected String doInBackground(Void... params){  try {    String res=launchPing(urlToPing);    mTraceRouteResult.append(res);    publishProgress(res);    TraceRouteContainer trace;    if (res.contains(UNREACHABLE_PING) && !res.contains(EXCEED_PING)) {      trace=new TraceRouteContainer("",parseIpFromPing(res),elapsedTime,false);    } else {      trace=new TraceRouteContainer("",parseIpFromPing(res),ttl == maxTtl ? Float.parseFloat(parseTimeFromPing(res)) : elapsedTime,true);      InetAddress inetAddr=InetAddress.getByName(trace.getIp());      Log.e("TAG","getIP is " + trace.getIp());      String hostname=inetAddr.getHostName();      String canonicalHostname=inetAddr.getCanonicalHostName();      trace.setHostname(hostname);      traces.add(trace);    }    return res;  } catch (  final Exception e) {    e.printStackTrace();  }  return "";}  }
class C{  public void error(String message){  sendPluginResult(new PluginResult(PluginResult.Status.ERROR,message));}  }
class C{  public boolean isLong(String key){  Object val=get(key);  return val instanceof Long;}  }
class C{  public static Zmat[][] o(Zmat A,int ii[],int jj[]) throws JampackException {  int i, j;  A.getProperties();  int m=ii.length;  int n=jj.length;  if (ii[0] < A.bx || ii[m - 1] > A.rx + 1) {    throw new JampackException("Illegal row array.");  }  for (i=1; i < m; i++) {    if (ii[i - 1] >= ii[i]) {      throw new JampackException("Illegal row array.");    }  }  if (jj[0] < A.bx || jj[n - 1] > A.cx + 1) {    throw new JampackException("Illegal column array.");  }  for (j=1; j < n; j++) {    if (jj[j - 1] >= jj[j]) {      throw new JampackException("Illegal column array.");    }  }  Zmat B[][]=new Zmat[m - 1][n - 1];  for (i=0; i < m - 1; i++) {    for (j=0; j < n - 1; j++) {      B[i][j]=A.get(ii[i],ii[i + 1] - 1,jj[j],jj[j + 1] - 1);    }  }  return B;}  }
class C{  public static WKTGeometry parseWKTString(String wktString){  if (wktParser == null) {    initialise();  }  if (wktString == null) {    return null;  }  WKTGeometry wktGeometry=new WKTGeometry();  if (wktString.startsWith(WKT_PREFIX)) {    wktString=wktString.substring(WKT_PREFIX.length());  }  try {    org.opengis.geometry.Geometry geometry=wktParser.parse(wktString);    if (geometry instanceof MultiPrimitiveImpl) {      int index=0;      MultiPrimitiveImpl multiLine=(MultiPrimitiveImpl)geometry;      for (      Primitive primitive : multiLine.getElements()) {        if (primitive instanceof CurveImpl) {          WKTSegmentList ptList=new WKTSegmentList();          wktGeometry.setGeometryType(getWKTType(WKT_MULTILINESTRING));          CurveImpl curve=(CurveImpl)primitive;          extractLineSegments(curve,ptList);          wktGeometry.addSegmentList(index,ptList);        } else         if (primitive instanceof PointImpl) {          WKTSegmentList ptList=new WKTSegmentList();          wktGeometry.setGeometryType(getWKTType(WKT_MULTIPOINT));          PointImpl point=(PointImpl)primitive;          WKTPoint wktPoint=new WKTPoint(point.getDirectPosition());          ptList.addPoint(wktPoint);          wktGeometry.addSegmentList(index,ptList);        } else         if (primitive instanceof SurfaceImpl) {          wktGeometry.setGeometryType(getWKTType(WKT_MULTIPOLYGON));          SurfaceImpl surfaceImpl=(SurfaceImpl)primitive;          for (          Ring ring : surfaceImpl.getBoundaryRings()) {            WKTSegmentList ptList=new WKTSegmentList();            for (            Primitive ringPrimitive : ring.getElements()) {              if (ringPrimitive instanceof CurveImpl) {                CurveImpl curve=(CurveImpl)ringPrimitive;                extractLineSegments(curve,ptList);              }            }            wktGeometry.addSegmentList(index,ptList);          }        }        index++;      }    } else     if (geometry instanceof PointImpl) {      wktGeometry.setGeometryType(getWKTType(WKT_POINT));      PointImpl pointImpl=(PointImpl)geometry;      WKTSegmentList ptList=new WKTSegmentList();      wktGeometry.addSegmentList(0,ptList);      WKTPoint point=new WKTPoint(pointImpl.getDirectPosition());      ptList.addPoint(point);    } else     if (geometry instanceof CurveImpl) {      wktGeometry.setGeometryType(getWKTType(WKT_LINESTRING));      CurveImpl curveImpl=(CurveImpl)geometry;      WKTSegmentList ptList=new WKTSegmentList();      wktGeometry.addSegmentList(0,ptList);      extractLineSegments(curveImpl,ptList);    } else     if (geometry instanceof SurfaceImpl) {      wktGeometry.setGeometryType(getWKTType(WKT_POLYGON));      SurfaceImpl surfaceImpl=(SurfaceImpl)geometry;      for (      Ring ring : surfaceImpl.getBoundaryRings()) {        WKTSegmentList ptList=new WKTSegmentList();        wktGeometry.addSegmentList(0,ptList);        for (        Primitive primitive : ring.getElements()) {          if (primitive instanceof CurveImpl) {            CurveImpl curve=(CurveImpl)primitive;            extractLineSegments(curve,ptList);          }        }      }    }  } catch (  ParseException e) {    wktGeometry.setValid(false);    for (    WKTType wktType : wktTypeList) {      if (wktString.startsWith(wktType.getName())) {        wktGeometry.setGeometryType(wktType);      }    }  }  return wktGeometry;}  }
class C{  public boolean initialiseNativeWithOptions(String resourcesDirectoryPath,int pattSize,int pattCountMax){  if (!loadedNative)   return false;  if (!NativeInterface.arwInitialiseARWithOptions(pattSize,pattCountMax)) {    Log.e(TAG,"Error initialising native library!");    return false;  }  Log.i(TAG,"ARToolKit version: " + NativeInterface.arwGetARToolKitVersion());  if (!NativeInterface.arwChangeToResourcesDir(resourcesDirectoryPath)) {    Log.i(TAG,"Error while attempting to change working directory to resources directory.");  }  initedNative=true;  return true;}  }
class C{  public int dpToPx(@AndroidDpCoordinate int dp){  return (int)(0.5f + dp * myDpiFactor);}  }
class C{  public static boolean isFileNewer(File file,long timeMillis){  if (file == null) {    throw new IllegalArgumentException("No specified file");  }  if (!file.exists()) {    return false;  }  return file.lastModified() > timeMillis;}  }
class C{  @Override public boolean hasChildNodes(){  if (needsSyncChildren()) {    synchronizeChildren();  }  return value != null;}  }
class C{  @Override public float toFloat(){  return 0;}  }
class C{  public RunnableDistributedTaskAdapter(){}  }
class C{  public ThresholdValues(double[] range){  if (range.length != 2)   throw new IllegalArgumentException("range must be 2 elements");  if (range[0] >= range[1])   throw new IllegalArgumentException("range is not valid");  this.lowThreshold=range[0];  this.currentLowThreshold=lowThreshold;  this.highThreshold=range[1];  this.currentHighThreshold=highThreshold;}  }
class C{  public void animateXY(int durationMillisX,int durationMillisY,Easing.EasingOption easingX,Easing.EasingOption easingY){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setInterpolator(Easing.getEasingFunctionFromOption(easingY));  animatorY.setDuration(durationMillisY);  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setInterpolator(Easing.getEasingFunctionFromOption(easingX));  animatorX.setDuration(durationMillisX);  if (durationMillisX > durationMillisY) {    animatorX.addUpdateListener(mListener);  } else {    animatorY.addUpdateListener(mListener);  }  animatorX.start();  animatorY.start();}  }
class C{  public boolean isReifiable(){  ASTNode$State state=state();  try {    if (isRawType())     return true;    for (int i=0; i < getNumArgument(); ++i) {      if (!getArgument(i).type().isWildcard())       return false;    }    return true;  }  finally {  }}  }
class C{  public static boolean isNetWorkConnected(Context context){  if (context != null) {    ConnectivityManager mConnectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);    NetworkInfo mNetworkInfo=mConnectivityManager.getActiveNetworkInfo();    if (mNetworkInfo != null) {      return mNetworkInfo.isAvailable() && mNetworkInfo.isConnected();    }  }  return false;}  }
class C{  public HumanTime s(int n){  delta+=SECOND * Math.abs(n);  return this;}  }
class C{  @Override public void submit(StreamOp op){  writeSinceLastAcquire=true;  try {    limiter.apply(op);  } catch (  OverCapacityException ex) {    op.fail(ex);    return;  }  if (serviceTimeoutMs > 0) {    scheduleTimeout(op);  }  boolean notifyAcquireThread=false;  boolean completeOpNow=false;  boolean success=true;  if (StreamStatus.isUnavailable(status)) {    op.fail(new StreamUnavailableException("Stream " + name + " is closed."));    return;  }  if (StreamStatus.INITIALIZED == status && writer != null) {    completeOpNow=true;    success=true;  } else {synchronized (this) {      if (StreamStatus.isUnavailable(status)) {        completeOpNow=true;        success=true;      }      if (StreamStatus.INITIALIZED == status) {        completeOpNow=true;        success=true;      } else       if (StreamStatus.BACKOFF == status && lastAcquireFailureWatch.elapsed(TimeUnit.MILLISECONDS) < nextAcquireWaitTimeMs) {        completeOpNow=true;        success=false;      } else       if (failFastOnStreamNotReady) {        notifyAcquireThread=true;        completeOpNow=false;        success=false;        op.fail(new StreamNotReadyException("Stream " + name + " is not ready; status = "+ status));      } else {        notifyAcquireThread=true;        pendingOps.add(op);        pendingOpsCounter.inc();        if (1 == pendingOps.size()) {          if (op instanceof HeartbeatOp) {            ((HeartbeatOp)op).setWriteControlRecord(true);          }        }      }    }  }  if (notifyAcquireThread && !suspended) {    scheduleTryAcquireOnce(0L);  }  if (completeOpNow) {    executeOp(op,success);  }}  }
class C{  @deprecated public final TimeZone parse(String text) throws ParseException {  ParsePosition pos=new ParsePosition(0);  TimeZone tz=parse(text,pos);  if (pos.getErrorIndex() >= 0) {    throw new ParseException("Unparseable time zone: \"" + text + "\"",0);  }  assert (tz != null);  return tz;}  }
class C{  private void addContribution(final SubCircle sub,final boolean reversed,final BSPTree<Sphere2D> node){  final Circle circle=(Circle)sub.getHyperplane();  final List<Arc> arcs=((ArcsSet)sub.getRemainingRegion()).asList();  for (  final Arc a : arcs) {    final Vertex start=new Vertex((S2Point)circle.toSpace(new S1Point(a.getInf())));    final Vertex end=new Vertex((S2Point)circle.toSpace(new S1Point(a.getSup())));    start.bindWith(circle);    end.bindWith(circle);    final Edge edge;    if (reversed) {      edge=new Edge(end,start,a.getSize(),circle.getReverse());    } else {      edge=new Edge(start,end,a.getSize(),circle);    }    edgeToNode.put(edge,node);    nodeToEdgesList.get(node).add(edge);  }}  }
class C{  @Override public boolean hasPassword(){  return propertyMap.containsKey(PASSWORD_KEY);}  }
class C{  public static boolean isMemoryOnlySearch(int mod){  return Modifiers.contains(mod,UpdateModifiers.MEMORY_ONLY_SEARCH);}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  this(AccountManager.get(context),account,authTokenType,notifyAuthFailure);}  }
class C{  @Override public int countMissing(){  int count=0;  for (int i=0; i < size(); i++) {    if (MISSING_VALUE.equals(get(i))) {      count++;    }  }  return count;}  }
class C{  public WallForce(float gravConst,float x1,float y1,float x2,float y2){  params=new float[]{gravConst};  minValues=new float[]{DEFAULT_MIN_GRAV_CONSTANT};  maxValues=new float[]{DEFAULT_MAX_GRAV_CONSTANT};  this.x1=x1;  this.y1=y1;  this.x2=x2;  this.y2=y2;  dx=x2 - x1;  dy=y2 - y1;  float r=(float)Math.sqrt(dx * dx + dy * dy);  if (dx != 0.0)   dx/=r;  if (dy != 0.0)   dy/=r;}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  FileModelDao.dropTable(db,ifExists);}  }
class C{  public HumanTime d(){  return d(1);}  }
class C{  private File acquireUniqueFile(final String originalFilename) throws IOException {  String filename=originalFilename;  int unique=0;  for (; ; ) {    File f=new File(filename);    createParentDirectories(f);    boolean created=f.createNewFile();    if (created) {      return f;    } else     if (append && !sizeRollingPolicy.hasReachedLimit(f)) {      return f;    } else {      ++unique;      if (originalFilename.endsWith(".log")) {        filename=originalFilename.replace(".log","__" + unique + ".log");      } else {        filename=originalFilename + "__" + unique;      }    }  }}  }
class C{  public boolean dump_intra(){  return soot.PhaseOptions.getBoolean(options,"dump-intra");}  }
class C{  public Plan makeProductPlan(Plan trunk){  Plan p=makeSelectPlan();  return new MultiBufferProductPlan(trunk,p,tx);}  }
class C{  private void drawLineProgress(Canvas canvas){  float unitDegrees=(float)(2.0f * Math.PI / mLineCount);  float outerCircleRadius=mRadius;  float interCircleRadius=mRadius - mLineWidth;  int progressLineCount=(int)((float)getProgress() / (float)getMax() * mLineCount);  for (int i=0; i < mLineCount; i++) {    float rotateDegrees=i * unitDegrees;    float startX=mCenterX + (float)Math.sin(rotateDegrees) * interCircleRadius;    float startY=mCenterX - (float)Math.cos(rotateDegrees) * interCircleRadius;    float stopX=mCenterX + (float)Math.sin(rotateDegrees) * outerCircleRadius;    float stopY=mCenterX - (float)Math.cos(rotateDegrees) * outerCircleRadius;    if (i < progressLineCount) {      canvas.drawLine(startX,startY,stopX,stopY,mProgressPaint);    } else {      canvas.drawLine(startX,startY,stopX,stopY,mProgressBackgroundPaint);    }  }}  }
class C{  void initialize(){  LOGGER.info("Initializing cache status properties.");  cacheStatusLock.writeLock().lock();  try {    dataTagCacheLoaded=Boolean.FALSE;    controlTagCacheLoaded=Boolean.FALSE;    setRuleTagCacheLoaded(Boolean.FALSE);    aliveTimerCacheLoaded=Boolean.FALSE;    commFaultTagCacheLoaded=Boolean.FALSE;    alarmCacheLoaded=Boolean.FALSE;    processCacheLoaded=Boolean.FALSE;    equipmentCacheLoaded=Boolean.FALSE;    subEquipmentCacheLoaded=Boolean.FALSE;    commandTagCacheLoaded=Boolean.FALSE;    alarmCacheLoaded=Boolean.FALSE;    ruleCachePostProcessed=Boolean.FALSE;  }  finally {    cacheStatusLock.writeLock().unlock();  }}  }
class C{  protected OrdersChangeStateQuery action(OrdersChangeStateAction value){  return unsafeParam("action",value);}  }
class C{  public void train(Map CategoryValues,String sSuggestedCategory,String sFinalCategory){  if (CategoryValues == null)   CategoryValues=new HashMap();  if (CategoryValues.size() > 0)   vPreviousDecisions.add(new DecisionSupport(CategoryValues,sSuggestedCategory,sFinalCategory));}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public BytecodeTypeAccess fullCopy(){  BytecodeTypeAccess tree=(BytecodeTypeAccess)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public void initHMMDataForHMMModel(String voiceName) throws IOException, MaryConfigurationException {  PropertiesAccessor p=MaryConfig.getVoiceConfig(voiceName).getPropertiesAccessor(true);  String prefix="voice." + voiceName;  treeDurStream=p.getStream(prefix + ".Ftd");  pdfDurStream=p.getStream(prefix + ".Fmd");  treeLf0Stream=p.getStream(prefix + ".Ftf");  pdfLf0Stream=p.getStream(prefix + ".Fmf");  useGV=p.getBoolean(prefix + ".useGV");  if (useGV) {    useContextDependentGV=p.getBoolean(prefix + ".useContextDependentGV",useContextDependentGV);    if (p.getProperty(prefix + ".gvMethod") != null) {      String sval=p.getProperty(prefix + ".gvMethod");      setGvMethod(sval);    }    maxLf0GvIter=p.getInteger(prefix + ".maxLf0GvIter",maxLf0GvIter);    gvWeightLf0=p.getDouble(prefix + ".gvWeightLf0",gvWeightLf0);    pdfLf0GVStream=p.getStream(prefix + ".Fgvf");    maxLf0GvIter=p.getInteger(prefix + ".maxLf0GvIter",maxLf0GvIter);  }  InputStream feaStream=p.getStream(prefix + ".FeaFile");  feaDef=FeatureUtils.readFeatureDefinition(feaStream);  InputStream trickyPhonesStream=p.getStream(prefix + ".trickyPhonesFile");  trickyPhones=new PhoneTranslator(trickyPhonesStream);  Log.i(Mary.LOG,"Loading Tree Set in CARTs:");  cart.loadTreeSet(this,feaDef,trickyPhones);  Log.i(Mary.LOG,"Loading GV Model Set:");  gv.loadGVModelSet(this,feaDef);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_CHANGE_MEMBER_RANK_DONE_2_GUILD_OFFICER(String value0){  return new SM_SYSTEM_MESSAGE(1300267,value0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelBuffCounterATK_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200355,num0,skillname);}  }
class C{  private boolean isValidItemIndex(int index){  return viewAdapter != null && viewAdapter.getItemsCount() > 0 && (isCyclic || index >= 0 && index < viewAdapter.getItemsCount());}  }
class C{  public boolean positiveOrNull(){  if (isNaN()) {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    dotrap(DfpField.FLAG_INVALID,LESS_THAN_TRAP,this,newInstance(getZero()));    return false;  }  return (sign > 0) || ((mant[mant.length - 1] == 0) && !isInfinite());}  }
class C{  public void addData(final double[][] data) throws MathIllegalArgumentException {  for (int i=0; i < data.length; i++) {    if (data[i].length < 2) {      throw new MathIllegalArgumentException(LocalizedCoreFormats.INVALID_REGRESSION_OBSERVATION,data[i].length,2);    }    addData(data[i][0],data[i][1]);  }}  }
class C{  private Object[] process(Object[] row) throws KettleException {  Object[] outputRow=null;  if (meta.getNoDictionaryCount() > 0 || meta.getComplexDimsCount() > 0) {    outputRow=new Object[measureCount + 1 + 1];  } else {    outputRow=new Object[measureCount + 1];  }  int l=0;  int index=0;  for (int i=0; i < measureCount; i++) {    if (aggType[i] == CarbonCommonConstants.BIG_DECIMAL_MEASURE) {      outputRow[l++]=RemoveDictionaryUtil.getMeasure(index++,row);    } else     if (aggType[i] == CarbonCommonConstants.BIG_INT_MEASURE) {      outputRow[l++]=(Long)RemoveDictionaryUtil.getMeasure(index++,row);    } else {      outputRow[l++]=(Double)RemoveDictionaryUtil.getMeasure(index++,row);    }  }  outputRow[l]=RemoveDictionaryUtil.getByteArrayForNoDictionaryCols(row);  int[] highCardExcludedRows=new int[segmentProperties.getDimColumnsCardinality().length];  for (int i=0; i < highCardExcludedRows.length; i++) {    Object key=RemoveDictionaryUtil.getDimension(i,row);    highCardExcludedRows[i]=(Integer)key;  }  try {    outputRow[outputRow.length - 1]=data.generator.generateKey(highCardExcludedRows);  } catch (  KeyGenException e) {    throw new KettleException("unable to generate the mdkey",e);  }  return outputRow;}  }
class C{  public SoP(FeatureDefinition featDef){  this.featureDefinition=featDef;}  }
class C{  private void mergeLocalVariables(){  IVarAbstraction my_lhs, my_rhs;  Node lhs, rhs;  int[] count=new int[pointers.size()];  for (  PlainConstraint cons : constraints) {    my_lhs=cons.getLHS();    my_rhs=cons.getRHS();switch (cons.type) {case Constants.NEW_CONS:case Constants.ASSIGN_CONS:      count[my_rhs.id]++;    break;case Constants.LOAD_CONS:  lhs=my_lhs.getWrappedNode();count[my_rhs.id]+=lhs.getP2Set().size();break;}}for (Iterator<PlainConstraint> cons_it=constraints.iterator(); cons_it.hasNext(); ) {PlainConstraint cons=cons_it.next();if (cons.type == Constants.ASSIGN_CONS) {my_lhs=cons.getLHS();my_rhs=cons.getRHS();lhs=my_lhs.getWrappedNode();rhs=my_rhs.getWrappedNode();if ((lhs instanceof LocalVarNode) && (rhs instanceof LocalVarNode)) {SootMethod sm1=((LocalVarNode)lhs).getMethod();SootMethod sm2=((LocalVarNode)rhs).getMethod();if (sm1 == sm2 && count[my_rhs.id] == 1 && lhs.getType() == rhs.getType()) {my_rhs.merge(my_lhs);cons_it.remove();}}}}for (PlainConstraint cons : constraints) {my_lhs=cons.getLHS();my_rhs=cons.getRHS();switch (cons.type) {case Constants.NEW_CONS:cons.setRHS(my_rhs.getRepresentative());break;case Constants.ASSIGN_CONS:case Constants.LOAD_CONS:case Constants.STORE_CONS:cons.setLHS(my_lhs.getRepresentative());cons.setRHS(my_rhs.getRepresentative());break;}}}  }
class C{  public static boolean isNCName(int c){  return c < 0x10000 && (CHARS[c] & MASK_NCNAME) != 0;}  }
class C{  public boolean intersectsBoundingBox(BoundingBox bb){  assert Vector3f.isValidVector(center) && Vector3f.isValidVector(bb.center);  if (center.x + xExtent < bb.center.x - bb.xExtent || center.x - xExtent > bb.center.x + bb.xExtent) {    return false;  } else   if (center.y + yExtent < bb.center.y - bb.yExtent || center.y - yExtent > bb.center.y + bb.yExtent) {    return false;  } else   if (center.z + zExtent < bb.center.z - bb.zExtent || center.z - zExtent > bb.center.z + bb.zExtent) {    return false;  } else {    return true;  }}  }
class C{  public final boolean lessEquals(SaveProtocolVersion version){  return isComparable(version) && (compareToVersion(version) <= 0);}  }
class C{  public String userdictLookup(String text,String pos){  if (userdict == null || text == null || text.length() == 0)   return null;  List<String> entries=userdict.get(text);  if (entries == null) {    text=text.toLowerCase(getLocale());    entries=userdict.get(text);  }  if (entries == null) {    text=text.substring(0,1).toUpperCase(getLocale()) + text.substring(1);    entries=userdict.get(text);  }  if (entries == null)   return null;  String transcr=null;  for (  String entry : entries) {    String[] parts=entry.split("\\|");    transcr=parts[0];    if (parts.length > 1 && pos != null) {      StringTokenizer tokenizer=new StringTokenizer(entry);      while (tokenizer.hasMoreTokens()) {        String onePos=tokenizer.nextToken();        if (pos.equals(onePos))         return transcr;      }    }  }  return transcr;}  }
class C{  public static Builder newBuilder(DataQueryParams params){  return new DataQueryParams.Builder(params);}  }
class C{  public Schema(String[] names,Class[] types,Object[] defaults){  this(names.length);  if (names.length != types.length || types.length != defaults.length) {    throw new IllegalArgumentException("Input arrays should be the same length");  }  for (int i=0; i < names.length; ++i) {    addColumn(names[i],types[i],defaults[i]);  }}  }
class C{  public static final SM_SYSTEM_MESSAGE STR_MSG_HOUSING_PRICE_CHANGE(long kinah){  return new SM_SYSTEM_MESSAGE(1401324,kinah);}  }
class C{  public boolean isRestartOnCrash(){  return restartOnCrash;}  }
class C{  public static Value[] selectBaseList(Value val,boolean keepArrayRef){  if (val instanceof BinopExpr) {    Value[] set=new Value[2];    BinopExpr expr=(BinopExpr)val;    set[0]=expr.getOp1();    set[1]=expr.getOp2();    return set;  } else   if (val instanceof InstanceOfExpr) {    Value[] set=new Value[]{((InstanceOfExpr)val).getOp()};    return set;  } else   return new Value[]{selectBase(val,keepArrayRef)};}  }
class C{  public static void hideSoftKeyboard(Context context,View view){  view.clearFocus();  InputMethodManager inputmanger=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);  inputmanger.hideSoftInputFromWindow(view.getWindowToken(),0);}  }
class C{  public void forDailyReminder(ContactEvents events){  Bitmap largeIcon=null;  Date date=events.getDate();  int contactCount=events.size();  if (shouldDisplayContactImage(contactCount)) {    int size=resources.getDimensionPixelSize(android.R.dimen.notification_large_icon_width);    Contact displayingContact=events.getContacts().iterator().next();    largeIcon=loadImageAsync(displayingContact,size,size);    if (Utils.hasLollipop() && largeIcon != null) {      largeIcon=getCircleBitmap(largeIcon);    }  }  Intent startIntent=DateDetailsActivity.getStartIntentFromExternal(context,date.getDayOfMonth(),date.getMonth(),date.getYear());  PendingIntent intent=PendingIntent.getActivity(context,NOTIFICATION_ID_DAILY_REMINDER_CONTACTS,startIntent,PendingIntent.FLAG_UPDATE_CURRENT);  String title=NaturalLanguageUtils.joinContacts(context,events.getContacts(),3);  NotificationCompat.Builder builder=new NotificationCompat.Builder(context).setSmallIcon(R.drawable.ic_stat_contact_event).setContentTitle(title).setLargeIcon(largeIcon).setVisibility(NotificationCompat.VISIBILITY_PRIVATE).setAutoCancel(true).setContentIntent(intent).setNumber(events.size()).setColor(context.getResources().getColor(R.color.main_red));  if (events.size() == 1) {    ContactEvent event=events.getEvent(0);    String msg=event.getLabel(resources);    NotificationCompat.BigTextStyle bigTextStyle=new NotificationCompat.BigTextStyle().bigText(msg);    bigTextStyle.setBigContentTitle(title);    builder.setContentText(msg);    builder.setStyle(bigTextStyle);  } else   if (events.getContacts().size() > 1) {    NotificationCompat.InboxStyle inboxStyle=new NotificationCompat.InboxStyle();    inboxStyle.setBigContentTitle(title);    for (int i=0; i < events.size(); ++i) {      ContactEvent event=events.getEvent(i);      Contact contact=event.getContact();      String name=contact.getDisplayName().toString();      String lineFormatted=name + "\t\t" + event.getLabel(resources);      Spannable sb=new SpannableString(lineFormatted);      sb.setSpan(new StyleSpan(Typeface.BOLD),0,name.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);      inboxStyle.addLine(sb);    }    builder.setStyle(inboxStyle);    builder.setContentText(TextUtils.join(", ",events.getContacts()));  }  if (supportsPublicNotifications()) {    String publicTitle=context.getString(R.string.contact_celebration_count,contactCount);    NotificationCompat.Builder publicNotification=new NotificationCompat.Builder(context).setSmallIcon(R.drawable.ic_stat_contact_event).setAutoCancel(true).setContentIntent(intent).setContentTitle(publicTitle).setColor(resources.getColor(R.color.main_red));    builder.setPublicVersion(publicNotification.build());  }  for (  Contact contact : events.getContacts()) {    Uri uri=contact.getLookupUri();    if (uri != null) {      builder.addPerson(uri.toString());    }  }  String uri=MainPreferenceActivity.getDailyReminderRingtone(context);  builder.setSound(Uri.parse(uri));  if (MainPreferenceActivity.getDailyReminderVibrationSet(context)) {    builder.setDefaults(Notification.DEFAULT_VIBRATE);  }  Notification notification=builder.build();  NotificationManager mngr=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);  mngr.notify(NOTIFICATION_ID_DAILY_REMINDER_CONTACTS,notification);}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){}  }
class C{  public static Element firstChildElement(Element element,String childElementName,String attrName,String attrValue){  if (element == null)   return null;  Node node=element.getFirstChild();  if (node != null) {    do {      if (node.getNodeType() == Node.ELEMENT_NODE && (childElementName == null || childElementName.equals(node.getLocalName() != null ? node.getLocalName() : node.getNodeName()))) {        Element childElement=(Element)node;        String value=childElement.getAttribute(attrName);        if (value != null && value.equals(attrValue)) {          return childElement;        }      }    } while ((node=node.getNextSibling()) != null);  }  return null;}  }
class C{  public AssignStmt newAssignStmt(Value variable,Value rvalue){  return new JAssignStmt(variable,rvalue);}  }
class C{  public InsufficientDataException(){  this(LocalizedFormats.INSUFFICIENT_DATA);}  }
class C{  private static void writeMD(DAAMatchRecord match,ByteOutputBuffer buffer,byte[] queryAlphabet){{    int matches=0, del=0;    for (    CombinedOperation cop : match.getTranscript().gather()) {switch (cop.getEditOperation()) {case op_match:        del=0;      matches+=cop.getCount();    break;case op_insertion:  break;case op_substitution:if (matches > 0) {  buffer.writeString(String.format("%d",matches));  matches=0;} else if (del > 0) {  buffer.write((byte)'0');  del=0;}buffer.write(queryAlphabet[cop.getLetter()]);break;case op_deletion:if (matches > 0) {buffer.writeString(String.format("%d",matches));matches=0;}if (del == 0) buffer.write((byte)'^');buffer.write(queryAlphabet[cop.getLetter()]);++del;}}if (matches > 0) buffer.writeString(String.format("%d",matches));}}  }
class C{  NewProjectDescriptor withBriefNames(){  withActivity("A").withCompanyDomain("C").withName("P").withPackageName("a.b");  return this;}  }
class C{  public String toString(){  return name;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysBlock_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200325,skillname);}  }
class C{  public Clock startClock(){  this.start();  return this;}  }
class C{  @Override public void normalizeDocument(){  if (isNormalized() && !isNormalizeDocRequired()) {    return;  }  if (needsSyncChildren()) {    synchronizeChildren();  }  if (domNormalizer == null) {    domNormalizer=new DOMNormalizer();  }  if (fConfiguration == null) {    fConfiguration=new DOMConfigurationImpl();  } else {    fConfiguration.reset();  }  domNormalizer.normalizeDocument(this,fConfiguration);  isNormalized(true);  xmlVersionChanged=false;}  }
class C{  public LogBlock(String uuid){  this.uuid=uuid;  this.body=new LinkedHashMap<>();}  }
class C{  public SQLDataMigrator configure(Connection connection){  this.connection=connection;  this.metadata=new SQLModel(connection);  return this;}  }
class C{  public Builder keepLineNumber(boolean val){  keepLineNumber=val;  return this;}  }
class C{  private static double toDoublePow10(long m,int n){  assert m >= 0;  if (m == 0)   return 0.0;  if (n >= 0) {    if (n > 308)     return Double.POSITIVE_INFINITY;    long x0=0;    long x1=0;    long x2=m & MASK_32;    long x3=m >>> 32;    int pow2=0;    while (n != 0) {      int i=(n >= POW5_INT.length) ? POW5_INT.length - 1 : n;      int coef=POW5_INT[i];      if (((int)x0) != 0)       x0*=coef;      if (((int)x1) != 0)       x1*=coef;      x2*=coef;      x3*=coef;      x1+=x0 >>> 32;      x0&=MASK_32;      x2+=x1 >>> 32;      x1&=MASK_32;      x3+=x2 >>> 32;      x2&=MASK_32;      pow2+=i;      n-=i;      long carry=x3 >>> 32;      if (carry != 0) {        x0=x1;        x1=x2;        x2=x3 & MASK_32;        x3=carry;        pow2+=32;      }    }    assert x3 >= 0;    int shift=31 - (Long.SIZE - Long.numberOfLeadingZeros(x3));    pow2-=shift;    long mantissa=(shift < 0) ? (x3 << 31) | (x2 >>> 1) : (((x3 << 32) | x2) << shift) | (x1 >>> (32 - shift));    return toDoublePow2(mantissa,pow2);  } else {    if (n < -324 - 20)     return 0.0;    long x1=m;    long x0=0;    int pow2=0;    while (true) {      int shift=63 - (Long.SIZE - Long.numberOfLeadingZeros(x1));      x1<<=shift;      x1|=x0 >>> (63 - shift);      x0=(x0 << shift) & MASK_63;      pow2-=shift;      if (n == 0)       break;      int i=(-n >= POW5_INT.length) ? POW5_INT.length - 1 : -n;      int divisor=POW5_INT[i];      long wh=(x1 >>> 32);      long qh=wh / divisor;      long r=wh - qh * divisor;      long wl=(r << 32) | (x1 & MASK_32);      long ql=wl / divisor;      r=wl - ql * divisor;      x1=(qh << 32) | ql;      wh=(r << 31) | (x0 >>> 32);      qh=wh / divisor;      r=wh - qh * divisor;      wl=(r << 32) | (x0 & MASK_32);      ql=wl / divisor;      x0=(qh << 32) | ql;      n+=i;      pow2-=i;    }    return toDoublePow2(x1,pow2);  }}  }
class C{  public static void useDarkTheme(boolean flag){  isDarkThemeEnable=flag;}  }
class C{  public static String toString(Object[] objects,String tag){  StringBuilder sb=new StringBuilder();  for (  Object object : objects) {    sb.append(object);    sb.append(tag);  }  return sb.toString();}  }
class C{  private int locatePoint(final double time,final ODEStateInterpolator interval){  if (forward) {    if (time < interval.getPreviousState().getTime()) {      return -1;    } else     if (time > interval.getCurrentState().getTime()) {      return +1;    } else {      return 0;    }  }  if (time > interval.getPreviousState().getTime()) {    return -1;  } else   if (time < interval.getCurrentState().getTime()) {    return +1;  } else {    return 0;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PLAYING_TIME(String value0){  return new SM_SYSTEM_MESSAGE(1390213,value0);}  }
class C{  private SegmentedListIterator<T> establishPos(SegmentedListIterator<T> res,boolean randomScan){  int startSegment=drawSegmentNumber(false);  res.setStartSegment((short)startSegment);  res._scanLimit=size() * 5;  res._randomScan=(randomScan && getNumSegments() == 1);  for (int seg=startSegment, i=0; i < getNumSegments(); i++, seg++) {    if (seg == getNumSegments())     seg=0;    res.setCurrentSegment((short)seg);    StoredListChainSegment<T> segment=_segments[seg];    if (segment.establishIterScanPos(res))     return res;  }  return null;}  }
class C{  @Override public void close() throws SAException {  if (_templates != null)   _templates.freeSLHolder(_pos);  super.close();}  }
class C{  @ObjectiveCName("addEntry:") public List addEntry(String entry){  java.util.List<String> entries=this.getEntries();  entries.add(entry);  this.updateList(entries);  return this;}  }
class C{  public byte[] serializeBytes(byte version){  Preconditions.checkArgument(version <= CUR_VERSION && version >= VERSION0);  byte[] data=new byte[CUR_VERSION == version ? VERSION1_LEN : VERSION0_LEN];  ByteBuffer bb=ByteBuffer.wrap(data);  bb.put(version);  bb.putLong(logSegmentSequenceNo);  bb.putLong(entryId);  bb.putLong(slotId);  return data;}  }
class C{  public static Object normalizeIntAndLongValues(String data,DataType actualDataType){  if (null == data) {    return null;  }  try {    Object parsedValue=null;switch (actualDataType) {case INT:      parsedValue=Integer.parseInt(data);    break;case LONG:  parsedValue=Long.parseLong(data);break;default :return data;}if (null != parsedValue) {return data;}return null;} catch (NumberFormatException ex) {return null;}}  }
class C{  void applyFacets(XSFacets facets,short presentFacet,short fixedFacet,short patternType,ValidationContext context) throws InvalidDatatypeFacetException {  if (fIsImmutable)   return;  ValidatedInfo tempInfo=new ValidatedInfo();  fFacetsDefined=0;  fFixedFacet=0;  int result=0;  short allowedFacet=fDVs[fValidationDV].getAllowedFacets();  if ((presentFacet & FACET_LENGTH) != 0) {    if ((allowedFacet & FACET_LENGTH) == 0) {      reportError("cos-applicable-facets",new Object[]{"length",fTypeName});    } else {      fLength=facets.length;      lengthAnnotation=facets.lengthAnnotation;      fFacetsDefined|=FACET_LENGTH;      if ((fixedFacet & FACET_LENGTH) != 0)       fFixedFacet|=FACET_LENGTH;    }  }  if ((presentFacet & FACET_MINLENGTH) != 0) {    if ((allowedFacet & FACET_MINLENGTH) == 0) {      reportError("cos-applicable-facets",new Object[]{"minLength",fTypeName});    } else {      fMinLength=facets.minLength;      minLengthAnnotation=facets.minLengthAnnotation;      fFacetsDefined|=FACET_MINLENGTH;      if ((fixedFacet & FACET_MINLENGTH) != 0)       fFixedFacet|=FACET_MINLENGTH;    }  }  if ((presentFacet & FACET_MAXLENGTH) != 0) {    if ((allowedFacet & FACET_MAXLENGTH) == 0) {      reportError("cos-applicable-facets",new Object[]{"maxLength",fTypeName});    } else {      fMaxLength=facets.maxLength;      maxLengthAnnotation=facets.maxLengthAnnotation;      fFacetsDefined|=FACET_MAXLENGTH;      if ((fixedFacet & FACET_MAXLENGTH) != 0)       fFixedFacet|=FACET_MAXLENGTH;    }  }  if ((presentFacet & FACET_PATTERN) != 0) {    if ((allowedFacet & FACET_PATTERN) == 0) {      reportError("cos-applicable-facets",new Object[]{"pattern",fTypeName});    } else {      patternAnnotations=facets.patternAnnotations;      RegularExpression regex=null;      try {        regex=new RegularExpression(facets.pattern,"X",context.getLocale());      } catch (      Exception e) {        reportError("InvalidRegex",new Object[]{facets.pattern,e.getLocalizedMessage()});      }      if (regex != null) {        fPattern=new Vector();        fPattern.addElement(regex);        fPatternStr=new Vector();        fPatternStr.addElement(facets.pattern);        fFacetsDefined|=FACET_PATTERN;        if ((fixedFacet & FACET_PATTERN) != 0)         fFixedFacet|=FACET_PATTERN;      }    }  }  if ((presentFacet & FACET_WHITESPACE) != 0) {    if ((allowedFacet & FACET_WHITESPACE) == 0) {      reportError("cos-applicable-facets",new Object[]{"whiteSpace",fTypeName});    } else {      fWhiteSpace=facets.whiteSpace;      whiteSpaceAnnotation=facets.whiteSpaceAnnotation;      fFacetsDefined|=FACET_WHITESPACE;      if ((fixedFacet & FACET_WHITESPACE) != 0)       fFixedFacet|=FACET_WHITESPACE;    }  }  if ((presentFacet & FACET_ENUMERATION) != 0) {    if ((allowedFacet & FACET_ENUMERATION) == 0) {      reportError("cos-applicable-facets",new Object[]{"enumeration",fTypeName});    } else {      Vector enumVals=facets.enumeration;      int size=enumVals.size();      fEnumeration=new ValidatedInfo[size];      Vector enumNSDecls=facets.enumNSDecls;      ValidationContextImpl ctx=new ValidationContextImpl(context);      enumerationAnnotations=facets.enumAnnotations;      fEnumerationSize=0;      for (int i=0; i < size; i++) {        if (enumNSDecls != null)         ctx.setNSContext((NamespaceContext)enumNSDecls.elementAt(i));        try {          ValidatedInfo info=getActualEnumValue((String)enumVals.elementAt(i),ctx,null);          fEnumeration[fEnumerationSize++]=info;        } catch (        InvalidDatatypeValueException ide) {          reportError("enumeration-valid-restriction",new Object[]{enumVals.elementAt(i),this.getBaseType().getName()});        }      }      fFacetsDefined|=FACET_ENUMERATION;      if ((fixedFacet & FACET_ENUMERATION) != 0)       fFixedFacet|=FACET_ENUMERATION;    }  }  if ((presentFacet & FACET_MAXINCLUSIVE) != 0) {    if ((allowedFacet & FACET_MAXINCLUSIVE) == 0) {      reportError("cos-applicable-facets",new Object[]{"maxInclusive",fTypeName});    } else {      maxInclusiveAnnotation=facets.maxInclusiveAnnotation;      try {        fMaxInclusive=fBase.getActualValue(facets.maxInclusive,context,tempInfo,true);        fFacetsDefined|=FACET_MAXINCLUSIVE;        if ((fixedFacet & FACET_MAXINCLUSIVE) != 0)         fFixedFacet|=FACET_MAXINCLUSIVE;      } catch (      InvalidDatatypeValueException ide) {        reportError(ide.getKey(),ide.getArgs());        reportError("FacetValueFromBase",new Object[]{fTypeName,facets.maxInclusive,"maxInclusive",fBase.getName()});      }      if (((fBase.fFacetsDefined & FACET_MAXINCLUSIVE) != 0)) {        if ((fBase.fFixedFacet & FACET_MAXINCLUSIVE) != 0) {          if (fDVs[fValidationDV].compare(fMaxInclusive,fBase.fMaxInclusive) != 0)           reportError("FixedFacetValue",new Object[]{"maxInclusive",fMaxInclusive,fBase.fMaxInclusive,fTypeName});        }      }      try {        fBase.validate(context,tempInfo);      } catch (      InvalidDatatypeValueException ide) {        reportError(ide.getKey(),ide.getArgs());        reportError("FacetValueFromBase",new Object[]{fTypeName,facets.maxInclusive,"maxInclusive",fBase.getName()});      }    }  }  boolean needCheckBase=true;  if ((presentFacet & FACET_MAXEXCLUSIVE) != 0) {    if ((allowedFacet & FACET_MAXEXCLUSIVE) == 0) {      reportError("cos-applicable-facets",new Object[]{"maxExclusive",fTypeName});    } else {      maxExclusiveAnnotation=facets.maxExclusiveAnnotation;      try {        fMaxExclusive=fBase.getActualValue(facets.maxExclusive,context,tempInfo,true);        fFacetsDefined|=FACET_MAXEXCLUSIVE;        if ((fixedFacet & FACET_MAXEXCLUSIVE) != 0)         fFixedFacet|=FACET_MAXEXCLUSIVE;      } catch (      InvalidDatatypeValueException ide) {        reportError(ide.getKey(),ide.getArgs());        reportError("FacetValueFromBase",new Object[]{fTypeName,facets.maxExclusive,"maxExclusive",fBase.getName()});      }      if (((fBase.fFacetsDefined & FACET_MAXEXCLUSIVE) != 0)) {        result=fDVs[fValidationDV].compare(fMaxExclusive,fBase.fMaxExclusive);        if ((fBase.fFixedFacet & FACET_MAXEXCLUSIVE) != 0 && result != 0) {          reportError("FixedFacetValue",new Object[]{"maxExclusive",facets.maxExclusive,fBase.fMaxExclusive,fTypeName});        }        if (result == 0) {          needCheckBase=false;        }      }      if (needCheckBase) {        try {          fBase.validate(context,tempInfo);        } catch (        InvalidDatatypeValueException ide) {          reportError(ide.getKey(),ide.getArgs());          reportError("FacetValueFromBase",new Object[]{fTypeName,facets.maxExclusive,"maxExclusive",fBase.getName()});        }      } else       if (((fBase.fFacetsDefined & FACET_MAXINCLUSIVE) != 0)) {        if (fDVs[fValidationDV].compare(fMaxExclusive,fBase.fMaxInclusive) > 0) {          reportError("maxExclusive-valid-restriction.2",new Object[]{facets.maxExclusive,fBase.fMaxInclusive});        }      }    }  }  needCheckBase=true;  if ((presentFacet & FACET_MINEXCLUSIVE) != 0) {    if ((allowedFacet & FACET_MINEXCLUSIVE) == 0) {      reportError("cos-applicable-facets",new Object[]{"minExclusive",fTypeName});    } else {      minExclusiveAnnotation=facets.minExclusiveAnnotation;      try {        fMinExclusive=fBase.getActualValue(facets.minExclusive,context,tempInfo,true);        fFacetsDefined|=FACET_MINEXCLUSIVE;        if ((fixedFacet & FACET_MINEXCLUSIVE) != 0)         fFixedFacet|=FACET_MINEXCLUSIVE;      } catch (      InvalidDatatypeValueException ide) {        reportError(ide.getKey(),ide.getArgs());        reportError("FacetValueFromBase",new Object[]{fTypeName,facets.minExclusive,"minExclusive",fBase.getName()});      }      if (((fBase.fFacetsDefined & FACET_MINEXCLUSIVE) != 0)) {        result=fDVs[fValidationDV].compare(fMinExclusive,fBase.fMinExclusive);        if ((fBase.fFixedFacet & FACET_MINEXCLUSIVE) != 0 && result != 0) {          reportError("FixedFacetValue",new Object[]{"minExclusive",facets.minExclusive,fBase.fMinExclusive,fTypeName});        }        if (result == 0) {          needCheckBase=false;        }      }      if (needCheckBase) {        try {          fBase.validate(context,tempInfo);        } catch (        InvalidDatatypeValueException ide) {          reportError(ide.getKey(),ide.getArgs());          reportError("FacetValueFromBase",new Object[]{fTypeName,facets.minExclusive,"minExclusive",fBase.getName()});        }      } else       if (((fBase.fFacetsDefined & FACET_MININCLUSIVE) != 0)) {        if (fDVs[fValidationDV].compare(fMinExclusive,fBase.fMinInclusive) < 0) {          reportError("minExclusive-valid-restriction.3",new Object[]{facets.minExclusive,fBase.fMinInclusive});        }      }    }  }  if ((presentFacet & FACET_MININCLUSIVE) != 0) {    if ((allowedFacet & FACET_MININCLUSIVE) == 0) {      reportError("cos-applicable-facets",new Object[]{"minInclusive",fTypeName});    } else {      minInclusiveAnnotation=facets.minInclusiveAnnotation;      try {        fMinInclusive=fBase.getActualValue(facets.minInclusive,context,tempInfo,true);        fFacetsDefined|=FACET_MININCLUSIVE;        if ((fixedFacet & FACET_MININCLUSIVE) != 0)         fFixedFacet|=FACET_MININCLUSIVE;      } catch (      InvalidDatatypeValueException ide) {        reportError(ide.getKey(),ide.getArgs());        reportError("FacetValueFromBase",new Object[]{fTypeName,facets.minInclusive,"minInclusive",fBase.getName()});      }      if (((fBase.fFacetsDefined & FACET_MININCLUSIVE) != 0)) {        if ((fBase.fFixedFacet & FACET_MININCLUSIVE) != 0) {          if (fDVs[fValidationDV].compare(fMinInclusive,fBase.fMinInclusive) != 0)           reportError("FixedFacetValue",new Object[]{"minInclusive",facets.minInclusive,fBase.fMinInclusive,fTypeName});        }      }      try {        fBase.validate(context,tempInfo);      } catch (      InvalidDatatypeValueException ide) {        reportError(ide.getKey(),ide.getArgs());        reportError("FacetValueFromBase",new Object[]{fTypeName,facets.minInclusive,"minInclusive",fBase.getName()});      }    }  }  if ((presentFacet & FACET_TOTALDIGITS) != 0) {    if ((allowedFacet & FACET_TOTALDIGITS) == 0) {      reportError("cos-applicable-facets",new Object[]{"totalDigits",fTypeName});    } else {      totalDigitsAnnotation=facets.totalDigitsAnnotation;      fTotalDigits=facets.totalDigits;      fFacetsDefined|=FACET_TOTALDIGITS;      if ((fixedFacet & FACET_TOTALDIGITS) != 0)       fFixedFacet|=FACET_TOTALDIGITS;    }  }  if ((presentFacet & FACET_FRACTIONDIGITS) != 0) {    if ((allowedFacet & FACET_FRACTIONDIGITS) == 0) {      reportError("cos-applicable-facets",new Object[]{"fractionDigits",fTypeName});    } else {      fFractionDigits=facets.fractionDigits;      fractionDigitsAnnotation=facets.fractionDigitsAnnotation;      fFacetsDefined|=FACET_FRACTIONDIGITS;      if ((fixedFacet & FACET_FRACTIONDIGITS) != 0)       fFixedFacet|=FACET_FRACTIONDIGITS;    }  }  if (patternType != SPECIAL_PATTERN_NONE) {    fPatternType=patternType;  }  if (fFacetsDefined != 0) {    if (((fFacetsDefined & FACET_MINLENGTH) != 0) && ((fFacetsDefined & FACET_MAXLENGTH) != 0)) {      if (fMinLength > fMaxLength)       reportError("minLength-less-than-equal-to-maxLength",new Object[]{Integer.toString(fMinLength),Integer.toString(fMaxLength),fTypeName});    }    if (((fFacetsDefined & FACET_MAXEXCLUSIVE) != 0) && ((fFacetsDefined & FACET_MAXINCLUSIVE) != 0)) {      reportError("maxInclusive-maxExclusive",new Object[]{fMaxInclusive,fMaxExclusive,fTypeName});    }    if (((fFacetsDefined & FACET_MINEXCLUSIVE) != 0) && ((fFacetsDefined & FACET_MININCLUSIVE) != 0)) {      reportError("minInclusive-minExclusive",new Object[]{fMinInclusive,fMinExclusive,fTypeName});    }    if (((fFacetsDefined & FACET_MAXINCLUSIVE) != 0) && ((fFacetsDefined & FACET_MININCLUSIVE) != 0)) {      result=fDVs[fValidationDV].compare(fMinInclusive,fMaxInclusive);      if (result != -1 && result != 0)       reportError("minInclusive-less-than-equal-to-maxInclusive",new Object[]{fMinInclusive,fMaxInclusive,fTypeName});    }    if (((fFacetsDefined & FACET_MAXEXCLUSIVE) != 0) && ((fFacetsDefined & FACET_MINEXCLUSIVE) != 0)) {      result=fDVs[fValidationDV].compare(fMinExclusive,fMaxExclusive);      if (result != -1 && result != 0)       reportError("minExclusive-less-than-equal-to-maxExclusive",new Object[]{fMinExclusive,fMaxExclusive,fTypeName});    }    if (((fFacetsDefined & FACET_MAXINCLUSIVE) != 0) && ((fFacetsDefined & FACET_MINEXCLUSIVE) != 0)) {      if (fDVs[fValidationDV].compare(fMinExclusive,fMaxInclusive) != -1)       reportError("minExclusive-less-than-maxInclusive",new Object[]{fMinExclusive,fMaxInclusive,fTypeName});    }    if (((fFacetsDefined & FACET_MAXEXCLUSIVE) != 0) && ((fFacetsDefined & FACET_MININCLUSIVE) != 0)) {      if (fDVs[fValidationDV].compare(fMinInclusive,fMaxExclusive) != -1)       reportError("minInclusive-less-than-maxExclusive",new Object[]{fMinInclusive,fMaxExclusive,fTypeName});    }    if (((fFacetsDefined & FACET_FRACTIONDIGITS) != 0) && ((fFacetsDefined & FACET_TOTALDIGITS) != 0)) {      if (fFractionDigits > fTotalDigits)       reportError("fractionDigits-totalDigits",new Object[]{Integer.toString(fFractionDigits),Integer.toString(fTotalDigits),fTypeName});    }    if ((fFacetsDefined & FACET_LENGTH) != 0) {      if ((fBase.fFacetsDefined & FACET_MINLENGTH) != 0 && fLength < fBase.fMinLength) {        reportError("length-minLength-maxLength.1.1",new Object[]{fTypeName,Integer.toString(fLength),Integer.toString(fBase.fMinLength)});      }      if ((fBase.fFacetsDefined & FACET_MAXLENGTH) != 0 && fLength > fBase.fMaxLength) {        reportError("length-minLength-maxLength.2.1",new Object[]{fTypeName,Integer.toString(fLength),Integer.toString(fBase.fMaxLength)});      }      if ((fBase.fFacetsDefined & FACET_LENGTH) != 0) {        if (fLength != fBase.fLength)         reportError("length-valid-restriction",new Object[]{Integer.toString(fLength),Integer.toString(fBase.fLength),fTypeName});      }    }    if ((fBase.fFacetsDefined & FACET_LENGTH) != 0 || (fFacetsDefined & FACET_LENGTH) != 0) {      if ((fFacetsDefined & FACET_MINLENGTH) != 0) {        if (fBase.fLength < fMinLength) {          reportError("length-minLength-maxLength.1.1",new Object[]{fTypeName,Integer.toString(fBase.fLength),Integer.toString(fMinLength)});        }        if ((fBase.fFacetsDefined & FACET_MINLENGTH) == 0) {          reportError("length-minLength-maxLength.1.2.a",new Object[]{fTypeName});        }        if (fMinLength != fBase.fMinLength) {          reportError("length-minLength-maxLength.1.2.b",new Object[]{fTypeName,Integer.toString(fMinLength),Integer.toString(fBase.fMinLength)});        }      }      if ((fFacetsDefined & FACET_MAXLENGTH) != 0) {        if (fBase.fLength > fMaxLength) {          reportError("length-minLength-maxLength.2.1",new Object[]{fTypeName,Integer.toString(fBase.fLength),Integer.toString(fMaxLength)});        }        if ((fBase.fFacetsDefined & FACET_MAXLENGTH) == 0) {          reportError("length-minLength-maxLength.2.2.a",new Object[]{fTypeName});        }        if (fMaxLength != fBase.fMaxLength) {          reportError("length-minLength-maxLength.2.2.b",new Object[]{fTypeName,Integer.toString(fMaxLength),Integer.toString(fBase.fBase.fMaxLength)});        }      }    }    if (((fFacetsDefined & FACET_MINLENGTH) != 0)) {      if ((fBase.fFacetsDefined & FACET_MAXLENGTH) != 0) {        if (fMinLength > fBase.fMaxLength) {          reportError("minLength-less-than-equal-to-maxLength",new Object[]{Integer.toString(fMinLength),Integer.toString(fBase.fMaxLength),fTypeName});        }      } else       if ((fBase.fFacetsDefined & FACET_MINLENGTH) != 0) {        if ((fBase.fFixedFacet & FACET_MINLENGTH) != 0 && fMinLength != fBase.fMinLength) {          reportError("FixedFacetValue",new Object[]{"minLength",Integer.toString(fMinLength),Integer.toString(fBase.fMinLength),fTypeName});        }        if (fMinLength < fBase.fMinLength) {          reportError("minLength-valid-restriction",new Object[]{Integer.toString(fMinLength),Integer.toString(fBase.fMinLength),fTypeName});        }      }    }    if (((fFacetsDefined & FACET_MAXLENGTH) != 0) && ((fBase.fFacetsDefined & FACET_MINLENGTH) != 0)) {      if (fMaxLength < fBase.fMinLength) {        reportError("minLength-less-than-equal-to-maxLength",new Object[]{Integer.toString(fBase.fMinLength),Integer.toString(fMaxLength)});      }    }    if ((fFacetsDefined & FACET_MAXLENGTH) != 0) {      if ((fBase.fFacetsDefined & FACET_MAXLENGTH) != 0) {        if (((fBase.fFixedFacet & FACET_MAXLENGTH) != 0) && fMaxLength != fBase.fMaxLength) {          reportError("FixedFacetValue",new Object[]{"maxLength",Integer.toString(fMaxLength),Integer.toString(fBase.fMaxLength),fTypeName});        }        if (fMaxLength > fBase.fMaxLength) {          reportError("maxLength-valid-restriction",new Object[]{Integer.toString(fMaxLength),Integer.toString(fBase.fMaxLength),fTypeName});        }      }    }    if (((fFacetsDefined & FACET_TOTALDIGITS) != 0)) {      if (((fBase.fFacetsDefined & FACET_TOTALDIGITS) != 0)) {        if ((fBase.fFixedFacet & FACET_TOTALDIGITS) != 0 && fTotalDigits != fBase.fTotalDigits) {          reportError("FixedFacetValue",new Object[]{"totalDigits",Integer.toString(fTotalDigits),Integer.toString(fBase.fTotalDigits),fTypeName});        }        if (fTotalDigits > fBase.fTotalDigits) {          reportError("totalDigits-valid-restriction",new Object[]{Integer.toString(fTotalDigits),Integer.toString(fBase.fTotalDigits),fTypeName});        }      }    }    if ((fFacetsDefined & FACET_FRACTIONDIGITS) != 0) {      if ((fBase.fFacetsDefined & FACET_TOTALDIGITS) != 0) {        if (fFractionDigits > fBase.fTotalDigits)         reportError("fractionDigits-totalDigits",new Object[]{Integer.toString(fFractionDigits),Integer.toString(fTotalDigits),fTypeName});      }    }    if (((fFacetsDefined & FACET_FRACTIONDIGITS) != 0)) {      if (((fBase.fFacetsDefined & FACET_FRACTIONDIGITS) != 0)) {        if (((fBase.fFixedFacet & FACET_FRACTIONDIGITS) != 0 && fFractionDigits != fBase.fFractionDigits) || (fValidationDV == DV_INTEGER && fFractionDigits != 0)) {          reportError("FixedFacetValue",new Object[]{"fractionDigits",Integer.toString(fFractionDigits),Integer.toString(fBase.fFractionDigits),fTypeName});        }        if (fFractionDigits > fBase.fFractionDigits) {          reportError("fractionDigits-valid-restriction",new Object[]{Integer.toString(fFractionDigits),Integer.toString(fBase.fFractionDigits),fTypeName});        }      } else       if (fValidationDV == DV_INTEGER && fFractionDigits != 0) {        reportError("FixedFacetValue",new Object[]{"fractionDigits",Integer.toString(fFractionDigits),"0",fTypeName});      }    }    if ((fFacetsDefined & FACET_WHITESPACE) != 0 && (fBase.fFacetsDefined & FACET_WHITESPACE) != 0) {      if ((fBase.fFixedFacet & FACET_WHITESPACE) != 0 && fWhiteSpace != fBase.fWhiteSpace) {        reportError("FixedFacetValue",new Object[]{"whiteSpace",whiteSpaceValue(fWhiteSpace),whiteSpaceValue(fBase.fWhiteSpace),fTypeName});      }      if (fWhiteSpace == WS_PRESERVE && fBase.fWhiteSpace == WS_COLLAPSE) {        reportError("whiteSpace-valid-restriction.1",new Object[]{fTypeName,"preserve"});      }      if (fWhiteSpace == WS_REPLACE && fBase.fWhiteSpace == WS_COLLAPSE) {        reportError("whiteSpace-valid-restriction.1",new Object[]{fTypeName,"replace"});      }      if (fWhiteSpace == WS_PRESERVE && fBase.fWhiteSpace == WS_REPLACE) {        reportError("whiteSpace-valid-restriction.2",new Object[]{fTypeName});      }    }  }  if ((fFacetsDefined & FACET_LENGTH) == 0 && (fBase.fFacetsDefined & FACET_LENGTH) != 0) {    fFacetsDefined|=FACET_LENGTH;    fLength=fBase.fLength;    lengthAnnotation=fBase.lengthAnnotation;  }  if ((fFacetsDefined & FACET_MINLENGTH) == 0 && (fBase.fFacetsDefined & FACET_MINLENGTH) != 0) {    fFacetsDefined|=FACET_MINLENGTH;    fMinLength=fBase.fMinLength;    minLengthAnnotation=fBase.minLengthAnnotation;  }  if ((fFacetsDefined & FACET_MAXLENGTH) == 0 && (fBase.fFacetsDefined & FACET_MAXLENGTH) != 0) {    fFacetsDefined|=FACET_MAXLENGTH;    fMaxLength=fBase.fMaxLength;    maxLengthAnnotation=fBase.maxLengthAnnotation;  }  if ((fBase.fFacetsDefined & FACET_PATTERN) != 0) {    if ((fFacetsDefined & FACET_PATTERN) == 0) {      fFacetsDefined|=FACET_PATTERN;      fPattern=fBase.fPattern;      fPatternStr=fBase.fPatternStr;      patternAnnotations=fBase.patternAnnotations;    } else {      for (int i=fBase.fPattern.size() - 1; i >= 0; --i) {        fPattern.addElement(fBase.fPattern.elementAt(i));        fPatternStr.addElement(fBase.fPatternStr.elementAt(i));      }      if (fBase.patternAnnotations != null) {        if (patternAnnotations != null) {          for (int i=fBase.patternAnnotations.getLength() - 1; i >= 0; --i) {            patternAnnotations.addXSObject(fBase.patternAnnotations.item(i));          }        } else {          patternAnnotations=fBase.patternAnnotations;        }      }    }  }  if ((fFacetsDefined & FACET_WHITESPACE) == 0 && (fBase.fFacetsDefined & FACET_WHITESPACE) != 0) {    fFacetsDefined|=FACET_WHITESPACE;    fWhiteSpace=fBase.fWhiteSpace;    whiteSpaceAnnotation=fBase.whiteSpaceAnnotation;  }  if ((fFacetsDefined & FACET_ENUMERATION) == 0 && (fBase.fFacetsDefined & FACET_ENUMERATION) != 0) {    fFacetsDefined|=FACET_ENUMERATION;    fEnumeration=fBase.fEnumeration;    fEnumerationSize=fBase.fEnumerationSize;    enumerationAnnotations=fBase.enumerationAnnotations;  }  if (((fBase.fFacetsDefined & FACET_MAXEXCLUSIVE) != 0) && !((fFacetsDefined & FACET_MAXEXCLUSIVE) != 0) && !((fFacetsDefined & FACET_MAXINCLUSIVE) != 0)) {    fFacetsDefined|=FACET_MAXEXCLUSIVE;    fMaxExclusive=fBase.fMaxExclusive;    maxExclusiveAnnotation=fBase.maxExclusiveAnnotation;  }  if (((fBase.fFacetsDefined & FACET_MAXINCLUSIVE) != 0) && !((fFacetsDefined & FACET_MAXEXCLUSIVE) != 0) && !((fFacetsDefined & FACET_MAXINCLUSIVE) != 0)) {    fFacetsDefined|=FACET_MAXINCLUSIVE;    fMaxInclusive=fBase.fMaxInclusive;    maxInclusiveAnnotation=fBase.maxInclusiveAnnotation;  }  if (((fBase.fFacetsDefined & FACET_MINEXCLUSIVE) != 0) && !((fFacetsDefined & FACET_MINEXCLUSIVE) != 0) && !((fFacetsDefined & FACET_MININCLUSIVE) != 0)) {    fFacetsDefined|=FACET_MINEXCLUSIVE;    fMinExclusive=fBase.fMinExclusive;    minExclusiveAnnotation=fBase.minExclusiveAnnotation;  }  if (((fBase.fFacetsDefined & FACET_MININCLUSIVE) != 0) && !((fFacetsDefined & FACET_MINEXCLUSIVE) != 0) && !((fFacetsDefined & FACET_MININCLUSIVE) != 0)) {    fFacetsDefined|=FACET_MININCLUSIVE;    fMinInclusive=fBase.fMinInclusive;    minInclusiveAnnotation=fBase.minInclusiveAnnotation;  }  if (((fBase.fFacetsDefined & FACET_TOTALDIGITS) != 0) && !((fFacetsDefined & FACET_TOTALDIGITS) != 0)) {    fFacetsDefined|=FACET_TOTALDIGITS;    fTotalDigits=fBase.fTotalDigits;    totalDigitsAnnotation=fBase.totalDigitsAnnotation;  }  if (((fBase.fFacetsDefined & FACET_FRACTIONDIGITS) != 0) && !((fFacetsDefined & FACET_FRACTIONDIGITS) != 0)) {    fFacetsDefined|=FACET_FRACTIONDIGITS;    fFractionDigits=fBase.fFractionDigits;    fractionDigitsAnnotation=fBase.fractionDigitsAnnotation;  }  if ((fPatternType == SPECIAL_PATTERN_NONE) && (fBase.fPatternType != SPECIAL_PATTERN_NONE)) {    fPatternType=fBase.fPatternType;  }  fFixedFacet|=fBase.fFixedFacet;  calcFundamentalFacets();}  }
class C{  public MultivariateNormalDistribution(RandomGenerator rng,final double[] means,final double[][] covariances) throws MathIllegalArgumentException {  super(rng,means.length);  final int dim=means.length;  if (covariances.length != dim) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,covariances.length,dim);  }  for (int i=0; i < dim; i++) {    if (dim != covariances[i].length) {      throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,covariances[i].length,dim);    }  }  this.means=means.clone();  covarianceMatrix=new Array2DRowRealMatrix(covariances);  final EigenDecomposition covMatDec=new EigenDecomposition(covarianceMatrix);  covarianceMatrixInverse=covMatDec.getSolver().getInverse();  covarianceMatrixDeterminant=covMatDec.getDeterminant();  final double[] covMatEigenvalues=covMatDec.getRealEigenvalues();  for (int i=0; i < covMatEigenvalues.length; i++) {    if (covMatEigenvalues[i] < 0) {      throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_POSITIVE_DEFINITE_MATRIX);    }  }  final Array2DRowRealMatrix covMatEigenvectors=new Array2DRowRealMatrix(dim,dim);  for (int v=0; v < dim; v++) {    final double[] evec=covMatDec.getEigenvector(v).toArray();    covMatEigenvectors.setColumn(v,evec);  }  final RealMatrix tmpMatrix=covMatEigenvectors.transpose();  for (int row=0; row < dim; row++) {    final double factor=FastMath.sqrt(covMatEigenvalues[row]);    for (int col=0; col < dim; col++) {      tmpMatrix.multiplyEntry(row,col,factor);    }  }  samplingMatrix=covMatEigenvectors.multiply(tmpMatrix);}  }
class C{  public int compare(File file1,File file2){  return caseSensitivity.checkCompareTo(file1.getPath(),file2.getPath());}  }
class C{  public ColumnQuery addSort(Sort sort) throws NullPointerException {  this.sorts.add(Objects.requireNonNull(sort,"Sort is required"));  return this;}  }
class C{  protected XMLAttributes processAttributes(XMLAttributes attributes){  if (isTopLevelIncludedItem()) {    if (fFixupBaseURIs && !sameBaseURIAsIncludeParent()) {      if (attributes == null) {        attributes=new XMLAttributesImpl();      }      String uri=null;      try {        uri=this.getRelativeBaseURI();      } catch (      MalformedURIException e) {        uri=fCurrentBaseURI.getExpandedSystemId();      }      int index=attributes.addAttribute(XML_BASE_QNAME,XMLSymbols.fCDATASymbol,uri);      attributes.setSpecified(index,true);    }    if (fFixupLanguage && !sameLanguageAsIncludeParent()) {      if (attributes == null) {        attributes=new XMLAttributesImpl();      }      int index=attributes.addAttribute(XML_LANG_QNAME,XMLSymbols.fCDATASymbol,fCurrentLanguage);      attributes.setSpecified(index,true);    }    Enumeration inscopeNS=fNamespaceContext.getAllPrefixes();    while (inscopeNS.hasMoreElements()) {      String prefix=(String)inscopeNS.nextElement();      String parentURI=fNamespaceContext.getURIFromIncludeParent(prefix);      String uri=fNamespaceContext.getURI(prefix);      if (parentURI != uri && attributes != null) {        if (prefix == XMLSymbols.EMPTY_STRING) {          if (attributes.getValue(NamespaceContext.XMLNS_URI,XMLSymbols.PREFIX_XMLNS) == null) {            if (attributes == null) {              attributes=new XMLAttributesImpl();            }            QName ns=(QName)NEW_NS_ATTR_QNAME.clone();            ns.prefix=null;            ns.localpart=XMLSymbols.PREFIX_XMLNS;            ns.rawname=XMLSymbols.PREFIX_XMLNS;            int index=attributes.addAttribute(ns,XMLSymbols.fCDATASymbol,uri != null ? uri : XMLSymbols.EMPTY_STRING);            attributes.setSpecified(index,true);            fNamespaceContext.declarePrefix(prefix,uri);          }        } else         if (attributes.getValue(NamespaceContext.XMLNS_URI,prefix) == null) {          if (attributes == null) {            attributes=new XMLAttributesImpl();          }          QName ns=(QName)NEW_NS_ATTR_QNAME.clone();          ns.localpart=prefix;          ns.rawname+=prefix;          ns.rawname=(fSymbolTable != null) ? fSymbolTable.addSymbol(ns.rawname) : ns.rawname.intern();          int index=attributes.addAttribute(ns,XMLSymbols.fCDATASymbol,uri != null ? uri : XMLSymbols.EMPTY_STRING);          attributes.setSpecified(index,true);          fNamespaceContext.declarePrefix(prefix,uri);        }      }    }  }  if (attributes != null) {    int length=attributes.getLength();    for (int i=0; i < length; i++) {      String type=attributes.getType(i);      String value=attributes.getValue(i);      if (type == XMLSymbols.fENTITYSymbol) {        this.checkUnparsedEntity(value);      }      if (type == XMLSymbols.fENTITIESSymbol) {        StringTokenizer st=new StringTokenizer(value);        while (st.hasMoreTokens()) {          String entName=st.nextToken();          this.checkUnparsedEntity(entName);        }      } else       if (type == XMLSymbols.fNOTATIONSymbol) {        this.checkNotation(value);      }    }  }  return attributes;}  }
class C{  public static void convertCustomSpacePropsToJProperties(String spaceName,Properties customProps,JSpaceAttributes spaceAttrib){  if (customProps != null) {    for (Enumeration e=customProps.propertyNames(); e.hasMoreElements(); ) {      String propName=(String)e.nextElement();      String propValue=customProps.getProperty(propName);      String spacePropKey=spaceName == null ? propName : spaceName + "." + propName;      if (propName.startsWith(Constants.SPACE_CONFIG_PREFIX))       spaceAttrib.setProperty(spacePropKey,propValue);    }  }}  }
class C{  public static Object[] ordinalArray(Iterator tuples,String field){  return DataLib.ordinalArray(tuples,field,DefaultLiteralComparator.getInstance());}  }
class C{  public FeatureTypeConstraintModel(FeatureTypeConstraintModelUpdateInterface parent){  this.parentObj=parent;  columnList.add(Localisation.getString(FieldConfigBase.class,"FeatureTypeConstraintModel.name"));  columnList.add(Localisation.getString(FieldConfigBase.class,"FeatureTypeConstraintModel.filter"));}  }
class C{  @Override protected void merge(FlowSet in1,FlowSet in2,FlowSet out){  in1.intersection(in2,out);}  }
class C{  private void initState(){  isaacA=0;  isaacB=0;  isaacC=0;  for (int j=0; j < arr.length; j++) {    arr[j]=GLD_RATIO;  }  for (int j=0; j < 4; j++) {    shuffle();  }  for (int j=0; j < SIZE; j+=8) {    arr[0]+=rsl[j];    arr[1]+=rsl[j + 1];    arr[2]+=rsl[j + 2];    arr[3]+=rsl[j + 3];    arr[4]+=rsl[j + 4];    arr[5]+=rsl[j + 5];    arr[6]+=rsl[j + 6];    arr[7]+=rsl[j + 7];    shuffle();    setState(j);  }  for (int j=0; j < SIZE; j+=8) {    arr[0]+=mem[j];    arr[1]+=mem[j + 1];    arr[2]+=mem[j + 2];    arr[3]+=mem[j + 3];    arr[4]+=mem[j + 4];    arr[5]+=mem[j + 5];    arr[6]+=mem[j + 6];    arr[7]+=mem[j + 7];    shuffle();    setState(j);  }  isaac();  count=SIZE - 1;  clearCache();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DeathBlow_A_TO_ME(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200652,skillcaster,num0,skillname);}  }
class C{  public void rightClick(int x,int y,int delay) throws InterruptedException {  move(x,y);  click(InputEvent.BUTTON3_MASK,delay);}  }
class C{  private static String readAll(InputStreamReader reader,int blockSize) throws IOException {  final char buffer[]=new char[blockSize];  StringBuilder builder=new StringBuilder();  while (true) {    final int readSize=reader.read(buffer);    if (readSize >= 0)     builder.append(buffer,0,readSize); else     break;  }  return builder.toString();}  }
class C{  public ZWaveApplicationStatusClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  @Override public void startValueScopeFor(IdentityConstraint identityConstraint,int initialDepth){  ValueStoreBase valueStore=fValueStoreCache.getValueStoreFor(identityConstraint,initialDepth);  valueStore.startValueScope();}  }
class C{  public void ResetEnemy(){  velocity.set(new Math_Vector(0,0));  pNum=this.map_controler.get_Selection(sKind,sNum);  delay=this.map_controler.get_Delay(sKind,sNum);  shield=this.map_controler.get_Enemy_Life(sKind,sNum);  posX=this.map_controler.get_Pos_X(sKind,sNum);  posY=this.map_controler.get_Pos_Y(sKind,sNum);  GetPath(pNum);  status=ENTER;  isDead=false;}  }
class C{  @Override public void endDocument() throws SAXException {  writeText4Links();  write('\n');  super.endDocument();  try {    flush();  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public Entry(String symbol,Entry next){  this.symbol=symbol.intern();  characters=new char[symbol.length()];  symbol.getChars(0,characters.length,characters,0);  this.next=next;}  }
class C{  public boolean isInSphere(Vector origin,double radius){  return (NumberConversions.square(origin.x - x) + NumberConversions.square(origin.y - y) + NumberConversions.square(origin.z - z)) <= NumberConversions.square(radius);}  }
class C{  public void init$Children(){  children=new ASTNode[5];  setChild(new List(),1);  setChild(new List(),2);  setChild(new Opt(),3);}  }
class C{  @Override public String toString(){  return super.toString() + "[caseSensitivity=" + caseSensitivity+ "]";}  }
class C{  public static String formatMessage(Locale locale,String key,Object[] arguments) throws MissingResourceException {  if (locale == null) {    locale=Locale.getDefault();  }  final ResourceBundle resourceBundle=ResourceBundle.getBundle("mf.org.apache.xerces.impl.msg.SAXMessages",locale);  String msg;  try {    msg=resourceBundle.getString(key);    if (arguments != null) {      try {        msg=java.text.MessageFormat.format(msg,arguments);      } catch (      Exception e) {        msg=resourceBundle.getString("FormatFailed");        msg+=" " + resourceBundle.getString(key);      }    }  } catch (  MissingResourceException e) {    msg=resourceBundle.getString("BadMessageKey");    throw new MissingResourceException(key,msg,key);  }  if (msg == null) {    msg=key;    if (arguments.length > 0) {      StringBuffer str=new StringBuffer(msg);      str.append('?');      for (int i=0; i < arguments.length; i++) {        if (i > 0) {          str.append('&');        }        str.append(String.valueOf(arguments[i]));      }    }  }  return msg;}  }
class C{  void beginStartElement(Augmentations elementAugs,XMLAttributes attributes){  fInStartElement=true;  fElementAugs=elementAugs;  fAttributes=attributes;}  }
class C{  public GSByteArrayInputStream(byte buffer[]){  setBuffer(buffer);}  }
class C{  public static boolean isIn3dRange(VisibleObject object1,VisibleObject object2,float range){  if (object1.getWorldId() != object2.getWorldId() || object1.getInstanceId() != object2.getInstanceId()) {    return false;  }  float dx=(object2.getX() - object1.getX());  float dy=(object2.getY() - object1.getY());  float dz=(object2.getZ() - object1.getZ());  return dx * dx + dy * dy + dz * dz < range * range;}  }
class C{  public static <V>boolean addDistinctEntry(List<V> sourceList,V entry){  return (sourceList != null && !sourceList.contains(entry)) ? sourceList.add(entry) : false;}  }
class C{  public void doUpdate(){  boolean needUpdate=false;  Calendar lastCal=Calendar.getInstance();  lastCal.setTimeInMillis(lastUpdate);  Calendar curCal=Calendar.getInstance();  curCal.setTimeInMillis(System.currentTimeMillis());  if (lastCal.get(Calendar.DAY_OF_MONTH) != curCal.get(Calendar.DAY_OF_MONTH) || lastCal.get(Calendar.MONTH) != curCal.get(Calendar.MONTH) || lastCal.get(Calendar.YEAR) != curCal.get(Calendar.YEAR)) {    this.dailyAP=0;    this.dailyGP=0;    this.dailyKill=0;    needUpdate=true;  }  if (lastCal.get(Calendar.WEEK_OF_YEAR) != curCal.get(Calendar.WEEK_OF_YEAR) || lastCal.get(Calendar.YEAR) != curCal.get(Calendar.YEAR)) {    this.lastKill=this.weeklyKill;    this.lastAP=this.weeklyAP;    this.lastGP=this.weeklyGP;    this.weeklyKill=0;    this.weeklyAP=0;    this.weeklyGP=0;    needUpdate=true;  }  if (rank.getId() > maxRank) {    maxRank=rank.getId();    needUpdate=true;  }  this.lastUpdate=System.currentTimeMillis();  if (needUpdate) {    setPersistentState(PersistentState.UPDATE_REQUIRED);  }}  }
class C{  public long value(){  return _map._values[_index];}  }
class C{  public synchronized void resume(){}  }
class C{  public StyleWrapper(String style){  super();  this.style=style;}  }
class C{  public final boolean forall(P2SetVisitor v){  if (bits == null) {    for (    Node node : nodes) {      if (node == null)       return v.getReturnValue();      v.visit(node);    }  } else {    for (BitSetIterator it=bits.iterator(); it.hasNext(); ) {      v.visit(pag.getAllocNodeNumberer().get(it.next()));    }  }  return v.getReturnValue();}  }
class C{  public <T>List<T> apply(Iterable<T> resources){  InMemoryEvaluator eval=new InMemoryEvaluator();  return eval.eval(resources,this);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_CANT_INVITE_WHEN_HE_IS_ASKED_QUESTION(String value0){  return new SM_SYSTEM_MESSAGE(1301018,value0);}  }
class C{  static void dump(String title,FloatList list){  System.out.println(title);  FloatList cur=list;  do {    System.out.println("Item: " + cur.value);    cur=cur.next;  } while (cur != list);}  }
class C{  @Override public void exceptionCaught(ChannelHandlerContext ctx,ExceptionEvent e) throws Exception {  try {    throw e.getCause();  } catch (  UnknownCommandException unknownCommand) {    if (ctx.getChannel().isOpen())     ctx.getChannel().write(constructHeader(MemcachedBinaryCommandDecoder.BinaryOp.Noop,null,null,null,(short)0x0081,0,0));  }catch (  Throwable err) {    logger.error("error",err);    if (ctx.getChannel().isOpen())     ctx.getChannel().close();  }}  }
class C{  public short key(){  return _map._set[_index];}  }
class C{  private final void writeOP(int value){  int op=Crypt.encodeOpcodec(value);  buf.putShort((short)(op));  buf.put(Crypt.staticServerPacketCode);  buf.putShort((short)(~op));}  }
class C{  public boolean removeEntry(float xPos,int dataSetIndex){  if (dataSetIndex >= mDataSets.size())   return false;  IDataSet dataSet=getDataSetByIndex(dataSetIndex);  Entry e=dataSet.getEntryForXPos(xPos);  return e != null && removeEntry(e,dataSetIndex);}  }
class C{  public ZWaveMeterCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);  versionMax=MAX_SUPPORTED_VERSION;}  }
class C{  public SiteAdminPage waitForConfirmationWindow(){  siteAdminConfirmationWindow.waitToBeDisplayed();  return this;}  }
class C{  public void testEmpty() throws Exception {  send("setCommitUserData","{userData: {a: c, b: d}}");  send("getCommitUserData");  assertEquals("c",getString("a"));  assertEquals("d",getString("b"));  bounceServer();  send("startIndex");  send("getCommitUserData");  assertEquals("c",getString("a"));  assertEquals("d",getString("b"));}  }
class C{  @NotNull public ImageOverlayBuilder verify(@NotNull String candidateImageAsUrl,@NotNull VerificationSet verificationSet){  try {    verify(ImageIO.read(new URL(candidateImageAsUrl)),verificationSet);  } catch (  IOException e) {    throw new ImageNotFoundException(candidateImageAsUrl);  }  return this;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public void hide(){  hide(false,null);}  }
class C{  private void shutdownPrecaching(boolean tryAgainSoon){  sIsPrecaching=false;  releasePrecachingWakeLock();  PrecacheServiceLauncher.precachingFinished(getApplicationContext(),tryAgainSoon);  stopSelf();}  }
class C{  private void saveTokenChanges(){  GoIVSettings.getInstance(context).setClipboardPreference(tokens);  Log.d("NahojjjenClippy","Saved token Changes");}  }
class C{  public String upload_file1(byte[] file_buff,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  String parts[]=this.upload_file(file_buff,file_ext_name,meta_list);  if (parts != null) {    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];  } else {    return null;  }}  }
class C{  private boolean isViewWasReused(){  String currentCacheKey=engine.getLoadingUriForView(imageAware);  return !memoryCacheKey.equals(currentCacheKey);}  }
class C{  private Pair<Target,RemoteOperation> newOperation(Intent operationIntent){  RemoteOperation operation=null;  Target target=null;  try {    if (!operationIntent.hasExtra(EXTRA_ACCOUNT) && !operationIntent.hasExtra(EXTRA_SERVER_URL)) {      Log_OC.e(TAG,"Not enough information provided in intent");    } else {      Account account=operationIntent.getParcelableExtra(EXTRA_ACCOUNT);      String serverUrl=operationIntent.getStringExtra(EXTRA_SERVER_URL);      String cookie=operationIntent.getStringExtra(EXTRA_COOKIE);      target=new Target(account,(serverUrl == null) ? null : Uri.parse(serverUrl),cookie);      String action=operationIntent.getAction();      if (action.equals(ACTION_CREATE_SHARE_VIA_LINK)) {        String remotePath=operationIntent.getStringExtra(EXTRA_REMOTE_PATH);        String password=operationIntent.getStringExtra(EXTRA_SHARE_PASSWORD);        if (remotePath.length() > 0) {          operation=new CreateShareViaLinkOperation(remotePath,password);        }      } else       if (ACTION_UPDATE_SHARE.equals(action)) {        String remotePath=operationIntent.getStringExtra(EXTRA_REMOTE_PATH);        long shareId=operationIntent.getLongExtra(EXTRA_SHARE_ID,-1);        if (remotePath != null && remotePath.length() > 0) {          operation=new UpdateShareViaLinkOperation(remotePath);          String password=operationIntent.getStringExtra(EXTRA_SHARE_PASSWORD);          ((UpdateShareViaLinkOperation)operation).setPassword(password);          long expirationDate=operationIntent.getLongExtra(EXTRA_SHARE_EXPIRATION_DATE_IN_MILLIS,0);          ((UpdateShareViaLinkOperation)operation).setExpirationDate(expirationDate);          if (operationIntent.hasExtra(EXTRA_SHARE_PUBLIC_UPLOAD)) {            ((UpdateShareViaLinkOperation)operation).setPublicUpload(operationIntent.getBooleanExtra(EXTRA_SHARE_PUBLIC_UPLOAD,false));          }        } else         if (shareId > 0) {          operation=new UpdateSharePermissionsOperation(shareId);          int permissions=operationIntent.getIntExtra(EXTRA_SHARE_PERMISSIONS,1);          ((UpdateSharePermissionsOperation)operation).setPermissions(permissions);        }      } else       if (action.equals(ACTION_CREATE_SHARE_WITH_SHAREE)) {        String remotePath=operationIntent.getStringExtra(EXTRA_REMOTE_PATH);        String shareeName=operationIntent.getStringExtra(EXTRA_SHARE_WITH);        ShareType shareType=(ShareType)operationIntent.getSerializableExtra(EXTRA_SHARE_TYPE);        int permissions=operationIntent.getIntExtra(EXTRA_SHARE_PERMISSIONS,-1);        if (remotePath.length() > 0) {          operation=new CreateShareWithShareeOperation(remotePath,shareeName,shareType,permissions);        }      } else       if (action.equals(ACTION_UNSHARE)) {        String remotePath=operationIntent.getStringExtra(EXTRA_REMOTE_PATH);        ShareType shareType=(ShareType)operationIntent.getSerializableExtra(EXTRA_SHARE_TYPE);        String shareWith=operationIntent.getStringExtra(EXTRA_SHARE_WITH);        if (remotePath.length() > 0) {          operation=new UnshareOperation(remotePath,shareType,shareWith,OperationsService.this);        }      } else       if (action.equals(ACTION_GET_SERVER_INFO)) {        operation=new GetServerInfoOperation(serverUrl,OperationsService.this);      } else       if (action.equals(ACTION_OAUTH2_GET_ACCESS_TOKEN)) {        String oauth2QueryParameters=operationIntent.getStringExtra(EXTRA_OAUTH2_QUERY_PARAMETERS);        operation=new OAuth2GetAccessToken(getString(R.string.oauth2_client_id),getString(R.string.oauth2_redirect_uri),getString(R.string.oauth2_grant_type),oauth2QueryParameters);      } else       if (action.equals(ACTION_GET_USER_NAME)) {        operation=new GetRemoteUserInfoOperation();      } else       if (action.equals(ACTION_RENAME)) {        String remotePath=operationIntent.getStringExtra(EXTRA_REMOTE_PATH);        String newName=operationIntent.getStringExtra(EXTRA_NEWNAME);        operation=new RenameFileOperation(remotePath,newName);      } else       if (action.equals(ACTION_REMOVE)) {        String remotePath=operationIntent.getStringExtra(EXTRA_REMOTE_PATH);        boolean onlyLocalCopy=operationIntent.getBooleanExtra(EXTRA_REMOVE_ONLY_LOCAL,false);        operation=new RemoveFileOperation(remotePath,onlyLocalCopy);      } else       if (action.equals(ACTION_CREATE_FOLDER)) {        String remotePath=operationIntent.getStringExtra(EXTRA_REMOTE_PATH);        boolean createFullPath=operationIntent.getBooleanExtra(EXTRA_CREATE_FULL_PATH,true);        operation=new CreateFolderOperation(remotePath,createFullPath);      } else       if (action.equals(ACTION_SYNC_FILE)) {        String remotePath=operationIntent.getStringExtra(EXTRA_REMOTE_PATH);        boolean syncFileContents=operationIntent.getBooleanExtra(EXTRA_SYNC_FILE_CONTENTS,true);        operation=new SynchronizeFileOperation(remotePath,account,syncFileContents,getApplicationContext());      } else       if (action.equals(ACTION_SYNC_FOLDER)) {        String remotePath=operationIntent.getStringExtra(EXTRA_REMOTE_PATH);        operation=new SynchronizeFolderOperation(this,remotePath,account,System.currentTimeMillis());      } else       if (action.equals(ACTION_MOVE_FILE)) {        String remotePath=operationIntent.getStringExtra(EXTRA_REMOTE_PATH);        String newParentPath=operationIntent.getStringExtra(EXTRA_NEW_PARENT_PATH);        operation=new MoveFileOperation(remotePath,newParentPath,account);      } else       if (action.equals(ACTION_COPY_FILE)) {        String remotePath=operationIntent.getStringExtra(EXTRA_REMOTE_PATH);        String newParentPath=operationIntent.getStringExtra(EXTRA_NEW_PARENT_PATH);        operation=new CopyFileOperation(remotePath,newParentPath,account);      } else       if (action.equals(ACTION_CHECK_CURRENT_CREDENTIALS)) {        operation=new CheckCurrentCredentialsOperation(account);      }    }  } catch (  IllegalArgumentException e) {    Log_OC.e(TAG,"Bad information provided in intent: " + e.getMessage());    operation=null;  }  if (operation != null) {    return new Pair<Target,RemoteOperation>(target,operation);  } else {    return null;  }}  }
class C{  public static String wildcardToRegex(String wildcard){  StringBuilder s=new StringBuilder(wildcard.length());  for (int i=0, is=wildcard.length(); i < is; i++) {    char c=wildcard.charAt(i);switch (c) {case '*':      s.append(".*");    break;case '?':  s.append(".");break;case '(':case ')':case '[':case ']':case '$':case '^':case '.':case '{':case '}':case '|':case '\\':s.append("\\");s.append(c);break;default :s.append(c);break;}}logger.debug("regex = " + s.toString());return (s.toString());}  }
class C{  protected void removeKeyFromLRUCache(Cache cacheObject){  for (int i=0; i < columnIdentifiers.length; i++) {    DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier=createDictionaryColumnUniqueIdentifier(columnIdentifiers[i]);    cacheObject.invalidate(dictionaryColumnUniqueIdentifier);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_COMPOUND_SUCCESS(int i,int j){  return new SM_SYSTEM_MESSAGE(1400336,new DescriptionId(i),new DescriptionId(j));}  }
class C{  public static ProbeItemDescriptor discreteOutlineItem(String name,String description,ItemValueFormatter formatter,double dataFactor,long minValue,long maxValue,float lineWidth,Color lineColor,Color fillColor){  if (lineColor == null && fillColor == null)   throw new IllegalArgumentException("Either lineColor or fillColor must be defined");  return discreteItem(name,description,formatter,dataFactor,minValue,maxValue,lineWidth,lineColor,fillColor,0,false,false,true);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPHeal_INTERVAL_HEAL_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201057,num0,skillname);}  }
class C{  protected LeadsCompleteQuery secret(String value){  return unsafeParam("secret",value);}  }
class C{  @Override public boolean supportsFifoOrder(){  return true;}  }
class C{  public RequestHandle head(String url,RequestParams params,ResponseHandlerInterface responseHandler){  return head(null,url,params,responseHandler);}  }
class C{  public Intonator(CART accentCart,CART toneCart){  this.accentCart=accentCart;  this.toneCart=toneCart;}  }
class C{  public JSONArray put(int index,double value) throws JSONException {  this.put(index,new Double(value));  return this;}  }
class C{  public void clearSelection(String target){switch (target.toLowerCase()) {case "series":    clearSelectionSeries();  break;case "classes":clearSelectionClasses();break;case "attributes":clearSelectionAttributes();break;}}  }
class C{  protected MessagesGetChatQueryWithChatIdsFields fields(UserField... value){  return unsafeParam("fields",value);}  }
class C{  public static Map<String,Object> updateDataResource(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=updateDataResourceMethod(dctx,context);  return result;}  }
class C{  private void queueReadyJobsForExecutionLockedH(){  ArraySet<JobStatus> jobs=mJobs.getJobs();  if (DEBUG) {  }  for (int i=0; i < jobs.size(); i++) {    JobStatus job=jobs.valueAt(i);    if (isReadyToBeExecutedLocked(job)) {      if (DEBUG) {      }      mPendingJobs.add(job);    } else     if (isReadyToBeCancelledLocked(job)) {      stopJobOnServiceContextLocked(job);    }  }  if (DEBUG) {    final int queuedJobs=mPendingJobs.size();    if (queuedJobs == 0) {    } else {    }  }}  }
class C{  public NotesEditQuery privacyView(String... value){  return unsafeParam("privacy_view",value);}  }
class C{  public static void stopWavFile(){  m_clip.stop();  m_clip.flush();  m_clip.close();}  }
class C{  private ExpressionSubPanel createExpressionPanel(Class<?> expectedDataType){  ExpressionSubPanel panel=new ExpressionSubPanel(this,expectedDataType);  outerPanel.add(panel,ExpressionSubPanel.getPanelName());  return panel;}  }
class C{  public SwipeBackManageImplementor(SwipeBackManageView view){  this.view=view;}  }
class C{  public static Column min(DataFrame dataFrame,String columnName){  return dataFrame.groupBy(columnName).agg(functions.min(columnName)).col(columnName);}  }
class C{  protected void internalTransform(Body b,String phaseName,Map<String,String> options){  if (b == null) {    throw new NullPointerException();  }  Date start=new Date();  if (Options.v().verbose())   G.v().out.println("[TypeAssigner] typing system started on " + start);  JBTROptions opt=new JBTROptions(options);  ignoreWrongStaticNess=opt.ignore_wrong_staticness();  if (opt.compare_type_assigners()) {    compareTypeAssigners(b,opt.use_older_type_assigner());  } else {    if (opt.use_older_type_assigner())     TypeResolver.resolve((JimpleBody)b,Scene.v()); else     (new soot.jimple.toolkits.typing.fast.TypeResolver((JimpleBody)b)).inferTypes();  }  Date finish=new Date();  if (Options.v().verbose()) {    long runtime=finish.getTime() - start.getTime();    long mins=runtime / 60000;    long secs=(runtime % 60000) / 1000;    G.v().out.println("[TypeAssigner] typing system ended. It took " + mins + " mins and "+ secs+ " secs.");  }  replaceNullType(b);  if (typingFailed((JimpleBody)b))   throw new RuntimeException("type inference failed!");}  }
class C{  public DirectedGraph(Node rootNode,FeatureDefinition featDef){  this(rootNode,featDef,null);}  }
class C{  public DocumentHistoComparator(){  super(0.0);}  }
class C{  public float[] generateTransformedValuesBubble(IBubbleDataSet data,float phaseY,int from,int to){  final int count=(to - from + 1) * 2;  if (valuePointsForGenerateTransformedValuesBubble.length != count) {    valuePointsForGenerateTransformedValuesBubble=new float[count];  }  float[] valuePoints=valuePointsForGenerateTransformedValuesBubble;  for (int j=0; j < count; j+=2) {    Entry e=data.getEntryForIndex(j / 2 + from);    if (e != null) {      valuePoints[j]=e.getX();      valuePoints[j + 1]=e.getY() * phaseY;    } else {      valuePoints[j]=0;      valuePoints[j + 1]=0;    }  }  getValueToPixelMatrix().mapPoints(valuePoints);  return valuePoints;}  }
class C{  public static String toString(Attribute attribute) throws IllegalArgumentException {  StringBuffer buf=new StringBuffer();  buf.append(attribute.getName());  buf.append(ATTRIBUTE_KEYVAL_SEPARATOR);switch (attribute.getType()) {case RANGES:{      buf.append('[');      StringJoiner joiner=new StringJoiner(",");      for (      Value.Range range : attribute.getRanges().getRangeList()) {        joiner.add(String.format("%d-%d",range.getBegin(),range.getEnd()));      }      buf.append(joiner.toString());      buf.append(']');      break;    }case SCALAR:  buf.append(String.format("%.3f",attribute.getScalar().getValue()));break;case SET:buf.append('{');StringJoiner joiner=new StringJoiner(",");for (String item : attribute.getSet().getItemList()) {joiner.add(item);}buf.append(joiner.toString());buf.append('}');break;case TEXT:buf.append(attribute.getText().getValue());break;default :throw new IllegalArgumentException("Unsupported attribute value type: " + attribute);}return buf.toString();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_HOSTILE_DEATH(String value0){  return new SM_SYSTEM_MESSAGE(1360000,value0);}  }
class C{  private void dump(final Thread thread,final Throwable exception){  if (isWriting) {    return;  }  isWriting=true;  SharePref.saveLastCrashLog(mContext,mWriter.write(thread,exception));  isWriting=false;}  }
class C{  public TSDataOptimizerTask addAll(Collection<? extends TSData> tsdata){  tsdata.forEach(null);  return this;}  }
class C{  public void flush() throws IOException {  outs.flush();}  }
class C{  public boolean isDrawRoundedSlicesEnabled(){  return mDrawRoundedSlices;}  }
class C{  public Region<S> intersection(final Region<S> region1,final Region<S> region2){  final BSPTree<S> tree=region1.getTree(false).merge(region2.getTree(false),new IntersectionMerger());  tree.visit(nodeCleaner);  return region1.buildNew(tree);}  }
class C{  public static int px2dip(Context context,float pxValue){  return (int)(pxValue / getDensity(context) + 0.5f);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Root_END_ME_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200447,skilltarget);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CANT_CHANGE_SKIN_OPPOSITE_REQUIREMENT(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400290,value0,value1);}  }
class C{  public boolean isDrawValueAboveBarEnabled(){  return mDrawValueAboveBar;}  }
class C{  private int read(int bytesToRead) throws IOException {  int nBytesRead=0;  int nBytesTotalRead=0;  if (inputBuffer.length < bytesToRead)   inputBuffer=new byte[bytesToRead];  while (nBytesRead != -1 && bytesToRead > 0) {    nBytesRead=in.read(inputBuffer,nBytesTotalRead,bytesToRead);    if (nBytesRead != -1) {      bytesToRead-=nBytesRead;      nBytesTotalRead+=nBytesRead;    }  }  return nBytesTotalRead;}  }
class C{  public static void writeStringToFile(File file,String data,boolean append) throws IOException {  writeStringToFile(file,data,Charset.defaultCharset(),append);}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  protected void dumpData(String voiceName) throws Exception {  String audioTimelineFileName=MaryProperties.needFilename("voice." + voiceName + ".audioTimelineFile");  String basenameTimelineFileName=MaryProperties.needFilename("voice." + voiceName + ".basenameTimeline");  String unitFileName=MaryProperties.needFilename("voice." + voiceName + ".unitsFile");  String featureFileName=MaryProperties.needFilename("voice." + voiceName + ".featureFile");  String textGridFilename=audioTimelineFileName.replace(".mry",".TextGrid");  String wavFilename=audioTimelineFileName.replace(".mry",".wav");  loadUnitDatabase(audioTimelineFileName,basenameTimelineFileName,unitFileName);  loadFeatureFile(featureFileName);  System.out.println("All files loaded.");  dumpTextGrid(textGridFilename);  System.out.println("Dumped TextGrid to " + textGridFilename);  dumpAudio(wavFilename);  System.out.println("Dumped audio to " + wavFilename);}  }
class C{  private Token peekNext(){  return currentToken;}  }
class C{  private static String translate(String s,Locale locale){  try {    ResourceBundle bundle=ResourceBundle.getBundle("org.apache.commons.math.MessagesResources",locale);    if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {      return bundle.getString(s);    }  } catch (  MissingResourceException mre) {  }  return s;}  }
class C{  public Condition simplify(){  return this;}  }
class C{  @Override public Text replaceWholeText(String content) throws DOMException {  if (needsSyncData()) {    synchronizeData();  }  Node parent=this.getParentNode();  if (content == null || content.length() == 0) {    if (parent != null) {      parent.removeChild(this);    }    return null;  }  if (ownerDocument().errorChecking) {    if (!canModifyPrev(this)) {      throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NO_MODIFICATION_ALLOWED_ERR",null));    }    if (!canModifyNext(this)) {      throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NO_MODIFICATION_ALLOWED_ERR",null));    }  }  Text currentNode=null;  if (isReadOnly()) {    Text newNode=this.ownerDocument().createTextNode(content);    if (parent != null) {      parent.insertBefore(newNode,this);      parent.removeChild(this);      currentNode=newNode;    } else {      return newNode;    }  } else {    this.setData(content);    currentNode=this;  }  Node prev=currentNode.getPreviousSibling();  while (prev != null) {    if ((prev.getNodeType() == Node.TEXT_NODE) || (prev.getNodeType() == Node.CDATA_SECTION_NODE) || (prev.getNodeType() == Node.ENTITY_REFERENCE_NODE && hasTextOnlyChildren(prev))) {      parent.removeChild(prev);      prev=currentNode;    } else {      break;    }    prev=prev.getPreviousSibling();  }  Node next=currentNode.getNextSibling();  while (next != null) {    if ((next.getNodeType() == Node.TEXT_NODE) || (next.getNodeType() == Node.CDATA_SECTION_NODE) || (next.getNodeType() == Node.ENTITY_REFERENCE_NODE && hasTextOnlyChildren(next))) {      parent.removeChild(next);      next=currentNode;    } else {      break;    }    next=next.getNextSibling();  }  return currentNode;}  }
class C{  public static boolean writeToFile(StringBuffer content,File file,boolean append){  OutputStreamWriter fw=null;  try {    fw=new OutputStreamWriter(new FileOutputStream(file,append),"UTF-8");    Writer bw=new BufferedWriter(fw);    bw.write(content.toString());    bw.flush();    bw.close();  } catch (  IOException ex) {    Logger.getLogger(FileUtility.class.getName()).log(Level.SEVERE,null,ex);    return false;  } finally {    try {      fw.close();    } catch (    IOException ex) {      Logger.getLogger(FileUtility.class.getName()).log(Level.SEVERE,null,ex);      return false;    }  }  return true;}  }
class C{  private boolean hasTargetConnection(){  return (ConnectionHold.ConnectionContext.get() != null && ConnectionHold.ConnectionContext.get().get(ConnectionHold.currentDataSource.get()) != null);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public boolean containsAll(Collection<?> collection){  return MapCollections.containsAllHelper(this,collection);}  }
class C{  public NelderMeadSimplex(final double[] steps,final double rho,final double khi,final double gamma,final double sigma){  super(steps);  this.rho=rho;  this.khi=khi;  this.gamma=gamma;  this.sigma=sigma;}  }
class C{  protected void organizeAndSpawn(){  for (  List<ClusteredNpc> candidates : groupedSpawnObjects.values()) {    Group<ClusteredNpc> bySize=group(candidates,by(on(ClusteredNpc.class).getPositionHash()));    Set<String> keys=bySize.keySet();    int maxSize=0;    List<ClusteredNpc> npcs=null;    for (    String key : keys) {      if (bySize.find(key).size() > maxSize) {        npcs=bySize.find(key);        maxSize=npcs.size();      }    }    if (maxSize == 1) {      if (candidates.size() != 1) {        for (        ClusteredNpc snpc : candidates) {          snpc.spawn(snpc.getNpc().getSpawn().getZ());        }      } else {        ClusteredNpc singleNpc=candidates.get(0);        if (singleNpc.getWalkTemplate().getVersionId() != null) {          List<ClusteredNpc> variants=walkerVariants.get(singleNpc.getWalkTemplate().getVersionId());          if (variants == null) {            variants=new ArrayList<>();            walkerVariants.put(singleNpc.getWalkTemplate().getVersionId(),variants);          }          variants.add(singleNpc);        } else {          singleNpc.spawn(singleNpc.getNpc().getSpawn().getZ());        }      }    } else {      WalkerGroup wg=new WalkerGroup(npcs);      if (candidates.get(0).getWalkTemplate().getPool() != candidates.size()) {        log.warn("Incorrect pool for route: " + candidates.get(0).getWalkTemplate().getRouteId());      }      walkFormations.put(candidates.get(0).getWalkTemplate().getRouteId(),wg);      wg.form();      if (wg.getVersionId() == null) {        wg.spawn();        for (        ClusteredNpc snpc : candidates) {          if (npcs.contains(snpc)) {            continue;          }          snpc.spawn(snpc.getNpc().getZ());        }      } else {        List<WalkerGroup> variants=formationVariants.get(wg.getVersionId());        if (variants == null) {          variants=new ArrayList<>();          formationVariants.put(wg.getVersionId(),variants);        }        variants.add(wg);      }    }    for (    List<WalkerGroup> varGroups : formationVariants.values()) {      WalkerGroup spawnedGroup=varGroups.get(Rnd.get(varGroups.size()));      spawnedGroup.spawn();    }    for (    List<ClusteredNpc> varWalkers : walkerVariants.values()) {      ClusteredNpc spawnedWalker=varWalkers.get(Rnd.get(varWalkers.size()));      spawnedWalker.spawn(spawnedWalker.getNpc().getZ());    }  }}  }
class C{  static public void closeAllDatabase(){  Log.i(tag,"closeAllDatabase");  if (mInstance != null) {    for (int i=0; i < mInstance.databases.size(); ++i) {      if (mInstance.databases.get(i) != null) {        mInstance.databases.get(i).close();      }    }    mInstance.databases.clear();  }}  }
class C{  public TestMvvmDelegate(DelegateCallback callback){  super(callback);}  }
class C{  private void send(long ntpts,long rtpts) throws IOException {  long hb=ntpts / 1000000000;  long lb=((ntpts - hb * 1000000000) * 4294967296L) / 1000000000;  setLong(hb,8,12);  setLong(lb,12,16);  setLong(rtpts,16,20);  if (mTransport == TRANSPORT_UDP) {    upack.setLength(PACKET_LENGTH);    usock.send(upack);  } else {synchronized (mOutputStream) {      try {        mOutputStream.write(mTcpHeader);        mOutputStream.write(mBuffer,0,PACKET_LENGTH);      } catch (      Exception e) {      }    }  }}  }
class C{  public static RecipeFragment newInstance(Recipe recipe,int sectionNumber){  RecipeFragment fragment=new RecipeFragment();  fragment.recipe=recipe;  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public void addLookupAttributes(Entry[] attrSets){  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(JoinStateManager.class.getName(),"addLookupAttributes");  }  mgr.addAttributes(attrSets,true);  update();  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(JoinStateManager.class.getName(),"addLookupAttributes");  }}  }
class C{  @JsonIgnore public boolean isInTest(){  return (this.mode == DataTagConstants.MODE_TEST);}  }
class C{  protected void onEntityEvent(ActivitiEvent event){}  }
class C{  public SearchBarImplementor(SearchBarView view){  this.view=view;}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public String onValidate(String text){  if (text.length() >= 12) {    return null;  } else {    return getContext().getString(R.string.error_msg_api_secret_length);  }}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  protected MarketDeleteCommentQuery commentId(int value){  return unsafeParam("comment_id",value);}  }
class C{  public boolean hasManaStones(){  return manaStones != null && manaStones.size() > 0;}  }
class C{  public boolean isHealthy(){  return (healthIssueErrors == null || healthIssueErrors.length == 0);}  }
class C{  public void delete(String id){  log.debug("Request to delete PetCategory : {}",id);  petCategoryRepository.delete(UUID.fromString(id));}  }
class C{  public synchronized void append(AudioInputStream ais){  if (ais == this)   throw new IllegalArgumentException("Cannot append me to myself");  if (doneAppending)   throw new IllegalArgumentException("Cannot append after doneAppending() was called!");  m_audioInputStreamList.add(ais);  notifyAll();}  }
class C{  protected GroupsEditLinkQuery linkId(int value){  return unsafeParam("link_id",value);}  }
class C{  public Dfp power10(final int e){  Dfp d=newInstance(getOne());  if (e >= 0) {    d.exp=e / 4 + 1;  } else {    d.exp=(e + 1) / 4;  }switch ((e % 4 + 4) % 4) {case 0:    break;case 1:  d=d.multiply(10);break;case 2:d=d.multiply(100);break;default :d=d.multiply(1000);}return d;}  }
class C{  protected void assertClose(String msg,double[] m,double[] n,double tolerance){  if (m.length != n.length) {    Assert.fail("vectors not same length");  }  for (int i=0; i < m.length; i++) {    Assert.assertEquals(msg + " " + i+ " elements differ",m[i],n[i],tolerance);  }}  }
class C{  private static int toHours(long millis){  return (int)(millis / 1000) / 3600;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  @RequestMapping(value="/data-counters",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<DataCounter> createDataCounter(@RequestBody DataCounter dataCounter) throws URISyntaxException {  log.debug("REST request to save DataCounter : {}",dataCounter);  DataCounter result=dataCounterRepository.save(dataCounter);  return ResponseEntity.created(new URI("/api/data-counters/" + result.getVtype())).headers(HeaderUtil.createEntityCreationAlert("dataCounter",result.getVtype())).body(result);}  }
class C{  public CreateSiteWindow selectChapters(List<String> chapters){  List<WebElement> items=currentWindow.findElements(By.cssSelector(".cq-msm_58chapterPages .x-form-check-wrap"));  for (  WebElement item : items) {    WebElement label=item.findElement(By.tagName("label"));    if (!chapters.contains(label.getText())) {      item.findElement(By.tagName("input")).click();    }  }  return this;}  }
class C{  public boolean isEmpty(){  return priorityQueue.isEmpty();}  }
class C{  public void bumpSongCount(final long songId){  if (songId < 0) {    return;  }  final SQLiteDatabase database=mMusicDatabase.getWritableDatabase();  updateExistingRow(database,songId,true);}  }
class C{  public void trimToSize(int maxSize){  while (true) {    String key;    V value;synchronized (this) {      if (size < 0 || (map.isEmpty() && size != 0)) {        throw new IllegalStateException(getClass().getName() + ".sizeOf() is reporting inconsistent results!");      }      if (size <= maxSize) {        break;      }      Map.Entry<String,V> toEvict=eldest(map);      if (toEvict == null) {        break;      }      key=toEvict.getKey();      value=toEvict.getValue();      map.remove(key);      size-=safeSizeOf(key,value);      evictionCount++;    }    entryRemoved(true,key,value,null);  }}  }
class C{  @Override public DOMImplementation item(int index){  final int length=getLength();  if (index >= 0 && index < length) {    return (DOMImplementation)fImplementations.get(index);  }  return null;}  }
class C{  public static <T extends Map<?,?>>void notEmpty(String argumentName,T argumentObject){  notNull(argumentName,argumentObject);  if (argumentObject.size() == 0) {    throw new IllegalArgumentException(argumentName + " cannot be empty");  }}  }
class C{  public synchronized boolean respond(int messageId,int response){  RequestResponseHandler handler=map.get(messageId);  if (handler != null) {    map.remove(messageId);    log.debug("RequestResponseHandler triggered for response code " + messageId + " from "+ player.getName());    handler.handle(player,response);    return true;  }  return false;}  }
class C{  public static final void drawRevoluteJoint(GL2 gl,RevoluteJoint joint){  Vector2 anchor=joint.getAnchor1();  gl.glColor4f(0.8f,0.8f,0.8f,1.0f);  RenderUtilities.fillCircleFromCenter(gl,0.025,anchor.x,anchor.y);  gl.glColor4f(0.3f,0.3f,0.3f,1.0f);  RenderUtilities.drawCircleFromCenter(gl,0.025,anchor.x,anchor.y,false,false);}  }
class C{  AssignmentsImpl(AssignmentsRepository assignmentRepository,MutexRepository mutRepository){  repository=null;  mutexRepository=mutRepository;  assignmentsRepository=assignmentRepository;  random=null;}  }
class C{  public static Map<String,Object> updateContent(DispatchContext dctx,Map<String,? extends Object> rcontext){  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);  context.put("entityOperation","_UPDATE");  List<String> targetOperationList=ContentWorker.prepTargetOperationList(context,"_UPDATE");  List<String> contentPurposeList=ContentWorker.prepContentPurposeList(context);  context.put("targetOperationList",targetOperationList);  context.put("contentPurposeList",contentPurposeList);  context.put("skipPermissionCheck",null);  Map<String,Object> result=updateContentMethod(dctx,context);  return result;}  }
class C{  private void closeCounterDataInputStream() throws DataFallbackException {  if (LOG.isDebugEnabled())   LOG.debug("Closing the counter file reader for the file " + counterFile.getName());  if (dInput != null) {    try {      dInput.close();    } catch (    IOException e) {      throw new DataFallbackException(e.getMessage());    } finally {      dInput=null;    }  }}  }
class C{  public void invertProbability(){  normalizeToSum();  double dRemaining=1.0;  Iterator<TKeyType> iIter=hDistro.keySet().iterator();  while (iIter.hasNext()) {    TKeyType oNext=iIter.next();    setValue(oNext,dRemaining - getValue(oNext));    dRemaining+=getValue(oNext);  }}  }
class C{  public RequestInfo(RequestInfo other){  __isset_bit_vector.clear();  __isset_bit_vector.or(other.__isset_bit_vector);  if (other.isSetServiceName()) {    this.serviceName=other.serviceName;  }  this.sequenceId=other.sequenceId;  this.callType=other.callType;  this.timeout=other.timeout;}  }
class C{  public User(String userID){  this.userID=userID;}  }
class C{  @Override public boolean onLayoutChild(CoordinatorLayout parent,V child,int layoutDirection){  int startX=(int)(-(child.getMeasuredWidth() - parent.getMeasuredWidth()) / 2.0);  child.layout(startX,(int)top,startX + child.getMeasuredWidth(),(int)(top + child.getMeasuredHeight()));  return true;}  }
class C{  public static boolean lastGradleSyncFailed(@NotNull Project project){  return !GradleSyncState.getInstance(project).isSyncInProgress() && isBuildWithGradle(project) && requiredAndroidModelMissing(project);}  }
class C{  public Builder withVerbosity(){  this.verbose=true;  return this;}  }
class C{  private void checkParameters(){  if (inputSigma != null) {    final double[] init=getStartPoint();    if (inputSigma.length != init.length) {      throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,inputSigma.length,init.length);    }    final double[] lB=getLowerBound();    final double[] uB=getUpperBound();    for (int i=0; i < init.length; i++) {      if (inputSigma[i] > uB[i] - lB[i]) {        throw new MathIllegalArgumentException(LocalizedCoreFormats.OUT_OF_RANGE_SIMPLE,inputSigma[i],0,uB[i] - lB[i]);      }    }  }}  }
class C{  public boolean isApplicable(){  return getViewer() instanceof GraphView && (((GraphView)getViewer()).getSelectedNodes().size() > 0 || ((GraphView)getViewer()).getSelectedEdges().size() > 0);}  }
class C{  public static double[] computePhaseSpectrum_FD(final double[] fft){  if (fft == null)   throw new NullPointerException("Received null argument");  double[] phases=new double[fft.length / 2];  phases[0]=Math.atan2(0,fft[0]);  for (int i=2; i < fft.length; i+=2) {    phases[i / 2]=Math.atan2(fft[i + 1],fft[i]);  }  return phases;}  }
class C{  private static void copyItemInfo(Item sourceItem,Item newItem){  newItem.setOptionalSocket(sourceItem.getOptionalSocket());  newItem.setItemCreator(sourceItem.getItemCreator());  if (sourceItem.hasManaStones()) {    for (    ManaStone manaStone : sourceItem.getItemStones()) {      ItemSocketService.addManaStone(newItem,manaStone.getItemId());    }  }  if (sourceItem.getGodStone() != null) {    newItem.addGodStone(sourceItem.getGodStone().getItemId());  }  if (sourceItem.getEnchantLevel() > 0) {    newItem.setEnchantLevel(sourceItem.getEnchantLevel());  }  if (sourceItem.isSoulBound()) {    newItem.setSoulBound(true);  }  newItem.setBonusNumber(sourceItem.getBonusNumber());  newItem.setRandomStats(sourceItem.getRandomStats());  newItem.setRandomCount(sourceItem.getRandomCount());  newItem.setIdianStone(sourceItem.getIdianStone());  newItem.setItemColor(sourceItem.getItemColor());  newItem.setItemSkinTemplate(sourceItem.getItemSkinTemplate());}  }
class C{  public ConditionNegativeTest(String fieldName,Condition condition,String toFind){  this.condition=condition;  this.toFind=toFind;  this.fieldName=fieldName;}  }
class C{  public GeoServerStyleHeadingNode(FileSystemInterface handler,GeoServerConnection connection,String title){  super(title);  this.handler=handler;  this.connection=connection;  this.title=title;}  }
class C{  @POST @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) @ApiOperation(value="Submit feedback") @Timed public Response postFeedback(@ApiParam(name="userFeedback",value="Please see model example",required=true) final UserFeedback userFeedback,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){  userFeedback.setUsername(authorization.getUser(authorizationHeader));  feedback.createUserFeedback(userFeedback);  return httpHeader.headers(CREATED).build();}  }
class C{  private void maybeQueueReadyJobsForExecutionLockedH(){  int chargingCount=0;  int idleCount=0;  int backoffCount=0;  int connectivityCount=0;  List<JobStatus> runnableJobs=new ArrayList<JobStatus>();  ArraySet<JobStatus> jobs=mJobs.getJobs();  for (int i=0; i < jobs.size(); i++) {    JobStatus job=jobs.valueAt(i);    if (isReadyToBeExecutedLocked(job)) {      if (job.getNumFailures() > 0) {        backoffCount++;      }      if (job.hasIdleConstraint()) {        idleCount++;      }      if (job.hasConnectivityConstraint() || job.hasUnmeteredConstraint()) {        connectivityCount++;      }      if (job.hasChargingConstraint()) {        chargingCount++;      }      runnableJobs.add(job);    } else     if (isReadyToBeCancelledLocked(job)) {      stopJobOnServiceContextLocked(job);    }  }  if (backoffCount > 0 || idleCount >= MIN_IDLE_COUNT || connectivityCount >= MIN_CONNECTIVITY_COUNT || chargingCount >= MIN_CHARGING_COUNT || runnableJobs.size() >= MIN_READY_JOBS_COUNT) {    for (int i=0; i < runnableJobs.size(); i++) {      mPendingJobs.add(runnableJobs.get(i));    }  }}  }
class C{  public void addBreak(){  Item wordItem=relation.getTail();  if (wordItem != null) {    FeatureSet featureSet=wordItem.getFeatures();    featureSet.setString("break","1");  }}  }
class C{  public boolean ignore_types(){  return soot.PhaseOptions.getBoolean(options,"ignore-types");}  }
class C{  public MonsterToQuestCursor queryMonsterToQuestMonster(long id){  return mHelper.queryMonsterToQuestMonster(id);}  }
class C{  public ChangeSet decrement(String path,float delta){  return increment(path,-delta);}  }
class C{  @Override public void onIntroduceType(IntroduceTypeData introduceTypeData){  SpaceSynchronizationEndpoint endpointInterceptor=getEndpoint(introduceTypeData.getTypeDescriptor().getTypeName());  if (endpointInterceptor != null)   endpointInterceptor.onIntroduceType(introduceTypeData);}  }
class C{  private void checkOnClickListener(View view,AttributeSet attrs){  final Context context=view.getContext();  if (!(context instanceof ContextWrapper) || (Build.VERSION.SDK_INT >= 15 && !ViewCompat.hasOnClickListeners(view))) {    return;  }  final TypedArray a=context.obtainStyledAttributes(attrs,sOnClickAttrs);  final String handlerName=a.getString(0);  if (handlerName != null) {    view.setOnClickListener(new DeclaredOnClickListener(view,handlerName));  }  a.recycle();}  }
class C{  @Override public String toString(){  return super.toString() + "[caseSensitivity=" + caseSensitivity+ "]";}  }
class C{  public static Object nullToBlank(Object object){  if (object == null) {    return StringUtil.BLANK;  }  return object;}  }
class C{  private void cleanupMinidumpFile(){  if (!CrashFileManager.tryMarkAsUploaded(mFileToUpload)) {    Log.w(TAG,"Unable to mark " + mFileToUpload + " as uploaded.");    if (!mFileToUpload.delete()) {      Log.w(TAG,"Cannot delete " + mFileToUpload);    }  }}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  private static boolean isSuccessful(int responseCode){  return responseCode == 200 || responseCode == 201 || responseCode == 202;}  }
class C{  public void registerEditor(RTEditText editor,boolean useRichTextEditing){  mEditors.put(editor.getId(),editor);  editor.register(this,mRTApi);  editor.setRichTextEditing(useRichTextEditing,false);  updateToolbarVisibility();}  }
class C{  public void addFieldToRemove(final String javaFieldName){  fieldsToRemove.add(javaFieldName);}  }
class C{  private static int computeDimension(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft,float moduleSize) throws NotFoundException {  int tltrCentersDimension=MathUtils.round(ResultPoint.distance(topLeft,topRight) / moduleSize);  int tlblCentersDimension=MathUtils.round(ResultPoint.distance(topLeft,bottomLeft) / moduleSize);  int dimension=((tltrCentersDimension + tlblCentersDimension) / 2) + 7;switch (dimension & 0x03) {case 0:    dimension++;  break;case 2:dimension--;break;case 3:throw NotFoundException.getNotFoundInstance();}return dimension;}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set nodeShape=none;");}  }
class C{  public static boolean isStorageExists(){  if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {    return true;  }  return false;}  }
class C{  private static Version[] buildVersions(){  return new Version[]{new Version(1,10,10,8,8,new ECBlocks(5,new ECB(1,3))),new Version(2,12,12,10,10,new ECBlocks(7,new ECB(1,5))),new Version(3,14,14,12,12,new ECBlocks(10,new ECB(1,8))),new Version(4,16,16,14,14,new ECBlocks(12,new ECB(1,12))),new Version(5,18,18,16,16,new ECBlocks(14,new ECB(1,18))),new Version(6,20,20,18,18,new ECBlocks(18,new ECB(1,22))),new Version(7,22,22,20,20,new ECBlocks(20,new ECB(1,30))),new Version(8,24,24,22,22,new ECBlocks(24,new ECB(1,36))),new Version(9,26,26,24,24,new ECBlocks(28,new ECB(1,44))),new Version(10,32,32,14,14,new ECBlocks(36,new ECB(1,62))),new Version(11,36,36,16,16,new ECBlocks(42,new ECB(1,86))),new Version(12,40,40,18,18,new ECBlocks(48,new ECB(1,114))),new Version(13,44,44,20,20,new ECBlocks(56,new ECB(1,144))),new Version(14,48,48,22,22,new ECBlocks(68,new ECB(1,174))),new Version(15,52,52,24,24,new ECBlocks(42,new ECB(2,102))),new Version(16,64,64,14,14,new ECBlocks(56,new ECB(2,140))),new Version(17,72,72,16,16,new ECBlocks(36,new ECB(4,92))),new Version(18,80,80,18,18,new ECBlocks(48,new ECB(4,114))),new Version(19,88,88,20,20,new ECBlocks(56,new ECB(4,144))),new Version(20,96,96,22,22,new ECBlocks(68,new ECB(4,174))),new Version(21,104,104,24,24,new ECBlocks(56,new ECB(6,136))),new Version(22,120,120,18,18,new ECBlocks(68,new ECB(6,175))),new Version(23,132,132,20,20,new ECBlocks(62,new ECB(8,163))),new Version(24,144,144,22,22,new ECBlocks(62,new ECB(8,156),new ECB(2,155))),new Version(25,8,18,6,16,new ECBlocks(7,new ECB(1,5))),new Version(26,8,32,6,14,new ECBlocks(11,new ECB(1,10))),new Version(27,12,26,10,24,new ECBlocks(14,new ECB(1,16))),new Version(28,12,36,10,16,new ECBlocks(18,new ECB(1,22))),new Version(29,16,36,14,16,new ECBlocks(24,new ECB(1,32))),new Version(30,16,48,14,22,new ECBlocks(28,new ECB(1,49)))};}  }
class C{  public DatabaseGetCitiesByIdQuery(VkApiClient client){  super(client,"database.getCitiesById",Utils.buildParametrizedType(List.class,BaseObject.class));}  }
class C{  private void checkDeclaredElements(DTDGrammar grammar,int elementIndex,int contentSpecIndex,XMLContentSpec contentSpec){  grammar.getContentSpec(contentSpecIndex,contentSpec);  if (contentSpec.type == XMLContentSpec.CONTENTSPECNODE_LEAF) {    String value=(String)contentSpec.value;    if (value != null && grammar.getElementDeclIndex(value) == -1) {      fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"UndeclaredElementInContentSpec",new Object[]{grammar.getElementDeclName(elementIndex).rawname,value},XMLErrorReporter.SEVERITY_WARNING);    }  } else   if ((contentSpec.type == XMLContentSpec.CONTENTSPECNODE_CHOICE) || (contentSpec.type == XMLContentSpec.CONTENTSPECNODE_SEQ)) {    final int leftNode=((int[])contentSpec.value)[0];    final int rightNode=((int[])contentSpec.otherValue)[0];    checkDeclaredElements(grammar,elementIndex,leftNode,contentSpec);    checkDeclaredElements(grammar,elementIndex,rightNode,contentSpec);  } else   if (contentSpec.type == XMLContentSpec.CONTENTSPECNODE_ZERO_OR_MORE || contentSpec.type == XMLContentSpec.CONTENTSPECNODE_ZERO_OR_ONE || contentSpec.type == XMLContentSpec.CONTENTSPECNODE_ONE_OR_MORE) {    final int leftNode=((int[])contentSpec.value)[0];    checkDeclaredElements(grammar,elementIndex,leftNode,contentSpec);  }}  }
class C{  protected void skipped(AssumptionViolatedException e,Description description){}  }
class C{  public static void d(String tag,String msg){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg);}  }
class C{  public void updatePositions(ViewTransform viewTransform){  for (  ConstraintWidget widget : mWidgets.values()) {    widget.updateDrawPosition();    WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();    WidgetInteractionTargets widgetInteraction=companion.getWidgetInteractionTargets();    widgetInteraction.updatePosition(viewTransform);  }}  }
class C{  public MemBasedCache(){  this(DEFAULT_MEMORY_USAGE_BYTES);}  }
class C{  public SimpleEvent(UserInfo user,String description){  super(user);  this.description=description;}  }
class C{  @Override public IBinder onBind(Intent intent){  return mOperationsBinder;}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot,boolean isNeedResultMsg){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,isNeedResultMsg);}  }
class C{  public int findLastCompletelyVisibleItemPosition(){  final View child=findOneVisibleChild(layoutManager.getChildCount() - 1,-1,true,false);  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  public static Map<String,Object> sendOrderConfirmNotification(DispatchContext ctx,Map<String,? extends Object> context){  return sendOrderNotificationScreen(ctx,context,"PRDS_ODR_CONFIRM");}  }
class C{  public LogEntries(LogProcessType processType,long pid,String hostName,String hostAddress){  this(processType,new ArrayList<LogEntry>(0),0,pid,0,hostName,hostAddress);}  }
class C{  public static LessEqualsSpacePredicate lessEqual(Comparable<?> value){  return new LessEqualsSpacePredicate(value);}  }
class C{  @Override public void onMessage(final Message message,final Session session) throws JMSException {  LOGGER.debug("onMessage() - Message coming " + message);  try {    ProcessRequest processRequest=(ProcessRequest)this.processMessageConverter.fromMessage(message);    if (processRequest instanceof ProcessDisconnectionRequest) {      this.supervisionManager.onProcessDisconnection((ProcessDisconnectionRequest)processRequest);      if (LOGGER.isDebugEnabled()) {        LOGGER.debug("onMessage() - Process disconnection completed for DAQ " + ((ProcessDisconnectionRequest)processRequest).getProcessName());      }    } else     if (processRequest instanceof ProcessConnectionRequest) {      ProcessConnectionRequest processConnectionRequest=(ProcessConnectionRequest)processRequest;      LOGGER.info("onMessage - DAQ Connection request received from DAQ " + processConnectionRequest.getProcessName());      String processConnectionResponse=this.supervisionManager.onProcessConnection(processConnectionRequest);      if (LOGGER.isDebugEnabled()) {        LOGGER.debug("onMessage - Sending Connection response to DAQ " + processConnectionRequest.getProcessName());      }      MessageProducer messageProducer=session.createProducer(message.getJMSReplyTo());      try {        TextMessage replyMessage=session.createTextMessage();        replyMessage.setText(processConnectionResponse);        messageProducer.send(replyMessage);      }  finally {        messageProducer.close();      }    } else     if (processRequest instanceof ProcessConfigurationRequest) {      ProcessConfigurationRequest processConfigurationRequest=(ProcessConfigurationRequest)processRequest;      LOGGER.info("onMessage - DAQ configuration request received from DAQ " + processConfigurationRequest.getProcessName());      String processConfiguration=this.supervisionManager.onProcessConfiguration(processConfigurationRequest);      if (LOGGER.isDebugEnabled()) {        LOGGER.debug("onMessage - Sending Configuration Response to DAQ " + processConfigurationRequest.getProcessName());      }      MessageProducer messageProducer=session.createProducer(message.getJMSReplyTo());      try {        TextMessage replyMessage=session.createTextMessage();        replyMessage.setText(processConfiguration);        messageProducer.send(replyMessage);      }  finally {        messageProducer.close();      }    } else {      LOGGER.error("onMessage - Incoming ProcessRequest object not recognized! - ignoring the request");    }  } catch (  MessageConversionException e) {    LOGGER.error("onMessage - Exception caught while converting incoming DAQ request - unable to process request",e);  }}  }
class C{  private void prefixSearch(String query){  m_curNode=m_trie.find(query);  if (m_curNode != null) {    Iterator iter=trieIterator();    while (iter.hasNext())     addInternal((Tuple)iter.next());  }}  }
class C{  public String toString(){  String className=getClass().getName();  int dot=className.lastIndexOf('.');  if (dot >= 0) {    className=className.substring(dot + 1);  }  StringBuffer sb=new StringBuffer(className).append('[');  if (verify) {    sb.append("verify");  }  if (methodConstraintsSpecified) {    if (verify) {      sb.append(", ");    }    sb.append(methodConstraints);  }  if (permissions.length > 0) {    if (verify || methodConstraintsSpecified) {      sb.append(", ");    }    sb.append('{');    for (int i=0; i < permissions.length; i++) {      if (i > 0) {        sb.append(", ");      }      sb.append(permissions[i]);    }    sb.append('}');  }  sb.append(']');  return sb.toString();}  }
class C{  protected void removeAt(int index){  _set[index]=(long)0;  super.removeAt(index);}  }
class C{  public static List<MySQLRepBean> loadMySQLRepBean(String datasourceuri){  List<MySQLRepBean> list=new LinkedList<MySQLRepBean>();  try {    NodeList nodeList=loadXmlDoc(datasourceuri).getElementsByTagName("mysql-replica");    for (int i=0; i < nodeList.getLength(); i++) {      Node curRepNode=nodeList.item(i);      NamedNodeMap map=curRepNode.getAttributes();      String name=getAttribute(map,"name",null);      int type=getIntAttribute(map,"type",0);      int switchType=getIntAttribute(map,"switch-type",0);      MySQLRepBean repBean=new MySQLRepBean(name,type);      repBean.setSwitchType(switchType);      List<Node> mysqlNodes=getChildNodes(curRepNode,"mysql");      List<MySQLBean> allMysqls=mysqlNodes.stream().map(null).collect(Collectors.toList());      repBean.setMysqls(allMysqls);      list.add(repBean);    }  } catch (  Exception e) {    LOGGER.warn("loadMySQLRepBean err " + e);  }  return list;}  }
class C{  public MediaPlayerSession(Context context,Handler serviceHandler){  super(context,serviceHandler);  Log.d(TAG,"Session created (" + mSessionNumber + ")");}  }
class C{  public final boolean add(Node n){  if (pag.getTypeManager().castNeverFails(n.getType(),type)) {    return fastAdd(n);  }  return false;}  }
class C{  public static boolean hasPhoneNumber(ContentResolver resolver,long contactID){  Cursor phoneCursor;  String[] selectionArgs={String.valueOf(contactID)};  Uri contentUri=CommonDataKinds.Phone.CONTENT_URI;  phoneCursor=resolver.query(contentUri,DataTypeQuery.PROJECTION,DataTypeQuery.SELECTION,selectionArgs,DataTypeQuery.SORTORDER + " LIMIT 1");  if (phoneCursor == null) {    return false;  }  try {    return phoneCursor.getCount() > 0;  } catch (  Exception e) {    ErrorTracker.track(e);  } finally {    if (!phoneCursor.isClosed()) {      phoneCursor.close();    }  }  return false;}  }
class C{  public AemRadioGroup selectByValue(String value){  for (  AemRadioOption option : values) {    if (value.equals(option.getValue())) {      option.setSelected();    }  }  return this;}  }
class C{  public int next(){  matchesTextLength=0;  String queryLine=getNextLineStartsWith(NEW_QUERY);  if (queryLine == null)   return -1;  final String queryName=getNextToken(queryLine,NEW_QUERY);  int matchId=0;  matches.clear();  try {    while (hasNextLine()) {      String line=getNextLineStartsWith(NEW_QUERY,NEW_MATCH);      if (line == null)       break;      if (line.startsWith(NEW_QUERY)) {        pushBackLine(line);        break;      }      refHeaderLines.clear();      while (true) {        if (startsWith(line,LENGTH))         break; else         refHeaderLines.add(line.replaceAll("\\s+"," "));        line=nextLine().trim();      }      final int referenceLength=Basic.parseInt(getNextToken(line,LENGTH,EQUALS));      final String refName=Basic.swallowLeadingGreaterSign(Basic.toString(refHeaderLines," "));      do {        line=skipEmptyLines();        if (line.startsWith("Score ="))         break; else         line=nextLine().trim();      } while (hasNext());      float bitScore=Basic.parseFloat(getNextToken(line,SCORE,EQUALS));      int rawScore=Basic.parseInt(getNextToken(line,"("));      float expect=Basic.parseFloat(getNextToken(line,EXPECT,EQUALS));      line=nextLine();      float percentIdentities=Basic.parseFloat(getNextToken(line,IDENTITIES,"("));      int frame;      if (blastPMode) {        frame=0;      } else {        line=nextLine();        frame=Basic.parseInt(getNextToken(line,FRAME,EQUALS));      }      String[] queryLineTokens=getNextLineStartsWith(QUERY).split("\\s+");      int queryStart=Basic.parseInt(queryLineTokens[1]);      StringBuilder queryBuf=new StringBuilder();      queryBuf.append(queryLineTokens[2]);      int queryEnd=Basic.parseInt(queryLineTokens[3]);      if (!hasNextLine())       break;      nextLine();      String[] subjectLineTokens=getNextLineStartsWith(SUBJECT).split("\\s+");      int subjStart=Basic.parseInt(subjectLineTokens[1]);      StringBuilder subjBuf=new StringBuilder();      subjBuf.append(subjectLineTokens[2]);      int subjEnd=Basic.parseInt(subjectLineTokens[3]);      while (hasNextLine()) {        line=skipEmptyLines();        if (line == null)         break;        if (line.startsWith(NEW_QUERY)) {          pushBackLine(line);          break;        } else         if (line.startsWith(NEW_MATCH)) {          pushBackLine(line);          break;        } else         if (line.startsWith(SCORE)) {          pushBackLine(getNextLineStartsWith(NEW_QUERY));        } else         if (line.startsWith(QUERY)) {          queryLineTokens=line.split("\\s+");          queryBuf.append(queryLineTokens[2]);          queryEnd=Basic.parseInt(queryLineTokens[3]);          subjectLineTokens=getNextLineStartsWith(SUBJECT).split("\\s+");          subjBuf.append(subjectLineTokens[2]);          subjEnd=Basic.parseInt(subjectLineTokens[3]);        }      }      if (matches.size() < getMaxNumberOfMatchesPerRead() || bitScore > matches.last().bitScore) {        Match match=new Match();        match.bitScore=bitScore;        match.id=matchId++;        match.samLine=makeSAM(queryName,refName,referenceLength,bitScore,expect,rawScore,percentIdentities,frame,queryStart,queryEnd,subjStart,subjEnd,queryBuf.toString(),subjBuf.toString());        matches.add(match);        if (matches.size() > getMaxNumberOfMatchesPerRead())         matches.remove(matches.last());      }    }  } catch (  Exception ex) {    System.err.println("Error parsing file near line: " + getLineNumber() + ": "+ ex.getMessage());    if (incrementNumberOfErrors() >= getMaxNumberOfErrors())     throw new RuntimeException("Too many errors");  }  if (matches.size() == 0) {    if (queryName.length() > matchesText.length) {      matchesText=new byte[2 * queryName.length()];    }    for (int i=0; i < queryName.length(); i++)     matchesText[matchesTextLength++]=(byte)queryName.charAt(i);    matchesText[matchesTextLength++]='\n';    return 0;  } else {    for (    Match match : matches) {      byte[] bytes=match.samLine.getBytes();      if (matchesTextLength + bytes.length + 1 >= matchesText.length) {        byte[] tmp=new byte[2 * (matchesTextLength + bytes.length + 1)];        System.arraycopy(matchesText,0,tmp,0,matchesTextLength);        matchesText=tmp;      }      System.arraycopy(bytes,0,matchesText,matchesTextLength,bytes.length);      matchesTextLength+=bytes.length;      matchesText[matchesTextLength++]='\n';    }    return matches.size();  }}  }
class C{  private void captureImage(){  Intent intent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);  if (intent.resolveActivity(getPackageManager()) != null) {    File imageFile=ImageUtils.createImageFile(imageDirectory);    if (imageFile != null) {      Uri uri=FileProvider.getUriForFile(this,getString(R.string.shared_file_provider),imageFile);      currentImagePath="file:" + imageFile.getAbsolutePath();      intent.putExtra(MediaStore.EXTRA_OUTPUT,uri);      startActivityForResult(intent,Constants.REQUEST_CODE_CAPTURE);    } else {      Toast.makeText(this,getString(R.string.error_create_image_file),Toast.LENGTH_LONG).show();    }  } else {    Toast.makeText(this,getString(R.string.error_no_camera),Toast.LENGTH_LONG).show();  }}  }
class C{  public boolean isFinal(){  ASTNode$State state=state();  try {    return true;  }  finally {  }}  }
class C{  private byte[] encryptModulus(BigInteger modulus){  byte[] encryptedModulus=modulus.toByteArray();  if ((encryptedModulus.length == 0x81) && (encryptedModulus[0] == 0x00)) {    byte[] temp=new byte[0x80];    System.arraycopy(encryptedModulus,1,temp,0,0x80);    encryptedModulus=temp;  }  for (int i=0; i < 4; i++) {    byte temp=encryptedModulus[i];    encryptedModulus[i]=encryptedModulus[0x4d + i];    encryptedModulus[0x4d + i]=temp;  }  for (int i=0; i < 0x40; i++) {    encryptedModulus[i]=(byte)(encryptedModulus[i] ^ encryptedModulus[0x40 + i]);  }  for (int i=0; i < 4; i++) {    encryptedModulus[0x0d + i]=(byte)(encryptedModulus[0x0d + i] ^ encryptedModulus[0x34 + i]);  }  for (int i=0; i < 0x40; i++) {    encryptedModulus[0x40 + i]=(byte)(encryptedModulus[0x40 + i] ^ encryptedModulus[i]);  }  return encryptedModulus;}  }
class C{  public static void deletePlayer(PlayerAccountData accData){  if (accData.getDeletionDate() != null) {    return;  }  accData.setDeletionDate(new Timestamp(System.currentTimeMillis() + 5 * 60 * 1000));  storeDeletionTime(accData);}  }
class C{  public static String shouldCreateChatlog(String message,String user,String serverIp){  if (!SERVER_ADDRESS.matcher(serverIp).matches()) {    return null;  }  Matcher chatMatcher=CHAT_FORMAT.matcher(message);  if (!chatMatcher.matches()) {    return null;  }  String sender=chatMatcher.group(1);  if (sender.equals(user)) {    return null;  }  String chatMessage=chatMatcher.group(2);  for (  String badWord : RewiMod.getInstance().getBlacklistedWords()) {    if (chatMessage.contains(badWord)) {      return sender;    }  }  return null;}  }
class C{  public static boolean hasCache(){  return HASH_CACHE != null;}  }
class C{  private void updateDoneText(ArrayList<String> resultList){  int size=0;  if (resultList == null || resultList.size() <= 0) {    mSubmitButton.setText(R.string.action_done);    mSubmitButton.setEnabled(false);  } else {    size=resultList.size();    mSubmitButton.setEnabled(true);  }  mSubmitButton.setText(getString(R.string.action_button_string,getString(R.string.action_done),size,mDefaultCount));}  }
class C{  public void runAllSlot(){  moveToId(0);  System.out.println("== runAllSlot start at " + currentSlot + " ==");  while (isValidSlot()) {    if (currentSlot % 10 == 0)     System.out.print(currentSlot + ": ");    int flag=(Integer)getVal(currentPos(),INTEGER).asJavaVal();    System.out.print(flag + " ");    if ((currentSlot + 1) % 10 == 0)     System.out.println();    currentSlot++;  }  System.out.println("== runAllSlot end at " + currentSlot + " ==");}  }
class C{  public static final double binomialSuccessProbability(int iNumberOfTrials,int iNumberOfSuccesses,double dSuccessChance){  return gr.demokritos.iit.jinsect.utils.factorial(iNumberOfTrials,iNumberOfSuccesses) * Math.pow(dSuccessChance,iNumberOfSuccesses) * Math.pow(1.0 - dSuccessChance,iNumberOfTrials - iNumberOfSuccesses);}  }
class C{  public AirMapStatus(){}  }
class C{  @Override public synchronized boolean isProcessAliveType(){  return (getAliveType().equals(AliveTimer.ALIVE_TYPE_PROCESS));}  }
class C{  @Override public boolean hasNext(){  if (done)   return false;  if (nextMatches == null)   nextMatches=getNext();  if (nextMatches == sentinel) {    done=true;    nextMatches=null;  }  return !done;}  }
class C{  public static Beans<AuthToken> load(long uid){  return Helper.load(W.create("uid",uid).and("expired",System.currentTimeMillis(),W.OP_GT),0,100,AuthToken.class);}  }
class C{  private void prepareIntervalPropagations(){  if (prop_initialized)   return;  top_rank=new int[n_func];  Arrays.fill(top_rank,0);  topQ=new LinkedList<Integer>();  topQ.add(Constants.SUPER_MAIN);  while (!topQ.isEmpty()) {    int s=topQ.poll();    CgEdge p=call_graph[s];    while (p != null) {      int t=p.t;      int rep_t=rep_cg[t];      int w=top_rank[s] + 1;      if (top_rank[rep_t] < w)       top_rank[rep_t]=w;      if (--in_degree[rep_t] == 0)       topQ.add(rep_t);      p=p.next;    }  }  contextsForMethods=new ContextsCollector[n_func];  for (int i=0; i < n_func; ++i) {    ContextsCollector cc=new ContextsCollector();    cc.setBudget(Parameters.qryBudgetSize);    contextsForMethods[i]=cc;  }  prop_initialized=true;}  }
class C{  public boolean finish(){  if (!started)   return false;  boolean ok=true;  started=false;  try {    out.write(0x3b);    out.flush();    if (closeStream) {      out.close();    }  } catch (  IOException e) {    ok=false;  }  return ok;}  }
class C{  public void removeListener(CacheListener<K,V> listener){  listeners.remove(listener);}  }
class C{  private synchronized final void fallAsleep(long duration) throws InterruptedException {  wait(duration);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Petrification_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200312,skillname);}  }
class C{  @Override public void deleteData(int offset,int count) throws DOMException {  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");}  }
class C{  public void init(FMLInitializationEvent event){  initBusses();  this.stateMachine=new ServerStateMachine(ServerState.WAITING_FOR_MOD_READY);}  }
class C{  public PointsToSet reachingObjects(Context c,Local l,SootField f){  return reachingObjects(reachingObjects(c,l),f);}  }
class C{  public static double fro(Z1 u){  int i;  double fac, nrm, scale;  int n=u.n;  scale=0.0;  for (i=0; i < n; i++) {    scale=Math.max(scale,Math.abs(u.re[i]) + Math.abs(u.im[i]));  }  if (scale == 0) {    return 0.0;  }  if (scale < 1) {    scale=scale * 1.0e20;  }  scale=1 / scale;  nrm=0;  for (i=0; i < n; i++) {    fac=scale * u.re[i];    nrm=nrm + fac * fac;    fac=scale * u.im[i];    nrm=nrm + fac * fac;  }  return Math.sqrt(nrm) / scale;}  }
class C{  public <K,V>Cache<K,V> createCache(CacheType cacheType,String carbonStorePath){  if (!dictionaryCacheAlreadyExists(cacheType)) {synchronized (lock) {      if (!dictionaryCacheAlreadyExists(cacheType)) {        if (null == cacheTypeToLRUCacheMap.get(cacheType)) {          createLRULevelCacheInstance(cacheType);        }        createDictionaryCacheForGivenType(cacheType,carbonStorePath);      }    }  }  return cacheTypeToCacheMap.get(cacheType);}  }
class C{  protected Storage createStorage(){  return new Storage();}  }
class C{  private final void reapReachedMarkers(){  if (!_cacheManager.requiresEvictionReplicationProtection())   return;  int reapCount=0;  try {    long currentTime=SystemTime.timeMillis();    long expirationTime=currentTime - LM_CHECK_TIME_MARKERS_REPOSITORY_DEFAULT;    if (_force || _lastReapedMarkersRepository < expirationTime)     _lastReapedMarkersRepository=currentTime; else     return;    reapCount=_cacheManager.getEvictionReplicationsMarkersRepository().reapUnused();  } catch (  Exception ex) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,this.getName() + " - caught exception while reaping reached markers ",ex);    }  }  if (reapCount > 0 && _logger.isLoggable(Level.FINE)) {    _logger.fine(this.getName() + " - Reaped reached markers. [Reaped: " + reapCount+ ", Remaining:"+ _cacheManager.getEvictionReplicationsMarkersRepository().size()+ "]");  }}  }
class C{  @Override public IAssignmentAlgorithm createAssignmentAlgorithm(){  return assignmentUsingBestHit;}  }
class C{  public AnnotatedString tokenize(String inputText,String lang){  LanguageResource langRes=this.getLanguageResource(lang);  AnnotatedString input=new FastAnnotatedString(inputText);  this.identifyTokens(input,langRes);  this.identifyPunct(input,langRes);  this.identifyAbbrev(input,langRes);  this.identifyTus(input,langRes);  return input;}  }
class C{  public void expandToIntegerLimits(){  clip[0]=Math.floor(clip[0]);  clip[1]=Math.floor(clip[1]);  clip[6]=Math.ceil(clip[6]);  clip[7]=Math.ceil(clip[7]);}  }
class C{  public NameFileFilter(List<String> names){  this(names,null);}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> propertyGreaterEqual(String propertyName,Comparable<?> value){  return property(propertyName,greaterEqual(value));}  }
class C{  public static Map<String,Object> convertDocumentFileToFile(DispatchContext dctx,Map<String,? extends Object> context){  XMultiComponentFactory xmulticomponentfactory=null;  String stringUrl=(String)context.get("filenameFrom");  String stringConvertedFile=(String)context.get("filenameTo");  String inputMimeType=(String)context.get("inputMimeType");  String outputMimeType=(String)context.get("outputMimeType");  String oooHost=(String)context.get("oooHost");  String oooPort=(String)context.get("oooPort");  try {    xmulticomponentfactory=OpenOfficeWorker.getRemoteServer(oooHost,oooPort);    File inputFile=new File(stringUrl);    long fileSize=inputFile.length();    FileInputStream fis=new FileInputStream(inputFile);    ByteArrayOutputStream baos=new ByteArrayOutputStream((int)fileSize);    int c;    while ((c=fis.read()) != -1) {      baos.write(c);    }    OpenOfficeByteArrayInputStream oobais=new OpenOfficeByteArrayInputStream(baos.toByteArray());    OpenOfficeByteArrayOutputStream oobaos=OpenOfficeWorker.convertOODocByteStreamToByteStream(xmulticomponentfactory,oobais,inputMimeType,outputMimeType);    FileOutputStream fos=new FileOutputStream(stringConvertedFile);    fos.write(oobaos.toByteArray());    fos.close();    fis.close();    oobais.close();    oobaos.close();    Map results=ServiceUtil.returnSuccess();    return results;  } catch (  IOException e) {    Debug.logError(e,"Error in OpenOffice operation: ",module);    return ServiceUtil.returnError(e.toString());  }catch (  Exception e) {    Debug.logError(e,"Error in OpenOffice operation: ",module);    return ServiceUtil.returnError(e.toString());  }}  }
class C{  public static String checkPartnerTrackingCodeUrlParam(HttpServletRequest request,HttpServletResponse response){  String trackingCodeId=request.getParameter("ptc");  if (UtilValidate.isNotEmpty(trackingCodeId)) {    Delegator delegator=(Delegator)request.getAttribute("delegator");    GenericValue trackingCode;    try {      trackingCode=EntityQuery.use(delegator).from("TrackingCode").where("trackingCodeId",trackingCodeId).cache().queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,"Error looking up TrackingCode with trackingCodeId [" + trackingCodeId + "], ignoring this trackingCodeId",module);      return "error";    }    if (trackingCode == null) {      String dtc=request.getParameter("dtc");      if (UtilValidate.isEmpty(dtc)) {        dtc=EntityUtilProperties.getPropertyValue("general","partner.trackingCodeId.default",delegator);      }      if (UtilValidate.isNotEmpty(dtc)) {        GenericValue defaultTrackingCode=null;        try {          defaultTrackingCode=EntityQuery.use(delegator).from("TrackingCode").where("trackingCodeId",dtc).cache().queryOne();        } catch (        GenericEntityException e) {          Debug.logError(e,"Error looking up Default values TrackingCode with trackingCodeId [" + dtc + "], not using the dtc value for new TrackingCode defaults",module);        }        if (defaultTrackingCode != null) {          defaultTrackingCode.set("trackingCodeId",trackingCodeId);          defaultTrackingCode.set("trackingCodeTypeId","PARTNER_MGD");          defaultTrackingCode.set("createdDate",UtilDateTime.nowTimestamp());          defaultTrackingCode.set("createdByUserLogin",null);          defaultTrackingCode.set("lastModifiedDate",UtilDateTime.nowTimestamp());          defaultTrackingCode.set("lastModifiedByUserLogin",null);          trackingCode=defaultTrackingCode;          try {            trackingCode.create();          } catch (          GenericEntityException e) {            Debug.logError(e,"Error creating new Partner TrackingCode with trackingCodeId [" + trackingCodeId + "], ignoring this trackingCodeId",module);            return "error";          }        }      }      if (trackingCode == null) {        trackingCode=delegator.makeValue("TrackingCode");        trackingCode.set("trackingCodeId",trackingCodeId);        trackingCode.set("trackingCodeTypeId","PARTNER_MGD");        trackingCode.set("createdDate",UtilDateTime.nowTimestamp());        trackingCode.set("lastModifiedDate",UtilDateTime.nowTimestamp());        trackingCode.set("trackableLifetime",Long.valueOf(10000000000L));        trackingCode.set("billableLifetime",Long.valueOf(2592000));        trackingCode.set("comments","This TrackingCode has default values because no default TrackingCode could be found.");        Debug.logWarning("No default TrackingCode record was found, using a TrackingCode with hard coded default values: " + trackingCode,module);        try {          trackingCode.create();        } catch (        GenericEntityException e) {          Debug.logError(e,"Error creating new Partner TrackingCode with trackingCodeId [" + trackingCodeId + "], ignoring this trackingCodeId",module);          return "error";        }      }    }    return processTrackingCode(trackingCode,request,response,"TKCDSRC_URL_PARAM");  } else {    return "success";  }}  }
class C{  public Zdiagmat(int order,Z val){  Parameters.BaseIndexNotChangeable=true;  basex=Parameters.BaseIndex;  this.order=order;  getProperties();  re=new double[n];  im=new double[n];  for (int i=0; i < n; i++) {    re[i]=val.re;    im[i]=val.im;  }}  }
class C{  public CompareWithBaseRevisionAction(){  super(SVNRevision.BASE);}  }
class C{  @Override public List<Role> searchRole(Role role){  return sessionTemplate.selectList(NAMESPACE + ".searchRole",role);}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public boolean addTo(Rectangle bounds){  if (isEmpty()) {    return false;  }  bounds.x+=left;  bounds.width-=left;  bounds.y+=top;  bounds.height-=top;  bounds.width-=right;  bounds.height-=bottom;  return true;}  }
class C{  public void drawChartTransposed(Graphics2D gc){  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));  int y0=getHeight() - bottomMargin;  int y1=topMargin;  int x0=leftMargin;  int x1=getWidth() - rightMargin;  if (x0 >= x1)   return;  int numberOfClasses=getChartData().getNumberOfClasses();  int numberOfSeries=getChartData().getNumberOfSeries();  double xStep=(x1 - x0) / numberOfClasses;  double yStep=(y0 - y1) / (0.5 + numberOfSeries);  double maxValue=getChartData().getRange().get2().doubleValue();  if (scalingType == ChartViewer.ScalingType.LOG && maxValue > 0)   maxValue=Math.log(maxValue); else   if (scalingType == ChartViewer.ScalingType.SQRT && maxValue > 0)   maxValue=Math.sqrt(maxValue); else   if (scalingType == ChartViewer.ScalingType.PERCENT)   maxValue=100;  double factor=(maxValue > 0 ? getMaxRadius() / maxValue : 1);  int c=0;  for (  String className : getChartData().getClassNames()) {    if (isShowXAxis()) {      double xLabel=x0 + (c + 0.5) * xStep;      Dimension labelSize=Basic.getStringSize(gc,className,gc.getFont()).getSize();      Point2D apt=new Point2D.Double(xLabel,getHeight() - bottomMargin + 10);      if (classLabelAngle == 0) {        apt.setLocation(apt.getX() - labelSize.getWidth() / 2,apt.getY());      } else       if (classLabelAngle > Math.PI / 2) {        apt=Geometry.translateByAngle(apt,classLabelAngle,-labelSize.width);      }      if (getChartData().getChartSelection().isSelected(null,className)) {        gc.setColor(ProgramProperties.SELECTION_COLOR);        fillAndDrawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);      }      gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.DARK_GRAY));      if (sgc != null)       sgc.setCurrentItem(new String[]{null,className});      drawString(gc,className,apt.getX(),apt.getY(),classLabelAngle);      if (sgc != null)       sgc.clearCurrentItem();    }    int d=0;    for (    String series : getChartData().getSeriesNames()) {      double value;      if (scalingType == ChartViewer.ScalingType.PERCENT) {        double total=getChartData().getTotalForClassIncludingDisabledSeries(className);        if (total == 0)         value=0; else         value=100 * getChartData().getValueAsDouble(series,className) / total;      } else       if (scalingType == ChartViewer.ScalingType.LOG) {        value=getChartData().getValueAsDouble(series,className);        if (value > 1)         value=Math.log(value);      } else       if (scalingType == ChartViewer.ScalingType.SQRT) {        value=getChartData().getValueAsDouble(series,className);        if (value > 1)         value=Math.sqrt(value);      } else       value=getChartData().getValueAsDouble(series,className);      value*=factor;      int[] oval=new int[]{(int)((x0 + (c + 0.5) * xStep) - value),(int)((y0 - (d + 1) * yStep) - value),(int)(2 * value),(int)(2 * value)};      Color color=getChartColors().getSampleColorWithAlpha(series,150);      gc.setColor(color);      if (sgc != null)       sgc.setCurrentItem(new String[]{series,className});      gc.fillOval(oval[0],oval[1],oval[2],oval[3]);      if (sgc != null)       sgc.clearCurrentItem();      boolean isSelected=getChartData().getChartSelection().isSelected(series,className);      if (isSelected) {        gc.setColor(ProgramProperties.SELECTION_COLOR);        if (oval[2] <= 1) {          oval[0]-=1;          oval[1]-=1;          oval[2]+=2;          oval[3]+=2;        }        gc.setStroke(HEAVY_STROKE);        gc.drawOval(oval[0],oval[1],oval[2],oval[3]);        gc.setStroke(NORMAL_STROKE);      } else {        gc.setColor(color.darker());        gc.drawOval(oval[0],oval[1],oval[2],oval[3]);      }      d++;      if (showValues || isSelected) {        String label="" + (int)getChartData().getValueAsDouble(series,className);        valuesList.add(new DrawableValue(label,oval[0] + oval[2] + 2,oval[1] + oval[3] / 2,isSelected));      }    }    c++;  }  if (valuesList.size() > 0) {    gc.setFont(getFont(ChartViewer.FontKeys.ValuesFont.toString()));    DrawableValue.drawValues(gc,valuesList,false,true);    valuesList.clear();  }}  }
class C{  public void upgradeGetdown(File oldgd,File curgd,File newgd){  if (!newgd.exists() || newgd.length() == curgd.length()) {    return;  }  if (oldgd.exists()) {    if (!oldgd.delete()) {      console.addLine("Error: Failed to remove old file version (1).");    }  }  if (!curgd.exists() || curgd.renameTo(oldgd)) {    if (newgd.renameTo(curgd)) {      if (oldgd.exists()) {        if (!oldgd.delete()) {          console.addLine("Error: Failed to remove old file version (2).");        }      }      try {        copy(new FileInputStream(curgd),new FileOutputStream(newgd));      } catch (      IOException e) {        errorHandler.handle(e);      }      return;    }    if (!oldgd.renameTo(curgd)) {      console.addLine("Error: Failed to revert renaming.");    }  }  try {    copy(new FileInputStream(newgd),new FileOutputStream(curgd));  } catch (  IOException ioe) {    errorHandler.handle(ioe);  }}  }
class C{  public MultivariateSummaryStatistics(int dimension){  this(dimension,true);}  }
class C{  public void updateScreen(){  super.updateScreen();  ++this.field_146444_f;}  }
class C{  private static Version readVersion(BitMatrix bitMatrix) throws FormatException {  int numRows=bitMatrix.getHeight();  int numColumns=bitMatrix.getWidth();  return Version.getVersionForDimensions(numRows,numColumns);}  }
class C{  private void exportToSLD(){  SLDWriterInterface sldWriter=SLDWriterFactory.createWriter(SLDOutputFormatEnum.SLD);  for (  SLDDataInterface sldData : sldDataList) {    StyledLayerDescriptor sld=SLDUtils.createSLDFromString(sldData);    String layerName=sldData.getLayerNameWithOutSuffix();    if (sld != null) {      String sldString=sldWriter.encodeSLD(sldData.getResourceLocator(),sld);      String sldFilename=layerName + ExternalFilenames.addFileExtensionSeparator(SLDEditorFile.getSLDFileExtension());      String destinationFolder=sldData.getSLDFile().getParent();      File fileToSave=new File(destinationFolder,sldFilename);      if (fileToSave.exists()) {        ConsoleManager.getInstance().error(this,Localisation.getField(YSLDTool.class,"YSLDTool.destinationAlreadyExists") + " " + sldFilename);      } else {        ConsoleManager.getInstance().information(this,Localisation.getField(YSLDTool.class,"YSLDTool.exportToSLDMsg") + " " + sldFilename);        BufferedWriter out;        try {          out=new BufferedWriter(new FileWriter(fileToSave));          out.write(sldString);          out.close();        } catch (        IOException e) {          ConsoleManager.getInstance().exception(this,e);        }      }    }  }}  }
class C{  public WallGetCommentsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  private void rememberUserInputForPokemonNameIfNewNickname(Pokemon pokemon){  if (!pokemonName.equals(pokemon.name) && pokeInfoCalculator.get(pokemonName) == null) {    putCorrection(pokemonName,pokemon.name);  }}  }
class C{  private void fillCommentCombo(Combo combo){  if (previousComments == null) {    previousComments=new ArrayList();  }  for (int i=previousComments.size() - 1; i >= 0; i--) {    combo.add(((String)previousComments.get(i)));  }  combo.select(0);}  }
class C{  public SecureAddAppEventQuery(VkApiClient client,ServiceActor actor,int userId,int activityId){  super(client,"secure.addAppEvent",OkResponse.class);  accessToken(actor.getAccessToken());  clientSecret(actor.getClientSecret());  userId(userId);  activityId(activityId);}  }
class C{  public void processUtterance(Utterance utterance) throws ProcessException {  utterance.getVoice().log("=== " + utterance.getString("input_text"));  AudioPlayer audioPlayer=utterance.getVoice().getAudioPlayer();  audioPlayer.setAudioFormat(MBROLA_AUDIO);  audioPlayer.setVolume(utterance.getVoice().getVolume());  List audioData=(List)utterance.getObject("mbrolaAudio");  if (audioData == null) {    throw new ProcessException("No \"mbrolaAudio\" object is associated with utterance");  }  int totalSize;  try {    totalSize=utterance.getInt("mbrolaAudioLength");  } catch (  NullPointerException npe) {    totalSize=0;  }  audioPlayer.begin(totalSize);  for (Iterator it=audioData.iterator(); it.hasNext(); ) {    byte[] bytes=(byte[])it.next();    if (!audioPlayer.write(bytes)) {      throw new ProcessException("Cannot write audio data to audio player");    }  }  if (!audioPlayer.end()) {    throw new ProcessException("audio player reports problem");  }}  }
class C{  protected AbstractXMLDocumentParser(XMLParserConfiguration config){  super(config);  config.setDocumentHandler(this);  config.setDTDHandler(this);  config.setDTDContentModelHandler(this);}  }
class C{  public Map<String,Object> evalPermission(DispatchContext dctx,Map<String,? extends Object> context){  if (UtilValidate.isNotEmpty(this.permissionServiceName)) {    ModelService thisService;    ModelService permission;    try {      thisService=dctx.getModelService(this.name);      permission=dctx.getModelService(this.permissionServiceName);    } catch (    GenericServiceException e) {      Debug.logError(e,"Failed to get ModelService: " + e.toString(),module);      Map<String,Object> result=ServiceUtil.returnSuccess();      result.put("hasPermission",Boolean.FALSE);      result.put("failMessage",e.getMessage());      return result;    }    if (permission != null) {      Map<String,Object> ctx=permission.makeValid(context,ModelService.IN_PARAM);      if (UtilValidate.isNotEmpty(this.permissionMainAction)) {        ctx.put("mainAction",this.permissionMainAction);      }      if (UtilValidate.isNotEmpty(this.permissionResourceDesc)) {        ctx.put("resourceDescription",this.permissionResourceDesc);      } else       if (thisService != null) {        ctx.put("resourceDescription",thisService.name);      }      LocalDispatcher dispatcher=dctx.getDispatcher();      Map<String,Object> resp;      try {        resp=dispatcher.runSync(permission.name,ctx,300,true);      } catch (      GenericServiceException e) {        Debug.logError(e,module);        Map<String,Object> result=ServiceUtil.returnSuccess();        result.put("hasPermission",Boolean.FALSE);        result.put("failMessage",e.getMessage());        return result;      }      if (ServiceUtil.isError(resp) || ServiceUtil.isFailure(resp)) {        Map<String,Object> result=ServiceUtil.returnSuccess();        result.put("hasPermission",Boolean.FALSE);        String failMessage=(String)resp.get("failMessage");        if (UtilValidate.isEmpty(failMessage)) {          failMessage=ServiceUtil.getErrorMessage(resp);        }        result.put("failMessage",failMessage);        return result;      }      return resp;    } else {      Map<String,Object> result=ServiceUtil.returnSuccess();      result.put("hasPermission",Boolean.FALSE);      result.put("failMessage","No ModelService found with the name [" + this.permissionServiceName + "]");      return result;    }  } else {    Map<String,Object> result=ServiceUtil.returnSuccess();    result.put("hasPermission",Boolean.FALSE);    result.put("failMessage","No ModelService found; no service name specified!");    return result;  }}  }
class C{  String determineInstallSource(){  boolean isInSystemImage=(getApplicationFlags() & ApplicationInfo.FLAG_SYSTEM) != 0;  return isInSystemImage ? INSTALL_SOURCE_SYSTEM : INSTALL_SOURCE_ORGANIC;}  }
class C{  private static boolean isUserinfoCharacter(char p_char){  return (p_char <= 'z' && (fgLookupTable[p_char] & MASK_USERINFO_CHARACTER) != 0);}  }
class C{  private void showPopup(MouseEvent event){  if (event.isPopupTrigger()) {    this.copyMenu.show(this.txtStackTrace,event.getX(),event.getY());  }}  }
class C{  protected static ImageIcon createImageIcon(String path){  java.net.URL imgURL=MenuLookDemo.class.getResource(path);  if (imgURL != null) {    return new ImageIcon(imgURL);  } else {    System.err.println("Couldn't find file: " + path);    return null;  }}  }
class C{  public LimitedServletInputStream(InputStream in,int totalExpected){  this.in=in;  this.totalExpected=totalExpected;}  }
class C{  protected PhotosGetMarketAlbumUploadServerQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  @ObjectiveCName("init:connection:client:") RecordHandler(DeepstreamConfig deepstreamConfig,IConnection connection,DeepstreamClientAbstract client){  this.deepstreamConfig=deepstreamConfig;  this.connection=connection;  this.client=client;  recordHandlerListeners=new RecordHandlerListeners();  records=new HashMap<>();  lists=new HashMap<>();  listeners=new HashMap<>();  hasRegistry=new UtilSingleNotifier(client,connection,Topic.RECORD,Actions.HAS,deepstreamConfig.getRecordReadTimeout());  snapshotRegistry=new UtilSingleNotifier(client,connection,Topic.RECORD,Actions.SNAPSHOT,deepstreamConfig.getRecordReadTimeout());}  }
class C{  public ShimpleLocalUses(ShimpleBody sb){  if (!sb.isSSA())   throw new RuntimeException("ShimpleBody is not in proper SSA form as required by ShimpleLocalUses.  You may need to rebuild it or use SimpleLocalUses instead.");  localToUses=new HashMap<Local,ArrayList>();  Iterator localsIt=sb.getLocals().iterator();  while (localsIt.hasNext()) {    Local local=(Local)localsIt.next();    localToUses.put(local,new ArrayList());  }  Iterator unitsIt=sb.getUnits().iterator();  while (unitsIt.hasNext()) {    Unit unit=(Unit)unitsIt.next();    Iterator boxIt=unit.getUseBoxes().iterator();    while (boxIt.hasNext()) {      ValueBox box=(ValueBox)boxIt.next();      Value value=box.getValue();      if (!(value instanceof Local))       continue;      List<UnitValueBoxPair> useList=localToUses.get(value);      useList.add(new UnitValueBoxPair(unit,box));    }  }}  }
class C{  Landlord landlord(){  return landlord;}  }
class C{  public MbrolaCaller(String[] cmd){  this.cmd=cmd;  closeDelay=Utilities.getLong("de.dfki.lt.freetts.mbrola.MbrolaCaller.closeDelay",100L).longValue();}  }
class C{  public static void init(String conf_filename) throws FileNotFoundException, IOException, MyException {  IniFileReader iniReader;  iniReader=new IniFileReader(conf_filename);  g_network_timeout=iniReader.getIntValue("network_timeout",DEFAULT_NETWORK_TIMEOUT);  if (g_network_timeout < 0) {    g_network_timeout=DEFAULT_NETWORK_TIMEOUT;  }  g_network_timeout*=1000;  g_charset=iniReader.getStrValue("charset");  if (g_charset == null || g_charset.length() == 0) {    g_charset="ISO8859-1";  }  g_server_group=ServerGroup.loadFromFile(iniReader);}  }
class C{  public void updateFieldState(FieldEnableState fieldEnableState,String panelName){  for (  String menuOption : keyOrderList) {    List<FieldIdEnum> fieldList=new ArrayList<FieldIdEnum>();    for (    FieldIdEnum fieldKey : fieldMap.keySet()) {      boolean value=fieldMap.get(fieldKey);      if (value) {        fieldList.add(fieldKey);      }    }    if (fieldEnableState != null) {      fieldEnableState.add(panelName,menuOption,fieldList);    }  }}  }
class C{  @Provides @Singleton ServiceRegistry provideServiceRegistry(@Global CuratorFramework curator,LifeCycleRegistry lifeCycle,MetricRegistry metricRegistry){  return lifeCycle.manage(new ZooKeeperServiceRegistry(curator,metricRegistry));}  }
class C{  @Override public void onClick(View view){switch (view.getId()) {case R.id.container_loading_view_large_feedbackBtn:    photosPresenter.initRefresh(getContext());  break;}}  }
class C{  public LexicalException(String msg){  super(msg);}  }
class C{  public static java.sql.Time toSqlTime(String hourStr,String minuteStr,String secondStr){  java.util.Date newDate=toDate("0","0","0",hourStr,minuteStr,secondStr);  if (newDate != null) {    return new java.sql.Time(newDate.getTime());  } else {    return null;  }}  }
class C{  @VisibleForTesting static SkinLayoutDefinition loadFromTokens(Iterator<String> tokens){  String key;  String value;  SkinLayoutDefinition definition=new SkinLayoutDefinition();  while (tokens.hasNext()) {    key=tokens.next();    if (key.equals("}")) {      break;    } else {      value=tokens.next();      if (value.equals("{")) {        definition.myChildren.put(key,loadFromTokens(tokens));      } else {        definition.myProperties.put(key,value);      }    }  }  return definition;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GATHER_LEARNED_NEW_GATHER_SKILL(String value0){  return new SM_SYSTEM_MESSAGE(1330004,value0);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  void cancelExecutingJob(){  mCallbackHandler.obtainMessage(MSG_CANCEL).sendToTarget();}  }
class C{  public static StatefulHash murmur3_128(){  return Hashes.createStateful(new MurmurHash3Parameters(MurmurHash3Variant.X64_128));}  }
class C{  public GroupsGetQueryWithExtended fields(GroupField... value){  return unsafeParam("fields",value);}  }
class C{  public static String removeTag(String html,String tag){  if (html == null)   return null;  StringBuilder sb=new StringBuilder();  int p=0;  int len=html.length();  while (p < len) {    int i=html.indexOf("<" + tag,p);    if (i > -1) {      sb.append(html.substring(p,i));      i=html.indexOf("</" + tag + ">",i);      if (i > -1) {        p=i + tag.length() + 3;      } else {        break;      }    } else {      sb.append(html.substring(p));      break;    }  }  return sb.toString();}  }
class C{  public void sendDelayedTimeDeadbandValues(){  equipmentLogger.debug("Sending all time deadband delayed values to the server");  this.equipmentTimeDeadband.sendDelayedTimeDeadbandValues();}  }
class C{  public void writeLong(long value) throws JMSException {  initializeWriting();  try {    this.dataOut.writeLong(value);  } catch (  IOException ioe) {    JMSException jmsEx=new JMSException("Could not write data:" + ioe.toString());    jmsEx.setLinkedException(ioe);    throw jmsEx;  }}  }
class C{  public String formatQueryString(String query){  if (this.ANDMATCH) {    return this.formatQueryStringAndDefault(query);  }  return this.formatQueryStringOrDefault(query);}  }
class C{  public int optInt(String key,int defaultValue){  try {    return getInt(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  protected void createSeparator(Composite parent,int verticalSpace){  Label label=new Label(parent,SWT.NONE);  GridData data=new GridData();  data.heightHint=verticalSpace;  label.setLayoutData(data);  label=new Label(parent,SWT.SEPARATOR | SWT.HORIZONTAL);  data=new GridData(GridData.FILL_HORIZONTAL);  label.setLayoutData(data);}  }
class C{  private boolean isResult(final ClientRequestReport clientRequestReport){  return clientRequestReport.isResult();}  }
class C{  public Complex(double real,double imaginary){  this.real=real;  this.imaginary=imaginary;}  }
class C{  @Override public boolean accepts(Field field){  return isList(field) && AnnotationsHelper.isFindPageObjectAnnotationPresent(field) && AnnotationsHelper.isGenericTypeAnnotedWithPageObject(field);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("select what=previous;");}  }
class C{  private void updateOCVersion(){  UpdateOCVersionOperation update=new UpdateOCVersionOperation(getAccount(),getContext());  RemoteOperationResult result=update.execute(getClient());  if (!result.isSuccess()) {    mLastFailedResult=result;  } else {    mIsShareSupported=update.getOCVersion().isSharedSupported();  }}  }
class C{  public static final void outlineShape(GL2 gl,Shape s,float w,float[] color){  float lw=RenderUtilities.getLineWidth(gl);  RenderUtilities.setLineWidth(gl,w);  if (color != null)   gl.glColor4fv(color,0);  RenderUtilities.drawShape(gl,s,true);  RenderUtilities.setLineWidth(gl,lw);}  }
class C{  public boolean equalsShared(Item otherItem){  if (otherItem == null) {    return false;  } else {    return getSharedContents().equals(otherItem.getSharedContents());  }}  }
class C{  public static byte[] packByteBufferIntoSingleByteArray(byte[][] byteBufferArr){  if (null == byteBufferArr || byteBufferArr.length == 0) {    return null;  }  int noOfCol=byteBufferArr.length;  short toDetermineLengthOfByteArr=2;  short offsetLen=(short)(noOfCol * 2 + toDetermineLengthOfByteArr);  int totalBytes=calculateTotalBytes(byteBufferArr) + offsetLen;  ByteBuffer buffer=ByteBuffer.allocate(totalBytes);  buffer.putShort((short)(totalBytes - toDetermineLengthOfByteArr));  buffer.putShort(offsetLen);  for (int index=0; index < byteBufferArr.length - 1; index++) {    int noOfBytes=byteBufferArr[index].length;    buffer.putShort((short)(offsetLen + noOfBytes));    offsetLen+=noOfBytes;  }  for (int index=0; index < byteBufferArr.length; index++) {    buffer.put(byteBufferArr[index]);  }  buffer.rewind();  return buffer.array();}  }
class C{  public Builder bounds(LatLngBounds bounds){  this.bounds=bounds;  return this;}  }
class C{  protected boolean cellConsumesEventType(Cell<?> cell,String eventType){  Set<String> consumedEvents=cell.getConsumedEvents();  return consumedEvents != null && consumedEvents.contains(eventType);}  }
class C{  @Override public void parse(XMLInputSource source) throws XNIException, IOException {  if (fParseInProgress) {    throw new XNIException("FWK005 parse may not be called while parsing.");  }  fParseInProgress=true;  try {    setInputSource(source);    parse(true);  } catch (  XNIException ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw ex;  }catch (  IOException ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw ex;  }catch (  RuntimeException ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw ex;  }catch (  Exception ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw new XNIException(ex);  } finally {    fParseInProgress=false;    this.cleanup();  }}  }
class C{  public Future execute(CompletionCallback callback){  if (callback == null)   throw new IllegalArgumentException("Callback cannot be null");  TaskManagerImpl taskManager=new TaskManagerImpl(this.executor_,this.tasks_,callback);  this.executor_.execute(taskManager);  return new Future(taskManager);}  }
class C{  public void clear(){  Iterator sets=m_map.entrySet().iterator();  while (sets.hasNext()) {    Map.Entry entry=(Map.Entry)sets.next();    ((TupleSet)entry.getValue()).clear();  }  m_count=0;}  }
class C{  private static TreeMap GetDataFromFile(String sDataFile,TreeMap tmTheme,int iThemeFieldIndex,int iSysIDFieldIndex,int iValFieldIndex,String sCategory,boolean hasHeader){  TreeMap hmSystem;  Double dVal;  try {    FileReader frIn=new FileReader(sDataFile);    BufferedReader bfIn=new BufferedReader(frIn);    String sLine;    if (hasHeader)     sLine=bfIn.readLine();    while ((sLine=bfIn.readLine()) != null) {      String[] saArrayData=sLine.split("\t");      if (saArrayData.length < Math.max(iThemeFieldIndex,Math.max(iSysIDFieldIndex,iValFieldIndex))) {        System.err.println("Line '" + sLine + "' is malformed. Ignoring...");        continue;      }      String sTheme=(iThemeFieldIndex >= 0) ? saArrayData[iThemeFieldIndex] : "";      String sSysID=saArrayData[iSysIDFieldIndex];      try {        dVal=Double.valueOf(saArrayData[iValFieldIndex]);      } catch (      Exception nfe) {        System.err.println("Could not translate " + sLine + "("+ iValFieldIndex+ ") to double:"+ nfe.getMessage());        nfe.printStackTrace(System.err);        continue;      }      if (!tmTheme.containsKey(sTheme)) {        hmSystem=new TreeMap();        tmTheme.put(sTheme,hmSystem);      } else {        hmSystem=(TreeMap)tmTheme.get(sTheme);      }      Distribution dDist;      if (!hmSystem.containsKey(sSysID)) {        dDist=new Distribution();        hmSystem.put(sSysID,dDist);      } else {        dDist=(Distribution)hmSystem.get(sSysID);      }      if (sCategory != null)       dDist.setValue(sCategory,dVal); else       dDist.setValue(dDist.asTreeMap().size(),dVal);    }  } catch (  IOException ioe) {    System.err.println("IO Problem:" + ioe.getMessage());    ioe.printStackTrace(System.err);    return null;  }  return tmTheme;}  }
class C{  protected boolean hasDropExportStart(Drop drop){  return drop.getDropExporterConfig() != null;}  }
class C{  public BinaryHttpResponseHandler(){  super();}  }
class C{  public Text(String string){  set(string);}  }
class C{  public ExpressionEditor(FunctionTableModel tableModel){  this.tableModel=tableModel;  if (expressionPanel == null) {    expressionPanel=ExpressionPanelFactory.getExpressionPanel("v2");  }}  }
class C{  public LoadObject(int state){  this.state=state;}  }
class C{  public static boolean login(String email,String password){  PersistenceManager pm=pmf.getPersistenceManager();  try {    UserRecord user=findUserByEmail(pm,email);    return user != null && !Strings.isNullOrEmpty(password) && password.equals(user.getPassword());  }  finally {    pm.close();  }}  }
class C{  public List<String> tokenize(String inputFileName,PrintWriter writer){  JavaRDD<String> input=readTextFile(inputFileName);  JavaRDD<String> output=tokenize(input);  List<String> lines=output.collect();  for (  String line : lines) {    writer.write(line);    writer.write('\n');  }  writer.flush();  return lines;}  }
class C{  private String readLogFile(){  String[] logFileName=Log_OC.getLogFileNames();  StringBuilder text=new StringBuilder();  BufferedReader br=null;  try {    String line;    for (int i=logFileName.length - 1; i >= 0; i--) {      File file=new File(mLogPath,logFileName[i]);      if (file.exists()) {        if (new FileReader(file).ready()) {          br=new BufferedReader(new FileReader(file));          while ((line=br.readLine()) != null) {            text.append(line);            text.append('\n');          }        }      }    }  } catch (  IOException e) {    Log_OC.d(TAG,e.getMessage().toString());  } finally {    if (br != null) {      try {        br.close();      } catch (      IOException e) {      }    }  }  return text.toString();}  }
class C{  public VideoSearchQueryWithExtended offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public void atanh(final double[] operand,final int operandOffset,final double[] result,final int resultOffset){  double[] function=new double[1 + order];  final double x=operand[operandOffset];  function[0]=FastMath.atanh(x);  if (order > 0) {    final double[] q=new double[order];    q[0]=1;    final double x2=x * x;    final double f=1.0 / (1 - x2);    double coeff=f;    function[1]=coeff * q[0];    for (int n=2; n <= order; ++n) {      double v=0;      q[n - 1]=n * q[n - 2];      for (int k=n - 1; k >= 0; k-=2) {        v=v * x2 + q[k];        if (k > 2) {          q[k - 2]=(k - 1) * q[k - 1] + (2 * n - k + 1) * q[k - 3];        } else         if (k == 2) {          q[0]=q[1];        }      }      if ((n & 0x1) == 0) {        v*=x;      }      coeff*=f;      function[n]=coeff * v;    }  }  compose(operand,operandOffset,function,result,resultOffset);}  }
class C{  @Override public <T>T read(InputStream inputStream,Class<T> classType) throws IOException {  Reader reader=new InputStreamReader(inputStream);  return gson.fromJson(reader,classType);}  }
class C{  protected final Object clone(){  return this;}  }
class C{  public static int calculateXenStorage(int deliveryControllerCount,int vCenterServerCount){  final int dc=Integer.parseInt(VDICalculator.DEFAULTS.getString("xen.controller.storage.default")) * deliveryControllerCount;  final int vc=Integer.parseInt(VDICalculator.DEFAULTS.getString("xen.vcenter.storage.default")) * vCenterServerCount;  return dc + vc;}  }
class C{  public ContinousQuery(String typeName,String sqlExpression,QueryResultType queryResultType,Object... parameters){  super(typeName,sqlExpression,queryResultType,parameters);}  }
class C{  public static <U,W>AtomicReferenceFieldUpdater<U,W> newUpdater(Class<U> tclass,Class<W> vclass,String fieldName){  if (UnsafeHolder.isAvailable()) {    return new AtomicReferenceFieldUpdaterImpl<U,W>(tclass,vclass,fieldName);  }  return AtomicReferenceFieldUpdater.newUpdater(tclass,vclass,fieldName);}  }
class C{  protected BpmnModel extractBpmnModelFromEvent(ActivitiEvent event){  BpmnModel result=null;  if (result == null && event.getProcessDefinitionId() != null) {    ProcessDefinition processDefinition=ProcessDefinitionUtil.getProcessDefinition(event.getProcessDefinitionId(),true);    if (processDefinition != null) {      result=Context.getProcessEngineConfiguration().getDeploymentManager().resolveProcessDefinition(processDefinition).getBpmnModel();    }  }  return result;}  }
class C{  public void finishZombieTasksWithError(){  List<PollableTask> zombiePollableTasks;  do {    logger.debug("Fetching 5 zombie pollable tasks to clean up");    PageRequest pageable=new PageRequest(0,5);    zombiePollableTasks=pollableTaskRepository.findZombiePollableTasks(pageable);    for (    PollableTask zombiePollableTask : zombiePollableTasks) {      markAsFinishedWithError(zombiePollableTask);    }  } while (!zombiePollableTasks.isEmpty());}  }
class C{  public void addQuery(boolean and,ContentletQuery contentletQuery){  if (and) {    query.append(" " + contentletQuery.getQuery());  } else {    query.insert(0,"(");    query.append(") (");    query.append(contentletQuery.getQuery());    query.append(")");  }}  }
class C{  public MessagesCreateChatQuery(VkApiClient client,UserActor actor,List<Integer> userIds){  super(client,"messages.createChat",Integer.class);  accessToken(actor.getAccessToken());  userIds(userIds);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_INTERVAL_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200369,num0,skillname);}  }
class C{  public Bitmap decodeFileDescriptor(FileDescriptor fd,BitmapFactory.Options options){  if (options.mCancel) {    return null;  }  Thread thread=Thread.currentThread();  if (!canThreadDecoding(thread)) {    Log.d(TAG,"Thread " + thread + " is not allowed to decode.");    return null;  }  setDecodingOptions(thread,options);  Bitmap b=BitmapFactory.decodeFileDescriptor(fd,null,options);  removeDecodingOptions(thread);  return b;}  }
class C{  private SourceCommandTagReport executeCommandOnImplementation(final SourceCommandTagValue sourceCommandTagValue,final ICommandRunner commandRunner,final int sourceRetries,final int sourceTimeout){  SourceCommandTagReport report=null;  for (int i=0; i < sourceRetries + 1; i++) {    SourceCommandExecutor commandExecutor=new SourceCommandExecutor(commandRunner,sourceCommandTagValue);    commandExecutor.start();    try {      commandExecutor.join(sourceTimeout);    } catch (    InterruptedException e) {      LOGGER.error("Thread interrupted while waiting for command execution." + "of command: " + sourceCommandTagValue.getId());    }    report=commandExecutor.getSourceCommandTagReport();    SourceCommandTagReport.Status status=report.getStatus();    if (status.equals(STATUS_OK) || status.equals(STATUS_TEST_OK)) {      break;    } else {      commandExecutor.interrupt();    }  }  if (report == null) {    report=new SourceCommandTagReport(STATUS_NOK_FROM_EQUIPMENTD,"Command could not be executed. Most likely the thread controling " + "the execution was interrupted. See error logs for details.");  }  return report;}  }
class C{  public FST(String fileName,String encoding) throws IOException {  this(fileName,encoding,false);}  }
class C{  public Dictionary(String sName,int iMaxWordSize){  WordDefs=new HashSet();  Name=sName;  MaxWordSize=iMaxWordSize;}  }
class C{  public static Object deserialize(Document document,Delegator delegator) throws SerializeException {  Element rootElement=document.getDocumentElement();  Node curChild=rootElement.getFirstChild();  while (curChild != null && curChild.getNodeType() != Node.ELEMENT_NODE) {    curChild=curChild.getNextSibling();  }  if (curChild == null) {    return null;  }  return deserializeSingle((Element)curChild,delegator);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public XorBitwiseExpr fullCopy(){  XorBitwiseExpr tree=(XorBitwiseExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public void apply(ProgressListener progressListener) throws CanceledException {  resamplingMethod.apply(progressListener);}  }
class C{  public void remoteResourceDeleted(ISVNRemoteResource resource){  for (  ISVNListener listener : repositoryListeners) {    listener.remoteResourceDeleted(resource);  }}  }
class C{  public GroupsSetCallbackSettingsQuery messageAllow(Boolean value){  return unsafeParam("message_allow",value);}  }
class C{  public void addProperty(String property,String value){  add(property,createJsonElement(value));}  }
class C{  public boolean isEmpty(){  boolean parametersEmpty=true;  if (parameters != null)   for (  Set<AccessPathTuple> paramSet : this.parameters)   if (paramSet != null && !paramSet.isEmpty()) {    parametersEmpty=false;    break;  }  return (baseObjects == null || baseObjects.isEmpty()) && parametersEmpty && (returnValues == null || returnValues.isEmpty());}  }
class C{  private static long hash(String string){  long upper=((long)string.hashCode()) << 32;  int len=string.length();  StringBuilder dest=new StringBuilder(len);  for (int index=(len - 1); index >= 0; index--) {    dest.append(string.charAt(index));  }  long lower=((long)dest.toString().hashCode()) - ((long)Integer.MIN_VALUE);  return upper + lower;}  }
class C{  public DefaultHibernateSpaceSynchronizationEndpointConfigurer useMerge(boolean useMerge){  this.useMerge=useMerge;  return this;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"CUSTOMER\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"NAME\" TEXT NOT NULL );");}  }
class C{  private int scrollHorizontallyInternal(int dx){  int childCount=getChildCount();  if (childCount == 0) {    return 0;  }  int itemCount=getItemCount();  View leftView=getChildAt(0);  View rightView=getChildAt(childCount - 1);  for (int i=0; i < getChildCount(); i++) {    View view=getChildAt(i);    if (getDecoratedLeft(leftView) > getDecoratedLeft(view)) {      leftView=view;    }    if (getDecoratedRight(rightView) < getDecoratedRight(view)) {      rightView=view;    }  }  int viewSpan=getDecoratedRight(rightView) > getWidth() ? getDecoratedRight(rightView) : getWidth() - (getDecoratedLeft(leftView) < 0 ? getDecoratedLeft(leftView) : 0);  if (viewSpan < getWidth()) {    return 0;  }  int delta=0;  if (dx < 0) {    int firstViewAdapterPos=getPosition(leftView);    if (firstViewAdapterPos > 0) {      delta=dx;    } else {      int viewLeft=getDecoratedLeft(leftView) - getWidth() / 2 + getDecoratedMeasuredWidth(leftView) / 2;      delta=Math.max(viewLeft,dx);    }  } else   if (dx > 0) {    int lastViewAdapterPos=getPosition(rightView);    if (lastViewAdapterPos < itemCount - 1) {      delta=dx;    } else {      int viewRight=getDecoratedRight(rightView) + getWidth() / 2 - getDecoratedMeasuredWidth(rightView) / 2;      int parentRight=getWidth();      delta=Math.min(viewRight - parentRight,dx);    }  }  return delta;}  }
class C{  public boolean naive(){  return soot.PhaseOptions.getBoolean(options,"naive");}  }
class C{  public WallDeleteQuery postId(Integer value){  return unsafeParam("post_id",value);}  }
class C{  private static void verifyCodewordCount(int[] codewords,int numECCodewords) throws FormatException {  if (codewords.length < 4) {    throw FormatException.getFormatInstance();  }  int numberOfCodewords=codewords[0];  if (numberOfCodewords > codewords.length) {    throw FormatException.getFormatInstance();  }  if (numberOfCodewords == 0) {    if (numECCodewords < codewords.length) {      codewords[0]=codewords.length - numECCodewords;    } else {      throw FormatException.getFormatInstance();    }  }}  }
class C{  public void registerPrerenderRequest(String url){  mUrl=url;  long now=System.currentTimeMillis();  mScore=Math.min(MAX_SCORE,mScore - 1 + ALPHA * (now - mLastPrerenderRequestMs));  mLastPrerenderRequestMs=now;  SharedPreferences.Editor editor=mSharedPreferences.edit();  editor.putLong(LAST_REQUEST + mUid,mLastPrerenderRequestMs);  updateBan(editor);  editor.apply();}  }
class C{  public boolean isLured(){  return encounterKind == EncounterKind.DISK;}  }
class C{  protected boolean retainPresenter(){  return true;}  }
class C{  public boolean prev(){  return seek(MDB_PREV);}  }
class C{  public Builder className(String className){  this.className=className;  return this;}  }
class C{  private S2LatLng(double latRadians,double lngRadians){  this.latRadians=latRadians;  this.lngRadians=lngRadians;}  }
class C{  public TPrimitiveHash(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  void validateWidgetFields(Widget newWidget,UserFilter newFilter,Widget widget,String userName,String projectName){  ContentOptions contentOptions=newWidget.getContentOptions();  if (newFilter == null && null == contentOptions) {    return;  }  Class<?> target=null;  if ((null == contentOptions) || (findByName(contentOptions.getGadgetType()).isPresent() && (findByName(contentOptions.getGadgetType()).get() != ACTIVITY) && (findByName(contentOptions.getGadgetType()).get() != MOST_FAILED_TEST_CASES))) {    if (newFilter == null) {      UserFilter currentFilter=filterRepository.findOneLoadACLAndType(userName,widget.getApplyingFilterId(),projectName);      expect(currentFilter,notNull()).verify(BAD_UPDATE_WIDGET_REQUEST,formattedSupplier("Unable update widget content parameters. Please specify new filter for widget. Current filter with id {} removed.",widget.getApplyingFilterId()));      target=currentFilter.getFilter().getTarget();    } else {      target=newFilter.getFilter().getTarget();    }  }  if (null != contentOptions) {    if (TestItem.class.equals(target)) {      removeLaunchSpecificFields(contentOptions);    }    WidgetUtils.validateWidgetDataType(contentOptions.getType(),BAD_UPDATE_WIDGET_REQUEST);    WidgetUtils.validateGadgetType(contentOptions.getGadgetType(),BAD_UPDATE_WIDGET_REQUEST);    if (findByName(contentOptions.getGadgetType()).get() == ACTIVITY) {      target=Activity.class;    }    if (findByName(contentOptions.getGadgetType()).get() == MOST_FAILED_TEST_CASES) {      target=TestItem.class;    }    CriteriaMap<?> criteriaMap=criteriaMapFactory.getCriteriaMap(target);    if (null != contentOptions.getContentFields()) {      WidgetUtils.validateFields(contentOptions.getContentFields(),criteriaMap,BAD_UPDATE_WIDGET_REQUEST);    }    if (null != contentOptions.getMetadataFields()) {      WidgetUtils.validateFields(contentOptions.getMetadataFields(),criteriaMap,BAD_UPDATE_WIDGET_REQUEST);    }  }}  }
class C{  @Override public int read(char ch[],int offset,int length) throws IOException {  int byteLength=length << 1;  if (byteLength > fBuffer.length) {    byteLength=fBuffer.length;  }  int byteCount=fInputStream.read(fBuffer,0,byteLength);  if (byteCount == -1) {    return -1;  }  if ((byteCount & 1) != 0) {    int b=fInputStream.read();    if (b == -1) {      expectedTwoBytes();    }    fBuffer[byteCount++]=(byte)b;  }  final int charCount=byteCount >> 1;  if (fIsBigEndian) {    processBE(ch,offset,charCount);  } else {    processLE(ch,offset,charCount);  }  return charCount;}  }
class C{  public static void resetGameTime(){  gameTime=0;  startGameTime=false;}  }
class C{  public ShoppingCartItem(ShoppingCartItem item){  this.delegator=item.getDelegator();  try {    this._product=item.getProduct();  } catch (  IllegalStateException e) {    this._product=null;  }  try {    this._parentProduct=item.getParentProduct();  } catch (  IllegalStateException e) {    this._parentProduct=null;  }  this.delegatorName=item.delegatorName;  this.prodCatalogId=item.getProdCatalogId();  this.productId=item.getProductId();  this.supplierProductId=item.getSupplierProductId();  this.parentProductId=item.getParentProductId();  this.externalId=item.getExternalId();  this.itemType=item.getItemType();  this.itemGroup=item.getItemGroup();  this.productCategoryId=item.getProductCategoryId();  this.itemDescription=item.itemDescription;  this.reservStart=item.getReservStart();  this.reservLength=item.getReservLength();  this.reservPersons=item.getReservPersons();  this.accommodationMapId=item.getAccommodationMapId();  this.accommodationSpotId=item.getAccommodationSpotId();  this.quantity=item.getQuantity();  this.setBasePrice(item.getBasePrice());  this.setDisplayPrice(item.getDisplayPrice());  this.setRecurringBasePrice(item.getRecurringBasePrice());  this.setRecurringDisplayPrice(item.getRecurringDisplayPrice());  this.setSpecialPromoPrice(item.getSpecialPromoPrice());  this.reserv2ndPPPerc=item.getReserv2ndPPPerc();  this.reservNthPPPerc=item.getReservNthPPPerc();  this.listPrice=item.getListPrice();  this.setIsModifiedPrice(item.getIsModifiedPrice());  this.selectedAmount=item.getSelectedAmount();  this.requirementId=item.getRequirementId();  this.quoteId=item.getQuoteId();  this.quoteItemSeqId=item.getQuoteItemSeqId();  this.associatedOrderId=item.getAssociatedOrderId();  this.associatedOrderItemSeqId=item.getAssociatedOrderItemSeqId();  this.orderItemAssocTypeId=item.getOrderItemAssocTypeId();  this.setStatusId(item.getStatusId());  if (UtilValidate.isEmpty(item.getOrderItemAttributes())) {    this.orderItemAttributes=FastMap.<String,String>newInstance();    this.orderItemAttributes.putAll(item.getOrderItemAttributes());  }  this.attributes=item.getAttributes() == null ? new HashMap<String,Object>() : new HashMap<String,Object>(item.getAttributes());  this.setOrderItemSeqId(item.getOrderItemSeqId());  this.locale=item.locale;  this.setShipBeforeDate(item.getShipBeforeDate());  this.setShipAfterDate(item.getShipAfterDate());  this.setEstimatedShipDate(item.getEstimatedShipDate());  this.setCancelBackOrderDate(item.getCancelBackOrderDate());  this.contactMechIdsMap=item.getOrderItemContactMechIds() == null ? null : new HashMap<String,String>(item.getOrderItemContactMechIds());  this.orderItemPriceInfos=item.getOrderItemPriceInfos() == null ? null : new LinkedList<GenericValue>(item.getOrderItemPriceInfos());  this.itemAdjustments.addAll(item.getAdjustments());  this.isPromo=item.getIsPromo();  this.promoQuantityUsed=item.promoQuantityUsed;  this.quantityUsedPerPromoCandidate=new HashMap<GenericPK,BigDecimal>(item.quantityUsedPerPromoCandidate);  this.quantityUsedPerPromoFailed=new HashMap<GenericPK,BigDecimal>(item.quantityUsedPerPromoFailed);  this.quantityUsedPerPromoActual=new HashMap<GenericPK,BigDecimal>(item.quantityUsedPerPromoActual);  this.additionalProductFeatureAndAppls=item.getAdditionalProductFeatureAndAppls() == null ? null : new HashMap<String,GenericValue>(item.getAdditionalProductFeatureAndAppls());  if (item.getAlternativeOptionProductIds() != null) {    List<String> tempAlternativeOptionProductIds=FastList.newInstance();    tempAlternativeOptionProductIds.addAll(item.getAlternativeOptionProductIds());    this.setAlternativeOptionProductIds(tempAlternativeOptionProductIds);  }  if (item.configWrapper != null) {    this.configWrapper=new ProductConfigWrapper(item.configWrapper);  }  this.featuresForSupplier.addAll(item.featuresForSupplier);}  }
class C{  public boolean resultToContext(){  return this.resultToContext;}  }
class C{  public void doStart(){  try {    if (space == null) {      initSpace();    }    super.doStart();  } catch (  Exception e) {    Log.warn("Problem initialising session ids",e);    throw new IllegalStateException(e);  }}  }
class C{  public SLDTree(List<RenderSymbolInterface> renderList,SLDTreeTools treeTools){  this.renderList=renderList;  this.treeTools=treeTools;  DataSourceInterface dataSource=DataSourceFactory.getDataSource();  if (dataSource != null) {    dataSource.addListener(this);  }  if (renderList != null) {    for (    RenderSymbolInterface render : renderList) {      if (render instanceof DataSourceUpdatedInterface) {        if (dataSource != null) {          dataSource.addListener(render);        }      }    }  }  createUI();}  }
class C{  public static Intent createFindAndUploadLastCrashIntent(Context context){  Intent intent=new Intent(context,MinidumpUploadService.class);  intent.setAction(ACTION_FIND_LAST);  return intent;}  }
class C{  private void validityCheck(){  if (m_row == -1) {    throw new IllegalStateException("This tuple is no longer valid. " + "It has been deleted from its table");  }}  }
class C{  public static Color updateBrightness(Color color,float factor){  float[] hsb=new float[3];  Color.RGBtoHSB(color.getRed(),color.getGreen(),color.getBlue(),hsb);  return new Color(Color.HSBtoRGB(hsb[0],hsb[1],Math.min(1.0f,hsb[2] * factor)));}  }
class C{  @Nullable ResourceFile loadFile(File file) throws MergingException {  return myResourceSet.loadFile(myResourceDir,file,myILogger);}  }
class C{  public static boolean hasFileAccessPermission(WindowAndroid windowAndroid){  assert windowAndroid != null;  return windowAndroid.hasPermission(permission.WRITE_EXTERNAL_STORAGE);}  }
class C{  public static boolean equals(CharSequence a,CharSequence b){  if (a.length() != b.length()) {    return false;  }  int length=a.length();  for (int i=0; i < length; i++) {    if (a.charAt(i) != b.charAt(i)) {      return false;    }  }  return true;}  }
class C{  public static boolean isPhoneNumber(String str){  return isRegexMatch(str,REGEX_PHONE_NUMBER);}  }
class C{  public Vector(){  this.x=0;  this.y=0;  this.z=0;}  }
class C{  private void finishNode(Node node){  if (node.getNodeType() == Node.ELEMENT_NODE) {    fCurrentElement=node;    fillQName(fElementQName,node);    fSchemaValidator.endElement(fElementQName,null);    fNamespaceContext.popContext();  }}  }
class C{  public EdgeRenderer(){  m_tmpPoints[0]=new Point2D.Float();  m_tmpPoints[1]=new Point2D.Float();  m_ctrlPoints[0]=new Point2D.Float();  m_ctrlPoints[1]=new Point2D.Float();  m_isctPoints[0]=new Point2D.Float();  m_isctPoints[1]=new Point2D.Float();}  }
class C{  private void searchDirectory() throws Exception {  if (modsDirectory.exists()) {    File[] files=modsDirectory.listFiles();    if (files != null) {      for (      File file : files) {        if (file.getName().endsWith(".jar") && !file.isDirectory()) {          Launch.classLoader.addURL(file.toURI().toURL());          JarFile jar=new JarFile(file);          Manifest manifest=jar.getManifest();          if (manifest != null && manifest.getMainAttributes().containsKey(new Attributes.Name("ID"))) {            ManifestModInfo mod=registerMod(file,manifest);            if (mod.getLogo() != null) {              JarEntry e=jar.getJarEntry(mod.getLogo());              if (e == null) {                jar.close();                throw new RuntimeException("Unable to find logo file '" + mod.getLogo() + "' for mod '"+ mod.getName()+ "'");              }              try (InputStream in=jar.getInputStream(e)){                mod.setLogo(IOUtils.toByteArray(in));              }             }            Enumeration<JarEntry> entries=jar.entries();            while (entries.hasMoreElements()) {              JarEntry e=entries.nextElement();              if (e.getName().endsWith(".at")) {                InputStream in=jar.getInputStream(e);                OMLAccessTransformer.loadAccessTransformers(IOUtils.readLines(in));                in.close();              }            }            jar.close();          } else {            log.debug("Found non-mod jar file '%s'. The file will be loaded as a library.",file.getName());          }        } else         if (file.isDirectory()) {          log.warn("Found directory '%s' in the mods folder. The mods folder should *only* contain jar files, not directories or other files.",file.getName());        } else {          log.warn("Found non-jar file in the mods folder. The mods folder should *only* contain jar files. Please move the file.");        }      }    }  } else {    modsDirectory.mkdirs();  }}  }
class C{  public ObjectFactory(){}  }
class C{  public void actionPerformed(ActionEvent ev){}  }
class C{  @RequestMapping(value="/{namespace}/{key}",method=RequestMethod.DELETE,produces="application/json") public void deleteKeyJsonValue(@PathVariable String namespace,@PathVariable String key,HttpServletResponse response) throws WebMessageException {  if (!hasAccess(namespace)) {    throw new WebMessageException(WebMessageUtils.forbidden("The namespace '" + namespace + "' is protected, and you don't have the right authority to access it."));  }  KeyJsonValue keyJsonValue=keyJsonValueService.getKeyJsonValue(namespace,key);  if (keyJsonValue == null) {    throw new WebMessageException(WebMessageUtils.notFound("The key '" + key + "' was not found in the namespace '"+ namespace+ "'."));  }  keyJsonValueService.deleteKeyJsonValue(keyJsonValue);  messageService.sendJson(WebMessageUtils.ok("Key '" + key + "' deleted from namespace '"+ namespace+ "'."),response);}  }
class C{  public void testHighNewApiParent(){  doTestForParentApi("android:Theme.Holo.NoActionBar.Overscan","apiParentTestAfter4");  myFixture.checkResultByFile("res/values-v18/styles.xml","themeEditor/apiParentTestAfter4/stylesApi-v18.xml",true);}  }
class C{  public void createMaterialZoneTemplate(Spatial geometry,int regionId,int worldId,int materialId){  geometry.setName(geometry.getName() + "_" + regionId);  createMaterialZoneTemplate(geometry,worldId,materialId,false);}  }
class C{  public void linearCombination(final double a1,final double[] c1,final int offset1,final double a2,final double[] c2,final int offset2,final double a3,final double[] c3,final int offset3,final double a4,final double[] c4,final int offset4,final double[] result,final int resultOffset){  for (int i=0; i < getSize(); ++i) {    result[resultOffset + i]=MathArrays.linearCombination(a1,c1[offset1 + i],a2,c2[offset2 + i],a3,c3[offset3 + i],a4,c4[offset4 + i]);  }}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  @RequestMapping(method=RequestMethod.POST,value="/api/drops/importXliff") public ImportXliffBody importXliff(@RequestBody ImportXliffBody importXliffBody) throws Exception {  Repository repository=repositoryRepository.findOne(importXliffBody.getRepositoryId());  String normalizedContent=NormalizationUtils.normalize(importXliffBody.getXliffContent());  UpdateTMWithXLIFFResult updateTMWithLocalizedXLIFF;  if (importXliffBody.isTranslationKit()) {    updateTMWithLocalizedXLIFF=tmService.updateTMWithTranslationKitXLIFF(normalizedContent,importXliffBody.getImportStatus());  } else {    updateTMWithLocalizedXLIFF=tmService.updateTMWithXLIFFByMd5(normalizedContent,importXliffBody.getImportStatus(),repository);  }  importXliffBody.setXliffContent(updateTMWithLocalizedXLIFF.getXliffContent());  return importXliffBody;}  }
class C{  private void initResourcesIfNecessary(){  if (centerDrawable == null) {    centerDrawable=getContext().getResources().getDrawable(wheelForeground);  }  if (topShadow == null) {    topShadow=new GradientDrawable(Orientation.TOP_BOTTOM,SHADOWS_COLORS);  }  if (bottomShadow == null) {    bottomShadow=new GradientDrawable(Orientation.BOTTOM_TOP,SHADOWS_COLORS);  }  setBackgroundResource(wheelBackground);}  }
class C{  public void addBitmapToCache(String data,BitmapDrawable value){  if (data == null || value == null) {    return;  }  if (mMemoryCache != null) {    if (RecyclingBitmapDrawable.class.isInstance(value)) {      ((RecyclingBitmapDrawable)value).setIsCached(true);    }    mMemoryCache.put(data,value);  }}  }
class C{  private void processTextUnitDTOsBatch(List<TextUnitDTOWithComments> textUnitDTOsWithComments,List<TextUnitDTO> textUnitDTOsForBatch,List<Long> tmTextUnitVariantIdsForBatch){  Multimap<Long,TMTextUnitVariantComment> textUnitVariantCommentsMap=ArrayListMultimap.create();  List<TMTextUnitVariantComment> textUnitVariantComments=new ArrayList<>();  if (!tmTextUnitVariantIdsForBatch.isEmpty()) {    textUnitVariantComments=tmTextUnitVariantCommentRepository.findByTmTextUnitVariantIdIn(tmTextUnitVariantIdsForBatch);  }  for (  TMTextUnitVariantComment tmTextUnitVariantComment : textUnitVariantComments) {    Long tmTextUnitVariantId=tmTextUnitVariantComment.getTmTextUnitVariant().getId();    textUnitVariantCommentsMap.put(tmTextUnitVariantId,tmTextUnitVariantComment);  }  mergeCommentsIntoTextUnitDTOs(textUnitDTOsWithComments,textUnitDTOsForBatch,textUnitVariantCommentsMap);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"book_table\" ("+ "\"BOOK_ID\" TEXT PRIMARY KEY NOT NULL ,"+ "\"BOOK_NAME\" TEXT,"+ "\"USER_ID\" TEXT);");}  }
class C{  public void add(Predicate p){  if (m_clauses.contains(p)) {    throw new IllegalArgumentException("Duplicate predicate.");  }  m_clauses.add(p);  fireExpressionChange();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bind_END_A_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200928,skilltarget);}  }
class C{  private void checkProperty(String name,Object val) throws JMSException {  if (name == null) {    throw new JMSException("The name of a property must not be null.");  }  if (name.equals("")) {    throw new JMSException("The name of a property must not be an empty String.");  }  char[] chars=name.toCharArray();  if (chars.length == 0) {    throw new JMSException("zero-length name is not a valid " + "property name");  }  if (!Character.isJavaIdentifierStart(chars[0])) {    throw new JMSException("Property name " + name + " is not a valid "+ "property name");  }  for (int i=1; i < chars.length; ++i) {    if (!Character.isJavaIdentifierPart(chars[i])) {      throw new JMSException("Property name" + name + " is not a valid "+ "property name");    }  }  if (name.startsWith("JMSX")) {    boolean found=false;    for (int i=0; i < GSSessionImpl.JMSX_CLIENT_NAMES.length; ++i) {      Object[] types=GSSessionImpl.JMSX_CLIENT_NAMES[i];      if (types[0].equals(name)) {        if (val == null) {          throw new MessageFormatException("Property=" + name + " may not be null");        }        Class type=(Class)types[1];        if (!type.equals(val.getClass())) {          throw new MessageFormatException("Expected type " + type.getName() + " for property"+ name+ ", but got type "+ val.getClass().getName());        }        if (name.equals(GSMessageImpl.JMSX_GROUPSEQ) && ((Integer)val).intValue() <= 0) {          throw new JMSException(GSMessageImpl.JMSX_GROUPSEQ + " must have a value > 0");        }        found=true;        break;      }    }    if (!found) {      throw new JMSException("The property name '" + name + "' is not a valid java identifier."+ "Property names with prefix 'JMSX' are"+ " reserved for provider usage and cannot be set by clients.");    }  }  if (name.startsWith("JMSX")) {    if (name.equals(GSMessageImpl.JMSX_GROUPID)) {      if (!ClassHelper.getPrimitiveName(val.getClass()).equalsIgnoreCase("int")) {      }      return;    }    if (name.equals(GSMessageImpl.JMSX_GROUPSEQ))     return;    throw new JMSException("The property name '" + name + "' is not a valid java identifier."+ "Property names with prefix 'JMSX' are"+ " reserved for provider usage.");  }  if (name.startsWith("JMS_GS")) {    if (name.equals(GSMessageImpl.JMS_GSCONNECTION_KEY_NAME))     return;    if (name.equals(GSMessageImpl.JMS_GSCONVERTER)) {      if (val == null || val instanceof IMessageConverter)       return;      throw new MessageFormatException("The value of property " + name + " should be of type IMessageConverter.");    }    throw new JMSException("The property name '" + name + "' is not a valid java identifier."+ "Property names with prefix 'JMS_GS' are"+ "reserved for JMS Message usage and cannot be set by clients.");  }  if (name.startsWith("JMS"))   throw new JMSException("The property name '" + name + "' is not a valid java identifier."+ "Property names with prefix 'JMS' are"+ " reserved for JMS Message usage and cannot be set by clients.");  if (StringsUtils.isValidJavaIdentifier(name) == false)   throw new JMSException("The property name '" + name + "' is not a valid java identifier.");  if (GSSessionImpl.reservedSelectorIdentifiers.contains(name.toUpperCase()))   throw new JMSException("The property name '" + name + "' is reserved due to message selector syntax.");}  }
class C{  public void generateFeatureWeightsFile(PrintWriter out){  out.println("# This file lists the features and their weights to be used for\n" + "# creating the MARY features file.\n" + "# The same file can also be used to override weights in a run-time system.\n"+ "# Three sections are distinguished: Byte-valued, Short-valued, and\n"+ "# Continuous features.\n"+ "#\n"+ "# Lines starting with '#' are ignored; they can be used for comments\n"+ "# anywhere in the file. Empty lines are also ignored.\n"+ "# Entries must have the following form:\n"+ "# \n"+ "# <weight definition> | <feature definition>\n"+ "# \n"+ "# For byte and short features, <weight definition> is simply the \n"+ "# (float) number representing the weight.\n"+ "# For continuous features, <weight definition> is the\n"+ "# (float) number representing the weight, followed by an optional\n"+ "# weighting function including arguments.\n"+ "#\n"+ "# The <feature definition> is the feature name, which in the case of\n"+ "# byte and short features is followed by the full list of feature values.\n"+ "#\n"+ "# Note that the feature definitions must be identical between this file\n"+ "# and all unit feature files for individual database utterances.\n"+ "# THIS FILE WAS GENERATED AUTOMATICALLY");  out.println();  out.println("ByteValuedFeatureProcessors");  List<String> getValuesOf10=new ArrayList<String>();  getValuesOf10.add("phone");  getValuesOf10.add("ph_vc");  getValuesOf10.add("prev_phone");  getValuesOf10.add("next_phone");  getValuesOf10.add("stressed");  getValuesOf10.add("syl_break");  getValuesOf10.add("prev_syl_break");  getValuesOf10.add("next_is_pause");  getValuesOf10.add("prev_is_pause");  List<String> getValuesOf5=new ArrayList<String>();  getValuesOf5.add("cplace");  getValuesOf5.add("ctype");  getValuesOf5.add("cvox");  getValuesOf5.add("vfront");  getValuesOf5.add("vheight");  getValuesOf5.add("vlng");  getValuesOf5.add("vrnd");  getValuesOf5.add("vc");  for (int i=0; i < numByteFeatures; i++) {    String featureName=getFeatureName(i);    if (getValuesOf10.contains(featureName)) {      out.print("10 | " + featureName);    } else {      boolean found=false;      for (      String match : getValuesOf5) {        if (featureName.matches(".*" + match)) {          out.print("5 | " + featureName);          found=true;          break;        }      }      if (!found) {        out.print("0 | " + featureName);      }    }    for (int v=0, vmax=getNumberOfValues(i); v < vmax; v++) {      String val=getFeatureValueAsString(i,v);      out.print(" " + val);    }    out.print("\n");  }  out.println("ShortValuedFeatureProcessors");  for (int i=numByteFeatures; i < numShortFeatures; i++) {    String featureName=getFeatureName(i);    out.print("0 | " + featureName);    for (int v=0, vmax=getNumberOfValues(i); v < vmax; v++) {      String val=getFeatureValueAsString(i,v);      out.print(" " + val);    }    out.print("\n");  }  out.println("ContinuousFeatureProcessors");  for (int i=numByteFeatures; i < numByteFeatures + numContinuousFeatures; i++) {    String featureName=getFeatureName(i);    out.println("0 linear | " + featureName);  }  out.flush();  out.close();}  }
class C{  public static boolean isSeqTransactionGT(long xtn1,long xtn2){  if (xtn1 != UNKNOWN_FIFO_XTN && xtn2 != UNKNOWN_FIFO_XTN && (xtn1 > xtn2 || (xtn1 < xtn2 && xtn2 - xtn1 > 1000000)))   return true; else   return false;}  }
class C{  public void unsetPermission(String name){  permissions.remove(name.toLowerCase(java.util.Locale.ENGLISH));  permissible.recalculatePermissions();}  }
class C{  public <T>List<T> listScalarItems(SectionKey<T,ScalarSection<T>> key){  List<T> result=Lists.newArrayList();  for (  ScalarSection<T> section : getSections(key)) {    result.add(section.getValue());  }  return result;}  }
class C{  public AggregationSet minValue(String path){  return add(new MinValueAggregator().setPath(path));}  }
class C{  public void addHeader(@LayoutRes int layoutId){  addHeader(layoutId,null);}  }
class C{  private final SortedMap identifyCandidateDelimiters(String sStr,int iNGramSize){  String sSubStr=null;  Integer[] iRes=null;  ArrayList alRes=new ArrayList();  TreeMap tmRes=new TreeMap();  for (int iCnt=0; iCnt <= sStr.length() - iNGramSize; iCnt++) {    if (iCnt + iNGramSize > sStr.length())     continue;    sSubStr=sStr.substring(iCnt,iCnt + iNGramSize);    if (tmRes.containsValue(sSubStr))     continue;    Vertex vStrNode=clLocator.locateVertexInGraph(sgOverallGraph,new VertexImpl(sSubStr));    if (vStrNode == null)     continue;    double dEntropy=getEntropyOfNextChar(sSubStr,false);    tmRes.put(dEntropy,sSubStr);  }  return tmRes;}  }
class C{  public static int apply(Director dir,String cName,File file,ProgressListener progressListener) throws IOException, CanceledException {  BiomData biomData=new BiomData(file.getPath());  biomData.setType(BiomData.AcceptableTypes.Function_table.toString());  biomData.setMatrix_type(BiomData.AcceptableMatrixTypes.dense.toString());  biomData.setMatrix_element_type(BiomData.AcceptableMatrixElementTypes.Int.toString());  biomData.setComment(cName + " classification computed by MEGAN");  ClassificationViewer viewer=(ClassificationViewer)dir.getViewerByClassName(cName);  if (viewer == null)   throw new IOException(cName + " Viewer not open");  java.util.List<String> names=dir.getDocument().getSampleNames();  int numberOfCols=names.size();  LinkedList<Map> colList=new LinkedList<>();  for (  String name : names) {    Map colItem=new StringMap();    colItem.put("id",Basic.getFileNameWithoutPath(Basic.getFileBaseName(name)));    colItem.put("metadata",new StringMap());    colList.add(colItem);  }  biomData.setColumns(colList.toArray(new Map[colList.size()]));  final NodeSet selectedNodes=viewer.getSelectedNodes();  if (selectedNodes.size() == 0) {    throw new IOException("No nodes selected");  }  progressListener.setSubtask("Processing " + cName + " nodes");  progressListener.setMaximum(selectedNodes.size());  progressListener.setProgress(0);  final LinkedList<Map> rowList=new LinkedList<>();  final LinkedList<int[]> dataList=new LinkedList<>();  visitSelectedLeavesRec(viewer,viewer.getTree().getRoot(),selectedNodes,new Vector<String>(),rowList,dataList,progressListener);  int numberOfRows=rowList.size();  biomData.setRows(rowList.toArray(new Map[numberOfRows]));  biomData.setShape(new int[]{numberOfRows,numberOfCols});  int[][] data=new int[numberOfRows][];  int j=0;  for (  int[] dataRow : dataList) {    data[j++]=dataRow;  }  biomData.setData(data);  System.err.println("Writing file: " + file);  try (BufferedWriter w=new BufferedWriter(new FileWriter(file))){    biomData.write(w);  }   return numberOfRows;}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public static Object executeScript(CompiledScript script,String functionName,ScriptContext scriptContext,Object[] args) throws ScriptException, NoSuchMethodException {  Assert.notNull("script",script,"scriptContext",scriptContext);  Object result=script.eval(scriptContext);  if (UtilValidate.isNotEmpty(functionName)) {    if (Debug.verboseOn()) {      Debug.logVerbose("Invoking function/method " + functionName,module);    }    ScriptEngine engine=script.getEngine();    try {      Invocable invocableEngine=(Invocable)engine;      result=invocableEngine.invokeFunction(functionName,args == null ? EMPTY_ARGS : args);    } catch (    ClassCastException e) {      throw new ScriptException("Script engine " + engine.getClass().getName() + " does not support function/method invocations");    }  }  return result;}  }
class C{  public void addException(Access node){  List<Access> list=(parent == null || state == null) ? getExceptionListNoTransform() : getExceptionList();  list.addChild(node);}  }
class C{  public String nextTo(char delimiter) throws JSONException {  StringBuilder sb=new StringBuilder();  for (; ; ) {    char c=this.next();    if (c == delimiter || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  private int measureHeight(){  int dayOfWeek=calendar.get(Calendar.DAY_OF_WEEK);  int daysOfMonth=daysOfCurrentMonth();  int n=-1;  if (dayOfWeek >= 2 && dayOfWeek <= 7) {    n=daysOfMonth - (8 - dayOfWeek + 1);  } else   if (dayOfWeek == 1) {    n=daysOfMonth - 1;  }  int lines=2 + n / 7 + (n % 7 == 0 ? 0 : 1);  return (int)(cellHeight * lines);}  }
class C{  public void handleRequest(RequestPacket requestPacket,ChannelEntry channelEntry){  channelEntry.setOwnerRemoteObjID(requestPacket.getObjectId());  IResponseContext respContext=null;  String monitoringId=extractMonitoringId(requestPacket);  if (requestPacket.isCallBack) {    LRMIInvocationTrace trace=_contextLogger.isLoggable(Level.FINE) ? LRMIInvocationContext.getCurrentContext().getTrace() : null;    respContext=new PivotResponseContext(this,channelEntry,_defaultResponseHandler,LRMIInvocationContext.getCurrentContext().getSourceLogicalVersion(),requestPacket.operationPriority,monitoringId,trace);    ResponseContext.setExistingResponseContext(respContext);  }  ReplyPacket replyPacket=consumeAndHandleRequest(requestPacket,respContext,channelEntry);  ResponseContext.clearResponseContext();  if (replyPacket == null) {    if (isMonitorActivity())     channelEntry.monitorActivity(monitoringId);    return;  }  boolean reuseBuffer=requestPacket.getRequestObject() == null;  sendResponse(channelEntry,replyPacket,respContext,reuseBuffer,monitoringId);}  }
class C{  public String nextString(){  nextClean('"');  StringBuilder sb=new StringBuilder();  for (; ; ) {    char c=next();switch (c) {case 0:case '\n':case '\r':      throw syntaxError("Unterminated string");case '\\':    c=next();switch (c) {case 'b':    sb.append('\b');  break;case 't':sb.append('\t');break;case 'n':sb.append('\n');break;case 'f':sb.append('\f');break;case 'r':sb.append('\r');break;case 'u':sb.append((char)Integer.parseInt(next(4),16));break;default :sb.append(c);}break;case '"':return sb.toString();default :if (c < ' ') {throw syntaxError("Unescaped control character (ascii " + ((int)c) + ") in string");}sb.append(c);break;}}}  }
class C{  public TLongHash(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);  this._hashingStrategy=this;}  }
class C{  @Nullable protected Match pickBestMatch(List<Match> matches){  int alternatives=matches.size();  if (alternatives == 0) {    return null;  } else   if (alternatives == 1) {    return matches.get(0);  } else {    assert alternatives > 1;    Collections.sort(matches,new MatchComparator());    return matches.get(0);  }}  }
class C{  public static boolean isAccountClass(GenericValue glAccount,String glAccountClassId) throws GenericEntityException {  if (glAccount == null) {    return false;  }  GenericValue glAccountClass=glAccount.getRelatedOne("GlAccountClass",true);  if (glAccountClass == null) {    throw new GenericEntityException("Cannot find GlAccountClass for glAccountId " + glAccount.getString("glAccountId"));  }  return isAccountClassClass(glAccountClass,glAccountClassId);}  }
class C{  public EntityItemBuoy(EntityItem orig){  super(orig.worldObj,orig.posX,orig.posY,orig.posZ,orig.getEntityItem());  NBTTagCompound originalData=new NBTTagCompound();  orig.writeEntityToNBT(originalData);  this.readEntityFromNBT(originalData);  String thrower=orig.getThrower();  Entity entity=thrower == null ? null : orig.worldObj.getPlayerEntityByName(thrower);  double tossSpeed=entity != null && entity.isSprinting() ? 2D : 1D;  this.motionX=orig.motionX * tossSpeed;  this.motionY=orig.motionY * tossSpeed;  this.motionZ=orig.motionZ * tossSpeed;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_STIGMA_ENCHANT_FAIL(DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1402931,descriptionId);}  }
class C{  public EmailBuilder withAttachments(List<EmailAttachment> attachments){  this.attachments.addAll(attachments);  return this;}  }
class C{  private void writeKanjiResourceFile(File file) throws IOException {  FileOutputStream output=null;  KanjiEscapeOutputStream kanji=null;  OutputStreamWriter writer=null;  BufferedWriter w=null;  try {    output=new FileOutputStream(file);    kanji=new KanjiEscapeOutputStream(output);    writer=new OutputStreamWriter(kanji);    w=new BufferedWriter(writer);    w.write(_sb.toString());  }  finally {    Util.close(w);    Util.close(writer);    Util.close(kanji);    Util.close(output);  }}  }
class C{  @Override public void doStop() throws Exception {synchronized (executorMonitor) {    if (scavengerFuture != null) {      scavengerFuture.cancel(true);      if (--totalNumberOfScavangers == 0) {        if (Log.getLog().isDebugEnabled())         Log.getLog().debug("Stopping scavenger");        executorService.shutdown();      }    }  }  gigaSpace=null;  if (urlSpaceConfigurer != null) {    urlSpaceConfigurer.destroy();  }  super.doStop();}  }
class C{  protected SiteSettingsCategory(String category,String androidPermission,int contentSettingsType){  mCategory=category;  mAndroidPermission=androidPermission;  mContentSettingsType=contentSettingsType;}  }
class C{  public void reload(){  this.kek=null;  this.mwk=null;  this.mwkIndex=null;}  }
class C{  protected MarketGetAlbumByIdQuery albumIds(List<Integer> value){  return unsafeParam("album_ids",value);}  }
class C{  public UsersSearchQuery ageFrom(Integer value){  return unsafeParam("age_from",value);}  }
class C{  public static Map<String,Object> packBulk(DispatchContext dctx,Map<String,? extends Object> context){  PackingSession session=(PackingSession)context.get("packingSession");  String orderId=(String)context.get("orderId");  String shipGroupSeqId=(String)context.get("shipGroupSeqId");  Boolean updateQuantity=(Boolean)context.get("updateQuantity");  Locale locale=(Locale)context.get("locale");  if (updateQuantity == null) {    updateQuantity=Boolean.FALSE;  }  String instructions=(String)context.get("handlingInstructions");  session.setHandlingInstructions(instructions);  String pickerPartyId=(String)context.get("pickerPartyId");  session.setPickerPartyId(pickerPartyId);  String orderItemSeqId=null;  String prdStr=null;  String pkgStr=null;  String qtyStr=null;  String wgtStr=null;  String numPackagesStr=null;  if (UtilValidate.isNotEmpty(context.get("ite"))) {    orderItemSeqId=(String)context.get("ite");  }  if (UtilValidate.isNotEmpty(context.get("prd"))) {    prdStr=(String)context.get("prd");  }  if (UtilValidate.isNotEmpty(context.get("qty"))) {    qtyStr=(String)context.get("qty");  }  if (UtilValidate.isNotEmpty(context.get("pkg"))) {    pkgStr=(String)context.get("pkg");  }  if (UtilValidate.isNotEmpty(context.get("wgt"))) {    wgtStr=(String)context.get("wgt");  }  if (UtilValidate.isNotEmpty(context.get("numPackages"))) {    numPackagesStr=(String)context.get("numPackages");  }  Debug.log("Item: " + orderItemSeqId + " / Product: "+ prdStr+ " / Quantity: "+ qtyStr+ " /  Package: "+ pkgStr+ " / Weight: "+ wgtStr,module);  String[] quantities;  String[] packages;  String[] weights;  if (pkgStr.indexOf(",") != -1) {    packages=pkgStr.split(",");  } else {    packages=new String[]{pkgStr};  }  if (packages == null || packages.length == 0) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPackBulkNoPackagesDefined",locale));  }  if (qtyStr == null) {    quantities=new String[packages.length];    for (int p=0; p < packages.length; p++) {      quantities[p]=qtyStr;    }    if (quantities.length != packages.length) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPackBulkPackagesAndQuantitiesDoNotMatch",locale));    }  } else {    quantities=new String[]{qtyStr};  }  if (UtilValidate.isEmpty(wgtStr))   wgtStr="0";  weights=new String[]{wgtStr};  for (int p=0; p < packages.length; p++) {    BigDecimal quantity;    int packageSeq;    BigDecimal weightSeq;    try {      quantity=new BigDecimal(quantities[p]);      packageSeq=Integer.parseInt(packages[p]);      weightSeq=new BigDecimal(weights[p]);    } catch (    Exception e) {      return ServiceUtil.returnError(e.getMessage());    }    try {      int numPackages=1;      if (numPackagesStr != null) {        try {          numPackages=Integer.parseInt(numPackagesStr);          if (numPackages < 1) {            numPackages=1;          }        } catch (        NumberFormatException nex) {        }      }      for (int numPackage=0; numPackage < numPackages; numPackage++) {        session.addOrIncreaseLine(orderId,orderItemSeqId,shipGroupSeqId,prdStr,quantity,packageSeq + numPackage,weightSeq,updateQuantity.booleanValue());      }    } catch (    GeneralException e) {      Debug.logError(e,module);      return ServiceUtil.returnError(e.getMessage());    }  }  return ServiceUtil.returnSuccess();}  }
class C{  public static JSONArray rowToJSONArray(JSONTokener x) throws JSONException {  JSONArray ja=new JSONArray();  for (; ; ) {    String value=getValue(x);    char c=x.next();    if (value == null || (ja.length() == 0 && value.length() == 0 && c != ',')) {      return null;    }    ja.put(value);    for (; ; ) {      if (c == ',') {        break;      }      if (c != ' ') {        if (c == '\n' || c == '\r' || c == 0) {          return ja;        }        throw x.syntaxError("Bad character '" + c + "' ("+ (int)c+ ").");      }      c=x.next();    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ARTIFACT_CORE_CASTING(DescriptionId race,DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1301034,race,descriptionId);}  }
class C{  public void disableDashedLine(){  mDashPathEffect=null;}  }
class C{  public void renewUntil(Lease lease,long desiredExpiration,long renewDuration,LeaseListener listener){  validateDuration(renewDuration,desiredExpiration == Lease.FOREVER,"desiredExpiration");  addLease(lease,desiredExpiration,renewDuration,listener,SystemTime.timeMillis());}  }
class C{  public void java_security_AccessController_getInheritedAccessControlContext(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getLeastObject());}  }
class C{  static Object send(Object object,String methodName,Object[] parameters,Class<?> objectClass,Class<?>[] parameterTypes) throws SecurityException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {  try {    if (parameters == null) {      parameters=new Object[]{};    }    if (parameterTypes == null) {      parameterTypes=new Class[]{};    }    Method method=objectClass.getDeclaredMethod(methodName,parameterTypes);    method.setAccessible(true);    return method.invoke(object,parameters);  } catch (  NoSuchMethodException e) {    throw new DataSupportException(DataSupportException.noSuchMethodException(objectClass.getSimpleName(),methodName));  }}  }
class C{  private String modifyProjectName(String originalProjectName){  final StringBuffer buffer=new StringBuffer();  if (getProjectNamePrefix() != null) {    buffer.append(getProjectNamePrefix().trim());  }  buffer.append(originalProjectName);  if (getProjectNameSuffix() != null) {    buffer.append(getProjectNameSuffix().trim());  }  return buffer.toString();}  }
class C{  public boolean shouldRecognizeSwipe(MotionEvent e1,MotionEvent e2){  return true;}  }
class C{  public void linearCombination(final double a1,final double[] c1,final int offset1,final double a2,final double[] c2,final int offset2,final double a3,final double[] c3,final int offset3,final double[] result,final int resultOffset){  for (int i=0; i < getSize(); ++i) {    result[resultOffset + i]=MathArrays.linearCombination(a1,c1[offset1 + i],a2,c2[offset2 + i],a3,c3[offset3 + i]);  }}  }
class C{  public static ConfigItem create(Config config){  ConfigItem configItem=new ConfigItem();  configItem.setName(config.getName());  configItem.setValue(config.getValue());  configItem.setMd5(config.getMd5());  return configItem;}  }
class C{  public static boolean propertyValueEqualsIgnoreCase(URL url,String name,String compareString){  String value=getPropertyValue(url,name);  if (value == null)   return false;  return value.trim().equalsIgnoreCase(compareString);}  }
class C{  @Override protected LocalTypeSet newInitialFlow(){  LocalTypeSet ret=(LocalTypeSet)emptySet.clone();  ret.setAllBits();  return ret;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  @Ignore @Test public void testPreheatWithAttributeValues() throws IOException {  defaultSetupWithAttributes();  Map<Class<? extends IdentifiableObject>,List<IdentifiableObject>> metadata=renderService.fromMetadata(new ClassPathResource("preheat/dataset_with_sections.json").getInputStream(),RenderFormat.JSON);  PreheatParams params=new PreheatParams();  params.setPreheatIdentifier(PreheatIdentifier.AUTO);  params.setPreheatMode(PreheatMode.REFERENCE);  params.setObjects(metadata);  preheatService.validate(params);  Preheat preheat=preheatService.preheat(params);  assertEquals(1,preheat.getUniqueAttributeValues().get(DataElement.class).size());  List<String> keys=new ArrayList<>(preheat.getUniqueAttributeValues().get(DataElement.class).keySet());  assertEquals(3,preheat.getUniqueAttributeValues().get(DataElement.class).get(keys.get(0)).size());  assertFalse(preheat.getMandatoryAttributes().isEmpty());  assertEquals(1,preheat.getMandatoryAttributes().get(DataElement.class).size());}  }
class C{  protected synchronized void parsePendingCatalogs() throws IOException {  if (!localCatalogFiles.isEmpty()) {    Vector newQueue=new Vector();    Enumeration q=localCatalogFiles.elements();    while (q.hasMoreElements()) {      newQueue.addElement(q.nextElement());    }    for (int curCat=0; curCat < catalogFiles.size(); curCat++) {      String catfile=(String)catalogFiles.elementAt(curCat);      newQueue.addElement(catfile);    }    catalogFiles=newQueue;    localCatalogFiles.clear();  }  if (catalogFiles.isEmpty() && !localDelegate.isEmpty()) {    Enumeration e=localDelegate.elements();    while (e.hasMoreElements()) {      catalogEntries.addElement(e.nextElement());    }    localDelegate.clear();  }  while (!catalogFiles.isEmpty()) {    String catfile=(String)catalogFiles.elementAt(0);    try {      catalogFiles.remove(0);    } catch (    ArrayIndexOutOfBoundsException e) {    }    if (catalogEntries.size() == 0 && catalogs.size() == 0) {      try {        parseCatalogFile(catfile);      } catch (      CatalogException ce) {        System.out.println("FIXME: " + ce.toString());      }    } else {      catalogs.addElement(catfile);    }    if (!localCatalogFiles.isEmpty()) {      Vector newQueue=new Vector();      Enumeration q=localCatalogFiles.elements();      while (q.hasMoreElements()) {        newQueue.addElement(q.nextElement());      }      for (int curCat=0; curCat < catalogFiles.size(); curCat++) {        catfile=(String)catalogFiles.elementAt(curCat);        newQueue.addElement(catfile);      }      catalogFiles=newQueue;      localCatalogFiles.clear();    }    if (!localDelegate.isEmpty()) {      Enumeration e=localDelegate.elements();      while (e.hasMoreElements()) {        catalogEntries.addElement(e.nextElement());      }      localDelegate.clear();    }  }  catalogFiles.clear();}  }
class C{  public void applyTo(final double[] in,final double[] out){  final double x=in[0];  final double y=in[1];  final double z=in[2];  final double s=q1 * x + q2 * y + q3 * z;  out[0]=2 * (q0 * (x * q0 - (q2 * z - q3 * y)) + s * q1) - x;  out[1]=2 * (q0 * (y * q0 - (q3 * x - q1 * z)) + s * q2) - y;  out[2]=2 * (q0 * (z * q0 - (q1 * y - q2 * x)) + s * q3) - z;}  }
class C{  private boolean isValidItemIndex(int index){  return viewAdapter != null && viewAdapter.getItemsCount() > 0 && (isCyclic || index >= 0 && index < viewAdapter.getItemsCount());}  }
class C{  private void resetAllStates(){  resetSelectionStates();  mWasLastTapValid=false;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set magnifier=");  boolean state=np.getBoolean();  np.matchIgnoreCase(";");  if (getViewer() instanceof ViewerBase) {    ViewerBase viewer=(ViewerBase)getViewer();    viewer.trans.getMagnifier().setInRectilinearMode(true);    viewer.trans.getMagnifier().setActive(state);    viewer.repaint();  }}  }
class C{  public String removeContactMech(String contactMechPurposeTypeId){  return contactMechIdsMap.remove(contactMechPurposeTypeId);}  }
class C{  public void onStop(){  mOnStartPending=false;  if (!mInitializationComplete)   return;  mActivityDelegate.onStopWithNative();}  }
class C{  public static char[] toCharArray(InputStream is,Charset encoding) throws IOException {  CharArrayWriter output=new CharArrayWriter();  copy(is,output,encoding);  return output.toCharArray();}  }
class C{  private void deleteLogFiles(){  try {    for (    String fileName : logDirectory.list())     if (fileName.endsWith(".log")) {synchronized (prepareAnchor(fileName)) {        IoChannel fileChannel=openFiles.remove(fileName);        if (fileChannel != null)         fileChannel.close();        boolean hasDeleted=new File(logDirectory,fileName).delete();        if (!hasDeleted && logger.isLoggable(Level.WARNING))         logger.warning("cannot deleted old log file");      }    }  } catch (  IOException e) {    if (logger.isLoggable(Level.WARNING))     logger.warning("there is something wrong when deleting log files");    e.printStackTrace();  }}  }
class C{  public boolean extended(){  return soot.PhaseOptions.getBoolean(options,"extended");}  }
class C{  public UserDataAccessException(String s){  super(s);}  }
class C{  public NotPositiveException(Localizable specific,Number value){  super(specific,value,INTEGER_ZERO,true);}  }
class C{  public void loadFromFile(String fileName) throws IOException {  System.err.print("Loading " + Basic.getFileNameWithoutPath(fileName) + ": ");  try (BufferedReader r=new BufferedReader(new InputStreamReader(ResourceManager.getFileAsStream(fileName)))){    String aLine;    while ((aLine=r.readLine()) != null) {      if (aLine.length() > 0 && !aLine.startsWith("#")) {        String[] tokens=Basic.split(aLine,'\t');        if (tokens.length >= 2) {          if (tokens[0].trim().length() == 0)           continue;          int id=Integer.parseInt(tokens[0]);          String name=tokens[1];          name2id.put(name,id);          id2name.put(id,name);          boolean hasToolTip=tokens.length > 2 && tokens[tokens.length - 1].startsWith("\"");          int tokensLengthWithoutToolTip=(hasToolTip ? tokens.length - 1 : tokens.length);          Integer rank=null;          if (tokensLengthWithoutToolTip == 3 && Basic.isInteger(tokens[2])) {            rank=Integer.parseInt(tokens[2]);          } else           if (tokensLengthWithoutToolTip == 4) {            rank=Integer.parseInt(tokens[3]);          }          if (hasToolTip) {            String quotedToolTip=tokens[tokens.length - 1];            id2toolTip.put(id,quotedToolTip.substring(1,quotedToolTip.length() - 1));          }          if (rank != null)           id2rank.put(id,rank);        }      }    }  }   System.err.println(String.format("%,9d",id2name.size()));}  }
class C{  private DatagramPacket[] encodeMulticastRequest(final MulticastRequest req) throws IOException {  final Discovery disco=getDiscovery(multicastRequestConstraints.chooseProtocolVersion());  final List packets=new ArrayList();  EncodeIterator ei=disco.encodeMulticastRequest(req,multicastRequestConstraints.getMulticastMaxPacketSize(DEFAULT_MAX_PACKET_SIZE),multicastRequestConstraints.getUnfulfilledConstraints());  while (ei.hasNext()) {    try {      packets.addAll(Arrays.asList(ei.next()));    } catch (    Exception e) {      logger.log((e instanceof UnsupportedConstraintException) ? Levels.HANDLED : Level.INFO,"exception encoding multicast request",e);    }  }  if (packets.isEmpty()) {    throw new DiscoveryProtocolException("no encoded requests");  }  return (DatagramPacket[])packets.toArray(new DatagramPacket[packets.size()]);}  }
class C{  public CatchOptions useSmartSelect(boolean smartSelect){  this.smartSelect=smartSelect;  return this;}  }
class C{  public V value(){  return _map._values[_index];}  }
class C{  public static CompositeTrustManager matchAll(X509TrustManager... managers){  return (new CompositeTrustManager(managers,true));}  }
class C{  @RequestMapping(value="/pets/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> deletePet(@PathVariable String id){  log.debug("REST request to delete Pet : {}",id);  petService.delete(id);  return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("pet",id.toString())).build();}  }
class C{  public static BigInteger sizeOfDirectoryAsBigInteger(File directory){  checkDirectory(directory);  final File[] files=directory.listFiles();  if (files == null) {    return BigInteger.ZERO;  }  BigInteger size=BigInteger.ZERO;  for (  final File file : files) {    try {      if (!isSymlink(file)) {        size=size.add(BigInteger.valueOf(sizeOf(file)));      }    } catch (    IOException ioe) {    }  }  return size;}  }
class C{  @Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {  int entryType=-1;  Vector entryArgs=new Vector();  boolean inExtension=inExtensionNamespace();  if (namespaceURI != null && !inExtension && (namespaceName.equals(namespaceURI) || tr9401NamespaceName.equals(namespaceURI))) {    String popURI=(String)baseURIStack.pop();    String baseURI=(String)baseURIStack.peek();    if (!baseURI.equals(popURI)) {      entryType=Catalog.BASE;      entryArgs.add(baseURI);      debug.message(4,"(reset) xml:base",baseURI);      try {        CatalogEntry ce=new CatalogEntry(entryType,entryArgs);        catalog.addEntry(ce);      } catch (      CatalogException cex) {        if (cex.getExceptionType() == CatalogException.INVALID_ENTRY_TYPE) {          debug.message(1,"Invalid catalog entry type",localName);        } else         if (cex.getExceptionType() == CatalogException.INVALID_ENTRY) {          debug.message(1,"Invalid catalog entry (rbase)",localName);        }      }    }  }  if (namespaceURI != null && namespaceName.equals(namespaceURI) && !inExtension) {    if (localName.equals("catalog") || localName.equals("group")) {      String popOverride=(String)overrideStack.pop();      String override=(String)overrideStack.peek();      if (!override.equals(popOverride)) {        entryType=Catalog.OVERRIDE;        entryArgs.add(override);        overrideStack.push(override);        debug.message(4,"(reset) override",override);        try {          CatalogEntry ce=new CatalogEntry(entryType,entryArgs);          catalog.addEntry(ce);        } catch (        CatalogException cex) {          if (cex.getExceptionType() == CatalogException.INVALID_ENTRY_TYPE) {            debug.message(1,"Invalid catalog entry type",localName);          } else           if (cex.getExceptionType() == CatalogException.INVALID_ENTRY) {            debug.message(1,"Invalid catalog entry (roverride)",localName);          }        }      }    }  }  namespaceStack.pop();  return;}  }
class C{  public ObjectFactory(){}  }
class C{  public int size(){  throw new RuntimeException("IntegerNumberer does not implement the size() method.");}  }
class C{  public boolean throwsException(SootClass e){  return exceptions != null && exceptions.contains(e);}  }
class C{  private static int writeAsTreeRec(ViewerBase viewer,NodeSet toUse,Node v,Writer writer,boolean showInternalLabels,boolean showUnassignedNodes,boolean simplify,int count) throws IOException {  if (v.getOutDegree() == 0) {    writer.write(Basic.toCleanName(viewer.getLabel(v)));    count++;  } else {    LinkedList<Edge> toVisit=new LinkedList<>();    for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {      Node w=e.getTarget();      if ((toUse != null && toUse.contains(w)) || (toUse == null && (showUnassignedNodes || !(w.getInfo() instanceof Integer && (Integer)w.getInfo() <= 0)))) {        toVisit.add(e);      }    }    if (!simplify || toVisit.size() > 1)     writer.write("(");    boolean first=true;    for (    Edge e : toVisit) {      Node w=e.getTarget();      if (first)       first=false; else       writer.write(",");      count=writeAsTreeRec(viewer,toUse,w,writer,showInternalLabels,showUnassignedNodes,simplify,count);    }    if (!simplify || toVisit.size() > 1)     writer.write(")");    if (showInternalLabels && viewer.getLabel(v) != null && (!simplify || count != 1)) {      writer.write(Basic.toCleanName(viewer.getLabel(v)));      count++;    }  }  return count;}  }
class C{  @Override public boolean isDerivedFrom(String typeNamespaceArg,String typeNameArg,int derivationMethod){  return false;}  }
class C{  public double illumination(){  return illumination;}  }
class C{  public static boolean hasSelfPermissions(Context context,String... permissions){  for (  String permission : permissions) {    if (permissionExists(permission) && !hasSelfPermission(context,permission)) {      return false;    }  }  return true;}  }
class C{  @Override public void removeListener(DataSourceUpdatedInterface listener){  listenerList.remove(listener);}  }
class C{  public int key(){  return _map._set[_index];}  }
class C{  @Override public boolean hasIntercept(){  return this.hasIntercept;}  }
class C{  public char charAt(int position){  if (s != null && position >= 0 && position < s.length()) {    return s.charAt(position);  }  return 0;}  }
class C{  public String savePhotoInMemoryDevice(Bitmap bitmap,String photoName,boolean autoIncrementNameByDate){  return writePhotoFile(bitmap,photoName,"MAGICAL CAMERA",PNG,autoIncrementNameByDate);}  }
class C{  private void handleIncomingMessage(SerialMessage incomingMessage){  logger.debug(incomingMessage.toString());  try {switch (incomingMessage.getMessageType()) {case Request:      handleIncomingRequestMessage(incomingMessage);    break;case Response:  handleIncomingResponseMessage(incomingMessage);break;default :logger.warn("Unsupported incomingMessageType: {}",incomingMessage.getMessageType());}} catch (ZWaveSerialMessageException e) {logger.error("Error processing incoming message: {}",e.getMessage());}}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof ByteOrderMark)) {    return false;  }  ByteOrderMark bom=(ByteOrderMark)obj;  if (bytes.length != bom.length()) {    return false;  }  for (int i=0; i < bytes.length; i++) {    if (bytes[i] != bom.get(i)) {      return false;    }  }  return true;}  }
class C{  public long nextLong(long n){  if (n <= 0)   throw new IllegalArgumentException("n must be positive");  long offset=0;  while (n >= Integer.MAX_VALUE) {    final int bits=next(2);    final long half=n >>> 1;    final long nextn=((bits & 2) == 0) ? half : n - half;    if ((bits & 1) == 0)     offset+=n - nextn;    n=nextn;  }  return offset + nextInt((int)n);}  }
class C{  public static byte[] toByteArray(InputStream input) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output);  return output.toByteArray();}  }
class C{  public static void print(){  out.flush();}  }
class C{  public void testAddActivityOnNonActivity() throws Exception {  final VirtualFile file=myFixture.copyFileToProject("intentions/DummyActivity2.java","src/com/example/DummyActivity.java");  myFixture.configureFromExistingVirtualFile(file);  final IntentionAction action=AndroidTestUtils.getIntentionAction(myFixture,ADD_ACTIVITY_TO_MANIFEST);  assertNull(action);}  }
class C{  public PhotosSaveOwnerPhotoQuery hash(String value){  return unsafeParam("hash",value);}  }
class C{  private void addSpanWatcher(){  Spannable spannable=getText();  if (spannable.getSpans(0,spannable.length(),getClass()) != null) {    spannable.setSpan(this,0,spannable.length(),Spanned.SPAN_INCLUSIVE_INCLUSIVE);  }}  }
class C{  public FriendsAddListQuery addList(UserActor actor,String name){  return new FriendsAddListQuery(getClient(),actor,name);}  }
class C{  void prepareDisplayTaskFor(ImageAware imageAware,String memoryCacheKey){  cacheKeysForImageAwares.put(imageAware.getId(),memoryCacheKey);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DPHeal_HEAL_A_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201231,skillcaster,skilltarget,skillname);}  }
class C{  public WildcardFileFilter(String wildcard,IOCase caseSensitivity){  if (wildcard == null) {    throw new IllegalArgumentException("The wildcard must not be null");  }  this.wildcards=new String[]{wildcard};  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  private void adjustRight(RectF rect,float right,RectF bounds,int viewWidth,float snapMargin,float aspectRatio,boolean topMoves,boolean bottomMoves){  float newRight=right;  if (newRight > viewWidth) {    newRight=viewWidth + (newRight - viewWidth) / 1.05f;    mTouchOffset.x-=(newRight - viewWidth) / 1.1f;  }  if (newRight > bounds.right) {    mTouchOffset.x-=(newRight - bounds.right) / 2f;  }  if (bounds.right - newRight < snapMargin) {    newRight=bounds.right;  }  if (newRight - rect.left < mMinCropWidth) {    newRight=rect.left + mMinCropWidth;  }  if (newRight - rect.left > mMaxCropWidth) {    newRight=rect.left + mMaxCropWidth;  }  if (bounds.right - newRight < snapMargin) {    newRight=bounds.right;  }  if (aspectRatio > 0) {    float newHeight=(newRight - rect.left) / aspectRatio;    if (newHeight < mMinCropHeight) {      newRight=Math.min(bounds.right,rect.left + mMinCropHeight * aspectRatio);      newHeight=(newRight - rect.left) / aspectRatio;    }    if (newHeight > mMaxCropHeight) {      newRight=Math.min(bounds.right,rect.left + mMaxCropHeight * aspectRatio);      newHeight=(newRight - rect.left) / aspectRatio;    }    if (topMoves && bottomMoves) {      newRight=Math.min(newRight,Math.min(bounds.right,rect.left + bounds.height() * aspectRatio));    } else {      if (topMoves && rect.bottom - newHeight < bounds.top) {        newRight=Math.min(bounds.right,rect.left + (rect.bottom - bounds.top) * aspectRatio);        newHeight=(newRight - rect.left) / aspectRatio;      }      if (bottomMoves && rect.top + newHeight > bounds.bottom) {        newRight=Math.min(newRight,Math.min(bounds.right,rect.left + (bounds.bottom - rect.top) * aspectRatio));      }    }  }  rect.right=newRight;}  }
class C{  public InvalidConfigurationException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public void trimToSize(){  if (_data.length > size()) {    short[] tmp=new short[size()];    toNativeArray(tmp,0,tmp.length);    _data=tmp;  }}  }
class C{  private static boolean isWidgetInsideConstraintLayout(@NotNull ConstraintWidget widget){  ConstraintWidget parent=widget.getParent();  if (parent == null) {    return false;  }  return parent instanceof ConstraintWidgetContainer;}  }
class C{  public SparseIntArray(int initialCapacity){  mKeys=new int[initialCapacity];  mValues=new int[initialCapacity];  mSize=0;}  }
class C{  public boolean isFinal(){  return Modifier.isFinal(this.getModifiers());}  }
class C{  public boolean uniquenessSatisfied(@Nullable Project project,@Nullable Module module,@Nullable SourceProvider provider,@Nullable String packageName,@Nullable String value,@Nullable Set<Object> relatedValues){  return !validateStringType(project,module,provider,packageName,value,relatedValues).contains(Constraint.UNIQUE);}  }
class C{  private Track matchIntervalFeatureTrack(String trackTag) throws InvalidCommandLineException {  LinkedHashMap<String,Track> ifTracks=this.getIntervalFeatureTracks().getTrackSet();  Track tr=null;  if (ifTracks.size() == 0) {    System.err.println("\nWarning interval feature track is empty.");    return tr;  }  if (trackTag.isEmpty() && ifTracks.size() == 1) {    tr=ifTracks.values().iterator().next();  } else   if (trackTag.isEmpty() && ifTracks.size() > 1) {    tr=ifTracks.values().iterator().next();    System.err.println("\nWarning: trackId not given default to first track found: " + tr.getFileTag());  } else {    List<String> x=new ArrayList<String>();    x.add(trackTag);    List<Track> matched=matchTracks(x,true);    if (matched.size() == 0) {      System.err.println("\nWarning '" + trackTag + "' not found in track set:");      System.err.println(ifTracks.keySet() + "\n");      return tr;    } else {      tr=matched.get(0);      if (matched.size() > 1) {        System.err.println("\nWarning '" + trackTag + "' matches: "+ matched+ ". First track is returned.");      }    }  }  return tr;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public static void copyInto(Node src,Node dest) throws DOMException {  Document factory=dest.getOwnerDocument();  boolean domimpl=factory instanceof DocumentImpl;  Node start=src;  Node parent=src;  Node place=src;  while (place != null) {    Node node=null;    int type=place.getNodeType();switch (type) {case Node.CDATA_SECTION_NODE:{        node=factory.createCDATASection(place.getNodeValue());        break;      }case Node.COMMENT_NODE:{      node=factory.createComment(place.getNodeValue());      break;    }case Node.ELEMENT_NODE:{    Element element=factory.createElement(place.getNodeName());    node=element;    NamedNodeMap attrs=place.getAttributes();    int attrCount=attrs.getLength();    for (int i=0; i < attrCount; i++) {      Attr attr=(Attr)attrs.item(i);      String attrName=attr.getNodeName();      String attrValue=attr.getNodeValue();      element.setAttribute(attrName,attrValue);      if (domimpl && !attr.getSpecified()) {        ((AttrImpl)element.getAttributeNode(attrName)).setSpecified(false);      }    }    break;  }case Node.ENTITY_REFERENCE_NODE:{  node=factory.createEntityReference(place.getNodeName());  break;}case Node.PROCESSING_INSTRUCTION_NODE:{node=factory.createProcessingInstruction(place.getNodeName(),place.getNodeValue());break;}case Node.TEXT_NODE:{node=factory.createTextNode(place.getNodeValue());break;}default :{throw new IllegalArgumentException("can't copy node type, " + type + " ("+ place.getNodeName()+ ')');}}dest.appendChild(node);if (place.hasChildNodes()) {parent=place;place=place.getFirstChild();dest=node;} else {place=place.getNextSibling();while (place == null && parent != start) {place=parent.getNextSibling();parent=parent.getParentNode();dest=dest.getParentNode();}}}}  }
class C{  public static SpaceIndex createPropertyIndex(String propertyName,SpaceIndexType indexType){  return createPropertyIndex(propertyName,indexType,false);}  }
class C{  public boolean remove(Predicate p){  if (p == null)   return false;  IfExpression prev=null;  Expression expr=m_head;  while (expr instanceof IfExpression) {    IfExpression ifex=(IfExpression)expr;    Predicate test=(Predicate)ifex.getTestPredicate();    if (p.equals(test)) {      Expression elseex=ifex.getElseExpression();      ifex.setElseExpression(new ObjectLiteral(null));      if (prev != null) {        prev.setElseExpression(elseex);        if (ifex == m_tail)         m_tail=prev;      } else {        m_head=elseex;        if (ifex == m_tail)         m_tail=null;      }      return true;    } else {      prev=ifex;      expr=ifex.getElseExpression();    }  }  return false;}  }
class C{  public MultiFileAudioPlayer(){  this(Utilities.getProperty("com.sun.speech.freetts.AudioPlayer.baseName","freetts"),AudioFileFormat.Type.WAVE);}  }
class C{  public V remove(Object key){  return this.removeInternal(key,true);}  }
class C{  private void showColorSelectDialog(){  new ColorSelectDialog.Builder(getContext()).setColors(ColorPalettes.loadMaterialDesignColors500(getContext(),false)).setTitle(R.string.selectiondialogs_color_dialog_title).setSortColorsByName(true).setOnColorSelectedListener(this).build().show(getFragmentManager(),TAG_SELECT_COLOR_DIALOG);}  }
class C{  public void success(JSONArray message){  sendPluginResult(new PluginResult(PluginResult.Status.OK,message));}  }
class C{  public void onStartMove(){  getOwner().getObserveController().notifyMoveObservers();  notifyAIOnMove();}  }
class C{  public static void isInstanceOf(String argumentName,Object argumentObject,Class<?> targetClass){  notNull(argumentName,argumentObject);  if (!targetClass.isInstance(argumentObject)) {    throw new IllegalArgumentException(argumentName + " is not an instance of " + targetClass.getName());  }}  }
class C{  public boolean isApplicable(){  return ((Director)getDir()).getDocument().getSampleSelection().size() > 0;}  }
class C{  private static void expandFieldArray(Object instance,String fieldName,Object[] extraElements,boolean isHotFix) throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException {synchronized (BundlePathLoader.class) {    Field jlrField=findField(instance,fieldName);    Object[] original=(Object[])jlrField.get(instance);    Object[] combined=(Object[])Array.newInstance(original.getClass().getComponentType(),original.length + extraElements.length);    if (isHotFix) {      System.arraycopy(extraElements,0,combined,0,extraElements.length);      System.arraycopy(original,0,combined,extraElements.length,original.length);    } else {      System.arraycopy(original,0,combined,0,original.length);      System.arraycopy(extraElements,0,combined,original.length,extraElements.length);    }    jlrField.set(instance,combined);  }}  }
class C{  private void parseSwitch(int indent,boolean firstContent,String header,Layout layout,List<Elem> elems){  TokenStream tokens=new TokenStream(header);  Elem selector=parseExpr(tokens);  tokens.checkAtEnd();  ImmutableList.Builder<Case> cases=ImmutableList.builder();  List<Elem> defaultElems=null;  boolean done;  String line=getNextLine();  Matcher matcher=COMMAND_LINE.matcher(line);  String command;  String rest;  if (matcher.find()) {    command=matcher.group(COMMAND_NAME_GROUP);    rest=line.substring(matcher.end());    done=false;  } else {    error("expected '@end', '@case' or '@default' command after 'switch'");    done=true;    command=null;    rest=null;  }  while (!done) {switch (command) {case END_COMMAND:      checkHeaderEmpty(command,rest);    done=true;  break;case DEFAULT_COMMAND:checkHeaderEmpty(command,rest);if (defaultElems != null) {error("duplicate '@default' in @switch");}defaultElems=parseUntil(indent,layout,END_COMMAND);command=lastTerminator;rest=lastTerminatorHeader;done=lastTerminator == null;break;case CASE_COMMAND:tokens=new TokenStream(rest);Elem value=parseExpr(tokens);tokens.checkAtEnd();List<Elem> caseElems=parseUntil(indent,layout,END_COMMAND,CASE_COMMAND,DEFAULT_COMMAND);if (value != null) {cases.add(Case.create(value,caseElems));}command=lastTerminator;rest=lastTerminatorHeader;done=lastTerminator == null;break;default :unexpectedCommandError(command);done=true;break;}}if (selector != null) {elems.add(Block.create(!firstContent,Switch.create(input.location(),selector,cases.build(),defaultElems)));}}  }
class C{  public Dijkstra(Map<Integer,LinkedList<Integer>> edges){  this.edges=edges;  n=edges.size();  distance=new float[n];  previous=new int[n];  distance[n - 1]=0;  previous[n - 1]=0;  for (int i=0; i < n - 1; i++) {    distance[i]=Float.MAX_VALUE;    previous[i]=-1;  }  PriorityQueue<Vertex> queue=new PriorityQueue<Vertex>(n);  queue.add(new Vertex(n - 1,distance[n - 1]));  while (!queue.isEmpty()) {    Vertex v=queue.poll();    LinkedList<Integer> nodes=this.edges.get(v.vertex);    for (    Integer u : nodes) {      float d=length(u,v.vertex) + distance[v.vertex];      if (d < distance[u]) {        distance[u]=d;        previous[u]=v.vertex;        queue.add(new Vertex(u,distance[u]));      }    }  }}  }
class C{  protected void numericalLayout(TupleSet ts){  if (!m_modelSet) {    m_dist[0]=DataLib.min(ts,m_field).getDouble(m_field);    m_dist[1]=DataLib.max(ts,m_field).getDouble(m_field);    double lo=m_dist[0], hi=m_dist[1];    if (m_model == null) {      m_model=new NumberRangeModel(lo,hi,lo,hi);    } else {      ((NumberRangeModel)m_model).setValueRange(lo,hi,lo,hi);    }  } else {    m_dist[0]=((Number)m_model.getLowValue()).doubleValue();    m_dist[1]=((Number)m_model.getHighValue()).doubleValue();  }  Iterator iter=m_vis.items(m_group,m_filter);  while (iter.hasNext()) {    VisualItem item=(VisualItem)iter.next();    double v=item.getDouble(m_field);    double f=MathLib.interp(m_scale,v,m_dist);    set(item,f);  }}  }
class C{  public static void expandReal(String numberString,WordRelation wordRelation,Item tokenItem){  int stringLength=numberString.length();  int position;  if (numberString.charAt(0) == '-') {    wordRelation.addWord(tokenItem,"minus");    expandReal(numberString.substring(1,stringLength),wordRelation,tokenItem);  } else   if (numberString.charAt(0) == '+') {    wordRelation.addWord(tokenItem,"plus");    expandReal(numberString.substring(1,stringLength),wordRelation,tokenItem);  } else   if ((position=numberString.indexOf('e')) != -1 || (position=numberString.indexOf('E')) != -1) {    expandReal(numberString.substring(0,position),wordRelation,tokenItem);    wordRelation.addWord(tokenItem,"e");    expandReal(numberString.substring(position + 1),wordRelation,tokenItem);  } else   if ((position=numberString.indexOf('.')) != -1) {    String beforeDot=numberString.substring(0,position);    if (beforeDot.length() > 0) {      expandReal(beforeDot,wordRelation,tokenItem);    }    wordRelation.addWord(tokenItem,"point");    String afterDot=numberString.substring(position + 1);    if (afterDot.length() > 0) {      expandDigits(afterDot,wordRelation,tokenItem);    }  } else {    expandNumber(numberString,wordRelation,tokenItem);  }}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  if ((slider != null) && (undoRedoObject != null)) {    if (undoRedoObject.getNewValue() instanceof Integer) {      Integer newValue=(Integer)undoRedoObject.getNewValue();      slider.setValue(newValue.intValue());    }  }}  }
class C{  public FriendsGetQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  public static RoutingService.Builder buildRoutingService(SocketAddress address){  return SingleHostRoutingService.newBuilder().address(address);}  }
class C{  public void appendInfo(final String infoMessage){  if (this.infoMessage == null) {    this.infoMessage=infoMessage;  } else {    this.infoMessage+=("\n" + infoMessage);  }}  }
class C{  @Override public Node insertBefore(Node newChild,Node refChild) throws DOMException {  return internalInsertBefore(newChild,refChild,false);}  }
class C{  public static ZooKeeperClientBuilder newBuilder(){  return ZooKeeperClientBuilder.newBuilder().retryPolicy(RetryPolicyUtils.DEFAULT_INFINITE_RETRY_POLICY).connectionTimeoutMs(10000).sessionTimeoutMs(60000).zkAclId(null).statsLogger(NullStatsLogger.INSTANCE);}  }
class C{  public FieldVector3D<T> subtract(final double factor,final Vector3D v){  return new FieldVector3D<T>(x.subtract(factor * v.getX()),y.subtract(factor * v.getY()),z.subtract(factor * v.getZ()));}  }
class C{  public static boolean showCheckbox(Object userObject){  boolean showCheckbox=(userObject instanceof Stroke) || (userObject instanceof Fill);  return showCheckbox;}  }
class C{  static boolean isFieldFull(){  for (int y=0; y < field_size; y++) {    for (int x=0; x < field_size; x++) {      if (field[x][y] == dotEmpty)       return false;    }  }  return true;}  }
class C{  private static float standardDeviation(float[] pos){  float sum=0.f;  float sumSqr=0.f;  int count=0;  for (  float po : pos) {    if (Float.isNaN(po)) {      continue;    }    count++;    sum+=po;    sumSqr+=po * po;  }  return (float)Math.sqrt(sumSqr / count - (sum / count) * (sum / count));}  }
class C{  private static String makeHash(File file) throws IOException {  return String.valueOf(FileUtils.checksumCRC32(file));}  }
class C{  public void destroy(){  if (this.player != null) {    if ((this.state == STATE.MEDIA_RUNNING) || (this.state == STATE.MEDIA_PAUSED)) {      this.player.stop();      this.setState(STATE.MEDIA_STOPPED);    }    this.player.release();    this.player=null;  }  if (this.recorder != null) {    this.stopRecording();    this.recorder.release();    this.recorder=null;  }}  }
class C{  public GroupsGetInvitesQueryWithExtended(VkApiClient client,UserActor actor){  super(client,"groups.getInvites",GetInvitesExtendedResponse.class);  accessToken(actor.getAccessToken());  extended(true);}  }
class C{  public static List<Window> windows(InputStream words,int windowSize){  Tokenizer tokenizer=new DefaultStreamTokenizer(words);  List<String> list=new ArrayList<>();  while (tokenizer.hasMoreTokens())   list.add(tokenizer.nextToken());  return windows(list,windowSize);}  }
class C{  public ObjectFactory(){}  }
class C{  int agglomNodes(ProgressListener progressListener,Stack amalgs,double D[][],NetNode netNodes,int num_nodes) throws CanceledException {  NetNode p, q, Cx, Cy, x, y;  double Qpq, best;  int num_active=num_nodes;  int num_clusters=num_nodes;  int m;  double Dpq;  while (num_active > 3) {    if (num_active == 4 && num_clusters == 2) {      p=netNodes.next;      if (p.next != p.nbr)       q=p.next; else       q=p.next.next;      if (D[p.id][q.id] + D[p.nbr.id][q.nbr.id] < D[p.id][q.nbr.id] + D[p.nbr.id][q.id]) {        agg3way(p,q,q.nbr,amalgs,D,netNodes,num_nodes);        num_nodes+=2;      } else {        agg3way(p,q.nbr,q,amalgs,D,netNodes,num_nodes);        num_nodes+=2;      }      break;    }    for (p=netNodes.next; p != null; p=p.next)     p.Sx=0.0;    for (p=netNodes.next; p != null; p=p.next) {      if (p.nbr == null || p.nbr.id > p.id) {        for (q=p.next; q != null; q=q.next) {          if (q.nbr == null || (q.nbr.id > q.id) && (q.nbr != p)) {            if ((p.nbr == null) && (q.nbr == null))             Dpq=D[p.id][q.id]; else             if ((p.nbr != null) && (q.nbr == null))             Dpq=(D[p.id][q.id] + D[p.nbr.id][q.id]) / 2.0; else             if ((p.nbr == null) && (q.nbr != null))             Dpq=(D[p.id][q.id] + D[p.id][q.nbr.id]) / 2.0; else             Dpq=(D[p.id][q.id] + D[p.id][q.nbr.id] + D[p.nbr.id][q.id]+ D[p.nbr.id][q.nbr.id]) / 4.0;            p.Sx+=Dpq;            if (p.nbr != null)             p.nbr.Sx+=Dpq;            q.Sx+=Dpq;            if (q.nbr != null)             q.nbr.Sx+=Dpq;          }        }        if (progressListener != null)         progressListener.checkForCancel();      }    }    Cx=Cy=null;    best=0;    for (p=netNodes.next; p != null; p=p.next) {      if ((p.nbr != null) && (p.nbr.id < p.id))       continue;      for (q=netNodes.next; q != p; q=q.next) {        if ((q.nbr != null) && (q.nbr.id < q.id))         continue;        if (q.nbr == p)         continue;        if ((p.nbr == null) && (q.nbr == null))         Dpq=D[p.id][q.id]; else         if ((p.nbr != null) && (q.nbr == null))         Dpq=(D[p.id][q.id] + D[p.nbr.id][q.id]) / 2.0; else         if ((p.nbr == null) && (q.nbr != null))         Dpq=(D[p.id][q.id] + D[p.id][q.nbr.id]) / 2.0; else         Dpq=(D[p.id][q.id] + D[p.id][q.nbr.id] + D[p.nbr.id][q.id]+ D[p.nbr.id][q.nbr.id]) / 4.0;        Qpq=((double)num_clusters - 2.0) * Dpq - p.Sx - q.Sx;        if ((Cx == null || (Qpq < best)) && (p.nbr != q)) {          Cx=p;          Cy=q;          best=Qpq;        }      }    }    x=Cx;    y=Cy;    if (Cx.nbr != null || Cy.nbr != null) {      Cx.Rx=ComputeRx(Cx,Cx,Cy,D,netNodes);      if (Cx.nbr != null)       Cx.nbr.Rx=ComputeRx(Cx.nbr,Cx,Cy,D,netNodes);      Cy.Rx=ComputeRx(Cy,Cx,Cy,D,netNodes);      if (Cy.nbr != null)       Cy.nbr.Rx=ComputeRx(Cy.nbr,Cx,Cy,D,netNodes);    }    m=num_clusters;    if (Cx.nbr != null)     m++;    if (Cy.nbr != null)     m++;    best=((double)m - 2.0) * D[Cx.id][Cy.id] - Cx.Rx - Cy.Rx;    if (Cx.nbr != null) {      Qpq=((double)m - 2.0) * D[Cx.nbr.id][Cy.id] - Cx.nbr.Rx - Cy.Rx;      if (Qpq < best) {        x=Cx.nbr;        y=Cy;        best=Qpq;      }    }    if (Cy.nbr != null) {      Qpq=((double)m - 2.0) * D[Cx.id][Cy.nbr.id] - Cx.Rx - Cy.nbr.Rx;      if (Qpq < best) {        x=Cx;        y=Cy.nbr;        best=Qpq;      }    }    if ((Cx.nbr != null) && (Cy.nbr != null)) {      Qpq=((double)m - 2.0) * D[Cx.nbr.id][Cy.nbr.id] - Cx.nbr.Rx - Cy.nbr.Rx;      if (Qpq < best) {        x=Cx.nbr;        y=Cy.nbr;      }    }    if ((null == x.nbr) && (null == y.nbr)) {      agg2way(x,y);      num_clusters--;    } else     if (null == x.nbr) {      agg3way(x,y,y.nbr,amalgs,D,netNodes,num_nodes);      num_nodes+=2;      num_active--;      num_clusters--;    } else     if ((null == y.nbr) || (num_active == 4)) {      agg3way(y,x,x.nbr,amalgs,D,netNodes,num_nodes);      num_nodes+=2;      num_active--;      num_clusters--;    } else {      num_nodes=agg4way(x.nbr,x,y,y.nbr,amalgs,D,netNodes,num_nodes);      num_active-=2;      num_clusters--;    }  }  return num_nodes;}  }
class C{  @Override public final HTMLDocument createHTMLDocument(String title) throws DOMException {  HTMLDocument doc;  if (title == null)   throw new NullPointerException("HTM014 Argument 'title' is null.");  doc=new HTMLDocumentImpl();  doc.setTitle(title);  return doc;}  }
class C{  public MarkerOptions build(){  MarkerOptions options=new MarkerOptions();  options.icon=this.icon;  options.clickable=this.clickable;  options.draggable=this.draggable;  options.keyboard=this.keyboard;  options.title=this.title;  options.alt=this.alt;  options.zIndexOffset=this.zIndexOffset;  options.opacity=this.opacity;  options.riseOnHover=this.riseOnHover;  options.riseOffset=this.riseOffset;  return options;}  }
class C{  public static boolean putString(Context context,String key,String value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putString(key,value);  return editor.commit();}  }
class C{  public ClientKey(final InputStream inputStream,final String password) throws InvalidKeystoreException {  this.password=password;  final KeyStore keystore=getKeyStore(inputStream,password);  final Enumeration<String> aliases=getAliases(keystore);  if (aliases.hasMoreElements()) {    this.alias=aliases.nextElement();    logger.info("Client certificate serial number: " + getCertificateInfo(keystore,alias));  } else {    throw new InvalidKeystoreException("Keystore doesn't contain any keys!");  }  this.keyStore=keystore;  this.clientPasswordCallback=new ClientPasswordCallback(alias,password);}  }
class C{  public CmdLineParameters parseCmdOptions(String[] args) throws ParseException {  CommandLineParser parser=new DefaultParser();  CommandLine line=parser.parse(options,args);  if (line.hasOption(help.getLongOpt())) {    HelpFormatter formatter=new HelpFormatter();    formatter.setWidth(120);    formatter.printHelp("ttml-to-stl",options);    return null;  }  CmdLineParameters result=new CmdLineParameters();  for (  Option option : line.getOptions()) {    if (option.equals(ttmlFile)) {      TtmlInDescriptor ttmlInDescriptor=new TtmlInDescriptor();      try {        ttmlInDescriptor.setFile(option.getValue(0));        ttmlInDescriptor.setOffsetMS(parseTtmlParameter(option,1,"offsetMS"));        ttmlInDescriptor.setStartMS(parseTtmlParameter(option,2,"startMS"));        ttmlInDescriptor.setEndMS(parseTtmlParameter(option,3,"endMS"));      } catch (      IndexOutOfBoundsException e) {      }      if (ttmlInDescriptor.getFile() == null) {        throw new ParseException("--ttml parameter must have at least <file> attribute defined.");      }      result.getTtmlInDescriptors().add(ttmlInDescriptor);    }  }  if (result.getTtmlInDescriptors().size() == 0) {    throw new ParseException("At least one input TTML file must be provided");  }  boolean doOutputTTML=line.hasOption(outputTTML.getLongOpt());  if (doOutputTTML) {    result.setDoOuputTTML(true);    result.setOutputTTMLFile(line.getOptionValue(outputTTML.getLongOpt()));  }  boolean doOutputSTL=line.hasOption(outputSTL.getLongOpt());  if (doOutputSTL) {    result.setDoOutputSTL(true);    result.setOutputSTLFile(line.getOptionValue(outputSTL.getLongOpt()));    if (!line.hasOption(metadataOpt.getLongOpt())) {      throw new ParseException("A metadata.xml must be specified for STL mode");    }    String metadataXml=line.getOptionValue(metadataOpt.getLongOpt());    if (!new File(metadataXml).isFile()) {      throw new ParseException("A metadata.xml must be an existing file.");    }    result.setMetadataXml(metadataXml);  }  return result;}  }
class C{  @Deprecated public static void write(StringBuffer data,Writer output) throws IOException {  if (data != null) {    output.write(data.toString());  }}  }
class C{  public static void main(String[] sArgs){  int[][] iaTest=new int[1][2];  for (int iX=0; iX < iaTest.length; iX++) {    for (int iY=0; iY < iaTest[0].length; iY++) {      iaTest[iX][iY]=iX;      System.out.print(iX);    }    System.out.println();  }  ArrayGraph atg=new ArrayGraph();  System.err.println(gr.demokritos.iit.jinsect.utils.graphToDot(atg.getGraphForArray(iaTest,2,100000).getGraphLevel(0),true));}  }
class C{  public Object clone(){  System.err.println(this.getClass().getName() + ": The clone() method should be checked...");  DocumentNGramDistroGraph gRes=new DocumentNGramDistroGraph(MinSize,MaxSize,CorrelationWindow);  gRes.DataString=DataString;  gRes.DegradedEdges.putAll(this.DegradedEdges);  gRes.NGramGraphArray=this.NGramGraphArray.clone();  gRes.Normalizer=this.Normalizer;  gRes.TextPreprocessor=this.TextPreprocessor;  gRes.WordEvaluator=this.WordEvaluator;  gRes.EdgeDistros=(HashMap)this.EdgeDistros.clone();  return gRes;}  }
class C{  public NewsfeedSearchQueryWithExtended count(Integer value){  return unsafeParam("count",value);}  }
class C{  protected void handleStartElement(QName element,XMLAttributes attributes,Augmentations augs,boolean isEmpty) throws XNIException {  fNamespaceContext.pushContext();  if (element.prefix == XMLSymbols.PREFIX_XMLNS) {    fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"ElementXMLNSPrefix",new Object[]{element.rawname},XMLErrorReporter.SEVERITY_FATAL_ERROR);  }  int length=attributes.getLength();  for (int i=0; i < length; i++) {    String localpart=attributes.getLocalName(i);    String prefix=attributes.getPrefix(i);    if (prefix == XMLSymbols.PREFIX_XMLNS || prefix == XMLSymbols.EMPTY_STRING && localpart == XMLSymbols.PREFIX_XMLNS) {      String uri=fSymbolTable.addSymbol(attributes.getValue(i));      if (prefix == XMLSymbols.PREFIX_XMLNS && localpart == XMLSymbols.PREFIX_XMLNS) {        fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"CantBindXMLNS",new Object[]{attributes.getQName(i)},XMLErrorReporter.SEVERITY_FATAL_ERROR);      }      if (uri == NamespaceContext.XMLNS_URI) {        fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"CantBindXMLNS",new Object[]{attributes.getQName(i)},XMLErrorReporter.SEVERITY_FATAL_ERROR);      }      if (localpart == XMLSymbols.PREFIX_XML) {        if (uri != NamespaceContext.XML_URI) {          fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"CantBindXML",new Object[]{attributes.getQName(i)},XMLErrorReporter.SEVERITY_FATAL_ERROR);        }      } else {        if (uri == NamespaceContext.XML_URI) {          fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"CantBindXML",new Object[]{attributes.getQName(i)},XMLErrorReporter.SEVERITY_FATAL_ERROR);        }      }      prefix=localpart != XMLSymbols.PREFIX_XMLNS ? localpart : XMLSymbols.EMPTY_STRING;      if (prefixBoundToNullURI(uri,localpart)) {        fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"EmptyPrefixedAttName",new Object[]{attributes.getQName(i)},XMLErrorReporter.SEVERITY_FATAL_ERROR);        continue;      }      fNamespaceContext.declarePrefix(prefix,uri.length() != 0 ? uri : null);    }  }  String prefix=element.prefix != null ? element.prefix : XMLSymbols.EMPTY_STRING;  element.uri=fNamespaceContext.getURI(prefix);  if (element.prefix == null && element.uri != null) {    element.prefix=XMLSymbols.EMPTY_STRING;  }  if (element.prefix != null && element.uri == null) {    fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"ElementPrefixUnbound",new Object[]{element.prefix,element.rawname},XMLErrorReporter.SEVERITY_FATAL_ERROR);  }  for (int i=0; i < length; i++) {    attributes.getName(i,fAttributeQName);    String aprefix=fAttributeQName.prefix != null ? fAttributeQName.prefix : XMLSymbols.EMPTY_STRING;    String arawname=fAttributeQName.rawname;    if (arawname == XMLSymbols.PREFIX_XMLNS) {      fAttributeQName.uri=fNamespaceContext.getURI(XMLSymbols.PREFIX_XMLNS);      attributes.setName(i,fAttributeQName);    } else     if (aprefix != XMLSymbols.EMPTY_STRING) {      fAttributeQName.uri=fNamespaceContext.getURI(aprefix);      if (fAttributeQName.uri == null) {        fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"AttributePrefixUnbound",new Object[]{element.rawname,arawname,aprefix},XMLErrorReporter.SEVERITY_FATAL_ERROR);      }      attributes.setName(i,fAttributeQName);    }  }  int attrCount=attributes.getLength();  for (int i=0; i < attrCount - 1; i++) {    String auri=attributes.getURI(i);    if (auri == null || auri == NamespaceContext.XMLNS_URI) {      continue;    }    String alocalpart=attributes.getLocalName(i);    for (int j=i + 1; j < attrCount; j++) {      String blocalpart=attributes.getLocalName(j);      String buri=attributes.getURI(j);      if (alocalpart == blocalpart && auri == buri) {        fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"AttributeNSNotUnique",new Object[]{element.rawname,alocalpart,auri},XMLErrorReporter.SEVERITY_FATAL_ERROR);      }    }  }  if (fDocumentHandler != null && !fOnlyPassPrefixMappingEvents) {    if (isEmpty) {      fDocumentHandler.emptyElement(element,attributes,augs);    } else {      fDocumentHandler.startElement(element,attributes,augs);    }  }}  }
class C{  @Override public RegressionResults regress(int[] variablesToInclude) throws MathIllegalArgumentException {  if (variablesToInclude.length > this.nvars) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.TOO_MANY_REGRESSORS,variablesToInclude.length,this.nvars);  }  if (this.nobs <= this.nvars) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS,this.nobs,this.nvars);  }  Arrays.sort(variablesToInclude);  int iExclude=0;  for (int i=0; i < variablesToInclude.length; i++) {    if (i >= this.nvars) {      throw new MathIllegalArgumentException(LocalizedCoreFormats.INDEX_LARGER_THAN_MAX,i,this.nvars);    }    if (i > 0 && variablesToInclude[i] == variablesToInclude[i - 1]) {      variablesToInclude[i]=-1;      ++iExclude;    }  }  int[] series;  if (iExclude > 0) {    int j=0;    series=new int[variablesToInclude.length - iExclude];    for (int i=0; i < variablesToInclude.length; i++) {      if (variablesToInclude[i] > -1) {        series[j]=variablesToInclude[i];        ++j;      }    }  } else {    series=variablesToInclude;  }  reorderRegressors(series,0);  tolset();  singcheck();  double[] beta=this.regcf(series.length);  ss();  double[] cov=this.cov(series.length);  int rnk=0;  for (int i=0; i < this.lindep.length; i++) {    if (!this.lindep[i]) {      ++rnk;    }  }  boolean needsReorder=false;  for (int i=0; i < this.nvars; i++) {    if (this.vorder[i] != series[i]) {      needsReorder=true;      break;    }  }  if (!needsReorder) {    return new RegressionResults(beta,new double[][]{cov},true,this.nobs,rnk,this.sumy,this.sumsqy,this.sserr,this.hasIntercept,false);  } else {    double[] betaNew=new double[beta.length];    int[] newIndices=new int[beta.length];    for (int i=0; i < series.length; i++) {      for (int j=0; j < this.vorder.length; j++) {        if (this.vorder[j] == series[i]) {          betaNew[i]=beta[j];          newIndices[i]=j;        }      }    }    double[] covNew=new double[cov.length];    int idx1=0;    int idx2;    int _i;    int _j;    for (int i=0; i < beta.length; i++) {      _i=newIndices[i];      for (int j=0; j <= i; j++, idx1++) {        _j=newIndices[j];        if (_i > _j) {          idx2=_i * (_i + 1) / 2 + _j;        } else {          idx2=_j * (_j + 1) / 2 + _i;        }        covNew[idx1]=cov[idx2];      }    }    return new RegressionResults(betaNew,new double[][]{covNew},true,this.nobs,rnk,this.sumy,this.sumsqy,this.sserr,this.hasIntercept,false);  }}  }
class C{  private Scanner(SymbolTable symbolTable){  fSymbolTable=symbolTable;}  }
class C{  public static boolean calculatePhysicalEvasion(float diff,int upperCap){  diff=diff * 0.6f + 50;  if (diff > upperCap) {    diff=upperCap;  }  return Rnd.nextInt(1000) < diff;}  }
class C{  private void initUIAfterLogin(){  lnLoggedOutState.setVisibility(View.GONE);  lnLoggedInState.setVisibility(View.VISIBLE);  initUserProfileUI();}  }
class C{  public static final short bytesToShort(byte hiByte,byte loByte){  int result=(0x000000FF & hiByte);  result=result << 8;  result|=(0x000000FF & loByte);  return (short)result;}  }
class C{  private boolean equalsDefinedFirstOnObject(Class c){  if (c.equals(Object.class)) {    return true;  }  try {    Method m=c.getMethod("equals",Object.class);    if (m.getDeclaringClass().equals(Object.class)) {      return true;    }    if (Modifier.isPublic(m.getModifiers()) && m.getReturnType().equals(boolean.class)) {      return false;    }  } catch (  NoSuchMethodException e) {  }  return equalsDefinedFirstOnObject(c.getSuperclass());}  }
class C{  public static double ulp(double x){  if (Double.isInfinite(x)) {    return Double.POSITIVE_INFINITY;  }  return abs(x - Double.longBitsToDouble(Double.doubleToRawLongBits(x) ^ 1));}  }
class C{  public static byte[] base64DecodeString(String base64String){  try {    return Base64.decodeBase64(base64String.getBytes("UTF-8"));  } catch (  Exception e) {    throw new RuntimeException("Exception while decoding " + base64String);  }}  }
class C{  public void removeAllBodiesAndJoints(){  this.removeAllBodiesAndJoints(false);}  }
class C{  public static LinkedHashSet<PhysicalTableDefinition> buildHourlyTableDefinitions(TestDimensions testDimensions){  return Utils.asLinkedHashSet(new PhysicalTableDefinition(HOURLY,HOUR.buildZonedTimeGrain(DateTimeZone.UTC),testDimensions.getDimensionConfigurationsByApiName(OTHER)));}  }
class C{  @Override public byte[] asBytes(int rowNumber){  return ByteBuffer.allocate(4).putFloat(get(rowNumber)).array();}  }
class C{  @Provides @Singleton Client provideJerseyClient(JerseyClientConfiguration configuration,Environment environment){  return new JerseyClientBuilder(environment).using(configuration).using(environment).build("emodb");}  }
class C{  private void splitClitics(AnnotatedString input,LanguageResource langRes){  RegExp proclitMatcher=langRes.getProcliticsMatcher();  RegExp enclitMatcher=langRes.getEncliticsMatcher();  String rootClass=langRes.getClassesRoot().getTagName();  int tokenStart=input.getIndex();  int tokenEnd=input.getRunLimit(CLASS_ANNO);  String image=input.substring(tokenStart,tokenEnd);  String tokClass=(String)input.getAnnotation(CLASS_ANNO);  Match proclit=proclitMatcher.starts(image);  while (null != proclit) {    String clitClass=this.identifyClass(proclit.getImage(),proclitMatcher,langRes.getClitDescr());    input.annotate(CLASS_ANNO,clitClass,tokenStart + proclit.getStartIndex(),tokenStart + proclit.getEndIndex());    tokenStart=tokenStart + proclit.getEndIndex();    image=input.substring(tokenStart,tokenEnd);    input.setIndex(tokenStart);    if (image.length() > 0) {      this.annotate(input,CLASS_ANNO,tokClass,tokenStart,tokenEnd,image,langRes);      tokClass=(String)input.getAnnotation(CLASS_ANNO);      if (tokClass != rootClass) {        break;      }      proclit=proclitMatcher.starts(image);    } else {      proclit=null;    }  }  Match enclit=enclitMatcher.ends(image);  while (null != enclit) {    String clitClass=this.identifyClass(enclit.getImage(),enclitMatcher,langRes.getClitDescr());    input.annotate(CLASS_ANNO,clitClass,tokenStart + enclit.getStartIndex(),tokenStart + enclit.getEndIndex());    tokenEnd=tokenStart + enclit.getStartIndex();    image=input.substring(tokenStart,tokenEnd);    if (image.length() > 0) {      this.annotate(input,CLASS_ANNO,tokClass,tokenStart,tokenEnd,image,langRes);      tokClass=(String)input.getAnnotation(CLASS_ANNO);      if (tokClass != rootClass) {        break;      }      enclit=enclitMatcher.ends(image);    } else {      enclit=null;    }  }}  }
class C{  public ViewsAnimator animateWith(@NonNull final Context context,@AnimRes final int animResId){  FunctionUtils.checkParameterIsNotNull("context",context);  return new ViewsAnimator(context,this,animResId);}  }
class C{  protected AdsGetDemographicsQuery idsType(AdsGetDemographicsIdsType value){  return unsafeParam("ids_type",value);}  }
class C{  public static void touch(File file) throws IOException {  if (!file.exists()) {    OutputStream out=openOutputStream(file);    IOUtils.closeQuietly(out);  }  boolean success=file.setLastModified(System.currentTimeMillis());  if (!success) {    throw new IOException("Unable to set the last modification time for " + file);  }}  }
class C{  static private void writeAttributes(Entry[] attributes,ObjectOutput out) throws IOException {  out.writeInt(attributes.length);  for (int i=0; i < attributes.length; i++) {    out.writeObject(new MarshalledObject(attributes[i]));  }}  }
class C{  private void populateFunctionComboBox(){  if (envVarComboBox != null) {    DefaultComboBoxModel<String> model=new DefaultComboBoxModel<String>();    model.addElement("");    for (    String name : envVarMap.keySet()) {      model.addElement(name);    }    envVarComboBox.setModel(model);  }}  }
class C{  public double exactArea(){  S2Point v0=getVertex(0);  S2Point v1=getVertex(1);  S2Point v2=getVertex(2);  S2Point v3=getVertex(3);  return S2.area(v0,v1,v2) + S2.area(v0,v2,v3);}  }
class C{  @SuppressWarnings("unchecked") @Override public Object apply(String source,int lineNo,int columnNo,Object funcBody,Vector namesVec,Vector argsVec) throws BSFException {  throw new BSFException("The apply method is not yet supported for simple-methods");}  }
class C{  public String render(String resourceName,String screenName) throws GeneralException, IOException, SAXException, ParserConfigurationException {  return render(resourceName,screenName,false);}  }
class C{  private List<VersionData> extractVendorOptionData(Document document,String elementName){  List<VersionData> list=new ArrayList<VersionData>();  List<String> nameList=new ArrayList<String>();  nameList.add(VendorOptionManager.getInstance().getDefaultVendorOptionVersion().getLatest().toString());  list.add(VendorOptionManager.getInstance().getDefaultVendorOptionVersion().getLatest());  NodeList nodeList=document.getElementsByTagName(elementName);  for (int index=0; index < nodeList.getLength(); index++) {    String value=nodeList.item(index).getTextContent();    VendorOptionVersion vendorOption=VendorOptionVersion.fromString(value);    VersionData newVersion=vendorOption.getLatest();    if (!nameList.contains(newVersion.toString())) {      list.add(newVersion);      nameList.add(newVersion.toString());    }  }  return list;}  }
class C{  @Override public void onUpdate(Detector.Detections<Barcode> detectionResults,Barcode item){  mOverlay.add(mGraphic);  mGraphic.updateItem(item);}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  private Dfp multiplyFast(final int x){  Dfp result=newInstance(this);  if (nans != FINITE) {    if (isNaN()) {      return this;    }    if (nans == INFINITE && x != 0) {      result=newInstance(this);      return result;    }    if (nans == INFINITE && x == 0) {      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);      result=newInstance(getZero());      result.nans=QNAN;      result=dotrap(DfpField.FLAG_INVALID,MULTIPLY_TRAP,newInstance(getZero()),result);      return result;    }  }  if (x < 0 || x >= RADIX) {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    result=newInstance(getZero());    result.nans=QNAN;    result=dotrap(DfpField.FLAG_INVALID,MULTIPLY_TRAP,result,result);    return result;  }  int rh=0;  for (int i=0; i < mant.length; i++) {    final int r=mant[i] * x + rh;    rh=r / RADIX;    result.mant[i]=r - rh * RADIX;  }  int lostdigit=0;  if (rh != 0) {    lostdigit=result.mant[0];    result.shiftRight();    result.mant[mant.length - 1]=rh;  }  if (result.mant[mant.length - 1] == 0) {    result.exp=0;  }  final int excp=result.round(lostdigit);  if (excp != 0) {    result=dotrap(excp,MULTIPLY_TRAP,result,result);  }  return result;}  }
class C{  private Text createText(Composite parent,int widthHint){  Text textControl=new Text(parent,SWT.SINGLE | SWT.BORDER);  GridData gridData=new GridData();  gridData.horizontalAlignment=GridData.FILL;  gridData.widthHint=widthHint;  gridData.grabExcessHorizontalSpace=true;  textControl.setLayoutData(gridData);  return textControl;}  }
class C{  public static boolean hasFunction(String name){  return s_functionTable.containsKey(name);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public WildcardSuper fullCopy(){  WildcardSuper tree=(WildcardSuper)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static void reformatAndRearrange(@NotNull Project project,@NotNull VirtualFile virtualFile){  ApplicationManager.getApplication().assertWriteAccessAllowed();  PsiDocumentManager psiDocumentManager=PsiDocumentManager.getInstance(project);  Document document=FileDocumentManager.getInstance().getDocument(virtualFile);  if (document == null) {    return;  }  psiDocumentManager.commitDocument(document);  PsiFile psiFile=psiDocumentManager.getPsiFile(document);  if (psiFile != null) {    CodeStyleManager.getInstance(project).reformat(psiFile);    psiDocumentManager.doPostponedOperationsAndUnblockDocument(document);    ServiceManager.getService(project,ArrangementEngine.class).arrange(psiFile,Collections.singleton(psiFile.getTextRange()));  }}  }
class C{  @Override public boolean checkCondition(){  return team.hasMember(leavedPlayer.getObjectId());}  }
class C{  public EntityQuery orderBy(String... fields){  this.orderBy=Arrays.asList(fields);  return this;}  }
class C{  public void abort(){}  }
class C{  public synchronized boolean removeAll(Collection c){  Object[] elements=getArray();  int len=elements.length;  if (len != 0) {    int newlen=0;    Object[] temp=new Object[len];    for (int i=0; i < len; ++i) {      Object element=elements[i];      if (!c.contains(element))       temp[newlen++]=element;    }    if (newlen != len) {      setArray(copyOfRange(temp,0,newlen,Object[].class));      return true;    }  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ONE_INCLUDED(String value0){  return new SM_SYSTEM_MESSAGE(1300632,value0);}  }
class C{  final public void addHeader(String tag,String v){  try {    resp.addHeader(tag,v);  } catch (  Exception e) {  }}  }
class C{  public void show(){  show(false,null);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set aminoAcidColors=");  String value=np.getWordMatchesIgnoringCase(Basic.toString(ColorSchemeAminoAcids.getNames()," "));  np.matchIgnoreCase(";");  AlignmentViewer viewer=(AlignmentViewer)getViewer();  viewer.setAminoAcidColoringScheme(value);  viewer.setShowAminoAcids(viewer.isShowAminoAcids());}  }
class C{  public static int extractOpcodeFromUnit(int opcodeUnit){  int lowByte=opcodeUnit & 0xff;  return ((lowByte == 0) || (lowByte == 0xff)) ? opcodeUnit : lowByte;}  }
class C{  public DatabaseGetFacultiesQuery(VkApiClient client,int universityId){  super(client,"database.getFaculties",GetFacultiesResponse.class);  universityId(universityId);}  }
class C{  @Override public void close() throws IOException {  try {    out.close();  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  private MouseWheelEvent cloneEvent(MouseWheelEvent e){  return new MouseWheelEvent(getParentScrollPane(),e.getID(),e.getWhen(),e.getModifiers(),e.getX(),e.getY(),e.getClickCount(),e.isPopupTrigger(),e.getScrollType(),e.getScrollAmount(),e.getWheelRotation());}  }
class C{  public Color sub(Color color){  this.r-=color.r;  this.g-=color.g;  this.b-=color.b;  this.a-=color.a;  clamp();  return this;}  }
class C{  public static Image stringToImage(String string){  return Toolkit.getDefaultToolkit().createImage(Base64.base64ToByteArray(string));}  }
class C{  public void onNetDisConnect(){}  }
class C{  public BoardCreateCommentQuery attachments(String... value){  return unsafeParam("attachments",value);}  }
class C{  public static String returnError(HttpServletRequest request,HttpServletResponse response){  return "error";}  }
class C{  void findFixed(WXDomObject obj){  WXDomObject rootDom=mRegistry.get(WXDomObject.ROOT);  if (rootDom == null) {    return;  }  if (obj.isFixed()) {    rootDom.add2FixedDomList(obj.ref);  }  int childrenCount=obj.childCount();  if (childrenCount > 0) {    for (int i=0; i < childrenCount; i++) {      findFixed(obj.getChild(i));    }  }}  }
class C{  private Iterator<Record> rowQuery(DeltaPlacement placement,List<Map.Entry<ByteBuffer,Key>> keys,ReadConsistency consistency){  List<ByteBuffer> rowIds=Lists.transform(keys,entryKeyFunction());  final Rows<ByteBuffer,UUID> rows=execute(placement.getKeyspace().prepareQuery(placement.getDeltaColumnFamily(),SorConsistencies.toAstyanax(consistency)).getKeySlice(rowIds).withColumnRange(_maxColumnsRange),"query %d keys from placement %s",rowIds.size(),placement.getName());  _randomReadMeter.mark(rowIds.size());  return decodeRows(keys,rows,_maxColumnsRange.getLimit(),consistency);}  }
class C{  public BookDTO toDTO(Book book,int depth){  if (book == null) {    return null;  }  BookDTO dto=new BookDTO();  dto.id=book.getId();  dto.title=book.getTitle();  dto.summary=book.getSummary();  dto.extractFileName=book.getExtractFileName();  dto.extractContentType=book.getExtractContentType();  dto.extractSize=book.getExtractSize();  dto.publicationDate=book.getPublicationDate();  dto.bestSeller=book.getBestSeller();  dto.price=book.getPrice();  if (depth-- > 0) {    dto.author=authorDTOService.toDTO(book.getAuthor(),depth);  }  return dto;}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_ROOM_LEAVE_NOTIFY(String value0){  return new SM_SYSTEM_MESSAGE(1300859,value0);}  }
class C{  @Override public boolean markSupported(){  return in.markSupported();}  }
class C{  static public String convertUncompressedByteArray2String(int size,byte[] bytes){  StringBuilder buf=new StringBuilder(size);  for (  byte b : bytes)   buf.append((char)b);  return buf.toString();}  }
class C{  public static double[] lsf2lpc(double[] lsf){  MathUtils.quickSort(lsf);  int P=lsf.length;  int half_order=P / 2;  int i, j;  double xf, xx;  double[] a=new double[P / 2 + 1];  double[] a1=new double[P / 2 + 1];  double[] a2=new double[P / 2 + 1];  double[] b=new double[P / 2 + 1];  double[] b1=new double[P / 2 + 1];  double[] b2=new double[P / 2 + 1];  double[] p=new double[P / 2];  double[] q=new double[P / 2];  double[] oneMinusA=new double[P + 1];  oneMinusA[0]=1.;  if ((lsf[0] <= 0.0) || (lsf[0] >= 0.5)) {    throw new IllegalArgumentException("LSFs out of bounds; lsf[0] = " + lsf[0]);  }  for (i=1; i < P; i++) {    if (lsf[i] <= lsf[i - 1])     throw new IllegalArgumentException("nonmonotonic LSFs");    if ((lsf[i] <= 0.0) || (lsf[i] >= 0.5))     throw new IllegalArgumentException("LSFs out of bounds; lsf[" + i + "] = "+ lsf[i]);  }  for (i=0; i < half_order; i++) {    p[i]=-2 * Math.cos(MathUtils.TWOPI * lsf[2 * i]);    q[i]=-2 * Math.cos(MathUtils.TWOPI * lsf[2 * i + 1]);  }  xf=0.0;  for (i=0; i <= P; i++) {    if (i == 0)     xx=1.0; else     xx=0.0;    a[0]=xx + xf;    b[0]=xx - xf;    xf=xx;    for (j=0; j < half_order; j++) {      a[j + 1]=a[j] + p[j] * a1[j] + a2[j];      b[j + 1]=b[j] + q[j] * b1[j] + b2[j];      a2[j]=a1[j];      a1[j]=a[j];      b2[j]=b1[j];      b1[j]=b[j];    }    if (i > 0)     oneMinusA[i]=0.5 * (a[half_order] + b[half_order]);  }  return oneMinusA;}  }
class C{  @TargetApi(VERSION_CODES.GINGERBREAD) public static boolean isExternalStorageRemovable(){  if (Utils.hasGingerbread()) {    return Environment.isExternalStorageRemovable();  }  return true;}  }
class C{  public final boolean canGetString(String field){  return m_table.canGetString(field);}  }
class C{  private void updateDetailData(){  final long start=mLeftPosition;  final long end=mRightPosition;  final long now=mCurrentTime;  final Context context=getContext();  NetworkStatsHistory.Entry originalEntry=mOriginalNetworkStatsHistory.getValues(start,end,now,null);  final long originalTotalBytes=originalEntry.rxBytes;  mOriginalTotalPhrase=Formatter.formatFileSize(context,originalTotalBytes);  NetworkStatsHistory.Entry compressedEntry=mReceivedNetworkStatsHistory.getValues(start,end,now,null);  final long compressedTotalBytes=compressedEntry.rxBytes;  mReceivedTotalPhrase=Formatter.formatFileSize(context,compressedTotalBytes);  float percentage=0.0f;  if (originalTotalBytes > 0L && originalTotalBytes > compressedTotalBytes) {    percentage=(originalTotalBytes - compressedTotalBytes) / (float)originalTotalBytes;  }  mPercentReductionPhrase=String.format("%.0f%%",100.0 * percentage);  mStartDatePhrase=formatDate(context,start);  mEndDatePhrase=formatDate(context,end);}  }
class C{  public static boolean hasAddressChanged(final IEquipmentConfiguration equipmentConfiguration,final IEquipmentConfiguration oldEquipmentConfiguration){  boolean hasChanged;  if (oldEquipmentConfiguration.getAddress() == null) {    if (equipmentConfiguration.getAddress() == null)     hasChanged=false; else     hasChanged=true;  } else {    hasChanged=!oldEquipmentConfiguration.getAddress().equals(equipmentConfiguration.getAddress());  }  return hasChanged;}  }
class C{  public void onResume(){  if (mInitializationComplete) {    mActivityDelegate.onResumeWithNative();  } else {    mOnResumePending=true;  }}  }
class C{  private List<ValueComboBoxDataGroup> populateSymbolList(Class<?> panelDetails){  List<ValueComboBoxDataGroup> combinedSymbolList=new ArrayList<ValueComboBoxDataGroup>();  for (  FieldState panel : symbolTypeFieldList) {    panel.populateSymbolList(panelDetails,combinedSymbolList);  }  return combinedSymbolList;}  }
class C{  public void addColumnModel(ColumnModel columnModel){  columnModels.add(columnModel);}  }
class C{  public void processUtterance(Utterance utterance) throws ProcessException {  LPCResult lpcResult=(LPCResult)utterance.getObject("target_lpcres");  SampleInfo sampleInfo=(SampleInfo)utterance.getObject(SampleInfo.UTT_NAME);  AudioPlayer audioPlayer=utterance.getVoice().getAudioPlayer();  audioPlayer.setAudioFormat(getAudioFormat(sampleInfo));  audioPlayer.setVolume(utterance.getVoice().getVolume());  utterance.getVoice().log("=== " + utterance.getString("input_text"));  if (!lpcResult.playWave(audioPlayer,utterance)) {    throw new ProcessException("Output Cancelled");  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Blind_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200889,skilltarget,skillcaster,skillname);}  }
class C{  public void readConfiguration(InputStream ins) throws IOException {  super.readConfiguration(ins);synchronized (this) {    if (probe == null) {      long interval=getInterval();      if (interval > 0) {        probe=new Probe(interval);        probe.start();      }    }  }}  }
class C{  public static String byteToHexString(byte[] byteArray){  StringBuilder builder=new StringBuilder();  for (int i=0; i < byteArray.length; i++) {    int byteCode=byteArray[i] & 0xFF;    if (byteCode < 0x10) {      builder.append(0);    }    builder.append(Integer.toHexString(byteCode));  }  return builder.toString();}  }
class C{  public static void loadPropsFromResource(String name){  try (InputStream stream=SystemConfiguration.class.getClassLoader().getResourceAsStream(name)){    if (stream != null) {      logger.info("Loading file '" + name + "'");      loadProperties(stream);    } else {      logger.error("No file found '" + name + "'");    }  } catch (  IOException e) {    logger.error("Problem loading file '" + name + "'");    e.printStackTrace();  }}  }
class C{  public ConfigurationException(String s){  super(s);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(getClass().getSimpleName());  sb.append(" [");  sb.append("Hash = ").append(hashCode());  sb.append(", account=").append(account);  sb.append(", password=").append(password);  sb.append(", phone=").append(phone);  sb.append(", sex=").append(sex);  sb.append(", userName=").append(userName);  sb.append(", avatar=").append(avatar);  sb.append(", userType=").append(userType);  sb.append(", deptId=").append(deptId);  sb.append(", locked=").append(locked);  sb.append("]");  return sb.toString();}  }
class C{  public static Item findFromEnd(Relation segmentRelation,float time){  Item item=segmentRelation.getTail();  while (item != null && SegmentRelationUtils.getSegmentEnd(item) > time) {    item=item.getPrevious();  }  if (item != segmentRelation.getTail()) {    item=item.getNext();  }  return item;}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines,boolean append) throws IOException {  writeLines(file,encoding,lines,null,append);}  }
class C{  public DFAContentModel(CMNode syntaxTree,int leafCount,boolean mixed){  fLeafCount=leafCount;  fMixed=mixed;  buildDFA(syntaxTree);}  }
class C{  @Override public synchronized void reset() throws IOException {  in.reset();  pos=mark;}  }
class C{  public void loadAndRun(final String configurationFile) throws SpyException {  loader.loadConfiguration(configurationFile);  loadAndRun(loader.getConfiguration());}  }
class C{  public OpenMapRealVector(int dimension,double epsilon){  virtualSize=dimension;  entries=new OpenIntToDoubleHashMap(0.0);  this.epsilon=epsilon;}  }
class C{  public CommandManagerFX(IDirector dir,IDirectableViewer viewer,String commandsPath,boolean returnOnCommandNotFound){  this(dir,viewer,new String[]{commandsPath},returnOnCommandNotFound);}  }
class C{  public String nextTo(char d) throws JSONException {  StringBuilder sb=new StringBuilder();  for (; ; ) {    char c=next();    if (c == d || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public RealMatrix jacobian(RealVector point){  double[] pointArray=point.toArray();  double[][] jacobian=new double[distances.length][pointArray.length];  for (int i=0; i < jacobian.length; i++) {    for (int j=0; j < pointArray.length; j++) {      jacobian[i][j]=2 * pointArray[j] - 2 * positions[i][j];    }  }  return new Array2DRowRealMatrix(jacobian);}  }
class C{  public Object clone(){  Object retval=super.clone();  return retval;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_ENTER_WITH_HIS_PARTY(String value0){  return new SM_SYSTEM_MESSAGE(1400012,value0);}  }
class C{  public DataSourceDescriptor(X dataSource){  this(dataSource,dataSource != null ? dataSource.toString() : null,null,null,POSITION_AT_THE_END,EXPAND_ON_FIRST_CHILD);}  }
class C{  public static String slurpFile(String filename,String encoding) throws IOException {  Reader r=new InputStreamReader(new FileInputStream(filename),encoding);  return slurpReader(r);}  }
class C{  public int double_set_old(){  String s=soot.PhaseOptions.getString(options,"double-set-old");  if (s.equalsIgnoreCase("hash"))   return double_set_old_hash;  if (s.equalsIgnoreCase("bit"))   return double_set_old_bit;  if (s.equalsIgnoreCase("hybrid"))   return double_set_old_hybrid;  if (s.equalsIgnoreCase("array"))   return double_set_old_array;  if (s.equalsIgnoreCase("heintze"))   return double_set_old_heintze;  throw new RuntimeException("Invalid value " + s + " of phase option double-set-old");}  }
class C{  public static byte[] pairHashcodeToBytes(int pairHashcode){  return new byte[]{(byte)(pairHashcode >> 8),(byte)pairHashcode};}  }
class C{  private void afterFailedBulkExecution(IReplicationInBatchContext context){  if (_operationStatisticsHandler != null) {    MirrorOperationsImpl sourceChannelStatistics=(MirrorOperationsImpl)_operationStatisticsHandler.getSourceChannelStatistics(context.getSourceLookupName());    List<BulkItem> bulk=context.getPendingContext();    sourceChannelStatistics.addFailedOperationCount(bulk);  }}  }
class C{  private void propagateConstantsIntoCallee(SootMethod sm){  Collection<Unit> callSites=icfg.getCallersOf(sm);  if (callSites.isEmpty())   return;  boolean[] isConstant=new boolean[sm.getParameterCount()];  Constant[] values=new Constant[sm.getParameterCount()];  for (int i=0; i < isConstant.length; i++)   isConstant[i]=true;  boolean hasCallSites=false;  for (  Unit callSite : callSites) {    if (excludedMethods != null && excludedMethods.contains(icfg.getMethodOf(callSite)))     continue;    InvokeExpr iiExpr=((Stmt)callSite).getInvokeExpr();    hasCallSites=true;    for (int i=0; i < iiExpr.getArgCount(); i++) {      final Value argVal=iiExpr.getArg(i);      if (argVal instanceof Constant) {        if (values[i] != null && !values[i].equals(argVal))         isConstant[i]=false; else         values[i]=(Constant)argVal;      } else       isConstant[i]=false;    }  }  if (hasCallSites) {    List<Unit> inserted=null;    for (int i=0; i < isConstant.length; i++) {      if (isConstant[i]) {        Local paramLocal=sm.getActiveBody().getParameterLocal(i);        Unit point=getFirstNonIdentityStmt(sm);        Unit assignConst=Jimple.v().newAssignStmt(paramLocal,values[i]);        sm.getActiveBody().getUnits().insertBefore(assignConst,point);        if (inserted == null)         inserted=new ArrayList<Unit>();        inserted.add(assignConst);      }    }    if (inserted != null) {      ConstantPropagatorAndFolder.v().transform(sm.getActiveBody());      for (      Unit u : inserted)       sm.getActiveBody().getUnits().remove(u);    }  }}  }
class C{  public void clearMemoryCache(){  checkConfiguration();  configuration.memoryCache.clear();}  }
class C{  private void replaceUnit(Unit aToReplace1,Unit aToReplace2,Unit aReplacement){  Block block=mUnitToBlockMap.get(aToReplace1);  if (aToReplace2 != null) {    block.insertAfter(aReplacement,aToReplace2);    block.remove(aToReplace2);  } else {    block.insertAfter(aReplacement,aToReplace1);  }  block.remove(aToReplace1);  mUnitToBlockMap.put(aReplacement,block);}  }
class C{  public SubLine(final Segment segment) throws MathIllegalArgumentException {  this(segment.getLine(),buildIntervalSet(segment.getStart(),segment.getEnd(),segment.getLine().getTolerance()));}  }
class C{  public <T>T load(Class<T> service){synchronized (providers) {    List<RegisteredServiceProvider<?>> registered=providers.get(service);    if (registered == null) {      return null;    }    return service.cast(registered.get(0).getProvider());  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  protected List<Unit> collectDefinitionsWithAliases(Local l,LocalDefs localDefs,LocalUses localUses,Body body){  Set<Local> seenLocals=new HashSet<Local>();  Stack<Local> newLocals=new Stack<Local>();  List<Unit> defs=new LinkedList<Unit>();  newLocals.push(l);  while (!newLocals.empty()) {    Local local=newLocals.pop();    Debug.printDbg("[null local] ",local);    if (!seenLocals.add(local))     continue;    for (    Unit u : collectDefinitions(local,localDefs,body)) {      if (u instanceof AssignStmt) {        Value r=((AssignStmt)u).getRightOp();        if (r instanceof Local && !seenLocals.contains((Local)r))         newLocals.push((Local)r);      }      defs.add(u);      List<UnitValueBoxPair> usesOf=(List<UnitValueBoxPair>)localUses.getUsesOf(u);      for (      UnitValueBoxPair pair : usesOf) {        Unit unit=pair.getUnit();        if (unit instanceof AssignStmt) {          Value right=((AssignStmt)unit).getRightOp();          Value left=((AssignStmt)unit).getLeftOp();          if (right == local && left instanceof Local && !seenLocals.contains((Local)left))           newLocals.push((Local)left);        }      }    }  }  return defs;}  }
class C{  public boolean catchableAs(RefType catcher){  if (INSTRUMENTING) {    Manager.v().catchableAsQueries++;  }  FastHierarchy h=Scene.v().getOrMakeFastHierarchy();  if (exceptionsExcluded.size() > 0) {    if (INSTRUMENTING) {      Manager.v().catchableAsFromSearch++;    }    for (    AnySubType exclusion : exceptionsExcluded) {      if (catcher.getSootClass().isPhantom()) {        if (exclusion.getBase().equals(catcher))         return false;      } else       if (h.canStoreType(catcher,exclusion.getBase())) {        return false;      }    }  }  if (exceptionsIncluded.contains(catcher)) {    if (INSTRUMENTING) {      if (exceptionsExcluded.size() == 0) {        Manager.v().catchableAsFromMap++;      } else {        Manager.v().catchableAsFromSearch++;      }    }    return true;  } else {    if (INSTRUMENTING) {      if (exceptionsExcluded.size() == 0) {        Manager.v().catchableAsFromSearch++;      }    }    for (    RefLikeType thrownType : exceptionsIncluded) {      if (thrownType instanceof RefType) {        if (thrownType == catcher) {          throw new IllegalStateException("ThrowableSet.catchableAs(RefType): exceptions.contains() failed to match contained RefType " + catcher);        } else         if (!catcher.getSootClass().isPhantom() && h.canStoreType(thrownType,catcher)) {          return true;        }      } else {        RefType thrownBase=((AnySubType)thrownType).getBase();        if (catcher.getSootClass().isPhantom()) {          if (thrownBase.equals(catcher) || thrownBase.getClassName().equals("java.lang.Throwable"))           return true;        } else         if (h.canStoreType(thrownBase,catcher) || h.canStoreType(catcher,thrownBase)) {          return true;        }      }    }    return false;  }}  }
class C{  public Value simpleCaseExpression(Value caseOperand,Expression[] exp,Value val){  throw new RuntimeException("Unsupported operation.");}  }
class C{  @Override public CloseFuture close(){  return null;}  }
class C{  @TargetApi(23) private boolean cipherInit(){  boolean isKeyGenerated=generateKey();  if (!isKeyGenerated) {    mCallback.onAuthFailed(AuthErrorCodes.NON_RECOVERABLE_ERROR,ERROR_FAILED_TO_GENERATE_KEY);    return false;  }  try {    mCipher=Cipher.getInstance(KeyProperties.KEY_ALGORITHM_AES + "/" + KeyProperties.BLOCK_MODE_CBC+ "/"+ KeyProperties.ENCRYPTION_PADDING_PKCS7);  } catch (  NoSuchAlgorithmException|NoSuchPaddingException e) {    mCallback.onAuthFailed(AuthErrorCodes.NON_RECOVERABLE_ERROR,ERROR_FAILED_TO_GENERATE_KEY);    return false;  }  try {    mKeyStore.load(null);    SecretKey key=(SecretKey)mKeyStore.getKey(KEY_NAME,null);    mCipher.init(Cipher.ENCRYPT_MODE,key);    return true;  } catch (  KeyPermanentlyInvalidatedException e) {    mCallback.onAuthFailed(AuthErrorCodes.NON_RECOVERABLE_ERROR,ERROR_FAILED_TO_INIT_CHIPPER);    return false;  }catch (  KeyStoreException|CertificateException|UnrecoverableKeyException|IOException|NoSuchAlgorithmException|InvalidKeyException e) {    mCallback.onAuthFailed(AuthErrorCodes.NON_RECOVERABLE_ERROR,ERROR_FAILED_TO_INIT_CHIPPER);    return false;  }}  }
class C{  public TIntHashSet(TIntHashingStrategy strategy){  super(strategy);}  }
class C{  private void notifyUIRefreshComplete(boolean ignoreHook){  if (mPtrIndicator.hasLeftStartPosition() && !ignoreHook && mRefreshCompleteHook != null) {    if (DEBUG) {      PtrCLog.d(LOG_TAG,"notifyUIRefreshComplete mRefreshCompleteHook run.");    }    mRefreshCompleteHook.takeOver();    return;  }  if (mPtrUIHandlerHolder.hasHandler()) {    if (DEBUG) {      PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIRefreshComplete");    }    mPtrUIHandlerHolder.onUIRefreshComplete(this);  }  mPtrIndicator.onUIRefreshComplete();  tryScrollBackToTopAfterComplete();  tryToNotifyReset();}  }
class C{  private String parseMetadata(DocumentMetadata metadata) throws IOException {  ResultItem item=result.next();  String uri=item.asString();  if (uri == null) {    throw new IOException("Missing document URI for metadata.");  }  item=result.next();  String nKind=item.asString();  metadata.setFormat(nKind);  item=result.next();  while (item != null && item.getItemType() == ValueType.XS_STRING) {    if (!copyCollection) {      item=result.next();      continue;    }    metadata.addCollection(item.asString());    item=result.next();  }  StringBuilder buf=new StringBuilder();  buf.append("<perms>");  while (item != null && ValueType.ELEMENT == item.getItemType()) {    if (!copyPermission) {      item=result.next();      continue;    }    try {      readPermission((XdmElement)item.getItem(),metadata,buf);    } catch (    Exception e) {      throw new IOException(e);    }    item=result.next();  }  buf.append("</perms>");  metadata.setPermString(buf.toString());  metadata.setQuality((XSInteger)item.getItem());  item=result.next();  if (copyMetadata) {    XdmItem metaItem=item.getItem();    if (metaItem instanceof JsonItem) {      JsonNode node=((JsonItem)metaItem).asJsonNode();      metadata.meta=new HashMap<String,String>(node.size());      for (Iterator<String> names=node.fieldNames(); names.hasNext(); ) {        String key=names.next();        JsonNode nodeVal=node.get(key);        metadata.meta.put(key,nodeVal.asText());      }      item=result.next();    }  }  if (copyProperties && ValueType.ELEMENT == item.getItemType()) {    String pString=item.asString();    if (pString != null) {      metadata.setProperties(pString);    }    item=result.next();  }  if (ValueType.XS_INTEGER != item.getItemType()) {    throw new IOException(uri + " unexpected " + item.getItemType()+ " "+ item.asString()+ ", expected "+ ValueType.XS_INTEGER+ " 0");  }  return uri;}  }
class C{  public ShardParseException(Throwable cause){  super(cause);}  }
class C{  public static String readString(InputStream is,String encoding){  if (is == null)   return null;  BufferedReader reader=null;  try {    StringBuffer buffer=new StringBuffer();    char[] part=new char[2048];    int read=0;    reader=new BufferedReader(new InputStreamReader(is,encoding));    while ((read=reader.read(part)) != -1)     buffer.append(part,0,read);    return buffer.toString();  } catch (  IOException ex) {  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException ex) {      }    }  }  return null;}  }
class C{  public BlockBTreeLeafNode(BTreeBuilderInfo builderInfos,int metadataIndex,long nodeNumber){  DataFileFooter footer=builderInfos.getFooterList().get(metadataIndex);  BlockletMinMaxIndex minMaxIndex=footer.getBlockletIndex().getMinMaxIndex();  maxKeyOfColumns=minMaxIndex.getMaxValues();  minKeyOfColumns=minMaxIndex.getMinValues();  numberOfKeys=1;  this.nodeNumber=nodeNumber;  this.blockInfo=footer.getBlockInfo();}  }
class C{  public static Optional<File> find(File base,final String name){  checkArgument(base.isDirectory(),"'base' must be a directory.");  return Files.fileTreeTraverser().preOrderTraversal(base).filter(Predicates.compose(Predicates.equalTo(name),GET_NAME)).last();}  }
class C{  protected AbstractPolynomialSolver(final double relativeAccuracy,final double absoluteAccuracy){  super(relativeAccuracy,absoluteAccuracy);}  }
class C{  @Override public void close(){  SimulationRunContext.getEventCalendar().clear();  SimulationRunContext.removeEventCalendar();  SimulationRunContext.removeProcessEngine();}  }
class C{  @Deprecated public void onFailure(int statusCode,Header[] headers,Throwable error,String content){  onFailure(statusCode,error,content);}  }
class C{  public void actionPerformed(ActionEvent ev){  final ClusterViewer viewer=getViewer();  final String method=(String)JOptionPane.showInputDialog(getViewer().getFrame(),"Set Ecological Index","Set Ecological Index",JOptionPane.QUESTION_MESSAGE,ProgramProperties.getProgramIcon(),METHODS,viewer.getEcologicalIndex());  if (method != null)   executeImmediately("set index=" + method + ";");}  }
class C{  public final boolean isEmpty(){  return empty;}  }
class C{  private File findSettingsFile(File settingsFile){  Logger.log(getClass(),LogLevel.TRACE,"Searching Kde settings in {0}",settingsFile);  if (!settingsFile.exists()) {    Logger.log(getClass(),LogLevel.DEBUG,"Settings not found");    return null;  }  Logger.log(getClass(),LogLevel.TRACE,"Settings found");  return settingsFile;}  }
class C{  public static <T>SingleSubject<T> create(){  return new SingleSubject<T>();}  }
class C{  public static void debug(){  DEBUG=true;}  }
class C{  private void updateButtons(){  myHostWizard.updateButtons(myGuestWizard.onLastStep().get(),myGuestWizard.canGoForward().get(),!myGuestWizard.canGoBack().get());}  }
class C{  public static RuleKey forDependency(RuleIdeInfo rule,Label dep){  return new RuleKey(dep);}  }
class C{  public void keepOnly(Set<IVarAbstraction> usefulPointers){  Set<IVarAbstraction> reps=new HashSet<IVarAbstraction>();  for (  IVarAbstraction pn : usefulPointers) {    reps.add(pn.getRepresentative());  }  usefulPointers.addAll(reps);  reps=null;  for (  IVarAbstraction pn : pointers) {    if (!usefulPointers.contains(pn))     pn.deleteAll();  }  System.gc();}  }
class C{  private double valueRange(final ValuePenaltyPair[] vpPairs){  double max=Double.NEGATIVE_INFINITY;  double min=Double.MAX_VALUE;  for (  ValuePenaltyPair vpPair : vpPairs) {    if (vpPair.value > max) {      max=vpPair.value;    }    if (vpPair.value < min) {      min=vpPair.value;    }  }  return max - min;}  }
class C{  public boolean gotoFirst(){  current.set1(0);  current.set2(0);  return isCurrentSet();}  }
class C{  public MediaPlayerWrapperImpl(Context context){  super(new MediaPlayer(),context);}  }
class C{  protected AdsGetBudgetQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  public ParseException generateParseException(){  jj_expentries.clear();  boolean[] la1tokens=new boolean[127];  if (jj_kind >= 0) {    la1tokens[jj_kind]=true;    jj_kind=-1;  }  for (int i=0; i < 156; i++) {    if (jj_la1[i] == jj_gen) {      for (int j=0; j < 32; j++) {        if ((jj_la1_0[i] & (1 << j)) != 0) {          la1tokens[j]=true;        }        if ((jj_la1_1[i] & (1 << j)) != 0) {          la1tokens[32 + j]=true;        }        if ((jj_la1_2[i] & (1 << j)) != 0) {          la1tokens[64 + j]=true;        }        if ((jj_la1_3[i] & (1 << j)) != 0) {          la1tokens[96 + j]=true;        }      }    }  }  for (int i=0; i < 127; i++) {    if (la1tokens[i]) {      jj_expentry=new int[1];      jj_expentry[0]=i;      jj_expentries.add(jj_expentry);    }  }  jj_endpos=0;  jj_rescan_token();  jj_add_error_token(0,0);  int[][] exptokseq=new int[jj_expentries.size()][];  for (int i=0; i < jj_expentries.size(); i++) {    exptokseq[i]=jj_expentries.get(i);  }  return new ParseException(token,exptokseq,tokenImage);}  }
class C{  public TShortArrayList(short[] values){  this(Math.max(values.length,DEFAULT_CAPACITY));  add(values);}  }
class C{  public static int delete(String table,String where,Object[] whereArgs){  StringBuilder sql=new StringBuilder();  sql.append("delete from ").append(table);  if (where != null) {    sql.append(" where ").append(where);  }  Connection c=null;  PreparedStatement p=null;  try {    c=getConnection();    if (c == null)     return -1;    p=c.prepareStatement(sql.toString());    if (whereArgs != null) {      int order=1;      for (int i=0; i < whereArgs.length; i++) {        Object o=whereArgs[i];        setParameter(p,order++,o);      }    }    return p.executeUpdate();  } catch (  Exception e) {    if (log.isErrorEnabled())     log.error(sql.toString() + toString(whereArgs),e);  } finally {    close(p,c);  }  return 0;}  }
class C{  @Override public XSModel load(LSInput is){  try {    fGrammarPool.clear();    return ((XSGrammar)fSchemaLoader.loadGrammar(fSchemaLoader.dom2xmlInputSource(is))).toXSModel();  } catch (  Exception e) {    fSchemaLoader.reportDOMFatalError(e);    return null;  }}  }
class C{  public CachingParserPool(SymbolTable symbolTable,XMLGrammarPool grammarPool){  fSynchronizedSymbolTable=new SynchronizedSymbolTable(symbolTable);  fSynchronizedGrammarPool=new SynchronizedGrammarPool(grammarPool);}  }
class C{  @Override public void write(List<byte[]> valueList) throws IOException {  if (isFirstTime) {    init();    isFirstTime=false;  }  for (  byte[] value : valueList) {    oneDictionaryChunkList.add(ByteBuffer.wrap(value));    totalRecordCount++;  }}  }
class C{  public static void serializeReport(IDexUnit unit,StructureInfo struInfo){  Mapping mapping=new Mapping();  Map<String,String> classMap=mapping.getClassMap();  Map<String,Map<String,String>> methodMap=mapping.getMethodMap();  Map<Integer,String> matchedClasses=struInfo.getMatchedClasses();  Map<Integer,String> matchedMethods=struInfo.getMatchedMethods();  List<? extends IDexClass> classes=unit.getClasses();  if (classes == null || classes.size() == 0) {    return;  }  for (  IDexClass eClass : classes) {    List<? extends IDexMethod> methods=eClass.getMethods();    if (methods == null || methods.size() == 0)     continue;    String classPath=matchedClasses.get(eClass.getIndex());    if (classPath == null) {      classMap.put(eClass.getSignature(false),"null");    } else {      classMap.put(eClass.getSignature(false),classPath);    }    Map<String,String> mMap=new HashMap<>();    for (    IDexMethod m : methods) {      if (!m.isInternal()) {        continue;      }      String methodPath=matchedMethods.get(m.getIndex());      if (methodPath == null) {        mMap.put(m.getSignature(false),"null");      } else {        mMap.put(m.getSignature(false),m.getSignature(true));      }    }    methodMap.put(eClass.getSignature(false),mMap);  }  try (ObjectOutputStream out=new ObjectOutputStream(new FileOutputStream(System.getProperty("user.home") + "/Desktop/newMapping.obj"))){    out.writeObject(mapping);    out.close();  } catch (  FileNotFoundException e1) {    e1.printStackTrace();  }catch (  IOException e1) {    e1.printStackTrace();  }}  }
class C{  @Override public void removeLifecycleListener(LifecycleListener listener){  lifecycle.removeLifecycleListener(listener);}  }
class C{  public void resetAxisMaxValue(){  mCustomAxisMax=false;}  }
class C{  public void finish(){  m_bias=0;  m_out.flush();}  }
class C{  public static long retryInfinitelyInt(final Callable<Integer> callable){  return intResponseRetryer.retryInfinitely(callable);}  }
class C{  protected void run() throws Exception {  bindToProcessRegistry();  callMain();}  }
class C{  protected void initializeDefaultPageImageDescriptor(){  String iconPath;  iconPath="icons/full/";  try {    URL installURL=SVNUIPlugin.getPlugin().getBundle().getEntry("/");    URL url=new URL(installURL,iconPath + "wizards/newconnect_wiz.gif");    ImageDescriptor desc=ImageDescriptor.createFromURL(url);    setDefaultPageImageDescriptor(desc);  } catch (  MalformedURLException e) {  }}  }
class C{  private IntDoublePair[] removeNaNs(IntDoublePair[] ranks){  if (!containsNaNs(ranks)) {    return ranks;  }  IntDoublePair[] outRanks=new IntDoublePair[ranks.length];  int j=0;  for (int i=0; i < ranks.length; i++) {    if (Double.isNaN(ranks[i].getValue())) {      for (int k=i + 1; k < ranks.length; k++) {        ranks[k]=new IntDoublePair(ranks[k].getValue(),ranks[k].getPosition() - 1);      }    } else {      outRanks[j]=new IntDoublePair(ranks[i].getValue(),ranks[i].getPosition());      j++;    }  }  IntDoublePair[] returnRanks=new IntDoublePair[j];  System.arraycopy(outRanks,0,returnRanks,0,j);  return returnRanks;}  }
class C{  public static void expandFieldArray(Object instance,String fieldName,Object[] extraElements) throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException {  Field jlrField=findField(instance,fieldName);  Object[] original=(Object[])jlrField.get(instance);  Object[] combined=(Object[])Array.newInstance(original.getClass().getComponentType(),original.length + extraElements.length);  System.arraycopy(extraElements,0,combined,0,extraElements.length);  System.arraycopy(original,0,combined,extraElements.length,original.length);  jlrField.set(instance,combined);}  }
class C{  public boolean isFlaming(){  return isFlaming;}  }
class C{  public SimpleMetricGroup(GroupName name,Enumeration<? extends Metric> m){  this(name);  while (m.hasMoreElements())   add(m.nextElement());}  }
class C{  private static String doGetPath(String filename,int separatorAdd){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  int index=indexOfLastSeparator(filename);  int endIndex=index + separatorAdd;  if (prefix >= filename.length() || index < 0 || prefix >= endIndex) {    return "";  }  return filename.substring(prefix,endIndex);}  }
class C{  Item newFieldItem(final String owner,final String name,final String desc){  key3.set(FIELD,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(FIELD,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public static int copy(InputStream input,OutputStream output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  public DoubleColumn(int nrows){  this(nrows,nrows,0);}  }
class C{  public List<String> words(LinkedList<Integer> path){  int m=path.size();  if (m <= 1)   return null;  Integer[] a=path.toArray(new Integer[m]);  StringBuilder[] tok=new StringBuilder[m - 1];  int i;  for (int j=0; j < m - 1; j++) {    tok[j]=new StringBuilder();    i=a[j];    tok[j].append(syllables[i]);    for (int k=a[j] + 1; k < a[j + 1]; k++) {      tok[j].append(' ');      tok[j].append(syllables[k]);    }  }  List<String> result=new LinkedList<String>();  for (  StringBuilder sb : tok) {    result.add(sb.toString());  }  return result;}  }
class C{  public IteratorBuilder addTemplate(ISpaceQuery query){  templates.add(query);  return this;}  }
class C{  public String runEvent(HttpServletRequest request,HttpServletResponse response,ConfigXMLReader.Event event,ConfigXMLReader.RequestMap requestMap,String trigger) throws EventHandlerException {  EventHandler eventHandler=eventFactory.getEventHandler(event.type);  String eventReturn=eventHandler.invoke(event,requestMap,request,response);  if (Debug.verboseOn() || (Debug.infoOn() && "request".equals(trigger)))   Debug.logInfo("Ran Event [" + event.type + ":"+ event.path+ "#"+ event.invoke+ "] from ["+ trigger+ "], result is ["+ eventReturn+ "]",module);  return eventReturn;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonTrap_A_TO_SELF(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200886,skillcaster,value0,skillname);}  }
class C{  public void resetShipBeforeDateIfAfter(Timestamp newShipBeforeDate){  if (newShipBeforeDate != null) {    if ((this.shipBeforeDate == null) || (!this.shipBeforeDate.before(newShipBeforeDate))) {      this.shipBeforeDate=newShipBeforeDate;    }  }}  }
class C{  private static int maxBucketsPerElement(long numElements){  numElements=Math.max(1,numElements);  double v=(Integer.MAX_VALUE - EXCESS) / (double)numElements;  if (v < 1.0) {    throw new UnsupportedOperationException("Cannot compute probabilities for " + numElements + " elements.");  }  return Math.min(BloomCalculations.probs.length - 1,(int)v);}  }
class C{  static public String streamToString(InputStream in) throws IOException {  StringBuffer out=new StringBuffer();  byte[] b=new byte[4096];  for (int n; (n=in.read(b)) != -1; ) {    out.append(new String(b,0,n));  }  return out.toString();}  }
class C{  public boolean isSame(ModelSubMenu subMenu){  return (this == subMenu);}  }
class C{  public static long export(String classification,Collection<Integer> classIds,BlastMode blastMode,IConnector connector,String fileName,ProgressListener progressListener) throws IOException {  long countMatches=0;  try {    progressListener.setTasks("Export","Writing selected matches");    try (BufferedWriter w=new BufferedWriter(new FileWriter(fileName))){      w.write(blastMode.toString().toUpperCase() + " file generated by MEGAN6\n\n");      int maxProgress=100000 * classIds.size();      int currentProgress=0;      progressListener.setMaximum(maxProgress);      progressListener.setProgress(currentProgress);      int count=0;      for (      Integer classId : classIds) {        count++;        currentProgress=100000 * count;        IReadBlockIterator it=connector.getReadsIterator(classification,classId,0,10000,true,true);        long progressIncrement=100000 / (it.getMaximumProgress() + 1);        while (it.hasNext()) {          countMatches+=writeMatches(it.next(),w);          progressListener.setProgress(currentProgress);          currentProgress+=progressIncrement;        }      }    }   } catch (  CanceledException ex) {    System.err.println("USER CANCELED");  }  return countMatches;}  }
class C{  public ArrayRealVector(RealVector v) throws NullArgumentException {  if (v == null) {    throw new NullArgumentException();  }  data=new double[v.getDimension()];  for (int i=0; i < data.length; ++i) {    data[i]=v.getEntry(i);  }}  }
class C{  public static void toHtmlInlineCss(Grid grid,Writer writer){  render(grid,null,writer,HTML_INLINE_CSS_TEMPLATE);}  }
class C{  public boolean hasEventStatus(){  return eventStatus != null;}  }
class C{  public NewArrayExpr newNewArrayExpr(Type type,Value size){  return new GNewArrayExpr(type,size);}  }
class C{  public boolean needsOffset(){  if (isEnabled() && isDrawLabelsEnabled() && getLabelPosition() == YAxisLabelPosition.OUTSIDE_CHART)   return true; else   return false;}  }
class C{  private void sendCommfaultTag(final long tagID,final String equipmentName,final boolean value,final String description){  this.processMessageSender.sendCommfaultTag(tagID,equipmentName + ":COMM_FAULT",value,description);}  }
class C{  public Vector1DFormat(final String prefix,final String suffix){  super(prefix,suffix,DEFAULT_SEPARATOR,CompositeFormat.getDefaultNumberFormat());}  }
class C{  private static String stringRepeat(String str,int times){  StringBuilder builder=new StringBuilder();  for (int i=0; i < times; ++i) {    builder.append(str);  }  return builder.toString();}  }
class C{  public static String generateResetKey(){  return RandomStringUtils.randomNumeric(DEF_COUNT);}  }
class C{  public static String mapFullWidthNumberToHalfWidth(String text){}  }
class C{  @RequestMapping(value="/race-data",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<RaceData> createRaceData(@RequestBody RaceData raceData) throws URISyntaxException {  log.debug("REST request to save RaceData : {}",raceData);  if (raceData.getRaceDataId() != null) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("raceData","idexists","A new raceData cannot already have an ID")).body(null);  }  RaceData result=raceDataRepository.save(raceData);  return ResponseEntity.created(new URI("/api/race-data/" + result.getRaceDataId())).headers(HeaderUtil.createEntityCreationAlert("raceData",result.getRaceDataId().toString())).body(result);}  }
class C{  public AccountChangePasswordQuery(VkApiClient client,UserActor actor,String newPassword){  super(client,"account.changePassword",ChangePasswordResponse.class);  accessToken(actor.getAccessToken());  newPassword(newPassword);}  }
class C{  public WriteEntryResult write(IEntryPacket entryPacket,Transaction txn,long lease,int modifiers,boolean fromReplication,boolean origin,SpaceContext sc) throws TransactionException, UnusableEntryException, UnknownTypeException, RemoteException {  monitorMemoryUsage(true);  monitorReplicationStateForModifyingOperation(txn);  Context context=(fromReplication && getReplicationNode().getBlobStoreReplicaConsumeHelper() != null) ? getReplicationNode().getBlobStoreReplicaConsumeHelper().getContext() : null;  if (context == null) {    context=(fromReplication && getReplicationNode().getBlobStoreReplicationBulkConsumeHelper() != null) ? getReplicationNode().getBlobStoreReplicationBulkConsumeHelper().getContext() : null;  }  boolean supplied_context=(context != null);  try {    if (!supplied_context)     context=_cacheManager.getCacheContext();    return write(context,entryPacket,txn,lease,modifiers,fromReplication,origin,sc,false,false);  }  finally {    if (!supplied_context) {      _cacheManager.freeCacheContext(context);    }  }}  }
class C{  protected boolean isEnabledForMultipleResources(){  return true;}  }
class C{  public void lerp(Transform end,double alpha,Transform result){  double a1=1.0 - alpha;  double x=a1 * this.x + alpha * end.x;  double y=a1 * this.y + alpha * end.y;  double rs=this.getRotation();  double re=end.getRotation();  double diff=re - rs;  if (diff < -Math.PI)   diff+=Geometry.TWO_PI;  if (diff > Math.PI)   diff-=Geometry.TWO_PI;  double a=diff * alpha + rs;  result.identity();  result.rotate(a);  result.translate(x,y);}  }
class C{  public AemParsys removeFirstComponentOfType(Class<?> componentClass){  return removeNthComponentOfType(componentClass,0);}  }
class C{  public int next(){  if (!hasNextLine())   return -1;  matchesTextLength=0;  String line=nextLine();  while (hasNextLine() && !line.startsWith(">")) {    line=nextLine();  }  if (line == null || !line.startsWith(">"))   return -1;  final String queryName=Basic.getReadName(line);  if (!hasNextLine())   return -1;  line=nextLine();  final String[] tokens=Basic.split(line,';');  int matchId=0;  matches.clear();  int whichToken=0;  StringBuilder path=new StringBuilder();  try {    while (whichToken < tokens.length) {      if (whichToken < tokens.length) {        String name=tokens[whichToken++];        if (name.equals("Root"))         name="root";        path.append(name).append(";");        String scoreString=tokens[whichToken++];        float bitScore=100 * Basic.parseFloat(scoreString);        if (matches.size() < getMaxNumberOfMatchesPerRead() || bitScore > matches.last().bitScore) {          Match match=new Match();          match.bitScore=bitScore;          match.id=matchId++;          String ref=Basic.toString(tokens,0,whichToken,";") + ";";          match.samLine=makeSAM(queryName,path.toString(),bitScore,ref);          matches.add(match);          if (matches.size() > getMaxNumberOfMatchesPerRead())           matches.remove(matches.last());        }      }    }  } catch (  Exception ex) {    System.err.println("Error parsing file near line: " + getLineNumber());    if (incrementNumberOfErrors() >= getMaxNumberOfErrors())     throw new RuntimeException("Too many errors");  }  if (matches.size() == 0) {    if (queryName.length() > matchesText.length) {      matchesText=new byte[2 * queryName.length()];    }    for (int i=0; i < queryName.length(); i++)     matchesText[matchesTextLength++]=(byte)queryName.charAt(i);    matchesText[matchesTextLength++]='\n';    return 0;  } else {    for (    Match match : matches) {      byte[] bytes=match.samLine.getBytes();      if (matchesTextLength + bytes.length + 1 >= matchesText.length) {        byte[] tmp=new byte[2 * (matchesTextLength + bytes.length + 1)];        System.arraycopy(matchesText,0,tmp,0,matchesTextLength);        matchesText=tmp;      }      System.arraycopy(bytes,0,matchesText,matchesTextLength,bytes.length);      matchesTextLength+=bytes.length;      matchesText[matchesTextLength++]='\n';    }    return matches.size();  }}  }
class C{  public void unregisterToolbar(RTToolbar toolbar){  mToolbars.remove(toolbar.getId());  toolbar.removeToolbarListener();  updateToolbarVisibility();}  }
class C{  public void onBorrow(K key,R resource){}  }
class C{  public DefaultChunkScrollableDataIterator(String hQuery,SessionFactory sessionFactory,int fetchSize,int chunkSize){  super(hQuery,sessionFactory,fetchSize,chunkSize);}  }
class C{  public static <T>HashSet<T> hashSet(int initialCapacity){  return new HashSet<T>(initialCapacity);}  }
class C{  public static boolean isFloat(String s,boolean allowNegative,boolean allowPositive,int minDecimal,int maxDecimal){  if (isEmpty(s))   return defaultEmptyOK;  try {    float temp=Float.parseFloat(s);    if (!allowNegative && temp < 0)     return false;    if (!allowPositive && temp > 0)     return false;    int decimalPoint=s.indexOf(".");    if (decimalPoint == -1) {      if (minDecimal > 0)       return false;      return true;    }    int numDecimals=s.length() - decimalPoint - 1;    if (minDecimal >= 0 && numDecimals < minDecimal)     return false;    if (maxDecimal >= 0 && numDecimals > maxDecimal)     return false;    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  private boolean isPlayServicesAvailable(){  GoogleApiAvailability apiAvailability=GoogleApiAvailability.getInstance();  int resultCode=apiAvailability.isGooglePlayServicesAvailable(this);  if (resultCode != ConnectionResult.SUCCESS) {    if (apiAvailability.isUserResolvableError(resultCode)) {      apiAvailability.getErrorDialog(this,resultCode,PLAY_SERVICES_RESOLUTION_REQUEST).show();    } else {      Toaster.showShort(this,R.string.device_is_not_supported);    }    return false;  }  return true;}  }
class C{  private boolean isTypedTimeFullyLegal(){  if (mIs24HourMode) {    int[] values=getEnteredTime(null);    return (values[0] >= 0 && values[1] >= 0 && values[1] < 60);  } else {    return (mTypedTimes.contains(getAmOrPmKeyCode(AM)) || mTypedTimes.contains(getAmOrPmKeyCode(PM)));  }}  }
class C{  public static int px2sp(Context context,float pxValue){  return (int)(pxValue / getFontDensity(context) + 0.5);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public WildcardExtends fullCopy(){  WildcardExtends tree=(WildcardExtends)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  protected boolean baseMatchesStrict(final Value baseValue,Abstraction source){  if (!baseMatches(baseValue,source))   return false;  if (baseValue instanceof Local)   return source.getAccessPath().isLocal(); else   if (baseValue instanceof InstanceFieldRef || baseValue instanceof StaticFieldRef)   return source.getAccessPath().getFieldCount() == 1;  throw new RuntimeException("Unexpected left side");}  }
class C{  protected DateTimeData parse(String str) throws SchemaDateTimeException {  DateTimeData date=new DateTimeData(str,this);  int len=str.length();  date.year=YEAR;  date.month=MONTH;  date.day=15;  getTime(str,0,len,date);  validateDateTime(date);  saveUnnormalized(date);  if (date.utc != 0 && date.utc != 'Z') {    normalize(date);    date.day=15;  }  date.position=2;  return date;}  }
class C{  public int createDeferredDocumentType(String rootElementName,String publicId,String systemId){  int nodeIndex=createNode(Node.DOCUMENT_TYPE_NODE);  int chunk=nodeIndex >> CHUNK_SHIFT;  int index=nodeIndex & CHUNK_MASK;  setChunkValue(fNodeName,rootElementName,chunk,index);  setChunkValue(fNodeValue,publicId,chunk,index);  setChunkValue(fNodeURI,systemId,chunk,index);  return nodeIndex;}  }
class C{  @Override public void startConditional(short type,Augmentations augmentations) throws XNIException {}  }
class C{  @Override public void innerDelete(){  scopes().forEach(null);  Set<CastingImpl> castings=getMappingCasting();  for (  CastingImpl casting : castings) {    InstanceImpl<?,?> instance=casting.getRolePlayer();    if (instance != null) {      for (      EdgeImpl edge : instance.getEdgesOfType(Direction.BOTH,Schema.EdgeLabel.SHORTCUT)) {        if (edge.getProperty(Schema.EdgeProperty.RELATION_ID).equals(getId())) {          edge.delete();        }      }    }  }  super.innerDelete();}  }
class C{  public static void removeAllMEGANData(String fileName) throws IOException {  final DAAHeader header=new DAAHeader(fileName);  header.load();  long newFileSize=-1l;  for (int i=0; i < header.getBlockTypeRankArrayLength(); i++) {    BlockType type=header.getBlockType(i);    if (type != BlockType.empty) {      if (type.toString().startsWith("megan")) {        if (newFileSize == -1l)         newFileSize=header.getLocationOfBlockInFile(i);        header.setBlockTypeRank(i,BlockType.rank(BlockType.empty));        header.setBlockSize(i,0l);      }    }    if (newFileSize != -1) {      try (RandomAccessFile raf=new RandomAccessFile(fileName,"rw")){        raf.setLength(newFileSize);      }     }    if (newFileSize != -1 || header.getReserved3() > 0) {      header.setReserved3(0);      header.save();    }  }}  }
class C{  public boolean standard_local_names(){  return soot.PhaseOptions.getBoolean(options,"standard-local-names");}  }
class C{  private TypeSpec.Builder addMethodImpl(TypeSpec.Builder newTypeBuilder,FieldSpec mConnection,ExecutableElement executableElement){  final TypeName RESULT_SET_TYPE_NAME=TypeName.get(ResultSet.class);  FieldSpec fieldSpec=FieldSpec.builder(PreparedStatement.class,executableElement.getSimpleName().toString() + PREPARED_STATEMENT_SUFFIX).addModifiers(Modifier.PRIVATE).initializer("null").build();  List<? extends TypeMirror> thrownTypes=executableElement.getThrownTypes();  boolean catchExceptions;  if (thrownTypes.isEmpty()) {    catchExceptions=true;  } else   if (thrownTypes.size() == 1 && TypeName.get(thrownTypes.get(0)).equals(TypeName.get(SQLException.class))) {    catchExceptions=false;  } else {    throw new RuntimeException("method should throws SQLException or don't throw at all");  }  TypeName returnTypeName=TypeName.get(executableElement.getReturnType());  if (returnTypeName != TypeName.VOID && !returnTypeName.equals(RESULT_SET_TYPE_NAME)) {    throw new RuntimeException("method should return ResultSet or void");  }  List<? extends VariableElement> parameters=executableElement.getParameters();  String query=executableElement.getAnnotation(DBQuery.class).value();  MethodSpec.Builder methodBuilder=MethodSpec.methodBuilder(executableElement.getSimpleName().toString()).addAnnotation(Override.class).addModifiers(Modifier.PUBLIC).returns(returnTypeName);  if (catchExceptions) {    methodBuilder=methodBuilder.beginControlFlow("try");  } else {    methodBuilder=methodBuilder.addException(SQLException.class);  }  methodBuilder=methodBuilder.addStatement("initIfNotYet()").beginControlFlow("if ($N == $L)",fieldSpec,null).addStatement("$N = $N.prepareStatement($S)",fieldSpec,mConnection,query).endControlFlow();  for (int i=0; i < parameters.size(); i++) {    VariableElement parameter=parameters.get(i);    TypeName paramTypeName=TypeName.get(parameter.asType());    methodBuilder=methodBuilder.addParameter(paramTypeName,parameter.getSimpleName().toString());    String statementFormat=null;    if (paramTypeName.equals(TypeName.INT)) {      statementFormat="$N.setInt($L, $N)";    } else     if (paramTypeName.equals(TypeName.DOUBLE)) {      statementFormat="$N.setDouble($L, $N)";    } else     if (paramTypeName.equals(TypeName.BOOLEAN)) {      statementFormat="$N.setBoolean($L, $N)";    } else     if (paramTypeName.equals(TypeName.LONG)) {      statementFormat="$N.setLong($L, $N)";    } else     if (paramTypeName.equals(TypeName.FLOAT)) {      statementFormat="$N.setFloat($L, $N)";    } else     if (paramTypeName.equals(TypeName.BYTE)) {      statementFormat="$N.setByte($L, $N)";    } else     if (paramTypeName.equals(TypeName.get(String.class))) {      statementFormat="$N.setString($L, $N)";    } else     if (paramTypeName.equals(TypeName.get(BigDecimal.class))) {      statementFormat="$N.setBigDecimal($L, $N)";    } else     if (paramTypeName.equals(TypeName.get(java.sql.Date.class))) {      statementFormat="$N.setDate($L, $N)";    } else     if (paramTypeName.equals(TypeName.get(java.sql.Time.class))) {      statementFormat="$N.setTime($L, $N)";    } else     if (paramTypeName.equals(TypeName.get(java.sql.Timestamp.class))) {      statementFormat="$N.setTimestamp($L, $N)";    } else     if (paramTypeName.equals(TypeName.get(java.sql.Array.class))) {      statementFormat="$N.setArray($L, $N)";    } else     if (paramTypeName.equals(TypeName.get(java.sql.Clob.class))) {      statementFormat="$N.setClob($L, $N)";    } else     if (paramTypeName.equals(TypeName.get(java.sql.Blob.class))) {      statementFormat="$N.setBlob($L, $N)";    } else     if (paramTypeName.equals(TypeName.get(java.sql.NClob.class))) {      statementFormat="$N.setNClob($L, $N)";    } else     if (paramTypeName.equals(TypeName.get(Object.class))) {      statementFormat="$N.setObject($L, $N)";    }    if (statementFormat != null) {      methodBuilder=methodBuilder.addStatement(statementFormat,fieldSpec,i + 1,parameter.getSimpleName());    }  }  if (returnTypeName == TypeName.VOID) {    methodBuilder=methodBuilder.addStatement("$N.execute()",fieldSpec);  } else   if (returnTypeName.equals(RESULT_SET_TYPE_NAME)) {    methodBuilder=methodBuilder.addStatement("return $N.executeQuery()",fieldSpec);  }  if (catchExceptions) {    methodBuilder=methodBuilder.endControlFlow().beginControlFlow("catch ($T e)",SQLException.class).addStatement("e.printStackTrace()");    if (returnTypeName.equals(RESULT_SET_TYPE_NAME)) {      methodBuilder=methodBuilder.addStatement("return null");    }    methodBuilder=methodBuilder.endControlFlow();  }  return newTypeBuilder.addField(fieldSpec).addMethod(methodBuilder.build());}  }
class C{  public Element next(){  return theNext;}  }
class C{  public static PostFragment newInstance(){  PostFragment fragment=new PostFragment();  Bundle args=new Bundle();  fragment.setArguments(args);  return fragment;}  }
class C{  public void init$Children(){}  }
class C{  public static void showManagedByAdministratorToast(Context context){  Toast.makeText(context,context.getString(R.string.managed_by_your_administrator),Toast.LENGTH_LONG).show();}  }
class C{  public PhotosGetQueryWithExtended albumId(String value){  return unsafeParam("album_id",value);}  }
class C{  public static Zdiagmat o(Zdiagmat D){  Zdiagmat B=new Zdiagmat(D);  for (int i=0; i < B.order; i++) {    B.re[i]=-B.re[i];    B.im[i]=-B.im[i];  }  return B;}  }
class C{  @NotNull private Device buildDevice(){  String deviceName=myDeviceData.name().get();  myBuilder.setName(deviceName);  myBuilder.setId(deviceName);  myBuilder.addSoftware(myDeviceData.software().getValue());  myBuilder.setManufacturer(myDeviceData.manufacturer().get());  IdDisplay tag=myDeviceData.deviceType().getValueOrNull();  myBuilder.setTagId((SystemImage.DEFAULT_TAG.equals(tag) || tag == null) ? null : tag.getId());  List<State> states=generateStates(new AvdHardwareData(myDeviceData).buildHardware());  myBuilder.addAllState(states);  return myBuilder.build();}  }
class C{  public boolean hasCurrentUser(){  return currentUser != null;}  }
class C{  public static Map<String,Object> entitySortTest(DispatchContext dctx,Map<String,?> context){  Delegator delegator=dctx.getDelegator();  Set<ModelEntity> set=new TreeSet<ModelEntity>();  set.add(delegator.getModelEntity("Person"));  set.add(delegator.getModelEntity("PartyRole"));  set.add(delegator.getModelEntity("Party"));  set.add(delegator.getModelEntity("ContactMech"));  set.add(delegator.getModelEntity("PartyContactMech"));  set.add(delegator.getModelEntity("OrderHeader"));  set.add(delegator.getModelEntity("OrderItem"));  set.add(delegator.getModelEntity("OrderContactMech"));  set.add(delegator.getModelEntity("OrderRole"));  set.add(delegator.getModelEntity("Product"));  set.add(delegator.getModelEntity("RoleType"));  for (  ModelEntity modelEntity : set) {    Debug.logInfo(modelEntity.getEntityName(),module);  }  return ServiceUtil.returnSuccess();}  }
class C{  int readCorner4(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 3,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 2,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(2,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(3,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public ViewsAnimator animateWith(final AnimationProvider animationProvider){  FunctionUtils.checkParameterIsNotNull("animationProvider",animationProvider);  return new ViewsAnimator(this,animationProvider);}  }
class C{  public void addToIncluded(Document document){  document.addInclude(this);}  }
class C{  @Override public void appendData(String arg) throws DOMException {  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");}  }
class C{  String toString(int indentFactor,int indent) throws JSONException {  int j;  int n=length();  if (n == 0) {    return "{}";  }  Iterator keys=sortedKeys();  StringBuilder sb=new StringBuilder("{");  int newindent=indent + indentFactor;  Object o;  if (n == 1) {    o=keys.next();    sb.append(quote(o.toString()));    sb.append(": ");    sb.append(valueToString(this.map.get(o),indentFactor,indent));  } else {    while (keys.hasNext()) {      o=keys.next();      if (sb.length() > 1) {        sb.append(",\n");      } else {        sb.append('\n');      }      for (j=0; j < newindent; j+=1) {        sb.append(' ');      }      sb.append(quote(o.toString()));      sb.append(": ");      sb.append(valueToString(this.map.get(o),indentFactor,newindent));    }    if (sb.length() > 1) {      sb.append('\n');      for (j=0; j < indent; j+=1) {        sb.append(' ');      }    }  }  sb.append('}');  return sb.toString();}  }
class C{  public NewsfeedGetQuery fields(EnumParam... value){  return unsafeParam("fields",value);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public SubExpr fullCopy(){  SubExpr tree=(SubExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public BarEntry copy(){  BarEntry copied=new BarEntry(getX(),getY(),getData());  copied.setVals(mYValues);  return copied;}  }
class C{  protected void increment(LocusInfo locusInfo,byte refBase){  refBase=(byte)Character.toUpperCase(refBase);  cntGenomicLoci++;  depth+=locusInfo.getRecordAndPositions().size();  if (refBase == '\0' || (refBase != 'C' && refBase != 'G')) {    return;  }  for (  RecordAndOffset recOff : locusInfo.getRecordAndPositions()) {    boolean readIsTopStrand=!(new ReadFromTopStrandFilter(true)).filterOut(recOff.getRecord());    char readBase=Character.toUpperCase((char)recOff.getReadBase());    if (refBase == 'C') {      if (readIsTopStrand) {        if (readBase == 'C') {          cntM++;        } else         if (readBase == 'T') {          cntU++;        }      }    } else     if (refBase == 'G') {      if (!readIsTopStrand) {        if (readBase == 'G') {          cntM++;        } else         if (readBase == 'A') {          cntU++;        }      }    } else {      System.err.println("Unexpected strand or base!");      throw new RuntimeException();    }  }}  }
class C{  public static String makeString(Object obj1){  if (obj1 != null)   return obj1.toString(); else   return "";}  }
class C{  public void apply(){  ClassificationManager.get(Classification.Taxonomy,true).getIdMapper().setUseTextParsing(isParseTaxonNames());  final String daaFileNames=getBlastFileName();  if (daaFileNames.length() > 0) {    ProgramProperties.put(MeganProperties.BLASTFILE,new File(Basic.getLinesFromString(daaFileNames).get(0)));    final StringBuilder buf=new StringBuilder();    buf.append("meganize daaFile=");    java.util.List<String> fileNames=Basic.getLinesFromString(daaFileNames);    boolean first=true;    for (    String name : fileNames) {      File file=new File(name);      if (!(file.exists() && file.canRead())) {        NotificationsInSwing.showError(this,"Failed to open BLAST file for reading: " + name);        return;      }      if (first)       first=false; else       buf.append(", ");      buf.append("'").append(name).append("'");    }    buf.append(" minScore=").append(getMinScore());    buf.append(" maxExpected=").append(getMaxExpected());    buf.append(" minPercentIdentity=").append(getMinPercentIdentity());    buf.append(" topPercent=").append(getTopPercent());    if (getMinSupportPercent() > 0)     buf.append(" minSupportPercent=").append(getMinSupportPercent());    buf.append(" minSupport=").append(getMinSupport());    buf.append(" weightedLCA=").append(isWeightedLCA());    if (isWeightedLCA())     buf.append(" weightedLCAPercent=").append(getWeightedLCAPercent());    buf.append(" minComplexity=").append(getMinComplexity());    buf.append(" useIdentityFilter=").append(isUsePercentIdentityFilter());    buf.append(" fNames=").append(Basic.toString(getSelectedFNames()," "));    buf.append(" paired=").append(isUsePairedReads());    if (isUsePairedReads()) {      String pattern1=getPairedReadSuffix1();      buf.append(" pairSuffixLength=").append(pattern1.length());    }    if (isUseReadMagnitudes()) {      buf.append(" hasMagnitudes=").append(isUseReadMagnitudes());    }    if (getShortDescription().length() > 0)     buf.append(" description='").append(getShortDescription()).append("'");    buf.append(";");    setResult(buf.toString());    try {      destroyView();    } catch (    CanceledException e) {      Basic.caught(e);    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_VENDOR_SOLD_OUT(int nameId){  return new SM_SYSTEM_MESSAGE(1300647,new DescriptionId(nameId));}  }
class C{  public void stop(){synchronized (contents) {    contents.clear();    kickerThread=null;    head=null;    dead=true;    contents.notifyAll();  }}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  if (undoRedoObject != null) {    if (textField != null) {      if (undoRedoObject.getOldValue() instanceof String) {        String oldValue=(String)undoRedoObject.getOldValue();        textField.setText(oldValue);      }    }  }}  }
class C{  public static ConstraintWidget[] inferTableList(WidgetsScene list){  for (  ConstraintWidget widget : list.getWidgets()) {    widget.resetAnchors();  }  return inferTableList(list.getRoot());}  }
class C{  public void registerInterface(Class<? extends PluginLoader> loader) throws IllegalArgumentException {  PluginLoader instance;  if (PluginLoader.class.isAssignableFrom(loader)) {    Constructor<? extends PluginLoader> constructor;    try {      constructor=loader.getConstructor(Server.class);      instance=constructor.newInstance(server);    } catch (    NoSuchMethodException ex) {      String className=loader.getName();      throw new IllegalArgumentException(String.format("Class %s does not have a public %s(Server) constructor",className,className),ex);    }catch (    Exception ex) {      throw new IllegalArgumentException(String.format("Unexpected exception %s while attempting to construct a new instance of %s",ex.getClass().getName(),loader.getName()),ex);    }  } else {    throw new IllegalArgumentException(String.format("Class %s does not implement interface PluginLoader",loader.getName()));  }  Pattern[] patterns=instance.getPluginFileFilters();synchronized (this) {    for (    Pattern pattern : patterns) {      fileAssociations.put(pattern,instance);    }  }}  }
class C{  public SubscriptionController createSubscriptionTab(final boolean allTab,final ManagedMessageStoreWithFiltering<FormattedMqttMessage> observableMessageStore,final MqttSubscription subscription,final MqttAsyncConnection connection,final MqttConnectionController connectionController){  final FXMLLoader loader=FxmlUtils.createFxmlLoaderForProjectFile("SubscriptionMessageListPane.fxml");  final AnchorPane subscriptionPane=FxmlUtils.loadAnchorPane(loader);  final SubscriptionController subscriptionController=((SubscriptionController)loader.getController());  final Tab tab=new Tab();  if (subscription != null) {    eventBus.subscribeWithFilterOnly(subscriptionController,null,SubscriptionStatusChangeEvent.class,subscription);  }  subscriptionController.setStore(observableMessageStore);  subscriptionController.setEventBus(eventBus);  subscriptionController.setConfingurationManager(configurationManager);  if (connection != null) {    subscriptionController.setFormattingManager(connection.getStore().getFormattingManager());    subscriptionController.setConnectionProperties(connection.getProperties());  } else {    subscriptionController.setFormattingManager(new FormattingManager(new MqttScriptManager(null,null,null)));  }  subscriptionController.setTab(tab);  subscriptionController.toggleMessagePayloadSize(connectionController.getResizeMessageContentMenu().isSelected());  tab.setClosable(false);  tab.setContent(subscriptionPane);  if (subscription != null) {    tab.setStyle(StylingUtils.createBaseRGBString(subscription.getColor()));  }  if (allTab) {    subscriptionControllers.put(ALL_SUBSCRIPTIONS_TAB_TITLE,subscriptionController);    tab.setGraphic(new Label(ALL_SUBSCRIPTIONS_TAB_TITLE));    tab.getGraphic().getStyleClass().add("subscribed");  } else {    logger.debug("Mapping subscription topic {} to controller",subscription.getTopic());    subscriptionControllers.put(subscription.getTopic(),subscriptionController);    tab.setGraphic(new Label(subscription.getTopic()));    tab.getGraphic().getStyleClass().add("unsubscribed");    tab.setTooltip(new Tooltip("Status: " + "unsubscribed"));  }  return subscriptionController;}  }
class C{  public void enableDragItem(@NonNull ItemTouchHelper itemTouchHelper,int toggleViewId,boolean dragOnLongPress){  itemDragEnabled=true;  mItemTouchHelper=itemTouchHelper;  setToggleViewId(toggleViewId);  setToggleDragOnLongPress(dragOnLongPress);}  }
class C{  private void performDrag(MotionEvent event){  mLastGesture=ChartGesture.DRAG;  mMatrix.set(mSavedMatrix);  OnChartGestureListener l=mChart.getOnChartGestureListener();  float dX, dY;  if (mChart.isAnyAxisInverted() && mClosestDataSetToTouch != null && mChart.getAxis(mClosestDataSetToTouch.getAxisDependency()).isInverted()) {    if (mChart instanceof HorizontalBarChart) {      dX=-(event.getX() - mTouchStartPoint.x);      dY=event.getY() - mTouchStartPoint.y;    } else {      dX=event.getX() - mTouchStartPoint.x;      dY=-(event.getY() - mTouchStartPoint.y);    }  } else {    dX=event.getX() - mTouchStartPoint.x;    dY=event.getY() - mTouchStartPoint.y;  }  mMatrix.postTranslate(dX,dY);  if (l != null)   l.onChartTranslate(event,dX,dY);}  }
class C{  public static String makeLogTag(Class cls){  return makeLogTag(cls.getSimpleName());}  }
class C{  public static Map<Writable,Long> sampleMostFrequentFromColumn(int nMostFrequent,String columnName,Schema schema,JavaRDD<List<Writable>> data){  int columnIdx=schema.getIndexOfColumn(columnName);  JavaPairRDD<Writable,Long> keyedByWritable=data.mapToPair(new ColumnToKeyPairTransform(columnIdx));  JavaPairRDD<Writable,Long> reducedByWritable=keyedByWritable.reduceByKey(new SumLongsFunction2());  List<Tuple2<Writable,Long>> list=reducedByWritable.takeOrdered(nMostFrequent,new Tuple2Comparator<Writable>(false));  List<Tuple2<Writable,Long>> sorted=new ArrayList<>(list);  Collections.sort(sorted,new Tuple2Comparator<Writable>(false));  Map<Writable,Long> map=new LinkedHashMap<>();  for (  Tuple2<Writable,Long> t2 : sorted) {    map.put(t2._1(),t2._2());  }  return map;}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public void terminateTimer(){  timer.cancel();  running=false;}  }
class C{  protected String domain(){  if (uri.getPath().startsWith("queues/")) {    return "queue";  } else   if (uri.getPath().startsWith("topics/")) {    return "topic";  } else   if (uri.getPath().startsWith("persistent/")) {    return "persistent";  } else {    throw new RestException(Status.INTERNAL_SERVER_ERROR,"domain() invoked from wrong resource");  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"AQI\" ("+ "\"AREAID\" TEXT,"+ "\"AQI\" INTEGER,"+ "\"QUALITY\" TEXT,"+ "\"PM2_5\" INTEGER,"+ "\"PM10\" INTEGER,"+ "\"SO2\" INTEGER,"+ "\"NO2\" INTEGER);");}  }
class C{  public URI(String p_scheme,String p_userinfo,String p_host,int p_port,String p_path,String p_queryString,String p_fragment) throws MalformedURIException {  if (p_scheme == null || p_scheme.trim().length() == 0) {    throw new MalformedURIException("Scheme is required!");  }  if (p_host == null) {    if (p_userinfo != null) {      throw new MalformedURIException("Userinfo may not be specified if host is not specified!");    }    if (p_port != -1) {      throw new MalformedURIException("Port may not be specified if host is not specified!");    }  }  if (p_path != null) {    if (p_path.indexOf('?') != -1 && p_queryString != null) {      throw new MalformedURIException("Query string cannot be specified in path and query string!");    }    if (p_path.indexOf('#') != -1 && p_fragment != null) {      throw new MalformedURIException("Fragment cannot be specified in both the path and fragment!");    }  }  setScheme(p_scheme);  setHost(p_host);  setPort(p_port);  setUserinfo(p_userinfo);  setPath(p_path);  setQueryString(p_queryString);  setFragment(p_fragment);}  }
class C{  public <R>Plan<R> then(Function<? super T1,? extends R> selector){  if (selector == null) {    throw new NullPointerException();  }  return new Plan1<T1,R>(this,selector);}  }
class C{  public static void logSelectionIsValid(boolean isSelectionValid){  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchSelectionValid",isSelectionValid ? SELECTION_VALID : SELECTION_INVALID,SELECTION_BOUNDARY);}  }
class C{  private void sendBeforeTextChanged(CharSequence s,int start,int count,int after){  if (mListeners != null) {    for (int i=0; i < mListeners.size(); i++) {      mListeners.get(i).beforeTextChanged(s,start,count,after);    }  }}  }
class C{  public String toString(int indentFactor) throws JSONException {  return toString(indentFactor,0);}  }
class C{  public static byte[] compressForZlib(byte[] bytesToCompress){  Deflater deflater=new Deflater();  deflater.setInput(bytesToCompress);  deflater.finish();  byte[] bytesCompressed=new byte[Short.MAX_VALUE];  int numberOfBytesAfterCompression=deflater.deflate(bytesCompressed);  byte[] returnValues=new byte[numberOfBytesAfterCompression];  System.arraycopy(bytesCompressed,0,returnValues,0,numberOfBytesAfterCompression);  return returnValues;}  }
class C{  public void shutdown() throws RemoteException {  m_container.shutdown();}  }
class C{  public boolean canConsume(DestinationName destination,String role){  return checkAuthorization(destination,role,AuthAction.consume);}  }
class C{  @Override public boolean isSilence(){  throw new IllegalStateException("This method should not be called for DiphoneTargets.");}  }
class C{  @Override public void run(){  Account account=AccountUtils.getAccount();  boolean syncActive=ContentResolver.isSyncActive(account,FeedContract.CONTENT_AUTHORITY);  boolean syncPending=ContentResolver.isSyncPending(account,FeedContract.CONTENT_AUTHORITY);  setRefreshActionButtonState(syncActive || syncPending);}  }
class C{  @Deprecated public Builder cacheInMemory(){  cacheInMemory=true;  return this;}  }
class C{  public void add(char[] w,int wLen){  if (i + wLen >= b.length) {    char[] new_b=new char[i + wLen + INC];    for (int c=0; c < i; c++)     new_b[c]=b[c];    b=new_b;  }  for (int c=0; c < wLen; c++)   b[i++]=w[c];}  }
class C{  public PhysicalTableDefinition(TableName name,ZonedTimeGrain grain,Set<? extends DimensionConfig> dimensions){  this.name=name;  this.grain=grain;  this.dimensions=Collections.unmodifiableSet(dimensions);  this.logicalToPhysicalNames=Collections.unmodifiableMap(dimensions.stream().collect(Collectors.toMap(null,null)));}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public Matrix pow(double exp){  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++)   for (int j=0; j < n; j++)   C[i][j]=Math.pow(A[i][j],exp);  return X;}  }
class C{  public Despawn(EntityLiving living){  super(living);}  }
class C{  public static void writeMiniLangDocument(URL xmlURL,Document document){  URL styleSheetURL=null;  InputStream styleSheetInStream=null;  Transformer transformer=null;  try {    styleSheetURL=FlexibleLocation.resolveLocation("component://minilang/config/MiniLang.xslt");    styleSheetInStream=styleSheetURL.openStream();    TransformerFactory transformerFactory=TransformerFactory.newInstance();    transformer=transformerFactory.newTransformer(new StreamSource(styleSheetInStream));  } catch (  Exception e) {    Debug.logWarning(e,"Error reading minilang/config/MiniLang.xslt: ",module);    return;  } finally {    if (styleSheetInStream != null) {      try {        styleSheetInStream.close();      } catch (      IOException e) {        Debug.logWarning(e,"Error closing minilang/config/MiniLang.xslt: ",module);      }    }  }  FileOutputStream fos=null;  try {    fos=new FileOutputStream(xmlURL.getFile());    UtilXml.transformDomDocument(transformer,document,fos);    Debug.logInfo("Saved Mini-language file " + xmlURL,module);  } catch (  Exception e) {    Debug.logWarning(e,"Error writing mini-language file " + xmlURL + ": ",module);  } finally {    if (fos != null) {      try {        fos.close();      } catch (      IOException e) {        Debug.logWarning(e,"Error closing " + xmlURL + ": ",module);      }    }  }}  }
class C{  public static Intent createShortcutIntent(String url){  Intent shortcutIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));  shortcutIntent.putExtra(REUSE_URL_MATCHING_TAB_ELSE_NEW_TAB,true);  return shortcutIntent;}  }
class C{  @VisibleForTesting public BKDLConfig(String zkServers,String ledgersPath){  this(zkServers,zkServers,zkServers,zkServers,ledgersPath);}  }
class C{  public WallRepostQuery markAsAds(Boolean value){  return unsafeParam("mark_as_ads",value);}  }
class C{  public void clearBody() throws JMSException {  super.clearBody();  this.dataOut=null;  this.dataIn=null;  this.bytesOut=null;}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  private void loadBinaryIndex(URL url){  diphoneIndex=new HashMap();  try {    InputStream is=Utilities.getInputStream(url);    DataInputStream dis=new DataInputStream(is);    if (dis.readInt() != INDEX_MAGIC) {      throw new Error("Bad index file format");    }    int size=dis.readInt();    for (int i=0; i < size; i++) {      String diphoneName=dis.readUTF();      int pos=dis.readInt();      diphoneIndex.put(diphoneName,new Integer(pos));    }    dis.close();  } catch (  FileNotFoundException fe) {    throw new Error("Can't load binary index " + fe.getMessage());  }catch (  IOException ioe) {    throw new Error("Can't read binary index " + ioe.getMessage());  }}  }
class C{  private void checkDimension(final int expected,final Object array) throws MathIllegalArgumentException {  int arrayDimension=(array == null) ? 0 : Array.getLength(array);  if (arrayDimension != expected) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,arrayDimension,expected);  }}  }
class C{  @Nullable public Interaction createInteraction(@NotNull ScreenView screenView,@NotNull NlComponent layout){  return null;}  }
class C{  public void pow(final double[] operand,final int operandOffset,final int n,final double[] result,final int resultOffset){  if (n == 0) {    result[resultOffset]=1.0;    Arrays.fill(result,resultOffset + 1,resultOffset + getSize(),0);    return;  }  double[] function=new double[1 + order];  if (n > 0) {    final int maxOrder=FastMath.min(order,n);    double xk=FastMath.pow(operand[operandOffset],n - maxOrder);    for (int i=maxOrder; i > 0; --i) {      function[i]=xk;      xk*=operand[operandOffset];    }    function[0]=xk;  } else {    final double inv=1.0 / operand[operandOffset];    double xk=FastMath.pow(inv,-n);    for (int i=0; i <= order; ++i) {      function[i]=xk;      xk*=inv;    }  }  double coefficient=n;  for (int i=1; i <= order; ++i) {    function[i]*=coefficient;    coefficient*=n - i;  }  compose(operand,operandOffset,function,result,resultOffset);}  }
class C{  private HttpEntityEnclosingRequestBase addEntityToRequestBase(HttpEntityEnclosingRequestBase requestBase,HttpEntity entity){  if (entity != null) {    requestBase.setEntity(entity);  }  return requestBase;}  }
class C{  public static String readFileToString(File file,String encoding) throws IOException {  return readFileToString(file,Charsets.toCharset(encoding));}  }
class C{  private boolean isStartingNewContextualSearch(PanelState toState,StateChangeReason reason){  return toState == PanelState.PEEKED && (reason == StateChangeReason.TEXT_SELECT_TAP || reason == StateChangeReason.TEXT_SELECT_LONG_PRESS);}  }
