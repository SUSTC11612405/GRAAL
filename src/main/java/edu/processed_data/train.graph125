class C{  private void updateView(){  view.setProjectName("");  view.setProjectDescription("");  view.setProjectVisibility(true);  view.setSkipFirstLevel(true);}  }
class C{  public static LostEventE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  LostEventE object=new LostEventE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {      while (!reader.isEndElement()) {        reader.next();      }      return null;    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"LostEvent".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (LostEventE)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","LostEvent").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        object.setLostEvent(null);        reader.next();        reader.next();      } else {        object.setLostEvent(LostEvent.Factory.parse(reader));        reader.next();      }    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void stopLocation(){  if (_locationManager != null) {    Log.d(TAG,"Attempting to stop gps geolocation");    if (_gpsStatusListener != null) {      _locationManager.removeGpsStatusListener(_gpsStatusListener);      _gpsStatusListener=null;    }    if (_locationListenerGPSProvider != null) {      try {        _locationManager.removeUpdates(_locationListenerGPSProvider);      } catch (      SecurityException exc) {        Log.e(TAG,exc.getMessage());      }      _locationListenerGPSProvider=null;    }    _locationManager=null;    if (_locationDataBuffer != null) {      _locationDataBuffer.clear();    }    try {      Thread.currentThread().interrupt();    } catch (    SecurityException exc) {      Log.e(TAG,exc.getMessage());      sendCallback(PluginResult.Status.ERROR,JSONHelper.errorJSON(LocationManager.GPS_PROVIDER,ErrorMessages.FAILED_THREAD_INTERRUPT()));    }  } else {    Log.d(TAG,"GPS location already stopped");  }}  }
class C{  public void testFindUserSunDirectoryManager() throws Exception {  LdapManager mgr=getLdapSunDirectoryServer();  List ret=null;  OrFilter filter=new OrFilter();  filter.or(new LikeFilter(mgr.getUsersReturningAttribute(LdapUserAttributeConstants.LDAP_USER_ATTRIBUTE_GIVEN_NAME),"*nacho*"));  filter.or(new LikeFilter(mgr.getUsersReturningAttribute(LdapUserAttributeConstants.LDAP_USER_ATTRIBUTE_SURNAME),"*nacho*"));  try {    LdapSearchManagerVO searchMgrVO=new LdapSearchManagerVO();    searchMgrVO.setFilter(filter);    searchMgrVO.setAddUserClasses(true);    ret=mgr.findUser(searchMgrVO);  } catch (  Exception e) {  }  assertEquals(1,ret.size());  assertEquals("86b5a982-aa2011dc-802cebc5-dcc21b8e",((LdapEntryVO)ret.get(0)).getAttributeSingleValue(mgr.getUsersReturningAttribute(LdapUserAttributeConstants.LDAP_USER_ATTRIBUTE_GUID)));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void testVerifyBeaHomeWhenMissingRegistryXml() throws Exception {  this.container.setBeaHome(BEA_HOME);  this.container.setFileHandler(this.fileHandler);  try {    this.container.verifyBeaHome();    fail("Should have thrown an exception here");  } catch (  ContainerException expected) {    assertEquals("Invalid WebLogic installation. The [" + BEA_HOME + "/registry.xml] file doesn't "+ "exist. Make sure the BEA_HOME directory you have specified "+ "points to the correct location (it is currently pointing to ["+ BEA_HOME+ "])",expected.getMessage());  }}  }
class C{  public static Document readDocument(InputStream is) throws SAXException, IOException {  DocumentBuilderFactory fac=DocumentBuilderFactory.newInstance();  fac.setNamespaceAware(true);  DocumentBuilder builder=null;  try {    builder=fac.newDocumentBuilder();  } catch (  ParserConfigurationException e) {    throw new IllegalStateException(String.format("%s.readDocument() could not instantiate DocumentBuilderFactory. This should never happen",DomUtilities.class.getName()),e);  }  return builder.parse(is);}  }
class C{  public IncompatibleRolesException(String message){  super(message);}  }
class C{  public static Matcher<BindingSet> binds(String name,Class<?> value){  return new BindsMatcher<Object>(name,instanceOf(value));}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (op: ");  result.append(op);  result.append(')');  return result.toString();}  }
class C{  public static void clearCart(Properties ctx,HttpServletRequest request){  request.setAttribute("qtyTotal",null);  request.setAttribute("grandTotal",null);  Env.setContext(ctx,Constants.MMOVEMENT_ID,"");  request.getSession().removeAttribute(Constants.DOC_NO);  request.getSession().removeAttribute(Constants.DOC_STATUS);  request.getSession().removeAttribute(Constants.DESCRIPTION);  request.getSession().removeAttribute(Constants.MMOVEMENT_ID);  request.getSession().removeAttribute(Constants.MMOVEMENT_CART);  request.getSession().removeAttribute(Constants.MMOVEMENT_CART_ITEMS);}  }
class C{  public static char variantOf(String url,String etag,boolean isIE8,boolean isMobile,boolean isRobot){  if (isRobot)   return FORTH_VISIT_VARIANT;  if (etag != null) {    int len=etag.length();    if (len >= MD5_LENGTH + 3 && etag.charAt(len - 1) == '}' && etag.charAt(len - MD5_LENGTH - 3) == '{') {      return etag.charAt(len - 2);    }    if (len >= MD5_LENGTH + 3 && etag.charAt(len - 1) == ']' && etag.charAt(len - MD5_LENGTH - 3) == '[') {      return etag.charAt(len - 2);    }  }  char variant;  if (isIE8)   variant=IE8_FIRST_VISIT_VARIANT; else   if (isMobile)   variant=MOBILE_FIRST_VISIT_VARIANT; else   variant=FIRST_VISIT_VARIANT;  Integer offsetObj=firstVisitOffsets.get(url);  if (offsetObj != null)   variant+=offsetObj.intValue();  return variant;}  }
class C{  @Override public void stop(){  if (executorService != null) {    executorService.shutdown();  }  restTemplate=null;}  }
class C{  public boolean equalsPhysical(DisplayMetrics other){  return other != null && widthPixels == other.widthPixels && heightPixels == other.heightPixels && density == other.density && densityDpi == other.densityDpi && xdpi == other.xdpi && ydpi == other.ydpi && noncompatWidthPixels == other.noncompatWidthPixels && noncompatHeightPixels == other.noncompatHeightPixels && noncompatDensity == other.noncompatDensity && noncompatDensityDpi == other.noncompatDensityDpi && noncompatXdpi == other.noncompatXdpi && noncompatYdpi == other.noncompatYdpi;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public AnnotationVisitor visitAnnotation(String name,String desc){  if (av != null) {    return av.visitAnnotation(name,desc);  }  return null;}  }
class C{  public boolean isBalancing(){  Object oo=get_Value(COLUMNNAME_IsBalancing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static void randomizeSignalGroup(Node signalGroup,int offset,int cycleTime){  NodeList children=signalGroup.getChildNodes();  for (int i=0; i < children.getLength(); i++) {    Node elem=children.item(i);    if ((elem.getNodeName().equals("roughcast")) || (elem.getNodeName().equals("dropping"))) {      Node sec=elem.getAttributes().getNamedItem("sec");      int oldTime=Integer.valueOf(sec.getNodeValue()).intValue();      int newTime=oldTime + offset;      if (newTime > cycleTime) {        newTime-=cycleTime;      }      sec.setNodeValue(Integer.toString(newTime));    }  }}  }
class C{  public Period(ReadableInstant startInstant,ReadableDuration duration,PeriodType type){  super(startInstant,duration,type);}  }
class C{  public static String throwableToString(Throwable t){  return throwableToString(t,-1);}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  public Property millisOfSecond(){  return new Property(this,getChronology().millisOfSecond());}  }
class C{  public void addHandler(GenericExceptionHandler handler){  if (!genericHandlers.contains(handler))   genericHandlers.add(handler);}  }
class C{  public void addRelation(Relation relation){  relations.add(relation);}  }
class C{  public boolean isRemoved(){  return pt == null;}  }
class C{  public StreamBuilderImpl<T,U> prefetch(int prefetch){  return new Prefetch<T,U>(this,prefetch);}  }
class C{  public T caseExpression(Expression object){  return null;}  }
class C{  public void traverse(Node pos) throws org.xml.sax.SAXException {  this.fSerializer.startDocument();  if (pos.getNodeType() != Node.DOCUMENT_NODE) {    Document ownerDoc=pos.getOwnerDocument();    if (ownerDoc != null && ownerDoc.getImplementation().hasFeature("Core","3.0")) {      fIsLevel3DOM=true;    }  } else {    if (((Document)pos).getImplementation().hasFeature("Core","3.0")) {      fIsLevel3DOM=true;    }  }  if (fSerializer instanceof LexicalHandler) {    fLexicalHandler=((LexicalHandler)this.fSerializer);  }  if (fFilter != null)   fWhatToShowFilter=fFilter.getWhatToShow();  Node top=pos;  while (null != pos) {    startNode(pos);    Node nextNode=null;    nextNode=pos.getFirstChild();    while (null == nextNode) {      endNode(pos);      if (top.equals(pos))       break;      nextNode=pos.getNextSibling();      if (null == nextNode) {        pos=pos.getParentNode();        if ((null == pos) || (top.equals(pos))) {          if (null != pos)           endNode(pos);          nextNode=null;          break;        }      }    }    pos=nextNode;  }  this.fSerializer.endDocument();}  }
class C{  public Pair<Set<Issue>,Set<Issue>> check(RamlRoot published,RamlRoot implemented){  checkChildren(published.getResources(),published,IssueLocation.CONTRACT);  if (!ignoreCodeStyle && implemented != null) {    checkChildren(implemented.getResources(),implemented,IssueLocation.SOURCE);  }  return new Pair<>(warnings,Collections.emptySet());}  }
class C{  private boolean isLeaf(int nodeIdx){  return nodeIdx >= nodes.length;}  }
class C{  public void init(){  Model splModel=SPL.getModel();  Model spinModel=SPIN.getModel();  MultiUnion multiUnion=JenaUtil.createMultiUnion(new Graph[]{splModel.getGraph(),spinModel.getGraph()});  multiUnion.setBaseGraph(splModel.getGraph());  Model unionModel=ModelFactory.createModelForGraph(multiUnion);  registerAll(unionModel,null);  FunctionRegistry.get().put(SPIN.ask.getURI(),new AskFunction());  FunctionRegistry.get().put(SPIN.eval.getURI(),new EvalFunction());  FunctionRegistry.get().put(SPIN.evalInGraph.getURI(),new EvalInGraphFunction());  FunctionRegistry.get().put(SPIN.violatesConstraints.getURI(),new ViolatesConstraintsFunction());  PropertyFunctionRegistry.get().put(SPIN.construct.getURI(),ConstructPFunction.class);  PropertyFunctionRegistry.get().put(SPIN.constructViolations.getURI(),ConstructViolationsPFunction.class);  PropertyFunctionRegistry.get().put(SPIN.select.getURI(),SelectPFunction.class);  PropertyFunctionRegistry.get().put("http://topbraid.org/spin/owlrl#propertyChainHelper",PropertyChainHelperPFunction.class);}  }
class C{  public void vetoableChange(PropertyChangeEvent evt) throws PropertyVetoException {  String value=evt.getNewValue() == null ? "" : evt.getNewValue().toString();  Env.setContext(Env.getCtx(),m_WindowNo,evt.getPropertyName(),value);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 40) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public final void unread(){  if (_readOffset <= 0)   throw new RuntimeException();  _readOffset--;}  }
class C{  public static double mapValueFromRangeToRange(double value,double fromLow,double fromHigh,double toLow,double toHigh){  double fromRangeSize=fromHigh - fromLow;  double toRangeSize=toHigh - toLow;  double valueScale=(value - fromLow) / fromRangeSize;  return toLow + (valueScale * toRangeSize);}  }
class C{  private void launchReport(MPrintFormat pf){  int Record_ID=0;  if (m_query.getRestrictionCount() == 1 && m_query.getCode(0) instanceof Integer)   Record_ID=((Integer)m_query.getCode(0)).intValue();  if (m_whereExtended != null && m_whereExtended.length() > 0 && m_query != null)   m_query.addRestriction(Env.parseContext(Env.getCtx(),WindowNo,m_whereExtended,false));  PrintInfo info=new PrintInfo(pf.getName(),pf.getAD_Table_ID(),Record_ID);  info.setDescription(m_query.getInfo());  if (pf != null && pf.getJasperProcess_ID() > 0) {    ProcessInfo pi=new ProcessInfo("",pf.getJasperProcess_ID(),pf.getAD_Table_ID(),Record_ID);    ProcessCtl worker=ProcessCtl.process(parent,WindowNo,pi,null);  } else {    ReportEngine re=new ReportEngine(Env.getCtx(),pf,m_query,info);    re.setWhereExtended(m_whereExtended);    re.setWindowNo(WindowNo);    ReportCtl.preview(re);  }}  }
class C{  protected void doWriteObject(final ObjectOutputStream out) throws IOException {  out.writeFloat(loadFactor);  out.writeInt(data.length);  out.writeInt(size);  for (final MapIterator<K,V> it=mapIterator(); it.hasNext(); ) {    out.writeObject(it.next());    out.writeObject(it.getValue());  }}  }
class C{  public void testGcdSecondLonger(){  byte aBytes[]={-12,1,0,0,0,23,44,55,66};  byte bBytes[]={-15,24,123,56,-11,-112,-34,-98,8,10,12,14,25,125,-15,28,-127};  int aSign=1;  int bSign=1;  byte rBytes[]={7};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.gcd(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public acronym addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case EipPackage.TRANSFORMER__TO_CHANNELS:    return ((InternalEList<InternalEObject>)(InternalEList<?>)getToChannels()).basicAdd(otherEnd,msgs);case EipPackage.TRANSFORMER__FROM_CHANNELS:  return ((InternalEList<InternalEObject>)(InternalEList<?>)getFromChannels()).basicAdd(otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public View findViewById(int id){  return mRootView.findViewById(id);}  }
class C{  public ul addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  private void gameLoop(final int delta,final GameObjects gameObjects){  if (!gameRunning) {    logger.info("Request logout");    try {      if (offline || client.logout()) {        GameLoop.get().stop();      } else {        logger.warn("You can't logout now.");        gameRunning=true;      }    } catch (    final Exception e) {      logger.error(e,e);      GameLoop.get().stop();    }  }  setOffline(!client.getConnectionState());  screenController.nextFrame();  logger.debug("Move objects");  gameObjects.update(delta);  final User user=User.get();  if ((user != null) && (user != lastuser)) {    character.setPlayer(user);    keyring.setSlot(user,"keyring");    spells.setSlot(user,"spells");    inventory.setSlot(user,"bag");    lastuser=user;  }  triggerPainting();  logger.debug("Query network");  client.loop(0);  gameKeyHandler.processDelayedDirectionRelease();}  }
class C{  public static GemFireCacheImpl cache(){  GemFireCacheImpl cache=mock(GemFireCacheImpl.class);  InternalDistributedSystem system=mock(InternalDistributedSystem.class);  DistributionConfig config=mock(DistributionConfig.class);  DistributionManager distributionManager=mock(DistributionManager.class);  CancelCriterion systemCancelCriterion=mock(CancelCriterion.class);  DSClock clock=mock(DSClock.class);  LogWriter logger=mock(LogWriter.class);  Statistics stats=mock(Statistics.class);  InternalDistributedMember member;  member=new InternalDistributedMember("localhost",5555);  when(config.getCacheXmlFile()).thenReturn(new File(""));  when(config.getDeployWorkingDir()).thenReturn(new File("."));  when(cache.getDistributedSystem()).thenReturn(system);  when(cache.getSystem()).thenReturn(system);  when(cache.getMyId()).thenReturn(member);  when(cache.getDistributionManager()).thenReturn(distributionManager);  when(cache.getCancelCriterion()).thenReturn(systemCancelCriterion);  when(cache.getCachePerfStats()).thenReturn(mock(CachePerfStats.class));  when(system.getDistributedMember()).thenReturn(member);  when(system.getConfig()).thenReturn(config);  when(system.getDistributionManager()).thenReturn(distributionManager);  when(system.getCancelCriterion()).thenReturn(systemCancelCriterion);  when(system.getClock()).thenReturn(clock);  when(system.getLogWriter()).thenReturn(logger);  when(system.createAtomicStatistics(any(),any(),anyLong())).thenReturn(stats);  when(system.createAtomicStatistics(any(),any())).thenReturn(stats);  when(distributionManager.getId()).thenReturn(member);  when(distributionManager.getDistributionManagerId()).thenReturn(member);  when(distributionManager.getConfig()).thenReturn(config);  when(distributionManager.getSystem()).thenReturn(system);  when(distributionManager.getCancelCriterion()).thenReturn(systemCancelCriterion);  return cache;}  }
class C{  @Override public void dispose(){  if (myKeepConnection) {    ourGuard.removeRepositoryPool((CachingSvnRepositoryPool)myPool);  }  myKeepConnection=false;  if (myListener != null) {    myListener.dispose();  }  myAuthManager.dispose();  myTunnelProvider.dispose();  myPool.dispose();}  }
class C{  @SuppressWarnings("PointlessBooleanExpression") private void readType1CFontFile(final byte[] fontDataAsArray,final FontData fontDataAsObject) throws Exception {  LogWriter.writeLog("Embedded Type1C font used");  glyphs.setis1C(true);  final boolean isByteArray=(fontDataAsArray != null);  if (debugFont) {    System.err.println(getBaseFontName());  }  int start;  final int size=2;  final int major;  final int minor;  if (isByteArray) {    major=fontDataAsArray[0];    minor=fontDataAsArray[1];  } else {    major=fontDataAsObject.getByte(0);    minor=fontDataAsObject.getByte(1);  }  if (major != 1 || minor != 0) {    LogWriter.writeLog("1C  format " + major + ':'+ minor+ " not fully supported");  }  if (debugFont) {    System.out.println("major=" + major + " minor="+ minor);  }  if (isByteArray) {    top=fontDataAsArray[2];  } else {    top=fontDataAsObject.getByte(2);  }  int count, offsize;  if (isByteArray) {    count=getWord(fontDataAsArray,top,size);    offsize=fontDataAsArray[top + size];  } else {    count=getWord(fontDataAsObject,top,size);    offsize=fontDataAsObject.getByte(top + size);  }  top+=(size + 1);  start=top + (count + 1) * offsize - 1;  if (isByteArray) {    top=start + getWord(fontDataAsArray,top + count * offsize,offsize);  } else {    top=start + getWord(fontDataAsObject,top + count * offsize,offsize);  }  if (isByteArray) {    count=getWord(fontDataAsArray,top,size);    offsize=fontDataAsArray[top + size];  } else {    count=getWord(fontDataAsObject,top,size);    offsize=fontDataAsObject.getByte(top + size);  }  top+=(size + 1);  start=top + (count + 1) * offsize - 1;  int dicStart, dicEnd;  if (isByteArray) {    dicStart=start + getWord(fontDataAsArray,top,offsize);    dicEnd=start + getWord(fontDataAsArray,top + offsize,offsize);  } else {    dicStart=start + getWord(fontDataAsObject,top,offsize);    dicEnd=start + getWord(fontDataAsObject,top + offsize,offsize);  }  final String[] strings=readStringIndex(fontDataAsArray,fontDataAsObject,start,offsize,count);  readGlobalSubRoutines(fontDataAsArray,fontDataAsObject);  decodeDictionary(fontDataAsArray,fontDataAsObject,dicStart,dicEnd,strings);  if (FDSelect != -1) {    if (debugDictionary) {      System.out.println("=============FDSelect====================" + getBaseFontName());    }    int nextDic=FDSelect;    final int format;    if (isByteArray) {      format=getWord(fontDataAsArray,nextDic,1);    } else {      format=getWord(fontDataAsObject,nextDic,1);    }    final int glyphCount;    if (isByteArray) {      glyphCount=getWord(fontDataAsArray,charstrings,2);    } else {      glyphCount=getWord(fontDataAsObject,charstrings,2);    }    fdSelect=new int[glyphCount];    if (format == 0) {      for (int i=0; i < glyphCount; i++) {        if (isByteArray) {          fdSelect[i]=getWord(fontDataAsArray,nextDic + 1 + i,1);        } else {          fdSelect[i]=getWord(fontDataAsObject,nextDic + 1 + i,1);        }      }    } else     if (format == 3) {      final int nRanges;      if (isByteArray) {        nRanges=getWord(fontDataAsArray,nextDic + 1,2);      } else {        nRanges=getWord(fontDataAsObject,nextDic + 1,2);      }      final int[] rangeStarts=new int[nRanges + 1];      final int[] fDicts=new int[nRanges];      for (int i=0; i < nRanges; i++) {        if (isByteArray) {          rangeStarts[i]=getWord(fontDataAsArray,nextDic + 3 + (3 * i),2);          fDicts[i]=getWord(fontDataAsArray,nextDic + 5 + (3 * i),1);        } else {          rangeStarts[i]=getWord(fontDataAsObject,nextDic + 3 + (3 * i),2);          fDicts[i]=getWord(fontDataAsObject,nextDic + 5 + (3 * i),1);        }      }      rangeStarts[rangeStarts.length - 1]=glyphCount;      for (int i=0; i < nRanges; i++) {        for (int j=rangeStarts[i]; j < rangeStarts[i + 1]; j++) {          fdSelect[j]=fDicts[i];        }      }    }    ((T1Glyphs)glyphs).setFDSelect(fdSelect);    nextDic=FDArray;    if (isByteArray) {      count=getWord(fontDataAsArray,nextDic,size);      offsize=fontDataAsArray[nextDic + size];    } else {      count=getWord(fontDataAsObject,nextDic,size);      offsize=fontDataAsObject.getByte(nextDic + size);    }    nextDic+=(size + 1);    start=nextDic + (count + 1) * offsize - 1;    privateDictOffset=new int[count];    privateDictLength=new int[count];    subrs=new int[count];    defaultWidthX=new int[count];    nominalWidthX=new int[count];    for (int i=0; i < count; i++) {      currentFD=i;      privateDictOffset[i]=-1;      privateDictLength[i]=-1;      subrs[i]=-1;      if (isByteArray) {        dicStart=start + getWord(fontDataAsArray,nextDic + (i * offsize),offsize);        dicEnd=start + getWord(fontDataAsArray,nextDic + ((i + 1) * offsize),offsize);      } else {        dicStart=start + getWord(fontDataAsObject,nextDic + (i * offsize),offsize);        dicEnd=start + getWord(fontDataAsObject,nextDic + ((i + 1) * offsize),offsize);      }      decodeDictionary(fontDataAsArray,fontDataAsObject,dicStart,dicEnd,strings);    }    currentFD=-1;    if (debugDictionary) {      System.out.println("=================================" + getBaseFontName());    }  }  top=charstrings;  final int nGlyphs;  if (isByteArray) {    nGlyphs=getWord(fontDataAsArray,top,size);  } else {    nGlyphs=getWord(fontDataAsObject,top,size);  }  glyphs.setGlyphCount(nGlyphs);  if (debugFont) {    System.out.println("nGlyphs=" + nGlyphs);  }  final int[] names=readCharset(charset,nGlyphs,fontDataAsObject,fontDataAsArray);  if (debugFont) {    System.out.println("=======charset===============");    final int count2=names.length;    for (int jj=0; jj < count2; jj++) {      System.out.println(jj + " " + names[jj]);    }    System.out.println("=======Encoding===============");  }  setEncoding(fontDataAsArray,fontDataAsObject,nGlyphs,names);  top=charstrings;  readGlyphs(fontDataAsArray,fontDataAsObject,nGlyphs,names);  for (int i=0; i < privateDictOffset.length; i++) {    currentFD=i;    final int dict=privateDictOffset[i];    if (dict != -1) {      final int dictLength=privateDictLength[i];      decodeDictionary(fontDataAsArray,fontDataAsObject,dict,dict + dictLength,strings);      final int fontLength;      if (isByteArray) {        fontLength=fontDataAsArray.length;      } else {        fontLength=fontDataAsObject.length();      }      if ((subrs[currentFD] != -1) && (subrs[currentFD] < fontLength)) {        top=subrs[currentFD];        final int nSubrs;        if (isByteArray) {          nSubrs=getWord(fontDataAsArray,top,size);        } else {          nSubrs=getWord(fontDataAsObject,top,size);        }        if (nSubrs > 0) {          readSubrs(fontDataAsArray,fontDataAsObject,nSubrs);        }      } else       if (debugFont || debugDictionary) {        System.out.println("Private subroutine out of range");      }    }  }  currentFD=-1;  isFontEmbedded=true;  glyphs.setFontEmbedded(true);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private IClasspathEntry findGwtCodeServerClasspathEntry() throws JavaModelException {  IType type=javaProject.findType(GwtLaunchConfigurationProcessorUtilities.SUPERDEVMODE_CODESERVER_MAIN_TYPE);  if (type == null) {    return null;  }  IPackageFragmentRoot packageFragmentRoot=(IPackageFragmentRoot)type.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);  if (packageFragmentRoot.getKind() == IPackageFragmentRoot.K_BINARY) {    return JavaCore.newLibraryEntry(packageFragmentRoot.getPath(),null,null);  }  return null;}  }
class C{  public String normalizeIdentifier(String vendorName,String identifier){  if (identifier == null)   return identifier;  int maxlen=m_interfaces.get(getDBVendorID(vendorName)).getDBMaxIdentifierLength();  if (identifier.length() <= maxlen)   return identifier;  if (identifier.contains("_")) {    String prefix=identifier.substring(0,identifier.indexOf("_"));    String suffix=identifier.substring(identifier.indexOf("_"),identifier.length()).replaceAll("[AEIOUaeiou]","");    identifier=new StringBuffer(prefix).append(suffix).toString();  } else {    identifier=identifier.replaceAll("[AEIOUaeiou]","");  }  if (identifier.length() <= maxlen)   return identifier;  identifier=identifier.replaceAll("_","");  if (identifier.length() <= maxlen)   return identifier;  identifier=identifier.substring(0,maxlen + 1);  return identifier;}  }
class C{  public void testGetTrustedCertificate(){  Certificate cert=new MyCertificate("TEST",new byte[10]);  KeyStore.TrustedCertificateEntry ksTCE=new KeyStore.TrustedCertificateEntry(cert);  assertEquals("Incorrect certificate",cert,ksTCE.getTrustedCertificate());}  }
class C{  public BooleanContainer(){  on=false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:10.963 -0500",hash_original_method="117CE161431F2ECDED077AD7F7467ADD",hash_generated_method="0A6C79D503436DFDA287DA5C46762097") public final void offsetLocation(float deltaX,float deltaY){  nativeOffsetLocation(mNativePtr,deltaX,deltaY);}  }
class C{  public void configure() throws CoreException {  if (DEBUG) {    System.out.println("Adding findbugs to the project build spec.");  }  addToBuildSpec(FindbugsPlugin.BUILDER_ID);}  }
class C{  private void push2(long typeInfo){  push((int)(typeInfo & 0xFFFFFF));  typeInfo>>>=32;  if (typeInfo != 0) {    push((int)(typeInfo & 0xFFFFFF));  }}  }
class C{  private SoftValue(V value,K key,ReferenceQueue<? super V> queue){  super(value,queue);  this.key=key;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public Response onCommand(POP3Session session,Request request){  String parameters=request.getArgument();  if (session.getHandlerState() == POP3Session.AUTHENTICATION_READY && parameters != null) {    session.setUser(parameters);    session.setHandlerState(POP3Session.AUTHENTICATION_USERSET);    return POP3Response.OK;  } else {    return POP3Response.ERR;  }}  }
class C{  public void selectTable1Column(Index column){  table1Columns.add(column);}  }
class C{  public String sortTipText(){  return "Whether to sort the labels alphabetically.";}  }
class C{  private void jbInit() throws Exception {  statusLine.setBorder(BorderFactory.createEtchedBorder());  statusLine.setText("statusLine");  statusLine.setOpaque(false);  statusDB.setForeground(Color.blue);  statusDB.setBorder(BorderFactory.createEtchedBorder());  statusDB.setText("#");  statusDB.setOpaque(false);  statusDB.addMouseListener(new StatusBar_mouseAdapter(this));  this.setLayout(mainLayout);  infoLine.setFont(AdempierePLAF.getFont_Label());  infoLine.setBorder(BorderFactory.createLineBorder(AdempierePLAF.getSecondary2()));  infoLine.setHorizontalAlignment(SwingConstants.CENTER);  infoLine.setHorizontalTextPosition(SwingConstants.CENTER);  infoLine.setText("info");  mainLayout.setHgap(2);  mainLayout.setVgap(2);  this.add(statusLine,BorderLayout.CENTER);  this.add(statusDB,BorderLayout.EAST);  this.add(infoLine,BorderLayout.NORTH);}  }
class C{  int lastItemDisplayed(){  int n=itemsInWindow();  return (Math.min(items.size() - 1,(vsb.getValue() + n) - 1));}  }
class C{  @Override synchronized void doAbortInternal(){  for (  MySQLConnection c : this.liveConnections.values()) {    try {      c.abortInternal();    } catch (    SQLException e) {    }  }  if (!this.isClosed) {    this.balancer.destroy();    if (this.connectionGroup != null) {      this.connectionGroup.closeConnectionProxy(this);    }  }  this.liveConnections.clear();  this.connectionsToHostsMap.clear();}  }
class C{  public final void ensureCapacity(int minimumCapacity){  if (minimumCapacity <= _buffer.length) {    return;  }  expandCapacity(minimumCapacity);}  }
class C{  public int read(char[] buffer,int offset,int length){  int readLength=0;  while (length > 0) {    if (_length <= _offset) {      if (_head == null)       return readLength == 0 ? -1 : readLength;      TempCharBuffer next=_head.getNext();      if (_isFree)       TempCharBuffer.free(_head);      _head=next;      if (_head == null)       return readLength == 0 ? -1 : readLength;      _buffer=_head.buffer();      _length=_head.getLength();      _offset=0;    }    int sublen=_length - _offset;    if (length < sublen)     sublen=length;    System.arraycopy(_buffer,_offset,buffer,offset,sublen);    _offset+=sublen;    offset+=sublen;    length-=sublen;    readLength+=sublen;  }  return readLength;}  }
class C{  public void postEvent(final AWTEvent event){  LWToolkit.postEvent(event);}  }
class C{  public int elementAt(int i){  if (i < m_blocksize)   return m_map0[i];  return m_map[i >>> m_SHIFT][i & m_MASK];}  }
class C{  public void initOptions(){  for (int i=0, size=PANE_ITEMS_LIST.size(); i < size; i++) {    PaneItem currentItem=PANE_ITEMS_LIST.get(i);    currentItem.initOptions();  }}  }
class C{  public boolean imageUpdate(Image img,int infoflags,int x,int y,int w,int h){  Icon iconDisplayed=null;  if (!model.isEnabled()) {    if (model.isSelected()) {      iconDisplayed=getDisabledSelectedIcon();    } else {      iconDisplayed=getDisabledIcon();    }  } else   if (model.isPressed() && model.isArmed()) {    iconDisplayed=getPressedIcon();  } else   if (isRolloverEnabled() && model.isRollover()) {    if (model.isSelected()) {      iconDisplayed=getRolloverSelectedIcon();    } else {      iconDisplayed=getRolloverIcon();    }  } else   if (model.isSelected()) {    iconDisplayed=getSelectedIcon();  }  if (iconDisplayed == null) {    iconDisplayed=getIcon();  }  if (iconDisplayed == null || !SwingUtilities.doesIconReferenceImage(iconDisplayed,img)) {    return false;  }  return super.imageUpdate(img,infoflags,x,y,w,h);}  }
class C{  public DiamondFigure(){  this(0,0,0,0);}  }
class C{  public static File createDefaultImageFile() throws IOException {  String timeStamp=new SimpleDateFormat("yyyyMMdd_HHmmss",Locale.getDefault()).format(new Date());  String imageFileName="JPEG_" + timeStamp + ".jpg";  File storageDir=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);  if (!storageDir.exists()) {    storageDir.mkdirs();  }  return new File(storageDir,imageFileName);}  }
class C{  public void testNewMessageToFullBufferWhileTransferring(){  int m3Size=BUFFER_SIZE - 1;  int m1Size=BUFFER_SIZE / 2;  Message m1=new Message(h1,h3,msgId1,m1Size);  h1.createNewMessage(m1);  Message m2=new Message(h1,h4,msgId2,BUFFER_SIZE / 2);  h1.createNewMessage(m2);  checkCreates(2);  h3.connect(h1);  updateAllNodes();  assertTrue(mc.next());  assertEquals(mc.TYPE_START,mc.getLastType());  clock.advance(1);  updateAllNodes();  assertFalse(mc.next());  Message m3=new Message(h1,h4,msgId3,m3Size);  h1.createNewMessage(m3);  assertTrue(mc.next());  assertEquals(mc.TYPE_DELETE,mc.getLastType());  assertTrue(mc.getLastDropped());  assertEquals(msgId2,mc.getLastMsg().getId());  assertTrue(mc.next());  assertEquals(mc.TYPE_CREATE,mc.getLastType());  assertEquals(msgId3,mc.getLastMsg().getId());  assertTrue(h1.getBufferOccupancy() > 100);  assertFalse(mc.next());  clock.advance((m1Size / TRANSMIT_SPEED) + 1);  updateAllNodes();  assertTrue(mc.next());  assertEquals(mc.TYPE_RELAY,mc.getLastType());  assertEquals(msgId1,mc.getLastMsg().getId());  assertTrue(mc.next());  assertEquals(mc.TYPE_DELETE,mc.getLastType());  assertTrue(mc.getLastDropped());  assertEquals(msgId1,mc.getLastMsg().getId());  assertTrue(h1.getBufferOccupancy() < 100);  assertTrue(mc.next());  assertEquals(mc.TYPE_START,mc.getLastType());  assertEquals(msgId3,mc.getLastMsg().getId());  assertFalse(mc.next());}  }
class C{  public AllocationMethodAdapter(MethodVisitor mv,String recorderClass,String recorderMethod){  super(Opcodes.ASM5,mv);  this.recorderClass=recorderClass;  this.recorderMethod=recorderMethod;}  }
class C{  public float distanceTo(AnimatableValue other){  return 0f;}  }
class C{  public String encode(String pString){  return soundex(pString);}  }
class C{  public void quit() throws IOException, GdbException, InterruptedException {  try {    sendCommand("quit",false);  }  finally {    stop();  }}  }
class C{  public boolean isCompleted(){  return isCompleted;}  }
class C{  final long fn(long v,long x){  return v + x;}  }
class C{  void markValid(){  prevVal.value(val.op(),val.value(),val.hasWriteValue(),val.hasReadValue());}  }
class C{  private StaticClassUtil(){  instanceNotAllowed(getClass());}  }
class C{  public PullUpDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.PULL_UP,project,description,comment,arguments,flags);}  }
class C{  void deleteVariablePressed(int row){  if (row != _curVariableRowNumber && alreadyEditingActionOrVariable()) {    return;  }  if (_variableList.size() < 1 && !_suppressReminder) {    javax.swing.JOptionPane.showMessageDialog(editConditionalFrame,rbx.getString("Warn3"),Bundle.getMessage("WarningTitle"),javax.swing.JOptionPane.WARNING_MESSAGE);  }  _variableList.remove(row);  _variableTableModel.fireTableRowsDeleted(row,row);  makeAntecedent();  cleanUpVariable();  if (editConditionalFrame != null) {    editConditionalFrame.setVisible(true);  }  _showReminder=true;}  }
class C{  public void mouseClicked(MouseEvent e){  if (isVisible())   e.consume();}  }
class C{  public SegmentReader(SegmentCommitInfo si,IOContext context) throws IOException {  this.si=si;  this.isNRT=false;  core=new SegmentCoreReaders(si.info.dir,si,context);  segDocValues=new SegmentDocValues();  boolean success=false;  final Codec codec=si.info.getCodec();  try {    if (si.hasDeletions()) {      liveDocs=codec.liveDocsFormat().readLiveDocs(directory(),si,IOContext.READONCE);    } else {      assert si.getDelCount() == 0;      liveDocs=null;    }    numDocs=si.info.maxDoc() - si.getDelCount();    fieldInfos=initFieldInfos();    docValuesProducer=initDocValuesProducer();    success=true;  }  finally {    if (!success) {      doClose();    }  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("InventoryCountSet"))     p_InventoryCountSetZero="Z".equals(para[i].getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_M_Inventory_ID=getRecord_ID();}  }
class C{  public List<File> writeJUnitTestFiles(List<List<ExecutableSequence>> seqPartition){  List<File> ret=new ArrayList<>();  NameGenerator classNameGen=new NameGenerator(masterTestClassName);  createOutputDir();  for (  List<ExecutableSequence> partition : seqPartition) {    ret.add(writeTestClass(partition,classNameGen.next()));  }  testClassCount=classNameGen.nameCount();  return ret;}  }
class C{  protected void doLog(Level level,String msg,String cls,String method,int lineno){  append(m_DateFormat.format(new Date()) + " " + cls+ " "+ method+ m_LineFeed+ level+ ": "+ msg+ m_LineFeed);}  }
class C{  public VmEvent(MonitoredVm vm){  super(vm);}  }
class C{  public StatTrackingEventListener(long startTime,String prefix){  this(startTime,prefix,null,false,null);}  }
class C{  @Override protected void initData(){  this.surfaceLocation=new int[2];  this.valueSv.getLocationOnScreen(this.surfaceLocation);  this.reset();  this.initAnimator();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void testMergeOneFilterIntoDocumentWithMultipleFilters() throws Exception {  String srcXml="<web-app>" + "  <filter>" + "    <filter-name>f1</filter-name>"+ "    <filter-class>fclass1</filter-class>"+ "  </filter>"+ "  <filter>"+ "    <filter-name>f2</filter-name>"+ "    <filter-class>fclass2</filter-class>"+ "  </filter>"+ "  <filter>"+ "    <filter-name>f3</filter-name>"+ "    <filter-class>fclass3</filter-class>"+ "  </filter>"+ "</web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <filter>" + "    <filter-name>f4</filter-name>"+ "    <filter-class>fclass4</filter-class>"+ "  </filter>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.mergeFilters(mergeWebXml);  List<String> filterNames=WebXmlUtils.getFilterNames(srcWebXml);  assertEquals(4,filterNames.size());  assertEquals("f1",filterNames.get(0));  assertEquals("f2",filterNames.get(1));  assertEquals("f3",filterNames.get(2));  assertEquals("f4",filterNames.get(3));}  }
class C{  void addPlayers(List<Player> players){  for (  Player player : players) {    if (!addPlayer(player)) {      logger.error("Added player is not a member even though she should be. Player: " + player.getName(),new Throwable());    }  }}  }
class C{  public void waitForEndTurn(final TripleAFrame frame,final IPlayerBridge bridge){  m_endTurnPanel.waitForEndTurn(frame,bridge);}  }
class C{  public void ensureParsed() throws ProtocolException {  try {    maybeParseHeader();    maybeParseTransactions();  } catch (  LazyParseException e) {    if (e.getCause() instanceof ProtocolException)     throw (ProtocolException)e.getCause();    throw new ProtocolException(e);  }}  }
class C{  FilterNode filterNotExistsWithVars(final String anonymousVar,final String... varNames){  final StatementPatternNode[] statementPatterns=stmtPatternsWithVars(varNames);  final VarNode askVar=new VarNode(anonymousVar);  askVar.setAnonymous(true);  final FilterNode fn=(FilterNode)new Helper(){{      tmp=filter(exists(askVar,joinGroupNode((Object[])statementPatterns)));    }  }.getTmp();  return (FilterNode)resolveVEs(fn);}  }
class C{  private void recordStoragePoolEvent(OperationTypeEnum opType,String description,URI storagePool){  String evType;  evType=opType.getEvType(true);  RecordableBourneEvent event=new RecordableBourneEvent(evType,null,URI.create("ViPR-User"),null,null,EVENT_SERVICE_TYPE,storagePool,description,System.currentTimeMillis(),"",null,RecordType.Event.name(),EVENT_SERVICE_SOURCE,"","");  try {    _evtMgr.recordEvents(event);  } catch (  Exception ex) {    _log.error("Failed to record event. Event description: {}. Error: {}.",description,ex);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:22.347 -0500",hash_original_method="4B8FAF3FE0CCE05E8194125D3D22989E",hash_generated_method="51D7D070A8A270463349F6347712EF00") public Holder(GeneralNames entityName){  this.entityName=entityName;}  }
class C{  @Override public ICardinality merge(ICardinality... estimators) throws CardinalityMergeException {  HyperLogLogPlus merged=new HyperLogLogPlus(p,sp);  merged.addAll(this);  if (estimators == null) {    return merged;  }  for (  ICardinality estimator : estimators) {    if (!(estimator instanceof HyperLogLogPlus)) {      throw new HyperLogLogPlusMergeException("Cannot merge estimators of different class");    }    HyperLogLogPlus hll=(HyperLogLogPlus)estimator;    merged.addAll(hll);  }  return merged;}  }
class C{  public static void invokeMain(final String className,final String[] args){  try {    Class.forName(className).getMethod("main",new Class[]{String[].class}).invoke(null,new Object[]{args});  } catch (  Exception e) {    InternalError error=new InternalError("Failed to invoke main method");    error.initCause(e);    throw error;  }}  }
class C{  @Override public int hashCode(){  if (scanResult == null) {    return 0;  }  return scanResult.hashCode();}  }
class C{  public int findFirstCompletelyVisibleItemPosition(){  final View child=findOneVisibleChild(0,getChildCount(),true,false);  return child == null ? NO_POSITION : getPosition(child);}  }
class C{  public UpdateClause addAssignment(Expression expression){  assignments.add(new Assignment(expression));  return this;}  }
class C{  public int newLocal(final Type type){  Object t;switch (type.getSort()) {case Type.BOOLEAN:case Type.CHAR:case Type.BYTE:case Type.SHORT:case Type.INT:    t=Opcodes.INTEGER;  break;case Type.FLOAT:t=Opcodes.FLOAT;break;case Type.LONG:t=Opcodes.LONG;break;case Type.DOUBLE:t=Opcodes.DOUBLE;break;case Type.ARRAY:t=type.getDescriptor();break;default :t=type.getInternalName();break;}int local=newLocalMapping(type);setLocalType(local,type);setFrameLocal(local,t);return local;}  }
class C{  public void remove(Value key){  checkSizeRemove();  int index=getIndex(key);  int plus=1;  do {    Value k=keys[index];    if (k == null) {      return;    } else     if (k == ValueNull.DELETED) {    } else     if (k.equals(key)) {      keys[index]=ValueNull.DELETED;      values[index]=null;      deletedCount++;      size--;      return;    }    index=(index + plus++) & mask;  } while (plus <= len);}  }
class C{  public void dumpNPCs(){  DBTransaction transaction=TransactionPool.get().beginWork();  try {    dumpNPCs(transaction);    TransactionPool.get().commit(transaction);  } catch (  SQLException e) {    logger.error(e,e);    TransactionPool.get().rollback(transaction);  }}  }
class C{  public CqlScript(String cqlScriptSource){  this.cqlStatements=parse(cqlScriptSource);  this.resource=null;}  }
class C{  public int groupCount(){  return memregs;}  }
class C{  public static String formatTime(Date date){  TIME_FORMAT.get().setTimeZone(getPreferredTimeZone());  return TIME_FORMAT.get().format(date);}  }
class C{  @RequestMapping(value=POST_LESSON_TO_COURSE,method=RequestMethod.POST) @ResponseStatus(HttpStatus.CREATED) public HttpEntity<?> addLesson(@PathVariable Long courseId,@RequestBody Lesson input){  Lesson lesson=this.lessonService.addLesson(courseId,input);  HttpHeaders httpHeaders=new HttpHeaders();  String href=ControllerLinkBuilder.linkTo(ControllerLinkBuilder.methodOn(LessonRestController.class,lesson.getId()).getLesson(lesson.getId())).withSelfRel().getHref();  httpHeaders.setLocation(ServletUriComponentsBuilder.fromPath(href).build().toUri());  return new ResponseEntity<>(httpHeaders,HttpStatus.CREATED);}  }
class C{  public SAXNotSupportedException(){  super();}  }
class C{  public void run(){  LoggingUtils.getEvoLogger().info("* Connecting to master process on port " + Properties.PROCESS_COMMUNICATION_PORT);  ExternalProcessUtilities util=new ExternalProcessUtilities();  if (!util.connectToMainProcess()) {    throw new RuntimeException("Could not connect to master process on port " + Properties.PROCESS_COMMUNICATION_PORT);  }  analyzeCoverage();  util.informSearchIsFinished(null);}  }
class C{  private String[] cleanTextForSRT(Caption current){  String[] lines;  String text=current.content;  lines=text.split("<br />");  for (int i=0; i < lines.length; i++) {    lines[i]=lines[i].replaceAll("<.*?>","");  }  return lines;}  }
class C{  public SQLTransactionRollbackException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public void enqueueDownloadManagerRequest(final DownloadInfo info,boolean notifyCompleted){  EnqueueDownloadRequestTask task=new EnqueueDownloadRequestTask(info);  task.execute(notifyCompleted);}  }
class C{  public NegateValidator(@NonNull final CharSequence errorMessage,@NonNull final Validator<Type> validator){  super(errorMessage);  setValidator(validator);}  }
class C{  public OperationPendingException(String message,OperationPendingExceptionBean bean){  super(message,bean);  this.bean=bean;}  }
class C{  public Resources(String... values){  super(values);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  void checkCovering(S2Region region,S2CellUnion covering,boolean checkTight,S2CellId id){  if (!id.isValid()) {    for (int face=0; face < 6; ++face) {      checkCovering(region,covering,checkTight,S2CellId.fromFacePosLevel(face,0,0));    }    return;  }  if (!region.mayIntersect(new S2Cell(id))) {    if (checkTight) {      assertTrue(!covering.intersects(id));    }  } else   if (!covering.contains(id)) {    assertTrue(!region.contains(new S2Cell(id)));    assertTrue(!id.isLeaf());    S2CellId end=id.childEnd();    for (S2CellId child=id.childBegin(); !child.equals(end); child=child.next()) {      checkCovering(region,covering,checkTight,child);    }  }}  }
class C{  public String completeIt(){  if (!m_justPrepared) {    String status=prepareIt();    if (!DocAction.STATUS_InProgress.equals(status))     return status;  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_COMPLETE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  MInOutConfirm[] confirmations=getConfirmations(true);  for (int i=0; i < confirmations.length; i++) {    MInOutConfirm confirm=confirmations[i];    if (!confirm.isProcessed()) {      if (MInOutConfirm.CONFIRMTYPE_CustomerConfirmation.equals(confirm.getConfirmType()))       continue;      m_processMsg="Open @M_InOutConfirm_ID@: " + confirm.getConfirmTypeName() + " - "+ confirm.getDocumentNo();      return DocAction.STATUS_InProgress;    }  }  if (!isApproved())   approveIt();  log.info(toString());  StringBuffer info=new StringBuffer();  Set<Integer> inOutOrders=new TreeSet<Integer>();  MInOutLine[] lines=getLines(true);  for (int lineIndex=0; lineIndex < lines.length; lineIndex++) {    MInOutLine sLine=lines[lineIndex];    MProduct product=sLine.getProduct();    String MovementType=getMovementType();    BigDecimal Qty=sLine.getMovementQty();    if (MovementType.charAt(1) == '-')     Qty=Qty.negate();    BigDecimal QtySO=Env.ZERO;    BigDecimal QtyPO=Env.ZERO;    MRMALine rmaLine=null;    if (sLine.getM_RMALine_ID() > 0) {      rmaLine=new MRMALine(getCtx(),sLine.getM_RMALine_ID(),get_TrxName());      if (rmaLine.getM_InOutLine_ID() > 0) {        I_M_InOutLine ioLine=rmaLine.getM_InOutLine();        if (ioLine.getC_OrderLine_ID() > 0) {          sLine.setC_OrderLine_ID(ioLine.getC_OrderLine_ID());          sLine.saveEx();        }      }    }    MOrderLine oLine=null;    if (sLine.getC_OrderLine_ID() != 0) {      oLine=new MOrderLine(getCtx(),sLine.getC_OrderLine_ID(),get_TrxName());      inOutOrders.add(oLine.getC_Order_ID());      log.fine("OrderLine - Reserved=" + oLine.getQtyReserved() + ", Delivered="+ oLine.getQtyDelivered());      if ((isSOTrx() && MInOut.MOVEMENTTYPE_CustomerShipment.equals(MovementType) && sLine.getMovementQty().signum() > 0) || (isSOTrx() && MInOut.MOVEMENTTYPE_CustomerReturns.equals(MovementType) && sLine.getMovementQty().signum() < 0))       QtySO=sLine.getMovementQty().abs().negate(); else       if ((isSOTrx() && MInOut.MOVEMENTTYPE_CustomerShipment.equals(MovementType) && sLine.getMovementQty().signum() < 0) || (isSOTrx() && MInOut.MOVEMENTTYPE_CustomerReturns.equals(MovementType) && sLine.getMovementQty().signum() > 0))       QtySO=sLine.getMovementQty().abs(); else       if ((!isSOTrx() && MInOut.MOVEMENTTYPE_VendorReceipts.equals(MovementType) && sLine.getMovementQty().signum() > 0) || (!isSOTrx() && MInOut.MOVEMENTTYPE_VendorReturns.equals(MovementType) && sLine.getMovementQty().signum() < 0))       QtyPO=sLine.getMovementQty().abs().negate(); else       if ((!isSOTrx() && MInOut.MOVEMENTTYPE_VendorReceipts.equals(MovementType) && sLine.getMovementQty().signum() < 0) || (!isSOTrx() && MInOut.MOVEMENTTYPE_VendorReturns.equals(MovementType) && sLine.getMovementQty().signum() > 0))       QtyPO=sLine.getMovementQty().abs();    }    log.info("Line=" + sLine.getLine() + " - Qty="+ sLine.getMovementQty());    if (product != null && product.isStocked()) {      if (!isReversal()) {        checkMaterialPolicy(sLine);      }      log.fine("Material Transaction");      MTransaction mtrx=null;      boolean sameWarehouse=true;      int reservationAttributeSetInstance_ID=0;      if (oLine != null) {        reservationAttributeSetInstance_ID=oLine.getM_AttributeSetInstance_ID();        sameWarehouse=oLine.getM_Warehouse_ID() == getM_Warehouse_ID();      }      if (sLine.getM_AttributeSetInstance_ID() == 0) {        List<MInOutLineMA> mas=MInOutLineMA.get(getCtx(),sLine.getM_InOutLine_ID(),get_TrxName());        for (        MInOutLineMA ma : mas) {          BigDecimal QtyMA=ma.getMovementQty();          if (MovementType.charAt(1) == '-')           QtyMA=QtyMA.negate();          BigDecimal reservedDiff=Env.ZERO;          BigDecimal orderedDiff=Env.ZERO;          if (sLine.getC_OrderLine_ID() != 0) {            if ((isSOTrx() && MInOut.MOVEMENTTYPE_CustomerShipment.equals(MovementType) && ma.getMovementQty().signum() > 0) || (isSOTrx() && MInOut.MOVEMENTTYPE_CustomerReturns.equals(MovementType) && ma.getMovementQty().signum() < 0))             reservedDiff=ma.getMovementQty().abs().negate(); else             if ((isSOTrx() && MInOut.MOVEMENTTYPE_CustomerShipment.equals(MovementType) && ma.getMovementQty().signum() < 0) || (isSOTrx() && MInOut.MOVEMENTTYPE_CustomerReturns.equals(MovementType) && ma.getMovementQty().signum() > 0))             reservedDiff=ma.getMovementQty().abs(); else             if ((!isSOTrx() && MInOut.MOVEMENTTYPE_VendorReceipts.equals(MovementType) && ma.getMovementQty().signum() > 0) || (!isSOTrx() && MInOut.MOVEMENTTYPE_VendorReturns.equals(MovementType) && ma.getMovementQty().signum() < 0))             orderedDiff=ma.getMovementQty().abs().negate(); else             if ((!isSOTrx() && MInOut.MOVEMENTTYPE_VendorReceipts.equals(MovementType) && ma.getMovementQty().signum() < 0) || (!isSOTrx() && MInOut.MOVEMENTTYPE_VendorReturns.equals(MovementType) && ma.getMovementQty().signum() > 0))             orderedDiff=ma.getMovementQty().abs();          }          if (!MStorage.add(getCtx(),getM_Warehouse_ID(),sLine.getM_Locator_ID(),sLine.getM_Product_ID(),ma.getM_AttributeSetInstance_ID(),reservationAttributeSetInstance_ID,QtyMA,sameWarehouse ? reservedDiff : Env.ZERO,sameWarehouse ? orderedDiff : Env.ZERO,get_TrxName())) {            m_processMsg="Cannot correct Inventory (MA)";            return DocAction.STATUS_Invalid;          }          if (!sameWarehouse) {            MWarehouse wh=MWarehouse.get(getCtx(),oLine.getM_Warehouse_ID());            if (!MStorage.add(getCtx(),oLine.getM_Warehouse_ID(),wh.getDefaultLocator().getM_Locator_ID(),sLine.getM_Product_ID(),ma.getM_AttributeSetInstance_ID(),reservationAttributeSetInstance_ID,Env.ZERO,reservedDiff,orderedDiff,get_TrxName())) {              m_processMsg="Cannot correct Inventory (MA) in order warehouse";              return DocAction.STATUS_Invalid;            }          }          mtrx=new MTransaction(getCtx(),sLine.getAD_Org_ID(),MovementType,sLine.getM_Locator_ID(),sLine.getM_Product_ID(),ma.getM_AttributeSetInstance_ID(),QtyMA,getMovementDate(),get_TrxName());          mtrx.setM_InOutLine_ID(sLine.getM_InOutLine_ID());          if (!mtrx.save()) {            m_processMsg="Could not create Material Transaction (MA)";            return DocAction.STATUS_Invalid;          }        }      }      if (mtrx == null) {        BigDecimal reservedDiff=Env.ZERO;        BigDecimal orderedDiff=Env.ZERO;        if (sLine.getC_OrderLine_ID() != 0 && sameWarehouse) {          if (isSOTrx())           reservedDiff=QtySO; else           orderedDiff=QtyPO;        }        if (!MStorage.add(getCtx(),getM_Warehouse_ID(),sLine.getM_Locator_ID(),sLine.getM_Product_ID(),sLine.getM_AttributeSetInstance_ID(),reservationAttributeSetInstance_ID,Qty,reservedDiff,orderedDiff,get_TrxName())) {          m_processMsg="Cannot correct Inventory";          return DocAction.STATUS_Invalid;        }        if (!sameWarehouse) {          MWarehouse wh=MWarehouse.get(getCtx(),oLine.getM_Warehouse_ID());          if (!MStorage.add(getCtx(),oLine.getM_Warehouse_ID(),wh.getDefaultLocator().getM_Locator_ID(),sLine.getM_Product_ID(),sLine.getM_AttributeSetInstance_ID(),reservationAttributeSetInstance_ID,Env.ZERO,QtySO.negate(),QtyPO.negate(),get_TrxName())) {            m_processMsg="Cannot correct Inventory";            return DocAction.STATUS_Invalid;          }        }        mtrx=new MTransaction(getCtx(),sLine.getAD_Org_ID(),MovementType,sLine.getM_Locator_ID(),sLine.getM_Product_ID(),sLine.getM_AttributeSetInstance_ID(),Qty,getMovementDate(),get_TrxName());        mtrx.setM_InOutLine_ID(sLine.getM_InOutLine_ID());        if (!mtrx.save()) {          m_processMsg=CLogger.retrieveErrorString("Could not create Material Transaction");          return DocAction.STATUS_Invalid;        }      }    }    if (product != null && oLine != null && isSOTrx())     oLine.setQtyReserved(oLine.getQtyReserved().add(QtySO)); else     if (product != null && oLine != null && !isSOTrx())     oLine.setQtyReserved(oLine.getQtyReserved().add(QtyPO));    if (oLine != null) {      if (isSOTrx() || sLine.getM_Product_ID() == 0) {        oLine.setQtyDelivered(oLine.getQtyDelivered().subtract(Qty));      }      oLine.setDateDelivered(getMovementDate());      if (!oLine.save()) {        m_processMsg="Could not update Order Line";        return DocAction.STATUS_Invalid;      } else       log.fine("OrderLine -> Reserved=" + oLine.getQtyReserved() + ", Delivered="+ oLine.getQtyDelivered());    } else     if (rmaLine != null) {      if (isSOTrx()) {        rmaLine.setQtyDelivered(rmaLine.getQtyDelivered().add(Qty));      } else {        rmaLine.setQtyDelivered(rmaLine.getQtyDelivered().subtract(Qty));      }      if (!rmaLine.save()) {        m_processMsg="Could not update RMA Line";        return DocAction.STATUS_Invalid;      }    }    if (!isSOTrx() && sLine.getM_Product_ID() != 0 && !isReversal()) {      BigDecimal matchQty=sLine.getMovementQty();      if (MovementType.charAt(1) == '-')       matchQty=matchQty.negate();      MInvoiceLine iLine=MInvoiceLine.getOfInOutLine(sLine);      if (iLine != null && iLine.getM_Product_ID() != 0) {        if (matchQty.compareTo(iLine.getQtyInvoiced()) > 0)         matchQty=iLine.getQtyInvoiced();        MMatchInv[] matches=MMatchInv.get(getCtx(),sLine.getM_InOutLine_ID(),iLine.getC_InvoiceLine_ID(),get_TrxName());        if (matches == null || matches.length == 0) {          MMatchInv inv=new MMatchInv(iLine,getMovementDate(),matchQty);          if (sLine.getM_AttributeSetInstance_ID() != iLine.getM_AttributeSetInstance_ID()) {            iLine.setM_AttributeSetInstance_ID(sLine.getM_AttributeSetInstance_ID());            iLine.saveEx();            inv.setM_AttributeSetInstance_ID(sLine.getM_AttributeSetInstance_ID());          }          boolean isNewMatchInv=false;          if (inv.get_ID() == 0)           isNewMatchInv=true;          if (!inv.save(get_TrxName())) {            m_processMsg=CLogger.retrieveErrorString("Could not create Inv Matching");            return DocAction.STATUS_Invalid;          }          if (isNewMatchInv)           addDocsPostProcess(inv);        }      }      if (sLine.getC_OrderLine_ID() != 0) {        log.fine("PO Matching");        MMatchPO po=MMatchPO.create(null,sLine,getMovementDate(),matchQty);        boolean isNewMatchPO=false;        if (po.get_ID() == 0)         isNewMatchPO=true;        if (!po.save()) {          m_processMsg="Could not create PO Matching";          return DocAction.STATUS_Invalid;        }        if (isNewMatchPO)         addDocsPostProcess(po);        if (oLine != null && oLine.getM_AttributeSetInstance_ID() == 0 && sLine.getMovementQty().compareTo(oLine.getQtyOrdered()) == 0) {          oLine.setM_AttributeSetInstance_ID(sLine.getM_AttributeSetInstance_ID());          oLine.save(get_TrxName());        }      } else {        if (iLine != null && iLine.getC_OrderLine_ID() != 0) {          log.fine("PO(Inv) Matching");          MMatchPO po=MMatchPO.create(iLine,sLine,getMovementDate(),matchQty);          boolean isNewMatchPO=false;          if (po.get_ID() == 0)           isNewMatchPO=true;          if (!po.save(get_TrxName())) {            m_processMsg="Could not create PO(Inv) Matching";            return DocAction.STATUS_Invalid;          }          if (isNewMatchPO)           addDocsPostProcess(po);          oLine=new MOrderLine(getCtx(),po.getC_OrderLine_ID(),get_TrxName());          if (oLine != null && oLine.getM_AttributeSetInstance_ID() == 0 && sLine.getMovementQty().compareTo(oLine.getQtyOrdered()) == 0) {            oLine.setM_AttributeSetInstance_ID(sLine.getM_AttributeSetInstance_ID());            oLine.save(get_TrxName());          }        }      }    }  }  MInOut counter=createCounterDoc();  if (counter != null)   info.append(" - @CounterDoc@: @M_InOut_ID@=").append(counter.getDocumentNo());  MInOut dropShipment=createDropShipment();  if (dropShipment != null)   info.append(" - @DropShipment@: @M_InOut_ID@=").append(dropShipment.getDocumentNo());  String valid=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_COMPLETE);  if (valid != null) {    m_processMsg=valid;    return DocAction.STATUS_Invalid;  }  setDefiniteDocumentNo();  if (inOutOrders.size() > 0) {    MOrder order;    for (Iterator<Integer> it=inOutOrders.iterator(); it.hasNext(); ) {      order=new MOrder(getCtx(),it.next().intValue(),get_TrxName());      try {        order.updateIsDelivered();      } catch (      SQLException ee) {        log.warning("Could not update isDelivered flag on order " + order.getDocumentNo() + " : "+ ee.getMessage());      }      order.saveEx(get_TrxName());    }  }  m_processMsg=info.toString();  setProcessed(true);  setDocAction(DOCACTION_Close);  return DocAction.STATUS_Completed;}  }
class C{  public void uninstall(PTQuery query){  QueryAdvice advice=installedQueries.remove(query);  if (advice != null) {    PivotTracingCommand.Builder b=PivotTracingCommand.newBuilder();    b.getUpdateBuilder().addAllRemove(advice.getAdviceIds());    PubSub.publish(PivotTracingConfig.COMMANDS_TOPIC,b.build());    subscriber().unsubscribeAll(advice.getQueryId());  }}  }
class C{  @Override public void relocate(){  int w=555, h=235;  int x=(this.getWidth() - w) / 2, y=(this.getHeight() - h) / 2;  archiveScrollPane.setLocation(x,y);  addArchiveButton.setLocation(x + 435,y + 10);  removeArchiveButton.setLocation(x + 435,y + 40);  encodingLabel.setLocation(x,y + 220);  encodingField.setLocation(x + 210,y + 220);  surrogatePanel.setLocation(x + 415,y + 85);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.190 -0500",hash_original_method="B0C8497AF8D8E800E41ED12D1C4B68D2",hash_generated_method="01779E7563CC9D1C10FBB738A02AEB08") public void toggleInverseFillType(){}  }
class C{  public void showHistory(){  JList list;  ListSelectorDialog dialog;  list=new JList(m_History);  dialog=new ListSelectorDialog(m_Parent,list);  if (dialog.showDialog() == ListSelectorDialog.APPROVE_OPTION) {    if (list.getSelectedValue() != null) {      setQuery(list.getSelectedValue().toString());    }  }  setButtons();}  }
class C{  synchronized public String toString(){  final StringBuilder sb=new StringBuilder();  sb.append("{");  final Iterator<IHistoryEntry<T>> itr=iterator();  int n=0;  while (itr.hasNext()) {    final IHistoryEntry<T> entry=itr.next();    sb.append("(" + entry.getValue() + ","+ entry.getCount()+ ", "+ new Date(entry.lastModified())+ ")");    if (itr.hasNext())     sb.append(",");    n++;  }  final T average=getAverage();  sb.append("},average=" + average + ",n="+ n);  return sb.toString();}  }
class C{  public void placeButtonCommands(Command[] cmds){  buttonCommands=cmds;  Container buttonArea;  if (getUIManager().isThemeConstant("dlgCommandGridBool",false)) {    buttonArea=new Container(new GridLayout(1,cmds.length));  } else {    buttonArea=new Container(new FlowLayout(CENTER));  }  buttonArea.setUIID("DialogCommandArea");  String uiid=getUIManager().getThemeConstant("dlgButtonCommandUIID",null);  addButtonBar(buttonArea);  if (cmds.length > 0) {    String lineColor=getUIManager().getThemeConstant("dlgInvisibleButtons",null);    if (cmds.length > 3) {      lineColor=null;    }    int largest=Integer.parseInt(getUIManager().getThemeConstant("dlgCommandButtonSizeInt","0"));    for (int iter=0; iter < cmds.length; iter++) {      Button b=new Button(cmds[iter]);      if (uiid != null) {        b.setUIID(uiid);      }      largest=Math.max(b.getPreferredW(),largest);      if (lineColor != null && lineColor.length() > 0) {        int color=Integer.parseInt(lineColor,16);        Border brd=null;        if (iter < cmds.length - 1) {          brd=Border.createCompoundBorder(Border.createLineBorder(1,color),null,null,Border.createLineBorder(1,color));        } else {          brd=Border.createCompoundBorder(Border.createLineBorder(1,color),null,null,null);        }        b.getUnselectedStyle().setBorder(brd);        b.getSelectedStyle().setBorder(brd);        b.getPressedStyle().setBorder(brd);      }      buttonArea.addComponent(b);    }    for (int iter=0; iter < cmds.length; iter++) {      buttonArea.getComponentAt(iter).setPreferredW(largest);    }    buttonArea.getComponentAt(0).requestFocus();  }}  }
class C{  public TestNodeGroupManager waitForFactoryServiceAvailable(String factoryServicePath){  ServiceHost peer=getHost();  SelectAndForwardRequest body=new SelectAndForwardRequest();  body.key=factoryServicePath;  waitFor(this.timeout,null,null);  return this;}  }
class C{  public boolean isContextInsensitive(){  return null != m_simpleString;}  }
class C{  public boolean consumedGesture(){  return reacted;}  }
class C{  @SuppressLint("InlinedApi") public static Bitmap blur(Context context,Bitmap sentBitmap,int radius){  if (radius < 0) {    radius=0;    if (DEBUG) {      Logger.w("radius must be 0 < r < 25 , forcing radius=0");    }  } else   if (radius > 25) {    radius=25;    if (DEBUG) {      Logger.w("radius must be 0 < r < 25 , forcing radius=25");    }  }  if (Build.VERSION.SDK_INT > 16) {    Bitmap bitmap=sentBitmap.copy(sentBitmap.getConfig(),true);    final RenderScript rs=RenderScript.create(context);    final Allocation input=Allocation.createFromBitmap(rs,sentBitmap,Allocation.MipmapControl.MIPMAP_NONE,Allocation.USAGE_SCRIPT);    final Allocation output=Allocation.createTyped(rs,input.getType());    final ScriptIntrinsicBlur script=ScriptIntrinsicBlur.create(rs,Element.U8_4(rs));    script.setRadius(radius);    script.setInput(input);    script.forEach(output);    output.copyTo(bitmap);    return bitmap;  }  Bitmap bitmap=sentBitmap.copy(sentBitmap.getConfig(),true);  if (radius < 1) {    return (null);  }  int w=bitmap.getWidth();  int h=bitmap.getHeight();  int[] pix=new int[w * h];  Log.e("pix",w + " " + h+ " "+ pix.length);  bitmap.getPixels(pix,0,w,0,0,w,h);  int wm=w - 1;  int hm=h - 1;  int wh=w * h;  int div=radius + radius + 1;  int r[]=new int[wh];  int g[]=new int[wh];  int b[]=new int[wh];  int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;  int vmin[]=new int[Math.max(w,h)];  int divsum=(div + 1) >> 1;  divsum*=divsum;  int dv[]=new int[256 * divsum];  for (i=0; i < 256 * divsum; i++) {    dv[i]=(i / divsum);  }  yw=yi=0;  int[][] stack=new int[div][3];  int stackpointer;  int stackstart;  int[] sir;  int rbs;  int r1=radius + 1;  int routsum, goutsum, boutsum;  int rinsum, ginsum, binsum;  for (y=0; y < h; y++) {    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;    for (i=-radius; i <= radius; i++) {      p=pix[yi + Math.min(wm,Math.max(i,0))];      sir=stack[i + radius];      sir[0]=(p & 0xff0000) >> 16;      sir[1]=(p & 0x00ff00) >> 8;      sir[2]=(p & 0x0000ff);      rbs=r1 - Math.abs(i);      rsum+=sir[0] * rbs;      gsum+=sir[1] * rbs;      bsum+=sir[2] * rbs;      if (i > 0) {        rinsum+=sir[0];        ginsum+=sir[1];        binsum+=sir[2];      } else {        routsum+=sir[0];        goutsum+=sir[1];        boutsum+=sir[2];      }    }    stackpointer=radius;    for (x=0; x < w; x++) {      r[yi]=dv[rsum];      g[yi]=dv[gsum];      b[yi]=dv[bsum];      rsum-=routsum;      gsum-=goutsum;      bsum-=boutsum;      stackstart=stackpointer - radius + div;      sir=stack[stackstart % div];      routsum-=sir[0];      goutsum-=sir[1];      boutsum-=sir[2];      if (y == 0) {        vmin[x]=Math.min(x + radius + 1,wm);      }      p=pix[yw + vmin[x]];      sir[0]=(p & 0xff0000) >> 16;      sir[1]=(p & 0x00ff00) >> 8;      sir[2]=(p & 0x0000ff);      rinsum+=sir[0];      ginsum+=sir[1];      binsum+=sir[2];      rsum+=rinsum;      gsum+=ginsum;      bsum+=binsum;      stackpointer=(stackpointer + 1) % div;      sir=stack[(stackpointer) % div];      routsum+=sir[0];      goutsum+=sir[1];      boutsum+=sir[2];      rinsum-=sir[0];      ginsum-=sir[1];      binsum-=sir[2];      yi++;    }    yw+=w;  }  for (x=0; x < w; x++) {    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;    yp=-radius * w;    for (i=-radius; i <= radius; i++) {      yi=Math.max(0,yp) + x;      sir=stack[i + radius];      sir[0]=r[yi];      sir[1]=g[yi];      sir[2]=b[yi];      rbs=r1 - Math.abs(i);      rsum+=r[yi] * rbs;      gsum+=g[yi] * rbs;      bsum+=b[yi] * rbs;      if (i > 0) {        rinsum+=sir[0];        ginsum+=sir[1];        binsum+=sir[2];      } else {        routsum+=sir[0];        goutsum+=sir[1];        boutsum+=sir[2];      }      if (i < hm) {        yp+=w;      }    }    yi=x;    stackpointer=radius;    for (y=0; y < h; y++) {      pix[yi]=(0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8)| dv[bsum];      rsum-=routsum;      gsum-=goutsum;      bsum-=boutsum;      stackstart=stackpointer - radius + div;      sir=stack[stackstart % div];      routsum-=sir[0];      goutsum-=sir[1];      boutsum-=sir[2];      if (x == 0) {        vmin[y]=Math.min(y + r1,hm) * w;      }      p=x + vmin[y];      sir[0]=r[p];      sir[1]=g[p];      sir[2]=b[p];      rinsum+=sir[0];      ginsum+=sir[1];      binsum+=sir[2];      rsum+=rinsum;      gsum+=ginsum;      bsum+=binsum;      stackpointer=(stackpointer + 1) % div;      sir=stack[stackpointer];      routsum+=sir[0];      goutsum+=sir[1];      boutsum+=sir[2];      rinsum-=sir[0];      ginsum-=sir[1];      binsum-=sir[2];      yi+=w;    }  }  Log.e("pix",w + " " + h+ " "+ pix.length);  bitmap.setPixels(pix,0,w,0,0,w,h);  return (bitmap);}  }
class C{  public void writeByte(final byte b){  writeBytes(new byte[]{b});}  }
class C{  @Override public SurfaceData createScreenSurface(Win32GraphicsConfig gc,WComponentPeer peer,int bbNum,boolean isResize){  if (done || !(gc instanceof D3DGraphicsConfig)) {    return super.createScreenSurface(gc,peer,bbNum,isResize);  }  SurfaceData sd=null;  if (canUseD3DOnScreen(peer,gc,bbNum)) {    try {      sd=D3DSurfaceData.createData(peer);    } catch (    InvalidPipeException ipe) {      sd=null;    }  }  if (sd == null) {    sd=GDIWindowSurfaceData.createData(peer);  }  if (isResize) {    repaintPeerTarget(peer);  }  return sd;}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void progress(Service service,TaskService.State taskServiceState,int nextStepSequence,Operation.CompletionHandler handler){  Date now=DateTime.now().toDate();  TaskService.State.Step currentStep=taskServiceState.steps.get(nextStepSequence - 1);  currentStep.state=TaskService.State.StepState.COMPLETED;  currentStep.endTime=now;  TaskService.State.Step nextStep=taskServiceState.steps.get(nextStepSequence);  nextStep.state=TaskService.State.StepState.STARTED;  nextStep.startedTime=now;  ServiceHostUtils.getCloudStoreHelper(service.getHost()).createPatch(taskServiceState.documentSelfLink).setBody(taskServiceState).setCompletion(handler).sendWith(service);}  }
class C{  protected boolean isTcpNoDelayChanged(){  return true;}  }
class C{  public ArrayDeque(Collection<? extends E> c){  allocateElements(c.size());  addAll(c);}  }
class C{  public static boolean addCorrection(Vertex originalQuestionInput,Vertex originalQuestion,Vertex wrongResponseInput,Vertex correction,Vertex previousQuestionInput,Network network){  boolean wasCorrect=false;  Relationship relationship=null;  if (wrongResponseInput != null) {    Vertex wrongResponse=wrongResponseInput.mostConscious(Primitive.INPUT);    if (wrongResponse != correction) {      relationship=originalQuestion.getRelationship(Primitive.RESPONSE,wrongResponse);      if ((relationship == null) || (relationship.getCorrectness() < 0.5)) {        originalQuestion.removeRelationship(Primitive.RESPONSE,wrongResponse);        network.checkReduction(originalQuestion);        originalQuestion.inverseAssociateAll(Primitive.SYNONYM,wrongResponse,Primitive.RESPONSE);      } else {        relationship.setCorrectness(relationship.getCorrectness() / 2);        originalQuestionInput.removeRelationship(Primitive.RESPONSE,wrongResponseInput);        removeSentencePreviousMeta(relationship,previousQuestionInput,network);      }    } else {      wasCorrect=true;    }    Vertex input=wrongResponseInput.copy();    input.addRelationship(Primitive.ASSOCIATED,Primitive.CORRECTION);    input.setRelationship(Primitive.INPUT,correction);    relationship=network.getBot().mind().getThought(Comprehension.class).checkTemplate(input,network);    if (relationship != null) {      correction=relationship.getTarget();    }  }  relationship=originalQuestion.addRelationship(Primitive.RESPONSE,correction);  if (!originalQuestion.instanceOf(Primitive.PATTERN)) {    originalQuestion.associateAll(Primitive.WORD,originalQuestion,Primitive.QUESTION);  }  network.checkReduction(originalQuestion);  originalQuestion.associateAll(Primitive.SYNONYM,correction,Primitive.RESPONSE);  correction.addRelationship(Primitive.QUESTION,originalQuestion);  originalQuestion.setPinned(true);  correction.setPinned(true);  addSentencePreviousMeta(relationship,previousQuestionInput,network);  return wasCorrect;}  }
class C{  protected byte[] first() throws IOException, SpaceExceededException {  assert (this.index != null) : "index == null; closeDate=" + this.closeDate + ", now="+ new Date();  if (this.index == null) {    log.severe("this.index == null in first(); closeDate=" + this.closeDate + ", now="+ new Date()+ this.heapFile == null ? "" : (" file = " + this.heapFile.toString()));    return null;  }synchronized (this.index) {    byte[] key=this.index.smallestKey();    if (key == null)     return null;    return get(key);  }}  }
class C{  public double nonHeapUsage(){  final MemoryUsage usage=memory.getNonHeapMemoryUsage();  return usage.getUsed() / (double)usage.getMax();}  }
class C{  public synchronized void initializeFrom(RegionVersionHolder<T> source){  mergeBitSet();  RegionVersionHolder<T> other=source.clone();  other.mergeBitSet();  long myVersion=this.version;  this.exceptions=other.exceptions;  this.version=other.version;  if (this.bitSet != null) {    this.bitSetVersion=this.version;    this.bitSet.set(0);  }  if (myVersion > this.version) {    RVVException e=RVVException.createException(this.version,myVersion + 1);    if (this.exceptions == null) {      this.exceptions=new LinkedList<RVVException>();    }    int i=0;    for (    RVVException exception : this.exceptions) {      if (e.compareTo(exception) >= 0) {        break;      }      i++;    }    this.exceptions.add(i,e);    this.version=myVersion;  }}  }
class C{  public boolean isReadOnly(){  Object oo=get_Value(COLUMNNAME_IsReadOnly);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void encode(DerOutputStream out) throws IOException {  out.putTruncatedUnalignedBitString(new BitArray(this.bitString));}  }
class C{  public Instance calcPivot(TempNode node1,TempNode node2,Instances insts){  int classIdx=m_Instances.classIndex();  double[] attrVals=new double[insts.numAttributes()];  Instance temp;  double anchr1Ratio=(double)node1.points.length() / (node1.points.length() + node2.points.length()), anchr2Ratio=(double)node2.points.length() / (node1.points.length() + node2.points.length());  ;  for (int k=0; k < node1.anchor.numValues(); k++) {    if (node1.anchor.index(k) == classIdx) {      continue;    }    attrVals[k]+=node1.anchor.valueSparse(k) * anchr1Ratio;  }  for (int k=0; k < node2.anchor.numValues(); k++) {    if (node2.anchor.index(k) == classIdx) {      continue;    }    attrVals[k]+=node2.anchor.valueSparse(k) * anchr2Ratio;  }  temp=new DenseInstance(1.0,attrVals);  return temp;}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  public TokenPair acquireTokenByRefreshToken(final URI targetUri,final String clientId,final String resource,final Token refreshToken){  throw new NotImplementedException(449243);}  }
class C{  public boolean createExplosion(Entity source,double x,double y,double z,float power,boolean incendiary,boolean breakBlocks){  Explosion explosion=new Explosion(source,this,x,y,z,power,incendiary,breakBlocks);  return explosion.explodeWithEvent();}  }
class C{  public void readData(DataInput din) throws IOException {  int byteCount=din.readUnsignedByte();  int recordCount=byteCount / 7;  records=new RecordRequest[recordCount];  for (int i=0; i < recordCount; i++) {    if (din.readByte() != 6) {      throw new IOException();    }    int file=din.readUnsignedShort();    int record=din.readUnsignedShort();    if (record < 0 || record >= 10000) {      throw new IOException();    }    int count=din.readUnsignedShort();    records[i]=new RecordRequest(file,record,count);  }}  }
class C{  public Orientation hookRightClickRotate(){  ((Block)provider).events.on(Block.RightClickEvent.class).bind(null);  return this;}  }
class C{  public boolean isTexture(){  return TYPE_TEXTURE.equals(getType());}  }
class C{  public void begin() throws NotSupportedException, SystemException {  if (!isActive) {    throw new SystemException(LocalizedStrings.TransactionManagerImpl_TRANSACTIONMANAGER_INVALID.toLocalizedString());  }  LogWriterI18n log=TransactionUtils.getLogWriterI18n();  if (log.fineEnabled()) {    log.fine("TransactionManager.begin() invoked");  }  Thread thread=Thread.currentThread();  if (transactionMap.get(thread) != null) {    String exception=LocalizedStrings.TransactionManagerImpl_TRANSACTIONMANAGERIMPL_BEGIN_NESTED_TRANSACTION_IS_NOT_SUPPORTED.toLocalizedString();    if (VERBOSE)     log.fine(exception);    throw new NotSupportedException(exception);  }  try {    TransactionImpl transaction=new TransactionImpl();    transactionMap.put(thread,transaction);    GlobalTransaction globalTransaction=new GlobalTransaction();    globalTransactionMap.put(transaction,globalTransaction);    globalTransaction.addTransaction(transaction);    globalTransaction.setStatus(Status.STATUS_ACTIVE);  } catch (  Exception e) {    String exception=LocalizedStrings.TransactionManagerImpl_BEGIN__SYSTEMEXCEPTION_DUE_TO_0.toLocalizedString(new Object[]{e});    if (log.severeEnabled())     log.severe(LocalizedStrings.TransactionManagerImpl_BEGIN__SYSTEMEXCEPTION_DUE_TO_0,new Object[]{e});    throw new SystemException(exception);  }}  }
class C{  @POST @Path("restore") @Produces(MediaType.APPLICATION_JSON) @ApiOperation(value="Performs Codenvy restoring",response=BackupInfo.class) @ApiResponses(value={@ApiResponse(code=201,message="Successfully restored"),@ApiResponse(code=500,message="Server error")}) public Response restore(@DefaultValue(CDECArtifact.NAME) @QueryParam(value="artifact") @ApiParam(allowableValues=CDECArtifact.NAME) String artifactName,@QueryParam(value="backupFile") @ApiParam(value="path to backup file",required=true) String backupFile) throws IOException {  try {    BackupConfig config=new BackupConfig();    config.setArtifactName(artifactName);    config.setBackupFile(backupFile);    BackupInfo backupInfo=facade.restore(config);    return Response.status(Response.Status.CREATED).entity(backupInfo).build();  } catch (  Exception e) {    return handleException(e);  }}  }
class C{  public static List<String> splitStringList(String strList,String delimit){  ArrayList<String> list=new ArrayList<>();  if (strList != null && !strList.isEmpty()) {    list.addAll(Arrays.asList(strList.split(delimit)));  }  return list;}  }
class C{  public int newRound(){  roundNumber++;  StringBuilder sb=new StringBuilder("--> Round ").append(roundNumber - 1).append("-->").append(roundNumber);  if (valByRound.size() > 0) {    sb.append(": ");    for (    final String name : valByRound.keySet()) {      Object a=valByRound.get(name);      if (a instanceof int[]) {        int ai[]=(int[])a;        int n1=(roundNumber - 1) % ai.length;        int n2=roundNumber % ai.length;        sb.append("  ").append(name).append(":").append(ai[n1]).append("-->").append(ai[n2]);      } else       if (a instanceof double[]) {        double ad[]=(double[])a;        int n1=(roundNumber - 1) % ad.length;        int n2=roundNumber % ad.length;        sb.append("  ").append(name).append(":").append(ad[n1]).append("-->").append(ad[n2]);      } else       if (a instanceof String[]) {        String ad[]=(String[])a;        int n1=(roundNumber - 1) % ad.length;        int n2=roundNumber % ad.length;        sb.append("  ").append(name).append(":").append(ad[n1]).append("-->").append(ad[n2]);      } else {        boolean ab[]=(boolean[])a;        int n1=(roundNumber - 1) % ab.length;        int n2=roundNumber % ab.length;        sb.append("  ").append(name).append(":").append(ab[n1]).append("-->").append(ab[n2]);      }    }  }  System.out.println();  System.out.println(sb.toString());  System.out.println();  return roundNumber;}  }
class C{  private void addIpreconfigListener(){  try {    if (ipReconfigListener != null) {      _coordinator.getCoordinatorClient().removeNodeListener(ipReconfigListener);    }    ipReconfigListener=new IpReconfigListener();    _coordinator.getCoordinatorClient().addNodeListener(ipReconfigListener);  } catch (  Exception e) {    log.error("Fail to add node listener for ip reconfig config znode",e);    throw APIException.internalServerErrors.addListenerFailed();  }  log.info("Succeed to add node listener for ip reconfig config znode");}  }
class C{  private String[] actuatorEndpoints(){  return new String[]{AUTOCONFIG_ENDPOINT,BEANS_ENDPOINT,CONFIGPROPS_ENDPOINT,ENV_ENDPOINT,MAPPINGS_ENDPOINT,METRICS_ENDPOINT,SHUTDOWN_ENDPOINT};}  }
class C{  public ParameterTypeRepositoryLocation(String key,String description,boolean optional){  this(key,description,true,false,optional);}  }
class C{  public static DateTimeFormatter hourMinuteSecondMillis(){  return Constants.hmsl;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:07.050 -0500",hash_original_method="A298ED811BA5BE2EDFB864807B88B98E",hash_generated_method="CCF6C2B2D75122A7B8B8B267C87CE322") public boolean hasFaces(){  return mDimFaces;}  }
class C{  public static boolean send(GemFireCacheImpl cache,Set<InternalDistributedMember> recipients){  InternalDistributedSystem ids=cache.getDistributedSystem();  DM dm=ids.getDistributionManager();  Set<InternalDistributedMember> filteredRecipients=new HashSet<InternalDistributedMember>();  for (  InternalDistributedMember recipient : recipients) {    if (Version.GFE_81.compareTo(recipient.getVersionObject()) <= 0) {      filteredRecipients.add(recipient);    }  }  if (filteredRecipients == null || filteredRecipients.size() == 0)   return true;  ReplyProcessor21 replyProcessor=new ReplyProcessor21(dm,filteredRecipients);  ServerPingMessage spm=new ServerPingMessage(replyProcessor);  spm.setRecipients(filteredRecipients);  Set failedServers=null;  try {    if (cache.getLoggerI18n().fineEnabled())     cache.getLoggerI18n().fine("Pinging following servers " + filteredRecipients);    failedServers=dm.putOutgoing(spm);    boolean receivedReplies=replyProcessor.waitForReplies(0L);    dm.getCancelCriterion().checkCancelInProgress(null);    if (!receivedReplies) {      cache.getLoggerI18n().error(LocalizedStrings.Server_Ping_Failure,filteredRecipients);      return false;    }  } catch (  Throwable e) {    cache.getLoggerI18n().error(LocalizedStrings.Server_Ping_Failure,filteredRecipients,e);    return false;  }  if (failedServers == null || failedServers.size() == 0)   return true;  cache.getLoggerI18n().info(LocalizedStrings.Server_Ping_Failure,failedServers);  return false;}  }
class C{  public boolean contains(Class<? extends IOObject> cls){  try {    getInput(cls,0,false);    return true;  } catch (  MissingIOObjectException e) {    return false;  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:36.640 -0500",hash_original_method="8914B55F694F31BD669F4AB78F5D8E0B",hash_generated_method="722E199462D7D6C816EA7F52782180C2") public final int intValue(){  return this.value;}  }
class C{  public static PowerShell openSession() throws PowerShellNotAvailableException {  PowerShell powerShell=new PowerShell();  powerShell.configuration(null);  return powerShell.initalize();}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static int addSuppressWarningsProposalIfPossible(Document document,ASTNode node,String warningToken,int relevance,Collection<ICommandAccess> proposals){  ChildListPropertyDescriptor property;  String name;  boolean isLocalVariable=false;switch (node.getNodeType()) {case ASTNode.SINGLE_VARIABLE_DECLARATION:    property=SingleVariableDeclaration.MODIFIERS2_PROPERTY;  name=((SingleVariableDeclaration)node).getName().getIdentifier();isLocalVariable=true;break;case ASTNode.VARIABLE_DECLARATION_STATEMENT:property=VariableDeclarationStatement.MODIFIERS2_PROPERTY;name=getFirstFragmentName(((VariableDeclarationStatement)node).fragments());isLocalVariable=true;break;case ASTNode.VARIABLE_DECLARATION_EXPRESSION:property=VariableDeclarationExpression.MODIFIERS2_PROPERTY;name=getFirstFragmentName(((VariableDeclarationExpression)node).fragments());isLocalVariable=true;break;case ASTNode.TYPE_DECLARATION:property=TypeDeclaration.MODIFIERS2_PROPERTY;name=((TypeDeclaration)node).getName().getIdentifier();break;case ASTNode.ANNOTATION_TYPE_DECLARATION:property=AnnotationTypeDeclaration.MODIFIERS2_PROPERTY;name=((AnnotationTypeDeclaration)node).getName().getIdentifier();break;case ASTNode.ENUM_DECLARATION:property=EnumDeclaration.MODIFIERS2_PROPERTY;name=((EnumDeclaration)node).getName().getIdentifier();break;case ASTNode.FIELD_DECLARATION:property=FieldDeclaration.MODIFIERS2_PROPERTY;name=getFirstFragmentName(((FieldDeclaration)node).fragments());break;case ASTNode.METHOD_DECLARATION:property=MethodDeclaration.MODIFIERS2_PROPERTY;name=((MethodDeclaration)node).getName().getIdentifier() + "()";break;case ASTNode.ANNOTATION_TYPE_MEMBER_DECLARATION:property=AnnotationTypeMemberDeclaration.MODIFIERS2_PROPERTY;name=((AnnotationTypeMemberDeclaration)node).getName().getIdentifier() + "()";break;case ASTNode.ENUM_CONSTANT_DECLARATION:property=EnumConstantDeclaration.MODIFIERS2_PROPERTY;name=((EnumConstantDeclaration)node).getName().getIdentifier();break;default :return relevance;}String label=CorrectionMessages.INSTANCE.SuppressWarningsSubProcessor_suppress_warnings_label(warningToken,name);ASTRewriteCorrectionProposal proposal=new SuppressWarningsProposal(warningToken,label,node,property,relevance,document);proposals.add(proposal);return isLocalVariable ? relevance - 1 : 0;}  }
class C{  protected Uri doInBackground(Uri... url){  return DownloadUtils.downloadImage(DownloadImageActivity.this,url[0]);}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  changeSupport.addPropertyChangeListener(listener);}  }
class C{  public static boolean isOSMPlacesSource(Object source){  if (source == null || WWUtil.isEmpty(source)) {    String message=Logging.getMessage("nullValue.SourceIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  String path=WWIO.getSourcePath(source);  return path != null && WWIO.getFilename(path).equalsIgnoreCase("places.shp");}  }
class C{  private static void writeItems(final Collection<Item> itemCollection,final DataOutput dos,final boolean dotted) throws IOException {  int size=itemCollection.size();  Item[] items=itemCollection.toArray(new Item[size]);  Arrays.sort(items);  for (int i=0; i < size; i++) {    dos.writeUTF(items[i].name);    dos.writeInt(items[i].access);    dos.writeUTF(dotted ? items[i].desc.replace('/','.') : items[i].desc);  }}  }
class C{  private boolean hiveClassesArePresent(){  try {    this.getClass().forName("org.apache.spark.sql.hive.HiveSessionState");    this.getClass().forName("org.apache.spark.sql.hive.HiveSharedState");    this.getClass().forName("org.apache.hadoop.hive.conf.HiveConf");    return true;  } catch (  ClassNotFoundException|NoClassDefFoundError e) {    return false;  }}  }
class C{  public static void assertExceptions(final Exception occurred,final Exception expected){  assertEquals(occurred.getClass(),expected.getClass());  assertEquals(occurred.getMessage(),expected.getMessage());}  }
class C{  public void saveField(DateTimeField field,int value){  saveField(new SavedField(field,value));}  }
class C{  public void buildClassifier(Instances D) throws Exception {  int L=D.classIndex();  int featlength=(D.numAttributes() - L) * 2;  int numSamples=D.numInstances();  int classlength=L * 2;  if (this.order == null) {    order=new ArrayList<Integer>();    for (int j=0; j < D.numInstances(); j++) {      order.add(j);    }  }  if (numFeatures == -1) {    initARAM(featlength,classlength,roa,threshold);  } else {    if (featlength != numFeatures) {      return;    }    if (classlength != numClasses) {      return;    }  }  for (int i=0; i < D.numInstances(); i++) {    Instance instance=D.get(order.get(i));    updateClassifier(instance);  }  System.out.println("Training done, used " + numCategories + " neurons with rho ="+ roa+ ".");}  }
class C{  public boolean injectStoreSession(Object obj,CacheStoreSession ses) throws IgniteCheckedException {  assert obj != null;  if (log.isDebugEnabled())   log.debug("Injecting cache store session: " + obj);  obj=unwrapTarget(obj);  return inject(obj,GridResourceIoc.ResourceAnnotation.CACHE_STORE_SESSION,null,null,ses);}  }
class C{  public MP4DataStream(FileInputStream is){  this.is=is;}  }
class C{  protected void checkWrite() throws IOException {  if (beginningOfLine) {    beginningOfLine=false;    int i=currentIndent;    while (i >= tabSize) {      super.write('\t');      i-=tabSize;    }    while (i > 0) {      super.write(' ');      i--;    }  }}  }
class C{  public void testBug23645() throws Exception {  if (versionMeetsMinimum(4,1)) {    String currentlyConfiguredCharacterSet=getSingleIndexedValueWithQuery(2,"SHOW VARIABLES LIKE 'character_set_connection'").toString();    System.out.println(currentlyConfiguredCharacterSet);    String javaNameForMysqlName=CharsetMapping.getJavaEncodingForMysqlCharset(currentlyConfiguredCharacterSet);    System.out.println(javaNameForMysqlName);    for (int i=1; i < CharsetMapping.MAP_SIZE; i++) {      String possibleCharset=CharsetMapping.getJavaEncodingForCollationIndex(i);      if (!javaNameForMysqlName.equals(possibleCharset)) {        System.out.println(possibleCharset);        Properties props=new Properties();        props.setProperty("characterEncoding",possibleCharset);        props.setProperty("com.mysql.jdbc.faultInjection.serverCharsetIndex","65535");        Connection forcedCharConn=null;        forcedCharConn=getConnectionWithProps(props);        String forcedCharset=getSingleIndexedValueWithQuery(forcedCharConn,2,"SHOW VARIABLES LIKE 'character_set_connection'").toString();        System.out.println(forcedCharset);        break;      }    }  }}  }
class C{  public RangeQueryBuilder gte(int from){  this.from=from;  this.includeLower=true;  return this;}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.IMPORT;}  }
class C{  public static boolean findVacantCell(int[] vacant,int spanX,int spanY,int xCount,int yCount,boolean[][] occupied){  for (int y=0; (y + spanY) <= yCount; y++) {    for (int x=0; (x + spanX) <= xCount; x++) {      boolean available=!occupied[x][y];      out:       for (int i=x; i < x + spanX; i++) {        for (int j=y; j < y + spanY; j++) {          available=available && !occupied[i][j];          if (!available)           break out;        }      }      if (available) {        vacant[0]=x;        vacant[1]=y;        return true;      }    }  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.155 -0500",hash_original_method="4D8212FF39765998C2ACC0C3F633686C",hash_generated_method="238750A6C3B5A84CA044F3179B50D1C5") public synchronized void resize(int dimX){  if ((mType.getY() > 0) || (mType.getZ() > 0) || mType.hasFaces()|| mType.hasMipmaps()) {    throw new RSInvalidStateException("Resize only support for 1D allocations at this time.");  }  mRS.nAllocationResize1D(getID(),dimX);  mRS.finish();  int typeID=mRS.nAllocationGetType(getID());  mType=new Type(typeID,mRS);  mType.updateFromNative();  updateCacheInfo(mType);}  }
class C{  public Quaterniond integrate(double dt,double vx,double vy,double vz){  return integrate(dt,vx,vy,vz,this);}  }
class C{  private final RepositoryReplaceResults replaceRepositoryInternal(final TFSRepository repository){  Check.notNull(repository,"repository");  final WorkspaceKey key=new WorkspaceKey(repository.getWorkspace());  boolean isDefaultRepository=false;  TFSRepository existingRepository;synchronized (lock) {    if (repositoryList.size() > 0) {      throw new RepositoryConflictException();    }    final String messageFormat="replaceRepositoryInternal: creating new repository, key=[{0}]";    final String message=MessageFormat.format(messageFormat,key);    log.trace(message);    existingRepository=repositoryMap.get(key);    if (existingRepository != null && existingRepository == repository) {      return new ExistingRepositoryReplaceResults(repository);    } else     if (existingRepository != null) {      repositoryList.remove(existingRepository);    }    repositoryList.add(repository);    repositoryMap.put(key,repository);    if (repositoryList.size() == 1) {      isDefaultRepository=true;      defaultRepository=repository;    }  }  getListener().onDefaultRepositoryChanged(new RepositoryManagerEvent(this,repository));  return new RepositoryReplaceResults(isDefaultRepository,existingRepository);}  }
class C{  public void sphericalToLocalCoordinate(Vector3 coord){  srs.getProjection().sphericalToWorld(coord);  srs.getProjection().worldToLocal(coord);}  }
class C{  public void waitForInvocation(long msecWait){  long startTime=System.currentTimeMillis();  while (true) {    if ((System.currentTimeMillis() - startTime) > msecWait) {      throw new RuntimeException("No result received");    }    if (isInvoked()) {      return;    }    try {      Thread.sleep(50);    } catch (    InterruptedException e) {      return;    }  }}  }
class C{  public String encode(){  return headerName + COLON + SP+ encodeBody()+ NEWLINE;}  }
class C{  public Rational multiply(Rational secondRational){  long n=r[0] * secondRational.getNumerator();  long d=r[1] * secondRational.getDenominator();  return new Rational(n,d);}  }
class C{  public boolean contains(int i){  if (i < 0 || i >= n)   throw new IndexOutOfBoundsException(); else   return nodes[i] != null;}  }
class C{  public int reduceAssignments(Database conn,int channels) throws SQLException {  int maxChannel=this.listMaxChannel(conn);  if (maxChannel < channels) {    return conn.delete(channelTable,true);  } else {    logger.warn("Cannot reduce channel assignments as assignments exceed channels:  channels=" + channels + " max assigned="+ maxChannel+ " max allowed="+ (channels - 1));    return 0;  }}  }
class C{  public void remove(String uuid){  storage.invalidate(uuid);}  }
class C{  public static Collection intersection(final Collection a,final Collection b){  Collection ret=new ArrayList();  for (  Object object : a) {    if (b.contains(object)) {      ret.add(object);    }  }  return ret;}  }
class C{  private void verify(){  if (getId() != null && getRefid() != null) {    throw new BuildException("You must use either [id] or [refid] but not both");  }  if (getContainerId() == null && getRefid() == null) {    throw new BuildException("You must specify a [containerId] attribute or use a [refid] " + "attribute");  }  if (getId() == null && getAction() == null) {    throw new BuildException("You must specify an [action] attribute with values " + LOCAL_ACTIONS + " (for local containers) or "+ DEPLOYER_ACTIONS+ " (for local or remote container deployments)");  }  if (getId() == null) {    if (!LOCAL_ACTIONS.contains(getAction()) && !DEPLOYER_ACTIONS.contains(getAction())) {      throw new BuildException("Unknown action: " + DEPLOYER_ACTIONS);    }    if (!getContainer().getType().isLocal() && !DEPLOYER_ACTIONS.contains(getAction())) {      throw new BuildException("Valid actions for remote containers are: " + DEPLOYER_ACTIONS);    }  }  if (getHome() == null && getZipURLInstaller() == null && getContainer().getType() == ContainerType.INSTALLED && ((InstalledLocalContainer)getContainer()).getHome() == null) {    throw new BuildException("You must specify either a [home] attribute pointing" + " to the location where the " + getContainer().getName() + " is installed, or a nested [zipurlinstaller] element");  }}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  @Override public void addOffer(Offer offer){  offers.add(offer);}  }
class C{  void onWritingThreadStarted(){  boolean bothStarted=false;synchronized (mThreadsLock) {    mWritingThreadStarted=true;    if (mReadingThreadStarted) {      bothStarted=true;    }  }  callOnConnectedIfNotYet();  if (bothStarted) {    onThreadsStarted();  }}  }
class C{  private void genCommonPostamble(){  for (int i=0; i < methodsBuffered.size(); i++) {    GenBuffer methodBuffer=methodsBuffered.get(i);    methodBuffer.adjustJavaLines(out.getJavaLine() - 1);    out.printMultiLn(methodBuffer.toString());  }  if (fragmentHelperClass.isUsed()) {    fragmentHelperClass.generatePostamble();    fragmentHelperClass.adjustJavaLines(out.getJavaLine() - 1);    out.printMultiLn(fragmentHelperClass.toString());  }  if (arrayBuffer != null) {    out.printMultiLn(arrayBuffer.toString());  }  out.popIndent();  out.printil("}");}  }
class C{  protected JButton createScrollButton(final int direction){  if (direction != SOUTH && direction != NORTH && direction != EAST && direction != WEST) {    throw new IllegalArgumentException("Direction must be one of: " + "SOUTH, NORTH, EAST or WEST");  }  return new ScrollableTabButton(direction);}  }
class C{  @Override public void stopInternal() throws LifecycleException {  super.stopInternal();  if (getLogger().isDebugEnabled()) {    getLogger().debug(this + ": Stopping");  }  try {    unload();  } catch (  IOException e) {    getLogger().error("Unable to unload sessions",e);  }  this.started.set(false);  this.lifecycle.fireLifecycleEvent(STOP_EVENT,null);  super.destroyInternal();  getSessionsToTouch().clear();  cancelTimer();  unregisterJvmRouteBinderValve();  if (isCommitValveEnabled()) {    unregisterCommitSessionValve();  }  this.setState(LifecycleState.STOPPING);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:34.002 -0500",hash_original_method="7AF66332DEC016DA2AA9D0945D3022F8",hash_generated_method="05D689D3D04565F34680EC799289CFC7") public void removeAll(){  this.connectionToTimes.clear();}  }
class C{  protected void init(CCTexture2D texture,CGRect rect){  assert texture != null : "Invalid texture for sprite";  init();  setTexture(texture);  setTextureRect(rect);}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public DefaultStateMachineContext(S state,E event,Map<String,Object> eventHeaders,ExtendedState extendedState,Map<S,S> historyStates){  this(new ArrayList<StateMachineContext<S,E>>(),state,event,eventHeaders,extendedState,historyStates);}  }
class C{  public void replaceBytes(int offset,int len,byte[] bytes){  byte[] removed=null;  if (len > 0) {    removed=new byte[len];    doc.remove(offset,len,removed);  }  byte[] added=null;  if (bytes != null && bytes.length > 0) {    doc.insertBytes(offset,bytes);    added=(byte[])bytes.clone();  }  if (removed != null || added != null) {    undoManager.addEdit(new BytesReplacedUndoableEdit(offset,removed,added));    fireTableDataChanged();    int addCount=added == null ? 0 : added.length;    int remCount=removed == null ? 0 : removed.length;    editor.fireHexEditorEvent(offset,addCount,remCount);  }}  }
class C{  public PbrpcException(Throwable arg0){  super(arg0);}  }
class C{  private void createHost(Network network,List<ScaleIOSDC> allSDCs){  List<URI> tenantOrgList=_dbClient.queryByType(TenantOrg.class,true);  Iterator<TenantOrg> it=_dbClient.queryIterativeObjects(TenantOrg.class,tenantOrgList);  List<String> initiatorsToAddToNetwork=new ArrayList<>();  URI rootTenant=null;  while (it.hasNext()) {    TenantOrg tenantOrg=it.next();    if (TenantOrg.isRootTenant(tenantOrg)) {      rootTenant=tenantOrg.getId();      break;    }  }  for (  ScaleIOSDC sdc : allSDCs) {    String ip=sdc.getSdcIp();    String guid=sdc.getSdcGuid();    Host host=findByNativeGuid(guid);    if (host == null) {      host=findOrCreateByIp(rootTenant,ip,guid);    }    Initiator initiator=createInitiator(host,ip,sdc.getId());    if (!network.hasEndpoint(initiator.getInitiatorPort())) {      initiatorsToAddToNetwork.add(initiator.getInitiatorPort());    }  }  if (!initiatorsToAddToNetwork.isEmpty()) {    network.addEndpoints(initiatorsToAddToNetwork,true);    _dbClient.updateAndReindexObject(network);  }}  }
class C{  public static final String timeStamp(long t){  return timeStamp(new Date(t),null);}  }
class C{  private void handleHtmlSearchQuotations(PageWrapper pageWrapper,RequestAndResponse requestAndResponse,String query,String paneId) throws IOException, ServletException {  pageWrapper.addPageIntroText(servletText.introTextSearchQuotations(false),servletText.introTextSearchQuotations(true));  try {    final StringBuilder result=new StringBuilder();    User queryUser=null;    if (null != (queryUser=canUserSeeUsersData(requestAndResponse,true))) {      final ResultsPaginator paginator=new ResultsPaginator(requestAndResponse,servletText.sentenceThereWereNoMatches(),result,servletText);      try {        final List<?> results=dbLogic.searchEntriesForUserByQuotation(queryUser.getId(),query,paginator.getStartPosition(),paginator.getMaxResults());        entryListToHtmlAndJson(paneId,result,paginator,results);      } catch (      EmptyQueryException e) {        requestAndResponse.print(servletText.errorNeedLongerQuery());      }    }    dbLogic.commit();    requestAndResponse.print(result.toString());  } catch (  final PersistenceException e) {    requestAndResponse.print(servletText.errorInternalDatabase());  }}  }
class C{  public synchronized int size(){  return count;}  }
class C{  public Value createClob(Reader x,long length){  if (x == null) {    return ValueNull.INSTANCE;  }  if (length <= 0) {    length=-1;  }  Value v=ValueLobDb.createTempClob(x,length);  session.addTemporaryLob(v);  return v;}  }
class C{  private int lastDoc(int i4096){  long index;  while (i4096 >= 0) {    index=indices[i4096];    if (index != 0) {      final int i64=63 - Long.numberOfLeadingZeros(index);      final long bits=this.bits[i4096][Long.bitCount(index) - 1];      return (i4096 << 12) | (i64 << 6) | (63 - Long.numberOfLeadingZeros(bits));    }    i4096-=1;  }  return -1;}  }
class C{  public boolean retainAll(Collection<?> c){  hashCodeUpToDate=false;  return batchRemove(c,true);}  }
class C{  private void noSuccessor(){  if (compute == FRAMES) {    Label l=new Label();    l.frame=new Frame();    l.frame.owner=l;    l.resolve(this,code.length,code.data);    previousBlock.successor=l;    previousBlock=l;  } else {    currentBlock.outputStackMax=maxStackSize;  }  currentBlock=null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void initialize() throws SchedulerException {  InitialContext ctx=null;  try {    ctx=new InitialContext(getContextProperties());    server=(MBeanServerConnection)ctx.lookup(RMI_ADAPTOR_JNDI_NAME);  } catch (  Exception e) {    throw new SchedulerException("Failed to lookup JBoss JMX RMI Adaptor.",e);  } finally {    if (ctx != null) {      try {        ctx.close();      } catch (      NamingException ignore) {      }    }  }}  }
class C{  private RoleMentionToken(MessageTokenizer tokenizer,int startIndex,int endIndex){  super(tokenizer,startIndex,endIndex,null);  mention=tokenizer.getClient().getRoleByID(getContent().replace("<@&","").replace(">",""));}  }
class C{  private Boolean sendDebugReportToAuthor(String aReport){  if (aReport != null) {    Intent theIntent=new Intent(Intent.ACTION_SEND);    String theSubject=getAppName() + " " + MSG_SUBJECT_TAG;    String theBody="\n" + MSG_BODY + "\n\n"+ aReport+ "\n\n";    theIntent.putExtra(Intent.EXTRA_EMAIL,new String[]{MSG_SENDTO});    theIntent.putExtra(Intent.EXTRA_TEXT,theBody);    theIntent.putExtra(Intent.EXTRA_SUBJECT,theSubject);    theIntent.setType("message/rfc822");    Boolean hasSendRecipients=(mAct.getPackageManager().queryIntentActivities(theIntent,0).size() > 0);    if (hasSendRecipients) {      mAct.startActivity(theIntent);      return true;    } else {      return false;    }  } else {    return true;  }}  }
class C{  public static void main(String[] args){  rGen=new Random();  rGen.setSeed(1);  int d=2;  int maxD=25;  int n=4096;  int numSearches=1024;  TrialSuite[] kdSearch=new TrialSuite[maxD];  TrialSuite[] pkdSearch=new TrialSuite[maxD];  TrialSuite[] waiting=new TrialSuite[maxD];  double fracts[]=new double[]{0.00625,0.0125,0.025,0.05,0.1,0.2,0.4,0.8};  int maxT=10;  for (int f=0; f < fracts.length; f++) {    double fract=fracts[f];    double[][] kdtable=new double[maxD][maxT];    double[][] pkdtable=new double[maxD][maxT];    int[][] waitingtable=new int[maxD][maxT];    System.out.println(fract + " ... ");    for (int nt=0; nt < maxT; nt++) {      for (d=2; d < maxD; d++) {        long now, done;        kdSearch[d]=new TrialSuite();        pkdSearch[d]=new TrialSuite();        waiting[d]=new TrialSuite();        IMultiPoint[] points=randomPoints(n,d);        System.gc();        IMultiPoint[] searchPoints=randomPoints(numSearches,d);        KDTree tree=KDFactory.generate(points);        SmallProblemsKDTree ttree=SmallProblemsKDFactory.generate(points);        SmallProblemsKDNode.setNumberHelperThreads(nt);        SmallProblemsKDTree.fract=fract;        IMultiPoint[] resultsKD=new IMultiPoint[numSearches];        IMultiPoint[] resultsPKD=new IMultiPoint[numSearches];        int idx=0;        System.gc();        now=System.currentTimeMillis();        for (        IMultiPoint imp : searchPoints) {          resultsKD[idx++]=tree.nearest(imp);        }        done=System.currentTimeMillis();        kdSearch[d].addTrial(d,now,done);        idx=0;        System.gc();        now=System.currentTimeMillis();        for (        IMultiPoint imp : searchPoints) {          resultsPKD[idx++]=ttree.nearest(imp);        }        done=System.currentTimeMillis();        pkdSearch[d].addTrial(d,now,done);        waiting[d].addTrial(d,0,SmallProblemsKDNode.waiting);        SmallProblemsKDNode.waiting=0;        int numDiff=0;        for (int i=0; i < searchPoints.length; i++) {          if (resultsKD[i] != resultsPKD[i]) {            double bf=resultsKD[i].distance(searchPoints[i]);            double kd=resultsPKD[i].distance(searchPoints[i]);            if (!FloatingPoint.same(bf,kd)) {              numDiff++;            }          }        }        if (numDiff != 0) {          System.out.println(d + " has " + numDiff+ " differences!");        }      }      for (d=2; d < kdSearch.length; d++) {        String output=kdSearch[d].computeTable();        int idx=output.indexOf('\n');        output=output.substring(idx + 1);        StringTokenizer st=new StringTokenizer(output,",");        st.nextToken();        Double dd=Double.valueOf(st.nextToken());        kdtable[d][nt]=dd.doubleValue();      }      for (d=2; d < pkdSearch.length; d++) {        String output=pkdSearch[d].computeTable();        int idx=output.indexOf('\n');        output=output.substring(idx + 1);        StringTokenizer st=new StringTokenizer(output,",");        st.nextToken();        Double dd=Double.valueOf(st.nextToken());        pkdtable[d][nt]=dd.doubleValue();      }      for (d=2; d < waiting.length; d++) {        String output=waiting[d].computeTable();        int idx=output.indexOf('\n');        output=output.substring(idx + 1);        StringTokenizer st=new StringTokenizer(output,",");        st.nextToken();        Integer ii=Integer.valueOf(st.nextToken());        waitingtable[d][nt]=ii.intValue();      }    }    System.out.print("d,kd,");    for (int nt=0; nt < maxT; nt++) {      System.out.print("tkd" + nt + ",wait"+ nt+ ",");    }    System.out.println();    for (d=0; d < maxD; d++) {      System.out.print(d + "," + kdtable[d][0]+ ",");      for (int nt=0; nt < maxT; nt++) {        System.out.print(pkdtable[d][nt] + "," + waitingtable[d][nt]+ ",");      }      System.out.println();    }    System.out.println();  }}  }
class C{  public static void processORMetadata(XMLEntityMappings mapping,JPAMMetadataProcessor processor,boolean throwExceptionOnFail,Mode mode){  if (mode == Mode.ALL || mode == Mode.COMPOSITE_MEMBER_INITIAL) {    processor.getProject().addEntityMappings(mapping);  }  processor.processEntityMappings(mode);  processor.processORMMetadata(mode);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getCoordinate_();}  }
class C{  public void writeConfigXml(Document configXml){  String configFile=getConfigXmlPath();  xmlTool.saveXml(configXml,configFile);}  }
class C{  public static boolean isSameDay(final Date date1,final Date date2){  final Calendar cal1=Calendar.getInstance();  cal1.setTime(date1);  final Calendar cal2=Calendar.getInstance();  cal2.setTime(date2);  return cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.get(Calendar.DATE) == cal2.get(Calendar.DATE);}  }
class C{  public boolean checkToken(String text) throws ParseException {  if (isEmpty()) {    return false;  }  if (peek().text.equals(text)) {    advance();    return true;  }  return false;}  }
class C{  public LatLong moveTowards(LatLong direction,double metres){  double dX=direction.lng - lng;  double dY=direction.lat - lat;  double r=distanceInMetres(direction);  if (r == 0)   return this;  double scale=metres / r;  lng+=dX * scale;  lat+=dY * scale;  return this;}  }
class C{  protected void configKappa(Parameterization config){  DoubleParameter kappaP=new DoubleParameter(KAPPA_ID).addConstraint(CommonConstraints.GREATER_THAN_ONE_DOUBLE).setDefaultValue(KAPPA_DEFAULT);  if (config.grab(kappaP)) {    settings.kappa=kappaP.doubleValue();  }}  }
class C{  public static String truncate(final String string,final int maxLen){  return (string.length() <= maxLen) ? string : string.substring(0,maxLen);}  }
class C{  public static void v(String tag,String msg,Throwable tr){  println(VERBOSE,tag,msg,tr);}  }
class C{  public boolean isTruncated(){  return isTruncated;}  }
class C{  public boolean hasDateDetected(){  return hasExtension(CrawlIssueDateDetected.class);}  }
class C{  public SmartChineseAnalyzer(){  this(true);}  }
class C{  public CMSSignedData generate(CMSProcessable content,boolean encapsulate,String sigProvider) throws NoSuchAlgorithmException, NoSuchProviderException, CMSException {  if (content instanceof CMSTypedData) {    return this.generate(((CMSTypedData)content).getContentType().getId(),content,encapsulate,sigProvider);  } else {    return this.generate(DATA,content,encapsulate,sigProvider);  }}  }
class C{  final protected void assertExists(){  if (version == -1) {    throw new IllegalStateException("No current version: id=" + id);  }}  }
class C{  public void printCount(String kind,int count){  if (count != 0) {    String key;    if (count == 1)     key="count." + kind; else     key="count." + kind + ".plural";    log.printLines(WriterKind.ERROR,key,String.valueOf(count));    log.flush(Log.WriterKind.ERROR);  }}  }
class C{  public static ServerState fromJson(final String json){  try {    final GfJsonObject gfJsonObject=new GfJsonObject(json);    final Status status=Status.valueOfDescription(gfJsonObject.getString(JSON_STATUS));    final List<String> jvmArguments=Arrays.asList(GfJsonArray.toStringArray(gfJsonObject.getJSONArray(JSON_JVMARGUMENTS)));    return new ServerState(status,gfJsonObject.getString(JSON_STATUSMESSAGE),gfJsonObject.getLong(JSON_TIMESTAMP),gfJsonObject.getString(JSON_LOCATION),gfJsonObject.getInt(JSON_PID),gfJsonObject.getLong(JSON_UPTIME),gfJsonObject.getString(JSON_WORKINGDIRECTORY),jvmArguments,gfJsonObject.getString(JSON_CLASSPATH),gfJsonObject.getString(JSON_GEMFIREVERSION),gfJsonObject.getString(JSON_JAVAVERSION),gfJsonObject.getString(JSON_LOGFILE),gfJsonObject.getString(JSON_HOST),gfJsonObject.getString(JSON_PORT),gfJsonObject.getString(JSON_MEMBERNAME));  } catch (  GfJsonException e) {    throw new IllegalArgumentException("Unable to create ServerStatus from JSON: " + json,e);  }}  }
class C{  public LWL(Regressor regressor,int k,DistanceMetric dm){  this(regressor,k,dm,EpanechnikovKF.getInstance());}  }
class C{  public void addClassEntry(String classEntry){  if (classEntry.contains("/") || classEntry.contains("\\"))   classMembers.add(classEntry.substring(0,classEntry.lastIndexOf('.')).replace('/','.').replace('\\','.'));}  }
class C{  public InactiveController(Game game,Connector connector){  super(new GameCursor(game,GameCursor.Mode.MakeMovesOnCursor),connector);  cursor=(GameCursor)getGame();  title="Inactive";  canBeTakenOver=Raptor.getInstance().getPreferences().getBoolean(PreferenceKeys.BOARD_TAKEOVER_INACTIVE_GAMES);}  }
class C{  public boolean canReceive(Gas gas){  if (getNeeded() == 0 || stored != null && (gas != null && gas != stored.getGas())) {    return false;  }  return true;}  }
class C{  private byte[] twosComplement(){  prepareJavaRepresentation();  if (this.sign == 0) {    return new byte[]{0};  }  BigInteger temp=this;  int bitLen=bitLength();  int iThis=getFirstNonzeroDigit();  int bytesLen=(bitLen >> 3) + 1;  byte[] bytes=new byte[bytesLen];  int firstByteNumber=0;  int highBytes;  int bytesInInteger=4;  int hB;  if (bytesLen - (numberLength << 2) == 1) {    bytes[0]=(byte)((sign < 0) ? -1 : 0);    highBytes=4;    firstByteNumber++;  } else {    hB=bytesLen & 3;    highBytes=(hB == 0) ? 4 : hB;  }  int digitIndex=iThis;  bytesLen-=iThis << 2;  if (sign < 0) {    int digit=-temp.digits[digitIndex];    digitIndex++;    if (digitIndex == numberLength) {      bytesInInteger=highBytes;    }    for (int i=0; i < bytesInInteger; i++, digit>>=8) {      bytes[--bytesLen]=(byte)digit;    }    while (bytesLen > firstByteNumber) {      digit=~temp.digits[digitIndex];      digitIndex++;      if (digitIndex == numberLength) {        bytesInInteger=highBytes;      }      for (int i=0; i < bytesInInteger; i++, digit>>=8) {        bytes[--bytesLen]=(byte)digit;      }    }  } else {    while (bytesLen > firstByteNumber) {      int digit=temp.digits[digitIndex];      digitIndex++;      if (digitIndex == numberLength) {        bytesInInteger=highBytes;      }      for (int i=0; i < bytesInInteger; i++, digit>>=8) {        bytes[--bytesLen]=(byte)digit;      }    }  }  return bytes;}  }
class C{  public void sendServerChat(int connId,String message){  Object[] data={message,connId};  send(new Packet(Packet.COMMAND_CHAT,data));  flushConn();}  }
class C{  public void assertMessagesReceived(int messageCount){  waitForMessagesToArrive(messageCount);  assertMessagesReceivedNoWait(messageCount);}  }
class C{  public void internalEntityDecl(String name,String value) throws SAXException {}  }
class C{  public static boolean isInterface(int mod){  return (mod & INTERFACE) != 0;}  }
class C{  public boolean checkDuplicate(T obj){  return false;}  }
class C{  protected Rectangle2D createAlignBounds(){  float[] info=getCharinfo();  float al=0f;  float at=-cm.ascent;  float aw=0f;  float ah=cm.ascent + cm.descent;  if (charinfo == null || charinfo.length == 0) {    return new Rectangle2D.Float(al,at,aw,ah);  }  boolean lineIsLTR=(source.getLayoutFlags() & 0x8) == 0;  int rn=info.length - numvals;  if (lineIsLTR) {    while (rn > 0 && info[rn + visw] == 0) {      rn-=numvals;    }  }  if (rn >= 0) {    int ln=0;    while (ln < rn && ((info[ln + advx] == 0) || (!lineIsLTR && info[ln + visw] == 0))) {      ln+=numvals;    }    al=Math.max(0f,info[ln + posx]);    aw=info[rn + posx] + info[rn + advx] - al;  }  return new Rectangle2D.Float(al,at,aw,ah);}  }
class C{  private PostgreSQLTraceFunctions(){}  }
class C{  public static List<TimeSynchronizationSample> createRandomTolerableSamplesWithDifferentKeyPairsAroundMean(final int count,final long mean){  final SecureRandom random=new SecureRandom();  final List<TimeSynchronizationSample> samples=new ArrayList<>();  if (count % 2 == 1) {    samples.add(createTimeSynchronizationSampleWithKeyPair(new KeyPair(),mean));  }  for (int i=0; i < count / 2; i++) {    final int value=random.nextInt(1000);    samples.add(createTimeSynchronizationSampleWithKeyPair(new KeyPair(),mean + value));    samples.add(createTimeSynchronizationSampleWithKeyPair(new KeyPair(),mean - value));  }  return samples;}  }
class C{  protected StoreResponse(ParameterList params){  super(params);}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  op="";  distPrefId="";  distType=Preference.BLANK_PREF_VALUE;  prefLevel=Preference.BLANK_PREF_VALUE;  owner="";  description="";  groupingDescription="";  subjectArea=DynamicList.getInstance(new ArrayList(),factoryDistObj);  courseNbr=DynamicList.getInstance(new ArrayList(),factoryDistObj);  itype=DynamicList.getInstance(new ArrayList(),factoryDistObj);  classNumber=DynamicList.getInstance(new ArrayList(),factoryDistObj);  grouping=Preference.BLANK_PREF_VALUE;  filterSubjectAreaId=null;  filterCourseNbr=null;  filterSubjectAreas=new ArrayList();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatareplacedatanomodificationallowederrEE.class,args);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:13.431 -0500",hash_original_method="585ADF2190C2ED18E311DC7717079D3E",hash_generated_method="89143747988B5330C7BED4FDB86F4326") public void write(byte b){  check(1);  buffer[write_pos++]=b;}  }
class C{  public Object encode(Object pObject) throws EncoderException {  if (!(pObject instanceof byte[])) {    throw new EncoderException("Parameter supplied to Base64 encode is not a byte[]");  }  return encode((byte[])pObject);}  }
class C{  public LoggingSessionOutputBuffer(final SessionOutputBuffer out,final Wire wire){  super();  this.out=out;  this.wire=wire;}  }
class C{  public static MyString1 valueOf(int i){  int length=0;  int n=i;  while (n >= 1) {    n/=10;    length++;  }  char[] ch=new char[length];  for (int j=0, k=(int)Math.pow(10,length - 1); j < length; j++, k/=10) {    ch[j]=Character.forDigit((i / k),10);    i%=k;  }  return new MyString1(ch);}  }
class C{  @Override public String toString(){  return "cudaPos[" + "x=" + x + ","+ "y="+ y+ ","+ "z="+ z+ "]";}  }
class C{  public PegasosK(double regularization,int iterations,KernelTrick kernel){  this(regularization,iterations,kernel,CacheMode.NONE);}  }
class C{  private String write(String[] list,String token){  StringBuilder text=new StringBuilder();  for (int i=0; i < list.length; i++) {    String item=list[i];    if (item != null) {      if (text.length() > 0) {        text.append(token);        text.append(' ');      }      text.append(item);    }  }  return text.toString();}  }
class C{  public void store(double val){  SimulatedMemory.setDouble(this,val);}  }
class C{  public void addingEdge(SessionEvent event){}  }
class C{  public final boolean sendEmptyMessage(int what){  return mExec.sendEmptyMessage(what);}  }
class C{  public void resetRemsetStream(){  remsetStream.resetData();  totalRemset=0;}  }
class C{  void checkEndCode(){  if (endCode) {    throw new IllegalStateException("Cannot visit instructions after visitMaxs has been called.");  }}  }
class C{  @Deprecated public MultimediaStreamingSession initiateStreamingSession(String serviceId,ContactId contact) throws RcsServiceNotRegisteredException, RcsPermissionDeniedException, RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    IMultimediaStreamingSession sessionIntf=mApi.initiateStreamingSession(serviceId,contact);    if (sessionIntf != null) {      return new MultimediaStreamingSession(sessionIntf);    }    return null;  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsServiceNotRegisteredException.assertException(e);    RcsPermissionDeniedException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:10.172 -0500",hash_original_method="18ADB44A3B024567153A6DCCF4159539",hash_generated_method="268F8132701501F6493A11900AC7946D") public boolean removeParameter(String name){  return authParams.delete(name);}  }
class C{  public void encode(DerOutputStream out) throws IOException {  DerOutputStream tagged=new DerOutputStream();  if ((fullName != null) || (relativeName != null)) {    DerOutputStream distributionPoint=new DerOutputStream();    if (fullName != null) {      DerOutputStream derOut=new DerOutputStream();      fullName.encode(derOut);      distributionPoint.writeImplicit(DerValue.createTag(DerValue.TAG_CONTEXT,true,TAG_FULL_NAME),derOut);    } else     if (relativeName != null) {      DerOutputStream derOut=new DerOutputStream();      relativeName.encode(derOut);      distributionPoint.writeImplicit(DerValue.createTag(DerValue.TAG_CONTEXT,true,TAG_REL_NAME),derOut);    }    tagged.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,TAG_DIST_PT),distributionPoint);  }  if (reasonFlags != null) {    DerOutputStream reasons=new DerOutputStream();    BitArray rf=new BitArray(reasonFlags);    reasons.putTruncatedUnalignedBitString(rf);    tagged.writeImplicit(DerValue.createTag(DerValue.TAG_CONTEXT,false,TAG_REASONS),reasons);  }  if (crlIssuer != null) {    DerOutputStream issuer=new DerOutputStream();    crlIssuer.encode(issuer);    tagged.writeImplicit(DerValue.createTag(DerValue.TAG_CONTEXT,true,TAG_ISSUER),issuer);  }  out.write(DerValue.tag_Sequence,tagged);}  }
class C{  public final void printString(CharSequence text) throws IOException {  if (text == null) {    appendAscii("null.string");  } else {    appendAscii('"');    printCodePoints(text,STRING_ESCAPE_CODES);    appendAscii('"');  }}  }
class C{  private void validateSourceStorage(StorageEntity storageEntity){  Assert.isTrue(StoragePlatformEntity.S3.equals(storageEntity.getStoragePlatform().getName()),String.format("Storage platform for storage with name \"%s\" is not \"%s\".",storageEntity.getName(),StoragePlatformEntity.S3));  storageHelper.getStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME),storageEntity,true);  if (!storageHelper.getBooleanStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_VALIDATE_PATH_PREFIX),storageEntity,false,true)) {    throw new IllegalStateException(String.format("Path prefix validation must be enabled on \"%s\" storage.",storageEntity.getName()));  }  if (!storageHelper.getBooleanStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_VALIDATE_FILE_EXISTENCE),storageEntity,false,true)) {    throw new IllegalStateException(String.format("File existence validation must be enabled on \"%s\" storage.",storageEntity.getName()));  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.ABSTRACT_ANNOTATION_LIST__ANNOTATIONS:    return getAnnotations();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public int ratio(){  return utf8 ? byteFrontCodedList.ratio() : charFrontCodedList.ratio();}  }
class C{  public boolean canTraverseOutsideSubtree(){  int n=getPredicateCount();  for (int i=0; i < n; i++) {    if (getPredicate(i).canTraverseOutsideSubtree())     return true;  }  return false;}  }
class C{  private Substitution<ReferenceType> selectMatch(ParameterizedType declaringType){  List<InstantiatedType> matches=new ArrayList<>();  for (  Type type : inputTypes) {    if (type.isParameterized() && ((InstantiatedType)type).isInstantiationOf(declaringType)) {      matches.add((InstantiatedType)type);    }  }  if (matches.isEmpty()) {    return null;  }  InstantiatedType selectedType=Randomness.randomSetMember(matches);  return selectedType.getInstantiatingSubstitution(declaringType);}  }
class C{  public VfsStreamOld(){}  }
class C{  public static byte convertUint8toByte(char uint8){  if (uint8 > Byte.MAX_VALUE - Byte.MIN_VALUE) {    throw new RuntimeException("Out of Boundary");  }  return (byte)uint8;}  }
class C{  public CreateContainerParams withContainerName(String containerName){  this.containerName=containerName;  return this;}  }
class C{  protected boolean isHonorific(Word w){  return w.form.equals("APR") || w.form.equals("AUG") || w.form.equals("Adj")|| w.form.equals("Adm")|| w.form.equals("Adv")|| w.form.equals("Apr")|| w.form.equals("Asst")|| w.form.equals("Aug")|| w.form.equals("Bart")|| w.form.equals("Bldg")|| w.form.equals("Brig")|| w.form.equals("Bros")|| w.form.equals("Capt")|| w.form.equals("Cmdr")|| w.form.equals("Col")|| w.form.equals("Comdr")|| w.form.equals("Con")|| w.form.equals("Cpl")|| w.form.equals("DEC")|| w.form.equals("DR")|| w.form.equals("Dec")|| w.form.equals("Dr")|| w.form.equals("Ens")|| w.form.equals("FEB")|| w.form.equals("Feb")|| w.form.equals("Gen")|| w.form.equals("Gov")|| w.form.equals("Hon")|| w.form.equals("Hosp")|| w.form.equals("Insp")|| w.form.equals("JAN")|| w.form.equals("JUL")|| w.form.equals("JUN")|| w.form.equals("Jan")|| w.form.equals("Jul")|| w.form.equals("Jun")|| w.form.equals("Lt")|| w.form.equals("MAR")|| w.form.equals("MM")|| w.form.equals("MR")|| w.form.equals("MRS")|| w.form.equals("MS")|| w.form.equals("MT")|| w.form.equals("Maj")|| w.form.equals("Mar")|| w.form.equals("Messrs")|| w.form.equals("Mlle")|| w.form.equals("Mme")|| w.form.equals("Mr")|| w.form.equals("Mrs")|| w.form.equals("Ms")|| w.form.equals("Msgr")|| w.form.equals("Mt")|| w.form.equals("NO")|| w.form.equals("NOV")|| w.form.equals("No")|| w.form.equals("Nov")|| w.form.equals("OCT")|| w.form.equals("Oct")|| w.form.equals("Op")|| w.form.equals("Ord")|| w.form.equals("Pfc")|| w.form.equals("Ph")|| w.form.equals("Prof")|| w.form.equals("Pvt")|| w.form.equals("Rep")|| w.form.equals("Reps")|| w.form.equals("Res")|| w.form.equals("Rev")|| w.form.equals("Rt")|| w.form.equals("SEP")|| w.form.equals("SEPT")|| w.form.equals("ST")|| w.form.equals("Sen")|| w.form.equals("Sens")|| w.form.equals("Sep")|| w.form.equals("Sept")|| w.form.equals("Sfc")|| w.form.equals("Sgt")|| w.form.equals("Sr")|| w.form.equals("St")|| w.form.equals("Supt")|| w.form.equals("Surg")|| w.form.equals("U.S")|| w.form.equals("apr")|| w.form.equals("aug")|| w.form.equals("dec")|| w.form.equals("feb")|| w.form.equals("jan")|| w.form.equals("jul")|| w.form.equals("jun")|| w.form.equals("nov")|| w.form.equals("oct")|| w.form.equals("sep")|| w.form.equals("sept")|| w.form.equals("v")|| w.form.equals("vs");}  }
class C{  public KernelDensityEstimator(double[] data,double min,double max,KernelDensityFunction kernel,int window,double epsilon){  process(data,min,max,kernel,window,epsilon);}  }
class C{  public static boolean equals(boolean[] array1,boolean[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public SerializationConstructorAccessorImpl generateSerializationConstructor(Class<?> declaringClass,Class<?>[] parameterTypes,Class<?>[] checkedExceptions,int modifiers,Class<?> targetConstructorClass){  return (SerializationConstructorAccessorImpl)generate(declaringClass,"<init>",parameterTypes,Void.TYPE,checkedExceptions,modifiers,true,true,targetConstructorClass);}  }
class C{  public void addButton(final JButton theButton){  customButtonPanel.add(theButton);}  }
class C{  public CCrossReferencesPanel(){  super(new BorderLayout());  m_table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);  add(new JScrollPane(m_table));  m_table.addMouseListener(new InternalMouseListener());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  long p2=getLong(stack);  long p1=getLong(stack);  stack.getUIMgrSafe().getVideoFrame().playbackControl(getInt(stack),p1,p2);  return null;}  }
class C{  public boolean optBoolean(String key,boolean defaultValue){  try {    return this.getBoolean(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  protected List<EvaluationStatistics> filter(List<EvaluationStatistics> stats){  Instances data;  Instances filtered;  Filter filter;  try {    data=toInstances(stats);    filter=Filter.makeCopy(m_Filter);    filter.setInputFormat(data);    filtered=Filter.useFilter(data,filter);    stats=fromInstances(filtered);  } catch (  Exception e) {    handleException("Failed to filter statistics!",e);  }  return stats;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputHeader;  String fieldName;  int fieldNum=0;  String assignmentType;  String baseFileHeader="not specified";  double backgroundValue=0;  int row, col;  double xCoord, yCoord, value, z;  int progress;  double cellSize=-1.0;  int rows;  int cols;  double noData=-32768.0;  double east;  double west;  double north;  double south;  DataType dataType=WhiteboxRasterBase.DataType.INTEGER;  Object[] data;  boolean useRecID=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputHeader=args[1];  fieldName=args[2];  assignmentType=args[3].toLowerCase();  if (args[4].toLowerCase().contains("nodata")) {    backgroundValue=noData;  } else {    backgroundValue=Double.parseDouble(args[4]);  }  if (!args[5].toLowerCase().contains("not specified")) {    cellSize=Double.parseDouble(args[5]);  }  baseFileHeader=args[6];  if ((inputFile == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    if (input.getShapeType() != ShapeType.POINT && input.getShapeType() != ShapeType.POINTZ && input.getShapeType() != ShapeType.POINTM && input.getShapeType() != ShapeType.MULTIPOINT && input.getShapeType() != ShapeType.MULTIPOINTZ && input.getShapeType() != ShapeType.MULTIPOINTM) {      showFeedback("The input shapefile must be of a 'point' data type.");      return;    }    AttributeTable reader=input.getAttributeTable();    int numberOfFields=reader.getFieldCount();    for (int i=0; i < numberOfFields; i++) {      DBFField field=reader.getField(i);      if (field.getName().equals(fieldName)) {        fieldNum=i;        if (field.getDataType() == DBFField.DBFDataType.NUMERIC || field.getDataType() == DBFField.DBFDataType.FLOAT) {          if (field.getDecimalCount() == 0) {            dataType=WhiteboxRasterBase.DataType.INTEGER;          } else {            dataType=WhiteboxRasterBase.DataType.FLOAT;          }        } else {          useRecID=true;        }      }    }    if (fieldNum < 0) {      useRecID=true;    }    WhiteboxRaster output;    if ((cellSize > 0) || ((cellSize < 0) & (baseFileHeader.toLowerCase().contains("not specified")))) {      if ((cellSize < 0) & (baseFileHeader.toLowerCase().contains("not specified"))) {        cellSize=Math.min((input.getyMax() - input.getyMin()) / 500.0,(input.getxMax() - input.getxMin()) / 500.0);      }      north=input.getyMax() + cellSize / 2.0;      south=input.getyMin() - cellSize / 2.0;      east=input.getxMax() + cellSize / 2.0;      west=input.getxMin() - cellSize / 2.0;      rows=(int)(Math.ceil((north - south) / cellSize));      cols=(int)(Math.ceil((east - west) / cellSize));      east=west + cols * cellSize;      south=north - rows * cellSize;      output=new WhiteboxRaster(outputHeader,north,south,east,west,rows,cols,WhiteboxRasterBase.DataScale.CONTINUOUS,dataType,backgroundValue,noData);    } else {      output=new WhiteboxRaster(outputHeader,"rw",baseFileHeader,dataType,backgroundValue);      rows=output.getNumberRows();      cols=output.getNumberColumns();    }    double[][] geometry;    if (assignmentType.equals("minimum")) {      for (      ShapeFileRecord record : input.records) {        data=reader.nextRecord();        geometry=getXYFromShapefileRecord(record);        for (int i=0; i < geometry.length; i++) {          xCoord=geometry[i][0];          yCoord=geometry[i][1];          row=output.getRowFromYCoordinate(yCoord);          col=output.getColumnFromXCoordinate(xCoord);          if (row < rows && row >= 0 && col < cols && col >= 0) {            row=output.getRowFromYCoordinate(yCoord);            col=output.getColumnFromXCoordinate(xCoord);            value=Double.valueOf(data[fieldNum].toString());            z=output.getValue(row,col);            if (z == backgroundValue || z < value) {              output.setValue(row,col,value);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)((100.0 * record.getRecordNumber()) / input.getNumberOfRecords());        updateProgress(progress);      }    } else     if (assignmentType.equals("maximum")) {      for (      ShapeFileRecord record : input.records) {        data=reader.nextRecord();        geometry=getXYFromShapefileRecord(record);        for (int i=0; i < geometry.length; i++) {          xCoord=geometry[i][0];          yCoord=geometry[i][1];          row=output.getRowFromYCoordinate(yCoord);          col=output.getColumnFromXCoordinate(xCoord);          if (row < rows && row >= 0 && col < cols && col >= 0) {            row=output.getRowFromYCoordinate(yCoord);            col=output.getColumnFromXCoordinate(xCoord);            if (!useRecID) {              value=Double.valueOf(data[fieldNum].toString());            } else {              value=record.getRecordNumber();            }            z=output.getValue(row,col);            if (z == backgroundValue || z > value) {              output.setValue(row,col,value);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)((100.0 * record.getRecordNumber()) / input.getNumberOfRecords());        updateProgress(progress);      }    } else     if (assignmentType.equals("sum")) {      for (      ShapeFileRecord record : input.records) {        data=reader.nextRecord();        geometry=getXYFromShapefileRecord(record);        for (int i=0; i < geometry.length; i++) {          xCoord=geometry[i][0];          yCoord=geometry[i][1];          row=output.getRowFromYCoordinate(yCoord);          col=output.getColumnFromXCoordinate(xCoord);          if (row < rows && row >= 0 && col < cols && col >= 0) {            row=output.getRowFromYCoordinate(yCoord);            col=output.getColumnFromXCoordinate(xCoord);            if (!useRecID) {              value=Double.valueOf(data[fieldNum].toString());            } else {              value=record.getRecordNumber();            }            z=output.getValue(row,col);            if (z == backgroundValue) {              output.setValue(row,col,value);            } else {              output.setValue(row,col,value + z);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)((100.0 * record.getRecordNumber()) / input.getNumberOfRecords());        updateProgress(progress);      }    } else     if (assignmentType.equals("first")) {      for (      ShapeFileRecord record : input.records) {        data=reader.nextRecord();        geometry=getXYFromShapefileRecord(record);        for (int i=0; i < geometry.length; i++) {          xCoord=geometry[i][0];          yCoord=geometry[i][1];          row=output.getRowFromYCoordinate(yCoord);          col=output.getColumnFromXCoordinate(xCoord);          if (row < rows && row >= 0 && col < cols && col >= 0) {            row=output.getRowFromYCoordinate(yCoord);            col=output.getColumnFromXCoordinate(xCoord);            if (!useRecID) {              value=Double.valueOf(data[fieldNum].toString());            } else {              value=record.getRecordNumber();            }            z=output.getValue(row,col);            if (z == backgroundValue) {              output.setValue(row,col,value);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)((100.0 * record.getRecordNumber()) / input.getNumberOfRecords());        updateProgress(progress);      }    } else     if (assignmentType.equals("last")) {      for (      ShapeFileRecord record : input.records) {        data=reader.nextRecord();        geometry=getXYFromShapefileRecord(record);        for (int i=0; i < geometry.length; i++) {          xCoord=geometry[i][0];          yCoord=geometry[i][1];          row=output.getRowFromYCoordinate(yCoord);          col=output.getColumnFromXCoordinate(xCoord);          if (row < rows && row >= 0 && col < cols && col >= 0) {            row=output.getRowFromYCoordinate(yCoord);            col=output.getColumnFromXCoordinate(xCoord);            if (!useRecID) {              value=Double.valueOf(data[fieldNum].toString());            } else {              value=record.getRecordNumber();            }            output.setValue(row,col,value);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)((100.0 * record.getRecordNumber()) / input.getNumberOfRecords());        updateProgress(progress);      }    } else     if (assignmentType.equals("mean")) {    } else     if (assignmentType.equals("range")) {    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.flush();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  double x, y;  int progress;  int i, n;  double[][] vertices=null;  int numFeatures;  int oneHundredthTotal;  ShapeType shapeType, outputShapeType;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON && shapeType.getBaseType() != ShapeType.POLYLINE) {      showFeedback("This tool only works with shapefiles of a polygon or line base shape type.");      return;    }    outputShapeType=ShapeType.POINT;    int numOutputFields=input.getAttributeTable().getFieldCount() + 1;    int numInputFields=input.getAttributeTable().getFieldCount();    DBFField[] inputFields=input.getAttributeTable().getAllFields();    DBFField fields[]=new DBFField[numOutputFields];    fields[0]=new DBFField();    fields[0].setName("PARENT_ID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    System.arraycopy(inputFields,0,fields,1,numInputFields);    ShapeFile output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    numFeatures=input.getNumberOfRecords();    oneHundredthTotal=numFeatures / 100;    n=0;    progress=0;    int recordNum;    for (    ShapeFileRecord record : input.records) {      recordNum=record.getRecordNumber();      Object[] attData=input.getAttributeTable().getRecord(recordNum - 1);      vertices=new double[0][0];switch (shapeType) {case POLYGON:        whitebox.geospatialfiles.shapefile.Polygon recPolygon=(whitebox.geospatialfiles.shapefile.Polygon)(record.getGeometry());      vertices=recPolygon.getPoints();    break;case POLYGONZ:  PolygonZ recPolygonZ=(PolygonZ)(record.getGeometry());vertices=recPolygonZ.getPoints();break;case POLYGONM:PolygonM recPolygonM=(PolygonM)(record.getGeometry());vertices=recPolygonM.getPoints();break;case POLYLINE:PolyLine recPolyline=(PolyLine)(record.getGeometry());vertices=recPolyline.getPoints();break;case POLYLINEZ:PolyLineZ recPolylineZ=(PolyLineZ)(record.getGeometry());vertices=recPolylineZ.getPoints();break;case POLYLINEM:PolyLineM recPolylineM=(PolyLineM)(record.getGeometry());vertices=recPolylineM.getPoints();break;}for (i=0; i < vertices.length; i++) {x=vertices[i][0];y=vertices[i][1];Object[] rowData=new Object[numOutputFields];rowData[0]=(double)recordNum - 1;System.arraycopy(attData,0,rowData,1,numInputFields);output.addRecord(new whitebox.geospatialfiles.shapefile.Point(x,y),rowData);}n++;if (n >= oneHundredthTotal) {n=0;if (cancelOp) {cancelOperation();return;}progress++;updateProgress(progress);}}output.write();updateProgress("Displaying vector: ",0);returnData(outputFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public void actionPerformed(ActionEvent e){  if (tree != null && lastPath != null) {    tree.startEditingAtPath(lastPath);  }}  }
class C{  public String distMultTipText(){  return "The distance multiplier (in combination with the 'Grid' pattern).";}  }
class C{  public ConfirmPanel(boolean withCancel){  this(withCancel,false,false,false,false,false);}  }
class C{  synchronized public DBConnectionWrapper checkoutConnection(String dbGroupName,String hostname){  for (  DBConnectionWrapper conn : this.connections) {    if (dbGroupName.equalsIgnoreCase(conn.getDb().getDbGroupName()) && hostname.equalsIgnoreCase(conn.getDb().getHostName()) && !conn.isInuse()) {      conn.setInuse(true);      return conn;    }  }  return null;}  }
class C{  public Task deepCopy(){  return new Task(this);}  }
class C{  public boolean hasFile(InputFile inputFile){  return patchPositionMappingByFile.containsKey(getPath(inputFile));}  }
class C{  private void disconnectSessions(){  if (!(service instanceof IoAcceptor)) {    return;  }  if (!((IoAcceptor)service).isCloseOnDeactivation()) {    return;  }  Object lock=new Object();  IoFutureListener<IoFuture> listener=new LockNotifyingListener(lock);  for (  IoSession s : managedSessions.values()) {    s.close(true).addListener(listener);  }  try {synchronized (lock) {      while (!managedSessions.isEmpty()) {        lock.wait(500);      }    }  } catch (  InterruptedException ie) {  }}  }
class C{  private void startVoiceRecognitionActivity(){  Intent intent=new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);  intent.putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE,getClass().getPackage().getName());  intent.putExtra(RecognizerIntent.EXTRA_PROMPT,"Speech recognition demo");  intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);  intent.putExtra(RecognizerIntent.EXTRA_MAX_RESULTS,5);  if (!mSupportedLanguageView.getSelectedItem().toString().equals("Default")) {    intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE,mSupportedLanguageView.getSelectedItem().toString());  }  startActivityForResult(intent,VOICE_RECOGNITION_REQUEST_CODE);}  }
class C{  public boolean isScaleEnabled(){  return mIsScaleEnabled;}  }
class C{  @RequestMapping(value=BUSINESS_OBJECT_DEFINITION_COLUMNS_URI_PREFIX,method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DEFINITION_COLUMNS_POST) public BusinessObjectDefinitionColumn createBusinessObjectDefinitionColumn(@RequestBody BusinessObjectDefinitionColumnCreateRequest request){  return businessObjectDefinitionColumnService.createBusinessObjectDefinitionColumn(request);}  }
class C{  public boolean isExcluded(File delphiFile,List<File> excludedSources){  return isExcluded(delphiFile.getAbsolutePath(),excludedSources);}  }
class C{  @Override public void writeValueInsert(){  m_oId=null;  m_jTaxID.setText(null);  m_jSearchkey.setText(null);  m_jName.setText(null);  m_CategoryModel.setSelectedKey(null);  m_jNotes.setText(null);  txtMaxdebt.setText(null);  txtDiscount.setText(null);  txtCurdebt.setText(null);  txtCurdate.setText(null);  m_jVisible.setSelected(true);  jcard.setText(null);  txtFirstName.setText(null);  txtLastName.setText(null);  txtEmail.setText(null);  txtPhone.setText(null);  txtPhone2.setText(null);  txtFax.setText(null);  m_jImage.setImage(null);  txtAddress.setText(null);  txtAddress2.setText(null);  txtPostal.setText(null);  txtCity.setText(null);  txtRegion.setText(null);  txtCountry.setText(null);  j_mDOB.setText(null);  m_jTaxID.setEnabled(true);  m_jSearchkey.setEnabled(true);  m_jName.setEnabled(true);  m_jCategory.setEnabled(true);  m_jNotes.setEnabled(true);  txtMaxdebt.setEnabled(true);  txtDiscount.setEnabled(true);  txtCurdebt.setEnabled(true);  txtCurdate.setEnabled(true);  m_jVisible.setEnabled(true);  jcard.setEnabled(true);  txtFirstName.setEnabled(true);  txtLastName.setEnabled(true);  txtEmail.setEnabled(true);  txtPhone.setEnabled(true);  txtPhone2.setEnabled(true);  txtFax.setEnabled(true);  m_jImage.setEnabled(true);  txtAddress.setEnabled(true);  txtAddress2.setEnabled(true);  txtPostal.setEnabled(true);  txtCity.setEnabled(true);  txtRegion.setEnabled(true);  txtCountry.setEnabled(true);  jButton2.setEnabled(true);  jButton3.setEnabled(true);  j_mDOB.setEnabled(false);}  }
class C{  @Override protected void swapValues(int a,int b){  int tt=values[a];  values[a]=values[b];  values[b]=tt;}  }
class C{  public static Object[] loadKey(final Path path) throws Exception {  final Object[] sizeModExp=new Object[3];  try (final DataInputStream in=new DataInputStream(Files.newInputStream(path))){    sizeModExp[0]=in.readInt();    byte[] buff=new byte[in.readInt()];    in.read(buff);    sizeModExp[1]=new BigInteger(buff);    buff=new byte[in.readInt()];    in.read(buff);    sizeModExp[2]=new BigInteger(buff);  }   return sizeModExp;}  }
class C{  public boolean isProcessingGo(){  return goRunnable != null;}  }
class C{  @Override public int hashCode(){  int result;  result=this.seriesKeys.hashCode();  result=29 * result + this.seriesList.hashCode();  return result;}  }
class C{  private void printModifiers(int modifiers){  if (ModifierSet.isPrivate(modifiers)) {    printer.print("private ");  }  if (ModifierSet.isProtected(modifiers)) {    printer.print("protected ");  }  if (ModifierSet.isPublic(modifiers)) {    printer.print("public ");  }  if (ModifierSet.isAbstract(modifiers)) {    printer.print("abstract ");  }  if (ModifierSet.isStatic(modifiers)) {    printer.print("static ");  }  if (ModifierSet.isFinal(modifiers)) {    printer.print("final ");  }  if (ModifierSet.isNative(modifiers)) {    printer.print("native ");  }  if (ModifierSet.isStrictfp(modifiers)) {    printer.print("strictfp ");  }  if (ModifierSet.isSynchronized(modifiers)) {    printer.print("synchronized ");  }  if (ModifierSet.isTransient(modifiers)) {    printer.print("transient ");  }  if (ModifierSet.isVolatile(modifiers)) {    printer.print("volatile ");  }}  }
class C{  @Override public Object createValue(UIDefaults table){  Object obj=null;  if (state != null) {    obj=uiDefaults.get(prefix + "[" + state+ "]."+ suffix);  }  if (obj == null) {    obj=uiDefaults.get(prefix + "[Enabled]." + suffix);  }  if (obj == null) {    if (isFont) {      obj=uiDefaults.get("defaultFont");    } else {      obj=uiDefaults.get(suffix);    }  }  return obj;}  }
class C{  public BridgeException(BridgeContext ctx,LiveAttributeException ex){switch (ex.getCode()) {case LiveAttributeException.ERR_ATTRIBUTE_MISSING:    this.code=ErrorConstants.ERR_ATTRIBUTE_MISSING;  break;case LiveAttributeException.ERR_ATTRIBUTE_MALFORMED:this.code=ErrorConstants.ERR_ATTRIBUTE_VALUE_MALFORMED;break;case LiveAttributeException.ERR_ATTRIBUTE_NEGATIVE:this.code=ErrorConstants.ERR_LENGTH_NEGATIVE;break;default :throw new IllegalStateException("Unknown LiveAttributeException error code " + ex.getCode());}this.e=ex.getElement();this.params=new Object[]{ex.getAttributeName(),ex.getValue()};if (e != null && ctx != null) {this.line=ctx.getDocumentLoader().getLineNumber(e);}}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public void generateCode(BlockScope currentScope,boolean valueRequired){  if (this.constant != Constant.NotAConstant) {    return;  }  Constant cst=this.right.constant;  if (cst != Constant.NotAConstant) {    if (cst.booleanValue() == true) {      this.left.generateCode(currentScope,false);    } else {      this.left.generateCode(currentScope,valueRequired);    }    return;  }  BranchLabel trueLabel=new BranchLabel();  cst=this.left.optimizedBooleanConstant();  boolean leftIsConst=cst != Constant.NotAConstant;  boolean leftIsTrue=leftIsConst && cst.booleanValue() == true;  cst=this.right.optimizedBooleanConstant();  boolean rightIsConst=cst != Constant.NotAConstant;  generateOperands: {    if (leftIsConst) {      this.left.generateCode(currentScope,false);      if (leftIsTrue) {        break generateOperands;      }    } else {      this.left.generateOptimizedBoolean(currentScope,trueLabel,null,true);    }    if (rightIsConst) {      this.right.generateCode(currentScope,false);    } else {      this.right.generateOptimizedBoolean(currentScope,trueLabel,null,valueRequired);    }  }}  }
class C{  private int parseLinkLabel(){  String m=match(LINK_LABEL);  return m == null ? 0 : m.length();}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  int type=((ElemTemplateElement)newChild).getXSLToken();switch (type) {case Constants.ELEMNAME_WHEN:case Constants.ELEMNAME_OTHERWISE:    break;default :  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});}return super.appendChild(newChild);}  }
class C{  @Override public int read() throws IOException {  if (this.remaining == 0) {    return -1;  } else {    int var1=this.in.read();    if (var1 >= 0) {      --this.remaining;    }    return var1;  }}  }
class C{  JUnitCommandLineParseResult(){}  }
class C{  @Override public void onPreviewDragEnd(DragEndEvent event) throws VetoDragException {  log("<br>onPreviewDragEnd: " + event,BLUE);}  }
class C{  @Override public synchronized void acceptDataSet(DataSetEvent e){  if (e.isStructureOnly()) {    return;  }  m_visualizeDataSet=new Instances(e.getDataSet());  if (m_visualizeDataSet.classIndex() < 0) {    m_visualizeDataSet.setClassIndex(m_visualizeDataSet.numAttributes() - 1);  }  if (!m_design) {    try {      setInstances(m_visualizeDataSet);    } catch (    Exception ex) {      ex.printStackTrace();    }  } else {    if (m_headlessEvents != null) {      m_headlessEvents=new ArrayList<EventObject>();      m_headlessEvents.add(e);    }  }  notifyDataSetListeners(e);  renderOffscreenImage(e);}  }
class C{  public Crosshair(double value){  this(value,Color.black,new BasicStroke(1.0f));}  }
class C{  public boolean areDaysDisabled(){  return daysDisabled;}  }
class C{  public static byte[] encodeBase64Chunked(final byte[] binaryData){  return encodeBase64(binaryData,true);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public int sizeOfTwo(){  return this.datbase.size() + this.bkpbase.size();}  }
class C{  public SQLEditorSourceViewer(Composite parent,IVerticalRuler ruler,IOverviewRuler overviewRuler,boolean showsAnnotationOverview,int styles){  super(parent,ruler,overviewRuler,showsAnnotationOverview,styles);}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] createWithSameComponentType(int length,T[] similarArray){  return (T[])Array.newInstance(similarArray.getClass().getComponentType(),length);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static boolean verifySignature(byte[] publicKey,byte[] message,byte[] signature){  return curve_sigs.curve25519_verify(SHA512Provider,signature,publicKey,message,message.length) == 0;}  }
class C{  private void joinUsersCurrentChannel(String userName) throws SoundPlaybackException {  for (  Guild guild : bot.getGuilds()) {    for (    VoiceChannel channel : guild.getVoiceChannels()) {      for (      net.dv8tion.jda.entities.User user : channel.getUsers()) {        if (user.getUsername().equalsIgnoreCase(userName)) {          try {            moveToChannel(channel,guild);          } catch (          SoundPlaybackException e) {            LOG.fatal(e.toString());            throw e;          }        }      }    }  }}  }
class C{  public boolean merge(final Frame<? extends V> frame,final boolean[] access){  boolean changes=false;  for (int i=0; i < locals; ++i) {    if (!access[i] && !values[i].equals(frame.values[i])) {      values[i]=frame.values[i];      changes=true;    }  }  return changes;}  }
class C{  protected String toStringCharChar(char[][] names){  StringBuffer result=new StringBuffer();  for (int i=0; i < names.length; i++) {    result.append(toStringChar(names[i]));  }  return result.toString();}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws IOException, SAXException {  return null;}  }
class C{  public void renameFactor(String oldName,String newName){  if (existsFactor(newName)) {    throw new IllegalArgumentException("A factor named " + newName + " already exists in graph");  }  SortedSet<LaggedFactor> transfer=connectivity.remove(oldName);  connectivity.put(newName,transfer);  for (  SortedSet<LaggedFactor> parents : connectivity.values()) {    for (    LaggedFactor itm : parents) {      if (itm.getFactor().equals(oldName)) {        itm.setFactor(newName);      }    }  }}  }
class C{  public void adjustToCenter(double lat,double lon){  int dx=getWidth() / 2 - transformer.x(lon);  int dy=getHeight() / 2 - transformer.y(lat);  adjust(dx,dy);}  }
class C{  public boolean offer(E e){  return addLastImpl(e);}  }
class C{  @Override public void close(){  if (!isCommitted) {    isRolledBack=true;  }}  }
class C{  public HashSet<CollectData> selectCollects(HashSet<SignedObject> signedObjects,int cid,int regency){  if (signedObjects == null)   return null;  return normalizeCollects(getSignedCollects(signedObjects),cid,regency);}  }
class C{  public void close() throws IOException {  output.close();}  }
class C{  public Or(){  super(Boolean.class,Boolean.class,Boolean.class);}  }
class C{  public boolean isReadOnly(){  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:16.627 -0400",hash_original_method="3D881A9B82B3E29872B09F1BBABE8E3B",hash_generated_method="8C81DCE5D4B2B381565BFD5582C26DF2") public void disablePan(BluetoothAdapter adapter){  if (mPan == null)   mPan=(BluetoothPan)connectProxy(adapter,BluetoothProfile.PAN);  assertNotNull(mPan);  long start=System.currentTimeMillis();  mPan.setBluetoothTethering(false);  long stop=System.currentTimeMillis();  assertFalse(mPan.isTetheringOn());  writeOutput(String.format("disablePan() completed in %d ms",(stop - start)));}  }
class C{  public boolean isUnderStringSizeLimit(String k){  return itsConstantPool.isUnderUtfEncodingLimit(k);}  }
class C{  public Geo scale(double s){  return create(this.x() * s,this.y() * s,this.z() * s);}  }
class C{  protected void listExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  logger.info("Inicio de listExecuteLogic");  ServiceRepository services=getServiceRepository(request);  GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();  List fmtFichas=descripcionService.getFmtFichas();  loadListas(request);  request.setAttribute(ControlAccesoConstants.LISTA_FORMATO_FICHAS,fmtFichas);  ClientInvocation invocation=saveCurrentInvocation(KeysClientsInvocations.FORMATO_FICHAS_LISTADO,request);  invocation.setAsReturnPoint(true);  setReturnActionFordward(request,mapping.findForward("list"));}  }
class C{  @AnonymousCheck(requiresLogin=true,displaysFlashMessage=true) @IsCreatable(ResourceType.MILESTONE) public static Result newMilestoneForm(String userName,String projectName){  Project project=Project.findByOwnerAndProjectName(userName,projectName);  return ok(create.render("title.newMilestone",new Form<>(Milestone.class),project));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);{    boolean success=false;    try {      employeeNode.setPrefix("xml");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public KMLLink(String namespaceURI){  super(namespaceURI);}  }
class C{  public void loading(){  mHintView.setVisibility(View.GONE);  mProgressBar.setVisibility(View.VISIBLE);  layout_progress.setVisibility(View.VISIBLE);  txt_progresstext.setVisibility(View.VISIBLE);}  }
class C{  public static View temporaryFromQuery(Query query,String name){  return temporaryFromQuery(query,name,null,null);}  }
class C{  public static Pointer to(int values[]){  return new Pointer(IntBuffer.wrap(values));}  }
class C{  public ColladaP(String ns){  super(ns);}  }
class C{  public WebElement webElement(){  return webElement;}  }
class C{  @Override public synchronized boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof List) {    List<?> list=(List<?>)object;    if (list.size() != elementCount) {      return false;    }    int index=0;    Iterator<?> it=list.iterator();    while (it.hasNext()) {      Object e1=elementData[index++], e2=it.next();      if (!(e1 == null ? e2 == null : e1.equals(e2))) {        return false;      }    }    return true;  }  return false;}  }
class C{  public boolean isLocal(){  return isLocal;}  }
class C{  private boolean addUserToGroup(String tenantName,PrincipalId userId,String groupName) throws Exception {  try {    ValidateUtil.validateNotEmpty(tenantName,"tenantName");    ValidateUtil.validateNotNull(userId,"userId");    ValidateUtil.validateNotNull(groupName,"groupName");    TenantInformation tenantInfo=findTenant(tenantName);    ServerUtils.validateNotNullTenant(tenantInfo,tenantName);    ISystemDomainIdentityProvider provider=tenantInfo.findSystemProvider();    ServerUtils.validateNotNullSystemIdp(provider,tenantName);    if (provider.findUser(userId) == null && lookupPrincipalIdServicePrincipal(tenantName,provider,userId)) {      PersonUser user=findPersonUser(tenantName,userId);      if (user != null) {        validateObjectIdNotNull(user);        PrincipalId newUserId=getFspIdForSystemDomain(provider,user);        return provider.addUserToGroup(newUserId,groupName);      } else {        user=findRegisteredExternalIDPUser(tenantName,userId);        if (user != null) {          PrincipalId newFspId=getFspIdForSystemDomain(provider,user);          return provider.addUserToGroup(newFspId,groupName);        }      }    }    return provider.addUserToGroup(userId,groupName);  } catch (  Exception ex) {    logger.error(String.format("Failed to add user [%s@%s] to group [%s] in tenant [%s]",userId != null ? userId.getName() : "null",userId != null ? userId.getDomain() : "null",groupName,tenantName));    throw ex;  }}  }
class C{  public void testNoSelectedMembersLeadsToError(){  EasyMock.expect(myView.getSelectedMemberInfos()).andReturn(Collections.<PyMemberInfo<PyElement>>emptyList()).anyTimes();  final Capture<String> errorMessageCapture=configureViewToCaptureError();  final PyExtractSuperclassPresenterImpl sut=configureByClass("Child");  myMocksControl.replay();  sut.launch();  sut.okClicked();  Assert.assertTrue("No error displayed empty list of selected members",errorMessageCapture.hasCaptured());}  }
class C{  private int calculateResistance(){  double mean=Math.sqrt(getWidth() * getHeight());  double normalized=1 - 1 / Math.max(1.0,mean);  return Math.max(MIN_RESISTANCE,(int)(MAX_RESISTANCE * normalized));}  }
class C{  public Query page(final int page){  setPage(page);  return this;}  }
class C{  public DefaultAnnotatedTypeFormatter(){  this(new DefaultAnnotationFormatter(),true,false);}  }
class C{  @Override public List<NamedRelatedResourceRep> listByTenant(URI tenantId){  return getList(PathConstants.VCENTER_BY_TENANT_URL,tenantId);}  }
class C{  public ServiceCompatibilityException(String message,Reason reason){  super(message);  setMessageKey(getMessageKey() + "." + reason.toString());  bean.setReason(reason);}  }
class C{  public EMail createEMail(String to,String subject,String message){  return createEMail(to,subject,message,false);}  }
class C{  @Override public int hashCode(){  int hc=13 * sort;  if (sort >= ARRAY) {    for (int i=off, end=i + len; i < end; i++) {      hc=17 * (hc + buf[i]);    }  }  return hc;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getConcreteMethodDeclaration_();}  }
class C{  public static byte[] decodeSignature(ObjectIdentifier oid,byte[] signature) throws IOException {  DerInputStream in=new DerInputStream(signature);  DerValue[] values=in.getSequence(2);  if ((values.length != 2) || (in.available() != 0)) {    throw new IOException("SEQUENCE length error");  }  AlgorithmId algId=AlgorithmId.parse(values[0]);  if (algId.getOID().equals((Object)oid) == false) {    throw new IOException("ObjectIdentifier mismatch: " + algId.getOID());  }  if (algId.getEncodedParams() != null) {    throw new IOException("Unexpected AlgorithmId parameters");  }  byte[] digest=values[1].getOctetString();  return digest;}  }
class C{  public DeleteRefactoring(DeleteProcessor processor){  super(processor);  Assert.isNotNull(processor);  fProcessor=processor;}  }
class C{  public void sendRegistrationId() throws AndroidAgentException {  DeviceInfo deviceInfo=new DeviceInfo(getContext());  DeviceInfoPayload deviceInfoPayload=new DeviceInfoPayload(getContext());  deviceInfoPayload.build();  String replyPayload=deviceInfoPayload.getDeviceInfoPayload();  String ipSaved=Constants.DEFAULT_HOST;  String prefIP=Preference.getString(getContext(),Constants.PreferenceFlag.IP);  if (prefIP != null) {    ipSaved=prefIP;  }  if (ipSaved != null && !ipSaved.isEmpty()) {    ServerConfig utils=new ServerConfig();    utils.setServerIP(ipSaved);    String url=utils.getAPIServerURL(getContext()) + Constants.DEVICE_ENDPOINT + deviceInfo.getDeviceId();    CommonUtils.callSecuredAPI(getContext(),url,org.wso2.emm.agent.proxy.utils.Constants.HTTP_METHODS.PUT,replyPayload,GCMRegistrationManager.this,Constants.GCM_REGISTRATION_ID_SEND_CODE);  } else {    Log.e(TAG,"There is no valid IP to contact the server");  }}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  final String resultNS;  NamespaceAlias na=new NamespaceAlias(handler.nextUid());  setPropertiesFromAttributes(handler,rawName,attributes,na);  String prefix=na.getStylesheetPrefix();  if (prefix.equals("#default")) {    prefix="";    na.setStylesheetPrefix(prefix);  }  String stylesheetNS=handler.getNamespaceForPrefix(prefix);  na.setStylesheetNamespace(stylesheetNS);  prefix=na.getResultPrefix();  if (prefix.equals("#default")) {    prefix="";    na.setResultPrefix(prefix);    resultNS=handler.getNamespaceForPrefix(prefix);    if (null == resultNS)     handler.error(XSLTErrorResources.ER_INVALID_NAMESPACE_URI_VALUE_FOR_RESULT_PREFIX_FOR_DEFAULT,null,null);  } else {    resultNS=handler.getNamespaceForPrefix(prefix);    if (null == resultNS)     handler.error(XSLTErrorResources.ER_INVALID_NAMESPACE_URI_VALUE_FOR_RESULT_PREFIX,new Object[]{prefix},null);  }  na.setResultNamespace(resultNS);  handler.getStylesheet().setNamespaceAlias(na);  handler.getStylesheet().appendChild(na);}  }
class C{  public void pointerHoverPressed(final int[] x,final int[] y){  if (impl.getCurrentForm() == null) {    return;  }  addPointerEvent(POINTER_HOVER_PRESSED,x[0],y[0]);}  }
class C{  public int currentSegment(double[] coords){  if (isDone()) {    throw new NoSuchElementException("roundrect iterator out of bounds");  }  double ctrls[]=ctrlpts[index];  int nc=0;  for (int i=0; i < ctrls.length; i+=4) {    coords[nc++]=(x + ctrls[i + 0] * w + ctrls[i + 1] * aw);    coords[nc++]=(y + ctrls[i + 2] * h + ctrls[i + 3] * ah);  }  if (affine != null) {    affine.transform(coords,0,coords,0,nc / 2);  }  return types[index];}  }
class C{  public void clear() throws IOException {  nioFile.truncate(HEADER_LENGTH);}  }
class C{  public boolean isRelPath(){  return _is_rel_path;}  }
class C{  public ActionErrors validateFormulario(ActionMapping mapping,HttpServletRequest request,Date fechaFinProrrogaActual){  ActionErrors errors=new ActionErrors();  String labelFechaFinProrroga=Messages.getString(PrestamosConstants.LABEL_PRESTAMOS_FIN_PRORROGA,request.getLocale());  if (GenericValidator.isBlankOrNull(getFechaFinProrroga())) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,labelFechaFinProrroga));  } else {    if (!DateUtils.isDate(getFechaFinProrroga())) {      errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,labelFechaFinProrroga));    } else {      if (DateUtils.isFechaMenor(DateUtils.getDate(getFechaFinProrroga()),DateUtils.getFechaActual())) {        errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE_BEFORE_TODAY,labelFechaFinProrroga));      } else {        if (fechaFinProrrogaActual != null && DateUtils.isFechaMenor(DateUtils.getDate(getFechaFinProrroga()),fechaFinProrrogaActual)) {          String labelFechaFinProrrogaActual=Messages.getString(PrestamosConstants.LABEL_FECHA_FIN_PRORROGA_VIGENTE,request.getLocale()) + " (" + DateUtils.formatDate(fechaFinProrrogaActual)+ ")";          errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE_NO_BEFORE,labelFechaFinProrroga,labelFechaFinProrrogaActual));        }      }    }  }  return errors;}  }
class C{  public Object jjtAccept(PartitionParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public static void reset(){  proxyFactory=new MonProxyFactoryImp();}  }
class C{  Operand(final Expression inner){  super(inner);  this.inner=claim(inner);}  }
class C{  protected void batchNN(AbstractRStarTreeNode<?,?> node,Map<DBID,KNNHeap> knnLists){  if (node.isLeaf()) {    for (int i=0; i < node.getNumEntries(); i++) {      SpatialEntry p=node.getEntry(i);      for (      Entry<DBID,KNNHeap> ent : knnLists.entrySet()) {        final DBID q=ent.getKey();        final KNNHeap knns_q=ent.getValue();        double knn_q_maxDist=knns_q.getKNNDistance();        DBID pid=((LeafEntry)p).getDBID();        double dist_pq=distanceFunction.distance(relation.get(pid),relation.get(q));        tree.statistics.countDistanceCalculation();        if (dist_pq <= knn_q_maxDist) {          knns_q.insert(dist_pq,pid);        }      }    }  } else {    ModifiableDBIDs ids=DBIDUtil.newArray(knnLists.size());    for (    DBID id : knnLists.keySet()) {      ids.add(id);    }    List<DoubleDistanceEntry> entries=getSortedEntries(node,ids);    for (    DoubleDistanceEntry distEntry : entries) {      double minDist=distEntry.distance;      for (      Entry<DBID,KNNHeap> ent : knnLists.entrySet()) {        final KNNHeap knns_q=ent.getValue();        double knn_q_maxDist=knns_q.getKNNDistance();        if (minDist <= knn_q_maxDist) {          SpatialEntry entry=distEntry.entry;          AbstractRStarTreeNode<?,?> child=tree.getNode(((DirectoryEntry)entry).getPageID().intValue());          batchNN(child,knnLists);          break;        }      }    }  }}  }
class C{  public void loadComplete(){  if (m_loader != null && m_loader.isAlive()) {    try {      m_loader.join();      m_loader=null;    } catch (    InterruptedException ie) {      log.log(Level.SEVERE,m_info.KeyColumn + ": Interrupted",ie);    }  }}  }
class C{  @Override public Iterator<String> iterator(){  return new TrieIterator(m_Root);}  }
class C{  public static void logCreate(String regionName,InternalDistributedMember source){  GRAPH_LOGGER.logTransition(GraphType.REGION,regionName,"create","created",source,source);}  }
class C{  private void createLinklossNotification(final BluetoothDevice device){  final NotificationCompat.Builder builder=getNotificationBuilder();  builder.setColor(ContextCompat.getColor(this,R.color.orange));  final Uri notificationUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);  builder.setSound(notificationUri,AudioManager.STREAM_ALARM);  builder.setPriority(NotificationCompat.PRIORITY_HIGH);  builder.setCategory(NotificationCompat.CATEGORY_ALARM);  builder.setShowWhen(true).setOngoing(false);  final String name=getDeviceName(device);  builder.setContentTitle(getString(R.string.proximity_notification_linkloss_alert,name));  builder.setTicker(getString(R.string.proximity_notification_linkloss_alert,name));  final Notification notification=builder.build();  final NotificationManagerCompat nm=NotificationManagerCompat.from(this);  nm.notify(device.getAddress(),NOTIFICATION_ID,notification);}  }
class C{  public static long keyEventToExtendedKeyCode(KeyEvent keyEvent){  long returnValue=keyEvent.getKeyCode();  returnValue|=(keyEvent.isShiftPressed()) ? (((long)KeyEvent.META_SHIFT_ON) << 32) : 0;  returnValue|=(keyEvent.isCtrlPressed()) ? (((long)KeyEvent.META_CTRL_ON) << 32) : 0;  returnValue|=(keyEvent.isAltPressed()) ? (((long)KeyEvent.META_ALT_ON) << 32) : 0;  return returnValue;}  }
class C{  public boolean isEmptyAfterRemovingThread(Thread thread){synchronized (this) {    boolean removed=this.participatingThreads.remove(thread);    if (!removed) {      Assert.assertTrue(false,"thread " + thread + " was not participating in "+ this);    }    return this.participatingThreads.isEmpty();  }}  }
class C{  private void redoLayout(){  resultPanel.removeAll();  if (expanded) {    int curWidth=parent.getSize().width;    int relevantWidth=SingleResultOverview.MIN_WIDTH + 25;    int xCount=curWidth / relevantWidth;    int yCount=(int)Math.ceil((double)results.size() / xCount);    resultPanel.setLayout(new GridLayout(yCount,xCount));    for (    SingleResultOverview overview : results) {      resultPanel.add(overview);    }  }  revalidate();}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public void test2033092(){  RelativeDateFormat rdf=new RelativeDateFormat();  rdf.setShowZeroDays(false);  rdf.setShowZeroHours(false);  rdf.setMinuteSuffix(":");  rdf.setHourSuffix(":");  rdf.setSecondSuffix("");  DecimalFormat hoursFormatter=new DecimalFormat();  hoursFormatter.setMaximumFractionDigits(0);  hoursFormatter.setMaximumIntegerDigits(2);  hoursFormatter.setMinimumIntegerDigits(2);  rdf.setHourFormatter(hoursFormatter);  DecimalFormat minsFormatter=new DecimalFormat();  minsFormatter.setMaximumFractionDigits(0);  minsFormatter.setMaximumIntegerDigits(2);  minsFormatter.setMinimumIntegerDigits(2);  rdf.setMinuteFormatter(minsFormatter);  DecimalFormat secondsFormatter=new DecimalFormat();  secondsFormatter.setMaximumFractionDigits(0);  secondsFormatter.setMaximumIntegerDigits(2);  secondsFormatter.setMinimumIntegerDigits(2);  rdf.setSecondFormatter(secondsFormatter);  String s=rdf.format(new Date(2 * 60L * 60L* 1000L + 122500L));  assertEquals("02:02:02",s);}  }
class C{  private void saveSelection(){  log.info("");  miniTable.editingStopped(new ChangeEvent(this));  ArrayList<Integer> results=new ArrayList<Integer>();  selection=null;  int rows=miniTable.getRowCount();  for (int i=0; i < rows; i++) {    IDColumn id=(IDColumn)miniTable.getValueAt(i,0);    if (id != null && id.isSelected())     results.add(id.getRecord_ID());  }  if (results.size() == 0)   return;  log.config("Selected #" + results.size());  selection=results;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static List<String> readLines(InputStream input,String encoding) throws IOException {  return readLines(input,Charsets.toCharset(encoding));}  }
class C{  public static DataStream<Tuple2<Integer,String>> window(DataStream<Tuple2<Integer,String>> stream){  return stream.timeWindowAll(Time.of(20,seconds)).sum(0);}  }
class C{  public JobManagerException(Throwable nested){  super(nested);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public AmqpMessage receiveNoWait() throws Exception {  checkClosed();  return prefetch.poll();}  }
class C{  public java.lang.String toString(){  return null;}  }
class C{  public static InetAddress dnsResolveFromCache(String host) throws UnknownHostException {  if ((host == null) || host.isEmpty())   return null;  host=host.toLowerCase().trim();  InetAddress ip=NAME_CACHE_HIT.get(host);  if (ip != null) {    cacheHit_Hit++;    return ip;  }  cacheHit_Miss++;  if (NAME_CACHE_MISS.containsKey(host)) {    cacheMiss_Hit++;    return null;  }  cacheMiss_Miss++;  throw new UnknownHostException("host not in cache");}  }
class C{  public void start(ClassPool pool) throws NotFoundException {  classPool=pool;  CtClass c=pool.get(sampleClass);  forwardMethod=c.getDeclaredMethod("forward");  forwardStaticMethod=c.getDeclaredMethod("forwardStatic");  proxyConstructorParamTypes=pool.get(new String[]{"javassist.tools.rmi.ObjectImporter","int"});  interfacesForProxy=pool.get(new String[]{"java.io.Serializable","javassist.tools.rmi.Proxy"});  exceptionForProxy=new CtClass[]{pool.get("javassist.tools.rmi.RemoteException")};}  }
class C{  @Inline public static boolean testAndMark(ObjectReference object){  Word oldValue, newValue;  do {    oldValue=VM.objectModel.prepareAvailableBits(object);    if (isHeaderMarked(oldValue)) {      return false;    }    newValue=oldValue.or(MARK_BIT_MASK);  } while (!VM.objectModel.attemptAvailableBits(object,oldValue,newValue));  return true;}  }
class C{  public VALUE put(long key,VALUE value){  int hash=hash(key);  int i=indexFor(hash,table.length);  for (LongEntry<VALUE> e=table[i]; e != null; e=e.next) {    if (e.hash == hash && key == e.key) {      VALUE oldValue=e.value;      e.value=value;      return oldValue;    }  }  modCount++;  addEntry(hash,key,value,i);  return null;}  }
class C{  private void decayAllSynapses(){  for (  Neuron n : getNeuronList()) {    for (    Synapse synapse : n.getFanIn()) {      synapse.decay(synpaseDecayPercent);    }  }}  }
class C{  public void configureTable(JTable table){  table.getTableHeader().setReorderingAllowed(true);  table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);  for (int i=0; i < table.getColumnCount(); i++) {    int width=getPreferredWidth(i);    table.getColumnModel().getColumn(i).setPreferredWidth(width);  }  setColumnToHoldButton(table,PLAYBUTTONCOL,largestWidthButton(PLAYBUTTONCOL));  setColumnToHoldButton(table,REPLACEBUTTONCOL,largestWidthButton(REPLACEBUTTONCOL));}  }
class C{  public static int direction(double x1,double y1,double x2,double y2){  int direction=0;  double vx=x2 - x1;  double vy=y2 - y1;  if (vy < vx && vx > -vy) {    direction=OUT_RIGHT;  } else   if (vy > vx && vy > -vx) {    direction=OUT_TOP;  } else   if (vx < vy && vx < -vy) {    direction=OUT_LEFT;  } else {    direction=OUT_BOTTOM;  }  return direction;}  }
class C{  @Override public void write(byte b[],int off,int len) throws IOException {  if (debug > 1) {    System.out.println("write, bufferCount = " + bufferCount + " len = "+ len+ " off = "+ off);  }  if (debug > 2) {    System.out.print("write(");    System.out.write(b,off,len);    System.out.println(")");  }  if (closed)   throw new IOException("Cannot write to a closed output stream");  if (len == 0)   return;  if (len <= (buffer.length - bufferCount)) {    System.arraycopy(b,off,buffer,bufferCount,len);    bufferCount+=len;    return;  }  flushToGZip();  if (len <= (buffer.length - bufferCount)) {    System.arraycopy(b,off,buffer,bufferCount,len);    bufferCount+=len;    return;  }  writeToGZip(b,off,len);}  }
class C{  private void addDueChallengesByCategory(List<Long> dueChallenges,long categoryId){  Date now=new Date();  Date timebox;  for (int stage=1; stage <= 6; stage++) {    List<Completion> completedInStage;    completedInStage=mCompletionDataSource.findByUserAndStage(mUser,stage);    timebox=SettingsDataSource.getTimeboxByStage(mUser.getSettings(),stage);    for (    Completion completed : completedInStage) {      Date lastCompleted=completed.getLastCompleted();      if ((now.getTime() - lastCompleted.getTime() >= timebox.getTime()) && (categoryId == CategoryDataSource.CATEGORY_ID_ALL || categoryId == completed.getChallenge().getCategoryId())) {        dueChallenges.add(completed.getChallengeId());      }    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private State applyPatch(State current,State patch){  ServiceUtils.logInfo(this,"Moving to stage %s",patch.taskState.stage);  PatchUtils.patchState(current,patch);  return current;}  }
class C{  public void writeLine(long time,float[] column){  String str=Long.toString(time);  for (int i=0; i < column.length; ++i) {    str+=", " + column[i];  }  writer.println(str);}  }
class C{  @Nullable protected PsiElement processRef(PsiReference ref,String newName){  return ref.handleElementRename(newName);}  }
class C{  private static void removeAll(final BreakpointManager manager){  final Set<BreakpointAddress> addresses=new HashSet<BreakpointAddress>();  for (  final Breakpoint breakpoint : manager.getBreakpoints(BreakpointType.REGULAR)) {    addresses.add(breakpoint.getAddress());  }  CGraphDebugger.removeBreakpoints(addresses,manager);}  }
class C{  public void startElement(XmlNamespace namespace,String name,Collection<Attribute> attrs,Collection<? extends XmlNamespace> namespaceDecls) throws IOException {  if (elementStack.size() == 1) {    writeBeginOutput();    if (shouldWriteHeaderAndFooter()) {      writeHeader(encoding);    }  }  endOpenTag();  Element element;  if (namespace != null) {    element=createElement(namespace.alias,namespace.uri,name);  } else {    element=createElement(null,null,name);  }  Element parentElement=currentElement();  if (parentElement != null) {    element.xmlLang=parentElement.xmlLang;    element.unformattedChildren=parentElement.unformattedChildren;    if (parentElement.repeatingCount != Element.NOT_REPEATING) {      element.repeatingIndex=parentElement.repeatingCount++;    }  }  elementStack.push(element);  if (nextDefaultNamespace != null) {    XmlNamespace defaultNs=new XmlNamespace(nextDefaultNamespace);    defaultNamespace=nextDefaultNamespace;    element.addNamespace(defaultNs);    nextDefaultNamespace=null;  }  if (namespaceDecls != null) {    for (    XmlNamespace ns : namespaceDecls) {      ensureNamespace(ns);    }  }  if (namespace != null) {    element.nsAlias=ensureNamespace(namespace);  }  writeOpenTagStart(element.nsAlias,name);  for (  XmlNamespace ns : element.nsDecls) {    if (ns.alias != null && ns.alias.length() > 0) {      writeAttribute("xmlns",ns.alias,ns.uri);    } else {      writeAttribute(null,"xmlns",ns.uri);    }  }  if (attrs != null) {    for (    Attribute attr : attrs) {      if (attr.name.equals("lang") && "xml".equals(attr.nsAlias)) {        if (attr.value.equals(element.xmlLang)) {          continue;        } else {          element.xmlLang=attr.value;        }      }      writeAttribute(attr.nsAlias,attr.name,attr.value);    }  }  if (flags.contains(WriterFlags.EXPAND_EMPTY)) {    endOpenTag();  }}  }
class C{  protected int writeObject(STWriter out,InstanceScope scope,Object o,String[] options){  int n=0;  if (o == null) {    if (options != null && options[Option.NULL.ordinal()] != null) {      o=options[Option.NULL.ordinal()];    } else     return 0;  }  if (o instanceof ST) {    scope=new InstanceScope(scope,(ST)o);    if (options != null && options[Option.WRAP.ordinal()] != null) {      try {        out.writeWrap(options[Option.WRAP.ordinal()]);      } catch (      IOException ioe) {        errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe);      }    }    n=exec(out,scope);  } else {    o=convertAnythingIteratableToIterator(scope,o);    try {      if (o instanceof Iterator)       n=writeIterator(out,scope,o,options); else       n=writePOJO(out,scope,o,options);    } catch (    IOException ioe) {      errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe,o);    }  }  return n;}  }
class C{  public I18nSet(String enUs,String deDe,String frFr){  super();  this.enUs=enUs;  this.deDe=deDe;  this.frFr=frFr;}  }
class C{  @GET @Path("table/{tableName}/inputs/graph") @Consumes(Servlets.JSON_MEDIA_TYPE) @Produces(Servlets.JSON_MEDIA_TYPE) public Response inputsGraph(@Context HttpServletRequest request,@PathParam("tableName") String tableName){  LOG.info("Fetching lineage inputs graph for tableName={}",tableName);  AtlasPerfTracer perf=null;  try {    if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {      perf=AtlasPerfTracer.getPerfTracer(PERF_LOG,"DataSetLineageResource.inputsGraph(" + tableName + ")");    }    final String jsonResult=lineageService.getInputsGraph(tableName);    JSONObject response=new JSONObject();    response.put(AtlasClient.REQUEST_ID,Servlets.getRequestId());    response.put("tableName",tableName);    response.put(AtlasClient.RESULTS,new JSONObject(jsonResult));    return Response.ok(response).build();  } catch (  EntityNotFoundException e) {    LOG.error("table entity not found for {}",tableName);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.NOT_FOUND));  }catch (  DiscoveryException|IllegalArgumentException e) {    LOG.error("Unable to get lineage inputs graph for table {}",tableName,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.BAD_REQUEST));  }catch (  Throwable e) {    LOG.error("Unable to get lineage inputs graph for table {}",tableName,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.INTERNAL_SERVER_ERROR));  } finally {    AtlasPerfTracer.log(perf);  }}  }
class C{  public void testRecognizeSymmetricNat_Local_v4_Public_v6() throws Exception {  Response testIResponse1=MessageFactory.create3489BindingResponse(mappedClientAddress_v6,responseServerAddress_v4,responseServerAddress_v4);  Response testIResponse2=null;  Response testIResponse3=MessageFactory.create3489BindingResponse(mappedClientAddress_v6_Port2,responseServerAddress_v4,responseServerAddress_v4);  responseServer_v4.addMessage(testIResponse1);  responseServer_v4.addMessage(testIResponse2);  responseServer_v4.addMessage(testIResponse3);  StunDiscoveryReport expectedReturn=new StunDiscoveryReport();  expectedReturn.setNatType(StunDiscoveryReport.SYMMETRIC_NAT);  expectedReturn.setPublicAddress(mappedClientAddress_v6);  StunDiscoveryReport actualReturn=stunAddressDiscoverer_v4.determineAddress();  assertEquals("The StunAddressDiscoverer failed for a no-udp environment.",expectedReturn,actualReturn);}  }
class C{  public Node(Animator animation){  this.animation=animation;}  }
class C{  @SuppressWarnings("all") protected void writeSignatureBlock(byte[] signature,OutputStream out) throws IOException {  try {    SignerInfo signerInfo=new SignerInfo(new X500Name(cert.getIssuerX500Principal().getName()),cert.getSerialNumber(),AlgorithmId.get(digestAlg),AlgorithmId.get("RSA"),signature);    PKCS7 pkcs7=new PKCS7(new AlgorithmId[]{AlgorithmId.get(digestAlg)},new ContentInfo(ContentInfo.DATA_OID,null),new X509Certificate[]{cert},new SignerInfo[]{signerInfo});    pkcs7.encodeSignedData(out);  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }}  }
class C{  public static void uiImpl(){  UIManager.put("ComboBox.scrollPaneBorder",new BorderUIResource(BorderFactory.createEmptyBorder(2,0,4,0)));  UIManager.put("ComboBox.background",new ColorUIResource(Color.white));  UIManager.put("ComboBox.disabledBackground",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("ComboBox.buttonBackground",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("ComboBox.selectionForeground",new ColorUIResource(BeautyEyeLNFHelper.commonSelectionForegroundColor));  UIManager.put("ComboBox.selectionBackground",new ColorUIResource(BeautyEyeLNFHelper.commonSelectionBackgroundColor));  UIManager.put("ComboBox.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("ComboBox.padding",new javax.swing.plaf.InsetsUIResource(1,0,1,0));  UIManager.put("ComboBox.squareButton",true);  BorderUIResource border=new BorderUIResource(BorderFactory.createEmptyBorder(0,4,0,0));  UIManager.put("ComboBox.border",border);  UIManager.put("ComboBox.editorBorder",border);  UIManager.put("ComboBoxUI",org.jb2011.lnf.beautyeye.ch14_combox.BEComboBoxUI.class.getName());  UIManager.put("ComboBox.popupOffsetX",-3);  UIManager.put("ComboBox.popupOffsetY",2);}  }
class C{  public void w(String msg){  Log.w(mTag,msg);}  }
class C{  private BlockSnapshot findSnapshot(String snapshotId,String openstackTenantId){  BlockSnapshot snapshot=(BlockSnapshot)getCinderHelper().queryByTag(URI.create(snapshotId),getUserFromContext(),BlockSnapshot.class);  return snapshot;}  }
class C{  public int lastIndexOf(int data){  for (int i=size - 1; i >= 0; i--) {    if (array[i] == data) {      return i;    }  }  return -1;}  }
class C{  public HashCodeBuilder append(final boolean value){  iTotal=iTotal * iConstant + (value ? 0 : 1);  return this;}  }
class C{  public int actualSize(){  return handle.length;}  }
class C{  public static void execute(ExecutablePool pool,String region,Function function,ServerRegionFunctionExecutor serverRegionExecutor,byte hasResult){  AbstractOp op=new ExecuteRegionFunctionNoAckOpImpl(region,function,serverRegionExecutor,hasResult);  try {    if (logger.isDebugEnabled()) {      logger.debug("ExecuteRegionFunctionNoAckOp#execute : Sending Function Execution Message: {} to Server using pool: {}",op.getMessage(),pool);    }    pool.execute(op);  } catch (  Exception ex) {    if (logger.isDebugEnabled()) {      logger.debug("ExecuteRegionFunctionNoAckOp#execute : Exception occured while Sending Function Execution Message: {} to server using pool: {}",op.getMessage(),pool,ex);    }    if (ex.getMessage() != null)     throw new FunctionException(ex.getMessage(),ex); else     throw new FunctionException("Unexpected exception during function execution:",ex);  }}  }
class C{  public boolean isAttribute(){  return attribute;}  }
class C{  public void add(final Modulo2Equation equation){  int i=0, j=0, k=0;  final int s=variables.size(), t=equation.variables.size();  final int[] a=variables.elements(), b=equation.variables.elements(), result=new int[s + t];  if (t != 0 && s != 0) {    for (; ; ) {      if (a[i] < b[j]) {        result[k++]=a[i++];        if (i == s)         break;      } else       if (a[i] > b[j]) {        result[k++]=b[j++];        if (j == t)         break;      } else {        i++;        j++;        if (i == s)         break;        if (j == t)         break;      }    }  }  while (i < s)   result[k++]=a[i++];  while (j < t)   result[k++]=b[j++];  c^=equation.c;  variables.size(k);  System.arraycopy(result,0,variables.elements(),0,k);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public static boolean isProximityNode(final AbstractZyGraph<?,?> graph,final Node node){  Preconditions.checkNotNull(graph,"Graph argument can not be null");  Preconditions.checkNotNull(node,"Node argument can not be null");  return graph.getGraph().getRealizer(node) instanceof ZyProximityNodeRealizer<?>;}  }
class C{  public static double tTest(double t,double nu){  double a=nu / 2.0;  double b=0.5;  double x=nu / (nu + t * t);  return 1.0 - betai(a,b,x);}  }
class C{  private void log(final PrintStream logger,final String text){  logger.println("[Marathon] " + text);}  }
class C{  public boolean hasMonetaryCost(){  return mProperties.mHasMonetaryCost;}  }
class C{  public ExecutableSequence(Sequence sequence){  this.sequence=sequence;  this.executionResults=new Execution(sequence);  this.hasNullInput=false;  this.variableMap=new IdentityMultiMap<>();}  }
class C{  public static PlacemarkAttributes createPlacemarkAttributes(String symbolCode,SparseArray<String> modifiers,SparseArray<String> attributes){  PlacemarkAttributes placemarkAttributes=new PlacemarkAttributes();  SymbolBitmapFactory factory=new SymbolBitmapFactory(symbolCode,modifiers,attributes,placemarkAttributes);  placemarkAttributes.setImageSource(ImageSource.fromBitmapFactory(factory));  return placemarkAttributes;}  }
class C{  private StringTextStore(String text){  super();  fText=text != null ? text : "";  fCopyLimit=fText.length() > SMALL_TEXT_LIMIT ? fText.length() / 2 : 0;}  }
class C{  private void buildPost(FacesContext context,UIComponent component) throws IOException {  ResponseWriter writer=context.getResponseWriter();  writer.startElement("script",component);  writer.writeText("<![CDATA[\n",null);  String formMethodName=component.getClientId(context) + "_post";  String formMethodText="function " + formMethodName + "(evt) {\n";  writer.writeText(formMethodText,null);  writer.writeText("  var control = evt.target;\n",null);  writer.writeText("  var form = getForm(control);\n",null);  writer.writeText("  var postData = getPostData(form, control);\n",null);  writer.writeText("  var url = \"",null);  writer.writeText(getActionStr(context),null);  writer.writeText("\";\n",null);  writer.writeText("  sendRequest(url, postData);\n",null);  writer.writeText("}\n",null);  writer.writeText("//]]>\n",null);  writer.endElement("script");}  }
class C{  private void consume(Trie trie,int j,int l){  if (inputLattice.distance(j,l) == 1) {    Node<Token> inputNode=sentence.getNode(j);    for (    Arc<Token> arc : inputNode.getOutgoingArcs()) {      int word=arc.getLabel().getWord();      Trie nextTrie;      if ((nextTrie=trie.match(word)) != null) {        addToChart(nextTrie,arc.getHead().id(),i == j);      }    }  }  Cell cell=cells.get(j,l);  if (cell != null) {    for (    int id : cell.getKeySet()) {      Trie nextTrie=trie.match(id);      if (nextTrie != null) {        SuperNode superNode=cell.getSuperNode(id);        nodeStack.add(superNode);        addToChart(nextTrie,superNode.end(),i == j);        nodeStack.remove(nodeStack.size() - 1);      }    }  }}  }
class C{  public static void doFakeEntityExplosion(EntityPlayer entityplayer){  World world=entityplayer.worldObj;  world.spawnParticle("hugeexplosion",entityplayer.posX,entityplayer.posY,entityplayer.posZ,0.0D,0.0D,0.0D);  world.playSoundAtEntity(entityplayer,"random.explode",1.0F,1.0F);}  }
class C{  public void onConfigurationChanged(){  int curFirst=pager.getCurrentScreen() * PAGE_SIZE;  calPageSize();  int newPage=curFirst / PAGE_SIZE;  removeViewAt(1);  afterPlatformListGot();  pager.setCurrentScreen(newPage);}  }
class C{  public ScriptFilterGroup saveFilterGroup(ScriptFilterGroup sfg){  return dao.saveOrUpdate(sfg);}  }
class C{  @Nullable public static File findInPath(@NotNull String fileBaseName,boolean logDetails){  return findInPath(fileBaseName,logDetails,null);}  }
class C{  protected void initInfo(int record_id,String value){  if (!(record_id == 0) && value != null && value.length() > 0) {    log.severe("Received both a record_id and a value: " + record_id + " - "+ value);  }  if (record_id != 0) {    fieldID=record_id;    String trxName=Trx.createTrxName();    MOrder o=new MOrder(Env.getCtx(),record_id,trxName);    fIsSOTrx.setValue(o.isSOTrx());    fIsDelivered.setValue(o.isDelivered());    o=null;    Trx.get(trxName,false).close();  } else {    String id;    id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_BPartner_ID",true);    if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0))     fBPartner_ID.setValue(new Integer(id));    if (value != null && value.length() > 0) {      fDocumentNo.setValue(value);    } else {      id=Env.getContext(Env.getCtx(),p_WindowNo,p_TabNo,"C_Order_ID",true);      if (id != null && id.length() != 0 && (new Integer(id).intValue() > 0)) {        fieldID=new Integer(id).intValue();        String trxName=Trx.createTrxName();        MOrder o=new MOrder(Env.getCtx(),record_id,trxName);        fIsSOTrx.setValue(o.isSOTrx());        fIsDelivered.setValue(o.isDelivered());        o=null;        Trx.get(trxName,false).close();      }    }  }  return;}  }
class C{  boolean sendQueue(List list,Role role){  SendQueueOperation op=new SendQueueOperation(getDistributionManager(),this,list,role);  return op.distribute();}  }
class C{  public Shape createRoundRectangle(final int x,final int y,final int w,final int h,final CornerSize size,final CornerStyle topLeft,final CornerStyle bottomLeft,final CornerStyle bottomRight,final CornerStyle topRight){  return createRoundRectangleInternal(x,y,w,h,size.getRadius(w,h),topLeft,bottomLeft,bottomRight,topRight);}  }
class C{  public Credentials(String url,String applicationId){  this.url=url;  this.applicationId=applicationId;}  }
class C{  public boolean loggedIn(){  return _user != null && _token != null;}  }
class C{  public Entry<V> next(){  if (!hasNext)   throw new NoSuchElementException();  if (!valid)   throw new IllegalStateException("#iterator() cannot be used nested.");  long[] keyTable=map.keyTable;  if (nextIndex == INDEX_ZERO) {    entry.key=0;    entry.value=map.zeroValue;  } else {    entry.key=keyTable[nextIndex];    entry.value=map.valueTable[nextIndex];  }  currentIndex=nextIndex;  findNextIndex();  return entry;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.280 -0500",hash_original_method="17353DC9A8A29F2A1F6857B45DCA3F35",hash_generated_method="A0B5CDDAE904CD93941B6BE702AD818C") public void doUpdateVisitedHistory(WebView view,String url,boolean isReload){}  }
class C{  private void addHyperlinkToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,true);}  }
class C{  public void deprecatedMethod(){}  }
class C{  public MovieSelectionModel(){}  }
class C{  public boolean containsPoly(String signature){  SootMethod method=SootUtils.resolveMethod(Scene.v().getSootClass(SootUtils.grabClass(signature)),signature);  return containsPoly(method);}  }
class C{  protected void onHeaderAdded(ListItemViewModel viewModel,int position){}  }
class C{  protected void fireAreaInvalidated(Rectangle2D.Double r){  Point p1=getView().drawingToView(new Point2D.Double(r.x,r.y));  Point p2=getView().drawingToView(new Point2D.Double(r.x + r.width,r.y + r.height));  fireAreaInvalidated(new Rectangle(p1.x,p1.y,p2.x - p1.x,p2.y - p1.y));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public List<String> parseNormal(List<String> args){  return doParse(args,true);}  }
class C{  public OMText createLabel(Geo g1,Geo g2,double dist,double cumulativeDist,Length distanceUnits){  Geo mid;switch (getLineType()) {case LINETYPE_STRAIGHT:    double lat=(g1.getLatitude() + g2.getLatitude()) / 2.0;  double lon=(g1.getLongitude() + g2.getLongitude()) / 2.0;mid=new Geo(lat,lon);break;case LINETYPE_RHUMB:System.err.println("Rhumb distance calculation not implemented.");case LINETYPE_GREATCIRCLE:case LINETYPE_UNKNOWN:default :mid=g1.midPoint(g2);}String text=(df.format(distanceUnits.fromRadians(dist))) + " (" + (df.format(distanceUnits.fromRadians(cumulativeDist)))+ ") "+ distanceUnits.getAbbr();OMText omtext=new OMText(mid.getLatitude(),mid.getLongitude(),text,OMText.JUSTIFY_LEFT);return omtext;}  }
class C{  public SubjectKeyIdentifierExtension(byte[] octetString) throws IOException {  id=new KeyIdentifier(octetString);  this.extensionId=PKIXExtensions.SubjectKey_Id;  this.critical=false;  encodeThis();}  }
class C{  public static WebXmlVersion valueOf(Element rootElement){  WebXmlVersion result=null;  String value=rootElement.getAttributeValue("version");  if ("2.4".equals(value)) {    result=WebXmlVersion.V2_4;  } else   if ("2.5".equals(value)) {    result=WebXmlVersion.V2_5;  } else   if ("3.0".equals(value)) {    result=WebXmlVersion.V3_0;  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.784 -0500",hash_original_method="4B70092235E7A40F6E106A246C1B1B53",hash_generated_method="D91682FC0B2A992D45586C42FA5F0135") public String name(){  return theType.name();}  }
class C{  public static boolean isTest(){  return _testTime > 0;}  }
class C{  private View makeAndAddView(int position,int y,boolean flowDown,boolean selected){  View child;  onChildCreated(position,flowDown);  if (!mDataChanged) {    child=mRecycleBin.getActiveView(position);    if (child != null) {      setupChild(child,position,y,flowDown,selected,true);      return child;    }  }  child=obtainView(position,mIsScrap);  setupChild(child,position,y,flowDown,selected,mIsScrap[0]);  return child;}  }
class C{  public String localName(){  return theType.localName();}  }
class C{  @Override public boolean showEdgeLabelsDefault(){  return false;}  }
class C{  protected void resetFrame(){  lastDispose=dispose;  lastRect=new Rectangle(ix,iy,iw,ih);  lastImage=image;  lastBgColor=bgColor;  lct=null;}  }
class C{  public static int putShort(ByteBuffer buf,int offset,short val){  if (littleEndian) {    val=Short.reverseBytes(val);  }  if (buf.isDirect()) {    theUnsafe.putShort(((DirectBuffer)buf).address() + offset,val);  } else {    theUnsafe.putShort(buf.array(),BYTE_ARRAY_BASE_OFFSET + buf.arrayOffset() + offset,val);  }  return offset + Bytes.SIZEOF_SHORT;}  }
class C{  private int handleG(String value,DoubleMetaphoneResult result,int index,boolean slavoGermanic){  if (charAt(value,index + 1) == 'H') {    index=handleGH(value,result,index);  } else   if (charAt(value,index + 1) == 'N') {    if (index == 1 && isVowel(charAt(value,0)) && !slavoGermanic) {      result.append("KN","N");    } else     if (!contains(value,index + 2,2,"EY") && charAt(value,index + 1) != 'Y' && !slavoGermanic) {      result.append("N","KN");    } else {      result.append("KN");    }    index=index + 2;  } else   if (contains(value,index + 1,2,"LI") && !slavoGermanic) {    result.append("KL","L");    index+=2;  } else   if (index == 0 && (charAt(value,index + 1) == 'Y' || contains(value,index + 1,2,ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {    result.append('K','J');    index+=2;  } else   if ((contains(value,index + 1,2,"ER") || charAt(value,index + 1) == 'Y') && !contains(value,0,6,"DANGER","RANGER","MANGER") && !contains(value,index - 1,1,"E","I")&& !contains(value,index - 1,3,"RGY","OGY")) {    result.append('K','J');    index+=2;  } else   if (contains(value,index + 1,1,"E","I","Y") || contains(value,index - 1,4,"AGGI","OGGI")) {    if ((contains(value,0,4,"VAN ","VON ") || contains(value,0,3,"SCH")) || contains(value,index + 1,2,"ET")) {      result.append('K');    } else     if (contains(value,index + 1,4,"IER")) {      result.append('J');    } else {      result.append('J','K');    }    index+=2;  } else   if (charAt(value,index + 1) == 'G') {    index+=2;    result.append('K');  } else {    index++;    result.append('K');  }  return index;}  }
class C{  public void crearHistoricoUDOC(HistoricoUDOCVO historico){  historicoDBEntity.insertHistoricoUdoc(historico);}  }
class C{  @ObjectiveCName("pauseUploadWithRid:") public void pauseUpload(long rid){  modules.getFilesModule().pauseUpload(rid);}  }
class C{  public void addTask(Runnable task){  taskList.add(task);}  }
class C{  public static Storagetransfer createStorageTransferClient() throws IOException {  HttpTransport httpTransport=Utils.getDefaultTransport();  JsonFactory jsonFactory=Utils.getDefaultJsonFactory();  GoogleCredential credential=GoogleCredential.getApplicationDefault(httpTransport,jsonFactory);  return createStorageTransferClient(httpTransport,jsonFactory,credential);}  }
class C{  public AttachmentFaultySoapResponse(){  requestFileName="getstate.query";  responseFile="attachm-faulty-soap.query";  responseContentType="multipart/related; charset=UTF-8; " + "boundary=jetty771207119h3h10dty";}  }
class C{  protected ShaderVar addVarying(IGlobalShaderVar var){  return addVarying(var.getVarString(),var.getDataType());}  }
class C{  public void mergeWith(Database otherDb) throws ModelException {  for (Iterator<Table> it=otherDb.tables.iterator(); it.hasNext(); ) {    Table table=(Table)it.next();    if (findTable(table.getName()) != null) {      throw new ModelException("Cannot merge the models because table " + table.getName() + " already defined in this model");    }    try {      addTable((Table)table.clone());    } catch (    CloneNotSupportedException ex) {    }  }}  }
class C{  private boolean hasMethod(IType type,String name) throws JavaModelException {  IMethod[] methods=type.getMethods();  for (int i=0; i < methods.length; i++) {    if (name.equals(methods[i].getElementName()))     return true;  }  return false;}  }
class C{  public static void restartApplicationWithIntent(Activity activity,Intent intent){  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);  activity.finish();  activity.startActivity(intent);  killCurrentProcess();}  }
class C{  public static boolean checkElementNumber(Iterator<?> it,int n){  int i=0;  while (it.hasNext()) {    if (it.next() == null) {      return false;    }    i++;  }  return (i == n);}  }
class C{  private static XMLSignatureInput resolveInput(RetrievalMethod rm,String baseURI,boolean secureValidation) throws XMLSecurityException {  Attr uri=rm.getURIAttr();  Transforms transforms=rm.getTransforms();  ResourceResolver resRes=ResourceResolver.getInstance(uri,baseURI,secureValidation);  XMLSignatureInput resource=resRes.resolve(uri,baseURI,secureValidation);  if (transforms != null) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"We have Transforms");    }    resource=transforms.performTransforms(resource);  }  return resource;}  }
class C{  public String toUrl(){  StringBuilder url=new StringBuilder(requestUrl).append("?");  for (  Map.Entry<String,String> param : params.entrySet()) {    url.append(param.getKey()).append("=").append(param.getValue()).append("&");  }  url.deleteCharAt(url.lastIndexOf("&"));  return url.toString();}  }
class C{  protected void addMapPanelChild(MapPanelChild mpc){  add((Component)mpc,mpc.getPreferredLocation());}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public boolean isModifierSynchronzied(){  return isModifierSynchronized();}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof SystemMemberBridgeServerJmxImpl)) {    return false;  }  SystemMemberBridgeServerJmxImpl other=(SystemMemberBridgeServerJmxImpl)obj;  return this.getMBeanName().equals(other.getMBeanName());}  }
class C{  public void register(Label label) throws Exception {  if (label.isAttribute()) {    registerAttribute(label);  } else   if (label.isText()) {    registerText(label);  } else {    registerElement(label);  }}  }
class C{  public boolean isModifyOrUpgradeSubscriptionPending(VOSubscription subscription){  ArgumentValidator.notNull("subscription",subscription);  TriggerProcessIdentifiers.validateObjectKey(subscription);  return executeCheckForModifyOrUpgradeSubscriptionPending(Arrays.asList(TriggerType.MODIFY_SUBSCRIPTION,TriggerType.UPGRADE_SUBSCRIPTION),subscription.getKey());}  }
class C{  public String attributeIndicesTipText(){  return "Specify range of attributes to act on." + " This is a comma separated list of attribute indices, with" + " \"first\" and \"last\" valid values. Specify an inclusive"+ " range with \"-\". E.g: \"first-3,5,6-10,last\".";}  }
class C{  public MemoryActivityViewerFrame(String title,String imageName,boolean resizable,boolean closable,boolean maximizable,boolean iconifiable,int chip,EmulatorUI ui,DebuggableMemory memory){  super(title,imageName,resizable,closable,maximizable,iconifiable,chip,ui);  this.isMaster=true;  this.memory=memory;  this.trackingMemoryActivityListener=new TrackingMemoryActivityListener(memory.getNumPages(),memory.getPageSize());  memory.addActivityListener(trackingMemoryActivityListener);  getContentPane().add(new MemoryMapComponent(trackingMemoryActivityListener.getPageActivityMap()));  startTimer();}  }
class C{  public List<String> removeNetworkSystemTransportZone(Network tzone,String uri) throws IOException {  tzone.removeNetworkSystems(Collections.singletonList(uri));  ArrayList<String> toRemove=new ArrayList<String>();  if (tzone.getNetworkSystems().isEmpty()) {    List<String> userCreatedEndPoints=TransportZoneReconciler.getUserCreatedEndPoints(tzone);    if (userCreatedEndPoints.isEmpty() && !tzone.assignedToVarray()) {      _log.info("Removing network {}",tzone.getLabel());      toRemove.addAll(tzone.retrieveEndpoints());      NetworkAssociationHelper.handleEndpointsRemoved(tzone,toRemove,dbClient,_coordinator);      dbClient.markForDeletion(tzone);      recordTransportZoneEvent(tzone,OperationTypeEnum.DELETE_NETWORK.getEvType(true),OperationTypeEnum.DELETE_NETWORK.getDescription());    } else {      _log.info("Network {} is changed by the user and will " + "not be removed. Discovered end points will be removed.",tzone.getLabel());      for (      String pt : tzone.retrieveEndpoints()) {        if (!userCreatedEndPoints.contains(pt)) {          toRemove.add(pt);        }      }      tzone.removeEndpoints(toRemove);      NetworkAssociationHelper.handleEndpointsRemoved(tzone,toRemove,dbClient,_coordinator);      _log.info("Discovered endpoints removed {}",toRemove.toArray());      dbClient.persistObject(tzone);      recordTransportZoneEvent(tzone,OperationTypeEnum.UPDATE_NETWORK.getEvType(true),OperationTypeEnum.UPDATE_NETWORK.getDescription());    }  } else {    _log.info("Removing network {} from network system {}",tzone.getLabel(),uri);    dbClient.persistObject(tzone);    recordTransportZoneEvent(tzone,OperationTypeEnum.UPDATE_NETWORK.getEvType(true),OperationTypeEnum.UPDATE_NETWORK.getDescription());  }  return toRemove;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void disableColor(){  this.isColorDisabled=true;}  }
class C{  protected ActionDefinitionImpl(){  super();}  }
class C{  public DrawerBuilder withDrawerWidthPx(int drawerWidthPx){  this.mDrawerWidth=drawerWidthPx;  return this;}  }
class C{  public void detachNodeIterator(NodeIterator it){  iterators.remove(it);}  }
class C{  public static int magnitude(int v){  return Integer.SIZE - Integer.numberOfLeadingZeros(v);}  }
class C{  public String optString(String key){  return this.optString(key,"");}  }
class C{  void calculateValue(float fraction){  mAnimatedValue=mKeyframeSet.getValue(fraction);}  }
class C{  public String toString(){  final String TAB=" ";  StringBuffer retValue=new StringBuffer();  retValue.append("FlagCriterion ( ").append("flag = ").append(this.flag).append(TAB).append("operator = ").append(this.operator).append(TAB).append(" )");  return retValue.toString();}  }
class C{  protected void textElement(String text){}  }
class C{  public void weinerHopfSolution(Trainable network){  long start=System.nanoTime();  double[][] inputMatrix=network.getTrainingSet().getInputData();  double[][] trainingMatrix=network.getTrainingSet().getTargetData();  try {    Factory<?> mf=PrimitiveMatrix.FACTORY;    Builder<?> tmpBuilder=mf.getBuilder(inputMatrix.length,inputMatrix[0].length);    for (int i=0; i < tmpBuilder.countRows(); i++) {      for (int j=0; j < tmpBuilder.countColumns(); j++) {        tmpBuilder.set(i,j,inputMatrix[i][j]);      }    }    BasicMatrix stateMat=(BasicMatrix)tmpBuilder.build();    tmpBuilder=mf.getBuilder(trainingMatrix.length,trainingMatrix[0].length);    for (int i=0; i < tmpBuilder.countRows(); i++) {      for (int j=0; j < tmpBuilder.countColumns(); j++) {        tmpBuilder.set(i,j,trainingMatrix[i][j]);        if (Double.isInfinite(trainingMatrix[i][j]) || Double.isNaN(trainingMatrix[i][j])) {          throw new NumberFormatException("Invalid target" + " values.");        }      }    }    BasicMatrix teachMat=(BasicMatrix)tmpBuilder.build();    fireProgressUpdate("Correlating State Matrix (R = S'S)...",0);    teachMat=stateMat.transpose().multiplyRight(teachMat);    fireProgressUpdate("Cross-Correlating States with Teacher data (P = S'D)...",15);    stateMat=stateMat.transpose().multiplyRight(stateMat);    fireProgressUpdate("Computing Inverse Correlation Matrix...",30);    if (ridgeRegression) {      tmpBuilder=mf.getBuilder((int)stateMat.countRows(),(int)stateMat.countColumns());      for (int i=0, n=(int)stateMat.countColumns(); i < n; i++) {        tmpBuilder.set(i,i,alpha * alpha);      }      BasicMatrix scaleMat=(BasicMatrix)tmpBuilder.build();      stateMat=stateMat.add(scaleMat);    }    stateMat=stateMat.invert();    fireProgressUpdate("Computing Weights...",80);    tmpBuilder=stateMat.multiplyRight(teachMat).copyToBuilder();    BasicMatrix finalMat=(BasicMatrix)tmpBuilder.build();    double[][] wOut=new double[(int)tmpBuilder.countRows()][(int)tmpBuilder.countColumns()];    for (int i=0, n=(int)tmpBuilder.countRows(); i < n; i++) {      for (int j=0, m=(int)tmpBuilder.countColumns(); j < m; j++) {        wOut[i][j]=finalMat.doubleValue(i,j);      }    }    fireProgressUpdate("Setting Weights...",95);    SimnetUtils.setWeights(network.getInputNeurons(),network.getOutputNeurons(),wOut);    fireProgressUpdate("Done!",100);  } catch (  RuntimeException e) {    JOptionPane.showMessageDialog(new JFrame(),"" + "State Correlation Matrix is Singular." + "\nCheck that target values are in range of output units."+ "\nOtherwise, input matrix is rank-deficient.","Training Failed",JOptionPane.ERROR_MESSAGE);    fireProgressUpdate("Training Failed",0);  }  trainingMatrix=null;  inputMatrix=null;  long end=System.nanoTime();  System.out.println("Time: " + (end - start) / Math.pow(10,9));}  }
class C{  public void addEventListener(IRcsServiceRegistrationListener listener){  if (sLogger.isActivated()) {    sLogger.info("Add a service listener");  }synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.addEventListener(listener);  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public static int[] shellSort(int[] list){  return null;}  }
class C{  protected int webCrawl(int level,OutputStream out){  int numPages=0;  LinkedHashSet<URL> stack=backlog.get(level);  int rawStackSize=stack.size();  stack.removeAll(visited);  int stackSize=stack.size();  LinkedHashSet<URL> subStack=new LinkedHashSet<>();  info("Entering crawl at level " + level + " ("+ rawStackSize+ " links total, "+ stackSize+ " new)");  for (  URL u : stack) {    try {      visited.add(u);      PageFetcherResult result=pageFetcher.readPageFromUrl(u);      if (result.httpStatus == 200) {        u=(result.redirectUrl != null) ? result.redirectUrl : u;        URL postUrl=new URL(appendParam(solrUrl.toString(),"literal.id=" + URLEncoder.encode(u.toString(),"UTF-8") + "&literal.url="+ URLEncoder.encode(u.toString(),"UTF-8")));        boolean success=postData(new ByteArrayInputStream(result.content),null,out,result.contentType,postUrl);        if (success) {          info("POSTed web resource " + u + " (depth: "+ level+ ")");          Thread.sleep(delay * 1000);          numPages++;          if (recursive > level && result.contentType.equals("text/html")) {            Set<URL> children=pageFetcher.getLinksFromWebPage(u,new ByteArrayInputStream(result.content),result.contentType,postUrl);            subStack.addAll(children);          }        } else {          warn("An error occurred while posting " + u);        }      } else {        warn("The URL " + u + " returned a HTTP result status of "+ result.httpStatus);      }    } catch (    IOException e) {      warn("Caught exception when trying to open connection to " + u + ": "+ e.getMessage());    }catch (    InterruptedException e) {      throw new RuntimeException();    }  }  if (!subStack.isEmpty()) {    backlog.add(subStack);    numPages+=webCrawl(level + 1,out);  }  return numPages;}  }
class C{  private void foldEverythingUnusable(int cursorOffset){  Vector<Annotation> modifiedAnnotations=new Vector<Annotation>();  for (Iterator<TLAProofPosition> it=foldPositions.iterator(); it.hasNext(); ) {    TLAProofPosition proofPosition=it.next();    try {      if (proofPosition.containsInProofOrStatement(cursorOffset,document)) {        if (proofPosition.getAnnotation().isCollapsed()) {          proofPosition.getAnnotation().markExpanded();          modifiedAnnotations.add(proofPosition.getAnnotation());        }      } else       if (!proofPosition.getAnnotation().isCollapsed()) {        proofPosition.getAnnotation().markCollapsed();        modifiedAnnotations.add(proofPosition.getAnnotation());      }    } catch (    BadLocationException e) {      Activator.getDefault().logError("Error changing expansion state of proofs.",e);    }  }  editor.modifyProjectionAnnotations((Annotation[])modifiedAnnotations.toArray(new ProjectionAnnotation[modifiedAnnotations.size()]));}  }
class C{  public void computeClassic(){  int i=0;  int k=0;  do {    double popSize=0.0;    boolean done=false;    k=i;    do {      double w=intervals.getInterval(i) / mu;      int n=intervals.getLineageCount(i);      if (n < 0)       n=0;      done=intervals.getIntervalType(i) == IntervalType.COALESCENT;      popSize+=w * Binomial.choose2(n);      i++;    } while (i < size && !done);    for (int j=k; j < i; j++) {      populationSize[j]=popSize;    }  } while (i < size);  params=k;  eps=0.0;}  }
class C{  @Override @Direct public void renameTo(String relPath,Result<Boolean> result,WriteOption... options){  _root.renameTo(_path,toAbsolute(relPath),result,options);}  }
class C{  public int lastIndexOf(Object o){  for (int i=size - 1; i >= 0; i--) {    if (o == elementData[i]) {      return i;    }  }  return -1;}  }
class C{  final boolean isUnmatchedRequest(){  return !isData && item == null;}  }
class C{  public boolean hasUTF8Bom(){  if (buffer.length >= 3)   return (buffer[0] == -17 && buffer[1] == -69 && buffer[2] == -65); else   return false;}  }
class C{  public static int coordsToId(Coords c){  return c.getY() * 100000 + c.getX();}  }
class C{  public boolean addMetricCollector(final IGangliaMetricsCollector c){  if (c == null)   throw new IllegalArgumentException();  return metricCollectors.add(c);}  }
class C{  public T caseTAnonymousFormalParameter(TAnonymousFormalParameter object){  return null;}  }
class C{  private void updateUnManagedVolumesWithExportData(Map<String,URI> unManagedVolumeNativeIdToUriMap,List<UnManagedExportMask> unManagedExportMasksToCreate,List<UnManagedExportMask> unManagedExportMasksToUpdate,DbClient dbClient,PartitionManager partitionManager){  Map<String,List<UnManagedExportMask>> volumeToMasksMap=new HashMap<>();  List<UnManagedVolume> unManagedVolumesToUpdate=new ArrayList<UnManagedVolume>();  for (  UnManagedExportMask mask : unManagedExportMasksToUpdate) {    StringSet volumes=mask.getUnmanagedVolumeUris();    for (    String volumeUri : volumes) {      List<UnManagedExportMask> volumeMasks=volumeToMasksMap.get(volumeUri);      if (volumeMasks == null) {        volumeMasks=new ArrayList<>();        volumeToMasksMap.put(volumeUri,volumeMasks);      }      volumeMasks.add(mask);    }  }  for (  UnManagedExportMask mask : unManagedExportMasksToCreate) {    StringSet volumes=mask.getUnmanagedVolumeUris();    for (    String volumeUri : volumes) {      List<UnManagedExportMask> volumeMasks=volumeToMasksMap.get(volumeUri);      if (volumeMasks == null) {        volumeMasks=new ArrayList<>();        volumeToMasksMap.put(volumeUri,volumeMasks);      }      volumeMasks.add(mask);    }  }  for (  URI volumeUri : unManagedVolumeNativeIdToUriMap.values()) {    UnManagedVolume volume=dbClient.queryObject(UnManagedVolume.class,volumeUri);    volume.getInitiatorNetworkIds().clear();    volume.getInitiatorUris().clear();    volume.getUnmanagedExportMasks().clear();    volume.getVolumeCharacterstics().put(UnManagedVolume.SupportedVolumeCharacterstics.IS_VOLUME_EXPORTED.toString(),FALSE);    volume.getVolumeCharacterstics().put(UnManagedVolume.SupportedVolumeCharacterstics.IS_NONRP_EXPORTED.toString(),FALSE);    List<UnManagedExportMask> volumeMasks=volumeToMasksMap.get(volumeUri.toString());    if (volumeMasks != null && !volumeMasks.isEmpty()) {      log.info("Updating volume {} with export data: {} .",volume.getNativeGuid(),volumeMasks);      for (      UnManagedExportMask mask : volumeMasks) {        volume.getInitiatorNetworkIds().addAll(mask.getKnownInitiatorNetworkIds());        volume.getInitiatorUris().addAll(mask.getKnownInitiatorUris());        volume.getUnmanagedExportMasks().add(mask.getId().toString());      }      volume.getVolumeCharacterstics().put(UnManagedVolume.SupportedVolumeCharacterstics.IS_VOLUME_EXPORTED.toString(),TRUE);      volume.getVolumeCharacterstics().put(UnManagedVolume.SupportedVolumeCharacterstics.IS_NONRP_EXPORTED.toString(),TRUE);      unManagedVolumesToUpdate.add(volume);    } else {      log.info("Volume {} does not have export masks.",volume.getNativeGuid());    }  }  if (!unManagedVolumesToUpdate.isEmpty()) {    partitionManager.updateAndReIndexInBatches(unManagedVolumesToUpdate,Constants.DEFAULT_PARTITION_SIZE,dbClient,UNMANAGED_VOLUME);    unManagedVolumesToUpdate.clear();  }}  }
class C{  private List<NamespaceResponse.Namespace> buildPersonalNamespaces(MailboxSession mailboxSession,ImapSession session){  final List<NamespaceResponse.Namespace> personalSpaces=new ArrayList<NamespaceResponse.Namespace>();  String personal="";  if (session.supportMultipleNamespaces()) {    personal=mailboxSession.getPersonalSpace();  }  personalSpaces.add(new NamespaceResponse.Namespace(personal,mailboxSession.getPathDelimiter()));  return personalSpaces;}  }
class C{  public void login(NativeAppDriver driver,String email,String password,String signInButton,boolean isAndroid){  driver.clearInputById(email);  if (!(email.isEmpty())) {    driver.clearInputById(email);  }  driver.clearInputById(password);  if (!(password.isEmpty())) {    driver.clearInputById(password);  }  driver.enterTextToElementById(email,emailId);  if (isAndroid) {    driver.hideKeyboard();  }  driver.enterTextToElementById(password,this.password);  if (isAndroid) {    driver.hideKeyboard();  }  driver.clickElementById(signInButton);}  }
class C{  @SuppressWarnings("unchecked") private void processQueryResponse(UUID sndId,GridCacheQueryResponse res){  if (log.isDebugEnabled())   log.debug("Received query response: " + res);  GridCacheQueryFutureAdapter fut=getQueryFuture(res.requestId());  if (fut != null)   if (res.fields())   ((GridCacheDistributedFieldsQueryFuture)fut).onPage(sndId,res.metadata(),(Collection<Map<String,Object>>)((Collection)res.data()),res.error(),res.isFinished()); else   fut.onPage(sndId,res.data(),res.error(),res.isFinished()); else   if (!cancelled.contains(res.requestId()))   U.warn(log,"Received response for finished or unknown query [rmtNodeId=" + sndId + ", res="+ res+ ']');}  }
class C{  static public byte[] charArrayToHexArray(char[] array){  byte[] ascii=new byte[(array.length % 2 == 0) ? array.length : array.length + 1];  for (int i=0; i < ascii.length; i++) {    if (i < ascii.length) {      if ('A' <= array[i] && array[i] <= 'F') {        ascii[i]=(byte)(array[i] - 'A');      } else       if ('a' <= array[i] && array[i] <= 'f') {        ascii[i]=(byte)(array[i] - 'a');      } else       if ('0' <= array[i] && array[i] <= '9') {        ascii[i]=(byte)(array[i] - '0');      } else {        ascii[i]=0x0;      }    } else {      ascii[i]=0x0;    }  }  byte[] result=new byte[array.length / 2];  for (int i=0; i < result.length; i++) {    result[i]=(byte)((ascii[i * 2] * 16) | ascii[i * 2 + 1]);  }  int i;  for (i=result.length - 1; i >= 0 && result[i] == 0; i--)   ;  if (i < result.length - 1) {    result=Arrays.copyOf(result,i + 1);  }  return result;}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=activity.getCameraManager().buildLuminanceSource(rotatedData,width,height);  if (source != null) {    BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));    try {      rawResult=multiFormatReader.decodeWithState(bitmap);    } catch (    ReaderException re) {    } finally {      multiFormatReader.reset();    }  }  Handler handler=activity.getHandler();  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode in " + (end - start) + " ms");    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_succeeded,rawResult);      Bundle bundle=new Bundle();      bundleThumbnail(source,bundle);      message.setData(bundle);      message.sendToTarget();    }  } else {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_failed);      message.sendToTarget();    }  }}  }
class C{  public FilledArea(String sidc){  super(sidc);}  }
class C{  public GPUImage3x3ConvolutionFilter(final float[] convolutionKernel){  super(THREE_X_THREE_TEXTURE_SAMPLING_FRAGMENT_SHADER);  mConvolutionKernel=convolutionKernel;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private boolean isSameMemberWhenErased(Type type,MethodSymbol method,Type erasure){  return types.isSameType(erasure(types.memberType(type,method)),erasure);}  }
class C{  public void testGetResources() throws Exception {  JarArchive jar=new DefaultJarArchive(getResourcePath(PACKAGE_PATH + "test.jar"));  List<String> resources=jar.getResources("folder1");  assertEquals(2,resources.size());  assertTrue(resources.contains("folder1/resourceOne.txt"));  assertTrue(resources.contains("folder1/resourceTwo.txt"));  resources=jar.getResources("folder1/");  assertEquals(2,resources.size());  assertTrue(resources.contains("folder1/resourceOne.txt"));  assertTrue(resources.contains("folder1/resourceTwo.txt"));  resources=jar.getResources("");  assertEquals(6,resources.size());  assertTrue(resources.contains("rootResource.txt"));  assertTrue(resources.contains("folder1/"));  assertTrue(resources.contains("folder1/resourceOne.txt"));  assertTrue(resources.contains("folder1/resourceTwo.txt"));  assertTrue(resources.contains("folder2/"));  assertTrue(resources.contains("folder2/resourceTwo.txt"));  resources=jar.getResources("foo");  assertEquals(0,resources.size());}  }
class C{  public boolean show(Bundle savedInstanceState,int requestCode){  boolean shouldShow=shouldShow(savedInstanceState);  if (shouldShow) {    welcomeScreenStarted=true;    startActivity(requestCode);  }  return shouldShow;}  }
class C{  public void fillFieldValues(){  weightSizeMaxSlider.setValue(SynapseNode.getMaxDiameter());  weightSizeMinSlider.setValue(SynapseNode.getMinDiameter());  showTimeBox.setSelected(networkPanel.getShowTime());  wandRadiusField.setText(Integer.toString(EditMode.getWandRadius()));  timeStepField.setText(Double.toString(networkPanel.getNetwork().getTimeStep()));  nudgeAmountField.setText(Double.toString(NetworkPanel.getNudgeAmount()));  tfSynapseVisibilityThreshold.setText(Integer.toString(Network.getSynapseVisibilityThreshold()));  cbUseSubSampling.setSelected(NeuronGroup.isUseSubSampling());  tfNumSubSamples.setText(Integer.toString(NeuronGroup.getNumSubSamples()));}  }
class C{  protected void restoreContext(){  for (  GridField f : m_mFields) {    if (f != null)     f.restoreValue();  }  for (  GridField f : m_mFields2) {    if (f != null)     f.restoreValue();  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HideImage'";  db.execSQL(sql);}  }
class C{  public static Settings init(String tag){  if (tag == null) {    throw new NullPointerException("tag may not be null");  }  if (tag.trim().length() == 0) {    throw new IllegalStateException("tag may not be empty");  }  Logger.TAG=tag;  return settings;}  }
class C{  public static boolean canMechFindClub(IGame game,int entityId){  final Entity entity=game.getEntity(entityId);  if (null == entity.getPosition()) {    return false;  }  final IHex hex=game.getBoard().getHex(entity.getPosition());  if (!(entity instanceof BipedMech || entity instanceof TripodMech)) {    return false;  }  if (entity.isShutDown() || !entity.getCrew().isActive()) {    return false;  }  if (game.getOptions().booleanOption("no_clan_physical") && entity.isClan()) {    return false;  }  if ((hex.terrainLevel(Terrains.WOODS) < 1) && (hex.terrainLevel(Terrains.JUNGLE) < 1) && (hex.terrainLevel(Terrains.RUBBLE) < Building.MEDIUM)&& (hex.terrainLevel(Terrains.ARMS) < 1)&& (hex.terrainLevel(Terrains.LEGS) < 1)) {    return false;  }  if (!entity.hasWorkingSystem(Mech.ACTUATOR_SHOULDER,Mech.LOC_RARM) || !entity.hasWorkingSystem(Mech.ACTUATOR_SHOULDER,Mech.LOC_LARM) || (!entity.hasWorkingSystem(Mech.ACTUATOR_HAND,Mech.LOC_RARM) && !((Mech)entity).hasClaw(Mech.LOC_RARM))|| (!entity.hasWorkingSystem(Mech.ACTUATOR_HAND,Mech.LOC_LARM) && !((Mech)entity).hasClaw(Mech.LOC_LARM))) {    return false;  }  if (entity.hasQuirk(OptionsConstants.QUIRK_NEG_NO_ARMS)) {    return false;  }  if (entity.getClubs().size() > 0) {    return false;  }  return true;}  }
class C{  public boolean hasTunerConfiguration(TunerType type,String uniqueID,String name){  for (  TunerConfiguration config : mTunerConfigurations) {    if (config.getTunerType() == type && config.getUniqueID() != null && config.getUniqueID().contentEquals(uniqueID) && config.getName() != null && config.getName().contentEquals(name)) {      return true;    }  }  return false;}  }
class C{  public void testOptional01(){  new Helper(){{      given=select(varNode(x),where(stmtPatternWithVar("x1"),stmtPatternWithVarsOptional("x1","y1"),stmtPatternWithVars("x1","z1")));      expected=select(varNode(x),where(stmtPatternWithVar("x1"),stmtPatternWithVars("x1","z1"),stmtPatternWithVarsOptional("x1","y1")));    }  }.test();}  }
class C{  public Builder withPassword(String password){  LettuceAssert.notNull(password,"Password must not be null");  disqueURI.setPassword(password);  return this;}  }
class C{  private void addCalendarEvent(String summary,Date start,boolean allDay,Date end,String location,String description,String[] attendees){  Intent intent=new Intent(Intent.ACTION_INSERT);  intent.setType("vnd.android.cursor.item/event");  long startMilliseconds=start.getTime();  intent.putExtra("beginTime",startMilliseconds);  if (allDay) {    intent.putExtra("allDay",true);  }  long endMilliseconds;  if (end == null) {    if (allDay) {      endMilliseconds=startMilliseconds + 24 * 60 * 60* 1000;    } else {      endMilliseconds=startMilliseconds;    }  } else {    endMilliseconds=end.getTime();  }  intent.putExtra("endTime",endMilliseconds);  intent.putExtra("title",summary);  intent.putExtra("eventLocation",location);  intent.putExtra("description",description);  if (attendees != null) {    intent.putExtra(Intent.EXTRA_EMAIL,attendees);  }  try {    rawLaunchIntent(intent);  } catch (  ActivityNotFoundException anfe) {    Log.w(TAG,"No calendar app available that responds to " + Intent.ACTION_INSERT);    intent.setAction(Intent.ACTION_EDIT);    launchIntent(intent);  }}  }
class C{  public boolean registerBuilderServer(BuilderServerRegistration registration) throws BuilderException {  checkStarted();  final String url=registration.getBuilderServerLocation().getUrl();  final RemoteBuilderServer builderServer=createRemoteBuilderServer(url);  String workspace=null;  String project=null;  final BuilderServerAccessCriteria accessCriteria=registration.getBuilderServerAccessCriteria();  if (accessCriteria != null) {    workspace=accessCriteria.getWorkspace();    project=accessCriteria.getProject();  }  if (workspace != null) {    builderServer.setAssignedWorkspace(workspace);    if (project != null) {      builderServer.setAssignedProject(project);    }  }  return doRegisterBuilderServer(builderServer);}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (this.fechaFormato != null && this.fechaA != null && this.fechaM != null && this.fechaD != null && this.fechaS != null && this.fechaIniFormato != null && this.fechaIniA != null && this.fechaIniM != null && this.fechaIniD != null && this.fechaIniS != null && this.fechaFinFormato != null && this.fechaFinA != null && this.fechaFinM != null && this.fechaFinD != null && this.fechaFinS != null) {    if (!new CustomDate(this.fechaFormato,this.fechaA,this.fechaM,this.fechaD,this.fechaS).validate() || !new CustomDate(this.fechaIniFormato,this.fechaIniA,this.fechaIniM,this.fechaIniD,this.fechaIniS).validate() || !new CustomDate(this.fechaFinFormato,this.fechaFinA,this.fechaFinM,this.fechaFinD,this.fechaFinS).validate()) {      errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_FECHA2,request.getLocale())));    }  }  if (StringUtils.isNotBlank(numero) && !NumberUtils.isNumber(numero)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_INVALID,Messages.getString(Constants.ETIQUETA_BUSQUEDA_FORM_NUMERO,request.getLocale())));  }  if (!ArrayUtils.isEmpty(niveles)) {    if (niveles.length == 0) {      errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(ArchivoDetails.DESCRIPCION_BUSQUEDA_NIVELES,request.getLocale())));    }  }  if (StringUtils.isBlank(codigoReferencia) && StringUtils.isBlank(titulo))   errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_NO_SEARCH_TOKEN));  return errors;}  }
class C{  public static void writeDfModel(DfModel dfModel,String path) throws IOException {  serialize(dfModel,path);}  }
class C{  private static String parseSoapMethodName(InputStream stream,String charEncoding){  try {    final XMLInputFactory factory=XMLInputFactory.newInstance();    final XMLStreamReader xmlReader;    if (charEncoding != null) {      xmlReader=factory.createXMLStreamReader(stream,charEncoding);    } else {      xmlReader=factory.createXMLStreamReader(stream);    }    xmlReader.nextTag();    if (!"Envelope".equals(xmlReader.getLocalName())) {      LOG.debug("Unexpected first tag of SOAP request: '" + xmlReader.getLocalName() + "' (expected 'Envelope')");      return null;    }    if (!scanForChildTag(xmlReader,"Body")) {      LOG.debug("Unable to find SOAP 'Body' tag");      return null;    }    xmlReader.nextTag();    return "." + xmlReader.getLocalName();  } catch (  final XMLStreamException e) {    LOG.debug("Unable to parse SOAP request",e);    return null;  }}  }
class C{  public Node removeNamedItemNS(String namespaceURI,String localName){  return removeNamedItem(localName);}  }
class C{  @Override protected void handleEntityDamage(Entity entityTarget,Vector<Report> vPhaseReport,Building bldg,int hits,int nCluster,int bldgAbsorbs){  int nDamage;  missed=false;  HitData hit=entityTarget.rollHitLocation(toHit.getHitTable(),toHit.getSideTable(),waa.getAimedLocation(),waa.getAimingMode(),toHit.getCover());  hit.setGeneralDamageType(generalDamageType);  hit.setAttackerId(getAttackerId());  if (entityTarget.removePartialCoverHits(hit.getLocation(),toHit.getCover(),Compute.targetSideTable(ae,entityTarget,weapon.getCalledShot().getCall()))) {    handlePartialCoverHit(entityTarget,vPhaseReport,hit,bldg,hits,nCluster,bldgAbsorbs);    return;  }  if (!bSalvo) {    Report r=new Report(3405);    r.subject=subjectId;    r.add(toHit.getTableDesc());    r.add(entityTarget.getLocationAbbr(hit));    vPhaseReport.addElement(r);  }  nDamage=nDamPerHit * Math.min(nCluster,hits);  if (calcDmgPerHitReport.size() > 0) {    vPhaseReport.addAll(calcDmgPerHitReport);  }  if (bldgAbsorbs > 0) {    int toBldg=Math.min(bldgAbsorbs,nDamage);    nDamage-=toBldg;    Report.addNewline(vPhaseReport);    Vector<Report> buildingReport=server.damageBuilding(bldg,toBldg,entityTarget.getPosition());    for (    Report report : buildingReport) {      report.subject=subjectId;    }    vPhaseReport.addAll(buildingReport);  } else   if (bldgAbsorbs == Integer.MIN_VALUE) {    Report.addNewline(vPhaseReport);    Report r=new Report(9976);    r.subject=ae.getId();    r.indent(2);    vPhaseReport.add(r);  } else   if (bldgAbsorbs < 0) {    int toBldg=-bldgAbsorbs;    Report.addNewline(vPhaseReport);    Vector<Report> buildingReport=server.damageBuilding(bldg,toBldg,entityTarget.getPosition());    for (    Report report : buildingReport) {      report.subject=subjectId;    }    vPhaseReport.addAll(buildingReport);  }  nDamage=checkTerrain(nDamage,entityTarget,vPhaseReport);  if (null != bldg) {    nDamage=(int)Math.floor(bldg.getDamageToScale() * nDamage);  }  if (nDamage == 0) {    Report r=new Report(3415);    r.subject=subjectId;    r.indent(2);    r.addDesc(entityTarget);    r.newlines=0;    vPhaseReport.addElement(r);    missed=true;  } else {    if (bGlancing) {      hit.makeGlancingBlow();    }    if (bDirect && (!(target instanceof Infantry) || (target instanceof BattleArmor))) {      hit.makeDirectBlow(toHit.getMoS() / 3);    }    if ((target instanceof BattleArmor) && (((BattleArmor)target).getInternal(hit.getLocation()) != IArmorState.ARMOR_DOOMED)) {      int critRoll=Compute.d6(2);      int loc=hit.getLocation();      if (critRoll >= 10) {        hit=new HitData(loc,false,HitData.EFFECT_CRITICAL);      }    } else     if ((target instanceof Tank) || (target instanceof Mech)) {      if (bGlancing) {        hit.setSpecCritmod(-4);      } else       if (bDirect) {        hit.setSpecCritmod((toHit.getMoS() / 3) - 2);      } else {        hit.setSpecCritmod(-2);      }    }    vPhaseReport.addAll(server.damageEntity(entityTarget,hit,nDamage,false,ae.getSwarmTargetId() == entityTarget.getId() ? DamageType.IGNORE_PASSENGER : DamageType.NONE,false,false,throughFront,underWater));  }}  }
class C{  protected double kernelLP(int n,char[] s,int endIndexS,char[] t,int endIndexT,int remainingMatchLength){  if (Math.min(endIndexS + 1,endIndexT + 1) < n) {    return getReturnValue(n);  }  if (remainingMatchLength == 0) {    return getReturnValue(n);  }  double result=0;  for (int iS=endIndexS; iS > n - 2; iS--) {    double buf=0;    char x=s[iS];    for (int j=0; j <= endIndexT; j++) {      if (t[j] == x) {        buf+=kernelHelperLP(n - 1,s,iS - 1,t,j - 1,remainingMatchLength - 2);      }    }    result+=buf * m_powersOflambda[2];  }  return result;}  }
class C{  protected void sequence_MethodParamsAndBody_PropertyMethodDeclaration_StrictFormalParameters_TypeVariables(ISerializationContext context,PropertyMethodDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private ScanMetadata _constructScanMetadata(MetricSchemaRecordQuery query){  ScanMetadata metadata=new ScanMetadata();  char[] scopeTableRowKey=_constructRowKey(query.getNamespace(),query.getScope(),query.getMetric(),query.getTagKey(),query.getTagValue(),TableType.SCOPE).toCharArray();  char[] metricTableRowKey=_constructRowKey(query.getNamespace(),query.getScope(),query.getMetric(),query.getTagKey(),query.getTagValue(),TableType.METRIC).toCharArray();  int i=0, j=0;  for (; (i < scopeTableRowKey.length && j < metricTableRowKey.length); i++, j++) {    if (_isWildcardCharacter(scopeTableRowKey[i]) || _isWildcardCharacter(metricTableRowKey[j])) {      break;    }  }  while (i < scopeTableRowKey.length && !_isWildcardCharacter(scopeTableRowKey[i])) {    i++;  }  while (j < metricTableRowKey.length && !_isWildcardCharacter(metricTableRowKey[j])) {    j++;  }  if (i < scopeTableRowKey.length && scopeTableRowKey[i] == '|') {    while (i >= 0 && scopeTableRowKey[i] != ROWKEY_SEPARATOR) {      i--;    }    i++;  }  if (j < metricTableRowKey.length && metricTableRowKey[j] == '|') {    while (j >= 0 && metricTableRowKey[j] != ROWKEY_SEPARATOR) {      j--;    }    j++;  }  int indexOfWildcard;  String rowKey;  if (i < j) {    metadata.type=TableType.METRIC;    indexOfWildcard=j;    rowKey=new String(metricTableRowKey);  } else {    metadata.type=TableType.SCOPE;    indexOfWildcard=i;    rowKey=new String(scopeTableRowKey);  }  String start=rowKey.substring(0,indexOfWildcard);  metadata.startRow=start.getBytes(Charset.forName("UTF-8"));  String end="";  if (indexOfWildcard > 0) {    char prev=rowKey.charAt(indexOfWildcard - 1);    char prevPlusOne=(char)(prev + 1);    end=rowKey.substring(0,indexOfWildcard - 1) + prevPlusOne;  }  metadata.stopRow=end.getBytes(Charset.forName("UTF-8"));  return metadata;}  }
class C{  public void onEvent(Event e) throws Exception {  iframe.setContent(null);  Object source=e.getTarget();  if (source == tabResult)   stateChanged(); else   if (source == tabQuery)   stateChanged(); else   if (source == selAcctSchema)   actionAcctSchema(); else   if (source == bQuery)   actionQuery(); else   if (source == selDocument)   actionDocument(); else   if (source == selTable)   actionTable(); else   if (source == bRePost)   actionRePost(); else   if (source == bExport)   actionExportExcel(); else   if (source == bPrint)   ; else   if (source == bExport)   actionExportExcel(); else   if (source instanceof Button)   actionButton((Button)source); else   if (source == paging) {    int pgno=paging.getActivePage();    int start=pgno * PAGE_SIZE;    int end=start + PAGE_SIZE;    if (end > paging.getTotalSize())     end=paging.getTotalSize();    List<ArrayList<Object>> list=m_queryData.subList(start,end);    ListModelTable model=new ListModelTable(list);    table.setModel(model);  }}  }
class C{  public static boolean computeInstancesTerminationState(AmazonEC2AsyncClient client,VerificationHost host,List<String> instanceIdsToDelete,ArrayList<Boolean> deletionFlags) throws Throwable {  checkInstancesDeleted(client,host,instanceIdsToDelete,deletionFlags);  Boolean finalState=true;  for (  Boolean b : deletionFlags) {    finalState=finalState & b;  }  return finalState;}  }
class C{  public void unsubscribe(String clientHandle,final String[] topic,String invocationContext,String activityToken){  MqttConnection client=getConnection(clientHandle);  client.unsubscribe(topic,invocationContext,activityToken);}  }
class C{  public DoubleVector toDoubleVector(){  return new DoubleVector(x,y,z);}  }
class C{  public void realInverseFull(double[] a,boolean scale){  realInverseFull(a,0,scale);}  }
class C{  private VectorValueSource makeMV(List<ValueSource> sources,List<ValueSource> orig) throws SyntaxError {  ValueSource vs1=sources.get(0);  ValueSource vs2=sources.get(1);  if (vs1 instanceof MultiValueSource || vs2 instanceof MultiValueSource) {    throw new SyntaxError("geodist - invalid parameters:" + orig);  }  return new VectorValueSource(sources);}  }
class C{  public void beginElement() throws IOException {  int p=peeked;  if (p == PEEKED_NONE) {    p=doPeek();  }  if (p == PEEKED_ELEMENT_BEGIN) {    pushStack(XmlScope.ELEMENT_OPENING);    peeked=PEEKED_NONE;  } else {    throw new XmlDataException("Expected " + XmlToken.ELEMENT_BEGIN + " but was "+ peek()+ " at path "+ getPath());  }}  }
class C{  public void displayUser(){  mHeader.buttonRefreshUser.setVisibility(View.VISIBLE);  if (!getUser().isLoggedIn()) {    setLoggedOutHeader();  } else {    setLoggedInHeader(getUser().getUsername());  }  mHeader.textCurrentFilter.setText(String.format(getString(R.string.user_filter),getUser().getCurrentFilter().getName()));  if (!getUser().getAvatarUrl().endsWith(".svg")) {    Glide.with(this).load(getUser().getAvatarUrl()).diskCacheStrategy(DiskCacheStrategy.RESULT).dontAnimate().into(mHeader.viewAvatar);  } else {    Glide.with(this).load(R.drawable.no_avatar).dontAnimate().into(mHeader.viewAvatar);  }  setActiveMenuItem();}  }
class C{  @Override protected EClass eStaticClass(){  return DatatypePackage.Literals.COMPLEX_PRIMITIVE_PROPERTY_TYPE;}  }
class C{  private Network buildNetwork(){  Network network=NetworkUtils.createNetwork();  Node a=NetworkUtils.createAndAddNode(network,Id.createNodeId("A"),CoordUtils.createCoord(0.0,0.0));  Node b=NetworkUtils.createAndAddNode(network,Id.createNodeId("B"),CoordUtils.createCoord(10.0,0.0));  Node c=NetworkUtils.createAndAddNode(network,Id.createNodeId("C"),CoordUtils.createCoord(20.0,0.0));  Node d=NetworkUtils.createAndAddNode(network,Id.createNodeId("D"),CoordUtils.createCoord(30.0,0.0));  Node e=NetworkUtils.createAndAddNode(network,Id.createNodeId("E"),CoordUtils.createCoord(40.0,0.0));  Node f=NetworkUtils.createAndAddNode(network,Id.createNodeId("F"),CoordUtils.createCoord(50.0,0.0));  NetworkUtils.createAndAddLink(network,Id.createLinkId("AB"),a,b,10.0,60.0 / 3.6,1000.0,1);  NetworkUtils.createAndAddLink(network,Id.createLinkId("BC"),b,c,10.0,60.0 / 3.6,1000.0,1);  NetworkUtils.createAndAddLink(network,Id.createLinkId("CD"),c,d,10.0,60.0 / 3.6,1000.0,2);  NetworkUtils.createAndAddLink(network,Id.createLinkId("DE"),d,e,10.0,60.0 / 3.6,1000.0,1);  NetworkUtils.createAndAddLink(network,Id.createLinkId("EF"),e,f,10.0,60.0 / 3.6,1000.0,1);  return network;}  }
class C{  public void readTraces(Reader r) throws TraceException, java.io.IOException {  LogFileTraces.TrimLineReader reader=new LogFileTraces.TrimLineReader(r);  StringTokenizer tokens=reader.tokenizeLine();  while (!tokens.hasMoreTokens()) {    tokens=reader.tokenizeLine();  }  String token=tokens.nextToken();  while (token.startsWith("[") || token.startsWith("#")) {    tokens=reader.tokenizeLine();    while (!tokens.hasMoreTokens()) {      tokens=reader.tokenizeLine();    }    token=tokens.nextToken();  }  String[] labels=new String[tokens.countTokens()];  for (int i=0; i < labels.length; i++) {    labels[i]=tokens.nextToken();  }  for (  TracesListener listener : listeners) {    listener.traceNames(labels);  }  boolean firstState=true;  tokens=reader.tokenizeLine();  while (tokens != null && tokens.hasMoreTokens()) {    String stateString=tokens.nextToken();    int state=0;    try {      try {        state=(int)Double.parseDouble(stateString);      } catch (      NumberFormatException nfe) {        throw new TraceException("Unable to parse state number in column 1 (Line " + reader.getLineNumber() + ")");      }      if (firstState) {        if (state == 1)         state=0;        firstState=false;      }    } catch (    NumberFormatException nfe) {      throw new TraceException("State " + state + ":Expected real value in column "+ reader.getLineNumber());    }    double[] values=new double[labels.length];    for (int i=0; i < values.length; i++) {      if (tokens.hasMoreTokens()) {        try {          values[i]=Double.parseDouble(tokens.nextToken());        } catch (        NumberFormatException nfe) {          throw new TraceException("State " + state + ": Expected real value in column "+ (i + 1)+ " (Line "+ reader.getLineNumber()+ ")");        }      } else {        throw new TraceException("State " + state + ": missing values at line "+ reader.getLineNumber());      }    }    for (    TracesListener listener : listeners) {      listener.traceRow(state,values);    }    tokens=reader.tokenizeLine();  }}  }
class C{  private static List<String> crossCatenate(List<List<String>> allWordsList){  List<String> crossList=new ArrayList<String>(allWordsList.get(0));  for (  List<String> wordList : allWordsList.subList(1,allWordsList.size())) {    int priorCrossListLength=crossList.size();    crossList=replicate(crossList,wordList.size());    for (int i=0; i < wordList.size(); i++) {      for (int j=0; j < priorCrossListLength; j++) {        int index=i * priorCrossListLength + j;        crossList.set(index,crossList.get(index) + " " + wordList.get(i));      }    }  }  return crossList;}  }
class C{  public DeleteIndexRequest timeout(TimeValue timeout){  this.timeout=timeout;  return this;}  }
class C{  public void removeDivider(int divId) throws Exception {  m_fdr.getDocumentTree().removeDivider(divId);}  }
class C{  public void saveSelectionDetail(){  int row=p_table.getSelectedRow();  if (row == -1)   return;  Integer ID=getSelectedRowKey();  Env.setContext(Env.getCtx(),p_WindowNo,Env.TAB_INFO,"A_Asset_ID",ID == null ? "0" : ID.toString());}  }
class C{  public static long nextOrder(){  return gen.getAndIncrement();}  }
class C{  public static IntBuffer allocate(int capacity){  if (capacity < 0) {    throw new IllegalArgumentException();  }  ByteBuffer bb=ByteBuffer.allocateDirect(capacity * 4);  bb.order(ByteOrder.nativeOrder());  return bb.asIntBuffer();}  }
class C{  private PlatformMemoryPool pool(){  PlatformMemoryPool pool=threadLocPool.get();  if (pool == null) {    pool=new PlatformMemoryPool();    threadLocPool.set(pool);  }  return pool;}  }
class C{  public JsonContentAggregatorFieldSetting(final String field,final String[] path,final JsonContentType valueType){  this.field=field;  this.path=path;  this.valueType=valueType;}  }
class C{  public boolean hasGoals(){  return hasRepeatingExtension(Goal.class);}  }
class C{  public static boolean isOID(String alias){  return ObjectIdentifier.isOID(normalize(alias));}  }
class C{  public void testDhtCloseWithTry() throws Exception {  String curVal=null;  for (int i=0; i < 3; i++) {    try (IgniteCache<String,String> cache0=grid(0).getOrCreateCache(getDhtConfig())){      IgniteCache<String,String> cache1=grid(1).cache(CACHE_NAME_DHT);      IgniteCache<String,String> cache2=grid(2).cache(CACHE_NAME_DHT);      if (i == 0) {        assert cache0.get(KEY_VAL) == null;        assert cache1.get(KEY_VAL) == null;        assert cache2.get(KEY_VAL) == null;      } else {        assert cache0.get(KEY_VAL).equals(curVal);        assert cache1.get(KEY_VAL).equals(curVal);        assert cache2.get(KEY_VAL).equals(curVal);      }      curVal=KEY_VAL + curVal;      cache0.put(KEY_VAL,curVal);      assert cache0.get(KEY_VAL).equals(curVal);      assert cache1.get(KEY_VAL).equals(curVal);      assert cache2.get(KEY_VAL).equals(curVal);    }   }}  }
class C{  private void checkType(final int key,final int expectedType){  final int pos=mKeyToPosMap.get(key);  mParcel.setDataPosition(pos);  final int type=mParcel.readInt();  if (type != expectedType) {    throw new IllegalStateException("Wrong type " + expectedType + " but got "+ type);  }}  }
class C{  public static boolean isBLANK_NODE_LABEL_EndChar(int codePoint){  return isPN_CHARS(codePoint);}  }
class C{  public boolean isFalse(){  return false;}  }
class C{  public long cguest_time(){  return Long.parseLong(fields[43]);}  }
class C{  public void testLogFilesTwoNodes() throws Exception {  checkOneNode(0);  checkOneNode(1);}  }
class C{  @Override protected void onUpdateBgPadding(Rect padding,Rect bgPadding){  mAppsRecyclerView.updateBackgroundPadding(bgPadding);  mAdapter.updateBackgroundPadding(bgPadding);  mElevationController.updateBackgroundPadding(bgPadding);  int maxScrollBarWidth=mAppsRecyclerView.getMaxScrollbarWidth();  int startInset=Math.max(mSectionNamesMargin,maxScrollBarWidth);  int topBottomPadding=mRecyclerViewTopBottomPadding;  if (Utilities.isRtl(getResources())) {    mAppsRecyclerView.setPadding(padding.left + maxScrollBarWidth,topBottomPadding,padding.right + startInset,topBottomPadding);  } else {    mAppsRecyclerView.setPadding(padding.left + startInset,topBottomPadding,padding.right + maxScrollBarWidth,topBottomPadding);  }  MarginLayoutParams lp=(MarginLayoutParams)mSearchContainer.getLayoutParams();  lp.leftMargin=padding.left;  lp.rightMargin=padding.right;  mSearchContainer.setLayoutParams(lp);}  }
class C{  public static boolean pdf2image(File pdf,File image,int width,int height,int density,int quality){  final File convert=convertMac1.exists() ? convertMac1 : convertMac2.exists() ? convertMac2 : convertDebian;  if (OS.isWindows || !convert.exists()) {    try {      PDDocument pdoc=PDDocument.load(pdf);      BufferedImage bi=new PDFRenderer(pdoc).renderImageWithDPI(0,density,ImageType.RGB);      return ImageIO.write(bi,"jpg",image);    } catch (    IOException ex) {    }  }  try {    String command=convert.getAbsolutePath() + " -density " + density+ " -trim "+ pdf.getAbsolutePath()+ "[0] -trim -resize "+ width+ "x -crop x"+ height+ "+0+0 -quality "+ quality+ "% "+ image.getAbsolutePath();    List<String> message=OS.execSynchronous(command);    if (image.exists())     return true;    ConcurrentLog.warn("Html2Image","failed to create image with command: " + command);    for (    String m : message)     ConcurrentLog.warn("Html2Image",">> " + m);    if (!OS.isMacArchitecture)     return false;    File pngFile=new File(pdf.getAbsolutePath() + ".tmp.pdf");    org.apache.commons.io.FileUtils.copyFile(pdf,pngFile);    String[] commandx={"osascript","-e","set ImgFile to \"" + pngFile.getAbsolutePath() + "\"","-e","tell application \"Image Events\"","-e","set Img to open file ImgFile","-e","save Img as PNG","-e","end tell"};    message=OS.execSynchronous(commandx);    for (    String m : message)     ConcurrentLog.warn("Html2Image",">> " + m);    try {      File newPngFile=new File(pngFile.getAbsolutePath() + ".png");      pngFile.renameTo(newPngFile);      Image img=ImageParser.parse(pngFile.getAbsolutePath(),FileUtils.read(newPngFile));      final Image scaled=img.getScaledInstance(width,height,Image.SCALE_AREA_AVERAGING);      final MediaTracker mediaTracker=new MediaTracker(new Container());      mediaTracker.addImage(scaled,0);      try {        mediaTracker.waitForID(0);      } catch (      final InterruptedException e) {      }      final BufferedImage bi=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);      bi.createGraphics().drawImage(scaled,0,0,width,height,null);      ImageIO.write(bi,"jpg",image);      newPngFile.delete();      return image.exists();    } catch (    IOException e) {      ConcurrentLog.logException(e);      return false;    }  } catch (  IOException e) {    e.printStackTrace();    return false;  }}  }
class C{  public void writeTo(final PacketOutputStream os){  if (escapedArray == null)   escapeUtf8();  os.write(escapedArray,0,position);}  }
class C{  public MagToPag(Graph mag){  this.mag=new EdgeListGraphSingleConnections(mag);  this.variables.addAll(mag.getNodes());  this.dsep=new IndTestDSep(mag);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:45.095 -0500",hash_original_method="4935B20DF448DBE22DB0549C57AECB3F",hash_generated_method="7A27DD1E065EF91F07F9938DE4EFCB45") public RedirectException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static void main(String[] args){  int result=0;  try {    result=new Main().run(args);  } catch (  Throwable t) {    t.printStackTrace();  } finally {    if (!Boolean.getBoolean(PROP_NOSHUTDOWN) || result == 23)     System.exit(result);  }}  }
class C{  public static String addToCartBulk(HttpServletRequest request,HttpServletResponse response){  String categoryId=request.getParameter("category_id");  ShoppingCart cart=getCartObject(request);  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  ShoppingCartHelper cartHelper=new ShoppingCartHelper(delegator,dispatcher,cart);  String controlDirective;  Map<String,Object> result;  Map<String,Object> paramMap=UtilHttp.getParameterMap(request);  String catalogId=CatalogWorker.getCurrentCatalogId(request);  result=cartHelper.addToCartBulk(catalogId,categoryId,paramMap);  controlDirective=processResult(result,request);  if (controlDirective.equals(ERROR)) {    return "error";  } else {    return "success";  }}  }
class C{  public static void shrinkSelection(final ZyGraph graph){  checkArguments(graph);  final SelectableGraph<NaviNode> selectableGraph=SelectableGraph.wrap(graph);  GraphHelpers.shrinkSelectionUp(selectableGraph);  GraphHelpers.shrinkSelectionDown(selectableGraph);}  }
class C{  public static void isQueryExecutionCanceled(){  if (queryExecutionStatus.get() != null && queryExecutionStatus.get().get()) {    throw new QueryExecutionCanceledException();  }}  }
class C{  public Bonk(Bonk other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetMessage()) {    this.message=other.message;  }  this.type=other.type;}  }
class C{  @Override public String globalInfo(){  return "Chooses a random subset of attributes, either an absolute number " + "or a percentage. The class is always included in the output (" + "as the last attribute).";}  }
class C{  public static Method createMethod(Plugin plugin){  for (  Method method : Methods) {    if (method.isCompatible(plugin)) {      method.setPlugin(plugin);      return method;    }  }  return null;}  }
class C{  @Override public void clear(){  nodes.clear();}  }
class C{  public static Object toArray(Collection<?> collection,Class<?> componentType){  if (componentType.isPrimitive()) {    Object array=Array.newInstance(componentType,collection.size());    int index=0;    for (    Object value : collection) {      Array.set(array,index++,value);    }    return array;  }  return collection.toArray((Object[])Array.newInstance(componentType,collection.size()));}  }
class C{  public int deleleAll(Database database) throws SQLException {  return database.delete(shardTable,true);}  }
class C{  public void updateMarcaBloqueo(String idelementoCf,int marca){  StringBuffer qual=new StringBuffer(DBUtils.WHERE).append(DBUtils.generateEQTokenField(CAMPO_ID,idelementoCf));  Map colToUpdate=Collections.singletonMap(CAMPO_MARCAS_BLOQUEO,String.valueOf(marca));  updateFields(qual.toString(),colToUpdate,TABLE_NAME_UNIDAD_DOCUMENTAL);}  }
class C{  public void clear(){  size=0;}  }
class C{  public void testFindEdge(){}  }
class C{  private QueryExp buildOptionalQueryExp(final String[] attributes,final Object[] values){  QueryExp queryExp=null;  for (int i=0; i < attributes.length; i++) {    if (values[i] instanceof Boolean) {      if (queryExp == null) {        queryExp=Query.eq(Query.attr(attributes[i]),Query.value(((Boolean)values[i])));      } else {        queryExp=Query.and(queryExp,Query.eq(Query.attr(attributes[i]),Query.value(((Boolean)values[i]))));      }    } else     if (values[i] instanceof Number) {      if (queryExp == null) {        queryExp=Query.eq(Query.attr(attributes[i]),Query.value((Number)values[i]));      } else {        queryExp=Query.and(queryExp,Query.eq(Query.attr(attributes[i]),Query.value((Number)values[i])));      }    } else     if (values[i] instanceof String) {      if (queryExp == null) {        queryExp=Query.eq(Query.attr(attributes[i]),Query.value((String)values[i]));      } else {        queryExp=Query.and(queryExp,Query.eq(Query.attr(attributes[i]),Query.value((String)values[i])));      }    }  }  return queryExp;}  }
class C{  public SimpleTree simulateTree(TaxonList taxa,DemographicFunction demoFunction){  if (taxa.getTaxonCount() == 0)   return new SimpleTree();  SimpleNode[] nodes=new SimpleNode[taxa.getTaxonCount()];  for (int i=0; i < taxa.getTaxonCount(); i++) {    nodes[i]=new SimpleNode();    nodes[i].setTaxon(taxa.getTaxon(i));  }  boolean usingDates=Taxon.getMostRecentDate() != null;  for (int i=0; i < taxa.getTaxonCount(); i++) {    Taxon taxon=taxa.getTaxon(i);    if (usingDates) {      nodes[i].setHeight(taxon.getHeight());    } else {      nodes[i].setHeight(0.0);    }  }  return new SimpleTree(simulateCoalescent(nodes,demoFunction));}  }
class C{  public static Byte toByte(char c){  return new Byte(toByteValue(c));}  }
class C{  public BackgroundPainter(Image image,boolean fixed,boolean tile){  m_img=image;  MediaTracker mt=new MediaTracker(new Container());  mt.addImage(m_img,0);  try {    mt.waitForID(0);  } catch (  Exception e) {    e.printStackTrace();  }  mt.removeImage(m_img,0);  m_fixed=fixed;  m_tiled=tile;}  }
class C{  public boolean read() throws IOException {  if (nextByte != null) {    currentByte=nextByte;    nextByte=null;  } else {    int i=this.is.read();    if (i < 0) {      currentByte=null;    } else {      currentByte=(byte)i;    }  }  return currentByte != null;}  }
class C{  public void terminate(){  mTerminated=true;  interrupt();}  }
class C{  @Override public V remove(Object key){  if (key == null) {    return removeNullKey();  }  int hash=secondaryHash(key);  HashMapEntry<K,V>[] tab=table;  int index=hash & (tab.length - 1);  for (HashMapEntry<K,V> e=tab[index], prev=null; e != null; prev=e, e=e.next) {    if (e.hash == hash && key.equals(e.key)) {      if (prev == null) {        tab[index]=e.next;      } else {        prev.next=e.next;      }      modCount++;      size--;      postRemove(e);      return e.value;    }  }  return null;}  }
class C{  private void doImport(final File file,final ImportDescriptor importDescriptor,final JobStatusListener statusListener,final Set<String> importedFiles,final String imageVaultRootDirectory){  final ImageNameStrategy strategy=imageService.getImageNameStrategy(importDescriptor.getSelectSql());  final String fileName=file.getName();  final String resolvedCode=strategy.resolveObjectCode(fileName);  final String code=Constants.NO_IMAGE.equals(resolvedCode) ? fileName.substring(0,fileName.indexOf('.')) : resolvedCode;  final String locale=strategy.resolveLocale(fileName);  final String suffix=strategy.resolveSuffix(fileName);  boolean success=false;  for (  final ImageImportDomainObjectStrategy domainStrategy : strategies) {    if (domainStrategy.supports(strategy.getUrlPath())) {      success|=domainStrategy.doImageImport(statusListener,fileName,code,suffix,locale);    }  }  if (success) {    try {      String newFileName=imageService.addImageToRepository(file.getName(),code,FileUtils.readFileToByteArray(file),strategy.getUrlPath(),imageVaultRootDirectory);      final String info=MessageFormat.format("image {0} {1} added to image repository",file.getAbsolutePath(),newFileName);      statusListener.notifyMessage(info);    } catch (    IOException e) {      final String err=MessageFormat.format("can not add {0} to image repository. Try to add it manually. Error is {1}",file.getAbsolutePath(),e.getMessage());      statusListener.notifyError(err,e);    }  }  importedFiles.add(file.getAbsolutePath());}  }
class C{  public FileObject importFile(ProjectAssetManager mgr){  if (SUFFIX == null) {    throw new IllegalStateException("Suffix for blender filetype is null! Set SUFFIX = \"sfx\" in constructor!");  }  closeAsset();  FileObject mainFile=getPrimaryFile();  if (FileUtil.findBrother(mainFile,BlenderTool.TEMP_SUFFIX) != null) {    logger.log(Level.SEVERE,"Cannot convert " + getName() + " to .blend because there is already a file with this name. Delete it and try again!");    return null;  }  if (!BlenderTool.runConversionScript(SUFFIX,mainFile)) {    logger.log(Level.SEVERE,"Failed to create model, running blender caused an error");    return null;  }  mainFile.getParent().refresh();  FileObject outFile=FileUtil.findBrother(mainFile,BlenderTool.TEMP_SUFFIX);  if (outFile == null) {    logger.log(Level.SEVERE,"Failed to create model, blend file cannot be found");    return null;  }  int i=1;  FileObject blend1File=FileUtil.findBrother(mainFile,BlenderTool.TEMP_SUFFIX + i);  while (blend1File != null) {    try {      blend1File.delete();    } catch (    IOException ex) {      Exceptions.printStackTrace(ex);    }    i++;    blend1File=FileUtil.findBrother(mainFile,BlenderTool.TEMP_SUFFIX + i);  }  return outFile;}  }
class C{  public final int length(){  return array.length;}  }
class C{  public Response onCommand(POP3Session session,Request request){  return POP3Response.ERR;}  }
class C{  public static <S extends HasCellDoubleClickHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    CellDoubleClickEvent event=new CellDoubleClickEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public void runTest(){  try {    assureResultsDirectoryExists(RESULTS_DIR);    if (!isMatch(RESULTS_DIR,COMPARE_DIR,"TurbineWeather","java","java") || !isMatch(RESULTS_DIR,COMPARE_DIR,"TurbineWeatherService","java","java") || !isMatch(RESULTS_DIR,COMPARE_DIR,"WeatherService","java","java")|| !isMatch(RESULTS_DIR,COMPARE_DIR,"book","txt","txt")|| !isMatch(RESULTS_DIR,COMPARE_DIR,"Test","txt","txt")) {      fail("Output is incorrect!");    }  } catch (  Exception e) {  }}  }
class C{  private static String createMessage(String fieldName,Number value,Number lowerBound,Number upperBound,String explain){  StringBuffer buf=new StringBuffer().append("Value ").append(value).append(" for ").append(fieldName).append(' ');  if (lowerBound == null) {    if (upperBound == null) {      buf.append("is not supported");    } else {      buf.append("must not be larger than ").append(upperBound);    }  } else   if (upperBound == null) {    buf.append("must not be smaller than ").append(lowerBound);  } else {    buf.append("must be in the range [").append(lowerBound).append(',').append(upperBound).append(']');  }  if (explain != null) {    buf.append(": ").append(explain);  }  return buf.toString();}  }
class C{  public boolean inDaylightTime(Date date){  if (date == null) {    throw new NullPointerException();  }  if (transitions == null) {    return false;  }  long utc=date.getTime() - rawOffsetDiff;  int index=getTransitionIndex(utc,UTC_TIME);  if (index < 0) {    return false;  }  if (index < transitions.length) {    return (transitions[index] & DST_MASK) != 0;  }  SimpleTimeZone tz=getLastRule();  if (tz != null) {    return tz.inDaylightTime(date);  }  return false;}  }
class C{  public static String join(Collection<?> strings){  return join(strings,nl());}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (bayesIm == null) {    throw new NullPointerException();  }  if (evidence == null) {    throw new NullPointerException();  }  if (storedMarginals == null) {    throw new NullPointerException();  }  if (updatedBayesIm == null) {    throw new NullPointerException();  }}  }
class C{  public static Solution binaryTournament(Solution solution1,Solution solution2){  return binaryTournament(solution1,solution2,new ParetoDominanceComparator());}  }
class C{  public BigDecimal optBigDecimal(String key,BigDecimal defaultValue){  try {    return this.getBigDecimal(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static Label createWrapLabel(Composite parent,String text,int hspan){  Label l=new Label(parent,SWT.NONE | SWT.WRAP);  l.setFont(parent.getFont());  l.setText(text);  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=hspan;  l.setLayoutData(gd);  return l;}  }
class C{  public void swapCopy(RPCopyRequestParams copyParams) throws RecoverPointException {  try {    logger.info("Swap copy to current or most recent image");    RecoverPointImageManagementUtils imageManager=new RecoverPointImageManagementUtils();    ConsistencyGroupCopyUID cgCopyUID=RecoverPointUtils.mapRPVolumeProtectionInfoToCGCopyUID(copyParams.getCopyVolumeInfo());    ConsistencyGroupCopyState copyState=imageManager.getCopyState(functionalAPI,cgCopyUID);    if (copyState != null && copyState.getAccessedImage() == null && !StorageAccessState.DIRECT_ACCESS.equals(copyState.getStorageAccessState())) {      failoverCopy(copyParams);    }    ConsistencyGroupCopySettings cgCopySettings=RecoverPointUtils.getCopySettings(functionalAPI,cgCopyUID);    List<ConsistencyGroupCopyUID> productionCopiesUIDs=functionalAPI.getGroupSettings(cgCopyUID.getGroupUID()).getProductionCopiesUIDs();    if (RecoverPointUtils.isProductionCopy(cgCopyUID,productionCopiesUIDs) && cgCopySettings.getRoleInfo() != null && ConsistencyGroupCopyRole.REPLICA == cgCopySettings.getRoleInfo().getRole()) {      logger.info("Swap copy is a production copy with role 'Target at Production'.  Resuming production to complete the swap.");      functionalAPI.resumeProduction(cgCopyUID.getGroupUID(),true);    } else {      imageManager.failoverCGCopy(functionalAPI,cgCopyUID);    }  } catch (  FunctionalAPIActionFailedException_Exception|FunctionalAPIInternalError_Exception e) {    String copyName=copyParams.getCopyVolumeInfo() != null ? copyParams.getCopyVolumeInfo().getRpCopyName() : "N/A";    throw RecoverPointException.exceptions.failedToSwapCopy(copyName,e);  }}  }
class C{  public Boolean isMultipleHostAccess(){  return multipleHostAccess;}  }
class C{  private void paintHorizontalLine(Graphics2D g,JComponent c,int x,int y,int width,int height){  paintLine(g,width,height);}  }
class C{  public void showSearch(){  showSearch(true);}  }
class C{  public VideoData(IoBuffer data){  super(Type.STREAM_DATA);  setData(data);}  }
class C{  @Override public String format(LogRecord log){  StringBuilder sb=new StringBuilder();  int mark=0;  for (  FormatItem item : _formatList) {    item.format(sb,log,mark);    if (item instanceof PrettyPrintMarkItem) {      mark=sb.length();    }  }  return sb.toString();}  }
class C{  public boolean isFillViewport(){  return mFillViewport;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.465 -0400",hash_original_method="EF2EDFAE53FCE066020553E02BDC1BE8",hash_generated_method="E5B5F7E1373A699D0EA764C472C5701A") private boolean conditionC0(String value,int index){  if (contains(value,index,4,"CHIA")) {    return true;  } else   if (index <= 1) {    return false;  } else   if (isVowel(charAt(value,index - 2))) {    return false;  } else   if (!contains(value,index - 1,3,"ACH")) {    return false;  } else {    char c=charAt(value,index + 2);    return (c != 'I' && c != 'E') || contains(value,index - 2,6,"BACHER","MACHER");  }}  }
class C{  @Override public List<String> hvals(final String key){  checkIsInMultiOrPipeline();  client.hvals(key);  final List<String> lresult=client.getMultiBulkReply();  return lresult;}  }
class C{  void drawDivider(Canvas canvas,Rect bounds,int childIndex){  final Drawable divider=mDivider;  divider.setBounds(bounds);  divider.draw(canvas);}  }
class C{  public Control[] doFillIntoGrid(Composite parent,int nColumns){  assertEnoughColumns(nColumns);  Label label=getLabelControl(parent);  label.setLayoutData(gridDataForLabel(nColumns));  return new Control[]{label};}  }
class C{  public String generate(String str1,String str2,char delimiter,int maxLength){  return _nameGenerator.generate(str1,str2,null,delimiter,maxLength);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("DaoRelFld[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_name = ").append(m_name);  buffer.append(", m_colName = ").append(m_colName);  buffer.append("]");  return buffer.toString();}  }
class C{  public T caseS_Experiment(S_Experiment object){  return null;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("AcsAccessTokenGroup[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_genPerms = ").append(m_genPerms);  buffer.append("]");  return buffer.toString();}  }
class C{  private void addDiffViewersToSection(final FormToolkit toolkit,final List<TaskAttribute> diffTaskAttributes,final Section groupSection){  Composite composite=createDiffViewers(groupSection,toolkit,diffTaskAttributes);  groupSection.setClient(composite);}  }
class C{  public static Builder newBuilder(SourceSection sourceSection){  return BUILDER_INSTANCE.new Builder(sourceSection);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.EXIT_STATE__STATE:    return state != null;}return super.eIsSet(featureID);}  }
class C{  public Depend(PathImpl source){  this(source,source.getLastModified(),source.length());}  }
class C{  public static Builder builder(){  return builder(new ClasspathResourceLoader());}  }
class C{  public void onSuccess(int statusCode,Header[] headers,byte[] responseBody){  try {    String response=responseBody == null ? null : new String(responseBody,getCharset());    onSuccess(statusCode,headers,response);  } catch (  UnsupportedEncodingException e) {    Log.e(LOG_TAG,e.toString());    onFailure(statusCode,headers,e,null);  }}  }
class C{  public GF2Matrix(int n,char typeOfMatrix,SecureRandom sr){  if (n <= 0) {    throw new ArithmeticException("Size of matrix is non-positive.");  }switch (typeOfMatrix) {case Matrix.MATRIX_TYPE_ZERO:    assignZeroMatrix(n,n);  break;case Matrix.MATRIX_TYPE_UNIT:assignUnitMatrix(n);break;case Matrix.MATRIX_TYPE_RANDOM_LT:assignRandomLowerTriangularMatrix(n,sr);break;case Matrix.MATRIX_TYPE_RANDOM_UT:assignRandomUpperTriangularMatrix(n,sr);break;case Matrix.MATRIX_TYPE_RANDOM_REGULAR:assignRandomRegularMatrix(n,sr);break;default :throw new ArithmeticException("Unknown matrix type.");}}  }
class C{  public SimpleScheduleBuilder withIntervalInMilliseconds(long intervalInMillis){  this.interval=intervalInMillis;  return this;}  }
class C{  public BeanSerializer createDummy(){  return BeanSerializer.createDummy(_beanDesc.getBeanClass());}  }
class C{  public static Float[] nullToEmpty(final Float[] array){  if (array == null || array.length == 0) {    return ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;  }  return array;}  }
class C{  public MetaDataInfo hasSpecial(String role){  if (attributeMetaData == null) {    return MetaDataInfo.UNKNOWN;  }  if (role.equals(Attributes.CONFIDENCE_NAME)) {    for (    AttributeMetaData amd : attributeMetaData.values()) {      String currentRole=amd.getRole();      if (currentRole != null && currentRole.startsWith(role)) {        return MetaDataInfo.YES;      }    }  } else {    for (    AttributeMetaData amd : attributeMetaData.values()) {      if (role.equals(amd.getRole())) {        return MetaDataInfo.YES;      }    }  }switch (attributesRelation) {case SUBSET:    return MetaDataInfo.UNKNOWN;case SUPERSET:case EQUAL:  return MetaDataInfo.NO;default :return MetaDataInfo.UNKNOWN;}}  }
class C{  protected boolean beforeStart(Pcap pcap){  this.end=false;  GrassMarlin.window.addIndicator(null);  return true;}  }
class C{  public final void cmd_reject(){  String info="License rejected or expired";  try {    info=s_res.getString("License_rejected");  } catch (  Exception e) {  }  log.severe(info);  System.exit(10);}  }
class C{  private ContentProviderOperation modifyMimeTypeForContact(long rawContactId,ContactId rcsNumber,String mimeType,boolean newState,boolean oldState){  if (newState == oldState) {    return null;  }  if (newState) {    return insertMimeTypeForContact(rawContactId,rcsNumber,mimeType);  }  return deleteMimeTypeForContact(rawContactId,rcsNumber,mimeType);}  }
class C{  @Override public void flush() throws IOException {synchronized (lock) {    checkNotClosed();    flushInternal();    out.flush();  }}  }
class C{  public Owner owner(){  return owner;}  }
class C{  static void IsoBlit(SurfaceData srcData,SurfaceData dstData,BufferedImage srcImg,BufferedImageOp biop,Composite comp,Region clip,AffineTransform xform,int hint,int sx1,int sy1,int sx2,int sy2,double dx1,double dy1,double dx2,double dy2,boolean texture){  int ctxflags=0;  if (srcData.getTransparency() == Transparency.OPAQUE) {    ctxflags|=OGLContext.SRC_IS_OPAQUE;  }  OGLRenderQueue rq=OGLRenderQueue.getInstance();  rq.lock();  try {    OGLSurfaceData oglSrc=(OGLSurfaceData)srcData;    OGLSurfaceData oglDst=(OGLSurfaceData)dstData;    int srctype=oglSrc.getType();    boolean rtt;    OGLSurfaceData srcCtxData;    if (srctype == OGLSurfaceData.TEXTURE) {      rtt=false;      srcCtxData=oglDst;    } else {      rtt=true;      if (srctype == OGLSurfaceData.FBOBJECT) {        srcCtxData=oglDst;      } else {        srcCtxData=oglSrc;      }    }    OGLContext.validateContext(srcCtxData,oglDst,clip,comp,xform,null,null,ctxflags);    if (biop != null) {      OGLBufImgOps.enableBufImgOp(rq,oglSrc,srcImg,biop);    }    int packedParams=createPackedParams(true,texture,rtt,xform != null,hint,0);    enqueueBlit(rq,srcData,dstData,packedParams,sx1,sy1,sx2,sy2,dx1,dy1,dx2,dy2);    if (biop != null) {      OGLBufImgOps.disableBufImgOp(rq,biop);    }    if (rtt && oglDst.isOnScreen()) {      rq.flushNow();    }  }  finally {    rq.unlock();  }}  }
class C{  public void init(ForceSimulator fsim){  clear();  float x1=Float.MAX_VALUE, y1=Float.MAX_VALUE;  float x2=Float.MIN_VALUE, y2=Float.MIN_VALUE;  Iterator itemIter=fsim.getItems();  while (itemIter.hasNext()) {    ForceItem item=(ForceItem)itemIter.next();    float x=item.location[0];    float y=item.location[1];    if (x < x1)     x1=x;    if (y < y1)     y1=y;    if (x > x2)     x2=x;    if (y > y2)     y2=y;  }  float dx=x2 - x1, dy=y2 - y1;  if (dx > dy) {    y2=y1 + dx;  } else {    x2=x1 + dy;  }  setBounds(x1,y1,x2,y2);  itemIter=fsim.getItems();  while (itemIter.hasNext()) {    ForceItem item=(ForceItem)itemIter.next();    insert(item);  }  calcMass(root);}  }
class C{  public static void updateUserNamePictureCache(String accountId,String fullName,Bitmap bitmap){  sChildAccountId=null;  sCachedBadgedPicture=null;  sToNamePicture.put(accountId,new Pair<String,Bitmap>(fullName,makeRoundUserPicture(bitmap)));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:10.128 -0500",hash_original_method="31A296A1CA9C2500AE4E208A72C83C52",hash_generated_method="123A116FE416943FBFC086F875EB5A60") public String encode(){  return new StringBuffer(scheme).append(SP).append(authParams.encode()).toString();}  }
class C{  public boolean isMbeanSupport(){  return mbeanSupport.get();}  }
class C{  public void clearWorkspaces(){  super.removeElement(Workspace.KEY);}  }
class C{  private void parseJvmOptionsAndSpringConfig(Iterable<String> args){  for (  String arg : args) {    if (arg.startsWith(JVM_OPTION_PREFIX)) {      String jvmOpt=arg.substring(JVM_OPTION_PREFIX.length());      if (!checkJVMOptionIsSupported(jvmOpt))       throw new RuntimeException(JVM_OPTION_PREFIX + " JVM parameters for Ignite batch scripts " + "with double quotes are not supported. "+ "Use JVM_OPTS environment variable to pass any custom JVM option.");      jvmOptions=jvmOptions.isEmpty() ? jvmOpt : jvmOptions + " " + jvmOpt;    } else {      if (springCfgPath.isEmpty())       springCfgPath=arg; else       throw new RuntimeException("Unrecognised parameter has been found: " + arg);    }  }}  }
class C{  public void cancelButtonActionPerformed(){  curNode=null;  addButton.setVisible(true);  cancelButton.setVisible(false);  this.dispatchEvent(new WindowEvent(this,WindowEvent.WINDOW_CLOSING));}  }
class C{  public static boolean hasReceiver(Element element){  return (element.getKind().isField() || element.getKind() == ElementKind.METHOD || element.getKind() == ElementKind.CONSTRUCTOR) && !ElementUtils.isStatic(element);}  }
class C{  private void loadEditProfileFragment(){  Bundle args=new Bundle(1);  args.putString(AppConstants.Keys.ID,AppConstants.UserInfo.INSTANCE.getId());  args.putBoolean(AppConstants.Keys.FROM_LOGIN,true);  loadFragment(R.id.frame_content,(AbstractYeloFragment)Fragment.instantiate(this,EditProfileFragment.class.getName(),args),AppConstants.FragmentTags.EDIT_PROFILE,false,null);}  }
class C{  public final boolean isPackagePrivate(){  return !isPrivate() && !isPublic() && !isProtected();}  }
class C{  public float[] readFloatArray(){  FileInputStream fis=null;  try {    fis=new FileInputStream(file);  } catch (  FileNotFoundException ex) {    throw new IllegalArgumentException(ex.toString());  }  BufferedInputStream bis=new BufferedInputStream(fis);  BinaryInputStream bs=new BinaryInputStream(bis,bigEndian);  return bs.readFloatArray();}  }
class C{  public void computeApproxPostdominators(IR ir){  Dominators.COMPUTE_POST_DOMINATORS=true;  DominatorSystem system=new DominatorSystem(ir);  if (DEBUG) {    System.out.print("Solving...");  }  if (DEBUG) {    System.out.println(system);  }  system.solve();  if (DEBUG) {    System.out.println("done");  }  DF_Solution solution=system.getSolution();  if (DEBUG) {    System.out.println("Postdominator Solution :" + solution);  }  if (DEBUG) {    System.out.print("Updating blocks ...");  }  updateBlocks(solution);  if (DEBUG) {    System.out.println("done.");  }  if (ir.options.PRINT_DOMINATORS) {    printDominators(ir);  }  Dominators.COMPUTE_POST_DOMINATORS=false;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void open(){  state=State.OPENED;  showIcons(true);  animator[LEFT].setFloatValues(button[LEFT],0);  animator[RIGHT].setFloatValues(button[RIGHT],width);  animator[RADIUS].setFloatValues(button[RADIUS],0);  animator[TOP].setFloatValues(button[TOP],0);  animator[BOTTOM].setFloatValues(button[BOTTOM],height);  animatorSet.cancel();  animatorSet.start();  if (iconOpenedDrawable instanceof Animatable) {    ((Animatable)iconOpenedDrawable).start();  }  ViewGroup parentView=(ViewGroup)TapBarMenu.this.getParent();  this.animate().y(menuAnchor == MENU_ANCHOR_BOTTOM ? parentView.getBottom() - height : 0).setDuration(animationDuration).setInterpolator(DECELERATE_INTERPOLATOR).start();}  }
class C{  public static GWTJavaProblem create(String filename,int offset,int length,int line,int column,GWTProblemType problemType,GdtProblemSeverity severity,String... messageArgs){  return new GWTJavaProblem(filename,offset,length,line,column,problemType,severity,messageArgs,null);}  }
class C{  public QueryObject<R> select(QProperty<?>... properties){  for (  QProperty<?> property : properties) {    property.getQueryObject().projectedProperties.clear();  }  for (  QProperty<?> property : properties) {    property.getQueryObject().projectedProperties.add(property.getName());  }  return this;}  }
class C{  public boolean isIssuingDistributionPointEnabled(){  return issuingDistributionPointEnabled;}  }
class C{  public static Hashtable<String,int[]> clusterOverlapMeasure(int[] clusterIDs,ObjectVector[] vectors){  String[] names=new String[vectors.length];  Hashtable<String,int[]> internalResults=new Hashtable<String,int[]>();  for (int i=0; i < vectors.length; ++i) {    names[i]=(new File(vectors[i].getObject().toString())).getParent();    int[] matchAndTotal={0,0};    internalResults.put(names[i],matchAndTotal);  }  int numClusters=getMaxValue(clusterIDs);  for (int i=0; i < numClusters; ++i) {    String[] cluster=getCluster(i,clusterIDs,names);    if (cluster.length < 2) {      continue;    }    for (int j=0; j < cluster.length; ++j) {      for (int k=j + 1; k < cluster.length; ++k) {        int[] matchAndTotalJ=internalResults.get(cluster[j]);        int[] matchAndTotalK=internalResults.get(cluster[k]);        matchAndTotalJ[1]++;        matchAndTotalK[1]++;        if (cluster[k].equals(cluster[j])) {          matchAndTotalJ[0]++;          matchAndTotalK[0]++;        }      }    }  }  return internalResults;}  }
class C{  public String returnJSON(){  return this.json.trim();}  }
class C{  public void AddPhysicalObject(PhysicalObject2D mobjRigidBody,Double2D connectionPoint){  if (obj1 == null) {    obj1=mobjRigidBody;    r1=connectionPoint;  } else {    obj2=mobjRigidBody;    r2=connectionPoint;  }}  }
class C{  public boolean hasNext(){  return pos < xml.length();}  }
class C{  private static Label findLabelText(Container root,String text){  if (verbose) {    log("findLabelText(" + root + ", "+ text+ ")");  }  int count=root.getComponentCount();  for (int iter=0; iter < count; iter++) {    Component c=root.getComponentAt(iter);    if (c instanceof Label) {      String n=((Label)c).getText();      if (n != null && n.equals(text)) {        return (Label)c;      }      continue;    }    if (c instanceof Container) {      Label l=findLabelText((Container)c,text);      if (l != null) {        return l;      }    }  }  return null;}  }
class C{  public static short min(short a,short b,short c){  if (b < a) {    a=b;  }  if (c < a) {    a=c;  }  return a;}  }
class C{  public IntTrie(InputStream inputStream,DataManipulate datamanipulate) throws IOException {  super(inputStream,datamanipulate);  if (!isIntTrie()) {    throw new IllegalArgumentException("Data given does not belong to a int trie.");  }}  }
class C{  private boolean configureMasterBrokerConnection(){  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Master URI passed in to Controller: " + masterUri);    LOGGER.debug("Configure master broker connection");  }  if (remoteJmsTemplate == null) {    throw new IllegalStateException("This DistributeWorkerController does not have a reference to the JmsTemplateWrapper, needed to configure the connection.");  }  int failoverTimeout=5 * 1000;  int maxReconnectAttempts=5;  final ActiveMQConnectionFactory activeMQConnectionFactory=new ActiveMQConnectionFactory("failover:(" + masterUri + ")"+ "?timeout="+ failoverTimeout+ "&maxReconnectAttempts="+ maxReconnectAttempts);  activeMQConnectionFactory.setOptimizeAcknowledge(true);  activeMQConnectionFactory.setUseCompression(true);  activeMQConnectionFactory.setAlwaysSessionAsync(false);  activeMQConnectionFactory.getPrefetchPolicy().setQueuePrefetch(getQueuePrefetchLimit());  RedeliveryPolicy queuePolicy=activeMQConnectionFactory.getRedeliveryPolicy();  queuePolicy.setInitialRedeliveryDelay(0);  queuePolicy.setRedeliveryDelay(1 * 1000);  queuePolicy.setUseExponentialBackOff(false);  queuePolicy.setMaximumRedeliveries(4);  activeMQConnectionFactory.setRedeliveryPolicy(queuePolicy);  activeMQConnectionFactory.setTransportListener(jmsTransportListener);  activeMQConnectionFactory.setExceptionListener(jmsExceptionListener);  final CachingConnectionFactory oldCachingconnectionFactory=new CachingConnectionFactory(activeMQConnectionFactory);  final PooledConnectionFactory connectionFactory=new PooledConnectionFactory(activeMQConnectionFactory);  connectionFactory.setMaxConnections(100);  remoteQueueJmsContainer.setConnectionFactory(connectionFactory);  managerTopicMessageListenerJmsContainer.setConnectionFactory(connectionFactory);  LOGGER.debug("Set remoteJMS template ");  final JmsTemplate jmsTemplate=new JmsTemplate(connectionFactory);  jmsTemplate.setExplicitQosEnabled(true);  jmsTemplate.setSessionAcknowledgeMode(Session.CLIENT_ACKNOWLEDGE);  setRemoteJmsTemplate(jmsTemplate);  responseQueueMessageListener.setRemoteJmsTemplate(jmsTemplate);  workerMonitorQueueListener.setRemoteJmsTemplate(jmsTemplate);  workerMessageSender.setRemoteJmsTemplate(jmsTemplate);  if (highMemory && masterWorker) {    LOGGER.debug("High Memory Remote Worker setup ***");    if (highMemJobRequestQueue != null) {      remoteQueueJmsContainer.setDestination(highMemJobRequestQueue);      LOGGER.debug("Worker: masterworker - this worker is a child of the master and queue set to highMemJobRequestQueue");    } else {      throw new IllegalStateException("The highMemJobRequestQueue can not be null .");    }  }  LOGGER.debug("Start the listeners on the remote broker ");  remoteQueueJmsContainer.start();  managerTopicMessageListenerJmsContainer.start();  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("MessageListenerContainer started, connected to: " + masterUri);  }  String address=masterUri.split(":")[1].substring(2);  int port=Integer.parseInt(masterUri.split(":")[2]);  LOGGER.debug("address: " + address + ":  port"+ port);  if (isReachable(address,port,5000)) {    LOGGER.debug("The master process is reachable, master url: " + masterUri + " ("+ address+ ": "+ port+ ")");  } else {    LOGGER.warn("The master process is not reachable, url: " + masterUri + " ("+ address+ ": "+ port+ ")");  }  return true;}  }
class C{  public void close(){  this.table.close();}  }
class C{  public static String convertSystemNameToAlternate(String systemName){  if (!validSystemNameFormat(systemName,systemName.charAt(1))) {    return "";  }  String altName="";  String s="";  int k=0;  boolean noB=true;  for (int i=2; (i < systemName.length()) && noB; i++) {    if (systemName.charAt(i) == 'B') {      s=systemName.substring(2,i);      k=i + 1;      noB=false;    }  }  if (noB) {    int num=Integer.valueOf(systemName.substring(2)).intValue();    int nAddress=num / 1000;    int bitNum=num - (nAddress * 1000);    altName=systemName.substring(0,2) + Integer.toString(nAddress) + "B"+ Integer.toString(bitNum);  } else {    int nAddress=Integer.valueOf(s).intValue();    int bitNum=Integer.parseInt(systemName.substring(k,systemName.length()));    if (bitNum > 999) {      return "";    }    altName=systemName.substring(0,2) + Integer.toString((nAddress * 1000) + bitNum);  }  return altName;}  }
class C{  public DefaultRequest exceptionFatal(Boolean value){  setBoolean(EXCEPTION_FATAL,value);  return this;}  }
class C{  public static void destroyForcefullyAndWait(SystemProcess process) throws IOException, InterruptedException {  Stopwatch sw=Stopwatch.createStarted();  process.destroyForcefully();  waitFor(process,sw,"Destroyed {} forcefully");}  }
class C{  public void testFilterSharedMode() throws Exception {  processFilterTest(DeploymentMode.SHARED);}  }
class C{  private void populateConnections(final List<ConfiguredConnectionGroupDetails> groups){  rootItem.getChildren().clear();  rootItemProperties.getChildren().clear();  final List<ConnectionTreeItemProperties> treeItemGroupProperties=new ArrayList<>();  final List<ConnectionTreeItemProperties> treeItemConnectionProperties=new ArrayList<>();  buildTree(rootItemProperties,treeItemGroupProperties,treeItemConnectionProperties);  addToTree(rootItem,rootItemProperties);}  }
class C{  @Override public final void closeShape(){  elements.add(new ClosePath());}  }
class C{  private Poi savePoiNoTransaction(Poi poi){  List<PoiTag> poiTagsToRemove=poiTagDao.queryByPoiId(poi.getId());  poiTagsToRemove.removeAll(poi.getTags());  for (  PoiTag poiTag : poiTagsToRemove) {    poiTagDao.delete(poiTag);  }  List<PoiNodeRef> poiNodeRefsToRemove=poiNodeRefDao.queryByPoiId(poi.getId());  poiNodeRefsToRemove.removeAll(poi.getNodeRefs());  for (  PoiNodeRef poiNodeRef : poiNodeRefsToRemove) {    poiNodeRefDao.delete(poiNodeRef);  }  poiDao.createOrUpdate(poi);  if (poi.getTags() != null) {    for (    PoiTag poiTag : poi.getTags()) {      poiTag.setPoi(poi);      poiTagDao.createOrUpdate(poiTag);    }  }  if (poi.getNodeRefs() != null) {    for (    PoiNodeRef poiNodeRef : poi.getNodeRefs()) {      poiNodeRef.setPoi(poi);      poiNodeRefDao.createOrUpdate(poiNodeRef);    }  }  return poi;}  }
class C{  public static Function<String,String> lowercase(){  return null;}  }
class C{  @Override public void send(HandshakeIODataStream out){}  }
class C{  public UndirectedSparseMultigraph(){  super(EdgeType.UNDIRECTED);  vertices=new HashMap<V,Set<E>>();  edges=new HashMap<E,Pair<V>>();}  }
class C{  public LazyArray(final ObjectProvider<? extends Type> provider){  super();  this.provider=provider;}  }
class C{  public final int actualNumClasses(){  int returnValue=0;  int i;  for (i=0; i < m_perClass.length; i++) {    if (Utils.gr(m_perClass[i],0)) {      returnValue++;    }  }  return returnValue;}  }
class C{  @Override public int compareTo(@NonNull InstalledApp other){  return comparator.compare(this,other);}  }
class C{  public static double MSErawFitness(boolean useTrainingData,GEPIndividual ind,int chromosomeNum){  double sumOfSquaredAbsoluteError=0.0;  double expectedResult;  double result;  double error;  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  double dvValues[]=dv.getDependentVariableValues(chromosomeNum);  for (int i=0; i < dvValues.length; i++) {    expectedResult=dvValues[i];    result=ind.eval(chromosomeNum,useTrainingData,i);    error=result - expectedResult;    sumOfSquaredAbsoluteError+=error * error;  }  return (sumOfSquaredAbsoluteError / dvValues.length);}  }
class C{  protected static Document parseXMLFile(final String fileName) throws Exception {  try {    DocumentBuilder docBuilder;    Document doc=null;    DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();    docBuilderFactory.setIgnoringElementContentWhitespace(true);    docBuilder=docBuilderFactory.newDocumentBuilder();    File xmlFile=new File(fileName);    doc=docBuilder.parse(xmlFile);    return doc;  } catch (  Exception e) {    Activator.getDefault().log(e.getMessage(),e);    throw new Exception(String.format("%s%s",Messages.acsErrMsg,e.getMessage()));  }}  }
class C{  public DomainContent loadStaticContent(Space space){  Universe univ=space.getUniverse();  Domain domain=space.getDomain();  List<Dimension> dimensions=dimensionDAO.findByDomain(univ.getContext(),domain.getId());  List<Metric> metrics=metricDAO.findByDomain(univ.getContext(),domain.getId());  DomainContent content=new DomainContent(domain,dimensions,metrics);  return content;}  }
class C{  public final boolean postDelayed(Runnable r,long delayMillis){  return mExec.postDelayed(wrapRunnable(r),delayMillis);}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  public LinearRegression(Matrix a,Matrix y,double[] w,double ridge){  if (w.length != a.getRowDimension())   throw new IllegalArgumentException("Incorrect number of weights provided");  Matrix weightedThis=new Matrix(a.getRowDimension(),a.getColumnDimension());  Matrix weightedDep=new Matrix(a.getRowDimension(),1);  for (int i=0; i < w.length; i++) {    double sqrt_weight=Math.sqrt(w[i]);    for (int j=0; j < a.getColumnDimension(); j++)     weightedThis.set(i,j,a.get(i,j) * sqrt_weight);    weightedDep.set(i,0,y.get(i,0) * sqrt_weight);  }  calculate(weightedThis,weightedDep,ridge);}  }
class C{  public String dumpAs(Object data,Tag rootTag,FlowStyle flowStyle){  FlowStyle oldStyle=representer.getDefaultFlowStyle();  if (flowStyle != null) {    representer.setDefaultFlowStyle(flowStyle);  }  List<Object> list=new ArrayList<Object>(1);  list.add(data);  StringWriter buffer=new StringWriter();  dumpAll(list.iterator(),buffer,rootTag);  representer.setDefaultFlowStyle(oldStyle);  return buffer.toString();}  }
class C{  public static Map<URI,BlockObject> translateRPSnapshots(DbClient dbClient,List<URI> volumeURIList){  Map<URI,BlockObject> blockObjectCache=new HashMap<>();  for (  URI boURI : volumeURIList) {    BlockObject blockObject=Volume.fetchExportMaskBlockObject(dbClient,boURI);    blockObjectCache.put(blockObject.getId(),blockObject);  }  return blockObjectCache;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.SEXPERIMENT__NAME:    setName((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.paint=SerialUtilities.readPaint(stream);  this.backgroundPaint=SerialUtilities.readPaint(stream);}  }
class C{  public DailyTimeIntervalTriggerImpl(){  super();}  }
class C{  public MissingUserIdHeader(){  requestFileName="missing-userId.query";  responseFile="missing-userId.answer";}  }
class C{  public boolean belongs(@Nullable Object key,int cnt,N node){  return nodes(key,cnt).contains(node);}  }
class C{  public void executeQuery(IMiniTable miniTable){  int AD_Client_ID=Env.getAD_Client_ID(Env.getCtx());  String sql="";  sql=getOrderSQL();  log.fine(sql);  int row=0;  miniTable.setRowCount(row);  try {    PreparedStatement pstmt=DB.prepareStatement(sql.toString(),null);    pstmt.setInt(1,AD_Client_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      miniTable.setRowCount(row + 1);      miniTable.setValueAt(new IDColumn(rs.getInt(1)),row,0);      miniTable.setValueAt(rs.getString(2),row,1);      miniTable.setValueAt(rs.getString(3),row,2);      miniTable.setValueAt(rs.getString(4),row,3);      miniTable.setValueAt(rs.getString(5),row,4);      row++;    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql.toString(),e);  }  miniTable.autoSize();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void requestInfoLine(InfoDisplayEvent event){  fireRequestInfoLine(new InfoDisplayEvent(this,event.getInformation()));}  }
class C{  public boolean isReadOnly(int column) throws SQLException {  return getField(column).isReadOnly();}  }
class C{  private void validateRegisterRequestWithSession(UseCaseConf useCaseConf,Integer bookID,Integer regIdRequest,Integer regIdSession,String bookRegValidadoInSession) throws IOException, ServletException, TecDocException {  String auxBookRegistro=bookID + Keys.GUION_BAJO + regIdRequest;  if (_logger.isDebugEnabled()) {    _logger.debug("validateRegisterRequestWithSession - auxBookRegistro [" + auxBookRegistro + "] bookRegValidadoInSession ["+ bookRegValidadoInSession+ "]");  }  if ((regIdSession == null) || (!regIdSession.equals(regIdRequest)) || (!auxBookRegistro.equals(bookRegValidadoInSession))) {    try {      validateInfoRegister(useCaseConf,bookID,regIdRequest);    } catch (    TecDocException e) {      _logger.error("Se ha producido un error al validar los datos en validateRegisterRequestWithSession: ",e);      throw e;    }  }}  }
class C{  @Override public String toString(){  return "textureReference[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + ","+ "normalized="+ normalized+ ","+ "filterMode="+ cudaTextureFilterMode.stringFor(filterMode)+ ","+ "addressMode=["+ cudaTextureAddressMode.stringFor(addressMode[0])+ ","+ cudaTextureAddressMode.stringFor(addressMode[1])+ ","+ cudaTextureAddressMode.stringFor(addressMode[2])+ "]"+ ","+ "channelDesc="+ channelDesc+ ","+ "sRGB="+ sRGB+ ","+ "maxAnisotropy="+ maxAnisotropy+ ","+ "mipmapFilterMode="+ cudaTextureFilterMode.stringFor(mipmapFilterMode)+ ","+ "mipmapLevelBias="+ mipmapLevelBias+ ","+ "minMipmapLevelClamp="+ minMipmapLevelClamp+ ","+ "maxMipmapLevelClamp="+ maxMipmapLevelClamp+ "]";}  }
class C{  public static void convertPointToScreen(Point p,Component c){  Rectangle b;  int x, y;  do {    if (c instanceof JComponent) {      x=c.getX();      y=c.getY();    } else     if (c instanceof java.applet.Applet || c instanceof java.awt.Window) {      try {        Point pp=c.getLocationOnScreen();        x=pp.x;        y=pp.y;      } catch (      IllegalComponentStateException icse) {        x=c.getX();        y=c.getY();      }    } else {      x=c.getX();      y=c.getY();    }    p.x+=x;    p.y+=y;    if (c instanceof java.awt.Window || c instanceof java.applet.Applet)     break;    c=c.getParent();  } while (c != null);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_ptr_webview);  mPullRefreshWebView=(PullToRefreshWebView)findViewById(R.id.pull_refresh_webview);  mWebView=mPullRefreshWebView.getRefreshableView();  mWebView.getSettings().setJavaScriptEnabled(true);  mWebView.setWebViewClient(new SampleWebViewClient());  mWebView.loadUrl("http://www.google.com");}  }
class C{  @ApiOperation(value="Request an initial load for the specified node for the single engine") @RequestMapping(value="/engine/requestinitialload",method=RequestMethod.POST) @ResponseStatus(HttpStatus.NO_CONTENT) @ResponseBody public final void postRequestInitialLoad(@RequestParam(value="nodeId") String nodeId){  postRequestInitialLoad(getSymmetricEngine().getEngineName(),nodeId);}  }
class C{  public static TitledBorder createTitledBorder(Border border){  return new TitledBorder(border);}  }
class C{  void processServerHelloDone(){  PrivateKey clientKey=null;  if (serverCert != null) {    if (session.cipherSuite.isAnonymous()) {      unexpectedMessage();      return;    }    verifyServerCert();  } else {    if (!session.cipherSuite.isAnonymous()) {      unexpectedMessage();      return;    }  }  if (certificateRequest != null) {    X509Certificate[] certs=null;    String alias=null;    String[] certTypes=certificateRequest.getTypesAsString();    X500Principal[] issuers=certificateRequest.certificate_authorities;    X509KeyManager km=parameters.getKeyManager();    if (km instanceof X509ExtendedKeyManager) {      X509ExtendedKeyManager ekm=(X509ExtendedKeyManager)km;      if (this.socketOwner != null) {        alias=ekm.chooseClientAlias(certTypes,issuers,this.socketOwner);      } else {        alias=ekm.chooseEngineClientAlias(certTypes,issuers,this.engineOwner);      }      if (alias != null) {        certs=ekm.getCertificateChain(alias);      }    } else {      alias=km.chooseClientAlias(certTypes,issuers,this.socketOwner);      if (alias != null) {        certs=km.getCertificateChain(alias);      }    }    session.localCertificates=certs;    clientCert=new CertificateMessage(certs);    clientKey=km.getPrivateKey(alias);    send(clientCert);  }  if (session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA || session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {    Cipher c;    try {      c=Cipher.getInstance("RSA/ECB/PKCS1Padding");      if (serverKeyExchange != null) {        if (!session.cipherSuite.isAnonymous()) {          DigitalSignature ds=new DigitalSignature(serverCert.getAuthType());          ds.init(serverCert.certs[0]);          ds.update(clientHello.getRandom());          ds.update(serverHello.getRandom());          if (!serverKeyExchange.verifySignature(ds)) {            fatalAlert(AlertProtocol.DECRYPT_ERROR,"Cannot verify RSA params");            return;          }        }        c.init(Cipher.WRAP_MODE,serverKeyExchange.getRSAPublicKey());      } else {        c.init(Cipher.WRAP_MODE,serverCert.certs[0]);      }    } catch (    Exception e) {      fatalAlert(AlertProtocol.INTERNAL_ERROR,"Unexpected exception",e);      return;    }    preMasterSecret=new byte[48];    parameters.getSecureRandom().nextBytes(preMasterSecret);    System.arraycopy(clientHello.client_version,0,preMasterSecret,0,2);    try {      clientKeyExchange=new ClientKeyExchange(c.wrap(new SecretKeySpec(preMasterSecret,"preMasterSecret")),serverHello.server_version[1] == 1);    } catch (    Exception e) {      fatalAlert(AlertProtocol.INTERNAL_ERROR,"Unexpected exception",e);      return;    }  } else   if (session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_DSS || session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_DSS_EXPORT || session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_RSA || session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_RSA_EXPORT || session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_DH_anon || session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_DH_anon_EXPORT) {    if (serverKeyExchange == null) {      fatalAlert(AlertProtocol.UNEXPECTED_MESSAGE,"Expected ServerKeyExchange");      return;    }    if (session.cipherSuite.isAnonymous() != serverKeyExchange.isAnonymous()) {      fatalAlert(AlertProtocol.DECRYPT_ERROR,"Wrong type in ServerKeyExchange");      return;    }    try {      if (!session.cipherSuite.isAnonymous()) {        DigitalSignature ds=new DigitalSignature(serverCert.getAuthType());        ds.init(serverCert.certs[0]);        ds.update(clientHello.getRandom());        ds.update(serverHello.getRandom());        if (!serverKeyExchange.verifySignature(ds)) {          fatalAlert(AlertProtocol.DECRYPT_ERROR,"Cannot verify DH params");          return;        }      }      KeyFactory kf=KeyFactory.getInstance("DH");      KeyAgreement agreement=KeyAgreement.getInstance("DH");      KeyPairGenerator kpg=KeyPairGenerator.getInstance("DH");      PublicKey serverDhPublic=kf.generatePublic(new DHPublicKeySpec(serverKeyExchange.par3,serverKeyExchange.par1,serverKeyExchange.par2));      DHParameterSpec spec=new DHParameterSpec(serverKeyExchange.par1,serverKeyExchange.par2);      kpg.initialize(spec);      KeyPair kp=kpg.generateKeyPair();      DHPublicKey pubDhKey=(DHPublicKey)kp.getPublic();      clientKeyExchange=new ClientKeyExchange(pubDhKey.getY());      PrivateKey privDhKey=kp.getPrivate();      agreement.init(privDhKey);      agreement.doPhase(serverDhPublic,true);      preMasterSecret=agreement.generateSecret();    } catch (    Exception e) {      fatalAlert(AlertProtocol.INTERNAL_ERROR,"Unexpected exception",e);      return;    }  } else {    fatalAlert(AlertProtocol.DECRYPT_ERROR,"Unsupported handshake type");    return;  }  if (clientKeyExchange != null) {    send(clientKeyExchange);  }  computerMasterSecret();  if (clientCert != null && clientCert.certs.length > 0 && !clientKeyExchange.isEmpty()) {    String authType=clientKey.getAlgorithm();    DigitalSignature ds=new DigitalSignature(authType);    ds.init(clientKey);    if ("RSA".equals(authType)) {      ds.setMD5(io_stream.getDigestMD5());      ds.setSHA(io_stream.getDigestSHA());    } else     if ("DSA".equals(authType)) {      ds.setSHA(io_stream.getDigestSHA());    }    certificateVerify=new CertificateVerify(ds.sign());    send(certificateVerify);  }  sendChangeCipherSpec();}  }
class C{  public void hideTableItemControlDecoration(TableViewer tableViewer,Object data){  if (null == tableViewer) {    return;  }  for (  TableItemControlDecoration decoration : tableItemControlDecorations) {    if (data == decoration.getData()) {      decoration.hide();      return;    }  }}  }
class C{  public td[] addPopupClose(Properties ctx){  input button=WebUtil.createClosePopupButton(ctx);  if (m_table == null) {    m_body.addElement(button);    return null;  }  td left=new td("popupFooter",AlignType.LEFT,AlignType.MIDDLE,false,null);  td right=new td("popupFooter",AlignType.RIGHT,AlignType.MIDDLE,false,button);  m_table.addElement(new tr().addElement(left).addElement(right));  return new td[]{left,right};}  }
class C{  private void updateCookies(Collection<IdentifiableCookie> cookies){  this.cookies.removeAll(cookies);  this.cookies.addAll(cookies);}  }
class C{  public cudaArray(){}  }
class C{  public static boolean isUserAMonkey(){  try {    return ActivityManagerNative.getDefault().isUserAMonkey();  } catch (  RemoteException e) {  }  return false;}  }
class C{  public static byte[] drawableToByte(Drawable d){  return bitmapToByte(drawableToBitmap(d));}  }
class C{  public void testExportImportMultiple_gpx(){  testExportImportMultiple(TrackFileFormat.GPX);}  }
class C{  public static String toStringUTF8(byte[] x,int offset,int len){  try {    return new String(x,offset,len,PngHelperInternal.charsetUTF8name);  } catch (  UnsupportedEncodingException e) {    throw new PngBadCharsetException(e);  }}  }
class C{  protected void registerHandlers(Map<String,Object> urlMap) throws BeansException {  if (urlMap.isEmpty()) {    logger.warn("Neither 'urlMap' nor 'mappings' set on SimpleUrlHandlerMapping");  } else {    for (    Map.Entry<String,Object> entry : urlMap.entrySet()) {      String url=entry.getKey();      Object handler=entry.getValue();      if (!url.startsWith("/")) {        url="/" + url;      }      if (handler instanceof String) {        handler=((String)handler).trim();      }      registerHandler(url,handler);    }  }}  }
class C{  public AuthorityKeyIdentifier(GeneralNames name,BigInteger serialNumber){  this.keyidentifier=null;  this.certissuer=GeneralNames.getInstance(name.toASN1Primitive());  this.certserno=new ASN1Integer(serialNumber);}  }
class C{  public int nextInt(final int range){  if (range == 0)   return 0;  if (range < 0)   throw new IllegalArgumentException();  if (range > m_max)   throw new IllegalStateException("Range exceeds max range of generator");  return next() % range;}  }
class C{  public void collectInferredElements(EObject astElement,IAcceptor<? super EObject> result){  new Impl(result).doSwitch(astElement);}  }
class C{  public final char[] buffer(){  return _buf;}  }
class C{  @Override public boolean equals(Object other){  if (_map.equals(other)) {    return true;  } else   if (other instanceof Map) {    Map that=(Map)other;    if (that.size() != _map.size()) {      return false;    } else {      Iterator it=that.entrySet().iterator();      for (int i=that.size(); i-- > 0; ) {        Map.Entry e=(Map.Entry)it.next();        Object key=e.getKey();        Object val=e.getValue();        if (key instanceof Long) {          long k=unwrapKey(key);          Object v=unwrapValue((V)val);          if (_map.containsKey(k) && v == _map.get(k)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  public static boolean addInductionSmelterRecipe(ItemStack aInput1,ItemStack aInput2,ItemStack aOutput1,ItemStack aOutput2,int aEnergy,int aChance){  aOutput1=GT_OreDictUnificator.get(true,aOutput1);  aOutput2=GT_OreDictUnificator.get(true,aOutput2);  if (aInput1 == null || aOutput1 == null || GT_Utility.getContainerItem(aInput1,false) != null)   return false;  if (!GregTech_API.sRecipeFile.get(ConfigCategories.Machines.inductionsmelter,aInput2 == null ? aInput1 : aOutput1,true))   return false;  try {    ThermalExpansion.addSmelterRecipe(aEnergy * 10,GT_Utility.copy(aInput1),aInput2 == null ? new ItemStack(Blocks.sand,1,0) : aInput2,aOutput1,aOutput2,aChance);  } catch (  Throwable e) {  }  return true;}  }
class C{  public static final int[] toIntArray(String s){  int[] array=new int[s.length()];  for (int i=0; i < s.length(); i++) {    array[i]=Character.digit(s.charAt(i),10);  }  return array;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:52.681 -0500",hash_original_method="1664CD3D04475564F4589D104C82DEBA",hash_generated_method="99C537F008AE134B8284A7569C97E140") public DecoderException(String pMessage){  super(pMessage);}  }
class C{  public Boolean isCopy(){  return copy;}  }
class C{  @TargetApi(Build.VERSION_CODES.KITKAT) public void disableExclusiveNfc(){  NfcAdapter adapter=NfcAdapter.getDefaultAdapter(activity);  if (adapter != null) {    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {      disableReaderMode(adapter);    } else {      disableForegroundDispatch(adapter);    }  }}  }
class C{  @Nullable private ODGFigure readElement(IXMLElement elem) throws IOException {  ODGFigure f=null;  if (elem.getNamespace() == null || elem.getNamespace().equals(DRAWING_NAMESPACE)) {    String name=elem.getName();    if (name.equals("caption")) {      f=readCaptionElement(elem);    } else     if (name.equals("circle")) {      f=readCircleElement(elem);    } else     if (name.equals("connector")) {      f=readCircleElement(elem);    } else     if (name.equals("custom-shape")) {      f=readCustomShapeElement(elem);    } else     if (name.equals("ellipse")) {      f=readEllipseElement(elem);    } else     if (name.equals("frame")) {      f=readFrameElement(elem);    } else     if (name.equals("g")) {      f=readGElement(elem);    } else     if (name.equals("line")) {      f=readLineElement(elem);    } else     if (name.equals("measure")) {      f=readMeasureElement(elem);    } else     if (name.equals("path")) {      f=readPathElement(elem);    } else     if (name.equals("polygon")) {      f=readPolygonElement(elem);    } else     if (name.equals("polyline")) {      f=readPolylineElement(elem);    } else     if (name.equals("rect")) {      f=readRectElement(elem);    } else     if (name.equals("regularPolygon")) {      f=readRegularPolygonElement(elem);    } else {      if (DEBUG) {        System.out.println("ODGInputFormat.readElement(" + elem + ") not implemented.");      }    }  }  if (f != null) {    if (f.isEmpty()) {      if (DEBUG) {        System.out.println("ODGInputFormat.readElement():null - discarded empty figure " + f);      }      return null;    }    if (DEBUG) {      System.out.println("ODGInputFormat.readElement():" + f + ".");    }  }  return f;}  }
class C{  private void doFailCgModifyStep(List<VolumeDescriptor> volumeDescriptors,CGRequestParams cgParams,URI protectionSetId,String token,Exception e) throws InternalException {  if (VolumeDescriptor.getVirtualPoolChangeVolume(volumeDescriptors) != null) {    AuditBlockUtil.auditBlock(_dbClient,OperationTypeEnum.CHANGE_VOLUME_VPOOL,true,AuditLogManager.AUDITOP_END,token);  }  stepFailed(token,e,METHOD_CG_MODIFY_STEP);}  }
class C{  public void writeShort(final short i){  buffer[offset++]=(byte)0;  buffer[offset++]=(byte)0;  buffer[offset++]=(byte)((i >> 8) & 0xff);  buffer[offset++]=(byte)(i & 0xff);}  }
class C{  public void startDocument() throws SAXException {  try {    PropertyMapBuilder builder=new PropertyMapBuilder(sr.getProperties());    builder.put(ValidateProperty.ERROR_HANDLER,ceh);    validator=sr.getNvdlSchema().createValidator(builder.toPropertyMap());  } catch (  IOException e) {    throw new WrappedIOException(e);  }catch (  IncorrectSchemaException e) {    throw new RuntimeException("internal error in RNG schema for NVDL");  }  setDelegate(validator.getContentHandler());  if (locator != null)   super.setDocumentLocator(locator);  super.startDocument();}  }
class C{  public EstimatorTimeSource(TimeSource parentTimeSource,int updateIntervalMillis,TriavaLogger logger){  this.logger=logger;  this.timeSource=parentTimeSource;  setTimeFields();  this.UPDATE_INTERVAL_MS=updateIntervalMillis;  setName("EstimatorTimeSource-" + UPDATE_INTERVAL_MS + "ms");  setPriority(Thread.MAX_PRIORITY);  setDaemon(true);  start();}  }
class C{  public LocoIO(){}  }
class C{  public InputStream fetchMoverInterfacesInfo(final Argument argument,final Map<String,Object> keyMap,int index) throws VNXFilePluginException {  _logger.info("mover interfaces info query");  InputStream iStream=null;  try {    Query query=new Query();    MoverQueryParams moverQuery=new MoverQueryParams();    MoverQueryParams.AspectSelection selection=new MoverQueryParams.AspectSelection();    selection.setMoverNetworkDevices(true);    moverQuery.setAspectSelection(selection);    query.getQueryRequestChoice().add(moverQuery);    iStream=_vnxFileInputRequestBuilder.getQueryParamPacket(moverQuery,false);  } catch (  JAXBException jaxbException) {    throw new VNXFilePluginException("Exception occurred while generating input xml for datamover info",jaxbException.getCause());  }  return iStream;}  }
class C{  public void removeFromMatchingCqMap(CqQueryImpl cq){synchronized (this.matchingCqMap) {    String cqQuery=cq.getQueryString();    if (matchingCqMap.containsKey(cqQuery)) {      Set matchingCQs=(Set)matchingCqMap.get(cqQuery);      matchingCQs.remove(cq.getServerCqName());      if (logger.isDebugEnabled()) {        logger.debug("Removing CQ from MatchingCQ map, CQName: {} Number of matched querys are: {}",cq.getServerCqName(),matchingCQs.size());      }      if (matchingCQs.isEmpty()) {        matchingCqMap.remove(cqQuery);        this.stats.decUniqueCqQuery();      }    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrgetownerelement02.class,args);}  }
class C{  public void check(int val){  if (val < 0 || val > max) {    throw new IllegalArgumentException(description + " " + val+ "is out of range");  }}  }
class C{  public void requestThrottleSetup(LocoAddress address,boolean control){  if (currentThrottle != null) {    log.error("DCC direct cannot handle more than one throttle now");    failedThrottleRequest((DccLocoAddress)address,"DCC direct cannot handle more than one throttle " + address);    return;  }  log.warn("requestThrottleSetup should preserve actual address object, not use ints");  currentThrottle=new Throttle(((DccLocoAddress)address).getNumber());  notifyThrottleKnown(currentThrottle,currentThrottle.getLocoAddress());}  }
class C{  public double length(){  return Math.sqrt(lengthSquared());}  }
class C{  private MavenUtils(){}  }
class C{  public static BigInteger mersennePrime(BigInteger n){  BigInteger two=new BigInteger("2");  BigInteger x=new BigInteger("2");  for (BigInteger i=new BigInteger("1"); i.compareTo(n) < 0; i=i.add(new BigInteger("1"))) {    x=x.multiply(two);  }  return x.subtract(new BigInteger("1"));}  }
class C{  public void add(long key,Object value){  add(key,value,root);}  }
class C{  protected BCSChild createBCSChild(Object targetChild,Object peer){  return new BCSChild(targetChild,peer);}  }
class C{  protected boolean raycast(Vector2 start,double length,double invDx,double invDy,AABB aabb){  double tx1=(aabb.getMinX() - start.x) * invDx;  double tx2=(aabb.getMaxX() - start.x) * invDx;  double tmin=Math.min(tx1,tx2);  double tmax=Math.max(tx1,tx2);  double ty1=(aabb.getMinY() - start.y) * invDy;  double ty2=(aabb.getMaxY() - start.y) * invDy;  tmin=Math.max(tmin,Math.min(ty1,ty2));  tmax=Math.min(tmax,Math.max(ty1,ty2));  if (tmax < 0)   return false;  if (tmin > length)   return false;  return tmax >= tmin;}  }
class C{  synchronized public void startRing(String remoteContact){  ringer.ring();}  }
class C{  public void enqueueWaitingTask(){  TaskOptions options=TaskOptions.Builder.withDefaults();  options.param("jobId",job.getJobReference().getJobId());  options.param("userId",userId);  options.url("/task");  options.countdownMillis(1000);  options.retryOptions(RetryOptions.Builder.withTaskRetryLimit(0));  Queue queue=QueueFactory.getDefaultQueue();  queue.add(options);}  }
class C{  private String extractSignatureId(UseKeyType useKey,SecurityHeaderType header){  assert header != null;  String signatureId=null;  if (useKey != null) {    signatureId=useKey.getSig();    if (header.getSignature() == null || !signatureId.equalsIgnoreCase(header.getSignature().getId())) {      throw new InvalidSecurityHeaderException("SignatureId from UseKey doesn't match signature from the SecurityHeader");    }  }  return signatureId;}  }
class C{  public static JsonDeserializer createDeserializer(final JSONObject object){  return new JsonDeserializer(object,new DeserializationContext(new MockAccountLookup()));}  }
class C{  public HttpURL(final String userinfo,final String host,final int port,final String path) throws URIException {  this(userinfo,host,port,path,null,null);}  }
class C{  public EncoderTestSuiteBuilder invalid(int min,int max){  _invalid.set(min,max + 1);  _valid.clear(min,max + 1);  _encoded.clear(min,max + 1);  return this;}  }
class C{  private Document initializeModel(EditorKit kit,URL page){  Document doc=kit.createDefaultDocument();  if (pageProperties != null) {    for (Enumeration<String> e=pageProperties.keys(); e.hasMoreElements(); ) {      String key=e.nextElement();      doc.putProperty(key,pageProperties.get(key));    }    pageProperties.clear();  }  if (doc.getProperty(Document.StreamDescriptionProperty) == null) {    doc.putProperty(Document.StreamDescriptionProperty,page);  }  return doc;}  }
class C{  public boolean equals(Object other){  if (!(other instanceof production))   return false; else   return equals((production)other);}  }
class C{  private void updateNotification(String content){  String ticker=String.format(getString(R.string.media_notif_ticker),getString(R.string.app_name));  Intent showDetailsIntent=new Intent(this,FileDisplayActivity.class);  showDetailsIntent.putExtra(FileActivity.EXTRA_FILE,mFile);  showDetailsIntent.putExtra(FileActivity.EXTRA_ACCOUNT,mAccount);  showDetailsIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  mNotificationBuilder.setContentIntent(PendingIntent.getActivity(getApplicationContext(),(int)System.currentTimeMillis(),showDetailsIntent,PendingIntent.FLAG_UPDATE_CURRENT));  mNotificationBuilder.setWhen(System.currentTimeMillis());  mNotificationBuilder.setTicker(ticker);  mNotificationBuilder.setContentTitle(ticker);  mNotificationBuilder.setContentText(content);  mNotificationManager.notify(R.string.media_notif_ticker,mNotificationBuilder.build());}  }
class C{  public void addAdapter(int index,RecyclerView.Adapter adapter){  LocalAdapter localAdapter=new LocalAdapter(adapter);  adapters.add(index,localAdapter);  adapter.registerAdapterDataObserver(localAdapter.observer);  notifyDataSetChanged();}  }
class C{  public boolean hasMid(){  return mid > NO_MID;}  }
class C{  public void updateCompass(double azimuth){  compass.setValue(azimuth);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newChild;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node oldChild;  Node replacedNode;  doc=(Document)load("staff",true);  newChild=doc.getDocumentElement();  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  oldChild=childList.item(0);{    boolean success=false;    try {      replacedNode=employeeNode.replaceChild(newChild,oldChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  List<Entry> killAll(boolean rootIncluded){  List<Entry> killed=new ArrayList<>(rootIncluded ? entries.size() : entries.size() - 1);  Entry entry;  for (int i=entries.size() - 1; i > (rootIncluded ? -1 : 0); i--) {    entry=entries.get(i);    if (entry.dead)     continue;    entry.dead=true;    if (i != 0) {      killed.add(entry);    }  }  return killed;}  }
class C{  public boolean mergeNodes(Node mergeInto,Node mergeFrom){  boolean mergeOK=true;  dirty=true;  if (((mergeInto.getOsmId() < 0) && (mergeFrom.getOsmId() > 0)) || mergeInto.getOsmVersion() < mergeFrom.getOsmVersion()) {    Log.d("StorageDelegator","swap into #" + mergeInto.getOsmId() + " with from #"+ mergeFrom.getOsmId());    Node tmpNode=mergeInto;    mergeInto=mergeFrom;    mergeFrom=tmpNode;    Log.d("StorageDelegator","now into #" + mergeInto.getOsmId() + " from #"+ mergeFrom.getOsmId());  }  mergeOK=!roleConflict(mergeInto,mergeFrom);  setTags(mergeInto,OsmElement.mergedTags(mergeInto,mergeFrom));  for (  String v : mergeInto.getTags().values()) {    if (v.indexOf(";") >= 0) {      mergeOK=false;      break;    }  }  for (  Way way : currentStorage.getWays(mergeFrom)) {    replaceNodeInWay(mergeFrom,mergeInto,way);  }  for (  Way way : apiStorage.getWays(mergeFrom)) {    replaceNodeInWay(mergeFrom,mergeInto,way);  }  mergeElementsRelations(mergeInto,mergeFrom);  removeNode(mergeFrom);  recordImagery();  return mergeOK;}  }
class C{  public static Class<?> detectClass(Object obj){  assert obj != null;  if (obj instanceof GridPeerDeployAware)   return ((GridPeerDeployAware)obj).deployClass();  if (U.isPrimitiveArray(obj))   return obj.getClass();  if (!U.isJdk(obj.getClass()))   return obj.getClass();  if (obj instanceof Iterable<?>) {    Object o=F.first((Iterable<?>)obj);    return o != null ? o.getClass() : obj.getClass();  }  if (obj instanceof Map) {    Map.Entry<?,?> e=F.firstEntry((Map<?,?>)obj);    if (e != null) {      Object k=e.getKey();      if (k != null && !U.isJdk(k.getClass()))       return k.getClass();      Object v=e.getValue();      return v != null ? v.getClass() : obj.getClass();    }  }  if (obj.getClass().isArray()) {    int len=Array.getLength(obj);    if (len > 0) {      Object o=Array.get(obj,0);      return o != null ? o.getClass() : obj.getClass();    } else     return obj.getClass().getComponentType();  }  return obj.getClass();}  }
class C{  public T caseStringExpr_(StringExpr_ object){  return null;}  }
class C{  public DoubleVector(int len){  this.len=len;  vect=new double[len];}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  if (!isEnabled)   return true;switch (event.getAction()) {case MotionEvent.ACTION_DOWN:    setPressed(true);  break;case MotionEvent.ACTION_MOVE:float x=event.getX();float y=event.getY();boolean isInside=(x > 0 && x < getWidth() && y > 0 && y < getHeight());if (isPressed() != isInside) {setPressed(isInside);}break;case MotionEvent.ACTION_UP:icon.animate().scaleX(0.7f).scaleY(0.7f).setDuration(150).setInterpolator(DECCELERATE_INTERPOLATOR);icon.animate().scaleX(1).scaleY(1).setInterpolator(DECCELERATE_INTERPOLATOR);if (isPressed()) {performClick();setPressed(false);}break;}return true;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String suffix="_new";  String inputFilesString=null;  WhiteboxRaster.DataType dataType=WhiteboxRaster.DataType.FLOAT;  String[] imageFiles;  int numImages=0;  int i;  int col, row;  int progress;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    } else     if (i == 1) {      suffix=args[i];    } else     if (i == 2) {      if (args[i].toLowerCase().contains("double")) {        dataType=DataType.DOUBLE;      } else       if (args[i].toLowerCase().contains("float")) {        dataType=DataType.FLOAT;      } else       if (args[i].toLowerCase().contains("int")) {        dataType=DataType.INTEGER;      }    }  }  if (inputFilesString == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      inputHeader=imageFiles[i];      WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");      int rows=image.getNumberRows();      int cols=image.getNumberColumns();      double inputNoData=image.getNoDataValue();      outputHeader=inputHeader.replace(".dep",suffix + ".dep");      WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,dataType,inputNoData);      double[] data=null;      if (dataType == DataType.DOUBLE) {        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            output.setValue(row,col,data[col]);          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);        }      } else       if (dataType == DataType.FLOAT) {        double outputNoData=-32768;        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != inputNoData) {              output.setValue(row,col,data[col]);            } else {              output.setValue(row,col,outputNoData);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);        }      } else       if (dataType == DataType.INTEGER) {        double outputNoData=-32768;        double z;        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != inputNoData) {              z=Math.round(data[col]);              output.setValue(row,col,(int)z);            } else {              output.setValue(row,col,outputNoData);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);        }      }      image.close();      output.close();    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public MqttIdentifierRejectedException(Throwable cause){  super(cause);}  }
class C{  public boolean exist(String indexName,String typeName,final String id){  GetResponse getResponse=elasticsearchClient.prepareGet(indexName,typeName,id).setOperationThreaded(false).setFields(new String[]{}).execute().actionGet();  return getResponse.isExists();}  }
class C{  protected void engineInit(int opmode,Key key,AlgorithmParameterSpec params,SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException {  byte[] currIv=null;  if (opmode == Cipher.WRAP_MODE) {    decrypting=false;    if (params == null) {      iv=new byte[IV_LEN];      if (random == null) {        random=SunJCE.getRandom();      }      random.nextBytes(iv);    } else     if (params instanceof IvParameterSpec) {      iv=((IvParameterSpec)params).getIV();    } else {      throw new InvalidAlgorithmParameterException("Wrong parameter type: IV expected");    }    currIv=iv;  } else   if (opmode == Cipher.UNWRAP_MODE) {    if (params != null) {      throw new InvalidAlgorithmParameterException("No parameter accepted for unwrapping keys");    }    iv=null;    decrypting=true;    currIv=IV2;  } else {    throw new UnsupportedOperationException("This cipher can " + "only be used for key wrapping and unwrapping");  }  cipher.init(decrypting,key.getAlgorithm(),key.getEncoded(),currIv);  cipherKey=key;}  }
class C{  public void markDirty(){  super.markDirty();  this.repairContainer.onCraftMatrixChanged((IInventory)this);}  }
class C{  public static List<ExprNode> validateAllowSubquery(ExprNodeOrigin exprNodeOrigin,List<ExprNode> exprNodes,StreamTypeService streamTypeService,StatementContext statementContext,LinkedHashMap<String,Pair<EventType,String>> taggedEventTypes,LinkedHashMap<String,Pair<EventType,String>> arrayEventTypes) throws ExprValidationException {  List<ExprNode> validatedNodes=new ArrayList<ExprNode>();  ExprEvaluatorContextStatement evaluatorContextStmt=new ExprEvaluatorContextStatement(statementContext,false);  ExprValidationContext validationContext=new ExprValidationContext(streamTypeService,statementContext.getEngineImportService(),statementContext.getStatementExtensionServicesContext(),null,statementContext.getTimeProvider(),statementContext.getVariableService(),statementContext.getTableService(),evaluatorContextStmt,statementContext.getEventAdapterService(),statementContext.getStatementName(),statementContext.getStatementId(),statementContext.getAnnotations(),statementContext.getContextDescriptor(),false,false,true,false,null,true);  for (  ExprNode node : exprNodes) {    ExprNodeSubselectDeclaredDotVisitor visitor=new ExprNodeSubselectDeclaredDotVisitor();    node.accept(visitor);    if (!visitor.getSubselects().isEmpty()) {      int subselectStreamNumber=2048;      int count=-1;      for (      ExprSubselectNode subselect : visitor.getSubselects()) {        count++;        subselectStreamNumber++;        try {          handleSubselectSelectClauses(subselectStreamNumber,statementContext,subselect,streamTypeService.getEventTypes()[0],streamTypeService.getStreamNames()[0],streamTypeService.getStreamNames()[0],taggedEventTypes,arrayEventTypes);        } catch (        ExprValidationException ex) {          throw new ExprValidationException("Failed to validate " + EPStatementStartMethodHelperSubselect.getSubqueryInfoText(count,subselect) + ": "+ ex.getMessage(),ex);        }      }    }    ExprNode validated=ExprNodeUtility.getValidatedSubtree(exprNodeOrigin,node,validationContext);    validatedNodes.add(validated);    if ((validated.getExprEvaluator().getType() != Boolean.class) && ((validated.getExprEvaluator().getType() != boolean.class))) {      throw new ExprValidationException("Filter expression not returning a boolean value: '" + ExprNodeUtility.toExpressionStringMinPrecedenceSafe(validated) + "'");    }  }  return validatedNodes;}  }
class C{  public static void addTaggingMenu(final JPopupMenu menu,final CGraphModel model,final NaviNode node){  Preconditions.checkNotNull(menu,"IE02147: Menu argument can not be null");  Preconditions.checkNotNull(model,"IE02148: Model argument can not be null");  Preconditions.checkNotNull(node,"IE02149: Node argument can not be null");  final JMenuItem tagNodeItem=new JMenuItem(CActionProxy.proxy(new CTagNodeAction(model.getParent(),model.getGraphPanel().getTagsTree(),node)));  final JMenuItem tagSelectedNodesItem=new JMenuItem(CActionProxy.proxy(new CTagSelectedNodesAction(model.getParent(),model.getGraphPanel().getTagsTree(),model.getGraph())));  final CTagsTree tree=model.getGraphPanel().getTagsTree();  tagNodeItem.setEnabled(tree.getSelectionPath() != null);  tagSelectedNodesItem.setEnabled((tree.getSelectionPath() != null) && !model.getGraph().getSelectedNodes().isEmpty());  menu.add(tagNodeItem);  menu.add(tagSelectedNodesItem);  menu.addSeparator();}  }
class C{  public void clearTraktTvShows(){  List<BaseShow> traktCollection=new ArrayList<>();  List<BaseShow> traktWatched=new ArrayList<>();  try {    traktCollection=TRAKT.sync().collectionShows(Extended.DEFAULT_MIN);    traktWatched=TRAKT.sync().watchedShows(Extended.DEFAULT_MIN);  } catch (  RetrofitError e) {    handleRetrofitError(e);    return;  }catch (  OAuthUnauthorizedException e) {    try {      refreshAccessToken();      traktCollection=TRAKT.sync().collectionShows(Extended.DEFAULT_MIN);      traktWatched=TRAKT.sync().watchedShows(Extended.DEFAULT_MIN);    } catch (    Exception e1) {      if (e1.getCause() instanceof RetrofitError) {        handleRetrofitError((RetrofitError)e1.getCause());      } else {        LOGGER.error("could not retrieve trakt.tv response: ",e1.getMessage());      }      return;    }  }  LOGGER.info("You have " + traktCollection.size() + " shows in your Trakt.tv collection");  LOGGER.info("You have " + traktWatched.size() + " shows watched");  List<SyncShow> showToRemove=new ArrayList<>();  for (  BaseShow traktShow : traktCollection) {    showToRemove.add(toSyncShow(traktShow));  }  if (!showToRemove.isEmpty()) {    try {      SyncItems items=new SyncItems().shows(showToRemove);      TRAKT.sync().deleteItemsFromCollection(items);      LOGGER.debug("removed " + showToRemove.size() + " shows from your trakt.tv collection");    } catch (    RetrofitError e) {      handleRetrofitError(e);      return;    }catch (    OAuthUnauthorizedException e) {      handleRetrofitError((RetrofitError)e.getCause());      return;    }  }  showToRemove.clear();  for (  BaseShow traktShow : traktWatched) {    showToRemove.add(toSyncShow(traktShow));  }  if (!showToRemove.isEmpty()) {    try {      SyncItems items=new SyncItems().shows(showToRemove);      TRAKT.sync().deleteItemsFromWatchedHistory(items);      LOGGER.debug("removed " + showToRemove.size() + " shows from your trakt.tv watched");    } catch (    RetrofitError e) {      handleRetrofitError(e);      return;    }catch (    OAuthUnauthorizedException e) {      handleRetrofitError((RetrofitError)e.getCause());      return;    }  }}  }
class C{  public void requestFocus(){  m_text.requestFocus();}  }
class C{  public boolean isActive(){  return active;}  }
class C{  public int end(){  return end(0);}  }
class C{  public boolean isStatic(){  return false;}  }
class C{  public static String replaceEscapedRightAngle(String s){  StringBuilder buf=new StringBuilder();  int i=0;  while (i < s.length()) {    char c=s.charAt(i);    if (c == '<' && s.substring(i).startsWith("<\\\\>")) {      buf.append("<\\\\>");      i+="<\\\\>".length();      continue;    }    if (c == '>' && s.substring(i).startsWith(">\\>")) {      buf.append(">>");      i+=">\\>".length();      continue;    }    if (c == '\\' && s.substring(i).startsWith("\\>>") && !s.substring(i).startsWith("\\>>>")) {      buf.append(">>");      i+="\\>>".length();      continue;    }    buf.append(c);    i++;  }  return buf.toString();}  }
class C{  public AuthorView(Context context,AttributeSet attrs,int defStyleAttr){  super(context,attrs,defStyleAttr);  this.context=context;  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);  inflater.inflate(R.layout.compound_author,this,true);  authorImageContainer=findViewById(R.id.author_image_container);  authorImageView=(ImageView)findViewById(R.id.author_image);  triangleView=(ImageView)findViewById(R.id.triangle);  authorInfoView=findViewById(R.id.author_info_view);  authorNameView=(TextView)findViewById(R.id.author_name);  timePostedView=(TextView)findViewById(R.id.time_posted_view);  productNameView=(TextView)findViewById(R.id.product_name);}  }
class C{  protected InfoModelMappingRuleImpl(){  super();}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.TIME_EVENT_SPEC;}  }
class C{  public static void main(String[] args){  if (args.length != 4) {    System.out.println("Usage: java ProvisioningApiMultiDomainSampleClient <admin@example.com> " + "<adminpassword> <primarydomain> <secondarydomain>");    System.exit(1);  }  String adminEmail=args[0];  String adminPassword=args[1];  String primaryDomain=args[2];  String secondaryDomain=args[3];  try {    ProvisioningApiMultiDomainSampleClient client=new ProvisioningApiMultiDomainSampleClient(adminEmail,adminPassword,primaryDomain,"multidomain-api-sample-" + primaryDomain);    long time=System.currentTimeMillis();    String userEmail="test-" + time + "@"+ secondaryDomain;    GenericEntry entry=client.createUser(userEmail,"p@ssw0rd","firstName","lastName");    LOGGER.log(Level.INFO,"Created user - " + entry.getProperty("userEmail"));    entry=client.retrieveUser(userEmail);    LOGGER.log(Level.INFO,"Retrieved user - " + entry.getProperty("userEmail"));    Map<UserProperty,String> optionalAttributes=new HashMap<UserProperty,String>();    optionalAttributes.put(UserProperty.ADMIN,String.valueOf(true));    optionalAttributes.put(UserProperty.SUSPENDED,String.valueOf(false));    optionalAttributes.put(UserProperty.HASH_FUNCTION,"MD5");    entry=client.createUser("test2-" + time + "@"+ secondaryDomain,"0f359740bd1cda994f8b55330c86d845","firstName","lastName",optionalAttributes);    LOGGER.log(Level.INFO,"Created user with optional attributes- " + entry.getProperty("userEmail"));    Map<String,String> updatedAttributes=new HashMap<String,String>();    updatedAttributes.put("lastName","Smith");    updatedAttributes.put("isSuspended","true");    entry=client.updateUser(userEmail,updatedAttributes);    LOGGER.log(Level.INFO,"Updated user - " + entry.getProperty("lastName"));    List<GenericEntry> users=client.retrieveAllUsers();    LOGGER.log(Level.INFO,"Retrieved all users - " + users.size());    String aliasEmail="alias-" + time + "@"+ secondaryDomain;    entry=client.createAlias(aliasEmail,userEmail);    LOGGER.log(Level.INFO,"Created alias - " + entry.getProperty("aliasEmail"));    entry=client.retrieveAlias(aliasEmail);    LOGGER.log(Level.INFO,"Retrieved alias - " + entry.getProperty("aliasEmail"));    List<GenericEntry> aliases=client.retrieveAllAliases();    LOGGER.log(Level.INFO,"Retrieved all aliases - " + users.size());    client.deleteAlias(aliasEmail);    LOGGER.log(Level.INFO,"Deleted  - " + aliasEmail);    client.deleteUser(userEmail);    LOGGER.log(Level.INFO,"Deleted  - " + userEmail);    client.deleteUser("test2-" + time + "@"+ secondaryDomain);  } catch (  AuthenticationException e) {    e.printStackTrace();  }catch (  AppsForYourDomainException e) {    e.printStackTrace();  }catch (  MalformedURLException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }catch (  ServiceException e) {    e.printStackTrace();  }}  }
class C{  public void onNetConnected(NetUtils.NetType type){}  }
class C{  private void initRegisters(){  regtable=new Hashtable<>();  reg=new Registers();  regInfo=new TreeMap<>();  EAX=reg.constructAddress("EAX",regtable);  AX=reg.constructAddress("AX",regtable);  AH=reg.constructAddress("AH",regtable);  AL=reg.constructAddress("AL",regtable);  EBX=reg.constructAddress("EBX",regtable);  BX=reg.constructAddress("BX",regtable);  BH=reg.constructAddress("BH",regtable);  BL=reg.constructAddress("BL",regtable);  ECX=reg.constructAddress("ECX",regtable);  CX=reg.constructAddress("CX",regtable);  CH=reg.constructAddress("CH",regtable);  CL=reg.constructAddress("CL",regtable);  EDX=reg.constructAddress("EDX",regtable);  DX=reg.constructAddress("DX",regtable);  DH=reg.constructAddress("DH",regtable);  DL=reg.constructAddress("DL",regtable);  ESI=reg.constructAddress("ESI",regtable);  SI=reg.constructAddress("SI",regtable);  EDI=reg.constructAddress("EDI",regtable);  DI=reg.constructAddress("DI",regtable);  ESP=reg.constructAddress("ESP",regtable);  SP=reg.constructAddress("SP",regtable);  EBP=reg.constructAddress("EBP",regtable);  BP=reg.constructAddress("BP",regtable);  EIP=reg.constructAddress("EIP",regtable);  registerSets=new RegisterSet[9];  registerSets[0]=new RegisterSet(AL,AH,AX,EAX,"AL","AH","AX","EAX");  registerSets[1]=new RegisterSet(BL,BH,BX,EBX,"BL","BH","BX","EBX");  registerSets[2]=new RegisterSet(CL,CH,CX,ECX,"CL","CH","CX","ECX");  registerSets[3]=new RegisterSet(DL,DH,DX,EDX,"DL","DH","DX","EDX");  registerSets[4]=new RegisterSet(null,null,SI,ESI,"","","SI","ESI");  registerSets[5]=new RegisterSet(null,null,DI,EDI,"","","DI","EDI");  registerSets[6]=new RegisterSet(null,null,SP,ESP,"","","SP","ESP");  registerSets[7]=new RegisterSet(null,null,BP,EBP,"","","BP","EBP");  registerSets[8]=new RegisterSet(null,null,null,EIP,"","","","EIP");  put(MEMSIZE + memAddressStart,ESP,null);  put(MEMSIZE + memAddressStart,EBP,null);  reg.clearDirty();}  }
class C{  public String metricTypeTipText(){  return "Set the type of metric by which to rank rules. Confidence is " + "the proportion of the examples covered by the premise that are also " + "covered by the consequence(Class association rules can only be mined using confidence). Lift is confidence divided by the "+ "proportion of all examples that are covered by the consequence. This "+ "is a measure of the importance of the association that is independent "+ "of support. Leverage is the proportion of additional examples covered "+ "by both the premise and consequence above those expected if the "+ "premise and consequence were independent of each other. The total "+ "number of examples that this represents is presented in brackets "+ "following the leverage. Conviction is "+ "another measure of departure from independence.";}  }
class C{  private void linearGradientShapesDraw(DrawPane drawPane){  drawPane.erase();  ColorStop colorStop1=new ColorStop();  colorStop1.setColor(linearGradientDynamicForm.getValueAsString("startColor"));  colorStop1.setOffset(0.0f);  ColorStop colorStop2=new ColorStop();  colorStop2.setColor(linearGradientDynamicForm.getValueAsString("firstStop"));  colorStop2.setOffset(0.33f);  ColorStop colorStop3=new ColorStop();  colorStop3.setColor(linearGradientDynamicForm.getValueAsString("secondStop"));  colorStop3.setOffset(0.66f);  ColorStop colorStop4=new ColorStop();  colorStop4.setColor(linearGradientDynamicForm.getValueAsString("endColor"));  colorStop4.setOffset(1.0f);  LinearGradient linearGradient=new LinearGradient();  linearGradient.setX1(linearGradientSliderDynamicForm.getValue("x1") + "%");  linearGradient.setY1(linearGradientSliderDynamicForm.getValue("y1") + "%");  linearGradient.setX2(linearGradientSliderDynamicForm.getValue("x2") + "%");  linearGradient.setY2(linearGradientSliderDynamicForm.getValue("y2") + "%");  linearGradient.setColorStops(colorStop1,colorStop2,colorStop3,colorStop4);  DrawTriangle drawTriangle=new DrawTriangle();  drawTriangle.setDrawPane(drawPane);  drawTriangle.setFillGradient(linearGradient);  drawTriangle.setPoints(new Point(100,50),new Point(150,150),new Point(50,150));  drawTriangle.draw();  DrawCurve drawCurve=new DrawCurve();  drawCurve.setDrawPane(drawPane);  drawCurve.setFillGradient(linearGradient);  drawCurve.setStartPoint(new Point(200,50));  drawCurve.setEndPoint(new Point(340,150));  drawCurve.setControlPoint1(new Point(270,0));  drawCurve.setControlPoint2(new Point(270,200));  drawCurve.draw();  DrawOval drawOval=new DrawOval();  drawOval.setDrawPane(drawPane);  drawOval.setFillGradient(linearGradient);  drawOval.setLeft(50);  drawOval.setTop(200);  drawOval.setWidth(100);  drawOval.setHeight(150);  drawOval.draw();  DrawRect drawRect=new DrawRect();  drawRect.setDrawPane(drawPane);  drawRect.setFillGradient(linearGradient);  drawRect.setLeft(200);  drawRect.setTop(225);  drawRect.setWidth(150);  drawRect.setHeight(100);  drawRect.draw();}  }
class C{  public Settings build(){  checkArgument(staticNodeSettings != null || clusterNodeSettings != null,"Missing node settings");  checkArgument(staticNodeSettings == null || clusterNodeSettings == null,"Usage of 'static' and 'cluster' settings at once is not allowed");  if (tcpSettings == null) {    tcpSettings=TcpSettings.newBuilder().build();  }  if (sslSettings == null) {    sslSettings=SslSettings.noSsl();  }  if (reconnectionDelay == null) {    reconnectionDelay=Duration.ofSeconds(1);  }  if (heartbeatInterval == null) {    heartbeatInterval=Duration.ofMillis(500);  }  if (heartbeatTimeout == null) {    heartbeatTimeout=Duration.ofMillis(1500);  }  if (requireMaster == null) {    requireMaster=true;  }  if (operationTimeout == null) {    operationTimeout=Duration.ofSeconds(7);  }  if (operationTimeoutCheckInterval == null) {    operationTimeoutCheckInterval=Duration.ofSeconds(1);  }  if (maxOperationQueueSize == null) {    maxOperationQueueSize=5000;  } else {    checkArgument(isPositive(maxOperationQueueSize),"maxOperationQueueSize should be positive");  }  if (maxConcurrentOperations == null) {    maxConcurrentOperations=5000;  } else {    checkArgument(isPositive(maxConcurrentOperations),"maxConcurrentOperations should be positive");  }  if (maxOperationRetries == null) {    maxOperationRetries=10;  } else {    checkArgument(maxOperationRetries >= -1,"maxOperationRetries value is out of range: %d. Allowed range: [-1, infinity].",maxOperationRetries);  }  if (maxReconnections == null) {    maxReconnections=10;  } else {    checkArgument(maxReconnections >= -1,"maxReconnections value is out of range: %d. Allowed range: [-1, infinity].",maxReconnections);  }  if (persistentSubscriptionBufferSize == null) {    persistentSubscriptionBufferSize=10;  } else {    checkArgument(isPositive(persistentSubscriptionBufferSize),"persistentSubscriptionBufferSize should be positive");  }  if (persistentSubscriptionAutoAckEnabled == null) {    persistentSubscriptionAutoAckEnabled=true;  }  if (failOnNoServerResponse == null) {    failOnNoServerResponse=false;  }  if (executor == null) {    executor=new ThreadPoolExecutor(2,Integer.MAX_VALUE,60L,TimeUnit.SECONDS,new SynchronousQueue<>(),new DefaultThreadFactory("es"));  }  return new Settings(this);}  }
class C{  public String translateString(String translateableString){  if (translateableString == null) {    throw new InvalidParameterException("Error translating string, translateableString may not be null");  }  int resourceId=context.getResources().getIdentifier(translateableString,"string",context.getPackageName());  if (resourceId == 0) {    return BAD_TRANSLATION_KEY_MARKER + translateableString + BAD_TRANSLATION_KEY_MARKER;  } else {    return context.getResources().getString(resourceId);  }}  }
class C{  public TextureAtlasHelper(int texWidth,int texHeight,int segmentWidth,int segmentHeight,int horizontalPadding,int verticalPadding){  this.horizontalSegments=(float)texWidth / (float)segmentWidth;  this.verticalSegments=(float)texHeight / (float)segmentHeight;  this.horizontalPadding=(float)horizontalPadding / (float)texWidth;  this.verticalPadding=(float)verticalPadding / (float)texHeight;}  }
class C{  void info(Throwable t,String s){  if (isEnabled(TraceSystem.INFO)) {    traceWriter.write(TraceSystem.INFO,module,s,t);  }}  }
class C{  public void insert(E item){  SingleLinkedNode<E> node=head, curr=node;  do {    if (node.item.compareTo(item) > 0) {      while (curr.next != head) {        curr=curr.next;      }      head=new SingleLinkedNode<>(item,node);      curr.next=head;      return;    } else     if (node.next.item.compareTo(item) > 0) {      node.next=new SingleLinkedNode<>(item,node.next);      return;    } else     if (node.next == head) {      node.next=new SingleLinkedNode<>(item,head);      return;    }    node=node.next;  } while (node != head);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.STATE_VECTOR__SIZE:    setSize((Integer)newValue);  return;case SexecPackage.STATE_VECTOR__OFFSET:setOffset((Integer)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private void adjust(byte[] a,int aOff,byte[] b){  int x=(b[b.length - 1] & 0xff) + (a[aOff + b.length - 1] & 0xff) + 1;  a[aOff + b.length - 1]=(byte)x;  x>>>=8;  for (int i=b.length - 2; i >= 0; i--) {    x+=(b[i] & 0xff) + (a[aOff + i] & 0xff);    a[aOff + i]=(byte)x;    x>>>=8;  }}  }
class C{  public WordDelimiterFilter(TokenStream in,byte[] charTypeTable,int configurationFlags,CharArraySet protWords){  super(in);  this.flags=configurationFlags;  this.protWords=protWords;  this.iterator=new WordDelimiterIterator(charTypeTable,has(SPLIT_ON_CASE_CHANGE),has(SPLIT_ON_NUMERICS),has(STEM_ENGLISH_POSSESSIVE));}  }
class C{  @Override public SysMemAllocator enableActiveGC(long timeout){  m_activegc=true;  m_gctimeout=timeout;  return this;}  }
class C{  public boolean isDisposeWhenPointerOutOfBounds(){  return disposeWhenPointerOutOfBounds;}  }
class C{  @Override protected void service(final WorkbenchRequest req,final HttpServletResponse resp,final String xslPath) throws IOException, RepositoryException, QueryResultHandlerException {  final TupleResultBuilder builder=getTupleResultBuilder(req,resp,resp.getOutputStream());  boolean federate;  if (req.isParameterPresent("type")) {    final String type=req.getTypeParameter();    federate="federate".equals(type);    builder.transform(xslPath,"create-" + type + ".xsl");  } else {    federate=false;    builder.transform(xslPath,"create.xsl");  }  builder.start(federate ? new String[]{"id","description","location"} : new String[]{});  builder.link(Arrays.asList(INFO));  if (federate) {    for (    RepositoryInfo info : manager.getAllRepositoryInfos()) {      String identity=info.getId();      if (!SystemRepository.ID.equals(identity)) {        builder.result(identity,info.getDescription(),info.getLocation());      }    }  }  builder.end();}  }
class C{  public void resumeJobs(GroupMatcher<JobKey> matcher) throws SchedulerException {  try {    getRemoteScheduler().resumeJobs(matcher);  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  public void test_insertLookupRemoveKeyTreeStressTest(){  Banner.banner();  final int ntrials=5;  final int mtuples=10000;  doInsertLookupRemoveStressTestMGC(4,mtuples,ntrials);  doInsertLookupRemoveStressTestMGC(5,mtuples,ntrials);  doInsertLookupRemoveStressTestMGC(16,mtuples,ntrials);  doInsertLookupRemoveStressTestMGC(3,mtuples,ntrials);  doInsertLookupRemoveStressTest(3,mtuples,ntrials);  doInsertLookupRemoveStressTest(4,mtuples,ntrials);  doInsertLookupRemoveStressTest(5,mtuples,ntrials);  doInsertLookupRemoveStressTest(16,mtuples,ntrials);}  }
class C{  public long executeForLastInsertedRowId(String sql,Object[] bindArgs,int connectionFlags,CancellationSignal cancellationSignal){  if (sql == null) {    throw new IllegalArgumentException("sql must not be null.");  }  if (executeSpecial(sql,bindArgs,connectionFlags,cancellationSignal)) {    return 0;  }  acquireConnection(sql,connectionFlags,cancellationSignal);  try {    return mConnection.executeForLastInsertedRowId(sql,bindArgs,cancellationSignal);  }  finally {    releaseConnection();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.178 -0400",hash_original_method="79398B5B5BBC055C54453900C8BC0BEE",hash_generated_method="2B25ECA365DCFA72070DFCF696E73D36") public CancelException(File file,int depth){  this("Operation Cancelled",file,depth);}  }
class C{  public Builder communityDistribution(final Distribution community){  this.communitySize=community;  return this;}  }
class C{  public final void increaseReadMessages(long currentTime){  throughputCalculationLock.lock();  try {    readMessages++;    lastReadTime=currentTime;  }  finally {    throughputCalculationLock.unlock();  }}  }
class C{  private StringBuilder newLine(){  lineCount=0;  return new StringBuilder(String.format("%08d  ",totalBytes));}  }
class C{  public void fillReleaseMutation(MutationBatch m,boolean excludeCurrentLock){  ColumnListMutation<String> row=m.withRow(columnFamily,key);  for (  String c : locksToDelete) {    row.deleteColumn(c);  }  if (!excludeCurrentLock && lockColumn != null) {    row.deleteColumn(lockColumn);  }  locksToDelete.clear();  lockColumn=null;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  @DSModeled(DSC.BAN) public static void translateIntent(Intent orig,Intent result){  result.setAction(orig.getAction());  result.setType(orig.getType());  result.setPackage(orig.getPackage());  result.setData(orig.getData());  result.setData(Uri.parse(orig.getType()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:21.157 -0400",hash_original_method="FFD6A69C57026BBF1F40ED7C305CFB7A",hash_generated_method="868A4C4BC350AF41B7690107A0086CD3") public boolean removeAll(Collection<?> collection){  return MapCollections.removeAllHelper(this,collection);}  }
class C{  protected void writeEndTag(String endTag) throws IOException {  decrIndent();  indent();  write(endTag);  write(NEWLINE);}  }
class C{  public CalendarIntervalScheduleBuilder preserveHourOfDayAcrossDaylightSavings(boolean preserveHourOfDay){  this.preserveHourOfDayAcrossDaylightSavings=preserveHourOfDay;  return this;}  }
class C{  private String identifyLanguage(Parse parse){  StringBuilder text=new StringBuilder();  if (parse == null)   return null;  String title=parse.getData().getTitle();  if (title != null) {    text.append(title.toString());  }  String content=parse.getText();  if (content != null) {    text.append(" ").append(content.toString());  }  String titleandcontent=text.toString();  if (this.contentMaxlength != -1 && titleandcontent.length() > this.contentMaxlength)   titleandcontent=titleandcontent.substring(0,contentMaxlength);  LanguageIdentifier identifier=new LanguageIdentifier(titleandcontent);  if (onlyCertain) {    if (identifier.isReasonablyCertain())     return identifier.getLanguage(); else     return null;  }  return identifier.getLanguage();}  }
class C{  protected void fail(CreateVirtualNetworkWorkflowDocument state,Throwable throwable){  updateVirtualNetwork(state,SubnetState.ERROR);  super.fail(state,throwable);}  }
class C{  public static Amount fromMicroNem(final long amount){  return new Amount(amount);}  }
class C{  public void testParameters() throws Exception {  Similarity sim=getSimilarity("text_params");  assertEquals(LMDirichletSimilarity.class,sim.getClass());  LMDirichletSimilarity lm=(LMDirichletSimilarity)sim;  assertEquals(1000f,lm.getMu(),0.01f);}  }
class C{  public static <K extends Comparable<?>,V>ImmutableRangeMap<K,V> of(Range<K> range,V value){  return new ImmutableRangeMap<K,V>(ImmutableList.of(range),ImmutableList.of(value));}  }
class C{  private Set<RE> removeCoeff(Nonterminal n){  return this.coeffs.remove(n);}  }
class C{  public void push(boolean value) throws IOException {  pushValues.add(Boolean.valueOf(value));  if (flashVersion < 5) {    flushPushValues();  }}  }
class C{  @SmallTest public void testNullConstructor(){  SimpleCursorAdapter ca=new SimpleCursorAdapter(mContext,mLayout,null,null,null);  assertEquals(0,ca.getCount());}  }
class C{  @Override public final void openPdfFileFromStream(final Object filename,final String password) throws PdfException {  preOpen();  fileAccess.openPdfFileFromStream(filename,password);  postOpen();}  }
class C{  public static <T extends Object & Comparable<? super T>>T min(Collection<? extends T> collection){  Iterator<? extends T> it=collection.iterator();  T min=it.next();  while (it.hasNext()) {    T next=it.next();    if (min.compareTo(next) > 0) {      min=next;    }  }  return min;}  }
class C{  public static void createAlarmDirIfNotExists(){  createDirIfNotExists(SYSTEM_THEME_ALARM_PATH);}  }
class C{  public static double clamp(double v,double min,double max){  return v < min ? min : v > max ? max : v;}  }
class C{  public static Pair<String,String> compareXml(Document oldDocument,Document newDocument){  Element oldRootElement=oldDocument.getRootElement();  Element newRootElement=newDocument.getRootElement();  if (compareElement(oldRootElement,newRootElement)) {    return null;  }  XMLOutputter xmlOutputter=new XMLOutputter(Format.getPrettyFormat());  return new Pair<String,String>(xmlOutputter.outputString(oldRootElement),xmlOutputter.outputString(newRootElement));}  }
class C{  private boolean allowIfEmpty(int index){  if (!chartData.isEmpty()) {    return false;  }switch (index) {case ELEVATION_SERIES:    return true;case SPEED_SERIES:  return reportSpeed;case PACE_SERIES:return !reportSpeed;default :return false;}}  }
class C{  @Override public void execute(JsonApiDocument jsonApiDocument,PersistentResource resource,Optional<MultivaluedMap<String,String>> queryParams){  if (isPresent(queryParams,INCLUDE)) {    addIncludedResources(jsonApiDocument,resource,queryParams.get().get(INCLUDE));  }}  }
class C{  public PidfParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {  try {    SAXParserFactory factory=SAXParserFactory.newInstance();    SAXParser parser=factory.newSAXParser();    parser.parse(mInputSource,this);    return this;  } catch (  IOException e) {    throw new ParseFailureException("Failed to parse input source!",e);  }}  }
class C{  public CheckedListIterator(ListIterator<E> i,Class<E> type){  this.i=i;  this.type=type;}  }
class C{  public void reset(){  for (int i=0; i < measureDataChunk.length; i++) {    this.measureDataChunk[i]=null;  }  for (int i=0; i < dimensionDataChunk.length; i++) {    this.dimensionDataChunk[i]=null;  }}  }
class C{  private String nonControl(final String s,final int start){  cPos=s.indexOf('%',start);  if (cPos == -1) {    cPos=s.length();  }  return s.substring(start,cPos);}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  @Override public double calculateDistance(double[] x1,double[] x2){  double result=0;  int zeros=x1.length;  for (int i=0; i < x1.length; i++) {    double factor=x1[i] - x2[i];    result+=Math.exp(gamma * factor * factor);    if (Tools.isNotEqual(x1[i],0.0d) || Tools.isNotEqual(x2[i],0.0d)) {      zeros--;    }  }  result+=zeros;  return Math.pow(result,degree);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Attr addrAttr;  String attrNamespaceURI;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  addrAttr=testAddr.getAttributeNodeNS("http://www.nist.gov","district");  attrNamespaceURI=addrAttr.getNamespaceURI();  assertEquals("namespaceURI","http://www.nist.gov",attrNamespaceURI);}  }
class C{  public static String noQuote(String input){  if (input.contains(" ")) {    throw new IllegalArgumentException("Cannot contain whitespace: '" + input + "'");  } else {    return input;  }}  }
class C{  public static boolean isOperationResult(final Message message) throws JMSException {  return ManagementHelper.isOperationResult(JMSManagementHelper.getCoreMessage(message));}  }
class C{  public ReceiptDetails payMutationFee(final PayPropertyTaxDetails payPropertyTaxDetails){  ReceiptDetails receiptDetails=null;  ErrorDetails errorDetails=null;  final BasicProperty basicProperty=basicPropertyDAO.getBasicPropertyByPropertyID(payPropertyTaxDetails.getAssessmentNo());  PropertyMutation propertyMutation=getLatestPropertyMutationByAssesmentNo(payPropertyTaxDetails.getAssessmentNo());  propertyTaxBillable.setBasicProperty(basicProperty);  ApplicationThreadLocals.setUserId(2L);  propertyTaxBillable.setTransanctionReferenceNumber(payPropertyTaxDetails.getTransactionId());  propertyTaxBillable.setMutationFeePayment(Boolean.TRUE);  propertyTaxBillable.setMutationFee(payPropertyTaxDetails.getPaymentAmount());  propertyTaxBillable.setCallbackForApportion(Boolean.FALSE);  if (propertyMutation != null)   propertyTaxBillable.setMutationApplicationNo(propertyMutation.getApplicationNo());  propertyTaxBillable.setUserId(ApplicationThreadLocals.getUserId());  propertyTaxBillable.setReferenceNumber(propertyTaxNumberGenerator.generateManualBillNumber(basicProperty.getPropertyID()));  final EgBill egBill=ptBillServiceImpl.generateBill(propertyTaxBillable);  final CollectionHelper collectionHelper=new CollectionHelper(egBill);  final Map<String,String> paymentDetailsMap=new HashMap<String,String>();  paymentDetailsMap.put(TOTAL_AMOUNT,payPropertyTaxDetails.getPaymentAmount().toString());  paymentDetailsMap.put(PAID_BY,egBill.getCitizenName());  if (THIRD_PARTY_PAYMENT_MODE_CHEQUE.equalsIgnoreCase(payPropertyTaxDetails.getPaymentMode().toLowerCase()) || THIRD_PARTY_PAYMENT_MODE_DD.equalsIgnoreCase(payPropertyTaxDetails.getPaymentMode().toLowerCase())) {    paymentDetailsMap.put(ChequePayment.INSTRUMENTNUMBER,payPropertyTaxDetails.getChqddNo());    paymentDetailsMap.put(ChequePayment.INSTRUMENTDATE,ChequePayment.CHEQUE_DATE_FORMAT.format(payPropertyTaxDetails.getChqddDate()));    paymentDetailsMap.put(ChequePayment.BRANCHNAME,payPropertyTaxDetails.getBranchName());    final Long validatesBankId=validateBank(payPropertyTaxDetails.getBankName());    paymentDetailsMap.put(ChequePayment.BANKID,validatesBankId.toString());  }  final Payment payment=Payment.create(payPropertyTaxDetails.getPaymentMode().toLowerCase(),paymentDetailsMap);  collectionHelper.setIsMutationFeePayment(true);  final BillReceiptInfo billReceiptInfo=collectionHelper.executeCollection(payment,payPropertyTaxDetails.getSource());  if (null != billReceiptInfo) {    receiptDetails=new ReceiptDetails();    receiptDetails.setReceiptNo(billReceiptInfo.getReceiptNum());    receiptDetails.setReceiptDate(formatDate(billReceiptInfo.getReceiptDate()));    receiptDetails.setPayeeName(billReceiptInfo.getPayeeName());    receiptDetails.setPayeeAddress(billReceiptInfo.getPayeeAddress());    receiptDetails.setBillReferenceNo(billReceiptInfo.getBillReferenceNum());    receiptDetails.setServiceName(billReceiptInfo.getServiceName());    receiptDetails.setDescription(billReceiptInfo.getDescription());    receiptDetails.setPaidBy(billReceiptInfo.getPaidBy());    receiptDetails.setPaymentAmount(billReceiptInfo.getTotalAmount());    receiptDetails.setPaymentMode(payPropertyTaxDetails.getPaymentMode());    receiptDetails.setTransactionId(billReceiptInfo.getManualReceiptNumber());    errorDetails=new ErrorDetails();    errorDetails.setErrorCode(THIRD_PARTY_ERR_CODE_SUCCESS);    errorDetails.setErrorMessage(THIRD_PARTY_ERR_MSG_SUCCESS);    receiptDetails.setErrorDetails(errorDetails);  }  return receiptDetails;}  }
class C{  public void dispose(){  setMapBean(null);  setLayout(null);  removeAll();}  }
class C{  public ColumnType[] convertToColumnTypes(final List<AttributeRole> allRoles){  ColumnType columnTypes[]=new ColumnType[allRoles.size()];  for (int i=0; i < columnTypes.length; i++) {    Attribute att=allRoles.get(i).getAttribute();    if (att.isNominal()) {      if (att.getMapping().size() < Byte.MAX_VALUE) {        columnTypes[i]=ColumnType.NOMINAL_BYTE;      } else       if (att.getMapping().size() < Short.MAX_VALUE) {        columnTypes[i]=ColumnType.NOMINAL_SHORT;      } else {        columnTypes[i]=ColumnType.NOMINAL_INTEGER;      }    } else     if (att.isNumerical()) {      if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(att.getValueType(),Ontology.INTEGER)) {        columnTypes[i]=ColumnType.INTEGER;      } else {        columnTypes[i]=ColumnType.DOUBLE;      }    } else {      columnTypes[i]=ColumnType.DOUBLE;    }  }  return columnTypes;}  }
class C{  protected CCAnimate(float duration,CCAnimation anim,boolean restore){  super(duration);  assert anim != null : "Animate: argument Animation must be non-null";  restoreOriginalFrame=restore;  animation=anim;  origFrame=null;}  }
class C{  public static PDF417DetectorResult detect(BinaryBitmap image,Map<DecodeHintType,?> hints,boolean multiple) throws NotFoundException {  BitMatrix bitMatrix=image.getBlackMatrix();  List<ResultPoint[]> barcodeCoordinates=detect(multiple,bitMatrix);  if (barcodeCoordinates.isEmpty()) {    bitMatrix=bitMatrix.clone();    bitMatrix.rotate180();    barcodeCoordinates=detect(multiple,bitMatrix);  }  return new PDF417DetectorResult(bitMatrix,barcodeCoordinates);}  }
class C{  public void addKeywords(Collection<String> set,DBPKeywordType type){  if (set != null) {    for (    String keyword : set) {      reservedWords.add(keyword);      DBPKeywordType oldType=allKeywords.get(keyword);      if (oldType != DBPKeywordType.KEYWORD) {        allKeywords.put(keyword,type);      }    }  }}  }
class C{  public int addMultiNewarray(CtClass clazz,int dim){  add(MULTIANEWARRAY);  addIndex(constPool.addClassInfo(clazz));  add(dim);  growStack(1 - dim);  return dim;}  }
class C{  public final int incrementAndGet(){  for (; ; ) {    int current=get();    int next=current + 1;    if (compareAndSet(current,next))     return next;  }}  }
class C{  @Override @CanIgnoreReturnValue public int read() throws IOException {  int b=in.read();  if (b != -1) {    hasher.putByte((byte)b);  }  return b;}  }
class C{  public static void assertEquals(double expected,double actual,double delta){  Assert.assertEquals(expected,actual,delta);}  }
class C{  public static String formatMaxHealth(float maxHealth){  return ItemStack.DECIMALFORMAT.format(maxHealth);}  }
class C{  public CEdgeHoverState(final CStateFactory<?,?> factory,final AbstractZyGraph<?,?> graph,final Edge edge){  m_graph=Preconditions.checkNotNull(graph,"Error: graph argument can not be null");  m_factory=Preconditions.checkNotNull(factory,"Error: factory argument can not be null");  m_edge=Preconditions.checkNotNull(edge,"Error: edge argument can not be null");}  }
class C{  public MovieEncoder(float frameRate,File file,BufferedImage typicalImage,Format encodeFormat){  this.frameRate=frameRate;  this.file=file;  this.encodeFormat=encodeFormat;  try {    setup(typicalImage);    started=true;  } catch (  Exception e) {    e.printStackTrace();    stopped=true;  }}  }
class C{  public static CstChar make(char value){  return new CstChar(value);}  }
class C{  private void resolveSelection(){  final ConflictDescription[] descriptions=conflictTable.getSelectedElements();  if (descriptions.length == 1) {    resolveConflict(descriptions[0]);  } else   if (descriptions.length > 1) {    resolveConflicts(descriptions);  }}  }
class C{  @Override protected void onNewIntent(Intent intent){  super.onNewIntent(intent);  if (this.appView != null)   this.appView.onNewIntent(intent);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:15.102 -0500",hash_original_method="D74E9B3F4153C40FBC49F204F5B3A569",hash_generated_method="861F80BA57DAB6188BC7528574E17ECD") public void update(byte[] data){  if (sha != null) {    sha.update(data);  }  if (md5 != null) {    md5.update(data);  }}  }
class C{  public CompiledST compile(String srcName,String name,List<FormalArgument> args,String template,Token templateToken){  Compiler c=new Compiler(this);  return c.compile(srcName,name,args,template,templateToken);}  }
class C{  public static Marketplace createMarketplace(Organization owner,String marketplaceId,boolean isOpen,DataService ds) throws NonUniqueBusinessKeyException {  return createMarketplace(owner,marketplaceId,isOpen,ds,false);}  }
class C{  private void log(LogLevel eventLevel,String message,Throwable cause){switch (eventLevel) {case TRACE:    logger.trace(message,cause);  return;case DEBUG:logger.debug(message,cause);return;case INFO:logger.info(message,cause);return;case WARN:logger.warn(message,cause);return;case ERROR:logger.error(message,cause);return;default :return;}}  }
class C{  public StrBuilder deleteAll(String str){  int len=(str == null ? 0 : str.length());  if (len > 0) {    int index=indexOf(str,0);    while (index >= 0) {      deleteImpl(index,index + len,len);      index=indexOf(str,index);    }  }  return this;}  }
class C{  public T put(String key,T value){  return container.put(key,value);}  }
class C{  @Override protected Object execute() throws Exception {  init();  if (!checkifEnabledRemotes()) {    return null;  }  if (projectID == null) {    Ansi buffer=Ansi.ansi();    buffer.fg(RED);    buffer.a("No projectID has been set");    buffer.reset();    System.out.println(buffer.toString());    return null;  }  UserProjectReference project=getMultiRemoteCodenvy().getProjectReference(projectID);  if (project == null) {    Ansi buffer=Ansi.ansi();    buffer.fg(RED);    buffer.a("No matching project for identifier '").a(projectID).a("'.");    buffer.reset();    System.out.println(buffer.toString());    return null;  }  final ProjectReference projectToBuild=project.getInnerReference();  Project projectDescription=project.getCodenvy().project().getProject(projectToBuild.workspaceId(),projectToBuild).execute();  if (projectDescription != null) {    if (projectDescription.builders() == null || projectDescription.builders().defaultBuilder() == null) {      Ansi buffer=Ansi.ansi();      buffer.fg(RED);      buffer.a("The selected project '").a(projectDescription.name()).a("' with ID '").a(projectID).a("' has no builder defined so this project can't be built.");      buffer.reset();      System.out.println(buffer.toString());      return null;    }  }  final BuilderStatus builderStatus=project.getCodenvy().builder().build(projectToBuild).execute();  UserBuilderStatus userBuilderStatus=new DefaultUserBuilderStatus(builderStatus,project);  if (background) {    useBackGround(userBuilderStatus);  } else {    useForeGround(userBuilderStatus);  }  return null;}  }
class C{  @PostConstruct public void init(){  configurationViews.add(defaultDistributionSetTypeLayout);  configurationViews.add(authenticationConfigurationView);  configurationViews.add(pollingConfigurationView);}  }
class C{  private BakedBezierInterpolator(){  super();}  }
class C{  protected boolean moreComponents(int index){  return ((getFlag(index) & MORE_COMPONENTS) != 0);}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return success;  return updateBatch();}  }
class C{  public int timePassed(){  return (int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);}  }
class C{  public PartitionedRegionException(String message,Throwable cause){  super(message,cause);}  }
class C{  OrientedVariant currentVariant(){  if (isOnTemplate()) {    return null;  }  return mNextVariant;}  }
class C{  public PLToken(PLTokenType type,String sequence){  super();  mType=type;  mSequence=sequence;}  }
class C{  void addToSubroutine(final long id,final int nbSubroutines){  if ((status & VISITED) == 0) {    status|=VISITED;    srcAndRefPositions=new int[nbSubroutines / 32 + 1];  }  srcAndRefPositions[(int)(id >>> 32)]|=(int)id;}  }
class C{  @Override protected void toASCIIGnuStep(StringBuilder ascii,int level){  indent(ascii,level);  NSObject[] array=allObjects();  ascii.append(ASCIIPropertyListParser.ARRAY_BEGIN_TOKEN);  int indexOfLastNewLine=ascii.lastIndexOf(NEWLINE);  for (int i=0; i < array.length; i++) {    Class<?> objClass=array[i].getClass();    if ((objClass.equals(NSDictionary.class) || objClass.equals(NSArray.class) || objClass.equals(NSData.class)) && indexOfLastNewLine != ascii.length()) {      ascii.append(NEWLINE);      indexOfLastNewLine=ascii.length();      array[i].toASCIIGnuStep(ascii,level + 1);    } else {      if (i != 0)       ascii.append(' ');      array[i].toASCIIGnuStep(ascii,0);    }    if (i != array.length - 1)     ascii.append(ASCIIPropertyListParser.ARRAY_ITEM_DELIMITER_TOKEN);    if (ascii.length() - indexOfLastNewLine > ASCII_LINE_LENGTH) {      ascii.append(NEWLINE);      indexOfLastNewLine=ascii.length();    }  }  ascii.append(ASCIIPropertyListParser.ARRAY_END_TOKEN);}  }
class C{  private SimpleSink buildSink(){  return new SimpleSink(getBaseOutputFilename(),"test");}  }
class C{  public static void testProjectUnproject(){  int[] viewport={0,0,800,800};  Vector3f expected=new Vector3f(1.0f,2.0f,-3.0f);  Vector3f actual=new Vector3f();  Matrix4f m=new Matrix4f().perspective((float)Math.toRadians(45.0f),1.0f,0.01f,100.0f);  m.project(expected,viewport,actual);  m.unproject(actual,viewport,actual);  assertEquals(expected.x,actual.x,TestUtil.MANY_OPS_AROUND_ZERO_PRECISION_FLOAT);  assertEquals(expected.y,actual.y,TestUtil.MANY_OPS_AROUND_ZERO_PRECISION_FLOAT);  assertEquals(expected.z,actual.z,TestUtil.MANY_OPS_AROUND_ZERO_PRECISION_FLOAT);}  }
class C{  private void stop(){  timer.stop();}  }
class C{  public void remove(int offset,int length){  if (offset < 0 || offset >= _pos) {    throw new ArrayIndexOutOfBoundsException(offset);  }  if (offset == 0) {    System.arraycopy(_data,length,_data,0,_pos - length);  } else   if (_pos - length == offset) {  } else {    System.arraycopy(_data,offset + length,_data,offset,_pos - (offset + length));  }  _pos-=length;}  }
class C{  public void started(ShardRouting shard){  ensureMutable();  assert !shard.active() : "expected an intializing shard " + shard;  if (shard.relocatingNodeId() == null) {    inactiveShardCount--;    if (shard.primary()) {      inactivePrimaryCount--;    }  }  shard.moveToStarted();}  }
class C{  public static boolean handleCommit(SolrQueryRequest req,UpdateRequestProcessor processor,SolrParams params,boolean force) throws IOException {  if (params == null) {    params=new MapSolrParams(new HashMap<String,String>());  }  boolean optimize=params.getBool(UpdateParams.OPTIMIZE,false);  boolean commit=params.getBool(UpdateParams.COMMIT,false);  boolean softCommit=params.getBool(UpdateParams.SOFT_COMMIT,false);  boolean prepareCommit=params.getBool(UpdateParams.PREPARE_COMMIT,false);  if (optimize || commit || softCommit|| prepareCommit|| force) {    CommitUpdateCommand cmd=new CommitUpdateCommand(req,optimize);    updateCommit(cmd,params);    processor.processCommit(cmd);    return true;  }  return false;}  }
class C{  public String resolvePrefix(String packageName){  Set<String> allPrefixes=packageNameToPrefix.getElements(packageName);  if (allPrefixes.size() == 0) {    String prefix=computeAvailablePrefix(packageName);    packageNameToPrefix.addElement(packageName,prefix);    return prefix;  } else {    return allPrefixes.iterator().next();  }}  }
class C{  public void addMethod(JDiffMethod method){  jDiffMethods.add(method);}  }
class C{  public boolean hasListeners(){  for (int i=0; i < listenerArray.length; i++) {    if (listenerArray[i].hasListeners())     return true;  }  return false;}  }
class C{  public void markDeploymentHexesFor(Entity ce){  en_Deployer=ce;  repaint(100);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected byte[] wrap(){  byte[] res=recordProtocol.wrap(ContentType.ALERT,alert,0,2);  return res;}  }
class C{  protected void writeToRowFromAggregateForShallowInsert(AbstractRecord record,Object object,Object attributeValue,AbstractSession session) throws DescriptorException {  if (attributeValue == null) {    if (this.isNullAllowed) {      writeNullReferenceRow(record);    } else {      throw DescriptorException.nullForNonNullAggregate(object,this);    }  } else   if (!session.isClassReadOnly(attributeValue.getClass())) {    getObjectBuilder(attributeValue,session).buildRowForShallowInsert(record,attributeValue,session);  }}  }
class C{  @Override public void writeSolrDocument(String name,SolrDocument doc,ReturnFields returnFields,int idx) throws IOException {  startTag("doc",name,false);  incLevel();  for (  String fname : doc.getFieldNames()) {    if (returnFields != null && !returnFields.wantsField(fname)) {      continue;    }    Object val=doc.getFieldValue(fname);    if ("_explain_".equals(fname)) {      System.out.println(val);    }    writeVal(fname,val);  }  if (doc.hasChildDocuments()) {    for (    SolrDocument childDoc : doc.getChildDocuments()) {      writeSolrDocument(null,childDoc,new SolrReturnFields(),idx);    }  }  decLevel();  writer.write("</doc>");}  }
class C{  private static void analyzeStringSetMaps(StringSetMap a,StringSetMap b,String name,HashMap<String,Change> changes){  if (a != null) {    for (    String key : a.keySet()) {      if (b != null && b.containsKey(key) && a.get(key).equals(b.get(key))) {        continue;      }      Object bval=(b != null) ? b.get(key) : null;      Change change=new Change(name + "." + key,a.get(key),bval,name);      changes.put(change._key,change);    }  }  if (b != null) {    for (    String key : b.keySet()) {      if (a != null && a.containsKey(key) && b.get(key).equals(a.get(key))) {        continue;      }      Object aval=(a != null) ? a.get(key) : null;      Change change=new Change(name + "." + key,aval,b.get(key),name);      changes.put(change._key,change);    }  }}  }
class C{  protected Source(ElementKey<?,? extends Source> key){  super(key);}  }
class C{  public static String escapeStringLiteral(String plainText){  return plainText.replace("\\","\\\\").replace("\'","\\\'").replace("\"","\\\"");}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (exitpoint: ");  result.append(exitpoint);  result.append(')');  return result.toString();}  }
class C{  public TcpDiscoveryNode node(){  return node;}  }
class C{  public UnsupportedAttributeTypeException(){  super();}  }
class C{  protected boolean isAdministradorLibro(String idUsuario,String idLibro) throws HibernateException {  boolean result=false;  StringBuffer query=new StringBuffer();  query.append("FROM ");  query.append(HibernateKeys.HIBERNATE_ScrBookadmin);  query.append(" scr WHERE scr.iduser=? AND scr.idbook=?");  List list=getSession().find(query.toString(),new Object[]{idUsuario,idLibro},new Type[]{Hibernate.INTEGER,Hibernate.INTEGER});  if (list != null && !list.isEmpty()) {    result=true;  }  return result;}  }
class C{  public void randomShuffleInPlace(){  Random r=new Random();  r.setSeed(FEATURE_VECTOR_RANDOM_SEED);  int n=featureVectors.size();  for (int i=n - 1; i >= 1; i--) {    int j=r.nextInt(i + 1);    int[] tmp=featureVectors.get(i);    featureVectors.set(i,featureVectors.get(j));    featureVectors.set(j,tmp);    Integer tmpI=injectWhitespace.get(i);    injectWhitespace.set(i,injectWhitespace.get(j));    injectWhitespace.set(j,tmpI);    tmpI=hpos.get(i);    hpos.set(i,hpos.get(j));    hpos.set(j,tmpI);    InputDocument tmpD=documentsPerExemplar.get(i);    documentsPerExemplar.set(i,documentsPerExemplar.get(j));    documentsPerExemplar.set(j,tmpD);  }}  }
class C{  private void backButtonInvoked(){  final String backUrl=browserHistory.moveBack();  setToolbarButtonState();  isBackOrForwardInProgress=true;  navigateToURL(backUrl);}  }
class C{  private static boolean splitReturn(MethodNode mth){  if (mth.getExitBlocks().size() != 1) {    return false;  }  BlockNode exitBlock=mth.getExitBlocks().get(0);  if (exitBlock.getInstructions().size() != 1 || exitBlock.contains(AFlag.SYNTHETIC)) {    return false;  }  List<BlockNode> preds=exitBlock.getPredecessors();  if (preds.size() < 2) {    return false;  }  preds=BlockUtils.filterPredecessors(exitBlock);  if (preds.size() < 2) {    return false;  }  InsnNode returnInsn=exitBlock.getInstructions().get(0);  if (returnInsn.getArgsCount() != 0 && !isReturnArgAssignInPred(preds,returnInsn)) {    return false;  }  boolean first=true;  for (  BlockNode pred : preds) {    BlockNode newRetBlock=BlockSplitter.startNewBlock(mth,exitBlock.getStartOffset());    newRetBlock.add(AFlag.SYNTHETIC);    InsnNode newRetInsn;    if (first) {      newRetInsn=returnInsn;      newRetBlock.add(AFlag.ORIG_RETURN);      first=false;    } else {      newRetInsn=duplicateReturnInsn(returnInsn);    }    newRetBlock.getInstructions().add(newRetInsn);    removeConnection(pred,exitBlock);    connect(pred,newRetBlock);  }  cleanExitNodes(mth);  return true;}  }
class C{  private static long calcSliceFence(long skip,long limit){  long sliceFence=limit >= 0 ? skip + limit : Long.MAX_VALUE;  return (sliceFence >= 0) ? sliceFence : Long.MAX_VALUE;}  }
class C{  protected Level(String name,int value,String resourceBundleName){  this(name,value,resourceBundleName,true);}  }
class C{  public boolean approveIt(){  log.info("approveIt - " + toString());  setIsApproved(true);  return true;}  }
class C{  public static String parseUploadPartCopy(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    return root.getChildText("ETag");  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  public boolean isOrLater(int p_Version){  return jdkVersion >= p_Version;}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.729 -0400",hash_original_method="46EC5EF747261262EAD8ED1BD4879967",hash_generated_method="2CB0A7EEA30A4F8FDF3B216777E92993") @Override public void write(char[] chr) throws IOException {  out.write(chr);}  }
class C{  public File call(File filename) throws Exception {  if (filename.exists() && !forceRegeneration) {    logger.info("Loading visual terms for " + featureFile.getName());    return filename;  }  final MemoryLocalFeatureList<? extends LocalFeature<?,?>> keys=MemoryLocalFeatureList.read(featureFile,featureClz);  logger.info("Generating visual terms for " + featureFile.getName());  final LocalFeatureList<QuantisedLocalFeature<?>> keyLoc=quantiseFeatures(hardAssigner,keys);  IOUtils.writeBinary(filename,keyLoc);  return filename;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  private DeploymentResult prepareComplexRepo(final String undeployedTargetPrefix,final int noOfUndeployedTargets,final String deployedTargetPrefix,final int noOfDeployedTargets,final int noOfDistributionSets,final String distributionSetPrefix){  final Iterable<Target> nakedTargets=targetManagement.createTargets(testdataFactory.generateTargets(noOfUndeployedTargets,undeployedTargetPrefix,"first description"));  List<Target> deployedTargets=targetManagement.createTargets(testdataFactory.generateTargets(noOfDeployedTargets,deployedTargetPrefix,"first description"));  final Collection<DistributionSet> dsList=testdataFactory.createDistributionSets(distributionSetPrefix,noOfDistributionSets);  String time=String.valueOf(System.currentTimeMillis());  time=time.substring(time.length() - 5);  for (  final DistributionSet ds : dsList) {    deployedTargets=deploymentManagement.assignDistributionSet(ds,deployedTargets).getAssignedEntity();  }  final DeploymentResult deploymentResult=new DeploymentResult(deployedTargets,nakedTargets,dsList,deployedTargetPrefix,undeployedTargetPrefix,distributionSetPrefix);  return deploymentResult;}  }
class C{  public static void reCompilationWithOpt(CompilationPlan plan){  if (!booted)   return;synchronized (log) {    log.println(plan.method.getDeclaringClass().getDescriptor() + " " + plan.method.getName()+ " "+ plan.method.getDescriptor()+ " 3 "+ plan.options.getOptLevel());  }}  }
class C{  protected Element createNewElement(String name){  Element e=new Element(name);  e.caseSensitive=caseSensitive;  return e;}  }
class C{  public void cargarArchivosReceptoresAltaExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  cargarArchivosReceptores(mappings,form,request,response);  setReturnActionFordward(request,mappings.findForward("alta_archivo"));}  }
class C{  Object invoke(Object[] argValues,Interpreter interpreter,CallStack callstack,SimpleNode callerInfo,boolean overrideNameSpace) throws EvalError {  if (argValues != null)   for (int i=0; i < argValues.length; i++)   if (argValues[i] == null)   throw new Error("HERE!");  if (javaMethod != null)   try {    return Reflect.invokeMethod(javaMethod,javaObject,argValues);  } catch (  ReflectError e) {    throw new EvalError("Error invoking Java method: " + e,callerInfo,callstack);  }catch (  InvocationTargetException e2) {    throw new TargetError("Exception invoking imported object method.",e2,callerInfo,callstack,true);  }  if (modifiers != null && modifiers.hasModifier("synchronized")) {    Object lock;    if (declaringNameSpace.isClass) {      try {        lock=declaringNameSpace.getClassInstance();      } catch (      UtilEvalError e) {        throw new InterpreterError("Can't get class instance for synchronized method.");      }    } else     lock=declaringNameSpace.getThis(interpreter);synchronized (lock) {      return invokeImpl(argValues,interpreter,callstack,callerInfo,overrideNameSpace);    }  } else   return invokeImpl(argValues,interpreter,callstack,callerInfo,overrideNameSpace);}  }
class C{  private void toEntryValues(Map<String,?> fromRow){  for (int i=0; i < _entryValues.length; ++i) {    _entryValues[i]=_fromCols.get(i).getColumn().getRowValue(fromRow);  }}  }
class C{  public static double[][] LEAD(Instances D,Classifier h,Random r) throws Exception {  Instances D_r=new Instances(D);  D_r.randomize(r);  Instances D_train=new Instances(D_r,0,D_r.numInstances() * 60 / 100);  Instances D_test=new Instances(D_r,D_train.numInstances(),D_r.numInstances() - D_train.numInstances());  BR br=new BR();  br.setClassifier(h);  Result result=Evaluation.evaluateModel((MultiLabelClassifier)br,D_train,D_test,"PCut1","1");  return LEAD2(D_test,result);}  }
class C{  void processDragEnter(DragSourceDragEvent dsde){  DragSourceListener dsl=listener;  if (dsl != null) {    dsl.dragEnter(dsde);  }}  }
class C{  public int xToOffset(int line,int x){  TokenMarker tokenMarker=getTokenMarker();  FontMetrics fm=painter.getFontMetrics();  getLineText(line,lineSegment);  char[] segmentArray=lineSegment.array;  int segmentOffset=lineSegment.offset;  int segmentCount=lineSegment.count;  int width=horizontalOffset;  if (tokenMarker == null) {    for (int i=0; i < segmentCount; i++) {      char c=segmentArray[i + segmentOffset];      int charWidth;      if (c == '\t') {        charWidth=(int)painter.nextTabStop(width,i) - width;      } else {        charWidth=fm.charWidth(c);      }      if (painter.isBlockCaretEnabled()) {        if (x - charWidth <= width) {          return i;        }      } else {        if (x - charWidth / 2 <= width) {          return i;        }      }      width+=charWidth;    }    return segmentCount;  } else {    Token tokens;    if (painter.currentLineIndex == line && painter.currentLineTokens != null) {      tokens=painter.currentLineTokens;    } else {      painter.currentLineIndex=line;      tokens=painter.currentLineTokens=tokenMarker.markTokens(lineSegment,line);    }    int offset=0;    Toolkit toolkit=painter.getToolkit();    Font defaultFont=painter.getFont();    SyntaxStyle[] styles=painter.getStyles();    for (; ; ) {      byte id=tokens.id;      if (id == Token.END) {        return offset;      }      if (id == Token.NULL) {        fm=painter.getFontMetrics();      } else {        fm=styles[id].getFontMetrics(defaultFont);      }      int length=tokens.length;      for (int i=0; i < length; i++) {        char c=segmentArray[segmentOffset + offset + i];        int charWidth;        if (c == '\t') {          charWidth=(int)painter.nextTabStop(width,offset + i) - width;        } else {          charWidth=fm.charWidth(c);        }        if (painter.isBlockCaretEnabled()) {          if (x - charWidth <= width) {            return offset + i;          }        } else {          if (x - charWidth / 2 <= width) {            return offset + i;          }        }        width+=charWidth;      }      offset+=length;      tokens=tokens.next;    }  }}  }
class C{  public Visibility(){  super(KEY);}  }
class C{  public final void testRemoveAllHelperTextIdsFromArray(){  int[] helperTextIds=new int[2];  helperTextIds[0]=android.R.string.cancel;  helperTextIds[1]=android.R.string.copy;  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addAllHelperTextIds(helperTextIds);  passwordEditText.addHelperTextId(android.R.string.copyUrl);  passwordEditText.removeAllHelperTextIds(helperTextIds);  passwordEditText.removeAllHelperTextIds(helperTextIds);  assertEquals(1,passwordEditText.getHelperTexts().size());  assertEquals(getContext().getText(android.R.string.copyUrl),passwordEditText.getHelperTexts().iterator().next());}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:42.068 -0500",hash_original_method="829D665E9575B14A2545A678B846DF03",hash_generated_method="3D2C22A6B1859C1BF80A90876F79B416") public int read() throws IOException {  if (closed) {    throw new IOException("Attempted read from closed stream.");  }  if (pos >= contentLength) {    return -1;  }  pos++;  return this.in.read();}  }
class C{  public SaveFileAsAction(Application app,@Nullable View view){  super(app,view,true);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");  labels.configureAction(this,ID);}  }
class C{  @Override public void perspective(float fov,float aspect,float zNear,float zFar){  float ymax=zNear * (float)Math.tan(fov / 2);  float ymin=-ymax;  float xmin=ymin * aspect;  float xmax=ymax * aspect;  frustum(xmin,xmax,ymin,ymax,zNear,zFar);}  }
class C{  public Fxaa(int viewportWidth,int viewportHeight){  setup(viewportWidth,viewportHeight);}  }
class C{  protected ActiveHNode newLearningNode() throws Exception {  ActiveHNode newChild;  if (m_leafStrategy == LEAF_MAJ_CLASS) {    newChild=new ActiveHNode();  } else   if (m_leafStrategy == LEAF_NB) {    newChild=new NBNode(m_header,m_nbThreshold);  } else {    newChild=new NBNodeAdaptive(m_header,m_nbThreshold);  }  return newChild;}  }
class C{  public CustomerOrder assembleCustomerOrder(final CustomerOrder order,final ShoppingCart shoppingCart,final boolean onePhysicalDelivery) throws OrderAssemblyException {  final Map<String,List<CustomerOrderDet>> groups=getDeliveryGroups(order,onePhysicalDelivery);  int idx=0;  for (  Map.Entry<String,List<CustomerOrderDet>> entry : groups.entrySet()) {    final List<CustomerOrderDet> items=entry.getValue();    final CustomerOrderDelivery customerOrderDelivery=createOrderDelivery(order,shoppingCart,items,entry.getKey(),idx);    if (CustomerOrderDelivery.ELECTRONIC_DELIVERY_GROUP.equals(entry.getKey())) {      customerOrderDelivery.setPrice(BigDecimal.ZERO);      customerOrderDelivery.setListPrice(BigDecimal.ZERO);      customerOrderDelivery.setPromoApplied(false);      customerOrderDelivery.setAppliedPromo(null);      customerOrderDelivery.setNetPrice(BigDecimal.ZERO);      customerOrderDelivery.setGrossPrice(BigDecimal.ZERO);      customerOrderDelivery.setTaxCode("");      customerOrderDelivery.setTaxRate(BigDecimal.ZERO);    } else {      final Total cartTotal=shoppingCart.getTotal();      final String shippingSlaId=customerOrderDelivery.getCarrierSla().getGuid();      final int index=shoppingCart.indexOfShipping(shippingSlaId);      final CartItem shipping=index > -1 ? shoppingCart.getShippingList().get(index) : null;      if (cartTotal == null || shipping == null || shipping.getListPrice() == null || shipping.getPrice() == null || shipping.getNetPrice() == null || shipping.getGrossPrice() == null || shipping.getTaxRate() == null || shipping.getTaxCode() == null) {        throw new OrderAssemblyException("No delivery total");      }      customerOrderDelivery.setPrice(shipping.getPrice());      customerOrderDelivery.setListPrice(shipping.getListPrice());      customerOrderDelivery.setPromoApplied(shipping.isPromoApplied());      customerOrderDelivery.setAppliedPromo(shipping.getAppliedPromo());      customerOrderDelivery.setNetPrice(shipping.getNetPrice());      customerOrderDelivery.setGrossPrice(shipping.getGrossPrice());      customerOrderDelivery.setTaxCode(shipping.getTaxCode());      customerOrderDelivery.setTaxRate(shipping.getTaxRate());      customerOrderDelivery.setTaxExclusiveOfPrice(shipping.isTaxExclusiveOfPrice());    }    order.getDelivery().add(customerOrderDelivery);    idx++;  }  return order;}  }
class C{  public final LC gridGapX(String boundsSize){  setGridGapX(ConstraintParser.parseBoundSize(boundsSize,true,true));  return this;}  }
class C{  protected static float[] convertRadius(Element filterElement,BridgeContext ctx){  String s=filterElement.getAttributeNS(null,SVG_RADIUS_ATTRIBUTE);  if (s.length() == 0) {    return new float[]{0,0};  }  float[] radii=new float[2];  StringTokenizer tokens=new StringTokenizer(s," ,");  try {    radii[0]=SVGUtilities.convertSVGNumber(tokens.nextToken());    if (tokens.hasMoreTokens()) {      radii[1]=SVGUtilities.convertSVGNumber(tokens.nextToken());    } else {      radii[1]=radii[0];    }  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,filterElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_RADIUS_ATTRIBUTE,s,nfEx});  }  if (tokens.hasMoreTokens() || radii[0] < 0 || radii[1] < 0) {    throw new BridgeException(ctx,filterElement,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_RADIUS_ATTRIBUTE,s});  }  return radii;}  }
class C{  public SortingParams asc(){  params.add(ASC.raw);  return this;}  }
class C{  private void drawAnnoDragIndicators(final Graphics2D g,final WorkflowAnnotation anno,final Rectangle2D loc,final boolean printing){  if (printing) {    return;  }  AnnotationDragHelper dragged=model.getDragged();  if (dragged.getHoveredOperator() == null) {    return;  }  Graphics2D g2=(Graphics2D)g.create();  int padding=15;  Rectangle2D opRect=rendererModel.getOperatorRect(dragged.getHoveredOperator());  opRect=new Rectangle2D.Double(opRect.getX(),opRect.getY(),opRect.getWidth(),opRect.getHeight());  Rectangle2D shadowRect=new Rectangle2D.Double(opRect.getX() - padding - 1,opRect.getY() - padding - 1,opRect.getWidth() + 2 * padding + 1,opRect.getHeight() + 2 * padding + 1);  g2.setColor(DRAG_LINK_COLOR);  g2.setStroke(DRAG_BORDER_STROKE);  g2.draw(shadowRect);  g2.dispose();}  }
class C{  public VFSFileHandler(){  try {    this.fileSystemManager=VFS.getManager();  } catch (  FileSystemException e) {    throw new CargoException("Failed to get VFS system manager",e);  }}  }
class C{  public static boolean hostSupportsVariableReturn(Bundle extrasFromHost){  return hostSupports(extrasFromHost,EXTRA_HOST_CAPABILITY_SETTING_RETURN_VARIABLES);}  }
class C{  public String toString(){  return getCssText();}  }
class C{  public static boolean equals(boolean[] array1,boolean[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public SurfaceSquare(SurfaceSquare source){  super(source);}  }
class C{  public File resolvePath(String path){  return new File(getBaseDir(),path);}  }
class C{  public static Monitor addException(Throwable throwable){  return factory.addException(throwable);}  }
class C{  public JsonParser createJsonParser(File f) throws IOException, JsonParseException {  IOContext ctxt=_createContext(f,true);  InputStream in=new FileInputStream(f);  if (_inputDecorator != null) {    in=_inputDecorator.decorate(ctxt,in);  }  return _createJsonParser(in,ctxt);}  }
class C{  public SearchReply(final int packetId,final int errorCode,final IAddress address){  super(packetId,errorCode);  if (success()) {    Preconditions.checkNotNull(address,"IE01072: Address argument can not be null");  } else {    if (address != null) {      throw new IllegalArgumentException("IE01073: Address argument must be null");    }  }  this.address=address;}  }
class C{  public static MaxRowExpression max(Expression exprOne,Expression exprTwo,Expression... moreExpressions){  return new MaxRowExpression(exprOne,exprTwo,moreExpressions);}  }
class C{  private void parseHeader(String header){  if (HttpLog.LOGV) {    HttpLog.v("HttpAuthHeader.parseHeader(): header: " + header);  }  if (header != null) {    String parameters=parseScheme(header);    if (parameters != null) {      if (mScheme != UNKNOWN) {        parseParameters(parameters);      }    }  }}  }
class C{  public void rollbackToSavepoint(String name){  if (savepoints == null) {    throw DbException.get(ErrorCode.SAVEPOINT_IS_INVALID_1,name);  }  Savepoint savepoint=savepoints.get(name);  if (savepoint == null) {    throw DbException.get(ErrorCode.SAVEPOINT_IS_INVALID_1,name);  }  rollbackTo(savepoint,false);}  }
class C{  public boolean validateWriteSets(){  final Iterator<Map.Entry<String,ILocalBTreeView>> itr=indices.entrySet().iterator();  while (itr.hasNext()) {    final Map.Entry<String,ILocalBTreeView> entry=itr.next();    final String name=entry.getKey();    final IsolatedFusedView isolated=(IsolatedFusedView)entry.getValue();    final AbstractBTree[] sources=resourceManager.getIndexSources(name,UNISOLATED);    if (sources == null) {      log.warn("Index does not exist: " + name);      return false;    }    if (!isolated.validate(sources)) {      if (log.isInfoEnabled())       log.info("validation failed: " + name);      return false;    }  }  return true;}  }
class C{  public Method copyMethod(Method arg){  return langReflectAccess().copyMethod(arg);}  }
class C{  public static double[][] computeWeightMatrix(final int quanth,final int quants,final int quantb){  final int dim=quanth * quants * quantb;  assert (dim > 0);  final double[][] m=new double[dim][dim];  for (int x=0; x < dim; x++) {    final int hx=x / (quantb * quants);    final int sx=(x / quantb) % quants;    final int bx=x % quantb;    for (int y=x; y < dim; y++) {      final int hy=y / (quantb * quants);      final int sy=(y / quantb) % quants;      final int by=y % quantb;      final double chx=Math.cos((hx + .5) / quanth * MathUtil.TWOPI);      final double chy=Math.cos((hy + .5) / quanth * MathUtil.TWOPI);      final double shx=MathUtil.cosToSin((hx + .5) / quanth * MathUtil.TWOPI,chx);      final double shy=MathUtil.cosToSin((hy + .5) / quanth * MathUtil.TWOPI,chy);      final double cos=chx * (sx + .5) / quants - chy * (sy + .5) / quants;      final double sin=shx * (sx + .5) / quants - shy * (sy + .5) / quants;      final double db=(bx - by) / (double)quantb;      final double val=1. - Math.sqrt((db * db + sin * sin + cos * cos) / 5);      m[x][y]=m[y][x]=val;    }  }  return m;}  }
class C{  public boolean isMessageEventRequest(){  return this.packetID == null;}  }
class C{  private PlacemarkType createPlacemark(final String linkid,final CountSimComparison csc,final double relativeError,final int timestep){  StringBuilder stringBuffer=new StringBuilder();  PlacemarkType placemark=kmlObjectFactory.createPlacemarkType();  stringBuffer.delete(0,stringBuffer.length());  stringBuffer.append(LINK);  stringBuffer.append(linkid);  placemark.setDescription(createPlacemarkDescription(linkid,csc,relativeError,timestep));  return placemark;}  }
class C{  public final void writeDouble(double v) throws IOException {  buffer.putDouble(v);}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  @Override public Result compile(String[] args){  Context context=new Context();  CeyloncFileManager.preRegister(context);  CeylonLog.preRegister(context);  Result result=compile(args,context);  if (fileManager instanceof JavacFileManager) {    ((JavacFileManager)fileManager).close();  }  return result;}  }
class C{  @SuppressWarnings("unchecked") public CMemoryModuleFilterCreator(){  super(Lists.newArrayList((IPredicateGenerator<CMemoryModuleWrapper>)new CNameDescriptionGenerator<CMemoryModuleWrapper>()));}  }
class C{  public CustomizedDistributedRowLock<K> withTtl(Integer ttl){  this.ttl=ttl;  return this;}  }
class C{  public static boolean validSystemNameConfig(String systemName,char type){  if (!validSystemNameFormat(systemName,type)) {    log.warn(systemName + " invalid");    return false;  }  SerialNode node=getNodeFromSystemName(systemName);  if (node == null) {    log.warn(systemName + " invalid; no such node");    return false;  }  int bit=getBitFromSystemName(systemName);  if ((type == 'T') || (type == 'L')) {    if ((bit <= 0) || (bit > SerialNode.outputBits[node.nodeType])) {      log.warn(systemName + " invalid; bad output bit number " + bit+ " > "+ SerialNode.outputBits[node.nodeType]);      return false;    }  } else   if (type == 'S') {    if ((bit <= 0) || (bit > SerialNode.inputBits[node.nodeType])) {      log.warn(systemName + " invalid; bad input bit number " + bit+ " > "+ SerialNode.inputBits[node.nodeType]);      return false;    }  } else {    log.error("Invalid type specification in validSystemNameConfig call");    return false;  }  return true;}  }
class C{  public int calculatePartition(char _initialChar,int numPartitions){  final int partitionSize=(int)(Math.ceil(26.0d / (double)numPartitions));  int initialChar=(int)_initialChar;  if (initialChar < 'a')   return 0;  if (initialChar > 'z')   return numPartitions - 1;  return (initialChar - 97) / partitionSize;}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof CubePos) {    CubePos otherCoords=(CubePos)obj;    return otherCoords.cubeX == cubeX && otherCoords.cubeY == cubeY && otherCoords.cubeZ == cubeZ;  }  return false;}  }
class C{  protected final Predicate<E> _asBound(final IBindingSet bindingSet){  if (bindingSet == null)   throw new IllegalArgumentException();  final int arity=arity();  for (int i=0; i < arity; i++) {    final IVariableOrConstant<?> t=(IVariableOrConstant<?>)get(i);    if (t.isConstant())     continue;    final IVariable<?> var=(IVariable<?>)t;    final IConstant<?> val=bindingSet.get(var);    if (val == null) {      continue;    }    _set(i,new Constant(var,val.get()));  }  return this;}  }
class C{  public void resetLastPose(){  this.setPose(physicsState.getLastPosition(this.index),physicsState.getLastOrientation(this.index));}  }
class C{  @Deprecated public void createNote(Note note,OnClientCallback<Note> callback){  AsyncReflector.execute(mClient,callback,"createNote",mAuthenticationToken,note);}  }
class C{  public static ServiceStateException convertToApi(org.oscm.internal.types.exception.ServiceStateException oldEx){  return convertExceptionToApi(oldEx,ServiceStateException.class);}  }
class C{  public ULLMapIter(){  cur=list;}  }
class C{  public ProcessImageImplementation createProcessImageImplementation(){  return new SimpleProcessImage();}  }
class C{  public void testSetF26Momentary(){  boolean f26Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF26Momentary(f26Momentary);}  }
class C{  @Override public void align(int modulus){  assert modulus > 0 && (modulus & 0x3) == 0 : "Modulus has to be a positive multiple of 4.";  if (position() % modulus == 0) {    return;  }  int offset=modulus - position() % modulus;  for (int i=0; i < offset; i+=4) {    nop();  }}  }
class C{  @Override @Nullable public PsiElement resolve(){  final ResolveResult[] results=multiResolve(false);  return results.length >= 1 && !(results[0] instanceof ImplicitResolveResult) ? results[0].getElement() : null;}  }
class C{  public void release(){  reset();}  }
class C{  public SingularMatrixException(){}  }
class C{  protected void calculateCutPointsByMDL(int index,Instances data){  data.sort(data.attribute(index));  int firstMissing=data.numInstances();  for (int i=0; i < data.numInstances(); i++) {    if (data.instance(i).isMissing(index)) {      firstMissing=i;      break;    }  }  m_CutPoints[index]=cutPointsForSubset(data,index,0,firstMissing);}  }
class C{  public void minimizeFrame(JInternalFrame f){  if (f.isIcon()) {    iconifyFrame(f);    return;  }  if ((f.getNormalBounds()) != null) {    Rectangle r=f.getNormalBounds();    f.setNormalBounds(null);    try {      f.setSelected(true);    } catch (    PropertyVetoException e2) {    }    setBoundsForFrame(f,r.x,r.y,r.width,r.height);  }}  }
class C{  public static boolean checkMatchingRemoteCopyVarraysettings(VirtualPool vpoolA,VirtualPool vpoolB,DbClient dbClient){  Map<URI,VpoolRemoteCopyProtectionSettings> settingsA=VirtualPool.getRemoteProtectionSettings(vpoolA,dbClient);  Map<URI,VpoolRemoteCopyProtectionSettings> settingsB=VirtualPool.getRemoteProtectionSettings(vpoolB,dbClient);  if (settingsA.isEmpty() && settingsB.isEmpty()) {    return true;  }  if (!settingsA.isEmpty() && !settingsB.isEmpty() && settingsA.keySet().containsAll(settingsB.keySet())&& settingsB.keySet().containsAll(settingsA.keySet())) {    for (    Map.Entry<URI,VpoolRemoteCopyProtectionSettings> entryA : settingsA.entrySet()) {      VpoolRemoteCopyProtectionSettings copySettingsA=entryA.getValue();      VpoolRemoteCopyProtectionSettings copySettingsB=settingsB.get(entryA.getKey());      if (copySettingsA == null || copySettingsB == null) {        return false;      }      if (copySettingsA.getCopyMode() == null || copySettingsB.getCopyMode() == null || !copySettingsA.getCopyMode().equals(copySettingsB.getCopyMode())) {        return false;      }      if (copySettingsA.getVirtualPool() == null || copySettingsB.getVirtualPool() == null || !copySettingsA.getVirtualPool().equals(copySettingsB.getVirtualPool())) {        return false;      }    }    return true;  }  return false;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGenPackage.INT_LITERAL__VALUE:    setValue((Integer)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public synchronized void parse(InStream in) throws IOException {  List records=createRecords(in);  processRecords(records);}  }
class C{  public static String encodeBase64URLSafeString(final byte[] binaryData){  return newStringUtf8(encodeBase64(binaryData,false,true));}  }
class C{  private static void parseTraf(Track track,DefaultSampleValues extendsDefaults,ContainerAtom traf,TrackFragment out,int workaroundFlags,byte[] extendedTypeScratch){  LeafAtom tfdtAtom=traf.getLeafAtomOfType(Atom.TYPE_tfdt);  long decodeTime=tfdtAtom == null ? 0 : parseTfdt(traf.getLeafAtomOfType(Atom.TYPE_tfdt).data);  LeafAtom tfhd=traf.getLeafAtomOfType(Atom.TYPE_tfhd);  DefaultSampleValues fragmentHeader=parseTfhd(extendsDefaults,tfhd.data);  out.sampleDescriptionIndex=fragmentHeader.sampleDescriptionIndex;  LeafAtom trun=traf.getLeafAtomOfType(Atom.TYPE_trun);  parseTrun(track,fragmentHeader,decodeTime,workaroundFlags,trun.data,out);  LeafAtom saiz=traf.getLeafAtomOfType(Atom.TYPE_saiz);  if (saiz != null) {    TrackEncryptionBox trackEncryptionBox=track.sampleDescriptionEncryptionBoxes[fragmentHeader.sampleDescriptionIndex];    parseSaiz(trackEncryptionBox,saiz.data,out);  }  LeafAtom senc=traf.getLeafAtomOfType(Atom.TYPE_senc);  if (senc != null) {    parseSenc(senc.data,out);  }  int childrenSize=traf.leafChildren.size();  for (int i=0; i < childrenSize; i++) {    LeafAtom atom=traf.leafChildren.get(i);    if (atom.type == Atom.TYPE_uuid) {      parseUuid(atom.data,out,extendedTypeScratch);    }  }}  }
class C{  @Override public Object clone(){  Chset n=new Chset();  for (  Range r : ranges) {    n.ranges.add(new Range(r.first,r.last));  }  n.refreshAsciiSet();  return n;}  }
class C{  private boolean onTouchSelectMode(MotionEvent event){  return false;}  }
class C{  public void pushCharBack(int ch) throws IOException {  if (pushedBack) {    throw new IllegalStateException("can't push back char when a token has been pushed back");  }  if (peekc == NEED_CHAR) {    unread(ch);  } else {    unread(peekc);    peekc=NEED_CHAR;    unread(ch);  }}  }
class C{  public String sqlMetadata_viewDefinitions(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_viewDefinitions(catalogName,schemaName);}  }
class C{  public void verifyInfo(String substring){  verify(Level.INFO,substring);}  }
class C{  @Override public void onRemoteOperationFinish(RemoteOperation operation,RemoteOperationResult result){  super.onRemoteOperationFinish(operation,result);  if (operation instanceof RemoveFileOperation) {    onRemoveFileOperationFinish((RemoveFileOperation)operation,result);  } else   if (operation instanceof RenameFileOperation) {    onRenameFileOperationFinish((RenameFileOperation)operation,result);  } else   if (operation instanceof SynchronizeFileOperation) {    onSynchronizeFileOperationFinish((SynchronizeFileOperation)operation,result);  } else   if (operation instanceof CreateFolderOperation) {    onCreateFolderOperationFinish((CreateFolderOperation)operation,result);  } else   if (operation instanceof MoveFileOperation) {    onMoveFileOperationFinish((MoveFileOperation)operation,result);  } else   if (operation instanceof CopyFileOperation) {    onCopyFileOperationFinish((CopyFileOperation)operation,result);  }}  }
class C{  public void testSameConverterWithDifferentType(){  final Type value=new Type(new Decimal("1.5"),new Boolean(true));  String expected="" + "<type>\n" + "  <decimal>1.5</decimal>\n"+ "  <boolean>true</boolean>\n"+ "  <agreement>yes</agreement>\n"+ "</type>";  assertBothWays(value,expected);}  }
class C{  protected static byte[] parseWapString(ByteArrayInputStream pduDataStream,int stringType){  assert (null != pduDataStream);  pduDataStream.mark(1);  int temp=pduDataStream.read();  assert (-1 != temp);  if ((TYPE_QUOTED_STRING == stringType) && (QUOTED_STRING_FLAG == temp)) {    pduDataStream.mark(1);  } else   if ((TYPE_TEXT_STRING == stringType) && (QUOTE == temp)) {    pduDataStream.mark(1);  } else {    pduDataStream.reset();  }  return getWapString(pduDataStream,stringType);}  }
class C{  public void sendData(byte[][] data,int offset,int count,String targetHostName,int targetPort,long interval){  if ((data == null) || (data.length <= 0)) {    if (__IEsptouchTask.DEBUG) {      Log.e(TAG,"sendData(): data == null or length <= 0");    }    return;  }  for (int i=offset; !mIsStop && i < offset + count; i++) {    if (data[i].length == 0) {      continue;    }    try {      DatagramPacket localDatagramPacket=new DatagramPacket(data[i],data[i].length,InetAddress.getByName(targetHostName),targetPort);      this.mSocket.send(localDatagramPacket);    } catch (    UnknownHostException e) {      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData(): UnknownHostException");      }      e.printStackTrace();      mIsStop=true;      break;    }catch (    IOException e) {      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData(): IOException");      }      e.printStackTrace();      mIsStop=true;      break;    }    try {      Thread.sleep(interval);    } catch (    InterruptedException e) {      e.printStackTrace();      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData is Interrupted");      }      mIsStop=true;      break;    }  }  if (mIsStop) {    close();  }}  }
class C{  HelpMenu(){  super(I18n.tr("&Help"));  addMenuItem(new OpenLinkAction("http://www.frostwire.com/?id=faq",I18n.tr("&FAQ"),I18n.tr("Frequently Asked Questions for FrostWire")));  addMenuItem(new OpenLinkAction("http://www.frostwire-preview.com/?type=yt&displayName=How%20to%20search%20and%20download%20files%20with%20FrostWire%20Wynwood%20(5.6)%20-%20YouTube&source=YouTube+-+FrostWireVideos&detailsUrl=http://www.youtube.com/watch?v=A0p_DpOjpO8",I18n.tr("How to use FrostWire (Video)"),I18n.tr("How to use FrostWire (Video)")));  addMenuItem(new OpenLinkAction("http://www.frostwire.com/android",I18n.tr("FrostWire for Android"),I18n.tr("Get FrostWire on your Android phone, tablet or google tv, all free.")));  addMenuItem(new OpenLinkAction("http://support.frostwire.com/hc/en-us/articles/200302295-What-is-seeding-",I18n.tr("What is \"Seeding\"?"),I18n.tr("Learn about BitTorrent Seeding")));  addMenuItem(new OpenLinkAction("http://www.frostwire.com/vpn",I18n.tr("What is a VPN?"),I18n.tr("Learn about how to protect your internet connection and your privacy online")));  addSeparator();  addMenuItem(new OpenLinkAction("http://www.frostwire.com/stickers",I18n.tr("Order FrostWire Stickers"),I18n.tr("Order FrostWire stickers, we ship worldwide.")));  addMenuItem(new OpenLinkAction("http://www.frostwire.com/shop",I18n.tr("FrostWire T-Shirts"),I18n.tr("Get a T-shirt, support the project. You'll get also 10 free stickers")));  addMenuItem(new OpenLinkAction("http://www.frostclick.com/wp/?from=frostwire" + com.limegroup.gnutella.util.FrostWireUtils.getFrostWireVersion(),"FrostClick.com",I18n.tr("Free Legal Downloads")));  addSeparator();  addMenuItem(new OpenLinkAction("http://www.facebook.com/pages/FrostWire/110265295669948",I18n.tr("FrostWire on Facebook"),I18n.tr("Come and say hi to the community on Facebook")));  addMenuItem(new OpenLinkAction("http://twitter.com/#!/frostwire",I18n.tr("Follow us on Twitter"),I18n.tr("Follow us on Twitter")));  addMenuItem(new OpenLinkAction("http://www.frostwire.com/forum/viewforum.php?f=1",I18n.tr("Foru&m"),I18n.tr("Access the FrostWire Users\' Forum")));  addSeparator();  addMenuItem(new OpenLinkAction("http://frostwire.wordpress.com/2012/02/14/dont-get-scammed-frostwire-is-free/",I18n.tr("&Did you pay for FrostWire?"),I18n.tr("Did you pay for FrostWire? FrostWire is Free as in Free Beer. Avoid Scams.")));  addMenuItem(new ShowTipOfTheDayAction());  if (!OSUtils.isMacOSX()) {    addSeparator();    addMenuItem(new ShowAboutDialogAction());  }}  }
class C{  private ElderInitProcessor(DM dm,Set others,HashMap grantors,HashSet crashedGrantors){  super(dm,others);  this.grantors=grantors;  this.crashedGrantors=crashedGrantors;}  }
class C{  public static String[] split(String string,char c){  if (countMatches(string,c) <= 0)   return new String[]{string};  String s=string + c;  String[] sa=new String[countMatches(string,c) + 1];  StringBuilder sb=new StringBuilder();  char[] ca=s.toCharArray();  int n=0, x;  for (x=0; x < ca.length; x++) {    if (ca[x] == c) {      sa[n]=sb.toString();      sb=new StringBuilder();      n++;    } else {      sb.append(ca[x]);    }  }  return sa;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  ObjectInputStream.GetField fields=s.readFields();  char[] tmp=(char[])fields.get("buf",null);  if (tmp == null)   throw new InvalidObjectException("buf is null and should not be!");  buf=tmp.clone();  len=fields.get("len",0L);  if (buf.length != len)   throw new InvalidObjectException("buf is not the expected size");  origLen=fields.get("origLen",0L);  clob=(Clob)fields.get("clob",null);}  }
class C{  public String[] list() throws SmbException {  return list("*",ATTR_DIRECTORY | ATTR_HIDDEN | ATTR_SYSTEM,null,null);}  }
class C{  public static Driver driver(URI uri,Config config){  return driver(uri,AuthTokens.none(),config);}  }
class C{  private void writeLinkStatisticsFile(String outputFolder) throws IOException {  File file=new File(outputFolder + "linkStatistics" + this.TXTfile);  FileWriter writer=new FileWriter(file);  writer.write("ID \t length \t geometricLength \t nlanes \t capacity");  for (  Link l : this.network.getLinks().values()) {    writer.write("\n" + l.getId() + "\t"+ l.getLength()+ "\t"+ this.geometricLengths.get(l.getId())+ "\t"+ l.getNumberOfLanes()+ "\t"+ l.getCapacity());  }  writer.flush();  writer.close();}  }
class C{  static void finishLastResponse(final HttpConnection conn){  final InputStream lastResponse=conn.getLastResponseInputStream();  if (lastResponse != null) {    conn.setLastResponseInputStream(null);    try {      lastResponse.close();    } catch (    final IOException ioe) {      conn.close();    }  }}  }
class C{  private void sequenceQuery(QueryEntry entry,CompletableFuture<QueryResponse> future){  ServerSessionContext session=context.getStateMachine().executor().context().sessions().getSession(entry.getSession());  if (session == null) {    future.complete(logResponse(QueryResponse.builder().withStatus(Response.Status.ERROR).withError(CopycatError.Type.UNKNOWN_SESSION_ERROR).build()));  } else {    sequenceQuery(entry,session,future);  }}  }
class C{  MetricService(ArgusHttpClient client){  super(client);}  }
class C{  protected void startControllersvc(){  if (!started) {    started=true;    Properties sysProps=System.getProperties();    sysProps.put("buildType","emc");    sysProps.put("java.library.path","/opt/storageos/lib");    sysProps.put("sblim.wbem.configURL","file:/opt/storageos/conf/cimom.properties");    sysProps.put("log4j.configuration","controllersvc-log4j.properties");    sysProps.put("product.home","/opt/storageos");    PropertyConfigurator.configure("/opt/storageos/conf/controllersvc-log4j.properties");    log.info("Beginning logging");    Main.main(args);  }  applicationContext=AttributeMatcherFramework.getApplicationContext();  coordinator=(CoordinatorClient)applicationContext.getBean("coordinator");  dbClient=(DbClient)applicationContext.getBean("dbclient");  dispatcher=(Dispatcher)applicationContext.getBean("dispatcher");  workflowService=(WorkflowService)applicationContext.getBean("workflowService");}  }
class C{  public boolean isCreatePlan(){  Object oo=get_Value(COLUMNNAME_IsCreatePlan);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public byte readRawByte() throws IOException {  if (bufferPos == bufferSize) {    throw InvalidProtocolBufferNanoException.truncatedMessage();  }  return buffer[bufferPos++];}  }
class C{  protected Component createComponent(Component owner){  if (GraphicsEnvironment.isHeadless()) {    return null;  }  return new HeavyWeightWindow(getParentWindow(owner));}  }
class C{  public POSBracketToWord(String file){  super(file);}  }
class C{  public boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof AuthenticatorDescription))   return false;  final AuthenticatorDescription other=(AuthenticatorDescription)o;  return type.equals(other.type);}  }
class C{  protected void makeMDPadding(){  int dataLen=flush();  int blen=getBlockLength();  long currentLength=getBlockCount() * (long)blen;  currentLength=(currentLength + (long)dataLen) * 8L;  int lenlen=countBuf.length;  if (littleEndian) {    encodeLEInt((int)currentLength,countBuf,0);    encodeLEInt((int)(currentLength >>> 32),countBuf,4);  } else {    encodeBEInt((int)(currentLength >>> 32),countBuf,lenlen - 8);    encodeBEInt((int)currentLength,countBuf,lenlen - 4);  }  int endLen=(dataLen + lenlen + blen) & ~(blen - 1);  update(fbyte);  for (int i=dataLen + 1; i < endLen - lenlen; i++)   update((byte)0);  update(countBuf);}  }
class C{  private boolean isRecovering(RecoveryStatus status){  boolean recovering=(status.getStatus() == RecoveryStatus.Status.PREPARING || status.getStatus() == RecoveryStatus.Status.REPAIRING || status.getStatus() == RecoveryStatus.Status.SYNCING);  return recovering;}  }
class C{  public boolean showIcons(){  return preferences.getBoolean(resources.getString(R.string.key_show_icons),Boolean.parseBoolean(resources.getString(R.string.default_show_icons)));}  }
class C{  public static double averageArea(int level){  return S2Projections.AVG_AREA.getValue(level);}  }
class C{  public CatchData add(Object type){  CatchData cd=new CatchData(type);  catches.addElement(cd);  return cd;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.444 -0400",hash_original_method="3A1F780B4E10DD64D09F66978CACFCA5",hash_generated_method="A990ED33B751BDA19334FD8ADF52EAF1") public boolean isDoubleMetaphoneEqual(String value1,String value2){  return isDoubleMetaphoneEqual(value1,value2,false);}  }
class C{  @SafeVarargs public final void migrate(Migration<T>... migrations){  for (  Migration<T> migration : migrations) {    if (!migration.shouldMigrate()) {      v("not migrating " + migration + " into "+ this);      continue;    }    final Object data=migration.getData();    final boolean supportedDataType=isDataTypeSupported(data);    if (!supportedDataType) {      w("could not migrate '" + migration.getPreviousKey() + "' into "+ this+ " because the data type "+ data.getClass().getSimpleName()+ " is invalid");      migration.onPostMigrate(null);      continue;    }    final String key=migration.getTrayKey();    final String migrationKey=migration.getPreviousKey();    getStorage().put(key,migrationKey,data);    v("migrated '" + migrationKey + "'='"+ data+ "' into "+ this+ " (now: '"+ key+ "'='"+ data+ "')");    final T item=getStorage().get(key);    migration.onPostMigrate(item);  }}  }
class C{  public static boolean validSystemNameFormat(String systemName,char type){  if ((systemName.charAt(0) != 'T') || (systemName.charAt(1) != type)) {    log.error("illegal character in header field system name: " + systemName);    return (false);  }  String s="";  int k=0;  boolean noB=true;  for (int i=2; (i < systemName.length()) && noB; i++) {    if (systemName.charAt(i) == 'B') {      s=systemName.substring(2,i);      k=i + 1;      noB=false;    }  }  if (noB) {    int num;    try {      num=Integer.valueOf(systemName.substring(2)).intValue();    } catch (    Exception e) {      log.error("illegal character in number field system name: " + systemName);      return (false);    }    if ((num < 1) || (num >= 128000)) {      log.error("number field out of range in system name: " + systemName);      return (false);    }    if ((num - ((num / 1000) * 1000)) == 0) {      log.error("bit number not in range 1 - 999 in system name: " + systemName);      return (false);    }  } else {    if (s.length() == 0) {      log.error("no node address before 'B' in system name: " + systemName);      return (false);    }    int num;    try {      num=Integer.valueOf(s).intValue();    } catch (    Exception e) {      log.error("illegal character in node address field of system name: " + systemName);      return (false);    }    if ((num < 0) || (num >= 128)) {      log.error("node address field out of range in system name: " + systemName);      return (false);    }    try {      num=Integer.parseInt(systemName.substring(k,systemName.length()));    } catch (    Exception e) {      log.error("illegal character in bit number field of system name: " + systemName);      return (false);    }    if ((num < 1) || (num > 2048)) {      log.error("bit number field out of range in system name: " + systemName);      return (false);    }  }  return true;}  }
class C{  @UiHandler("trashButton") public void clickOnTrashdButton(final ClickEvent event){  yeomanPartView.removeItem(type,name,this);}  }
class C{  public void start(){  thread.start();}  }
class C{  public MosaicDefinitionCreationNotification(final MosaicDefinition mosaicDefinition){  super(NotificationType.MosaicDefinitionCreation);  this.mosaicDefinition=mosaicDefinition;}  }
class C{  public void showTextBubble(String text,View anchorView,int maxWidth,int maxHeight){  mTooltipText.setText(text);  mTooltipText.measure(MeasureSpec.makeMeasureSpec(maxWidth,MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(maxHeight,MeasureSpec.AT_MOST));  mAnchorView=anchorView;  calculateNewPosition();  showAtCalculatedPosition();}  }
class C{  public ConverterTagTestCase(String name){  super(name);}  }
class C{  public DrawerBuilder withRootView(@IdRes int rootViewRes){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  return withRootView((ViewGroup)mActivity.findViewById(rootViewRes));}  }
class C{  public Javadoc newJavadoc(){  Javadoc result=new Javadoc(this);  return result;}  }
class C{  public Matrix4f rotateY(float ang){  return rotateY(ang,this);}  }
class C{  public void delete(Node x){  decreaseKey(x,Double.NEGATIVE_INFINITY);  removeMin();}  }
class C{  @NonNull public static <T>Set<PersistentResource<T>> loadRecords(Class<T> loadClass,RequestScope requestScope){  DataStoreTransaction tx=requestScope.getTransaction();  if (shouldSkipCollection(loadClass,ReadPermission.class,requestScope)) {    return Collections.emptySet();  }  Iterable<T> list;  FilterScope filterScope=new FilterScope(requestScope,loadClass);  list=tx.loadObjects(loadClass,filterScope);  Set<PersistentResource<T>> resources=new PersistentResourceSet(list,requestScope);  resources=filter(ReadPermission.class,resources);  for (  PersistentResource<T> resource : resources) {    requestScope.queueCommitTrigger(resource);  }  return resources;}  }
class C{  public void characters(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem() && XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;  if (m_inCData) {    cdata(ch,start,length);    return;  }  String s=new String(ch,start,length);  Node childNode;  childNode=m_currentNode != null ? m_currentNode.getLastChild() : null;  if (childNode != null && childNode.getNodeType() == Node.TEXT_NODE) {    ((Text)childNode).appendData(s);  } else {    Text text=m_doc.createTextNode(s);    append(text);  }}  }
class C{  public void toggle(Animation animIn,Animation animOut){  toggle(true,animIn,animOut);}  }
class C{  @Override public boolean supportsCatalogsInIndexDefinitions(){  debugCodeCall("supportsCatalogsInIndexDefinitions");  return true;}  }
class C{  protected void QName() throws javax.xml.transform.TransformerException {  if (lookahead(':',1)) {    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),m_queueMark - 1);    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);    nextToken();    consumeExpected(':');  } else {    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.EMPTY);    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);  }  m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),m_queueMark - 1);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);  nextToken();}  }
class C{  public Matrix4d scale(double xyz){  return scale(xyz,xyz,xyz);}  }
class C{  public double parseDouble(String localeFormattedDecimal){  return Double.parseDouble(localeFormattedDecimal);}  }
class C{  public boolean evaluate(InternalContextAdapter context) throws MethodInvocationException {  Object left=jjtGetChild(0).value(context);  Object right=jjtGetChild(1).value(context);  if (left == null || right == null) {    rsvc.error((left == null ? "Left" : "Right") + " side (" + jjtGetChild((left == null ? 0 : 1)).literal()+ ") of '==' operation "+ "has null value. "+ "If a reference, it may not be in the context."+ " Operation not possible. "+ context.getCurrentTemplateName()+ " [line "+ getLine()+ ", column "+ getColumn()+ "]");    return false;  }  if (left.getClass().equals(right.getClass())) {    return left.equals(right);  } else {    rsvc.error("Error in evaluation of == expression." + " Both arguments must be of the same Class." + " Currently left = " + left.getClass() + ", right = "+ right.getClass()+ ". "+ context.getCurrentTemplateName()+ " [line "+ getLine()+ ", column "+ getColumn()+ "] (ASTEQNode)");  }  return false;}  }
class C{  public T caseNamedElement(NamedElement object){  return null;}  }
class C{  private static void geoCodedToPrefixCodedBytes(final long hash,final int shift,final BytesRefBuilder bytes){  if (shift < 32 || shift > 63) {    throw new IllegalArgumentException("Illegal shift value, must be 32..63; got shift=" + shift);  }  int nChars=BUF_SIZE_LONG + 1;  bytes.setLength(nChars);  bytes.grow(nChars--);  final int sigBits=64 - shift;  bytes.setByteAt(BUF_SIZE_LONG,(byte)(sigBits));  long sortableBits=hash;  sortableBits>>>=shift;  sortableBits<<=32 - sigBits;  do {    bytes.setByteAt(--nChars,(byte)(sortableBits));    sortableBits>>>=8;  } while (nChars > 0);}  }
