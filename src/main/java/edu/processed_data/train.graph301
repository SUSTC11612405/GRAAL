class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 158) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public static ServiceChangedException convertToApi(org.oscm.internal.types.exception.ServiceChangedException oldEx){  return convertExceptionToApi(oldEx,ServiceChangedException.class);}  }
class C{  public static String escapeFilterParameter(String parameter){  return parameter.replace("\\","\\\\").replace(",","\\,");}  }
class C{  @Override public void updateRowId(String columnLabel,RowId x) throws SQLException {  throw unsupported("rowId");}  }
class C{  public void addFirmwareUpdateCallback(OneSheeldFirmwareUpdateCallback firmwareUpdateCallback){  if (firmwareUpdateCallback != null && !firmwareUpdateCallbacks.contains(firmwareUpdateCallback))   firmwareUpdateCallbacks.add(firmwareUpdateCallback);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.969 -0500",hash_original_method="068E2EE4236B85776135405F1B66AD49",hash_generated_method="28DD1B4FF5D0D981D70F8CACE98B810E") @Override public String toString(){  return this;}  }
class C{  public Benchmark makeBench(int subs,int pubs){  Benchmark bench=new Benchmark("test",subs,pubs);  for (int i=0; i < subs; i++) {    bench.addSubSample(millionMessagesSecondSample(1));  }  for (int i=0; i < pubs; i++) {    bench.addPubSample(millionMessagesSecondSample(1));  }  bench.close();  return bench;}  }
class C{  public IconicsDrawable colorRes(int colorRes){  return color(mContext.getResources().getColor(colorRes));}  }
class C{  public synchronized void write(byte b[],int off,int len){  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) - b.length > 0)) {    throw new IndexOutOfBoundsException();  }  ensureCapacity(count + len);  System.arraycopy(b,off,buf,count,len);  count+=len;}  }
class C{  public CreateUserScriptCommand(Configuration configuration,String resourcePath,User user){  super(configuration,resourcePath);  this.user=user;}  }
class C{  public boolean supportsOpenCursorsAcrossCommit() throws SQLException {  return false;}  }
class C{  public CandlestickRenderer(double candleWidth,boolean drawVolume,XYToolTipGenerator toolTipGenerator){  super();  setBaseToolTipGenerator(toolTipGenerator);  this.candleWidth=candleWidth;  this.drawVolume=drawVolume;  this.volumePaint=Color.gray;  this.upPaint=Color.green;  this.downPaint=Color.red;  this.useOutlinePaint=false;}  }
class C{  protected void didExpand(){  int nextRow=setRowAndChildren(row);  FHTreeStateNode parent=(FHTreeStateNode)getParent();  int childRowCount=nextRow - row - 1;  if (parent != null) {    parent.adjustRowBy(childRowCount,parent.getIndex(this) + 1);  }  adjustRowCountBy(childRowCount);}  }
class C{  protected void createViewer(Composite parent){  fTextViewer=new TextViewer(parent,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);  IDocument document=new Document();  fTextViewer.setDocument(document);  parent.redraw();  parent.layout();}  }
class C{  protected ShippingOrderPosition(){}  }
class C{  void pruneLevel(){  if (nchild != 0) {    for (int id=0; id < 8; id++) {      if (child[id] != null) {        child[id].pruneLevel();      }    }  }  if (level == cube.depth) {    pruneChild();  }}  }
class C{  public static Iterator<Integer> lineOffsetIterator(String input){  return new LineOffsetIterator(input);}  }
class C{  public boolean permitInlinedAccess(Environment env,MemberDefinition f) throws ClassNotFound {  return (env.opt() && (f.clazz.getClassDeclaration().equals(declaration))) || (env.opt_interclass() && canAccess(env,f));}  }
class C{  private void save(){  try {    m_tagTreeNode.getObject().setName(m_nameTextField.getText());  } catch (  final CouldntSaveDataException e) {    CUtilityFunctions.logException(e);    final String innerMessage="E00182: " + "Could not change tag name";    final String innerDescription=CUtilityFunctions.createDescription(String.format("The name of the tag '%s' could not be changed.",m_tagTreeNode.getObject().getName()),new String[]{"There was a problem with the database connection."},new String[]{"The tag name could not be changed."});    NaviErrorDialog.show(SwingUtilities.getWindowAncestor(this),innerMessage,innerDescription,e);  }  try {    m_tagTreeNode.getObject().setDescription(m_descriptionField.getText());  } catch (  final CouldntSaveDataException e) {    CUtilityFunctions.logException(e);    final String innerMessage="E00183: " + "Could not change tag description";    final String innerDescription=CUtilityFunctions.createDescription(String.format("The description of the tag '%s' could not be changed.",m_tagTreeNode.getObject().getName()),new String[]{"There was a problem with the database connection."},new String[]{"The tag description could not be changed."});    NaviErrorDialog.show(SwingUtilities.getWindowAncestor(this),innerMessage,innerDescription,e);  }}  }
class C{  private PendingBlock writeBlock(int prefixLength,boolean isFloor,int floorLeadLabel,int start,int end,boolean hasTerms,boolean hasSubBlocks) throws IOException {  assert end > start;  long startFP=out.getFilePointer();  boolean hasFloorLeadLabel=isFloor && floorLeadLabel != -1;  final BytesRef prefix=new BytesRef(prefixLength + (hasFloorLeadLabel ? 1 : 0));  System.arraycopy(lastTerm.bytes(),0,prefix.bytes,0,prefixLength);  prefix.length=prefixLength;  int numEntries=end - start;  int code=numEntries << 1;  if (end == pending.size()) {    code|=1;  }  out.writeVInt(code);  final List<SubIndex> subIndices;  boolean isLeafBlock=hasSubBlocks == false;  long totalTermCount;  boolean absolute=true;  if (isLeafBlock) {    subIndices=null;    for (int i=start; i < end; i++) {      PendingEntry ent=pending.get(i);      assert ent.isTerm : "i=" + i;      PendingTerm term=(PendingTerm)ent;      assert StringHelper.startsWith(term.termBytes,prefix) : "term.term=" + term.termBytes + " prefix="+ prefix;      BlockTermState state=term.state;      final int suffix=term.termBytes.length - prefixLength;      suffixWriter.writeVInt(suffix);      suffixWriter.writeBytes(term.termBytes,prefixLength,suffix);      assert floorLeadLabel == -1 || (term.termBytes[prefixLength] & 0xff) >= floorLeadLabel;      statsWriter.writeVInt(state.docFreq);      if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {        assert state.totalTermFreq >= state.docFreq : state.totalTermFreq + " vs " + state.docFreq;        statsWriter.writeVLong(state.totalTermFreq - state.docFreq);      }      postingsWriter.encodeTerm(longs,bytesWriter,fieldInfo,state,absolute);      for (int pos=0; pos < longsSize; pos++) {        assert longs[pos] >= 0;        metaWriter.writeVLong(longs[pos]);      }      bytesWriter.writeTo(metaWriter);      bytesWriter.reset();      absolute=false;    }    totalTermCount=end - start;  } else {    subIndices=new ArrayList<>();    totalTermCount=0;    for (int i=start; i < end; i++) {      PendingEntry ent=pending.get(i);      if (ent.isTerm) {        PendingTerm term=(PendingTerm)ent;        assert StringHelper.startsWith(term.termBytes,prefix) : "term.term=" + term.termBytes + " prefix="+ prefix;        BlockTermState state=term.state;        final int suffix=term.termBytes.length - prefixLength;        suffixWriter.writeVInt(suffix << 1);        suffixWriter.writeBytes(term.termBytes,prefixLength,suffix);        assert floorLeadLabel == -1 || (term.termBytes[prefixLength] & 0xff) >= floorLeadLabel;        statsWriter.writeVInt(state.docFreq);        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {          assert state.totalTermFreq >= state.docFreq;          statsWriter.writeVLong(state.totalTermFreq - state.docFreq);        }        postingsWriter.encodeTerm(longs,bytesWriter,fieldInfo,state,absolute);        for (int pos=0; pos < longsSize; pos++) {          assert longs[pos] >= 0;          metaWriter.writeVLong(longs[pos]);        }        bytesWriter.writeTo(metaWriter);        bytesWriter.reset();        absolute=false;        totalTermCount++;      } else {        PendingBlock block=(PendingBlock)ent;        assert StringHelper.startsWith(block.prefix,prefix);        final int suffix=block.prefix.length - prefixLength;        assert suffix > 0;        suffixWriter.writeVInt((suffix << 1) | 1);        suffixWriter.writeBytes(block.prefix.bytes,prefixLength,suffix);        assert floorLeadLabel == -1 || (block.prefix.bytes[prefixLength] & 0xff) >= floorLeadLabel;        assert block.fp < startFP;        suffixWriter.writeVLong(startFP - block.fp);        suffixWriter.writeVLong(block.totFloorTermCount);        subIndices.add(new SubIndex(block.index,totalTermCount));        totalTermCount+=block.totFloorTermCount;      }    }    assert subIndices.size() != 0;  }  out.writeVInt((int)(suffixWriter.getFilePointer() << 1) | (isLeafBlock ? 1 : 0));  suffixWriter.writeTo(out);  suffixWriter.reset();  out.writeVInt((int)statsWriter.getFilePointer());  statsWriter.writeTo(out);  statsWriter.reset();  out.writeVInt((int)metaWriter.getFilePointer());  metaWriter.writeTo(out);  metaWriter.reset();  if (hasFloorLeadLabel) {    prefix.bytes[prefix.length++]=(byte)floorLeadLabel;  }  return new PendingBlock(prefix,startFP,hasTerms,totalTermCount,isFloor,floorLeadLabel,subIndices);}  }
class C{  public void put(String key,Object value){  if (value.getClass().equals(String.class)) {    putString(key,value.toString());  } else   if (value.getClass().equals(Integer.class)) {    putInt(key,(Integer)value);  } else   if (value.getClass().equals(Float.class)) {    putFloat(key,(Float)value);  } else   if (value.getClass().equals(Long.class)) {    putLong(key,(Long)value);  } else   if (value.getClass().equals(Boolean.class)) {    putBoolean(key,(Boolean)value);  } else {    putString(key,value.toString());  }}  }
class C{  public int maxNumberMoves(){  return 16;}  }
class C{  public static void main(String args[]){  new VacuumApp().startApplication();}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public void insert(INode n){  tree.insert(n,n);}  }
class C{  public void fitScreen(){  Matrix save=mViewPortHandler.fitScreen();  mViewPortHandler.refresh(save,this,true);  calculateOffsets();  postInvalidate();}  }
class C{  public boolean isMinXSet(){  return isMinXSet(0);}  }
class C{  public static boolean isServiceEnabled(final Connection connection){  ServiceDiscoveryManager manager=ServiceDiscoveryManager.getInstanceFor(connection);  List<String> namespaces=new ArrayList<String>();  namespaces.addAll(Arrays.asList(NAMESPACE));  namespaces.add(InBandBytestreamManager.NAMESPACE);  if (!IBB_ONLY) {    namespaces.add(Socks5BytestreamManager.NAMESPACE);  }  for (  String namespace : namespaces) {    if (!manager.includesFeature(namespace)) {      return false;    }  }  return true;}  }
class C{  private void installProps(Properties sysProps){  Enumeration e=sysProps.propertyNames();  while (e.hasMoreElements()) {    String key=(String)e.nextElement();    String val=(String)sysProps.getProperty(key);    try {      this.put(key,val);    } catch (    NullPointerException ex) {    }  }}  }
class C{  @Transactional public void redeem(final String tokenNumber,final String service){  final Token token=tokenRepository.findByTokenNumberAndService(tokenNumber,service);  if (token == null)   throw new ApplicationRuntimeException("Token " + tokenNumber + " does not exist!");  redeem(token);}  }
class C{  private void createOverviewPage(){  RemapOverview overview=new RemapOverview(migrationTask,getContainer());  int index=addPage(overview.getControl());  setPageText(index,"Overview");  taskListeners.add(overview);}  }
class C{  public static String chooseRepr(String src,String dst,boolean temp){  URL srcUrl;  URL dstUrl;  try {    srcUrl=new URL(src);    dstUrl=new URL(dst);  } catch (  MalformedURLException e) {    return dst;  }  String srcDomain=URLUtil.getDomainName(srcUrl);  String dstDomain=URLUtil.getDomainName(dstUrl);  String srcHost=srcUrl.getHost();  String dstHost=dstUrl.getHost();  String srcFile=srcUrl.getFile();  String dstFile=dstUrl.getFile();  boolean srcRoot=(srcFile.equals("/") || srcFile.length() == 0);  boolean destRoot=(dstFile.equals("/") || dstFile.length() == 0);  if (!srcDomain.equals(dstDomain)) {    return dst;  }  if (!temp) {    if (srcRoot) {      return src;    } else {      return dst;    }  } else {    if (srcRoot && !destRoot) {      return src;    } else     if (!srcRoot && destRoot) {      return dst;    } else     if (!srcRoot && !destRoot && (srcHost.equals(dstHost))) {      int numSrcPaths=srcFile.split("/").length;      int numDstPaths=dstFile.split("/").length;      if (numSrcPaths != numDstPaths) {        return (numDstPaths < numSrcPaths ? dst : src);      } else {        int srcPathLength=srcFile.length();        int dstPathLength=dstFile.length();        return (dstPathLength < srcPathLength ? dst : src);      }    } else {      int numSrcSubs=srcHost.split("\\.").length;      int numDstSubs=dstHost.split("\\.").length;      return (numDstSubs < numSrcSubs ? dst : src);    }  }}  }
class C{  public DoubleMatrix2D assign(double[][] values){  if (this.isNoView) {    if (values.length != rows)     throw new IllegalArgumentException("Must have same number of rows: rows=" + values.length + "rows()="+ rows());    int i=columns * (rows - 1);    for (int row=rows; --row >= 0; ) {      double[] currentRow=values[row];      if (currentRow.length != columns)       throw new IllegalArgumentException("Must have same number of columns in every row: columns=" + currentRow.length + "columns()="+ columns());      System.arraycopy(currentRow,0,this.elements,i,columns);      i-=columns;    }  } else {    super.assign(values);  }  return this;}  }
class C{  public boolean onEvent(ActionResult result){synchronized (this) {    String requestId=result.getResponseInfo().mRequestId;    if (requestId == null) {      return false;    }    boolean eventRemoved=mRequestIds.remove(requestId);    if (eventRemoved) {      Class key=null;      for (      Class type : mLastRequestIdByType.keySet()) {        if (requestId.equals(mLastRequestIdByType.get(type))) {          key=type;          break;        }      }      if (key != null) {        mLastRequestIdByType.remove(key);      }    }    return eventRemoved;  }}  }
class C{  public String greetServer(String input) throws IllegalArgumentException {  return "";}  }
class C{  protected boolean unsyncEnclosed(){  try {    OffsetGrabPoint gb0=(OffsetGrabPoint)polyGrabPoints.get(0);    OffsetGrabPoint ogb=(OffsetGrabPoint)polyGrabPoints.get(polyGrabPoints.size() - 1);    if (gb0.getX() == ogb.getX() && gb0.getY() == ogb.getY()) {      gb0.removeGrabPoint(ogb);      ogb.removeGrabPoint(gb0);      return true;    }  } catch (  ClassCastException cce) {  }catch (  ArrayIndexOutOfBoundsException aioobe) {  }  return false;}  }
class C{  public void saveAsCsv(String filename){  CsvWriter csvWriter=null;  String[] column={"Index","X","Y","Z","Dist"};  try {    csvWriter=new CsvWriter(filename,column);    csvWriter.open();    String[] value=new String[column.length];    for (int i=0; i < vertexCount; ++i) {      value[0]=Integer.toString(i);      value[1]=Double.toString(vertex[i * 3]);      value[2]=Double.toString(vertex[i * 3 + 1]);      value[3]=Double.toString(graphVertex[i * 2 + 1]);      value[4]=Double.toString(graphVertex[i * 2]);      csvWriter.writeLine(value);    }    csvWriter.close();    Console.getInstance().println(vertexCount + " records saved to " + filename);  } catch (  Exception e) {    e.printStackTrace();    if (csvWriter != null) {      try {        csvWriter.close();      } catch (      Exception e2) {        e.printStackTrace();      }    }  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"USER_ACTION\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"TYPE\" TEXT,"+ "\"TITLE\" TEXT,"+ "\"APPOINT_ID\" TEXT,"+ "\"ICON\" TEXT,"+ "\"ICON_DISABLED\" TEXT,"+ "\"DATE\" INTEGER);");}  }
class C{  public String encodeImage(Drawable drawable){  Bitmap bitmap=((BitmapDrawable)drawable).getBitmap();  ByteArrayOutputStream outStream=new ByteArrayOutputStream();  bitmap.compress(Bitmap.CompressFormat.PNG,COMPRESSION_LEVEL,outStream);  byte[] bitmapContent=outStream.toByteArray();  String encodedImage=Base64.encodeToString(bitmapContent,Base64.NO_WRAP);  StreamHandler.closeOutputStream(outStream,TAG);  return encodedImage;}  }
class C{  public Invoke(){  super();}  }
class C{  String renameMethodDesc(String desc){  if (desc == null) {    return null;  }  Type[] args=Type.getArgumentTypes(desc);  StringBuilder sb=new StringBuilder("(");  for (  Type arg : args) {    String name=renameType(arg);    sb.append(name);  }  sb.append(')');  Type ret=Type.getReturnType(desc);  String name=renameType(ret);  sb.append(name);  return sb.toString();}  }
class C{  protected Expression matchPattern(int opPos) throws TransformerException {  locPathDepth++;  try {    int nextOpPos=opPos;    int i;    for (i=0; getOp(nextOpPos) == OpCodes.OP_LOCATIONPATHPATTERN; i++) {      nextOpPos=getNextOpPos(nextOpPos);    }    if (i == 1)     return compile(opPos);    UnionPattern up=new UnionPattern();    StepPattern[] patterns=new StepPattern[i];    for (i=0; getOp(opPos) == OpCodes.OP_LOCATIONPATHPATTERN; i++) {      nextOpPos=getNextOpPos(opPos);      patterns[i]=(StepPattern)compile(opPos);      opPos=nextOpPos;    }    up.setPatterns(patterns);    return up;  }  finally {    locPathDepth--;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected double unwrapValue(Object value){  return ((Double)value).doubleValue();}  }
class C{  public int size(){  return namesAndValues.length / 2;}  }
class C{  private void updateLibraryFolders(final File newSaveFolder){  LibrarySettings.DIRECTORIES_TO_INCLUDE.add(newSaveFolder);  OptionsMediator.instance().reinitPane(OptionsConstructor.LIBRARY_KEY);}  }
class C{  public static void main(String[] args) throws Exception {  int maxContentLength=Integer.MIN_VALUE;  boolean dumpContent=false;  String urlString=null;  String usage="Usage: File [-maxContentLength L] [-dumpContent] url";  if (args.length == 0) {    System.err.println(usage);    System.exit(-1);  }  for (int i=0; i < args.length; i++) {    if (args[i].equals("-maxContentLength")) {      maxContentLength=Integer.parseInt(args[++i]);    } else     if (args[i].equals("-dumpContent")) {      dumpContent=true;    } else     if (i != args.length - 1) {      System.err.println(usage);      System.exit(-1);    } else     urlString=args[i];  }  File file=new File();  file.setConf(NutchConfiguration.create());  if (maxContentLength != Integer.MIN_VALUE)   file.setMaxContentLength(maxContentLength);  ProtocolOutput output=file.getProtocolOutput(urlString,WebPage.newBuilder().build());  Content content=output.getContent();  System.err.println("URL: " + content.getUrl());  ProtocolStatus status=output.getStatus();  String protocolMessage=ProtocolStatusUtils.getMessage(status);  System.err.println("Status: " + ProtocolStatusUtils.getName(status.getCode()) + (protocolMessage == null ? "" : ": " + protocolMessage));  System.out.println("Content-Type: " + content.getContentType());  System.out.println("Content-Length: " + content.getMetadata().get(Response.CONTENT_LENGTH));  System.out.println("Last-Modified: " + content.getMetadata().get(Response.LAST_MODIFIED));  String redirectLocation=content.getMetadata().get("Location");  if (redirectLocation != null) {    System.err.println("Location: " + redirectLocation);  }  if (dumpContent) {    System.out.print(new String(content.getContent()));  }  file=null;}  }
class C{  public static int computeHValue(int n,int x,int y){  int h=0;  for (int s=n / 2; s > 0; s/=2) {    int rx=(x & s) > 0 ? 1 : 0;    int ry=(y & s) > 0 ? 1 : 0;    h+=s * s * ((3 * rx) ^ ry);    if (ry == 0) {      if (rx == 1) {        x=n - 1 - x;        y=n - 1 - y;      }      int t=x;      x=y;      y=t;    }  }  return h;}  }
class C{  public SelectClause addStreamWildcard(String streamName){  selectList.add(new SelectClauseStreamWildcard(streamName,null));  return this;}  }
class C{  @Override public void onItemDataResponse(final ItemDataResponse itemDataResponse){  Log.v(TAG,"onItemDataResponse recieved");  Log.v(TAG,"ItemDataRequestStatus" + itemDataResponse.getItemDataRequestStatus());  Log.v(TAG,"ItemDataRequestId" + itemDataResponse.getRequestId());  new ItemDataAsyncTask().execute(itemDataResponse);}  }
class C{  public double predicted(){  return m_Predicted;}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  canvas.drawRect(x,y - SHAPE_WIDTH / 2,x + SHAPE_WIDTH,y + SHAPE_WIDTH / 2,paint);}  }
class C{  @SuppressWarnings({"unchecked"}) public <V>V addMetaIfAbsent(int key,V val){  assert val != null;synchronized (this) {    V v=(V)meta(key);    if (v == null)     addMeta(key,v=val);    return v;  }}  }
class C{  private static byte[] lmHash(final String password) throws AuthenticationException {  try {    final byte[] oemPassword=password.toUpperCase(Locale.US).getBytes("US-ASCII");    final int length=Math.min(oemPassword.length,14);    final byte[] keyBytes=new byte[14];    System.arraycopy(oemPassword,0,keyBytes,0,length);    final Key lowKey=createDESKey(keyBytes,0);    final Key highKey=createDESKey(keyBytes,7);    final byte[] magicConstant="KGS!@#$%".getBytes("US-ASCII");    final Cipher des=Cipher.getInstance("DES/ECB/NoPadding");    des.init(Cipher.ENCRYPT_MODE,lowKey);    final byte[] lowHash=des.doFinal(magicConstant);    des.init(Cipher.ENCRYPT_MODE,highKey);    final byte[] highHash=des.doFinal(magicConstant);    final byte[] lmHash=new byte[16];    System.arraycopy(lowHash,0,lmHash,0,8);    System.arraycopy(highHash,0,lmHash,8,8);    return lmHash;  } catch (  Exception e) {    throw new AuthenticationException(e.getMessage(),e);  }}  }
class C{  public static float log(float value,float base){  return (float)(Math.log(value) / Math.log(base));}  }
class C{  public static String stringFor(int n){switch (n) {case CU_JIT_CACHE_OPTION_NONE:    return "CU_JIT_CACHE_OPTION_NONE";case CU_JIT_CACHE_OPTION_CG:  return "CU_JIT_CACHE_OPTION_CG";case CU_JIT_CACHE_OPTION_CA:return "CU_JIT_CACHE_OPTION_CA";}return "INVALID CUjit_cacheMode: " + n;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.110 -0400",hash_original_method="25F32C80196A92214BBC65AF90C93DBA",hash_generated_method="4C785FA230C82D5E3B9E2A75340E1E92") public boolean isContextual(){  return fContextual;}  }
class C{  public void updateDynamicallyConfigurableProperties(AccessibilityServiceInfo other){  eventTypes=other.eventTypes;  packageNames=other.packageNames;  feedbackType=other.feedbackType;  notificationTimeout=other.notificationTimeout;  flags=other.flags;}  }
class C{  protected void deleteDocumentosDescriptor(String idDescr){  List documentos=docDocumentoDescrDBEntity.getDocumentos(idDescr);  docDocumentoDescrDBEntity.deleteDocumentos(idDescr);  docClasifDescrDBEntity.deleteClasificadores(idDescr);  deleteDocumentos(documentos);}  }
class C{  public Array(final double[] array,final int size){  this(array,size,EnumSet.noneOf(Address.Flags.class));}  }
class C{  public WrappedByteBuffer putBuffer(WrappedByteBuffer v){  _autoExpand(v.remaining());  _buf.put(v._buf);  return this;}  }
class C{  public boolean isServiceStatusChangeAllowed(){  if (marketplaceOwnerRightsCache == null) {    marketplaceOwnerRightsCache=new Boolean(super.isMarketplaceOwner());  }  return marketplaceOwnerRightsCache.booleanValue();}  }
class C{  protected SimpleQuery genAnalysisQuery(DashboardAnalysis analysis,MeasureGroup group,boolean optimize,boolean forceBeyondLimit) throws ScopeException, SQLScopeException, ComputingException, InterruptedException, RenderingException {  return this.genAnalysisQueryCachable(analysis,group,optimize,forceBeyondLimit);}  }
class C{  public ServicesStillPublishedException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  private void helpTestHashIndexRemove() throws Exception {  createData(region,200);  region.destroy("1");  SelectResults noIndexResults=(SelectResults)qs.newQuery("Select * FROM /portfolios p where p.ID = 1").execute();  region.clear();  createData(region,200);  region.destroy("1");  index=(Index)qs.createHashIndex("idHash","p.ID","/portfolios p");  SelectResults results=(SelectResults)qs.newQuery("Select * FROM /portfolios p where p.ID = 1").execute();  assertEquals(noIndexResults.size(),results.size());  assertTrue(observer.indexUsed);}  }
class C{  public void sortReverse(){  sortImpl(true);}  }
class C{  protected Expression neg(int opPos) throws TransformerException {  return compileUnary(new Neg(),opPos);}  }
class C{  public Object save(Wrapper<Object,Serializable> wrapper){  log.info("Going to save a wrapped data store object");  final Object entity=wrapper.getEntity();  final Serializable key=wrapper.getKey();  if (repositoryMetadata.getEntityType().isInstance(entity)) {    log.debug("Since the entity is of the same type as the actual entity type supported by the data store, " + "we know how to set the key on the wrapped entity.");    PropertyUtils.setPropertyValue(entity,repositoryMetadata.getIdentifierProperty(),key);  }  dataStore.save(key,entity);  return entity;}  }
class C{  public static String printHex(byte b){  int hd=(b & 0xF0) >>> 4, ld=b & 0x0F;  return new String(new byte[]{(byte)(hd + (hd > 9 ? 'A' - 10 : '0')),(byte)(ld + (ld > 9 ? 'A' - 10 : '0'))});}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isValid(long startTime,long dateTime){  long testTime=startTime;  if (testTime == dateTime)   return true;  while (testTime < dateTime) {    testTime=next(startTime,testTime,1);    if (testTime == dateTime)     return true;  }  return false;}  }
class C{  public void testDefault(){  Instances icopy=new Instances(m_Instances);  m_Filter=getFilter();  Instances result=useFilter();  assertEquals(result.numAttributes(),icopy.numAttributes());}  }
class C{  public void cancel(){  BaseProducerContext.callOnCancellationRequested(cancelNoCallbacks());}  }
class C{  public void addColumn(String name,int sqlType,String sqlTypeName,int precision,int scale){  if (rows != null && rows.size() > 0) {    throw new IllegalStateException("Cannot add a column after adding rows");  }  if (name == null) {    name="C" + (columns.size() + 1);  }  Column column=new Column();  column.name=name;  column.sqlType=sqlType;  column.precision=precision;  column.scale=scale;  column.sqlTypeName=sqlTypeName;  columns.add(column);}  }
class C{  public MariaDbXid(int formatId,byte[] globalTransactionId,byte[] branchQualifier){  this.formatId=formatId;  this.globalTransactionId=globalTransactionId;  this.branchQualifier=branchQualifier;}  }
class C{  public ProviderException(){  super();}  }
class C{  public static final byte composeIntermedietDeliveryNotification(byte esmClass){  return composeMessageType(esmClass,SMPPConstant.ESMCLS_INTRMD_DELIV_NOTIF);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println("Progress: " + progress + "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  void addSitemap(AbstractSiteMap sitemap){  sitemaps.add(sitemap);}  }
class C{  @Override public void close() throws IOException {  closeCurrentEntry();  write(new byte[TarConstants.EOF_BLOCK]);  super.close();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.980 -0400",hash_original_method="19B94458987093A18E35F94275820DB1",hash_generated_method="09175B3ECFF2547DB2C90323773BEC19") public void destroy() throws Exception {}  }
class C{  private static boolean orientation(Coordinate[] pts){  return CoordinateArrays.increasingDirection(pts) == 1;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(prefix05.class,args);}  }
class C{  public DatabaseException(){  super();}  }
class C{  private void buildPostBusinessObjectDataResponse(MockCloseableHttpResponse response,URI uri) throws JAXBException {  BusinessObjectData businessObjectData=new BusinessObjectData();  List<StorageUnit> storageUnits=new ArrayList<>();  businessObjectData.setStorageUnits(storageUnits);  StorageUnit storageUnit=new StorageUnit();  storageUnit.setStorageDirectory(new StorageDirectory("app-a/exchange-a/prc/txt/new-orders/frmt-v0/data-v0/process-date=2014-01-31"));  storageUnits.add(storageUnit);  response.setEntity(getHttpEntity(businessObjectData));}  }
class C{  public OMCircle(double latPoint,double lonPoint,int offset_x1,int offset_y1,int w,int h){  super(latPoint,lonPoint,offset_x1,offset_y1,w,h,0f,360f);}  }
class C{  public int size(){  return 4;}  }
class C{  @Override public boolean isFilledBy(Assignment input){  return slots.keySet().stream().map(null).noneMatch(null);}  }
class C{  public double loadDouble(Offset offset){  return this.plus(offset).loadDouble();}  }
class C{  protected void doWork(){  LOGGER.info("Connected to the cluster, opened bucket " + bucketName);}  }
class C{  @DSComment("data structure class") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.422 -0500",hash_original_method="C35988B4D54806692C616FB01B8C7793",hash_generated_method="85E7BF1BC6441FD82F6063C8524910C6") public void put(String key,Boolean value){  mValues.put(key,value);}  }
class C{  public CloudSqlDao(final String url) throws SQLException {  dataSource.setUrl(url);  final String createTableSql="CREATE TABLE IF NOT EXISTS books2 ( id INT NOT NULL " + "AUTO_INCREMENT, author VARCHAR(255), createdBy VARCHAR(255), createdById VARCHAR(255), " + "description VARCHAR(255), publishedDate VARCHAR(255), title VARCHAR(255), imageUrl "+ "VARCHAR(255), PRIMARY KEY (id))";  try (Connection conn=dataSource.getConnection()){    conn.createStatement().executeUpdate(createTableSql);  } }  }
class C{  public static String JQ(String request) throws Exception {  int queryStartPos=request.indexOf('?');  String query;  String path;  if (-1 == queryStartPos) {    query="";    path=request;  } else {    query=request.substring(queryStartPos + 1);    path=request.substring(0,queryStartPos);  }  query=setParam(query,"wt","json");  request=path + '?' + setParam(query,"indent","on");  String response;  boolean failed=true;  try {    response=restTestHarness.query(request);    failed=false;  }  finally {    if (failed) {      log.error("REQUEST FAILED: " + request);    }  }  return response;}  }
class C{  public void buildClassifier(Instances data) throws Exception {  getCapabilities().testWithFail(data);  m_data=new Instances(data);  m_data.deleteWithMissingClass();  if (m_data.numAttributes() == 1) {    System.err.println("Cannot build model (only class attribute present in data!), " + "using ZeroR model instead!");    m_ZeroR=new weka.classifiers.rules.ZeroR();    m_ZeroR.buildClassifier(m_data);    return;  } else {    m_ZeroR=null;  }  super.buildClassifier(data);  Integer[] indices=new Integer[data.numAttributes() - 1];  int classIndex=data.classIndex();  int offset=0;  for (int i=0; i < indices.length + 1; i++) {    if (i != classIndex) {      indices[offset++]=i + 1;    }  }  int subSpaceSize=numberOfAttributes(indices.length,getSubSpaceSize());  Random random=data.getRandomNumberGenerator(m_Seed);  for (int j=0; j < m_Classifiers.length; j++) {    if (m_Classifier instanceof Randomizable) {      ((Randomizable)m_Classifiers[j]).setSeed(random.nextInt());    }    FilteredClassifier fc=new FilteredClassifier();    fc.setClassifier(m_Classifiers[j]);    m_Classifiers[j]=fc;    Remove rm=new Remove();    rm.setOptions(new String[]{"-V","-R",randomSubSpace(indices,subSpaceSize,classIndex + 1,random)});    fc.setFilter(rm);  }  buildClassifiers();  m_data=null;}  }
class C{  protected double defaultMinRadius(){  return 0.1;}  }
class C{  public void addElement(String s){  addElement(new StringElement(s));}  }
class C{  public RowManager(Table table){  m_table=table;}  }
class C{  public void upgradeTables() throws InterruptedException, ExecutionException, IOException {  for (  String keyspace : getNonSystemKeySpaces()) {    getProbe().forceKeyspaceCleanup(0,keyspace);  }}  }
class C{  public V remove(int key){  int hash=hash(key);  return segmentFor(hash).remove(key,hash,null);}  }
class C{  @SuppressWarnings("unchecked") public Object put(Object key,Object value){  Object orig=remove(key);  result.put(key,value);  return orig;}  }
class C{  @Override public String decode(String input){  if (Encoding.getEncoding(input) == -1) {    return input;  }switch (super.getParamName()) {case REQUEST:    if (Encoding.isURLEncoded(input)) {      input=super.getHelpers().urlDecode(input);      if (Encoding.getEncoding(input) < 0) {        return input;      }    }  byte[] byteString=null;if (Encoding.isBase64Encoded(input)) {  byteString=super.getHelpers().base64Decode(input);} else {  byteString=super.getHelpers().stringToBytes(input);}byte[] decompressed=null;{try {if (Encoding.isDeflated(byteString)) {  try {    decompressed=Compression.decompress(byteString);  } catch (  Exception ex) {    Logger.getLogger(SAML.class.getName()).log(Level.SEVERE,null,ex);  }  if (decompressed != null) {    String result=new String(decompressed);    return result;  }} else {  return input;}} catch (IOException ex) {Logger.getLogger(SAML.class.getName()).log(Level.SEVERE,null,ex);}}case RESPONSE:return super.getHelpers().bytesToString(super.getHelpers().base64Decode(super.getHelpers().urlDecode(input)));}return null;}  }
class C{  public Deck(int n){  this.cards=new Card[n];}  }
class C{  public static Map<String,Object> conditionFalseService(DispatchContext dctx,Map<String,?> context){  Map<String,Object> result=ServiceUtil.returnSuccess();  result.put("conditionReply",Boolean.FALSE);  return result;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Task<FileShareRestRep> deactivateFileContinuousCopies(URI id,FileSystemDeleteParam input){  return postTask(input,getContinuousCopiesUrl() + "/deactivate",id);}  }
class C{  private GridClientNodeBean createNodeBean(ClusterNode node,boolean mtr,boolean attr){  assert node != null;  GridClientNodeBean nodeBean=new GridClientNodeBean();  nodeBean.setNodeId(node.id());  nodeBean.setConsistentId(node.consistentId());  nodeBean.setTcpPort(attribute(node,ATTR_REST_TCP_PORT,0));  nodeBean.setTcpAddresses(nonEmptyList(node.<Collection<String>>attribute(ATTR_REST_TCP_ADDRS)));  nodeBean.setTcpHostNames(nonEmptyList(node.<Collection<String>>attribute(ATTR_REST_TCP_HOST_NAMES)));  GridCacheProcessor cacheProc=ctx.cache();  Map<String,CacheMode> nodeCaches=ctx.discovery().nodeCaches(node);  Collection<GridClientCacheBean> caches=new ArrayList<>(nodeCaches.size());  for (  String cacheName : nodeCaches.keySet())   caches.add(createCacheBean(cacheProc.cacheConfiguration(cacheName)));  nodeBean.setCaches(caches);  if (mtr) {    ClusterMetrics metrics=node.metrics();    GridClientNodeMetricsBean metricsBean=new GridClientNodeMetricsBean();    metricsBean.setStartTime(metrics.getStartTime());    metricsBean.setAverageActiveJobs(metrics.getAverageActiveJobs());    metricsBean.setAverageCancelledJobs(metrics.getAverageCancelledJobs());    metricsBean.setAverageCpuLoad(metrics.getAverageCpuLoad());    metricsBean.setAverageJobExecuteTime(metrics.getAverageJobExecuteTime());    metricsBean.setAverageJobWaitTime(metrics.getAverageJobWaitTime());    metricsBean.setAverageRejectedJobs(metrics.getAverageRejectedJobs());    metricsBean.setAverageWaitingJobs(metrics.getAverageWaitingJobs());    metricsBean.setCurrentActiveJobs(metrics.getCurrentActiveJobs());    metricsBean.setCurrentCancelledJobs(metrics.getCurrentCancelledJobs());    metricsBean.setCurrentCpuLoad(metrics.getCurrentCpuLoad());    metricsBean.setCurrentGcCpuLoad(metrics.getCurrentGcCpuLoad());    metricsBean.setCurrentDaemonThreadCount(metrics.getCurrentDaemonThreadCount());    metricsBean.setCurrentIdleTime(metrics.getCurrentIdleTime());    metricsBean.setCurrentJobExecuteTime(metrics.getCurrentJobExecuteTime());    metricsBean.setCurrentJobWaitTime(metrics.getCurrentJobWaitTime());    metricsBean.setCurrentRejectedJobs(metrics.getCurrentRejectedJobs());    metricsBean.setCurrentThreadCount(metrics.getCurrentThreadCount());    metricsBean.setCurrentWaitingJobs(metrics.getCurrentWaitingJobs());    metricsBean.setHeapMemoryCommitted(metrics.getHeapMemoryCommitted());    metricsBean.setHeapMemoryInitialized(metrics.getHeapMemoryInitialized());    metricsBean.setHeapMemoryMaximum(metrics.getHeapMemoryMaximum());    metricsBean.setHeapMemoryUsed(metrics.getHeapMemoryUsed());    metricsBean.setLastDataVersion(metrics.getLastDataVersion());    metricsBean.setLastUpdateTime(metrics.getLastUpdateTime());    metricsBean.setMaximumActiveJobs(metrics.getMaximumActiveJobs());    metricsBean.setMaximumCancelledJobs(metrics.getMaximumCancelledJobs());    metricsBean.setMaximumJobExecuteTime(metrics.getMaximumJobExecuteTime());    metricsBean.setMaximumJobWaitTime(metrics.getMaximumJobWaitTime());    metricsBean.setMaximumRejectedJobs(metrics.getMaximumRejectedJobs());    metricsBean.setMaximumThreadCount(metrics.getMaximumThreadCount());    metricsBean.setMaximumWaitingJobs(metrics.getMaximumWaitingJobs());    metricsBean.setNodeStartTime(metrics.getNodeStartTime());    metricsBean.setNonHeapMemoryCommitted(metrics.getNonHeapMemoryCommitted());    metricsBean.setNonHeapMemoryInitialized(metrics.getNonHeapMemoryInitialized());    metricsBean.setNonHeapMemoryMaximum(metrics.getNonHeapMemoryMaximum());    metricsBean.setNonHeapMemoryUsed(metrics.getNonHeapMemoryUsed());    metricsBean.setStartTime(metrics.getStartTime());    metricsBean.setTotalCancelledJobs(metrics.getTotalCancelledJobs());    metricsBean.setTotalCpus(metrics.getTotalCpus());    metricsBean.setTotalExecutedJobs(metrics.getTotalExecutedJobs());    metricsBean.setTotalIdleTime(metrics.getTotalIdleTime());    metricsBean.setTotalRejectedJobs(metrics.getTotalRejectedJobs());    metricsBean.setTotalStartedThreadCount(metrics.getTotalStartedThreadCount());    metricsBean.setTotalExecutedTasks(metrics.getTotalExecutedTasks());    metricsBean.setSentMessagesCount(metrics.getSentMessagesCount());    metricsBean.setSentBytesCount(metrics.getSentBytesCount());    metricsBean.setReceivedMessagesCount(metrics.getReceivedMessagesCount());    metricsBean.setReceivedBytesCount(metrics.getReceivedBytesCount());    metricsBean.setUpTime(metrics.getUpTime());    nodeBean.setMetrics(metricsBean);  }  if (attr) {    Map<String,Object> attrs=new HashMap<>(node.attributes());    attrs.remove(ATTR_CACHE);    attrs.remove(ATTR_TX_CONFIG);    attrs.remove(ATTR_SECURITY_SUBJECT);    attrs.remove(ATTR_SECURITY_CREDENTIALS);    for (Iterator<Map.Entry<String,Object>> i=attrs.entrySet().iterator(); i.hasNext(); ) {      Map.Entry<String,Object> e=i.next();      if (!e.getKey().startsWith("org.apache.ignite.") && !e.getKey().startsWith("plugins.") && System.getProperty(e.getKey()) == null) {        i.remove();        continue;      }      if (e.getValue() != null) {        if (e.getValue().getClass().isEnum() || e.getValue() instanceof InetAddress)         e.setValue(e.getValue().toString()); else         if (e.getValue().getClass().isArray())         i.remove();      }    }    nodeBean.setAttributes(attrs);  }  return nodeBean;}  }
class C{  private Filter compileQy(String qy) throws EagleQueryParseException {  try {    EntityDefinition ed=EntityDefinitionManager.getEntityByServiceName(_serviceName);    if (qy == null || qy.isEmpty()) {      if (ed.getPartitions() == null) {        if (LOG.isDebugEnabled())         LOG.warn("Query string is empty, full table scan query: " + qy);        return null;      } else {        final String errMsg="Entity " + ed.getEntityClass().getSimpleName() + " defined partition, "+ "but query doesn't provide partition condition! Query: "+ qy;        LOG.error(errMsg);        throw new IllegalArgumentException(errMsg);      }    }    EagleQueryParser parser=new EagleQueryParser(qy);    _queryExpression=parser.parse();    HBaseFilterBuilder builder=new HBaseFilterBuilder(ed,_queryExpression,_filterIfMissing);    FilterList flist=builder.buildFilters();    _partitionValues=builder.getPartitionValues();    _filterFields=builder.getFilterFields();    return flist;  } catch (  InstantiationException e) {    final String errMsg="Got an InstantiationException: " + e.getMessage();    throw new EagleQueryParseException(_serviceName + " entity does not exist! " + errMsg);  }catch (  IllegalAccessException e) {    final String errMsg="Got an IllegalAccessException: " + e.getMessage();    throw new EagleQueryParseException(_serviceName + " entity does not exist! " + errMsg);  }}  }
class C{  private void checkPaletteFormat(){switch (mPaletteFormat) {case PALETTE4_RGB8:    mCompressionFormat=GL_PALETTE4_RGB8_OES;  break;case PALETTE4_RGBA8:mCompressionFormat=GL_PALETTE4_RGBA8_OES;break;case PALETTE4_R5_G6_B5:mCompressionFormat=GL_PALETTE4_R5_G6_B5_OES;break;case PALETTE4_RGBA4:mCompressionFormat=GL_PALETTE4_RGBA4_OES;break;case PALETTE4_RGB5_A1:mCompressionFormat=GL_PALETTE4_RGB5_A1_OES;break;case PALETTE8_RGB8:mCompressionFormat=GL_PALETTE8_RGB8_OES;break;case PALETTE8_RGBA8:default :mCompressionFormat=GL_PALETTE8_RGBA8_OES;break;case PALETTE8_R5_G6_B5:mCompressionFormat=GL_PALETTE8_R5_G6_B5_OES;break;case PALETTE8_RGBA4:mCompressionFormat=GL_PALETTE8_RGBA4_OES;break;case PALETTE8_RGB5_A1:mCompressionFormat=GL_PALETTE8_RGB5_A1_OES;break;}}  }
class C{  public u addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public void addDefaultHistory(S source,S target){  this.historyData.add(new HistoryData<S,E>(source,target));}  }
class C{  public void testTruncateMiddle(){  OffsetIndex index=new DelegatingOffsetIndex(HeapBuffer.allocate(1024 * 8));  index.index(0,0);  index.index(1,10);  index.index(2,20);  index.index(3,30);  index.index(4,40);  assertEquals(index.truncate(2),30);}  }
class C{  public void testConfigFileProperty() throws Exception {  File configHome=new File(configuration.getHome());  assertTrue("Could not find a proper configuration home.",configHome.exists() && configHome.isDirectory());  File existingFile=createFile(configHome,"existingfile","helloworld");  assertEquals("helloworld",readFile(existingFile));  String fileName="testConfigfile";  String fileContents="Hello @message@ ";  File file=createFile(configFileDirectory,fileName,fileContents);  FileConfig configFile=new FileConfig();  configFile.setFile(getAbsolutePath(file));  configFile.setToFile("existingfile");  configFile.setOverwrite(false);  configFile.setConfigfile(false);  configuration.setProperty("message","world");  configuration.setConfigFileProperty(configFile);  configuration.doConfigure(null);  File copiedFile=new File(configuration.getHome() + "/existingfile");  assertTrue("Cannot find the expected copied file",copiedFile.exists());  assertEquals("Hello world ",readFile(copiedFile));}  }
class C{  private static void logStackTraceInfo(LEVEL level,String curTag){  StackTraceElement[] trace=Thread.currentThread().getStackTrace();  String space="";  int stackOffset=getStackOffset(trace) + methodOffset;  if (methodCount + stackOffset > trace.length) {    methodCount=trace.length - stackOffset - 1;  }  for (int i=methodCount; i > 0; i--) {    int stackIndex=i + stackOffset;    if (stackIndex >= trace.length) {      continue;    }    StringBuilder builder=new StringBuilder();    builder.append(space).append(getSimpleClassName(trace[stackIndex].getClassName())).append(".").append(trace[stackIndex].getMethodName()).append(" ").append(" (").append(trace[stackIndex].getFileName()).append(":").append(trace[stackIndex].getLineNumber()).append(")");    space+="...";    String msg=builder.toString();    if (isLog2ConsoleEnabled) {      log2Console(level,curTag,msg,null);    }    if (isLog2FileEnabled) {      log2File(level,curTag,msg,null);    }  }}  }
class C{  @HLEFunction(nid=0xE1CD9561,version=500,checkInsideInterrupt=true) public int __sceSasSetVoicePCM(int sasCore,int voice,TPointer pcmAddr,int size,int loopmode){  if (size <= 0 || size > 0x10000) {    log.warn(String.format("__sceSasSetVoicePCM invalid size 0x%08X",size));    return SceKernelErrors.ERROR_SAS_INVALID_SIZE;  }  checkSasAndVoiceHandlesGood(sasCore,voice);  voices[voice].setPCM(pcmAddr.getAddress(),size);  voices[voice].setLoopMode(loopmode);  return 0;}  }
class C{  protected void initializeLM(){switch (type) {case "kenlm":    this.languageModel=new KenLM(ngramOrder,path);  break;case "berkeleylm":this.languageModel=new LMGrammarBerkeley(ngramOrder,path);break;default :String msg=String.format("* FATAL: Invalid backend lm_type '%s' for LanguageModel",type) + "*        Permissible values for 'lm_type' are 'kenlm' and 'berkeleylm'";throw new RuntimeException(msg);}Vocabulary.registerLanguageModel(this.languageModel);Vocabulary.id(config.default_non_terminal);startSymbolId=Vocabulary.id(Vocabulary.START_SYM);}  }
class C{  private void writeTwoStateSiteModel(XMLWriter writer,PartitionSubstitutionModel model){  String prefix=model.getPrefix();  writer.writeComment("site model");  writer.writeOpenTag(GammaSiteModel.SITE_MODEL,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,prefix + SiteModel.SITE_MODEL)});  writer.writeOpenTag(GammaSiteModelParser.SUBSTITUTION_MODEL);switch (model.getBinarySubstitutionModel()) {case BIN_SIMPLE:    writer.writeIDref(BinarySubstitutionModelParser.BINARY_SUBSTITUTION_MODEL,prefix + "bsimple");  break;case BIN_COVARION:writer.writeIDref(BinaryCovarionModelParser.COVARION_MODEL,prefix + "bcov");break;case BIN_DOLLO:break;default :throw new IllegalArgumentException("Unknown substitution model.");}writer.writeCloseTag(GammaSiteModelParser.SUBSTITUTION_MODEL);writeParameter(GammaSiteModelParser.RELATIVE_RATE,"mu",model,writer);if (model.isGammaHetero()) {writer.writeOpenTag(GammaSiteModelParser.GAMMA_SHAPE,new Attribute.Default<String>(GammaSiteModelParser.GAMMA_CATEGORIES,"" + model.getGammaCategories()));writeParameter(prefix + "alpha",model,writer);writer.writeCloseTag(GammaSiteModelParser.GAMMA_SHAPE);}if (model.isInvarHetero()) {writeParameter(GammaSiteModelParser.PROPORTION_INVARIANT,"pInv",model,writer);}writer.writeCloseTag(GammaSiteModel.SITE_MODEL);}  }
class C{  public DGenerateKeyPair(JFrame parent,KeyStoreType keyStoreType,KeyPairType keyPairType,int keyPairSize){  super(parent,res.getString("DGenerateKeyPair.Title"),Dialog.ModalityType.DOCUMENT_MODAL);  this.keyPairType=keyPairType;  this.keyPairSize=keyPairSize;  this.keyStoreType=keyStoreType;  initComponents();}  }
class C{  public Tab(){  initialize();}  }
class C{  public void onDrag(MotionEvent event,Interaction iact){}  }
class C{  public boolean isPersistable(){  return getBatchId() >= 0;}  }
class C{  private static void textDump(PrintWriter pw,GTSDecoderIterator iter,long now,long timespan,boolean raw,boolean dedup,boolean signed,boolean showAttributes,AtomicReference<Metadata> lastMeta,AtomicLong lastCount) throws IOException {  String name=null;  Map<String,String> labels=null;  StringBuilder sb=new StringBuilder();  Metadata lastMetadata=lastMeta.get();  long currentCount=lastCount.get();  while (iter.hasNext()) {    GTSDecoder decoder=iter.next();    if (!decoder.next()) {      continue;    }    long toDecodeCount=Long.MAX_VALUE;    if (timespan < 0) {      Metadata meta=decoder.getMetadata();      if (!meta.equals(lastMetadata)) {        lastMetadata=meta;        currentCount=0;      }      toDecodeCount=Math.max(0,-timespan - currentCount);    }    Map<String,String> lbls=decoder.getLabels();    boolean displayName=false;    if (null == name || (!name.equals(decoder.getName()) || !labels.equals(lbls))) {      displayName=true;      name=decoder.getName();      labels=lbls;      sb.setLength(0);      GTSHelper.encodeName(sb,name);      sb.append("{");      boolean first=true;      for (      Entry<String,String> entry : lbls.entrySet()) {        if (!signed) {          if (Constants.PRODUCER_LABEL.equals(entry.getKey())) {            continue;          }          if (Constants.OWNER_LABEL.equals(entry.getKey())) {            continue;          }        }        if (!first) {          sb.append(",");        }        GTSHelper.encodeName(sb,entry.getKey());        sb.append("=");        GTSHelper.encodeName(sb,entry.getValue());        first=false;      }      sb.append("}");      if (showAttributes) {        Metadata meta=decoder.getMetadata();        if (meta.getAttributesSize() > 0) {          GTSHelper.labelsToString(sb,meta.getAttributes());        } else {          sb.append("{}");        }      }    }    long timestamp=0L;    long location=GeoTimeSerie.NO_LOCATION;    long elevation=GeoTimeSerie.NO_ELEVATION;    Object value=null;    boolean dup=true;    long decoded=0;    do {      if (toDecodeCount == decoded) {        break;      }      long newTimestamp=decoder.getTimestamp();      if (newTimestamp > now || (timespan >= 0 && newTimestamp <= (now - timespan))) {        continue;      }      long newLocation=decoder.getLocation();      long newElevation=decoder.getElevation();      Object newValue=decoder.getValue();      dup=true;      if (dedup) {        if (location != newLocation || elevation != newElevation) {          dup=false;        } else {          if (null == newValue) {            dup=false;          } else           if (newValue instanceof Number) {            if (!((Number)newValue).equals(value)) {              dup=false;            }          } else           if (newValue instanceof String) {            if (!((String)newValue).equals(value)) {              dup=false;            }          } else           if (newValue instanceof Boolean) {            if (!((Boolean)newValue).equals(value)) {              dup=false;            }          }        }      }      decoded++;      location=newLocation;      elevation=newElevation;      timestamp=newTimestamp;      value=newValue;      if (raw) {        if (!dedup || !dup) {          pw.println(GTSHelper.tickToString(sb,timestamp,location,elevation,value));        }      } else {        if (displayName) {          pw.println(GTSHelper.tickToString(sb,decoder.getTimestamp(),decoder.getLocation(),decoder.getElevation(),decoder.getValue()));          displayName=false;          dup=false;        } else {          if (!dedup || !dup) {            pw.print("=");            pw.println(GTSHelper.tickToString(timestamp,location,elevation,value));          }        }      }    } while (decoder.next());    if (timespan < 0) {      currentCount+=decoded;    }    if (dedup && dup) {      if (raw) {        pw.println(GTSHelper.tickToString(sb,timestamp,location,elevation,value));      } else {        pw.print("=");        pw.println(GTSHelper.tickToString(timestamp,location,elevation,value));      }    }    if (displayName) {      name=null;    }  }  lastMeta.set(lastMetadata);  lastCount.set(currentCount);}  }
class C{  public static Long toRef(long l){  return Long.valueOf(l);}  }
class C{  public Vset check(Environment env,Context ctx,Vset vset,Hashtable exp){  return checkValue(env,ctx,vset,exp);}  }
class C{  protected void addImports(Stylesheet stylesheet,boolean addToList,Vector importList){  int n=stylesheet.getImportCount();  if (n > 0) {    for (int i=0; i < n; i++) {      Stylesheet imported=stylesheet.getImport(i);      addImports(imported,true,importList);    }  }  n=stylesheet.getIncludeCount();  if (n > 0) {    for (int i=0; i < n; i++) {      Stylesheet included=stylesheet.getInclude(i);      addImports(included,false,importList);    }  }  if (addToList)   importList.addElement(stylesheet);}  }
class C{  public static InfiniteScrollAdapter createInfiniteScroll(Container cont,Runnable fetchMore){  return createInfiniteScroll(cont,fetchMore,true);}  }
class C{  public static void storeStack(Throwable th,int currentStackFrame){  Thread t=Thread.currentThread();  if (t.getClass() == CODE) {    CodenameOneThread c=(CodenameOneThread)t;    c.storeStackForException(th,currentStackFrame);  }}  }
class C{  @HLEFunction(nid=0x0B2228E9,version=150) public int sceNetAdhocGameModeDeleteReplica(int id){  checkInitialized();  for (  GameModeArea gameModeArea : replicaGameModeAreas) {    if (gameModeArea.id == id) {      replicaGameModeAreas.remove(gameModeArea);      break;    }  }  if (replicaGameModeAreas.size() <= 0 && masterGameModeArea == null) {    stopGameMode();  }  return 0;}  }
class C{  public PnSignalingParams(){  this.iceServers=defaultIceServers();  this.pcConstraints=defaultPcConstraints();  this.videoConstraints=defaultVideoConstraints();  this.audioConstraints=defaultAudioConstraints();}  }
class C{  public Enumeration<?> propertyNames(){  Hashtable<String,Object> h=new Hashtable<>();  enumerate(h);  return h.keys();}  }
class C{  public int correctIDColumnScale(String vendorName,String columnName,String dataType,int scale){  int i=scale;  if (columnName.toUpperCase().endsWith("_ID")) {    int dataTypeID=getDataTypeID(vendorName,dataType);    if (dataTypeID >= NUMERIC && dataTypeID <= NUMBER)     i=0;  }  return i;}  }
class C{  public void calculateAttributeVectors(){  attributeVectorX=new double[values.size()];  attributeVectorY=new double[values.size()];  double angle;  double radius=1.0f;  int angleInt;  double x=0.0f, y=0.0f;  for (int dimindex=0; dimindex < values.size(); dimindex++) {    angleInt=(int)angles[dimindex];    angle=angles[dimindex];    if (angleInt / 90 == 0) {      x=sin(angle) * radius;      y=sin(90.0f - angle) * radius;    } else     if (angleInt / 90 == 1) {      angle=angle - 90.0f;      x=sin(90.0f - angle) * radius;      y=sin(angle) * radius;      y=-y;    } else     if (angleInt / 90 == 2) {      angle=angle - 180.0f;      x=sin(angle) * radius;      y=sin(90.0f - angle) * radius;      x=-x;      y=-y;    } else     if (angleInt / 90 == 3) {      angle=angle - 270.0f;      x=sin(90.0f - angle) * radius;      y=sin(angle) * radius;      x=-x;    }    attributeVectorX[dimindex]=x;    attributeVectorY[dimindex]=y;  }}  }
class C{  private void addPointToViewNode(int x,int y,int lastTimeSec,int timeSec,int minDepth){  if (status == null) {    TAssert.fail("Why am I unknown if everything is clean? " + this);  }  AreaPanel ap=ap();  if (!ap.containsPoint(x,y))   return;  if (status == VNStatus.EMPTY) {    if (stBox.maxZ < lastTimeSec)     return;    status=VNStatus.SET;    overlappingRange=new int[]{Math.max(stBox.minZ,lastTimeSec),Math.min(stBox.maxZ,timeSec)};  } else   overlappingRange[1]=Math.min(stBox.maxZ,timeSec);  if (ap.getDepth() != minDepth) {    if (children == null)     children=new ViewNode[AreaPanel.NUM_SUB_PANELS];    for (int i=0; i < children.length; i++) {      AreaPanel childAp=ap.getSubAreaPanel(i);      if (childAp == null)       continue;      if (childAp != null) {        if (children[i] == null) {          children[i]=new ViewNode();          children[i].status=VNStatus.EMPTY;          children[i].stBox=stBox;          children[i].apId=childAp.id;        }        if (childAp.outsideOfXY(stBox) || childAp.getEndTimeSec() <= stBox.minZ || childAp.getStartTimeSec() >= stBox.maxZ)         continue;        children[i].addPointToViewNode(x,y,lastTimeSec,timeSec,minDepth);      }    }    return;  }}  }
class C{  public static TagInfo parseTagFileDirectives(ParserController pc,String name,String path,TagLibraryInfo tagLibInfo) throws JasperException {  ErrorDispatcher err=pc.getCompiler().getErrorDispatcher();  Node.Nodes page=null;  try {    page=pc.parseTagFileDirectives(path);  } catch (  FileNotFoundException e) {    err.jspError("jsp.error.file.not.found",path);  }catch (  IOException e) {    err.jspError("jsp.error.file.not.found",path);  }  TagFileDirectiveVisitor tagFileVisitor=new TagFileDirectiveVisitor(pc.getCompiler(),tagLibInfo,name,path);  page.visit(tagFileVisitor);  tagFileVisitor.postCheck();  return tagFileVisitor.getTagInfo();}  }
class C{  public static GraphRequest newStatusUpdateRequest(AccessToken accessToken,String message,JSONObject place,List<JSONObject> tags,Callback callback){  List<String> tagIds=null;  if (tags != null) {    tagIds=new ArrayList<String>(tags.size());    for (    JSONObject tag : tags) {      tagIds.add(tag.optString("id"));    }  }  String placeId=place == null ? null : place.optString("id");  return newStatusUpdateRequest(accessToken,message,placeId,tagIds,callback);}  }
class C{  public int size(){  return (tail - head) & (elements.length - 1);}  }
class C{  public void init(int WindowNo,FormFrame frame){  m_WindowNo=WindowNo;  m_frame=frame;  log.fine("WindowNo=" + WindowNo);  try {    loadPanel();    frame.getContentPane().add(loadPanel,BorderLayout.NORTH);    this.setPreferredSize(new Dimension(500,500));    frame.getContentPane().add(this,BorderLayout.CENTER);  } catch (  Exception e) {    log.log(Level.SEVERE,"init",e);  }}  }
class C{  public JBossExistingLocalConfigurationCapability(){  this.propertySupportMap.put(GeneralPropertySet.RMI_PORT,Boolean.TRUE);  this.propertySupportMap.put(GeneralPropertySet.PROTOCOL,Boolean.TRUE);  this.propertySupportMap.put(ServletPropertySet.PORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.ALTERNATIVE_MODULES_DIR,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.USERNAME,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.PASSWORD,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.CONFIGURATION,Boolean.FALSE);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(5);  newVector.addElement(new Option("\tIf set, distance is interpreted as branch length\n" + "\totherwise it is node height.","B",0,"-B"));  newVector.addElement(new Option("\tnumber of clusters","N",1,"-N <Nr Of Clusters>"));  newVector.addElement(new Option("\tFlag to indicate the cluster should be printed in Newick format.","P",0,"-P"));  newVector.addElement(new Option("Link type (Single, Complete, Average, Mean, Centroid, Ward, Adjusted complete, Neighbor joining)","L",1,"-L [SINGLE|COMPLETE|AVERAGE|MEAN|CENTROID|WARD|ADJCOMPLETE|NEIGHBOR_JOINING]"));  newVector.add(new Option("\tDistance function to use.\n" + "\t(default: weka.core.EuclideanDistance)","A",1,"-A <classname and options>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public EpsilonBoxDominanceArchive(double epsilon,Iterable<? extends Solution> iterable){  super(new EpsilonBoxDominanceComparator(epsilon),iterable);}  }
class C{  public void testNothingAnalyzes() throws Exception {  RandomIndexWriter iw=new RandomIndexWriter(random(),dir,indexAnalyzer);  Document doc=new Document();  doc.add(new Field("body"," ",fieldType));  doc.add(newTextField("id","id",Field.Store.YES));  iw.addDocument(doc);  doc=new Document();  doc.add(new Field("body","something",fieldType));  iw.addDocument(doc);  IndexReader ir=iw.getReader();  iw.close();  IndexSearcher searcher=newSearcher(ir);  UnifiedHighlighter highlighter=new UnifiedHighlighter(searcher,indexAnalyzer);  int docID=searcher.search(new TermQuery(new Term("id","id")),1).scoreDocs[0].doc;  Query query=new PrefixQuery(new Term("body","nonexistent"));  int[] docIDs=new int[1];  docIDs[0]=docID;  String snippets[]=highlighter.highlightFields(new String[]{"body"},query,docIDs,new int[]{2}).get("body");  assertEquals(1,snippets.length);  assertEquals(" ",snippets[0]);  ir.close();}  }
class C{  public void generateBlock(World world,BlockPos pos){  world.setBlockState(pos,this.getDefaultState().withProperty(COLOR,world.rand.nextInt(COLORS.length / 2)),2);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.201 -0500",hash_original_method="732AD0D6CB11A9ADE203372D23E48872",hash_generated_method="D02CEE4CBF36DAA6F8F680D2D5C12B04") public void moveTo(float x,float y){  addTaint(x + y);}  }
class C{  @Override public boolean add(E e){  ConcurrentMap<E,Object> m=(ConcurrentMap<E,Object>)map;  return m.putIfAbsent(e,e) == null;}  }
class C{  public static byte[] randomBytes(int len){  return random.randomBytes(len);}  }
class C{  @Nullable private PsiMethod createToStringMethod(Collection<PsiMember> selectedMembers,ConflictResolutionPolicy policy,Map<String,String> params,TemplateResource template) throws IncorrectOperationException, GenerateCodeException {  String body=GenerationUtil.velocityGenerateCode(clazz,selectedMembers,params,template.getMethodBody(),config.getSortElements(),config.isUseFullyQualifiedName());  if (logger.isDebugEnabled())   logger.debug("Method body generated from Velocity:\n" + body);  body=StringUtil.convertLineSeparators(body);  final JVMElementFactory topLevelFactory=JVMElementFactories.getFactory(clazz.getLanguage(),clazz.getProject());  if (topLevelFactory == null) {    return null;  }  PsiMethod newMethod;  try {    newMethod=topLevelFactory.createMethodFromText(template.getMethodSignature() + " { " + body+ " }",clazz);    CodeStyleManager.getInstance(clazz.getProject()).reformat(newMethod);  } catch (  IncorrectOperationException ignore) {    HintManager.getInstance().showErrorHint(editor,"'toString()' method could not be created from template '" + template.getFileName() + '\'');    return null;  }  PsiMethod existingMethod=clazz.findMethodBySignature(newMethod,false);  PsiMethod toStringMethod=policy.applyMethod(clazz,existingMethod,newMethod,editor);  if (toStringMethod == null) {    return null;  }  if (hasOverrideAnnotation) {    toStringMethod.getModifierList().addAnnotation("java.lang.Override");  }  String existingJavaDoc=params.get("existingJavaDoc");  String newJavaDoc=template.getJavaDoc();  if (existingJavaDoc != null || newJavaDoc != null) {    newJavaDoc=GenerationUtil.velocityGenerateCode(clazz,selectedMembers,params,newJavaDoc,config.getSortElements(),config.isUseFullyQualifiedName());    if (logger.isDebugEnabled())     logger.debug("JavaDoc body generated from Velocity:\n" + newJavaDoc);    GenerationUtil.applyJavaDoc(toStringMethod,existingJavaDoc,newJavaDoc);  }  return toStringMethod;}  }
class C{  private void removeAnnotationItem(final Annotation annotation){  final MarkerRegistration marker=this.markers.get(annotation);  if (marker != null) {    marker.clearMark();  } else {    Log.warn(InlineAnnotationRenderer.class,"Inline marker with no handle: " + annotation);  }}  }
class C{  public void removeListener(final ICriteriumTreeListener listener){  m_listeners.removeListener(listener);}  }
class C{  public void waitForMessages() throws InterruptedException {  ActiveMQTestBase.waitForLatch(latch);}  }
class C{  public static Intent clearActivityStack(Intent i){  i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TASK| Intent.FLAG_ACTIVITY_NEW_TASK);  return i;}  }
class C{  @Override public void add(final InputStream input,final String baseURI,final RDFFormat format,final Resource... c) throws IOException, RDFParseException, RepositoryException {  final AddOp op=new AddOp(input,format);  add(op,c);}  }
class C{  @VisibleForTesting protected void migrateResourceToNewExtensionVersion(Resource r,Extension current,Extension newer){  Preconditions.checkState(current.getRowType().equalsIgnoreCase(newer.getRowType()));  Preconditions.checkState(!r.getMappings(current.getRowType()).isEmpty());  log.info("Migrating " + r.getShortname() + " mappings to extension "+ current.getRowType()+ " to latest extension version");  Set<ExtensionProperty> deprecated=Sets.newHashSet();  Set<ExtensionProperty> vocabulariesRemoved=Sets.newHashSet();  Set<ExtensionProperty> vocabulariesUnchanged=Sets.newHashSet();  Set<ExtensionProperty> vocabulariesUpdated=Sets.newHashSet();  for (  ExtensionProperty property : current.getProperties()) {    if (!newer.hasProperty(property.qualifiedName())) {      deprecated.add(property);    } else {      if (property.getVocabulary() != null) {        Vocabulary v1=property.getVocabulary();        Vocabulary v2=newer.getProperty(property.qualifiedName()).getVocabulary();        if (v2 == null) {          vocabulariesRemoved.add(property);        } else         if (v1.getUriString().equalsIgnoreCase(v2.getUriString())) {          vocabulariesUnchanged.add(property);        } else         if (!v1.getUriString().equalsIgnoreCase(v2.getUriString())) {          vocabulariesUpdated.add(property);        }      }    }  }  log.debug(deprecated.size() + " properties have been deprecated in the newer version");  log.debug(vocabulariesRemoved.size() + " properties in the newer version of extension no longer use a vocabulary");  log.debug(vocabulariesUnchanged.size() + " properties in the newer version of extension use the same vocabulary");  log.debug(vocabulariesUpdated.size() + " properties in the newer version of extension use a newer vocabulary");  Set<ExtensionProperty> added=Sets.newHashSet();  for (  ExtensionProperty property : newer.getProperties()) {    if (!current.hasProperty(property.qualifiedName())) {      added.add(property);    }  }  log.debug("Newer version of extension has " + added.size() + " new properties");  for (  ExtensionMapping extensionMapping : r.getMappings(current.getRowType())) {    migrateExtensionMapping(extensionMapping,newer,deprecated);  }}  }
class C{  protected void updateWeightsOnly() throws IllegalArgumentException {  Iterator<Map.Entry<Double,Double>> itr=m_TM.entrySet().iterator();  int j=1;  m_Weights=new double[m_Boundaries.length - 1];  while (itr.hasNext()) {    Map.Entry<Double,Double> entry=itr.next();    double value=entry.getKey();    double weight=entry.getValue();    if ((value < m_Boundaries[0]) || (value > m_Boundaries[m_Boundaries.length - 1])) {      throw new IllegalArgumentException("Out-of-range value during weight update");    }    while (value > m_Boundaries[j]) {      j++;    }    m_Weights[j - 1]+=weight;  }}  }
class C{  public static AnimatablePaintValue createColorPaintValue(AnimationTarget target,float r,float g,float b){  AnimatablePaintValue v=new AnimatablePaintValue(target,r,g,b);  v.paintType=PAINT_COLOR;  return v;}  }
class C{  private BufferedImage toBufferedImage(final Image image){  if (image instanceof BufferedImage) {    return (BufferedImage)image;  }  if (image instanceof VolatileImage) {    VolatileImage volatileImage=(VolatileImage)image;    return volatileImage.getSnapshot();  }  GraphicsEnvironment graphicsEnvironment=GraphicsEnvironment.getLocalGraphicsEnvironment();  GraphicsDevice graphicsDevice=graphicsEnvironment.getDefaultScreenDevice();  GraphicsConfiguration graphicsConfiguration=graphicsDevice.getDefaultConfiguration();  BufferedImage bufferedImage=graphicsConfiguration.createCompatibleImage(image.getWidth(null),image.getHeight(null));  Graphics2D g=bufferedImage.createGraphics();  g.drawImage(image,0,0,null);  g.dispose();  return bufferedImage;}  }
class C{  public DelegatingSocket(){  this((Socket)null);}  }
class C{  public static boolean parseNestedSQString(PsiBuilder b,int l){  IElementType tokenType;  if (b.getTokenType() == QUOTE_SINGLE) {    PsiBuilder.Marker m=b.mark();    b.advanceLexer();    m.collapse(QUOTE_SINGLE_OPEN);    m=b.mark();    while ((tokenType=b.getTokenType()) != null) {      if (CLOSE_QUOTES.contains(tokenType)) {        m.drop();        return false;      } else       if (tokenType == QUOTE_SINGLE) {        m.collapse(STRING_CONTENT);        m=b.mark();        b.advanceLexer();        m.collapse(QUOTE_SINGLE_CLOSE);        return true;      }      b.advanceLexer();    }    m.drop();  }  return false;}  }
class C{  public GeneralizedSemPmParamsEditor(GeneralizedSemPm semPm,Map<Object,EditorWindow> launchedEditors){  this.semPm=semPm;  this.launchedEditors=launchedEditors;  setLayout(new BorderLayout());  JScrollPane scroll=new JScrollPane(initialValuesPane());  scroll.setPreferredSize(new Dimension(450,450));  add(scroll,BorderLayout.CENTER);  refreshLabels();}  }
class C{  static void writeShort(final byte[] b,final int index,final int s){  b[index]=(byte)(s >>> 8);  b[index + 1]=(byte)s;}  }
class C{  public static boolean checkLastModValidators(final HttpServletRequest req,final HttpServletResponse resp,final long lastMod){  try {    final long modifiedSince=req.getDateHeader("If-Modified-Since");    if (modifiedSince != -1L && lastMod <= modifiedSince) {      sendNotModified(resp);      return true;    }    final long unmodifiedSince=req.getDateHeader("If-Unmodified-Since");    if (unmodifiedSince != -1L && lastMod > unmodifiedSince) {      sendPreconditionFailed(resp);      return true;    }  } catch (  IllegalArgumentException iae) {  }  return false;}  }
class C{  public ByteColumn(int nrows,int capacity,byte defaultValue){  super(byte.class,new Byte(defaultValue));  if (capacity < nrows) {    throw new IllegalArgumentException("Capacity value can not be less than the row count.");  }  m_values=new byte[capacity];  Arrays.fill(m_values,defaultValue);  m_size=nrows;}  }
class C{  private int fibonacci(int n){  if (n <= 1)   return n; else   return fibonacci(n - 1) + fibonacci(n - 2);}  }
class C{  public static byte[] hexStringToByte(String hexString){  if ((hexString.length() & 1) == 1)   hexString='0' + hexString;  byte[] tmp=new byte[hexString.length() / 2];  for (int i=0; i < tmp.length; ++i) {    String hexByte=hexString.substring(i * 2,i * 2 + 2);    tmp[i]=(byte)Integer.parseInt(hexByte,16);  }  return tmp;}  }
class C{  private static byte[] mapAction(String fbAction){  return ACTION_MAPPING.get(fbAction);}  }
class C{  public boolean isGrowable(){  return growable;}  }
class C{  private void releaseReadLock(){  assert !SwingUtilities.isEventDispatchThread();  Document document=textComponentToPrint.getDocument();  if (document instanceof AbstractDocument) {    try {      ((AbstractDocument)document).readUnlock();      needReadLock=true;    } catch (    Error ignore) {    }  }}  }
class C{  private MetadataGeneratorParameters buildMetadataGeneratorParameters(){  final MetadataGeneratorParameters parameters=new MetadataGeneratorParameters();  if (args.encryptionCert != null) {    parameters.setEncryptionCert(args.encryptionCert);  }  if (args.signingCert != null) {    parameters.setSigningCert(args.signingCert);  }  if (args.backChannelCert != null) {    parameters.setBackchannelCert(args.backChannelCert);  }  return parameters;}  }
class C{  public void removeSourceDir(int num){  srcDirList.remove(num);  sourceFinder=new SourceFinder(this);  isModified=true;}  }
class C{  public void flush(){  for (  P object : map.values()) {    expirePage(object);  }  map.clear();}  }
class C{  private static void decodeEdifactSegment(BitSource bits,StringBuilder result){  do {    if (bits.available() <= 16) {      return;    }    for (int i=0; i < 4; i++) {      int edifactValue=bits.readBits(6);      if (edifactValue == 0x1F) {        int bitsLeft=8 - bits.getBitOffset();        if (bitsLeft != 8) {          bits.readBits(bitsLeft);        }        return;      }      if ((edifactValue & 0x20) == 0) {        edifactValue|=0x40;      }      result.append((char)edifactValue);    }  } while (bits.available() > 0);}  }
class C{  public void togglePlayback() throws CastException, TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  boolean isPlaying=isRemoteMediaPlaying();  if (isPlaying) {    pause();  } else {    if (mState == MediaStatus.PLAYER_STATE_IDLE && mIdleReason == MediaStatus.IDLE_REASON_FINISHED) {      loadMedia(getRemoteMediaInformation(),true,0);    } else {      play();    }  }}  }
class C{  private void actionDocument(){  boolean doc=selDocument.isSelected();  selTable.setEnabled(doc);  selRecord.setEnabled(doc);  selDateFrom.setReadWrite(!doc);  selDateTo.setReadWrite(!doc);  selOrg.setEnabled(!doc);  selAcct.setEnabled(!doc);  sel1.setEnabled(!doc);  sel2.setEnabled(!doc);  sel3.setEnabled(!doc);  sel4.setEnabled(!doc);  sel5.setEnabled(!doc);  sel6.setEnabled(!doc);  sel7.setEnabled(!doc);  sel8.setEnabled(!doc);}  }
class C{  void removeCollector(CollectorThread c){synchronized (scheduler) {    collectors.remove(c);    wakeScheduler();  }}  }
class C{  @Override public InputStream openResource(String resource) throws IOException {  Path inConfigDir=getInstancePath().resolve("conf").resolve(resource);  if (Files.exists(inConfigDir) && Files.isReadable(inConfigDir)) {    return Files.newInputStream(checkPathIsSafe(inConfigDir));  }  Path inInstanceDir=getInstancePath().resolve(resource);  if (Files.exists(inInstanceDir) && Files.isReadable(inInstanceDir)) {    return Files.newInputStream(checkPathIsSafe(inInstanceDir));  }  InputStream is=classLoader.getResourceAsStream(resource.replace(File.separatorChar,'/'));  if (is == null && System.getProperty("jetty.testMode") != null) {    is=classLoader.getResourceAsStream(("conf/" + resource).replace(File.separatorChar,'/'));  }  if (is == null) {    throw new SolrResourceNotFoundException("Can't find resource '" + resource + "' in classpath or '"+ instanceDir+ "'");  }  return is;}  }
class C{  public OMPoint(int x,int y){  this(x,y,DEFAULT_RADIUS);}  }
class C{  public boolean isSelectBehindEnabled(){  return isSelectBehindEnabled;}  }
class C{  public Complex(double a,double b){  this.a=a;  this.b=b;}  }
class C{  public static V1 local(){  V1 v=new V1();  v.N.sendToLocalView(true);  return v;}  }
class C{  public Operation(DefaultValueCollector collector,DefinedMethod definedMethod,String className){  this.definedMethod=definedMethod;  this.packageDec=new PackageDeclaration(new NameExpr("edu.wpi.grip.generated." + className));  this.operationParams=this.definedMethod.getFinalizedParamTypes(collector);  this.socketHintDeclarationCollection=new SocketHintDeclarationCollection(collector,this.operationParams);  this.javadocComment=new JavadocComment(" Operation to call " + "{@link " + className + "#"+ definedMethod.getMethodName()+ "} ");}  }
class C{  protected Node parentNode(Node n){  if (n == root) {    return null;  }  Node result=n;  for (; ; ) {    result=result.getParentNode();    if (result == null) {      return null;    }    if ((whatToShow & (1 << result.getNodeType() - 1)) != 0) {      if (filter == null || filter.acceptNode(result) == NodeFilter.FILTER_ACCEPT) {        return result;      }    }  }}  }
class C{  private static Class<?> appBaseClass(){  try {    return Class.forName("de.lmu.ifi.dbs.elki.application.AbstractApplication");  } catch (  ClassNotFoundException e) {    return null;  }}  }
class C{  public static double insertRandom(Map61B<String,Integer> map61B,int N,int L){  Stopwatch sw=new Stopwatch();  String s="cat";  for (int i=0; i < N; i++) {    s=StringUtils.randomString(L);    map61B.put(s,new Integer(i));  }  return sw.elapsedTime();}  }
class C{  public static void main(String[] argv){  runClassifier(new OneR(),argv);}  }
class C{  private void buildInstruction(){  final Color color=new Color(Display.getCurrent(),35,107,178);  SWTGraphicUtil.addDisposer(this,color);  this.instruction=new Label(this,SWT.NONE);  this.instruction.setForeground(color);  this.instruction.setLayoutData(new GridData(GridData.BEGINNING,GridData.BEGINNING,false,false));}  }
class C{  public VcpcAltRunner(Graph graph,Parameters params){  super(graph,params);}  }
class C{  private void purgeClasses(){  try {    ClassLoader prevCl=Thread.currentThread().getContextClassLoader();    ClassLoader urlCl=URLClassLoader.newInstance(new URL[]{new URL("file:.")},prevCl);    Thread.currentThread().setContextClassLoader(urlCl);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  protected void renderBooleanValue(final UIComponent component,final ResponseWriter writer,final String attributeName) throws IOException {  if (component.getAttributes().get(attributeName) != null && Boolean.valueOf(component.getAttributes().get(attributeName).toString())) {    writer.writeAttribute(attributeName,true,attributeName);  }}  }
class C{  protected PreparedScript(Program prog,String[] inputs,String[] outputs){  _prog=prog;  _vars=new LocalVariableMap();  _inVarnames=new HashSet<String>();  Collections.addAll(_inVarnames,inputs);  _outVarnames=new HashSet<String>();  Collections.addAll(_outVarnames,outputs);  _inVarReuse=new HashMap<String,Data>();}  }
class C{  public SymbolGraph(String filename,String delimiter){  st=new ST<String,Integer>();  In in=new In(filename);  while (!in.isEmpty()) {    String[] a=in.readLine().split(delimiter);    for (int i=0; i < a.length; i++) {      if (!st.contains(a[i]))       st.put(a[i],st.size());    }  }  StdOut.println("Done reading " + filename);  keys=new String[st.size()];  for (  String name : st.keys()) {    keys[st.get(name)]=name;  }  graph=new Graph(st.size());  in=new In(filename);  while (in.hasNextLine()) {    String[] a=in.readLine().split(delimiter);    int v=st.get(a[0]);    for (int i=1; i < a.length; i++) {      int w=st.get(a[i]);      graph.addEdge(v,w);    }  }}  }
class C{  public void googleJavaFormat(String version){  customLazy(GoogleJavaFormat.NAME,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.722 -0400",hash_original_method="5DFB5D6899D7E24F024F31AED4C1F9EE",hash_generated_method="B67B4C52312DC41272A94E5EAE90D577") public void fatal(Object message){}  }
class C{  public HighlightedMessages(MainGui owner,StyleServer styleServer,String title,String label,ContextMenuListener contextMenuListener){  super(owner);  this.title=title;  this.label=label;  this.contextMenuListener=contextMenuListener;  updateTitle();  this.addComponentListener(new MyVisibleListener());  messages=new TextPane(owner,styleServer);  messages.setContextMenuListener(new MyContextMenuListener());  JScrollPane scroll=new JScrollPane(messages);  messages.setScrollPane(scroll);  add(scroll);  setPreferredSize(new Dimension(400,300));  pack();}  }
class C{  public static void validateSettings(BreakerSettings[] childrenSettings) throws IllegalStateException {  for (  BreakerSettings childSettings : childrenSettings) {    if (childSettings.getLimit() == -1) {      continue;    }    if (childSettings.getOverhead() < 0) {      throw new IllegalStateException("Child breaker overhead " + childSettings + " must be non-negative");    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static void openURLMac(String url) throws IOException {  Runtime.getRuntime().exec(new String[]{"open",url});}  }
class C{  public boolean isOpCode(){  return opcode > OP_PUSHDATA4;}  }
class C{  public void finish() throws IOException {}  }
class C{  @Override public boolean equals(final Object obj){  if (obj == this) {    return true;  }  if (obj instanceof Map.Entry == false) {    return false;  }  final Map.Entry<?,?> entry=(Map.Entry<?,?>)obj;  final Object entryKey=entry.getKey();  final Object entryValue=entry.getValue();  if (entryKey == null || entryValue == null) {    return false;  }  return parent.isEqualKey(entryKey,key) && parent.isEqualValue(entryValue,getValue());}  }
class C{  public byte readByte() throws IOException {  int x=in.read();  if (x < 0) {    throw new FastEOFException();  }  return (byte)x;}  }
class C{  protected AbstractColorInterpolationRable(List srcs,Map props){  super(srcs,props);}  }
class C{  public void centralizeContent(){  int measuredWidth=getMeasuredWidth();  int measuredHeight=getMeasuredHeight();  int scaledContentWidth=getScaledContentWidth();  int scaledContentHeight=getScaledContentHeight();  mContentX=0;  mContentY=0;  updateMatrixScaleRotate();}  }
class C{  public Optional<Charset> charset(){  ImmutableSet<String> charsetValues=ImmutableSet.copyOf(parameters.get(CHARSET_ATTRIBUTE));switch (charsetValues.size()) {case 0:    return Optional.absent();case 1:  return Optional.of(Charset.forName(Iterables.getOnlyElement(charsetValues)));default :throw new IllegalStateException("Multiple charset values defined: " + charsetValues);}}  }
class C{  public void compile(List<JavaFileObject> sourceFileObjects,List<String> classnames,Iterable<? extends Processor> processors){  if (processors != null && processors.iterator().hasNext())   explicitAnnotationProcessingRequested=true;  if (hasBeenUsed)   throw new AssertionError("attempt to reuse JavaCompiler");  hasBeenUsed=true;  options.put(XLINT_CUSTOM.text + "-" + LintCategory.OPTIONS.option,"true");  options.remove(XLINT_CUSTOM.text + LintCategory.OPTIONS.option);  start_msec=now();  try {    initProcessAnnotations(processors);    delegateCompiler=processAnnotations(enterTrees(stopIfError(CompileState.PARSE,parseFiles(sourceFileObjects))),classnames);    delegateCompiler.compile2();    delegateCompiler.close();    elapsed_msec=delegateCompiler.elapsed_msec;  } catch (  Abort ex) {    if (devVerbose)     ex.printStackTrace(System.err);  } finally {    if (procEnvImpl != null)     procEnvImpl.close();  }}  }
class C{  public static <T>List<T> splice(List<T> list,int index,int deleteCount,T value){  return spliceImpl(list,index,deleteCount,true,value);}  }
class C{  public void removeCertByAlias(String[] certAliases) throws KeyStoreException {  if (certAliases == null) {    return;  }  for (  String s : certAliases) {    _keyStore.deleteEntry(s);  }  return;}  }
class C{  void put(final ByteVector out){  int n=0;  int size=2;  AnnotationWriter aw=this;  AnnotationWriter last=null;  while (aw != null) {    ++n;    size+=aw.bv.length;    aw.visitEnd();    aw.prev=last;    last=aw;    aw=aw.next;  }  out.putInt(size);  out.putShort(n);  aw=last;  while (aw != null) {    out.putByteArray(aw.bv.data,0,aw.bv.length);    aw=aw.prev;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:38.041 -0500",hash_original_method="ADE744546D5EDC5F1118EE072B40943A",hash_generated_method="F912BC9FD1D619B64EE1F4B0C6A632F3") public static UUID nameUUIDFromBytes(byte[] name){  if (name == null) {    throw new NullPointerException();  }  try {    MessageDigest md=MessageDigest.getInstance("MD5");    return makeUuid(md.digest(name),3);  } catch (  NoSuchAlgorithmException e) {    throw new AssertionError(e);  }}  }
class C{  @Override public boolean useTermQueryWithQueryString(){  return true;}  }
class C{  public DrawerBuilder withSliderBackgroundDrawableRes(@DrawableRes int sliderBackgroundDrawableRes){  this.mSliderBackgroundDrawableRes=sliderBackgroundDrawableRes;  return this;}  }
class C{  public Object clone(){  ChoiceFormat other=(ChoiceFormat)super.clone();  other.choiceLimits=choiceLimits.clone();  other.choiceFormats=choiceFormats.clone();  return other;}  }
class C{  public void removeConditioningVariable(String variable){  Node node=dataSet.getVariable(variable);  if (node == target)   throw new IllegalArgumentException("The target cannot be a conditioning node.");  if (!(continuousIntervals.containsKey(node) || discreteValues.containsKey(node))) {    throw new IllegalArgumentException("Not a conditioning node: " + variable);  }  continuousIntervals.remove(node);  discreteValues.remove(node);}  }
class C{  public static void cancelNotificationsForRoomId(String accountId,String roomId){  Log.d(LOG_TAG,"cancelNotificationsForRoomId " + accountId + " - "+ roomId);  if (null != mActiveEventStreamService) {    mActiveEventStreamService.cancelNotifications(accountId,roomId);  }}  }
class C{  public boolean isMPS(){  Object oo=get_Value(COLUMNNAME_IsMPS);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void write(char[] buf,int offset,int count){  if (0 <= offset && offset <= buf.length && 0 <= count && count <= buf.length - offset) {synchronized (lock) {      this.buf.append(buf,offset,count);    }  } else {    throw new ArrayIndexOutOfBoundsException();  }}  }
class C{  @Nullable public static String readTextFileFromRawResource(@NonNull final Context context,@RawRes final int resId){  final BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(context.getResources().openRawResource(resId)));  String line;  final StringBuilder body=new StringBuilder();  try {    while ((line=bufferedReader.readLine()) != null) {      body.append(line).append('\n');    }  } catch (  IOException e) {    return null;  }  return body.toString();}  }
class C{  public ContributorsBuilder withActivityStyle(Contributors.ActivityStyle activityStyle){  this.activityStyle=activityStyle;  return this;}  }
class C{  public int _offsetToX(int line,int offset){  TokenMarker tokenMarker=getTokenMarker();  FontMetrics fm=painter.getFontMetrics();  getLineText(line,lineSegment);  int segmentOffset=lineSegment.offset;  int x=horizontalOffset;  if (tokenMarker == null) {    lineSegment.count=offset;    return x + Utilities.getTabbedTextWidth(lineSegment,fm,x,painter,0);  } else {    Token tokens;    if (painter.currentLineIndex == line && painter.currentLineTokens != null) {      tokens=painter.currentLineTokens;    } else {      painter.currentLineIndex=line;      tokens=painter.currentLineTokens=tokenMarker.markTokens(lineSegment,line);    }    Font defaultFont=painter.getFont();    SyntaxStyle[] styles=painter.getStyles();    for (; ; ) {      byte id=tokens.id;      if (id == Token.END) {        return x;      }      if (id == Token.NULL) {        fm=painter.getFontMetrics();      } else {        fm=styles[id].getFontMetrics(defaultFont);      }      int length=tokens.length;      if (offset + segmentOffset < lineSegment.offset + length) {        lineSegment.count=offset - (lineSegment.offset - segmentOffset);        return x + Utilities.getTabbedTextWidth(lineSegment,fm,x,painter,0);      } else {        lineSegment.count=length;        x+=Utilities.getTabbedTextWidth(lineSegment,fm,x,painter,0);        lineSegment.offset+=length;      }      tokens=tokens.next;    }  }}  }
class C{  public static void disableShutdownHook(){  Runtime.getRuntime().removeShutdownHook(shutdownHook);}  }
class C{  protected void update(){  XYSeriesCollection dataset=new XYSeriesCollection();  for (  int seedIndex : seedList.getSelectedIndices()) {    Accumulator accumulator=accumulators.get(seedIndex);    int index=0;    if (!accumulator.keySet().contains("Approximation Set")) {      continue;    }    while ((index < accumulator.size("NFE") - 1) && ((Integer)accumulator.get("NFE",index) < slider.getValue())) {      index++;    }    List<?> list=(List<?>)accumulator.get("Approximation Set",index);    XYSeries series=new XYSeries(localization.getString("text.seed",seedIndex + 1),false,true);    for (    Object object : list) {      Solution solution=(Solution)object;      series.add(getValue(solution,0),getValue(solution,1));    }    dataset.addSeries(series);  }  if (referenceSet != null) {    XYSeries series=new XYSeries(localization.getString("text.referenceSet"),false,true);    for (    Solution solution : referenceSet) {      series.add(getValue(solution,0),getValue(solution,1));    }    dataset.addSeries(series);  }  JFreeChart chart=ChartFactory.createScatterPlot(getTitle() + " @ " + slider.getValue()+ " NFE",(String)xAxisSelection.getSelectedItem(),(String)yAxisSelection.getSelectedItem(),dataset,PlotOrientation.VERTICAL,true,true,false);  XYPlot plot=chart.getXYPlot();  XYLineAndShapeRenderer renderer=new XYLineAndShapeRenderer(false,true);  for (int i=0; i < dataset.getSeriesCount(); i++) {    Paint paint=paintHelper.get(dataset.getSeriesKey(i));    renderer.setSeriesPaint(i,paint);  }  plot.setRenderer(renderer);  if ((initialRangeBounds == null) || (initialDomainBounds == null)) {    initialRangeBounds=plot.getRangeAxis().getRange();    initialDomainBounds=plot.getDomainAxis().getRange();  }  if (useInitialBounds.isSelected()) {    plot.getRangeAxis().setRange(initialRangeBounds);    plot.getDomainAxis().setRange(initialDomainBounds);  } else   if (useZoomBounds.isSelected()) {    if ((zoomRangeBounds == null) || (zoomDomainBounds == null)) {      zoomRangeBounds=initialRangeBounds;      zoomDomainBounds=initialDomainBounds;    }    plot.getRangeAxis().setRange(zoomRangeBounds);    plot.getDomainAxis().setRange(zoomDomainBounds);  } else   if (useReferenceSetBounds.isSelected()) {    if (referenceRangeBounds.getLength() > 0.0) {      plot.getRangeAxis().setRange(referenceRangeBounds);    }    if (referenceDomainBounds.getLength() > 0.0) {      plot.getDomainAxis().setRange(referenceDomainBounds);    }  }  boolean showBig=true;  if (showBig) {    BasicStroke dottedStroke=new BasicStroke(2f,0,2,0,new float[]{2f,2f},0);    BasicStroke normal=new BasicStroke(2f);    plot.setOutlineStroke(null);    plot.setDomainCrosshairStroke(normal);    plot.setDomainMinorGridlineStroke(normal);    plot.setRangeZeroBaselineStroke(normal);    plot.getDomainAxis().setAxisLineStroke(normal);    plot.getDomainAxis().setAxisLinePaint(Color.BLACK);    plot.getDomainAxis().setTickLabelPaint(Color.BLACK);    plot.getRangeAxis().setAxisLineStroke(normal);    plot.getRangeAxis().setAxisLinePaint(Color.BLACK);    plot.getRangeAxis().setTickLabelPaint(Color.BLACK);    plot.setDomainGridlineStroke(dottedStroke);    plot.setRangeGridlineStroke(dottedStroke);    Font bigFont=new Font("Myriad Pro",Font.PLAIN,40);    Font mediumFont=new Font("Myriad Pro",Font.PLAIN,28);    Font smallFont=new Font("Myriad Pro",Font.PLAIN,28);    plot.getDomainAxis().setLabelFont(bigFont);    plot.getRangeAxis().setLabelFont(bigFont);    chart.getLegend().setVisible(false);    plot.getDomainAxis().setTickLabelFont(smallFont);    plot.getRangeAxis().setTickLabelFont(smallFont);    plot.setDomainGridlinePaint(Color.LIGHT_GRAY);    plot.setRangeGridlinePaint(Color.LIGHT_GRAY);    plot.setBackgroundPaint(Color.WHITE);    PlotSaver instance=PlotSaver.getInstance();    chart.addChangeListener(instance);  }  chart.addChangeListener(this);  chartContainer.removeAll();  chartContainer.add(new ChartPanel(chart),BorderLayout.CENTER);  chartContainer.revalidate();  chartContainer.repaint();}  }
class C{  public final void transformOne(Vec3D point){  float x, y;  x=m00 * point.x + m01 * point.y + m02 * point.z + m03;  y=m10 * point.x + m11 * point.y + m12 * point.z + m13;  point.z=m20 * point.x + m21 * point.y + m22 * point.z + m23;  point.x=x;  point.y=y;}  }
class C{  public static void main(String[] argv){  runClassifier(new CVParameterSelection(),argv);}  }
class C{  final public SyntaxTreeNode ClosedExpressionOnly() throws ParseException {  SyntaxTreeNode tn;  tn=ClosedExpressionOrOp();  if (isGenOp(tn)) {    if (true)     throw new ParseException("Encountered unexpected Operator");  } else {    if (true)     return tn;  }  throw new Error("Missing return statement in function");}  }
class C{  public void testSimple() throws Exception {  Directory dir=newDirectory();  int bitsPerValue=DirectWriter.bitsRequired(2);  IndexOutput output=dir.createOutput("foo",IOContext.DEFAULT);  DirectWriter writer=DirectWriter.getInstance(output,5,bitsPerValue);  writer.add(1);  writer.add(0);  writer.add(2);  writer.add(1);  writer.add(2);  writer.finish();  output.close();  IndexInput input=dir.openInput("foo",IOContext.DEFAULT);  LongValues reader=DirectReader.getInstance(input.randomAccessSlice(0,input.length()),bitsPerValue,0);  assertEquals(1,reader.get(0));  assertEquals(0,reader.get(1));  assertEquals(2,reader.get(2));  assertEquals(1,reader.get(3));  assertEquals(2,reader.get(4));  input.close();  dir.close();}  }
class C{  protected int drawHostAddress(int hostRange[]){  if (hostRange[1] == hostRange[0]) {    return hostRange[0];  }  return hostRange[0] + rng.nextInt(hostRange[1] - hostRange[0]);}  }
class C{  public void testOfferNull(){  try {    LinkedBlockingDeque q=new LinkedBlockingDeque(1);    q.offer(null);    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  public void addUniqueKeyConstraint(UniqueKeyConstraint uniqueKey){  getUniqueKeys().add(uniqueKey);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.156 -0400",hash_original_method="423E8D2E17886B2A24728679F6E4F4A5",hash_generated_method="830734DA97EC048B3B116AC082725CF7") public static File toFile(URL url){  if (url == null || !"file".equalsIgnoreCase(url.getProtocol())) {    return null;  } else {    String filename=url.getFile().replace('/',File.separatorChar);    filename=decodeUrl(filename);    return new File(filename);  }}  }
class C{  public SessionSecurityDiagnosticsDataType clone(){  SessionSecurityDiagnosticsDataType result=new SessionSecurityDiagnosticsDataType();  result.SessionId=SessionId;  result.ClientUserIdOfSession=ClientUserIdOfSession;  result.ClientUserIdHistory=ClientUserIdHistory == null ? null : ClientUserIdHistory.clone();  result.AuthenticationMechanism=AuthenticationMechanism;  result.Encoding=Encoding;  result.TransportProtocol=TransportProtocol;  result.SecurityMode=SecurityMode;  result.SecurityPolicyUri=SecurityPolicyUri;  result.ClientCertificate=ClientCertificate;  return result;}  }
class C{  public CertificateEncodingException(String message){  super(message);}  }
class C{  public GssResult(byte[] leg,Element token,String contextId){  this.leg=leg;  this.token=token;  this.contextId=contextId;}  }
class C{  @Override public void postPutAllSend(DistributedPutAllOperation putAllOp,VersionedObjectList successfulPuts){  if (putAllOp.putAllDataSize > 0) {    putAllOp.distribute();  } else {    if (logger.isDebugEnabled()) {      logger.debug("DR.postPutAll: no data to distribute");    }  }}  }
class C{  public Key delMin(){  if (isEmpty())   throw new NoSuchElementException("Priority queue is empty");  head=cut(min,head);  Node x=min.child;  Key key=min.key;  min.key=null;  if (x != null) {    head=meld(head,x);    min.child=null;  }  size--;  if (!isEmpty())   consolidate(); else   min=null;  return key;}  }
class C{  @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.705 -0500",hash_original_method="9C1A1055EA03DFB32FF882EA4FC9149D",hash_generated_method="59A048735E082051D84A211B25F71E16") public int indexOf(Object obj){  return this.hlist.indexOf(obj);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void drawNoxItemDrawable(Canvas canvas,int left,int top,Drawable drawable){  if (drawable != null) {    int itemSize=(int)noxConfig.getNoxItemSize();    drawable.setBounds(left,top,left + itemSize,top + itemSize);    drawable.draw(canvas);  }}  }
class C{  public static float[] featureSizeHistogram(Vector<SiftFeature> features,float min,float max,int bins){  System.out.print("estimating feature size histogram ...");  int num_features=features.size();  float h[]=new float[bins];  int hb[]=new int[bins];  for (  SiftFeature f : features) {    int bin=(int)Math.max(0,Math.min(bins - 1,(int)(Math.log(f.scale) / Math.log(2.0) * 28.0f)));    ++hb[bin];  }  for (int i=0; i < bins; ++i) {    h[i]=(float)hb[i] / (float)num_features;  }  System.out.println(" done");  return h;}  }
class C{  public static void updateOnlineConfig(final Context context){  log.updateOnlineConfig(context);}  }
class C{  public static boolean hasBoundary(String contentType){  Map<String,String> map=new HashMap<>();  HttpFields.valueParameters(contentType.toLowerCase(),map);  return map.containsKey("boundary");}  }
class C{  public BeanProvider(final PropertyDictionary propertyDictionary){  this.propertyDictionary=propertyDictionary;}  }
class C{  private List<DigicoreRecord> sortTimeMerge(List<DigicoreRecord> log){  Collections.sort(log);  return log;}  }
class C{  public static void sort(long[] array,int start,int end){  if (array == null) {    throw new NullPointerException();  }  checkBounds(array.length,start,end);  sort(start,end,array);}  }
class C{  public void removeString(String word,Tuple t){  removeLeaf(root,word,t,0);}  }
class C{  public void add_app(InstalledApp app){  if (_installed_apps.indexOf(app) != -1) {    return;  }  _installed_apps.add(app);  Collections.sort(_installed_apps,_get_comparator());  int pos=_installed_apps.indexOf(app);  notifyItemInserted(pos);}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.PRIMITIVE_VALUE_EXPRESSION;}  }
class C{  protected void initialize(){  getModifiers();  getSelector();  getMethodDescriptor();  getExceptionTypeNames();  getGenericSignature();  getArgumentNames();  reset();}  }
class C{  @Override @Test public void testStatusUsingPid() throws Throwable {  final List<String> jvmArguments=getJvmArguments();  final List<String> command=new ArrayList<String>();  command.add(new File(new File(System.getProperty("java.home"),"bin"),"java").getCanonicalPath());  for (  String jvmArgument : jvmArguments) {    command.add(jvmArgument);  }  command.add("-cp");  command.add(System.getProperty("java.class.path"));  command.add(LocatorLauncher.class.getName());  command.add(LocatorLauncher.Command.START.getName());  command.add(getUniqueName());  command.add("--port=" + this.locatorPort);  command.add("--redirect-output");  this.process=new ProcessBuilder(command).directory(this.temporaryFolder.getRoot()).start();  this.processOutReader=new ProcessStreamReader.Builder(this.process).inputStream(this.process.getInputStream()).build().start();  this.processErrReader=new ProcessStreamReader.Builder(this.process).inputStream(this.process.getErrorStream()).build().start();  int pid=0;  LocatorLauncher pidLauncher=null;  final LocatorLauncher dirLauncher=new LocatorLauncher.Builder().setWorkingDirectory(this.temporaryFolder.getRoot().getCanonicalPath()).build();  try {    waitForLocatorToStart(dirLauncher);    final File pidFile=new File(this.temporaryFolder.getRoot(),ProcessType.LOCATOR.getPidFileName());    assertTrue(pidFile.exists());    pid=readPid(pidFile);    assertTrue(pid > 0);    assertTrue(ProcessUtils.isProcessAlive(pid));    final String logFileName=getUniqueName() + ".log";    assertTrue("Log file should exist: " + logFileName,new File(this.temporaryFolder.getRoot(),logFileName).exists());    pidLauncher=new Builder().setPid(pid).build();    assertNotNull(pidLauncher);    assertFalse(pidLauncher.isRunning());    try {      pidLauncher.status();      fail("FileProcessController should have thrown AttachAPINotFoundException");    } catch (    AttachAPINotFoundException e) {    }  } catch (  Throwable e) {    this.errorCollector.addError(e);  }  try {    assertEquals(Status.STOPPED,dirLauncher.stop().getStatus());    waitForPidToStop(pid,true);    waitForFileToDelete(this.pidFile);  } catch (  Throwable e) {    this.errorCollector.addError(e);  }}  }
class C{  private static String toVariableName(String str){  StringBuffer rtn=new StringBuffer();  char[] chars=str.toCharArray();  long changes=0;  boolean doCorrect=true;  for (int i=0; i < chars.length; i++) {    char c=chars[i];    if (i == 0 && (c >= '0' && c <= '9'))     rtn.append("_" + c); else     if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')|| c == '_' || c == '$')     rtn.append(c); else {      doCorrect=false;      rtn.append('_');      changes+=(c * (i + 1));    }  }  if (changes > 0)   rtn.append(changes);  if (doCorrect)   return correctReservedWord(rtn.toString());  return rtn.toString();}  }
class C{  public static void main(final String[] args) throws Exception {  JettyIDELauncher launcher=new JettyIDELauncher();  URL location=new File("src/main/webapp").toURI().toURL();  launcher.start(args,location);}  }
class C{  @Override public int hashCode(){  return PlainSocketFactory.class.hashCode();}  }
class C{  public void startBoolean(){}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public CompositeColorMap(ColorMap map1,ColorMap map2,ColorMap map3,ColorMap map4){  this(new ColorMap[]{map1,map2,map3,map4});}  }
class C{  public static double convertToDisplay(double energy){switch (general.activeType) {case RF:    return energy * general.TO_TE;case EU:  return energy * general.TO_IC2;case MJ:return energy * general.TO_TE / 10;default :return energy;}}  }
class C{  public JSONBuffer startHash(){  if (!stack.empty() && stack.peek() != Operand.ARRAY) {    throw new JSONException("startHash() is only allowed in an empty context.");  }  buffer.append("{");  stack.push(Operand.HASH);  return this;}  }
class C{  public void prune(HashMap<String,TreeMap<String,Integer>> table){  for (Iterator<Map.Entry<String,TreeMap<String,Integer>>> I=table.entrySet().iterator(); I.hasNext(); ) {    Map.Entry<String,TreeMap<String,Integer>> e=I.next();    int sum=0;    for (    Integer count : e.getValue().values())     sum+=count;    for (Iterator<Map.Entry<String,Integer>> J=e.getValue().entrySet().iterator(); J.hasNext(); ) {      int count=J.next().getValue();      if (count * 100 < sum) {        sum-=count;        J.remove();      }    }    if (sum <= 10)     I.remove();  }}  }
class C{  public void readFacilitiesParcel(final ActivityFacilitiesImpl parcels,final ActivityFacilitiesImpl zones){  String filename=module.getMATSim4OpusTemp() + InternalConstants.URBANSIM_PARCEL_DATASET_TABLE + this.year+ InternalConstants.FILE_TYPE_TAB;  log.info("Starting to read urbansim parcels table from " + filename);  Map<Id<ActivityFacility>,PseudoZone> pseudoZones=new ConcurrentHashMap<>();  try {    BufferedReader reader=IOUtils.getBufferedReader(filename);    String line=reader.readLine();    Map<String,Integer> idxFromKey=HeaderParser.createIdxFromKey(line,InternalConstants.TAB_SEPERATOR);    final int indexParcelID=idxFromKey.get(InternalConstants.PARCEL_ID);    final int indexXCoodinate=idxFromKey.get(InternalConstants.X_COORDINATE_SP);    final int indexYCoodinate=idxFromKey.get(InternalConstants.Y_COORDINATE_SP);    final int indexZoneID=idxFromKey.get(InternalConstants.ZONE_ID);    Id<ActivityFacility> parcel_ID;    Coord coord;    Id<ActivityFacility> zone_ID;    PseudoZone pseudoZone;    String[] parts;    while ((line=reader.readLine()) != null) {      parts=line.split(InternalConstants.TAB_SEPERATOR);      long parcelIdAsLong=(long)Double.parseDouble(parts[indexParcelID]);      parcel_ID=Id.create(parcelIdAsLong,ActivityFacility.class);      coord=new Coord(Double.parseDouble(parts[indexXCoodinate]),Double.parseDouble(parts[indexYCoodinate]));      ActivityFacilityImpl facility=parcels.createAndAddFacility(parcel_ID,coord);      facility.setDesc("urbansim location");      long zoneIdAsLong=(long)Double.parseDouble(parts[indexZoneID]);      zone_ID=Id.create(zoneIdAsLong,ActivityFacility.class);      Map<String,Object> customFacilityAttributes=facility.getCustomAttributes();      customFacilityAttributes.put(InternalConstants.ZONE_ID,zone_ID);      customFacilityAttributes.put(InternalConstants.PARCEL_ID,parcel_ID);      pseudoZone=pseudoZones.get(zone_ID);      if (pseudoZone == null) {        pseudoZone=new PseudoZone();        pseudoZones.put(zone_ID,pseudoZone);      }      pseudoZone.sumXCoordinate+=coord.getX();      pseudoZone.sumYCoordinate+=coord.getY();      pseudoZone.count++;    }    reader.close();  } catch (  FileNotFoundException e) {    e.printStackTrace();    System.exit(-1);  }catch (  IOException e) {    e.printStackTrace();    System.exit(-1);  }  log.info("Done reading urbansim parcels. Found " + parcels.getFacilities().size() + " parcels.");  constructZones(zones,pseudoZones);}  }
class C{  public boolean hasType(Class<?> clazz){  return this.getTypeHandleIfDefined(clazz) != null;}  }
class C{  private static <T extends Comparable<T>>void testEquivalent(final String message,final T[] array){  if (array.length == 0) {    return;  }  final int hash=array[0].hashCode();  for (int i=0; i < array.length; i++) {    final String msg=message + ":" + i;    final T ai=array[i];    Assert.assertFalse(msg,ai.equals(null));    Assert.assertEquals(msg,hash,ai.hashCode());    for (int j=0; j < array.length; j++) {      final String ms=msg + ":" + j;      Assert.assertEquals(ms,0,ai.compareTo(array[j]));      Assert.assertTrue(ms,ai.equals(array[j]));    }  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:12.729 -0500",hash_original_method="3B0CACFC7D97D5B3260958CA327C2CC2",hash_generated_method="735EAA498A9F3963503D9EAE1819DBB2") public BERSet(){}  }
class C{  private void fastAdd(SeriesDataset data){  for (int i=0; i < data.getSeriesCount(); i++) {    this.datasetInfo.add(new DatasetInfo(data,i));  }}  }
class C{  public SolrConfig(SolrResourceLoader loader,String name,InputSource is) throws ParserConfigurationException, IOException, SAXException {  super(loader,name,is,"/config/");  getOverlay();  getRequestParams();  initLibs();  luceneMatchVersion=getLuceneVersion("luceneMatchVersion");  String indexConfigPrefix;  boolean hasDeprecatedIndexConfig=(getNode("indexDefaults",false) != null) || (getNode("mainIndex",false) != null);  if (hasDeprecatedIndexConfig) {    throw new SolrException(ErrorCode.FORBIDDEN,"<indexDefaults> and <mainIndex> configuration sections are discontinued. Use <indexConfig> instead.");  } else {    indexConfigPrefix="indexConfig";  }  assertWarnOrFail("The <nrtMode> config has been discontinued and NRT mode is always used by Solr." + " This config will be removed in future versions.",getNode(indexConfigPrefix + "/nrtMode",false) == null,true);  assertWarnOrFail("Solr no longer supports forceful unlocking via the 'unlockOnStartup' option.  " + "This is no longer necessary for the default lockType except in situations where " + "it would be dangerous and should not be done.  For other lockTypes and/or "+ "directoryFactory options it may also be dangerous and users must resolve "+ "problematic locks manually.",null == getNode(indexConfigPrefix + "/unlockOnStartup",false),true);  indexConfig=new SolrIndexConfig(this,"indexConfig",null);  booleanQueryMaxClauseCount=getInt("query/maxBooleanClauses",BooleanQuery.getMaxClauseCount());  log.info("Using Lucene MatchVersion: {}",luceneMatchVersion);  if (get("query/boolTofilterOptimizer",null) != null)   log.warn("solrconfig.xml: <boolTofilterOptimizer> is currently not implemented and has no effect.");  if (get("query/HashDocSet",null) != null)   log.warn("solrconfig.xml: <HashDocSet> is deprecated and no longer recommended used.");  useFilterForSortedQuery=getBool("query/useFilterForSortedQuery",false);  queryResultWindowSize=Math.max(1,getInt("query/queryResultWindowSize",1));  queryResultMaxDocsCached=getInt("query/queryResultMaxDocsCached",Integer.MAX_VALUE);  enableLazyFieldLoading=getBool("query/enableLazyFieldLoading",false);  useRangeVersionsForPeerSync=getBool("peerSync/useRangeVersions",true);  filterCacheConfig=CacheConfig.getConfig(this,"query/filterCache");  queryResultCacheConfig=CacheConfig.getConfig(this,"query/queryResultCache");  documentCacheConfig=CacheConfig.getConfig(this,"query/documentCache");  CacheConfig conf=CacheConfig.getConfig(this,"query/fieldValueCache");  if (conf == null) {    Map<String,String> args=new HashMap<>();    args.put(NAME,"fieldValueCache");    args.put("size","10000");    args.put("initialSize","10");    args.put("showItems","-1");    conf=new CacheConfig(FastLRUCache.class,args,null);  }  fieldValueCacheConfig=conf;  useColdSearcher=getBool("query/useColdSearcher",false);  dataDir=get("dataDir",null);  if (dataDir != null && dataDir.length() == 0)   dataDir=null;  org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);  hashSetInverseLoadFactor=1.0f / getFloat("//HashDocSet/@loadFactor",0.75f);  hashDocSetMaxSize=getInt("//HashDocSet/@maxSize",3000);  httpCachingConfig=new HttpCachingConfig(this);  Node jmx=getNode("jmx",false);  if (jmx != null) {    jmxConfig=new JmxConfiguration(true,get("jmx/@agentId",null),get("jmx/@serviceUrl",null),get("jmx/@rootName",null));  } else {    jmxConfig=new JmxConfiguration(false,null,null,null);  }  maxWarmingSearchers=getInt("query/maxWarmingSearchers",Integer.MAX_VALUE);  slowQueryThresholdMillis=getInt("query/slowQueryThresholdMillis",-1);  for (  SolrPluginInfo plugin : plugins)   loadPluginInfo(plugin);  Map<String,CacheConfig> userCacheConfigs=CacheConfig.getMultipleConfigs(this,"query/cache");  List<PluginInfo> caches=getPluginInfos(SolrCache.class.getName());  if (!caches.isEmpty()) {    for (    PluginInfo c : caches) {      userCacheConfigs.put(c.name,CacheConfig.getConfig(this,"cache",c.attributes,null));    }  }  this.userCacheConfigs=Collections.unmodifiableMap(userCacheConfigs);  updateHandlerInfo=loadUpdatehandlerInfo();  multipartUploadLimitKB=getInt("requestDispatcher/requestParsers/@multipartUploadLimitInKB",2048);  formUploadLimitKB=getInt("requestDispatcher/requestParsers/@formdataUploadLimitInKB",2048);  enableRemoteStreams=getBool("requestDispatcher/requestParsers/@enableRemoteStreaming",false);  handleSelect=getBool("requestDispatcher/@handleSelect",true);  addHttpRequestToContext=getBool("requestDispatcher/requestParsers/@addHttpRequestToContext",false);  List<PluginInfo> argsInfos=getPluginInfos(InitParams.class.getName());  if (argsInfos != null) {    Map<String,InitParams> argsMap=new HashMap<>();    for (    PluginInfo p : argsInfos) {      InitParams args=new InitParams(p);      argsMap.put(args.name == null ? String.valueOf(args.hashCode()) : args.name,args);    }    this.initParams=Collections.unmodifiableMap(argsMap);  }  solrRequestParsers=new SolrRequestParsers(this);  log.debug("Loaded SolrConfig: {}",name);}  }
class C{  private static void d_uamxx(double[] a,double[] c,int m,int n,double init,Builtin builtin,int rl,int ru){  int len=Math.min((ru - rl) * n,a.length);  c[0]=builtin(a,rl * n,init,len,builtin);}  }
class C{  public SVGOMFEMergeElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public void close(){  DB.close(this.resultSet,this.statement);  this.resultSet=null;  this.statement=null;  currentPO=null;}  }
class C{  public static Test suite(){  return new TestSuite(MatlabTest.class);}  }
class C{  public ConsistencyCheckMD5(int id,Table table,int rowFrom,int rowLimit,boolean checkColumnNames,boolean checkColumnTypes){  super(id,table,ConsistencyCheck.Method.MD5);  this.rowFrom=rowFrom;  this.rowLimit=rowLimit;  this.checkColumnNames=checkColumnNames;  this.checkColumnTypes=checkColumnTypes;}  }
class C{  public CML createCML(ISicresAbstractDocumentVO document){  AlfrescoDatosEspecificosVO datosEspecificosVO=(AlfrescoDatosEspecificosVO)document.getDatosEspecificos();  NamedValue[] titledProps=this.chargeProperties(datosEspecificosVO);  titledProps[0]=Utils.createNamedValue(Constants.PROP_NAME,System.currentTimeMillis() + "_" + document.getName());  Iterator it=datosEspecificosVO.getListAspects().iterator();  CMLAddAspect[] addAspects=new CMLAddAspect[datosEspecificosVO.getListAspects().size() + 1];  CMLAddAspect addAspect=new CMLAddAspect(Constants.ASPECT_TITLED,null,null,"1");  addAspects[0]=addAspect;  int i=1;  while (it.hasNext()) {    AlfrescoAspectVO aspect=(AlfrescoAspectVO)it.next();    String aspectString=Constants.createQNameString(aspect.getNameContent(),aspect.getNameAspect());    CMLAddAspect addAspectIsicres=new CMLAddAspect(aspectString,null,null,"1");    addAspects[i]=addAspectIsicres;    i++;  }  ParentReference parentReference=new ParentReference(STORE,null,datosEspecificosVO.getPathSpace(),Constants.ASSOC_CONTAINS,Constants.ASSOC_CONTAINS);  CMLCreate cmlCreate=new CMLCreate("1",parentReference,parentReference.getUuid(),Constants.ASSOC_CONTAINS,null,Constants.PROP_CONTENT,titledProps);  CML cml=new CML();  cml.setCreate(new CMLCreate[]{cmlCreate});  cml.setAddAspect(addAspects);  return cml;}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  String keyFecha=TransferenciasConstants.LABEL_TRANSFERENCIAS_RELACIONES_BUSQUEDA_FECHA;  if (ingresoDirecto != null) {    if (ingresoDirecto.booleanValue()) {      keyFecha=TransferenciasConstants.LABEL_TRANSFERENCIAS_RELACIONES_BUSQUEDA_FECHA_ESTADO;    } else     if (tipos.length == 0) {      errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(ArchivoDetails.TRANSFERENCIAS_TIPO_BUSQUEDA_RELACION,request.getLocale())));    }  }  if (estados.length == 0)   errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(ArchivoDetails.TRANSFERENCIAS_ESTADOS_BUSQUEDA_RELACION,request.getLocale())));  if (!new CustomDate(this.fechaFinFormato,this.fechaA,this.fechaM,this.fechaD,this.fechaS).validate() || !new CustomDate(this.fechaIniFormato,this.fechaIniA,this.fechaIniM,this.fechaIniD,this.fechaIniS).validate() || !new CustomDate(this.fechaFinFormato,this.fechaFinA,this.fechaFinM,this.fechaFinD,this.fechaFinS).validate()) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_DATE,Messages.getString(keyFecha,request.getLocale())));  }  return errors;}  }
class C{  public SuggestStopFilterFactory(Map<String,String> args){  super(args);  stopWordFiles=get(args,"words");  format=get(args,"format",(null == stopWordFiles ? null : FORMAT_WORDSET));  ignoreCase=getBoolean(args,"ignoreCase",false);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public synchronized void stop(){  this.stopped=true;}  }
class C{  private boolean weHaveVar(String name){  try {    return super.getVariableImpl(name,false) != null;  } catch (  UtilEvalError e) {    return false;  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.275 -0500",hash_original_method="7F4F394B7A0F8301F44F921567D26367",hash_generated_method="32A3D276372BDCAB04526997529A6AE5") public static boolean isLetter(char c){  return isLetter((int)c);}  }
class C{  public synchronized JSONObject bet1A0001(final String userId,final int amount,final int smallOrLarge){  final JSONObject ret=Results.falseResult();  if (activityQueryService.is1A0001Today(userId)) {    ret.put(Keys.MSG,langPropsService.get("activityParticipatedLabel"));    return ret;  }  final String date=DateFormatUtils.format(new Date(),"yyyyMMdd");  final boolean succ=null != pointtransferMgmtService.transfer(userId,Pointtransfer.ID_C_SYS,Pointtransfer.TRANSFER_TYPE_C_ACTIVITY_1A0001,amount,date + "-" + smallOrLarge);  ret.put(Keys.STATUS_CODE,succ);  final String msg=succ ? langPropsService.get("activityBetSuccLabel") : langPropsService.get("activityBetFailLabel");  ret.put(Keys.MSG,msg);  try {    final JSONObject user=userQueryService.getUser(userId);    final String userName=user.optString(User.USER_NAME);    final JSONObject timeline=new JSONObject();    timeline.put(Common.TYPE,Common.ACTIVITY);    String content=langPropsService.get("timelineActivity1A0001Label");    content=content.replace("{user}","<a target='_blank' rel='nofollow' href='" + Latkes.getServePath() + "/member/"+ userName+ "'>"+ userName+ "</a>");    timeline.put(Common.CONTENT,content);    timelineMgmtService.addTimeline(timeline);  } catch (  final ServiceException e) {    LOGGER.log(Level.ERROR,"Timeline error",e);  }  return ret;}  }
class C{  @LargeTest public void testCameraPairwiseScenario03() throws Exception {  genericPairwiseTestCase(Flash.OFF,Exposure.MAX,WhiteBalance.AUTO,SceneMode.NIGHT,PictureSize.SMALL,Geotagging.ON);}  }
class C{  public void test_ticket_1202o() throws Exception {  new TestHelper("ticket-1202-additional3","ticket-1202-additional3.rq","ticket-1202-additional3.ttl","ticket-1202-additional3.srx").runTest();}  }
class C{  private static File fileFromUrl(String url){  final String filePart;  if (url.startsWith(JarFileSystem.PROTOCOL_PREFIX) && url.endsWith(JarFileSystem.JAR_SEPARATOR)) {    filePart=url.substring(JarFileSystem.PROTOCOL_PREFIX.length(),url.length() - JarFileSystem.JAR_SEPARATOR.length());  } else   if (url.startsWith(LocalFileSystem.PROTOCOL_PREFIX)) {    filePart=url.substring(JarFileSystem.PROTOCOL_PREFIX.length());  } else {    throw new IllegalArgumentException("Unknown url type: " + url);  }  return new File(filePart.replace('/',File.separatorChar));}  }
class C{  public boolean isVerbose(){  return verbose;}  }
class C{  public static JavaRunnerOptions fromConfig(CeylonConfig config){  JavaRunnerOptions options=new JavaRunnerOptions();  options.mapOptions(config);  return options;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentinvalidcharacterexceptioncreateentref.class,args);}  }
class C{  public final void signalAll(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignalAll(first);}  }
class C{  public static SnmpOid toOid(long[] index,int start) throws SnmpStatusException {  try {    if (index[start] > Integer.MAX_VALUE) {      throw new SnmpStatusException(SnmpStatusException.noSuchName);    }    int strLen=(int)index[start++];    long[] ids=new long[strLen];    for (int i=0; i < strLen; i++) {      ids[i]=index[start + i];    }    return new SnmpOid(ids);  } catch (  IndexOutOfBoundsException e) {    throw new SnmpStatusException(SnmpStatusException.noSuchName);  }}  }
class C{  public void initializeOutput(ExtractorOutput output,int trackId,long durationUs) throws ParserException {  String mimeType;  int maxInputSize=MediaFormat.NO_VALUE;  int pcmEncoding=MediaFormat.NO_VALUE;  List<byte[]> initializationData=null;switch (codecId) {case CODEC_ID_VP8:    mimeType=MimeTypes.VIDEO_VP8;  break;case CODEC_ID_VP9:mimeType=MimeTypes.VIDEO_VP9;break;case CODEC_ID_MPEG2:mimeType=MimeTypes.VIDEO_MPEG2;break;case CODEC_ID_MPEG4_SP:case CODEC_ID_MPEG4_ASP:case CODEC_ID_MPEG4_AP:mimeType=MimeTypes.VIDEO_MP4V;initializationData=codecPrivate == null ? null : Collections.singletonList(codecPrivate);break;case CODEC_ID_H264:mimeType=MimeTypes.VIDEO_H264;Pair<List<byte[]>,Integer> h264Data=parseAvcCodecPrivate(new ParsableByteArray(codecPrivate));initializationData=h264Data.first;nalUnitLengthFieldLength=h264Data.second;break;case CODEC_ID_H265:mimeType=MimeTypes.VIDEO_H265;Pair<List<byte[]>,Integer> hevcData=parseHevcCodecPrivate(new ParsableByteArray(codecPrivate));initializationData=hevcData.first;nalUnitLengthFieldLength=hevcData.second;break;case CODEC_ID_FOURCC:mimeType=MimeTypes.VIDEO_VC1;initializationData=parseFourCcVc1Private(new ParsableByteArray(codecPrivate));break;case CODEC_ID_VORBIS:mimeType=MimeTypes.AUDIO_VORBIS;maxInputSize=VORBIS_MAX_INPUT_SIZE;initializationData=parseVorbisCodecPrivate(codecPrivate);break;case CODEC_ID_OPUS:mimeType=MimeTypes.AUDIO_OPUS;maxInputSize=OPUS_MAX_INPUT_SIZE;initializationData=new ArrayList<>(3);initializationData.add(codecPrivate);initializationData.add(ByteBuffer.allocate(8).order(ByteOrder.nativeOrder()).putLong(codecDelayNs).array());initializationData.add(ByteBuffer.allocate(8).order(ByteOrder.nativeOrder()).putLong(seekPreRollNs).array());break;case CODEC_ID_AAC:mimeType=MimeTypes.AUDIO_AAC;initializationData=Collections.singletonList(codecPrivate);break;case CODEC_ID_MP3:mimeType=MimeTypes.AUDIO_MPEG;maxInputSize=MP3_MAX_INPUT_SIZE;break;case CODEC_ID_AC3:mimeType=MimeTypes.AUDIO_AC3;break;case CODEC_ID_E_AC3:mimeType=MimeTypes.AUDIO_E_AC3;break;case CODEC_ID_TRUEHD:mimeType=MimeTypes.AUDIO_TRUEHD;break;case CODEC_ID_DTS:case CODEC_ID_DTS_EXPRESS:mimeType=MimeTypes.AUDIO_DTS;break;case CODEC_ID_DTS_LOSSLESS:mimeType=MimeTypes.AUDIO_DTS_HD;break;case CODEC_ID_FLAC:mimeType=MimeTypes.AUDIO_FLAC;initializationData=Collections.singletonList(codecPrivate);break;case CODEC_ID_ACM:mimeType=MimeTypes.AUDIO_RAW;if (!parseMsAcmCodecPrivate(new ParsableByteArray(codecPrivate))) {throw new ParserException("Non-PCM MS/ACM is unsupported");}pcmEncoding=Util.getPcmEncoding(audioBitDepth);if (pcmEncoding == C.ENCODING_INVALID) {throw new ParserException("Unsupported PCM bit depth: " + audioBitDepth);}break;case CODEC_ID_PCM_INT_LIT:mimeType=MimeTypes.AUDIO_RAW;pcmEncoding=Util.getPcmEncoding(audioBitDepth);if (pcmEncoding == C.ENCODING_INVALID) {throw new ParserException("Unsupported PCM bit depth: " + audioBitDepth);}break;case CODEC_ID_SUBRIP:mimeType=MimeTypes.APPLICATION_SUBRIP;break;case CODEC_ID_VOBSUB:mimeType=MimeTypes.APPLICATION_VOBSUB;initializationData=Collections.singletonList(codecPrivate);break;case CODEC_ID_PGS:mimeType=MimeTypes.APPLICATION_PGS;break;default :throw new ParserException("Unrecognized codec identifier.");}MediaFormat format;if (MimeTypes.isAudio(mimeType)) {format=MediaFormat.createAudioFormat(Integer.toString(trackId),mimeType,MediaFormat.NO_VALUE,maxInputSize,durationUs,channelCount,sampleRate,initializationData,language,pcmEncoding);} else if (MimeTypes.isVideo(mimeType)) {if (displayUnit == Track.DISPLAY_UNIT_PIXELS) {displayWidth=displayWidth == MediaFormat.NO_VALUE ? width : displayWidth;displayHeight=displayHeight == MediaFormat.NO_VALUE ? height : displayHeight;}float pixelWidthHeightRatio=MediaFormat.NO_VALUE;if (displayWidth != MediaFormat.NO_VALUE && displayHeight != MediaFormat.NO_VALUE) {pixelWidthHeightRatio=((float)(height * displayWidth)) / (width * displayHeight);}format=MediaFormat.createVideoFormat(Integer.toString(trackId),mimeType,MediaFormat.NO_VALUE,maxInputSize,durationUs,width,height,initializationData,MediaFormat.NO_VALUE,pixelWidthHeightRatio);} else if (MimeTypes.APPLICATION_SUBRIP.equals(mimeType)) {format=MediaFormat.createTextFormat(Integer.toString(trackId),mimeType,MediaFormat.NO_VALUE,durationUs,language);} else if (MimeTypes.APPLICATION_VOBSUB.equals(mimeType) || MimeTypes.APPLICATION_PGS.equals(mimeType)) {format=MediaFormat.createImageFormat(Integer.toString(trackId),mimeType,MediaFormat.NO_VALUE,durationUs,initializationData,language);} else {throw new ParserException("Unexpected MIME type.");}this.output=output.track(number);this.output.format(format);}  }
class C{  public boolean isEmpty(){  assertIsOpen();  return segments.firstSegment().isEmpty();}  }
class C{  public boolean add_color_tags(){  return soot.PhaseOptions.getBoolean(options,"add-color-tags");}  }
class C{  public static Writable encodeBase64(final byte[] data){  return encodeBase64(data,false);}  }
class C{  public synchronized boolean unregisterAllFrames(){  frameList.removeAllElements();  return true;}  }
class C{  private Class<?> convertType(Class<?> eventType){  Class<?> returnClass=eventType;  if (eventType.equals(boolean.class)) {    returnClass=Boolean.class;  } else   if (eventType.equals(int.class)) {    returnClass=Integer.class;  } else   if (eventType.equals(float.class)) {    returnClass=Float.class;  } else   if (eventType.equals(double.class)) {    returnClass=Double.class;  }  return returnClass;}  }
class C{  private boolean isZoningRequired(URI varrayURI){  VirtualArray virtualArray=_dbClient.queryObject(VirtualArray.class,varrayURI);  if (virtualArray == null) {    throw DeviceControllerException.exceptions.virtualArrayNotFound();  }  return NetworkScheduler.isZoningRequired(_dbClient,virtualArray);}  }
class C{  public NullLogger(String instanceName){}  }
class C{  public double[][] calculateDistances(EvolutionState state,Individual[] inds){  double[][] distances=new double[inds.length][inds.length];  for (int y=0; y < inds.length; y++) {    distances[y][y]=0;    for (int z=y + 1; z < inds.length; z++) {      distances[z][y]=distances[y][z]=((SPEA2MultiObjectiveFitness)inds[y].fitness).sumSquaredObjectiveDistance((SPEA2MultiObjectiveFitness)inds[z].fitness);    }  }  return distances;}  }
class C{  public static boolean putString(Context context,String key,String value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putString(key,value);  return editor.commit();}  }
class C{  public void testMoveFileDestinationMissing() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,DIR_NEW,SUBDIR_NEW),paths(FILE));  create(igfs,paths(DIR,SUBDIR),paths(FILE));  igfs.rename(FILE,SUBDIR_NEW);  checkExist(igfs,DIR_NEW,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,new IgfsPath(SUBDIR_NEW,FILE.name()));  checkNotExist(igfs,igfsSecondary,FILE);}  }
class C{  public ServerApiGenericException(Throwable cause){  super(RcsGenericException.class,cause.getMessage(),cause);}  }
class C{  synchronized boolean isDuplicate(long sequenceNo){  if (sequenceNo > receiveWindowUpperBoundary) {    return false;  } else {    long idx=sequenceNo - receiveWindowLowerBoundary;    long bitMask=1L << idx;    if (LOGGER.isLoggable(Level.FINER)) {      LOGGER.log(Level.FINER,"Checking sequence no [{0}] using bit mask [{1}] against received records [{2}] with lower boundary [{3}]",new Object[]{sequenceNo,Long.toBinaryString(bitMask),Long.toBinaryString(receivedRecordsVector),receiveWindowLowerBoundary});    }    return (receivedRecordsVector & bitMask) == bitMask;  }}  }
class C{  public synchronized void flushInvalidIcons(DeviceProfile grid){  Iterator<Entry<CacheKey,CacheEntry>> it=mCache.entrySet().iterator();  while (it.hasNext()) {    final CacheEntry e=it.next().getValue();    if ((e.icon != null) && (e.icon.getWidth() < grid.iconSizePx || e.icon.getHeight() < grid.iconSizePx)) {      it.remove();    }  }}  }
class C{  public boolean belongs(@Nullable Object key,@Nullable Collection<N> nodes){  if (F.isEmpty(nodes))   return false;  assert nodes != null;  N n=node(key);  return n != null && nodes.contains(n);}  }
class C{  public int largestAbsComponent(){  S2Point temp=fabs(this);  if (temp.x > temp.y) {    if (temp.x > temp.z) {      return 0;    } else {      return 2;    }  } else {    if (temp.y > temp.z) {      return 1;    } else {      return 2;    }  }}  }
class C{  protected String buildURL(String url,String urlBase){  url=url.trim();  if (url.indexOf("://") == -1)   url=urlBase + (urlBase.endsWith("/") || url.startsWith("/") ? url : "/" + url);  return url;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z, val;  double[] N=new double[8];  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          n=0;          sum=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            val=inputFile.getValue(y,x);            if (val != noData) {              n+=1 * filterShape[a];              sum+=val * filterShape[a];            }          }          if (n > 0) {            outputFile.setValue(row,col,z - (sum / n));          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean contains(float value){  return lastIndexOf(value) >= 0;}  }
class C{  public MWMStrategyDetail(Properties ctx,int WM_Strategy_Detail_ID){  this(ctx,WM_Strategy_Detail_ID,null);}  }
class C{  public BERSequence(){}  }
class C{  public void addModifyListener(final ModifyListener listener){  Check.notNull(listener,"listener");  modifyListeners.addListener(listener);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"BKPT");  final long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  instructions.add(ReilHelpers.createUnknown(baseOffset));}  }
class C{  public static boolean isUrlUsable(String url){  if (CommonUtils.isEmpty(url)) {    return false;  }  URL urlTemp=null;  HttpURLConnection connt=null;  try {    urlTemp=new URL(url);    connt=(HttpURLConnection)urlTemp.openConnection();    connt.setRequestMethod("HEAD");    int returnCode=connt.getResponseCode();    if (returnCode == HttpURLConnection.HTTP_OK) {      return true;    }  } catch (  Exception e) {    return false;  } finally {    connt.disconnect();  }  return false;}  }
class C{  public void endVisit(MethodDeclaration node){}  }
class C{  public boolean removeGetDataEventListener(GetDataEventListener listener){  boolean result=ListenerRegistration.removeFromList(listener,peerGetDataEventListeners);  for (  Peer peer : getConnectedPeers())   peer.removeGetDataEventListener(listener);  for (  Peer peer : getPendingPeers())   peer.removeGetDataEventListener(listener);  return result;}  }
class C{  public static void writeStringData(ByteBuffer buff,String s,int len){  for (int i=0; i < len; i++) {    int c=s.charAt(i);    if (c < 0x80) {      buff.put((byte)c);    } else     if (c >= 0x800) {      buff.put((byte)(0xe0 | (c >> 12)));      buff.put((byte)(((c >> 6) & 0x3f)));      buff.put((byte)(c & 0x3f));    } else {      buff.put((byte)(0xc0 | (c >> 6)));      buff.put((byte)(c & 0x3f));    }  }}  }
class C{  public int threeSumClosest(int[] num,int target){  int closest=0;  if (num == null)   return closest;  Arrays.sort(num);  for (int i=0; i < num.length && i < 3; i++)   closest+=num[i];  if (num.length < 3)   return closest;  for (int i=0; i < num.length - 2; i++) {    int j=i + 1;    int k=num.length - 1;    while (j < k) {      int sum=num[i] + num[j] + num[k];      if (Math.abs(target - sum) < Math.abs(target - closest)) {        closest=sum;        if (closest == target)         return closest;      }      if (sum > target)       k--; else       j++;    }  }  return closest;}  }
class C{  private void decodeParms(String parms,Properties p) throws InterruptedException {  if (parms == null)   return;  StringTokenizer st=new StringTokenizer(parms,"&");  while (st.hasMoreTokens()) {    String e=st.nextToken();    int sep=e.indexOf('=');    if (sep >= 0)     p.put(decodePercent(e.substring(0,sep)).trim(),decodePercent(e.substring(sep + 1)));  }}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof MBeanServerPermission))   return false;  MBeanServerPermission that=(MBeanServerPermission)obj;  return (this.mask == that.mask);}  }
class C{  public final void testValidateCaseInsensitiveNotAllowingSpacesFails(){  char[] allowedCharacters=new char[]{'-'};  LetterOrNumberValidator characterOrNumberValidator=new LetterOrNumberValidator("foo",Case.CASE_INSENSITIVE,false,allowedCharacters);  assertFalse(characterOrNumberValidator.validate("Ab 1&-"));}  }
class C{  protected Entity parseEntity(Element instanceEl,@Nullable Entity entity,@Nullable CommitRequest commitRequest){  try {    if (entity == null) {      String id=instanceEl.attributeValue("id");      EntityLoadInfo loadInfo=EntityLoadInfo.parse(id);      if (loadInfo == null)       throw new IllegalArgumentException("XML description of entity doesn't contain valid 'id' attribute");      entity=createEmptyInstance(loadInfo);      entity.setValue("id",loadInfo.getId());    }    MetaClass metaClass=entity.getMetaClass();    List propertyEls=instanceEl.elements();    for (    Object el : propertyEls) {      Element propertyEl=(Element)el;      if (entity instanceof BaseGenericIdEntity && "__securityToken".equals(propertyEl.getName())) {        byte[] securityToken=Base64.getDecoder().decode(propertyEl.getText());        BaseEntityInternalAccess.setSecurityToken((BaseGenericIdEntity)entity,securityToken);        continue;      }      String propertyName=propertyEl.attributeValue("name");      MetaPropertyPath metaPropertyPath=metadata.getTools().resolveMetaPropertyPath(metaClass,propertyName);      Preconditions.checkNotNullArgument(metaPropertyPath,"Could not resolve property '%s' in '%s'",propertyName,metaClass);      MetaProperty property=metaPropertyPath.getMetaProperty();      if (commitRequest != null && !attrModifyPermitted(metaClass,propertyName))       continue;      if (commitRequest != null && metadataTools.isTransient(property) && !DynamicAttributesUtils.isDynamicAttribute(propertyName))       continue;      if (Boolean.parseBoolean(propertyEl.attributeValue("null"))) {        entity.setValue(propertyName,null);        continue;      }      if (entity instanceof BaseGenericIdEntity && DynamicAttributesUtils.isDynamicAttribute(propertyName) && ((BaseGenericIdEntity)entity).getDynamicAttributes() == null) {        ConverterHelper.fetchDynamicAttributes(entity);      }      String stringValue=propertyEl.getText();      Object value;switch (property.getType()) {case DATATYPE:        value=property.getRange().asDatatype().parse(stringValue);      entity.setValue(propertyName,value);    break;case ENUM:  value=property.getRange().asEnumeration().parse(stringValue);entity.setValue(propertyName,value);break;case COMPOSITION:case ASSOCIATION:MetaClass propertyMetaClass=propertyMetaClass(property);if (commitRequest != null && !updatePermitted(propertyMetaClass) && !readPermitted(propertyMetaClass)) break;if (!property.getRange().getCardinality().isMany()) {Element refInstanceEl=propertyEl.element("instance");if (metadataTools.isEmbedded(property)) {MetaClass embeddedMetaClass=property.getRange().asClass();Entity embeddedEntity=metadata.create(embeddedMetaClass);value=parseEntity(refInstanceEl,embeddedEntity,commitRequest);} else {String id=refInstanceEl.attributeValue("id");if (commitRequest != null && commitRequest.getCommitIds().contains(id)) {EntityLoadInfo loadInfo=EntityLoadInfo.parse(id);Entity ref=metadata.create(loadInfo.getMetaClass());ref.setValue("id",loadInfo.getId());entity.setValue(propertyName,ref);break;}value=parseEntity(refInstanceEl,null,commitRequest);}entity.setValue(propertyName,value);} else {Class<?> propertyJavaType=property.getJavaType();Collection<Object> coll;if (List.class.isAssignableFrom(propertyJavaType)) coll=new ArrayList<>(); else if (Set.class.isAssignableFrom(propertyJavaType)) coll=new HashSet<>(); else throw new RuntimeException("Datatype " + propertyJavaType.getName() + " of "+ metaClass.getName()+ "#"+ property.getName()+ " is not supported");entity.setValue(propertyName,coll);for (Object childInstenceEl : propertyEl.elements("instance")) {Entity childEntity=parseEntity((Element)childInstenceEl,null,commitRequest);coll.add(childEntity);}}break;default :throw new IllegalStateException("Unknown property type");}}return entity;} catch (Exception e) {throw new RuntimeException(e);}}  }
class C{  public void testEquals(){  NonceAttribute nonceAttribute2=new NonceAttribute();  nonceAttribute2.setNonce(nonceValue.getBytes());  assertEquals("testequals failed",nonceAttribute,nonceAttribute2);  nonceAttribute2=new NonceAttribute();  nonceAttribute2.setNonce("some other nonce".getBytes());  assertFalse("testequals failed",nonceAttribute.equals(nonceAttribute2));  assertFalse("testequals failed",nonceAttribute.equals(null));}  }
class C{  private Base64(){}  }
class C{  private void copyCalibrationMatrix(ColorSpaceTransform src,float[] dst){  if (src != null) {    for (int r=0; r < 3; r++) {      for (int c=0; c < 3; c++) {        dst[r * 3 + c]=src.getElement(c,r).floatValue();      }    }  } else {    for (int r=0; r < 3; r++)     dst[r * 3 + r]=1.0f;  }}  }
class C{  public void accept(final MethodVisitor mv){  mv.visitTryCatchBlock(start.getLabel(),end.getLabel(),handler == null ? null : handler.getLabel(),type);  int n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (int i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(mv.visitTryCatchAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (int i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(mv.visitTryCatchAnnotation(an.typeRef,an.typePath,an.desc,false));  }}  }
class C{  public boolean cgCreateRollbackStep(URI rpSystemId,List<VolumeDescriptor> volumeDescriptors,String token) throws WorkflowException {  _log.info("Start cg create rollback step");  WorkflowStepCompleter.stepExecuting(token);  List<VolumeDescriptor> sourceVolumeDescriptors=VolumeDescriptor.filterByType(volumeDescriptors,new VolumeDescriptor.Type[]{VolumeDescriptor.Type.RP_SOURCE,VolumeDescriptor.Type.RP_EXISTING_SOURCE,VolumeDescriptor.Type.RP_VPLEX_VIRT_SOURCE},new VolumeDescriptor.Type[]{});  List<VolumeDescriptor> journalVolumeDescriptors=VolumeDescriptor.filterByType(volumeDescriptors,new VolumeDescriptor.Type[]{VolumeDescriptor.Type.RP_JOURNAL,VolumeDescriptor.Type.RP_VPLEX_VIRT_JOURNAL},new VolumeDescriptor.Type[]{});  if (sourceVolumeDescriptors == null || sourceVolumeDescriptors.isEmpty()) {    WorkflowStepCompleter.stepSucceded(token);    return true;  }  List<URI> volumeIDs=new ArrayList<URI>();  for (  VolumeDescriptor descriptor : sourceVolumeDescriptors) {    volumeIDs.add(descriptor.getVolumeURI());  }  List<URI> journalVolumeIDs=new ArrayList<URI>();  for (  VolumeDescriptor journalDescriptor : journalVolumeDescriptors) {    journalVolumeIDs.add(journalDescriptor.getVolumeURI());  }  return cgDeleteStep(rpSystemId,volumeIDs,journalVolumeIDs,token);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MPeriod[");  sb.append(get_ID()).append("-").append(getName()).append(", ").append(getStartDate()).append("-").append(getEndDate()).append("]");  return sb.toString();}  }
class C{  public void complete(ClassSymbol c) throws CompletionFailure {  if (completionFailureName == c.fullname) {    throw new CompletionFailure(c,"user-selected completion failure by class name");  }  JCCompilationUnit tree;  JavaFileObject filename=c.classfile;  JavaFileObject prev=log.useSource(filename);  try {    tree=parse(filename,filename.getCharContent(false));  } catch (  IOException e) {    log.error("error.reading.file",filename,JavacFileManager.getMessage(e));    tree=make.TopLevel(List.<JCTree.JCAnnotation>nil(),null,List.<JCTree>nil());  } finally {    log.useSource(prev);  }  if (!taskListener.isEmpty()) {    TaskEvent e=new TaskEvent(TaskEvent.Kind.ENTER,tree);    taskListener.started(e);  }  enter.complete(List.of(tree),c);  if (!taskListener.isEmpty()) {    TaskEvent e=new TaskEvent(TaskEvent.Kind.ENTER,tree);    taskListener.finished(e);  }  if (enter.getEnv(c) == null) {    boolean isPkgInfo=tree.sourcefile.isNameCompatible("package-info",JavaFileObject.Kind.SOURCE);    if (isPkgInfo) {      if (enter.getEnv(tree.packge) == null) {        JCDiagnostic diag=diagFactory.fragment("file.does.not.contain.package",c.location());        throw reader.new BadClassFile(c,filename,diag);      }    } else {      JCDiagnostic diag=diagFactory.fragment("file.doesnt.contain.class",c.getQualifiedName());      throw reader.new BadClassFile(c,filename,diag);    }  }  implicitSourceFilesRead=true;}  }
class C{  public static int min(int[] values){  int min=Integer.MAX_VALUE;  for (int i=0; i < values.length; ++i) {    if (values[i] < min) {      min=values[i];    }  }  return min;}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  public int findUpperIndex(float length){  if (!initialised) {    initialise();  }  if (length < 0 || length > pathLength) {    return -1;  }  int lb=0;  int ub=segments.size() - 1;  while (lb != ub) {    int curr=(lb + ub) >> 1;    PathSegment ps=(PathSegment)segments.get(curr);    if (ps.getLength() >= length) {      ub=curr;    } else {      lb=curr + 1;    }  }  for (; ; ) {    PathSegment ps=(PathSegment)segments.get(ub);    if (ps.getSegType() != PathIterator.SEG_MOVETO || ub == segments.size() - 1) {      break;    }    ub++;  }  int upperIndex=-1;  int currentIndex=0;  int numSegments=segments.size();  while (upperIndex <= 0 && currentIndex < numSegments) {    PathSegment ps=(PathSegment)segments.get(currentIndex);    if (ps.getLength() >= length && ps.getSegType() != PathIterator.SEG_MOVETO) {      upperIndex=currentIndex;    }    currentIndex++;  }  return upperIndex;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:29.722 -0500",hash_original_method="9CBF59A81FEE9822185147DE8DCD075A",hash_generated_method="394172050377204AF59B47DCF537242A") public CipherParameters generateDerivedMacParameters(int keySize){  return generateDerivedParameters(keySize);}  }
class C{  public final boolean coverage(){  return (getFlags() & F_COVERAGE) != 0;}  }
class C{  public static CCTintTo action(float t,ccColor3B c){  return new CCTintTo(t,c);}  }
class C{  private boolean isParentValid(ProjectTypeDef type,Map<String,ProjectTypeDef> pass1){  boolean contains=true;  for (  String parent : type.getParents()) {    if (!pass1.keySet().contains(parent)) {      LOG.error("Could not register Project Type: " + type.getId() + " : Unregistered parent Type: "+ parent);      contains=false;    }  }  if (type.getParents() != null && type.getParents().isEmpty() && !type.getId().equals(BASE_TYPE.getId())) {    type.addParent(BASE_TYPE.getId());  }  return contains;}  }
class C{  public Iterator<String> iterator(String s){  return map.getPrefixedBy(s);}  }
class C{  private void doStepWalking(){  if ((hive.distanceToSphere(this,true) + this.getSphereRadius()) >= hive.getSphereRadius()) {    headTo(hive);    forward();  } else {    turnBy(45 - r.nextDouble() * 90);    forward();  }}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  public final void addElements(Object value,int numberOfElements){  if ((m_firstFree + numberOfElements) >= m_mapSize) {    m_mapSize+=(m_blocksize + numberOfElements);    Object newMap[]=new Object[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  for (int i=0; i < numberOfElements; i++) {    m_map[m_firstFree]=value;    m_firstFree++;  }}  }
class C{  @PostConstruct void init(){  super.init(smTypeFilterHeader,smTypeFilterButtons,smTypeFilterButtonClick);  eventbus.subscribe(this);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public long skip(long n) throws IOException {  if (n < 0) {    throw new IllegalArgumentException("negative skip length");  }  ensureOpen();  int max=(int)Math.min(n,Integer.MAX_VALUE);  int total=0;  while (total < max) {    int len=max - total;    if (len > b.length) {      len=b.length;    }    len=read(b,0,len);    if (len == -1) {      reachEOF=true;      break;    }    total+=len;  }  return total;}  }
class C{  public static String encodePathQuery(final String unescaped,final String charset) throws URIException {  final int at=unescaped.indexOf('?');  if (at < 0) {    return encode(unescaped,URI.allowed_abs_path,charset);  }  return encode(unescaped.substring(0,at),URI.allowed_abs_path,charset) + '?' + encode(unescaped.substring(at + 1),URI.allowed_query,charset);}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public Graphics create(){  return new SpriteGraphics2D(this);}  }
class C{  public void internalEntityDecl(String name,String value) throws SAXException {}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() == bOK)   m_ok=true;  dispose();}  }
class C{  public boolean matchesWithCondition(final ConversationStates state,final Expression trigger,final PreTransitionCondition condition){  if (matches(state,trigger)) {    if (this.condition == condition) {      return true;    } else     if ((this.condition != null) && this.condition.equals(condition)) {      return true;    }  }  return false;}  }
class C{  public WSPortConnector(String remoteWsdlUrl,String userName,String password) throws IOException, WSDLException {  this(remoteWsdlUrl,userName,password,null);}  }
class C{  public boolean isPaintVLines(){  Object oo=get_Value(COLUMNNAME_IsPaintVLines);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void initView(View view){}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:35.586 -0500",hash_original_method="58C84EAE8A6F0E173B983D834F02804C",hash_generated_method="A5C0BD8252EEC05C3DBED48542EC8BED") @Override void initAnimation(){  if (!mInitialized) {    int numValues=mValues.length;    for (int i=0; i < numValues; ++i) {      mValues[i].setupSetterAndGetter(mTarget);    }    super.initAnimation();  }}  }
class C{  public static void removeAllChildren(Node node){  NodeList children=node.getChildNodes();  for (int i=0, length=children.getLength(); i < length; i++) {    node.removeChild(children.item(i));  }}  }
class C{  private static String normalizeFPNumber(String value,String minMantissa,String maxMantissa,String minExponent,String maxExponent){  value=collapseWhiteSpace(value);  if (value.contains(" ")) {    throwIAE("No space allowed in floating point lexical value (" + value + ")");  }  if (value.equals(POSITIVE_INFINITY) || value.equals(NEGATIVE_INFINITY) || value.equals(NaN)) {    return value;  }  int eIdx=value.indexOf('E');  if (eIdx == -1) {    eIdx=value.indexOf('e');  }  String mantissa, exponent;  if (eIdx == -1) {    mantissa=normalizeDecimal(value);    exponent="0";  } else {    mantissa=normalizeDecimal(value.substring(0,eIdx));    exponent=normalizeInteger(value.substring(eIdx + 1));  }  int shift=0;  int dotIdx=mantissa.indexOf('.');  int digitCount=dotIdx;  if (mantissa.charAt(0) == '-') {    digitCount--;  }  if (digitCount > 1) {    StringBuilder sb=new StringBuilder(mantissa.length());    int firstDigitIdx=0;    if (mantissa.charAt(0) == '-') {      sb.append('-');      firstDigitIdx=1;    }    sb.append(mantissa.charAt(firstDigitIdx));    sb.append('.');    sb.append(mantissa.substring(firstDigitIdx + 1,dotIdx));    sb.append(mantissa.substring(dotIdx + 1));    mantissa=sb.toString();    int nonZeroIdx=mantissa.length() - 1;    while (nonZeroIdx >= 3 && mantissa.charAt(nonZeroIdx) == '0') {      nonZeroIdx--;    }    if (nonZeroIdx < 3 && mantissa.charAt(0) == '-') {      nonZeroIdx++;    }    if (nonZeroIdx < mantissa.length() - 1) {      mantissa=mantissa.substring(0,nonZeroIdx + 1);    }    shift=1 - digitCount;  } else   if (mantissa.startsWith("0.") || mantissa.startsWith("-0.")) {    int nonZeroIdx=2;    boolean negative=false;    if (mantissa.charAt(0) == '-') {      nonZeroIdx++;      negative=true;    }    while (nonZeroIdx < mantissa.length() && mantissa.charAt(nonZeroIdx) == '0') {      nonZeroIdx++;    }    if (nonZeroIdx < mantissa.length()) {      StringBuilder sb=new StringBuilder(mantissa.length());      if (negative) {        sb.append('-');      }      sb.append(mantissa.charAt(nonZeroIdx));      sb.append('.');      if (nonZeroIdx == mantissa.length() - 1) {        sb.append('0');      } else {        sb.append(mantissa.substring(nonZeroIdx + 1));      }      mantissa=sb.toString();      shift=negative ? nonZeroIdx - 2 : nonZeroIdx - 1;    }  }  if (shift != 0) {    try {      int exp=Integer.parseInt(exponent);      exponent=String.valueOf(exp - shift);    } catch (    NumberFormatException e) {      throw new RuntimeException("NumberFormatException: " + e.getMessage());    }  }  if (minMantissa != null) {    if (compareCanonicalDecimals(mantissa,minMantissa) < 0) {      throwIAE("Mantissa smaller than minimum value (" + minMantissa + ")");    }  }  if (maxMantissa != null) {    if (compareCanonicalDecimals(mantissa,maxMantissa) > 0) {      throwIAE("Mantissa larger than maximum value (" + maxMantissa + ")");    }  }  if (minExponent != null) {    if (compareCanonicalIntegers(exponent,minExponent) < 0) {      throwIAE("Exponent smaller than minimum value (" + minExponent + ")");    }  }  if (maxExponent != null) {    if (compareCanonicalIntegers(exponent,maxExponent) > 0) {      throwIAE("Exponent larger than maximum value (" + maxExponent + ")");    }  }  return mantissa + "E" + exponent;}  }
class C{  public static float nextFloat(){synchronized (random) {    return random.nextFloat();  }}  }
class C{  public ChannelFuture sendRawPacketFuture(final ByteBuf packet){  final ChannelHandler handler=channel.pipeline().get("encoder");  return channel.pipeline().context(handler).writeAndFlush(packet);}  }
class C{  public long tryReadLock(){  for (; ; ) {    long s, m, next;    if ((m=(s=state) & ABITS) == WBIT)     return 0L; else     if (m < RFULL) {      if (U.compareAndSwapLong(this,STATE,s,next=s + RUNIT))       return next;    } else     if ((next=tryIncReaderOverflow(s)) != 0L)     return next;  }}  }
class C{  public String[] mappedColumns(final String index,final String type,final boolean forStaticDocument){  return mappedColumns(index,type,forStaticDocument,false);}  }
class C{  private static int unrandomize255State(int randomizedBase256Codeword,int base256CodewordPosition){  int pseudoRandomNumber=((149 * base256CodewordPosition) % 255) + 1;  int tempVariable=randomizedBase256Codeword - pseudoRandomNumber;  return tempVariable >= 0 ? tempVariable : tempVariable + 256;}  }
class C{  public final CC maxWidth(String size){  hor.setSize(LayoutUtil.derive(hor.getSize(),null,null,ConstraintParser.parseUnitValue(size,true)));  return this;}  }
class C{  public Entry(final ExchangeRate rate,final Date start,final Date end){  this.rate=(rate);  this.startDate=(start);  this.endDate=(end);}  }
class C{  @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {  return iface != null && iface.isAssignableFrom(getClass());}  }
class C{  public GenePm(LagGraph lagGraph){  if (lagGraph == null) {    throw new NullPointerException();  }  this.lagGraph=lagGraph;}  }
class C{  @Override public void parseStartElement(){  String ns=validatorInfo.getNameSpace();  String ln=validatorInfo.getLocalName();  if (ns.equals(RIConstants.CORE_NAMESPACE)) {switch (ln) {case "valueChangeListener":      handleListener();    break;case "actionListener":  handleListener();break;case "converter":handleConverter();break;case "validator":handleValidator();break;}}}  }
class C{  private static int guessFundamentalColor(Bitmap bitmap){  if (bitmap == null)   return FILLER_FALLBACK_COLOR;  int height=bitmap.getHeight();  int width=bitmap.getWidth();  if (height < 2 || width < 2)   return FILLER_FALLBACK_COLOR;  int[] pxColors=new int[9];  int idx=0;  if ((pxColors[idx]=sampleColor(bitmap,width / 2,height / 2)) != 0)   idx++;  if ((pxColors[idx]=sampleColor(bitmap,width / 2,height - 1)) != 0)   idx++;  if ((pxColors[idx]=sampleColor(bitmap,width - 1,height - 1)) != 0)   idx++;  if ((pxColors[idx]=sampleColor(bitmap,width - 1,height / 2)) != 0)   idx++;  if ((pxColors[idx]=sampleColor(bitmap,0,0)) != 0)   idx++;  if ((pxColors[idx]=sampleColor(bitmap,width / 2,0)) != 0)   idx++;  if ((pxColors[idx]=sampleColor(bitmap,width - 1,0)) != 0)   idx++;  if ((pxColors[idx]=sampleColor(bitmap,0,height / 2)) != 0)   idx++;  if ((pxColors[idx]=sampleColor(bitmap,0,height - 1)) != 0)   idx++;  int popColor=-1;  int popCount=-1;  for (int i=0; i < idx; i++) {    int thisColor=pxColors[i];    int thisCount=0;    for (int j=0; j < idx; j++) {      if (pxColors[j] == thisColor)       thisCount++;    }    if (thisCount > popCount) {      popColor=thisColor;      popCount=thisCount;    }  }  return popCount > -1 ? popColor : FILLER_FALLBACK_COLOR;}  }
class C{  private static void addVehicleType(Person p){  Id id=p.getId();  int subpopulation=getSubpopulationInt(p);  double random=MatsimRandom.getRandom().nextDouble();  String tollClass="Unknown";switch (subpopulation) {case 0:    tollClass="A2";  break;case 1:boolean intraGauteng=false;Object o=sc.getPopulation().getPersonAttributes().getAttribute(id.toString(),"intraGauteng");if (o == null) {} else {if (o instanceof Boolean) {intraGauteng=(Boolean)o;}}if (intraGauteng) {if (random <= 0.91) {tollClass="A2";} else if (random <= 1.0) {tollClass="B";} else {tollClass="C";}} else {if (random <= 0.5) {tollClass="A2";} else if (random <= 0.72) {tollClass="B";} else {tollClass="C";}}break;case 2:tollClass="B";break;case 3:tollClass="A2";break;case 4:tollClass="A2";break;}sc.getPopulation().getPersonAttributes().putAttribute(id.toString(),"vehicleTollClass",tollClass);}  }
class C{  public void close(){  this.sourceRanges=null;  this.parameterNames=null;  this.parametersRanges=null;  this.finalParameters=null;}  }
class C{  public void close(){  if (mLeakedException != null) {    getConnectionManager().shutdown();    mLeakedException=null;  }}  }
class C{  public static void writeln(long l,boolean flush){  write(l);  writelnWithFlush(flush);}  }
class C{  public static Main create(){  return new Main(null);}  }
class C{  public void clear(){  processQueue();  hash.clear();}  }
class C{  public StatechartRootItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void startTiming(){  if (Bukkit.getPluginManager().useTimings() && ++timingDepth == 1) {    start=System.nanoTime();    if (parent != null && ++parent.timingDepth == 1) {      parent.start=start;    }  }}  }
class C{  public Matrix4x3d arcball(double radius,Vector3dc center,double angleX,double angleY){  return arcball(radius,center.x(),center.y(),center.z(),angleX,angleY,this);}  }
class C{  public MLDouble(String name,Double[] vals,int m){  super(name,MLArray.mxDOUBLE_CLASS,vals,m);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ExpressionsPackage.PARENTHESIZED_EXPRESSION__EXPRESSION:    return expression != null;}return super.eIsSet(featureID);}  }
class C{  @Override public void run(){  amIActive=true;  String streamsLinkIDHeader=null;  String pointerHeader=null;  String DEMHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  int i, c;  double z;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsLinkIDHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      DEMHeader=args[i];    } else     if (i == 3) {      outputHeader=args[i];    }  }  if ((streamsLinkIDHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streamID=new WhiteboxRaster(streamsLinkIDHeader,"r");    int rows=streamID.getNumberRows();    int cols=streamID.getNumberColumns();    double noData=streamID.getNoDataValue();    double gridResX=streamID.getCellSizeX();    double gridResY=streamID.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    double maxLinkID=streamID.getMaximumValue();    double[] linkLengths=new double[(int)maxLinkID + 1];    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster DEM=new WhiteboxRaster(DEMHeader,"r");    if (DEM.getNumberRows() != rows || DEM.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsLinkIDHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    double[][] linkRelief=new double[3][(int)maxLinkID + 1];    for (c=0; c <= maxLinkID; c++) {      linkRelief[0][c]=99999999;      linkRelief[1][c]=-99999999;    }    byte numNeighbouringStreamCells=0;    double currentID=0;    double linkLength=0;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streamID.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streamID.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            linkLength=0;            currentID=streamID.getValue(y,x);            flag=true;            do {              z=DEM.getValue(y,x);              if (z < linkRelief[0][(int)currentID]) {                linkRelief[0][(int)currentID]=z;              }              if (z > linkRelief[1][(int)currentID]) {                linkRelief[1][(int)currentID]=z;              }              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                linkLength+=gridLengths[c];                x+=dX[c];                y+=dY[c];                if (streamID.getValue(y,x) != currentID) {                  linkLengths[(int)(currentID)]=linkLength;                  currentID=streamID.getValue(y,x);                  if (currentID != noData) {                    linkLength=0;                    if (linkLengths[(int)currentID] > 0) {                      flag=false;                    }                  } else {                    flag=false;                  }                }              } else {                linkLengths[(int)currentID]=linkLength;                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    for (i=1; i <= maxLinkID; i++) {      linkRelief[2][i]=(linkRelief[1][i] - linkRelief[0][i]) / linkLengths[i] * 100;    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streamID.getValue(row,col) > 0) {          currentID=streamID.getValue(row,col);          output.setValue(row,col,linkRelief[2][(int)currentID]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streamID.close();    output.close();    returnData(outputHeader);    String retData="Stream Link Slope Output\n";    for (i=1; i <= maxLinkID; i++) {      retData=retData + i + "\t"+ linkRelief[2][i]+ "\n";    }    returnData(retData);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void processPorts(CWLJob parentJob,CWLJob job,List<? extends ApplicationPort> ports) throws CWLException {  for (  ApplicationPort port : ports) {    setScatter(job,port);    if (parentJob != null) {      setScatter(parentJob,port);    }    if (parentJob != null && parentJob.getApp().isWorkflow()) {      CWLWorkflow workflowApp=(CWLWorkflow)parentJob.getApp();      processDataLinks(workflowApp.getDataLinks(),port,job,true);    }    if (job != null && job.getApp().isWorkflow()) {      CWLWorkflow workflowApp=(CWLWorkflow)job.getApp();      processDataLinks(workflowApp.getDataLinks(),port,job,false);    }    if (job.getApp().isCommandLineTool() && port instanceof CWLOutputPort) {      Object type=port.getSchema();      if (CWLSchemaHelper.TYPE_JOB_FILE.equals(type)) {        Object outputBinding=((CWLOutputPort)port).getOutputBinding();        if (outputBinding != null) {          Object glob=CWLBindingHelper.getGlob(outputBinding);          if (outputBinding != null && glob != null && glob instanceof String) {            if (((String)glob).startsWith(CWLCommandLineTool.RANDOM_STDOUT_PREFIX)) {              ((CWLCommandLineTool)job.getApp()).setStdout(glob);            } else             if (((String)glob).startsWith(CWLCommandLineTool.RANDOM_STDERR_PREFIX)) {              ((CWLCommandLineTool)job.getApp()).setStderr(glob);            }          }        }      }    }  }}  }
class C{  public void testSuccessWithSuccessThresholdAndFailureRatio(){  CircuitBreaker breaker=new CircuitBreaker().withFailureThreshold(3,5).withSuccessThreshold(2);  breaker.halfOpen();  HalfOpenState state=new HalfOpenState(breaker);  state.recordSuccess();  assertFalse(breaker.isOpen());  assertFalse(breaker.isClosed());  state.recordSuccess();  assertTrue(breaker.isClosed());}  }
class C{  public static List<NamespaceDto> transformToDto(List<Namespace> namespaces){  if (namespaces == null) {    throw new WebApplicationException("Null entity object cannot be converted to Dto object.",Status.INTERNAL_SERVER_ERROR);  }  List<NamespaceDto> result=new ArrayList<>();  for (  Namespace namespace : namespaces) {    result.add(transformToDto(namespace));  }  return result;}  }
class C{  public ToStringBuilder append(String fieldName,Object obj,boolean fullDetail){  style.append(buffer,fieldName,obj,BooleanUtils.toBooleanObject(fullDetail));  return this;}  }
class C{  public static boolean isBlockWhitelisted(Block block){  return whitelist.contains(block);}  }
class C{  public static void directOutput(OutputStream os,boolean alsoToOutStream){  outputLog=new DataOutputStream(os);  notifyOut=alsoToOutStream;}  }
class C{  public ClientIndexViewRefactor(final AbstractScaleOutFederation fed,final String name,final long timestamp,final IMetadataIndex metadataIndex){  super(fed,name,timestamp,metadataIndex);}  }
class C{  public static <T>Collection<T> each(Collection<T> self,@ClosureParams(FirstParam.FirstGenericType.class) Closure closure){  return (Collection<T>)each((Iterable<T>)self,closure);}  }
class C{  public URI(String scheme,String authority,String path,String query,String fragment) throws URISyntaxException {  if (scheme != null && path != null && !path.isEmpty() && path.charAt(0) != '/') {    throw new URISyntaxException(path,"Relative path");  }  StringBuilder uri=new StringBuilder();  if (scheme != null) {    uri.append(scheme);    uri.append(':');  }  if (authority != null) {    uri.append("//");    AUTHORITY_ENCODER.appendEncoded(uri,authority);  }  if (path != null) {    PATH_ENCODER.appendEncoded(uri,path);  }  if (query != null) {    uri.append('?');    ALL_LEGAL_ENCODER.appendEncoded(uri,query);  }  if (fragment != null) {    uri.append('#');    ALL_LEGAL_ENCODER.appendEncoded(uri,fragment);  }  parseURI(uri.toString(),false);}  }
class C{  public static Object callName0(String name,Context cx,Scriptable scope){  Callable f=getNameFunctionAndThis(name,cx,scope);  Scriptable thisObj=lastStoredScriptable(cx);  return f.call(cx,scope,thisObj,ScriptRuntime.emptyArgs);}  }
class C{  @Override public void onPageSelected(int position){  mIndexOfPager=position;}  }
class C{  public DeleteArguments(boolean deleteProjectContents){  fDeleteProjectContents=deleteProjectContents;}  }
class C{  public Object keyFromColumnData(Object[] columnData){  return columnData == null ? null : keyGenerator.apply(columnData);}  }
class C{  private List<FloatPoint> obtainPoints(Path path){  List<FloatPoint> floatPoints=new ArrayList<>();  for (float i=0; i < pointsNumber; i++) {    float fraction=i / pointsNumber;    float[] cords=getPathCoordinates(path,fraction);    if (cords[0] != 0 && cords[1] != 0) {      FloatPoint point=new FloatPoint(cords[0],cords[1]);      floatPoints.add(point);    }  }  return floatPoints;}  }
class C{  public static void registerExtensionPointAndExtensions(@NotNull File pluginRoot,@NotNull String fileName,@NotNull ExtensionsArea area){  IdeaPluginDescriptorImpl descriptor;  if (pluginRoot.isDirectory()) {    descriptor=loadDescriptorFromDir(pluginRoot,fileName);  } else {    descriptor=loadDescriptorFromJar(pluginRoot,fileName);  }  if (descriptor != null) {    registerExtensionPointsAndExtensions(area,Collections.singletonList(descriptor));  } else {    getLogger().error("Cannot load " + fileName + " from "+ pluginRoot);  }}  }
class C{  public synchronized void mouseRelease(int buttons){  checkButtonsArgument(buttons);  peer.mouseRelease(buttons);  afterEvent();}  }
class C{  private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){  try {    PackageManager pm=context.getPackageManager();    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);    if (handlers == null || handlers.size() == 0) {      return false;    }    for (    ResolveInfo resolveInfo : handlers) {      IntentFilter filter=resolveInfo.filter;      if (filter == null)       continue;      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;      if (resolveInfo.activityInfo == null)       continue;      return true;    }  } catch (  RuntimeException e) {    Log.e(TAG,"Runtime exception while getting specialized handlers");  }  return false;}  }
class C{  @Override public Result decode(BinaryBitmap image,Map<DecodeHintType,?> hints) throws NotFoundException {  setHints(hints);  return decodeInternal(image);}  }
class C{  public LoginException(){  super();}  }
class C{  private void processRequest(String act,HttpServletRequest req,HttpServletResponse res){  res.setContentType("application/json");  res.setCharacterEncoding("UTF-8");  GridRestCommand cmd=command(req);  if (cmd == null) {    res.setStatus(HttpServletResponse.SC_BAD_REQUEST);    return;  }  if (!authChecker.apply(req.getHeader("X-Signature"))) {    res.setStatus(HttpServletResponse.SC_UNAUTHORIZED);    return;  }  GridRestResponse cmdRes;  Map<String,Object> params=parameters(req);  try {    GridRestRequest cmdReq=createRequest(cmd,params,req);    if (log.isDebugEnabled())     log.debug("Initialized command request: " + cmdReq);    cmdRes=hnd.handle(cmdReq);    if (cmdRes == null)     throw new IllegalStateException("Received null result from handler: " + hnd);    byte[] sesTok=cmdRes.sessionTokenBytes();    if (sesTok != null)     cmdRes.setSessionToken(U.byteArray2HexString(sesTok));    res.setStatus(HttpServletResponse.SC_OK);  } catch (  Throwable e) {    res.setStatus(HttpServletResponse.SC_OK);    U.error(log,"Failed to process HTTP request [action=" + act + ", req="+ req+ ']',e);    cmdRes=new GridRestResponse(STATUS_FAILED,e.getMessage());    if (e instanceof Error)     throw (Error)e;  }  String json;  try {    json=jsonMapper.writeValueAsString(cmdRes);  } catch (  JsonProcessingException e1) {    U.error(log,"Failed to convert response to JSON: " + cmdRes,e1);    GridRestResponse resFailed=new GridRestResponse(STATUS_FAILED,e1.getMessage());    try {      json=jsonMapper.writeValueAsString(resFailed);    } catch (    JsonProcessingException e2) {      json="{\"successStatus\": \"1\", \"error:\" \"" + e2.getMessage() + "\"}}";    }  }  try {    if (log.isDebugEnabled())     log.debug("Parsed command response into JSON object: " + json);    res.getWriter().write(json);    if (log.isDebugEnabled())     log.debug("Processed HTTP request [action=" + act + ", jsonRes="+ cmdRes+ ", req="+ req+ ']');  } catch (  IOException e) {    U.error(log,"Failed to send HTTP response: " + json,e);  }}  }
class C{  public void testFullImportInnerEntity(){  assertQ(req("*:*"),"//result[@numFound='0']");  try {    List<Map<String,Object>> DOCS=new ArrayList<>(DB_DOCS);    Map<String,Object> doc=new HashMap<>();    doc.put("dbid_s","2");    doc.put("dbdesc_s","DbDescription2");    DOCS.add(doc);    MockDataSource.setIterator("select * from x",DOCS.iterator());    DOCS=new ArrayList<>(SOLR_DOCS);    Map<String,Object> solrDoc=new HashMap<>();    solrDoc.put("id","2");    solrDoc.put("desc","SolrDescription2");    DOCS.add(solrDoc);    addDocumentsToSolr(DOCS);    runFullImport(getDihConfigTagsInnerEntity());  } catch (  Exception e) {    LOG.error(e.getMessage(),e);    fail(e.getMessage());  } finally {    MockDataSource.clearCache();  }  assertQ(req("*:*"),"//result[@numFound='2']");  assertQ(req("id:1"),"//result/doc/str[@name='id'][.='1']","//result/doc/str[@name='dbdesc_s'][.='DbDescription']","//result/doc/str[@name='dbid_s'][.='1']","//result/doc/arr[@name='desc'][.='SolrDescription']");  assertQ(req("id:2"),"//result/doc/str[@name='id'][.='2']","//result/doc/str[@name='dbdesc_s'][.='DbDescription2']","//result/doc/str[@name='dbid_s'][.='2']","//result/doc/arr[@name='desc'][.='SolrDescription2']");}  }
class C{  public static void verifyAggregate(final QueryBase queryBase) throws VisitorException {  final ProjectionNode projection=queryBase.getProjection() == null ? null : queryBase.getProjection().isEmpty() ? null : queryBase.getProjection();  final GroupByNode groupBy=queryBase.getGroupBy() == null ? null : queryBase.getGroupBy().isEmpty() ? null : queryBase.getGroupBy();  final HavingNode having=queryBase.getHaving() == null ? null : queryBase.getHaving().isEmpty() ? null : queryBase.getHaving();  final boolean isAggregate=StaticAnalysis.isAggregate(projection,groupBy,having);  if (isAggregate) {    if (projection.isWildcard())     throw new VisitorException("Wildcard not allowed with aggregate.");    try {      new VerifyAggregates(projection,groupBy,having);    } catch (    final IllegalArgumentException ex) {      throw new VisitorException("Bad aggregate",ex);    }  }}  }
class C{  public boolean hasRole(String role){  return false;}  }
class C{  public boolean NE(Address addr2){  return value.NE(addr2.value);}  }
class C{  public CsvFileSet(Table stageTableMetadata,Table baseTableMetadata,long startSeqno){  this.baseTableMetadata=baseTableMetadata;  this.stageTableMetadata=stageTableMetadata;  this.startSeqno=startSeqno;  baseFileName=baseTableMetadata.getSchema() + "-" + baseTableMetadata.getName();}  }
class C{  public CryptographyStrengthAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,null);  putValue(LONG_DESCRIPTION,res.getString("CryptographyStrengthAction.statusbar"));  putValue(NAME,res.getString("CryptographyStrengthAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("CryptographyStrengthAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("CryptographyStrengthAction.image")))));}  }
class C{  public X509Certificate generate(PrivateKey key,String provider,SecureRandom random) throws CertificateEncodingException, IllegalStateException, NoSuchProviderException, NoSuchAlgorithmException, SignatureException, InvalidKeyException {  TBSCertificate tbsCert=tbsGen.generateTBSCertificate();  byte[] signature;  try {    signature=X509Util.calculateSignature(sigOID,signatureAlgorithm,provider,key,random,tbsCert);  } catch (  IOException e) {    throw new ExtCertificateEncodingException("exception encoding TBS cert",e);  }  return generateJcaObject(tbsCert,signature);}  }
class C{  protected final static int word(final long index){  if (ASSERTS)   assert index >>> LOG2_BITS_PER_WORD <= Integer.MAX_VALUE;  return (int)(index >> LOG2_BITS_PER_WORD);}  }
class C{  protected void enableOriginStorageUnitImpl(BusinessObjectDataRestoreDto businessObjectDataRestoreDto){  BusinessObjectDataEntity businessObjectDataEntity=businessObjectDataDaoHelper.getBusinessObjectDataEntity(businessObjectDataRestoreDto.getBusinessObjectDataKey());  StorageUnitEntity originStorageUnitEntity=storageUnitDaoHelper.getStorageUnitEntity(businessObjectDataRestoreDto.getOriginStorageName(),businessObjectDataEntity);  StorageUnitStatusEntity newStorageUnitStatusEntity=storageUnitStatusDaoHelper.getStorageUnitStatusEntity(StorageUnitStatusEntity.ENABLED);  String oldStorageUnitStatus=originStorageUnitEntity.getStatus().getCode();  storageUnitDaoHelper.updateStorageUnitStatus(originStorageUnitEntity,newStorageUnitStatusEntity,StorageUnitStatusEntity.ENABLED);  businessObjectDataRestoreDto.setNewOriginStorageUnitStatus(newStorageUnitStatusEntity.getCode());  businessObjectDataRestoreDto.setOldOriginStorageUnitStatus(oldStorageUnitStatus);}  }
class C{  public MainWindow(final CProjectMainFrame window){  m_window=window;}  }
class C{  public int read(BufferedInputStream is){  init();  if (is != null) {    in=is;    readHeader();    if (!err()) {      readContents();      if (frameCount < 0) {        status=STATUS_FORMAT_ERROR;      }    }  } else {    status=STATUS_OPEN_ERROR;  }  try {    is.close();  } catch (  IOException e) {  }  return status;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(VALUE).setRequired(true);}  }
class C{  public void compare(String argv[],int index) throws IOException {  final int driver_cnt=argv.length - index;  GCParserDriver d[]=new GCParserDriver[driver_cnt];  for (int i=0; i < driver_cnt; ++i) {    String new_name=argv[index + i];    d[i]=new GCParserDriver(_actions,_enabled_map,new_name + ".",_suffix,_cpu_count);    d[i].parse(new File(new_name));    if (should_print()) {      d[i].print_statistics(System.out,new_name);    }    if (should_save())     d[i].save_data();  }  final boolean terse=_actions.get(TERSE);  for (int i=1; i < driver_cnt; ++i) {    compare_statistics(System.out,argv[index],d[0],argv[index + i],d[i],terse);  }}  }
class C{  public void deleteBackupFiles(List<String> backupFiles) throws IOException {  String backupFileLocation=McUtils.getDirectoryLocation(FileUtils.getFile(AppProperties.getInstance().getBackupSettings().getBackupLocation()).getCanonicalPath());  for (  String backupFile : backupFiles) {    String fileFullPath=backupFileLocation + backupFile;    if (McUtils.isInScope(backupFileLocation,fileFullPath)) {      if (FileUtils.deleteQuietly(FileUtils.getFile(fileFullPath))) {        _logger.debug("File deleted successfully! {}",fileFullPath);      } else {        _logger.warn("File deletion failed! {}",fileFullPath);      }    } else {      _logger.warn("Trying to delete file from outside scope! Filepath:{}, CanonicalPath:{}",fileFullPath,FileUtils.getFile(fileFullPath).getCanonicalPath());    }  }}  }
class C{  private Properties jpaProperties(){  Properties properties=new Properties();  String hibernateDialect=configurationHelper.getProperty(ConfigurationValue.HIBERNATE_DIALECT);  if (StringUtils.isBlank(hibernateDialect)) {    throw new IllegalStateException(String.format("No hibernate dialect found. Ensure the \"%s\" configuration entry is configured.",ConfigurationValue.HIBERNATE_DIALECT.getKey()));  }  properties.setProperty(ConfigurationValue.HIBERNATE_DIALECT.getKey(),hibernateDialect);  LOGGER.info("hibernateDialect={}",properties.getProperty(ConfigurationValue.HIBERNATE_DIALECT.getKey()));  properties.setProperty("hibernate.query.substitutions","true='Y', false='N', yes='Y', no='N'");  properties.setProperty("hibernate.cache.region.factory_class","org.hibernate.cache.ehcache.EhCacheRegionFactory");  properties.setProperty("hibernate.cache.use_query_cache","true");  properties.setProperty("hibernate.cache.use_second_level_cache","true");  properties.setProperty(ConfigurationValue.SHOW_SQL.getKey(),configurationHelper.getProperty(ConfigurationValue.SHOW_SQL));  LOGGER.info("hibernateShowSql={}",properties.getProperty(ConfigurationValue.SHOW_SQL.getKey()));  properties.setProperty("hibernate.archive.autodetection","class, hbm");  String hibernateHbm2DdlAutoParam=getHibernateHbm2DdlAutoParam();  if (StringUtils.isNotBlank(hibernateHbm2DdlAutoParam)) {    properties.setProperty("hibernate.hbm2ddl.auto",hibernateHbm2DdlAutoParam);  }  return properties;}  }
class C{  @JsfTest(JsfVersion.JSF_2_2_1) @Test public void testBooleanCheckboxSubmittedValue() throws Exception {  HtmlPage page=webClient.getPage(webUrl + "/faces/flash01.xhtml");  HtmlButtonInput button=(HtmlButtonInput)page.getElementById("nextButton");  page=button.click();  assertTrue(page.asText().contains("foo = bar"));  Cookie cookie=webClient.getCookieManager().getCookie("csfcfc");  assertTrue(cookie.isHttpOnly());  page=webClient.getPage(webUrl + "/faces/flash01.xhtml");  HtmlAnchor link=(HtmlAnchor)page.getElementById("nextLink");  page=link.click();  assertTrue(page.asText().contains("foo = bar"));  cookie=webClient.getCookieManager().getCookie("csfcfc");  assertTrue(cookie.isHttpOnly());  page=webClient.getPage(webUrl + "/faces/flash01.xhtml");  link=(HtmlAnchor)page.getElementById("nextCommandLink");  page=link.click();  assertTrue(page.asText().contains("foo = bar"));  cookie=webClient.getCookieManager().getCookie("csfcfc");  assertTrue(cookie.isHttpOnly());  page=webClient.getPage(webUrl + "/faces/flash01.xhtml");  HtmlSubmitInput submitButton=(HtmlSubmitInput)page.getElementById("nextCommandButton");  page=submitButton.click();  assertTrue(page.asText().contains("foo = bar"));  cookie=webClient.getCookieManager().getCookie("csfcfc");  assertTrue(cookie.isHttpOnly());}  }
class C{  public ProjectSelection(Project[] projects,boolean assetOnly){  super(new JFrame(),true);  initComponents();  setLocationRelativeTo(null);  this.projects=projects;  jComboBox1.removeAllItems();  for (int i=0; i < projects.length; i++) {    Project project=projects[i];    ProjectAssetManager manager=project.getLookup().lookup(ProjectAssetManager.class);    if (assetOnly == false || manager != null) {      ProjectInformation info=project.getLookup().lookup(ProjectInformation.class);      jComboBox1.addItem(info.getName());    }  }}  }
class C{  public StandardJavaElementContentProvider(boolean provideMembers){  fProvideMembers=provideMembers;  fProvideWorkingCopy=provideMembers;}  }
class C{  public static void initNamespaces(Graph graph){  PrefixMapping prefixMapping=graph.getPrefixMapping();  initNamespaces(prefixMapping);}  }
class C{  public static boolean isHighSurrogate(int c){  return (0xD800 <= c && c <= 0xDBFF);}  }
class C{  public static List<Object> removeNullFromList(List<Object> list){  return list.stream().filter(null).collect(Collectors.toList());}  }
class C{  public void addCallEventListener(Listener<CallEvent> listener){  mCallEventBroadcaster.addListener(listener);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  double minVal;  double maxVal;  double centreValue;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  filterSizeX=Integer.parseInt(args[2]);  filterSizeY=Integer.parseInt(args[3]);  filterRounded=Boolean.parseBoolean(args[4]);  reflectAtBorders=Boolean.parseBoolean(args[5]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    double largeVal=Double.MAX_VALUE;    double smallVal=Double.MIN_VALUE;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=inputFile.getValue(row,col);        if (centreValue != noData) {          minVal=largeVal;          maxVal=smallVal;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              if (x != col && y != row) {                if (z < minVal) {                  minVal=z;                }                if (z > maxVal) {                  maxVal=z;                }              }            }          }          if (centreValue > maxVal) {            outputFile.setValue(row,col,maxVal);          } else           if (centreValue < minVal) {            outputFile.setValue(row,col,minVal);          } else {            outputFile.setValue(row,col,centreValue);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Boolean isVmNpivWwnUpdateSupported(){  return vmNpivWwnUpdateSupported;}  }
class C{  public CacheMetricsSnapshot(CacheMetrics loc,Collection<CacheMetrics> metrics){  cacheName=loc.name();  isEmpty=loc.isEmpty();  isWriteBehindEnabled=loc.isWriteBehindEnabled();  writeBehindFlushSize=loc.getWriteBehindFlushSize();  writeBehindFlushThreadCnt=loc.getWriteBehindFlushThreadCount();  writeBehindFlushFreq=loc.getWriteBehindFlushFrequency();  writeBehindStoreBatchSize=loc.getWriteBehindStoreBatchSize();  writeBehindBufSize=loc.getWriteBehindBufferSize();  size=loc.getSize();  keySize=loc.getKeySize();  keyType=loc.getKeyType();  valType=loc.getValueType();  isStoreByVal=loc.isStoreByValue();  isStatisticsEnabled=loc.isStatisticsEnabled();  isManagementEnabled=loc.isManagementEnabled();  isReadThrough=loc.isReadThrough();  isWriteThrough=loc.isWriteThrough();  offHeapMaxSize=loc.getOffHeapMaxSize();  for (  CacheMetrics e : metrics) {    reads+=e.getCacheGets();    puts+=e.getCachePuts();    hits+=e.getCacheHits();    misses+=e.getCacheMisses();    txCommits+=e.getCacheTxCommits();    txRollbacks+=e.getCacheTxRollbacks();    evicts+=e.getCacheEvictions();    removes+=e.getCacheRemovals();    putAvgTimeNanos+=e.getAveragePutTime();    getAvgTimeNanos+=e.getAverageGetTime();    rmvAvgTimeNanos+=e.getAverageRemoveTime();    commitAvgTimeNanos+=e.getAverageTxCommitTime();    rollbackAvgTimeNanos+=e.getAverageTxRollbackTime();    if (e.getOverflowSize() > -1)     overflowSize+=e.getOverflowSize(); else     overflowSize=-1;    offHeapGets+=e.getOffHeapGets();    offHeapPuts+=e.getOffHeapPuts();    offHeapRemoves+=e.getOffHeapRemovals();    offHeapEvicts+=e.getOffHeapEvictions();    offHeapHits+=e.getOffHeapHits();    offHeapMisses+=e.getOffHeapMisses();    offHeapEntriesCnt+=e.getOffHeapEntriesCount();    offHeapPrimaryEntriesCnt+=e.getOffHeapPrimaryEntriesCount();    offHeapBackupEntriesCnt+=e.getOffHeapBackupEntriesCount();    offHeapAllocatedSize+=e.getOffHeapAllocatedSize();    swapGets+=e.getSwapGets();    swapPuts+=e.getSwapPuts();    swapRemoves+=e.getSwapRemovals();    swapHits+=e.getSwapHits();    swapMisses+=e.getSwapMisses();    swapEntriesCnt+=e.getSwapEntriesCount();    swapSize+=e.getSwapSize();    if (e.getDhtEvictQueueCurrentSize() > -1)     dhtEvictQueueCurrSize+=e.getDhtEvictQueueCurrentSize(); else     dhtEvictQueueCurrSize=-1;    txThreadMapSize+=e.getTxThreadMapSize();    txXidMapSize+=e.getTxXidMapSize();    txCommitQueueSize+=e.getTxCommitQueueSize();    txPrepareQueueSize+=e.getTxPrepareQueueSize();    txStartVerCountsSize+=e.getTxStartVersionCountsSize();    txCommittedVersionsSize+=e.getTxCommittedVersionsSize();    txRolledbackVersionsSize+=e.getTxRolledbackVersionsSize();    if (e.getTxDhtThreadMapSize() > -1)     txDhtThreadMapSize+=e.getTxDhtThreadMapSize(); else     txDhtThreadMapSize=-1;    if (e.getTxDhtXidMapSize() > -1)     txDhtXidMapSize+=e.getTxDhtXidMapSize(); else     txDhtXidMapSize=-1;    if (e.getTxDhtCommitQueueSize() > -1)     txDhtCommitQueueSize+=e.getTxDhtCommitQueueSize(); else     txDhtCommitQueueSize=-1;    if (e.getTxDhtPrepareQueueSize() > -1)     txDhtPrepareQueueSize+=e.getTxDhtPrepareQueueSize(); else     txDhtPrepareQueueSize=-1;    if (e.getTxDhtStartVersionCountsSize() > -1)     txDhtStartVerCountsSize+=e.getTxDhtStartVersionCountsSize(); else     txDhtStartVerCountsSize=-1;    if (e.getTxDhtCommittedVersionsSize() > -1)     txDhtCommittedVersionsSize+=e.getTxDhtCommittedVersionsSize(); else     txDhtCommittedVersionsSize=-1;    if (e.getTxDhtRolledbackVersionsSize() > -1)     txDhtRolledbackVersionsSize+=e.getTxDhtRolledbackVersionsSize(); else     txDhtRolledbackVersionsSize=-1;    if (e.getWriteBehindTotalCriticalOverflowCount() > -1)     writeBehindTotalCriticalOverflowCnt+=e.getWriteBehindTotalCriticalOverflowCount(); else     writeBehindTotalCriticalOverflowCnt=-1;    if (e.getWriteBehindCriticalOverflowCount() > -1)     writeBehindCriticalOverflowCnt+=e.getWriteBehindCriticalOverflowCount(); else     writeBehindCriticalOverflowCnt=-1;    if (e.getWriteBehindErrorRetryCount() > -1)     writeBehindErrorRetryCnt+=e.getWriteBehindErrorRetryCount(); else     writeBehindErrorRetryCnt=-1;  }  int size=metrics.size();  if (size > 1) {    putAvgTimeNanos/=size;    getAvgTimeNanos/=size;    rmvAvgTimeNanos/=size;    commitAvgTimeNanos/=size;    rollbackAvgTimeNanos/=size;  }}  }
class C{  public int read() throws IOException {  return read(tempBuf,0,1) == -1 ? -1 : (tempBuf[0] & 0xFF);}  }
class C{  private ThrowableSet add(Set addedExceptions){  Set resultSet=new HashSet(this.exceptionsIncluded);  int changes=0;  FastHierarchy hierarchy=Scene.v().getOrMakeFastHierarchy();  for (Iterator i=addedExceptions.iterator(); i.hasNext(); ) {    RefLikeType newType=(RefLikeType)i.next();    if (!resultSet.contains(newType)) {      boolean addNewType=true;      if (newType instanceof RefType) {        for (Iterator j=resultSet.iterator(); j.hasNext(); ) {          RefLikeType incumbentType=(RefLikeType)j.next();          if (incumbentType instanceof RefType) {            if (newType == incumbentType) {              throw new IllegalStateException("ThrowableSet.add(Set): resultSet.contains() failed to screen duplicate RefType " + newType);            }          } else           if (incumbentType instanceof AnySubType) {            RefType incumbentBase=((AnySubType)incumbentType).getBase();            if (hierarchy.canStoreType(newType,incumbentBase)) {              addNewType=false;            }          } else {            throw new IllegalStateException("ThrowableSet.add(Set): incumbent Set element " + incumbentType + " is neither a RefType nor an AnySubType.");          }        }      } else       if (newType instanceof AnySubType) {        RefType newBase=((AnySubType)newType).getBase();        for (Iterator j=resultSet.iterator(); j.hasNext(); ) {          RefLikeType incumbentType=(RefLikeType)j.next();          if (incumbentType instanceof RefType) {            RefType incumbentBase=(RefType)incumbentType;            if (hierarchy.canStoreType(incumbentBase,newBase)) {              j.remove();              changes++;            }          } else           if (incumbentType instanceof AnySubType) {            RefType incumbentBase=((AnySubType)incumbentType).getBase();            if (newBase == incumbentBase) {              throw new IllegalStateException("ThrowableSet.add(Set): resultSet.contains() failed to screen duplicate AnySubType " + newBase);            } else             if (hierarchy.canStoreType(incumbentBase,newBase)) {              j.remove();              changes++;            } else             if (hierarchy.canStoreType(newBase,incumbentBase)) {              addNewType=false;            }          } else {            throw new IllegalStateException("ThrowableSet.add(Set): old Set element " + incumbentType + " is neither a RefType nor an AnySubType.");          }        }      } else {        throw new IllegalArgumentException("ThrowableSet.add(Set): new Set element " + newType + " is neither a RefType nor an AnySubType.");      }      if (addNewType) {        changes++;        resultSet.add(newType);      }    }  }  ThrowableSet result=null;  if (changes > 0) {    result=Manager.v().registerSetIfNew(resultSet,this.exceptionsExcluded);  } else {    result=this;  }  return result;}  }
class C{  public void clear(){  int h=head;  int t=tail;  if (h != t) {    head=tail=0;    int i=h;    int mask=elements.length - 1;    do {      elements[i]=null;      i=(i + 1) & mask;    } while (i != t);  }}  }
class C{  public static String convertIpSegmentToHex(int ipSegment){  return convertToHex(ipSegment,2);}  }
class C{  public void testReplicatedLoadFromClient() throws Exception {  cacheMode=CacheMode.REPLICATED;  factory=new Factory3();  startGrids(2);  Ignite client=startGrid("client-1");  IgniteCache cache=client.cache(CACHE_NAME);  cache.loadCache(null);  assertEquals(0,cache.localSize(CachePeekMode.ALL));  assertEquals(10,grid(0).cache(CACHE_NAME).localSize(CachePeekMode.ALL));  assertEquals(10,grid(1).cache(CACHE_NAME).localSize(CachePeekMode.ALL));  assert !loadedFromClient : "Loaded data from client!";}  }
class C{  public boolean isGeneratedDraft(){  Object oo=get_Value(COLUMNNAME_IsGeneratedDraft);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public OFVendorDataType(){  super();}  }
class C{  private byte[] generateDerivedKey(int idByte,int n){  byte[] D=new byte[v];  byte[] dKey=new byte[n];  for (int i=0; i != D.length; i++) {    D[i]=(byte)idByte;  }  byte[] S;  if ((salt != null) && (salt.length != 0)) {    S=new byte[v * ((salt.length + v - 1) / v)];    for (int i=0; i != S.length; i++) {      S[i]=salt[i % salt.length];    }  } else {    S=new byte[0];  }  byte[] P;  if ((password != null) && (password.length != 0)) {    P=new byte[v * ((password.length + v - 1) / v)];    for (int i=0; i != P.length; i++) {      P[i]=password[i % password.length];    }  } else {    P=new byte[0];  }  byte[] I=new byte[S.length + P.length];  System.arraycopy(S,0,I,0,S.length);  System.arraycopy(P,0,I,S.length,P.length);  byte[] B=new byte[v];  int c=(n + u - 1) / u;  byte[] A=new byte[u];  for (int i=1; i <= c; i++) {    digest.update(D,0,D.length);    digest.update(I,0,I.length);    digest.doFinal(A,0);    for (int j=1; j < iterationCount; j++) {      digest.update(A,0,A.length);      digest.doFinal(A,0);    }    for (int j=0; j != B.length; j++) {      B[j]=A[j % A.length];    }    for (int j=0; j != I.length / v; j++) {      adjust(I,j * v,B);    }    if (i == c) {      System.arraycopy(A,0,dKey,(i - 1) * u,dKey.length - ((i - 1) * u));    } else {      System.arraycopy(A,0,dKey,(i - 1) * u,A.length);    }  }  return dKey;}  }
class C{  private static Properties parseEnv(String input,String prefix){  Properties prop=new Properties();  String separator=System.getProperty("line.separator","\n");  StringTokenizer st=new StringTokenizer(input,separator);  while (st.hasMoreTokens()) {    String s=st.nextToken();    int pos=s.indexOf('=');    if (pos > 0)     prop.setProperty(prefix + s.substring(0,pos),s.substring(pos + 1));  }  if (DEBUG)   System.out.println("** Loaded " + prop.size() + " Properties");  return prop;}  }
class C{  public void rollback(){  try {    m_trx.rollback();    m_trx.close();  } catch (  Exception e) {  }}  }
class C{  @Override public void roll(int field,int value){  if (value == 0) {    return;  }  if (field < 0 || field >= ZONE_OFFSET) {    throw new IllegalArgumentException();  }  complete();  int days, day, mod, maxWeeks, newWeek;  int max=-1;switch (field) {case YEAR:    max=maximums[field];  break;case WEEK_OF_YEAR:days=daysInYear(fields[YEAR]);day=DAY_OF_YEAR;mod=mod7(fields[DAY_OF_WEEK] - fields[day] - (getFirstDayOfWeek() - 1));maxWeeks=(days - 1 + mod) / 7 + 1;newWeek=mod(fields[field] - 1 + value,maxWeeks) + 1;if (newWeek == maxWeeks) {int addDays=(newWeek - fields[field]) * 7;if (fields[day] > addDays && fields[day] + addDays > days) {set(field,1);} else {set(field,newWeek - 1);}} else if (newWeek == 1) {int week=(fields[day] - ((fields[day] - 1) / 7 * 7) - 1 + mod) / 7 + 1;if (week > 1) {set(field,1);} else {set(field,newWeek);}} else {set(field,newWeek);}break;case WEEK_OF_MONTH:days=daysInMonth();day=DATE;mod=mod7(fields[DAY_OF_WEEK] - fields[day] - (getFirstDayOfWeek() - 1));maxWeeks=(days - 1 + mod) / 7 + 1;newWeek=mod(fields[field] - 1 + value,maxWeeks) + 1;if (newWeek == maxWeeks) {if (fields[day] + (newWeek - fields[field]) * 7 > days) {set(day,days);} else {set(field,newWeek);}} else if (newWeek == 1) {int week=(fields[day] - ((fields[day] - 1) / 7 * 7) - 1 + mod) / 7 + 1;if (week > 1) {set(day,1);} else {set(field,newWeek);}} else {set(field,newWeek);}break;case DATE:max=daysInMonth();break;case DAY_OF_YEAR:max=daysInYear(fields[YEAR]);break;case DAY_OF_WEEK:max=maximums[field];lastDateFieldSet=WEEK_OF_MONTH;break;case DAY_OF_WEEK_IN_MONTH:max=(fields[DATE] + ((daysInMonth() - fields[DATE]) / 7 * 7) - 1) / 7 + 1;break;case ERA:case MONTH:case AM_PM:case HOUR:case HOUR_OF_DAY:case MINUTE:case SECOND:case MILLISECOND:set(field,mod(fields[field] + value,maximums[field] + 1));if (field == MONTH && fields[DATE] > daysInMonth()) {set(DATE,daysInMonth());} else if (field == AM_PM) {lastTimeFieldSet=HOUR;}break;}if (max != -1) {set(field,mod(fields[field] - 1 + value,max) + 1);}complete();}  }
class C{  public boolean isPassiveModeEnabled(){  return passiveMode;}  }
class C{  @Override protected void addGUIComboBoxes(final GUICombo combo){  fxButtons.getTopButtons().getItems().add((javafx.scene.Node)combo);}  }
class C{  private int convertWorldToPixelUnits(final double w){  return (int)(w * SIZE_UNIT_PIXELS);}  }
class C{  public Vector3f subtract(float subtractX,float subtractY,float subtractZ){  return new Vector3f(x - subtractX,y - subtractY,z - subtractZ);}  }
class C{  public synchronized boolean addAll(Collection<? extends E> c){  modCount++;  Object[] a=c.toArray();  int numNew=a.length;  ensureCapacityHelper(elementCount + numNew);  System.arraycopy(a,0,elementData,elementCount,numNew);  elementCount+=numNew;  return numNew != 0;}  }
class C{  protected void sequence_TMethod(ISerializationContext context,TMethod semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void addLastChildCondition(){  _specificityC++;  addCondition(Condition.createLastChildCondition());}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public static String format(Money money){  long microAmount=0;  if (money != null) {    microAmount=money.getMicroAmount();  } else {    return PLACEHOLDER_NULL;  }  double amount=(double)microAmount / MICRO_UNITS;  return String.format(FORMAT_MONEY,amount);}  }
class C{  protected RTAMouseListener createMouseListener(){  return new RSyntaxTextAreaMutableCaretEvent(this);}  }
class C{  public boolean isDiskCacheEnabled(){  return UriUtil.isNetworkUri(mSourceUri);}  }
class C{  public static void println(int x){  out.println(x);}  }
class C{  public static boolean isSnapshot(UnManagedVolume volume){  if (null == volume.getVolumeCharacterstics()) {    return false;  }  String status=volume.getVolumeCharacterstics().get(SupportedVolumeCharacterstics.IS_SNAP_SHOT.toString());  return TRUE.equals(status);}  }
class C{  @Nullable private GridClientMessage parseHandshake(ByteBuffer buf,ParserState state){  assert state.packetType() == GridClientPacketType.IGNITE_HANDSHAKE;  int idx=state.index();  GridClientHandshakeRequest packet=(GridClientHandshakeRequest)state.packet();  if (packet == null) {    packet=new GridClientHandshakeRequest();    state.packet(packet);  }  int rem=buf.remaining();  if (rem > 0) {    byte[] bbuf=new byte[5];    int nRead=Math.min(rem,bbuf.length);    buf.get(bbuf,0,nRead);    int nAvailable=nRead;    if (idx < 4) {      int len=Math.min(nRead,4 - idx);      packet.putBytes(bbuf,idx,len);      idx+=len;      state.index(idx);      nAvailable-=len;    }    assert idx <= 4 : "Wrong idx: " + idx;    assert nAvailable == 0 || nAvailable == 1 : "Wrong nav: " + nAvailable;    if (idx == 4 && nAvailable > 0)     return packet;  }  return null;}  }
class C{  @Override public String toString(){  StringBuilder buf=new StringBuilder();  buf.append(" Gen: ").append(gen).append("\n");  buf.append(" BB Kill: ").append(BBKillSet).append("\n");  buf.append(" first PEI Kill: ").append(firstPEIKillSet).append("\n");  buf.append(" In: ").append(in).append("\n");  return buf.toString();}  }
class C{  public static String escape(String str){  int sz=str.length();  StringBuilder buffer=new StringBuilder(2 * sz);  for (int i=0; i < sz; i++) {    char ch=str.charAt(i);    if (ch > 0xfff) {      buffer.append("\\u" + Integer.toHexString(ch));    } else     if (ch > 0xff) {      buffer.append("\\u0" + Integer.toHexString(ch));    } else     if (ch > 0x7f) {      buffer.append("\\u00" + Integer.toHexString(ch));    } else     if (ch < 32) {switch (ch) {case '\b':        buffer.append('\\');      buffer.append('b');    break;case '\n':  buffer.append('\\');buffer.append('n');break;case '\t':buffer.append('\\');buffer.append('t');break;case '\f':buffer.append('\\');buffer.append('f');break;case '\r':buffer.append('\\');buffer.append('r');break;default :if (ch > 0xf) {buffer.append("\\u00" + Integer.toHexString(ch));} else {buffer.append("\\u000" + Integer.toHexString(ch));}break;}} else {switch (ch) {case '\'':buffer.append('\\');buffer.append('\'');break;case '"':buffer.append('\\');buffer.append('"');break;case '\\':buffer.append('\\');buffer.append('\\');break;default :buffer.append(ch);break;}}}return buffer.toString();}  }
class C{  private void waitForDisableToComplete(FunctionalAPIImpl impl,String cgCopyName,String cgName,ConsistencyGroupCopyUID cgCopy) throws FunctionalAPIActionFailedException_Exception, FunctionalAPIInternalError_Exception, RecoverPointException {  while (verifyGroupCopyImageIsEnabled(impl,cgCopy,false,null)) {    logger.info("Image still not disabled");    try {      Thread.sleep(5 * numMillisInSecond);    } catch (    InterruptedException e) {      logger.error("InterruptedException while sleeping.");      throw RecoverPointException.exceptions.failedWaitingForImageForCopyToDisable(cgCopyName,cgName,e);    }  }}  }
class C{  @Deprecated static public AcelaLightManager instance(){  return null;}  }
class C{  protected int yPositionForValue(int value,int trackY,int trackHeight){  int min=slider.getMinimum();  int max=slider.getMaximum();  double valueRange=(double)max - (double)min;  double pixelsPerValue=(double)trackHeight / valueRange;  int trackBottom=trackY + (trackHeight - 1);  int yPosition;  if (!drawInverted()) {    yPosition=trackY;    yPosition+=Math.round(pixelsPerValue * ((double)max - value));  } else {    yPosition=trackY;    yPosition+=Math.round(pixelsPerValue * ((double)value - min));  }  yPosition=Math.max(trackY,yPosition);  yPosition=Math.min(trackBottom,yPosition);  return yPosition;}  }
class C{  public boolean equals(Object r){  if (r == null) {    return false;  }  if (!(r.getClass().equals(this.getClass()))) {    return false;  }  OlcbAddress opp=(OlcbAddress)r;  if (opp.aFrame.length != this.aFrame.length) {    return false;  }  for (int i=0; i < this.aFrame.length; i++) {    if (this.aFrame[i] != opp.aFrame[i]) {      return false;    }  }  return true;}  }
class C{  public void startUpload(final String hostname,final String uri,final int fileSizeOctet){  startUpload(hostname,SpeedTestConst.HTTP_DEFAULT_PORT,uri,fileSizeOctet);}  }
class C{  public MutualInformationCalculatorDiscrete(int base,int timeDiff) throws Exception {  super(base);  if (timeDiff < 0) {    throw new Exception("timeDiff must be >= 0");  }  this.timeDiff=timeDiff;  jointCount=new int[base][base];  iCount=new int[base];  jCount=new int[base];}  }
class C{  public static DirectedUndirectedOnly serializableInstance(){  return new DirectedUndirectedOnly();}  }
class C{  public boolean isRecursiveType(){  if (this.argumentList.size() > 1 || this.argumentList.get(0).hasWildcard()) {    return false;  }  ReferenceType argType=((ReferenceArgument)this.argumentList.get(0)).getReferenceType();  return argType.isSubtypeOf(this);}  }
class C{  private void shareAppData(WXShareContent content,WXMediaMessage msg,SendMessageToWX.Req req){  WXAppExtendObject wxAppExtendObject=new WXAppExtendObject();  wxAppExtendObject.fileData=WXUtil.readFromFile(content.getApp_data_path(),0,-1);  wxAppExtendObject.extInfo="this is ext info";  msg.mediaObject=wxAppExtendObject;  msg.title=content.getTitle();  msg.description=content.getDescription();  msg.setThumbImage(WXUtil.extractThumbNail(content.getApp_data_path(),150,150,true));  req.transaction=buildTransaction("appdata");  req.message=msg;  req.scene=content.getScene();  mAPI.sendReq(req);}  }
class C{  public void resetCalculations(){  m_actualQty=Env.ZERO;  m_actualMin=Env.ZERO;  m_actualAllocation=Env.ZERO;  m_maxAllocation=Env.ZERO;}  }
class C{  public void uploadStarted(){  mSessionState=State.ESTABLISHED;}  }
class C{  public static <T extends Comparable<T>>void compareOrder(T lower,T higher){  assertFalse(lower.equals(higher));  assertFalse(lower.hashCode() == higher.hashCode());  int l=lower.compareTo(higher);  assertTrue(l < 0);  int h=higher.compareTo(lower);  assertTrue(h > 0);}  }
class C{  public HTableConnector(final TableConfig conf,String _quorum,String _port) throws IOException {  super(conf,_quorum,_port);  this.connectorImpl=conf.getConnectorImpl();  this.tableName=conf.getTableName();  this.conf=HBaseConfiguration.create();  if (_quorum != null && _port != null) {    this.conf.set("hbase.zookeeper.quorum",_quorum);    this.conf.set("hbase.zookeeper.property.clientPort",_port);  }  LOG.info(String.format("Initializing connection to HBase table %s at %s",tableName,this.conf.get("hbase.rootdir")));  try {    this.table=getTableProvider().getTable(this.conf,this.tableName);  } catch (  IOException ex) {    throw new IOException("Unable to establish connection to HBase table " + this.tableName,ex);  }  if (conf.isBatch()) {    this.table.setAutoFlush(false,true);    LOG.info("Enabled client-side write buffer");  }  if (conf.getWriteBufferSize() > 0) {    try {      this.table.setWriteBufferSize(conf.getWriteBufferSize());      LOG.info("Setting client-side write buffer to " + conf.getWriteBufferSize());    } catch (    IOException ex) {      LOG.error("Unable to set client-side write buffer size for HBase table " + this.tableName,ex);    }  }  for (  String cf : conf.getColumnFamilies()) {    if (!columnFamilyExists(cf)) {      throw new RuntimeException(String.format("HBase table '%s' does not have column family '%s'",conf.getTableName(),cf));    }  }}  }
class C{  public MaximumParetoFrontError(Problem problem,NondominatedPopulation referenceSet){  super(problem,referenceSet);}  }
class C{  public static synchronized boolean execute(String sqlStatement){  boolean executeOk=false;  logger.trace(String.format("execute( %s ) -->entry",sqlStatement));  final Statement S=getStatement();  if (S == null) {    logger.error("execute() <--exit (error: Statement unavailable)");    return false;  }  try {    executeOk=S.execute(sqlStatement);  } catch (  Throwable t) {    surfaceThrowable(String.format("execute( %s )",sqlStatement),t);  } finally {    cleanup(S);  }  logger.trace("execute() <--exit (normal): " + executeOk);  return executeOk;}  }
class C{  @Override public void recycle(){}  }
class C{  private List<PojoField> detectFields(Element el,List<PropertyDescriptor> descriptors){  List<PojoField> list=new LinkedList<>();  if (el == null && (descriptors == null || descriptors.isEmpty()))   return list;  if (el == null) {    for (    PropertyDescriptor desc : descriptors) {      boolean valid=desc.getWriteMethod() != null || desc.getReadMethod().getAnnotation(QuerySqlField.class) != null || desc.getReadMethod().getAnnotation(AffinityKeyMapped.class) != null;      if (valid)       list.add(new PojoKeyField(desc));    }    return list;  }  NodeList nodes=el.getElementsByTagName(FIELD_ELEMENT);  int cnt=nodes == null ? 0 : nodes.getLength();  if (cnt == 0) {    throw new IllegalArgumentException("Incorrect configuration of Cassandra key persistence settings, " + "no key fields specified inside '" + PARTITION_KEY_ELEMENT + "/"+ CLUSTER_KEY_ELEMENT+ "' element");  }  for (int i=0; i < cnt; i++) {    PojoKeyField field=new PojoKeyField((Element)nodes.item(i),getJavaClass());    PropertyDescriptor desc=findPropertyDescriptor(descriptors,field.getName());    if (desc == null) {      throw new IllegalArgumentException("Specified POJO field '" + field.getName() + "' doesn't exist in '"+ getJavaClass().getName()+ "' class");    }    list.add(field);  }  return list;}  }
class C{  public String encodeFlags(Flags flags){  StringBuilder localFlagsString=new StringBuilder(":2,");  if (flags.contains(Flags.Flag.DRAFT))   localFlagsString.append(FLAG_DRAFT);  if (flags.contains(Flags.Flag.FLAGGED))   localFlagsString.append(FLAG_FLAGGED);  if (flags.contains(Flags.Flag.ANSWERED))   localFlagsString.append(FLAG_ANSWERD);  if (flags.contains(Flags.Flag.SEEN))   localFlagsString.append(FLAG_SEEN);  if (flags.contains(Flags.Flag.DELETED))   localFlagsString.append(FLAG_DELETED);  return localFlagsString.toString();}  }
class C{  public SubqueryTable as(String alias){  return SubqueryTable.fromQuery(this,alias);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:58.052 -0400",hash_original_method="5732859DDEB3B1715451D21A81461EDA",hash_generated_method="51DDD2668DA05CF2A67DD1DD32351FEC") public FileAlterationMonitor(){  this(10000);}  }
class C{  protected void fireConfigurationParameterValueChanged(ConfigurationParameter parm){  ConfigurationParameterListener[] listeners=(ConfigurationParameterListener[])this.listeners.toArray(new ConfigurationParameterListener[0]);  for (int i=0; i < listeners.length; i++) {    listeners[i].configurationParameterValueChanged(parm);  }}  }
class C{  @SmallTest public void testCreateLive(){  SimpleCursorAdapter ca=new SimpleCursorAdapter(mContext,mLayout,mCursor2x2,mFrom,mTo);  assertEquals(2,ca.getCount());}  }
class C{  public ResourceConfiguration(String name,TungstenProperties properties){  super(ResourceType.CONFIGURATION,name);  this.properties=properties;  init();}  }
class C{  public synchronized void add(int index,double x,double y){  while (mXY.get(x) != null) {    x+=getPadding();  }  mXY.put(index,x,y);  updateRange(x,y);}  }
class C{  public long persistenceId(){  return persistenceId;}  }
class C{  public SimpleList(){  this.clear();}  }
class C{  public static void copyToDevice(CSRPointer dest,int rows,long nnz,int[] rowPtr,int[] colInd,double[] values){  CSRPointer r=dest;  long t0=System.nanoTime();  r.nnz=nnz;  cudaMemcpy(r.rowPtr,Pointer.to(rowPtr),(rows + 1) * Sizeof.INT,cudaMemcpyHostToDevice);  cudaMemcpy(r.colInd,Pointer.to(colInd),nnz * Sizeof.INT,cudaMemcpyHostToDevice);  cudaMemcpy(r.val,Pointer.to(values),nnz * Sizeof.DOUBLE,cudaMemcpyHostToDevice);  Statistics.cudaToDevTime.addAndGet(System.nanoTime() - t0);  Statistics.cudaToDevCount.addAndGet(3);}  }
class C{  public void testStoreArchive() throws Exception {  WarArchive war=new DefaultWarArchive(getResourcePath(PACKAGE_PATH + "weblogic.war"));  File tmpFile=File.createTempFile("cargo",null);  war.store(tmpFile);  WarArchive storedWar=new DefaultWarArchive(tmpFile.getPath());  WebXml descr=storedWar.getWebXml();  assertEquals("There should be 1 descriptor",1,descr.getVendorDescriptors().size());}  }
class C{  public AddressTranslateError(String s){  super(s);}  }
class C{  protected boolean doesTableExist(String tableName) throws DataAccessException {  try {    DescribeTableRequest request=new DescribeTableRequest().withTableName(tableName);    DescribeTableResult result=ddb.describeTable(request);    return "ACTIVE".equals(result.getTable().getTableStatus());  } catch (  ResourceNotFoundException e) {    return false;  }catch (  AmazonClientException e) {    throw new DataAccessException("Failed to get status of table: " + tableName,e);  }}  }
class C{  public void expectError(String... parts){  expected=join(parts);  expectedSuffix=false;}  }
class C{  @Override public IType<?> coerce(final IType<?> expr,final IDescription context){  return null;}  }
class C{  public X509Certificate generate(PrivateKey key,String provider) throws CertificateEncodingException, IllegalStateException, NoSuchProviderException, NoSuchAlgorithmException, SignatureException, InvalidKeyException {  return generate(key,provider,null);}  }
class C{  public void addInput(TInput input){  inputs.add(input);}  }
class C{  protected Journal createJournal(){  final Properties p=oldJournal.getProperties();  p.setProperty(Options.FILE,outFile.getAbsolutePath());  if (p.getProperty(Options.CREATE_TEMP_FILE) != null) {    p.setProperty(Options.CREATE_TEMP_FILE,"false");  }  if (p.getProperty(Options.BUFFER_MODE) != null) {    BufferMode bufferMode=BufferMode.valueOf(p.getProperty(Options.BUFFER_MODE));    if (!bufferMode.isStable()) {      p.setProperty(Options.BUFFER_MODE,BufferMode.Disk.toString());    }  }  return new Journal(p);}  }
class C{  private List<AttributedCharacterIterator> splitFormatted(final AttributedString text,final int width){  final List<AttributedCharacterIterator> lines=new LinkedList<AttributedCharacterIterator>();  final BreakIterator iter=BreakIterator.getLineInstance();  iter.setText(text.getIterator());  int previous=iter.first();  AttributedCharacterIterator best=null;  while (iter.next() != BreakIterator.DONE) {    final AttributedCharacterIterator candidate=text.getIterator(null,previous,iter.current());    if (getPixelWidth(candidate) <= width) {      final CharacterIterator cit=iter.getText();      if (isHardLineBreak(cit)) {        lines.add(candidate);        previous=iter.current();        best=null;      } else {        best=candidate;      }    } else {      if (best == null) {        best=splitAggressively(candidate,width);        previous+=best.getEndIndex() - best.getBeginIndex();      } else {        previous=best.getEndIndex();        char endChar=best.last();        int endIndex=previous;        while (Character.isWhitespace(endChar) && endChar != CharacterIterator.DONE) {          endIndex=best.getIndex();          endChar=best.previous();        }        best=text.getIterator(null,best.getBeginIndex(),endIndex);      }      lines.add(best);      final CharacterIterator cit=iter.getText();      if (isHardLineBreak(cit)) {        lines.add(text.getIterator(null,previous,iter.current()));        previous=iter.current();      }      if (iter.current() > previous + 1) {        iter.previous();      }      best=null;      if (lines.size() > MAX_LINES) {        lines.remove(lines.size() - 1);        lines.remove(lines.size() - 1);        lines.add(new AttributedString("...").getIterator());        return lines;      }    }  }  if (previous < iter.last()) {    lines.add(text.getIterator(null,previous,iter.last()));  }  return lines;}  }
class C{  protected Session computeSession(){  return Session.getInstance(new Properties(System.getProperties()));}  }
class C{  private void deployImpl(String path,String version,URL config,URL war,InputStream data,boolean update,String tag) throws TomcatManagerException, IOException {  StringBuilder buffer=new StringBuilder("/deploy");  buffer.append("?path=").append(URLEncoder.encode(path,this.charset));  if (version != null) {    buffer.append("&version=").append(URLEncoder.encode(version,this.charset));  }  if (config != null) {    buffer.append("&config=").append(URLEncoder.encode(config.toString(),this.charset));  }  if (war != null) {    buffer.append("&war=").append(URLEncoder.encode(war.toString(),this.charset));  }  if (update) {    buffer.append("&update=true");  }  if (tag != null) {    buffer.append("&tag=").append(URLEncoder.encode(tag,this.charset));  }  invoke(buffer.toString(),data,null);}  }
class C{  public static String toString(URL url,Charset encoding) throws IOException {  InputStream inputStream=url.openStream();  try {    return toString(inputStream,encoding);  }  finally {    inputStream.close();  }}  }
class C{  public static byte[] decode(byte[] source) throws java.io.IOException {  byte[] decoded;  decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  return decoded;}  }
class C{  @Override public int incrementSecondValue(int key,int delta){  return array.incrementEntry((key << 1) + 1,delta);}  }
class C{  public static CustomWebViewDialog create(String dialogTitle,String htmlFileName,int accentColor){  CustomWebViewDialog dialog=new CustomWebViewDialog();  Bundle args=new Bundle();  args.putString("dialogTitle",dialogTitle);  args.putString("htmlFileName",htmlFileName);  args.putInt("accentColor",accentColor);  dialog.setArguments(args);  return dialog;}  }
class C{  public Mark mark() throws ParseException {  if (null == this.current && null == this.prev) {    fetch(true);  }  return new Mark(this);}  }
class C{  public void paintToolBarDragWindowBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void deselectDoNotFireEvent(final int[] indices){  deselect(indices,false);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public _Fields fieldForId(int fieldId){  return _Fields.findByThriftId(fieldId);}  }
class C{  private XSDatatype dataTypeForXsdAttribute(Element xsdAttribute){  String type=xsdAttribute.attributeValue("type");  XSDatatype dataType;  if (type != null) {    dataType=getTypeByName(type);  } else {    Element xsdSimpleType=xsdAttribute.element(XSD_SIMPLETYPE);    if (xsdSimpleType == null) {      String name=xsdAttribute.attributeValue("name");      String msg="The attribute: " + name + " has no type attribute and does not contain a "+ "<simpleType/> element";      throw new InvalidSchemaException(msg);    }    dataType=loadXSDatatypeFromSimpleType(xsdSimpleType);  }  return dataType;}  }
class C{  public int compareTo(int unsignedValue){  return MathLib.compareUnsigned(this.unsigned,unsignedValue);}  }
class C{  public String businessObjectDataKeyToString(BusinessObjectDataKey businessObjectDataKey){  if (businessObjectDataKey == null) {    return null;  }  return businessObjectDataKeyToString(businessObjectDataKey.getNamespace(),businessObjectDataKey.getBusinessObjectDefinitionName(),businessObjectDataKey.getBusinessObjectFormatUsage(),businessObjectDataKey.getBusinessObjectFormatFileType(),businessObjectDataKey.getBusinessObjectFormatVersion(),businessObjectDataKey.getPartitionValue(),businessObjectDataKey.getSubPartitionValues(),businessObjectDataKey.getBusinessObjectDataVersion());}  }
class C{  public TIFFDirectory(SeekableStream stream,int directory) throws IOException {  long global_save_offset=stream.getFilePointer();  long ifd_offset;  stream.seek(0L);  int endian=stream.readUnsignedShort();  if (!isValidEndianTag(endian)) {    throw new IllegalArgumentException("TIFFDirectory1");  }  isBigEndian=(endian == 0x4d4d);  int magic=readUnsignedShort(stream);  if (magic != 42) {    throw new IllegalArgumentException("TIFFDirectory2");  }  ifd_offset=readUnsignedInt(stream);  for (int i=0; i < directory; i++) {    if (ifd_offset == 0L) {      throw new IllegalArgumentException("TIFFDirectory3");    }    stream.seek(ifd_offset);    long entries=readUnsignedShort(stream);    stream.skip(12 * entries);    ifd_offset=readUnsignedInt(stream);  }  stream.seek(ifd_offset);  initialize(stream);  stream.seek(global_save_offset);}  }
class C{  private boolean match(char[] text,char[] wild){  return match(text,0,wild,0);}  }
class C{  public LetterValidator(@NonNull final Context context,@StringRes final int resourceId,@NonNull final Case caseSensitivity,final boolean allowSpaces,@NonNull final char... allowedCharacters){  super(context,resourceId);  setCaseSensitivity(caseSensitivity);  allowSpaces(allowSpaces);  setAllowedCharacters(allowedCharacters);}  }
class C{  public void writeCredentials(final URI targetUri,final Credential credentials){  BaseSecureStore.validateTargetUri(targetUri);  Credential.validate(credentials);  Trace.writeLine("SecretCache::writeCredentials");  final String targetName=this.getTargetName(targetUri);synchronized (_cache) {    _cache.put(targetName,credentials);  }}  }
class C{  public void validateCreateTagParentKey(TagCreateRequest tagCreateRequest){  if (tagCreateRequest.getParentTagKey() != null) {    validateTagParentKeyType(tagCreateRequest.getTagKey(),tagCreateRequest.getParentTagKey());  }}  }
class C{  public void removeListener(final IFilterDialogListener listener){  m_listeners.removeListener(listener);}  }
class C{  private void parse(File f){  int counter=0;  try {    BufferedReader br=IOUtils.getBufferedReader(f.getAbsolutePath());    try {      String stationId=f.getName().split("_")[0];      Map<String,Map<Integer,List<Integer>>> cMap=new HashMap<>();      String line=br.readLine();      line=br.readLine();      while ((line=br.readLine()) != null) {        line=line.replaceAll("\"","");        String[] entry=line.split(",");        Integer year=Integer.parseInt(entry[2].split("/")[0]);        Integer month=Integer.parseInt(entry[2].split("/")[1]) - 1;        Integer day=Integer.parseInt(entry[2].split("/")[2]);        GregorianCalendar cal=new GregorianCalendar(year,month,day);        int dayOfWeek=cal.get(Calendar.DAY_OF_WEEK);        if (abnormalList.contains(cal)) {          dayOfWeek=8;        }        Integer hour=Integer.parseInt(entry[3].split(":")[0]);        if (hour == 24) {        }        String[] duration=entry[4].split(":");        Double factor;        if (duration.length == 2) {          Integer durationH=Integer.parseInt(duration[0]);          Integer durationM=Integer.parseInt(duration[1]);          if (durationH != 1) {            factor=(double)durationM / 60.0;          } else {            factor=1.0;          }          if (entry.length == 22) {            String countsNameLightA="Day_" + dayOfWeek + "_"+ stationId+ "_Light_a";            if (!cMap.containsKey(countsNameLightA)) {              cMap.put(countsNameLightA,buildCountsMap());            }            String countsNameHeavyA="Day_" + dayOfWeek + "_"+ stationId+ "_Heavy_a";            if (!cMap.containsKey(countsNameHeavyA)) {              cMap.put(countsNameHeavyA,buildCountsMap());            }            String countsNameTotalA="Day_" + dayOfWeek + "_"+ stationId+ "_Total_a";            if (!cMap.containsKey(countsNameTotalA)) {              cMap.put(countsNameTotalA,buildCountsMap());            }            int lvA=Integer.parseInt(entry[8]);            lvA=(int)Math.round((lvA) / factor);            int hvA=Integer.parseInt(entry[9]);            hvA+=Integer.parseInt(entry[10]);            hvA+=Integer.parseInt(entry[11]);            hvA=(int)Math.round((hvA) / factor);            int tA=lvA + hvA;            if (counter == 24) {            }            cMap.get(countsNameLightA).get(hour).set(0,cMap.get(countsNameLightA).get(hour).get(0) + lvA);            cMap.get(countsNameLightA).get(hour).set(1,cMap.get(countsNameLightA).get(hour).get(1) + 1);            cMap.get(countsNameHeavyA).get(hour).set(0,cMap.get(countsNameHeavyA).get(hour).get(0) + hvA);            cMap.get(countsNameHeavyA).get(hour).set(1,cMap.get(countsNameHeavyA).get(hour).get(1) + 1);            cMap.get(countsNameTotalA).get(hour).set(0,cMap.get(countsNameTotalA).get(hour).get(0) + tA);            cMap.get(countsNameTotalA).get(hour).set(1,cMap.get(countsNameTotalA).get(hour).get(1) + 1);            if (!entry[6].isEmpty()) {              String countsNameLightB="Day_" + dayOfWeek + "_"+ stationId+ "_Light_b";              if (!cMap.containsKey(countsNameLightB)) {                cMap.put(countsNameLightB,buildCountsMap());              }              String countsNameHeavyB="Day_" + dayOfWeek + "_"+ stationId+ "_Heavy_b";              if (!cMap.containsKey(countsNameHeavyB)) {                cMap.put(countsNameHeavyB,buildCountsMap());              }              String countsNameTotalB="Day_" + dayOfWeek + "_"+ stationId+ "_Total_b";              if (!cMap.containsKey(countsNameTotalB)) {                cMap.put(countsNameTotalB,buildCountsMap());              }              int lvB=Integer.parseInt(entry[13]);              lvB=(int)Math.round((lvB) / factor);              int hvB=Integer.parseInt(entry[14]);              hvB+=Integer.parseInt(entry[15]);              hvB+=Integer.parseInt(entry[16]);              hvB=(int)Math.round((hvB) / factor);              int tB=lvB + hvB;              cMap.get(countsNameLightB).get(hour).set(0,cMap.get(countsNameLightB).get(hour).get(0) + lvB);              cMap.get(countsNameLightB).get(hour).set(1,cMap.get(countsNameLightB).get(hour).get(1) + 1);              cMap.get(countsNameHeavyB).get(hour).set(0,cMap.get(countsNameHeavyB).get(hour).get(0) + hvB);              cMap.get(countsNameHeavyB).get(hour).set(1,cMap.get(countsNameHeavyB).get(hour).get(1) + 1);              cMap.get(countsNameTotalB).get(hour).set(0,cMap.get(countsNameTotalB).get(hour).get(0) + tB);              cMap.get(countsNameTotalB).get(hour).set(1,cMap.get(countsNameTotalB).get(hour).get(1) + 1);            }          } else {            log.warn("Irregular length (" + entry.length + "): "+ entry.toString());          }        } else {        }        for (        String cId : cMap.keySet()) {          String[] sa=cId.toString().split("_");          String dayName=getDayDescription(Integer.parseInt(sa[1]));          String stationName=sa[2];          String typeName=sa[3];          String directionName=sa[4];          String name=dayName + "_" + typeName;          if (!countsMap.containsKey(name)) {            Counts cs=new Counts();            cs.setName(name);            cs.setYear(Integer.parseInt(MyCountingStationParser.year));            countsMap.put(name,cs);          }          Counts cs=countsMap.get(name);          String entryName=stationName + directionName;          Count c=null;          if (!cs.getCounts().containsKey(Id.create(entryName,Link.class))) {            c=cs.createAndAddCount(Id.create(entryName,Link.class),entryName);          }          c=cs.getCount(Id.create(entryName,Link.class));          for (          Integer hourName : cMap.get(cId).keySet()) {            if (cMap.get(cId).get(hourName).get(1) > 0) {              c.createVolume(Integer.parseInt(hourName.toString()),(int)Math.round((double)cMap.get(cId).get(hourName).get(0) / (double)cMap.get(cId).get(hourName).get(1)));            } else {              if (hourName == null) {                log.warn("WARNING");              }              c.createVolume(Integer.parseInt(hourName.toString()),0.0);            }          }        }      }    }  finally {      br.close();    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void detachFromMovingGrabPoint(OffsetGrabPoint gp){  gp.removeGrabPoint(gpo);}  }
class C{  public ApplicationMetaData(final Deserializer deserializer){  this.appName=deserializer.readString("application");  this.version=deserializer.readString("version");  this.certificateSigner=deserializer.readOptionalString("signer");  this.startTime=TimeInstant.readFrom(deserializer,"startTime");  this.currentTime=TimeInstant.readFrom(deserializer,"currentTime");  this.timeProvider=null;}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public void onProviderEnabled(String provider){  if (doDebugLogging()) {    mTrackerData.writeEntry(provider,"provider enabled");  }}  }
class C{  public static String titleText(String prefix){  if (prefix == "") {    return "Definitions and Declarations";  } else {    return prefix;  }}  }
class C{  protected SVGOMEllipseElement(){}  }
class C{  public AbstractScriptEngine(){  context=new SimpleScriptContext();}  }
class C{  public void popContext(){  contexts[contextPos].clear();  contextPos--;  if (contextPos < 0) {    throw new EmptyStackException();  }  currentContext=contexts[contextPos];}  }
class C{  public static final byte[] unzip(byte[] in) throws IOException {  ByteArrayOutputStream outStream=new ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * in.length);  GZIPInputStream inStream=new GZIPInputStream(new ByteArrayInputStream(in));  byte[] buf=new byte[BUF_SIZE];  while (true) {    int size=inStream.read(buf);    if (size <= 0)     break;    outStream.write(buf,0,size);  }  outStream.close();  return outStream.toByteArray();}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster flowAccum;  String outputHeader=null;  String flowAccumHeader=null;  String outletHeader=null;  int rows=0;  int cols=0;  int row, col;  double noData=-32768;  double gridRes=0;  int i;  float progress=0;  double z;  double maxZ;  int x, y;  int maxX=0;  int maxY=0;  double snapDistance=0;  int snapDistInt=0;  double outletID;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  outletHeader=args[0];  flowAccumHeader=args[1];  outputHeader=args[2];  snapDistance=Double.parseDouble(args[3]);  if (outletHeader.isEmpty() || flowAccumHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if (outletHeader.endsWith(".dep") && outputHeader.endsWith(".shp")) {    outputHeader=StringUtilities.replaceLast(outputHeader,".shp",".dep");  }  if (outletHeader.endsWith(".shp") && outputHeader.endsWith(".dep")) {    outputHeader=StringUtilities.replaceLast(outputHeader,".dep",".shp");  }  try {    flowAccum=new WhiteboxRaster(flowAccumHeader,"r");    if (outletHeader.toLowerCase().endsWith(".shp")) {      double outletX, outletY;      int outletCol, outletRow;      int recordNumber;      double zValue=0, mValue=0;      ShapeFile outlets=new ShapeFile(outletHeader);      if (outlets.getShapeType().getBaseType() != ShapeType.POINT) {        showFeedback("The outlets vector should be of a Point or " + "MultiPoint ShapeType.");        return;      }      ShapeFile output=new ShapeFile(outputHeader,outlets.getShapeType(),outlets.getAttributeTable().getAllFields());      gridRes=(flowAccum.getCellSizeX() + flowAccum.getCellSizeY()) / 2;      snapDistInt=(int)(snapDistance / gridRes);      if (snapDistInt < 1) {        snapDistInt=1;      }      for (      ShapeFileRecord record : outlets.records) {        recordNumber=record.getRecordNumber();        double[][] vertices;        ShapeType shapeType=record.getShapeType();switch (shapeType) {case POINT:          whitebox.geospatialfiles.shapefile.Point recPoint=(whitebox.geospatialfiles.shapefile.Point)(record.getGeometry());        vertices=recPoint.getPoints();      break;case POINTZ:    PointZ recPointZ=(PointZ)(record.getGeometry());  zValue=recPointZ.getZ();mValue=recPointZ.getM();vertices=recPointZ.getPoints();break;case POINTM:PointM recPointM=(PointM)(record.getGeometry());mValue=recPointM.getM();vertices=recPointM.getPoints();break;default :showFeedback("This ShapeType is not supported by this operation. \n" + "Please use an outlet vector of a Point base ShapeType.");return;}outletRow=flowAccum.getRowFromYCoordinate(vertices[0][1]);outletCol=flowAccum.getColumnFromXCoordinate(vertices[0][0]);maxZ=0;for (x=outletCol - snapDistInt; x <= outletCol + snapDistInt; x++) {for (y=outletRow - snapDistInt; y <= outletRow + snapDistInt; y++) {z=flowAccum.getValue(y,x);if (z > maxZ) {maxZ=z;maxX=x;maxY=y;}}}outletX=flowAccum.getXCoordinateFromColumn(maxX);outletY=flowAccum.getYCoordinateFromRow(maxY);Object[] recData=outlets.getAttributeTable().getRecord(recordNumber - 1);switch (shapeType) {case POINT:whitebox.geospatialfiles.shapefile.Point wbPoint=new whitebox.geospatialfiles.shapefile.Point(outletX,outletY);output.addRecord(wbPoint,recData);break;case POINTZ:PointZ pointZ=new PointZ(outletX,outletY,zValue,mValue);output.addRecord(pointZ,recData);break;case POINTM:PointM pointM=new PointM(outletX,outletY,mValue);output.addRecord(pointM,recData);break;}}output.write();} else if (outletHeader.toLowerCase().endsWith(".dep")) {WhiteboxRaster outlets=new WhiteboxRaster(outletHeader,"r");rows=outlets.getNumberRows();cols=outlets.getNumberColumns();noData=outlets.getNoDataValue();gridRes=(outlets.getCellSizeX() + outlets.getCellSizeY()) / 2;if (flowAccum.getNumberColumns() != cols || flowAccum.getNumberRows() != rows) {showFeedback("The input files must have the same dimensions.");return;}WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",outletHeader,WhiteboxRaster.DataType.FLOAT,noData);output.setPreferredPalette(outlets.getPreferredPalette());output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);snapDistInt=(int)(snapDistance / gridRes);if (snapDistInt < 1) {snapDistInt=1;}double[] data;for (row=0; row < rows; row++) {data=outlets.getRowValues(row);for (col=0; col < cols; col++) {outletID=data[col];if (outletID != 0 && outletID != noData) {maxZ=0;for (x=col - snapDistInt; x <= col + snapDistInt; x++) {for (y=row - snapDistInt; y <= row + snapDistInt; y++) {z=flowAccum.getValue(y,x);if (z > maxZ) {maxZ=z;maxX=x;maxY=y;}}}output.setValue(maxY,maxX,outletID);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());outlets.close();flowAccum.close();output.close();}returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public boolean isTypeVariable(){  return type instanceof TypeVariable<?>;}  }
class C{  @Override public void updateScreen(){  ((GuiButton)buttonList.get(0)).enabled=!GuiAltList.alts.isEmpty() && altList.getSelectedSlot() != -1;  ((GuiButton)buttonList.get(3)).enabled=!GuiAltList.alts.isEmpty() && altList.getSelectedSlot() != -1;  ((GuiButton)buttonList.get(4)).enabled=!GuiAltList.alts.isEmpty() && altList.getSelectedSlot() != -1;  ((GuiButton)buttonList.get(5)).enabled=!GuiAltList.alts.isEmpty() && altList.getSelectedSlot() != -1;}  }
class C{  private void readContentSpec() throws IOException, XmlPullParserException {  skip();  int c=peekCharacter();  if (c == '(') {    int depth=0;    do {      if (c == '(') {        depth++;      } else       if (c == ')') {        depth--;      } else       if (c == -1) {        throw new XmlPullParserException("Unterminated element content spec",this,null);      }      position++;      c=peekCharacter();    } while (depth > 0);    if (c == '*' || c == '?' || c == '+') {      position++;    }  } else   if (c == EMPTY[0]) {    read(EMPTY);  } else   if (c == ANY[0]) {    read(ANY);  } else {    throw new XmlPullParserException("Expected element content spec",this,null);  }}  }
class C{  public int hashCode(){  return (attribute.hashCode() ^ value);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Angle angularDistanceTo(Angle angle){  if (angle == null) {    throw new IllegalArgumentException("Angle Is Null");  }  double differenceDegrees=angle.subtract(this).degrees;  if (differenceDegrees < -180)   differenceDegrees+=360; else   if (differenceDegrees > 180)   differenceDegrees-=360;  double absAngle=Math.abs(differenceDegrees);  return Angle.fromDegrees(absAngle);}  }
class C{  protected void checkColumn(int column){  if (column < 0 || column >= columns.length) {    throw new ArrayIndexOutOfBoundsException("Column " + column + " does not exist.");  }}  }
class C{  public FunctionWrapperFactory(FunctionArgumentSignatureFactory functionArgumentSignatureFactory){  this.functionArgumentSignatureFactory=functionArgumentSignatureFactory;  this.argumentConverterFactories=new LinkedList<>();  this.argumentConverterFactories.add(new BooleanArgumentConverterFactory());  this.argumentConverterFactories.add(new ByteArgumentConverterFactory());  this.argumentConverterFactories.add(new CharacterArgumentConverterFactory());  this.argumentConverterFactories.add(new ContextArgumentConverterFactory());  this.argumentConverterFactories.add(new DoubleArgumentConverterFactory());  this.argumentConverterFactories.add(new FloatArgumentConverterFactory());  this.argumentConverterFactories.add(new IntegerArgumentConverterFactory());  this.argumentConverterFactories.add(new LastImportArgumentConverterFactory());  this.argumentConverterFactories.add(new LongArgumentConverterFactory());  this.argumentConverterFactories.add(new ShortArgumentConverterFactory());  this.argumentConverterFactories.add(new StringArgumentConverterFactory());}  }
class C{  public static Parameter[] createParameters(IMethod method){  int length=method.getNumberOfParameters();  Parameter[] result=new Parameter[length + 1];  result[0]=PARAMETER_OBJECT;  for (int i=0; i < length; i++) {    result[i + 1]=new Parameter(i);    result[i + 1].setCreateField(true);  }  return result;}  }
class C{  public void fillPolygon(int[] xPoints,int[] yPoints,int nPoints){  Polygon polygon=new Polygon(xPoints,yPoints,nPoints);  fill(polygon);}  }
class C{  public void readRuleSet(final EvolutionState state,final DataInput dataInput) throws IOException {  int ruleCount=dataInput.readInt();  if (rules == null || rules.length != ruleCount)   rules=new Rule[ruleCount];  for (int x=0; x < ruleCount; x++) {    rules[x]=(Rule)(constraints((RuleInitializer)state.initializer).rulePrototype.clone());    rules[x].readRule(state,dataInput);  }}  }
class C{  public UserMap(){  this(null,null,0,-1);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS01.class,args);}  }
class C{  public boolean isHotspotEnabled(){  return hotspotEnabled;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static DocTreeMaker instance(Context context){  DocTreeMaker instance=context.get(treeMakerKey);  if (instance == null)   instance=new DocTreeMaker(context);  return instance;}  }
class C{  @Override protected void translateCore(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions){  final OperandSize qw=OperandSize.QWORD;  final OperandSize dw=OperandSize.DWORD;  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  final IOperandTreeNode targetOperand=instruction.getOperands().get(0).getRootNode().getChildren().get(0);  final IOperandTreeNode sourceOperand1=instruction.getOperands().get(1).getRootNode().getChildren().get(0);  final IOperandTreeNode sourceOperand2=instruction.getOperands().get(2).getRootNode().getChildren().get(0);  final IOperandTreeNode sourceOperand3=instruction.getOperands().get(3).getRootNode().getChildren().get(0);  final String targetRegister=targetOperand.getValue();  final String sourceRegister1=sourceOperand1.getValue();  final String sourceRegister2=sourceOperand2.getValue();  final String sourceRegister3=sourceOperand3.getValue();  final String multiplicationResult=environment.getNextVariableString();  final String subtractionResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createMul(baseOffset++,dw,sourceRegister1,dw,sourceRegister2,qw,multiplicationResult));  instructions.add(ReilHelpers.createSub(baseOffset++,dw,sourceRegister3,qw,multiplicationResult,qw,subtractionResult));  instructions.add(ReilHelpers.createAnd(baseOffset++,qw,subtractionResult,dw,String.valueOf(0xFFFFFFFFL),dw,targetRegister));}  }
class C{  public final int attIndex(){  return m_attIndex;}  }
class C{  private void fixUseCFMergePolicyInitArg(Class c){  if (null == mergePolicyInfo || null == mergePolicyInfo.initArgs)   return;  Object useCFSArg=mergePolicyInfo.initArgs.remove("useCompoundFile");  if (null != useCFSArg) {    log.warn("Ignoring 'useCompoundFile' specified as an init arg for the <mergePolicy> since it is no directly longer supported by " + c.getSimpleName());    if (useCFSArg instanceof Boolean) {      boolean cfs=((Boolean)useCFSArg).booleanValue();      log.warn("Please update your config to specify <useCompoundFile>" + cfs + "</useCompoundFile> directly in your <indexConfig> settings.");      effectiveUseCompoundFileSetting=cfs;    } else {      log.error("MergePolicy's 'useCompoundFile' init arg is not a boolean, can not apply back compat logic to apply to the IndexWriterConfig: " + useCFSArg.toString());    }  }}  }
class C{  @Override public void frustum(float left,float right,float bottom,float top,float znear,float zfar){  flush();  float n2=2 * znear;  float w=right - left;  float h=top - bottom;  float d=zfar - znear;  projection.set(n2 / w,0,(right + left) / w,0,0,-n2 / h,(top + bottom) / h,0,0,0,-(zfar + znear) / d,-(n2 * zfar) / d,0,0,-1,0);  updateProjmodelview();}  }
class C{  public Object clone(){  try {    ZipEntry e=(ZipEntry)super.clone();    e.setName(getName());    e.setComment(getComment());    e.setMethod(getMethod());    e.setTime(getTime());    long size=getSize();    if (size > 0) {      e.setSize(size);    }    long cSize=getCompressedSize();    if (cSize > 0) {      e.setComprSize(cSize);    }    long crc=getCrc();    if (crc > 0) {      e.setCrc(crc);    }    @SuppressWarnings("unchecked") final Vector<ZipExtraField> tmpExtraFields=(Vector<ZipExtraField>)extraFields.clone();    e.extraFields=tmpExtraFields;    e.setInternalAttributes(getInternalAttributes());    e.setExternalAttributes(getExternalAttributes());    e.setExtraFields(getExtraFields());    return e;  } catch (  Throwable t) {    return null;  }}  }
class C{  public PlaceData waitForPlace(final boolean bid,final IPlayerBridge bridge){  return m_placePanel.waitForPlace(bid,bridge);}  }
class C{  public final int countActions(){  return mActions.size();}  }
class C{  protected int toScreen(int xOrY){  Dimension sz=getSize();  int min=getMinimum();  double scale;  if (orientation == VERTICAL) {    scale=(sz.height - (2 * ARROW_SZ)) / (double)(getMaximum() - min);  } else {    scale=(sz.width - (2 * ARROW_SZ)) / (double)(getMaximum() - min);  }  if (direction == LEFTRIGHT_TOPBOTTOM) {    return (int)(ARROW_SZ + ((xOrY - min) * scale) + 0.5);  } else {    if (orientation == VERTICAL) {      return (int)(sz.height - (xOrY - min) * scale - ARROW_SZ + 0.5);    } else {      return (int)(sz.width - (xOrY - min) * scale - ARROW_SZ + 0.5);    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:43.533 -0500",hash_original_method="33D76C50C1E8C0374668B986897D9D9E",hash_generated_method="41D29D99AB26FD6A8622374ECAAA3B64") public Object[] toArray(){  return copyElements(new Object[size()]);}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public DeterministicKey deriveNextChild(ImmutableList<ChildNumber> parentPath,boolean relative,boolean createParent,boolean privateDerivation){  DeterministicKey parent=get(parentPath,relative,createParent);  int nAttempts=0;  while (nAttempts++ < HDKeyDerivation.MAX_CHILD_DERIVATION_ATTEMPTS) {    try {      ChildNumber createChildNumber=getNextChildNumberToDerive(parent.getPath(),privateDerivation);      return deriveChild(parent,createChildNumber);    } catch (    HDDerivationException ignore) {    }  }  throw new HDDerivationException("Maximum number of child derivation attempts reached, this is probably an indication of a bug.");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:20.085 -0400",hash_original_method="383C939ECD1DEDDBF0F9A09B5755441B",hash_generated_method="B398CA3C57213E90A6638936F25A133F") private void nextGeneration(){  trip.signalAll();  count=parties;  generation=new Generation();}  }
class C{  public Response deleteUserFromGroup(String username,String groupName){  return restClient.delete("users/" + username + "/groups/"+ groupName,new HashMap<String,String>());}  }
class C{  private void inferParameterTypes(Tree.Primary p,Tree.PositionalArgumentList pal){  Tree.Term term=unwrapExpressionUntilTerm(p);  if (term instanceof Tree.MemberOrTypeExpression) {    Tree.MemberOrTypeExpression mte=(Tree.MemberOrTypeExpression)term;    Declaration dec=mte.getDeclaration();    if (dec instanceof Functional) {      inferParameterTypesDirectly(dec,pal,mte);    } else     if (dec instanceof Value) {      Value value=(Value)dec;      inferParameterTypesIndirectly(pal,value.getType());    }  } else {    inferParameterTypesIndirectly(pal,p.getTypeModel());  }}  }
class C{  public DecoderResult decode(boolean[][] image) throws FormatException, ChecksumException {  int dimension=image.length;  BitMatrix bits=new BitMatrix(dimension);  for (int i=0; i < dimension; i++) {    for (int j=0; j < dimension; j++) {      if (image[i][j]) {        bits.set(j,i);      }    }  }  return decode(bits);}  }
class C{  public boolean hasController(){  return mDraweeHolder.getController() != null;}  }
class C{  public static IP parseFromString(String ip){  String regex="\\s*(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\s*";  Pattern pattern=Pattern.compile(regex);  Matcher m=pattern.matcher(ip);  checkArgument(m.find(),"IP string should match the regex:%s",regex);  int a=Integer.parseInt(m.group(1));  int b=Integer.parseInt(m.group(2));  int c=Integer.parseInt(m.group(3));  int d=Integer.parseInt(m.group(4));  return new IP(a,b,c,d);}  }
class C{  protected void cleanMessageHeaderProperties(final Message message){  message.getMessageProperties().getHeaders().remove(AbstractJavaTypeMapper.DEFAULT_CLASSID_FIELD_NAME);}  }
class C{  public void worldToSphericalCoordinate(Vector3 coord){  srs.getProjection().worldToSpherical(coord);}  }
class C{  public static void main(String[] args){  String url="jdbc:oracle:thin:@//24.151.26.64:1521/lap11";  String uid="adempiere";  String pwd="adempiere";  if (args.length == 0) {    System.out.println("TestConnection <jdbcUrl> <uid> <pwd>");    System.out.println("Example: jdbc:oracle:thin:@//dev:1521/dev adempiere adempiere");    System.out.println("Example: jdbc:oracle:oci8:@dev adempiere adempiere");  } else   if (args.length > 0)   url=args[0]; else   if (args.length > 1)   url=args[1]; else   if (args.length > 2)   url=args[2];  System.out.println("");  TestConnection test=new TestConnection(url,uid,pwd);}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6){  return construct(e1,e2,e3,e4,e5,e6);}  }
class C{  public boolean contains(long pos){  return this.pos <= pos && this.pos + len > pos;}  }
class C{  private int pop(){  if (outputStackTop > 0) {    return outputStack[--outputStackTop];  } else {    return STACK | -(--owner.inputStackTop);  }}  }
class C{  public void moveParagraph(String paragraphId,int index){  moveParagraph(paragraphId,index,false);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.683 -0400",hash_original_method="C433C94D03198733235CDD6598A695B3",hash_generated_method="19B8D51D9B29969F86A9BA7E99FD18C5") @Override public synchronized void mark(int idx) throws IOException {  try {    in.mark(idx);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public static int computeIndentUnits(String line,IJavaProject project){  return IndentManipulation.measureIndentUnits(line,CodeFormatterUtil.getTabWidth(project),CodeFormatterUtil.getIndentWidth(project));}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  menuInflater=getMenuInflater();  menuInflater.inflate(R.menu.main_activity_actions,menu);  return true;}  }
class C{  public static Word fromLong(long val){  return null;}  }
class C{  @Override public void writeTo(ChannelBuffer data){  data.writeInt(dataType);}  }
class C{  public SwitchStatement newSwitchStatement(){  return new SwitchStatement(this);}  }
class C{  public BigdataSail(final Properties properties){  this(properties.getProperty(Options.NAMESPACE,Options.DEFAULT_NAMESPACE),new Journal(properties));  closeOnShutdown=true;  if (!exists()) {    try {      create(properties);    } catch (    InterruptedException|ExecutionException e) {      throw new RuntimeException(e);    }  }}  }
class C{  @Override public void onViewRecycled(ListBaseViewHolder holder){  long begin=System.currentTimeMillis();  holder.setComponentUsing(false);  recycleViewList.add(holder);  if (WXEnvironment.isApkDebugable()) {    WXLogUtils.d(TAG,"Recycle holder " + (System.currentTimeMillis() - begin) + "  Thread:"+ Thread.currentThread().getName());  }}  }
class C{  @Override public void resetIdentifyUser(){  try {    if (analytics != null) {      analytics.flush();    }  } catch (  Exception e) {    logger.error(e);  }}  }
class C{  @Override public String toString(){  if (m_weights == null) {    return "SGD: No model built yet.\n";  }  StringBuffer buff=new StringBuffer();  buff.append("Loss function: ");  if (m_loss == HINGE) {    buff.append("Hinge loss (SVM)\n\n");  } else   if (m_loss == LOGLOSS) {    buff.append("Log loss (logistic regression)\n\n");  } else {    buff.append("Squared loss (linear regression)\n\n");  }  buff.append(m_data.classAttribute().name() + " = \n\n");  int printed=0;  for (int i=0; i < m_weights.length - 1; i++) {    if (i != m_data.classIndex()) {      if (printed > 0) {        buff.append(" + ");      } else {        buff.append("   ");      }      buff.append(Utils.doubleToString(m_weights[i],12,4) + " " + ((m_normalize != null) ? "(normalized) " : "")+ m_data.attribute(i).name()+ "\n");      printed++;    }  }  if (m_weights[m_weights.length - 1] > 0) {    buff.append(" + " + Utils.doubleToString(m_weights[m_weights.length - 1],12,4));  } else {    buff.append(" - " + Utils.doubleToString(-m_weights[m_weights.length - 1],12,4));  }  return buff.toString();}  }
class C{  private WindowListener createWindowListener(){  return new WindowHandler();}  }
class C{  public void addSeriesRenderer(SimpleSeriesRenderer renderer){  mRenderers.add(renderer);}  }
class C{  public boolean hasPostalAddresses(){  return hasRepeatingExtension(PostalAddress.class);}  }
class C{  public void schedConfChamp(){  for (int i=0; i < confTeams.size(); ++i) {    confTeams.get(i).updatePollScore();  }  Collections.sort(confTeams,new TeamCompConfWins());  int winsFirst=confTeams.get(0).getConfWins();  Team t=confTeams.get(0);  int i=0;  ArrayList<Team> teamTB=new ArrayList<>();  while (t.getConfWins() == winsFirst) {    teamTB.add(t);    ++i;    t=confTeams.get(i);  }  if (teamTB.size() > 2) {    Collections.sort(teamTB,new TeamCompPoll());    for (int j=0; j < teamTB.size(); ++j) {      confTeams.set(j,teamTB.get(j));    }  }  int winsSecond=confTeams.get(1).getConfWins();  t=confTeams.get(1);  i=1;  teamTB.clear();  while (t.getConfWins() == winsSecond) {    teamTB.add(t);    ++i;    t=confTeams.get(i);  }  if (teamTB.size() > 2) {    Collections.sort(teamTB,new TeamCompPoll());    for (int j=0; j < teamTB.size(); ++j) {      confTeams.set(1 + j,teamTB.get(j));    }  }  ccg=new Game(confTeams.get(0),confTeams.get(1),confName + " CCG");  confTeams.get(0).gameSchedule.add(ccg);  confTeams.get(1).gameSchedule.add(ccg);}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public String serialize(TreeNode root){  String rst="";  if (root == null) {    return rst;  }  Queue<TreeNode> queue=new LinkedList<TreeNode>();  queue.offer(root);  int size=0;  while (!queue.isEmpty()) {    size=queue.size();    for (int i=0; i < size; i++) {      TreeNode node=queue.poll();      rst+=node.val + ",";      if (node.left == null) {        rst+="#,";      } else {        queue.offer(node.left);      }      if (node.right == null) {        rst+="#,";      } else {        queue.offer(node.right);      }    }  }  System.out.println("here rst: " + rst);  return rst;}  }
class C{  protected void onBufferingStarted(){}  }
class C{  public static String parseBssid(byte[] bssidBytes){  StringBuilder sb=new StringBuilder();  int k;  String hexK;  String str;  for (int i=0; i < bssidBytes.length; i++) {    k=0xff & bssidBytes[i];    hexK=Integer.toHexString(k);    str=((k < 16) ? ("0" + hexK) : (hexK));    System.out.println(str);    sb.append(str);  }  return sb.toString();}  }
class C{  public Acosh(){  super(Number.class,Number.class);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  private void verifyHeaderIntegrity(final CiphertextHeaders ciphertextHeaders) throws BadCiphertextException {  final CipherHandler cipherHandler=new CipherHandler(decryptionKey_,ciphertextHeaders.getHeaderNonce(),ciphertextHeaders.serializeAuthenticatedFields(),Cipher.DECRYPT_MODE,cryptoAlgo_);  try {    final byte[] headerTag=ciphertextHeaders.getHeaderTag();    cipherHandler.cipherData(headerTag,0,headerTag.length);  } catch (  BadCiphertextException e) {    throw new BadCiphertextException("Header integrity check failed.",e);  }}  }
class C{  public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return (m_right.num(xctxt) + m_left.num(xctxt));}  }
class C{  File createJar(File jar,String... entries) throws IOException {  OutputStream out=new FileOutputStream(jar);  try {    JarOutputStream jos=new JarOutputStream(out);    for (    String e : entries) {      jos.putNextEntry(new JarEntry(getPathForZipEntry(e)));      jos.write(getBodyForEntry(e).getBytes());    }    jos.close();  }  finally {    out.close();  }  return jar;}  }
class C{  public boolean isAgeToValid(){  return ageTo == null || ageToSec != null;}  }
class C{  public boolean hasComments(){  return super.hasElement(Comments.KEY);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.994 -0500",hash_original_method="8221B1C759F7AE45DFBE3F2918777459",hash_generated_method="32463E99A7706C050DBDE46DC7BF00CC") public RegionIterator(Region region){  mNativeIter=nativeConstructor(region.ni());  addTaint(region.getTaint());}  }
class C{  public Set entrySet(){  if (entrySet == null)   entrySet=new EntrySet();  return entrySet;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (isNetworkedPlaylistCall(stack,1)) {    return makeNetworkedCall(stack);  }  int x=getInt(stack);  Playlist p=getPlaylist(stack);  if (p == null)   return null;  if (!Permissions.hasPermission(Permissions.PERMISSION_PLAYLIST,stack.getUIMgr()) && p != stack.getUIMgrSafe().getVideoFrame().getNowPlayingList())   return null;  p.movePlaylistSegment(x,false);  sage.plugin.PluginEventManager.postEvent(sage.plugin.PluginEventManager.PLAYLIST_MODIFIED,new Object[]{sage.plugin.PluginEventManager.VAR_PLAYLIST,p,sage.plugin.PluginEventManager.VAR_UICONTEXT,(stack.getUIMgr() != null ? stack.getUIMgr().getLocalUIClientName() : null)});  return null;}  }
class C{  public static double logbeta(double p,double q){  return (lngamma(p) + lngamma(q) - lngamma(p + q));}  }
class C{  public void start(){  if (cameras != null) {    CameraDescriptor camera=cameras.get(currentCamera);    CameraView cv=getPreview(camera);    if (cv.isAvailable()) {      open();    }  }}  }
class C{  public boolean isSealed(URL url){  if (jar != null) {    init();  }  return url.equals(sealBase);}  }
class C{  private void addNode(Node node) throws SyncException {  Short nodeId=node.getNodeId();  if (allNodes.get(nodeId) != null) {    throw new SyncException("Error adding node " + node + ": a node with that ID already exists");  }  allNodes.put(nodeId,node);  Short domainId=node.getDomainId();  List<Node> localDomain=localDomains.get(domainId);  if (localDomain == null) {    localDomains.put(domainId,localDomain=new ArrayList<Node>());  }  localDomain.add(node);}  }
class C{  public Object visit(ASTReference node,Object data){  String override=(String)argmap.get(node.literal().substring(1));  if (override != null) {    node.setLiteral(override);  }  data=node.childrenAccept(this,data);  return data;}  }
class C{  public DataTypeNotSupportedException(String message){  super(message);}  }
class C{  public void repaint(RectListManager areas){  if (areas == null)   return;  CachableRed cr;  WritableRaster syncRaster;  WritableRaster copyRaster;  updateWorkingBuffers();  if ((rootCR == null) || (workingBaseRaster == null))   return;  cr=rootCR;  syncRaster=workingBaseRaster;  copyRaster=workingRaster;  Rectangle srcR=rootCR.getBounds();  Rectangle dstR=workingRaster.getBounds();  if ((dstR.x < srcR.x) || (dstR.y < srcR.y) || (dstR.x + dstR.width > srcR.x + srcR.width)|| (dstR.y + dstR.height > srcR.y + srcR.height))   cr=new PadRed(cr,dstR,PadMode.ZERO_PAD,null);synchronized (syncRaster) {    cr.copyData(copyRaster);  }  if (!HaltingThread.hasBeenHalted()) {    BufferedImage tmpBI=workingOffScreen;    workingBaseRaster=currentBaseRaster;    workingRaster=currentRaster;    workingOffScreen=currentOffScreen;    currentRaster=copyRaster;    currentBaseRaster=syncRaster;    currentOffScreen=tmpBI;  }}  }
class C{  private boolean isDaily(){  return ExecutionWindowType.DAILY.name().equals(window.getExecutionWindowType());}  }
class C{  protected <T extends DataObject>String checkForDelete(T object,List<Class<? extends DataObject>> excludeTypes){  Class<? extends DataObject> clazz=object.getClass();  URI id=object.getId();  List<Class<? extends DataObject>> excludes=new ArrayList<Class<? extends DataObject>>();  if (excludeTypes != null) {    excludes.addAll(excludeTypes);  }  excludes.add(Task.class);  String depMsg=geoDependencyChecker.checkDependencies(id,clazz,true,excludes);  if (depMsg != null) {    return depMsg;  }  return object.canBeDeleted();}  }
class C{  public ClientResponse postWithHeader(URI uri,String body){  return client.resource(uri).header(GlanceConstants.AUTH_TOKEN_HEADER,authTokenHeader).type(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class,body);}  }
class C{  private void validateNetworkInterfaceCount(int totalNetworkInterfaceStateCount) throws Throwable {  if (this.isAwsClientMock) {    return;  }  queryDocumentsAndAssertExpectedCount(this.host,totalNetworkInterfaceStateCount,NetworkInterfaceService.FACTORY_LINK,false);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean thumb=evalBool(stack.pop());  int idx=getInt(stack);  SeriesInfo si=getSeriesInfo(stack);  if (si == null)   return null;  String imageURL=si.getImageURL(idx,thumb);  if (imageURL == null || imageURL.length() == 0)   return null; else   return imageURL;}  }
class C{  private final void throwException3(int fromIndex,int toIndex) throws IndexOutOfBoundsException {  throw new IndexOutOfBoundsException("Index range [" + fromIndex + ", "+ toIndex+ "] not in valid range [0-"+ (size - 1)+ "]");}  }
class C{  public static ValueExp value(double val){  return new NumericValueExp(val);}  }
class C{  static byte[] createBuffer(){  return new byte[8192];}  }
class C{  @Override public int size(){  return this._map.size();}  }
class C{  public boolean isPlain(){  return !(bold || italic);}  }
class C{  private boolean invokeInterceptor(Request request,Response response,List<Route> interceptors) throws Exception {  for (int i=0, len=interceptors.size(); i < len; i++) {    Route route=interceptors.get(i);    boolean flag=routeViewHandler.intercept(request,response,route);    if (!flag) {      return false;    }  }  return true;}  }
class C{  public static void writeBitmapToFile(Bitmap bm,File file,int quality) throws IOException {  FileOutputStream fos=new FileOutputStream(file);  bm.compress(Bitmap.CompressFormat.JPEG,quality,fos);  fos.flush();  fos.close();}  }
class C{  public static AlertLevelChangeMessage create(int newLevel){  AlertLevelChangeMessage m=new AlertLevelChangeMessage();  m.newLevel=newLevel;  return m;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void saveSpinnerValues(Reporter r){  log.debug("Save train icons coordinates for location " + r.getSystemName());  PhysicalLocation.setBeanPhysicalLocation(physicalLocation.getValue(),r);}  }
class C{  public void syncbase(float offset,String syncbaseID,String timeSymbol){}  }
class C{  public PcStableRunner(GraphSource graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  public boolean visualizeSingleton(){  return false;}  }
class C{  public void destroy(){  services=null;  removeFromThreadLocals();  matchesArrayThreadLocal=null;  matchesPerStmtThreadLocal=null;  scheduleArrayThreadLocal=null;  schedulePerStmtThreadLocal=null;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (bayesIm == null) {    throw new NullPointerException();  }  if (evidence == null) {    throw new NullPointerException();  }}  }
class C{  void restore(){  processed=processedSave;  sizeOfAAD=sizeOfAADSave;  if (aadBuffer != null) {    aadBuffer.reset();    if (aadBufferSave != null) {      aadBuffer.write(aadBufferSave,0,aadBufferSave.length);    }  }  if (gctrPAndC != null)   gctrPAndC.restore();  if (ghashAllToS != null)   ghashAllToS.restore();  if (ibuffer != null) {    ibuffer.reset();    ibuffer.write(ibufferSave,0,ibufferSave.length);  }}  }
class C{  @Deprecated public Builder reconnectIntialDelay(final int initialDelay){  this.reconnectInitialDelay=initialDelay;  return this;}  }
class C{  @Override public int hashCode(){  int result=17;  final int mult=37;  result=this.id.hashCode();  result=mult * result + this.code;  return result;}  }
class C{  public DateTitle(){  this(DateFormat.LONG);}  }
class C{  public static final String fetch(final int resID){  if (mRawMaterials.containsKey(resID))   return mRawMaterials.get(resID);  final StringBuilder sb=new StringBuilder();  try {    final Resources res=mContext.get().getResources();    final InputStreamReader isr=new InputStreamReader(res.openRawResource(resID));    final BufferedReader br=new BufferedReader(isr);    String line;    while ((line=br.readLine()) != null)     sb.append(line).append("\n");    mRawMaterials.put(resID,sb.toString());    isr.close();    br.close();  } catch (  Exception e) {    RajLog.e("Failed to read material: " + e.getMessage());    e.printStackTrace();  }  return mRawMaterials.get(resID);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void save(){  try {    File file=getOptionsFile();    ByteArrayOutputStream outBuffer=new ByteArrayOutputStream();    doSave(outBuffer);    BufferedOutputStream outFile=new BufferedOutputStream(new FileOutputStream(file));    ByteStreams.copy(new ByteArrayInputStream(outBuffer.toByteArray()),outFile);    outFile.flush();    outFile.close();  } catch (  Throwable e) {    GPLogger.log(e);  }}  }
class C{  public static byte[] encodeBase64(final byte[] binaryData,final boolean isChunked,final boolean urlSafe,final int maxResultSize){  if (binaryData == null || binaryData.length == 0) {    return binaryData;  }  final Base64 b64=isChunked ? new Base64(urlSafe) : new Base64(0,CHUNK_SEPARATOR,urlSafe);  final long len=b64.getEncodedLength(binaryData);  if (len > maxResultSize) {    throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len + ") than the specified maximum size of "+ maxResultSize);  }  return b64.encode(binaryData);}  }
class C{  public void putAsString(String key,boolean value){  String strValue=Boolean.valueOf(value).toString();  super.put(key,strValue);}  }
class C{  public String globalInfo(){  return "A regression scheme that employs any " + "classifier on a copy of the data that has the class attribute " + "discretized. The predicted value is the expected value of the "+ "mean class value for each discretized interval (based on the "+ "predicted probabilities for each interval). This class now "+ "also supports conditional density estimation by building "+ "a univariate density estimator from the target values in "+ "the training data, weighted by the class probabilities. \n\n"+ "For more information on this process, see\n\n"+ getTechnicalInformation().toString();}  }
class C{  private void reInitialize(){  super.reInit();  this.eventScanner=new EventScanner(this);  this.listeningPoints=new Hashtable<String,ListeningPointImpl>();  this.sipProviders=new LinkedList<SipProviderImpl>();  this.sipListener=null;}  }
class C{  protected Analyser createAnalyzer(String code){  Analyser analyser;  if (code.contains("@negative")) {    if (code.contains("@negative TypeError")) {      analyser=new PositiveAnalyser(logger,tester);    } else {      analyser=new NegativeAnalyser(logger);    }  } else {    analyser=new PositiveAnalyser(logger,tester);  }  return analyser;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Configurator errorText(int textRes,int textSize,int textColor){  if (textRes > 0) {    viewErrorText=textRes;  }  if (textSize > 0) {    viewErrorTextSize=textSize;  }  if (textColor > 0) {    viewErrorTextColor=textColor;  }  return this;}  }
class C{  @Override public void write(OutputStream outputStream) throws IOException {  if (getRequest().getMethod() != Method.HEAD) {    if (responseWriter instanceof BinaryQueryResponseWriter) {      BinaryQueryResponseWriter binWriter=(BinaryQueryResponseWriter)responseWriter;      binWriter.write(outputStream,solrRequest,solrResponse);    } else {      String charset=ContentStreamBase.getCharsetFromContentType(contentType);      Writer out=(charset == null || charset.equalsIgnoreCase("UTF-8")) ? new OutputStreamWriter(outputStream,UTF8) : new OutputStreamWriter(outputStream,charset);      out=new FastWriter(out);      responseWriter.write(out,solrRequest,solrResponse);      out.flush();    }  }}  }
class C{  private void layoutFrame(){  frame.setTitle(client.getName() + Messages.getString("ClientGUI.clientTitleSuffix"));  frame.getContentPane().setLayout(new BorderLayout());  frame.getContentPane().add(this,BorderLayout.CENTER);  frame.validate();}  }
class C{  @Override public void destroy(T instance,CreationalContext<T> creationalContext){}  }
class C{  protected NamedNodeMap createAttributes(){  return new NamedNodeHashMap();}  }
class C{  private String readFromLocationFile(File project) throws IOException {  String result="";  Path location=Paths.get(project.getAbsolutePath()).resolve(".location");  InputStream inputStream=Files.newInputStream(location);  try (DataInputStream dataStream=new DataInputStream(inputStream)){    byte[] begin_chunk=new byte[16];    dataStream.read(begin_chunk,0,16);    result=dataStream.readUTF();    String uriPrefix="URI//file:";    if (System.getProperty("os.name").startsWith("Windows")) {      uriPrefix=uriPrefix.concat("/");    }    if (result.startsWith(uriPrefix)) {      result=result.substring(uriPrefix.length());    }  }   return result;}  }
class C{  public String deltaTipText(){  return "Iteratively decrease support by this factor. Reduces support " + "until min support is reached or required number of rules has been " + "generated.";}  }
class C{  public static boolean usesSecondOperand(final Integer mnemonic){  return !mnemonic.equals(ReilHelpers._OPCODE_NOP) && !mnemonic.equals(ReilHelpers._OPCODE_BISZ) && !mnemonic.equals(ReilHelpers._OPCODE_STR)&& !mnemonic.equals(ReilHelpers._OPCODE_STM)&& !mnemonic.equals(ReilHelpers._OPCODE_LDM)&& !mnemonic.equals(ReilHelpers._OPCODE_JCC);}  }
class C{  private static boolean CallStaticBooleanMethod(JNIEnvironment env,int classJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallStaticBooleanMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(methodID,TypeReference.Boolean);    return Reflection.unwrapBoolean(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return false;  }}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider() throws Exception {  Provider[] providers=Security.getProviders("Cipher.DES");  assertNotNull("No installed providers support Cipher.DES",providers);  for (int i=0; i < providers.length; i++) {    Cipher cipher=Cipher.getInstance("DES",providers[i]);    assertNotNull("Cipher.getInstance() returned a null value",cipher);  }  try {    Cipher.getInstance("DES",(Provider)null);    fail();  } catch (  IllegalArgumentException expected) {  }  try {    Cipher.getInstance("WrongAlg",providers[0]);    fail();  } catch (  NoSuchAlgorithmException expected) {  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String f=getString(stack);  if (f != null)   Seeker.getInstance().addArchiveDirectory(f,Seeker.MUSIC_DIR_MASK);  return null;}  }
class C{  public static Path createTempDirectory(){  final File parent=new File(getTempDirValue());  if (!parent.exists() || !parent.canWrite()) {    throw new RuntimeException("Cannot access temporary directory under: " + getTempDirValue());  }  File child;  try {    child=Files.createTempDirectory(parent.toPath(),null).toFile();  } catch (  IOException e) {    throw new RuntimeException(e);  }  if (!child.exists()) {    throw new RuntimeException("Error while trying to create folder at " + parent + ".");  }  child.deleteOnExit();  return child.toPath();}  }
class C{  static void keepOnly(Set<Long> threads){synchronized (sInstance) {    Iterator<Conversation> iter=sInstance.mCache.iterator();    while (iter.hasNext()) {      Conversation c=iter.next();      if (!threads.contains(c.getThreadId())) {        iter.remove();      }    }  }  if (DEBUG) {    LogTag.debug("after keepOnly");    dumpCache();  }}  }
class C{  @Deprecated public CalendarDay(){  this(CalendarUtils.getInstance());}  }
class C{  public static void main(String[] args){  TableDemo demo=new TableDemo(null);  demo.mainImpl();}  }
class C{  public Post(){}  }
class C{  public SaveProvider(SentenceExec sentupdate,SentenceExec sentinsert,SentenceExec sentdelete){  m_sentupdate=sentupdate;  m_sentinsert=sentinsert;  m_sentdelete=sentdelete;}  }
class C{  public void dismissToolTip(){  if (toolTipPopup != null) {    toolTipPopup.dismiss();    toolTipPopup=null;  }}  }
class C{  public void testLogWrite() throws Exception {  IgfsLogger log=IgfsLogger.logger(ENDPOINT,IGFS_NAME,LOG_DIR,10);  log.logCreate(1,PATH,PRIMARY,true,2,new Integer(3).shortValue(),4L);  log.logAppend(2,PATH,PRIMARY,8);  log.logCloseOut(2,9L,10L,11);  log.close();  checkLog(new SB().a(U.jvmPid() + d() + TYPE_OPEN_OUT+ d()+ PATH_STR_ESCAPED+ d()+ PRIMARY+ d()+ 1+ d()+ 2+ d(2)+ 0+ d()+ 1+ d()+ 3+ d()+ 4+ d(10)).toString(),new SB().a(U.jvmPid() + d() + TYPE_OPEN_OUT+ d()+ PATH_STR_ESCAPED+ d()+ PRIMARY+ d()+ 2+ d()+ 8+ d(2)+ 1+ d(13)).toString(),new SB().a(U.jvmPid() + d() + TYPE_CLOSE_OUT+ d(3)+ 2+ d(11)+ 9+ d()+ 10+ d()+ 11+ d(3)).toString());}  }
class C{  protected boolean addService(Class serviceClass,BeanContextServiceProvider bcsp,boolean fireEvent){  if (serviceClass == null)   throw new NullPointerException("serviceClass");  if (bcsp == null)   throw new NullPointerException("bcsp");synchronized (BeanContext.globalHierarchyLock) {    if (services.containsKey(serviceClass))     return false; else {      services.put(serviceClass,createBCSSServiceProvider(serviceClass,bcsp));      if (bcsp instanceof Serializable)       serializable++;      if (!fireEvent)       return true;      BeanContextServiceAvailableEvent bcssae=new BeanContextServiceAvailableEvent(getBeanContextServicesPeer(),serviceClass);      fireServiceAdded(bcssae);synchronized (children) {        Iterator i=children.keySet().iterator();        while (i.hasNext()) {          Object c=i.next();          if (c instanceof BeanContextServices) {            ((BeanContextServicesListener)c).serviceAvailable(bcssae);          }        }      }      return true;    }  }}  }
class C{  protected void addXML11Component(XMLComponent component){  if (fXML11Components.contains(component)) {    return;  }  fXML11Components.add(component);  addRecognizedParamsAndSetDefaults(component);}  }
class C{  public EquiDepthHistogram(float[] quantileElements){  this.binBoundaries=quantileElements;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy == null)   return new Long(0);  if (pluggy.getModDate() == 0)   return new Long(pluggy.getCreateDate()); else   return new Long(pluggy.getModDate());}  }
class C{  public void activateLocation(final String nickname,final Locations service){  this.services.put(nickname,service);}  }
class C{  private void convertNullSubtreeAncestors(){  for (int i=0; i < currentPath.size(); i++) {    if (subtreePath.get(i) == null) {      subtreePath.set(i,new NodeTree(currentPath.get(i)));      subtreePath.get(i - 1).addChildTree(subtreePath.get(i));    }  }}  }
class C{  private UnusualMaps combineDeltaMaps(int jsrUnusualMapid){  UnusualMaps deltaMap=jsrInfo.unusualMaps[jsrUnusualMapid];  int reftargetindex=jsrInfo.extraUnusualMap.getReferenceMapIndex();  int nreftargetindex=jsrInfo.extraUnusualMap.getNonReferenceMapIndex();  int addrtargetindex=jsrInfo.extraUnusualMap.getReturnAddressMapIndex();  int refdeltaindex=deltaMap.getReferenceMapIndex();  int nrefdeltaindex=deltaMap.getNonReferenceMapIndex();  int addrdeltaindex=deltaMap.getReturnAddressMapIndex();  if (VM.TraceStkMaps) {    VM.sysWriteln("combineDeltaMaps- original ref map id  = ",reftargetindex);    VM.sysWrite("combineDeltaMaps- original ref map  = ");    for (int i=0; i < bytesPerMap(); i++) {      VM.sysWrite(jsrInfo.unusualReferenceMaps[reftargetindex + i]);    }    VM.sysWriteln();    VM.sysWriteln("combineDeltaMaps- original nref map id  = ",nreftargetindex);    VM.sysWrite("combineDeltaMaps original nref map  = ");    for (int i=0; i < bytesPerMap(); i++) {      VM.sysWrite(jsrInfo.unusualReferenceMaps[nreftargetindex + i]);    }    VM.sysWriteln();    VM.sysWriteln("combineDeltaMaps- original retaddr map id  = ",addrtargetindex);    VM.sysWrite("combineDeltaMaps original retaddr map  = ");    for (int i=0; i < bytesPerMap(); i++) {      VM.sysWrite(jsrInfo.unusualReferenceMaps[addrtargetindex + i]);    }    VM.sysWriteln();    VM.sysWriteln("combineDeltaMaps- delta ref map id  = ",refdeltaindex);    VM.sysWrite("combineDeltaMaps- original delta  ref map  = ");    for (int i=0; i < bytesPerMap(); i++) {      VM.sysWrite(jsrInfo.unusualReferenceMaps[refdeltaindex + i]);    }    VM.sysWriteln();    VM.sysWriteln("combineDeltaMaps- delta nref map id  = ",nrefdeltaindex);    VM.sysWrite("combineDeltaMaps original delta nref map  = ");    for (int i=0; i < bytesPerMap(); i++) {      VM.sysWrite(jsrInfo.unusualReferenceMaps[nrefdeltaindex + i]);    }    VM.sysWriteln();    VM.sysWriteln("combineDeltaMaps- delta retaddr map id  = ",addrdeltaindex);    VM.sysWrite("combineDeltaMaps original  delta retaddr map  = ");    for (int i=0; i < bytesPerMap(); i++) {      VM.sysWrite(jsrInfo.unusualReferenceMaps[addrdeltaindex + i]);    }    VM.sysWriteln();    VM.sysWriteln("combineDeltaMaps- ref target mapid  = ",reftargetindex);    VM.sysWriteln("                        ref delta mapid = ",refdeltaindex);    VM.sysWriteln("combineDeltaMaps- NONref target mapid  = ",nreftargetindex);    VM.sysWriteln("                        NONref delta mapid = ",nrefdeltaindex);    VM.sysWriteln("combineDeltaMaps- retaddr target mapid  = ",addrtargetindex);    VM.sysWriteln("                         retaddr delta mapid = ",addrdeltaindex);    VM.sysWriteln("                         jsrInfo.tempIndex = ",jsrInfo.tempIndex);  }  mergeMap(jsrInfo.tempIndex,reftargetindex,MergeOperation.COPY);  mergeMap(reftargetindex,refdeltaindex,MergeOperation.OR);  mergeMap(reftargetindex,nreftargetindex,MergeOperation.NAND);  mergeMap(reftargetindex,addrtargetindex,MergeOperation.NAND);  mergeMap(reftargetindex,jsrInfo.tempIndex,MergeOperation.OR);  mergeMap(jsrInfo.tempIndex,nreftargetindex,MergeOperation.COPY);  mergeMap(nreftargetindex,nrefdeltaindex,MergeOperation.OR);  mergeMap(nreftargetindex,reftargetindex,MergeOperation.NAND);  mergeMap(nreftargetindex,addrtargetindex,MergeOperation.NAND);  mergeMap(nreftargetindex,jsrInfo.tempIndex,MergeOperation.OR);  mergeMap(addrtargetindex,addrdeltaindex,MergeOperation.OR);  if (VM.TraceStkMaps) {    VM.sysWrite("setupjsrmap-combineDeltaMaps- merged ref map  = ");    for (int i=0; i < bytesPerMap(); i++) {      VM.sysWrite(jsrInfo.unusualReferenceMaps[reftargetindex + i]);    }    VM.sysWriteln();    VM.sysWrite("setupjsrmap-combineDeltaMaps- merged nonref map  = ");    for (int i=0; i < bytesPerMap(); i++) {      VM.sysWrite(jsrInfo.unusualReferenceMaps[nreftargetindex + i]);    }    VM.sysWriteln();    VM.sysWrite("setupjsrmap-combineDeltaMaps- merged retaddr map  = ");    for (int i=0; i < bytesPerMap(); i++) {      VM.sysWrite(jsrInfo.unusualReferenceMaps[addrtargetindex + i]);    }    VM.sysWriteln();  }  return jsrInfo.extraUnusualMap;}  }
class C{  public static String kmlBoolean(boolean value){  return value ? "1" : "0";}  }
class C{  private static <T extends GlowEntity>void bind(EntityStore<T> store){  idTable.put(store.getId(),store);  classTable.put(store.getType(),store);}  }
class C{  public void println(double x){  out.println(x);}  }
class C{  public void printClasses(CrosstabFormat crosstabFormat,boolean isCumulative,double[] classes,PrintStream out){  long numberOfLegs;  out.println();  out.print("#i\tclass");  for (  String mode : this.frequencies.keySet()) {    out.print("\t" + mode);  }  out.print("\tsum");  out.println();  for (int i=0; i < classes.length; i++) {    long sumClass=0;    out.print(Integer.toString(i) + "\t");    out.print(classFormat.format(classes[i]));    for (    String mode : this.frequencies.keySet()) {      out.print("\t");      if (isCumulative) {        numberOfLegs=this.getNumberOfLegs(mode,DUMMY_NEGATIVE_BOUND,classes[i]);      } else {        numberOfLegs=this.getNumberOfLegs(mode,((i == 0) ? DUMMY_NEGATIVE_BOUND : classes[i - 1]),classes[i]);      }      sumClass+=numberOfLegs;switch (crosstabFormat) {case ABSOLUTE:        out.print(Long.toString(numberOfLegs));      break;case PERCENTAGE:    out.print(percentFormat.format((double)numberOfLegs / (double)this.getNumberOfLegs()));  break;}}out.print("\t");switch (crosstabFormat) {case ABSOLUTE:out.print(Long.toString(sumClass));break;case PERCENTAGE:out.print(percentFormat.format((double)sumClass / (double)this.getNumberOfLegs()));break;}out.println();}out.print("#sum\t");for (String mode : this.frequencies.keySet()) {out.print("\t");numberOfLegs=this.getNumberOfLegs(mode);switch (crosstabFormat) {case ABSOLUTE:out.print(numberOfLegs);break;case PERCENTAGE:out.print(percentFormat.format((double)numberOfLegs / (double)this.getNumberOfLegs()));break;}}out.print("\t");numberOfLegs=this.getNumberOfLegs();switch (crosstabFormat) {case ABSOLUTE:out.print(Long.toString(numberOfLegs));break;case PERCENTAGE:out.print(percentFormat.format(1.0));break;}out.println();}  }
class C{  public boolean validate(InputNode node) throws Exception {  String name=node.getName();  String element=path.getElement(name);  Label label=elements.get(element);  Converter converter=label.getConverter(context);  return converter.validate(node);}  }
class C{  public void cancelOpen(){  isCancelOpen=true;}  }
class C{  public static <T,K,L extends List<T>>Window<T,K,L> window(BiFunction<Partition<T,K,L>,T,Boolean> insertionPolicy,BiConsumer<Partition<T,K,L>,T> contentsPolicy,Consumer<Partition<T,K,L>> evictDeterminer,BiConsumer<Partition<T,K,L>,T> triggerPolicy,Function<T,K> keyFunction,Supplier<L> listSupplier){  return new WindowImpl<>(insertionPolicy,contentsPolicy,evictDeterminer,triggerPolicy,keyFunction,listSupplier);}  }
class C{  BinominalAttribute(String name){  super(name,Ontology.BINOMINAL);}  }
class C{  public boolean generate(NodeLIRBuilder builder,int index,Node node,List<Node> nodes){  assert index == nodes.indexOf(node);  Result result=pattern.matchShape(node,this);  if (result != Result.OK) {    return false;  }  MatchContext context=new MatchContext(builder,this,index,node,nodes);  result=pattern.matchUsage(node,context);  if (result == Result.OK) {    ComplexMatchResult value=generatorMethod.match(builder.getNodeMatchRules(),buildArgList(context));    if (value != null) {      context.setResult(value);      MatchStatementSuccess.increment();      Debug.counter("MatchStatement[%s]",getName()).increment();      return true;    }    if (LogVerbose.getValue()) {      Debug.log("while matching %s|%s %s %s returned null",context.getRoot().toString(Verbosity.Id),context.getRoot().getClass().getSimpleName(),getName(),generatorMethod.getName());      Debug.log("with nodes %s",formatMatch(node));    }  } else {    if (LogVerbose.getValue() && result.code != MatchResultCode.WRONG_CLASS) {      Debug.log("while matching %s|%s %s %s",context.getRoot().toString(Verbosity.Id),context.getRoot().getClass().getSimpleName(),getName(),result);    }  }  return false;}  }
class C{  @SuppressWarnings({"UnusedCatchParameter"}) private static void findResourcesInDirectory(GridUriDeploymentFileResourceLoader clsLdr,File dir,Set<Class<? extends ComputeTask<?,?>>> rsrcs){  assert dir.isDirectory() == true;  for (  File file : dir.listFiles()) {    if (file.isDirectory()) {      findResourcesInDirectory(clsLdr,file,rsrcs);    } else {      Class<? extends ComputeTask<?,?>> rsrc=null;      try {        rsrc=clsLdr.createResource(file.getAbsolutePath(),true);      } catch (      IgniteSpiException e) {        assert false;      }      if (rsrc != null)       rsrcs.add(rsrc);    }  }}  }
class C{  public TableRowFilteredModel(TableLineFilter<SearchResultDataLine> f){  super();  if (f == null) {    throw new NullPointerException("null filter");  }  FILTER=f;  HIDDEN=new ArrayList<SearchResultDataLine>();  _numResults=0;}  }
class C{  public Matrix3(Matrix3 matrix){  if (matrix == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Matrix3","constructor","missingMatrix"));  }  System.arraycopy(matrix.m,0,this.m,0,9);}  }
class C{  public ObjectStreamField(String name,Class<?> type,boolean unshared){  if (name == null) {    throw new NullPointerException();  }  this.name=name;  this.type=type;  this.unshared=unshared;  signature=getClassSignature(type).intern();  field=null;}  }
class C{  public void createMarkers(){  List<TaskAttribute> comments=taskData.getAttributeMapper().getAttributesByType(taskData,TaskAttribute.TYPE_COMMENT);  for (  TaskAttribute commentAttr : comments) {    markComment(taskRepository,commentAttr,taskData.getTaskId());  }}  }
class C{  public void cancelAll(){  if (mEnabled)   CENTER.cancelAll();}  }
class C{  public MAVLinkMessage read() throws IOException {  while (true) {    try {      return new MAVLinkMessage(schema,buffer);    } catch (    MAVLinkProtocolException e) {      if (debug) {        System.err.println(String.format("%s: %s",channel,e));      }    }catch (    MAVLinkUnknownMessage e) {      if (debug) {        System.err.println(String.format("%s: %s",channel,e));      }    }catch (    BufferUnderflowException e) {      buffer.compact();      int n=0;      try {        n=channel.read(buffer);      } catch (      IOException ioe) {        buffer.flip();        throw ioe;      }      buffer.flip();      if (n <= 0) {        return null;      }    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static ValueLob openUnlinked(int type,DataHandler handler,int tableId,int objectId,long precision,boolean compression,String fileName){  return new ValueLob(type,handler,fileName,tableId,objectId,false,precision,compression);}  }
class C{  public static int dip2px(float dpValue){  float scale=2;  try {    scale=WXEnvironment.getApplication().getResources().getDisplayMetrics().density;  } catch (  Exception e) {    WXLogUtils.e("[WXViewUtils] dip2px:",e);  }  float finalPx=(dpValue * scale + 0.5f);  return finalPx > 0 && finalPx < 1 ? 1 : (int)finalPx;}  }
class C{  public File saveFile(String where){  return new File(savePath(where));}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  DefaultCategoryDataset clone=(DefaultCategoryDataset)super.clone();  clone.data=(DefaultKeyedValues2D)this.data.clone();  return clone;}  }
class C{  public static String format(Number number){  String formatted;  if (number instanceof Double || number instanceof Float) {    formatted=Double.toString(number.doubleValue()).replaceAll("\\.0+$","").replaceAll("(\\.[0-9]*[1-9])0+$","$1");  } else {    formatted=number.toString();  }  return formatted;}  }
class C{  public Problem(long pointer) throws Exception {  super();  try {    this.dimension=CocoJNI.cocoProblemGetDimension(pointer);    this.number_of_objectives=CocoJNI.cocoProblemGetNumberOfObjectives(pointer);    this.number_of_constraints=CocoJNI.cocoProblemGetNumberOfConstraints(pointer);    this.lower_bounds=CocoJNI.cocoProblemGetSmallestValuesOfInterest(pointer);    this.upper_bounds=CocoJNI.cocoProblemGetLargestValuesOfInterest(pointer);    this.id=CocoJNI.cocoProblemGetId(pointer);    this.name=CocoJNI.cocoProblemGetName(pointer);    this.index=CocoJNI.cocoProblemGetIndex(pointer);    this.pointer=pointer;  } catch (  Exception e) {    throw new Exception("Problem constructor failed.\n" + e.toString());  }}  }
class C{  public static <QUERY_TYPE,META_QUERY,QUEUE_CONTEXT,RESULT>QueryManagerSynchronous<QUERY_TYPE,META_QUERY,QUEUE_CONTEXT,RESULT> newInstance(QueryExecutor<QUERY_TYPE,META_QUERY,QUEUE_CONTEXT,RESULT> queryExecutor){  return new QueryManagerSynchronous<QUERY_TYPE,META_QUERY,QUEUE_CONTEXT,RESULT>(queryExecutor);}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    this.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      this.out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        this.out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  private static UnitValue parseUnitValue(String s,UnitValue emptyReplacement,boolean isHor){  if (s == null || s.length() == 0)   return emptyReplacement;  String cs=s;  char c0=s.charAt(0);  if (c0 == '(' && s.charAt(s.length() - 1) == ')')   s=s.substring(1,s.length() - 1);  if (c0 == 'n' && (s.equals("null") || s.equals("n")))   return null;  if (c0 == 'i' && s.equals("inf"))   return UnitValue.INF;  int oper=getOper(s);  boolean inline=oper == UnitValue.ADD || oper == UnitValue.SUB || oper == UnitValue.MUL || oper == UnitValue.DIV;  if (oper != UnitValue.STATIC) {    String[] uvs;    if (inline == false) {      String sub=s.substring(4,s.length() - 1).trim();      uvs=toTrimmedTokens(sub,',');      if (uvs.length == 1)       return parseUnitValue(sub,null,isHor);    } else {      char delim;      if (oper == UnitValue.ADD) {        delim='+';      } else       if (oper == UnitValue.SUB) {        delim='-';      } else       if (oper == UnitValue.MUL) {        delim='*';      } else {        delim='/';      }      uvs=toTrimmedTokens(s,delim);      if (uvs.length > 2) {        String last=uvs[uvs.length - 1];        String first=s.substring(0,s.length() - last.length() - 1);        uvs=new String[]{first,last};      }    }    if (uvs.length != 2)     throw new IllegalArgumentException("Malformed UnitValue: '" + s + "'");    UnitValue sub1=parseUnitValue(uvs[0],null,isHor);    UnitValue sub2=parseUnitValue(uvs[1],null,isHor);    if (sub1 == null || sub2 == null)     throw new IllegalArgumentException("Malformed UnitValue. Must be two sub-values: '" + s + "'");    return new UnitValue(isHor,oper,sub1,sub2,cs);  } else {    try {      String[] numParts=getNumTextParts(s);      float value=numParts[0].length() > 0 ? Float.parseFloat(numParts[0]) : 1;      return new UnitValue(value,numParts[1],isHor,oper,cs);    } catch (    Exception e) {      throw new IllegalArgumentException("Malformed UnitValue: '" + s + "'");    }  }}  }
class C{  protected static void cancelPeriodicRefresh(final Context context){  final AlarmManager am=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);  PendingIntent pi=PendingIntent.getBroadcast(context,0,new Intent(context,PeriodicExtensionRefreshReceiver.class).setAction(ACTION_PERIODIC_ALARM),PendingIntent.FLAG_CANCEL_CURRENT);  am.cancel(pi);}  }
class C{  public void removeTransientData(){  if (!getAllowsTransientData()) {    return;  }  String[] keys=getKeys();  for (int i=0; i < keys.length; i++) {    Object o=super.get(keys[i]);    if (!(o instanceof Serializable)) {      remove(keys[i]);    }  }}  }
class C{  public ThisLiteral createThisLiteral(){  ThisLiteralImpl thisLiteral=new ThisLiteralImpl();  return thisLiteral;}  }
class C{  public static void removeEnvironmentListener(EnvLoaderListener listener){  ClassLoader loader=Thread.currentThread().getContextClassLoader();  removeEnvironmentListener(listener,loader);}  }
class C{  public static boolean filterMetric(String metricName,String pattern){  String regexPattern=pattern.replaceAll("\\*\\*","[a-z0-9\\.\\-]{0,}");  regexPattern=regexPattern.replaceAll("\\*","[a-z0-9\\-]{0,}");  Pattern p=Pattern.compile(regexPattern,Pattern.CASE_INSENSITIVE);  Matcher m=p.matcher(metricName);  return m.matches();}  }
class C{  public boolean isExported(){  String _exportedName=this.getExportedName();  return (_exportedName != null);}  }
class C{  public AtomicDoubleArray(double[] array){  this(array.length);  for (int i=0; i < array.length; i++)   set(i,array[i]);}  }
class C{  private Calendar initCalendarForFirstDayOfYear(){  Calendar cal=Calendar.getInstance();  cal.set(Calendar.DAY_OF_YEAR,1);  cal.set(Calendar.HOUR_OF_DAY,0);  cal.set(Calendar.MINUTE,0);  cal.set(Calendar.SECOND,0);  cal.set(Calendar.MILLISECOND,0);  return cal;}  }
class C{  public QuadEdgeTriangle(QuadEdge[] edge){  this.edge=(QuadEdge[])edge.clone();  for (int i=0; i < 3; i++) {    edge[i].setData(this);  }}  }
class C{  protected void changeToVarRef(QName varName,ExpressionOwner owner,Vector paths,ElemTemplateElement psuedoVarRecipient){  Variable varRef=(paths == m_absPaths) ? new VariableSafeAbsRef() : new Variable();  varRef.setQName(varName);  if (paths == m_absPaths) {    StylesheetRoot root=(StylesheetRoot)psuedoVarRecipient;    Vector globalVars=root.getVariablesAndParamsComposed();    varRef.setIndex(globalVars.size() - 1);    varRef.setIsGlobal(true);  }  owner.setExpression(varRef);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public ReplicatorException(String arg0,Throwable arg1){  super(arg0,arg1);  if (arg1 instanceof ReplicatorException) {    ReplicatorException exc=(ReplicatorException)arg1;    this.extraData=exc.extraData;    this.originalErrorMessage=exc.originalErrorMessage;  } else   this.originalErrorMessage=arg0;}  }
class C{  public ToStringBuilder append(final short[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.LITERAL_ANNOTATION_ARGUMENT;}  }
class C{  private void removeBookmarkTrackingIcons(){  if (trackingIcons != null) {    for (Iterator i=trackingIcons.iterator(); i.hasNext(); ) {      GutterIconImpl ti=(GutterIconImpl)i.next();      if (ti.getIcon() == bookmarkIcon) {        i.remove();      }    }  }}  }
class C{  public static Page read(PageBtreeIndex index,Data data,int pageId){  PageBtreeNode p=new PageBtreeNode(index,pageId,data);  p.read();  return p;}  }
class C{  public static boolean checkAndCreateFolder(String path){  boolean created=false;  try {    FileFactory.FileType fileType=FileFactory.getFileType(path);    if (FileFactory.isFileExist(path,fileType)) {      created=true;    } else {      created=FileFactory.mkdirs(path,fileType);    }  } catch (  IOException e) {    LOGGER.error(e.getMessage());  }  return created;}  }
class C{  protected RenameJavaElementDescriptor createRefactoringDescriptor(){  String project=null;  IJavaProject javaProject=fField.getJavaProject();  if (javaProject != null)   project=javaProject.getElementName();  int flags=JavaRefactoringDescriptor.JAR_MIGRATION | JavaRefactoringDescriptor.JAR_REFACTORING | RefactoringDescriptor.STRUCTURAL_CHANGE;  try {    if (!Flags.isPrivate(fField.getFlags()))     flags|=RefactoringDescriptor.MULTI_CHANGE;  } catch (  JavaModelException exception) {    JavaPlugin.log(exception);  }  final IType declaring=fField.getDeclaringType();  try {    if (declaring.isAnonymous() || declaring.isLocal())     flags|=JavaRefactoringDescriptor.JAR_SOURCE_ATTACHMENT;  } catch (  JavaModelException exception) {    JavaPlugin.log(exception);  }  final String description=Messages.format(RefactoringCoreMessages.RenameFieldRefactoring_descriptor_description_short,BasicElementLabels.getJavaElementName(fField.getElementName()));  final String header=Messages.format(RefactoringCoreMessages.RenameFieldProcessor_descriptor_description,new String[]{BasicElementLabels.getJavaElementName(fField.getElementName()),JavaElementLabels.getElementLabel(fField.getParent(),JavaElementLabels.ALL_FULLY_QUALIFIED),getNewElementName()});  final JDTRefactoringDescriptorComment comment=new JDTRefactoringDescriptorComment(project,this,header);  if (fRenameGetter)   comment.addSetting(RefactoringCoreMessages.RenameFieldRefactoring_setting_rename_getter);  if (fRenameSetter)   comment.addSetting(RefactoringCoreMessages.RenameFieldRefactoring_setting_rename_settter);  final RenameJavaElementDescriptor descriptor=RefactoringSignatureDescriptorFactory.createRenameJavaElementDescriptor(IJavaRefactorings.RENAME_FIELD);  descriptor.setProject(project);  descriptor.setDescription(description);  descriptor.setComment(comment.asString());  descriptor.setFlags(flags);  descriptor.setJavaElement(fField);  descriptor.setNewName(getNewElementName());  descriptor.setUpdateReferences(fUpdateReferences);  descriptor.setUpdateTextualOccurrences(fUpdateTextualMatches);  descriptor.setRenameGetters(fRenameGetter);  descriptor.setRenameSetters(fRenameSetter);  descriptor.setKeepOriginal(fDelegateUpdating);  descriptor.setDeprecateDelegate(fDelegateDeprecation);  return descriptor;}  }
class C{  public KMLCreate(String namespaceURI){  super(namespaceURI);}  }
class C{  public void addAll(long... values){  for (  long value : values) {    add(value);  }}  }
class C{  private AFTPClient actionRemoveDir() throws IOException, PageException {  required("directory",directory);  AFTPClient client=getClient();  if (recursive) {    removeRecursive(client,directory,FTPFile.DIRECTORY_TYPE);  } else   client.removeDirectory(directory);  writeCfftp(client);  return client;}  }
class C{  public void user_init() throws java.lang.Exception {  action_obj.scanner=scanner;  action_obj.classFile=classFile;}  }
class C{  public static <T1,T2,T3,R>Supplier<R> partial3(final T1 t1,final T2 t2,final T3 t3,final TriFunction<T1,T2,T3,R> triFunc){  return null;}  }
class C{  public static void addDiag(Matrix A,int start,int to,double c){  for (int i=start; i < to; i++)   A.increment(i,i,c);}  }
class C{  private static void addLockedSynchronizers(ThreadInfo info,StringBuilder sb){  if (VersionUtils.isJava16OrAbove()) {    try {      Method m=ThreadInfo.class.getMethod("getLockedSynchronizers");      Object o=m.invoke(info);      if (o != null) {        int length=Array.getLength(o);        if (length > 0) {          sb.append("\n\tNumber of locked synchronizers = " + length + "\n");          for (int i=0; i < length; i++)           sb.append("\t- " + Array.get(o,i) + "\n");        }      }    } catch (    Throwable t) {      LOG.info("Error retrieving locked synchronizers",t);    }  }}  }
class C{  public void init(boolean encrypting,CipherParameters params){  if (params instanceof KeyParameter) {    this.encrypting=encrypting;    this.wKey=makeWorkingKey(((KeyParameter)params).getKey());    return;  }  throw new IllegalArgumentException("invalid parameter passed to Serpent init - " + params.getClass().getName());}  }
class C{  public ValidatableSamlToken parseValidatableToken(Element tokenRoot) throws InvalidTokenException {  return new SamlTokenImpl(tokenRoot,_jaxbContext);}  }
class C{  @Override public String toString(){  return title;}  }
class C{  public void handleUploadTerminated(FileTransferHttpInfoDocument info){  if (mLogger.isActivated()) {    mLogger.debug("File upload terminated");  }synchronized (mLock) {    mFileUploadService.removeFileUpload(mUploadId);    setStateAndInfoThenBroadcast(mUploadId,FileUpload.State.TRANSFERRED,createFileUploadInfo(info));  }}  }
class C{  private boolean checkAccount(){  CharSequence username=mUsernameEdt.getText();  CharSequence email=mEmailEdt.getText();  if (TextUtils.isEmpty(username) || TextUtils.isEmpty(email)) {    Toast.makeText(getActivity(),R.string.esp_register_account_email_toast,Toast.LENGTH_LONG).show();    return false;  } else   if (!AccountUtil.isEmail(email.toString())) {    Toast.makeText(getActivity(),R.string.esp_register_account_email_format_error,Toast.LENGTH_LONG).show();    return false;  } else {    return true;  }}  }
class C{  public void close(){  super.close();  try {synchronized (this) {      if (raf != null && raf.getChannel().isOpen()) {        raf.close();      }    }  } catch (  IOException ex) {    throw new RuntimeException(ex);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void removeLayoutComponent(Component comp){  m_ComponentToConstraint.remove(comp);}  }
class C{  @Bean public static PropertySourcesPlaceholderConfigurer databasePropertySourcesPlaceholderConfigurer(){  Environment environment=ApplicationContextHolder.getApplicationContext().getEnvironment();  if (environment instanceof ConfigurableEnvironment) {    ConfigurableEnvironment configurableEnvironment=(ConfigurableEnvironment)environment;    ReloadablePropertySource reloadablePropertySource=new ReloadablePropertySource(ReloadablePropertySource.class.getName(),ConfigurationConverter.getProperties(getPropertyDatabaseConfiguration()),getPropertyDatabaseConfiguration());    configurableEnvironment.getPropertySources().addLast(reloadablePropertySource);  }  return new PropertySourcesPlaceholderConfigurer();}  }
class C{  protected Topic createTopic(String name){  return ActiveMQJMSClient.createTopic(name);}  }
class C{  public void abort(){  if (mRecordAccessControlPointCharacteristic == null)   return;  mAbort=true;  final BluetoothGattCharacteristic characteristic=mRecordAccessControlPointCharacteristic;  setOpCode(characteristic,OP_CODE_ABORT_OPERATION,OPERATOR_NULL);  writeCharacteristic(characteristic);}  }
class C{  public void error(Throwable throwable,String msg,Object arg0,Object arg1,Object arg2){  innerLog(Level.ERROR,throwable,msg,arg0,arg1,arg2,null);}  }
class C{  public void sort(){  Collections.sort(individuals,PERFORMANCE_COMPARATOR);}  }
class C{  public Heap(){}  }
class C{  public void addFooterView(View v,Object data,boolean isSelectable){  FixedViewInfo info=new FixedViewInfo();  info.view=v;  info.data=data;  info.isSelectable=isSelectable;  mFooterViewInfos.add(info);  if (mDataSetObserver != null) {    mDataSetObserver.onChanged();  }}  }
class C{  private void usage(){  if (command != null) {    System.err.println("keytool " + command + rb.getString(".OPTION."));    System.err.println();    System.err.println(rb.getString(command.description));    System.err.println();    System.err.println(rb.getString("Options."));    System.err.println();    String[] left=new String[command.options.length];    String[] right=new String[command.options.length];    boolean found=false;    int lenLeft=0;    for (int j=0; j < left.length; j++) {      Option opt=command.options[j];      left[j]=opt.toString();      if (opt.arg != null)       left[j]+=" " + opt.arg;      if (left[j].length() > lenLeft) {        lenLeft=left[j].length();      }      right[j]=rb.getString(opt.description);    }    for (int j=0; j < left.length; j++) {      System.err.printf(" %-" + lenLeft + "s  %s\n",left[j],right[j]);    }    System.err.println();    System.err.println(rb.getString("Use.keytool.help.for.all.available.commands"));  } else {    System.err.println(rb.getString("Key.and.Certificate.Management.Tool"));    System.err.println();    System.err.println(rb.getString("Commands."));    System.err.println();    for (    Command c : Command.values()) {      if (c == KEYCLONE)       break;      System.err.printf(" %-20s%s\n",c,rb.getString(c.description));    }    System.err.println();    System.err.println(rb.getString("Use.keytool.command.name.help.for.usage.of.command.name"));  }}  }
class C{  public final static HeaderElement parseHeaderElement(final String value,HeaderValueParser parser) throws ParseException {  if (value == null) {    throw new IllegalArgumentException("Value to parse may not be null");  }  if (parser == null)   parser=BasicHeaderValueParser.DEFAULT;  CharArrayBuffer buffer=new CharArrayBuffer(value.length());  buffer.append(value);  ParserCursor cursor=new ParserCursor(0,value.length());  return parser.parseHeaderElement(buffer,cursor);}  }
class C{  public static void main(String[] args){  long startTime=0;  String durationString=null;  try {    for (int i=0; i < args.length; i++) {      String arg=args[i];      if (arg.equals("-hours")) {        if (durationString != null) {          usage();        }        i++;        int hours=Integer.parseInt(args[i]);        durationString=hours + " hours";        testDuration=hours * 60 * 60* 1000;      } else       if (arg.equals("-seconds")) {        if (durationString != null) {          usage();        }        i++;        long seconds=Long.parseLong(args[i]);        durationString=seconds + " seconds";        testDuration=seconds * 1000;      } else       if (arg.equals("-maxLevel")) {        i++;        maxLevel=Integer.parseInt(args[i]);      } else {        usage();      }    }    if (durationString == null) {      durationString=testDuration + " milliseconds";    }  } catch (  Throwable t) {    usage();  }  AppleUserImpl user=null;  try {    user=new AppleUserImpl();  } catch (  RemoteException e) {  }synchronized (user) {    int port=-1;    try {      Registry registry=TestLibrary.createRegistryOnUnusedPort();      port=TestLibrary.getRegistryPort(registry);      Naming.rebind("rmi://localhost:" + port + "/AppleUser",user);    } catch (    RemoteException e) {    }catch (    java.net.MalformedURLException e) {    }    try {      Class app=Class.forName("ApplicationServer");      java.lang.reflect.Constructor appConstructor=app.getDeclaredConstructor(new Class[]{Integer.TYPE});      server=new Thread((Runnable)appConstructor.newInstance(port));    } catch (    ClassNotFoundException e) {      logger.log(Level.INFO,"Application server must be " + "started in separate process");    }catch (    Exception ie) {    }    try {      logger.log(Level.INFO,"Waiting for application server " + "process to start");      user.wait();    } catch (    InterruptedException ie) {    }  }  startTime=System.currentTimeMillis();  logger.log(Level.INFO,"Test starting");  try {    logger.log(Level.INFO,"Waiting " + durationString + " for "+ "test to complete or exception to be thrown");synchronized (AppleUserImpl.class) {      AppleUserImpl.class.wait();    }    if (status != null) {    } else {      logger.log(Level.INFO,"TEST PASSED");    }  } catch (  Exception e) {    logger.log(Level.INFO,"TEST FAILED");  } finally {    logger.log(Level.INFO,"Test finished");    long actualDuration=System.currentTimeMillis() - startTime;    logger.log(Level.INFO,"Test duration was " + (actualDuration / 1000) + " seconds "+ "("+ (actualDuration / 3600000)+ " hours)");  }}  }
class C{  public ClientConfig withMaxConcurrentTaskRequests(int maxConcurrentTaskRequests){  this.setMaxConcurrentTaskRequests(maxConcurrentTaskRequests);  return this;}  }
class C{  @Override public void onClick(View v){  hide();}  }
class C{  protected void assertResultRowCount(int expected,ResultSet rs) throws SQLException {  int i=0;  while (rs.next()) {    i++;  }  assertEquals(expected,i);}  }
class C{  protected ExtendedDismaxConfiguration createConfiguration(String qstr,SolrParams localParams,SolrParams params,SolrQueryRequest req){  return new ExtendedDismaxConfiguration(localParams,params,req);}  }
class C{  public void addRow(Object... row){  if (rows == null) {    throw new IllegalStateException("Cannot add a row when using RowSource");  }  rows.add(row);}  }
class C{  public static String generateNativeGuid(DbClient dbClient,StorageHADomain adapter){  StorageSystem device=dbClient.queryObject(StorageSystem.class,adapter.getStorageDeviceURI());  return String.format("%s+%s+" + ADAPTER + "+%s",_deviceTypeMap.get(device.getSystemType()),device.getSerialNumber(),adapter.getAdapterName());}  }
class C{  public IBk(){  init();}  }
class C{  protected void detach(){  wrappedConnection=null;  connManager=null;  duration=Long.MAX_VALUE;}  }
class C{  protected boolean filter(String name){  if (name == null)   return false;  String packageName=null;  int pos=name.lastIndexOf('.');  if (pos != -1)   packageName=name.substring(0,pos); else   return false;  for (int i=0; i < packageTriggers.length; i++) {    if (packageName.startsWith(packageTriggers[i]))     return true;  }  return false;}  }
class C{  public Master(InputStream in,Name origin){  this(in,origin,-1);}  }
class C{  public float distanceTo(AnimatableValue other){  return 0f;}  }
class C{  protected void searchPatterns(char[] word,int index,byte[] il){  byte[] values;  int i=index;  char p, q;  char sp=word[i];  p=root;  while (p > 0 && p < sc.length) {    if (sc[p] == 0xFFFF) {      if (hstrcmp(word,i,kv.getArray(),lo[p]) == 0) {        values=getValues(eq[p]);        int j=index;        for (int k=0; k < values.length; k++) {          if (j < il.length && values[k] > il[j]) {            il[j]=values[k];          }          j++;        }      }      return;    }    int d=sp - sc[p];    if (d == 0) {      if (sp == 0) {        break;      }      sp=word[++i];      p=eq[p];      q=p;      while (q > 0 && q < sc.length) {        if (sc[q] == 0xFFFF) {          break;        }        if (sc[q] == 0) {          values=getValues(eq[q]);          int j=index;          for (int k=0; k < values.length; k++) {            if (j < il.length && values[k] > il[j]) {              il[j]=values[k];            }            j++;          }          break;        } else {          q=lo[q];        }      }    } else {      p=d < 0 ? lo[p] : hi[p];    }  }}  }
class C{  default SetX<T> toSetX(){  return SetX.fromIterable(toList());}  }
class C{  public static <T>LazyIterable<T> reject(Iterable<T> iterable,Predicate<? super T> predicate){  return new RejectIterable<>(iterable,predicate);}  }
class C{  public void stopRecording(){  if (audioCaptureThread != null)   audioCaptureThread.end();}  }
class C{  private void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {  in.defaultReadObject();  cacheMin=new HashMap<Integer,Long>();  cacheMax=new HashMap<Integer,Long>();}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  buf.append("init = " + init + "("+ (init >> 10)+ "K) ");  buf.append("used = " + used + "("+ (used >> 10)+ "K) ");  buf.append("committed = " + committed + "("+ (committed >> 10)+ "K) ");  buf.append("max = " + max + "("+ (max >> 10)+ "K)");  return buf.toString();}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  EditRoomGroupForm editRoomGroupForm=(EditRoomGroupForm)form;  MessageResources rsc=getResources(request);  String doit=editRoomGroupForm.getDoit();  if (doit != null && doit.equals(rsc.getMessage("button.returnToRoomDetail"))) {    response.sendRedirect("roomDetail.do?id=" + editRoomGroupForm.getId());    return null;  }  if (doit != null && doit.equals(rsc.getMessage("button.update"))) {    doUpdate(editRoomGroupForm,request);    return mapping.findForward("showRoomDetail");  }  Long id=Long.valueOf(request.getParameter("id"));  LocationDAO ldao=new LocationDAO();  Location location=ldao.get(id);  if (location instanceof Room) {    Room r=(Room)location;    editRoomGroupForm.setName(r.getLabel());  } else   if (location instanceof NonUniversityLocation) {    NonUniversityLocation nonUnivLocation=(NonUniversityLocation)location;    editRoomGroupForm.setName(nonUnivLocation.getName());  } else {    ActionMessages errors=new ActionMessages();    errors.add("editRoomGroup",new ActionMessage("errors.lookup.notFound","Room Group"));    saveErrors(request,errors);  }  sessionContext.checkPermission(location,Right.RoomEditGroups);  boolean editGlobalGroups=sessionContext.hasPermission(location,Right.RoomEditGlobalGroups);  for (  RoomGroup rg : RoomGroup.getAllGlobalRoomGroups(location.getSession())) {    editRoomGroupForm.addToGlobalRoomGroups(rg,editGlobalGroups,location.hasGroup(rg));  }  Set<Department> departments=Department.getUserDepartments(sessionContext.getUser());  for (  Department department : departments) {    for (    RoomGroup rg : RoomGroup.getAllDepartmentRoomGroups(department)) {      editRoomGroupForm.addToMangaerRoomGroups(rg,true,location.hasGroup(rg));    }  }  for (  Department department : Department.findAllExternal(location.getSession().getUniqueId())) {    if (departments.contains(department))     continue;    for (    RoomGroup rg : RoomGroup.getAllDepartmentRoomGroups(department)) {      editRoomGroupForm.addToMangaerRoomGroups(rg,false,location.hasGroup(rg));    }  }  return mapping.findForward("showEditRoomGroup");}  }
class C{  public static SortClause create(String item,String order){  return new SortClause(item,ORDER.valueOf(order));}  }
class C{  final boolean isShared(){  return nextWaiter == SHARED;}  }
class C{  public CompositeTestType clone(){  CompositeTestType result=new CompositeTestType();  result.Field1=Field1 == null ? null : Field1.clone();  result.Field2=Field2 == null ? null : Field2.clone();  return result;}  }
class C{  public <T>ResponseEntity<T> createResponse(ResponseEntity<T> result){  ResponseEntity<T> response=createResponse(result.getBody(),result.getStatusCode());  return response;}  }
class C{  public static String randomRegexpishString(Random r){  return randomRegexpishString(r,20);}  }
class C{  protected void dataToXML(){  Element root;  Element node;  Element child;  int i;  root=m_Document.getDocumentElement();  node=m_Document.createElement(TAG_BODY);  root.appendChild(node);  child=m_Document.createElement(TAG_INSTANCES);  node.appendChild(child);  for (i=0; i < m_Instances.numInstances(); i++) {    addInstance(child,m_Instances.instance(i));  }}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.TRANSITION_REACTION;}  }
class C{  protected void respondWithBadArguments(HttpServletResponse resp) throws IOException {  respondWithError(resp,HttpStatus.BAD_REQUEST_400,"Required parameters not supplied");}  }
class C{  public APISharingProfile(){}  }
class C{  public void mousePressed(MouseEvent e){  mouseSupport.fireMapMousePressed(e);  e.getComponent().requestFocus();  if (mouseSupport.proxy == null) {    if (SwingUtilities.isRightMouseButton(e)) {      MapBean mb=theMap;      if (mb == null && e.getSource() instanceof MapBean) {        mb=(MapBean)e.getSource();      }      if (mb != null) {        rPoint1=mb.getCoordinates(e);        rPoint2=null;      }    }  }}  }
class C{  public void addSite(String site){  if (siteModel.getIndexOf(site) < 0) {    siteModel.addElement(site);    if (currentSite == null) {      siteModel.setSelectedItem(site);    }  }}  }
class C{  public CronExpression(String cronExpression) throws ParseException {  if (cronExpression == null) {    throw new IllegalArgumentException("cronExpression cannot be null");  }  this.cronExpression=cronExpression.toUpperCase(Locale.US);  buildExpression(this.cronExpression);}  }
class C{  public void testIncompleteResponse() throws IOException {  String reqdata="Request Data";  Request request=Request.newBuilder().setStrData(reqdata).build();  Response response=Response.newBuilder().setIntData(5).buildPartial();  FakeSocket socket=new FakeSocket(false).withResponseProto(response);  SocketRpcChannel rpcChannel=new SocketRpcChannel("host",-1,new FakeSocketFactory().returnsSocket(socket));  callAsync(rpcChannel,request,ErrorReason.BAD_RESPONSE_PROTO);  verifyRequestToSocket(request,socket);  assertNull(callSync(rpcChannel,request,ErrorReason.BAD_RESPONSE_PROTO));  verifyRequestToSocket(request,socket);}  }
class C{  public AcelaTurnout(String systemName,AcelaSystemConnectionMemo memo){  super(systemName);  _memo=memo;  initializeTurnout(systemName);}  }
class C{  public void appendName(Name name){  appendBytes(name.getByteArray(),name.getByteOffset(),name.getByteLength());}  }
class C{  private TransactionManagerImpl(){  cleaner=this.new TransactionTimeOutThread();  ThreadGroup group=LoggingThreadGroup.createThreadGroup(LocalizedStrings.TransactionManagerImpl_CLEAN_UP_THREADS.toLocalizedString());  cleanUpThread=new Thread(group,cleaner,"GlobalTXTimeoutMonitor");  cleanUpThread.setDaemon(true);  cleanUpThread.start();}  }
class C{  public static AnnotatedTypeMirror glbAll(final Map<AnnotatedTypeMirror,Set<AnnotationMirror>> typeMirrors,final AnnotatedTypeFactory typeFactory){  final QualifierHierarchy qualifierHierarchy=typeFactory.getQualifierHierarchy();  if (typeMirrors.isEmpty()) {    return null;  }  Map<AnnotationMirror,AnnotationMirror> glbPrimaries=AnnotationUtils.createAnnotationMap();  for (  Entry<AnnotatedTypeMirror,Set<AnnotationMirror>> tmEntry : typeMirrors.entrySet()) {    final Set<AnnotationMirror> typeAnnoHierarchies=tmEntry.getValue();    final AnnotatedTypeMirror type=tmEntry.getKey();    for (    AnnotationMirror top : typeAnnoHierarchies) {      final AnnotationMirror typeAnno=type.getEffectiveAnnotationInHierarchy(top);      final AnnotationMirror currentAnno=glbPrimaries.get(top);      if (typeAnno != null && currentAnno != null) {        glbPrimaries.put(top,qualifierHierarchy.greatestLowerBound(currentAnno,typeAnno));      } else       if (typeAnno != null) {        glbPrimaries.put(top,typeAnno);      }    }  }  final List<AnnotatedTypeMirror> glbTypes=new ArrayList<>();  final Set<AnnotationMirror> values=new HashSet<>(glbPrimaries.values());  for (  AnnotatedTypeMirror type : typeMirrors.keySet()) {    if (type.getKind() != TypeKind.TYPEVAR || !qualifierHierarchy.isSubtype(type.getEffectiveAnnotations(),values)) {      final AnnotatedTypeMirror copy=type.deepCopy();      copy.replaceAnnotations(values);      glbTypes.add(copy);    } else {      glbTypes.add(type);    }  }  final TypeHierarchy typeHierarchy=typeFactory.getTypeHierarchy();  sortForGlb(glbTypes,typeFactory);  AnnotatedTypeMirror glbType=glbTypes.get(0);  int index=1;  while (index < glbTypes.size()) {    if (glbType.getKind() != TypeKind.NULL) {      glbType=glbTypes.get(index);    }    index+=1;  }  boolean incomparable=false;  for (  final AnnotatedTypeMirror type : glbTypes) {    if (!incomparable && type.getKind() != TypeKind.NULL && (!TypesUtils.isErasedSubtype(typeFactory.getContext().getTypeUtils(),glbType.getUnderlyingType(),type.getUnderlyingType()) || !typeHierarchy.isSubtype(glbType,type))) {      incomparable=true;    }  }  if (incomparable) {    return createBottom(typeFactory,glbType.getEffectiveAnnotations());  }  return glbType;}  }
class C{  public UName parseUName(String qname) throws SAXException {  int idx=qname.indexOf(':');  if (idx < 0) {    String uri=resolveNamespacePrefix("");    if (uri.equals("") && chameleonMode)     uri=currentSchema.getTargetNamespace();    return new UName(uri,qname,qname);  } else {    String prefix=qname.substring(0,idx);    String uri=currentContext.resolveNamespacePrefix(prefix);    if (uri == null) {      reportError(Messages.format(Messages.ERR_UNDEFINED_PREFIX,prefix));      uri="undefined";    }    return new UName(uri,qname.substring(idx + 1),qname);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributens05.class,args);}  }
class C{  private String readLine(){  StringBuffer sb=new StringBuffer();  while (buf.remaining() > 0) {    char c=(char)buf.get();    if (c == '\r') {      if (buf.remaining() > 0) {        char n=(char)buf.get(buf.position());        if (n == '\n') {          buf.get();        }      }      break;    } else     if (c == '\n') {      break;    }    sb.append(c);  }  return sb.toString();}  }
class C{  private static IPoint locate(char[][] img){  for (int i=0; i < img.length; i++) {    for (int j=0; j < img[0].length; j++) {      if (img[i][j] == ON) {        return new TwoDPoint(i,j);      }    }  }  return null;}  }
class C{  private void initClassLoader(JspCompilationContext clctxt) throws IOException {  classPath=getClassPath();  ClassLoader jspcLoader=getClass().getClassLoader();  ArrayList<URL> urls=new ArrayList<URL>();  StringTokenizer tokenizer=new StringTokenizer(classPath,File.pathSeparator);  while (tokenizer.hasMoreTokens()) {    String path=tokenizer.nextToken();    try {      File libFile=new File(path);      urls.add(libFile.toURL());    } catch (    IOException ioe) {      throw new RuntimeException(ioe.toString());    }  }  File webappBase=new File(uriRoot);  if (webappBase.exists()) {    File classes=new File(webappBase,"/WEB-INF/classes");    try {      if (classes.exists()) {        classPath=classPath + File.pathSeparator + classes.getCanonicalPath();        urls.add(classes.getCanonicalFile().toURL());      }    } catch (    IOException ioe) {      throw new RuntimeException(ioe.toString());    }    File lib=new File(webappBase,"/WEB-INF/lib");    if (lib.exists() && lib.isDirectory()) {      String[] libs=lib.list();      for (int i=0; i < libs.length; i++) {        if (libs[i].length() < 5)         continue;        String ext=libs[i].substring(libs[i].length() - 4);        if (!".jar".equalsIgnoreCase(ext)) {          if (".tld".equalsIgnoreCase(ext)) {            log.warning("TLD files should not be placed in /WEB-INF/lib");          }          continue;        }        try {          File libFile=new File(lib,libs[i]);          classPath=classPath + File.pathSeparator + libFile.getCanonicalPath();          urls.add(libFile.getCanonicalFile().toURL());        } catch (        IOException ioe) {          throw new RuntimeException(ioe.toString());        }      }    }  }  urls.add(new File(clctxt.getRealPath("/")).getCanonicalFile().toURL());  URL urlsA[]=new URL[urls.size()];  urls.toArray(urlsA);  ClassLoader sysClassLoader=initSystemClassLoader();  if (sysClassLoader != null) {    loader=new URLClassLoader(urlsA,sysClassLoader);  } else {    loader=new URLClassLoader(urlsA,this.getClass().getClassLoader());  }}  }
class C{  public static SootClass narrowerClass(SootClass c1,SootClass c2){  Hierarchy hier=Scene.v().getActiveHierarchy();  if (c1.isInterface() && c2.isInterface()) {    logger.error("Cannot find a narrower concrete class for {} and {}",c1,c2);    droidsafe.main.Main.exit(1);  }  if (c1.isInterface())   return c2;  if (c2.isInterface())   return c1;  if (!hier.isClassSuperclassOfIncluding(c1,c2) && !hier.isClassSuperclassOf(c2,c1)) {    return null;  }  if (hier.isClassSuperclassOfIncluding(c1,c2)) {    return c2;  } else {    return c1;  }}  }
class C{  private NamespaceEntity createNamespaceEntity(NamespaceCreateRequest request){  NamespaceEntity namespaceEntity=new NamespaceEntity();  namespaceEntity.setCode(request.getNamespaceCode());  return namespaceEntity;}  }
class C{  public byte[] readBytes(int count) throws IOException {  byte[] b=new byte[count];  readFully(b);  return b;}  }
class C{  public void mouseEntered(MouseEvent e){  handler.mouseEntered(e);}  }
class C{  private static void init(final Cache cache) throws NotAuthorizedException {  final LogWriter systemLogWriter=cache.getLogger();  final String xmlDocumentUri=(String)cache.getDistributedSystem().getSecurityProperties().get(DOC_URI_PROP_NAME);  try {    if (xmlDocumentUri == null) {      throw new NotAuthorizedException("No ACL file defined using tag [" + DOC_URI_PROP_NAME + "] in system properties");    }    if (xmlDocumentUri.equals(XmlAuthorization.currentDocUri)) {      if (XmlAuthorization.xmlLoadFailure != null) {        throw XmlAuthorization.xmlLoadFailure;      }      return;    }    final DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    factory.setIgnoringComments(true);    factory.setIgnoringElementContentWhitespace(true);    factory.setValidating(true);    final DocumentBuilder builder=factory.newDocumentBuilder();    final XmlErrorHandler errorHandler=new XmlErrorHandler(systemLogWriter,xmlDocumentUri);    builder.setErrorHandler(errorHandler);    builder.setEntityResolver(new AuthzDtdResolver());    final Document xmlDocument=builder.parse(xmlDocumentUri);    XmlAuthorization.userRoles=new HashMap<String,HashSet<String>>();    XmlAuthorization.rolePermissions=new HashMap<String,Map<String,Map<OperationCode,FunctionSecurityPrmsHolder>>>();    final NodeList roleUserNodes=xmlDocument.getElementsByTagName(TAG_ROLE);    for (int roleIndex=0; roleIndex < roleUserNodes.getLength(); roleIndex++) {      final Node roleUserNode=roleUserNodes.item(roleIndex);      final String roleName=getAttributeValue(roleUserNode,ATTR_ROLENAME);      final NodeList userNodes=roleUserNode.getChildNodes();      for (int userIndex=0; userIndex < userNodes.getLength(); userIndex++) {        final Node userNode=userNodes.item(userIndex);        if (TAG_USER.equals(userNode.getNodeName())) {          final String userName=getNodeValue(userNode);          HashSet<String> userRoleSet=XmlAuthorization.userRoles.get(userName);          if (userRoleSet == null) {            userRoleSet=new HashSet<String>();            XmlAuthorization.userRoles.put(userName,userRoleSet);          }          userRoleSet.add(roleName);        } else {          throw new SAXParseException("Unknown tag [" + userNode.getNodeName() + "] as child of tag ["+ TAG_ROLE+ ']',null);        }      }    }    final NodeList rolePermissionNodes=xmlDocument.getElementsByTagName(TAG_PERMS);    for (int permIndex=0; permIndex < rolePermissionNodes.getLength(); permIndex++) {      final Node rolePermissionNode=rolePermissionNodes.item(permIndex);      final String roleName=getAttributeValue(rolePermissionNode,ATTR_ROLE);      Map<String,Map<OperationCode,FunctionSecurityPrmsHolder>> regionOperationMap=XmlAuthorization.rolePermissions.get(roleName);      if (regionOperationMap == null) {        regionOperationMap=new HashMap<String,Map<OperationCode,FunctionSecurityPrmsHolder>>();        XmlAuthorization.rolePermissions.put(roleName,regionOperationMap);      }      final NodeList operationNodes=rolePermissionNode.getChildNodes();      final HashMap<OperationCode,FunctionSecurityPrmsHolder> operationMap=new HashMap<OperationCode,FunctionSecurityPrmsHolder>();      for (int opIndex=0; opIndex < operationNodes.getLength(); opIndex++) {        final Node operationNode=operationNodes.item(opIndex);        if (TAG_OP.equals(operationNode.getNodeName())) {          final String operationName=getNodeValue(operationNode);          final OperationCode code=OperationCode.valueOf(operationName);          if (code == null) {            throw new SAXParseException("Unknown operation [" + operationName + ']',null);          }          if (code != OperationCode.EXECUTE_FUNCTION) {            operationMap.put(code,null);          } else {            final String optimizeForWrite=getAttributeValue(operationNode,ATTR_FUNCTION_OPTIMIZE_FOR_WRITE);            final String functionAttr=getAttributeValue(operationNode,ATTR_FUNCTION_IDS);            final String keysAttr=getAttributeValue(operationNode,ATTR_FUNCTION_KEY_SET);            Boolean isOptimizeForWrite;            HashSet<String> functionIds;            HashSet<String> keySet;            if (optimizeForWrite == null || optimizeForWrite.length() == 0) {              isOptimizeForWrite=null;            } else {              isOptimizeForWrite=Boolean.parseBoolean(optimizeForWrite);            }            if (functionAttr == null || functionAttr.length() == 0) {              functionIds=null;            } else {              final String[] functionArray=functionAttr.split(",");              functionIds=new HashSet<String>();              for (int strIndex=0; strIndex < functionArray.length; ++strIndex) {                functionIds.add((functionArray[strIndex]));              }            }            if (keysAttr == null || keysAttr.length() == 0) {              keySet=null;            } else {              final String[] keySetArray=keysAttr.split(",");              keySet=new HashSet<String>();              for (int strIndex=0; strIndex < keySetArray.length; ++strIndex) {                keySet.add((keySetArray[strIndex]));              }            }            final FunctionSecurityPrmsHolder functionContext=new FunctionSecurityPrmsHolder(isOptimizeForWrite,functionIds,keySet);            operationMap.put(code,functionContext);          }        } else {          throw new SAXParseException("Unknown tag [" + operationNode.getNodeName() + "] as child of tag ["+ TAG_PERMS+ ']',null);        }      }      final String regionNames=getAttributeValue(rolePermissionNode,ATTR_REGIONS);      if (regionNames == null || regionNames.length() == 0) {        regionOperationMap.put(EMPTY_VALUE,operationMap);      } else {        final String[] regionNamesSplit=regionNames.split(",");        for (int strIndex=0; strIndex < regionNamesSplit.length; ++strIndex) {          regionOperationMap.put(normalizeRegionName(regionNamesSplit[strIndex]),operationMap);        }      }    }    XmlAuthorization.currentDocUri=xmlDocumentUri;  } catch (  Exception ex) {    String message;    if (ex instanceof NotAuthorizedException) {      message=ex.getMessage();    } else {      message=ex.getClass().getName() + ": " + ex.getMessage();    }    systemLogWriter.warning("XmlAuthorization.init: " + message);    XmlAuthorization.xmlLoadFailure=new NotAuthorizedException(message,ex);    throw XmlAuthorization.xmlLoadFailure;  }}  }
class C{  public boolean isNullable(){  return _isNullable;}  }
class C{  @Override public void sendUrgentData(int data) throws IOException {  throw new SocketException("Method sendUrgentData() is not supported.");}  }
class C{  @Override public EObject create(EClass eClass){switch (eClass.getClassifierID()) {case EipPackage.CHANNEL:    return createChannel();case EipPackage.ADAPTER:  return createAdapter();case EipPackage.ROUTER:return createRouter();case EipPackage.FILTER:return createFilter();case EipPackage.TRANSFORMER:return createTransformer();case EipPackage.GATEWAY:return createGateway();case EipPackage.CONDITIONAL_ROUTE:return createConditionalRoute();case EipPackage.SPLITTER:return createSplitter();case EipPackage.AGGREGATOR:return createAggregator();case EipPackage.ROUTE:return createRoute();case EipPackage.SERVICE_ACTIVATOR:return createServiceActivator();case EipPackage.EIP_MODEL:return createEIPModel();case EipPackage.ENRICHER:return createEnricher();case EipPackage.COMPOSITE_PROCESSOR:return createCompositeProcessor();case EipPackage.RECIPIENT_LIST_ROUTER:return createRecipientListRouter();case EipPackage.SERVICE_REF:return createServiceRef();case EipPackage.SERVICE_INVOCATION:return createServiceInvocation();case EipPackage.INVOCABLE_ENDPOINT:return createInvocableEndpoint();case EipPackage.CONTENT_FILTER:return createContentFilter();case EipPackage.RESEQUENCER:return createResequencer();case EipPackage.METADATA:return createMetadata();default :throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.644 -0500",hash_original_method="CC42CBF49D5975143777F4A2B14A482C",hash_generated_method="A63B3964BB51A31D78901103FC617267") public String debugDump(int indentation){  stringRepresentation="";  String indent=new Indentation(indentation).getIndentation();  String className=this.getClass().getName();  sprint(indent + className);  sprint(indent + "{");  for (Iterator<HDR> it=hlist.iterator(); it.hasNext(); ) {    HDR sipHeader=(HDR)it.next();    sprint(indent + sipHeader.debugDump());  }  sprint(indent + "}");  return stringRepresentation;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static EventTypeMetadata createNonPojoApplicationType(ApplicationType providedType,String name,boolean preconfiguredStatic,boolean preconfigured,boolean configured,boolean namedWindow,boolean insertInto){  TypeClass typeClass;  ApplicationType applicationType=null;  if (configured) {    typeClass=TypeClass.APPLICATION;    applicationType=providedType;  } else   if (namedWindow) {    typeClass=TypeClass.NAMED_WINDOW;  } else   if (insertInto) {    typeClass=TypeClass.STREAM;  } else {    typeClass=TypeClass.ANONYMOUS;  }  return new EventTypeMetadata(name,null,typeClass,preconfiguredStatic,preconfigured,configured,applicationType,false);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case MappingPackage.INFO_MODEL_PROPERTY_SOURCE__PROPERTY:    return property != null;}return super.eIsSet(featureID);}  }
class C{  @Override public void call(String method,Object[] args) throws IOException {  writeVersion();  int length=args != null ? args.length : 0;  startCall(method,length);  for (int i=0; i < length; i++) {    writeObject(args[i]);  }  completeCall();  flush();}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public static RecordEventForSubscription parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  RecordEventForSubscription object=new RecordEventForSubscription();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"recordEventForSubscription".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (RecordEventForSubscription)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","subscriptionKey").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setSubscriptionKey(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));      reader.next();    } else {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","event").equals(reader.getName())) {      object.setEvent(VoGatheredEvent.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public T caseSequence(Sequence object){  return null;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int extraFilterArgs=curNumberOfParameters - 5;  final java.util.ArrayList extraArgs=new java.util.ArrayList();  while (extraFilterArgs-- > 0)   extraArgs.add(stack.pop());  boolean invertRes=false;  boolean completeMatch=evalBool(stack.pop());  invertRes=!evalBool(stack.pop());  java.util.regex.Pattern regpat=getRegex(stack);  String filterMethName=getString(stack);  Object dataObj=stack.pop();  if (dataObj == null)   return null;  java.util.ArrayList filtMeths=new java.util.ArrayList();  java.util.StringTokenizer toker=new java.util.StringTokenizer(filterMethName," |");  while (toker.hasMoreTokens()) {    filtMeths.add(Catbert.getAPI().get(toker.nextToken()));  }  if (dataObj instanceof java.util.Collection || dataObj instanceof java.util.Map) {    java.util.Collection currData;    if (dataObj instanceof java.util.Collection)     currData=(java.util.Collection)dataObj; else     currData=((java.util.Map)dataObj).keySet();    java.util.Iterator walker=currData.iterator();    while (walker.hasNext()) {      Object currObj=walker.next();      boolean dontRemove=false;      for (int j=0; j < filtMeths.size(); j++) {        sage.jep.function.PostfixMathCommandI filtMeth=(sage.jep.function.PostfixMathCommandI)filtMeths.get(j);        stack.push(currObj);        for (int i=extraArgs.size() - 1; i >= 0; i--)         stack.push(extraArgs.get(i));        filtMeth.setCurNumberOfParameters(1 + extraArgs.size());        filtMeth.run(stack);        Object testRes=stack.pop();        boolean didPass=testRes != null && ((completeMatch && regpat.matcher(testRes.toString()).matches()) || (!completeMatch && regpat.matcher(testRes.toString()).find()));        if (didPass != invertRes) {          dontRemove=true;          break;        }      }      if (!dontRemove)       walker.remove();    }    return dataObj;  } else {    Object[] currData=(Object[])dataObj;    Class filterClass=currData.getClass().getComponentType();    java.util.ArrayList passedData=new java.util.ArrayList();    for (int i=0; i < currData.length; i++) {      for (int j=0; j < filtMeths.size(); j++) {        sage.jep.function.PostfixMathCommandI filtMeth=(sage.jep.function.PostfixMathCommandI)filtMeths.get(j);        stack.push(currData[i]);        for (int k=extraArgs.size() - 1; k >= 0; k--)         stack.push(extraArgs.get(k));        filtMeth.setCurNumberOfParameters(1 + extraArgs.size());        filtMeth.run(stack);        Object testRes=stack.pop();        boolean didPass=testRes != null && ((completeMatch && regpat.matcher(testRes.toString()).matches()) || (!completeMatch && regpat.matcher(testRes.toString()).find()));        if (didPass != invertRes) {          passedData.add(currData[i]);          break;        }      }    }    return passedData.toArray((Object[])java.lang.reflect.Array.newInstance(filterClass,passedData.size()));  }}  }
class C{  public PeerUdpMessageEvent(StunStack stunStack,RawMessage udpMessage){  super(udpMessage.getRemoteAddress());  this.stunStack=stunStack;  this.udpMessage=udpMessage;}  }
class C{  public NetworkRestRep deregister(URI id){  return client.post(NetworkRestRep.class,getIdUrl() + "/deregister",id);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.724 -0400",hash_original_method="2E483D5B654BC30D2C26E569C2C13C4B",hash_generated_method="5F1D76CFBAF199BD5A21BCDD569EC76B") public FileWriterWithEncoding(File file,String encoding) throws IOException {  this(file,encoding,false);}  }
class C{  public void testCase10(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,1,2,3,4,5};  int aSign=-1;  byte rBytes[]={-2,-3,-4,-5,-6,-7,-8,-2,-3,-4,-2,-3,-4,-5,-5};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=BigInteger.ONE;  BigInteger result=aNumber.multiply(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public boolean equals(Object o2){  return o2 != null && (o2 instanceof ColorBackgroundPainterStrategy) && this.color.equals(((ColorBackgroundPainterStrategy)o2).getColor());}  }
class C{  public void addAstore(int n){  if (n < 4)   addOpcode(75 + n); else   if (n < 0x100) {    addOpcode(ASTORE);    add(n);  } else {    addOpcode(WIDE);    addOpcode(ASTORE);    addIndex(n);  }}  }
class C{  public Binomial(int n,double p,MersenneTwisterFast randomGenerator){  setRandomGenerator(randomGenerator);  setNandP(n,p);}  }
class C{  public String click(){  append("Link clicked for account " + accountId.getValue());  clear();  return (null);}  }
class C{  public boolean isRecursive(){  return recursive;}  }
class C{  private static boolean isValidType(String type){  String[] types={LOCATION_KEY,PRINTER_3D_KEY,POOL_KEY,FOOD_KEY,TOILET_KEY,TEST_KEY};  return (Arrays.asList(types).contains(type));}  }
class C{  public static void saveHq(Bitmap src,String fileName) throws ImageSaveException {  saveJpeg(src,fileName,JPEG_QUALITY_HQ);}  }
class C{  @Override public boolean hasNext(){  if (allRowsResult.size() == 0) {    return false;  }  totalRecordCounter++;  listRecordCounter++;  if (listRecordCounter == 0 || (listRecordCounter >= currentRowPointer.size() && currentListCounter < allRowsResult.size())) {    listRecordCounter=0;    currentRowPointer=allRowsResult.get(currentListCounter);    currentListCounter++;  }  return totalRecordCounter < totalNumberOfRecords;}  }
class C{  private void createSelectionPanel(boolean order,boolean invoice,boolean project){  Caption caption=new Caption(Msg.translate(Env.getCtx(),"Selection"));  grpSelectionPanel.appendChild(caption);  grpSelectionPanel.appendChild(selectionPanel);  productField.setRows(1);  productField.setMold("select");  KeyNamePair[] keyNamePair=getProducts();  for (int i=0; i < keyNamePair.length; i++) {    productField.addItem(keyNamePair[i]);  }  Rows rows=selectionPanel.newRows();  Row boxProductQty=rows.newRow();  Label lblProduct=new Label(Msg.translate(Env.getCtx(),"M_Product_ID"));  Label lblQty=new Label(Msg.translate(Env.getCtx(),"Qty"));  productQty.setValue(new BigDecimal(1));  productField.addEventListener(Events.ON_SELECT,this);  productQty.addEventListener(Events.ON_CHANGE,this);  productField.setWidth("99%");  boxProductQty.appendChild(lblProduct.rightAlign());  boxProductQty.appendChild(productField);  boxProductQty.appendChild(lblQty.rightAlign());  boxProductQty.appendChild(productQty);  if (order) {    keyNamePair=getOrders();    orderField.setRows(1);    orderField.setMold("select");    orderField.setWidth("99%");    for (int i=0; i < keyNamePair.length; i++) {      orderField.addItem(keyNamePair[i]);    }    Label lblOrder=new Label(Msg.translate(Env.getCtx(),"C_Order_ID"));    Row boxOrder=rows.newRow();    orderField.addEventListener(Events.ON_CLICK,this);    boxOrder.appendChild(lblOrder.rightAlign());    boxOrder.appendChild(orderField);    boxOrder.appendChild(new Space());    boxOrder.appendChild(new Space());  }  if (invoice) {    invoiceField.setRows(1);    invoiceField.setMold("select");    invoiceField.setWidth("99%");    keyNamePair=getInvoices();    for (int i=0; i < keyNamePair.length; i++) {      invoiceField.addItem(keyNamePair[i]);    }    Label lblInvoice=new Label(Msg.translate(Env.getCtx(),"C_Invoice_ID"));    Row boxInvoices=rows.newRow();    invoiceField.addEventListener(Events.ON_SELECT,this);    boxInvoices.appendChild(lblInvoice.rightAlign());    boxInvoices.appendChild(invoiceField);    boxInvoices.appendChild(new Space());    boxInvoices.appendChild(new Space());  }  if (project) {    projectField.setRows(1);    projectField.setMold("select");    projectField.setWidth("99%");    keyNamePair=getProjects();    for (int i=0; i < keyNamePair.length; i++) {      projectField.addItem(keyNamePair[i]);    }    Label lblProject=new Label(Msg.translate(Env.getCtx(),"C_Project_ID"));    Row boxProject=rows.newRow();    projectField.addEventListener(Events.ON_SELECT,this);    boxProject.appendChild(lblProject.rightAlign());    boxProject.appendChild(projectField);    boxProject.appendChild(new Space());    boxProject.appendChild(new Space());  }  confirmPanel.setEnabled("Ok",false);}  }
class C{  public String globalInfo(){  return "Cluster data generator designed for the BIRCH System\n\n" + "Dataset is generated with instances in K clusters.\n" + "Instances are 2-d data points.\n"+ "Each cluster is characterized by the number of data points in it"+ "its radius and its center. The location of the cluster centers is"+ "determined by the pattern parameter. Three patterns are currently"+ "supported grid, sine and random.\n\n"+ "For more information refer to:\n\n"+ getTechnicalInformation().toString();}  }
class C{  static boolean isOSVersionMatch(final String osVersion,final String osVersionPrefix){  if (StringUtils.isEmpty(osVersion)) {    return false;  }  String[] versionPrefixParts=osVersionPrefix.split("\\.");  String[] versionParts=osVersion.split("\\.");  for (int i=0; i < Math.min(versionPrefixParts.length,versionParts.length); i++) {    if (!versionPrefixParts[i].equals(versionParts[i])) {      return false;    }  }  return true;}  }
class C{  public void alignTop(ArrayList<Integer> nodes){  if (m_bNeedsUndoAction) {    addUndoAction(new alignTopAction(nodes));  }  int nMinY=-1;  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nY=getPositionY(nodes.get(iNode));    if (nY < nMinY || iNode == 0) {      nMinY=nY;    }  }  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nNode=nodes.get(iNode);    m_nPositionY.set(nNode,nMinY);  }}  }
class C{  protected final LifetimeType createLifetimeElement(long tokenLifetime){  assert tokenLifetime > 0 : tokenLifetime;  ObjectFactory wstFactory=new ObjectFactory();  LifetimeType lifetime=wstFactory.createLifetimeType();  org.oasis_open.docs.wss._2004._01.oasis_200401_wss_wssecurity_utility_1_0.ObjectFactory wssuObjFactory=new org.oasis_open.docs.wss._2004._01.oasis_200401_wss_wssecurity_utility_1_0.ObjectFactory();  AttributedDateTime created=wssuObjFactory.createAttributedDateTime();  DateFormat wssDateFormat=createDateFormatter();  final long now=System.currentTimeMillis();  String startDate=wssDateFormat.format(new Date(now));  created.setValue(startDate);  AttributedDateTime expires=wssuObjFactory.createAttributedDateTime();  String endDate=wssDateFormat.format(new Date(now + TimeUnit.SECONDS.toMillis(tokenLifetime)));  expires.setValue(endDate);  lifetime.setCreated(created);  lifetime.setExpires(expires);  if (log.isDebugEnabled()) {    log.debug("Lifitime created with following values -- Create date: " + startDate + " Expire date: "+ endDate);  }  return lifetime;}  }
class C{  public void refresh(){  Check.notNull(workspace,"workspace");  final Conflict[] allConflicts=workspace.queryConflicts(null);  for (  final Conflict conflict : allConflicts) {    addConflict(conflict);  }}  }
class C{  public static void closeQuietly(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    IOException e) {    }  }}  }
class C{  public float kern(char a,char b){  return 0;}  }
class C{  public Boolean isFixed(){  return fixed;}  }
class C{  final public void Method() throws ParseException {  ASTMethod jjtn000=new ASTMethod(this,JJTMETHOD);  boolean jjtc000=true;  jjtree.openNodeScope(jjtn000);  try {    Identifier();    jj_consume_token(LPAREN);switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case LBRACKET:case WHITESPACE:case STRING_LITERAL:case TRUE:case FALSE:case NUMBER_LITERAL:case IDENTIFIER:case LCURLY:      Parameter();    label_6:     while (true) {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case COMMA:        ;      break;default :    jj_la1[22]=jj_gen;  break label_6;}jj_consume_token(COMMA);Parameter();}break;default :jj_la1[23]=jj_gen;;}jj_consume_token(REFMOD2_RPAREN);} catch (Throwable jjte000) {if (jjtc000) {jjtree.clearNodeScope(jjtn000);jjtc000=false;} else {jjtree.popNode();}if (jjte000 instanceof RuntimeException) {{if (true) throw (RuntimeException)jjte000;}}if (jjte000 instanceof ParseException) {{if (true) throw (ParseException)jjte000;}}{if (true) throw (Error)jjte000;}} finally {if (jjtc000) {jjtree.closeNodeScope(jjtn000,true);}}}  }
class C{  public ErrLoggingEvent parseToLoggingEvent(Message msg) throws JMSException, NotLoggingEventException {  ObjectMessage messageObject=(ObjectMessage)msg;  Object obj=messageObject.getObject();  ErrLoggingEvent errLoggingEvent;  if (obj instanceof Log4jLogEvent) {    errLoggingEvent=ErrLoggingEvent.fromLog4jLogEvent((Log4jLogEvent)obj);  } else   if (obj instanceof ErrLoggingEvent) {    errLoggingEvent=(ErrLoggingEvent)obj;  } else {    throw new NotLoggingEventException(obj);  }  return errLoggingEvent;}  }
class C{  public AccessDeniedException(String file){  super(file);}  }
class C{  protected void inicializaContenedorElementos(ContenedorElementos contenedor){  for (int contElementos=0; contElementos < contenedor.getTotalElementos(); contElementos++) {    Elemento elem=contenedor.getElemento(contElementos);switch (elem.getTipo()) {case TiposElemento.TIPO_ELEMENTO_AREA:case TiposElemento.TIPO_ELEMENTO_CABECERA:case TiposElemento.TIPO_ELEMENTO_TABLA:case TiposElemento.TIPO_ELEMENTO_TABLA_TEXTUAL:      inicializaContenedorElementos((ContenedorElementos)elem);    break;case TiposElemento.TIPO_ELEMENTO_ETIQUETA_DATO:  inicializaElemento((ElementoEtiquetaDato)elem);break;}}}  }
class C{  public void testBug8800() throws Exception {  assertEquals(((com.mysql.jdbc.Connection)this.conn).lowerCaseTableNames(),!this.conn.getMetaData().supportsMixedCaseIdentifiers());  assertEquals(((com.mysql.jdbc.Connection)this.conn).lowerCaseTableNames(),!this.conn.getMetaData().supportsMixedCaseQuotedIdentifiers());}  }
class C{  public final int length(){  return (m_lastChunk << m_chunkBits) + m_firstFree;}  }
class C{  private String determineNationalObjectives(final IDelegateBridge bridge){  final GameData data=getData();  final PlayerID player=data.getSequence().getStep().getPlayerID();  final HashSet<TriggerAttachment> toFirePossible=new HashSet<>();  final HashSet<ICondition> allConditionsNeeded=new HashSet<>();  final boolean useTriggers=games.strategy.triplea.Properties.getTriggers(data);  if (useTriggers) {    final Match<TriggerAttachment> endTurnDelegateTriggerMatch=new CompositeMatchAnd<>(AbstractTriggerAttachment.availableUses,AbstractTriggerAttachment.whenOrDefaultMatch(null,null),new CompositeMatchOr<TriggerAttachment>(TriggerAttachment.resourceMatch()));    toFirePossible.addAll(TriggerAttachment.collectForAllTriggersMatching(new HashSet<>(Collections.singleton(player)),endTurnDelegateTriggerMatch,bridge));    allConditionsNeeded.addAll(AbstractConditionsAttachment.getAllConditionsRecursive(new HashSet<>(toFirePossible),null));  }  final List<RulesAttachment> natObjs=Match.getMatches(RulesAttachment.getNationalObjectives(player),availableUses);  allConditionsNeeded.addAll(AbstractConditionsAttachment.getAllConditionsRecursive(new HashSet<>(natObjs),null));  if (allConditionsNeeded.isEmpty()) {    return "";  }  final StringBuilder endTurnReport=new StringBuilder();  final HashMap<ICondition,Boolean> testedConditions=AbstractConditionsAttachment.testAllConditionsRecursive(allConditionsNeeded,null,bridge);  if (useTriggers) {    if (!toFirePossible.isEmpty()) {      final Set<TriggerAttachment> toFireTestedAndSatisfied=new HashSet<>(Match.getMatches(toFirePossible,AbstractTriggerAttachment.isSatisfiedMatch(testedConditions)));      endTurnReport.append(TriggerAttachment.triggerResourceChange(toFireTestedAndSatisfied,bridge,null,null,true,true,true,true)).append("<br />");    }  }  for (  final RulesAttachment rule : natObjs) {    int uses=rule.getUses();    if (uses == 0 || !rule.isSatisfied(testedConditions)) {      continue;    }    int toAdd=rule.getObjectiveValue();    toAdd*=Properties.getPU_Multiplier(data);    toAdd*=rule.getEachMultiple();    int total=player.getResources().getQuantity(Constants.PUS) + toAdd;    if (total < 0) {      toAdd-=total;      total=0;    }    final Change change=ChangeFactory.changeResourcesChange(player,data.getResourceList().getResource(Constants.PUS),toAdd);    bridge.addChange(change);    if (uses > 0) {      uses--;      final Change use=ChangeFactory.attachmentPropertyChange(rule,Integer.toString(uses),"uses");      bridge.addChange(use);    }    final String PUMessage=MyFormatter.attachmentNameToText(rule.getName()) + ": " + player.getName()+ " met a national objective for an additional "+ toAdd+ MyFormatter.pluralize(" PU",toAdd)+ "; end with "+ total+ MyFormatter.pluralize(" PU",total);    bridge.getHistoryWriter().startEvent(PUMessage);    endTurnReport.append(PUMessage).append("<br />");  }  return endTurnReport.toString();}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiSplitPaneUI();  return MultiLookAndFeel.createUIs(mui,((MultiSplitPaneUI)mui).uis,a);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public static Vector2 abs(Vector2 o){  return new Vector2(Math.abs(o.x),Math.abs(o.z));}  }
class C{  public static void assertProcessorSupportResourceTypes(final ResourcePreProcessor processor,final ResourceType... expectedResourceTypes){  final ResourceType[] actualResourceTypes=new ProcessorDecorator(processor).getSupportedResourceTypes();  try {    Assert.assertTrue(Arrays.equals(expectedResourceTypes,actualResourceTypes));  } catch (  final AssertionFailedError e) {    final String message="actual resourceTypes: " + Arrays.toString(actualResourceTypes) + ", expected are: "+ Arrays.toString(expectedResourceTypes);    LOG.error(message);    Assert.fail(message);  }}  }
class C{  public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){  if (cv != null) {    return cv.visitField(access,name,desc,signature,value);  }  return null;}  }
class C{  public void reset(){  position=0;  limit=0;}  }
class C{  @Override public void drawLeft(){  drawShape(rocket);  drawTextGraphics(textImage);  drawText("Space",30.0f);  drawGridShape(gridImage);}  }
class C{  @Override public void messageSent(NextFilter nextFilter,IoSession session,WriteRequest writeRequest) throws Exception {  if (profileMessageSent) {    long start=timeNow();    nextFilter.messageSent(session,writeRequest);    long end=timeNow();    messageSentTimerWorker.addNewDuration(end - start);  } else {    nextFilter.messageSent(session,writeRequest);  }}  }
class C{  public Sort(){  this(new String[0],new boolean[0]);}  }
class C{  private AstNode arrayComprehension(AstNode result,int pos) throws IOException {  List<ArrayComprehensionLoop> loops=new ArrayList<ArrayComprehensionLoop>();  while (peekToken() == Token.FOR) {    loops.add(arrayComprehensionLoop());  }  int ifPos=-1;  ConditionData data=null;  if (peekToken() == Token.IF) {    consumeToken();    ifPos=ts.tokenBeg - pos;    data=condition();  }  mustMatchToken(Token.RB,"msg.no.bracket.arg");  ArrayComprehension pn=new ArrayComprehension(pos,ts.tokenEnd - pos);  pn.setResult(result);  pn.setLoops(loops);  if (data != null) {    pn.setIfPosition(ifPos);    pn.setFilter(data.condition);    pn.setFilterLp(data.lp - pos);    pn.setFilterRp(data.rp - pos);  }  return pn;}  }
class C{  public static Vec4 intersectSegmentWithTerrain(Globe globe,Vec4 p1,Vec4 p2,double sampleLength,double precision){  if (globe == null) {    String msg=Logging.getMessage("nullValue.GlobeIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (p1 == null || p2 == null) {    String msg=Logging.getMessage("nullValue.Vec4IsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (sampleLength < 0) {    String msg=Logging.getMessage("generic.ArgumentOutOfRange",sampleLength);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (precision < 0) {    String msg=Logging.getMessage("generic.ArgumentOutOfRange",precision);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Vec4 point=null;  Line ray=new Line(p1,p2.subtract3(p1).normalize3());  double rayLength=p1.distanceTo3(p2);  double sampledDistance=0;  Vec4 sample=p1;  Vec4 lastSample=null;  while (sampledDistance <= rayLength) {    Position samplePos=globe.computePositionFromPoint(sample);    if (samplePos.getElevation() <= globe.getElevation(samplePos.getLatitude(),samplePos.getLongitude())) {      point=sample;      break;    }    if (sampledDistance >= rayLength)     break;    lastSample=sample;    sampledDistance=Math.min(sampledDistance + sampleLength,rayLength);    sample=ray.getPointAt(sampledDistance);  }  if (point != null && sampleLength > precision && lastSample != null)   point=intersectSegmentWithTerrain(globe,lastSample,point,sampleLength / 10,precision);  return point;}  }
class C{  public synchronized AttributeSet addAttribute(AttributeSet old,Object name,Object value){  if ((old.getAttributeCount() + 1) <= getCompressionThreshold()) {    search.removeAttributes(search);    search.addAttributes(old);    search.addAttribute(name,value);    reclaim(old);    return getImmutableUniqueSet();  }  MutableAttributeSet ma=getMutableAttributeSet(old);  ma.addAttribute(name,value);  return ma;}  }
class C{  public static Vector3f interpolateCatmullRom(float u,float T,Vector3f p0,Vector3f p1,Vector3f p2,Vector3f p3){  return interpolateCatmullRom(u,T,p0,p1,p2,p3,null);}  }
class C{  public static Object[][] like2DArray(final Class<?>... clazz){  final int totalItems=clazz.length;  final Object[][] objects=new Object[totalItems][1];  for (int i=0; i < totalItems; i++) {    objects[i][0]=clazz[i];  }  return objects;}  }
class C{  public Word plus(Offset w2){  return new Word(value.plus(w2.toLong()));}  }
class C{  public KernelSGD(LossFunc loss,KernelTrick kernel,double lambda,KernelPoint.BudgetStrategy budgetStrategy,int budgetSize,double eta,double errorTolerance){  setLoss(loss);  setKernel(kernel);  setLambda(lambda);  setEta(eta);  setBudgetStrategy(budgetStrategy);  setErrorTolerance(errorTolerance);  setBudgetSize(budgetSize);}  }
class C{  public static int showConfirmDialog(Component parentComponent,Object message,String title,int optionType,int messageType,Icon icon) throws HeadlessException {  return showOptionDialog(parentComponent,message,title,optionType,messageType,icon,null,null);}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public ColorPickerConfigurer(){}  }
class C{  public ViewExpiredException(String message,String viewId){  super(message);  this.viewId=viewId;}  }
class C{  public Rectangle intersection(int rX,int rY,int rW,int rH){  int tx1=this.x;  int ty1=this.y;  int rx1=rX;  int ry1=rY;  int tx2=tx1;  tx2+=this.size.getWidth();  int ty2=ty1;  ty2+=this.size.getHeight();  int rx2=rx1;  rx2+=rW;  int ry2=ry1;  ry2+=rH;  if (tx1 < rx1) {    tx1=rx1;  }  if (ty1 < ry1) {    ty1=ry1;  }  if (tx2 > rx2) {    tx2=rx2;  }  if (ty2 > ry2) {    ty2=ry2;  }  tx2-=tx1;  ty2-=ty1;  if (tx2 < Integer.MIN_VALUE) {    tx2=Integer.MIN_VALUE;  }  if (ty2 < Integer.MIN_VALUE) {    ty2=Integer.MIN_VALUE;  }  return new Rectangle(tx1,ty1,tx2,ty2);}  }
class C{  public NormalAnnotationExpr addPair(String key,NameExpr value){  MemberValuePair memberValuePair=new MemberValuePair(key,value);  getPairs().add(memberValuePair);  memberValuePair.setParentNode(this);  return this;}  }
class C{  public static int toCodePoints(char[] src,int srcOff,int srcLen,int[] dest,int destOff){  if (srcLen < 0) {    throw new IllegalArgumentException("srcLen must be >= 0");  }  int codePointCount=0;  for (int i=0; i < srcLen; ) {    final int cp=Character.codePointAt(src,srcOff + i,srcOff + srcLen);    final int charCount=Character.charCount(cp);    dest[destOff + codePointCount++]=cp;    i+=charCount;  }  return codePointCount;}  }
class C{  public void failoverCopyTest(RPCopyRequestParams copyToFailoverTo) throws RecoverPointException {  String bookmarkName=copyToFailoverTo.getBookmarkName();  Date apitTime=copyToFailoverTo.getApitTime();  if (bookmarkName != null) {    logger.info("Failver copy to bookmark : " + bookmarkName);  } else   if (apitTime != null) {    logger.info("Failover copy to APIT : " + apitTime.toString());  } else {    logger.info("Failover copy to most recent image");  }  RecoverPointImageManagementUtils imageManager=new RecoverPointImageManagementUtils();  imageManager.enableCopyImage(functionalAPI,copyToFailoverTo,false);  RecoverPointVolumeProtectionInfo failoverCopyInfo=copyToFailoverTo.getCopyVolumeInfo();  pauseTransfer(failoverCopyInfo);}  }
class C{  @Override protected JPopupMenu createPopupMenu(boolean properties,boolean save,boolean print,boolean zoom){  JPopupMenu result=super.createPopupMenu(properties,save,print,zoom);  int zoomInIndex=getPopupMenuItem(result,localizationResources.getString("Zoom_In"));  int zoomOutIndex=getPopupMenuItem(result,localizationResources.getString("Zoom_Out"));  int autoIndex=getPopupMenuItem(result,localizationResources.getString("Auto_Range"));  if (zoom) {    JMenuItem zoomIn=new JMenuItem(localizationResources.getString("Zoom_In"));    zoomIn.setActionCommand(POLAR_ZOOM_IN_ACTION_COMMAND);    zoomIn.addActionListener(this);    JMenuItem zoomOut=new JMenuItem(localizationResources.getString("Zoom_Out"));    zoomOut.setActionCommand(POLAR_ZOOM_OUT_ACTION_COMMAND);    zoomOut.addActionListener(this);    JMenuItem auto=new JMenuItem(localizationResources.getString("Auto_Range"));    auto.setActionCommand(POLAR_AUTO_RANGE_ACTION_COMMAND);    auto.addActionListener(this);    if (zoomInIndex != -1) {      result.remove(zoomInIndex);    } else {      zoomInIndex=result.getComponentCount() - 1;    }    result.add(zoomIn,zoomInIndex);    if (zoomOutIndex != -1) {      result.remove(zoomOutIndex);    } else {      zoomOutIndex=zoomInIndex + 1;    }    result.add(zoomOut,zoomOutIndex);    if (autoIndex != -1) {      result.remove(autoIndex);    } else {      autoIndex=zoomOutIndex + 1;    }    result.add(auto,autoIndex);  }  return result;}  }
class C{  public static JavaUnicodeEscaper between(final int codepointLow,final int codepointHigh){  return new JavaUnicodeEscaper(codepointLow,codepointHigh,true);}  }
class C{  public boolean checkParity(){  int len=getNumDataElements();  return (getElement(len - 1) == (0x0D | 0x0A));}  }
class C{  public void testDivisionKnuthFirstDigitsEqual(){  byte aBytes[]={2,-3,-4,-5,-1,-5,-4,-3,-2,-1,0,1,2,3,4,5};  byte bBytes[]={2,-3,-4,-5,-1,-1,-1,-1};  int aSign=-1;  int bSign=-1;  byte rBytes[]={0,-1,-1,-1,-1,-2,-88,-60,41};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public UF9(){  this(30);}  }
class C{  private boolean isDateSensible(long timeInMillis){  LocalDateTime ldt=LocalDateTime.ofInstant(Instant.ofEpochMilli(timeInMillis),ZoneOffset.UTC);  return start.isBefore(ldt) && end.isAfter(ldt);}  }
class C{  public JSONArray put(int index,boolean value) throws JSONException {  put(index,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public void clearSelection(){  List<Integer> selection=getSelectedItems();  selectedItems.clear();  for (  Integer i : selection) {    notifyItemChanged(i);  }}  }
class C{  public static int dialDownHeat(Mounted weapon,WeaponType wtype){  return Compute.dialDownHeat(weapon,wtype,1);}  }
class C{  public AxisLabelAnimator(String group){  super(group);}  }
class C{  private void showAllCommands(IRCService service,Server server,Conversation conversation){  CommandParser cp=CommandParser.getInstance();  StringBuffer commandList=new StringBuffer(service.getString(R.string.available_commands));  commandList.append("\n");  HashMap<String,BaseHandler> commands=cp.getCommands();  HashMap<String,String> aliases=cp.getAliases();  Set<String> commandKeys=commands.keySet();  Set<String> aliasesKeys=aliases.keySet();  for (  Object command : commandKeys) {    String alias="";    for (    Object aliasCommand : aliasesKeys) {      if (command.equals(aliases.get(aliasCommand))) {        alias=" " + service.getString(R.string.logical_or) + " /"+ aliasCommand;        break;      }    }    commandList.append("/" + command.toString() + alias+ " - "+ commands.get(command).getDescription(service)+ "\n");  }  Message message=new Message(commandList.toString());  message.setColor(Message.COLOR_YELLOW);  conversation.addMessage(message);  Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),conversation.getName());  service.sendBroadcast(intent);}  }
class C{  public void arrangeFramesHorizontally(){  Component[] allFrames=getAllFrames();  if (allFrames.length == 0) {    return;  }  manager.setNormalSize();  int vertFrames=(int)Math.ceil(Math.sqrt(allFrames.length));  int horFrames=(int)Math.floor(Math.sqrt(allFrames.length));  int frameWidth=getBounds().width / horFrames;  int frameHeight=getBounds().height / vertFrames;  int x=0;  int y=0;  int frameIdx=0;  for (int vertCnt=0; vertCnt < vertFrames - 1; vertCnt++) {    x=0;    for (int horCnt=0; horCnt < horFrames; horCnt++) {      try {        ((JInternalFrame)allFrames[frameIdx]).setMaximum(false);      } catch (      PropertyVetoException e) {        e.printStackTrace();      }      allFrames[frameIdx].setBounds(x,y,frameWidth,frameHeight);      frameIdx++;      x=x + frameWidth;    }    y=y + frameHeight;  }  frameWidth=getBounds().width / (allFrames.length - frameIdx);  x=0;  for (; frameIdx < allFrames.length; frameIdx++) {    try {      ((JInternalFrame)allFrames[frameIdx]).setMaximum(false);    } catch (    PropertyVetoException e) {      e.printStackTrace();    }    allFrames[frameIdx].setBounds(x,y,frameWidth,frameHeight);    x=x + frameWidth;  }  checkDesktopSize();}  }
class C{  protected SVGOMFlowLineElement(){}  }
class C{  public void printDate(Calendar calendar) throws IOException {  int year=calendar.get(Calendar.YEAR);  os.write((char)('0' + (year / 1000 % 10)));  os.write((char)('0' + (year / 100 % 10)));  os.write((char)('0' + (year / 10 % 10)));  os.write((char)('0' + (year % 10)));  int month=calendar.get(Calendar.MONTH) + 1;  os.write((char)('0' + (month / 10 % 10)));  os.write((char)('0' + (month % 10)));  int day=calendar.get(Calendar.DAY_OF_MONTH);  os.write((char)('0' + (day / 10 % 10)));  os.write((char)('0' + (day % 10)));  os.write('T');  int hour=calendar.get(Calendar.HOUR_OF_DAY);  os.write((char)('0' + (hour / 10 % 10)));  os.write((char)('0' + (hour % 10)));  int minute=calendar.get(Calendar.MINUTE);  os.write((char)('0' + (minute / 10 % 10)));  os.write((char)('0' + (minute % 10)));  int second=calendar.get(Calendar.SECOND);  os.write((char)('0' + (second / 10 % 10)));  os.write((char)('0' + (second % 10)));  int ms=calendar.get(Calendar.MILLISECOND);  os.write('.');  os.write((char)('0' + (ms / 100 % 10)));  os.write((char)('0' + (ms / 10 % 10)));  os.write((char)('0' + (ms % 10)));  os.write('Z');}  }
class C{  private RangeAxisConfig(String name,int Id){  this.Id=Id;  if (name == null) {    this.autoNaming=true;    setAutoLabelIfEnabled();  } else {    this.name=name;  }  userDefinedRange=new NumericalValueRange(0,1,-1);  userDefinedRange.addValueRangeListener(this);  crosshairLines.addAxisParallelLinesConfigurationListener(this);}  }
class C{  protected Controller lookupDeviceController() throws ControllerException {  BlockController bc=_deviceImpl.iterator().next();  if (bc == null) {    throw ClientControllerException.fatals.unableToLocateDeviceController("BlockController");  }  return bc;}  }
class C{  public static boolean[] intToBinary(final int src,final int srcPos,final boolean[] dst,final int dstPos,final int nBools){  if (0 == nBools) {    return dst;  }  if (nBools - 1 + srcPos >= 32) {    throw new IllegalArgumentException("nBools-1+srcPos is greather or equal to than 32");  }  int shift=0;  for (int i=0; i < nBools; i++) {    shift=i + srcPos;    dst[dstPos + i]=((0x1 & (src >> shift)) != 0);  }  return dst;}  }
class C{  private boolean isCompositeLink(Element imageParent,Element image){  if (imageParent == null) {    return false;  }  if (!StringUtils.equals(imageParent.text(),image.text())) {    return true;  }  if (imageParent.children().size() == 1) {    return isCompositeLink(imageParent.child(0),image);  } else   if (imageParent.children().size() > 1) {    return true;  }  return false;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:58.575 -0500",hash_original_method="2D3829F01E07E80E02365A68C6B16FCB",hash_generated_method="F10381060CF01AE740B456044757E6C6") public static long handleKeyUp(long state,int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_SHIFT_LEFT || keyCode == KeyEvent.KEYCODE_SHIFT_RIGHT) {    return release(state,META_SHIFT_ON,META_SHIFT_MASK,META_CAP_PRESSED,META_CAP_RELEASED,META_CAP_USED,event);  }  if (keyCode == KeyEvent.KEYCODE_ALT_LEFT || keyCode == KeyEvent.KEYCODE_ALT_RIGHT || keyCode == KeyEvent.KEYCODE_NUM) {    return release(state,META_ALT_ON,META_ALT_MASK,META_ALT_PRESSED,META_ALT_RELEASED,META_ALT_USED,event);  }  if (keyCode == KeyEvent.KEYCODE_SYM) {    return release(state,META_SYM_ON,META_SYM_MASK,META_SYM_PRESSED,META_SYM_RELEASED,META_SYM_USED,event);  }  return state;}  }
class C{  public void writeAttributes(ObjectOutputStream out,AttributeSet a) throws IOException {  writeAttributeSet(out,a);}  }
class C{  @Override public DriverTask expandVolume(StorageVolume volume,long newCapacity){  DriverTask task=createDriverTask(HP3PARConstants.TASK_TYPE_EXPAND_STORAGE_VOLUMES);  return provHelper.expandVolume(volume,newCapacity,task,this.driverRegistry);}  }
class C{  @Override public boolean reset(){  try {    FitsUtil.reposition(this.input,this.fileOffset);    return true;  } catch (  Exception e) {    LOG.log(Level.WARNING,"Exception while repositioning " + input,e);    return false;  }}  }
class C{  public LockException(String operation,String name,String message,String detail){  super(message,"lock");  this.lockName=name;  this.lockOperation=operation;  setDetail(detail);}  }
class C{  public void testGetLocalName1() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Attr addrAttr;  String localName;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  addrAttr=testAddr.getAttributeNode("emp:domestic");  localName=addrAttr.getLocalName();  assertEquals("localName","domestic",localName);}  }
class C{  public void removeProtocolEventListener(final DebugEventListener listener){  protocolListeners.removeListener(listener);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MPaySelection[");  sb.append(get_ID()).append(",").append(getName()).append("]");  return sb.toString();}  }
class C{  public boolean wasCancelled(){  return cancelled;}  }
class C{  protected void writeRequestBody(OutputStream writer) throws IOException {  if (mRequestBody != null) {    if (writer instanceof CounterOutputStream) {      writer.write(mRequestBody.available());    } else {      IOUtils.write(mRequestBody,writer);      IOUtils.closeQuietly(mRequestBody);      mRequestBody=null;    }  }}  }
class C{  public static byte[] decrypt(CipherTextIvMac civ,SecretKeys secretKeys) throws GeneralSecurityException {  byte[] ivCipherConcat=CipherTextIvMac.ivCipherConcat(civ.getIv(),civ.getCipherText());  byte[] computedMac=generateMac(ivCipherConcat,secretKeys.getIntegrityKey());  if (constantTimeEq(computedMac,civ.getMac())) {    Cipher aesCipherForDecryption=Cipher.getInstance(CIPHER_TRANSFORMATION);    aesCipherForDecryption.init(Cipher.DECRYPT_MODE,secretKeys.getConfidentialityKey(),new IvParameterSpec(civ.getIv()));    return aesCipherForDecryption.doFinal(civ.getCipherText());  } else {    throw new GeneralSecurityException("MAC stored in civ does not match computed MAC.");  }}  }
class C{  public static String lookup(String familyName){  return (String)fonts.get(familyName.toLowerCase());}  }
class C{  static byte[] septetStream2octetStream(byte[] septets){  int octetLength=(int)Math.ceil(((septets.length * 7)) / 8.0);  byte[] octets=new byte[octetLength];  for (int i=0; i < septets.length; i++) {    for (int j=0; j < 7; j++) {      if ((septets[i] & (1 << j)) != 0) {        int bitIndex=(i * 7) + j;        octets[bitIndex >>> 3]|=1 << (bitIndex & 7);      }    }  }  return octets;}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  static RegisterOperand InsertLoadOffsetJTOC(Instruction s,IR ir,Operator operator,TypeReference type,Operand offset){  return InsertLoadOffset(s,ir,operator,type,ir.regpool.makeJTOCOp(),offset,null,null);}  }
class C{  public final CharSequence nextToken(CharSequence csq,char c){  int n=csq.length();  for (int i=index; i < n; i++) {    if (csq.charAt(i) != c) {      int j=i;      for (; (++j < n) && (csq.charAt(j) != c); ) {      }      index=j;      return csq.subSequence(i,j);    }  }  index=n;  return null;}  }
class C{  public void dispose(){  m_debugPerspective.removeListener(m_debugListener);  synchronizeDebugger(m_debugPerspective.getCurrentSelectedDebugger(),null);}  }
class C{  @Override public void onCompletion(MediaPlayer player){  endPlayback();}  }
class C{  public CSVTokenizer(char separator){  addJoinedType(CSVTokenType.TEXT);  addIgnoredType(CSVTokenType.QUOTE);  putRules(new Rule("\n|\r\n|\r",CSVTokenType.ROW_SEPARATOR),new Rule(Pattern.quote(String.valueOf(separator)),CSVTokenType.COLUMN_SEPARATOR),new Rule("\"",CSVTokenType.QUOTE,"quoted"),new Rule("[ \t]+",CSVTokenType.EMPTY_SPACE),new Rule(".",CSVTokenType.TEXT));  putRules("quoted",new Rule("(\")\"",CSVTokenType.TEXT),new Rule("\"",CSVTokenType.QUOTE,"#pop"),new Rule(".",CSVTokenType.TEXT));}  }
class C{  @Override public void done(){  this.sequentialFile.done(this);}  }
class C{  @Override public boolean isFixedLength(){  return type.isFixedLength();}  }
class C{  @Deprecated public Scenario loadScenario(){  String currentDir=new File("tmp").getAbsolutePath();  currentDir=currentDir.substring(0,currentDir.length() - 3);  log.info("loading scenario from base directory: " + currentDir);  this.loadNetwork();  this.loadActivityFacilities();  this.loadPopulation();  if (this.config.households().getInputFile() != null) {    this.loadHouseholds();  }  if (this.config.transit().isUseTransit()) {    this.loadTransit();  }  if (this.config.vehicles().getVehiclesFile() != null) {    this.loadVehicles();  }  if (this.config.network().getLaneDefinitionsFile() != null) {    this.loadLanes();  }  if (ConfigUtils.addOrGetModule(this.config,SignalSystemsConfigGroup.GROUPNAME,SignalSystemsConfigGroup.class).isUseSignalSystems()) {    this.loadSignalSystems();  }  return this.scenario;}  }
class C{  public String findFileName(double lat,double lon,int level){  if (directories != null) {    for (Iterator it=directories.iterator(); it.hasNext(); ) {      DTEDDirectoryHandler ddh=(DTEDDirectoryHandler)it.next();      DTEDNameTranslator dnt=ddh.getTranslator();      dnt.set(lat,lon,level);      String dtedFileName=dnt.getName();      if (Debug.debugging("dtedfile")) {        Debug.output("DTEDFrameCache translator returns " + dtedFileName + " for "+ lat+ ", "+ lon+ ", level "+ level);      }      if (BinaryFile.exists(dtedFileName)) {        return dtedFileName;      }    }  }  return null;}  }
class C{  @Override protected void removeAt(int index){  _values[index]=(V)TObjectHash.REMOVED;  super.removeAt(index);}  }
class C{  private void externalIteration(){  for (  Movie m : movies) {    if (m.isClassic()) {      top2Classics.add(m);    }  }  System.out.println("Top two classics (using external iteration): " + top2Classics);}  }
class C{  public Entity basicGetSuperType(){  return superType;}  }
class C{  public boolean isValidFromTo(Timestamp date){  Timestamp validFrom=getValidFrom();  Timestamp validTo=getValidTo();  if (validFrom != null && date.before(validFrom))   return false;  if (validTo != null && date.after(validTo))   return false;  return true;}  }
class C{  public void whisper(String user,String message){  checkSocket();  this.socket.sendTextMessage("whisper:" + user + ": "+ message);}  }
class C{  public void putDescription(File f,String fileDescription){  fileDescriptions.put(f,fileDescription);}  }
class C{  void enforceNotSealed(){  if (isSealed()) {    throw new IllegalStateException("Cannot perform this " + "action on a sealed instance.");  }}  }
class C{  public boolean apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  Object val1=exp1.apply(name);  Object val2=exp2.apply(name);  boolean numeric=val1 instanceof NumericValueExp;  boolean bool=val1 instanceof BooleanValueExp;  if (numeric) {    if (((NumericValueExp)val1).isLong()) {      long lval1=((NumericValueExp)val1).longValue();      long lval2=((NumericValueExp)val2).longValue();switch (relOp) {case Query.GT:        return lval1 > lval2;case Query.LT:      return lval1 < lval2;case Query.GE:    return lval1 >= lval2;case Query.LE:  return lval1 <= lval2;case Query.EQ:return lval1 == lval2;}} else {double dval1=((NumericValueExp)val1).doubleValue();double dval2=((NumericValueExp)val2).doubleValue();switch (relOp) {case Query.GT:return dval1 > dval2;case Query.LT:return dval1 < dval2;case Query.GE:return dval1 >= dval2;case Query.LE:return dval1 <= dval2;case Query.EQ:return dval1 == dval2;}}} else if (bool) {boolean bval1=((BooleanValueExp)val1).getValue().booleanValue();boolean bval2=((BooleanValueExp)val2).getValue().booleanValue();switch (relOp) {case Query.GT:return bval1 && !bval2;case Query.LT:return !bval1 && bval2;case Query.GE:return bval1 || !bval2;case Query.LE:return !bval1 || bval2;case Query.EQ:return bval1 == bval2;}} else {String sval1=((StringValueExp)val1).getValue();String sval2=((StringValueExp)val2).getValue();switch (relOp) {case Query.GT:return sval1.compareTo(sval2) > 0;case Query.LT:return sval1.compareTo(sval2) < 0;case Query.GE:return sval1.compareTo(sval2) >= 0;case Query.LE:return sval1.compareTo(sval2) <= 0;case Query.EQ:return sval1.compareTo(sval2) == 0;}}return false;}  }
class C{  public StopAnalyzer(Reader stopwords) throws IOException {  this(loadStopwordSet(stopwords));}  }
class C{  private String streamResult(HttpServletRequest request,HttpServletResponse response,int AD_PInstance_ID,File file){  if (AD_PInstance_ID == 0)   return "Your process not found";  MobileSessionCtx wsc=MobileSessionCtx.get(request);  Object value=wsc.ctx.get("AD_PInstance_ID=" + AD_PInstance_ID);  if (value == null || !value.equals("ok"))   return "Process Instance not found";  if (file == null || file.length() == 0)   return "No Process Result";  if (!file.exists())   return "Process Result not found: " + file;  return MobileUtil.streamFile(response,file);}  }
class C{  public InstructionNode(final INaviInstruction instruction,final boolean isLocal){  this.instruction=Preconditions.checkNotNull(instruction,"Error: instruction argument can not be null.");  setIcon(determineIcon(isLocal));}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (cv != null) {    return cv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  public void rescanHBAs(){  try {    HostStorageSystem storageSystem=getStorageSystem();    storageSystem.rescanAllHba();  } catch (  HostConfigFault e) {    throw new VMWareException(e);  }catch (  RuntimeFault e) {    throw new VMWareException(e);  }catch (  RemoteException e) {    throw new VMWareException(e);  }}  }
class C{  public static void assertNothingIsEqual(Iterable<Object> objects){  for (  Object object1 : objects) {    for (    Object object2 : objects) {      if (object1 != object2) {        assertNotEquals("Objects should not be equal:\n" + object1 + "\n"+ object2,object1,object2);      }    }  }}  }
class C{  public OperationPendingException(String message,OperationPendingExceptionBean bean,Throwable cause){  super(message,bean,cause);  this.bean=bean;}  }
class C{  private void initialize(){  frame=new JFrame();  frame.setBounds(100,100,450,300);  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getContentPane().setLayout(null);  frame.getContentPane().add(getPanel());}  }
class C{  public OctetStreamData(InputStream octetStream,String uri,String mimeType){  if (octetStream == null) {    throw new NullPointerException("octetStream is null");  }  this.octetStream=octetStream;  this.uri=uri;  this.mimeType=mimeType;}  }
class C{  public void testSimpleWar() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/simple-war");  final String expected="Sample page for testing";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  private void doSignalAll(Node first){  lastWaiter=firstWaiter=null;  do {    Node next=first.nextWaiter;    first.nextWaiter=null;    transferForSignal(first);    first=next;  } while (first != null);}  }
class C{  public T image(Drawable drawable){  if (view instanceof ImageView) {    ImageView iv=(ImageView)view;    iv.setTag(AQuery.TAG_URL,null);    iv.setImageDrawable(drawable);  }  return self();}  }
class C{  private Date parseEndDate() throws ParseException {  return new DateMathParser().parseMath(String.format("+0MILLISECOND-%s",timeSeriesAge));}  }
class C{  public void loadWindowStates(){  for (  Window window : windows.keySet()) {    loadWindowState(window);  }}  }
class C{  public static LinkedVector parsePOSBracketForm(String line){  String[] tokens=line.trim().split(" ");  if (tokens.length == 0 || tokens.length == 1 && (tokens[0] == null || tokens[0].length() == 0))   return new LinkedVector();  int spaceIndex=line.indexOf(' ');  spaceIndex=line.indexOf(' ',spaceIndex + 1);  Word w=new Word(tokens[1].substring(0,tokens[1].length() - 1),tokens[0].substring(1),0,spaceIndex - 1);  for (int i=2; i < tokens.length; i+=2) {    int start=spaceIndex + 1;    spaceIndex=line.indexOf(' ',spaceIndex + 1);    spaceIndex=line.indexOf(' ',spaceIndex + 1);    w.next=new Word(tokens[i + 1].substring(0,tokens[i + 1].length() - 1),tokens[i].substring(1),w,start,spaceIndex - 1);    w=(Word)w.next;  }  return new LinkedVector(w);}  }
class C{  public static Option findOption(String name,Option[] options){  for (int i=0; i < options.length; i++) {    if (options[i].getName().equals(name)) {      return options[i];    }  }  return null;}  }
class C{  public static boolean isValidKnightTour(int i,int j,int[] xMoves,int[] yMoves,int step,int[][] tour){  if (step > tour.length * tour[0].length)   return true;  int nextI, nextJ;  for (int k=0; k < xMoves.length; k++) {    nextI=i + xMoves[k];    nextJ=j + yMoves[k];    if (isValidMove(nextI,nextJ,tour)) {      tour[nextI][nextJ]=step;      if (isValidKnightTour(nextI,nextJ,xMoves,yMoves,step + 1,tour)) {        return true;      } else {        tour[nextI][nextJ]=0;      }    }  }  return false;}  }
class C{  public static final Date createDate(long movieTime){  return new Date(movieTime * 1000 - 2082850791998L);}  }
class C{  boolean isSubPopupMenu(JPopupMenu popup){  int ncomponents=this.getComponentCount();  Component[] component=this.getComponents();  for (int i=0; i < ncomponents; i++) {    Component comp=component[i];    if (comp instanceof JMenu) {      JMenu menu=(JMenu)comp;      JPopupMenu subPopup=menu.getPopupMenu();      if (subPopup == popup)       return true;      if (subPopup.isSubPopupMenu(popup))       return true;    }  }  return false;}  }
class C{  public AugmentedBalancedTree(Comparator<? super K> c){  super(c);}  }
class C{  public UF2(int numberOfVariables){  super(numberOfVariables,2);}  }
class C{  public boolean addSeparateAndConquerLevel(String individualRegex,int jobId){  return this.addSeparateAndConquerLevel(individualRegex,jobId,true,false);}  }
class C{  @Override public void run(){  amIActive=true;  RandomAccessFile rIn=null;  ByteBuffer buf;  String inputFilesString=null;  String[] XYZFiles;  double x, y, north, south, east, west;  double z;  float minValue, maxValue;  float featureValue;  int numVertices;  byte classValue, numReturns, returnNum;  int a, n, loc, featureNum=1;  int progress=0;  int numPoints=0;  String delimiter=" ";  ShapeType shapeType=ShapeType.POINT;  boolean firstLineHeader=false;  String fileExtension=".txt";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  firstLineHeader=Boolean.parseBoolean(args[1]);  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    XYZFiles=inputFilesString.split(";");    int numZYZFiles=XYZFiles.length;    shapeType=ShapeType.POINT;    for (int j=0; j < numZYZFiles; j++) {      String fileName=XYZFiles[j];      File file=new File(fileName);      if (!file.exists()) {        return;      }      DBFField fields[]=new DBFField[1];      fields[0]=new DBFField();      fields[0].setName("Z");      fields[0].setDataType(DBFField.DBFDataType.NUMERIC);      fields[0].setFieldLength(10);      fields[0].setDecimalCount(3);      fileExtension=FileUtilities.getFileExtension(fileName);      String outputFile=fileName.replace("." + fileExtension,".shp");      File outfile=new File(outputFile);      if (outfile.exists()) {        outfile.delete();      }      ShapeFile output=new ShapeFile(outputFile,shapeType,fields);      DataInputStream in=null;      BufferedReader br=null;      try {        FileInputStream fstream=new FileInputStream(file);        in=new DataInputStream(fstream);        br=new BufferedReader(new InputStreamReader(in));        String line;        String[] str;        j=1;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if ((j > 1 || !firstLineHeader) && (str.length >= 3)) {            x=Double.parseDouble(str[0]);            y=Double.parseDouble(str[1]);            z=Double.parseDouble(str[2]);            whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(x,y);            Object[] rowData=new Object[1];            rowData[0]=new Double(z);            output.addRecord(wbGeometry,rowData);          }          j++;        }        in.close();        br.close();      } catch (      java.io.IOException e) {        myHost.showFeedback("An error has occurred during operation. See log file for details.");        myHost.logException("Error in " + getDescriptiveName(),e);      } finally {        try {          if (in != null || br != null) {            in.close();            br.close();          }        } catch (        java.io.IOException ex) {        }      }      output.write();    }    returnData(XYZFiles[0].replace("." + fileExtension,".shp"));  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    if (rIn != null) {      try {        rIn.close();      } catch (      Exception e) {      }    }    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static InstructionGraph convert(final com.google.security.zynamics.reil.algorithms.mono.InstructionGraph graph){  final List<InstructionGraphNode> nodes=new ArrayList<InstructionGraphNode>();  final List<InstructionGraphEdge> edges=new ArrayList<InstructionGraphEdge>();  final Map<com.google.security.zynamics.reil.algorithms.mono.InstructionGraphNode,InstructionGraphNode> nodeMap=new HashMap<com.google.security.zynamics.reil.algorithms.mono.InstructionGraphNode,InstructionGraphNode>();  for (  final com.google.security.zynamics.reil.algorithms.mono.InstructionGraphNode node : graph) {    final InstructionGraphNode convertedNode=new InstructionGraphNode(new ReilInstruction(node.getInstruction()));    nodeMap.put(node,convertedNode);    nodes.add(convertedNode);  }  for (  final com.google.security.zynamics.reil.algorithms.mono.InstructionGraphEdge edge : graph.getEdges()) {    final InstructionGraphEdge convertedEdge=new InstructionGraphEdge(nodeMap.get(edge.getSource()),nodeMap.get(edge.getTarget()),EdgeType.convert(edge.getType()));    edges.add(convertedEdge);    InstructionGraphNode.link(nodeMap.get(edge.getSource()),nodeMap.get(edge.getTarget()),convertedEdge);  }  return new InstructionGraph(nodes,edges);}  }
class C{  private NamedList rQuery(int expectedDocCount,String query,SolrClient client) throws Exception {  int timeSlept=0;  NamedList res=query(query,client);  while (expectedDocCount != numFound(res) && timeSlept < 30000) {    log.info("Waiting for " + expectedDocCount + " docs");    timeSlept+=100;    Thread.sleep(100);    res=query(query,client);  }  log.info("Waited for {}ms and found {} docs",timeSlept,numFound(res));  return res;}  }
class C{  private static boolean needIncrement(long ldivisor,int roundingMode,int qsign,long q,long r){  assert r != 0L;  int cmpFracHalf;  if (r <= HALF_LONG_MIN_VALUE || r > HALF_LONG_MAX_VALUE) {    cmpFracHalf=1;  } else {    cmpFracHalf=longCompareMagnitude(2 * r,ldivisor);  }  return commonNeedIncrement(roundingMode,qsign,cmpFracHalf,(q & 1L) != 0L);}  }
class C{  protected JButton createRightOneTouchButton(){  SynthArrowButton b=new SynthArrowButton(SwingConstants.NORTH);  int oneTouchSize=lookupOneTouchSize();  b.setName("SplitPaneDivider.rightOneTouchButton");  b.setMinimumSize(new Dimension(oneTouchSize,oneTouchSize));  b.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));  b.setFocusPainted(false);  b.setBorderPainted(false);  b.setRequestFocusEnabled(false);  b.setDirection(mapDirection(false));  return b;}  }
class C{  protected AbstractKeyValue(Object key,Object value){  super();  this.key=key;  this.value=value;}  }
class C{  private static List<TriggerProcessIdentifier> initResult(DataService ds){  List<TriggerProcessIdentifier> result=new ArrayList<TriggerProcessIdentifier>();  result.add(new TriggerProcessIdentifier(TriggerProcessIdentifierName.ORGANIZATION_KEY,String.valueOf(ds.getCurrentUser().getOrganization().getKey())));  return result;}  }
class C{  public ArrayList<Channel> readDocument(Reader reader) throws XmlPullParserException, IOException, NoSuchAlgorithmException {  ArrayList<Channel> elementList=new ArrayList<>();  XmlPullParserFactory factory=XmlPullParserFactory.newInstance();  factory.setNamespaceAware(true);  XmlPullParser xpp=factory.newPullParser();  xpp.setInput(reader);  int eventType=xpp.getEventType();  while (eventType != XmlPullParser.END_DOCUMENT) {switch (eventType) {case XmlPullParser.START_DOCUMENT:      break;case XmlPullParser.START_TAG:    if (xpp.getName().equals(OpmlSymbols.OPML)) {      isInOpml=true;    } else     if (isInOpml && xpp.getName().equals(OpmlSymbols.OUTLINE)) {      Channel element=new Channel();      final String title=xpp.getAttributeValue(null,OpmlSymbols.TITLE);      if (title != null) {        Log.i(TAG,"Using title: " + title);        element.setTitle(title);      } else {        Log.i(TAG,"Title not found, using text");        element.setTitle(xpp.getAttributeValue(null,OpmlSymbols.TEXT));      }      element.setFeedUrl(xpp.getAttributeValue(null,OpmlSymbols.XMLURL));      element.setSiteUrl(xpp.getAttributeValue(null,OpmlSymbols.HTMLURL));      element.setGeneratedId(TextHelper.generateMD5(element.getFeedUrl()));      element.setSubscribed(true);      if (element.getFeedUrl() != null) {        if (element.getTitle() == null) {          Log.i(TAG,"Opml element has no text attribute.");          element.setTitle(element.getFeedUrl());        }        elementList.add(element);      }    }  break;}eventType=xpp.next();}return elementList;}  }
class C{  public static int relativeCCW(final float pX1,final float pY1,float pX2,float pY2,float pPX,float pPY){  pX2-=pX1;  pY2-=pY1;  pPX-=pX1;  pPY-=pY1;  float ccw=(pPX * pY2) - (pPY * pX2);  if (ccw == 0.0f) {    ccw=(pPX * pX2) + (pPY * pY2);    if (ccw > 0.0f) {      pPX-=pX2;      pPY-=pY2;      ccw=(pPX * pX2) + (pPY * pY2);      if (ccw < 0.0f) {        ccw=0.0f;      }    }  }  return (ccw < 0.0f) ? -1 : ((ccw > 0.0f) ? 1 : 0);}  }
class C{  public void processingInstruction(String target,String data) throws org.xml.sax.SAXException {  if (m_inEntityRef)   return;  flushPending();  if (target.equals(Result.PI_DISABLE_OUTPUT_ESCAPING)) {    startNonEscaping();  } else   if (target.equals(Result.PI_ENABLE_OUTPUT_ESCAPING)) {    endNonEscaping();  } else {    try {      if (m_elemContext.m_startTagOpen) {        closeStartTag();        m_elemContext.m_startTagOpen=false;      } else       if (m_needToCallStartDocument)       startDocumentInternal();      if (shouldIndent())       indent();      final java.io.Writer writer=m_writer;      writer.write("<?");      writer.write(target);      if (data.length() > 0 && !Character.isSpaceChar(data.charAt(0)))       writer.write(' ');      int indexOfQLT=data.indexOf("?>");      if (indexOfQLT >= 0) {        if (indexOfQLT > 0) {          writer.write(data.substring(0,indexOfQLT));        }        writer.write("? >");        if ((indexOfQLT + 2) < data.length()) {          writer.write(data.substring(indexOfQLT + 2));        }      } else {        writer.write(data);      }      writer.write('?');      writer.write('>');      m_startNewLine=true;    } catch (    IOException e) {      throw new SAXException(e);    }  }  if (m_tracer != null)   super.fireEscapingEvent(target,data);}  }
class C{  @Interruptible public void createCodePatchMaps(IR ir){  int patchPoints=0;  for (Instruction s=ir.firstInstructionInCodeOrder(); s != null; s=s.nextInstructionInCodeOrder()) {    if (s.operator() == IG_PATCH_POINT) {      patchPoints++;    }  }  if (patchPoints != 0) {    patchMap=new int[patchPoints * 2];    MachineCodeOffsets mcOffsets=ir.MIRInfo.mcOffsets;    int idx=0;    for (Instruction s=ir.firstInstructionInCodeOrder(); s != null; s=s.nextInstructionInCodeOrder()) {      if (s.operator() == IG_PATCH_POINT) {        int patchPoint=mcOffsets.getMachineCodeOffset(s);        int newTarget=mcOffsets.getMachineCodeOffset(InlineGuard.getTarget(s).target);        if (VM.BuildForIA32) {          patchMap[idx++]=patchPoint - 1;          patchMap[idx++]=newTarget - patchPoint;        } else         if (VM.BuildForPowerPC) {          patchMap[idx++]=(patchPoint >> ArchConstants.getLogInstructionWidth()) - 1;          patchMap[idx++]=(newTarget - patchPoint + (1 << ArchConstants.getLogInstructionWidth()));        } else         if (VM.VerifyAssertions) {          VM._assert(VM.NOT_REACHED);        }      }    }  }}  }
class C{  @Override public boolean isRemoteHeld(){  return super.isRemoteHeld();}  }
class C{  public DecoderResult decode(boolean[][] image,Map<DecodeHintType,?> hints) throws ChecksumException, FormatException {  int dimension=image.length;  BitMatrix bits=new BitMatrix(dimension);  for (int i=0; i < dimension; i++) {    for (int j=0; j < dimension; j++) {      if (image[i][j]) {        bits.set(j,i);      }    }  }  return decode(bits,hints);}  }
class C{  public boolean hasBackTexture(){  return !mTextureFront.equals(mTextureBack);}  }
class C{  private QuotaLineItem subtract(QuotaLineItem val1,QuotaLineItem val2){  return operate(OpCode.SUB,val1,val2);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  return Boolean.valueOf(mf != null && mf.hasSpecificThumbnail());}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("Click.init");}  }
class C{  public TimezoneName(String name){  super(name);}  }
class C{  protected String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  static void put(final AnnotationWriter[] panns,final int off,final ByteVector out){  int size=1 + 2 * (panns.length - off);  for (int i=off; i < panns.length; ++i) {    size+=panns[i] == null ? 0 : panns[i].getSize();  }  out.putInt(size).putByte(panns.length - off);  for (int i=off; i < panns.length; ++i) {    AnnotationWriter aw=panns[i];    AnnotationWriter last=null;    int n=0;    while (aw != null) {      ++n;      aw.visitEnd();      aw.prev=last;      last=aw;      aw=aw.next;    }    out.putShort(n);    aw=last;    while (aw != null) {      out.putByteArray(aw.bv.data,0,aw.bv.length);      aw=aw.prev;    }  }}  }
class C{  public static AttributeSet unmodifiableView(AttributeSet attributeSet){  if (attributeSet == null) {    throw new NullPointerException();  }  return new UnmodifiableAttributeSet(attributeSet);}  }
class C{  public void remove(){  throw new UnsupportedOperationException("Remove operation not supported.");}  }
class C{  public void putShortArray(String key,short[] value){  map.put(key,value);}  }
class C{  @Override public List<Integer> emit(String streamId,List<Object> tuple){  List<Object> t=_callback.apply(tuple,_context.cloneContext().with(EmitContext.Type.STREAM_ID,streamId));  return _delegate.emit(streamId,t);}  }
class C{  public static <T>LazyQueueX<T> fromIterable(Collector<T,?,Queue<T>> collector,Iterable<T> it){  if (it instanceof LazyQueueX)   return (LazyQueueX<T>)it;  if (it instanceof Queue)   return new LazyQueueX<T>((Queue<T>)it,collector);  return new LazyQueueX<T>(Flux.fromIterable(it),collector);}  }
class C{  public Object object(){  if (null == m_obj)   setObject(new Boolean(m_val));  return m_obj;}  }
class C{  public static float clamp(float input,float min,float max){  return (input < min) ? min : (input > max) ? max : input;}  }
class C{  public static String formatDuration(long milliseconds){  return DURATION_TIME_FORMAT.format(milliseconds);}  }
class C{  public static void showToastShort(String message,int icon){  showToast(message,Toast.LENGTH_SHORT,icon,Gravity.FILL_HORIZONTAL | Gravity.TOP);}  }
class C{  protected LogicalNotExpressionImpl(){  super();}  }
class C{  @ValidationErrorPage(value="new") @Action(value="/changePropertyAddress-save",results={@Result(name=ACK,location="/changePropertyAddress-ack.jsp")}) public String save(){  LOGGER.debug("Entered into the newForm method, Index Number : " + indexNumber + ", Address : "+ address+ "BasicProperty: "+ basicProperty);  String addrStr1=address.getLandmark();  addrStr1=propertyTaxUtil.antisamyHackReplace(addrStr1);  address.setLandmark(addrStr1);  basicProperty.setAddress(address);  processAndStoreDocumentsWithReason(basicProperty,DOCS_ADDRESS_CHANGE_PROPERTY);  basicProperty=basicPropertyService.update(basicProperty);  getWorkflowBean().setActionName(WFLOW_ACTION_NAME_CREATE);  LOGGER.debug("Exit from save method");  return ACK;}  }
class C{  public LinearLocation clampIndex(LinearLocation index){  LinearLocation loc=(LinearLocation)index.clone();  loc.clamp(linearGeom);  return loc;}  }
class C{  @Override public Path call() throws Exception {  final Set<FileVisitOption> options;  if (followLinks) {    options=EnumSet.of(FileVisitOption.FOLLOW_LINKS);  } else {    options=EnumSet.noneOf(FileVisitOption.class);  }  logger.info(String.format("Starting scan of: \"%s\".",path));  try {    Files.walkFileTree(path,options,maxDepth,this);  } catch (  IOException e) {    logger.log(Level.SEVERE,String.format("Error while scanning path: \"%s\".",path),e);    throw e;  }  logger.info(String.format("Completed scan of: \"%s\".",path));  return path;}  }
class C{  public boolean hasAttribute(String attribute){  return (getElementHashEntry().containsKey(attribute));}  }
class C{  public void toggle(boolean animate){  toggle(animate,fadeIn,fadeOut);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println(progress + "%");  }  previousProgress=progress;}  }
class C{  public boolean atEOF() throws IOException {  int ch=this.currentReader.pbReader.read();  while (ch < 0) {    if (this.readers.empty()) {      return true;    }    this.currentReader.pbReader.close();    this.currentReader=(StackedReader)this.readers.pop();    ch=this.currentReader.pbReader.read();  }  this.currentReader.pbReader.unread(ch);  return false;}  }
class C{  private void closeStreams(Closeable... streams){  if (null != streams) {    for (    Closeable stream : streams) {      if (null != stream) {        try {          stream.close();        } catch (        IOException e) {          LOG.error("Error while closing stream" + stream);        }      }    }  }}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  private void newLine(MRequisitionLine rLine) throws Exception {  if (m_orderLine != null) {    m_orderLine.saveEx();  }  m_orderLine=null;  MProduct product=MProduct.get(getCtx(),rLine.getM_Product_ID());  int C_BPartner_ID=rLine.getC_BPartner_ID();  if (C_BPartner_ID != 0) {    ;  } else   if (rLine.getC_Charge_ID() != 0) {    MCharge charge=MCharge.get(getCtx(),rLine.getC_Charge_ID());    C_BPartner_ID=charge.getC_BPartner_ID();    if (C_BPartner_ID == 0) {      throw new AdempiereUserError("No Vendor for Charge " + charge.getName());    }  } else {    MProductPO[] ppos=MProductPO.getOfProduct(getCtx(),product.getM_Product_ID(),null);    for (int i=0; i < ppos.length; i++) {      if (ppos[i].isCurrentVendor() && ppos[i].getC_BPartner_ID() != 0) {        C_BPartner_ID=ppos[i].getC_BPartner_ID();        break;      }    }    if (C_BPartner_ID == 0 && ppos.length > 0) {      C_BPartner_ID=ppos[0].getC_BPartner_ID();    }    if (C_BPartner_ID == 0) {      throw new NoVendorForProductException(product.getName());    }  }  if (!isGenerateForVendor(C_BPartner_ID)) {    log.info("Skip for partner " + C_BPartner_ID);    return;  }  if (m_order == null || m_order.getC_BPartner_ID() != C_BPartner_ID || m_order.getDatePromised().compareTo(rLine.getDateRequired()) != 0) {    newOrder(rLine,C_BPartner_ID);  }  m_orderLine=new MOrderLine(m_order);  m_orderLine.setDatePromised(rLine.getDateRequired());  if (product != null) {    m_orderLine.setProduct(product);    m_orderLine.setM_AttributeSetInstance_ID(rLine.getM_AttributeSetInstance_ID());  } else {    m_orderLine.setC_Charge_ID(rLine.getC_Charge_ID());    m_orderLine.setPriceActual(rLine.getPriceActual());  }  m_orderLine.setAD_Org_ID(rLine.getAD_Org_ID());  m_M_Product_ID=rLine.getM_Product_ID();  m_M_AttributeSetInstance_ID=rLine.getM_AttributeSetInstance_ID();  m_orderLine.saveEx();}  }
class C{  public synchronized long fileCount(){  return fileCount;}  }
class C{  public void testDivideAndRemainderMathContextUP(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=45;  String b="134432345432345748766876876723342238476237823787879183470";  int bScale=70;  int precision=75;  RoundingMode rm=RoundingMode.UP;  MathContext mc=new MathContext(precision,rm);  String res="277923185514690367474770683";  int resScale=0;  String rem="1.3032693871288309587558885943391070087960319452465789990E-15";  int remScale=70;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result[]=aNumber.divideAndRemainder(bNumber,mc);  assertEquals("incorrect quotient value",res,result[0].toString());  assertEquals("incorrect quotient scale",resScale,result[0].scale());  assertEquals("incorrect remainder value",rem,result[1].toString());  assertEquals("incorrect remainder scale",remScale,result[1].scale());}  }
class C{  public static String attachment(int idx){  return "/attachment" + idx;}  }
class C{  public boolean isDateToday(long UTCTimeStamp){  long currentTimeLong=getUTCTimeLong();  if (currentTimeLong == Long.MIN_VALUE) {    currentTimeLong=TimeUtil.getSystemCurrentTimeLong();  }  return TimeUtil.isTheSameDate(UTCTimeStamp,currentTimeLong);}  }
class C{  private void validateRunOozieWorkflowRequest(RunOozieWorkflowRequest request){  Assert.hasText(request.getNamespace(),"A namespace must be specified.");  Assert.hasText(request.getEmrClusterDefinitionName(),"An EMR cluster definition name must be specified.");  Assert.hasText(request.getEmrClusterName(),"An EMR cluster name must be specified.");  Assert.hasText(request.getWorkflowLocation(),"An oozie workflow location must be specified.");  parameterHelper.validateParameters(request.getParameters());  request.setNamespace(request.getNamespace().trim());  request.setEmrClusterDefinitionName(request.getEmrClusterDefinitionName().trim());  request.setEmrClusterName(request.getEmrClusterName().trim());}  }
class C{  @Override protected List<String> createCommand(StepInstance stepInstance,String temporaryFileDirectory){  final String fastaFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,this.getFastaFileNameTemplate());  List<String> command=new ArrayList<String>();  command.add(this.getPerlCommand());  command.add("-I");  command.add(this.getPerlLibrary());  command.add(this.getScriptPath());  command.add("-l");  command.add(this.getModelDirectory());  command.addAll(this.getBinarySwitchesAsList());  command.add("-B");  command.add(this.getBlastPath());  command.add("-H");  command.add(this.getHmmerPath());  command.add("-i");  command.add(fastaFilePath);  command.add("-T");  command.add(getAbsolutePantherTempDirPath(temporaryFileDirectory));  LOGGER.debug("panther command is :" + command.toString());  return command;}  }
class C{  public td removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:09.862 -0500",hash_original_method="43884003345D483D0CB1C79601B3CBE6",hash_generated_method="F8236E4D227A3A5242329135E9E038B7") public boolean isDecimalSeparatorAlwaysShown(){  return dform.isDecimalSeparatorAlwaysShown();}  }
class C{  public void onLongPress(long time,float x,float y){  final StripLayoutTab clickedTab=getTabAtPosition(x);  if (clickedTab != null && clickedTab.checkCloseHitTest(x,y)) {    clickedTab.setClosePressed(false);    mRenderHost.requestRender();    showTabMenu(clickedTab);  } else {    resetResizeTimeout(false);    startReorderMode(time,x,x);  }}  }
class C{  final private List<E> current(){  return current;}  }
class C{  private static void delete(List<URI> ids){  performSuccessFail(NetworkUtils.getNetworks(ids),new DeactivateOperation(),DELETED_SUCCESS,DELETED_ERROR);  list();}  }
class C{  public void addPanels(List<AbstractPanel> panels,PanelType panelType){  validateNotNull(panels,"panels");  validateNotNull(panelType,"panelType");  addPanels(getTabbedFull(),panels);switch (panelType) {case SELECT:    addPanels(getTabbedSelect(),panels);  break;case STATUS:addPanels(getTabbedStatus(),panels);break;case WORK:addPanels(getTabbedWork(),panels);break;default :break;}if (layout == Layout.FULL) {getTabbedFull().setVisiblePanels(getTabbedFull().getVisiblePanels());}}  }
class C{  public void testNextGaussian(){  double f=ThreadLocalRandom.current().nextGaussian();  int i=0;  while (i < NCALLS && ThreadLocalRandom.current().nextGaussian() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  protected boolean isMod2RbfllSet(){  return (mod2 & MOD2_RBFLL_MASK) != 0;}  }
class C{  public boolean isDownloadable(){  return mDownloadable;}  }
class C{  public void addItem(final JComponent item,int col){  GridBagConstraints itemConstraints=new GridBagConstraints();  itemConstraints.gridx=col;  itemConstraints.gridy=myNextItemRow;  itemConstraints.insets=new Insets(10,10,0,10);  itemConstraints.weightx=1.0;  itemConstraints.anchor=GridBagConstraints.EAST;  itemConstraints.fill=GridBagConstraints.HORIZONTAL;  add(item,itemConstraints);}  }
class C{  private static void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));}  }
class C{  public static void logInfo(String message){  getDefault().getLog().log(createStatus(IStatus.INFO,0,message,null));}  }
class C{  public static String translate(String input,Decoder decoder,JoshuaConfiguration joshuaConfig){  final Sentence sentence=new Sentence(input,0,joshuaConfig);  return decoder.decode(sentence).toString();}  }
class C{  public PrefuseTableModel(Table table){  m_table=table;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static Revisions rollback(String urlhash){  return transact(urlhash,State.ARCHIVE,State.INVENTORY);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.GETTER_DECLARATION__DECLARED_TYPE_REF:    return getDeclaredTypeRef();case N4JSPackage.GETTER_DECLARATION__BOGUS_TYPE_REF:  return getBogusTypeRef();case N4JSPackage.GETTER_DECLARATION__DEFINED_GETTER:if (resolve) return getDefinedGetter();return basicGetDefinedGetter();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isSerialized(MetadataClass referenceClass,boolean isForMapKey){  return isValidSerializedType(referenceClass);}  }
class C{  public int find(String str,int fromIndex,boolean caseSensitive) throws BadLocationException {  int offset=-1;  int startOffset=-1;  int len=0;  int charIndex=0;  Element rootElement=getDefaultRootElement();  int elementIndex=rootElement.getElementIndex(fromIndex);  if (elementIndex < 0) {    return offset;  }  charIndex=fromIndex - rootElement.getElement(elementIndex).getStartOffset();  for (int i=elementIndex; i < rootElement.getElementCount(); i++) {    Element element=rootElement.getElement(i);    startOffset=element.getStartOffset();    if (element.getEndOffset() > getLength()) {      len=getLength() - startOffset;    } else {      len=element.getEndOffset() - startOffset;    }    String text=getText(startOffset,len);    if (!caseSensitive) {      text=text.toLowerCase();      str=str.toLowerCase();    }    charIndex=text.indexOf(str,charIndex);    if (charIndex != -1) {      offset=startOffset + charIndex;      break;    }    charIndex=0;  }  return offset;}  }
class C{  public void mouseEntered(MouseEvent evt){}  }
class C{  public int next(){  int result=_currentNode;  if (_nodeType >= DTM.NTYPES) {    if (_nodeType != getExpandedTypeID(_currentNode)) {      result=END;    }  } else   if (_nodeType != NULL) {    if (_nodeType != getNodeType(_currentNode)) {      result=END;    }  }  _currentNode=END;  return returnNode(result);}  }
class C{  public NexusBlock findBlockName(String blockName){  if (blockName.equalsIgnoreCase(ASSUMPTIONS_BLOCK.toString())) {    return ASSUMPTIONS_BLOCK;  } else   if (blockName.equalsIgnoreCase(SETS_BLOCK.toString())) {    return SETS_BLOCK;  } else   if (blockName.equalsIgnoreCase(PAUP_BLOCK.toString())) {    return PAUP_BLOCK;  } else   if (blockName.equalsIgnoreCase(MRBAYES_BLOCK.toString())) {    return MRBAYES_BLOCK;  } else {    return super.findBlockName(blockName);  }}  }
class C{  public void discardSSTables(long truncatedAt){  assert data.getCompacting().isEmpty() : data.getCompacting();  List<SSTableReader> truncatedSSTables=new ArrayList<>();  for (  SSTableReader sstable : getSSTables()) {    if (!sstable.newSince(truncatedAt))     truncatedSSTables.add(sstable);  }  if (!truncatedSSTables.isEmpty())   markObsolete(truncatedSSTables,OperationType.UNKNOWN);}  }
class C{  @Override public boolean onError(MediaPlayer mp,int what,int extra){  LogUtils.e(TAG,"Media player error: what=" + what + ", extra="+ extra);  if (mCallback != null) {    mCallback.onError("MediaPlayer error " + what + " ("+ extra+ ")");  }  return true;}  }
class C{  public void onTalk(String text){  if (User.isAdmin() || (User.squaredDistanceTo(x,y) < HEARING_DISTANCE_SQ)) {    if (text.startsWith("!me")) {      text=text.replace("!me",getTitle());      ClientSingletonRepository.getUserInterface().addEventLine(new HeaderLessEventLine(text,NotificationType.EMOTE));      return;    } else {      nonCreatureClientAddEventLine(text);    }    text=trimText(text);    ClientSingletonRepository.getUserInterface().addGameScreenText(getX() + getWidth(),getY(),text,NotificationType.NORMAL,true);  }}  }
class C{  public final void addValidationError(String error){  validationErrors.add(error);}  }
class C{  public Builder updateName(Name name){  this.name=name;  return this;}  }
class C{  public static Map<Initiator,List<StoragePort>> testAllocationAssignment(PortAllocationContext[] contexts,Map<URI,Map<URI,List<Initiator>>> hostToNetToInitiators,int maxPaths,int minPaths,int pathsPerInitiator,int initiatorsPerPort,String arrayType,Map<Initiator,List<StoragePort>> existingAssignments) throws Exception {  Map<URI,List<Initiator>> net2InitiatorsMap=makeNet2InitiatorsMap(hostToNetToInitiators);  Map<Initiator,List<StoragePort>> assignments=new HashMap<Initiator,List<StoragePort>>();  if (pathsPerInitiator > maxPaths) {    return assignments;  }  ExportPathParams pathParams=new ExportPathParams(maxPaths,minPaths,pathsPerInitiator);  pathParams.setMaxInitiatorsPerPort(initiatorsPerPort);  try {    for (int i=0; i < contexts.length; i++) {      contexts[i].reinitialize();    }    Map<URI,PortAllocationContext> net2ContextMap=new HashMap<URI,PortAllocationContext>();    for (int i=0; i < contexts.length; i++) {      PortAllocationContext context=contexts[i];      net2ContextMap.put(context._initiatorNetwork.getId(),context);    }    Map<URI,Set<StoragePort>> existingPortsMap=generateNetworkToStoragePortsMap(existingAssignments);    Map<URI,Set<Initiator>> existingInitiatorsMap=generateNetworkToInitiatorsMap(existingAssignments);    StoragePortsAssigner assigner=StoragePortsAssignerFactory.getAssigner(arrayType);    List<URI> networkOrder=new ArrayList<URI>();    Map<URI,Integer> net2PortsNeeded=assigner.getPortsNeededPerNetwork(net2InitiatorsMap,pathParams,existingPortsMap,existingInitiatorsMap,networkOrder);    StoragePortsAllocator allocator=new StoragePortsAllocator();    Map<URI,List<StoragePort>> netToPortsAllocated=new HashMap<URI,List<StoragePort>>();    PortAllocationContext previousContext=null;    for (    URI netURI : networkOrder) {      Integer portsNeeded=net2PortsNeeded.get(netURI);      if (portsNeeded == 0) {        System.out.println("No ports to be assigned for net: " + netURI);        continue;      }      PortAllocationContext context=net2ContextMap.get(netURI);      if (previousContext != null) {        context.copyPreviousNetworkContext(previousContext);      }      previousContext=context;      List<StoragePort> portsAllocated=allocator.allocatePortsForNetwork(portsNeeded,context,false,existingPortsMap.get(netURI),true);      netToPortsAllocated.put(netURI,portsAllocated);    }    for (    Map.Entry<URI,Map<URI,List<Initiator>>> entry : hostToNetToInitiators.entrySet()) {      System.out.println("Assign ports for host " + entry.getKey());      assigner.assignPortsToHost(assignments,entry.getValue(),netToPortsAllocated,pathParams,existingAssignments,entry.getKey(),null);    }    for (    Initiator initiator : assignments.keySet()) {      System.out.print(initiator.getHostName() + "-" + initiator.getInitiatorPort()+ " -> ");      List<StoragePort> ports=assignments.get(initiator);      if (ports == null) {        System.out.print("<ignored>");      } else {        for (        StoragePort port : assignments.get(initiator)) {          System.out.print(port.getPortName() + " ");        }      }      System.out.println(" ");    }    verifyAssignments(assignments,arrayType,maxPaths,pathsPerInitiator,initiatorsPerPort,net2InitiatorsMap,existingAssignments);  } catch (  PlacementException ex) {    System.out.println("PlacementException: " + ex.getMessage());  }catch (  Exception ex) {    System.out.println("ERROR: " + ex.getMessage());    throw ex;  }  return assignments;}  }
class C{  protected static boolean matchesSequence(ICharacterScanner scanner,int firstChar,char[] sequence){  int ch=firstChar;  if (ch == sequence[0]) {    for (int i=1; i < sequence.length; ++i) {      ch=scanner.read();      if (ch != sequence[i]) {        scannerUnread(scanner,i);        return false;      }    }    return true;  }  return false;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.majorTickPaint=SerialUtilities.readPaint(stream);  this.majorTickStroke=SerialUtilities.readStroke(stream);  this.minorTickPaint=SerialUtilities.readPaint(stream);  this.minorTickStroke=SerialUtilities.readStroke(stream);  this.tickLabelPaint=SerialUtilities.readPaint(stream);}  }
class C{  public GraphPattern(){}  }
class C{  protected Node firstChild(Node n){  if (n.getNodeType() == Node.ENTITY_REFERENCE_NODE && !expandEntityReferences) {    return null;  }  Node result=n.getFirstChild();  if (result == null) {    return null;  }switch (acceptNode(result)) {case NodeFilter.FILTER_ACCEPT:    return result;case NodeFilter.FILTER_SKIP:  Node t=firstChild(result);if (t != null) {  return t;}default :return nextSibling(result,n);}}  }
class C{  public Type1C(final PdfObjectReader current_pdf_file,final String substituteFont){  glyphs=new T1Glyphs(false);  init(current_pdf_file);  this.substituteFont=substituteFont;}  }
class C{  public static boolean isValidQSideCastle(String san){  return san.equals("O-O-O");}  }
class C{  protected boolean logMultipleExceptions(){  return true;}  }
class C{  public ErrorDetails validateAssessmentDetailsRequest(AssessmentRequest assessmentRequest){  ErrorDetails errorDetails=null;  if (!basicPropertyDAO.isAssessmentNoExist(assessmentRequest.getAssessmentNo())) {    errorDetails=new ErrorDetails();    errorDetails.setErrorCode(PropertyTaxConstants.THIRD_PARTY_ERR_CODE_ASSESSMENT_NO_NOT_FOUND);    errorDetails.setErrorMessage(PropertyTaxConstants.THIRD_PARTY_ERR_MSG_ASSESSMENT_NO_NOT_FOUND);  }  return errorDetails;}  }
class C{  private void zkInit() throws Exception {  form.appendChild(mainPanel);  mainPanel.appendChild(mainLayout);  mainPanel.setStyle("width: 100%; height: 100%; padding: 0; margin: 0");  mainLayout.setHeight("100%");  mainLayout.setWidth("99%");  parameterPanel.appendChild(parameterLayout);  labelBankAccount.setText(Msg.translate(Env.getCtx(),"C_BankAccount_ID"));  fieldBankAccount.addActionListener(this);  fieldBankAccount.setAttribute("zk_component_ID","Lookup_Criteria_C_BankAccount_ID");  fieldBankAccount.setAttribute("zk_component_prefix","Lookup_");  fieldBankAccount.setAttribute("IsDynamic","False");  fieldBankAccount.setAttribute("fieldName","fieldBankAccount");  fieldBankAccount.setWidth("200px");  labelBPartner.setText(Msg.translate(Env.getCtx(),"C_BPartner_ID"));  fieldBPartner.addValueChangeListener(this);  fieldBPartner.getComponent().setAttribute("zk_component_ID","Lookup_Criteria_C_BPartner_ID");  fieldBPartner.getComponent().setAttribute("zk_component_prefix","Lookup_");  fieldBPartner.getComponent().setAttribute("IsDynamic","False");  fieldBPartner.getComponent().setAttribute("fieldName","fieldBPartner");  fieldBPartner.getComponent().setWidth("200px");  bRefresh.addActionListener(this);  labelPayDate.setText(Msg.translate(Env.getCtx(),"PayDate"));  fieldPayDate.addValueChangeListener(this);  fieldPayDate.getComponent().setAttribute("zk_component_ID","Lookup_Criteria_PayDate");  fieldPayDate.getComponent().setAttribute("zk_component_prefix","Lookup_");  fieldPayDate.getComponent().setAttribute("IsDynamic","False");  fieldPayDate.getComponent().setAttribute("fieldName","fieldPayDate");  fieldPayDate.getComponent().setWidth("200px");  labelPaymentRule.setText(Msg.translate(Env.getCtx(),"PaymentRule"));  fieldPaymentRule.addActionListener(this);  fieldPaymentRule.setAttribute("zk_component_ID","Lookup_Criteria_PaymentRule");  fieldPaymentRule.setAttribute("zk_component_prefix","Lookup_");  fieldPaymentRule.setAttribute("IsDynamic","False");  fieldPaymentRule.setAttribute("fieldName","fieldPaymentRule");  fieldPaymentRule.setWidth("200px");  labelDtype.setText(Msg.translate(Env.getCtx(),"C_DocType_ID"));  fieldDtype.addActionListener(this);  fieldDtype.setAttribute("zk_component_ID","Lookup_Criteria_C_DocType_ID");  fieldDtype.setAttribute("zk_component_prefix","Lookup_");  fieldDtype.setAttribute("IsDynamic","False");  fieldDtype.setAttribute("fieldName","fieldDtype");  labelBankBalance.setText(Msg.translate(Env.getCtx(),"CurrentBalance"));  labelBalance.setText("0");  labelBalance.setAttribute("zk_component_ID","Lookup_Criteria_CurrentBalance");  labelBalance.setAttribute("zk_component_prefix","Lookup_");  labelBalance.setAttribute("IsDynamic","False");  labelBalance.setAttribute("fieldName","labelBalance");  onlyDue.setText(Msg.getMsg(Env.getCtx(),"OnlyDue"));  onlyDue.addActionListener(this);  onlyDue.setAttribute("zk_component_ID","Lookup_Criteria_OnlyDue");  onlyDue.setAttribute("fieldName","onlyDue");  onlyDue.setName("OnlyDue");  onlyDue.setTooltiptext(Msg.getMsg(Env.getCtx(),"OnlyDue"));  checkAutoQuery.setText(Msg.getMsg(Env.getCtx(),"AutoRefresh"));  checkAutoQuery.addActionListener(this);  checkAutoQuery.setAttribute("zk_component_ID","Lookup_Criteria_AutoRefresh");  checkAutoQuery.setName("AutoQuery");  checkAutoQuery.setSelected(MSysConfig.getValue(SYSCONFIG_INFO_AUTO_QUERY,"Y",Env.getAD_Client_ID(Env.getCtx())).equals("Y"));  dataStatus.setText(" ");  dataStatus.setPre(true);  dataStatus.setAttribute("zk_component_ID","Lookup_Criteria_DataStatus");  dataStatus.setAttribute("zk_component_prefix","Lookup_");  dataStatus.setAttribute("IsDynamic","False");  dataStatus.setAttribute("fieldName","dataStatus");  bGenerate.addActionListener(this);  bCancel.addActionListener(this);  North north=new North();  north.setStyle("border: none");  mainLayout.appendChild(north);  north.appendChild(parameterPanel);  Rows rows=parameterLayout.newRows();  Row row=rows.newRow();  row.appendChild(labelBankAccount.rightAlign());  row.appendChild(fieldBankAccount);  row.appendChild(labelBankBalance.rightAlign());  Panel balancePanel=new Panel();  balancePanel.appendChild(labelCurrency);  balancePanel.appendChild(labelBalance);  row.appendChild(balancePanel);  row.appendChild(new Space());  row=rows.newRow();  row.appendChild(labelBPartner.rightAlign());  row.appendChild(fieldBPartner.getComponent());  row.appendChild(new Space());  row.appendChild(new Space());  row.appendChild(new Space());  row=rows.newRow();  row.appendChild(labelDtype.rightAlign());  row.appendChild(fieldDtype);  row.appendChild(labelPaymentRule.rightAlign());  row.appendChild(fieldPaymentRule);  row.appendChild(checkAutoQuery);  row=rows.newRow();  row.appendChild(labelPayDate.rightAlign());  row.appendChild(fieldPayDate.getComponent());  row.appendChild(new Space());  row.appendChild(onlyDue);  row.appendChild(bRefresh);  commandPanel.addButton(bGenerate);  commandPanel.getButton(ConfirmPanel.A_OK).setVisible(false);  southPanel=new Panel();  southPanel.appendChild(dataStatus);  southPanel.appendChild(new Separator());  southPanel.appendChild(commandPanel);  South south=new South();  south.setStyle("border: none");  mainLayout.appendChild(south);  south.appendChild(southPanel);  Center center=new Center();  mainLayout.appendChild(center);  center.appendChild(miniTable);}  }
class C{  public static void writeUnsignedVarint(ByteBuffer buffer,int val){  while ((val & 0x7F) != val) {    buffer.put((byte)((val & 0x7F) | 0x80));    val>>>=7;  }  buffer.put((byte)(val & 0x7F));}  }
class C{  public void test_clear(){  Calendar calendar=Calendar.getInstance();  int count=6;  int[] fields=new int[count];  int[] defaults=new int[count];  fields[0]=Calendar.YEAR;  fields[1]=Calendar.MONTH;  fields[2]=Calendar.DATE;  fields[3]=Calendar.HOUR_OF_DAY;  fields[4]=Calendar.MINUTE;  fields[5]=Calendar.SECOND;  defaults[0]=1970;  defaults[1]=0;  defaults[2]=1;  defaults[3]=0;  defaults[4]=0;  defaults[5]=0;  calendar.set(2008,3,20,17,28,12);  for (int i=0; i < fields.length; i++) {    int index=fields[i];    calendar.clear(index);    if (5 == index) {      assertEquals("Field " + index + " Should equal to 20.",20,calendar.get(index));    } else     if (11 == index) {      assertEquals("Field " + index + " Should equal to 17.",17,calendar.get(index));    } else {      assertEquals("Field " + index + " Should equal to "+ defaults[i]+ ".",defaults[i],calendar.get(index));    }  }  calendar.set(2008,3,20,17,28,12);  calendar.clear();  for (int i=0; i < fields.length; i++) {    int index=fields[i];    assertEquals("Field " + index + " Should equal to "+ defaults[i]+ ".",defaults[i],calendar.get(index));  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static ClassLoader createNarClassLoader(final File narDirectory,final ClassLoader parentClassLoader) throws IOException, ClassNotFoundException {  logger.debug("Loading NAR file: " + narDirectory.getAbsolutePath());  final ClassLoader narClassLoader=new NarClassLoader(narDirectory,parentClassLoader);  logger.info("Loaded NAR file: " + narDirectory.getAbsolutePath() + " as class loader "+ narClassLoader);  return narClassLoader;}  }
class C{  @Override public Settings overrideSettings(final Settings settings){  settings.channelizer=HttpChannelizer.class.getName();  final String nameOfTest=name.getMethodName();switch (nameOfTest) {case "should200OnGETWithGremlinQueryStringArgumentWithIteratorResult":case "should200OnPOSTWithGremlinJsonEndcodedBodyWithIteratorResult":case "should200OnPOSTWithGremlinJsonEndcodedBodyWithIteratorResultAndAliases":case "should200OnGETWithGremlinQueryStringArgumentWithIteratorResultAndAliases":    settings.scriptEngines.get("gremlin-groovy").scripts=Collections.singletonList("scripts/generate-classic.groovy");  break;case "should200OnPOSTTransactionalGraph":deleteDirectory(new File("/tmp/neo4j"));settings.graphs.put("graph","conf/neo4j-empty.properties");break;case "should200OnPOSTTransactionalGraphInStrictMode":settings.strictTransactionManagement=true;deleteDirectory(new File("/tmp/neo4j"));settings.graphs.put("graph","conf/neo4j-empty.properties");break;case "should200OnPOSTWithGraphSON2d0AcceptHeaderDefaultResultToJson":settings.serializers.clear();final Settings.SerializerSettings serializerSettings=new Settings.SerializerSettings();serializerSettings.className=GraphSONMessageSerializerV2d0.class.getName();settings.serializers.add(serializerSettings);break;case "should401OnGETWithNoAuthorizationHeader":case "should401OnPOSTWithNoAuthorizationHeader":case "should401OnGETWithBadAuthorizationHeader":case "should401OnPOSTWithBadAuthorizationHeader":case "should401OnGETWithBadEncodedAuthorizationHeader":case "should401OnPOSTWithBadEncodedAuthorizationHeader":case "should401OnGETWithInvalidPasswordAuthorizationHeader":case "should401OnPOSTWithInvalidPasswordAuthorizationHeader":case "should200OnGETWithAuthorizationHeader":case "should200OnPOSTWithAuthorizationHeader":configureForAuthentication(settings);break;case "should401OnPOSTWithInvalidPasswordAuthorizationHeaderOld":case "should200OnPOSTWithAuthorizationHeaderOld":configureForAuthenticationOld(settings);break;}return settings;}  }
class C{  public void clear(){  dataList.clear();}  }
class C{  public final void signal(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignal(first);}  }
class C{  private Object readResolve(){  return (list instanceof RandomAccess ? new UnmodifiableRandomAccessList(list) : this);}  }
class C{  protected void sequence_S_Set(ISerializationContext context,S_Set semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.STATEMENT__KEY) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.STATEMENT__KEY));    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.STATEMENT__EXPR) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.STATEMENT__EXPR));    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.SASSIGNMENT__VALUE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.SASSIGNMENT__VALUE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getS_SetAccess().getKeySetKeyword_0_0(),semanticObject.getKey());  feeder.accept(grammarAccess.getS_SetAccess().getExprExpressionParserRuleCall_1_0(),semanticObject.getExpr());  feeder.accept(grammarAccess.getS_SetAccess().getValueExpressionParserRuleCall_3_0(),semanticObject.getValue());  feeder.finish();}  }
class C{  public void paintValue(java.awt.Graphics gfx,java.awt.Rectangle box){}  }
class C{  protected StringExpr_Impl(){  super();}  }
class C{  @Override public void onNewIntent(final Intent newIntent){  super.onNewIntent(newIntent);  final Intent queryIntent=getIntent();  final String queryAction=queryIntent.getAction();  if (Intent.ACTION_SEARCH.equals(queryAction)) {    doSearchQuery(queryIntent,"onNewIntent()");  } else {    mDeliveredByText.setText("onNewIntent(), but no ACTION_SEARCH intent");  }}  }
class C{  void run(boolean lastRound,boolean errorStatus){  printRoundInfo(lastRound);  if (!taskListener.isEmpty())   taskListener.started(new TaskEvent(TaskEvent.Kind.ANNOTATION_PROCESSING_ROUND));  try {    if (lastRound) {      filer.setLastRound(true);      Set<Element> emptyRootElements=Collections.emptySet();      RoundEnvironment renv=new JavacRoundEnvironment(true,errorStatus,emptyRootElements,JavacProcessingEnvironment.this);      discoveredProcs.iterator().runContributingProcs(renv);    } else {      discoverAndRunProcs(context,annotationsPresent,topLevelClasses,packageInfoFiles);    }  } catch (  Throwable t) {    deferredDiagnosticHandler.reportDeferredDiagnostics();    log.popDiagnosticHandler(deferredDiagnosticHandler);    throw t;  } finally {    if (!taskListener.isEmpty())     taskListener.finished(new TaskEvent(TaskEvent.Kind.ANNOTATION_PROCESSING_ROUND));  }}  }
class C{  public final void removeMessages(int what,Object object){  mExec.removeMessages(what,object);}  }
class C{  private boolean isCharacterQuoteCharacter(char c){  return c == quotechar;}  }
class C{  @Override public Object compute(@NotNull ArrayList<Map<String,Object>> rows) throws Exception {  if (rows.size() == 0) {    return 0.0;  }  double sum=0.0;  for (  Map<String,Object> row : rows) {    sum+=((Number)row.get(column)).doubleValue();  }  return sum / rows.size();}  }
class C{  public synchronized boolean removeEntry(Principal caller,AclEntry entry) throws NotOwnerException {  if (!isOwner(caller))   throw new NotOwnerException();  Hashtable<Principal,AclEntry> aclTable=findTable(entry);  Principal key=entry.getPrincipal();  AclEntry o=aclTable.remove(key);  return (o != null);}  }
class C{  public boolean isDerivedIdClass(){  return false;}  }
class C{  public JBBPOut Float(final float... value) throws IOException {  assertNotEnded();  assertArrayNotNull(value);  if (this.processCommands) {    for (    final float f : value) {      _writeInt(Float.floatToIntBits(f));    }  }  return this;}  }
class C{  public boolean isDefault(){  return REAL_TIME_SORT.isDefault() && DISPLAY_TOOLTIPS.isDefault();}  }
class C{  private static void addAbbreviation(final String primitive,final String abbreviation){  ClassUtils.abbreviationMap.put(primitive,abbreviation);  ClassUtils.reverseAbbreviationMap.put(abbreviation,primitive);}  }
class C{  public boolean isComposite(){  return false;}  }
class C{  public boolean attempt(ObjectReference old,ObjectReference val){  return SimulatedMemory.exchangeWord(this,old.value,val.value);}  }
