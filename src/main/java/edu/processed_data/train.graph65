class C{  public void prefetch(){}  }
class C{  protected Scope computeEnclosingScope(){  return ClassScope.make(getEnclosingClass());}  }
class C{  public NormalizingInlineUriHandler(InlineURIHandler next,String normalizedPrefix){  super(normalizedPrefix);  this.next=next;}  }
class C{  Object processQNAME(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  try {    QName qname=new QName(value,handler,true);    return qname;  } catch (  IllegalArgumentException ie) {    handleError(handler,XSLTErrorResources.INVALID_QNAME,new Object[]{name,value},ie);    return null;  }catch (  RuntimeException re) {    handleError(handler,XSLTErrorResources.INVALID_QNAME,new Object[]{name,value},re);    return null;  }}  }
class C{  public static void main(String[] args){  String[] a=StdIn.readAllStrings();  Selection.sort(a);  show(a);}  }
class C{  private List<Op> visitModifiers(ModifiersTree modifiersTree,Direction annotationsDirection,Optional<BreakTag> declarationAnnotationBreak){  return visitModifiers(modifiersTree,modifiersTree.getAnnotations(),annotationsDirection,declarationAnnotationBreak);}  }
class C{  boolean hasMatch(Set<String> resourceKeys,String s){  for (  String rk : resourceKeys) {    if (rk.endsWith(s))     return true;  }  return false;}  }
class C{  protected void addUShort(final int value){  addByte((byte)(value & 0xff));  addByte((byte)(value >> 8 & 0xff));}  }
class C{  public synchronized String generateId(){  StringBuilder sb=new StringBuilder(length);  sb.append(seed);  sb.append(sequence.getAndIncrement());  return sb.toString();}  }
class C{  public double predictSingle(FVec feat,boolean output_margin,int ntree_limit){  double pred=predictSingleRaw(feat,ntree_limit);  if (!output_margin) {    return obj.predTransform(pred);  }  return pred;}  }
class C{  public void actionPerformed(ActionEvent e){  if (cmbDocType.equals(e.getSource())) {    executeQuery();    return;  }  try {    validate();  } catch (  Exception ex) {    ADialog.error(m_WindowNo,this.panel,"Error",ex.getLocalizedMessage());  }}  }
class C{  private void initializeQuery(SingleResourceStatsAggregationTaskState currentState){  int resultLimit=Integer.getInteger(STATS_QUERY_RESULT_LIMIT,DEFAULT_QUERY_RESULT_LIMIT);  QueryTask queryTask=QueryTask.Builder.createDirectTask().setQuery(currentState.query).setResultLimit(resultLimit).build();  sendRequest(Operation.createPost(this,ServiceUriPaths.CORE_QUERY_TASKS).setBody(queryTask).setConnectionSharing(true).setCompletion(null));}  }
class C{  public AbstractPropertyChangeEvent(final E baseEntity,final Map<String,PropertyChange> changeSetValues){  super(baseEntity);  this.changeSet=changeSetValues;}  }
class C{  private boolean writeEv(final Packet p){  if (evidences.containsKey(p.getId()) == false) {    if (Cfg.DEBUG) {      Check.log(TAG + " Requested log not found");    }    return false;  }  final Evidence evidence=evidences.get(p.getId());  final boolean ret=evidence.writeEvidence(p.getData(),0,p.getDataLength());  return ret;}  }
class C{  private boolean isSlavoGermanic(String value){  return value.indexOf('W') > -1 || value.indexOf('K') > -1 || value.indexOf("CZ") > -1 || value.indexOf("WITZ") > -1;}  }
class C{  public static void append(final CCriteriumTreeNode parent,final CCriteriumTreeNode child){  parent.getChildren().add(child);  child.m_parent=parent;}  }
class C{  public ProtocolDecoderException(Throwable cause){  super(cause);}  }
class C{  public NegativeArraySizeException(java.lang.String s){}  }
class C{  public OPTICS(DistanceMetric dm,int minPts){  this(dm,minPts,DEFAULT_XI);}  }
class C{  public void testDecrementAndsum(){  LongAdder ai=new LongAdder();  ai.decrement();  assertEquals(-1,ai.sum());  ai.decrement();  assertEquals(-2,ai.sum());}  }
class C{  public static void main(String... args) throws Exception {  DeleteDbFiles.execute("~","test",true);  Class.forName("org.h2.Driver");  Connection conn=DriverManager.getConnection("jdbc:h2:~/test");  Statement stat=conn.createStatement();  stat.execute("create table test_data(" + "id int, user varchar, data varchar, primary key(id, user))");  stat.execute("create index on test_data(id, user)");  stat.execute("create view test as select id, data " + "from test_data where user = user()");  stat.execute("create trigger t_test instead of " + "insert, update, delete on test for each row " + "call \"" + RowAccessRights.class.getName() + "\"");  stat.execute("create user a password 'a'");  stat.execute("create user b password 'b'");  stat.execute("grant all on test to a");  stat.execute("grant all on test to b");  ResultSet rs;  Connection connA=DriverManager.getConnection("jdbc:h2:~/test","a","a");  Statement statA=connA.createStatement();  statA.execute("insert into test values(1, 'Hello'), (2, 'World')");  statA.execute("update test set data = 'Hello!' where id = 1");  statA.execute("delete from test where id = 2");  Connection connB=DriverManager.getConnection("jdbc:h2:~/test","b","b");  Statement statB=connB.createStatement();  statB.execute("insert into test values(1, 'Hallo'), (2, 'Welt')");  statB.execute("update test set data = 'Hallo!' where id = 1");  statB.execute("delete from test where id = 2");  rs=statA.executeQuery("select * from test");  while (rs.next()) {    System.out.println("a: " + rs.getInt(1) + "/"+ rs.getString(2));  }  rs=statB.executeQuery("select * from test");  while (rs.next()) {    System.out.println("b: " + rs.getInt(1) + "/"+ rs.getString(2));  }  connA.close();  connB.close();  rs=stat.executeQuery("select * from test_data");  while (rs.next()) {    System.out.println(rs.getInt(1) + "/" + rs.getString(2)+ "/"+ rs.getString(3));  }  conn.close();}  }
class C{  public synchronized UniformPair<EventBean> assertPairGetIRAndReset(){  ScopeTestHelper.assertTrue("Listener invocation not received but expected",isInvoked);  ScopeTestHelper.assertEquals("Mismatch in the number of invocations",1,newDataList.size());  ScopeTestHelper.assertEquals("Mismatch in the number of invocations",1,oldDataList.size());  if (lastNewData == null) {    ScopeTestHelper.fail("No new-data events received");  }  if (lastOldData == null) {    ScopeTestHelper.fail("No old-data events received");  }  ScopeTestHelper.assertEquals("Mismatch in the number of new-data events",1,lastNewData.length);  ScopeTestHelper.assertEquals("Mismatch in the number of old-data events",1,lastOldData.length);  EventBean lastNew=lastNewData[0];  EventBean lastOld=lastOldData[0];  reset();  return new UniformPair<EventBean>(lastNew,lastOld);}  }
class C{  public static boolean isPattern(String pattern){  return pattern.indexOf('*') != -1 || pattern.indexOf('?') != -1;}  }
class C{  public static List<Node> replaceNodes(List<Node> originalNodes,Graph graph){  List<Node> convertedNodes=new LinkedList<>();  for (  Node node : originalNodes) {    convertedNodes.add(graph.getNode(node.getName()));  }  return convertedNodes;}  }
class C{  public boolean isSp(){  return isStackPointer;}  }
class C{  public static void startProfileActivity(Context context,int uid){  if (context == null) {    return;  }  Bundle b=new Bundle();  b.putInt(Intents.EXTRA_UID,uid);  startActivity(context,b,ProfileActivity.class);}  }
class C{  public void removeAllInstances(){  if (m_trainingData != null) {    m_trainingData.delete();    try {      initialize();    } catch (    Exception e) {    }    ;  }}  }
class C{  public X509Certificate generate(X500Name subject,X500Name issuer,long validity,PublicKey publicKey,PrivateKey privateKey,SignatureType signatureType,BigInteger serialNumber,X509Extension extensions,Provider provider) throws CryptoException {  if (version == X509CertificateVersion.VERSION1) {    return generateVersion1(subject,issuer,validity,publicKey,privateKey,signatureType,serialNumber);  } else {    try {      return generateVersion3(subject,issuer,validity,publicKey,privateKey,signatureType,serialNumber,extensions,provider);    } catch (    CertIOException e) {      throw new CryptoException(e);    }  }}  }
class C{  public Generator(HttpServletCM thisServlet,HttpServletRequest httpRequest,RequestAnalyzer tempRequest,StringBuffer xmlAppend){  thisRequest=tempRequest;  xmlCode.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n").append("<!-- ").append(org.compiere.Adempiere.getSummaryAscii()).append(" -->\n").append("<webCM>\n").append("<build>").append(thisServlet.getBuildDate()).append("</build>\n");  generateSystemHeader(thisServlet);  generateProjectHeader();  generateThisContainer(thisServlet.getContainerElementCache(),thisServlet.getChatCache());  generateExternalTables(thisServlet.getDomainCache().getCtx(),httpRequest);  generateContainerTree(thisServlet.getContainerTreeCache());  MTemplate thisTemplate=thisRequest.getCM_Container().getTemplate();  if (thisTemplate.isNews())   generateNewsFeed(thisServlet.getDomainCache().getCtx());  if (thisTemplate.isUseAd())   generateAdCode(httpRequest,thisTemplate);  if (thisTemplate.getName().toUpperCase().indexOf("REQUEST") > -1)   generateRequest(httpRequest,thisServlet.getXMLCache(),thisServlet.getCtx());  generateCommunity(thisServlet.getXMLCache());  generateSessionEquiv(thisServlet,httpRequest,thisServlet.getCtx());  queryStringToXML(httpRequest);  xmlCode.append(xmlAppend);}  }
class C{  public BeanContextChildSupport(BeanContextChild bcc){  super();  beanContextChildPeer=(bcc != null) ? bcc : this;  pcSupport=new PropertyChangeSupport(beanContextChildPeer);  vcSupport=new VetoableChangeSupport(beanContextChildPeer);}  }
class C{  public static char[] toPrimitive(final Character[] array,final char valueForNull){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_CHAR_ARRAY;  }  final char[] result=new char[array.length];  for (int i=0; i < array.length; i++) {    Character b=array[i];    result[i]=b == null ? valueForNull : b.charValue();  }  return result;}  }
class C{  public static boolean reconstructCompressedSynapseStrengths(String filename,SynapseGroup sg){  Path p=Paths.get(filename);  try {    return reconstructCompressedSynapseStrengths(Files.readAllBytes(p),sg);  } catch (  IOException e1) {    e1.printStackTrace();    return false;  }}  }
class C{  public DataLengthException(String message){  super(message);}  }
class C{  public static Flag registerMaxASMatedFlag(final CFlags flags,final char singleLetter){  if (singleLetter != NO_SINGLE_LETTER) {    return flags.registerOptional(singleLetter,MAX_AS_MATED_FLAG,IntegerOrPercentage.class,CommonFlags.INT,AS_MATED_DESC).setCategory(SENSITIVITY_TUNING);  } else {    return flags.registerOptional(MAX_AS_MATED_FLAG,IntegerOrPercentage.class,CommonFlags.INT,AS_MATED_DESC).setCategory(SENSITIVITY_TUNING);  }}  }
class C{  public void addAll(double[] values){  super.addAll(values,0);}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  @Override public void reset(){  super.reset();  mIsInteractionLocked=false;  mTouchStatus=PLSceneElementTouchStatus.PLSceneElementTouchStatusOut;}  }
class C{  public void startScanNode(SiteNode node,User user){  Target target=new Target(node);  target.setRecurse(true);  this.startScan(target,user,null);}  }
class C{  private void connectRepository(final IProject project,final TFSRepository repository){  Check.notNull(project,"project");  Check.notNull(repository,"repository");  Set<IProject> projectsForRepository=repositoryToProjectMap.get(repository);  if (projectsForRepository == null) {    projectsForRepository=new HashSet<IProject>();    repositoryToProjectMap.put(repository,projectsForRepository);  }  if (projectsForRepository.contains(project)) {    log.error(MessageFormat.format("Repository {0} already contains reference for project {1}",repository.getName(),project.getName()));  } else {    projectsForRepository.add(project);  }  final TFSServer server=serverManager.getOrCreateServer(repository.getVersionControlClient().getConnection());  Set<IProject> projectsForServer=serverToProjectMap.get(server);  if (projectsForServer == null) {    projectsForServer=new HashSet<IProject>();    serverToProjectMap.put(server,projectsForServer);  }  if (projectsForServer.contains(project)) {    log.error(MessageFormat.format("Server {0} already contains reference for project {1}",server.getName(),project.getName()));  } else {    projectsForServer.add(project);  }}  }
class C{  public void test3360(){  String str="!\"#%&'(),-./";  Pattern p=Pattern.compile("\\s");  Matcher m=p.matcher(str);  assertFalse(m.find());}  }
class C{  public static double cdf(double x,double m,double sd){  return cdf(x,m,sd,false);}  }
class C{  public long nextLong(long n){  if (n <= 0)   throw new IllegalArgumentException("n must be positive, got: " + n);  long bits, val;  do {    int y;    int z;    if (mti >= N) {      int kk;      final int[] mt=this.mt;      final int[] mag01=this.mag01;      for (kk=0; kk < N - M; kk++) {        y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);        mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];      }      for (; kk < N - 1; kk++) {        y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);        mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];      }      y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);      mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];      mti=0;    }    y=mt[mti++];    y^=y >>> 11;    y^=(y << 7) & TEMPERING_MASK_B;    y^=(y << 15) & TEMPERING_MASK_C;    y^=(y >>> 18);    if (mti >= N) {      int kk;      final int[] mt=this.mt;      final int[] mag01=this.mag01;      for (kk=0; kk < N - M; kk++) {        z=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);        mt[kk]=mt[kk + M] ^ (z >>> 1) ^ mag01[z & 0x1];      }      for (; kk < N - 1; kk++) {        z=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);        mt[kk]=mt[kk + (M - N)] ^ (z >>> 1) ^ mag01[z & 0x1];      }      z=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);      mt[N - 1]=mt[M - 1] ^ (z >>> 1) ^ mag01[z & 0x1];      mti=0;    }    z=mt[mti++];    z^=z >>> 11;    z^=(z << 7) & TEMPERING_MASK_B;    z^=(z << 15) & TEMPERING_MASK_C;    z^=(z >>> 18);    bits=(((((long)y) << 32) + (long)z) >>> 1);    val=bits % n;  } while (bits - val + (n - 1) < 0);  return val;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void doGenerate(IProgressMonitor monitor) throws IOException {  if (!targetFolder.getLocation().toFile().exists()) {    targetFolder.getLocation().toFile().mkdirs();  }  monitor.subTask("Loading...");  com.github.lbroudoux.dsl.eip.gen.camel.main.GenerateXmlRoutes gen0=new com.github.lbroudoux.dsl.eip.gen.camel.main.GenerateXmlRoutes(modelURI,targetFolder.getLocation().toFile(),arguments);  monitor.worked(1);  String generationID=org.eclipse.acceleo.engine.utils.AcceleoLaunchingUtil.computeUIProjectID("com.github.lbroudoux.dsl.eip.gen.camel","com.github.lbroudoux.dsl.eip.gen.camel.main.GenerateJavaRoutes",modelURI.toString(),targetFolder.getFullPath().toString(),new ArrayList<String>());  gen0.setGenerationID(generationID);  gen0.doGenerate(BasicMonitor.toMonitor(monitor));}  }
class C{  public static EvalNodeAnalysisResult recursiveAnalyzeChildNodes(EvalFactoryNode currentNode){  EvalNodeAnalysisResult evalNodeAnalysisResult=new EvalNodeAnalysisResult();  recursiveAnalyzeChildNodes(evalNodeAnalysisResult,currentNode);  return evalNodeAnalysisResult;}  }
class C{  private void updateStyleAndText(){  updateStyleImp(getStyles());  mText=WXAttr.getValue(getAttrs());}  }
class C{  protected ReplicatorPlugin loadAndConfigurePlugin(String prefix,String name) throws ReplicatorException {  String pluginPrefix=prefix + "." + name.trim();  String rawClassName=properties.getString(pluginPrefix);  if (rawClassName == null)   throw new ReplicatorException("Plugin class name property is missing or null:  key=" + pluginPrefix);  String pluginClassName=rawClassName.trim();  if (logger.isDebugEnabled())   logger.debug("Loading plugin: key=" + pluginPrefix + " class name="+ pluginClassName);  TungstenProperties pluginProperties=properties.subset(pluginPrefix + ".",true);  if (logger.isDebugEnabled())   logger.debug("Plugin properties: " + pluginProperties.toString());  ReplicatorPlugin plugin;  try {    plugin=PluginLoader.load(pluginClassName);    if (plugin instanceof FilterManualProperties)     ((FilterManualProperties)plugin).setConfigPrefix(pluginPrefix); else     pluginProperties.applyProperties(plugin);  } catch (  PluginException e) {    throw new ReplicatorException("Unable to load plugin class: key=" + pluginPrefix + " class name="+ pluginClassName,e);  }catch (  PropertyException e) {    throw new ReplicatorException("Unable to configure plugin properties: key=" + pluginPrefix + " class name="+ pluginClassName+ " : "+ e.getMessage(),e);  }  return plugin;}  }
class C{  private static String encode(String stringToEncode){  String encoded;  try {    encoded=URLEncoder.encode(stringToEncode,UTF_8);  } catch (  UnsupportedEncodingException e) {    throw new MCApiRuntimeException(e);  }  encoded=encoded.replace("*","%2A");  encoded=encoded.replace("~","%7E");  encoded=encoded.replace("+","%20");  return encoded;}  }
class C{  public T caseAnnotableN4MemberDeclaration(AnnotableN4MemberDeclaration object){  return null;}  }
class C{  public double score(int position){  return results.get(position).getDistance();}  }
class C{  public Artifact load(ArtifactName artifactName,File path) throws IOException {  Preconditions.checkArgument(path.exists(),"Path must exist: " + path);  Preconditions.checkArgument(path.isFile() || path.isDirectory(),"Path must be a file or directory: " + path);  if (path.isFile()) {    return loadFromJar(artifactName,path);  }  return loadFromDirectory(artifactName,path);}  }
class C{  private void applyBackgroundColor(Color color,Control control,List exclusions){  if (exclusions.contains(control))   return;  control.setBackground(color);  if (control instanceof Composite) {    Control[] children=((Composite)control).getChildren();    for (int i=0; i < children.length; i++) {      applyBackgroundColor(color,children[i],exclusions);    }  }}  }
class C{  @Deprecated public static XMethod findXMethod(JavaClass[] classList,String methodName,String methodSig,JavaClassAndMethodChooser chooser){  for (  JavaClass cls : classList) {    JavaClassAndMethod m;    if ((m=findMethod(cls,methodName,methodSig)) != null && chooser.choose(m)) {      return XFactory.createXMethod(cls,m.getMethod());    }  }  return null;}  }
class C{  private static PositionCommands processPositionMenuCommand(String cmd){  if (cmd.equals("list") || cmd.equals("l")) {    return FinancePortfoliosClient.PositionCommands.QUERY_FEED;  } else   if (cmd.equals("show") || cmd.equals("s")) {    return FinancePortfoliosClient.PositionCommands.QUERY_ENTRY;  } else   if (cmd.equals("back") || cmd.equals("b")) {    return FinancePortfoliosClient.PositionCommands.BACK;  } else   if (cmd.equals("quit") || cmd.equals("q")) {    return FinancePortfoliosClient.PositionCommands.QUIT;  } else   if (cmd.equals("transactions") || cmd.equals("t")) {    return FinancePortfoliosClient.PositionCommands.TRANSACTIONS;  } else {    return FinancePortfoliosClient.PositionCommands.HELP;  }}  }
class C{  public ConverterException(FacesMessage message){  super(message.getSummary());  this.facesMessage=message;}  }
class C{  static void copyData(final ByteBuffer src,final ByteBuffer[] dst){  int pos=0;  for (int i=0; i < dst.length; i++) {    final int tsize=dst[i].remaining();    src.limit(pos + tsize);    src.position(pos);    dst[i].put(src);    pos+=tsize;  }}  }
class C{  private void addWindowsPath(int id,String path){  if (path == null || path.equals("")) {    return;  }  _sb.append(id);  _sb.append(" RCDATA BEGIN \"");  _sb.append(path.replaceAll("\\\\","\\\\\\\\").replaceAll("/","\\\\\\\\"));  _sb.append("\\0\" END\n");}  }
class C{  public Object clone(){  mxGeometry clone=(mxGeometry)super.clone();  clone.setX(getX());  clone.setY(getY());  clone.setWidth(getWidth());  clone.setHeight(getHeight());  clone.setRelative(isRelative());  List<mxPoint> pts=getPoints();  if (pts != null) {    clone.points=new ArrayList<mxPoint>(pts.size());    for (int i=0; i < pts.size(); i++) {      clone.points.add((mxPoint)pts.get(i).clone());    }  }  mxPoint tp=getTargetPoint();  if (tp != null) {    clone.setTargetPoint((mxPoint)tp.clone());  }  mxPoint sp=getSourcePoint();  if (sp != null) {    setSourcePoint((mxPoint)sp.clone());  }  mxPoint off=getOffset();  if (off != null) {    clone.setOffset((mxPoint)off.clone());  }  mxRectangle alt=getAlternateBounds();  if (alt != null) {    setAlternateBounds((mxRectangle)alt.clone());  }  return clone;}  }
class C{  private static boolean isCompatible(IAType t1,IAType t2){  return t1.equals(t2);}  }
class C{  public int indexAtLocation(int x,int y){  if (ui != null) {    return ((TabbedPaneUI)ui).tabForCoordinate(this,x,y);  }  return -1;}  }
class C{  public Iterator<IMultiPoint> range(IHypercube space){  if (root == null) {    return new ArrayList<IMultiPoint>().iterator();  }  KDSearchResults results=new KDSearchResults();  root.range(space,results);  return results;}  }
class C{  private void changeSnapshotName(DbClient dbClient,HDSApiClient client,BlockSnapshot snapshotObj){  try {    Volume source=dbClient.queryObject(Volume.class,snapshotObj.getParent());    TenantOrg tenant=dbClient.queryObject(TenantOrg.class,source.getTenant().getURI());    String tenantName=tenant.getLabel();    if (_nameGeneratorRef.get() == null) {      _nameGeneratorRef.compareAndSet(null,(NameGenerator)ControllerServiceImpl.getBean("defaultNameGenerator"));    }    String generatedName=_nameGeneratorRef.get().generate(tenantName,snapshotObj.getLabel(),snapshotObj.getId().toString(),'-',HDSConstants.MAX_VOLUME_NAME_LENGTH);    log.info(String.format("Attempting to add snapshot label %s to %s",generatedName,snapshotObj.getNativeId()));    StorageSystem system=dbClient.queryObject(StorageSystem.class,snapshotObj.getStorageController());    String systemObjectId=HDSUtils.getSystemObjectID(system);    LogicalUnit logicalUnit=client.getLogicalUnitInfo(systemObjectId,HDSUtils.getLogicalUnitObjectId(snapshotObj.getNativeId(),system));    if (null != logicalUnit && null != logicalUnit.getLdevList() && !logicalUnit.getLdevList().isEmpty()) {      Iterator<LDEV> ldevItr=logicalUnit.getLdevList().iterator();      if (ldevItr.hasNext()) {        LDEV ldev=ldevItr.next();        ObjectLabel objectLabel=client.addVolumeLabel(ldev.getObjectID(),generatedName);        snapshotObj.setDeviceLabel(objectLabel.getLabel());        dbClient.persistObject(snapshotObj);      }    } else {      log.info("No LDEV's found on volume: {}",snapshotObj.getNativeId());    }    log.info(String.format("snapshot label has been added to snapshot %s",snapshotObj.getNativeId()));  } catch (  Exception e) {    log.error("Encountered an error while trying to set the snapshot name",e);  }}  }
class C{  public String wordsToKeepTipText(){  return "The number of words (per class if there is a class attribute " + "assigned) to attempt to keep.";}  }
class C{  public table(int border){  setBorder(border);}  }
class C{  private void checkInit(JCTree tree,Env<AttrContext> env,VarSymbol v,boolean onlyWarning){  if ((env.info.enclVar == v || v.pos > tree.pos) && v.owner.kind == TYP && enclosingInitEnv(env) != null && v.owner == env.info.scope.owner.enclClass() && ((v.flags() & STATIC) != 0) == Resolve.isStatic(env) && (!env.tree.hasTag(ASSIGN) || TreeInfo.skipParens(((JCAssign)env.tree).lhs) != tree)) {    String suffix=(env.info.enclVar == v) ? "self.ref" : "forward.ref";    if (!onlyWarning || isStaticEnumField(v)) {      log.error(tree.pos(),"illegal." + suffix);    } else     if (useBeforeDeclarationWarning) {      log.warning(tree.pos(),suffix,v);    }  }  v.getConstValue();  checkEnumInitializer(tree,env,v);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public final void removeAll(Object from){  removeAll(from,false);}  }
class C{  @Override public String toString(){  return sObj.toString();}  }
class C{  private void scrollListItemsBy(int amount){  tryOffsetChildrenTopAndBottom(amount);  final int listBottom=getHeight() - mListPadding.bottom;  final int listTop=mListPadding.top;  final PLA_AbsListView.RecycleBin recycleBin=mRecycler;  if (amount < 0) {    View last=getLastChild();    int numChildren=getChildCount();    while (last.getBottom() < listBottom) {      final int lastVisiblePosition=mFirstPosition + numChildren - 1;      if (lastVisiblePosition < mItemCount - 1) {        addViewBelow(last,lastVisiblePosition);        last=getLastChild();        numChildren++;      } else {        break;      }    }    if (last.getBottom() < listBottom) {      tryOffsetChildrenTopAndBottom(listBottom - last.getBottom());    }    View first=getChildAt(0);    while (first.getBottom() < listTop) {      PLA_AbsListView.LayoutParams layoutParams=(LayoutParams)first.getLayoutParams();      if (recycleBin.shouldRecycleViewType(layoutParams.viewType)) {        detachViewFromParent(first);        recycleBin.addScrapView(first);      } else {        removeViewInLayout(first);      }      first=getChildAt(0);      mFirstPosition++;    }  } else {    View first=getChildAt(0);    while ((first.getTop() > listTop) && (mFirstPosition > 0)) {      first=addViewAbove(first,mFirstPosition);      mFirstPosition--;    }    if (first.getTop() > listTop) {      tryOffsetChildrenTopAndBottom(listTop - first.getTop());    }    int lastIndex=getChildCount() - 1;    View last=getChildAt(lastIndex);    while (last.getTop() > listBottom) {      PLA_AbsListView.LayoutParams layoutParams=(LayoutParams)last.getLayoutParams();      if (recycleBin.shouldRecycleViewType(layoutParams.viewType)) {        detachViewFromParent(last);        recycleBin.addScrapView(last);      } else {        removeViewInLayout(last);      }      last=getChildAt(--lastIndex);    }  }}  }
class C{  @Override public int hashCode(){  return this.name.hashCode();}  }
class C{  public boolean isAllowImplicitTransactions(){  return allowImplicitTransactions;}  }
class C{  public static boolean hasEntriesForId(Map<Integer,HashMap<Integer,Integer>> objectDUMap,Integer objectId,int targetId){  if (objectDUMap == null)   return false;  if (objectDUMap.get(objectId) == null)   return false;  for (  Integer defId : objectDUMap.get(objectId).values())   if (defId.intValue() == targetId)   return true;  return false;}  }
class C{  public void removePreInstantiateDelegate(Closure delegate){  getProxyBuilder().preInstantiateDelegates.remove(delegate);}  }
class C{  @Override public void onNewIntent(final Intent newIntent){  super.onNewIntent(newIntent);  final Intent queryIntent=getIntent();  final String queryAction=queryIntent.getAction();  if (Intent.ACTION_SEARCH.equals(queryAction)) {    doSearchQuery(queryIntent,"onNewIntent()");  } else {    mDeliveredByText.setText("onNewIntent(), but no ACTION_SEARCH intent");  }}  }
class C{  public Builder newBuilder(){  return new Builder(this);}  }
class C{  public static JsonObject createEventForBus(ConsumerRecord<String,String> record){  return new JsonObject().put(ConfigConstants.TOPIC_FIELD,record.topic()).put(ConfigConstants.KEY_FIELD,record.key()).put(ConfigConstants.VALUE_FIELD,record.value()).put(ConfigConstants.PARTITION_FIELD,record.partition());}  }
class C{  @Override public CloseableIteration<BindingSet,QueryEvaluationException> evaluate(final Collection<BindingSet> bindingset) throws QueryEvaluationException {  if (bindingset.isEmpty()) {    return new IteratorWrapper<BindingSet,QueryEvaluationException>(new HashSet<BindingSet>().iterator());  }  final List<BindingSet> crossProductBs=new ArrayList<>();  final Map<String,org.openrdf.model.Value> constantConstraints=new HashMap<>();  final Set<Range> hashJoinRanges=new HashSet<>();  final Range EMPTY_RANGE=new Range("",true,"~",false);  Range crossProductRange=EMPTY_RANGE;  String localityGroupOrder=varOrder.get(0);  int maxPrefixLen=Integer.MIN_VALUE;  int prefixLen=0;  int oldPrefixLen=0;  final Multimap<String,BindingSet> bindingSetHashMap=HashMultimap.create();  HashJoinType joinType=HashJoinType.CONSTANT_JOIN_VAR;  final Set<String> unAssuredVariables=Sets.difference(getTupleExpr().getBindingNames(),getTupleExpr().getAssuredBindingNames());  boolean useColumnScan=false;  boolean isCrossProd=false;  boolean containsConstantConstraints=false;  final BindingSet constants=getConstantConstraints();  containsConstantConstraints=constants.size() > 0;  try {    for (    final BindingSet bs : bindingset) {      if (bindingset.size() == 1 && bs.size() == 0) {        useColumnScan=true;      }      final QueryBindingSet commonVars=new QueryBindingSet();      for (      final String b : getTupleExpr().getAssuredBindingNames()) {        final Binding v=bs.getBinding(b);        if (v != null) {          commonVars.addBinding(v);        }      }      if (commonVars.size() == 0 && bs.size() != 0) {        crossProductBs.add(bs);        isCrossProd=true;      }      final BindingSetVariableOrder varOrder=getVarOrder(commonVars.getBindingNames(),constants.getBindingNames());      commonVars.addAll(constants);      if (commonVars.size() > varOrder.varOrderLen) {        final Map<String,Value> valMap=getConstantValueMap();        for (        final String s : new HashSet<String>(varOrder.unusedVars)) {          if (valMap.containsKey(s) && !constantConstraints.containsKey(s)) {            constantConstraints.put(s,valMap.get(s));          }          commonVars.removeBinding(s);        }      }      if (containsConstantConstraints && (useColumnScan || isCrossProd)) {        if (crossProductRange == EMPTY_RANGE) {          crossProductRange=getRange(varOrder.varOrder,commonVars);          localityGroupOrder=prefixToOrder(varOrder.varOrder);        }      } else       if (!useColumnScan && !isCrossProd) {        hashJoinRanges.add(getRange(varOrder.varOrder,commonVars));        prefixLen=varOrder.varOrderLen;        if (oldPrefixLen == 0) {          oldPrefixLen=prefixLen;        } else {          if (oldPrefixLen != prefixLen && joinType == HashJoinType.CONSTANT_JOIN_VAR) {            joinType=HashJoinType.VARIABLE_JOIN_VAR;          }          oldPrefixLen=prefixLen;        }        if (prefixLen > maxPrefixLen) {          maxPrefixLen=prefixLen;        }        final String key=getHashJoinKey(varOrder.varOrder,commonVars);        bindingSetHashMap.put(key,bs);      }      isCrossProd=false;    }    if ((useColumnScan || crossProductBs.size() > 0) && bindingSetHashMap.size() == 0) {      final Scanner scanner=accCon.createScanner(tablename,auths);      scanner.setRange(crossProductRange);      scanner.fetchColumnFamily(new Text(localityGroupOrder));      return new PCJKeyToCrossProductBindingSetIterator(scanner,crossProductBs,constantConstraints,unAssuredVariables,getTableVarMap());    } else     if ((useColumnScan || crossProductBs.size() > 0) && bindingSetHashMap.size() > 0) {      final List<CloseableIteration<BindingSet,QueryEvaluationException>> iteratorList=new ArrayList<>();      final Scanner scanner1=accCon.createScanner(tablename,auths);      scanner1.setRange(crossProductRange);      scanner1.fetchColumnFamily(new Text(localityGroupOrder));      iteratorList.add(new PCJKeyToCrossProductBindingSetIterator(scanner1,crossProductBs,constantConstraints,unAssuredVariables,getTableVarMap()));      final BatchScanner scanner2=accCon.createBatchScanner(tablename,auths,10);      scanner2.setRanges(hashJoinRanges);      final PCJKeyToJoinBindingSetIterator iterator=new PCJKeyToJoinBindingSetIterator(scanner2,getTableVarMap(),maxPrefixLen);      iteratorList.add(new BindingSetHashJoinIterator(bindingSetHashMap,iterator,unAssuredVariables,joinType));      return new IteratorCombiner(iteratorList);    } else {      final BatchScanner scanner=accCon.createBatchScanner(tablename,auths,10);      scanner.setRanges(hashJoinRanges);      final PCJKeyToJoinBindingSetIterator iterator=new PCJKeyToJoinBindingSetIterator(scanner,getTableVarMap(),maxPrefixLen);      return new BindingSetHashJoinIterator(bindingSetHashMap,iterator,unAssuredVariables,joinType);    }  } catch (  final Exception e) {    throw new QueryEvaluationException(e);  }}  }
class C{  public MPInstance(MProcess process,int Record_ID){  this(process.getCtx(),0,null);  setAD_Process_ID(process.getAD_Process_ID());  setRecord_ID(Record_ID);  setAD_User_ID(Env.getAD_User_ID(process.getCtx()));  if (!save())   throw new IllegalArgumentException("Cannot Save");  MProcessPara[] para=process.getParameters();  for (int i=0; i < para.length; i++) {    MPInstancePara pip=new MPInstancePara(this,para[i].getSeqNo());    pip.setParameterName(para[i].getColumnName());    pip.setInfo(para[i].getName());    pip.saveEx();  }}  }
class C{  public static <K,E>boolean isEmpty(Map<K,E> m){  return (m == null) || m.isEmpty();}  }
class C{  public String option1Name(){  return "Adapter";}  }
class C{  public JSONWriter endArray() throws JSONException {  return this.end('a',']');}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.EXECUTION__STATEMENT:    return statement != null;}return super.eIsSet(featureID);}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  public void markElementStart() throws IOException {  if (finished) {    throw new IOException("Stream has been finished. Can not add any more elements.");  }  count++;}  }
class C{  public Metadata.Builder clear(){  Metadata_Builder _defaults=new Metadata.Builder();  type=_defaults.type;  interfaceType=_defaults.interfaceType;  optionalBuilder=_defaults.optionalBuilder;  builderFactory=_defaults.builderFactory;  generatedBuilder=_defaults.generatedBuilder;  valueType=_defaults.valueType;  partialType=_defaults.partialType;  visibleNestedTypes.clear();  propertyEnum=_defaults.propertyEnum;  properties.clear();  standardMethodUnderrides.clear();  builderSerializable=_defaults.builderSerializable;  generatedBuilderAnnotations.clear();  valueTypeAnnotations.clear();  valueTypeVisibility=_defaults.valueTypeVisibility;  nestedClasses.clear();  _unsetProperties.clear();  _unsetProperties.addAll(_defaults._unsetProperties);  return (Metadata.Builder)this;}  }
class C{  @Override public CompileResult compile() throws CompilerException, MavenInvocationException {  Set<String> messages=new HashSet<>();  List<String> classpath=pathResolver.getClasspath();  InvocationRequest request=setupInvocationRequest(pathResolver.getPomFile(),classpath,messages);  return execute(request,messages,classpath);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.TRACE_NODE_EXECUTED__NODE:    setNode((ExecutionNode)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @Deprecated public static void assertNotEquals(long notExpected,long actual){  try {    Verify.assertNotEquals("long",notExpected,actual);  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  public ContentRule(String htmlDescription){  this.htmlDescription=htmlDescription;}  }
class C{  static URLClassLoader createClassLoader(final File libDir,ClassLoader parent){  if (null == parent) {    parent=Thread.currentThread().getContextClassLoader();  }  return replaceClassLoader(URLClassLoader.newInstance(new URL[0],parent),libDir,null);}  }
class C{  private Comparable<? super K> comparable(Object key) throws ClassCastException {  if (key == null)   throw new NullPointerException();  if (comparator != null)   return new ComparableUsingComparator<K>((K)key,comparator); else   return (Comparable<? super K>)key;}  }
class C{  public Object parseField(BinaryFile inputFile) throws EOFException, FormatException {  boolean haveElements=(numberOfElements != -1);  int numels=numberOfElements;switch (fieldType) {case VPF_COLUMN_TEXT:{      if (!haveElements) {        numels=inputFile.readInteger();      }      if (numels == 0) {        return "";      }      String s=inputFile.readFixedLengthString(numels);      if (haveElements) {        s=s.trim();      }      return s;    }case VPF_COLUMN_TEXTL1:{    if (!haveElements) {      numels=inputFile.readInteger();    }    if (numels == 0) {      return "";    }    byte[] str=inputFile.readBytes(numels,false);    try {      String s=new String(str,"ISO8859_1");      if (haveElements) {        s=s.trim();      }      return s;    } catch (    java.io.UnsupportedEncodingException uee) {      return str;    }  }case VPF_COLUMN_TEXTL2:case VPF_COLUMN_TEXTL3:{  if (!haveElements) {    numels=inputFile.readInteger();  }  if (numels == 0) {    return new byte[0];  }  return inputFile.readBytes(numels,false);}case VPF_COLUMN_FLOAT:{return new Float(inputFile.readFloat());}case VPF_COLUMN_DOUBLE:{return new Double(inputFile.readDouble());}case VPF_COLUMN_SHORT:{return new Short(inputFile.readShort());}case VPF_COLUMN_INT:{return new Integer(inputFile.readInteger());}case VPF_COLUMN_FLOAT_2COORD:{if (!haveElements) {numels=inputFile.readInteger();}return new CoordFloatString(numels,2,inputFile);}case VPF_COLUMN_DOUBLE_2COORD:{if (!haveElements) {numels=inputFile.readInteger();}return new CoordDoubleString(numels,2,inputFile);}case VPF_COLUMN_FLOAT_3COORD:{if (!haveElements) {numels=inputFile.readInteger();}return new CoordFloatString(numels,3,inputFile);}case VPF_COLUMN_DOUBLE_3COORD:{if (!haveElements) {numels=inputFile.readInteger();}return new CoordDoubleString(numels,3,inputFile);}case VPF_COLUMN_DATE:{inputFile.readBytes(20,false);return "[skipped date]";}case VPF_COLUMN_NULL:{return "[Null Field Type]";}case VPF_COLUMN_TRIPLET:{return new DcwCrossTileID(inputFile);}default :{throw new FormatException("Unknown field type: " + fieldType);}}}  }
class C{  @Override protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){  this.fontRendererObj.drawString("\u00a77" + LangUtils.localize("gui.empTower.name"),65,6,4210752);  this.fontRendererObj.drawString(LangUtils.localize("gui.empTower.radius").replaceAll("%p","        "),12,30,4210752);  this.textFieldBanJing.drawTextBox();  this.fontRendererObj.drawString(LangUtils.localize("gui.empTower.effect"),12,55,4210752);  String mode=LangUtils.localize("gui.empTower.effectDebilitate");  if (this.tileEntity.empMode == 1) {    mode=LangUtils.localize("gui.empTower.effectDisrupt");  } else   if (this.tileEntity.empMode == 2) {    mode=LangUtils.localize("gui.empTower.effectDeplete");  }  this.fontRendererObj.drawString(LangUtils.localize("gui.empTower.mode") + " " + mode,12,105,4210752);  String color="\u00a74";  String status=LangUtils.localize("gui.misc.idle");  if (tileEntity.getEnergy() < tileEntity.energyToUse) {    status=LangUtils.localize("gui.misc.nopower");  } else {    color="\u00a72";    status=LangUtils.localize("gui.empTower.ready");  }  this.fontRendererObj.drawString(color + LangUtils.localize("gui.misc.status") + " "+ status,12,120,4210752);  this.fontRendererObj.drawString(MekanismUtils.getEnergyDisplay(tileEntity.getEnergy()) + "/" + MekanismUtils.getEnergyDisplay(this.tileEntity.getMaxEnergy()),12,150,4210752);}  }
class C{  public void writeXML(String xml){  buf.put(AMF.TYPE_XML);  putString(xml);}  }
class C{  public void clearPassword(){  if (this.authority != null) {    UserInfo userInfo=authority.getUserInfo();    if (userInfo != null)     userInfo.clearPassword();  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.ENUMERATION_TYPE__ENUMERATOR:    getEnumerator().clear();  getEnumerator().addAll((Collection<? extends Enumerator>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void markDirtyFailed(){  assert Thread.holdsLock(EndpointEntry.this);  dirtyFailed=true;}  }
class C{  public void addTestFile(String fileName,ProtocolInteractor session) throws Exception {  InputStream is=this.getClass().getResourceAsStream(fileName);  if (is == null) {    throw new Exception("Test Resource '" + fileName + "' not found.");  }  addProtocolLines(fileName,is,session);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:26.344 -0500",hash_original_method="FA8827AA61AE68EAA1082E2A36657BA2",hash_generated_method="C7016AD65B82B5A023FDD69FD823ADA1") private void onIncomingUSSD(int ussdMode,String ussdMessage){  boolean isUssdError;  boolean isUssdRequest;  isUssdRequest=(ussdMode == CommandsInterface.USSD_MODE_REQUEST);  isUssdError=(ussdMode != CommandsInterface.USSD_MODE_NOTIFY && ussdMode != CommandsInterface.USSD_MODE_REQUEST);  GsmMmiCode found=null;  for (int i=0, s=mPendingMMIs.size(); i < s; i++) {    if (mPendingMMIs.get(i).isPendingUSSD()) {      found=mPendingMMIs.get(i);      break;    }  }  if (found != null) {    if (isUssdError) {      found.onUssdFinishedError();    } else {      found.onUssdFinished(ussdMessage,isUssdRequest);    }  } else {    if (!isUssdError && ussdMessage != null) {      GsmMmiCode mmi;      mmi=GsmMmiCode.newNetworkInitiatedUssd(ussdMessage,isUssdRequest,GSMPhone.this);      onNetworkInitiatedUssd(mmi);    }  }}  }
class C{  public InputMap(){}  }
class C{  private void prepareSnapData() throws Exception {  log.info("Preparing BlockSnapshots for RecoverPointBlockSnapshotMigration");  ProtectionSystem ps=new ProtectionSystem();  URI protectionSystemUri=URIUtil.createId(ProtectionSystem.class);  ps.setId(protectionSystemUri);  _dbClient.createObject(ps);  VirtualArray targetVarray=new VirtualArray();  URI targetVarrayUri=URIUtil.createId(VirtualArray.class);  targetVarray.setId(targetVarrayUri);  _dbClient.createObject(targetVarray);  Volume targetVolume=new Volume();  URI targetVolumeUri=URIUtil.createId(Volume.class);  targetVolume.setId(targetVolumeUri);  targetVolume.setLabel("targetVolume");  targetVolume.setDeviceLabel(DEVICE_LABEL);  targetVolume.setVirtualArray(targetVarrayUri);  _dbClient.createObject(targetVolume);  Volume parentVolume=new Volume();  URI volumeUri=URIUtil.createId(Volume.class);  parentVolume.setId(volumeUri);  parentVolume.setLabel("parentVolume");  StringSet rpTargets=new StringSet();  rpTargets.add(targetVolume.getId().toString());  parentVolume.setRpTargets(rpTargets);  _dbClient.createObject(parentVolume);  BlockSnapshot snapshot=new BlockSnapshot();  snapURI=URIUtil.createId(BlockSnapshot.class);  snapshot.setId(snapURI);  snapshot.setProtectionController(protectionSystemUri);  NamedURI parentVolNamedUri=new NamedURI(parentVolume.getId(),parentVolume.getLabel());  snapshot.setParent(parentVolNamedUri);  snapshot.setVirtualArray(targetVarrayUri);  _dbClient.createObject(snapshot);}  }
class C{  public void addObjects(PluggableObjectCollection other){  for (  Map.Entry<String,Map<String,Pair<Class,PluggableObjectEntry>>> entry : other.getPluggables().entrySet()) {    Map<String,Pair<Class,PluggableObjectEntry>> namespaceMap=pluggables.get(entry.getKey());    if (namespaceMap == null) {      namespaceMap=new HashMap<String,Pair<Class,PluggableObjectEntry>>();      pluggables.put(entry.getKey(),namespaceMap);    }    for (    String name : entry.getValue().keySet()) {      if (namespaceMap.containsKey(name)) {        throw new ConfigurationException("Duplicate object detected in namespace '" + entry.getKey() + "' by name '"+ name+ "'");      }    }    namespaceMap.putAll(entry.getValue());  }}  }
class C{  public DTMIterator cloneWithReset() throws CloneNotSupportedException {  DescendantIterator clone=(DescendantIterator)super.cloneWithReset();  clone.m_traverser=m_traverser;  clone.resetProximityPositions();  return clone;}  }
class C{  private static Typeface createFromAsset(final Context context,final String assetPath){  try {    return Typeface.createFromAsset(context.getAssets(),assetPath);  } catch (  Exception e) {    LogUtil.e("create typeface " + assetPath + " from asset failed",e);    return null;  }}  }
class C{  public MagnifyTransformer(Component component){  this(component,new MutableAffineTransformer());}  }
class C{  public boolean readBit(){  return readBits(1) == 1;}  }
class C{  public MapIterator<K,V> mapIterator(){  if (size == 0) {    return EmptyMapIterator.<K,V>emptyMapIterator();  }  return new HashMapIterator<K,V>(this);}  }
class C{  public double meanOrMode(Attribute att){  return meanOrMode(att.index());}  }
class C{  public N4JSAdapterFactory(){  if (modelPackage == null) {    modelPackage=N4JSPackage.eINSTANCE;  }}  }
class C{  public char nextClean() throws JSONException {  for (; ; ) {    char c=this.next();    if (c == 0 || c > ' ') {      return c;    }  }}  }
class C{  public Builder callLine(final String name,final int lineNumber){  this.callStack.add(String.format("%s at line %s",name,lineNumber));  return this;}  }
class C{  public Cursor query(SQLiteDatabase db,String[] projectionIn,String selection,String[] selectionArgs,String groupBy,String having,String sortOrder){  return query(db,projectionIn,selection,selectionArgs,groupBy,having,sortOrder,null,null);}  }
class C{  protected final void startRemoteNodes() throws Exception {  String name=getName().replaceFirst("test","");  if (rmtCfgs.isEmpty()) {    info("Loading remote configs properties from file: " + RMT_NODE_CFGS);    try (FileReader reader=new FileReader(U.resolveIgnitePath(RMT_NODE_CFGS))){      rmtCfgs.load(reader);    }   }  String cfg=rmtCfgs.getProperty(name,defaultConfig());  info("Config for remote nodes [name=" + name + ", cfg="+ cfg+ ", dflt="+ defaultConfig()+ "]");  for (int i=0; i < RMT_NODES_CNT; i++)   startGrid(getTestGridName(i),cfg);}  }
class C{  public static TranslationResult extendSign(final ITranslationEnvironment environment,final long offset,final String value,final OperandSize size,final OperandSize extendedSize) throws IllegalArgumentException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(value,"Error: Argument value can't be null");  Preconditions.checkNotNull(size,"Error: Argument size can't be null");  Preconditions.checkNotNull(extendedSize,"Error: Argument extendedSize can't be null");  Preconditions.checkArgument(size.getByteSize() < extendedSize.getByteSize(),"Error: Argument size must be smaller than argument extendedSize");  final ArrayList<ReilInstruction> instructions=new ArrayList<ReilInstruction>();  final String msbMask=String.valueOf(TranslationHelpers.getMsbMask(size));  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(extendedSize));  final String toggledMsb=environment.getNextVariableString();  final String extendedValue=environment.getNextVariableString();  final String truncatedValue=environment.getNextVariableString();  instructions.add(ReilHelpers.createXor(offset,size,value,size,msbMask,size,toggledMsb));  instructions.add(ReilHelpers.createSub(offset + 1,size,toggledMsb,size,msbMask,extendedSize,extendedValue));  instructions.add(ReilHelpers.createAnd(offset + 2,extendedSize,extendedValue,extendedSize,truncateMask,extendedSize,truncatedValue));  return new TranslationResult(truncatedValue,extendedSize,TranslationResultType.REGISTER,null,instructions,offset);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:28.616 -0400",hash_original_method="B3D7092279EA270B3046D7D53B6DAF5E",hash_generated_method="3C9C97CCEB81EDB78D936A0BBFF73B9E") public boolean removeParameter(final String name){  return this.local.removeParameter(name);}  }
class C{  public void createTransforms(){  transformDirectives=new LinkedList<FileStreamTransformDirective>();  transformDirectives.add(new FileStreamTransformDirective("<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>","<files-dir>",new int[]{0},STREAM_TYPE.INPUT));  transformDirectives.add(new FileStreamTransformDirective("<android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>","<files-dir>",new int[]{0},STREAM_TYPE.INPUT));  transformDirectives.add(new FileStreamTransformDirective("<android.app.ContextImpl: java.io.FileInputStream openFileInput(java.lang.String)>","<files-dir>",new int[]{0},STREAM_TYPE.INPUT));  transformDirectives.add(new FileStreamTransformDirective("<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>","<files-dir>",new int[]{0},STREAM_TYPE.OUTPUT));  transformDirectives.add(new FileStreamTransformDirective("<android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)>","<files-dir>",new int[]{0},STREAM_TYPE.OUTPUT));  transformDirectives.add(new FileStreamTransformDirective("<android.app.ContextImpl: java.io.FileOutputStream openFileOutput(java.lang.String,int)>","<files-dir>",new int[]{0},STREAM_TYPE.OUTPUT));  transformDirectives.add(new FileStreamTransformDirective("<java.io.FileInputStream: void <init>(java.io.File)>","",new int[]{0},STREAM_TYPE.INPUT));  transformDirectives.add(new FileStreamTransformDirective("<java.io.FileInputStream: void <init>(java.lang.String)>","",new int[]{0},STREAM_TYPE.INPUT));  transformDirectives.add(new FileStreamTransformDirective("<java.io.FileOutputStream: void <init>(java.lang.String)>","",new int[]{0},STREAM_TYPE.OUTPUT));  transformDirectives.add(new FileStreamTransformDirective("<java.io.FileOutputStream: void <init>(java.io.File)>","",new int[]{0},STREAM_TYPE.OUTPUT));  transformDirectives.add(new FileStreamTransformDirective("<java.io.FileOutputStream: void <init>(java.io.File,boolean)>","",new int[]{0},STREAM_TYPE.OUTPUT));  transformDirectives.add(new FileStreamTransformDirective("<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>","",new int[]{0},STREAM_TYPE.OUTPUT));}  }
class C{  public CViewFilterExpression(final FilterRelation relation,final long value){  super(relation,value);}  }
class C{  public GridLayout(final double hSpacing,final double vSpacing,final int numColumns){  this.hSpacing=hSpacing;  this.vSpacing=vSpacing;  this.numColumns=numColumns;  this.manualColumns=true;}  }
class C{  public static CCTextureCache sharedTextureCache(){synchronized (CCTextureCache.class) {    if (_sharedTextureCache == null) {      _sharedTextureCache=new CCTextureCache();    }    return _sharedTextureCache;  }}  }
class C{  public void process(Set<MultiKey<EventBean>> newEvents,Set<MultiKey<EventBean>> oldEvents,ExprEvaluatorContext exprEvaluatorContext){  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().qOutputProcessNonBufferedJoin(newEvents,oldEvents);  }  boolean isGenerateSynthetic=parent.getStatementResultService().isMakeSynthetic();  boolean isGenerateNatural=parent.getStatementResultService().isMakeNatural();  UniformPair<EventBean[]> newOldEvents=resultSetProcessor.processJoinResult(newEvents,oldEvents,isGenerateSynthetic);  if ((!isGenerateSynthetic) && (!isGenerateNatural)) {    if (AuditPath.isAuditEnabled) {      OutputStrategyUtil.indicateEarlyReturn(parent.getStatementContext(),newOldEvents);    }    if (InstrumentationHelper.ENABLED) {      InstrumentationHelper.get().aOutputProcessNonBufferedJoin();    }    return;  }  if (newOldEvents == null) {    if (InstrumentationHelper.ENABLED) {      InstrumentationHelper.get().aOutputProcessNonBufferedJoin();    }    return;  }  if (childView != null) {    postProcess(false,newOldEvents,childView);  }  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.get().aOutputProcessNonBufferedJoin();  }}  }
class C{  public final long mantissa(){  return this.mantissa;}  }
class C{  private static Matrix CalculateMeanValue(Matrix points){  double sumX=0;  double sumY=0;  double sumZ=0;  for (int i=0; i < points.getColumnDimension(); i++) {    sumX+=points.get(0,i);    sumY+=points.get(1,i);    sumZ+=points.get(2,i);  }  sumX=sumX / points.getColumnDimension();  sumY=sumY / points.getColumnDimension();  sumZ=sumZ / points.getColumnDimension();  Matrix mean=new Matrix(1,3);  mean.set(0,0,sumX);  mean.set(0,1,sumY);  mean.set(0,2,sumZ);  return mean;}  }
class C{  public final void testDisjunctiveWithContextParameter(){  assertNotNull(Validators.disjunctive(getContext(),Validators.notEmpty("foo")));}  }
class C{  public void unexpectedElement(String systemID,int lineNr,String parentElementName,String unexpectedElementName) throws XMLValidationException {  XMLUtil.errorUnexpectedElement(systemID,lineNr,parentElementName,unexpectedElementName);}  }
class C{  public int key(){  return _map._set[_index];}  }
class C{  public boolean isVisible(String btnName){  Button btn=getButton(btnName);  if (btn != null) {    return btn.isVisible();  } else {    try {      Messagebox.show("No " + btnName + " button available");    } catch (    Exception e) {      e.printStackTrace();    }    return false;  }}  }
class C{  public void exit(long terminationTimeout){synchronized (this) {    if (exiting) {      return;    } else {      exiting=true;    }  }  exitingLock.lock();  try {    exitingCondition.signalAll();  }  finally {    exitingLock.unlock();  }  timer.cancel();  checkForExpiredTimeoutHandlers();  processExecutorService.shutdown();  nativeExecutorService.shutdown();  commCore.shutdown();  try {    nativeExecutorService.awaitTermination(terminationTimeout,TimeUnit.MILLISECONDS);  } catch (  InterruptedException e) {  }  try {    processExecutorService.awaitTermination(terminationTimeout,TimeUnit.MILLISECONDS);  } catch (  InterruptedException e) {  }  free();}  }
class C{  @Provides @Config("dnsDefaultTtl") public static Duration provideDnsDefaultTtl(){  return Duration.standardSeconds(180);}  }
class C{  public GPSRecord(int vehID,long time,double x,double y,int status,int speed){  this.vehID=vehID;  this.time=time;  this.longitude=x;  this.latitide=y;  this.status=status;  this.speed=speed;}  }
class C{  public RandomMultiGraphNeighborsResponse(Iterable<NeighborInfo> neighborNodes){  this.neighborNodes=neighborNodes;}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true;  if (!(o instanceof TokenExtInfo))   return false;  TokenExtInfo that=(TokenExtInfo)o;  if (leftParenthesisCount != that.leftParenthesisCount)   return false;  if (rightParenthesisCount != that.rightParenthesisCount)   return false;  return nextAnd == that.nextAnd;}  }
class C{  public static void powInPlace(float[] a,float c){  for (int i=0; i < a.length; i++) {    a[i]=(float)Math.pow(a[i],c);  }}  }
class C{  public BigInteger toFlexiBigInt(){  if (len == 0 || isZero()) {    return new BigInteger(0,new byte[0]);  }  return new BigInteger(1,toByteArray());}  }
class C{  private boolean isThereInternetConnection(){  boolean isConnected;  ConnectivityManager connectivityManager=(ConnectivityManager)this.context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();  isConnected=(networkInfo != null && networkInfo.isConnectedOrConnecting());  return isConnected;}  }
class C{  public InputMethodHighlight(boolean selected,int state,int variation,Map<TextAttribute,?> style){  this.selected=selected;  if (!(state == RAW_TEXT || state == CONVERTED_TEXT)) {    throw new IllegalArgumentException("unknown input method highlight state");  }  this.state=state;  this.variation=variation;  this.style=style;}  }
class C{  protected int entryHashCode(HashEntry<K,V> entry){  return entry.hashCode;}  }
class C{  static public String[] toArray(ArrayList value){  String[] strArray=new String[value.size()];  for (int i=0; i < value.size(); i++) {    strArray[i]=(String)value.get(i);  }  return strArray;}  }
class C{  public boolean hasUser(PlatformUser usr){  for (  UsageLicense lic : getUsageLicenses()) {    if (usr.equals(lic.getUser())) {      return true;    }  }  return false;}  }
class C{  public void startAnimations(){  Collection<Animator> animators=this.values();  for (  Animator a : animators) {    a.start();  }}  }
class C{  public TimeFormat(){  this(new DecimalFormat("0"));}  }
class C{  public static <T extends GenericEntity>List<T> filterByDate(List<T> datedValues,java.sql.Timestamp moment,String fromDateName,String thruDateName,boolean allAreSame){  if (datedValues == null)   return null;  if (moment == null)   return datedValues;  if (fromDateName == null)   fromDateName="fromDate";  if (thruDateName == null)   thruDateName="thruDate";  List<T> result=new LinkedList<T>();  Iterator<T> iter=datedValues.iterator();  if (allAreSame) {    ModelField fromDateField=null;    ModelField thruDateField=null;    if (iter.hasNext()) {      T datedValue=iter.next();      fromDateField=datedValue.getModelEntity().getField(fromDateName);      if (fromDateField == null)       throw new IllegalArgumentException("\"" + fromDateName + "\" is not a field of "+ datedValue.getEntityName());      thruDateField=datedValue.getModelEntity().getField(thruDateName);      if (thruDateField == null)       throw new IllegalArgumentException("\"" + thruDateName + "\" is not a field of "+ datedValue.getEntityName());      java.sql.Timestamp fromDate=(java.sql.Timestamp)datedValue.dangerousGetNoCheckButFast(fromDateField);      java.sql.Timestamp thruDate=(java.sql.Timestamp)datedValue.dangerousGetNoCheckButFast(thruDateField);      if ((thruDate == null || thruDate.after(moment)) && (fromDate == null || fromDate.before(moment) || fromDate.equals(moment))) {        result.add(datedValue);      }    }    while (iter.hasNext()) {      T datedValue=iter.next();      java.sql.Timestamp fromDate=(java.sql.Timestamp)datedValue.dangerousGetNoCheckButFast(fromDateField);      java.sql.Timestamp thruDate=(java.sql.Timestamp)datedValue.dangerousGetNoCheckButFast(thruDateField);      if ((thruDate == null || thruDate.after(moment)) && (fromDate == null || fromDate.before(moment) || fromDate.equals(moment))) {        result.add(datedValue);      }    }  } else {    while (iter.hasNext()) {      T datedValue=iter.next();      java.sql.Timestamp fromDate=datedValue.getTimestamp(fromDateName);      java.sql.Timestamp thruDate=datedValue.getTimestamp(thruDateName);      if ((thruDate == null || thruDate.after(moment)) && (fromDate == null || fromDate.before(moment) || fromDate.equals(moment))) {        result.add(datedValue);      }    }  }  return result;}  }
class C{  @Override public boolean scrollTo(Selector obj,Selector targetObj,boolean isVertical) throws UiObjectNotFoundException {  UiScrollable scrollable=new UiScrollable(obj.toUiSelector());  if (isVertical)   scrollable.setAsVerticalList(); else   scrollable.setAsHorizontalList();  return scrollable.scrollIntoView(targetObj.toUiSelector());}  }
class C{  private void verifyIsDelegatingForContextWideFilter(final Level level,final boolean expectIsDelegating) throws Exception {  assertThat(expectIsDelegating,is(true));  writeContextWideFilterConfigFile(this.configFile,level);  this.appenderContext.reconfigure();  assertThat(this.logger.getLevel(),is(level));  assertThat(this.logger.isTraceEnabled(),is(false));  assertThat(this.logger.isDebugEnabled(),is(false));  assertThat(this.logger.isInfoEnabled(),is(false));  assertThat(this.logger.isWarnEnabled(),is(false));  assertThat(this.logger.isErrorEnabled(),is(false));  assertThat(this.logger.isFatalEnabled(),is(false));  assertThat(this.logger.isTraceEnabled(this.enabledMarker),is(true));  assertThat(this.logger.isDebugEnabled(this.enabledMarker),is(true));  assertThat(this.logger.isInfoEnabled(this.enabledMarker),is(true));  assertThat(this.logger.isWarnEnabled(this.enabledMarker),is(true));  assertThat(this.logger.isErrorEnabled(this.enabledMarker),is(true));  assertThat(this.logger.isFatalEnabled(this.enabledMarker),is(true));  assertThat(this.logger.isTraceEnabled(this.unusedMarker),is(false));  assertThat(this.logger.isDebugEnabled(this.unusedMarker),is(false));  assertThat(this.logger.isInfoEnabled(this.unusedMarker),is(false));  assertThat(this.logger.isWarnEnabled(this.unusedMarker),is(false));  assertThat(this.logger.isErrorEnabled(this.unusedMarker),is(false));  assertThat(this.logger.isFatalEnabled(this.unusedMarker),is(false));  assertThat(((FastLogger)this.logger).isDelegating(),is(expectIsDelegating));}  }
class C{  private void testProbability(double probability){  double sum=0.0;  for (int i=0; i < TestThresholds.SAMPLES; i++) {    BinaryVariable original=new BinaryVariable(100);    BinaryVariable mutated=original.copy();    BitFlip.evolve(mutated,probability);    sum+=original.hammingDistance(mutated);  }  Assert.assertEquals((sum / TestThresholds.SAMPLES) / 100,probability,TestThresholds.VARIATION_EPS);}  }
class C{  public Builder url(URL url){  if (url == null)   throw new IllegalArgumentException("url == null");  HttpUrl parsed=HttpUrl.get(url);  if (parsed == null)   throw new IllegalArgumentException("unexpected url: " + url);  return url(parsed);}  }
class C{  public Object refresh(){  fireTableRowsUpdated(0,getRowCount());  return null;}  }
class C{  @Override public void changed(){  if (changingDepth == 1) {    validate();    fireFigureChanged(getDrawingArea());  } else   if (changingDepth < 0) {    throw new InternalError("changed was called without a prior call to willChange. " + changingDepth);  }  changingDepth--;}  }
class C{  public boolean isTerminating(){  int rs=runStateOf(ctl.get());  return rs == SHUTDOWN || rs == STOP;}  }
class C{  public boolean isSetDeleteResponse(){  return this.deleteResponse != null;}  }
class C{  public Engine(String service){  this.serviceName=service;}  }
class C{  public CanvasGraphicsNode(){}  }
class C{  private static void trySetRenderArg(String name,Promise<?> promise){  try {    Object value=await(promise);    renderArgs.put(name,value);  } catch (  Exception e) {    Throwable cause=Common.unwrap(e);    String message=Common.getUserMessage(cause);    renderArgs.put(name + "_error",message);    Logger.warn(cause,"Could not set renderArg '%s'",name);  }}  }
class C{  private void updateBuddyNicknames(Play play){  if (play.getPlayers().size() > 0) {    for (    Player player : play.getPlayers()) {      if (!TextUtils.isEmpty(player.username) && !TextUtils.isEmpty(player.name)) {        ContentValues values=new ContentValues();        values.put(Buddies.PLAY_NICKNAME,player.name);        resolver.update(Buddies.CONTENT_URI,values,Buddies.BUDDY_NAME + "=?",new String[]{player.username});      }    }  }}  }
class C{  @Override public void close(){}  }
class C{  public boolean isRpSiteConnectedToVarray(URI storageSystemURI,URI protectionSystemURI,String siteId,VirtualArray virtualArray){  ProtectionSystem protectionSystem=dbClient.queryObject(ProtectionSystem.class,protectionSystemURI);  StringSet siteInitiators=protectionSystem.getSiteInitiators().get(siteId);  boolean connected=false;  for (  String wwn : siteInitiators) {    NetworkLite network=NetworkUtil.getEndpointNetworkLite(wwn,dbClient);    if (rpHelper.isNetworkConnectedToVarray(network,virtualArray)) {      connected=true;      break;    }  }  return (connected && rpHelper.rpInitiatorsInStorageConnectedNework(storageSystemURI,protectionSystemURI,siteId,virtualArray.getId()));}  }
class C{  private static byte[] createBlob(final byte[] clientChallenge,final byte[] targetInformation,final byte[] timestamp){  final byte[] blobSignature=new byte[]{(byte)0x01,(byte)0x01,(byte)0x00,(byte)0x00};  final byte[] reserved=new byte[]{(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00};  final byte[] unknown1=new byte[]{(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00};  final byte[] unknown2=new byte[]{(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00};  final byte[] blob=new byte[blobSignature.length + reserved.length + timestamp.length+ 8+ unknown1.length+ targetInformation.length+ unknown2.length];  int offset=0;  System.arraycopy(blobSignature,0,blob,offset,blobSignature.length);  offset+=blobSignature.length;  System.arraycopy(reserved,0,blob,offset,reserved.length);  offset+=reserved.length;  System.arraycopy(timestamp,0,blob,offset,timestamp.length);  offset+=timestamp.length;  System.arraycopy(clientChallenge,0,blob,offset,8);  offset+=8;  System.arraycopy(unknown1,0,blob,offset,unknown1.length);  offset+=unknown1.length;  System.arraycopy(targetInformation,0,blob,offset,targetInformation.length);  offset+=targetInformation.length;  System.arraycopy(unknown2,0,blob,offset,unknown2.length);  offset+=unknown2.length;  return blob;}  }
class C{  public static void debugWhatToShow(int whatToShow){  java.util.Vector v=new java.util.Vector();  if (0 != (whatToShow & DTMFilter.SHOW_ATTRIBUTE))   v.addElement("SHOW_ATTRIBUTE");  if (0 != (whatToShow & DTMFilter.SHOW_NAMESPACE))   v.addElement("SHOW_NAMESPACE");  if (0 != (whatToShow & DTMFilter.SHOW_CDATA_SECTION))   v.addElement("SHOW_CDATA_SECTION");  if (0 != (whatToShow & DTMFilter.SHOW_COMMENT))   v.addElement("SHOW_COMMENT");  if (0 != (whatToShow & DTMFilter.SHOW_DOCUMENT))   v.addElement("SHOW_DOCUMENT");  if (0 != (whatToShow & DTMFilter.SHOW_DOCUMENT_FRAGMENT))   v.addElement("SHOW_DOCUMENT_FRAGMENT");  if (0 != (whatToShow & DTMFilter.SHOW_DOCUMENT_TYPE))   v.addElement("SHOW_DOCUMENT_TYPE");  if (0 != (whatToShow & DTMFilter.SHOW_ELEMENT))   v.addElement("SHOW_ELEMENT");  if (0 != (whatToShow & DTMFilter.SHOW_ENTITY))   v.addElement("SHOW_ENTITY");  if (0 != (whatToShow & DTMFilter.SHOW_ENTITY_REFERENCE))   v.addElement("SHOW_ENTITY_REFERENCE");  if (0 != (whatToShow & DTMFilter.SHOW_NOTATION))   v.addElement("SHOW_NOTATION");  if (0 != (whatToShow & DTMFilter.SHOW_PROCESSING_INSTRUCTION))   v.addElement("SHOW_PROCESSING_INSTRUCTION");  if (0 != (whatToShow & DTMFilter.SHOW_TEXT))   v.addElement("SHOW_TEXT");  int n=v.size();  for (int i=0; i < n; i++) {    if (i > 0)     System.out.print(" | ");    System.out.print(v.elementAt(i));  }  if (0 == n)   System.out.print("empty whatToShow: " + whatToShow);  System.out.println();}  }
class C{  public static String timeToEMTFormat(long elapsedTimeMillis){  double elapsedTimeInSeconds=elapsedTimeMillis / 1000.0;  BigDecimal bigDecimal=new BigDecimal(elapsedTimeInSeconds);  bigDecimal=bigDecimal.setScale(3,BigDecimal.ROUND_HALF_UP);  return "[%emt " + bigDecimal.toString() + "]";}  }
class C{  private int countExpressions(final String typePrefix){  int count=0;  for (  final Expression w : expressions) {    if (w.getTypeString().startsWith(typePrefix)) {      ++count;    }  }  return count;}  }
class C{  final Segment<K,V> segmentFor(int hash){  return segments[(hash >>> segmentShift) & segmentMask];}  }
class C{  protected void register(String channelId){  if (!socketSessions.containsKey(channelId)) {    socketSessions.putIfAbsent(channelId,new ConcurrentLinkedQueue<Session>());  }}  }
class C{  public BalancedBinaryNode<K,V> successor(BalancedBinaryNode<K,V> t){  if (t == null)   return null;  if (t.right != null) {    BalancedBinaryNode<K,V> p=t.right;    while (p.left != null) {      p=p.left;    }    return p;  }  BalancedBinaryNode<K,V> p=t.parent;  BalancedBinaryNode<K,V> ch=t;  while (p != null && ch == p.right) {    ch=p;    p=p.parent;  }  return p;}  }
class C{  public static double roundDouble(double value,int afterDecimalPoint){  double mask=Math.pow(10.0,afterDecimalPoint);  return (Math.round(value * mask)) / mask;}  }
class C{  public byte[] toBytes() throws UnsupportedEncodingException {  StringBuilder result=new StringBuilder(256);  result.append(requestLine).append("\r\n");  for (int i=0; i < namesAndValues.size(); i+=2) {    result.append(namesAndValues.get(i)).append(": ").append(namesAndValues.get(i + 1)).append("\r\n");  }  result.append("\r\n");  return result.toString().getBytes("ISO-8859-1");}  }
class C{  SolrInputDocument processAdd(final String chain,final SolrInputDocument docIn) throws IOException {  SolrCore core=h.getCore();  UpdateRequestProcessorChain pc=core.getUpdateProcessingChain(chain);  assertNotNull("No Chain named: " + chain,pc);  SolrQueryResponse rsp=new SolrQueryResponse();  SolrQueryRequest req=new LocalSolrQueryRequest(core,new ModifiableSolrParams());  try {    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req,rsp));    AddUpdateCommand cmd=new AddUpdateCommand(req);    cmd.solrDoc=docIn;    UpdateRequestProcessor processor=pc.createProcessor(req,rsp);    processor.processAdd(cmd);    return cmd.solrDoc;  }  finally {    SolrRequestInfo.clearRequestInfo();    req.close();  }}  }
class C{  protected boolean checkValid(){  Collection<IManagedForm> invalidPages=getInvalidForms();  if (CollectionUtils.isNotEmpty(invalidPages)) {    StringBuilder stringBuilder=new StringBuilder("Save can not be performed as one or more pages contain invalid input: \n");    for (    IManagedForm managedForm : invalidPages) {      stringBuilder.append("\n" + managedForm.getForm().getText() + ": "+ managedForm.getForm().getMessage());    }    MessageDialog.openError(getSite().getShell(),"Invalid Input",stringBuilder.toString());    return false;  }  return true;}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.125 -0500",hash_original_method="D3E38B54874BE956E1980D322B5BE510",hash_generated_method="8E8A50822F89D18894E9EDB936F0539B") public int saveLayer(RectF bounds,Paint paint,int saveFlags){  return native_saveLayer(mNativeCanvas,bounds,paint != null ? paint.mNativePaint : 0,saveFlags);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"HomeItemDB\" ("+ "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "\"IS_READ\" TEXT,"+ "\"POSITION\" TEXT,"+ "\"STEP\" TEXT,"+ "\"CT\" TEXT,"+ "\"INPUT_TIME\" TEXT,"+ "\"CATID\" TEXT,"+ "\"THUMB\" TEXT,"+ "\"IDX\" TEXT,"+ "\"ACCOUNT_ID\" TEXT,"+ "\"ISEXT\" TEXT,"+ "\"TITLE\" TEXT,"+ "\"READ_NUM\" TEXT,"+ "\"LIKE_NUM\" TEXT,"+ "\"SHARE_NUM\" TEXT,"+ "\"WURL\" TEXT,"+ "\"VIDEO\" TEXT,"+ "\"IMAGE_TYPE\" TEXT,"+ "\"OP_MARK\" TEXT,"+ "\"OP_MARK_IURL\" TEXT,"+ "\"OP_MARK_ICOLOR\" TEXT,"+ "\"ACCOUNT_NAME\" TEXT,"+ "\"URL\" TEXT,"+ "\"IS_CACHE\" TEXT,"+ "\"ARTICLE_TYPE\" TEXT,"+ "\"BEHOT_TIME\" TEXT,"+ "\"EXTRA_IMG\" TEXT);");  db.execSQL("CREATE INDEX " + constraint + "IDX_HomeItemDB_ID ON HomeItemDB"+ " (\"ID\");");}  }
class C{  public ThreadRegisterValues(final ThreadRegisters values){  m_tid=values.getTid();  for (  final RegisterValue value : values.getRegisters()) {    m_values.add(new Register(value));  }}  }
class C{  @SuppressWarnings("deprecation") public int makeFaces(final Region region,final Pattern pattern) throws MaxChangedBlocksException {  checkNotNull(region);  checkNotNull(pattern);  if (region instanceof CuboidRegion) {    return this.makeCuboidFaces(region,pattern);  } else {    return new RegionShape(region).generate(this,pattern,true);  }}  }
class C{  public static void enableBlending(){  glShadeModel(GL_SMOOTH);  glEnable(GL_BLEND);  glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);}  }
class C{  @Override public void addValue(double data,double weight){  if (weight == 0) {    return;  }  data=round(data);  int insertIndex=findNearestValue(data);  if ((m_NumValues <= insertIndex) || (m_Values[insertIndex] != data)) {    if (m_NumValues < m_Values.length) {      int left=m_NumValues - insertIndex;      System.arraycopy(m_Values,insertIndex,m_Values,insertIndex + 1,left);      System.arraycopy(m_Weights,insertIndex,m_Weights,insertIndex + 1,left);      m_Values[insertIndex]=data;      m_Weights[insertIndex]=weight;      m_NumValues++;    } else {      double[] newValues=new double[m_Values.length * 2];      double[] newWeights=new double[m_Values.length * 2];      int left=m_NumValues - insertIndex;      System.arraycopy(m_Values,0,newValues,0,insertIndex);      System.arraycopy(m_Weights,0,newWeights,0,insertIndex);      newValues[insertIndex]=data;      newWeights[insertIndex]=weight;      System.arraycopy(m_Values,insertIndex,newValues,insertIndex + 1,left);      System.arraycopy(m_Weights,insertIndex,newWeights,insertIndex + 1,left);      m_NumValues++;      m_Values=newValues;      m_Weights=newWeights;    }    if (weight != 1) {      m_AllWeightsOne=false;    }  } else {    m_Weights[insertIndex]+=weight;    m_AllWeightsOne=false;  }  m_SumOfWeights+=weight;  double range=m_Values[m_NumValues - 1] - m_Values[0];  if (range > 0) {    m_StandardDev=Math.max(range / Math.sqrt(m_SumOfWeights),m_Precision / (2 * 3));  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override protected boolean isInAlphabet(final byte octet){  return octet >= 0 && octet < decodeTable.length && decodeTable[octet] != -1;}  }
class C{  public void flush(){  writer.flush();}  }
class C{  public boolean isListDetails(){  Object oo=get_Value(COLUMNNAME_ListDetails);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void assertExceptions(final Exception occurred,final Exception expected){  assertEquals(occurred.getClass(),expected.getClass());  assertEquals(occurred.getMessage(),expected.getMessage());}  }
class C{  public static Set<IClientConfigKey> keys(){  return keys;}  }
class C{  public boolean isEmpty(){  return getNumActiveItems() == 0;}  }
class C{  public boolean isEnd(){  return mDialEnd;}  }
class C{  @Override protected void buildActions(final List<String> list){  Portal portal=entity;  if ((portal != null) && !portal.isHidden()) {    list.add(ActionType.USE.getRepresentation());    super.buildActions(list);    list.remove(ActionType.LOOK.getRepresentation());  }}  }
class C{  protected void addChild(ElementInfo child){  if (children == null) {    children=new ArrayList<ElementInfo>();  }  children.add(child);}  }
class C{  public LazyPBagX<T> with(int i,T element){  return stream(Fluxes.insertAt(Fluxes.deleteBetween(flux(),i,i + 1),i,element));}  }
class C{  public void presetWeights(Matrix W[],int L) throws Exception {  r=new Random(0);  this.W=new Matrix[W.length + 1];  for (int l=0; l < W.length; l++) {    this.W[l]=W[l];  }  int h=W[1].getRowDimension() - 1;  this.W[W.length]=MatrixUtils.randomn(h + 1,L,r).timesEquals(0.1);  makeMomentumMatrices();}  }
class C{  @Override public int size(){  return (this.to - this.from) / this.step + 1;}  }
class C{  public DirectSolrConnection(SolrCore c){  core=c;  parser=new SolrRequestParsers(c.getSolrConfig());}  }
class C{  protected void startNode(Node node) throws org.xml.sax.SAXException {  if (m_contentHandler instanceof NodeConsumer) {    ((NodeConsumer)m_contentHandler).setOriginatingNode(node);  }  if (node instanceof Locator) {    Locator loc=(Locator)node;    m_locator.setColumnNumber(loc.getColumnNumber());    m_locator.setLineNumber(loc.getLineNumber());    m_locator.setPublicId(loc.getPublicId());    m_locator.setSystemId(loc.getSystemId());  } else {    m_locator.setColumnNumber(0);    m_locator.setLineNumber(0);  }switch (node.getNodeType()) {case Node.COMMENT_NODE:{      String data=((Comment)node).getData();      if (m_contentHandler instanceof LexicalHandler) {        LexicalHandler lh=((LexicalHandler)this.m_contentHandler);        lh.comment(data.toCharArray(),0,data.length());      }    }  break;case Node.DOCUMENT_FRAGMENT_NODE:break;case Node.DOCUMENT_NODE:break;case Node.ELEMENT_NODE:NamedNodeMap atts=((Element)node).getAttributes();int nAttrs=atts.getLength();for (int i=0; i < nAttrs; i++) {Node attr=atts.item(i);String attrName=attr.getNodeName();if (attrName.equals("xmlns") || attrName.startsWith("xmlns:")) {int index;String prefix=(index=attrName.indexOf(":")) < 0 ? "" : attrName.substring(index + 1);this.m_contentHandler.startPrefixMapping(prefix,attr.getNodeValue());}}String ns=m_dh.getNamespaceOfNode(node);if (null == ns) ns="";this.m_contentHandler.startElement(ns,m_dh.getLocalNameOfNode(node),node.getNodeName(),new AttList(atts,m_dh));break;case Node.PROCESSING_INSTRUCTION_NODE:{ProcessingInstruction pi=(ProcessingInstruction)node;String name=pi.getNodeName();if (name.equals("xslt-next-is-raw")) {nextIsRaw=true;} else {this.m_contentHandler.processingInstruction(pi.getNodeName(),pi.getData());}}break;case Node.CDATA_SECTION_NODE:{boolean isLexH=(m_contentHandler instanceof LexicalHandler);LexicalHandler lh=isLexH ? ((LexicalHandler)this.m_contentHandler) : null;if (isLexH) {lh.startCDATA();}dispatachChars(node);{if (isLexH) {lh.endCDATA();}}}break;case Node.TEXT_NODE:{if (nextIsRaw) {nextIsRaw=false;m_contentHandler.processingInstruction(javax.xml.transform.Result.PI_DISABLE_OUTPUT_ESCAPING,"");dispatachChars(node);m_contentHandler.processingInstruction(javax.xml.transform.Result.PI_ENABLE_OUTPUT_ESCAPING,"");} else {dispatachChars(node);}}break;case Node.ENTITY_REFERENCE_NODE:{EntityReference eref=(EntityReference)node;if (m_contentHandler instanceof LexicalHandler) {((LexicalHandler)this.m_contentHandler).startEntity(eref.getNodeName());} else {}}break;default :}}  }
class C{  public void testAllMemoryArgumentOverride() throws Exception {  AbstractInstalledLocalContainerStub container=new AbstractInstalledLocalContainerStub(configuration);  container.getConfiguration().setProperty(GeneralPropertySet.JVMARGS,"-Xms256m -Xmx256m -XX:PermSize=256m -XX:MaxPermSize=256m");  container.startInternal();  JvmLauncher java=container.getJava();  String commandLine=java.getCommandLine();  checkString(commandLine,"-Xms256m");  checkString(commandLine,"-Xmx256m");  checkString(commandLine,"-XX:PermSize=256m");  checkString(commandLine,"-XX:MaxPermSize=256m");}  }
class C{  public boolean visitPredicate(ExpressionOwner owner,Expression pred){  return true;}  }
class C{  private static ArrayList<String> loadStringArray(Resources r,int resNum){  String[] labels=r.getStringArray(resNum);  ArrayList<String> list=new ArrayList<String>(Arrays.asList(labels));  return list;}  }
class C{  public void sortAll(){  Collections.sort(mSongs,mComparator);}  }
class C{  public String xmlToCsv(UpdateInventoryInput input){  return input.getSupplierId() + "," + input.getPartId()+ ","+ input.getName()+ ","+ input.getAmount();}  }
class C{  public ObjectVirtualPoolRestRep assignStoragePools(URI id,VirtualPoolPoolUpdateParam input){  return client.put(ObjectVirtualPoolRestRep.class,input,getIdUrl() + "/assign-matched-pools",id);}  }
class C{  public static void makeGzippedCSVFile(ByteBuffer onePinData,Path path) throws IOException {  try (OutputStream output=Files.newOutputStream(path);Writer writer=new OutputStreamWriter(new GZIPOutputStream(output),"UTF-8")){    while (onePinData.remaining() > 0) {      double value=onePinData.getDouble();      long ts=onePinData.getLong();      writer.write(String.valueOf(value));      writer.write(',');      writer.write(String.valueOf(ts));      writer.write('\n');    }  } }  }
class C{  @SuppressWarnings("unchecked") @Override public Object apply(String source,int lineNo,int columnNo,Object funcBody,Vector namesVec,Vector argsVec) throws BSFException {  if (namesVec.size() != argsVec.size())   throw new BSFException("number of params/names mismatch");  if (!(funcBody instanceof String))   throw new BSFException("apply: function body must be a string");  String[] names=new String[namesVec.size()];  namesVec.copyInto(names);  Object[] args=new String[argsVec.size()];  argsVec.copyInto(args);  try {    if (!installedApplyMethod) {      interpreter.eval(bsfApplyMethod);      installedApplyMethod=true;    }    bsh.This global=(bsh.This)interpreter.get("global");    return global.invokeMethod("_bsfApply",new Object[]{names,args,(String)funcBody});  } catch (  InterpreterError e) {    throw new BSFException("BeanShell interpreter internal error: " + e + sourceInfo(source,lineNo,columnNo));  }catch (  TargetError e2) {    throw new BSFException("The application script threw an exception: " + e2.getTarget() + sourceInfo(source,lineNo,columnNo));  }catch (  EvalError e3) {    throw new BSFException("BeanShell script error: " + e3 + sourceInfo(source,lineNo,columnNo));  }}  }
class C{  public Aviation(String sidc){  this(sidc,1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:46.017 -0500",hash_original_method="8BA43F60B4A234D737B83D6AB4280BA3",hash_generated_method="19140192E224D89843B9A8AF774F4C23") public BitwiseOutputStream(int startingLength){  mBuf=new byte[startingLength];  mEnd=startingLength << 3;  mPos=0;}  }
class C{  synchronized private int randInt(int min,int max){  return random.nextInt((max - min) + 1) + min;}  }
class C{  public EaseInOut(){}  }
class C{  @Override protected List<String> createCommand(StepInstance stepInstance,String temporaryFileDirectory){  final String fastaFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,this.getFastaFileNameTemplate());  final String outputFileName=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,getOutputFileNameTemplate());  FileContentChecker fileContentChecker=new FileContentChecker(new File(fastaFilePath));  if (!fileContentChecker.isFileEmpty()) {    final List<String> command=new ArrayList<String>();    command.add(this.pathToTmhmmBinary);    command.add(this.pathToTmhmmModel);    command.add(fastaFilePath);    command.addAll(this.getBinarySwitchesAsList());    command.add("-background");    command.add(this.binaryBackgroundSwitch);    return command;  }  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Creating empty raw result out put file...");  }  File file=new File(outputFileName);  try {    file.createNewFile();  } catch (  IOException e) {    LOGGER.warn("Couldn't create empty raw result output file.",e);  }  return null;}  }
class C{  static void accept(final AnnotationVisitor av,final String name,final Object value){  if (av != null) {    if (value instanceof String[]) {      String[] typeconst=(String[])value;      av.visitEnum(name,typeconst[0],typeconst[1]);    } else     if (value instanceof AnnotationNode) {      AnnotationNode an=(AnnotationNode)value;      an.accept(av.visitAnnotation(name,an.desc));    } else     if (value instanceof List) {      AnnotationVisitor v=av.visitArray(name);      if (v != null) {        List<?> array=(List<?>)value;        for (int j=0; j < array.size(); ++j) {          accept(v,null,array.get(j));        }        v.visitEnd();      }    } else {      av.visit(name,value);    }  }}  }
class C{  public boolean fail(Throwable ex){  return this.completableFuture.completeExceptionally(ex);}  }
class C{  private void doCleanup(NotificationCompat.Builder noBuilder,Instant threshold){  show(noBuilder.setContentText("Cleaning up old files").setProgress(0,0,true));  preloadManager.deleteBefore(threshold);}  }
class C{  private boolean testStart(MWorkflow wf,PO document){  boolean retValue=false;  String logic=wf.getDocValueLogic();  logic=logic.substring(4);  String tableName=document.get_TableName();  String[] keyColumns=document.get_KeyColumns();  if (keyColumns.length != 1) {    log.severe("Tables with more then one key column not supported - " + tableName + " = "+ keyColumns.length);    return false;  }  String keyColumn=keyColumns[0];  StringBuffer sql=new StringBuffer("SELECT ").append(keyColumn).append(" FROM ").append(tableName).append(" WHERE AD_Client_ID=? AND ").append(keyColumn).append("=? AND ").append(logic).append(" AND NOT EXISTS (SELECT * FROM AD_WF_Process wfp ").append("WHERE wfp.AD_Table_ID=? AND wfp.Record_ID=").append(tableName).append(".").append(keyColumn).append(" AND wfp.AD_Workflow_ID=?").append(" AND SUBSTR(wfp.WFState,1,1)='O')");  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql.toString(),document.get_TrxName());    pstmt.setInt(1,wf.getAD_Client_ID());    pstmt.setInt(2,document.get_ID());    pstmt.setInt(3,document.get_Table_ID());    pstmt.setInt(4,wf.getAD_Workflow_ID());    rs=pstmt.executeQuery();    if (rs.next())     retValue=true;  } catch (  Exception e) {    log.log(Level.SEVERE,"Logic=" + logic + " - SQL="+ sql.toString(),e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return retValue;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapgetnameditemns04.class,args);}  }
class C{  public IntervalElement widen(IntervalElement towards){  assert towards.bitWidth == bitWidth;  IntervalElement result;  IntervalElement top=getTop(bitWidth);  if (region != towards.region)   return top;  long newStride=joinStride(towards);  if (towards.left < left) {    if (towards.right > right || rightOpen()) {      result=top;    } else {      result=new IntervalElement(region,top.getLeft() + (right - top.getLeft()) % newStride,right,newStride,bitWidth);    }  } else {    if (towards.right > right) {      if (leftOpen()) {        result=top;      } else {        result=new IntervalElement(region,left,top.getRight() - (top.getRight() - left) % newStride,newStride,bitWidth);      }    } else {      if (newStride > stride)       result=new IntervalElement(region,left,right,newStride,bitWidth); else       result=this;    }  }  return result;}  }
class C{  private static void printThreadInfo(ThreadInfo threadInfo,GridStringBuilder sb,Set<Long> deadlockedIdSet){  final long id=threadInfo.getThreadId();  if (deadlockedIdSet.contains(id))   sb.a("##### DEADLOCKED ");  sb.a("Thread [name=\"").a(threadInfo.getThreadName()).a("\", id=").a(threadInfo.getThreadId()).a(", state=").a(threadInfo.getThreadState()).a(", blockCnt=").a(threadInfo.getBlockedCount()).a(", waitCnt=").a(threadInfo.getWaitedCount()).a("]").a(NL);  LockInfo lockInfo=threadInfo.getLockInfo();  if (lockInfo != null) {    sb.a("    Lock [object=").a(lockInfo).a(", ownerName=").a(threadInfo.getLockOwnerName()).a(", ownerId=").a(threadInfo.getLockOwnerId()).a("]").a(NL);  }  MonitorInfo[] monitors=threadInfo.getLockedMonitors();  StackTraceElement[] elements=threadInfo.getStackTrace();  for (int i=0; i < elements.length; i++) {    StackTraceElement e=elements[i];    sb.a("        at ").a(e.toString());    for (    MonitorInfo monitor : monitors) {      if (monitor.getLockedStackDepth() == i)       sb.a(NL).a("        - locked ").a(monitor);    }    sb.a(NL);  }}  }
class C{  protected void parseAtRule(){  scanner.scanAtRule();  documentHandler.ignorableAtRule(scanner.getStringValue());  nextIgnoreSpaces();}  }
class C{  protected AbstractEntityReference(){}  }
class C{  protected CharType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public boolean visitPredicate(ExpressionOwner owner,Expression pred){  m_predDepth++;  if (m_predDepth == 1) {    if ((pred instanceof Variable) || (pred instanceof XNumber) || (pred instanceof Div)|| (pred instanceof Plus)|| (pred instanceof Minus)|| (pred instanceof Mod)|| (pred instanceof Quo)|| (pred instanceof Mult)|| (pred instanceof org.apache.xpath.operations.Number)|| (pred instanceof Function))     m_hasPositionalPred=true; else     pred.callVisitors(owner,this);  }  m_predDepth--;  return false;}  }
class C{  protected final void addState(State state,State parent){  mSmHandler.addState(state,parent);}  }
class C{  protected byte[] wrap(byte content_type,DataStream dataStream){  byte[] fragment=dataStream.getData(MAX_DATA_LENGTH);  return wrap(content_type,fragment,0,fragment.length);}  }
class C{  public Iterator<String> keys(){  return this.keySet().iterator();}  }
class C{  private static int count(String str,char a,int i,int count){  if (i == str.length())   return count; else   if (str.charAt(i) == a)   return count(str,a,++i,++count); else   return count(str,a,++i,count);}  }
class C{  private PlogLCR readRawLCR() throws IOException {  PlogLCR rawLCR=new PlogLCR();  int objectId=0;  boolean objectHadMetadata=false;  try {    plogStream.mark(1000000);    rawLCR.length=readSwappedInteger(plogStream);    rawLCR.type=readSwappedInteger(plogStream);    rawLCR.subtype=readSwappedInteger(plogStream);    rawLCR.rawTags=new LinkedList<PlogLCRTag>();    int lengthSoFar=3;    while (lengthSoFar < rawLCR.length) {      PlogLCRTag tag=readRawLCRTag();      lengthSoFar+=tag.length;      if (tag.id == PlogLCRTag.TAG_XID) {        rawLCR.XID=tag.valueString();      } else       if (tag.id == PlogLCRTag.TAG_LCR_ID) {        rawLCR.LCRid=tag.valueLong() + 1000000000L * plogId;      } else       if (tag.id == PlogLCRTag.TAG_PLOGSEQ) {        plogId=tag.valueInt();      } else       if (tag.id == PlogLCRTag.TAG_SAVEPOINT_ID) {        rawLCR.LCRSavepointId=tag.valueLong();      } else       if (tag.id == PlogLCRTag.TAG_SCN) {        rawLCR.SCN=tag.valueLong();      } else       if (tag.id == PlogLCRTag.TAG_DTIME) {        rawLCR.timestamp=tag.valueDtime();      } else       if (tag.id == PlogLCRTag.TAG_OBJ_OWNER) {        rawLCR.tableOwner=tag.valueString();        objectHadMetadata=true;      } else       if (tag.id == PlogLCRTag.TAG_OBJ_NAME) {        rawLCR.tableName=tag.valueString();        objectHadMetadata=true;      } else       if (tag.id == PlogLCRTag.TAG_OBJ_ID) {        objectId=tag.valueInt();        rawLCR.tableId=objectId;      } else {        rawLCR.rawTags.add(tag);      }    }  } catch (  IOException e) {    plogStream.reset();    throw (e);  }  if (rawLCR.type == PlogLCR.ETYPE_LCR_DATA && this.plogDictCacheEnabled) {    if (objectHadMetadata) {      plogDictCacheObjectOwner.put(objectId,rawLCR.tableOwner);      plogDictCacheObjectName.put(objectId,rawLCR.tableName);    } else     if (!objectHadMetadata) {      rawLCR.tableOwner=plogDictCacheObjectOwner.get(objectId);      rawLCR.tableName=plogDictCacheObjectName.get(objectId);    }    int columnId=-1;    boolean lastColumnHadMetadata=false;    PlogLCRTag lastColumnName=null;    PlogLCRTag lastColumnType=null;    LinkedList<PlogLCRTag> newRawTags=new LinkedList<PlogLCRTag>();    String objColId=null;    for (    PlogLCRTag tag : rawLCR.rawTags) {switch (tag.id) {case PlogLCRTag.TAG_COL_ID:        if (objColId != null && !lastColumnHadMetadata) {          if (logger.isDebugEnabled()) {            logger.debug("Get from ColumnName: [" + objColId + "]="+ plogDictCacheColumnName.get(objColId).valueString());            logger.debug("Get from ColumnType: [" + objColId + "]="+ plogDictCacheColumnType.get(objColId).valueString());          }          newRawTags.add(plogDictCacheColumnName.get(objColId));          newRawTags.add(plogDictCacheColumnType.get(objColId));        }      columnId=tag.valueInt();    objColId="" + objectId + "."+ columnId;  lastColumnName=null;lastColumnType=null;lastColumnHadMetadata=false;break;case PlogLCRTag.TAG_COL_NAME:lastColumnName=tag;lastColumnHadMetadata=true;plogDictCacheColumnName.put(objColId,lastColumnName);break;case PlogLCRTag.TAG_COL_TYPE:lastColumnType=tag;lastColumnHadMetadata=true;plogDictCacheColumnType.put(objColId,lastColumnType);break;case PlogLCRTag.TAG_PREIMAGE:case PlogLCRTag.TAG_POSTIMAGE:case PlogLCRTag.TAG_KEYIMAGE:case PlogLCRTag.TAG_LOBDATA:if (objColId != null && !lastColumnHadMetadata) {newRawTags.add(plogDictCacheColumnName.get(objColId));newRawTags.add(plogDictCacheColumnType.get(objColId));lastColumnHadMetadata=true;}break;default :}newRawTags.add(tag);}if (objColId != null && !lastColumnHadMetadata) {newRawTags.add(plogDictCacheColumnName.get(objColId));newRawTags.add(plogDictCacheColumnType.get(objColId));}rawLCR.rawTags=newRawTags;}return rawLCR;}  }
class C{  private String validateHeader(ValidationData original,ValidationData item,Variables variables,BaseResponse reqResponse,String uniqueName){  String actualValue=reqResponse.getHttpHeader(item.getKey());  boolean result=this.evaluateResult(actualValue,item.getValue(),item.getCondition(),variables);  if (result) {    return TankConstants.HTTP_CASE_PASS;  }  String msg="Failed header validation: header value = " + actualValue;  LOG.error(LogUtil.getLogMessage(item.toString() + " " + msg,LogEventType.Validation));  tsc.addError(new ErrorContainer("HEADER",original,item,msg));  return TankConstants.HTTP_CASE_FAIL;}  }
class C{  public static Object invokeExactMethod(Object object,String methodName,Object[] args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {  if (args == null) {    args=ArrayUtils.EMPTY_OBJECT_ARRAY;  }  int arguments=args.length;  Class[] parameterTypes=new Class[arguments];  for (int i=0; i < arguments; i++) {    parameterTypes[i]=args[i].getClass();  }  return invokeExactMethod(object,methodName,args,parameterTypes);}  }
class C{  private byte[] __loadBinFromInternet(boolean isUser1,String deviceKey,String latestRomVersion){  String headerKey=Authorization;  String headerValue=TOKEN + " " + deviceKey;  String url=__getDownloadUrl(latestRomVersion,USER1_BIN);  if (!__isHttpsSupported()) {    url=url.replace("https","http");  }  IEspDeviceUpgradeParser parser=EspDeviceUpgradeParser.getInstance();  IEspDeviceUpgradeInfo latestRomVersionInfo=parser.parseUpgradeInfo(latestRomVersion);  String subPath=Long.toString(latestRomVersionInfo.getIdValue());  String folderPath=EspApplication.sharedInstance().getEspRootSDPath();  if (folderPath == null) {    folderPath=EspApplication.sharedInstance().getContextFilesDirPath();  }  folderPath+="bin/" + subPath;  String saveName=USER1_BIN;  HeaderPair header=new HeaderPair(headerKey,headerValue);  boolean suc=EspBaseApiUtil.download(null,url,folderPath,saveName,header);  if (suc) {    log.debug(Thread.currentThread().toString() + "##__loadBinFromInternet(isUser1=[" + isUser1+ "],deviceKey=["+ deviceKey+ "],latestRomVersion=["+ latestRomVersion+ "]): "+ "suc");  } else {    log.warn(Thread.currentThread().toString() + "##__loadBinFromInternet(isUser1=[" + isUser1+ "],deviceKey=["+ deviceKey+ "],latestRomVersion=["+ latestRomVersion+ "]): "+ "fail");    return null;  }  saveName=USER2_BIN;  url=__getDownloadUrl(latestRomVersion,USER2_BIN);  if (!__isHttpsSupported()) {    url=url.replace("https","http");  }  suc=EspBaseApiUtil.download(null,url,folderPath,saveName,header);  if (suc) {    log.debug(Thread.currentThread().toString() + "##__loadBinFromInternet(isUser1=[" + isUser1+ "],deviceKey=["+ deviceKey+ "],latestRomVersion=["+ latestRomVersion+ "]): "+ "suc");  } else {    log.warn(Thread.currentThread().toString() + "##__loadBinFromInternet(isUser1=[" + isUser1+ "],deviceKey=["+ deviceKey+ "],latestRomVersion=["+ latestRomVersion+ "]): "+ "fail");    return null;  }  return __loadBinFromLocal(isUser1,latestRomVersion);}  }
class C{  public void playAll(boolean shuffle){  mApp.getPlaybackKickstarter().initPlayback(mContext,"",Common.PLAY_ALL_SONGS,0,true,true);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public <T>HGSearchResult<T> find(HGQueryCondition condition){  HGQuery<T> query=HGQuery.make(this,condition);  return query.execute();}  }
class C{  private CProjectTreeDragHandlerInitializer(){}  }
class C{  public ConnectionTagHandler(Authorization parent){  this.parent=parent;}  }
class C{  public boolean isAddressedModePossible(){  if (defaultManager == null) {    return false;  }  return defaultManager.isAddressedModePossible();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public final void testIsSatisfiedSucceeds(){  ContainsSymbolConstraint containsSymbolConstraint=new ContainsSymbolConstraint();  assertTrue(containsSymbolConstraint.isSatisfied("abc.abc"));}  }
class C{  public void rejectedExecution(Runnable r,ThreadPoolExecutor e){}  }
class C{  @Override public void onDrawerClosed(View drawerView){}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.util.Map conMap=Catbert.evalBool(stack.pop()) ? Scheduler.getInstance().getUnresolvedConflictsMap() : Scheduler.getInstance().getConflictsMap();  java.util.Vector rv=new java.util.Vector();  java.util.Iterator walker=conMap.values().iterator();  while (walker.hasNext()) {    rv.addAll((java.util.List)walker.next());  }  return rv;}  }
class C{  protected String doGetText(EObject source){  String keyword=getKeywordLabel(source);  QualifiedName containerName=qualifiedNameProvider.getFullyQualifiedName(source);  while (containerName == null) {    source=source.eContainer();    if (source != null) {      containerName=qualifiedNameProvider.getFullyQualifiedName(source);    } else {      break;    }  }  if (keyword != null && keyword.length() > 0) {    return keyword + ' ' + containerName;  }  return String.valueOf(containerName);}  }
class C{  public TaskEvent(ClusterNode node,String msg,int type,IgniteUuid sesId,String taskName,String taskClsName,boolean internal,@Nullable UUID subjId){  super(node,msg,type);  this.sesId=sesId;  this.taskName=taskName;  this.taskClsName=taskClsName;  this.internal=internal;  this.subjId=subjId;}  }
class C{  public static Boolean removeIconFromCache(Context context,AppInfo appInfo){  File file=new File(context.getCacheDir(),appInfo.getAPK());  return file.delete();}  }
class C{  public List<SootMethod> methodsOfApplicationClasses(){  List<SootMethod> ret=new ArrayList<SootMethod>();  for (Iterator clIt=Scene.v().getApplicationClasses().iterator(); clIt.hasNext(); ) {    final SootClass cl=(SootClass)clIt.next();    for (Iterator mIt=cl.getMethods().iterator(); mIt.hasNext(); ) {      final SootMethod m=(SootMethod)mIt.next();      if (m.isConcrete())       ret.add(m);    }  }  return ret;}  }
class C{  public SphereConstraint(Vec3D origin,float radius,boolean isBoundary){  sphere=new Sphere(origin,radius);  this.isBoundingSphere=isBoundary;}  }
class C{  @Transactional public void populateAndPersistReceipts(final ReceiptHeader receiptHeader,final List<InstrumentHeader> receiptInstrList){  try {    persist(receiptHeader);    LOGGER.info("Persisted receipts");    startWorkflow(receiptHeader);    LOGGER.info("Workflow started for newly created receipts");    final SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");    Date cutOffDate=null;    try {      cutOffDate=sdf.parse(collectionsUtil.getAppConfigValue(CollectionConstants.MODULE_NAME_COLLECTIONS_CONFIG,CollectionConstants.APPCONFIG_VALUE_COLLECTIONDATAENTRYCUTOFFDATE));    } catch (    final ParseException e) {      LOGGER.error("Error parsing Cut Off Date" + e.getMessage());    }    if (cutOffDate != null && receiptHeader.getReceiptdate().before(cutOffDate))     performWorkflow(CollectionConstants.WF_ACTION_APPROVE,receiptHeader,"Legacy data Receipt Approval based on cutoff date");    if (receiptHeader.getService().getServiceType().equalsIgnoreCase(CollectionConstants.SERVICE_TYPE_BILLING)) {      updateBillingSystemWithReceiptInfo(receiptHeader,null,null);      LOGGER.info("Updated billing system ");    }  } catch (  final HibernateException e) {    LOGGER.error("Receipt Service HException while persisting ReceiptHeader",e);    throw new ApplicationRuntimeException("Receipt Service Exception while persisting ReceiptHeader : ",e);  }catch (  final ApplicationRuntimeException e) {    LOGGER.error("Receipt Service AException while persisting ReceiptHeader!",e);    throw new ApplicationRuntimeException("Receipt Service Exception while persisting ReceiptHeader : ",e);  }}  }
class C{  private void selectNodes(final List<NaviNode> toSelect){  m_graph.removeListener(m_graphSelectionListener);  m_graph.selectNodes(m_graph.getSelectedNodes(),false);  m_graph.selectNodes(toSelect,true);  m_graph.addListener(m_graphSelectionListener);}  }
class C{  public ToastBuilder duration(int duration){  this.duration=duration;  return this;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  Expression expr=((ElemVariable)m_obj).getSelect().getExpression();  XObject xobj=expr.execute(xctxt);  xobj.allowDetachToRelease(false);  return xobj;}  }
class C{  private void cubicTo(float x1,float y1,float x2,float y2,float x3,float y3){  mPath.curveTo(x1,y1,x2,y2,mLastX=x3,mLastY=y3);}  }
class C{  @Deprecated public static Result result(Activity activity){  return result();}  }
class C{  public T caseBindingPattern(BindingPattern object){  return null;}  }
class C{  public static boolean isWindowsNt4(){  return osName.indexOf("Windows NT") > -1 && osVersion.equals("4.0");}  }
class C{  private static void increaseToMinZoom(final Graph2DView view){  final double minZoom=getMinimumZoom(view);  if (view.getZoom() < minZoom) {    view.setZoom(minZoom);  }}  }
class C{  public void updateListeners(EnumSet<TrackDataType> listeners){  EnumSet<TrackDataType> neededListeners=EnumSet.copyOf(listeners);  if (neededListeners.contains(TrackDataType.SAMPLED_OUT_TRACK_POINTS_TABLE)) {    neededListeners.remove(TrackDataType.SAMPLED_OUT_TRACK_POINTS_TABLE);    neededListeners.add(TrackDataType.SAMPLED_IN_TRACK_POINTS_TABLE);  }  Log.d(TAG,"Updating listeners " + neededListeners);  Set<TrackDataType> unnecessaryListeners=EnumSet.copyOf(registeredListeners);  unnecessaryListeners.removeAll(neededListeners);  Set<TrackDataType> missingListeners=EnumSet.copyOf(neededListeners);  missingListeners.removeAll(registeredListeners);  for (  TrackDataType trackDataType : unnecessaryListeners) {    unregisterListener(trackDataType);  }  for (  TrackDataType trackDataType : missingListeners) {    registerListener(trackDataType);  }  registeredListeners.clear();  registeredListeners.addAll(neededListeners);}  }
class C{  public void commit() throws GenericDataSourceException {  if (_connection == null) {    return;  }  if (Debug.verboseOn())   Debug.logVerbose("SQLProcessor:commit() _manualTX=" + _manualTX,module);  if (_manualTX) {    try {      _connection.commit();      if (Debug.verboseOn())       Debug.logVerbose("SQLProcessor:commit() : called commit on connection",module);    } catch (    SQLException sqle) {      Debug.logError(sqle,"Error committing transaction: " + sqle.toString());      try {        rollback();      } catch (      GenericDataSourceException rbsqle) {        Debug.logError(rbsqle,"Got another error when trying to rollback after error committing transaction: " + sqle.toString());      }      throw new GenericDataSourceException("SQL Exception occurred on commit",sqle);    }  }}  }
class C{  public boolean olderThan(Version o){  return compareTo(o) == -1;}  }
class C{  public static void write(String filepath,Properties theProperties) throws IOException {  write(filepath,theProperties,filepath);}  }
class C{  public ClusterRerouteRequest explain(boolean explain){  this.explain=explain;  return this;}  }
class C{  public boolean hasRuleForSpan(int i,int j,int pathLength){  if (this.spanLimit == -1) {    return (i == 0);  } else {    return (pathLength <= this.spanLimit);  }}  }
class C{  public static ParserRuleContext earliestAncestorEndingWithToken(TerminalNode node){  Token token=node.getSymbol();  ParserRuleContext p=(ParserRuleContext)node.getParent();  ParserRuleContext prev=null;  while (p != null && p.getStop() == token) {    prev=p;    p=p.getParent();  }  if (prev == null) {    return (ParserRuleContext)node.getParent();  }  return prev;}  }
class C{  public Object clone(){  ShortArrayList clone=new ShortArrayList((short[])elements.clone());  clone.setSizeRaw(size);  return clone;}  }
class C{  public void testNearestCommonAncestorIsRoot(){  Element div=TestUtil.createDiv(1);  mBody.appendChild(div);  Element div2=TestUtil.createDiv(2);  div.appendChild(div2);  Element div3=TestUtil.createDiv(3);  div2.appendChild(div3);  assertEquals(div,DomUtil.getNearestCommonAncestor(div,div3));  NodeList nodeList=DomUtil.querySelectorAll(mRoot,"[id=\"1\"],[id=\"3\"]");  assertEquals(div,DomUtil.getNearestCommonAncestor(TestUtil.nodeListToList(nodeList)));}  }
class C{  public ColorList adjustBrightness(float step){  for (  TColor c : colors) {    c.lighten(step);  }  return this;}  }
class C{  public SpinnerListModel(){  this(new Object[]{"empty"});}  }
class C{  public void purgePcjTable(final Connector accumuloConn,final String pcjTableName) throws PCJStorageException {  checkNotNull(accumuloConn);  checkNotNull(pcjTableName);  final PcjMetadata oldMetadata=getPcjMetadata(accumuloConn,pcjTableName);  try {    accumuloConn.tableOperations().deleteRows(pcjTableName,null,null);  } catch (  AccumuloException|AccumuloSecurityException|TableNotFoundException e) {    throw new PCJStorageException("Could not delete the rows of data from PCJ table named: " + pcjTableName,e);  }  final PcjMetadata newMetadata=new PcjMetadata(oldMetadata.getSparql(),0L,oldMetadata.getVarOrders());  final List<Mutation> mutations=makeWriteMetadataMutations(newMetadata);  BatchWriter writer=null;  try {    writer=accumuloConn.createBatchWriter(pcjTableName,new BatchWriterConfig());    writer.addMutations(mutations);    writer.flush();  } catch (  final TableNotFoundException|MutationsRejectedException e) {    throw new PCJStorageException("Could not rewrite the PCJ cardinality for table named '" + pcjTableName + "'. This table will not work anymore.",e);  } finally {    if (writer != null) {      try {        writer.close();      } catch (      final MutationsRejectedException e) {        throw new PCJStorageException("Could not close the batch writer.",e);      }    }  }}  }
class C{  public static String readFileContent(File file,String encoding) throws IOException {  if (file == null || !file.exists()) {    throw new IOException();  }  return FileUtils.readFileToString(file,encoding).replace("\uFEFF","");}  }
class C{  protected boolean loadTexture(GL10 gl){  try {    if (mImage == null || !mImage.isValid())     return false;    this.recycleTexture(gl);    mWidth=mImage.getWidth();    mHeight=mImage.getHeight();    if (mWidth > PLConstants.kTextureMaxSize || mHeight > PLConstants.kTextureMaxSize) {      PLLog.error("PLTexture::loadTexture","Invalid texture size. The texture max size must be %d x %d and currently is %d x %d.",PLConstants.kTextureMaxSize,PLConstants.kTextureMaxSize,mWidth,mHeight);      this.recycleImage();      return false;    }    boolean isResizableImage=false;    if (!PLMath.isPowerOfTwo(mWidth)) {      isResizableImage=true;      mWidth=this.convertSizeToPowerOfTwo(mWidth);    }    if (!PLMath.isPowerOfTwo(mHeight)) {      isResizableImage=true;      mHeight=this.convertSizeToPowerOfTwo(mHeight);    }    if (isResizableImage)     mImage.scale(mWidth,mHeight);    gl.glGenTextures(1,mTextureId,0);    int error=gl.glGetError();    if (error != GL10.GL_NO_ERROR) {      PLLog.error("PLTexture::loadTexture","glGetError #1 = (%d) %s ...",error,GLU.gluErrorString(error));      this.recycleImage();      return false;    }    gl.glBindTexture(GL10.GL_TEXTURE_2D,mTextureId[0]);    error=gl.glGetError();    if (error != GL10.GL_NO_ERROR) {      PLLog.error("PLTexture::loadTexture","glGetError #2 = (%d) %s ...",error,GLU.gluErrorString(error));      this.recycleImage();      return false;    }    gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_MIN_FILTER,GL10.GL_LINEAR);    gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_MAG_FILTER,GL10.GL_LINEAR);    gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_WRAP_S,GL10.GL_CLAMP_TO_EDGE);    gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_WRAP_T,GL10.GL_CLAMP_TO_EDGE);    gl.glTexEnvf(GL10.GL_TEXTURE_ENV,GL10.GL_TEXTURE_ENV_MODE,GL10.GL_MODULATE);    PLIImage image=this.convertImage(mImage,mColorFormat);    GLUtils.texImage2D(GL10.GL_TEXTURE_2D,0,image.getBitmap(),0);    if (image != mImage)     image.recycle();    error=gl.glGetError();    if (error != GL10.GL_NO_ERROR) {      PLLog.error("PLTexture::loadTexture","glGetError #3 = (%d) %s ...",error,GLU.gluErrorString(error));      this.recycleImage();      return false;    }    this.recycleImage();    mIsValid=true;    mIsRecycled=false;    if (gl instanceof IGLWrapper)     mGLWrapper=(IGLWrapper)gl;    if (mListener != null)     mListener.didLoad(this);    return true;  } catch (  Throwable e) {    PLLog.error("PLTexture::loadTexture",e);  }  return false;}  }
class C{  protected void checkOffsetCount(int offset,int count) throws DOMException {  if (offset < 0 || offset >= getLength()) {    throw createDOMException(DOMException.INDEX_SIZE_ERR,"offset",new Object[]{new Integer(offset)});  }  if (count < 0) {    throw createDOMException(DOMException.INDEX_SIZE_ERR,"negative.count",new Object[]{new Integer(count)});  }}  }
class C{  public DateTickUnit(int unit,int count,int rollUnit,int rollCount,DateFormat formatter){  this(intToUnitType(unit),count,intToUnitType(rollUnit),rollCount,notNull(formatter));}  }
class C{  @Override public boolean canChildScrollUp(){  if (callback != null) {    return callback.canChildScrollUp();  }  return super.canChildScrollUp();}  }
class C{  public ObjectIdentifier(int[] oid){  validate(oid);  this.oid=oid;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  EPG epg=EPG.getInstance();  CaptureDeviceInput cdi=getCapDevInput(stack);  long provID=cdi.getDefaultProviderID();  EPGDataSource ds=epg.getSourceForProviderID(provID);  if (ds == null) {    int newDSID=Wizard.getInstance().getNextWizID();    while (epg.getSourceForID(newDSID) != null)     newDSID=Wizard.getInstance().getNextWizID();    ds=new EPGDataSource(newDSID);    ds.setName(cdi.toString());    ds.setProviderID(provID);    ds.setEnabled(true);    epg.addDataSource(ds);  } else   ds.setEnabled(true);  cdi.setProvider(provID);  Scheduler.getInstance().kick(false);  return Boolean.TRUE;}  }
class C{  private void installMouseListeners(){  if (mouseListener == null) {    mouseListener=createMouseListener();    getComponent().addMouseListener(mouseListener);    getComponent().addMouseMotionListener(mouseListener);  }}  }
class C{  public byte[] pad(byte[] data) throws BadPaddingException {  if (data.length > maxDataSize) {    throw new BadPaddingException("Data must be shorter than " + (maxDataSize + 1) + " bytes");  }switch (type) {case PAD_NONE:    return data;case PAD_BLOCKTYPE_1:case PAD_BLOCKTYPE_2:  return padV15(data);case PAD_OAEP_MGF1:return padOAEP(data);default :throw new AssertionError();}}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public boolean retainAll(Collection<?> that){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  private AbstractGroupOrRangeJunction createGroupJunctionOrRangeJunction(boolean needsCompacting,RuntimeIterator[] grpIndpndntItr,boolean completeExpnsn,CompiledValue[] cv,Map sameIndexOperands){  AbstractGroupOrRangeJunction junction;  if (needsCompacting) {    Iterator itr=sameIndexOperands.values().iterator();    if (sameIndexOperands.size() == 1) {      List sameIndexOps=(List)itr.next();      Iterator sameIndexOpsItr=sameIndexOps.iterator();      for (int i=0; i < cv.length; ++i) {        if (cv[i] == null) {          cv[i]=(CompiledValue)sameIndexOpsItr.next();        }      }      junction=new RangeJunction(this._operator,grpIndpndntItr,completeExpnsn,cv);    } else {      int numRangeJunctions=0;      CompiledValue[] rangeJunctions=new CompiledValue[sameIndexOperands.size()];      int nullifiedFields=0;      while (itr.hasNext()) {        Object listOrPosition=itr.next();        if (listOrPosition instanceof List) {          List ops=(List)listOrPosition;          nullifiedFields+=ops.size();          CompiledValue operands[]=(CompiledValue[])ops.toArray(new CompiledValue[ops.size()]);          rangeJunctions[numRangeJunctions++]=new RangeJunction(this._operator,grpIndpndntItr,completeExpnsn,operands);        }      }      int totalOperands=cv.length - nullifiedFields + numRangeJunctions;      CompiledValue[] allOperands=new CompiledValue[totalOperands];      int k=0;      for (int i=0; i < cv.length; ++i) {        CompiledValue tempCV=cv[i];        if (tempCV != null) {          allOperands[k++]=tempCV;        }      }      for (int i=0; i < numRangeJunctions; ++i) {        allOperands[k++]=rangeJunctions[i];      }      junction=new GroupJunction(this._operator,grpIndpndntItr,completeExpnsn,allOperands);    }  } else {    junction=new GroupJunction(this._operator,grpIndpndntItr,completeExpnsn,cv);  }  return junction;}  }
class C{  public boolean isDefault(){  DataLineModel<?,?> dlm=(DataLineModel<?,?>)table.getModel();  for (int i=0; i < dlm.getColumnCount(); i++) {    LimeTableColumn ltc=dlm.getTableColumn(i);    if (!isDefaultWidth(ltc))     return false;    if (!isDefaultOrder(ltc))     return false;    if (!isDefaultVisibility(ltc))     return false;  }  return true;}  }
class C{  @PUT @Path("/{relyingPartyName}") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @RequiresRole(role=Role.ADMINISTRATOR) public RelyingPartyDTO update(RelyingPartyDTO relyingParty){  try {    RelyingParty rpToUpdate=RelyingPartyMapper.getRelyingParty(relyingParty);    getIDMClient().setRelyingParty(tenant,rpToUpdate);    return RelyingPartyMapper.getRelyingPartyDTO(getIDMClient().getRelyingParty(tenant,relyingParty.getName()));  } catch (  NoSuchTenantException|NoSuchRelyingPartyException e) {    log.debug("Failed to update a relying party '{}' on tenant '{}' due to missing tenant or a relying party",relyingParty.getName(),tenant,e);    throw new NotFoundException(sm.getString("ec.404"),e);  }catch (  DTOMapperException|InvalidArgumentException e) {    log.debug("Failed to update a relying party '{}' on tenant '{}' due to a client side error",relyingParty.getName(),tenant,e);    throw new BadRequestException(sm.getString("res.relyingparty.update.failed",tenant),e);  }catch (  Exception e) {    log.error("Failed to update a relying party '{}' on tenant '{}' due to a server side error",relyingParty.getName(),tenant,e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  public QuadEdge locate(Vertex v){  if (!lastEdge.isLive()) {    init();  }  QuadEdge e=subdiv.locateFromEdge(v,lastEdge);  lastEdge=e;  return e;}  }
class C{  public static Face drawEast(MeshModel model,double minX,double minY,double minZ,double maxX,double maxY,double maxZ,CubeTextureCoordinates textureCoordinates){  Face east=new Face();  east.normal=Direction.EAST.toVector();  east.drawVertex(new Vertex(maxX,maxY,minZ,textureCoordinates.getEastMinU(),textureCoordinates.getEastMinV()));  east.drawVertex(new Vertex(maxX,maxY,maxZ,textureCoordinates.getEastMaxU(),textureCoordinates.getEastMinV()));  east.drawVertex(new Vertex(maxX,minY,maxZ,textureCoordinates.getEastMaxU(),textureCoordinates.getEastMaxV()));  east.drawVertex(new Vertex(maxX,minY,minZ,textureCoordinates.getEastMinU(),textureCoordinates.getEastMaxV()));  model.drawFace(east);  return east;}  }
class C{  public ImplPermissionsBuilder(Permissions permissions){  allowed=((ImplPermissions)permissions).getAllowed();  denied=((ImplPermissions)permissions).getDenied();}  }
class C{  public TFloatArrayList(int capacity){  _data=new float[capacity];  _pos=0;}  }
class C{  public int lowestValue(){  if (mapValues.isEmpty()) {    return 0;  }  int min=Integer.MAX_VALUE;  for (  final int value : mapValues.values()) {    if (value < min) {      min=value;    }  }  return min;}  }
class C{  private int startOnOffer(int stat){  for (; ; ) {    Executor e;    int c;    if ((c=ctl) == DISABLED || (e=executor) == null) {      stat=-1;      break;    } else     if ((c & ACTIVE) != 0) {      if ((c & CONSUME) != 0 || U.compareAndSwapInt(this,CTL,c,c | CONSUME))       break;    } else     if (demand == 0L || tail == head)     break; else     if (U.compareAndSwapInt(this,CTL,c,c | (ACTIVE | CONSUME))) {      try {        e.execute(new ConsumerTask<T>(this));        break;      } catch (      RuntimeException ex) {        back_out();        throw ex;      }catch (      Error ex) {        back_out();        throw ex;      }    }  }  return stat;}  }
class C{  public EsriPlugIn(){  Debug.message("esri","EsriPlugIn: default constructor");}  }
class C{  private static void encode(long val,byte[] bytes,int offset){  NumericUtils.longToSortableBytes(val,bytes,offset);}  }
class C{  public boolean isMultiSelection(){  return this.isMultiple();}  }
class C{  public boolean run(String s){  int p=0;  int l=s.length();  for (int i=0, cp=0; i < l; i+=Character.charCount(cp)) {    p=step(p,cp=s.codePointAt(i));    if (p == -1)     return false;  }  return accept[p];}  }
class C{  public Digest(){  this(false);}  }
class C{  GraphicsState(GraphicsState copy){  m_currentColor=copy.m_currentColor;  m_currentFont=copy.m_currentFont;  m_currentStroke=copy.m_currentStroke;  m_xOffset=copy.m_xOffset;  m_yOffset=copy.m_yOffset;  m_xScale=copy.m_xScale;  m_yScale=copy.m_yScale;}  }
class C{  public boolean isSummary(){  Object oo=get_Value(COLUMNNAME_IsSummary);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public MemberAttributes(int dcPort,int vmPid,int vmKind,int vmViewId,String p_name,String[] p_groups,DurableClientAttributes durableClientAttributes){  String[] l_groups=p_groups;  this.dcPort=dcPort;  this.vmPid=vmPid;  this.vmKind=vmKind;  this.vmViewId=vmViewId;  if (l_groups == null) {    l_groups=new String[0];  }  this.groups=l_groups;  if (p_name == null) {    this.name="";  } else {    this.name=p_name;  }  this.durableClientAttributes=durableClientAttributes;}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 4:{        addNullToken();        return firstToken;      }case 24:    break;case 21:{    yybegin(YYINITIAL);    addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);  }case 25:break;case 19:{start=zzMarkedPos - 2;yybegin(MLC);}case 26:break;case 5:{addToken(Token.WHITESPACE);}case 27:break;case 18:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 28:break;case 17:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 29:break;case 20:{addToken(Token.RESERVED_WORD);}case 30:break;case 8:{addToken(Token.SEPARATOR);}case 31:break;case 2:{addToken(Token.IDENTIFIER);}case 32:break;case 15:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 33:break;case 11:{}case 34:break;case 1:{addToken(Token.ERROR_IDENTIFIER);}case 35:break;case 12:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 36:break;case 23:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_EOL);start=zzMarkedPos;}case 37:break;case 22:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_MULTILINE);start=zzMarkedPos;}case 38:break;case 16:{addToken(Token.ERROR_NUMBER_FORMAT);}case 39:break;case 9:{start=zzMarkedPos - 1;yybegin(STRING);}case 40:break;case 7:{start=zzMarkedPos - 1;yybegin(EOL_COMMENT);}case 41:break;case 3:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 42:break;case 6:{addToken(Token.OPERATOR);}case 43:break;case 13:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 44:break;case 10:{}case 45:break;case 14:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 46:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case EOL_COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 513:break;case STRING:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 514:break;case YYINITIAL:{addNullToken();return firstToken;}case 515:break;case MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 516:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  @Override public int compareTo(final FacetProto o){  return getName().compareTo(o.getName());}  }
class C{  public void pOln(String s) throws IOException {  pO(s);  pln();}  }
class C{  private static void saveGraph(final Window parent,final CGraphModel model){  if (model.getGraph().getRawView().getType() == ViewType.Native) {    saveNativeGraph(parent,model);  } else {    saveNonNativeGraph(parent,model);  }}  }
class C{  private static String validateXML(String string) throws IOException {  for (int i=0; i < string.length(); i++) {    char ch=string.charAt(i);    if (!(ch == 9 || ch == 10 || ch == 13 || ch >= 32))     throw new IOException("Character reference \"&#" + Integer.toString(ch) + "\" is an invalid XML character.");  }  return string;}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public NotificationChain basicSetBogusTypeRef(TypeRef newBogusTypeRef,NotificationChain msgs){  TypeRef oldBogusTypeRef=bogusTypeRef;  bogusTypeRef=newBogusTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.GETTER_DECLARATION__BOGUS_TYPE_REF,oldBogusTypeRef,newBogusTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public FuzzyQueryBuilder(String name,float value){  this(name,(Object)value);}  }
class C{  public void showView(String uniqueId,View view,String infoTip,MaterialIntroListener listener){  if (forceDisplay) {    resetUniqueId(uniqueId);  }  new MaterialIntroView.Builder(activity).setConfiguration(defaultConfiguration).setTarget(view).setInfoText(infoTip).setUsageId(uniqueId).setListener(listener).show();}  }
class C{  public ToStringBuilder append(final float[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  public CheckingAccount(int id,double balance,double overdraftLimit){  super(id,balance);  this.overdraftLimit=overdraftLimit;}  }
class C{  public boolean isZoomEnabled(){  return mZoomEnabled;}  }
class C{  private void endSpanTag() throws IOException {  write(NEWLINE);  writeEndTag("</span>");  fontAttributes=null;}  }
class C{  public static long convertAmount(double exchangeRate,String sourceCurrencyCode,long sourceAmount,String targetCurrencyCode){  if (targetCurrencyCode.equals(sourceCurrencyCode)) {    return sourceAmount;  }  int sourceFractionDigits=Currency.getInstance(sourceCurrencyCode).getDefaultFractionDigits();  Currency targetCurrency=Currency.getInstance(targetCurrencyCode);  int targetFractionDigits=targetCurrency.getDefaultFractionDigits();  return convertAmount(exchangeRate,sourceFractionDigits,sourceAmount,targetFractionDigits);}  }
class C{  @Override public void refresh(){  mLogger.logDebug("Refreshing access token...");  final ADALAccountInfo newInfo=(ADALAccountInfo)mAuthenticator.loginSilent();  mAuthenticationResult=newInfo.mAuthenticationResult;}  }
class C{  public ResultFileReader(Problem problem,File file) throws IOException {  super();  this.problem=problem;  reader=new BufferedReader(new FileReader(file));  line=reader.readLine();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildTeacher(zone);}  }
class C{  public GameManager(int gridSize){  this.gameGrid=new HashMap<>();  gridOperator=new GridOperator(gridSize);  board=new Board(gridOperator);  this.getChildren().add(board);  board.clearGameProperty().addListener(null);  board.resetGameProperty().addListener(null);  board.restoreGameProperty().addListener(null);  board.saveGameProperty().addListener(null);  initializeGameGrid();  startGame();}  }
class C{  protected void parseKeyBits() throws InvalidKeyException {  try {    DerInputStream in=new DerInputStream(key);    DerValue derValue=in.getDerValue();    if (derValue.tag != DerValue.tag_Sequence) {      throw new IOException("Not a SEQUENCE");    }    DerInputStream data=derValue.data;    int version=data.getInteger();    if (version != 0) {      throw new IOException("Version must be 0");    }    n=getBigInteger(data);    e=getBigInteger(data);    d=getBigInteger(data);    p=getBigInteger(data);    q=getBigInteger(data);    pe=getBigInteger(data);    qe=getBigInteger(data);    coeff=getBigInteger(data);    if (derValue.data.available() != 0) {      throw new IOException("Extra data available");    }  } catch (  IOException e) {    throw new InvalidKeyException("Invalid RSA private key",e);  }}  }
class C{  public void buildClassifier(Instances data) throws Exception {  throw new Exception("[PMMLClassifier] PMML models are pre-built " + "and static!");}  }
class C{  public ImageExceptionBean(ApplicationExceptionBean sup,Reason reason){  super(sup);  setReason(reason);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.322 -0500",hash_original_method="85C4F370BE8714F2CD7DF24F138664E0",hash_generated_method="A4B1D5F82C1C758F36C3D4E56F30C1A9") public void drawPosText(char[] text,int index,int count,float[] pos,Paint paint){  if (index < 0 || index + count > text.length || count * 2 > pos.length) {    throw new IndexOutOfBoundsException();  }  native_drawPosText(mNativeCanvas,text,index,count,pos,paint.mNativePaint);}  }
class C{  private void failFrom(Class<?>... classes){  Set<String> classesOnStackTrace=new HashSet<String>();  for (  StackTraceElement s : Thread.currentThread().getStackTrace()) {    classesOnStackTrace.add(s.getClassName());  }  for (  Class<?> clazz : classes) {    if (classesOnStackTrace.contains(clazz.getCanonicalName())) {      fail();    }  }}  }
class C{  public static String matchCount(String content,String pattern,int count,int group,boolean caseInsensitive){  Pattern p=Pattern.compile(pattern);  if (caseInsensitive) {    p=Pattern.compile(pattern,Pattern.CASE_INSENSITIVE);  }  Matcher matcher=p.matcher(content);  int n=0;  while (matcher.find()) {    n++;    if (n == count) {      return matcher.group(group);    }  }  return null;}  }
class C{  public synchronized String toLines(){  StringBuilder buff=new StringBuilder();  for (  Entry<Object,Object> e : new TreeMap<Object,Object>(this).entrySet()) {    buff.append(e.getKey()).append('=').append(e.getValue()).append('\n');  }  return buff.toString();}  }
class C{  public static void writeHttpResponseHeader(Writer out,String contentType,int contentLength) throws IOException {  out.write("HTTP/1.0 200 \n");  out.write("Content-type: " + contentType + "\n");  out.write("Content-Length: " + contentLength + "\n");  out.write("\n");}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.INVARIANT___ANONYMOUS_INVARIANT_11:    return ((InternalEList<?>)getAnonymous_invariant_1_1()).basicRemove(otherEnd,msgs);case UmplePackage.INVARIANT___ANONYMOUS_INVARIANT_21:  return ((InternalEList<?>)getAnonymous_invariant_2_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == SyntaxRelatedTElement.class) {switch (baseFeatureID) {case TypesPackage.SYNTAX_RELATED_TELEMENT__AST_ELEMENT:      return TypesPackage.MODULE_NAMESPACE_VIRTUAL_TYPE__AST_ELEMENT;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public static void ignorePermission(String permission){  if (!isIgnoredPermission(permission)) {    ArrayList<String> ignoredPermissions=getIgnoredPermissions();    ignoredPermissions.add(permission);    Set<String> set=new HashSet<String>();    set.addAll(ignoredPermissions);    sharedPreferences.edit().putStringSet(KEY_IGNORED_PERMISSIONS,set).apply();  }}  }
class C{  private int subParseNumericZone(String text,int start,int sign,int count,boolean colon,CalendarBuilder calb){  int index=start;  parse:   try {    char c=text.charAt(index++);    int hours;    if (!isDigit(c)) {      break parse;    }    hours=c - '0';    c=text.charAt(index++);    if (isDigit(c)) {      hours=hours * 10 + (c - '0');    } else {      if (count > 0 || !colon) {        break parse;      }      --index;    }    if (hours > 23) {      break parse;    }    int minutes=0;    if (count != 1) {      c=text.charAt(index++);      if (colon) {        if (c != ':') {          break parse;        }        c=text.charAt(index++);      }      if (!isDigit(c)) {        break parse;      }      minutes=c - '0';      c=text.charAt(index++);      if (!isDigit(c)) {        break parse;      }      minutes=minutes * 10 + (c - '0');      if (minutes > 59) {        break parse;      }    }    minutes+=hours * 60;    calb.set(Calendar.ZONE_OFFSET,minutes * MILLIS_PER_MINUTE * sign).set(Calendar.DST_OFFSET,0);    return index;  } catch (  IndexOutOfBoundsException e) {  }  return 1 - index;}  }
class C{  public Request<String> readOnlyUrl(ProjectReference projectReference){  final Invocation request=getWebTarget().path(projectReference.workspaceId()).path("read-only-url").queryParam("projectPath",projectReference.name()).request().accept(MediaType.WILDCARD).buildGet();  return new SimpleRequest<>(request,String.class,getAuthenticationManager());}  }
class C{  public static byte[] byteToBytes(byte b){  final byte[] bytes={b};  return bytes;}  }
class C{  public DecisionTree(int maxDepth){  this(maxDepth,10,PruningMethod.NONE,0.00001);}  }
class C{  public void incUnprocessedTokensRemovedBySecondary(){  this.stats.incInt(unprocessedTokensRemovedBySecondaryId,1);  decUnprocessedTokenMapSize();}  }
class C{  public final void forceFinished(boolean finished){  mFinished=finished;}  }
class C{  public void edit(NewExpr e) throws CannotCompileException {}  }
class C{  public EntityMappingRule createEntityMappingRule(){  EntityMappingRuleImpl entityMappingRule=new EntityMappingRuleImpl();  return entityMappingRule;}  }
class C{  public static boolean start(RootDoc root){  root.printWarning(null,docletWarning);  return true;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private int find(T key,boolean modify){  if (mapType == MapType.SORTED_LIST) {    int i=binarySearch(key);    if (i < num && keys[i] != null && key.equals(keys[i]))     return i;    if (modify) {      if (locked)       throw new RuntimeException("Cannot make new entry for " + key + ", because map is locked");      if (num == capacity())       changeSortedListCapacity(getCapacity(num + 1,false));      for (int j=num; j > i; j--) {        keys[j]=keys[j - 1];        values[j]=values[j - 1];      }      num++;      values[i]=Float.NaN;      return i;    } else     return -1;  } else   if (mapType == MapType.HASH_TABLE) {    int capacity=capacity();    int keyHash=hash(key);    int i=keyHash % capacity;    if (i < 0)     i=-i;    if (!locked && modify && (num > loadFactor * capacity || capacity <= num + 1)) {      switchMapType(MapType.HASH_TABLE);      return find(key,modify);    }    if (num == capacity)     throw new RuntimeException("Hash table is full: " + capacity);    while (keys[i] != null && !keys[i].equals(key)) {      i++;      numCollisions++;      if (i == capacity)       i=0;    }    if (keys[i] != null) {      assert key.equals(keys[i]);      return i;    }    if (modify) {      num++;      values[i]=Float.NaN;      return i;    } else     return -1;  } else   throw new RuntimeException("Internal bug: " + mapType);}  }
class C{  @Override protected void throwIfError(final String stderr){  if (StringUtils.isNotEmpty(stderr)) {    final Pattern pattern=Pattern.compile(String.format(WORKSPACE_EXISTS_ERROR,workspaceName));    final Matcher matcher=pattern.matcher(stderr);    if (matcher.find())     throw new WorkspaceAlreadyExistsException(workspaceName);  }  super.throwIfError(stderr);}  }
class C{  @Override public void writeToParcel(Parcel dest,int flags){  dest.writeInt(mCategory);  dest.writeInt(mLanguage);  dest.writeInt(mCategoryResult);}  }
class C{  protected void resetFileLists(){  compileList=new File[0];}  }
class C{  public static int[] toIntArray(Integer[] array){  int[] result=new int[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i];  }  return result;}  }
class C{  private boolean doesUserHaveAnyNotebooks(RequestAndResponse requestAndResponse) throws IOException {  boolean hasNotebooks=false;  try {    final String userId=getEffectiveUserId(requestAndResponse);    if (userId != null) {      final User user=dbLogic.getUserById(userId);      if (user != null) {        hasNotebooks=dbLogic.doesTableOfContentsHaveAnyNotebooks(user.getTableOfContentsId());      }    }    dbLogic.commit();  } catch (  final PersistenceException e) {  }  return hasNotebooks;}  }
class C{  private ApplicationContext createSpringContext(ApplicationContext ctx,ServletConfig sc,String location){  XmlWebApplicationContext ctx2=new XmlWebApplicationContext();  createdContext=ctx2;  ctx2.setServletConfig(sc);  Resource r=ctx2.getResource(location);  try {    InputStream in=r.getInputStream();    in.close();  } catch (  IOException e) {    r=ctx2.getResource("classpath:" + location);    try {      r.getInputStream().close();    } catch (    IOException e2) {      r=null;    }  }  try {    if (r != null) {      location=r.getURL().toExternalForm();    }  } catch (  IOException e) {  }  if (ctx != null) {    ctx2.setParent(ctx);    String names[]=ctx.getBeanNamesForType(Bus.class);    if (names == null || names.length == 0) {      ctx2.setConfigLocations(new String[]{"classpath:/META-INF/cxf/cxf.xml",location});    } else {      ctx2.setConfigLocations(new String[]{location});    }  } else {    ctx2.setConfigLocations(new String[]{"classpath:/META-INF/cxf/cxf.xml",location});    createdContext=ctx2;  }  ctx2.refresh();  return ctx2;}  }
class C{  public V put(int key,V value){  boolean wasFree=false;  V previous=null;  int index=insertionIndex(key);  boolean isNewMapping=true;  if (index < 0) {    index=-index - 1;    previous=unwrapNull(_values[index]);    isNewMapping=false;  } else {    wasFree=isFree(_values,index);  }  _set[index]=key;  _values[index]=wrapNull(value);  if (isNewMapping) {    postInsertHook(wasFree);  }  return previous;}  }
class C{  private boolean pushTypeCheckBelowIf(Instruction s,IR ir){  if (s.operator() == CHECKCAST) {    Register r=TypeCheck.getRef(s).asRegister().getRegister();    Instruction n=s.nextInstructionInCodeOrder();    while (n.operator() == REF_MOVE && Move.getVal(n) instanceof RegisterOperand && Move.getVal(n).asRegister().getRegister() == r) {      r=Move.getResult(n).asRegister().getRegister();      n=n.nextInstructionInCodeOrder();    }    if (n.operator() == REF_IFCMP && IfCmp.getVal2(n) instanceof NullConstantOperand && IfCmp.getVal1(n) instanceof RegisterOperand && r == IfCmp.getVal1(n).asRegister().getRegister()) {      BasicBlock newBlock, patchBlock;      BasicBlock myBlock=n.getBasicBlock();      Instruction after=n.nextInstructionInCodeOrder();      if (IfCmp.getCond(n).isEQUAL()) {        if (after.operator() == BBEND) {          patchBlock=myBlock.nextBasicBlockInCodeOrder();        } else         if (after.operator() == GOTO) {          patchBlock=after.getBranchTarget();        } else         if (after.operator() == REF_IFCMP) {          patchBlock=myBlock.splitNodeAt(n,ir);          myBlock.insertOut(patchBlock);          ir.cfg.linkInCodeOrder(myBlock,patchBlock);        } else {          return false;        }      } else {        patchBlock=n.getBranchTarget();      }      newBlock=IRTools.makeBlockOnEdge(myBlock,patchBlock,ir);      s.remove();      TypeCheck.mutate(s,CHECKCAST_NOTNULL,TypeCheck.getClearResult(s),TypeCheck.getClearRef(s),TypeCheck.getClearType(s),IfCmp.getGuardResult(n).copyRO());      newBlock.prependInstruction(s);      return true;    }  }  return false;}  }
class C{  @Override protected void register(ConfigurationFactory configurationFactory){  configurationFactory.registerConfiguration("jonas4x",ContainerType.REMOTE,ConfigurationType.RUNTIME,Jonas4xRuntimeConfiguration.class);  configurationFactory.registerConfiguration("jonas4x",ContainerType.INSTALLED,ConfigurationType.EXISTING,Jonas4xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("jonas4x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Jonas4xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("jonas5x",ContainerType.REMOTE,ConfigurationType.RUNTIME,Jonas5xRuntimeConfiguration.class);  configurationFactory.registerConfiguration("jonas5x",ContainerType.INSTALLED,ConfigurationType.EXISTING,Jonas5xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("jonas5x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Jonas5xStandaloneLocalConfiguration.class);}  }
class C{  public VNXeNfsShare findNfsShare(String fsId,String shareName,String softwareVersion){  VNXeNfsShare result=null;  StringBuilder queryFilter=new StringBuilder(VNXeConstants.NAME_FILTER);  if (!VNXeUtils.isHigherVersion(softwareVersion,VNXeConstants.VNXE_BASE_SOFT_VER)) {    queryFilter.append(shareName);    queryFilter.append(VNXeConstants.AND);    queryFilter.append(VNXeConstants.FILE_SYSTEM_FILTER);    queryFilter.append(fsId);  } else {    queryFilter.append("\"" + shareName + "\"");    queryFilter.append(VNXeConstants.AND);    queryFilter.append(VNXeConstants.FILE_SYSTEM_FILTER_V31);    queryFilter.append("\"" + fsId + "\"");  }  setFilter(queryFilter.toString());  List<VNXeNfsShare> shareList=getDataForObjects(VNXeNfsShare.class);  if (shareList != null && !shareList.isEmpty()) {    result=shareList.get(0);    _logger.info("File system : {} NFS share named : {} found",fsId,shareName);  } else {    _logger.info("No file system share found using the fs id: {}, nfsShare name: {} ",fsId,shareName);  }  return result;}  }
class C{  @Override public boolean delete(AppContext ctx,StatePK objectId){  State state=read(ctx,objectId);  if (state.getShortcutId() == null) {    return super.delete(ctx,objectId);  } else {    throw new APIException("Forbidden, this State is already associated to Shortcut : " + state.getShortcutId(),ctx.isNoError());  }}  }
class C{  public PrinterAbortException(String msg){  super(msg);}  }
class C{  public static int cs_dfs(int j,Dcs G,int top,int[] xi,int xi_offset,int[] pstack,int pstack_offset,int[] pinv,int pinv_offset){  int i, p, p2, jnew, head=0, Gp[], Gi[];  boolean done;  if (!Dcs_util.CS_CSC(G) || xi == null || pstack == null)   return (-1);  Gp=G.p;  Gi=G.i;  xi[xi_offset + 0]=j;  while (head >= 0) {    j=xi[xi_offset + head];    jnew=pinv != null ? (pinv[pinv_offset + j]) : j;    if (!Dcs_util.CS_MARKED(Gp,j)) {      Dcs_util.CS_MARK(Gp,j);      pstack[pstack_offset + head]=(jnew < 0) ? 0 : Dcs_util.CS_UNFLIP(Gp[jnew]);    }    done=true;    p2=(jnew < 0) ? 0 : Dcs_util.CS_UNFLIP(Gp[jnew + 1]);    for (p=pstack[pstack_offset + head]; p < p2; p++) {      i=Gi[p];      if (Dcs_util.CS_MARKED(Gp,i))       continue;      pstack[pstack_offset + head]=p;      xi[xi_offset + ++head]=i;      done=false;      break;    }    if (done) {      head--;      xi[xi_offset + --top]=j;    }  }  return (top);}  }
class C{  private static String makeOperatorDocumentation(Operator displayedOperator){  OperatorDescription descr=displayedOperator.getOperatorDescription();  StringBuilder buf=new StringBuilder(2048);  buf.append("<html><body><table><tr><td>");  String iconName="icons/24/" + displayedOperator.getOperatorDescription().getIconName();  URL resource=Tools.getResource(iconName);  if (resource != null) {    buf.append("<img src=\"");    buf.append(resource);    buf.append("\" class=\"HeadIcon\"/> ");  }  buf.append("<td valign=\"middle\" align=\"left\"> <h2 class=\"firstHeading\" id=\"firstHeading\">");  buf.append(descr.getName());  buf.append("<span class=\"packageName\"><br/>");  buf.append(descr.getProviderName());  buf.append("</span></h2></td></tr></table><div style=\"border-top: 1px solid #bbbbbb\">");  buf.append(OperatorDocToHtmlConverter.getTagHtmlForDescription(descr));  buf.append("<h4>Synopsis</h4><p>");  buf.append(descr.getShortDescription());  buf.append("</p></p><br/><h4>Description</h4>");  String descriptionText=descr.getLongDescriptionHTML();  if (descriptionText != null) {    if (!descriptionText.trim().startsWith("<p>")) {      buf.append("<p>");    }    buf.append(descriptionText);    if (!descriptionText.trim().endsWith("</p>")) {      buf.append("</p>");    }    buf.append("<br/>");  }  appendPortsToDocumentation(displayedOperator.getInputPorts(),"Input",null,buf);  appendPortsToDocumentation(displayedOperator.getOutputPorts(),"Output","outPorts",buf);  Parameters parameters=displayedOperator.getParameters();  if (parameters.getKeys().size() > 0) {    buf.append("<h4 class=\"parametersHeading\">Parameters</h4><table class=\"parametersTable\">");    for (    String key : parameters.getKeys()) {      ParameterType type=parameters.getParameterType(key);      if (type == null) {        LogService.getRoot().log(Level.WARNING,"com.rapidminer.gui.OperatorDocLoader.unkwown_parameter_key",new Object[]{displayedOperator.getName(),key});        continue;      }      buf.append("<tr><td><b>");      buf.append(makeParameterHeader(type));      buf.append("</b>");      if (type.isOptional()) {        buf.append(" (optional)");      }      buf.append("</td></tr><tr><td>");      buf.append(type.getDescription());      buf.append("</td></tr><tr><td class=\"parameterDetailsCell\"><span class=\"parameterDetails\">");      String parameterType=OperatorDocToHtmlConverter.getParameterType(descr.getKey(),key);      buf.append("<b>Type: </b> <i>");      buf.append(parameterType);      buf.append("</i>");      if (parameterType.equals(OperatorDocToHtmlConverter.REAL_LABEL) || parameterType.equals(OperatorDocToHtmlConverter.INTEGER_LABEL) || parameterType.equals(OperatorDocToHtmlConverter.LONG_LABEL)|| parameterType.equals(OperatorDocToHtmlConverter.SELECTION_LABEL)) {        buf.append("<br/><b>Range: </b> <i>");        buf.append(OperatorDocToHtmlConverter.getParameterRange(descr.getKey(),key));        buf.append("</i>");      }      String parameterDefault=OperatorDocToHtmlConverter.getParameterDefault(descr.getKey(),key);      if (!parameterDefault.trim().isEmpty()) {        buf.append("<br/><b>Default: </b> <i>");        buf.append(OperatorDocToHtmlConverter.getParameterDefault(descr.getKey(),key));        buf.append("</i>");      }      buf.append("</span></td></tr>");    }    buf.append("</table>");  }  if (!descr.getOperatorDocumentation().getExamples().isEmpty()) {    buf.append("<h4>Examples</h4><ul>");    int i=0;    for (    ExampleProcess exampleProcess : descr.getOperatorDocumentation().getExamples()) {      buf.append("<li>");      buf.append(exampleProcess.getComment());      buf.append(makeExampleFooter(i));      buf.append("</li>");      i++;    }    buf.append("</ul>");  }  buf.append("</div></body></html>");  return buf.toString();}  }
class C{  public static EtagCache create(final File file,final long size){  try {    return new EtagCache(file,size);  } catch (  IOException e) {    return null;  }}  }
class C{  public void printStackTrace(java.io.PrintWriter s){  if (s == null) {    s=new java.io.PrintWriter(System.err,true);  }  try {    String locInfo=getLocationAsString();    if (null != locInfo) {      s.println(locInfo);    }    super.printStackTrace(s);  } catch (  Throwable e) {  }  boolean isJdk14OrHigher=false;  try {    Throwable.class.getMethod("getCause",(Class<?>)null);    isJdk14OrHigher=true;  } catch (  NoSuchMethodException nsme) {  }  if (!isJdk14OrHigher) {    Throwable exception=getException();    for (int i=0; (i < 10) && (null != exception); i++) {      s.println("---------");      try {        if (exception instanceof DTMException) {          String locInfo=((DTMException)exception).getLocationAsString();          if (null != locInfo) {            s.println(locInfo);          }        }        exception.printStackTrace(s);      } catch (      Throwable e) {        s.println("Could not print stack trace...");      }      try {        Method meth=((Object)exception).getClass().getMethod("getException",(Class<?>)null);        if (null != meth) {          Throwable prev=exception;          exception=(Throwable)meth.invoke(exception,(Class<?>)null);          if (prev == exception) {            break;          }        } else {          exception=null;        }      } catch (      InvocationTargetException ite) {        exception=null;      }catch (      IllegalAccessException iae) {        exception=null;      }catch (      NoSuchMethodException nsme) {        exception=null;      }    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return TypeRefsPackage.Literals.BOUND_THIS_TYPE_REF;}  }
class C{  public static long longForQuery(SQLiteStatement prog,String[] selectionArgs){  prog.bindAllArgsAsStrings(selectionArgs);  return prog.simpleQueryForLong();}  }
class C{  public RotatingFileTarget(final boolean append,final Formatter formatter,final RotateStrategy rotateStrategy,final FileStrategy fileStrategy) throws IOException {  super(null,append,formatter);  m_append=append;  m_rotateStrategy=rotateStrategy;  m_fileStrategy=fileStrategy;  rotate();}  }
class C{  public static TopicListFragment newInstance(Page page){  TopicListFragment fragment=new TopicListFragment();  Bundle args=new Bundle();  args.putParcelable(ARG_PAGE,page);  fragment.setArguments(args);  return fragment;}  }
class C{  public void finished(long chainLength){  currentState=chainLength;  if (loggers != null) {    for (    Logger logger : loggers) {      logger.log(currentState);      logger.stopLogging();    }  }}  }
class C{  public List<MailetMatcherDescriptor> descriptors(){  return descriptors;}  }
class C{  protected void writeNothing() throws IOException {  fos.writeInt(0);  fos.flush();}  }
class C{  public void flush() throws IOException {  pw.flush();}  }
class C{  private DocLine[] loadRequisitions(){  MOrder order=(MOrder)getPO();  MOrderLine[] oLines=order.getLines();  HashMap<Integer,BigDecimal> qtys=new HashMap<Integer,BigDecimal>();  for (int i=0; i < oLines.length; i++) {    MOrderLine line=oLines[i];    qtys.put(new Integer(line.getC_OrderLine_ID()),line.getQtyOrdered());  }  ArrayList<DocLine> list=new ArrayList<DocLine>();  String sql="SELECT * FROM M_RequisitionLine rl " + "WHERE EXISTS (SELECT * FROM C_Order o " + " INNER JOIN C_OrderLine ol ON (o.C_Order_ID=ol.C_Order_ID) "+ "WHERE ol.C_OrderLine_ID=rl.C_OrderLine_ID"+ " AND o.C_Order_ID=?) "+ "ORDER BY rl.C_OrderLine_ID";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,order.getC_Order_ID());    rs=pstmt.executeQuery();    while (rs.next()) {      MRequisitionLine line=new MRequisitionLine(getCtx(),rs,null);      DocLine docLine=new DocLine(line,this);      Integer key=new Integer(line.getC_OrderLine_ID());      BigDecimal maxQty=qtys.get(key);      BigDecimal Qty=line.getQty().max(maxQty);      if (Qty.signum() == 0)       continue;      docLine.setQty(Qty,false);      qtys.put(key,maxQty.subtract(Qty));      BigDecimal PriceActual=line.getPriceActual();      BigDecimal LineNetAmt=line.getLineNetAmt();      if (line.getQty().compareTo(Qty) != 0)       LineNetAmt=PriceActual.multiply(Qty);      docLine.setAmount(LineNetAmt);      list.add(docLine);    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  DocLine[] dls=new DocLine[list.size()];  list.toArray(dls);  return dls;}  }
class C{  public static int abs(Number number){  return Math.abs(number.intValue());}  }
class C{  public StepItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void println() throws IOException {  out.append(format.getRecordSeparator());  newRecord=true;}  }
class C{  static void testValidity(Object o) throws JSONException {  if (o != null) {    if (o instanceof Double) {      if (((Double)o).isInfinite() || ((Double)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    } else     if (o instanceof Float) {      if (((Float)o).isInfinite() || ((Float)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  static int readInt(final byte[] b,final int index){  return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16) | ((b[index + 2] & 0xFF) << 8)| (b[index + 3] & 0xFF);}  }
class C{  public TestTable1 selectByPrimaryKey(Integer id){  if (id == null)   return null;  this.model.id=id;  this.model.load();  if (this.model.entity()) {    return this.model;  } else {    return null;  }}  }
class C{  public ServiceHelper args(String... args){  this.args=args;  return this;}  }
class C{  @Override public void beginWindow(long windowId){}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.THIS_ARG_PROVIDER;}  }
class C{  protected void broadcast(DecoderStateEvent event){  if (mDecoderStateListener != null) {    mDecoderStateListener.receive(event);  }}  }
class C{  public void actionPerformed(ActionEvent e){  JEditorPane editor=getEditor(e);  if (editor != null) {    StyledEditorKit kit=getStyledEditorKit(editor);    MutableAttributeSet attr=kit.getInputAttributes();    boolean underline=(StyleConstants.isUnderline(attr)) ? false : true;    SimpleAttributeSet sas=new SimpleAttributeSet();    StyleConstants.setUnderline(sas,underline);    setCharacterAttributes(editor,sas,false);  }}  }
class C{  public boolean isSetIsConcurrent(){  return this.isConcurrent != null;}  }
class C{  public void write(DataOutputStream out) throws IOException {  int i, n;  out.writeInt(0xCAFEBABE);  out.writeShort(minor);  out.writeShort(major);  constPool.write(out);  out.writeShort(accessFlags);  out.writeShort(thisClass);  out.writeShort(superClass);  if (interfaces == null)   n=0; else   n=interfaces.length;  out.writeShort(n);  for (i=0; i < n; ++i)   out.writeShort(interfaces[i]);  ArrayList list=fields;  n=list.size();  out.writeShort(n);  for (i=0; i < n; ++i) {    FieldInfo finfo=(FieldInfo)list.get(i);    finfo.write(out);  }  list=methods;  n=list.size();  out.writeShort(n);  for (i=0; i < n; ++i) {    MethodInfo minfo=(MethodInfo)list.get(i);    minfo.write(out);  }  out.writeShort(attributes.size());  AttributeInfo.writeAll(attributes,out);}  }
class C{  public static void loadAppProperties() throws IOException {  ConfigProperties.loadDeploymentProperties(m_AppConfigLoad,PROPERTIES_PROPERTY_FILE);}  }
class C{  public static SemIm retainValues(SemIm semIm,SemGraph graph){  SemPm newSemPm=new SemPm(graph);  SemIm newSemIm=new SemIm(newSemPm);  for (  Parameter p1 : newSemIm.getSemPm().getParameters()) {    Node nodeA=semIm.getSemPm().getGraph().getNode(p1.getNodeA().getName());    Node nodeB=semIm.getSemPm().getGraph().getNode(p1.getNodeB().getName());    for (    Parameter p2 : semIm.getSemPm().getParameters()) {      if (p2.getNodeA() == nodeA && p2.getNodeB() == nodeB && p2.getType() == p1.getType()) {        newSemIm.setParamValue(p1,semIm.getParamValue(p2));      }    }  }  newSemIm.sampleSize=semIm.sampleSize;  return newSemIm;}  }
class C{  static public void shuffle(int[] array,int from,int to,Random rand){  for (int i=to - 1; i > from; i--)   swap(array,i,rand.nextInt(i));}  }
class C{  public void nextState(){switch (getState()) {case UNCHECKED:    setState(State.CHECKED);  break;case CHECKED:setState(State.GREY_UNCHECKED);break;case GREY_UNCHECKED:setState(State.GREY_CHECKED);break;case GREY_CHECKED:setState(State.UNCHECKED);break;}}  }
class C{  private String normalizePath(String path){  return path.startsWith("/") ? path : '/' + path;}  }
class C{  public static String clearActionsToString(OFInstructionClearActions inst,Logger log){  return "";}  }
class C{  private void refitText(){  if (!mSizeToFit) {    return;  }  if (mMaxLines <= 0) {    return;  }  String text=mTextView.getText().toString();  int targetWidth=mTextView.getWidth() - mTextView.getPaddingLeft() - mTextView.getPaddingRight();  if (targetWidth > 0) {    Context context=mTextView.getContext();    Resources r=Resources.getSystem();    DisplayMetrics displayMetrics;    float size=mMaxTextSize;    float high=size;    float low=0;    if (context != null) {      r=context.getResources();    }    displayMetrics=r.getDisplayMetrics();    mPaint.set(mTextView.getPaint());    mPaint.setTextSize(size);    if ((mMaxLines == 1 && mPaint.measureText(text) > targetWidth) || getLineCount(text,mPaint,size,targetWidth,displayMetrics) > mMaxLines) {      size=getTextSize(text,mPaint,targetWidth,mMaxLines,low,high,mPrecision,displayMetrics);    }    if (size < mMinTextSize) {      size=mMinTextSize;    }    mTextView.setTextSize(TypedValue.COMPLEX_UNIT_PX,size);  }}  }
class C{  public static CloudObject ensureSerializable(Coder<?> coder){  Coder<?> copy=(Coder<?>)ensureSerializable((Serializable)coder);  CloudObject cloudObject=copy.asCloudObject();  Coder<?> decoded;  try {    decoded=Serializer.deserialize(cloudObject,Coder.class);  } catch (  RuntimeException e) {    throw new RuntimeException(String.format("Unable to deserialize Coder: %s. " + "Check that a suitable constructor is defined.  " + "See Coder for details.",coder),e);  }  checkState(coder.equals(decoded),"Coder not equal to original after serialization, indicating that the Coder may not " + "implement serialization correctly.  Before: %s, after: %s, cloud encoding: %s",coder,decoded,cloudObject);  return cloudObject;}  }
class C{  public void digitalWrite(int pin,boolean value){  if (!isConnected()) {    onError(OneSheeldError.DEVICE_NOT_CONNECTED);    return;  } else   if (isUpdatingFirmware()) {    onError(OneSheeldError.FIRMWARE_UPDATE_IN_PROGRESS);    return;  }  if (isPinDebuggingEnabled)   Log.i("Device " + this.name + ": Digital write "+ (value ? "High" : "Low")+ " to pin "+ pin+ ".");  if (pin >= 20 || pin < 0)   throw new IncorrectPinException("The specified pin number is incorrect, are you sure you specified it correctly?");  byte portNumber=(byte)((pin >> 3) & 0x0F);  if (!value)   digitalOutputData[portNumber]&=~(1 << (pin & 0x07)); else   digitalOutputData[portNumber]|=(1 << (pin & 0x07));  byte[] writeData={SET_PIN_MODE,(byte)pin,OUTPUT,(byte)(DIGITAL_MESSAGE | portNumber),(byte)(digitalOutputData[portNumber] & 0x7F),(byte)(digitalOutputData[portNumber] >> 7)};synchronized (sendingDataLock) {    write(writeData);  }}  }
class C{  private boolean removeUpdate() throws IOException, ServletException {  final File patchDir=getPatchDirectory();  final File[] patches=patchDir.listFiles(new ExtensionFilter(new String[]{"rc","rcs"}));  for (int i=0; i < patches.length; i++)   if (!patches[i].delete())   patches[i].deleteOnExit();  _restart();  return true;}  }
class C{  public final boolean isProtected(){  return Modifier.isProtected(getModifiers());}  }
class C{  protected RequestTask(TextureAtlasElement elem){  if (elem == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.elem=elem;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:08.148 -0400",hash_original_method="9DC9E7F19092F975814277CEE7D0B356",hash_generated_method="EC6A30792CB9078E6ABCEE5767F254CB") public static synchronized void removeProvider(int providerNumber){  Provider p=providers.remove(providerNumber - 1);  providersNames.remove(p.getName());  setNeedRefresh();}  }
class C{  public static Function upper(Object column){  return new Function(format("upper(%s)",column));}  }
class C{  public String outputErrorFlagTipText(){  return "Whether to add an attribute indicating whether the classifier output " + "a wrong classification (for numeric classes this is the numeric " + "difference).";}  }
class C{  public List<Resource> scan(){  List<Resource> foundResources=new LinkedList<>();  List<Class<? extends Object>> classes;  try {    if (jarUrl == null) {      if (this.clazz != null) {        classes=getClassesInPackage(this.packageName,this.clazz);      } else {        classes=getClassesInPackage(this.packageName);      }    } else {      classes=getClassesInJarFile(jarUrl);    }  } catch (  IOException e) {    return foundResources;  }  for (  Class clazz : classes) {    foundResources.addAll(getResourcesFromClassRecursive(clazz));  }  return foundResources;}  }
class C{  public org.jdom2.Element store(){  org.jdom2.Element e=new org.jdom2.Element(Xml.CAR);  super.store(e);  if (isPassenger()) {    e.setAttribute(Xml.PASSENGER,isPassenger() ? Xml.TRUE : Xml.FALSE);  }  if (isHazardous()) {    e.setAttribute(Xml.HAZARDOUS,isHazardous() ? Xml.TRUE : Xml.FALSE);  }  if (isCaboose()) {    e.setAttribute(Xml.CABOOSE,isCaboose() ? Xml.TRUE : Xml.FALSE);  }  if (hasFred()) {    e.setAttribute(Xml.FRED,hasFred() ? Xml.TRUE : Xml.FALSE);  }  if (isUtility()) {    e.setAttribute(Xml.UTILITY,isUtility() ? Xml.TRUE : Xml.FALSE);  }  if (getKernel() != null) {    e.setAttribute(Xml.KERNEL,getKernelName());    if (getKernel().isLead(this)) {      e.setAttribute(Xml.LEAD_KERNEL,Xml.TRUE);    }  }  e.setAttribute(Xml.LOAD,getLoadName());  if (isLoadGeneratedFromStaging()) {    e.setAttribute(Xml.LOAD_FROM_STAGING,Xml.TRUE);  }  if (getWait() != 0) {    e.setAttribute(Xml.WAIT,Integer.toString(getWait()));  }  if (!getPickupScheduleId().equals(NONE)) {    e.setAttribute(Xml.PICKUP_SCHEDULE_ID,getPickupScheduleId());  }  if (!getScheduleItemId().equals(NONE)) {    e.setAttribute(Xml.SCHEDULE_ID,getScheduleItemId());  }  if (!getNextLoadName().equals(NONE)) {    e.setAttribute(Xml.NEXT_LOAD,getNextLoadName());  }  if (getNextWait() != 0) {    e.setAttribute(Xml.NEXT_WAIT,Integer.toString(getNextWait()));  }  if (!getNextPickupScheduleId().equals(NONE)) {    e.setAttribute(Xml.NEXT_PICKUP_SCHEDULE_ID,getNextPickupScheduleId());  }  if (getFinalDestination() != null) {    e.setAttribute(Xml.NEXT_DEST_ID,getFinalDestination().getId());    if (getFinalDestinationTrack() != null) {      e.setAttribute(Xml.NEXT_DEST_TRACK_ID,getFinalDestinationTrack().getId());    }  }  if (getPreviousFinalDestination() != null) {    e.setAttribute(Xml.PREVIOUS_NEXT_DEST_ID,getPreviousFinalDestination().getId());    if (getPreviousFinalDestinationTrack() != null) {      e.setAttribute(Xml.PREVIOUS_NEXT_DEST_TRACK_ID,getPreviousFinalDestinationTrack().getId());    }  }  if (!getPreviousScheduleId().equals(NONE)) {    e.setAttribute(Xml.PREVIOUS_SCHEDULE_ID,getPreviousScheduleId());  }  if (getReturnWhenEmptyDestination() != null) {    e.setAttribute(Xml.RWE_DEST_ID,getReturnWhenEmptyDestination().getId());    if (getReturnWhenEmptyDestTrack() != null) {      e.setAttribute(Xml.RWE_DEST_TRACK_ID,getReturnWhenEmptyDestTrack().getId());    }  }  if (!getReturnWhenEmptyLoadName().equals(carLoads.getDefaultEmptyName())) {    e.setAttribute(Xml.RWE_LOAD,getReturnWhenEmptyLoadName());  }  return e;}  }
class C{  private long doCreate(BigDecimal value) throws Exception {  Organization organization=createCustomerAndSupplier();  final long key=createDiscount(organization,value,null,null);  return key;}  }
class C{  protected BackspaceImpl(){  super();}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/postcheck") public Response verifyVdcConfig(VdcPostCheckParam checkParam){  log.info("Post check enter: {}",checkParam.getVdcList());  helper.syncVdcConfigPostSteps(checkParam);  return Response.ok().build();}  }
class C{  public String[] keyArray(){  return keyArray(null);}  }
class C{  public BinaryBufferedFile(File f) throws IOException {  this(f,4096);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:18.421 -0500",hash_original_method="76164594E21D6CE99D1A0A90A760CF7A",hash_generated_method="25B1C1BA84DF5BEBAF46122E1A31B670") protected AlertException(byte description,SSLException reason){  super(reason);  this.reason=reason;  this.description=description;}  }
class C{  private JedisPool pickupSentinel(){  for (  JedisPool pool : sentinelPools) {    if (JedisUtils.ping(pool)) {      return pool;    }  }  return null;}  }
class C{  @Deprecated public static Iterator iterator(){  return factory.iterator();}  }
class C{  public String encodedQuery(){  if (queryNamesAndValues == null)   return null;  int queryStart=url.indexOf('?') + 1;  int queryEnd=delimiterOffset(url,queryStart + 1,url.length(),'#');  return url.substring(queryStart,queryEnd);}  }
class C{  public void run(){  boolean interupted=false;  while (true) {    LogEvent event=null;synchronized (m_list) {      while (null == event) {        final int size=m_list.size();        if (size > 0) {          event=(LogEvent)m_list.removeLast();          if (size == m_queueSize) {            m_list.notify();          }        } else         if (interupted || Thread.interrupted()) {          return;        } else {          try {            m_list.wait();          } catch (          final InterruptedException ie) {            interupted=true;          }        }      }    }    try {      this.getLogTarget().processEvent(event);    } catch (    final Throwable throwable) {      getErrorHandler().error("Unknown error writing event.",throwable,event);    }  }}  }
class C{  public static Predicates2<String,String> endsWith(){  return ENDS_WITH;}  }
class C{  @Override public String toString(){  return name;}  }
class C{  public CSVFormat withEscape(final Character escape){  if (isLineBreak(escape)) {    throw new IllegalArgumentException("The escape character cannot be a line break");  }  return new CSVFormat(delimiter,quoteChar,quotePolicy,commentStart,escape,ignoreSurroundingSpaces,ignoreEmptyLines,recordSeparator,nullString,header,skipHeaderRecord);}  }
class C{  protected void executeViewProductCommand(final Product product){  shoppingCartCommandFactory.execute(ShoppingCartCommand.CMD_INTERNAL_VIEWSKU,cartMixin.getCurrentCart(),new HashMap<String,Object>(){{      put(ShoppingCartCommand.CMD_INTERNAL_VIEWSKU,product);    }  });}  }
class C{  public Zipper<A> dropAfter(){  return new Zipper<>(front,List.empty(),position);}  }
class C{  @SafeVarargs @Pure(Enforcement.FORCE) public PersistentList(K... init){  PersistentList<K> ret=emptyList();  for (int i=init.length - 1; i >= 0; i--) {    Pure4J.immutable(init[i]);    ret=ret.cons(init[i]);  }  this._count=ret.size();  this._first=ret._first;  this._rest=ret._rest;}  }
class C{  private void assertMutatorRemsetsFlushed(){}  }
class C{  private ValueNumber[] popInputValues(int numWordsConsumed){  ValueNumberFrame frame=getFrame();  ValueNumber[] inputValueList=allocateValueNumberArray(numWordsConsumed);  try {    frame.getTopStackWords(inputValueList);    while (numWordsConsumed-- > 0) {      frame.popValue();    }  } catch (  DataflowAnalysisException e) {    throw new InvalidBytecodeException("Error getting input operands",e);  }  return inputValueList;}  }
class C{  public static String assignShard(DocCollection collection,Integer numShards){  if (numShards == null) {    numShards=1;  }  String returnShardId=null;  Map<String,Slice> sliceMap=collection != null ? collection.getActiveSlicesMap() : null;  if (sliceMap == null) {    return "shard1";  }  List<String> shardIdNames=new ArrayList<>(sliceMap.keySet());  if (shardIdNames.size() < numShards) {    return "shard" + (shardIdNames.size() + 1);  }  final Map<String,Integer> map=new HashMap<>();  for (  String shardId : shardIdNames) {    int cnt=sliceMap.get(shardId).getReplicasMap().size();    map.put(shardId,cnt);  }  Collections.sort(shardIdNames,null);  returnShardId=shardIdNames.get(0);  return returnShardId;}  }
class C{  protected static int extractByteValue(ByteArrayInputStream pduDataStream){  assert (null != pduDataStream);  int temp=pduDataStream.read();  assert (-1 != temp);  return temp & 0xFF;}  }
class C{  public int readChar() throws IOException {  return reader.read();}  }
class C{  public NotificationChain basicSetDeclaredLowerBound(TypeRef newDeclaredLowerBound,NotificationChain msgs){  TypeRef oldDeclaredLowerBound=declaredLowerBound;  declaredLowerBound=newDeclaredLowerBound;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypeRefsPackage.WILDCARD__DECLARED_LOWER_BOUND,oldDeclaredLowerBound,newDeclaredLowerBound);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void connectPort(Mx1PortController p){  istream=p.getInputStream();  ostream=p.getOutputStream();  if (controller != null) {    log.warn("connectPort: connect called while connected");  }  controller=p;}  }
class C{  @Override public EObject create(EClass eClass){switch (eClass.getClassifierID()) {case TypesPackage.PACKAGE:    return createPackage();case TypesPackage.TYPE:  return createType();case TypesPackage.OPERATION:return createOperation();case TypesPackage.PROPERTY:return createProperty();case TypesPackage.PARAMETER:return createParameter();case TypesPackage.TYPE_SPECIFIER:return createTypeSpecifier();case TypesPackage.EVENT:return createEvent();case TypesPackage.ENUMERATION_TYPE:return createEnumerationType();case TypesPackage.PRIMITIVE_TYPE:return createPrimitiveType();case TypesPackage.COMPLEX_TYPE:return createComplexType();case TypesPackage.ENUMERATOR:return createEnumerator();case TypesPackage.TYPE_CONSTRAINT:return createTypeConstraint();case TypesPackage.TYPE_PARAMETER:return createTypeParameter();case TypesPackage.PARAMETERIZED_TYPE:return createParameterizedType();case TypesPackage.PACKAGE_MEMBER:return createPackageMember();case TypesPackage.RANGE_CONSTRAINT:return createRangeConstraint();case TypesPackage.DOMAIN:return createDomain();case TypesPackage.TYPE_ALIAS:return createTypeAlias();case TypesPackage.ANNOTATION:return createAnnotation();case TypesPackage.ANNOTATABLE_ELEMENT:return createAnnotatableElement();case TypesPackage.ARRAY_TYPE_SPECIFIER:return createArrayTypeSpecifier();default :throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");}}  }
class C{  public static RefactoringStatus checkCompilationUnitNewName(ICompilationUnit cu,String newBareName){  String newCUName=JavaModelUtil.getRenamedCUName(cu,newBareName);  IPath renamedResourcePath=cu.getParent().getPath().append(newCUName);  if (resourceExists(renamedResourcePath))   return RefactoringStatus.createFatalErrorStatus(Messages.format(RefactoringCoreMessages.Checks_cu_name_used,BasicElementLabels.getResourceName(newCUName))); else   return new RefactoringStatus();}  }
class C{  private void readObject(final java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  initialize();  HeadIndex<K,V> h=head;  Node<K,V> basepred=h.node;  ArrayList<Index<K,V>> preds=new ArrayList<Index<K,V>>();  for (int i=0; i <= h.level; ++i)   preds.add(null);  Index<K,V> q=h;  for (int i=h.level; i > 0; --i) {    preds.set(i,q);    q=q.down;  }  for (; ; ) {    Object k=s.readObject();    if (k == null)     break;    Object v=s.readObject();    if (v == null)     throw new NullPointerException();    K key=(K)k;    V val=(V)v;    int j=randomLevel();    if (j > h.level)     j=h.level + 1;    Node<K,V> z=new Node<K,V>(key,val,null);    basepred.next=z;    basepred=z;    if (j > 0) {      Index<K,V> idx=null;      for (int i=1; i <= j; ++i) {        idx=new Index<K,V>(z,idx,null);        if (i > h.level)         h=new HeadIndex<K,V>(h.node,h,idx,i);        if (i < preds.size()) {          preds.get(i).right=idx;          preds.set(i,idx);        } else         preds.add(idx);      }    }  }  head=h;}  }
class C{  private static boolean CallBooleanMethodV(JNIEnvironment env,int objJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallBooleanMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithVarArg(obj,methodID,argAddress,TypeReference.Boolean,false);    return Reflection.unwrapBoolean(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return false;  }}  }
class C{  @Override public boolean isBackingCacheAvailable(){  return true;}  }
class C{  public NotificationChain basicSetReturnType(ReturnType newReturnType,NotificationChain msgs){  ReturnType oldReturnType=returnType;  returnType=newReturnType;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,FunctionblockPackage.OPERATION__RETURN_TYPE,oldReturnType,newReturnType);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @DSComment("data structure class") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.430 -0500",hash_original_method="377B4DB42071C90137241E64BA4CBF0D",hash_generated_method="4DC03058BC1F180FEA26F342760300F9") public void remove(String key){  mValues.remove(key);}  }
class C{  public long add(final AddOp add) throws Exception {  return add(add,UUID.randomUUID());}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.separatorStroke=SerialUtilities.readStroke(stream);  this.separatorPaint=SerialUtilities.readPaint(stream);}  }
class C{  public void init(Controller c){  super.init(c);  display=new Display2D(900,700,this,1);  display.setClipping(false);  displayFrame=display.createFrame();  displayFrame.setTitle("HaitiFood Display");  c.registerFrame(displayFrame);  displayFrame.setVisible(true);  display.attach(destruction,"Destruction");  display.attach(roads,"Roads");  display.attach(people,"People");  display.attach(peopleKnow,"Knowledge");  display.attach(centers,"Centers");  display.attach(roadMaps,"Road Maps");  agentActivityChart=new TimeSeriesChartGenerator();  agentActivityChart.setTitle("Agent Activities");  agentActivityChart.setRangeAxisLabel("Number of Agents");  agentActivityChart.setDomainAxisLabel("Time");  JFrame activityChartFrame=agentActivityChart.createFrame(this);  activityChartFrame.setVisible(true);  activityChartFrame.pack();  c.registerFrame(activityChartFrame);  agentDeathChart=new TimeSeriesChartGenerator();  agentDeathChart.setTitle("Agent Deaths");  agentDeathChart.setRangeAxisLabel("Number of Agents");  agentDeathChart.setDomainAxisLabel("Time");  JFrame deathChartFrame=agentDeathChart.createFrame(this);  deathChartFrame.setVisible(true);  deathChartFrame.pack();  c.registerFrame(deathChartFrame);  centersFoodDistributionChart=new TimeSeriesChartGenerator();  centersFoodDistributionChart.setTitle("Centers Levels of Food");  centersFoodDistributionChart.setRangeAxisLabel("Amount of food");  centersFoodDistributionChart.setDomainAxisLabel("Time");  JFrame centersFoodChartFrame=centersFoodDistributionChart.createFrame(this);  centersFoodChartFrame.setVisible(true);  centersFoodChartFrame.pack();  c.registerFrame(centersFoodChartFrame);  centersLocalDensityChart=new TimeSeriesChartGenerator();  centersLocalDensityChart.setTitle("Density Around Centers");  centersLocalDensityChart.setRangeAxisLabel("Number of Agents within 500m of the Center");  centersLocalDensityChart.setDomainAxisLabel("Time");  JFrame centersDensityChartFrame=centersLocalDensityChart.createFrame(this);  centersDensityChartFrame.setVisible(true);  centersDensityChartFrame.pack();  c.registerFrame(centersDensityChartFrame);  agentRiotChart=new TimeSeriesChartGenerator();  agentRiotChart.setTitle("Number of Rioting Agents");  agentRiotChart.setRangeAxisLabel("Number of Agents Rioting");  agentRiotChart.setDomainAxisLabel("Time");  JFrame agentRiotChartFrame=agentRiotChart.createFrame(this);  agentRiotChartFrame.setVisible(true);  agentRiotChartFrame.pack();  c.registerFrame(agentRiotChartFrame);}  }
class C{  @Override public boolean isCircle(){  return mIsCircle;}  }
class C{  public void update(){  OsmElement e=getElement();  if (e != null) {    description=e.getDescription(false);    downloaded=true;  }}  }
class C{  @Override protected final int nextIndex(){  if (_expectedSize != _hash.size()) {    throw new ConcurrentModificationException();  }  Object[] set=_map._set;  int i=_index;  while (i-- > 0 && (set[i] == null || set[i] == TObjectHash.REMOVED))   ;  return i;}  }
class C{  public Kernel normalize(){  double sum=0.0;  for (  double value : values) {    sum+=value;  }  return mul(1.0 / sum);}  }
class C{  private void showPopupMenu(final MouseEvent event){  final JPopupMenu menu=new CModuleFilterFieldMenu(getFilterField());  menu.show(event.getComponent(),event.getX(),event.getY());}  }
class C{  public TextField(String text,String hint,int columns,int constraint){  this(text);  setHint(hint);  setColumns(columns);  setConstraint(constraint);}  }
class C{  public File baselineFile(){  return mBaselineFile;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.631 -0500",hash_original_method="EA5BCA16215C9C34CA5AC6D2E9340E92",hash_generated_method="8BCFD14ABAF0729FF1A1792BB1869177") public static Intent parseIntent(Resources resources,XmlPullParser parser,AttributeSet attrs) throws XmlPullParserException, IOException {  Intent intent=new Intent();  TypedArray sa=resources.obtainAttributes(attrs,com.android.internal.R.styleable.Intent);  intent.setAction(sa.getString(com.android.internal.R.styleable.Intent_action));  String data=sa.getString(com.android.internal.R.styleable.Intent_data);  String mimeType=sa.getString(com.android.internal.R.styleable.Intent_mimeType);  intent.setDataAndType(data != null ? Uri.parse(data) : null,mimeType);  String packageName=sa.getString(com.android.internal.R.styleable.Intent_targetPackage);  String className=sa.getString(com.android.internal.R.styleable.Intent_targetClass);  if (packageName != null && className != null) {    intent.setComponent(new ComponentName(packageName,className));  }  sa.recycle();  int outerDepth=parser.getDepth();  int type;  while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {    if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {      continue;    }    String nodeName=parser.getName();    if (nodeName.equals("category")) {      sa=resources.obtainAttributes(attrs,com.android.internal.R.styleable.IntentCategory);      String cat=sa.getString(com.android.internal.R.styleable.IntentCategory_name);      sa.recycle();      if (cat != null) {        intent.addCategory(cat);      }      XmlUtils.skipCurrentTag(parser);    } else     if (nodeName.equals("extra")) {      if (intent.mExtras == null) {        intent.mExtras=new HashMap<String,Object>();      }      XmlUtils.skipCurrentTag(parser);    } else {      XmlUtils.skipCurrentTag(parser);    }  }  return intent;}  }
class C{  public boolean equals(java.lang.Object obj){  return false;}  }
class C{  public NinePatchDrawable(Resources res,NinePatch patch){  this(new NinePatchState(patch,new Rect()),res);  mNinePatchState.mTargetDensity=mTargetDensity;}  }
class C{  public static Node toXML(Object value,Node defaultValue){  try {    return toXML(value);  } catch (  PageException e) {    return defaultValue;  }}  }
class C{  public static boolean isLocalResourceUri(@Nullable Uri uri){  final String scheme=getSchemeOrNull(uri);  return LOCAL_RESOURCE_SCHEME.equals(scheme);}  }
class C{  private AttrAck(final String val) throws BOSHException {  super(val);}  }
class C{  private long hash(final short[] a,final int l,final int k){  final int[] w=weight[k];  long h=init[k];  int i=l;  while (i-- != 0)   h^=(h << 5) + a[i] * w[i % NUMBER_OF_WEIGHTS] + (h >>> 2);  return (h & 0x7FFFFFFFFFFFFFFFL) % m;}  }
class C{  @Override public void onBeforeUpdatePendingChanges(final PendingChangeCacheEvent event){synchronized (refreshLock) {    refreshDefer++;  }}  }
class C{  private void deleteSelectedItems(){  SparseBooleanArray positions=listView.getCheckedItemPositions();  List<Todo> deletions=new ArrayList<Todo>();  if (positions.size() == 1) {    deletions.add(adapter.getItem(positions.keyAt(0)));  } else {    for (int i=0; i < positions.size(); i++) {      int key=positions.keyAt(i);      if (positions.get(key)) {        deletions.add(adapter.getItem(key));      }    }  }  for (  Todo item : deletions) {    TodoHelper.deleteTodo(getContentResolver(),item);  }  adapter.clearSelections();}  }
class C{  private static void addToParentGroup(final ModifiableConnection connectionDetails,final ConfiguredConnectionGroupDetails parent){  connectionDetails.setGroup(new ConnectionGroupReference(parent));  parent.getConnections().add(new ConnectionReference(connectionDetails));}  }
class C{  public boolean equals(Object other){  return compareTo(other) == 0;}  }
class C{  public void testCreateParentMissingPartially() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR),null);  create(igfs,paths(DIR),null);  createFile(igfs,FILE,true,chunk);  checkExist(igfs,igfsSecondary,SUBDIR);  checkFile(igfs,igfsSecondary,FILE,chunk);}  }
class C{  public void java_lang_Class_forName0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassObject());}  }
class C{  private void initializeTransformationConfig(TypedArray attributes){  useCircularTransformation=attributes.getBoolean(R.styleable.nox_use_circular_transformation,true);}  }
class C{  public javax2.sip.header.Header createHeader(String headerName,String headerValue) throws java.text.ParseException {  if (headerName == null)   throw new NullPointerException("header name is null");  String hdrText=new StringBuffer().append(headerName).append(":").append(headerValue).toString();  return createHeader(hdrText);}  }
class C{  public JPEGImageReadParam(){  super();}  }
class C{  protected void checkUnboundPrefixInEntRef(Node node){  Node child, next;  for (child=node.getFirstChild(); child != null; child=next) {    next=child.getNextSibling();    if (child.getNodeType() == Node.ELEMENT_NODE) {      String prefix=child.getPrefix();      if (prefix != null && fNSBinder.getURI(prefix) == null) {        String msg=Utils.messages.createMessage(MsgKey.ER_ELEM_UNBOUND_PREFIX_IN_ENTREF,new Object[]{node.getNodeName(),child.getNodeName(),prefix});        if (fErrorHandler != null) {          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_ELEM_UNBOUND_PREFIX_IN_ENTREF,null,null,null));        }      }      NamedNodeMap attrs=child.getAttributes();      for (int i=0; i < attrs.getLength(); i++) {        String attrPrefix=attrs.item(i).getPrefix();        if (attrPrefix != null && fNSBinder.getURI(attrPrefix) == null) {          String msg=Utils.messages.createMessage(MsgKey.ER_ATTR_UNBOUND_PREFIX_IN_ENTREF,new Object[]{node.getNodeName(),child.getNodeName(),attrs.item(i)});          if (fErrorHandler != null) {            fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_ATTR_UNBOUND_PREFIX_IN_ENTREF,null,null,null));          }        }      }    }    if (child.hasChildNodes()) {      checkUnboundPrefixInEntRef(child);    }  }}  }
class C{  public void deleteMessage(int messageIndex){synchronized (bufLock) {    buffer.remove(messageIndex);  }}  }
class C{  public static final void clearHostCredentials(String host){  CredentialsProvider credsProvider=Collect.getInstance().getCredentialsProvider();  Log.i(t,"clearHostCredentials: " + host);  List<AuthScope> asList=buildAuthScopes(host);  for (  AuthScope a : asList) {    credsProvider.setCredentials(a,null);  }}  }
class C{  @Override public void shutdownCustomImpl(){  super.shutdownCustomImpl();  String errorMsg=stopEvictor(MAX_SHUTDOWN_WAIT_MILLIS);  if (errorMsg != null) {    logger.error("Shutting down Evictor for Cache " + id() + " FAILED. Reason: "+ errorMsg);  } else {    logger.info("Shutting down Evictor for Cache " + id() + " OK");  }}  }
class C{  private void heapifyDown(double cur){  final int stop=size >>> 1;  int twopos=0;  while (twopos < stop) {    int bestchild=(twopos << 1) + 1;    double best=twoheap[bestchild];    final int right=bestchild + 1;    if (right < size && best > twoheap[right]) {      bestchild=right;      best=twoheap[right];    }    if (cur <= best) {      break;    }    twoheap[twopos]=best;    twopos=bestchild;  }  twoheap[twopos]=cur;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.158 -0500",hash_original_method="96E9024A0524487F4C2E52375F89DAF2",hash_generated_method="61DCE9732DA02773D3D2939E3FB0D6DE") public final void rotate(float degrees,float px,float py){  translate(px,py);  rotate(degrees);  translate(-px,-py);}  }
class C{  public boolean isValid(){  return isValid(getDefaultOptionalValidator(MessageFactory.SYSTEM_ERROR),null);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder(32);  if (isNegativeYear) {    sb.append('-');  }  sb.append(year);  sb.append('-');  sb.append(months);  sb.append('-');  sb.append(days);  sb.append('T');  sb.append(hours);  sb.append(':');  sb.append(minutes);  sb.append(':');  sb.append(seconds);  if (fractionalSeconds != null) {    sb.append('.');    sb.append(fractionalSeconds);  }  if (hoursTimezone != null) {    if (iHoursTimezone == 0 && iMinutesTimezone == 0) {      sb.append("Z");    } else {      if (isNegativeTimezone) {        sb.append('-');      } else {        sb.append('+');      }      sb.append(hoursTimezone);      sb.append(':');      sb.append(minutesTimezone);    }  }  return sb.toString();}  }
class C{  @Override protected AdaptableHeuristicFunction createHeuristic(int heuIdx){  AdaptableHeuristicFunction ahf=null;switch (heuIdx) {case 0:    ahf=new H1();  break;default :ahf=new H2();}return ahf.adaptToGoal(destinations.get(0),scenario.getAgentMap());}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (clusters == null) {    throw new NullPointerException();  }}  }
class C{  static String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public int read(byte[] buffer,int offset,int length) throws IOException {  int len=_next.read(buffer,offset,length);  _crc=Crc64.generate(_crc,buffer,offset,len);  return len;}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder(100);  buf.append("(CryptoPermission " + alg + " "+ maxKeySize);  if (algParamSpec != null) {    if (algParamSpec instanceof RC2ParameterSpec) {      buf.append(" , effective " + ((RC2ParameterSpec)algParamSpec).getEffectiveKeyBits());    } else     if (algParamSpec instanceof RC5ParameterSpec) {      buf.append(" , rounds " + ((RC5ParameterSpec)algParamSpec).getRounds());    }  }  if (exemptionMechanism != null) {    buf.append(" " + exemptionMechanism);  }  buf.append(")");  return buf.toString();}  }
class C{  private long decodeWeight(Long output){  assert output != null;  return (int)(Long.MAX_VALUE - output);}  }
class C{  protected boolean removeCascadedRow(int row){  boolean rv=super.removeRow(row);  if (rv)   ((CascadedRowManager)m_rows).remove(row);  return rv;}  }
class C{  private String linesToString(int startLine,String... lines){  final StringBuilder builder=new StringBuilder();  for (int i=0; i < lines.length; i++) {    if (i >= startLine) {      String line=lines[i];      builder.append(line).append(String.format("%n"));    }  }  return builder.toString();}  }
class C{  private static long packBits(int year,int month,int day,int hour,int minute,int second,int microsecond){  long tstamp=(long)microsecond;  tstamp|=((long)year) << YPOS;  tstamp|=((long)month) << MPOS;  tstamp|=((long)day) << DPOS;  tstamp|=((long)hour) << HPOS;  tstamp|=((long)minute) << IPOS;  tstamp|=((long)second) << SPOS;  return (tstamp);}  }
class C{  public boolean hasAttributeNS(String namespaceURI,String localName){  return hasAttribute(localName);}  }
class C{  public int hashCode(){  int hv=0;  if (key != -999)   return key;  for (int i=0; i < attributes.length; i++) {    if (missing[i]) {      hv+=(i * 13);    } else {      hv+=(i * 5 * (attributes[i] + 1));    }  }  if (key == -999) {    key=hv;  }  return hv;}  }
class C{  public boolean isBinary(){  return isBinary;}  }
class C{  public static void startActionFoo(Context context,String param1,String param2){  Intent intent=new Intent(context,MyIntentService1.class);  intent.setAction(ACTION_FOO);  intent.putExtra(EXTRA_PARAM1,param1);  intent.putExtra(EXTRA_PARAM2,param2);  context.startService(intent);}  }
class C{  public ColladaTriangles(String ns){  super(ns);}  }
class C{  public boolean isFlying(){  return (flyThroughDialog != null);}  }
class C{  public void print(float fnum){  print(String.valueOf(fnum));}  }
class C{  private static boolean IsAssignableFrom(JNIEnvironment env,int firstClassJREF,int secondClassJREF){  if (traceJNI)   VM.sysWrite("JNI called: IsAssignableFrom  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Class<?> cls1=(Class<?>)env.getJNIRef(firstClassJREF);    Class<?> cls2=(Class<?>)env.getJNIRef(secondClassJREF);    return !(cls1 == null || cls2 == null) && cls2.isAssignableFrom(cls1);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return false;  }}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {}  }
class C{  public Adapter createEObjectAdapter(){  return null;}  }
class C{  public SyncOkHttpApnsClient(InputStream certificate,String password,boolean production,String defaultTopic,ConnectionPool connectionPool) throws CertificateException, NoSuchAlgorithmException, KeyStoreException, IOException, UnrecoverableKeyException, KeyManagementException {  password=password == null ? "" : password;  KeyStore ks=KeyStore.getInstance("PKCS12");  ks.load(certificate,password.toCharArray());  final X509Certificate cert=(X509Certificate)ks.getCertificate(ks.aliases().nextElement());  CertificateUtils.validateCertificate(production,cert);  KeyManagerFactory kmf=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());  kmf.init(ks,password.toCharArray());  KeyManager[] keyManagers=kmf.getKeyManagers();  SSLContext sslContext=SSLContext.getInstance("TLS");  final TrustManagerFactory tmf=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());  tmf.init((KeyStore)null);  sslContext.init(keyManagers,tmf.getTrustManagers(),null);  final SSLSocketFactory sslSocketFactory=sslContext.getSocketFactory();  OkHttpClient.Builder builder=new OkHttpClient.Builder();  builder.connectTimeout(10,TimeUnit.SECONDS).writeTimeout(10,TimeUnit.SECONDS).readTimeout(30,TimeUnit.SECONDS);  builder.sslSocketFactory(sslSocketFactory);  connectionPool=connectionPool == null ? new ConnectionPool(10,10,TimeUnit.MINUTES) : connectionPool;  builder.connectionPool(connectionPool);  this.defaultTopic=defaultTopic;  client=builder.build();  if (production) {    gateway=Constants.ENDPOINT_PRODUCTION;  } else {    gateway=Constants.ENDPOINT_SANDBOX;  }}  }
class C{  public GitlabLabel createLabel(Serializable projectId,GitlabLabel label) throws IOException {  String name=label.getName();  String color=label.getColor();  return createLabel(projectId,name,color);}  }
class C{  public TupleComparator(int col,Class type,boolean ascend){  this(col,type,ascend,DefaultLiteralComparator.getInstance());}  }
class C{  public static String extractResponse(String samlRequestParameter) throws Exception {  Inflater decompresser=new Inflater(true);  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();  InflaterOutputStream inflaterOutputStream=new InflaterOutputStream(byteArrayOutputStream,decompresser);  inflaterOutputStream.write(Base64.decode(samlRequestParameter));  inflaterOutputStream.close();  String outputString=new String(byteArrayOutputStream.toByteArray(),"UTF-8");  return outputString;}  }
class C{  private static void addFields(Collection<String> src,String owner,Collection<PojoField> fields){  for (  PojoField field : fields) {    String javaTypeName=field.javaTypeName();    if (javaTypeName.startsWith(JAVA_LANG_PKG))     javaTypeName=javaTypeName.substring(JAVA_LANG_PKG.length()); else     if (javaTypeName.startsWith(JAVA_UTIL_PKG))     javaTypeName=javaTypeName.substring(JAVA_UTIL_PKG.length());    add2(src,owner + ".add(new JdbcTypeField(Types." + field.dbTypeName()+ ", \""+ field.dbName()+ "\", "+ javaTypeName+ ".class, \""+ field.javaName()+ "\"));");  }}  }
class C{  private void parse(File tmd) throws IOException {  RandomAccessFile f=new RandomAccessFile(tmd,"r");  f.seek(0);  this.signatureType=f.readInt();  f.read(signature,0,0x100);  f.seek(0x140);  f.read(issuer,0,0x40);  f.seek(0x180);  this.version=f.readByte();  this.CACRLVersion=f.readByte();  this.signerCRLVersion=f.readByte();  f.seek(0x184);  this.systemVersion=f.readLong();  this.titleID=f.readLong();  this.titleType=f.readInt();  this.groupID=f.readShort();  f.seek(0x19A);  f.read(reserved,0,62);  f.seek(0x1D8);  this.accessRights=f.readInt();  this.titleVersion=f.readShort();  this.contentCount=f.readShort();  this.bootIndex=f.readShort();  f.seek(0x1E4);  f.read(SHA2,0,32);  f.seek(0x204);  short indexOffset;  short commandCount;  for (int i=0; i < 64; i++) {    f.seek(0x204 + (0x24 * i));    indexOffset=f.readShort();    commandCount=f.readShort();    byte[] buffer=new byte[0x20];    f.read(buffer,0,0x20);    this.contentInfos[i]=new ContentInfo(indexOffset,commandCount,buffer);  }  this.contents=new Content[contentCount];  int ID;  short index;  short type;  long size;  for (int i=0; i < contentCount; i++) {    f.seek(0xB04 + (0x30 * i));    ID=f.readInt();    index=f.readShort();    type=f.readShort();    size=f.readLong();    byte[] buffer=new byte[0x20];    f.read(buffer,0,0x20);    this.contents[i]=new Content(ID,index,type,size,buffer,this);  }  if (f.read(cert2,0,0x300) != 0x300) {    Logger.log("Error reading TMD cert2");  }  if (f.read(cert1,0,0x400) != 0x400) {    Logger.log("Error reading TMD cert1");  }  f.close();}  }
class C{  public Boolean isDisabled(){  return disabled;}  }
class C{  public static void dumpCursor(Cursor cursor,PrintStream stream){  stream.println(">>>>> Dumping cursor " + cursor);  if (cursor != null) {    int startPos=cursor.getPosition();    cursor.moveToPosition(-1);    while (cursor.moveToNext()) {      dumpCurrentRow(cursor,stream);    }    cursor.moveToPosition(startPos);  }  stream.println("<<<<<");}  }
class C{  private Script(){  chunks=Lists.newArrayList();}  }
class C{  public void addCoreModules(){  this.global=new GlobalConfigGroup();  this.modules.put(GlobalConfigGroup.GROUP_NAME,this.global);  this.controler=new ControlerConfigGroup();  this.modules.put(ControlerConfigGroup.GROUP_NAME,this.controler);  this.qSimConfigGroup=new QSimConfigGroup();  this.modules.put(QSimConfigGroup.GROUP_NAME,this.qSimConfigGroup);  this.counts=new CountsConfigGroup();  this.modules.put(CountsConfigGroup.GROUP_NAME,this.counts);  this.charyparNagelScoring=new PlanCalcScoreConfigGroup();  this.modules.put(PlanCalcScoreConfigGroup.GROUP_NAME,this.charyparNagelScoring);  this.network=new NetworkConfigGroup();  this.modules.put(NetworkConfigGroup.GROUP_NAME,this.network);  this.plans=new PlansConfigGroup();  this.modules.put(PlansConfigGroup.GROUP_NAME,this.plans);  this.households=new HouseholdsConfigGroup();  this.modules.put(HouseholdsConfigGroup.GROUP_NAME,this.households);  this.parallelEventHandling=new ParallelEventHandlingConfigGroup();  this.modules.put(ParallelEventHandlingConfigGroup.GROUP_NAME,this.parallelEventHandling);  this.facilities=new FacilitiesConfigGroup();  this.modules.put(FacilitiesConfigGroup.GROUP_NAME,this.facilities);  this.strategy=new StrategyConfigGroup();  this.modules.put(StrategyConfigGroup.GROUP_NAME,this.strategy);  this.travelTimeCalculatorConfigGroup=new TravelTimeCalculatorConfigGroup();  this.modules.put(TravelTimeCalculatorConfigGroup.GROUPNAME,this.travelTimeCalculatorConfigGroup);  this.scenarioConfigGroup=new ScenarioConfigGroup();  this.modules.put(ScenarioConfigGroup.GROUP_NAME,this.scenarioConfigGroup);  this.plansCalcRoute=new PlansCalcRouteConfigGroup();  this.modules.put(PlansCalcRouteConfigGroup.GROUP_NAME,this.plansCalcRoute);  this.timeAllocationMutator=new TimeAllocationMutatorConfigGroup();  this.modules.put(TimeAllocationMutatorConfigGroup.GROUP_NAME,this.timeAllocationMutator);  this.vspExperimentalGroup=new VspExperimentalConfigGroup();  this.modules.put(VspExperimentalConfigGroup.GROUP_NAME,this.vspExperimentalGroup);  this.ptCounts=new PtCountsConfigGroup();  this.modules.put(PtCountsConfigGroup.GROUP_NAME,this.ptCounts);  this.transit=new TransitConfigGroup();  this.modules.put(TransitConfigGroup.GROUP_NAME,this.transit);  this.linkStats=new LinkStatsConfigGroup();  this.modules.put(LinkStatsConfigGroup.GROUP_NAME,this.linkStats);  this.transitRouter=new TransitRouterConfigGroup();  this.modules.put(TransitRouterConfigGroup.GROUP_NAME,this.transitRouter);  this.subtourModeChoice=new SubtourModeChoiceConfigGroup();  this.modules.put(SubtourModeChoiceConfigGroup.GROUP_NAME,this.subtourModeChoice);  this.vehicles=new VehiclesConfigGroup();  this.modules.put(VehiclesConfigGroup.GROUP_NAME,this.vehicles);  this.changeMode=new ChangeModeConfigGroup();  this.modules.put(ChangeModeConfigGroup.CONFIG_MODULE,this.changeMode);  this.modules.put(ChangeLegModeConfigGroup.CONFIG_MODULE,new ChangeLegModeConfigGroup());  this.jdeqSim=new JDEQSimConfigGroup();  this.modules.put(JDEQSimConfigGroup.NAME,this.jdeqSim);  this.addConfigConsistencyChecker(new VspConfigConsistencyCheckerImpl());  this.addConfigConsistencyChecker(new UnmaterializedConfigGroupChecker());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.303 -0500",hash_original_method="DF78170F74F7916B8CA044C6FA0E7706",hash_generated_method="BBBCFF4693D5F2C3DA4308D56E7A969E") public void drawVertices(VertexMode mode,int vertexCount,float[] verts,int vertOffset,float[] texs,int texOffset,int[] colors,int colorOffset,short[] indices,int indexOffset,int indexCount,Paint paint){  checkRange(verts.length,vertOffset,vertexCount);  if (texs != null) {    checkRange(texs.length,texOffset,vertexCount);  }  if (colors != null) {    checkRange(colors.length,colorOffset,vertexCount / 2);  }  if (indices != null) {    checkRange(indices.length,indexOffset,indexCount);  }  nativeDrawVertices(mNativeCanvas,mode.nativeInt,vertexCount,verts,vertOffset,texs,texOffset,colors,colorOffset,indices,indexOffset,indexCount,paint.mNativePaint);}  }
class C{  public void handleEmergency(Emergency emergency){  if (!controller.getCurrentStateId().equals("Idle")) {    throw new IllegalStateException();  }  this.emergency=emergency;  controller.release();}  }
class C{  public static GitRevisionNumber resolve(Project project,VirtualFile vcsRoot,@NonNls String rev) throws VcsException {  GitSimpleHandler h=new GitSimpleHandler(project,vcsRoot,GitCommand.REV_LIST);  h.setSilent(true);  h.addParameters("--timestamp","--max-count=1",rev);  h.endOptions();  final String output=h.run();  return parseRevlistOutputAsRevisionNumber(h,output);}  }
class C{  public int describeContents(){  return 0;}  }
class C{  public boolean GE(Word w2){  return false;}  }
class C{  protected boolean isDragging(){  return this.dragging;}  }
class C{  public static void UF2(double[] x,double[] f,int nx){  int count1=0;  int count2=0;  double sum1=0.0;  double sum2=0.0;  double yj;  for (int j=2; j <= nx; j++) {    if (j % 2 == 0) {      yj=x[j - 1] - 0.3 * x[0] * (x[0] * Math.cos(24.0 * PI * x[0] + 4.0 * j * PI / nx) + 2.0)* Math.sin(6.0 * PI * x[0] + j * PI / nx);      sum2+=yj * yj;      count2++;    } else {      yj=x[j - 1] - 0.3 * x[0] * (x[0] * Math.cos(24.0 * PI * x[0] + 4.0 * j * PI / nx) + 2.0)* Math.cos(6.0 * PI * x[0] + j * PI / nx);      sum1+=yj * yj;      count1++;    }  }  f[0]=x[0] + 2.0 * sum1 / (double)count1;  f[1]=1.0 - Math.sqrt(x[0]) + 2.0 * sum2 / (double)count2;}  }
class C{  @Override public void renderLimitLines(Canvas c){  List<LimitLine> limitLines=mYAxis.getLimitLines();  if (limitLines == null || limitLines.size() <= 0)   return;  float[] pts=new float[2];  Path limitLinePath=new Path();  for (int i=0; i < limitLines.size(); i++) {    LimitLine l=limitLines.get(i);    mLimitLinePaint.setStyle(Paint.Style.STROKE);    mLimitLinePaint.setColor(l.getLineColor());    mLimitLinePaint.setStrokeWidth(l.getLineWidth());    mLimitLinePaint.setPathEffect(l.getDashPathEffect());    pts[1]=l.getLimit();    mTrans.pointValuesToPixel(pts);    limitLinePath.moveTo(mViewPortHandler.contentLeft(),pts[1]);    limitLinePath.lineTo(mViewPortHandler.contentRight(),pts[1]);    c.drawPath(limitLinePath,mLimitLinePaint);    limitLinePath.reset();    String label=l.getLabel();    if (label != null && !label.equals("")) {      float xOffset=Utils.convertDpToPixel(4f);      float yOffset=l.getLineWidth() + Utils.calcTextHeight(mLimitLinePaint,label) / 2f;      mLimitLinePaint.setStyle(l.getTextStyle());      mLimitLinePaint.setPathEffect(null);      mLimitLinePaint.setColor(l.getTextColor());      mLimitLinePaint.setStrokeWidth(0.5f);      mLimitLinePaint.setTextSize(l.getTextSize());      if (l.getLabelPosition() == LimitLabelPosition.POS_RIGHT) {        mLimitLinePaint.setTextAlign(Align.RIGHT);        c.drawText(label,mViewPortHandler.contentRight() - xOffset,pts[1] - yOffset,mLimitLinePaint);      } else {        mLimitLinePaint.setTextAlign(Align.LEFT);        c.drawText(label,mViewPortHandler.offsetLeft() + xOffset,pts[1] - yOffset,mLimitLinePaint);      }    }  }}  }
class C{  public boolean supportsSessionVariables(){  return true;}  }
class C{  public boolean prepare(int mode){  if (DEBUG) {    Slog.d(TAG,"prepare: mode=" + mode);  }  mMode=mode;  DisplayInfo displayInfo=mDisplayManager.getDisplayInfo(Display.DEFAULT_DISPLAY);  mDisplayLayerStack=displayInfo.layerStack;  if (mSwapNeeded) {    mDisplayWidth=displayInfo.getNaturalHeight();    mDisplayHeight=displayInfo.getNaturalWidth();  } else {    mDisplayWidth=displayInfo.getNaturalWidth();    mDisplayHeight=displayInfo.getNaturalHeight();  }  if (!tryPrepare()) {    dismiss();    return false;  }  mPrepared=true;  if (mode == MODE_COOL_DOWN) {    for (int i=0; i < DEJANK_FRAMES; i++) {      draw(1.0f);    }  }  return true;}  }
class C{  @Override public int hashCode(){  int[] parts=new int[this.rowIndices.size()];  for (int i=0; i < parts.length; ++i)   parts[i]=Arrays.hashCode(this.rowIndices.get(i));  return Arrays.hashCode(parts);}  }
class C{  @ApiOperation(value="Create new workspace member",notes="Add a new member into a workspace with a set of specified roles. A new member should be a registered " + "user. One or both roles can be assigned. Rolles allowed: account/owner, workspace/admin",response=MemberDescriptor.class) @ApiResponses(value={@ApiResponse(code=201,message="OK"),@ApiResponse(code=403,message="User not authorized to perform this operation"),@ApiResponse(code=404,message="Not Found"),@ApiResponse(code=409,message="No user ID and/or role specified")}) @POST @Path("/{id}/members") @RolesAllowed({"user","temp_user"}) @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) public Response addMember(@ApiParam("Workspace ID") @PathParam("id") String wsId,@ApiParam(value="New membership",required=true) NewMembership newMembership,@Context SecurityContext context) throws NotFoundException, ServerException, ConflictException, ForbiddenException, BadRequestException {  requiredNotNull(newMembership,"New membership");  requiredNotNull(newMembership.getUserId(),"User ID");  final Workspace workspace=workspaceDao.getById(wsId);  if (memberDao.getWorkspaceMembers(wsId).isEmpty()) {    newMembership.setRoles(asList("workspace/admin","workspace/developer"));  } else {    requiredNotNull(newMembership.getRoles(),"Roles");    if (newMembership.getRoles().isEmpty()) {      throw new ConflictException("Roles should not be empty");    }    if (!context.isUserInRole("workspace/admin") && !parseBoolean(workspace.getAttributes().get("allowAnyoneAddMember")) && !isCurrentUserAccountOwnerOf(wsId)) {      throw new ForbiddenException("Access denied");    }  }  final User user=userDao.getById(newMembership.getUserId());  final Member newMember=new Member().withWorkspaceId(wsId).withUserId(user.getId()).withRoles(newMembership.getRoles());  memberDao.create(newMember);  return status(CREATED).entity(toDescriptor(newMember,workspace,context)).build();}  }
class C{  @Override protected TreeNode makeNavTreeTopNode(String treeFile,PanedInterface rightTopWI){  DefaultMutableTreeNode top=JTreeUtil.loadTree(treeFile,rightTopWI,null);  System.err.print("Manually attempting to create two LocoNet trees for testing purposes");  LocoNetSystemConnectionMemo lm1=jmri.InstanceManager.getList(LocoNetSystemConnectionMemo.class).get(0);  if (lm1 != null) {    DefaultMutableTreeNode l1=JTreeUtil.loadTree("xml/config/parts/jmri/jmrix/loconet/ToolsTree.xml",rightTopWI,lm1);    l1.setUserObject("LocoNet");    top.add(l1);  }  LocoNetSystemConnectionMemo lm2=jmri.InstanceManager.getList(LocoNetSystemConnectionMemo.class).get(1);  if (lm2 != null) {    DefaultMutableTreeNode l2=JTreeUtil.loadTree("xml/config/parts/jmri/jmrix/loconet/ToolsTree.xml",rightTopWI,lm2);    l2.setUserObject("LocoNet2");    top.add(l2);  }  return top;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:30.555 -0500",hash_original_method="D1571833DCBC36BAA4E4DA8F2A5DB363",hash_generated_method="1936EA1E115B9D19E1420BAFC14E457A") private View makeAndAddView(int position,int y,boolean flow,int childrenLeft,boolean selected,int where){  View child;  if (!mDataChanged) {    child=mRecycler.getActiveView(position);    if (child != null) {      setupChild(child,position,y,flow,childrenLeft,selected,true,where);      return child;    }  }  child=obtainView(position,mIsScrap);  setupChild(child,position,y,flow,childrenLeft,selected,mIsScrap[0],where);  return child;}  }
class C{  public void reset(){  for (int i=0; i < buf.length; i++) {    buf[i]=0;  }  bufOff=0;  cipher.reset();}  }
class C{  public static boolean isKeyword(String s,boolean supportOffsetFetch){  if (s == null || s.length() == 0) {    return false;  }  return getSaveTokenType(s,supportOffsetFetch) != IDENTIFIER;}  }
class C{  public void rename(SchemaObject obj,String newName){  int type=obj.getType();  HashMap<String,SchemaObject> map=getMap(type);  if (SysProperties.CHECK) {    if (!map.containsKey(obj.getName())) {      DbException.throwInternalError("not found: " + obj.getName());    }    if (obj.getName().equals(newName) || map.containsKey(newName)) {      DbException.throwInternalError("object already exists: " + newName);    }  }  obj.checkRename();  map.remove(obj.getName());  freeUniqueName(obj.getName());  obj.rename(newName);  map.put(newName,obj);  freeUniqueName(newName);}  }
class C{  public long calcFreeGpsTimeMs(long currTimeMs){  return (long)((currTimeMs - startTimeFromPhoneBootMs) * prefs.batteryGpsOnTimePercentage - totalTimeGpsRunningMs);}  }
class C{  public Object clone() throws CloneNotSupportedException {  AbstractEvent newEvent=(AbstractEvent)super.clone();  newEvent.timeStamp=System.currentTimeMillis();  return newEvent;}  }
class C{  public static float[] floats(float... elements){  return elements;}  }
class C{  public IzhikevichRulePanel(){  super();  this.add(tabbedPane);  JTextField tfA=createTextField(null,null);  JTextField tfB=createTextField(null,null);  JTextField tfC=createTextField(null,null);  JTextField tfD=createTextField(null,null);  JTextField tfIBg=createTextField(null,null);  mainTab.addItem("A",tfA);  mainTab.addItem("B",tfB);  mainTab.addItem("C",tfC);  mainTab.addItem("D",tfD);  mainTab.addItem("Ibg",tfIBg);  mainTab.addItem("Add noise",getAddNoise());  tabbedPane.add(mainTab,"Main");  tabbedPane.add(getNoisePanel(),"Noise");  this.addBottomText("<html>For a list of useful parameter settings<p>" + "press the \"Help\" Button.</html>");}  }
class C{  private void installIfAvailable(){  if (mInstallBundle != null && !mInstallBundle.isEmpty()) {    Bundle bundle=mInstallBundle;    mInstallBundle=null;    final int uid=bundle.getInt(Credentials.EXTRA_INSTALL_AS_UID,-1);    if (bundle.containsKey(Credentials.EXTRA_USER_PRIVATE_KEY_NAME)) {      String key=bundle.getString(Credentials.EXTRA_USER_PRIVATE_KEY_NAME);      byte[] value=bundle.getByteArray(Credentials.EXTRA_USER_PRIVATE_KEY_DATA);      if (!mKeyStore.importKey(key,value,uid,KeyStore.FLAG_ENCRYPTED)) {        Log.e(TAG,"Failed to install " + key + " as user "+ uid);        return;      }    }    if (bundle.containsKey(Credentials.EXTRA_USER_CERTIFICATE_NAME)) {      String certName=bundle.getString(Credentials.EXTRA_USER_CERTIFICATE_NAME);      byte[] certData=bundle.getByteArray(Credentials.EXTRA_USER_CERTIFICATE_DATA);      if (!mKeyStore.put(certName,certData,uid,KeyStore.FLAG_ENCRYPTED)) {        Log.e(TAG,"Failed to install " + certName + " as user "+ uid);        return;      }    }    if (bundle.containsKey(Credentials.EXTRA_CA_CERTIFICATES_NAME)) {      String caListName=bundle.getString(Credentials.EXTRA_CA_CERTIFICATES_NAME);      byte[] caListData=bundle.getByteArray(Credentials.EXTRA_CA_CERTIFICATES_DATA);      if (!mKeyStore.put(caListName,caListData,uid,KeyStore.FLAG_ENCRYPTED)) {        Log.e(TAG,"Failed to install " + caListName + " as user "+ uid);        return;      }    }    setResult(RESULT_OK);  }}  }
class C{  public GeometryCollection read(GeometryFactory geometryFactory) throws IOException, ShapefileException, Exception {  EndianDataInputStream file=getInputStream();  if (file == null)   throw new IOException("Failed connection or no content for " + baseURL);  ShapefileHeader mainHeader=new ShapefileHeader(file);  if (mainHeader.getVersion() < VERSION) {    System.err.println("Sf-->Warning, Shapefile format (" + mainHeader.getVersion() + ") older that supported ("+ VERSION+ "), attempting to read anyway");  }  if (mainHeader.getVersion() > VERSION) {    System.err.println("Sf-->Warning, Shapefile format (" + mainHeader.getVersion() + ") newer that supported ("+ VERSION+ "), attempting to read anyway");  }  Geometry body;  ArrayList list=new ArrayList();  int type=mainHeader.getShapeType();  ShapeHandler handler=getShapeHandler(type);  if (handler == null)   throw new ShapeTypeNotSupportedException("Unsuported shape type:" + type);  int recordNumber=0;  int contentLength=0;  try {    while (true) {      recordNumber=file.readIntBE();      contentLength=file.readIntBE();      try {        body=handler.read(file,geometryFactory,contentLength);        list.add(body);      } catch (      IllegalArgumentException r2d2) {        list.add(new GeometryCollection(null,null,-1));      }catch (      Exception c3p0) {        System.out.println("Error processing record (a):" + recordNumber);        System.out.println(c3p0.getMessage());        c3p0.printStackTrace();        list.add(new GeometryCollection(null,null,-1));      }    }  } catch (  EOFException e) {  }  return geometryFactory.createGeometryCollection((Geometry[])list.toArray(new Geometry[]{}));}  }
class C{  public Template template(){  return template;}  }
class C{  @Override public String toString(){  StringBuffer buff=new StringBuffer();  Iterator<BinaryItem> i=m_items.iterator();  while (i.hasNext()) {    buff.append(i.next().toString() + " ");  }  buff.append(": " + m_support);  return buff.toString();}  }
class C{  private void introspectMethods(JavaClass jClass){  for (  Method method : getMethods()) {    Class<?>[] paramTypes=method.getParameterTypes();    int paramLen=paramTypes.length;    if (!Modifier.isAbstract(method.getModifiers())) {      continue;    }    if (Modifier.isStatic(method.getModifiers())) {      continue;    }    if (Modifier.isFinal(method.getModifiers())) {      continue;    }    if (method.getDeclaringClass().equals(Object.class)) {      continue;    }    if (method.getName().equals("toString") && paramLen == 0) {      continue;    }    if (method.getName().equals("hashCode") && paramLen == 0) {      continue;    }    if (method.getName().equals("equals") && paramLen == 1 && paramTypes[0].equals(Object.class)) {      continue;    }    int ampResult=findAmpResult(paramTypes,Result.class);    if (isCreate(method) || isFind(method)) {      if (ampResult < 0) {        throw new IllegalStateException(L.l("Result argument is required {0}",method));      }      if (!void.class.equals(method.getReturnType())) {        throw new IllegalArgumentException(L.l("method must return void {0}",method));      }    }    if (paramLen > 0 && ampResult >= 0) {      createAmpResultMethod(jClass,method,ampResult);    } else     if (ampResult < 0) {      createAmpSendMethod(jClass,method);    } else {      throw new IllegalStateException(method.toString());    }  }}  }
class C{  public String toString(){  return "[Remote " + url + "]";}  }
class C{  public static boolean isGlobalEnvFrame(Frame frame){  return isFrameForEnv(frame,RContext.getInstance().stateREnvironment.getGlobalEnv());}  }
class C{  public boolean isIPAddressInRange(IPAddress address){  if (ipSubnetMask == null) {    return this.ipAddress.equals(address);  }  int result1=address.getIPAddress() & ipSubnetMask.getIPAddress();  int result2=ipAddress.getIPAddress() & ipSubnetMask.getIPAddress();  return result1 == result2;}  }
class C{  public void addShape3D(float x,float y,float z,Shape2D shape,float depth,int shapeTextureWidth,int shapeTextureHeight,int sideTextureWidth,int sideTextureHeight,int direction,float[] faceLengths){  float rotX=0;  float rotY=0;  float rotZ=0;switch (direction) {case MR_LEFT:    rotY=pi / 2;  break;case MR_RIGHT:rotY=-pi / 2;break;case MR_TOP:rotX=pi / 2;break;case MR_BOTTOM:rotX=-pi / 2;break;case MR_FRONT:rotY=pi;break;case MR_BACK:break;}addShape3D(x,y,z,shape,depth,shapeTextureWidth,shapeTextureHeight,sideTextureWidth,sideTextureHeight,rotX,rotY,rotZ,faceLengths);}  }
class C{  public String sendSms(SmsMessage msg,String dest,String sender) throws SmsException, IOException {  SmsAddress destAddress=new SmsAddress(dest);  SmsAddress senderAddress=null;  if (sender != null) {    senderAddress=new SmsAddress(sender);  }  return transport_.send(msg,destAddress,senderAddress);}  }
class C{  public Average(){  super("statistical.avg",FunctionDescription.UNFIXED_NUMBER_OF_ARGUMENTS,Ontology.NUMERICAL);}  }
class C{  public void saveLanguage(Language language){  if (language != null) {    Gson gson=new Gson();    try {      String jsonLocations=gson.toJson(language);      editor.putString(PREF_SAVED_LANGUAGE,jsonLocations).apply();    } catch (    Exception ex) {      ex.printStackTrace();    }  }}  }
class C{  public boolean isDigest(String value){  if (value == null || value.length() != 32)   return false;  return (convertHexString(value) != null);}  }
class C{  public void addFeature(int[] fIdxArray,double[] fValueArray){  idxList.addAll(Ints.asList(fIdxArray));  for (int i=0; i < fIdxArray.length; i++) {    valList.add((float)fValueArray[i]);  }}  }
class C{  public CSVParser(char separator,char quotechar,char escape,boolean strictQuotes,boolean ignoreLeadingWhiteSpace){  this(separator,quotechar,escape,strictQuotes,ignoreLeadingWhiteSpace,DEFAULT_IGNORE_QUOTATIONS);}  }
class C{  public static OnlyBranchCoverageTestFitness createOnlyBranchCoverageTestFitness(ControlDependency cd){  return createOnlyBranchCoverageTestFitness(cd.getBranch(),cd.getBranchExpressionValue());}  }
class C{  public RelativeDecoratorLocator(double relativeX,double relativeY){  super(relativeX,relativeY);}  }
class C{  private byte[] padV15(byte[] data) throws BadPaddingException {  byte[] padded=new byte[paddedSize];  System.arraycopy(data,0,padded,paddedSize - data.length,data.length);  int psSize=paddedSize - 3 - data.length;  int k=0;  padded[k++]=0;  padded[k++]=(byte)type;  if (type == PAD_BLOCKTYPE_1) {    while (psSize-- > 0) {      padded[k++]=(byte)0xff;    }  } else {    if (random == null) {      random=JCAUtil.getSecureRandom();    }    byte[] r=new byte[64];    int i=-1;    while (psSize-- > 0) {      int b;      do {        if (i < 0) {          random.nextBytes(r);          i=r.length - 1;        }        b=r[i--] & 0xff;      } while (b == 0);      padded[k++]=(byte)b;    }  }  return padded;}  }
class C{  public boolean isActive(){  return this.isActive;}  }
class C{  public int size(){  return size;}  }
class C{  public VcfRecord addFormatAndSample(String key,String val){  if (mFormatAndSample.containsKey(key)) {    assert mFormatAndSample.get(key).size() < mNumSamples : "Tried to insert more " + key + " format values than number of samples";    mFormatAndSample.get(key).add(val);  } else {    final ArrayList<String> list=new ArrayList<>();    list.add(val);    mFormatAndSample.put(key,list);  }  return this;}  }
class C{  public String go(){  StringWriter sw=new StringWriter();  try {    go(sw);  } catch (  IOException e) {    throw new RuntimeException(e);  }  return sw.toString();}  }
class C{  PageLoader(Document doc,InputStream in,URL old,URL page){  this.in=in;  this.old=old;  this.page=page;  this.doc=doc;}  }
class C{  public boolean isBillingDataAvailable(){  return billingData != null;}  }
class C{  private boolean identifySuccessors(AStarNode node){  int x=node.x;  int z=node.z;  ArrayList<AStarNode> successors=findNeighbours(node);  for (  AStarNode s : successors) {    AStarNode jumpPoint=jump(s.x,s.y,s.z,x,z);    if (jumpPoint != null) {      if (closedNodes.contains(jumpPoint)) {        continue;      }      addOrUpdateNode(jumpPoint);    }  }  return false;}  }
class C{  public SageIOFileChannel(SageFileSource sageFileSource){  if (sageFileSource instanceof BufferedSageFile) {    this.randomFileSource=(BufferedSageFile)sageFileSource;    alwaysFlush=false;  } else {    this.randomFileSource=new BufferedSageFile(sageFileSource,BufferedSageFile.READ_BUFFER_NIO_LIMIT,BufferedSageFile.WRITE_BUFFER_SIZE);    alwaysFlush=true;  }}  }
class C{  public void restore(final String backupPath,final String snapshotName,final boolean geoRestoreFromScratch){  log.info("Start to restore backup...");  try {    validateBackupFolder(backupPath,snapshotName);    purge(false);    if (onlyRestoreSiteId) {      zkRestoreHandler.setOnlyRestoreSiteId(true);      zkRestoreHandler.replace();      log.info("Backup ({}) has been restored (only site id) on local successfully",snapshotName);      return;    }    dbRestoreHandler.replace();    log.info(String.format(OUTPUT_FORMAT,"Restore data of local database",Validation.passed.name()));    zkRestoreHandler.replace();    log.info(String.format(OUTPUT_FORMAT,"Restore data of coordinator",Validation.passed.name()));    geoDbRestoreHandler.replace(geoRestoreFromScratch);    log.info(String.format(OUTPUT_FORMAT,"Restore data of geo database",Validation.passed.name()));  } catch (  Exception ex) {    log.error("Failed to restore with backupset({})",snapshotName,ex);    throw BackupException.fatals.failedToRestoreBackup(snapshotName,ex);  }  log.info("Backup ({}) has been restored on local successfully",snapshotName);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void readFully(InputStream in,byte[] dst) throws IOException {  readFully(in,dst,0,dst.length);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append("Cookie[" + this.name + "="+ this.value);  if (this.path != null)   sb.append(",path=" + this.path);  if (this.domain != null)   sb.append(",domain=" + this.domain);  if (this.maxAge > 0)   sb.append(",max-age=" + this.maxAge);  if (this.secure)   sb.append(",secure");  if (this.isHttpOnly)   sb.append(",httpOnly");  sb.append("]");  return sb.toString();}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public static String removeExtension(String fileName){  if (fileName == null) {    return null;  }  int extensionPos=fileName.lastIndexOf(".");  int lastSeparator=Math.max(fileName.lastIndexOf('/'),fileName.lastIndexOf('\\'));  int index=(lastSeparator > extensionPos) ? -1 : extensionPos;  if (index == -1) {    return fileName;  }  return fileName.substring(0,index);}  }
class C{  public void zeroFields(){  this.totalPrincipalDisbursed=BigDecimal.ZERO;  this.totalPrincipalRepaid=BigDecimal.ZERO;  this.totalPrincipalWrittenOff=BigDecimal.ZERO;  this.totalPrincipalOutstanding=BigDecimal.ZERO;  this.totalInterestCharged=BigDecimal.ZERO;  this.totalInterestRepaid=BigDecimal.ZERO;  this.totalInterestWaived=BigDecimal.ZERO;  this.totalInterestWrittenOff=BigDecimal.ZERO;  this.totalInterestOutstanding=BigDecimal.ZERO;  this.totalFeeChargesCharged=BigDecimal.ZERO;  this.totalFeeChargesRepaid=BigDecimal.ZERO;  this.totalFeeChargesWaived=BigDecimal.ZERO;  this.totalFeeChargesWrittenOff=BigDecimal.ZERO;  this.totalFeeChargesOutstanding=BigDecimal.ZERO;  this.totalPenaltyChargesCharged=BigDecimal.ZERO;  this.totalPenaltyChargesRepaid=BigDecimal.ZERO;  this.totalPenaltyChargesWaived=BigDecimal.ZERO;  this.totalPenaltyChargesWrittenOff=BigDecimal.ZERO;  this.totalPenaltyChargesOutstanding=BigDecimal.ZERO;  this.totalExpectedRepayment=BigDecimal.ZERO;  this.totalRepayment=BigDecimal.ZERO;  this.totalExpectedCostOfLoan=BigDecimal.ZERO;  this.totalCostOfLoan=BigDecimal.ZERO;  this.totalWaived=BigDecimal.ZERO;  this.totalWrittenOff=BigDecimal.ZERO;  this.totalOutstanding=BigDecimal.ZERO;}  }
class C{  public void print(PrintWriter output,int w,int d){  DecimalFormat format=new DecimalFormat();  format.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));  format.setMinimumIntegerDigits(1);  format.setMaximumFractionDigits(d);  format.setMinimumFractionDigits(d);  format.setGroupingUsed(false);  print(output,format,w + 2);}  }
class C{  public void printResults(){  System.out.println("[ --- Lucee Debug Response --- ]");  System.out.println();  System.out.println("----------------------------");  System.out.println("|          Output          |");  System.out.println("----------------------------");  System.out.println(write);  System.out.println();  System.out.println("----------------------------");  System.out.println("|       Debug Output       |");  System.out.println("----------------------------");  System.out.println(writeDebug);  System.out.println();  System.out.println("----------------------------");  System.out.println("|        Variables         |");  System.out.println("----------------------------");  Enumeration e=variables.keys();  while (e.hasMoreElements()) {    final Object key=e.nextElement();    System.out.println("[Variable:" + key + "]");    System.out.println(escapeString(variables.get(key).toString()));  }  System.out.println();  e=queries.keys();  while (e.hasMoreElements()) {    final Query query=(Query)queries.get(e.nextElement());    printQuery(query);    System.out.println();  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.io.File stvRoot=null;  if (curNumberOfParameters == 2)   stvRoot=getFile(stack);  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (Sage.client) {    stack.push(pluggy);    if (!Sage.isNonLocalClient()) {      curNumberOfParameters++;      stack.push(new java.io.File(stack.getUIMgr().getModuleGroup().defaultModule.description()).getParentFile());    }    Object rv=makeNetworkedCall(stack);    if (rv != null && !rv.toString().startsWith("FAIL") && !Sage.isNonLocalClient()) {      if (!pluggy.isServerConfiguredPlugin()) {        sage.plugin.CorePluginManager.getInstance().enablePlugin(pluggy.getId(),stack.getUIMgr());      }      Sage.updateJARLoader();      sage.plugin.CorePluginManager.getInstance().refreshLoadedPlugins();    }    return rv;  }  if (pluggy != null)   return sage.plugin.CorePluginManager.getInstance().installPlugin(pluggy,stack.getUIMgr(),stvRoot);  return "FAILED - NULL";}  }
class C{  protected void checkDesiredClass(MetaData obj,Class<? extends MetaData> desiredClass) throws IncompatibleMDClassException {  if (!desiredClass.isAssignableFrom(obj.getClass())) {    throw new IncompatibleMDClassException(getPorts().getOwner(),this);  }}  }
class C{  public GmItemType(String itemType){  this.itemType=itemType;}  }
class C{  public T build(){  parent.rows.add(row);  return parent;}  }
class C{  protected void processPlayRequest(){  tryToGetAudioFocus();  if (mState == State.STOPPED) {    playMedia();  } else   if (mState == State.PAUSED) {    mState=State.PLAYING;    setUpAsForeground(String.format(getString(R.string.media_state_playing),mFile.getFileName()));    configAndStartMediaPlayer();  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void close(String address){  mConnectedAddressList.remove(address);  if (mBluetoothGattMap.get(address) != null) {    mBluetoothGattMap.get(address).close();    mBluetoothGattMap.remove(address);  }}  }
class C{  public MapOptions zoomControl(boolean zoomControl){  this.zoomControl=zoomControl;  return this;}  }
class C{  public static <T>T[] insert(T[] field,int index,int size,T... values){  if (index < size) {    field=rshift(field,index,(size - index),values.length,true);  } else {    field=expand(field,(size + values.length),true);    index=size;  }  System.arraycopy(values,0,field,index,values.length);  return field;}  }
class C{  public void addRows(int rowsToAdd,T value){  modifyRowsColumns(rowsToAdd,0,value);}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  public void onAnimationCancel(Animator animation){}  }
class C{  public SassList(Collection<?> collection){  super(collection);}  }
class C{  public void visitLocationWithAction(String location,String action){  this.location=location;  runJavascript("webView.visitLocationWithActionAndRestorationIdentifier",TurbolinksHelper.encodeUrl(location),action,getRestorationIdentifierFromMap());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void addPathArgument(JvmLauncher java,Deployable deployable){  String deployableFile=deployable.getFile();  if (deployable instanceof WAR && ((WAR)deployable).isExpanded()) {    throw new ContainerException("The Apache Geronimo container does not support expanded WARs");  }  java.addAppArguments(deployableFile);  if (deployable instanceof GeronimoDeployable) {    GeronimoDeployable geronimoDeployable=(GeronimoDeployable)deployable;    String plan=geronimoDeployable.getPlan((InstalledLocalContainer)this.getContainer());    if (plan != null) {      File toFile=new File(getContainer().getConfiguration().getHome(),"var/temp/" + new File(deployableFile).getName() + ".xml");      try {        FileWriter writer=new FileWriter(toFile);        writer.write(plan);        writer.close();      } catch (      IOException e) {        throw new ContainerException("Cannot write deployment plan",e);      }      java.addAppArgument(toFile);    }  }}  }
class C{  public User User(Project project,String name,String login){  User owner=new User(new UserPK(ctx.getCustomerId()),name,login);  UserServiceBaseImpl.getInstance().store(ctx,owner);  AccessRight ownerRight=new AccessRight(Role.OWNER,owner.getId().getUserId(),null);  customer.getAccessRights().add(ownerRight);  AppContext ownerCtx=new AppContext.Builder(ctx.getCustomerId(),owner).build();  CustomerServiceBaseImpl.getInstance().store(ownerCtx,customer);  return owner;}  }
class C{  @Override public void clear(){  if (elementCount > 0) {    elementCount=0;    Arrays.fill(elementData,null);    modCount++;  }}  }
class C{  public Iamb(IndependenceTest test){  if (test == null) {    throw new NullPointerException();  }  this.independenceTest=test;  this.variables=test.getVariables();}  }
class C{  public static void init(Properties ctx){  if (s_engine == null) {    String className=ctx.getProperty(SecureInterface.ADEMPIERE_SECURE);    s_engine=new SecureEngine(className);  }}  }
class C{  public OperationPendingException(String message,OperationPendingExceptionBean bean,Throwable cause){  super(message,bean,cause);  this.bean=bean;}  }
class C{  private void notifyRtcpListenersOfTimeout(){  for (  RtcpEventListener listener : listeners) {    listener.connectionTimeout();  }}  }
class C{  public void resetCvsCommand(){  super.resetCvsCommand();  setRecursive(true);  setIncludeTags(false);}  }
class C{  public void sendData(byte[][] data,int offset,int count,String targetHostName,int targetPort,long interval){  if ((data == null) || (data.length <= 0)) {    if (__IEsptouchTask.DEBUG) {      Log.e(TAG,"sendData(): data == null or length <= 0");    }    return;  }  for (int i=offset; !mIsStop && i < offset + count; i++) {    if (data[i].length == 0) {      continue;    }    try {      DatagramPacket localDatagramPacket=new DatagramPacket(data[i],data[i].length,InetAddress.getByName(targetHostName),targetPort);      this.mSocket.send(localDatagramPacket);    } catch (    UnknownHostException e) {      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData(): UnknownHostException");      }      e.printStackTrace();      mIsStop=true;      break;    }catch (    IOException e) {      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData(): IOException, but just ignore it");      }    }    try {      Thread.sleep(interval);    } catch (    InterruptedException e) {      e.printStackTrace();      if (__IEsptouchTask.DEBUG) {        Log.e(TAG,"sendData is Interrupted");      }      mIsStop=true;      break;    }  }  if (mIsStop) {    close();  }}  }
class C{  public static DateTime toDateTime(Object o,TimeZone tz) throws PageException {  return DateCaster.toDateAdvanced(o,tz);}  }
class C{  public PrintablePanel(){  super();  m_Printer=new PrintableComponent(this);}  }
class C{  public static double haversinMeters(double lat1,double lon1,double lat2,double lon2){  return haversinMeters(haversinSortKey(lat1,lon1,lat2,lon2));}  }
class C{  public boolean removeChild(Node n){  throw new UnsupportedOperationException("Changes to tree structure not allowed for spanning trees.");}  }
class C{  protected TypeDefinitionImpl(){  super();}  }
class C{  public boolean isEnable(){  return enable;}  }
class C{  protected ClassContent_Impl(){  super();}  }
class C{  private void addConversations(){  TPP_Phase myphase=OUTGOING;  mainNPC.add(ConversationStates.ATTENDING,Arrays.asList("rats","rats!"),new TPPQuestInPhaseCondition(myphase),ConversationStates.ATTENDING,"The rats are gone. " + "You can get a #reward for your help now, ask about #details " + "if you want to know more.",null);  mainNPC.add(ConversationStates.ATTENDING,"details",new TPPQuestInPhaseCondition(myphase),ConversationStates.ATTENDING,null,new DetailsKillingsAction());  mainNPC.add(ConversationStates.ATTENDING,"reward",new TPPQuestInPhaseCondition(myphase),ConversationStates.ATTENDING,null,new RewardPlayerAction());}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UXTH");  translateAll(environment,instruction,"UXTH",instructions);}  }
class C{  public void configure() throws BackupException {  File logicalVolumeSpec=new File("/dev/" + volumeGroup + "/"+ logicalVolume);  File logicalVolumeMountSpec=new File(logicalVolumeMount);  validateStorage("logical volume mount point",logicalVolumeMountSpec);  logicalVolumeSpec=new File("/dev/" + volumeGroup + "/"+ logicalVolume);  dataDirSpec=new File(dataDir);  logicalVolumeMountSpec=new File(logicalVolumeMount);  validateStorage("Database storage directory",dataDirSpec);  validateStorage("logical volume mount point",logicalVolumeMountSpec);  String dataDirLocalSpec;  if (!dataDir.startsWith(logicalVolumeMount)) {    throw new BackupException("Database data directory does not match mount point for logical volume: " + " dataDir=" + dataDir + "logicalVolumeMount="+ logicalVolumeMount);  }  if (dataDir.length() == logicalVolumeMount.length())   dataDirLocalSpec=""; else   dataDirLocalSpec=dataDir.substring(logicalVolumeMount.length());  File snapshotSpec=new File("/dev/" + volumeGroup + "/"+ snapshotName);  File snapshotMountSpec=new File(snapshotMount);  snapshotDataDirSpec=new File(snapshotMount + "/" + dataDirLocalSpec);  validateStorage("snapshot volume mount point",snapshotMountSpec);  String[] cmdArray1={lvcreate,"-L" + snapshotSize,"-s","-n",snapshotName,logicalVolumeSpec.getAbsolutePath()};  lvcreateCmd=cmdArray1;  String[] cmdArray2={lvremove,"-f",snapshotSpec.getAbsolutePath()};  lvremoveCmd=cmdArray2;  String[] cmdArray3={"mount",snapshotSpec.getAbsolutePath(),snapshotMountSpec.getAbsolutePath()};  mountCmd=cmdArray3;  String[] cmdArray4={"umount",snapshotMountSpec.getAbsolutePath()};  umountCmd=cmdArray4;  String[] cmdArray5={"sh","-c","rm -rf " + this.dataDirSpec.getAbsolutePath() + "/*"};  rmCmd=cmdArray5;}  }
class C{  public static String createDestination(String template,TvShow show,List<TvShowEpisode> episodes){  String newDestination=template;  TvShowEpisode firstEp=null;  if (StringUtils.isBlank(template)) {    return "";  }  if (episodes == null || episodes.isEmpty()) {    Matcher m=token.matcher(template);    while (m.find()) {      String value=getTokenValue(show,null,m.group(1));      newDestination=replaceToken(newDestination,m.group(1),value);    }  } else   if (episodes.size() == 1) {    firstEp=episodes.get(0);    Matcher m=token.matcher(template);    while (m.find()) {      String value=getTokenValue(show,firstEp,m.group(1));      newDestination=replaceToken(newDestination,m.group(1),value);    }  } else {    firstEp=episodes.get(0);    String loopNumbers="";    if (getPatternPos(newDestination,seasonNumbers) > -1) {      Matcher m=seDelimiter.matcher(newDestination);      if (m.find()) {        if (m.group(1) != null) {          loopNumbers+=m.group(1);        }        loopNumbers+=newDestination.substring(m.end() - 2,m.end());      }    }    if (getPatternPos(newDestination,episodeNumbers) > -1) {      Matcher m=epDelimiter.matcher(newDestination);      if (m.find()) {        if (m.group(1) != null) {          loopNumbers+=m.group(1);        }        loopNumbers+=newDestination.substring(m.end() - 2,m.end());      }    }    loopNumbers=loopNumbers.trim();    String episodeParts="";    for (    TvShowEpisode episode : episodes) {      String episodePart=loopNumbers;      Matcher m=token.matcher(episodePart);      while (m.find()) {        String value=getTokenValue(show,episode,m.group(1));        episodePart=replaceToken(episodePart,m.group(1),value);      }      episodeParts+=" " + episodePart;    }    if (!loopNumbers.isEmpty()) {      newDestination=newDestination.replace(loopNumbers,episodeParts);    }    String loopTitles="";    int titlePos=getPatternPos(template,episodeTitles);    if (titlePos > -1) {      loopTitles+=template.substring(titlePos,titlePos + 2);    }    loopTitles=loopTitles.trim();    episodeParts="";    for (    TvShowEpisode episode : episodes) {      String episodePart=loopTitles;      Matcher m=token.matcher(episodePart);      while (m.find()) {        String value=getTokenValue(show,episode,m.group(1));        episodePart=replaceToken(episodePart,m.group(1),value);      }      if (StringUtils.isNotBlank(episodeParts)) {        episodeParts+=" -";      }      episodeParts+=" " + episodePart;    }    if (!loopTitles.isEmpty()) {      newDestination=newDestination.replace(loopTitles,episodeParts);    }    Matcher m=token.matcher(newDestination);    while (m.find()) {      String value=getTokenValue(show,firstEp,m.group(1));      newDestination=replaceToken(newDestination,m.group(1),value);    }  }  newDestination=newDestination.replaceAll("\\(\\)","");  newDestination=newDestination.replaceAll("\\[\\]","");  if (SystemUtils.IS_OS_WINDOWS) {    newDestination=newDestination.replaceAll("\\\\{2,}","\\\\");    newDestination=newDestination.replaceAll("^\\\\","");  } else {    newDestination=newDestination.replaceAll(File.separator + "{2,}",File.separator);    newDestination=newDestination.replaceAll("^" + File.separator,"");  }  if (SETTINGS.isAsciiReplacement()) {    newDestination=StrgUtils.convertToAscii(newDestination,false);  }  newDestination=newDestination.trim();  newDestination=newDestination.replaceAll(" +"," ").trim();  if (SETTINGS.isRenamerSpaceSubstitution()) {    newDestination=newDestination.replaceAll(" ",SETTINGS.getRenamerSpaceReplacement());  }  newDestination=newDestination.replaceAll("[ \\.]+$","");  return newDestination.trim();}  }
class C{  public void testLongSpecialValues() throws Exception {  long[] values=new long[]{Long.MIN_VALUE,Long.MIN_VALUE + 1,Long.MIN_VALUE + 2,-5003400000000L,-4000L,-3000L,-2000L,-1000L,-1L,0L,1L,10L,300L,50006789999999999L,Long.MAX_VALUE - 2,Long.MAX_VALUE - 1,Long.MAX_VALUE};  BytesRef[] encoded=new BytesRef[values.length];  for (int i=0; i < values.length; i++) {    encoded[i]=new BytesRef(new byte[Long.BYTES]);    NumericUtils.longToSortableBytes(values[i],encoded[i].bytes,encoded[i].offset);    assertEquals("forward and back conversion should generate same long",values[i],NumericUtils.sortableBytesToLong(encoded[i].bytes,encoded[i].offset));  }  for (int i=1; i < encoded.length; i++) {    assertTrue("check sort order",encoded[i - 1].compareTo(encoded[i]) < 0);  }}  }
class C{  public String globalInfo(){  return "Modify numeric attributes according to a given expression ";}  }
class C{  public void removeArchiveFile(String name){  files.remove(name);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  XYTaskDataset clone=(XYTaskDataset)super.clone();  clone.underlying=(TaskSeriesCollection)this.underlying.clone();  return clone;}  }
class C{  public static void removeSelectedNodesKeepEdges(final ZyGraph graph){  Preconditions.checkNotNull(graph,"IE01733: Graph argument can not be null");  final List<NaviNode> selectedNodes=filterHiddenNodes(graph.getSelectedNodes());  for (  final NaviNode naviNode : selectedNodes) {    connectParentsWithChildren(graph.getRawView(),naviNode.getRawNode());  }  graph.deleteNodes(selectedNodes);}  }
class C{  public void sendStream(Reader reader,long readLength) throws IOException {  char[] buffer=new char[BUFFER_DEFAULT_SIZE];  long remainingReadLength=readLength;  int read;  while (remainingReadLength > 0) {    read=reader.read(buffer,0,Math.min((int)remainingReadLength,BUFFER_DEFAULT_SIZE));    if (read == -1) {      return;    }    byte[] bytes=new String(buffer,0,read).getBytes("UTF-8");    write(bytes,0,bytes.length);    remainingReadLength-=read;  }}  }
class C{  public static RTLExpression createOperand(Operand iOp){  RTLExpression opAsExpr=null;  if (iOp instanceof Immediate) {    opAsExpr=createNumber(((Immediate)iOp).getNumber());  } else   if (iOp instanceof Register) {    opAsExpr=createRegister((Register)iOp);  } else   if (iOp instanceof MemoryOperand) {    opAsExpr=createMemoryLocation((MemoryOperand)iOp);  } else   if (iOp instanceof AbsoluteAddress) {    opAsExpr=createAddress((AbsoluteAddress)iOp);  } else   if (iOp instanceof PCRelativeAddress) {    opAsExpr=createAddress((PCRelativeAddress)iOp);  } else {    if (iOp == null)     logger.warn("Null operand in RTL conversion!"); else     logger.warn("Unsupported operand type: " + iOp.getClass().getSimpleName());  }  return opAsExpr;}  }
class C{  public static Parameters createParameters(Bitmap hMapBitmap){  return new Parameters(hMapBitmap);}  }
class C{  public Proposal(String replacementString,int replacementOffset,int replacementLength,int cursorPosition,Image image,String displayString,IContextInformation contextInformation,String additionalProposalInfo){  Assert.isNotNull(replacementString);  Assert.isTrue(replacementOffset >= 0);  Assert.isTrue(replacementLength >= 0);  Assert.isTrue(cursorPosition >= 0);  fReplacementString=replacementString;  fReplacementOffset=replacementOffset;  fReplacementLength=replacementLength;  fCursorPosition=cursorPosition;  fImage=image;  fDisplayString=displayString;  fContextInformation=contextInformation;  fAdditionalProposalInfo=additionalProposalInfo;}  }
class C{  DataImporter(){  this.handlerName="dataimport";}  }
class C{  private boolean isOverridden(OutputNode node,Object value) throws Exception {  return factory.setOverride(entry,value,node);}  }
class C{  public void add(Edge e){  edges.add(e);  OrientedCoordinateArray oca=new OrientedCoordinateArray(e.getCoordinates());  ocaMap.put(oca,e);}  }
class C{  public void stopScrolling(){  scroller.stopScrolling();}  }
class C{  public int offset(){  return offset;}  }
class C{  public MinPQ(int initCapacity,Comparator<Key> comparator){  this.comparator=comparator;  pq=(Key[])new Object[initCapacity + 1];  n=0;}  }
class C{  private int convertLocationToModel(int x,int y){  int row=convertLocationToRow(x,y,true);  int column=convertLocationToColumn(x,y);  if (row >= 0 && column >= 0) {    return getModelIndex(column,row);  }  return -1;}  }
class C{  public LayoutMap(){  this(getRoot());}  }
class C{  public boolean isSupported(String feature,String version){  return false;}  }
class C{  public Hours multipliedBy(int scalar){  return Hours.hours(FieldUtils.safeMultiply(getValue(),scalar));}  }
class C{  public boolean isBelowThresholdFlappingStopped(){  return belowThresholdFlappingStopped;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:19.396 -0500",hash_original_method="F249C6EFBACF4B954D25B46FE7AAC81B",hash_generated_method="0B59CD366EE309AB27F9B51BD9267691") public boolean containsDashDash(){  return buffer.indexOf("--") != -1;}  }
class C{  public TimePeriod(Date startTime,Date endTime){  if (startTime != null && endTime != null && !endTime.after(startTime)) {    throw new IllegalArgumentException("EndTime: " + endTime + " is not after startTime: "+ startTime);  }  this.startTime=startTime;  this.endTime=endTime;}  }
class C{  public boolean canTracecount(){  return targetInformation.getDebuggerOptions().canTraceCount();}  }
class C{  public void hide(){  LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);}  }
class C{  public NicknameFeed retrieveAllNicknames() throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Retrieving all nicknames.");  URL retrieveUrl=new URL(domainUrlBase + "nickname/" + SERVICE_VERSION+ "/");  NicknameFeed allNicknames=new NicknameFeed();  NicknameFeed currentPage;  Link nextLink;  do {    currentPage=nicknameService.getFeed(retrieveUrl,NicknameFeed.class);    allNicknames.getEntries().addAll(currentPage.getEntries());    nextLink=currentPage.getLink(Link.Rel.NEXT,Link.Type.ATOM);    if (nextLink != null) {      retrieveUrl=new URL(nextLink.getHref());    }  } while (nextLink != null);  return allNicknames;}  }
class C{  public static long rotateLeft(long v,int distance){  return (v << distance) | (v >>> -distance);}  }
class C{  public StringMap(Map<String,T> map){  super(stringHashStrat,map.size(),DEFAULT_LOAD_FACTOR);  this.putAll(map);  compact();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected final void STORE_LONG_FOR_CONV(Operand op){  int offset=-burs.ir.stackManager.allocateSpaceForConversion();  if (VM.BuildFor32Addr) {    if (op instanceof RegisterOperand) {      RegisterOperand hval=(RegisterOperand)op;      RegisterOperand lval=new RegisterOperand(regpool.getSecondReg(hval.getRegister()),TypeReference.Int);      EMIT(MIR_Move.create(IA32_MOV,new StackLocationOperand(true,offset + 4,DW),hval));      EMIT(MIR_Move.create(IA32_MOV,new StackLocationOperand(true,offset,DW),lval));    } else {      LongConstantOperand val=LC(op);      EMIT(MIR_Move.create(IA32_MOV,new StackLocationOperand(true,offset + 4,DW),IC(val.upper32())));      EMIT(MIR_Move.create(IA32_MOV,new StackLocationOperand(true,offset,DW),IC(val.lower32())));    }  } else {    if (op instanceof RegisterOperand) {      RegisterOperand val=(RegisterOperand)op;      EMIT(MIR_Move.create(IA32_MOV,new StackLocationOperand(true,offset,QW),val));    } else {      LongConstantOperand val=LC(op);      EMIT(MIR_Move.create(IA32_MOV,new StackLocationOperand(true,offset,QW),val));    }  }}  }
class C{  public static String toString(byte value){  return Integer.toString(value);}  }
class C{  public void add(URI uri,HttpCookie cookie){  if (cookie == null) {    throw new NullPointerException("cookie is null");  }  lock.lock();  try {    cookieJar.remove(cookie);    if (cookie.getMaxAge() != 0) {      cookieJar.add(cookie);      addIndex(domainIndex,cookie.getDomain(),cookie);      addIndex(uriIndex,getEffectiveURI(uri),cookie);    }  }  finally {    lock.unlock();  }  storeCookies();}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public synchronized void resetFeedItems(){  feedItems=null;}  }
class C{  private void notifyFailsInFavourites(){  if (mFailedResultsCounter > 0) {    NotificationCompat.Builder notificationBuilder=createNotificationBuilder();    notificationBuilder.setTicker(i18n(R.string.sync_fail_in_favourites_ticker));    notificationBuilder.setContentIntent(PendingIntent.getActivity(getContext(),(int)System.currentTimeMillis(),new Intent(),0)).setContentTitle(i18n(R.string.sync_fail_in_favourites_ticker)).setContentText(i18n(R.string.sync_fail_in_favourites_content,mFailedResultsCounter + mConflictsFound,mConflictsFound));    showNotification(R.string.sync_fail_in_favourites_ticker,notificationBuilder);  } else {    NotificationCompat.Builder notificationBuilder=createNotificationBuilder();    notificationBuilder.setTicker(i18n(R.string.sync_conflicts_in_favourites_ticker));    notificationBuilder.setContentIntent(PendingIntent.getActivity(getContext(),(int)System.currentTimeMillis(),new Intent(),0)).setContentTitle(i18n(R.string.sync_conflicts_in_favourites_ticker)).setContentText(i18n(R.string.sync_conflicts_in_favourites_ticker,mConflictsFound));    showNotification(R.string.sync_conflicts_in_favourites_ticker,notificationBuilder);  }}  }
class C{  private void initializeLiveAttributes(){  gradientUnits=createLiveAnimatedEnumeration(null,SVG_GRADIENT_UNITS_ATTRIBUTE,UNITS_VALUES,(short)2);  spreadMethod=createLiveAnimatedEnumeration(null,SVG_SPREAD_METHOD_ATTRIBUTE,SPREAD_METHOD_VALUES,(short)1);  href=createLiveAnimatedString(XLINK_NAMESPACE_URI,XLINK_HREF_ATTRIBUTE);  externalResourcesRequired=createLiveAnimatedBoolean(null,SVG_EXTERNAL_RESOURCES_REQUIRED_ATTRIBUTE,false);}  }
class C{  public void removeRange(int fromIndex,int toIndex){  checkRange(fromIndex);  checkRange(toIndex);  if (fromIndex >= toIndex) {    return;  }  int numtomove=size - toIndex;  if (numtomove > 0) {    System.arraycopy(array,toIndex,array,fromIndex,numtomove);  }  size-=(toIndex - fromIndex);}  }
class C{  void addFurtherControlerListener(ActivityFacilities zones,ActivityFacilities parcels,MatsimServices controler){}  }
class C{  public void registerAboveContentView(View v,LayoutParams params){  if (!mBroadcasting)   mViewAbove=v;}  }
class C{  protected Request createRequestToRetry(Request request){switch (request.getMessageType()) {case Message.BINDING_REQUEST:    return MessageFactory.createBindingRequest();default :  throw new IllegalArgumentException("request.messageType");}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:21.288 -0500",hash_original_method="AC12FA6487D63E990405579154753DC4",hash_generated_method="97855623B053975DBEDC6A959C252650") public static void register(){  DdmServer.registerHandler(CHUNK_NHGT,mInstance);}  }
class C{  private int[] mergeArrays(int[] arr1,int[] arr2){  int[] ret=new int[arr1.length + arr2.length];  int i1=0;  int i2=0;  for (int i=0; i < ret.length; i++) {    if (i1 >= arr1.length) {      System.arraycopy(arr2,i2,ret,i,arr2.length - i2);      break;    } else     if (i2 >= arr2.length) {      System.arraycopy(arr1,i1,ret,i,arr1.length - i1);      break;    } else     ret[i]=arr1[i1] <= arr2[i2] ? arr1[i1++] : arr2[i2++];  }  return ret;}  }
class C{  public int search(String txt){  int n=txt.length();  if (n < m)   return n;  long txtHash=hash(txt,m);  if ((patHash == txtHash) && check(txt,0))   return 0;  for (int i=m; i < n; i++) {    txtHash=(txtHash + q - RM * txt.charAt(i - m) % q) % q;    txtHash=(txtHash * R + txt.charAt(i)) % q;    int offset=i - m + 1;    if ((patHash == txtHash) && check(txt,offset))     return offset;  }  return n;}  }
class C{  protected boolean internalLast() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  protected Size2D drawHorizontal(Graphics2D g2,Rectangle2D chartArea){  double startY;  double topSpace;  double bottomSpace;  double leftSpace;  double rightSpace;  double w=getWidth();  double h=getHeight();  RectangleInsets padding=getPadding();  topSpace=padding.calculateTopOutset(h);  bottomSpace=padding.calculateBottomOutset(h);  leftSpace=padding.calculateLeftOutset(w);  rightSpace=padding.calculateRightOutset(w);  if (getPosition() == RectangleEdge.TOP) {    startY=chartArea.getY() + topSpace;  } else {    startY=chartArea.getY() + chartArea.getHeight() - bottomSpace - h;  }  HorizontalAlignment horizontalAlignment=getHorizontalAlignment();  double startX=0.0;  if (horizontalAlignment == HorizontalAlignment.CENTER) {    startX=chartArea.getX() + leftSpace + chartArea.getWidth() / 2.0 - w / 2.0;  } else   if (horizontalAlignment == HorizontalAlignment.LEFT) {    startX=chartArea.getX() + leftSpace;  } else   if (horizontalAlignment == HorizontalAlignment.RIGHT) {    startX=chartArea.getX() + chartArea.getWidth() - rightSpace - w;  }  g2.drawImage(this.image,(int)startX,(int)startY,(int)w,(int)h,null);  return new Size2D(chartArea.getWidth() + leftSpace + rightSpace,h + topSpace + bottomSpace);}  }
class C{  public ClassCastException(java.lang.String s){}  }
class C{  @Override public void onCacheEnd(){  WakeLocker.release();  if (instance != null) {    stopForeground(true);    imageCacher=null;    instance=null;  }  if (parent != null)   parent.onCacheEnd();  this.stopSelf();}  }
class C{  private long hash(final float[] a,final int l,final int k){  final int[] w=weight[k];  long h=init[k];  int i=l;  while (i-- != 0)   h^=(h << 5) + Float.floatToRawIntBits(a[i]) * w[i % NUMBER_OF_WEIGHTS] + (h >>> 2);  return (h & 0x7FFFFFFFFFFFFFFFL) % m;}  }
class C{  @Override public boolean tryPlaceItem(IItemHandler.Action action,EntityPlayer player,ItemStack stack){  return false;}  }
class C{  public int addNodeInDocOrder(Node node,XPathContext support){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  return addNodeInDocOrder(node,true,support);}  }
class C{  public static byte[] constrainToKey(byte[] toKey,final ISeparatorKeys pmd){  if (pmd == null)   return toKey;  if (toKey != null) {    if (pmd.getRightSeparatorKey() != null) {      final int ret=BytesUtil.compareBytes(toKey,pmd.getRightSeparatorKey());      if (ret > 0) {        toKey=pmd.getRightSeparatorKey();      }    }  } else {    toKey=pmd.getRightSeparatorKey();  }  return toKey;}  }
class C{  public void attributeDecl(String eName,String aName,String type,String valueDefault,String value) throws SAXException {  if (null != m_resultDeclHandler)   m_resultDeclHandler.attributeDecl(eName,aName,type,valueDefault,value);}  }
class C{  public static boolean isExistDataCache(Context context,String cachefile){  if (context == null)   return false;  boolean exist=false;  File data=context.getFileStreamPath(cachefile);  if (data.exists())   exist=true;  return exist;}  }
class C{  public boolean isText(){  return true;}  }
class C{  public LocationBar(){  super(new BorderLayout(5,5));  JLabel label=new JLabel(rManager.getString("Panel.label"));  add("West",label);  try {    String s=rManager.getString("Panel.icon");    URL url=getClass().getResource(s);    if (url != null) {      label.setIcon(new ImageIcon(url));    }  } catch (  MissingResourceException e) {  }  add("Center",comboBox=new JComboBox());  comboBox.setEditable(true);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:23.602 -0500",hash_original_method="F562985E094FAB41C0929069F7EFE8D1",hash_generated_method="A66FF49F97066FE02C2FBBFF09D210D6") public static float hue(int color){  int r=(color >> 16) & 0xFF;  int g=(color >> 8) & 0xFF;  int b=color & 0xFF;  int V=Math.max(b,Math.max(r,g));  int temp=Math.min(b,Math.min(r,g));  float H;  if (V == temp) {    H=0;  } else {    final float vtemp=(float)(V - temp);    final float cr=(V - r) / vtemp;    final float cg=(V - g) / vtemp;    final float cb=(V - b) / vtemp;    if (r == V) {      H=cb - cg;    } else     if (g == V) {      H=2 + cr - cb;    } else {      H=4 + cg - cr;    }    H/=6.f;    if (H < 0) {      H++;    }  }  return H;}  }
class C{  private boolean skipScope(int openToken,int closeToken){  int depth=1;  while (true) {    nextToken();    if (fToken == closeToken) {      depth++;    } else     if (fToken == openToken) {      depth--;      if (depth == 0)       return true;    } else     if (fToken == Symbols.TokenEOF) {      return false;    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:56.819 -0500",hash_original_method="C814290BDB3D50BD3D6287FB6AC9378C",hash_generated_method="E37471A98E8C39307A28164F7E7272D9") public static TextEncodingDetails calculateLength(CharSequence messageBody,boolean use7bitOnly){  return BearerData.calcTextEncodingDetails(messageBody,use7bitOnly);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:03.119 -0500",hash_original_method="FD638C11381C4F985A3E18CBB2ADD45E",hash_generated_method="2180AC9B63C9EB3A13925DD28D4DF098") public TFTPWriteRequestPacket(InetAddress destination,int port,String filename,int mode){  super(destination,port,TFTPPacket.WRITE_REQUEST,filename,mode);}  }
class C{  private URIBuilder apiBuilder(){  URIBuilder builder=builder();  builder.setPath("/w/api.php");  builder.addParameter("format","json");  return builder;}  }
class C{  public EntropyCalculatorMultiVariateKozachenko(){  totalObservations=0;  dimensions=0;  isComputed=false;  lastLocalEntropy=null;}  }
class C{  public final long readUInt(){  int ch1=read() & 0xFF;  int ch2=read() & 0xFF;  int ch3=read() & 0xFF;  int ch4=read() & 0xFF;  return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8)+ (ch4 << 0));}  }
class C{  void perform(ContentHandler handler,SectionState state){  final ModeUsage modeUsage=getModeUsage();  if (handler != null)   state.addActiveHandler(handler,modeUsage); else   state.addAttributeValidationModeUsage(modeUsage);  state.addChildMode(modeUsage,handler);}  }
class C{  public void removeValues(Set<Object> values){  actionValues.removeAll(values);}  }
class C{  public static void applyBlending(GL2 gl,boolean havePremultipliedColors){  if (gl == null) {    String message=Logging.getMessage("nullValue.GLIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  gl.glEnable(GL2.GL_ALPHA_TEST);  gl.glAlphaFunc(GL2.GL_GREATER,0.0f);  if (havePremultipliedColors) {    gl.glBlendFunc(GL.GL_ONE,GL.GL_ONE_MINUS_SRC_ALPHA);  } else {    boolean haveExtBlendFuncSeparate=gl.isExtensionAvailable(GL_EXT_BLEND_FUNC_SEPARATE);    if (haveExtBlendFuncSeparate) {      gl.glBlendFuncSeparate(GL.GL_SRC_ALPHA,GL.GL_ONE_MINUS_SRC_ALPHA,GL.GL_ONE,GL.GL_ONE_MINUS_SRC_ALPHA);    } else {      gl.glBlendFunc(GL.GL_SRC_ALPHA,GL.GL_ONE_MINUS_SRC_ALPHA);    }  }}  }
class C{  public ObjectCache(int initialCapacity){  this.elementSize=0;  this.threshold=(int)(initialCapacity * 0.66f);  this.keyTable=new Object[initialCapacity];  this.valueTable=new int[initialCapacity];}  }
class C{  public void testRandomStrings() throws Exception {  ArabicAnalyzer a=new ArabicAnalyzer();  checkRandomData(random(),a,1000 * RANDOM_MULTIPLIER);  a.close();}  }
class C{  public void touch(){  if (isFrozen())   throw FrozenObjectError.newFor(this);}  }
class C{  public boolean isSetCreateTime(){  return EncodingUtils.testBit(__isset_bitfield,__CREATETIME_ISSET_ID);}  }
class C{  protected void insertUpdate(DefaultDocumentEvent chng,AttributeSet attr){  removed.removeAllElements();  added.removeAllElements();  BranchElement lineMap=(BranchElement)getDefaultRootElement();  int offset=chng.getOffset();  int length=chng.getLength();  if (offset > 0) {    offset-=1;    length+=1;  }  int index=lineMap.getElementIndex(offset);  Element rmCandidate=lineMap.getElement(index);  int rmOffs0=rmCandidate.getStartOffset();  int rmOffs1=rmCandidate.getEndOffset();  int lastOffset=rmOffs0;  try {    if (s == null) {      s=new Segment();    }    getContent().getChars(offset,length,s);    boolean hasBreaks=false;    for (int i=0; i < length; i++) {      char c=s.array[s.offset + i];      if (c == '\n') {        int breakOffset=offset + i + 1;        added.addElement(createLeafElement(lineMap,null,lastOffset,breakOffset));        lastOffset=breakOffset;        hasBreaks=true;      }    }    if (hasBreaks) {      removed.addElement(rmCandidate);      if ((offset + length == rmOffs1) && (lastOffset != rmOffs1) && ((index + 1) < lineMap.getElementCount())) {        Element e=lineMap.getElement(index + 1);        removed.addElement(e);        rmOffs1=e.getEndOffset();      }      if (lastOffset < rmOffs1) {        added.addElement(createLeafElement(lineMap,null,lastOffset,rmOffs1));      }      Element[] aelems=new Element[added.size()];      added.copyInto(aelems);      Element[] relems=new Element[removed.size()];      removed.copyInto(relems);      ElementEdit ee=new ElementEdit(lineMap,index,relems,aelems);      chng.addEdit(ee);      lineMap.replace(index,relems.length,aelems);    }    if (Utilities.isComposedTextAttributeDefined(attr)) {      insertComposedTextUpdate(chng,attr);    }  } catch (  BadLocationException e) {    throw new Error("Internal error: " + e.toString());  }  super.insertUpdate(chng,attr);}  }
class C{  public NoClassDefFoundError(){}  }
class C{  public void undo() throws CannotUndoException {  super.undo();  int i=edits.size();  while (i-- > 0) {    UndoableEdit e=edits.elementAt(i);    e.undo();  }}  }
class C{  public static double[] computeMinEuclideanDistancesNaive(double[][] observations){  int numObservations=observations.length;  int dimensions=observations[0].length;  double[] distances=new double[numObservations];  for (int t=0; t < numObservations; t++) {    double minDistance=Double.POSITIVE_INFINITY;    for (int t2=0; t2 < numObservations; t2++) {      if (t == t2) {        continue;      }      double thisDistance=0.0;      for (int d=0; (d < dimensions) && (thisDistance < minDistance); d++) {        double distanceOnThisVar=(observations[t][d] - observations[t2][d]);        thisDistance+=distanceOnThisVar * distanceOnThisVar;      }      thisDistance=Math.sqrt(thisDistance);      if (thisDistance < minDistance) {        minDistance=thisDistance;      }    }    distances[t]=minDistance;  }  return distances;}  }
class C{  public boolean equals(Object other){  if (other == this) {    return true;  } else   if (other instanceof ByteArrayList) {    ByteArrayList that=(ByteArrayList)other;    if (that.size() != this.size()) {      return false;    } else {      for (int i=_pos; i-- > 0; ) {        if (this._data[i] != that._data[i]) {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  private VisibilityAnnotationTag findOrAdd(Host h,int visibility){  ArrayList<VisibilityAnnotationTag> va_tags=new ArrayList<VisibilityAnnotationTag>();  for (  Tag t : h.getTags()) {    if (t instanceof VisibilityAnnotationTag) {      VisibilityAnnotationTag vat=(VisibilityAnnotationTag)t;      if (vat.getVisibility() == visibility)       va_tags.add(vat);    }  }  if (va_tags.isEmpty()) {    VisibilityAnnotationTag vat=new VisibilityAnnotationTag(visibility);    h.addTag(vat);    return vat;  }  return (va_tags.get(0));}  }
class C{  public SuggestScoreDoc(int doc,CharSequence key,CharSequence context,float score){  super(doc,score);  this.key=key;  this.context=context;}  }
class C{  @Override protected void onSelectionChanged(int selStart,int selEnd){  if (mSettingExtractedText == 0 && mIME != null && selStart >= 0 && selEnd >= 0) {    mIME.onExtractedSelectionChanged(selStart,selEnd);  }}  }
class C{  public void clear(){  m_reducedResults.clear();  m_currentSearchIndex=0;}  }
class C{  private void commit(Detail detail) throws Exception {  Class type=detail.getType();  if (structure == null) {    structure=builder.build(type);  }  builder=null;}  }
class C{  private static void writeSnapshotFile(String processName,PackageInfo packageInfo){  if (!enabled) {    return;  }  samplingProfiler.stop();  String name=processName.replaceAll(":",".");  String path=SNAPSHOT_DIR + "/" + name+ "-"+ startMillis+ ".snapshot";  long start=System.currentTimeMillis();  OutputStream outputStream=null;  try {    outputStream=new BufferedOutputStream(new FileOutputStream(path));    PrintStream out=new PrintStream(outputStream);    generateSnapshotHeader(name,packageInfo,out);    if (out.checkError()) {      throw new IOException();    }    BinaryHprofWriter.write(samplingProfiler.getHprofData(),outputStream);  } catch (  IOException e) {    Log.e(TAG,"Error writing snapshot to " + path,e);    return;  } finally {    IoUtils.closeQuietly(outputStream);  }  new File(path).setReadable(true,false);  long elapsed=System.currentTimeMillis() - start;  Log.i(TAG,"Wrote snapshot " + path + " in "+ elapsed+ "ms.");  samplingProfiler.start(samplingProfilerMilliseconds);}  }
class C{  public static int process(final File orig,String prefix) throws Exception {  PngReaderBuffered pngr=new PngReaderBuffered(orig);  pngr.prefix=prefix;  pngr.end();  return pngr.numframe + 1;}  }
class C{  void stopLocatingPhone(){  Intent intent=new Intent(sContext,LocationService.class);  intent.setAction(LocationService.STOP_SERVICE);  sContext.startService(intent);}  }
class C{  public void loadItems(Collection<? extends Item> items){  List<Item> data=new ArrayList<Item>(items.size());  for (  Item item : items) {    data.add(item);  }  setItemsList(data);}  }
class C{  public static ConstructorRepository make(String rawSig,GenericsFactory f){  return new ConstructorRepository(rawSig,f);}  }
class C{  protected DefaultDocumentHandler(){}  }
class C{  @Override public void updateNCharacterStream(int columnIndex,Reader x) throws SQLException {  updateNCharacterStream(columnIndex,x,-1);}  }
class C{  public static <T>Iterator<T> iterator(T[] a){  return DefaultTypeTransformation.asCollection(a).iterator();}  }
class C{  public static void removeFilesFromVcs(Project project,List<FilePath> files){  final HgRemoveCommand command=new HgRemoveCommand(project);  for (  FilePath filePath : files) {    final VirtualFile vcsRoot=VcsUtil.getVcsRootFor(project,filePath);    if (vcsRoot == null) {      continue;    }    command.execute(new HgFile(vcsRoot,filePath));  }}  }
class C{  private static void cleanup(Path dir){  try {    if (Files.isDirectory(dir)) {      try (Stream<Path> s=Files.list(dir)){        s.forEach(null);      }     }    Files.delete(dir);  } catch (  IOException x) {    fail(x.toString());  }}  }
class C{  public AdaptiveProcessingTimeLoadProbe(boolean useAvg){  this.useAvg=useAvg;}  }
class C{  public static final void fixupEPSquare(Position pos){  int epSquare=pos.getEpSquare();  if (epSquare >= 0) {    MoveGen.MoveList moves=MoveGen.instance.pseudoLegalMoves(pos);    MoveGen.removeIllegal(pos,moves);    boolean epValid=false;    for (int mi=0; mi < moves.size; mi++) {      Move m=moves.m[mi];      if (m.to == epSquare) {        if (pos.getPiece(m.from) == (pos.whiteMove ? Piece.WPAWN : Piece.BPAWN)) {          epValid=true;          break;        }      }    }    if (!epValid) {      pos.setEpSquare(-1);    }  }}  }
class C{  public void startPreview(){  if (camera != null && !previewing) {    camera.startPreview();    previewing=true;  }}  }
class C{  public static final void popTransform(GL2 gl){  gl.glPopMatrix();}  }
class C{  protected void createMenus(JMenuBar menuBar,WindowInterface wi,AppsLaunchPane pane){  log.debug("start building menus");  fileMenu(menuBar,wi);  editMenu(menuBar,wi);  toolsMenu(menuBar,wi);  rosterMenu(menuBar,wi);  panelMenu(menuBar,wi);  if (jmri.jmrit.operations.setup.Setup.isMainMenuEnabled()) {    operationsMenu(menuBar,wi);  }  systemsMenu(menuBar,wi);  scriptMenu(menuBar,wi);  debugMenu(menuBar,wi,pane);  menuBar.add(new WindowMenu(wi));  helpMenu(menuBar,wi,pane);  log.debug("end building menus");}  }
class C{  public int pop(){  throwIfImmutable();  int result;  result=get(size - 1);  size--;  return result;}  }
class C{  private void initTrees(ActivityFacilities facilities){  TreesBuilder treesBuilder=new TreesBuilder(this.scenario.getNetwork(),(DestinationChoiceConfigGroup)this.scenario.getConfig().getModule(DestinationChoiceConfigGroup.GROUP_NAME));  treesBuilder.createTrees(facilities);  this.facilitiesOfType=treesBuilder.getFacilitiesOfType();  this.quadTreesOfType=treesBuilder.getQuadTreesOfType();}  }
class C{  public static double[][] cumSum(double[][] v){  int m=v.length;  int n=v[0].length;  double[][] X=new double[m][n];  double s;  for (int j=0; j < n; j++) {    s=0;    for (int i=0; i < m; i++) {      s+=v[i][j];      X[i][j]=s;    }  }  return X;}  }
class C{  public void addInstanceToRefSet(LiveRef ref){  assert Thread.holdsLock(EndpointEntry.this);  assert ref.equals(this.ref);  refSet.add(new PhantomLiveRef(ref));}  }
class C{  public void testPreconditions(){  assertNotNull("mTestActivity is null",mTestActivity);  assertNotNull("mTestFragment is null",mTestFragment);}  }
class C{  public boolean implicit_entry(){  return soot.PhaseOptions.getBoolean(options,"implicit-entry");}  }
class C{  public void sendMessage(int what,int arg1,int arg2,Object obj){  Message msg=Message.obtain();  msg.what=what;  msg.arg1=arg1;  msg.arg2=arg2;  msg.obj=obj;  sendMessage(msg);}  }
class C{  @Override public void put(int index,byte[] value){  System.arraycopy(value,0,datastore,((index) * sizeOfEachElement),sizeOfEachElement);}  }
class C{  void stop(){  if (this.thread.isAlive()) {    this.stopRequested=true;    this.thread.interrupt();    this.healthImpl.nodeLeft(null,this);    try {      this.thread.join();    } catch (    InterruptedException ex) {      Thread.currentThread().interrupt();      logger.warn(LocalizedMessage.create(LocalizedStrings.DistributedSystemHealthMonitor_INTERRUPTED_WHILE_STOPPING_HEALTH_MONITOR_THREAD),ex);    }  }}  }
class C{  public boolean reverseCorrectIt(){  log.info("reverseCorrectIt - " + toString());  return false;}  }
class C{  protected SystemMember findSystemMember(GemFireVM vm){  return findSystemMember(vm,true);}  }
class C{  public boolean storeConfig(File file){  boolean result=true;  Element root=initStore();  if (!addConfigStore(root)) {    result=false;  }  includeHistory(root);  if (!finalStore(root,file)) {    result=false;  }  return result;}  }
class C{  public GraphQuery(Query q,String fromField,String toField){  this(q,fromField,toField,null);}  }
class C{  public void testRun1(){  System.out.println("run");  Site mockSite=new SiteImpl();  Page mockPage1=new PageImpl();  mockPage1.setURL("http://my.testUrl1.org");  Page mockPage2=new PageImpl();  mockPage2.setURL("http://my.testUrl2.org");  mockSite.addChild(mockPage1);  mockSite.addChild(mockPage2);  ContentDataService mockContentDataService=EasyMock.createMock(ContentDataService.class);  SSP mockSSP=EasyMock.createMock(SSP.class);  Date date=new Date();  DateFactory mockDateFactory=EasyMock.createMock(DateFactory.class);  EasyMock.expect(mockDateFactory.createDate()).andReturn(date).times(2);  EasyMock.expect(mockContentDataService.getSSP(date,"http://my.testUrl1.org","My Page Content 1",mockPage1,HttpStatus.SC_OK)).andReturn(mockSSP).once();  EasyMock.expect(mockContentDataService.getSSP(date,"http://my.testUrl2.org","My Page Content 2",mockPage2,HttpStatus.SC_OK)).andReturn(mockSSP).once();  Map<String,String> fileMap=new HashMap<>();  fileMap.put("http://my.testUrl1.org","My Page Content 1");  fileMap.put("http://my.testUrl2.org","My Page Content 2");  EasyMock.replay(mockSSP);  EasyMock.replay(mockContentDataService);  EasyMock.replay(mockDateFactory);  FileContentLoaderImpl instance=new FileContentLoaderImpl(mockContentDataService,fileMap,mockDateFactory);  instance.setWebResource(mockSite);  instance.run();  assertTrue(instance.getResult().contains(mockSSP));  EasyMock.verify(mockSSP);  EasyMock.verify(mockContentDataService);  EasyMock.verify(mockDateFactory);}  }
class C{  public int numInputCards(){  int result=0;  for (int i=0; i < cardTypeLocation.length; i++) {    if (cardTypeLocation[i] == INPUT_CARD) {      result++;    }  }  if (nodeType == SMINI && result != 1) {    warn("C/MRI SMINI node with " + result + " input cards");  }  if (nodeType == USIC_SUSIC && result >= MAXCARDLOCATIONBYTES) {    warn("C/MRI USIC/SUSIC node with " + result + " input cards");  }  return result;}  }
class C{  public NondominatedSortingComparator(){  super(new RankComparator(),new CrowdingComparator());}  }
class C{  public void addAll(long... values){  for (  long value : values) {    add(value);  }}  }
class C{  public synchronized void renameSchemaObject(Session session,SchemaObject obj,String newName){  checkWritingAllowed();  obj.getSchema().rename(obj,newName);  updateMetaAndFirstLevelChildren(session,obj);}  }
class C{  public static String h(final String name){  return "html/help/" + name + ".html";}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node retval;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=doc.createTextNode("Yesterday");{    boolean success=false;    try {      retval=titleAttr.removeChild(textNode);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  public void release() throws InterruptedException {  final IBufferAccess tmp=m_data.get();  if (tmp == null) {    return;  }  if (m_data.compareAndSet(tmp,null)) {    tmp.release();  }}  }
class C{  public boolean isAllow_Info_Resource(){  Object oo=get_Value(COLUMNNAME_Allow_Info_Resource);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static BigDecimal intRoot(BigDecimal x,long index,int scale){  if (x.signum() < 0) {    throw new IllegalArgumentException("x < 0");  }  int sp1=scale + 1;  BigDecimal n=x;  BigDecimal i=BigDecimal.valueOf(index);  BigDecimal im1=BigDecimal.valueOf(index - 1);  BigDecimal tolerance=BigDecimal.valueOf(5).movePointLeft(sp1);  BigDecimal xPrev;  x=x.divide(i,scale,BigDecimal.ROUND_HALF_EVEN);  do {    BigDecimal xToIm1=intPower(x,index - 1,sp1);    BigDecimal xToI=x.multiply(xToIm1).setScale(sp1,BigDecimal.ROUND_HALF_EVEN);    BigDecimal numerator=n.add(im1.multiply(xToI)).setScale(sp1,BigDecimal.ROUND_HALF_EVEN);    BigDecimal denominator=i.multiply(xToIm1).setScale(sp1,BigDecimal.ROUND_HALF_EVEN);    xPrev=x;    x=numerator.divide(denominator,sp1,BigDecimal.ROUND_DOWN);    Thread.yield();  } while (x.subtract(xPrev).abs().compareTo(tolerance) > 0);  return x;}  }
class C{  public static Intent openDirectoryBrowser(Context context,Uri defaultPath,String title,boolean forceBuildInBrowser){  Intent intent;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && !forceBuildInBrowser) {    intent=new Intent(Intent.ACTION_OPEN_DOCUMENT_TREE);  } else {    intent=new Intent(context,DirectoryBrowserActivity.class);    intent.putExtra(DirectoryBrowserActivity.EXTRA_PATH,defaultPath.getPath());    intent.putExtra(DirectoryBrowserActivity.EXTRA_TITLE,title);  }  return intent;}  }
class C{  protected void appendFieldEnd(StringBuffer buffer,String fieldName){  appendFieldSeparator(buffer);}  }
class C{  public boolean isClassServerError(){  return mCode >= 400 && mCode < 500;}  }
class C{  public static boolean isPrimitive(JCExpression ref){  String typeName=ref.toString();  return PRIMITIVE_TYPE_NAME_PATTERN.matcher(typeName).matches();}  }
class C{  private void updateAverage(){  if (t == last_t || t < burnIn)   return; else   if (last_t < burnIn) {    for (int i=0; i < alphaAveraged.size(); i++)     alphaAveraged.set(i,alphas.get(i));  }  double w=t - last_t;  for (int i=0; i < alphaAveraged.size(); i++) {    double delta=alphas.getD(i) - alphaAveraged.getD(i);    alphaAveraged.set(i,alphaAveraged.getD(i) + delta * w / t);  }  last_t=t;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StandardXYItemLabelGenerator)) {    return false;  }  return super.equals(obj);}  }
class C{  public String toString(){  checkContext();  LinkedList<LogRecord> m_logs=(LinkedList<LogRecord>)Env.getCtx().get(LOGS_KEY);  LinkedList<LogRecord> m_errors=(LinkedList<LogRecord>)Env.getCtx().get(ERRORS_KEY);  LinkedList<LogRecord[]> m_history=(LinkedList<LogRecord[]>)Env.getCtx().get(HISTORY_KEY);  StringBuffer sb=new StringBuffer("CLogErrorBuffer[");  sb.append("Errors=").append(m_errors.size()).append(",History=").append(m_history.size()).append(",Logs=").append(m_logs.size()).append(",Level=").append(getLevel()).append("]");  return sb.toString();}  }
class C{  private Instances[] computeSimpleStats(int index,Instances insts,double[] stats,double[] dist){  Rule rule=m_Ruleset.get(index);  Instances[] data=new Instances[2];  data[0]=new Instances(insts,insts.numInstances());  data[1]=new Instances(insts,insts.numInstances());  for (int i=0; i < insts.numInstances(); i++) {    Instance datum=insts.instance(i);    double weight=datum.weight();    if (rule.covers(datum)) {      data[0].add(datum);      stats[0]+=weight;      if ((int)datum.classValue() == (int)rule.getConsequent()) {        stats[2]+=weight;      } else {        stats[4]+=weight;      }      if (dist != null) {        dist[(int)datum.classValue()]+=weight;      }    } else {      data[1].add(datum);      stats[1]+=weight;      if ((int)datum.classValue() != (int)rule.getConsequent()) {        stats[3]+=weight;      } else {        stats[5]+=weight;      }    }  }  return data;}  }
class C{  public static Result compare(){  DynamicForm form=Form.form().bindFromRequest(request());  String partialFlowExecId1=form.get(COMPARE_FLOW_ID1);  partialFlowExecId1=(partialFlowExecId1 != null) ? partialFlowExecId1.trim() : null;  String partialFlowExecId2=form.get(COMPARE_FLOW_ID2);  partialFlowExecId2=(partialFlowExecId2 != null) ? partialFlowExecId2.trim() : null;  List<AppResult> results1=null;  List<AppResult> results2=null;  if (partialFlowExecId1 != null && !partialFlowExecId1.isEmpty() && partialFlowExecId2 != null && !partialFlowExecId2.isEmpty()) {    IdUrlPair flowExecIdPair1=bestSchedulerInfoMatchGivenPartialId(partialFlowExecId1,AppResult.TABLE.FLOW_EXEC_ID);    IdUrlPair flowExecIdPair2=bestSchedulerInfoMatchGivenPartialId(partialFlowExecId2,AppResult.TABLE.FLOW_EXEC_ID);    results1=AppResult.find.select(AppResult.getSearchFields() + "," + AppResult.TABLE.JOB_DEF_ID+ ","+ AppResult.TABLE.JOB_DEF_URL+ ","+ AppResult.TABLE.FLOW_EXEC_ID+ ","+ AppResult.TABLE.FLOW_EXEC_URL).where().eq(AppResult.TABLE.FLOW_EXEC_ID,flowExecIdPair1.getId()).setMaxRows(100).fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS,AppHeuristicResult.getSearchFields()).findList();    results2=AppResult.find.select(AppResult.getSearchFields() + "," + AppResult.TABLE.JOB_DEF_ID+ ","+ AppResult.TABLE.JOB_DEF_URL+ ","+ AppResult.TABLE.FLOW_EXEC_ID+ ","+ AppResult.TABLE.FLOW_EXEC_URL).where().eq(AppResult.TABLE.FLOW_EXEC_ID,flowExecIdPair2.getId()).setMaxRows(100).fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS,AppHeuristicResult.getSearchFields()).findList();  }  return ok(comparePage.render(compareResults.render(compareFlows(results1,results2))));}  }
class C{  final public boolean isCounterSet(){  return false;}  }
class C{  void insertAfter(NewElement newElement,Element relatedToNew,Element refElement){  final int level=level(refElement);  final int lengthBefore=xml.length;  xml=insertInto(xml,refElement.end.right + 1,'\n' + tabulate(newElement.asString(),level));  shiftSegments(refElement.end.right,xml.length - lengthBefore);  applySegments(newElement,relatedToNew,refElement.end.right,level);  registerElement(relatedToNew);}  }
class C{  public static CipherTextIvMac encrypt(byte[] plaintext,SecretKeys secretKeys) throws GeneralSecurityException {  byte[] iv=generateIv();  Cipher aesCipherForEncryption=Cipher.getInstance(CIPHER_TRANSFORMATION);  aesCipherForEncryption.init(Cipher.ENCRYPT_MODE,secretKeys.getConfidentialityKey(),new IvParameterSpec(iv));  iv=aesCipherForEncryption.getIV();  byte[] byteCipherText=aesCipherForEncryption.doFinal(plaintext);  byte[] ivCipherConcat=CipherTextIvMac.ivCipherConcat(iv,byteCipherText);  byte[] integrityMac=generateMac(ivCipherConcat,secretKeys.getIntegrityKey());  return new CipherTextIvMac(byteCipherText,iv,integrityMac);}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deregister") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public StoragePortRestRep deregisterStoragePort(@PathParam("id") URI id){  ArgValidator.checkFieldUriType(id,StoragePort.class,"id");  StoragePort port=queryResource(id);  if (RegistrationStatus.REGISTERED.toString().equalsIgnoreCase(port.getRegistrationStatus())) {    port.setRegistrationStatus(RegistrationStatus.UNREGISTERED.toString());    _dbClient.persistObject(port);    recordStoragePortEvent(OperationTypeEnum.STORAGE_PORT_DEREGISTER,STORAGEPORT_DEREGISTERED_DESCRIPTION,port.getId());    auditOp(OperationTypeEnum.DEREGISTER_STORAGE_PORT,true,null,port.getLabel(),port.getId().toString());  }  return MapStoragePort.getInstance(_dbClient).toStoragePortRestRep(port);}  }
class C{  public static <T>Set<T> toSet(Enumeration<T> self){  Set<T> answer=new HashSet<T>();  while (self.hasMoreElements()) {    answer.add(self.nextElement());  }  return answer;}  }
class C{  public static String format(Date date){  return format(date,false,TIMEZONE_GMT);}  }
class C{  public Vector rotateXZ(final double angle){  return rotateXZ(Math.sin(angle),Math.cos(angle));}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines,String lineEnding) throws IOException {  writeLines(file,encoding,lines,lineEnding,false);}  }
class C{  @Override public boolean acceptsURL(String url) throws SQLException {  return parseFabricURL(url,null) != null;}  }
class C{  public boolean isSRDFSource(){  return (getSrdfTargets() != null && !getSrdfTargets().isEmpty());}  }
class C{  public void showDialog(Project project){  this.project=project;  getRemotes();}  }
class C{  @Override public synchronized Extension install(URL url) throws InvalidConfigException {  Preconditions.checkNotNull(url);  try {    File tmpFile=download(url);    Extension extension=loadFromFile(tmpFile);    finishInstall(tmpFile,extension);    return extension;  } catch (  InvalidConfigException e) {    throw e;  }catch (  Exception e) {    String msg=baseAction.getText("admin.extension.install.error",new String[]{url.toString()});    log.error(msg,e);    throw new InvalidConfigException(TYPE.INVALID_EXTENSION,msg,e);  }}  }
class C{  public static String argNameValuePairsToString(List<String> args){  if (args == null) {    return UNKNOWN;  }  StringBuilder sb=new StringBuilder();  sb.append("=== Parameters ===").append(LINE_SEPARATOR);  for (  String str : args) {    sb.append(str).append(LINE_SEPARATOR);  }  return sb.append(LINE_SEPARATOR).toString();}  }
class C{  public AbstractGraph(V[] vertices,int[][] edges){  for (int i=0; i < vertices.length; i++) {    addVertex(vertices[i]);  }  createAdjacencyLists(edges,vertices.length);}  }
class C{  public void println() throws IOException {  writer.write(format.getLineSeparator());}  }
class C{  void drawEdge(@NonNull Canvas canvas,@NonNull Paint paint){  PointF lineStart=mPreCorner.getCornerEnd();  Path path;  if (mPreCorner.hasOuterCorner()) {    path=new Path();    if (mPreCorner.hasInnerCorner()) {      path.addArc(mPreCorner.getOvalIfInnerCornerExist(),mPreCorner.getAngleBisectorDegree(),BorderCorner.SWEEP_ANGLE);    } else {      paint.setStrokeWidth(mPreCorner.getOuterCornerRadius());      path.addArc(mPreCorner.getOvalIfInnerCornerNotExist(),mPreCorner.getAngleBisectorDegree(),BorderCorner.SWEEP_ANGLE);    }    canvas.drawPath(path,paint);  } else {    PointF actualStart=mPreCorner.getSharpCornerStart();    canvas.drawLine(actualStart.x,actualStart.y,lineStart.x,lineStart.y,paint);  }  paint.setStrokeWidth(mBorderWidth);  PointF lineEnd=mPostCorner.getCornerStart();  canvas.drawLine(lineStart.x,lineStart.y,lineEnd.x,lineEnd.y,paint);  if (mPostCorner.hasOuterCorner()) {    path=new Path();    if (mPostCorner.hasInnerCorner()) {      path.addArc(mPostCorner.getOvalIfInnerCornerExist(),mPostCorner.getAngleBisectorDegree() - BorderCorner.SWEEP_ANGLE,BorderCorner.SWEEP_ANGLE);    } else {      paint.setStrokeWidth(mPostCorner.getOuterCornerRadius());      path.addArc(mPostCorner.getOvalIfInnerCornerNotExist(),mPostCorner.getAngleBisectorDegree() - BorderCorner.SWEEP_ANGLE,BorderCorner.SWEEP_ANGLE);    }    canvas.drawPath(path,paint);  } else {    PointF actualEnd=mPostCorner.getSharpCornerEnd();    canvas.drawLine(lineEnd.x,lineEnd.y,actualEnd.x,actualEnd.y,paint);  }}  }
class C{  public static int floor(float num){  int floor=(int)num;  return (floor == num) ? floor : ((num > 0) ? floor : (floor - 1));}  }
class C{  MatchStatus tryAssignNodeToShard(String testNode,Map<String,Map<String,Integer>> shardVsNodeSet,Map<String,Map<String,Object>> nodeVsTags,String shardName,Phase phase){  if (tag.isWildCard()) {    if (!shard.isWildCard() && shardName.equals(shard.val))     return NOT_APPLICABLE;    Object tagValueForThisNode=nodeVsTags.get(testNode).get(tag.name);    int v=getNumberOfNodesWithSameTagVal(shard,nodeVsTags,shardVsNodeSet,shardName,new Condition(tag.name,tagValueForThisNode,EQUAL),phase);    if (phase == Phase.ASSIGN || phase == Phase.FUZZY_ASSIGN)     v++;    return replica.canMatch(v,phase) ? NODE_CAN_BE_ASSIGNED : CANNOT_ASSIGN_FAIL;  } else {    if (!shard.isWildCard() && !shardName.equals(shard.val))     return NOT_APPLICABLE;    if (replica.isWildCard()) {      Map<String,Object> tags=nodeVsTags.get(testNode);      if (tag.canMatch(tags == null ? null : tags.get(tag.name),phase))       return NODE_CAN_BE_ASSIGNED; else       return CANNOT_ASSIGN_FAIL;    } else {      int v=getNumberOfNodesWithSameTagVal(shard,nodeVsTags,shardVsNodeSet,shardName,tag,phase);      return replica.canMatch(v,phase) ? NODE_CAN_BE_ASSIGNED : CANNOT_ASSIGN_FAIL;    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String streamsLinkIDHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsLinkIDHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsLinkIDHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streamID=new WhiteboxRaster(streamsLinkIDHeader,"r");    int rows=streamID.getNumberRows();    int cols=streamID.getNumberColumns();    double noData=streamID.getNoDataValue();    double gridResX=streamID.getCellSizeX();    double gridResY=streamID.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    double maxLinkID=streamID.getMaximumValue();    double[] linkLengths=new double[(int)maxLinkID + 1];    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsLinkIDHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    byte numNeighbouringStreamCells=0;    double currentID=0;    double linkLength=0;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streamID.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streamID.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            linkLength=0;            currentID=streamID.getValue(y,x);            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                linkLength+=gridLengths[c];                x+=dX[c];                y+=dY[c];                if (streamID.getValue(y,x) != currentID) {                  linkLengths[(int)(currentID)]=linkLength;                  currentID=streamID.getValue(y,x);                  if (currentID != noData) {                    linkLength=0;                    if (linkLengths[(int)currentID] > 0) {                      flag=false;                    }                  } else {                    flag=false;                  }                }              } else {                linkLengths[(int)currentID]=linkLength;                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streamID.getValue(row,col) > 0) {          currentID=streamID.getValue(row,col);          output.setValue(row,col,linkLengths[(int)currentID]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streamID.close();    output.close();    returnData(outputHeader);    String retData="Stream Link Length Output\n";    for (i=1; i <= maxLinkID; i++) {      retData=retData + i + "\t"+ linkLengths[i]+ "\n";    }    returnData(retData);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  static String read(IXMLReader reader,char entityChar) throws IOException, XMLParseException {  char ch=reader.read();  StringBuffer buf=new StringBuffer();  buf.append(ch);  if (ch == entityChar) {    while (ch != ';') {      ch=reader.read();      buf.append(ch);    }  }  return buf.toString();}  }
class C{  private short checkChildSubpart(HttpServletRequest request,ActionErrors errors,SimpleItypeConfig sic,String lblMax,boolean unlimited){  Vector csp=sic.getSubparts();  if (csp != null && csp.size() > 0) {    for (int i=0; i < csp.size(); i++) {      SimpleItypeConfig csic=(SimpleItypeConfig)csp.elementAt(i);      checkInputfields(request,errors,csic,lblMax,unlimited);      if (!unlimited) {        if (sic.getNumClasses() != 0 && csic.getNumClasses() % sic.getNumClasses() != 0) {          csic.setHasError(true);          return ERR_NC;        }        if (csic.getMaxLimitPerClass() > sic.getMaxLimitPerClass()) {          csic.setHasError(true);          return ERR_CL;        }        if ((csic.getNumClasses() * csic.getMaxLimitPerClass()) < (sic.getNumClasses() * sic.getMaxLimitPerClass())) {          csic.setHasError(true);          return ERR_LS;        }      } else {        if (sic.getNumClasses() != 0 && csic.getNumClasses() % sic.getNumClasses() != 0) {          csic.setHasError(true);          return ERR_NC;        }      }      short errCode=checkChildSubpart(request,errors,csic,lblMax,unlimited);      if (errCode != NO_ERR)       return errCode;    }  }  return NO_ERR;}  }
class C{  public static void addPrecisionSawmillRecipe(ItemStack input,ItemStack primaryOutput){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addPrecisionSawmillRecipe",ItemStack.class,ItemStack.class);    m.invoke(null,input,primaryOutput);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public static void addNature(IProject project,String natureId) throws CoreException {  if (!project.isOpen() || project.hasNature(natureId)) {    return;  }  addNatures(project,Collections.singletonList(natureId));}  }
class C{  @NamespacePermission(fields="#namespace",permissions={NamespacePermissionEnum.READ,NamespacePermissionEnum.WRITE}) private void mockMethodMultiplePermissions(String namespace){}  }
class C{  public void displayMessage(String title,String message){  if (Environment.getBoolean(Environment.UseInternalFrames)) {    JOptionPane.showInternalMessageDialog(Environment.getInternalFrameDesktop(),message,title,JOptionPane.INFORMATION_MESSAGE);  } else {    JOptionPane.showMessageDialog(null,message,title,JOptionPane.INFORMATION_MESSAGE);  }}  }
class C{  public void execute(){  Graph searchGraph;  FindOneFactorClusters fofc;  Object source=getData();  TestType tetradTestType=(TestType)getParams().get("tetradTestType",TestType.TETRAD_WISHART);  if (tetradTestType == null || (!(tetradTestType == TestType.TETRAD_DELTA || tetradTestType == TestType.TETRAD_WISHART))) {    tetradTestType=TestType.TETRAD_DELTA;    getParams().set("tetradTestType",tetradTestType);  }  FindOneFactorClusters.Algorithm algorithm=(FindOneFactorClusters.Algorithm)getParams().get("fofcAlgorithm",FindOneFactorClusters.Algorithm.GAP);  if (source instanceof DataSet) {    fofc=new FindOneFactorClusters((DataSet)source,tetradTestType,algorithm,getParams().getDouble("alpha",0.001));    searchGraph=fofc.search();  } else   if (source instanceof CovarianceMatrix) {    fofc=new FindOneFactorClusters((CovarianceMatrix)source,tetradTestType,algorithm,getParams().getDouble("alpha",0.001));    searchGraph=fofc.search();  } else {    throw new IllegalArgumentException("Unrecognized data type.");  }  if (semIm != null) {    List<List<Node>> partition=MimUtils.convertToClusters2(searchGraph);    List<String> variableNames=ReidentifyVariables.reidentifyVariables2(partition,trueGraph,(DataSet)getData());    rename(searchGraph,partition,variableNames);  } else   if (trueGraph != null) {    List<List<Node>> partition=MimUtils.convertToClusters2(searchGraph);    List<String> variableNames=ReidentifyVariables.reidentifyVariables1(partition,trueGraph);    rename(searchGraph,partition,variableNames);  }  System.out.println("Search Graph " + searchGraph);  try {    Graph graph=new MarshalledObject<>(searchGraph).get();    GraphUtils.circleLayout(graph,200,200,150);    GraphUtils.fruchtermanReingoldLayout(graph);    setResultGraph(graph);    setClusters(MimUtils.convertToClusters(graph,getData().getVariables()));  } catch (  Exception e) {    e.printStackTrace();    throw new RuntimeException(e);  }}  }
class C{  static RowSpec decodeExpanded(String expandedTrimmedLowerCaseSpec){  RowSpec spec=CACHE.get(expandedTrimmedLowerCaseSpec);  if (spec == null) {    spec=new RowSpec(expandedTrimmedLowerCaseSpec);    CACHE.put(expandedTrimmedLowerCaseSpec,spec);  }  return spec;}  }
class C{  @SuppressWarnings("deprecation") public void testSimpleRWWriter() throws FileNotFoundException, IOException {  final ChecksumUtility checker=ChecksumUtility.getCHK();  final HALogManager manager=new HALogManager(m_logdir);  final IRootBlockView rbv=openRBV(StoreTypeEnum.RW);  assertTrue(rbv.getStoreType() == StoreTypeEnum.RW);  final IHALogWriter writer=manager.createLog(rbv).getWriter();  int sequence=0;  final ByteBuffer data=randomData(2000);  final UUID storeUUID=UUID.randomUUID();  final IHAWriteMessage msg=new HAWriteMessage(storeUUID,rbv.getCommitCounter(),rbv.getFirstCommitTime(),sequence,data.limit(),checker.checksum(data),rbv.getStoreType(),rbv.getQuorumToken(),1000,0);  writer.write(msg,data);  writer.close(closeRBV(rbv));  try {    HALogManager.main(new String[]{m_logdir.getAbsolutePath()});  } catch (  InterruptedException e) {  }}  }
class C{  @SuppressWarnings("nls") @RequestMapping("/barbershop") public String barberShop(@RequestParam(value="echo",defaultValue="echo") String echo){  CountDownLatch latch=new CountDownLatch(2);  ExecutorService executor=Executors.newFixedThreadPool(2);  executor.submit(new Barber("Jovanni",latch));  result=new Date().getTime() + ": " + "Jovanni start to work"+ "<br>";  executor.submit(new Barber("Marchello",latch));  result+=new Date().getTime() + ": " + "Marchello start to work"+ "<br>";  for (int i=1; i < 8; i++) {    String clientMessage="client_" + i;    result+=new Date().getTime() + ": " + clientMessage+ " is comming in a queue"+ "<br>";    rabbitTemplate.convertAndSend(QUEUE_NAME,clientMessage);    try {      Thread.sleep(200);    } catch (    InterruptedException e) {    }  }  try {    latch.await();  } catch (  InterruptedException e) {  }  return result;}  }
class C{  @Override protected Network providePreparedNetwork(String path2VissimNetworkInp,String notUsed){  final Network network=NetworkUtils.createNetwork();  final NetworkFactory networkFactory=network.getFactory();  try {    final BufferedReader in=IOUtils.getBufferedReader(path2VissimNetworkInp);    String line=in.readLine();    Pattern linkPattern=Pattern.compile("LINK .*");    Pattern concPattern=Pattern.compile("CONNECTOR .*");    Pattern fromPattern=Pattern.compile(" +FROM .*");    Pattern toPattern=Pattern.compile(" +TO .*");    boolean inLink=false;    boolean inConc=false;    Id<Link> linkId=null;    Node fromLinkNode=null;    Node toLinkNode=null;    while (line != null) {      if (linkPattern.matcher(line).matches()) {        String[] lineVals=line.split(" +");        linkId=Id.create(Long.parseLong(lineVals[1]),Link.class);        inLink=true;      }      if (inLink) {        if (fromPattern.matcher(line).matches()) {          String[] lineVals=line.split(" +");          network.addNode(networkFactory.createNode(Id.create(linkId.toString() + "FROM",Node.class),new Coord(Double.parseDouble(lineVals[2]),Double.parseDouble(lineVals[3]))));        }        if (toPattern.matcher(line).matches()) {          String[] lineVals=line.split(" +");          network.addNode(networkFactory.createNode(Id.create(linkId.toString() + "TO",Node.class),new Coord(Double.parseDouble(lineVals[2]),Double.parseDouble(lineVals[3]))));          Node fromNode=network.getNodes().get(Id.create(linkId.toString() + "FROM",Link.class));          Node toNode=network.getNodes().get(Id.create(linkId.toString() + "TO",Link.class));          network.addLink(networkFactory.createLink(linkId,fromNode,toNode));          inLink=false;        }      }      if (concPattern.matcher(line).matches()) {        String[] lineVals=line.split(" +");        linkId=Id.create(Long.parseLong(lineVals[1]),Link.class);        inConc=true;      }      if (inConc) {        if (fromPattern.matcher(line).matches()) {          String[] lineVals=line.split(" +");          String link=lineVals[3];          double pos=Double.parseDouble(lineVals[lineVals.length - 1]);          if (pos < 50) {            fromLinkNode=network.getNodes().get(Id.create(link + "FROM",Node.class));          } else {            fromLinkNode=network.getNodes().get(Id.create(link + "TO",Node.class));          }        }        if (toPattern.matcher(line).matches()) {          String[] lineVals=line.split(" +");          String link=lineVals[3];          double pos=Double.parseDouble(lineVals[lineVals.length - 6]);          if (pos < 50) {            toLinkNode=network.getNodes().get(Id.create(link + "FROM",Node.class));          } else {            toLinkNode=network.getNodes().get(Id.create(link + "TO",Node.class));          }          network.addLink(networkFactory.createLink(linkId,fromLinkNode,toLinkNode));          inLink=false;        }      }      line=in.readLine();    }  } catch (  IOException e) {    System.out.println("Reading of " + path2VissimNetworkInp + " failed.");    e.printStackTrace();  }  return network;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case KEY:    return isSetKey();case VALUES:  return isSetValues();}throw new IllegalStateException();}  }
class C{  @Override public Set<Object> results(Object state,Action action){  VacuumEnvironmentState vacEnvState=(VacuumEnvironmentState)state;  Set<Object> results=new LinkedHashSet<Object>();  String currentLocation=vacEnvState.getAgentLocation(agent);  String adjacentLocation=(currentLocation.equals(VacuumEnvironment.LOCATION_A)) ? VacuumEnvironment.LOCATION_B : VacuumEnvironment.LOCATION_A;  if (VacuumEnvironment.ACTION_MOVE_RIGHT == action) {    VacuumEnvironmentState s=new VacuumEnvironmentState();    s.setLocationState(currentLocation,vacEnvState.getLocationState(currentLocation));    s.setLocationState(adjacentLocation,vacEnvState.getLocationState(adjacentLocation));    s.setAgentLocation(this.agent,VacuumEnvironment.LOCATION_B);    results.add(s);  } else   if (VacuumEnvironment.ACTION_MOVE_LEFT == action) {    VacuumEnvironmentState s=new VacuumEnvironmentState();    s.setLocationState(currentLocation,vacEnvState.getLocationState(currentLocation));    s.setLocationState(adjacentLocation,vacEnvState.getLocationState(adjacentLocation));    s.setAgentLocation(this.agent,VacuumEnvironment.LOCATION_A);    results.add(s);  } else   if (VacuumEnvironment.ACTION_SUCK == action) {    if (VacuumEnvironment.LocationState.Dirty == vacEnvState.getLocationState(vacEnvState.getAgentLocation(this.agent))) {      VacuumEnvironmentState s1=new VacuumEnvironmentState();      s1.setLocationState(currentLocation,VacuumEnvironment.LocationState.Clean);      s1.setLocationState(adjacentLocation,vacEnvState.getLocationState(adjacentLocation));      s1.setAgentLocation(this.agent,currentLocation);      results.add(s1);      VacuumEnvironmentState s2=new VacuumEnvironmentState();      s2.setLocationState(currentLocation,VacuumEnvironment.LocationState.Clean);      s2.setLocationState(adjacentLocation,VacuumEnvironment.LocationState.Clean);      s2.setAgentLocation(this.agent,currentLocation);      results.add(s2);    } else {      VacuumEnvironmentState s1=new VacuumEnvironmentState();      s1.setLocationState(currentLocation,vacEnvState.getLocationState(currentLocation));      s1.setLocationState(adjacentLocation,vacEnvState.getLocationState(adjacentLocation));      s1.setAgentLocation(this.agent,currentLocation);      results.add(s1);      VacuumEnvironmentState s2=new VacuumEnvironmentState();      s2.setLocationState(currentLocation,VacuumEnvironment.LocationState.Dirty);      s2.setLocationState(adjacentLocation,vacEnvState.getLocationState(adjacentLocation));      s2.setAgentLocation(this.agent,currentLocation);      results.add(s2);    }  } else   if (action.isNoOp()) {  }  return results;}  }
class C{  private boolean before(long a,long b){  return a < b ^ a - b > (MAXIMUM_KEY / 2);}  }
class C{  public void disableWhenHorizontalMove(boolean disable){  mDisableWhenHorizontalMove=disable;}  }
class C{  public String latLon2(LatLon latlon){  if (latlon == null) {    String msg=Logging.getMessage("nullValue.LatLonIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  String latAngle=this.angle("",Angle.fromDegrees(Math.abs(latlon.getLatitude().degrees)));  String latString=String.format("%s%s",latAngle,latlon.getLatitude().degrees >= 0 ? "N" : "S");  String lonAngle=this.angle("",Angle.fromDegrees(Math.abs(latlon.getLongitude().degrees)));  String lonString=String.format("%s%s",lonAngle,latlon.getLongitude().degrees >= 0 ? "E" : "W");  return String.format("%s %s",latString,lonString);}  }
class C{  @Override public int read(final char[] array,final int offset,final int length){  if (idx >= charSequence.length()) {    return EOF;  }  if (array == null) {    throw new NullPointerException("Character array is missing");  }  if (length < 0 || offset < 0 || offset + length > array.length) {    throw new IndexOutOfBoundsException("Array Size=" + array.length + ", offset="+ offset+ ", length="+ length);  }  int count=0;  for (int i=0; i < length; i++) {    final int c=read();    if (c == EOF) {      return count;    }    array[offset + i]=(char)c;    count++;  }  return count;}  }
class C{  private boolean isAssetFileExist(String path){  boolean result=true;  final AssetManager am=getActivity().getAssets();  InputStream is=null;  try {    is=am.open(path);  } catch (  Exception ignored) {    result=false;  } finally {    if (is != null) {      try {        is.close();      } catch (      Exception ignored) {      }    }  }  return result;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:13.402 -0500",hash_original_method="8BB21142A239D7B3379295133F294A9B",hash_generated_method="87ABD1B79CDBE3CA7FB6FCF973691D0A") static private String trimDoubleQuotesIfAny(String value){  if (value != null) {    int len=value.length();    if (len > 2 && value.charAt(0) == '\"' && value.charAt(len - 1) == '\"') {      return value.substring(1,len - 1);    }  }  return value;}  }
class C{  @Override public void validate(final Cookie cookie,final CookieOrigin origin) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  final String host=origin.getHost().toLowerCase();  if (cookie.getDomain() == null) {    throw new MalformedCookieException("Invalid cookie state: " + "domain not specified");  }  final String cookieDomain=cookie.getDomain().toLowerCase();  if (cookie.isDomainAttributeSpecified()) {    if (!cookieDomain.startsWith(".")) {      throw new MalformedCookieException("Domain attribute \"" + cookie.getDomain() + "\" violates RFC 2109: domain must start with a dot");    }    final int dotIndex=cookieDomain.indexOf('.',1);    if (((dotIndex < 0) || (dotIndex == cookieDomain.length() - 1)) && (!cookieDomain.equals(".local"))) {      throw new MalformedCookieException("Domain attribute \"" + cookie.getDomain() + "\" violates RFC 2965: the value contains no embedded dots "+ "and the value is not .local");    }    if (!domainMatch(host,cookieDomain)) {      throw new MalformedCookieException("Domain attribute \"" + cookie.getDomain() + "\" violates RFC 2965: effective host name does not "+ "domain-match domain attribute.");    }    final String effectiveHostWithoutDomain=host.substring(0,host.length() - cookieDomain.length());    if (effectiveHostWithoutDomain.indexOf('.') != -1) {      throw new MalformedCookieException("Domain attribute \"" + cookie.getDomain() + "\" violates RFC 2965: "+ "effective host minus domain may not contain any dots");    }  } else {    if (!cookie.getDomain().equals(host)) {      throw new MalformedCookieException("Illegal domain attribute: \"" + cookie.getDomain() + "\"."+ "Domain of origin: \""+ host+ "\"");    }  }}  }
class C{  public boolean moveActivityTaskToBack(IBinder token,boolean nonRoot){  enforceNotIsolatedCaller("moveActivityTaskToBack");synchronized (this) {    final long origId=Binder.clearCallingIdentity();    int taskId=getTaskForActivityLocked(token,!nonRoot);    if (taskId >= 0) {      return mMainStack.moveTaskToBackLocked(taskId,null);    }    Binder.restoreCallingIdentity(origId);  }  return false;}  }
class C{  public WTableDirEditor(String columnName,boolean mandatory,boolean isReadOnly,boolean isUpdateable,Lookup lookup){  super(new Combobox(),columnName,null,null,mandatory,isReadOnly,isUpdateable);  if (lookup == null) {    throw new IllegalArgumentException("Lookup cannot be null");  }  this.lookup=lookup;  init();}  }
class C{  private boolean hasColumn(String table,String column){  try {    db.execSQL("SElECT count(*) from  " + table + " order by  "+ column);  } catch (  Exception e) {    if (e.getMessage().indexOf("no such column") > -1) {      return false;    }  }  return true;}  }
class C{  public static Map<String,RDFNode> mapProperty2VarNames(Map<Property,RDFNode> map){  Map<String,RDFNode> results=new HashMap<String,RDFNode>();  for (  Property predicate : map.keySet()) {    RDFNode value=map.get(predicate);    results.put(predicate.getLocalName(),value);  }  return results;}  }
class C{  public void focusGained(FocusEvent e){}  }
class C{  private boolean isListaDescriptoraEnUso(HttpServletRequest request,String[] idsListasDescriptoras){  GestionDescripcionBI descripcionService=getGestionDescripcionBI(request);  idsListasDescriptoras=getFirstTokenId(idsListasDescriptoras,"#");  List list=descripcionService.getElementosEnUsoXIdsObj(idsListasDescriptoras);  if (list != null && list.size() > 0) {    for (int i=0; i < list.size(); i++) {      UsoObjetoVO usoObjetoVO=(UsoObjetoVO)list.get(i);      String idListaDescriptora=usoObjetoVO.getIdObj();      ListaDescrVO listaDescrVO=descripcionService.getListaDescriptora(idListaDescriptora);      if (usoObjetoVO.getTipoObjUsuario() == TipoObjetoUsuario.FICHA) {        FichaVO fichaVO=descripcionService.getFicha(usoObjetoVO.getIdObjUsuario());        ActionErrors errors=new ActionErrors();        errors.add(FICHA_USA_LISTA_DESCRIPTORA,new ActionError(FICHA_USA_LISTA_DESCRIPTORA,listaDescrVO.getNombre(),fichaVO.getNombre()));        ErrorsTag.saveErrors(request,errors);        return true;      }    }  }  return false;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private Hop simplifyTransposeAggBinBinaryChains(Hop parent,Hop hi,int pos) throws HopsException {  if (hi instanceof ReorgOp && ((ReorgOp)hi).getOp() == ReOrgOp.TRANSPOSE && hi.getInput().get(0) instanceof BinaryOp && ((BinaryOp)hi.getInput().get(0)).supportsMatrixScalarOperations()) {    Hop left=hi.getInput().get(0).getInput().get(0);    Hop C=hi.getInput().get(0).getInput().get(1);    if (left instanceof AggBinaryOp && C.getDataType().isMatrix() && left.getInput().get(0).getParent().size() == 1 && left.getInput().get(0) instanceof ReorgOp && ((ReorgOp)left.getInput().get(0)).getOp() == ReOrgOp.TRANSPOSE && left.getInput().get(1).getParent().size() == 1 && left.getInput().get(1) instanceof ReorgOp && ((ReorgOp)left.getInput().get(1)).getOp() == ReOrgOp.TRANSPOSE) {      Hop A=left.getInput().get(0).getInput().get(0);      Hop B=left.getInput().get(1).getInput().get(0);      AggBinaryOp abop=HopRewriteUtils.createMatrixMultiply(B,A);      ReorgOp rop=HopRewriteUtils.createTranspose(C);      BinaryOp bop=HopRewriteUtils.createBinary(abop,rop,OpOp2.PLUS);      HopRewriteUtils.removeChildReferenceByPos(parent,hi,pos);      HopRewriteUtils.addChildReference(parent,bop,pos);      hi=bop;      LOG.debug("Applied simplifyTransposeAggBinBinaryChains (line " + hi.getBeginLine() + ").");    }  }  return hi;}  }
class C{  public static CFrame openBrowse(int browse_ID){  MBrowse browse=new MBrowse(Env.getCtx(),browse_ID,null);  boolean modal=true;  int WindowNo=0;  String value="";  String keyColumn="";  boolean multiSelection=true;  String whereClause=null;  CFrame ff=new CFrame();  return new VBrowser(ff,modal,WindowNo,value,browse,keyColumn,multiSelection,whereClause).getFrame();}  }
class C{  public void addModel(ModelRenderer model,float x,float y,float z,boolean inherit){  addModel(model,x,y,z,inherit,false);}  }
class C{  @SuppressWarnings("unchecked") private Script createScript(Object compiledScript,Map<String,Object> vars) throws InstantiationException, IllegalAccessException {  Class scriptClass=(Class)compiledScript;  Script scriptObject=(Script)scriptClass.newInstance();  Binding binding=new Binding();  binding.getVariables().putAll(vars);  scriptObject.setBinding(binding);  return scriptObject;}  }
class C{  public void addActionListener(EventListener listener){  addEventListener(Events.ON_SELECT,listener);}  }
class C{  boolean isAnnotationsPresent(@Nullable GridDeployment dep,Object target,AnnotationSet annSet){  assert target != null;  assert annSet != null;  return descriptor(dep,target.getClass()).isAnnotated(annSet) != 0;}  }
class C{  public void grabFocus(){  requestFocus();}  }
class C{  public void dup2X1(){  mv.visitInsn(Opcodes.DUP2_X1);}  }
class C{  @SuppressWarnings("nullness") private Finalizer(Class<?> finalizableReferenceClass,Object frq){  super(Finalizer.class.getName());  this.finalizableReferenceClassReference=new WeakReference<Class<?>>(finalizableReferenceClass);  this.frqReference=new PhantomReference<Object>(frq,queue);  setDaemon(true);  try {    if (inheritableThreadLocals != null) {      inheritableThreadLocals.set(this,null);    }  } catch (  Throwable t) {    logger.log(Level.INFO,"Failed to clear thread local values inherited" + " by reference finalizer thread.",t);  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());}  }
class C{  private int readAheadBlocking() throws IOException {  do {    if (state == STATE_DONE) {      return -1;    }    ensureRawAvailable(32);    int nread;    try {      nread=in.read(rawData,rawCount,rawData.length - rawCount);    } catch (    IOException e) {      error=true;      throw e;    }    if (nread < 0) {      error=true;      throw new IOException("Premature EOF");    }    rawCount+=nread;    processRaw();  } while (chunkCount <= 0);  return chunkCount - chunkPos;}  }
class C{  protected String generateConfigurationFeaturesText(String containerId){  StringBuilder output=new StringBuilder();  output.append("h3.Configuration Features");  output.append(LINE_SEPARATOR);  output.append(LINE_SEPARATOR);  output.append("|| Feature name || Java API || Ant tasks || Maven 2 / Maven 3 plugin || Comment ||");  output.append(LINE_SEPARATOR);  output.append(generateStandaloneConfigurationText(containerId,ContainerType.INSTALLED));  output.append(LINE_SEPARATOR);  output.append(generateStandaloneConfigurationText(containerId,ContainerType.EMBEDDED));  output.append(LINE_SEPARATOR);  output.append(generateExistingConfigurationText(containerId,ContainerType.INSTALLED));  output.append(LINE_SEPARATOR);  output.append(generateExistingConfigurationText(containerId,ContainerType.EMBEDDED));  output.append(LINE_SEPARATOR);  if (this.configurationFactory.isConfigurationRegistered(containerId,ContainerType.REMOTE,ConfigurationType.RUNTIME)) {    output.append("| [Runtime Configuration] | ");    output.append("(/) {{" + computedFQCN(this.configurationFactory.getConfigurationClass(containerId,ContainerType.REMOTE,ConfigurationType.RUNTIME).getName()) + "}} | (/) | (/) | |");  } else {    output.append("| [Runtime Configuration] | (x) | (x) | (x) | |");  }  output.append(LINE_SEPARATOR);  if (this.containerCapabilityFactory.createContainerCapability(containerId).supportsDeployableType(DeployableType.WAR)) {    output.append("| [Static deployment of WAR] | (/) | (/) | (/) | ");    if (containerId.equals("tomcat4x")) {      output.append("Does not support {{META-INF/context.xml}} files yet ");    }    output.append("|");    output.append(LINE_SEPARATOR);    if (containerId.startsWith("geronimo")) {      output.append("| [Static deployment of expanded WAR] | (x) | (x) | (x) | " + "The Apache Geronimo container does not support expanded WARs |");    } else     if (containerId.startsWith("websphere")) {      output.append("| [Static deployment of expanded WAR] | (x) | (x) | (x) | " + "The WebSphere container does not support expanded WARs |");    } else {      output.append("| [Static deployment of expanded WAR] | (/) | (/) | (/) | |");    }  } else {    output.append("| [Static deployment of WAR] | (x) | (x) | (x) | |");  }  output.append(LINE_SEPARATOR);  if (this.containerCapabilityFactory.createContainerCapability(containerId).supportsDeployableType(DeployableType.EJB)) {    output.append("| [Static deployment of EJB] | (/) | (/) | (/) | |");  } else {    output.append("| [Static deployment of EJB] | (x) | (x) | (x) | |");  }  output.append(LINE_SEPARATOR);  if (this.containerCapabilityFactory.createContainerCapability(containerId).supportsDeployableType(DeployableType.EAR)) {    output.append("| [Static deployment of EAR] | (/) | (/) | (/) | |");  } else {    output.append("| [Static deployment of EAR] | (x) | (x) | (x) | |");  }  output.append(LINE_SEPARATOR);  if (this.containerCapabilityFactory.createContainerCapability(containerId).supportsDeployableType(DeployableType.RAR)) {    output.append("| [Static deployment of RAR] | (/) | (/) | (/) | |");  } else {    output.append("| [Static deployment of RAR] | (x) | (x) | (x) | |");  }  output.append(LINE_SEPARATOR);  if (containerId.startsWith("jboss") || containerId.startsWith("wildfly")) {    if (this.containerCapabilityFactory.createContainerCapability(containerId).supportsDeployableType(DeployableType.HAR)) {      output.append("| [Static deployment of (JBoss) HAR] | (/) | (/) | (/) | |");    } else {      output.append("| [Static deployment of (JBoss) HAR] | (x) | (x) | (x) | |");    }    output.append(LINE_SEPARATOR);    if (this.containerCapabilityFactory.createContainerCapability(containerId).supportsDeployableType(DeployableType.SAR)) {      output.append("| [Static deployment of (JBoss) SAR] | (/) | (/) | (/) | |");    } else {      output.append("| [Static deployment of (JBoss) SAR] | (x) | (x) | (x) | |");    }    output.append(LINE_SEPARATOR);    if (this.containerCapabilityFactory.createContainerCapability(containerId).supportsDeployableType(DeployableType.AOP)) {      output.append("| [Static deployment of (JBoss) AOP] | (/) | (/) | (/) | |");    } else {      output.append("| [Static deployment of (JBoss) AOP] | (x) | (x) | (x) | |");    }    output.append(LINE_SEPARATOR);  }  if (this.containerCapabilityFactory.createContainerCapability(containerId).supportsDeployableType(DeployableType.FILE)) {    output.append("| [Static deployment of files] | (/) | (/) | (/) | |");  } else {    output.append("| [Static deployment of files] | (x) | (x) | (x) | |");  }  output.append(LINE_SEPARATOR);  if (this.containerCapabilityFactory.createContainerCapability(containerId).supportsDeployableType(DeployableType.BUNDLE)) {    output.append("| [Static deployment of OSGi Bundles] | (/) | (/) | (/) | |");  } else {    output.append("| [Static deployment of OSGi Bundles] | (x) | (x) | (x) | |");  }  output.append(LINE_SEPARATOR);  if (containerId.equals("jboss7x")) {    output.append("{note}Even thought the JBoss 7.x container can deploy EJBs, JBoss ");    output.append("7.0 itself it does not support remote EJB lookups yet.");    output.append(LINE_SEPARATOR);    output.append("If you plan to use remote EJBs on JBoss 7, please use ");    output.append("[JBoss 7.1 or above|JBoss 7.1.x]. For further details, please read: ");    output.append("http://community.jboss.org/message/616870{note}");    output.append(LINE_SEPARATOR);    output.append(LINE_SEPARATOR);  }  return output.toString();}  }
class C{  @Override public void addVertexWithUV(double par1,double par3,double par5,double par7,double par9){  this.setTextureUV(par7,par9);  this.addVertex(par1,par3,par5);}  }
class C{  @Override public T defaultCase(EObject object){  return null;}  }
class C{  private boolean isValid(String value){  if (value == null) {    return false;  }  Matcher matchUrlPat=URL_PATTERN.matcher(value);  if (!LEGAL_ASCII_PATTERN.matcher(value).matches()) {    return false;  }  if (!matchUrlPat.matches()) {    return false;  }  if (!isValidScheme(matchUrlPat.group(PARSE_URL_SCHEME))) {    return false;  }  if (!isValidAuthority(matchUrlPat.group(PARSE_URL_AUTHORITY))) {    return false;  }  if (!isValidPath(matchUrlPat.group(PARSE_URL_PATH))) {    return false;  }  if (!isValidQuery(matchUrlPat.group(PARSE_URL_QUERY))) {    return false;  }  return true;}  }
class C{  private String createString(String f){  return "srcXInBytes=" + srcXInBytes + f+ "srcY="+ srcY+ f+ "srcZ="+ srcZ+ f+ "srcLOD="+ srcLOD+ f+ "srcMemoryType="+ CUmemorytype.stringFor(srcMemoryType)+ f+ "srcHost ="+ srcHost+ f+ "srcDevice ="+ srcDevice+ f+ "srcArray ="+ srcArray+ f+ "srcPitch="+ srcPitch+ f+ "srcHeight="+ srcHeight+ f+ "dstXInBytes="+ dstXInBytes+ f+ "dstY="+ dstY+ f+ "dstZ="+ dstZ+ f+ "dstLOD="+ dstLOD+ f+ "dstMemoryType="+ CUmemorytype.stringFor(dstMemoryType)+ f+ "dstHost ="+ dstHost+ f+ "dstDevice ="+ dstDevice+ f+ "dstArray ="+ dstArray+ f+ "dstPitch="+ dstPitch+ f+ "dstHeight="+ dstHeight+ f+ "WidthInBytes="+ WidthInBytes+ f+ "Height="+ Height+ f+ "Depth="+ Depth;}  }
class C{  public DynamicRenderer(){  super();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i;  double numInNeighbours;  boolean flag=false;  boolean logTransform=false;  String outputType=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      power=Double.parseDouble(args[i]);      if (power > 10) {        power=10;      }    } else     if (i == 3) {      outputType=args[i].toLowerCase();    } else     if (i == 4) {      logTransform=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      if (!args[i].toLowerCase().contains("not specified")) {        threshold=Double.parseDouble(args[i]);      } else {        threshold=-9999;      }    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    gridRes=DEM.getCellSizeX();    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,1);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    tmpGrid=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpGrid.isTemporaryFile=true;    int loopNum=1;    updateProgress("Loop " + loopNum + ":",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          numInNeighbours=0;          for (i=0; i < 8; i++) {            if (DEM.getValue(row + dY[i],col + dX[i]) > z) {              numInNeighbours++;            }          }          tmpGrid.setValue(row,col,numInNeighbours);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop " + loopNum + ":",(int)progress);    }    boolean somethingDone;    do {      loopNum++;      updateProgress("Loop " + loopNum + ":",0);      somethingDone=false;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          if (tmpGrid.getValue(row,col) == 0) {            FD8Accum(row,col);            somethingDone=true;          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    } while (somethingDone);    loopNum++;    updateProgress("Loop " + loopNum + ":",0);    if (outputType.equals("specific catchment area (sca)")) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=DEM.getValue(row,col);          if (z != noData) {            output.setValue(row,col,output.getValue(row,col) * gridRes);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    } else     if (outputType.equals("total catchment area")) {      double gridCellArea=gridRes * gridRes;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output.getValue(row,col);          if (z != noData) {            output.setValue(row,col,output.getValue(row,col) * gridCellArea);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    }    if (logTransform) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output.getValue(row,col);          if (z != noData) {            output.setValue(row,col,Math.log(output.getValue(row,col)));          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    } else {      output.setNonlinearity(0.2);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    tmpGrid.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public IntTextField(){  super(3);  initTextField();}  }
class C{  public void cancelRequest(int senderWhat,Handler target,int targetWhat){synchronized (this) {    Registration start=mReg;    Registration r=start;    if (r == null) {      return;    }    do {      if (r.senderWhat >= senderWhat) {        break;      }      r=r.next;    } while (r != start);    if (r.senderWhat == senderWhat) {      Handler[] targets=r.targets;      int[] whats=r.targetWhats;      int oldLen=targets.length;      for (int i=0; i < oldLen; i++) {        if (targets[i] == target && whats[i] == targetWhat) {          r.targets=new Handler[oldLen - 1];          r.targetWhats=new int[oldLen - 1];          if (i > 0) {            System.arraycopy(targets,0,r.targets,0,i);            System.arraycopy(whats,0,r.targetWhats,0,i);          }          int remainingLen=oldLen - i - 1;          if (remainingLen != 0) {            System.arraycopy(targets,i + 1,r.targets,i,remainingLen);            System.arraycopy(whats,i + 1,r.targetWhats,i,remainingLen);          }          break;        }      }    }  }}  }
class C{  public String nextValue() throws IOException {  Token tkn=nextToken();  String ret=null;switch (tkn.type) {case TT_TOKEN:case TT_EORECORD:    ret=tkn.content.toString();  break;case TT_EOF:ret=null;break;case TT_INVALID:default :throw new IOException("(line " + getLineNumber() + ") invalid parse sequence");}return ret;}  }
class C{  private void openLogin(){  Intent i=new Intent(this,LoginActivity.class);  startActivity(i);  finish();}  }
class C{  private static int partition(final double[] arr,final int lo,final int hi){  int i=lo, j=hi + 1;  double v=arr[lo];  while (true) {    while (arr[++i] < v) {      if (i == hi) {        break;      }    }    while (v < arr[--j]) {      if (j == lo) {        break;      }    }    if (i >= j) {      break;    }    double x=arr[i];    arr[i]=arr[j];    arr[j]=x;  }  double x=arr[lo];  arr[lo]=arr[j];  arr[j]=x;  return j;}  }
class C{  public TenantResponse current(){  TenantResponse tenant=client.get(TenantResponse.class,CURRENT_TENANT_URL);  return tenant;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element rootNode;  NodeList childList;  Node childToRemove;  Node removedChild;  Node parentNode;  doc=(Document)load("hc_staff",true);  rootNode=doc.getDocumentElement();  childList=rootNode.getChildNodes();  childToRemove=childList.item(1);  removedChild=rootNode.removeChild(childToRemove);  parentNode=removedChild.getParentNode();  assertNull("parentNodeNull",parentNode);}  }
class C{  private void NV21toI420SemiPlanar(byte[] nv21bytes,byte[] i420bytes,int width,int height){  System.arraycopy(nv21bytes,0,i420bytes,0,width * height);  for (int i=width * height; i < nv21bytes.length; i+=2) {    i420bytes[i]=nv21bytes[i + 1];    i420bytes[i + 1]=nv21bytes[i];  }}  }
class C{  public AtomicReference(V initialValue){  value=initialValue;}  }
class C{  public CargoProject(String packaging,String groupId,String artifactId,String buildDirectory,String finalName,Set<Artifact> artifacts,Log log){  this(packaging,groupId,artifactId,buildDirectory,finalName,null,Collections.<Artifact>emptyList(),artifacts,log);}  }
class C{  public ObjectName manageCacheServer() throws AdminException, MalformedObjectNameException {  try {    SystemMemberBridgeServerJmxImpl bridge=(SystemMemberBridgeServerJmxImpl)addCacheServer();    return ObjectName.getInstance(bridge.getMBeanName());  } catch (  AdminException e) {    MBeanUtil.logStackTrace(Level.WARN,e);    throw e;  }catch (  RuntimeException e) {    MBeanUtil.logStackTrace(Level.WARN,e);    throw e;  }catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  Error e) {    SystemFailure.checkFailure();    MBeanUtil.logStackTrace(Level.ERROR,e);    throw e;  }}  }
class C{  public static PatternEveryExpr everyFilter(String eventTypeName){  PatternExpr filter=new PatternFilterExpr(Filter.create(eventTypeName));  return new PatternEveryExpr(filter);}  }
class C{  private void correctChanged(){  clock.setCorrectHardware(correctCheckBox.isSelected(),true);  changed=true;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void save() throws FileNotFoundException {  PrintStream p=new PrintStream(file);  p.println(COMMENT_PREFIX + "Saved ELKI settings. First line is title, remaining lines are parameters.");  for (  Pair<String,ArrayList<String>> settings : store) {    p.println(settings.first);    for (    String str : settings.second) {      p.println(str);    }    p.println();  }  p.close();}  }
class C{  public Bank(){  super();}  }
class C{  private Object readResolve(){  return this;}  }
class C{  public boolean isFolder(){  return mMimeType != null && mMimeType.equals("DIR");}  }
class C{  public Builder engineSettings(final Map<String,EngineSettings> settings){  this.settings=settings;  return this;}  }
class C{  @Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,XYSeriesRenderer seriesRenderer,float yAxisValue,int seriesIndex,int startIndex){  mCharts[seriesIndex].setScreenR(getScreenR());  mCharts[seriesIndex].setCalcRange(getCalcRange(mDataset.getSeriesAt(seriesIndex).getScaleNumber()),0);  mCharts[seriesIndex].drawSeries(canvas,paint,points,seriesRenderer,yAxisValue,0,startIndex);}  }
class C{  protected boolean isAvailableLookAndFeel(String laf){  try {    Class lnfClass=Class.forName(laf);    LookAndFeel newLAF=(LookAndFeel)(lnfClass.newInstance());    return newLAF.isSupportedLookAndFeel();  } catch (  Exception e) {    return false;  }}  }
class C{  public Vector3f multLocal(float x,float y,float z){  this.x*=x;  this.y*=y;  this.z*=z;  return this;}  }
class C{  public static boolean isObligationFinished(ObligationStatusMessage message,ProverJob proverJob){  String status=message.getStatus();  boolean isTrivial=status.equals(TRIVIAL);  return isTrivial || status.equals(PROVED);}  }
class C{  public void updateFilters(FilterOptions[] filterOptions) throws XZIOException {  if (blockEncoder != null)   throw new UnsupportedOptionsException("Changing filter options " + "in the middle of a XZ Block not implemented");  if (filterOptions.length < 1 || filterOptions.length > 4)   throw new UnsupportedOptionsException("XZ filter chain must be 1-4 filters");  filtersSupportFlushing=true;  FilterEncoder[] newFilters=new FilterEncoder[filterOptions.length];  for (int i=0; i < filterOptions.length; ++i) {    newFilters[i]=filterOptions[i].getFilterEncoder();    filtersSupportFlushing&=newFilters[i].supportsFlushing();  }  RawCoder.validate(newFilters);  filters=newFilters;}  }
class C{  public static <V,E>UndirectedGraph<V,E> synchronizedUndirectedGraph(UndirectedGraph<V,E> graph){  return new SynchronizedUndirectedGraph<V,E>(graph);}  }
class C{  public boolean hasReturn5y(){  return getReturn5y() != null;}  }
class C{  public StringTokenizer(String str){  this(str," \t\n\r\f",false);}  }
class C{  private static byte[] asciiBytes(String value){  try {    return value.getBytes("ASCII");  } catch (  UnsupportedEncodingException uee) {    throw new RuntimeException("ASCII not found!",uee);  }}  }
class C{  public TransactionMetaDataPair(final Deserializer deserializer){  super("transaction","meta",TransactionFactory.VERIFIABLE,null,deserializer);}  }
class C{  public void opponent(IPlayer opponent){  this.opponent=opponent;}  }
class C{  public ToggleViewPropertyAction(Application app,@Nullable View view,String propertyName){  this(app,view,propertyName,Boolean.TYPE,true,false);}  }
class C{  @Override public void write(ByteAppendable os,char ch) throws IOException {  if (ch < 0x80) {    os.write(ch);  } else   if (ch < 0x800) {    os.write((0xc0 + (ch >> 6)));    os.write((0x80 + (ch & 0x3f)));  } else {    os.write((0xe0 + (ch >> 12)));    os.write((0x80 + ((ch >> 6) & 0x3f)));    os.write((0x80 + (ch & 0x3f)));  }}  }
class C{  public static double RHfitness(boolean useTrainingData,GEPIndividual ind,double precision[]){  if (precision.length != 1)   System.err.println("Warning: 2nd arg to RHfitness method expected to have 1 double value (precision) but has " + precision.length);  double RH=RHrawFitness(useTrainingData,ind,0,precision[0]);  return (RH);}  }
class C{  public boolean hasIndexed(){  return getIndexed() != null;}  }
class C{  public static <V,E>SynchronizedForest<V,E> synchronizedForest(Forest<V,E> forest){  return new SynchronizedForest<V,E>(forest);}  }
class C{  private static Boolean readAmfBoolean(ParsableByteArray data){  return data.readUnsignedByte() == 1;}  }
class C{  public Model addProperty(String name,String value){  requireNonNull(name,"Property name should not be null");  requireNonNull(value,"Property value should not be null");  addPropertyToXML(name,value);  properties().put(name,value);  return this;}  }
class C{  public MemoryImageSource(int w,int h,ColorModel cm,byte[] pix,int off,int scan){  initialize(w,h,cm,(Object)pix,off,scan,null);}  }
class C{  public int bytesLeft(){  return bufsize - offset;}  }
class C{  public void addJDIListener(int index,JDIListener jl){  jdiListeners.add(index,jl);}  }
class C{  public void authenticate(final String userSecret) throws AuthenticationException {  if (isValid(userSecret)) {    tokenMap.remove(userSecret);  } else {    throw new AuthenticationException(403,"Authentication of user failed. Token " + userSecret + " not found or expired.");  }}  }
class C{  private void findNewPath(CampusWorld geoTest){  Node currentJunction=geoTest.network.findNode(location.getGeometry().getCoordinate());  if (currentJunction != null) {    DirectedEdgeStar directedEdgeStar=currentJunction.getOutEdges();    Object[] edges=directedEdgeStar.getEdges().toArray();    if (edges.length > 0) {      int i=geoTest.random.nextInt(edges.length);      GeomPlanarGraphDirectedEdge directedEdge=(GeomPlanarGraphDirectedEdge)edges[i];      GeomPlanarGraphEdge edge=(GeomPlanarGraphEdge)directedEdge.getEdge();      LineString newRoute=edge.getLine();      Point startPoint=newRoute.getStartPoint();      Point endPoint=newRoute.getEndPoint();      if (startPoint.equals(location.geometry)) {        setNewRoute(newRoute,true);      } else {        if (endPoint.equals(location.geometry)) {          setNewRoute(newRoute,false);        } else {          System.err.println("Where am I?");        }      }    }  }}  }
class C{  public void testLongValueNegative1(){  byte aBytes[]={12,-1,100,-2,-76,-128,45,91,3};  long result=-43630045168837885L;  long aNumber=new BigInteger(aBytes).longValue();  assertTrue(aNumber == result);}  }
class C{  public boolean areAllSegmentPresent(int datasetSize){  return mPieSegmentList.size() == datasetSize;}  }
class C{  private String addDefaultProfile(){  String profile=System.getProperty("spring.profiles.active");  if (profile != null) {    log.info("Running with Spring profile(s) : {}",profile);    return profile;  }  log.warn("No Spring profile configured, running with default configuration");  return Constants.SPRING_PROFILE_DEVELOPMENT;}  }
class C{  public TPS filter(final INameFilter filter){  return filter(MIN_TIMESTAMP,MAX_TIMESTAMP,filter);}  }
class C{  static public void add(Errors errors,String text){  if (errors == null) {    return;  }  errors.add(text);}  }
class C{  public Tuple[] clearInternal(){  Tuple[] t=new Tuple[getTupleCount()];  Iterator iter=tuples();  for (int i=0; iter.hasNext(); ++i) {    t[i]=(Tuple)iter.next();  }  m_tuples.clear();  return t;}  }
class C{  private void recordMethodCounts(){  recordGaugeValues(traces.getDataToFlush());}  }
class C{  @LargeTest public void testTransitionAlpha() throws Exception {  final String videoItemFilename1=INPUT_FILE_PATH + "H264_BP_640x480_30fps_256kbps_1_17.mp4";  final String videoItemFilename2=INPUT_FILE_PATH + "H263_profile0_176x144_15fps_128kbps_1_35.3gp";  final String imageItemFilename1=INPUT_FILE_PATH + "IMG_640x480.jpg";  final String videoItemFilename3=INPUT_FILE_PATH + "H264_BP_640x480_30fps_192kbps_1_5.mp4";  final String videoItemFilename4=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_256kbps_0_30.mp4";  final String videoItemFilename5=INPUT_FILE_PATH + "H263_profile0_176x144_10fps_96kbps_0_25.3gp";  final String maskFilename=INPUT_FILE_PATH + "TransitionSpiral_QVGA.jpg";  boolean flagForException=false;  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename1,MediaItem.RENDERING_MODE_BLACK_BORDER);  mediaVideoItem1.setExtractBoundaries(0,15000);  mVideoEditor.addMediaItem(mediaVideoItem1);  final MediaVideoItem mediaVideoItem2=mVideoEditorHelper.createMediaItem(mVideoEditor,"m2",videoItemFilename2,MediaItem.RENDERING_MODE_BLACK_BORDER);  mediaVideoItem2.setExtractBoundaries(0,15000);  mVideoEditor.addMediaItem(mediaVideoItem2);  final TransitionAlpha transition1And2=mVideoEditorHelper.createTAlpha("transition1And2",mediaVideoItem1,mediaVideoItem2,3000,Transition.BEHAVIOR_SPEED_UP,maskFilename,10,false);  mVideoEditor.addTransition(transition1And2);  assertTrue("Transition ID",transition1And2.getId().equals("transition1And2"));  assertEquals("Transtion After Media item",mediaVideoItem1,transition1And2.getAfterMediaItem());  assertEquals("Transtion Before Media item",mediaVideoItem2,transition1And2.getBeforeMediaItem());  assertEquals("Transtion Duration",3000,transition1And2.getDuration());  assertEquals("Transtion Behavior",Transition.BEHAVIOR_SPEED_UP,transition1And2.getBehavior());  assertTrue("Transition maskFile",transition1And2.getMaskFilename().equals(maskFilename));  assertEquals("Transition BlendingPercent",10,transition1And2.getBlendingPercent());  assertFalse("Transition Invert",transition1And2.isInvert());  final MediaImageItem mediaImageItem3=mVideoEditorHelper.createMediaItem(mVideoEditor,"m3",imageItemFilename1,15000,MediaItem.RENDERING_MODE_BLACK_BORDER);  mVideoEditor.addMediaItem(mediaImageItem3);  final TransitionAlpha transition2And3=mVideoEditorHelper.createTAlpha("transition2And3",mediaVideoItem2,mediaImageItem3,1000,Transition.BEHAVIOR_SPEED_DOWN,maskFilename,30,false);  mVideoEditor.addTransition(transition2And3);  assertTrue("Transition ID",transition2And3.getId().equals("transition2And3"));  assertEquals("Transtion After Media item",mediaVideoItem2,transition2And3.getAfterMediaItem());  assertEquals("Transtion Before Media item",mediaImageItem3,transition2And3.getBeforeMediaItem());  assertEquals("Transtion Duration",1000,transition2And3.getDuration());  assertEquals("Transtion Behavior",Transition.BEHAVIOR_SPEED_DOWN,transition2And3.getBehavior());  assertTrue("Transition maskFile",transition2And3.getMaskFilename().equals(maskFilename));  assertEquals("Transition BlendingPercent",30,transition2And3.getBlendingPercent());  assertFalse("Transition Invert",transition2And3.isInvert());  final MediaVideoItem mediaVideoItem4=mVideoEditorHelper.createMediaItem(mVideoEditor,"m4",videoItemFilename3,MediaItem.RENDERING_MODE_BLACK_BORDER);  mediaVideoItem4.setExtractBoundaries(0,18000);  mVideoEditor.addMediaItem(mediaVideoItem4);  final TransitionAlpha transition3And4=mVideoEditorHelper.createTAlpha("transition3And4",mediaImageItem3,mediaVideoItem4,5000,Transition.BEHAVIOR_LINEAR,maskFilename,50,false);  mVideoEditor.addTransition(transition3And4);  assertTrue("Transition ID",transition3And4.getId().equals("transition3And4"));  assertEquals("Transtion After Media item",mediaImageItem3,transition3And4.getAfterMediaItem());  assertEquals("Transtion Before Media item",mediaVideoItem4,transition3And4.getBeforeMediaItem());  assertEquals("Transtion Duration",5000,transition3And4.getDuration());  assertEquals("Transtion Behavior",Transition.BEHAVIOR_LINEAR,transition3And4.getBehavior());  assertTrue("Transition maskFile",transition3And4.getMaskFilename().equals(maskFilename));  assertEquals("Transition BlendingPercent",50,transition3And4.getBlendingPercent());  assertFalse("Transition Invert",transition3And4.isInvert());  final MediaVideoItem mediaVideoItem5=mVideoEditorHelper.createMediaItem(mVideoEditor,"m5",videoItemFilename4,MediaItem.RENDERING_MODE_BLACK_BORDER);  mVideoEditor.addMediaItem(mediaVideoItem5);  final TransitionAlpha transition4And5=mVideoEditorHelper.createTAlpha("transition4And5",mediaVideoItem4,mediaVideoItem5,8000,Transition.BEHAVIOR_MIDDLE_FAST,maskFilename,70,true);  mVideoEditor.addTransition(transition4And5);  assertTrue("Transition ID",transition4And5.getId().equals("transition4And5"));  assertEquals("Transtion After Media item",mediaVideoItem4,transition4And5.getAfterMediaItem());  assertEquals("Transtion Before Media item",mediaVideoItem5,transition4And5.getBeforeMediaItem());  assertEquals("Transtion Duration",8000,transition4And5.getDuration());  assertEquals("Transtion Behavior",Transition.BEHAVIOR_MIDDLE_FAST,transition4And5.getBehavior());  assertTrue("Transition maskFile",transition4And5.getMaskFilename().equals(maskFilename));  assertEquals("Transition BlendingPercent",70,transition4And5.getBlendingPercent());  assertTrue("Transition Invert",transition4And5.isInvert());  final MediaVideoItem mediaVideoItem6=mVideoEditorHelper.createMediaItem(mVideoEditor,"m6",videoItemFilename5,MediaItem.RENDERING_MODE_BLACK_BORDER);  mediaVideoItem6.setExtractBoundaries(0,20000);  mVideoEditor.addMediaItem(mediaVideoItem6);  try {    mVideoEditorHelper.createTAlpha("transition5And6",mediaVideoItem5,mediaVideoItem6,2000,Transition.BEHAVIOR_MIDDLE_SLOW,INPUT_FILE_PATH + "imDummyFile.jpg",70,true);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("MaskFile is not exsisting",flagForException);  flagForException=false;  try {    mVideoEditorHelper.createTAlpha("transition5And6",null,null,2000,Transition.BEHAVIOR_MIDDLE_SLOW,maskFilename,101,true);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Invalid Blending Percent",flagForException);  flagForException=false;  try {    mVideoEditorHelper.createTAlpha("transitiond6",mediaVideoItem4,mediaVideoItem5,2000,Transition.BEHAVIOR_SPEED_UP - 1,maskFilename,30,false);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Transition FadeBlack with Invalid behavior",flagForException);  flagForException=false;  try {    mVideoEditorHelper.createTAlpha("transitiond6",mediaVideoItem4,mediaVideoItem5,2000,Transition.BEHAVIOR_MIDDLE_FAST + 1,maskFilename,30,false);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Transition FadeBlack with Invalid behavior",flagForException);}  }
class C{  protected Instance metaInstance(Instance instance) throws Exception {  double[] values=new double[m_MetaFormat.numAttributes()];  Instance metaInstance;  int i=0;  for (int k=0; k < m_Classifiers.length; k++) {    Classifier classifier=getClassifier(k);    if (m_BaseFormat.classAttribute().isNumeric()) {      values[i++]=classifier.classifyInstance(instance);    } else {      double[] dist=classifier.distributionForInstance(instance);      for (int j=0; j < dist.length; j++) {        values[i++]=dist[j];      }    }  }  values[i]=instance.classValue();  metaInstance=new DenseInstance(1,values);  metaInstance.setDataset(m_MetaFormat);  return metaInstance;}  }
class C{  public void valid(AlertingState alertingState){  if (log.isDebugEnabled()) {    log.debug("||-Threshold '{}' has not been violated in the last interval.",alertingState.getAlertingDefinition().getName());  }  if (!alertingState.isAlertActive()) {    return;  }  int validCount=alertingState.getValidCount();  if (validCount >= thresholdResetCount) {    if (log.isDebugEnabled()) {      log.debug("||-Ended threshold violation series of '{}'.",alertingState.getAlertingDefinition().getName());    }    alertingActionService.alertEnding(alertingState);  } else {    alertingState.setValidCount(validCount + 1);  }}  }
class C{  protected void goingActive(OBlock block){  if (_runMode != MODE_RUN) {    return;  }  int activeIdx=getIndexOfBlock(block,_idxCurrentOrder);  if (log.isDebugEnabled()) {    log.debug(_trainName + " **Block \"" + block.getDisplayName()+ "\" goingActive. activeIdx= "+ activeIdx+ ", _idxCurrentOrder= "+ _idxCurrentOrder+ " - warrant= "+ getDisplayName());  }  if (activeIdx <= 0) {    log.debug(_trainName + " Block going active is not part of this trains route forward");  } else   if (activeIdx == _idxCurrentOrder) {    log.debug(_trainName + " Current block becoming active - ignored");  } else   if (activeIdx == _idxCurrentOrder + 1) {    _idxCurrentOrder++;    firePropertyChange("blockChange",getBlockAt(_idxCurrentOrder - 1),getBlockAt(_idxCurrentOrder));synchronized (this) {      notify();    }  } else {    log.debug(_trainName + " Rogue occupation of block.");synchronized (this) {      notify();    }  }}  }
class C{  @Override public void hide(){  logger.trace("Hiding tooltip request...");  hideRequested=true;  checkAndHide();}  }
class C{  boolean replaceKey(String oldKey,String newKey) throws HeaderCardException {  HeaderCard oldCard=findCard(oldKey);  if (oldCard == null) {    return false;  }  if (!this.cards.replaceKey(oldKey,newKey)) {    throw new HeaderCardException("Duplicate key in replace");  }  oldCard.setKey(newKey);  return true;}  }
class C{  public static ObjectOutputStream newObjectOutputStream(Path self) throws IOException {  return new ObjectOutputStream(Files.newOutputStream(self));}  }
class C{  public void addDate(ICalDate date,boolean floating,TimeZone tz){  if (date != null && date.hasTime() && !floating && tz != null) {    dates.add(date);  }}  }
class C{  public Object createSoftWeakRef(Object o){  return impl.createSoftWeakRef(o);}  }
class C{  public TModule basicGetModule(){  return module;}  }
class C{  void startLaunchTaskDismissAnimation(){  if (mDismissButton.getVisibility() == View.VISIBLE) {    mDismissButton.animate().cancel();    mDismissButton.animate().alpha(0f).setStartDelay(0).setInterpolator(mConfig.fastOutSlowInInterpolator).setDuration(mConfig.taskViewExitToAppDuration).withLayer().start();  }}  }
class C{  private static int lastIndexOf(Object o,Object[] elements,int index){  if (o == null) {    for (int i=index; i >= 0; i--)     if (elements[i] == null)     return i;  } else {    for (int i=index; i >= 0; i--)     if (o.equals(elements[i]))     return i;  }  return -1;}  }
class C{  public void index(DbInterface db){  this.db=db;  setId(id);}  }
class C{  default void validate(final Object tenantConfigurationValue){  if (tenantConfigurationValue != null && validateToClass().isAssignableFrom(tenantConfigurationValue.getClass())) {    return;  }  throw new TenantConfigurationValidatorException("The given configuration value is expected as a " + validateToClass().getSimpleName());}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return left.greaterThanOrEqual(right) ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  public String toString(){  String result=getMessage() + " (" + reasonCode+ ")";  if (cause != null) {    result=result + " - " + cause.toString();  }  return result;}  }
class C{  @Override public String toString(){  return "" + param;}  }
class C{  public int hashCode(){  int hash=this.getClass().hashCode();  hash=(hash << 1 | hash >>> 31);  for (int x=0; x < genome.length; x++)   hash=(hash << 1 | hash >>> 31) ^ Float.floatToIntBits(genome[x]);  return hash;}  }
class C{  public static IgniteInternalFuture<Long> runMultiThreadedAsync(Runnable run,int threadNum,String threadName){  return runMultiThreadedAsync(makeCallable(run,null),threadNum,threadName);}  }
class C{  public int deserialize(final byte[] b,final int off){  if (b == null) {    return 0;  }  int parsedBytes=0;  try {    if (nonceLength_ > 0 && nonce_ == null) {      parsedBytes+=parseNonce(b,off + parsedBytes);    }    if (contentLength_ < 0) {      parsedBytes+=parseContentLength(b,off + parsedBytes);    }    isComplete_=true;  } catch (  ParseException e) {  }  return parsedBytes;}  }
class C{  public Matrix(double[] a,int n,int m){  if (n <= 0 || m <= 0)   throw new NegativeArraySizeException("Requested matrix size: " + n + " by "+ m);  if (n * m != a.length) {    throw new IllegalArgumentException("Requested matrix size: " + n + " by "+ m+ " doesn't match array size: "+ a.length);  }  components=new double[n][m];  int k=0;  for (int i=0; i < n; i++) {    for (int j=0; j < m; j++) {      components[i][j]=a[k];      k++;    }  }}  }
class C{  public static MyTracksLocation createMyTracksLocation(){  return createMyTracksLocation(INITIAL_LATITUDE,INITIAL_LONGITUDE,INITIAL_ALTITUDE);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void visitMaxs(int maxStack,int maxLocals){  if (mv != null) {    mv.visitMaxs(maxStack,maxLocals);  }}  }
class C{  public static ArrayList<Category> parseCategories(JSONObject jsonObject){  ArrayList<Category> categoryArrayList=new ArrayList<>();  try {    JSONArray categories=jsonObject.getJSONArray("categories");    Category all=new Category();    all.setId(0);    all.setName(AppController.getInstance().getString(R.string.tab_all));    categoryArrayList.add(all);    for (int i=0; i < categories.length(); i++) {      JSONObject catObj=categories.getJSONObject(i);      Log.d(TAG,"Parsing " + catObj.getString("title") + ", ID "+ catObj.getInt("id"));      Category c=new Category();      c.setId(catObj.getInt("id"));      c.setName(catObj.getString("title"));      categoryArrayList.add(c);    }  } catch (  JSONException e) {    Log.d(TAG,"----------------- Json Exception");    e.printStackTrace();    return null;  }  return categoryArrayList;}  }
class C{  public List<Element> selectElementsMatchingXPath(String xpath,Element toSearch){  NodeList nodelist;  try {    String xpathWithoutNamespace=xpath;    Map<String,String> namespaces=namespaceContext.getNamespaces();    if (namespaces != null && !namespaces.isEmpty() && !namespaceAware) {      for (      Map.Entry<String,String> namespace : namespaces.entrySet()) {        String key=namespace.getKey() + ":";        while (xpathWithoutNamespace.contains(key)) {          xpathWithoutNamespace=xpathWithoutNamespace.replace(key,"");        }      }    }    XPathExpression xPathExpr=xPath.compile(xpathWithoutNamespace);    nodelist=(NodeList)xPathExpr.evaluate(toSearch,XPathConstants.NODESET);  } catch (  Exception e) {    throw new CargoException("Cannot evaluate XPath: " + xpath,e);  }  List<Element> result=new ArrayList<Element>(nodelist.getLength());  for (int i=0; i < nodelist.getLength(); i++) {    result.add((Element)nodelist.item(i));  }  return result;}  }
class C{  private String fFormatString(final double x){  final char[] ca6;  final char[] ca7;  if (Double.isInfinite(x)) {    if (x == Double.POSITIVE_INFINITY) {      if (leadingSign) {        ca6="+Inf".toCharArray();      } else       if (leadingSpace) {        ca6=" Inf".toCharArray();      } else {        ca6="Inf".toCharArray();      }    } else {      ca6="-Inf".toCharArray();    }  } else   if (Double.isNaN(x)) {    if (leadingSign) {      ca6="+NaN".toCharArray();    } else     if (leadingSpace) {      ca6=" NaN".toCharArray();    } else {      ca6="NaN".toCharArray();    }  } else {    ca6=fFormatDigits(x);  }  ca7=applyFloatPadding(ca6,false);  return new String(ca7);}  }
class C{  public void parseForField(GenericDeclaration genericDecl,SignatureTag signature){  setInput(genericDecl,signature);  if (!eof) {    this.fieldType=parseFieldTypeSignature();  }}  }
class C{  public Vector2f mult(float scalar,Vector2f product){  if (null == product) {    product=new Vector2f();  }  product.x=x * scalar;  product.y=y * scalar;  return product;}  }
class C{  public synchronized void prepare(PluginContext context) throws ReplicatorException {  for (int i=0; i < partitions; i++) {    queues.add(new LinkedBlockingQueue<ReplEvent>(maxSize));  }  if (partitioner instanceof StatefulPartitioner) {    logger.info("Generating queue metadata for stateful partitioner");    for (int i=0; i < partitions; i++) {      queueMetadata.add(new QueueMetadataImpl(i,queues.get(i)));    }    ((StatefulPartitioner)partitioner).setPartitionMetadata(queueMetadata);  }}  }
class C{  private static boolean isInOverflow(MenuItem item){  return !isActionButton(item);}  }
class C{  public void updateDirty(){  memory.updateDirty();  reg.updateDirty();}  }
class C{  public static byte[] stringToGsm7BitPacked(String data) throws EncodeException {  return stringToGsm7BitPacked(data,0,true,0,0);}  }
class C{  public HashNotMatchException(final String message,final String hashFunction){  super(message);  this.hashFunction=hashFunction;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:32.755 -0500",hash_original_method="22F3CCC310074C277F932626BFB7DCB6",hash_generated_method="FB8F80D156FCF2C6768C48826119B1E7") public boolean isEnqueued(){  if (queueNext == null)   return false;  return queueNext.getTaintBoolean();}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public final void removeCallbacks(Runnable r){  final WeakRunnable runnable=mRunnables.remove(r);  if (runnable != null) {    mExec.removeCallbacks(runnable);  }}  }
class C{  private void convertData(){  m_viewTagManager=new TagManager(m_database.getContent().getViewTagManager());  m_nodeTagManager=new TagManager(m_database.getContent().getNodeTagManager());  m_modules.clear();  m_projects.clear();  for (  final INaviModule module : m_database.getContent().getModules()) {    m_modules.add(new Module(this,module,m_nodeTagManager,m_viewTagManager));  }  for (  final INaviProject project : m_database.getContent().getProjects()) {    m_projects.add(new Project(this,project,m_nodeTagManager,m_viewTagManager));  }  m_debuggerTemplateManager=new DebuggerTemplateManager(m_database.getContent().getDebuggerTemplateManager());}  }
class C{  public static boolean addSmiles(Context context,Spannable spannable){  boolean hasChanges=false;  for (  Entry<Pattern,Object> entry : emoticons.entrySet()) {    Matcher matcher=entry.getKey().matcher(spannable);    while (matcher.find()) {      boolean set=true;      for (      ImageSpan span : spannable.getSpans(matcher.start(),matcher.end(),ImageSpan.class))       if (spannable.getSpanStart(span) >= matcher.start() && spannable.getSpanEnd(span) <= matcher.end())       spannable.removeSpan(span); else {        set=false;        break;      }      if (set) {        hasChanges=true;        Object value=entry.getValue();        if (value instanceof String && !((String)value).startsWith("http")) {          File file=new File((String)value);          if (!file.exists() || file.isDirectory()) {            return false;          }          spannable.setSpan(new ImageSpan(context,Uri.fromFile(file)),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);        } else {          spannable.setSpan(new ImageSpan(context,(Integer)value),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);        }      }    }  }  return hasChanges;}  }
class C{  public static void startChatService(){  final Intent intent=new Intent(YeloApplication.getStaticContext(),ChatService.class);  intent.putExtra(AppConstants.Keys.HEART_BEAT,AppConstants.HEART_BEAT);  YeloApplication.getStaticContext().startService(intent);}  }
class C{  public static void initialize(String pathStr,String[] args){  path=pathStr;  File file=new File(userPath,DERT_HOME);  try {    if (!file.exists()) {      file.mkdirs();    }  } catch (  Exception e) {    e.printStackTrace();  }  installDertProperties();  String dateStr=new Date().toString();  TimeZone.setDefault(TimeZone.getTimeZone("UTC"));  System.err.println("DERT Test");  System.err.println("Date: " + dateStr);  System.err.println("DERT Version: " + dertProperties.getProperty("Dert.Version"));  System.err.println("Path to executable: " + path);  System.err.println("Path to user files: " + userPath);  System.err.println("OS Name: " + System.getProperty("os.name"));  System.err.println("OS Version: " + System.getProperty("os.version"));  System.err.println("OS Arch: " + System.getProperty("os.arch"));  System.err.println("Java Version: " + System.getProperty("java.version"));  System.err.println();  ConfigurationManager.createInstance(dertProperties);  FieldCameraInfoManager.createInstance(path);  Console.createInstance();}  }
class C{  public boolean hasMembers(){  return members.size() > 0;}  }
class C{  public Quarter(Date time){  this(time,TimeZone.getDefault());}  }
class C{  public static String truncate(String text,int maxWidth){  String truncatedText=text;  if (text != null && text.length() > maxWidth) {    truncatedText=new StringBuilder(text.substring(0,(maxWidth - 3))).append("...").toString();  }  return truncatedText;}  }
class C{  private boolean isLoggable(){  return Log.isLoggable(tag,level);}  }
class C{  @Override public XMLStreamReader createXMLStreamReader(String systemId,InputStream in) throws XMLStreamException {  try {    return new WbXmlStreamReader(in,(WbXmlDefinition)props.get(DEFINITION_PROPERTY));  } catch (  IOException e) {    throw new XMLStreamException(e);  }}  }
class C{  public void addResource(Map<String,String> resource){  getResources().add(resource);}  }
class C{  public static boolean isRunningApplicationStart(){  return sRunningApplicationStart;}  }
class C{  public int addCommentReply(Comment newComment,int inReplyToAdapterPosition){  int commentIndex=adapterPositionToCommentIndex(inReplyToAdapterPosition);  do {    commentIndex++;  } while (commentIndex < comments.size() && comments.get(commentIndex).depth >= newComment.depth);  comments.add(commentIndex,newComment);  int adapterPosition=commentIndexToAdapterPosition(commentIndex);  notifyItemInserted(adapterPosition);  return adapterPosition;}  }
class C{  public boolean isCompletelyDirty(JComponent aComponent){  RepaintManager delegate=getDelegate(aComponent);  if (delegate != null) {    return delegate.isCompletelyDirty(aComponent);  }  Rectangle r;  r=getDirtyRegion(aComponent);  if (r.width == Integer.MAX_VALUE && r.height == Integer.MAX_VALUE)   return true; else   return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgr();  if (uiMgr != null)   uiMgr.clearMenuCache();  return null;}  }
class C{  public GameObjectStreamData(final Named named){  m_name=named.getName();  if (named instanceof PlayerID) {    m_type=GameType.PLAYERID;  } else   if (named instanceof Territory) {    m_type=GameType.TERRITORY;  } else   if (named instanceof UnitType) {    m_type=GameType.UNITTYPE;  } else   if (named instanceof ProductionRule) {    m_type=GameType.PRODUCTIONRULE;  } else   if (named instanceof ProductionFrontier) {    m_type=GameType.PRODUCTIONFRONTIER;  } else {    throw new IllegalArgumentException("Wrong type:" + named);  }}  }
class C{  String formatNumberList(TransformerImpl transformer,long[] list,int contextNode) throws TransformerException {  String numStr;  FastStringBuffer formattedNumber=StringBufferPool.get();  try {    int nNumbers=list.length, numberWidth=1;    char numberType='1';    String formatToken, lastSepString=null, formatTokenString=null;    String lastSep=".";    boolean isFirstToken=true;    String formatValue=(null != m_format_avt) ? m_format_avt.evaluate(transformer.getXPathContext(),contextNode,this) : null;    if (null == formatValue)     formatValue="1";    NumberFormatStringTokenizer formatTokenizer=new NumberFormatStringTokenizer(formatValue);    for (int i=0; i < nNumbers; i++) {      if (formatTokenizer.hasMoreTokens()) {        formatToken=formatTokenizer.nextToken();        if (Character.isLetterOrDigit(formatToken.charAt(formatToken.length() - 1))) {          numberWidth=formatToken.length();          numberType=formatToken.charAt(numberWidth - 1);        } else         if (formatTokenizer.isLetterOrDigitAhead()) {          formatTokenString=formatToken;          while (formatTokenizer.nextIsSep()) {            formatToken=formatTokenizer.nextToken();            formatTokenString+=formatToken;          }          if (!isFirstToken)           lastSep=formatTokenString;          formatToken=formatTokenizer.nextToken();          numberWidth=formatToken.length();          numberType=formatToken.charAt(numberWidth - 1);        } else {          lastSepString=formatToken;          while (formatTokenizer.hasMoreTokens()) {            formatToken=formatTokenizer.nextToken();            lastSepString+=formatToken;          }        }      }      if (null != formatTokenString && isFirstToken) {        formattedNumber.append(formatTokenString);      } else       if (null != lastSep && !isFirstToken)       formattedNumber.append(lastSep);      getFormattedNumber(transformer,contextNode,numberType,numberWidth,list[i],formattedNumber);      isFirstToken=false;    }    while (formatTokenizer.isLetterOrDigitAhead()) {      formatTokenizer.nextToken();    }    if (lastSepString != null)     formattedNumber.append(lastSepString);    while (formatTokenizer.hasMoreTokens()) {      formatToken=formatTokenizer.nextToken();      formattedNumber.append(formatToken);    }    numStr=formattedNumber.toString();  }  finally {    StringBufferPool.free(formattedNumber);  }  return numStr;}  }
class C{  @Override public boolean performOperation(int generation){  return true;}  }
class C{  public boolean addAll(int index,Collection<? extends E> c){  rangeCheckForAdd(index);  Object[] a=c.toArray();  int numNew=a.length;  ensureCapacityInternal(size + numNew);  int numMoved=size - index;  if (numMoved > 0)   System.arraycopy(elementData,index,elementData,index + numNew,numMoved);  System.arraycopy(a,0,elementData,index,numNew);  size+=numNew;  return numNew != 0;}  }
class C{  public EgovPaginatedList(final int pageNumber,final int objectsPerPage){  super();  if (pageNumber < 0) {    this.pageNumber=0;  } else {    this.pageNumber=pageNumber;  }  this.objectsPerPage=objectsPerPage;}  }
class C{  public static void removeAnalysisCacheForCurrentThread(){  analysisCacheThreadLocal.remove();}  }
class C{  public void initialise() throws Exception {  initialise(k,epsilon);}  }
class C{  public boolean isSecure(){  return mSecure;}  }
class C{  private static String buildDigitString(Function<Integer,char[]> function,String minus,int number){  if (number == 0)   return new String(function.apply(0));  final boolean isNegative=number < 0;  number=Math.abs(number);  final StringBuilder builder=new StringBuilder();  while (number > 0) {    builder.append(function.apply(number % 10));    number/=10;  }  if (isNegative) {    builder.append(minus);  }  return builder.reverse().toString();}  }
class C{  public void addOffset(Long key) throws IOException {  resetGzipStream();  offsetMap.put(key,totalLength);  writeHeader();}  }
class C{  public SecurityCheckException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public ImageLineInt readRowInt(){  IImageLine line=readRow();  if (line instanceof ImageLineInt)   return (ImageLineInt)line; else   throw new PngjException("This is not a ImageLineInt : " + line.getClass());}  }
class C{  public final int indexOf(char c){  return indexOf(c,0);}  }
class C{  public String chartingEvalWindowSizeTipText(){  return "For charting only, specify a sliding window size over which to compute " + "performance stats. <= 0 means eval on whole stream";}  }
class C{  public static ClientId fromResource(Class<?> relativeClass,String resourceName) throws IOException {  InputStream stream=relativeClass.getResourceAsStream(resourceName);  return fromStream(stream);}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public <T extends IOObject>T remove(Class<T> cls,int nr) throws MissingIOObjectException {  return getInput(cls,nr,true);}  }
class C{  public ServiceException rethrow(){  return rethrow(getMessage());}  }
class C{  public boolean simplify_sccs(){  return soot.PhaseOptions.getBoolean(options,"simplify-sccs");}  }
class C{  public static <E>SortedSet<E> synchronizedSortedSet(SortedSet<E> set){  if (set == null) {    throw new NullPointerException("set == null");  }  return new SynchronizedSortedSet<E>(set);}  }
class C{  public Object clone(){  return (new CompoundName(getAll(),mySyntax));}  }
class C{  private void onAuthenticationFailure(){  mScreenState=SCREEN_STATE_EDITING;  mSkipOrNextButton.setVisibility(View.GONE);  mConnectButton.setVisibility(View.VISIBLE);  mConnectButton.setEnabled(true);  if (!TextUtils.isEmpty(mEditingTitle)) {    mTitleView.setText(mEditingTitle);  } else {    Log.w(TAG,"Title during editing/adding a network was empty.");    showEditingTitle();  }  final ViewGroup parent=(ViewGroup)findViewById(R.id.wifi_config_ui);  parent.setVisibility(View.VISIBLE);  mConnectingStatusLayout.setVisibility(View.GONE);  showDisconnectedProgressBar();  setPaddingVisibility(View.GONE);}  }
class C{  public void swap(int i,int j){  Instance in=m_Instances.get(i);  m_Instances.set(i,m_Instances.get(j));  m_Instances.set(j,in);}  }
class C{  @Override public void run(){  Thread thread=Thread.currentThread();  thread.setContextClassLoader(_loader);  try {    _overflowCount.incrementAndGet();    _task.run();  } catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);  }}  }
class C{  protected void scanIterationComplete(){  LOG.debug("scan complete {} {}",lastScanMillis,numDiscoveredPerIteration);  lastScanMillis=System.currentTimeMillis();}  }
class C{  public LegendItem(AttributedString label,String description,String toolTipText,String urlText,Shape shape,Paint fillPaint){  this(label,description,toolTipText,urlText,true,shape,true,fillPaint,false,Color.black,UNUSED_STROKE,false,UNUSED_SHAPE,UNUSED_STROKE,Color.black);}  }
class C{  public static Attribute createAttribute(String name,int valueType,int blockType){  Attribute attribute=createAttribute(name,valueType);  attribute.setBlockType(blockType);  return attribute;}  }
class C{  private void read(String attributeName,IConfigurationElement element,Map map){  String value=element.getAttribute(attributeName);  if (value != null) {    StringTokenizer tokenizer=new StringTokenizer(value,",");    while (tokenizer.hasMoreTokens()) {      String token=tokenizer.nextToken().trim();      Set s=(Set)map.get(token);      if (s == null) {        s=new HashSet();        map.put(token,s);      }      s.add(element);    }  }}  }
class C{  static Collator createFromRules(String fileName,ResourceLoader loader){  InputStream input=null;  try {    input=loader.openResource(fileName);    String rules=IOUtils.toString(input,"UTF-8");    return new RuleBasedCollator(rules);  } catch (  Exception e) {    throw new RuntimeException(e);  } finally {    IOUtils.closeQuietly(input);  }}  }
class C{  protected void indent() throws IOException {  indent(m_elemContext.m_currentElemDepth);}  }
class C{  final boolean isShared(){  return nextWaiter == SHARED;}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  public static boolean isSystemApplication(Context context,String packageName){  if (context == null) {    return false;  }  return isSystemApplication(context.getPackageManager(),packageName);}  }
class C{  public void clear(){  int max=bits.length;  for (int i=0; i < max; i++) {    bits[i]=0;  }}  }
class C{  public Element create(String prefix,Document doc){  return new XBLOMContentElement(prefix,(AbstractDocument)doc);}  }
class C{  @Override public void flush() throws IOException {  out.flush();}  }
class C{  private int interpolate(int startValue,int endValue,double progress){  int distance=endValue - startValue;  double distanceDone;  if (progress <= 0.5) {    distanceDone=2 * progress * progress;  } else {    distanceDone=-2 * progress * progress + 4 * progress - 1;  }  return (int)(distance * distanceDone) + startValue;}  }
class C{  public void handleThermostatClick(int idx){  listener.onThermostatClick(idx);}  }
class C{  public double precision(){  return bCubedPrecision;}  }
class C{  public static boolean isPresent(){  return m_Present;}  }
class C{  protected void unregisterNetworkStateListener(){  if (mNetworkStateListener != null) {    if (sLogger.isActivated()) {      sLogger.debug("Unregistering network state listener");    }    mContext.unregisterReceiver(mNetworkStateListener);    mNetworkStateListener=null;  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void addDataRow(DataRow dataRow){  dataRow.trim();  dataList.add(dataRow);  dataRow.ensureNumberOfColumns(columns);}  }
class C{  public static boolean printHandleNegation(PsiBuilder b,int l){  return PRINT_HANDLE_NEGATE_SUFFIX.contains(b.lookAhead(1)) || b.rawLookup(1) == LEFT_PAREN;}  }
class C{  @Override public void keyTyped(char par1,int par2){  super.keyTyped(par1,par2);  this.textFieldBanJing.textboxKeyTyped(par1,par2);  try {    int radius=Math.min(Math.max(Integer.parseInt(this.textFieldBanJing.getText()),10),TileEMPTower.MAX_RADIUS);    this.tileEntity.empRadius=radius;    ArrayList data=new ArrayList();    data.add(1);    data.add(tileEntity.empRadius);    Mekanism.packetHandler.sendToServer(new TileEntityMessage(Coord4D.get(tileEntity),data));  } catch (  NumberFormatException e) {  }}  }
class C{  public static String prettyPrintHTML(String html) throws java.io.IOException, java.io.UnsupportedEncodingException, org.dom4j.DocumentException {  return prettyPrintHTML(html,true,true,false,true);}  }
class C{  private UnicodeBlock(String idName,String alias){  this(idName);  map.put(alias,this);}  }
class C{  public boolean isValid(){  return valid && !s.isClosed() && !s.isInputShutdown()&& !s.isOutputShutdown();}  }
class C{  public SVGOMFlowParaElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public static void main(final String[] args){  System.out.println(TITLE + " " + VERSION);}  }
class C{  protected AbstractIntLiteralImpl(){  super();}  }
class C{  public static void print(byte b,PrintStream out){  out.print(hex(b));}  }
class C{  @Override public void onProgressChanged(SeekBar seekBar,int progress,boolean fromUser){  if (seekBar.getId() == R.id.redSeekBar) {    red=progress;    thumbRect=seekBar.getThumb().getBounds();    redToolTip.setX(seekBarLeft + thumbRect.left);    if (progress < 10)     redToolTip.setText("  " + red); else     if (progress < 100)     redToolTip.setText(" " + red); else     redToolTip.setText(red + "");  } else   if (seekBar.getId() == R.id.greenSeekBar) {    green=progress;    thumbRect=seekBar.getThumb().getBounds();    greenToolTip.setX(seekBar.getPaddingLeft() + thumbRect.left);    if (progress < 10)     greenToolTip.setText("  " + green); else     if (progress < 100)     greenToolTip.setText(" " + green); else     greenToolTip.setText(green + "");  } else   if (seekBar.getId() == R.id.blueSeekBar) {    blue=progress;    thumbRect=seekBar.getThumb().getBounds();    blueToolTip.setX(seekBarLeft + thumbRect.left);    if (progress < 10)     blueToolTip.setText("  " + blue); else     if (progress < 100)     blueToolTip.setText(" " + blue); else     blueToolTip.setText(blue + "");  }  colorView.setBackgroundColor(Color.rgb(red,green,blue));  codHex.setText(String.format(COLOR_STRING_FORMAT,red,green,blue));}  }
class C{  public static String escapeCommas(String in){  if (in == null || in.indexOf(',') == -1)   return in;  StringBuffer out=new StringBuffer();  char[] chars=in.toCharArray();  for (int i=0; i < chars.length; i++) {    if (chars[i] == ',')     out.append('\\').append(','); else     out.append(chars[i]);  }  return out.toString();}  }
class C{  protected DoubleMatrix2D viewSelectionLike(int[] rowOffsets,int[] columnOffsets){  throw new InternalError();}  }
class C{  public Rational(long nominator,long denominator){  mNumerator=nominator;  mDenominator=denominator;}  }
class C{  public static String next(CharSequence self){  StringBuilder buffer=new StringBuilder(self);  if (buffer.length() == 0) {    buffer.append(Character.MIN_VALUE);  } else {    char last=buffer.charAt(buffer.length() - 1);    if (last == Character.MAX_VALUE) {      buffer.append(Character.MIN_VALUE);    } else {      char next=last;      next++;      buffer.setCharAt(buffer.length() - 1,next);    }  }  return buffer.toString();}  }
class C{  protected void assertQueryEquals(final String defType,final SolrQueryRequest req,final String... inputs) throws Exception {  if (null != defType)   qParsersTested.add(defType);  final Query[] queries=new Query[inputs.length];  try {    SolrQueryResponse rsp=new SolrQueryResponse();    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req,rsp));    for (int i=0; i < inputs.length; i++) {      queries[i]=(QParser.getParser(inputs[i],defType,req).getQuery());    }  }  finally {    SolrRequestInfo.clearRequestInfo();  }  for (int i=0; i < queries.length; i++) {    QueryUtils.check(queries[i]);    for (int j=0; j < queries.length; j++) {      QueryUtils.checkEqual(queries[i],queries[j]);    }  }}  }
class C{  public String message(){  return this.message;}  }
class C{  boolean isExtFunctionMessage(LocoNetMessage m){  int pkt=getDirectDccPacket(m);  if (pkt < 0) {    return false;  }  if ((pkt & 0xFFFFFF0) == 0xA0) {    return true;  }  if ((pkt & 0xFFFFFE00) == 0xDE00) {    return true;  }  return false;}  }
class C{  public static ObjectOutputStream newObjectOutputStream(OutputStream outputStream) throws IOException {  return new ObjectOutputStream(outputStream);}  }
class C{  public Object convert(Class<?> targetType,Object valueToConvert) throws JavaTypeTranslatorException {  Object rVal=null;  if (valueToConvert instanceof Quantity) {    rVal=JavaTypeTranslator.convert(targetType,valueToConvert.toString());  } else {    throw new JavaTypeTranslatorException("Value to convert must be a Quantity");  }  return (rVal);}  }
class C{  public boolean hasYomi(){  return getYomi() != null;}  }
class C{  ClusterMember(String name){  this.name=name;}  }
class C{  @Override public int size(){  return mapping.length;}  }
class C{  public boolean saveCurrentConfigurationAs(boolean force){  if (currentConfig.toString().equals("Untitled") || force) {    String[] configName=getConfigList(currentConfig.getLandscapePath());    String label=JOptionPane.showInputDialog(null,"Please enter a name for the current configuration.","");    if (label == null) {      return (false);    }    for (int i=0; i < configName.length; ++i) {      if (configName[i].equals(label)) {        int answer=JOptionPane.showConfirmDialog(null,"There is already a configuration with the name of " + label + ".  Overwrite?","Confirm",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,Icons.getImageIcon("dert_24.png"));        if (answer == JOptionPane.CANCEL_OPTION) {          return (false);        }        break;      }    }    currentConfig.setLabel(label);  }  saveConfiguration(currentConfig);  return (true);}  }
class C{  public boolean isXspaceFor(float width){  return (getXspace() - width) >= 0f;}  }
class C{  public static float generateRandomFloatBetween(float lowerLimit,float upperLimit){  return lowerLimit + ((upperLimit - lowerLimit) * _r.nextFloat());}  }
class C{  public static boolean checkifStringFitsWithWordwrap(String text,double width,DrawHandler drawer){  return getTextMinWidth(text,drawer) < width;}  }
class C{  public static void init(int logLevel,LogConfiguration logConfiguration){  init(logLevel,logConfiguration,DefaultsFactory.createPrinter());}  }
class C{  public CompanyObject(boolean deleted){  this.deleted=deleted;}  }
class C{  protected void refresh(){  this.removeAllChildren();  this.addChildFeatures();}  }
class C{  public boolean firstTimeIn(){  try {    mRetainedFragment=(RetainedFragment)mFragmentManager.get().findFragmentByTag(mRetainedFragmentTag);    if (mRetainedFragment == null) {      Log.d(TAG,"Creating new RetainedFragment " + mRetainedFragmentTag);      mRetainedFragment=new RetainedFragment();      mFragmentManager.get().beginTransaction().add(mRetainedFragment,mRetainedFragmentTag).commit();      return true;    } else {      Log.d(TAG,"Returning existing RetainedFragment " + mRetainedFragmentTag);      return false;    }  } catch (  NullPointerException e) {    Log.d(TAG,"NPE in firstTimeIn()");    return false;  }}  }
class C{  private static void addTableInfoHeader(int totalNumRows,int firstRow,Integer autoDist,String caseSensitive,Element parent,String orderByTable){  Element node=parent.addElement(XML_HEADER_TEXT);  node.addElement(XML_TOTALNUMROWS_TEXT).addText(Integer.toString(totalNumRows));  node.addElement(XML_FIRSTROW_TEXT).addText(Integer.toString(firstRow));  node.addElement(XML_CASESENSITIVE_TEXT).addText(caseSensitive);  node.addElement(XML_AUTO_DIST_TEXT).addText(autoDist.toString());  if (orderByTable != null) {    node.addElement(XML_ORDERBYTABLE).addText(orderByTable);  } else {    node.addElement(XML_ORDERBYTABLE).addText("");  }}  }
class C{  public void removeListener(RunListener listener){  notifier.removeListener(listener);}  }
class C{  public boolean supportsSubqueriesInIns() throws SQLException {  return true;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public static boolean isImplementsInterface(Class clazz,Class interfaceClass){  if (!(interfaceClass.isInterface())) {    throw new IllegalArgumentException("Interface class passed in is not an interface");  }  boolean resultThisClass=recursiveIsImplementsInterface(clazz,interfaceClass);  if (resultThisClass) {    return true;  }  return recursiveSuperclassImplementsInterface(clazz,interfaceClass);}  }
class C{  public SimpleEnumMap(Object2ObjectMap<K,V> m,float f){  super(m,f,(Strategy)SimpleEnumHashingStrategy.INSTANCE);}  }
class C{  public static void checkArgument(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  public boolean isIgnored(String type){  String typeName=type.replace('/','.');  for (  String prefix : DO_INSTRUMENT_PREFIXES)   if (typeName.startsWith(prefix))   return false;  for (  String prefix : DO_NOT_INSTRUMENT_PREFIXES)   if (typeName.startsWith(prefix))   return true;  return false;}  }
class C{  protected BaseInterval(ReadableInstant start,ReadableInstant end){  super();  if (start == null && end == null) {    iStartMillis=iEndMillis=DateTimeUtils.currentTimeMillis();    iChronology=ISOChronology.getInstance();  } else {    iChronology=DateTimeUtils.getInstantChronology(start);    iStartMillis=DateTimeUtils.getInstantMillis(start);    iEndMillis=DateTimeUtils.getInstantMillis(end);    checkInterval(iStartMillis,iEndMillis);  }}  }
class C{  public String maxIterationsTipText(){  return "The maximum number of iterations to perform. < 1 means filter will go until fully cleansed.";}  }
class C{  public NotificationChain basicSetConstraintRule(ConstraintRule newConstraintRule,NotificationChain msgs){  ConstraintRule oldConstraintRule=constraintRule;  constraintRule=newConstraintRule;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,FunctionblockPackage.RETURN_PRIMITIVE_TYPE__CONSTRAINT_RULE,oldConstraintRule,newConstraintRule);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public CursorJoiner(Cursor cursorLeft,String[] columnNamesLeft,Cursor cursorRight,String[] columnNamesRight){  if (columnNamesLeft.length != columnNamesRight.length) {    throw new IllegalArgumentException("you must have the same number of columns on the left and right, " + columnNamesLeft.length + " != "+ columnNamesRight.length);  }  mCursorLeft=cursorLeft;  mCursorRight=cursorRight;  mCursorLeft.moveToFirst();  mCursorRight.moveToFirst();  mCompareResultIsValid=false;  mColumnsLeft=buildColumnIndiciesArray(cursorLeft,columnNamesLeft);  mColumnsRight=buildColumnIndiciesArray(cursorRight,columnNamesRight);  mValues=new String[mColumnsLeft.length * 2];}  }
class C{  public int executeShell(String command,Map<String,String> configShell) throws RuntimeException {  return executeShell(command,configShell,0);}  }
class C{  public static AztecCode encode(byte[] data,int minECCPercent,int userSpecifiedLayers){  BitArray bits=new HighLevelEncoder(data).encode();  int eccBits=bits.getSize() * minECCPercent / 100 + 11;  int totalSizeBits=bits.getSize() + eccBits;  boolean compact;  int layers;  int totalBitsInLayer;  int wordSize;  BitArray stuffedBits;  if (userSpecifiedLayers != DEFAULT_AZTEC_LAYERS) {    compact=userSpecifiedLayers < 0;    layers=Math.abs(userSpecifiedLayers);    if (layers > (compact ? MAX_NB_BITS_COMPACT : MAX_NB_BITS)) {      throw new IllegalArgumentException(String.format("Illegal value %s for layers",userSpecifiedLayers));    }    totalBitsInLayer=totalBitsInLayer(layers,compact);    wordSize=WORD_SIZE[layers];    int usableBitsInLayers=totalBitsInLayer - (totalBitsInLayer % wordSize);    stuffedBits=stuffBits(bits,wordSize);    if (stuffedBits.getSize() + eccBits > usableBitsInLayers) {      throw new IllegalArgumentException("Data to large for user specified layer");    }    if (compact && stuffedBits.getSize() > wordSize * 64) {      throw new IllegalArgumentException("Data to large for user specified layer");    }  } else {    wordSize=0;    stuffedBits=null;    for (int i=0; ; i++) {      if (i > MAX_NB_BITS) {        throw new IllegalArgumentException("Data too large for an Aztec code");      }      compact=i <= 3;      layers=compact ? i + 1 : i;      totalBitsInLayer=totalBitsInLayer(layers,compact);      if (totalSizeBits > totalBitsInLayer) {        continue;      }      if (wordSize != WORD_SIZE[layers]) {        wordSize=WORD_SIZE[layers];        stuffedBits=stuffBits(bits,wordSize);      }      int usableBitsInLayers=totalBitsInLayer - (totalBitsInLayer % wordSize);      if (compact && stuffedBits.getSize() > wordSize * 64) {        continue;      }      if (stuffedBits.getSize() + eccBits <= usableBitsInLayers) {        break;      }    }  }  BitArray messageBits=generateCheckWords(stuffedBits,totalBitsInLayer,wordSize);  int messageSizeInWords=stuffedBits.getSize() / wordSize;  BitArray modeMessage=generateModeMessage(compact,layers,messageSizeInWords);  int baseMatrixSize=compact ? 11 + layers * 4 : 14 + layers * 4;  int[] alignmentMap=new int[baseMatrixSize];  int matrixSize;  if (compact) {    matrixSize=baseMatrixSize;    for (int i=0; i < alignmentMap.length; i++) {      alignmentMap[i]=i;    }  } else {    matrixSize=baseMatrixSize + 1 + 2 * ((baseMatrixSize / 2 - 1) / 15);    int origCenter=baseMatrixSize / 2;    int center=matrixSize / 2;    for (int i=0; i < origCenter; i++) {      int newOffset=i + i / 15;      alignmentMap[origCenter - i - 1]=center - newOffset - 1;      alignmentMap[origCenter + i]=center + newOffset + 1;    }  }  BitMatrix matrix=new BitMatrix(matrixSize);  for (int i=0, rowOffset=0; i < layers; i++) {    int rowSize=compact ? (layers - i) * 4 + 9 : (layers - i) * 4 + 12;    for (int j=0; j < rowSize; j++) {      int columnOffset=j * 2;      for (int k=0; k < 2; k++) {        if (messageBits.get(rowOffset + columnOffset + k)) {          matrix.set(alignmentMap[i * 2 + k],alignmentMap[i * 2 + j]);        }        if (messageBits.get(rowOffset + rowSize * 2 + columnOffset + k)) {          matrix.set(alignmentMap[i * 2 + j],alignmentMap[baseMatrixSize - 1 - i * 2 - k]);        }        if (messageBits.get(rowOffset + rowSize * 4 + columnOffset + k)) {          matrix.set(alignmentMap[baseMatrixSize - 1 - i * 2 - k],alignmentMap[baseMatrixSize - 1 - i * 2 - j]);        }        if (messageBits.get(rowOffset + rowSize * 6 + columnOffset + k)) {          matrix.set(alignmentMap[baseMatrixSize - 1 - i * 2 - j],alignmentMap[i * 2 + k]);        }      }    }    rowOffset+=rowSize * 8;  }  drawModeMessage(matrix,compact,matrixSize,modeMessage);  if (compact) {    drawBullsEye(matrix,matrixSize / 2,5);  } else {    drawBullsEye(matrix,matrixSize / 2,7);    for (int i=0, j=0; i < baseMatrixSize / 2 - 1; i+=15, j+=16) {      for (int k=(matrixSize / 2) & 1; k < matrixSize; k+=2) {        matrix.set(matrixSize / 2 - j,k);        matrix.set(matrixSize / 2 + j,k);        matrix.set(k,matrixSize / 2 - j);        matrix.set(k,matrixSize / 2 + j);      }    }  }  AztecCode aztec=new AztecCode();  aztec.setCompact(compact);  aztec.setSize(matrixSize);  aztec.setLayers(layers);  aztec.setCodeWords(messageSizeInWords);  aztec.setMatrix(matrix);  return aztec;}  }
class C{  public static void sendGps(int number,int offset){  sendGps(number,offset,-1);}  }
class C{  protected void retrieveFromListExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  ClientInvocation invocation=saveCurrentInvocation(KeysClientsInvocations.CAMPOS_TABLA_EDICION,request);  invocation.setAsReturnPoint(true);  String idCampo=request.getParameter("idCampo");  ServiceRepository services=getServiceRepository(request);  GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();  CampoTablaVO campoTablaVO=descripcionService.getCampoTabla(idCampo);  CamposTablaForm camposTablaForm=(CamposTablaForm)form;  camposTablaForm.setCamposABorrar(null);  request.setAttribute("campoTablaVO",campoTablaVO);  setReturnActionFordward(request,mapping.findForward("retrieveFromList"));}  }
class C{  public static String insertBlanks(String s){  String result="";  for (int i=0; i < s.length(); i++) {    if (s.charAt(i) == '+' || s.charAt(i) == '-' || s.charAt(i) == '/' || s.charAt(i) == '*')     result+=" " + s.charAt(i) + " "; else     result+=s.charAt(i);  }  return result;}  }
class C{  public static double MCSCE3maxFitness(GEPIndividual ind){  return (1000.0);}  }
class C{  public BrowseResult clone(){  BrowseResult result=new BrowseResult();  result.StatusCode=StatusCode;  result.ContinuationPoint=ContinuationPoint;  if (References != null) {    result.References=new ReferenceDescription[References.length];    for (int i=0; i < References.length; i++)     result.References[i]=References[i].clone();  }  return result;}  }
class C{  public void shutdown() throws Exception {  (new Thread(this,"CheckActivateRef")).start();}  }
class C{  public static DecomposableMatchBuilder0<Byte> caseByte(byte b){  List<Matcher<Object>> matchers=new ArrayList<>();  matchers.add(eq(b));  return new DecomposableMatchBuilder0<>(matchers,new PrimitiveFieldExtractor<>(Byte.class));}  }
class C{  public double arcDistance(final PlanetModel planetModel,final double x,final double y,final double z,final Membership... bounds){  if (evaluateIsZero(x,y,z)) {    if (meetsAllBounds(x,y,z,bounds))     return 0.0;    return Double.POSITIVE_INFINITY;  }  final Plane perpPlane=new Plane(this.y * z - this.z * y,this.z * x - this.x * z,this.x * y - this.y * x,0.0);  final GeoPoint[] intersectionPoints=findIntersections(planetModel,perpPlane);  double minDistance=Double.POSITIVE_INFINITY;  for (  final GeoPoint intersectionPoint : intersectionPoints) {    if (meetsAllBounds(intersectionPoint,bounds)) {      final double theDistance=intersectionPoint.arcDistance(x,y,z);      if (theDistance < minDistance) {        minDistance=theDistance;      }    }  }  return minDistance;}  }
class C{  protected void init(DerValue encoding,int req_type) throws Asn1Exception, RealmException, IOException, KrbApErrException {  DerValue der, subDer;  if ((encoding.getTag() & 0x1F) != req_type) {    if (DEBUG) {      System.out.println(">>> KDCRep: init() " + "encoding tag is " + encoding.getTag() + " req type is "+ req_type);    }    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  der=encoding.getData().getDerValue();  if (der.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  subDer=der.getData().getDerValue();  if ((subDer.getTag() & 0x1F) == 0x00) {    pvno=subDer.getData().getBigInteger().intValue();    if (pvno != Krb5.PVNO) {      throw new KrbApErrException(Krb5.KRB_AP_ERR_BADVERSION);    }  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  subDer=der.getData().getDerValue();  if ((subDer.getTag() & 0x1F) == 0x01) {    msgType=subDer.getData().getBigInteger().intValue();    if (msgType != req_type) {      throw new KrbApErrException(Krb5.KRB_AP_ERR_MSG_TYPE);    }  } else {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  if ((der.getData().peekByte() & 0x1F) == 0x02) {    subDer=der.getData().getDerValue();    DerValue[] padata=subDer.getData().getSequence(1);    pAData=new PAData[padata.length];    for (int i=0; i < padata.length; i++) {      pAData[i]=new PAData(padata[i]);    }  } else {    pAData=null;  }  Realm crealm=Realm.parse(der.getData(),(byte)0x03,false);  cname=PrincipalName.parse(der.getData(),(byte)0x04,false,crealm);  ticket=Ticket.parse(der.getData(),(byte)0x05,false);  encPart=EncryptedData.parse(der.getData(),(byte)0x06,false);  if (der.getData().available() > 0) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }}  }
class C{  public int replaceEntity(char[] buffer,int start,int length) throws XMLStreamException {  if (buffer[start + 1] == '#') {    char c=buffer[start + 2];    int base=(c == 'x') ? 16 : 10;    int i=(c == 'x') ? 3 : 2;    int charValue=0;    for (; i < length - 1; i++) {      c=buffer[start + i];      charValue*=base;      charValue+=(c <= '9') ? (c - '0') : (c <= 'Z') ? c - 'A' + 10 : c - 'a' + 10;    }    buffer[start]=(char)charValue;    return 1;  }  if ((buffer[start + 1] == 'l') && (buffer[start + 2] == 't') && (buffer[start + 3] == ';')) {    buffer[start]='<';    return 1;  }  if ((buffer[start + 1] == 'g') && (buffer[start + 2] == 't') && (buffer[start + 3] == ';')) {    buffer[start]='>';    return 1;  }  if ((buffer[start + 1] == 'a') && (buffer[start + 2] == 'p') && (buffer[start + 3] == 'o')&& (buffer[start + 4] == 's')&& (buffer[start + 5] == ';')) {    buffer[start]='\'';    return 1;  }  if ((buffer[start + 1] == 'q') && (buffer[start + 2] == 'u') && (buffer[start + 3] == 'o')&& (buffer[start + 4] == 't')&& (buffer[start + 5] == ';')) {    buffer[start]='"';    return 1;  }  if ((buffer[start + 1] == 'a') && (buffer[start + 2] == 'm') && (buffer[start + 3] == 'p')&& (buffer[start + 4] == ';')) {    buffer[start]='&';    return 1;  }  _tmp.setArray(buffer,start + 1,length - 2);  CharSequence replacementText=(_entitiesMapping != null) ? _entitiesMapping.get(_tmp) : null;  if (replacementText == null)   throw new XMLStreamException("Entity " + _tmp + " not recognized");  int replacementTextLength=replacementText.length();  for (int i=0; i < replacementTextLength; i++) {    buffer[start + i]=replacementText.charAt(i);  }  return replacementTextLength;}  }
class C{  public DVector2D(int c1,int c2){  defaultCapacity2=Math.max(defaultDefaultCapacity2,c2);  vector=new double[Math.max(defaultCapacity1,c1)][defaultCapacity2];  sizes=new IVector(c1);}  }
class C{  public boolean intersectsRect(Rect r){  return !(x > r.x + r.width || x + width < r.x || y > r.y + r.height || y + height < r.y);}  }
class C{  public boolean isCreatePlan(){  Object oo=get_Value(COLUMNNAME_IsCreatePlan);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean clear() throws QueryException {  return false;}  }
class C{  private void sleep(int iteration,long sleepTime,boolean isExponential){  long currentSleepTime=isExponential ? (long)(sleepTime * Math.pow(2,iteration)) : sleepTime;  try {    logger.info("Trying to sleep for " + currentSleepTime + " millis.");    Thread.sleep(currentSleepTime);  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  }}  }
class C{  public InlineMethodDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.INLINE_METHOD,project,description,comment,arguments,flags);}  }
class C{  public static <T,K,V,M extends Map<K,V>>Collector<T,?,M> toMap(Function<? super T,? extends K> keyMapper,Function<? super T,? extends V> valueMapper,Supplier<M> mapSupplier){  return Collectors.toMap(keyMapper,valueMapper,null,mapSupplier);}  }
class C{  protected Writer write(Writer writer,int indentFactor,int indent){  try {    boolean commanate=false;    int length=this.size();    writer.write('[');    int thisFactor=(indentFactor == -1) ? 0 : indentFactor;    if (length == 1) {      JSONObject.writeValue(writer,this.myArrayList.get(0),thisFactor,indent);    } else     if (length != 0) {      final int newindent=indent + thisFactor;      for (int i=0; i < length; i+=1) {        if (commanate) {          writer.write(',');        }        if (indentFactor != -1) {          writer.write('\n');        }        JSONObject.indent(writer,newindent);        JSONObject.writeValue(writer,this.myArrayList.get(i),thisFactor,newindent);        commanate=true;      }      if (indentFactor != -1) {        writer.write('\n');      }      JSONObject.indent(writer,indent);    }    writer.write(']');    return writer;  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  protected ClientConnectionManager createConnectionManager(SchemeRegistry schemeRegistry,BasicHttpParams httpParams){  return new ThreadSafeClientConnManager(httpParams,schemeRegistry);}  }
class C{  public void taint(final String register){  Preconditions.checkNotNull(register,"Error: Register argument can not be null");  if (isTainted(register) || m_untaintedRegs.contains(register)) {    m_updatedRegs.add(register);  } else {    m_newlyTaintedRegs.add(register);  }  m_taintedRegs.add(register);  m_untaintedRegs.remove(register);}  }
class C{  public String join(String separator) throws JSONException {  int len=this.length();  StringBuilder sb=new StringBuilder();  for (int i=0; i < len; i+=1) {    if (i > 0) {      sb.append(separator);    }    sb.append(JSONObject.valueToString(this.myArrayList.get(i)));  }  return sb.toString();}  }
class C{  void removeVirtualVolumesFromStorageView(String viewName,String clusterName,List<String> virtualVolumeNames) throws VPlexApiException {  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  VPlexStorageViewInfo storageViewInfo=discoveryMgr.findStorageViewOnCluster(viewName,clusterName,true);  if (storageViewInfo == null) {    return;  }  if (storageViewInfo.getVirtualVolumes() == null || storageViewInfo.getVirtualVolumes().isEmpty()) {    return;  }  List<String> vvolsInSV=new ArrayList<String>();  for (  String vplexVirtVol : storageViewInfo.getVirtualVolumes()) {    s_logger.info("virtual volume from vplex: ",vplexVirtVol);    StringTokenizer tokenizer=new StringTokenizer(vplexVirtVol,",");    if (tokenizer.countTokens() >= 2) {      tokenizer.nextToken();      String vplexVirtVolName=tokenizer.nextToken();      vvolsInSV.add(vplexVirtVolName);    } else {      s_logger.warn("unexpected format for virtual volume " + vplexVirtVol + "; expecting a comma separated string with the volume name in the second token");    }  }  List<String> volsToRemove=new ArrayList<String>();  for (  String volToRemove : virtualVolumeNames) {    if (vvolsInSV.contains(volToRemove)) {      volsToRemove.add(volToRemove);    }  }  if (!volsToRemove.isEmpty()) {    removeStorageViewVirtualVolumes(storageViewInfo,volsToRemove);  }}  }
class C{  public String format(Locale l,String format,Object... args){  return String.format(l,format,args);}  }
class C{  public boolean equals(Object o){  if (!(o instanceof TungstenProperties))   return false;  Map<String,Object> tp2=((TungstenProperties)o).properties;  return properties.equals(tp2);}  }
class C{  protected final void updateBorderText(final String text){  Preconditions.checkNotNull(text,"IE01842: Text argument can not be null");  m_titledBorder.setTitle(text);  updateUI();}  }
class C{  protected void add(Node node){  nodeMap.add(node);}  }
class C{  public boolean hasCustomProperties(){  return hasRepeatingExtension(CustomProperty.class);}  }
class C{  public static void registerSASLMechanism(String name,Class<? extends SASLMechanism> mClass){  implementedMechanisms.put(name,mClass);}  }
class C{  void paintNodeLabel(final float x,final float y,final Canvas canvas,final String featureKeyThin,final float strokeWidth,final Node node){  Paint paint2=DataStyle.getCurrent(featureKeyThin).getPaint();  SortedMap<String,String> tags=node.getTags();  String label=labelcache.get(tags);  if (label == null) {    if (!labelcache.containsKey(tags)) {      label=node.getTagWithKey(Tags.KEY_NAME);      if (label == null && tmpPresets != null) {        PresetItem match=Preset.findBestMatch(tmpPresets,node.getTags());        if (match != null) {          label=match.getTranslatedName();        } else {          label=node.getPrimaryTag();        }      }      labelcache.put(tags,label);      if (label == null) {        return;      }    } else {      return;    }  }  canvas.drawText(label,x - (paint2.measureText(label) / 2),y + strokeWidth + 2 * verticalNumberOffset,paint2);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.673 -0500",hash_original_method="454D6D8A7D641F48CA6B87A071B1615F",hash_generated_method="0DDF0DBFDE1A6689A83DC6DC03EBC794") private static boolean eq(Object o1,Object o2){  return (o1 == null ? o2 == null : o1.equals(o2));}  }
class C{  public boolean hasVectors(){  return hasVectors;}  }
class C{  public void addVplexVolumesToSRDFTargetCG(URI vplexURI,List<URI> vplexVolumeURIs,String stepId) throws WorkflowException {  try {    Map<Volume,Volume> vplexToSrdfVolumeMap=VPlexSrdfUtil.makeVplexToSrdfVolumeMap(dbClient,vplexVolumeURIs);    URI cgURI=null;    for (    Volume srdfVolume : vplexToSrdfVolumeMap.values()) {      if (srdfVolume.getConsistencyGroup() != null) {        if (cgURI == null) {          cgURI=srdfVolume.getConsistencyGroup();        } else {          if (srdfVolume.getConsistencyGroup() != cgURI) {            log.info("Multiple CGs discovered: " + cgURI.toString() + " "+ srdfVolume.getConsistencyGroup().toString());          }        }      }    }    if (cgURI == null) {      WorkflowStepCompleter.stepSucceded(stepId);      return;    }    BlockConsistencyGroup consistencyGroup=dbClient.queryObject(BlockConsistencyGroup.class,cgURI);    if (!consistencyGroup.getRequestedTypes().contains(Types.VPLEX)) {      consistencyGroup.addRequestedTypes(Arrays.asList(Types.VPLEX.name()));      dbClient.updateObject(consistencyGroup);    }    Volume protoVolume=null;    for (    Volume vplexVolume : vplexToSrdfVolumeMap.keySet()) {      protoVolume=vplexVolume;      break;    }    StorageSystem vplexSystem=dbClient.queryObject(StorageSystem.class,protoVolume.getStorageController());    if (createVplexCG(vplexSystem,consistencyGroup,protoVolume,stepId) == false) {      return;    }    addVolumesToCG(vplexSystem,consistencyGroup,vplexToSrdfVolumeMap.keySet(),stepId);  } catch (  Exception ex) {    log.info("Exception adding Vplex volumes to SRDF Target CG: " + ex.getMessage(),ex);    ServiceError svcError=VPlexApiException.errors.jobFailed(ex);    WorkflowStepCompleter.stepFailed(stepId,svcError);  }}  }
class C{  private boolean isClusteredHostOnArray(StorageSystem storage,String hostName){  boolean isClusteredHost=false;  XIVRestClient restExportOpr=getRestClient(storage);  if (null != restExportOpr && null != hostName) {    HOST_STATUS hostStatus=null;    try {      hostStatus=restExportOpr.getHostStatus(storage.getSmisProviderIP(),hostName);    } catch (    Exception e) {      _log.error("Unable to validate host {} information on array : {} ",hostName,storage.getLabel(),e);    }    if (null != hostStatus) {      if (HOST_STATUS.HOST_NOT_PRESENT.equals(hostStatus)) {        _log.info("Host {} not present on Array {}. Creating a new instance!",hostName,storage.getLabel());        isClusteredHost=true;      } else       if (HOST_STATUS.CLUSTER_HOST.equals(hostStatus)) {        _log.info("Identified Host {} as a Clustered Host on Array {}.",hostName,storage.getLabel());        isClusteredHost=true;      } else       if (HOST_STATUS.STANDALONE_HOST.equals(hostStatus)) {        _log.info("Host {} identified as a Standalone host on Array {}. Using SMIS for provisioning!",hostName,storage.getLabel());        isClusteredHost=false;      }    }  }  return isClusteredHost;}  }
class C{  @SuppressWarnings("unchecked") public void update(final Sketch<S> a,final Sketch<S> b){  if (a != null)   isEmpty_=a.isEmpty();  long thetaA=a == null ? Long.MAX_VALUE : a.getThetaLong();  long thetaB=b == null ? Long.MAX_VALUE : b.getThetaLong();  theta_=Math.min(thetaA,thetaB);  if (a == null || a.getRetainedEntries() == 0)   return;  if (b == null || b.getRetainedEntries() == 0) {    getNoMatchSetFromSketch(a);  } else {    long[] hashTable;    if (b instanceof CompactSketch) {      hashTable=convertToHashTable(b);    } else {      hashTable=b.keys_;    }    int lgHashTableSize=Integer.numberOfTrailingZeros(hashTable.length);    int noMatchSize=a.getRetainedEntries();    keys_=new long[noMatchSize];    summaries_=(S[])Array.newInstance(a.summaries_.getClass().getComponentType(),noMatchSize);    for (int i=0; i < a.keys_.length; i++) {      if (a.keys_[i] != 0) {        int index=HashOperations.hashSearch(hashTable,lgHashTableSize,a.keys_[i]);        if (index == -1) {          keys_[count_]=a.keys_[i];          summaries_[count_]=a.summaries_[i];          count_++;        }      }    }  }}  }
class C{  public void parseNodes(String filename){  int counter=0;  int multiplier=1;  log.info("Parsing nodes from " + filename);  NetworkFactory nf=sc.getNetwork().getFactory();  try {    BufferedReader br=IOUtils.getBufferedReader(filename);    try {      String line=null;      while ((line=br.readLine()) != null) {        String[] entries=line.split("\t");        Node n=nf.createNode(Id.create(entries[0],Node.class),new Coord(Double.parseDouble(entries[1]),Double.parseDouble(entries[2])));        sc.getNetwork().addNode(n);        if (++counter == multiplier) {          log.info("   nodes parsed: " + counter);          multiplier*=2;        }      }    }  finally {      br.close();    }  } catch (  FileNotFoundException e) {    log.warn("   nodes parsed: " + counter + " (Exception)");    e.printStackTrace();  }catch (  IOException e) {    log.warn("   nodes parsed: " + counter + " (Exception)");    e.printStackTrace();  }  log.info("   nodes parsed: " + counter + " (Done)");}  }
class C{  public AudioPermission(String name,String actions){  super(name,actions);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  double z;  int progress=0;  int i, a;  long counter=0;  int loopNum=0;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int[][] elements={{6,7,0,4,3,2},{7,0,1,3,5},{0,1,2,4,5,6},{1,2,3,5,7},{2,3,4,6,7,0},{3,4,5,7,1},{4,5,6,0,1,2},{5,6,7,1,3}};  double[][] vals={{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1}};  double[] neighbours=new double[8];  boolean patternMatch=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int nRows=image.getNumberRows();    int nCols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("black_white.pal");    double[] data=null;    for (row=0; row < nRows; row++) {      data=image.getRowValues(row);      for (col=0; col < nCols; col++) {        if (data[col] > 0) {          output.setValue(row,col,1);        } else         if (data[col] == noData) {          output.setValue(row,col,noData);        } else {          output.setValue(row,col,0);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress(progress);    }    image.close();    output.flush();    do {      loopNum++;      updateProgress("Loop Number " + loopNum + ":",0);      counter=0;      for (row=0; row < nRows; row++) {        for (col=0; col < nCols; col++) {          z=output.getValue(row,col);          if (z > 0 && z != noData) {            for (i=0; i < 8; i++) {              neighbours[i]=output.getValue(row + dY[i],col + dX[i]);            }            for (a=0; a < 8; a++) {              patternMatch=true;              for (i=0; i < elements[a].length; i++) {                if (neighbours[elements[a][i]] != vals[a][i]) {                  patternMatch=false;                }              }              if (patternMatch) {                output.setValue(row,col,0);                counter++;              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress(progress);      }    } while (counter > 0);    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private static int encodeLongEncoding(byte[] code,int index,int value){  code[index++]=(byte)((value & 0xff) | LONGENCODING_MASK);  value=value >>> BITS_IN_BYTE;  code[index++]=(byte)(value & 0xff);  value=value >>> BITS_IN_BYTE;  code[index++]=(byte)(value & 0xff);  value=value >>> BITS_IN_BYTE;  code[index++]=(byte)(value & 0xff);  return index;}  }
class C{  protected FileSystemConfiguration fsConfiguration(String gridName) throws IgniteCheckedException {  FileSystemConfiguration cfg=new FileSystemConfiguration();  cfg.setDataCacheName("partitioned");  cfg.setMetaCacheName("replicated");  cfg.setName("igfs");  cfg.setPrefetchBlocks(1);  cfg.setDefaultMode(mode);  if (mode != PRIMARY)   cfg.setSecondaryFileSystem(new IgniteHadoopIgfsSecondaryFileSystem(secondaryFsUriStr,secondaryConfFullPath));  cfg.setIpcEndpointConfiguration(primaryIpcEndpointConfiguration(gridName));  cfg.setManagementPort(-1);  cfg.setBlockSize(512 * 1024);  return cfg;}  }
class C{  @Override public CompletableFuture<Optional<T>> max(final Comparator<? super T> comparator){  return CompletableFuture.supplyAsync(null,exec);}  }
class C{  static ClassLoader findClassLoader() throws ConfigurationError {  SecuritySupport ss=SecuritySupport.getInstance();  ClassLoader context=ss.getContextClassLoader();  ClassLoader system=ss.getSystemClassLoader();  ClassLoader chain=system;  while (true) {    if (context == chain) {      ClassLoader current=ObjectFactory.class.getClassLoader();      chain=system;      while (true) {        if (current == chain) {          return system;        }        if (chain == null) {          break;        }        chain=ss.getParentClassLoader(chain);      }      return current;    }    if (chain == null) {      break;    }    chain=ss.getParentClassLoader(chain);  }  ;  return context;}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy,int duration){  mMode=SCROLL_MODE;  mFinished=false;  mDuration=duration;  mStartTime=AnimationUtils.currentAnimationTimeMillis();  mStartX=startX;  mStartY=startY;  mFinalX=startX + dx;  mFinalY=startY + dy;  mDeltaX=dx;  mDeltaY=dy;  mDurationReciprocal=1.0f / (float)mDuration;  mPm.cpuBoost(1500000);}  }
class C{  public void remove(final Collection<String> deleteIDs){  if (deleteIDs == null || deleteIDs.size() == 0)   return;  try {    this.getDefaultConnector().deleteByIds(deleteIDs);    if (this.writeWebgraph)     this.getWebgraphConnector().deleteByIds(deleteIDs);  } catch (  final Throwable e) {    ConcurrentLog.logException(e);  }}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public static void cross3D(double[] vo,double[] v1,double[] v2){  vo[0]=(v1[1] * v2[2]) - (v1[2] * v2[1]);  vo[1]=(v1[2] * v2[0]) - (v1[0] * v2[2]);  vo[2]=(v1[0] * v2[1]) - (v1[1] * v2[0]);}  }
class C{  public JpegReader(File jpegFile) throws JpegProcessingException {  this(new JpegSegmentReader(jpegFile).readSegment(JpegSegmentReader.SEGMENT_SOF0));}  }
class C{  private List<int[]> findMaximalCliques(int elements[],int ng[][]){  boolean connected[][]=new boolean[this.numVariables()][this.numVariables()];  for (int i=0; i < connected.length; i++) {    for (int j=i; j < connected.length; j++) {      if (i != j) {        connected[i][j]=connected[j][i]=(ng[i][j] != EDGE_NONE);      } else {        connected[i][j]=true;      }    }  }  int numCalls[]=new int[1];  numCalls[0]=0;  int c[]=new int[1];  c[0]=0;  List<int[]> output=new ArrayList<>();  int compsub[]=new int[elements.length];  int old[]=new int[elements.length];  for (int i=0; i < elements.length; i++) {    old[i]=elements[i];  }  findMaximalCliquesOperator(numCalls,elements,output,connected,compsub,c,old,0,elements.length);  return output;}  }
class C{  NodeTextRep instanceSubstitute(InstanceSubstitution isub,String newPrefix,NodeRepresentation nodeRep){  NodeTextRep result=(new NodeTextRep(nodeRep.nodeText,nodeRep.mapping)).clone();  return result;}  }
class C{  private void fillValue(){  String level=sensorConfig.getMinLevel();  levelCombo.select(levelCombo.indexOf(level));}  }
class C{  void put(final MethodWriter owner,final ByteVector out,final int source,final boolean wideOffset){  if ((status & RESOLVED) == 0) {    if (wideOffset) {      addReference(-1 - source,out.length);      out.putInt(-1);    } else {      addReference(source,out.length);      out.putShort(-1);    }  } else {    if (wideOffset) {      out.putInt(position - source);    } else {      out.putShort(position - source);    }  }}  }
class C{  private boolean permutatePattern(){  String newPattern=pattern.pattern().replaceFirst("\\(\\.\\+\\)","(.+?)");  if (newPattern.equals(pattern.pattern())) {    newPattern=pattern.pattern().replaceFirst("\\(\\.\\?\\)","(.++)");  }  boolean change=!(newPattern.equals(pattern.pattern()));  pattern=Pattern.compile(newPattern);  return change;}  }
class C{  protected void processAssociationOverride(AssociationOverrideMetadata associationOverride,EmbeddableMapping embeddableMapping,DatabaseTable defaultTable,MetadataDescriptor owningDescriptor){  for (  JoinColumnMetadata joinColumn : getJoinColumnsAndValidate(associationOverride.getJoinColumns(),getReferenceDescriptor())) {    DatabaseField pkField=getReferencedField(joinColumn.getReferencedColumnName(),getReferenceDescriptor(),MetadataLogger.PK_COLUMN);    DatabaseField fkField=((OneToOneMapping)getMapping()).getTargetToSourceKeyFields().get(pkField);    if (fkField == null) {      throw ValidationException.invalidAssociationOverrideReferenceColumnName(pkField.getName(),associationOverride.getName(),embeddableMapping.getAttributeName(),owningDescriptor.getJavaClassName());    } else {      DatabaseField translationFKField=joinColumn.getForeignKeyField(pkField);      if (!translationFKField.hasTableName()) {        translationFKField.setTable(defaultTable);      }      embeddableMapping.addFieldTranslation(translationFKField,fkField.getName());    }  }}  }
class C{  private void sendRoomMessage(MessageType type,String content){  if (content == null || type == null)   throw new NullPointerException();  String completeMsg=String.valueOf(type.flag) + content;  client.sendMessage(new StringWebsocketMessage(completeMsg));}  }
class C{  @Override public int hashCode(){  return (this.seriesList != null ? this.seriesList.hashCode() : 0);}  }
class C{  public void instanceOf(final Type type){  typeInsn(Opcodes.INSTANCEOF,type);}  }
class C{  @Override public void doRunKeys(int run) throws Exception {  if (m_Instances == null) {    throw new Exception("No Instances set");  }  Object[] seKey=m_SplitEvaluator.getKey();  Object[] key=new Object[seKey.length + 2];  key[0]=Utils.backQuoteChars(m_Instances.relationName());  key[1]="" + run;  System.arraycopy(seKey,0,key,2,seKey.length);  if (m_ResultListener.isResultRequired(this,key)) {    try {      m_ResultListener.acceptResult(this,key,null);    } catch (    Exception ex) {      throw ex;    }  }}  }
class C{  public int capacity(){  return capacity;}  }
class C{  private double manhattanSegmentalDistance(NumberVector o1,double[] o2,long[] dimensions){  double result=0;  int card=0;  for (int d=BitsUtil.nextSetBit(dimensions,0); d >= 0; d=BitsUtil.nextSetBit(dimensions,d + 1)) {    result+=Math.abs(o1.doubleValue(d) - o2[d]);    ++card;  }  result/=card;  return result;}  }
