class C{  public SM_PET(int actionId,Collection<PetCommonData> pets){  this.actionId=actionId;  this.pets=pets;}  }
class C{  public void writeFloat(float a) throws IOException {  writeInt(Float.floatToIntBits(a));}  }
class C{  public void addAll(Collection<FeatureFlag> featureFlags){  featureFlags.stream().forEach(null);}  }
class C{  public String upload_appender_file1(byte[] file_buff,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  String parts[]=this.upload_appender_file(file_buff,file_ext_name,meta_list);  if (parts != null) {    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];  } else {    return null;  }}  }
class C{  public static void insertOrUpdate(List<JSON> arr,String tag){  if (arr == null) {    return;  }  int len=arr.size();  for (int i=0; i < len; i++) {    JSON jo=arr.get(i);    jo.put("tag",tag);    insertOrUpdate(jo,0);  }}  }
class C{  private static boolean isInHorizontalTargetZone(float x,float y,float handleXStart,float handleXEnd,float handleY,float targetRadius){  return x > handleXStart && x < handleXEnd && Math.abs(y - handleY) <= targetRadius;}  }
class C{  @Override protected void onDraw(Canvas canvas){  super.onDraw(canvas);  if ((mBitmap != null) && (mFaces != null)) {    double scale=drawBitmap(canvas);    drawFaceBox(canvas,scale);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MagicCounterATK_INTERVAL_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201065,num0,skillname);}  }
class C{  ConnectableSegment(final Vector2D start,final Vector2D end,final Line line,final BSPTree<Euclidean2D> node,final BSPTree<Euclidean2D> startNode,final BSPTree<Euclidean2D> endNode){  super(start,end,line);  this.node=node;  this.startNode=startNode;  this.endNode=endNode;  this.previous=null;  this.next=null;  this.processed=false;}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set fontSize=decrease;");}  }
class C{  public IntIntMap(InputStream inputStream) throws IOException {  try (DataInputStream ins=new DataInputStream(inputStream)){    int magicNumber=ins.readInt();    if (magicNumber != MAGIC_NUMBER)     throw new IOException("Wrong file type");    m_hasFreeKey=ins.readBoolean();    m_freeValue=ins.readInt();    m_fillFactor=ins.readFloat();    m_threshold=ins.readInt();    m_size=ins.readInt();    m_mask=ins.readInt();    m_mask2=ins.readInt();    final int m_data_length=ins.readInt();    m_data=new int[m_data_length];    for (int i=0; i < m_data_length; i++)     m_data[i]=ins.readInt();  } }  }
class C{  public boolean print(){  return soot.PhaseOptions.getBoolean(options,"print");}  }
class C{  protected void pushRight(BinarySearchTreeNode<E> node){  while (node != null) {    this.stack.push(node);    node=node.right;  }}  }
class C{  public JToggleGroup(int type,ListModel data){  this(type,data,new DefaultListSelectionModel());}  }
class C{  public MessagesAllowMessagesFromCommunityQuery allowMessagesFromCommunity(UserActor actor,int groupId){  return new MessagesAllowMessagesFromCommunityQuery(getClient(),actor,groupId);}  }
class C{  public int remove(long playlistId){  return resolver.delete(MediaStore.Audio.Playlists.EXTERNAL_CONTENT_URI,MediaStore.Audio.Playlists._ID + " = ?",new String[]{String.valueOf(playlistId)});}  }
class C{  public static boolean isPositiveInteger(String value){  return value != null && INT_VALIDATOR.isValid(value) && POSITIVE_INT_PATTERN.matcher(value).matches();}  }
class C{  private void emitSuccess(@NotNull LengthOfOutputStream stream){  Subject<Long,Long> lengthBroadcaster=stream.getLengthBroadcaster();  lengthBroadcaster.onNext(stream.getResponseLength());  lengthBroadcaster.onCompleted();}  }
class C{  protected AdsCreateClientsQuery data(String value){  return unsafeParam("data",value);}  }
class C{  public FieldVector3D<T> normalize() throws MathRuntimeException {  final T s=getNorm();  if (s.getReal() == 0) {    throw new MathRuntimeException(LocalizedGeometryFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);  }  return scalarMultiply(s.reciprocal());}  }
class C{  public GraphSimilarity compareMeaningsOf(Vertex vNode1,Vertex vNode2){  GraphSimilarity isRes=new GraphSimilarity();  return isRes;}  }
class C{  public ResourceLoader addExcludePackages(String... packages){  Collections.addAll(excludeResourcePackages,packages);  return this;}  }
class C{  public HTTPTokener(String string){  super(string);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Object allocateInstance(java.lang.Class)")) {    sun_misc_Unsafe_allocateInstance(method,thisVar,returnVar,params);    return;  }{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  private void updateRingColor(float interpolatedTime,Ring ring){  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));  }}  }
class C{  public static Cursor query(ContentResolver cr){  return cr.query(CONTENT_URI,PROJECTION,WHERE,WHERE_ARGS,SORT_ORDER);}  }
class C{  public BinaryFinding isBinary(List<String> codeLines,String fileName){  if (codeLines.isEmpty()) {    return new BinaryFinding(true,"file is empty");  }  String lowerFileName=fileName.toLowerCase();  for (  String extention : this.WHITELIST) {    if (lowerFileName.endsWith("." + extention)) {      return new BinaryFinding(false,"appears in extension whitelist");    }  }  for (  String extention : this.BLACKLIST) {    if (lowerFileName.endsWith("." + extention)) {      return new BinaryFinding(true,"appears in extension blacklist");    }  }  for (  Classifier classifier : this.classifier) {    for (    String extention : classifier.extensions) {      if (lowerFileName.endsWith("." + extention)) {        return new BinaryFinding(false,"appears in internal extension whitelist");      }    }  }  if (this.GUESSBINARY == false) {    return new BinaryFinding(false,Values.EMPTYSTRING);  }  int lines=codeLines.size() < 10000 ? codeLines.size() : 10000;  double asciiCount=0;  double nonAsciiCount=0;  for (int i=0; i < lines; i++) {    String line=codeLines.get(i);    for (int j=0; j < line.length(); j++) {      if (((int)line.charAt(j)) <= 128) {        asciiCount++;      } else {        nonAsciiCount++;      }    }  }  if (nonAsciiCount == 0) {    return new BinaryFinding(false,Values.EMPTYSTRING);  }  if (asciiCount == 0) {    return new BinaryFinding(true,"all characters found non-ascii");  }  double percent=asciiCount / (asciiCount + nonAsciiCount);  if (percent < 0.30) {    return new BinaryFinding(true,"only 30% of characters are non-ascii");  }  return new BinaryFinding(false,Values.EMPTYSTRING);}  }
class C{  public Builder complexViewDetector(@Nullable ComplexViewDetector complexViewDetector){  this.complexViewDetector=complexViewDetector;  return this;}  }
class C{  public static GreaterSpacePredicate greater(Comparable<?> value){  return new GreaterSpacePredicate(value);}  }
class C{  private boolean isAttached(Spannable str,Selection selection,Object span,SpanCollectMode mode){  int spanStart=str.getSpanStart(span);  int spanEnd=str.getSpanEnd(span);  int selStart=selection.start();  int selEnd=selection.end();  int start=Math.max(spanStart,selStart);  int end=Math.min(spanEnd,selEnd);  if (start > end) {    return false;  } else   if (start < end) {    return true;  } else   if ((spanStart > selStart && spanEnd < selEnd) || (selStart > spanStart && selEnd < spanEnd)) {    return true;  } else   if (mode == SpanCollectMode.EXACT) {    return spanStart == selStart && spanEnd == selEnd && selStart == selEnd;  } else {    int flags=str.getSpanFlags(span) & Spanned.SPAN_POINT_MARK_MASK;    if (spanEnd == selStart) {      return isOneFlagSet(flags,Spanned.SPAN_EXCLUSIVE_INCLUSIVE,Spanned.SPAN_INCLUSIVE_INCLUSIVE);    } else {      return isOneFlagSet(flags,Spanned.SPAN_INCLUSIVE_EXCLUSIVE,Spanned.SPAN_INCLUSIVE_INCLUSIVE);    }  }}  }
class C{  public byte readByte() throws JMSException {  initializeReading();  try {    if (this.dataIn.available() == 0) {      throw new MessageEOFException("reached end of data");    }    this.dataIn.mark(10);    int type=this.dataIn.read();    if (type == _BYTE) {      return this.dataIn.readByte();    }    if (type == _STRING) {      return Byte.valueOf(this.dataIn.readUTF()).byteValue();    }    if (type == _NULL) {      this.dataIn.reset();      throw new NullPointerException("Cannot convert _NULL value to byte.");    } else {      this.dataIn.reset();      throw new MessageFormatException(" not a byte type");    }  } catch (  NumberFormatException mfe) {    try {      this.dataIn.reset();    } catch (    IOException ioe) {      JMSException jmsEx=new JMSException("reset failed");      jmsEx.setLinkedException(ioe);    }    throw mfe;  }catch (  EOFException e) {    JMSException jmsEx=new MessageEOFException(e.toString());    jmsEx.setLinkedException(e);    throw jmsEx;  }catch (  IOException e) {    JMSException jmsEx=new MessageFormatException(e.toString());    jmsEx.setLinkedException(e);    throw jmsEx;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHANGE_ITEM_SKIN_NOT_SAME_EQUIP_SLOT(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300479,value0,value1);}  }
class C{  private static void requestToFireIntentAndFinish(Activity activity){  Log.e(TAG,"Attempt to pass-through without completed FRE");  FirstRunStatus.setFirstRunFlowComplete(activity,false);  setFirstRunFlowSignInComplete(activity,false);  setFirstRunFlowSignInAccountName(activity,null);  setFirstRunFlowSignInSetupSync(activity,false);  activity.startActivity(FirstRunFlowSequencer.createGenericFirstRunIntent(activity,true));}  }
class C{  @Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){  if (oldVersion != newVersion) {    if (newVersion == 2 && oldVersion == 1) {      WXLogUtils.d(TAG_STORAGE,"storage is updating from version " + oldVersion + " to version "+ newVersion);      boolean updateResult=true;      try {        long start=System.currentTimeMillis();        db.beginTransaction();        String SQL_ADD_COLUMN_TIMESTAMP="ALTER TABLE " + TABLE_STORAGE + " ADD COLUMN "+ COLUMN_TIMESTAMP+ " TEXT;";        WXLogUtils.d(TAG_STORAGE,"exec sql : " + SQL_ADD_COLUMN_TIMESTAMP);        db.execSQL(SQL_ADD_COLUMN_TIMESTAMP);        String SQL_ADD_COLUMN_PERSISTENT="ALTER TABLE " + TABLE_STORAGE + " ADD COLUMN "+ COLUMN_PERSISTENT+ " INTEGER;";        WXLogUtils.d(TAG_STORAGE,"exec sql : " + SQL_ADD_COLUMN_PERSISTENT);        db.execSQL(SQL_ADD_COLUMN_PERSISTENT);        String SQL_UPDATE_TABLE="UPDATE " + TABLE_STORAGE + " SET "+ COLUMN_TIMESTAMP+ " = '"+ sDateFormatter.format(new Date())+ "' , "+ COLUMN_PERSISTENT+ " = 0";        WXLogUtils.d(TAG_STORAGE,"exec sql : " + SQL_UPDATE_TABLE);        db.execSQL(SQL_UPDATE_TABLE);        db.setTransactionSuccessful();        long time=System.currentTimeMillis() - start;        WXLogUtils.d(TAG_STORAGE,"storage updated success (" + time + "ms)");      } catch (      Exception e) {        WXLogUtils.d(TAG_STORAGE,"storage updated failed from version " + oldVersion + " to version "+ newVersion+ ","+ e.getMessage());        updateResult=false;      } finally {        db.endTransaction();      }      if (!updateResult) {        WXLogUtils.d(TAG_STORAGE,"storage is rollback,all data will be removed");        deleteDB();        onCreate(db);      }    } else {      deleteDB();      onCreate(db);    }  }}  }
class C{  protected WallReportCommentQuery commentId(int value){  return unsafeParam("comment_id",value);}  }
class C{  public KatharsisInvokerException(final int statusCode){  super();  this.statusCode=statusCode;}  }
class C{  @Override public Writer append(CharSequence value){  builder.append(value);  return this;}  }
class C{  public boolean sendTCPString(String message){  byte[] bytes=message.getBytes();  return sendTCPBytes(bytes);}  }
class C{  public StreamLogger(InputStream is,String logCategory,String ignorePattern){  this.is=is;  if (ignorePattern != null) {    try {      this.ignorePattern=Pattern.compile(ignorePattern);    } catch (    PatternSyntaxException e) {      Log.w(Mary.LOG,"Problem with regular expression pattern",e);      this.ignorePattern=null;    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SubTypeBoostResist_A_TO_ME(String value0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200725,value0,skillcaster,skillname);}  }
class C{  void pin(){  internalLock.writeLock().lock();  try {    pins++;  }  finally {    internalLock.writeLock().unlock();  }}  }
class C{  public int writeProtoId(ProtoId protoId){  int off=data.position();  writeInt(protoId.shortyIndex);  writeInt(protoId.returnTypeIndex);  writeInt(protoId.parametersOffset);  return off;}  }
class C{  public void stopPlaying(){  if ((this.state == STATE.MEDIA_RUNNING) || (this.state == STATE.MEDIA_PAUSED)) {    this.player.pause();    this.player.seekTo(0);    Log.d(LOG_TAG,"stopPlaying is calling stopped");    this.setState(STATE.MEDIA_STOPPED);  } else {    Log.d(LOG_TAG,"AudioPlayer Error: stopPlaying() called during invalid state: " + this.state.ordinal());    sendErrorStatus(MEDIA_ERR_NONE_ACTIVE);  }}  }
class C{  public PagesSaveQuery save(UserActor actor){  return new PagesSaveQuery(getClient(),actor);}  }
class C{  protected void initializeSchedulerProperties(Properties properties){  if (this.schedulerProperties != null) {    throw new IllegalStateException("Can't overwrite scheduler properties when they are already set. Set the properties before adding Jobs, and do not change them afterwards.");  }  this.schedulerProperties=properties;}  }
class C{  public Builder autoZIndex(Boolean autoZIndex){  this.autoZIndex=autoZIndex;  return this;}  }
class C{  public BetweenSpacePredicate(Comparable<?> low,Comparable<?> high,Comparator<?> comparator){  this(low,high,comparator,true,true);}  }
class C{  public boolean isClinit(){  return kind.isClinit();}  }
class C{  default ZonedTimeGrain buildZonedTimeGrain(DateTimeZone dateTimeZone){  return new ZonedTimeGrain(this,dateTimeZone);}  }
class C{  @SuppressWarnings("TryWithIdenticalCatches") public static LikesAttributesImpl create(Context context,AttributeSet attrs,@AttributesType int type){  int defAnimDuration=context.getResources().getInteger(R.integer.likes_default_animation_duration);  int defProdInterval=context.getResources().getInteger(R.integer.likes_default_produce_interval);  LikesAttributesImpl holder=new LikesAttributesImpl();  TypedArray array=context.obtainStyledAttributes(attrs,STYLEABLES[type]);  int[] attributesArray=ATTRIBUTES[type];  holder.mLikesMode=array.getInt(attributesArray[ATTRIBUTE_MODE],LIKES_MODE_DISABLED);  holder.mDrawable=array.getDrawable(attributesArray[ATTRIBUTE_DRAWABLE]);  holder.mDrawableWidth=array.getDimension(attributesArray[ATTRIBUTE_DRAWABLE_WIDTH],0);  holder.mDrawableHeight=array.getDimension(attributesArray[ATTRIBUTE_DRAWABLE_HEIGHT],0);  holder.mAnimationDuration=array.getInt(attributesArray[ATTRIBUTE_ANIMATION_DURATION],defAnimDuration);  holder.mProduceInterval=array.getInt(attributesArray[ATTRIBUTE_PRODUCE_INTERVAL],defProdInterval);  holder.mTintMode=array.getInt(attributesArray[ATTRIBUTE_TINT_MODE],TINT_MODE_NOT_SET);  int arrayId=array.getResourceId(attributesArray[ATTRIBUTE_TINT_COLORS],0);  if (arrayId != 0) {    try {      TypedArray colorsArray=array.getResources().obtainTypedArray(arrayId);      int[] colors=new int[colorsArray.length()];      for (int i=0; i < colors.length; i++) {        colors[i]=colorsArray.getColor(i,Color.TRANSPARENT);      }      holder.mTintColors=colors;      colorsArray.recycle();    } catch (    UnsupportedOperationException e) {    }  }  String drawableAnimator=array.getString(attributesArray[ATTRIBUTE_DRAWABLE_ANIMATOR]);  if (!TextUtils.isEmpty(drawableAnimator)) {    try {      Class<? extends DrawableAnimator.Factory> cls=(Class<? extends DrawableAnimator.Factory>)Class.forName(drawableAnimator);      holder.mDrawableAnimatorFactory=cls.newInstance();    } catch (    ClassNotFoundException e) {      e.printStackTrace();    }catch (    InstantiationException e) {      e.printStackTrace();    }catch (    IllegalAccessException e) {      e.printStackTrace();    }  }  if (holder.mDrawableAnimatorFactory == null) {    holder.mDrawableAnimatorFactory=new DrawableAnimator.DefaultFactory();  }  String positionAnimator=array.getString(attributesArray[ATTRIBUTE_POSITION_ANIMATOR]);  if (!TextUtils.isEmpty(positionAnimator)) {    try {      Class<? extends PositionAnimator.Factory> cls=(Class<? extends PositionAnimator.Factory>)Class.forName(positionAnimator);      holder.mPositionAnimatorFactory=cls.newInstance();    } catch (    ClassNotFoundException e) {      e.printStackTrace();    }catch (    InstantiationException e) {      e.printStackTrace();    }catch (    IllegalAccessException e) {      e.printStackTrace();    }  }  if (holder.mPositionAnimatorFactory == null) {    holder.mPositionAnimatorFactory=new PositionAnimator.DefaultFactory();  }  array.recycle();  return holder;}  }
class C{  private void initData(){  for (int i=0; i < 2; i++) {    List<String> url=new ArrayList<>();    url.add("http://g.hiphotos.baidu.com/image/pic/item/c75c10385343fbf25431e823b27eca8065388f95.jpg");    url.add("http://g.hiphotos.baidu.com/image/pic/item/960a304e251f95ca2f34115acd177f3e6609521d.jpg");    mLists.add(url);  }}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  private String patternTemplateToRegex(String filePatternTemplate){  return filePatternTemplate.replaceAll("\\.",Matcher.quoteReplacement("\\."));}  }
class C{  void methodCall(PurityGraph g,Local right,List args,Local left){  MultiMap mu=new HashMultiMap();  Iterator it=args.iterator();  int nb=0;  while (it.hasNext()) {    Value arg=(Value)it.next();    if (arg instanceof Local && ((Local)arg).getType() instanceof RefLikeType) {      mu.putAll(cacheNode(new PurityParamNode(nb)),locals.get(arg));    }    nb++;  }  if (right != null)   mu.putAll(PurityThisNode.node,locals.get(right));  boolean hasChanged=true;  while (hasChanged) {    hasChanged=false;    it=(new LinkedList(mu.keySet())).iterator();    while (it.hasNext()) {      PurityNode n1=(PurityNode)it.next();      Iterator it3=(new LinkedList(mu.get(n1))).iterator();      while (it3.hasNext()) {        PurityNode n3=(PurityNode)it3.next();        Iterator it12=g.edges.get(n1).iterator();        while (it12.hasNext()) {          PurityEdge e12=(PurityEdge)it12.next();          if (!e12.isInside()) {            Iterator it34=edges.get(n3).iterator();            while (it34.hasNext()) {              PurityEdge e34=(PurityEdge)it34.next();              if (e34.isInside() && e12.getField().equals(e34.getField()))               if (mu.put(e12.getTarget(),e34.getTarget()))               hasChanged=true;            }          }        }      }    }    it=g.edges.keySet().iterator();    while (it.hasNext()) {      PurityNode n1=(PurityNode)it.next();      Iterator it3=g.edges.keySet().iterator();      while (it3.hasNext()) {        PurityNode n3=(PurityNode)it3.next();        Set mu1=new HashSet(mu.get(n1));        Set mu3=new HashSet(mu.get(n3));        boolean cond=n1.equals(n3) || mu1.contains(n3) || mu3.contains(n1);        Iterator itt=mu1.iterator();        while (!cond && itt.hasNext()) {          cond=cond || mu3.contains(itt.next());        }        if (cond && (!n1.equals(n3) || n1.isLoad())) {          Iterator it12=g.edges.get(n1).iterator();          while (it12.hasNext()) {            PurityEdge e12=(PurityEdge)it12.next();            if (!e12.isInside()) {              Iterator it34=g.edges.get(n3).iterator();              while (it34.hasNext()) {                PurityEdge e34=(PurityEdge)it34.next();                if (e34.isInside()) {                  if (e12.getField().equals(e34.getField())) {                    PurityNode n2=e12.getTarget();                    PurityNode n4=e34.getTarget();                    if (!n4.isParam() && mu.put(n2,n4))                     hasChanged=true;                    if (mu.putAll(n2,mu.get(n4)))                     hasChanged=true;                  }                }              }            }          }        }      }    }  }  it=g.nodes.iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    if (!n.isParam()) {      mu.put(n,n);      nodes.add(n);    }  }  it=g.edges.keySet().iterator();  while (it.hasNext()) {    PurityNode n1=(PurityNode)it.next();    Iterator it12=g.edges.get(n1).iterator();    while (it12.hasNext()) {      PurityEdge e12=(PurityEdge)it12.next();      String f=e12.getField();      PurityNode n2=e12.getTarget();      Iterator itm1=mu.get(n1).iterator();      while (itm1.hasNext()) {        PurityNode mu1=(PurityNode)itm1.next();        if (e12.isInside()) {          Iterator itm2=mu.get(n2).iterator();          while (itm2.hasNext()) {            PurityNode mu2=(PurityNode)itm2.next();            PurityEdge edge=cacheEdge(new PurityEdge(mu1,f,mu2,true));            edges.put(mu1,edge);            backEdges.put(mu2,edge);          }        } else {          PurityEdge edge=cacheEdge(new PurityEdge(mu1,f,n2,false));          edges.put(mu1,edge);          backEdges.put(n2,edge);        }      }    }  }  if (left != null) {    localsRemove(left);    it=g.ret.iterator();    while (it.hasNext())     localsPutAll(left,mu.get(it.next()));  }  it=g.globEscape.iterator();  while (it.hasNext())   globEscape.addAll(mu.get(it.next()));  if (doCheck)   sanityCheck();  Set<PurityNode> escaping=getEscaping();  it=(new LinkedList(nodes)).iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    if (!escaping.contains(n))     if (n.isLoad())     removeNode(n); else {      Iterator itt=(new LinkedList(edges.get(n))).iterator();      while (itt.hasNext()) {        PurityEdge e=(PurityEdge)itt.next();        if (!e.isInside()) {          edges.remove(n,e);          backEdges.remove(e.getTarget(),e);        }      }    }  }  it=g.mutated.keySet().iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    Iterator itt=mu.get(n).iterator();    while (itt.hasNext()) {      PurityNode nn=(PurityNode)itt.next();      if (nodes.contains(nn) && !nn.isInside()) {        Iterator ittt=g.mutated.get(n).iterator();        while (ittt.hasNext()) {          String f=(String)ittt.next();          mutated.put(nn,f);        }      }    }  }  if (doCheck)   sanityCheck();}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  static void processSearchResults(final String logName,final LedgerDescriptor ld,final LogSegmentMetadata segment,final long transactionId,final ExecutorService executorService,final LedgerHandleCache handleCache,final List<LogRecordWithDLSN> searchResults,final int nWays,final Optional<LogRecordWithDLSN> prevFoundRecord,final Promise<Optional<LogRecordWithDLSN>> promise){  int found=-1;  for (int i=0; i < searchResults.size(); i++) {    LogRecordWithDLSN record=searchResults.get(i);    if (record.getTransactionId() >= transactionId) {      found=i;      break;    }  }  if (found == -1) {    promise.setValue(prevFoundRecord);    return;  }  LogRecordWithDLSN foundRecord=searchResults.get(found);  if (foundRecord.getDlsn().getSlotId() != 0L || found == 0 || foundRecord.getDlsn().getEntryId() == (searchResults.get(found - 1).getDlsn().getEntryId() + 1)) {    promise.setValue(Optional.of(foundRecord));    return;  }  List<Long> nextSearchBatch=getEntriesToSearch(transactionId,searchResults.get(found - 1),searchResults.get(found),nWays);  if (nextSearchBatch.isEmpty()) {    promise.setValue(prevFoundRecord);    return;  }  getLogRecordNotLessThanTxIdFromEntries(logName,ld,segment,transactionId,executorService,handleCache,nextSearchBatch,nWays,Optional.of(foundRecord),promise);}  }
class C{  public Builder logger(Logger val){  logger=val;  return this;}  }
class C{  private static final Object cast(final Object pValue,final Class<?> pTargetType) throws ClassCastException {  if (pValue == null || pTargetType == null) {    return null;  }  Class<?> inputType=pValue.getClass();  Object inputValue=pValue;  if (inputType.equals(pTargetType)) {    return pValue;  }  if (pTargetType.isInstance(pValue)) {    return pTargetType.cast(pValue);  }  if (String.class.isAssignableFrom(pTargetType)) {    return pValue.toString();  }  if (String.class.isAssignableFrom(inputType)) {    try {      final Double numberValue=Double.valueOf((String)pValue);      inputValue=numberValue;      inputType=Double.class;    } catch (    NumberFormatException e) {    }  }  if (Boolean.class.isAssignableFrom(pTargetType)) {    if (String.class.isAssignableFrom(inputType)) {      if (((String)inputValue).equalsIgnoreCase("true")) {        return Boolean.TRUE;      } else       if (((String)inputValue).equalsIgnoreCase("false")) {        return Boolean.FALSE;      } else {        throw new ClassCastException(new StringBuffer("Cannot convert String value \"").append(inputValue).append("\" to Boolean").toString());      }    } else     if (Number.class.isAssignableFrom(inputType)) {      double doubleVal=((Number)inputValue).doubleValue();      if (doubleVal == 1.0d) {        return Boolean.TRUE;      } else       if (doubleVal == 0.0d) {        return Boolean.FALSE;      } else {        throw new ClassCastException(new StringBuffer("Cannot convert numeric value ").append(inputValue).append(" to Boolean").toString());      }    } else {      throw new ClassCastException(new StringBuffer("Cannot convert value of type ").append(inputType.getName()).append(" to ").append(pTargetType.getName()).append(".").toString());    }  } else   if (Integer.class.isAssignableFrom(pTargetType)) {    if (Number.class.isAssignableFrom(inputType)) {      long x=Math.round(((Number)inputValue).doubleValue());      if (x > Integer.MAX_VALUE || x < Integer.MIN_VALUE) {        throw new ClassCastException(new StringBuffer("Numeric value ").append(x).append(" to big to be converted to Integer.").toString());      }      return new Integer((int)x);    } else     if (String.class.isAssignableFrom(inputType)) {      if (((String)inputValue).trim().equalsIgnoreCase("false")) {        return Integer.valueOf(0);      } else       if (((String)inputValue).trim().equalsIgnoreCase("true")) {        return Integer.valueOf(1);      } else {        try {          return Integer.valueOf((String)inputValue);        } catch (        Exception e) {          throw new ClassCastException(new StringBuffer("Cannot convert String value \"").append(inputValue).append("\" to Integer.").toString());        }      }    } else     if (Boolean.class.isAssignableFrom(inputType)) {      if (inputValue.equals(Boolean.TRUE)) {        return new Integer(1);      } else {        return new Integer(0);      }    } else {      throw new ClassCastException(new StringBuffer("Cannot convert value of type ").append(inputType.getName()).append(" to ").append(pTargetType.getName()).append(".").toString());    }  } else   if (Short.class.isAssignableFrom(pTargetType)) {    if (Number.class.isAssignableFrom(inputType)) {      long x=Math.round(((Number)inputValue).doubleValue());      if (x > Short.MAX_VALUE || x < Short.MIN_VALUE) {        throw new ClassCastException(new StringBuffer("Numeric value ").append(x).append(" to big to be converted to Short.").toString());      }      return new Short((short)x);    } else     if (String.class.isAssignableFrom(inputType)) {      if (((String)inputValue).trim().equalsIgnoreCase("false")) {        return Short.valueOf((short)0);      } else       if (((String)inputValue).trim().equalsIgnoreCase("true")) {        return Short.valueOf((short)1);      } else {        try {          return Short.valueOf((String)inputValue);        } catch (        Exception e) {          throw new ClassCastException(new StringBuffer("Cannot convert String value \"").append(inputValue).append("\" to Short.").toString());        }      }    } else     if (Boolean.class.isAssignableFrom(inputType)) {      if (inputValue.equals(Boolean.TRUE)) {        return new Short((short)1);      } else {        return new Short((short)0);      }    } else {      throw new ClassCastException(new StringBuffer("Cannot convert value of type ").append(inputType.getName()).append(" to ").append(pTargetType.getName()).append(".").toString());    }  } else   if (Byte.class.isAssignableFrom(pTargetType)) {    if (Number.class.isAssignableFrom(inputType)) {      long x=Math.round(((Number)inputValue).doubleValue());      if (x > Byte.MAX_VALUE || x < Byte.MIN_VALUE) {        throw new ClassCastException(new StringBuffer("Numeric value ").append(x).append(" to big to be converted to Byte.").toString());      }      return new Byte((byte)x);    } else     if (String.class.isAssignableFrom(inputType)) {      if (((String)inputValue).trim().equalsIgnoreCase("false")) {        return Byte.valueOf((byte)0);      } else       if (((String)inputValue).trim().equalsIgnoreCase("true")) {        return Byte.valueOf((byte)1);      } else {        try {          return Byte.valueOf((String)inputValue);        } catch (        Exception e) {          throw new ClassCastException(new StringBuffer("Cannot convert String value \"").append(inputValue).append("\" to Byte.").toString());        }      }    } else     if (Boolean.class.isAssignableFrom(inputType)) {      if (inputValue.equals(Boolean.TRUE)) {        return new Byte((byte)1);      } else {        return new Byte((byte)0);      }    } else {      throw new ClassCastException(new StringBuffer("Cannot convert value of type ").append(inputType.getName()).append(" to ").append(pTargetType.getName()).append(".").toString());    }  } else   if (Long.class.isAssignableFrom(pTargetType)) {    if (Number.class.isAssignableFrom(inputType)) {      return Long.valueOf(Math.round(((Number)inputValue).doubleValue()));    } else     if (String.class.isAssignableFrom(inputType)) {      if (((String)inputValue).trim().equalsIgnoreCase("false")) {        return Long.valueOf(0l);      } else       if (((String)inputValue).trim().equalsIgnoreCase("true")) {        return Long.valueOf(1l);      } else {        try {          return Long.valueOf((String)inputValue);        } catch (        Exception e) {          throw new ClassCastException(new StringBuffer("Cannot convert String value \"").append(inputValue).append("\" to Long.").toString());        }      }    } else     if (Boolean.class.isAssignableFrom(inputType)) {      if (inputValue.equals(Boolean.TRUE)) {        return Long.valueOf(1l);      } else {        return Long.valueOf(0l);      }    } else {      throw new ClassCastException(new StringBuffer("Cannot convert value of type ").append(inputType.getName()).append(" to ").append(pTargetType.getName()).append(".").toString());    }  } else   if (Float.class.isAssignableFrom(pTargetType)) {    if (Number.class.isAssignableFrom(inputType)) {      double x=((Number)inputValue).doubleValue();      if (x > Float.MAX_VALUE || x < -Float.MAX_VALUE) {        throw new ClassCastException(new StringBuffer("Numeric value ").append(x).append(" to big to be converted to Float.").toString());      } else {        return new Float(x);      }    } else     if (String.class.isAssignableFrom(inputType)) {      if (((String)inputValue).trim().equalsIgnoreCase("false")) {        return Float.valueOf(0f);      } else       if (((String)inputValue).trim().equalsIgnoreCase("true")) {        return Float.valueOf(1f);      } else {        try {          return Float.valueOf((String)inputValue);        } catch (        Exception e) {          throw new ClassCastException(new StringBuffer("Cannot convert String value \"").append(inputValue).append("\" to Float.").toString());        }      }    } else     if (Boolean.class.isAssignableFrom(inputType)) {      if (inputValue.equals(Boolean.TRUE)) {        return new Float(1);      } else {        return new Float(0);      }    } else {      throw new ClassCastException(new StringBuffer("Cannot convert value of type ").append(inputType.getName()).append(" to ").append(pTargetType.getName()).append(".").toString());    }  } else   if (boolean.class.isAssignableFrom(pTargetType)) {    try {      final boolean result=Boolean.valueOf(inputValue.toString()).booleanValue();      if (pTargetType == boolean.class) {        return result;      } else {        return pTargetType.cast(result);      }    } catch (    Exception e) {      throw new ClassCastException(String.format("Failed to convert '%s' of type '%s' into a '%s' (%s)",inputValue,inputValue.getClass().getName(),pTargetType.getName(),e.getMessage()));    }  } else   if (Double.class.isAssignableFrom(pTargetType) && (Number.class.isAssignableFrom(inputType) || String.class.isAssignableFrom(inputType) || Boolean.class.isAssignableFrom(inputType))) {    if (Number.class.isAssignableFrom(inputType)) {      return new Double(((Number)inputValue).doubleValue());    } else     if (String.class.isAssignableFrom(inputType)) {      if (((String)inputValue).trim().equalsIgnoreCase("false")) {        return Double.valueOf(0d);      } else       if (((String)inputValue).trim().equalsIgnoreCase("true")) {        return Double.valueOf(1d);      } else {        try {          return Double.valueOf((String)inputValue);        } catch (        Exception e) {          throw new ClassCastException(new StringBuffer("Cannot convert String value \"").append(inputValue).append("\" to Double.").toString());        }      }    } else     if (Boolean.class.isAssignableFrom(inputType)) {      if (inputValue.equals(Boolean.TRUE)) {        return new Double(1);      } else {        return new Double(0);      }    } else {      throw new ClassCastException(new StringBuffer("Cannot convert value of type ").append(inputType.getName()).append(" to ").append(pTargetType.getName()).append(".").toString());    }  } else   if (pTargetType.isEnum() && String.class.isAssignableFrom(inputType)) {    try {      Class<? extends Enum> enumClass=(Class<? extends Enum>)pTargetType;      return Enum.valueOf(enumClass,(String)inputValue);    } catch (    Exception e) {    }    final String enumName=String.class.cast(inputValue);    final Object constants[]=pTargetType.getEnumConstants();    for (    final Object constant : constants) {      if (constant.toString().compareToIgnoreCase(enumName) == 0) {        return constant;      }    }    throw new ClassCastException(String.format("Unable to convert the string '%s' into an enum of type '%s'",inputValue.toString(),pTargetType.getName()));  } else   if (pTargetType.isPrimitive() && (Number.class.isAssignableFrom(inputType) || inputType == byte.class || inputType == short.class || inputType == int.class || inputType == long.class || inputType == float.class || inputType == double.class)) {    Number numberValue;    if (inputType.isPrimitive()) {      if (byte.class == inputType) {        numberValue=Byte.class.cast(inputValue);      } else       if (short.class == inputType) {        numberValue=Short.class.cast(inputValue);      } else       if (int.class == inputType) {        numberValue=Integer.class.cast(inputValue);      } else       if (long.class == inputType) {        numberValue=Long.class.cast(inputValue);      } else       if (float.class == inputType) {        numberValue=Float.class.cast(inputValue);      } else       if (double.class == inputType) {        numberValue=Double.class.cast(inputValue);      } else {        throw new ClassCastException(String.format("Failed to convert a '%s' to a '%s'.",inputType.getSimpleName(),pTargetType.getSimpleName()));      }    } else {      numberValue=Number.class.cast(inputValue);    }    if (double.class == pTargetType) {      return numberValue.doubleValue();    } else     if (float.class == pTargetType) {      return numberValue.floatValue();    } else     if (int.class == pTargetType) {      return numberValue.intValue();    } else     if (long.class == pTargetType) {      return numberValue.longValue();    } else     if (short.class == pTargetType) {      return numberValue.shortValue();    } else     if (byte.class == pTargetType) {      return numberValue.byteValue();    } else {      throw new ClassCastException(String.format("Failed to convert a '%s' to a '%s'.",inputType.getSimpleName(),pTargetType.getSimpleName()));    }  } else   if (inputType.isArray() && pTargetType.isArray()) {    int inputArrayLength=Array.getLength(inputValue);    final Class<?> elementTargetType=pTargetType.getComponentType();    final Object result=Array.newInstance(elementTargetType,inputArrayLength);    for (int i=0; i < inputArrayLength; i++) {      Array.set(result,i,cast(Array.get(inputValue,i),elementTargetType.getName()));    }    return result;  } else   if (inputType == java.sql.Timestamp.class) {    return cast(((java.sql.Timestamp)inputValue).getTime(),pTargetType);  } else   if (pTargetType == java.sql.Timestamp.class) {    if (inputValue instanceof String) {      try {        return DateFormat.getDateInstance().format(inputValue);      } catch (      Exception e) {      }    }    try {      final Long milliseconds=castToType(inputValue,Long.class);      return new java.sql.Timestamp(milliseconds);    } catch (    Exception e) {    }    throw new ClassCastException(String.format("Could not convert '%s' into a '%s'",inputValue.toString(),java.sql.Timestamp.class.getName()));  } else   if (inputType == String.class && pTargetType == Color.class) {    String str=(String)inputValue;    try {      String hexStr=str;      if (hexStr.charAt(0) == '#') {        hexStr=hexStr.substring(1);      }      return new Color(Integer.parseInt(hexStr,16));    } catch (    Exception e) {    }    try {      Field field=Color.class.getField(str);      return field.get(null);    } catch (    Exception e) {    }    throw new ClassCastException(String.format("Could not convert '%s' into a Color",str));  } else {    throw new ClassCastException(new StringBuffer("Cannot convert value of type ").append(inputType.getName()).append(" to ").append(pTargetType.getName()).append(".").toString());  }}  }
class C{  public static void resetSingleUse(Context context,String showcaseID){  PrefsManager.resetShowcase(context,showcaseID);}  }
class C{  public static Having buildHaving(LogicalMetric metric,ApiHaving having){  LOG.trace("Building having using metric: {} and API Having: {}",metric,having);  HavingOperation operation=having.getOperation();  List<Having> havings=having.getValues().stream().map(null).collect(Collectors.toList());  Having newHaving=havings.size() == 1 ? havings.get(0) : new OrHaving(havings);  return operation.isNegated() ? new NotHaving(newHaving) : newHaving;}  }
class C{  public static boolean deleteFile(File deleteFile){  if (deleteFile != null) {    if (!deleteFile.exists()) {      return true;    }    if (deleteFile.isDirectory()) {      File[] files=deleteFile.listFiles();      if (null != files) {        for (        File file : files) {          deleteFile(file);        }      }      return deleteFile.delete();    } else {      return deleteFile.delete();    }  }  return false;}  }
class C{  public ZWaveSceneActivationCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  protected void onAttachView(@NonNull V view){  if (mCalled) {    throw new IllegalAccessError("don't call #onAttachView(TiView) directly, call #attachView(TiView)");  }  mCalled=true;}  }
class C{  public boolean hasOption(String option){  return commandLine.hasOption(option);}  }
class C{  public static void writeObjectToFile(String path,Object toWrite,JavaSparkContext sc) throws IOException {  writeObjectToFile(path,toWrite,sc.sc());}  }
class C{  public static void moveToDirectory(File src,File destDir,boolean createDestDir) throws IOException {  if (src == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination must not be null");  }  if (!src.exists()) {    throw new FileNotFoundException("Source '" + src + "' does not exist");  }  if (src.isDirectory()) {    moveDirectoryToDirectory(src,destDir,createDestDir);  } else {    moveFileToDirectory(src,destDir,createDestDir);  }}  }
class C{  public static boolean equalsOnSystem(String filename1,String filename2){  return equals(filename1,filename2,false,IOCase.SYSTEM);}  }
class C{  public RequestHandler(PokemonGo api,OkHttpClient client){  this.api=api;  this.client=client;  apiEndpoint=ApiSettings.API_ENDPOINT;  asyncHttpThread=new Thread(this,"Async HTTP Thread");  asyncHttpThread.setDaemon(true);  asyncHttpThread.start();}  }
class C{  public DividerItemDecoration(Context context){  final TypedArray styledAttributes=context.obtainStyledAttributes(ATTRS);  mDivider=styledAttributes.getDrawable(0);  styledAttributes.recycle();}  }
class C{  @Override public void startCDATA(Augmentations augs) throws XNIException {}  }
class C{  public Builder considerExifParams(boolean considerExifParams){  this.considerExifParams=considerExifParams;  return this;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"httpFile\" ("+ "\"KEY\" INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "\"TYPE\" INTEGER,"+ "\"STATE\" INTEGER,"+ "\"URL\" TEXT,"+ "\"FILE_NAME\" TEXT,"+ "\"FILE_SAVE_PATH\" TEXT,"+ "\"PROGRESS\" INTEGER,"+ "\"FILE_LENGTH\" INTEGER);");  db.execSQL("CREATE INDEX " + constraint + "IDX_httpFile_KEY ON httpFile"+ " (\"KEY\");");}  }
class C{  @Deployment public void testDecisionFunctionality(){  Map<String,Object> variables=new HashMap<String,Object>();  variables.put("input",1);  ProcessInstance pi=runtimeService.startProcessInstanceByKey("exclusiveGateway",variables);  Task task=taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();  assertEquals("Send e-mail for more information",task.getName());  variables.put("input",2);  pi=runtimeService.startProcessInstanceByKey("exclusiveGateway",variables);  task=taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();  assertEquals("Check account balance",task.getName());  variables.put("input",3);  pi=runtimeService.startProcessInstanceByKey("exclusiveGateway",variables);  task=taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();  assertEquals("Call customer",task.getName());  variables.put("input",4);  try {    runtimeService.startProcessInstanceByKey("exclusiveGateway",variables);    fail();  } catch (  ActivitiException e) {  }}  }
class C{  public void addObservations(final Histogram histogram){  if (upperBounds.length != histogram.upperBounds.length) {    throw new IllegalArgumentException("Histograms must have matching intervals");  }  for (int i=0, size=upperBounds.length; i < size; i++) {    if (upperBounds[i] != histogram.upperBounds[i]) {      throw new IllegalArgumentException("Histograms must have matching intervals");    }  }  for (int i=0, size=counts.length; i < size; i++) {    counts[i]+=histogram.counts[i];  }  trackRange(histogram.minValue);  trackRange(histogram.maxValue);}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public void drawChartTransposed(Graphics2D gc){  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  int numberOfPanels=getChartData().getNumberOfClasses();  int y0=getHeight() - bottomMargin;  int y1=topMargin;  int rows=Math.max(1,(int)Math.sqrt(numberOfPanels));  int cols=Math.max(1,(int)Math.ceil((double)numberOfPanels / rows));  panelSize.setSize(getWidth() / cols,(y0 - y1) / rows - 14);  Font labelFont=getFont("Default");  boolean isPDFGraphics=(gc instanceof PDFGraphics);  AffineTransform transform=gc.getTransform();  int panel=0;  for (  String className : getChartData().getClassNames()) {    int h=(panel % cols) * panelSize.width;    int v;    if (!isPDFGraphics) {      v=(panel / cols) * (panelSize.height + 14) + y1;    } else {      v=(rows - (panel / cols)) * (panelSize.height + 14) - y0;    }    final IMultiChartDrawable chartDrawer=label2drawer.get(className);    if (chartDrawer == null)     continue;    chartDrawer.setMargins(0,0,0,0);    chartDrawer.setTranspose(false);    chartDrawer.setScalingType(getScalingType());    chartDrawer.setShowValues(isShowValues());    chartDrawer.getChartData().setSeriesLabel(chartData.getSeriesLabel());    chartDrawer.getChartData().setClassesLabel(chartData.getClassesLabel());    chartDrawer.getChartData().setCountsLabel(chartData.getCountsLabel());    chartDrawer.getChartData().setDataSetName(getChartData().getDataSetName());    chartDrawer.getChartData().getChartSelection().clearSelectionClasses();    chartDrawer.getChartData().getChartSelection().setSelectedClass(getChartData().getChartSelection().getSelectedClasses(),true);    chartDrawer.getChartData().getChartSelection().clearSelectionSeries();    chartDrawer.getChartData().getChartSelection().setSelectedSeries(getChartData().getChartSelection().getSelectedSeries(),true);    chartDrawer.getChartData().getChartSelection().setSelectedBasedOnSeries(getChartData().getChartSelection().isSelectedBasedOnSeries());    chartDrawer.setWidth(panelSize.width);    chartDrawer.setHeight(panelSize.height);    chartDrawer.setValues(baseDrawer);    chartDrawer.updateView();    AffineTransform newTransform=(AffineTransform)transform.clone();    newTransform.translate(h,v);    gc.setTransform(newTransform);    Rectangle saveClip=gc.getClipBounds();    Rectangle newClip=new Rectangle(0,0,panelSize.width,panelSize.height + 14);    if (saveClip != null) {      newClip=newClip.intersection(saveClip);      gc.setClip(newClip);    }    chartDrawer.drawChartTransposed(gc);    if (numberOfPanels > 1) {      gc.setColor(Color.DARK_GRAY);      gc.setFont(labelFont);      String label=className;      Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();      while (labelSize.width + 2 > panelSize.width && label.length() >= 5) {        label=className.substring(0,label.length() - 4) + "...";        labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();      }      if (sgc != null)       sgc.setCurrentItem(new String[]{null,className});      gc.drawString(label,(panelSize.width - labelSize.width) / 2,panelSize.height + 12);      if (sgc != null)       sgc.clearCurrentItem();    }    if (saveClip != null)     gc.setClip(saveClip);    if (numberOfPanels > 1) {      gc.setColor(Color.LIGHT_GRAY);      gc.drawRect(0,0,panelSize.width,panelSize.height + 14);    }    if (getChartData().getChartSelection().isSelected(null,className)) {      gc.setStroke(HEAVY_STROKE);      gc.setColor(ProgramProperties.SELECTION_COLOR);      gc.drawRect(0,0,panelSize.width,panelSize.height + 14);      gc.setStroke(NORMAL_STROKE);    }    if (sgc != null) {      sgc.setCurrentItem(new String[]{null,className});      gc.fillRect(0,0,panelSize.width,panelSize.height + 14);      sgc.clearCurrentItem();    }    panel++;  }  gc.setTransform(transform);}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  @Override public boolean mayIntersect(S2Cell cell){  return intersects(cell.getRectBound());}  }
class C{  private int splitEdgeConnections(final List<ConnectableSegment> segments){  int connected=0;  for (  final ConnectableSegment segment : segments) {    if (segment.getNext() == null) {      final Hyperplane<Euclidean2D> hyperplane=segment.getNode().getCut().getHyperplane();      final BSPTree<Euclidean2D> end=segment.getEndNode();      for (      final ConnectableSegment candidateNext : segments) {        if (candidateNext.getPrevious() == null && candidateNext.getNode().getCut().getHyperplane() == hyperplane && candidateNext.getStartNode() == end) {          segment.setNext(candidateNext);          candidateNext.setPrevious(segment);          ++connected;          break;        }      }    }  }  return connected;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_DISABLED_FOR(String value0m){  return new SM_SYSTEM_MESSAGE(1300643,value0m);}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof AuthenticationPermission)) {    return false;  }  AuthenticationPermission ap=(AuthenticationPermission)obj;  return (mask == ap.mask && same(me,ap.me) && (mask == LISTEN || same(peer,ap.peer)));}  }
class C{  public ConfigurationException(String s,Throwable t){  super(s,t);}  }
class C{  private void digitsDashToWords(WordRelation wordRelation,Item tokenItem,String tokenVal){  int tokenLength=tokenVal.length();  int a=0;  for (int p=0; p <= tokenLength; p++) {    if (p == tokenLength || tokenVal.charAt(p) == '-') {      String aaa=tokenVal.substring(a,p);      NumberExpander.expandDigits(aaa,wordRelation,tokenItem);      wordRelation.addBreak();      a=p + 1;    }  }}  }
class C{  public XIncludeAwareParserConfiguration(SymbolTable symbolTable){  this(symbolTable,null,null);}  }
class C{  @Override public boolean hasRaster(Symbolizer symbolizer){  return false;}  }
class C{  public NewsfeedGetSuggestedSourcesQuery(VkApiClient client,UserActor actor){  super(client,"newsfeed.getSuggestedSources",GetSuggestedSourcesResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  protected void initQuery(QueryModel queryModel) throws QueryExecutionException {  StandardLogService.setThreadName(StandardLogService.getPartitionID(queryModel.getAbsoluteTableIdentifier().getCarbonTableIdentifier().getTableName()),queryModel.getQueryId());  LOGGER.info("Query will be executed on table: " + queryModel.getAbsoluteTableIdentifier().getCarbonTableIdentifier().getTableName());  queryProperties.executorService=Executors.newFixedThreadPool(1);  queryProperties.queryStatisticsRecorder=CarbonTimeStatisticsFactory.createExecutorRecorder(queryModel.getQueryId());  queryModel.setStatisticsRecorder(queryProperties.queryStatisticsRecorder);  QueryUtil.resolveQueryModel(queryModel);  QueryStatistic queryStatistic=new QueryStatistic();  Collections.sort(queryModel.getTableBlockInfos());  BlockIndexStore blockLoaderInstance=BlockIndexStore.getInstance();  blockLoaderInstance.removeTableBlocks(queryModel.getInvalidSegmentIds(),queryModel.getAbsoluteTableIdentifier());  try {    queryProperties.dataBlocks=blockLoaderInstance.loadAndGetBlocks(queryModel.getTableBlockInfos(),queryModel.getAbsoluteTableIdentifier());  } catch (  IndexBuilderException e) {    throw new QueryExecutionException(e);  }  queryStatistic.addStatistics(QueryStatisticsConstants.LOAD_BLOCKS_EXECUTOR,System.currentTimeMillis());  queryProperties.queryStatisticsRecorder.recordStatistics(queryStatistic);  queryProperties.keyStructureInfo=getKeyStructureInfo(queryModel,queryProperties.dataBlocks.get(queryProperties.dataBlocks.size() - 1).getSegmentProperties().getDimensionKeyGenerator());  int aggTypeCount=queryModel.getQueryMeasures().size();  int currentIndex=0;  String[] aggTypes=new String[aggTypeCount];  DataType[] dataTypes=new DataType[aggTypeCount];  for (  QueryMeasure carbonMeasure : queryModel.getQueryMeasures()) {    aggTypes[currentIndex]=carbonMeasure.getAggregateFunction();    dataTypes[currentIndex]=carbonMeasure.getMeasure().getDataType();    currentIndex++;  }  queryProperties.measureDataTypes=dataTypes;  queryProperties.aggExpressionStartIndex=queryModel.getQueryMeasures().size();  queryProperties.measureStartIndex=aggTypes.length - queryModel.getQueryMeasures().size();  queryProperties.complexFilterDimension=QueryUtil.getAllFilterDimensions(queryModel.getFilterExpressionResolverTree());  queryStatistic=new QueryStatistic();  queryProperties.columnToDictionayMapping=QueryUtil.getDimensionDictionaryDetail(queryModel.getQueryDimension(),queryProperties.complexFilterDimension,queryModel.getAbsoluteTableIdentifier());  queryStatistic.addStatistics(QueryStatisticsConstants.LOAD_DICTIONARY,System.currentTimeMillis());  queryProperties.queryStatisticsRecorder.recordStatistics(queryStatistic);  queryModel.setColumnToDictionaryMapping(queryProperties.columnToDictionayMapping);  queryProperties.sortDimIndexes=new byte[queryModel.getQueryDimension().size()];}  }
class C{  private StringBuilder appendIfNotNull(StringBuilder source,String addStr,String delimiter){  if (addStr != null) {    if (addStr.length() == 0) {      delimiter="";    }    return source.append(addStr).append(delimiter);  }  return source;}  }
class C{  static <T>void buildError(Subscriber<T> subscriber,DatabaseError error){switch (error.getCode()) {case DatabaseError.INVALID_TOKEN:    subscriber.onError(new FirebaseInvalidTokenException(error.getMessage()));  break;case DatabaseError.EXPIRED_TOKEN:subscriber.onError(new FirebaseExpiredTokenException(error.getMessage()));break;case DatabaseError.NETWORK_ERROR:subscriber.onError(new FirebaseNetworkErrorException(error.getMessage()));break;case DatabaseError.PERMISSION_DENIED:subscriber.onError(new FirebasePermissionDeniedException(error.getMessage()));break;case DatabaseError.OPERATION_FAILED:subscriber.onError(new FirebaseOperationFailedException(error.getMessage()));break;default :subscriber.onError(new FirebaseGeneralException(error.getMessage()));break;}}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_IMMUNED_MAGIC_PARTY(String skilltarget,String skillcaster){  return new SM_SYSTEM_MESSAGE(1220223,skilltarget,skillcaster);}  }
class C{  private void keepAliveExecutor(){  long now=System.currentTimeMillis();  List<Long> toSendIds=new ArrayList<>();  for (  Lease l : this.keepAlives.values()) {    if (now > l.getNextKeepAlive()) {      toSendIds.add(l.getLeaseID());    }  }  for (  Long id : toSendIds) {    this.keepAliveRequestStreamObserver.onNext(newKeepAliveRequest(id));  }}  }
class C{  @Override protected void thresholdReached() throws IOException {  if (prefix != null) {    outputFile=File.createTempFile(prefix,suffix,directory);  }  FileOutputStream fos=new FileOutputStream(outputFile);  memoryOutputStream.writeTo(fos);  currentOutputStream=fos;  memoryOutputStream=null;}  }
class C{  @Override public void onConfigurationChanged(Configuration newConfig){  super.onConfigurationChanged(newConfig);  orientationBasedUI(newConfig.orientation);}  }
class C{  public String toString(){  return format;}  }
class C{  public static void w(String msg,Exception e){  if (LOG_ENABLE) {    Log.w(TAG,buildMsg(msg),e);  }}  }
class C{  public CholeskyDecomposition(Matrix Arg){  double[][] A=Arg.getArray();  n=Arg.getRowDimension();  L=new double[n][n];  isspd=(Arg.getColumnDimension() == n);  for (int j=0; j < n; j++) {    double[] Lrowj=L[j];    double d=0.0;    for (int k=0; k < j; k++) {      double[] Lrowk=L[k];      double s=0.0;      for (int i=0; i < k; i++) {        s+=Lrowk[i] * Lrowj[i];      }      Lrowj[k]=s=(A[j][k] - s) / L[k][k];      d=d + s * s;      isspd=isspd & (A[k][j] == A[j][k]);    }    d=A[j][j] - d;    isspd=isspd & (d > 0.0);    L[j][j]=Math.sqrt(Math.max(d,0.0));    for (int k=j + 1; k < n; k++) {      L[j][k]=0.0;    }  }}  }
class C{  public boolean isRowHeaderSelected(){  final ObservableList selectedCells=spreadsheetView.getSelectionModel().getSelectedCells();  try {    for (    Object obj : selectedCells) {      final int col=((TablePosition)obj).getColumn();      if (col == 0)       return true;    }  } catch (  Exception ex) {    if (Platform.isFxApplicationThread())     Basic.caught(ex);  }  return false;}  }
class C{  public boolean intersectWhere(Vector3f v0,Vector3f v1,Vector3f v2,Vector3f loc){  return intersects(v0,v1,v2,loc,false,false);}  }
class C{  private void initModel(Activity a,int photosType){  this.photosModel=new PhotosObject(a,photosType);  this.loadModel=new LoadObject(LoadObject.LOADING_STATE);  this.scrollModel=new ScrollObject();}  }
class C{  public static boolean contentEquals(InputStream input1,InputStream input2) throws IOException {  if (!(input1 instanceof BufferedInputStream)) {    input1=new BufferedInputStream(input1);  }  if (!(input2 instanceof BufferedInputStream)) {    input2=new BufferedInputStream(input2);  }  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  private boolean quietSleep(long ms){  try {    Thread.sleep(ms);  } catch (  InterruptedException e) {    return true;  }  return false;}  }
class C{  public void addGp(int additionalGp){  dailyGP+=additionalGp;  if (dailyGP < 0) {    dailyGP=0;  }  weeklyGP+=additionalGp;  if (weeklyGP < 0) {    weeklyGP=0;  }  int GpcappedCount=0;  if (CustomConfig.ENABLE_GP_CAP) {    GpcappedCount=(long)(currentGp + additionalGp) > CustomConfig.GP_CAP_VALUE ? (int)(CustomConfig.GP_CAP_VALUE - currentGp) : additionalGp;  } else {    GpcappedCount=additionalGp;  }  currentGp+=GpcappedCount;  if (currentGp < 0) {    currentGp=0;  }  AbyssRankEnum newRank=AbyssRankEnum.getRankForGp(currentGp);  if (newRank.getId() <= 18 && newRank.getId() > 9) {    setRank(newRank);  }  setPersistentState(PersistentState.UPDATE_REQUIRED);}  }
class C{  @SuppressWarnings("unchecked") protected void registerDefaultComponentAnnotations(final ContextInitializer initializer){  initializer.scanFor(ViewActionContainer.class,ViewDialog.class,View.class,StageViewport.class,Property.class);}  }
class C{  public static int sp2px(Context context,float spValue){  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(spValue * scale + 0.5f);}  }
class C{  DatabaseClusterUnit(int type,int phone,int start,int end,int prev,int next){  this.type=type;  this.phone=phone;  this.start=start;  this.end=end;  this.prev=prev;  this.next=next;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public AssignMulExpr fullCopy(){  AssignMulExpr tree=(AssignMulExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public ShortTermSpectrumAnalyser(DoubleDataSource signal,int fftSize,Window window,int frameShift,int samplingRate){  super(signal,window,frameShift,samplingRate);  if (window.getLength() > fftSize)   throw new IllegalArgumentException("Window must not be longer than fftSize");  if (!MathUtils.isPowerOfTwo(fftSize))   throw new IllegalArgumentException("fftSize must be a power of two!");  real=new double[fftSize];  assert real.length >= frame.length;}  }
class C{  protected void clean(){  if (dirty) {    LU=null;    HQR=null;    CHOL=null;    dirty=false;  }}  }
class C{  public EventHandlerGroup<T> and(final EventProcessor... processors){  Sequence[] combinedSequences=new Sequence[sequences.length + processors.length];  for (int i=0; i < processors.length; i++) {    consumerRepository.add(processors[i]);    combinedSequences[i]=processors[i].getSequence();  }  System.arraycopy(sequences,0,combinedSequences,processors.length,sequences.length);  return new EventHandlerGroup<T>(disruptor,consumerRepository,combinedSequences);}  }
class C{  private void populateOptionGroup(UpdateSymbolInterface parent,GroupConfig optionGroupConfig){  List<FieldConfigBase> fieldList=optionGroupConfig.getFieldConfigList();  fieldConfigManager.addGroup(optionGroupConfig);  for (  FieldConfigBase field : fieldList) {    addFieldConfig(field);    fieldConfigManager.addField(field);  }  registerForSymbolUpdates(fieldList,parent);  for (  GroupConfigInterface subOptionGroupConfig : optionGroupConfig.getSubGroupList()) {    if (subOptionGroupConfig instanceof GroupConfig) {      populateOptionGroup(parent,(GroupConfig)subOptionGroupConfig);    } else     if (subOptionGroupConfig instanceof MultiOptionGroup) {      MultiOptionGroup multiOption=(MultiOptionGroup)subOptionGroupConfig;      fieldConfigManager.addMultiOptionGroup(multiOption);      for (      OptionGroup optionGroup : multiOption.getGroupList()) {        for (        GroupConfigInterface subMultiOptionGroupConfig : optionGroup.getGroupList()) {          if (subMultiOptionGroupConfig instanceof GroupConfig) {            populateOptionGroup(parent,(GroupConfig)subMultiOptionGroupConfig);          }        }      }    }  }}  }
class C{  @Override protected void synchronizeData(){  needsSyncData(false);  DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)this.ownerDocument();  target=ownerDocument.getNodeName(fNodeIndex);  data=ownerDocument.getNodeValueString(fNodeIndex);}  }
class C{  @NotNull private static String toIniString(@NotNull File value){  return value.getPath();}  }
class C{  @Override public void onError(AirMapException e){  onDisconnect(false);}  }
class C{  public Sigmoid(){  this(0,1);}  }
class C{  public MulticastAnnouncement(long sequenceNumber,String host,int port,String[] groups,ServiceID serviceID){  groups=(groups != null) ? (String[])groups.clone() : new String[0];  if (host == null || serviceID == null || Arrays.asList(groups).contains(null)) {    throw new NullPointerException();  }  if (port < 0 || port > 0xFFFF) {    throw new IllegalArgumentException("port out of range: " + port);  }  this.sequenceNumber=sequenceNumber;  this.host=host;  this.port=port;  this.groups=groups;  this.serviceID=serviceID;}  }
class C{  protected AuthSignupQuery clientSecret(String value){  return unsafeParam("client_secret",value);}  }
class C{  public boolean tryEvict(EvictableServerEntry entry){  EvictableEntryCacheInfo pev=(EvictableEntryCacheInfo)entry;  IEntryHolder eh=pev.getEntryHolder();  if (pev.isPinned())   return false;  if (requiresEvictionReplicationProtection()) {    Object lockObject=getEvictionReplicationsMarkersRepository().getLockObject(eh.getUID());    try {synchronized (lockObject) {        if (!getEvictionReplicationsMarkersRepository().isEntryEvictable(eh.getUID(),true))         return false;        return grantEvictionPermissionAndRemove_Impl(pev);      }    }  finally {      getEvictionReplicationsMarkersRepository().releaseLockObject(lockObject);    }  } else   return grantEvictionPermissionAndRemove_Impl(pev);}  }
class C{  public static boolean refreshDeviceCache(BluetoothGatt gatt){  try {    final Method refresh=BluetoothGatt.class.getMethod("refresh");    if (refresh != null) {      final boolean success=(Boolean)refresh.invoke(gatt);      Log.i(TAG,"Refreshing result: " + success);      return success;    }  } catch (  Exception e) {    Log.e(TAG,"An exception occured while refreshing device",e);  }  return false;}  }
class C{  public static void clearCache(){  colorMap.clear();}  }
class C{  public LogBlock withUuid(String uuid){  LogBlock newLogBlock=new LogBlock(uuid);  body.entrySet().forEach(null);  return newLogBlock;}  }
class C{  @Override public void updateSymbol(PolygonSymbolizer polygonSymbolizer){}  }
class C{  public HTTPInputSource(XMLResourceIdentifier resourceIdentifier){  super(resourceIdentifier);}  }
class C{  public static boolean syncFormattingFromSummary2Viewer(DataTable table,ClassificationViewer classificationViewer){  final String classificationName=classificationViewer.getClassName();  boolean changed=false;  String nodeFormats=table.getNodeFormats(classificationName);  if (nodeFormats != null) {    int state=0;    int idA=0, idB=0;    int formatA=0;    for (int pos=0; pos < nodeFormats.length(); pos++) {      char ch=nodeFormats.charAt(pos);switch (state) {case 0:        if (!Character.isSpaceChar(ch)) {          state++;          idA=pos;        }      break;case 1:    idB=pos;  if (ch == ':')   state++;break;case 2:if (!Character.isSpaceChar(ch)) {state++;formatA=pos;}break;case 3:if (ch == ';') {int formatB=pos;if (idA < idB && formatA < formatB) {Integer taxId=Integer.parseInt(nodeFormats.substring(idA,idB).trim());classificationViewer.getDirtyNodeIds().add(taxId);String format=nodeFormats.substring(formatA,formatB + 1).trim();for (Node v : classificationViewer.getNodes(taxId)) {try {  classificationViewer.getNV(v).read(format);  changed=true;} catch (IOException e) {}}}state=0;}break;}}}String edgeFormats=table.getEdgeFormats(classificationName);if (edgeFormats != null) {int state=0;int id1A=0, id1B=0;int id2A=0, id2B=0;int formatA=0;for (int pos=0; pos < edgeFormats.length(); pos++) {char ch=edgeFormats.charAt(pos);switch (state) {case 0:if (!Character.isSpaceChar(ch)) {state++;id1A=pos;}break;case 1:id1B=pos;if (ch == ',') state++;break;case 2:if (!Character.isSpaceChar(ch)) {state++;id2A=pos;}break;case 3:id2B=pos;if (ch == ':') state++;break;case 4:if (!Character.isSpaceChar(ch)) {state++;formatA=pos;}break;case 5:if (ch == ';') {int formatB=pos;if (id1A < id1B && id2A < id2B && formatA < formatB) {Integer taxId1=Integer.parseInt(edgeFormats.substring(id1A,id1B).trim());Integer taxId2=Integer.parseInt(edgeFormats.substring(id2A,id2B).trim());classificationViewer.getDirtyEdgeIds().add(new Pair<>(taxId1,taxId2));String format=edgeFormats.substring(formatA,formatB + 1).trim();for (Node v : classificationViewer.getNodes(taxId1)) {for (Node w : classificationViewer.getNodes(taxId2)) {Edge e=v.getCommonEdge(w);try {if (e != null) {classificationViewer.getEV(e).read(format);changed=true;}} catch (IOException ex) {}}}}state=0;}break;}}}return changed;}  }
class C{  public Object readResolve() throws ObjectStreamException {  ClassLoader cl=ReflectionUtil.getClassTargetLoader(_interfaces[0]);  Object proxyInstance=createInstance(cl);  if (_cacheProxy && _handler instanceof ILRMIProxy) {    StubId stubId=((ILRMIProxy)_handler).getStubId();    if (_stubCacheLogger.isLoggable(Level.FINE))     _stubCacheLogger.fine("adding stub to cache, id = " + stubId + ", stub toString() = "+ proxyInstance);    LRMIRuntime.getRuntime().getStubCache().addStub(stubId,proxyInstance);  } else {    if (_stubCacheLogger.isLoggable(Level.FINER))     _stubCacheLogger.finer("stub state is uncached, skipping cache insertion. toString() = " + proxyInstance);  }  return proxyInstance;}  }
class C{  public Enumeration<K> keys(){  return new KeyIterator();}  }
class C{  void addAttributeValue(String attribute,String value){  if (attribute.equals(OMA_TYPE)) {    mTypes.add(value);  } else {    mDescription.put(attribute,value);  }}  }
class C{  public int code(){  return code;}  }
class C{  private static double g(final double[] expected,final long[] observed){  double sumExpected=0d;  double sumObserved=0d;  for (int i=0; i < observed.length; i++) {    sumExpected+=expected[i];    sumObserved+=observed[i];  }  double ratio=1d;  boolean rescale=false;  if (FastMath.abs(sumExpected - sumObserved) > 10E-6) {    ratio=sumObserved / sumExpected;    rescale=true;  }  double sum=0d;  for (int i=0; i < observed.length; i++) {    final double dev=rescale ? FastMath.log(observed[i] / (ratio * expected[i])) : FastMath.log(observed[i] / expected[i]);    sum+=(observed[i]) * dev;  }  return 2d * sum;}  }
class C{  @SuppressLint("InflateParams") @Override public Dialog onCreateDialog(Bundle savedInstanceState){  Mysplash.getInstance().setActivityInBackstage(true);  View view=LayoutInflater.from(getActivity()).inflate(R.layout.dialog_rate_limit,null,false);  initWidget(view);  setCancelable(false);  return new AlertDialog.Builder(getActivity()).setView(view).create();}  }
class C{  public static DerivativeStructure atan2(final DerivativeStructure y,final DerivativeStructure x) throws MathIllegalArgumentException {  return y.atan2(x);}  }
class C{  public void dump(PrintWriter output,int pad,String title,boolean showName){  List keys=new ArrayList(featureMap.keySet());  if (formatter == null) {    formatter=new DecimalFormat("########0.000000");  }  Collections.reverse(keys);  Utilities.dump(output,pad,title);  for (Iterator i=keys.iterator(); i.hasNext(); ) {    String key=(String)i.next();    if (!showName && key.equals("name")) {      continue;    }    Object value=getObject(key);    if (value instanceof Dumpable) {      Dumpable d=(Dumpable)value;      d.dump(output,pad + 4,key);    } else {      if (value instanceof Float) {        Float fval=(Float)value;        Utilities.dump(output,pad + 4,key + "=" + formatter.format(fval.floatValue()));      } else {        Utilities.dump(output,pad + 4,key + "=" + value);      }    }  }}  }
class C{  @deprecated public CompactByteArray(String indexArray,String valueArray){  this(Utility.RLEStringToCharArray(indexArray),Utility.RLEStringToByteArray(valueArray));}  }
class C{  private Object invokeObjectMethod(Object proxy,Method method,Object[] args){  String name=method.getName();  if (name.equals("hashCode")) {    return new Integer(hashCode());  } else   if (name.equals("equals")) {    Object obj=args[0];    boolean b=proxy == obj || (obj != null && sameProxyClass(proxy,obj) && equals(Proxy.getInvocationHandler(obj)));    return Boolean.valueOf(b);  } else   if (name.equals("toString")) {    return proxyToString(proxy);  } else {    throw new IllegalArgumentException("unexpected Object method: " + method);  }}  }
class C{  public String process(Item item) throws ProcessException {  return getPhoneFeature(item,"vc");}  }
class C{  @Override public void chooseNewSLD(){  NewSLDPanel panel=new NewSLDPanel();  List<SLDDataInterface> newSLDList=panel.showDialog(Controller.getInstance().getFrame());  if (newSLDList != null) {    if (this.loadSLDString(false,false,newSLDList)) {      uiMgr.populateUI(1);    }  }}  }
class C{  public static synchronized boolean isOriginLabeled(){  return originLabeled;}  }
class C{  public static SecretKey generateKey(byte[] key,String algorithm) throws EncodingException {  try {    SecretKey skey=new SecretKeySpec(key,algorithm);    return skey;  } catch (  Exception e) {    throw new EncodingException(e);  }}  }
class C{  @Override public void close() throws IOException {  fInputStream.close();}  }
class C{  public GeneralOptions init(Map<String,String> environment,FileSystem fileSystem,Console console) throws IOException {  Path root=configRoot != null ? fileSystem.getPath(configRoot) : null;  return new GeneralOptions(environment,fileSystem,verbose,console,root,disableReversibleCheck);}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if (obj instanceof MarshalledInstance) {    MarshalledInstance other=(MarshalledInstance)obj;    if (hash != other.hash)     return false;    return Arrays.equals(objBytes,other.objBytes);  }  return false;}  }
class C{  public AemRichText selectText(int startPos,int endPos){  switchToTextArea();  try {    actions.sendKeys(Keys.chord(Keys.CONTROL,Keys.HOME)).perform();    for (int i=0; i < startPos; i++) {      actions.sendKeys(Keys.ARROW_RIGHT).perform();    }    actions.keyDown(Keys.SHIFT);    for (int i=0; i < endPos - startPos; i++) {      actions.sendKeys(Keys.ARROW_RIGHT);    }    actions.keyUp(Keys.SHIFT).perform();    return this;  }  finally {    frameSwitcher.switchTo("/$cq");  }}  }
class C{  public static void main(String[] args) throws Exception {  ByteFileGetterInMemory byteFileGetterInMemory=new ByteFileGetterInMemory(new File("/dev/null"));  int length0=(1 << byteFileGetterInMemory.BITS);  for (long i=0; i < 10L * Integer.MAX_VALUE; i++) {    int index=byteFileGetterInMemory.dataIndex(i);    int pos=byteFileGetterInMemory.dataPos(i);    long result=(long)index * (long)length0 + (long)pos;    if (result != i)     throw new Exception("i=" + i + " != result="+ result);  }}  }
class C{  public static WebSiteProperties from(GenericValue webSiteValue){  Assert.notNull("webSiteValue",webSiteValue);  if (!"WebSite".equals(webSiteValue.getEntityName())) {    throw new IllegalArgumentException("webSiteValue is not a WebSite entity value");  }  WebSiteProperties defaults=new WebSiteProperties(webSiteValue.getDelegator());  String httpPort=(webSiteValue.get("httpPort") != null) ? webSiteValue.getString("httpPort") : defaults.getHttpPort();  String httpHost=(webSiteValue.get("httpHost") != null) ? webSiteValue.getString("httpHost") : defaults.getHttpHost();  String httpsPort=(webSiteValue.get("httpsPort") != null) ? webSiteValue.getString("httpsPort") : defaults.getHttpsPort();  String httpsHost=(webSiteValue.get("httpsHost") != null) ? webSiteValue.getString("httpsHost") : defaults.getHttpsHost();  boolean enableHttps=(webSiteValue.get("enableHttps") != null) ? webSiteValue.getBoolean("enableHttps") : defaults.getEnableHttps();  httpPort=adjustPort(webSiteValue.getDelegator(),httpPort);  httpsPort=adjustPort(webSiteValue.getDelegator(),httpsPort);  return new WebSiteProperties(httpPort,httpHost,httpsPort,httpsHost,enableHttps);}  }
class C{  public WallGetRepostsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public void removeAllViews(){  mContainer.removeAllViews();}  }
class C{  @CancelResult public int cancel(@NonNull String tag){  if (!mDriver.isAvailable()) {    return CANCEL_RESULT_NO_DRIVER_AVAILABLE;  }  return mDriver.cancel(tag);}  }
class C{  private static void buildProperty(Node node,Map<String,String> prop,boolean isConvertFromSystemProperty){  Stack<String> inverseKey=new Stack<String>();  StringBuilder key=new StringBuilder();  String propertyValue=node.getNodeValue();  while (node.getParentNode() != null && node.getParentNode().getNodeType() != Node.DOCUMENT_NODE) {    inverseKey.push(node.getParentNode().getNodeName());    node=node.getParentNode();  }  while (!inverseKey.isEmpty()) {    key.append(inverseKey.pop()).append('.');  }  if (key.charAt(key.length() - 1) == '.') {    key=key.deleteCharAt(key.length() - 1);  }  propertyValue=propertyValue.trim();  if (isConvertFromSystemProperty)   propertyValue=getPropertyFromSystem(propertyValue);  String propKey=key.toString();  prop.put(propKey,propertyValue);}  }
class C{  private Map<String,Object> buildResultRowWithSidecars(Result result,Map<Dimension,Set<Map<DimensionField,String>>> sidecars){  Map<String,Object> row=new LinkedHashMap<>();  row.put("dateTime",result.getTimeStamp().toString(DateTimeFormatterFactory.getOutputFormatter()));  Map<DimensionColumn,DimensionRow> dr=result.getDimensionRows();  for (  Entry<DimensionColumn,DimensionRow> dimensionColumnEntry : dr.entrySet()) {    Dimension dimension=dimensionColumnEntry.getKey().getDimension();    DimensionRow dimensionRow=dimensionColumnEntry.getValue();    if (requestedApiDimensionFields.get(dimension) != null) {      Set<DimensionField> requestedDimensionFields=requestedApiDimensionFields.get(dimension);      if (requestedDimensionFields.size() > 0) {        requestedDimensionFields.add(dimension.getKey());        Map<DimensionField,String> dimensionFieldToValueMap=requestedDimensionFields.stream().collect(StreamUtils.toLinkedMap(Function.identity(),null));        sidecars.get(dimension).add(dimensionFieldToValueMap);      }    }    row.put(dimension.getApiName(),dimensionRow.get(dimension.getKey()));  }  for (  MetricColumn apiMetricColumn : apiMetricColumns) {    row.put(apiMetricColumn.getName(),result.getMetricValue(apiMetricColumn));  }  return row;}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  private void addIdentifierOrKeyword(){  int oldPos=pos - 1;  String id=scanIdentifier();  TokenKind kind=getTokenKindForIdentfier(id);  addToken(kind,oldPos,pos,(kind == TokenKind.IDENTIFIER) ? id : null);}  }
class C{  private UShort(int value) throws NumberFormatException {  this.value=value;  rangeCheck();}  }
class C{  private static String doGetPath(String filename,int separatorAdd){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  int index=indexOfLastSeparator(filename);  int endIndex=index + separatorAdd;  if (prefix >= filename.length() || index < 0 || prefix >= endIndex) {    return "";  }  return filename.substring(prefix,endIndex);}  }
class C{  static Matrix createMatrix(Border border,Bitmap bitmap,float extraSize){  return createMatrix(border,bitmap.getWidth(),bitmap.getHeight(),extraSize);}  }
class C{  protected SecureAddAppEventQuery activityId(int value){  return unsafeParam("activity_id",value);}  }
class C{  protected void onBindHeaderViewHolder(RecyclerView.ViewHolder holder,int position){}  }
class C{  public SecantSolver(){  super(DEFAULT_ABSOLUTE_ACCURACY);}  }
class C{  public void addScrollingListener(OnWheelScrollListener listener){  scrollingListeners.add(listener);}  }
class C{  public ExternalizableServerEntry(){}  }
class C{  public SecureSendNotificationQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  public ISAACRandom(long seed){  setSeed(seed);}  }
class C{  private static float calcSum(float[] vals){  if (vals == null)   return 0f;  float sum=0f;  for (  float f : vals) {    sum+=f;  }  return sum;}  }
class C{  public boolean isCellEditable(EventObject e){  if (e instanceof MouseEvent) {    MouseEvent me=(MouseEvent)e;    if (me.getClickCount() >= 2) {      return true;    }    return false;  }  if (e == null) {    return true;  }  return false;}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  protected boolean reachedException(TypeDecl catchType){  boolean found=false;  for (int i=0; i < getNumCatchClause() && !found; i++)   if (getCatchClause(i).handles(catchType))   found=true;  if (!found && (!hasFinally() || getFinally().canCompleteNormally()))   if (catchableException(catchType))   return true;  for (int i=0; i < getNumCatchClause(); i++)   if (getCatchClause(i).reachedException(catchType))   return true;  return hasFinally() && getFinally().reachedException(catchType);}  }
class C{  public Z(double x){  re=x;  im=0;}  }
class C{  public boolean optBoolean(int index){  return this.optBoolean(index,false);}  }
class C{  void onUrlFocusChanged(boolean hasFocus){  mUrlBarHasFocus=hasFocus;  if (mUrlBarHasFocus) {    mTrailingTextShownWhileFocused=mShowTrailingText || mTrailingTextView.getVisibility() == VISIBLE;    mTrailingTextHiddenWhileFocused=!mShowTrailingText && mTrailingTextView.getVisibility() == VISIBLE;    removeCallbacks(mTriggerHideRunnable);    removeCallbacks(mTriggerHideAnimationRunnable);    if (mTrailingTextAnimator != null && mTrailingTextAnimator.isRunning()) {      mTrailingTextAnimator.cancel();      mTrailingTextAnimator=null;    }    mShowTrailingText=false;  } else {    if (mTrailingTextShownWhileFocused) {      setTrailingTextVisible(true);      if (mTrailingTextHiddenWhileFocused) {        setTrailingTextVisible(false);      }    }  }}  }
class C{  protected String resolveExternalSystem(String systemId,String resolver) throws IOException {  Resolver r=queryResolver(resolver,"i2l",systemId,null);  if (r != null) {    return r.resolveSystem(systemId);  } else {    return null;  }}  }
class C{  public NotesCreateCommentQuery replyTo(Integer value){  return unsafeParam("reply_to",value);}  }
class C{  public static void addPosTag(soot.tagkit.Host host,polyglot.util.Position pos){  if (pos != null) {    addPosTag(host,pos.column(),pos.endColumn());  }}  }
class C{  public CharacterIdChannelPair(){}  }
class C{  public CholeskyDecomposition chol(){  return new CholeskyDecomposition(this);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Petrification_END_A(String value0){  return new SM_SYSTEM_MESSAGE(1201143,value0);}  }
class C{  public void notifyContentLoadingStatus(){  currentContentLevel++;  if (currentContentLevel == MAX_CONTENT_LEVEL && iContentLoadListener != null) {    iContentLoadListener.onContentLoaded();  }}  }
class C{  public Builder unloadInvisibleTiles(Boolean unloadInvisibleTiles){  this.unloadInvisibleTiles=unloadInvisibleTiles;  return this;}  }
class C{  public LeastSquaresBuilder target(final RealVector newTarget){  this.target=newTarget;  return this;}  }
class C{  private void explain(String systemId){  if (!suppressExplanation) {    System.out.println("Parser probably encountered bad URI in " + systemId);    System.out.println("For example, replace '/some/uri' with 'file:/some/uri'.");  }}  }
class C{  @Override public List<Cluster<T>> cluster(final Collection<T> points) throws NullArgumentException {  MathUtils.checkNotNull(points);  final List<Cluster<T>> clusters=new ArrayList<Cluster<T>>();  final Map<Clusterable,PointStatus> visited=new HashMap<Clusterable,PointStatus>();  for (  final T point : points) {    if (visited.get(point) != null) {      continue;    }    final List<T> neighbors=getNeighbors(point,points);    if (neighbors.size() >= minPts) {      final Cluster<T> cluster=new Cluster<T>();      clusters.add(expandCluster(cluster,point,neighbors,points,visited));    } else {      visited.put(point,PointStatus.NOISE);    }  }  return clusters;}  }
class C{  public void update(){  timeElapsed+=Gdx.graphics.getDeltaTime();  if (startGameTime) {    gameTime+=Gdx.graphics.getDeltaTime();  }}  }
class C{  public List<Pair<SequenceUUID,Integer>> guessMainAudio(String lang){  List<Pair<SequenceUUID,Integer>> surround=guessChannelsByEssenceDescriptor(SURROUND,lang);  if (surround.isEmpty()) {    return guessChannelsByEssenceDescriptor(STEREO,lang);  }  return surround;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_COMBINE_TOO_FAR_FROM_TOOL(String value0){  return new SM_SYSTEM_MESSAGE(1330040,value0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonGroupGate_A_TO_B(String skillcaster,String value0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201035,skillcaster,value0,skilltarget,skillname);}  }
class C{  @Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){  FieldConfigSymbolType copy=null;  if (fieldConfigBase != null) {    copy=new FieldConfigSymbolType(fieldConfigBase.getCommonData());  }  return copy;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PACK_ITEM_WRONG_TARGET_ITEM_CATEGORY(int parentNameId,int targetNameId){  return new SM_SYSTEM_MESSAGE(1402018,parentNameId,targetNameId);}  }
class C{  public void commit() throws BlazeProjectCommitException {  this.workspaceRoot=workspaceOption.getWorkspaceRoot();  workspaceOption.commit();  projectViewOption.commit();  String workspaceKey=lastImportedWorkspaceKey(workspaceOption.getBuildSystemForWorkspace());  userSettings.put(workspaceKey,workspaceRoot.toString());  if (!StringUtil.isEmpty(projectDataDirectory)) {    File projectDataDir=new File(projectDataDirectory);    if (!projectDataDir.exists()) {      if (!projectDataDir.mkdirs()) {        throw new BlazeProjectCommitException("Unable to create the project directory: " + projectDataDirectory);      }    }  }  try {    LOG.assertTrue(projectViewFile != null);    ProjectViewStorageManager.getInstance().writeProjectView(ProjectViewParser.projectViewToString(projectView),projectViewFile);  } catch (  IOException e) {    throw new BlazeProjectCommitException("Could not create project view file",e);  }}  }
class C{  CheckBoxRenderer(FunctionTableModel tableModel){  this.tableModel=tableModel;  setHorizontalAlignment(JLabel.CENTER);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysParry_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200788,skillcaster,skillname);}  }
class C{  public RegexFileFilter(Pattern pattern){  if (pattern == null) {    throw new IllegalArgumentException("Pattern is missing");  }  this.pattern=pattern;}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  @Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer(WebSocket conn,Draft draft,ClientHandshake request) throws InvalidDataException {  return new HandshakeImpl1Server();}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public static Bitmap blurNativelyPixels(Bitmap original,int radius,boolean canReuseInBitmap){  if (radius < 1) {    return null;  }  Bitmap bitmap=buildBitmap(original,canReuseInBitmap);  if (radius == 1) {    return bitmap;  }  int w=bitmap.getWidth();  int h=bitmap.getHeight();  int[] pix=new int[w * h];  bitmap.getPixels(pix,0,w,0,0,w,h);  blurPixels(pix,w,h,radius);  bitmap.setPixels(pix,0,w,0,0,w,h);  return (bitmap);}  }
class C{  public static boolean nodeIsNonEmpty(JsonNode json){  return json != null && json.size() > 0;}  }
class C{  public static Variation attemptToGetAsVariant(String part){  try {    StoneTypes var=StoneTypes.valueOf(part.toUpperCase());    if (var != null) {      Variation bv=new Variation();      bv.setValue(var.value());      return bv;    }  } catch (  Exception e) {  }  try {    WoodTypes var=WoodTypes.valueOf(part.toUpperCase());    if (var != null) {      Variation bv=new Variation();      bv.setValue(var.value());      return bv;    }  } catch (  Exception e) {  }  try {    FlowerTypes var=FlowerTypes.fromValue(part);    if (var != null) {      Variation bv=new Variation();      bv.setValue(var.value());      return bv;    }  } catch (  Exception e) {  }  try {    EntityTypes var=EntityTypes.fromValue(part);    if (var != null) {      Variation bv=new Variation();      bv.setValue(var.value());      return bv;    }  } catch (  Exception e) {  }  try {    MonsterEggTypes var=MonsterEggTypes.fromValue(part);    if (var != null) {      Variation bv=new Variation();      bv.setValue(var.value());      return bv;    }  } catch (  Exception e) {  }  try {    ShapeTypes var=ShapeTypes.fromValue(part);    if (var != null) {      Variation bv=new Variation();      bv.setValue(var.value());      return bv;    }  } catch (  Exception e) {  }  try {    HalfTypes var=HalfTypes.fromValue(part);    if (var != null) {      Variation bv=new Variation();      bv.setValue(var.value());      return bv;    }  } catch (  Exception e) {  }  return null;}  }
class C{  @Override public double evaluate(final double[] values,final int begin,final int length) throws MathIllegalArgumentException {  double sum=Double.NaN;  if (MathArrays.verifyValues(values,begin,length,true)) {    sum=0.0;    for (int i=begin; i < begin + length; i++) {      sum+=values[i];    }  }  return sum;}  }
class C{  @Override public String version(){  return PostgreSQLSinkConnector.VERSION;}  }
class C{  public static ULong valueOf(BigInteger value) throws NumberFormatException {  return new ULong(value);}  }
class C{  public static void log(TeamException e){  log(e.getStatus());}  }
class C{  public ObjectLiteral(Object value){  m_value=value;}  }
class C{  Context(Map<SnippetKey,Snippet> snippets,Map<String,Object> globals){  this.snippets=snippets;  this.snippetsByName=ArrayListMultimap.create();  for (  Map.Entry<SnippetKey,Snippet> entry : snippets.entrySet()) {    snippetsByName.put(entry.getKey().name(),entry.getValue());  }  this.globals=ImmutableMap.copyOf(globals);}  }
class C{  public static void w(String tag,String msg,Object... args){  if (sLevel > LEVEL_WARNING) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.w(tag,msg);}  }
class C{  public boolean isInvalid(){  return status == INVALID;}  }
class C{  public static boolean hasAtLeastOneMethodWithName(Class clazz,String methodName){  Assert.notNull(clazz,"Class must not be null");  Assert.notNull(methodName,"Method name must not be null");  for (  Method method : clazz.getDeclaredMethods()) {    if (method.getName().equals(methodName)) {      return true;    }  }  Class[] ifcs=clazz.getInterfaces();  for (  Class ifc : ifcs) {    if (hasAtLeastOneMethodWithName(ifc,methodName)) {      return true;    }  }  Class superClass=clazz.getSuperclass();  return superClass != null && hasAtLeastOneMethodWithName(superClass,methodName);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public CascadedRowManager(Table table){  super(table);}  }
class C{  public static double gaussian(double mu,double sigma){  return mu + sigma * gaussian();}  }
class C{  private void loadAudioFile(String file) throws IllegalArgumentException, SecurityException, IllegalStateException, IOException {  if (this.isStreaming(file)) {    this.player.setDataSource(file);    this.player.setAudioStreamType(AudioManager.STREAM_MUSIC);    this.setMode(MODE.PLAY);    this.setState(STATE.MEDIA_STARTING);    this.player.setOnPreparedListener(this);    this.player.prepareAsync();  } else {    if (file.startsWith("/android_asset/")) {      String f=file.substring(15);      android.content.res.AssetFileDescriptor fd=this.handler.cordova.getActivity().getAssets().openFd(f);      this.player.setDataSource(fd.getFileDescriptor(),fd.getStartOffset(),fd.getLength());    } else {      File fp=new File(file);      if (fp.exists()) {        FileInputStream fileInputStream=new FileInputStream(file);        this.player.setDataSource(fileInputStream.getFD());        fileInputStream.close();      } else {        this.player.setDataSource(Environment.getExternalStorageDirectory().getPath() + "/" + file);      }    }    this.setState(STATE.MEDIA_STARTING);    this.player.setOnPreparedListener(this);    this.player.prepare();    this.duration=getDurationInSeconds();  }}  }
class C{  private void updatePointButtons(){  WKTType wktType=(WKTType)geometryTypeComboBox.getSelectedItem();  boolean enablePointButtons=false;  if (wktType != null) {    enablePointButtons=(wktType.getNumOfPoints() < 0) && (tablePointModel.getRowCount() > 0);  }  addPointButton.setEnabled(enablePointButtons);  int selectedRow=table.getSelectedRow();  if (enablePointButtons) {    enablePointButtons=(selectedRow >= 0);  }  removePointButton.setEnabled(enablePointButtons);}  }
class C{  public EmailBuilder withHeaders(Map<String,String> headers){  this.headers.putAll(headers);  return this;}  }
class C{  public final boolean allowsInsecureConnection(){  return noSSLCheckbox.isSelected();}  }
class C{  public void watchMonitoredHostPoll(PreferenceChangeListener pcl){  addListener(INT_KEY_MONHOST_POLL,pcl);}  }
class C{  @Before public void beforeTest(){  removeTestData();}  }
class C{  public static void createWriter(String fileName){  try {    createWriter(new FileOutputStream(fileName));  } catch (  FileNotFoundException e) {    e.printStackTrace();  }}  }
class C{  public static <T extends Comparable<? super T>>List<T> sort(List<T> list){  Collections.sort(list);  return list;}  }
class C{  public PrivilegedDistributedTask(DistributedTask<T,R> task){  super(task);}  }
class C{  private void addSourcesToContext(Collection<OrganisationUnit> sources,boolean ruleCheckThisSource){  for (  OrganisationUnit source : sources) {    OrganisationUnitExtended sourceX=new OrganisationUnitExtended(source,ruleCheckThisSource);    sourceXs.add(sourceX);    Map<PeriodType,Set<DataElement>> sourceElementsMap=source.getDataElementsInDataSetsByPeriodType();    for (    PeriodTypeExtended periodTypeX : periodTypeExtendedMap.values()) {      periodTypeX.getSourceDataElements().put(source,new HashSet<>());      for (      PeriodType allowedType : periodTypeX.getAllowedPeriodTypes()) {        Collection<DataElement> sourceDataElements=sourceElementsMap.get(allowedType);        if (sourceDataElements != null) {          periodTypeX.getSourceDataElements().get(source).addAll(sourceDataElements);        }      }    }  }}  }
class C{  public boolean isAlwaysNonNullBefore(Unit s,Immediate i){  return getFlowBefore(s).get(i) == NON_NULL;}  }
class C{  public JimpleBody newBody(SootMethod m){  return new JimpleBody(m);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute(getSyntax());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ABYSS_PVP_ON(DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1301040,descriptionId);}  }
class C{  public final void fallback(final IFallback fallbackObj) throws DataFallbackException {  try {    if (isFallbackFileEmpty())     fFileController.closeFallbackInputStream();    fFileController.openFallbackOutputStream();    fFileController.writeLine(fallbackObj);    fFileController.setNumberOfLines(fFileController.getNumberOfLines() + 1);  } catch (  DataFallbackException e) {    throw new DataFallbackException(e.getMessage());  }}  }
class C{  private static void flipCoordinates(final PhyloTreeView treeView,final SIDE rootSide){  final PhyloTree tree=treeView.getPhyloTree();  for (Node v=tree.getFirstNode(); v != null; v=tree.getNextNode(v)) {    final Point2D loc=treeView.getLocation(v);switch (rootSide) {case TOP:      treeView.setLocation(v,loc.getY(),loc.getX());    break;case BOTTOM:  treeView.setLocation(v,loc.getY(),-loc.getX());break;case RIGHT:treeView.setLocation(v,-loc.getX(),loc.getY());break;default :case LEFT:break;}}}  }
class C{  public SecurityConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool){  this(symbolTable,grammarPool,null);}  }
class C{  public void removeAllTableListeners(){  m_listeners.clear();}  }
class C{  protected MarketAddQuery categoryId(int value){  return unsafeParam("category_id",value);}  }
class C{  public ISVisitor(MethodVisitor mv,int access,String name,String desc,boolean isStatic,boolean isConstructor){  super(Opcodes.ASM5,mv,access,name,desc);  this.isStatic=isStatic;  this.isConstructor=isConstructor;}  }
class C{  @VisibleForTesting protected boolean isChromeBeingUsed(){  boolean isChromeVisible=ApplicationStatus.hasVisibleActivities();  boolean isScreenOn=ApiCompatibilityUtils.isInteractive(this);  return isChromeVisible && isScreenOn;}  }
class C{  public TableMgr(boolean isNew,Transaction tx){  tiMap=new HashMap<String,TableInfo>();  Schema tcatSchema=new Schema();  tcatSchema.addField(TCAT_TBLNAME,VARCHAR(MAX_NAME));  tcatInfo=new TableInfo(TCAT,tcatSchema);  Schema fcatSchema=new Schema();  fcatSchema.addField(FCAT_TBLNAME,VARCHAR(MAX_NAME));  fcatSchema.addField(FCAT_FLDNAME,VARCHAR(MAX_NAME));  fcatSchema.addField(FCAT_TYPE,INTEGER);  fcatSchema.addField(FCAT_TYPEARG,INTEGER);  fcatInfo=new TableInfo(FCAT,fcatSchema);  if (isNew) {    formatFileHeader(TCAT,tx);    formatFileHeader(FCAT,tx);    createTable(TCAT,tcatSchema,tx);    createTable(FCAT,fcatSchema,tx);  }}  }
class C{  public String toString(){  return name;}  }
class C{  public boolean isSelected(int fId){  Node v=getANode(fId);  return v != null && getSelected(v);}  }
class C{  public void add(Predicate p,BasicStroke stroke){  super.add(p,stroke);}  }
class C{  private void checkLiteralValue(String message,Expression expression,String expectedValue){  Assert.assertEquals(expression.getClass(),LiteralExpressionImpl.class);  LiteralExpressionImpl literalExpression=(LiteralExpressionImpl)expression;  Object value=literalExpression.getValue();  String actualValue=null;  if (value.getClass() == ValueComboBoxData.class) {    actualValue=((ValueComboBoxData)value).getKey();  } else {    Assert.assertEquals(message,value.getClass(),String.class);    actualValue=(String)value;  }  String additional=String.format(" Expected '%s' Actual '%s'",expectedValue,actualValue);  Assert.assertTrue(message + additional,(expectedValue.equals(actualValue)));}  }
class C{  public RoleDTO toDTO(Role role,int depth){  if (role == null) {    return null;  }  RoleDTO dto=new RoleDTO();  dto.id=role.getId();  dto.roleName=role.getRoleName();  if (depth-- > 0) {  }  return dto;}  }
class C{  public NotesGetCommentsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  private void parseIncludeAttributes(String layoutFile,AXmlNode rootNode){  for (  Entry<String,AXmlAttribute<?>> entry : rootNode.getAttributes().entrySet()) {    String attrName=entry.getKey().trim();    AXmlAttribute<?> attr=entry.getValue();    if (attrName.equals("layout")) {      if ((attr.getType() == AxmlVisitor.TYPE_REFERENCE || attr.getType() == AxmlVisitor.TYPE_INT_HEX) && attr.getValue() instanceof Integer) {        AbstractResource targetRes=resParser.findResource((Integer)attr.getValue());        if (targetRes == null) {          System.err.println("Target resource " + attr.getValue() + " for layout include not found");          return;        }        if (!(targetRes instanceof StringResource)) {          System.err.println("Invalid target node for include tag in layout XML, was " + targetRes.getClass().getName());          return;        }        String targetFile=((StringResource)targetRes).getValue();        if (callbackMethods.containsKey(targetFile))         for (        String callback : callbackMethods.get(targetFile))         addCallbackMethod(layoutFile,callback); else {          addToMapSet(includeDependencies,targetFile,layoutFile);        }      }    }  }}  }
class C{  public static JsonValue value(long value){  return new JsonNumber(Long.toString(value,10));}  }
class C{  public Z Div(Z a,double b) throws JampackException {  if (b == 0) {    throw new JampackException("Divide by zero.");  }  re=a.re / b;  im=a.im / b;  return this;}  }
class C{  private void maximizationStep(PointList samplePoints) throws CovarianceSingularityException {  int i=0;  try {    for (i=0; i < components.length; i++)     components[i].maximise(samplePoints,p_ij[i]);  } catch (  CovarianceSingularityException cse) {    PointList corrected=new PointList(samplePoints.getDimension(),samplePoints.size());    for (int j=0; j < samplePoints.size(); j++) {      if (p_ij[i][j] < 0.95)       corrected.add(samplePoints.get(j).getColumnPackedCopy());    }    throw new CovarianceSingularityException(corrected);  }}  }
class C{  @Override public boolean hasMoreData(){  return currentlyInBuffer() > 0 || !datagrams.isEmpty();}  }
class C{  private static byte charToByte(char c){  return (byte)"0123456789ABCDEF".indexOf(c);}  }
class C{  public ISpaceSynchronizeReplicaState recoverFromOtherSpace() throws Exception {  boolean transientOnly=!_space.getEngine().isColdStart();  return _recoveryGroup.recover(transientOnly,transientOnly);}  }
class C{  public boolean isHidden(){  return isHidden;}  }
class C{  private void integerToByteArray(int value,byte[] b,int offset){  b[offset]=(byte)(value & 0xFF);  b[offset + 1]=(byte)(value >> 8 & 0xFF);  b[offset + 2]=(byte)(value >> 16 & 0xFF);  b[offset + 3]=(byte)(value >> 24 & 0xFF);}  }
class C{  public void assertMatches(String stringToMatch,String regex){  assertMatches("",stringToMatch,regex);}  }
class C{  protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){  this.fontRendererObj.drawString(I18n.format("container.crafting",new Object[0]),97,8,4210752);}  }
class C{  @Override public final String toString(){  return HexTool.toString(baos.toByteArray());}  }
class C{  public static final void removeAlliance(PlayerAlliance alliance){  if (alliance != null) {    League league=alliance.getLeague();    Preconditions.checkNotNull(league,"League should not be null");    league.onEvent(new LeagueLeftEvent(league,alliance));  }}  }
class C{  private Map<String,Collection<Pair<Number,Number>>> computeCounts(Document doc,ViewerBase viewer,ProgressListener progressListener) throws CanceledException {  progressListener.setTasks(cName + " vs " + cName,"Sampling from current leaves");  progressListener.setMaximum(11 * doc.getNumberOfSamples());  progressListener.setProgress(0);  Map<String,Collection<Pair<Number,Number>>> plotName2Counts=new HashMap<>();  String[] sampleNames=doc.getSampleNamesAsArray();  for (int i=0; i < sampleNames.length; i++) {    String name1=sampleNames[i];    for (int j=i + 1; j < sampleNames.length; j++) {      String name2=sampleNames[j];      String name=name1 + " vs " + name2;      for (      Node v : viewer.getSelectedNodes()) {        int[] counts=((NodeData)v.getData()).getAssigned();        if (j < counts.length && counts[i] > 0 || counts[j] > 0) {          Collection<Pair<Number,Number>> pairs=plotName2Counts.get(name);          if (pairs == null) {            pairs=new LinkedList<>();            plotName2Counts.put(name,pairs);          }          pairs.add(new Pair<Number,Number>(counts[i],counts[i + 1]));        }      }    }  }  return plotName2Counts;}  }
class C{  public int nextInt(int least,int bound){  if (least >= bound)   throw new IllegalArgumentException();  return nextInt(bound - least) + least;}  }
class C{  public EncodedValueReader(ByteInput in,int knownType){  this.in=in;  this.type=knownType;}  }
class C{  static byte[] base64decode(String base64){  base64=base64.trim();  int endTrim=base64.endsWith("==") ? 2 : base64.endsWith("=") ? 1 : 0;  int length=(base64.length() / 4) * 3 - endTrim;  base64=base64.replace('=','A');  byte[] result=new byte[length];  int stringLength=base64.length();  int index=0;  for (int i=0; i < stringLength; i+=4) {    int i0=BASE64_STRING.indexOf(base64.charAt(i));    int i1=BASE64_STRING.indexOf(base64.charAt(i + 1));    int i2=BASE64_STRING.indexOf(base64.charAt(i + 2));    int i3=BASE64_STRING.indexOf(base64.charAt(i + 3));    byte b0=(byte)((i0 << 2) | (i1 >> 4));    byte b1=(byte)((i1 << 4) | (i2 >> 2));    byte b2=(byte)((i2 << 6) | i3);    result[index++]=b0;    if (index < length) {      result[index++]=b1;      if (index < length) {        result[index++]=b2;      }    }  }  return result;}  }
class C{  public static GenericValue findWebSite(Delegator delegator,String webSiteId,boolean useCache){  GenericValue result=null;  try {    result=EntityQuery.use(delegator).from("WebSite").where("webSiteId",webSiteId).cache(useCache).queryOne();  } catch (  GenericEntityException e) {    Debug.logError("Error looking up website with id " + webSiteId,module);  }  return result;}  }
class C{  public ShapelessMaterialRecipe(ItemStack output,Object... input){  this.output=output;  this.matchers=new ArrayList<>();  for (  Object obj : input) {    if (obj instanceof Predicate) {      matchers.add((Predicate<ItemStack>)obj);    } else     if (obj instanceof ItemStack) {      matchers.add(ItemStackDictionary.matcherOf((ItemStack)obj));    } else     if (obj instanceof Item) {      matchers.add(ItemStackDictionary.matcherOf(new ItemStack((Item)obj)));    } else     if (obj instanceof Block) {      matchers.add(ItemStackDictionary.matcherOf(new ItemStack((Block)obj)));    } else     if (obj instanceof String) {      matchers.add(Dictionaries.MATERIALS.get((String)obj));    }  }}  }
class C{  public static LocationHabitatFragment newInstance(long loc_id){  LocationHabitatFragment fragment=new LocationHabitatFragment();  Bundle args=new Bundle();  args.putLong(ARG_LOCATION_ID,loc_id);  fragment.setArguments(args);  return fragment;}  }
class C{  protected boolean inExtensionNamespace(){  boolean inExtension=false;  Enumeration elements=namespaceStack.elements();  while (!inExtension && elements.hasMoreElements()) {    String ns=(String)elements.nextElement();    if (ns == null) {      inExtension=true;    } else {      inExtension=(!ns.equals(tr9401NamespaceName) && !ns.equals(namespaceName));    }  }  return inExtension;}  }
class C{  public WallCreateCommentQuery fromGroup(Boolean value){  return unsafeParam("from_group",value);}  }
class C{  public boolean isCauseOf(Throwable exception){  return TaggedIOException.isTaggedWith(exception,tag);}  }
class C{  public void resetData(){  this.style=null;  this.styledLayer=null;  this.featureTypeStyle=null;  this.rule=null;  this.symbolizer=null;  this.selectedFTSIndex=-1;  this.selectedRuleIndex=-1;  this.selectedSymbolizerIndex=-1;  this.selectedStyledLayerIndex=-1;  this.selectedStyleIndex=-1;  this.validSymbolMap.clear();}  }
class C{  static VersionNumber identifySymbianVersion(final String userAgent){  VersionNumber version=VersionNumber.UNKNOWN;  final Pattern pattern=Pattern.compile("SymbianOS/((\\d+)((\\.\\d+)+)?s?)");  final Matcher m=pattern.matcher(userAgent);  if (m.find()) {    version=parseFirstVersionNumber(m.group(MAJOR_INDEX));  }  return version;}  }
class C{  public StreamResult(Writer writer){  setWriter(writer);}  }
class C{  private static boolean contains(String group,String member){  String quote=Pattern.quote(member);  Pattern pattern=Pattern.compile("," + quote + "$|^"+ quote+ ",|^"+ quote+ "$"+ "|,"+ quote+ ",");  Matcher matcher=pattern.matcher(group);  return matcher.find();}  }
class C{  public boolean exist(){  return productionRun != null;}  }
class C{  public void close(){  try {    os.flush();    os.close();    System.out.println("Wrote synthesized speech to " + path);  } catch (  IOException ioe) {    ioe.printStackTrace();  }}  }
class C{  public Zqrd(Zmat A) throws JampackException {  Zhqrd hqr;  A.getProperties();  if (A.HQR == null) {    hqr=new Zhqrd(A);  } else {    hqr=A.HQR;  }  R=hqr.R;  if (A.nr > A.nc) {    R=new Zutmat(Merge.o21(R,new Zmat(A.nr - A.nc,A.nc)));  }  Q=Eye.o(A.nr);  for (int k=hqr.ntran - 1; k >= 0; k--) {    House.ua(hqr.U[k],Q,k + A.bx,A.rx,k + A.bx,A.rx);  }}  }
class C{  private int distBetweenPoints(int x1,int z1,int x2,int z2,boolean bAllowDiags){  int w=Math.abs(x2 - x1);  int h=Math.abs(z2 - z1);  if (bAllowDiags) {    if (w < h)     w=0; else     h=0;  }  return w + h + 1;}  }
class C{  public static void o(Z1 z,int w,int d){  int n=z.n;  int ww=w + d + 10;  int ncp=(Parameters.PageWidth) / ww;  int jl=0;  while (jl < n) {    int ju=Math.min(n,jl + ncp);    System.out.print("\n");    String head="";    for (int j=jl; j < ju; j++) {      head=Integer.toString(j);      while (head.length() < ww)       head=" " + head;      System.out.print(head);    }    System.out.print("\n");    for (int j=jl; j < ju; j++) {      System.out.print(ZtoEstring(new Z(z.re[j],z.im[j]),w,d));    }    System.out.print("\n");    jl=jl + ncp;  }}  }
class C{  public boolean isCacheValid(int row){  return m_valid.get(row);}  }
class C{  protected Map createLexicon(InputStream is,boolean binary,int estimatedSize) throws IOException {  if (binary) {    if (useNewIO && is instanceof FileInputStream) {      FileInputStream fis=(FileInputStream)is;      return loadMappedBinaryLexicon(fis,estimatedSize);    } else {      DataInputStream dis=new DataInputStream(new BufferedInputStream(is));      return loadBinaryLexicon(dis,estimatedSize);    }  } else {    return loadTextLexicon(is,estimatedSize);  }}  }
class C{  private JsonWriter close(int empty,int nonempty,String closeBracket) throws IOException {  int context=peek();  if (context != nonempty && context != empty) {    throw new IllegalStateException("Nesting problem.");  }  if (deferredName != null) {    throw new IllegalStateException("Dangling name: " + deferredName);  }  stackSize--;  if (context == nonempty) {    newline();  }  out.write(closeBracket);  return this;}  }
class C{  public static boolean isPhiExpr(Value value){  return (value instanceof PhiExpr);}  }
class C{  static boolean collectProjectFilesFromDirectory(Collection<File> files,File directory,Set<String> directoriesVisited,boolean nestedProjects,IProgressMonitor monitor) throws InterruptedException {  if (monitor.isCanceled()) {    throw new InterruptedException();  }  if (directory == null) {    return true;  }  File[] contents=directory.listFiles();  if (contents == null) {    return false;  }  if (directoriesVisited == null) {    directoriesVisited=new HashSet<>();    try {      directoriesVisited.add(directory.getCanonicalPath());    } catch (    IOException exception) {    }  }  final String dotProject=IProjectDescription.DESCRIPTION_FILE_NAME;  List<File> directories=new ArrayList<>();  for (  File file : contents) {    if (file.isDirectory()) {      directories.add(file);    } else     if (file.getName().equals(dotProject) && file.isFile()) {      files.add(file);      if (!nestedProjects) {        return true;      }    }  }  for (  File dir : directories) {    if (!dir.getName().equals(METADATA_FOLDER)) {      try {        String canonicalPath=dir.getCanonicalPath();        if (!directoriesVisited.add(canonicalPath)) {          continue;        }      } catch (      IOException exception) {      }      collectProjectFilesFromDirectory(files,dir,directoriesVisited,nestedProjects,monitor);    }  }  return true;}  }
class C{  private void startSession(Session session,Json json){  String namespace=json.at(NAMESPACE).asString();  MindmapsGraph graph=getGraph.apply(namespace);  GraqlSession graqlSession=new GraqlSession(session,graph);  sessions.put(session,graqlSession);}  }
class C{  int compareColumnValue(int columnNumber,LogEntryChangePath p1,LogEntryChangePath p2){switch (columnNumber) {case COL_ACTION:    return getCollator().compare("" + p1.getAction(),"" + p2.getAction());case COL_PATH:  return getCollator().compare(p1.getPath(),p2.getPath());case COL_DESCRIPTION:String d1;String d2;if (p1.getCopySrcPath() != null) {d1=Policy.bind("ChangePathsTableProvider.copiedfrom",p1.getCopySrcPath(),p1.getCopySrcRevision().toString());} else {d1="";}if (p2.getCopySrcPath() != null) {d2=Policy.bind("ChangePathsTableProvider.copiedfrom",p2.getCopySrcPath(),p2.getCopySrcRevision().toString());} else {d2="";}return getCollator().compare(d1,d2);default :return 0;}}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public Insn(int opc,int val) throws jasError {  this.opc=opc;switch (opc) {case opc_bipush:    operand=new ByteOperand(val);  break;case opc_sipush:operand=new ShortOperand(val);break;case opc_newarray:operand=new UnsignedByteOperand(val);break;case opc_ret:case opc_iload:case opc_lload:case opc_fload:case opc_dload:case opc_aload:case opc_istore:case opc_lstore:case opc_fstore:case opc_dstore:case opc_astore:operand=new UnsignedByteWideOperand(val);break;default :throw new jasError(opcNames[opc] + " does not take a numeric argument");}}  }
class C{  public static void hideFragment(Activity activity,int containerViewId,Fragment previousFragment,Fragment newFragment,Bundle bundle,boolean canBack){  FragmentTransaction mFragmentTransaction=activity.getFragmentManager().beginTransaction();  if (bundle != null) {    newFragment.setArguments(bundle);  }  if (null != previousFragment) {    mFragmentTransaction.hide(previousFragment);  }  mFragmentTransaction.add(containerViewId,newFragment,newFragment.getClass().getName());  if (canBack && previousFragment != null) {    mFragmentTransaction.addToBackStack(newFragment.getClass().getName());  }  mFragmentTransaction.commit();}  }
class C{  private void sendPunctureRequest(Peer peer,Peer puncturePeer) throws IOException {  PunctureRequest request=new PunctureRequest(hashId,peer.getAddress(),internalSourceAddress,puncturePeer);  sendMesssage(request,peer);}  }
class C{  public void addDims(Dims node){  List<Dims> list=(parent == null || state == null) ? getDimsListNoTransform() : getDimsList();  list.addChild(node);}  }
class C{  protected MessagesAllowMessagesFromCommunityQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GATHER_FAIL_4_FISHING(String value0){  return new SM_SYSTEM_MESSAGE(1330024,value0);}  }
class C{  void checkNormalizationAfterInsert(ChildNode insertedChild){  if (insertedChild.getNodeType() == Node.TEXT_NODE) {    ChildNode prev=insertedChild.previousSibling();    ChildNode next=insertedChild.nextSibling;    if ((prev != null && prev.getNodeType() == Node.TEXT_NODE) || (next != null && next.getNodeType() == Node.TEXT_NODE)) {      isNormalized(false);    }  } else {    if (!insertedChild.isNormalized()) {      isNormalized(false);    }  }}  }
class C{  @Override protected void checkUnboundNamespacePrefixedNode(Node node) throws IOException {  if (fNamespaces) {    if (DEBUG) {      System.out.println("==>serializeNode(" + node.getNodeName() + ") [Entity Reference - Namespaces on]");      System.out.println("==>Declared Prefix Count: " + fNSBinder.getDeclaredPrefixCount());      System.out.println("==>Node Name: " + node.getNodeName());      System.out.println("==>First Child Node Name: " + node.getFirstChild().getNodeName());      System.out.println("==>First Child Node Prefix: " + node.getFirstChild().getPrefix());      System.out.println("==>First Child Node NamespaceURI: " + node.getFirstChild().getNamespaceURI());    }    Node child, next;    for (child=node.getFirstChild(); child != null; child=next) {      next=child.getNextSibling();      if (DEBUG) {        System.out.println("==>serializeNode(" + child.getNodeName() + ") [Child Node]");        System.out.println("==>serializeNode(" + child.getPrefix() + ") [Child Node Prefix]");      }      String prefix=child.getPrefix();      prefix=(prefix == null || prefix.length() == 0) ? XMLSymbols.EMPTY_STRING : fSymbolTable.addSymbol(prefix);      if (fNSBinder.getURI(prefix) == null && prefix != null) {        fatalError("The replacement text of the entity node '" + node.getNodeName() + "' contains an element node '"+ child.getNodeName()+ "' with an undeclared prefix '"+ prefix+ "'.");      }      if (child.getNodeType() == Node.ELEMENT_NODE) {        NamedNodeMap attrs=child.getAttributes();        for (int i=0; i < attrs.getLength(); i++) {          String attrPrefix=attrs.item(i).getPrefix();          attrPrefix=(attrPrefix == null || attrPrefix.length() == 0) ? XMLSymbols.EMPTY_STRING : fSymbolTable.addSymbol(attrPrefix);          if (fNSBinder.getURI(attrPrefix) == null && attrPrefix != null) {            fatalError("The replacement text of the entity node '" + node.getNodeName() + "' contains an element node '"+ child.getNodeName()+ "' with an attribute '"+ attrs.item(i).getNodeName()+ "' an undeclared prefix '"+ attrPrefix+ "'.");          }        }      }      if (child.hasChildNodes()) {        checkUnboundNamespacePrefixedNode(child);      }    }  }}  }
class C{  public LogSubject containsNoMoreMessages(){  assertThat(messages).isEmpty();  return this;}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public void checkWFValidityAfterUpdate(Context context,IEntryHolder entry) throws SAException {  if (!entry.isHasWaitingFor() || entry.isDeleted())   return;  Collection<ITemplateHolder> wf=entry.getTemplatesWaitingForEntry();  for (  ITemplateHolder template : wf) {    if (!template.isDeleted()) {      boolean match=_templateScanner.match(context,entry,template,-1,null,true);      if (!match) {        RemoveWaitingForInfoSABusPacket wfpacket=new RemoveWaitingForInfoSABusPacket(context.getOperationID(),entry,template);        _processorWG.enqueueBlocked(wfpacket);        continue;      }    }  }}  }
class C{  public EmptyPanel(FunctionNameInterface functionManager){  super(EmptyPanel.class,functionManager);}  }
class C{  @Override public void cacheGrammars(String grammarType,Grammar[] grammars){  super.cacheGrammars(grammarType,grammars);  fGrammarPool.cacheGrammars(grammarType,grammars);}  }
class C{  public void readDataFile(InputStream dataFileStream,String locationInfo) throws DataFileException {  if (modelDataFile == null) {    throw new IllegalStateException("DataFile model is null, cannot load file");  }  if (locationInfo == null) {    locationInfo="unknown";  }  RecordIterator recordIterator=this.makeRecordIterator(dataFileStream,locationInfo);  while (recordIterator.hasNext()) {    this.records.add(recordIterator.next());  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_Instant_A_TO_ME(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200721,skillcaster,num0,skillname);}  }
class C{  public void squareSize(float squareSize){  this.squareSize=squareSize;  invalidate();}  }
class C{  public static Layer createFeatureLayerFromMapObject(InternalMapObject mapObject){  Style style=mapObject.getStyle();  SimpleFeatureType featureType=mapObject.getFeatureType();  SimpleFeatureBuilder featureBuilder=new SimpleFeatureBuilder(featureType);  DefaultFeatureCollection featureCollection=new DefaultFeatureCollection();  featureBuilder.add(mapObject.getGeometry());  SimpleFeature feature=featureBuilder.buildFeature(null);  featureCollection.add(feature);  return new FeatureLayer(featureCollection,style);}  }
class C{  private List<String> generateTestTasks() throws Exception {  List<String> ids=new ArrayList<String>();  SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy hh:mm:ss.SSS");  processEngineConfiguration.getClock().setCurrentTime(sdf.parse("01/01/2001 01:01:01.000"));  for (int i=0; i < 6; i++) {    Task task=taskService.newTask();    task.setName("testTask");    task.setDescription("testTask description");    task.setOwner("gonzo");    task.setPriority(3);    taskService.saveTask(task);    ids.add(task.getId());    taskService.addCandidateUser(task.getId(),"kermit");  }  processEngineConfiguration.getClock().setCurrentTime(sdf.parse("02/02/2002 02:02:02.000"));  Task task=taskService.newTask();  task.setName("gonzoTask");  task.setDescription("gonzo description");  task.setPriority(4);  taskService.saveTask(task);  taskService.setAssignee(task.getId(),"gonzo");  taskService.setVariable(task.getId(),"testVar","someVariable");  ids.add(task.getId());  processEngineConfiguration.getClock().setCurrentTime(sdf.parse("03/03/2003 03:03:03.000"));  for (int i=0; i < 2; i++) {    task=taskService.newTask();    task.setName("managementTask");    task.setPriority(10);    taskService.saveTask(task);    taskService.addCandidateGroup(task.getId(),"management");    ids.add(task.getId());  }  processEngineConfiguration.getClock().setCurrentTime(sdf.parse("04/04/2004 04:04:04.000"));  for (int i=0; i < 2; i++) {    task=taskService.newTask();    task.setName("accountancyTask");    task.setDescription("accountancy description");    taskService.saveTask(task);    taskService.addCandidateGroup(task.getId(),"accountancy");    ids.add(task.getId());  }  processEngineConfiguration.getClock().setCurrentTime(sdf.parse("05/05/2005 05:05:05.000"));  task=taskService.newTask();  task.setName("managementAndAccountancyTask");  taskService.saveTask(task);  taskService.addCandidateGroup(task.getId(),"management");  taskService.addCandidateGroup(task.getId(),"accountancy");  ids.add(task.getId());  return ids;}  }
class C{  public static void checkMatrixIndex(final AnyMatrix m,final int row,final int column) throws MathIllegalArgumentException {  checkRowIndex(m,row);  checkColumnIndex(m,column);}  }
class C{  public void shutdown() throws TeamException {  commentsManager.saveCommentHistory();  commentsManager.saveCommentTemplates();  keyFilesManager.saveKeyFilesHistory();}  }
class C{  private void installHttpSelector(Properties settings,ProtocolDispatchSelector ps) throws NumberFormatException {  String proxyHost=settings.getProperty("org.gnome.system.proxy.http host",null);  int proxyPort=Integer.parseInt(settings.getProperty("org.gnome.system.proxy.http port","0").trim());  if (proxyHost != null && proxyHost.length() > 0 && proxyPort > 0) {    Logger.log(getClass(),LogLevel.TRACE,"Gnome http proxy is {0}:{1}",proxyHost,proxyPort);    ps.setSelector("http",new FixedProxySelector(proxyHost.trim(),proxyPort));  }}  }
class C{  protected int hashCode(URL u){  int h=0;  String protocol=u.getProtocol();  if (protocol != null) {    h+=protocol.hashCode();  }  InetAddress addr=getHostAddress(u);  if (addr != null) {    h+=addr.hashCode();  } else {    String host=u.getHost();    if (host != null) {      h+=host.toLowerCase().hashCode();    }  }  String path=u.getPath();  if (path != null) {    int param=path.lastIndexOf(';');    if (param == -1) {      h+=path.hashCode();    } else {      h+=path.substring(0,param).hashCode();      int comment=path.indexOf(',',param);      if (comment != -1) {        path=path.substring(0,comment);      }      h+=path.substring(param).toLowerCase().hashCode();    }  }  String query=u.getQuery();  if (query != null) {    h+=query.hashCode();  }  if (u.getPort() == -1) {    h+=getDefaultPort();  } else {    h+=u.getPort();  }  String ref=u.getRef();  if (ref != null)   h+=ref.hashCode();  return h;}  }
class C{  public ResourcesPoet addComment(String comment){  Comment commentNode=document.createComment(comment);  resourceElement.appendChild(commentNode);  return this;}  }
class C{  public static Timestamp addForward(GenericValue techDataCalendar,Timestamp dateFrom,long amount){  Timestamp dateTo=(Timestamp)dateFrom.clone();  long nextCapacity=capacityRemaining(techDataCalendar,dateFrom);  if (amount <= nextCapacity) {    dateTo.setTime(dateTo.getTime() + amount);    amount=0;  } else   amount-=nextCapacity;  Map<String,Object> result=FastMap.newInstance();  while (amount > 0) {    result=startNextDay(techDataCalendar,dateTo);    dateTo=(Timestamp)result.get("dateTo");    nextCapacity=((Double)result.get("nextCapacity")).longValue();    if (amount <= nextCapacity) {      dateTo.setTime(dateTo.getTime() + amount);      amount=0;    } else     amount-=nextCapacity;  }  return dateTo;}  }
class C{  public static void o(int k){  o(k,Parameters.OutputFieldWidth);}  }
class C{  private void startFirstControlsSetting(){  userLogInfo.menuLogOnOrUniversityName.setText(MyApp.userInfo.userUniversity);  userLogInfo.menuSignUpOrSchoolName.setText(MyApp.userInfo.userSchool);  FrescoImageloadHelper.removeCacheFromDisk(Uri.parse(MyApp.userInfo.userHeadPicURL).toString());  FrescoImageloadHelper.simpleLoadImageFromURL(userLogInfo.menuUserHeadimg,MyApp.userInfo.userHeadPicURL);  userLogInfo.userUserName.setText(MyApp.userInfo.userRealName);}  }
class C{  public TObjectShortHashMap(int initialCapacity,float loadFactor,TObjectHashingStrategy<K> strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  default void writeAttribute(NamespaceManager ns,UInteger attribute,DataValue value,String indexRange) throws UaException {  writeAttribute(ns,attribute.intValue(),value,indexRange);}  }
class C{  public static DoubleStream shiftingWindowAveragingLong(LongStream longStream,int rollingFactor){  Objects.requireNonNull(longStream);  RollingOfLongSpliterator ofLongSpliterator=RollingOfLongSpliterator.of(longStream.spliterator(),rollingFactor);  return StreamSupport.stream(ofLongSpliterator,longStream.isParallel()).onClose(null).mapToDouble(null);}  }
class C{  public static void init(){  Locale _locale=locale;  if (_locale == null) {    _locale=Locale.getDefault();  }  domResourceBundle=ResourceBundle.getBundle("mf.org.apache.xerces.impl.msg.DOMMessages",_locale);  serResourceBundle=ResourceBundle.getBundle("mf.org.apache.xerces.impl.msg.XMLSerializerMessages",_locale);  xmlResourceBundle=ResourceBundle.getBundle("mf.org.apache.xerces.impl.msg.XMLMessages",_locale);}  }
class C{  private GroupName(SimpleGroupPath path,Tags tags){  path_=Objects.requireNonNull(path);  tags_=Objects.requireNonNull(tags);}  }
class C{  public static void applyForPermit(AirMapAvailablePermit permit,AirMapCallback<AirMapPilotPermit> listener){  String url=String.format(permitApplyUrl,permit.getId());  AirMap.getClient().postWithJsonBody(url,permit.getAsParams(),new GenericOkHttpCallback(listener,AirMapPilotPermit.class));}  }
class C{  public String jsonEncode(String object){  return StringEscapeUtils.escapeJava(object);}  }
class C{  public static final double show(Window owner){  ApplyTorqueDialog atd=new ApplyTorqueDialog(owner);  atd.setLocationRelativeTo(owner);  atd.setVisible(true);  if (!atd.canceled) {    double t=atd.torquePanel.getTorque();    return t;  }  return 0.0;}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public int hashCode(){  int hash=37;  hash+=37 * hash + Float.floatToIntBits(x);  hash+=37 * hash + Float.floatToIntBits(y);  return hash;}  }
class C{  public EigenvalueDecomposition(Matrix Arg){  double[][] A=Arg.getArray();  n=Arg.getColumnDimension();  V=new double[n][n];  d=new double[n];  e=new double[n];  issymmetric=true;  for (int j=0; (j < n) & issymmetric; j++) {    for (int i=0; (i < n) & issymmetric; i++) {      issymmetric=(A[i][j] == A[j][i]);    }  }  if (issymmetric) {    for (int i=0; i < n; i++) {      for (int j=0; j < n; j++) {        V[i][j]=A[i][j];      }    }    tred2();    tql2();  } else {    H=new double[n][n];    ort=new double[n];    for (int j=0; j < n; j++) {      for (int i=0; i < n; i++) {        H[i][j]=A[i][j];      }    }    orthes();    hqr2();  }}  }
class C{  public static void addPropertiesListListener(PropertiesListListener listener){  if (!propertieslistListeners.contains(listener)) {synchronized (propertieslistListeners) {      propertieslistListeners.add(listener);    }  }}  }
class C{  public grammaticalityEstimator(Set FileNames,int iMinChar,int iMaxChar,int iCharWindow,int iMinWord,int iMaxWord,int iWordWindow){  iMinCharNGram=iMinChar;  iMaxCharNGram=iMaxChar;  iMinWordNGram=iMinWord;  iMaxWordNGram=iMaxWord;  iWordDist=iWordWindow;  iCharDist=iCharWindow;  DistroDocs=new TreeMap<Integer,DistributionDocument>();  DistroWordDocs=new TreeMap<Integer,DistributionWordDocument>();  StringBuffer sb=new StringBuffer();  Iterator iTexts=FileNames.iterator();  while (iTexts.hasNext()) {    String sFile=(String)iTexts.next();    try {      BufferedReader bf=new BufferedReader(new FileReader(sFile));      String sTmp;      while ((sTmp=bf.readLine()) != null)       sb.append(sTmp);      bf.close();    } catch (    FileNotFoundException ex) {      ex.printStackTrace(System.err);    }catch (    IOException ex) {      ex.printStackTrace(System.err);    }    sb.append((char)0);  }  FullTextDataString=sb.toString();  for (int iCnt=iMinCharNGram; iCnt <= iMaxCharNGram; iCnt++) {    DistroDocs.put(iCnt,new DistributionDocument(iCharDist,iCnt));  }  for (int iCnt=iMinWordNGram; iCnt <= iMaxWordNGram; iCnt++) {    DistroWordDocs.put(iCnt,new DistributionWordDocument(iWordDist,iCnt));  }}  }
class C{  public HintsExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public static Map<String,Object> createEftAccount(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Timestamp now=UtilDateTime.nowTimestamp();  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PAY_INFO","_CREATE","ACCOUNTING","_CREATE");  if (result.size() > 0)   return result;  List<GenericValue> toBeStored=FastList.newInstance();  GenericValue newPm=delegator.makeValue("PaymentMethod");  toBeStored.add(newPm);  GenericValue newEa=delegator.makeValue("EftAccount");  toBeStored.add(newEa);  String newPmId=(String)context.get("paymentMethodId");  if (UtilValidate.isEmpty(newPmId)) {    try {      newPmId=delegator.getNextSeqId("PaymentMethod");    } catch (    IllegalArgumentException e) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingEftAccountCannotBeCreated",locale));    }  }  newPm.set("partyId",partyId);  newPm.set("fromDate",(context.get("fromDate") != null ? context.get("fromDate") : now));  newPm.set("thruDate",context.get("thruDate"));  newPm.set("description",context.get("description"));  newEa.set("bankName",context.get("bankName"));  newEa.set("routingNumber",context.get("routingNumber"));  newEa.set("accountType",context.get("accountType"));  newEa.set("accountNumber",context.get("accountNumber"));  newEa.set("nameOnAccount",context.get("nameOnAccount"));  newEa.set("companyNameOnAccount",context.get("companyNameOnAccount"));  newPm.set("paymentMethodId",newPmId);  newPm.set("paymentMethodTypeId","EFT_ACCOUNT");  newEa.set("paymentMethodId",newPmId);  GenericValue newPartyContactMechPurpose=null;  String contactMechId=(String)context.get("contactMechId");  if (UtilValidate.isNotEmpty(contactMechId) && !contactMechId.equals("_NEW_")) {    newEa.set("contactMechId",context.get("contactMechId"));    String contactMechPurposeTypeId="BILLING_LOCATION";    GenericValue tempVal=null;    try {      List<GenericValue> allPCWPs=EntityQuery.use(delegator).from("PartyContactWithPurpose").where("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId).queryList();      allPCWPs=EntityUtil.filterByDate(allPCWPs,now,"contactFromDate","contactThruDate",true);      allPCWPs=EntityUtil.filterByDate(allPCWPs,now,"purposeFromDate","purposeThruDate",true);      tempVal=EntityUtil.getFirst(allPCWPs);    } catch (    GenericEntityException e) {      Debug.logWarning(e.getMessage(),module);      tempVal=null;    }    if (tempVal == null) {      newPartyContactMechPurpose=delegator.makeValue("PartyContactMechPurpose",UtilMisc.toMap("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId,"fromDate",now));    }  }  if (newPartyContactMechPurpose != null)   toBeStored.add(newPartyContactMechPurpose);  try {    delegator.storeAll(toBeStored);  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingEftAccountCannotBeCreatedWriteFailure",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  result.put("paymentMethodId",newEa.getString("paymentMethodId"));  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public void closeLedger(LedgerDescriptor ledgerDesc) throws BKException {  FutureUtils.bkResult(asyncCloseLedger(ledgerDesc));}  }
class C{  private void scrollListItemsBy(int amount){  tryOffsetChildrenTopAndBottom(amount);  final int listBottom=getHeight() - mListPadding.bottom;  final int listTop=mListPadding.top;  final PLA_AbsListView.RecycleBin recycleBin=mRecycler;  if (amount < 0) {    View last=getLastChild();    int numChildren=getChildCount();    while (last.getBottom() < listBottom) {      final int lastVisiblePosition=mFirstPosition + numChildren - 1;      if (lastVisiblePosition < mItemCount - 1) {        addViewBelow(last,lastVisiblePosition);        last=getLastChild();        numChildren++;      } else {        break;      }    }    if (last.getBottom() < listBottom) {      tryOffsetChildrenTopAndBottom(listBottom - last.getBottom());    }    View first=getChildAt(0);    while (first.getBottom() < listTop) {      PLA_AbsListView.LayoutParams layoutParams=(LayoutParams)first.getLayoutParams();      if (recycleBin.shouldRecycleViewType(layoutParams.viewType)) {        detachViewFromParent(first);        recycleBin.addScrapView(first);      } else {        removeViewInLayout(first);      }      first=getChildAt(0);      mFirstPosition++;    }  } else {    View first=getChildAt(0);    while ((first.getTop() > listTop) && (mFirstPosition > 0)) {      first=addViewAbove(first,mFirstPosition);      mFirstPosition--;    }    if (first.getTop() > listTop) {      tryOffsetChildrenTopAndBottom(listTop - first.getTop());    }    int lastIndex=getChildCount() - 1;    View last=getChildAt(lastIndex);    while (last.getTop() > listBottom) {      PLA_AbsListView.LayoutParams layoutParams=(LayoutParams)last.getLayoutParams();      if (recycleBin.shouldRecycleViewType(layoutParams.viewType)) {        detachViewFromParent(last);        recycleBin.addScrapView(last);      } else {        removeViewInLayout(last);      }      last=getChildAt(--lastIndex);    }  }}  }
class C{  private void loadTranslationsCacheIfEmpty(){  if (translationCache.isEmpty()) {    for (    ObjectTranslation translation : translations) {      if (translation.getLocale() != null && translation.getProperty() != null && !StringUtils.isEmpty(translation.getValue())) {        String key=ObjectTranslation.getCacheKey(translation.getLocale(),translation.getProperty());        translationCache.put(key,translation.getValue());      }    }  }}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  @Override public void onClick(View view){switch (view.getId()) {case -1:    if (getIntent().getBooleanExtra(EXTRA_NOTIFICATION,false)) {      startActivity(new Intent(this,MainActivity.class));    }  finish();break;}}  }
class C{  public String features2LongContext(FeatureDefinition def,FeatureVector featureVector,Vector<String> featureList){  if (featureList == null) {    featureList=new Vector<String>(Arrays.asList(def.getFeatureNames().split("\\s+")));  }  StringBuilder contextName=new StringBuilder();  contextName.append("|");  for (  String f : featureList) {    if (!def.hasFeature(f)) {      throw new IllegalArgumentException("Feature '" + f + "' is not known in the feature definition. Valid features are: "+ def.getFeatureNames());    }    contextName.append(f);    contextName.append("=");    String value=def.getFeatureValueAsString(f,featureVector);    if (f.endsWith("phone"))     value=replaceTrickyPhones(value); else     if (f.contains("sentence_punc") || f.contains("punctuation"))     value=replacePunc(value); else     if (f.contains("tobi"))     value=replaceToBI(value);    contextName.append(value);    contextName.append("|");  }  return contextName.toString();}  }
class C{  public void addParameter(ParameterDeclaration node){  List<ParameterDeclaration> list=(parent == null || state == null) ? getParameterListNoTransform() : getParameterList();  list.addChild(node);}  }
class C{  public static boolean isExceptionCaughtAt(SootClass e,Unit u,Body b){  Hierarchy h=Scene.v().getActiveHierarchy();  Chain<Unit> units=b.getUnits();  for (  Trap t : b.getTraps()) {    if (h.isClassSubclassOfIncluding(e,t.getException())) {      Iterator<Unit> it=units.iterator(t.getBeginUnit(),units.getPredOf(t.getEndUnit()));      while (it.hasNext())       if (u.equals(it.next()))       return true;    }  }  return false;}  }
class C{  public DocumentNGramGraph[] intersectAndDeltaGraph(DocumentNGramGraph dgOtherGraph){  DocumentNGramGraph dgUnion=null;  if (dgOtherGraph.length() > length()) {    dgUnion=(DocumentNGramGraph)dgOtherGraph.clone();    dgUnion.merge(this,0);  } else {    dgUnion=(DocumentNGramGraph)clone();    dgUnion.merge(dgOtherGraph,0);  }  DocumentNGramGraph[] res=new DocumentNGramGraph[2];  DocumentNGramGraph dgIntersection=intersectGraph(dgOtherGraph);  res[0]=dgIntersection;  for (int iCurLvl=MinSize; iCurLvl <= MaxSize; iCurLvl++) {    UniqueVertexGraph gUnion=dgUnion.getGraphLevelByNGramSize(iCurLvl);    UniqueVertexGraph gIntersection=dgIntersection.getGraphLevelByNGramSize(iCurLvl);    EdgeCachedLocator eclLocator=new EdgeCachedLocator(100);    if (gIntersection == null)     continue;    java.util.Iterator iIter=gIntersection.getEdgeSet().iterator();    while (iIter.hasNext()) {      WeightedEdge weCurItem=(WeightedEdge)iIter.next();      Edge eEdge=eclLocator.locateDirectedEdgeInGraph(gUnion,weCurItem.getVertexA(),weCurItem.getVertexB());      if (eEdge != null)       try {        gUnion.removeEdge(eEdge);      } catch (      Exception ex) {        ex.printStackTrace();      }    }  }  res[1]=dgUnion;  return res;}  }
class C{  protected BoardGetCommentsQueryWithExtended groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public SQLDataMigrator graph(MindmapsGraph graph){  this.graph=graph;  return this;}  }
class C{  public void shutdown(){  final long begin=System.currentTimeMillis();  log.info("ThreadPoolManager: Shutting down.");  log.info("\t... executing " + getTaskCount(scheduledPool) + " scheduled tasks.");  log.info("\t... executing " + getTaskCount(instantPool) + " instant tasks.");  log.info("\t... executing " + getTaskCount(longRunningPool) + " long running tasks.");  scheduledPool.shutdown();  instantPool.shutdown();  longRunningPool.shutdown();  boolean success=false;  try {    success=awaitTermination(5000);    scheduledPool.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);    scheduledPool.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);    success|=awaitTermination(10000);  } catch (  InterruptedException e) {    e.printStackTrace();  }  log.info("\t... success: " + success + " in "+ (System.currentTimeMillis() - begin)+ " msec.");  log.info("\t... " + getTaskCount(scheduledPool) + " scheduled tasks left.");  log.info("\t... " + getTaskCount(instantPool) + " instant tasks left.");  log.info("\t... " + getTaskCount(longRunningPool) + " long running tasks left.");}  }
class C{  public static void w(String tag,String msg,Object... args){  if (sLevel > LEVEL_WARNING) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.w(tag,msg);}  }
class C{  public static boolean contentEquals(Reader input1,Reader input2) throws IOException {  input1=toBufferedReader(input1);  input2=toBufferedReader(input2);  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  @NonNull public static Observable<Integer> task4(@NonNull Observable<Boolean> flagObservable,@NonNull Observable<Integer> first,@NonNull Observable<Integer> second){  return Observable.just(0);}  }
class C{  public ThreadList(int iMaxThreads){  super(iMaxThreads);}  }
class C{  protected void processLocationReport(SerialMessage serialMessage,int offset,int endpoint) throws ZWaveSerialMessageException {  String location=getString(serialMessage,offset);  if (name == null) {    return;  }  this.location=location;  logger.debug("NODE {}: Node location: {}",getNode().getNodeId(),location);  ZWaveCommandClassValueEvent zEvent=new ZWaveCommandClassValueEvent(getNode().getNodeId(),endpoint,getCommandClass(),location,Type.NODENAME_LOCATION);  getController().notifyEventListeners(zEvent);}  }
class C{  public static String defaultColour(){  return DEFAULT_COLOUR;}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  private static int try_warning(int count,String s,String e){  print(">    " + s + "*** warning ***\n>      Message: "+ e+ "\n");  return ++count;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CHANGE_CHANNEL5(String value0){  return new SM_SYSTEM_MESSAGE(1400188,value0);}  }
class C{  private char[] eFormatDigits(double x,char eChar){  char[] ca1, ca2, ca3;  String sx, sxOut;  int i, j, k, p;  int n1In, n2In;  int expon=0;  int ePos, rPos, eSize;  boolean minusSign=false;  if (x > 0.0)   sx=Double.toString(x); else   if (x < 0.0) {    sx=Double.toString(-x);    minusSign=true;  } else {    sx=Double.toString(x);    if (sx.charAt(0) == '-') {      minusSign=true;      sx=sx.substring(1);    }  }  ePos=sx.indexOf('E');  if (ePos == -1)   ePos=sx.indexOf('e');  rPos=sx.indexOf('.');  if (rPos != -1)   n1In=rPos; else   if (ePos != -1)   n1In=ePos; else   n1In=sx.length();  if (rPos != -1) {    if (ePos != -1)     n2In=ePos - rPos - 1; else     n2In=sx.length() - rPos - 1;  } else   n2In=0;  if (ePos != -1) {    int ie=ePos + 1;    expon=0;    if (sx.charAt(ie) == '-') {      for (++ie; ie < sx.length(); ie++)       if (sx.charAt(ie) != '0')       break;      if (ie < sx.length())       expon=-Integer.parseInt(sx.substring(ie));    } else {      if (sx.charAt(ie) == '+')       ++ie;      for (; ie < sx.length(); ie++)       if (sx.charAt(ie) != '0')       break;      if (ie < sx.length())       expon=Integer.parseInt(sx.substring(ie));    }  }  if (rPos != -1)   expon+=rPos - 1;  if (precisionSet)   p=precision; else   p=defaultDigits - 1;  if (rPos != -1 && ePos != -1)   ca1=(sx.substring(0,rPos) + sx.substring(rPos + 1,ePos)).toCharArray(); else   if (rPos != -1)   ca1=(sx.substring(0,rPos) + sx.substring(rPos + 1)).toCharArray(); else   if (ePos != -1)   ca1=sx.substring(0,ePos).toCharArray(); else   ca1=sx.toCharArray();  boolean carry=false;  int i0=0;  if (ca1[0] != '0')   i0=0; else   for (i0=0; i0 < ca1.length; i0++)   if (ca1[i0] != '0')   break;  if (i0 + p < ca1.length - 1) {    carry=checkForCarry(ca1,i0 + p + 1);    if (carry)     carry=startSymbolicCarry(ca1,i0 + p,i0);    if (carry) {      ca2=new char[i0 + p + 1];      ca2[i0]='1';      for (j=0; j < i0; j++)       ca2[j]='0';      for (i=i0, j=i0 + 1; j < p + 1; i++, j++)       ca2[j]=ca1[i];      expon++;      ca1=ca2;    }  }  if (Math.abs(expon) < 100 && !optionalL)   eSize=4; else   eSize=5;  if (alternateForm || !precisionSet || precision != 0)   ca2=new char[2 + p + eSize]; else   ca2=new char[1 + eSize];  if (ca1[0] != '0') {    ca2[0]=ca1[0];    j=1;  } else {    for (j=1; j < (ePos == -1 ? ca1.length : ePos); j++)     if (ca1[j] != '0')     break;    if ((ePos != -1 && j < ePos) || (ePos == -1 && j < ca1.length)) {      ca2[0]=ca1[j];      expon-=j;      j++;    } else {      ca2[0]='0';      j=2;    }  }  if (alternateForm || !precisionSet || precision != 0) {    ca2[1]='.';    i=2;  } else   i=1;  for (k=0; k < p && j < ca1.length; j++, i++, k++)   ca2[i]=ca1[j];  for (; i < ca2.length - eSize; i++)   ca2[i]='0';  ca2[i++]=eChar;  if (expon < 0)   ca2[i++]='-'; else   ca2[i++]='+';  expon=Math.abs(expon);  if (expon >= 100) {switch (expon / 100) {case 1:      ca2[i]='1';    break;case 2:  ca2[i]='2';break;case 3:ca2[i]='3';break;case 4:ca2[i]='4';break;case 5:ca2[i]='5';break;case 6:ca2[i]='6';break;case 7:ca2[i]='7';break;case 8:ca2[i]='8';break;case 9:ca2[i]='9';break;}i++;}switch ((expon % 100) / 10) {case 0:ca2[i]='0';break;case 1:ca2[i]='1';break;case 2:ca2[i]='2';break;case 3:ca2[i]='3';break;case 4:ca2[i]='4';break;case 5:ca2[i]='5';break;case 6:ca2[i]='6';break;case 7:ca2[i]='7';break;case 8:ca2[i]='8';break;case 9:ca2[i]='9';break;}i++;switch (expon % 10) {case 0:ca2[i]='0';break;case 1:ca2[i]='1';break;case 2:ca2[i]='2';break;case 3:ca2[i]='3';break;case 4:ca2[i]='4';break;case 5:ca2[i]='5';break;case 6:ca2[i]='6';break;case 7:ca2[i]='7';break;case 8:ca2[i]='8';break;case 9:ca2[i]='9';break;}int nZeros=0;if (!leftJustify && leadingZeros) {int xThousands=0;if (thousands) {int xlead=0;if (ca2[0] == '+' || ca2[0] == '-' || ca2[0] == ' ') xlead=1;int xdp=xlead;for (; xdp < ca2.length; xdp++) if (ca2[xdp] == '.') break;xThousands=(xdp - xlead) / 3;}if (fieldWidthSet) nZeros=fieldWidth - ca2.length;if ((!minusSign && (leadingSign || leadingSpace)) || minusSign) nZeros--;nZeros-=xThousands;if (nZeros < 0) nZeros=0;}j=0;if ((!minusSign && (leadingSign || leadingSpace)) || minusSign) {ca3=new char[ca2.length + nZeros + 1];j++;} else ca3=new char[ca2.length + nZeros];if (!minusSign) {if (leadingSign) ca3[0]='+';if (leadingSpace) ca3[0]=' ';} else ca3[0]='-';for (k=0; k < nZeros; j++, k++) ca3[j]='0';for (i=0; i < ca2.length && j < ca3.length; i++, j++) ca3[j]=ca2[i];int lead=0;if (ca3[0] == '+' || ca3[0] == '-' || ca3[0] == ' ') lead=1;int dp=lead;for (; dp < ca3.length; dp++) if (ca3[dp] == '.') break;int nThousands=dp / 3;if (dp < ca3.length) ca3[dp]=dfs.getDecimalSeparator();char[] ca4=ca3;if (thousands && nThousands > 0) {ca4=new char[ca3.length + nThousands + lead];ca4[0]=ca3[0];for (i=lead, k=lead; i < dp; i++) {if (i > 0 && (dp - i) % 3 == 0) {ca4[k]=dfs.getGroupingSeparator();ca4[k + 1]=ca3[i];k+=2;} else {ca4[k]=ca3[i];k++;}}for (; i < ca3.length; i++, k++) ca4[k]=ca3[i];}return ca4;}  }
class C{  private boolean maybeDisableSync(){  if (mSyncEverything.isChecked() || !getSelectedModelTypes().isEmpty() || !canDisableSync()) {    return false;  }  SyncController.get(getActivity()).stop();  mSyncSwitchPreference.setChecked(false);  updateSyncStateFromSwitch();  return true;}  }
class C{  public boolean removeNode(int node){  Table nodeTable=getNodeTable();  if (nodeTable.isValidRow(node)) {    int id=getInDegree(node);    if (id > 0) {      int[] links=(int[])m_links.get(node,INLINKS);      for (int i=id; --i >= 0; )       removeEdge(links[i]);    }    int od=getOutDegree(node);    if (od > 0) {      int[] links=(int[])m_links.get(node,OUTLINKS);      for (int i=od; --i >= 0; )       removeEdge(links[i]);    }  }  return nodeTable.removeRow(node);}  }
class C{  protected MarketEditQuery description(String value){  return unsafeParam("description",value);}  }
class C{  public static TypeArray v(int size){  TypeArray newArray=new TypeArray();  newArray.types=new Type[size];  for (int i=0; i < size; i++)   newArray.types[i]=UnusuableType.v();  return newArray;}  }
class C{  static public float[] decode_ARGB(int rgba){  int vArc_I16=(rgba >> 0) & 0xFFFF;  int vMag_I16=(rgba >> 16) & 0xFFFF;  float vArc=TWO_PI * vArc_I16 / (0xFFFF - 1);  float vMag=vMag_I16;  float vx=(float)Math.cos(vArc);  float vy=(float)Math.sin(vArc);  return new float[]{vx,vy,vMag};}  }
class C{  @Deprecated public boolean preferPublic(){  return getPreferPublic();}  }
class C{  protected GroupsIsMemberQueryWithUserIds groupId(String value){  return unsafeParam("group_id",value);}  }
class C{  public static BigInteger sizeOfDirectoryAsBigInteger(File directory){  checkDirectory(directory);  final File[] files=directory.listFiles();  if (files == null) {    return BigInteger.ZERO;  }  BigInteger size=BigInteger.ZERO;  for (  final File file : files) {    try {      if (!isSymlink(file)) {        size=size.add(BigInteger.valueOf(sizeOf(file)));      }    } catch (    IOException ioe) {    }  }  return size;}  }
class C{  public boolean simple_edges_bidirectional(){  return soot.PhaseOptions.getBoolean(options,"simple-edges-bidirectional");}  }
class C{  public final void loadAttributeData(InputStream ins) throws IOException {  BufferedReader r=new BufferedReader(new InputStreamReader(ins));  String aLine;  while ((aLine=r.readLine()) != null) {    if (aLine.length() == 0) {    } else     if (aLine.startsWith("##")) {      String[] fields=aLine.split("\\t");      for (int i=0; i < fields.length; i++) {        String label=fields[i].trim();        if (label.length() > 0) {          if (label.charAt(0) == '\"')           label=label.substring(1,label.length() - 1);          attribute2index.put(label,i);        }      }    } else {      String[] fields=aLine.split("\\t");      String idString=fields[attribute2index.get("Taxonomy ID")];      if (idString != null && Basic.isInteger(idString)) {        Integer taxId=Basic.parseInt(idString);        String taxName=TaxonomyData.getName2IdMap().get(taxId);        if (taxName != null)         this.taxaName2AttributesRawData.put(taxName,fields);      }    }  }}  }
class C{  public static void main(String[] args) throws Exception {  File audioFile=new File(args[0]);  File pitchmarkFile=new File(args[1]);  AudioInputStream ais=AudioSystem.getAudioInputStream(audioFile);  int samplingRate=(int)ais.getFormat().getSampleRate();  DoubleDataSource signal=new AudioDoubleDataSource(ais);  DoubleDataSource pitchmarks=new ESTTextfileDoubleDataSource(new FileReader(pitchmarkFile));  PitchFrameProvider pfp=new PitchFrameProvider(signal,pitchmarks,null,samplingRate);  double[] frame=null;  int n=0;  int avgF0=0;  while ((frame=pfp.getNextFrame()) != null) {    int periodLength=pfp.validSamplesInFrame();    if (periodLength > 0) {      int f0=samplingRate / periodLength;      double frameStartTime=pfp.getFrameStartTime();      double frameEndTime=frameStartTime + pfp.getFrameLengthTime();      avgF0+=f0;      n++;      System.err.println("Frame " + frameStartTime + " - "+ frameEndTime+ " s: "+ periodLength+ " samples, "+ f0+ " Hz");    } else {      System.err.println("Read empty frame");    }  }  avgF0/=n;  System.err.println("Average F0: " + avgF0 + " Hz");}  }
class C{  public boolean isAbsoluteURI(){  return (m_scheme != null);}  }
class C{  public MessagesGetHistoryAttachmentsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  static boolean isAlphanum(int c){  return ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z')|| c == '_' || c == '$' || c == '\\' || c > 126);}  }
class C{  public final String toXML(){  StringBuffer str=new StringBuffer();  str.append('<');  str.append(XML_ROOT_ELEMENT);  str.append(' ');  str.append(XML_ATTRIBUTE_ID);  str.append("=\"");  str.append(id);  str.append("\" ");  str.append(XML_ATTRIBUTE_NAME);  str.append("=\"");  str.append(name);  str.append("\">\n");  if (value != null) {    str.append("<value data-type=\"");    str.append(getDataType());    str.append("\">");    str.append(value.toString());    str.append("</value>\n");  }  if (valueDescription != null) {    str.append("<value-description><![CDATA[");    str.append(valueDescription);    str.append("]]></value-description>\n");  }  str.append("<quality-code>");  str.append(qualityCode.toString());  str.append("</quality-code>\n");  if (qualityDescription != null) {    str.append("<quality-description>");    str.append(qualityDescription);    str.append("</quality-description>\n");  }  str.append("<dynamic-filtered>");  str.append(dynamicFiltered);  str.append("</dynamic-filtered>");  str.append("<filter-applied>");  str.append(filterApplied);  str.append("</filter-applied>");  str.append("<timestamp>");  str.append(timestamp.getTime());  str.append("</timestamp>\n");  str.append("</");  str.append(XML_ROOT_ELEMENT);  str.append(">\n");  return str.toString();}  }
class C{  private void rInflate(XmlPullParser parser,Preference parent,final AttributeSet attrs) throws XmlPullParserException, IOException {  final int depth=parser.getDepth();  int type;  while (((type=parser.next()) != XmlPullParser.END_TAG || parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {    if (type != XmlPullParser.START_TAG) {      continue;    }    final String name=parser.getName();    if (INTENT_TAG_NAME.equals(name)) {      final Intent intent;      try {        intent=Intent.parseIntent(getContext().getResources(),parser,attrs);      } catch (      IOException e) {        XmlPullParserException ex=new XmlPullParserException("Error parsing preference");        ex.initCause(e);        throw ex;      }      parent.setIntent(intent);    } else     if (EXTRA_TAG_NAME.equals(name)) {      getContext().getResources().parseBundleExtra(EXTRA_TAG_NAME,attrs,parent.getExtras());      try {        skipCurrentTag(parser);      } catch (      IOException e) {        XmlPullParserException ex=new XmlPullParserException("Error parsing preference");        ex.initCause(e);        throw ex;      }    } else {      final Preference item=createItemFromTag(name,attrs);      ((PreferenceGroup)parent).addItemFromInflater(item);      rInflate(parser,item,attrs);    }  }}  }
class C{  public ParsingTables(Class impl_class){  this(getSpecAsResourceStream(impl_class));}  }
class C{  private LogicalMetric extractMetric(Matcher tokenizedQuery,MetricDictionary metricDictionary) throws BadHavingException {  String metricName=tokenizedQuery.group(1);  LogicalMetric extractedMetric=metricDictionary.get(metricName);  if (extractedMetric == null) {    LOG.debug(HAVING_METRIC_UNDEFINED.logFormat(metricName));    throw new BadHavingException(HAVING_METRIC_UNDEFINED.logFormat(metricName));  }  return extractedMetric;}  }
class C{  public static Map<String,List<TableBlockInfo>> combineNodeBlockMaps(List<Map<String,List<TableBlockInfo>>> mapsOfNodeBlockMapping){  Map<String,List<TableBlockInfo>> combinedMap=new HashMap<String,List<TableBlockInfo>>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  for (  Map<String,List<TableBlockInfo>> eachMap : mapsOfNodeBlockMapping) {    for (    Map.Entry<String,List<TableBlockInfo>> eachEntry : eachMap.entrySet()) {      String node=eachEntry.getKey();      List<TableBlockInfo> blocks=eachEntry.getValue();      if (null != combinedMap.get(node)) {        List<TableBlockInfo> blocksAlreadyPresent=combinedMap.get(node);        blocksAlreadyPresent.addAll(blocks);      } else {        combinedMap.put(node,blocks);      }    }  }  return combinedMap;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) @Test public void createProcessDescriptionBBox(){  ProcessDescriptionType process=Wps10FactoryImpl.init().createProcessDescriptionType();  CodeType codeType=Ows11FactoryImpl.init().createCodeType();  codeType.setValue("JTS:area");  process.setIdentifier(codeType);  DataInputsType dataInputs=Wps10FactoryImpl.init().createDataInputsType();  EList dataInputList=dataInputs.getInput();  InputDescriptionType inputDescription=Wps10FactoryImpl.init().createInputDescriptionType();  CodeType codeType2=Ows11FactoryImpl.init().createCodeType();  codeType2.setValue("dummyParameter");  inputDescription.setIdentifier(codeType2);  inputDescription.setMinOccurs(BigInteger.valueOf(1));  inputDescription.setMaxOccurs(BigInteger.valueOf(1));  dataInputList.add(inputDescription);  process.setDataInputs(dataInputs);  SupportedCRSsType crs=Wps10FactoryImpl.init().createSupportedCRSsType();  inputDescription.setBoundingBoxData(crs);  CustomProcessFunction obj=new CustomProcessFunction();  List<ProcessFunctionParameterValue> valueList=obj.extractParameters(process);  assertEquals(1,valueList.size());  ProcessFunctionParameterValue value=valueList.get(0);  assertEquals(1,value.minOccurences);  assertEquals(1,value.maxOccurences);  assertTrue(value.dataType.compareTo("BBOX") == 0);  SupportedComplexDataInputType complex=Wps10FactoryImpl.init().createSupportedComplexDataInputType();  inputDescription.setComplexData(complex);  inputDescription.setBoundingBoxData(null);  valueList=obj.extractParameters(process);  assertEquals(1,valueList.size());  value=valueList.get(0);  assertEquals(1,value.minOccurences);  assertEquals(1,value.maxOccurences);  assertTrue(value.dataType.compareTo("Geometry") == 0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_REMAIN_TIME_60(String durationtime0){  return new SM_SYSTEM_MESSAGE(1400202,durationtime0);}  }
class C{  public Builder messageDigest(String messageDigest){  this.messageDigest=messageDigest;  return this;}  }
class C{  public Boolean deleteSalesOrderHeader(EntityManager em,String id){  boolean status=true;  SalesOrderHeader soHeader=null;  try {    if (!em.getTransaction().isActive()) {      em.getTransaction().begin();    }    soHeader=em.find(SalesOrderHeader.class,id);    em.remove(soHeader);    em.getTransaction().commit();  } catch (  Exception e) {    status=false;    logger.error("Error occured during delete of Sales Order Header. Detailed info: " + e);  }  return status;}  }
class C{  public BpmResult login(final LoginData loginData){switch (loginData.getLoginType()) {case GOOGLE_AUTH:    if (loginData.isValidGoogleLogin()) {      return logOnGoogleAuth(loginData);    }  break;case PTC:if (loginData.isValidPtcLogin()) {  return logOnPtc(loginData);}break;default :}return new BpmResult("Invalid Login Type");}  }
class C{  @Override protected void initData(){  videoFilePresenter=new VideoFilePresenter();  videoFilePresenter.attachView(this);  if (path != null && !TextUtils.isEmpty(path)) {    tvFilePath.setText(path);    rootFile=new File(path);    videoFilePresenter.getVideoData(rootFile);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_ROOM_BAN_SELF_BANNED(String value0){  return new SM_SYSTEM_MESSAGE(1300865,value0);}  }
class C{  @Override public StyledLayerDescriptor create(){  StyledLayerDescriptor sld=getStyleFactory().createStyledLayerDescriptor();  NamedLayer namedLayer=getStyleFactory().createNamedLayer();  sld.addStyledLayer(namedLayer);  Style style=getStyleFactory().createStyle();  namedLayer.addStyle(style);  List<FeatureTypeStyle> ftsList=style.featureTypeStyles();  FeatureTypeStyle fts=getStyleFactory().createFeatureTypeStyle();  ftsList.add(fts);  Rule rule=getStyleFactory().createRule();  fts.rules().add(rule);  RasterSymbolizer raster=DefaultSymbols.createDefaultRasterSymbolizer();  rule.symbolizers().add(raster);  return sld;}  }
class C{  String internalsprintf(long s) throws IllegalArgumentException {  String s2="";switch (conversionCharacter) {case 'd':case 'i':    if (optionalh)     s2=printDFormat((short)s); else     if (optionall)     s2=printDFormat(s); else     s2=printDFormat((int)s);  break;case 'x':case 'X':if (optionalh) s2=printXFormat((short)s); else if (optionall) s2=printXFormat(s); else s2=printXFormat((int)s);break;case 'o':if (optionalh) s2=printOFormat((short)s); else if (optionall) s2=printOFormat(s); else s2=printOFormat((int)s);break;case 'c':case 'C':s2=printCFormat((char)s);break;default :throw new IllegalArgumentException("Cannot format a long with a format using a " + conversionCharacter + " conversion character.");}return s2;}  }
class C{  public static void expand(Rectangle2D r,double amount){  r.setRect(r.getX() - amount,r.getY() - amount,r.getWidth() + 2 * amount,r.getHeight() + 2 * amount);}  }
class C{  public boolean plusFound(){  return plusFound;}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public OpenSpacesMessageReceiver(Connector connector,FlowConstruct flowConstruct,InboundEndpoint endpoint) throws CreateException {  super(connector,flowConstruct,endpoint);  init(connector,endpoint);}  }
class C{  Version readVersion() throws FormatException {  if (parsedVersion != null) {    return parsedVersion;  }  int dimension=bitMatrix.getHeight();  int provisionalVersion=(dimension - 17) / 4;  if (provisionalVersion <= 6) {    return Version.getVersionForNumber(provisionalVersion);  }  int versionBits=0;  int ijMin=dimension - 11;  for (int j=5; j >= 0; j--) {    for (int i=dimension - 9; i >= ijMin; i--) {      versionBits=copyBit(i,j,versionBits);    }  }  Version theParsedVersion=Version.decodeVersionInformation(versionBits);  if (theParsedVersion != null && theParsedVersion.getDimensionForVersion() == dimension) {    parsedVersion=theParsedVersion;    return theParsedVersion;  }  versionBits=0;  for (int i=5; i >= 0; i--) {    for (int j=dimension - 9; j >= ijMin; j--) {      versionBits=copyBit(i,j,versionBits);    }  }  theParsedVersion=Version.decodeVersionInformation(versionBits);  if (theParsedVersion != null && theParsedVersion.getDimensionForVersion() == dimension) {    parsedVersion=theParsedVersion;    return theParsedVersion;  }  throw FormatException.getFormatInstance();}  }
class C{  protected PollsAddVoteQuery answerId(int value){  return unsafeParam("answer_id",value);}  }
class C{  public void saveMappingToFile(String fileName) throws IOException {  System.err.println("Writing name2id map to file: " + fileName);  try (Writer w=new FileWriter(fileName)){    writeMapping(w);  }   System.err.println("Done (" + id2name.size() + " entries)");}  }
class C{  public final void createView(WXVContainer parent,int index){  if (!isLazy()) {    createViewImpl(parent,index);  }}  }
class C{  public GUIHandler registerContainer(String id,Function<GUIContext,Container> creator){  containers.put(id,creator);  return this;}  }
class C{  public OpenMapRealVector(int dimension){  this(dimension,DEFAULT_ZERO_TOLERANCE);}  }
class C{  public SamLocusIterator(final SamReader samReader,final IntervalList intervalList){  this(samReader,intervalList,samReader.hasIndex());}  }
class C{  public PagesGetQuery pageId(Integer value){  return unsafeParam("page_id",value);}  }
class C{  public static final SM_SYSTEM_MESSAGE STR_MSG_UNEQUIP_RANKITEM(int value0){  return new SM_SYSTEM_MESSAGE(1401329,new DescriptionId(value0));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Spin_END_A_TO_SELF(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200756,skilltarget);}  }
class C{  public boolean cancel(boolean mayInterruptIfRunning){  return this.request != null && request.cancel(mayInterruptIfRunning);}  }
class C{  @Override protected Dispatcher createContentDispatcher(){  return new NSContentDispatcher();}  }
class C{  public static void shuffle(Object[] a){  if (a == null)   throw new NullPointerException("argument array is null");  int n=a.length;  for (int i=0; i < n; i++) {    int r=i + uniform(n - i);    Object temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  private URI buildNormalizedUri(UriInfo uriInfo){  UriBuilder builder=uriInfo.getRequestUriBuilder();  builder.replaceQuery("");  getNormalizedQueryParameters(uriInfo).forEach(null);  return builder.build();}  }
class C{  public CompositeAction(Visualization vis){  super(vis,0);}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public void write(byte b[]) throws IOException {  raf.write(b);}  }
class C{  public ArrayFieldVector(ArrayFieldVector<T> v,boolean deep) throws NullArgumentException {  MathUtils.checkNotNull(v);  field=v.getField();  data=deep ? v.data.clone() : v.data;}  }
class C{  private boolean isNumberDelta(String string){  String s=string.trim();  if (s.length() < 2)   return false;  return (s.charAt(0) == '+' || s.charAt(0) == '-') && isUnsignedNumber(s.substring(1));}  }
class C{  public static void deleteSortLocationIfExists(String tempFileLocation) throws CarbonSortKeyAndGroupByException {  File file=new File(tempFileLocation);  if (file.exists()) {    try {      CarbonUtil.deleteFoldersAndFiles(file);    } catch (    CarbonUtilException e) {      LOGGER.error(e);    }  }}  }
class C{  public static <K,R>Flowable<R> switchCase(Callable<? extends K> caseSelector,Map<? super K,? extends Publisher<? extends R>> mapOfCases,Publisher<? extends R> defaultCase){  ObjectHelper.requireNonNull(caseSelector,"caseSelector is null");  ObjectHelper.requireNonNull(mapOfCases,"mapOfCases is null");  ObjectHelper.requireNonNull(defaultCase,"defaultCase is null");  return RxJavaPlugins.onAssembly(new FlowableSwitchCase<R,K>(caseSelector,mapOfCases,defaultCase));}  }
class C{  public static void addPet(Player player,int petId,String name,int decorationId,int expireTime){  PetCommonData petCommonData=player.getPetList().addPet(player,petId,decorationId,name,expireTime);  if (petCommonData != null) {    PacketSendUtility.sendPacket(player,new SM_PET(1,petCommonData));    if (expireTime > 0) {      ExpireTimerTask.getInstance().addTask(petCommonData,player);    }  }}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Class[] getClassContext()")) {    java_lang_SecurityManager_getClassContext(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.ClassLoader currentClassLoader0()")) {    java_lang_SecurityManager_currentClassLoader0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Class currentLoadedClass0()")) {    java_lang_SecurityManager_currentLoadedClass0(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public ArrayRealVector(ArrayRealVector v,boolean deep){  data=deep ? v.data.clone() : v.data;}  }
class C{  public static Message createFromStream(InputStream stream) throws IOException, BencodeReadException, MessageException {  BencodeReader reader=new BencodeReader(stream);  Map<String,Object> dict=reader.readDict();  if (!dict.containsKey(TYPE)) {    System.out.println("Dictionary " + dict + " doesn't contain type");    throw new MessageException("Invalid message");  }  int messageType=(int)(long)dict.get(TYPE);switch (messageType) {case INTRODUCTION_REQUEST:    return IntroductionRequest.fromMap(dict);case INTRODUCTION_RESPONSE:  return IntroductionResponse.fromMap(dict);case PUNCTURE:return Puncture.fromMap(dict);case PUNCTURE_REQUEST:return PunctureRequest.fromMap(dict);default :throw new MessageException("Unknown message");}}  }
class C{  public static int calculateDaysInMonth(int month){  return calculateDaysInMonth(0,month);}  }
class C{  public static void appendContentPrefix(HttpServletRequest request,StringBuilder urlBuffer,String webSiteId){  try {    appendContentPrefix(request,(Appendable)urlBuffer,webSiteId);  } catch (  IOException e) {    throw UtilMisc.initCause(new InternalError(e.getMessage()),e);  }}  }
class C{  protected int compareEditions(Object left,Object right){  ISVNRemoteResource leftEdition=null;  if (left instanceof ResourceEditionNode) {    leftEdition=((ResourceEditionNode)left).getRemoteResource();  }  ISVNRemoteResource rightEdition=null;  if (right instanceof ResourceEditionNode)   rightEdition=((ResourceEditionNode)right).getRemoteResource();  if (leftEdition == null || rightEdition == null) {    return NODE_UNKNOWN;  }  if (leftEdition.isContainer() && rightEdition.isContainer()) {    return NODE_EQUAL;  }  if (leftEdition.isContainer() != rightEdition.isContainer()) {    return NODE_NOT_EQUAL;  }  String leftLocation=leftEdition.getRepository().getLocation();  String rightLocation=rightEdition.getRepository().getLocation();  if (!leftLocation.equals(rightLocation)) {    return NODE_UNKNOWN;  }  if (leftEdition.getUrl().equals(rightEdition.getUrl()) && leftEdition.getLastChangedRevision().equals(rightEdition.getLastChangedRevision())) {    return NODE_EQUAL;  } else {    return NODE_UNKNOWN;  }}  }
class C{  @Override protected void processPolar(double[] r,double[] phi){  int halfWinLength=r.length / 2;  for (int i=0; i < r.length; i++) {    double rNorm=r[i] / halfWinLength;    double factor=rNorm / (rNorm + threshold);    r[i]*=1 - factor;  }}  }
class C{  public UnitValueBoxPair(Unit unit,ValueBox valueBox){  this.unit=unit;  this.valueBox=valueBox;}  }
class C{  public void appendWarn(final String warnMessage){  if (this.warnMessage == null) {    this.warnMessage=warnMessage;  } else {    this.warnMessage+=("\n" + warnMessage);  }}  }
class C{  public void savePosition(){  RecordId rid1=s1.getRecordId();  RecordId rid2=(s2 == null) ? null : s2.getRecordId();  savedPosition=Arrays.asList(rid1,rid2);}  }
class C{  public static void writeStringToFile(String path,String toWrite,SparkContext sc) throws IOException {  FileSystem fileSystem=FileSystem.get(sc.hadoopConfiguration());  try (BufferedOutputStream bos=new BufferedOutputStream(fileSystem.create(new Path(path)))){    bos.write(toWrite.getBytes("UTF-8"));  } }  }
class C{  public void train(List<String> sentences,String pipelineModelFileName,int numFeatures){  List<WhitespaceContext> contexts=new ArrayList<WhitespaceContext>(sentences.size());  int id=0;  for (  String sentence : sentences) {    sentence=sentence.trim();    for (int j=0; j < sentence.length(); j++) {      char c=sentence.charAt(j);      if (c == ' ' || c == '_') {        WhitespaceContext context=new WhitespaceContext();        context.setId(id++);        context.setContext(extractContext(sentence,j));        context.setLabel(c == ' ' ? 0d : 1d);        contexts.add(context);      }    }  }  JavaRDD<WhitespaceContext> jrdd=jsc.parallelize(contexts);  DataFrame df=sqlContext.createDataFrame(jrdd,WhitespaceContext.class);  df.show(false);  System.out.println("N = " + df.count());  df.groupBy("label").count().show();  org.apache.spark.ml.feature.Tokenizer tokenizer=new Tokenizer().setInputCol("context").setOutputCol("words");  HashingTF hashingTF=new HashingTF().setNumFeatures(numFeatures).setInputCol(tokenizer.getOutputCol()).setOutputCol("features");  LogisticRegression lr=new LogisticRegression().setMaxIter(100).setRegParam(0.01);  Pipeline pipeline=new Pipeline().setStages(new PipelineStage[]{tokenizer,hashingTF,lr});  model=pipeline.fit(df);  try {    model.write().overwrite().save(pipelineModelFileName);  } catch (  IOException e) {    e.printStackTrace();  }  DataFrame predictions=model.transform(df);  predictions.show();  MulticlassClassificationEvaluator evaluator=new MulticlassClassificationEvaluator().setMetricName("precision");  double accuracy=evaluator.evaluate(predictions);  System.out.println("training accuracy = " + accuracy);  LogisticRegressionModel lrModel=(LogisticRegressionModel)model.stages()[2];  LogisticRegressionTrainingSummary trainingSummary=lrModel.summary();  double[] objectiveHistory=trainingSummary.objectiveHistory();  System.out.println("#(iterations) = " + objectiveHistory.length);  for (  double lossPerIteration : objectiveHistory) {    System.out.println(lossPerIteration);  }}  }
class C{  public SimpleLogFile(String name,long cookie,LogRemovalManager logMgr){  init(name,cookie,logMgr);}  }
class C{  public SubreportEndEntry(String name){  super();  this.name=name;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DICE_GIVEUP_OTHER(String value0){  return new SM_SYSTEM_MESSAGE(1390165,value0);}  }
class C{  public LeastSquaresBuilder model(final MultivariateJacobianFunction newModel){  this.model=newModel;  return this;}  }
class C{  public void closeRows(){  SQLModel.closeQuietly(currentRow);  SQLModel.closeQuietly(currentStatement);}  }
class C{  public static void copyToClipboard(String s){  StringSelection stringSelection=new StringSelection(s);  Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();  clipboard.setContents(stringSelection,null);}  }
class C{  public boolean string_constants(){  return soot.PhaseOptions.getBoolean(options,"string-constants");}  }
class C{  public void back(){  checkState(myIndex > 0);  this.myIndex-=1;}  }
class C{  public void createSubscription(final Color color,final boolean subscribe,final TabbedSubscriptionDetails subscriptionDetails,final MqttAsyncConnection connection,final MqttConnectionController connectionController,final Object parent){  logger.info("Creating subscription for " + subscriptionDetails.getTopic());  final MqttSubscription subscription=new MqttSubscription(subscriptionDetails.getTopic(),subscriptionDetails.getQos(),color,connection.getProperties().getConfiguredProperties().getMinMessagesStoredPerTopic(),connection.getPreferredStoreSize(),uiEventQueue,eventBus,connection.getStore().getFormattingManager(),UiProperties.getSummaryMaxPayloadLength(configurationManager.getUiPropertyFile()));  subscription.setConnection(connection);  subscription.setDetails(subscriptionDetails);  final SubscriptionController subscriptionController=createSubscriptionTab(false,subscription.getStore(),subscription,connection,connectionController);  subscriptionController.getTab().setContextMenu(ContextMenuUtils.createSubscriptionTabContextMenu(connection,subscription,eventBus,this,configurationManager,subscriptionController));  subscriptionController.setConnectionController(connectionController);  subscriptionController.setFormatters(configurationManager.getFormatters());  subscriptionController.setTabStatus(new TabStatus());  subscriptionController.getTabStatus().setVisibility(PaneVisibilityStatus.NOT_VISIBLE);  subscriptionController.init();  subscriptionController.onSubscriptionStatusChanged(new SubscriptionStatusChangeEvent(subscription));  subscription.setSubscriptionController(subscriptionController);  final SpyPerspective perspective=viewManager.getPerspective();  subscriptionController.setViewVisibility(MqttViewManager.getDetailedViewStatus(perspective),MqttViewManager.getBasicViewStatus(perspective));  subscriptionController.getTabStatus().setVisibility(PaneVisibilityStatus.ATTACHED);  subscriptionController.getTabStatus().setParent(connectionController.getSubscriptionTabs());  final TabPane subscriptionTabs=connectionController.getSubscriptionTabs();  subscriptionTabs.getTabs().add(subscriptionController.getTab());  subscriptionTabs.getTabs().get(ALL_SUBSCRIPTIONS_TAB_INDEX).setDisable(false);  if (subscribe) {    logger.debug("Trying to subscribe {}",subscription.getTopic());    connection.subscribe(subscription);  } else {    connection.addSubscription(subscription);    subscription.setActive(false);  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public ViewActionSeparator(){  this(-1);}  }
class C{  @deprecated public int hashCode(){  return this.text.hashCode() ^ this.pos ^ this.begin^ this.end;}  }
class C{  public VideoSaveQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  private void updateDisplay(boolean allowEmptyDisplay){  if (!allowEmptyDisplay && mTypedTimes.isEmpty()) {    int hour=mTimePicker.getHours();    int minute=mTimePicker.getMinutes();    setHour(hour,true);    setMinute(minute);    if (!mIs24HourMode) {      updateAmPmDisplay(hour < 12 ? HALF_DAY_1 : HALF_DAY_2);    }    setCurrentItemShowing(mTimePicker.getCurrentItemShowing(),true,true,true);    mDoneButton.setEnabled(true);  } else {    Boolean[] enteredZeros={false,false};    int[] values=getEnteredTime(enteredZeros);    String hourFormat=enteredZeros[0] ? "%02d" : "%2d";    String minuteFormat=(enteredZeros[1]) ? "%02d" : "%2d";    String hourStr=(values[0] == -1) ? mDoublePlaceholderText : String.format(hourFormat,values[0]).replace(' ',mPlaceholderText);    String minuteStr=(values[1] == -1) ? mDoublePlaceholderText : String.format(minuteFormat,values[1]).replace(' ',mPlaceholderText);    mHourView.setText(hourStr);    mHourSpaceView.setText(hourStr);    mHourView.setTextColor(mUnselectedColor);    mMinuteView.setText(minuteStr);    mMinuteSpaceView.setText(minuteStr);    mMinuteView.setTextColor(mUnselectedColor);    if (!mIs24HourMode) {      updateAmPmDisplay(values[2]);    }  }}  }
class C{  private double sigmoid(double x){  x=12.0 * x - 6.0;  return (1.0 / (1.0 + Math.exp(-1.0 * x)));}  }
class C{  public JSONObject putOnce(String key,Object value) throws JSONException {  if (key != null && value != null) {    if (opt(key) != null) {      throw new JSONException("Duplicate key \"" + key + "\"");    }    put(key,value);  }  return this;}  }
class C{  @Override protected Dispatcher createContentDispatcher(){  return new ContentDispatcher();}  }
class C{  private static boolean snapHorizontalGrid(Point candidatePoint){  int x=candidatePoint.x;  x=(x / SceneDraw.GRID_SPACING) * SceneDraw.GRID_SPACING;  candidatePoint.x=x;  return true;}  }
class C{  public static Object find(String urls,Properties customProperties,LifeCycle lifeCycle,CredentialsProvider credentialsProvider) throws FinderException {  return spaceFinder.findService(urls,customProperties,lifeCycle,credentialsProvider);}  }
class C{  @Bean public static PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer(){  return new PropertySourcesPlaceholderConfigurer();}  }
class C{  public Matrix zoom(float scaleX,float scaleY){  Matrix save=new Matrix();  save.set(mMatrixTouch);  save.postScale(scaleX,scaleY);  return save;}  }
class C{  public LongColumn(int nrows,int capacity,long defaultValue){  super(long.class,new Long(defaultValue));  if (capacity < nrows) {    throw new IllegalArgumentException("Capacity value can not be less than the row count.");  }  m_values=new long[capacity];  Arrays.fill(m_values,defaultValue);  m_size=nrows;}  }
class C{  protected void destroyOverlayPanelContent(){  if (mContent != null) {    mContent.destroy();    mContent=null;  }}  }
class C{  public boolean onError(MediaPlayer player,int arg1,int arg2){  Log.d(LOG_TAG,"AudioPlayer.onError(" + arg1 + ", "+ arg2+ ")");  this.player.stop();  this.player.release();  sendErrorStatus(arg1);  return false;}  }
class C{  public static void triggerRefresh(){  Bundle extras=new Bundle();  extras.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);  extras.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED,true);  ContentResolver.requestSync(AccountUtils.getAccount(),FeedContract.CONTENT_AUTHORITY,extras);}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Method.GET:  return new HttpGet(request.getUrl());case Method.DELETE:return new HttpDelete(request.getUrl());case Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}case Method.HEAD:return new HttpHead(request.getUrl());case Method.OPTIONS:return new HttpOptions(request.getUrl());case Method.TRACE:return new HttpTrace(request.getUrl());case Method.PATCH:{HttpPatch patchRequest=new HttpPatch(request.getUrl());patchRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(patchRequest,request);return patchRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  @Override public RecordReader createReader(InputSplit split,Configuration conf) throws IOException, InterruptedException {  RecordReader reader=new ListStringRecordReader();  reader.initialize(conf,split);  return reader;}  }
class C{  private static void increaseKinahAmount(Player player,long price){  player.getInventory().increaseKinah(price);}  }
class C{  public BrokenOutputStream(IOException exception){  this.exception=exception;}  }
class C{  public void removeOnItemTouchListener(RecyclerView.OnItemTouchListener listener){  mRecycler.removeOnItemTouchListener(listener);}  }
class C{  public static String addOrderTerm(HttpServletRequest request,HttpServletResponse response){  ShoppingCart cart=getCartObject(request);  Locale locale=UtilHttp.getLocale(request);  String termTypeId=request.getParameter("termTypeId");  String termValueStr=request.getParameter("termValue");  String termDaysStr=request.getParameter("termDays");  String textValue=request.getParameter("textValue");  String description=request.getParameter("description");  GenericValue termType=null;  Delegator delegator=(Delegator)request.getAttribute("delegator");  BigDecimal termValue=null;  Long termDays=null;  if (UtilValidate.isEmpty(termTypeId)) {    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderOrderTermTypeIsRequired",locale));    return "error";  }  try {    termType=EntityQuery.use(delegator).from("TermType").where("termTypeId",termTypeId).queryOne();  } catch (  GenericEntityException gee) {    request.setAttribute("_ERROR_MESSAGE_",gee.getMessage());    return "error";  }  if (("FIN_PAYMENT_TERM".equals(termTypeId) && UtilValidate.isEmpty(termDaysStr)) || (UtilValidate.isNotEmpty(termType) && "FIN_PAYMENT_TERM".equals(termType.get("parentTypeId")) && UtilValidate.isEmpty(termDaysStr))) {    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderOrderTermDaysIsRequired",locale));    return "error";  }  if (UtilValidate.isNotEmpty(termValueStr)) {    try {      termValue=new BigDecimal(termValueStr);    } catch (    NumberFormatException e) {      request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderOrderTermValueError",UtilMisc.toMap("orderTermValue",termValueStr),locale));      return "error";    }  }  if (UtilValidate.isNotEmpty(termDaysStr)) {    try {      termDays=Long.valueOf(termDaysStr);    } catch (    NumberFormatException e) {      request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderOrderTermDaysError",UtilMisc.toMap("orderTermDays",termDaysStr),locale));      return "error";    }  }  removeOrderTerm(request,response);  cart.addOrderTerm(termTypeId,null,termValue,termDays,textValue,description);  return "success";}  }
class C{  private void sendNotification(String messageBody){  Intent intent=new Intent(this,MainActivity.class);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  PendingIntent pendingIntent=PendingIntent.getActivity(this,0,intent,PendingIntent.FLAG_ONE_SHOT);  Uri defaultSoundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);  NotificationCompat.Builder notificationBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.mipmap.ic_launcher).setContentTitle("FCM Message").setContentText(messageBody).setAutoCancel(true).setSound(defaultSoundUri).setContentIntent(pendingIntent);  NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.notify(0,notificationBuilder.build());}  }
class C{  protected void buildExceptionalEdges(Map<Unit,List<Unit>> unitToSuccs,Map<Unit,List<Unit>> unitToPreds){  super.buildExceptionalEdges(unitToSuccs,unitToPreds);  for (Iterator<Trap> trapIt=body.getTraps().iterator(); trapIt.hasNext(); ) {    Trap trap=trapIt.next();    Unit firstTrapped=trap.getBeginUnit();    Unit catcher=trap.getHandlerUnit();    List<Unit> origPredsOfTrapped=new ArrayList<Unit>(getPredsOf(firstTrapped));    for (Iterator<Unit> unitIt=origPredsOfTrapped.iterator(); unitIt.hasNext(); ) {      Unit pred=unitIt.next();      addEdge(unitToSuccs,unitToPreds,pred,catcher);    }  }}  }
class C{  public Vector3f scaleAdd(float scalar,Vector3f add){  x=x * scalar + add.x;  y=y * scalar + add.y;  z=z * scalar + add.z;  return this;}  }
class C{  public <T>T readLine(Class<T> clazz) throws CommandException {  String readLine=readLine().trim();  Method valueOfMethod=null;  try {    valueOfMethod=clazz.getMethod("valueOf",String.class);  } catch (  NoSuchMethodException nsme) {    throw new RuntimeException("Type (" + clazz.getName() + ") must implement valueOf with single argument of type String",nsme);  }  try {    return (T)valueOfMethod.invoke(null,readLine);  } catch (  IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {    throw new CommandException("Invalid input",e);  }}  }
class C{  private void listSummaryRec(ViewerBase viewer,Classification classification,NodeSet selectedNodes,Node v,int indent,Writer outs,final Single<Integer> countLines) throws IOException {  int id=(Integer)v.getInfo();  final String name=classification.getName2IdMap().get(id);  NodeData data=(viewer.getNodeData(v));  if ((selectedNodes == null || selectedNodes.contains(v))) {    if (data.getCountSummarized() > 0) {      for (int i=0; i < indent; i++)       outs.write(" ");      outs.write(name + ": " + Basic.toString(data.getSummarized(),",")+ "\n");      countLines.set(countLines.get() + 1);    }  }  if (viewer.getCollapsedIds().contains(id)) {    return;  }  for (Edge f=v.getFirstOutEdge(); f != null; f=v.getNextOutEdge(f)) {    listSummaryRec(viewer,classification,selectedNodes,f.getOpposite(v),indent + 2,outs,countLines);  }}  }
class C{  public boolean containsValue(V val){  byte[] states=_states;  V[] vals=_values;  if (null == val) {    for (int i=vals.length; i-- > 0; ) {      if (states[i] == FULL && val == vals[i]) {        return true;      }    }  } else {    for (int i=vals.length; i-- > 0; ) {      if (states[i] == FULL && (val == vals[i] || val.equals(vals[i]))) {        return true;      }    }  }  return false;}  }
class C{  public VideoSearchQuery(VkApiClient client,UserActor actor,String q){  super(client,"video.search",SearchResponse.class);  accessToken(actor.getAccessToken());  q(q);}  }
class C{  public static byte[] toByteArray(InputStream input) throws IOException {  com.android.base.common.io.stream.ByteArrayOutputStream output=new com.android.base.common.io.stream.ByteArrayOutputStream();  copy(input,output);  return output.toByteArray();}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if (object == null) {    return false;  }  if (getClass() != object.getClass()) {    return false;  }  Member other=(Member)object;  return name.equals(other.name) && value.equals(other.value);}  }
class C{  @NotNull public static String dominantEmotionWithScore(@NotNull Emotion emotion){  Map.Entry<Emotion.EmotionScore,Double> scoreVal=emotion.scores.scores().entrySet().stream().max(null).get();  return String.format("%s:%.2f",StringUtils.capitalize(scoreVal.getKey().name()),scoreVal.getValue());}  }
class C{  private void eatImage(){  if (getBitePosition()) {    setBittenImage();  }}  }
class C{  public static boolean isAllowed(Class<?> typeToCheck,Class<?> attributeType){  if (allowedClassTypeMap.isEmpty()) {    initialise();  }  List<Class<?>> list=allowedClassTypeMap.get(attributeType);  if (list == null) {    return false;  }  return list.contains(typeToCheck);}  }
class C{  private RootNode modifyMessageConversationRead(String userUid,List<String> uids,HttpServletResponse response,boolean readValue){  RootNode responseNode=new RootNode("response");  User currentUser=currentUserService.getCurrentUser();  User user=userUid != null ? userService.getUser(userUid) : currentUser;  if (user == null) {    response.setStatus(HttpServletResponse.SC_NOT_FOUND);    responseNode.addChild(new SimpleNode("message","No user with uid: " + userUid));    return responseNode;  }  if (!canModifyUserConversation(currentUser,user)) {    throw new UpdateAccessDeniedException("Not authorized to modify this object.");  }  Collection<org.hisp.dhis.message.MessageConversation> messageConversations=messageService.getMessageConversations(user,uids);  if (messageConversations.isEmpty()) {    response.setStatus(HttpServletResponse.SC_NOT_FOUND);    responseNode.addChild(new SimpleNode("message","No MessageConversations found for the given IDs."));    return responseNode;  }  CollectionNode marked=responseNode.addChild(new CollectionNode(readValue ? "markedRead" : "markedUnread"));  marked.setWrapping(false);  for (  org.hisp.dhis.message.MessageConversation conversation : messageConversations) {    boolean success=(readValue ? conversation.markRead(user) : conversation.markUnread(user));    if (success) {      messageService.updateMessageConversation(conversation);      marked.addChild(new SimpleNode("uid",conversation.getUid()));    }  }  response.setStatus(HttpServletResponse.SC_OK);  return responseNode;}  }
class C{  public DocumentTypeImpl(CoreDocumentImpl ownerDocument,String qualifiedName,String publicID,String systemID){  this(ownerDocument,qualifiedName);  this.publicID=publicID;  this.systemID=systemID;}  }
class C{  protected AudioEditQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public ChunkManager(World world,long seed){  this.world=world;  loadSeed(seed);  generateTerrain();  this.random=new Random();}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  ListAdapter adapter=getAdapter();  if (adapter != null && !(adapter instanceof HeaderViewGridAdapter)) {    throw new IllegalStateException("Cannot add header view to grid -- setAdapter has already been called.");  }  ViewGroup.LayoutParams lyp=v.getLayoutParams();  FixedViewInfo info=new FixedViewInfo();  FrameLayout fl=new FullWidthFixedViewLayout(getContext());  if (lyp != null) {    v.setLayoutParams(new FrameLayout.LayoutParams(lyp.width,lyp.height));    fl.setLayoutParams(new LayoutParams(lyp.width,lyp.height));  }  fl.addView(v);  info.view=v;  info.viewContainer=fl;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);  if (adapter != null) {    ((HeaderViewGridAdapter)adapter).notifyDataSetChanged();  }}  }
class C{  public void updateAnchor(){  if (mOwner != null) {    ConstraintWidget widget=mOwner.getConstraintWidget();    if (widget instanceof Guideline) {      mAnchor=((Guideline)widget).getAnchor();    } else {      mAnchor=widget.getAnchor(mType);    }  } else {    mAnchor=null;  }}  }
class C{  public String createGroupWithPeople(@NotNull String personGroupId,@NotNull People people){  Validation.validateArray(people.simplePersons(),1,1000,new ParameterValidationException("people","People list is invalid. min 1, max 1000"));  boolean exists=!Utils.throwsException(null,PersonGroupNotFoundException.class);  if (!exists) {    personGroupBuilder.createGroup(personGroupId,personGroupId,"").withNoResult();  }  people.simplePersons().stream().forEach(null);  personGroupBuilder.trainGroup(personGroupId).withNoResult();  return personGroupId;}  }
class C{  public void printDurationRestart(String tag){  LogUtils.i(tag + " :  " + durationRestart());}  }
class C{  private static final String export(SandboxRay ray,String tabs){  StringBuilder sb=new StringBuilder();  sb.append(tabs).append("List<RaycastResult> results = new ArrayList<RaycastResult>();").append(NEW_LINE);  sb.append(tabs).append("Ray ray = new Ray(").append(export(ray.getStart())).append(", ").append("Math.toRadians(").append(Math.toDegrees(ray.getDirection())).append(")").append(");").append(NEW_LINE);  sb.append(tabs).append("world.raycast(ray, ").append(ray.getLength()).append(", ").append("null, ").append(ray.isIgnoreSensors()).append(", ").append("true, ").append(ray.isAll()).append(", ").append("results);").append(NEW_LINE);  return sb.toString();}  }
class C{  public AndExtended(List<Filter> children){  super(children);}  }
class C{  private StringFlowable(){  throw new IllegalStateException("No instances!");}  }
class C{  public synchronized void add(int index,Object element){  Object[] elements=getArray();  int len=elements.length;  if (index > len || index < 0)   throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ len);  Object[] newElements;  int numMoved=len - index;  if (numMoved == 0)   newElements=copyOf(elements,len + 1); else {    newElements=new Object[len + 1];    System.arraycopy(elements,0,newElements,0,index);    System.arraycopy(elements,index,newElements,index + 1,numMoved);  }  newElements[index]=element;  setArray(newElements);}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  public boolean intersects(S2LatLngRect other){  return lat.intersects(other.lat) && lng.intersects(other.lng);}  }
class C{  public Sample(BufferedReader reader,int numChannels){  try {    String line=reader.readLine();    StringTokenizer tok=new StringTokenizer(line);    if (!tok.nextToken().equals("FRAME")) {      throw new Error("frame Parsing sample error");    }    frameData=new short[numChannels];    for (int i=0; i < numChannels; i++) {      int svalue=Integer.parseInt(tok.nextToken()) - 32768;      if (svalue < -32768 || svalue > 32767) {        throw new Error("data out of short range");      }      frameData[i]=(short)svalue;    }    line=reader.readLine();    tok=new StringTokenizer(line);    if (!tok.nextToken().equals("RESIDUAL")) {      throw new Error("residual Parsing sample error");    }    residualSize=Integer.parseInt(tok.nextToken());    residualData=new byte[residualSize];    for (int i=0; i < residualSize; i++) {      int bvalue=Integer.parseInt(tok.nextToken()) - 128;      if (bvalue < -128 || bvalue > 127) {        throw new Error("data out of byte range");      }      residualData[i]=(byte)bvalue;    }  } catch (  NoSuchElementException nse) {    throw new Error("Parsing sample error " + nse.getMessage());  }catch (  IOException ioe) {    throw new Error("IO error while parsing sample" + ioe.getMessage());  }}  }
class C{  public static String convertTeamColorToName(final int teamValue){  final Team[] teams=Team.values();  for (  final Team team : teams) {    if (team.getValue() == teamValue) {      return StringUtils.capitalize(team.toString().toLowerCase().replaceAll("team_",""));    }  }  return "UNKNOWN_TEAM";}  }
class C{  private static Menu insertOrUpdate(long parent,String name,V v){  String node=Model.node();  W q=W.create().and("parent",parent).and("name",name).and("node",node);  try {    if (Helper.exists(q,Menu.class)) {      Helper.update(q,v,Menu.class);    } else {      long id=UID.next("menu.id");      while (Helper.exists(W.create(X.ID,id),Menu.class)) {        id=UID.next("menu.id");        log.debug("id=" + id);      }      Helper.insert(v.set(X.ID,id).set("id",id).set("parent",parent).set("name",name).set("node",node),Menu.class);    }  } catch (  Exception e1) {    log.error(e1.getMessage(),e1);  }  long count=Helper.count(W.create("parent",parent),Menu.class);  Helper.update(parent,V.create("childs",count),Menu.class);  return Helper.load(q,Menu.class);}  }
class C{  public static boolean hasPermission(CordovaPlugin plugin,String permission){  try {    Method hasPermission=CordovaInterface.class.getDeclaredMethod("hasPermission",String.class);    return (Boolean)hasPermission.invoke(plugin.cordova,permission);  } catch (  NoSuchMethodException noSuchMethodException) {    LOG.d(LOG_TAG,"No need to check for permission " + permission);    return true;  }catch (  IllegalAccessException illegalAccessException) {    LOG.e(LOG_TAG,"IllegalAccessException when checking permission " + permission,illegalAccessException);  }catch (  InvocationTargetException invocationTargetException) {    LOG.e(LOG_TAG,"invocationTargetException when checking permission " + permission,invocationTargetException);  }  return false;}  }
class C{  public static boolean shouldShowRequestPermissionRationale(Activity activity,String... permissions){  for (  String permission : permissions) {    if (ActivityCompat.shouldShowRequestPermissionRationale(activity,permission)) {      return true;    }  }  return false;}  }
class C{  public String toJson() throws JsonGenerationException, JsonMappingException, IOException {  ObjectMapper mapper=new ObjectMapper();  return mapper.writeValueAsString(this);}  }
class C{  public String formatPeriod(Period period){  if (period == null) {    return null;  }  String typeName=period.getPeriodType().getName();  if (typeName.equals(WeeklyPeriodType.NAME)) {    return period.getIsoDate();  }  String keyStartDate="format." + typeName + ".startDate";  String keyEndDate="format." + typeName + ".endDate";  String startPattern=resourceBundle.getString(keyStartDate);  String endPattern=resourceBundle.getString(keyEndDate);  boolean dayPattern=startPattern.contains("dd") || endPattern.contains("dd");  Date periodStartDate=period.getStartDate();  Date periodEndDate=period.getEndDate();  DateTimeUnit start=PeriodType.getCalendar().fromIso(periodStartDate);  DateTimeUnit end=PeriodType.getCalendar().fromIso(periodEndDate);  String startDate;  String endDate;  if (!dayPattern) {    start.setDay(1);    end.setDay(1);    startDate=commonFormatting(new DateTimeUnit(start,true).toJdkDate(),startPattern);    endDate=commonFormatting(new DateTimeUnit(end,true).toJdkDate(),endPattern);  } else {    startDate=PeriodType.getCalendar().formattedDate(startPattern,start);    endDate=PeriodType.getCalendar().formattedDate(endPattern,end);  }  try {    return Character.toUpperCase(startDate.charAt(0)) + startDate.substring(1) + endDate;  } catch (  IllegalArgumentException ex) {    return INVALID_DATE;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_LEAVE_DONE(String value0){  return new SM_SYSTEM_MESSAGE(1300241,value0);}  }
class C{  private void initPeerLists(){  ListView incomingPeerConnectionListView=(ListView)findViewById(R.id.incoming_peer_connection_list_view);  ListView outgoingPeerConnectionListView=(ListView)findViewById(R.id.outgoing_peer_connection_list_view);  incomingPeerAdapter=new PeerListAdapter(getApplicationContext(),R.layout.peer_connection_list_item,incomingList,Peer.INCOMING);  incomingPeerConnectionListView.setAdapter(incomingPeerAdapter);  outgoingPeerAdapter=new PeerListAdapter(getApplicationContext(),R.layout.peer_connection_list_item,outgoingList,Peer.OUTGOING);  outgoingPeerConnectionListView.setAdapter(outgoingPeerAdapter);}  }
class C{  public List<Layer> createOverlays(){  return Collections.emptyList();}  }
class C{  protected void handleMatcherFinishedWithFileSide(){}  }
class C{  public void moveToId(int id){  currentSlot=id;}  }
class C{  public Set<String> toFilenameSet(int iSubset){  HashSet s=new HashSet();  if ((iSubset & FROM_TRAINING_SET) > 0)   for (  Object elem : getTrainingSet()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)elem;    s.add(cfeCur.getFileName());  }  if ((iSubset & FROM_TEST_SET) > 0)   for (  Object elem : getTestSet()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)elem;    s.add(cfeCur.getFileName());  }  return s;}  }
class C{  public boolean needToShowDecorations(){  return mShowDecorations;}  }
class C{  public static void main(String[] args){  String time=null;  String dumpFile=null;  String protocol=null;  boolean timeTest=false;  int iterations=1;  int delay=0;  boolean setMetrics=false;  boolean setDetailedMetrics=false;  boolean setVerbose=false;  boolean setDumpUtterance=false;  boolean setDumpRelations=false;  String waveDumpFile=null;  String runTitle=null;  boolean setSilentMode=false;  String audioFile=null;  boolean setInputMode=false;  String voiceName=null;  for (int i=0; i < args.length; i++) {    if (args[i].equals("-metrics")) {      setMetrics=true;    } else     if (args[i].equals("-detailedMetrics")) {      setDetailedMetrics=true;    } else     if (args[i].equals("-silent")) {      setSilentMode=true;    } else     if (args[i].equals("-period")) {      if (++i < args.length) {        try {          delay=Integer.parseInt(args[i]);        } catch (        NumberFormatException nfe) {          System.out.println("Bad clock period");          usage();        }      }    } else     if (args[i].equals("-verbose")) {      setVerbose=true;    } else     if (args[i].equals("-dumpUtterance")) {      setDumpUtterance=true;    } else     if (args[i].equals("-dumpRelations")) {      setDumpRelations=true;    } else     if (args[i].equals("-clockMode")) {      iterations=Integer.MAX_VALUE;      delay=300;    } else     if (args[i].equals("-timeTest")) {      timeTest=true;      iterations=100;    } else     if (args[i].equals("-dumpAudio")) {      if (++i < args.length) {        audioFile=args[i];      } else {        usage();      }    } else     if (args[i].equals("-iter")) {      if (++i < args.length) {        try {          iterations=Integer.parseInt(args[i]);        } catch (        NumberFormatException nfe) {          System.out.println("Bad iteration format");          usage();        }      } else {        usage();      }    } else     if (args[i].equals("-dumpASCII")) {      if (++i < args.length) {        dumpFile=args[i];        waveDumpFile=args[i];      } else {        usage();      }    } else     if (args[i].equals("-version")) {      System.out.println(VERSION);    } else     if (args[i].equals("-help")) {      usage();    } else     if (args[i].equals("-time")) {      setInputMode=true;      if (++i < args.length) {        time=args[i];      } else {        usage();      }    } else     if (args[i].equals("-run")) {      if (++i < args.length) {        runTitle=args[i];      } else {        usage();      }    } else     if (args[i].equals("-voice")) {      if (++i < args.length) {        voiceName=args[i];      } else {        usage();      }    } else {      System.out.println("Unknown option:" + args[i]);    }  }  if (voiceName == null) {    voiceName="alan";  }  FreeTTSTime freetts=new FreeTTSTime(VoiceManager.getInstance().getVoice(voiceName));  Voice voice=freetts.getVoice();  if (setMetrics) {    voice.setMetrics(true);  }  if (setDetailedMetrics) {    voice.setDetailedMetrics(true);  }  if (setVerbose) {    voice.setVerbose(true);  }  if (setDumpUtterance) {    voice.setDumpUtterance(true);  }  if (setDumpRelations) {    voice.setDumpRelations(true);  }  if (waveDumpFile != null) {    voice.setWaveDumpFile(waveDumpFile);  }  if (runTitle != null) {    voice.setRunTitle(runTitle);  }  if (setSilentMode) {    freetts.setSilentMode(true);  }  if (audioFile != null) {    freetts.setAudioFile(audioFile);  }  if (setInputMode) {    freetts.setInputMode(InputMode.TEXT);  }  freetts.startup();  if (time != null) {    freetts.getVoice().startBatch();    for (int i=0; i < iterations; i++) {      freetts.safeTimeToSpeech(time);      try {        Thread.sleep(delay * 1000L);      } catch (      InterruptedException ie) {        break;      }    }    freetts.getVoice().endBatch();  } else {    interactiveMode(freetts);  }  freetts.shutdown();  System.exit(0);}  }
class C{  final void fillQName(QName toFill,String uri,String localpart,String prefix){  if (!fStringsInternalized) {    uri=(uri != null && uri.length() > 0) ? fSymbolTable.addSymbol(uri) : null;    localpart=(localpart != null) ? fSymbolTable.addSymbol(localpart) : XMLSymbols.EMPTY_STRING;    prefix=(prefix != null && prefix.length() > 0) ? fSymbolTable.addSymbol(prefix) : XMLSymbols.EMPTY_STRING;  } else {    if (uri != null && uri.length() == 0) {      uri=null;    }    if (localpart == null) {      localpart=XMLSymbols.EMPTY_STRING;    }    if (prefix == null) {      prefix=XMLSymbols.EMPTY_STRING;    }  }  String raw=localpart;  if (prefix != XMLSymbols.EMPTY_STRING) {    fStringBuffer.clear();    fStringBuffer.append(prefix);    fStringBuffer.append(':');    fStringBuffer.append(localpart);    raw=fSymbolTable.addSymbol(fStringBuffer.ch,fStringBuffer.offset,fStringBuffer.length);  }  toFill.setValues(prefix,localpart,raw,uri);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_COMBINE_NO_COMPONENT_ITEM_SINGLE(String value0){  return new SM_SYSTEM_MESSAGE(1330046,value0);}  }
class C{  private void weakRegionDFS(Block v,int r){  try {    this.m_regions.get(r).add(v);    DominatorNode<Block> parentOfV=this.m_dom.getParentOf(this.m_dom.getDode(v));    Block u2=(parentOfV == null) ? null : parentOfV.getGode();    List<DominatorNode<Block>> children=this.m_pdom.getChildrenOf(this.m_pdom.getDode(v));    for (int i=0; i < children.size(); i++) {      DominatorNode<Block> w=children.get(i);      Block u1=w.getGode();      if (u2 != null && u1.equals(u2)) {        this.weakRegionDFS(w.getGode(),r);      } else {        this.m_regCount++;        this.m_regions.put(this.m_regCount,this.createRegion(this.m_regCount));        this.weakRegionDFS(w.getGode(),this.m_regCount);      }    }  } catch (  RuntimeException e) {    G.v().out.println("[RegionAnalysis] Exception in weakRegionDFS: " + e);    G.v().out.println("v is  " + v.toShortString() + " in region "+ r);    G.v().out.flush();  }}  }
class C{  @deprecated protected int write(int unit){  int newLength=this.charsLength + 1;  ensureCapacity(newLength);  this.charsLength=newLength;  this.chars[(this.chars.length - this.charsLength)]=((char)unit);  return this.charsLength;}  }
class C{  private static String keyForPayload(String name){  return "service_payload_" + name;}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  public boolean isRtlSupported(){  sync();  return myApplicationSupportsRtl;}  }
class C{  public void transformValues(TObjectFunction<V,V> function){  byte[] states=_states;  V[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_MY_DODGE(String value0){  return new SM_SYSTEM_MESSAGE(1210002,value0);}  }
class C{  @Override public int read(byte bytes[],int offset,int length) throws IOException {  int r;  if ((r=in.read(bytes,offset,length)) == -1)   return r;  md5.Update(bytes,offset,r);  return r;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately("set mode=" + (Comparer.COMPARISON_MODE.RELATIVE) + ";");  CompareWindow viewer=(CompareWindow)getParent();  viewer.getCommandManager().updateEnableState();}  }
class C{  public static void showDocument(String url){  boolean windows=isWindowsPlatform();  String cmd=null;  try {    if (windows) {      cmd=WIN_PATH + " " + WIN_FLAG+ " "+ url;      Runtime.getRuntime().exec(cmd);    } else {      cmd=UNIX_PATH + " " + UNIX_FLAG+ "("+ url+ ")";      Process p=Runtime.getRuntime().exec(cmd);      try {        int exitCode=p.waitFor();        if (exitCode != 0) {          cmd=UNIX_PATH + " " + url;          p=Runtime.getRuntime().exec(cmd);        }      } catch (      InterruptedException x) {        System.err.println("Error bringing up browser, cmd='" + cmd + "'");        System.err.println("Caught: " + x);      }    }  } catch (  IOException x) {    System.err.println("Could not invoke browser, command=" + cmd);    System.err.println("Caught: " + x);  }}  }
class C{  public NotPredicate(Predicate p){  m_predicate=p;}  }
class C{  public void onStart(){  if (mFullscreenManager != null) {    mLastContentOffset=mFullscreenManager.getContentOffset();    mLastVisibleContentOffset=mFullscreenManager.getVisibleContentOffset();    mFullscreenManager.addListener(this);  }  requestRender();}  }
class C{  public void addParam(ModelParam param){  if (param != null) {    contextInfo.put(param.name,param);    contextParamList.add(param);  }}  }
class C{  public WallCreateCommentQuery replyToComment(Integer value){  return unsafeParam("reply_to_comment",value);}  }
class C{  @HEAD @Path("{table}/{blobId}") @RequiresPermissions("blob|read|{table}") @Timed(name="bv.emodb.blob.BlobStoreResource1.head",absolute=true) @ApiOperation(value="Retrieves the current version of a piece of content from the data store.",notes="Returns a response object.",response=Response.class) public Response head(@PathParam("table") String table,@PathParam("blobId") String blobId){  BlobMetadata blob=_blobStore.getMetadata(table,blobId);  Response.ResponseBuilder response=Response.ok();  setHeaders(response,blob,null);  return response.build();}  }
class C{  public Builder renameColumn(String oldName,String newName){  return transform(new RenameColumnsTransform(oldName,newName));}  }
class C{  public CompositeAction(long duration){  super(null,duration,Activity.DEFAULT_STEP_TIME);}  }
class C{  @Override public boolean equals(Object that){  if (this == that) {    return true;  }  if (that == null) {    return false;  }  if (getClass() != that.getClass()) {    return false;  }  SysDic other=(SysDic)that;  return (this.getId() == null ? other.getId() == null : this.getId().equals(other.getId())) && (this.getIndexId() == null ? other.getIndexId() == null : this.getIndexId().equals(other.getIndexId())) && (this.getCode() == null ? other.getCode() == null : this.getCode().equals(other.getCode()))&& (this.getCodeText() == null ? other.getCodeText() == null : this.getCodeText().equals(other.getCodeText()))&& (this.getSortNo() == null ? other.getSortNo() == null : this.getSortNo().equals(other.getSortNo()))&& (this.getEditable() == null ? other.getEditable() == null : this.getEditable().equals(other.getEditable()))&& (this.getEnable() == null ? other.getEnable() == null : this.getEnable().equals(other.getEnable()))&& (this.getRemark() == null ? other.getRemark() == null : this.getRemark().equals(other.getRemark()))&& (this.getCreateBy() == null ? other.getCreateBy() == null : this.getCreateBy().equals(other.getCreateBy()))&& (this.getCreateTime() == null ? other.getCreateTime() == null : this.getCreateTime().equals(other.getCreateTime()))&& (this.getUpdateBy() == null ? other.getUpdateBy() == null : this.getUpdateBy().equals(other.getUpdateBy()))&& (this.getUpdateTime() == null ? other.getUpdateTime() == null : this.getUpdateTime().equals(other.getUpdateTime()));}  }
class C{  int readCorner2(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 3,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 2,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 4,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  private void start(){  mStarted=true;  mEnableSessionInvalidationsTimer.resume();  Intent intent=new Intent(mContext,InvalidationClientService.class);  mContext.startService(intent);}  }
class C{  public int degree(){  return x.length - 1;}  }
class C{  public Iterator tuples(IntIterator rows){  return m_tuples.iterator(rows);}  }
class C{  @Override public Pair<Aggregation,Aggregation> nest(){  String nestingName=getName();  Aggregation inner=withName(nestingName);  Aggregation outer=new LongSumAggregation(getName(),nestingName);  return new ImmutablePair<>(outer,inner);}  }
class C{  public static Map<String,Object> sendMailHiddenInLogFromScreen(DispatchContext dctx,Map<String,? extends Object> rServiceContext){  Map<String,Object> serviceContext=UtilMisc.makeMapWritable(rServiceContext);  serviceContext.put("hideInLog",true);  return sendMailFromScreen(dctx,serviceContext);}  }
class C{  public Vector add(Vector other){  return new Vector(x + other.x,y + other.y);}  }
class C{  public void toggleSelection(int position){  toggleSelection(position,false);}  }
class C{  @Override public boolean containsSymbol(String symbol){  int bucket=hash(symbol) % fTableSize;  int length=symbol.length();  OUTER:   for (SREntry entry=fBuckets[bucket]; entry != null; entry=entry.next) {    SREntryData data=(SREntryData)entry.get();    if (data == null) {      continue;    }    if (length == data.characters.length) {      for (int i=0; i < length; i++) {        if (symbol.charAt(i) != data.characters[i]) {          continue OUTER;        }      }      return true;    }  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_DODGED_A_TO_ME(String value0){  return new SM_SYSTEM_MESSAGE(1201088,value0);}  }
class C{  protected void shiftLeft(){  for (int i=mant.length - 1; i > 0; i--) {    mant[i]=mant[i - 1];  }  mant[0]=0;  exp--;}  }
class C{  public static void loadArmLibrary(ApplicationLike applicationLike,String libName){  if (libName == null || libName.isEmpty() || applicationLike == null) {    throw new TinkerRuntimeException("libName or context is null!");  }  if (TinkerApplicationHelper.isTinkerEnableForNativeLib(applicationLike)) {    if (TinkerApplicationHelper.loadLibraryFromTinker(applicationLike,"lib/armeabi",libName)) {      return;    }  }  System.loadLibrary(libName);}  }
class C{  public List<X509Certificate> checkServerTrusted(X509Certificate[] chain,String authType,SSLSession session) throws CertificateException {  return checkTrusted(chain,authType,session,null,false);}  }
class C{  @Override public boolean isEnabled(){  if ((attributeSelectionPanel != null) && !isValueOnly()) {    return attributeSelectionPanel.isEnabled();  } else {    if (this.checkBox != null) {      return checkBox.isEnabled();    }  }  return false;}  }
class C{  public int signum(){  return signum;}  }
class C{  public T waitForResult() throws InterruptedException {  try {    return waitForResult(-1,TimeUnit.MILLISECONDS);  } catch (  TimeoutException e) {    throw new RuntimeException("Should not occur as we are waiting forever");  }}  }
class C{  public void clear(){  this.map.clear();}  }
class C{  protected void saveBaseURI(){  fBaseURIScope.push(fDepth);  fBaseURI.push(fCurrentBaseURI.getBaseSystemId());  fLiteralSystemID.push(fCurrentBaseURI.getLiteralSystemId());  fExpandedSystemID.push(fCurrentBaseURI.getExpandedSystemId());}  }
class C{  public static final void toString(StringBuffer output,char[] tab){  if (tab == null) {    output.append("null");    return;  }  output.append("(");  int size=tab.length;  output.append(size);  if (listMax == -1 || size <= listMax) {    for (int i=0; i < size; i++) {      output.append(",");      output.append(tab[i]);    }  } else {    int border=size / 2;    if (listBorder < border)     border=listBorder;    for (int i=0; i < border; i++) {      output.append(",");      output.append(tab[i]);    }    output.append(",...");    for (int i=border; i > 0; i--) {      output.append(",");      output.append(tab[size - i]);    }  }  output.append(")");}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  for (int k=0; k < segments.length; ++k) {    Segment<K,V> seg=segments[k];    seg.lock();    try {      IHashEntry<K,V>[] tab=seg.table;      for (int i=0; i < tab.length; ++i) {        for (IHashEntry<K,V> e=tab[i]; e != null; e=_handler.next(e)) {          s.writeObject(_handler.key(e));          s.writeObject(_handler.value(e));        }      }    }  finally {      seg.unlock();    }  }  s.writeObject(null);  s.writeObject(null);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SUBMIT_PETITION_QUOTA_LEFT(int num0th,int num1){  return new SM_SYSTEM_MESSAGE(1300540,num0th,num1);}  }
class C{  public static boolean wildcardMatch(String filename,String wildcardMatcher,IOCase caseSensitivity){  if (filename == null && wildcardMatcher == null) {    return true;  }  if (filename == null || wildcardMatcher == null) {    return false;  }  if (caseSensitivity == null) {    caseSensitivity=IOCase.SENSITIVE;  }  String[] wcs=splitOnTokens(wildcardMatcher);  boolean anyChars=false;  int textIdx=0;  int wcsIdx=0;  Stack<int[]> backtrack=new Stack<>();  do {    if (!backtrack.isEmpty()) {      int[] array=backtrack.pop();      wcsIdx=array[0];      textIdx=array[1];      anyChars=true;    }    while (wcsIdx < wcs.length) {      if (wcs[wcsIdx].equals("?")) {        textIdx++;        if (textIdx > filename.length()) {          break;        }        anyChars=false;      } else       if (wcs[wcsIdx].equals("*")) {        anyChars=true;        if (wcsIdx == wcs.length - 1) {          textIdx=filename.length();        }      } else {        if (anyChars) {          textIdx=caseSensitivity.checkIndexOf(filename,textIdx,wcs[wcsIdx]);          if (textIdx == -1) {            break;          }          int repeat=caseSensitivity.checkIndexOf(filename,textIdx + 1,wcs[wcsIdx]);          if (repeat >= 0) {            backtrack.push(new int[]{wcsIdx,repeat});          }        } else {          if (!caseSensitivity.checkRegionMatches(filename,textIdx,wcs[wcsIdx])) {            break;          }        }        textIdx+=wcs[wcsIdx].length();        anyChars=false;      }      wcsIdx++;    }    if (wcsIdx == wcs.length && textIdx == filename.length()) {      return true;    }  } while (!backtrack.isEmpty());  return false;}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,String encoding) throws IOException {  writeLines(lines,lineEnding,output,Charsets.toCharset(encoding));}  }
class C{  private void initActionBarDrawerToggle(){  mActionBarDrawerToggle=new ActionBarDrawerToggle((Activity)getContext(),mDelegate.getDrawerLayout(),this,R.string.accessibility_enhanced_bookmark_drawer_toggle_btn_open,R.string.accessibility_enhanced_bookmark_drawer_toggle_btn_close);  mDelegate.getDrawerLayout().setDrawerListener(mActionBarDrawerToggle);  mActionBarDrawerToggle.syncState();}  }
class C{  public int equivHashCode(){  return getOpBox().getValue().equivHashCode();}  }
class C{  private void rollbackOnException(TransactionStatus status,Throwable ex){  logger.trace(message("Initiating transaction rollback on application exception"),ex);  try {    this.getTransactionManager().rollback(status);  } catch (  RuntimeException ex2) {    logger.error(message("Application exception overridden by rollback exception"),ex);    throw ex2;  }catch (  Error err) {    logger.error(message("Application exception overridden by rollback error"),ex);    throw err;  }}  }
class C{  public void updateStatusBar(){  statusBar.setText1("Terms=" + getTree().getNumberOfNodes());  final long totalReads=doc.getNumberOfReads();  final StringBuilder buf2=new StringBuilder();  if (doc.getNumberOfSamples() > 1) {    Comparer.COMPARISON_MODE mode=Comparer.parseMode(doc.getDataTable().getParameters());    if (mode.equals(Comparer.COMPARISON_MODE.RELATIVE)) {      buf2.append(String.format("Relative comparison, Reads=%,d (normalized to %,d reads per sample)",totalReads,Comparer.parseNormalizedTo(doc.getDataTable().getParameters())));    } else     buf2.append(String.format("Absolute comparison, Reads=%,d Assigned=%,d",totalReads,totalAssignedReads));  } else   if (totalReads > 0) {    buf2.append(String.format("Reads=%,d Assigned=%,d",totalReads,totalAssignedReads));    if (doc.getBlastMode() != BlastMode.Unknown)     buf2.append(" mode=").append(doc.getBlastMode().toString());  } else {    if (getTree().getNumberOfNodes() > 0)     buf2.append(String.format(" total terms=%,d",getTree().getNumberOfNodes()));  }  if (Document.getVersionInfo().get(getClassName() + " tree") != null)   buf2.append("     ").append(Basic.skipFirstLine(Document.getVersionInfo().get(getClassName() + " tree")).replaceAll("\\s+"," "));  statusBar.setText2(buf2.toString());}  }
class C{  public FaveGetVideosQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public void gossipSharedData(SharedGossipDataMessage message){  gossipManager.gossipSharedData(message);}  }
class C{  boolean isEmpty(){  return mDescription.isEmpty() && mTypes.isEmpty();}  }
class C{  public FriendsGetListsQuery(VkApiClient client,UserActor actor){  super(client,"friends.getLists",GetListsResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public void resetInitialIfExistSearchActive(){  _initialIfExistSearchActive=false;}  }
class C{  protected PhotosConfirmTagQuery photoId(String value){  return unsafeParam("photo_id",value);}  }
class C{  public boolean isJavaLibraryClass(){  if (name.startsWith("java.") || name.startsWith("sun.") || name.startsWith("javax.")|| name.startsWith("com.sun.")|| name.startsWith("org.omg.")|| name.startsWith("org.xml."))   return true;  return false;}  }
class C{  private static <T extends Serializable>void testShallowEquals(@NotNull T original,ReachableClasses reachableClasses,Examples examples) throws ExampleNotFoundException, IllegalAccessException, TestCorrectnessException {  T clone=(T)DeepEqualsTesterUtil.cloneWithSerialization(original);  List<Field> allFields=DeepEqualsTesterUtil.getAllFields(original.getClass());  for (  Field field : allFields) {    if (!Modifier.isStatic(field.getModifiers())) {      field.setAccessible(true);      Pair<?,?> examplesPair=examples.getExamples((Class<? extends Serializable>)field.getType());      Object newValueForOriginal=examplesPair.getFirst();      Object newValueForClone=examplesPair.getSecond();      Object oldValueForOriginal=field.get(original);      Object oldValueForClone=field.get(clone);      boolean objectsTheSameBeforeTweak=original.equals(clone);      if (!objectsTheSameBeforeTweak) {        throw new TestCorrectnessException("original was not equal to clone before tweaking them");      }      boolean objectsHashTheSameBeforeTweak=original.hashCode() == clone.hashCode();      if (!objectsHashTheSameBeforeTweak) {        throw new TestCorrectnessException("original hash code was not equal to clone hash code before tweaking the objects");      }      field.set(original,newValueForOriginal);      field.set(clone,newValueForClone);      boolean equalsWorksAsIntended=!original.equals(clone);      boolean hashWorksAsIntended=original.hashCode() != clone.hashCode();      field.set(original,oldValueForOriginal);      field.set(clone,oldValueForClone);      Assert.assertTrue(getFailureMessage("equals",field,reachableClasses.getExamplePathTo(original.getClass())),equalsWorksAsIntended);      Assert.assertTrue(getFailureMessage("hash",field,reachableClasses.getExamplePathTo(original.getClass())),hashWorksAsIntended);    }  }}  }
class C{  public IndexJoinScan(Scan s,Index idx,String joinField,TableScan ts){  this.s=s;  this.idx=idx;  this.joinField=joinField;  this.ts=ts;  beforeFirst();}  }
class C{  public static Step fromCursor(Cursor cursor){  Step step=new Step();  for (int c=0; c < cursor.getColumnCount(); c++) {    String columnName=cursor.getColumnName(c);    if (columnName.equals(RecipeInstructionsTable.PHOTO_COLUMN)) {      step.setPhoto(cursor.getString(c));    } else     if (columnName.equals(RecipeInstructionsTable.DESCRIPTION_COLUMN)) {      step.setDescription(cursor.getString(c));    }  }  return step;}  }
class C{  public void clear(){  items.clear();  Iterator siter=springs.iterator();  Spring.SpringFactory f=Spring.getFactory();  while (siter.hasNext())   f.reclaim((Spring)siter.next());  springs.clear();}  }
class C{  public BigReal(long val,MathContext mc){  d=new BigDecimal(val,mc);}  }
class C{  public static List<String> readLines(InputStream input,String encoding) throws IOException {  return readLines(input,Charsets.toCharset(encoding));}  }
class C{  protected int calcOffsetToNextView(int direction){  int spanCount=getSpanCount();  int orientation=getOrientation();  if (orientation == VERTICAL) {switch (direction) {case View.FOCUS_DOWN:      return spanCount;case View.FOCUS_UP:    return -spanCount;case View.FOCUS_RIGHT:  return 1;case View.FOCUS_LEFT:return -1;}} else if (orientation == HORIZONTAL) {switch (direction) {case View.FOCUS_DOWN:return 1;case View.FOCUS_UP:return -1;case View.FOCUS_RIGHT:return spanCount;case View.FOCUS_LEFT:return -spanCount;}}return 0;}  }
class C{  default String objectPropertyName(IRI propIri){  return "op-" + fromIri(propIri);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public TryStmt fullCopy(){  TryStmt tree=(TryStmt)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public String upload_appender_file1(String group_name,byte[] file_buff,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  String parts[]=this.upload_appender_file(group_name,file_buff,file_ext_name,meta_list);  if (parts != null) {    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];  } else {    return null;  }}  }
class C{  public void broadcastHate(int value){  for (  VisibleObject visibleObject : getOwner().getKnownList().getKnownObjects().values()) {    if (visibleObject instanceof Creature) {      ((Creature)visibleObject).getAggroList().notifyHate(getOwner(),value);    }  }}  }
class C{  private boolean lineToSpeech(String path){  boolean ok=true;  voice.startBatch();  try {    BufferedReader reader=new BufferedReader(new FileReader(path));    String line;    while ((line=reader.readLine()) != null && ok) {      ok=textToSpeech(line);    }    reader.close();  } catch (  IOException ioe) {    voice.error("can't read " + path);  }  voice.endBatch();  return ok;}  }
class C{  @NotNull public OCROnImageAction ocrOnImage(@Nullable String language,boolean detectOrientation,@NotNull String imageUrl){  return new OCROnImageAction(cognitiveContext,language,detectOrientation,imageUrl);}  }
class C{  private void fireOnNewTagSubscriptionsEvent(final Set<Long> tagIds){  if (!tagIds.isEmpty()) {    listenersLock.readLock().lock();    try {      Set<Long> copyList=new HashSet<Long>(tagIds);      for (      TagSubscriptionListener listener : tagSubscriptionListeners) {        listener.onNewTagSubscriptions(copyList);      }    }  finally {      listenersLock.readLock().unlock();    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_StatUp_ME_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200571,skillcaster,skilltarget,skillname);}  }
class C{  public GenericAttr(String name,byte data[]){  attr_name=new AsciiCP(name);  this.data=data;}  }
class C{  public void unregister(String key) throws RegistryException {  try {    registry.unbind(key);  } catch (  Exception e) {    throw new RegistryException("Failed to unregister with key [" + key + "]",e);  }}  }
class C{  public FriendsGetMutualQuery order(FriendsGetMutualOrder value){  return unsafeParam("order",value);}  }
class C{  public ZWaveHrvControlCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  @Override public Tab createFrozenTab(TabState state,int id,int index){  return Tab.createFrozenTabFromState(id,null,state.isIncognito(),null,Tab.INVALID_TAB_ID,state);}  }
class C{  public PhotosCreateCommentQuery attachments(List<String> value){  return unsafeParam("attachments",value);}  }
class C{  public void defineLayout(IPageLayout layout){  String editorArea=layout.getEditorArea();  IFolderLayout top=layout.createFolder("top",IPageLayout.LEFT,0.40f,editorArea);  top.addView(RepositoriesView.VIEW_ID);  layout.addView(ISVNUIConstants.HISTORY_VIEW_ID,IPageLayout.BOTTOM,0.70f,editorArea);  layout.setEditorAreaVisible(true);}  }
class C{  public TimingLogger(Logger logger,String tag,String label){  mLogger=logger;  reset(tag,label);}  }
class C{  private List<View> addView(View view,List<View> cache){  if (cache == null) {    cache=new LinkedList<View>();  }  cache.add(view);  return cache;}  }
class C{  @Override public boolean isEnabled(){  if ((attributeSelectionPanel != null) && !isValueOnly()) {    return attributeSelectionPanel.isEnabled();  } else {    if (spinner != null) {      return spinner.isEnabled();    }  }  return false;}  }
class C{  public PhotosSaveWallPhotoQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  public TextPrintImpl(){}  }
class C{  protected String doLinkURLEncode(HttpServletRequest request,HttpServletResponse response,StringBuilder newURL,boolean interWebapp,boolean didFullStandard,boolean didFullSecure){  String encodedUrl;  if (interWebapp) {    if (response != null) {      encodedUrl=RequestLinkUtil.encodeURLNoJsessionId(newURL.toString(),response);    } else {      encodedUrl=newURL.toString();    }  } else {    boolean forceManualJsessionid=!cookies;    boolean isSpider=false;    if (UtilHttp.checkURLforSpiders(request)) {      isSpider=true;    }    if (!request.isSecure() && didFullSecure) {      forceManualJsessionid=true;    }    if (request.isSecure() && didFullStandard) {      forceManualJsessionid=true;    }    if (response != null && !forceManualJsessionid && !isSpider) {      encodedUrl=response.encodeURL(newURL.toString());    } else {      if (!isSpider) {        String sessionId=";jsessionid=" + request.getSession().getId();        int questionIndex=newURL.indexOf("?");        if (questionIndex == -1) {          newURL.append(sessionId);        } else {          newURL.insert(questionIndex,sessionId);        }      }      if (response != null) {        encodedUrl=response.encodeURL(newURL.toString());      } else {        encodedUrl=newURL.toString();      }    }  }  return encodedUrl;}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((getUserId() == null) ? 0 : getUserId().hashCode());  result=prime * result + ((getMenuId() == null) ? 0 : getMenuId().hashCode());  result=prime * result + ((getPermission() == null) ? 0 : getPermission().hashCode());  result=prime * result + ((getEnable() == null) ? 0 : getEnable().hashCode());  result=prime * result + ((getRemark() == null) ? 0 : getRemark().hashCode());  result=prime * result + ((getCreateBy() == null) ? 0 : getCreateBy().hashCode());  result=prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());  result=prime * result + ((getUpdateBy() == null) ? 0 : getUpdateBy().hashCode());  result=prime * result + ((getUpdateTime() == null) ? 0 : getUpdateTime().hashCode());  return result;}  }
class C{  public static void stopThread(){  ActivityManager am;synchronized (ActivityManager.class) {    am=s_instance;  }  if (am != null)   am._stop();}  }
class C{  public Map<Integer,Integer> apply() throws CanceledException {  final Map<Integer,Integer> orphan2AncestorMapping=new HashMap<>();  if (progress != null) {    progress.setMaximum(tree.getNumberOfNodes());    progress.setProgress(0);  }  final Set<Integer> orphans=new HashSet<>();  if (tree.getRoot() != null)   computeOrphan2AncestorMappingRec(tree.getRoot(),orphan2AncestorMapping,orphans);  for (  Integer id : orphans) {    orphan2AncestorMapping.put(id,IdMapper.UNASSIGNED_ID);  }  orphans.clear();  if (progress instanceof ProgressPercentage)   ((ProgressPercentage)progress).reportTaskCompleted();  return orphan2AncestorMapping;}  }
class C{  public boolean removeAllEdgesOutOf(Unit u){  boolean hasRemoved=false;  for (QueueReader<Edge> edgeRdr=listener(); edgeRdr.hasNext(); ) {    Edge e=edgeRdr.next();    if (e.srcUnit() == u) {      removeEdge(e);      hasRemoved=true;    }  }  return hasRemoved;}  }
class C{  public static boolean isLeapYear(int year){  return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;}  }
class C{  public final void closeSourceDataTagsBuffers(){  dataTagsBuffer.disable();  dataTagsBuffer.close();  persistentTagsBuffer.disable();  persistentTagsBuffer.close();}  }
class C{  public boolean isDrawAxisLineEnabled(){  return mDrawAxisLine;}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public boolean dateRange(Object day1,Object month1,Object year1,Object day2,Object month2,Object year2,Object gmt){  Map<String,Integer> params=new HashMap<String,Integer>();  parseDateParam(params,day1);  parseDateParam(params,month1);  parseDateParam(params,year1);  parseDateParam(params,day2);  parseDateParam(params,month2);  parseDateParam(params,year2);  parseDateParam(params,gmt);  boolean useGmt=params.get("gmt") != null;  Calendar cal=getCurrentTime(useGmt);  Date current=cal.getTime();  if (params.get("day1") != null) {    cal.set(Calendar.DAY_OF_MONTH,params.get("day1"));  }  if (params.get("month1") != null) {    cal.set(Calendar.MONTH,params.get("month1"));  }  if (params.get("year1") != null) {    cal.set(Calendar.YEAR,params.get("year1"));  }  Date from=cal.getTime();  Date to;  if (params.get("day2") != null) {    cal.set(Calendar.DAY_OF_MONTH,params.get("day2"));  }  if (params.get("month2") != null) {    cal.set(Calendar.MONTH,params.get("month2"));  }  if (params.get("year2") != null) {    cal.set(Calendar.YEAR,params.get("year2"));  }  to=cal.getTime();  if (to.before(from)) {    cal.add(Calendar.MONTH,+1);    to=cal.getTime();  }  if (to.before(from)) {    cal.add(Calendar.YEAR,+1);    cal.add(Calendar.MONTH,-1);    to=cal.getTime();  }  return current.compareTo(from) >= 0 && current.compareTo(to) <= 0;}  }
class C{  private boolean isDistanceToRootCache(Direction direction){  int directionOrdinal=direction.getDirection();  Float f=mDistToRootCache[directionOrdinal];  if (f < 0) {    return false;  }  return true;}  }
class C{  public DexlibWrapper(File inputDexFile){  this.inputDexFile=inputDexFile;}  }
class C{  @Deployment(resources={"org/activiti/examples/bpmn/tasklistener/TaskListenerTest.bpmn20.xml"}) public void testTaskAssignmentListenerNotCalledWhenAssigneeNotUpdated(){  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("taskListenerProcess");  Task task=taskService.createTaskQuery().singleResult();  assertEquals("TaskCreateListener is listening!",task.getDescription());  taskService.setAssignee(task.getId(),"kermit");  task=taskService.createTaskQuery().singleResult();  assertEquals("TaskAssignmentListener is listening: kermit",task.getDescription());  task.setDescription("Clear");  taskService.saveTask(task);  taskService.setAssignee(task.getId(),"kermit");  task=taskService.createTaskQuery().singleResult();  assertEquals("Clear",task.getDescription());  task.setAssignee("kermit");  taskService.saveTask(task);  task=taskService.createTaskQuery().singleResult();  assertEquals("Clear",task.getDescription());  task.setName("test");  taskService.saveTask(task);  task=taskService.createTaskQuery().singleResult();  assertEquals("Clear",task.getDescription());  task.setAssignee("john");  taskService.saveTask(task);  task=taskService.createTaskQuery().singleResult();  assertEquals("TaskAssignmentListener is listening: john",task.getDescription());  runtimeService.deleteProcessInstance(processInstance.getProcessInstanceId(),"");}  }
class C{  public static void main(String[] args){  if (args.length < 2) {    LOGGER.error("There must be at least two arguments");    return;  }  int lastIndex=args.length - 1;  Path[] files=getFiles(args);  Main main=new Main();  main.generate(files[lastIndex],Arrays.copyOf(files,lastIndex));}  }
class C{  public void resetCustom(){  mIsLegendCustom=false;}  }
class C{  public ImageSelection(Image image){  this.image=image;}  }
class C{  private void parseValue(String str){  String cleanString=str.replaceAll("[^\\d]","");  if (cleanString.length() > 0) {    value=new BigDecimal(cleanString).setScale(2,BigDecimal.ROUND_FLOOR).divide(new BigDecimal(100),BigDecimal.ROUND_FLOOR);  } else {    value=BigDecimal.ZERO;  }}  }
class C{  public FriendsGetQueryWithFields(VkApiClient client,UserActor actor,UserField... fields){  super(client,"friends.get",GetFieldsResponse.class);  accessToken(actor.getAccessToken());  fields(fields);}  }
class C{  private DatabaseHelper(Context c){  openHelper=new DaoMaster.DevOpenHelper(c,BD_NAME,null);}  }
class C{  @Override public void endExternalSubset(Augmentations augmentations) throws XNIException {}  }
class C{  public void appendChangeReport(final ChangeReport changeReport){  changeReports.add(changeReport);}  }
class C{  public static <V>List<V> invertList(List<V> sourceList){  if (isEmpty(sourceList)) {    return sourceList;  }  List<V> invertList=new ArrayList<V>(sourceList.size());  for (int i=sourceList.size() - 1; i >= 0; i--) {    invertList.add(sourceList.get(i));  }  return invertList;}  }
class C{  public static boolean equals(String filename1,String filename2,boolean normalized,IOCase caseSensitivity){  if (filename1 == null || filename2 == null) {    return filename1 == null && filename2 == null;  }  if (normalized) {    filename1=normalize(filename1);    filename2=normalize(filename2);    if (filename1 == null || filename2 == null) {      throw new NullPointerException("Error normalizing one or both of the file names");    }  }  if (caseSensitivity == null) {    caseSensitivity=IOCase.SENSITIVE;  }  return caseSensitivity.checkEquals(filename1,filename2);}  }
class C{  public EntryRep(Entry entry) throws RemoteException {  EntryClassBase ecb=ClassMapper.toEntryClassBase(entry.getClass());  eclass=ecb.eclass;  codebase=ecb.codebase;  try {    EntryField[] efields=ClassMapper.getFields(entry.getClass());    fields=new Object[efields.length];    for (int i=efields.length; --i >= 0; ) {      EntryField f=efields[i];      Object val=f.field.get(entry);      if (f.marshal && val != null)       val=new MarshalledWrapper(val);      fields[i]=val;    }  } catch (  IOException e) {    throw new MarshalException("error marshalling arguments",e);  }catch (  IllegalAccessException e) {    throw new MarshalException("error marshalling arguments",e);  }}  }
class C{  @Nullable ResourceHandle tryToGetResourceHandle(K key,Callable<? extends R> loader,EliminationStack<ResourceKey<K>> stack,long timeoutNanos){  ResourceKey<K> resourceKey=stack.pop();  if (resourceKey == null) {    return newResourceHandle(key,loader,stack);  }  if (timeToIdlePolicy.isPresent() && timeToIdlePolicy.get().hasExpired(resourceKey)) {    return null;  }  return tryToGetPooledResourceHandle(resourceKey);}  }
class C{  private Vector1D finiteOrNullPoint(final double x){  return Double.isInfinite(x) ? null : new Vector1D(x);}  }
class C{  public BoyerMoore(byte[] pattern,int offset,int length,int R){  this.R=R;  this.pattern=new byte[length];  System.arraycopy(pattern,offset,this.pattern,0,length);  right=new int[R];  for (int c=0; c < R; c++)   right[c]=-1;  for (int j=0; j < pattern.length; j++)   right[pattern[j]]=j;}  }
class C{  public static <X extends DataSource>boolean areDataSourcesIndependent(Set<X> dataSources){  return dataSources.size() == getIndependentDataSources(dataSources).size();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OneTimeTypeBoostSkillLevel_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200540,skilltarget,skillname);}  }
class C{  public MetadataHttpResponseChannel(AsyncResponse asyncResponse,ObjectWriter writer){  this.asyncResponse=asyncResponse;  this.writer=writer;}  }
class C{  public void addAll(Taxa taxa){  for (Iterator it=taxa.iterator(); it.hasNext(); ) {    String name=(String)it.next();    add(name);  }}  }
class C{  public RequestHandle post(Context context,String url,Header[] headers,RequestParams params,String contentType,ResponseHandlerInterface responseHandler){  HttpEntityEnclosingRequestBase request=new HttpPost(url);  if (params != null)   request.setEntity(paramsToEntity(params,responseHandler));  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context);}  }
class C{  @Override public void onPassphraseTypeSelected(PassphraseType type){  if (!mProfileSyncService.isBackendInitialized()) {    return;  }  boolean isAllDataEncrypted=mProfileSyncService.isEncryptEverythingEnabled();  boolean isUsingSecondaryPassphrase=mProfileSyncService.isUsingSecondaryPassphrase();  assert !isAllDataEncrypted;  assert !isUsingSecondaryPassphrase;  displayCustomPassphraseDialog();}  }
class C{  public BeforeSpaceModeChangeEvent(IJSpace space,SpaceMode spaceMode){  super(space,spaceMode);}  }
class C{  public VOGeoServerWeatherSymbol(){  String fullResourceName="geoserver/GeoServerExtShapeSymbol.xml";  SymbolTypeConfigReader.readConfig(VOGeoServerWeatherSymbol.class,fullResourceName,fieldEnableMap);}  }
class C{  private static boolean hasHorizontalConstraints(@NotNull ConstraintWidget widget){  ConstraintAnchor left=widget.getAnchor(ConstraintAnchor.Type.LEFT);  ConstraintAnchor right=widget.getAnchor(ConstraintAnchor.Type.RIGHT);  return (left != null && left.isConnected()) || (right != null && right.isConnected());}  }
class C{  public Z Exch(Z a){  double t;  t=re;  re=a.re;  a.re=t;  t=im;  im=a.im;  a.im=t;  return this;}  }
class C{  public void destroyAndUnBindDestination(String destinationName) throws JMSException {  try {    getInitialContext().unbind(destinationName);  } catch (  NamingException ne) {  }}  }
class C{  public MyPagerAdapter(List<View> viewList,List<String> titleList){  this.viewList=viewList;  this.titleList=titleList;}  }
class C{  public Bucket(String label,Experiment experiment,double allocationPercent,boolean isControl){  this(label,experiment.id,allocationPercent,isControl,null);}  }
class C{  public IntegerSpinner(SpinnerModel model){  super(model);}  }
class C{  public JsonObject internal_createBackground(ITextBackground background){  JsonObject jsonSymbol=null;  if (background != null) {    EsriTextBackgroundInterface backgroundConverter=data.getTextBackgroundMap(background.getClass());    if (backgroundConverter != null) {      jsonSymbol=backgroundConverter.convert(background);    } else {      System.err.println("Unsupported background : " + background.getClass().getName());    }  }  return jsonSymbol;}  }
class C{  public void refreshCalendar(){  TextView title=(TextView)rootView.findViewById(R.id.title);  refreshDays();  title.setText(android.text.format.DateFormat.format(CalendarUtils.getCalendarMonthTitleFormat(),month));}  }
class C{  public static void registerHorseArmor(ResourceLocation id,HorseArmorType type){  AutomaticNamespacedRegistry<ResourceLocation,HorseArmorType> registry=Registries.get(HorseArmorType.class);  if (type == null) {    throw new NullPointerException("Attempted to register a null horse armor");  } else   if (id == null) {    throw new NullPointerException("Attempted to register a horse armor with a null ID");  } else   if (registry.containsKey(id)) {    throw new IllegalArgumentException(String.format("The horse armor ID \"%s\" has already been registered",id));  }  registry.register(id,type);}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  data=rotatedData;  PlanarYUVLuminanceSource source=captureEvent.getCameraManager().buildLuminanceSource(data,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  }catch (  Exception re) {  } finally {    multiFormatReader.reset();  }  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode (" + (end - start) + " ms):\n"+ rawResult.toString());    Message message=Message.obtain(captureEvent.getHandler(),MessageIDs.decode_succeeded,rawResult);    Bundle bundle=new Bundle();    bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());    message.setData(bundle);    message.sendToTarget();  } else {    Message message=Message.obtain(captureEvent.getHandler(),MessageIDs.decode_failed);    message.sendToTarget();  }}  }
class C{  public BlankIcon(Color colour,int size){  fillColour=colour;  this.size=size;}  }
class C{  protected boolean isOnSameScreenAsChildren(){  return true;}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=CameraManager.get().buildLuminanceSource(rotatedData,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  } finally {    multiFormatReader.reset();  }  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode (" + (end - start) + " ms):\n"+ rawResult.toString());    Message message=Message.obtain(activity.getHandler(),R.id.decode_succeeded,rawResult);    Bundle bundle=new Bundle();    bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());    message.setData(bundle);    message.sendToTarget();  } else {    Message message=Message.obtain(activity.getHandler(),R.id.decode_failed);    message.sendToTarget();  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public ByteString toByteString(){  return ByteString.copyOf(buffer,0,length);}  }
class C{  public static String extractCSVOutputByFieldNum(String csvOut,int fieldNum){  String tokens[]=csvOut.split(",(?=([^\"]*\"[^\"]*\")*[^\"]*$)",-1);  return tokens[fieldNum];}  }
class C{  public static void addFunction(String name,Class type){  if (!Function.class.isAssignableFrom(type)) {    throw new IllegalArgumentException("Type argument must be a subclass of FunctionExpression.");  }  if (hasFunction(name)) {    throw new IllegalArgumentException("Function with that name already exists");  }  String lo=name.toLowerCase();  String hi=name.toUpperCase();  if (!name.equals(lo) && !name.equals(hi))   throw new IllegalArgumentException("Name can't have mixed case, try \"" + hi + "\" instead.");  s_functionTable.put(lo,type);  s_functionTable.put(hi,type);}  }
class C{  public static String id(){  String id=UID.id(System.currentTimeMillis(),UID.random());  try {    while (Helper.exists(id,Repo.class)) {      id=UID.id(System.currentTimeMillis(),UID.random());    }  } catch (  Exception e) {    log.error(e.getMessage(),e);  }  return id;}  }
class C{  protected boolean checkPrevWords(Element currentRulePart,int position,NodeList tokens){  NamedNodeMap attNodes=currentRulePart.getAttributes();  for (int z=0; z < attNodes.getLength(); z++) {    Node el=attNodes.item(z);    String currentAtt=el.getNodeName();    String currentVal=el.getNodeValue();    if (currentAtt.equals("num")) {      int requiredNum=Integer.parseInt(currentVal.substring(0,1));      int num=0;      for (int i=position - 1; i >= 0; i--) {        if (!((Element)tokens.item(i)).getAttribute("ph").equals(""))         num++;      }      if (currentVal.length() == 1) {        if (num != requiredNum)         return false;      } else       if (currentVal.substring(1,2).equals("+")) {        if (!(num >= requiredNum))         return false;      } else       if (currentVal.substring(1,2).equals("-")) {        if (!(num <= requiredNum))         return false;      }    }  }  return true;}  }
class C{  @Override public void renderLimitLines(Canvas c){}  }
class C{  public void convertLayer(int count,int total,JsonArray jsonLayerlist,ILayer layer,Map mxdMap){  if (layer == null) {    System.err.println("convertLayer() : layer == null");  }  try {    System.out.println(String.format("Reading layer (%d/%d) : %s",count,total,layer.getName()));    if (layer instanceof GroupLayer) {      System.out.println("Group Layer");    } else     if (layer instanceof FeatureLayer) {      JsonObject jsonLayerObject=new JsonObject();      jsonLayerObject.addProperty("name",layer.getName());      jsonLayerObject.addProperty("maxScale",layer.getMinimumScale());      jsonLayerObject.addProperty("minScale",layer.getMaximumScale());      FeatureLayer featureLayer=(FeatureLayer)layer;      jsonLayerObject.addProperty("definitionExpression",featureLayer.getDefinitionExpression());      jsonLayerObject.addProperty("transparency",featureLayer.getTransparency());      IFeatureRenderer renderer=featureLayer.getRenderer();      JsonObject jsonRenderer=internal_createRenderer(renderer);      if (jsonRenderer != null) {        jsonLayerObject.add("renderer",jsonRenderer);      }      JsonArray jsonLabelRendererArray=new JsonArray();      IGeoFeatureLayer geoFeatureLayer=(IGeoFeatureLayer)layer;      if (geoFeatureLayer.isDisplayAnnotation()) {        IAnnotateLayerPropertiesCollection annotationProperties=geoFeatureLayer.getAnnotationProperties();        for (int index=0; index < annotationProperties.getCount(); index++) {          IAnnotateLayerProperties[] item=new IAnnotateLayerProperties[1];          annotationProperties.queryItem(index,item,null,null);          if (item[0] != null) {            EsriLabelRendererInterface labelConverter=data.getLabel(item[0].getClass());            if (labelConverter != null) {              JsonObject jsonLabelRenderer=labelConverter.convert(item[0],mxdMap);              if (jsonLabelRenderer != null) {                jsonLabelRendererArray.add(jsonLabelRenderer);              }            }          }        }        jsonLayerObject.add("labelRenderers",jsonLabelRendererArray);      }      JsonArray fieldArray=readFields(featureLayer);      jsonLayerObject.add("fields",fieldArray);      jsonLayerlist.add(jsonLayerObject);      JsonObject dataSourceObject=readDataSource(featureLayer);      jsonLayerObject.add("dataSource",dataSourceObject);    } else {      System.out.println("Unsupported layer : " + layer.getClass().getName());    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private boolean isEmptyPersistent() throws SAException {  Context context=null;  try {    if (!_cacheManager.getTemplatesManager().isEmpty())     return false;    ITemplateHolder tHolder=TemplateHolderFactory.createEmptyTemplateHolder(this,_uidFactory.createUIDFromCounter(),Long.MAX_VALUE,false);    IServerTypeDesc templateType=_typeManager.getServerTypeDesc(IServerTypeDesc.ROOT_TYPE_NAME);    context=_cacheManager.getCacheContext();    ISAdapterIterator<IEntryHolder> entriesIterSA=_cacheManager.makeEntriesIter(context,tHolder,templateType,0,SystemTime.timeMillis(),false);    if (entriesIterSA == null)     return true;    IEntryHolder eh=entriesIterSA.next();    entriesIterSA.close();    return (eh == null);  }  finally {    _cacheManager.freeCacheContext(context);  }}  }
class C{  private static boolean sameConstraints(Lease l1,Lease l2){  if (!(l1 instanceof RemoteMethodControl)) {    return !(l2 instanceof RemoteMethodControl);  } else   if (!(l2 instanceof RemoteMethodControl)) {    return false;  } else {    return ConstrainableProxyUtil.equivalentConstraints(((RemoteMethodControl)l1).getConstraints(),((RemoteMethodControl)l2).getConstraints(),leaseToLeaseMethods);  }}  }
class C{  public Object invoke(MethodInvocation methodInvocation) throws Throwable {  int retries=retryCountOnFailure;  while (true) {    try {      if (actualService == null) {synchronized (actualServiceMonitor) {          if (actualService == null) {            actualService=lookupService();          }        }      }      return methodInvocation.getMethod().invoke(actualService,methodInvocation.getArguments());    } catch (    InvocationTargetException e) {      if (logger.isTraceEnabled()) {        logger.trace("Failed to execute [" + methodInvocation.getMethod().getName() + "] on ["+ actualService+ "]",e);      }synchronized (actualServiceMonitor) {        actualService=null;      }      if (--retries == 0) {        throw e.getTargetException();      }    }  }}  }
class C{  public String toString(){  String sRes="";  Iterator iEdgeIter=Arrays.asList(getEdgeSet().toArray()).listIterator();  while (iEdgeIter.hasNext()) {    Edge e=(Edge)iEdgeIter.next();    String sA="";    char[] cTmp=e.getVertexA().getLabel().toCharArray();    int iCnt=0;    while (iCnt < cTmp.length) {      char c=cTmp[iCnt];      sA+=(Character.isISOControl(c)) ? "_" : (char)c;      iCnt++;    }    String sB="";    cTmp=e.getVertexB().getLabel().toCharArray();    iCnt=0;    while (iCnt < cTmp.length) {      char c=cTmp[iCnt];      sB+=(Character.isISOControl(c)) ? "_" : (char)c;      iCnt++;    }    sRes=sRes.concat(sA + "->" + sB+ "(Distro: "+ getEdgeDistro(e).toString()+ ")\n");  }  return sRes;}  }
class C{  public static ByteBuffer clone(ByteBuffer buf){  if (buf == null) {    return null;  }  buf.rewind();  ByteBuffer copy;  if (buf.isDirect()) {    copy=createByteBuffer(buf.limit());  } else {    copy=ByteBuffer.allocate(buf.limit());  }  copy.put(buf);  return copy;}  }
class C{  public MessagesDeleteQuery delete(Actor actor){  return new MessagesDeleteQuery(getClient(),actor);}  }
class C{  public TemplateParameterStep2(@Nullable FormFactor formFactor,Map<String,Object> presetParameters,@Nullable Disposable disposable,@NotNull Key<String> packageNameKey,SourceProvider[] sourceProviders,String stepTitle){  super(disposable);  myFormFactor=formFactor;  mySourceProviders=sourceProviders;  myPresetParameters.putAll(presetParameters);  myPackageNameKey=packageNameKey;  myParameterToKey=CacheBuilder.newBuilder().weakKeys().build(CacheLoader.from(new ParameterKeyFunction()));  myRootPanel.setBorder(createBodyBorder());  myTemplateDescription.setBorder(BorderFactory.createEmptyBorder(0,0,myTemplateDescription.getFont().getSize(),0));  setBodyComponent(myRootPanel);  myStepTitle=stepTitle;}  }
class C{  private void populateTable(AnalyticsTable table,String valueExpression,String textValueExpression,Set<ValueType> valueTypes,String whereClause,String approvalClause){  final String start=DateUtils.getMediumDateString(table.getPeriod().getStartDate());  final String end=DateUtils.getMediumDateString(table.getPeriod().getEndDate());  final String tableName=table.getTempTableName();  final String valTypes=TextUtils.getQuotedCommaDelimitedString(ObjectUtils.asStringList(valueTypes));  String sql="insert into " + table.getTempTableName() + " (";  List<AnalyticsTableColumn> columns=getDimensionColumns(table);  validateDimensionColumns(columns);  for (  AnalyticsTableColumn col : columns) {    sql+=col.getName() + ",";  }  sql+="daysxvalue, daysno, value, textvalue) select ";  for (  AnalyticsTableColumn col : columns) {    sql+=col.getAlias() + ",";  }  sql+=valueExpression + " * ps.daysno as daysxvalue, " + "ps.daysno as daysno, "+ valueExpression+ " as value, "+ textValueExpression+ " as textvalue "+ "from datavalue dv "+ "left join _dataelementgroupsetstructure degs on dv.dataelementid=degs.dataelementid "+ "left join _organisationunitgroupsetstructure ougs on dv.sourceid=ougs.organisationunitid "+ "left join _categorystructure dcs on dv.categoryoptioncomboid=dcs.categoryoptioncomboid "+ "left join _categorystructure acs on dv.attributeoptioncomboid=acs.categoryoptioncomboid "+ "left join _orgunitstructure ous on dv.sourceid=ous.organisationunitid "+ "left join _dataelementstructure des on dv.dataelementid = des.dataelementid "+ "inner join dataelement de on dv.dataelementid=de.dataelementid "+ "inner join categoryoptioncombo co on dv.categoryoptioncomboid=co.categoryoptioncomboid "+ "inner join categoryoptioncombo ao on dv.attributeoptioncomboid=ao.categoryoptioncomboid "+ "inner join _categoryoptioncomboname aon on dv.attributeoptioncomboid=aon.categoryoptioncomboid "+ "inner join period pe on dv.periodid=pe.periodid "+ "inner join _periodstructure ps on dv.periodid=ps.periodid "+ "inner join organisationunit ou on dv.sourceid=ou.organisationunitid "+ approvalClause+ "where de.valuetype in ("+ valTypes+ ") "+ "and de.domaintype = 'AGGREGATE' "+ "and pe.startdate >= '"+ start+ "' "+ "and pe.startdate <= '"+ end+ "' "+ "and dv.value is not null "+ "and dv.deleted is false ";  if (whereClause != null) {    sql+="and " + whereClause;  }  populateAndLog(sql,tableName + ", " + valueTypes);}  }
class C{  public FriendsGetQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  @Override public void onWebsocketHandshakeSentAsClient(WebSocket conn,ClientHandshake request) throws InvalidDataException {}  }
class C{  @Override public boolean hasMoreData(){  return hasMoreData;}  }
class C{  public static boolean isAquaLookAndFeel(){  return UIUtils.isAquaLookAndFeel();}  }
class C{  public NameTypeCP(String name,String sig){  uniq=("NT : @#$%" + name + "SD#$"+ sig).intern();  this.name=new AsciiCP(name);  this.sig=new AsciiCP(sig);}  }
class C{  public PackageScanner useClassLoader(ClassLoader classLoader){  this.classLoader=classLoader;  return this;}  }
class C{  @Override public void stop(){  Log.d(SBMP_TAG,"stop()");  if (pmInterface == null) {    if (!ConnectPlayMediaService()) {      ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);    }  }  try {    pmInterface.stop(ServiceBackedMediaPlayer.this.sessionId);  } catch (  RemoteException e) {    e.printStackTrace();    ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);  }}  }
class C{  public void restartBookies(ServerConfiguration newConf) throws Exception {  for (  BookieServer server : bs) {    server.shutdown();    stopAutoRecoveryService(server);  }  bs.clear();  Thread.sleep(1000);  List<ServerConfiguration> bsConfsCopy=new ArrayList<ServerConfiguration>(bsConfs);  bsConfs.clear();  for (  ServerConfiguration conf : bsConfsCopy) {    if (null != newConf) {      conf.loadConf(newConf);    }    startBookie(conf);  }}  }
class C{  private double computeLoadingsScaleFactor(double[] vector){  if (vector.length >= 2) {    final double length=Math.sqrt(Geometry.squaredDistance(0,0,vector[0],vector[1]));    if (length > 0) {      final Rectangle2D bbox=graphView.getBBox();      return 0.2 * Math.min(bbox.getWidth(),bbox.getHeight()) / (length);    }  }  return 1;}  }
class C{  public VideoEditAlbumQuery privacy(List<String> value){  return unsafeParam("privacy",value);}  }
class C{  public int findFirstVisibleItemPosition(){  final View child=findOneVisibleChild(0,layoutManager.getChildCount(),false,true);  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  @Override public String toString(){  String json=gson.toJson(this);  log.debug(json);  return json;}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) public static void write(FileDescriptor fd,byte[] bytes,int byteOffset,int byteCount) throws IOException {  ArrayUtils.checkOffsetAndCount(bytes.length,byteOffset,byteCount);  if (byteCount == 0) {    return;  }  try {    while (byteCount > 0) {      int bytesWritten=Os.write(fd,bytes,byteOffset,byteCount);      byteCount-=bytesWritten;      byteOffset+=bytesWritten;    }  } catch (  ErrnoException errnoException) {    throw new IOException(errnoException);  }}  }
class C{  public static void e(String tag,String msg,Throwable tr){  println(ERROR,tag,msg,tr);}  }
class C{  public void run(){  PrintStream pOut=null;  if (OutFile.length() != 0) {    try {      pOut=new PrintStream(OutFile);    } catch (    FileNotFoundException fnfe) {      System.err.println("Cannot output to selected file:\n" + fnfe.getMessage());      return;    }  }  try {    doOptimizedEval(OutputSemaphore,pOut,WordMin,WordMax,WordDist,CharMin,CharMax,CharDist,Do.equals("char") || Do.equals("all"),Do.equals("word") || Do.equals("all"),SummaryDir,ModelDir,Threads,Silent,Progress);  } catch (  Exception ex) {    ex.printStackTrace(System.err);  }  if (pOut != null)   pOut.close();}  }
class C{  public void addQuitter(IWantToQuit quitter){  if (this.quitters == null) {    this.quitters=new ArrayList<IWantToQuit>();  }  this.quitters.add(quitter);}  }
class C{  public static void writeImageToPpm(int[][] image,String ppmFileName) throws IOException {  try (BufferedWriter ppmOut=new BufferedWriter(new FileWriter(ppmFileName))){    int rows=image.length;    int cols=image[0].length;    ppmOut.write("P3\n");    ppmOut.write("" + rows + " "+ cols+ " 255\n");    for (    int[] anImage : image) {      StringBuilder s=new StringBuilder();      for (int j=0; j < cols; j++) {        s.append(anImage[j] + " " + anImage[j]+ " "+ anImage[j]+ "  ");      }      ppmOut.write(s.toString());    }  } }  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output) throws IOException {  writeLines(lines,lineEnding,output,Charset.defaultCharset());}  }
class C{  private static AlarmValueImpl createAlarmValue(Long tagId){  Metadata metadata=Metadata.builder().addMetadata("testString","hello").addMetadata("tesInt",1).addMetadata("booleanFoo",true).addMetadata("tesLong",1L).addMetadata("tesFloat",1.0f).addMetadata("tesDouble",1.0).build();  AlarmValueImpl alarmValue=new AlarmValueImpl(4321L,1007,"getFaultMember","getFaultFamily","getInfo",tagId,new Timestamp(System.currentTimeMillis()),true);  alarmValue.setMetadata(metadata.getMetadata());  return alarmValue;}  }
class C{  public boolean has(String key){  return a.containsKey(key);}  }
class C{  public String collectDriverStatistics(List<QueryStatistic> statisticsList,String queryId){  String sql_parse_time="";  String load_meta_time="";  String load_blocks_time="";  String block_allocation_time="";  String block_identification_time="";  long driver_part_time_tmp=0L;  long driver_part_time_tmp2=0L;  long load_blocks_time_tmp=0L;  String splitChar=" ";  try {    for (    QueryStatistic statistic : statisticsList) {switch (statistic.getMessage()) {case QueryStatisticsConstants.SQL_PARSE:        sql_parse_time+=statistic.getTimeTaken() + splitChar;      driver_part_time_tmp+=statistic.getTimeTaken();    break;case QueryStatisticsConstants.LOAD_META:  load_meta_time+=statistic.getTimeTaken() + splitChar;driver_part_time_tmp+=statistic.getTimeTaken();break;case QueryStatisticsConstants.LOAD_BLOCKS_DRIVER:load_blocks_time_tmp+=statistic.getTimeTaken();driver_part_time_tmp+=statistic.getTimeTaken();driver_part_time_tmp2+=statistic.getTimeTaken();break;case QueryStatisticsConstants.BLOCK_ALLOCATION:block_allocation_time+=statistic.getTimeTaken() + splitChar;driver_part_time_tmp+=statistic.getTimeTaken();driver_part_time_tmp2+=statistic.getTimeTaken();break;case QueryStatisticsConstants.BLOCK_IDENTIFICATION:block_identification_time+=statistic.getTimeTaken() + splitChar;driver_part_time_tmp+=statistic.getTimeTaken();driver_part_time_tmp2+=statistic.getTimeTaken();break;default :break;}}load_blocks_time=load_blocks_time_tmp + splitChar;String driver_part_time=driver_part_time_tmp + splitChar;StringBuilder tableInfo=new StringBuilder();int len1=8;int len2=20;int len3=21;int len4=24;String line="+" + printLine("-",len1) + "+"+ printLine("-",len2)+ "+"+ printLine("-",len3)+ "+"+ printLine("-",len4)+ "+";String line2="|" + printLine(" ",len1) + "+"+ printLine("-",len2)+ "+"+ printLine(" ",len3)+ "+"+ printLine("-",len4)+ "+";tableInfo.append(line).append("\n");tableInfo.append("|" + printLine(" ",(len1 - "Module".length())) + "Module"+ "|"+ printLine(" ",(len2 - "Operation Step".length()))+ "Operation Step"+ "|"+ printLine(" ",(len3 - "Total Query Cost".length()))+ "Total Query Cost"+ "|"+ printLine(" ",(len4 - "Query Cost".length()))+ "Query Cost"+ "|"+ "\n");tableInfo.append(line).append("\n");if (!StringUtils.isEmpty(sql_parse_time) && !StringUtils.isEmpty(load_meta_time) && !StringUtils.isEmpty(block_allocation_time)&& !StringUtils.isEmpty(block_identification_time)) {tableInfo.append("|" + printLine(" ",len1) + "|"+ printLine(" ",(len2 - "SQL parse".length()))+ "SQL parse"+ "|"+ printLine(" ",len3)+ "|"+ printLine(" ",(len4 - sql_parse_time.length()))+ sql_parse_time+ "|"+ "\n");tableInfo.append(line2).append("\n");tableInfo.append("|" + printLine(" ",(len1 - "Driver".length())) + "Driver"+ "|"+ printLine(" ",(len2 - "Load meta data".length()))+ "Load meta data"+ "|"+ printLine(" ",(len3 - driver_part_time.length()))+ driver_part_time+ "|"+ printLine(" ",(len4 - load_meta_time.length()))+ load_meta_time+ "|"+ "\n");tableInfo.append(line2).append("\n");tableInfo.append("|" + printLine(" ",(len1 - "Part".length())) + "Part"+ "|"+ printLine(" ",(len2 - "Load blocks driver".length()))+ "Load blocks driver"+ "|"+ printLine(" ",len3)+ "|"+ printLine(" ",(len4 - load_blocks_time.length()))+ load_blocks_time+ "|"+ "\n");tableInfo.append(line2).append("\n");tableInfo.append("|" + printLine(" ",len1) + "|"+ printLine(" ",(len2 - "Block allocation".length()))+ "Block allocation"+ "|"+ printLine(" ",len3)+ "|"+ printLine(" ",(len4 - block_allocation_time.length()))+ block_allocation_time+ "|"+ "\n");tableInfo.append(line2).append("\n");tableInfo.append("|" + printLine(" ",len1) + "|"+ printLine(" ",(len2 - "Block identification".length()))+ "Block identification"+ "|"+ printLine(" ",len3)+ "|"+ printLine(" ",(len4 - block_identification_time.length()))+ block_identification_time+ "|"+ "\n");tableInfo.append(line).append("\n");return "Print query statistic for query id: " + queryId + "\n"+ tableInfo.toString();} else if (!StringUtils.isEmpty(block_allocation_time) && !StringUtils.isEmpty(block_identification_time)) {driver_part_time=driver_part_time_tmp2 + splitChar;tableInfo.append("|" + printLine(" ",(len1 - "Driver".length())) + "Driver"+ "|"+ printLine(" ",(len2 - "Load blocks driver".length()))+ "Load blocks driver"+ "|"+ printLine(" ",len3)+ "|"+ printLine(" ",(len4 - load_blocks_time.length()))+ load_blocks_time+ "|"+ "\n");tableInfo.append(line2).append("\n");tableInfo.append("|" + printLine(" ",(len1 - "Part".length())) + "Part"+ "|"+ printLine(" ",(len2 - "Block allocation".length()))+ "Block allocation"+ "|"+ printLine(" ",(len3 - driver_part_time.length()))+ driver_part_time+ "|"+ printLine(" ",(len4 - block_allocation_time.length()))+ block_allocation_time+ "|"+ "\n");tableInfo.append(line2).append("\n");tableInfo.append("|" + printLine(" ",len1) + "|"+ printLine(" ",(len2 - "Block identification".length()))+ "Block identification"+ "|"+ printLine(" ",len3)+ "|"+ printLine(" ",(len4 - block_identification_time.length()))+ block_identification_time+ "|"+ "\n");tableInfo.append(line).append("\n");return "Print query statistic for query id: " + queryId + "\n"+ tableInfo.toString();}return null;} catch (Exception ex) {return "Put statistics into table failed, catch exception: " + ex.getMessage();}}  }
class C{  public Transformer trainMLP(JavaSparkContext jsc,List<DependencyGraph> graphs,FeatureFrame featureFrame,String classifierFileName,int numHiddenUnits){  this.sqlContext=new SQLContext(jsc);  DataFrame dataset=toDataFrame(jsc,graphs,featureFrame);  Pipeline pipeline=createPipeline();  PipelineModel pipelineModel=pipeline.fit(dataset);  DataFrame trainingData=pipelineModel.transform(dataset);  trainingData.cache();  if (verbose) {    trainingData.show(false);  }  trainingData.registerTempTable("dfTable");  Row row=sqlContext.sql("SELECT MAX(label) as maxValue from dfTable").first();  int numLabels=(int)row.getDouble(0);  numLabels++;  int vocabSize=((CountVectorizerModel)(pipelineModel.stages()[1])).getVocabSize();  int[] layers={vocabSize,numLabels};  if (numHiddenUnits > 0) {    layers=new int[3];    layers[0]=vocabSize;    layers[1]=numHiddenUnits;    layers[2]=numLabels;  }  MultilayerPerceptronClassifier classifier=new MultilayerPerceptronClassifier().setLayers(layers).setBlockSize(128).setSeed(1234L).setTol((Double)params.getOrDefault(params.getTolerance())).setMaxIter((Integer)params.getOrDefault(params.getMaxIter()));  MultilayerPerceptronClassificationModel model=classifier.fit(trainingData);  DataFrame result=model.transform(trainingData);  DataFrame predictionAndLabel=result.select("prediction","label");  MulticlassClassificationEvaluator evaluator=new MulticlassClassificationEvaluator().setMetricName("precision");  if (verbose) {    System.out.println("N = " + trainingData.count());    System.out.println("D = " + vocabSize);    System.out.println("K = " + numLabels);    System.out.println("H = " + numHiddenUnits);    System.out.println("training precision = " + evaluator.evaluate(predictionAndLabel));  }  String classifierPath=new Path(classifierFileName,"data").toString();  jsc.parallelize(Arrays.asList(model),1).saveAsObjectFile(classifierPath);  try {    String pipelinePath=new Path(classifierFileName,"pipelineModel").toString();    pipelineModel.write().overwrite().save(pipelinePath);  } catch (  IOException e) {    e.printStackTrace();  }  return model;}  }
class C{  public AccountSetNameInMenuQuery(VkApiClient client,UserActor actor,int userId){  super(client,"account.setNameInMenu",OkResponse.class);  accessToken(actor.getAccessToken());  userId(userId);}  }
class C{  public void authorLogin(String login,String password){  login(authorUrl,login,password);}  }
class C{  private void clone(final Properties properties){  if (properties.isEmpty())   return;synchronized (properties) {    for (    final String key : properties.stringPropertyNames()) {      final String value=properties.getProperty(key);      if (!Strings.isNullOrEmpty(value)) {        data.put(key,value);      }    }  }}  }
class C{  public void ack(){  if (!this.isAcknowledged) {    this.connection.sendMsg(Topic.RPC,Actions.ACK,new String[]{this.name,this.correlationId});    this.isAcknowledged=true;  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("show gridLines=");  boolean show=np.getBoolean();  np.matchIgnoreCase(";");  if (getViewer() instanceof ChartViewer) {    ((ChartViewer)getViewer()).setShowVerticalGridLines(show);  }}  }
class C{  public static Experiment createExperiment(){  return new Experiment(Constants.DEFAULT_PREFIX_EXPERIMENT + System.currentTimeMillis() + internalId++,ApplicationFactory.defaultApplication(),TestUtils.currentTimeString(),TestUtils.relativeTimeString(42),1).setCreatorID(USER_ID).setDescription("A sample Experiment description.");}  }
class C{  private Variance(SecondMoment m2,boolean incMoment,boolean isBiasCorrected){  this.moment=m2;  this.incMoment=incMoment;  this.isBiasCorrected=isBiasCorrected;}  }
class C{  public static Element encloseNodesWithNewElement(Node first,Node last,String newElementName){  if (first == null || last == null)   return null;  Node a=closestCommonAncestor(first,last);  if (a == null)   return null;  Node childA=first;  while (childA.getParentNode() != a)   childA=childA.getParentNode();  Node childZ=last;  while (childZ.getParentNode() != a)   childZ=childZ.getParentNode();  Document doc=(a.getNodeType() == Node.DOCUMENT_NODE) ? (Document)a : a.getOwnerDocument();  Element newElement=doc.createElementNS(doc.getDocumentElement().getNamespaceURI(),newElementName);  a.insertBefore(newElement,childA);  Node c=childA;  Node helper;  while (c != null && c != childZ) {    helper=c.getNextSibling();    newElement.appendChild(c);    c=helper;  }  newElement.appendChild(childZ);  return newElement;}  }
class C{  private static double evaluateInternal(double x[],double y[],double z){  int nearest=0;  final int n=x.length;  final double[] c=new double[n];  final double[] d=new double[n];  double min_dist=Double.POSITIVE_INFINITY;  for (int i=0; i < n; i++) {    c[i]=y[i];    d[i]=y[i];    final double dist=FastMath.abs(z - x[i]);    if (dist < min_dist) {      nearest=i;      min_dist=dist;    }  }  double value=y[nearest];  for (int i=1; i < n; i++) {    for (int j=0; j < n - i; j++) {      final double tc=x[j] - z;      final double td=x[i + j] - z;      final double divider=x[j] - x[i + j];      final double w=(c[j + 1] - d[j]) / divider;      c[j]=tc * w;      d[j]=td * w;    }    if (nearest < 0.5 * (n - i + 1)) {      value+=c[nearest];    } else {      nearest--;      value+=d[nearest];    }  }  return value;}  }
class C{  public DefaultQueryExtensionPathInfo(){}  }
class C{  public boolean isPaymentsAdequate(){  return isPaymentsAdequate(this.cart);}  }
class C{  public static List<JSONObject> createJSONInput(FileSystem fs){  String inputJSONFile=SystemConfiguration.getProperty(DistributedTestDriver.JSON_PIR_INPUT_FILE_PROPERTY);  logger.info("PIR JSON input being created at " + inputJSONFile);  List<JSONObject> dataElementsJSON=createJSONDataElements();  HDFS.writeFile(dataElementsJSON,fs,inputJSONFile,true);  logger.info("PIR JSON input successfully created!");  return dataElementsJSON;}  }
class C{  public synchronized boolean shouldWait(List<String> targetNames) throws InterruptedException {  if (_currentSpaceState == StartupState.LAST) {    return false;  }  if (!_activeSpaces.isEmpty())   return false;  if (_currentSpaceState == StartupState.UNINITIALIZED) {    if (_spaceName.equals(targetNames.get(0)))     return false;  }  return true;}  }
class C{  public void testByteField() throws Exception {  AnObject empty=new AnObject();  AnObject full=helper.fill(new AnObject());  assertTrue(helper.areEquals(full,full));  assertFalse(helper.areEquals(empty,full));}  }
class C{  static VersionNumber identifyOSXVersion(final String userAgent){  VersionNumber version=VersionNumber.UNKNOWN;  final List<Pattern> patterns=new ArrayList<Pattern>();  patterns.add(Pattern.compile("Mac OS X\\s?((\\d+)((\\.\\d+)+)?);"));  patterns.add(Pattern.compile("Mac OS X\\s?((\\d+)((\\_\\d+)+)?);"));  patterns.add(Pattern.compile("Mac OS X\\s?((\\d+)((\\_\\d+)+)?)\\)"));  for (  final Pattern pattern : patterns) {    final Matcher m=pattern.matcher(userAgent);    if (m.find()) {      version=parseFirstVersionNumber(m.group(MAJOR_INDEX).replaceAll("_","."));      break;    }  }  return version;}  }
class C{  @DataProvider public Object[][] dataProviderBuckets(){  return new Object[][]{new Object[]{Constants.BUCKET_STATE_CLOSED},new Object[]{Constants.BUCKET_STATE_EMPTY}};}  }
class C{  protected LeadsGetUsersQuery offerId(int value){  return unsafeParam("offer_id",value);}  }
class C{  public static Map<String,Object> runServiceFromParams(HttpServletRequest request,String paramPrefix,String serviceName,Map<String,Object> overrideParams,Collection<MapProcessor> paramValidators) throws GeneralException {  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  Map<String,Object> combinedMap=UtilHttp.getCombinedMap(request);  Map<String,Object> context;  if (paramPrefix.isEmpty()) {    context=combinedMap;  } else {    context=UtilMisc.getPrefixedMapEntries(combinedMap,paramPrefix);  }  context.putAll(overrideParams);  if (paramValidators != null && !paramValidators.isEmpty()) {    MapProcessorInvoker mpi=new MapProcessorInvoker(context,UtilHttp.getLocale(request));    mpi.process(paramValidators,true,false);    List<String> errorMessages=mpi.getAllErrorMessages();    if (!errorMessages.isEmpty()) {      Map<String,Object> validateRes=ServiceUtil.returnError(errorMessages);      Debug.logInfo("Could not validate fields: " + ServiceUtil.getErrorMessage(validateRes),module);      return validateRes;    }  }  Map<String,Object> servCtx=dispatcher.getDispatchContext().makeValidContext(serviceName,ModelService.IN_PARAM,context);  servCtx.put("userLogin",combinedMap.get("userLogin"));  servCtx.put("locale",combinedMap.get("locale"));  return dispatcher.runSync(serviceName,servCtx);}  }
class C{  private double correlationOfNewFeature(String dataFile,String[] features,int indVarColNumber,int[] X,int y,int rowIni,int rowEnd){  double corXplusy;  Regression reg=new Regression();  int j=0;  int[] Xplusf=new int[X.length + 1];  for (int i=0; i < X.length; i++)   Xplusf[i]=X[i];  Xplusf[X.length]=y;  reg.multipleLinearRegression(dataFile,indVarColNumber,Xplusf,features,interceptTerm,rowIni,rowEnd);  corXplusy=reg.getCorrelation();  return corXplusy;}  }
class C{  public double taylor(final double[] ds,final int dsOffset,final double... delta) throws MathRuntimeException {  double value=0;  for (int i=getSize() - 1; i >= 0; --i) {    final int[] orders=getPartialDerivativeOrders(i);    double term=ds[dsOffset + i];    for (int k=0; k < orders.length; ++k) {      if (orders[k] > 0) {        try {          term*=FastMath.pow(delta[k],orders[k]) / CombinatoricsUtils.factorial(orders[k]);        } catch (        MathIllegalArgumentException e) {          throw MathRuntimeException.createInternalError(e);        }      }    }    value+=term;  }  return value;}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  public void delete(final double[] key,final boolean optional) throws KeySizeException, KeyMissingException {  if (key.length != m_K) {    throw new KeySizeException();  }  final KDNode<T> t=KDNode.srch(new HPoint(key),m_root,m_K);  if (t == null) {    if (optional == false) {      throw new KeyMissingException();    }  } else {    if (KDNode.del(t)) {      m_count--;    }  }}  }
class C{  void stop(){  if (!configuration.customExecutor) {    ((ExecutorService)taskExecutor).shutdownNow();  }  if (!configuration.customExecutorForCachedImages) {    ((ExecutorService)taskExecutorForCachedImages).shutdownNow();  }  cacheKeysForImageAwares.clear();  uriLocks.clear();}  }
class C{  protected HiddenFileFilter(){}  }
class C{  @Override public boolean isNullMeasureValue(int ordinal){  return isNullMeasureValue(ordinal,rowMapping[currentRow]);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_ABSORBED_PARTY(String skilltarget,String skillcaster){  return new SM_SYSTEM_MESSAGE(1220224,skilltarget,skillcaster);}  }
class C{  public int hashCode(){  return (int)(DelegationRelativeTime.class.hashCode() + minStart + maxStart+ minStop+ maxStop);}  }
class C{  protected MarketRestoreCommentQuery commentId(int value){  return unsafeParam("comment_id",value);}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public int recycleItems(LinearLayout layout,int firstItem,ItemsRange range){  int index=firstItem;  for (int i=0; i < layout.getChildCount(); ) {    if (!range.contains(index)) {      recycleView(layout.getChildAt(i),index);      layout.removeViewAt(i);      if (i == 0) {        firstItem++;      }    } else {      i++;    }    index++;  }  return firstItem;}  }
class C{  boolean canOptimizeTopN(DataApiRequest apiRequest,TemplateDruidQuery templateDruidQuery){  return apiRequest.getDimensions().size() == 1 && apiRequest.getSorts().size() == 1 && !templateDruidQuery.isNested() && BardFeatureFlag.TOP_N.isOn() && apiRequest.getHaving() == null;}  }
class C{  public FriendsGetAppUsersQuery(VkApiClient client,UserActor actor){  super(client,"friends.getAppUsers",Utils.buildParametrizedType(List.class,Integer.class));  accessToken(actor.getAccessToken());}  }
class C{  private void checkMatrixBounds(){  RectF rect=getMatrixRectF();  float deltaX=0, deltaY=0;  final float viewWidth=getWidth();  final float viewHeight=getHeight();  if (rect.top > 0 && isCheckTopAndBottom) {    deltaY=-rect.top;  }  if (rect.bottom < viewHeight && isCheckTopAndBottom) {    deltaY=viewHeight - rect.bottom;  }  if (rect.left > 0 && isCheckLeftAndRight) {    deltaX=-rect.left;  }  if (rect.right < viewWidth && isCheckLeftAndRight) {    deltaX=viewWidth - rect.right;  }  mCurrentMatrix.postTranslate(deltaX,deltaY);}  }
class C{  public static int[] cells(int[] start,int[] end){  Arrays.sort(start);  Arrays.sort(end);  int overlap=0;  int gaps=0;  for (int i=0, j=0; j < end.length; ) {    if (i < start.length && start[i] < end[j]) {      overlap++;      i++;    } else {      j++;      overlap--;    }    if (overlap == 0) {      gaps++;    }  }  int[] cells=new int[gaps * 2];  overlap=0;  gaps=0;  int previousOverlap=0;  for (int i=0, j=0; j < end.length; ) {    if (i < start.length && start[i] < end[j]) {      overlap++;      if (previousOverlap == 0) {        cells[gaps++]=start[i];      }      i++;    } else {      overlap--;      if (overlap == 0) {        cells[gaps++]=end[j];      }      j++;    }    previousOverlap=overlap;  }  return cells;}  }
class C{  public void svdPCA(Matrix data,boolean scale,boolean debug){  int M=data.getRowDimension();  int N=data.getColumnDimension();  double mn;  double sd;  for (int i=0; i < M; i++) {    mn=MathUtils.mean(data.getArray()[i]);    if (mn == 0.0)     throw new Error("svdPCA: mean of dimension " + (i + 1) + " is 0.0");    if (scale) {      sd=MathUtils.standardDeviation(data.getArray()[i]);      if (sd == 0.0)       throw new Error("svdPCA: variance of dimension " + (i + 1) + " is 0.0");      for (int j=0; j < N; j++)       data.set(i,j,((data.get(i,j) - mn) / sd));    } else {      for (int j=0; j < N; j++)       data.set(i,j,(data.get(i,j) - mn));    }  }  if (debug) {    System.out.println("Data:");    data.print(data.getRowDimension(),3);  }  Matrix Y=data.transpose();  Y=Y.times(1.0 / Math.sqrt(N - 1));  SingularValueDecomposition svd=Y.svd();  if (debug)   System.out.println("Values:");  V=new double[svd.getS().getRowDimension()];  for (int i=0; i < svd.getS().getRowDimension(); i++) {    V[i]=svd.getS().get(i,i);    if (debug)     System.out.println(V[i]);  }  PC=svd.getV();  if (debug) {    System.out.println("PC:");    PC.print(PC.getRowDimension(),3);  }  Matrix projectedData=PC.transpose().times(data);  Matrix covProjectedData=projectedData.times(projectedData.transpose());  varianceProportion=new double[covProjectedData.getColumnDimension()];  double sumPropVar=0.0;  for (int j=0; j < covProjectedData.getColumnDimension(); j++) {    varianceProportion[j]=covProjectedData.get(j,j);    sumPropVar+=varianceProportion[j];  }  for (int j=0; j < covProjectedData.getColumnDimension(); j++)   varianceProportion[j]=varianceProportion[j] / sumPropVar;}  }
class C{  public static boolean isFileNewer(File file,long timeMillis){  if (file == null) {    throw new IllegalArgumentException("No specified file");  }  if (!file.exists()) {    return false;  }  return file.lastModified() > timeMillis;}  }
class C{  public static int findNextIndexNonZero(double[] contour,int current){  for (int i=current + 1; i < contour.length; i++) {    if (contour[i] != 0) {      return i;    }  }  return -1;}  }
class C{  public AudioAddQuery(VkApiClient client,UserActor actor,int audioId,int ownerId){  super(client,"audio.add",Integer.class);  accessToken(actor.getAccessToken());  audioId(audioId);  ownerId(ownerId);}  }
class C{  public boolean isStrict2(){  return this.strict2;}  }
class C{  private final boolean eq(Object o1,Object o2){  return o1 == o2 || ((o1 != null) && o1.equals(o2));}  }
class C{  public void init$Children(){  children=new ASTNode[4];  setChild(new Opt(),1);  setChild(new List(),2);  setChild(new List(),3);}  }
class C{  public void processUtterance(Utterance utterance) throws ProcessException {  if (utterance.getRelation(Relation.SEGMENT) == null) {    throw new IllegalStateException("DiphoneUnitSelector: Segment relation does not exist");  }  utterance.setObject(SampleInfo.UTT_NAME,diphoneDatabase.getSampleInfo());  createUnitRelation(utterance);}  }
class C{  @Override public PacketBuffer write(PacketBuffer buf){  values.forEach(null);  return buf;}  }
class C{  public Node addNode(){  int nrow=addNodeRow();  return (Node)m_nodeTuples.getTuple(nrow);}  }
class C{  public boolean isLocked(){  return locked;}  }
class C{  public static String bind(String key){  try {    return getResourceBundle().getString(key);  } catch (  MissingResourceException e) {    return key;  }catch (  NullPointerException e) {    return "!" + key + "!";  }}  }
class C{  public SizeFileFilter(long size,boolean acceptLarger){  if (size < 0) {    throw new IllegalArgumentException("The size must be non-negative");  }  this.size=size;  this.acceptLarger=acceptLarger;}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  IntersectsImpl filter=null;  if ((parameterList == null) || (parameterList.size() != 2)) {    filter=new IntersectsExtended();  } else {    filter=new IntersectsExtended(parameterList.get(0),parameterList.get(1));  }  return filter;}  }
class C{  public AppsGetCatalogQuery platform(AppsPlatform value){  return unsafeParam("platform",value);}  }
class C{  public static final MediaFormat createVideoFormat(String mime,int width,int height){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_WIDTH,width);  format.setInteger(KEY_HEIGHT,height);  return format;}  }
class C{  public void showTimesShort(long overall){  double avgTime=0.0;  double totTime=sum / 1000.0;  double overallPercent=0;  if (count == 0) {    return;  }  if (count > 0) {    avgTime=sum / count / 1000.0;  }  if (overall != 0) {    overallPercent=sum / overall;  }  if (notReliable) {    System.out.print(Utilities.pad(name,15) + " ");    System.out.println("Not reliable.");  } else {    System.out.print(Utilities.pad(name,15) + " ");    System.out.print(Utilities.pad("" + count,6));    System.out.print(fmtTime(curTime));    System.out.print(fmtTime(minTime));    System.out.print(fmtTime(maxTime));    System.out.print(fmtTime(avgTime));    System.out.print(fmtTime(sum / 1000.0));    System.out.print(percentFormatter.format(overallPercent));    System.out.println();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PROCFPHeal_Instant_HEAL_ME_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200545,skilltarget,num0,skillname);}  }
class C{  protected void clearResults(){  setStatus("",false);  if (mResultBar != null) {    mResultBar.clearMatchRects();  }}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  public static Step fromCursor(Cursor cursor){  Step step=new Step();  for (int c=0; c < cursor.getColumnCount(); c++) {    String columnName=cursor.getColumnName(c);    if (columnName.equals(RecipeInstructionsTable.PHOTO_COLUMN)) {      step.setPhoto(cursor.getString(c));    } else     if (columnName.equals(RecipeInstructionsTable.DESCRIPTION_COLUMN)) {      step.setDescription(cursor.getString(c));    }  }  return step;}  }
class C{  public AccessPath dropFirstField(){  if (fields == null || fields.length == 0)   return this;  final SootField[] newFields;  final Type[] newTypes;  if (fields.length > 1) {    newFields=new SootField[fields.length - 1];    System.arraycopy(fields,1,newFields,0,fields.length - 1);    newTypes=new Type[fields.length - 1];    System.arraycopy(fieldTypes,1,newTypes,0,fields.length - 1);  } else {    newFields=null;    newTypes=null;  }  return new AccessPath(value,newFields,fieldTypes[0],newTypes,taintSubFields);}  }
class C{  public EntryUpdatedPacket(OperationID operationID,IEntryHolder originalEntryHolder,IEntryHolder newEntryHolder,IEntryHolder notifyEH,ServerTransaction xtn,boolean fromReplication,boolean notifyMatch,boolean notifyRematch){  super(operationID,newEntryHolder,xtn,0);  _originalEntryHolder=originalEntryHolder;  _notifyEH=notifyEH;  _fromReplication=fromReplication;  _notifyMatched=notifyMatch;  _notifyRematched=notifyRematch;}  }
class C{  public void trim(int leftTrimNumberOfSample,int rightTrimNumberOfSample){  long chunkSize=waveHeader.getChunkSize();  long subChunk2Size=waveHeader.getSubChunk2Size();  long totalTrimmed=leftTrimNumberOfSample + rightTrimNumberOfSample;  if (totalTrimmed > subChunk2Size) {    leftTrimNumberOfSample=(int)subChunk2Size;  }  chunkSize-=totalTrimmed;  subChunk2Size-=totalTrimmed;  if (chunkSize >= 0 && subChunk2Size >= 0) {    waveHeader.setChunkSize(chunkSize);    waveHeader.setSubChunk2Size(subChunk2Size);    byte[] trimmedData=new byte[(int)subChunk2Size];    System.arraycopy(data,leftTrimNumberOfSample,trimmedData,0,(int)subChunk2Size);    data=trimmedData;  } else {    System.err.println("Trim error: Negative length");  }}  }
class C{  public Bundler putInt(String key,int value){  bundle.putInt(key,value);  return this;}  }
class C{  public static long pow(final long k,long e) throws IllegalArgumentException {  if (e < 0) {    throw MathRuntimeException.createIllegalArgumentException("cannot raise an integral value to a negative power ({0}^{1})",k,e);  }  long result=1l;  long k2p=k;  while (e != 0) {    if ((e & 0x1) != 0) {      result*=k2p;    }    k2p*=k2p;    e=e >> 1;  }  return result;}  }
class C{  public void configureForCurrentlyOpenTabs(boolean isExpanded){  mDeviceIcon.setVisibility(View.VISIBLE);  mDeviceIcon.setImageResource(DeviceFormFactor.isTablet(getContext()) ? R.drawable.recent_tablet : R.drawable.recent_phone);  String title=getResources().getString(R.string.recent_tabs_this_device);  mDeviceLabel.setText(title);  setTimeLabelVisibility(View.GONE);  configureExpandedCollapsed(isExpanded);}  }
class C{  public NewsfeedAddBanQuery userIds(Integer... value){  return unsafeParam("user_ids",value);}  }
class C{  PurityGraph(){  nodes=new HashSet();  paramNodes=new HashSet();  edges=new HashMultiMap();  locals=new HashMultiMap();  ret=new HashSet();  globEscape=new HashSet();  backEdges=new HashMultiMap();  backLocals=new HashMultiMap();  mutated=new HashMultiMap();  if (doCheck)   sanityCheck();}  }
class C{  public void loading(){  mHintView.setVisibility(View.GONE);  mProgressBar.setVisibility(View.VISIBLE);}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  if ((dateModel != null) && (timePicker != null) && (undoRedoObject != null)) {    if (undoRedoObject.getNewValue() instanceof Date) {      Date newValue=(Date)undoRedoObject.getNewValue();      dateModel.setValue(newValue);      timePicker.setValue(newValue);    }  }}  }
class C{  public static boolean isTrue(boolean expression){  return isTrue(expression,"");}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.String getSystemPackage0(java.lang.String)")) {    java_lang_Package_getSystemPackage0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.String[] getSystemPackages0()")) {    java_lang_Package_getSystemPackages0(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void removeAtMeGroup(String groupId){  if (atMeGroupList.contains(groupId)) {    atMeGroupList.remove(groupId);    EasePreferenceManager.getInstance().setAtMeGroups(atMeGroupList);  }}  }
class C{  public void onReset(){}  }
class C{  public PublicKey(byte[] pub,Cryptography crypto){  this.pub=pub;  this.crypto=crypto;}  }
class C{  public static String validateConnectionDetails(final UserInterfaceMqttConnectionDetails connectionDetails,final boolean finalCheck){  String returnValue=pl.baczkowicz.mqttspy.utils.ConnectionUtils.validateConnectionDetails(connectionDetails);  if (connectionDetails.getUserAuthentication() != null && connectionDetails.getUserCredentials() != null) {    if ((finalCheck || !connectionDetails.getUserAuthentication().isAskForUsername()) && (connectionDetails.getUserCredentials().getUsername() == null || connectionDetails.getUserCredentials().getUsername().trim().isEmpty())) {      returnValue="With user authentication enabled, user name cannot be empty";    }  }  return returnValue;}  }
class C{  public CatchResult catchPokemon(double normalizedHitPosition,double normalizedReticleSize,double spinModifier,Pokeball type,int amount) throws LoginFailedException, RemoteServerException {  return catchPokemon(normalizedHitPosition,normalizedReticleSize,spinModifier,type,amount,0);}  }
class C{  public DeviceInfo(DeviceInfos deviceInfos){  this();  deviceInfoBuilder.setAndroidBoardName(deviceInfos.getAndroidBoardName()).setAndroidBootloader(deviceInfos.getAndroidBootloader()).setDeviceBrand(deviceInfos.getDeviceBrand()).setDeviceId(deviceInfos.getDeviceId()).setDeviceModel(deviceInfos.getDeviceModel()).setDeviceModelBoot(deviceInfos.getDeviceModelBoot()).setDeviceModelIdentifier(deviceInfos.getDeviceModelIdentifier()).setFirmwareBrand(deviceInfos.getFirmwareBrand()).setFirmwareFingerprint(deviceInfos.getFirmwareFingerprint()).setFirmwareTags(deviceInfos.getFirmwareTags()).setFirmwareType(deviceInfos.getFirmwareType()).setHardwareManufacturer(deviceInfos.getHardwareManufacturer()).setHardwareModel(deviceInfos.getHardwareModel());}  }
class C{  public EnumElemValPair(String name,char kind,String tval,String cval){  super(name,kind);  this.tval=new AsciiCP(tval);  this.cval=new AsciiCP(cval);}  }
class C{  public int readLastByte(){  return ((int)arr[pos]) & 0xFF;}  }
class C{  public void drawChart(Graphics2D gc){  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));  int y0=getHeight() - bottomMargin;  int y1=topMargin;  double topY;  if (scalingType == ChartViewer.ScalingType.PERCENT)   topY=101; else   if (scalingType == ChartViewer.ScalingType.LOG) {    topY=computeMaxYAxisValueLogScale(getMaxValue());  } else   if (scalingType == ChartViewer.ScalingType.SQRT) {    topY=Math.sqrt(getMaxValue());  } else   topY=1.1 * getMaxValue();  double yFactor=(y0 - y1) / topY;  int x0=leftMargin;  int x1=getWidth() - rightMargin;  if (x0 >= x1)   return;  final Document doc=getViewer().getDir().getDocument();  final Map<String,Integer> group2index=new HashMap<>();  final ArrayList<Pair<String,ArrayList<String>>> groupSamplePairs=new ArrayList<>();  final boolean hasGroups=doc.getSampleAttributeTable().hasGroups();  final Random random=new Random(666);  for (  String series : doc.getSampleAttributeTable().getSampleOrder()) {    series=cleanSeriesName(series);    if (chartData.getSeriesNames().contains(series)) {      String groupId=hasGroups ? doc.getSampleAttributeTable().getGroupId(series) : "all";      if (groupId != null) {        Integer index=group2index.get(groupId);        if (index == null) {          index=groupSamplePairs.size();          groupSamplePairs.add(new Pair<>(groupId,new ArrayList<String>()));          group2index.put(groupId,index);        }        final ArrayList<String> list=groupSamplePairs.get(index).getSecond();        list.add(series);      }    }  }  final WhiskerData whiskerData=new WhiskerData();  final WhiskerData whiskerDataTransformed=new WhiskerData();  int numberOfGroups=groupSamplePairs.size();  int numberOfClasses=getChartData().getNumberOfClasses();  if (numberOfGroups == 0 || numberOfClasses == 0)   return;  double xStep=(x1 - x0) / ((numberOfClasses + (isGapBetweenBars() ? 1 : 0)) * numberOfGroups);  final double bigSpace=Math.max(2,Math.min(10,xStep));  xStep=(x1 - x0 - (isGapBetweenBars() ? bigSpace * numberOfGroups : 0)) / (numberOfClasses * numberOfGroups);  final BasicStroke dotted=new BasicStroke(1,BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL,0,new float[]{1,2},0);  int d=0;  for (  Pair<String,ArrayList<String>> pair : groupSamplePairs) {    final String groupName=pair.getFirst();    if (isShowXAxis()) {      final double xLabel=leftMargin + (isGapBetweenBars() ? (d + 1) * bigSpace : 0) + ((d + 0.5) * numberOfClasses) * xStep;      Point2D apt=new Point2D.Double(xLabel,getHeight() - 2);      Dimension labelSize=Basic.getStringSize(gc,groupName,gc.getFont()).getSize();      apt.setLocation(apt.getX() - labelSize.getWidth() / 2,apt.getY());      gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.BLACK));      drawString(gc,groupName,apt.getX(),apt.getY(),0);    }    int c=0;    for (    String className : getChartData().getClassNames()) {      int xPos=(int)Math.round(x0 + (isGapBetweenBars() ? (d + 1) * bigSpace : 0) + (d * numberOfClasses + c) * xStep);      final boolean isSelected=getChartData().getChartSelection().isSelected(null,className);      if (isShowXAxis()) {        Point2D apt=new Point2D.Double(xPos,getHeight() - bottomMargin + 10);        Dimension labelSize=Basic.getStringSize(gc,className,gc.getFont()).getSize();        if (classLabelAngle == 0) {          apt.setLocation(apt.getX() - labelSize.getWidth() / 2,apt.getY());        } else         if (classLabelAngle > Math.PI / 2) {          apt=Geometry.translateByAngle(apt,classLabelAngle,-labelSize.width);        }        if (sgc != null)         sgc.setCurrentItem(new String[]{null,className});        if (isSelected) {          gc.setColor(ProgramProperties.SELECTION_COLOR);          fillAndDrawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);        }        gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.BLACK));        drawString(gc,className,apt.getX(),apt.getY(),classLabelAngle);        if (sgc != null)         sgc.clearCurrentItem();      }      whiskerData.clear();      whiskerDataTransformed.clear();      for (      String series : pair.getSecond()) {        double value=getChartData().getValueAsDouble(series,className);        whiskerData.add(value,series);switch (scalingType) {case PERCENT:{            double total=getChartData().getTotalForSeriesIncludingDisabledAttributes(series);            if (total == 0)             value=0; else             value*=(100 / total);            break;          }case LOG:{          if (value == 1)           value=Math.log10(2) / 2; else           if (value > 0)           value=Math.log10(value);          break;        }case SQRT:{        if (value > 0)         value=Math.sqrt(value);        break;      }  }  whiskerDataTransformed.add(value,series);}final Color color=getChartColors().getClassColor(class2HigherClassMapper.get(className));final Color darkColor=color.darker();for (final Pair<Double,String> p : whiskerDataTransformed) {  boolean isSelected2=isSelected;  final double value=p.getFirst();  final String series=p.getSecond();  if (sgc != null) {    sgc.setCurrentItem(new String[]{series,className});  } else   if (!isSelected2)   isSelected2=getChartData().getChartSelection().isSelected(series,null);  final int x=xPos + random.nextInt(6) - 3;  int height=(int)Math.round(y0 - Math.max(1,value * yFactor));  if (isSelected2) {    gc.setColor(ProgramProperties.SELECTION_COLOR);    gc.fillOval(x - 5,height - 5,10,10);  }  gc.setColor(color);  gc.fillOval(x - 1,height - 1,2,2);  gc.setColor(darkColor);  gc.drawOval(x - 1,height - 1,2,2);  if (sgc != null) {    sgc.clearCurrentItem();  }}gc.setColor(isSelected ? ProgramProperties.SELECTION_COLOR : darkColor);final int minHeight=(int)Math.round(y0 - Math.max(1,whiskerDataTransformed.getMin() * yFactor));final int quarterHeight=(int)Math.round(y0 - Math.max(1,whiskerDataTransformed.getFirstQuarter() * yFactor));final int medianHeight=(int)Math.round(y0 - Math.max(1,whiskerDataTransformed.getMedian() * yFactor));final int threeQuaterHeigth=(int)Math.round(y0 - Math.max(1,whiskerDataTransformed.getThirdQuarter() * yFactor));final int maxHeight=(int)Math.round(y0 - Math.max(1,whiskerDataTransformed.getMax() * yFactor));gc.drawLine(xPos - 4,minHeight,xPos + 4,minHeight);gc.drawLine(xPos - 4,maxHeight,xPos + 4,maxHeight);gc.drawLine(xPos - 7,quarterHeight,xPos + 7,quarterHeight);gc.setStroke(HEAVY_STROKE);gc.drawLine(xPos - 6,medianHeight,xPos + 6,medianHeight);gc.setStroke(NORMAL_STROKE);gc.drawLine(xPos - 7,threeQuaterHeigth,xPos + 7,threeQuaterHeigth);gc.drawLine(xPos - 7,quarterHeight,xPos - 7,threeQuaterHeigth);gc.drawLine(xPos + 7,quarterHeight,xPos + 7,threeQuaterHeigth);gc.setStroke(dotted);gc.drawLine(xPos,minHeight,xPos,quarterHeight);gc.drawLine(xPos,maxHeight,xPos,threeQuaterHeigth);gc.setStroke(NORMAL_STROKE);if (sgc != null) sgc.clearCurrentItem();if (showValues || isSelected) {  String label="" + (int)whiskerData.getMedian();  valuesList.add(new DrawableValue(label,xPos - 4,medianHeight - 1,isSelected));  if (minHeight > medianHeight) {    label="" + (int)whiskerData.getMin();    valuesList.add(new DrawableValue(label,xPos - 4,minHeight + getFont().getSize() + 1,isSelected));  }  if (medianHeight - getFont().getSize() > maxHeight) {    label="" + (int)whiskerData.getMax();    valuesList.add(new DrawableValue(label,xPos - 4,maxHeight - 1,isSelected));  }}c++;}d++;}if (valuesList.size() > 0) {gc.setFont(getFont(ChartViewer.FontKeys.ValuesFont.toString()));DrawableValue.drawValues(gc,valuesList,true,false);valuesList.clear();}}  }
class C{  public static ArrayList<String> matches(String text){  return matches(text,ALL);}  }
class C{  public static int poisson(double lambda){  if (!(lambda > 0.0))   throw new IllegalArgumentException("Parameter lambda must be positive");  if (Double.isInfinite(lambda))   throw new IllegalArgumentException("Parameter lambda must not be infinite");  int k=0;  double p=1.0;  double L=Math.exp(-lambda);  do {    k++;    p*=uniform();  } while (p >= L);  return k - 1;}  }
class C{  protected ResponseContext addPaginationInfoToResponseContext(ResponseContext responseContext,UriInfo uriInfo,Pagination<Result> pages){  LinkedHashMap<String,URI> bodyLinks=Arrays.stream(PaginationLink.values()).map(null).filter(null).map(null).map(null).map(null).collect(StreamUtils.toLinkedMap(null,null));  responseContext.put(ResponseContextKeys.PAGINATION_LINKS_CONTEXT_KEY.getName(),bodyLinks);  responseContext.put(ResponseContextKeys.PAGINATION_CONTEXT_KEY.getName(),pages);  return responseContext;}  }
class C{  public EnclMethAttr(String a,String b,String c){  cls=new ClassCP(a);  if (!b.isEmpty() && !c.isEmpty())   meth=new NameTypeCP(b,c);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DELETE_CASH_CUSTOMANIMATION_BY_TIMEOUT(String value0){  return new SM_SYSTEM_MESSAGE(1400917,value0);}  }
class C{  public String toString(){  final StringBuilder buf=new StringBuilder("{");  for (int i=0, end=_pos - 1; i < end; i++) {    buf.append(_data[i]);    buf.append(", ");  }  if (size() > 0) {    buf.append(_data[_pos - 1]);  }  buf.append("}");  return buf.toString();}  }
class C{  public Vector3f negate(){  return new Vector3f(-x,-y,-z);}  }
class C{  public static GroupMapping createSpecificMapping(String... specificGroups){  return new GroupMapping(specificGroups);}  }
class C{  private void handleServiceBoundH(){  if (mVerb != VERB_BINDING) {    closeAndCleanupJobH(false);    return;  }  if (mCancelled.get()) {    closeAndCleanupJobH(true);    return;  }  try {    mVerb=VERB_STARTING;    scheduleOpTimeOut();    service.startJob(mParams);  } catch (  RemoteException e) {    e.printStackTrace();  }}  }
class C{  private String constantToObjectName(String string){  if (!Character.isUpperCase(string.charAt(0))) {    string=StringUtils.capitalize(string);    int length=string.length();    for (int i=0; i < length; i++) {      char character=string.charAt(i);      if (character == "_".charAt(0)) {        String firstPart=string.substring(0,i);        String secondPart=string.substring(i + 1,length);        String newSecondPart=StringUtils.capitalize(secondPart);        string=firstPart + newSecondPart;        i=firstPart.length();        length--;      }    }  }  return string;}  }
class C{  protected PhotosConfirmTagQuery tagId(int value){  return unsafeParam("tag_id",value);}  }
class C{  private LRMIInvocationContext snapshot(){  LRMIInvocationContext newContext=_nextContext == null ? new LRMIInvocationContext() : _nextContext;  newContext._previousContext=this;  return newContext;}  }
class C{  public LikesGetListQuery friendsOnly(Boolean value){  return unsafeParam("friends_only",value);}  }
class C{  public boolean isSection(String key){  Object value=this.get(key);  return value instanceof ConfigSection;}  }
class C{  public void removeAllSets(){  Iterator sets=m_map.entrySet().iterator();  while (sets.hasNext()) {    Map.Entry entry=(Map.Entry)sets.next();    TupleSet ts=(TupleSet)entry.getValue();    sets.remove();    m_sets.remove(ts);    if (m_lstnr != null)     ts.removeTupleSetListener(m_lstnr);  }  m_count=0;}  }
class C{  public MarketSearchQueryWithExtended(VkApiClient client,UserActor actor,int ownerId){  super(client,"market.search",SearchExtendedResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  extended(true);}  }
class C{  @SuppressWarnings("unchecked") public boolean run(@NotNull File destination,@NotNull File patchFile,@NotNull ProgressIndicator progress) throws RestartRequiredException {  Object ui;  try {    ui=myUiClass.getConstructor(Component.class,ProgressIndicator.class).newInstance(null,progress);  } catch (  ReflectiveOperationException e) {    progress.logWarning("Failed to create updater UI!",e);    return false;  }  Method initLogger;  try {    initLogger=myRunnerClass.getMethod("initLogger");    initLogger.invoke(null);  } catch (  ReflectiveOperationException e) {    progress.logWarning("Failed to initialize logger!",e);    return false;  }  Method doInstall;  try {    doInstall=myRunnerClass.getMethod("doInstall",String.class,myUiBaseClass,String.class);  } catch (  Throwable e) {    progress.logWarning("Failed to find main method in runner!",e);    return false;  }  try {    progress.logInfo("Running patcher...");    if (!(Boolean)doInstall.invoke(null,patchFile.getPath(),ui,destination.getPath())) {      progress.logWarning("Failed to apply patch");      return false;    }    progress.logInfo("Patch applied.");  } catch (  InvocationTargetException e) {    if (e.getCause() instanceof RestartRequiredException) {      throw (RestartRequiredException)e.getTargetException();    }    progress.logWarning("Failed to run patcher",e);    return false;  }catch (  Throwable e) {    progress.logWarning("Failed to run patcher",e);    return false;  }  return true;}  }
class C{  private void internalSetValue(Integer value){  if (spinner != null) {    if (value.intValue() < minValue) {      spinner.setValue(minValue);    } else     if (value.intValue() > maxValue) {      spinner.setValue(maxValue);    } else {      spinner.setValue(value);    }  }}  }
class C{  Delta newDeleteStorage(Storage storage){  return Deltas.mapBuilder().update(STORAGE.key(),Deltas.mapBuilder().remove(storage.getUuidString()).deleteIfEmpty().build()).deleteIfEmpty().build();}  }
class C{  public SootField(String name,Type type,int modifiers){  this.name=name;  this.type=type;  this.modifiers=modifiers;  if (type instanceof RefLikeType)   Scene.v().getFieldNumberer().add(this);}  }
class C{  @Override public boolean markSupported(){  return fInputStream.markSupported();}  }
class C{  public PathFileComparator(){  this.caseSensitivity=IOCase.SENSITIVE;}  }
class C{  public CascadedTable(Table parent,ColumnProjection colFilter){  this(parent,null,colFilter);}  }
class C{  private void chooseDataSourceToOpen(){  DataSourcePropertiesInterface dsProperties=SLDEditorFile.getInstance().getDataSource();  String dataSourceString=null;  if (dsProperties != null) {    dataSourceString=ExternalFilenames.convertURLToFile(dsProperties.getFilename());  }  JFileChooser fileChooser=new JFileChooser();  FileNameExtensionFilter filter=new FileNameExtensionFilter("Raster files",supportedFileTypes);  fileChooser.setFileFilter(filter);  try {    if (dataSourceString != null) {      File f=new File(new File(dataSourceString).getCanonicalPath());      if (f.exists()) {        fileChooser.setSelectedFile(f);      }    }    int result=fileChooser.showOpenDialog(Controller.getInstance().getFrame());    if (result == JFileChooser.APPROVE_OPTION) {      File selectedFile=fileChooser.getSelectedFile();      dsProperties=getDataSourceProperties(DataSourceProperties.encodeFilename(selectedFile.getAbsolutePath()));      SLDEditorFile.getInstance().setDataSource(dsProperties);      if (dataSource != null) {        dataSource.connect(SLDEditorFile.getInstance());      }    }  } catch (  IOException e1) {    ConsoleManager.getInstance().exception(this,e1);  }}  }
class C{  @RequestMapping(method=RequestMethod.GET,produces="application/json") public JsonNode listDeployments(HttpServletRequest request){  log.debug("REST request to get a list of apps");  JsonNode resultNode=null;  ServerConfig serverConfig=retrieveServerConfig();  Map<String,String[]> parameterMap=getRequestParametersWithoutServerId(request);  try {    resultNode=clientService.listAppDefinitions(serverConfig,parameterMap);  } catch (  ActivitiServiceException e) {    throw new BadRequestException(e.getMessage());  }  return resultNode;}  }
class C{  public boolean canContain(Element other){  return theType.canContain(other.theType);}  }
class C{  public void replaceAuxiliaryData(Map<String,byte[]> label2data) throws IOException {  loadInfoSection();  try (InputOutputReaderWriter io=new InputOutputReaderWriter(new FileRandomAccessReadWriteAdapter(file.getPath(),"rw"))){    long newPos=infoSection.getAuxiliaryDataStart();    if (newPos == 0)     newPos=infoSection.getInfoSectionStart();    io.seek(newPos);    infoSection.setAuxiliaryDataStart(newPos);    StringBuilder buf=new StringBuilder();    for (    String label : label2data.keySet()) {      byte[] bytes=label2data.get(label);      if (bytes != null) {        buf.append("<<<").append(label).append(">>>").append(new String(bytes));      }    }    byte[] bytes=buf.toString().getBytes();    io.write(bytes,0,bytes.length);    infoSection.setAuxiliaryDataEnd(io.getPosition());    infoSection.write(io);    io.setLength(io.getPosition());  } }  }
class C{  public float readFloat() throws IOException {  read(bytes,0,4);  for (int i=0; i < 4; i++)   byteBuffer.put(i,bytes[4 - i - 1]);  return byteBuffer.getFloat(0);}  }
class C{  public static ExecutorRequirement create(ExecutorInfo executorInfo) throws InvalidRequirementException {  if (executorInfo.getExecutorId().getValue().isEmpty()) {    return createExecutorRequirement(executorInfo);  } else {    return getExistingExecutorRequirement(executorInfo);  }}  }
class C{  public AbstractInfoflow(BiDirICFGFactory icfgFactory){  if (icfgFactory == null)   this.icfgFactory=new DefaultBiDiICFGFactory(); else   this.icfgFactory=icfgFactory;}  }
class C{  public void initialiseSelectedStyledLayerIndex(){  this.selectedStyledLayerIndex=0;}  }
class C{  public Set<String> toFilenameSet(int iSubset){  HashSet s=new HashSet();  if ((iSubset & FROM_TRAINING_SET) > 0)   for (  Object elem : getTrainingSet()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)elem;    s.add(cfeCur.getFileName());  }  if ((iSubset & FROM_TEST_SET) > 0)   for (  Object elem : getTestSet()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)elem;    s.add(cfeCur.getFileName());  }  return s;}  }
class C{  public int read(byte[] b) throws IOException {  if (firstRead) {    firstRead=false;    refillBuffer();    pos=skipSize;    if (ratio != 1) {      b[0]=0;      b[1]=0;      return readBytesFormBuffer(b,2,b.length - 2) + 2;    } else {      return readBytesFormBuffer(b,0,b.length);    }  } else {    return readBytesFormBuffer(b,0,b.length);  }}  }
class C{  public PhotosEditAlbumQuery privacyView(List<String> value){  return unsafeParam("privacy_view",value);}  }
class C{  public V remove(Object key){  int hash=hash(key.hashCode());  return segmentFor(hash).remove(key,hash,null);}  }
class C{  private void AttackPath(int kind,int num,int aKind){  enemys[kind][num].begin_Attack(aKind);}  }
class C{  @Override public void onCaptureFailed(Throwable e){}  }
class C{  private void locationPlacesIntent(){  try {    PlacePicker.IntentBuilder builder=new PlacePicker.IntentBuilder();    startActivityForResult(builder.build(this),PLACE_PICKER_REQUEST);  } catch (  GooglePlayServicesRepairableException|GooglePlayServicesNotAvailableException e) {    e.printStackTrace();  }}  }
class C{  public TrustManagerBuilder withCertChainListener(CertChainListener listener){  mgr.addCertChainListener(listener);  return (this);}  }
class C{  private tsfile_header updateHeaderData(List<EncodedTscHeaderForWrite> headers){  final tsfile_header hdr=doReadLocked(null);  if (isDistinct()) {    boolean distinct=true;    Stream<DateTime> tsStream=headers.stream().map(null);    if (!headers.get(0).getTimestamp().isAfter(getEnd())) {      try {        tsStream=Stream.concat(tsStream,sequence().reverse().map(null,true,true,true).stream());      } catch (      Exception ex) {        LOG.log(Level.WARNING,"read error during new record write",ex);        distinct=false;      }      if (distinct) {        distinct=tsStream.collect(Collectors.groupingBy(Function.identity(),Collectors.counting())).values().stream().allMatch(null);      }      if (!distinct)       hdr.flags&=~header_flags.DISTINCT;    }  }  if (!tsdataHeaders.isEmpty() && !headers.get(0).getTimestamp().isAfter(FromXdr.timestamp(hdr.last)))   hdr.flags&=~header_flags.SORTED;  if (tsdataHeaders.isEmpty() || headers.get(0).getTimestamp().isBefore(FromXdr.timestamp(hdr.first)))   hdr.first=ToXdr.timestamp(headers.get(0).getTimestamp());  if (tsdataHeaders.isEmpty() || headers.get(headers.size() - 1).getTimestamp().isAfter(FromXdr.timestamp(hdr.last)))   hdr.last=ToXdr.timestamp(headers.get(headers.size() - 1).getTimestamp());  return hdr;}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  public void clearReads(){  dataTable.clear();  setNumberReads(0);}  }
class C{  @Override public double[] makeCumulativeTestValues(){  return new double[]{0,0,0.341417152147,0.512125728221,0.625931445604,0.71128573364,0.77956916407,0.836472022761,0.885245901639,0.927923045658,0.965858284785,1d,1d};}  }
class C{  public int writeToMessage(ByteBuffer byteBuffer){  int remaining=byteBuffer.remaining();  while (this.length + remaining > capacity) {    if (!this.messageBuffer.expandMessage(this)) {      return -1;    }  }  int bytesToCopy=Math.min(remaining,this.capacity - this.length);  byteBuffer.get(this.sharedArray,this.offset + this.length,bytesToCopy);  this.length+=bytesToCopy;  return bytesToCopy;}  }
class C{  public boolean isInsideItemUseZone(ZoneName zoneName,Creature creature){  for (Entry<Integer,TreeSet<ZoneInstance>> e=zoneMap.head(), mapEnd=zoneMap.tail(); (e=e.getNext()) != mapEnd; ) {    TreeSet<ZoneInstance> zones=e.getValue();    for (    ZoneInstance zone : zones) {      if (!zone.getZoneTemplate().getXmlName().startsWith(zoneName.toString())) {        continue;      }      if (!zone.isInsideCreature(creature)) {        continue;      }      return true;    }  }  return false;}  }
class C{  @Override public void createUI(){  createFieldPanel(0,"");  initialised=true;}  }
class C{  public AgeFileFilter(Date cutoffDate,boolean acceptOlder){  this(cutoffDate.getTime(),acceptOlder);}  }
class C{  public static final MediaFormat createSubtitleFormat(String title,String language){  MediaFormat format=new MediaFormat();  format.setString(KEY_TITLE,title);  format.setString(KEY_LANGUAGE,language);  return format;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedFPATK_Instant_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200808,skillcaster,skillname);}  }
class C{  public DelimitedTextTableReader(String delimiterRegex){  m_delim=delimiterRegex;}  }
class C{  @Override public Object evaluate(Map<Long,Object> pInputParams) throws RuleEvaluationException {  Object result;  try {    result=this.condition.evaluate(pInputParams);  } catch (  RuleEvaluationException e) {    throw e;  }catch (  Exception e) {    final String ruleExpression;    if (this.condition != null && this.condition.getExpression() != null) {      ruleExpression=this.condition.getExpression();    } else {      ruleExpression="";    }    throw new RuntimeException(String.format("Unexpected error while trying to evaluate the expression '%s'",ruleExpression),e);  }  if (result == null) {    throw new RuleEvaluationException(new StringBuffer("Error evaluating condition: ").append(this.condition.getExpression()).toString());  }  try {    if (((Boolean)result).equals(Boolean.TRUE)) {      return this.resultValue;    } else {      return null;    }  } catch (  ClassCastException ce) {    throw new RuleEvaluationException(new StringBuffer("Condition does not evaluate to TRUE or FALSE: ").append(this.condition.getExpression()).toString());  }}  }
class C{  public static DataSourcePropertiesInterface decodeXML(Document document,String elementName){  if ((document == null) || (elementName == null)) {    return null;  }  Map<String,String> map=new LinkedHashMap<String,String>();  NodeList nodeList=document.getElementsByTagName(elementName);  if (nodeList.getLength() > 0) {    Node node=nodeList.item(0);    Node child=node.getFirstChild();    while (child != null) {      if (child.getNodeType() == Node.ELEMENT_NODE) {        map.put(child.getNodeName(),child.getTextContent());      }      child=child.getNextSibling();    }    return DataSourceConnectorFactory.getDataSourceProperties(map);  } else {    return DataSourceConnectorFactory.getNoDataSource();  }}  }
class C{  public static DisplayMetrics displayMetrics(Context context){  DisplayMetrics dm=new DisplayMetrics();  WindowManager windowManager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  windowManager.getDefaultDisplay().getMetrics(dm);  LogUtils.debug("screen width=" + dm.widthPixels + "px, screen height="+ dm.heightPixels+ "px, densityDpi="+ dm.densityDpi+ ", density="+ dm.density);  return dm;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public Constant constant(){  if (constant_computed) {    return constant_value;  }  ASTNode$State state=state();  int num=state.boundariesCrossed;  boolean isFinal=this.is$Final();  constant_value=constant_compute();  if (isFinal && num == state().boundariesCrossed)   constant_computed=true;  return constant_value;}  }
class C{  private HttpURLConnection acquireNextHost(){  String host=nextHost();  while (!availability.get(host).tryAcquire()) {    host=nextHost();  }  return getHost(host,POST);}  }
class C{  public static int hash(double[] value){  return Arrays.hashCode(value);}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  @Override public PolyhedronsSet wholeSpace(){  return new PolyhedronsSet(tolerance);}  }
class C{  @SuppressWarnings("WeakerAccess") public boolean isHeader(int position){  return header != null && position == 0;}  }
class C{  public static String formatDate(String before){  String after;  try {    Date date=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss",Locale.getDefault()).parse(before);    after=new SimpleDateFormat("MM-dd HH:mm",Locale.getDefault()).format(date);  } catch (  ParseException e) {    return before;  }  return after;}  }
class C{  public synchronized void addListener(final TagUpdateListener listener,final Long tagId){  listeners.put(tagId,listener);}  }
class C{  private int measureHeight(){  int dayOfWeek=calendar.get(Calendar.DAY_OF_WEEK);  int daysOfMonth=daysOfCurrentMonth();  int n=-1;  if (dayOfWeek >= 2 && dayOfWeek <= 7) {    n=daysOfMonth - (8 - dayOfWeek + 1);  } else   if (dayOfWeek == 1) {    n=daysOfMonth - 1;  }  int lines=2 + n / 7 + (n % 7 == 0 ? 0 : 1);  return (int)(cellHeight * lines);}  }
class C{  public void rotateX(double theta){  Matrix3D tmp=new Matrix3D();  double c=Math.cos(theta);  double s=Math.sin(theta);  tmp.set(1,1,c);  tmp.set(1,2,-s);  tmp.set(2,1,s);  tmp.set(2,2,c);  preMultiply(tmp);}  }
class C{  private ConfigurationGraph loadConfigurationGraph() throws SystemConfigException {  try {    Map<Configuration,String> configurationFileNameMap=configResourceLoader.loadResourcesWithName(MODULE_CONFIG_FILE_NAME).collect(Collectors.toMap(null,null));    return new ConfigurationGraph(configurationFileNameMap,null);  } catch (  IOException e) {    LOG.error(MODULE_IO_EXCEPTION.logFormat(e.getMessage()));    throw new SystemConfigException(MODULE_IO_EXCEPTION.format(e.getMessage()),e);  }}  }
class C{  public boolean removeValue(@Nullable GrStatementOwner root,@NotNull BuildFileKey key){  checkInitialized();  commitDocumentChanges();  if (root == null) {    root=myGroovyFile;  }  GrMethodCall method=getMethodCallByPath(root,key.getPath());  if (method != null) {    GrStatementOwner parent=(GrStatementOwner)method.getParent();    parent.removeElements(new PsiElement[]{method});    reformatClosure(parent);    return true;  }  return false;}  }
class C{  public Element makeXmlElement(Document document){  return makeXmlElement(document,null);}  }
class C{  @Override public V put(K key,V value){  V oldValue=super.put(key,value);  return (oldValue == null) ? delegate.get(key) : oldValue;}  }
class C{  public static final MediaFormat createVideoFormat(String mime,int width,int height){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_WIDTH,width);  format.setInteger(KEY_HEIGHT,height);  return format;}  }
class C{  private void createChunkList(){  this.oneDictionaryChunkList=new ArrayList<ByteBuffer>(dictionary_one_chunk_size);  chunk_count++;}  }
class C{  @Override public Object legal(Metadata<Enum> metadata){  throwExceptionOnEmptyArray(metadata);  Enum enumAnnotation=metadata.getAnnotation();  String defaultLegal=enumAnnotation.legal();  if (!defaultLegal.isEmpty()) {    return safetyCast.with(defaultLegal,metadata.getType());  }  int length=enumAnnotation.value().length;  int randomIndex=new Random().nextInt(length);  String result=enumAnnotation.value()[randomIndex];  return safetyCast.with(result,metadata.getType());}  }
class C{  private byte[] readPageHeader(Page page){  return page.readBytes(0,this.pageHeaderSize);}  }
class C{  public void freeCacheContext(Context ctx){  ctx.clean();  ctx.setActive(false);}  }
class C{  public static float convert(String stringValue){  if (Strings.isNullOrEmpty(stringValue) || TypeUtils.MISSING_INDICATORS.contains(stringValue)) {    return MISSING_VALUE;  }  Matcher matcher=COMMA_PATTERN.matcher(stringValue);  return Float.parseFloat(matcher.replaceAll(""));}  }
class C{  @Override public void endDocument() throws SAXException {  if (documentHandler != null) {    documentHandler.endDocument();  }}  }
class C{  public SumTask(Class<R> reduceType,Task<T> task) throws IllegalArgumentException {  super(task);  this.reducer=new SumReducer<T,R>(reduceType);}  }
class C{  public static void startClock(){  if (clockStarted) {    throw new IllegalStateException("Clock is already started");  }  updater=new GameTimeUpdater(getGameTime());  ThreadPoolManager.getInstance().scheduleAtFixedRate(updater,0,5000);  clockStarted=true;}  }
class C{  public <T>void send(T message){  sendToTargetOrType(message,null,null);}  }
class C{  @Override public void endElement(String uri,String localName,String qName) throws SAXException {  if (isItem) {    if (localName.equalsIgnoreCase(TITLE))     episode.setTitle(elementValue.toString()); else     if (qName.equalsIgnoreCase(SUMMARY1))     episode.setSummary(elementValue.toString()); else     if (localName.equalsIgnoreCase(SUMMARY2) && episode.getSummary().isEmpty())     episode.setSummary(elementValue.toString()); else     if (qName.equalsIgnoreCase(SUMMARY3) && episode.getSummary().equals(""))     episode.setSummary(elementValue.toString()); else     if (localName.equalsIgnoreCase(MP3_2) && episode.getAudeoUrl().isEmpty())     episode.setAudeoUrl(elementValue.toString()); else     if (qName.equalsIgnoreCase(DURATION1))     episode.setDuration(elementValue.toString()); else     if (localName.equalsIgnoreCase(DURATION2) && episode.getDuration().isEmpty())     episode.setDuration(elementValue.toString()); else     if (localName.equalsIgnoreCase(PUBDATE))     episode.setDate(elementValue.toString());  } else {    if (qName.equalsIgnoreCase(SUMMARY1))     podcastSummary=elementValue.toString(); else     if (localName.equalsIgnoreCase(SUMMARY2) && podcastSummary.isEmpty())     podcastSummary=elementValue.toString(); else     if (qName.equalsIgnoreCase(SUMMARY3) && podcastSummary.isEmpty())     podcastSummary=elementValue.toString();  }  if (localName.equals(ITEM_TITLE)) {    isItem=false;    allEpisodes.add(episode);  }  elementValue=new StringBuilder("");  elementOn=false;}  }
class C{  @Override public String toString(){  StringBuffer str=new StringBuffer();  if (fEntityName != null) {    str.append(fEntityName);  }  str.append(':');  if (fPublicId != null) {    str.append(fPublicId);  }  str.append(':');  if (fLiteralSystemId != null) {    str.append(fLiteralSystemId);  }  str.append(':');  if (fBaseSystemId != null) {    str.append(fBaseSystemId);  }  str.append(':');  if (fExpandedSystemId != null) {    str.append(fExpandedSystemId);  }  str.append(':');  if (fNamespace != null) {    str.append(fNamespace);  }  return str.toString();}  }
class C{  public Iterator outEdges(Node node){  nodeCheck(node,true);  return m_edgeTuples.iterator(outEdgeRows(node.getRow()));}  }
class C{  public void java_io_ObjectInputStream_allocateNewArray(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  throw new NativeMethodNotSupportedException(method);}  }
class C{  public CopyOnWriteArrayList(){  setArray(new Object[0]);}  }
class C{  public void addEquipmentIds(final Collection<Long> equipmentIds){  for (  Long equipmentId : equipmentIds) {    addEquipmentId(equipmentId);  }}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  protected void initializeWorld(){  SimulationBody floor=new SimulationBody();  floor.addFixture(Geometry.createRectangle(15,1));  floor.setMass(MassType.INFINITE);  floor.translate(0.0,-4.0);  this.world.addBody(floor);  SimulationBody triangle=new SimulationBody();  triangle.addFixture(Geometry.createTriangle(new Vector2(0.0,0.5),new Vector2(-0.5,-0.5),new Vector2(0.5,-0.5)));  triangle.setMass(MassType.NORMAL);  triangle.translate(-1.0,2.0);  triangle.getLinearVelocity().set(5.0,0.0);  this.world.addBody(triangle);  SimulationBody circle=new SimulationBody();  circle.addFixture(Geometry.createCircle(0.5));  circle.setMass(MassType.NORMAL);  circle.translate(2.0,2.0);  circle.applyForce(new Vector2(-100.0,0.0));  circle.setLinearDamping(0.05);  this.world.addBody(circle);  SimulationBody rectangle=new SimulationBody();  rectangle.addFixture(Geometry.createRectangle(1,1));  rectangle.setMass(MassType.NORMAL);  rectangle.translate(0.0,2.0);  rectangle.getLinearVelocity().set(-5.0,0.0);  this.world.addBody(rectangle);  SimulationBody polygon=new SimulationBody();  polygon.addFixture(Geometry.createUnitCirclePolygon(10,1));  polygon.setMass(MassType.NORMAL);  polygon.translate(-2.5,2.0);  polygon.setAngularVelocity(Math.toRadians(-20.0));  this.world.addBody(polygon);  BodyFixture c1Fixture=new BodyFixture(Geometry.createCircle(0.5));  BodyFixture c2Fixture=new BodyFixture(Geometry.createCircle(0.5));  c1Fixture.setDensity(0.5);  c2Fixture.setDensity(0.5);  c1Fixture.getShape().translate(-1.0,0.0);  c2Fixture.getShape().translate(1.0,0.0);  SimulationBody capsule=new SimulationBody();  capsule.addFixture(c1Fixture);  capsule.addFixture(c2Fixture);  capsule.addFixture(Geometry.createRectangle(2,1));  capsule.setMass(MassType.NORMAL);  capsule.translate(0.0,4.0);  this.world.addBody(capsule);  SimulationBody issTri=new SimulationBody();  issTri.addFixture(Geometry.createIsoscelesTriangle(1.0,3.0));  issTri.setMass(MassType.NORMAL);  issTri.translate(2.0,3.0);  this.world.addBody(issTri);  SimulationBody equTri=new SimulationBody();  equTri.addFixture(Geometry.createEquilateralTriangle(2.0));  equTri.setMass(MassType.NORMAL);  equTri.translate(3.0,3.0);  this.world.addBody(equTri);  SimulationBody rightTri=new SimulationBody();  rightTri.addFixture(Geometry.createRightTriangle(2.0,1.0));  rightTri.setMass(MassType.NORMAL);  rightTri.translate(4.0,3.0);  this.world.addBody(rightTri);  this.world.addListener(new CustomContactListener());}  }
class C{  public void lerp(Transform end,double alpha){  double a1=1.0 - alpha;  double x=a1 * this.x + alpha * end.x;  double y=a1 * this.y + alpha * end.y;  double rs=this.getRotation();  double re=end.getRotation();  double diff=re - rs;  if (diff < -Math.PI)   diff+=Geometry.TWO_PI;  if (diff > Math.PI)   diff-=Geometry.TWO_PI;  double a=diff * alpha + rs;  this.identity();  this.rotate(a);  this.translate(x,y);}  }
class C{  public synchronized BookKeeperClientBuilder requestTimer(HashedWheelTimer requestTimer){  this.requestTimer=requestTimer;  return this;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("move dir=");  String dir=np.getWordMatchesIgnoringCase("up down");  AlignmentViewer viewer=(AlignmentViewer)getViewer();  SelectedBlock selectedBlock=viewer.getSelectedBlock();  if (selectedBlock.isSelected()) {    if (dir.equals("up")) {      if ((viewer.isShowAsMapping() && viewer.getAlignment().getRowCompressor().moveUp(selectedBlock.getFirstRow(),selectedBlock.getLastRow())) || (!viewer.isShowAsMapping() && AlignmentSorter.moveUp(viewer.getAlignment(),selectedBlock.getFirstRow(),selectedBlock.getLastRow()))) {        selectedBlock.setFirstRow(selectedBlock.getFirstRow() - 1);        selectedBlock.setLastRow(selectedBlock.getLastRow() - 1);        selectedBlock.fireSelectionChanged();      }    } else     if (dir.equals("down")) {      if ((viewer.isShowAsMapping() && viewer.getAlignment().getRowCompressor().moveDown(selectedBlock.getFirstRow(),selectedBlock.getLastRow())) || (!viewer.isShowAsMapping() && AlignmentSorter.moveDown(viewer.getAlignment(),selectedBlock.getFirstRow(),selectedBlock.getLastRow()))) {        selectedBlock.setFirstRow(selectedBlock.getFirstRow() + 1);        selectedBlock.setLastRow(selectedBlock.getLastRow() + 1);        selectedBlock.fireSelectionChanged();      }    }  }}  }
class C{  public Object remove(String name){  return nameValuePairs.remove(name);}  }
class C{  private void resetPreviousView(){  if (mPreviousContentView == null)   return;  View view=mPreviousContentView;  FrameLayout contentView=mCurrentContentView;  view.setX(0);  contentView.removeView(view);  mPreviousContentView=null;  if (mPreviousActivity == null || mPreviousActivity.isFinishing())   return;  Activity preActivity=mPreviousActivity;  final ViewGroup previewContentView=getContentView(preActivity.getWindow());  previewContentView.addView(view);  mPreviousActivity=null;}  }
class C{  public void addedEdge(Edge e){  TreeMap hOutVertices=(TreeMap)Cache.get(e.getVertexA().getLabel());  if (hOutVertices == null)   return; else   hOutVertices.put(e.getVertexB().getLabel(),e);}  }
class C{  public long storeUpload(OCUpload ocUpload){  Log_OC.v(TAG,"Inserting " + ocUpload.getLocalPath() + " with status="+ ocUpload.getUploadStatus());  ContentValues cv=new ContentValues();  cv.put(ProviderTableMeta.UPLOADS_LOCAL_PATH,ocUpload.getLocalPath());  cv.put(ProviderTableMeta.UPLOADS_REMOTE_PATH,ocUpload.getRemotePath());  cv.put(ProviderTableMeta.UPLOADS_ACCOUNT_NAME,ocUpload.getAccountName());  cv.put(ProviderTableMeta.UPLOADS_FILE_SIZE,ocUpload.getFileSize());  cv.put(ProviderTableMeta.UPLOADS_STATUS,ocUpload.getUploadStatus().value);  cv.put(ProviderTableMeta.UPLOADS_LOCAL_BEHAVIOUR,ocUpload.getLocalAction());  cv.put(ProviderTableMeta.UPLOADS_FORCE_OVERWRITE,ocUpload.isForceOverwrite() ? 1 : 0);  cv.put(ProviderTableMeta.UPLOADS_IS_CREATE_REMOTE_FOLDER,ocUpload.isCreateRemoteFolder() ? 1 : 0);  cv.put(ProviderTableMeta.UPLOADS_LAST_RESULT,ocUpload.getLastResult().getValue());  cv.put(ProviderTableMeta.UPLOADS_CREATED_BY,ocUpload.getCreadtedBy());  Uri result=getDB().insert(ProviderTableMeta.CONTENT_URI_UPLOADS,cv);  Log_OC.d(TAG,"storeUpload returns with: " + result + " for file: "+ ocUpload.getLocalPath());  if (result == null) {    Log_OC.e(TAG,"Failed to insert item " + ocUpload.getLocalPath() + " into upload db.");    return -1;  } else {    long new_id=Long.parseLong(result.getPathSegments().get(1));    ocUpload.setUploadId(new_id);    notifyObserversNow();    return new_id;  }}  }
class C{  public DatabaseGetStreetsByIdQuery(VkApiClient client,int... streetIds){  super(client,"database.getStreetsById",Utils.buildParametrizedType(List.class,Street.class));  streetIds(streetIds);}  }
class C{  public Builder alphaOfDisabledElements(float alpha){  this.alphaOfDisabledElements=alpha;  return this;}  }
class C{  public PhotosObject(Activity a,int photosType){  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(a);  this.adapter=new PhotoAdapter(a,new ArrayList<Photo>());  this.service=PhotoService.getService();  this.photosType=photosType;  this.photosOrder=sharedPreferences.getString(a.getString(R.string.key_default_photo_order),a.getResources().getStringArray(R.array.photo_order_values)[0]);  RANDOM_TXT=a.getResources().getStringArray(R.array.photo_order_values)[3];  this.photosPage=0;  this.pageList=new ArrayList<>();  this.loading=false;  this.over=false;}  }
class C{  protected Map<String,List<String>> readLexicon(String lexiconFilename) throws IOException {  String line;  Map<String,List<String>> fLexicon=new HashMap<String,List<String>>();  BufferedReader lexiconFile=new BufferedReader(new InputStreamReader(MaryLink.getContext().getAssets().open(lexiconFilename)));  while ((line=lexiconFile.readLine()) != null) {    if (line.trim().equals("") || line.startsWith("#"))     continue;    String[] lineParts=line.split("\\s*\\|\\s*");    String graphStr=lineParts[0];    String phonStr=lineParts[1];    try {      allophoneSet.splitIntoAllophones(phonStr);    } catch (    RuntimeException re) {      Log.w(Mary.LOG,"Lexicon '" + lexiconFilename + "': invalid entry for '"+ graphStr+ "'",re);    }    String phonPosStr=phonStr;    if (lineParts.length > 2) {      String pos=lineParts[2];      if (!pos.trim().equals(""))       phonPosStr+="|" + pos;    }    List<String> transcriptions=fLexicon.get(graphStr);    if (null == transcriptions) {      transcriptions=new ArrayList<String>();      fLexicon.put(graphStr,transcriptions);    }    transcriptions.add(phonPosStr);  }  lexiconFile.close();  return fLexicon;}  }
class C{  public boolean adjustValue(K key,short amount){  int index=index(key);  if (index < 0) {    return false;  } else {    _values[index]+=amount;    return true;  }}  }
class C{  public static final MediaFormat createVideoFormat(String mime,int width,int height){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_WIDTH,width);  format.setInteger(KEY_HEIGHT,height);  return format;}  }
class C{  public static int scale3(String source,String file,final int w,final int h){  try {    BufferedImage img=ImageIO.read(new File(source));    if (img == null || w < 0 || h < 0)     return -1;    int h1=img.getHeight();    int w1=img.getWidth();    if (w > w1 || h > h1)     return -1;    int w0=w;    int h0=h;    if (h <= 0)     h0=h1;    if (w <= 0)     w0=w1;    float fh=((float)h1) / h;    float fw=((float)w1) / w;    if (fh < fw) {      int w2=(int)(w1 / fh);      w0=w2;    } else {      int h2=(int)(h1 / fw);      h0=h2;    }    BufferedImage out=new BufferedImage(w,h,BufferedImage.TYPE_4BYTE_ABGR);    Graphics g=out.getGraphics();    Image tmp=img.getScaledInstance(w,h,Image.SCALE_SMOOTH);    int ox=(w - w0) / 2;    int oy=(h - h0) / 2;    g.drawImage(tmp,ox,oy,w0,h0,null);    ImageIO.write(out,"png",new File(file));    return 1;  } catch (  Exception e) {    log.error(source,e);  }  return -1;}  }
class C{  @Override public boolean parse(boolean complete) throws XNIException, IOException {  if (fInputSource != null) {    try {      reset();      fScanner.setInputSource(fInputSource);      fInputSource=null;    } catch (    XNIException ex) {      if (PRINT_EXCEPTION_STACK_TRACE)       ex.printStackTrace();      throw ex;    }catch (    IOException ex) {      if (PRINT_EXCEPTION_STACK_TRACE)       ex.printStackTrace();      throw ex;    }catch (    RuntimeException ex) {      if (PRINT_EXCEPTION_STACK_TRACE)       ex.printStackTrace();      throw ex;    }catch (    Exception ex) {      if (PRINT_EXCEPTION_STACK_TRACE)       ex.printStackTrace();      throw new XNIException(ex);    }  }  try {    return fScanner.scanDocument(complete);  } catch (  XNIException ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw ex;  }catch (  IOException ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw ex;  }catch (  RuntimeException ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw ex;  }catch (  Exception ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw new XNIException(ex);  }}  }
class C{  public MessagesDeleteDialogQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public ConfigDialog switchTab(String tabLabel){  if (!tabs.isEmpty()) {    tabs.stream().filter(null).findFirst().orElseThrow(null).click();  }  return this;}  }
class C{  public CM_TARGET_SELECT(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  public boolean isValid(List<S2Point> vertices){  int n=vertices.size();  for (int i=0; i < n; ++i) {    if (!S2.isUnitLength(vertices.get(i))) {      Log.i(TAG,"Vertex " + i + " is not unit length");      return false;    }  }  for (int i=1; i < n; ++i) {    if (vertices.get(i - 1).equals(vertices.get(i)) || vertices.get(i - 1).equals(S2Point.neg(vertices.get(i)))) {      Log.i(TAG,"Vertices " + (i - 1) + " and "+ i+ " are identical or antipodal");      return false;    }  }  return true;}  }
class C{  public void drawScreen(int par1,int par2,float par3){  if (reinit) {    initGui();    reinit=false;  }  this.guiList.drawScreen(par1,par2,par3);  super.drawScreen(par1,par2,par3,false);}  }
class C{  protected AbstractUnivariateSolver(final double relativeAccuracy,final double absoluteAccuracy){  super(relativeAccuracy,absoluteAccuracy);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_Instant_INTERVAL_HEAL_MP_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201157,num0,skillname);}  }
class C{  public void tabPageLoadStarted(int id){  StripLayoutTab tab=findTabById(id);  if (tab != null)   tab.pageLoadingStarted();}  }
class C{  private <T>Stream<Collection<T>> partitionedStream(Iterator<T> iterator){  return StreamSupport.stream(Spliterators.spliteratorUnknownSize(Iterators.partition(iterator,batchSize),Spliterator.ORDERED),false);}  }
class C{  public static DateTimeUnit fromJodaDateTime(DateTime dateTime){  return new DateTimeUnit(dateTime.getYear(),dateTime.getMonthOfYear(),dateTime.getDayOfMonth(),dateTime.getDayOfWeek());}  }
class C{  public void putObject(String key,Object obj,Gson gson){  checkForNullKey(key);  putString(key,gson.toJson(obj));}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public void paintSelection(Graphics g0){  if (selectedBlock.isSelected()) {    Graphics2D g=(Graphics2D)g0;    double xMin=Math.min(getX(selectedBlock.getFirstCol()),getSize().width);    double xMax=Math.min((getX(selectedBlock.getLastCol() + 1)),getSize().width - 2);    double yMin=Math.min(getY(selectedBlock.getFirstRow() - 1),getSize().height - 3);    double yMax=Math.min(getY(selectedBlock.getLastRow()),getSize().height - 3);    Rectangle2D rect=new Rectangle2D.Double(xMin,yMin,0,0);    rect.add(xMax,yMax);    g.setColor(highlightColor);    g.draw(rect);    g.setColor(highlightColorSemiTransparent);    g.fill(rect);    selectionRectangle.setRectangle(this,rect);  }  selectionRectangle.setAnimate(selectedBlock.isSelected());}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public SwitchStmt fullCopy(){  SwitchStmt tree=(SwitchStmt)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static boolean isExtension(String filename,String[] extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.length == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  public DateColumn(Class type,int nrows){  this(type,nrows,nrows,0L);}  }
class C{  public soot.jimple.JimpleBody createJimpleBody(polyglot.ast.Block block,List formals,soot.SootMethod sootMethod){  createBody(sootMethod);  lg=new LocalGenerator(body);  if (!soot.Modifier.isStatic(sootMethod.getModifiers())) {    soot.RefType type=sootMethod.getDeclaringClass().getType();    specialThisLocal=soot.jimple.Jimple.v().newLocal("this",type);    body.getLocals().add(specialThisLocal);    soot.jimple.ThisRef thisRef=soot.jimple.Jimple.v().newThisRef(type);    soot.jimple.Stmt thisStmt=soot.jimple.Jimple.v().newIdentityStmt(specialThisLocal,thisRef);    body.getUnits().add(thisStmt);  }  int formalsCounter=0;  int outerIndex=sootMethod.getDeclaringClass().getName().lastIndexOf("$");  if ((outerIndex != -1) && (sootMethod.getName().equals("<init>"))) {    SootField this0Field=sootMethod.getDeclaringClass().getFieldByNameUnsafe("this$0");    if (this0Field != null) {      soot.SootClass outerClass=((soot.RefType)this0Field.getType()).getSootClass();      soot.Local outerLocal=lg.generateLocal(outerClass.getType());      soot.jimple.ParameterRef paramRef=soot.jimple.Jimple.v().newParameterRef(outerClass.getType(),formalsCounter);      paramRefCount++;      soot.jimple.Stmt stmt=soot.jimple.Jimple.v().newIdentityStmt(outerLocal,paramRef);      stmt.addTag(new soot.tagkit.EnclosingTag());      body.getUnits().add(stmt);      ((soot.javaToJimple.PolyglotMethodSource)sootMethod.getSource()).setOuterClassThisInit(outerLocal);      outerClassParamLocal=outerLocal;      formalsCounter++;    }  }  if (formals != null) {    ArrayList<String> formalNames=new ArrayList<String>();    Iterator formalsIt=formals.iterator();    while (formalsIt.hasNext()) {      polyglot.ast.Formal formal=(polyglot.ast.Formal)formalsIt.next();      createFormal(formal,formalsCounter);      formalNames.add(formal.name());      formalsCounter++;    }    body.getMethod().addTag(new soot.tagkit.ParamNamesTag(formalNames));  }  ArrayList<SootField> finalsList=((PolyglotMethodSource)body.getMethod().getSource()).getFinalsList();  if (finalsList != null) {    Iterator<SootField> finalsIt=finalsList.iterator();    while (finalsIt.hasNext()) {      soot.SootField sf=finalsIt.next();      soot.jimple.ParameterRef paramRef=soot.jimple.Jimple.v().newParameterRef(sf.getType(),formalsCounter);      paramRefCount++;      soot.jimple.Stmt stmt=soot.jimple.Jimple.v().newIdentityStmt(lg.generateLocal(sf.getType()),paramRef);      body.getUnits().add(stmt);      formalsCounter++;    }  }  createBlock(block);  if (sootMethod.getName().equals("<clinit>")) {    handleAssert(sootMethod);    handleStaticFieldInits(sootMethod);    handleStaticInitializerBlocks(sootMethod);  }  boolean hasReturn=false;  if (block != null) {    Iterator it=block.statements().iterator();    while (it.hasNext()) {      Object next=it.next();      if (next instanceof polyglot.ast.Return) {        hasReturn=true;      }    }  }  soot.Type retType=body.getMethod().getReturnType();  if ((!hasReturn) && (retType instanceof soot.VoidType)) {    soot.jimple.Stmt retStmt=soot.jimple.Jimple.v().newReturnVoidStmt();    body.getUnits().add(retStmt);  }  if (exceptionTable != null) {    Iterator<Trap> trapsIt=exceptionTable.iterator();    while (trapsIt.hasNext()) {      body.getTraps().add(trapsIt.next());    }  }  return body;}  }
class C{  Item newFloat(final float value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(FLOAT).putInt(key.intVal);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  void refreshFinish(int width,int height){  mWXSDKInstance.onRefreshSuccess(width,height);}  }
class C{  public boolean hasPermissionByInternalId(String internalId,Permission permission){  return hasPermissionsByInternalId(internalId,ImmutableList.of(permission));}  }
class C{  public static InputStream toInputStream(CharSequence input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  public static double acos(double x){  if (Double.isNaN(x)) {    return Double.NaN;  }  if (x > 1.0 || x < -1.0) {    return Double.NaN;  }  if (x == -1.0) {    return Math.PI;  }  if (x == 1.0) {    return 0.0;  }  if (x == 0) {    return Math.PI / 2.0;  }  double temp=x * HEX_40000000;  final double xa=x + temp - temp;  final double xb=x - xa;  double ya=xa * xa;  double yb=xa * xb * 2.0 + xb * xb;  ya=-ya;  yb=-yb;  double za=1.0 + ya;  double zb=-(za - 1.0 - ya);  temp=za + yb;  zb+=-(temp - za - yb);  za=temp;  double y=sqrt(za);  temp=y * HEX_40000000;  ya=y + temp - temp;  yb=y - ya;  yb+=(za - ya * ya - 2 * ya * yb - yb * yb) / (2.0 * y);  yb+=zb / (2.0 * y);  y=ya + yb;  yb=-(y - ya - yb);  double r=y / x;  if (Double.isInfinite(r)) {    return Math.PI / 2;  }  double ra=doubleHighPart(r);  double rb=r - ra;  rb+=(y - ra * xa - ra * xb - rb * xa - rb * xb) / x;  rb+=yb / x;  temp=ra + rb;  rb=-(temp - ra - rb);  ra=temp;  return atan(ra,rb,x < 0);}  }
class C{  public Waterfall waterfall(Task... tasks){  return new Waterfall(this.executor_,tasks);}  }
class C{  public static JsonValue value(double value){  if (Double.isInfinite(value) || Double.isNaN(value)) {    throw new IllegalArgumentException("Infinite and NaN values not permitted in JSON");  }  return new JsonNumber(cutOffPointZero(Double.toString(value)));}  }
class C{  public static boolean hasHoneycomb(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB;}  }
class C{  public void remove(IAdaptable a){  children.remove(a);}  }
class C{  public void updateSizes(int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  private static void computeStringConstants(final int highPrecisionDecimalDigits){  if (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {    final DfpField highPrecisionField=new DfpField(highPrecisionDecimalDigits,false);    final Dfp highPrecisionOne=new Dfp(highPrecisionField,1);    final Dfp highPrecisionTwo=new Dfp(highPrecisionField,2);    final Dfp highPrecisionThree=new Dfp(highPrecisionField,3);    final Dfp highPrecisionSqr2=highPrecisionTwo.sqrt();    sqr2String=highPrecisionSqr2.toString();    sqr2ReciprocalString=highPrecisionOne.divide(highPrecisionSqr2).toString();    final Dfp highPrecisionSqr3=highPrecisionThree.sqrt();    sqr3String=highPrecisionSqr3.toString();    sqr3ReciprocalString=highPrecisionOne.divide(highPrecisionSqr3).toString();    piString=computePi(highPrecisionOne,highPrecisionTwo,highPrecisionThree).toString();    eString=computeExp(highPrecisionOne,highPrecisionOne).toString();    ln2String=computeLn(highPrecisionTwo,highPrecisionOne,highPrecisionTwo).toString();    ln5String=computeLn(new Dfp(highPrecisionField,5),highPrecisionOne,highPrecisionTwo).toString();    ln10String=computeLn(new Dfp(highPrecisionField,10),highPrecisionOne,highPrecisionTwo).toString();  }}  }
class C{  public XmlStreamReaderException(String msg,String ctMime,String ctEnc,String bomEnc,String xmlGuessEnc,String xmlEnc){  super(msg);  contentTypeMime=ctMime;  contentTypeEncoding=ctEnc;  bomEncoding=bomEnc;  xmlGuessEncoding=xmlGuessEnc;  xmlEncoding=xmlEnc;}  }
class C{  public static boolean isNetworkAvailable(Context context){  ConnectivityManager manager=(ConnectivityManager)context.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);  if (null == manager)   return false;  NetworkInfo info=manager.getActiveNetworkInfo();  if (null == info || !info.isAvailable())   return false;  return true;}  }
class C{  default String subjectRole(String relationId){  return OwlModel.SUBJECT.owlname() + "-" + relationId;}  }
class C{  private void synchronizeTagValues(final Set<Long> newTags) throws JMSException {  if (!newTags.isEmpty()) {    ClientDataTagImpl newTag=null;    Collection<TagValueUpdate> requestedTagValues=tagRequestHandler.requestTagValues(newTags);    for (    TagValueUpdate tagValueUpdate : requestedTagValues) {      newTag=liveCache.get(tagValueUpdate.getId());      if (newTag != null) {        newTag.update(tagValueUpdate);      }    }  }}  }
class C{  public void removeSelectionListener(ExplorerSelectionListener listener){  selectionListeners.remove(listener);}  }
class C{  String parseCharsetFromHeader(String contentType){  String result="ISO-8859-1";  if (contentType != null) {    String[] paramList=contentType.split(";");    for (    String param : paramList) {      if (param.toLowerCase().trim().startsWith("charset") && param.indexOf("=") != -1) {        result=param.substring(param.indexOf("=") + 1).trim();      }    }  }  return result;}  }
class C{  public int size(){  return playerTemplates.size();}  }
class C{  public static void enableSvcs(boolean enable){  ServiceDispatcher.enableSvcs=enable;}  }
class C{  private void createWhile2(polyglot.ast.While whileStmt){  soot.jimple.Stmt brchTgt=soot.jimple.Jimple.v().newNopStmt();  soot.jimple.Stmt beginTgt=soot.jimple.Jimple.v().newNopStmt();  body.getUnits().add(beginTgt);  endControlNoop.push(soot.jimple.Jimple.v().newNopStmt());  condControlNoop.push(soot.jimple.Jimple.v().newNopStmt());  soot.jimple.Stmt continueStmt=condControlNoop.pop();  body.getUnits().add(continueStmt);  condControlNoop.push(continueStmt);  polyglot.ast.Expr condition=whileStmt.cond();  createBranchingExpr(condition,brchTgt,false);  createStmt(whileStmt.body());  soot.jimple.GotoStmt gotoLoop=soot.jimple.Jimple.v().newGotoStmt(beginTgt);  body.getUnits().add(gotoLoop);  body.getUnits().add((endControlNoop.pop()));  body.getUnits().add(brchTgt);  condControlNoop.pop();}  }
class C{  public PspRuntimeException(String message){  super(message);}  }
class C{  public ViterbiPoint(Item item){  this.item=item;}  }
class C{  protected void handleDeleteOrTerminate(T oldObject){  executor.addForTermination(oldObject);}  }
class C{  public static Map<String,String> toKeyValuePairs(String httpString,boolean performUrlDecode){  if (httpString == null || httpString.length() == 0) {    return null;  }  Map<String,String> keyValuePairs=new HashMap<String,String>();  StringTokenizer st=new StringTokenizer(httpString);  String newToken=null;  String param, val;  int equalSignInd;  while (st.hasMoreTokens() && (newToken=st.nextToken("&")) != null) {    equalSignInd=newToken.indexOf("=");    param=newToken;    val="";    if (equalSignInd > -1) {      param=newToken.substring(0,equalSignInd);      val=newToken.substring(equalSignInd + 1);    }    if (performUrlDecode) {      param=StringUtils.urlDecode(param);      val=StringUtils.urlDecode(val);    }    keyValuePairs.put(param,val);  }  return keyValuePairs;}  }
class C{  public void dumpASCII(){  dumpASCII(new OutputStreamWriter(System.out));}  }
class C{  @Override public long limit(){  return limit;}  }
class C{  @Override public boolean shouldExecute(){  if (entity.getGrowingAge() < 1 && !entity.isInLove()) {    if (entity instanceof EntityWolf) {      if (!((EntityWolf)entity).isTamed())       return false;    }    BlockPos entityPos=entity.getPosition();    if (targetItem == null) {      List<EntityItem> entityItems=entity.getEntityWorld().getEntitiesWithinAABB(EntityItem.class,new AxisAlignedBB(entityPos,entityPos.add(1,1,1)).expand(5,5,5));      if (!entityItems.isEmpty()) {        for (        EntityItem item : entityItems) {          if (entity.isBreedingItem(item.getEntityItem())) {            targetItem=item;            break;          }        }      }    }    if (targetItem != null) {      BlockPos targetPos=targetItem.getPosition();      if (entityPos.getDistance(targetPos.getX(),targetPos.getY(),targetPos.getZ()) <= 2D && targetItem.getEntityItem().stackSize > 0) {        processItemEating();        return false;      } else {        return true;      }    }  }  return false;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public Builder addColumnTime(String columnName,TimeZone timeZone){  return addColumnTime(columnName,DateTimeZone.forTimeZone(timeZone));}  }
class C{  protected WallReportPostQuery postId(int value){  return unsafeParam("post_id",value);}  }
class C{  private void clearAllSnapshots(){  this.snapshots.clear();  while (this.mnuSnapshot.getItemCount() > 3) {    this.mnuSnapshot.remove(3);  }}  }
class C{  public static byte[] decodeLines(String s){  char[] buf=new char[s.length() + 3];  int p=0;  for (int ip=0; ip < s.length(); ip++) {    char c=s.charAt(ip);    if (c != ' ' && c != '\r' && c != '\n' && c != '\t')     buf[p++]=c;  }  while ((p % 4) != 0)   buf[p++]='0';  return decode(buf,0,p);}  }
class C{  private static boolean removeCryptographyRestrictions(){  Logger logger=LoggerFactory.getLogger(Stack.class);  if (isRestrictedCryptography()) {    try {      final Class<?> jceSecurity=Class.forName("javax.crypto.JceSecurity");      final Class<?> cryptoPermissions=Class.forName("javax.crypto.CryptoPermissions");      final Class<?> cryptoAllPermission=Class.forName("javax.crypto.CryptoAllPermission");      final Field isRestrictedField=jceSecurity.getDeclaredField("isRestricted");      isRestrictedField.setAccessible(true);      final Field modifiersField=Field.class.getDeclaredField("modifiers");      modifiersField.setAccessible(true);      modifiersField.setInt(isRestrictedField,isRestrictedField.getModifiers() & ~Modifier.FINAL);      isRestrictedField.set(null,false);      final Field defaultPolicyField=jceSecurity.getDeclaredField("defaultPolicy");      defaultPolicyField.setAccessible(true);      final PermissionCollection defaultPolicy=(PermissionCollection)defaultPolicyField.get(null);      final Field perms=cryptoPermissions.getDeclaredField("perms");      perms.setAccessible(true);      ((Map<?,?>)perms.get(defaultPolicy)).clear();      final Field instance=cryptoAllPermission.getDeclaredField("INSTANCE");      instance.setAccessible(true);      defaultPolicy.add((Permission)instance.get(null));      logger.info("Successfully removed cryptography restrictions.");      return true;    } catch (    final Exception e) {      logger.warn("Failed to remove cryptography restrictions.",e);      return false;    }  }  return true;}  }
class C{  private static int mapToRank(String rank,int taxonId){  int targetLevel=TaxonomicLevels.getId(rank);  Node v=TaxonomyData.getTree().getANode(taxonId);  while (v != null) {    int level=TaxonomyData.getTaxonomicRank(taxonId);    if (level != 0 && level == targetLevel)     return taxonId;    if (v.getInDegree() == 0)     v=null; else {      v=v.getFirstInEdge().getSource();      taxonId=(Integer)v.getInfo();    }  }  return 0;}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public double standardDeviation(boolean bOnlyValue){  return Math.sqrt(variance(bOnlyValue));}  }
class C{  public static S1Interval fromPointPair(double p1,double p2){  if (p1 == -S2.M_PI) {    p1=S2.M_PI;  }  if (p2 == -S2.M_PI) {    p2=S2.M_PI;  }  if (positiveDistance(p1,p2) <= S2.M_PI) {    return new S1Interval(p1,p2,true);  } else {    return new S1Interval(p2,p1,true);  }}  }
class C{  private String nestedTagsRegex(int depth){  if (depth == 0) {    return "";  } else {    return "(?:<[a-z/!$](?:[^<>]|" + nestedTagsRegex(depth - 1) + ")*>)";  }}  }
class C{  public int read(BufferedReader r,boolean headerOnly) throws IOException {  try {    Set<String> disabledSamples=new HashSet<>();    clear();    int lineNumber=0;    String aLine;    while ((aLine=r.readLine()) != null) {      lineNumber++;      aLine=aLine.trim();      if (aLine.length() == 0 || aLine.startsWith("#"))       continue;      final String[] tokens=aLine.split("\t");      if (lineNumber == 1 && (aLine.equals(MEGAN6_SUMMARY_TAG_NOT_USED_ANYMORE) || aLine.equals(MEGAN4_SUMMARY_TAG) || aLine.equals("!MEGAN4")))       continue;      if (aLine.equals("BEGIN_METADATA_TABLE") || aLine.equals("END_OF_DATA_TABLE"))       break;      if (aLine.startsWith("@")) {switch (tokens[0]) {case CONTENT_TYPE:{            StringBuilder buf=new StringBuilder();            for (int i=1; i < tokens.length; i++)             buf.append(" ").append(tokens[i]);            contentType=buf.toString().trim();            if (!contentType.startsWith(MEGAN6SummaryFormat_NotUsedAnyMore) && !contentType.startsWith(MEGAN4SummaryFormat))             throw new IOException("Wrong content type: " + contentType + ", expected: "+ MEGAN4SummaryFormat);            break;          }case CREATOR:{          StringBuilder buf=new StringBuilder();          for (int i=1; i < tokens.length; i++)           buf.append(" ").append(tokens[i]);          creator=buf.toString().trim();          break;        }case CREATION_DATE:{        StringBuilder buf=new StringBuilder();        for (int i=1; i < tokens.length; i++)         buf.append(" ").append(tokens[i]);        creationDate=buf.toString().trim();        break;      }case BLAST_MODE:    for (int i=1; i < tokens.length; i++) {      BlastMode blastMode=BlastMode.valueOfIgnoreCase(tokens[i]);      if (blastMode == null)       blastMode=BlastMode.Unknown;      blastModes.add(blastMode);    }  break;case NAMES:sampleNames.addAll(Arrays.asList(tokens).subList(1,tokens.length));break;case DISABLED:disabledSamples.addAll(Arrays.asList(tokens).subList(1,tokens.length));break;case UIDS:for (int i=1; i < tokens.length; i++) if (tokens[i] != null && !tokens[i].equals("null")) sampleUIds.add(Long.parseLong(tokens[i]));break;case SIZES:for (int i=1; i < tokens.length; i++) sampleSizes.add(Basic.parseInt(tokens[i]));break;case TOTAL_READS:totalReads=(Integer.parseInt(tokens[1]));break;case ADDITIONAL_READS:additionalReads=(Basic.parseInt(tokens[1]));break;case COLLAPSE:if (tokens.length > 1) {String data=tokens[1];Set<Integer> collapsedIds=new HashSet<>();classification2collapsedIds.put(data,collapsedIds);for (int i=2; i < tokens.length; i++) collapsedIds.add(Integer.parseInt(tokens[i]));}break;case ALGORITHM:if (tokens.length > 1) {String data=tokens[1];StringBuilder buf=new StringBuilder();for (int i=2; i < tokens.length; i++) buf.append(" ").append(tokens[i]);classification2algorithm.put(data,buf.toString().trim());}break;case NODE_STYLE:if (tokens.length > 1) {String data=tokens[1];StringBuilder buf=new StringBuilder();for (int i=2; i < tokens.length; i++) buf.append(" ").append(tokens[i]);classification2NodeStyle.put(data,buf.toString().trim());}break;case COLOR_TABLE:colorTable=tokens[1];colorByPosition=false;for (int k=2; k < tokens.length; k++) {if (tokens[k].equals("byPosition")) colorByPosition=true; else colorTableHeatMap=tokens[k];}break;case COLOR_EDITS:if (tokens.length > 1) {colorEdits=Basic.toString(tokens,1,tokens.length - 1,"\t");} else colorEdits=null;break;case NODE_FORMATS:if (tokens.length > 1) {String data=tokens[1];StringBuilder buf=new StringBuilder();for (int i=2; i < tokens.length; i++) buf.append(" ").append(tokens[i]);classification2NodeFormats.put(data,buf.toString().trim());}break;case EDGE_FORMATS:if (tokens.length > 1) {String data=tokens[1];StringBuilder buf=new StringBuilder();for (int i=2; i < tokens.length; i++) buf.append(" ").append(tokens[i]);classification2EdgeFormats.put(data,buf.toString().trim());}break;case PARAMETERS:if (tokens.length > 1) {StringBuilder buf=new StringBuilder();for (int i=1; i < tokens.length; i++) buf.append(" ").append(tokens[i]);parameters=buf.toString().trim();}break;default :System.err.println("Line: " + lineNumber + ": Skipping unknown token: "+ tokens[0]);break;}} else {if (headerOnly) break;if (tokens.length > 2) {String classification=ClassificationType.getFullName(tokens[0]);Integer classId=Integer.parseInt(tokens[1]);Map<Integer,Integer[]> class2counts=classification2class2counts.get(classification);if (class2counts == null) {class2counts=new HashMap<>();classification2class2counts.put(classification,class2counts);}Integer[] counts=class2counts.get(classId);if (counts == null) {counts=new Integer[Math.min(getNumberOfSamples(),tokens.length - 2)];class2counts.put(classId,counts);}for (int i=2; i < Math.min(tokens.length,counts.length + 2); i++) {counts[i - 2]=Integer.parseInt(tokens[i]);}} else System.err.println("Line " + lineNumber + ": Too few tokens in classification: "+ aLine);}}if (disabledSamples.size() > 0) {disableSamples(disabledSamples);}if (blastModes.size() < getNumberOfSamples()) {for (int i=blastModes.size(); i < getNumberOfSamples(); i++) {blastModes.add(BlastMode.Unknown);}}return lineNumber;} catch (IOException ex) {Basic.caught(ex);throw ex;}catch (Exception ex) {Basic.caught(ex);throw new IOException(ex);}}  }
class C{  public void addFooterView(View v){  addFooterView(v,null,true);}  }
class C{  private void drawShadows(Canvas canvas){  int height=(int)(3 * getItemHeight());  topShadow.setBounds(0,0,getWidth(),height);  topShadow.draw(canvas);  bottomShadow.setBounds(0,getHeight() - height,getWidth(),getHeight());  bottomShadow.draw(canvas);}  }
class C{  public void markDownloadTaskFinished(long downloadId){  DownloadManager downloadManager=(DownloadManager)UpodsApplication.getContext().getSystemService(Context.DOWNLOAD_SERVICE);  DownloadManager.Query query=new DownloadManager.Query();  query.setFilterById(downloadId);  Cursor c=downloadManager.query(query);  if (c.moveToFirst()) {    DownloadTask task=getTaskById(downloadId);    int columnIndex=c.getColumnIndex(DownloadManager.COLUMN_STATUS);    if (task != null) {      if (DownloadManager.STATUS_SUCCESSFUL == c.getInt(columnIndex)) {        if (task.track instanceof Episode) {          ((Episode)task.track).setPathOnDisk(task.filePath);        }        ProfileManager.getInstance().addDownloadedTrack(task.mediaItem,task.track);        task.contentLoadListener.onContentLoaded();      }      allTasks.remove(task);    }  }  c.close();}  }
class C{  FieldSpec bean(){  return bean.get();}  }
class C{  public boolean isStrict1(){  return this.strict1;}  }
class C{  private List<Protos.TaskID> install(){  List<Protos.TaskID> taskIds=new ArrayList<>();  Plan plan=defaultScheduler.getPlan();  taskIds.add(installBlock(0,0,getSufficientOfferForTaskA()));  taskIds.add(installBlock(1,0,getSufficientOfferForTaskB()));  taskIds.add(installBlock(1,1,getSufficientOfferForTaskB()));  Assert.assertEquals(Arrays.asList(Status.COMPLETE,Status.COMPLETE,Status.COMPLETE),getBlockStatuses(plan));  Assert.assertTrue(stateStore.isSuppressed());  return taskIds;}  }
class C{  public GTPMRuleExpression(final String pExpression) throws RuleFormatException {  super(pExpression,RuleType.ConditionedRule);  String[] subConditions=pExpression.split(",");  this.conditions=new ArrayList<IRuleCondition>();  for (int i=0; i != subConditions.length; i++) {    this.conditions.add(new GTPMRuleCondition(subConditions[i]));  }}  }
class C{  private void readDetailedResultsFromFile(String sFilename){  PerformanceTableModel tTmp=new PerformanceTableModel();  String sDetailedRes=utils.loadFileToStringWithNewlines(sFilename);  String[] sRows=sDetailedRes.split("\n");  for (int iRowCnt=0; iRowCnt < sRows.length; iRowCnt++) {    String sLine=sRows[iRowCnt];    if (sLine.startsWith("Theme"))     continue;    String[] sResult=sLine.split("\\s+");    if (sResult.length > 0)     tTmp.append(sResult[1],sResult[0],Double.valueOf(sResult[3]).doubleValue());  }  DetailedResultsTbl.setModel(tTmp);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_REGISTER_CANCELED(String value0){  return new SM_SYSTEM_MESSAGE(1400183,value0);}  }
class C{  public boolean frame(){  frameCount++;  long time=System.currentTimeMillis();  if (periodStart <= 0)   periodStart=time;  long elapsed=time - periodStart;  if (elapsed >= 1000) {    currentFPS=(1000 * frameCount) / (float)elapsed;    frameCount=0;    periodStart=time;    return true;  }  return false;}  }
class C{  public static boolean shoudUseLightForegroundOnBackground(int backgroundColor){  return getContrastForColor(backgroundColor) >= CONTRAST_LIGHT_ITEM_THRESHOLD;}  }
class C{  public void clear(){  clearHelper(root);  root=factory.getQuadTreeNode();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DUEL_REJECT_DUEL(String value0){  return new SM_SYSTEM_MESSAGE(1301064,value0);}  }
class C{  @Override public void write(byte[] b,int off,int len){}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {}  }
class C{  public static boolean checkSimpleDerivationOk(XSSimpleType derived,XSTypeDefinition base,short block){  if (derived == SchemaGrammar.fAnySimpleType) {    return (base == SchemaGrammar.fAnyType || base == SchemaGrammar.fAnySimpleType);  }  if (base.getTypeCategory() == XSTypeDefinition.COMPLEX_TYPE) {    if (base == SchemaGrammar.fAnyType)     base=SchemaGrammar.fAnySimpleType; else     return false;  }  return checkSimpleDerivation(derived,(XSSimpleType)base,block);}  }
class C{  public Zdiagmat(Zmat A) throws JampackException {  this(A,0);}  }
class C{  public InvalidMidiDataException(){  super();}  }
class C{  public StartNavigator(Activity activity){  this.activity=activity;}  }
class C{  private static boolean canGenerateAsm(Member member){  if (!Modifier.isPrivate(member.getModifiers()) && member.getDeclaringClass().getClassLoader() != null)   return true;  if (_logger.isLoggable(Level.FINE))   _logger.log(Level.FINE,"Cannot generate ASM for member " + member.getName() + " on class "+ member.getDeclaringClass().getName()+ " - using standard reflection instead.");  return false;}  }
class C{  public static void json(String json){  printer.json(json);}  }
class C{  private void registerMetricsAppender(){  LoggerContext factory=(LoggerContext)LoggerFactory.getILoggerFactory();  Logger rootLogger=factory.getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME);  InstrumentedAppender appender=new InstrumentedAppender(MetricRegistryFactory.getRegistry());  appender.setContext(rootLogger.getLoggerContext());  appender.start();  rootLogger.addAppender(appender);}  }
class C{  public void initSiegeLocations(){  if (SiegeConfig.SIEGE_ENABLED) {    log.info("Loading Siege Locations...");    if (siegeSchedule != null) {      log.error("SiegeService should not be initialized two times!");      return;    }    artifacts=DataManager.SIEGE_LOCATION_DATA.getArtifacts();    fortresses=DataManager.SIEGE_LOCATION_DATA.getFortress();    outposts=DataManager.SIEGE_LOCATION_DATA.getOutpost();    locations=DataManager.SIEGE_LOCATION_DATA.getSiegeLocations();    DAOManager.getDAO(SiegeDAO.class).loadSiegeLocations(locations);    log.info("Loaded " + locations.size() + " siege locations");  } else {    artifacts=Collections.emptyMap();    fortresses=Collections.emptyMap();    outposts=Collections.emptyMap();    locations=Collections.emptyMap();    log.info("Sieges are disabled in config.");  }}  }
class C{  private static void applyOpenSSLFix() throws SecurityException {  if ((Build.VERSION.SDK_INT < VERSION_CODE_JELLY_BEAN) || (Build.VERSION.SDK_INT > VERSION_CODE_JELLY_BEAN_MR2)) {    return;  }  try {    Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_seed",byte[].class).invoke(null,generateSeed());    int bytesRead=(Integer)Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_load_file",String.class,long.class).invoke(null,"/dev/urandom",1024);    if (bytesRead != 1024) {      throw new IOException("Unexpected number of bytes read from Linux PRNG: " + bytesRead);    }  } catch (  Exception e) {    if (ALLOW_BROKEN_PRNG) {      Log.w(PrngFixes.class.getSimpleName(),"Failed to seed OpenSSL PRNG",e);    } else {      throw new SecurityException("Failed to seed OpenSSL PRNG",e);    }  }}  }
class C{  protected boolean isFooterEnabled(){  return false;}  }
class C{  public int upperEndpoint(){  return upperBound.endpoint();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("close");  final String what;  if (np.peekMatchAnyTokenIgnoreCase("what")) {    np.matchIgnoreCase("what=");    what=np.getWordMatchesIgnoringCase("current others");  } else   what="current";  np.matchIgnoreCase(";");  if (what.equalsIgnoreCase("current")) {    if (getViewer() instanceof MainViewer) {      if (getViewer().isLocked()) {        if (ProgramProperties.isUseGUI()) {          int result=JOptionPane.showConfirmDialog(getViewer().getFrame(),"Process running, close anyway?","Close?",JOptionPane.YES_NO_OPTION);          if (result != JOptionPane.YES_OPTION)           return;        } else {          System.err.println("Internal error: process running, close request ignored");          return;        }      }      if (ProjectManager.getNumberOfProjects() == 1)       executeImmediately("quit;"); else {        try {          if (getDir().getDocument().getProgressListener() != null)           getDir().getDocument().getProgressListener().setUserCancelled(true);          getDir().close();        } catch (        CanceledException ex) {        }      }    } else     if (getViewer() != null) {      getViewer().destroyView();    } else     if (getParent() instanceof GraphView) {      ((GraphView)getParent()).getFrame().setVisible(false);    }  } else   if (what.equalsIgnoreCase("others")) {    final ArrayList<IDirector> projects=new ArrayList<>();    projects.addAll(ProjectManager.getProjects());    for (    IDirector aDir : projects) {      if (aDir == getDir()) {        for (        IDirectableViewer viewer : ((Director)aDir).getViewers()) {          if (!(viewer instanceof MainViewer) && viewer != getViewer()) {            viewer.destroyView();          }        }      } else       if (ProjectManager.getProjects().contains(aDir) && !((Director)aDir).isLocked()) {        int numberOfProjects=ProjectManager.getNumberOfProjects();        aDir.executeImmediately("close;",((Director)aDir).getCommandManager());        if (numberOfProjects == ProjectManager.getNumberOfProjects()) {          System.err.println("(Failed to close window, canceled?)");          break;        }      }    }  }}  }
class C{  private Rect stripWhitespace(BufferedImage source){  WritableRaster alphaRaster=source.getAlphaRaster();  if (alphaRaster == null || (!settings.stripWhitespaceX && !settings.stripWhitespaceY))   return new Rect(source,0,0,source.getWidth(),source.getHeight(),false);  final byte[] a=new byte[1];  int top=0;  int bottom=source.getHeight();  if (settings.stripWhitespaceX) {    outer:     for (int y=0; y < source.getHeight(); y++) {      for (int x=0; x < source.getWidth(); x++) {        alphaRaster.getDataElements(x,y,a);        int alpha=a[0];        if (alpha < 0)         alpha+=256;        if (alpha > settings.alphaThreshold)         break outer;      }      top++;    }    outer:     for (int y=source.getHeight(); --y >= top; ) {      for (int x=0; x < source.getWidth(); x++) {        alphaRaster.getDataElements(x,y,a);        int alpha=a[0];        if (alpha < 0)         alpha+=256;        if (alpha > settings.alphaThreshold)         break outer;      }      bottom--;    }  }  int left=0;  int right=source.getWidth();  if (settings.stripWhitespaceY) {    outer:     for (int x=0; x < source.getWidth(); x++) {      for (int y=top; y < bottom; y++) {        alphaRaster.getDataElements(x,y,a);        int alpha=a[0];        if (alpha < 0)         alpha+=256;        if (alpha > settings.alphaThreshold)         break outer;      }      left++;    }    outer:     for (int x=source.getWidth(); --x >= left; ) {      for (int y=top; y < bottom; y++) {        alphaRaster.getDataElements(x,y,a);        int alpha=a[0];        if (alpha < 0)         alpha+=256;        if (alpha > settings.alphaThreshold)         break outer;      }      right--;    }  }  int newWidth=right - left;  int newHeight=bottom - top;  if (newWidth <= 0 || newHeight <= 0) {    if (settings.ignoreBlankImages)     return null; else     return new Rect(emptyImage,0,0,1,1,false);  }  return new Rect(source,left,top,newWidth,newHeight,false);}  }
class C{  public static void emptyBody(Body jBody){  LocalGenerator lg=new LocalGenerator(jBody);  List<Unit> idStmts=new ArrayList<Unit>();  for (  Unit u : jBody.getUnits()) {    if (u instanceof IdentityStmt) {      IdentityStmt i=(IdentityStmt)u;      if (i.getRightOp() instanceof ParameterRef || i.getRightOp() instanceof ThisRef)       idStmts.add(u);    }  }  jBody.getUnits().clear();  jBody.getTraps().clear();  for (  Unit u : idStmts)   jBody.getUnits().add(u);  Type rType=jBody.getMethod().getReturnType();  jBody.getUnits().add(Jimple.v().newNopStmt());  if (rType instanceof VoidType) {    jBody.getUnits().add(Jimple.v().newReturnVoidStmt());  } else {    Type t=jBody.getMethod().getReturnType();    Local l=lg.generateLocal(t);    AssignStmt ass=null;    if (t instanceof RefType || t instanceof ArrayType) {      ass=Jimple.v().newAssignStmt(l,NullConstant.v());    } else     if (t instanceof LongType) {      ass=Jimple.v().newAssignStmt(l,LongConstant.v(0));    } else     if (t instanceof FloatType) {      ass=Jimple.v().newAssignStmt(l,FloatConstant.v(0.0f));    } else     if (t instanceof IntType) {      ass=Jimple.v().newAssignStmt(l,IntConstant.v(0));    } else     if (t instanceof DoubleType) {      ass=Jimple.v().newAssignStmt(l,DoubleConstant.v(0));    } else     if (t instanceof BooleanType || t instanceof ByteType || t instanceof CharType|| t instanceof ShortType) {      ass=Jimple.v().newAssignStmt(l,IntConstant.v(0));    } else {      throw new RuntimeException("error: return type unknown: " + t + " class: "+ t.getClass());    }    jBody.getUnits().add(ass);    jBody.getUnits().add(Jimple.v().newReturnStmt(l));  }}  }
class C{  public Observable<Bitmap> captureRx(@Nullable View... ignoredViews){  InstaCapture.startTime=System.currentTimeMillis();  final Activity activity=activityReferenceManager.getValidatedActivity();  if (activity == null) {    return Observable.error(new ActivityNotRunningException(MESSAGE_IS_ACTIVITY_RUNNING));  }  if (mScreenCapturingListener != null) {    mScreenCapturingListener.onCaptureStarted();  }  return screenshotProvider.getScreenshotBitmap(activity,ignoredViews).observeOn(AndroidSchedulers.mainThread());}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (camera == null) {    camera=Camera.open();    if (camera == null) {      throw new IOException();    }    camera.setPreviewDisplay(holder);    if (!initialized) {      initialized=true;      configManager.initFromCameraParameters(camera);    }    configManager.setDesiredCameraParameters(camera);    FlashlightManager.enableFlashlight();  }}  }
class C{  public VideoDeleteQuery delete(UserActor actor,int videoId){  return new VideoDeleteQuery(getClient(),actor,videoId);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATK_Instant_A_TO_B(String skillcaster,int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201025,skillcaster,num0,skilltarget,skillname);}  }
class C{  public MessagesGetChatQueryWithChatIds(VkApiClient client,UserActor actor,List<Integer> chatIds){  super(client,"messages.getChat",Utils.buildParametrizedType(List.class,Chat.class));  accessToken(actor.getAccessToken());  chatIds(chatIds);}  }
class C{  public void dumpRelations(String title){  dump(new PrintWriter(System.out),0,title,true);}  }
class C{  public ApiRequest(String format,@NotNull String perPage,@NotNull String page,UriInfo uriInfo) throws BadApiRequestException {  this(format,SYNCHRONOUS_REQUEST_FLAG,perPage,page,uriInfo);}  }
class C{  public void closeListeners() throws GenericServiceException {  loadable=0;  for (  String serverKey : listeners.keySet()) {    closeListener(serverKey);  }}  }
class C{  public static ServiceClient createServiceClient(TrustManager trustManager,KeyManager keyManager,int requestPayloadSizeLimit){  return createServiceClient(CertificateUtil.createSSLContext(trustManager,keyManager),requestPayloadSizeLimit);}  }
class C{  public static List<String> tokenize(String str,String delim,boolean duplicates){  ArrayList<String> listToken=new ArrayList<String>();  if (str == null)   return listToken;  StringTokenizer st;  if (delim != null)   st=new StringTokenizer(str,delim); else   st=new StringTokenizer(str);  while (st.hasMoreTokens()) {    String token=st.nextToken().trim();    if (!duplicates && listToken.contains(token))     continue;    listToken.add(token);  }  return listToken;}  }
class C{  private static void convertActivityToTranslucentAfterL(Activity activity){  try {    Method getActivityOptions=Activity.class.getDeclaredMethod("getActivityOptions");    getActivityOptions.setAccessible(true);    Object options=getActivityOptions.invoke(activity);    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method convertToTranslucent=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz,ActivityOptions.class);    convertToTranslucent.setAccessible(true);    convertToTranslucent.invoke(activity,null,options);  } catch (  Throwable t) {  }}  }
class C{  public AppsGetQuery appId(Integer value){  return unsafeParam("app_id",value);}  }
class C{  public final TestSubscriber<T> assertContainValues(Set<? extends T> expectedValues){  if (!valuesStorage) {    throw new IllegalStateException("Using assertNoValues() requires enabling values storage");  }  if (expectedValues.size() > values.size()) {    throw new AssertionError("Actual contains fewer elements" + values,null);  }  Iterator<? extends T> expected=expectedValues.iterator();  for (; ; ) {    boolean n2=expected.hasNext();    if (n2) {      T t2=expected.next();      if (!values.contains(t2)) {        throw new AssertionError("The element is not contained in the " + "received resuls" + " = " + valueAndClass(t2) + " :: "+ values,null);      }    } else {      break;    }  }  return this;}  }
class C{  public static boolean isGoDown(KeyEvent event){  return isActionDown(event) && (event.getKeyCode() == KeyEvent.KEYCODE_DPAD_DOWN || (!event.isNumLockOn() && event.getKeyCode() == KeyEvent.KEYCODE_NUMPAD_2));}  }
class C{  public static void dropTable(Database db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS\"";  db.execSQL(sql);}  }
class C{  BKLogWriteHandler(ZKLogMetadataForWriter logMetadata,DistributedLogConfiguration conf,ZooKeeperClientBuilder zkcBuilder,BookKeeperClientBuilder bkcBuilder,LogSegmentMetadataStore metadataStore,OrderedScheduler scheduler,LedgerAllocator allocator,StatsLogger statsLogger,StatsLogger perLogStatsLogger,AlertStatsLogger alertStatsLogger,String clientId,int regionId,PermitLimiter writeLimiter,FeatureProvider featureProvider,DynamicDistributedLogConfiguration dynConf,DistributedLock lock){  super(logMetadata,conf,zkcBuilder,bkcBuilder,metadataStore,scheduler,statsLogger,alertStatsLogger,null,WRITE_HANDLE_FILTER,clientId);  this.perLogStatsLogger=perLogStatsLogger;  this.writeLimiter=writeLimiter;  this.featureProvider=featureProvider;  this.dynConf=dynConf;  this.ledgerAllocator=allocator;  this.lock=lock;  this.metadataUpdater=LogSegmentMetadataStoreUpdater.createMetadataUpdater(conf,metadataStore);  ensembleSize=conf.getEnsembleSize();  if (ensembleSize < conf.getWriteQuorumSize()) {    writeQuorumSize=ensembleSize;    LOG.warn("Setting write quorum size {} greater than ensemble size {}",conf.getWriteQuorumSize(),ensembleSize);  } else {    writeQuorumSize=conf.getWriteQuorumSize();  }  if (writeQuorumSize < conf.getAckQuorumSize()) {    ackQuorumSize=writeQuorumSize;    LOG.warn("Setting write ack quorum size {} greater than write quorum size {}",conf.getAckQuorumSize(),writeQuorumSize);  } else {    ackQuorumSize=conf.getAckQuorumSize();  }  if (conf.getEncodeRegionIDInLogSegmentMetadata()) {    this.regionId=regionId;  } else {    this.regionId=DistributedLogConstants.LOCAL_REGION_ID;  }  this.sanityCheckTxnId=conf.getSanityCheckTxnID();  this.validateLogSegmentSequenceNumber=conf.isLogSegmentSequenceNumberValidationEnabled();  maxLogSegmentSequenceNo=new MaxLogSegmentSequenceNo(logMetadata.getMaxLSSNData());  inprogressLSSNs=new LinkedList<Long>();  maxTxId=new MaxTxId(zooKeeperClient,logMetadata.getMaxTxIdPath(),conf.getSanityCheckTxnID(),logMetadata.getMaxTxIdData());  scheduleGetLedgersTask(false,true);  setLastLedgerRollingTimeMillis(Utils.nowInMillis());  if (conf.getLogSegmentRollingIntervalMinutes() > 0) {    rollingPolicy=new TimeBasedRollingPolicy(conf.getLogSegmentRollingIntervalMinutes() * 60 * 1000L);  } else {    rollingPolicy=new SizeBasedRollingPolicy(conf.getMaxLogSegmentBytes());  }  StatsLogger segmentsStatsLogger=statsLogger.scope("segments");  openOpStats=segmentsStatsLogger.getOpStatsLogger("open");  closeOpStats=segmentsStatsLogger.getOpStatsLogger("close");  recoverOpStats=segmentsStatsLogger.getOpStatsLogger("recover");  deleteOpStats=segmentsStatsLogger.getOpStatsLogger("delete");}  }
class C{  public static ShapeDrawable toRoundDrawable(int color,int radius){  int r=toPx(radius);  float[] outerR=new float[]{r,r,r,r,r,r,r,r};  RoundRectShape shape=new RoundRectShape(outerR,null,null);  ShapeDrawable drawable=new ShapeDrawable(shape);  drawable.getPaint().setColor(color);  return drawable;}  }
class C{  public static boolean identical(ItemStack a,ItemStack b){  if (a == null && b == null) {    return true;  } else   if (a == null || b == null) {    return false;  }  return couldMerge(a,b);}  }
class C{  public void addCategory(String category){  if (TextUtils.isEmpty(category))   return;  mIntent.addCategory(category);}  }
class C{  public Type<?> findAncestor(final Class<?> ancestor){  if (ancestor.isInterface()) {    return findInterface(ancestor);  } else {    if (this.getRawType().equals(ancestor)) {      return this;    } else     if (!TypeFactory.TYPE_OF_OBJECT.equals(this)) {      return getSuperType().findAncestor(ancestor);    } else {      return null;    }  }}  }
class C{  public boolean isTimeGrainValid(){  if (nestedQuery != null) {    TimeGrain nestedTimeGrain=nestedQuery.getTimeGrain();    return timeGrain == null || nestedTimeGrain == null || timeGrain.satisfiedBy(nestedTimeGrain);  }  return true;}  }
class C{  private DomainSuffixes(){  String file="domain-suffixes.xml";  InputStream input=this.getClass().getClassLoader().getResourceAsStream(file);  assert input != null;  try {    new DomainSuffixesReader().read(this,input);  } catch (  Exception ex) {    LOG.warn(StringUtils.stringifyException(ex));  }}  }
class C{  public boolean isCancelled(){  return this.request != null && request.isCancelled();}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public static <R extends Remote>RemoteAsyncCommandResult<R> executeAsync(RemoteJavaCommand<R> command,File dir) throws ExecutionException {  try {    Process process=forkProcess(command,dir);    return new RemoteAsyncCommandResult(process,command);  } catch (  ExecutionException ex) {    throw ex;  }catch (  Throwable th) {    throw new ExecutionException("Failed to execute remote async command: [" + command + "]",th);  }}  }
class C{  @NotNull public ListPersonsInPersonGroupAction listPersonsInPersonGroup(@NotNull String personGroupId){  Validation.validate(personGroupId,"^[a-z0-9_-]{1,64}$",new ParameterValidationException("personGroupId","Person group ID is invalid. Valid format should be a string composed by numbers, english letters in lower case, '-', '_', and no longer than 64 characters."));  return new ListPersonsInPersonGroupAction(cognitiveContext,personGroupId);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set layout=");  String layout=np.getWordMatchesIgnoringCase(Basic.toString(AlignmentViewer.AlignmentLayout.values()," "));  np.matchIgnoreCase(";");  AlignmentViewer viewer=(AlignmentViewer)getViewer();  viewer.getSelectedBlock().clear();  viewer.setAlignmentLayout(AlignmentViewer.AlignmentLayout.valueOfIgnoreCase(layout),((Director)getDir()).getDocument().getProgressListener());  viewer.getAlignmentViewerPanel().zoom("both","fit",null);}  }
class C{  @Override public String encodeSLD(URL resourceLocator,StyledLayerDescriptor sld){  String xml="";  if (sld != null) {    DuplicatingStyleVisitor duplicator=new DuplicatingStyleVisitor();    sld.accept(duplicator);    StyledLayerDescriptor sldCopy=(StyledLayerDescriptor)duplicator.getCopy();    if (resourceLocator != null) {      SLDExternalImages.updateOnlineResources(resourceLocator,sldCopy);    }    SLDTransformer transformer=new SLDTransformer();    transformer.setIndentation(2);    try {      xml=transformer.transform(sldCopy);    } catch (    TransformerException e) {      ConsoleManager.getInstance().exception(this,e);    }  }  return xml;}  }
class C{  public String encodeSLD(StyledLayerDescriptor sld){  String xml="";  if (sld != null) {    SLDTransformer transformer=new SLDTransformer();    transformer.setIndentation(2);    try {      xml=transformer.transform(sld);    } catch (    TransformerException e) {      ConsoleManager.getInstance().exception(this,e);    }  }  return xml;}  }
class C{  public void load() throws IOException {  if (magicNumber == 0) {    try (InputReaderLittleEndian ins=new InputReaderLittleEndian(new FileInputStreamAdapter(fileName))){      magicNumber=ins.readLong();      if (magicNumber != MAGIC_NUMBER)       throw new IOException("Input file is not a DAA file.");      version=ins.readLong();      if (version > DAA_VERSION)       throw new IOException("DAA version requires later version of MEGAN.");      diamondBuild=ins.readLong();      dbSeqs=ins.readLong();      dbSeqsUsed=ins.readLong();      dbLetters=ins.readLong();      flags=ins.readLong();      queryRecords=ins.readLong();      modeRank=ins.readInt();      gapOpen=ins.readInt();      gapExtend=ins.readInt();      reward=ins.readInt();      penalty=ins.readInt();      reserved1=ins.readInt();      reserved2=ins.readInt();      reserved3=ins.readInt();      k=ins.readDouble();      lambda=ins.readDouble();      reserved4=ins.readDouble();      reserved5=ins.readDouble();      for (int i=0; i < scoreMatrix.length; i++) {        scoreMatrix[i]=(byte)ins.read();      }      scoreMatrixName=Basic.toString(scoreMatrix);      for (int i=0; i < blockSize.length; i++)       blockSize[i]=ins.readLong();      if (blockSize[0] == 0)       throw new IOException("Invalid DAA file. DIAMOND run probably has not completed successfully.");      for (int i=0; i < blockTypeRank.length; i++) {        blockTypeRank[i]=(byte)ins.read();switch (BlockType.value(blockTypeRank[i])) {case ref_names:          if (refNamesBlockIndex != -1)           throw new IOException("DAA file contains multiple ref_names blocks, not implemented.");        refNamesBlockIndex=i;      break;case ref_lengths:    if (refLengthsBlockIndex != -1)     throw new IOException("DAA file contains multiple ref_lengths blocks, not implemented.");  refLengthsBlockIndex=i;break;case alignments:if (alignmentsBlockIndex != -1) throw new IOException("DAA file contains multiple alignments blocks, not implemented.");alignmentsBlockIndex=i;break;}}if (refNamesBlockIndex == -1) throw new IOException("DAA file contains 0 ref_names blocks, not implemented.");if (refLengthsBlockIndex == -1) throw new IOException("DAA file contains 0 ref_lengths blocks, not implemented.");if (alignmentsBlockIndex == -1) throw new IOException("DAA file contains 0 alignments blocks, not implemented.");if (refLengthsBlockIndex < refNamesBlockIndex) throw new IOException("DAA file contains ref_lengths block before ref_names block, not implemented.");headerSize=ins.getPosition();lnK=Math.log(k);} }}  }
class C{  @Override public int countMissing(){  int count=0;  for (int i=0; i < size(); i++) {    if (getByte(i) == MISSING_VALUE) {      count++;    }  }  return count;}  }
class C{  public Shape triangle_up(float x,float y,float height){  m_path.reset();  m_path.moveTo(x,y + height);  m_path.lineTo(x + height / 2,y);  m_path.lineTo(x + height,(y + height));  m_path.closePath();  return m_path;}  }
class C{  public static void addStrut(JComponent b,int layout,int size){  if (size < 1)   return;  b.add(getAxis(b,layout) == BoxLayout.X_AXIS ? Box.createHorizontalStrut(size) : Box.createVerticalStrut(size));}  }
class C{  protected void startAuthenticationAndInjectCsrfToken(HttpRequest request){  logger.debug("Authenticate because no session is found in cookie store or it doesn't match with the one used to get the CSRF token we have.");  startAuthenticationFlow();  logger.debug("Injecting CSRF token");  injectCsrfTokenIntoHeader(request,latestCsrfToken);}  }
class C{  @Deprecated public void showDoneButton(boolean showDone){  setProgressButtonEnabled(showDone);}  }
class C{  public ResourcesPoet addInteger(String name,String value){  Element bool=document.createElement("integer");  bool.setAttribute("name",name);  bool.appendChild(document.createTextNode(String.valueOf(value)));  resourceElement.appendChild(bool);  return this;}  }
class C{  public TShortLongHashMap(int initialCapacity,TShortHashingStrategy strategy){  super(initialCapacity,strategy);}  }
class C{  public PhotosSaveWallPhotoQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  public Builder clearMessage(){  message_=getDefaultInstance().getMessage();  onChanged();  return this;}  }
class C{  @Override public long limit(){  return limit;}  }
class C{  public final boolean canGetDouble(String field){  return m_table.canGetDouble(field);}  }
class C{  @Override protected void checkProperty(String propertyId) throws XMLConfigurationException {  super.checkProperty(propertyId);}  }
class C{  protected void actionPerformed(GuiButton par1GuiButton){  if (par1GuiButton.enabled) {    if (par1GuiButton.id == ID_GENERIC_DONE) {      Minecraft.getMinecraft().vrSettings.saveOptions();      this.mc.displayGuiScreen(this.parentGuiScreen);    } else     if (par1GuiButton.id == ID_GENERIC_DEFAULTS) {      this.guivrSettings.crosshairScale=1.0f;      this.guivrSettings.renderBlockOutlineMode=VRSettings.RENDER_BLOCK_OUTLINE_MODE_ALWAYS;      this.guivrSettings.renderInGameCrosshairMode=VRSettings.RENDER_CROSSHAIR_MODE_ALWAYS;      this.guivrSettings.menuCrosshairScale=1f;      this.guivrSettings.useCrosshairOcclusion=false;      Minecraft.getMinecraft().vrSettings.saveOptions();      this.reinit=true;    } else     if (par1GuiButton instanceof GuiSmallButtonEx) {      VRSettings.VrOptions num=VRSettings.VrOptions.getEnumOptions(par1GuiButton.id);      this.guivrSettings.setOptionValue(((GuiSmallButtonEx)par1GuiButton).returnVrEnumOptions(),1);      par1GuiButton.displayString=this.guivrSettings.getKeyBinding(VRSettings.VrOptions.getEnumOptions(par1GuiButton.id));    }  }}  }
class C{  protected boolean shouldUseHomeAsUp(){  return false;}  }
class C{  public static boolean isLazy(List<Annotation> annotations,boolean defaultValue){  JsonApiIncludeByDefault includeByDefaultAnnotation=null;  JsonApiToMany toManyAnnotation=null;  JsonApiToOne toOneAnnotation=null;  for (  Annotation annotation : annotations) {    if (annotation.annotationType().equals(JsonApiIncludeByDefault.class)) {      includeByDefaultAnnotation=(JsonApiIncludeByDefault)annotation;    }    if (annotation.annotationType().equals(JsonApiToMany.class)) {      toManyAnnotation=(JsonApiToMany)annotation;    }    if (annotation.annotationType().equals(JsonApiToOne.class)) {      toOneAnnotation=(JsonApiToOne)annotation;    }  }  if (includeByDefaultAnnotation != null) {    return false;  } else   if (toManyAnnotation != null) {    return toManyAnnotation.lazy();  } else   if (toOneAnnotation != null) {    return toOneAnnotation.lazy();  }  return defaultValue;}  }
class C{  public void loadDataStringFromFile(String sFilename,boolean clearCurrentData){  loadDataStringFromFile(sFilename,clearCurrentData,utils.getSystemEncoding());}  }
class C{  public static GridLayout createGridLayout(int numColumns,PixelConverter converter,int margins){  Assert.isTrue(margins == MARGINS_DEFAULT || margins == MARGINS_NONE || margins == MARGINS_DIALOG);  final GridLayout layout=new GridLayout(numColumns,false);  layout.horizontalSpacing=converter.convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);  layout.verticalSpacing=converter.convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);switch (margins) {case MARGINS_NONE:    layout.marginLeft=layout.marginRight=0;  layout.marginTop=layout.marginBottom=0;break;case MARGINS_DIALOG:layout.marginLeft=layout.marginRight=converter.convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN);layout.marginTop=layout.marginBottom=converter.convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_MARGIN);break;case MARGINS_DEFAULT:layout.marginLeft=layout.marginRight=layout.marginWidth;layout.marginTop=layout.marginBottom=layout.marginHeight;}layout.marginWidth=layout.marginHeight=0;return layout;}  }
class C{  private Unsigned(){}  }
class C{  public void testAddAfterStop() throws Exception {  deleteAllDocs();  send("stopIndex");  try {    send("addDocument","{fields: {}}");    fail();  } catch (  IOException ioe) {  }  send("startIndex");}  }
class C{  public void addResource(RType rType,IdType idType,String name,String idValue){  Set<RDotTxtEntry> resourceSet=null;  if (this.rTypeResourceMap.containsKey(rType)) {    resourceSet=this.rTypeResourceMap.get(rType);  } else {    resourceSet=new HashSet<RDotTxtEntry>();    this.rTypeResourceMap.put(rType,resourceSet);  }  RDotTxtEntry rDotTxtEntry=new RDotTxtEntry(idType,rType,name,idValue);  boolean increaseResource=false;  if (!resourceSet.contains(rDotTxtEntry)) {    if (this.originalResourceMap.containsKey(rDotTxtEntry)) {      this.rTypeEnumeratorMap.get(rType).previous();      rDotTxtEntry=this.originalResourceMap.get(rDotTxtEntry);    } else {      increaseResource=true;    }    resourceSet.add(rDotTxtEntry);  }  Set<RDotTxtEntry> increaseResourceSet=null;  if (this.rTypeIncreaseResourceMap.containsKey(rType)) {    increaseResourceSet=this.rTypeIncreaseResourceMap.get(rType);  } else {    increaseResourceSet=new HashSet<RDotTxtEntry>();    this.rTypeIncreaseResourceMap.put(rType,increaseResourceSet);  }  if (increaseResource) {    increaseResourceSet.add(rDotTxtEntry);  }}  }
class C{  private static void addToArray(Integer[] sum,int[] add){  for (int i=0; i < add.length; i++) {    sum[i]+=add[i];  }}  }
class C{  public ParticipantTask(TaskManager manager,WakeupManager wm,Job myjob,ParticipantHandle handle){  super(manager,wm);  this.myjob=myjob;  this.handle=handle;}  }
class C{  public LinearConstraintSet(LinearConstraint... constraints){  for (  LinearConstraint c : constraints) {    linearConstraints.add(c);  }}  }
class C{  @Override public boolean equals(Object o){  return toString().equals(o.toString());}  }
class C{  public static String destroyCart(HttpServletRequest request,HttpServletResponse response){  HttpSession session=request.getSession();  clearCart(request,response);  session.removeAttribute("shoppingCart");  session.removeAttribute("orderPartyId");  session.removeAttribute("orderMode");  session.removeAttribute("productStoreId");  session.removeAttribute("CURRENT_CATALOG_ID");  return "success";}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  CompareWindow viewer=(CompareWindow)getParent();  viewer.getJList().clearSelection();}  }
class C{  private void populate(String wktString){  wktGeometry=WKTConversion.parseWKTString(wktString);  WKTType geometryType=null;  boolean valid=false;  if (wktGeometry != null) {    geometryType=wktGeometry.getGeometryType();    valid=wktGeometry.isValid();  }  model.setSelectedItem(geometryType);  updateUI(geometryType);  if (valid) {    if (geometryType.canHaveMultipleShapes()) {      populateMultiShapeList();    } else {      populateSegmentList(0);    }  }  wktTextArea.setText(wktString);  updateWKTString();}  }
class C{  public VideoAddAlbumQuery privacy(String... value){  return unsafeParam("privacy",value);}  }
class C{  public static void requestWriteExternalStoreagePermission(Activity activity){  ActivityCompat.requestPermissions(activity,new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},PERMISSIONS_WRITE_EXTERNAL_STORAGE);}  }
class C{  private ExpressionPanelFactory(){  PrefManager.getInstance().addListener(this);  PrefManager.getInstance().addVendorOptionListener(this);  EnvironmentManagerInterface envMgr=EnvironmentVariableManager.getInstance();  ExpressionNode.setEnvMgr(envMgr);}  }
class C{  public static boolean propertyValueEqualsIgnoreCase(String resource,String name,String compareString){  String value=getPropertyValue(resource,name);  if (value == null)   return false;  return value.trim().equalsIgnoreCase(compareString);}  }
class C{  @Override public void flush(Map<TopicPartition,OffsetAndMetadata> offsets) throws ConnectException {  fLog.trace("Flush start at " + System.currentTimeMillis());  try {    if (iDelivery > FASTEST)     iWriter.flush();    if (iDelivery == SYNCHRONIZED) {      int size=offsets.size();      String[] topicArray=new String[size];      Integer[] partitionArray=new Integer[size];      Long[] offsetArray=new Long[size];      Iterator<Map.Entry<TopicPartition,OffsetAndMetadata>> iterator=offsets.entrySet().iterator();      for (int i=0; i < size; ++i) {        Entry<TopicPartition,OffsetAndMetadata> entry=iterator.next();        TopicPartition key=entry.getKey();        OffsetAndMetadata value=entry.getValue();        topicArray[i]=key.topic();        partitionArray[i]=key.partition();        offsetArray[i]=value.offset();      }      iFlushStatement.setArray(1,iConnection.createArrayOf("varchar",topicArray));      iFlushStatement.setArray(2,iConnection.createArrayOf("integer",partitionArray));      iFlushStatement.setArray(3,iConnection.createArrayOf("bigint",offsetArray));      iFlushStatement.executeQuery();    }  } catch (  SQLException|IOException exception) {    throw new ConnectException(exception);  }  fLog.trace("Flush stop at " + System.currentTimeMillis());}  }
class C{  public boolean isSink(){  return this.sinkSource == SinkSource.Sink || this.sinkSource == SinkSource.Both;}  }
class C{  private static String resolveMapConflicts(String left,String right){  if (!left.equals(right)) {    LOG.error("Two different casing's detect for parameter: '{}' ('{}' and '{}' found).\n" + "    All casing for identical query parameters must be identical. Cannot proceed.",left.toLowerCase(Locale.ENGLISH),left,right);    throw new RuntimeException("Found different parameter casing-styles for parameter: " + left);  }  return left;}  }
class C{  private boolean resizeAndSaveImage(int maxWidth,int maxHeight) throws IOException {  boolean saved=false;  File targetFile=configuration.diskCache.get(uri);  if (targetFile != null && targetFile.exists()) {    ImageSize targetImageSize=new ImageSize(maxWidth,maxHeight);    DisplayImageOptions specialOptions=new DisplayImageOptions.Builder().cloneFrom(options).imageScaleType(ImageScaleType.IN_SAMPLE_INT).build();    ImageDecodingInfo decodingInfo=new ImageDecodingInfo(memoryCacheKey,Scheme.FILE.wrap(targetFile.getAbsolutePath()),uri,targetImageSize,ViewScaleType.FIT_INSIDE,getDownloader(),specialOptions);    Bitmap bmp=decoder.decode(decodingInfo);    if (bmp != null && configuration.processorForDiskCache != null) {      L.d(LOG_PROCESS_IMAGE_BEFORE_CACHE_ON_DISK,memoryCacheKey);      bmp=configuration.processorForDiskCache.process(bmp);      if (bmp == null) {        L.e(ERROR_PROCESSOR_FOR_DISK_CACHE_NULL,memoryCacheKey);      }    }    if (bmp != null) {      saved=configuration.diskCache.save(uri,bmp);      bmp.recycle();    }  }  return saved;}  }
class C{  private String faviconUrl(){  String origin=mSite.getAddress().getOrigin();  if (origin == null) {    return "http://" + mSite.getAddress().getHost();  }  Uri uri=Uri.parse(origin);  if (uri.getPort() != -1) {    uri=uri.buildUpon().authority(uri.getHost()).build();  }  return uri.toString();}  }
class C{  public void createScriptRunner(final IKBus eventBus,final Executor executor){  if (scriptRunner == null) {    this.scriptRunner=new ScriptRunner(eventBus,this,executor);  }}  }
class C{  public void accept(AbstractReporter r){  r.testStart(this);  r.browserInfoEntry(browserInfoEntry);  Iterator<LogEntry> entryIterator=logEntries.iterator();  while (entryIterator.hasNext()) {    LogEntry entry=entryIterator.next();    if (!entryIterator.hasNext()) {      entry.setLast(true);    }    visit(entry,r);  }  r.testEnd(this);}  }
class C{  private boolean isConfigurationPluginAvailable(){  if (configurationPluginAvailable == null) {    try {      String value=APILocator.getPluginAPI().loadProperty(pluginName,"environment");      configurationPluginAvailable=(value != null);    } catch (    Exception e) {      Logger.warn(this,"Exception while trying to get property 'environment' ",e);      configurationPluginAvailable=false;    }    Logger.info(this,"Configuration plugin available: " + configurationPluginAvailable);  }  return configurationPluginAvailable;}  }
class C{  public boolean isAbnormalState(AbnormalState id){  int state=abnormals & id.getId();  return state > 0 && state <= id.getId();}  }
class C{  public char next(char c) throws JSONException {  char n=this.next();  if (n != c) {    throw this.syntaxError("Expected '" + c + "' and instead saw '"+ n+ "'");  }  return n;}  }
class C{  public boolean isAll(){  return all;}  }
class C{  private double dpDistance(){  if ((signal == null) || (reference == null)) {    return 1.0e+32;  }  if ((signal.length == 0) || (reference.length == 0)) {    return 1.0e+32;  }  if (signal[0].length != reference[0].length) {    throw new RuntimeException("Given signal vector order (" + signal[0].length + ") and reference vector order ("+ reference[0].length+ ") are not same.");  }  weights=weightFunction(reference.length);  RecurssiveDTW rdp=new RecurssiveDTW(signal.length,reference.length);  return rdp.dpCost;}  }
class C{  private static void unknownPacket(State state,int id){  log.warn(String.format("Unknown packet recived from Game Server: 0x%02X state=%s",id,state.toString()));}  }
class C{  public static void drawVerticalZigZagLine(Graphics2D g,int x,int y1,int y2){  drawVerticalZigZagLine(g,x,y1,y2,CENTER_ZIGZAG,CENTER_ZIGZAG);}  }
class C{  private String prepareSlowConsumerSleepMsg(SocketAddress address,int retriesLeft){  return "Sleeping - waiting for slow consumer: " + address + " Retry="+ (_slowConsumerRetries - retriesLeft)+ " SlowConsumerThroughput="+ _slowConsumerThroughput+ " SlowConsumerRetries="+ _slowConsumerRetries+ " SlowConsumerLatency="+ _slowConsumerLatency;}  }
class C{  static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {  return createObject(factoryId,null,fallbackClassName);}  }
class C{  public byte[] readBytes(){  return readBytes(0,Page.pageSize);}  }
class C{  public int pop(){  return fData[--fDepth];}  }
class C{  public static SequenceSchema inferSequence(List<List<Writable>> record){  SequenceSchema.Builder builder=new SequenceSchema.Builder();  for (int i=0; i < record.size(); i++) {    if (record.get(i) instanceof DoubleWritable)     builder.addColumnDouble(String.valueOf(i)); else     if (record.get(i) instanceof IntWritable)     builder.addColumnInteger(String.valueOf(i)); else     if (record.get(i) instanceof LongWritable)     builder.addColumnLong(String.valueOf(i)); else     if (record.get(i) instanceof FloatWritable)     builder.addColumnFloat(String.valueOf(i)); else     throw new IllegalStateException("Illegal writable for infering schema of type " + record.get(i).getClass().toString());  }  builder.minSequenceLength(record.size());  builder.maxSequenceLength(record.size());  return builder.build();}  }
class C{  public NotEqualsSpacePredicate(Object expectedValue){  super(expectedValue,null);}  }
class C{  private HttpURLConnection createHttpURLConnection(IBasicRequest request) throws Exception {  request.onPreExecute();  String urlStr=request.url();  Logger.i("Request address: " + urlStr);  URL url=new URL(urlStr);  HttpURLConnection connection;  Proxy proxy=request.getProxy();  if (proxy == null)   connection=URLConnectionFactory.instance().open(url); else   connection=URLConnectionFactory.instance().open(url,proxy);  connection.setConnectTimeout(request.getConnectTimeout());  connection.setReadTimeout(request.getReadTimeout());  connection.setInstanceFollowRedirects(false);  if (connection instanceof HttpsURLConnection) {    SSLSocketFactory sslSocketFactory=request.getSSLSocketFactory();    if (sslSocketFactory != null)     ((HttpsURLConnection)connection).setSSLSocketFactory(sslSocketFactory);    HostnameVerifier hostnameVerifier=request.getHostnameVerifier();    if (hostnameVerifier != null)     ((HttpsURLConnection)connection).setHostnameVerifier(hostnameVerifier);  }  RequestMethod requestMethod=request.getRequestMethod();  String requestMethodStr=requestMethod.toString();  Logger.i("Request method: " + requestMethodStr);  try {    connection.setRequestMethod(requestMethodStr);  } catch (  ProtocolException protocol) {    try {      Field methodField=connection.getClass().getDeclaredField("method");      methodField.setAccessible(true);      methodField.set(connection,requestMethodStr);    } catch (    Exception noSuchFieldIllegalAccess) {      throw protocol;    }  }  connection.setDoInput(true);  connection.setDoOutput(requestMethod.allowRequestBody());  setHeaders(url.toURI(),connection,request);  connection.connect();  return connection;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(getClass().getSimpleName());  sb.append(" [");  sb.append("Hash = ").append(hashCode());  sb.append(", paramKey=").append(paramKey);  sb.append(", paramValue=").append(paramValue);  sb.append(", catalogId=").append(catalogId);  sb.append("]");  return sb.toString();}  }
class C{  public final Vertex locateVertexInGraph(UniqueVertexGraph gGraph,Vertex vToFind){  return gGraph.locateVertex(vToFind);}  }
class C{  public static String checkCreateUpdateAnonUser(HttpServletRequest request,HttpServletResponse response){  throw new UnsupportedOperationException("Not implemented");}  }
class C{  @Override protected Expression generateExpression(){  Expression expression=null;  if (this.comboBox != null) {    ValueComboBoxData selectedValue=comboBox.getSelectedValue();    if (selectedValue != null) {      expression=getFilterFactory().literal(selectedValue.getKey());    }  }  return expression;}  }
class C{  public FriendsEditQuery listIds(List<Integer> value){  return unsafeParam("list_ids",value);}  }
class C{  public SimplexSolver(){  this(DEFAULT_EPSILON,DEFAULT_ULPS,DEFAULT_CUT_OFF);}  }
class C{  public static String trim(String value){  int start;  int end;  final int lengthMinusOne=value.length() - 1;  for (start=0; start <= lengthMinusOne; ++start) {    if (!isSpace(value.charAt(start))) {      break;    }  }  for (end=lengthMinusOne; end >= start; --end) {    if (!isSpace(value.charAt(end))) {      break;    }  }  if (start == 0 && end == lengthMinusOne) {    return value;  }  if (start > lengthMinusOne) {    return "";  }  return value.substring(start,end + 1);}  }
class C{  public static TransformResult of(Path path,DummyReference originRef) throws ValidationException, RepoException {  return new TransformResult(path,originRef,originRef.getAuthor(),"test summary\n");}  }
class C{  public Builder addColumnString(String name,String regex,Integer minAllowableLength,Integer maxAllowableLength){  return addColumn(new StringMetaData(name,regex,minAllowableLength,maxAllowableLength));}  }
class C{  public static Zdiagmat o(Zdiagmat D){  Zdiagmat Dh=new Zdiagmat(D);  for (int i=0; i < Dh.n; i++) {    Dh.im[i]=-Dh.im[i];  }  return Dh;}  }
class C{  public static StatisticLevel toLevel(int val,Level defaultLevel){  return STATISTIC;}  }
class C{  public static void apply(final ProgressListener progress,final String daaFile,final String metaDataFile,final String[] cNames,float minScore,float maxExpected,float minPercentIdentity,float topPercent,float minSupportPercent,int minSupport,boolean pairedReads,int pairedReadsSuffixLength,boolean weightedLCA,float weightedLCAPercent) throws IOException, CanceledException {  progress.setTasks("Meganizing","init");  DAAReferencesAnnotator.apply(daaFile,true,cNames,progress);  final Document doc=new Document();  doc.setOpenDAAFileOnlyIfMeganized(false);  doc.getMeganFile().setFileFromExistingFile(daaFile,false);  doc.getActiveViewers().add(Classification.Taxonomy);  doc.getActiveViewers().addAll(Arrays.asList(cNames));  doc.setMinScore(minScore);  doc.setMaxExpected(maxExpected);  doc.setMinPercentIdentity(minPercentIdentity);  doc.setTopPercent(topPercent);  doc.setMinSupportPercent(minSupportPercent);  doc.setMinSupport(minSupport);  doc.setPairedReads(pairedReads);  doc.setPairedReadSuffixLength(pairedReadsSuffixLength);  doc.setBlastMode(DAAParser.getBlastMode(daaFile));  doc.setWeightedLCA(weightedLCA);  doc.setWeightedLCAPercent(weightedLCAPercent);  doc.setProgressListener(progress);  doc.processReadHits();  final String sampleName=Basic.replaceFileSuffix(Basic.getFileNameWithoutPath(daaFile),"");  SyncArchiveAndDataTable.syncRecomputedArchive2Summary(sampleName,"LCA",doc.getBlastMode(),doc.getParameterString(),doc.getConnector(),doc.getDataTable(),0);  doc.saveAuxiliaryData();  if (metaDataFile.length() > 0) {    final DAAConnector connector=(DAAConnector)doc.getConnector();    try {      System.err.println("Saving metadata:");      SampleAttributeTable sampleAttributeTable=new SampleAttributeTable();      sampleAttributeTable.read(new FileReader(metaDataFile),Collections.singletonList(Basic.getFileBaseName(Basic.getFileNameWithoutPath(daaFile))),false);      Map<String,byte[]> label2data=new HashMap<>();      label2data.put(SampleAttributeTable.SAMPLE_ATTRIBUTES,sampleAttributeTable.getBytes());      connector.putAuxiliaryData(label2data);      System.err.println("done");    } catch (    Exception ex) {      Basic.caught(ex);    }  }  final DAAHeader header=new DAAHeader(daaFile);  header.load();  header.setReserved3(DAAHeader.MEGAN_VERSION);  header.save();}  }
