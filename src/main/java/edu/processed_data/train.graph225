class C{  public Document create(){  Element root=new Element("treeTracer");  root.setAttribute("version",version);  Element taxonSetsElement=new Element("taxonSets");  Element charactersElement=new Element("characters");  Element statisticsElement=new Element("statistics");  root.addContent(taxonSetsElement);  root.addContent(charactersElement);  root.addContent(statisticsElement);  return new Document(root);}  }
class C{  private void validatePricedEvent(VOPricedEvent result){  assertNotNull(result);  assertEquals(123,result.getKey());  assertEquals(0,result.getVersion());  assertEquals(1,result.getEventDefinition().getKey());  assertEquals("",result.getEventDefinition().getEventDescription());  assertEquals("eventIdentifier",result.getEventDefinition().getEventId());  assertEquals(BigDecimal.valueOf(999),result.getEventPrice());  List<VOSteppedPrice> steppedPrices=result.getSteppedPrices();  assertEquals(1,steppedPrices.size());  assertEquals(2,steppedPrices.get(0).getKey());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void handleTriggerCopies(final State current){  try {    Set<String> datastoreSet=new HashSet<>();    Operation queryDatastoreSet=buildDatastoreSetQuery(current);    Operation patchOperation=Operation.createPatch(UriUtils.buildUri(getHost(),getSelfLink()));    ImageReplicatorService.State imageReplicatorServiceState=buildPatch(TaskState.TaskStage.STARTED,TaskState.SubStage.AWAIT_COMPLETION,null);    OperationSequence operationSequence=OperationSequence.create(queryDatastoreSet).setCompletion(null);    if (!current.isSelfProgressionDisabled) {      operationSequence.next(patchOperation).setCompletion(null);      ;    }    operationSequence.sendWith(this);  } catch (  Exception e) {    failTask(e);  }}  }
class C{  public void removeAllFirmwareUpdateCallbacks(){  firmwareUpdateCallbacks.clear();}  }
class C{  public void println(java.lang.Object x){  return;}  }
class C{  public boolean isAnimateTabSelection(){  return animateTabSelection;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == NamedElement.class) {switch (baseFeatureID) {case BasePackage.NAMED_ELEMENT__NAME:      return TypesPackage.TYPE_ALIAS__NAME;default :    return -1;}}if (baseClass == AnnotatableElement.class) {switch (baseFeatureID) {case TypesPackage.ANNOTATABLE_ELEMENT__ANNOTATIONS:  return TypesPackage.TYPE_ALIAS__ANNOTATIONS;default :return -1;}}if (baseClass == PackageMember.class) {switch (baseFeatureID) {case TypesPackage.PACKAGE_MEMBER__ID:return TypesPackage.TYPE_ALIAS__ID;default :return -1;}}if (baseClass == Type.class) {switch (baseFeatureID) {case TypesPackage.TYPE__CONSTRAINT:return TypesPackage.TYPE_ALIAS__CONSTRAINT;case TypesPackage.TYPE__ABSTRACT:return TypesPackage.TYPE_ALIAS__ABSTRACT;case TypesPackage.TYPE__VISIBLE:return TypesPackage.TYPE_ALIAS__VISIBLE;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public boolean addItemUnique(Playlist p){  if (!mPlaylists.contains(p)) {    mPlaylists.add(p);    return true;  } else {    return false;  }}  }
class C{  public boolean hasDownOff(){  return downOffImage != null;}  }
class C{  @Override @CanIgnoreReturnValue public boolean offer(E e){  return add(e);}  }
class C{  public Matrix3f mult(Matrix3f mat,Matrix3f product){  float temp00, temp01, temp02;  float temp10, temp11, temp12;  float temp20, temp21, temp22;  if (product == null) {    product=new Matrix3f();  }  temp00=m00 * mat.m00 + m01 * mat.m10 + m02 * mat.m20;  temp01=m00 * mat.m01 + m01 * mat.m11 + m02 * mat.m21;  temp02=m00 * mat.m02 + m01 * mat.m12 + m02 * mat.m22;  temp10=m10 * mat.m00 + m11 * mat.m10 + m12 * mat.m20;  temp11=m10 * mat.m01 + m11 * mat.m11 + m12 * mat.m21;  temp12=m10 * mat.m02 + m11 * mat.m12 + m12 * mat.m22;  temp20=m20 * mat.m00 + m21 * mat.m10 + m22 * mat.m20;  temp21=m20 * mat.m01 + m21 * mat.m11 + m22 * mat.m21;  temp22=m20 * mat.m02 + m21 * mat.m12 + m22 * mat.m22;  product.m00=temp00;  product.m01=temp01;  product.m02=temp02;  product.m10=temp10;  product.m11=temp11;  product.m12=temp12;  product.m20=temp20;  product.m21=temp21;  product.m22=temp22;  return product;}  }
class C{  public String addLinks(String text){  RegExp REGEXP_LINKS=RegExp.compile("\\[.*?\\s*(.*?)\\]","g");  MatchResult matchResult=REGEXP_LINKS.exec(text);  if (matchResult != null && matchResult.getGroupCount() == 2) {    String content=matchResult.getGroup(1);    StringBuilder sb=new StringBuilder("<a href=\"");    int space=content.indexOf(' ');    if (space == -1) {      sb.append(UriUtils.sanitizeUri(content));      sb.append("\">");      sb.append(UriUtils.sanitizeUri(content));    } else {      sb.append(UriUtils.sanitizeUri(content.substring(0,space)));      sb.append("\">");      sb.append(content.substring(space + 1,content.length()));    }    sb.append("</a>");    String hyperLinksValue=text.replace(matchResult.getGroup(0),sb.toString());    return addLinks(hyperLinksValue);  }  return text;}  }
class C{  @Override protected void after(){  log.info("Stopping {}: {}",this.getClass().getSimpleName(),getServerName());  super.after();  this.stop();}  }
class C{  @Override public boolean isStopped(){  if (mIsTaskStop) {    if (!mSaver.isStopped()) {      stopInternalImpl();    }  }  return mIsTaskStop;}  }
class C{  public static boolean isXMLNSDecl(String attRawName){  return (attRawName.startsWith("xmlns") && (attRawName.equals("xmlns") || attRawName.startsWith("xmlns:")));}  }
class C{  private void initRasterProgram(){  glUseProgram(rasterProgram);  viewMatrixUniform=glGetUniformLocation(rasterProgram,"viewMatrix");  projectionMatrixUniform=glGetUniformLocation(rasterProgram,"projectionMatrix");  glUseProgram(0);}  }
class C{  public static boolean isPackage(int mod){  return (mod & (PUBLIC | PRIVATE | PROTECTED)) == 0;}  }
class C{  public NondominatedPopulation(){  this(new ParetoDominanceComparator());}  }
class C{  private void verifyFutureCompleted(Future<? extends Object> future) throws InterruptedException, ExecutionException {  try {    assertNotNull(future.get(TASK_TIMEOUT_SEC,TimeUnit.SECONDS));  } catch (  TimeoutException e) {    throw new ExecutionException("Timeout",e);  }  assertFalse(future.isCancelled());  assertTrue(future.isDone());}  }
class C{  private StorageManager createStorageManager(){  if (configuration.isPersistenceEnabled()) {    if (configuration.getStoreConfiguration() != null && configuration.getStoreConfiguration().getStoreType() == StoreConfiguration.StoreType.DATABASE) {      return new JDBCJournalStorageManager(configuration,getScheduledPool(),executorFactory,shutdownOnCriticalIO);    } else {      return new JournalStorageManager(configuration,executorFactory,scheduledPool,shutdownOnCriticalIO);    }  }  return new NullStorageManager();}  }
class C{  public void cancelUpdate(){  if (!isConnected()) {    onError(OneSheeldError.DEVICE_NOT_CONNECTED);    return;  }  stopFirmwareUpdateThreads();  prepareForFirmwareUpdateEnd();}  }
class C{  private NavigationItem listSharedBoomarks(AppContext userContext,NavigationQuery query,String parent,String[] filters,HierarchyMode hierarchyMode,List<NavigationItem> content) throws ScopeException {  String fullPath=Bookmark.SEPARATOR + Bookmark.Folder.SHARED;  NavigationItem parentFolder=null;  if (parent.equals(SHARED_FOLDER.getSelfRef())) {    parentFolder=createLinkableFolder(userContext,query,SHARED_FOLDER);  } else {    fullPath+=parent.substring(SHARED_FOLDER.getSelfRef().length());    String name=parent.substring(parent.lastIndexOf("/"));    String grandParent=parent.substring(0,parent.lastIndexOf("/"));    parentFolder=new NavigationItem(name,"",grandParent,parent,NavigationItem.FOLDER_TYPE);  }  listBoomarks(userContext,query,parent,filters,hierarchyMode,fullPath,content);  return parentFolder;}  }
class C{  private void goToMaster(){  if (logger.isDebugEnabled()) {    logger.debug("Transitioning to MASTER role");  }  cntTransitionToMaster.increment();  IClosableIterator<Map.Entry<String,Versioned<DeviceSyncRepresentation>>> iter=null;  try {    iter=storeClient.entries();  } catch (  SyncException e) {    cntSyncException.increment();    logger.error("Failed to read devices from sync store",e);    return;  }  try {    while (iter.hasNext()) {      Versioned<DeviceSyncRepresentation> versionedDevice=iter.next().getValue();      DeviceSyncRepresentation storedDevice=versionedDevice.getValue();      if (storedDevice == null)       continue;      cntDevicesFromStore.increment();      for (      SyncEntity se : storedDevice.getEntities()) {        learnDeviceByEntity(se.asEntity());      }    }  }  finally {    if (iter != null)     iter.close();  }  storeConsolidateTask.reschedule(initialSyncStoreConsolidateMs,TimeUnit.MILLISECONDS);}  }
class C{  public static RawHeaders fromNameValueBlock(List<String> nameValueBlock) throws IOException {  if (nameValueBlock.size() % 2 != 0) {    throw new IllegalArgumentException("Unexpected name value block: " + nameValueBlock);  }  String status=null;  String version=null;  RawHeaders result=new RawHeaders();  for (int i=0; i < nameValueBlock.size(); i+=2) {    String name=nameValueBlock.get(i);    String values=nameValueBlock.get(i + 1);    for (int start=0; start < values.length(); ) {      int end=values.indexOf('\0',start);      if (end == -1) {        end=values.length();      }      String value=values.substring(start,end);      if (":status".equals(name)) {        status=value;      } else       if (":version".equals(name)) {        version=value;      } else {        result.namesAndValues.add(name);        result.namesAndValues.add(value);      }      start=end + 1;    }  }  if (status == null)   throw new ProtocolException("Expected ':status' header not present");  if (version == null)   throw new ProtocolException("Expected ':version' header not present");  result.setStatusLine(version + " " + status);  return result;}  }
class C{  public static void deleteStatement(ArrayList<File> list,File dir) throws FileNotFoundException {  for (int i=0; i < list.size(); i++) {    ArrayList<String> lines=new ArrayList<>();    try (Scanner input=new Scanner(list.get(i))){      while (input.hasNext()) {        lines.add(input.nextLine());      }    }     lines.remove(0);    try (PrintWriter output=new PrintWriter(list.get(i))){      for (int j=0; j < lines.size(); j++) {        output.println(lines.get(j));      }    }   }}  }
class C{  public VirtualStackSlot makeLockSlot(int lockDepth){  if (locks == EMPTY) {    locks=new AllocatableValue[lockDepth + 1];  } else   if (locks.length < lockDepth + 1) {    locks=Arrays.copyOf(locks,lockDepth + 1);  }  if (locks[lockDepth] == null) {    locks[lockDepth]=frameMapBuilder.allocateSpillSlot(slotKind);  }  return (VirtualStackSlot)locks[lockDepth];}  }
class C{  public Vertex lastRelationship(Vertex type){  if (getRelationships().get(type) == null) {    return null;  }  int max=0;  Relationship last=null;  for (  Relationship relationship : getRelationships(type)) {    if (relationship.getIndex() >= max) {      max=relationship.getIndex();      last=relationship;    }  }  if (last == null) {    return null;  }  if ((last.getIndex() + 1) != getRelationships(type).size()) {    this.network.getBot().log(this,"Corrupted relationship index detected, correcting",Level.FINE,type);    fixRelationships(type);  }  return last.getTarget();}  }
class C{  public int compare(Object o1,Object o2){  if (!(o1 instanceof SimpleItypeConfig) || o1 == null)   throw new RuntimeException("Object o1 must be of type SimpleItypeConfig and cannot be null");  if (!(o2 instanceof SimpleItypeConfig) || o2 == null)   throw new RuntimeException("Object o2 must be of type SimpleItypeConfig and cannot be null");  SimpleItypeConfig sic1=(SimpleItypeConfig)o1;  SimpleItypeConfig sic2=(SimpleItypeConfig)o2;  ItypeDesc id1=sic1.getItype();  if (id1 == null)   throw new RuntimeException("Object o1 does not have an assigned Itype");  ItypeDesc id2=sic2.getItype();  if (id2 == null)   throw new RuntimeException("Object o2 does not have an assigned Itype");  int itype1=id1.getItype().intValue();  int itype2=id2.getItype().intValue();  int retValue=0;  if (itype1 > itype2)   retValue=1;  if (itype1 < itype2)   retValue=-1;  return retValue;}  }
class C{  DirectArrayOfDoublesCompactSketch(final ArrayOfDoublesUpdatableSketch sketch,final Memory dstMem){  super(sketch.getNumValues());  checkIfEnoughMemory(dstMem,sketch.getRetainedEntries(),sketch.getNumValues());  mem_=dstMem;  mem_.putByte(PREAMBLE_LONGS_BYTE,(byte)1);  mem_.putByte(SERIAL_VERSION_BYTE,serialVersionUID);  mem_.putByte(FAMILY_ID_BYTE,(byte)Family.TUPLE.getID());  mem_.putByte(SKETCH_TYPE_BYTE,(byte)SerializerDeserializer.SketchType.ArrayOfDoublesCompactSketch.ordinal());  boolean isBigEndian=ByteOrder.nativeOrder().equals(ByteOrder.BIG_ENDIAN);  isEmpty_=sketch.isEmpty();  int count=sketch.getRetainedEntries();  mem_.putByte(FLAGS_BYTE,(byte)((isBigEndian ? 1 << Flags.IS_BIG_ENDIAN.ordinal() : 0) | (isEmpty_ ? 1 << Flags.IS_EMPTY.ordinal() : 0) | (count > 0 ? 1 << Flags.HAS_ENTRIES.ordinal() : 0)));  mem_.putByte(NUM_VALUES_BYTE,(byte)numValues_);  mem_.putShort(SEED_HASH_SHORT,Util.computeSeedHash(sketch.getSeed()));  theta_=sketch.getThetaLong();  mem_.putLong(THETA_LONG,theta_);  if (count > 0) {    mem_.putInt(RETAINED_ENTRIES_INT,sketch.getRetainedEntries());    int keyOffset=ENTRIES_START;    int valuesOffset=keyOffset + SIZE_OF_KEY_BYTES * sketch.getRetainedEntries();    ArrayOfDoublesSketchIterator it=sketch.iterator();    while (it.next()) {      mem_.putLong(keyOffset,it.getKey());      mem_.putDoubleArray(valuesOffset,it.getValues(),0,numValues_);      keyOffset+=SIZE_OF_KEY_BYTES;      valuesOffset+=SIZE_OF_VALUE_BYTES * numValues_;    }  }}  }
class C{  public void onShown(Snackbar snackbar){  ReactSnackbarModule.this.sendEvent(EVENT_SHOWN,null);  if (length > Snackbar.LENGTH_INDEFINITE) {switch (length) {case Snackbar.LENGTH_SHORT:      setupDelayedHideEvent(DURATION_SHORT_MS);    break;case Snackbar.LENGTH_LONG:  setupDelayedHideEvent(DURATION_LONG_MS);break;default :setupDelayedHideEvent(length);}}}  }
class C{  public PrincipalImpl(String user){  this.user=user;}  }
class C{  protected void reviseData(int version,Representation rep){  if (rep != null) {    rep.setVersion(new Integer(version));    rep.convert();  }}  }
class C{  private TimeoutHandler(){  Thread t=new Thread(this,"TimeoutHandler");  t.setDaemon(true);  t.start();}  }
class C{  @Override protected int computeHeight(){  return 2;}  }
class C{  private void saveIdentity(){  Document doc=new Document();  doc.setRootElement(new Element(ROOT_ELEMENT));  Element identityElement=new Element(NODE_IDENTITY);  Element formerIdentitiesElement=new Element(FORMER_IDENTITIES);  if (this.identity == null) {    this.getIdentity(false);  }  identityElement.setAttribute(NODE_IDENTITY,this.identity);  this.formerIdentities.stream().forEach(null);  doc.getRootElement().addContent(identityElement);  doc.getRootElement().addContent(formerIdentitiesElement);  try (Writer w=new OutputStreamWriter(new FileOutputStream(this.identityFile()),"UTF-8")){    XMLOutputter fmt=new XMLOutputter();    fmt.setFormat(Format.getPrettyFormat().setLineSeparator(System.getProperty("line.separator")).setTextMode(Format.TextMode.PRESERVE));    fmt.output(doc,w);  } catch (  IOException ex) {    log.error("Unable to store node identities: {}",ex.getLocalizedMessage());  }}  }
class C{  public String docValidate(PO po,int type){  log.info("Replicate the Document = " + po.get_TableName() + " with Type = "+ type);  String result=null;  if (expHelper != null) {    try {      if (type == TIMING_AFTER_COMPLETE || type == TIMING_AFTER_CLOSE || type == TIMING_AFTER_REVERSECORRECT || type == TIMING_AFTER_VOID || type == TIMING_AFTER_REACTIVATE) {        X_AD_ReplicationDocument replicationDocument=null;        int C_DocType_ID=po.get_ValueAsInt("C_DocType_ID");        if (C_DocType_ID > 0) {          replicationDocument=MReplicationStrategy.getReplicationDocument(po.getCtx(),m_AD_ReplicationStrategy_ID,po.get_Table_ID(),C_DocType_ID);        } else {          replicationDocument=MReplicationStrategy.getReplicationDocument(po.getCtx(),m_AD_ReplicationStrategy_ID,po.get_Table_ID());        }        if (replicationDocument != null) {          expHelper.exportRecord(po,MReplicationStrategy.REPLICATION_DOCUMENT,replicationDocument.getReplicationType(),type);        }      }    } catch (    Exception e) {      e.printStackTrace();      result=e.toString();    }  }  return result;}  }
class C{  private Consts(){}  }
class C{  private void addNode(final INaviViewNode node){  graph.addNode(node);  for (  final INaviViewListener listener : listeners) {    try {      listener.addedNode(view,node);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  @Override public boolean retryMethod(final HttpMethod method,final IOException exception,final int executionCount){  if (method == null) {    throw new IllegalArgumentException("HTTP method may not be null");  }  if (exception == null) {    throw new IllegalArgumentException("Exception parameter may not be null");  }  if (method instanceof HttpMethodBase) {    if (((HttpMethodBase)method).isAborted()) {      return false;    }  }  if (executionCount > retryCount) {    return false;  }  if (exception instanceof NoHttpResponseException) {    return true;  }  if (exception instanceof InterruptedIOException || exception instanceof SocketException) {    return !method.isRequestSent();  }  if (exception instanceof UnknownHostException) {    return false;  }  if (exception instanceof NoRouteToHostException) {    return false;  }  if (SSL_HANDSHAKE_EXCEPTION != null && SSL_HANDSHAKE_EXCEPTION.isInstance(exception)) {    return false;  }  if (!method.isRequestSent() || requestSentRetryEnabled) {    return true;  }  return false;}  }
class C{  private static Bitmap loadBitmap(ImageSource source,int scale) throws ImageLoadException {  return source.loadBitmap(scale);}  }
class C{  static int hasher(Object x){  return System.identityHashCode(x);}  }
class C{  public pre(String value){  addElement(value);}  }
class C{  public SshPairImpl generatePair(String owner,String service,String name) throws ServerException, ConflictException {  KeyPair keyPair;  try {    keyPair=KeyPair.genKeyPair(genJSch,2,2048);  } catch (  JSchException e) {    throw new ServerException("Failed to generate ssh pair.",e);  }  ByteArrayOutputStream privateBuff=new ByteArrayOutputStream();  keyPair.writePrivateKey(privateBuff);  ByteArrayOutputStream publicBuff=new ByteArrayOutputStream();  keyPair.writePublicKey(publicBuff,null);  final SshPairImpl generatedSshPair=new SshPairImpl(owner,service,name,publicBuff.toString(),privateBuff.toString());  sshDao.create(generatedSshPair);  return generatedSshPair;}  }
class C{  protected void notifyScrollingListenersAboutStart(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingStarted(this);  }}  }
class C{  private synchronized void processAutoWalk(final Direction direction,final User user){  RPAction walkAction=new RPAction();  final boolean facing=direction == user.getDirection();  if (!facing) {    RPAction faceAction=new RPAction();    faceAction.put(TYPE,FACE);    faceAction.put(DIR,direction.get());    this.client.send(faceAction);  }  if (!user.getRPObject().has(AUTOWALK)) {    walkAction.put(TYPE,WALK);  } else   if (facing) {    walkAction.put(TYPE,WALK);    walkAction.put(MODE,"stop");  }  if (walkAction.has(TYPE)) {    this.client.send(walkAction);  }}  }
class C{  private static void hasRequiredFields(AbstractMessage message){  requireAllFieldsExcept(message);}  }
class C{  @SuppressWarnings("unchecked") public final void testSetValidators(){  CharSequence errorMessage="errorMessage";  Validator<Object> validator1=new AbstractValidatorImplementation("foo",true);  Validator<Object> validator2=new AbstractValidatorImplementation("bar",true);  Validator<Object>[] validators1=new Validator[1];  validators1[0]=validator1;  Validator<Object>[] validators2=new Validator[2];  validators2[0]=validator1;  validators2[1]=validator2;  DisjunctiveValidator<Object> disjunctiveValidator=new DisjunctiveValidator<>(errorMessage,validators1);  disjunctiveValidator.setValidators(validators2);  assertEquals(validators2,disjunctiveValidator.getValidators());}  }
class C{  public GetPlansSubset(Scenario sc,Collection<Id<Person>> ids){  this(sc,ids,false);}  }
class C{  public Float parseFloat() throws SyntaxError {  String str=parseArg();  if (argWasQuoted())   throw new SyntaxError("Expected float instead of quoted string:" + str);  float value=Float.parseFloat(str);  return value;}  }
class C{  public Builder penaltyLog(){  return enable(PENALTY_LOG);}  }
class C{  public void testJunk() throws Exception {  doTest(true);}  }
class C{  Map<String,ClassReader> findDeps(Map<String,ClassReader> zipClasses,Map<String,ClassReader> inOutKeepClasses){  TreeMap<String,ClassReader> deps=new TreeMap<String,ClassReader>();  TreeMap<String,ClassReader> new_deps=new TreeMap<String,ClassReader>();  TreeMap<String,ClassReader> new_keep=new TreeMap<String,ClassReader>();  TreeMap<String,ClassReader> temp=new TreeMap<String,ClassReader>();  DependencyVisitor visitor=getVisitor(zipClasses,inOutKeepClasses,new_keep,deps,new_deps);  for (  ClassReader cr : inOutKeepClasses.values()) {    cr.accept(visitor,0);  }  while (new_deps.size() > 0 || new_keep.size() > 0) {    deps.putAll(new_deps);    inOutKeepClasses.putAll(new_keep);    temp.clear();    temp.putAll(new_deps);    temp.putAll(new_keep);    new_deps.clear();    new_keep.clear();    mLog.debug("Found %1$d to keep, %2$d dependencies.",inOutKeepClasses.size(),deps.size());    for (    ClassReader cr : temp.values()) {      cr.accept(visitor,0);    }  }  mLog.info("Found %1$d classes to keep, %2$d class dependencies.",inOutKeepClasses.size(),deps.size());  return deps;}  }
class C{  private PrincipalId addUser(String tenantName,String userName,PersonDetail detail,String extIdpEntityId,String extUserId,char[] password) throws Exception {  try {    ValidateUtil.validateNotEmpty(tenantName,"tenantName");    ValidateUtil.validateNotNull(userName,"user name");    checkInvalidCharForUserData(userName,INVALID_CHARS_FOR_USER_ID);    ValidateUtil.validateNotNull(detail,"user detail");    checkInvalidCharForUserData(detail.getFirstName(),INVALID_CHARS_FOR_USER_DETAIL);    checkInvalidCharForUserData(detail.getLastName(),INVALID_CHARS_FOR_USER_DETAIL);    checkInvalidCharForUserData(detail.getDescription(),INVALID_CHARS_FOR_USER_DETAIL);    ValidateUtil.validateNotNull(detail,"user detail");    if (!ValidateUtil.isEmpty(extIdpEntityId)) {      ValidateUtil.validateNotEmpty(extUserId,"external user id.");    }    TenantInformation tenantInfo=findTenant(tenantName);    ServerUtils.validateNotNullTenant(tenantInfo,tenantName);    ISystemDomainIdentityProvider provider=tenantInfo.findSystemProvider();    ServerUtils.validateNotNullSystemIdp(provider,tenantName);    return provider.addUser(userName,detail,password,extIdpEntityId,extUserId);  } catch (  ConstraintViolationLdapException e) {    logger.warn(String.format("provided password for user [%s] violates password policy constraint for tenant [%s]",userName,tenantName),e);    throw new PasswordPolicyViolationException(e.getMessage(),e);  }catch (  Exception ex) {    logger.error(String.format("Failed to add user [%s] in tenant [%s]",userName,tenantName));    throw ex;  }}  }
class C{  @Override public int read(byte[] b,int off,int len) throws IOException {  if (paused) {    try {      Thread.sleep(1000);    } catch (    InterruptedException e) {      e.printStackTrace();    }    return 0;  }  int ret=in.read(b,off,len);  return ret;}  }
class C{  public TextStyle literalTextStyle(){  TextStyle textStyle=defaultTextStyle().copy();  textStyle.setColor(new RGB(0,0,255));  return textStyle;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(Scheduler.getInstance().areThereDontKnows());}  }
class C{  public void testCanonicalUserOptions(){  if (!m_OptionTester.checkCanonicalUserOptions()) {    fail("setOptions method failed");  }}  }
class C{  public void testSteensBug() throws Exception {  Document document=getDocument("/xml/schema/personal.xsd");  String xpath="/xs:schema/xs:element[@name='person']";  assertNotNull("element is null",document.selectSingleNode(xpath));  Element root=document.getRootElement();  assertNotNull("element is null",root.selectSingleNode(xpath));}  }
class C{  private static void parseComposite(URI uri,CompositeData rc,String ssp) throws URISyntaxException {  String componentString;  String params;  if (!checkParenthesis(ssp)) {    throw new URISyntaxException(uri.toString(),"Not a matching number of '(' and ')' parenthesis");  }  int p;  int initialParen=ssp.indexOf("(");  if (initialParen == 0) {    rc.host=ssp.substring(0,initialParen);    p=rc.host.indexOf("/");    if (p >= 0) {      rc.path=rc.host.substring(p);      rc.host=rc.host.substring(0,p);    }    p=indexOfParenthesisMatch(ssp,initialParen);    componentString=ssp.substring(initialParen + 1,p);    params=ssp.substring(p + 1).trim();  } else {    componentString=ssp;    params="";  }  String[] components=splitComponents(componentString);  rc.components=new URI[components.length];  for (int i=0; i < components.length; i++) {    rc.components[i]=new URI(components[i].trim());  }  p=params.indexOf("?");  if (p >= 0) {    if (p > 0) {      rc.path=stripPrefix(params.substring(0,p),"/");    }    rc.parameters=parseQuery(params.substring(p + 1));  } else {    if (params.length() > 0) {      rc.path=stripPrefix(params,"/");    }    rc.parameters=emptyMap();  }}  }
class C{  public void measureInWindow(int tag,int[] outputBuffer){  UiThreadUtil.assertOnUiThread();  View v=mTagsToViews.get(tag);  if (v == null) {    throw new NoSuchNativeViewException("No native view for " + tag + " currently exists");  }  v.getLocationOnScreen(outputBuffer);  Resources resources=v.getContext().getResources();  int statusBarId=resources.getIdentifier("status_bar_height","dimen","android");  if (statusBarId > 0) {    int height=(int)resources.getDimension(statusBarId);    outputBuffer[1]-=height;  }  outputBuffer[2]=v.getWidth();  outputBuffer[3]=v.getHeight();}  }
class C{  public void constValueIndex(boolean value) throws IOException {  constValueIndex('Z',pool.addIntegerInfo(value ? 1 : 0));}  }
class C{  public static <T>T withInputStream(URL url,@ClosureParams(value=SimpleType.class,options="java.io.InputStream") Closure<T> closure) throws IOException {  return IOGroovyMethods.withStream(newInputStream(url),closure);}  }
class C{  private int makePrediction(int k,Instance inst) throws Exception {  double result=0;  for (int i=0; i < k; i++) {    if (m_IsAddition[i]) {      result+=innerProduct(m_Train.instance(m_Additions[i]),inst);    } else {      result-=innerProduct(m_Train.instance(m_Additions[i]),inst);    }  }  if (result < 0) {    return 0;  } else {    return 1;  }}  }
class C{  public BigIntegerMapperBuilder digits(Integer digits){  this.digits=digits;  return this;}  }
class C{  private static Image createBlankThumbnail(final int w,final int h){  final Canvas canvas=new Canvas(w,h);  final GraphicsContext gc=canvas.getGraphicsContext2D();  gc.setFill(Color.WHITE);  gc.fillRect(0.2,0.2,w - .5,h - .5);  gc.setFill(Color.BLACK);  gc.strokeRect(0.2,0.2,w - .5,h - .5);  gc.strokeLine(0,0,w,h);  gc.strokeLine(0,h,w,0);  return canvas.snapshot(null,null);}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  try {    compiledPattern=compile(pattern);  } catch (  Exception e) {    throw new InvalidObjectException("invalid pattern");  }  if (serialVersionOnStream < 1) {    initializeDefaultCentury();  } else {    parseAmbiguousDatesAsAfter(defaultCenturyStart);  }  serialVersionOnStream=currentSerialVersion;  TimeZone tz=getTimeZone();  if (tz instanceof SimpleTimeZone) {    String id=tz.getID();    TimeZone zi=TimeZone.getTimeZone(id);    if (zi != null && zi.hasSameRules(tz) && zi.getID().equals(id)) {      setTimeZone(zi);    }  }}  }
class C{  public void addToken(Segment segment,int start,int end,int tokenType,int startOffset){  addToken(segment.array,start,end,tokenType,startOffset);}  }
class C{  private DateBuilder(Locale lc){  Calendar cal=Calendar.getInstance(lc);  this.lc=lc;  month=cal.get(Calendar.MONTH) + 1;  day=cal.get(Calendar.DAY_OF_MONTH);  year=cal.get(Calendar.YEAR);  hour=cal.get(Calendar.HOUR_OF_DAY);  minute=cal.get(Calendar.MINUTE);  second=cal.get(Calendar.SECOND);}  }
class C{  protected void addStatementPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Execution_statement_feature"),getString("_UI_PropertyDescriptor_description","_UI_Execution_statement_feature","_UI_Execution_type"),SexecPackage.Literals.EXECUTION__STATEMENT,true,false,true,null,null,null));}  }
class C{  private void refill(){  if (bufferLen > 64) {    int last=bufferLen - 1;    buffer[0]=buffer[last];    startOffset[0]=startOffset[last];    endOffset[0]=endOffset[last];    bufferLen=1;    index-=last;  }  char termBuffer[]=termAtt.buffer();  int len=termAtt.length();  int start=offsetAtt.startOffset();  int end=offsetAtt.endOffset();  int newSize=bufferLen + len;  buffer=ArrayUtil.grow(buffer,newSize);  startOffset=ArrayUtil.grow(startOffset,newSize);  endOffset=ArrayUtil.grow(endOffset,newSize);  lastEndOffset=end;  if (end - start != len) {    for (int i=0, cp=0; i < len; i+=Character.charCount(cp)) {      cp=buffer[bufferLen]=Character.codePointAt(termBuffer,i,len);      startOffset[bufferLen]=start;      endOffset[bufferLen]=end;      bufferLen++;    }  } else {    for (int i=0, cp=0, cpLen=0; i < len; i+=cpLen) {      cp=buffer[bufferLen]=Character.codePointAt(termBuffer,i,len);      cpLen=Character.charCount(cp);      startOffset[bufferLen]=start;      start=endOffset[bufferLen]=start + cpLen;      bufferLen++;    }  }}  }
class C{  public static InputMethodListener add(InputMethodListener a,InputMethodListener b){  return (InputMethodListener)addInternal(a,b);}  }
class C{  public ProcessExecutionUserErrorError(Operator operator,UserError cause){  super(operator,971,cause.getOperator() != null ? cause.getOperator().getName() : "unknown",operator.getName(),cause.getMessage());  this.cause=cause;}  }
class C{  public boolean isSpeedControllerAvailable(int displaySlider){switch (displaySlider) {case STEPDISPLAY:    return (speedSpinner != null);case SLIDERDISPLAY:  return (speedSlider != null);case SLIDERDISPLAYCONTINUOUS:return (speedSliderContinuous != null);default :return false;}}  }
class C{  public static void isInteger(String member,String inputValue) throws ValidationException {  if (!GenericValidator.isInt(inputValue)) {    ValidationException vf=new ValidationException(ReasonEnum.INTEGER,member,new Object[]{inputValue});    logValidationFailure(vf);    throw vf;  }}  }
class C{  public void addClosureOf(IRule rule){  if (rule == null)   throw new IllegalArgumentException();  addClosureOf(new IRule[]{rule});}  }
class C{  private void populateWorkflowParameters(Job job,Map<String,Object> variables){  List<Parameter> parameters=new ArrayList<>();  for (  Entry<String,Object> paramEntry : variables.entrySet()) {    Parameter parameter=new Parameter(paramEntry.getKey(),paramEntry.getValue() == null ? null : paramEntry.getValue().toString());    jobDefinitionHelper.maskPassword(parameter);    parameters.add(parameter);  }  job.setParameters(parameters);}  }
class C{  public void undoDelete() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public ByteVector putByteArray(final byte[] b,final int off,final int len){  if (length + len > data.length) {    enlarge(len);  }  if (b != null) {    System.arraycopy(b,off,data,length,len);  }  length+=len;  return this;}  }
class C{  public void insert(double min,double max,Object item){  if (root != null)   throw new IllegalStateException("Index cannot be added to once it has been queried");  leaves.add(new IntervalRTreeLeafNode(min,max,item));}  }
class C{  public void declareExtensions(ExtensionProfile extProfile){  extProfile.declare(CellEntry.class,Cell.getDefaultDescription(false));}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>ImmutableListMultimap<K,V> of(){  return (ImmutableListMultimap<K,V>)EmptyImmutableListMultimap.INSTANCE;}  }
class C{  private AutoTieringPolicy checkAutoTieringPolicyExistsInDB(String nativeGuid){  AutoTieringPolicy autoTieringPolicy=null;  URIQueryResultList queryResult=new URIQueryResultList();  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getAutoTieringPolicyByNativeGuidConstraint(nativeGuid),queryResult);  if (queryResult.iterator().hasNext()) {    autoTieringPolicy=_dbClient.queryObject(AutoTieringPolicy.class,queryResult.iterator().next());  }  return autoTieringPolicy;}  }
class C{  public void testSendLocalNoWindowScale(){  PseudoTcpTestTransfer test=new PseudoTcpTestTransfer();  test.setLocalMtu(1500);  test.setRemoteMtu(1500);  test.setRemoteOptRcvBuf(100000);  test.disableLocalWindowScale();  test.doTestTransfer(1000000);}  }
class C{  public IntentBuilder chronoType(ChronoType type){  result.putExtra(EXTRA_CHRONOTYPE,type);  return (this);}  }
class C{  public void validate(String domainLabel) throws InvalidChecksumException {  String tcnId=getNoticeId().getTcnId();  checkArgument(tcnId.length() == 27);  int checksum=Ints.fromByteArray(base16().decode(Ascii.toUpperCase(tcnId.substring(0,8))));  String noticeId=tcnId.substring(8);  checkArgument(CharMatcher.inRange('0','9').matchesAllOf(noticeId));  String stringToHash=domainLabel + MILLISECONDS.toSeconds(getExpirationTime().getMillis()) + noticeId;  int computedChecksum=crc32().hashString(stringToHash,UTF_8).asInt();  if (checksum != computedChecksum) {    throw new InvalidChecksumException();  }}  }
class C{  public JSONTokener(String s){  this(new StringReader(s));}  }
class C{  protected ConfiguratorDescriptor read(final Element element,final String className){  return new ConfiguratorDescriptor(className);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (code_1: ");  result.append(code_1);  result.append(')');  return result.toString();}  }
class C{  private static String splitUrl(String url){  if (url.length() > MAX_URL_LENGTH) {    return url.substring(0,MAX_URL_LENGTH) + " " + splitUrl(url.substring(MAX_URL_LENGTH));  }  return url;}  }
class C{  public static List<String[]> createOverridesContent(List<Assignment> overrides,String labelingScheme){  Vector<String[]> resultContent=new Vector<String[]>(overrides.size());  String[] content;  String id;  Assignment formula;  SpecObj specObj=ToolboxHandle.getCurrentSpec().getValidRootModule();  if (specObj == null) {    return resultContent;  }  OpDefNode[] opDefNodes=specObj.getExternalModuleTable().getRootModule().getOpDefs();  Hashtable<String,OpDefNode> nodeTable=new Hashtable<String,OpDefNode>(opDefNodes.length);  for (int j=0; j < opDefNodes.length; j++) {    String key=opDefNodes[j].getName().toString();    nodeTable.put(key,opDefNodes[j]);  }  for (int i=0; i < overrides.size(); i++) {    id=getValidIdentifier(labelingScheme);    formula=overrides.get(i);    OpDefNode defNode=nodeTable.get(formula.getLabel());    if (defNode == null) {      content=null;    } else {      OpDefNode source=defNode.getSource();      if (source == defNode) {        if (formula.isModelValue() && !formula.isSetOfModelValues()) {          content=new String[]{formula.getLabel() + EQ + formula.getLabel(),EMPTY_STRING};        } else {          content=new String[]{formula.getLabel() + ARROW + id,formula.getParametrizedLabel(id) + DEFINES_CR + formula.getRight()};        }      } else       if (source.getSource() == source) {        if (formula.isModelValue() && !formula.isSetOfModelValues()) {          content=new String[]{source.getName().toString() + ARROW + "["+ source.getOriginallyDefinedInModuleNode().getName().toString()+ "]"+ id+ " "+ id+ EQ+ source.getName().toString(),"CONSTANT " + id};        } else {          content=new String[]{source.getName().toString() + ARROW + "["+ source.getOriginallyDefinedInModuleNode().getName().toString()+ "]"+ id,formula.getParametrizedLabel(id) + DEFINES_CR + formula.getRight()};        }      } else {        content=null;      }    }    resultContent.add(content);  }  return resultContent;}  }
class C{  public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {  if (dataToEncode == null) {    throw new NullPointerException("Data to encode was null.");  }  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  private void writeLocalCSV(MedtronicSensorRecord mostRecentData,Context context){  try {    if (mostRecentData == null || mostRecentData.bGValue == null)     log.debug("writeLocalCSV SAVING  EMPTY!!"); else     log.debug("writeLocalCSV SAVING --> " + mostRecentData.bGValue);    ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(new File(context.getFilesDir(),"save.bin")));    oos.writeObject(mostRecentData);    oos.flush();    oos.close();  } catch (  Exception e) {    Log.e(TAG,"write to OutputStream failed",e);    log.error("write to OutputStream failed",e);  }}  }
class C{  public static double pdf(double x,double n){  return pdf(x,n / 2.0,2.0);}  }
class C{  public static byte[] encodeBase64Chunked(final byte[] binaryData){  return encodeBase64(binaryData,true);}  }
class C{  private void ensureActionMethods(States states) throws Exception {  String clazz=states.getActionClass();  for (  State s : states.getStates()) {    if (isFinal(s)) {      continue;    }    Method method=loadMethod(clazz,s);    assertNotNull(method);    assertNotNull(method.getName() + " is missing @StateMachineAction annotation",method.getAnnotation(StateMachineAction.class));  }}  }
class C{  private void initSkinLoader(){  SkinManager.getInstance().init(this);  SkinManager.getInstance().load();}  }
class C{  public UserEntry(BaseEntry sourceEntry){  super(sourceEntry);  getCategories().add(USER_CATEGORY);}  }
class C{  @Override public Automaton<LR1Item,LR1State> createAutomaton() throws GeneratorException {  return new LALR1ParallelAutomatonFactory().createAutomaton(this,grammarInfo,numThreads);}  }
class C{  void dissociateLedger(BufferLedger ledger){  assertOpen();  if (DEBUG) {synchronized (DEBUG_LOCK) {      if (!childLedgers.containsKey(ledger)) {        throw new IllegalStateException("Trying to remove a child ledger that doesn't exist.");      }      childLedgers.remove(ledger);    }  }}  }
class C{  public static String segmentFileName(String segmentName,String segmentSuffix,String ext){  if (ext.length() > 0 || segmentSuffix.length() > 0) {    assert !ext.startsWith(".");    StringBuilder sb=new StringBuilder(segmentName.length() + 2 + segmentSuffix.length()+ ext.length());    sb.append(segmentName);    if (segmentSuffix.length() > 0) {      sb.append('_').append(segmentSuffix);    }    if (ext.length() > 0) {      sb.append('.').append(ext);    }    return sb.toString();  } else {    return segmentName;  }}  }
class C{  public Document newDocument(String docType,String rootNode){  m_Document=getBuilder().newDocument();  m_Document.appendChild(m_Document.createElement(rootNode));  setDocType(docType);  return getDocument();}  }
class C{  public GifAnimationMetaData(@NonNull Resources res,@DrawableRes @RawRes int id) throws Resources.NotFoundException, IOException {  this(res.openRawResourceFd(id));}  }
class C{  public void reset(final String name){  mName=name;}  }
class C{  public boolean isSigned(){  return signed;}  }
class C{  protected void actualizarFechasExtremas(){  if (fechaInicial == null || fechaFinal == null) {    CustomDateRange range=service.lookupGestionFondosBI().getFechasExtremas(id);    fechaInicial=range.getInitialDate();    fechaFinal=range.getFinalDate();  }  GestionDescripcionBI descripcionBI=service.lookupGestionDescripcionBI();  if (fechaInicial != null)   descripcionBI.actualizaCampo(TipoFicha.FICHA_ELEMENTO_CF,new CampoFechaVO(id,ID_CAMPO_FECHA_INICIAL,1,fechaInicial,ValorCampoGenericoVOBase.TIPO_ELEMENTO_INDEFINIDO)); else   descripcionBI.vaciaCampo(TipoFicha.FICHA_ELEMENTO_CF,ValorCampoGenericoVO.TIPO_FECHA,id,ID_CAMPO_FECHA_INICIAL);  if (fechaFinal != null)   descripcionBI.actualizaCampo(TipoFicha.FICHA_ELEMENTO_CF,new CampoFechaVO(id,ID_CAMPO_FECHA_FINAL,1,fechaFinal,ValorCampoGenericoVOBase.TIPO_ELEMENTO_INDEFINIDO)); else   descripcionBI.vaciaCampo(TipoFicha.FICHA_ELEMENTO_CF,ValorCampoGenericoVO.TIPO_FECHA,id,ID_CAMPO_FECHA_FINAL);}  }
class C{  public static String toString(final byte bits){  final byte[] d=new byte[]{bits};  final ByteBuffer b=ByteBuffer.wrap(d);  final BitVector v=new ByteBufferBitVector(b);  return v.toString();}  }
class C{  public static String generateStringOfCharacters(int count){  StringBuilder sb=new StringBuilder();  for (int i=0; i < count; i++) {    sb.append(CHARACTERS.charAt((int)(Math.random() * CHARACTERS.length())));  }  return sb.toString();}  }
class C{  @Override public List<Integer> emit(List<Object> tuple){  List<Object> t=_callback.apply(tuple,_context.cloneContext());  return _delegate.emit(t);}  }
class C{  public void removePairStateChangeListener(PropertyChangeListener l){synchronized (streamListeners) {    streamListeners.remove(l);  }}  }
class C{  public static Result restFlowExecResult(String flowExecId){  if (flowExecId == null || flowExecId.isEmpty()) {    return badRequest("No flow exec url provided.");  }  List<AppResult> results=AppResult.find.select("*").fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS,"*").fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS + "." + AppHeuristicResult.TABLE.APP_HEURISTIC_RESULT_DETAILS,"*").where().eq(AppResult.TABLE.FLOW_EXEC_ID,flowExecId).findList();  if (results.size() == 0) {    return notFound("Unable to find record on flow exec url: " + flowExecId);  }  Map<IdUrlPair,List<AppResult>> groupMap=ControllerUtil.groupJobs(results,ControllerUtil.GroupBy.JOB_EXECUTION_ID);  Map<String,List<AppResult>> resMap=new HashMap<String,List<AppResult>>();  for (  Map.Entry<IdUrlPair,List<AppResult>> entry : groupMap.entrySet()) {    IdUrlPair jobExecPair=entry.getKey();    List<AppResult> value=entry.getValue();    resMap.put(jobExecPair.getId(),value);  }  return ok(Json.toJson(resMap));}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ExpressionsPackage.DOUBLE_LITERAL__VALUE:    setValue((Double)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void removeChildAtIndex(int index){  this.children.remove(index);}  }
class C{  @Override public boolean equals(Object obj){  boolean result;  TrieNode node;  Enumeration<Character> keys;  Character key;  node=(TrieNode)obj;  if (getChar() == null) {    result=(node.getChar() == null);  } else {    result=getChar().equals(node.getChar());  }  if (result) {    keys=m_Children.keys();    while (keys.hasMoreElements()) {      key=keys.nextElement();      result=m_Children.get(key).equals(node.m_Children.get(key));      if (!result) {        break;      }    }  }  return result;}  }
class C{  public static MasterPrivateKey createFromEncryptedSeed(String passphrase,byte[] encryptedSeed) throws HyperLedgerException {  try {    byte[] key=SCrypt.generate(passphrase.getBytes("UTF-8"),BITCOIN_SEED,16384,8,8,32);    SecretKeySpec keyspec=new SecretKeySpec(key,"AES");    if (encryptedSeed.length != 32) {      throw new HyperLedgerException("Incorrect encrypted seed length");    }    Cipher cipher=Cipher.getInstance("AES/ECB/NoPadding","BC");    cipher.init(Cipher.DECRYPT_MODE,keyspec);    return create(cipher.doFinal(encryptedSeed));  } catch (  UnsupportedEncodingException|NoSuchPaddingException|NoSuchProviderException|NoSuchAlgorithmException|InvalidKeyException|BadPaddingException|IllegalBlockSizeException e) {    throw new HyperLedgerException(e);  }}  }
class C{  public void testCheckButNotFound(){  LOGGER.debug("check but not found");  initCheckerAndLaunch("src/test/resources/css/test1.css",null,TestSolution.NOT_APPLICABLE,null);}  }
class C{  public byte[] toByteArray(){  return data;}  }
class C{  public static boolean isIPv6Address(final String input){  return isIPv6StdAddress(input) || isIPv6HexCompressedAddress(input);}  }
class C{  public CountingIdlingResource(String resourceName){  this(resourceName,false);}  }
class C{  public boolean isEmpty(){  return this.expressions.isEmpty();}  }
class C{  public QueryWorkerJobStatus(String userID,ProjectPK projectPK,String jobID,String key,int ID,String SQL,long start,long elapse,long read,int chunks){  this.status=Status.READING;  this.userID=userID;  this.projectPK=projectPK;  this.jobID=jobID;  this.key=key;  this.ID=ID;  this.SQL=SQL;  this.elapse=elapse;  this.elapseTime=DurationFormatUtils.formatDurationHMS(elapse);  this.lineRead=read;  this.chunks=chunks;}  }
class C{  public void enableEffect(boolean enable){  CENTER.effect().setEnabled(enable);}  }
class C{  private InetAddress socksGetServerAddress() throws UnknownHostException {  String proxyName;  InetSocketAddress addr=(InetSocketAddress)proxy.address();  proxyName=addr.getHostName();  if (proxyName == null) {    proxyName=addr.getAddress().getHostAddress();  }  return InetAddress.getByName(proxyName);}  }
class C{  public void fireControlerScoringEvent(final int iteration){  ScoringEvent event=new ScoringEvent(this.controler,iteration);{    ScoringListener[] listener=this.coreListenerList.getListeners(ScoringListener.class);    for (    ScoringListener aListener : listener) {      log.info("calling notifyScoring on " + aListener.getClass().getCanonicalName());      aListener.notifyScoring(event);    }  }{    ScoringListener[] listener=this.listenerList.getListeners(ScoringListener.class);    for (    ScoringListener aListener : listener) {      log.info("calling notifyScoring on " + aListener.getClass().getCanonicalName());      aListener.notifyScoring(event);    }  }  log.info("[it." + iteration + "] all ControlerScoringListeners called.");}  }
class C{  public static String stringId(RelatedResourceRep ref){  return asString(id(ref));}  }
class C{  public static void eachByte(File self,int bufferLen,@ClosureParams(value=FromString.class,options="byte[],Integer") Closure closure) throws IOException {  BufferedInputStream is=newInputStream(self);  IOGroovyMethods.eachByte(is,bufferLen,closure);}  }
class C{  public void toggleTextFormatMenu(@Nullable MenuItem item){  View formatTextSliderView=findViewById(R.id.formatTextSlider);  View drawPanelSliderView=findViewById(R.id.drawPanelSlider);  if (formatTextSliderView.getVisibility() == View.VISIBLE) {    formatTextSliderView.setVisibility(View.GONE);  } else {    if (drawPanelSliderView.getVisibility() == View.VISIBLE) {      drawPanelSliderView.setVisibility(View.GONE);    }    formatTextSliderView.setVisibility(View.VISIBLE);  }  setDrawModeOn(formatTextSliderView.getVisibility() != View.VISIBLE && drawPanelSliderView.getVisibility() == View.VISIBLE);}  }
class C{  public double eval(double params[]){  return (Math.acos(1.0 / params[0]));}  }
class C{  public PaymentDeregistrationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static void enableSvcs(boolean enable){  ServiceDispatcher.enableSvcs=enable;}  }
class C{  public Acosh(){  super(Number.class,Number.class);}  }
class C{  public LocalDateTime plus(ReadableDuration duration){  return withDurationAdded(duration,1);}  }
class C{  public void execute(NodeCommunication nodeCommunication,RemoteNodeStatus status){  List<ExtractRequest> requests=getExtractRequestsForNode(nodeCommunication);  long ts=System.currentTimeMillis();  for (int i=0; i < requests.size() && (System.currentTimeMillis() - ts) <= Constants.LONG_OPERATION_THRESHOLD; i++) {    ExtractRequest request=requests.get(i);    Node identity=nodeService.findIdentity();    Node targetNode=nodeService.findNode(nodeCommunication.getNodeId());    log.info("Extracting batches for request {}. Starting at batch {}.  Ending at batch {}",new Object[]{request.getRequestId(),request.getStartBatchId(),request.getEndBatchId()});    List<OutgoingBatch> batches=outgoingBatchService.getOutgoingBatchRange(request.getStartBatchId(),request.getEndBatchId()).getBatches();    ProcessInfo processInfo=statisticManager.newProcessInfo(new ProcessInfoKey(identity.getNodeId(),nodeCommunication.getQueue(),nodeCommunication.getNodeId(),getProcessType()));    processInfo.setBatchCount(batches.size());    try {      boolean areBatchesOk=true;      for (      OutgoingBatch outgoingBatch : batches) {        if (outgoingBatch.getStatus() != Status.OK) {          areBatchesOk=false;          break;        }      }      if (!areBatchesOk) {        Channel channel=configurationService.getChannel(batches.get(0).getChannelId());        OutgoingBatch firstBatch=batches.get(0);        processInfo.setCurrentLoadId(firstBatch.getLoadId());        IStagedResource resource=getStagedResource(firstBatch);        if (resource != null && resource.exists() && resource.getState() != State.CREATE) {          resource.delete();        }        MultiBatchStagingWriter multiBatchStatingWriter=buildMultiBatchStagingWriter(request,identity,targetNode,batches,processInfo,channel);        extractOutgoingBatch(processInfo,targetNode,multiBatchStatingWriter,firstBatch,false,false,ExtractMode.FOR_SYM_CLIENT);      } else {        log.info("Batches already had an OK status for request {}, batches {} to {}.  Not extracting",new Object[]{request.getRequestId(),request.getStartBatchId(),request.getEndBatchId()});      }      List<OutgoingBatch> checkBatches=outgoingBatchService.getOutgoingBatchRange(request.getStartBatchId(),request.getEndBatchId()).getBatches();      areBatchesOk=true;      for (      OutgoingBatch outgoingBatch : checkBatches) {        if (outgoingBatch.getStatus() != Status.OK) {          areBatchesOk=false;          break;        }      }      ISqlTransaction transaction=null;      try {        transaction=sqlTemplate.startSqlTransaction();        updateExtractRequestStatus(transaction,request.getRequestId(),ExtractStatus.OK);        if (!areBatchesOk) {          for (          OutgoingBatch outgoingBatch : batches) {            if (parameterService.is(ParameterConstants.INITIAL_LOAD_EXTRACT_AND_SEND_WHEN_STAGED,false)) {              if (outgoingBatch.getStatus() == Status.RQ) {                outgoingBatch.setStatus(Status.NE);                outgoingBatchService.updateOutgoingBatch(transaction,outgoingBatch);              }            } else {              outgoingBatch.setStatus(Status.NE);              outgoingBatchService.updateOutgoingBatch(transaction,outgoingBatch);            }          }        } else {          log.info("Batches already had an OK status for request {}, batches {} to {}.  Not updating the status to NE",new Object[]{request.getRequestId(),request.getStartBatchId(),request.getEndBatchId()});        }        transaction.commit();        log.info("Done extracting {} batches for request {}",(request.getEndBatchId() - request.getStartBatchId()) + 1,request.getRequestId());      } catch (      Error ex) {        if (transaction != null) {          transaction.rollback();        }        throw ex;      }catch (      RuntimeException ex) {        if (transaction != null) {          transaction.rollback();        }        throw ex;      } finally {        close(transaction);      }      processInfo.setStatus(org.jumpmind.symmetric.model.ProcessInfo.Status.OK);    } catch (    RuntimeException ex) {      log.debug("Failed to extract batches for request {}. Starting at batch {}.  Ending at batch {}",new Object[]{request.getRequestId(),request.getStartBatchId(),request.getEndBatchId()});      processInfo.setStatus(org.jumpmind.symmetric.model.ProcessInfo.Status.ERROR);      throw ex;    }  }}  }
class C{  public String toString(){  return "{" + notif + ", "+ id+ "}";}  }
class C{  public SolutionUser findSolutionUserByCertDn(String tenantName,String subjectDN) throws Exception {  return getService().findSolutionUserByCertDn(tenantName,subjectDN,this.getServiceContext());}  }
class C{  public Intent putExtra(String name,boolean[] value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putBooleanArray(name,value);  return this;}  }
class C{  @Override public final boolean equals(Object other){  return (equalsMsg(other) == null);}  }
class C{  public boolean hasConcreteAccessorPair(){  return setter(CONCRETE) != null && getter(CONCRETE) != null;}  }
class C{  private Object readResolve() throws ObjectStreamException {  Object result=null;  if (this.equals(AreaRendererEndType.LEVEL)) {    result=AreaRendererEndType.LEVEL;  } else   if (this.equals(AreaRendererEndType.TAPER)) {    result=AreaRendererEndType.TAPER;  } else   if (this.equals(AreaRendererEndType.TRUNCATE)) {    result=AreaRendererEndType.TRUNCATE;  }  return result;}  }
class C{  public MenuInflater(Context context){  mContext=context;  mRealOwner=context;  mActionViewConstructorArguments=new Object[]{context};  mActionProviderConstructorArguments=mActionViewConstructorArguments;}  }
class C{  public JSONArray put(long value){  this.put(new Long(value));  return this;}  }
class C{  private void analize(){  FVarDef varDef=null;  try {    numVars=Integer.parseInt(tokenizer.nextToken());  } catch (  Exception e) {    numVars=0;  }  for (int i=0; i < numVars; i++) {    varDef=new FVarDef(tokenizer.nextToken());    varDefs.put(new Integer(i),varDef);  }}  }
class C{  protected SVGException createSVGException(short type,String key,Object[] args){  return ((SVGOMElement)element).createSVGException(type,key,args);}  }
class C{  public AnalyticsConfigData(String argTrackingCode){  this(argTrackingCode,VisitorData.newSession(WurstClient.INSTANCE.options.google_analytics.id,WurstClient.INSTANCE.options.google_analytics.first_launch,WurstClient.INSTANCE.options.google_analytics.last_launch,WurstClient.INSTANCE.options.google_analytics.launches));}  }
class C{  public boolean isLeaf(){  return children == null || children.isEmpty();}  }
class C{  public DateHistogramBuilder interval(long interval){  this.interval=interval;  return this;}  }
class C{  public boolean isZoomIn(){  return mZoomIn;}  }
class C{  public boolean isAccountAccessible(){  return isActive(getAccessWindowStart(),getAccessWindowEnd());}  }
class C{  public LongList(int capacity){  array=new long[capacity];  end=0;}  }
class C{  private boolean arrowScrollImpl(int direction){  if (getChildCount() <= 0) {    return false;  }  View selectedView=getSelectedView();  int selectedPos=mSelectedPosition;  int nextSelectedPosition=nextSelectedPositionForDirection(selectedPos,direction);  int amountToScroll=amountToScroll(direction,nextSelectedPosition);  final ArrowScrollFocusResult focusResult=mItemsCanFocus ? arrowScrollFocused(direction) : null;  if (focusResult != null) {    nextSelectedPosition=focusResult.getSelectedPosition();    amountToScroll=focusResult.getAmountToScroll();  }  boolean needToRedraw=focusResult != null;  if (nextSelectedPosition != INVALID_POSITION) {    handleNewSelectionChange(selectedView,direction,nextSelectedPosition,focusResult != null);    setSelectedPositionInt(nextSelectedPosition);    setNextSelectedPositionInt(nextSelectedPosition);    selectedView=getSelectedView();    selectedPos=nextSelectedPosition;    if (mItemsCanFocus && focusResult == null) {      final View focused=getFocusedChild();      if (focused != null) {        focused.clearFocus();      }    }    needToRedraw=true;    checkSelectionChanged();  }  if (amountToScroll > 0) {    scrollListItemsBy((direction == View.FOCUS_UP) ? amountToScroll : -amountToScroll);    needToRedraw=true;  }  if (mItemsCanFocus && (focusResult == null) && selectedView != null && selectedView.hasFocus()) {    final View focused=selectedView.findFocus();    if (!isViewAncestorOf(focused,this) || distanceToView(focused) > 0) {      focused.clearFocus();    }  }  if (nextSelectedPosition == INVALID_POSITION && selectedView != null && !isViewAncestorOf(selectedView,this)) {    selectedView=null;    hideSelector();    mResurrectToPosition=INVALID_POSITION;  }  if (needToRedraw) {    if (selectedView != null) {      positionSelector(selectedPos,selectedView);      mSelectedTop=selectedView.getTop();    }    if (!awakenScrollBars()) {      invalidate();    }    invokeOnItemScrollListener();    return true;  }  return false;}  }
class C{  public Control delete(List<String> urls,boolean deleteDownloadedFile,OnDeleteDownloadFilesListener onDeleteDownloadFilesListener){  if (mDeleteControl != null && !mDeleteControl.isStopped()) {    return mDeleteControl;  }  DeleteDownloadFilesTask deleteDownloadFilesTask=new DeleteDownloadFilesTask(urls,deleteDownloadedFile,mTaskEngine,mDownloadFileDeleter,mDownloadTaskPauseable);  deleteDownloadFilesTask.setOnDeleteDownloadFilesListener(onDeleteDownloadFilesListener);  addAndRunTask(deleteDownloadFilesTask);  mDeleteControl=new DeleteControl(deleteDownloadFilesTask);  return mDeleteControl;}  }
class C{  @Override public void commit() throws IOException {  try {    super.commit();    Iterator<Entry> it=this.entryIterator();    for (SchemaConfiguration.Entry etr=it.next(); it.hasNext(); etr=it.next()) {      try {        SchemaDeclaration f=CollectionSchema.valueOf(etr.key());        f.setSolrFieldName(etr.getValue());      } catch (      final IllegalArgumentException e) {        continue;      }    }  } catch (  final IOException e) {  }}  }
class C{  private void addLegends(Canvas canvas,int color,int top,int left,int right,int bottom,String label){  legends=new RectF(left,top,right,bottom);  Rect r=new Rect(left,top,left + 30,top + 30);  paint.setColor(Color.parseColor(getColorList().get(color)));  paint.setStyle(Paint.Style.FILL);  canvas.drawRect(r,paint);  canvas.drawText(label,left + 40,top + 20,textPaint);}  }
class C{  public static boolean variableNameValid(String varName){  boolean validFlag=false;  if (varName == null)   Log.d(TAG,"variableNameValid: null name"); else {    if (VARIABLE_NAME_MATCH_PATTERN == null)     VARIABLE_NAME_MATCH_PATTERN=Pattern.compile(VARIABLE_NAME_MATCH_EXPRESSION,0);    if (VARIABLE_NAME_MATCH_PATTERN.matcher(varName).matches()) {      if (variableNameIsLocal(varName))       validFlag=true; else       Log.d(TAG,"variableNameValid: name not local: " + varName);    } else     Log.d(TAG,"variableNameValid: invalid name: " + varName);  }  return validFlag;}  }
class C{  public boolean containsKey(Object key1,Object key2,Object key3,Object key4,Object key5){  int hashCode=hash(key1,key2,key3,key4,key5);  AbstractHashedMap.HashEntry entry=map.data[map.hashIndex(hashCode,map.data.length)];  while (entry != null) {    if (entry.hashCode == hashCode && isEqualKey(entry,key1,key2,key3,key4,key5)) {      return true;    }    entry=entry.next;  }  return false;}  }
class C{  public ItemIdentificationPath(RPAction action,boolean source){  String zoneName=action.get("zoneid");  zone=SingletonRepository.getRPWorld().getZone(zoneName);  if (action.has("quantity)")) {    quantity=action.getInt("quantity");  }  if (source) {    fillBySource(action);  } else {    fillByTarget(action);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  private static void analyzeHadoopConfiguration(){  JobConf job=ConfigurationManager.getCachedJobConf();  _remoteMRSortMem=(1024 * 1024) * job.getLong(MRConfigurationNames.MR_TASK_IO_SORT_MB,100);  String javaOpts1=job.get(MRConfigurationNames.MR_CHILD_JAVA_OPTS);  String javaOpts2=job.get(MRConfigurationNames.MR_MAP_JAVA_OPTS,null);  String javaOpts3=job.get(MRConfigurationNames.MR_REDUCE_JAVA_OPTS,null);  if (javaOpts2 != null)   _remoteJVMMaxMemMap=extractMaxMemoryOpt(javaOpts2); else   _remoteJVMMaxMemMap=extractMaxMemoryOpt(javaOpts1);  if (javaOpts3 != null)   _remoteJVMMaxMemReduce=extractMaxMemoryOpt(javaOpts3); else   _remoteJVMMaxMemReduce=extractMaxMemoryOpt(javaOpts1);  String blocksize=job.get(MRConfigurationNames.DFS_BLOCKSIZE,"134217728");  _blocksize=Long.parseLong(blocksize);  String framework=job.get(MRConfigurationNames.MR_FRAMEWORK_NAME);  _yarnEnabled=(framework != null && framework.equals("yarn"));  _localJT=analyzeLocalMode(job);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (declaredModifiers: ");  result.append(declaredModifiers);  result.append(')');  return result.toString();}  }
class C{  public double normalizedDistance(double[] point1,double[] point2) throws Exception {  return Math.sqrt(distance2(point1,point2)) / point1.length;}  }
class C{  public Rectangle2D intersection(double rX,double rY,double rW,double rH){  double tx1=this.x;  double ty1=this.y;  double rx1=rX;  double ry1=rY;  double tx2=tx1;  tx2+=this.size.getWidth();  double ty2=ty1;  ty2+=this.size.getHeight();  double rx2=rx1;  rx2+=rW;  double ry2=ry1;  ry2+=rH;  if (tx1 < rx1) {    tx1=rx1;  }  if (ty1 < ry1) {    ty1=ry1;  }  if (tx2 > rx2) {    tx2=rx2;  }  if (ty2 > ry2) {    ty2=ry2;  }  tx2-=tx1;  ty2-=ty1;  if (tx2 < Integer.MIN_VALUE) {    tx2=Integer.MIN_VALUE;  }  if (ty2 < Integer.MIN_VALUE) {    ty2=Integer.MIN_VALUE;  }  return new Rectangle2D(tx1,ty1,tx2,ty2);}  }
class C{  public static String toString(Object partObj){  return toString(partObj,false);}  }
class C{  public static void writeX509CertificateChain(X509Certificate[] chain,Writer w) throws IOException {  try (JcaPEMWriter jw=new JcaPEMWriter(w)){    for (    X509Certificate cert : chain) {      jw.writeObject(cert);    }  } }  }
class C{  public String nextToken() throws NoSuchElementException, ParseException {  if (this.currentToken == null) {    throw new NoSuchElementException("Iteration already finished.");  }  final String result=this.currentToken;  this.searchPos=findNext(this.searchPos);  return result;}  }
class C{  protected Line(double spaceWidth,double fontSize,double maxLength){  this.spaceSize=spaceWidth * fontSize;  this.maxLength=maxLength;}  }
class C{  String vmTypeToLanguage(String typeName){  if ("(null)".equals(typeName)) {    return typeName;  }  if (!typeName.startsWith("L") || !typeName.endsWith(";")) {    throw new AssertionError("Bad name: " + typeName + " in line "+ sourceLineNumber);  }  typeName=typeName.substring(1,typeName.length() - 1);  return typeName.replace("/",".");}  }
class C{  public static ByteBuffer merge(List<ByteBuffer> byteBuffers){  if (byteBuffers == null || byteBuffers.size() == 0) {    return ByteBuffer.allocate(0);  } else   if (byteBuffers.size() == 1) {    return byteBuffers.get(0);  } else {    ByteBuffer fullContent=ByteBuffer.allocate(byteBuffers.stream().mapToInt(null).sum());    byteBuffers.forEach(null);    fullContent.flip();    return fullContent;  }}  }
class C{  public ProgressBar(Context context){  this(context,null);}  }
class C{  public SIPTransaction findTransaction(SIPMessage sipMessage,boolean isServer){  SIPTransaction retval=null;  try {    if (isServer) {      Via via=sipMessage.getTopmostVia();      if (via.getBranch() != null) {        String key=sipMessage.getTransactionId();        retval=(SIPTransaction)serverTransactionTable.get(key);        if (isLoggingEnabled())         getStackLogger().logDebug("serverTx: looking for key " + key + " existing="+ serverTransactionTable);        if (key.startsWith(SIPConstants.BRANCH_MAGIC_COOKIE_LOWER_CASE)) {          return retval;        }      }      Iterator<SIPServerTransaction> it=serverTransactionTable.values().iterator();      while (it.hasNext()) {        SIPServerTransaction sipServerTransaction=(SIPServerTransaction)it.next();        if (sipServerTransaction.isMessagePartOfTransaction(sipMessage)) {          retval=sipServerTransaction;          return retval;        }      }    } else {      Via via=sipMessage.getTopmostVia();      if (via.getBranch() != null) {        String key=sipMessage.getTransactionId();        if (isLoggingEnabled())         getStackLogger().logDebug("clientTx: looking for key " + key);        retval=(SIPTransaction)clientTransactionTable.get(key);        if (key.startsWith(SIPConstants.BRANCH_MAGIC_COOKIE_LOWER_CASE)) {          return retval;        }      }      Iterator<SIPClientTransaction> it=clientTransactionTable.values().iterator();      while (it.hasNext()) {        SIPClientTransaction clientTransaction=(SIPClientTransaction)it.next();        if (clientTransaction.isMessagePartOfTransaction(sipMessage)) {          retval=clientTransaction;          return retval;        }      }    }  }  finally {    if (isLoggingEnabled()) {      getStackLogger().logDebug("findTransaction: returning  : " + retval);    }  }  return retval;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.470 -0500",hash_original_method="1E1A6C22D1982081DC74374A2FF63AAD",hash_generated_method="35D1105224AA8AEBCEC68EBB9DF02513") public synchronized boolean isRequestConsumable(SIPRequest dialogRequest){  if (dialogRequest.getMethod().equals(Request.ACK))   throw new RuntimeException("Illegal method");  if (!this.isSequnceNumberValidation()) {    return true;  }  return remoteSequenceNumber < dialogRequest.getCSeq().getSeqNumber();}  }
class C{  public static Query newPathQuery(final String field,final double[] pathLatitudes,final double[] pathLongitudes,final double pathWidthMeters){  final GeoShape shape=Geo3DUtil.fromPath(pathLatitudes,pathLongitudes,pathWidthMeters);  return newShapeQuery(field,shape);}  }
class C{  public Mat dct2(boolean scale){  DenseDoubleMatrix2D dm=new DenseDoubleMatrix2D(getArray());  dm.dct2(scale);  return new Mat(dm.toArray());}  }
class C{  public ParameterizedTypeItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void listenerPaint(Object source,Graphics g){  MapBean theMap=source instanceof MapBean ? (MapBean)source : null;  if (theMap != null) {    if (origin != null) {      paintOrigin(origin,g,theMap);      if (destination != null) {        paintRangeRings(origin,destination,g,theMap);      } else       if (intermediateDest != null) {        paintRangeRings(origin,intermediateDest,g,theMap);      }    } else {      theMap.removePaintListener(this);    }  }}  }
class C{  final public static float distance(Point p1,Point p2){  double sum=0.0;  for (int i=0; i < p1.w.length; ++i) {    double d=p1.w[i] - p2.w[i];    sum+=d * d;  }  return (float)Math.sqrt(sum);}  }
class C{  public void emit(T tuple){  if (operatorThread != null && Thread.currentThread() != operatorThread) {    throw new IllegalStateException("Current thread " + Thread.currentThread().getName() + " is different from the operator thread "+ operatorThread.getName());  }  sink.put(tuple);}  }
class C{  public void addFunction(final IBlockContainer<InstructionType> original,final ReilFunction translated){  functions.add(new Pair<IBlockContainer<InstructionType>,ReilFunction>(original,translated));}  }
class C{  public void initializeSerializerProps(){  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_CANONICAL_FORM,DOMConstants.DOM3_DEFAULT_FALSE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_CDATA_SECTIONS,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_CHECK_CHAR_NORMALIZATION,DOMConstants.DOM3_DEFAULT_FALSE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_COMMENTS,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_DATATYPE_NORMALIZATION,DOMConstants.DOM3_DEFAULT_FALSE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_ELEMENT_CONTENT_WHITESPACE,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_ENTITIES,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.DOM_ENTITIES,DOMConstants.DOM3_DEFAULT_TRUE);  if ((fFeatures & INFOSET) != 0) {    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_NAMESPACES,DOMConstants.DOM3_DEFAULT_TRUE);    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_NAMESPACE_DECLARATIONS,DOMConstants.DOM3_DEFAULT_TRUE);    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_COMMENTS,DOMConstants.DOM3_DEFAULT_TRUE);    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_ELEMENT_CONTENT_WHITESPACE,DOMConstants.DOM3_DEFAULT_TRUE);    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_WELLFORMED,DOMConstants.DOM3_DEFAULT_TRUE);    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_ENTITIES,DOMConstants.DOM3_DEFAULT_FALSE);    fDOMConfigProperties.setProperty(DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.DOM_ENTITIES,DOMConstants.DOM3_DEFAULT_FALSE);    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_CDATA_SECTIONS,DOMConstants.DOM3_DEFAULT_FALSE);    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_VALIDATE_IF_SCHEMA,DOMConstants.DOM3_DEFAULT_FALSE);    fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_DATATYPE_NORMALIZATION,DOMConstants.DOM3_DEFAULT_FALSE);  }  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_NAMESPACES,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_NAMESPACE_DECLARATIONS,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_SPLIT_CDATA,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_VALIDATE,DOMConstants.DOM3_DEFAULT_FALSE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_VALIDATE_IF_SCHEMA,DOMConstants.DOM3_DEFAULT_FALSE);  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_WELLFORMED,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_XSL_OUTPUT_INDENT,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(OutputPropertiesFactory.S_KEY_INDENT_AMOUNT,Integer.toString(3));  fDOMConfigProperties.setProperty(DOMConstants.S_DOM3_PROPERTIES_NS + DOMConstants.DOM_DISCARD_DEFAULT_CONTENT,DOMConstants.DOM3_DEFAULT_TRUE);  fDOMConfigProperties.setProperty(DOMConstants.S_XSL_OUTPUT_OMIT_XML_DECL,"no");}  }
class C{  @Override public boolean isValidRow(Map<String,Object> row){  if (!row.containsKey(column)) {    return false;  }  Matcher match=pattern.matcher((CharSequence)row.get(column));  return match.find();}  }
class C{  public void testSameClassLoaderIsolatedMode() throws Exception {  processTestHotRedeployment(DeploymentMode.PRIVATE);}  }
class C{  public void addChild(final IPage<?> page){  if (childList == null)   childList=new ArrayList<>();  childList.add(page);  page.setParent(this);}  }
class C{  private Object readResolve(){  return iChronology.dayOfMonth();}  }
class C{  public void save(OutputStream out) throws IOException {  Writer w=new OutputStreamWriter(out,"UTF8");  save(w);  w.flush();}  }
class C{  private final char[] findBuffer(int needed){  return _allocator.allocCharBuffer(BufferRecycler.CharBufferType.TEXT_BUFFER,needed);}  }
class C{  public static SourceMethodNode findSourceMethodNodeWithCallers(Map<String,Map<String,Set<JsonElement>>> callerMap,IMethod jdtMethod,String jdtClassName,String srcClassName,int srcLine){  String jdtMethodName=jdtMethod.getElementName();  String[] jdtParamTypes=jdtMethod.getParameterTypes();  for (  String sig : callerMap.keySet()) {    String sootMethodName=Utils.signatureMethodName(sig);    if (sootMethodName.equals(jdtMethodName)) {      String sootClassName=Utils.signatureClass(sig);      if (classNamesMatch(sootClassName,jdtClassName)) {        String[] sootParamTypes=Utils.signatureParameterTypes(sig);        if (typesMatch(sootParamTypes,jdtParamTypes)) {          SourceMethodNode methodNode=SourceMethodNode.get(sig);          methodNode.sourceClass=srcClassName;          methodNode.line=srcLine;          return methodNode;        }      }    }  }  return null;}  }
class C{  protected boolean isFull(){  int size=objects.size();  boolean full=size >= userDataElements;  return full;}  }
class C{  public OFRoleVendorData(int dataType){  super(dataType);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Override public NativePooledByteBufferOutputStream newOutputStream(){  return new NativePooledByteBufferOutputStream(mPool);}  }
class C{  public static Color deriveWithAlpha(Color color,int alpha){  return new Color(color.getRed(),color.getGreen(),color.getBlue(),alpha);}  }
class C{  public boolean isMatch(ReadablePartial partial){  if (partial == null) {    throw new IllegalArgumentException("The partial must not be null");  }  for (int i=0; i < iTypes.length; i++) {    int value=partial.get(iTypes[i]);    if (value != iValues[i]) {      return false;    }  }  return true;}  }
class C{  private URL promptForWorkspace(final Shell shell,final ChooseWorkspaceData launchData,boolean force){  URL url=null;  do {    new ChooseWorkspaceDialog(shell,launchData,false,true).prompt(force);    final String instancePath=launchData.getSelection();    if (instancePath == null) {      return null;    }    force=true;    if (instancePath.length() <= 0) {      MessageDialog.openError(shell,IDEApplication_workspaceEmptyTitle,IDEApplication_workspaceEmptyMessage);      continue;    }    final File workspace=new File(instancePath);    if (!workspace.exists()) {      workspace.mkdir();    }    try {      final String path=workspace.getAbsolutePath().replace(File.separatorChar,'/');      url=new URL("file",null,path);    } catch (    final MalformedURLException e) {      MessageDialog.openError(shell,IDEApplication_workspaceInvalidTitle,IDEApplication_workspaceInvalidMessage);      continue;    }  } while (!checkValidWorkspace(shell,url));  return url;}  }
class C{  public InitializationParams build(){  if ((mFragmentManager == null) || (mContentFrame == null) || (mScreenManager == null)) {    throw new IllegalStateException("All parameters are mandatory");  }  return new InitializationParams(this);}  }
class C{  public static <T>T withDataInputStream(File file,@ClosureParams(value=SimpleType.class,options="java.io.DataInputStream") Closure<T> closure) throws IOException {  return IOGroovyMethods.withStream(newDataInputStream(file),closure);}  }
class C{  public SQLTransientConnectionException(Throwable cause){  super(cause);}  }
class C{  public static void xmlConversionNameUndefined(String xmlPath,String className){  throw new XmlConversionNameException(MSG.INSTANCE.message(xmlConversionNameException,xmlPath,className));}  }
class C{  @Override public Collection<File> processArgs(String[] flags,String[] classNames){  int ac=0;  while (ac < flags.length) {    String flag=flags[ac];    ac++;    int j;    int firstOptionToCheck=flag.charAt(0) == '-' ? 0 : recognizedOptions.length - 1;    for (j=firstOptionToCheck; j < recognizedOptions.length; j++)     if (recognizedOptions[j].matches(flag))     break;    if (j == recognizedOptions.length) {      error("err.invalid.flag",flag);      return null;    }    Option option=recognizedOptions[j];    if (option.hasArg()) {      if (ac == flags.length) {        error("err.req.arg",flag);        return null;      }      String operand=flags[ac];      ac++;      if (option.process(optionHelper,flag,operand))       return null;    } else {      if (option.process(optionHelper,flag))       return null;    }  }  if (this.classnames != null && classNames != null) {    this.classnames.addAll(Arrays.asList(classNames));  }  if (!checkDirectoryOrURL("-d"))   return null;  if (!checkDirectory("-s"))   return null;  String sourceString=options.get("-source");  String targetString=options.get("-target");  if (sourceString == null && targetString == null) {    sourceString="7";    options.put(Option.SOURCE,sourceString);  }  Source source=(sourceString != null) ? Source.lookup(sourceString) : Source.DEFAULT;  if (targetString == null) {    targetString="7";    options.put(Option.TARGET,targetString);  }  Target target=(targetString != null) ? Target.lookup(targetString) : Target.JDK1_7;  if (Character.isDigit(target.name.charAt(0))) {    if (target.compareTo(source.requiredTarget()) < 0) {      if (targetString != null) {        if (sourceString == null) {          warning("warn.target.default.source.conflict",targetString,source.requiredTarget().name);        } else {          warning("warn.source.target.conflict",sourceString,source.requiredTarget().name);        }        return null;      } else {        options.put("-target",source.requiredTarget().name);      }    } else {      if (targetString == null && !source.allowGenerics()) {        options.put("-target",Target.JDK1_4.name);      }    }  }  return filenames;}  }
class C{  @Override public String nextElement(){  return m_Tokenizer.nextToken();}  }
class C{  public void testIntervalString() throws Exception {  assertEquals(0,new Interval("0").longValue());  assertEquals(100,new Interval("100").longValue());  assertEquals(0,new Interval("0s").longValue());  assertEquals(2000,new Interval("2s").longValue());  assertEquals(2000,new Interval("2S").longValue());  assertEquals(0,new Interval("0m").longValue());  assertEquals(120000,new Interval(" 2m").longValue());  assertEquals(120000,new Interval("2M").longValue());  assertEquals(0,new Interval("0h").longValue());  assertEquals(7200000,new Interval("2h ").longValue());  assertEquals(7200000,new Interval("2H").longValue());  assertEquals(0,new Interval("0d").longValue());  assertEquals(7200000 * 24,new Interval(" 2d ").longValue());  assertEquals(7200000 * 24,new Interval("2D").longValue());}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public double[] sampleForInstanceFast(Instance t_[],Random r) throws Exception {  int L=t_.length;  double y[]=new double[L];  for (  int j : m_Chain) {    double p[]=nodes[j].distribution(t_[j],y);    y[j]=A.samplePMF(p,r);    confidences[j]=p[(int)y[j]];    nodes[j].updateTransform(t_[j],y);  }  return y;}  }
class C{  public static int countSubstrings(String string,String sub){  int count=0;  int index=-1;  while ((index=string.indexOf(sub,index + 1)) != -1) {    ++count;  }  return count;}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  protected int randomIntBetweenDivisible(int start,int end,int divisible){  int divisStart=(int)Math.ceil((start + 1) / (double)divisible);  int divisEnd=(int)Math.floor((end - 1) / (double)divisible);  int divisRange=Math.max(0,divisEnd - divisStart + 1);  int r=randomInt(1 + divisRange);  if (r == 0)   return start;  if (r == 1)   return end;  return (r - 2 + divisStart) * divisible;}  }
class C{  public void testLaggedTimedOffer(){  SubmissionPublisher<Integer> p=basicPublisher();  TestSubscriber s1=new TestSubscriber();  s1.request=false;  TestSubscriber s2=new TestSubscriber();  s2.request=false;  p.subscribe(s1);  p.subscribe(s2);  s2.awaitSubscribe();  s1.awaitSubscribe();  long startTime=System.nanoTime();  assertTrue(p.offer(1,LONG_DELAY_MS,MILLISECONDS,null) >= 1);  assertTrue(p.offer(2,LONG_DELAY_MS,MILLISECONDS,null) >= 2);  s1.sn.request(4);  assertTrue(p.offer(3,LONG_DELAY_MS,MILLISECONDS,null) >= 3);  s2.sn.request(4);  p.offer(4,LONG_DELAY_MS,MILLISECONDS,null);  p.close();  s2.awaitComplete();  assertEquals(4,s2.nexts);  s1.awaitComplete();  assertEquals(4,s2.nexts);  assertTrue(millisElapsedSince(startTime) < LONG_DELAY_MS / 2);}  }
class C{  public static Float[] toObject(float[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return EMPTY_FLOAT_OBJECT_ARRAY;  }  final Float[] result=new Float[array.length];  for (int i=0; i < array.length; i++) {    result[i]=new Float(array[i]);  }  return result;}  }
class C{  public static @Nullable DateTime max(DateTime a,DateTime b){  return a == null ? b : b == null ? a : a.isAfter(b) ? a : b;}  }
class C{  public static void startFolderSelectActivity(Context context,BookmarkId... bookmarks){  assert bookmarks.length > 0;  Intent intent=new Intent(context,EnhancedBookmarkFolderSelectActivity.class);  intent.putExtra(INTENT_IS_CREATING_FOLDER,false);  ArrayList<String> bookmarkStrings=new ArrayList<>(bookmarks.length);  for (  BookmarkId id : bookmarks) {    bookmarkStrings.add(id.toString());  }  intent.putStringArrayListExtra(INTENT_BOOKMARKS_TO_MOVE,bookmarkStrings);  context.startActivity(intent);}  }
class C{  public static void main(String[] args) throws AuthenticationException {  SimpleCommandLineParser parser=new SimpleCommandLineParser(args);  String username=parser.getValue("username","user","u");  String password=parser.getValue("password","pass","p");  boolean help=parser.containsKey("help","h");  if (help || username == null || password == null) {    usage();    System.exit(1);  }  final String appName="sampleCo-WorksheetDemo-0.9";  WorksheetDemo demo=new WorksheetDemo(new SpreadsheetService(appName),System.out);  demo.run(username,password);}  }
class C{  @Override public void updatePixels(int x,int y,int c,int d){  if ((x != 0) || (y != 0) || (c != width)|| (d != height)) {    showVariationWarning("updatePixels(x, y, w, h)");  }  updatePixels();}  }
class C{  private void cleanupService(){  if (mService != null) {    try {      mContext.unbindService(this);    } catch (    IllegalArgumentException e) {      Log.e(TAG,"Unable to unbind from licensing service (already unbound)");    }    mService=null;  }}  }
class C{  private void assertBackupStatus(final BackupStatus backupStatus){  Map<DistributedMember,Set<PersistentID>> backupMap=backupStatus.getBackedUpDiskStores();  assertFalse(backupMap.isEmpty());  for (  DistributedMember member : backupMap.keySet()) {    for (    PersistentID id : backupMap.get(member)) {      assertNotNull(id.getHost());      assertNotNull(id.getUUID());      assertNotNull(id.getDirectory());    }  }}  }
class C{  public TIntFloatHashMap(int initialCapacity,float loadFactor,TIntHashingStrategy strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  private int processTradingday(Tradingday tradingday,int totalSumbitted) throws BrokerModelException, InterruptedException {  if (tradingday.getTradestrategies().isEmpty())   return totalSumbitted;  for (  Tradestrategy tradestrategy : tradingday.getTradestrategies()) {    if (!this.brokerModel.isRealtimeBarsRunning(tradestrategy)) {      totalSumbitted=submitBrokerRequest(tradestrategy,tradingday.getClose(),totalSumbitted);    }  }  return totalSumbitted;}  }
class C{  private boolean readNextLine() throws IOException {  if (headerLines.hasMoreElements()) {    try {      pos=0;      String line=(headerLines.nextElement() + LINE_SEPERATOR);      if (!headerLines.hasMoreElements()) {        line+=LINE_SEPERATOR;      }      currLine=line.getBytes("US-ASCII");      return true;    } catch (    UnsupportedEncodingException e) {      throw new IOException("US-ASCII encoding not supported by this platform ?!");    }  } else {    return false;  }}  }
class C{  public static SyncClientInterface newOtsClient(Configuration conf){  Credential cred=Credential.deserialize(conf.get(Credential.kTableStoreCredential));  Endpoint ep=Endpoint.deserialize(conf.get(Endpoint.kTableStoreEndpoint));  if (cred.securityToken == null) {    return new SyncClient(ep.endpoint,cred.accessKeyId,cred.accessKeySecret,ep.instance);  } else {    return new SyncClient(ep.endpoint,cred.accessKeyId,cred.accessKeySecret,ep.instance,cred.securityToken);  }}  }
class C{  public double dot(SparseVector that){  if (this.d != that.d)   throw new IllegalArgumentException("Vector lengths disagree");  double sum=0.0;  if (this.st.size() <= that.st.size()) {    for (    int i : this.st.keys())     if (that.st.contains(i))     sum+=this.get(i) * that.get(i);  } else {    for (    int i : that.st.keys())     if (this.st.contains(i))     sum+=this.get(i) * that.get(i);  }  return sum;}  }
class C{  public static _BuildPhaseStatus fromString(final String value) throws SOAPSerializationException {  return (_BuildPhaseStatus)Enumeration.fromString(value,_BuildPhaseStatus.VALUES_TO_INSTANCES);}  }
class C{  public synchronized BufferedImage createScreenCapture(Rectangle screenRect){  checkScreenCaptureAllowed();  checkValidRect(screenRect);  BufferedImage image;  DataBufferInt buffer;  WritableRaster raster;  if (screenCapCM == null) {    screenCapCM=new DirectColorModel(24,0x00FF0000,0x0000FF00,0x000000FF);  }  Toolkit.getDefaultToolkit().sync();  int pixels[];  int[] bandmasks=new int[3];  pixels=peer.getRGBPixels(screenRect);  buffer=new DataBufferInt(pixels,pixels.length);  bandmasks[0]=screenCapCM.getRedMask();  bandmasks[1]=screenCapCM.getGreenMask();  bandmasks[2]=screenCapCM.getBlueMask();  raster=Raster.createPackedRaster(buffer,screenRect.width,screenRect.height,screenRect.width,bandmasks,null);  SunWritableRaster.makeTrackable(buffer);  image=new BufferedImage(screenCapCM,raster,false,null);  return image;}  }
class C{  private void showNotification(){  CharSequence text=getText(R.string.remote_service_started);  Notification notification=new Notification(R.drawable.stat_sample,text,System.currentTimeMillis());  PendingIntent contentIntent=PendingIntent.getActivity(this,0,new Intent(this,Controller.class),0);  notification.setLatestEventInfo(this,getText(R.string.remote_service_label),text,contentIntent);  mNM.notify(R.string.remote_service_started,notification);}  }
class C{  private void startList(Attributes attributes){  List listTag=null;  if (!mParagraphStyles.isEmpty()) {    AccumulatedParagraphStyle currentStyle=mParagraphStyles.peek();    ParagraphType type=currentStyle.getType();    int indent=currentStyle.getAbsoluteIndent();    boolean isIndentation=isIndentation(attributes);    if (type.isIndentation() || isIndentation) {      listTag=new UL(indent,true);    } else     if (type.isNumbering()) {      listTag=new OL(indent,false);    } else     if (type.isBullet()) {      listTag=new UL(indent,false);    }  } else {    listTag=new UL(0,false);  }  if (listTag != null)   start(listTag);}  }
class C{  public static void informationDialog(Stage owner,String msg){  showDialog(owner,MessageType.INFO,msg,false);}  }
class C{  public Iterator keys(){  return this.keySet().iterator();}  }
class C{  public static Map<String,List<String>> allParameters(final HttpServletRequest request,final Set<String> pathVariables,final boolean removeDuplicates){  final Map<String,List<String>> params=getParameters(request,pathVariables,removeDuplicates);  for (  final Map.Entry<String,String[]> param : request.getParameterMap().entrySet()) {    final String key=param.getKey();    final List<String> values;    if (!params.containsKey(key)) {      values=new LinkedList<String>();      params.put(key,values);    } else {      values=params.get(key);    }    if (param.getValue() != null) {      for (      final String value : param.getValue()) {        if (!removeDuplicates || !values.contains(value)) {          values.add(value);        }      }    }  }  return params;}  }
class C{  public double max(int i){  if (i < 0 || i >= sizes.size())   throw new ArrayIndexOutOfBoundsException("Attempted to access negative index of DVector2D.");  double result=-Double.MAX_VALUE;  int size=sizes.get(i);  for (int j=0; j < size; ++j)   if (vector[i][j] > result)   result=vector[i][j];  return result;}  }
class C{  static CryptoPermissions verifyExemptJar(URL codeBase) throws Exception {  JarVerifier jv=new JarVerifier(codeBase,true);  jv.verify();  return jv.getPermissions();}  }
class C{  public static ShareFileFragment newInstance(OCFile fileToShare,Account account){  ShareFileFragment fragment=new ShareFileFragment();  Bundle args=new Bundle();  args.putParcelable(ARG_FILE,fileToShare);  args.putParcelable(ARG_ACCOUNT,account);  fragment.setArguments(args);  return fragment;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 256) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public static MatchResult findMatchAfterIndex(RegExp regexp,String text,int exclusiveStartIndex){  regexp.setLastIndex(exclusiveStartIndex + 1);  return regexp.exec(text);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:18.757 -0500",hash_original_method="13E8DE21AE4CB3AA83156EE3A5950ED3",hash_generated_method="A614ED0ED34DE6FC84D338B19E98B302") public void switchTimezone(String timezone){  addTaint(timezone.getTaint());}  }
class C{  static Varargs gsub(Varargs args){  LuaString src=args.checkstring(1);  final int srclen=src.length();  LuaString p=args.checkstring(2);  LuaValue repl=args.arg(3);  int max_s=args.optint(4,srclen + 1);  final boolean anchor=p.length() > 0 && p.charAt(0) == '^';  Buffer lbuf=new Buffer(srclen);  MatchState ms=new MatchState(args,src,p);  int soffset=0;  int n=0;  while (n < max_s) {    ms.reset();    int res=ms.match(soffset,anchor ? 1 : 0);    if (res != -1) {      n++;      ms.add_value(lbuf,soffset,res,repl);    }    if (res != -1 && res > soffset)     soffset=res; else     if (soffset < srclen)     lbuf.append((byte)src.luaByte(soffset++)); else     break;    if (anchor)     break;  }  lbuf.append(src.substring(soffset,srclen));  return varargsOf(lbuf.tostring(),valueOf(n));}  }
class C{  private boolean addUnmodeledObject(AssignStmt stmt,SootMethod method,boolean DEBUG){  InvokeExpr invoke=stmt.getInvokeExpr();  SootMethodRef target=invoke.getMethodRef();  Body body=method.getActiveBody();  boolean madeChange=false;  AnalysisReport.v().addEntry("API call analysis concludes that api call returns null value, could be that the DroidSafe model is inaccurate, check implementation.",stmt,AnalysisReport.Level.ELEVATED);  Type castType=SootUtils.findCast(method,stmt,stmt.getLeftOp());  Type returnType=target.returnType();  Type type;  if (castType != null) {    if (!SootUtils.isSubTypeOfIncluding(castType,returnType)) {      logger.info("Could not use cast type because not child of return type {} {}",castType,returnType);      type=returnType;    } else {      type=castType;    }  } else   type=returnType;  Value newObj=UnmodeledGeneratedClasses.v().getSootFieldForType(type);  if (DEBUG) {    System.out.println(type);    System.out.println(newObj);  }  if (newObj instanceof StaticFieldRef && stmt.getLeftOp() instanceof Local) {    StaticFieldRef fr=(StaticFieldRef)newObj;    Stmt insertMe=Jimple.v().newAssignStmt(stmt.getLeftOp(),fr);    body.getUnits().insertAfter(insertMe,stmt);    logger.info("Inserting object with {} after {} for {}",insertMe,stmt,method);    if (DEBUG)     System.out.printf("Inserting object with %s after %s for %s",insertMe,stmt,method);    madeChange=true;  }  return madeChange;}  }
class C{  private void readObject(){}  }
class C{  public BigInteger optBigInteger(String key,BigInteger defaultValue){  try {    return this.getBigInteger(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  private void pause(){  try {    Thread.sleep(INTERVAL);  } catch (  InterruptedException e) {  }}  }
class C{  public boolean isLeadingEdge(){  return isLeadingEdge;}  }
class C{  public V13Statement(FbWireDatabase database){  super(database);}  }
class C{  public static String left(String source,String searchFor){  int index=source.indexOf(searchFor);  if (index <= 0) {    return "";  }  return source.substring(0,index);}  }
class C{  @Override public void onDestroyed(CameraView cv){  stop();}  }
class C{  public synchronized int addLog(Writer writer,LogRestarter restarter,boolean postAnnouncements,boolean repostAnnouncements){  logs.addElement(new Log(writer,restarter,postAnnouncements,repostAnnouncements));  return logs.size() - 1;}  }
class C{  public ConversationBuilder forWhom(Chat chat){  this.forWhom=chat;  return this;}  }
class C{  public void logging(String msg){  System.out.println(msg);}  }
class C{  public void add(String name,Object... args){  list.add(Parameterization.create(name,args));}  }
class C{  public boolean isValidBST(TreeNode root){  if (root == null) {    return true;  }  if (!isValidBST(root.left)) {    return false;  }  if (pred != null && pred.val >= root.val) {    return false;  }  pred=root;  if (!isValidBST(root.right)) {    return false;  }  return true;}  }
class C{  public static double log(double x){  if (x > 0 && x < 1) {    double d=1 / x;    double result=-log(d);    return result;  }  int tmp=0;  double tmp2=1;  double d=x;  while (d > 2) {    d=d / 2;    tmp+=1;    tmp2*=2;  }  double rem=x / tmp2;  rem=logBKM(rem);  return tmp + rem;}  }
class C{  public String optString(int index,String defaultValue){  Object object=this.opt(index);  return JSONObject.NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  @SuppressWarnings("unchecked") static <T,A extends BindingCollectionAdapter<T>>A createClass(String className,ItemViewArg<T> arg){  try {    return (A)Class.forName(className).getConstructor(ItemViewArg.class).newInstance(arg);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public static boolean isNodePackageInstalled(String nodePackageName){  logger.debug("checking installation of " + nodePackageName + " with npm");  initNode();  boolean[] installed={false};  runCommand(NPM_COMMAND,USER_HOME_DIR,false,null,null,null,"ls","--parseable",nodePackageName);  return installed[0];}  }
class C{  public ArrayDeque<E> clone(){  try {    @SuppressWarnings("unchecked") ArrayDeque<E> result=(ArrayDeque<E>)super.clone();    result.elements=Arrays.copyOf(elements,elements.length);    return result;  } catch (  CloneNotSupportedException e) {    throw new AssertionError();  }}  }
class C{  public static boolean copyFileSafe(final Path srcFile,final Path destFile) throws IOException {  return copyFileSafe(srcFile,destFile,false);}  }
class C{  public static void closeQuietly(Connection con){  if (con == null) {    return;  }  try {    con.close();  } catch (  SQLException ex) {  }}  }
class C{  protected TaskResourceRep finishDeactivateTask(BlockConsistencyGroup consistencyGroup,String task){  URI id=consistencyGroup.getId();  Operation op=new Operation();  op.ready();  op.setProgress(100);  op.setResourceType(ResourceOperationTypeEnum.DELETE_CONSISTENCY_GROUP);  Operation status=_dbClient.createTaskOpStatus(BlockConsistencyGroup.class,id,task,op);  return toTask(consistencyGroup,task,status);}  }
class C{  public static boolean isClientError(int statusCode){  if (statusCode >= 400 && statusCode < 500)   return true; else   return false;}  }
class C{  public OutlierResult run(Database database,Relation<N> nrel,Relation<? extends NumberVector> relation){  final NeighborSetPredicate npred=getNeighborSetPredicateFactory().instantiate(database,nrel);  MeanVariance globalmv=new MeanVariance();  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    globalmv.put(relation.get(iditer).doubleValue(0));  }  DoubleMinMax minmax=new DoubleMinMax();  WritableDoubleDataStore scores=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_STATIC);  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    final double globalZ=(relation.get(iditer).doubleValue(0) - globalmv.getMean()) / globalmv.getNaiveStddev();    Mean localm=new Mean();    for (DBIDIter iter=npred.getNeighborDBIDs(iditer).iter(); iter.valid(); iter.advance()) {      if (DBIDUtil.equal(iditer,iter)) {        continue;      }      localm.put((relation.get(iter).doubleValue(0) - globalmv.getMean()) / globalmv.getNaiveStddev());    }    final double localZ;    if (localm.getCount() > 0) {      localZ=localm.getMean();    } else {      localZ=globalZ;    }    final double score=Math.max(-globalZ * localZ,0);    minmax.put(score);    scores.putDouble(iditer,score);  }  DoubleRelation scoreResult=new MaterializedDoubleRelation("MoranOutlier","Moran Scatterplot Outlier",scores,relation.getDBIDs());  OutlierScoreMeta scoreMeta=new BasicOutlierScoreMeta(minmax.getMin(),minmax.getMax(),Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,0);  OutlierResult or=new OutlierResult(scoreMeta,scoreResult);  or.addChildResult(npred);  return or;}  }
class C{  public void testBadResponse() throws IOException {  String reqdata="Request Data";  Request request=Request.newBuilder().setStrData(reqdata).build();  socket.withInputBytes("bad response".getBytes());  callRpc(request,ErrorReason.IO_ERROR);  verifyRequestToSocket(request);  assertNull(callBlockingRpc(request,ErrorReason.IO_ERROR));  verifyRequestToSocket(request);  callAsyncRpc(request,ErrorReason.IO_ERROR);  verifyRequestToSocket(request);}  }
class C{  public void readAndParse() throws IOException {  readAndParse(null,null);}  }
class C{  public LevenbergMarquardtMethod(FittingFunction func,double[] params,boolean[] dofit,double[] x,double[] y,double[] s){  assert x.length == y.length;  assert x.length == s.length;  assert params.length == dofit.length;  this.func=func;  this.x=x;  this.y=y;  this.s=s;  this.params=params;  this.dofit=dofit;  this.numparams=this.params.length;  numfit=0;  for (int i=0; i < numparams; i++) {    if (dofit[i]) {      numfit++;    }  }  assert (numfit > 0);  covmat=new double[this.numfit][this.numfit];  alpha=new double[this.numfit][this.numfit];  lambda=0.001;  paramstry=params.clone();  beta=new double[this.numfit];  deltaparams=new double[numparams];  chisq=simulateParameters(params);}  }
class C{  public void testDetectLanguageMk(){  LOGGER.debug("detectLanguage mk");  LanguageDetector instance=LanguageDetector.getInstance();  Document doc;  try {    doc=Jsoup.parse(new File(PATH + "mk.wikipedia.org-wiki_20140701.html"),UTF_8);    LOGGER.debug("start detection");    assertEquals("mk",instance.detectLanguage(doc.text()).getDetectedLanguage());    assertEquals("mk",instance.detectLanguage(doc.text().toLowerCase()).getDetectedLanguage());    assertEquals("mk",instance.detectLanguage(doc.text().toUpperCase()).getDetectedLanguage());    LOGGER.debug("detection ended");  } catch (  IOException ex) {    LOGGER.error(ex);  }catch (  NullPointerException npe) {    LOGGER.error("error while fetching page " + npe);  }}  }
class C{  protected void addStatePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_StateCase_state_feature"),getString("_UI_PropertyDescriptor_description","_UI_StateCase_state_feature","_UI_StateCase_type"),SexecPackage.Literals.STATE_CASE__STATE,true,false,true,null,null,null));}  }
class C{  public void paint(Graphics g,int offs0,int offs1,Shape bounds,JTextComponent c){  Rectangle alloc=bounds.getBounds();  try {    TextUI mapper=c.getUI();    Rectangle p0=mapper.modelToView(c,offs0);    Rectangle p1=mapper.modelToView(c,offs1);    Color color=getColor();    if (color == null) {      g.setColor(c.getSelectionColor());    } else {      g.setColor(color);    }    if (p0.y == p1.y) {      Rectangle r=p0.union(p1);      g.fillRect(r.x,r.y,r.width,r.height);    } else {      int p0ToMarginWidth=alloc.x + alloc.width - p0.x;      g.fillRect(p0.x,p0.y,p0ToMarginWidth,p0.height);      if ((p0.y + p0.height) != p1.y) {        g.fillRect(alloc.x,p0.y + p0.height,alloc.width,p1.y - (p0.y + p0.height));      }      g.fillRect(alloc.x,p1.y,(p1.x - alloc.x),p1.height);    }  } catch (  BadLocationException e) {  }}  }
class C{  protected void addNewDocument(String name,int parentId,String fileExt,int sortOrder,InputStream inputStreamDocumentFile,Reader readerAnnFile) throws Exception {  FolderTokenDocument doc;  int id;  id=super.generateNextNewNodeId();  doc=new FolderTokenDocument(id,name,parentId,id,fileExt,sortOrder,inputStreamDocumentFile,readerAnnFile,FolderEditFlag.NEW);  super.add(doc);}  }
class C{  public boolean isIrreducible(){  if (isZero()) {    return false;  }  GF2Polynomial f=new GF2Polynomial(this);  int d, i;  GF2Polynomial u, g;  GF2Polynomial dummy;  f.reduceN();  d=f.len - 1;  u=new GF2Polynomial(f.len,"X");  for (i=1; i <= (d >> 1); i++) {    u.squareThisPreCalc();    u=u.remainder(f);    dummy=u.add(new GF2Polynomial(32,"X"));    if (!dummy.isZero()) {      g=f.gcd(dummy);      if (!g.isOne()) {        return false;      }    } else {      return false;    }  }  return true;}  }
class C{  @Reference(authors="T. Vincenty",title="Direct and inverse solutions of geodesics on the ellipsoid with application of nested equations",booktitle="Survey review 23 176, 1975",url="http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf") public static double ellipsoidVincentyFormulaDeg(double f,double lat1,double lon1,double lat2,double lon2){  return ellipsoidVincentyFormulaRad(f,MathUtil.deg2rad(lat1),MathUtil.deg2rad(lon1),MathUtil.deg2rad(lat2),MathUtil.deg2rad(lon2));}  }
class C{  public static void add(Calendar c,int val,String unit){  Integer uu=CALENDAR_UNITS.get(unit);  if (null == uu) {    throw new IllegalArgumentException("Adding Unit not recognized: " + unit);  }  c.add(uu.intValue(),val);}  }
class C{  final public int rewind(){  pos=mark;  return pos;}  }
class C{  public void popCurrentTemplateRuleIsNull(){  m_currentTemplateRuleIsNull.pop();}  }
class C{  @Override protected void distributeUpdate(EntryEventImpl event,long lastModifiedTime,boolean ifNew,boolean ifOld,Object expectedOldValue,boolean requireOldValue){}  }
class C{  public Packet(Header header,IRTMPEvent event){  this.header=header;  this.message=event;}  }
class C{  public void build() throws OrderingConstraintException {  for (  DetectorFactory detectorFactory : factoryMap.values()) {    detectorFactory.setEnabledButNonReporting(false);  }  ArrayList<DetectorOrderingConstraint> allConstraints=new ArrayList<DetectorOrderingConstraint>(interPassConstraintList.size() + intraPassConstraintList.size());  allConstraints.addAll(interPassConstraintList);  allConstraints.addAll(intraPassConstraintList);  Map<String,DetectorNode> nodeMapAll=new HashMap<String,DetectorNode>();  ConstraintGraph allPassConstraintGraph=buildConstraintGraph(nodeMapAll,new HashSet<DetectorFactory>(factoryMap.values()),allConstraints);  boolean change;  do {    change=false;    for (Iterator<DetectorNode> i=allPassConstraintGraph.vertexIterator(); i.hasNext(); ) {      DetectorNode end=i.next();      if (factoryChooser.choose(end.getFactory())) {        for (Iterator<ConstraintEdge> j=allPassConstraintGraph.incomingEdgeIterator(end); j.hasNext(); ) {          ConstraintEdge edge=j.next();          DetectorNode start=edge.getSource();          DetectorFactory startFactory=start.getFactory();          if (!factoryChooser.choose(startFactory) && edge.isSingleSource()) {            factoryChooser.enable(startFactory);            change=true;            if (DEBUG || FindBugs2.DEBUG) {              System.out.println("Dependences force enabling of " + startFactory.getFullName());            }          }        }      }    }  } while (change);  for (Iterator<Map.Entry<String,DetectorFactory>> i=factoryMap.entrySet().iterator(); i.hasNext(); ) {    Map.Entry<String,DetectorFactory> e=i.next();    if (!factoryChooser.choose(e.getValue())) {      i.remove();    }  }  Map<String,DetectorNode> nodeMap=new HashMap<String,DetectorNode>();  ConstraintGraph interPassConstraintGraph=buildConstraintGraph(nodeMap,new HashSet<DetectorFactory>(factoryMap.values()),interPassConstraintList);  if (DEBUG) {    System.out.println(interPassConstraintGraph.getNumVertices() + " nodes in inter-pass constraint graph");  }  buildPassList(interPassConstraintGraph);  for (  AnalysisPass pass : passList) {    sortPass(intraPassConstraintList,factoryMap,pass);  }  if (factoryMap.size() > assignedToPassSet.size()) {    AnalysisPass lastPass;    if (passList.isEmpty()) {      lastPass=new AnalysisPass();      addPass(lastPass);    } else {      lastPass=passList.getLast();    }    Set<DetectorFactory> unassignedSet=getUnassignedSet();    for (    DetectorFactory factory : unassignedSet) {      assignToPass(factory,lastPass);    }    appendDetectorsToPass(unassignedSet,lastPass);  }  if (DEBUG) {    print();  }}  }
class C{  @Override public CompletableFuture<String> join(final CharSequence delimiter,final CharSequence prefix,final CharSequence suffix){  return CompletableFuture.supplyAsync(null,exec);}  }
class C{  private static void launchOfficialYouTubePlayer(String videoId,Context context){  try {    Intent intent=com.google.android.youtube.player.YouTubeStandalonePlayer.createVideoIntent((Activity)context,BuildConfig.YOUTUBE_API_KEY,videoId);    context.startActivity(intent);  } catch (  Exception e) {    String errorMsg=context.getString(R.string.launch_offical_player_error);    Log.e(TAG,errorMsg,e);    new AlertDialog.Builder(context).setTitle(R.string.error).setMessage(errorMsg).setIcon(android.R.drawable.ic_dialog_alert).setNeutralButton(android.R.string.ok,null).show();  }}  }
class C{  private String resolveStringDescriptor(String getter,String setter){  return (StringUtils.hasLength(getter) ? getter : setter);}  }
class C{  public static KeyczarReader generateKeyczarReader(DefaultKeyType type,KeyPurpose purpose,int size) throws KeyczarException {  return readerFromKeyczar(createKey(type,purpose,size));}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public static SynapseDialog createSynapseDialog(final Collection<SynapseNode> selectedSynapses){  SynapseDialog sd=createSynapseDialog(getSynapses(selectedSynapses));  return sd;}  }
class C{  public String testAppsServer(){  int index=p_panel != null ? p_panel.fAppsType.getSelectedIndex() : setAppsServerType((String)p_properties.get(ADEMPIERE_APPS_TYPE));  if (index < 0 || index >= APPSTYPE.length)   return "AppsServerType Index invalid: " + index; else   if (m_appsConfig[index] == null)   return "AppsServerType Config class missing: " + index;  return m_appsConfig[index].test();}  }
class C{  public static <K extends Comparable<?>,V>ImmutableRangeMap<K,V> of(Range<K> range,V value){  return new ImmutableRangeMap<K,V>(ImmutableList.of(range),ImmutableList.of(value));}  }
class C{  @Override protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){  target_xCoord_field.drawTextBox();  target_zCoord_field.drawTextBox();  if (tileEntity.getTier() >= 1) {    target_yCoord_field.drawTextBox();    fontRendererObj.drawString(LangUtils.localize("gui.launcherScreen.detHeight"),12,68,4210752);    target_height_field.drawTextBox();    fontRendererObj.drawString(LangUtils.localize("gui.launcherScreen.lockHeight"),12,83,4210752);    if (tileEntity.getTier() > 1) {      target_freq_field.drawTextBox();      fontRendererObj.drawString(LangUtils.localize("gui.misc.freq"),12,98,4210752);    }  }  fontRendererObj.drawString("",45,6,4210752);  fontRendererObj.drawString("\u00a77" + LangUtils.localize("gui.launcherScreen.name"),30,6,4210752);  fontRendererObj.drawString(LangUtils.localize("gui.launcherScreen.target"),12,25,4210752);  fontRendererObj.drawString(LangUtils.localize("gui.misc.XCoord"),25,40,4210752);  fontRendererObj.drawString(LangUtils.localize("gui.misc.ZCoord"),25,55,4210752);  int inaccuracy=30;  if (tileEntity.launcherBase != null) {    if (tileEntity.launcherBase.supportFrame != null) {      inaccuracy=tileEntity.launcherBase.supportFrame.getInaccuracy();    }  }  fontRendererObj.drawString(LangUtils.localize("gui.launcherScreen.inaccuracy").replaceAll("%p","" + inaccuracy),12,113,4210752);  fontRendererObj.drawString(LangUtils.localize("gui.misc.status") + " " + tileEntity.getStatus(),12,125,4210752);  fontRendererObj.drawString(MekanismUtils.getEnergyDisplay(tileEntity.getEnergy()) + "/" + MekanismUtils.getEnergyDisplay(tileEntity.getMaxEnergy()),12,150,4210752);}  }
class C{  private static Pair<Long,Long> load(ByteArray a,InputStream stream,long memoryOffset,long count,CommonIndex positions,CRC32 checksum,ByteArray checksums,PrereadHashFunction hf,boolean checksumsLoaded,long currentSeq) throws IOException {  long tmpCurrentSeq=currentSeq;  final byte[] buffer=new byte[1024 * 1024];  long totalRead=0;  int bytesRead;  long pos=memoryOffset;  while (totalRead < count && (bytesRead=stream.read(buffer,0,(int)Math.min(count - totalRead,buffer.length))) != -1) {    a.set(pos,buffer,bytesRead);    pos+=bytesRead;    int j=0;    while (j < bytesRead) {      if (positions.get(tmpCurrentSeq + 1) == positions.get(tmpCurrentSeq)) {        hf.irvineHash(0L);        tmpCurrentSeq++;        continue;      }      final int len=(int)(positions.get(tmpCurrentSeq + 1) - (memoryOffset + totalRead + j));      if (j + len <= bytesRead) {        checksum.update(buffer,j,len);        hf.irvineHash(buffer,j,len);        hf.irvineHash(positions.get(tmpCurrentSeq + 1) - positions.get(tmpCurrentSeq));        if (checksumsLoaded) {          if ((byte)checksum.getValue() != checksums.get(tmpCurrentSeq)) {            throw new CorruptSdfException("Sequence: " + tmpCurrentSeq + " failed checksum");          }        } else {          checksums.set(tmpCurrentSeq,(byte)checksum.getValue());        }        tmpCurrentSeq++;        checksum.reset();      } else {        hf.irvineHash(buffer,j,bytesRead - j);        checksum.update(buffer,j,bytesRead - j);      }      j+=len;    }    totalRead+=bytesRead;  }  return new Pair<>(totalRead,tmpCurrentSeq);}  }
class C{  public int size(){  return count;}  }
class C{  public void addMethod(MethodType type){  addMethodNoBidirectionalUpdate(type);  type.setClassOrInterfaceTypeNoBidirectionalUpdate(this);}  }
class C{  public int detectEncoding(File testfile){  FileInputStream chinesefile;  byte[] rawtext;  rawtext=new byte[(int)testfile.length()];  try {    chinesefile=new FileInputStream(testfile);    chinesefile.read(rawtext);    chinesefile.close();  } catch (  Exception e) {    System.err.println("Error: " + e);  }  return detectEncoding(rawtext);}  }
class C{  public boolean isAlmostFinal(){  return (getDetails().derivedClasses.size() == 0);}  }
class C{  private void mapGUI(TypedArray attributes){  if (getChildCount() == 2) {    int dragViewId=attributes.getResourceId(R.styleable.dragger_layout_drag_view_id,R.id.drag_view);    int shadowViewId=attributes.getResourceId(R.styleable.dragger_layout_shadow_view_id,R.id.shadow_view);    if (dragViewId > 0) {      dragView=findViewById(dragViewId);    }    if (shadowViewId > 0) {      shadowView=findViewById(shadowViewId);    }  } else {    throw new IllegalStateException("DraggerView must contains only two direct child");  }}  }
class C{  public void configure(){  EcosTrafficController control=new EcosTrafficController();  control.connectPort(this);  control.setAdapterMemo(this.getSystemConnectionMemo());  this.getSystemConnectionMemo().setEcosTrafficController(control);  this.getSystemConnectionMemo().configureManagers();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  int row, col;  int nrows, ncols;  double x, y;  double z=0;  int a, i;  int progress=0;  int numPoints=0;  double maxDist=Double.POSITIVE_INFINITY;  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  double north, south, east, west;  double resolution=1;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  List<KdTree.Entry<Double>> results;  double noData=-32768;  double northing, easting;  String returnNumberToInterpolate="all points";  String suffix="";  boolean excludeNeverClassified=false;  boolean excludeUnclassified=false;  boolean excludeBareGround=false;  boolean excludeLowVegetation=false;  boolean excludeMediumVegetation=false;  boolean excludeHighVegetation=false;  boolean excludeBuilding=false;  boolean excludeLowPoint=false;  boolean excludeModelKeyPoint=false;  boolean excludeWater=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  suffix=args[1].trim();  returnNumberToInterpolate=args[2].toLowerCase();  resolution=Double.parseDouble(args[3]);  excludeNeverClassified=Boolean.parseBoolean(args[4]);  excludeUnclassified=Boolean.parseBoolean(args[5]);  excludeBareGround=Boolean.parseBoolean(args[6]);  excludeLowVegetation=Boolean.parseBoolean(args[7]);  excludeMediumVegetation=Boolean.parseBoolean(args[8]);  excludeHighVegetation=Boolean.parseBoolean(args[9]);  excludeBuilding=Boolean.parseBoolean(args[10]);  excludeLowPoint=Boolean.parseBoolean(args[11]);  excludeModelKeyPoint=Boolean.parseBoolean(args[12]);  excludeWater=Boolean.parseBoolean(args[13]);  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    boolean[] classValuesToExclude=new boolean[32];    if (excludeNeverClassified) {      classValuesToExclude[0]=true;    }    if (excludeUnclassified) {      classValuesToExclude[1]=true;    }    if (excludeBareGround) {      classValuesToExclude[2]=true;    }    if (excludeLowVegetation) {      classValuesToExclude[3]=true;    }    if (excludeMediumVegetation) {      classValuesToExclude[4]=true;    }    if (excludeHighVegetation) {      classValuesToExclude[5]=true;    }    if (excludeBuilding) {      classValuesToExclude[6]=true;    }    if (excludeLowPoint) {      classValuesToExclude[7]=true;    }    if (excludeModelKeyPoint) {      classValuesToExclude[8]=true;    }    if (excludeWater) {      classValuesToExclude[9]=true;    }    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    long numPointsInFile=0;    maxDist=(resolution * 2) * (resolution * 2);    PointRecord point;    double[] entry;    for (int j=0; j < numPointFiles; j++) {      LASReader las=new LASReader(pointFiles[j]);      progress=(int)((j + 1) * 100d / numPointFiles);      updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ " Reading point data:",progress);      numPointsInFile=las.getNumPointRecords();      numPoints=0;      for (a=0; a < las.getNumPointRecords(); a++) {        point=las.getPointRecord(a);        if (returnNumberToInterpolate.equals("all points")) {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()])) {            numPoints++;          }        } else         if (returnNumberToInterpolate.equals("first return")) {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == 1) {            numPoints++;          }        } else {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == point.getNumberOfReturns()) {            numPoints++;          }        }      }      minX=Double.POSITIVE_INFINITY;      maxX=Double.NEGATIVE_INFINITY;      minY=Double.POSITIVE_INFINITY;      maxY=Double.NEGATIVE_INFINITY;      KdTree<Double> pointsTree=new KdTree.SqrEuclid<Double>(2,new Integer(numPoints));      if (returnNumberToInterpolate.equals("all points")) {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()])) {            x=point.getX();            y=point.getY();            z=point.getZ();            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      } else       if (returnNumberToInterpolate.equals("first return")) {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == 1) {            x=point.getX();            y=point.getY();            z=point.getZ();            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      } else {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == point.getNumberOfReturns()) {            x=point.getX();            y=point.getY();            z=point.getZ();            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      }      outputHeader=pointFiles[j].replace(".las",suffix + ".dep");      if ((new File(outputHeader)).exists()) {        (new File(outputHeader)).delete();        (new File(outputHeader.replace(".dep",".tas"))).delete();      }      west=minX - 0.5 * resolution;      north=maxY + 0.5 * resolution;      nrows=(int)(Math.ceil((north - minY) / resolution));      ncols=(int)(Math.ceil((maxX - west) / resolution));      south=north - nrows * resolution;      east=west + ncols * resolution;      fw=new FileWriter(outputHeader,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str1="Min:\t" + Double.toString(Integer.MAX_VALUE);      out.println(str1);      str1="Max:\t" + Double.toString(Integer.MIN_VALUE);      out.println(str1);      str1="North:\t" + Double.toString(north);      out.println(str1);      str1="South:\t" + Double.toString(south);      out.println(str1);      str1="East:\t" + Double.toString(east);      out.println(str1);      str1="West:\t" + Double.toString(west);      out.println(str1);      str1="Cols:\t" + Integer.toString(ncols);      out.println(str1);      str1="Rows:\t" + Integer.toString(nrows);      out.println(str1);      str1="Data Type:\t" + "float";      out.println(str1);      str1="Z Units:\t" + "not specified";      out.println(str1);      str1="XY Units:\t" + "not specified";      out.println(str1);      str1="Projection:\t" + "not specified";      out.println(str1);      str1="Data Scale:\tcontinuous";      out.println(str1);      str1="Preferred Palette:\t" + "spectrum.pal";      out.println(str1);      str1="NoData:\t" + noData;      out.println(str1);      if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {        str1="Byte Order:\t" + "LITTLE_ENDIAN";      } else {        str1="Byte Order:\t" + "BIG_ENDIAN";      }      out.println(str1);      out.close();      WhiteboxRaster image=new WhiteboxRaster(outputHeader,"rw");      int numPointsToUse=10;      int numPointsInArea=0;      boolean flag=false;      int maxIteration=20;      int k=0;      double halfResolution=resolution / 2;      double area=Math.PI * maxDist;      for (row=0; row < nrows; row++) {        for (col=0; col < ncols; col++) {          easting=(col * resolution) + (west + halfResolution);          northing=(north - halfResolution) - (row * resolution);          entry=new double[]{northing,easting};          numPointsToUse=10;          flag=false;          k=0;          do {            k++;            results=pointsTree.nearestNeighbor(entry,numPointsToUse,true);            for (i=0; i < results.size(); i++) {              if (results.get(i).distance > maxDist) {                flag=true;              }            }            if (!flag) {              numPointsToUse=numPointsToUse * 2;            }          } while (!flag && k < maxIteration);          numPointsInArea=0;          for (i=0; i < results.size(); i++) {            if (results.get(i).distance <= maxDist) {              numPointsInArea++;            }          }          image.setValue(row,col,numPointsInArea / area);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nrows - 1));        updateProgress("Calculating point density:",progress);      }      image.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      image.addMetadataEntry("Created on " + new Date());      image.close();    }    returnData(pointFiles[0].replace(".las",suffix + ".dep"));  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected TranslationTable(String baseTableName){  if (baseTableName == null)   throw new IllegalArgumentException("Base Table Name is null");  m_baseTableName=baseTableName;  m_trlTableName=baseTableName + "_Trl";  initColumns();  log.fine(toString());}  }
class C{  private void startLoader(){  Bundle bundle=new Bundle();  Location location=null;  if (isAutoLocateEnabled() && Tools.isLocationServiceEnabled(this)) {    mGPSHelper=new GpsHelper(this,this);    location=mGPSHelper.getLastKnownLocation();  } else {    setAutoLocate(false);    location=new Location("custom");    location.setAccuracy(0f);    location.setLatitude((double)PreferencesHelper.getSharedPreferencesFloat(this,PreferencesHelper.KEYS.LOCATION_LAT,DEFAULT_LATITUDE));    location.setLongitude((double)PreferencesHelper.getSharedPreferencesFloat(this,PreferencesHelper.KEYS.LOCATION_LON,DEFAULT_LONGITUDE));  }  bundle.putParcelable("location",location);  getSupportLoaderManager().initLoader(LOADER_ID,bundle,this);}  }
class C{  @Override public void endElement(String uri,String localName,String qName){  elementProcessor.end();  elementProcessor=elementProcessor.getParent();}  }
class C{  public <T>void putEnv(String key,T value){  String ekey=FlexibleStringExpander.expandString(key,this.env);  FlexibleMapAccessor<T> fma=FlexibleMapAccessor.getInstance(ekey);  this.putEnv(fma,value);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getAttributeNS03.class,args);}  }
class C{  private Element createIDPEntityDescriptor(boolean exportPrivateData) throws Exception {  Element entEle=doc.createElementNS(null,SAMLNames.ENTDESCRIPTOR);  String id=idmClient.getEntityID(tenantName);  String alias=idmClient.getLocalIDPAlias(tenantName);  if (id == null) {    id=tenantName;  }  entEle.setAttribute(SAMLNames.ENTID,id);  Element idpSSO=createIDPSSODescriptor(exportPrivateData);  entEle.appendChild(idpSSO);  if (exportPrivateData) {    if (alias == null || alias.isEmpty()) {      alias=id;    }    Element orgEle=createOrganization(tenantName,tenantName,alias,SAMLNames.ENGLISH);    entEle.appendChild(orgEle);  }  return entEle;}  }
class C{  public HibernateStore(SessionFactory aSessionFactory){  this.sessionFactory=aSessionFactory;  this.isScrollEnabled=true;  this.scrollMode=ScrollMode.FORWARD_ONLY;}  }
class C{  @RequestMapping(value=STORAGE_UNIT_NOTIFICATIONS_URI_PREFIX,method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_STORAGE_UNIT_NOTIFICATION_REGISTRATIONS_POST) public StorageUnitNotificationRegistration createStorageUnitNotificationRegistration(@RequestBody StorageUnitNotificationRegistrationCreateRequest request){  return storageUnitNotificationRegistrationService.createStorageUnitNotificationRegistration(request);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:13.140 -0500",hash_original_method="CA4464BE27725D08DF2A2ECD7DD50C0A",hash_generated_method="F47C9B72D0495D1FB90B4A55DD62F1C2") public void run(){  android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_DEFAULT + android.os.Process.THREAD_PRIORITY_LESS_FAVORABLE);  mCurrentThreadTime=0;  mTotalThreadTime=0;  while (mRunning) {    if (mCurrentThreadTime == -1) {      mCurrentThreadTime=SystemClock.currentThreadTimeMillis();    }    Request request;    request=mRequestFeeder.getRequest();    if (request == null) {synchronized (mRequestFeeder) {        if (HttpLog.LOGV)         HttpLog.v("ConnectionThread: Waiting for work");        mWaiting=true;        try {          mRequestFeeder.wait();        } catch (        InterruptedException e) {        }        mWaiting=false;        if (mCurrentThreadTime != 0) {          mCurrentThreadTime=SystemClock.currentThreadTimeMillis();        }      }    } else {      if (HttpLog.LOGV)       HttpLog.v("ConnectionThread: new request " + request.mHost + " "+ request);      mConnection=mConnectionManager.getConnection(mContext,request.mHost);      mConnection.processRequests(request);      if (mConnection.getCanPersist()) {        if (!mConnectionManager.recycleConnection(mConnection)) {          mConnection.closeConnection();        }      } else {        mConnection.closeConnection();      }      mConnection=null;      if (mCurrentThreadTime > 0) {        long start=mCurrentThreadTime;        mCurrentThreadTime=SystemClock.currentThreadTimeMillis();        mTotalThreadTime+=mCurrentThreadTime - start;      }    }  }}  }
class C{  public byte[] serialize(){  StringBuilder sb=new StringBuilder();  sb.append(metadataFormatVersion).append(LINE_SPLITTER);  sb.append(dlType).append(LINE_SPLITTER);  sb.append(dlConfig.serialize());  LOG.debug("Serialized dl metadata {}.",sb);  return sb.toString().getBytes(UTF_8);}  }
class C{  public static String block(Stream<String> rows){  return block(rows.collect(joining(nl())));}  }
class C{  @Override public String key(){  return prop.key();}  }
class C{  public CpcLocal(IndependenceTest independenceTest){  if (independenceTest == null) {    throw new NullPointerException();  }  this.independenceTest=independenceTest;}  }
class C{  public static RVMMethod lookupMethod(RVMClass cls,MethodReference ref){  RVMMethod newmeth=null;  if (cls.isResolved() && !cls.isInterface()) {    Atom mn=ref.getName();    Atom md=ref.getDescriptor();    for (; (newmeth == null) && (cls != null); cls=cls.getSuperClass()) {      newmeth=cls.findDeclaredMethod(mn,md);    }  }  return newmeth;}  }
class C{  public LineSet geoJsonToArdor3D(GeoJsonObject gjRoot,LineSet root,Color pointColor,Color lineColor,String elevAttrName){  landscapeMinZ=0;  if (elevAttrName == null) {    World world=World.getInstance();    if (world != null)     landscapeMinZ=Landscape.getInstance().getMinimumElevation();  }  root.getSceneHints().setLightCombineMode(LightCombineMode.Off);  int count=0;  if (gjRoot instanceof GeoJsonFeature) {    GeoJsonFeature feature=(GeoJsonFeature)gjRoot;    Spatial spatial=geojsonFeatureToArdor3D(feature,pointColor,lineColor,elevAttrName,count);    if (spatial != null) {      root.attachChild(spatial);      count++;    }  } else   if (gjRoot instanceof GeoJsonFeatureCollection) {    GeoJsonFeatureCollection collection=(GeoJsonFeatureCollection)gjRoot;    ArrayList<GeoJsonFeature> featureList=collection.getFeatureList();    for (int i=0; i < featureList.size(); ++i) {      Spatial spatial=geojsonFeatureToArdor3D(featureList.get(i),pointColor,lineColor,elevAttrName,count);      if (spatial != null) {        root.attachChild(spatial);        count++;      }    }  }  Console console=Console.getInstance();  if (console != null)   console.println("Found " + count + " features for GeoJSON file "+ filePath+ "."); else   System.out.println("Found " + count + " features for GeoJSON file "+ filePath+ ".");  return (root);}  }
class C{  public synchronized void error(Product p,Exception e){  if ((e != null) && (e.getMessage() != null)) {    String message="";    if (p != null) {      String o=p.getOrigin();      if (o != null) {        String file=o.substring(o.lastIndexOf("/") + 1,o.length());        message="(" + file + ")";      }    }    processingErrors+=e.getMessage() + message + "<br>";  }  errorCounter++;  if ((endCounter + errorCounter) >= getTotalProcessed()) {    processingsDone(null);  }}  }
class C{  public CStackView(final CDebugPerspectiveModel debugPerspectiveModel){  super(new BorderLayout());  Preconditions.checkNotNull(debugPerspectiveModel,"IE01503: Debug perspective model argument can not be null");  setBorder(new TitledBorder("Stack"));  m_model.setDebugger(debugPerspectiveModel.getCurrentSelectedDebugger());  m_stackView=new JStackView(m_model);  m_stackView.addMouseListener(new InternalMouseListener());  add(m_stackView);  m_synchronizer=new CStackViewSynchronizer(m_stackView,m_model,debugPerspectiveModel);}  }
class C{  public SamzaResource peekResource(String host){synchronized (lock) {    List<SamzaResource> resourcesOnTheHost=this.allocatedResources.get(host);    if (resourcesOnTheHost == null || resourcesOnTheHost.isEmpty()) {      return null;    }    return resourcesOnTheHost.get(0);  }}  }
class C{  public static void removeThreadLocal(ThreadLocal<?> threadLocal){  if (threadLocal == null) {    return;  }  toPropagate.remove(threadLocal);}  }
class C{  public void addNumOutputIStream(int numIStream){  numOutputIStream.addAndGet(numIStream);}  }
class C{  public static org.opcfoundation.ua.transport.security.KeyPair loadKeyPairFromProtectedStore(String storeLocation,String alias,String storePW,String privatePW) throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException, UnrecoverableKeyException {  KeyStore store=null;  store=KeyStore.getInstance("JKS");  File keystoreFile=new File(storeLocation);  FileInputStream in=new FileInputStream(keystoreFile);  store.load(in,storePW.toCharArray());  in.close();  X509Certificate cert=(X509Certificate)store.getCertificate(alias);  RSAPrivateKey key=(RSAPrivateKey)store.getKey(alias,privatePW.toCharArray());  return new org.opcfoundation.ua.transport.security.KeyPair(new Cert(cert),new PrivKey(key));}  }
class C{  public final boolean containsKey(IFitsHeader key){  return this.cards.containsKey(key.key());}  }
class C{  public static boolean isVarargs(int flags){  return (flags & AccVarargs) != 0;}  }
class C{  public List<A> appendList(ListBuffer<A> x){  return appendList(x.toList());}  }
class C{  public void append(StringBuffer buffer,String fieldName,boolean[] array,Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  NamedList<SolrDocumentList> buildMoreLikeThisNamed(Map<Object,SolrDocumentList> allMlt,Map<Object,ShardDoc> resultIds){  NamedList<SolrDocumentList> result=new NamedList<>();  TreeMap<Integer,Object> sortingMap=new TreeMap<>();  for (  Entry<Object,ShardDoc> next : resultIds.entrySet()) {    sortingMap.put(next.getValue().positionInResponse,next.getKey());  }  for (  Object key : sortingMap.values()) {    SolrDocumentList sdl=allMlt.get(key);    if (sdl == null) {      sdl=new SolrDocumentList();      sdl.setNumFound(0);      sdl.setStart(0);    }    result.add(key.toString(),sdl);  }  return result;}  }
class C{  public void addSource(java.nio.file.Path resource,IPath containerPath,SourceElementParser parser){  SearchParticipant participant=SearchEngine.getDefaultSearchParticipant(this,javaProject);  SearchDocument document=participant.getDocument(resource.toAbsolutePath().toString());  document.setParser(parser);  IndexLocation indexLocation=computeIndexLocation(containerPath);  scheduleDocumentIndexing(document,containerPath,indexLocation,participant);}  }
class C{  public static void v(String msg,Throwable cause){  if (BuildConfig.DEBUG) {    Log.v(LOG_TAG,msg,cause);  }}  }
class C{  public MemoryMapSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public static PsiFile placeFile(Project project,String path,String filename) throws IOException {  return placeFile(project,path,filename,null);}  }
class C{  public static final void merge(InputStream in1,InputStream in2,OutputStream out,boolean closeIS1,boolean closeIS2,boolean closeOS) throws IOException {  try {    merge(in1,in2,out,0xffff);  }  finally {    if (closeIS1)     closeEL(in1);    if (closeIS2)     closeEL(in2);    if (closeOS)     closeEL(out);  }}  }
class C{  private void widthStmt(ColumnFormat cf) throws ParserException, IOException {  match(WIDTH);  double width=lookahead.nval;  matchNumber();  cf.setWidth((int)width);  log(pdebug,"Parsed: width -> " + width);}  }
class C{  @Override public boolean equals(Object other){  return other instanceof ObjectReference && ((ObjectReference)other).value.equals(value);}  }
class C{  public IntentShare addExtraProvider(@NonNull ExtraProvider extraProvider){  if (extraProvider == null) {    throw new IllegalArgumentException("Extra provider can't be null");  } else   if (packageWithExtraProvider.contains(extraProvider.packageName)) {    throw new IllegalArgumentException("Extra provider already provided for the package : " + extraProvider.packageName);  }  extraProviders.add(extraProvider);  return this;}  }
class C{  protected CleanUpOptions(Map<String,String> options){  fOptions=options;}  }
class C{  protected int calculateRankCrossing(int i,mxGraphHierarchyModel model){  int totalCrossings=0;  mxGraphHierarchyRank rank=model.ranks.get(new Integer(i));  mxGraphHierarchyRank previousRank=model.ranks.get(new Integer(i - 1));  int currentRankSize=rank.size();  int previousRankSize=previousRank.size();  int[][] connections=new int[currentRankSize][previousRankSize];  Iterator<mxGraphAbstractHierarchyCell> iter=rank.iterator();  while (iter.hasNext()) {    mxGraphAbstractHierarchyCell cell=iter.next();    int rankPosition=cell.getGeneralPurposeVariable(i);    Collection<mxGraphAbstractHierarchyCell> connectedCells=cell.getPreviousLayerConnectedCells(i);    Iterator<mxGraphAbstractHierarchyCell> iter2=connectedCells.iterator();    while (iter2.hasNext()) {      mxGraphAbstractHierarchyCell connectedCell=iter2.next();      int otherCellRankPosition=connectedCell.getGeneralPurposeVariable(i - 1);      connections[rankPosition][otherCellRankPosition]=201207;    }  }  for (int j=0; j < currentRankSize; j++) {    for (int k=0; k < previousRankSize; k++) {      if (connections[j][k] == 201207) {        for (int j2=j + 1; j2 < currentRankSize; j2++) {          for (int k2=0; k2 < k; k2++) {            if (connections[j2][k2] == 201207) {              totalCrossings++;            }          }        }        for (int j2=0; j2 < j; j2++) {          for (int k2=k + 1; k2 < previousRankSize; k2++) {            if (connections[j2][k2] == 201207) {              totalCrossings++;            }          }        }      }    }  }  return totalCrossings / 2;}  }
class C{  public static void registerDownloadFileChangeListener(OnDownloadFileChangeListener onDownloadFileChangeListener,DownloadFileChangeConfiguration downloadFileChangeConfiguration){  getFileDownloadManager().registerDownloadFileChangeListener(onDownloadFileChangeListener,downloadFileChangeConfiguration);}  }
class C{  public void selectGraphic(int index){  EsriGraphicList list=getEsriGraphicList();  list.deselect();  selectedGraphics.clear();  selectGraphic(list.getOMGraphicAt(index));  graphicIndex=index;  list.regenerate(proj);}  }
class C{  public boolean verbose(){  return verbose;}  }
class C{  private void updateDbLog4JConfigurationFromResourceLocation(String resourceLocation,Path outputPath,String log4jConfigurationColumn,String configEntityKey) throws Exception {  String log4JFileContents=IOUtils.toString(resourceLoader.getResource(resourceLocation).getInputStream());  log4JFileContents=log4JFileContents.replace("monitorInterval=\"0\"","monitorInterval=\"1\"");  log4JFileContents=log4JFileContents.replace(LOG4J_FILENAME_TOKEN,outputPath.toAbsolutePath().toString().replace("\\","/"));  String sql=String.format("UPDATE %s SET %s=? WHERE %s=?",ConfigurationEntity.TABLE_NAME,log4jConfigurationColumn,ConfigurationEntity.COLUMN_KEY);  executePreparedStatement(sql,log4JFileContents,configEntityKey);}  }
class C{  public Coord clone(){  Coord clone=null;  try {    clone=(Coord)super.clone();  } catch (  CloneNotSupportedException e) {    e.printStackTrace();    System.exit(-1);  }  return clone;}  }
class C{  public InternalFunctionException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  private void analyzeSeedDocument(Document inputDocument,Map<String,List<String[]>> fieldName2tokensArray,Map<String,Float> fieldName2boost) throws IOException {  for (int i=0; i < textFieldNames.length; i++) {    String fieldName=textFieldNames[i];    float boost=1;    List<String[]> tokenizedValues=new LinkedList<>();    if (fieldName.contains("^")) {      String[] field2boost=fieldName.split("\\^");      fieldName=field2boost[0];      boost=Float.parseFloat(field2boost[1]);    }    IndexableField[] fieldValues=inputDocument.getFields(fieldName);    for (    IndexableField fieldValue : fieldValues) {      TokenStream fieldTokens=fieldValue.tokenStream(field2analyzer.get(fieldName),null);      String[] fieldTokensArray=getTokenArray(fieldTokens);      tokenizedValues.add(fieldTokensArray);    }    fieldName2tokensArray.put(fieldName,tokenizedValues);    fieldName2boost.put(fieldName,boost);    textFieldNames[i]=fieldName;  }}  }
class C{  public boolean hasNonNullKeys(){  for (  DeviceField f : keyFields) {switch (f) {case MAC:      return true;case IPV4:    if (entity.ipv4Address != null)     return true;  break;case SWITCH:if (entity.switchDPID != null) return true;break;case PORT:if (entity.switchPort != null) return true;break;case VLAN:if (entity.vlan != null) return true;break;}}return false;}  }
class C{  public void test_DELETE_accessPath_delete_p_o_Literal() throws Exception {  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.ttl");  final long mutationResult=doDeleteWithAccessPath(null,RDFS.LABEL,new LiteralImpl("Bryan"));  assertEquals(1,mutationResult);}  }
class C{  public Object storedData(Object o){  Object last=stored;  stored=o;  return last;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void fillHotArticles(final Map<String,Object> dataModel) throws Exception {  dataModel.put(Common.SIDE_HOT_ARTICLES,articleQueryService.getHotArticles(Symphonys.getInt("sideHotArticlesCnt")));}  }
class C{  public void recordSnmpStats(Map<String,String> snmpMap){  if (snmpMap == null)   return;  setSyscputime(CommonUtils.getMapValueLong(snmpMap,"ssCpuRawSystem",-1L));  setUsercputime(CommonUtils.getMapValueLong(snmpMap,"ssCpuRawUser",-1L));  this.setSoftirqtime(CommonUtils.getMapValueLong(snmpMap,"ssCpuRawSoftIRQ",-1L));  setAvailableMem(CommonUtils.getMapValueLong(snmpMap,"memAvailReal",-1L) + CommonUtils.getMapValueLong(snmpMap,"memCached",-1L));  setIotime(CommonUtils.getMapValueLong(snmpMap,"ssCpuRawWait",-1L));  setLoadAverage(CommonUtils.getMapValueFloat(snmpMap,"laLoad5m",-1.0f));  setTotalcputime(CommonUtils.getMapValueLong(snmpMap,"ssCpuRawSystem",-1L) + CommonUtils.getMapValueLong(snmpMap,"ssCpuRawUser",-1L) + CommonUtils.getMapValueLong(snmpMap,"ssCpuRawWait",-1L)+ CommonUtils.getMapValueLong(snmpMap,"ssCpuRawIdle",-1L)+ CommonUtils.getMapValueLong(snmpMap,"ssCpuRawNice",-1L)+ CommonUtils.getMapValueLong(snmpMap,"ssCpuRawSoftIRQ",0L));  this.setSwapout(CommonUtils.getMapValueLong(snmpMap,"ssRawSwapOut",0L));}  }
class C{  public void buildClassifier(Instances insts) throws Exception {  getCapabilities().testWithFail(insts);  insts=new Instances(insts);  insts.deleteWithMissingClass();  m_Train=new Instances(insts);  m_ReplaceMissingValues=new ReplaceMissingValues();  m_ReplaceMissingValues.setInputFormat(m_Train);  m_Train=Filter.useFilter(m_Train,m_ReplaceMissingValues);  m_NominalToBinary=new NominalToBinary();  m_NominalToBinary.setInputFormat(m_Train);  m_Train=Filter.useFilter(m_Train,m_NominalToBinary);  m_Train.randomize(new Random(m_Seed));  m_Additions=new int[m_MaxK + 1];  m_IsAddition=new boolean[m_MaxK + 1];  m_Weights=new int[m_MaxK + 1];  m_K=0;  out:   for (int it=0; it < m_NumIterations; it++) {    for (int i=0; i < m_Train.numInstances(); i++) {      Instance inst=m_Train.instance(i);      if (!inst.classIsMissing()) {        int prediction=makePrediction(m_K,inst);        int classValue=(int)inst.classValue();        if (prediction == classValue) {          m_Weights[m_K]++;        } else {          m_IsAddition[m_K]=(classValue == 1);          m_Additions[m_K]=i;          m_K++;          m_Weights[m_K]++;        }        if (m_K == m_MaxK) {          break out;        }      }    }  }}  }
class C{  private void start(){  StendhalRPZone zone=StendhalRPWorld.get().getZone(ZONE_NAME);  System.setProperty("stendhal.forcezone",zone.getName());  for (  RPObject object : zone) {    if (object instanceof Portal && ((Portal)object).getDestinationReference() != null) {      zone.remove(object);      break;    }  }  createNPC(zone);}  }
class C{  boolean isNumeric(char ch){  return (ch >= '0' && ch <= '9');}  }
class C{  public CompanyObject(CompanyObject parent){  this.id=parent.getId();  this.name=parent.getName();  this.creatorId=parent.getCreatorId();  this.created=parent.getCreated();  this.updated=parent.getUpdated();  this.deleted=parent.getDeleted();  this.privileged=parent.getPrivileged();  this.money=parent.getMoney();  this.lastPayTime=parent.getLastPayTime();  this.creatorName=parent.getCreatorName();  this.creatorAvatar=parent.getCreatorAvatar();}  }
class C{  public void destroy() throws IOException {  _logWriterQueue.close();}  }
class C{  @Override public void finishStage(ResponseBuilder rb){  SolrParams params=rb.req.getParams();  LOG.info("SuggestComponent finishStage with : " + params);  if (!params.getBool(COMPONENT_NAME,false) || rb.stage != ResponseBuilder.STAGE_GET_FIELDS)   return;  int count=params.getInt(SUGGEST_COUNT,1);  List<SuggesterResult> suggesterResults=new ArrayList<>();  for (  ShardRequest sreq : rb.finished) {    for (    ShardResponse srsp : sreq.responses) {      NamedList<Object> resp;      if ((resp=srsp.getSolrResponse().getResponse()) != null) {        @SuppressWarnings("unchecked") Map<String,SimpleOrderedMap<NamedList<Object>>> namedList=(Map<String,SimpleOrderedMap<NamedList<Object>>>)resp.get(SuggesterResultLabels.SUGGEST);        LOG.info(srsp.getShard() + " : " + namedList);        suggesterResults.add(toSuggesterResult(namedList));      }    }  }  SuggesterResult suggesterResult=merge(suggesterResults,count);  Map<String,SimpleOrderedMap<NamedList<Object>>> namedListResults=new HashMap<>();  toNamedList(suggesterResult,namedListResults);  rb.rsp.add(SuggesterResultLabels.SUGGEST,namedListResults);}  }
class C{  public boolean free(T value){  return _ringQueue.offer(new SoftReference<T>(value));}  }
class C{  @Override public void restoreState(FacesContext context,Object state){  if (context == null) {    throw new NullPointerException();  }  if (state == null) {    return;  }  if (!component.initialStateMarked() && !defaultMap.isEmpty()) {    defaultMap.clear();    if (deltaMap != null && !deltaMap.isEmpty()) {      deltaMap.clear();    }  }  Object[] savedState=(Object[])state;  if (savedState[savedState.length - 1] != null) {    component.initialState=(Boolean)savedState[savedState.length - 1];  }  int length=(savedState.length - 1) / 2;  for (int i=0; i < length; i++) {    Object value=savedState[i * 2 + 1];    Serializable serializable=(Serializable)savedState[i * 2];    if (value != null) {      if (value instanceof Collection) {        value=restoreAttachedState(context,value);      } else       if (value instanceof StateHolderSaver) {        value=((StateHolderSaver)value).restore(context);      } else {        value=(value instanceof Serializable ? value : restoreAttachedState(context,value));      }    }    if (value instanceof Map) {      for (      Map.Entry<String,Object> entry : ((Map<String,Object>)value).entrySet()) {        this.put(serializable,entry.getKey(),entry.getValue());      }    } else     if (value instanceof List) {      defaultMap.remove(serializable);      deltaMap.remove(serializable);      List values=(List)value;      values.stream().forEach(null);    } else {      put(serializable,value);      handleAttribute(serializable.toString(),value);    }  }}  }
class C{  public boolean hasOAuthProxyResponse(){  return httpHeaders.containsKey(OAuthProxyProtocol.Header.X_OAUTH_APPROVAL_URL) || httpHeaders.containsKey(OAuthProxyProtocol.Header.X_OAUTH_STATE) || httpHeaders.containsKey(OAuthProxyProtocol.Header.X_OAUTH_ERROR)|| httpHeaders.containsKey(OAuthProxyProtocol.Header.X_OAUTH_ERROR);}  }
class C{  private Ref notOp() throws PageException {  if (cfml.isValidIndex()) {    if (cfml.isCurrent('!') && !cfml.isCurrent("!=")) {      cfml.next();      cfml.removeSpace();      return new Not(decsionOp());    } else     if (cfml.forwardIfCurrentAndNoWordAfter("not")) {      cfml.removeSpace();      return new Not(decsionOp());    }  }  return decsionOp();}  }
class C{  public JSONArray names(){  JSONArray ja=new JSONArray();  Iterator keys=this.keys();  while (keys.hasNext()) {    ja.put(keys.next());  }  return ja.length() == 0 ? null : ja;}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(oid);  v.add(accessRights);  return new DERApplicationSpecific(EACTags.CERTIFICATE_HOLDER_AUTHORIZATION_TEMPLATE,v);}  }
class C{  public boolean isOptional(){  return ((this.getTypeRef() != null) && (this.getTypeRef().getUndefModifier() == UndefModifier.OPTIONAL));}  }
class C{  protected BoolExpr_Impl(){  super();}  }
class C{  private List<Pair<Subspace,ModifiableDBIDs>> determineClusters(List<CLIQUESubspace<V>> denseSubspaces){  List<Pair<Subspace,ModifiableDBIDs>> clusters=new ArrayList<>();  for (  CLIQUESubspace<V> subspace : denseSubspaces) {    List<Pair<Subspace,ModifiableDBIDs>> clustersInSubspace=subspace.determineClusters();    if (LOG.isDebugging()) {      LOG.debugFine("Subspace " + subspace + " clusters "+ clustersInSubspace.size());    }    clusters.addAll(clustersInSubspace);  }  return clusters;}  }
class C{  public void clear(){  for (int i=0; i < nodes.size(); i++) {    for (int j=0; j < nodes.size(); j++) {      graphMatrix[i][j]=0;    }  }}  }
class C{  public static void copyFile(final File fromFile,final File toFile) throws UncheckedIOException {  InputStream from=null;  OutputStream to=null;  try {    from=new FileInputStream(fromFile);    to=new FileOutputStream(toFile);    copyStream(from,to);  } catch (  IOException e) {    throw new UncheckedIOException(e);  } finally {    if (from != null) {      try {        from.close();      } catch (      IOException ignored) {        ignored.printStackTrace();      }    }    if (to != null) {      try {        to.close();      } catch (      IOException ignored) {        ignored.printStackTrace();      }    }  }}  }
class C{  public ListNode sortList(ListNode head){  if (head == null || head.next == null)   return head;  ListNode tail=head;  int len=0;  while (tail != null) {    tail=tail.next;    len++;  }  ListNode dummy=new ListNode(Integer.MIN_VALUE);  dummy.next=head;  head=mergeSort(dummy,head,len);  return head;}  }
class C{  public boolean isChanged(Domain domain){  return !xmlFiles.values().contains(domain.getSourceFile()) || !xmlFiles.values().containsAll(domain.getImportedFiles()) || xmlFiles.size() != domain.getImportedFiles().size() + 1;}  }
class C{  public static List toEdges(Collection dirEdges){  List edges=new ArrayList();  for (Iterator i=dirEdges.iterator(); i.hasNext(); ) {    edges.add(((DirectedEdge)i.next()).parentEdge);  }  return edges;}  }
class C{  public BitSet(final int sizeinbits){  if (sizeinbits < 0)   throw new NegativeArraySizeException("negative number of bits: " + sizeinbits);  this.data=new long[(sizeinbits + 63) / 64];}  }
class C{  public boolean addToInactiveList(DownloadInfoRunnable downloadInfoRunnable){  return mInactiveList.add(downloadInfoRunnable);}  }
class C{  public TestCompileClassPathImpl(Project proj){  super(proj);}  }
class C{  public final void writeDouble(double[] pa,int start,int n) throws IOException {  for (int i=0; i < n; i++) {    writeDouble(pa[start + i]);  }}  }
class C{  public void withTimeout(long timeout){  compute.withTimeout(timeout);  computeForPlatform.withTimeout(timeout);}  }
class C{  public SunCertPathBuilderException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public void kill(JobNodeBean node){  if (node instanceof ActJobNodeBean) {    ActJobNodeBean jobNode=(ActJobNodeBean)node;    controller.killJob(jobNode.getId());  } else   if (node instanceof VMNodeBean) {    VMNodeBean agentNode=(VMNodeBean)node;    controller.killInstance(agentNode.getId());  }}  }
class C{  public void exitApplication(){  mid.notifyDestroyed();}  }
class C{  public boolean isAlertActive(){  return alert != null;}  }
class C{  static PageChildren read(FileStore fileStore,long pos,int mapId,long filePos,long maxPos){  ByteBuffer buff;  int maxLength=DataUtils.getPageMaxLength(pos);  if (maxLength == DataUtils.PAGE_LARGE) {    buff=fileStore.readFully(filePos,128);    maxLength=buff.getInt();  }  maxLength=(int)Math.min(maxPos - filePos,maxLength);  int length=maxLength;  if (length < 0) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,"Illegal page length {0} reading at {1}; max pos {2} ",length,filePos,maxPos);  }  buff=fileStore.readFully(filePos,length);  int chunkId=DataUtils.getPageChunkId(pos);  int offset=DataUtils.getPageOffset(pos);  int start=buff.position();  int pageLength=buff.getInt();  if (pageLength > maxLength) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,"File corrupted in chunk {0}, expected page length =< {1}, got {2}",chunkId,maxLength,pageLength);  }  buff.limit(start + pageLength);  short check=buff.getShort();  int m=DataUtils.readVarInt(buff);  if (m != mapId) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,"File corrupted in chunk {0}, expected map id {1}, got {2}",chunkId,mapId,m);  }  int checkTest=DataUtils.getCheckValue(chunkId) ^ DataUtils.getCheckValue(offset) ^ DataUtils.getCheckValue(pageLength);  if (check != (short)checkTest) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,"File corrupted in chunk {0}, expected check value {1}, got {2}",chunkId,checkTest,check);  }  int len=DataUtils.readVarInt(buff);  int type=buff.get();  boolean node=(type & 1) == DataUtils.PAGE_TYPE_NODE;  if (!node) {    return null;  }  long[] children=new long[len + 1];  for (int i=0; i <= len; i++) {    children[i]=buff.getLong();  }  return new PageChildren(pos,children);}  }
class C{  protected void processForeignKeyRelationship(ObjectReferenceMapping mapping){  String defaultFKFieldName=getDefaultAttributeName() + "_" + getReferenceDescriptor().getPrimaryKeyFieldName();  List<JoinColumnMetadata> joinColumns=getJoinColumns(getJoinColumns(),getReferenceDescriptor());  ForeignKeyMetadata foreignKey=getForeignKey(getForeignKey(),getReferenceDescriptor());  processForeignKeyRelationship(mapping,joinColumns,foreignKey,getReferenceDescriptor(),defaultFKFieldName,getDescriptor().getPrimaryTable());}  }
class C{  public void rotate(double radians,double x,double y){  inverse=null;  transform.rotate(radians,x,y);  fireStateChanged();}  }
class C{  public RolloutGroupConditionBuilder successAction(final RolloutGroupSuccessAction action,final String expression){  conditions.setSuccessAction(action);  conditions.setSuccessActionExp(expression);  return this;}  }
class C{  public Composer rightHitCallback(@NonNull AnimCallBack animCallBack){  mRightHitCallback=animCallBack;  return this;}  }
class C{  public static byte[] encodingToBytes(final String str,final String encoding){  if (str == null) {    return null;  }  try {    return str.getBytes(encoding);  } catch (  final UnsupportedEncodingException e) {    throw new Error(encoding + " not supported! Original exception: " + e);  }}  }
class C{  public void putDefault(String key,Object value){  defaults.put(key,value);  reload();}  }
class C{  public Iterator edges(){  return m_edgeTuples.iterator(edgeRows());}  }
class C{  public static List<TryCatchBlockNode> findTryCatchBlockNodesEncompassingInstruction(InsnList insnList,List<TryCatchBlockNode> tryCatchBlockNodes,AbstractInsnNode insnNode){  Validate.notNull(insnList);  Validate.notNull(tryCatchBlockNodes);  Validate.notNull(insnNode);  Validate.noNullElements(tryCatchBlockNodes);  Map<LabelNode,Integer> labelPositions=new HashMap<>();  int insnNodeIdx=-1;  ListIterator<AbstractInsnNode> insnIt=insnList.iterator();  int insnCounter=0;  while (insnIt.hasNext()) {    AbstractInsnNode node=insnIt.next();    if (node == insnNode) {      if (insnNodeIdx == -1) {        insnNodeIdx=insnCounter;      } else {        throw new IllegalArgumentException();      }    }    if (node instanceof LabelNode) {      labelPositions.put((LabelNode)node,insnCounter);    }    insnCounter++;  }  Validate.isTrue(insnNodeIdx != -1);  List<TryCatchBlockNode> ret=new ArrayList<>();  for (  TryCatchBlockNode tryCatchBlockNode : tryCatchBlockNodes) {    Integer startIdx=labelPositions.get(tryCatchBlockNode.start);    Integer endIdx=labelPositions.get(tryCatchBlockNode.end);    Validate.isTrue(startIdx != null);    Validate.isTrue(endIdx != null);    if (insnNodeIdx >= startIdx && insnNodeIdx < endIdx) {      ret.add(tryCatchBlockNode);    }  }  return ret;}  }
class C{  public static void registerDecayableObject(Decayable obj){  decayObjects.add(obj);}  }
class C{  public boolean handle(final HttpServerRequest request){  Logger log=RequestLoggerFactory.getLogger(CopyResourceHandler.class,request);  if (request.uri().equalsIgnoreCase(copyPath) && HttpMethod.POST == request.method()) {    log.debug("handle -> {}",request.uri());    request.bodyHandler(null);    return true;  } else {    return false;  }}  }
class C{  public boolean isRetransmissionFilterActive(){  return true;}  }
class C{  public static UrlTemplate compile(String template){  String[] urlPieces=new String[5];  int[] identifiers=new int[4];  String[] identifierFormatTags=new String[4];  int identifierCount=parseTemplate(template,urlPieces,identifiers,identifierFormatTags);  return new UrlTemplate(urlPieces,identifiers,identifierFormatTags,identifierCount);}  }
class C{  public TungstenProperties generateTHLParallelPipeline(String schemaName,int partitions,int blockCommit,int mqSize,boolean multiQueue) throws Exception {  prepareLogDir(schemaName);  String partitionsAsString=new Integer(partitions).toString();  String blockCommitAsString=new Integer(blockCommit).toString();  PipelineConfigBuilder builder=new PipelineConfigBuilder();  builder.setProperty(ReplicatorConf.SERVICE_NAME,"test");  builder.setRole("master");  builder.setProperty(ReplicatorConf.METADATA_SCHEMA,schemaName);  builder.addPipeline("master","thl-to-q,q-to-mq","thl,thl-queue, multi-queue");  builder.addComponent("store","thl",THL.class);  builder.addProperty("store","thl","logDir",schemaName);  builder.addComponent("store","thl-queue",THLParallelQueue.class);  builder.addProperty("store","thl-queue","maxSize","100");  builder.addProperty("store","thl-queue","partitions",new Integer(partitions).toString());  builder.addProperty("store","thl-queue","partitionerClass",HashPartitioner.class.getName());  if (multiQueue)   builder.addComponent("store","multi-queue",InMemoryMultiQueue.class); else   builder.addComponent("store","multi-queue",InMemoryTransactionalQueue.class);  builder.addProperty("store","multi-queue","maxSize",new Integer(mqSize).toString());  builder.addProperty("store","multi-queue","partitions",partitionsAsString);  builder.addStage("thl-to-q","thl-extract","thl-queue-apply",null);  builder.addProperty("stage","thl-to-q","blockCommitRowCount",blockCommitAsString);  builder.addComponent("extractor","thl-extract",THLStoreExtractor.class);  builder.addProperty("extractor","thl-extract","storeName","thl");  builder.addComponent("applier","thl-queue-apply",THLParallelQueueApplier.class);  builder.addProperty("applier","thl-queue-apply","storeName","thl-queue");  builder.addStage("q-to-mq","thl-queue-extract","multi-queue-apply",null);  builder.addProperty("stage","q-to-mq","taskCount",partitionsAsString);  builder.addProperty("stage","q-to-mq","blockCommitRowCount",blockCommitAsString);  builder.addComponent("extractor","thl-queue-extract",THLParallelQueueExtractor.class);  builder.addProperty("extractor","thl-queue-extract","storeName","thl-queue");  if (multiQueue)   builder.addComponent("applier","multi-queue-apply",InMemoryMultiQueueApplier.class); else   builder.addComponent("applier","multi-queue-apply",InMemoryTransactionalQueueApplier.class);  builder.addProperty("applier","multi-queue-apply","storeName","multi-queue");  return builder.getConfig();}  }
class C{  public static boolean checkInitiator(String protocol,String initiatorNode,String initiatorPort){  if (Block.FC.name().equals(protocol)) {    return WWNUtility.isValidWWN(initiatorNode) && WWNUtility.isValidWWN(initiatorPort);  }  if (Block.iSCSI.name().equals(protocol)) {    return (iSCSIUtility.isValidIQNPortName(initiatorPort) || iSCSIUtility.isValidEUIPortName(initiatorPort));  }  return true;}  }
class C{  public boolean canBeNegative(){  boolean negative=false;  return negative;}  }
class C{  protected ActiveMQRASession allocateConnection(final int sessionType) throws JMSException {  return allocateConnection(false,Session.AUTO_ACKNOWLEDGE,sessionType);}  }
class C{  public boolean isEmpty(){  return sizeCountingOnlyAliveElements() == 0;}  }
class C{  static Map<String,Object> parseParameters(String args[]) throws Exception {  Utils.debug(DEBUG_STANDARD,"TestRoot::parseParameters: Start");  HashMap<String,Object> map=new HashMap<>();  for (int i=0; i < args.length; i++) {    if (args[i].trim().startsWith("-")) {      if ((i + 1) < args.length && !args[i + 1].startsWith("-")) {        Utils.debug(DEBUG_STANDARD,"TestRoot::parseParameters: added in map = " + args[i] + " with value "+ args[i + 1]);        map.put(args[i].trim(),args[i + 1].trim());      } else       if ((i + 1) < args.length && args[i + 1].startsWith("-") || (i + 1) == args.length) {        Utils.debug(DEBUG_STANDARD,"TestRoot::parseParameters: added in map = " + args[i] + " with null value");        map.put(args[i].trim(),null);      } else {        System.out.println("TestRoot::parseParameters: (WARNING) not added in map = " + args[i]);      }    }  }  Utils.debug(DEBUG_STANDARD,"TestRoot::parseParameters: Done");  return map;}  }
class C{  public static boolean useScriptedRandom(){  return System.getProperty(SCRIPTED_RANDOM_PROPERTY) != null && System.getProperty(SCRIPTED_RANDOM_PROPERTY).trim().length() > 0;}  }
class C{  public void onItemClicked(int position){  final Fragment fragment=getSupportFragmentManager().findFragmentByTag(FRAGMENT_LIST_VIEW);  AbstractDataProvider.Data data=getDataProvider().getItem(position);  if (data.isPinned()) {    data.setPinned(false);    ((VerticalSwipeableExampleFragment)fragment).notifyItemChanged(position);  }}  }
class C{  public Geometry union(){  if (inputPolys == null)   throw new IllegalStateException("union() method cannot be called twice");  if (inputPolys.isEmpty())   return null;  geomFactory=((Geometry)inputPolys.iterator().next()).getFactory();  STRtree index=new STRtree(STRTREE_NODE_CAPACITY);  for (Iterator i=inputPolys.iterator(); i.hasNext(); ) {    Geometry item=(Geometry)i.next();    index.insert(item.getEnvelopeInternal(),item);  }  inputPolys=null;  List itemTree=index.itemsTree();  Geometry unionAll=unionTree(itemTree);  return unionAll;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:08.613 -0500",hash_original_method="84DF9FB54D017E3534FF7B79FFC861AD",hash_generated_method="129C6A5A4A216AF1392AE40988B38CC5") public void leaveGroup(InetAddress groupAddr) throws IOException {  checkJoinOrLeave(groupAddr);  impl.leave(groupAddr);}  }
class C{  public Campaign(final String query,final String name,final Date creation_date,final Date start_date,final Date end_date,final int timezoneOffset){  this();  this.map.put("start_date",start_date);  this.map.put("end_date",end_date);  this.map.put("timezoneOffset",timezoneOffset);  this.map.put("creation_date",creation_date);  this.map.put("query",query);  this.map.put("name",name);  this.start_time=start_date.getTime();  this.end_time=end_date.getTime();  this.id=DateParser.minuteDateFormat.format(start_date).replace(' ','_') + "-" + DateParser.minuteDateFormat.format(end_date).replace(' ','_')+ "-"+ Math.abs(query.hashCode())+ "-"+ Math.abs(name.hashCode());}  }
class C{  public int scaleX(int x,int y){  return Math.round((float)(x * xscale + y * scale10));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:22.772 -0500",hash_original_method="1A2B721538032798B5FC0916FF4BED9A",hash_generated_method="5433F58D420534600E60E5ABFAA91A90") public void append(int key,boolean value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=ArrayUtils.idealIntArraySize(pos + 1);    int[] nkeys=new int[n];    boolean[] nvalues=new boolean[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  public void rollbackNothingMethod(String stepId){  WorkflowStepCompleter.stepSucceded(stepId);}  }
class C{  private List<CLIQUESubspace<V>> findOneDimensionalDenseSubspaceCandidates(Relation<V> database){  Collection<CLIQUEUnit<V>> units=initOneDimensionalUnits(database);  double total=database.size();  for (DBIDIter it=database.iterDBIDs(); it.valid(); it.advance()) {    V featureVector=database.get(it);    for (    CLIQUEUnit<V> unit : units) {      unit.addFeatureVector(it,featureVector);    }  }  Collection<CLIQUEUnit<V>> denseUnits=new ArrayList<>();  Map<Integer,CLIQUESubspace<V>> denseSubspaces=new HashMap<>();  for (  CLIQUEUnit<V> unit : units) {    if (unit.selectivity(total) >= tau) {      denseUnits.add(unit);      int dim=unit.getIntervals().iterator().next().getDimension();      CLIQUESubspace<V> subspace_d=denseSubspaces.get(Integer.valueOf(dim));      if (subspace_d == null) {        subspace_d=new CLIQUESubspace<>(dim);        denseSubspaces.put(Integer.valueOf(dim),subspace_d);      }      subspace_d.addDenseUnit(unit);    }  }  if (LOG.isDebugging()) {    StringBuilder msg=new StringBuilder();    msg.append("   number of 1-dim dense units: ").append(denseUnits.size());    msg.append("\n   number of 1-dim dense subspace candidates: ").append(denseSubspaces.size());    LOG.debugFine(msg.toString());  }  List<CLIQUESubspace<V>> subspaceCandidates=new ArrayList<>(denseSubspaces.values());  Collections.sort(subspaceCandidates,new CLIQUESubspace.CoverageComparator());  return subspaceCandidates;}  }
class C{  public Script(){}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  public static void printf(String fmt,String x){  System.out.print(new Format(fmt).format(x));}  }
class C{  private CryptoPermissionEntry parsePermissionEntry(Hashtable<String,Vector<String>> processedPermissions) throws ParsingException, IOException {  CryptoPermissionEntry e=new CryptoPermissionEntry();  match("Permission");  e.cryptoPermission=match("permission type");  if (e.cryptoPermission.equals("javax.crypto.CryptoAllPermission")) {    e.alg=CryptoAllPermission.ALG_NAME;    e.maxKeySize=Integer.MAX_VALUE;    return e;  }  if (peek("\"")) {    e.alg=match("quoted string").toUpperCase(ENGLISH);  } else {    if (peek("*")) {      match("*");      e.alg=CryptoPermission.ALG_NAME_WILDCARD;    } else {      throw new ParsingException(st.lineno(),"Missing the algorithm name");    }  }  peekAndMatch(",");  if (peek("\"")) {    e.exemptionMechanism=match("quoted string").toUpperCase(ENGLISH);  }  peekAndMatch(",");  if (!isConsistent(e.alg,e.exemptionMechanism,processedPermissions)) {    throw new ParsingException(st.lineno(),"Inconsistent policy");  }  if (peek("number")) {    e.maxKeySize=match();  } else {    if (peek("*")) {      match("*");      e.maxKeySize=Integer.MAX_VALUE;    } else {      if (!peek(";")) {        throw new ParsingException(st.lineno(),"Missing the maximum " + "allowable key size");      } else {        e.maxKeySize=Integer.MAX_VALUE;      }    }  }  peekAndMatch(",");  if (peek("\"")) {    String algParamSpecClassName=match("quoted string");    Vector<Integer> paramsV=new Vector<>(1);    while (peek(",")) {      match(",");      if (peek("number")) {        paramsV.addElement(new Integer(match()));      } else {        if (peek("*")) {          match("*");          paramsV.addElement(new Integer(Integer.MAX_VALUE));        } else {          throw new ParsingException(st.lineno(),"Expecting an integer");        }      }    }    Integer[] params=new Integer[paramsV.size()];    paramsV.copyInto(params);    e.checkParam=true;    e.algParamSpec=getInstance(algParamSpecClassName,params);  }  return e;}  }
class C{  @Override protected void mouseClicked(int par1,int par2,int par3) throws IOException {  super.mouseClicked(par1,par2,par3);  commandBox.mouseClicked(par1,par2,par3);}  }
class C{  private byte[] addExif(byte[] jpeg){  ExifInterface exif=new ExifInterface();  exif.addDateTimeStampTag(ExifInterface.TAG_DATE_TIME,System.currentTimeMillis(),TimeZone.getDefault());  ByteArrayOutputStream jpegOut=new ByteArrayOutputStream();  try {    exif.writeExif(jpeg,jpegOut);  } catch (  IOException e) {    Log.e(TAG,"Could not write EXIF",e);  }  return jpegOut.toByteArray();}  }
class C{  Iterable<Object[]> findEventsByPriceModelKeyBeforePeriodEn(long priceModelKey,long endTimeForPeriod){  Query query=dm.createNamedQuery("PricedEventHistory.findEventsByPriceModelKeyBeforePeriodEnd");  query.setParameter("priceModelKey",Long.valueOf(priceModelKey));  final Date endTimeForPeriodTimeStamp=new Date(endTimeForPeriod);  query.setParameter("modDate",endTimeForPeriodTimeStamp);  return ParameterizedTypes.iterable(query.getResultList(),Object[].class);}  }
class C{  public NoRouteToHostException(){}  }
class C{  public Vector plus(Vector that){  if (this.d != that.d)   throw new IllegalArgumentException("Dimensions don't agree");  Vector c=new Vector(d);  for (int i=0; i < d; i++)   c.data[i]=this.data[i] + that.data[i];  return c;}  }
class C{  public void visitMethodInsn(int opcode,String owner,String name,String desc,boolean itf){  if (api < Opcodes.ASM5) {    if (itf != (opcode == Opcodes.INVOKEINTERFACE)) {      throw new IllegalArgumentException("INVOKESPECIAL/STATIC on interfaces require ASM 5");    }    visitMethodInsn(opcode,owner,name,desc);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc,itf);  }}  }
class C{  @Override public ComparableObjectItem remove(int index){  return super.remove(index);}  }
class C{  public Builder include(String include){  if (this.include == null) {    this.include=new ArrayList<String>();  }  this.include.add(include);  return this;}  }
class C{  public java.sql.PreparedStatement prepareStatement(String sql) throws SQLException {  return prepareStatement(sql,DEFAULT_RESULT_SET_TYPE,DEFAULT_RESULT_SET_CONCURRENCY);}  }
class C{  int chunkSize(){  return mChunkSize;}  }
class C{  private static int showUrlsPrompt(Component parent,List<String> urls){  String text="<html><body style='width: 100px;'>";  for (  String url : urls) {    url=splitUrl(url);    text+=url + "<br />";  }  String okOption="Open URL";  if (urls.size() > 1) {    okOption="Open " + urls.size() + " URLs";  }  String[] options={okOption,"Cancel"};  if (urls.size() == 1) {    options=new String[]{okOption,"Copy URL","Cancel"};  }  int chosenOption=JOptionPane.showOptionDialog(parent,text,"Open in default browser?",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,1);  return chosenOption;}  }
class C{  public void updatePositionValueText(long pos,byte val){  updatePositionText(pos);  updateValueText(val);}  }
class C{  @Override public void requestProductsWithCompletionHandler(RequestProductsCompletionHandler handler){  if (iapHelper != null) {    iapHelper.requestProductsWithCompletionHandler(handler);  }}  }
class C{  protected NewTreeLayout(Graph<GraphNode,GraphEdge> graph,GraphModel graphModel,EdgeMatcher<String> edgeMatcher,Rectangle2D region){  this.graphModel=graphModel;  this.edgeMatcher=edgeMatcher;  this.region=region;}  }
class C{  public synchronized void addPropertyChangeListener(PropertyChangeListener listener){  if (changeSupport == null) {    changeSupport=new SwingPropertyChangeSupport(this);  }  changeSupport.addPropertyChangeListener(listener);}  }
class C{  public char next() throws JSONException {  int c;  if (this.usePrevious) {    this.usePrevious=false;    c=this.previous;  } else {    try {      c=this.reader.read();    } catch (    IOException exception) {      throw new JSONException(exception);    }    if (c <= 0) {      this.eof=true;      c=0;    }  }  this.index+=1;  if (this.previous == '\r') {    this.line+=1;    this.character=c == '\n' ? 0 : 1;  } else   if (c == '\n') {    this.line+=1;    this.character=0;  } else {    this.character+=1;  }  this.previous=(char)c;  return this.previous;}  }
class C{  protected void updateRemoteClock(){  if (remoteClockThread != null) {synchronized (remoteClockLock) {      remoteClockLock.notifyAll();    }  }}  }
class C{  public boolean shouldUpdateAlerts(){  if (alerts_lastUpdated == null) {    alerts_lastUpdated=Calendar.getInstance();    return true;  }  Calendar updateTreshold=Calendar.getInstance();  updateTreshold.add(Calendar.MINUTE,-10);  return alerts_lastUpdated.before(updateTreshold);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  public CharRange(char ch,boolean negated){  this(ch,ch,negated);}  }
class C{  public Key min(){  if (isEmpty())   throw new NoSuchElementException("called min() with empty symbol table");  return min(root).key;}  }
class C{  public void paint(Graphics g,Shape a){  if (a == null) {    return;  }  Rectangle r;  if (a instanceof Rectangle) {    r=(Rectangle)a;  } else {    r=a.getBounds();  }  painter.paint(g,r.x,r.y,r.width,r.height,this);  super.paint(g,a);}  }
class C{  public synchronized void remove(int index){  super.remove(index);  mMaxValues.remove(index);}  }
class C{  private boolean deleteEntry(String alias) throws KeyStoreException {  AliasInfo aliasInfo=aliasMap.get(alias);  if (aliasInfo != null) {    aliasMap.remove(alias);    try {      if (aliasInfo.type == ATTR_CLASS_CERT) {        return destroyCert(aliasInfo.id);      } else       if (aliasInfo.type == ATTR_CLASS_PKEY) {        return destroyPkey(aliasInfo.id) && destroyChain(aliasInfo.id);      } else       if (aliasInfo.type == ATTR_CLASS_SKEY) {        return destroySkey(alias);      } else {        throw new KeyStoreException("unexpected entry type");      }    } catch (    PKCS11Exception|CertificateException e) {      throw new KeyStoreException(e);    }  }  return false;}  }
class C{  public void commit(){  try {    transaction.commit();  }  finally {    endTransaction();  }}  }
class C{  public AccountHeaderBuilder withSelectionSecondLineShown(boolean selectionSecondLineShown){  this.mSelectionSecondLineShown=selectionSecondLineShown;  return this;}  }
class C{  public Object remove(int index){  RangeCheck(index);  modCount++;  Object oldValue=elementData[index];  int numMoved=size - index - 1;  if (numMoved > 0)   System.arraycopy(elementData,index + 1,elementData,index,numMoved);  elementData[--size]=null;  return oldValue;}  }
class C{  public boolean isAcquired(){  BinaryMemoryAllocatorChunk holder=holders.get();  return holder != null && holder.isAcquired();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:22.954 -0400",hash_original_method="1D03AD9F44C5C27A45B59B547810BEB9",hash_generated_method="7B3E1D2D1F084062EB8A32744432485F") private String badRegister(long s){  return "Attempt to register more than " + MAX_PARTIES + " parties for "+ stateToString(s);}  }
class C{  private void load(DataInputStream dis) throws Exception {  if (dis.readByte() != 1) {    throw new StreamCorruptedException("File format not recognised");  }  String groupId=dis.readUTF();  if ("TZDB".equals(groupId) == false) {    throw new StreamCorruptedException("File format not recognised");  }  int versionCount=dis.readShort();  for (int i=0; i < versionCount; i++) {    versionId=dis.readUTF();  }  int regionCount=dis.readShort();  String[] regionArray=new String[regionCount];  for (int i=0; i < regionCount; i++) {    regionArray[i]=dis.readUTF();  }  regionIds=Arrays.asList(regionArray);  int ruleCount=dis.readShort();  Object[] ruleArray=new Object[ruleCount];  for (int i=0; i < ruleCount; i++) {    byte[] bytes=new byte[dis.readShort()];    dis.readFully(bytes);    ruleArray[i]=bytes;  }  for (int i=0; i < versionCount; i++) {    int versionRegionCount=dis.readShort();    regionToRules.clear();    for (int j=0; j < versionRegionCount; j++) {      String region=regionArray[dis.readShort()];      Object rule=ruleArray[dis.readShort() & 0xffff];      regionToRules.put(region,rule);    }  }}  }
class C{  public boolean confirmEnoughAbsoluteSources(int[] sourcesAbsolute,int dest){  if (countOfAbsoluteSources(sourcesAbsolute,dest) != numSources) {    throw new RuntimeException("Incorrect number of sources in absolutes");  }  return true;}  }
class C{  public CreateSnapshotRequest source(BytesReference source){  try (XContentParser parser=XContentFactory.xContent(source).createParser(source)){    return source(parser.mapOrdered());  } catch (  IOException e) {    throw new IllegalArgumentException("failed to parse snapshot source",e);  }}  }
class C{  public boolean removeFirstOccurrence(Object o){  if (o == null)   return false;  int mask=elements.length - 1;  int i=head;  E x;  while ((x=elements[i]) != null) {    if (o.equals(x)) {      delete(i);      return true;    }    i=(i + 1) & mask;  }  return false;}  }
class C{  public int releaseExtraResources(){synchronized (lock) {    int numReleasedResources=0;    if (requestsQueue.isEmpty()) {      log.debug("Resource Requests Queue is empty.");      if (hostAffinityEnabled) {        List<String> allocatedHosts=getAllocatedHosts();        for (        String host : allocatedHosts) {          numReleasedResources+=releaseResourcesForHost(host);        }      } else {        numReleasedResources+=releaseResourcesForHost(ANY_HOST);      }      clearState();    }    return numReleasedResources;  }}  }
class C{  public <T extends CursorBase>T startCursor(PostgresCursorGenerator<T> generator,QueryBindings bindings){  return generator.openCursor(this,bindings);}  }
class C{  public LocalFile(File file){  this.file=file;  this.filePath=file.getAbsolutePath();}  }
class C{  private void calculateC(){  int length=mSpecification.getExtremaCount() - 1;  mIdealFrequencyResponse=new double[length];  double sign=1.0;  for (int k=0; k < length; k++) {    if (k < mExtremalIndices.size()) {      int index=mExtremalIndices.get(k);      mIdealFrequencyResponse[k]=mGrid.getDesiredResponse()[index] - (sign * mDelta / mGrid.getWeight()[index]);      sign=-sign;    }  }}  }
class C{  public PbrpcServer(int port){  this(null,port);}  }
class C{  public Main(PropertyHandler propertyHandler){  super(propertyHandler);}  }
class C{  public AttributedStringBuffer(){  strings=new ArrayList();  attributes=new ArrayList();  count=0;  length=0;}  }
class C{  public static boolean isFloatingPointDatatype(IRI datatype){  return datatype.equals(XMLSchema.FLOAT) || datatype.equals(XMLSchema.DOUBLE);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (external: ");  result.append(external);  result.append(", declaredAsync: ");  result.append(declaredAsync);  result.append(", constructor: ");  result.append(constructor);  result.append(')');  return result.toString();}  }
class C{  protected void initBNodeParams(){  bnodePrefix="node" + Long.toString(getNextBNodePrefixUid(),32) + "x";  nextBNodeID=1;}  }
class C{  public void upload(){  UploadMonitorLog.forceZipLogAndUpload();}  }
class C{  public PbrpcClientChannelFactory(PbrpcClientConfiguration clientConfig,String ip,int port,int connTimeout,int readTimeout){  pbrpcClient=new SimplePbrpcClient(clientConfig,false,ip,port,connTimeout,readTimeout);}  }
class C{  public Iterator<Label> iterator(){  return values().iterator();}  }
class C{  public String click(){  FacesContext context=FacesContext.getCurrentInstance();  append("click(rowIndex=" + data.getRowIndex() + ",accountId="+ accountId.getValue()+ ")");  CustomerBean customer=(CustomerBean)context.getExternalContext().getRequestMap().get("customer");  System.out.println("accountId: " + customer.getAccountId());  context.getExternalContext().getSessionMap().put("customer",customer);  clear();  return ("click");}  }
class C{  public Builder useAndroidLog(boolean useAndroidLog){  this.useAndroidLog=useAndroidLog;  return this;}  }
class C{  public double longitude(){  return longitude;}  }
class C{  private static void convertOpaqueToTranslucentBeforeL(Activity activity){  try {    Field field=Activity.class.getDeclaredField("mTranslucentCallback");    field.setAccessible(true);    Method method=Activity.class.getDeclaredMethod("convertToTranslucent",field.getType());    method.setAccessible(true);    method.invoke(activity,new Object[]{null});  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void disconnectProfile(BluetoothAdapter adapter,BluetoothDevice device,int profile,String methodName){  if (methodName == null) {    methodName=String.format("disconnectProfile(profile=%d, device=%s)",profile,device);  }  int mask=(ConnectProfileReceiver.STATE_DISCONNECTING_FLAG | ConnectProfileReceiver.STATE_DISCONNECTED_FLAG);  long start=-1;  if (!adapter.isEnabled()) {    fail(String.format("%s bluetooth not enabled",methodName));  }  if (!adapter.getBondedDevices().contains(device)) {    fail(String.format("%s device not paired",methodName));  }  BluetoothProfile proxy=connectProxy(adapter,profile);  assertNotNull(proxy);  ConnectProfileReceiver receiver=getConnectProfileReceiver(device,profile,mask);  int state=proxy.getConnectionState(device);switch (state) {case BluetoothProfile.STATE_CONNECTED:case BluetoothProfile.STATE_CONNECTING:    start=System.currentTimeMillis();  if (profile == BluetoothProfile.A2DP) {    assertTrue(((BluetoothA2dp)proxy).disconnect(device));  } else   if (profile == BluetoothProfile.HEADSET) {    assertTrue(((BluetoothHeadset)proxy).disconnect(device));  } else   if (profile == BluetoothProfile.INPUT_DEVICE) {    assertTrue(((BluetoothInputDevice)proxy).disconnect(device));  }break;case BluetoothProfile.STATE_DISCONNECTED:removeReceiver(receiver);return;case BluetoothProfile.STATE_DISCONNECTING:mask=0;break;default :removeReceiver(receiver);fail(String.format("%s invalid state: state=%d",methodName,state));}long s=System.currentTimeMillis();while (System.currentTimeMillis() - s < CONNECT_DISCONNECT_PROFILE_TIMEOUT) {state=proxy.getConnectionState(device);if (state == BluetoothProfile.STATE_DISCONNECTED && (receiver.getFiredFlags() & mask) == mask) {long finish=receiver.getCompletedTime();if (start != -1 && finish != -1) {writeOutput(String.format("%s completed in %d ms",methodName,(finish - start)));} else {writeOutput(String.format("%s completed",methodName));}removeReceiver(receiver);return;}sleep(POLL_TIME);}int firedFlags=receiver.getFiredFlags();removeReceiver(receiver);fail(String.format("%s timeout: state=%d (expected %d), flags=0x%x (expected 0x%x)",methodName,state,BluetoothProfile.STATE_DISCONNECTED,firedFlags,mask));}  }
class C{  public boolean isManagingComponent(Component c){  return scrConstrMap.containsKey(c);}  }
class C{  private ResultPoint correctTopRight(ResultPoint bottomLeft,ResultPoint bottomRight,ResultPoint topLeft,ResultPoint topRight,int dimension){  float corr=distance(bottomLeft,bottomRight) / (float)dimension;  int norm=distance(topLeft,topRight);  float cos=(topRight.getX() - topLeft.getX()) / norm;  float sin=(topRight.getY() - topLeft.getY()) / norm;  ResultPoint c1=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  corr=distance(bottomLeft,topLeft) / (float)dimension;  norm=distance(bottomRight,topRight);  cos=(topRight.getX() - bottomRight.getX()) / norm;  sin=(topRight.getY() - bottomRight.getY()) / norm;  ResultPoint c2=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  if (!isValid(c1)) {    if (isValid(c2)) {      return c2;    }    return null;  }  if (!isValid(c2)) {    return c1;  }  int l1=Math.abs(transitionsBetween(topLeft,c1).getTransitions() - transitionsBetween(bottomRight,c1).getTransitions());  int l2=Math.abs(transitionsBetween(topLeft,c2).getTransitions() - transitionsBetween(bottomRight,c2).getTransitions());  return l1 <= l2 ? c1 : c2;}  }
class C{  @Override public void clear(){  count=0;}  }
class C{  public MoveTableItem(Shell parent,int style){  display=Display.getDefault();  createContents();}  }
class C{  private final void ensure(int length){  if (list.length < length) {    final int min=list.length + DELTA;    length=(length < min) ? min : length;    final long[] newlist=allocate(length);    java.lang.System.arraycopy(list,0,newlist,0,size);    list=newlist;  }}  }
class C{  boolean doit(CtClass clazz,MethodInfo minfo,LoopContext context,CodeIterator iterator,int endPos) throws CannotCompileException {  boolean edited=false;  while (iterator.hasNext() && iterator.lookAhead() < endPos) {    int size=iterator.getCodeLength();    if (loopBody(iterator,clazz,minfo,context)) {      edited=true;      int size2=iterator.getCodeLength();      if (size != size2)       endPos+=size2 - size;    }  }  return edited;}  }
class C{  private void clearClass(Class<?> clazz) throws Exception {  Field[] fields;  try {    fields=clazz.getDeclaredFields();  } catch (  NoClassDefFoundError e) {    if (e.toString().contains("lucene")) {      return;    } else     if (e.toString().contains("jts")) {      return;    } else     if (e.toString().contains("slf4j")) {      return;    }    throw e;  }  for (  Field field : fields) {    if (field.getType().isPrimitive() || field.getName().indexOf("$") != -1) {      continue;    }    int modifiers=field.getModifiers();    if (!Modifier.isStatic(modifiers)) {      continue;    }    field.setAccessible(true);    Object o=field.get(null);    if (o == null) {      continue;    }    if (Modifier.isFinal(modifiers)) {      if (field.getType().getName().startsWith("java.")) {        continue;      }      if (field.getType().getName().startsWith("javax.")) {        continue;      }      clearInstance(o);    } else {      clearField(clazz.getName() + "." + field.getName()+ " = "+ o);    }  }}  }
class C{  @Override public boolean equals(Object o){  if (o != null && o instanceof UIAcceleration) {    if (this == o)     return true;    UIAcceleration acceleration=(UIAcceleration)o;    return (x == acceleration.x && y == acceleration.y && z == acceleration.z);  }  return false;}  }
class C{  public static short[] insert(short[] dest,short[] src,int offset){  short[] temp=new short[dest.length + src.length];  System.arraycopy(dest,0,temp,0,offset);  System.arraycopy(src,0,temp,offset,src.length);  System.arraycopy(dest,offset,temp,src.length + offset,dest.length - offset);  return temp;}  }
class C{  private void startFileBasedMerge() throws CarbonSortKeyAndGroupByException {  try {    executorService.shutdown();    executorService.awaitTermination(2,TimeUnit.DAYS);    dataSorterAndWriterExecutorService.shutdown();    dataSorterAndWriterExecutorService.awaitTermination(2,TimeUnit.DAYS);  } catch (  InterruptedException e) {    throw new CarbonSortKeyAndGroupByException("Problem while shutdown the server ",e);  }}  }
class C{  private Pane makeTouchOverlay(){  Pane touch=new Pane();  touch.setDisable(true);  touch.setVisible(false);  return touch;}  }
class C{  public void init() throws ServletException {}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String DEMHeader=null;  int row, col, x, y;  int progress=0;  double z, val, val2, val3;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  double flowLength=0;  double numUpslopeFlowpaths=0;  double flowpathLengthToAdd=0;  double conversionFactor=1;  double divideElevToAdd=0;  double radToDeg=180 / Math.PI;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  DEMHeader=args[1];  outputHeader=args[2];  conversionFactor=Double.parseDouble(args[3]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    double gridResX=pntr.getCellSizeX();    double gridResY=pntr.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster DEM=new WhiteboxRaster(DEMHeader,"r");    if (DEM.getNumberRows() != rows || DEM.getNumberColumns() != cols) {      showFeedback("The input files must have the same dimensions, i.e. number of " + "rows and columns.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,-999);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits(pntr.getXYUnits());    WhiteboxRaster numInflowingNeighbours=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    numInflowingNeighbours.isTemporaryFile=true;    WhiteboxRaster numUpslopeDivideCells=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    numUpslopeDivideCells.isTemporaryFile=true;    WhiteboxRaster totalFlowpathLength=new WhiteboxRaster(outputHeader.replace(".dep","_temp3.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    totalFlowpathLength.isTemporaryFile=true;    WhiteboxRaster totalUpslopeDivideElev=new WhiteboxRaster(outputHeader.replace(".dep","_temp4.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    totalUpslopeDivideElev.isTemporaryFile=true;    updateProgress("Loop 1 of 3:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (pntr.getValue(row,col) != noData) {          z=0;          for (i=0; i < 8; i++) {            if (pntr.getValue(row + dY[i],col + dX[i]) == inflowingVals[i]) {              z++;            }          }          if (z > 0) {            numInflowingNeighbours.setValue(row,col,z);          } else {            numInflowingNeighbours.setValue(row,col,-1);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 3:",progress);    }    updateProgress("Loop 2 of 3:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        val=numInflowingNeighbours.getValue(row,col);        if (val <= 0 && val != noData) {          flag=false;          x=col;          y=row;          do {            val=numInflowingNeighbours.getValue(y,x);            if (val <= 0 && val != noData) {              if (val == -1) {                numUpslopeDivideCells.setValue(y,x,0);                numUpslopeFlowpaths=1;                divideElevToAdd=DEM.getValue(y,x);              } else {                numUpslopeFlowpaths=numUpslopeDivideCells.getValue(y,x);                divideElevToAdd=totalUpslopeDivideElev.getValue(y,x);              }              numInflowingNeighbours.setValue(y,x,noData);              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                flowLength=gridLengths[c];                val2=totalFlowpathLength.getValue(y,x);                flowpathLengthToAdd=val2 + numUpslopeFlowpaths * flowLength;                x+=dX[c];                y+=dY[c];                numUpslopeDivideCells.setValue(y,x,numUpslopeDivideCells.getValue(y,x) + numUpslopeFlowpaths);                totalFlowpathLength.setValue(y,x,totalFlowpathLength.getValue(y,x) + flowpathLengthToAdd);                totalUpslopeDivideElev.setValue(y,x,totalUpslopeDivideElev.getValue(y,x) + divideElevToAdd);                numInflowingNeighbours.setValue(y,x,numInflowingNeighbours.getValue(y,x) - 1);              } else {                flag=true;              }            } else {              flag=true;            }          } while (!flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 2 of 3:",progress);    }    numUpslopeDivideCells.flush();    totalFlowpathLength.flush();    totalUpslopeDivideElev.flush();    numInflowingNeighbours.close();    updateProgress("Loop 3 of 3:",0);    double[] data1=null;    double[] data2=null;    double[] data3=null;    double[] data4=null;    double[] data5=null;    for (row=0; row < rows; row++) {      data1=numUpslopeDivideCells.getRowValues(row);      data2=totalFlowpathLength.getRowValues(row);      data3=pntr.getRowValues(row);      data4=totalUpslopeDivideElev.getRowValues(row);      data5=DEM.getRowValues(row);      for (col=0; col < cols; col++) {        if (data3[col] != noData) {          if (data1[col] > 0) {            val=data2[col] / data1[col];            val2=(data4[col] / data1[col] - data5[col]) * conversionFactor;            val3=Math.atan(val2 / val) * radToDeg;            output.setValue(row,col,val3);          } else {            output.setValue(row,col,0);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 3 of 3:",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    DEM.close();    numUpslopeDivideCells.close();    totalFlowpathLength.close();    totalUpslopeDivideElev.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private static void usage(final String msg){  System.err.println(msg);  System.err.println("Usage: java Base64 -e|-d inputfile outputfile");}  }
class C{  public MailAddress(String address) throws AddressException {  address=address.trim();  int pos=0;  stripSourceRoute(address,pos);  StringBuffer localPartSB=new StringBuffer();  StringBuffer domainSB=new StringBuffer();  try {    if (address.charAt(pos) == '\"') {      pos=parseQuotedLocalPartOrThrowException(localPartSB,address,pos);    } else {      pos=parseUnquotedLocalPartOrThrowException(localPartSB,address,pos);    }    if (pos >= address.length() || address.charAt(pos) != '@') {      throw new AddressException("Did not find @ between local-part and domain at position " + (pos + 1) + " in '"+ address+ "'",address,pos + 1);    }    pos++;    while (true) {      if (address.charAt(pos) == '#') {        pos=parseNumber(domainSB,address,pos);      } else       if (address.charAt(pos) == '[') {        pos=parseDomainLiteral(domainSB,address,pos);      } else {        pos=parseDomain(domainSB,address,pos);      }      if (pos >= address.length()) {        break;      }      if (address.charAt(pos) == '.') {        char lastChar=address.charAt(pos - 1);        if (lastChar == '@' || lastChar == '.') {          throw new AddressException("Subdomain expected before '.' or duplicate '.' in " + address);        }        domainSB.append('.');        pos++;        continue;      }      break;    }    if (domainSB.toString().length() == 0) {      throw new AddressException("No domain found at position " + (pos + 1) + " in '"+ address+ "'",address,pos + 1);    }  } catch (  IndexOutOfBoundsException ioobe) {    throw new AddressException("Out of data at position " + (pos + 1) + " in '"+ address+ "'",address,pos + 1);  }  localPart=localPartSB.toString();  domain=domainSB.toString();}  }
class C{  public void registerInspector(Inspector inspector,Stoppable stopper){  if (!displayInspectors)   return;  allInspectors.put(inspector,new WeakReference(stopper));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:34.089 -0500",hash_original_method="A600C72BC77DD5DD4F1CBED3B2E3D2F0",hash_generated_method="94DED0337828532B8CFA714A972D6810") private Conversion(){}  }
class C{  public final void testContainsNumber(){  assertNotNull(Constraints.containsNumber());}  }
class C{  public final double apply(double a){  return a * multiplicator;}  }
class C{  private boolean shouldBeAutoAccepted() throws PayloadException {  return FileTransferUtils.getHttpFTInfo(getDialogPath().getInvite(),mRcsSettings) != null || mRcsSettings.isGroupChatAutoAccepted();}  }
class C{  protected void throwParseException(ParseException e) throws ParseException {  if (locator != null) {    String elementLocation="";    if (curHandler != null) {      elementLocation+=", element " + curHandler.qName;    }    String location="[Line " + String.valueOf(locator.getLineNumber()) + ", Column "+ String.valueOf(locator.getColumnNumber())+ elementLocation+ "] ";    LogUtils.logException(logger,Level.FINE,location,e);    throw new ParseException(location + e.getMessage(),e);  } else {    LogUtils.logException(logger,Level.FINE,null,e);    throw e;  }}  }
class C{  private static void onExit(){  LEnv.LAUNCHER_SETTINGS.save();}  }
class C{  private int handleCH(String value,DoubleMetaphoneResult result,int index){  if (index > 0 && contains(value,index,4,"CHAE")) {    result.append('K','X');    return index + 2;  } else   if (conditionCH0(value,index)) {    result.append('K');    return index + 2;  } else   if (conditionCH1(value,index)) {    result.append('K');    return index + 2;  } else {    if (index > 0) {      if (contains(value,0,2,"MC")) {        result.append('K');      } else {        result.append('X','K');      }    } else {      result.append('X');    }    return index + 2;  }}  }
class C{  public Index ramBufferMb(Integer ramBufferMb){  this.ramBufferMb=ramBufferMb;  return this;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"QADD16");  translateAll(environment,instruction,"QADD16",instructions);}  }
class C{  public boolean isDiskSharesSupported(){  return diskSharesSupported;}  }
class C{  private BigInteger(long val){  if (val < 0) {    val=-val;    signum=-1;  } else {    signum=1;  }  int highWord=(int)(val >>> 32);  if (highWord == 0) {    mag=new int[1];    mag[0]=(int)val;  } else {    mag=new int[2];    mag[0]=highWord;    mag[1]=(int)val;  }}  }
class C{  public static AdapterViewHolder dequeueReusableAdapterViewHolder(View convertView,ViewGroup parent,int layoutId){  if (convertView == null) {    return new AdapterViewHolder(parent,layoutId);  }  return (AdapterViewHolder)convertView.getTag();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.ARRAY_ELEMENT__SPREAD:    return isSpread();case N4JSPackage.ARRAY_ELEMENT__EXPRESSION:  return getExpression();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public <E>QueryResult<E> queryById(List<String> ids,EntityDefinition entityDefinition) throws IOException {  List<byte[]> rowkeys=new ArrayList<>(ids.size());  QueryResult<E> result=new QueryResult<E>();  for (  String id : ids) {    rowkeys.add(EagleBase64Wrapper.decode(id));  }  RowKeyLogReader reader=null;  try {    reader=new RowKeyLogReader(entityDefinition,rowkeys,null);    reader.open();    List<TaggedLogAPIEntity> entities=new LinkedList<>();    while (true) {      InternalLog log=reader.read();      if (log == null) {        break;      }      TaggedLogAPIEntity entity=HBaseInternalLogHelper.buildEntity(log,entityDefinition);      entities.add(entity);    }    result.setData((List<E>)entities);    result.setSuccess(true);    result.setSize(entities.size());    return result;  } catch (  Exception e) {    LOG.error(e.getMessage(),e);    throw new IOException(e);  } finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  public static void writeFile(String content,File file){  try {    FileUtils.writeStringToFile(file,content);  } catch (  Exception e) {    logger.error("Error while reading file " + file.getName() + " , "+ e.getMessage(),e);  }}  }
class C{  protected boolean theSourceIsToBeConverted(){  return !info.getConversionType().isAbsent();}  }
class C{  public T caseVariableDeclaration(VariableDeclaration object){  return null;}  }
class C{  public HMMChineseTokenizerFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public void report(JSweetProblem problem,SourcePosition sourcePosition,String message){switch (problem.getSeverity()) {case ERROR:    problemCount++;  errorCount++;break;case WARNING:problemCount++;warningCount++;break;default :problemCount++;}delegate.report(problem,sourcePosition,message);}  }
class C{  @Override public String toString(){  return "CUfunction[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  final public void Identifier() throws ParseException {  ASTIdentifier jjtn000=new ASTIdentifier(this,JJTIDENTIFIER);  boolean jjtc000=true;  jjtree.openNodeScope(jjtn000);  try {    jj_consume_token(IDENTIFIER);  }  finally {    if (jjtc000) {      jjtree.closeNodeScope(jjtn000,true);    }  }}  }
class C{  public char toCharArray()[]{  return Arrays.copyOf(buf,count);}  }
class C{  protected JavaType _mapAbstractType2(DeserializationConfig config,JavaType type) throws JsonMappingException {  Class<?> currClass=type.getRawClass();  if (_factoryConfig.hasAbstractTypeResolvers()) {    for (    AbstractTypeResolver resolver : _factoryConfig.abstractTypeResolvers()) {      JavaType concrete=resolver.findTypeMapping(config,type);      if (concrete != null && concrete.getRawClass() != currClass) {        return concrete;      }    }  }  return null;}  }
class C{  public String toString(){  return getUserName();}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  int width=MeasureSpec.getSize(widthMeasureSpec);  int height=MeasureSpec.getSize(heightMeasureSpec);  Rect measuredInnerRect=speechBubbleDrawer.calcInnerRect(0,0,width,height);  final View child=getChildAt(0);  final int childWidthMeasureSpec=getChildMeasureSpec(widthMeasureSpec,getPaddingLeft() + getPaddingRight() + width - measuredInnerRect.width(),child.getLayoutParams().width);  final int childHeightMeasureSpec=getChildMeasureSpec(heightMeasureSpec,getPaddingTop() + getPaddingBottom() + height - measuredInnerRect.height(),child.getLayoutParams().height);  child.measure(childWidthMeasureSpec,childHeightMeasureSpec);  setMeasuredDimension(resolveSize(child.getMeasuredWidth(),widthMeasureSpec),resolveSize(child.getMeasuredHeight(),heightMeasureSpec));}  }
class C{  public String toEPL(){  StringWriter writer=new StringWriter();  toEPL(new EPStatementFormatter(false),writer);  return writer.toString();}  }
class C{  public SpecificInsteonLight(String systemName,SerialTrafficController tc,String userName){  super(systemName,tc,userName);  this.tc=tc;}  }
class C{  public RecentSearches(Preferences prefs,String saveName){  if (prefs == null) {    try {      prefs=Preferences.userRoot();    } catch (    AccessControlException ace) {      Logger.getLogger(getClass().getName()).warning("cannot acces preferences. persistency disabled.");    }  }  if (prefs != null && saveName != null) {    this.prefsNode=prefs.node(saveName);    load();  }}  }
class C{  public static OFPacketIn DhcpDiscoveryRequestOFPacketIn(IOFSwitch sw,MacAddress hostMac){  byte[] serializedPacket=DhcpDiscoveryRequestEthernet(hostMac).serialize();  OFFactory factory=sw.getOFFactory();  OFPacketIn.Builder packetInBuilder=factory.buildPacketIn();  if (factory.getVersion() == OFVersion.OF_10) {    packetInBuilder.setInPort(OFPort.of(1)).setData(serializedPacket).setReason(OFPacketInReason.NO_MATCH);  } else {    packetInBuilder.setMatch(factory.buildMatch().setExact(MatchField.IN_PORT,OFPort.of(1)).build()).setData(serializedPacket).setReason(OFPacketInReason.NO_MATCH);  }  return packetInBuilder.build();}  }
class C{  private void enlarge(final int size){  int length1=2 * data.length;  int length2=length + size;  byte[] newData=new byte[length1 > length2 ? length1 : length2];  System.arraycopy(data,0,newData,0,length);  data=newData;}  }
class C{  public void visitMethodInsn(int opcode,String owner,String name,String desc,boolean itf){  if (api < Opcodes.ASM5) {    if (itf != (opcode == Opcodes.INVOKEINTERFACE)) {      throw new IllegalArgumentException("INVOKESPECIAL/STATIC on interfaces require ASM 5");    }    visitMethodInsn(opcode,owner,name,desc);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc,itf);  }}  }
class C{  public static int bootImageIdentityHashCode(Object object){  if (VM.VerifyAssertions && VM.runningVM) {    VM._assert(VM.NOT_REACHED);  }  if (objectAddressRemapper == null) {    if (VM.VerifyAssertions)     VM._assert(VM.runningTool || VM.writingImage);    return System.identityHashCode(object);  }  return objectAddressRemapper.identityHashCode(object);}  }
class C{  public WrongHttpMethod(){  requestFileName="getstate.query";  httpMethod="GET";}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  protected void logRemovedSetting(String settingName,String alternativeName){  if (!Strings.isNullOrEmpty(settings.get(settingName))) {    deprecationLogger.deprecated("Setting [{}] has been removed, use [{}] instead",settingName,alternativeName);  }}  }
class C{  void remove(){  this.sym=null;  this.parentEdge=null;}  }
class C{  public BulkImportResult doImport(final JobContext context){  final JobStatusListener statusListener=context.getListener();  final Set<String> importedFiles=context.getAttribute(JobContextKeys.IMPORT_FILE_SET);  final String fileName=context.getAttribute(JobContextKeys.IMPORT_FILE);  final CsvImportDescriptor csvImportDescriptor=context.getAttribute(JobContextKeys.IMPORT_DESCRIPTOR);  final String csvImportDescriptorName=context.getAttribute(JobContextKeys.IMPORT_DESCRIPTOR_NAME);  try {    final File[] filesToImport=getFilesToImport(csvImportDescriptor,fileName);    if (filesToImport == null) {      final String msgWarn=MessageFormat.format("no files with mask {0} to import",csvImportDescriptor.getImportFileDescriptor().getFileNameMask());      statusListener.notifyWarning(msgWarn);    } else {      final String msgInfo=MessageFormat.format("Import descriptor {0} has {1} file(s) with mask {2} to import",csvImportDescriptorName,filesToImport.length,csvImportDescriptor.getImportFileDescriptor().getFileNameMask());      statusListener.notifyMessage(msgInfo);      if (csvImportDescriptor.getSelectSql() == null) {        final String msgErr="import can not be started, because select-sql is empty";        statusListener.notifyError(msgErr);        return BulkImportResult.ERROR;      }      return doImport(statusListener,filesToImport,csvImportDescriptorName,csvImportDescriptor,importedFiles);    }  } catch (  Exception e) {    return BulkImportResult.ERROR;  }  return BulkImportResult.OK;}  }
class C{  final public SyntaxTreeNode Assumption() throws ParseException {  SyntaxTreeNode tn;  SyntaxTreeNode zn=null;  Token t;  bpa("Assumption");  expecting="ASSUM...";switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case ASSUMPTION:    t=jj_consume_token(ASSUMPTION);  break;case ASSUME:t=jj_consume_token(ASSUME);break;default :jj_la1[38]=jj_gen;jj_consume_token(-1);throw new ParseException();}addHeir(new SyntaxTreeNode(mn,t));if (jj_2_15(2)) {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case DEFBREAK:t=jj_consume_token(DEFBREAK);break;default :jj_la1[39]=jj_gen;;}tn=Identifier();addHeir(tn);expecting="==";t=jj_consume_token(DEF);addHeir(new SyntaxTreeNode(mn,t));} else {;}belchDEF();expecting="Expression";tn=Expression();addHeir(tn);SyntaxTreeNode sn[]=getLastHeirs();epa();{if (true) return new SyntaxTreeNode(mn,N_Assumption,zn,sn);}throw new Error("Missing return statement in function");}  }
class C{  @Override public boolean nullsAreSortedAtStart(){  debugCodeCall("nullsAreSortedAtStart");  return false;}  }
class C{  DecoDrawEffect(@NonNull EffectType effectType,@NonNull Paint paint,@Nullable String text){  mEffectType=effectType;  setPaint(paint);  setText(text,paint.getColor());}  }
class C{  public BillingAdapterConnectionException(String message){  super(message);}  }
class C{  void grantLock(Object name) throws InterruptedException {  waitWhileInitializing();  if (!acquireDestroyReadLock(0)) {    waitUntilDestroyed();    checkDestroyed();  }  try {    checkDestroyed();    DLockGrantToken grant=getGrantToken(name);    if (grant != null) {      removeGrantIfUnused(grant);    }  }  finally {    releaseDestroyReadLock();  }}  }
class C{  public void clear(){  this.root=new TrieNode<V>();}  }
class C{  private void doSaveSession(){  board.saveSession(gameGrid);}  }
class C{  public boolean processRequest(final HttpServletRequest hsRequest,final HttpServletResponse hsResponse,FilterChain parentChain) throws IOException, ServletException {  RuleChain chain=getNewChain(hsRequest,parentChain);  if (chain == null)   return false;  chain.doRules(hsRequest,hsResponse);  return chain.isResponseHandled();}  }
class C{  public static TextContent xhtml(XmlBlob div){  TextContent content=new TextContent();  content.setXhtml(div);  return content;}  }
class C{  private static String buildFooter(){  if (footer == null) {    StringBuilder strb=new StringBuilder();    strb.append(RIGHT_SQUARE_BRACKET);    strb.append(RIGHT_BRACE);    footer=strb.toString();  }  return footer;}  }
class C{  public SoftwareCertificate clone(){  SoftwareCertificate result=new SoftwareCertificate();  result.ProductName=ProductName;  result.ProductUri=ProductUri;  result.VendorName=VendorName;  result.VendorProductCertificate=VendorProductCertificate;  result.SoftwareVersion=SoftwareVersion;  result.BuildNumber=BuildNumber;  result.BuildDate=BuildDate;  result.IssuedBy=IssuedBy;  result.IssueDate=IssueDate;  if (SupportedProfiles != null) {    result.SupportedProfiles=new SupportedProfile[SupportedProfiles.length];    for (int i=0; i < SupportedProfiles.length; i++)     result.SupportedProfiles[i]=SupportedProfiles[i].clone();  }  return result;}  }
class C{  protected ThisArgProviderImpl(){  super();}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 90) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  private int readTexturePixelInterpolated(float u,float v,float widthFactor,float heightFactor){  int texelU0=pixelToTexel(u);  int texelV0=pixelToTexel(v);  int texelU1=texelU0 + 1;  int texelV1=texelV0 + 1;  if (texelU1 >= cachedTextureOriginal.width) {    texelU1=texelU0;  }  if (texelV1 >= cachedTextureOriginal.height) {    texelV1=texelV0;  }  float factorU1=u - texelU0;  float factorV1=v - texelV0;  float factorU0=1f - factorU1;  float factorV0=1f - factorV1;  if (factorU1 == 0f && widthFactor > 1f) {    factorU1=(widthFactor - 1f) / widthFactor;    factorU0=1f / widthFactor;  }  if (factorV1 == 0f && heightFactor > 1f) {    factorV1=(heightFactor - 1f) / heightFactor;    factorV0=1f / heightFactor;  }  int pixel;  if (factorU0 > 0f && factorV0 > 0f) {    pixel=multiply(cachedTextureOriginal.readPixel(texelU0,texelV0),factorU0 * factorV0);  } else {    pixel=0;  }  if (factorU1 > 0f && factorV0 > 0f) {    pixel+=multiply(cachedTextureOriginal.readPixel(texelU1,texelV0),factorU1 * factorV0);  }  if (factorU0 > 0f && factorV1 > 0f) {    pixel+=multiply(cachedTextureOriginal.readPixel(texelU0,texelV1),factorU0 * factorV1);  }  if (factorU1 > 0f && factorV1 > 0f) {    pixel+=multiply(cachedTextureOriginal.readPixel(texelU1,texelV1),factorU1 * factorV1);  }  return pixel;}  }
class C{  public static MockTransaction createTransactionWithFee(final long fee){  return createTransactionWithFee(127,fee);}  }
class C{  public static int intersectPolygonRay(Vector2fc[] vertices,float originX,float originY,float dirX,float dirY,Vector2f p){  float nearestT=Float.MAX_VALUE;  int count=vertices.length;  int edgeIndex=-1;  float aX=vertices[count - 1].x(), aY=vertices[count - 1].y();  for (int i=0; i < count; i++) {    Vector2fc b=vertices[i];    float bX=b.x(), bY=b.y();    float doaX=originX - aX, doaY=originY - aY;    float dbaX=bX - aX, dbaY=bY - aY;    float invDbaDir=1.0f / (dbaY * dirX - dbaX * dirY);    float t=(dbaX * doaY - dbaY * doaX) * invDbaDir;    if (t >= 0.0f && t < nearestT) {      float t2=(doaY * dirX - doaX * dirY) * invDbaDir;      if (t2 >= 0.0f && t2 <= 1.0f) {        edgeIndex=(i - 1 + count) % count;        nearestT=t;        p.x=originX + t * dirX;        p.y=originY + t * dirY;      }    }    aX=bX;    aY=bY;  }  return edgeIndex;}  }
class C{  protected byte[] processInfoSqlResponse(GenericResponse response){  return response.getData();}  }
class C{  public static BufferedImage renderToImage(String url,String path,int width) throws IOException {  return renderImageToOutput(url,new FSImageWriter(),path,width);}  }
class C{  public BattleDialog(Shell parent,BattleResultDto result){  super(parent,SWT.CLOSE | SWT.TITLE | SWT.MIN| SWT.RESIZE);  this.result=result;}  }
class C{  public void deleteTag(int tagId,int ifdId){  mData.removeTag(getTrueTagKey(tagId),ifdId);}  }
class C{  public T caseReactionTrigger(ReactionTrigger object){  return null;}  }
class C{  public static ClassVertex createResolvedClassVertex(ClassDescriptor classDescriptor,XClass xclass){  return new ClassVertex(classDescriptor,xclass);}  }
class C{  private View findFocusableViewInMyBoundsX(final boolean leftFocus,final int left,View preferredFocusable){  final int fadingEdgeLength=getHorizontalFadingEdgeLength() / 2;  final int leftWithoutFadingEdge=left + fadingEdgeLength;  final int rightWithoutFadingEdge=left + getWidth() - fadingEdgeLength;  if ((preferredFocusable != null) && (preferredFocusable.getLeft() < rightWithoutFadingEdge) && (preferredFocusable.getRight() > leftWithoutFadingEdge)) {    return preferredFocusable;  }  return findFocusableViewInBoundsX(leftFocus,leftWithoutFadingEdge,rightWithoutFadingEdge);}  }
class C{  public static boolean isBigDecCategory(ClassNode type){  return type == BigDecimal_TYPE || isBigIntCategory(type);}  }
class C{  public T caseDomain(Domain object){  return null;}  }
class C{  protected CompositeProcessorImpl(){  super();}  }
class C{  public <T>JSONAPIDocument<T> readDocument(byte[] data,Class<T> clazz){  return readDocument(new ByteArrayInputStream(data),clazz);}  }
class C{  public java.lang.Object lookup(Name name) throws NamingException {  if (_nc == null)   throw new ConfigurationException("Context does not have a corresponding NamingContext");  if (name.size() == 0)   return this;  NameComponent[] path=CNNameParser.nameToCosName(name);  try {    java.lang.Object answer=callResolve(path);    try {      return NamingManager.getObjectInstance(answer,name,this,_env);    } catch (    NamingException e) {      throw e;    }catch (    Exception e) {      NamingException ne=new NamingException("problem generating object using object factory");      ne.setRootCause(e);      throw ne;    }  } catch (  CannotProceedException cpe) {    javax.naming.Context cctx=getContinuationContext(cpe);    return cctx.lookup(cpe.getRemainingName());  }}  }
class C{  public NSNumber(byte[] bytes,final int startIndex,final int endIndex,final int type){switch (type) {case INTEGER:{      doubleValue=longValue=BinaryPropertyListParser.parseLong(bytes,startIndex,endIndex);      break;    }case REAL:{    doubleValue=BinaryPropertyListParser.parseDouble(bytes,startIndex,endIndex);    longValue=Math.round(doubleValue);    break;  }default :{  throw new IllegalArgumentException("Type argument is not valid.");}}this.type=type;}  }
class C{  public void forEach(Allocation aout){  forEach(0,null,aout,null);}  }
class C{  private void processAnsiCommand_J(){  int ansiParameter;  if (ansiParameters[0].length() == 0)   ansiParameter=0; else   ansiParameter=getAnsiParameter(0);switch (ansiParameter) {case 0:    break;case 1:  break;case 2:break;default :Logger.log("Unexpected J-command parameter: " + ansiParameter);break;}}  }
class C{  public final boolean sendEmptyMessage(int what){  return mExec.sendEmptyMessage(what);}  }
class C{  private State buildPatch(TaskState.TaskStage stage,TaskState.SubStage subStage,Throwable e){  State s=new State();  s.taskInfo=new TaskState();  s.taskInfo.stage=stage;  s.taskInfo.subStage=subStage;  if (e != null) {    s.taskInfo.failure=Utils.toServiceErrorResponse(e);  }  return s;}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:26.824 -0500",hash_original_method="B69BE838486F71F317B5A550A92CFA4E",hash_generated_method="25A014A1FEF19B4236FB3CA40FF0BD1E") public void start() throws IOException {  Thread thread=new Thread(this);  thread.setName("TLSMessageProcessorThread");  thread.setPriority(Thread.MAX_PRIORITY);  thread.setDaemon(true);  this.sock=sipStack.getNetworkLayer().createSSLServerSocket(this.getPort(),0,this.getIpAddress());  ((SSLServerSocket)this.sock).setNeedClientAuth(false);  ((SSLServerSocket)this.sock).setUseClientMode(false);  ((SSLServerSocket)this.sock).setWantClientAuth(true);  String[] enabledCiphers=((SipStackImpl)sipStack).getEnabledCipherSuites();  ((SSLServerSocket)this.sock).setEnabledCipherSuites(enabledCiphers);  ((SSLServerSocket)this.sock).setWantClientAuth(true);  this.isRunning=true;  thread.start();}  }
class C{  public TemplatesGroup(ProjectCategory category){  this(category.getDisplayName(),category.getDescription(),category.getIcon(),category.getWeight(),category.getGroupName(),category.getId(),category.createModuleBuilder());  myProjectCategory=category;}  }
class C{  FutureSolution(Solution solution){  super(solution);}  }
class C{  public SslError(int error,SslCertificate certificate){  addError(error);  mCertificate=certificate;}  }
class C{  public DefaultPositionUpdater(String category){  fCategory=category;}  }
class C{  public void decrypt(byte[] buffer){  int nLen=buffer.length;  long lTemp;  for (int nI=0; nI < nLen; nI+=8) {    lTemp=BinConverter.byteArrayToLong(buffer,nI);    lTemp=decryptBlock(lTemp);    BinConverter.longToByteArray(lTemp,buffer,nI);  }  ;}  }
class C{  public CActionShrinkSelection(final ZyGraph graph){  super("Shrink Selection Both");  m_graph=graph;}  }
class C{  public void createSubsampleWithReplacement(Random random,int origSize,int sampleSize,int actualClasses,int[] classIndices){  for (int i=0; i < sampleSize; i++) {    int index=0;    if (random.nextDouble() < m_BiasToUniformClass) {      int cIndex=random.nextInt(actualClasses);      for (int j=0, k=0; j < classIndices.length - 1; j++) {        if ((classIndices[j] != classIndices[j + 1]) && (k++ >= cIndex)) {          index=classIndices[j] + random.nextInt(classIndices[j + 1] - classIndices[j]);          break;        }      }    } else {      index=random.nextInt(origSize);    }    push((Instance)getInputFormat().instance(index).copy());  }}  }
class C{  public void addExternalId(ExternalId externalId){  getExternalIds().add(externalId);}  }
class C{  public static double linearInterpolation(double a,double b,float t){  return a + t * (b - a);}  }
class C{  public static void updateCashBookStatus(Properties ctx,int cashBookId,boolean active,String trxName) throws OperationException {  MCashBook cashBook=loadCashBook(ctx,cashBookId,trxName);  if (!active && POSTerminalManager.isCashbookPresentOnTerminal(ctx,cashBookId,trxName)) {    throw new CashBookAlreadyAssignedException("Cannot deactivate the cash book as it has been assigned to a terminal");  }  cashBook.setIsActive(active);  PoManager.save(cashBook);}  }
class C{  public boolean isSourceMap(){  return sourceMap;}  }
class C{  public boolean isToHoist(FunctionDeclaration element){  return isTaggedAs(Tag.toHoist,element);}  }
class C{  public CategorizedTextEditGroup(String name,GroupCategorySet groupCategories){  super(name);  Assert.isNotNull(groupCategories);  fGroupCategories=groupCategories;}  }
class C{  public boolean isQueueIdle(){  return pending == null || networkThreads == null || networkThreads[0] == null || (pending.size() == 0 && networkThreads[0].getCurrentRequest() == null);}  }
class C{  BigDecimalPolynomial(int N){  coeffs=new BigDecimal[N];  for (int i=0; i < N; i++) {    coeffs[i]=ZERO;  }}  }
class C{  @Override protected double eval(ConnectFourState state,String player){  double value=super.eval(state,player);  if (hasSafeWinner(value)) {    if (value > (utilMin + utilMax) / 2)     value-=state.getMoves() / 1000.0; else     value+=state.getMoves() / 1000.0;  }  return value;}  }
class C{  public void stopNotification(){  if (mStarted) {    mStarted=false;    mController.unregisterCallback(mCb);    try {      mNotificationManager.cancel(NOTIFICATION_ID);      mService.unregisterReceiver(this);    } catch (    IllegalArgumentException ex) {    }    mService.stopForeground(true);  }}  }
class C{  public void updateIsForward(boolean forward){  boolean old=isForward;  isForward=forward;  updateSpeedSetting(intSpeed(speedSetting));  if (old != isForward) {    notifyPropertyChangeListener("IsForward",old,isForward);  }}  }
class C{  public void testSetSiteAuditExecutionListMax(){  System.out.println("setSiteAuditExecutionListMax");  AuditServiceThreadQueueImpl instance=new AuditServiceThreadQueueImpl();  int siteAuditExecutionListMax=10;  instance.setSiteAuditExecutionListMax(siteAuditExecutionListMax);  assertEquals(siteAuditExecutionListMax,instance.getSiteAuditExecutionListMax());}  }
class C{  protected HashEntry currentEntry(){  return last;}  }
class C{  public int viewToModel(float fx,float fy,Shape a,Position.Bias[] bias){  bias[0]=Position.Bias.Forward;  Rectangle alloc=a.getBounds();  RSyntaxDocument doc=(RSyntaxDocument)getDocument();  int x=(int)fx;  int y=(int)fy;  if (y < alloc.y) {    return getStartOffset();  } else   if (y > alloc.y + alloc.height) {    return getEndOffset() - 1;  } else {    Element map=doc.getDefaultRootElement();    int lineIndex=Math.abs((y - alloc.y) / lineHeight);    if (lineIndex >= map.getElementCount())     return getEndOffset() - 1;    Element line=map.getElement(lineIndex);    if (x < alloc.x)     return line.getStartOffset(); else     if (x > alloc.x + alloc.width)     return line.getEndOffset() - 1; else {      int p0=line.getStartOffset();      Token tokenList=doc.getTokenListForLine(lineIndex);      tabBase=alloc.x;      int offs=tokenList.getListOffset((RSyntaxTextArea)getContainer(),this,tabBase,x);      return offs != -1 ? offs : p0;    }  }}  }
class C{  public void propertyChange(PropertyChangeEvent e){  String propertyName=e.getPropertyName();  if (propertyName == "horizontalScrollBar" || propertyName == "verticalScrollBar") {    if (e.getNewValue() instanceof JScrollBar) {      setScrollBarRelations((JScrollBar)e.getNewValue());    }  }}  }
class C{  public PositionQuery(URL feedUrl){  super(feedUrl);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getWord_();}  }
class C{  public static DoubleMatrix jblas_cholesky(double[][] A){  return org.jblas.Decompose.cholesky(new DoubleMatrix(A));}  }
class C{  public static StoredCellProbsObs serializableInstance(){  return new StoredCellProbsObs(new ArrayList<Node>());}  }
class C{  public boolean isDeclaredAsync(){  return declaredAsync;}  }
class C{  public ToStringHelper addValue(boolean value){  return addHolder(String.valueOf(value));}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public void clear(){  vertices=new PositionTextureVertex[0];  faces=new TexturedPolygon[0];  transformGroup.clear();  transformGroup.put("0",new TransformGroupBone(new Bone(0,0,0,0),1D));  currentGroup=transformGroup.get("0");}  }
class C{  public static String toString(int i){  if (i < NUMBERS_MIN || i > NUMBERS_MAX)   return Integer.toString(i,10);  return NUMBERS[i];}  }
class C{  private TimeFormat(){}  }
class C{  public void testSendReceive() throws Exception {  messages.clear();  for (int i=0; i < data.length; i++) {    Message message=session.createTextMessage(data[i]);    message.setStringProperty("stringProperty",data[i]);    message.setIntProperty("intProperty",i);    if (verbose) {      if (LOG.isDebugEnabled()) {        LOG.debug("About to send a message: " + message + " with text: "+ data[i]);      }    }    sendToProducer(producer,producerDestination,message);    messageSent();  }  assertMessagesAreReceived();  LOG.info("" + data.length + " messages(s) received, closing down connections");}  }
class C{  public boolean add(E e){  if (offer(e))   return true; else   throw new IllegalStateException("Queue full");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodereplacechildnomodificationallowederrEE.class,args);}  }
class C{  private void fillResultsWithQuery(final Query query,final boolean updateResultsLabel){  final DisplayFieldList displayFieldList=query.getDisplayFieldList();  displayFieldList.clear();  displayFieldList.add(CoreFieldReferenceNames.ID);  displayFieldList.add(CoreFieldReferenceNames.WORK_ITEM_TYPE);  displayFieldList.add(CoreFieldReferenceNames.TITLE);  displayFieldList.add(CoreFieldReferenceNames.STATE);  final String projectName=(getSelectedProject() != null) ? getSelectedProject().getName() : null;  final String queryName=(selectedQueryDefinition != null) ? selectedQueryDefinition.getName() : null;  final QueryResultCommand command=new QueryResultCommand(query,projectName,queryName);  final IStatus status=UICommandExecutorFactory.newBusyIndicatorCommandExecutor(getShell()).execute(command);  if (status.getSeverity() != Status.OK) {    return;  }  final QueryResultData results=command.getQueryResultData();  resultsControl.setServer(server);  resultsControl.setWorkItems(results);  resultsControl.setEnabled(results.getCount() > 0);  if (updateResultsLabel) {    final String message=MessageFormat.format(Messages.getString("WorkItemPickerDialog.ResultsLabelText"),new Object[]{new Integer(results.getCount())});    resultsLabel.setText(message);    filterLabel.setVisible(true);  } else {    resultsLabel.setText("");    filterLabel.setVisible(false);  }  resultsComposite.layout(true);}  }
class C{  public void close(){  out.close();}  }
class C{  @SuppressWarnings("unchecked") public Block(Header header,List<? extends MerkleTreeNode> transactions){  this.header=header;  this.nodes=Collections.unmodifiableList(transactions);  int pruned=0;  for (  MerkleTreeNode n : transactions) {    if (!(n instanceof Transaction))     ++pruned;  }  if (pruned > 0) {    this.transactions=new ArrayList<>(nodes.size() - pruned);    for (    MerkleTreeNode n : transactions) {      if (n instanceof Transaction)       this.transactions.add((Transaction)n);    }    this.transactions=Collections.unmodifiableList(this.transactions);  } else {    this.transactions=(List<Transaction>)nodes;  }}  }
class C{  static void resetForTesting(){  INSTANCE=new DurianPlugins();}  }
class C{  public JsonNode addAll(ArrayNode other){  int len=other.size();  if (len > 0) {    if (_children == null) {      _children=new ArrayList<JsonNode>(len + 2);    }    other.addContentsTo(_children);  }  return this;}  }
class C{  public void read(Reader in,Object desc) throws IOException {  RTextAreaEditorKit kit=(RTextAreaEditorKit)getUI().getEditorKit(this);  setText(null);  Document doc=getDocument();  if (desc != null)   doc.putProperty(Document.StreamDescriptionProperty,desc);  try {    kit.read(in,doc,0);  } catch (  BadLocationException e) {    throw new IOException(e.getMessage());  }}  }
class C{  public FXGSymbolClass transcode(FXGNode node,String packageName,String className){  this.packageName=packageName;  if (node instanceof FlexGraphicNode) {    FlexGraphicNode graphicNode=(FlexGraphicNode)node;    graphicClass=new FXGSymbolClass();    graphicClass.setPackageName(packageName);    graphicClass.setClassName(className);    DefineSprite sprite=(DefineSprite)transcode(graphicNode);    graphicClass.setSymbol(sprite);    if (graphicNode.className != null)     sprite.name=graphicNode.className;    StringBuilder buf=new StringBuilder(512);    buf.append("package ").append(packageName).append("\n");    buf.append("{\n\n");    if (graphicNode.baseClassName != null) {      buf.append("import ");      buf.append(graphicNode.baseClassName);      buf.append(";\n\n");      buf.append("public class ").append(className).append(" extends ");      buf.append(graphicNode.baseClassName);      buf.append("\n");    } else {      buf.append("import spark.core.SpriteVisualElement;\n\n");      buf.append("public class ").append(className).append(" extends SpriteVisualElement\n");    }    buf.append("{\n");    buf.append("    public function ").append(className).append("()\n");    buf.append("    {\n");    buf.append("        super();\n");    if (!Double.isNaN(graphicNode.viewWidth))     buf.append("        viewWidth = ").append(graphicNode.viewWidth).append(";\n");    if (!Double.isNaN(graphicNode.viewHeight))     buf.append("        viewHeight = ").append(graphicNode.viewHeight).append(";\n");    if (graphicNode.getMaskType() == MaskType.ALPHA && graphicNode.mask != null) {      int maskIndex=graphicNode.mask.getMaskIndex();      buf.append("        this.cacheAsBitmap = true;\n");      buf.append("        this.mask = this.getChildAt(").append(maskIndex).append(");\n");    }    buf.append("    }\n");    buf.append("}\n");    buf.append("}\n");    graphicClass.setGeneratedSource(buf.toString());    return graphicClass;  }  return null;}  }
class C{  public static void v(String tag,String msg,Object... args){  if (sLevel > LEVEL_VERBOSE) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.v(tag,msg);}  }
class C{  @SuppressLint("NewApi") public synchronized static Codec[] findEncodersForMimeType(String mimeType){  if (sEncoders != null)   return sEncoders;  ArrayList<Codec> encoders=new ArrayList<Codec>();  for (int j=MediaCodecList.getCodecCount() - 1; j >= 0; j--) {    MediaCodecInfo codecInfo=MediaCodecList.getCodecInfoAt(j);    if (!codecInfo.isEncoder())     continue;    String[] types=codecInfo.getSupportedTypes();    for (int i=0; i < types.length; i++) {      if (types[i].equalsIgnoreCase(mimeType)) {        try {          MediaCodecInfo.CodecCapabilities capabilities=codecInfo.getCapabilitiesForType(mimeType);          Set<Integer> formats=new HashSet<Integer>();          for (int k=0; k < capabilities.colorFormats.length; k++) {            int format=capabilities.colorFormats[k];            for (int l=0; l < SUPPORTED_COLOR_FORMATS.length; l++) {              if (format == SUPPORTED_COLOR_FORMATS[l]) {                formats.add(format);              }            }          }          Codec codec=new Codec(codecInfo.getName(),(Integer[])formats.toArray(new Integer[formats.size()]));          encoders.add(codec);        } catch (        Exception e) {          Log.wtf(TAG,e);        }      }    }  }  sEncoders=(Codec[])encoders.toArray(new Codec[encoders.size()]);  return sEncoders;}  }
class C{  public String toString(){  return "null";}  }
class C{  public ClientConfig withSessionKeyRenewTimeout(int sessionKeyRenewTimeout){  setSessionKeyRenewTimeout(sessionKeyRenewTimeout);  return this;}  }
class C{  public static final String moveToString(Position pos,Move move,boolean longForm){  MoveGen.MoveList moves=MoveGen.instance.pseudoLegalMoves(pos);  MoveGen.removeIllegal(pos,moves);  return moveToString(pos,move,longForm,moves);}  }
class C{  public void zoom(double qt){  curX+=(offX * qt) / 2.0;  curY+=(offY * qt) / 2.0;  offX-=(offX * qt);  offY-=(offY * qt);}  }
class C{  public boolean intersects(Cluster cluster){  return mentions.stream().anyMatch(null);}  }
class C{  protected final void assertConfigs(final String solrconfigFile,final String schemaFile,final String errString) throws Exception {  assertConfigs(solrconfigFile,schemaFile,null,errString);}  }
class C{  @Override public void process(final DM dm,final ReplyProcessor21 processor){  final long startTime=getTimestamp();  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"ManageBucketReplyMessage process invoking reply processor with processorId: {}",this.processorId);  }  if (processor == null) {    if (logger.isTraceEnabled(LogMarker.DM)) {      logger.trace(LogMarker.DM,"ManageBucketReplyMessage processor not found");    }    return;  }  processor.process(this);  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"{} processed {}",processor,this);  }  dm.getStats().incReplyMessageTime(DistributionStats.getStatTime() - startTime);}  }
class C{  FiringPlan guessBestFiringPlanUnderHeatWithTwists(Entity shooter,@Nullable EntityState shooterState,Targetable target,@Nullable EntityState targetState,int maxHeat,IGame game){  FiringPlan noTwistPlan=guessBestFiringPlanUnderHeat(shooter,shooterState,target,targetState,maxHeat,game);  if (!shooter.canChangeSecondaryFacing()) {    return noTwistPlan;  }  int originalFacing=shooter.getSecondaryFacing();  shooter.setSecondaryFacing(correctFacing(originalFacing + 1));  FiringPlan rightTwistPlan=guessBestFiringPlanUnderHeat(shooter,shooterState,target,targetState,maxHeat,game);  rightTwistPlan.setTwist(1);  shooter.setSecondaryFacing(correctFacing(originalFacing - 1));  FiringPlan leftTwistPlan=guessBestFiringPlanUnderHeat(shooter,shooterState,target,targetState,maxHeat,game);  leftTwistPlan.setTwist(-1);  shooter.setSecondaryFacing(originalFacing);  if ((noTwistPlan.getUtility() > rightTwistPlan.getUtility()) && (noTwistPlan.getUtility() > leftTwistPlan.getUtility())) {    return noTwistPlan;  }  if (leftTwistPlan.getUtility() > rightTwistPlan.getUtility()) {    return leftTwistPlan;  }  return rightTwistPlan;}  }
class C{  public SQLIntegrityConstraintViolationException(Throwable cause){  super(cause);}  }
class C{  public Boolean deleteExecutionState(String topologyName){  return awaitResult(delegate.deleteExecutionState(topologyName));}  }
class C{  private void overrideDescriptionIfSupplied(String descriptionOverride){  TextView descriptionView=(TextView)findViewById(R.id.description);  if (!TextUtils.isEmpty(descriptionOverride)) {    descriptionView.setText(descriptionOverride);  } else {    descriptionView.setVisibility(View.GONE);  }}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  Zoneinfo(){  zones=new HashMap<String,Zone>();  rules=new HashMap<String,Rule>();  aliases=new HashMap<String,String>();}  }
class C{  public Label(String packageName,String packageSignature,String viewName,String text,String locale,int packageVersion,String screenshotPath,long timestamp){  this(NO_ID,packageName,packageSignature,viewName,text,locale,packageVersion,screenshotPath,timestamp);}  }
class C{  public boolean isStatic(){  return StorageClass == IMAGE_SYM_CLASS_STATIC;}  }
class C{  public static void run(Options options) throws Exception {  boolean isPub=options.get(OPT_PUB);  DevelopmentProvider tp=new DevelopmentProvider();  Topology top;  if (isPub) {    PublisherApp publisher=new PublisherApp(tp,options);    top=publisher.buildAppTopology();  } else {    SubscriberApp subscriber=new SubscriberApp(tp,options);    top=subscriber.buildAppTopology();  }  System.out.println("Using Kafka cluster at bootstrap.servers=" + options.get(OPT_BOOTSTRAP_SERVERS) + " zookeeper.connect="+ options.get(OPT_ZOOKEEPER_CONNECT)+ "\n"+ (isPub ? "Publishing" : "Subscribing")+ " to topic "+ options.get(OPT_TOPIC));  System.out.println("Console URL for the job: " + tp.getServices().getService(HttpServer.class).getConsoleUrl());  tp.submit(top);}  }
class C{  private boolean rollbackFailedTransactions(TableReference tableRef,Map<Cell,Long> keysToDelete,Map<Long,Long> commitTimestamps,TransactionService transactionService){  for (  long startTs : Sets.newHashSet(keysToDelete.values())) {    if (commitTimestamps.get(startTs) == null) {      log.warn("Rolling back transaction: " + startTs);      if (!rollbackOtherTransaction(startTs,transactionService)) {        return false;      }    } else {      Validate.isTrue(commitTimestamps.get(startTs) == TransactionConstants.FAILED_COMMIT_TS);    }  }  try {    log.debug("For table: " + tableRef + " we are deleting values of an uncommitted transaction: "+ keysToDelete);    keyValueService.delete(tableRef,Multimaps.forMap(keysToDelete));  } catch (  RuntimeException e) {    String msg="This isn't a bug but it should be infrequent if all nodes of your KV service are running. " + "Delete has stronger consistency semantics than read/write and must talk to all nodes " + "instead of just talking to a quorum of nodes. "+ "Failed to delete keys for table" + tableRef + " from an uncommitted transaction; "+ " sweep should eventually clean this when it processes this table.";    if (log.isDebugEnabled()) {      msg+=" The keys that failed to be deleted during rollback were " + keysToDelete;    }    log.warn(msg,e);  }  return true;}  }
class C{  public static void cDiv(double a,double b,double c,double d,double[] results){  long aa, bb, cc, dd, ss;  double t;  int ha, hb, hc, hd, hz, hw, hs;  aa=Double.doubleToRawLongBits(a);  bb=Double.doubleToRawLongBits(b);  ha=(int)((aa >> 32) & 0x7fffffff);  hb=(int)((bb >> 32) & 0x7fffffff);  hz=(ha > hb) ? ha : hb;  cc=Double.doubleToRawLongBits(c);  dd=Double.doubleToRawLongBits(d);  hc=(int)((cc >> 32) & 0x7fffffff);  hd=(int)((dd >> 32) & 0x7fffffff);  hw=(hc > hd) ? hc : hd;  if (hz < 0x07200000 && hw >= 0x32800000 && hw < 0x47100000) {    hs=(((0x47100000 - hw) >> 1) & 0xfff00000) + 0x3ff00000;  } else   hs=(((hw >> 2) - hw) + 0x6fd7ffff) & 0xfff00000;  ss=((long)hs) << 32;  double ssd=Double.longBitsToDouble(ss);  c*=ssd;  d*=ssd;  t=1.0 / (c * c + d * d);  c*=ssd;  d*=ssd;  results[0]=(a * c + b * d) * t;  results[1]=(b * c - a * d) * t;}  }
class C{  private void showDebug(){  if (DEBUG) {    System.out.println(">>>KRBError:");    if (cTime != null)     System.out.println("\t cTime is " + cTime.toDate().toString() + " "+ cTime.toDate().getTime());    if (cuSec != null) {      System.out.println("\t cuSec is " + cuSec.intValue());    }    System.out.println("\t sTime is " + sTime.toDate().toString() + " "+ sTime.toDate().getTime());    System.out.println("\t suSec is " + suSec);    System.out.println("\t error code is " + errorCode);    System.out.println("\t error Message is " + Krb5.getErrorMessage(errorCode));    if (cname != null) {      System.out.println("\t cname is " + cname.toString());    }    if (sname != null) {      System.out.println("\t sname is " + sname.toString());    }    if (eData != null) {      System.out.println("\t eData provided.");    }    if (eCksum != null) {      System.out.println("\t checksum provided.");    }    System.out.println("\t msgType is " + msgType);  }}  }
class C{  public static void assertTransactionHashesNotification(final Notification notification,final Collection<HashMetaDataPair> pairs){  final TransactionHashesNotification n=(TransactionHashesNotification)notification;  Assert.assertThat(n.getType(),IsEqual.equalTo(NotificationType.TransactionHashes));  Assert.assertThat(n.getPairs(),IsEquivalent.equivalentTo(pairs));}  }
class C{  public String convertNullModifierToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public static void write(float latPoint,float lonPoint,int offset_x1,int offset_y1,int w,int h,float s,float e,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.ARC_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_ARC);  dos.writeByte(RENDERTYPE_OFFSET);  dos.writeFloat(latPoint);  dos.writeFloat(lonPoint);  dos.writeInt(offset_x1);  dos.writeInt(offset_y1);  dos.writeInt(w);  dos.writeInt(h);  dos.writeFloat(s);  dos.writeFloat(e);  properties.write(dos);}  }
class C{  public static Reader utf8(InputStream stream){  return new InputStreamReader(stream,UTF_8);}  }
class C{  public JSONSerialiser(){  mapper=createDefaultMapper();}  }
class C{  public void insertElementAt(int value,int at){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  super.insertElementAt(value,at);}  }
class C{  private void buildClients(){  asrClient=HttpClientBuilder.create().build();  ttsClient=HttpClientBuilder.create().build();  try {    URIBuilder builder=new URIBuilder();    builder.setScheme("https");    builder.setHost("dictation.nuancemobility.net");    builder.setPort(443);    builder.setPath("/NMDPAsrCmdServlet/dictation");    builder.setParameter("appId",system.getSettings().params.getProperty("id"));    builder.setParameter("appKey",system.getSettings().params.getProperty("key"));    builder.setParameter("id","0000");    asrURI=builder.build();    builder.setHost("tts.nuancemobility.net");    builder.setPath("/NMDPTTSCmdServlet/tts");    builder.setParameter("ttsLang",system.getSettings().params.getProperty("lang"));    ttsURI=builder.build();  } catch (  Exception e) {    throw new RuntimeException("cannot build client: " + e);  }}  }
class C{  @SuppressWarnings("unchecked") public void load(ObjectInputStream ois) throws IOException, ClassNotFoundException {  MEMSIZE=ois.readInt();  REGSIZE=ois.readInt();  reg=(Registers)ois.readObject();  regInfo=(TreeMap<Integer,MemCellInfo>)ois.readObject();  memory=(Memory)ois.readObject();  memInfo=(TreeMap<Integer,MemCellInfo>)ois.readObject();  variables=(Hashtable<String,Integer>)ois.readObject();  constants=(Hashtable<String,Long>)ois.readObject();  fCarry=ois.readBoolean();  fOverflow=ois.readBoolean();  fSign=ois.readBoolean();  fZero=ois.readBoolean();  fParity=ois.readBoolean();  fAuxiliary=ois.readBoolean();  fTrap=ois.readBoolean();  fDirection=ois.readBoolean();  nextReservableAddress=ois.readInt();}  }
class C{  private void updateRoleFactors(RolePricingData roleCosts,UserAssignmentFactors userFactors,Long refObjKey){  if (roleCosts == null || userFactors == null || userFactors.getRoleFactors().isEmpty()) {    return;  }  Map<Long,RolePricingDetails> rolePrices=roleCosts.getRolePricesForContainerKey(refObjKey);  Set<Long> roleDefKeys=rolePrices.keySet();  for (  Long roleDefKey : roleDefKeys) {    RolePricingDetails rolePricingDetails=rolePrices.get(roleDefKey);    Double factor=userFactors.getRoleFactors().get(roleDefKey);    if (factor != null) {      rolePricingDetails.setFactor(factor.doubleValue());    }  }}  }
class C{  public static <T extends PsiElement>T replaceElement(T original,PsiElement replacement) throws IncorrectOperationException {  try {    return (T)original.replace(replacement);  } catch (  IncorrectOperationException e) {  }catch (  UnsupportedOperationException e) {  }  PsiElement parent=original.getParent();  if (parent != null) {    PsiElement inserted=parent.addBefore(replacement,original);    original.delete();    return (T)inserted;  } else {    original.getNode().replaceAllChildrenToChildrenOf(replacement.getNode());    return original;  }}  }
class C{  public void configureAsTrafficChannel(TrafficChannelManager manager,CallEvent callEvent){  mTrafficChannelEndListener=manager;  mTrafficChannelCallEvent=callEvent;  String channel=mTrafficChannelCallEvent.getChannel();  if (channel != null) {    broadcast(new Metadata(MetadataType.CHANNEL_NUMBER,channel,true));  }  broadcast(new Metadata(MetadataType.PROTOCOL,mTrafficChannelCallEvent.getDecoderType().getDisplayString(),true));  String details=mTrafficChannelCallEvent.getDetails();  if (details != null) {    broadcast(new Metadata(MetadataType.DETAILS,details,true));  }  String from=mTrafficChannelCallEvent.getFromID();  if (from != null) {    broadcast(new Metadata(mTrafficChannelCallEvent.getFromIDType(),from,mTrafficChannelCallEvent.getFromIDAlias(),true));  }  String to=mTrafficChannelCallEvent.getToID();  if (to != null) {    broadcast(new Metadata(mTrafficChannelCallEvent.getToIDType(),to,mTrafficChannelCallEvent.getToIDAlias(),true));  }  long frequency=mTrafficChannelCallEvent.getFrequency();  if (frequency > 0) {    broadcast(new Metadata(MetadataType.FREQUENCY,String.valueOf(frequency),true));  }  broadcast(mTrafficChannelCallEvent);}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  private static float CallNonvirtualFloatMethodA(JNIEnvironment env,int objJREF,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualFloatMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,objJREF,methodID,argAddress,TypeReference.Float,true);  return Reflection.unwrapFloat(returnObj);}  }
class C{  public static double toDoubleValue(double d){  return d;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.N4_METHOD_DECLARATION__BODY:    return getBody();case N4JSPackage.N4_METHOD_DECLARATION__LOK:  return get_lok();case N4JSPackage.N4_METHOD_DECLARATION__DEFINED_TYPE:if (resolve) return getDefinedType();return basicGetDefinedType();case N4JSPackage.N4_METHOD_DECLARATION__FPARS:return getFpars();case N4JSPackage.N4_METHOD_DECLARATION__RETURN_TYPE_REF:return getReturnTypeRef();case N4JSPackage.N4_METHOD_DECLARATION__GENERATOR:return isGenerator();case N4JSPackage.N4_METHOD_DECLARATION__DECLARED_ASYNC:return isDeclaredAsync();case N4JSPackage.N4_METHOD_DECLARATION__TYPE_VARS:return getTypeVars();case N4JSPackage.N4_METHOD_DECLARATION__DECLARED_TYPE_REF:return getDeclaredTypeRef();case N4JSPackage.N4_METHOD_DECLARATION__BOGUS_TYPE_REF:return getBogusTypeRef();case N4JSPackage.N4_METHOD_DECLARATION__DECLARED_NAME:return getDeclaredName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void put(E e){  xfer(e,true,ASYNC,0);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.ENTER_STATE__STATE:    return state != null;}return super.eIsSet(featureID);}  }
class C{  public static Timeline createSequence(){  Timeline tl=pool.get();  tl.setup(Modes.SEQUENCE);  return tl;}  }
class C{  public void addListener(INotifyChangedListener notifyChangedListener){  changeNotifier.addListener(notifyChangedListener);}  }
class C{  public void turn(double amount){  if (amount == 0) {    return;  }  if (!isBlocked()) {    heading+=amount;  }}  }
class C{  public static String replaceEscapedRightAngle(String s){  StringBuilder buf=new StringBuilder();  int i=0;  while (i < s.length()) {    char c=s.charAt(i);    if (c == '<' && s.substring(i).startsWith("<\\\\>")) {      buf.append("<\\\\>");      i+="<\\\\>".length();      continue;    }    if (c == '>' && s.substring(i).startsWith(">\\>")) {      buf.append(">>");      i+=">\\>".length();      continue;    }    if (c == '\\' && s.substring(i).startsWith("\\>>") && !s.substring(i).startsWith("\\>>>")) {      buf.append(">>");      i+="\\>>".length();      continue;    }    buf.append(c);    i++;  }  return buf.toString();}  }
class C{  public Name composeName(Name name,Name prefix) throws NamingException {  return (Name)name.clone();}  }
class C{  public void testGenKeyPair02() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException {  if (!DSASupported) {    fail(NotSupportMsg);    return;  }  KeyPairGenerator[] kpg=createKPGen();  assertNotNull("KeyPairGenerator objects were not created",kpg);  KeyPair kp, kp1;  for (int i=0; i < kpg.length; i++) {    kp=kpg[i].generateKeyPair();    kp1=kpg[i].genKeyPair();    assertFalse("Incorrect private key",kp.getPrivate().equals(kp1.getPrivate()));    assertFalse("Incorrect public key",kp.getPublic().equals(kp1.getPublic()));  }}  }
class C{  IChange[] changes(EObject element,IXtextDocument doc) throws BadLocationException {  ArrayList<IChange> changes=new ArrayList<>();  if (element instanceof TypeDefiningElement) {    changes.add(semanticChangeProvider.setAccessModifier(doc,(TypeDefiningElement)element,this.modifier,this.export));  } else   if (element instanceof ExportedVariableStatement) {    changes.add(semanticChangeProvider.setAccessModifiers(doc,(ModifiableElement)element,this.modifier));  } else {    return changes.toArray(new IChange[changes.size()]);  }  if (element instanceof AnnotableElement) {    if (this.internal) {      changes.add(semanticChangeProvider.addAnnotation(doc,(AnnotableElement)element,INTERNAL_ANNOTATION));    } else {      changes.add(semanticChangeProvider.removeAnnotation(doc,(AnnotableElement)element,INTERNAL_ANNOTATION));    }    return changes.toArray(new IChange[changes.size()]);  }  return new IChange[]{};}  }
class C{  public BayesIm estimate(BayesPm bayesPm,DataSet dataSet){  if (bayesPm == null) {    throw new NullPointerException();  }  if (dataSet == null) {    throw new NullPointerException();  }  BayesUtils.ensureVarsInData(bayesPm.getVariables(),dataSet);  BayesIm estimatedIm=new MlBayesIm(bayesPm);  List<Node> variables=estimatedIm.getVariables();  DataSet columnDataSet2=dataSet.subsetColumns(variables);  this.reorderedDataSetDiscrete=columnDataSet2;  DiscreteProbs discreteProbs=new DataSetProbs(columnDataSet2);  Proposition assertion=Proposition.tautology(estimatedIm);  Proposition condition=Proposition.tautology(estimatedIm);  Evidence evidence2=Evidence.tautology(estimatedIm);  int numNodes=estimatedIm.getNumNodes();  for (int node=0; node < numNodes; node++) {    int numRows=estimatedIm.getNumRows(node);    int numCols=estimatedIm.getNumColumns(node);    int[] parents=estimatedIm.getParents(node);    for (int row=0; row < numRows; row++) {      int[] parentValues=estimatedIm.getParentValues(node,row);      for (int col=0; col < numCols; col++) {        assertion.setToTautology();        condition.setToTautology();        for (int i=0; i < numNodes; i++) {          for (int j=0; j < evidence2.getNumCategories(i); j++) {            if (!evidence2.getProposition().isAllowed(i,j)) {              condition.removeCategory(i,j);            }          }        }        assertion.disallowComplement(node,col);        for (int k=0; k < parents.length; k++) {          condition.disallowComplement(parents[k],parentValues[k]);        }        if (condition.existsCombination()) {          double p=discreteProbs.getConditionalProb(assertion,condition);          estimatedIm.setProbability(node,row,col,p);        } else {          estimatedIm.setProbability(node,row,col,Double.NaN);        }      }    }  }  return estimatedIm;}  }
class C{  public double moveTo(Coord newPosition){  if (Double.isNaN(newPosition.getX()) || Double.isNaN(newPosition.getY())) {    throw new IllegalArgumentException("NaN-Coordinates as new position!");  }  double distance=CoordUtils.calcEuclideanDistance(myPosition,newPosition) * Constants.BEELINE_FACTOR_STREET;  myPosition=newPosition;  return distance / Constants.AV_SPEED;}  }
class C{  protected BundleClassLoader(final Bundle bundle){  super(null);  this.bundle=bundle;}  }
class C{  private static ImageIcon checkForGif(URL url,ImageIcon icon){  if (icon.getImageLoadStatus() != COMPLETE) {    try {      ImageIcon gifIcon=GifUtil.getGifFromUrl(url);      LOGGER.info("Loaded " + url + " as GIF.");      return gifIcon;    } catch (    Exception ex) {      LOGGER.info("Error loading GIF " + url + ": "+ ex);    }  }  return icon;}  }
class C{  protected void indexPoints(InputStream is,long ptr,OutputStream os){  boolean moreRecords=true;  byte rHdr[]=new byte[SHAPE_RECORD_HEADER_LENGTH];  byte outBuf[]=new byte[SPATIAL_INDEX_RECORD_LENGTH];  int result;  int nRecords=0;  int recLengthWords, recLengthBytes;  long recOffset;  int shapeType;  int recBufSize=20;  byte recBuf[]=new byte[recBufSize];  double x=0;  double y=0;  try {    while (moreRecords) {      result=is.read(rHdr,0,SHAPE_RECORD_HEADER_LENGTH);      if (result < 0) {        moreRecords=false;        if (logger.isLoggable(Level.FINE)) {          logger.fine("Found " + nRecords + " records");          logger.fine("recBufSize = " + recBufSize);        }      } else {        nRecords++;        recOffset=ptr;        readBEInt(rHdr,0);        recLengthWords=readBEInt(rHdr,4);        recLengthBytes=recLengthWords * 2;        if (recLengthBytes > recBufSize) {          if (logger.isLoggable(Level.FINE)) {            logger.fine("Shapefile SpatialIndex increasing recBufSize to " + recLengthBytes);          }          recBufSize=recLengthBytes;          recBuf=new byte[recBufSize];        }        result=is.read(recBuf,0,recLengthBytes);        shapeType=readLEInt(recBuf,0);        if (shapeType != SHAPE_TYPE_NULL) {          x=readLEDouble(recBuf,4);          y=readLEDouble(recBuf,12);        }        ptr+=recLengthBytes + 8;        writeBEInt(outBuf,0,(int)(recOffset / 2));        writeBEInt(outBuf,4,recLengthWords);        writeLEDouble(outBuf,8,x);        writeLEDouble(outBuf,16,y);        writeLEDouble(outBuf,24,x);        writeLEDouble(outBuf,32,y);        os.write(outBuf,0,SPATIAL_INDEX_RECORD_LENGTH);      }    }  } catch (  java.io.IOException e) {    e.printStackTrace();  } finally {    try {      is.close();    } catch (    java.io.IOException e) {    }  }}  }
class C{  public void shouldGenerateMetadata(boolean generateMetadata){  this.generateMetadata=generateMetadata;}  }
class C{  private void checkDeferrals(final long blockAddr,final long commitTime,final DeleteBlockStats stats){  final boolean writeAll=false;  final int addr=(int)(blockAddr >> 32);  final int sze=(int)blockAddr & 0xFFFFFFFF;  if (log.isTraceEnabled())   log.trace("freeDeferrals at " + physicalAddress(addr) + ", size: "+ sze+ " releaseTime: "+ commitTime);  final byte[] buf=new byte[sze + 4];  getData(addr,buf);  final DataInputStream strBuf=new DataInputStream(new ByteArrayInputStream(buf));  m_allocationWriteLock.lock();  try {    int nxtAddr=strBuf.readInt();    while (nxtAddr != 0) {      stats.m_addresses++;      if (nxtAddr > 0) {        stats.m_blobs++;        final int bloblen=strBuf.readInt();        assert bloblen > 0;        nxtAddr=-nxtAddr;      }      if (!isCommitted(nxtAddr)) {        stats.m_badAddresses++;      }      if (stats.m_freed.containsKey(nxtAddr)) {        stats.m_duplicates.add(nxtAddr);        if (writeAll) {          log.warn("" + commitTime + " "+ nxtAddr+ " FREE DUP");        }      } else {        stats.m_freed.put(nxtAddr,nxtAddr);        if (writeAll) {          log.warn("" + commitTime + " "+ nxtAddr+ " FREE");        }      }      nxtAddr=strBuf.readInt();    }    assert isCommitted(addr);  } catch (  IOException e) {    throw new RuntimeException("Problem checking deferrals: " + e,e);  } finally {    m_allocationWriteLock.unlock();  }}  }
class C{  public void fireVetoableChange(String name,Object oldValue,Object newValue) throws PropertyVetoException {  super.fireVetoableChange(name,oldValue,newValue);  beanContextChildSupport.fireVetoableChange(name,oldValue,newValue);}  }
class C{  private void initSamplerContent(){  TextView tvSummary=(TextView)findViewById(R.id.tv_summary_heading);  tvSummary.setText(Html.fromHtml("... is a complete rewrite of <b>NavigationView</b> from <b>Design Support library</b>. What it allows:"));  TextView tvSummaryBullet1=(TextView)findViewById(R.id.tv_summary_bullet_1);  tvSummaryBullet1.setText(Html.fromHtml("Menu definition in <b>XML</b>"));  TextView tvSummaryBullet2=(TextView)findViewById(R.id.tv_summary_bullet_2);  tvSummaryBullet2.setText(Html.fromHtml("Menu implements <b>Parcelable</b> for retention of menu state"));  TextView tvSummaryBullet3=(TextView)findViewById(R.id.tv_summary_bullet_3);  tvSummaryBullet3.setText(Html.fromHtml("Choose from <b>Text, Checkbox, Switch, Group, TextWithBadge</b> menu item types"));  TextView tvSummaryBullet4=(TextView)findViewById(R.id.tv_summary_bullet_4);  tvSummaryBullet4.setText(Html.fromHtml("Custom <b>MenuInflater</b> allows defining menu items such as <b>&lt;Checkbox ... /&gt;</b> directly in <b>XML</b>"));  TextView tvSummaryBullet5=(TextView)findViewById(R.id.tv_summary_bullet_5);  tvSummaryBullet5.setText(Html.fromHtml("Switch between any number of Menus <i>without losing state</i>"));  TextView tvSummaryBullet6=(TextView)findViewById(R.id.tv_summary_bullet_6);  tvSummaryBullet6.setText(Html.fromHtml("Collapsible/expandable Groups"));  TextView tvSummaryBullet7=(TextView)findViewById(R.id.tv_summary_bullet_7);  tvSummaryBullet7.setText(Html.fromHtml("On-demand indentation (show icon space <i>without assigning an icon</i>)"));  TextView tvSummaryBullet8=(TextView)findViewById(R.id.tv_summary_bullet_8);  tvSummaryBullet8.setText(Html.fromHtml("<b>&lt;TextWithBadge ... /&gt;</b> item displays a (flushed-right) <b><i>badge</i></b> that can be set <b>asynchronously</b> - a <b>ProgressBar</b> is displayed while the value is being retrieved"));  TextView tvSummaryBullet9=(TextView)findViewById(R.id.tv_summary_bullet_9);  tvSummaryBullet9.setText(Html.fromHtml("Provide custom <b>Typefaces</b> and <b>text-styles</b> (normal, <b>bold</b>, <i>italic</i> &amp; <b><i>bold_italic</i></b>) for item, hint, group-header etc."));}  }
class C{  public void revertNameChange(){  NoteFigure noteFigure=(NoteFigure)getFigure();  noteFigure.setText(getNote().getObject());  noteFigure.setVisible(true);  refreshVisuals();}  }
class C{  private byte[] generateDerivedKey(int idByte,int n){  byte[] D=new byte[v];  byte[] dKey=new byte[n];  for (int i=0; i != D.length; i++) {    D[i]=(byte)idByte;  }  byte[] S;  if ((salt != null) && (salt.length != 0)) {    S=new byte[v * ((salt.length + v - 1) / v)];    for (int i=0; i != S.length; i++) {      S[i]=salt[i % salt.length];    }  } else {    S=new byte[0];  }  byte[] P;  if ((password != null) && (password.length != 0)) {    P=new byte[v * ((password.length + v - 1) / v)];    for (int i=0; i != P.length; i++) {      P[i]=password[i % password.length];    }  } else {    P=new byte[0];  }  byte[] I=new byte[S.length + P.length];  System.arraycopy(S,0,I,0,S.length);  System.arraycopy(P,0,I,S.length,P.length);  byte[] B=new byte[v];  int c=(n + u - 1) / u;  byte[] A=new byte[u];  for (int i=1; i <= c; i++) {    digest.update(D,0,D.length);    digest.update(I,0,I.length);    digest.doFinal(A,0);    for (int j=1; j < iterationCount; j++) {      digest.update(A,0,A.length);      digest.doFinal(A,0);    }    for (int j=0; j != B.length; j++) {      B[j]=A[j % A.length];    }    for (int j=0; j != I.length / v; j++) {      adjust(I,j * v,B);    }    if (i == c) {      System.arraycopy(A,0,dKey,(i - 1) * u,dKey.length - ((i - 1) * u));    } else {      System.arraycopy(A,0,dKey,(i - 1) * u,A.length);    }  }  return dKey;}  }
class C{  public RyaStatementWritable(Configuration conf){  this();}  }
class C{  public NodeSet(ArrayList<Node> nodes){  this.nodes=nodes;}  }
class C{  public byte[] hash(){  return md5.Final();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public final double sampleMin(){  long count=_acquireCount.get() - _releaseCount.get();  long min=_min.getAndSet(count);  return min;}  }
class C{  public static String convertJNPURLToCacheURL(String JNPURL){  if (JNPURL.indexOf("jnp://") >= 0) {    JNPURL=JNPURL.substring(JNPURL.indexOf("jnp://") + 6);  }  if (JNPURL.indexOf(':') >= 0) {    JNPURL=JNPURL.substring(0,JNPURL.indexOf(':'));  }  if (JNPURL.length() > 0) {    return JNPURL;  } else {    return null;  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  WhiteboxRaster image;  WhiteboxRaster output;  int cols, rows;  double imageTotal=0;  long imageN=0;  double imageAverage=0;  double imageTotalDeviation=0;  double stdDeviation=0;  float progress=0;  int col, row;  int i;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    if (image.getDataScale() == WhiteboxRaster.DataScale.BOOLEAN || image.getDataScale() == WhiteboxRaster.DataScale.CATEGORICAL || image.getDataScale() == WhiteboxRaster.DataScale.RGB) {      showFeedback("This tool should only be used with data on a continuous scale.");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(image.getPreferredPalette());    updateProgress("Calculating image average:",0);    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          imageTotal+=data[col];          imageN++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Calculating image average:",(int)progress);    }    imageAverage=imageTotal / imageN;    updateProgress("Calculating the standard deviation:",0);    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          imageTotalDeviation+=(data[col] - imageAverage) * (data[col] - imageAverage);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Calculating the standard deviation:",(int)progress);    }    stdDeviation=Math.sqrt(imageTotalDeviation / (imageN - 1));    updateProgress("Calculating the z-scores:",0);    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          output.setValue(row,col,(data[col] - imageAverage) / stdDeviation);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Calculating the z-scores:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DecimalFormat df;    df=new DecimalFormat("0.000");    String retstr=null;    retstr="CONVERT TO Z-SCORE\n";    retstr=retstr + "Input image:\t\t" + image.getShortHeaderFile()+ "\n";    retstr=retstr + "Created image:\t\t" + output.getShortHeaderFile()+ "\n";    retstr=retstr + "Input image average:\t" + df.format(imageAverage)+ "\n";    retstr=retstr + "Input image std. dev.:\t" + df.format(stdDeviation)+ "\n";    retstr=retstr + "N:\t\t" + imageN;    returnData(retstr);    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static Results rechunk(int fixedSampleSize,long[] chunkOffsets,int[] chunkSampleCounts,long timestampDeltaInTimeUnits){  int maxSampleCount=MAX_SAMPLE_SIZE / fixedSampleSize;  int rechunkedSampleCount=0;  for (  int chunkSampleCount : chunkSampleCounts) {    rechunkedSampleCount+=Util.ceilDivide(chunkSampleCount,maxSampleCount);  }  long[] offsets=new long[rechunkedSampleCount];  int[] sizes=new int[rechunkedSampleCount];  int maximumSize=0;  long[] timestamps=new long[rechunkedSampleCount];  int[] flags=new int[rechunkedSampleCount];  int originalSampleIndex=0;  int newSampleIndex=0;  for (int chunkIndex=0; chunkIndex < chunkSampleCounts.length; chunkIndex++) {    int chunkSamplesRemaining=chunkSampleCounts[chunkIndex];    long sampleOffset=chunkOffsets[chunkIndex];    while (chunkSamplesRemaining > 0) {      int bufferSampleCount=Math.min(maxSampleCount,chunkSamplesRemaining);      offsets[newSampleIndex]=sampleOffset;      sizes[newSampleIndex]=fixedSampleSize * bufferSampleCount;      maximumSize=Math.max(maximumSize,sizes[newSampleIndex]);      timestamps[newSampleIndex]=(timestampDeltaInTimeUnits * originalSampleIndex);      flags[newSampleIndex]=C.SAMPLE_FLAG_SYNC;      sampleOffset+=sizes[newSampleIndex];      originalSampleIndex+=bufferSampleCount;      chunkSamplesRemaining-=bufferSampleCount;      newSampleIndex++;    }  }  return new Results(offsets,sizes,maximumSize,timestamps,flags);}  }
class C{  boolean isItalic(){  return italic;}  }
class C{  public BufferedInputStream startDownload(String key){  return super.startDownload(awsS3BucketName,key);}  }
class C{  public ClosureStats assertAll(final TempTripleStore tempStore,final IChangeLog changeLog){  if (tempStore == null) {    throw new IllegalArgumentException();  }  final long begin=System.currentTimeMillis();  final long ngiven=tempStore.getStatementCount();  if (ngiven == 0) {    return new ClosureStats();  }  final long nbeforeClosure=tempStore.getStatementCount();  if (INFO)   log.info("Computing closure of the temporary store with " + nbeforeClosure + " statements");  applyExistingStatements(tempStore,database,inferenceEngine.doNotAddFilter,changeLog);  final ClosureStats stats=inferenceEngine.computeClosure(tempStore);  final long nafterClosure=tempStore.getStatementCount();  if (INFO)   log.info("There are " + nafterClosure + " statements in the temporary store after closure");  if (INFO)   log.info("Copying statements from the temporary store to the database");  final long ncopied=tempStore.copyStatements(database,null,true,changeLog);  if (INFO)   log.info("Copied " + ncopied + " statements that were new to the database.");  final long elapsed=System.currentTimeMillis() - begin;  stats.elapsed.add(elapsed);  if (INFO)   log.info("Computed closure in " + elapsed + "ms");  if (DEBUG)   log.debug("\n\ntempStore:\n" + tempStore.dumpStore(database,true,true,false,true));  tempStore.close();  return stats;}  }
class C{  private String processList(final String line,final ListType listType){  final String ret;  if (!this.noList) {    String listLevel;    final String htmlOpenList;    final String htmlCloseList;    final char symbol;    if (ListType.ORDERED.equals(listType)) {      listLevel=this.orderedListLevel;      symbol='#';      htmlOpenList=HTML_OPEN_ORDERED_LIST;      htmlCloseList=HTML_CLOSE_ORDERED_LIST;    } else     if (ListType.UNORDERED.equals(listType)) {      listLevel=this.unorderedListLevel;      symbol=ASTERISK;      htmlOpenList=HTML_OPEN_UNORDERED_LIST;      htmlCloseList=HTML_CLOSE_UNORDERED_LIST;    } else {      throw new IllegalArgumentException("Unknown list type " + listType);    }    if (line.startsWith(listLevel + symbol)) {      final StringBuilder stringBuilder=new StringBuilder();      stringBuilder.append(htmlOpenList);      stringBuilder.append(serverCore.CRLF_STRING);      stringBuilder.append(HTML_OPEN_LIST_ELEMENT);      stringBuilder.append(line.substring(listLevel.length() + 1).trim());      stringBuilder.append(HTML_CLOSE_LIST_ELEMENT);      ret=stringBuilder.toString();      listLevel+=symbol;    } else     if (!listLevel.isEmpty() && line.startsWith(listLevel)) {      final StringBuilder stringBuilder=new StringBuilder();      stringBuilder.append(HTML_OPEN_LIST_ELEMENT);      stringBuilder.append(line.substring(listLevel.length()).trim());      stringBuilder.append(HTML_CLOSE_LIST_ELEMENT);      ret=stringBuilder.toString();    } else     if (!listLevel.isEmpty()) {      final StringBuilder stringBuilder=new StringBuilder();      final StringBuilder tmp=new StringBuilder();      int i=listLevel.length();      while (!line.startsWith(listLevel.substring(0,i))) {        tmp.append(htmlCloseList);        i--;      }      listLevel=listLevel.substring(0,i);      final int startOfContent=listLevel.length();      if (startOfContent > 0) {        stringBuilder.append(tmp);        stringBuilder.append(HTML_OPEN_LIST_ELEMENT);        stringBuilder.append(line.substring(startOfContent).trim());        stringBuilder.append(HTML_CLOSE_LIST_ELEMENT);      } else {        stringBuilder.append(tmp);        stringBuilder.append(line.substring(startOfContent).trim());      }      ret=stringBuilder.toString();    } else {      ret=line;    }    if (ListType.ORDERED.equals(listType)) {      this.orderedListLevel=listLevel;    } else     if (ListType.UNORDERED.equals(listType)) {      this.unorderedListLevel=listLevel;    }  } else {    ret=line;  }  return ret;}  }
class C{  @Override public ExampleSet performPrediction(ExampleSet exampleSet,Attribute predLabel){  if (exampleSet.getAttributes().size() != getNumberOfAttributes()) {    throw new RuntimeException("Cannot apply model: incompatible numbers of attributes (" + exampleSet.getAttributes().size() + " != "+ getNumberOfAttributes()+ ")!");  }  if (kernel instanceof DotKernel) {    if (weights != null) {      for (      Example example : exampleSet) {        double sum=getBias();        int a=0;        for (        Attribute attribute : exampleSet.getAttributes()) {          sum+=weights[a] * example.getValue(attribute);          a++;        }        if (getLabel().isNominal()) {          int index=sum > 0 ? getLabel().getMapping().getPositiveIndex() : getLabel().getMapping().getNegativeIndex();          example.setValue(predLabel,index);          example.setConfidence(predLabel.getMapping().getPositiveString(),1.0d / (1.0d + java.lang.Math.exp(-sum)));          example.setConfidence(predLabel.getMapping().getNegativeString(),1.0d / (1.0d + java.lang.Math.exp(sum)));        } else {          example.setValue(predLabel,sum);        }      }      return exampleSet;    }  }  Iterator<Example> reader=exampleSet.iterator();  while (reader.hasNext()) {    Example current=reader.next();    double[] currentX=new double[exampleSet.getAttributes().size()];    int x=0;    for (    Attribute attribute : exampleSet.getAttributes()) {      currentX[x++]=current.getValue(attribute);    }    double sum=bias + kernel.getSum(supportVectors,currentX);    if (getLabel().isNominal()) {      int index=sum > 0 ? getLabel().getMapping().getPositiveIndex() : getLabel().getMapping().getNegativeIndex();      current.setValue(predLabel,index);      current.setConfidence(predLabel.getMapping().getPositiveString(),1.0d / (1.0d + java.lang.Math.exp(-sum)));      current.setConfidence(predLabel.getMapping().getNegativeString(),1.0d / (1.0d + java.lang.Math.exp(sum)));    } else {      current.setValue(predLabel,sum);    }  }  return exampleSet;}  }
class C{  public double doOperation() throws OperatorFailedException {  double logq;  final NodeRef root=tree.getRoot();  final double oldTreeHeight=tree.getNodeHeight(root);  NodeRef i;  do {    i=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));  } while (root == i);  final NodeRef iP=tree.getParent(i);  final NodeRef CiP=getOtherChild(tree,iP,i);  final NodeRef PiP=tree.getParent(iP);  final double delta=getDelta();  final double oldHeight=tree.getNodeHeight(iP);  final double newHeight=oldHeight + delta;  if (delta > 0) {    if (PiP != null && tree.getNodeHeight(PiP) < newHeight) {      NodeRef newParent=PiP;      NodeRef newChild=iP;      while (tree.getNodeHeight(newParent) < newHeight) {        newChild=newParent;        newParent=tree.getParent(newParent);        if (newParent == null)         break;      }      tree.beginTreeEdit();      if (tree.isRoot(newChild)) {        tree.removeChild(iP,CiP);        tree.removeChild(PiP,iP);        tree.addChild(iP,newChild);        tree.addChild(PiP,CiP);        tree.setRoot(iP);        if (tree.hasNodeTraits()) {          tree.swapAllTraits(newChild,iP);        }        if (tree.hasRates()) {          final double rootNodeRate=tree.getNodeRate(newChild);          tree.setNodeRate(newChild,tree.getNodeRate(iP));          tree.setNodeRate(iP,rootNodeRate);        }      } else {        tree.removeChild(iP,CiP);        tree.removeChild(PiP,iP);        tree.removeChild(newParent,newChild);        tree.addChild(iP,newChild);        tree.addChild(PiP,CiP);        tree.addChild(newParent,iP);      }      tree.setNodeHeight(iP,newHeight);      tree.endTreeEdit();      final int possibleSources=intersectingEdges(tree,newChild,oldHeight,null);      logq=-Math.log(possibleSources);    } else {      tree.setNodeHeight(iP,newHeight);      logq=0.0;    }  } else {    if (tree.getNodeHeight(i) > newHeight) {      return Double.NEGATIVE_INFINITY;    }    if (tree.getNodeHeight(CiP) > newHeight) {      List<NodeRef> newChildren=new ArrayList<NodeRef>();      final int possibleDestinations=intersectingEdges(tree,CiP,newHeight,newChildren);      if (newChildren.size() == 0) {        return Double.NEGATIVE_INFINITY;      }      final int childIndex=MathUtils.nextInt(newChildren.size());      NodeRef newChild=newChildren.get(childIndex);      NodeRef newParent=tree.getParent(newChild);      tree.beginTreeEdit();      if (tree.isRoot(iP)) {        tree.removeChild(iP,CiP);        tree.removeChild(newParent,newChild);        tree.addChild(iP,newChild);        tree.addChild(newParent,iP);        tree.setRoot(CiP);        if (tree.hasNodeTraits()) {          tree.swapAllTraits(iP,CiP);        }        if (tree.hasRates()) {          final double rootNodeRate=tree.getNodeRate(iP);          tree.setNodeRate(iP,tree.getNodeRate(CiP));          tree.setNodeRate(CiP,rootNodeRate);        }      } else {        tree.removeChild(iP,CiP);        tree.removeChild(PiP,iP);        tree.removeChild(newParent,newChild);        tree.addChild(iP,newChild);        tree.addChild(PiP,CiP);        tree.addChild(newParent,iP);      }      tree.setNodeHeight(iP,newHeight);      tree.endTreeEdit();      logq=Math.log(possibleDestinations);    } else {      tree.setNodeHeight(iP,newHeight);      logq=0.0;    }  }  if (swapInRandomRate) {    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));    if (j != i) {      final double tmp=tree.getNodeRate(i);      tree.setNodeRate(i,tree.getNodeRate(j));      tree.setNodeRate(j,tmp);    }  }  if (swapInRandomTrait) {    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));    if (j != i) {      tree.swapAllTraits(i,j);    }  }  if (logq == Double.NEGATIVE_INFINITY)   throw new OperatorFailedException("invalid slide");  if (scaledDirichletBranches) {    if (oldTreeHeight != tree.getNodeHeight(tree.getRoot()))     throw new OperatorFailedException("Temporarily disabled.");  }  return logq;}  }
class C{  private SchemaFactory _newFactory(String schemaLanguage){  SchemaFactory sf;  String propertyName=SERVICE_CLASS.getName() + ":" + schemaLanguage;  try {    if (debug)     debugPrintln("Looking up system property '" + propertyName + "'");    String r=System.getProperty(propertyName);    if (r != null && r.length() > 0) {      if (debug)       debugPrintln("The value is '" + r + "'");      sf=createInstance(r);      if (sf != null)       return sf;    } else     if (debug) {      debugPrintln("The property is undefined.");    }  } catch (  VirtualMachineError vme) {    throw vme;  }catch (  ThreadDeath td) {    throw td;  }catch (  Throwable t) {    if (debug) {      debugPrintln("failed to look up system property '" + propertyName + "'");      t.printStackTrace();    }  }  String javah=System.getProperty("java.home");  String configFile=javah + File.separator + "lib"+ File.separator+ "jaxp.properties";  String factoryClassName=null;  try {    if (firstTime) {synchronized (cacheProps) {        if (firstTime) {          File f=new File(configFile);          firstTime=false;          if (f.exists()) {            if (debug)             debugPrintln("Read properties file " + f);            cacheProps.load(new FileInputStream(f));          }        }      }    }    factoryClassName=cacheProps.getProperty(propertyName);    if (debug)     debugPrintln("found " + factoryClassName + " in $java.home/jaxp.properties");    if (factoryClassName != null) {      sf=createInstance(factoryClassName);      if (sf != null) {        return sf;      }    }  } catch (  Exception ex) {    if (debug) {      ex.printStackTrace();    }  }  for (  URL resource : createServiceFileIterator()) {    if (debug)     debugPrintln("looking into " + resource);    try {      sf=loadFromServicesFile(schemaLanguage,resource.toExternalForm(),resource.openStream());      if (sf != null)       return sf;    } catch (    IOException e) {      if (debug) {        debugPrintln("failed to read " + resource);        e.printStackTrace();      }    }  }  if (schemaLanguage.equals(XMLConstants.W3C_XML_SCHEMA_NS_URI) || schemaLanguage.equals(W3C_XML_SCHEMA10_NS_URI)) {    if (debug)     debugPrintln("attempting to use the platform default XML Schema 1.0 validator");    return createInstance("org.apache.xerces.jaxp.validation.XMLSchemaFactory");  } else   if (schemaLanguage.equals(W3C_XML_SCHEMA11_NS_URI)) {    if (debug)     debugPrintln("attempting to use the platform default XML Schema 1.1 validator");    return createInstance("org.apache.xerces.jaxp.validation.XMLSchema11Factory");  }  if (debug)   debugPrintln("all things were tried, but none was found. bailing out.");  return null;}  }
class C{  public CreateRequest(ContentFormat contentFormat,String path,LwM2mResource... resources){  this(contentFormat,new LwM2mPath(path),null,resources);}  }
class C{  public CharArrayList(){  this(10);}  }
class C{  public final void testSetIconWithContextAndResourceIdParameters(){  AbstractValidatorImplementation abstractValidator=new AbstractValidatorImplementation("foo");  abstractValidator.setIcon(getContext(),android.R.drawable.ic_dialog_info);  assertNotNull(abstractValidator.getIcon());}  }
class C{  public final TestSubscriber<T> assertValueSet(Set<T> set){  int i=0;  for (  T t : values) {    if (!set.contains(t)) {      assertionError("The value " + valueAndClass(t) + " at index "+ i+ " is not in the set");    }    i++;  }  return this;}  }
class C{  public void recoverMinorityNode(){  UriBuilder builder=client.uriBuilder(CLUSTER_NODE_RECOVERY_URL);  client.postURI(String.class,builder.build());}  }
class C{  protected void releasePrimaryLock(){  if (parentAdvisor != null) {    return;  }  if (startingBucketAdvisor == null) {    assignStartingBucketAdvisor();    if (startingBucketAdvisor != null) {      return;    }  } else {    return;  }  try {    DistributedMemberLock thePrimaryLock=getPrimaryLock(false);    if (thePrimaryLock != null) {      thePrimaryLock.unlock();    } else {    }  } catch (  LockNotHeldException e) {    Assert.assertTrue(!isHosting(),"Got LockNotHeldException for Bucket = " + this);  }catch (  LockServiceDestroyedException e) {    Assert.assertTrue(isClosed(),"BucketAdvisor was not closed before destroying PR lock service");  }}  }
class C{  public CopyOnWriteHashSet<T> copyAndAdd(T entry){  return new CopyOnWriteHashSet<>(map.copyAndPut(entry,true));}  }
class C{  protected Command createCommandObject(final Operation operation,final Map<String,Object> componentMap,int index) throws BaseCollectionException, IllegalAccessException, InvocationTargetException {  final CommandImpl commandobj=new CommandImpl();  commandobj.setInputArgs(_util.returnInputArgs(operation,componentMap,index));  final Object instance=_util.returnInstanceToRun(operation,componentMap,index);  commandobj.setMethod(_util.getMethod(operation,operation.getMethod(),instance,Util.ENDPOINTS.OPERATION.toString()));  commandobj.setInstance(instance);  commandobj.setCommandIndex(index);  _logger.debug("Command Object created.");  return commandobj;}  }
class C{  private static boolean focusCenter(){  return (!CropOverlayView.showGuidelines());}  }
class C{  public String join(String separator) throws JSONException {  int len=this.length();  StringBuilder sb=new StringBuilder();  for (int i=0; i < len; i+=1) {    if (i > 0) {      sb.append(separator);    }    sb.append(JSONObject.valueToString(this.myArrayList.get(i)));  }  return sb.toString();}  }
class C{  public T peek(){  return items[size - 1];}  }
class C{  public CheerleaderPlayer build(){  if (this.context == null) {    throw new IllegalStateException("Context should be passed using 'Builder.from' to build the client.");  }  if (this.apiKey == null) {    throw new IllegalStateException("Api key should be passed using 'Builder.with' to build the client.");  }  CheerleaderPlayer instance=getInstance(this.context,this.apiKey);  if (!this.apiKey.equals(instance.mClientKey)) {    throw new IllegalStateException("Only one api key can be used at the same time.");  }  sInstance.setNotificationConfig(notificationConfig);  return sInstance;}  }
class C{  public static String quantityplnounWithHash(final int quantity,final String noun){  return quantityplnounWithMarker(quantity,noun,'#');}  }
class C{  public static double computeNewPriority_fractionOfFriends(double priority,int sharedFriends,int myFriends){  double trustMultiplier=sharedFriends / (double)myFriends;  if (sharedFriends == 0) {    trustMultiplier=ProximitySimulation.EPSILON_TRUST;  }  return priority * trustMultiplier;}  }
class C{  protected SequenceImpl(){  super();}  }
class C{  public Builder withTrustStorePath(String trustStorePath){  properties.setProperty(NettyOptions.SSL_TRUST_STORE_PATH,Assert.notNull(trustStorePath,"trustStorePath"));  return this;}  }
class C{  public void processEndElement() throws ParseException {  if (value != null && !value.trim().equals("") && !mixedContent) {    throw new ParseException(CoreErrorDomain.ERR.textNotAllowed);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void rollInitAndResolveTies(List<? extends ITurnOrdered> v,List<? extends ITurnOrdered> rerollRequests,boolean bInitCompBonus){  for (  ITurnOrdered item : v) {    int bonus=0;    if (item instanceof Team) {      bonus=((Team)item).getTotalInitBonus(bInitCompBonus);    }    if (item instanceof Entity) {      Entity e=(Entity)item;      bonus=e.game.getTeamForPlayer(e.owner).getTotalInitBonus(false) + e.getCrew().getInitBonus();    }    if (rerollRequests == null) {      item.getInitiative().addRoll(bonus);    } else {      for (      ITurnOrdered rerollItem : rerollRequests) {        if (item == rerollItem) {          item.getInitiative().replaceRoll(bonus);          break;        }      }    }  }  Vector<ITurnOrdered> ties=new Vector<ITurnOrdered>();  for (  ITurnOrdered item : v) {    ties.removeAllElements();    ties.addElement(item);    for (    ITurnOrdered other : v) {      if ((item != other) && item.getInitiative().equals(other.getInitiative())) {        ties.addElement(other);      }    }    if (ties.size() > 1) {      rollInitAndResolveTies(ties,null,false);    }  }  if (bInitCompBonus && (v.size() > 0) && (v.get(0) instanceof Team)) {    final ITurnOrdered comparisonElement=v.get(0);    int difference=0;    ITurnOrdered winningElement=comparisonElement;    for (    ITurnOrdered currentElement : v) {      if (currentElement.getInitiative().compareTo(comparisonElement.getInitiative()) > difference) {        difference=currentElement.getInitiative().compareTo(comparisonElement.getInitiative());        winningElement=currentElement;      }    }    ((Team)winningElement).setInitCompensationBonus(0);    if (lastRoundInitWinner != null) {      for (      ITurnOrdered item : v) {        if (!(item.equals(winningElement) || item.equals(lastRoundInitWinner))) {          Team team=(Team)item;          int newBonus=team.getInitCompensationBonus(bInitCompBonus) + 1;          team.setInitCompensationBonus(newBonus);        }      }    }    lastRoundInitWinner=winningElement;  }}  }
class C{  public static void checkGlError(String op){  int error=GLES20.glGetError();  if (error != GLES20.GL_NO_ERROR) {    String msg=op + ": glError 0x" + Integer.toHexString(error);    Log.e(TAG,msg);    throw new RuntimeException(msg);  }}  }
class C{  protected boolean[] instanceWeights(AttrTypes attrTypes,int classType){  print("estimator uses instance weights");  printAttributeSummary(attrTypes,classType);  print("...");  int numTrain=2 * getNumInstances(), numTest=getNumInstances(), numClasses=2, missingLevel=0;  boolean attributeMissing=false, classMissing=false;  boolean[] result=new boolean[2];  Instances train=null;  Vector<Double> test=null;  Estimator[] estimators=null;  Vector<Double> resultProbsO=null;  Vector<Double> resultProbsW=null;  boolean built=false;  boolean evalFail=false;  int attrIndex=0;  try {    train=makeTestDataset(42,numTrain,1,attrTypes,numClasses,classType);    test=makeTestValueList(24,numTest,train,attrIndex,attrTypes.getSetType());    if (missingLevel > 0) {      addMissing(train,missingLevel,attributeMissing,classMissing,attrIndex);    }    estimators=Estimator.makeCopies(getEstimator(),2);    estimators[0].addValues(train,attrIndex);    resultProbsO=testWithTestValues(estimators[0],test);  } catch (  Exception ex) {    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    for (int i=0; i < train.numInstances(); i++) {      train.instance(i).setWeight(0);    }    Random random=new Random(1);    for (int i=0; i < train.numInstances() / 2; i++) {      int inst=Math.abs(random.nextInt()) % train.numInstances();      int weight=Math.abs(random.nextInt()) % 10 + 1;      train.instance(inst).setWeight(weight);    }    estimators[1].addValues(train,attrIndex);    resultProbsW=testWithTestValues(estimators[1],test);    built=true;    if (resultProbsO.equals(resultProbsW)) {      evalFail=true;      throw new Exception("evalFail");    }    println("yes");    result[0]=true;  } catch (  Exception ex) {    println("no");    result[0]=false;    if (m_Debug) {      println("\n=== Full Report ===");      if (evalFail) {        println("Results don't differ between non-weighted and " + "weighted instance models.");        println("Here are the results:\n");        println(probsToString(resultProbsO));      } else {        print("Problem during");        if (built) {          print(" testing");        } else {          print(" training");        }        println(": " + ex.getMessage() + "\n");      }      println("Here are the datasets:\n");      println("=== Train Dataset ===\n" + train.toString() + "\n");      println("=== Train Weights ===\n");      for (int i=0; i < train.numInstances(); i++) {        println(" " + (i + 1) + "    "+ train.instance(i).weight());      }      println("=== Test Dataset ===\n" + test.toString() + "\n\n");      println("(test weights all 1.0\n");    }  }  return result;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'READ_THREAD' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'TID' TEXT);");}  }
class C{  public String toString(){  if (subject == null || pubKey == null || interval == null || issuer == null || algId == null || serialNum == null) {    throw new NullPointerException("X.509 cert is incomplete");  }  StringBuilder sb=new StringBuilder();  sb.append("[\n");  sb.append("  " + version.toString() + "\n");  sb.append("  Subject: " + subject.toString() + "\n");  sb.append("  Signature Algorithm: " + algId.toString() + "\n");  sb.append("  Key:  " + pubKey.toString() + "\n");  sb.append("  " + interval.toString() + "\n");  sb.append("  Issuer: " + issuer.toString() + "\n");  sb.append("  " + serialNum.toString() + "\n");  if (issuerUniqueId != null) {    sb.append("  Issuer Id:\n" + issuerUniqueId.toString() + "\n");  }  if (subjectUniqueId != null) {    sb.append("  Subject Id:\n" + subjectUniqueId.toString() + "\n");  }  if (extensions != null) {    Collection<Extension> allExts=extensions.getAllExtensions();    Extension[] exts=allExts.toArray(new Extension[0]);    sb.append("\nCertificate Extensions: " + exts.length);    for (int i=0; i < exts.length; i++) {      sb.append("\n[" + (i + 1) + "]: ");      Extension ext=exts[i];      try {        if (OIDMap.getClass(ext.getExtensionId()) == null) {          sb.append(ext.toString());          byte[] extValue=ext.getExtensionValue();          if (extValue != null) {            DerOutputStream out=new DerOutputStream();            out.putOctetString(extValue);            extValue=out.toByteArray();            HexDumpEncoder enc=new HexDumpEncoder();            sb.append("Extension unknown: " + "DER encoded OCTET string =\n" + enc.encodeBuffer(extValue) + "\n");          }        } else         sb.append(ext.toString());      } catch (      Exception e) {        sb.append(", Error parsing this extension");      }    }    Map<String,Extension> invalid=extensions.getUnparseableExtensions();    if (invalid.isEmpty() == false) {      sb.append("\nUnparseable certificate extensions: " + invalid.size());      int i=1;      for (      Extension ext : invalid.values()) {        sb.append("\n[" + (i++) + "]: ");        sb.append(ext);      }    }  }  sb.append("\n]");  return sb.toString();}  }
class C{  @DSSource({DSSourceKind.IO}) @DSComment("Activity on IO class") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.051 -0500",hash_original_method="E44784058F4742ED0C6AEE646C9728C1",hash_generated_method="6F8C3CEAFF598327D551893A3095CDD9") @Override public int read() throws IOException {  return in.droidsafeRead();}  }
class C{  @Override public boolean isAsleep(){  return this.state.ordinal() >= MentalState.ASLEEP.ordinal();}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.addPropertyChangeListener(pcl);}  }
class C{  public boolean isEmpty(){  return this.list.isEmpty();}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  protected void readOplog(MongoClient primary){  BsonTimestamp oplogStart=source.lastOffsetTimestamp(replicaSet.replicaSetName());  logger.info("Reading oplog for '{}' primary {} starting at {}",replicaSet,primary.getAddress(),oplogStart);  MongoCollection<Document> oplog=primary.getDatabase("local").getCollection("oplog.rs");  Bson filter=Filters.and(Filters.gt("ts",oplogStart),Filters.exists("fromMigrate",false));  FindIterable<Document> results=oplog.find(filter).sort(new Document("$natural",1)).oplogReplay(true).noCursorTimeout(true).cursorType(CursorType.TailableAwait);  ServerAddress primaryAddress=primary.getAddress();  try (MongoCursor<Document> cursor=results.iterator()){    while (running.get() && cursor.hasNext()) {      if (!handleOplogEvent(primaryAddress,cursor.next())) {        return;      }    }  } }  }
class C{  private void updateInstanceDefinitionsWithBestPrice(EmrClusterDefinition emrClusterDefinition,Subnet bestEmrClusterSubnet,EmrClusterPriceDto bestEmrClusterPrice){  emrClusterDefinition.setSubnetId(bestEmrClusterSubnet.getSubnetId());  emrClusterDefinition.getInstanceDefinitions().getMasterInstances().setInstanceMaxSearchPrice(null);  emrClusterDefinition.getInstanceDefinitions().getMasterInstances().setInstanceOnDemandThreshold(null);  emrClusterDefinition.getInstanceDefinitions().getMasterInstances().setInstanceSpotPrice(getSpotBidPrice(bestEmrClusterPrice.getMasterPrice()));  if (bestEmrClusterPrice.getCorePrice() != null) {    emrClusterDefinition.getInstanceDefinitions().getCoreInstances().setInstanceMaxSearchPrice(null);    emrClusterDefinition.getInstanceDefinitions().getCoreInstances().setInstanceOnDemandThreshold(null);    emrClusterDefinition.getInstanceDefinitions().getCoreInstances().setInstanceSpotPrice(getSpotBidPrice(bestEmrClusterPrice.getCorePrice()));  }}  }
class C{  public static BinaryMessage interleaveData(BinaryMessage message,int start,int end){  return interleave(DATA_INTERLEAVE,message,start,end);}  }
class C{  public void free(){  int useCount=_useCount.decrementAndGet();  if (useCount == 0) {    remove();  } else   if (useCount < 0) {    throw new IllegalStateException("illegal use count: " + useCount);  }}  }
class C{  public EffectRandomList copy(){  return new EffectRandomList().concat(effects);}  }
class C{  private void assertCostPhisicalInventory(CostResult costResult,int M_InventoryLine_ID,MAcctSchema as,String trxName){  MCost cost=assertCost(costResult);  String whereClause="M_Product_ID=? AND M_CostElement_ID=? AND M_CostType_ID=? AND M_InventoryLine_ID=?";  ArrayList<Object> parameters=new ArrayList();  parameters.add(costResult.M_Product_ID);  parameters.add(cost.getM_CostElement_ID());  parameters.add(cost.getM_CostType_ID());  parameters.add(M_InventoryLine_ID);  assertCostDetail(costResult,whereClause,parameters);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.296 -0500",hash_original_method="5CA3F4E55230C1BE0E77A65DF87A61F3",hash_generated_method="62B47741E6411FB99A359675A736593A") private int checkInterruptWhileWaiting(Node node){  return Thread.interrupted() ? (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) : 0;}  }
class C{  public Builder ignoreZkBinLogPosition(boolean ignore){  this.innerZkIgnoreBinLogPosition=ignore;  return this;}  }
class C{  @SuppressWarnings("unchecked") public static <T,D extends T>D downCast(T object,@SuppressWarnings("unused") Class<D> klass){  return (D)object;}  }
class C{  public CompositeComparator(List<Comparator<? super T>> comparators){  this.comparators=comparators;}  }
class C{  protected void clear(IgniteFileSystem igfs,IgfsSecondaryFileSystemTestAdapter igfsSecondary) throws Exception {  clear(igfs);  if (mode != PRIMARY)   clear(igfsSecondary);}  }
class C{  public VcfHeader copy(){  final VcfHeader copy=new VcfHeader();  copy.mVersionLine=mVersionLine;  copy.mGenericMetaInformationLines.addAll(mGenericMetaInformationLines);  copy.mSampleNames.addAll(mSampleNames);  copy.mContigLines.addAll(mContigLines);  copy.mAltLines.addAll(mAltLines);  copy.mFilterLines.addAll(mFilterLines);  copy.mInfoLines.addAll(mInfoLines);  copy.mFormatLines.addAll(mFormatLines);  copy.mSampleLines.addAll(mSampleLines);  copy.mPedigreeLines.addAll(mPedigreeLines);  copy.mNameToColumn.putAll(mNameToColumn);  return copy;}  }
class C{  public static int sizeOf(Iterable<?> iterable){  if (iterable instanceof Collection) {    return ((Collection<?>)iterable).size();  }  if (iterable instanceof RichIterable) {    return ((RichIterable<?>)iterable).size();  }  return Iterate.count(iterable,Predicates.alwaysTrue());}  }
class C{  public Map<String,String> loadInstalledCodenvyProperties(InstallType installType) throws IOException {  Map<String,String> properties=new HashMap<>();  Iterator<Path> propertiesFiles=getCodenvyPropertiesFiles(installType);  while (propertiesFiles.hasNext()) {    Path file=propertiesFiles.next();    try {      properties.putAll(doLoadInstalledCodenvyProperties(file));    } catch (    IOException e) {      throw new ConfigException(format("Can't load Codenvy properties: %s",e.getMessage()),e);    }  }  return properties;}  }
class C{  static public void assertSameIteratorAnyOrder(final byte[][] expected,final Iterator<byte[]> actual){  assertSameIteratorAnyOrder("",expected,actual);}  }
class C{  OperandStack(int capacity){  stack=new Operand[capacity];  top=0;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public BasicConstraintsExtension(Boolean critical,Object value) throws IOException {  this.extensionId=PKIXExtensions.BasicConstraints_Id;  this.critical=critical.booleanValue();  this.extensionValue=(byte[])value;  DerValue val=new DerValue(this.extensionValue);  if (val.tag != DerValue.tag_Sequence) {    throw new IOException("Invalid encoding of BasicConstraints");  }  if (val.data == null || val.data.available() == 0) {    return;  }  DerValue opt=val.data.getDerValue();  if (opt.tag != DerValue.tag_Boolean) {    return;  }  this.ca=opt.getBoolean();  if (val.data.available() == 0) {    this.pathLen=Integer.MAX_VALUE;    return;  }  opt=val.data.getDerValue();  if (opt.tag != DerValue.tag_Integer) {    throw new IOException("Invalid encoding of BasicConstraints");  }  this.pathLen=opt.getInteger();}  }
class C{  public Phaser(Phaser parent,int parties){  if (parties >>> PARTIES_SHIFT != 0)   throw new IllegalArgumentException("Illegal number of parties");  int phase=0;  this.parent=parent;  if (parent != null) {    final Phaser root=parent.root;    this.root=root;    this.evenQ=root.evenQ;    this.oddQ=root.oddQ;    if (parties != 0)     phase=parent.doRegister(1);  } else {    this.root=this;    this.evenQ=new AtomicReference<QNode>();    this.oddQ=new AtomicReference<QNode>();  }  this.state=(parties == 0) ? (long)EMPTY : ((long)phase << PHASE_SHIFT) | ((long)parties << PARTIES_SHIFT) | ((long)parties);}  }
class C{  public void playSequentially(Animator... items){  if (items != null) {    mNeedsSort=true;    if (items.length == 1) {      play(items[0]);    } else {      for (int i=0; i < items.length - 1; ++i) {        play(items[i]).before(items[i + 1]);      }    }  }}  }
class C{  public void testGetSchemasReadOnly() throws SQLException {  ResultSet rs=meta.getSchemas();  checkSchemas(rs,new String[0]);}  }
class C{  public boolean isProcessedOK(){  return m_ok;}  }
class C{  @Override public void onUIRefreshBegin(PtrFrameLayout frame){  mDrawable.setAlpha(255);  mDrawable.start();}  }
class C{  public void processAttribute(String namespace,String localName,String attributeData) throws ParseException {  if (namespace.equals("")) {    if (localName.equals("row")) {      Cell.this.row=Integer.parseInt(attributeData);    } else     if (localName.equals("col")) {      Cell.this.col=Integer.parseInt(attributeData);    } else     if (localName.equals("inputValue")) {      Cell.this.inputValue=attributeData;    } else     if (localName.equals("numericValue")) {      try {        Cell.this.numericValue=Double.valueOf(attributeData);      } catch (      NumberFormatException nfe) {        throw new ParseException("Invalid numericValue.");      }    }  }}  }
class C{  public RegisterDescription(final String name,final int size,final boolean editable){  this.name=Preconditions.checkNotNull(name,"IE01031: Name argument can not be null");  if (!isValidSize(size)) {    throw new IllegalArgumentException(String.format("IE01032: Invalid register size %d",size));  }  byteSize=size;  isEditable=editable;}  }
class C{  public boolean hasValidProfile(){  return (profile != null && profile.email != null);}  }
class C{  public MultisigMinCosignatoriesModification(final int relativeChange){  this.relativeChange=relativeChange;}  }
class C{  public void testProxyConnection() throws Throwable {  setUpStoreProperties();  ServerSocket ss=new ServerSocket(0);  TestHostnameVerifier hnv=new TestHostnameVerifier();  HttpsURLConnection.setDefaultHostnameVerifier(hnv);  URL url=new URL("https://requested.host:55556/requested.data");  HttpsURLConnection connection=(HttpsURLConnection)url.openConnection(new Proxy(Proxy.Type.HTTP,new InetSocketAddress("localhost",ss.getLocalPort())));  connection.setSSLSocketFactory(getContext().getSocketFactory());  SSLSocket peerSocket=(SSLSocket)doInteraction(connection,ss);  checkConnectionStateParameters(connection,peerSocket);  connection.connect();}  }
class C{  public static void configurePeriodicSync(Context context,int syncInterval,int flexTime){  Account account=getSyncAccount(context);  String authority=context.getString(R.string.content_authority);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    SyncRequest request=new SyncRequest.Builder().syncPeriodic(syncInterval,flexTime).setSyncAdapter(account,authority).build();    ContentResolver.requestSync(request);  } else {    ContentResolver.addPeriodicSync(account,authority,new Bundle(),syncInterval);  }}  }
class C{  static void unreferenced(ObjID id,long sequenceNum,VMID vmid,boolean strong){synchronized (tableLock) {    ObjectEndpoint oe=new ObjectEndpoint(id,Transport.currentTransport());    Target target=objTable.get(oe);    if (target != null)     target.unreferenced(sequenceNum,vmid,strong);  }}  }
class C{  private static boolean findActivity(ArrayList<AppInfo> apps,ComponentName component,UserHandleCompat user){  final int N=apps.size();  for (int i=0; i < N; i++) {    final AppInfo info=apps.get(i);    if (info.user.equals(user) && info.componentName.equals(component)) {      return true;    }  }  return false;}  }
class C{  public final void findMaxSeparation(EdgeResults results,final PolygonShape poly1,final Transform xf1,final PolygonShape poly2,final Transform xf2){  int count1=poly1.m_count;  int count2=poly2.m_count;  Vec2[] n1s=poly1.m_normals;  Vec2[] v1s=poly1.m_vertices;  Vec2[] v2s=poly2.m_vertices;  Transform.mulTransToOutUnsafe(xf2,xf1,xf);  final Rot xfq=xf.q;  int bestIndex=0;  float maxSeparation=-Float.MAX_VALUE;  for (int i=0; i < count1; i++) {    Rot.mulToOutUnsafe(xfq,n1s[i],n);    Transform.mulToOutUnsafe(xf,v1s[i],v1);    float si=Float.MAX_VALUE;    for (int j=0; j < count2; ++j) {      Vec2 v2sj=v2s[j];      float sij=n.x * (v2sj.x - v1.x) + n.y * (v2sj.y - v1.y);      if (sij < si) {        si=sij;      }    }    if (si > maxSeparation) {      maxSeparation=si;      bestIndex=i;    }  }  results.edgeIndex=bestIndex;  results.separation=maxSeparation;}  }
class C{  private void playSound(){  times--;  SoundEvent event=new SoundEvent(SOUND_FILE,RADIUS,VOLUME,SoundLayer.AMBIENT_SOUND);  BellSoundSource.this.addEvent(event);  BellSoundSource.this.notifyWorldAboutChanges();}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  private ICloseableIterator<IBindingSet> doRemoteServiceCall(final RemoteServiceCall serviceCall,final IBindingSet left[]) throws Exception {  return doNonBigdataSesameServiceCall(serviceCall,left);}  }
class C{  private static boolean isFastMobileNetwork(Context context){  TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);  if (telephonyManager == null) {    return false;  }switch (telephonyManager.getNetworkType()) {case TelephonyManager.NETWORK_TYPE_1xRTT:    return false;case TelephonyManager.NETWORK_TYPE_CDMA:  return false;case TelephonyManager.NETWORK_TYPE_EDGE:return false;case TelephonyManager.NETWORK_TYPE_EVDO_0:return true;case TelephonyManager.NETWORK_TYPE_EVDO_A:return true;case TelephonyManager.NETWORK_TYPE_GPRS:return false;case TelephonyManager.NETWORK_TYPE_HSDPA:return true;case TelephonyManager.NETWORK_TYPE_HSPA:return true;case TelephonyManager.NETWORK_TYPE_HSUPA:return true;case TelephonyManager.NETWORK_TYPE_UMTS:return true;case TelephonyManager.NETWORK_TYPE_EHRPD:return true;case TelephonyManager.NETWORK_TYPE_EVDO_B:return true;case TelephonyManager.NETWORK_TYPE_HSPAP:return true;case TelephonyManager.NETWORK_TYPE_IDEN:return false;case TelephonyManager.NETWORK_TYPE_LTE:return true;case TelephonyManager.NETWORK_TYPE_UNKNOWN:return false;default :return false;}}  }
class C{  public static void writeStringToFile(File file,String data,Charset encoding,boolean append) throws IOException {  OutputStream out=null;  try {    out=openOutputStream(file,append);    IOUtils.write(data,out,encoding);    out.close();  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  public RepeatVars(final SpeedTestSocket socket) throws NoSuchFieldException, IllegalAccessException {  final Field repeatWrapperField=socket.getClass().getDeclaredField("mRepeatWrapper");  Assert.assertNotNull("mRepeatWrapper is null",repeatWrapperField);  repeatWrapperField.setAccessible(true);  mRepeatWrapper=(RepeatWrapper)repeatWrapperField.get(socket);  Assert.assertNotNull("mRepeatWrapper is null",mRepeatWrapper);  mRepeatDownload=mRepeatWrapper.getClass().getDeclaredField("mRepeatDownload");  Assert.assertNotNull("mRepeatDownload is null",mRepeatDownload);  mRepeatDownload.setAccessible(true);  mRepeatUpload=mRepeatWrapper.getClass().getDeclaredField("mRepeatUpload");  Assert.assertNotNull("mRepeatUpload is null",mRepeatUpload);  mRepeatUpload.setAccessible(true);  mStartDateRepeat=mRepeatWrapper.getClass().getDeclaredField("mStartDateRepeat");  Assert.assertNotNull("mStartDateRepeat is null",mStartDateRepeat);  mStartDateRepeat.setAccessible(true);  mRepeatWindows=mRepeatWrapper.getClass().getDeclaredField("mRepeatWindows");  Assert.assertNotNull("mRepeatWindows is null",mRepeatWindows);  mRepeatWindows.setAccessible(true);  mRepeatRequestNum=mRepeatWrapper.getClass().getDeclaredField("mRepeatRequestNum");  Assert.assertNotNull("mRepeatRequestNum is null",mRepeatRequestNum);  mRepeatRequestNum.setAccessible(true);  mRepeatPacketSize=mRepeatWrapper.getClass().getDeclaredField("mRepeatPacketSize");  Assert.assertNotNull("mRepeatPacketSize is null",mRepeatPacketSize);  mRepeatPacketSize.setAccessible(true);  mRepeatTempPckSize=mRepeatWrapper.getClass().getDeclaredField("mRepeatTempPckSize");  Assert.assertNotNull("mRepeatTempPckSize is null",mRepeatTempPckSize);  mRepeatTempPckSize.setAccessible(true);  mFirstDownloadRepeat=mRepeatWrapper.getClass().getDeclaredField("mFirstDownloadRepeat");  Assert.assertNotNull("mFirstDownloadRepeat is null",mFirstDownloadRepeat);  mFirstDownloadRepeat.setAccessible(true);  mFirstUploadRepeat=mRepeatWrapper.getClass().getDeclaredField("mFirstUploadRepeat");  Assert.assertNotNull("mFirstUploadRepeat is null",mFirstUploadRepeat);  mFirstUploadRepeat.setAccessible(true);  mRepeatTransferRateList=mRepeatWrapper.getClass().getDeclaredField("mRepeatTransferRateList");  Assert.assertNotNull("mRepeatTransferRateList is null",mRepeatTransferRateList);  mRepeatTransferRateList.setAccessible(true);  mRepeatFinished=mRepeatWrapper.getClass().getDeclaredField("mRepeatFinished");  Assert.assertNotNull("mRepeatFinished is null",mRepeatFinished);  mRepeatFinished.setAccessible(true);}  }
class C{  private static IceMediaStream createStream(int rtpPort,String streamName,Agent agent) throws Throwable {  IceMediaStream stream=agent.createMediaStream(streamName);  long startTime=System.currentTimeMillis();  agent.createComponent(stream,Transport.UDP,rtpPort,rtpPort,rtpPort + 100);  long endTime=System.currentTimeMillis();  logger.info("RTP Component created in " + (endTime - startTime) + " ms");  startTime=endTime;  agent.createComponent(stream,Transport.UDP,rtpPort + 1,rtpPort + 1,rtpPort + 101);  endTime=System.currentTimeMillis();  logger.info("RTCP Component created in " + (endTime - startTime) + " ms");  return stream;}  }
class C{  public void testDoubleValueNegativeInfinity2(){  byte[] a={-1,-1,-1,-1,-1,-1,-1,-8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  int aSign=-1;  double aNumber=new BigInteger(aSign,a).doubleValue();  assertTrue(aNumber == Double.NEGATIVE_INFINITY);}  }
class C{  public static Snackbar make(CharSequence text,SnackbarController controller){  Snackbar s=new Snackbar();  s.mText=text;  s.mController=controller;  return s;}  }
class C{  public static void checkNotEmpty(CharSequence str,String message){  if (str == null || str.length() == 0) {    throw new IllegalArgumentException(message);  }}  }
class C{  @Override protected void onListItemClick(ListView listView,View view,int position,long id){  long idFormsTable=((SimpleCursorAdapter)getListAdapter()).getItemId(position);  Uri formUri=ContentUris.withAppendedId(FormsColumns.CONTENT_URI,idFormsTable);  Collect.getInstance().getActivityLogger().logAction(this,"onListItemClick",formUri.toString());  String action=getIntent().getAction();  if (Intent.ACTION_PICK.equals(action)) {    setResult(RESULT_OK,new Intent().setData(formUri));  } else {    startActivity(new Intent(Intent.ACTION_EDIT,formUri));  }  finish();}  }
class C{  public boolean isExclude(){  Object oo=get_Value(COLUMNNAME_IsExclude);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static ItemListener add(ItemListener a,ItemListener b){  return (ItemListener)addInternal(a,b);}  }
class C{  public void cartesian(double x,double y,double rotation){  double xIn=x;  double yIn=y;  yIn=-yIn;  double rotated[]=rotateVector(xIn,yIn,gyro.getAngle());  xIn=rotated[0];  yIn=rotated[1];  double wheelSpeeds[]=new double[NUMBER_OF_MOTORS];  wheelSpeeds[LEFT_FRONT]=xIn + yIn + rotation;  wheelSpeeds[RIGHT_FRONT]=-xIn + yIn - rotation;  wheelSpeeds[LEFT_REAR]=-xIn + yIn + rotation;  wheelSpeeds[RIGHT_REAR]=xIn + yIn - rotation;  normalize(wheelSpeeds);  scale(wheelSpeeds,OUTPUT_SCALE_FACTOR);  leftFront.setSpeed(wheelSpeeds[LEFT_FRONT]);  leftRear.setSpeed(wheelSpeeds[LEFT_REAR]);  rightFront.setSpeed(wheelSpeeds[RIGHT_FRONT]);  rightRear.setSpeed(wheelSpeeds[RIGHT_REAR]);}  }
class C{  private IonValue ion(final String hex){  return system().singleValue(hexToBytes(MAGIC_COOKIE + hex));}  }
class C{  protected void doDelete(HttpServletRequest request,PreferencesForm frm){  String deleteType=request.getParameter("deleteType");  int deleteId=-1;  try {    deleteId=Integer.parseInt(request.getParameter("deleteId"));  } catch (  Exception e) {    deleteId=-1;  }  if (deleteType != null && deleteId >= 0) {    if (deleteType.equals("roomPref")) {      List lst=frm.getRoomPrefs();      List lstL=frm.getRoomPrefLevels();      lst.remove(deleteId);      lstL.remove(deleteId);      frm.setRoomPrefs(lst);      frm.setRoomPrefLevels(lstL);      request.setAttribute(HASH_ATTR,HASH_RM_PREF);    }    if (deleteType.equals("rgPref")) {      List lst=frm.getRoomGroups();      List lstL=frm.getRoomGroupLevels();      lst.remove(deleteId);      lstL.remove(deleteId);      frm.setRoomGroups(lst);      frm.setRoomGroupLevels(lstL);      request.setAttribute(HASH_ATTR,HASH_RM_GROUP);    }    if (deleteType.equals("bldgPref")) {      List lst=frm.getBldgPrefs();      List lstL=frm.getBldgPrefLevels();      lst.remove(deleteId);      lstL.remove(deleteId);      frm.setBldgPrefs(lst);      frm.setBldgPrefLevels(lstL);      request.setAttribute(HASH_ATTR,HASH_BLDG_PREF);    }    if (deleteType.equals("distPref")) {      List lst=frm.getDistPrefs();      List lstL=frm.getDistPrefLevels();      lst.remove(deleteId);      lstL.remove(deleteId);      frm.setDistPrefs(lst);      frm.setDistPrefLevels(lstL);      request.setAttribute(HASH_ATTR,HASH_DIST_PREF);    }    if (deleteType.equals("roomFeaturePref")) {      List lst=frm.getRoomFeaturePrefs();      List lstL=frm.getRoomFeaturePrefLevels();      lst.remove(deleteId);      lstL.remove(deleteId);      frm.setRoomFeaturePrefs(lst);      frm.setRoomFeaturePrefLevels(lstL);      request.setAttribute(HASH_ATTR,HASH_RM_FEAT_PREF);    }    if (deleteType.equals("timePattern")) {      List tps=frm.getTimePatterns();      tps.remove(deleteId);      frm.setTimePatterns(tps);      request.setAttribute(HASH_ATTR,HASH_TIME_PREF);    }    if (deleteType.equals("dpPref")) {      List lst=frm.getDatePatternPrefs();      List lstL=frm.getDatePatternPrefLevels();      lst.remove(deleteId);      lstL.remove(deleteId);      frm.setDatePatternPrefs(lst);      frm.setDatePatternPrefLevels(lstL);      request.setAttribute(HASH_ATTR,HASH_RM_GROUP);    }  }}  }
class C{  public void updateRelation(Relation r,ArrayList<RelationMemberDescription> members){  dirty=true;  undo.save(r);  boolean changed=false;  ArrayList<RelationMember> origMembers=new ArrayList<RelationMember>(r.getMembers());  LinkedHashMap<String,RelationMember> membersHash=new LinkedHashMap<String,RelationMember>();  for (  RelationMember rm : r.getMembers()) {    membersHash.put(rm.getType() + "-" + rm.getRef(),rm);  }  ArrayList<RelationMember> newMembers=new ArrayList<RelationMember>();  for (int i=0; i < members.size(); i++) {    RelationMemberDescription rmd=members.get(i);    String key=rmd.getType() + "-" + rmd.getRef();    OsmElement e=rmd.getElement();    RelationMember rm=membersHash.get(key);    if (rm != null) {      int origPos=origMembers.indexOf(rm);      String newRole=rmd.getRole();      if (!rm.getRole().equals(newRole)) {        changed=true;        rm=new RelationMember(rm);        rm.setRole(newRole);      }      newMembers.add(rm);      if (origPos != i) {        changed=true;      }      membersHash.remove(key);    } else {      changed=true;      RelationMember newMember=null;      if (e != null) {        newMember=new RelationMember(rmd.getRole(),e);      } else {        newMember=new RelationMember(rmd.getType(),rmd.getRef(),rmd.getRole());      }      newMembers.add(newMember);    }  }  for (  RelationMember rm : membersHash.values()) {    changed=true;    OsmElement e=rm.getElement();    if (e != null) {      undo.save(e);      e.removeParentRelation(r);    }  }  if (changed) {    r.replaceMembers(newMembers);    r.updateState(OsmElement.STATE_MODIFIED);    try {      apiStorage.insertElementSafe(r);      recordImagery();    } catch (    StorageException e) {      e.printStackTrace();    }  } else {  }}  }
class C{  public int xyToOffset(int x,int y){  int line=yToLine(y);  int start=getLineStartOffset(line);  return start + xToOffset(line,x);}  }
class C{  public void createSubUsageScenario01() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.weeksToMillis(2.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO01_PERUNIT_WEEK",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO01_PERUNIT_WEEK",serviceDetails,basicSetup.getSecondCustomerUser1(),role);  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") + DateTimeHandling.weeksToMillis(1.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO01_PERUNIT_WEEK",subDetails);}  }
class C{  protected SnmpSubRequestHandler(SnmpEngine engine,SnmpIncomingRequest incRequest,SnmpMibAgent agent,SnmpPdu req){  this(agent,req);  init(engine,incRequest);}  }
class C{  public static boolean isFirstRun(Context mContext){  final SharedPreferences preferences=mContext.getSharedPreferences(firstRunPrefs,Context.MODE_PRIVATE);  return preferences.getBoolean("isFirstRun",true);}  }
class C{  public MiniAdmin(String jdbcUrl,Properties props) throws SQLException {  this.conn=(Connection)(new Driver().connect(jdbcUrl,props));}  }
class C{  public CountRequest(String... indices){  super(indices);}  }
class C{  public int start_state(){  return 0;}  }
class C{  @Override public void onSearchSubmitted(String query){  FragmentTransaction ft=fm.beginTransaction();  ft.setCustomAnimations(android.R.anim.slide_in_left,android.R.anim.slide_out_right,android.R.anim.slide_in_left,android.R.anim.slide_out_right);  srf=SearchResultFragment.newInstance(query);  ft.add(android.R.id.content,srf);  ft.hide(tlf);  ft.addToBackStack(null);  ft.commit();}  }
class C{  protected void paint(SeaGlassContext context,Graphics g){}  }
class C{  private void visualizeMTreeEntry(SVGPlot svgp,Element layer,Projection2D proj,AbstractMTree<?,N,E,?> mtree,E entry,int depth){  DBID roid=entry.getRoutingObjectID();  if (roid != null) {    NumberVector ro=rel.get(roid);    double rad=entry.getCoveringRadius();    final Element r;    if (dist == Modus.MANHATTAN) {      r=SVGHyperSphere.drawManhattan(svgp,proj,ro,rad);    } else     if (dist == Modus.EUCLIDEAN) {      r=SVGHyperSphere.drawEuclidean(svgp,proj,ro,rad);    } else {      r=SVGHyperSphere.drawLp(svgp,proj,ro,rad,p);    }    SVGUtil.setCSSClass(r,INDEX + (depth - 1));    layer.appendChild(r);  }  if (!entry.isLeafEntry()) {    N node=mtree.getNode(entry);    for (int i=0; i < node.getNumEntries(); i++) {      E child=node.getEntry(i);      if (!child.isLeafEntry()) {        visualizeMTreeEntry(svgp,layer,proj,mtree,child,depth + 1);      }    }  }}  }
class C{  public static TsconfigJson load(Reader reader){  return load(reader,TsconfigJson.class);}  }
class C{  ServiceRefAmp service(QueueServiceFactoryInbox serviceFactory,ServiceConfig config){  QueueDeliverBuilderImpl<MessageAmp> queueBuilder=new QueueDeliverBuilderImpl<>();  queueBuilder.setClassLoader(_services.classLoader());  queueBuilder.sizeMax(config.queueSizeMax());  queueBuilder.size(config.queueSize());  InboxAmp inbox=new InboxQueue(_services,queueBuilder,serviceFactory,config);  return inbox.serviceRef();}  }
class C{  private void registerBeanDefinitionAndInitialize(String beanName,String className) throws ClassNotFoundException {  Class<?> clazz=Class.forName(className);  GenericBeanDefinition definition=new GenericBeanDefinition();  definition.setBeanClass(clazz);  definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);  definition.setAutowireCandidate(true);  registry.registerBeanDefinition(beanName,definition);  beanFactory.getBean(beanName,clazz);}  }
class C{  @Override public void removeLayoutCompleteEventListener(LayoutCompleteEventListener e){  if (layoutCompleteListeners != null) {    LayoutCompleteEventListener l;    for (int i=0; i < layoutCompleteListeners.size(); i++) {      l=layoutCompleteListeners.get(i);      if (l == e) {        layoutCompleteListeners.remove(i);        return;      }    }    System.err.println("layoutCompleteListener to be remove not present");  } else {    System.err.println("layoutCompleteListener to be remove not present");  }}  }
class C{  public static void convolveH(Kernel kernel,int[] inPixels,int[] outPixels,int width,int height,boolean alpha,int edgeAction){  int index=0;  float[] matrix=kernel.getKernelData(null);  int cols=kernel.getWidth();  int cols2=cols / 2;  for (int y=0; y < height; y++) {    int ioffset=y * width;    for (int x=0; x < width; x++) {      float r=0, g=0, b=0, a=0;      int moffset=cols2;      for (int col=-cols2; col <= cols2; col++) {        float f=matrix[moffset + col];        if (f != 0) {          int ix=x + col;          if (ix < 0) {            if (edgeAction == CLAMP_EDGES)             ix=0; else             if (edgeAction == WRAP_EDGES)             ix=(x + width) % width;          } else           if (ix >= width) {            if (edgeAction == CLAMP_EDGES)             ix=width - 1; else             if (edgeAction == WRAP_EDGES)             ix=(x + width) % width;          }          int rgb=inPixels[ioffset + ix];          a+=f * ((rgb >> 24) & 0xff);          r+=f * ((rgb >> 16) & 0xff);          g+=f * ((rgb >> 8) & 0xff);          b+=f * (rgb & 0xff);        }      }      int ia=alpha ? PixelUtils.clamp((int)(a + 0.5)) : 0xff;      int ir=PixelUtils.clamp((int)(r + 0.5));      int ig=PixelUtils.clamp((int)(g + 0.5));      int ib=PixelUtils.clamp((int)(b + 0.5));      outPixels[index++]=(ia << 24) | (ir << 16) | (ig << 8)| ib;    }  }}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public ExitPseudoState(StateHolder<S,E> state){  Assert.notNull(state,"Holder must be set");  this.state=state;}  }
class C{  MultiFinderPatternFinder(BitMatrix image){  super(image);}  }
class C{  protected final V wrapValue(V o){  return o;}  }
class C{  protected void load(String filename,Properties p) throws FileNotFoundException {  File file=new File(filename);  if (!file.exists())   throw new FileNotFoundException(filename);  classifier=new CRFClassifier<CoreLabel>(p);  try {    classifier.loadClassifier(file,p);  } catch (  ClassCastException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }catch (  ClassNotFoundException e) {    e.printStackTrace();  }}  }
class C{  public static StringBuffer stringSubstitution(String argStr,Map vars){  StringBuffer argBuf=new StringBuffer();  for (int cIdx=0; cIdx < argStr.length(); ) {    char ch=argStr.charAt(cIdx);switch (ch) {case '$':      StringBuffer nameBuf=new StringBuffer();    for (++cIdx; cIdx < argStr.length(); ++cIdx) {      ch=argStr.charAt(cIdx);      if (ch == '_' || Character.isLetterOrDigit(ch))       nameBuf.append(ch); else       break;    }  if (nameBuf.length() > 0) {    String value=(String)vars.get(nameBuf.toString());    if (value != null) {      argBuf.append(value);    }  }break;default :argBuf.append(ch);++cIdx;break;}}return argBuf;}  }
class C{  public void grantAdmin(String jid) throws XMPPException {  changeAffiliationByOwner(jid,"admin");}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (!Sage.isNonLocalClient())   return Boolean.FALSE;  return (pluggy != null && sage.plugin.CorePluginManager.getInstance().isPluginInstalled(pluggy.getId())) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public static void deleteView(final AbstractSQLProvider provider,final INaviView view) throws CouldntDeleteException {  checkArguments(provider,view);  Preconditions.checkArgument(view.getType() != ViewType.Native,"IE00614: Native views can not be deleted");  final CConnection connection=provider.getConnection();  NaviLogger.info("Deleting view %s",view.getName());  final int viewId=view.getConfiguration().getId();  if (!(viewId == -1)) {    try {      PostgreSQLHelpers.beginTransaction(connection);      PostgreSQLHelpers.deleteById(connection,CTableNames.VIEWS_TABLE,viewId);      PostgreSQLHelpers.deleteByColumnValue(connection,"" + CTableNames.NODES_TABLE + "","view_id",viewId);      PostgreSQLHelpers.deleteByColumnValue(connection,"" + CTableNames.TRACES_TABLE + "","view_id",viewId);      PostgreSQLHelpers.endTransaction(connection);    } catch (    final SQLException exception) {      throw new CouldntDeleteException(exception);    }  }}  }
class C{  public boolean isDeclaredAsync(){  return declaredAsync;}  }
class C{  public void updateAndTestCounter(OFMessage ofm,String type){  validateCounter(type,0);  counters.updateWriteStats(ofm);  counters.updateWriteStats(ofm);  counters.updateReadStats(ofm);  counters.updateReadStats(ofm);  validateCounter(type,2);}  }
class C{  public String preprocessingTipText(){  return "Sets the filter to use for preprocessing (use the AllFilter for no preprocessing).";}  }
class C{  public void connectFailed(Connection connection,IOException failure){  Route failedRoute=connection.getRoute();  if (failedRoute.getProxy().type() != Proxy.Type.DIRECT && proxySelector != null) {    proxySelector.connectFailed(uri,failedRoute.getProxy().address(),failure);  }  routeDatabase.failed(failedRoute,failure);}  }
class C{  public static _CredentialRetrievalEnum fromString(final String value) throws SOAPSerializationException {  return (_CredentialRetrievalEnum)Enumeration.fromString(value,_CredentialRetrievalEnum.VALUES_TO_INSTANCES);}  }
class C{  public IFile findJsconfigFile(IResource resource) throws CoreException {  return WorkbenchResourceUtil.findFileInContainerOrParent(resource,JSCONFIG_JSON_PATH);}  }
class C{  private static String removeSubjLeaders(String subject){  int subString=0;  while (subject.charAt(subString) == WS) {    subString++;  }  if (subString > 0) {    return subject.substring(subString);  } else {    String subj=removeSubjectBlob(subject);    String lowCaseSubj=subj.toLowerCase(Locale.US);    if (lowCaseSubj.startsWith(RE)) {      subString=RE.length();    } else     if (lowCaseSubj.startsWith(FWD)) {      subString=FWD.length();    } else     if (lowCaseSubj.startsWith(FW)) {      subString=FW.length();    } else {      return subject;    }    while (subj.charAt(subString) == WS) {      subString++;    }    if (subj.charAt(subString) == COLON) {      subString++;    } else {      return subject;    }    while (subj.charAt(subString) == WS) {      subString++;    }    return subj.substring(subString);  }}  }
class C{  public String toString(){  if (isActive())   return getWhereClause(true);  return "MQuery[" + m_TableName + ",Restrictions=0]";}  }
class C{  public void disconnect(int code,String reason){  try {    if (mConnection != null) {      mConnection.close(CloseCode.NORMAL,"Goodbye and thanks for the fishes!");    }    mConnection=null;  } catch (  Exception e) {    if (mCallback != null) {      mCallback.onException(e);    }  }}  }
class C{  private void buildSlots(ObjectStreamField[] fields){  slotsToSerialize=new ObjectSlot[fields.length];  for (int i=0; i < fields.length; i++) {    ObjectSlot s=new ObjectSlot();    slotsToSerialize[i]=s;    s.field=fields[i];  }}  }
class C{  public void merge(JarIndex toIndex,String path){  Iterator<Map.Entry<String,LinkedList<String>>> itr=indexMap.entrySet().iterator();  while (itr.hasNext()) {    Map.Entry<String,LinkedList<String>> e=itr.next();    String packageName=e.getKey();    LinkedList<String> from_list=e.getValue();    Iterator<String> listItr=from_list.iterator();    while (listItr.hasNext()) {      String jarName=listItr.next();      if (path != null) {        jarName=path.concat(jarName);      }      toIndex.addMapping(packageName,jarName);    }  }}  }
class C{  public static Address readFromOptional(final Deserializer deserializer,final String label,final AddressEncoding encoding){switch (encoding) {case PUBLIC_KEY:    return createAddressFromPublicKeyBytes(deserializer.readOptionalBytes(label));case COMPRESSED:default :  return createAddressFromEncodedAddress(deserializer.readOptionalString(label));}}  }
class C{  public Rotate3dAnimation(float fromDegrees,float toDegrees,float centerX,float centerY,float depthZ,boolean reverse){  mFromDegrees=fromDegrees;  mToDegrees=toDegrees;  mCenterX=centerX;  mCenterY=centerY;  mDepthZ=depthZ;  mReverse=reverse;}  }
class C{  public static void applyFont(final Context context,final View root,final String fontPath){  try {    if (root instanceof ViewGroup) {      ViewGroup viewGroup=(ViewGroup)root;      int childCount=viewGroup.getChildCount();      for (int i=0; i < childCount; i++)       applyFont(context,viewGroup.getChildAt(i),fontPath);    } else     if (root instanceof TextView)     ((TextView)root).setTypeface(Typeface.createFromAsset(context.getAssets(),fontPath));  } catch (  Exception e) {    Log.e(TAG,String.format("Error occured when trying to apply %s font for %s view",fontPath,root));    e.printStackTrace();  }}  }
class C{  public boolean isWhitespaceVisible(){  return whitespaceVisible;}  }
class C{  public boolean isStreaming(){  return false;}  }
class C{  private static void assertCompoundSegments(IndexReader reader,boolean compound){  assertNotNull("Null leaves",reader.leaves());  assertTrue("no leaves",0 < reader.leaves().size());  for (  LeafReaderContext atomic : reader.leaves()) {    assertTrue("not a segment reader: " + atomic.reader().toString(),atomic.reader() instanceof SegmentReader);    assertEquals("Compound status incorrect for: " + atomic.reader().toString(),compound,((SegmentReader)atomic.reader()).getSegmentInfo().info.getUseCompoundFile());  }}  }
class C{  public DelegatingSocket(String host,int port) throws UnknownHostException, IOException {  this((Socket)null);}  }
class C{  @Override protected void finalize() throws Throwable {  try {    NativeCollation.closeElements(address);  }  finally {    super.finalize();  }}  }
class C{  private void resetState(){  for (  Integer key : mActiveCalls.keySet()) {    LTRCallEvent event=mActiveCalls.get(key);    if (event != null) {      event.end();      broadcast(event);    }  }  mActiveCalls.clear();  mTalkgroup=null;  broadcast(ChangedAttribute.TO_TALKGROUP);  mTalkgroupAlias=null;  broadcast(ChangedAttribute.TO_TALKGROUP_ALIAS);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node addressNode;  Text textNode;  Text splitNode;  String value;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  addressNode=elementList.item(0);  textNode=(Text)addressNode.getFirstChild();  splitNode=textNode.splitText(30);  value=splitNode.getNodeValue();  assertEquals("textSplitTextFourAssert","98551",value);}  }
class C{  private XStringForChars(String val){  super(val);  throw new IllegalArgumentException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_XSTRINGFORCHARS_CANNOT_TAKE_STRING,null));}  }
class C{  public boolean invalidateIt(){  log.info(toString());  setDocAction(DOCACTION_Prepare);  return true;}  }
class C{  public Configurator errorImage(int imageRes){  if (imageRes > 0) {    viewErrorImage=imageRes;  }  return this;}  }
class C{  public void removeListener(final IZyGraphSearchSettingsListener listener){  m_listeners.removeListener(listener);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void ashr(int size,Register dst,Register src,Register shift){  super.asr(size,dst,src,shift);}  }
class C{  public static long min(long a,final long b,final long c){  if (b < a) {    a=b;  }  if (c < a) {    a=c;  }  return a;}  }
class C{  public void addImage(PDFImage image){  addCommand(new PDFImageCmd(image));}  }
class C{  public boolean isGLBudgetDim(){  Object oo=get_Value(COLUMNNAME_IsGLBudgetDim);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void parsePublicTransitStops() throws IOException, InstantiationException, IllegalAccessException, ClassNotFoundException, SQLException, SAXException, ParserConfigurationException, NoConnectionException {  DataBaseAdmin dba=new DataBaseAdmin(new File("./data/DataBase.properties"));  DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();  DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();  int replays=0;  int stops=0;  Document docWest=dBuilder.parse(new File("./data/westSingapore.osm"));  NodeList allNodes=docWest.getElementsByTagName("node");  for (int n=0; n < allNodes.getLength(); n++) {    Node node=allNodes.item(n);    NodeList nodeTags=((Element)node).getElementsByTagName("tag");    String latitude=node.getAttributes().item(2).getNodeValue();    String longitude=node.getAttributes().item(3).getNodeValue();    boolean isBusStop=false;    boolean isMRT=false;    String codeB="";    String codeM="";    String name="";    String[] routes=null;    for (int t=0; t < nodeTags.getLength(); t++) {      if (nodeTags.item(t).getAttributes().getNamedItem("v").getNodeValue().equals("bus_stop"))       isBusStop=true; else       if (nodeTags.item(t).getAttributes().getNamedItem("k").getNodeValue().equals("railway") && nodeTags.item(t).getAttributes().getNamedItem("v").getNodeValue().equals("station"))       isMRT=true; else       if (nodeTags.item(t).getAttributes().getNamedItem("k").getNodeValue().equals("name"))       name=nodeTags.item(t).getAttributes().getNamedItem("v").getNodeValue(); else       if (nodeTags.item(t).getAttributes().getNamedItem("k").getNodeValue().equals("asset_ref"))       codeB=nodeTags.item(t).getAttributes().getNamedItem("v").getNodeValue(); else       if (nodeTags.item(t).getAttributes().getNamedItem("k").getNodeValue().equals("route_ref"))       routes=nodeTags.item(t).getAttributes().getNamedItem("v").getNodeValue().split(";"); else       if (nodeTags.item(t).getAttributes().getNamedItem("k").getNodeValue().equals("ref"))       codeM=nodeTags.item(t).getAttributes().getNamedItem("v").getNodeValue();    }    if (isBusStop && !name.equals("") && !codeB.equals("")) {      try {        dba.executeStatement("INSERT INTO BusStops VALUES ('" + codeB + "','"+ name+ "',"+ latitude+ ","+ longitude+ ")");        System.out.println("Bus " + stops);        stops++;      } catch (      SQLException e) {        System.out.println(e.getMessage() + " WEST");        replays++;      }      if (routes != null)       try {        for (int r=0; r < routes.length; r++)         dba.executeStatement("INSERT INTO BusStopsRoutes VALUES ('" + codeB + "','"+ routes[r]+ "')");      } catch (      SQLException e) {        System.out.println(e.getMessage() + " WEST");      }    } else     if (isMRT && !name.equals(""))     try {      if (codeM.equals(""))       dba.executeStatement("INSERT INTO MRTStops (Name,OSMLatitude,OSMLongitude) VALUES ('" + name + "',"+ latitude+ ","+ longitude+ ")"); else       dba.executeStatement("INSERT INTO MRTStops (RouteCode,Name,OSMLatitude,OSMLongitude) VALUES ('" + codeM + "','"+ name+ "',"+ latitude+ ","+ longitude+ ")");      System.out.println("MRT " + stops);      stops++;    } catch (    SQLException e) {      System.out.println(e.getMessage() + " WEST");      replays++;    }  }  Document docEast=dBuilder.parse(new File("./data/eastSingapore.osm"));  allNodes=docEast.getElementsByTagName("node");  for (int n=0; n < allNodes.getLength(); n++) {    Node node=allNodes.item(n);    NodeList nodeTags=((Element)node).getElementsByTagName("tag");    String latitude=node.getAttributes().item(2).getNodeValue();    String longitude=node.getAttributes().item(3).getNodeValue();    boolean isBusStop=false;    boolean isMRT=false;    String codeB="";    String codeM="";    String name="";    String[] routes=null;    for (int t=0; t < nodeTags.getLength(); t++) {      if (nodeTags.item(t).getAttributes().getNamedItem("v").getNodeValue().equals("bus_stop"))       isBusStop=true; else       if (nodeTags.item(t).getAttributes().getNamedItem("k").getNodeValue().equals("railway") && nodeTags.item(t).getAttributes().getNamedItem("v").getNodeValue().equals("station"))       isMRT=true; else       if (nodeTags.item(t).getAttributes().getNamedItem("k").getNodeValue().equals("name"))       name=nodeTags.item(t).getAttributes().getNamedItem("v").getNodeValue(); else       if (nodeTags.item(t).getAttributes().getNamedItem("k").getNodeValue().equals("asset_ref"))       codeB=nodeTags.item(t).getAttributes().getNamedItem("v").getNodeValue(); else       if (nodeTags.item(t).getAttributes().getNamedItem("k").getNodeValue().equals("route_ref"))       routes=nodeTags.item(t).getAttributes().getNamedItem("v").getNodeValue().split(";"); else       if (nodeTags.item(t).getAttributes().getNamedItem("k").getNodeValue().equals("ref"))       codeM=nodeTags.item(t).getAttributes().getNamedItem("v").getNodeValue();    }    if (isBusStop && !name.equals("") && !codeB.equals("")) {      try {        dba.executeStatement("INSERT INTO BusStops VALUES ('" + codeB + "','"+ name+ "',"+ latitude+ ","+ longitude+ ")");        System.out.println("Bus " + stops);        stops++;      } catch (      SQLException e) {        System.out.println(e.getMessage() + " EAST");        replays++;      }      if (routes != null)       try {        for (int r=0; r < routes.length; r++)         dba.executeStatement("INSERT INTO BusStopsRoutes VALUES ('" + codeB + "','"+ routes[r]+ "')");      } catch (      SQLException e) {        System.out.println(e.getMessage() + " EAST");      }    } else     if (isMRT && !name.equals(""))     try {      if (codeM.equals(""))       dba.executeStatement("INSERT INTO MRTStops (Name,OSMLatitude,OSMLongitude) VALUES ('" + name + "',"+ latitude+ ","+ longitude+ ")"); else       dba.executeStatement("INSERT INTO MRTStops (RouteCode,Name,OSMLatitude,OSMLongitude) VALUES ('" + codeM + "','"+ name+ "',"+ latitude+ ","+ longitude+ ")");      System.out.println("MRT " + stops);      stops++;    } catch (    SQLException e) {      System.out.println(e.getMessage() + " EAST");      replays++;    }  }  System.out.println(replays);}  }
class C{  public synchronized int size(){  return this.list.size();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.util.Set okset=new java.util.HashSet();  Object[] data1;  Object[] data2;  Object o=stack.pop();  if (o instanceof java.util.Collection)   okset.addAll((java.util.Collection)o); else   if (o instanceof Object[])   okset.addAll(java.util.Arrays.asList((Object[])o)); else   if (o != null)   okset.add(o);  o=stack.pop();  java.util.Vector rv=new java.util.Vector();  if (o instanceof java.util.Collection) {    java.util.Iterator walker=((java.util.Collection)o).iterator();    while (walker.hasNext()) {      Object foo=walker.next();      if (okset.contains(foo))       rv.add(foo);    }  } else   if (o instanceof Object[]) {    Object[] oa=(Object[])o;    for (int i=0; i < oa.length; i++)     if (okset.contains(oa[i]))     rv.add(oa[i]);  } else   if (okset.contains(o)) {    rv.add(o);  }  return rv;}  }
class C{  public boolean remove(M match){  cache.clear();  return stack.remove(match);}  }
class C{  public UUID senderNodeId(){  return sndNodeId;}  }
class C{  @Override public void registerOutParameter(String parameterName,int sqlType) throws SQLException {  registerOutParameter(getIndexForName(parameterName),sqlType);}  }
class C{  public static VODiscount toVODiscount(Discount domObj){  if (domObj == null) {    return null;  }  VODiscount voResult=new VODiscount();  updateValueObject(voResult,domObj);  copyToVOAttributes(domObj,voResult);  return voResult;}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  int rgb=-1;  if (paint != null) {    Color c=(paint instanceof Color) ? ((Color)paint) : SystemColor.textHighlight;    rgb=c.getRGB();  }  s.writeInt(rgb);}  }
class C{  public GeoRssWhere(Point point){  if (point != null) {    if (!(point instanceof GmlPoint)) {      point=new GmlPoint(point);    }    setExtension(point);  }}  }
class C{  public static BufferedImage createPattern(String pattern,float scale){  return createPattern(pattern,defaultDimension,scale,defaultLineColor,defaultBackColor);}  }
class C{  private void startDataSourceTag(){  buffer.append("<data-source \n");}  }
class C{  public WireFrameBoxPortrayal3D(double x,double y,double z,double x2,double y2,double z2,Color color){  this(x,y,z,x2,y2,z2,appearanceForColor(color));}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:43.458 -0500",hash_original_method="40F3B3649F989E59FAF074C2858F6B9B",hash_generated_method="26A0276884CC044487B07E4402CDD314") public GenericURI parseUrl(String url) throws ParseException {  return new URLParser(url).parse();}  }
class C{  @SuppressWarnings("unchecked") public static <K,V extends Persistent>DataStore<K,V> createWebStore(Configuration conf,Class<K> keyClass,Class<V> persistentClass) throws ClassNotFoundException, GoraException {  String crawlId=conf.get(Nutch.CRAWL_ID_KEY,"");  String schemaPrefix="";  if (!crawlId.isEmpty()) {    schemaPrefix=crawlId + "_";  }  String schema;  if (WebPage.class.equals(persistentClass)) {    schema=conf.get("storage.schema.webpage","webpage");    conf.set("preferred.schema.name",schemaPrefix + "webpage");  } else   if (Host.class.equals(persistentClass)) {    schema=conf.get("storage.schema.host","host");    conf.set("preferred.schema.name",schemaPrefix + "host");  } else {    throw new UnsupportedOperationException("Unable to create store for class " + persistentClass);  }  Class<? extends DataStore<K,V>> dataStoreClass=(Class<? extends DataStore<K,V>>)getDataStoreClass(conf);  return DataStoreFactory.createDataStore(dataStoreClass,keyClass,persistentClass,conf,schema);}  }
class C{  public void test_parseLjava_io_InputStream(){  InputStream is=getClass().getResourceAsStream("/simple.xml");  try {    Document d=db.parse(is);    assertNotNull(d);    assertEquals(2,d.getChildNodes().getLength());    assertEquals("#comment",d.getChildNodes().item(0).getNodeName());    assertEquals("breakfast_menu",d.getChildNodes().item(1).getNodeName());  } catch (  IOException ioe) {    fail("Unexpected IOException " + ioe.toString());  }catch (  SAXException sax) {    fail("Unexpected SAXException " + sax.toString());  }  try {    db.parse((InputStream)null);    fail("Expected IllegalArgumentException was not thrown");  } catch (  IllegalArgumentException iae) {  }catch (  IOException ioe) {    fail("Unexpected IOException " + ioe.toString());  }catch (  SAXException sax) {    fail("Unexpected SAXException " + sax.toString());  }  try {    db.parse(new FileInputStream("_"));    fail("Expected IOException was not thrown");  } catch (  IOException ioe) {  }catch (  SAXException sax) {    fail("Unexpected SAXException " + sax.toString());  }  try {    is=getClass().getResourceAsStream("/wrong.xml");    db.parse(is);    fail("Expected SAXException was not thrown");  } catch (  IOException ioe) {    fail("Unexpected IOException " + ioe.toString());  }catch (  SAXException sax) {  }}  }
class C{  private boolean timeAuthorisedBook(Player player){  if (player.hasPermission("achievement.*"))   return true;  long currentTime=System.currentTimeMillis();  long lastBookTime=0;  if (players.containsKey(player))   lastBookTime=players.get(player);  if (currentTime - lastBookTime < bookTime)   return false;  players.put(player,currentTime);  return true;}  }
class C{  public final boolean isCancelled(){  return cancelled;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:19.336 -0500",hash_original_method="016A9258BFECCECB9307E0C389EB3A3D",hash_generated_method="3278A0298FB24C6CFC126977D6045B40") protected boolean runAndReset(){  return sync.innerRunAndReset();}  }
class C{  public int size(){  return m_keys.size();}  }
class C{  private static void addOID(ObjectIdentifier oid){  int[] newOid=oid.getOid();  int index=hashIntArray(newOid) % CAPACITY;  ObjectIdentifier[] list=KNOWN_OIDS[index];  int i=0;  for (; list[i] != null; i++) {    if (Arrays.equals(newOid,list[i].getOid())) {      throw new Error("ObjectIdentifier: invalid static initialization; " + "duplicate OIDs: " + oid.getName() + " "+ list[i].getName());    }  }  if (i == (CAPACITY - 1)) {    throw new Error("ObjectIdentifier: invalid static initialization; " + "small OID pool capacity");  }  list[i]=oid;}  }
class C{  private void reportTestRunStarted(){  if (!mTestRunStartReported) {    for (    ITestRunListener listener : mTestListeners) {      listener.testRunStarted(mTestRunName,mNumTestsExpected);    }    mTestRunStartReported=true;  }}  }
class C{  public static String now(){  Calendar cal=Calendar.getInstance();  SimpleDateFormat sdf=new SimpleDateFormat("yyyyMMdd_HHmm");  return sdf.format(cal.getTime());}  }
class C{  public PersistenceException(String message){  super(message);}  }
class C{  public void release(boolean fullHeap){  sweepLargePages(true);  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(treadmill.nurseryEmpty());  if (fullHeap)   sweepLargePages(false);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:50.787 -0500",hash_original_method="70491B88332D9FF72DEC0D53EB9B78BC",hash_generated_method="8AD32AC07D7EC8740371A827D7EBA3E2") static void gc(){  final VMRuntime runtime=VMRuntime.getRuntime();  System.gc();  runtime.runFinalizationSync();  System.gc();  runtime.runFinalizationSync();  System.gc();  runtime.runFinalizationSync();}  }
class C{  protected void makeTrees(){  safeInitializeTrees();  for (int sentenceId=0; sentenceId < this.getTextAnnotation().getNumberOfSentences(); sentenceId++) {    Constituent root=this.getRootConstituent(sentenceId);    if (root == null) {      trees.set(sentenceId,null);    } else     trees.set(sentenceId,makeTree(root));  }  firstTree=false;}  }
class C{  public static void sort(List list,Comparator c){  Object[] a=list.toArray();  Arrays.sort(a,c);  ListIterator i=list.listIterator();  for (int j=0; j < a.length; j++) {    i.next();    i.set(a[j]);  }}  }
class C{  public final Key doPhase(Key key,boolean lastPhase) throws InvalidKeyException, IllegalStateException {  return spiImpl.engineDoPhase(key,lastPhase);}  }
class C{  public T caseClassDefinition_(ClassDefinition_ object){  return null;}  }
class C{  public FileSendPacket send(File file,SendListener listener){  FileSendPacket entity=new FileSendPacket(file,listener);  send(entity);  return entity;}  }
class C{  @SuppressWarnings("unchecked") public void sort(int col,boolean ascending){  log.info("#" + col + " "+ ascending);  if (col < 0) {    return;  }  if (getRowCount() == 0)   return;  Object[] changedRow=m_rowChanged >= 0 ? getDataAtRow(m_rowChanged) : null;  GridField field=getField(col);  if (field.getDisplayType() == DisplayType.RowID)   return;  boolean isLookup=DisplayType.isLookup(field.getDisplayType());  boolean isASI=DisplayType.PAttribute == field.getDisplayType();  for (int i=0; i < m_sort.size(); i++) {    MSort sort=(MSort)m_sort.get(i);    Object[] rowData=getDataAtRow(i);    if (rowData[col] == null)     sort.data=null; else     if (isLookup || isASI)     sort.data=field.getLookup().getDisplay(rowData[col]); else     sort.data=rowData[col];  }  log.info(field.toString() + " #" + m_sort.size());  MSort sort=new MSort(0,null);  sort.setSortAsc(ascending);  Collections.sort(m_sort,sort);  if (m_virtual) {    Object[] newRow=m_virtualBuffer.get(NEW_ROW_ID);    m_virtualBuffer.clear();    if (newRow != null && newRow.length > 0)     m_virtualBuffer.put(NEW_ROW_ID,newRow);    if (changedRow != null && changedRow.length > 0) {      if (changedRow[m_indexKeyColumn] != null && (Integer)changedRow[m_indexKeyColumn] > 0) {        m_virtualBuffer.put((Integer)changedRow[m_indexKeyColumn],changedRow);        for (int i=0; i < m_sort.size(); i++) {          if (m_sort.get(i).index == (Integer)changedRow[m_indexKeyColumn]) {            m_rowChanged=i;            break;          }        }      }    }    for (int i=0; i < m_sort.size(); i++) {      m_sort.get(i).data=null;    }  }  fireTableDataChanged();  fireDataStatusIEvent("Sorted","#" + m_sort.size());}  }
class C{  public static void main(String[] args){  TestRunner.run(suite());}  }
class C{  public String toString(){  return super.toString() + "SubjectKeyIdentifier [\n" + String.valueOf(id)+ "]\n";}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public static void doInitializeAndInstallGenerator(Context context){  UniqueIdentificationGenerator idGenerator=new UuidBasedUniqueIdentificationGenerator(context,INVALIDATIONS_UUID_PREF_KEY);  InvalidationClientNameGenerator clientNameGenerator=new UniqueIdInvalidationClientNameGenerator(idGenerator);  InvalidationClientNameProvider.get().setPreferredClientNameGenerator(clientNameGenerator);}  }
class C{  public static Network createTriangularNetwork(){  MutableScenario scenario=(MutableScenario)ScenarioUtils.createScenario(ConfigUtils.createConfig());  Network network=(Network)scenario.getNetwork();  Node node1=NetworkUtils.createAndAddNode(network,Id.create(1,Node.class),new Coord((double)0,(double)0));  Node node2=NetworkUtils.createAndAddNode(network,Id.create(2,Node.class),new Coord((double)50,(double)100));  Node node3=NetworkUtils.createAndAddNode(network,Id.create(3,Node.class),new Coord((double)50,(double)0));  Node node4=NetworkUtils.createAndAddNode(network,Id.create(4,Node.class),new Coord((double)100,(double)0));  final Node fromNode=node1;  final Node toNode=node2;  NetworkUtils.createAndAddLink(network,Id.create(1,Link.class),fromNode,toNode,500.0,10.0,3600.0,(double)1);  final Node fromNode1=node2;  final Node toNode1=node4;  NetworkUtils.createAndAddLink(network,Id.create(2,Link.class),fromNode1,toNode1,500.0,10.0,3600.0,(double)1);  final Node fromNode2=node1;  final Node toNode2=node3;  NetworkUtils.createAndAddLink(network,Id.create(3,Link.class),fromNode2,toNode2,50.0,0.1,3600.0,(double)1);  final Node fromNode3=node3;  final Node toNode3=node4;  NetworkUtils.createAndAddLink(network,Id.create(4,Link.class),fromNode3,toNode3,50.0,0.1,3600.0,(double)1);  return network;}  }
class C{  @Override public void success(){  _currentFailCount=0;  long now=CurrentTime.currentTime();  if (_firstSuccessTime <= 0) {    _firstSuccessTime=now;  }  _dynamicFailRecoverTime=1000L;}  }
class C{  private boolean isPasswordValid(String password){  return password.length() > 4;}  }
class C{  @Override public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener){  PrintStream logger=listener.getLogger();  try {    LogPrinter.print("Sending remote command to stop proxy on port " + proxyPort + ".",logger);    launcher.getChannel().call(new StopProxyCallable(new ProxyRequest(listener,proxyPort,build.getExternalizableId(),build.getWorkspace(),getDescriptor())));  } catch (  Exception e) {    LogPrinter.print(e,logger);    return false;  }  return true;}  }
class C{  private static boolean[] createSafeOctets(String safeChars){  int maxChar='z';  char[] safeCharArray=safeChars.toCharArray();  for (  char c : safeCharArray) {    maxChar=Math.max(c,maxChar);  }  boolean[] octets=new boolean[maxChar + 1];  for (int c='0'; c <= '9'; c++) {    octets[c]=true;  }  for (int c='A'; c <= 'Z'; c++) {    octets[c]=true;  }  for (int c='a'; c <= 'z'; c++) {    octets[c]=true;  }  for (  char c : safeCharArray) {    octets[c]=true;  }  return octets;}  }
class C{  CharSequence buildHistory(){  StringBuilder historyText=new StringBuilder(1000);  SQLiteOpenHelper helper=new DBHelper(activity);  SQLiteDatabase db=null;  Cursor cursor=null;  try {    db=helper.getWritableDatabase();    cursor=db.query(DBHelper.TABLE_NAME,COLUMNS,null,null,null,null,DBHelper.TIMESTAMP_COL + " DESC");    while (cursor.moveToNext()) {      historyText.append('"').append(massageHistoryField(cursor.getString(0))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(1))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(2))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(3))).append("\",");      long timestamp=cursor.getLong(3);      historyText.append('"').append(massageHistoryField(EXPORT_DATE_TIME_FORMAT.format(new Date(timestamp)))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(4))).append("\"\r\n");    }    return historyText;  }  finally {    close(cursor,db);  }}  }
class C{  public SFS(int minFeatures,int maxFeatures,RegressionDataSet dataSet,Regressor regressor,int folds,double maxIncrease){  this(minFeatures,maxFeatures,regressor.clone(),folds,maxIncrease);  search(minFeatures,maxFeatures,dataSet,folds);}  }
class C{  public Bundler putBooleanArray(String key,boolean[] value){  bundle.putBooleanArray(key,value);  return this;}  }
class C{  public void addVertex(ValueGraphVertex v){  if (vertices.add(v)) {    if (v.representsParameter()) {      nParameter++;    }    if (representativeV == null) {      representativeV=v;    }  }}  }
class C{  public LongAccumulator(LongBinaryOperator accumulatorFunction,long identity){  this.function=accumulatorFunction;  base=this.identity=identity;}  }
class C{  public String repair(String keySpace,Map<String,String> options) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  PrintStream out=new PrintStream(baos);  getProbe().repairAsync(out,keySpace,options);  return baos.toString("UTF8");}  }
class C{  public synchronized void unwatch(String pathName) throws IOException {  unregisterAll(Paths.get(pathName));}  }
class C{  private void checkVibrationSupport(){  final Vibrator vibrator=(Vibrator)getSystemService(VIBRATOR_SERVICE);  if (vibrator != null && vibrator.hasVibrator()) {    return;  }  final PreferenceGroup category=(PreferenceGroup)findPreferenceByResId(R.string.pref_category_feedback_key);  final CheckBoxPreference prefVibration=(CheckBoxPreference)findPreferenceByResId(R.string.pref_vibration_key);  if (prefVibration != null) {    prefVibration.setChecked(false);    category.removePreference(prefVibration);  }}  }
class C{  public Array values(final Array x){  functionEvaluation_++;  return costFunction_.values(x);}  }
class C{  private CViewInserter(){}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  public boolean readBit(){  return readBits(1) == 1;}  }
class C{  public ServiceActivatorArchiveImpl(ArchiveBase<?> archive){  super(archive);  prepareAsset();}  }
class C{  public synchronized String addArticle(final JSONObject requestJSONObject) throws ServiceException {  final long currentTimeMillis=System.currentTimeMillis();  final String authorId=requestJSONObject.optString(Article.ARTICLE_AUTHOR_ID);  JSONObject author=null;  final int rewardPoint=requestJSONObject.optInt(Article.ARTICLE_REWARD_POINT,0);  if (rewardPoint < 0) {    throw new ServiceException(langPropsService.get("invalidRewardPointLabel"));  }  final int articleType=requestJSONObject.optInt(Article.ARTICLE_TYPE,Article.ARTICLE_TYPE_C_NORMAL);  try {    final JSONObject option=optionRepository.get(Option.ID_C_MISC_ALLOW_ADD_ARTICLE);    if (!"0".equals(option.optString(Option.OPTION_VALUE))) {      throw new ServiceException(langPropsService.get("notAllowAddArticleLabel"));    }    author=userRepository.get(authorId);    if (currentTimeMillis - author.optLong(UserExt.USER_LATEST_ARTICLE_TIME) < Symphonys.getLong("minStepArticleTime") && !Role.ADMIN_ROLE.equals(author.optString(User.USER_ROLE))) {      LOGGER.log(Level.WARN,"Adds article too frequent [userName={0}]",author.optString(User.USER_NAME));      throw new ServiceException(langPropsService.get("tooFrequentArticleLabel"));    }    boolean checkPoint=true;    if ((Article.ARTICLE_TYPE_C_JOURNAL_PARAGRAPH == articleType && !journalQueryService.hasPostParagraphToday(authorId)) || Article.ARTICLE_TYPE_C_JOURNAL_CHAPTER == articleType || Article.ARTICLE_TYPE_C_JOURNAL_SECTION == articleType) {      checkPoint=false;    }    if (checkPoint) {      final long followerCnt=followQueryService.getFollowerCount(authorId,Follow.FOLLOWING_TYPE_C_USER);      final int addition=(int)Math.round(Math.sqrt(followerCnt));      final int sum=Pointtransfer.TRANSFER_SUM_C_ADD_ARTICLE + addition + rewardPoint;      final int balance=author.optInt(UserExt.USER_POINT);      if (balance - sum < 0) {        throw new ServiceException(langPropsService.get("insufficientBalanceLabel"));      }    }  } catch (  final RepositoryException e) {    throw new ServiceException(e);  }  final Transaction transaction=articleRepository.beginTransaction();  try {    final String ret=Ids.genTimeMillisId();    final JSONObject article=new JSONObject();    article.put(Keys.OBJECT_ID,ret);    String articleTitle=requestJSONObject.optString(Article.ARTICLE_TITLE);    articleTitle=Emotions.toAliases(articleTitle);    article.put(Article.ARTICLE_TITLE,articleTitle);    article.put(Article.ARTICLE_TAGS,requestJSONObject.optString(Article.ARTICLE_TAGS));    String articleContent=requestJSONObject.optString(Article.ARTICLE_CONTENT);    articleContent=Emotions.toAliases(articleContent);    article.put(Article.ARTICLE_CONTENT,articleContent);    article.put(Article.ARTICLE_REWARD_CONTENT,requestJSONObject.optString(Article.ARTICLE_REWARD_CONTENT));    article.put(Article.ARTICLE_EDITOR_TYPE,requestJSONObject.optString(Article.ARTICLE_EDITOR_TYPE));    article.put(Article.ARTICLE_AUTHOR_EMAIL,requestJSONObject.optString(Article.ARTICLE_AUTHOR_EMAIL));    article.put(Article.ARTICLE_AUTHOR_ID,authorId);    article.put(Article.ARTICLE_COMMENT_CNT,0);    article.put(Article.ARTICLE_VIEW_CNT,0);    article.put(Article.ARTICLE_GOOD_CNT,0);    article.put(Article.ARTICLE_BAD_CNT,0);    article.put(Article.ARTICLE_COLLECT_CNT,0);    article.put(Article.ARTICLE_COMMENTABLE,requestJSONObject.optBoolean(Article.ARTICLE_COMMENTABLE,true));    article.put(Article.ARTICLE_CREATE_TIME,currentTimeMillis);    article.put(Article.ARTICLE_UPDATE_TIME,currentTimeMillis);    article.put(Article.ARTICLE_LATEST_CMT_TIME,currentTimeMillis);    article.put(Article.ARTICLE_PERMALINK,"/article/" + ret);    article.put(Article.ARTICLE_RANDOM_DOUBLE,Math.random());    article.put(Article.REDDIT_SCORE,0);    article.put(Article.ARTICLE_STATUS,Article.ARTICLE_STATUS_C_VALID);    article.put(Article.ARTICLE_TYPE,articleType);    article.put(Article.ARTICLE_REWARD_POINT,rewardPoint);    String city="";    article.put(Article.ARTICLE_CITY,city);    if (UserExt.USER_GEO_STATUS_C_PUBLIC == author.optInt(UserExt.USER_GEO_STATUS)) {      city=author.optString(UserExt.USER_CITY);      article.put(Article.ARTICLE_CITY,city);    }    tag(article.optString(Article.ARTICLE_TAGS).split(","),article,author);    final String ip=requestJSONObject.optString(Article.ARTICLE_IP);    article.put(Article.ARTICLE_IP,ip);    final JSONObject articleCntOption=optionRepository.get(Option.ID_C_STATISTIC_ARTICLE_COUNT);    final int articleCnt=articleCntOption.optInt(Option.OPTION_VALUE);    articleCntOption.put(Option.OPTION_VALUE,articleCnt + 1);    optionRepository.update(Option.ID_C_STATISTIC_ARTICLE_COUNT,articleCntOption);    if (!StringUtils.isBlank(city)) {      final String cityStatId=city + "-ArticleCount";      JSONObject cityArticleCntOption=optionRepository.get(cityStatId);      if (null == cityArticleCntOption) {        cityArticleCntOption=new JSONObject();        cityArticleCntOption.put(Keys.OBJECT_ID,cityStatId);        cityArticleCntOption.put(Option.OPTION_VALUE,1);        cityArticleCntOption.put(Option.OPTION_CATEGORY,city + "-statistic");        optionRepository.add(cityArticleCntOption);      } else {        final int cityArticleCnt=cityArticleCntOption.optInt(Option.OPTION_VALUE);        cityArticleCntOption.put(Option.OPTION_VALUE,cityArticleCnt + 1);        optionRepository.update(cityStatId,cityArticleCntOption);      }    }    author.put(UserExt.USER_ARTICLE_COUNT,author.optInt(UserExt.USER_ARTICLE_COUNT) + 1);    author.put(UserExt.USER_LATEST_ARTICLE_TIME,currentTimeMillis);    userRepository.update(author.optString(Keys.OBJECT_ID),author);    final String articleId=articleRepository.add(article);    transaction.commit();    tagMgmtService.relateTags(article.optString(Article.ARTICLE_TAGS));switch (articleType) {case Article.ARTICLE_TYPE_C_JOURNAL_PARAGRAPH:      if (journalQueryService.hasPostParagraphToday(authorId)) {        final long followerCnt=followQueryService.getFollowerCount(authorId,Follow.FOLLOWING_TYPE_C_USER);        final int addition=(int)Math.round(Math.sqrt(followerCnt));        pointtransferMgmtService.transfer(authorId,Pointtransfer.ID_C_SYS,Pointtransfer.TRANSFER_TYPE_C_ADD_ARTICLE,Pointtransfer.TRANSFER_SUM_C_ADD_ARTICLE + addition,articleId);      } else {        pointtransferMgmtService.transfer(Pointtransfer.ID_C_SYS,authorId,Pointtransfer.TRANSFER_TYPE_C_ADD_JOURNAL,Pointtransfer.TRANSFER_SUM_C_ADD_JOURNAL,articleId);      }    break;case Article.ARTICLE_TYPE_C_JOURNAL_SECTION:case Article.ARTICLE_TYPE_C_JOURNAL_CHAPTER:  break;default :final long followerCnt=followQueryService.getFollowerCount(authorId,Follow.FOLLOWING_TYPE_C_USER);final int addition=(int)Math.round(Math.sqrt(followerCnt));pointtransferMgmtService.transfer(authorId,Pointtransfer.ID_C_SYS,Pointtransfer.TRANSFER_TYPE_C_ADD_ARTICLE,Pointtransfer.TRANSFER_SUM_C_ADD_ARTICLE + addition,articleId);if (Article.ARTICLE_TYPE_C_CITY_BROADCAST == articleType) {pointtransferMgmtService.transfer(authorId,Pointtransfer.ID_C_SYS,Pointtransfer.TRANSFER_TYPE_C_ADD_ARTICLE_BROADCAST,Pointtransfer.TRANSFER_SUM_C_ADD_ARTICLE_BROADCAST,articleId);}break;}if (rewardPoint > 0) {pointtransferMgmtService.transfer(authorId,Pointtransfer.ID_C_SYS,Pointtransfer.TRANSFER_TYPE_C_ADD_ARTICLE_REWARD,rewardPoint,articleId);}final JSONObject eventData=new JSONObject();eventData.put(Article.ARTICLE,article);try {eventManager.fireEventAsynchronously(new Event<JSONObject>(EventTypes.ADD_ARTICLE,eventData));} catch (final EventException e) {LOGGER.log(Level.ERROR,e.getMessage(),e);}return ret;} catch (final RepositoryException e) {if (transaction.isActive()) {transaction.rollback();}LOGGER.log(Level.ERROR,"Adds an article failed",e);throw new ServiceException(e);}}  }
class C{  public void shuffle(PApplet sketch){  int num=count;  while (num > 1) {    int value=(int)sketch.random(num);    num--;    int temp=data[num];    data[num]=data[value];    data[value]=temp;  }}  }
class C{  public void updateBoolean(int columnIndex,boolean x) throws SQLException {  checkState();  checkTypeConcurrency();  rs.updateBoolean(columnIndex,x);}  }
class C{  protected void engineSetPadding(String padding) throws NoSuchPaddingException {  if (!padding.equalsIgnoreCase("NoPadding")) {    throw new NoSuchPaddingException("Padding " + padding + " unknown.");  }}  }
class C{  public PrintStream(OutputStream out,boolean autoFlush){  this(autoFlush,requireNonNull(out,"Null output stream"));}  }
class C{  protected void assertResultSetMeta(ResultSet rs,int columnCount,String[] labels,int[] datatypes,int[] precision,int[] scale) throws SQLException {  ResultSetMetaData meta=rs.getMetaData();  int cc=meta.getColumnCount();  if (cc != columnCount) {    fail("result set contains " + cc + " columns not "+ columnCount);  }  for (int i=0; i < columnCount; i++) {    if (labels != null) {      String l=meta.getColumnLabel(i + 1);      if (!labels[i].equals(l)) {        fail("column label " + i + " is "+ l+ " not "+ labels[i]);      }    }    if (datatypes != null) {      int t=meta.getColumnType(i + 1);      if (datatypes[i] != t) {        fail("column datatype " + i + " is "+ t+ " not "+ datatypes[i]+ " (prec="+ meta.getPrecision(i + 1)+ " scale="+ meta.getScale(i + 1)+ ")");      }      String typeName=meta.getColumnTypeName(i + 1);      String className=meta.getColumnClassName(i + 1);switch (t) {case Types.INTEGER:        Assert.assertEquals("INTEGER",typeName);      Assert.assertEquals("java.lang.Integer",className);    break;case Types.VARCHAR:  Assert.assertEquals("VARCHAR",typeName);Assert.assertEquals("java.lang.String",className);break;case Types.SMALLINT:Assert.assertEquals("SMALLINT",typeName);Assert.assertEquals("java.lang.Short",className);break;case Types.TIMESTAMP:Assert.assertEquals("TIMESTAMP",typeName);Assert.assertEquals("java.sql.Timestamp",className);break;case Types.DECIMAL:Assert.assertEquals("DECIMAL",typeName);Assert.assertEquals("java.math.BigDecimal",className);break;default :}}if (precision != null) {int p=meta.getPrecision(i + 1);if (precision[i] != p) {fail("column precision " + i + " is "+ p+ " not "+ precision[i]);}}if (scale != null) {int s=meta.getScale(i + 1);if (scale[i] != s) {fail("column scale " + i + " is "+ s+ " not "+ scale[i]);}}}}  }
class C{  private XmlClass findXmlClass(Class<?> aClass){  for (  XmlClass xmlClass : xmlJmapper.classes)   if (xmlClass.name.equals(aClass.getName()))   return xmlClass;  return null;}  }
class C{  ServerSessionContext unregisterSession(long sessionId){  ServerSessionContext session=sessions.remove(sessionId);  if (session != null) {    clients.remove(session.client());    addresses.remove(session.client());    connections.remove(session.client());  }  return session;}  }
class C{  public Matrix4d rotationX(double ang){  double sin, cos;  sin=Math.sin(ang);  cos=Math.cos(ang);  m00=1.0;  m01=0.0;  m02=0.0;  m03=0.0;  m10=0.0;  m11=cos;  m12=sin;  m13=0.0;  m20=0.0;  m21=-sin;  m22=cos;  m23=0.0;  m30=0.0;  m31=0.0;  m32=0.0;  m33=1.0;  properties=PROPERTY_AFFINE;  return this;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:12.556 -0500",hash_original_method="87FB115D4E2C883D105781A1EF69130B",hash_generated_method="8711F4F37C5F12AC2EEB1DF48218526D") public String toString(){  return Long.toString(get());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:24.584 -0500",hash_original_method="E843412269C4B791D4D2B897726E7F84",hash_generated_method="BC8939ADB87C98BC980EE193E0531F45") public boolean isMultiPane(){  return hasHeaders() && mPrefsContainer.getVisibility() == View.VISIBLE;}  }
class C{  private void enqueue(E x){  items[putIndex]=x;  putIndex=inc(putIndex);  count++;  notEmpty.signal();}  }
class C{  void start(){  httpServer.start();}  }
class C{  public static void main(String args[]){  try {    PairedTTester tt=new PairedTTester();    String datasetName=Utils.getOption('t',args);    String compareColStr=Utils.getOption('c',args);    String baseColStr=Utils.getOption('b',args);    boolean summaryOnly=Utils.getFlag('s',args);    boolean rankingOnly=Utils.getFlag('r',args);    try {      if ((datasetName.length() == 0) || (compareColStr.length() == 0)) {        throw new Exception("-t and -c options are required");      }      tt.setOptions(args);      Utils.checkForRemainingOptions(args);    } catch (    Exception ex) {      String result="";      Enumeration<Option> enu=tt.listOptions();      while (enu.hasMoreElements()) {        Option option=enu.nextElement();        result+=option.synopsis() + '\n' + option.description()+ '\n';      }      throw new Exception("Usage:\n\n" + "-t <file>\n" + "\tSet the dataset containing data to evaluate\n"+ "-b <index>\n"+ "\tSet the resultset to base comparisons against (optional)\n"+ "-c <index>\n"+ "\tSet the column to perform a comparison on\n"+ "-s\n"+ "\tSummarize wins over all resultset pairs\n\n"+ "-r\n"+ "\tGenerate a resultset ranking\n\n"+ result);    }    Instances data=new Instances(new BufferedReader(new FileReader(datasetName)));    tt.setInstances(data);    int compareCol=Integer.parseInt(compareColStr) - 1;    System.out.println(tt.header(compareCol));    if (rankingOnly) {      System.out.println(tt.multiResultsetRanking(compareCol));    } else     if (summaryOnly) {      System.out.println(tt.multiResultsetSummary(compareCol));    } else {      System.out.println(tt.resultsetKey());      if (baseColStr.length() == 0) {        for (int i=0; i < tt.getNumResultsets(); i++) {          if (!tt.displayResultset(i)) {            continue;          }          System.out.println(tt.multiResultsetFull(i,compareCol));        }      } else {        int baseCol=Integer.parseInt(baseColStr) - 1;        System.out.println(tt.multiResultsetFull(baseCol,compareCol));      }    }  } catch (  Exception e) {    e.printStackTrace();    System.err.println(e.getMessage());  }}  }
class C{  private boolean destroyChain(byte[] cka_id) throws PKCS11Exception, CertificateException, KeyStoreException {  Session session=null;  try {    session=token.getOpSession();    THandle h=getTokenObject(session,ATTR_CLASS_CERT,cka_id,null);    if (h.type != ATTR_CLASS_CERT) {      if (debug != null) {        debug.println("destroyChain could not find " + "end entity cert with CKA_ID [0x" + Functions.toHexString(cka_id) + "]");      }      return false;    }    X509Certificate endCert=loadCert(session,h.handle);    token.p11.C_DestroyObject(session.id(),h.handle);    if (debug != null) {      debug.println("destroyChain destroyed end entity cert " + "with CKA_ID [" + getID(cka_id) + "]");    }    X509Certificate next=endCert;    while (true) {      if (next.getSubjectX500Principal().equals(next.getIssuerX500Principal())) {        break;      }      CK_ATTRIBUTE[] attrs=new CK_ATTRIBUTE[]{ATTR_TOKEN_TRUE,ATTR_CLASS_CERT,new CK_ATTRIBUTE(CKA_SUBJECT,next.getIssuerX500Principal().getEncoded())};      long[] ch=findObjects(session,attrs);      if (ch == null || ch.length == 0) {        break;      } else {        if (debug != null && ch.length > 1) {          debug.println("destroyChain found " + ch.length + " certificate entries for subject ["+ next.getIssuerX500Principal()+ "] in token - using first entry");        }        next=loadCert(session,ch[0]);        attrs=new CK_ATTRIBUTE[]{ATTR_TOKEN_TRUE,ATTR_CLASS_CERT,new CK_ATTRIBUTE(CKA_ISSUER,next.getSubjectX500Principal().getEncoded())};        long[] issuers=findObjects(session,attrs);        boolean destroyIt=false;        if (issuers == null || issuers.length == 0) {          destroyIt=true;        } else         if (issuers.length == 1) {          X509Certificate iCert=loadCert(session,issuers[0]);          if (next.equals(iCert)) {            destroyIt=true;          }        }        if (destroyIt) {          token.p11.C_DestroyObject(session.id(),ch[0]);          if (debug != null) {            debug.println("destroyChain destroyed cert in chain " + "with subject [" + next.getSubjectX500Principal() + "]");          }        } else {          if (debug != null) {            debug.println("destroyChain did not destroy " + "shared cert in chain with subject [" + next.getSubjectX500Principal() + "]");          }        }      }    }    return true;  }  finally {    token.releaseSession(session);  }}  }
class C{  public DriveImageView(Context context,AttributeSet attrs,int defStyleAttr){  super(context,attrs,defStyleAttr);  initialize(context);}  }
class C{  public void endPrefixMapping(String prefix) throws SAXException {}  }
class C{  private void addPropertyInfoListener(){  try {    coordinator.getCoordinatorClient().addNodeListener(new PropertyInfoListener());  } catch (  Exception e) {    log.error("Fail to add node listener for property info target znode",e);    throw APIException.internalServerErrors.addListenerFailed();  }  log.info("Successfully added node listener for property info target znode");}  }
class C{  public static Writable encodeBase64(Byte[] data,final boolean chunked){  return encodeBase64(DefaultTypeTransformation.convertToByteArray(data),chunked);}  }
class C{  public void clearCachedChildren(){  children=null;}  }
class C{  @Override public double[] distributionForInstance(Instance instance) throws Exception {  if (m_Counts == null) {    double[] result=new double[1];    result[0]=m_ClassValue;    return result;  } else {    return m_Counts.clone();  }}  }
class C{  protected TimeStampStringType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public InformationModel createInformationModel(){  InformationModelImpl informationModel=new InformationModelImpl();  return informationModel;}  }
class C{  public boolean shouldMeterInput(URL url,String method){  return meteringPolicy.shouldMeterInput(url,method);}  }
class C{  public PvTableCellRenderer(){  setOpaque(true);  setBorder(brdr);}  }
class C{  protected static boolean isValidNumber(double d){  return (!(Double.isNaN(d) || Double.isInfinite(d)));}  }
class C{  public Collection values(){  return m_values;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public CompoundComparator(Comparator... comparators){  Assert.notNull(comparators,"Comparators must not be null");  this.comparators=new ArrayList<InvertibleComparator<T>>(comparators.length);  for (  Comparator comparator : comparators) {    this.addComparator(comparator);  }}  }
class C{  public void lockForUpdate() throws InterruptedException {  lock.lockForUpdate();}  }
class C{  public static Typeface walkwaySemiBold(Context context){  return FontSourceProcessor.process(R.raw.walkway_semibold,context);}  }
class C{  public void simpleElement(String name,String value) throws IOException {  simpleElement(null,name,null,value);}  }
class C{  public static LazyDequeX<Long> rangeLong(long start,long end){  return fromStreamS(ReactiveSeq.rangeLong(start,end));}  }
class C{  public LazyObjectMap(final ObjectProvider<? extends Value> provider,final int initialCapacity){  super(initialCapacity);  this.provider=provider;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.BINARY_LOGICAL_EXPRESSION__LHS:    return lhs != null;case N4JSPackage.BINARY_LOGICAL_EXPRESSION__OP:  return op != OP_EDEFAULT;case N4JSPackage.BINARY_LOGICAL_EXPRESSION__RHS:return rhs != null;}return super.eIsSet(featureID);}  }
class C{  public NBNode(Instances header,double nbWeightThreshold) throws Exception {  m_nbWeightThreshold=nbWeightThreshold;  m_bayes=new NaiveBayesUpdateable();  m_bayes.buildClassifier(header);}  }
class C{  private byte[] computeHeaderTag(final byte[] nonce,final byte[] aad){  final CipherHandler cipherHandler=new CipherHandler(encryptionKey_,nonce,aad,Cipher.ENCRYPT_MODE,cryptoAlgo_);  return cipherHandler.cipherData(new byte[0],0,0);}  }
class C{  public byte next(){  if (current < length) {    return input[offset + current++];  } else   throw new IndexOutOfBoundsException();}  }
class C{  @SuppressWarnings("unchecked typecast") public static <T>TypeSerializer<T> deserialize(byte[] bytes) throws IOException {  ByteArrayInputStream bis=new ByteArrayInputStream(bytes);  ObjectInput in=null;  try {    in=new ObjectInputStream(bis);    return (TypeSerializer<T>)in.readObject();  } catch (  ClassNotFoundException e) {    throw new IOException("Could not deserialize class");  } finally {    try {      bis.close();    } catch (    IOException ex) {    }    try {      if (in != null) {        in.close();      }    } catch (    IOException ex) {    }  }}  }
class C{  public EnchantmentType(String enumName,int enumId,String stringID,int numericID,Predicate<EnchantmentType> isConflicting){  super(enumName,enumId);  this.stringID=stringID;  this.numericID=(short)numericID;  this.isConflicting=isConflicting;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:31.212 -0500",hash_original_method="3979972EEEC4E88868F959A411D789BE",hash_generated_method="C7BC11F923377AFB81EB38684EC95967") public static String toHexString(int i){  String str=new String();  str.addTaint(i);  return str;}  }
class C{  public void testEnabledProtocolsAndCipherSuites(){  SecurityHelperTest.resetSecuritySystemProperties();  AuthenticationInfo authInfo=null;  AuthenticationInfo authInfo_noInfo=null;  try {    authInfo=SecurityHelper.loadAuthenticationInformation("sample.security.properties",true,TUNGSTEN_APPLICATION_NAME.ANY);    authInfo_noInfo=SecurityHelper.loadAuthenticationInformation("test.ssl.alias.security.properties",true,TUNGSTEN_APPLICATION_NAME.ANY);    List<String> listEnabledProtocols=authInfo.getEnabledProtocols();    assertNotNull("The list of Protocols should not be null",listEnabledProtocols);    assertFalse("The list of Protocols should contain protocols",listEnabledProtocols.isEmpty());    assertTrue("The list of Protocols should contain 2 protocols",listEnabledProtocols.size() == 2);    List<String> listEnabledCipherSuites=authInfo.getEnabledCipherSuites();    assertNotNull("The list of Cipher Suites should not be null",listEnabledCipherSuites);    assertFalse("The list of Cipher Suites should contain cipher suites",listEnabledCipherSuites.isEmpty());    assertTrue("The list of Cipher Suites should contain at most 9 cipher suites",listEnabledCipherSuites.size() <= 9);    listEnabledProtocols=authInfo_noInfo.getEnabledProtocols();    assertNotNull("The list of Protocols should not be null",listEnabledProtocols);    assertTrue("The list of Protocols should be empty",listEnabledProtocols.isEmpty());    listEnabledCipherSuites=authInfo_noInfo.getEnabledCipherSuites();    assertNotNull("The list of Cipher Suites should not be null",listEnabledCipherSuites);    assertTrue("The list of Cipher Suites should be empty",listEnabledCipherSuites.isEmpty());  } catch (  ServerRuntimeException e) {    assertTrue("There should not be any exception thrown",false);  }catch (  ConfigurationException e) {    assertTrue("There should not be any exception thrown",false);  }  SecurityHelperTest.resetSecuritySystemProperties();}  }
class C{  public static File toFile(URL url){  if (url == null || !"file".equalsIgnoreCase(url.getProtocol())) {    return null;  } else {    String filename=url.getFile().replace('/',File.separatorChar);    filename=decodeUrl(filename);    return new File(filename);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:29.148 -0500",hash_original_method="9F2302B948E2DACBF43BEB44AB6E1806",hash_generated_method="50FA3A9A4962DBECF2BDBFD829E818F4") public RouteTracker(HttpRoute route){  this(route.getTargetHost(),route.getLocalAddress());}  }
class C{  private Document parseAlternativeSnapshot(final DigestURL location,final String mimeType,final String documentCharset,final VocabularyScraper vocscraper,final int timezoneOffset){  Document documentSnapshot=null;  try {    final DigestURL locationSnapshot;    if (location.getRef() != null && !location.getRef().isEmpty() && location.getRef().startsWith("!")) {      if (location.getSearchpart().isEmpty()) {        locationSnapshot=new DigestURL(location.toNormalform(true) + "?_escaped_fragment_=" + MultiProtocolURL.escape(location.getRef().substring(1)));      } else {        locationSnapshot=new DigestURL(location.toNormalform(true) + "&_escaped_fragment_=" + MultiProtocolURL.escape(location.getRef().substring(1)).toString());      }    } else {      locationSnapshot=new DigestURL(location.toNormalform(true) + "?_escaped_fragment_=");    }    Charset[] detectedcharsetcontainer=new Charset[]{null};    ContentScraper scraperSnapshot=parseToScraper(location,documentCharset,vocscraper,detectedcharsetcontainer,timezoneOffset,locationSnapshot.getInputStream(ClientIdentification.yacyInternetCrawlerAgent,null,null),maxLinks);    documentSnapshot=transformScraper(location,mimeType,detectedcharsetcontainer[0].name(),scraperSnapshot);    AbstractParser.log.info("parse snapshot " + locationSnapshot.toString() + " additional to "+ location.toString());  } catch (  IOException|Failure ex) {  }  return documentSnapshot;}  }
class C{  public static void waitForSeconds(final int seconds){  try {    Thread.sleep(seconds * 1000);  } catch (  InterruptedException ignore) {  }}  }
class C{  private void updateInternalVolumes(){  DbClient dbClient=getDbClient();  List<URI> volumeURIs=dbClient.queryByType(Volume.class,false);  Iterator<Volume> volumes=dbClient.queryIterativeObjects(Volume.class,volumeURIs);  while (volumes.hasNext()) {    Volume volume=volumes.next();    log.debug("Examining volume (id={}) for upgrade",volume.getId().toString());    StringSet associatedVolumeIds=volume.getAssociatedVolumes();    if ((associatedVolumeIds != null) && (!associatedVolumeIds.isEmpty())) {      log.info("Backend volumes for VPLEX volume (id={}) must be upgraded",volume.getId().toString());      handleVPlexAssociatedVolumes(associatedVolumeIds);      continue;    }    if (volume.getPersonality() != null && volume.getPersonality().equals(Volume.PersonalityTypes.METADATA.toString())) {      log.info("RecoverPoint Journal volume (id={}) must be upgraded",volume.getId().toString());      volume.addInternalFlags(Flag.INTERNAL_OBJECT);      volume.addInternalFlags(Flag.SUPPORTS_FORCE);      dbClient.persistObject(volume);      log.info("Marked RecoverPoint Journal volume (id={}) as internal object that supports force",volume.getId().toString());    }  }}  }
class C{  public boolean intersects(final S1Interval y){  if (isEmpty() || y.isEmpty()) {    return false;  }  if (isInverted()) {    return y.isInverted() || y.lo() <= hi() || y.hi() >= lo();  } else {    if (y.isInverted()) {      return y.lo() <= hi() || y.hi() >= lo();    }    return y.lo() <= hi() && y.hi() >= lo();  }}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  try {    SerializationHandler rth=transformer.getResultTreeHandler();    if (m_disableOutputEscaping) {      rth.processingInstruction(javax.xml.transform.Result.PI_DISABLE_OUTPUT_ESCAPING,"");    }    rth.characters(m_ch,0,m_ch.length);    if (m_disableOutputEscaping) {      rth.processingInstruction(javax.xml.transform.Result.PI_ENABLE_OUTPUT_ESCAPING,"");    }  } catch (  SAXException se) {    throw new TransformerException(se);  }}  }
class C{  public Class<?> materializeRawType(MapperConfig<?> config,AnnotatedClass typeDef){  final JavaType type=typeDef.getType();  Class<?> rawType=type.getRawClass();  String newName=_defaultPackage + rawType.getName();  BeanBuilder builder=BeanBuilder.construct(config,type,typeDef);  byte[] bytecode=builder.implement(isEnabled(Feature.FAIL_ON_UNMATERIALIZED_METHOD)).build(newName);  return _classLoader.loadAndResolve(newName,bytecode,rawType);}  }
class C{  public void removeZoomListener(ZoomListener listener){}  }
class C{  public DimensionalConfigurationSchema(List<Key> keys,List<Value> values,List<TimeBucket> timeBuckets,List<DimensionsCombination> dimensionsCombinations,AggregatorRegistry aggregatorRegistry){  setAggregatorRegistry(aggregatorRegistry);  initialize(keys,values,timeBuckets,dimensionsCombinations);}  }
class C{  public String group(int group){  int start=start(group);  int end=end(group);  if (start < 0 && end < 0) {    return null;  }  return substring(start,end);}  }
class C{  protected void listen(int backlog) throws IOException {  throw new UnsupportedOperationException("Not supported yet.");}  }
class C{  double crossProduct(Vertex v){  return (p.x * v.getY() - p.y * v.getX());}  }
class C{  public ArrayList<DHCPBinding> cleanExpiredLeases(){  ArrayList<DHCPBinding> newAvailableLeases=new ArrayList<DHCPBinding>();  for (  DHCPBinding binding : DHCP_POOL) {    if (binding.isLeaseExpired() && binding.isActiveLease()) {      this.cancelLeaseOfIPv4(binding.getIPv4Address());      this.setPoolAvailability(this.getPoolAvailability() + 1);      this.setPoolFull(false);      newAvailableLeases.add(binding);    }  }  return newAvailableLeases;}  }
class C{  protected AbstractOperation(){}  }
class C{  public TemporalInstantRfc3339(final int year,final int month,final int day,final int hour,final int minute,final int second){  dateTime=new DateTime(year,month,day,hour,minute,second,DateTimeZone.UTC);}  }
class C{  @Override public void close() throws IOException {  eos=true;  super.close();}  }
class C{  protected void lexError(int pos,String key,Object... args){  log.error(pos,key,args);  tk=TokenKind.ERROR;  errPos=pos;}  }
class C{  @Override public boolean hasNext(){  return !((endIndex == 0) || (lengthK > lengthN));}  }
class C{  private void applyChanges(){  region.setFill(new RadialGradient(0,0,region.getWidth() / 2,region.getHeight() / 2,radius,false,CycleMethod.NO_CYCLE,new Stop(0,Color.TRANSPARENT),new Stop(1,Color.color(color.getRed(),color.getGreen(),color.getBlue(),intensity))));}  }
class C{  @Override public <T extends DataObject>Iterator<T> find(Class<T> clazz,String field,Object... value) throws DatabaseException {  return join(clazz,"one",field,value).go().iterator("one");}  }
class C{  protected Vec4 computePoint(DrawContext dc,LatLon location){  double elevation=(location instanceof Position) ? ((Position)location).getElevation() : 0;  if (this.getAltitudeMode() == WorldWind.CLAMP_TO_GROUND)   return dc.computeTerrainPoint(location.getLatitude(),location.getLongitude(),0d); else   if (this.getAltitudeMode() == WorldWind.RELATIVE_TO_GROUND)   return dc.computeTerrainPoint(location.getLatitude(),location.getLongitude(),elevation);  double height=elevation * dc.getVerticalExaggeration();  return dc.getGlobe().computePointFromPosition(location.getLatitude(),location.getLongitude(),height);}  }
class C{  protected boolean updateAttachmentPoint(){  boolean moved=false;  this.oldAPs=attachmentPoints;  if (attachmentPoints == null || attachmentPoints.isEmpty())   return false;  List<AttachmentPoint> apList=new ArrayList<AttachmentPoint>();  if (attachmentPoints != null)   apList.addAll(attachmentPoints);  Map<DatapathId,AttachmentPoint> newMap=getAPMap(apList);  if (newMap == null || newMap.size() != apList.size()) {    moved=true;  }  if (moved) {    log.info("updateAttachmentPoint: ap {}  newmap {} ",attachmentPoints,newMap);    List<AttachmentPoint> newAPList=new ArrayList<AttachmentPoint>();    if (newMap != null)     newAPList.addAll(newMap.values());    this.attachmentPoints=newAPList;  }  return moved;}  }
class C{  @Override public void mouseExited(final MouseEvent e){  if (unitsChanged(null)) {    final MouseDetails md=convert(e);    currentUnits=null;    notifyMouseEnterUnit(Collections.emptyList(),getTerritory(e.getX(),e.getY()),md);  }}  }
class C{  public IdentityHashMap(int expectedMaxSize){  if (expectedMaxSize < 0)   throw new IllegalArgumentException("expectedMaxSize is negative: " + expectedMaxSize);  init(capacity(expectedMaxSize));}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_browser);  ButterKnife.inject(this);  getIntentParams();  initViews();}  }
class C{  public static void main(String[] args){  TestReturnTag tester=new TestReturnTag();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public void closing(int tenant){  starting(Operation.CLOSE,tenant);}  }
class C{  public GridifyRangeArgument createTaskArgument(Class<?> mtdCls,String mtdName,Class<?> mtdReturnType,Class<?>[] mtdTypes,Annotation[][] mtdParamAnns,Object[] mtdParams,Object mtdTarget){  GridifyRangeArgument arg=new GridifyRangeArgument();  arg.setMethodClass(mtdCls);  arg.setMethodName(mtdName);  arg.setMethodReturnType(mtdReturnType);  arg.setMethodParameterTypes(mtdTypes);  arg.setMethodParameters(mtdParams);  arg.setTarget(mtdTarget);  arg.setParamIndex(findMethodParameterIndex(mtdName,mtdTypes,mtdParamAnns));  return arg;}  }
class C{  public ImageException(Reason reason){  super();  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.name());}  }
class C{  @Override public void stopMonitoring(){synchronized (this) {    if (!this.started) {      return;    }    this.resourceManager.stopExecutor(this.pollerExecutor);    NotificationEmitter emitter=(NotificationEmitter)ManagementFactory.getMemoryMXBean();    try {      emitter.removeNotificationListener(this,null,null);      this.cache.getLoggerI18n().fine("Removed Memory MXBean notification listener" + this);    } catch (    ListenerNotFoundException e) {      this.cache.getLoggerI18n().fine("This instance '" + toString() + "' was not registered as a Memory MXBean listener");    }    final GemFireStatSampler sampler=this.cache.getDistributedSystem().getStatSampler();    if (sampler != null) {      sampler.removeLocalStatListener(this.statListener);    }    this.started=false;  }}  }
class C{  protected EntityItemMetaBuilder(final EntityItemMeta meta){  this.meta=meta.clone();}  }
class C{  @Override public String toString(){  return super.toString();}  }
class C{  private CInlinedNodes(final INaviCodeNode startNode,final INaviCodeNode endNode,final ImmutableList<INaviViewNode> inlinedNodes){  m_startNode=Preconditions.checkNotNull(startNode,"IE02752: startNode argument can not be null");  m_endNode=Preconditions.checkNotNull(endNode,"IE02753: endNode argument can not be null");  m_inlinedNodes=Preconditions.checkNotNull(inlinedNodes,"IE02754: inlinedNodes argument can not be null");}  }
class C{  public void testTakeLast() throws InterruptedException {  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(SIZE - i - 1,q.takeLast());  }}  }
class C{  public void removeAttribute(String name){  int i=names.indexOf(name);  if (i != -1) {    names.remove(i);    types.remove(i);    values.remove(i);  }}  }
class C{  public void substringMB() throws IOException {  writeCode(MB_STRING_EXTRACT);}  }
class C{  public X86AbsoluteAddress(long segment,long disp){  super(disp);  this.segment=segment;}  }
class C{  public MBeanProcessController(final MBeanControllerParameters arguments,final int pid){  if (pid < 1) {    throw new IllegalArgumentException("Invalid pid '" + pid + "' specified");  }  this.pid=pid;  this.arguments=arguments;}  }
class C{  private void postInitWithAlgorithm(String algorithm){  this.algorithm=algorithm;  if (algorithm != null && !isEncrypted(value)) {    setValue(encrypt(algorithm,value));  }}  }
class C{  public SWFShape tagDefineShape(int id,Rect outline) throws IOException {  startShape(TAG_DEFINESHAPE,id,outline);  return factorySWFShape(false,true);}  }
class C{  public static SourceLineAnnotation forFirstLineOfMethod(MethodDescriptor methodDescriptor){  SourceLineAnnotation result=null;  try {    Method m=Global.getAnalysisCache().getMethodAnalysis(Method.class,methodDescriptor);    XClass xclass=Global.getAnalysisCache().getClassAnalysis(XClass.class,methodDescriptor.getClassDescriptor());    LineNumberTable lnt=m.getLineNumberTable();    String sourceFile=xclass.getSource();    if (sourceFile != null && lnt != null) {      int firstLine=Integer.MAX_VALUE;      int bytecode=0;      LineNumber[] entries=lnt.getLineNumberTable();      for (      LineNumber entry : entries) {        if (entry.getLineNumber() < firstLine) {          firstLine=entry.getLineNumber();          bytecode=entry.getStartPC();        }      }      if (firstLine < Integer.MAX_VALUE) {        result=new SourceLineAnnotation(methodDescriptor.getClassDescriptor().toDottedClassName(),sourceFile,firstLine,firstLine,bytecode,bytecode);      }    }  } catch (  CheckedAnalysisException e) {  }  if (result == null) {    result=createUnknown(methodDescriptor.getClassDescriptor().toDottedClassName());  }  return result;}  }
class C{  public void addTasks(List<Task> tasks){  myTasks.addAll(tasks);}  }
class C{  @DSModeled(DSC.SAFE) public void cancel(){}  }
class C{  private boolean isClusterInUse(Cluster cluster){  List<Host> hosts=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,Host.class,ContainmentConstraint.Factory.getContainedObjectsConstraint(cluster.getId(),Host.class,"cluster"));  for (  Host host : hosts) {    if (ComputeSystemHelper.isHostInUse(_dbClient,host.getId())) {      return true;    }  }  return false;}  }
class C{  protected int calculateTabWidth(int tabPlacement,int tabIndex,FontMetrics metrics){  boolean calculate=!(tabPlacement == TOP || tabPlacement == BOTTOM);  if (getTextViewForTab(tabIndex) != null)   calculate=false;  String title=tabPane.getTitleAt(tabIndex);  int pos=title.indexOf(' ');  if (calculate && pos == -1)   calculate=false;  if (!calculate)   return super.calculateTabWidth(tabPlacement,tabIndex,metrics);  Icon icon=getIconForTab(tabIndex);  Insets tabInsetsLocal=getTabInsets(tabPlacement,tabIndex);  int width=tabInsetsLocal.left + tabInsetsLocal.right + 3;  if (icon != null)   width+=icon.getIconWidth() + textIconGap;  String firstLine=title.substring(0,pos);  String secondLine=title.substring(pos + 1);  width+=Math.max(SwingUtilities.computeStringWidth(metrics,firstLine),SwingUtilities.computeStringWidth(metrics,secondLine));  return width;}  }
class C{  public com.emc.storageos.vasa.VasaServiceStub.QueryCatalogResponse queryCatalog() throws java.rmi.RemoteException, com.emc.storageos.vasa.InvalidSession, com.emc.storageos.vasa.StorageFault {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[16].getName());    _operationClient.getOptions().setAction("urn:queryCatalog");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    org.apache.axiom.soap.SOAPFactory factory=getFactory(_operationClient.getOptions().getSoapVersionURI());    env=factory.getDefaultEnvelope();    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),com.emc.storageos.vasa.VasaServiceStub.QueryCatalogResponse.class,getEnvelopeNamespaces(_returnEnv));    return (com.emc.storageos.vasa.VasaServiceStub.QueryCatalogResponse)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          if (ex instanceof com.emc.storageos.vasa.InvalidSession) {            throw (com.emc.storageos.vasa.InvalidSession)ex;          }          if (ex instanceof com.emc.storageos.vasa.StorageFault) {            throw (com.emc.storageos.vasa.StorageFault)ex;          }          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  protected boolean isDefaultDeserializer(JsonDeserializer<?> deser){  return ClassUtil.isJacksonStdImpl(deser);}  }
class C{  protected ChangeLookAndFeelAction(SwingSet2 swingset,String laf){  super("ChangeTheme");  this.swingset=swingset;  this.laf=laf;}  }
class C{  public static byte[] convertDsaASN1toXMLDSIG(byte[] asn1Bytes,int size) throws IOException {  if (asn1Bytes[0] != 48 || asn1Bytes[1] != asn1Bytes.length - 2 || asn1Bytes[2] != 2) {    throw new IOException("Invalid ASN.1 format of DSA signature");  }  byte rLength=asn1Bytes[3];  int i;  for (i=rLength; i > 0 && asn1Bytes[4 + rLength - i] == 0; i--)   ;  byte sLength=asn1Bytes[5 + rLength];  int j;  for (j=sLength; j > 0 && asn1Bytes[6 + rLength + sLength - j] == 0; j--)   ;  if (i > size || asn1Bytes[4 + rLength] != 2 || j > size) {    throw new IOException("Invalid ASN.1 format of DSA signature");  } else {    byte[] xmldsigBytes=new byte[size * 2];    System.arraycopy(asn1Bytes,4 + rLength - i,xmldsigBytes,size - i,i);    System.arraycopy(asn1Bytes,6 + rLength + sLength - j,xmldsigBytes,size * 2 - j,j);    return xmldsigBytes;  }}  }
class C{  public static void waitForIdle(SWTBot bot){  SwtBotUtils.print("\t\tWaiting for idle");  while (!Job.getJobManager().isIdle()) {    bot.sleep(500);  }  SwtBotUtils.print("\t\tNow idle");}  }
class C{  @Override protected List refreshTicksVertical(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){  List ticks=new java.util.ArrayList();  double lowerBoundVal=getRange().getLowerBound();  if (this.smallLogFlag && lowerBoundVal < SMALL_LOG_VALUE) {    lowerBoundVal=SMALL_LOG_VALUE;  }  double upperBoundVal=getRange().getUpperBound();  int iBegCount=(int)Math.rint(switchedLog10(lowerBoundVal));  int iEndCount=(int)Math.rint(switchedLog10(upperBoundVal));  if (iBegCount == iEndCount && iBegCount > 0 && Math.pow(10,iBegCount) > lowerBoundVal) {    --iBegCount;  }  double tickVal;  String tickLabel;  boolean zeroTickFlag=false;  for (int i=iBegCount; i <= iEndCount; i++) {    int jEndCount=10;    if (i == iEndCount) {      jEndCount=1;    }    for (int j=0; j < jEndCount; j++) {      if (this.smallLogFlag) {        tickVal=Math.pow(10,i) + (Math.pow(10,i) * j);        if (j == 0) {          if (this.log10TickLabelsFlag) {            tickLabel="10^" + i;          } else {            if (this.expTickLabelsFlag) {              tickLabel="1e" + i;            } else {              if (i >= 0) {                NumberFormat format=getNumberFormatOverride();                if (format != null) {                  tickLabel=format.format(tickVal);                } else {                  tickLabel=Long.toString((long)Math.rint(tickVal));                }              } else {                this.numberFormatterObj.setMaximumFractionDigits(-i);                tickLabel=this.numberFormatterObj.format(tickVal);              }            }          }        } else {          tickLabel="";        }      } else {        if (zeroTickFlag) {          --j;        }        tickVal=(i >= 0) ? Math.pow(10,i) + (Math.pow(10,i) * j) : -(Math.pow(10,-i) - (Math.pow(10,-i - 1) * j));        if (j == 0) {          if (!zeroTickFlag) {            if (i > iBegCount && i < iEndCount && Math.abs(tickVal - 1.0) < 0.0001) {              tickVal=0.0;              zeroTickFlag=true;              tickLabel="0";            } else {              if (this.log10TickLabelsFlag) {                tickLabel=(((i < 0) ? "-" : "") + "10^" + Math.abs(i));              } else {                if (this.expTickLabelsFlag) {                  tickLabel=(((i < 0) ? "-" : "") + "1e" + Math.abs(i));                } else {                  NumberFormat format=getNumberFormatOverride();                  if (format != null) {                    tickLabel=format.format(tickVal);                  } else {                    tickLabel=Long.toString((long)Math.rint(tickVal));                  }                }              }            }          } else {            tickLabel="";            zeroTickFlag=false;          }        } else {          tickLabel="";          zeroTickFlag=false;        }      }      if (tickVal > upperBoundVal) {        return ticks;      }      if (tickVal >= lowerBoundVal - SMALL_LOG_VALUE) {        TextAnchor anchor;        TextAnchor rotationAnchor;        double angle=0.0;        if (isVerticalTickLabels()) {          if (edge == RectangleEdge.LEFT) {            anchor=TextAnchor.BOTTOM_CENTER;            rotationAnchor=TextAnchor.BOTTOM_CENTER;            angle=-Math.PI / 2.0;          } else {            anchor=TextAnchor.BOTTOM_CENTER;            rotationAnchor=TextAnchor.BOTTOM_CENTER;            angle=Math.PI / 2.0;          }        } else {          if (edge == RectangleEdge.LEFT) {            anchor=TextAnchor.CENTER_RIGHT;            rotationAnchor=TextAnchor.CENTER_RIGHT;          } else {            anchor=TextAnchor.CENTER_LEFT;            rotationAnchor=TextAnchor.CENTER_LEFT;          }        }        ticks.add(new NumberTick(new Double(tickVal),tickLabel,anchor,rotationAnchor,angle));      }    }  }  return ticks;}  }
class C{  @Override protected void initListeners(){}  }
class C{  public boolean isProtected(){  return Modifier.isProtected(_method.getModifiers());}  }
class C{  public void individualsBredStatistics(SteadyStateEvolutionState state,Individual[] individuals){  for (int x=0; x < children.length; x++)   if (children[x] instanceof SteadyStateStatisticsForm)   ((SteadyStateStatisticsForm)children[x]).individualsBredStatistics(state,individuals);}  }
class C{  @Override public void hideSuggestions(){  searchEditText.setAdapter(null);  searchEditText.dismissDropDown();}  }
class C{  protected void forwardCommandChangeToLayout(int newState){  if ((newState & Turnout.CLOSED) != 0) {    if ((newState & Turnout.THROWN) != 0) {      log.error("Cannot command both CLOSED and THROWN: " + newState);      return;    } else {      sendMessage(true);    }  } else {    sendMessage(false);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:48.312 -0500",hash_original_method="8D1EDF001F7865BC335C47DEAA91DF87",hash_generated_method="E14DDB94C15002F5A3CE15B1428EB074") public void parse(InputSource input) throws IOException, SAXException {  if (parsing) {    throw new SAXException("Parser is already in use");  }  setupParser();  parsing=true;  try {    parser.parse(input);  }  finally {    parsing=false;  }  parsing=false;}  }
class C{  private void dropIntMultTbl(DbConnection dbConn) throws Exception {  String tableName;  if (_logger.isDebugEnabled())   _logger.debug("dropIntMultTbl");  try {    tableName=DaoUtil.getMultFldTblName(_tblPrefix,DbDataType.SHORT_INTEGER);    DbTableFns.dropTable(dbConn,tableName);  } catch (  Exception e) {    _logger.error(e);    throw e;  }}  }
class C{  public void startEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  public void relabelSample(final String originalName,final String newName){  for (  final Map.Entry<String,String> e : mSamples.entrySet()) {    if (e.getValue().equals(originalName)) {      e.setValue(newName);    }  }}  }
class C{  public FastDoubleBuffer(int size){  if (size < 0) {    throw new IllegalArgumentException("Invalid size: " + size);  }  this.minChunkLen=size;}  }
class C{  @Deprecated public boolean updateThumbRoot(String movieDir){  return false;}  }
class C{  protected void appendSummary(StringBuffer buffer,String fieldName,boolean[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  static void validateRefreshTimer(){  if (refreshTimerObjectName == null || refreshTimer == null) {    createRefreshTimer();  }  raiseOnFailure(refreshTimer != null,"Failed to validate Refresh Timer");  if (mbeanServer != null && !mbeanServer.isRegistered(refreshTimerObjectName)) {    try {      mbeanServer.registerMBean(refreshTimer,refreshTimerObjectName);    } catch (    JMException e) {      logStackTrace(Level.WARN,e);    }catch (    JMRuntimeException e) {      logStackTrace(Level.WARN,e);    }  }}  }
class C{  public DefaultIoFilterChainBuilder(){  entries=new CopyOnWriteArrayList<Entry>();}  }
class C{  public Matrix4d m30(double m30){  this.m30=m30;  properties&=~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE);  return this;}  }
class C{  WrappedByteBuffer expand(int expectedRemaining){  return expandAt(_buf.position(),expectedRemaining);}  }
class C{  public void dumpNPCs(DBTransaction transaction) throws SQLException {  long start=System.currentTimeMillis();  transaction.execute("DELETE FROM npcs",null);  PreparedStatement stmt=transaction.prepareStatement("INSERT INTO npcs " + "(name, title, class, outfit, hp, base_hp, zone, x, y, level, description, job, image)" + " VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);",null);  for (  SpeakerNPC npc : SingletonRepository.getNPCList()) {    dumpNPC(stmt,npc);  }  stmt.executeBatch();  logger.debug("Completed dumping of NPCs in " + (System.currentTimeMillis() - start) + " milliseconds.");}  }
class C{  private void endTask(){synchronized (lock) {    int numRunning=--runningTasks;    if (numRunning == 0) {      lock.notifyAll();    }  }}  }
class C{  public void onItemPinned(int position){  final DialogFragment dialog=ItemPinnedMessageDialogFragment.newInstance(position);  getSupportFragmentManager().beginTransaction().add(dialog,FRAGMENT_TAG_ITEM_PINNED_DIALOG).commit();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.PROPERTY_METHOD_DECLARATION;}  }
class C{  public void doTestControlTransferOp(Consumer<Label> opCreator,int minDisp,int maxDisp){  Label lBack=new Label();  Label lForward=new Label();  masm.bind(lBack);  for (int i=0; i < -minDisp; i++) {    masm.nop();  }  int backPos=masm.position();  opCreator.accept(lBack);  masm.nop();  int forwardPos=masm.position();  opCreator.accept(lForward);  for (int i=0; i < maxDisp - 1; i++) {    masm.nop();  }  masm.bind(lForward);  int condBack=masm.getInt(backPos);  SPARCOp backOp=SPARCAssembler.getSPARCOp(condBack);  int dispBack=((ControlTransferOp)backOp).getDisp(condBack);  Assert.assertEquals(minDisp,dispBack);  int condFwd=masm.getInt(forwardPos);  SPARCOp fwdOp=SPARCAssembler.getSPARCOp(condFwd);  int dispFwd=((ControlTransferOp)fwdOp).getDisp(condFwd);  Assert.assertEquals(maxDisp,dispFwd);}  }
class C{  public static RenameParticipant[] loadRenameParticipants(RefactoringStatus status,RefactoringProcessor processor,Object element,RenameArguments arguments,IParticipantDescriptorFilter filter,String[] affectedNatures,SharableParticipants shared){  RefactoringParticipant[] participants=fgRenameInstance.getParticipants(status,processor,element,arguments,filter,affectedNatures,shared);  RenameParticipant[] result=new RenameParticipant[participants.length];  System.arraycopy(participants,0,result,0,participants.length);  return result;}  }
class C{  public static Point screenToLayer(Layer layer,float x,float y){  Point into=new Point(x,y);  return screenToLayer(layer,into,into);}  }
class C{  @Pure public static int JBC_length(int bc){  return _JBC_length[bc];}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return KEY;case 2:  return VALUES;default :return null;}}  }
class C{  public void put(String key,Short value){  mValues.put(key,value);}  }
class C{  @Deprecated public Resolution forwardTo(String page){  return new ForwardResolution(page);}  }
class C{  public void fullyDownloadStorage(StorageData storageData,CmrRepositoryDefinition cmrRepositoryDefinition,boolean compressBefore,SubMonitor subMonitor) throws BusinessException, IOException, SerializationException {  LocalStorageData localStorageData=null;  for (  LocalStorageData lsd : mountedAvailableStorages.keySet()) {    if (ObjectUtils.equals(lsd.getId(),storageData.getId())) {      localStorageData=lsd;      break;    }  }  if (null == localStorageData) {    mountStorage(storageData,cmrRepositoryDefinition,true,compressBefore,subMonitor);    return;  }  if (localStorageData.isFullyDownloaded()) {    throw new BusinessException("Download the storage " + storageData + ".",StorageErrorCodeEnum.STORAGE_ALREADY_DOWNLOADED);  }  Path directory=getStoragePath(localStorageData);  subMonitor.setTaskName("Downloading storage data files for storage '" + storageData.getName() + "'..");  dataRetriever.downloadAndSaveStorageFiles(cmrRepositoryDefinition,storageData,directory,compressBefore,true,subMonitor,StorageFileType.DATA_FILE,StorageFileType.CACHED_DATA_FILE);  downloadedStorages.add(localStorageData);  localStorageData.setFullyDownloaded(true);  writeLocalStorageDataToDisk(localStorageData);}  }
class C{  public JarIndex(){  indexMap=new HashMap<>();  jarMap=new HashMap<>();}  }
class C{  @Override public void draw(@NonNull Canvas canvas){  pruneRipples();  final Rect bounds=getDirtyBounds();  final int saveCount=canvas.save(Canvas.CLIP_SAVE_FLAG);  canvas.clipRect(bounds);  drawContent(canvas);  drawBackgroundAndRipples(canvas);  canvas.restoreToCount(saveCount);}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public SoftwareToken(TokenInfo tokenInfo,SoftwareTokenType tokenType){  super(tokenInfo);  this.tokenType=tokenType;}  }
class C{  public void onHttpTransferResumed(){}  }
class C{  private void jbInit() throws Exception {  panel.setLayout(mainLayout);  lClient.setText(Msg.translate(Env.getCtx(),"AD_Client_ID"));  lLanguage.setText(Msg.translate(Env.getCtx(),"AD_Language"));  lLanguage.setToolTipText(Msg.translate(Env.getCtx(),"IsSystemLanguage"));  lTable.setText(Msg.translate(Env.getCtx(),"AD_Table_ID"));  bExport.setText(Msg.getMsg(Env.getCtx(),"Export"));  bExport.addActionListener(this);  bImport.setText(Msg.getMsg(Env.getCtx(),"Import"));  bImport.addActionListener(this);  panel.add(cbLanguage,new GridBagConstraints(1,1,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,5,5),0,0));  panel.add(lLanguage,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  panel.add(lTable,new GridBagConstraints(0,2,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  panel.add(cbTable,new GridBagConstraints(1,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,5,5),0,0));  panel.add(bExport,new GridBagConstraints(0,3,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  panel.add(bImport,new GridBagConstraints(1,3,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  panel.add(lClient,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  panel.add(cbClient,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,5,5),0,0));}  }
class C{  public boolean hasClientExt(){  return hasExtension(GphotoClient.class);}  }
class C{  public Scroller(Context context){  this(context,null);}  }
class C{  public static void writeListingEntry(DataOutput out,@Nullable IgfsListingEntry entry) throws IOException {  if (entry != null) {    out.writeBoolean(true);    IgniteUtils.writeGridUuid(out,entry.fileId());    out.writeBoolean(entry.isDirectory());  } else   out.writeBoolean(false);}  }
class C{  public NeuronLayer(Network net,List<Neuron> neurons,LayerType type){  super(net,neurons);  this.type=type;  setLabel(type.name() + " Layer");}  }
class C{  public static SignerInformation replaceUnsignedAttributes(SignerInformation signerInformation,AttributeTable unsignedAttributes){  SignerInfo sInfo=signerInformation.info;  ASN1Set unsignedAttr=null;  if (unsignedAttributes != null) {    unsignedAttr=new DERSet(unsignedAttributes.toASN1EncodableVector());  }  return new SignerInformation(new SignerInfo(sInfo.getSID(),sInfo.getDigestAlgorithm(),sInfo.getAuthenticatedAttributes(),sInfo.getDigestEncryptionAlgorithm(),sInfo.getEncryptedDigest(),unsignedAttr),signerInformation.contentType,signerInformation.content,null);}  }
class C{  public static boolean isWeak(byte[] key,int offset) throws InvalidKeyException {  if (key == null) {    throw new InvalidKeyException("null key");  }  if (key.length - offset < DES_KEY_LEN) {    throw new InvalidKeyException("Wrong key size");  }  for (int i=0; i < WEAK_KEYS.length; i++) {    boolean found=true;    for (int j=0; j < DES_KEY_LEN && found == true; j++) {      if (WEAK_KEYS[i][j] != key[j + offset]) {        found=false;      }    }    if (found == true) {      return found;    }  }  return false;}  }
class C{  public T remove(T value){  return this.remove(value.getX(),value.getY(),value.getZ());}  }
class C{  public static Scenario loadScenarioFromPlansAndConfig(String plansFile,String configFile){  Config config=new Config();  config.addCoreModules();  ConfigReader configReader=new ConfigReader(config);  configReader.readFile(configFile);  config.plans().setInputFile(plansFile);  config.plans().setInputPersonAttributeFile(null);  config.network().setInputFile(null);  Scenario scenario=ScenarioUtils.loadScenario(config);  return scenario;}  }
class C{  @Override public boolean containsAll(@NotNull Collection<?> c){  Object[] elements=array;  int len=elements.length;  for (  Object e : c) {    if (indexOf(e,elements,0,len) < 0) {      return false;    }  }  return true;}  }
class C{  public static boolean equalOrContain(String s1,String s2,boolean contain){  return contain ? s1.contains(s2) : s1.equals(s2);}  }
class C{  @Override public boolean addAll(Collection<? extends T> elements){  for (  T element : elements) {    add(element);  }  return true;}  }
class C{  public static void main(final String[] args){  new XY2Links().run(args);}  }
class C{  private void resetVerticalAnimation(View view,boolean toTop){  if (!mIsMenuOpen) {    ViewHelper.setRotation(view,0);    ViewHelper.setRotationY(view,0);    ViewHelper.setRotationX(view,-90);  }  ViewHelper.setPivotX(view,mMenuItemSize / 2);  ViewHelper.setPivotY(view,!toTop ? 0 : mMenuItemSize);}  }
class C{  private static void renderClearHiddenParamsJavaScript(FacesContext ctx,ResponseWriter writer,Map formParams,String formTarget,String formName) throws IOException {  writer.write("\n");  writer.startElement(SCRIPT_ELEMENT,null);  writer.writeAttribute(SCRIPT_TYPE,"text/javascript",null);  writer.write("\n<!--");  writer.write("\nfunction ");  String functionName=(CLEAR_HIDDEN_FIELD_FN_NAME + "_" + formName.replace(UINamingContainer.getSeparatorChar(ctx),'_'));  writer.write(functionName);  writer.write("(curFormName) {");  writer.write("\n  var curForm = document.forms[curFormName];");  if (formParams != null) {    Iterator entries=formParams.entrySet().iterator();    while (entries.hasNext()) {      Map.Entry entry=(Map.Entry)entries.next();      if (Boolean.TRUE.equals(entry.getValue())) {        writer.write("\n curForm.elements['");        writer.write((String)entry.getKey());        writer.write("'].value = null;");      }    }  }  if (formTarget != null && formTarget.length() > 0) {    writer.write("\n  curForm.target=");    writer.write("'");    writer.write(formTarget);    writer.write("';");  }  writer.write("\n}");  writer.write("\n//-->\n");  writer.endElement(SCRIPT_ELEMENT);  writer.write("\n");}  }
class C{  @SuppressWarnings("unchecked") public static <T>Predicate<T> alwaysTrue(){  return (Predicate<T>)TRUE;}  }
class C{  protected static String escapeMultilineQuotes(String quoteVariant,String value){  if ("'''".equals(quoteVariant) || "\"\"\"".equals(quoteVariant)) {    return value.replace(quoteVariant,new String(new char[3]).replace("\0","\\" + quoteVariant.charAt(0)));  } else {    throw new IllegalArgumentException("Only a valid Turtle multi-line quote delmiter is allowed.");  }}  }
class C{  public static float buildFloat(int mant,int exp){  if (exp < -125 || mant == 0) {    return 0.0f;  }  if (exp >= 128) {    return (mant > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;  }  if (exp == 0) {    return mant;  }  if (mant >= (1 << 26)) {    mant++;  }  return (float)((exp > 0) ? mant * pow10[exp] : mant / pow10[-exp]);}  }
class C{  public final void removeModelListener(final VisionWorldModelListener listener){  listenerList.remove(VisionWorldModelListener.class,listener);}  }
class C{  public static int countNumberOfMethodCalls(TestCase test,Class<?> klass,String methodName) throws IllegalArgumentException {  Inputs.checkNull(test,klass);  int counter=0;  for (int i=0; i < test.size(); i++) {    Statement st=test.getStatement(i);    if (st instanceof MethodStatement) {      MethodStatement ms=(MethodStatement)st;      GenericMethod gm=ms.getMethod();      if (gm.getDeclaringClass().equals(klass) && gm.getName().equals(methodName)) {        counter++;      }    }  }  return counter;}  }
class C{  @SuppressWarnings("unchecked") public void deserialize(final InputStream stream,final Collection<? extends String> exclude) throws IOException {  Map<String,byte[]> entries=new HashMap<String,byte[]>();  ByteArrayOutputStream bytes=new ByteArrayOutputStream();  byte[] buffer=new byte[BUFFER_SIZE];  for (int read; (read=stream.read(buffer)) >= 0; ) {    bytes.write(buffer,0,read);  }  ZipInputStream zip=new ZipInputStream(new ByteArrayInputStream(bytes.toByteArray()));  ArchiveContents contents=null;  WorkspaceComponentDeserializer componentDeserializer=new WorkspaceComponentDeserializer();  ZipEntry entry=zip.getNextEntry();  for (ZipEntry next; entry != null; entry=next) {    next=zip.getNextEntry();    entries.put(entry.getName(),new byte[(int)entry.getSize()]);  }  zip=new ZipInputStream(new ByteArrayInputStream(bytes.toByteArray()));  while ((entry=zip.getNextEntry()) != null) {    byte[] data=entries.get(entry.getName());    read(zip,data);  }  contents=(ArchiveContents)ArchiveContents.xstream().fromXML(new ByteArrayInputStream(entries.get("contents.xml")));  if (contents.getArchivedComponents() != null) {    for (    ArchiveContents.ArchivedComponent archivedComponent : contents.getArchivedComponents()) {      if (exclude.contains(archivedComponent.getUri())) {        continue;      }      WorkspaceComponent wc=componentDeserializer.deserializeWorkspaceComponent(archivedComponent,new ByteArrayInputStream(entries.get(archivedComponent.getUri())));      workspace.addWorkspaceComponent(wc);      if (archivedComponent.getDesktopComponent() != null) {        Rectangle bounds=(Rectangle)new XStream(new DomDriver()).fromXML(new ByteArrayInputStream(entries.get(archivedComponent.getDesktopComponent().getUri())));        GuiComponent<?> desktopComponent=desktop.getDesktopComponent(wc);        desktopComponent.getParentFrame().setBounds(bounds);      }    }  }  if (contents.getArchivedCouplings() != null) {    for (    ArchiveContents.ArchivedCoupling couplingRef : contents.getArchivedCouplings()) {      if (exclude.contains(couplingRef.getArchivedProducer().getParentRef()) || exclude.contains(couplingRef.getArchivedProducer().getParentRef())) {        continue;      }      WorkspaceComponent sourceComponent=componentDeserializer.getComponent(couplingRef.getArchivedProducer().getParentRef());      WorkspaceComponent targetComponent=componentDeserializer.getComponent(couplingRef.getArchivedConsumer().getParentRef());      Producer<?> producer=sourceComponent.getAttributeManager().createProducer(sourceComponent.getObjectFromKey(couplingRef.getArchivedProducer().getBaseObjectKey()),couplingRef.getArchivedProducer().getMethodBaseName(),couplingRef.getArchivedProducer().getDataType(),couplingRef.getArchivedProducer().getArgumentDataTypes(),couplingRef.getArchivedProducer().getArgumentValues(),couplingRef.getArchivedProducer().getDescription());      Class[] argDataTypes=couplingRef.getArchivedConsumer().getArgumentDataTypes();      Consumer<?> consumer=targetComponent.getAttributeManager().createConsumer(targetComponent.getObjectFromKey(couplingRef.getArchivedConsumer().getBaseObjectKey()),couplingRef.getArchivedConsumer().getMethodBaseName(),argDataTypes,couplingRef.getArchivedConsumer().getArgumentValues(),couplingRef.getArchivedConsumer().getDescription());      workspace.addCoupling(new Coupling(producer,consumer));    }  }  workspace.getUpdater().getUpdateManager().clear();  if (contents.getArchivedActions() != null) {    for (    ArchiveContents.ArchivedUpdateAction actionRef : contents.getArchivedActions()) {      workspace.getUpdater().getUpdateManager().addAction(contents.createUpdateAction(workspace,componentDeserializer,actionRef));    }  }  if (contents.getWorkspaceParameters() != null) {    workspace.setUpdateDelay(contents.getWorkspaceParameters().getUpdateDelay());    workspace.getUpdater().setTime(contents.getWorkspaceParameters().getSavedTime());  }}  }
class C{  private void manipulateLicenseResponse(Map<String,String> result){  String responseStatus;  CommonDialogUtils.stopProgressDialog(progressDialog);  if (result != null) {    responseStatus=result.get(Constants.STATUS_KEY);    if (responseStatus.equals(Constants.REQUEST_SUCCESSFUL)) {      String licenseAgreement=result.get(Constants.RESPONSE);      if (licenseAgreement != null) {        Preference.putString(context,getResources().getString(R.string.shared_pref_eula),licenseAgreement);        showAgreement(licenseAgreement,Constants.EULA_TITLE);      } else {        showErrorMessage(getResources().getString(R.string.error_enrollment_failed_detail),getResources().getString(R.string.error_enrollment_failed));      }    } else     if (responseStatus.equals(Constants.INTERNAL_SERVER_ERROR)) {      showInternalServerErrorMessage();    } else {      showEnrollementFailedErrorMessage();    }  } else {    showEnrollementFailedErrorMessage();  }}  }
class C{  public boolean leftDerivesRight(ArrayList<String> lhs,ArrayList<String> rhs){  for (int i=0; i < rules.size(); i++) {    Rule r=rules.get(i);    if (r.lhs.equals(lhs) && r.rhs.equals(rhs)) {      return true;    }  }  return false;}  }
class C{  public static String toBitsSep(final long x){  final StringBuilder sb=new StringBuilder();  long t=x;  for (int i=0; i < Long.SIZE; i++) {    if ((i & 7) == 0 && i > 0) {      sb.append(":");    }    sb.append(t < 0 ? "1" : "0");    t=t << 1;  }  assert t == 0;  return sb.toString();}  }
class C{  public String substringLower(int start){  return substringLower(start,lcText.length - start);}  }
class C{  public static boolean releaseLock(File filename){  File lockFile=new File(filename + ".filelock");  if (!lockFile.exists()) {    try {      final String PID=getPid();      BufferedReader in=null;      in=new BufferedReader(new InputStreamReader(new FileInputStream(lockFile)));      String line=null;      while ((line=in.readLine()) != null) {        line+=line;      }      if (line.contains(PID.trim())) {        lockFile.delete();        return true;      }    } catch (    InterruptedException e) {      e.printStackTrace();    }catch (    FileNotFoundException e) {      e.printStackTrace();    }catch (    IOException e) {      e.printStackTrace();    }  } else {    return false;  }  return false;}  }
class C{  public final boolean sendMessageAtFrontOfQueue(Message msg){  return mExec.sendMessageAtFrontOfQueue(msg);}  }
class C{  @Override public String globalInfo(){  return "Exports a single statistic to a tab-separated file.\n" + "First column are datasets, first row are classifiers.\n" + "Automatically aggregates the statistics and displays the 'mean'.";}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public final double doOperation() throws OperatorFailedException {  int index;  index=MathUtils.nextInt(numberPoints) * 2;  int deltaX=0;  int deltaY=0;  while (deltaX == 0 && deltaY == 0) {    deltaX=MathUtils.nextInt(3) - 1;    deltaY=MathUtils.nextInt(3) - 1;  }  int newX=(int)parameter.getParameterValue(index) + deltaX;  int newY=(int)parameter.getParameterValue(index + 1) + deltaY;  if (map != null) {    if (!map.isValidPoint(newX,newY)) {      throw new OperatorFailedException("proposed value outside boundaries");    }  }  parameter.setParameterValue(index,newX);  parameter.setParameterValue(index + 1,newY);  return 0.0;}  }
class C{  private static void createNodeVsBlockMapping(List<NodeBlockRelation> flattenedList,Map<String,List<Distributable>> nodeAndBlockMapping){  for (  NodeBlockRelation nbr : flattenedList) {    String node=nbr.getNode();    List<Distributable> list;    if (null == nodeAndBlockMapping.get(node)) {      list=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);      list.add(nbr.getBlock());      Collections.sort(list);      nodeAndBlockMapping.put(node,list);    } else {      list=nodeAndBlockMapping.get(node);      list.add(nbr.getBlock());      Collections.sort(list);    }  }}  }
class C{  public static Boolean useGA(Context context){  SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(context);  if (preferences.contains(context.getString(R.string.ga_use_settings))) {    return preferences.getBoolean(context.getString(R.string.ga_use_settings),false);  } else {    try {      boolean allowGA=TextUtils.equals(context.getResources().getString(R.string.allow_ga_use),"true");      if (!allowGA) {        SharedPreferences.Editor editor=preferences.edit();        editor.putBoolean(context.getString(R.string.ga_use_settings),false);        editor.commit();        return false;      }    } catch (    Exception e) {      Log.e(LOG_TAG,"useGA " + e.getLocalizedMessage());    }    return null;  }}  }
class C{  public static Number count(long[] self,Object value){  return count(InvokerHelper.asIterator(self),value);}  }
class C{  private void drawShapes(Graphics gx){  if (m_shapes != null) {    ArrayList<Double> stmp;    int x1, y1, x2, y2;    for (int noa=0; noa < m_shapes.size(); noa++) {      stmp=m_shapes.get(noa);      if (stmp.get(0).intValue() == 1) {        x1=(int)m_plot2D.convertToPanelX(stmp.get(1).doubleValue());        y1=(int)m_plot2D.convertToPanelY(stmp.get(2).doubleValue());        x2=(int)m_plot2D.convertToPanelX(stmp.get(3).doubleValue());        y2=(int)m_plot2D.convertToPanelY(stmp.get(4).doubleValue());        gx.setColor(Color.gray);        gx.fillRect(x1,y1,x2 - x1,y2 - y1);        gx.setColor(Color.black);        gx.drawRect(x1,y1,x2 - x1,y2 - y1);      } else       if (stmp.get(0).intValue() == 2) {        int[] ar1, ar2;        ar1=getXCoords(stmp);        ar2=getYCoords(stmp);        gx.setColor(Color.gray);        gx.fillPolygon(ar1,ar2,(stmp.size() - 1) / 2);        gx.setColor(Color.black);        gx.drawPolyline(ar1,ar2,(stmp.size() - 1) / 2);      } else       if (stmp.get(0).intValue() == 3) {        int[] ar1, ar2;        ArrayList<Double> tmp=makePolygon(stmp);        ar1=getXCoords(tmp);        ar2=getYCoords(tmp);        gx.setColor(Color.gray);        gx.fillPolygon(ar1,ar2,(tmp.size() - 1) / 2);        gx.setColor(Color.black);        gx.drawPolyline(ar1,ar2,(tmp.size() - 1) / 2);      }    }  }  if (m_shapePoints != null) {    if (m_shapePoints.get(0).intValue() == 2 || m_shapePoints.get(0).intValue() == 3) {      gx.setColor(Color.black);      gx.setXORMode(Color.white);      int[] ar1, ar2;      ar1=getXCoords(m_shapePoints);      ar2=getYCoords(m_shapePoints);      gx.drawPolyline(ar1,ar2,(m_shapePoints.size() - 1) / 2);      m_newMousePos.width=(int)Math.ceil(m_plot2D.convertToPanelX(m_shapePoints.get(m_shapePoints.size() - 2).doubleValue()));      m_newMousePos.height=(int)Math.ceil(m_plot2D.convertToPanelY(m_shapePoints.get(m_shapePoints.size() - 1).doubleValue()));      gx.drawLine((int)Math.ceil(m_plot2D.convertToPanelX(m_shapePoints.get(m_shapePoints.size() - 2).doubleValue())),(int)Math.ceil(m_plot2D.convertToPanelY(m_shapePoints.get(m_shapePoints.size() - 1).doubleValue())),m_newMousePos.width,m_newMousePos.height);      gx.setPaintMode();    }  }}  }
class C{  public static void copyWithGap(Object src,Object dst,int oldSize,int gapIndex){  if (gapIndex > 0) {    System.arraycopy(src,0,dst,0,gapIndex);  }  if (gapIndex < oldSize) {    System.arraycopy(src,gapIndex,dst,gapIndex + 1,oldSize - gapIndex);  }}  }
class C{  private void internalCoordCopy(int[] coords){  if ((this.coordCopy == null) || (this.coordCopy.length != coords.length)) {    this.coordCopy=new int[coords.length];  }  System.arraycopy(coords,0,coordCopy,0,coords.length);}  }
class C{  public void testGetServletNames() throws Exception {  String xml=WEBAPP_TEST_HEADER + "  <servlet>" + "    <servlet-name>s1</servlet-name>"+ "    <servlet-class>sclass1</servlet-class>"+ "  </servlet>"+ "  <servlet>"+ "    <servlet-name>s2</servlet-name>"+ "    <servlet-class>sclass2</servlet-class>"+ "  </servlet>"+ "  <servlet>"+ "    <servlet-name>s3</servlet-name>"+ "    <servlet-class>sclass3</servlet-class>"+ "  </servlet>"+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  List<String> servletNames=WebXmlUtils.getServletNames(webXml);  assertEquals(3,servletNames.size());  assertEquals("s1",servletNames.get(0));  assertEquals("s2",servletNames.get(1));  assertEquals("s3",servletNames.get(2));}  }
