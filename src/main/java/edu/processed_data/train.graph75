class C{  public void testConcurrentRWWriterReader() throws Exception {  final HALogWriter writer=new HALogWriter(logdir);  final IRootBlockView rbv=openRBV(StoreTypeEnum.RW);  assertEquals(StoreTypeEnum.RW,rbv.getStoreType());  writer.createLog(rbv);  final int nfiles=100 + r.nextInt(1000);  final Future<Void> wf=executorService.submit(new SimpleWriter(rbv,writer,nfiles));  try {    for (long commitCounter=1L; commitCounter <= nfiles; commitCounter++) {      final File file=CommitCounterUtility.getCommitCounterFile(logdir,commitCounter,IHALogReader.HA_LOG_EXT);      while (!file.exists()) {        if (wf.isDone()) {          wf.get();        }        if (log.isInfoEnabled())         log.info("Blocked waiting on writer: commitCounter=" + commitCounter + ", file="+ file);        Thread.sleep(100);      }      new ReaderTask(commitCounter,writer,wf).call();    }    wf.get();  }  finally {    wf.cancel(true);  }  HALogReader.main(new String[]{logdir.toString()});}  }
class C{  private static final void throwIAE(String msg){  throw new IllegalArgumentException(msg);}  }
class C{  private void checkElementPresence(Elements elements,TestSolutionHandler testSolutionHandler){  TestSolution checkResult=getFailureSolution();  if (!elements.isEmpty() && ((!checkUnicity) || (checkUnicity && elements.size() == 1))) {    checkResult=getSuccessSolution();    for (    Element el : elements) {      createSourceCodeRemark(getSuccessSolution(),el,getSuccessMsgCode());    }  } else   if (checkUnicity && elements.size() > 1 && StringUtils.isNotBlank(messageCodeOnMultipleElements)) {    for (    Element el : elements) {      addSourceCodeRemark(getFailureSolution(),el,messageCodeOnMultipleElements);    }  } else   if (StringUtils.isNotBlank(getFailureMsgCode())) {    getProcessRemarkService().addProcessRemark(getFailureSolution(),getFailureMsgCode());  }  testSolutionHandler.addTestSolution(checkResult);}  }
class C{  public GeoJSONLoader(){}  }
class C{  @Override protected SerializationPolicy doGetSerializationPolicy(HttpServletRequest request,String moduleBaseURL,String strongName){  SerializationPolicy policy=super.doGetSerializationPolicy(request,moduleBaseURL,strongName);  if (policy == null) {    return SerializationPolicyUtil.loadSerializationPolicy(this,request,moduleBaseURL,strongName);  } else {    return policy;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.deleteData(0,16);  childData=child.getData();  assertEquals("data","Dallas, Texas 98551",childData);}  }
class C{  public NXTRecord(Name name,int dclass,long ttl,Name next,BitSet bitmap){  super(name,Type.NXT,dclass,ttl);  this.next=checkName("next",next);  this.bitmap=bitmap;}  }
class C{  @Override public boolean removeAll(Collection<?> collection){  boolean result=false;  if (size() <= collection.size()) {    Iterator<?> it=iterator();    while (it.hasNext()) {      if (collection.contains(it.next())) {        it.remove();        result=true;      }    }  } else {    Iterator<?> it=collection.iterator();    while (it.hasNext()) {      result=remove(it.next()) || result;    }  }  return result;}  }
class C{  @Override public void onNdefPushComplete(){  NfcAdapter.OnNdefPushCompleteCallback callback;synchronized (NfcActivityManager.this) {    NfcActivityState state=findResumedActivityState();    if (state == null)     return;    callback=state.onNdefPushCompleteCallback;  }  if (callback != null) {    callback.onNdefPushComplete(mDefaultEvent);  }}  }
class C{  public void appendOperator(Variation variation){  operators.add(variation);}  }
class C{  public void load(Element element,Object o){  Editor ed=(Editor)o;  SignalMastIcon l=new SignalMastIcon(ed);  String name;  Attribute attr;  try {    int rotation=0;    double scale=1.0;    attr=element.getAttribute("rotation");    if (attr != null) {      rotation=attr.getIntValue();    }    attr=element.getAttribute("degrees");    if (attr != null) {      rotation=attr.getIntValue();    }    l.rotate(rotation);    attr=element.getAttribute("scale");    String text="Error attr null";    if (attr != null) {      scale=attr.getDoubleValue();      text=attr.getValue();    }    l.setScale(scale);    if (log.isDebugEnabled()) {      log.debug("Load SignalMast rotation= " + rotation + " scale= "+ scale+ " attr text= "+ text);    }  } catch (  org.jdom2.DataConversionException e) {    log.error("failed to convert rotation or scale attribute");  }  attr=element.getAttribute("signalmast");  if (attr == null) {    log.error("incorrect information for signal mast; must use signalmast name");    ed.loadFailed();    return;  } else {    name=attr.getValue();    if (log.isDebugEnabled()) {      log.debug("Load SignalMast " + name);    }  }  SignalMast sh=jmri.InstanceManager.getDefault(jmri.SignalMastManager.class).getSignalMast(name);  if (sh != null) {    l.setSignalMast(name);  } else {    log.error("SignalMast named '" + attr.getValue() + "' not found.");    ed.loadFailed();  }  attr=element.getAttribute("imageset");  if (attr != null) {    l.useIconSet(attr.getValue());  }  attr=element.getAttribute("imageset");  if (attr != null) {    l.useIconSet(attr.getValue());  }  try {    attr=element.getAttribute("clickmode");    if (attr != null) {      l.setClickMode(attr.getIntValue());    }  } catch (  org.jdom2.DataConversionException e) {    log.error("Failed on clickmode attribute: " + e);  }  try {    attr=element.getAttribute("litmode");    if (attr != null) {      l.setLitMode(attr.getBooleanValue());    }  } catch (  org.jdom2.DataConversionException e) {    log.error("Failed on litmode attribute: " + e);  }  ed.putItem(l);  loadCommonAttributes(l,Editor.SIGNALS,element);}  }
class C{  public static void init(StructFuseBufvec buf,long size){  layout.count.set(buf.p,1);  layout.idx.set(buf.p,0);  layout.off.set(buf.p,0);  layout.buf.size.set(buf.p,size);  layout.buf.flags.set(buf.p,0);  layout.buf.mem.set(buf.p,0);  layout.buf.fd.set(buf.p,-1);  layout.buf.pos.set(buf.p,0);}  }
class C{  private void writeSensorStyle(String name,String displayName){  printWriter.println("<gx:SimpleArrayField name=\"" + name + "\" type=\"int\">");  printWriter.println("<displayName>" + StringUtils.formatCData(displayName) + "</displayName>");  printWriter.println("</gx:SimpleArrayField>");}  }
class C{  public ConditionalExpression toCondition(final Expression condition){  final ConditionalExpression $=ast.newConditionalExpression();  $.setExpression(make.plant(claim(condition)).into($));  $.setThenExpression(make.plant(left).into($));  assert make.plant(right).into($) != null : "Planting " + right + " into "+ $+ "/"+ parent($)+ "returned null";  $.setElseExpression(make.plant(right).into($));  return $;}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  Stylesheet thisSheet=handler.getStylesheet();  WhitespaceInfoPaths paths=new WhitespaceInfoPaths(thisSheet);  setPropertiesFromAttributes(handler,rawName,attributes,paths);  Vector xpaths=paths.getElements();  for (int i=0; i < xpaths.size(); i++) {    WhiteSpaceInfo wsi=new WhiteSpaceInfo((XPath)xpaths.elementAt(i),true,thisSheet);    wsi.setUid(handler.nextUid());    thisSheet.setStripSpaces(wsi);  }  paths.clearElements();}  }
class C{  private void migrateBlockMirrors(){  log.info("Migrating BlockConsistencyGroup references on BlockMirror objects.");  DbClient dbClient=getDbClient();  List<URI> blockMirrorURIs=dbClient.queryByType(BlockMirror.class,false);  Iterator<BlockMirror> blockMirrors=dbClient.queryIterativeObjects(BlockMirror.class,blockMirrorURIs,true);  List<BlockObject> blockObjects=new ArrayList<BlockObject>();  while (blockMirrors.hasNext()) {    blockObjects.add(blockMirrors.next());  }  migrateBlockObjects(blockObjects);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected Device findDestByEntity(IEntityClass reference,Entity dstEntity){  Long deviceKey=primaryIndex.findByEntity(dstEntity);  if (deviceKey == null) {    ClassState classState=getClassState(reference);    if (classState.classIndex == null) {      return null;    }    deviceKey=classState.classIndex.findByEntity(dstEntity);  }  if (deviceKey == null)   return null;  return deviceMap.get(deviceKey);}  }
class C{  public PrintfFormat(Locale locale,String fmtArg) throws IllegalArgumentException {  dfs=new DecimalFormatSymbols(locale);  int ePos=0;  ConversionSpecification sFmt=null;  String unCS=this.nonControl(fmtArg,0);  if (unCS != null) {    sFmt=new ConversionSpecification();    sFmt.setLiteral(unCS);    vFmt.addElement(sFmt);  }  while (cPos != -1 && cPos < fmtArg.length()) {    for (ePos=cPos + 1; ePos < fmtArg.length(); ePos++) {      char c=0;      c=fmtArg.charAt(ePos);      if (c == 'i')       break;      if (c == 'd')       break;      if (c == 'f')       break;      if (c == 'g')       break;      if (c == 'G')       break;      if (c == 'o')       break;      if (c == 'x')       break;      if (c == 'X')       break;      if (c == 'e')       break;      if (c == 'E')       break;      if (c == 'c')       break;      if (c == 's')       break;      if (c == '%')       break;    }    ePos=Math.min(ePos + 1,fmtArg.length());    sFmt=new ConversionSpecification(fmtArg.substring(cPos,ePos));    vFmt.addElement(sFmt);    unCS=this.nonControl(fmtArg,ePos);    if (unCS != null) {      sFmt=new ConversionSpecification();      sFmt.setLiteral(unCS);      vFmt.addElement(sFmt);    }  }}  }
class C{  public int leave(){  return --depth;}  }
class C{  public boolean canConnect(Connection target){  return canConnectWithReason(target) == CAN_CONNECT;}  }
class C{  public Vector4i negate(Vector4i dest){  dest.x=-x;  dest.y=-y;  dest.z=-z;  dest.w=-w;  return dest;}  }
class C{  @SuppressWarnings("CloneDoesntCallSuperClone") @SuppressFBWarnings(value="CN_IDIOM_NO_SUPER_CALL",justification="Does not required any fields from the parent class") @Override public Filter<R> clone(){  Filter<R> clone=new Filter<>();  if (null != functions) {    clone.addFunctions(cloneFunctions());  }  return clone;}  }
class C{  private Scope createLoopNode(Node loopLabel,int lineno){  Scope result=createScopeNode(Token.LOOP,lineno);  if (loopLabel != null) {    ((Jump)loopLabel).setLoop(result);  }  return result;}  }
class C{  public boolean isFullBST(){  return size == Math.pow(2,height()) - 1 ? true : false;}  }
class C{  public ConstraintImplementation(final boolean result){  this.result=result;}  }
class C{  protected void initializeWorld(){  this.world.setGravity(new Vector2(0,-3));  SimulationBody l=new SimulationBody();  l.addFixture(Geometry.createRectangle(1,15));  l.translate(-5,0);  l.setMass(MassType.INFINITE);  this.world.addBody(l);  SimulationBody r=new SimulationBody();  r.addFixture(Geometry.createRectangle(1,15));  r.translate(5,0);  r.setMass(MassType.INFINITE);  this.world.addBody(r);  SimulationBody t=new SimulationBody();  t.addFixture(Geometry.createRectangle(15,1));  t.translate(0,5);  t.setMass(MassType.INFINITE);  this.world.addBody(t);  SimulationBody b=new SimulationBody();  b.addFixture(Geometry.createRectangle(15,1));  b.translate(0,-5);  b.setMass(MassType.INFINITE);  this.world.addBody(b);  ship=new SimulationBody();  ship.addFixture(Geometry.createRectangle(0.5,1.5),1,0.2,0.2);  BodyFixture bf2=ship.addFixture(Geometry.createEquilateralTriangle(0.5),1,0.2,0.2);  bf2.getShape().translate(0,0.9);  ship.translate(0.0,2.0);  ship.setMass(MassType.NORMAL);  this.world.addBody(ship);}  }
class C{  static char processCharLiteral(String entity) throws IOException, XMLParseException {  if (entity.charAt(2) == 'x') {    entity=entity.substring(3,entity.length() - 1);    return (char)Integer.parseInt(entity,16);  } else {    entity=entity.substring(2,entity.length() - 1);    return (char)Integer.parseInt(entity,10);  }}  }
class C{  public void dupX2(){  mv.visitInsn(Opcodes.DUP_X2);}  }
class C{  private void defineInternalFrames(UIDefaults d){  d.put("InternalFrameTitlePane.contentMargins",new InsetsUIResource(0,0,0,0));  d.put("InternalFrameTitlePane.maxFrameIconSize",new DimensionUIResource(18,18));  d.put("InternalFrame.contentMargins",new InsetsUIResource(1,6,6,6));  d.put("InternalFrame:InternalFrameTitlePane.contentMargins",new InsetsUIResource(3,0,3,0));  d.put("InternalFrame:InternalFrameTitlePane.titleAlignment","CENTER");  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.menuButton\".contentMargins",new InsetsUIResource(0,0,0,0));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.iconifyButton\".contentMargins",new InsetsUIResource(9,9,9,9));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.maximizeButton\".contentMargins",new InsetsUIResource(9,9,9,9));  d.put("InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.closeButton\".contentMargins",new InsetsUIResource(9,9,9,9));  if (PlatformUtils.isMac()) {    d.put("frameBaseActive",new Color(0xa8a8a8));  } else {    d.put("frameBaseActive",new Color(0x96adc4));  }  d.put("frameBaseInactive",new Color(0xe0e0e0));  d.put("frameBorderBase",new Color(0x545454));  d.put("frameInnerHighlightInactive",new Color(0x55ffffff,true));  d.put("frameInnerHighlightActive",new Color(0x55ffffff,true));  d.put("seaGlassTitlePaneButtonEnabledBorder",new Color(0x99000000,true));  d.put("seaGlassTitlePaneButtonEnabledCorner",new Color(0x26000000,true));  d.put("seaGlassTitlePaneButtonEnabledInterior",new Color(0x99ffffff,true));  d.put("seaGlassTitlePaneButtonHoverBorder",new Color(0xe5101010,true));  d.put("seaGlassTitlePaneButtonHoverCorner",new Color(0x267a7a7a,true));  d.put("seaGlassTitlePaneButtonHoverInterior",new Color(0xffffff));  d.put("seaGlassTitlePaneButtonPressedBorder",new Color(0xe50e0e0e,true));  d.put("seaGlassTitlePaneButtonPressedCorner",new Color(0x876e6e6e,true));  d.put("seaGlassTitlePaneButtonPressedInterior",new Color(0xe6e6e6));  String p="InternalFrame";  String c=PAINTER_PREFIX + "FrameAndRootPainter";  d.put(p + ".titleFont",new DerivedFont("defaultFont",1.0f,true,null));  d.put(p + ".States","Enabled,WindowFocused");  d.put(p + ":InternalFrameTitlePane.WindowFocused",new TitlePaneWindowFocusedState());  d.put(p + ".WindowFocused",new InternalFrameWindowFocusedState());  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,FrameAndRootPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Enabled+WindowFocused].backgroundPainter",new LazyPainter(c,FrameAndRootPainter.Which.BACKGROUND_ENABLED_WINDOWFOCUSED));  p="InternalFrameTitlePane";  d.put(p + ".buttonSpacing",0);  p="InternalFrame:InternalFrameTitlePane";  d.put(p + "[Enabled].textForeground",d.get("seaGlassDisabledText"));  d.put(p + "[WindowFocused].textForeground",Color.BLACK);}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PICTURE_CACHE'";  db.execSQL(sql);}  }
class C{  @HLEFunction(nid=0x503A3CBA,version=150) public int sceMp4GetAvcAu(int mp4,TPointer trackAddr,TPointer auAddr,@CanBeNull TPointer infoAddr){  SceMp4TrackSampleBuf track=new SceMp4TrackSampleBuf();  track.read(trackAddr);  if (log.isTraceEnabled()) {    log.trace(String.format("sceMp4GetAvcAu track %s",track));  }  if (track.bufSamples.sizeAvailableForRead <= 0) {    if (log.isDebugEnabled()) {      log.debug(String.format("sceMp4GetAvcAu returning ERROR_MP4_NO_MORE_DATA"));    }    return SceKernelErrors.ERROR_MP4_NO_MORE_DATA;  }  SceMpegAu au=new SceMpegAu();  au.read(auAddr);  Modules.sceMpegModule.setMpegAvcAu(au);  int sample=track.currentSample - track.bufSamples.sizeAvailableForRead;  int sampleSize=getSampleSize(track.trackType,sample);  int sampleDuration=getSampleDuration(track.trackType,sample);  int samplePresentationOffset=getSamplePresentationOffset(track.trackType,sample);  long frameDuration=sampleToFrameDuration(sampleDuration,track);  long framePresentationOffset=sampleToFrameDuration(samplePresentationOffset,track);  track.bufSamples.notifyRead(1);  track.bufBytes.notifyRead(sampleSize);  au.dts=videoCurrentTimestamp;  videoCurrentTimestamp+=frameDuration;  au.pts=au.dts + framePresentationOffset;  if (log.isTraceEnabled()) {    log.trace(String.format("sceMp4GetAvcAu consuming one frame of size=0x%X, duration=0x%X, track %s",sampleSize,frameDuration,track));  }  au.write(auAddr);  track.write(trackAddr);  if (infoAddr.isNotNull()) {    SceMp4SampleInfo info=new SceMp4SampleInfo();    info.sample=sample;    info.sampleOffset=getSampleOffset(track.trackType,sample);    info.sampleSize=getSampleSize(track.trackType,sample);    info.unknown1=0;    info.frameDuration=(int)frameDuration;    info.unknown2=0;    info.timestamp1=(int)au.dts;    info.timestamp2=(int)au.pts;    info.write(infoAddr);    if (log.isTraceEnabled()) {      log.trace(String.format("sceMp4GetAvcAu returning info=%s",info));    }  }  return 0;}  }
class C{  public void processKeyEvent(KeyEvent evt){  if (inputHandler == null) {    return;  }switch (evt.getID()) {case KeyEvent.KEY_TYPED:    inputHandler.keyTyped(evt);  break;case KeyEvent.KEY_PRESSED:inputHandler.keyPressed(evt);break;case KeyEvent.KEY_RELEASED:inputHandler.keyReleased(evt);break;}}  }
class C{  public void displayNodeInfo(String nodeID){  if (!nodeID.equals(selNodeID)) {    int nAdd=Integer.parseInt(nodeID);    SerialNode s=null;    for (int k=0; k < numConfigNodes; k++) {      if (nAdd == configNodeAddresses[k]) {        s=configNodes[k];      }    }    if (s == null) {      log.error("Cannot find Node " + nodeID + " in list of configured Nodes.");      return;    }    selNodeID=nodeID;    selNode=s;    selNodeNum=nAdd;    int type=selNode.getNodeType();    if (type == SerialNode.SMINI) {      nodeInfoText.setText("SMINI - 24 " + rb.getString("InputBitsAnd") + " 48 "+ rb.getString("OutputBits"));      numInputBits=24;      numOutputBits=48;    } else     if (type == SerialNode.USIC_SUSIC) {      int bitsPerCard=selNode.getNumBitsPerCard();      int numInputCards=selNode.numInputCards();      int numOutputCards=selNode.numOutputCards();      numInputBits=bitsPerCard * numInputCards;      numOutputBits=bitsPerCard * numOutputCards;      nodeInfoText.setText("USIC_SUSIC - " + bitsPerCard + rb.getString("BitsPerCard")+ ", "+ numInputBits+ " "+ rb.getString("InputBitsAnd")+ " "+ numOutputBits+ " "+ rb.getString("OutputBits"));    }  }  if (inputSelected) {    numBits=numInputBits;    assignmentPanel.setBorder(inputBorderTitled);  } else {    numBits=numOutputBits;    assignmentPanel.setBorder(outputBorderTitled);  }  ((AssignmentTableModel)assignmentListModel).fireTableDataChanged();}  }
class C{  public GeneralGrid(final double width,final GridType type){  this.width=width;  this.type=type;}  }
class C{  public static void escapeCssIdent(CharSequence s,Appendable out) throws IOException {  if (s.length() == 0) {    return;  }  char ch0=s.charAt(0);  if (ch0 >= '0' && ch0 <= '9') {    CSS_ENCODER.encode(ch0,s.length() > 1 ? Character.codePointAt(s,1) : -1,out);    s=s.subSequence(1,s.length());  }  new Escaper(s,EMPTY_ESCAPES,CSS_IDENT_ESCAPES,CSS_ENCODER,out).escape();}  }
class C{  private static List asList(int[] i,Object[] o){  Object[] temp=new Object[i.length];  for (int a=0; a < i.length; a++) {    temp[a]=o[i[a]];  }  return Arrays.asList(temp);}  }
class C{  public Builder<T> childNode(T childValue){  Preconditions.checkNotNull(childValue,"value must not null");  Builder<T> child=new Builder<>(childValue,this);  if (childBuilders == null) {    childBuilders=new LinkedList<>();  }  childBuilders.add(child);  return child;}  }
class C{  public synchronized int co_joinCoroutineSet(int coroutineID){  if (coroutineID >= 0) {    if (coroutineID >= m_unreasonableId || m_activeIDs.get(coroutineID))     return -1;  } else {    coroutineID=0;    while (coroutineID < m_unreasonableId) {      if (m_activeIDs.get(coroutineID))       ++coroutineID; else       break;    }    if (coroutineID >= m_unreasonableId)     return -1;  }  m_activeIDs.set(coroutineID);  return coroutineID;}  }
class C{  private void disconnect(AFTPClient client){  try {    if (client != null && client.isConnected()) {      client.quit();      client.disconnect();    }  } catch (  IOException ioe) {  }}  }
class C{  public PutRepositoryRequest source(String repositoryDefinition){  try (XContentParser parser=XContentFactory.xContent(repositoryDefinition).createParser(repositoryDefinition)){    return source(parser.mapOrdered());  } catch (  IOException e) {    throw new IllegalArgumentException("failed to parse repository source [" + repositoryDefinition + "]",e);  }}  }
class C{  public boolean hasWidth(){  return getWidth() != null;}  }
class C{  public IsilonList<IsilonEvent> queryEvents(long begin,long end,String firmwareVersion) throws IsilonException {  String query=(end != 0) ? String.format("?begin=%1$d&end=%2$d",begin,end) : String.format("?begin=%1$d",begin);  if (firmwareVersion.startsWith("8")) {    return getEvents(_baseUrl.resolve(URI_ONEFS8_EVENTS.resolve(query)),firmwareVersion);  }  return getEvents(_baseUrl.resolve(URI_EVENTS.resolve(query)),firmwareVersion);}  }
class C{  public static boolean checkRootPermission(){  return execCommand("echo root",true,false).result == 0;}  }
class C{  public Call(String functionName,Class<?> returnType,String variableName,Class<?> variableType){  this(functionName,returnType,new String[]{variableName},new Class<?>[]{variableType});}  }
class C{  @Override public final double[] weights(Instance instance){  return m_c45S.weights(instance);}  }
class C{  private void fetchSingle(){  fetchFlowScalar('\'');}  }
class C{  public static boolean validateRegion(String region){  try {    new RegionRestriction(region);  } catch (  final IllegalArgumentException e) {    return false;  }  return true;}  }
class C{  public void resetYRotationPoints(){  rotationPointY=initRotationPointY;}  }
class C{  public boolean containsVars(Collection<String> vars){  return map.keySet().containsAll(vars);}  }
class C{  private IStatus moduleContainerChanged(){  if (getPackageFragmentRoot() == null || !getPackageFragmentRoot().exists() || !JavaProjectUtilities.isJavaProjectNonNullAndExists(getJavaProject()) || !GWTNature.isGWTProject(getJavaProject().getProject())) {    modulePackageField.enableButton(false);    moduleInheritsDialogField.enableButton(ADD_INHERITS_BUTTON_GROUP_INDEX,false);  } else {    modulePackageField.enableButton(true);    moduleInheritsDialogField.enableButton(ADD_INHERITS_BUTTON_GROUP_INDEX,true);  }  modulePackageCompletionProcessor.setPackageFragmentRoot(getPackageFragmentRoot());  if (fContainerStatus.getSeverity() == IStatus.ERROR) {    return fContainerStatus;  }  if (fContainerStatus.getSeverity() == IStatus.WARNING) {    return Util.newErrorStatus(fContainerStatus.getMessage());  }  if (JavaProjectUtilities.isJavaProjectNonNullAndExists(getJavaProject()) && !GWTNature.isGWTProject(getJavaProject().getProject())) {    return Util.newErrorStatus("The source folder is not part of a GWT Project.");  }  if (moduleInheritsDialogField.getElements().isEmpty()) {    addCommonGWTModulesAsDefaultInherits();  }  return fContainerStatus;}  }
class C{  int storeTrailingComments(ASTNode node,int nextStart,boolean lastChild,int[] parentLineRange){  int nodeEnd=node.getStartPosition() + node.getLength() - 1;  if (nodeEnd == nextStart) {    if (++this.trailingPtr == 0) {      this.trailingNodes=new ASTNode[STORAGE_INCREMENT];      this.trailingIndexes=new long[STORAGE_INCREMENT];      this.lastTrailingPtr=-1;    } else     if (this.trailingPtr == this.trailingNodes.length) {      int newLength=(this.trailingPtr * 3 / 2) + STORAGE_INCREMENT;      System.arraycopy(this.trailingNodes,0,this.trailingNodes=new ASTNode[newLength],0,this.trailingPtr);      System.arraycopy(this.trailingIndexes,0,this.trailingIndexes=new long[newLength],0,this.trailingPtr);    }    this.trailingNodes[this.trailingPtr]=node;    this.trailingIndexes[this.trailingPtr]=-1;    return nodeEnd;  }  int extended=nodeEnd;  int nodeEndLine=getLineNumber(nodeEnd,parentLineRange);  int idx=getCommentIndex(0,nodeEnd,1);  if (idx == -1) {    return nodeEnd;  }  int startIdx=idx;  int endIdx=-1;  int length=this.comments.length;  int commentStart=extended + 1;  int previousEnd=nodeEnd + 1;  int sameLineIdx=-1;  while (idx < length && commentStart < nextStart) {    Comment comment=this.comments[idx];    commentStart=comment.getStartPosition();    if (commentStart >= nextStart) {      break;    } else     if (previousEnd < commentStart) {      this.scanner.resetTo(previousEnd,commentStart);      try {        int token=this.scanner.getNextToken();        if (token != TerminalTokens.TokenNameWHITESPACE || this.scanner.currentPosition != commentStart) {          if (idx == startIdx) {            return nodeEnd;          }          break;        }      } catch (      InvalidInputException e) {        return nodeEnd;      }      char[] gap=this.scanner.getCurrentIdentifierSource();      int nbrLine=0;      int pos=-1;      while ((pos=CharOperation.indexOf('\n',gap,pos + 1)) >= 0) {        nbrLine++;      }      if (nbrLine > 1) {        break;      }    }    int commentLine=getLineNumber(commentStart,parentLineRange);    if (commentLine == nodeEndLine) {      sameLineIdx=idx;    }    previousEnd=commentStart + comment.getLength();    endIdx=idx++;  }  if (endIdx != -1) {    if (!lastChild) {      int nextLine=getLineNumber(nextStart,parentLineRange);      int previousLine=getLineNumber(previousEnd,parentLineRange);      if ((nextLine - previousLine) <= 1) {        if (sameLineIdx == -1)         return nodeEnd;        endIdx=sameLineIdx;      }    }    if (++this.trailingPtr == 0) {      this.trailingNodes=new ASTNode[STORAGE_INCREMENT];      this.trailingIndexes=new long[STORAGE_INCREMENT];      this.lastTrailingPtr=-1;    } else     if (this.trailingPtr == this.trailingNodes.length) {      int newLength=(this.trailingPtr * 3 / 2) + STORAGE_INCREMENT;      System.arraycopy(this.trailingNodes,0,this.trailingNodes=new ASTNode[newLength],0,this.trailingPtr);      System.arraycopy(this.trailingIndexes,0,this.trailingIndexes=new long[newLength],0,this.trailingPtr);    }    this.trailingNodes[this.trailingPtr]=node;    long nodeRange=(((long)startIdx) << 32) + endIdx;    this.trailingIndexes[this.trailingPtr]=nodeRange;    extended=this.comments[endIdx].getStartPosition() + this.comments[endIdx].getLength() - 1;    ASTNode previousNode=node;    int ptr=this.trailingPtr - 1;    while (ptr >= 0) {      long range=this.trailingIndexes[ptr];      if (range != -1)       break;      ASTNode unresolved=this.trailingNodes[ptr];      if (previousNode != unresolved.getParent())       break;      this.trailingIndexes[ptr]=nodeRange;      previousNode=unresolved;      ptr--;    }    if (ptr > this.lastTrailingPtr) {      int offset=ptr - this.lastTrailingPtr;      for (int i=ptr + 1; i <= this.trailingPtr; i++) {        this.trailingNodes[i - offset]=this.trailingNodes[i];        this.trailingIndexes[i - offset]=this.trailingIndexes[i];      }      this.trailingPtr-=offset;    }    this.lastTrailingPtr=this.trailingPtr;  }  return extended;}  }
class C{  public void persist(String fileName) throws IOException {  for (  V v : getGraph().getVertices()) {    Point p=new Point(transform(v));    locations.put(v,p);  }  ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(fileName));  oos.writeObject(locations);  oos.close();}  }
class C{  public static List<Path> listFilesAndDirs(Path directory){  List<Path> fileNames=new ArrayList<>();  try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(directory)){    for (    Path path : directoryStream) {      String fn=path.getFileName().toString().toUpperCase();      if (!skipFolders.contains(fn) && !fn.matches(skipRegex) && !MovieModuleManager.MOVIE_SETTINGS.getMovieSkipFolders().contains(path.toFile().getAbsolutePath())) {        fileNames.add(path.toAbsolutePath());      } else {        LOGGER.debug("Skipping: " + path);      }    }  } catch (  IOException ex) {  }  return fileNames;}  }
class C{  public boolean isOnOrAfter(JulianDate d){  return (julian > d.julian || julian == d.julian);}  }
class C{  public void internalEntityDecl(String name,String value) throws SAXException {}  }
class C{  public void log(String msg,boolean isError){  try {    Style color=taLog.addStyle("color",null);    StyleConstants.setForeground(color,isError ? Color.RED : Color.WHITE);    taLog.getStyledDocument().insertString(taLog.getDocument().getLength(),msg + "\n",color);    taLog.setCaretPosition(taLog.getDocument().getLength());  } catch (  BadLocationException e) {  }}  }
class C{  final Entry removeMapping(Object o){  if (!(o instanceof Entry))   return null;  Entry entry=(Entry)o;  Object key=entry.getKey();  int hash=(key == null) ? 0 : hash(hashingStrategy.hashCode(key));  int i=indexFor(hash,table.length);  Entry prev=table[i];  Entry e=prev;  while (e != null) {    Entry next=e.next;    if (e.hash == hash && e.equals(entry)) {      modCount++;      size--;      if (prev == e)       table[i]=next; else       prev.next=next;      e.recordRemoval(this);      return e;    }    prev=e;    e=next;  }  return e;}  }
class C{  public ColorBar(String label){  NumberAxis a=new NumberAxis(label);  a.setAutoRangeIncludesZero(false);  this.axis=a;  this.axis.setLowerMargin(0.0);  this.axis.setUpperMargin(0.0);  this.colorPalette=new RainbowPalette();  this.colorBarThickness=DEFAULT_COLORBAR_THICKNESS;  this.colorBarThicknessPercent=DEFAULT_COLORBAR_THICKNESS_PERCENT;  this.outerGap=DEFAULT_OUTERGAP;  this.colorPalette.setMinZ(this.axis.getRange().getLowerBound());  this.colorPalette.setMaxZ(this.axis.getRange().getUpperBound());}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  long bottom=stepInstance.getBottomProtein();  long top=stepInstance.getTopProtein();  Map<Long,Integer> proteinLengthMap=getProteinSequenceLengths(bottom,top);  Set<RawProtein<PIRSFHmmer2RawMatch>> rawMatches=rawMatchDAO.getProteinsByIdRange(bottom,top,signatureLibraryRelease);  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("PIRSF: Retrieved " + rawMatches.size() + " proteins to post-process.");    int matchCount=0;    for (    final RawProtein rawProtein : rawMatches) {      matchCount+=rawProtein.getMatches().size();    }    LOGGER.debug("PIRSF: A total of " + matchCount + " raw matches.");  }  final String filteredMatchesFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,filteredMatchesFileName);  final String blastMatchesFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,blastMatchesFileName);  double signatureLibraryReleaseValue=Double.parseDouble(signatureLibraryRelease);  String subFamiliesFilePath=null;  if (signatureLibraryReleaseValue >= 2.75d && subfamToSuperfamMapFileName != null) {    subFamiliesFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,subfamToSuperfamMapFileName);  }  try {    postProcessor.process(rawMatches,proteinLengthMap,filteredMatchesFilePath,blastMatchesFilePath,subFamiliesFilePath,signatureLibraryReleaseValue);  } catch (  IOException e) {    throw new IllegalStateException("IOException thrown when attempting to write flat files for filtered matches and " + "matches which have to be BLASTed!",e);  }}  }
class C{  @Override protected void connect(Connector c){  getOwner().setStartConnector(c);}  }
class C{  public void putLong(long pos,long val){  unsafe.putLong(pos + addr,val);}  }
class C{  @Override public String toString(){  return getName();}  }
class C{  protected SVGOMFEMergeNodeElement(){}  }
class C{  Type attribBase(JCTree tree,Env<AttrContext> env,boolean classExpected,boolean interfaceExpected,boolean checkExtensible){  Type t=tree.type != null ? tree.type : attribType(tree,env);  return checkBase(t,tree,env,classExpected,interfaceExpected,checkExtensible);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public MaterialEditText errorSize(float size){  mErrorSize=size;  mError.setTextSize(mErrorSize);  return this;}  }
class C{  private void copyData(){  this.data=new HashSet(getPipeline().getRawPhysicalData());}  }
class C{  public RenameResourceChange(IPath resourcePath,String newName){  this(resourcePath,newName,IResource.NULL_STAMP);}  }
class C{  private static void saveLibraryInfo(){  OutputStream stream=null;  try {    String xml=getLibraryInfoAsXML();    IPath libPath=getDefault().getStateLocation();    libPath=libPath.append("libraryInfos.xml");    File file=libPath.toFile();    if (!file.exists()) {      file.createNewFile();    }    stream=new BufferedOutputStream(new FileOutputStream(file));    stream.write(xml.getBytes("UTF8"));  } catch (  IOException e) {    log(e);  }catch (  CoreException e) {    log(e);  } finally {    if (stream != null) {      try {        stream.close();      } catch (      IOException e1) {      }    }  }}  }
class C{  public ImageReplacedElement(Image image,int targetWidth,int targetHeight){  if (targetWidth > 0 || targetHeight > 0) {    int w=image.getWidth(null);    int h=image.getHeight(null);    int newW=targetWidth;    int newH=targetHeight;    if (newW == -1) {      newW=(int)(w * ((double)newH / h));    }    if (newH == -1) {      newH=(int)(h * ((double)newW / w));    }    if (w != newW || h != newH) {      if (image instanceof BufferedImage) {        image=ImageUtil.getScaledInstance((BufferedImage)image,newW,newH);      } else {        String scalingType=Configuration.valueFor("xr.image.scale","HIGH").trim();        if (scalingType.equalsIgnoreCase("HIGH") || scalingType.equalsIgnoreCase("MID")) {          image=image.getScaledInstance(newW,newH,Image.SCALE_SMOOTH);        } else {          image=image.getScaledInstance(newW,newH,Image.SCALE_FAST);        }      }    }  }  _image=image;}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  if (savedInstanceState != null) {    Log.d(TAG,"onCreate(): activity re-created");  } else {    Log.d(TAG,"onCreate(): activity created anew");  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationcreatedocumenttype01.class,args);}  }
class C{  public CompValidateChecker warn(ICalComponent component,Integer... codes){  componentWarnings.put(component,codes);  return this;}  }
class C{  public HitonRunner(Graph graph,Parameters params){  super(graph,params);}  }
class C{  private static boolean determineRPTargetJournalMigration(Volume volume,VirtualPool currentVpool,VirtualPool newVpool,List<RPVPlexMigration> potentialMigrations,StringBuffer notSuppReasonBuff,DbClient dbClient,VpoolProtectionVarraySettings currentProtectionVarraySetting,VpoolProtectionVarraySettings newProtectionVarraySetting,String targetVarrayId){  boolean invalidMigration=false;  String currentTargetJournalVarrayId=NullColumnValueGetter.getStringValue(currentProtectionVarraySetting.getJournalVarray());  String currentTargetJournalVpoolId=NullColumnValueGetter.getStringValue(currentProtectionVarraySetting.getJournalVpool());  String newTargetJournalVarrayId=NullColumnValueGetter.getStringValue(newProtectionVarraySetting.getJournalVarray());  String newTargetJournalVpoolId=NullColumnValueGetter.getStringValue(newProtectionVarraySetting.getJournalVpool());  if (currentTargetJournalVarrayId.equals(NullColumnValueGetter.getNullStr())) {    currentTargetJournalVarrayId=targetVarrayId;  }  if (currentTargetJournalVpoolId.equals(NullColumnValueGetter.getNullStr())) {    currentTargetJournalVpoolId=currentVpool.getId().toString();  }  VirtualPool currentTargetJournalVpool=dbClient.queryObject(VirtualPool.class,URI.create(currentTargetJournalVpoolId));  if (newTargetJournalVpoolId.equals(NullColumnValueGetter.getNullStr())) {    newTargetJournalVpoolId=newVpool.getId().toString();  }  VirtualPool newTargetJournalVpool=dbClient.queryObject(VirtualPool.class,URI.create(newTargetJournalVpoolId));  if (newTargetJournalVarrayId.equals(NullColumnValueGetter.getNullStr())) {    if (newTargetJournalVpool.getVirtualArrays() != null && newTargetJournalVpool.getVirtualArrays().contains(targetVarrayId)) {      newTargetJournalVarrayId=targetVarrayId;    }  }  if (!currentTargetJournalVpoolId.equals(newTargetJournalVpoolId)) {    if (currentTargetJournalVarrayId.equals(newTargetJournalVarrayId) && VirtualPool.vPoolSpecifiesHighAvailability(currentTargetJournalVpool) && VirtualPool.vPoolSpecifiesHighAvailability(newTargetJournalVpool)) {      potentialMigrations.add(new RPVPlexMigration(Volume.PersonalityTypes.METADATA,Volume.PersonalityTypes.TARGET,URI.create(currentTargetJournalVarrayId),currentTargetJournalVpool,newTargetJournalVpool));    } else {      notSuppReasonBuff.append("Not valid for migration due to changes in RP Target Journal virtual pool / virtual array.");      invalidMigration=true;    }  } else {    if (!currentTargetJournalVarrayId.equals(newTargetJournalVarrayId)) {      notSuppReasonBuff.append("Not valid for migration due to changes in RP Target Journal virtual array.");      invalidMigration=true;    }  }  return invalidMigration;}  }
class C{  public void log(LogRecord record){  if (!isLoggable(record.getLevel())) {    return;  }  Filter theFilter=filter;  if (theFilter != null && !theFilter.isLoggable(record)) {    return;  }  Logger logger=this;  while (logger != null) {    final Handler[] loggerHandlers=isSystemLogger ? logger.accessCheckedHandlers() : logger.getHandlers();    for (    Handler handler : loggerHandlers) {      handler.publish(record);    }    final boolean useParentHdls=isSystemLogger ? logger.useParentHandlers : logger.getUseParentHandlers();    if (!useParentHdls) {      break;    }    logger=isSystemLogger ? logger.parent : logger.getParent();  }}  }
class C{  public PaintItem(double value,Paint paint){  this.value=value;  this.paint=paint;}  }
class C{  public void clearLearnedTable(){  macVlanToSwitchPortMap.clear();}  }
class C{  @Override public void onTopicChanged(String target){}  }
class C{  public MOEAD(Problem problem,int neighborhoodSize,Initialization initialization,Variation variation,double delta,double eta){  this(problem,neighborhoodSize,initialization,variation,delta,eta,-1);}  }
class C{  public static void showLoading(boolean isShow){  showLoading(isShow,RootPanel.get());}  }
class C{  protected void checkAndUpdateConfigFile() throws IOException {  List<String> subversionConfigContent=Files.readAllLines(GLOBAL_SUBVERSION_CONFIG_FILE_PATH,Charset.forName("UTF-8"));  int miscellanySectionIndex=-1;  int globalIgnoresIndex=-1;  boolean ignoreSectionCommented=true;  for (int i=0; i < subversionConfigContent.size(); i++) {    String line=subversionConfigContent.get(i);    if (line.startsWith("[miscellany]")) {      miscellanySectionIndex=i;    } else     if (line.trim().startsWith("# global-ignores")) {      globalIgnoresIndex=i;      ignoreSectionCommented=true;      break;    } else     if (line.trim().startsWith("global-ignores")) {      globalIgnoresIndex=i;      ignoreSectionCommented=false;      break;    }  }  if (miscellanySectionIndex == -1) {    subversionConfigContent.add("[miscellany]");    subversionConfigContent.add("global-ignores = " + getDefaultExcludes());  } else   if (globalIgnoresIndex == -1) {    subversionConfigContent.add(miscellanySectionIndex,"global-ignores = " + getDefaultExcludes());  } else {    String configParameter=subversionConfigContent.get(globalIgnoresIndex);    if (ignoreSectionCommented) {      configParameter=configParameter.substring(2).concat(" ").concat(getDefaultExcludes());    } else {      Iterable<String> filteredExcludes=filterExistingExcludes(configParameter,SUBVERSION_IGNORE_PATTERNS);      configParameter=configParameter.concat(" ").concat(Joiner.on(" ").join(filteredExcludes));    }    subversionConfigContent.set(globalIgnoresIndex,configParameter);  }  updateConfigFile(Joiner.on('\n').join(subversionConfigContent),GLOBAL_SUBVERSION_CONFIG_FILE_PATH);}  }
class C{  public RoleUserVO(){}  }
class C{  private void hideMainLayoutAndToast(String text){  mMainLayout.setVisibility(View.GONE);  mProgressTextView.setVisibility(View.VISIBLE);  mProgressTextView.setText(text);}  }
class C{  private void createBuild(){  Comment buildComment=doc.createComment("Application build");  root.appendChild(buildComment);  Element target=doc.createElement("target");  target.setAttribute("name","build");  target.setAttribute("depends","clean");  target.setAttribute("description","Builds the application");  Comment createDirectoryComment=doc.createComment("Create directory");  target.appendChild(createDirectoryComment);  Element mkdir=doc.createElement("mkdir");  mkdir.setAttribute("dir","${build.classes}");  target.appendChild(mkdir);  Comment compileSourcesComment=doc.createComment("Compile source code");  target.appendChild(compileSourcesComment);  Element javac=doc.createElement("javac");  javac.setAttribute("srcdir","${src.dir}");  javac.setAttribute("destdir","${build.classes}");  javac.setAttribute("debug","false");  javac.setAttribute("deprecation","true");  javac.setAttribute("optimize","true");  javac.setAttribute("includeantruntime","true");  target.appendChild(javac);  Comment copyNecessaryFiles=doc.createComment("Copy necessary files");  target.appendChild(copyNecessaryFiles);  Element copy=doc.createElement("copy");  copy.setAttribute("todir","${build.classes}");  Element copyFileset=doc.createElement("fileset");  copyFileset.setAttribute("dir","${src.dir}");  copyFileset.setAttribute("includes","**/*.*");  copyFileset.setAttribute("excludes","**/*.java");  copy.appendChild(copyFileset);  target.appendChild(copy);  Comment createJarComment=doc.createComment("Create JAR-file");  target.appendChild(createJarComment);  Element jar=doc.createElement("jar");  jar.setAttribute("jarfile","${build}/${name}.jar");  Element jarFileset=doc.createElement("fileset");  jarFileset.setAttribute("dir","${build.classes}");  jar.appendChild(jarFileset);  target.appendChild(jar);  root.appendChild(target);}  }
class C{  private void addCmp(Component cmp,int align){  if (cmp != null) {    if ((FIXED_WIDTH) && (x + cmp.getPreferredW() > width)) {      newLine(align);    }    curLine.addComponent(cmp);    x+=cmp.getPreferredW();  }}  }
class C{  private void vid_switcher(){  if (!(progress.getProgress() == 100) && progress.getProgress() >= 50) {    Log.w("repeatpoint",String.valueOf(progress.getProgress()));    vid1=false;    split_point=false;    progress.setProgress(50);    setVideoview.stopPlayback();    startVideo(vid_pth2,vidpos[2]);  } else   if (progress.getProgress() < 50) {    Log.w("repeat1point1",String.valueOf(progress.getProgress()));    vid1=true;    split_point=false;    setVideoview.stopPlayback();    startVideo(vid_pth1,vidpos[0]);  } else {    Log.w("vidSwtcher","end reached");    setVideoview.stopPlayback();  }}  }
class C{  public ObjectName manageRegion(String path) throws AdminException, MalformedObjectNameException {  try {    SystemMemberRegionJmxImpl region=null;    try {      region=(SystemMemberRegionJmxImpl)getRegion(path);    } catch (    AdminException e) {      MBeanUtil.logStackTrace(Level.WARN,e);      throw e;    }    if (region == null) {      throw new AdminException(LocalizedStrings.SystemMemberCacheJmxImpl_THIS_CACHE_DOES_NOT_CONTAIN_REGION_0.toLocalizedString(path));    } else {      return ObjectName.getInstance(region.getMBeanName());    }  } catch (  RuntimeException e) {    MBeanUtil.logStackTrace(Level.WARN,e);    throw e;  }catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  Error e) {    SystemFailure.checkFailure();    MBeanUtil.logStackTrace(Level.ERROR,e);    throw e;  }}  }
class C{  public boolean isTurnoutLockAllowed(SignalMast destination){  if (!destList.containsKey(destination)) {    return false;  }  return destList.get(destination).isTurnoutLockAllowed();}  }
class C{  public static String separatorsToWindows(String path){  if (path == null || path.indexOf(UNIX_SEPARATOR) == -1) {    return path;  }  return path.replace(UNIX_SEPARATOR,WINDOWS_SEPARATOR);}  }
class C{  static float powerOfTwoF(int n){  assert (n >= FloatConsts.MIN_EXPONENT && n <= FloatConsts.MAX_EXPONENT);  return Float.intBitsToFloat(((n + FloatConsts.EXP_BIAS) << (FloatConsts.SIGNIFICAND_WIDTH - 1)) & FloatConsts.EXP_BIT_MASK);}  }
class C{  public static void resendCode(HttpServletRequest request,WebUser wu){  String msg=sendEMail(request,wu,MMailMsg.MAILMSGTYPE_UserVerification,new Object[]{request.getServerName(),wu.getName(),wu.getEMailVerifyCode()});  if (EMail.SENT_OK.equals(msg))   wu.setPasswordMessage("EMail sent"); else   wu.setPasswordMessage("Problem sending EMail: " + msg);}  }
class C{  public boolean isAddToBackStack(){  return mAddToBackStack;}  }
class C{  public static Path createDirectory(final Path parent,final String folderName){  final File file=new File(parent.toFile(),folderName);  if (!file.exists()) {    if (!file.mkdir()) {      throw new RuntimeException("Error while trying to create folder at " + parent + " with "+ folderName+ ".");    }  }  file.deleteOnExit();  return file.toPath();}  }
class C{  public void ifCmp(final Type type,final int mode,final Label label){switch (type.getSort()) {case Type.LONG:    mv.visitInsn(Opcodes.LCMP);  break;case Type.DOUBLE:mv.visitInsn(mode == GE || mode == GT ? Opcodes.DCMPL : Opcodes.DCMPG);break;case Type.FLOAT:mv.visitInsn(mode == GE || mode == GT ? Opcodes.FCMPL : Opcodes.FCMPG);break;case Type.ARRAY:case Type.OBJECT:switch (mode) {case EQ:mv.visitJumpInsn(Opcodes.IF_ACMPEQ,label);return;case NE:mv.visitJumpInsn(Opcodes.IF_ACMPNE,label);return;}throw new IllegalArgumentException("Bad comparison for type " + type);default :int intOp=-1;switch (mode) {case EQ:intOp=Opcodes.IF_ICMPEQ;break;case NE:intOp=Opcodes.IF_ICMPNE;break;case GE:intOp=Opcodes.IF_ICMPGE;break;case LT:intOp=Opcodes.IF_ICMPLT;break;case LE:intOp=Opcodes.IF_ICMPLE;break;case GT:intOp=Opcodes.IF_ICMPGT;break;}mv.visitJumpInsn(intOp,label);return;}mv.visitJumpInsn(mode,label);}  }
class C{  public FilteringBatchAcknowledgingMessageListenerAdapter(BatchAcknowledgingMessageListener<K,V> delegate,RecordFilterStrategy<K,V> recordFilterStrategy,boolean ackDiscarded){  super(delegate,recordFilterStrategy);  this.ackDiscarded=ackDiscarded;}  }
class C{  public RequestHandle put(Context context,String url,Header[] headers,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  HttpEntityEnclosingRequestBase request=addEntityToRequestBase(new HttpPut(getURI(url)),entity);  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void registerProgressBarAttributes(){  addAttributeProcessor(new AnimateDurationLmlAttribute(),"animate","animateDuration","animation");  addAttributeProcessor(new OnCompleteLmlAtrribute(),"onComplete","complete");}  }
class C{  public boolean isLogscale(){  return logscale;}  }
class C{  private void encodeInsert(final DiffPart part) throws UnsupportedEncodingException, EncodingException {  data.writeBit(0);  data.writeBit(1);  data.writeBit(0);  data.writeValue(codecData.getBlocksizeS(),part.getStart());  String text=part.getText();  byte[] bText=text.getBytes(WIKIPEDIA_ENCODING);  data.writeValue(codecData.getBlocksizeL(),bText.length);  data.write(bText);}  }
class C{  private static void createAndCheckIsDirectory(Path dir,FileAttribute<?>... attrs) throws IOException {  try {    createDirectory(dir,attrs);  } catch (  FileAlreadyExistsException x) {    if (!isDirectory(dir,LinkOption.NOFOLLOW_LINKS))     throw x;  }}  }
class C{  @Transient public boolean isConsistentForLevel(){  if (getCountryCode() == null) {    return false;  }  if (this.getLevel() == 1 && this.getAdm1Code() == null) {    return false;  } else   if (this.getLevel() == 2 && (this.getAdm1Code() == null || this.getAdm2Code() == null)) {    return false;  } else   if (this.getLevel() == 3 && (this.getAdm1Code() == null || this.getAdm2Code() == null || this.getAdm3Code() == null)) {    return false;  } else   if (this.getLevel() == 4 && (this.getAdm1Code() == null || this.getAdm2Code() == null || this.getAdm3Code() == null || this.getAdm4Code() == null)) {    return false;  }  return true;}  }
class C{  public boolean prepareConnection(String name,String password,String channel,String server,String ports){  fixServer=false;  if (c.getState() > Irc.STATE_OFFLINE) {    g.showMessage("Cannot connect: Already connected.");    return false;  }  if (name == null || name.isEmpty() || password == null || password.isEmpty()) {    g.showMessage("Cannot connect: Incomplete login data.");    return false;  }  String[] autojoin;  Set<String> openChannels=c.getOpenChannels();  if (channel == null) {    autojoin=new String[openChannels.size()];    openChannels.toArray(autojoin);  } else {    autojoin=Helper.parseChannels(channel);  }  if (autojoin.length == 0) {    g.showMessage("A channel to join has to be specified.");    return false;  }  if (server == null || server.isEmpty()) {    g.showMessage("Invalid server specified.");    return false;  }  closeAllChannelsExcept(autojoin);  settings.setString("username",name);  if (channel != null) {    settings.setString("channel",channel);  }  c.connect(server,ports,name,password,autojoin);  return true;}  }
class C{  private boolean isValid(){  if (isNull())   return true;  return minX <= maxX && minY <= maxY && minA <= maxA && minB <= maxB;}  }
class C{  public static char[][] loadImage(File file,char offChar) throws FileNotFoundException, RuntimeException {  ArrayList<String> rows=BooleanImageLoad.loadImagePad(file,offChar);  String s=rows.get(0);  char[][] img=new char[rows.size()][s.length()];  for (int i=0; i < rows.size(); i++) {    s=rows.get(i);    for (int j=0; j < s.length(); j++) {      img[i][j]=s.charAt(j);    }  }  return img;}  }
class C{  public String canonical(){switch (type) {case CONVERGE:    return steps.get(steps.size() - 1);case CYCLE:  return Collections.min(steps,Comparator.comparing(null).thenComparing(Function.identity()));case DIVERGE:throw new IllegalArgumentException("No canonical form for a diverging result");default :throw Unhandled.enumException(type);}}  }
class C{  IContainer createContainersFor(IPath path) throws CoreException {  IContainer currentFolder=destinationContainer;  int segmentCount=path.segmentCount();  if (segmentCount == 0) {    return currentFolder;  }  if (currentFolder.getType() == IResource.ROOT) {    return createFromRoot(path);  }  for (int i=0; i < segmentCount; i++) {    currentFolder=currentFolder.getFolder(new Path(path.segment(i)));    if (!currentFolder.exists()) {      if (createVirtualFolder)       ((IFolder)currentFolder).create(IResource.VIRTUAL,true,null); else       if (createLinks)       ((IFolder)currentFolder).createLink(createRelativePath(path,currentFolder),0,null); else       ((IFolder)currentFolder).create(false,true,null);    }  }  return currentFolder;}  }
class C{  private void assertKBNotFound(final Journal jnl,final String namespace) throws RepositoryException, SailException {  BigdataSailRepositoryConnection conn=null;  try {    conn=getQueryConnection(jnl,namespace,ITx.READ_COMMITTED);    assertNull(namespace,conn);  }  finally {    if (conn != null)     conn.close();  }}  }
class C{  public boolean isGUIClickable(byte aSide,int aCoverID,int aCoverVariable,ICoverable aTileEntity){  return false;}  }
class C{  @Override public boolean wasNull() throws SQLException {  try {    debugCodeCall("wasNull");    checkClosed();    return wasNull;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void testBasicLookup(){}  }
class C{  public boolean removeLastOccurrence(Object o){  if (o == null)   return false;  int mask=elements.length - 1;  int i=(tail - 1) & mask;  Object x;  while ((x=elements[i]) != null) {    if (o.equals(x)) {      delete(i);      return true;    }    i=(i - 1) & mask;  }  return false;}  }
class C{  private static String sanitizeStackTrace(String trace){  if (trace != null) {    return trace.replaceAll("[^\\u0009\\u000A\\u000D\\u0020-\\uD7FF\\uE000-\\uFFFD]","");  } else {    return null;  }}  }
class C{  @Override public void stop(){  schedExecutor.shutdownNow();  try {    schedExecutor.awaitTermination(5,TimeUnit.SECONDS);  } catch (  InterruptedException e) {    LOG.warn("Clean up registration thread was interrupted.",e);  }}  }
class C{  public LastReq(DerValue encoding) throws Asn1Exception, IOException {  Vector<LastReqEntry> v=new Vector<>();  if (encoding.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  while (encoding.getData().available() > 0) {    v.addElement(new LastReqEntry(encoding.getData().getDerValue()));  }  if (v.size() > 0) {    entry=new LastReqEntry[v.size()];    v.copyInto(entry);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected void startVoiceCall(){  if (!EMClient.getInstance().isConnected()) {    Toast.makeText(getActivity(),R.string.not_connect_to_server,Toast.LENGTH_SHORT).show();  } else {    startActivity(new Intent(getActivity(),VoiceCallActivity.class).putExtra("username",toChatUsername).putExtra("isComingCall",false));    inputMenu.hideExtendMenuContainer();  }}  }
class C{  private static void sortAnonymous(List<IType> anonymous,IType anonType){  SourceOffsetComparator sourceComparator=new SourceOffsetComparator();  final AnonymClassComparator classComparator=new AnonymClassComparator(anonType,sourceComparator);  Collections.sort(anonymous,classComparator);}  }
class C{  protected void splitNodes(KDTreeNode node,double[][] universe,int depth) throws Exception {  double[][] nodeRanges=m_EuclideanDistance.initializeRanges(m_InstList,node.m_Start,node.m_End);  if (node.numInstances() <= m_MaxInstInLeaf || getMaxRelativeNodeWidth(nodeRanges,universe) <= m_MinBoxRelWidth)   return;  m_NumLeaves--;  if (depth > m_MaxDepth)   m_MaxDepth=depth;  m_Splitter.splitNode(node,m_NumNodes,nodeRanges,universe);  m_NumNodes+=2;  m_NumLeaves+=2;  splitNodes(node.m_Left,universe,depth + 1);  splitNodes(node.m_Right,universe,depth + 1);}  }
class C{  public void linkClass(Class clazz){  super.resolveClass(clazz);}  }
class C{  public void testIdWithSlash(){  String jndiName="jdbc/DataSource";  String propertyString=DatasourcePropertySet.JNDI_LOCATION + "=" + jndiName;  DataSource ds=dataSourceConverter.fromPropertyString(propertyString);  assertEquals("DataSource",ds.getId());}  }
class C{  private static String toJMapAccessor(Attribute attribute){  String get=attribute.getGet();  String set=attribute.getSet();  String name=attribute.getName();  StringBuilder result=new StringBuilder("@JMapAccessors({");  if (!isNull(attribute.getAttributes()))   for (  SimplyAttribute targetAtr : attribute.getAttributes()) {    String accessor=toJMapAccessor(targetAtr);    if (!isEmpty(accessor))     result.append("\n   " + accessor + ",");  }  String accessor=toJMapAccessor(get,set,name);  if (!isEmpty(accessor))   result.append("\n   " + accessor); else   if (result.toString().equals("@JMapAccessors({"))   return ""; else   result=new StringBuilder(result.substring(0,result.length() - 1));  return result.append("\n})\n").toString();}  }
class C{  @SuppressWarnings("unchecked") public SearchSourceBuilder postFilter(Map postFilter){  try {    XContentBuilder builder=XContentFactory.contentBuilder(Requests.CONTENT_TYPE);    builder.map(postFilter);    return postFilter(builder);  } catch (  IOException e) {    throw new ElasticsearchGenerationException("Failed to generate [" + postFilter + "]",e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:04.662 -0400",hash_original_method="BE48E4EE0EF08F7A1FF71FC85496EC61",hash_generated_method="C5E056556B0ECC757EF8DCAC79048F57") protected boolean engineVerify(byte[] sigBytes) throws SignatureException {  if (sigBytes == null) {    throw new NullPointerException("sigBytes == null");  }  return checkSignature(sigBytes,0,0);}  }
class C{  public void addChatLine(String line){  chatLog.setText(chatLog.getText() + splitLines(line,windowWidth - 5));  chatLog.setCursorLocation(0,Integer.MAX_VALUE);  this.repaint();}  }
class C{  public DMSLatLonPoint(LatLonPoint llp){  getDMSLatLonPoint(llp,this);}  }
class C{  private final Throwable unwrapFutureThrowable(Future<?> ft){  if (ft.isDone() && !ft.isCancelled()) {    try {      ft.get();    } catch (    ExecutionException ee) {      return ee.getCause();    }catch (    InterruptedException ie) {      Thread.currentThread().interrupt();    }  }  return null;}  }
class C{  public static void populatePkcs10Challenge(Attribute[] attributes,JTextField textField){  ASN1ObjectIdentifier pkcs9AtChallengepassword=PKCSObjectIdentifiers.pkcs_9_at_challengePassword;  populateTextField(attributes,textField,pkcs9AtChallengepassword);}  }
class C{  public boolean importSuccessfull(){  return m_success;}  }
class C{  public ElementManager(){  super();  cache=new ElementCache();}  }
class C{  public int readPersistentInt(String key){  try {    if (checkService()) {      byte[] bytes=sService.readPersistentBytes(key);      if (bytes != null) {        return ByteBuffer.wrap(bytes).getInt();      }    }  } catch (  RemoteException e) {  }  return 0;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private static int categorizeByYear2016Method(Context c){  long totalRam=DeviceInfo.getTotalMemory(c);  if (totalRam == DeviceInfo.DEVICEINFO_UNKNOWN) {    return categorizeByYear2014Method(c);  }  if (totalRam <= 768 * MB) {    return DeviceInfo.getNumberOfCPUCores() <= 1 ? CLASS_2009 : CLASS_2010;  }  if (totalRam <= 1024 * MB) {    return DeviceInfo.getCPUMaxFreqKHz() < 1300 * MHZ_IN_KHZ ? CLASS_2011 : CLASS_2012;  }  if (totalRam <= 1536 * MB) {    return DeviceInfo.getCPUMaxFreqKHz() < 1800 * MHZ_IN_KHZ ? CLASS_2012 : CLASS_2013;  }  if (totalRam <= 2048 * MB) {    return CLASS_2013;  }  return totalRam <= 3 * 1024 * MB ? CLASS_2014 : CLASS_2015;}  }
class C{  public void testListFiles() throws Exception {  create(igfs,paths(DIR,SUBDIR,SUBSUBDIR),paths(FILE));  Collection<IgfsFile> paths=igfs.listFiles(SUBDIR);  assert paths != null;  assert paths.size() == 2;  Iterator<IgfsFile> iter=paths.iterator();  IgfsFile path1=iter.next();  IgfsFile path2=iter.next();  assert (SUBSUBDIR.equals(path1.path()) && FILE.equals(path2.path())) || (FILE.equals(path1.path()) && SUBSUBDIR.equals(path2.path()));}  }
class C{  public boolean isValidIanaId(Long ianaId){  return ianaIdValidator.apply(ianaId);}  }
class C{  public TimedTeleportScroll(final String name,final String clazz,final String subclass,final Map<String,String> attributes){  super(name,clazz,subclass,attributes);}  }
class C{  public RangeQueryBuilder lte(long to){  this.to=to;  this.includeUpper=true;  return this;}  }
class C{  public static void copyFloats(float[] src,int srcOffset,FloatBuffer dst,int numElements){  if (Build.VERSION.SDK_INT >= 9) {    dst.put(src,srcOffset,numElements);  } else {    com.badlogic.gdx.utils.BufferUtils.copy(src,srcOffset,dst,numElements);  }}  }
class C{  protected XBLOMImportElement(){}  }
class C{  public final CC growX(float w){  hor.setGrow(new Float(w));  return this;}  }
class C{  public void execute(){  RunnableExecutorPair list;synchronized (this) {    if (executed) {      return;    }    executed=true;    list=runnables;    runnables=null;  }  RunnableExecutorPair reversedList=null;  while (list != null) {    RunnableExecutorPair tmp=list;    list=list.next;    tmp.next=reversedList;    reversedList=tmp;  }  while (reversedList != null) {    executeListener(reversedList.runnable,reversedList.executor);    reversedList=reversedList.next;  }}  }
class C{  private String computeApplicationCacheSize(){  long size=0;  size+=mMediasCache.cacheSize();  for (  MXSession session : Matrix.getMXSessions(SettingsActivity.this)) {    if (session.isAlive()) {      size+=session.getDataHandler().getStore().diskUsage();    }  }  return android.text.format.Formatter.formatFileSize(SettingsActivity.this,size);}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (camera != null && previewing) {    previewCallback.setHandler(handler,message);    if (useOneShotPreviewCallback) {      camera.setOneShotPreviewCallback(previewCallback);    } else {      camera.setPreviewCallback(previewCallback);    }  }}  }
class C{  public static boolean isDetectorEnabled(IFindBugsEngine findBugs,DetectorFactory factory,int rankThreshold){  if (!findBugs.getUserPreferences().isDetectorEnabled(factory)) {    return false;  }  if (!factory.isEnabledForCurrentJRE()) {    return false;  }  if (!AnalysisContext.currentAnalysisContext().getBoolProperty(FindBugsAnalysisFeatures.INTERPROCEDURAL_ANALYSIS) && factory.isDetectorClassSubtypeOf(InterproceduralFirstPassDetector.class)) {    return false;  }  int maxRank=Integer.MAX_VALUE;  Set<BugPattern> reportedBugPatterns=factory.getReportedBugPatterns();  boolean isNonReportingDetector=factory.isDetectorClassSubtypeOf(FirstPassDetector.class);  if (!isNonReportingDetector && !reportedBugPatterns.isEmpty()) {    for (    BugPattern b : reportedBugPatterns) {      int rank=BugRanker.findRank(b,factory);      if (maxRank > rank) {        maxRank=rank;      }    }    if (maxRank > rankThreshold) {      if (false) {        System.out.println("Detector " + factory.getShortName() + " has max rank "+ maxRank+ ", disabling");        System.out.println("Reports : " + reportedBugPatterns);      }      return false;    }  }  boolean isTrainingDetector=factory.isDetectorClassSubtypeOf(TrainingDetector.class);  if (findBugs.emitTrainingOutput()) {    return isTrainingDetector || isNonReportingDetector;  }  if (isTrainingDetector) {    return false;  }  return true;}  }
class C{  public void trim(){  int i=order;  int n=0;  while (a[i] == 0.0) {    n++;    i--;  }  if (n > 0) {    double[] b=new double[order + 1 - n];    System.arraycopy(a,0,b,0,a.length - n);    a=b;    order-=n;  }}  }
class C{  public static String formatCData(String text){  return "<![CDATA[" + text.replaceAll("]]>","]]]]><![CDATA[>") + "]]>";}  }
class C{  public static FunctionLib combineFLDs(FunctionLib[] flds){  FunctionLib fl=new FunctionLib();  if (ArrayUtil.isEmpty(flds))   return fl;  setAttributes(flds[0],fl);  for (int i=0; i < flds.length; i++) {    copyFunctions(flds[i],fl);  }  return fl;}  }
class C{  private Collator createFromLocale(String language,String country,String variant){  Locale locale;  if (language != null && country == null && variant != null)   throw new SolrException(ErrorCode.SERVER_ERROR,"To specify variant, country is required"); else   if (language != null && country != null && variant != null)   locale=new Locale(language,country,variant); else   if (language != null && country != null)   locale=new Locale(language,country); else   locale=new Locale(language);  return Collator.getInstance(locale);}  }
class C{  @SuppressWarnings("unchecked") public static final <T>T unmarshall(String toUnmarshall,Class<T> clazz) throws JAXBException {  JAXBContext ctx=JAXBContext.newInstance(clazz.getPackage().getName());  Object unmarshalled=ctx.createUnmarshaller().unmarshal(new StringReader(toUnmarshall));  return (T)unmarshalled;}  }
class C{  @Override public synchronized void close() throws SailException {  if (!openConn) {    return;  }  super.close();  try {    txService.abort(tx);  } catch (  IOException ex) {    throw new SailException(ex);  }}  }
class C{  protected void onPostGet(HttpResponse httpResponse,boolean isInCache){}  }
class C{  public void clearTable(){  WListItemRenderer renderer=null;  getModel().clear();  if (getItemRenderer() instanceof WListItemRenderer) {    renderer=(WListItemRenderer)getItemRenderer();    renderer.clearSelection();  } else {    throw new IllegalArgumentException("Renderer must be instance of WListItemRenderer");  }  return;}  }
class C{  public final Vec2D scaleSelf(float a,float b){  x*=a;  y*=b;  return this;}  }
class C{  public synchronized void add(String category,double value){  mCategories.add(category);  mValues.add(value);}  }
class C{  @Deprecated public static Task convertMiddleEndToFrontEnd(TaskEntity taskEntity){  Task task=new Task();  Task.Entity entity=new Task.Entity();  entity.setId(taskEntity.getEntityId());  entity.setKind(taskEntity.getEntityKind());  task.setEntity(entity);  task.setId(taskEntity.getId());  task.setQueuedTime(taskEntity.getQueuedTime());  task.setStartedTime(taskEntity.getStartedTime());  task.setEndTime(taskEntity.getEndTime());  task.setOperation(taskEntity.getOperation().toString());  task.setState(taskEntity.getState().toString());  if (StringUtils.isNotBlank(taskEntity.getResourceProperties())) {    try {      Object resourceProperties=objectMapper.readValue(taskEntity.getResourceProperties(),Object.class);      task.setResourceProperties(resourceProperties);    } catch (    IOException e) {      throw new IllegalArgumentException(String.format("Error deserializing taskEntity resourceProperties %s, error %s",taskEntity.getResourceProperties(),e.getMessage()));    }  }  List<Step> steps=new ArrayList<>();  taskEntity.getSteps().stream().sorted(null).forEach(null);  task.setSteps(steps);  return task;}  }
class C{  @Before public void before(){  r=new Resource();  Eml eml=new Eml();  r.setEml(eml);  r.setTitle("Ants");  r.setShortname("ants");  eml.setTitle("Ants");  Citation citation=new Citation();  citation.setCitation("Smith J (2013). Ants. GBIF. Dataset");  r.getEml().setCitation(citation);  Calendar cal=Calendar.getInstance();  cal.set(2013,Calendar.JANUARY,9);  Date date=cal.getTime();  eml.setDateStamp(date);  Agent creator=new Agent();  creator.setFirstName("John");  creator.setLastName("Smith");  eml.addCreator(creator);  Organisation o=new Organisation();  o.setName("GBIF");  r.setOrganisation(o);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 194) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  protected Resource createRoot(){  return new RootResource();}  }
class C{  public void checkForActiveFrostWire(){  if (testForFrostWire(null)) {    System.exit(0);  }}  }
class C{  public void addChildren(List<Adm> children){  if (children != null) {    for (    Adm child : children) {      addChild(child);    }  }  ;}  }
class C{  public IComment editLocalComment(final IComment comment,final String newComment) throws com.google.security.zynamics.binnavi.API.disassembly.CouldntSaveDataException {  try {    return m_edge.editLocalComment(comment,newComment);  } catch (  final CouldntSaveDataException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntSaveDataException(exception);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.314 -0500",hash_original_method="EAF848DCFCD435D3CED323F008D83518",hash_generated_method="C0C7BDD10DF621C4F2D590F2E84C235A") private View makeAndAddView(int position,int y,boolean flow,int childrenLeft,boolean selected){  View child;  if (!mDataChanged) {    child=mRecycler.getActiveView(position);    if (child != null) {      if (ViewDebug.TRACE_RECYCLER) {        ViewDebug.trace(child,ViewDebug.RecyclerTraceType.RECYCLE_FROM_ACTIVE_HEAP,position,getChildCount());      }      setupChild(child,position,y,flow,childrenLeft,selected,true);      return child;    }  }  child=obtainView(position,mIsScrap);  setupChild(child,position,y,flow,childrenLeft,selected,mIsScrap[0]);  return child;}  }
class C{  public T caseSynchronization(Synchronization object){  return null;}  }
class C{  public void testDecomposed2() throws Exception {  TokenStream stream=whitespaceMockTokenizer("\u0049\u0316\u0307STANBUL \u0049\u0307ZM\u0049\u0307R I\u0316SPARTA");  TurkishLowerCaseFilter filter=new TurkishLowerCaseFilter(stream);  assertTokenStreamContents(filter,new String[]{"i\u0316stanbul","izmir","\u0131\u0316sparta"});}  }
class C{  @Override public void handleConnect(){  setUser=null;  c.sendCommand("hello",JSONUtil.listToJSON(VERSION,false));  for (  String room : getRooms()) {    subRoom(room);  }  c.sendCommand("ready","0");}  }
class C{  private void updateOUT(int i){  if (out.size() < n) {    out.add(pf[i]);  } else {    HilFeature head=out.peek();    if (pf[i].ubound > head.ubound) {      out.replaceTopElement(pf[i]);    }  }}  }
class C{  public boolean canAttackWithItem(){  return false;}  }
class C{  public TripTimeAllocationMutator(Config config,Provider<TripRouter> tripRouterProvider){  super(config.global());  this.tripRouterProvider=tripRouterProvider;  this.mutationRange=config.timeAllocationMutator().getMutationRange();  this.affectingDuration=config.timeAllocationMutator().isAffectingDuration();  PlansConfigGroup.ActivityDurationInterpretation actDurInterpr=(config.plans().getActivityDurationInterpretation());  if (actDurInterpr == PlansConfigGroup.ActivityDurationInterpretation.minOfDurationAndEndTime) {    useActivityDurations=true;  } else   if (actDurInterpr == PlansConfigGroup.ActivityDurationInterpretation.endTimeOnly) {    useActivityDurations=false;  } else   if (actDurInterpr == PlansConfigGroup.ActivityDurationInterpretation.tryEndTimeThenDuration) {    throw new UnsupportedOperationException("need to clarify the correct setting here.  Probably not a big deal, but not done yet.  kai, aug'10");  } else {    throw new IllegalStateException("beahvior not defined for this configuration setting");  }}  }
class C{  protected void startServer(RPCChannelInitializer channelInitializer){  final ServerBootstrap bootstrap=new ServerBootstrap();  bootstrap.group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).option(ChannelOption.SO_REUSEADDR,true).option(ChannelOption.SO_KEEPALIVE,true).option(ChannelOption.TCP_NODELAY,true).option(ChannelOption.SO_SNDBUF,SEND_BUFFER_SIZE).option(ChannelOption.SO_RCVBUF,SEND_BUFFER_SIZE).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,CONNECT_TIMEOUT).childHandler(channelInitializer);  int port=syncManager.getClusterConfig().getNode().getPort();  InetSocketAddress sa;  String listenAddress=syncManager.getClusterConfig().getListenAddress();  if (listenAddress != null)   sa=new InetSocketAddress(listenAddress,port); else   sa=new InetSocketAddress(port);  ChannelFuture bindFuture=bootstrap.bind(sa);  cg.add(bindFuture.channel());  logger.info("Listening for internal floodlight RPC on {}",sa);}  }
class C{  public final void push(Object value){  ConsCell cell=new ConsCell(value,this.first);  this.first=cell;  if (this.last == null)   this.last=cell;}  }
class C{  ManagedIndexSchema reloadFields(InputSource inputSource,int schemaZkVersion){  ManagedIndexSchema newSchema;  try {    newSchema=shallowCopy(false);    Config schemaConf=new Config(loader,SCHEMA,inputSource,SLASH + SCHEMA + SLASH);    Document document=schemaConf.getDocument();    final XPath xpath=schemaConf.getXPath();    newSchema.loadFields(document,xpath);    newSchema.copyFieldsMap=new HashMap<>();    newSchema.dynamicCopyFields=new DynamicCopy[]{};    newSchema.copyFieldTargetCounts=new HashMap<>();    newSchema.loadCopyFields(document,xpath);    if (null != uniqueKeyField) {      newSchema.requiredFields.add(uniqueKeyField);    }    for (    SchemaAware aware : newSchema.schemaAware) {      aware.inform(newSchema);    }    newSchema.refreshAnalyzers();    newSchema.schemaZkVersion=schemaZkVersion;  } catch (  SolrException e) {    throw e;  }catch (  Exception e) {    throw new SolrException(ErrorCode.SERVER_ERROR,"Schema Parsing Failed: " + e.getMessage(),e);  }  return newSchema;}  }
class C{  UnknownVariableException(String i18n,Object... arguments){  super(i18n,arguments);}  }
class C{  public ReplOption(String option,String value){  this.name=option;  this.value=value;}  }
class C{  public boolean isIndexByKey(){  return _indexByKey;}  }
class C{  private void writeSkeleton(IndentingWriter p) throws IOException {  if (version == STUB_VERSION_1_2) {    throw new Error("should not generate skeleton for version");  }  p.pln("// Skeleton class generated by rmic, do not edit.");  p.pln("// Contents subject to change without notice.");  p.pln();  if (remoteClassName.isQualified()) {    p.pln("package " + remoteClassName.getQualifier() + ";");    p.pln();  }  p.plnI("public final class " + Names.mangleClass(skeletonClassName.getName()));  p.pln("implements " + idSkeleton);  p.pOlnI("{");  writeOperationsArray(p);  p.pln();  writeInterfaceHash(p);  p.pln();  p.plnI("public " + idOperation + "[] getOperations() {");  p.pln("return (" + idOperation + "[]) operations.clone();");  p.pOln("}");  p.pln();  p.plnI("public void dispatch(" + idRemote + " obj, "+ idRemoteCall+ " call, int opnum, long hash)");  p.pln("throws java.lang.Exception");  p.pOlnI("{");  if (version == STUB_VERSION_FAT) {    p.plnI("if (opnum < 0) {");    if (remoteMethods.length > 0) {      for (int opnum=0; opnum < remoteMethods.length; opnum++) {        if (opnum > 0)         p.pO("} else ");        p.plnI("if (hash == " + remoteMethods[opnum].getMethodHash() + "L) {");        p.pln("opnum = " + opnum + ";");      }      p.pOlnI("} else {");    }    p.pln("throw new " + idUnmarshalException + "(\"invalid method hash\");");    if (remoteMethods.length > 0) {      p.pOln("}");    }    p.pOlnI("} else {");  }  p.plnI("if (hash != interfaceHash)");  p.pln("throw new " + idSkeletonMismatchException + "(\"interface hash mismatch\");");  p.pO();  if (version == STUB_VERSION_FAT) {    p.pOln("}");  }  p.pln();  p.pln(remoteClassName + " server = (" + remoteClassName+ ") obj;");  p.plnI("switch (opnum) {");  for (int opnum=0; opnum < remoteMethods.length; opnum++) {    writeSkeletonDispatchCase(p,opnum);  }  p.pOlnI("default:");  p.pln("throw new " + idUnmarshalException + "(\"invalid method number\");");  p.pOln("}");  p.pOln("}");  p.pOln("}");}  }
class C{  public static CCSpriteFrame frame(CCTexture2D texture,CGRect rect,Boolean rotated,CGPoint offset,CGSize originalSize){  return new CCSpriteFrame(texture,rect,offset,originalSize,rotated);}  }
class C{  public List<String> findDeprecatedComponents() throws Exception {  List<String> answer=new ArrayList<>();  Set<ObjectName> camels=findCamelContexts();  for (  ObjectName on : camels) {    List<String> names=findComponentNames(on);    for (    String name : names) {      if (isDeprecatedComponent(name)) {        answer.add(name);      }    }  }  return answer;}  }
class C{  public Rest url(final String urlString){  this.urlString=urlString;  return this;}  }
class C{  public void testComplexEnum() throws Exception {  ObjectMapper mapper=new ObjectMapper();  String json=mapper.writeValueAsString(TimeUnit.HOURS);  assertEquals(quote("HOURS"),json);  TimeUnit result=mapper.readValue(json,TimeUnit.class);  assertSame(TimeUnit.HOURS,result);}  }
class C{  public AnimatableIntegerValue(AnimationTarget target,int v){  super(target);  value=v;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_ENTRY_OR_EXIT_ACTION_2__MORE_CODE_1:    return moreCode_1 != null && !moreCode_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  protected void validateAlternateIdentifier(java.lang.String[] param){}  }
class C{  @Override public int hashCode(){  return type.hashCode() + 8192 * number;}  }
class C{  public DeviceDisplayBase(DeviceDisplayImpl impl){  this.impl=impl;  anim=new NullAnimator("","");  m_tTimeTimer=new javax.swing.Timer(50,new PrintTimeAction());}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.ARROW_FUNCTION__HAS_BRACES_AROUND_BODY:    setHasBracesAroundBody((Boolean)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static void abort(Exception rootE,Exception parentE,MetadataTransactionContext mdTxnCtx){  try {    if (IS_DEBUG_MODE) {      LOGGER.log(Level.SEVERE,rootE.getMessage(),rootE);    }    if (mdTxnCtx != null) {      MetadataManager.INSTANCE.abortTransaction(mdTxnCtx);    }  } catch (  Exception e2) {    parentE.addSuppressed(e2);    throw new IllegalStateException(rootE);  }}  }
class C{  public static int randomNumberInRange(int min,int max){  return min + (int)(Math.random() * ((max - min) + 1));}  }
class C{  public PlayerHasInfostringItemWithHimCondition(final String itemName,final String infostring){  this.itemName=checkNotNull(itemName);  this.infostring=checkNotNull(infostring);}  }
class C{  public DataTypeException(Throwable cause){  super(cause);}  }
class C{  public static EndpointHelpDto fromResourceClass(Class<? extends AbstractResource> resourceClass){  Path path=resourceClass.getAnnotation(Path.class);  Description description=resourceClass.getAnnotation(Description.class);  if (path != null && description != null) {    EndpointHelpDto result=new EndpointHelpDto();    result.setDescription(description.value());    result.setEndpoint(path.value());    return result;  } else {    return null;  }}  }
class C{  public ListenerCollection(Cache<K,V> tcache,Builder<K,V> builder){  this.builder=builder;  this.tcache=tcache;  this.jsr107cache=tcache.jsr107cache();  for (Iterator<CacheEntryListenerConfiguration<K,V>> it=builder.getCacheEntryListenerConfigurations().iterator(); it.hasNext(); ) {    enableCacheEntryListener(it.next());  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:10.266 -0500",hash_original_method="57F823A473B8AE20AA92B1969F9DE507",hash_generated_method="F6D4D9F8B3E5E0232F37E3438B4DA659") public int next(){  return this.icuIterator.next();}  }
class C{  private static final int[] expandToSubKey(int[][] kr,boolean decrypting){  int total=kr.length;  int[] expK=new int[total * 4];  if (decrypting) {    for (int j=0; j < 4; j++) {      expK[j]=kr[total - 1][j];    }    for (int i=1; i < total; i++) {      for (int j=0; j < 4; j++) {        expK[i * 4 + j]=kr[i - 1][j];      }    }  } else {    for (int i=0; i < total; i++) {      for (int j=0; j < 4; j++) {        expK[i * 4 + j]=kr[i][j];      }    }  }  return expK;}  }
class C{  private static String localizeTimestamp(String timestamp){  String localizedTimestamp=timestamp;  if (localizedTimestamp != null && localizedTimestamp.toUpperCase().endsWith("Z")) {    try {      DateTime dt=isoDateTimeParser.parseDateTime(localizedTimestamp);      localizedTimestamp=dfISO8601.print(dt);    } catch (    IllegalArgumentException e) {      log.warn("Could not parse: " + localizedTimestamp);    }  }  return localizedTimestamp;}  }
class C{  @Override public double[] distributionForInstance(Instance inst) throws Exception {  if (m_thresholds != null) {    double[] dist=m_IterativeClassifier.distributionForInstance(inst);    double[] newDist=new double[dist.length];    for (int i=0; i < dist.length; i++) {      if (dist[i] >= m_thresholds[i]) {        newDist[i]=1.0;      }    }    Utils.normalize(newDist);    return newDist;  } else {    return m_IterativeClassifier.distributionForInstance(inst);  }}  }
class C{  public int compareTo(SmallPuzzle tp){  if (s[0] < tp.s[0])   return -1;  if (s[0] > tp.s[0])   return +1;  if (s[1] < tp.s[1])   return -1;  if (s[1] > tp.s[1])   return +1;  return 0;}  }
class C{  public static void classNotMapped(Object sourceClass,Class<?> configuredClass){  String sourceName=sourceClass instanceof Class ? ((Class<?>)sourceClass).getSimpleName() : sourceClass.getClass().getSimpleName();  throw new ClassNotMappedException(MSG.INSTANCE.message(classNotMappedException2,sourceName,configuredClass.getSimpleName()));}  }
class C{  @After @Override public void tearDown() throws Exception {  cleanWorkspace();  waitForAutoBuild();  final BiMap<URI,String> locations=ExternalLibrariesActivator.EXTERNAL_LIBRARIES_SUPPLIER.get();  final URI location=locations.inverse().get(ExternalLibrariesActivator.MANGELHAFT_CATEGORY);  externalLibraryPreferenceStore.remove(location);  final IStatus result=externalLibraryPreferenceStore.save(new NullProgressMonitor());  assertTrue("Error while saving external library preference changes.",result.isOK());  super.tearDown();}  }
class C{  @Override public boolean defaulted(String name) throws IOException, IllegalArgumentException {  return emulatedFields.defaulted(name);}  }
class C{  public static ParsedURLData parseURL(String baseStr,String urlStr){  if (baseStr == null)   return parseURL(urlStr);  ParsedURL purl=new ParsedURL(baseStr);  return parseURL(purl,urlStr);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:19.986 -0500",hash_original_method="4EE79409E957004105525310D650EB01",hash_generated_method="529539D458B0DF619AD23836E4AF8D3C") static State stateFromDCState(DriverCall.State dcState){switch (dcState) {case ACTIVE:    return State.ACTIVE;case HOLDING:  return State.HOLDING;case DIALING:return State.DIALING;case ALERTING:return State.ALERTING;case INCOMING:return State.INCOMING;case WAITING:return State.WAITING;default :throw new RuntimeException("illegal call state:" + dcState);}}  }
class C{  public void showPreferences(){  if (preferencesStage == null) {    preferencesStage=initStage(PREFERENCES_LAYOUT,"Preferences");    PreferencesController preferencesController=(PreferencesController)controllers.get(PREFERENCES_LAYOUT);    preferencesStage.setOnShowing(null);  }  showStage(preferencesStage);}  }
class C{  public Boolean isMachineAccount(){  return machineAccount;}  }
class C{  public static void w(String tag,String msg,Throwable tr){  println(WARN,tag,msg,tr);}  }
class C{  public VecBufferBlocks(int coordsPerVec,String dataType,ByteBuffer buffer){  this(coordsPerVec,dataType,buffer,DEFAULT_INITIAL_CAPACITY);}  }
class C{  public boolean isInRange(){  IntegerVectorSpecies _species=(IntegerVectorSpecies)species;  for (int i=0; i < genomeLength(); i++)   if (genome[i] < _species.minGene(i) || genome[i] > _species.maxGene(i))   return false;  return true;}  }
class C{  public static double logAdd(double[] doubles){  double max=max(doubles).getSecond();  if (max == Double.NEGATIVE_INFINITY)   return max;  double l=0;  for (  double d : doubles) {    if (d == Double.NEGATIVE_INFINITY)     continue;    l+=exp(d - max);  }  if (l > 0)   return max + log(l); else   return max;}  }
class C{  public void deleteNode(String sName) throws Exception {  int nTargetNode=getNode(sName);  deleteNode(nTargetNode);}  }
class C{  public Timestamp(){  this(DEFAULT_FORMAT);}  }
class C{  public void cleanStart(){  Connection conn=getConnection(true,true);  if (conn == null)   throw new IllegalStateException("No Database");  dropDatabase(conn);  createUser(conn);  createDatabase(conn);  try {    if (conn != null)     conn.close();  } catch (  SQLException e2) {    log.log(Level.SEVERE,"close connection",e2);  }  conn=null;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public EchoRequestMessage(EchoRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }}  }
class C{  @Override public String toString(){  return scheme + ":" + defaultPort;}  }
class C{  void advance(double deltaTime){  for (  Spring spring : mActiveSprings) {    if (spring.systemShouldAdvance()) {      spring.advance(deltaTime / 1000.0);    } else {      mActiveSprings.remove(spring);    }  }}  }
class C{  public Binh4(){  super(2,3,2);}  }
class C{  private static BigInteger gcd(BigInteger n,BigInteger d){  BigInteger n1=n;  BigInteger n2=d;  BigInteger gcd=BigInteger.ONE;  for (BigInteger k=BigInteger.ONE; k.compareTo(n1) <= 0 && k.compareTo(n2) <= 0; k=k.add(BigInteger.ONE)) {    if (n1.remainder(k).compareTo(BigInteger.ZERO) == 0 && n2.remainder(k).compareTo(BigInteger.ZERO) == 0)     gcd=k;  }  return gcd;}  }
class C{  @Override public int hashCode(){  return totalSeconds;}  }
class C{  void passCallerStackParams(Type[] argTypes,boolean needThis){  if (argTypes == null || argTypes.length == 0)   return;  int calleeLocalsIndex=0;  for (  Type type : argTypes)   calleeLocalsIndex+=type.getSize();  if (needThis)   calleeLocalsIndex+=1;  int paramNr=argTypes.length - 1;  if (argTypes[paramNr].getSize() == 1) {    calleeLocalsIndex-=1;    mv.visitInsn(DUP);    passCallerStackParam(argTypes[paramNr],paramNr,calleeLocalsIndex);    if (argTypes.length == 1)     return;    paramNr-=1;    if (argTypes[paramNr].getSize() == 1) {      calleeLocalsIndex-=1;      b1a1__b1a1b1();      passCallerStackParam(argTypes[paramNr],paramNr,calleeLocalsIndex);    } else     if (argTypes[paramNr].getSize() == 2) {      calleeLocalsIndex-=2;      b2a1__b2a1b2();      passCallerStackParam(argTypes[paramNr],paramNr,calleeLocalsIndex);    } else     check(false);  } else   if (argTypes[paramNr].getSize() == 2) {    calleeLocalsIndex-=2;    mv.visitInsn(DUP2);    passCallerStackParam(argTypes[paramNr],paramNr,calleeLocalsIndex);    if (argTypes.length == 1)     return;    paramNr-=1;    if (argTypes[paramNr].getSize() == 1) {      calleeLocalsIndex-=1;      b1a2__b1a2b1();      passCallerStackParam(argTypes[paramNr],paramNr,calleeLocalsIndex);    } else     if (argTypes[paramNr].getSize() == 2) {      calleeLocalsIndex-=2;      b2a2__b2a2b2();      passCallerStackParam(argTypes[paramNr],paramNr,calleeLocalsIndex);    } else     check(false);  } else   check(false);}  }
class C{  public BusinessObjectDataEntity createBusinessObjectDataEntity(BusinessObjectFormatEntity businessObjectFormatEntity,String businessObjectDataPartitionValue,List<String> businessObjectDataSubPartitionValues,Integer businessObjectDataVersion,Boolean businessObjectDataLatestVersion,BusinessObjectDataStatusEntity businessObjectDataStatusEntity){  BusinessObjectDataEntity businessObjectDataEntity=new BusinessObjectDataEntity();  businessObjectDataEntity.setVersion(businessObjectDataVersion);  businessObjectDataEntity.setPartitionValue(businessObjectDataPartitionValue);  if (businessObjectDataSubPartitionValues != null) {    businessObjectDataEntity.setPartitionValue2(businessObjectDataSubPartitionValues.size() > 0 ? businessObjectDataSubPartitionValues.get(0) : null);    businessObjectDataEntity.setPartitionValue3(businessObjectDataSubPartitionValues.size() > 1 ? businessObjectDataSubPartitionValues.get(1) : null);    businessObjectDataEntity.setPartitionValue4(businessObjectDataSubPartitionValues.size() > 2 ? businessObjectDataSubPartitionValues.get(2) : null);    businessObjectDataEntity.setPartitionValue5(businessObjectDataSubPartitionValues.size() > 3 ? businessObjectDataSubPartitionValues.get(3) : null);  }  businessObjectDataEntity.setBusinessObjectFormat(businessObjectFormatEntity);  businessObjectDataEntity.setLatestVersion(businessObjectDataLatestVersion);  businessObjectDataEntity.setStatus(businessObjectDataStatusEntity);  BusinessObjectDataStatusHistoryEntity businessObjectDataStatusHistoryEntity=new BusinessObjectDataStatusHistoryEntity();  businessObjectDataStatusHistoryEntity.setBusinessObjectData(businessObjectDataEntity);  businessObjectDataStatusHistoryEntity.setStatus(businessObjectDataStatusEntity);  List<BusinessObjectDataStatusHistoryEntity> businessObjectDataStatusHistoryEntities=new ArrayList<>();  businessObjectDataStatusHistoryEntities.add(businessObjectDataStatusHistoryEntity);  businessObjectDataEntity.setHistoricalStatuses(businessObjectDataStatusHistoryEntities);  return businessObjectDataDao.saveAndRefresh(businessObjectDataEntity);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 126) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static final MediaFormat createAudioFormat(String mime,int sampleRate,int channelCount){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_SAMPLE_RATE,sampleRate);  format.setInteger(KEY_CHANNEL_COUNT,channelCount);  return format;}  }
class C{  public final CC skip(){  setSkip(1);  return this;}  }
class C{  public MicrosoftAccount(IHttpRequestResponse message,String protocol,IBurpExtenderCallbacks callbacks){  super(message,protocol,callbacks);  super.setToken(findToken());  super.setProtocolflowID(analyseProtocol());  add(this,getProtocolflowID());}  }
class C{  public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  public void dispose(){  m_originContainer.removeListener(m_containerListener);}  }
class C{  @Override protected MkAppEntry createRootEntry(){  return new MkAppDirectoryEntry(null,0.,0,0.,null);}  }
class C{  public void removePanels(List<AbstractPanel> panels,PanelType panelType){  validateNotNull(panels,"panels");  validateNotNull(panelType,"panelType");  removePanels(getTabbedFull(),panels);switch (panelType) {case SELECT:    removePanels(getTabbedSelect(),panels);  break;case STATUS:removePanels(getTabbedStatus(),panels);break;case WORK:removePanels(getTabbedWork(),panels);break;default :break;}}  }
class C{  public WatermarkDiskQuotaPolicy(List<Entry> entries){  entries=new ArrayList<>(entries);  Collections.sort(entries,POLICY_COMPARATOR);  this.entries=Collections.unmodifiableList(entries);  double lastHighWaterMark=1.0;  double lastWorkFactor=Throttleable.MAX_WORK_FACTOR;  for (int i=0; i < entries.size(); ++i) {    final Entry entry=entries.get(i);    if (lastHighWaterMark < entry.getHighWaterMarkPercent()) {      throw new IllegalArgumentException("Policy entry " + i + " has high water mark ("+ entry.getHighWaterMarkPercent()+ ") > previous high water mark ("+ lastHighWaterMark+ "):"+ dumpPolicyEntries(entries));    }    if (lastWorkFactor < entry.getWorkFactor()) {      throw new IllegalArgumentException("Policy entry " + i + " has work factor ("+ entry.getWorkFactor()+ ") < previous work factor ("+ lastWorkFactor+ "):"+ dumpPolicyEntries(entries));    }    if (entry.getWorkFactor() < Throttleable.MIN_WORK_FACTOR) {      throw new IllegalArgumentException("Policy entry " + i + " has work factor ("+ entry.getWorkFactor()+ ") < minimum work factor ("+ Throttleable.MIN_WORK_FACTOR+ "):"+ dumpPolicyEntries(entries));    }    lastHighWaterMark=entry.getHighWaterMarkPercent();    lastWorkFactor=entry.getWorkFactor();  }  log.info("Using the following disk quota enforcement entries: {}",entries.isEmpty() ? "NONE" : dumpPolicyEntries(entries));}  }
class C{  @Override public String toString(){  try {    StringWriter stringWriter=new StringWriter();    JsonWriter jsonWriter=new JsonWriter(stringWriter);    jsonWriter.setLenient(true);    Streams.write(this,jsonWriter);    return stringWriter.toString();  } catch (  IOException e) {    throw new AssertionError(e);  }}  }
class C{  public HttpSession(String name,HttpSessionTokensSet tokenNames){  super();  this.name=name;  this.active=false;  this.valid=true;  this.messagesMatched=0;  this.tokenValues=new HashMap<>(1);  this.tokenNames=tokenNames;}  }
class C{  public ViolationMessage(String filePath,int lineNumber,int columnNumber,Severity severity,String violationMessage){  this.filePath=filePath;  this.lineNumber=lineNumber;  this.columnNumber=columnNumber;  this.severity=severity;  this.violationMessage=Messages.TAILOR + violationMessage;}  }
class C{  @Override public void playNewVideo(MetaData currentItemMetaData,VideoPlayerView videoPlayerView,String videoUrl){  if (SHOW_LOGS)   Logger.v(TAG,">> playNewVideo, videoPlayer " + videoPlayerView + ", mCurrentPlayer "+ mCurrentPlayer+ ", videoPlayerView "+ videoPlayerView);  mPlayerHandler.pauseQueueProcessing(TAG);  boolean currentPlayerIsActive=mCurrentPlayer == videoPlayerView;  boolean isAlreadyPlayingTheFile=mCurrentPlayer != null && videoUrl.equals(mCurrentPlayer.getVideoUrlDataSource());  if (SHOW_LOGS)   Logger.v(TAG,"playNewVideo, isAlreadyPlayingTheFile " + isAlreadyPlayingTheFile);  if (SHOW_LOGS)   Logger.v(TAG,"playNewVideo, currentPlayerIsActive " + currentPlayerIsActive);  if (currentPlayerIsActive) {    if (isInPlaybackState() && isAlreadyPlayingTheFile) {      if (SHOW_LOGS)       Logger.v(TAG,"playNewVideo, videoPlayer " + videoPlayerView + " is already in state "+ mCurrentPlayerState);    } else {      startNewPlayback(currentItemMetaData,videoPlayerView,videoUrl);    }  } else {    startNewPlayback(currentItemMetaData,videoPlayerView,videoUrl);  }  mPlayerHandler.resumeQueueProcessing(TAG);  if (SHOW_LOGS)   Logger.v(TAG,"<< playNewVideo, videoPlayer " + videoPlayerView + ", videoUrl "+ videoUrl);}  }
class C{  public Path download(String path,Path destinationDir,String mediaType) throws IOException {  return download(path,"GET",null,mediaType,destinationDir,false);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getExecuteClause_();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgr();  if (uiMgr == null)   return new Float(0); else   return new Float(uiMgr.getOverscanOffsetX() * 1.0f / (uiMgr.getRootPanel().getWidth() * uiMgr.getOverscanScaleWidth()));}  }
class C{  public static String substituteNamedParameters(ParsedSql parsedSql,Map<String,?> paramSource){  String originalSql=parsedSql.getOriginalSql();  StringBuilder actualSql=new StringBuilder();  List<String> paramNames=parsedSql.getParameterNames();  int lastIndex=0;  for (int i=0; i < paramNames.size(); i++) {    String paramName=(String)paramNames.get(i);    int[] indexes=parsedSql.getParameterIndexes(i);    int startIndex=indexes[0];    int endIndex=indexes[1];    actualSql.append(originalSql.substring(lastIndex,startIndex));    if (paramSource != null && paramSource.containsKey(paramName)) {      Object value=paramSource.get(paramName);      if (value instanceof Collection<?>) {        Iterator<?> entryIter=((Collection<?>)value).iterator();        int k=0;        while (entryIter.hasNext()) {          if (k > 0) {            actualSql.append(", ");          }          k++;          Object entryItem=entryIter.next();          if (entryItem instanceof Object[]) {            Object[] expressionList=(Object[])entryItem;            actualSql.append("(");            for (int m=0; m < expressionList.length; m++) {              if (m > 0) {                actualSql.append(", ");              }              actualSql.append("?");            }            actualSql.append(")");          } else {            actualSql.append("?");          }        }      } else {        actualSql.append("?");      }    } else {      throw new InvalidSqlException("The parameter map passed in did not contain a key for the named parameter %s in the SQL:\n %s",paramName,originalSql);    }    lastIndex=endIndex;  }  actualSql.append(originalSql.substring(lastIndex,originalSql.length()));  return actualSql.toString();}  }
class C{  @Override public final void addBezierCurveY(final float x,final float y,final float x3,final float y3){  shape_primitives.addElement(Y);  shape_primitive_x.addElement(x);  shape_primitive_y.addElement(y);  shape_primitive_x2.addElement(0);  shape_primitive_y2.addElement(0);  shape_primitive_x3.addElement(x3);  shape_primitive_y3.addElement(y3);}  }
class C{  public T caseInformationModel(InformationModel object){  return null;}  }
class C{  @Override public final BufferedImage toBufferedImage(Resource res,String format) throws IOException {  if (StringUtil.isEmpty(format))   format=ImageUtil.getFormat(res);  if ("psd".equalsIgnoreCase(format)) {    PSDReader reader=new PSDReader();    InputStream is=null;    try {      reader.read(is=res.getInputStream());      return reader.getImage();    }  finally {      IOUtil.closeEL(is);    }  }  if (JAIUtil.isSupportedReadFormat(format)) {    return JAIUtil.read(res);  }  BufferedImage img=null;  InputStream is=null;  try {    img=ImageIO.read(is=res.getInputStream());  }  finally {    IOUtil.closeEL(is);  }  if (img == null && StringUtil.isEmpty(format)) {    return JAIUtil.read(res);  }  return img;}  }
class C{  public void resetForCAT(){}  }
class C{  public FastVector(){  super();}  }
class C{  @Override public void handleMousePressed(ChartCanvas canvas,MouseEvent e){  this.mousePressedPoint=new Point2D.Double(e.getX(),e.getY());}  }
class C{  public TDoubleDoubleHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("POInfo.Column[");  sb.append(ColumnName).append(",ID=").append(AD_Column_ID).append(",DisplayType=").append(DisplayType).append(",ColumnClass=").append(ColumnClass);  sb.append("]");  return sb.toString();}  }
class C{  public static String generateSPNativeGuidFromSPIndication(Hashtable<String,String> cimIndication) throws IOException {  return generateSPNativeGuidFromIndication(cimIndication,CIMConstants.SOURCE_INSTANCE_MODEL_PATH_INSTANCE_ID);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  private Pair<List<Pair<MavenProject,Module>>,List<Pair<MavenProject,Module>>> collectIncompatibleModulesWithProjects(){  List<Pair<MavenProject,Module>> incompatibleMavenized=new ArrayList<Pair<MavenProject,Module>>();  List<Pair<MavenProject,Module>> incompatibleNotMavenized=new ArrayList<Pair<MavenProject,Module>>();  MavenProjectsManager manager=MavenProjectsManager.getInstance(myProject);  for (  MavenProject each : myAllProjects) {    Module module=myFileToModuleMapping.get(each.getFile());    if (module == null)     continue;    if (shouldCreateModuleFor(each) && !(ModuleType.get(module).equals(each.getModuleType()))) {      (manager.isMavenizedModule(module) ? incompatibleMavenized : incompatibleNotMavenized).add(Pair.create(each,module));    }  }  return Pair.create(incompatibleMavenized,incompatibleNotMavenized);}  }
class C{  private void search(final byte[] data){  m_hexView.uncolorizeAll();  final byte[] hexData=m_hexView.getData().getData();  final List<CSearchResult> results=new ArrayList<>();  for (int i=0; i < hexData.length; i++) {    boolean equal=true;    int counter=0;    for (    final byte element : data) {      if (hexData[i + counter] != element) {        equal=false;        break;      }      counter++;    }    if (equal) {      results.add(new CSearchResult(i,data.length));    }  }  m_model.setResults(results);}  }
class C{  public Coord fromWGS84(Coord wgs84){  if (wgs84.isProjected()) {    return wgs84;  }  return forwardMercator(wgs84.getLatitude(),wgs84.getLongitude());}  }
class C{  @Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){  int visibleRow=state.getVisibleSeriesIndex(row);  if (visibleRow < 0) {    return;  }  Number dataValue=dataset.getValue(row,column);  if (dataValue == null) {    return;  }  double value=dataValue.doubleValue();  Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX(),dataArea.getY() + getYOffset(),dataArea.getWidth() - getXOffset(),dataArea.getHeight() - getYOffset());  PlotOrientation orientation=plot.getOrientation();  double barW0=calculateBarW0(plot,orientation,adjusted,domainAxis,state,visibleRow,column);  double[] barL0L1=calculateBarL0L1(value);  if (barL0L1 == null) {    return;  }  RectangleEdge edge=plot.getRangeAxisEdge();  double transL0=rangeAxis.valueToJava2D(barL0L1[0],adjusted,edge);  double transL1=rangeAxis.valueToJava2D(barL0L1[1],adjusted,edge);  double barL0=Math.min(transL0,transL1);  double barLength=Math.abs(transL1 - transL0);  Rectangle2D bar;  if (orientation.isHorizontal()) {    bar=new Rectangle2D.Double(barL0,barW0,barLength,state.getBarWidth());  } else {    bar=new Rectangle2D.Double(barW0,barL0,state.getBarWidth(),barLength);  }  if (state.getElementHinting()) {    beginElementGroup(g2,dataset.getRowKey(row),dataset.getColumnKey(column));  }  Paint itemPaint=getItemPaint(row,column);  g2.setPaint(itemPaint);  g2.fill(bar);  double x0=bar.getMinX();  double x1=x0 + getXOffset();  double x2=bar.getMaxX();  double x3=x2 + getXOffset();  double y0=bar.getMinY() - getYOffset();  double y1=bar.getMinY();  double y2=bar.getMaxY() - getYOffset();  double y3=bar.getMaxY();  GeneralPath bar3dRight=null;  GeneralPath bar3dTop;  if (barLength > 0.0) {    bar3dRight=new GeneralPath();    bar3dRight.moveTo((float)x2,(float)y3);    bar3dRight.lineTo((float)x2,(float)y1);    bar3dRight.lineTo((float)x3,(float)y0);    bar3dRight.lineTo((float)x3,(float)y2);    bar3dRight.closePath();    g2.setPaint(PaintAlpha.darker(itemPaint));    g2.fill(bar3dRight);  }  bar3dTop=new GeneralPath();  bar3dTop.moveTo((float)x0,(float)y1);  bar3dTop.lineTo((float)x1,(float)y0);  bar3dTop.lineTo((float)x3,(float)y0);  bar3dTop.lineTo((float)x2,(float)y1);  bar3dTop.closePath();  g2.fill(bar3dTop);  if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {    g2.setStroke(getItemOutlineStroke(row,column));    g2.setPaint(getItemOutlinePaint(row,column));    g2.draw(bar);    if (bar3dRight != null) {      g2.draw(bar3dRight);    }    g2.draw(bar3dTop);  }  if (state.getElementHinting()) {    endElementGroup(g2);  }  CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column);  if (generator != null && isItemLabelVisible(row,column)) {    drawItemLabel(g2,dataset,row,column,plot,generator,bar,(value < 0.0));  }  EntityCollection entities=state.getEntityCollection();  if (entities != null) {    GeneralPath barOutline=new GeneralPath();    barOutline.moveTo((float)x0,(float)y3);    barOutline.lineTo((float)x0,(float)y1);    barOutline.lineTo((float)x1,(float)y0);    barOutline.lineTo((float)x3,(float)y0);    barOutline.lineTo((float)x3,(float)y2);    barOutline.lineTo((float)x2,(float)y3);    barOutline.closePath();    addItemEntity(entities,dataset,row,column,barOutline);  }}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  if (qName.equals(PrintData.XML_TAG)) {    pop();  } else   if (qName.equals(PrintDataElement.XML_TAG)) {    m_curPD.addNode(new PrintDataElement(m_curPDEname,m_curPDEvalue.toString(),0,null));  }}  }
class C{  private void testPipeline(){  testPipeline(false);}  }
class C{  private static String stampToString(long tstamp,String formatMask){  StringBuilder sb=new StringBuilder(30);  Formatter fmt=new Formatter(sb,Locale.US);  int[] pieces=new int[NUMIDX];  ComponentTime.unpackBits(tstamp,pieces);  fmt.format(formatMask,pieces[YIDX],pieces[MIDX],pieces[DIDX],pieces[HIDX],pieces[IIDX],pieces[SIDX],pieces[UIDX]);  fmt.close();  return (sb.toString());}  }
class C{  public final int size(){  return m_firstFree;}  }
class C{  static public void addDefaultInfo(Element root){  String content="Written by JMRI version " + jmri.Version.name() + " on "+ (new Date()).toString()+ " $Id$";  Comment comment=new Comment(content);  root.addContent(comment);}  }
class C{  public static void expandTriangleStrip(List<Integer> indices,FloatBuffer inBuf,FloatBuffer outBuf){  if (indices == null) {    String msg=Logging.getMessage("nullValue.ListIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (inBuf == null || outBuf == null) {    String msg=Logging.getMessage("nullValue.BufferIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  int nunTriangles=indices.size() - 2;  if (nunTriangles * 3 * 3 > outBuf.limit() - outBuf.position()) {    String msg=Logging.getMessage("generic.BufferSize",outBuf.limit() - outBuf.position());    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  for (int i=2; i < indices.size(); i++) {    int k=indices.get(i - 2) * 3;    outBuf.put(inBuf.get(k)).put(inBuf.get(k + 1)).put(inBuf.get(k + 2));    k=indices.get(i % 2 == 0 ? i : i - 1) * 3;    outBuf.put(inBuf.get(k)).put(inBuf.get(k + 1)).put(inBuf.get(k + 2));    k=indices.get(i % 2 == 0 ? i - 1 : i) * 3;    outBuf.put(inBuf.get(k)).put(inBuf.get(k + 1)).put(inBuf.get(k + 2));  }}  }
class C{  public static boolean isFilenameValid(String name){  return name != null && name.trim().matches("[^\\\\/?%*:|\"<>]+");}  }
class C{  void invalidatePos(){  if (this.state == IN_MEMORY) {    state=IN_MEMORY_INVALID;  }}  }
class C{  public int hashCode(){  return toString().hashCode();}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public void addBorder(int thickness,Color color,int borderType) throws ExpressionException {  ColorModel cm=image().getColorModel();  if (((cm instanceof IndexColorModel)) && (cm.hasAlpha()) && (!cm.isAlphaPremultiplied())) {    image(paletteToARGB(image()));    cm=image().getColorModel();  }  BufferedImage alpha=null;  if ((cm.getNumComponents() > 3) && (cm.hasAlpha())) {    alpha=getAlpha(image());    image(removeAlpha(image()));  }  if (alpha != null) {    ParameterBlock params1=new ParameterBlock();    params1.addSource(alpha);    params1.add(thickness);    params1.add(thickness);    params1.add(thickness);    params1.add(thickness);    params1.add(new BorderExtenderConstant(new double[]{255D}));    RenderingHints hints=new RenderingHints(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BICUBIC);    hints.add(new RenderingHints(JAI.KEY_REPLACE_INDEX_COLOR_MODEL,Boolean.TRUE));    alpha=JAI.create("border",params1,hints).getAsBufferedImage();  }  ParameterBlock params=new ParameterBlock();  params.addSource(image());  params.add(thickness);  params.add(thickness);  params.add(thickness);  params.add(thickness);  params.add(toBorderExtender(borderType,color));  image(JAI.create("border",params).getAsBufferedImage());  if (alpha != null) {    image(addAlpha(image(),alpha,thickness,thickness));  }}  }
class C{  public static void close(URLConnection conn){  if (conn instanceof HttpURLConnection) {    ((HttpURLConnection)conn).disconnect();  }}  }
class C{  public MockResultSetMetaData(Class clazz) throws SQLException {  this.clazz=clazz;  try {    descriptors=Introspector.getBeanInfo(clazz).getPropertyDescriptors();  } catch (  Exception e) {    throw new SQLException(e.getMessage());  }}  }
class C{  public static final void shuffle(double[] a,Random r){  shuffle(a,0,a.length,r);}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public void handlePresenceSharingInvitation(ContactId contact){  if (sLogger.isActivated()) {    sLogger.debug("Handle event presence sharing invitation");  }}  }
class C{  public static Test suite(){  return (new TestSuite(ImplicitFacetITCase.class));}  }
class C{  public static Data createLiteralLop(ValueType vt,String literalValue) throws LopsException {  return new Data(OperationTypes.READ,null,null,null,literalValue,DataType.SCALAR,vt,false,FileFormatTypes.BINARY);}  }
class C{  public static DoubleVector middle(DoubleVector v1,IntVector v2){  double x=(v1.x + v2.x) / 2d, y=(v1.y + v2.y) / 2d, z=(v1.z + v2.z) / 2d;  return new DoubleVector(x,y,z);}  }
class C{  public boolean login(String remoteName,String username,Token token){  Remote remote;  if (remoteName == null) {    remote=getDefaultRemote();    remoteName=getDefaultRemoteName();  } else {    remote=getRemote(remoteName);  }  if (remote == null) {    System.out.println("Unable to find the given remote '" + remoteName + "'");    return false;  }  String url=remote.getUrl();  Credentials codenvyCredentials=codenvyClient.newCredentialsBuilder().withUsername(username).withToken(token).build();  TokenRetrieverDatastore tokenRetrieverDatastore=new TokenRetrieverDatastore();  tokenRetrieverDatastore.put(username,codenvyCredentials);  Codenvy codenvy=codenvyClient.newCodenvyBuilder(url,username).withCredentials(codenvyCredentials).withCredentialsStoreFactory(tokenRetrieverDatastore).build();  try {    codenvy.user().current().execute();  } catch (  CodenvyException e) {    if (isStackTraceEnabled()) {      throw e;    }    System.out.println("Unable to authenticate for the given credentials on URL '" + url + "'. Check the provided token.");    return false;  }  Token tokenRetrieval=tokenRetrieverDatastore.getToken();  if (tokenRetrieval == null) {    System.out.println("Unable to validate token on URL '" + url + "'");    return false;  }  Preferences preferencesRemotes=globalPreferences.path("remotes");  RemoteCredentials remoteCredentials=new RemoteCredentials();  remoteCredentials.setToken(token.value());  remoteCredentials.setUsername(username);  preferencesRemotes.merge(remoteName,remoteCredentials);  refresh();  return true;}  }
class C{  protected void writeForeignReferences(ForeignKey key,StringBuilder ddl){  for (int idx=0; idx < key.getReferenceCount(); idx++) {    if (idx > 0) {      ddl.append(", ");    }    printIdentifier(key.getReference(idx).getForeignColumnName(),ddl);  }}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  @Override public int executeUpdate(String sql,int autoGeneratedKeys) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("executeUpdate(" + quote(sql) + ", "+ autoGeneratedKeys+ ");");    }    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private CategoryDataset createDataset(){  DefaultCategoryDataset result=new DefaultCategoryDataset();  result.addValue(20.3,"Product 1 (US)","Jan 04");  result.addValue(27.2,"Product 1 (US)","Feb 04");  result.addValue(19.7,"Product 1 (US)","Mar 04");  result.addValue(19.4,"Product 1 (Europe)","Jan 04");  result.addValue(10.9,"Product 1 (Europe)","Feb 04");  result.addValue(18.4,"Product 1 (Europe)","Mar 04");  result.addValue(16.5,"Product 1 (Asia)","Jan 04");  result.addValue(15.9,"Product 1 (Asia)","Feb 04");  result.addValue(16.1,"Product 1 (Asia)","Mar 04");  result.addValue(13.2,"Product 1 (Middle East)","Jan 04");  result.addValue(14.4,"Product 1 (Middle East)","Feb 04");  result.addValue(13.7,"Product 1 (Middle East)","Mar 04");  result.addValue(23.3,"Product 2 (US)","Jan 04");  result.addValue(16.2,"Product 2 (US)","Feb 04");  result.addValue(28.7,"Product 2 (US)","Mar 04");  result.addValue(12.7,"Product 2 (Europe)","Jan 04");  result.addValue(17.9,"Product 2 (Europe)","Feb 04");  result.addValue(12.6,"Product 2 (Europe)","Mar 04");  result.addValue(15.4,"Product 2 (Asia)","Jan 04");  result.addValue(21.0,"Product 2 (Asia)","Feb 04");  result.addValue(11.1,"Product 2 (Asia)","Mar 04");  result.addValue(23.8,"Product 2 (Middle East)","Jan 04");  result.addValue(23.4,"Product 2 (Middle East)","Feb 04");  result.addValue(19.3,"Product 2 (Middle East)","Mar 04");  result.addValue(11.9,"Product 3 (US)","Jan 04");  result.addValue(31.0,"Product 3 (US)","Feb 04");  result.addValue(22.7,"Product 3 (US)","Mar 04");  result.addValue(15.3,"Product 3 (Europe)","Jan 04");  result.addValue(14.4,"Product 3 (Europe)","Feb 04");  result.addValue(25.3,"Product 3 (Europe)","Mar 04");  result.addValue(23.9,"Product 3 (Asia)","Jan 04");  result.addValue(19.0,"Product 3 (Asia)","Feb 04");  result.addValue(10.1,"Product 3 (Asia)","Mar 04");  result.addValue(13.2,"Product 3 (Middle East)","Jan 04");  result.addValue(15.5,"Product 3 (Middle East)","Feb 04");  result.addValue(10.1,"Product 3 (Middle East)","Mar 04");  return result;}  }
class C{  private void cleanUp(ProtectionSystem protectionSystem,DbClient dbClient){  handlePersistence(dbClient,true);  Set<URI> umpsetsFoundInDbForProtectionSystem=DiscoveryUtils.getAllUnManagedProtectionSetsForSystem(dbClient,protectionSystem.getId().toString());  SetView<URI> onlyFoundInDb=Sets.difference(umpsetsFoundInDbForProtectionSystem,unManagedCGsReturnedFromProvider);  if (onlyFoundInDb != null && !onlyFoundInDb.isEmpty()) {    Iterator<UnManagedProtectionSet> umpsesToDelete=dbClient.queryIterativeObjects(UnManagedProtectionSet.class,onlyFoundInDb,true);    while (umpsesToDelete.hasNext()) {      UnManagedProtectionSet umps=umpsesToDelete.next();      log.info("Deleting orphaned UnManagedProtectionSet {} no longer found on RecoverPoint device.",umps.getNativeGuid());      dbClient.markForDeletion(umps);    }  }  unManagedCGsInsert=null;  unManagedCGsUpdate=null;  unManagedVolumesToDelete=null;  unManagedVolumesToUpdateByWwn=null;  unManagedCGsReturnedFromProvider=null;}  }
class C{  private void sortNodes(){  if (mNeedsSort) {    mSortedNodes.clear();    ArrayList<Node> roots=new ArrayList<Node>();    int numNodes=mNodes.size();    for (int i=0; i < numNodes; ++i) {      Node node=mNodes.get(i);      if (node.dependencies == null || node.dependencies.size() == 0) {        roots.add(node);      }    }    ArrayList<Node> tmpRoots=new ArrayList<Node>();    while (roots.size() > 0) {      int numRoots=roots.size();      for (int i=0; i < numRoots; ++i) {        Node root=roots.get(i);        mSortedNodes.add(root);        if (root.nodeDependents != null) {          int numDependents=root.nodeDependents.size();          for (int j=0; j < numDependents; ++j) {            Node node=root.nodeDependents.get(j);            node.nodeDependencies.remove(root);            if (node.nodeDependencies.size() == 0) {              tmpRoots.add(node);            }          }        }      }      roots.clear();      roots.addAll(tmpRoots);      tmpRoots.clear();    }    mNeedsSort=false;    if (mSortedNodes.size() != mNodes.size()) {      throw new IllegalStateException("Circular dependencies cannot exist" + " in AnimatorSet");    }  } else {    int numNodes=mNodes.size();    for (int i=0; i < numNodes; ++i) {      Node node=mNodes.get(i);      if (node.dependencies != null && node.dependencies.size() > 0) {        int numDependencies=node.dependencies.size();        for (int j=0; j < numDependencies; ++j) {          Dependency dependency=node.dependencies.get(j);          if (node.nodeDependencies == null) {            node.nodeDependencies=new ArrayList<Node>();          }          if (!node.nodeDependencies.contains(dependency.node)) {            node.nodeDependencies.add(dependency.node);          }        }      }      node.done=false;    }  }}  }
class C{  public void fullTest(final EvolutionState state,final Individual ind,final int threadnum,boolean[][] pos,boolean[][] neg){  numNodes=2;  numEdges=1;  from[0]=0;  to[0]=1;  start[0]=start[1]=accept[0]=accept[1]=false;  ((EdgeData)input).edge=0;  ((GPIndividual)ind).trees[0].child.eval(state,threadnum,input,stack,((GPIndividual)ind),this);  if (reading1.length < numNodes || reading1[0].length < numEdges) {    reading1=new int[numNodes * 2][numEdges * 2];    reading0=new int[numNodes * 2][numEdges * 2];    epsilon=new int[numNodes * 2][numEdges * 2];    reading1_l=new int[numNodes * 2];    reading0_l=new int[numNodes * 2];    epsilon_l=new int[numNodes * 2];  }  for (int y=0; y < numNodes; y++) {    reading1_l[y]=0;    reading0_l[y]=0;    epsilon_l[y]=0;  }  for (int y=0; y < numEdges; y++) switch (reading[y]) {case READING0:    reading0[from[y]][reading0_l[from[y]]++]=to[y];  break;case READING1:reading1[from[y]][reading1_l[from[y]]++]=to[y];break;case EPSILON:epsilon[from[y]][epsilon_l[from[y]]++]=to[y];break;default :state.output.fatal("Invalid case " + reading[y] + " in Edge.fullTest()");break;}if (state1.length < numNodes) {state1=new boolean[numNodes * 2];state2=new boolean[numNodes * 2];}totpos=0;totneg=0;for (int y=0; y < pos.length; y++) if (test(pos[y])) totpos++;for (int y=0; y < neg.length; y++) if (!test(neg[y])) totneg++;}  }
class C{  public InSequenceNotification(){  super(null);}  }
class C{  private int convertLocationToRowInColumn(int y,int column){  int x=0;  if (layoutOrientation != JList.VERTICAL) {    if (isLeftToRight) {      x=column * cellWidth;    } else {      x=list.getWidth() - (column + 1) * cellWidth - list.getInsets().right;    }  }  return convertLocationToRow(x,y,true);}  }
class C{  public final <E extends Throwable>Mono<T> otherwise(Class<E> type,Function<? super E,? extends Mono<? extends T>> fallback){  Objects.requireNonNull(type,"type");  @SuppressWarnings("unchecked") Function<? super Throwable,Mono<? extends T>> handler=(Function<? super Throwable,Mono<? extends T>>)fallback;  return otherwise(null,handler);}  }
class C{  public void makeSelectable(){  if (!isEnabled()) {    setEnabled(true);    setSelected(myIsSelectedWhenSelectable);  }}  }
class C{  private void paintCheckIconEnabled(Graphics2D g,int width,int height){  g.setPaint(iconEnabled);  g.drawRoundRect(0,1,width - 1,height - 2,4,4);}  }
class C{  public JEditorDoublePositive(){}  }
class C{  @After public void tearDown() throws Throwable {  if (this.vmState != null) {    try {      deleteDocument(this.host,this.vmState.documentSelfLink);    } catch (    Throwable deleteEx) {      host.log(Level.WARNING,"Exception deleting VM - %s",deleteEx.getMessage());    }  }  if (this.computeHost != null) {    try {      deleteDocument(this.host,this.computeHost.documentSelfLink);    } catch (    Throwable deleteEx) {      host.log(Level.WARNING,"Exception deleting VM - %s",deleteEx.getMessage());    }  }  if (!this.isMock) {    deleteInstances(this.host,this.compute,this.projectID,this.zoneID,this.instancesToCleanUp,this.batchSize,this.waitIntervalInMillisecond);  }}  }
class C{  public final int numBags(){  return m_perBag.length;}  }
class C{  public boolean isPure(java.lang.reflect.Method method){  String className=method.getDeclaringClass().getName();  if (MockList.isAMockClass(className)) {    className=method.getDeclaringClass().getSuperclass().getName();  }  String methodName=method.getName();  String descriptor=Type.getMethodDescriptor(method);  MethodEntry entry=new MethodEntry(className,methodName,descriptor);  boolean isPureValue=isPure(entry);  return isPureValue;}  }
class C{  synchronized JSONObject toJSON() throws JSONException {  JSONObject json=new JSONObject();  json.put("history",history.toJSON());  return json;}  }
class C{  public static void cleanFiles(Context context){  deleteFilesInDirectory(context.getFilesDir());}  }
class C{  public int E(){  return E;}  }
class C{  public static void subtract(int[] n1,int[] n2,int[] result,int[] sign){  int b=n1.length - 1;  int carry=0;  boolean smaller=(compareTo(n2,n1) < 0);  while (b >= 0) {    int s=n1[b] - n2[b];    if (!smaller) {      s=-s;    }    s+=carry;    if (s >= 0) {      result[b]=s;      carry=0;    } else {      carry=-1;      result[b]=s + 10;    }    b--;  }  if (!smaller) {    sign[0]=-1;  } else {    sign[0]=carry + 0;  }}  }
class C{  public void testMatchingStrings() throws ConfigurationException, ServerRuntimeException {  String[] s0={};  String[] s1={"abcd"};  String[] s2={"defg","abcd"};  String[] s3={"hijk","abcd","defg"};  String[] s4={"0123","defg","hijl","abcd"};  String[] s5={"0123","0234"};  Assert.assertArrayEquals(s0,SecurityHelper.getMatchingStrings(s0,s1));  Assert.assertArrayEquals(s0,SecurityHelper.getMatchingStrings(s3,s0));  Assert.assertArrayEquals(s1,SecurityHelper.getMatchingStrings(s1,s1));  Assert.assertArrayEquals(s1,SecurityHelper.getMatchingStrings(s2,s1));  Assert.assertArrayEquals(s1,SecurityHelper.getMatchingStrings(s3,s1));  String[] intersection=SecurityHelper.getMatchingStrings(s3,s4);  Arrays.sort(intersection);  Assert.assertArrayEquals(new String[]{"abcd","defg"},intersection);  Assert.assertArrayEquals(s0,SecurityHelper.getMatchingStrings(s3,s5));}  }
class C{  public void allowCheckStateShadow(boolean allow){  if (allow != mAllowCheckStateShadow) {    mAllowCheckStateShadow=allow;    setShadowInternal(mShadowRadius,mShadowColor,true);  }}  }
class C{  public Argument addForm(final String aliasName){  forms.add(aliasName);  return this;}  }
class C{  public String stringAt(int index){  if (index >= this.index) {    throw new ArrayIndexOutOfBoundsException();  }  return array[index];}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.EXECUTION_REGION__DEEP_ENTER_SEQUENCE:    setDeepEnterSequence((Sequence)null);  return;case SexecPackage.EXECUTION_REGION__SHALLOW_ENTER_SEQUENCE:setShallowEnterSequence((Sequence)null);return;case SexecPackage.EXECUTION_REGION__HISTORY_VECTOR:setHistoryVector((StateVector)null);return;case SexecPackage.EXECUTION_REGION__NODES:getNodes().clear();return;}super.eUnset(featureID);}  }
class C{  public static float[] resize(float buffer[],int newSize){  float temp[]=new float[newSize];  System.arraycopy(buffer,0,temp,0,buffer.length >= newSize ? newSize : buffer.length);  return temp;}  }
class C{  @CalledOnlyBy(AmidstThread.EDT) public boolean calculateIsEnabled(int layerId,Dimension dimension,boolean enableAllLayers){  return declarations.get(layerId).calculateIsEnabled(dimension,enableAllLayers);}  }
class C{  void internalSetName(Name name){  supportedOnlyIn2();  if (name == null) {    throw new IllegalArgumentException();  }  ASTNode oldChild=this.typeName;  preReplaceChild(oldChild,name,NAME_PROPERTY);  this.typeName=name;  postReplaceChild(oldChild,name,NAME_PROPERTY);}  }
class C{  public void populateCache(String query,Iterator<Map<String,Object>> rowIterator){  Map<String,Object> aRow=null;  DIHCache cache=queryVsCache.get(query);  while ((aRow=getNextFromCache(query,rowIterator)) != null) {    cache.add(aRow);  }}  }
class C{  public RangeQueryBuilder lt(int to){  this.to=to;  this.includeUpper=false;  return this;}  }
class C{  private boolean tryToNotifyReset(){  if ((mStatus == PTR_STATUS_COMPLETE || mStatus == PTR_STATUS_PREPARE) && mPtrIndicator.isInStartPosition()) {    if (mPtrUIHandlerHolder.hasHandler()) {      mPtrUIHandlerHolder.onUIReset(this);      if (DEBUG) {        PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIReset");      }    }    mStatus=PTR_STATUS_INIT;    clearFlag();    return true;  }  return false;}  }
class C{  public boolean isConfidentialType(String ConfidentialType){  String ct=getConfidentialType();  if (ConfidentialType == null || CONFIDENTIALTYPE_PublicInformation.equals(ct))   return true;  if (CONFIDENTIALTYPE_PartnerConfidential.equals(ct)) {    return CONFIDENTIALTYPE_PartnerConfidential.equals(ConfidentialType);  } else   if (CONFIDENTIALTYPE_PrivateInformation.equals(ct)) {    return CONFIDENTIALTYPE_Internal.equals(ConfidentialType) || CONFIDENTIALTYPE_PrivateInformation.equals(ConfidentialType);  } else   if (CONFIDENTIALTYPE_Internal.equals(ct)) {    return CONFIDENTIALTYPE_Internal.equals(ConfidentialType);  }  return false;}  }
class C{  public byte[] readPageIntoStream(final PdfObject pdfObject){  final byte[][] pageContents=pdfObject.getKeyArray(PdfDictionary.Contents);  byte[] binary_data=new byte[0];  if (pageContents == null || (pageContents != null && pageContents.length > 0 && pageContents[0] == null)) {    return binary_data;  }  if (pageContents != null) {    final int count=pageContents.length;    byte[] decoded_stream_data;    PdfObject streamData;    for (int ii=0; ii < count; ii++) {      streamData=new StreamObject(new String(pageContents[ii]));      streamData.isDataExternal(pdfObject.isDataExternal());      readObject(streamData);      decoded_stream_data=streamData.getDecodedStream();      if (ii == 0 && decoded_stream_data != null) {        binary_data=decoded_stream_data;      } else {        binary_data=appendData(binary_data,decoded_stream_data);      }    }  }  return binary_data;}  }
class C{  public boolean isEncodingVerificationEnabled(){  return enableEncodingVerification;}  }
class C{  public boolean isUnsubscribeSupported(){  return isSubscriptionSupported();}  }
class C{  public void cancelExistingAnimation(@NonNull final View view){  int hashCode=view.hashCode();  Animator animator=mAnimators.get(hashCode);  if (animator != null) {    animator.end();    mAnimators.remove(hashCode);  }}  }
class C{  public EditorListCellRenderer(Class<?> editorClass,Class<?> valueClass){  m_EditorClass=editorClass;  m_ValueClass=valueClass;}  }
class C{  public String patternToString(List<LockPatternView.Cell> pattern){  if (pattern == null) {    return "";  }  final int patternSize=pattern.size();  byte[] res=new byte[patternSize];  for (int i=0; i < patternSize; i++) {    LockPatternView.Cell cell=pattern.get(i);    res[i]=(byte)(cell.getRow() * getLockPatternSize() + cell.getColumn());  }  return new String(res);}  }
class C{  public static File createTempDir(){  return createTempDir(new File(System.getProperty("java.io.tmpdir")));}  }
class C{  protected void clearCurrentText(){  this.currentText.delete(0,this.currentText.length());}  }
class C{  @Override public void clearTextField(String obj) throws UiObjectNotFoundException {  getUiObject(obj).clearTextField();}  }
class C{  public DefaultDrawingEditor(){  toolHandler=new ToolHandler();  setDefaultAttribute(FILL_COLOR,Color.white);  setDefaultAttribute(STROKE_COLOR,Color.black);  setDefaultAttribute(TEXT_COLOR,Color.black);  views=new HashSet<DrawingView>();  inputMap=createInputMap();  actionMap=createActionMap();}  }
class C{  protected Composite createFilterControls(Composite parent){  createFilterText(parent);  createClearText(parent);  if (this.clearButtonControl != null) {    this.clearButtonControl.setVisible(false);  }  return parent;}  }
class C{  private void buildQuery(SearchRequestBuilder searchReq,ParseResult info){  String[] types=new String[info.getSources().size()];  for (int i=0; i < info.getSources().size(); i++)   types[i]=info.getSources().get(i).getSource();  SearchRequestBuilder req=searchReq.setTypes(types);  if (info.getAggregation() != null) {    if (info.getQuery() != null)     req.setQuery(info.getQuery());    req.addAggregation(info.getAggregation());  } else   if (info.getQuery() != null) {    if (info.getRequestScore())     req.setQuery(info.getQuery()); else     req.setPostFilter(info.getQuery());    for (    OrderBy ob : info.getSorts()) {      req.addSort(ob.getField(),ob.getOrder());    }  } else   req.setQuery(QueryBuilders.matchAllQuery());  this.limit=info.getLimit();  if (splitRS)   maxRowsRS=fetchSize;  if (info.getAggregation() != null) {    req=req.setSize(0);  } else {    if (limit > 0 && limit < fetchSize) {      req.setSize(limit);    } else {      req.setSize(fetchSize);      req.setScroll(new TimeValue(Utils.getIntProp(props,Utils.PROP_SCROLL_TIMEOUT_SEC,60) * 1000));      if (info.getSorts().isEmpty())       req.addSort("_doc",SortOrder.ASC);    }  }  if (info.getUseCache())   req.setRequestCache(true);  req.setTimeout(TimeValue.timeValueMillis(Utils.getIntProp(props,Utils.PROP_QUERY_TIMEOUT_MS,10000)));}  }
class C{  public static <T>Select<T> from(Class<T> dataObjectClass){  return new Select<T>(dataObjectClass);}  }
class C{  public static BigDecimal paid(int p_C_Invoice_ID,int p_C_Currency_ID,int p_MultiplierAP) throws SQLException {  if (p_C_Invoice_ID == 0 || p_C_Currency_ID == 0)   return null;  BigDecimal MultiplierAP=new BigDecimal((double)p_MultiplierAP);  if (p_MultiplierAP == 0)   MultiplierAP=Adempiere.ONE;  int C_ConversionType_ID=0;  BigDecimal paymentAmt=allocatedAmt(p_C_Invoice_ID,p_C_Currency_ID,C_ConversionType_ID,MultiplierAP);  return Currency.round(paymentAmt,p_C_Currency_ID,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.912 -0500",hash_original_method="60C6DD13258E5D92FEA078E8C5222031",hash_generated_method="271B53BA67E51E525EF7141EC3F65BC7") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public boolean addRecipient(RelayPath path) throws IOException {  return SMTPReply.isPositiveCompletion(rcpt(path.toString()));}  }
class C{  public boolean writeIndex(int[][] indexData,int layerType){  return writeIndex(indexData,layerType,new double[]{-90,-180,90,180});}  }
class C{  public IndTestProbabilistic(DataSet dataSet){  if (!dataSet.isDiscrete()) {    throw new IllegalArgumentException("Not a discrete data set.");  }  this.data=dataSet;  int[] nodeDimensions=new int[dataSet.getNumColumns() + 2];  for (int j=0; j < dataSet.getNumColumns(); j++) {    DiscreteVariable variable=(DiscreteVariable)(dataSet.getVariable(j));    int numCategories=variable.getNumCategories();    System.out.println("Variable " + variable + " # cat = "+ numCategories);    nodeDimensions[j + 1]=numCategories;  }  int[][] cases=new int[dataSet.getNumRows() + 1][dataSet.getNumColumns() + 2];  for (int i=0; i < dataSet.getNumRows(); i++) {    for (int j=0; j < dataSet.getNumColumns(); j++) {      cases[i + 1][j + 1]=dataSet.getInt(i,j) + 1;    }  }  bci=new BCInference(cases,nodeDimensions);  nodes=dataSet.getVariables();  indices=new HashMap<>();  for (int i=0; i < nodes.size(); i++) {    indices.put(nodes.get(i),i);  }  this.H=new HashMap<>();}  }
class C{  static Object[] formatArgsToStrings(final Object... args){  Object[] params=null;  if (args != null) {    params=new Object[args.length];    for (int counter=0; counter < args.length; counter++) {      params[counter]=format(args[counter]);    }  }  return params;}  }
class C{  private InputStream openResponseEntity(State state,HttpResponse response) throws StopRequest {  try {    return response.getEntity().getContent();  } catch (  IOException ex) {    logNetworkState();    throw new StopRequest(getFinalStatusForHttpError(state),"while getting entity: " + ex.toString(),ex);  }}  }
class C{  public void resetHandlers(){  getDispatchHandler().resetHandlers();}  }
class C{  public boolean isOnSunday(){  Object oo=get_Value(COLUMNNAME_OnSunday);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void sendMapDimensions(MapSettings settings){  send(new Packet(Packet.COMMAND_SENDING_MAP_DIMENSIONS,settings));}  }
class C{  public PersianNormalizationFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public Set<String> values(){  Set<String> values=new HashSet<String>();  for (  String key : codes.keySet()) {    values.add(codes.getString(key));  }  return values;}  }
class C{  public Not(){  super(Boolean.class,Boolean.class);}  }
class C{  public static int nextPrime(int desiredCapacity){  int i=java.util.Arrays.binarySearch(primeCapacities,desiredCapacity);  if (i < 0) {    i=-i - 1;  }  return primeCapacities[i];}  }
class C{  public boolean hasAverage(){  return super.hasAttribute(AVERAGE);}  }
class C{  private static void jcmd(String... command) throws IOException, InterruptedException {  if (command.length == 0) {    jcmd(null,(Consumer<String>)null);  } else {    jcmd(null,command);  }}  }
class C{  public KeyIdentifier(DerValue val) throws IOException {  octetString=val.getOctetString();}  }
class C{  public static String randomString(String sampler,int length){  StringBuilder builder=new StringBuilder(length);  for (int i=0; i < length; i++)   builder.append(sampler.charAt(SEEDED_RANDOM.nextInt(sampler.length())));  return builder.toString();}  }
class C{  public boolean rowDeleted() throws SQLException {  if (isAfterLast() == true || isBeforeFirst() == true || onInsertRow == true) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.invalidcp").toString());  }  return (((Row)getCurrentRow()).getDeleted());}  }
class C{  public RuntimeCryptoException(String message){  super(message);}  }
class C{  public String reportTotals(){  final long elapsed=elapsed();  final long nterms=db.getTermCount();  final long nstmts=db.getStatementCount();  final double tps=(long)(((double)nstmts) / ((double)elapsed) * 1000d);  return "Database: #terms=" + nterms + ", #stmts="+ nstmts+ ", rate="+ tps+ " in "+ elapsed+ " ms.";}  }
class C{  @Override public byte[] toByteArray() throws IOException {  ByteArrayDataOutput byteArrayDataOutput=ByteStreams.newDataOutput();  this.comparator.write(byteArrayDataOutput);  return byteArrayDataOutput.toByteArray();}  }
class C{  @Override public CGSize clone(){  return new CGSize(width,height);}  }
class C{  @Override public void initialize() throws ReplicatorException, InterruptedException {  if (createCatalog) {    logger.info("Initializing data source tables: service=" + serviceName + " schema="+ connectionSpec.getSchema());    Database conn=null;    try {      if (this.connectionSpec.supportsCreateDB()) {        if (checkDBConnectivity(false,true)) {          logger.info("Confirmed DBMS connection");        } else {          logger.info("Attempting to create schema via JDBC");          checkDBConnectivity(true,false);        }      } else {        checkDBConnectivity(false,false);        logger.info("Confirmed DBMS connection");      }      conn=connectionManager.getCatalogConnection();      String schema=connectionSpec.getSchema();      if (conn.supportsUseDefaultSchema() && schema != null) {        if (conn.supportsCreateDropSchema()) {          conn.createSchema(schema);        }        conn.useDefaultSchema(schema);      }      commitSeqno.initialize();      Table consistency=ConsistencyTable.getConsistencyTableDefinition(schema);      if (conn.findTungstenTable(consistency.getSchema(),consistency.getName()) == null) {        conn.createTable(consistency,false,connectionSpec.getTableType());      }      HeartbeatTable heartbeatTable=new HeartbeatTable(schema,connectionSpec.getTableType(),serviceName);      heartbeatTable.initializeHeartbeatTable(conn);      ShardTable shardTable=new ShardTable(schema,connectionSpec.getTableType());      shardTable.initializeShardTable(conn);      channelTable=new ShardChannelTable(schema,connectionSpec.getTableType());      channelTable.initializeShardTable(conn,this.channels);    } catch (    SQLException e) {      throw new ReplicatorException("Unable to create catalog tables",e);    } finally {      if (conn != null) {        connectionManager.releaseCatalogConnection(conn);      }    }  }}  }
class C{  public synchronized TypeInstanceReference loadInstanceReference(final Integer typeInstanceId,final BigInteger address,final Integer position,final Integer expressionId) throws CouldntLoadDataException {  Preconditions.checkNotNull(typeInstanceId,"Error: typeInstanceId argument can not be null");  Preconditions.checkNotNull(address,"Error: address argument can not be null");  Preconditions.checkNotNull(position,"Error: position argument can not be null");  Preconditions.checkNotNull(expressionId,"Error: expressionId argument can not be null");  final TypeInstanceReference reference=backend.loadTypeInstanceReference(typeInstanceId,address,position,expressionId);  referencesByInstance.put(reference.getTypeInstance(),reference);  return reference;}  }
class C{  private boolean recursiveTraverseAndPrune(Cell cell,Shape shape,int detailLevel,List<Cell> result){  if (!(cell instanceof LegacyCell))   throw new IllegalStateException("pruneLeafyBranches must be disabled for use with grid " + grid);  if (cell.getLevel() == detailLevel) {    cell.setLeaf();  }  if (cell.isLeaf()) {    result.add(cell);    return true;  }  if (cell.getLevel() != 0)   result.add(cell);  int leaves=0;  CellIterator subCells=cell.getNextLevelCells(shape);  while (subCells.hasNext()) {    Cell subCell=subCells.next();    if (recursiveTraverseAndPrune(subCell,shape,detailLevel,result))     leaves++;  }  if (leaves == ((LegacyCell)cell).getSubCellsSize() && cell.getLevel() != 0) {    do {      result.remove(result.size() - 1);    } while (--leaves > 0);    cell.setLeaf();    return true;  }  return false;}  }
class C{  public void decClientsWithCqs(){  this._stats.incLong(_numClientsWithCqsId,-1);}  }
class C{  @Deprecated static public EcosTrafficController instance(){  return self;}  }
class C{  @SuppressWarnings("unchecked") private void notifyImageListeners(ImageEvent te){  ArrayList<ImageListener> l;synchronized (this) {    l=(ArrayList<ImageListener>)m_imageListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      l.get(i).acceptImage(te);    }  }}  }
class C{  private static double remainderTwoPiFast(double angle){  if (USE_JDK_MATH) {    return remainderTwoPi(angle);  }  boolean negateResult;  if (angle < 0.0) {    negateResult=true;    angle=-angle;  } else {    negateResult=false;  }  if (angle <= TWO_POW_26 * (2 * Math.PI)) {    double fn=(double)(int)(angle * INVTWOPI + 0.5);    double result=(angle - fn * TWOPI_HI) - fn * TWOPI_LO;    return negateResult ? -result : result;  } else   if (angle <= TWO_POW_52 * (2 * Math.PI)) {    double fn=(double)(int)(angle * (INVTWOPI / TWO_POW_26) + 0.5);    double result=(angle - fn * (TWOPI_HI * TWO_POW_26)) - fn * (TWOPI_LO * TWO_POW_26);    if (result < 0.0) {      result=-result;      negateResult=!negateResult;    }    fn=(double)(int)(result * INVTWOPI + 0.5);    result=(result - fn * TWOPI_HI) - fn * TWOPI_LO;    return negateResult ? -result : result;  } else   if (angle < Double.POSITIVE_INFINITY) {    return 0.0;  } else {    return Double.NaN;  }}  }
class C{  private void fixOnMeasure(int widthMeasureSpec,int heightMeasureSpec){  CharSequence text=getText();  if (text instanceof Spanned) {    SpannableStringBuilder builder=new SpannableStringBuilder(text);    fixSpannedWithSpaces(builder,widthMeasureSpec,heightMeasureSpec);  } else {    Logger.d(TAG,"The text isn't a Spanned");    fallbackToString(widthMeasureSpec,heightMeasureSpec);  }}  }
class C{  public DefaultTreeForTreeLayout(TreeNode root){  super(root);}  }
class C{  public static ReflectUtils on(String name) throws ReflectException {  return on(forName(name));}  }
class C{  public boolean isCyclic(){  return isCyclic;}  }
class C{  private void advanceToNextRun(){  while (_runBitsReturned == _curRunLen && _nextBmOffset < _bmLen) {    _runBitsReturned=0;    char delta=_bmPtr[_bmOff + _nextBmOffset];    _runStartOffset+=delta + _curRunLen;    _curRunLen=_bmPtr[_bmOff + _nextBmOffset + 1];    _nextBmOffset+=2;  }}  }
class C{  final DialogOption showYesNoMessage(String message){  return showYesNoMessage(message,I18n.tr("Message"));}  }
class C{  @Override public int hashCode(){  int result=127;  result=HashUtilities.hashCode(result,this.formatPattern);  return result;}  }
class C{  public synchronized void paintIcon(Component c,Graphics g,int x,int y){  if (imageObserver == null) {    g.drawImage(image,x,y,c);  } else {    g.drawImage(image,x,y,imageObserver);  }}  }
class C{  public boolean hasPort(){  return port >= 0;}  }
class C{  public static byte[] fromAscii(char[] ascii){  if (ascii == null || ascii.length == 0) {    return EMPTY_BYTE_ARRAY;  }  byte[] l_raw=new byte[ascii.length >> 3];  for (int ii=0, jj=ascii.length - 1; ii < l_raw.length; ii++, jj-=8) {    for (int bits=0; bits < BITS.length; ++bits) {      if (ascii[jj - bits] == '1') {        l_raw[ii]|=BITS[bits];      }    }  }  return l_raw;}  }
class C{  public StrBuilder deleteFirst(final StrMatcher matcher){  return replace(matcher,null,0,size,1);}  }
class C{  public void testDoubleSortMissingFirst() throws Exception {  checkSortMissingFirst("doubledv_missingfirst","-1.3","4.2");}  }
class C{  private Object readResolve(){  Chronology base=getBase();  return base == null ? getInstanceUTC() : getInstance(base.getZone());}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  @Override public List<WorkOrder> searchWOForBilling(final Map<String,Object> criteriaMap){  logger.debug("-------------------------Inside searchWOForBilling-----------------------");  final List<WorkOrder> filteredList=new ArrayList<WorkOrder>();  criteriaMap.put(ACTION_FLAG,"searchWOForBilling");  for (  final WorkOrder workorder : searchWO(criteriaMap))   if (!isWOValidforBill(workorder.getId()))   filteredList.add(workorder);  return filteredList;}  }
class C{  public ObjectMatrix2D assign(ObjectMatrix2D source){  if (!(source instanceof DenseObjectMatrix2D)) {    return super.assign(source);  }  DenseObjectMatrix2D other=(DenseObjectMatrix2D)source;  if (other == this)   return this;  checkShape(other);  if (this.isNoView && other.isNoView) {    System.arraycopy(other.elements,0,this.elements,0,this.elements.length);    return this;  }  if (haveSharedCells(other)) {    ObjectMatrix2D c=other.copy();    if (!(c instanceof DenseObjectMatrix2D)) {      return super.assign(other);    }    other=(DenseObjectMatrix2D)c;  }  final Object[] elems=this.elements;  final Object[] otherElems=other.elements;  if (elements == null || otherElems == null)   throw new InternalError();  int cs=this.columnStride;  int ocs=other.columnStride;  int rs=this.rowStride;  int ors=other.rowStride;  int otherIndex=other.index(0,0);  int index=index(0,0);  for (int row=rows; --row >= 0; ) {    for (int i=index, j=otherIndex, column=columns; --column >= 0; ) {      elems[i]=otherElems[j];      i+=cs;      j+=ocs;    }    index+=rs;    otherIndex+=ors;  }  return this;}  }
class C{  public static byte[] splitUint8To2bytes(char uint8){  if (uint8 < 0 || uint8 > 0xff) {    throw new RuntimeException("Out of Boundary");  }  String hexString=Integer.toHexString(uint8);  byte low;  byte high;  if (hexString.length() > 1) {    high=(byte)Integer.parseInt(hexString.substring(0,1),16);    low=(byte)Integer.parseInt(hexString.substring(1,2),16);  } else {    high=0;    low=(byte)Integer.parseInt(hexString.substring(0,1),16);  }  byte[] result=new byte[]{high,low};  return result;}  }
class C{  public void writeAttr(String name,String value) throws IOException {  if (state != IN_TAG)   throw new IllegalStateException();  out.write(" ");  out.write(name);  out.write("=");  boolean alpha=true;  for (int i=0; i < value.length() && alpha; i++)   alpha=Character.isLetter(value.charAt(i));  if (!alpha)   out.write("\"");  out.write(value);  if (!alpha)   out.write("\"");}  }
class C{  public void updatePacketSize(final BigDecimal packetSize){  mRepeatPacketSize=mRepeatPacketSize.add(packetSize);}  }
class C{  public void rollback() throws SQLException {  conn.rollback();  rs=null;}  }
class C{  protected void sequence_displayBlock(ISerializationContext context,Block semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private boolean isConnected(){  return this.connected;}  }
class C{  public void add(int fromStreamIndex,EventBean[] row){  List<EventBean[]> rows=rowsPerStream[fromStreamIndex];  if (rows == null) {    rows=new LinkedList<EventBean[]>();    rowsPerStream[fromStreamIndex]=rows;  }  rows.add(row);}  }
class C{  public KeyCertificateEntry tryGetV1Cert(){  String pemCertAndKey=valuesHolder.getV1Cert();  KeyCertificateEntry returnedEntry=null;  if (!StringUtils.isBlank(pemCertAndKey)) {    int pemKeyStart=pemCertAndKey.indexOf(PEM_BEGIN_RSA_PRIVATE_KEY);    int pemKeyEnd=pemCertAndKey.indexOf(PEM_END_RSA_PRIVATE_KEY) + PEM_END_RSA_PRIVATE_KEY.length();    int pemCertStart=pemCertAndKey.indexOf(PEM_BEGIN_CERT);    int pemCertEnd=pemCertAndKey.lastIndexOf(PEM_END_CERT) + PEM_END_CERT.length();    log.info("pemKeyStart = " + pemKeyStart + ", pemKeyEnd = "+ pemKeyEnd+ ", pemCertStart = "+ pemCertStart+ ", pemCertEnd = "+ pemCertEnd);    if (pemKeyStart != -1 && pemKeyEnd != -1 && pemCertStart != -1 && pemCertEnd != -1) {      String pemKey=pemCertAndKey.substring(pemKeyStart,pemKeyEnd);      String pemCert=pemCertAndKey.substring(pemCertStart,pemCertEnd);      pemKey=StringUtils.replace(pemKey,"\\n","\n");      pemCert=StringUtils.replace(pemCert,"\\n","\n");      log.info("pemCert = " + pemCert);      try {        Certificate[] certChain=getCertificateChainFromString(pemCert);        byte[] keyBytes=SecurityUtil.loadPrivateKeyFromPEMString(pemKey);        if (!ArrayUtils.isEmpty(certChain) && !ArrayUtils.isEmpty(keyBytes)) {          log.info("parsed key and certificate successfully");          returnedEntry=new KeyCertificateEntry(keyBytes,certChain);        }      } catch (      CertificateException e) {        log.error("Could not load v1 certificate chain",e);      }catch (      Exception e) {        log.error("Could not load v1 key",e);      }    }  }  return returnedEntry;}  }
class C{  private boolean areFiltersPassed(Object object){  ViewerFilter[] filters=getFilters();  if (null != filters) {    for (    ViewerFilter filer : filters) {      if (!filer.select(this,getParentElement(object),object)) {        return false;      }    }  }  return true;}  }
class C{  @SuppressWarnings("element-type-mismatch") public boolean isCommandButton(Object button){  return commandButtons.containsKey(button);}  }
class C{  private void writeCommonEventData(BinaryRawWriterEx writer,EventAdapter evt){  PlatformUtils.writeIgniteUuid(writer,evt.id());  writer.writeLong(evt.localOrder());  writeNode(writer,evt.node());  writer.writeString(evt.message());  writer.writeInt(evt.type());  writer.writeString(evt.name());  writer.writeTimestamp(new Timestamp(evt.timestamp()));}  }
class C{  @Override public int hashCode(){  return keyMap.hashCode();}  }
class C{  private void internalWrite(byte[] b,int off,int len,boolean finish) throws IOException {  coder.output=embiggen(coder.output,coder.maxOutputSize(len));  if (!coder.process(b,off,len,finish)) {    throw new Base64DataException("bad base-64");  }  out.write(coder.output,0,coder.op);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static void saveBinary(File saveTo,Object model,Instances header) throws IOException {  ObjectOutputStream os=new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(saveTo)));  os.writeObject(model);  if (header != null) {    os.writeObject(header);  }  os.close();}  }
class C{  public MaterializeBuilder withRootView(@IdRes int rootViewRes){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  return withRootView((ViewGroup)mActivity.findViewById(rootViewRes));}  }
class C{  public URI(URI p_base,String p_uriSpec) throws MalformedURIException {  initialize(p_base,p_uriSpec);}  }
class C{  public static String infoAll(AerospikeClient client,String cmd){  Node[] nodes=client.getNodes();  StringBuilder results=new StringBuilder();  for (  Node node : nodes) {    results.append(Info.request(node.getHost().name,node.getHost().port,cmd)).append("\n");  }  return results.toString();}  }
class C{  private static String matchablePath(String path){  if (path == null) {    return "/";  } else   if (path.endsWith("/")) {    return path;  } else {    return path + "/";  }}  }
class C{  @Override public boolean supportsPositionedUpdate(){  debugCodeCall("supportsPositionedUpdate");  return true;}  }
class C{  public ConvertedClosure(Closure closure,String method){  super(closure);  this.methodName=method;}  }
class C{  public <E extends Layout,AE extends VLArray<E>,EE extends Layout>GenVLArray(Class<E> elementInterfaceClass,Class<AE> userDefinedArrayClass){  elementInterfaceClassName=ImplHelper.getInterfaceClassName(elementInterfaceClass);  elementImplClassName=ImplHelper.getImplClassName(elementInterfaceClass);  if (null == userDefinedArrayClass) {    arrayImplClassName=ImplHelper.getVLArrayClassImplName(elementInterfaceClass);    arrayInterfaceClassName="com/ibm/layout/VLArray";    arrayInterfaceClassSig="L" + arrayInterfaceClassName + "<L"+ elementInterfaceClassName+ ";>;";  } else {    arrayImplClassName=LayoutHelper.getVLAImplClassName(userDefinedArrayClass).replace('.','/');    arrayInterfaceClassName=userDefinedArrayClass.getName().replace('.','/');    arrayInterfaceClassSig=null;  }}  }
class C{  public void validateParameters(List<Parameter> parameters){  if (!CollectionUtils.isEmpty(parameters)) {    Set<String> parameterNameValidationSet=new HashSet<>();    for (    Parameter parameter : parameters) {      Assert.hasText(parameter.getName(),"A parameter name must be specified.");      parameter.setName(parameter.getName().trim());      String lowercaseParameterName=parameter.getName().toLowerCase();      Assert.isTrue(!parameterNameValidationSet.contains(lowercaseParameterName),"Duplicate parameter name found: " + parameter.getName());      parameterNameValidationSet.add(lowercaseParameterName);    }  }}  }
class C{  public Support_ProviderTrust(){  super(NAME,VERSION,INFO);  registerServices();}  }
class C{  static String[] splitOnTokens(String text){  if (text.indexOf('?') == -1 && text.indexOf('*') == -1) {    return new String[]{text};  }  char[] array=text.toCharArray();  ArrayList<String> list=new ArrayList<String>();  StringBuilder buffer=new StringBuilder();  for (int i=0; i < array.length; i++) {    if (array[i] == '?' || array[i] == '*') {      if (buffer.length() != 0) {        list.add(buffer.toString());        buffer.setLength(0);      }      if (array[i] == '?') {        list.add("?");      } else       if (list.isEmpty() || i > 0 && list.get(list.size() - 1).equals("*") == false) {        list.add("*");      }    } else {      buffer.append(array[i]);    }  }  if (buffer.length() != 0) {    list.add(buffer.toString());  }  return list.toArray(new String[list.size()]);}  }
class C{  private JCTree capturedDecl(int depth,Symbol sym){  int currentDepth=frameStack.size() - 1;  for (  Frame block : frameStack) {switch (block.tree.getTag()) {case CLASSDEF:      ClassSymbol clazz=((JCClassDecl)block.tree).sym;    if (sym.isMemberOf(clazz,types)) {      return currentDepth > depth ? null : block.tree;    }  break;case VARDEF:if (((JCVariableDecl)block.tree).sym == sym && sym.owner.kind == MTH) {  return currentDepth > depth ? null : block.tree;}break;case BLOCK:case METHODDEF:case LAMBDA:if (block.locals != null && block.locals.contains(sym)) {return currentDepth > depth ? null : block.tree;}break;default :Assert.error("bad decl kind " + block.tree.getTag());}currentDepth--;}return null;}  }
class C{  public DataPoint(Vec numericalValues,int[] categoricalValues,CategoricalData[] categoricalData){  this(numericalValues,categoricalValues,categoricalData,1);}  }
class C{  public int sourceLength(){  return src.length;}  }
class C{  private synchronized void block(boolean tf){  if (tf) {    try {      if (m_ioThread.isAlive()) {        wait();      }    } catch (    InterruptedException ex) {    }  } else {    notifyAll();  }}  }
class C{  private Transform match(Class type) throws Exception {  Transform transform=matcher.match(type);  if (transform != null) {    cache.cache(type,transform);  } else {    error.cache(type,this);  }  return transform;}  }
class C{  public void unload() throws StartupException {  SplashLoader.close();}  }
class C{  private void persistNodeRecoveryStatus(RecoveryStatus status){  log.info("Set node recovery status: {}",status);  if (status == null) {    return;  }  ConfigurationImpl cfg=new ConfigurationImpl();  cfg.setKind(Constants.NODE_RECOVERY_STATUS);  cfg.setId(Constants.GLOBAL_ID);  cfg.setConfig(RecoveryConstants.RECOVERY_STATUS,status.getStatus().toString());  if (status.getStartTime() != null) {    cfg.setConfig(RecoveryConstants.RECOVERY_STARTTIME,String.valueOf(status.getStartTime().getTime()));  }  if (status.getEndTime() != null) {    cfg.setConfig(RecoveryConstants.RECOVERY_ENDTIME,String.valueOf(status.getEndTime().getTime()));  }  if (status.getErrorCode() != null) {    cfg.setConfig(RecoveryConstants.RECOVERY_ERRCODE,status.getErrorCode().toString());  }  coordinator.getCoordinatorClient().persistServiceConfiguration(cfg);  log.debug("Persist node recovery status({}) to zk successfully",status);}  }
class C{  public IThumbnailStreamRequest buildRequest(){  return buildRequest(getOptions());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String toString(){  return "Wrapped" + socket.toString();}  }
class C{  public static void murmur3(final BitVector bv,final long seed,final long[] h){  long h1=0x9368e53c2f6af274L ^ seed;  long h2=0x586dcd208f7cd3fdL ^ seed;  long c1=0x87c37b91114253d5L;  long c2=0x4cf5ad432745937fL;  long from=0;  final long length=bv.length();  long k1, k2;  while (length - from >= Long.SIZE * 2) {    k1=bv.getLong(from,from + Long.SIZE);    k2=bv.getLong(from + Long.SIZE,from+=2 * Long.SIZE);    k1*=c1;    k1=Long.rotateLeft(k1,23);    k1*=c2;    h1^=k1;    h1+=h2;    h2=Long.rotateLeft(h2,41);    k2*=c2;    k2=Long.rotateLeft(k2,23);    k2*=c1;    h2^=k2;    h2+=h1;    h1=h1 * 3 + 0x52dce729;    h2=h2 * 3 + 0x38495ab5;    c1=c1 * 5 + 0x7b7d159c;    c2=c2 * 5 + 0x6bce6396;  }  if (length > from) {    if (length - from > Long.SIZE) {      k1=bv.getLong(from,from + Long.SIZE);      k2=bv.getLong(from + Long.SIZE,length);    } else {      k1=bv.getLong(from,length);      k2=0;    }    k1*=c1;    k1=Long.rotateLeft(k1,23);    k1*=c2;    h1^=k1;    h1+=h2;    h2=Long.rotateLeft(h2,41);    k2*=c2;    k2=Long.rotateLeft(k2,23);    k2*=c1;    h2^=k2;    h2+=h1;    h1=h1 * 3 + 0x52dce729;    h2=h2 * 3 + 0x38495ab5;    c1=c1 * 5 + 0x7b7d159c;    c2=c2 * 5 + 0x6bce6396;  }  h2^=length;  h1+=h2;  h2+=h1;  h1=finalizeMurmur3(h1);  h2=finalizeMurmur3(h2);  h1+=h2;  h2+=h1;  h[0]=h1;  h[1]=h2;}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    if (!useOneShotPreviewCallback) {      camera.setPreviewCallback(null);    }    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public void paintCurrentValueBackground(Graphics g,Rectangle bounds,boolean hasFocus){  Color t=g.getColor();  if (comboBox.isEnabled())   g.setColor(DefaultLookup.getColor(comboBox,this,"ComboBox.background",null)); else   g.setColor(DefaultLookup.getColor(comboBox,this,"ComboBox.disabledBackground",null));  g.fillRect(bounds.x,bounds.y,bounds.width,bounds.height);  g.setColor(t);}  }
class C{  public boolean free(final int addr,final int size,final boolean overideSession){  if (addr < 0) {    final int offset=((-addr) & RWStore.OFFSET_BITS_MASK) - 3;    final int nbits=32 * m_bitSize;    final int block=offset / nbits;    final boolean tmp=m_sessionActive;    m_sessionActive=tmp || m_store.isSessionProtected();    if (tmp && !m_sessionActive)     throw new AssertionError();    try {      if (s_islogDebug)       checkBits();      if (((AllocBlock)m_allocBlocks.get(block)).freeBit(offset % nbits,m_sessionActive && !overideSession)) {        m_freeBits++;        checkFreeList();      } else {        m_freeTransients++;        if (m_sessionActive) {          assert checkSessionFrees();        }      }      if (m_statsBucket != null) {        m_statsBucket.delete(size);      }    } catch (    IllegalArgumentException iae) {      throw new IllegalArgumentException("IAE with address: " + addr + ", size: "+ size+ ", context: "+ (m_context == null ? -1 : m_context.hashCode()),iae);    }    if (s_islogDebug)     checkBits();    return true;  } else   if (addr >= m_startAddr && addr < m_endAddr) {    final Iterator<AllocBlock> iter=m_allocBlocks.iterator();    while (iter.hasNext()) {      final AllocBlock block=iter.next();      if (block.free(addr,m_size)) {        m_freeTransients++;        if (s_islogDebug)         checkBits();        return true;      }    }  }  if (s_islogDebug)   checkBits();  return false;}  }
class C{  private Node addWaiter(Node mode){  Node node=new Node(Thread.currentThread(),mode);  Node pred=tail;  if (pred != null) {    node.prev=pred;    if (compareAndSetTail(pred,node)) {      pred.next=node;      return node;    }  }  enq(node);  return node;}  }
class C{  public boolean hasChanged(){  if (getValue() != null)   if (m_oldValue != null)   return !m_oldValue.equals(getValue()); else   return true; else   if (m_oldValue != null)   return true; else   return false;}  }
class C{  public void increaseTextPrintPosition(double inc){  textPrintPosition+=inc;}  }
class C{  protected void commit(){  if (!isValid()) {    if (fDocumentUndoManager.fFoldingIntoCompoundChange) {      fDocumentUndoManager.fCurrent=createCurrent();    } else {      reinitialize();    }  } else {    updateTextChange();    fDocumentUndoManager.fCurrent=createCurrent();  }  fDocumentUndoManager.resetProcessChangeState();}  }
class C{  public boolean parse(String query){  Matcher matcher=Pattern.compile(EXCHANGE_REGEX,Pattern.CASE_INSENSITIVE).matcher(query);  if (!matcher.matches()) {    return false;  }  String exchangeFromTable=matcher.group("exchangeFromTable");  String exchangeToTable=matcher.group("exchangeToTable");  String partitionSpec=matcher.group("partitionSpec");  exchangeFromTableSpec=getSpec(exchangeFromTable);  exchangeToTableSpec=getSpec(exchangeToTable);  partitionName=getPartitionName(partitionSpec);  partitionValues=getPartitionValues(partitionSpec);  return true;}  }
class C{  public void reset() throws IOException {  setLength(0);  this.init();}  }
class C{  public void addRaster(float lt,float ln,int w,int h,int[] pix,LinkProperties properties) throws IOException {  LinkRaster.write(lt,ln,w,h,pix,properties,link.dos);}  }
class C{  public void writeToParcel(Parcel dest,int flags){  dest.writeString(deviceName);  dest.writeString(deviceAddress);  dest.writeString(primaryDeviceType);  dest.writeString(secondaryDeviceType);  dest.writeInt(wpsConfigMethodsSupported);  dest.writeInt(deviceCapability);  dest.writeInt(groupCapability);  dest.writeInt(status);  if (wfdInfo != null) {    dest.writeInt(1);    wfdInfo.writeToParcel(dest,flags);  } else {    dest.writeInt(0);  }}  }
class C{  public void readHttpHeader(final BufferedReader reader) throws IOException {  int p;  String line;  while ((line=reader.readLine()) != null) {    if (line.isEmpty())     break;    if ((p=line.indexOf(':')) >= 0) {      add(line.substring(0,p).trim(),line.substring(p + 1).trim());    }  }}  }
class C{  public Component add(Component c,int index){  ensurePopupMenuCreated();  popupMenu.add(c,index);  return c;}  }
class C{  public Anonymous_strictness_1_ createAnonymous_strictness_1_(){  Anonymous_strictness_1_Impl anonymous_strictness_1_=new Anonymous_strictness_1_Impl();  return anonymous_strictness_1_;}  }
class C{  private void removeVolatile(final RPObject player){  if (player.has(AWAY)) {    player.remove(AWAY);  }  if (player.has(GRUMPY)) {    player.remove(GRUMPY);  }}  }
class C{  private static String byteToHex(byte[] digest){  StringBuilder builder=new StringBuilder();  for (  byte b : digest) {    String hex=Integer.toHexString(0xff & b);    if (hex.length() == 1) {      builder.append('0');    }    builder.append(hex);  }  return builder.toString();}  }
class C{  public GF2Polynomial(int length,byte[] os){  int l=length;  if (l < 1) {    l=1;  }  blocks=((l - 1) >> 5) + 1;  value=new int[blocks];  len=l;  int i, m;  int k=Math.min(((os.length - 1) >> 2) + 1,blocks);  for (i=0; i < k - 1; i++) {    m=os.length - (i << 2) - 1;    value[i]=(os[m]) & 0x000000ff;    value[i]|=(os[m - 1] << 8) & 0x0000ff00;    value[i]|=(os[m - 2] << 16) & 0x00ff0000;    value[i]|=(os[m - 3] << 24) & 0xff000000;  }  i=k - 1;  m=os.length - (i << 2) - 1;  value[i]=os[m] & 0x000000ff;  if (m > 0) {    value[i]|=(os[m - 1] << 8) & 0x0000ff00;  }  if (m > 1) {    value[i]|=(os[m - 2] << 16) & 0x00ff0000;  }  if (m > 2) {    value[i]|=(os[m - 3] << 24) & 0xff000000;  }  zeroUnusedBits();  reduceN();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:54.960 -0500",hash_original_method="F4F3467BB97348451E47DFFA6F639AA9",hash_generated_method="76EBC7E710B0D567D0D74BB124E00A63") public final void clearPassword(){  Arrays.fill(password,'?');  password=null;}  }
class C{  public void releaseService(BeanContextServices bcs,Object requestor,Object service){  backBCS.releaseService(BeanContextServicesSupport.this.getBeanContextServicesPeer(),requestor,service);}  }
class C{  private void defineMenus(UIDefaults d){  d.put("menuItemBackgroundBase",new Color(0x5b7ea4));  String c=PAINTER_PREFIX + "MenuPainter";  String p="Menu";  d.put(p + ".contentMargins",new InsetsUIResource(1,12,2,5));  d.put(p + "[Disabled].textForeground",d.get("seaGlassDisabledText"));  d.put(p + "[Enabled].textForeground",new ColorUIResource(Color.BLACK));  d.put(p + "[Enabled+Selected].textForeground",new ColorUIResource(Color.WHITE));  d.put(p + "[Enabled+Selected].backgroundPainter",new LazyPainter(c,MenuPainter.Which.BACKGROUND_ENABLED_SELECTED));  d.put(p + "[Disabled].arrowIconPainter",new LazyPainter(c,MenuPainter.Which.ARROWICON_DISABLED));  d.put(p + "[Enabled].arrowIconPainter",new LazyPainter(c,MenuPainter.Which.ARROWICON_ENABLED));  d.put(p + "[Enabled+Selected].arrowIconPainter",new LazyPainter(c,MenuPainter.Which.ARROWICON_ENABLED_SELECTED));  d.put(p + ".arrowIcon",new SeaGlassIcon(p + "","arrowIconPainter",9,10));  d.put(p + ".checkIcon",new SeaGlassIcon(p + "","checkIconPainter",6,10));  p="Menu:MenuItemAccelerator";  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + "[MouseOver].textForeground",new ColorUIResource(Color.WHITE));  c=PAINTER_PREFIX + "MenuBarPainter";  p="MenuBar";  d.put(p + ".contentMargins",new InsetsUIResource(2,6,2,6));  if (d.get(p + "[Enabled].backgroundPainter") != null) {    d.remove(p + "[Enabled].backgroundPainter");  }  if (d.get(p + "[Enabled].borderPainter") != null) {    d.remove(p + "[Enabled].borderPainter");  }  c=PAINTER_PREFIX + "MenuItemPainter";  p="MenuBar:Menu";  d.put(p + ".States","Enabled,Selected,Disabled,NotUnified");  d.put(p + ".NotUnified",new MenuNotUnified());  d.put(p + ".contentMargins",new InsetsUIResource(1,4,2,4));  d.put(p + "[Disabled].textForeground",d.getColor("seaGlassDisabledText"));  d.put(p + "[Enabled].textForeground",new ColorUIResource(Color.WHITE));  d.put(p + "[Selected].textForeground",new ColorUIResource(Color.BLACK));  d.put(p + "[Selected].backgroundPainter",new LazyPainter(c,MenuItemPainter.Which.BACKGROUND_MOUSEOVER_UNIFIED));  d.put(p + "[Enabled+NotUnified].textForeground",new ColorUIResource(Color.BLACK));  d.put(p + "[Enabled+Selected+NotUnified].textForeground",new ColorUIResource(Color.WHITE));  d.put(p + "[Enabled+Selected+NotUnified].backgroundPainter",new LazyPainter(c,MenuItemPainter.Which.BACKGROUND_MOUSEOVER));  p="MenuBar:Menu:MenuItemAccelerator";  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  c=PAINTER_PREFIX + "MenuItemPainter";  p="MenuItem";  d.put(p + ".contentMargins",new InsetsUIResource(1,12,2,13));  d.put(p + ".textIconGap",new Integer(5));  d.put(p + ".acceleratorFont",new DerivedFont("defaultFont",1.0f,null,null));  d.put(p + "[Disabled].textForeground",d.getColor("seaGlassDisabledText"));  d.put(p + "[Enabled].textForeground",new ColorUIResource(Color.BLACK));  d.put(p + "[MouseOver].textForeground",new ColorUIResource(Color.WHITE));  d.put(p + "[MouseOver].backgroundPainter",new LazyPainter(c,MenuItemPainter.Which.BACKGROUND_MOUSEOVER));  p="MenuItem:MenuItemAccelerator";  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + "[Disabled].textForeground",d.getColor("seaGlassDisabledText"));  d.put(p + "[MouseOver].textForeground",new ColorUIResource(Color.WHITE));  c=PAINTER_PREFIX + "CheckBoxMenuItemPainter";  p="CheckBoxMenuItem";  d.put(p + ".contentMargins",new InsetsUIResource(1,12,2,13));  d.put(p + ".textIconGap",new Integer(5));  d.put(p + "[Disabled].textForeground",d.getColor("seaGlassDisabledText"));  d.put(p + "[Enabled].textForeground",new ColorUIResource(Color.BLACK));  d.put(p + "[MouseOver].textForeground",new ColorUIResource(Color.WHITE));  d.put(p + "[MouseOver].backgroundPainter",new LazyPainter(c,CheckBoxMenuItemPainter.Which.BACKGROUND_MOUSEOVER));  d.put(p + "[MouseOver+Selected].textForeground",new ColorUIResource(Color.WHITE));  d.put(p + "[MouseOver+Selected].backgroundPainter",new LazyPainter(c,CheckBoxMenuItemPainter.Which.BACKGROUND_SELECTED_MOUSEOVER));  d.put(p + "[Disabled+Selected].checkIconPainter",new LazyPainter(c,CheckBoxMenuItemPainter.Which.CHECKICON_DISABLED_SELECTED));  d.put(p + "[Enabled+Selected].checkIconPainter",new LazyPainter(c,CheckBoxMenuItemPainter.Which.CHECKICON_ENABLED_SELECTED));  d.put(p + "[Enabled].checkIconPainter",new LazyPainter(c,CheckBoxMenuItemPainter.Which.CHECKICON_ENABLED));  d.put(p + "[MouseOver].checkIconPainter",new LazyPainter(c,CheckBoxMenuItemPainter.Which.CHECKICON_ENABLED_MOUSEOVER));  d.put(p + "[MouseOver+Selected].checkIconPainter",new LazyPainter(c,CheckBoxMenuItemPainter.Which.CHECKICON_SELECTED_MOUSEOVER));  d.put(p + ".checkIcon",new SeaGlassIcon(p,"checkIconPainter",9,10));  p="CheckBoxMenuItem:MenuItemAccelerator";  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + "[MouseOver].textForeground",new ColorUIResource(Color.WHITE));  c=PAINTER_PREFIX + "RadioButtonMenuItemPainter";  p="RadioButtonMenuItem";  d.put(p + ".contentMargins",new InsetsUIResource(1,12,2,13));  d.put(p + ".textIconGap",new Integer(5));  d.put(p + "[Disabled].textForeground",d.getColor("seaGlassDisabledText"));  d.put(p + "[Enabled].textForeground",new ColorUIResource(Color.BLACK));  d.put(p + "[MouseOver].textForeground",new ColorUIResource(Color.WHITE));  d.put(p + "[MouseOver].backgroundPainter",new LazyPainter(c,RadioButtonMenuItemPainter.Which.BACKGROUND_MOUSEOVER));  d.put(p + "[MouseOver+Selected].textForeground",new ColorUIResource(Color.WHITE));  d.put(p + "[MouseOver+Selected].backgroundPainter",new LazyPainter(c,RadioButtonMenuItemPainter.Which.BACKGROUND_SELECTED_MOUSEOVER));  d.put(p + "[Disabled+Selected].checkIconPainter",new LazyPainter(c,RadioButtonMenuItemPainter.Which.CHECKICON_DISABLED_SELECTED));  d.put(p + "[Enabled+Selected].checkIconPainter",new LazyPainter(c,RadioButtonMenuItemPainter.Which.CHECKICON_ENABLED_SELECTED));  d.put(p + "[Enabled].checkIconPainter",new LazyPainter(c,RadioButtonMenuItemPainter.Which.CHECKICON_ENABLED));  d.put(p + "[MouseOver].checkIconPainter",new LazyPainter(c,RadioButtonMenuItemPainter.Which.CHECKICON_ENABLED_MOUSEOVER));  d.put(p + "[MouseOver+Selected].checkIconPainter",new LazyPainter(c,RadioButtonMenuItemPainter.Which.CHECKICON_SELECTED_MOUSEOVER));  d.put(p + ".checkIcon",new SeaGlassIcon(p,"checkIconPainter",9,10));  p="RadioButtonMenuItem:MenuItemAccelerator";  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + "[MouseOver].textForeground",new ColorUIResource(Color.WHITE));}  }
class C{  public void deleteFanIn(){  List<Synapse> fanInList=getFanInList();  fanIn.clear();  for (  Synapse synapse : fanInList) {    parent.removeSynapse(synapse);  }}  }
class C{  public CliDiagnosticListener(final PrintStream err,final PrintStream out){  mErr=err;  mOut=out;}  }
class C{  static UnitValue parseAlignKeywords(String s,boolean isHor){  if (startsWithLenient(s,"center",1,false) != -1)   return UnitValue.CENTER;  if (isHor) {    if (startsWithLenient(s,"left",1,false) != -1)     return UnitValue.LEFT;    if (startsWithLenient(s,"right",1,false) != -1)     return UnitValue.RIGHT;    if (startsWithLenient(s,"leading",4,false) != -1)     return UnitValue.LEADING;    if (startsWithLenient(s,"trailing",5,false) != -1)     return UnitValue.TRAILING;    if (startsWithLenient(s,"label",5,false) != -1)     return UnitValue.LABEL;  } else {    if (startsWithLenient(s,"baseline",4,false) != -1)     return UnitValue.BASELINE_IDENTITY;    if (startsWithLenient(s,"top",1,false) != -1)     return UnitValue.TOP;    if (startsWithLenient(s,"bottom",1,false) != -1)     return UnitValue.BOTTOM;  }  return null;}  }
class C{  public static boolean isLinux(){  return linux;}  }
class C{  public RangeQueryBuilder from(String from){  this.from=from;  return this;}  }
class C{  public boolean appliesOnlyToBlockScopedElements(){  return true;}  }
class C{  public DatagramWriter(){  byteStream=new ByteArrayOutputStream();  currentByte=0;  currentBitIndex=Byte.SIZE - 1;}  }
class C{  @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ImPackage.REFERENCING_ELEMENT_IM__REWIRED_TARGET:    if (rewiredTarget != null)     msgs=((InternalEObject)rewiredTarget).eInverseRemove(this,ImPackage.SYMBOL_TABLE_ENTRY__REFERENCING_ELEMENTS,SymbolTableEntry.class,msgs);  return basicSetRewiredTarget((SymbolTableEntry)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public String useWordFrequenciesTipText(){  return "Use word frequencies rather than binary " + "bag of words representation";}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{uuid}/failover") @CheckPermission(roles={Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN},blockProxies=true) public Response doFailover(@PathParam("uuid") String uuid){  log.info("Begin to failover for standby UUID {}",uuid);  Site currentSite=drUtil.getSiteFromLocalVdc(uuid);  precheckForFailoverLocally(uuid);  List<Site> allStandbySites=drUtil.listStandbySites();  try {    coordinator.startTransaction();    String activeSiteId=drUtil.getActiveSite().getUuid();    Site oldActiveSite=new Site();    if (StringUtils.isEmpty(activeSiteId)) {      log.info("Cant't find active site id, go on to do failover");    } else {      oldActiveSite=drUtil.getSiteFromLocalVdc(activeSiteId);      oldActiveSite.setState(SiteState.ACTIVE_FAILING_OVER);      coordinator.persistServiceConfiguration(oldActiveSite.toConfiguration());    }    currentSite.setState(SiteState.STANDBY_FAILING_OVER);    coordinator.persistServiceConfiguration(currentSite.toConfiguration());    drUtil.recordDrOperationStatus(currentSite.getUuid(),InterState.FAILINGOVER_STANDBY);    long vdcTargetVersion=DrUtil.newVdcConfigVersion();    for (    Site site : allStandbySites) {      if (!site.getUuid().equals(uuid)) {        if (site.getState() == SiteState.STANDBY_SYNCED) {          site.setState(SiteState.STANDBY_PAUSED);          coordinator.persistServiceConfiguration(site.toConfiguration());        } else         if (site.getState() == SiteState.STANDBY_REMOVING) {          site.setState(SiteState.STANDBY_ERROR);          coordinator.persistServiceConfiguration(site.toConfiguration());        }        drUtil.updateVdcTargetVersion(site.getUuid(),SiteInfo.DR_OP_FAILOVER,vdcTargetVersion,oldActiveSite.getUuid(),currentSite.getUuid());      }    }    drUtil.updateVdcTargetVersion(uuid,SiteInfo.DR_OP_FAILOVER,vdcTargetVersion,oldActiveSite.getUuid(),currentSite.getUuid());    coordinator.commitTransaction();    auditDisasterRecoveryOps(OperationTypeEnum.FAILOVER,AuditLogManager.AUDITLOG_SUCCESS,AuditLogManager.AUDITOP_BEGIN,oldActiveSite.toBriefString(),currentSite.toBriefString());    return Response.status(Response.Status.ACCEPTED).build();  } catch (  Exception e) {    log.error("Error happened when failover at site {}",uuid,e);    coordinator.discardTransaction();    auditDisasterRecoveryOps(OperationTypeEnum.FAILOVER,AuditLogManager.AUDITLOG_FAILURE,null,currentSite.getName(),currentSite.getVipEndPoint());    throw APIException.internalServerErrors.failoverFailed(currentSite.getName(),e.getMessage());  }}  }
class C{  public static <T>void processJarFile(final File pluginFile,final List<Pair<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>,PluginStatus>> loadedPlugins,final List<Pair<String,Throwable>> failedPlugins){  try {    final Collection<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>> plugins=loadPluginJar(pluginFile);    if (plugins != null) {      for (      final com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T> plugin : plugins) {        loadedPlugins.add(new Pair<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>,PluginStatus>(plugin,PluginStatus.Valid));      }    }  } catch (  final Exception e) {    failedPlugins.add(new Pair<String,Throwable>(pluginFile.getAbsolutePath(),e));  }}  }
class C{  public boolean hasPair(){  return (getter != null || inheritedGetter != null) && (setter != null || inheritedSetter != null);}  }
class C{  public static void sleep(int sleepTime){  try {    Thread.sleep(1 * sleepTime);  } catch (  InterruptedException ex) {    Thread.currentThread().interrupt();  }}  }
class C{  protected Command createMenuSelectCommand(){  UIManager manager=parent.getUIManager();  LookAndFeel lf=manager.getLookAndFeel();  return new Command(manager.localize("select","Select"),lf.getMenuIcons()[0]);}  }
class C{  private static void addLocalizedPickerAndLabel(int rowMarker,String labelText,String languageCode){  Locale locale=new Locale(languageCode);  DatePickerSettings settings=new DatePickerSettings(locale);  settings.setSizeTextFieldMinimumWidth(125);  settings.setSizeTextFieldMinimumWidthDefaultOverride(true);  DatePicker localizedDatePicker=new DatePicker(settings);  localizedDatePicker.setDateToToday();  panel.panel4.add(localizedDatePicker,getConstraints(1,(rowMarker * rowMultiplier),1));  panel.addLabel(panel.panel4,1,(rowMarker * rowMultiplier),labelText);}  }
class C{  public static void updateCalorie(TrackRecordingServiceConnection trackRecordingServiceConnection){  ITrackRecordingService trackRecordingService=trackRecordingServiceConnection.getServiceIfBound();  if (trackRecordingService == null) {    Log.d(TAG,"Unable to update calorie, no track recording service");  } else {    try {      trackRecordingService.updateCalorie();    } catch (    RemoteException e) {      Log.e(TAG,"Unable to update calorie",e);    }catch (    IllegalStateException e) {      Log.e(TAG,"Unable to update calorie.",e);    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:58.529 -0500",hash_original_method="55FFD36C944B472AFBDD2C5B98B03BCA",hash_generated_method="31B8408597A4DC1E734B781A9374793B") public void removeEventChargingFunctionAddress(String ecfAddress) throws ParseException {  if (ecfAddress == null)   throw new NullPointerException("JAIN-SIP Exception, " + "P-Charging-Function-Addresses, setEventChargingFunctionAddress(), the ecfAddress parameter is null.");  if (!this.delete(ecfAddress,ParameterNamesIms.ECF)) {    throw new java.text.ParseException("ECF Address Not Removed",0);  }}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  private void indexQuery(QueryEntry entry,CompletableFuture<QueryResponse> future){  ServerSessionContext session=context.getStateMachine().executor().context().sessions().getSession(entry.getSession());  if (session == null) {    future.complete(logResponse(QueryResponse.builder().withStatus(Response.Status.ERROR).withError(CopycatError.Type.UNKNOWN_SESSION_ERROR).build()));  } else {    indexQuery(entry,session,future);  }}  }
class C{  @Override public void sessionDestroyed(HttpSessionEvent event){  log("sessionDestroyed('" + event.getSession().getId() + "')");}  }
class C{  public Iterator childNodes(){  return iterator();}  }
class C{  private static void sort(long[] a,int left,int right,boolean leftmost){  int length=right - left + 1;  if (length < INSERTION_SORT_THRESHOLD) {    if (leftmost) {      for (int i=left, j=i; i < right; j=++i) {        long ai=a[i + 1];        while (ai < a[j]) {          a[j + 1]=a[j];          if (j-- == left) {            break;          }        }        a[j + 1]=ai;      }    } else {      do {        if (left >= right) {          return;        }      } while (a[++left] >= a[left - 1]);      for (int k=left; ++left <= right; k=++left) {        long a1=a[k], a2=a[left];        if (a1 < a2) {          a2=a1;          a1=a[left];        }        while (a1 < a[--k]) {          a[k + 2]=a[k];        }        a[++k + 1]=a1;        while (a2 < a[--k]) {          a[k + 1]=a[k];        }        a[k + 1]=a2;      }      long last=a[right];      while (last < a[--right]) {        a[right + 1]=a[right];      }      a[right + 1]=last;    }    return;  }  int seventh=(length >> 3) + (length >> 6) + 1;  int e3=(left + right) >>> 1;  int e2=e3 - seventh;  int e1=e2 - seventh;  int e4=e3 + seventh;  int e5=e4 + seventh;  if (a[e2] < a[e1]) {    long t=a[e2];    a[e2]=a[e1];    a[e1]=t;  }  if (a[e3] < a[e2]) {    long t=a[e3];    a[e3]=a[e2];    a[e2]=t;    if (t < a[e1]) {      a[e2]=a[e1];      a[e1]=t;    }  }  if (a[e4] < a[e3]) {    long t=a[e4];    a[e4]=a[e3];    a[e3]=t;    if (t < a[e2]) {      a[e3]=a[e2];      a[e2]=t;      if (t < a[e1]) {        a[e2]=a[e1];        a[e1]=t;      }    }  }  if (a[e5] < a[e4]) {    long t=a[e5];    a[e5]=a[e4];    a[e4]=t;    if (t < a[e3]) {      a[e4]=a[e3];      a[e3]=t;      if (t < a[e2]) {        a[e3]=a[e2];        a[e2]=t;        if (t < a[e1]) {          a[e2]=a[e1];          a[e1]=t;        }      }    }  }  int less=left;  int great=right;  if (a[e1] != a[e2] && a[e2] != a[e3] && a[e3] != a[e4] && a[e4] != a[e5]) {    long pivot1=a[e2];    long pivot2=a[e4];    a[e2]=a[left];    a[e4]=a[right];    while (a[++less] < pivot1)     ;    while (a[--great] > pivot2)     ;    outer:     for (int k=less - 1; ++k <= great; ) {      long ak=a[k];      if (ak < pivot1) {        a[k]=a[less];        a[less]=ak;        ++less;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=a[great];        }        a[great]=ak;        --great;      }    }    a[left]=a[less - 1];    a[less - 1]=pivot1;    a[right]=a[great + 1];    a[great + 1]=pivot2;    sort(a,left,less - 2,leftmost);    sort(a,great + 2,right,false);    if (less < e1 && e5 < great) {      while (a[less] == pivot1) {        ++less;      }      while (a[great] == pivot2) {        --great;      }      outer:       for (int k=less - 1; ++k <= great; ) {        long ak=a[k];        if (ak == pivot1) {          a[k]=a[less];          a[less]=ak;          ++less;        } else         if (ak == pivot2) {          while (a[great] == pivot2) {            if (great-- == k) {              break outer;            }          }          if (a[great] == pivot1) {            a[k]=a[less];            a[less]=pivot1;            ++less;          } else {            a[k]=a[great];          }          a[great]=ak;          --great;        }      }    }    sort(a,less,great,false);  } else {    long pivot=a[e3];    for (int k=less; k <= great; ++k) {      if (a[k] == pivot) {        continue;      }      long ak=a[k];      if (ak < pivot) {        a[k]=a[less];        a[less]=ak;        ++less;      } else {        while (a[great] > pivot) {          --great;        }        if (a[great] < pivot) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=pivot;        }        a[great]=ak;        --great;      }    }    sort(a,left,less - 1,leftmost);    sort(a,great + 1,right,false);  }}  }
class C{  private void addBotListener(Object listener){  bot.addEventListener(listener);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:58.832 -0500",hash_original_method="53D0BC70C94C51E4941A4869C727C1EF",hash_generated_method="C6205B9368136494AA6E18F1D039A277") private void handleEcmTimer(int action){  phone.handleTimerInEmergencyCallbackMode(action);switch (action) {case CDMAPhone.CANCEL_ECM_TIMER:    mIsEcmTimerCanceled=true;  break;case CDMAPhone.RESTART_ECM_TIMER:mIsEcmTimerCanceled=false;break;default :Log.e(LOG_TAG,"handleEcmTimer, unsupported action " + action);}}  }
class C{  public DragEventHandler(NetworkPanel networkPanel){  super();  boundsFilter=new BoundsFilter();  setEventFilter(new SelectionEventFilter());  this.networkPanel=networkPanel;}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitStringMemberValue(this);}  }
class C{  public MemberFunctionResultSender(DM dm,ResultCollector rc,Function function,boolean onlyLocal,boolean onlyRemote,ServerToClientFunctionResultSender sender){  this.dm=dm;  this.rc=rc;  this.function=function;  this.onlyLocal=onlyLocal;  this.onlyRemote=onlyRemote;  this.serverSender=sender;}  }
class C{  public boolean hasSibling(){  return (this.sibling != null);}  }
class C{  public static String formatQuantity(BigDecimal quantity){  if (quantity == null)   return ""; else   return quantityDecimalFormat.format(quantity);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public String charge(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer C_Charge_ID=(Integer)value;  if (C_Charge_ID == null || C_Charge_ID.intValue() == 0)   return "";  if (mTab.getValue("M_Product_ID") != null) {    mTab.setValue("C_Charge_ID",null);    return "ChargeExclusively";  }  mTab.setValue("M_AttributeSetInstance_ID",null);  mTab.setValue("S_ResourceAssignment_ID",null);  mTab.setValue("C_UOM_ID",new Integer(100));  Env.setContext(ctx,WindowNo,"DiscountSchema","N");  String sql="SELECT ChargeAmt FROM C_Charge WHERE C_Charge_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_Charge_ID.intValue());    rs=pstmt.executeQuery();    if (rs.next()) {      mTab.setValue("PriceEntered",rs.getBigDecimal(1));      mTab.setValue("PriceActual",rs.getBigDecimal(1));      mTab.setValue("PriceLimit",Env.ZERO);      mTab.setValue("PriceList",Env.ZERO);      mTab.setValue("Discount",Env.ZERO);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql + e);    return e.getLocalizedMessage();  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return tax(ctx,WindowNo,mTab,mField,value);}  }
class C{  public boolean isScaleEnabled(){  return mIsScaleEnabled;}  }
class C{  public String normalizeColumnName(String vendorName,String columnName){  String result=columnName;  if (columnName != null && keyWords.contains(columnName.toUpperCase()))   result=m_interfaces.get(getDBVendorID(vendorName)).normalizeColumnName(columnName);  return result;}  }
class C{  public void waitSensorActive(Sensor mSensor){  if (log.isDebugEnabled()) {    log.debug("waitSensorActive starts");  }  waitSensorState(mSensor,Sensor.ACTIVE);  return;}  }
class C{  private OpenSSLDigest(String algorithm,long evp_md,int size,int blockSize){  this.algorithm=algorithm;  this.evp_md=evp_md;  this.size=size;  this.blockSize=blockSize;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public final void incomingStreamFromSTDIN() throws AdeException {  final Properties props=new Properties();  final String name=getNameForStdin();  final String parseReportFilename=getParseReportFilename(name);  a_adeInputStream=new AdeInputStreamExt(System.in,props,m_adeExtProperties,parseReportFilename);  incomingObject(a_adeInputStream);}  }
class C{  private Map<String,List<SolrDocument>> collectDocuments(SolrQueryRequest req,JoinFunction collectionKey) throws IOException {  String query=req.getParams().get(CommonParams.Q);  return collectDocuments(query,req,collectionKey);}  }
class C{  public boolean isInternal(){  Object oo=get_Value(COLUMNNAME_IsInternal);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public SuggestHelper(String tag,Context context,int[] resId,int userBigramMax,int userBigramDelete){  this(tag,context,resId);  mUserBigram=new UserBigramDictionary(context,null,Locale.US.toString(),Suggest.DIC_USER);  mUserBigram.setDatabaseMax(userBigramMax);  mUserBigram.setDatabaseDelete(userBigramDelete);  mSuggest.setUserBigramDictionary(mUserBigram);}  }
class C{  @Override public void introspect(ContextH3 context){}  }
class C{  public static boolean convertIdentifier(PsiBuilder b,int l,IElementType tokenType){  IElementType currentTokenType=b.getTokenType();  if (currentTokenType == tokenType) {    b.advanceLexer();    return true;  } else   if (CONVERTABLE_TOKENS.contains(currentTokenType)) {    PsiBuilder.Marker m=b.mark();    b.advanceLexer();    m.collapse(tokenType);    return true;  }  return false;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == ModifiableElement.class) {switch (derivedFeatureID) {case N4JSPackage.N4_SETTER_DECLARATION__DECLARED_MODIFIERS:      return N4JSPackage.MODIFIABLE_ELEMENT__DECLARED_MODIFIERS;default :    return -1;}}if (baseClass == N4MemberDeclaration.class) {switch (derivedFeatureID) {case N4JSPackage.N4_SETTER_DECLARATION__OWNER:  return N4JSPackage.N4_MEMBER_DECLARATION__OWNER;default :return -1;}}if (baseClass == AnnotableN4MemberDeclaration.class) {switch (derivedFeatureID) {case N4JSPackage.N4_SETTER_DECLARATION__ANNOTATION_LIST:return N4JSPackage.ANNOTABLE_N4_MEMBER_DECLARATION__ANNOTATION_LIST;default :return -1;}}if (baseClass == N4FieldAccessor.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public RegularEventSpec createRegularEventSpec(){  RegularEventSpecImpl regularEventSpec=new RegularEventSpecImpl();  return regularEventSpec;}  }
class C{  public HostEvent(MonitoredHost host){  super(host);}  }
class C{  public BallTree(){  super();  if (getMeasurePerformance())   m_Stats=m_TreeStats=new TreePerformanceStats();}  }
class C{  public synchronized Result remove(int index){  Result result;  Date date;  date=m_Ordered.remove(index);  m_Suffixes.remove(date);  m_Payloads.remove(date);  result=m_Results.remove(date);  return result;}  }
class C{  public void addSystem(SubSystem system){  @SuppressWarnings("unchecked") Class<SubSystem> cl=(Class<SubSystem>)system.getClass();  addSystem(cl,system);}  }
class C{  void sendMessageToHandlerNoControllerReset(List<OFMessage> messages) throws Exception {  handler.channelRead(ctx,messages);}  }
class C{  public String lowerBoundMinSupportTipText(){  return "Lower bound for minimum support.";}  }
class C{  public final int exec(String[] args) throws Exception {  final Runtime r=Runtime.getRuntime();  final Process process=r.exec(args);  return processOutput(process);}  }
class C{  public RoundChart(CategorySeries dataset,DefaultRenderer renderer){  mDataset=dataset;  mRenderer=renderer;}  }
class C{  public boolean isUrlSafe(){  return this.encodeTable == URL_SAFE_ENCODE_TABLE;}  }
class C{  public Object readFromXML(Element node) throws Exception {  String classname;  String name;  boolean primitive;  boolean array;  boolean isnull;  Class<?> cls;  Vector<Element> children;  Object result;  int i;  Constructor<?> constructor;  Class<?>[] methodClasses;  Object[] methodArgs;  Element child;  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  result=null;  name=node.getAttribute(ATT_NAME);  classname=node.getAttribute(ATT_CLASS);  primitive=stringToBoolean(node.getAttribute(ATT_PRIMITIVE));  array=stringToBoolean(node.getAttribute(ATT_ARRAY));  isnull=stringToBoolean(node.getAttribute(ATT_NULL));  if (isnull) {    return result;  }  children=XMLDocument.getChildTags(node);  cls=determineClass(classname);  if (array) {    result=Array.newInstance(cls,getArrayDimensions(node));    for (i=0; i < children.size(); i++) {      child=children.get(i);      Array.set(result,Integer.parseInt(child.getAttribute(ATT_NAME)),invokeReadFromXML(child));    }  } else {    if (children.size() == 0) {      if (primitive) {        result=getPrimitive(node);      } else {        methodClasses=new Class[1];        methodClasses[0]=String.class;        methodArgs=new Object[1];        methodArgs[0]=XMLDocument.getContent(node);        try {          constructor=cls.getConstructor(methodClasses);          result=constructor.newInstance(methodArgs);        } catch (        Exception e) {          try {            result=cls.newInstance();          } catch (          Exception e2) {            result=null;            System.out.println("ERROR: Can't instantiate '" + classname + "'!");          }        }      }    } else {      result=cls.newInstance();      for (i=0; i < children.size(); i++) {        result=readFromXML(result,name,children.get(i));      }    }  }  return result;}  }
class C{  public void loadMultiply(Matrix4f lhs,Matrix4f rhs){  for (int i=0; i < 4; i++) {    float ri0=0;    float ri1=0;    float ri2=0;    float ri3=0;    for (int j=0; j < 4; j++) {      float rhs_ij=rhs.get(i,j);      ri0+=lhs.get(j,0) * rhs_ij;      ri1+=lhs.get(j,1) * rhs_ij;      ri2+=lhs.get(j,2) * rhs_ij;      ri3+=lhs.get(j,3) * rhs_ij;    }    set(i,0,ri0);    set(i,1,ri1);    set(i,2,ri2);    set(i,3,ri3);  }}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/unlink-targets") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskResourceRep unlinkTargetVolumesForSession(@PathParam("id") URI id,SnapshotSessionUnlinkTargetsParam param){  return getSnapshotSessionManager().unlinkTargetVolumesFromSnapshotSession(id,param);}  }
class C{  public void testIntervalSpec(){  EPServiceProvider epService=EPServiceProviderManager.getDefaultProvider(SupportConfigFactory.getConfiguration());  epService.initialize();  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.startTest(epService,this.getClass(),getName());  }  sendTimer(0,epService);  EPStatement statement=epService.getEPAdministrator().createEPL("select * from pattern [timer:interval(1 minute 2 seconds)]");  SupportUpdateListener testListener=new SupportUpdateListener();  statement.addListener(testListener);  sendTimer(62 * 1000 - 1,epService);  assertFalse(testListener.isInvoked());  sendTimer(62 * 1000,epService);  assertTrue(testListener.isInvoked());  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.endTest();  }}  }
class C{  public Range(String key,Double from,Double to){  this.key=key;  this.from=from;  this.to=to;}  }
class C{  public SsoException(String message,Key messageKey,Throwable cause,Object... messageDetails){  super(message,cause);  _messageKey=messageKey;  _messageDetails=messageDetails;}  }
class C{  public final void addElement(final Object value){  checkSize(current_item);  items[current_item]=value;  current_item++;}  }
class C{  public void dup2X1(){  mv.visitInsn(Opcodes.DUP2_X1);}  }
class C{  public static int negate(int opcode){  if (opcode == if_acmp_null)   return if_acmp_nonnull; else   if (opcode == if_acmp_nonnull)   return if_acmp_null; else   return ((opcode + 1) ^ 1) - 1;}  }
class C{  public void modifySnapshotSchedule(String id,IsilonSnapshotSchedule s) throws IsilonException {  try {    id=URLEncoder.encode(id,"UTF-8");  } catch (  UnsupportedEncodingException e) {    e.printStackTrace();  }  modify(_baseUrl.resolve(URI_SNAPSHOT_SCHEDULES),id,"schedule",s);}  }
class C{  public static int maxIndex(int[] ints){  int maximum=0;  int maxIndex=0;  for (int i=0; i < ints.length; i++) {    if ((i == 0) || (ints[i] > maximum)) {      maxIndex=i;      maximum=ints[i];    }  }  return maxIndex;}  }
class C{  public String areaCode(){  return areaCode;}  }
class C{  public static RefUpdate updateRef(Repository repo,ObjectId newObjectId,ObjectId expectedOldObjectId,String refName) throws IOException {  RefUpdate refUpdate=repo.updateRef(refName);  refUpdate.setNewObjectId(newObjectId);  if (expectedOldObjectId == null) {    refUpdate.setExpectedOldObjectId(ObjectId.zeroId());  } else {    refUpdate.setExpectedOldObjectId(expectedOldObjectId);  }  return refUpdate;}  }
class C{  public Builder txState(TransactionState state){  this.innerTxState=state;  return this;}  }
class C{  protected HalfEdge createEdge(Coordinate orig){  return new HalfEdge(orig);}  }
class C{  @Override public int available(){  return mPooledByteBuffer.size() - mOffset;}  }
class C{  @Override public MappedByteBuffer map(MapMode mode,long position,long size) throws IOException {  throw new IOException("Method is unsupported.");}  }
class C{  public void bounceOffHorizontalWall(){  vy=-vy;  count++;}  }
class C{  public Cone(ReadonlyVec3D pos,ReadonlyVec3D dir,float rNorth,float rSouth,float len){  super(pos);  this.dir=dir.getNormalized();  this.radiusNorth=rNorth;  this.radiusSouth=rSouth;  this.length=len;}  }
class C{  static void FindPfStepCTokens(CToken[][] toks){  boolean lastIsTLA=false;  for (int k=0; k < toks.length; k++) {    CToken[] input=toks[k];    Vector outputVec=new Vector(input.length);    int i=0;    while (i < input.length) {      if ((i < input.length - 2) && (input[i].string.equals("<")) && (input[i + 1].column == input[i].column + 1)&& (input[i + 1].type == NUMBER)&& (input[i + 2].string.equals(">"))&& (input[i + 2].column == input[i + 1].column + input[i + 1].getWidth())) {        int numOfToks=3;        String str="<" + input[i + 1].string + ">";        if ((i < input.length - 3) && (input[i + 3].column == input[i + 2].column + 1) && ((input[i + 3].type == NUMBER) || (input[i + 3].type == IDENT))) {          str=str + input[i + 3].string;          numOfToks=4;          if ((i < input.length - 4) && (input[i + 4].column == input[i + 3].column + input[i + 3].getWidth()) && (input[i + 4].string.equals("."))) {            str=str + ".";            numOfToks=5;          }          ;        }        ;        outputVec.addElement(new CToken(str,input[i].column,PF_STEP,input[i].isTLA,input[i].isAmbiguous));        i=i + numOfToks;      } else {        outputVec.addElement(input[i]);        i=i + 1;      }    }    ;    if (outputVec.size() != input.length) {      toks[k]=new CToken[outputVec.size()];      for (i=0; i < outputVec.size(); i++) {        toks[k][i]=(CToken)outputVec.elementAt(i);      }      ;    }  }}  }
class C{  public Earning(final RPObject object){  super(object);  setRPClass(EARNING_RPCLASS_NAME);  value=getInt(VALUE_ATTRIBUTE);  sellerName=get(NAME_ATTRIBUTE);}  }
class C{  private void showPopup(MouseEvent e){  JPopupMenu popupMenu=getPopupMenu();  if (popupMenu != null) {    configurePopupMenu(popupMenu);    popupMenu.show(e.getComponent(),e.getX(),e.getY());  }}  }
class C{  public boolean searchCoverInFolderAndUpdate(){  boolean found=false;  File coverFile=null;  String[] acceptedMimeTypes={"jpg","jpeg","png"};  String trackFolder=track.getFileFolder();  for (  String mimeType : acceptedMimeTypes) {    File file=new File(trackFolder + "/cover." + mimeType);    if (file.exists()) {      coverFile=file;      break;    }  }  if (coverFile != null) {    track.setCoverImage(coverFile);    found=updateCover(coverFile);  }  return found;}  }
class C{  public Object first(){  return m.firstKey();}  }
class C{  public static SortedProperties fromLines(String s){  SortedProperties p=new SortedProperties();  for (  String line : StringUtils.arraySplit(s,'\n',true)) {    int idx=line.indexOf('=');    if (idx > 0) {      p.put(line.substring(0,idx),line.substring(idx + 1));    }  }  return p;}  }
class C{  public static boolean isGeometry(Object x){  if (x == null) {    return false;  }  return isGeometryClass(x.getClass());}  }
class C{  public void fault() throws IOException {  throw new NullPointerException("sample exception");}  }
class C{  private void applyCommand(CommandRequest request,ServerSessionContext session,CompletableFuture<CommandResponse> future){  final Command command=request.command();  final long term=context.getTerm();  final long timestamp=System.currentTimeMillis();  final long index;  try (CommandEntry entry=context.getLog().create(CommandEntry.class)){    entry.setTerm(term).setSession(request.session()).setTimestamp(timestamp).setSequence(request.sequence()).setCommand(command);    index=context.getLog().append(entry);    LOGGER.debug("{} - Appended {} to log at index {}",context.getCluster().member().address(),entry,index);  }   appendCommand(index,future);  session.setRequestSequence(request.sequence());}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  private void makeCreditView() throws Exception {  handleTableCreation("credit data view",bigquery().query(CREDIT_DATA_SQL.put("SOURCE_DATASET",sourceDatasetId).put("DEST_DATASET",bigquery().getDatasetId()).build(),bigquery().buildDestinationTable("CreditData").description("Synthetic view of registrar credit information.").type(TableType.VIEW).build()));}  }
class C{  public static boolean isAxisKey(KeyInputEvent kie){switch (kie.getKeyCode()) {case KeyInput.KEY_X:case KeyInput.KEY_Y:case KeyInput.KEY_Z:    return true;}return false;}  }
class C{  public void testConfiguration() throws Exception {  TungstenProperties props=createProperties("testConfig",false);  BackupManager bmgr=new BackupManager(new MockEventDispatcher());  bmgr.initialize(props);  bmgr.release();}  }
class C{  protected RandomSeedTable(){  throw new RuntimeException("Non instantiable");}  }
class C{  public SimpleTextFieldItem(String label,StringProperty property,String tooltip,UnaryOperator<Node> decorator){  super(label,tooltip,decorator);  this.property=property;}  }
class C{  public void testStartStopContainer() throws Exception {  WebClient webClient=new WebClient();  HtmlPage htmlPage=webClient.getPage(CargoDaemonDeployableTest.daemonUrl);  assertFalse("There should be no running containers",htmlPage.asText().contains("started"));  ((HtmlTextInput)htmlPage.getElementByName("handleId")).setText("test1");  ((HtmlSelect)htmlPage.getElementByName("containerId")).getOptionByText("jetty7x").setSelected(true);  File jetty7x=new File(System.getProperty("artifacts.dir"),"jetty7x.zip");  assertTrue("File " + jetty7x + " is missing",jetty7x.isFile());  ((HtmlTextInput)htmlPage.getElementByName("installerZipUrl")).setText(jetty7x.toURI().toURL().toString());  File configurationDirectory=new File(System.getProperty("daemon.test-configurations.home"));  assertFalse("Directory " + configurationDirectory + " already exists",configurationDirectory.isDirectory());  ((HtmlTextInput)htmlPage.getElementByName("configurationHome")).setText(configurationDirectory.getAbsolutePath());  htmlPage.getElementById("addConfigurationPropertyButton").click();  ((HtmlTextInput)htmlPage.getElementById("configurationPropertyKey_0")).setText(ServletPropertySet.PORT);  ((HtmlTextInput)htmlPage.getElementById("configurationPropertyValue_0")).setText(System.getProperty("servlet.port"));  htmlPage.getElementById("addConfigurationPropertyButton").click();  ((HtmlTextInput)htmlPage.getElementById("configurationPropertyKey_1")).setText(GeneralPropertySet.RMI_PORT);  ((HtmlTextInput)htmlPage.getElementById("configurationPropertyValue_1")).setText(System.getProperty("rmi.port"));  htmlPage.getElementById("submitButton").click();  DeployableMonitor daemonMonitor=new URLDeployableMonitor(new URL("http://localhost:" + System.getProperty("servlet.port") + "/cargocpc/index.html"),CargoDaemonDeployableTest.TIMEOUT);  DeployerWatchdog daemonWatchdog=new DeployerWatchdog(daemonMonitor);  daemonWatchdog.watchForAvailability();  webClient.closeAllWindows();  htmlPage=webClient.getPage(CargoDaemonDeployableTest.daemonUrl);  HtmlElement stopButton=htmlPage.getElementById("stopContainer_test1");  assertNotNull("Container stop button did not appear. Current content: " + htmlPage.asText(),stopButton);  assertTrue("There should be running containers",htmlPage.asText().contains("started"));  stopButton.click();  daemonWatchdog.watchForUnavailability();  webClient.closeAllWindows();  htmlPage=webClient.getPage(CargoDaemonDeployableTest.daemonUrl);  assertFalse("There should be no running containers",htmlPage.asText().contains("started"));}  }
class C{  public void write(String s,int off,int len) throws IOException {  if (len > 0) {    checkWrite();  }  super.write(s,off,len);}  }
class C{  public static ServiceId create(String xRoadInstance,String memberClass,String memberCode,String subsystemCode,String serviceCode,String serviceVersion){  validateField("xRoadInstance",xRoadInstance);  validateField("memberClass",memberClass);  validateField("memberCode",memberCode);  validateField("serviceCode",serviceCode);  return new ServiceId(XroadObjectType.SERVICE,xRoadInstance,memberClass,memberCode,subsystemCode,serviceCode,serviceVersion);}  }
class C{  public N4mfFactoryImpl(){  super();}  }
class C{  private boolean validateAllVolumesInCGIngested(IngestionRequestContext parentRequestContext,RecoverPointVolumeIngestionContext volumeContext,UnManagedVolume unManagedVolume){  UnManagedProtectionSet umpset=volumeContext.getUnManagedProtectionSet();  if (umpset == null) {    _logger.error("Unable to find unmanaged protection set associated with volume: " + unManagedVolume.getId() + " Please run unmanaged CG discovery of registered protection systems");    throw IngestionException.exceptions.unManagedProtectionSetNotFound(unManagedVolume.getNativeGuid());  }  return VolumeIngestionUtil.validateAllVolumesInCGIngested(parentRequestContext.findAllUnManagedVolumesToBeDeleted(),umpset,parentRequestContext,_dbClient);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"rol");  if (instruction.getOperands().size() != 2) {    throw new InternalTranslationException("Error: Argument instruction is not a rol instruction (invalid number of operand)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final IOperandTree targetOperand=operands.get(0);  final IOperandTree sourceOperand=operands.get(1);  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,sourceOperand,true);  instructions.addAll(sourceResult.getInstructions());  offset=baseOffset + instructions.size();  final TranslationResult targetResult=Helpers.translateOperand(environment,offset,targetOperand,true);  instructions.addAll(targetResult.getInstructions());  offset=baseOffset + instructions.size();  final OperandSize sourceSize=sourceResult.getSize();  final OperandSize targetSize=targetResult.getSize();  final String sourceRegister=sourceResult.getRegister();  final String targetRegister=targetResult.getRegister();  final String rotateMask=environment.getNextVariableString();  final String rotateMaskZero=environment.getNextVariableString();  final String rotateMaskLessOne=environment.getNextVariableString();  final String rotateMaskOne=environment.getNextVariableString();  final String shrValue=environment.getNextVariableString();  final String shredResult=environment.getNextVariableString();  final String shledResult=environment.getNextVariableString();  final String result=environment.getNextVariableString();  final String tempOf=environment.getNextVariableString();  final String tempOfLsb=environment.getNextVariableString();  final String msbMask=String.valueOf(TranslationHelpers.getMsbMask(targetSize));  final String modVal=String.valueOf(targetSize.getBitSize());  final String shiftMsbLsb=String.valueOf(TranslationHelpers.getShiftMsbLsbMask(targetSize));  final int linesBefore=instructions.size();  instructions.add(ReilHelpers.createMod(offset,sourceSize,sourceRegister,targetSize,modVal,targetSize,rotateMask));  instructions.add(ReilHelpers.createBisz(offset + 1,targetSize,rotateMask,OperandSize.BYTE,rotateMaskZero));  instructions.add(ReilHelpers.createSub(offset + 2,targetSize,rotateMask,targetSize,"1",targetSize,rotateMaskLessOne));  instructions.add(ReilHelpers.createBisz(offset + 3,targetSize,rotateMaskLessOne,OperandSize.BYTE,rotateMaskOne));  instructions.add(ReilHelpers.createBsh(offset + 4,targetSize,targetRegister,OperandSize.BYTE,rotateMask,targetSize,shledResult));  instructions.add(ReilHelpers.createAdd(offset + 5,OperandSize.BYTE,"-" + modVal,OperandSize.BYTE,rotateMask,OperandSize.BYTE,shrValue));  instructions.add(ReilHelpers.createBsh(offset + 6,targetSize,targetRegister,OperandSize.BYTE,shrValue,targetSize,shredResult));  instructions.add(ReilHelpers.createOr(offset + 7,targetSize,shledResult,targetSize,shredResult,targetSize,result));  final String jmpGoal=String.format("%d.%d",instruction.getAddress().toLong(),linesBefore + 16);  instructions.add(ReilHelpers.createJcc(offset + 8,OperandSize.BYTE,rotateMaskZero,OperandSize.ADDRESS,jmpGoal));  instructions.add(ReilHelpers.createAnd(offset + 9,targetSize,result,sourceSize,"1",OperandSize.BYTE,Helpers.CARRY_FLAG));  final String jmpGoal2=String.format("%d.%d",instruction.getAddress().toLong(),linesBefore + 13);  instructions.add(ReilHelpers.createJcc(offset + 10,OperandSize.BYTE,rotateMaskOne,OperandSize.ADDRESS,jmpGoal2));  instructions.add(ReilHelpers.createUndef(offset + 11,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  final String jmpGoal3=String.format("%d.%d",instruction.getAddress().toLong(),linesBefore + 16);  instructions.add(ReilHelpers.createJcc(offset + 12,OperandSize.BYTE,"1",OperandSize.ADDRESS,jmpGoal3));  instructions.add(ReilHelpers.createAnd(offset + 13,targetSize,result,targetSize,msbMask,sourceSize,tempOf));  instructions.add(ReilHelpers.createBsh(offset + 14,targetSize,tempOf,targetSize,shiftMsbLsb,OperandSize.BYTE,tempOfLsb));  instructions.add(ReilHelpers.createBsh(offset + 15,OperandSize.BYTE,tempOfLsb,OperandSize.BYTE,Helpers.CARRY_FLAG,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  Helpers.writeBack(environment,offset + 16,targetOperand,result,targetResult.getSize(),targetResult.getAddress(),targetResult.getType(),instructions);}  }
class C{  public Quay(){  super();}  }
class C{  public void unregisterExtraHistoryLogMember(int providerId) throws RcsServiceNotAvailableException, RcsGenericException {  if (mService == null) {    throw new RcsServiceNotAvailableException();  }  try {    mService.unregisterExtraHistoryLogMember(providerId);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:56.420 -0400",hash_original_method="9B456979926FBEBDCE0D7990B1D4EAD2",hash_generated_method="9B456979926FBEBDCE0D7990B1D4EAD2") long parseBytes(String freeSpace,String path) throws IOException {  try {    long bytes=Long.parseLong(freeSpace);    if (bytes < 0) {      throw new IOException("Command line '" + DF + "' did not find free space in response "+ "for path '"+ path+ "'- check path is valid");    }    return bytes;  } catch (  NumberFormatException ex) {    throw new IOExceptionWithCause("Command line '" + DF + "' did not return numeric data as expected "+ "for path '"+ path+ "'- check path is valid",ex);  }}  }
class C{  private void parseTransmembraneRegions(final Map<String,Set<TMHMMMatch>> proteinIdToMatchMap,String protSeqIdentifier,String line){  if (line != null && line.length() > 0) {    if (PREDICTION_LINE_PATTERN.matcher(line).matches()) {      int colonIndex=line.indexOf(":");      line=line.substring(colonIndex + 1).trim();      String[] proteinRegions=line.split(", ");      for (      String proteinRegion1 : proteinRegions) {        String proteinRegion=proteinRegion1.trim();        if (proteinRegion != null) {          String[] list=proteinRegion.split(" ");          if (list.length != 3) {            LOGGER.warn("Couldn't parse transmembrane region out of: " + Arrays.toString(list) + ". The array should look like this [M, 200, 222] and should be of length 3.");            return;          } else {            String signature=list[0].trim();            if (signature.equals("M")) {              int startPos=Integer.parseInt(list[1].trim());              int endPos=Integer.parseInt(list[2].trim());              saveTmhmmMatch(proteinIdToMatchMap,protSeqIdentifier,startPos,endPos,TMHMMSignature.MEMBRANE);            }          }        }      }    } else {      LOGGER.warn("Unexpected format within prediction line - " + line);    }  }}  }
class C{  private void addEntityView(EntityView<IEntity> view){synchronized (views) {    views.add(view);  }}  }
class C{  private void moveToStackBottom(){  tempRemoveFromStack();  addToStackBefore(header);}  }
class C{  protected boolean isProjectPackageFragmentRoot(IPackageFragmentRoot root){  IJavaProject javaProject=root.getJavaProject();  return javaProject != null && javaProject.getPath().equals(root.getPath());}  }
class C{  protected void removeTag(short tagId){  mExifTags.remove(tagId);}  }
class C{  public static Column fromOrd(int i){  if ((i < 0) || (i >= Column.values().length)) {    throw new IndexOutOfBoundsException("Invalid ordinal");  }  return Column.values()[i];}  }
class C{  public void paintCurrentValue(Graphics g,Rectangle bounds,boolean hasFocus){  if (MetalLookAndFeel.usingOcean()) {    bounds.x+=2;    bounds.width-=3;    if (arrowButton != null) {      Insets buttonInsets=arrowButton.getInsets();      bounds.y+=buttonInsets.top;      bounds.height-=(buttonInsets.top + buttonInsets.bottom);    } else {      bounds.y+=2;      bounds.height-=4;    }    super.paintCurrentValue(g,bounds,hasFocus);  } else   if (g == null || bounds == null) {    throw new NullPointerException("Must supply a non-null Graphics and Rectangle");  }}  }
class C{  public static final Criterion headerExists(String headerName){  return new HeaderCriterion(headerName,ExistsOperator.exists());}  }
class C{  public int compare(Object obj1,Object obj2){  if (obj1 == obj2) {    return 0;  }  AttributeTypeAndValue atav1=(AttributeTypeAndValue)obj1;  AttributeTypeAndValue atav2=(AttributeTypeAndValue)obj2;  String kw1=atav1.getType().getName();  String kw2=atav2.getType().getName();  if (kw1 != null && kw2 == null) {    return -1;  }  if (kw1 == null && kw2 != null) {    return 1;  }  if (kw1 != null && kw2 != null) {    return kw1.compareTo(kw2);  }  return compateOids(atav1.getType(),atav2.getType());}  }
class C{  public final boolean hasFeature(String s){  return FEATURES.contains(s);}  }
class C{  public void next(){  index++;}  }
class C{  public SQLClientInfoException(String reason,String sqlState,Map<String,ClientInfoStatus> failedProperties,Throwable cause){  super(reason,sqlState,cause);  this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties);}  }
class C{  public MinimumSpanningForest(Graph<V,E> graph,Supplier<Forest<V,E>> Supplier,V root,Map<E,Double> weights){  this(graph,Supplier.get(),root,weights);}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.729 -0400",hash_original_method="4007BD37B56F652F2DD863D7816336D0",hash_generated_method="2024B0D60D55840B17528B87EB493ED5") @Override public void write(char[] chr,int st,int end) throws IOException {  out.write(chr,st,end);}  }
class C{  private LogoutResponse createResponse(final String inResponseTo,final String idpUrl) throws WebssoClientException {  LogoutResponse retval=null;  logger.info("generate SLO response for IDP: " + idpUrl);  if (this.validationState.getValidationResult().getResponseCode() == HttpServletResponse.SC_OK) {    try {      Validate.notNull(idpUrl);      IDPConfiguration idpConfig=this.getMetadataSettings().getIDPConfigurationByEntityID(idpUrl);      String destination=SamlUtils.getIdpSloLocation(idpConfig,SamlNames.HTTP_REDIRECT);      if (destination == null) {        logger.warn(String.format("SLO end point does not exist for IDP: %s.",idpConfig.getAlias()));        return null;      }      String issuerValue=this.getIssuerVal(this.tenant);      ValidationResult valResult=this.validationState.getValidationResult();      retval=SamlUtils.createSamlLogoutResponse(issuerValue,inResponseTo,destination,valResult.getStatus(),valResult.getSubstatus(),null);    } catch (    Exception e) {      logger.error("Caught exception while generating response.",e);      throw new WebssoClientException(e);    }  }  return retval;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.380 -0400",hash_original_method="B5B6039E253EDFE159BEF140A8BD9D88",hash_generated_method="BE2C9BA42F04698FE9C18A9F10387CA8") public BoundedInputStream(InputStream in){  this(in,-1);}  }
class C{  protected void initPanel(){  panel=new PropertySheetPanel(this);  if (targetBean != null)   panel.setTarget(targetBean);}  }
class C{  public NGramDistance(int size){  this.n=size;}  }
class C{  public AllPathsAction(GraphWorkbench workbench){  super("All Paths");  this.workbench=workbench;}  }
class C{  public BufferedDataInputStream(InputStream o){  this(o,FitsIO.DEFAULT_BUFFER_SIZE);}  }
class C{  protected TAnonymousFormalParameterImpl(){  super();}  }
class C{  public static void inlineAll(final JFrame parent,final IViewContainer container,final ZyGraph graph){  Preconditions.checkNotNull(parent,"IE02285: Parent argument can not be null");  Preconditions.checkNotNull(container,"IE02286: Container argument can not be null");  Preconditions.checkNotNull(graph,"IE02287: Graph Argument can not be null");  final MutableDirectedGraph<INaviViewNode,INaviEdge> mutableGraph=(MutableDirectedGraph<INaviViewNode,INaviEdge>)graph.getRawView().getGraph();  final List<INaviViewNode> nodes=mutableGraph.getNodes();  final HashMap<INaviInstruction,INaviFunction> instructionToFunctionMap=new HashMap<INaviInstruction,INaviFunction>();  for (  final INaviViewNode iNaviViewNode : nodes) {    if (iNaviViewNode instanceof INaviCodeNode) {      instructionToFunctionMap.putAll(CReferenceFinder.getCodeReferenceMap((INaviCodeNode)iNaviViewNode));    }  }  for (  final INaviInstruction iNaviInstruction : instructionToFunctionMap.keySet()) {    INaviCodeNode updatedNode=null;    for (    final INaviViewNode iNaviViewNode2 : graph.getRawView().getGraph().getNodes()) {      final INaviCodeNode codeNode=(INaviCodeNode)iNaviViewNode2;      if (codeNode.hasInstruction(iNaviInstruction)) {        updatedNode=codeNode;      }    }    if (updatedNode != null) {      inlineFunctionSilently(parent,container,graph,updatedNode,iNaviInstruction,instructionToFunctionMap.get(iNaviInstruction));    } else {      throw new IllegalStateException("IE01174: Graph final has been rendered final to an final inconsitant state");    }  }}  }
class C{  public final void requestConf(boolean value) throws GSSException {  if (state == STATE_NEW && isInitiator())   confState=value;}  }
class C{  private void prepare(String item){  item=item.trim();  if (item.startsWith("re:") && item.length() > 3) {    compilePattern(item.substring(3));  } else   if (item.startsWith("w:") && item.length() > 2) {    compilePattern("(?i).*\\b" + item.substring(2) + "\\b.*");  } else   if (item.startsWith("wcs:") && item.length() > 4) {    compilePattern(".*\\b" + item.substring(4) + "\\b.*");  } else   if (item.startsWith("cs:") && item.length() > 3) {    caseSensitive=item.substring(3);  } else   if (item.startsWith("start:") && item.length() > 6) {    startsWith=item.substring(6).toLowerCase();  } else   if (item.startsWith("cat:")) {    category=parsePrefix(item,"cat:");  } else   if (item.startsWith("!cat:")) {    categoryNot=parsePrefix(item,"!cat:");  } else   if (item.startsWith("user:")) {    username=parsePrefix(item,"user:").toLowerCase(Locale.ENGLISH);  } else   if (item.startsWith("chan:")) {    parseListPrefix(item,"chan:");  } else   if (item.startsWith("!chan:")) {    parseListPrefix(item,"!chan:");  } else   if (item.startsWith("chanCat:")) {    channelCategory=parsePrefix(item,"chanCat:");  } else   if (item.startsWith("!chanCat:")) {    channelCategoryNot=parsePrefix(item,"!chanCat:");  } else   if (item.startsWith("color:")) {    color=HtmlColors.decode(parsePrefix(item,"color:"));  } else   if (item.startsWith("status:")) {    String status=parsePrefix(item,"status:");    parseStatus(status,true);  } else   if (item.startsWith("!status:")) {    String status=parsePrefix(item,"!status:");    parseStatus(status,false);  } else   if (item.startsWith("config:")) {    parseListPrefix(item,"config:");  } else {    caseInsensitive=item.toLowerCase();  }}  }
class C{  public Boolean isAutoConnectDevices(){  return autoConnectDevices;}  }
class C{  private boolean isCinderVolume(Volume volume,Map<URI,String> systemURIToSystemTypeMap){  URI systemURI=volume.getStorageController();  String systemType=systemURIToSystemTypeMap.get(systemURI);  if (systemType == null) {    StorageSystem system=_dbClient.queryObject(StorageSystem.class,systemURI);    systemType=system.getSystemType();    systemURIToSystemTypeMap.put(systemURI,systemType);  }  return Type.openstack.name().equalsIgnoreCase(systemType);}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.ls.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DocumentBuilderFactory jxFactory=(DocumentBuilderFactory)ClassLoader.getSystemClassLoader().loadClass("oracle.xml.jaxp.JXDocumentBuilderFactory").newInstance();  DOMTestDocumentBuilderFactory factory=new JAXPDOMTestDocumentBuilderFactory(jxFactory,JAXPDOMTestDocumentBuilderFactory.getConfiguration1());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public String GetDirectory(){  return PlugInDirectory;}  }
class C{  private void prepareLocalArrayConsistencyGroupData() throws Exception {  StorageSystem storageSystem=createStorageSystem(false);  List<Volume> blockVolumes=createBlockVolumes("blockVolume",3,storageSystem.getId());  BlockConsistencyGroup localArrayCg=createBlockConsistencyGroup("localArrayCg",storageSystem.getId(),Types.LOCAL.name(),true);  localArrayConsistencyGroupURI=localArrayCg.getId();  addVolumesToBlockConsistencyGroup(localArrayCg.getId(),blockVolumes);}  }
class C{  public CViewContainer(final INaviModule module,final ICallgraphView nativeCallgraph,final ImmutableList<IFlowgraphView> nativeFlowgraphs,final List<INaviView> customViews,final ImmutableBiMap<INaviView,INaviFunction> viewFunctionBiMap,final ListenerProvider<IModuleListener> listeners,final SQLProvider provider){  m_module=Preconditions.checkNotNull(module,"IE02395: module argument can not be null");  m_listeners=listeners;  m_provider=Preconditions.checkNotNull(provider,"IE02396: provider argument can not be null");  m_nativeCallgraphView=nativeCallgraph;  viewIdView.put(nativeCallgraph.getConfiguration().getId(),nativeCallgraph);  m_nativeFlowgraphs=nativeFlowgraphs;  m_customViews=customViews;  m_viewFunctionBiMap=viewFunctionBiMap;  for (  final INaviView view : m_customViews) {    view.addListener(m_viewListener);    viewIdView.put(view.getConfiguration().getId(),view);  }  for (  final INaviView view : m_nativeFlowgraphs) {    view.addListener(m_viewListener);    viewIdView.put(view.getConfiguration().getId(),view);  }}  }
class C{  Record(String line,int lineNum){  char typeChar=line.charAt(0);switch (typeChar) {case '>':    type=Type.START_LOAD;  break;case '<':type=Type.END_LOAD;break;case '+':type=Type.START_INIT;break;case '-':type=Type.END_INIT;break;default :throw new AssertionError("Bad line: " + line);}sourceLineNumber=lineNum;for (int i=0; i < REPLACE_CLASSES.length; i+=2) {line=line.replace(REPLACE_CLASSES[i],REPLACE_CLASSES[i + 1]);}line=line.substring(1);String[] parts=line.split(":");ppid=Integer.parseInt(parts[0]);pid=Integer.parseInt(parts[1]);tid=Integer.parseInt(parts[2]);processName=decode(parts[3]).intern();classLoader=Integer.parseInt(parts[4]);className=vmTypeToLanguage(decode(parts[5])).intern();time=Long.parseLong(parts[6]);}  }
class C{  public Builder minimize(){  return minimize(DEFAULT_REFRESH_MINIMIZED_DELAY);}  }
class C{  private void stepOutput(final Port port){  final Pipe sendingPipe=getCasing().getSendingPipe(getFace(),port);  if (!sendingPipe.isWriting()) {    final Random random=getCasing().getCasingWorld().rand;    final short value=(short)random.nextInt(0xFFFF + 1);    sendingPipe.beginWrite(value);  }}  }
class C{  public boolean match(Object other){  if (other == null)   return true;  if (!this.getClass().equals(other.getClass()))   return false;  GenericObject that=(GenericObject)other;  Class<?> hisclass=other.getClass();  Class<?> myclass=this.getClass();  while (true) {    Field[] fields=myclass.getDeclaredFields();    Field[] hisfields=hisclass.getDeclaredFields();    for (int i=0; i < fields.length; i++) {      Field f=fields[i];      Field g=hisfields[i];      int modifier=f.getModifiers();      if ((modifier & Modifier.PRIVATE) == Modifier.PRIVATE)       continue;      Class<?> fieldType=f.getType();      String fieldName=f.getName();      if (fieldName.compareTo("stringRepresentation") == 0) {        continue;      }      if (fieldName.compareTo("indentation") == 0) {        continue;      }      try {        if (fieldType.isPrimitive()) {          String fname=fieldType.toString();          if (fname.compareTo("int") == 0) {            if (f.getInt(this) != g.getInt(that))             return false;          } else           if (fname.compareTo("short") == 0) {            if (f.getShort(this) != g.getShort(that))             return false;          } else           if (fname.compareTo("char") == 0) {            if (f.getChar(this) != g.getChar(that))             return false;          } else           if (fname.compareTo("long") == 0) {            if (f.getLong(this) != g.getLong(that))             return false;          } else           if (fname.compareTo("boolean") == 0) {            if (f.getBoolean(this) != g.getBoolean(that))             return false;          } else           if (fname.compareTo("double") == 0) {            if (f.getDouble(this) != g.getDouble(that))             return false;          } else           if (fname.compareTo("float") == 0) {            if (f.getFloat(this) != g.getFloat(that))             return false;          }        } else {          Object myObj=f.get(this);          Object hisObj=g.get(that);          if (hisObj != null && myObj == null)           return false; else           if (hisObj == null && myObj != null)           continue; else           if (hisObj == null && myObj == null)           continue; else           if (hisObj instanceof java.lang.String && myObj instanceof java.lang.String) {            if (((String)hisObj).equals(""))             continue;            if (((String)myObj).compareToIgnoreCase((String)hisObj) != 0)             return false;          } else           if (GenericObject.isMySubclass(myObj.getClass()) && GenericObject.isMySubclass(hisObj.getClass()) && myObj.getClass().equals(hisObj.getClass())&& ((GenericObject)hisObj).getMatcher() != null) {            String myObjEncoded=((GenericObject)myObj).encode();            boolean retval=((GenericObject)hisObj).getMatcher().match(myObjEncoded);            if (!retval)             return false;          } else           if (GenericObject.isMySubclass(myObj.getClass()) && !((GenericObject)myObj).match(hisObj))           return false; else           if (GenericObjectList.isMySubclass(myObj.getClass()) && !((GenericObjectList)myObj).match(hisObj))           return false;        }      } catch (      IllegalAccessException ex1) {        InternalErrorHandler.handleException(ex1);      }    }    if (myclass.equals(NetObject.class))     break; else {      myclass=myclass.getSuperclass();      hisclass=hisclass.getSuperclass();    }  }  return true;}  }
class C{  public static int indexOf(float[] array,float value){  for (int i=0; i < array.length; i++) {    if (Float.compare(array[i],value) == 0) {      return i;    }  }  return -1;}  }
class C{  public int size(){  return tupleTagList.getAll().size();}  }
class C{  private static DbSchemasDiff genGeoDiffs(DbSchemas spec,List<DbSchema> geoSchemas){  List<String> geoSchemaNames=new ArrayList<>();  for (  DbSchema geoSchema : geoSchemas) {    geoSchemaNames.add(geoSchema.getName());  }  List<DbSchema> specSchemaList=new ArrayList<>();  for (  DbSchema schema : spec.getSchemas()) {    if (geoSchemaNames.contains(schema.getName())) {      specSchemaList.add(schema);    }  }  return new DbSchemasDiff(new DbSchemas(specSchemaList),new DbSchemas(geoSchemas));}  }
class C{  void isDefaultValueRequired(String defaultValue) throws ImportException {  if (!paramDef.isConfigurable() && isBlank(defaultValue)) {    ImportException e=new ImportException("The parameter default value must be set as it is not configurable");    throw e;  }}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TIntFloatHashMap)) {    return false;  }  TIntFloatHashMap that=(TIntFloatHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure(that));}  }
class C{  public SimplifyTask(IdTrackerType idTrackerType){  requiredNodes=IdTrackerFactory.createInstance(idTrackerType);  visitedNodes=IdTrackerFactory.createInstance(idTrackerType);  availableNodes=IdTrackerFactory.createInstance(idTrackerType);  allNodes=new SimpleObjectStore<NodeContainer>(new SingleClassObjectSerializationFactory(NodeContainer.class),"afnd",true);  allWays=new SimpleObjectStore<WayContainer>(new SingleClassObjectSerializationFactory(WayContainer.class),"afwy",true);}  }
class C{  public void enqueueJob(final Runnable job){synchronized (mSleepSync) {    if (hasJob()) {      throw new IllegalStateException("Job already enqueued");    }    setJob(job);    mSleepSync.notifyAll();  }}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return new XNumber(left.num() * right.num());}  }
class C{  public void normalizeColumn(final int columnIndex){  double max=Double.NEGATIVE_INFINITY;  double min=Double.POSITIVE_INFINITY;  for (int i=0; i < this.getRowCount(); i++) {    double val=getLogicalValueAt(i,columnIndex);    if (val > max) {      max=val;    }    if (val < min) {      min=val;    }  }  for (int i=0; i < this.getRowCount(); i++) {    setLogicalValue(i,columnIndex,(getLogicalValueAt(i,columnIndex) - min) / (max - min),false);  }  this.fireTableDataChanged();}  }
class C{  public boolean offer(E e){  if (e == null)   throw new NullPointerException();  modCount++;  int i=size;  if (i >= queue.length)   grow(i + 1);  size=i + 1;  if (i == 0)   queue[0]=e; else   siftUp(i,e);  return true;}  }
class C{  protected boolean where(SelectUniversal select,Axis axis,Collection<DimensionMember> filters) throws ScopeException, SQLScopeException {  ExpressionAST expr=axis.getDefinition();  if (expr.getImageDomain().isInstanceOf(IDomain.CONDITIONAL)) {    if (filters.size() == 1) {      Iterator<DimensionMember> iter=filters.iterator();      DimensionMember member=iter.next();      if (member.getID() instanceof Boolean && ((Boolean)member.getID()).booleanValue()) {        IWherePiece piece=select.where(expr);        piece.addComment("filtering on: " + axis.getName());        return true;      }    }    return false;  }  boolean filter_by_null=false;  List<Object> filter_by_members=new ArrayList<Object>();  ExpressionAST filter_by_intervalle=null;  for (  DimensionMember filter : filters) {    Object value=filter.getID();    if (value instanceof Intervalle) {      ExpressionAST where=where(expr,(Intervalle)value);      if (filter_by_intervalle == null) {        filter_by_intervalle=where;      } else       if (where != null) {        filter_by_intervalle=ExpressionMaker.OR(filter_by_intervalle,where);      }    } else {      if (filter.getID() == null || filter.getID().toString() == "") {        filter_by_null=true;      } else {        filter_by_members.add((filter).getID());      }    }  }  ExpressionAST filterALL=null;  if (!filter_by_members.isEmpty()) {    if (filter_by_members.size() == 1) {      ConstantValue value=ExpressionMaker.CONSTANT(filter_by_members.get(0));      filterALL=ExpressionMaker.EQUAL(expr,value);    } else {      filterALL=ExpressionMaker.IN(expr,ExpressionMaker.CONSTANTS(filter_by_members));    }  }  if (filter_by_null) {    ExpressionAST filterNULL=ExpressionMaker.ISNULL(expr);    filterALL=(filterALL == null) ? filterNULL : ExpressionMaker.OR(filterALL,filterNULL);  }  if (filter_by_intervalle != null) {    filterALL=(filterALL == null) ? filter_by_intervalle : ExpressionMaker.OR(filterALL,filter_by_intervalle);  }  if (filterALL != null) {    IWherePiece piece=select.where(filterALL);    piece.addComment("filtering on: " + axis.getName());  }  if (select.getAnalyzer() != null) {    Column c=select.getAnalyzer().factorDimension(axis.getDefinition());    if (c != null) {      DimensionMember timeFilter=null;      for (      DimensionMember filter : filters) {        if (filter.getID() instanceof Intervalle) {          timeFilter=filter;        }      }      if (timeFilter != null) {        ArrayList<DimensionMember> copy=new ArrayList<DimensionMember>(filters);        copy.remove(timeFilter);        select.getAnalyzer().addConstraint(c,copy,timeFilter);      } else {        select.getAnalyzer().addConstraint(c,filters);      }    }  }  return filterALL != null;}  }
class C{  protected int resolveLevelForType(char[] simpleNamePattern,char[] qualificationPattern,char[] enclosingNamePattern,TypeBinding type){  if (enclosingNamePattern == null)   return resolveLevelForType(simpleNamePattern,qualificationPattern,type);  if (qualificationPattern == null)   return resolveLevelForType(simpleNamePattern,enclosingNamePattern,type);  if (type instanceof ProblemReferenceBinding)   return IMPOSSIBLE_MATCH;  char[] fullQualificationPattern=CharOperation.concat(qualificationPattern,enclosingNamePattern,'.');  if (CharOperation.equals(this.pattern.pkg,CharOperation.concatWith(type.getPackage().compoundName,'.')))   return resolveLevelForType(simpleNamePattern,fullQualificationPattern,type);  return IMPOSSIBLE_MATCH;}  }
class C{  @Override public int read() throws IOException {  ensureOpen();  if (pos >= count)   return -1; else   return buf[pos++];}  }
class C{  private void init(final Duration globalDuration,final Duration tenantDuration){  this.globalDuration=globalDuration;  this.setValue(tenantDuration);}  }
class C{  private static Label label(String texto,String tipo){  Label mensagem=new Label(texto);  mensagem.getStyleClass().add("nota-texto");  HBox.setHgrow(mensagem,Priority.ALWAYS);  mensagem.setMaxWidth(Double.MAX_VALUE);  icone(tipo,mensagem);  return mensagem;}  }
class C{  public boolean containsEdge(Edge edge){  int i=nodesHash.get(edge.getNode1());  int j=nodesHash.get(edge.getNode2());  return graphMatrix[i][j] != 0;}  }
class C{  public BdeuScoreImages(List<DataModel> dataModels){  if (dataModels == null) {    throw new NullPointerException();  }  List<BDeuScore> scores=new ArrayList<>();  for (  DataModel model : dataModels) {    if (model instanceof DataSet) {      DataSet dataSet=(DataSet)model;      if (!dataSet.isDiscrete()) {        throw new IllegalArgumentException("Datasets must be continuous.");      }      scores.add(new BDeuScore(dataSet));    } else {      throw new IllegalArgumentException("Only continuous data sets and covariance matrices may be used as input.");    }  }  List<Node> variables=scores.get(0).getVariables();  for (int i=2; i < scores.size(); i++) {    scores.get(i).setVariables(variables);  }  this.scores=scores;  this.variables=variables;}  }
class C{  @Override public Optional<B> transform(Generator gen,A model){  requireNonNull(gen);  requireNonNull(model);  Object o=model;  for (  final Transform<?,?> step : steps) {    if (o == null) {      return Optional.empty();    } else {      @SuppressWarnings("unchecked") final Transform<Object,?> step2=(Transform<Object,?>)step;      o=gen.transform(step2,o,factory).map(null).orElse(null);    }  }  if (o == null) {    return Optional.empty();  } else {    if (to.isAssignableFrom(o.getClass())) {      @SuppressWarnings("unchecked") final B result=(B)o;      return Optional.of(result);    } else {      throw new IllegalStateException("The bridge between '" + from.getSimpleName() + "' to '"+ to.getSimpleName()+ "' is not complete.");    }  }}  }
class C{  public void clear(){  size=0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:51.327 -0500",hash_original_method="66833AAE0F898EE53D028F2100A5AAE5",hash_generated_method="C0B04AAB3D76479962705FC3E15B7873") public void close(){  mEndpoint=null;  native_close();}  }
class C{  public static boolean isLegal(BaseUrlFileInfo baseUrlFileInfo){  if (baseUrlFileInfo == null || !UrlUtil.isUrl(baseUrlFileInfo.getUrl())) {    return false;  }  return true;}  }
class C{  protected static Class<?> numericResultType(final Object left,final Object right){  Class<?> type=void.class;  if (left instanceof Number && right instanceof Number) {    if (left instanceof Long || right instanceof Long) {      type=Long.class;    } else     if (left instanceof Integer || right instanceof Integer) {      type=Integer.class;    }  }  return type;}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.TIME_EVENT;}  }
class C{  public static void createImageToFileSystem(String url,ActionListener callback,String destFile){  Image im=cacheImage(null,false,destFile,null,null,defaultMaintainAspectRatio);  if (im != null) {    callback.actionPerformed(new NetworkEvent(null,im));    return;  }  ImageDownloadService i=new ImageDownloadService(url,callback);  i.cacheImages=true;  i.destinationFile=destFile;  i.setFailSilently(true);  NetworkManager.getInstance().addToQueue(i);}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public static void print(int x){  out.print(x);  out.flush();}  }
class C{  public CActionDifferenceTraces(final JFrame parent,final ITraceListProvider traceProvider,final TraceList trace1,final TraceList trace2){  super(String.format("%s - %s",trace1.getName(),trace2.getName()));  m_parent=parent;  m_traceProvider=traceProvider;  m_trace1=trace1;  m_trace2=trace2;}  }
class C{  private void validateNoConflictingExports(ExportGroup exportGroup,Set<URI> arrayURIs,ExportPathParams pathParam){  _log.info("Requested path parameters: " + pathParam.toString());  Map<String,String> conflictingMasks=new HashMap<String,String>();  StringSet initiators=exportGroup.getInitiators();  if (initiators == null) {    return;  }  for (  String initiatorId : initiators) {    Initiator initiator=_dbClient.queryObject(Initiator.class,URI.create(initiatorId));    if (initiator == null || initiator.getInactive()) {      continue;    }    List<ExportMask> exportMasks=ExportUtils.getInitiatorExportMasks(initiator,_dbClient);    for (    ExportMask exportMask : exportMasks) {      if (arrayURIs.contains(exportMask.getStorageDevice())) {        ExportPathParams maskParam=BlockStorageScheduler.calculateExportPathParamForExportMask(_dbClient,exportMask);        _log.info(String.format("Existing mask %s (%s) parameters: %s",exportMask.getMaskName(),exportMask.getId(),maskParam));        if (pathParam.getPathsPerInitiator() == maskParam.getPathsPerInitiator() && (pathParam.getMinPaths() <= maskParam.getMaxPaths() && maskParam.getMaxPaths() <= pathParam.getMaxPaths())) {          _log.info(String.format("Export mask %s is compatible with the requested parameters",exportMask.getMaskName()));        } else {          StorageSystem system=_dbClient.queryObject(StorageSystem.class,exportMask.getStorageDevice());          String hostName=(initiator.getHostName() != null) ? initiator.getHostName() : initiatorId;          String systemName=(system != null) ? system.getLabel() : exportMask.getStorageDevice().toString();          if (!conflictingMasks.containsKey(hostName)) {            String msg=String.format("Export Mask %s for Host %s and Array %s has %d paths and paths_per_initiator %d",exportMask.getMaskName(),hostName,systemName,maskParam.getMaxPaths(),maskParam.getPathsPerInitiator());            conflictingMasks.put(hostName,msg);          }        }      }    }  }  if (!conflictingMasks.isEmpty()) {    StringBuilder builder=new StringBuilder();    for (    Entry<String,String> entry : conflictingMasks.entrySet()) {      if (builder.length() != 0) {        builder.append("; ");      }      builder.append(entry.getValue());    }    throw APIException.badRequests.cannotOverrideVpoolPathsBecauseExistingExports(builder.toString());  }}  }
class C{  public String marshall(ConstraintsParameters constraintsParams){  StringWriter writer=new StringWriter();  try {    policyMarshaller.marshal(constraintsParams,new StreamResult(writer));  } catch (  Exception e) {    logger.error("Unable to parse JaxB object : " + e.getMessage(),e);  }  return writer.toString();}  }
class C{  public static void streamFileTo(String url,File target) throws IOException {  if (target.getParentFile() != null && !target.getParentFile().exists()) {    target.getParentFile().mkdirs();  }  try (FileOutputStream out=new FileOutputStream(target);InputStream in=new URL(url).openStream()){    byte[] buffer=new byte[1024];    int read=in.read(buffer);    while (read != -1) {      if (read > 0) {        out.write(buffer,0,read);      }      read=in.read(buffer);    }  } }  }
class C{  synchronized void orderlyCloseChannel(SelectionKey key) throws IOException {  SocketChannel ch=(SocketChannel)key.channel();  ch.socket().shutdownOutput();  key.attach(this);  clist.add(key);}  }
class C{  public void onMouseLinkEnter(){  log.debug("onMouseLinkEnter");  scheduleToolTip();}  }
class C{  @Nullable public String cacheName(){  return cacheName;}  }
class C{  public PathMatchingResourcePatternResolver(ClassLoader classLoader){  this.resourceLoader=new DefaultResourceLoader(classLoader);}  }
class C{  private JMenu createScriptMenu(){  JMenu scriptMenu=new JMenu("Scripts");  scriptMenu.add(actionManager.getShowScriptEditorAction());  scriptMenu.addSeparator();  scriptMenu.addMenuListener(menuListener);  for (  Action action : actionManager.getScriptActions(this)) {    scriptMenu.add(action);  }  return scriptMenu;}  }
class C{  public String exportTrl(String directory,int AD_Client_ID,String AD_Language,String Trl_Table){  String fileName=directory + File.separator + Trl_Table+ "_"+ AD_Language+ ".xml";  log.info(fileName);  File out=new File(fileName);  boolean isBaseLanguage=Language.isBaseLanguage(AD_Language);  String tableName=Trl_Table;  int pos=tableName.indexOf("_Trl");  String Base_Table=Trl_Table.substring(0,pos);  if (isBaseLanguage)   tableName=Base_Table;  String keyColumn=Base_Table + "_ID";  String[] trlColumns=getTrlColumns(Base_Table);  StringBuffer sql=null;  try {    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    DocumentBuilder builder=factory.newDocumentBuilder();    Document document=builder.newDocument();    document.appendChild(document.createComment(Adempiere.getSummaryAscii()));    document.appendChild(document.createComment(DTD));    Element root=document.createElement(XML_TAG);    root.setAttribute(XML_ATTRIBUTE_LANGUAGE,AD_Language);    root.setAttribute(XML_ATTRIBUTE_TABLE,Base_Table);    document.appendChild(root);    sql=new StringBuffer("SELECT ");    if (isBaseLanguage)     sql.append("'Y',"); else     sql.append("t.IsTranslated,");    sql.append("t.").append(keyColumn);    for (int i=0; i < trlColumns.length; i++)     sql.append(", t.").append(trlColumns[i]).append(",o.").append(trlColumns[i]).append(" AS ").append(trlColumns[i]).append("O");    sql.append(" FROM ").append(tableName).append(" t").append(" INNER JOIN ").append(Base_Table).append(" o ON (t.").append(keyColumn).append("=o.").append(keyColumn).append(")");    boolean haveWhere=false;    if (!isBaseLanguage) {      sql.append(" WHERE t.AD_Language=?");      haveWhere=true;    }    if (m_IsCentrallyMaintained) {      sql.append(haveWhere ? " AND " : " WHERE ").append("o.IsCentrallyMaintained='N'");      haveWhere=true;    }    if (AD_Client_ID >= 0)     sql.append(haveWhere ? " AND " : " WHERE ").append("o.AD_Client_ID=").append(AD_Client_ID);    sql.append(" ORDER BY t.").append(keyColumn);    PreparedStatement pstmt=DB.prepareStatement(sql.toString(),null);    if (!isBaseLanguage)     pstmt.setString(1,AD_Language);    ResultSet rs=pstmt.executeQuery();    int rows=0;    while (rs.next()) {      Element row=document.createElement(XML_ROW_TAG);      row.setAttribute(XML_ROW_ATTRIBUTE_ID,String.valueOf(rs.getInt(2)));      row.setAttribute(XML_ROW_ATTRIBUTE_TRANSLATED,rs.getString(1));      for (int i=0; i < trlColumns.length; i++) {        Element value=document.createElement(XML_VALUE_TAG);        value.setAttribute(XML_VALUE_ATTRIBUTE_COLUMN,trlColumns[i]);        String origString=rs.getString(trlColumns[i] + "O");        if (origString == null)         origString="";        String valueString=rs.getString(trlColumns[i]);        if (valueString == null)         valueString="";        value.setAttribute(XML_VALUE_ATTRIBUTE_ORIGINAL,origString);        if (valueString.indexOf("<") != -1 || valueString.indexOf(">") != -1 || valueString.indexOf("&") != -1) {          value.appendChild(document.createCDATASection(valueString));        } else {          value.appendChild(document.createTextNode(valueString));        }        row.appendChild(value);      }      root.appendChild(row);      rows++;    }    rs.close();    pstmt.close();    log.info("Records=" + rows + ", DTD="+ document.getDoctype()+ " - "+ Trl_Table);    DOMSource source=new DOMSource(document);    TransformerFactory tFactory=TransformerFactory.newInstance();    tFactory.setAttribute("indent-number",Integer.valueOf(1));    Transformer transformer=tFactory.newTransformer();    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    out.createNewFile();    Writer writer=new OutputStreamWriter(new FileOutputStream(out),"utf-8");    StreamResult result=new StreamResult(writer);    transformer.transform(source,result);    writer.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql.toString(),e);    return e.toString();  }catch (  Exception e) {    log.log(Level.SEVERE,"",e);    return e.toString();  }  return "";}  }
class C{  boolean importStackContains(String hrefUrl){  return stackContains(m_importStack,hrefUrl);}  }
class C{  @SuppressWarnings("unchecked") private void initSimpleRegexReplacement(NamedList args){  if (0 <= args.indexOf(SOURCE_PARAM,0) || 0 <= args.indexOf(DEST_PARAM,0)) {    throw new SolrException(SERVER_ERROR,"Short hand syntax must not be mixed with full syntax. Found " + PATTERN_PARAM + " and "+ REPLACEMENT_PARAM+ " but also found "+ SOURCE_PARAM+ " or "+ DEST_PARAM);  }  assert args.indexOf(SOURCE_PARAM,0) < 0;  Object patt=args.remove(PATTERN_PARAM);  Object replacement=args.remove(REPLACEMENT_PARAM);  if (null == patt || null == replacement) {    throw new SolrException(SERVER_ERROR,"Init params '" + PATTERN_PARAM + "' and '"+ REPLACEMENT_PARAM+ "' are both mandatory if '"+ SOURCE_PARAM+ "' and '"+ DEST_PARAM+ "' are not both specified");  }  if (0 != args.size()) {    throw new SolrException(SERVER_ERROR,"Init params '" + REPLACEMENT_PARAM + "' and '"+ PATTERN_PARAM+ "' must be children of '"+ DEST_PARAM+ "' to be combined with other options.");  }  if (!(replacement instanceof String)) {    throw new SolrException(SERVER_ERROR,"Init param '" + REPLACEMENT_PARAM + "' must be a string (i.e. <str>)");  }  if (!(patt instanceof String)) {    throw new SolrException(SERVER_ERROR,"Init param '" + PATTERN_PARAM + "' must be a string (i.e. <str>)");  }  dest=replacement.toString();  try {    this.pattern=Pattern.compile(patt.toString());  } catch (  PatternSyntaxException pe) {    throw new SolrException(SERVER_ERROR,"Init param " + PATTERN_PARAM + " is not a valid regex pattern: "+ patt,pe);  }  srcInclusions=new SelectorParams();  srcInclusions.fieldRegex=Collections.singletonList(this.pattern);}  }
class C{  protected boolean haveSharedCellsRaw(DoubleMatrix3D other){  if (other instanceof SelectedDenseDoubleMatrix3D) {    SelectedDenseDoubleMatrix3D otherMatrix=(SelectedDenseDoubleMatrix3D)other;    return this.elements == otherMatrix.elements;  } else   if (other instanceof DenseDoubleMatrix3D) {    DenseDoubleMatrix3D otherMatrix=(DenseDoubleMatrix3D)other;    return this.elements == otherMatrix.elements;  }  return false;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'GroupVideo' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'PARENT_ID' INTEGER,"+ "'NAME' TEXT,"+ "'CREATE_DATE' INTEGER);");}  }
class C{  public static boolean contentEqualsIgnoreEOL(File file1,File file2,String charsetName) throws IOException {  boolean file1Exists=file1.exists();  if (file1Exists != file2.exists()) {    return false;  }  if (!file1Exists) {    return true;  }  if (file1.isDirectory() || file2.isDirectory()) {    throw new IOException("Can't compare directories, only files");  }  if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {    return true;  }  Reader input1=null;  Reader input2=null;  try {    if (charsetName == null) {      input1=new InputStreamReader(new FileInputStream(file1));      input2=new InputStreamReader(new FileInputStream(file2));    } else {      input1=new InputStreamReader(new FileInputStream(file1),charsetName);      input2=new InputStreamReader(new FileInputStream(file2),charsetName);    }    return IOUtils.contentEqualsIgnoreEOL(input1,input2);  }  finally {    IOUtils.closeQuietly(input1);    IOUtils.closeQuietly(input2);  }}  }
class C{  public String invertTipText(){  return "Whether or not to invert the selection. If true, correctly classified instances will be discarded.";}  }
class C{  public DynamicSizedSchedulerImpl(int corePoolSize){  super(corePoolSize,new MariaDbThreadFactory());}  }
class C{  public Master(InputStream in){  this(in,null,-1);}  }
class C{  public CatalogServiceRestRep create(CatalogServiceCreateParam input){  CatalogServiceRestRep catalogService=client.post(CatalogServiceRestRep.class,input,PathConstants.CATALOG_SERVICE_URL);  return catalogService;}  }
class C{  private static boolean calculateIsFailure(){  int randomValue=random.nextInt(100) + 1;  return randomValue <= ERROR_PCT;}  }
class C{  public static <T>T eachLine(File self,@ClosureParams(value=FromString.class,options={"String","String,Integer"}) Closure<T> closure) throws IOException {  return eachLine(self,1,closure);}  }
class C{  public InputMethodHighlight(boolean selected,int state,int variation){  this(selected,state,variation,null);}  }
class C{  protected List<CnATreeElement> createInsertList(List<String> uuidList){  List<CnATreeElement> tempList=new ArrayList<CnATreeElement>();  List<CnATreeElement> insertList=new ArrayList<CnATreeElement>();  int depth=0;  int removed=0;  for (  String uuid : uuidList) {    CnATreeElement element=getDao().findByUuid(uuid,RetrieveInfo.getChildrenInstance().setParent(true));    createInsertList(element,tempList,insertList,depth,removed);  }  return insertList;}  }
class C{  public void startCDATA(){  theNextState=S_CDATA;}  }
class C{  private static long GetLongField(JNIEnvironment env,int objJREF,int fieldID){  if (traceJNI)   VM.sysWrite("JNI called: GetLongField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    return field.getLongValueUnchecked(obj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0L;  }}  }
class C{  public boolean nextBoolean(){  return random.nextBoolean();}  }
class C{  public static final byte composeEsmeManualAcknowledgement(byte esmClass){  return composeMessageType(esmClass,SMPPConstant.ESMCLS_ESME_MANUAL_ACK);}  }
class C{  @Override protected EClass eStaticClass(){  return SGraphPackage.Literals.SCOPE;}  }
class C{  public UAX29URLEmailTokenizerFactory(Map<String,String> args){  super(args);  maxTokenLength=getInt(args,"maxTokenLength",StandardAnalyzer.DEFAULT_MAX_TOKEN_LENGTH);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public static double triangular(double min,double max){  double x=min / 2 + (max - min) * raw() / 2 + min / 2 + (max - min) * raw() / 2;  return x;}  }
class C{  public static final long BuildLongLE(byte bytevec[],int offset){  return (((long)signedToInt(bytevec[7 + offset]) << 56) | ((long)signedToInt(bytevec[6 + offset]) << 48) | ((long)signedToInt(bytevec[5 + offset]) << 40)| ((long)signedToInt(bytevec[4 + offset]) << 32)| ((long)signedToInt(bytevec[3 + offset]) << 24)| ((long)signedToInt(bytevec[2 + offset]) << 16)| ((long)signedToInt(bytevec[1 + offset]) << 8)| ((long)signedToInt(bytevec[0 + offset])));}  }
class C{  public static Kernel makeKernel(float radius){  int r=(int)Math.ceil(radius);  int rows=r * 2 + 1;  float[] matrix=new float[rows];  float sigma=radius / 3;  float sigma22=2 * sigma * sigma;  float sigmaPi2=2 * ImageMath.PI * sigma;  float sqrtSigmaPi2=(float)Math.sqrt(sigmaPi2);  float radius2=radius * radius;  float total=0;  int index=0;  for (int row=-r; row <= r; row++) {    float distance=row * row;    if (distance > radius2)     matrix[index]=0; else     matrix[index]=(float)Math.exp(-(distance) / sigma22) / sqrtSigmaPi2;    total+=matrix[index];    index++;  }  for (int i=0; i < rows; i++)   matrix[i]/=total;  return new Kernel(rows,1,matrix);}  }
class C{  public void replace(MemberDefinition method){  if (frozen) {    throw new CompilerError("replace()");  }  Identifier name=method.getName();  List methodList=(List)lookupMap.get(name);  if (methodList == null) {    methodList=new ArrayList();    lookupMap.put(name,methodList);  }  int size=methodList.size();  for (int i=0; i < size; i++) {    if (((MemberDefinition)methodList.get(i)).getType().equalArguments(method.getType())) {      methodList.set(i,method);      return;    }  }  methodList.add(method);  count++;}  }
class C{  int[] findNearestVacantArea(int pixelX,int pixelY,int spanX,int spanY,int[] result){  return findNearestVacantArea(pixelX,pixelY,spanX,spanY,spanX,spanY,result,null);}  }
class C{  public T next(){  T val=(T)cur.getValue();  if (cur.isThread()) {    cur=cur.thread;  } else {    cur=cur.getRightSon();    RightThreadedBinaryNode<T> n;    if (cur == null) {      throw new NoSuchElementException("next() invoked after all elements have been returned.");    }    while ((n=cur.getLeftSon()) != null) {      cur=n;    }  }  return val;}  }
class C{  protected Position determineMainLabelPosition(DrawContext dc){  List<Sector> sectors=this.polygon.getSectors(dc);  if (sectors != null) {    Sector sector=sectors.get(0);    return new Position(sector.getCentroid(),0);  }  return this.getReferencePosition();}  }
class C{  public long roundTripTime() throws InterruptedException {  latch.await();  return received - sent;}  }
class C{  public static void notify(final Image image,final String title,final String text){  notify(image,title,text,NotifierTheme.YELLOW_THEME);}  }
class C{  @Override public synchronized void removeAttribute(int index){  Attribute a=attributes.get(index);  if (a == null) {    return;  }  attributes.set(index,null);  unusedColumnList.add(index);}  }
class C{  public CSVWriter(Writer writer,char separator,char quotechar,char escapechar){  this(writer,separator,quotechar,escapechar,DEFAULT_LINE_END);}  }
class C{  private boolean isUserALocalAdmin(RequestAndResponse requestAndResponse){  if (loopbackIsAdmin) {    final String remoteAddr=requestAndResponse.request.getRemoteAddr();    if (remoteAddr != null && (remoteAddr.equals("127.0.0.1") || remoteAddr.equals("0:0:0:0:0:0:0:1"))) {      requestAndResponse.isLocalAdmin=true;      return true;    }  }  return false;}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("parse");  try {    headerName(TokenTypes.JOIN_TO);    Join join=new Join();    this.lexer.SPorHT();    String callId=lexer.byteStringNoSemicolon();    this.lexer.SPorHT();    super.parse(join);    join.setCallId(callId);    return join;  }  finally {    if (debug)     dbg_leave("parse");  }}  }
class C{  protected void PathExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  int filterExprMatch=FilterExpr();  if (filterExprMatch != FILTER_MATCH_FAILED) {    boolean locationPathStarted=(filterExprMatch == FILTER_MATCH_PREDICATES);    if (tokenIs('/')) {      nextToken();      if (!locationPathStarted) {        insertOp(opPos,2,OpCodes.OP_LOCATIONPATH);        locationPathStarted=true;      }      if (!RelativeLocationPath()) {        error(XPATHErrorResources.ER_EXPECTED_REL_LOC_PATH,null);      }    }    if (locationPathStarted) {      m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.ENDOP);      m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);      m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);    }  } else {    LocationPath();  }}  }
class C{  public DeliveryThread(TOMLayer tomLayer,ServiceReplica receiver,Recoverable recoverer,ServerViewController controller){  super("Delivery Thread");  this.decided=new LinkedBlockingQueue<>();  this.tomLayer=tomLayer;  this.receiver=receiver;  this.recoverer=recoverer;  this.controller=controller;}  }
class C{  public JapaneseReadingFormFilterFactory(Map<String,String> args){  super(args);  useRomaji=getBoolean(args,ROMAJI_PARAM,false);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public ECHO224(){  super();}  }
class C{  public void clearBasicAuth(){  this.httpClient.getCredentialsProvider().clear();}  }
class C{  public void generateLootPot(World world,Random random,BlockPos pos,int min,int max,ResourceLocation list){  world.setBlockState(pos,getRandomLootPot(random),3);  TileEntityLootPot lootPot=(TileEntityLootPot)world.getTileEntity(pos);  if (lootPot != null)   lootPot.setLootTable(LootTableRegistry.COMMON_CHEST_LOOT,random.nextLong());}  }
class C{  public void testBoundedInts(){  AtomicInteger fails=new AtomicInteger(0);  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=12345L;  for (int least=-15485867; least < MAX_INT_BOUND; least+=524959) {    for (int bound=least + 2; bound > least && bound < MAX_INT_BOUND; bound+=67867967) {      final int lo=least, hi=bound;      r.ints(size,lo,hi).parallel().forEach(null);    }  }  assertEquals(0,fails.get());}  }
class C{  protected String button_message(){  return getString(R.string.try_again);}  }
class C{  public Long zremrangeByRank(final byte[] key,final long start,final long end){  checkIsInMulti();  client.zremrangeByRank(key,start,end);  return client.getIntegerReply();}  }
class C{  private QueryCursor<Cache.Entry<Object,Object>> scan(IgniteCache<Object,Object> c,VisorQueryArg arg,IgniteBiPredicate<Object,Object> filter){  ScanQuery<Object,Object> qry=new ScanQuery<>(filter);  qry.setPageSize(arg.pageSize());  qry.setLocal(arg.local());  return c.withKeepBinary().query(qry);}  }
class C{  public String hashOwnPassword(String username,String pass) throws SecurityException {  if (!getUsername().equals(username)) {    throw new SecurityException(Messages.getString("AuthenticationService.0"));  }  return DigestProcessingFilter.encodePasswordInA1Format(username,entryPoint.getRealmName(),pass);}  }
class C{  private static String extractValueForConversion(final SubstringFormatterDetails details,final String text) throws ConversionException {  final int startTagIndex=text.indexOf(details.getStartTag());  if (startTagIndex != -1) {    final int endTagIndex=text.indexOf(details.getEndTag(),startTagIndex);    if (endTagIndex != -1) {      return text.substring(startTagIndex + details.getStartTag().length(),endTagIndex);    }  }  throw new ConversionException("Cannot find tags");}  }
class C{  public DateTime roundHalfFloorCopy(){  return iInstant.withMillis(iField.roundHalfFloor(iInstant.getMillis()));}  }
class C{  public void forEachDstOver(Allocation ain,Allocation aout){  blend(4,ain,aout);}  }
class C{  public void removeTabStop(int stop){  tabstops.remove(stop);}  }
class C{  public void removeUpdates(PendingIntent intent){  checkPendingIntent(intent);  String packageName=mContext.getPackageName();  try {    mService.removeUpdates(null,intent,packageName);  } catch (  RemoteException e) {    Log.e(TAG,"RemoteException",e);  }}  }
class C{  @DSSink({DSSinkKind.IO}) @DSComment("IO movement methodName") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:41.078 -0500",hash_original_method="9182DD9F41FA957369047C0FC9C79FCF",hash_generated_method="2FB2249EAF550DB99337C4213777CDD2") public void println(){  newline();}  }
class C{  public void resetOffset(V view,boolean withAnimation){  if (hidden) {    hidden=false;    animateOffset(view,0,true,withAnimation);  }}  }
class C{  public T advance(){  if (head == null) {    return null;  }  T headElement=head.element;  head=head.next;  return headElement;}  }
class C{  public static void drop(final InMemoryDatabase db){  if (db != null) {    db.drop();  }}  }
class C{  public Object[] elements(){  return elements;}  }
class C{  public BinaryNode<E> put(E value){  return put(root,value);}  }
class C{  public WampClientBuilder withInfiniteReconnects(){  this.nrReconnects=-1;  return this;}  }
class C{  public DragSourceEvent(DragSourceContext dsc,int x,int y){  super(dsc);  locationSpecified=true;  this.x=x;  this.y=y;}  }
class C{  public static String implode(final String[] array,final String delim,final boolean quoteStringsWithSpaces){  final StringBuilder sb=new StringBuilder();  for (int i=0; i < array.length; i++) {    if (i != 0 && delim != null) {      sb.append(delim);    }    sb.append(quoteStringsWithSpaces ? smartQuote(array[i]) : array[i]);  }  return sb.toString();}  }
class C{  public SdfId(){  this(UUID.randomUUID());}  }
class C{  public boolean hasSetter(){  return setter(CONCRETE) != null || setter(ABSTRACT) != null;}  }
class C{  public static boolean isNightly(){  return getBuild().equalsIgnoreCase("nightly") ? true : false;}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  if (m_ZeroR != null) {    return m_ZeroR.distributionForInstance(instance);  }  double[] sums=new double[instance.numClasses()], newProbs;  double numPreds=0;  for (int i=0; i < m_NumIterations; i++) {    if (instance.classAttribute().isNumeric() == true) {      double pred=m_Classifiers[i].classifyInstance(instance);      if (!Utils.isMissingValue(pred)) {        sums[0]+=pred;        numPreds++;      }    } else {      newProbs=m_Classifiers[i].distributionForInstance(instance);      for (int j=0; j < newProbs.length; j++)       sums[j]+=newProbs[j];    }  }  if (instance.classAttribute().isNumeric() == true) {    if (numPreds == 0) {      sums[0]=Utils.missingValue();    } else {      sums[0]/=numPreds;    }    return sums;  } else   if (Utils.eq(Utils.sum(sums),0)) {    return sums;  } else {    Utils.normalize(sums);    return sums;  }}  }
class C{  public boolean isStrict(Context context){  if (policy == null) {    return context.isStrict();  }  return context.isStrict() && policy.isStrict();}  }
class C{  @Override public void addUndoPoint(){  ((ArffSortedTableModel)m_TableArff.getModel()).addUndoPoint();  setMenu();}  }
class C{  public static Object castTo(PageContext pc,short type,String strType,Object o) throws PageException {  if (type == CFTypes.TYPE_ANY)   return o; else   if (type == CFTypes.TYPE_ARRAY)   return toArray(o); else   if (type == CFTypes.TYPE_BOOLEAN)   return toBoolean(o); else   if (type == CFTypes.TYPE_BINARY)   return toBinary(o); else   if (type == CFTypes.TYPE_DATETIME)   return DateCaster.toDateAdvanced(o,pc.getTimeZone()); else   if (type == CFTypes.TYPE_NUMERIC)   return toDouble(o); else   if (type == CFTypes.TYPE_QUERY)   return toQuery(o); else   if (type == CFTypes.TYPE_QUERY_COLUMN)   return toQueryColumn(o); else   if (type == CFTypes.TYPE_STRING)   return toString(o); else   if (type == CFTypes.TYPE_STRUCT)   return toStruct(o); else   if (type == CFTypes.TYPE_TIMESPAN)   return toTimespan(o); else   if (type == CFTypes.TYPE_UUID)   return toUUId(o); else   if (type == CFTypes.TYPE_GUID)   return toGUId(o); else   if (type == CFTypes.TYPE_VARIABLE_NAME)   return toVariableName(o); else   if (type == CFTypes.TYPE_VOID)   return toVoid(o); else   if (type == CFTypes.TYPE_XML)   return toXML(o); else   if (type == CFTypes.TYPE_FUNCTION)   return toFunction(o); else   if (type == CFTypes.TYPE_IMAGE)   return Image.toImage(pc,o); else   if (type == CFTypes.TYPE_LOCALE)   return toLocale(o); else   if (type == CFTypes.TYPE_TIMEZONE)   return toTimeZone(o);  return _castTo(pc,strType,o);}  }
class C{  public boolean restore(){  SharedPreferences settings=mContext.getSharedPreferences(AndroidConstants.SHARED_PREFS_PHOTOS,0);  boolean res=true;  String photoList=settings.getString("photoList",null);  String photoListNextPage=settings.getString("photoListNextPage",null);  res=photoList != null && photoListNextPage != null;  if (res) {    ObjectMapper mapper=new ObjectMapper();    try {      mPhotoLists=mapper.readValue(photoList,new TypeReference<Map<AbelanaClient.PhotoListType,List<PhotoInfo>>>(){      });      mPhotoListsNextPage=mapper.readValue(photoListNextPage,new TypeReference<Map<AbelanaClient.PhotoListType,Long>>(){      });    } catch (    IOException e) {      Log.e("PhotoAdapter",e.getMessage());      return false;    }  }  return res;}  }
class C{  public AuthorityKeyIdentifier(GeneralNames name,BigInteger serialNumber){  this((byte[])null,name,serialNumber);}  }
class C{  public LambdaFactoryConfiguration withClassFactory(ClassFactory classFactory){  return copy().setClassFactory(classFactory);}  }
class C{  public ObjectName preRegister(MBeanServer server,ObjectName name) throws Exception {  if (name == null) {    if (config == null)     return null;    if (config.getName() == null)     return null;    name=ScanManager.makeMBeanName(ScanDirConfigMXBean.class,config.getName());  }  objectName=name;  mbeanServer=server;synchronized (this) {    configname=name.getKeyProperty("name");    if (config == null)     config=new ScanManagerConfig(configname); else     config=config.copy(configname);  }  return name;}  }
class C{  public void timesEquals(double c){  for (int i=0; i <= order; i++)   a[i]*=c;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  protected boolean readHeader() throws IOException, ArticleReaderException {  this.taskHeader=new ArticleInformation();  int size, r=read();  StringBuilder buffer=null;  while (r != -1) {    if (buffer != null) {      buffer.append((char)r);    }    if (this.keywords.check((char)r)) {switch (this.keywords.getValue()) {case KEY_START_TITLE:case KEY_START_ID:        buffer=new StringBuilder();      break;case KEY_END_TITLE:    size=buffer.length();  buffer.delete(size - WikipediaXMLKeys.KEY_END_TITLE.getKeyword().length(),size);this.taskHeader.setArticleName(buffer.toString());if (this.articleFilter != null) {if (!this.articleFilter.checkArticle(this.taskHeader.getArticleName())) {  return false;}}buffer=null;break;case KEY_END_ID:size=buffer.length();buffer.delete(size - WikipediaXMLKeys.KEY_END_ID.getKeyword().length(),size);this.taskHeader.setArticleId(Integer.parseInt(buffer.toString()));buffer=null;break;case KEY_START_REVISION:this.keywords.reset();return true;default :throw ErrorFactory.createArticleReaderException(ErrorKeys.DELTA_CONSUMERS_TASK_READER_WIKIPEDIAXMLREADER_UNEXPECTED_KEYWORD);}this.keywords.reset();}r=read();}throw ErrorFactory.createArticleReaderException(ErrorKeys.DELTA_CONSUMERS_TASK_READER_WIKIPEDIAXMLREADER_UNEXPECTED_END_OF_FILE);}  }
class C{  public void initWheelEventNS(String namespaceURIArg,String typeArg,boolean canBubbleArg,boolean cancelableArg,AbstractView viewArg,int wheelDeltaArg){  initUIEventNS(namespaceURIArg,typeArg,canBubbleArg,cancelableArg,viewArg,0);  wheelDelta=wheelDeltaArg;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(1);  newVector.addElement(new Option("\tThe filename where output will be stored. Use - for stdout.\n" + "\t(default temp file)","O",1,"-O <file name>"));  return newVector.elements();}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  void put(int fieldNumber,FieldData data){  int i=binarySearch(fieldNumber);  if (i >= 0) {    mData[i]=data;  } else {    i=~i;    if (i < mSize && mData[i] == DELETED) {      mFieldNumbers[i]=fieldNumber;      mData[i]=data;      return;    }    if (mGarbage && mSize >= mFieldNumbers.length) {      gc();      i=~binarySearch(fieldNumber);    }    if (mSize >= mFieldNumbers.length) {      int n=idealIntArraySize(mSize + 1);      int[] nkeys=new int[n];      FieldData[] nvalues=new FieldData[n];      System.arraycopy(mFieldNumbers,0,nkeys,0,mFieldNumbers.length);      System.arraycopy(mData,0,nvalues,0,mData.length);      mFieldNumbers=nkeys;      mData=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mFieldNumbers,i,mFieldNumbers,i + 1,mSize - i);      System.arraycopy(mData,i,mData,i + 1,mSize - i);    }    mFieldNumbers[i]=fieldNumber;    mData[i]=data;    mSize++;  }}  }
class C{  private Observable<Payload> createHotObservable(String marble){  List<Character> list=new ArrayList<>();  for (  char c : marble.toCharArray()) {    if (c != '-')     list.add(c);  }  Iterator<Character> iter=list.iterator();  return Observable.<Payload>create(null).subscribeOn(Schedulers.io());}  }
class C{  public <E extends Enum<E>>E optEnum(Class<E> clazz,String key){  return this.optEnum(clazz,key,null);}  }
class C{  public boolean contains(String name) throws UsersRepositoryException {  try {    final Session session=login();    try {      final Node rootNode=session.getRootNode();      final String path=USERS_PATH + "/" + toSafeName(name.toLowerCase());      rootNode.getNode(path);      return true;    }  finally {      session.logout();    }  } catch (  PathNotFoundException e) {    if (getLogger().isDebugEnabled()) {      getLogger().debug("User not found: " + name,e);    }  }catch (  RepositoryException e) {    throw new UsersRepositoryException("Failed to search for user: " + name,e);  }  return false;}  }
class C{  public static String serverUnderTest(){  String ipAddress="";  String baseURL="";  String server=System.getProperty("app.url");  if (server == null) {    baseURL=Utils.readConfigProperty("serverUnderTest");  } else {    InetAddress localMachine=null;    try {      localMachine=InetAddress.getLocalHost();    } catch (    UnknownHostException e) {      e.printStackTrace();    }    ipAddress=localMachine.getHostAddress();    baseURL=server.replace("localhost",ipAddress);  }  return baseURL;}  }
class C{  private void parseIM(Node node){  String imCapAlwaysOn=null;  String ftCapAlwaysOn=null;  String imWarnSF=null;  String imSessionStart=null;  String ftWarnSize=null;  String autoAcceptFt=null;  String ftHttpCsUri=null;  String ftHttpCsUser=null;  String ftHttpCsPwd=null;  String ftDefaultMech=null;  String ftSF=null;  String chatAuth=null;  String smsFallBackAuth=null;  String autoAcceptChat=null;  String autoAcceptGroupChat=null;  String maxSize1to1=null;  String maxSize1toM=null;  String timerIdle=null;  String maxSizeFileTransfer=null;  String ftThumb=null;  String maxAdhocGroupSize=null;  String confFctyUri=null;  String groupChatSF=null;  String groupChatOnlySF=null;  String maxConcurrentSession=null;  String imMsgTech=null;  String firstMessageInvite=null;  Node childnode=node.getFirstChild();  if (childnode != null) {    do {      if (imCapAlwaysOn == null) {        if ((imCapAlwaysOn=getValueByParamName("imCapAlwaysON",childnode,TYPE_INT)) != null) {          boolean _imCapAlwaysOn=!imCapAlwaysOn.equals("0");          mRcsSettings.writeBoolean(RcsSettingsData.IM_CAPABILITY_ALWAYS_ON,_imCapAlwaysOn);          if (mFirst) {            if (_imCapAlwaysOn) {              mRcsSettings.setDefaultMessagingMethod(MessagingMethod.RCS);            } else {              mRcsSettings.setDefaultMessagingMethod(MessagingMethod.AUTOMATIC);            }          }          continue;        }      }      if (ftCapAlwaysOn == null) {        if ((ftCapAlwaysOn=getValueByParamName("ftCapAlwaysON",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.FT_CAPABILITY_ALWAYS_ON,!ftCapAlwaysOn.equals("0"));          continue;        }      }      if (maxConcurrentSession == null) {        if ((maxConcurrentSession=getValueByParamName("MaxConcurrentSession",childnode,TYPE_INT)) != null) {          mRcsSettings.writeInteger(RcsSettingsData.MAX_CHAT_SESSIONS,Integer.parseInt(maxConcurrentSession));          continue;        }      }      if (groupChatSF == null) {        if ((groupChatSF=getValueByParamName("GroupChatFullStandFwd",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.CAPABILITY_GROUP_CHAT_SF,!groupChatSF.equals("0"));          continue;        }      }      if (groupChatOnlySF == null) {        if ((groupChatOnlySF=getValueByParamName("GroupChatOnlyFStandFwd",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.GROUP_CHAT_INVITE_ONLY_FULL_SF,!groupChatOnlySF.equals("0"));          continue;        }      }      if (imWarnSF == null) {        if ((imWarnSF=getValueByParamName("imWarnSF",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.WARN_SF_SERVICE,!imWarnSF.equals("0"));          continue;        }      }      if (autoAcceptFt == null) {        if ((autoAcceptFt=getValueByParamName("ftAutAccept",childnode,TYPE_INT)) != null) {          boolean aaModeChangeable=!autoAcceptFt.equals("0");          if (mFirst || (aaModeChangeable != mRcsSettings.isFtAutoAcceptedModeChangeable())) {            mRcsSettings.setFtAutoAcceptedModeChangeable(aaModeChangeable);            if (aaModeChangeable) {              mRcsSettings.setFileTransferAutoAccepted(true);              mRcsSettings.setFileTransferAutoAcceptedInRoaming(false);            } else {              mRcsSettings.setFileTransferAutoAccepted(false);              mRcsSettings.setFileTransferAutoAcceptedInRoaming(false);            }          }          continue;        }      }      if (ftSF == null) {        if ((ftSF=getValueByParamName("ftStAndFwEnabled",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.CAPABILITY_FILE_TRANSFER_SF,!ftSF.equals("0"));          continue;        }      }      if (ftHttpCsUri == null) {        if ((ftHttpCsUri=getValueByParamName("ftHTTPCSURI",childnode,TYPE_TXT)) != null) {          Uri ftHttpServAddr="".equals(ftHttpCsUri) ? null : Uri.parse(ftHttpCsUri);          if (ftHttpServAddr != null && !PROTOCOL_HTTPS.equals(ftHttpServAddr.getScheme())) {            sLogger.error(ftHttpCsUri + " is not a secure protocol, hence disabling ftHttp capability.");            continue;          }          mRcsSettings.setFtHttpServer(ftHttpServAddr);          continue;        }      }      if (ftHttpCsUser == null) {        if ((ftHttpCsUser=getValueByParamName("ftHTTPCSUser",childnode,TYPE_TXT)) != null) {          mRcsSettings.setFtHttpLogin("".equals(ftHttpCsUser) ? null : ftHttpCsUser);          continue;        }      }      if (ftHttpCsPwd == null) {        if ((ftHttpCsPwd=getValueByParamName("ftHTTPCSPwd",childnode,TYPE_TXT)) != null) {          mRcsSettings.setFtHttpPassword("".equals(ftHttpCsPwd) ? null : ftHttpCsPwd);          continue;        }      }      if (ftDefaultMech == null) {        if ((ftDefaultMech=getValueByParamName("ftDefaultMech",childnode,TYPE_TXT)) != null) {          FileTransferProtocol protocol=FileTransferProtocol.valueOf(ftDefaultMech);          mRcsSettings.setFtProtocol(protocol);          continue;        }      }      if (imSessionStart == null) {        if ((imSessionStart=getValueByParamName("imSessionStart",childnode,TYPE_INT)) != null) {          ImSessionStartMode mode=ImSessionStartMode.valueOf(Integer.parseInt(imSessionStart));          mRcsSettings.setImSessionStartMode(mode);          continue;        }      }      if (ftWarnSize == null) {        if ((ftWarnSize=getValueByParamName("ftWarnSize",childnode,TYPE_INT)) != null) {          long size=Long.parseLong(ftWarnSize) * 1024L;          mRcsSettings.setWarningMaxFileTransferSize(size);          continue;        }      }      if (chatAuth == null) {        if ((chatAuth=getValueByParamName("ChatAuth",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.CAPABILITY_IM_SESSION,!chatAuth.equals("0"));          continue;        }      }      if (smsFallBackAuth == null) {        if ((smsFallBackAuth=getValueByParamName("SmsFallBackAuth",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.SMS_FALLBACK_SERVICE,smsFallBackAuth.equals("0"));          continue;        }      }      if (autoAcceptChat == null) {        if ((autoAcceptChat=getValueByParamName("AutAccept",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.AUTO_ACCEPT_CHAT,!autoAcceptChat.equals("0"));          continue;        }      }      if (autoAcceptGroupChat == null) {        if ((autoAcceptGroupChat=getValueByParamName("AutAcceptGroupChat",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.AUTO_ACCEPT_GROUP_CHAT,!autoAcceptGroupChat.equals("0"));          continue;        }      }      if (maxSize1to1 == null) {        if ((maxSize1to1=getValueByParamName("MaxSize1to1",childnode,TYPE_INT)) != null) {          mRcsSettings.writeInteger(RcsSettingsData.MAX_CHAT_MSG_LENGTH,Integer.parseInt(maxSize1to1));          continue;        }      }      if (maxSize1toM == null) {        if ((maxSize1toM=getValueByParamName("MaxSize1toM",childnode,TYPE_INT)) != null) {          mRcsSettings.writeInteger(RcsSettingsData.MAX_GROUPCHAT_MSG_LENGTH,Integer.parseInt(maxSize1toM));          continue;        }      }      if (timerIdle == null) {        if ((timerIdle=getValueByParamName("TimerIdle",childnode,TYPE_INT)) != null) {          mRcsSettings.writeLong(RcsSettingsData.CHAT_IDLE_DURATION,Long.parseLong(timerIdle) * SECONDS_TO_MILLISECONDS_CONVERSION_RATE);          continue;        }      }      if (maxSizeFileTransfer == null) {        if ((maxSizeFileTransfer=getValueByParamName("MaxSizeFileTr",childnode,TYPE_INT)) != null) {          long size=Long.parseLong(maxSizeFileTransfer) * 1024L;          mRcsSettings.setMaxFileTransferSize(size);          continue;        }      }      if (ftThumb == null) {        if ((ftThumb=getValueByParamName("ftThumb",childnode,TYPE_INT)) != null) {          mRcsSettings.writeBoolean(RcsSettingsData.CAPABILITY_FILE_TRANSFER_THUMBNAIL,!ftThumb.equals("0"));          continue;        }      }      if (maxAdhocGroupSize == null) {        if ((maxAdhocGroupSize=getValueByParamName("max_adhoc_group_size",childnode,TYPE_INT)) != null) {          mRcsSettings.writeInteger(RcsSettingsData.MAX_CHAT_PARTICIPANTS,Integer.parseInt(maxAdhocGroupSize));          continue;        }      }      if (confFctyUri == null) {        if ((confFctyUri=getValueByParamName("conf-fcty-uri",childnode,TYPE_TXT)) != null) {          mRcsSettings.setImConferenceUri("".equals(confFctyUri) ? null : formatSipUri(confFctyUri.trim()));          continue;        }      }      if (imMsgTech == null) {        if ((imMsgTech=getValueByParamName("imMsgTech",childnode,TYPE_INT)) != null) {          ImMsgTech value=ImMsgTech.valueOf(Integer.parseInt(imMsgTech));          mRcsSettings.setImMsgTech(value);          continue;        }      }      if (firstMessageInvite == null) {        if ((firstMessageInvite=getValueByParamName("firstMsgInvite",childnode,TYPE_INT)) != null) {          boolean isFirstMessageInvite=!firstMessageInvite.equals("0");          if (!isFirstMessageInvite) {            sLogger.error("isFirstMessageInInvite is set to false, it is incorrect according" + " to Blackbird protocol, please check provisioning values. Ignoring the " + "set to false request.");            continue;          }          mRcsSettings.setFirstMessageInInvite(isFirstMessageInvite);        }      }    } while ((childnode=childnode.getNextSibling()) != null);  }}  }
class C{  public boolean hasExtension(String extension){  return MimeUtils.hasExtension(extension);}  }
class C{  public DateTime toDateTimeAtCurrentTime(DateTimeZone zone){  Chronology chrono=getChronology().withZone(zone);  long instantMillis=DateTimeUtils.currentTimeMillis();  long resolved=chrono.set(this,instantMillis);  return new DateTime(resolved,chrono);}  }
class C{  public static X509Certificate x509CertificateHolderToX509Certificate(X509CertificateHolder x509CertificateHolder) throws CertificateException {  return new JcaX509CertificateConverter().setProvider("BC").getCertificate(x509CertificateHolder);}  }
class C{  @Override protected Transferable createTransferable(JComponent c){  return new BasicTransferableCreator(c).getTransferable();}  }
class C{  protected void addInstrumentationForDefaultLookupswitchCase(BytecodeInstruction v,InsnList instrumentation){  if (!v.isLookupSwitch())   throw new IllegalArgumentException("lookup switch expected");  LookupSwitchInsnNode toInstrument=(LookupSwitchInsnNode)v.getASMNode();  LabelNode caseLabel=new LabelNode();  LabelNode defaultLabel=new LabelNode();  LabelNode endLabel=new LabelNode();  int keySize=toInstrument.keys.size();  int[] keys=new int[keySize];  LabelNode[] labels=new LabelNode[keySize];  for (int i=0; i < keySize; i++) {    keys[i]=(Integer)toInstrument.keys.get(i);    labels[i]=caseLabel;  }  LookupSwitchInsnNode myLookup=new LookupSwitchInsnNode(defaultLabel,keys,labels);  addDefaultCaseInstrumentation(v,instrumentation,myLookup,defaultLabel,caseLabel,endLabel);}  }
class C{  protected final void PROLOGUE(Instruction s){  if (VM.BuildFor32Addr) {    int numFormals=Prologue.getNumberOfFormals(s);    int numLongs=0;    for (int i=0; i < numFormals; i++) {      if (Prologue.getFormal(s,i).getType().isLongType()) {        numLongs++;      }    }    if (numLongs != 0) {      Instruction s2=Prologue.create(IR_PROLOGUE,numFormals + numLongs);      for (int sidx=0, s2idx=0; sidx < numFormals; sidx++) {        RegisterOperand sForm=Prologue.getClearFormal(s,sidx);        if (sForm.getType().isLongType()) {          sForm.setType(TypeReference.Int);          Prologue.setFormal(s2,s2idx++,sForm);          Register r2=regpool.getSecondReg(sForm.getRegister());          Prologue.setFormal(s2,s2idx++,new RegisterOperand(r2,TypeReference.Int));          sForm.getRegister().clearType();          sForm.getRegister().setInteger();          r2.clearType();          r2.setInteger();        } else {          Prologue.setFormal(s2,s2idx++,sForm);        }      }      EMIT(s2);    } else {      EMIT(s);    }  } else {    EMIT(s);  }}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public void testNoHandler(){  Configuration config=SupportConfigFactory.getConfiguration();  config.getEngineDefaults().getExceptionHandling().getHandlerFactories().clear();  config.addPlugInAggregationFunctionFactory("myinvalidagg",InvalidAggTestFactory.class.getName());  epService=EPServiceProviderManager.getDefaultProvider(config);  epService.initialize();  epService.getEPAdministrator().getConfiguration().addEventType(SupportBean.class);  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.startTest(epService,this.getClass(),getName());  }  String epl="@Name('ABCName') select myinvalidagg() from SupportBean";  epService.getEPAdministrator().createEPL(epl);  epService.getEPRuntime().sendEvent(new SupportBean());  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.endTest();  }}  }
class C{  public void drawPalette(int[] colors,int selectedColor,String[] colorContentDescriptions){  if (colors == null) {    return;  }  this.removeAllViews();  int tableElements=0;  int rowElements=0;  int rowNumber=0;  TableRow row=createTableRow();  for (  int color : colors) {    View colorSwatch=createColorSwatch(color,selectedColor);    setSwatchDescription(rowNumber,tableElements,rowElements,color == selectedColor,colorSwatch,colorContentDescriptions);    addSwatchToRow(row,colorSwatch,rowNumber);    tableElements++;    rowElements++;    if (rowElements == mNumColumns) {      addView(row);      row=createTableRow();      rowElements=0;      rowNumber++;    }  }  if (rowElements > 0) {    while (rowElements != mNumColumns) {      addSwatchToRow(row,createBlankSpace(),rowNumber);      rowElements++;    }    addView(row);  }}  }
class C{  public void testNextDoubleBadOriginBound(){  testDoubleBadOriginBound(null);}  }
class C{  @Override public Object put(Object key,Object value){  if (key instanceof Number) {    return put(((Number)key).intValue(),value);  }  throw new UnsupportedOperationException("IntHashMap key must be a Number");}  }
class C{  public RTimerTree sub(String desc){  RTimerTree child=children.get(desc);  if (child == null) {    child=newTimer();    children.add(desc,child);  }  return child;}  }
class C{  private static boolean isMetadata(final String entryName){  final boolean manifest=entryName.equals(META_INF_FOLDER + "metadata.xml");  return manifest;}  }
class C{  public IDriveRequest buildRequest(){  return buildRequest(getOptions());}  }
class C{  public void testCacheSemantics() throws Exception {  int size=10;  EventsCache ec=new EventsCache(size);  assertTrue("New cache is empty",ec.isEmpty());  for (int i=1; i < 100; i++) {    THLEvent ev=makeTHLEvent(i);    ec.put(ev);    THLEvent ev1=ec.get(ev.getSeqno());    assertNotNull("Most recent event always in cache",ev1);    assertEquals("Found event has correct content",new Long(i).toString(),ev1.getEventId());    if (i <= size) {      THLEvent ec1=ec.get(1);      assertNotNull("First event still in",ec1);    } else {      int last=i - size + 1;      THLEvent evSize=ec.get(last);      assertNotNull("Last N events always in cache",evSize);      assertEquals("Found event has correct content",new Long(last).toString(),evSize.getEventId());      THLEvent evSizePlus=ec.get(i - size);      assertNull("Older event is aged out",evSizePlus);    }  }}  }
class C{  public void clearRepository(){  Repository.setRepository(new AnalysisCacheToRepositoryAdapter());}  }
class C{  public <T extends Event>void registerTemporaryListener(IListener<T> listener){  registerListener(listener,true);}  }
class C{  static int stackChange(int opcode){switch (opcode) {case ByteCode.DASTORE:case ByteCode.LASTORE:    return -4;case ByteCode.AASTORE:case ByteCode.BASTORE:case ByteCode.CASTORE:case ByteCode.DCMPG:case ByteCode.DCMPL:case ByteCode.FASTORE:case ByteCode.IASTORE:case ByteCode.LCMP:case ByteCode.SASTORE:  return -3;case ByteCode.DADD:case ByteCode.DDIV:case ByteCode.DMUL:case ByteCode.DREM:case ByteCode.DRETURN:case ByteCode.DSTORE:case ByteCode.DSTORE_0:case ByteCode.DSTORE_1:case ByteCode.DSTORE_2:case ByteCode.DSTORE_3:case ByteCode.DSUB:case ByteCode.IF_ACMPEQ:case ByteCode.IF_ACMPNE:case ByteCode.IF_ICMPEQ:case ByteCode.IF_ICMPGE:case ByteCode.IF_ICMPGT:case ByteCode.IF_ICMPLE:case ByteCode.IF_ICMPLT:case ByteCode.IF_ICMPNE:case ByteCode.LADD:case ByteCode.LAND:case ByteCode.LDIV:case ByteCode.LMUL:case ByteCode.LOR:case ByteCode.LREM:case ByteCode.LRETURN:case ByteCode.LSTORE:case ByteCode.LSTORE_0:case ByteCode.LSTORE_1:case ByteCode.LSTORE_2:case ByteCode.LSTORE_3:case ByteCode.LSUB:case ByteCode.LXOR:case ByteCode.POP2:return -2;case ByteCode.AALOAD:case ByteCode.ARETURN:case ByteCode.ASTORE:case ByteCode.ASTORE_0:case ByteCode.ASTORE_1:case ByteCode.ASTORE_2:case ByteCode.ASTORE_3:case ByteCode.ATHROW:case ByteCode.BALOAD:case ByteCode.CALOAD:case ByteCode.D2F:case ByteCode.D2I:case ByteCode.FADD:case ByteCode.FALOAD:case ByteCode.FCMPG:case ByteCode.FCMPL:case ByteCode.FDIV:case ByteCode.FMUL:case ByteCode.FREM:case ByteCode.FRETURN:case ByteCode.FSTORE:case ByteCode.FSTORE_0:case ByteCode.FSTORE_1:case ByteCode.FSTORE_2:case ByteCode.FSTORE_3:case ByteCode.FSUB:case ByteCode.GETFIELD:case ByteCode.IADD:case ByteCode.IALOAD:case ByteCode.IAND:case ByteCode.IDIV:case ByteCode.IFEQ:case ByteCode.IFGE:case ByteCode.IFGT:case ByteCode.IFLE:case ByteCode.IFLT:case ByteCode.IFNE:case ByteCode.IFNONNULL:case ByteCode.IFNULL:case ByteCode.IMUL:case ByteCode.INVOKEINTERFACE:case ByteCode.INVOKESPECIAL:case ByteCode.INVOKEVIRTUAL:case ByteCode.IOR:case ByteCode.IREM:case ByteCode.IRETURN:case ByteCode.ISHL:case ByteCode.ISHR:case ByteCode.ISTORE:case ByteCode.ISTORE_0:case ByteCode.ISTORE_1:case ByteCode.ISTORE_2:case ByteCode.ISTORE_3:case ByteCode.ISUB:case ByteCode.IUSHR:case ByteCode.IXOR:case ByteCode.L2F:case ByteCode.L2I:case ByteCode.LOOKUPSWITCH:case ByteCode.LSHL:case ByteCode.LSHR:case ByteCode.LUSHR:case ByteCode.MONITORENTER:case ByteCode.MONITOREXIT:case ByteCode.POP:case ByteCode.PUTFIELD:case ByteCode.SALOAD:case ByteCode.TABLESWITCH:return -1;case ByteCode.ANEWARRAY:case ByteCode.ARRAYLENGTH:case ByteCode.BREAKPOINT:case ByteCode.CHECKCAST:case ByteCode.D2L:case ByteCode.DALOAD:case ByteCode.DNEG:case ByteCode.F2I:case ByteCode.FNEG:case ByteCode.GETSTATIC:case ByteCode.GOTO:case ByteCode.GOTO_W:case ByteCode.I2B:case ByteCode.I2C:case ByteCode.I2F:case ByteCode.I2S:case ByteCode.IINC:case ByteCode.IMPDEP1:case ByteCode.IMPDEP2:case ByteCode.INEG:case ByteCode.INSTANCEOF:case ByteCode.INVOKESTATIC:case ByteCode.L2D:case ByteCode.LALOAD:case ByteCode.LNEG:case ByteCode.NEWARRAY:case ByteCode.NOP:case ByteCode.PUTSTATIC:case ByteCode.RET:case ByteCode.RETURN:case ByteCode.SWAP:case ByteCode.WIDE:return 0;case ByteCode.ACONST_NULL:case ByteCode.ALOAD:case ByteCode.ALOAD_0:case ByteCode.ALOAD_1:case ByteCode.ALOAD_2:case ByteCode.ALOAD_3:case ByteCode.BIPUSH:case ByteCode.DUP:case ByteCode.DUP_X1:case ByteCode.DUP_X2:case ByteCode.F2D:case ByteCode.F2L:case ByteCode.FCONST_0:case ByteCode.FCONST_1:case ByteCode.FCONST_2:case ByteCode.FLOAD:case ByteCode.FLOAD_0:case ByteCode.FLOAD_1:case ByteCode.FLOAD_2:case ByteCode.FLOAD_3:case ByteCode.I2D:case ByteCode.I2L:case ByteCode.ICONST_0:case ByteCode.ICONST_1:case ByteCode.ICONST_2:case ByteCode.ICONST_3:case ByteCode.ICONST_4:case ByteCode.ICONST_5:case ByteCode.ICONST_M1:case ByteCode.ILOAD:case ByteCode.ILOAD_0:case ByteCode.ILOAD_1:case ByteCode.ILOAD_2:case ByteCode.ILOAD_3:case ByteCode.JSR:case ByteCode.JSR_W:case ByteCode.LDC:case ByteCode.LDC_W:case ByteCode.MULTIANEWARRAY:case ByteCode.NEW:case ByteCode.SIPUSH:return 1;case ByteCode.DCONST_0:case ByteCode.DCONST_1:case ByteCode.DLOAD:case ByteCode.DLOAD_0:case ByteCode.DLOAD_1:case ByteCode.DLOAD_2:case ByteCode.DLOAD_3:case ByteCode.DUP2:case ByteCode.DUP2_X1:case ByteCode.DUP2_X2:case ByteCode.LCONST_0:case ByteCode.LCONST_1:case ByteCode.LDC2_W:case ByteCode.LLOAD:case ByteCode.LLOAD_0:case ByteCode.LLOAD_1:case ByteCode.LLOAD_2:case ByteCode.LLOAD_3:return 2;}throw new IllegalArgumentException("Bad opcode: " + opcode);}  }
class C{  public boolean isUnvisited(GraphNode node){  NodeState result=infoMap.get(node);  if (null == result) {    return true;  }  return (0 == result.discovered);}  }
class C{  public static boolean isVmaxVolumeUsing803SMIS(Volume volume,DbClient dbClient){  StorageSystem storage=dbClient.queryObject(StorageSystem.class,volume.getStorageController());  return (storage != null && storage.deviceIsType(Type.vmax) && storage.getUsingSmis80());}  }
class C{  public short wLength(){  return this.controlSetup.getShort(6);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected int createStepInstancesForJob(String jobId,Map<String,String> parameters){  int stepInstancesCreatedCount=0;  Job job=jobs.getJobById(jobId);  final Map<Step,List<StepInstance>> stepToStepInstances=new HashMap<>();  for (  Step step : job.getSteps()) {    stepInstancesCreatedCount++;    StepInstance stepInstance=new StepInstance(step);    stepInstance.addParameters(parameters);    List<StepInstance> mappedStepInstance=stepToStepInstances.get(step);    if (mappedStepInstance == null) {      mappedStepInstance=new ArrayList<>();      stepToStepInstances.put(step,mappedStepInstance);    }    mappedStepInstance.add(stepInstance);  }  addDependenciesAndStore(stepToStepInstances);  return stepInstancesCreatedCount;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.INLINE_ASSOCIATION_END___MULTIPLICITY_1:    return ((InternalEList<?>)getMultiplicity_1()).basicRemove(otherEnd,msgs);case UmplePackage.INLINE_ASSOCIATION_END___IS_SORTED_1:  return ((InternalEList<?>)getIsSorted_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public int capacity(){  return array.length;}  }
class C{  boolean executeAutoMove(INode state){  autoMoves.clear();  boolean found=false;  do {    found=false;    FreeCellNode fcn=(FreeCellNode)state;    for (int i=0; i < fcn.freeEncoding.length; i++) {      short card=fcn.freeEncoding[i];      int suit=((card - 1) % 4);      int rank=1 + ((card - 1) >> 2);      boolean isBlack=(suit == FreeCellNode.CLUBS || suit == FreeCellNode.SPADES);      boolean canMove=false;      if (isBlack) {        canMove=(fcn.foundationEncoding[FreeCellNode.DIAMONDS] >= rank - 1) && (fcn.foundationEncoding[FreeCellNode.HEARTS] >= rank - 1);      } else {        canMove=(fcn.foundationEncoding[FreeCellNode.CLUBS] >= rank - 1) && (fcn.foundationEncoding[FreeCellNode.SPADES] >= rank - 1);      }      if (canMove) {        FreeToFoundationMove fm=new FreeToFoundationMove(card);        if (fm.isValid(state)) {          fm.execute(state);          autoMoves.add(fm);          found=true;        }      }    }    for (int c=0; c < fcn.cols.length; c++) {      if (fcn.cols[c].num == 0) {        continue;      }      short bottomCard=fcn.cols[c].cards[fcn.cols[c].num - 1];      if (bottomCard == 0) {        continue;      }      int suit=((bottomCard - 1) % 4);      int rank=1 + ((bottomCard - 1) >> 2);      boolean isBlack=(suit == FreeCellNode.CLUBS || suit == FreeCellNode.SPADES);      boolean canMove=false;      if (isBlack) {        canMove=(rank <= 2) || ((fcn.foundationEncoding[FreeCellNode.DIAMONDS] >= rank - 1) && (fcn.foundationEncoding[FreeCellNode.HEARTS] >= rank - 1));      } else {        canMove=(rank <= 2) || ((fcn.foundationEncoding[FreeCellNode.CLUBS] >= rank - 1) && (fcn.foundationEncoding[FreeCellNode.SPADES] >= rank - 1));      }      if (canMove) {        ColumnToFoundationMove cm=new ColumnToFoundationMove(c);        if (cm.isValid(state)) {          cm.execute(state);          autoMoves.add(cm);          found=true;        }      }    }  } while (found);  return true;}  }
class C{  public boolean isAvailable(@NotNull PsiElement context){  return true;}  }
class C{  public ImageReader(String mimeType){  super(mimeType);  setDefault("factor",1.0);  setDefault("offset",0.0);}  }
class C{  public Node item(int index){  if (m_iter != null) {    int handle=m_iter.item(index);    if (handle == DTM.NULL) {      return null;    }    return m_iter.getDTM(handle).getNode(handle);  } else {    return null;  }}  }
class C{  public IsNullValue toExceptionValue(){  if (getBaseKind() == NO_KABOOM_NN) {    return new IsNullValue(kind | EXCEPTION,locationOfKaBoom);  }  return instanceByFlagsList[(getFlags() | EXCEPTION) >> FLAG_SHIFT][getBaseKind()];}  }
class C{  @Override public boolean replaceRef(Object oldRef,Object newRef) throws IOException {  if (_isUnshared) {    return false;  }  int value=_refs.get(oldRef);  if (value >= 0) {    addRef(newRef,value,true);    _refs.remove(oldRef);    return true;  } else   return false;}  }
class C{  @Override public void addSuperClass(char[] buffer,int offset,int length){}  }
class C{  public boolean generate(Projection proj){  setNeedToRegenerate(false);switch (renderType) {case RENDERTYPE_XY:    break;case RENDERTYPE_OFFSET:  break;case RENDERTYPE_LATLON:point1=(Point)proj.forward(e2525.ll1.lat,e2525.ll1.lon,new Point());bitmap=new ImageIcon("plus.bm");break;case RENDERTYPE_UNKNOWN:System.err.println("J2525.generate: invalid RenderType");return false;}return true;}  }
class C{  public double estimateY(double[][] x){  return times(x,b)[0];}  }
class C{  public static boolean isUntrusted(X509Certificate cert){  if (algorithm == null) {    return false;  }  String key;  if (cert instanceof X509CertImpl) {    key=((X509CertImpl)cert).getFingerprint(algorithm);  } else {    try {      key=new X509CertImpl(cert.getEncoded()).getFingerprint(algorithm);    } catch (    CertificateException cee) {      return false;    }  }  return props.containsKey(key);}  }
class C{  public boolean isChunkInUse(int x,int z){  Key key=new Key(x,z);  Set<ChunkLock> lockSet=locks.get(key);  return lockSet != null && !lockSet.isEmpty();}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private TestCase negateCondition(Set<Constraint<?>> reachingConstraints,Constraint<?> localConstraint,TestCase test){  List<Constraint<?>> constraints=new LinkedList<Constraint<?>>();  constraints.addAll(reachingConstraints);  Constraint<?> targetConstraint=localConstraint.negate();  constraints.add(targetConstraint);  if (!targetConstraint.isSolveable()) {    logger.info("Found unsolvable constraint: " + targetConstraint);    return null;  }  int size=constraints.size();  if (size > 0) {    logger.debug("Calculating cone of influence for " + size + " constraints");    constraints=reduce(constraints);    logger.info("Reduced constraints from " + size + " to "+ constraints.size());  }  nrCurrConstraints=constraints.size();  nrConstraints+=nrCurrConstraints;  logger.info("Applying local search");  Solver solver=SolverFactory.getInstance().buildNewSolver();  DSEStats.getInstance().reportNewConstraints(constraints);  long startSolvingTime=System.currentTimeMillis();  SolverCache solverCache=SolverCache.getInstance();  SolverResult solverResult=solverCache.solve(solver,constraints);  long estimatedSolvingTime=System.currentTimeMillis() - startSolvingTime;  DSEStats.getInstance().reportNewSolvingTime(estimatedSolvingTime);  if (solverResult == null) {    logger.info("Found no solution");    return null;  } else   if (solverResult.isUNSAT()) {    logger.info("Found UNSAT solution");    DSEStats.getInstance().reportNewUNSAT();    return null;  } else {    Map<String,Object> model=solverResult.getModel();    DSEStats.getInstance().reportNewSAT();    TestCase newTest=test.clone();    for (    Object key : model.keySet()) {      Object val=model.get(key);      if (val != null) {        logger.info("New value: " + key + ": "+ val);        if (val instanceof Long) {          Long value=(Long)val;          String name=((String)key).replace("__SYM","");          PrimitiveStatement p=getStatement(newTest,name);          if (p.getValue().getClass().equals(Character.class))           p.setValue((char)value.intValue()); else           if (p.getValue().getClass().equals(Long.class))           p.setValue(value); else           if (p.getValue().getClass().equals(Integer.class))           p.setValue(value.intValue()); else           if (p.getValue().getClass().equals(Short.class))           p.setValue(value.shortValue()); else           if (p.getValue().getClass().equals(Boolean.class))           p.setValue(value.intValue() > 0); else           if (p.getValue().getClass().equals(Byte.class))           p.setValue(value.byteValue() > 0); else           logger.warn("New value is of an unsupported type: " + p.getValue().getClass() + val);        } else         if (val instanceof String) {          String name=((String)key).replace("__SYM","");          PrimitiveStatement p=getStatement(newTest,name);          assert (p != null) : "Could not find variable " + name + " in test: "+ newTest.toCode()+ " / Orig test: "+ test.toCode()+ ", seed: "+ Randomness.getSeed();          if (p.getValue().getClass().equals(Character.class))           p.setValue((char)Integer.parseInt(val.toString())); else           p.setValue(val.toString());        } else         if (val instanceof Double) {          Double value=(Double)val;          String name=((String)key).replace("__SYM","");          PrimitiveStatement p=getStatement(newTest,name);          assert (p != null) : "Could not find variable " + name + " in test: "+ newTest.toCode()+ " / Orig test: "+ test.toCode()+ ", seed: "+ Randomness.getSeed();          if (p.getValue().getClass().equals(Double.class))           p.setValue(value); else           if (p.getValue().getClass().equals(Float.class))           p.setValue(value.floatValue()); else           logger.warn("New value is of an unsupported type: " + val);        } else {          logger.debug("New value is of an unsupported type: " + val);        }      } else {        logger.debug("New value is null");      }    }    return newTest;  }}  }
class C{  public void paintSliderTrackBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  public String rewriteExpressionIntern(String formula,ExpressionAST expr) throws ScopeException {  ExtractReferences extractor=new ExtractReferences();  List<ExpressionRef> refs=extractor.apply(expr);  if (!refs.isEmpty()) {    int line=1;    int col=1;    StringBuilder output=new StringBuilder(formula.length());    int pos=0;    while (pos < formula.length()) {      char c=formula.charAt(pos);      if (c == '\n') {        output.append(c);        line++;        col=1;        pos++;      } else {        ExpressionRef ref=findReference(refs,line,col);        if (ref != null && ref.getTokenPosition().getType() == IdentifierType.IDENTIFIER && ref.getReferenceIdentifier() != null) {          String name=ref.getReferenceName();          output.append("'" + name + "'");          pos+=ref.getTokenPosition().length();          col+=ref.getTokenPosition().length();        } else {          output.append(c);          pos++;          col++;        }      }    }    return output.toString();  } else {    return formula;  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  protected void checkBound(final int bound,final String type){  if (bound > this.endIndex) {    throw new ArrayIndexOutOfBoundsException("Attempt to make an ArrayIterator that " + type + "s beyond the end of the array. ");  }  if (bound < 0) {    throw new ArrayIndexOutOfBoundsException("Attempt to make an ArrayIterator that " + type + "s before the start of the array. ");  }}  }
class C{  public void showDialog(){  project=appContext.getCurrentProject();  view.setRemoveDeleteRefs(false);  view.setFetchAllBranches(true);  updateRemotes();}  }
class C{  @Override public String toString(){  return String.format("Graph frame of view '%s'",m_view2d.toString());}  }
class C{  public Tree[] importTrees(TaxonList taxonList) throws IOException, ImportException {  return importTrees(taxonList,false);}  }
class C{  protected Benchmark(){  throw new RuntimeException("Non instantiable");}  }
class C{  public static ConcreteListArgumentValue combine(ConcreteListArgumentValue val1,ConcreteListArgumentValue val2,Type actualType){  ConcreteListArgumentValue ret=new ConcreteListArgumentValue(actualType);  ret.addAll(val1);  ret.addAll(val2);  return ret;}  }
class C{  private void logVMMessageWarn(String s){  if (blather)   rsvc.warn(s);}  }
class C{  public void mutableAdd(Complex c){  mutableAdd(c.real,c.imag);}  }
class C{  void updateState(String name,RosterPacket.ItemType type,RosterPacket.ItemStatus status){  this.name=name;  this.type=type;  this.status=status;}  }
class C{  public AArch64FrameMap(CodeCacheProvider codeCache,RegisterConfig registerConfig,ReferenceMapBuilderFactory referenceMapFactory){  super(codeCache,registerConfig,referenceMapFactory);  initialSpillSize=frameSetupSize();  spillSize=initialSpillSize;}  }
class C{  public boolean isGetSupported(){  return m_squelchEnabled;}  }
class C{  public List<T> topoSort() throws HasCyclesException {  Set<T> L=new LinkedHashSet<T>();  Stack<Node<T>> S=new Stack<Node<T>>();  for (Iterator<Node<T>> it=nodes.iterator(); it.hasNext(); ) {    Node<T> node=it.next();    if (node.inEdges.size() == 0) {      S.push(node);    }  }  while (!S.empty()) {    Node<T> n=S.pop();    L.add((T)n.value);    List<Node<T>> outEdges=new ArrayList<Node<T>>();    outEdges.addAll(n.outEdges);    for (Iterator<Node<T>> it=outEdges.iterator(); it.hasNext(); ) {      try {        Node<T> m=it.next();        removeEdge(n.value,m.value);        if (m.inEdges.size() == 0)         S.push(m);      } catch (      NotExistingEdge edgeEx) {        edgeEx.printStackTrace();      }    }  }  if (countEdges > 0) {    boolean removedEdges=true;    while (removedEdges) {      removedEdges=false;      for (Iterator<Node<T>> it=nodes.iterator(); it.hasNext(); ) {        Node<T> node=it.next();        if (node.outEdges.size() == 0) {          for (Iterator<Node<T>> inIt=node.inEdges.iterator(); inIt.hasNext(); ) {            try {              removeEdge(inIt.next().value,node.value);            } catch (            NotExistingEdge e) {              e.printStackTrace();            }            removedEdges=true;          }        }      }    }    throw new HasCyclesException();  }  List<T> sortedList=new ArrayList<T>();  for (Iterator<T> it=L.iterator(); it.hasNext(); )   sortedList.add(it.next());  return sortedList;}  }
class C{  public static boolean vPoolSpecifiesHighAvailability(final VirtualPool virtualPool){  String highAvailability=virtualPool.getHighAvailability();  return NullColumnValueGetter.isNotNullValue(highAvailability) && (VirtualPool.HighAvailabilityType.vplex_local.name().equals(highAvailability) || VirtualPool.HighAvailabilityType.vplex_distributed.name().equals(highAvailability));}  }
class C{  public void resolveShopByURL(){  List<Shop> shopList0=shopDao.findAll();  List<Shop> shopList=shopDao.findByNamedQuery("SHOP.BY.URL","gadget.yescart.org");  assertEquals(1,shopList.size());  shopList=shopDao.findByNamedQuery("SHOP.BY.URL",URL2);  assertEquals(1,shopList.size());}  }
class C{  public static void zip(File inputDir,File zipOut) throws IOException {  URI base=inputDir.toURI();  Deque<File> queue=new LinkedList<File>();  queue.push(inputDir);  OutputStream out=new FileOutputStream(zipOut);  ZipOutputStream zout=null;  byte[] buffer=new byte[1024];  int readCount;  try {    zout=new ZipOutputStream(out);    while (!queue.isEmpty()) {      inputDir=queue.pop();      for (      File lf : inputDir.listFiles()) {        String name=base.relativize(lf.toURI()).getPath();        if (lf.isDirectory()) {          queue.push(lf);          name=name.endsWith("/") ? name : name + "/";          zout.putNextEntry(new ZipEntry(name));        } else {          zout.putNextEntry(new ZipEntry(name));          InputStream in=new FileInputStream(lf);          try {            while ((readCount=in.read(buffer)) > 0)             zout.write(buffer,0,readCount);          }  finally {            in.close();          }          zout.closeEntry();        }      }    }  }  finally {    zout.close();    out.close();  }}  }
class C{  public AbstractLegend(){  setInsets(new Insets2D.Double(10.0));  sources=new LinkedHashSet<DataSource>();  background=Color.WHITE;  borderStroke=new BasicStroke(1f);  font=Font.decode(null);  setDrawableFonts(font);  borderColor=Color.BLACK;  orientation=Orientation.VERTICAL;  alignmentX=0.0;  alignmentY=0.0;  setGap(new de.erichseifert.gral.graphics.Dimension2D.Double(2.0,0.5));  symbolSize=new de.erichseifert.gral.graphics.Dimension2D.Double(2.0,2.0);  setLayout(new StackedLayout(orientation,gap.getWidth(),gap.getHeight()));  refreshLayout();}  }
class C{  @Override protected Object execute() throws Exception {  init();  if (!checkifEnabledRemotes()) {    return null;  }  if (projectId == null) {    Ansi buffer=Ansi.ansi();    buffer.fg(RED);    buffer.a("No projectID has been set");    buffer.reset();    System.out.println(buffer.toString());    return null;  }  UserProjectReference project=getMultiRemoteCodenvy().getProjectReference(projectId);  if (project == null) {    Ansi buffer=Ansi.ansi();    buffer.fg(RED);    buffer.a("No matching project for identifier '").a(projectId).a("'.");    buffer.reset();    System.out.println(buffer.toString());    return null;  }  final ProjectReference projectToRun=project.getInnerReference();  Project projectDescription=project.getCodenvy().project().getProject(projectToRun.workspaceId(),projectToRun).execute();  if (projectDescription != null) {    if (projectDescription.runners() == null || projectDescription.runners().defaultRunner() == null) {      Ansi buffer=Ansi.ansi();      buffer.fg(RED);      buffer.a("The selected project '").a(projectDescription.name()).a("' with ID '").a(projectId).a("' has no runner defined so this project can't be run.");      buffer.reset();      System.out.println(buffer.toString());      return null;    }  }  RunOptionsBuilder runOptionsBuilder=getMultiRemoteCodenvy().getRunOptionsBuilder();  if (memorySize > 0) {    runOptionsBuilder.withMemorySize(memorySize);  }  if (environment != null) {    runOptionsBuilder.withEnvironmentId(environment);  }  RunOptions runOptions=runOptionsBuilder.build();  final RunnerStatus runnerStatus;  try {    runnerStatus=project.getCodenvy().runner().run(projectToRun,runOptions).execute();  } catch (  CodenvyErrorException e) {    Boolean val=(Boolean)session.get(SessionProperties.PRINT_STACK_TRACES);    if (val != null && val.booleanValue()) {      throw e;    }    System.out.println(e.getMessage());    return null;  }  UserRunnerStatus userRunnerStatus=new DefaultUserRunnerStatus(runnerStatus,project);  if (background) {    useBackGround(userRunnerStatus);  } else {    useForeGround(userRunnerStatus);  }  return null;}  }
class C{  public Adapter createEObjectAdapter(){  return null;}  }
class C{  void check(File dir,String... paths){  Set<String> found=new TreeSet<String>(Arrays.asList(dir.list()));  Set<String> expect=new TreeSet<String>(Arrays.asList(paths));  if (found.equals(expect))   return;  for (  String f : found) {    if (!expect.contains(f))     error("Unexpected file found: " + f);  }  for (  String e : expect) {    if (!found.contains(e))     error("Expected file not found: " + e);  }}  }
class C{  public void takeSnapshot(){  try {    snapshot=File.createTempFile(this.hashCode() + "",null);    snapshot.deleteOnExit();    data.save(snapshot);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  private void paintBackgroundEnabled(Graphics2D g,JComponent c,int width,int height){  paintBackground(g,c,width,height,enabled);}  }
class C{  public KeyManagerImpl(KeyStore keyStore,char[] pwd){  this.hash=new Hashtable<String,PrivateKeyEntry>();  final Enumeration<String> aliases;  try {    aliases=keyStore.aliases();  } catch (  KeyStoreException e) {    return;  }  for (; aliases.hasMoreElements(); ) {    final String alias=aliases.nextElement();    try {      if (keyStore.entryInstanceOf(alias,KeyStore.PrivateKeyEntry.class)) {        final KeyStore.PrivateKeyEntry entry=(KeyStore.PrivateKeyEntry)keyStore.getEntry(alias,new KeyStore.PasswordProtection(pwd));        hash.put(alias,entry);      }    } catch (    KeyStoreException e) {      continue;    }catch (    UnrecoverableEntryException e) {      continue;    }catch (    NoSuchAlgorithmException e) {      continue;    }  }}  }
class C{  public boolean isConsumed(){  return consumed;}  }
class C{  public long skip(long n) throws IOException {  long nr=in.skip(n);  if (nr > 0)   monitor.setProgress(nread+=nr);  return nr;}  }
class C{  @Override public void reinit(){  JLabel component=new JLabel();  myCanUse=true;  for (  Map.Entry<SoftWrapDrawingType,char[]> entry : mySymbols.entrySet()) {    SoftWrapDrawingType type=entry.getKey();    char c=entry.getValue()[0];    FontInfo fontInfo=EditorUtil.fontForChar(c,Font.PLAIN,myEditor);    if (!fontInfo.canDisplay(c)) {      myCanUse=false;      myFonts.put(type,null);      myVGaps.put(type,null);      myWidths[type.ordinal()]=0;    } else {      myFonts.put(type,fontInfo);      FontMetrics metrics=component.getFontMetrics(fontInfo.getFont());      myWidths[type.ordinal()]=metrics.charWidth(c);      int vGap=metrics.getDescent();      myVGaps.put(type,vGap);    }  }}  }
class C{  private void checkQueryForSubscriptionStatus(SubscriptionStatus status,boolean findAll) throws Exception {  loginTechnologyProviderManager(0);  setSubStatus(status);  ArrayList<String> list=new ArrayList<String>();  for (int i=0; i < NUMBER_SUPPLIERS; i++)   list.add(supplierOrgIds[i]);  List<String> instanceIds=sps.getInstanceIdsForSellers(list);  assertNotNull("List expected",instanceIds);  if (findAll)   assertEquals("Instance ids - ",4,instanceIds.size()); else {    assertEquals("Instance ids - ",3,instanceIds.size());    Assert.assertTrue(!instanceIds.contains(storedInstanceIds.get(0)));  }  setSubStatus(SubscriptionStatus.ACTIVE);}  }
class C{  private void resolveEntity(StringBuffer buf){  char ch='\0';  StringBuffer keyBuf=new StringBuffer();  for (; ; ) {    ch=this.readChar();    if (ch == ';') {      break;    }    keyBuf.append(ch);  }  String key=keyBuf.toString();  if (key.charAt(0) == '#') {    try {      if (key.charAt(1) == 'x') {        ch=(char)Integer.parseInt(key.substring(2),16);      } else {        ch=(char)Integer.parseInt(key.substring(1),10);      }    } catch (    NumberFormatException e) {      throw this.unknownEntity(key);    }    buf.append(ch);  } else {    char[] value=(char[])this.entities.get(key);    if (value == null) {      throw this.unknownEntity(key);    }    buf.append(value);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:46.999 -0500",hash_original_method="E58EA1DFC67544D3C851C7F9CC058E9E",hash_generated_method="1203240BBD954CF5F9C084F8BB169A2D") public static int round(float x){  long lx=(long)(x * (65536 * 256f));  return (int)((lx + 0x800000) >> 24);}  }
class C{  public static double[] constantArray(int length,double value){  double[] array=new double[length];  Arrays.fill(array,value);  return array;}  }
class C{  public boolean visit(DeleteEdit edit){  return visitNode(edit);}  }
class C{  protected void unhandledMessageReceived(OFMessage m){  counters.unhandledMessage.increment();  if (log.isDebugEnabled()) {    String msg=getSwitchStateMessage(m,"Ignoring unexpected message");    log.debug(msg);  }}  }
class C{  public boolean checkSentence(Vertex sentence,Network network,Vertex currentTime){  Vertex lastChecked=sentence.getRelationship(getPrimitive());  if (lastChecked == null) {    log("Discovering sentence:",Bot.FINE,sentence);    discoverSentence(sentence,network,currentTime);    sentence.addRelationship(getPrimitive(),currentTime);    return true;  }  return false;}  }
class C{  private UserMentionToken(MessageTokenizer tokenizer,int startIndex,int endIndex){  super(tokenizer,startIndex,endIndex,null);  mention=tokenizer.getClient().getUserByID(getContent().replaceAll("<@!?","").replace(">",""));  isNickname=getContent().contains("<@!");}  }
class C{  public T allocate(){  return _ringQueue.poll();}  }
class C{  public static JobReturn submitJob(MRJobInstruction inst) throws DMLRuntimeException {  JobReturn ret=new JobReturn();  MatrixObject[] inputMatrices=inst.getInputMatrices();  MatrixObject[] outputMatrices=inst.getOutputMatrices();  boolean execCP=false;  try {    String rdInst=inst.getIv_randInstructions();    String rrInst=inst.getIv_recordReaderInstructions();    String mapInst=inst.getIv_instructionsInMapper();    String shuffleInst=inst.getIv_shuffleInstructions();    String aggInst=inst.getIv_aggInstructions();    String otherInst=inst.getIv_otherInstructions();    boolean jvmReuse=ConfigurationManager.getDMLConfig().getBooleanValue(DMLConfig.JVM_REUSE);switch (inst.getJobType()) {case GMR:case GMRCELL:      ret=GMR.runJob(inst,inst.getInputs(),inst.getInputInfos(),inst.getRlens(),inst.getClens(),inst.getBrlens(),inst.getBclens(),inst.getPartitioned(),inst.getPformats(),inst.getPsizes(),rrInst,mapInst,aggInst,otherInst,inst.getIv_numReducers(),inst.getIv_replication(),jvmReuse,inst.getIv_resultIndices(),inst.getDimsUnknownFilePrefix(),inst.getOutputs(),inst.getOutputInfos());    break;case DATAGEN:  if (ConfigurationManager.isDynamicRecompilation() && OptimizerUtils.ALLOW_RAND_JOB_RECOMPILE && DMLScript.rtplatform != RUNTIME_PLATFORM.HADOOP && Recompiler.checkCPDataGen(inst,rdInst)) {    ret=executeInMemoryDataGenOperations(inst,rdInst,outputMatrices);    Statistics.decrementNoOfExecutedMRJobs();    execCP=true;  } else {    ret=DataGenMR.runJob(inst,rdInst.split(Lop.INSTRUCTION_DELIMITOR),mapInst,aggInst,otherInst,inst.getIv_numReducers(),inst.getIv_replication(),inst.getIv_resultIndices(),inst.getDimsUnknownFilePrefix(),inst.getOutputs(),inst.getOutputInfos());  }break;case CM_COV:ret=CMCOVMR.runJob(inst,inst.getInputs(),inst.getInputInfos(),inst.getRlens(),inst.getClens(),inst.getBrlens(),inst.getBclens(),mapInst,shuffleInst,inst.getIv_numReducers(),inst.getIv_replication(),inst.getIv_resultIndices(),inst.getOutputs(),inst.getOutputInfos());break;case GROUPED_AGG:ret=GroupedAggMR.runJob(inst,inst.getInputs(),inst.getInputInfos(),inst.getRlens(),inst.getClens(),inst.getBrlens(),inst.getBclens(),shuffleInst,otherInst,inst.getIv_numReducers(),inst.getIv_replication(),inst.getIv_resultIndices(),inst.getDimsUnknownFilePrefix(),inst.getOutputs(),inst.getOutputInfos());break;case REBLOCK:case CSV_REBLOCK:if (ConfigurationManager.isDynamicRecompilation() && DMLScript.rtplatform != RUNTIME_PLATFORM.HADOOP && Recompiler.checkCPReblock(inst,inputMatrices)) {ret=executeInMemoryReblockOperations(inst,shuffleInst,inputMatrices,outputMatrices);Statistics.decrementNoOfExecutedMRJobs();execCP=true;} else {for (MatrixObject m : inputMatrices) {if (m.isDirty()) m.exportData();}checkEmptyInputs(inst,inputMatrices);if (inst.getJobType() == JobType.REBLOCK) {ret=ReblockMR.runJob(inst,inst.getInputs(),inst.getInputInfos(),inst.getRlens(),inst.getClens(),inst.getBrlens(),inst.getBclens(),getNNZ(inputMatrices),mapInst,shuffleInst,otherInst,inst.getIv_numReducers(),inst.getIv_replication(),jvmReuse,inst.getIv_resultIndices(),inst.getOutputs(),inst.getOutputInfos());} else if (inst.getJobType() == JobType.CSV_REBLOCK) {ret=CSVReblockMR.runJob(inst,inst.getInputs(),inst.getInputInfos(),inst.getRlens(),inst.getClens(),inst.getBrlens(),inst.getBclens(),shuffleInst,otherInst,inst.getIv_numReducers(),inst.getIv_replication(),inst.getIv_resultIndices(),inst.getOutputs(),inst.getOutputInfos());}}break;case CSV_WRITE:ret=WriteCSVMR.runJob(inst,inst.getInputs(),inst.getInputInfos(),inst.getRlens(),inst.getClens(),inst.getBclens(),inst.getBclens(),shuffleInst,inst.getIv_numReducers(),inst.getIv_replication(),inst.getIv_resultIndices(),inst.getOutputs());break;case MMCJ:ret=MMCJMR.runJob(inst,inst.getInputs(),inst.getInputInfos(),inst.getRlens(),inst.getClens(),inst.getBrlens(),inst.getBclens(),mapInst,aggInst,shuffleInst,inst.getIv_numReducers(),inst.getIv_replication(),inst.getOutputs()[0],inst.getOutputInfos()[0]);break;case MMRJ:ret=MMRJMR.runJob(inst,inst.getInputs(),inst.getInputInfos(),inst.getRlens(),inst.getClens(),inst.getBrlens(),inst.getBclens(),mapInst,aggInst,shuffleInst,otherInst,inst.getIv_numReducers(),inst.getIv_replication(),inst.getIv_resultIndices(),inst.getOutputs(),inst.getOutputInfos());break;case SORT:boolean weightsflag=true;if (!mapInst.equalsIgnoreCase("")) weightsflag=false;ret=SortMR.runJob(inst,inst.getInputs()[0],inst.getInputInfos()[0],inst.getRlens()[0],inst.getClens()[0],inst.getBrlens()[0],inst.getBclens()[0],mapInst,shuffleInst,inst.getIv_numReducers(),inst.getIv_replication(),inst.getOutputs()[0],inst.getOutputInfos()[0],weightsflag);break;case COMBINE:ret=CombineMR.runJob(inst,inst.getInputs(),inst.getInputInfos(),inst.getRlens(),inst.getClens(),inst.getBrlens(),inst.getBclens(),shuffleInst,inst.getIv_numReducers(),inst.getIv_replication(),inst.getIv_resultIndices(),inst.getOutputs(),inst.getOutputInfos());break;case DATA_PARTITION:ret=DataPartitionMR.runJob(inst,inputMatrices,shuffleInst,inst.getIv_resultIndices(),outputMatrices,inst.getIv_numReducers(),inst.getIv_replication());break;case TRANSFORM:if (ConfigurationManager.isDynamicRecompilation() && OptimizerUtils.ALLOW_TRANSFORM_RECOMPILE && DMLScript.rtplatform != RUNTIME_PLATFORM.HADOOP && Recompiler.checkCPTransform(inst,inputMatrices)) {ret=executeInMemoryTransform(inst,inputMatrices,outputMatrices);Statistics.decrementNoOfExecutedMRJobs();execCP=true;} else {ret=DataTransform.mrDataTransform(inst,inputMatrices,shuffleInst,otherInst,inst.getIv_resultIndices(),outputMatrices,inst.getIv_numReducers(),inst.getIv_replication());}break;default :throw new DMLRuntimeException("Invalid jobtype: " + inst.getJobType());}} catch (Exception e) {throw new DMLRuntimeException(e);}if (ret.checkReturnStatus()) {try {if (!execCP) {for (int i=0; i < outputMatrices.length; i++) {MatrixFormatMetaData meta=(MatrixFormatMetaData)outputMatrices[i].getMetaData();MatrixCharacteristics mc=meta.getMatrixCharacteristics();OutputInfo outinfo=meta.getOutputInfo();String fname=outputMatrices[i].getFileName();if (MapReduceTool.isHDFSFileEmpty(fname)) {Path filepath=new Path(fname,"0-m-00000");MatrixWriter writer=MatrixWriterFactory.createMatrixWriter(outinfo);writer.writeEmptyMatrixToHDFS(filepath.toString(),mc.getRows(),mc.getCols(),mc.getRowsPerBlock(),mc.getColsPerBlock());}outputMatrices[i].setHDFSFileExists(true);if (inst.getJobType() != JobType.CSV_WRITE && inst.getJobType() != JobType.TRANSFORM) {MapReduceTool.writeMetaDataFile(fname + ".mtd",ValueType.DOUBLE,((MatrixDimensionsMetaData)ret.getMetaData(i)).getMatrixCharacteristics(),outinfo);}}}return ret;} catch (IOException e) {throw new DMLRuntimeException(e);}}throw new DMLRuntimeException("Unexpected Job Type: " + inst.getJobType());}  }
class C{  public static PsiFile findLayoutResource(PsiFile file,Project project,String fileName){  String name=String.format("%s.xml",fileName);  return resolveLayoutResourceFile(file,project,name);}  }
class C{  @SuppressWarnings("deprecation") @Override public void stop(){  if (m_listenee instanceof BeanCommon) {    ((BeanCommon)m_listenee).stop();  }  if (m_splitThread != null) {    Thread temp=m_splitThread;    m_splitThread=null;    temp.interrupt();    temp.stop();  }}  }
class C{  public NumericField(String name){  super(name,Field.Type.NUMERIC);}  }
class C{  public static <E>List<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8,E e9){  return new ImmutableCollections.ListN<E>(e1,e2,e3,e4,e5,e6,e7,e8,e9);}  }
class C{  public java.awt.Color convertColor(Color c){  return new java.awt.Color(c.getRed(),c.getGreen(),c.getBlue());}  }
class C{  private void addLocation(Coord loc,double time){  assert samplingInterval > 0 : "Non-positive sampling interval!";  if (loc.equals(latestLocation)) {    if (latestPath != null) {      pathQueue.add(new Tuple<Double,Path>(latestPathStartTime,latestPath));      latestPath=null;    }    this.latestPathStartTime=time;    return;  }  if (latestPath == null) {    latestPath=new Path();  }  double speed=loc.distance(this.latestLocation) / samplingInterval;  latestPath.addWaypoint(loc,speed);  this.latestLocation=loc;}  }
class C{  protected boolean beforeDelete(){  String trxName=get_TrxName();  if (trxName == null || trxName.length() == 0)   log.warning("No transaction");  if (isPosted()) {    MPeriod.testPeriodOpen(getCtx(),getDateTrx(),MDocType.DOCBASETYPE_PaymentAllocation,getAD_Org_ID());    setPosted(false);    MFactAcct.deleteEx(Table_ID,get_ID(),trxName);  }  setIsActive(false);  String sql="UPDATE C_AllocationHdr SET IsActive='N' WHERE C_AllocationHdr_ID=?";  DB.executeUpdate(sql,getC_AllocationHdr_ID(),trxName);  getLines(true);  HashSet<Integer> bps=new HashSet<Integer>();  for (int i=0; i < m_lines.length; i++) {    MAllocationLine line=m_lines[i];    bps.add(new Integer(line.getC_BPartner_ID()));    line.deleteEx(true,trxName);  }  updateBP(bps);  return true;}  }
class C{  public SpecificInsteonLight(String systemName,SerialTrafficController tc){  super(systemName,tc);  this.tc=tc;}  }
class C{  protected void layoutLabel(SeaGlassContext ss,int tabPlacement,FontMetrics metrics,int tabIndex,String title,Icon icon,Rectangle tabRect,Rectangle iconRect,Rectangle textRect,boolean isSelected){  View v=getTextViewForTab(tabIndex);  if (v != null) {    tabPane.putClientProperty("html",v);  }  textRect.x=textRect.y=iconRect.x=iconRect.y=0;  ss.getStyle().getGraphicsUtils(ss).layoutText(ss,metrics,title,icon,SwingUtilities.CENTER,SwingUtilities.CENTER,SwingUtilities.LEADING,SwingUtilities.TRAILING,tabRect,iconRect,textRect,textIconGap);  tabPane.putClientProperty("html",null);  int xNudge=getTabLabelShiftX(tabPlacement,tabIndex,isSelected);  int yNudge=getTabLabelShiftY(tabPlacement,tabIndex,isSelected);  iconRect.x+=xNudge;  iconRect.y+=yNudge;  textRect.x+=xNudge;  textRect.y+=yNudge;}  }
class C{  public boolean isKeyFrame(){  return keyFrame;}  }
class C{  public final CC minWidth(String size){  hor.setSize(LayoutUtil.derive(hor.getSize(),ConstraintParser.parseUnitValue(size,true),null,null));  return this;}  }
class C{  public void print(byte x){  out.print(x);  out.flush();}  }
class C{  public int next(){  _currentNode=(_currentNode == DTM.NULL) ? DTM.NULL : _nextsib(_currentNode);  return returnNode(makeNodeHandle(_currentNode));}  }
class C{  public void addMethod(MethodRef mref){  mMethodRefs.add(mref);}  }
class C{  public void beginShape(int kind){  g.beginShape(kind);}  }
class C{  public TDoubleDoubleHashMap absoluteDistribution(){  TDoubleDoubleHashMap freq=new TDoubleDoubleHashMap();  int size=values.size();  for (int i=0; i < size; i++) {    double cumWeight=freq.get(values.get(i));    cumWeight+=weights.get(i);    freq.put(values.get(i),cumWeight);  }  return freq;}  }
class C{  @Override protected final boolean checkExtensionArrayInvariants(Shape newShape){  assert getShape() == newShape;  assert (getObjectStore(newShape) == null && ((ShapeImpl)newShape).getObjectArrayCapacity() == 0) || (getObjectStore(newShape) != null && getObjectStore(newShape).length == ((ShapeImpl)newShape).getObjectArrayCapacity());  if (((ShapeImpl)newShape).hasPrimitiveArray()) {    assert (getPrimitiveStore(newShape) == null && ((ShapeImpl)newShape).getPrimitiveArrayCapacity() == 0) || (getPrimitiveStore(newShape) != null && getPrimitiveStore(newShape).length == ((ShapeImpl)newShape).getPrimitiveArrayCapacity());  }  return true;}  }
class C{  @Override public boolean onItemUse(ItemStack itemStack,EntityPlayer entityPlayer,World world,int x,int y,int z,int par7,float par8,float par9,float par10){  Block var11=world.getBlock(x,y,z);  if (BlockRailBase.func_150051_a(var11)) {    if (!world.isRemote) {      world.spawnEntityInWorld(new EntityBombCart(world,x + 0.5F,y + 0.5F,z + 0.5F,itemStack.getItemDamage()));    }    --itemStack.stackSize;    return true;  } else {    return false;  }}  }
class C{  public void configure(){  SRCPTrafficController control=new SRCPTrafficController();  control.connectPort(this);  this.getSystemConnectionMemo().setTrafficController(control);  this.getSystemConnectionMemo().configureManagers();  this.getSystemConnectionMemo().configureCommandStation();  jmri.jmrix.srcp.ActiveFlag.setActive();}  }
class C{  protected void updatePathGreyness(TreePath ancestor){  boolean value=isPathCheckBox(ancestor);  Object ancestorNode=ancestor.getLastPathComponent();  if (!isPathCheckBox(ancestor)) {    addToCheckBoxPathsSet(ancestor);    return;  }}  }
class C{  public static void askMemoryRange(final CMemoryRangeDialog dlg,final CDebugPerspectiveModel debugPerspectiveModel){  final IDebugger debugger=debugPerspectiveModel.getCurrentSelectedDebugger();  if (debugger == null) {    return;  }  dlg.setVisible(true);  final IAddress start=dlg.getStart();  final IAddress numberOfBytes=dlg.getBytes();  if (start != null && numberOfBytes != null) {    debugPerspectiveModel.setActiveMemoryAddress(start,true);    final ProcessManager pmanager=debugger.getProcessManager();    pmanager.setMemoryMap(new MemoryMap(new FilledList<MemorySection>()));    pmanager.getMemory().clear();    final ArrayList<MemorySection> sections=new ArrayList<MemorySection>();    sections.add(new MemorySection(start,new CAddress(start.toBigInteger().add(numberOfBytes.toBigInteger()).subtract(BigInteger.ONE))));    final MemoryMap map=new MemoryMap(sections);    pmanager.setMemoryMap(map);  }}  }
class C{  public static SumProjectionExpression sum(String propertyName){  return new SumProjectionExpression(getPropExpr(propertyName),false);}  }
class C{  public static void assertMosaicTransferNotification(final Notification notification,final Account expectedSender,final Account expectedRecipient,final MosaicId expectedMosaicId,final Quantity expectedQuantity){  final MosaicTransferNotification n=(MosaicTransferNotification)notification;  Assert.assertThat(n.getType(),IsEqual.equalTo(NotificationType.MosaicTransfer));  Assert.assertThat(n.getSender(),IsEqual.equalTo(expectedSender));  Assert.assertThat(n.getRecipient(),IsEqual.equalTo(expectedRecipient));  Assert.assertThat(n.getMosaicId(),IsEqual.equalTo(expectedMosaicId));  Assert.assertThat(n.getQuantity(),IsEqual.equalTo(expectedQuantity));}  }
class C{  public FileWriter(FileDescriptor fd){  super(new FileOutputStream(fd));}  }
class C{  public static Stats of(Iterable<? extends Number> values){  StatsAccumulator accumulator=new StatsAccumulator();  accumulator.addAll(values);  return accumulator.snapshot();}  }
class C{  public static double[] normalizeVec(double[] vec){  double sum=sum(vec);  double[] normVec=new double[vec.length];  for (int i=0, n=vec.length; i < n; i++) {    normVec[i]=vec[i] / sum;  }  return normVec;}  }
class C{  public Pin(){  this(0);}  }
class C{  private List<DiffEntry> commitToWorkingTree(String commitId,DiffFormatter formatter) throws IOException {  ObjectId commitA=repository.resolve(commitId);  if (commitA == null) {    File heads=new File(repository.getWorkTree().getPath() + "/.git/refs/heads");    if (heads.exists() && heads.list().length == 0) {      return Collections.emptyList();    }    throw new IllegalArgumentException("Invalid commit id " + commitId);  }  RevTree treeA;  try (RevWalk revWalkA=new RevWalk(repository)){    treeA=revWalkA.parseTree(commitA);  }   List<DiffEntry> diff;  try (ObjectReader reader=repository.newObjectReader()){    CanonicalTreeParser iterA=new CanonicalTreeParser();    iterA.reset(reader,treeA);    FileTreeIterator iterB=new FileTreeIterator(repository);    formatter.setDetectRenames(false);    diff=formatter.scan(iterA,iterB);    if (!request.isNoRenames()) {      RenameDetector renameDetector=createRenameDetector();      ContentSource.Pair sourcePairReader=new ContentSource.Pair(ContentSource.create(reader),ContentSource.create(iterB));      renameDetector.addAll(diff);      diff=renameDetector.compute(sourcePairReader,NullProgressMonitor.INSTANCE);    }  }   return diff;}  }
class C{  Payment runTransaction(final Map<String,String> request,final Payment paymentIn,final String operation){  final Payment payment=(Payment)SerializationUtils.clone(paymentIn);  payment.setTransactionOperation(operation);  final Logger log=ShopCodeContext.getLog(this);  try {    if (log.isDebugEnabled()) {      log.debug(HttpParamsUtils.stringify("Cybersource request:",request));    }    final Map<String,String> reply=Client.runTransaction(request,getProperties());    if (log.isDebugEnabled()) {      log.debug(HttpParamsUtils.stringify("Cybersource response:",reply));    }    if ("ACCEPT".equalsIgnoreCase(reply.get("decision"))) {      payment.setTransactionAuthorizationCode(reply.get("requestID"));      payment.setTransactionRequestToken(reply.get("requestToken"));      payment.setTransactionReferenceId(reply.get("requestID"));      payment.setPaymentProcessorResult(Payment.PAYMENT_STATUS_OK);      payment.setPaymentProcessorBatchSettlement(CAPTURE.equals(operation) || AUTH_CAPTURE.equals(operation));    } else {      payment.setPaymentProcessorResult(Payment.PAYMENT_STATUS_FAILED);      payment.setPaymentProcessorBatchSettlement(false);    }    payment.setTransactionOperationResultCode(reply.get("reasonCode"));    payment.setTransactionOperationResultMessage(ERROR_CODE_DESC_MAP.get(reply.get("reasonCode")));  } catch (  ClientException e) {    ShopCodeContext.getLog(this).error("Can not execute transaction. Client exception : " + payment,e);    payment.setPaymentProcessorResult(Payment.PAYMENT_STATUS_FAILED);    payment.setPaymentProcessorBatchSettlement(false);    payment.setTransactionOperationResultMessage(e.getMessage());  }catch (  FaultException e) {    ShopCodeContext.getLog(this).error("Can not execute transaction. Fault exception : " + payment,e);    payment.setPaymentProcessorResult(Payment.PAYMENT_STATUS_FAILED);    payment.setTransactionOperationResultMessage(e.getMessage());  }  return payment;}  }
class C{  public AnnotationDefaultAttribute(ConstPool cp){  this(cp,new byte[]{0,0});}  }
class C{  public StatusEffect(StatusEffectType type,int amplifier,int duration,boolean ambient,boolean showParticles){  this.type=type;  this.amplifier=amplifier;  this.duration=duration;  this.ambient=ambient;  this.showParticles=showParticles;}  }
class C{  public Boolean isIch7MRecommended(){  return ich7MRecommended;}  }
class C{  public boolean isRaw(){  return false;}  }
class C{  public long readLong(String key,long defaultValue){  return preferences.getLong(key,defaultValue);}  }
class C{  public RenderTarget(String name,int width,int height,int offsetX,int offsetY,boolean stencilBuffer,boolean mipmaps,int glType,Config bitmapConfig,FilterType filterType,WrapType wrapType){  mName=name;  mWidth=width;  mHeight=height;  mOffsetX=offsetX;  mOffsetY=offsetY;  mStencilBuffer=stencilBuffer;  mMipmaps=mipmaps;  mGLType=glType;  mBitmapConfig=bitmapConfig;  mFilterType=filterType;  mWrapType=wrapType;  mTexture=new RenderTargetTexture(mName + "FBTex",mWidth,mHeight);  mTexture.setMipmap(mMipmaps);  mTexture.setGLTextureType(mGLType);  mTexture.setBitmapConfig(mBitmapConfig);  mTexture.setFilterType(mFilterType);  mTexture.setWrapType(mWrapType);}  }
class C{  public int whichPort(){  return (servport);}  }
class C{  protected AbstractHashedMap(int initialCapacity,float loadFactor){  super();  if (initialCapacity < 1) {    throw new IllegalArgumentException("Initial capacity must be greater than 0");  }  if (loadFactor <= 0.0f || Float.isNaN(loadFactor)) {    throw new IllegalArgumentException("Load factor must be greater than 0");  }  this.loadFactor=loadFactor;  this.threshold=calculateThreshold(initialCapacity,loadFactor);  initialCapacity=calculateNewCapacity(initialCapacity);  this.data=new HashEntry[initialCapacity];  init();}  }
class C{  public CSVReader(String mimeType){  super(mimeType);  if ("text/tab-separated-values".equals(mimeType)) {    setDefault(SEPARATOR_CHAR,'\t');  } else {    setDefault(SEPARATOR_CHAR,',');  }}  }
class C{  public static int executeUpdate(String sql,Object[] params,boolean ignoreError,String trxName){  return executeUpdate(sql,params,ignoreError,trxName,0);}  }
class C{  public POJOPropertiesCollector collect(){  _properties.clear();  _addFields();  _addMethods();  _addCreators();  _addInjectables();  _removeUnwantedProperties();  _renameProperties();  PropertyNamingStrategy naming=_config.getPropertyNamingStrategy();  if (naming != null) {    _renameUsing(naming);  }  for (  POJOPropertyBuilder property : _properties.values()) {    property.trimByVisibility();  }  for (  POJOPropertyBuilder property : _properties.values()) {    property.mergeAnnotations(_forSerialization);  }  _sortProperties();  return this;}  }
class C{  public static <T,ID>int dropTable(ConnectionSource connectionSource,DatabaseTableConfig<T> tableConfig,boolean ignoreErrors) throws SQLException {  DatabaseType databaseType=connectionSource.getDatabaseType();  Dao<T,ID> dao=DaoManager.createDao(connectionSource,tableConfig);  if (dao instanceof BaseDaoImpl<?,?>) {    return doDropTable(databaseType,connectionSource,((BaseDaoImpl<?,?>)dao).getTableInfo(),ignoreErrors);  } else {    tableConfig.extractFieldTypes(connectionSource);    TableInfo<T,ID> tableInfo=new TableInfo<T,ID>(databaseType,null,tableConfig);    return doDropTable(databaseType,connectionSource,tableInfo,ignoreErrors);  }}  }
class C{  public final void compute(Vertex<LongWritable,SemiClusterTreeSetWritable,DoubleWritable> vertex,final Iterable<SemiClusterTreeSetWritable> messages){  int iterations=getContext().getConfiguration().getInt(ITERATIONS,ITERATIONS_DEFAULT);  int maxClusters=getContext().getConfiguration().getInt(MAX_CLUSTERS,MAX_CLUSTERS_DEFAULT);  int clusterCapacity=getContext().getConfiguration().getInt(CLUSTER_CAPACITY,CLUSTER_CAPACITY_DEFAULT);  double scoreFactor=getContext().getConfiguration().getFloat(SCORE_FACTOR,SCORE_FACTOR_DEFAULT);  if (getSuperstep() == 0) {    SemiCluster myCluster=new SemiCluster();    myCluster.addVertex(vertex,scoreFactor);    SemiClusterTreeSetWritable clusterList=new SemiClusterTreeSetWritable();    clusterList.add(myCluster);    vertex.setValue(clusterList);    sendMessageToAllEdges(vertex,clusterList);    vertex.voteToHalt();    return;  }  if (getSuperstep() == iterations) {    vertex.voteToHalt();    return;  }  SemiClusterTreeSetWritable unionedClusterSet=new SemiClusterTreeSetWritable();  vertex.getValue().clear();  for (  SemiClusterTreeSetWritable clusterSet : messages) {    unionedClusterSet.addAll(clusterSet);    for (    SemiCluster cluster : clusterSet) {      boolean contains=cluster.vertices.contains(vertex.getId());      if (!contains && cluster.vertices.size() < clusterCapacity) {        SemiCluster newCluster=new SemiCluster(cluster);        newCluster.addVertex(vertex,scoreFactor);        unionedClusterSet.add(newCluster);        vertex.getValue().add(newCluster);      } else       if (contains) {        vertex.getValue().add(cluster);      }    }  }  Iterator<SemiCluster> iterator=unionedClusterSet.iterator();  while (unionedClusterSet.size() > maxClusters) {    iterator.next();    iterator.remove();  }  iterator=vertex.getValue().iterator();  while (vertex.getValue().size() > maxClusters) {    iterator.next();    iterator.remove();  }  sendMessageToAllEdges(vertex,unionedClusterSet);  vertex.voteToHalt();}  }
class C{  public QName(String qname,Stack namespaces,boolean validate){  String namespace=null;  String prefix=null;  int indexOfNSSep=qname.indexOf(':');  if (indexOfNSSep > 0) {    prefix=qname.substring(0,indexOfNSSep);    if (prefix.equals("xml")) {      namespace=S_XMLNAMESPACEURI;    } else     if (prefix.equals("xmlns")) {      return;    } else {      int depth=namespaces.size();      for (int i=depth - 1; i >= 0; i--) {        NameSpace ns=(NameSpace)namespaces.elementAt(i);        while (null != ns) {          if ((null != ns.m_prefix) && prefix.equals(ns.m_prefix)) {            namespace=ns.m_uri;            i=-1;            break;          }          ns=ns.m_next;        }      }    }    if (null == namespace) {      throw new RuntimeException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PREFIX_MUST_RESOLVE,new Object[]{prefix}));    }  }  _localName=(indexOfNSSep < 0) ? qname : qname.substring(indexOfNSSep + 1);  if (validate) {    if ((_localName == null) || (!XML11Char.isXML11ValidNCName(_localName))) {      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null));    }  }  _namespaceURI=namespace;  _prefix=prefix;  m_hashCode=toString().hashCode();}  }
class C{  public GeoPolygonQueryBuilder addPoint(double lat,double lon){  return addPoint(new GeoPoint(lat,lon));}  }
class C{  @SuppressWarnings("unchecked") public <T extends IEncodeable>T decode(IEncodeableSerializer serializer,EncoderContext ctx,NamespaceTable namespaceTable) throws DecodingException {  if (object == null) {    Class<? extends IEncodeable> clazz=serializer.getClass(typeId);    try {      return (T)clazz.newInstance();    } catch (    InstantiationException e) {      throw new DecodingException(e);    }catch (    IllegalAccessException e) {      throw new DecodingException(e);    }  }  if (object instanceof XmlElement) {    Class<? extends IEncodeable> clazz=serializer.getClass(typeId);    logger.debug("decode: typeId={} class={}",typeId,clazz);    if (clazz == null)     throw new DecodingException("No serializer defined for class " + typeId);    ctx.setEncodeableSerializer(serializer);    XmlDecoder dec=new XmlDecoder((XmlElement)object,ctx);    T result;    try {      dec.setNamespaceTable(namespaceTable);      boolean inElement=dec.peek(clazz.getSimpleName());      if (inElement)       dec.getStartElement();      result=(T)serializer.getEncodeable(clazz,dec);      if (inElement)       dec.getEndElement();    }  finally {      dec.close();    }    return result;  }  if (object instanceof byte[]) {    Class<? extends IEncodeable> clazz=serializer.getClass(typeId);    ctx.setEncodeableSerializer(serializer);    BinaryDecoder dec=new BinaryDecoder((byte[])object);    dec.setEncoderContext(ctx);    return (T)serializer.getEncodeable(clazz,dec);  }  throw new Error("unexpected");}  }
class C{  public MultimediaMessagingSession initiateMessagingSession(String serviceId,ContactId contact,String[] acceptTypes,String[] acceptWrappedTypes) throws RcsServiceNotRegisteredException, RcsPermissionDeniedException, RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    IMultimediaMessagingSession sessionIntf=mApi.initiateMessagingSession2(serviceId,contact,acceptTypes,acceptWrappedTypes);    if (sessionIntf != null) {      return new MultimediaMessagingSession(sessionIntf);    }    return null;  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsServiceNotRegisteredException.assertException(e);    RcsPermissionDeniedException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  private View fillFromTop(int nextTop){  mFirstPosition=Math.min(mFirstPosition,mSelectedPosition);  mFirstPosition=Math.min(mFirstPosition,mItemCount - 1);  if (mFirstPosition < 0) {    mFirstPosition=0;  }  mFirstPosition-=mFirstPosition % mNumColumns;  return fillDown(mFirstPosition,nextTop);}  }
class C{  private static void vecswap(byte[] x,int a,int b,int n){  for (int i=0; i < n; i++, a++, b++)   swap(x,a,b);}  }
class C{  @EnsuresNonNullIf(expression="#1",result=true) public static boolean isPresent(@Nullable Object primary){  return primary != null;}  }
class C{  public Shape apply(E e){  Shape loop=getLoopOrNull(e);  return loop == null ? LINE : loop;}  }
class C{  private void ruleR5(){  List<Node> nodes=graph.getNodes();  for (  Node a : nodes) {    List<Node> adjacents=graph.getNodesInTo(a,Endpoint.CIRCLE);    for (    Node b : adjacents) {      if (!(graph.getEndpoint(a,b) == Endpoint.CIRCLE))       continue;      List<List<Node>> ucCirclePaths=getUcCirclePaths(a,b);      for (      List<Node> u : ucCirclePaths) {        if (u.size() < 3)         continue;        Node c=u.get(1);        Node d=u.get(u.size() - 2);        if (graph.isAdjacentTo(a,d))         continue;        if (graph.isAdjacentTo(b,c))         continue;        logger.log("colliderOrientations",SearchLogUtils.edgeOrientedMsg("Orient circle path",graph.getEdge(a,b)));        graph.setEndpoint(a,b,Endpoint.TAIL);        graph.setEndpoint(b,a,Endpoint.TAIL);        orientTailPath(u);        changeFlag=true;      }    }  }}  }
class C{  private int add(Lifeline lifeline){  int position=lifelineList.size();  lifelineList.add(new ArrayList<Lifeline>());  lifelineList.get(position).add(lifeline);  return position;}  }
class C{  public void testMT() throws Exception {  tryMT(3);}  }
class C{  private static void findAnnotationMethods(final Class<? extends Annotation> annotationClass,final String attributeName) throws IOException {  final String basePackagePath=ClassUtils.convertClassNameToResourcePath(new StandardEnvironment().resolveRequiredPlaceholders(SEARCH_PACKAGE));  String packageSearchPath=ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + basePackagePath + "/"+ RESOURCE_PATTERN;  packageSearchPath=packageSearchPath.replace("//","/");  final Resource[] resources=resourcePatternResolver.getResources(packageSearchPath);  for (  final Resource resource : resources) {    if (resource.isReadable()) {      final MetadataReader metadataReader=metadataReaderFactory.getMetadataReader(resource);      final Set<MethodMetadata> metadataSet=metadataReader.getAnnotationMetadata().getAnnotatedMethods(annotationClass.getName());      if (metadataSet != null && metadataSet.size() > 0) {        for (        final MethodMetadata metadata : metadataSet) {          final Map<String,Object> attributes=metadata.getAnnotationAttributes(annotationClass.getName());          final JobName attributeValue=(JobName)attributes.get(attributeName);          final String className=metadata.getDeclaringClassName();          final ClassMethodNamesPair pair=new ClassMethodNamesPair();          pair.className=className;          pair.methodName=metadata.getMethodName();          targetMethosMap.put(attributeValue.toString(),pair);        }      }    }  }}  }
class C{  protected void notifyDelete(String key){  for (  ISharedObjectListener listener : listeners) {    listener.onSharedObjectDelete(this,key);  }}  }
class C{  protected void onAdjustChildViews(boolean down){  if (down)   correctTooHigh(getChildCount()); else   correctTooLow(getChildCount());}  }
class C{  protected void reportException(String methodCall,SQLException exception){  log.exceptionOccured(this,methodCall,exception,null,-1L);}  }
class C{  public void pop(){  stack.pop();}  }
class C{  public boolean maxValue(double val,double maxVal){  return GenericValidator.maxValue(val,maxVal);}  }
class C{  private void copyGlobalHeader(GlobalHeader header){  final byte[] magicNumber=intToByteArray(header.getMagicNumber());  final byte[] majorVersion=shortToByteArray(header.getMajorVersion());  final byte[] minorVersion=shortToByteArray(header.getMinorVersion());  final byte[] zone=intToByteArray(header.getThiszone());  final byte[] sigFigs=intToByteArray(header.getSigfigs());  final byte[] snapLen=intToByteArray(header.getSnaplen());  final byte[] network=intToByteArray(header.getNetwork());  list.add(magicNumber[0]);  list.add(magicNumber[1]);  list.add(magicNumber[2]);  list.add(magicNumber[3]);  list.add(majorVersion[1]);  list.add(majorVersion[0]);  list.add(minorVersion[1]);  list.add(minorVersion[0]);  list.add(zone[3]);  list.add(zone[2]);  list.add(zone[1]);  list.add(zone[0]);  list.add(sigFigs[3]);  list.add(sigFigs[2]);  list.add(sigFigs[1]);  list.add(sigFigs[0]);  list.add(snapLen[3]);  list.add(snapLen[2]);  list.add(snapLen[1]);  list.add(snapLen[0]);  list.add(network[3]);  list.add(network[2]);  list.add(network[1]);  list.add(network[0]);}  }
class C{  public void addEdges(Collection<Dependency> edges){  for (  Dependency dep : edges) {    addEdge(dep);  }}  }
class C{  public void testGetAbsolutePathWithRelativePath() throws Exception {  Deployable deployable=new WAR("path");  String path=deployer.getAbsolutePath(deployable);  assertEquals(System.getProperty("user.dir") + System.getProperty("file.separator") + "path",path);}  }
class C{  public static CharBuffer createCharBuffer(int elements){  ByteBuffer byteBuffer=ByteBuffer.allocateDirect(elements * 2);  byteBuffer.order(ByteOrder.nativeOrder());  return byteBuffer.asCharBuffer();}  }
class C{  public Vertex createName(String text,Vertex meaning,Network network){  Vertex word=createWord(text,meaning,network,Primitive.NOUN);  word.addRelationship(Primitive.INSTANTIATION,Primitive.NAME);  return word;}  }
class C{  public static void writeGcsFile(GcsService gcsService,GcsFilename file,byte[] data) throws IOException {  gcsService.createOrReplace(file,GcsFileOptions.getDefaultInstance(),ByteBuffer.wrap(data));}  }
class C{  public Collection<OutputPort> outputPorts(){  return outputPorts.values();}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public ExampleFileFilter(){  this((String)null,(String)null);}  }
class C{  @Override public Request<String> export(ProjectReference projectReference){  final Invocation request=getWebTarget().path(projectReference.workspaceId()).path(projectReference.name()).request().accept(APPLICATION_JSON).buildGet();  return new SimpleRequest<String>(request,getAuthenticationManager());}  }
class C{  public static void applyTransactionTimeout(PreparedStatement pstm,TransactionManager transactionManager){  Assert.notNull(pstm,"No PreparedStatement object specified");  if (transactionManager != null) {    WriteTranSessionHolder writeTranSessionHolder=(WriteTranSessionHolder)TransactionSynchronizationManager.getResource(transactionManager);    if (writeTranSessionHolder != null && writeTranSessionHolder.hasTimeout()) {      try {        pstm.setQueryTimeout(writeTranSessionHolder.getTimeToLiveInSeconds());      } catch (      SQLException e) {        throw new DataAccessResourceFailureException(e.getMessage(),e);      }    }  }}  }
class C{  @LargeTest public void testAudioDuckingDisable() throws Exception {  final String audioFileName=INPUT_FILE_PATH + "AACLC_48KHz_256Kbps_s_1_17.3gp";  final AudioTrack audioTrack=mVideoEditorHelper.createAudio(mVideoEditor,"audioTrack",audioFileName);  mVideoEditor.addAudioTrack(audioTrack);  audioTrack.disableDucking();  assertFalse("Audio Track Ducking is Disabled",audioTrack.isDuckingEnabled());}  }
class C{  @RequestMapping(value="/businessObjectData/namespaces/{namespace}" + "/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}" + "/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}"+ "/partitionValues/{partitionValue}/subPartition1Values/{subPartition1Value}/subPartition2Values/{subPartition2Value}"+ "/businessObjectDataVersions/{businessObjectDataVersion}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_DELETE) public BusinessObjectData deleteBusinessObjectData(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@PathVariable("partitionValue") String partitionValue,@PathVariable("subPartition1Value") String subPartition1Value,@PathVariable("subPartition2Value") String subPartition2Value,@PathVariable("businessObjectDataVersion") Integer businessObjectDataVersion,@RequestParam("deleteFiles") Boolean deleteFiles){  return businessObjectDataService.deleteBusinessObjectData(new BusinessObjectDataKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,partitionValue,Arrays.asList(subPartition1Value,subPartition2Value),businessObjectDataVersion),deleteFiles);}  }
class C{  private void openKnowledgeEditor(){  if (params() == null) {    throw new NullPointerException("Parameter object must not be " + "null if you want to launch a OldKnowledgeEditor.");  }  if (params().get("knowledge",new Knowledge2()) == null) {    throw new NullPointerException("Knowledge in params object must " + "not be null.");  }}  }
class C{  void applyExpensiveOutlineWithBlur(Bitmap srcDst,Canvas srcDstCanvas,int color,int outlineColor){  applyExpensiveOutlineWithBlur(srcDst,srcDstCanvas,color,outlineColor,true);}  }
class C{  protected void filterMembers(Collection<InternalDistributedMember> mbrs,Set<InternalDistributedMember> matchingMembers,short requestType){  Set<InternalDistributedMember> requests=getPendingRequestIDs(requestType);  if (!requests.isEmpty()) {    logger.debug("filterMembers: processing " + requests.size() + " requests for type "+ requestType);    Iterator<InternalDistributedMember> itr=requests.iterator();    while (itr.hasNext()) {      InternalDistributedMember memberID=itr.next();      if (mbrs.contains(memberID)) {        testFlagForRemovalRequest=true;        matchingMembers.add(memberID);      }    }  }}  }
class C{  public boolean isDynamic(){  return myCRIF.isDynamic();}  }
class C{  public static StringBuilder formatTo(StringBuilder buf,float[] d,String sep,NumberFormat nf){  if (d == null) {    return buf.append("null");  }  if (d.length == 0) {    return buf;  }  buf.append(nf.format(d[0]));  for (int i=1; i < d.length; i++) {    buf.append(sep);    buf.append(nf.format(d[i]));  }  return buf;}  }
class C{  public String nextTo(String delimiters){  char c;  StringBuffer sb=new StringBuffer();  for (; ; ) {    c=this.next();    if (delimiters.indexOf(c) >= 0 || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public ContainerList(Layout l,ListModel m){  super(l);  init(m);}  }
class C{  public XContentStructure(QueryParseContext queryParseContext){  this.parseContext=queryParseContext;}  }
class C{  @Override public void paint(Graphics g){  if (node.isCritical()) {    this.backgroundColor=defaultCriticalColor;  } else {    this.backgroundColor=defaultBackgroundColor;  }  paintMe(g);}  }
class C{  public String toXML(boolean header){  XmlTextBuilder bdr;  String tagName="RegistroDocumentoCSV";  bdr=new XmlTextBuilder();  if (header)   bdr.setStandardHeader();  bdr.addOpeningTag(tagName);  bdr.addSimpleElement("CSV",csv);  bdr.addSimpleElement("GUID",guid);  bdr.addClosingTag(tagName);  return bdr.getText();}  }
class C{  private static PrintWriter openFile(String name,int nSwitch){  FileOutputStream file=null;  OutputStreamWriter writer=null;  try {switch (nSwitch) {case 1:      file=new FileOutputStream(name,false);    break;case 2:  file=new FileOutputStream(name,true);break;}writer=new OutputStreamWriter(file);} catch (IOException ee) {System.out.println("Error opening file: " + ee);System.exit(1);}return new PrintWriter(new BufferedWriter(writer));}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ExpressionsPackage.NUMERICAL_UNARY_EXPRESSION__OPERATOR:    return operator != OPERATOR_EDEFAULT;case ExpressionsPackage.NUMERICAL_UNARY_EXPRESSION__OPERAND:  return operand != null;}return super.eIsSet(featureID);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getTraceFor_();}  }
class C{  public Text createTextNode(String data){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  protected void prepareConfigurationForms(){  Page page=pageInstance.getPage();  PageInstance parent=pageInstance.getParent();  assert parent != null;  FormBuilder formBuilder=new FormBuilder(EditPage.class).configPrefix(CONF_FORM_PREFIX).configFields(PageActionLogic.supportsDetail(getClass()) ? PAGE_CONFIGURATION_FIELDS : PAGE_CONFIGURATION_FIELDS_NO_DETAIL).configFieldSetNames("Page");  SelectionProvider layoutSelectionProvider=createTemplateSelectionProvider();  formBuilder.configSelectionProvider(layoutSelectionProvider,"template");  SelectionProvider detailLayoutSelectionProvider=createTemplateSelectionProvider();  formBuilder.configSelectionProvider(detailLayoutSelectionProvider,"detailTemplate");  pageConfigurationForm=formBuilder.build();  EditPage edit=new EditPage();  edit.id=page.getId();  edit.title=page.getTitle();  edit.description=page.getDescription();  edit.template=page.getLayout().getTemplate();  edit.detailTemplate=page.getDetailLayout().getTemplate();  pageConfigurationForm.readFromObject(edit);  if (script == null) {    prepareScript();  }}  }
class C{  public static boolean isSupportedSv2Message(LocoNetMessage m){  if (m.getElement(0) != LnConstants.OPC_PEER_XFER) {    log.debug("cannot be SV2 message because not OPC_PEER_XFER");    return false;  }  if (m.getElement(1) != 0x10) {    log.debug("cannot be SV2 message because not length 0x10");    return false;  }  if ((m.getElement(SV2_SV_TYPE_ELEMENT_INDEX) & SV2_SV_TYPE_ELEMENT_VALIDITY_CHECK_MASK) != SV2_SV_TYPE_ELEMENT_VALIDITY_CHECK_VALUE) {    log.debug("cannot be SV2 message because type byte not correct");    return false;  }  if ((m.getElement(SV2_SVX1_ELEMENT_INDEX) & SV2_SVX1_ELEMENT_VALIDITY_CHECK_MASK) != SV2_SVX1_ELEMENT_VALIDITY_CHECK_VALUE) {    log.debug("cannot be SV2 message because SVX1 upper nibble wrong");    return false;  }  if ((m.getElement(SV2_SVX2_ELEMENT_INDEX) & SV2_SVX2_ELEMENT_VALIDITY_CHECK_MASK) != SV2_SVX2_ELEMENT_VALIDITY_CHECK_VALUE) {    log.debug("cannot be SV2 message because SVX2 upper nibble wrong");    return false;  }  if (isSupportedSv2Command(m.getElement(SV2_SV_CMD_ELEMENT_INDEX))) {    log.debug("LocoNet message is a supported SV Format 2 message");    return true;  }  log.debug("LocoNet message is not a supported SV Format 2 message");  return false;}  }
class C{  public PlaneSide testPoint(float x,float y,float z){  float dist=normal.dot(x,y,z) + d;  if (dist == 0)   return PlaneSide.OnPlane; else   if (dist < 0)   return PlaneSide.Back; else   return PlaneSide.Front;}  }
class C{  public Response deleteChatRoom(String roomName){  return restClient.delete("chatrooms/" + roomName,new HashMap<String,String>());}  }
class C{  private void checkByTargetFilterQueryAndAssignDS(TargetFilterQuery targetFilterQuery){  try {    DistributionSet distributionSet=targetFilterQuery.getAutoAssignDistributionSet();    int count;    do {      count=runTransactionalAssignment(targetFilterQuery,distributionSet.getId());    } while (count == PAGE_SIZE);  } catch (  PersistenceException|AbstractServerRtException e) {    LOGGER.error("Error during auto assign check of target filter query " + targetFilterQuery.getId(),e);  }}  }
class C{  private final boolean lookbehindHasToken(int n){  boolean hasToken;  if ((m_queueMark - n) > 0) {    String lookbehind=(String)m_ops.m_tokenQueue.elementAt(m_queueMark - (n - 1));    char c0=(lookbehind == null) ? '|' : lookbehind.charAt(0);    hasToken=(c0 == '|') ? false : true;  } else {    hasToken=false;  }  return hasToken;}  }
class C{  private void extendFile(){  final int adjust=-1200 + (m_fileSize / 10);  extendFile(adjust);}  }
class C{  public static void requireAnyChildElement(SimpleMethod method,Element element,String... elementNames) throws ValidationException {  Set<String> childElementNames=new HashSet<String>();  Node node=element.getFirstChild();  while (node != null) {    if (node.getNodeType() == Node.ELEMENT_NODE) {      Element childElement=(Element)node;      childElementNames.add(childElement.getTagName());    }    node=node.getNextSibling();  }  StringBuilder sb=new StringBuilder();  for (  String name : elementNames) {    if (childElementNames.contains(name)) {      return;    }    if (sb.length() > 0) {      sb.append(", ");    }    sb.append("<").append(name).append(">");  }  handleError("Element must include one of " + sb + " child elements.",method,element);}  }
class C{  public static <E,X extends Exception>Set<E> asSet(Iteration<? extends E,X> iter) throws X {  Set<E> result=new HashSet<E>();  addAll(iter,result);  return result;}  }
class C{  public static long toLongFromNibbles(byte[] nibbles){  return toLong(nibbles[0],nibbles[1],nibbles[2],nibbles[3],nibbles[4],nibbles[5],nibbles[6],nibbles[7],nibbles[8],nibbles[9],nibbles[10],nibbles[11],nibbles[12],nibbles[13],nibbles[14],nibbles[15]);}  }
class C{  public static _AgentStatus fromString(final String value) throws SOAPSerializationException {  return (_AgentStatus)Enumeration.fromString(value,_AgentStatus.VALUES_TO_INSTANCES);}  }
class C{  public static double fCdf(double x,double df1,double df2){  return (1.0 - betaCdf(df2 / (df2 + df1 * x),0.5 * df2,0.5 * df1));}  }
class C{  public static boolean equals(Set<? extends Statement> model1,Set<? extends Statement> model2){  if (model1.size() != model2.size()) {    return false;  }  return isSubsetInternal(model1,model2);}  }
class C{  public static int[][] generateMatrix(int n){  if (n <= 0)   return new int[0][0];  int[][] ans=new int[n][n];  int num=1;  int lv=0;  while (2 * lv < n) {    for (int i=lv; i < n - lv; i++)     ans[lv][i]=num++;    for (int i=lv + 1; i < n - lv; i++)     ans[i][n - lv - 1]=num++;    for (int i=n - lv - 2; i >= lv; i--)     ans[n - lv - 1][i]=num++;    for (int i=n - lv - 2; i >= lv + 1; i--)     ans[i][lv]=num++;    lv++;  }  return ans;}  }
class C{  public IPackageFragmentRoot[] computePackageFragmentRoots(IClasspathEntry resolvedEntry){  try {    return computePackageFragmentRoots(new IClasspathEntry[]{resolvedEntry},false,null);  } catch (  JavaModelException e) {    return new IPackageFragmentRoot[]{};  }}  }
class C{  public boolean convergenceStep(){  boolean convergence=true;  double df=(1.0d - damping) / this.cr_host_count;  try {    for (    Map.Entry<String,double[]> entry : this.crt.entrySet()) {      String id=entry.getKey();      ReferenceReport rr=this.rrCache.getReferenceReport(id,false);      HandleSet iids=rr.getInternallIDs();      double ncr=0.0d;      for (      byte[] iid : iids) {        int ilc=getInternalLinks(iid);        if (ilc > 0) {          double[] d=this.crt.get(ASCII.String(iid));          if (d != null && d.length > 0) {            ncr+=d[0] / ilc;          } else {            ConcurrentLog.warn("COLLECTION","d[] is empty, iid=" + ASCII.String(iid));            break;          }        }      }      ncr=df + damping * ncr;      if (convergence && !eqd(ncr,entry.getValue()[0]))       convergence=false;      entry.getValue()[1]=ncr;    }    for (    Map.Entry<String,double[]> entry : this.crt.entrySet()) {      entry.getValue()[0]=entry.getValue()[1];    }  } catch (  final IOException e) {  }  return convergence;}  }
class C{  public XmlParser(Context context){  super(context);}  }
class C{  public boolean equalsNonOriented(QuadEdge qe){  if (equalsOriented(qe))   return true;  if (equalsOriented(qe.sym()))   return true;  return false;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:45.041 -0500",hash_original_method="4DFB8B26593004F05B46C7B55CA3A1AC",hash_generated_method="CFB6CD05ABDFFC658AA0528C1C95A53B") static void performBackup_checked(ParcelFileDescriptor oldState,BackupDataOutput data,ParcelFileDescriptor newState,String[] files,String[] keys){  if (files.length == 0) {    return;  }  for (  String f : files) {    if (f.charAt(0) != '/') {      throw new RuntimeException("files must have all absolute paths: " + f);    }  }  if (files.length != keys.length) {    throw new RuntimeException("files.length=" + files.length + " keys.length="+ keys.length);  }  FileDescriptor oldStateFd=oldState != null ? oldState.getFileDescriptor() : null;  FileDescriptor newStateFd=newState.getFileDescriptor();  if (newStateFd == null) {    throw new NullPointerException();  }  int err=performBackup_native(oldStateFd,data.mBackupWriter,newStateFd,files,keys);  if (err != 0) {    throw new RuntimeException("Backup failed 0x" + Integer.toHexString(err));  }}  }
class C{  public boolean isFixedSize(){  return (mRequestedWidth != -1 || mRequestedHeight != -1);}  }
class C{  public static void printSecurityProvides(){  final Provider[] providers=Security.getProviders();  for (  final Provider provider : providers) {    System.out.println("PROVIDER: " + provider.getName());    final Set<Provider.Service> services=provider.getServices();    for (    final Provider.Service service : services) {      System.out.println("\tALGORITHM: " + service.getAlgorithm() + " / "+ service.getType()+ " / "+ service.getClassName());    }  }}  }
class C{  protected void updateValues(String packageName,Integer color,Integer timeon,Integer timeoff){  ContentResolver resolver=getContentResolver();  if (packageName.equals(DEFAULT_PREF)) {    Settings.System.putInt(resolver,NOTIFICATION_LIGHT_PULSE_DEFAULT_COLOR,color);    Settings.System.putInt(resolver,NOTIFICATION_LIGHT_PULSE_DEFAULT_LED_ON,timeon);    Settings.System.putInt(resolver,NOTIFICATION_LIGHT_PULSE_DEFAULT_LED_OFF,timeoff);    refreshDefault();    return;  } else   if (packageName.equals(MISSED_CALL_PREF)) {    Settings.System.putInt(resolver,NOTIFICATION_LIGHT_PULSE_CALL_COLOR,color);    Settings.System.putInt(resolver,NOTIFICATION_LIGHT_PULSE_CALL_LED_ON,timeon);    Settings.System.putInt(resolver,NOTIFICATION_LIGHT_PULSE_CALL_LED_OFF,timeoff);    refreshDefault();    return;  } else   if (packageName.equals(VOICEMAIL_PREF)) {    Settings.System.putInt(resolver,NOTIFICATION_LIGHT_PULSE_VMAIL_COLOR,color);    Settings.System.putInt(resolver,NOTIFICATION_LIGHT_PULSE_VMAIL_LED_ON,timeon);    Settings.System.putInt(resolver,NOTIFICATION_LIGHT_PULSE_VMAIL_LED_OFF,timeoff);    refreshDefault();    return;  }  Package app=mPackages.get(packageName);  if (app != null) {    app.color=color;    app.timeon=timeon;    app.timeoff=timeoff;    savePackageList(true);  }}  }
class C{  private void updateData(String element,int id){  MAccount.updateValueDescription(getCtx(),element + "=" + id,get_TrxName());  String sql="UPDATE C_ValidCombination SET " + element + "="+ id+ " WHERE "+ element+ " IS NULL AND AD_Client_ID="+ getAD_Client_ID();  int noC=DB.executeUpdate(sql,get_TrxName());  sql="UPDATE Fact_Acct SET " + element + "="+ id+ " WHERE "+ element+ " IS NULL AND C_AcctSchema_ID="+ getC_AcctSchema_ID();  int noF=DB.executeUpdate(sql,get_TrxName());  log.fine("ValidCombination=" + noC + ", Fact="+ noF);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'FRESH_NEWS_CACHE' ("+ "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "'RESULT' TEXT,"+ "'PAGE' INTEGER,"+ "'TIME' INTEGER);");}  }
class C{  public void writeTag(String tag,Font value){  startTag(tag);  writeTag("name",value.getName());  int style=value.getStyle();  if ((style & Font.BOLD) != 0 && (style & Font.ITALIC) != 0) {    writeTag(STYLE,"BOLDITALIC");  } else   if ((style & Font.BOLD) != 0) {    writeTag(STYLE,"BOLD");  } else   if ((style & Font.ITALIC) != 0) {    writeTag(STYLE,"ITALIC");  } else {    writeTag(STYLE,"PLAIN");  }  writeTag("size",value.getSize());  closeTag();}  }
class C{  public Seconds toStandardSeconds(){  return Seconds.seconds(FieldUtils.safeMultiply(getValue(),DateTimeConstants.SECONDS_PER_HOUR));}  }
class C{  @Override public VarNode visit(final ASTCollection node,final Object data) throws VisitorException {  final String listVarName=node.getVarName();  final VarNode rootListVar=context.createAnonVar(listVarName);  TermNode listVar=rootListVar;  final int childCount=node.jjtGetNumChildren();  for (int i=0; i < childCount; i++) {    final TermNode childValue=(TermNode)node.jjtGetChild(i).jjtAccept(this,null);    graphPattern.addSP(listVar,context.createConstVar(RDF.FIRST),childValue);    TermNode nextListVar;    if (i == childCount - 1) {      nextListVar=context.createConstVar(RDF.NIL);    } else {      nextListVar=context.createAnonVar(listVarName + "-" + (i + 1));    }    graphPattern.addSP(listVar,context.createConstVar(RDF.REST),nextListVar);    listVar=nextListVar;  }  return rootListVar;}  }
class C{  public static boolean contains(final short[] array,final short valueToFind){  return ArrayUtils.indexOf(array,valueToFind) != ArrayUtils.INDEX_NOT_FOUND;}  }
class C{  public StrBuilder replace(int startIndex,int endIndex,String replaceStr){  endIndex=validateRange(startIndex,endIndex);  int insertLen=(replaceStr == null ? 0 : replaceStr.length());  replaceImpl(startIndex,endIndex,endIndex - startIndex,replaceStr,insertLen);  return this;}  }
class C{  public SynapseGroup connectNeuronGroups(NeuronGroup source,NeuronGroup target,ConnectNeurons connection){  SynapseGroup newGroup=connectNeuronGroups(source,target,"" + (getIndexOfNeuronGroup(source) + 1),"" + (getIndexOfNeuronGroup(target) + 1),connection);  return newGroup;}  }
class C{  public static void toggleSoftInput(Context context){  InputMethodManager imm=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);  imm.toggleSoftInput(0,InputMethodManager.HIDE_NOT_ALWAYS);}  }
class C{  @Override public String globalInfo(){  return "The Multi-Target Version of EnsembleML.\n" + "It takes votes using the confidence outputs of the base classifier.";}  }
class C{  private int readAnnotationValues(int v,final char[] buf,final boolean named,final AnnotationVisitor av){  int i=readUnsignedShort(v);  v+=2;  if (named) {    for (; i > 0; --i) {      v=readAnnotationValue(v + 2,buf,readUTF8(v,buf),av);    }  } else {    for (; i > 0; --i) {      v=readAnnotationValue(v,buf,null,av);    }  }  if (av != null) {    av.visitEnd();  }  return v;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public static String seconds(Duration duration){  return String.valueOf(duration.getSeconds());}  }
class C{  public void start(){  startedIndexTimeStamp=0;  currentIndex=0;  ticksSinceIndexChange=0;  timer.start();}  }
class C{  protected <T extends KeySpec>T engineGetKeySpec(Key key,Class<T> keySpec) throws InvalidKeySpecException {  DSAParams params;  try {    if (key instanceof java.security.interfaces.DSAPublicKey) {      Class<?> dsaPubKeySpec=Class.forName("java.security.spec.DSAPublicKeySpec");      Class<?> x509KeySpec=Class.forName("java.security.spec.X509EncodedKeySpec");      if (dsaPubKeySpec.isAssignableFrom(keySpec)) {        java.security.interfaces.DSAPublicKey dsaPubKey=(java.security.interfaces.DSAPublicKey)key;        params=dsaPubKey.getParams();        return keySpec.cast(new DSAPublicKeySpec(dsaPubKey.getY(),params.getP(),params.getQ(),params.getG()));      } else       if (x509KeySpec.isAssignableFrom(keySpec)) {        return keySpec.cast(new X509EncodedKeySpec(key.getEncoded()));      } else {        throw new InvalidKeySpecException("Inappropriate key specification");      }    } else     if (key instanceof java.security.interfaces.DSAPrivateKey) {      Class<?> dsaPrivKeySpec=Class.forName("java.security.spec.DSAPrivateKeySpec");      Class<?> pkcs8KeySpec=Class.forName("java.security.spec.PKCS8EncodedKeySpec");      if (dsaPrivKeySpec.isAssignableFrom(keySpec)) {        java.security.interfaces.DSAPrivateKey dsaPrivKey=(java.security.interfaces.DSAPrivateKey)key;        params=dsaPrivKey.getParams();        return keySpec.cast(new DSAPrivateKeySpec(dsaPrivKey.getX(),params.getP(),params.getQ(),params.getG()));      } else       if (pkcs8KeySpec.isAssignableFrom(keySpec)) {        return keySpec.cast(new PKCS8EncodedKeySpec(key.getEncoded()));      } else {        throw new InvalidKeySpecException("Inappropriate key specification");      }    } else {      throw new InvalidKeySpecException("Inappropriate key type");    }  } catch (  ClassNotFoundException e) {    throw new InvalidKeySpecException("Unsupported key specification: " + e.getMessage());  }}  }
class C{  public boolean containsKey(Object key){  processQueue();  return hash.containsKey(key);}  }
class C{  public AnnotatedTypeMirror substitute(final Map<TypeVariable,AnnotatedTypeMirror> typeParamToArg,final AnnotatedTypeMirror typeMirror){  return new Visitor(typeParamToArg).visit(typeMirror);}  }
class C{  public Heap(final File heapFile,final int keylength,final ByteOrder ordering,int buffermax) throws IOException {  super(heapFile,keylength,ordering);  this.buffermax=buffermax;  this.buffer=new TreeMap<byte[],byte[]>(ordering);  this.buffersize=0;  ConcurrentLog.info("Heap","initializing heap " + this.name());}  }
class C{  public void finish(){  if (!isFinished()) {    startTime=System.currentTimeMillis() - duration;    currentMotionTime=-1;  }}  }
class C{  public int size(){  return this.registry.length;}  }
class C{  public Scope createScope(){  ScopeImpl scope=new ScopeImpl();  return scope;}  }
class C{  private void write(Kim kim,int from,int thru,Huff huff) throws JSONException {  for (int at=from; at < thru; at+=1) {    write(kim.get(at),huff);  }}  }
class C{  public boolean isPublic(){  return is(PUBLIC);}  }
class C{  @NonNull public static LocalDate dateToLocalDate(@NonNull Date date){  return dateToZonedDateTime(date).toLocalDate();}  }
class C{  public static boolean looksLikeALength(String val){  return CSS_LENGTH_PATTERN.matcher(val).matches();}  }
class C{  @SuppressWarnings("deprecation") protected boolean activateOrientation(){  if (mSensorManager != null && mSensorManager.registerListener(this,mSensorManager.getDefaultSensor(Sensor.TYPE_ORIENTATION),SensorManager.SENSOR_DELAY_GAME))   return true;  PLLog.debug("PLView::activateOrientation","Orientation sensor is not available on the device!");  return false;}  }
class C{  AlignmentPattern find() throws NotFoundException {  int startX=this.startX;  int height=this.height;  int maxJ=startX + width;  int middleI=startY + (height >> 1);  int[] stateCount=new int[3];  for (int iGen=0; iGen < height; iGen++) {    int i=middleI + ((iGen & 0x01) == 0 ? (iGen + 1) >> 1 : -((iGen + 1) >> 1));    stateCount[0]=0;    stateCount[1]=0;    stateCount[2]=0;    int j=startX;    while (j < maxJ && !image.get(j,i)) {      j++;    }    int currentState=0;    while (j < maxJ) {      if (image.get(j,i)) {        if (currentState == 1) {          stateCount[currentState]++;        } else {          if (currentState == 2) {            if (foundPatternCross(stateCount)) {              AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,j);              if (confirmed != null) {                return confirmed;              }            }            stateCount[0]=stateCount[2];            stateCount[1]=1;            stateCount[2]=0;            currentState=1;          } else {            stateCount[++currentState]++;          }        }      } else {        if (currentState == 1) {          currentState++;        }        stateCount[currentState]++;      }      j++;    }    if (foundPatternCross(stateCount)) {      AlignmentPattern confirmed=handlePossibleCenter(stateCount,i,maxJ);      if (confirmed != null) {        return confirmed;      }    }  }  if (!possibleCenters.isEmpty()) {    return possibleCenters.get(0);  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  protected TableRowElement generateHeader(HttpServletRequest req,HttpServletResponse resp,DcwColumnInfo[] dci){  TableRowElement thr=new TableRowElement();  for (int i=0; i < dci.length; i++) {    DcwColumnInfo dc=dci[i];    String colName=dc.getColumnName();    if (dc.getValueDescriptionTable() == null) {      thr.addElement(new TableHeaderElement(colName));    } else {      StringBuffer baseurl=new StringBuffer();      baseurl.append(req.getContextPath());      baseurl.append(req.getServletPath());      baseurl.append(req.getPathInfo()).append("?");      String show=req.getParameter(RowSelectParam);      String vdtl=req.getParameter(VDTParam);      if (show != null) {        baseurl.append(RowSelectParam).append("=");        baseurl.append(show).append("&");      }      baseurl.append(VDTParam).append("=");      if (vdtl == null) {        vdtl="";      }      boolean appendCol=true;      boolean needSep=false;      StringTokenizer st=new StringTokenizer(vdtl,",");      while (st.hasMoreTokens()) {        String sname=st.nextToken();        if (colName.equals(sname)) {          appendCol=false;        } else {          append(baseurl,sname,needSep);          needSep=true;        }      }      if (appendCol) {        append(baseurl,colName,needSep);      }      thr.addElement(THE(colName,baseurl.toString()));    }  }  return thr;}  }
class C{  public void updateRectangle(int x1,int y1,int x2,int y2,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkRectangle.write(x1,y1,x2,y2,properties,link.dos);}  }
class C{  public void insertNewAddresses(Dao<AddressBook,Integer> addressBookDao,Dao<AddressItem,Integer> addressItemDao) throws SQLException {  if (this.nonDaoAddresses == null) {    return;  }  addressBookDao.assignEmptyForeignCollection(this,"addresses");  for (  AddressItem addressItem : nonDaoAddresses) {    addressItem.setAddressBook(this);    addressItemDao.create(addressItem);    addresses.add(addressItem);  }}  }
class C{  public static void recoverLocalElder(DM dm,Map grantors,Set needsRecovery){synchronized (services) {    Iterator entries=services.entrySet().iterator();    while (entries.hasNext()) {      Map.Entry entry=(Map.Entry)entries.next();      String serviceName=(String)entry.getKey();      DLockService service=(DLockService)entry.getValue();      boolean foundGrantor=false;      DLockGrantor grantor=service.getGrantor();      if (grantor != null && grantor.getVersionId() != -1 && !grantor.isDestroyed()) {        foundGrantor=true;        GrantorInfo oldgi=(GrantorInfo)grantors.get(serviceName);        if (oldgi == null || oldgi.getVersionId() < grantor.getVersionId()) {          grantors.put(serviceName,new GrantorInfo(dm.getId(),grantor.getVersionId(),service.getSerialNumber(),false));          needsRecovery.remove(serviceName);        }      }      if (!foundGrantor && !(dm.isAdam() && !service.hasHeldLocks())) {        if (!grantors.containsKey(serviceName)) {          needsRecovery.add(serviceName);        }      }    }  }}  }
class C{  public static Object generateArray(Class<?> baseType,int[] dims){  Object x=ArrayFuncs.newInstance(baseType,dims);  testPattern(x,(byte)0);  return x;}  }
class C{  public GF2Polynomial subtract(GF2Polynomial b){  return xor(b);}  }
class C{  private boolean shouldRoundUp(int maximumDigits,boolean alreadyRounded,boolean valueExactAsDecimal){  if (maximumDigits < count) {switch (roundingMode) {case UP:      for (int i=maximumDigits; i < count; ++i) {        if (digits[i] != '0') {          return true;        }      }    break;case DOWN:  break;case CEILING:for (int i=maximumDigits; i < count; ++i) {  if (digits[i] != '0') {    return !isNegative;  }}break;case FLOOR:for (int i=maximumDigits; i < count; ++i) {if (digits[i] != '0') {return isNegative;}}break;case HALF_UP:case HALF_DOWN:if (digits[maximumDigits] > '5') {return true;} else if (digits[maximumDigits] == '5') {if (maximumDigits != (count - 1)) {return true;} else {if (valueExactAsDecimal) {return roundingMode == RoundingMode.HALF_UP;} else {return !alreadyRounded;}}}break;case HALF_EVEN:if (digits[maximumDigits] > '5') {return true;} else if (digits[maximumDigits] == '5') {if (maximumDigits == (count - 1)) {if (alreadyRounded) return false;if (!valueExactAsDecimal) return true; else {return ((maximumDigits > 0) && (digits[maximumDigits - 1] % 2 != 0));}} else {for (int i=maximumDigits + 1; i < count; ++i) {if (digits[i] != '0') return true;}}}break;case UNNECESSARY:for (int i=maximumDigits; i < count; ++i) {if (digits[i] != '0') {throw new ArithmeticException("Rounding needed with the rounding mode being set to RoundingMode.UNNECESSARY");}}break;default :assert false;}}return false;}  }
class C{  @Override public void encode(WbXmlEncoder encoderType,WbXmlElement element,WbXmlContent content) throws IOException {  if (!content.isString()) {    throw new IOException("The content is not a String!");  }  encoderType.encode(content);}  }
class C{  @SuppressWarnings("unchecked") public ClassListParameter(OptionID optionID,Class<?> restrictionClass,boolean optional){  super(optionID,optional);  this.restrictionClass=(Class<C>)restrictionClass;}  }
class C{  public final void writeInt(int v) throws IOException {  w[0]=(byte)v;  w[1]=(byte)(v >> 8);  w[2]=(byte)(v >> 16);  w[3]=(byte)(v >> 24);  r.write(w,0,4);}  }
class C{  public FisheyeTreeFilter(String group,int distance){  this(group,Visualization.FOCUS_ITEMS,distance);}  }
class C{  private void drainCharBuffer() throws IOException {  writer.write(chars,0,encCount);  totalCharsWritten+=encCount;  encCount=0;}  }
class C{  public void write(int c) throws IOException {  internalOut.write(c);}  }
class C{  protected static Variable findTargetVariable(VariableExpression ve){  final Variable accessedVariable=ve.getAccessedVariable() != null ? ve.getAccessedVariable() : ve;  if (accessedVariable != ve) {    if (accessedVariable instanceof VariableExpression)     return findTargetVariable((VariableExpression)accessedVariable);  }  return accessedVariable;}  }
class C{  private long nextSegmentIndex(long segmentIndex,Segment segment){  long segmentsTier=this.segmentsTier;  segmentIndex<<=-segmentsTier;  segmentIndex=Long.reverse(segmentIndex);  int numberOfArrayIndexesWithThisSegment=1 << (segmentsTier - segment.tier);  segmentIndex+=numberOfArrayIndexesWithThisSegment;  if (segmentIndex > segmentsMask)   return -1;  segmentIndex=Long.reverse(segmentIndex);  segmentIndex>>>=-segmentsTier;  return segmentIndex;}  }
class C{  public static <T>void shuffleArraySample(T[] array,int sampleSize){  if (array.length <= sampleSize) {    return;  }  T temp;  int index;  Random random=new Random();  for (int i=0; i < sampleSize; i++) {    index=random.nextInt(array.length - i) + i;    temp=array[index];    array[index]=array[i];    array[i]=temp;  }}  }
class C{  public static void assumeNotNull(Object... objects){  assumeThat(asList(objects),everyItem(notNullValue()));}  }
class C{  public static void enableLogging(){  ANLog.enableLogging();}  }
class C{  public static void showCheckPopUp(@NotNull final Project project,@NotNull final Balloon balloon){  final StudyEditor studyEditor=StudyEditor.getSelectedStudyEditor(project);  assert studyEditor != null;  final JButton checkButton=studyEditor.getCheckButton();  balloon.showInCenterOf(checkButton);  Disposer.register(project,balloon);}  }
class C{  public ThumbnailParameterBuilder format(String format){  this.thumbnailFormat=format;  return this;}  }
class C{  public static void showError(final String messageText){  JOptionPane.showMessageDialog(null,messageText,translate("genericErrorMessageTitle"),JOptionPane.ERROR_MESSAGE);}  }
class C{  @Override public String toString(){  final StringBuilder strinBuilder=new StringBuilder();  for (  final ReilInstruction instruction : m_instructions) {    strinBuilder.append(instruction.toString());    strinBuilder.append('\n');  }  return strinBuilder.toString();}  }
class C{  public final void clear(){  _length=0;}  }
class C{  public DbfOutputStream(OutputStream os){  BufferedOutputStream bos=new BufferedOutputStream(os);  _leos=new LittleEndianOutputStream(bos);}  }
class C{  public ETypeInfo(DerValue encoding) throws Asn1Exception, IOException {  DerValue der=null;  if (encoding.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  der=encoding.getData().getDerValue();  if ((der.getTag() & 0x1F) == 0x00) {    this.etype=der.getData().getBigInteger().intValue();  } else   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  if (encoding.getData().available() > 0) {    der=encoding.getData().getDerValue();    if ((der.getTag() & 0x1F) == 0x01) {      byte[] saltBytes=der.getData().getOctetString();      if (KerberosString.MSNAME) {        this.salt=new String(saltBytes,"UTF8");      } else {        this.salt=new String(saltBytes);      }    }  }  if (encoding.getData().available() > 0)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);}  }
class C{  private void action_treeAddAll(){  log.info("");  ListModel model=centerList.getModel();  int size=model.getSize();  int index=-1;  for (index=0; index < size; index++) {    ListItem item=(ListItem)model.getElementAt(index);    action_treeAdd(item);  }}  }
class C{  public BlackAndWhiteEffect(){}  }
class C{  public SearchBuilder<T> byExactName(String name){  return byName(name).filter(new NameFilter<T>(name));}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public static RelationalOpExpression isNull(Expression expression){  return new RelationalOpExpression(expression,"is",null);}  }
class C{  protected void writeResultToFile(SimpleHash model,Template template,String fileName) throws IOException, TemplateException {  final String resultFilePath="${home.dir}/{test.dir}" + fileName + ".svg";  Writer out=new PrintWriter(new FileWriter(resultFilePath));  template.process(model,out);  out.flush();}  }
class C{  public static Intent forgeResumeIntent(Context ctx,FileTransferDAO ftDao,Intent resume){  resume.setClass(ctx,ReceiveFileTransfer.class);  resume.addFlags(Intent.FLAG_FROM_BACKGROUND | Intent.FLAG_ACTIVITY_NEW_TASK);  Bundle bundle=new Bundle();  bundle.putParcelable(BUNDLE_FTDAO_ID,ftDao);  resume.putExtras(bundle);  return resume;}  }
class C{  private static void testPowers(){  for (int i=-149; i <= +127; i++) {    float f=Math.scalb(1.0f,i);    BigDecimal f_BD=new BigDecimal(f);    BigDecimal lowerBound=f_BD.subtract(new BigDecimal(Math.ulp(-Math.nextUp(-f))).multiply(HALF));    BigDecimal upperBound=f_BD.add(new BigDecimal(Math.ulp(f)).multiply(HALF));    check(lowerBound.toString());    check(upperBound.toString());  }  check(new BigDecimal(Float.MAX_VALUE).add(new BigDecimal(Math.ulp(Float.MAX_VALUE)).multiply(HALF)).toString());}  }
class C{  public HDBSCAN(){  this(15);}  }
class C{  public EntropyCalculatorMultiVariateKernel(){  mvke=new KernelEstimatorMultiVariate();  mvke.setDebug(debug);  mvke.setNormalise(normalise);  lastEntropy=0.0;}  }
class C{  @Override public boolean conditionOk(Example example){  return !example.equalValue(example.getAttributes().getLabel(),example.getAttributes().getPredictedLabel());}  }
class C{  private void appendEndTag(String qName){  charBuf.append("</" + qName + ">");}  }
class C{  public boolean addProperty(OwlProperty property){  property.addRestriction(this);  return properties.add(property);}  }
class C{  protected void generateOutputProperties() throws Exception {  Enumeration<?> keys;  String key;  String value;  String pkg;  StringTokenizer tok;  Vector<String> classes;  HashSet<String> names;  int i;  m_OutputProperties=new Properties();  keys=m_InputProperties.propertyNames();  while (keys.hasMoreElements()) {    key=keys.nextElement().toString();    if (key.equals(USE_DYNAMIC)) {      continue;    }    tok=new StringTokenizer(m_InputProperties.getProperty(key),",");    names=new HashSet<String>();    while (tok.hasMoreTokens()) {      pkg=tok.nextToken().trim();      try {        classes=ClassDiscovery.find(Class.forName(key),pkg);      } catch (      Exception e) {        System.out.println("Problem with '" + key + "': "+ e);        classes=new Vector<String>();      }      for (i=0; i < classes.size(); i++) {        if (!isValidClassname(classes.get(i).toString())) {          continue;        }        if (!isValidClassname(key,classes.get(i).toString())) {          continue;        }        names.add(classes.get(i));      }    }    value="";    classes=new Vector<String>();    classes.addAll(names);    Collections.sort(classes,new StringCompare());    for (i=0; i < classes.size(); i++) {      if (!value.equals("")) {        value+=",";      }      value+=classes.get(i).toString();    }    if (VERBOSE) {      System.out.println(pkg + " -> " + value);    }    m_OutputProperties.setProperty(key,value);  }}  }
class C{  ArrayListSpliterator(ArrayList<E> list,int origin,int fence,int expectedModCount){  this.list=list;  this.index=origin;  this.fence=fence;  this.expectedModCount=expectedModCount;}  }
class C{  public static final long maxMemory(){  return getStrategy().maxMemory();}  }
class C{  public static String toString(InputStream input,String encoding) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw,encoding);  return sw.toString();}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public void write(TBase t) throws IOException {  try {    t.write(binaryOut);    dataOutputStream.flush();  } catch (  TException e) {    throw new IOException(e);  }}  }
class C{  @DSSink({DSSinkKind.LOG}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:42.681 -0500",hash_original_method="F1A2611A7518798734124BE0FA3DC184",hash_generated_method="2954BED3906FA26E267504074A939ECD") public void sendKeys(String keysSequence){  final String[] keys=keysSequence.split(" ");  final int count=keys.length;  final Instrumentation instrumentation=getInstrumentation();  for (int i=0; i < count; i++) {    String key=keys[i];    int repeater=key.indexOf('*');    int keyCount;    try {      keyCount=repeater == -1 ? 1 : Integer.parseInt(key.substring(0,repeater));    } catch (    NumberFormatException e) {      Log.w("ActivityTestCase","Invalid repeat count: " + key);      continue;    }    if (repeater != -1) {      key=key.substring(repeater + 1);    }    for (int j=0; j < keyCount; j++) {      try {        final Field keyCodeField=KeyEvent.class.getField("KEYCODE_" + key);        final int keyCode=keyCodeField.getInt(null);        try {          instrumentation.sendKeyDownUpSync(keyCode);        } catch (        SecurityException e) {        }      } catch (      NoSuchFieldException e) {        Log.w("ActivityTestCase","Unknown keycode: KEYCODE_" + key);        break;      }catch (      IllegalAccessException e) {        Log.w("ActivityTestCase","Unknown keycode: KEYCODE_" + key);        break;      }    }  }  instrumentation.waitForIdleSync();}  }
class C{  private final void notifyConnectionOpened(OFConnection connection){  this.connection=connection;  this.newConnectionListener.connectionOpened(connection,featuresReply);}  }
class C{  public SwapParams(Builder builder){  mRequestCode=builder.mRequestCode;  mAddToBackStack=builder.mAddToBackStack;  mAnimate=builder.mAnimate;  mEnterAnimResId=builder.mEnterAnimResId;  mExitAnimResId=builder.mExitAnimResId;  mPopEnterAnimResId=builder.mPopEnterAnimResId;  mPopExitAnimResId=builder.mPopExitAnimResId;  mIsMainContext=builder.mIsMainContext;  mRemoveOld=builder.mRemoveOld;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private Cursor queryRequestHeaders(SQLiteDatabase db,Uri uri){  String where=DownloadContract.RequestHeaders.COLUMN_DOWNLOAD_ID + "=" + getDownloadIdFromUri(uri);  String[] projection=new String[]{DownloadContract.RequestHeaders.COLUMN_HEADER,DownloadContract.RequestHeaders.COLUMN_VALUE};  return db.query(DownloadContract.RequestHeaders.HEADERS_DB_TABLE,projection,where,null,null,null,null);}  }
class C{  private static TimeZone utc(){  return TimeZone.getTimeZone("UTC");}  }
class C{  private Exception handleException(String mountPath,Exception e){  if (isPlatformConfigFault(e)) {    return handleKnownException(e,getFaultMessage(e));  } else   if (isAlreadyExists(e)) {    final String datastore=((AlreadyExists)e.getCause()).getName();    return handleKnownException(e,getMessage("CreateNfsDatastore.exception.exportMapped",datastore,getFaultMessage(e)));  } else {    return e;  }}  }
class C{  public UniformDistr(double min,double max){  numGen=new UniformRealDistribution(min,max);}  }
class C{  private void updateStyle(JTable c){  SeaGlassContext context=getContext(c,ENABLED);  SynthStyle oldStyle=style;  SynthStyle s=SeaGlassLookAndFeel.updateStyle(context,this);  if (s instanceof SeaGlassStyle) {    style=(SeaGlassStyle)s;    selectionActiveBottomBorderColor=UIManager.getColor("seaGlassTableSelectionActiveBottom");    selectionInactiveBottomBorderColor=UIManager.getColor("seaGlassTableSelectionInactiveBottom");    transparentColor=UIManager.getColor("seaGlassTransparent");    if (style != oldStyle) {      table.remove(rendererPane);      rendererPane=createCustomCellRendererPane();      table.add(rendererPane);      context.setComponentState(ENABLED | SELECTED);      Color sbg=table.getSelectionBackground();      if (sbg == null || sbg instanceof UIResource) {        table.setSelectionBackground(style.getColor(context,ColorType.TEXT_BACKGROUND));      }      Color sfg=table.getSelectionForeground();      if (sfg == null || sfg instanceof UIResource) {        table.setSelectionForeground(style.getColor(context,ColorType.TEXT_FOREGROUND));      }      context.setComponentState(ENABLED);      Color gridColor=table.getGridColor();      if (gridColor == null || gridColor instanceof UIResource) {        gridColor=(Color)style.get(context,"Table.gridColor");        if (gridColor == null) {          gridColor=style.getColor(context,ColorType.FOREGROUND);        }        table.setGridColor(gridColor);      }      useTableColors=style.getBoolean(context,"Table.rendererUseTableColors",true);      useUIBorder=style.getBoolean(context,"Table.rendererUseUIBorder",true);      Object rowHeight=style.get(context,"Table.rowHeight");      if (rowHeight != null) {        LookAndFeel.installProperty(table,"rowHeight",rowHeight);      }      boolean showGrid=style.getBoolean(context,"Table.showGrid",true);      if (!showGrid) {        table.setShowGrid(false);      }      Dimension d=table.getIntercellSpacing();      if (d != null) {        d=(Dimension)style.get(context,"Table.intercellSpacing");      }      alternateColor=(Color)style.get(context,"Table.alternateRowColor");      if (d != null) {        table.setIntercellSpacing(d);      }      table.setOpaque(false);      if (alternateColor != null) {        table.setShowHorizontalLines(false);      }      table.getTableHeader().setBorder(createTableHeaderEmptyColumnPainter(table));      setViewPortListeners(table);      if (oldStyle != null) {        uninstallKeyboardActions();        installKeyboardActions();      }    }  }  context.dispose();}  }
class C{  public static String ulong2str(final long ulongValue,final int radix,final char[] charBuffer){  if (radix < 2 || radix > 36) {    throw new IllegalArgumentException("Illegal radix [" + radix + ']');  }  if (ulongValue == 0) {    return "0";  } else {    long cur=ulongValue;    final String result;    if (cur > 0) {      result=Long.toString(cur,radix).toUpperCase(Locale.ENGLISH);    } else {      final char[] buffer=charBuffer == null || charBuffer.length < 64 ? new char[64] : charBuffer;      int pos=buffer.length;      long topPart=cur >>> 32;      long bottomPart=(cur & 0xFFFFFFFFL) + ((topPart % radix) << 32);      topPart/=radix;      while ((bottomPart | topPart) > 0) {        final int val=(int)(bottomPart % radix);        buffer[--pos]=(char)(val < 10 ? '0' + val : 'A' + val - 10);        bottomPart=(bottomPart / radix) + ((topPart % radix) << 32);        topPart/=radix;      }      result=new String(buffer,pos,buffer.length - pos);    }    return result;  }}  }
class C{  @Override public void println(int priority,String tag,String msg,Throwable tr){  String useMsg=msg;  if (useMsg == null) {    useMsg="";  }  if (tr != null) {    msg+="\n" + Log.getStackTraceString(tr);  }  Log.println(priority,tag,useMsg);  if (mNext != null) {    mNext.println(priority,tag,msg,tr);  }}  }
class C{  public LambdaFactoryConfiguration withImports(String... newImports){  return copy().setImports(listWithNewElements(imports,newImports));}  }
class C{  public static boolean areCorrespondingTypeVariables(Elements elements,AnnotatedTypeVariable type1,AnnotatedTypeVariable type2){  final TypeParameterElement type1ParamElem=(TypeParameterElement)type1.getUnderlyingType().asElement();  final TypeParameterElement type2ParamElem=(TypeParameterElement)type2.getUnderlyingType().asElement();  if (type1ParamElem.getGenericElement() instanceof ExecutableElement && type2ParamElem.getGenericElement() instanceof ExecutableElement) {    final ExecutableElement type1Executable=(ExecutableElement)type1ParamElem.getGenericElement();    final ExecutableElement type2Executable=(ExecutableElement)type2ParamElem.getGenericElement();    final TypeElement type1Class=(TypeElement)type1Executable.getEnclosingElement();    final TypeElement type2Class=(TypeElement)type2Executable.getEnclosingElement();    boolean methodIsOverriden=elements.overrides(type1Executable,type2Executable,type1Class) || elements.overrides(type2Executable,type1Executable,type2Class);    if (methodIsOverriden) {      boolean haveSameIndex=type1Executable.getTypeParameters().indexOf(type1ParamElem) == type2Executable.getTypeParameters().indexOf(type2ParamElem);      return haveSameIndex;    }  }  return false;}  }
class C{  public static void writeAvailableByte(Object o,byte val){  JavaHeader.writeAvailableByte(o,val);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:50.139 -0500",hash_original_method="172F08E6F2352F1764A4A70C48C6E243",hash_generated_method="EC2EB2F402B49276FEE60D910E3FFDD6") private Object readResolve(){  if (list instanceof RandomAccess) {    return new SynchronizedRandomAccessList<E>(list,mutex);  }  return this;}  }
class C{  public int findIndexById(int fldId) throws Exception {  int i;  FolderTokenExtFld fld=null;  int idx=-1;  for (i=0; i < count(); i++) {    fld=get(i);    if (fld.getId() == fldId) {      idx=i;      break;    }  }  return idx;}  }
class C{  public Matrix3d rotationY(double ang){  double sin, cos;  if (ang == Math.PI || ang == -Math.PI) {    cos=-1.0;    sin=0.0;  } else   if (ang == Math.PI * 0.5 || ang == -Math.PI * 1.5) {    cos=0.0;    sin=1.0;  } else   if (ang == -Math.PI * 0.5 || ang == Math.PI * 1.5) {    cos=0.0;    sin=-1.0;  } else {    cos=Math.cos(ang);    sin=Math.sin(ang);  }  m00=cos;  m01=0.0;  m02=-sin;  m10=0.0;  m11=1.0;  m12=0.0;  m20=sin;  m21=0.0;  m22=cos;  return this;}  }
class C{  public static String uuid(int len){  return uuid(len,CHARS.length);}  }
class C{  public Component findByName(String componentName){  return TestUtils.findByName(componentName);}  }
class C{  @Override protected N4JSValueConverterWithValueException newN4JSValueConverterException(INode node,String value){  return new N4JSValueConverterWithValueException(IssueCodes.getMessageForVCO_TEMPLATE_QUOTE(),IssueCodes.VCO_TEMPLATE_QUOTE,node,value,null);}  }
class C{  public boolean isExternalIdAlreadyTaken(String externalId){  return resourceDao.isExternalIdAlreadyTaken(externalId);}  }
class C{  protected Size2D arrangeRF(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  RectangleConstraint c1=constraint.toUnconstrainedWidth();  Size2D size1=arrange(container,g2,c1);  if (constraint.getWidthRange().contains(size1.getWidth())) {    return size1;  } else {    double w=constraint.getWidthRange().constrain(size1.getWidth());    RectangleConstraint c2=constraint.toFixedWidth(w);    return arrange(container,g2,c2);  }}  }
class C{  public void load() throws IOException {  if (asset != null && !Files.exists(fileLocation)) {    asset.copyToFile(fileLocation);  }  MalformedInputException exception=null;  for (  Charset charset : characterSetsToTest) {    try {      fileContents.clear();      fileContents.addAll(Files.readAllLines(fileLocation,charset));      exception=null;      break;    } catch (    MalformedInputException ex) {      exception=ex;    }  }  if (exception != null) {    throw exception;  }}  }
class C{  public static boolean contains(String s,Property expected){  if (s == null || s.length() == 0) {    return false;  }  int i=0;  while (i < s.length()) {    int codepoint=Character.codePointAt(s,i);    Emoji e=map.get(codepoint);    if (e == null) {      return false;    }    if (!e.is(expected)) {      return false;    }    i+=codepoint >= 0x010000 ? 2 : 1;  }  return true;}  }
class C{  public static <T>void fill(List<? super T> list,T obj){  int size=list.size();  if (size < FILL_THRESHOLD || list instanceof RandomAccess) {    for (int i=0; i < size; i++)     list.set(i,obj);  } else {    ListIterator<? super T> itr=list.listIterator();    for (int i=0; i < size; i++) {      itr.next();      itr.set(obj);    }  }}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public void remove(String name){  if (impl.formalArguments == null) {    if (impl.hasFormalArgs) {      throw new IllegalArgumentException("no such attribute: " + name);    }    return;  }  FormalArgument arg=impl.formalArguments.get(name);  if (arg == null) {    throw new IllegalArgumentException("no such attribute: " + name);  }  locals[arg.index]=EMPTY_ATTR;}  }
class C{  public void gotToTheRootFragmentBack(){  for (int i=0; i <= mFragmentManager.getBackStackEntryCount(); ++i) {    goOneBack();  }}  }
class C{  public SecurityException(){}  }
class C{  @Override public void put(String name,short value){  emulatedFields.put(name,value);}  }
class C{  void postCheck() throws JasperException {  Iterator iter=nameFromTable.keySet().iterator();  while (iter.hasNext()) {    String nameFrom=(String)iter.next();    NameEntry nameEntry=nameTable.get(nameFrom);    NameEntry nameFromEntry=nameFromTable.get(nameFrom);    Node nameFromNode=nameFromEntry.getNode();    if (nameEntry == null) {      err.jspError(nameFromNode,"jsp.error.tagfile.nameFrom.noAttribute",nameFrom);    } else {      Node node=nameEntry.getNode();      TagAttributeInfo tagAttr=nameEntry.getTagAttributeInfo();      if (!"java.lang.String".equals(tagAttr.getTypeName()) || !tagAttr.isRequired() || tagAttr.canBeRequestTime()) {        err.jspError(nameFromNode,"jsp.error.tagfile.nameFrom.badAttribute",nameFrom,Integer.toString(node.getStart().getLineNumber()));      }    }  }}  }
class C{  private QName(String namespaceURI,String localName,String toString){  _namespaceURI=(namespaceURI == null) ? null : new CharArray(namespaceURI);  _localName=new CharArray(localName);  _toString=toString;}  }
class C{  @Override public String toString(){  if (this.type == null) {    return "null";  }  return this.stringRepresentation + " (" + this.type.getName()+ "@"+ Integer.toHexString(this.identityHashCode)+ ")";}  }
class C{  public boolean isHighlightWithInvisibleEdge(){  return highlightWithInvisibleEdge;}  }
class C{  public LocalResult(Session session,Expression[] expressions,int visibleColumnCount){  this.session=session;  if (session == null) {    this.maxMemoryRows=Integer.MAX_VALUE;  } else {    Database db=session.getDatabase();    if (db.isPersistent() && !db.isReadOnly()) {      this.maxMemoryRows=session.getDatabase().getMaxMemoryRows();    } else {      this.maxMemoryRows=Integer.MAX_VALUE;    }  }  rows=New.arrayList();  this.visibleColumnCount=visibleColumnCount;  rowId=-1;  this.expressions=expressions;}  }
class C{  public static ExpectedVersion noStream(){  return NO_STREAM;}  }
class C{  public static Builder createBuilder(Header header,WritableFontData data){  return new Builder(header,data);}  }
class C{  private final boolean lookbehindHasToken(int n){  boolean hasToken;  if ((m_queueMark - n) > 0) {    String lookbehind=(String)m_ops.m_tokenQueue.elementAt(m_queueMark - (n - 1));    char c0=(lookbehind == null) ? '|' : lookbehind.charAt(0);    hasToken=(c0 == '|') ? false : true;  } else {    hasToken=false;  }  return hasToken;}  }
class C{  @HLEFunction(nid=0xD2D615EF,version=150) public int sceKernelCancelVTimerHandler(@CheckArgument("checkVTimerID") int vtimerUid){  SceKernelVTimerInfo sceKernelVTimerInfo=vtimers.get(vtimerUid);  cancelVTimer(sceKernelVTimerInfo);  return 0;}  }
class C{  public void updateContents(){  clear();  String displayCategory=getDisplayCategory();  Display[] displays=mDisplayManager.getDisplays(displayCategory);  addAll(displays);  Log.d(TAG,"There are currently " + displays.length + " displays connected.");  for (  Display display : displays) {    Log.d(TAG,"  " + display);  }}  }
class C{  public static void ensureDirectoryExists(String dirPath){  ensureDirectoryExists(new File(dirPath));}  }
class C{  @Override protected void initListeners(){}  }
class C{  public int size(){  return tableLeft.size();}  }
class C{  private void assertReadLittleEndian64(byte[] data,long value) throws Exception {  CodedInputStream input=CodedInputStream.newInstance(data);  assertEquals(value,input.readRawLittleEndian64());  assertTrue(input.isAtEnd());  for (int blockSize=1; blockSize <= 16; blockSize*=2) {    input=CodedInputStream.newInstance(new SmallBlockInputStream(data,blockSize));    assertEquals(value,input.readRawLittleEndian64());    assertTrue(input.isAtEnd());  }}  }
class C{  public static mat4 r_mul(mat4 matA,mat4 matB){  float[] a=matA.m;  float[] b=matB.m;  mat4 result=new mat4();  result.m[0]=a[0] * b[0] + a[4] * b[1] + a[8] * b[2] + a[12] * b[3];  result.m[1]=a[1] * b[0] + a[5] * b[1] + a[9] * b[2] + a[13] * b[3];  result.m[2]=a[2] * b[0] + a[6] * b[1] + a[10] * b[2] + a[14] * b[3];  result.m[3]=a[3] * b[0] + a[7] * b[1] + a[11] * b[2] + a[15] * b[3];  result.m[4]=a[0] * b[4] + a[4] * b[5] + a[8] * b[6] + a[12] * b[7];  result.m[5]=a[1] * b[4] + a[5] * b[5] + a[9] * b[6] + a[13] * b[7];  result.m[6]=a[2] * b[4] + a[6] * b[5] + a[10] * b[6] + a[14] * b[7];  result.m[7]=a[3] * b[4] + a[7] * b[5] + a[11] * b[6] + a[15] * b[7];  result.m[8]=a[0] * b[8] + a[4] * b[9] + a[8] * b[10] + a[12] * b[11];  result.m[9]=a[1] * b[8] + a[5] * b[9] + a[9] * b[10] + a[13] * b[11];  result.m[10]=a[2] * b[8] + a[6] * b[9] + a[10] * b[10] + a[14] * b[11];  result.m[11]=a[3] * b[8] + a[7] * b[9] + a[11] * b[10] + a[15] * b[11];  result.m[12]=a[0] * b[12] + a[4] * b[13] + a[8] * b[14] + a[12] * b[15];  result.m[13]=a[1] * b[12] + a[5] * b[13] + a[9] * b[14] + a[13] * b[15];  result.m[14]=a[2] * b[12] + a[6] * b[13] + a[10] * b[14] + a[14] * b[15];  result.m[15]=a[3] * b[12] + a[7] * b[13] + a[11] * b[14] + a[15] * b[15];  return result;}  }
class C{  protected void reportMatching(CompilationUnitDeclaration unit,boolean mustResolve) throws CoreException {  MatchingNodeSet nodeSet=this.currentPossibleMatch.nodeSet;  boolean locatorMustResolve=this.patternLocator.mustResolve;  if (nodeSet.mustResolve)   this.patternLocator.mustResolve=true;  if (BasicSearchEngine.VERBOSE) {    System.out.println("Report matching: ");    int size=nodeSet.matchingNodes == null ? 0 : nodeSet.matchingNodes.elementSize;    System.out.print("	- node set: accurate=" + size);    size=nodeSet.possibleMatchingNodesSet == null ? 0 : nodeSet.possibleMatchingNodesSet.elementSize;    System.out.println(", possible=" + size);    System.out.print("	- must resolve: " + mustResolve);    System.out.print(" (locator: " + this.patternLocator.mustResolve);    System.out.println(", nodeSet: " + nodeSet.mustResolve + ')');    System.out.println("	- fine grain flags=" + JavaSearchPattern.getFineGrainFlagString(this.patternLocator.fineGrain()));  }  if (mustResolve) {    this.unitScope=unit.scope.compilationUnitScope();    Object[] nodes=nodeSet.possibleMatchingNodesSet.values;    for (int i=0, l=nodes.length; i < l; i++) {      ASTNode node=(ASTNode)nodes[i];      if (node == null)       continue;      if (node instanceof ImportReference) {        if (this.hierarchyResolver != null)         continue;        ImportReference importRef=(ImportReference)node;        Binding binding=(importRef.bits & ASTNode.OnDemand) != 0 ? this.unitScope.getImport(CharOperation.subarray(importRef.tokens,0,importRef.tokens.length),true,importRef.isStatic()) : this.unitScope.getImport(importRef.tokens,false,importRef.isStatic());        this.patternLocator.matchLevelAndReportImportRef(importRef,binding,this);      } else {        nodeSet.addMatch(node,this.patternLocator.resolveLevel(node));      }    }    nodeSet.possibleMatchingNodesSet=new SimpleSet(3);    if (BasicSearchEngine.VERBOSE) {      int size=nodeSet.matchingNodes == null ? 0 : nodeSet.matchingNodes.elementSize;      System.out.print("	- node set: accurate=" + size);      size=nodeSet.possibleMatchingNodesSet == null ? 0 : nodeSet.possibleMatchingNodesSet.elementSize;      System.out.println(", possible=" + size);    }  } else {    this.unitScope=null;  }  if (nodeSet.matchingNodes.elementSize == 0)   return;  this.methodHandles=new HashSet();  boolean matchedUnitContainer=(this.matchContainer & PatternLocator.COMPILATION_UNIT_CONTAINER) != 0;  if (unit.javadoc != null) {    ASTNode[] nodes=nodeSet.matchingNodes(unit.javadoc.sourceStart,unit.javadoc.sourceEnd);    if (nodes != null) {      if (!matchedUnitContainer) {        for (int i=0, l=nodes.length; i < l; i++)         nodeSet.matchingNodes.removeKey(nodes[i]);      } else {        IJavaElement element=createPackageDeclarationHandle(unit);        for (int i=0, l=nodes.length; i < l; i++) {          ASTNode node=nodes[i];          Integer level=(Integer)nodeSet.matchingNodes.removeKey(node);          if (encloses(element)) {            this.patternLocator.matchReportReference(node,element,null,null,null,level.intValue(),this);          }        }      }    }  }  if (matchedUnitContainer) {    ImportReference pkg=unit.currentPackage;    if (pkg != null && pkg.annotations != null) {      IJavaElement element=createPackageDeclarationHandle(unit);      if (element != null) {        reportMatching(pkg.annotations,element,null,null,nodeSet,true,encloses(element));      }    }    ImportReference[] imports=unit.imports;    if (imports != null) {      for (int i=0, l=imports.length; i < l; i++) {        ImportReference importRef=imports[i];        Integer level=(Integer)nodeSet.matchingNodes.removeKey(importRef);        if (level != null) {          this.patternLocator.matchReportImportRef(importRef,null,createImportHandle(importRef),level.intValue(),this);        }      }    }  }  TypeDeclaration[] types=unit.types;  if (types != null) {    for (int i=0, l=types.length; i < l; i++) {      if (nodeSet.matchingNodes.elementSize == 0)       return;      TypeDeclaration type=types[i];      Integer level=(Integer)nodeSet.matchingNodes.removeKey(type);      int accuracy=(level != null && matchedUnitContainer) ? level.intValue() : -1;      reportMatching(type,null,accuracy,nodeSet,1);    }  }  this.methodHandles=null;  this.bindings.removeKey(this.pattern);  this.patternLocator.mustResolve=locatorMustResolve;}  }
class C{  public List<V> values(){  return new ArrayList<>(vals);}  }
class C{  private void prepareOrder(View view){  RecyclerView orderRecycler=(RecyclerView)view.findViewById(R.id.order_recycler);  orderRecyclerAdapter=new OrderRecyclerAdapter(getActivity());  orderRecycler.setAdapter(orderRecyclerAdapter);  orderRecycler.setLayoutManager(new LinearLayoutManager(orderRecycler.getContext()));  orderRecycler.setItemAnimator(new DefaultItemAnimator());  orderRecycler.setHasFixedSize(true);  orderRecycler.addItemDecoration(new RecyclerMarginDecorator(getResources().getDimensionPixelSize(R.dimen.base_margin)));}  }
class C{  public boolean canImport(JComponent comp,DataFlavor[] flavors){  JTextComponent c=(JTextComponent)comp;  if (!(c.isEditable() && c.isEnabled()))   return false;  return (getImportFlavor(flavors,c) != null);}  }
class C{  public final int skipBytes(int n) throws IOException {  int total=0;  int cur=0;  while ((total < n) && ((cur=(int)in.skip(n - total)) > 0)) {    total+=cur;  }  return total;}  }
class C{  public boolean arePlayerAchievementsLoaded(){  return reachedAchievements != null;}  }
class C{  private int computeDist(int i,int j,int numvert){  int less, gt;  if (i < j) {    less=i;    gt=j;  } else {    less=j;    gt=i;  }  return (random(less * numvert + gt) % RANGE) + 1;}  }
class C{  private boolean isCheckThatUnedited(){  return checkThatUnedited;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private boolean hasValidUserInContext(){  if ((sc != null) && (sc.getUserPrincipal() instanceof StorageOSUser)) {    return true;  } else {    return false;  }}  }
class C{  public static float[] toFloatArray(double[] array){  float[] result=new float[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(float)array[i];  }  return result;}  }
class C{  public static double[] convertFloatsToDoubles(float[] input,double[] output){  if (input == null || output == null)   return output;  for (int i=0; i < input.length; ++i) {    output[i]=(double)input[i];  }  return output;}  }
class C{  private static void checkMouseLocation(){  PointerInfo info=MouseInfo.getPointerInfo();  if (info == null) {    return;  }  Point currentLocation=info.getLocation();  if (lastLocation != null && !lastLocation.equals(currentLocation)) {    lastMoved=System.currentTimeMillis();    triggerActivity();  }  lastLocation=currentLocation;}  }
class C{  public static Method findMethod(Class clazz,String name,String desc){  Method m=findMethod2(clazz,name,desc);  if (m == null)   error(clazz,name,desc);  return m;}  }
class C{  private void repaintLine(LineHighlightInfo lhi){  int offs=lhi.getOffset();  if (offs >= 0 && offs <= textArea.getDocument().getLength()) {    try {      int y=textArea.yForLineContaining(offs);      if (y > -1) {        textArea.repaint(0,y,textArea.getWidth(),textArea.getLineHeight());      }    } catch (    BadLocationException ble) {      ble.printStackTrace();    }  }}  }
class C{  public void write(LineMap lineMap) throws IOException {  _os.println("SMAP");  _os.println(lineMap.getDestFilename());  _os.println(_sourceType);  _os.println("*S " + _sourceType);  IntMap fileMap=new IntMap();  _os.println("*F");  Iterator<LineMap.Line> iter=lineMap.iterator();  while (iter.hasNext()) {    LineMap.Line line=iter.next();    String filename=line.getSourceFilename();    int index=fileMap.get(filename);    if (index < 0) {      index=fileMap.size() + 1;      fileMap.put(filename,index);      if (filename.indexOf('/') >= 0) {        int p=filename.lastIndexOf('/');        _os.println("+ " + index + " "+ filename.substring(p + 1));        if (filename.startsWith("/"))         _os.println(filename.substring(1)); else         _os.println(filename);      } else       _os.println(index + " " + filename);    }  }  _os.println("*L");  int size=lineMap.size();  int lastIndex=0;  for (int i=0; i < size; i++) {    LineMap.Line line=lineMap.get(i);    String filename=line.getSourceFilename();    int index=fileMap.get(filename);    String fileMarker="";    _os.print(line.getSourceLine());    _os.print("#" + index);    if (line.getRepeatCount() > 1)     _os.print("," + line.getRepeatCount());    _os.print(":");    _os.print(line.getDestinationLine());    if (line.getDestinationIncrement() > 1)     _os.print("," + line.getDestinationIncrement());    _os.println();  }  _os.println("*E");}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.SETTER_DECLARATION__FPAR:    return basicSetFpar(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public UF2(int numberOfVariables){  super(numberOfVariables,2);}  }
class C{  protected void loadDataset(String datasetFile) throws RDFParseException, RepositoryException, IOException {  logger.debug("loading dataset...");  InputStream dataset=SPARQLUpdateTest.class.getResourceAsStream(datasetFile);  try {    con.add(dataset,"",RDFFormat.forFileName(datasetFile));    con.commit();  }  finally {    dataset.close();  }  logger.debug("dataset loaded.");}  }
class C{  public synchronized void close(){  this.notifyAll();}  }
class C{  @Override public void create(){  DefaultScreenConfiguration.initializeInstance();  ScreenSwitch.initialize(this);  ScreenSwitch.getInstance().setLoadingScreen();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void start(){  long pollingPeriod=mRcsSettings.getCapabilityPollingPeriod();  if (pollingPeriod == 0) {    return;  }  startTimer(System.currentTimeMillis(),pollingPeriod);}  }
class C{  @Override public void keyReleased(KeyEvent e){  if (lastPressedKey != e.getKeyCode()) {    e.consume();    return;  }  lastPressedKey=0;  if (e.getModifiers() == 0) {switch (e.getKeyCode()) {case KeyEvent.VK_ENTER:case KeyEvent.VK_SPACE:      TreePath path=getSelectionPath();    if (path == null) {      return;    }  Entry entry=(Entry)path.getLastPathComponent();if (entry instanceof Folder) {  if (isExpanded(path)) {    collapsePath(path);  } else {    expandPath(path);  }} else {  fireLocationSelected((Entry)path.getLastPathComponent());}e.consume();break;}}}  }
class C{  public void onCancelBrokerData(Contract contract){  for (  Tradestrategy tradestrategy : m_historyDataRequests.values()) {    if (contract.equals(tradestrategy.getContract())) {      contract.removeTradestrategy(tradestrategy);      m_client.removeBackTestBroker(tradestrategy.getId());synchronized (m_historyDataRequests) {        m_historyDataRequests.remove(tradestrategy.getId());        m_historyDataRequests.notify();      }    }  }}  }
class C{  public static byte[] keyGenPublic(byte[] privateKey){  byte[] publicKey=new byte[32];  curve_sigs.curve25519_keygen(publicKey,privateKey);  return publicKey;}  }
class C{  @Override public void computeCompletionProposals(TextEditor textEditor,int offset,CodeAssistCallback codeAssistCallback){  if (textEditor.getSelectedLinearRange().getLength() > 0) {    codeAssistCallback.proposalComputed(null);    return;  }  AngularJSQuery query=getQuery(textEditor);  if (query.getPrefix() == null) {    codeAssistCallback.proposalComputed(null);    return;  }  InvocationContext invocationContext=new InvocationContext(query,offset,angularJSResources,textEditor);  List<AngularJSCompletionProposal> completionProposals=AngularJSTrie.findAndFilterAutocompletions(query);  codeAssistCallback.proposalComputed(jsToList(completionProposals,invocationContext));}  }
class C{  public final Session loadSession(final int id){  Session session=null;  final Cursor cursor=contentResolver.query(ContentUris.withAppendedId(ContentProvider.CONTENT_URI_SESSION,id),null,null,null,null);  if (cursor.moveToNext()) {    session=new Session(cursor.getInt(cursor.getColumnIndex(Schema.COL_ID)),cursor.getLong(cursor.getColumnIndex(Schema.COL_CREATED_AT)),cursor.getLong(cursor.getColumnIndex(Schema.COL_LAST_UPDATED)),cursor.getString(cursor.getColumnIndex(Schema.COL_DESCRIPTION)),cursor.getInt(cursor.getColumnIndex(Schema.COL_HAS_BEEN_EXPORTED)),cursor.getInt(cursor.getColumnIndex(Schema.COL_IS_ACTIVE)),cursor.getInt(cursor.getColumnIndex(Schema.COL_NUMBER_OF_CELLS)),cursor.getInt(cursor.getColumnIndex(Schema.COL_NUMBER_OF_WIFIS)),cursor.getInt(cursor.getColumnIndex(Schema.COL_NUMBER_OF_WAYPOINTS)));  }  cursor.close();  return session;}  }
class C{  public boolean isImmediateAuth(){  return _immediateAuth;}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  writer.constValueIndex(getValue());}  }
class C{  public Future<?> execute(CameraCommand command){  if (mClosed) {    return Futures.immediateFuture(null);  }synchronized (mLock) {    if (mExecutor == null) {      mExecutor=mExecutorProvider.get();    }    checkNotNull(mExecutor);    return mExecutor.submit(new CommandRunnable(command));  }}  }
class C{  public static org.oscm.internal.vo.VOLocalizedText convertToUp(org.oscm.vo.VOLocalizedText oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOLocalizedText newVO=new org.oscm.internal.vo.VOLocalizedText();  newVO.setLocale(oldVO.getLocale());  newVO.setText(oldVO.getText());  newVO.setVersion(oldVO.getVersion());  return newVO;}  }
class C{  @Override public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>(3);  newVector.addElement("measureTreeSize");  newVector.addElement("measureNumLeaves");  newVector.addElement("measureNumRules");  return newVector.elements();}  }
