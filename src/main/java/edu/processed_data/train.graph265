class C{  @Override public IChunkedStriterator<I,E> addFilter(final IFilter<I,?,E> filter){  return (IChunkedStriterator<I,E>)super.addFilter(filter);}  }
class C{  public int nextNode(){  if (m_foundLast)   return DTM.NULL;  int earliestNode=DTM.NULL;  if (null != m_iterators) {    int n=m_iterators.length;    int iteratorUsed=-1;    for (int i=0; i < n; i++) {      int node=m_iterators[i].getCurrentNode();      if (DTM.NULL == node)       continue; else       if (DTM.NULL == earliestNode) {        iteratorUsed=i;        earliestNode=node;      } else {        if (node == earliestNode) {          m_iterators[i].nextNode();        } else {          DTM dtm=getDTM(node);          if (dtm.isNodeAfter(node,earliestNode)) {            iteratorUsed=i;            earliestNode=node;          }        }      }    }    if (DTM.NULL != earliestNode) {      m_iterators[iteratorUsed].nextNode();      incrementCurrentPos();    } else     m_foundLast=true;  }  m_lastFetched=earliestNode;  return earliestNode;}  }
class C{  private void replaceTop(Scope topOfStack){  stack.set(stack.size() - 1,topOfStack);}  }
class C{  public static VAlarm procedure(Trigger trigger,String path){  VAlarm alarm=new VAlarm(Action.procedure(),trigger);  alarm.setDescription(path);  return alarm;}  }
class C{  public static ViewAction swipeUpSlow(){  return actionWithAssertions(new GeneralSwipeAction(Swipe.SLOW,translate(GeneralLocation.BOTTOM_CENTER,0,-EDGE_FUZZ_FACTOR),GeneralLocation.TOP_CENTER,Press.FINGER));}  }
class C{  public boolean epsilonEquals(AxisAngle4f a1,float epsilon){  float diff;  diff=x - a1.x;  if ((diff < 0 ? -diff : diff) > epsilon)   return false;  diff=y - a1.y;  if ((diff < 0 ? -diff : diff) > epsilon)   return false;  diff=z - a1.z;  if ((diff < 0 ? -diff : diff) > epsilon)   return false;  diff=angle - a1.angle;  if ((diff < 0 ? -diff : diff) > epsilon)   return false;  return true;}  }
class C{  public Cuboid(Vector3D min,Vector3D max){  this.min=min;  this.max=max;}  }
class C{  private static void addToNode(ArrayDeque<FilterValueSetParam> remainingParameters,FilterHandle filterCallback,FilterHandleSetNode currentNode,ArrayDeque<EventTypeIndexBuilderIndexLookupablePair> treePathInfo,FilterServiceGranularLockFactory lockFactory){  if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {    log.debug(".addToNode (" + Thread.currentThread().getId() + ") Adding filterCallback, node="+ currentNode+ "  remainingParameters="+ printRemainingParameters(remainingParameters));  }  if (remainingParameters.isEmpty()) {    currentNode.getNodeRWLock().writeLock().lock();    try {      currentNode.add(filterCallback);    }  finally {      currentNode.getNodeRWLock().writeLock().unlock();    }    return;  }  currentNode.getNodeRWLock().readLock().lock();  Pair<FilterValueSetParam,FilterParamIndexBase> pair;  try {    pair=IndexHelper.findIndex(remainingParameters,currentNode.getIndizes());    if (pair != null) {      remainingParameters.remove(pair.getFirst());      Object filterForValue=pair.getFirst().getFilterForValue();      FilterParamIndexBase index=pair.getSecond();      treePathInfo.add(new EventTypeIndexBuilderIndexLookupablePair(index,filterForValue));      addToIndex(remainingParameters,filterCallback,index,filterForValue,treePathInfo,lockFactory);      return;    }  }  finally {    currentNode.getNodeRWLock().readLock().unlock();  }  currentNode.getNodeRWLock().writeLock().lock();  try {    pair=IndexHelper.findIndex(remainingParameters,currentNode.getIndizes());    if (pair != null) {      remainingParameters.remove(pair.getFirst());      Object filterForValue=pair.getFirst().getFilterForValue();      FilterParamIndexBase index=pair.getSecond();      treePathInfo.add(new EventTypeIndexBuilderIndexLookupablePair(index,filterForValue));      addToIndex(remainingParameters,filterCallback,index,filterForValue,treePathInfo,lockFactory);      return;    }    FilterValueSetParam parameterPickedForIndex=remainingParameters.removeFirst();    FilterParamIndexBase index=IndexFactory.createIndex(parameterPickedForIndex.getLookupable(),lockFactory,parameterPickedForIndex.getFilterOperator());    currentNode.getIndizes().add(index);    treePathInfo.add(new EventTypeIndexBuilderIndexLookupablePair(index,parameterPickedForIndex.getFilterForValue()));    addToIndex(remainingParameters,filterCallback,index,parameterPickedForIndex.getFilterForValue(),treePathInfo,lockFactory);  }  finally {    currentNode.getNodeRWLock().writeLock().unlock();  }}  }
class C{  public TransportAddress applyXor(byte[] xorMask){  return applyXor(getAddress(),xorMask);}  }
class C{  public static Literal compute(Literal leftLit,Literal rightLit,MathOp op) throws ValueExprEvaluationException {  final ValueFactory vf=SimpleValueFactory.getInstance();  IRI leftDatatype=leftLit.getDatatype();  IRI rightDatatype=rightLit.getDatatype();  if (!XMLDatatypeUtil.isNumericDatatype(leftDatatype)) {    throw new ValueExprEvaluationException("Not a number: " + leftLit);  }  if (!XMLDatatypeUtil.isNumericDatatype(rightDatatype)) {    throw new ValueExprEvaluationException("Not a number: " + rightLit);  }  IRI commonDatatype;  if (leftDatatype.equals(XMLSchema.DOUBLE) || rightDatatype.equals(XMLSchema.DOUBLE)) {    commonDatatype=XMLSchema.DOUBLE;  } else   if (leftDatatype.equals(XMLSchema.FLOAT) || rightDatatype.equals(XMLSchema.FLOAT)) {    commonDatatype=XMLSchema.FLOAT;  } else   if (leftDatatype.equals(XMLSchema.DECIMAL) || rightDatatype.equals(XMLSchema.DECIMAL)) {    commonDatatype=XMLSchema.DECIMAL;  } else   if (op == MathOp.DIVIDE) {    commonDatatype=XMLSchema.DECIMAL;  } else {    commonDatatype=XMLSchema.INTEGER;  }  try {    if (commonDatatype.equals(XMLSchema.DOUBLE)) {      double left=leftLit.doubleValue();      double right=rightLit.doubleValue();switch (op) {case PLUS:        return vf.createLiteral(left + right);case MINUS:      return vf.createLiteral(left - right);case MULTIPLY:    return vf.createLiteral(left * right);case DIVIDE:  return vf.createLiteral(left / right);default :throw new IllegalArgumentException("Unknown operator: " + op);}} else if (commonDatatype.equals(XMLSchema.FLOAT)) {float left=leftLit.floatValue();float right=rightLit.floatValue();switch (op) {case PLUS:return vf.createLiteral(left + right);case MINUS:return vf.createLiteral(left - right);case MULTIPLY:return vf.createLiteral(left * right);case DIVIDE:return vf.createLiteral(left / right);default :throw new IllegalArgumentException("Unknown operator: " + op);}} else if (commonDatatype.equals(XMLSchema.DECIMAL)) {BigDecimal left=leftLit.decimalValue();BigDecimal right=rightLit.decimalValue();switch (op) {case PLUS:return vf.createLiteral(left.add(right));case MINUS:return vf.createLiteral(left.subtract(right));case MULTIPLY:return vf.createLiteral(left.multiply(right));case DIVIDE:BigDecimal result=null;try {result=left.divide(right,MathContext.UNLIMITED);} catch (ArithmeticException e) {result=left.setScale(getDecimalExpansionScale(),RoundingMode.HALF_UP).divide(right,RoundingMode.HALF_UP);}return vf.createLiteral(result);default :throw new IllegalArgumentException("Unknown operator: " + op);}} else {BigInteger left=leftLit.integerValue();BigInteger right=rightLit.integerValue();switch (op) {case PLUS:return vf.createLiteral(left.add(right));case MINUS:return vf.createLiteral(left.subtract(right));case MULTIPLY:return vf.createLiteral(left.multiply(right));case DIVIDE:throw new RuntimeException("Integer divisions should be processed as decimal divisions");default :throw new IllegalArgumentException("Unknown operator: " + op);}}} catch (NumberFormatException e) {throw new ValueExprEvaluationException(e);}catch (ArithmeticException e) {throw new ValueExprEvaluationException(e);}}  }
class C{  public float establishBenchmark(){  return establishBenchmark(2);}  }
class C{  public InputVenueMessageContent build(){  return new InputVenueMessageContent(latitude,longitude,title,address,foursquare_id);}  }
class C{  public static void printSizes(Component c){  System.out.println("minimumSize = " + c.getMinimumSize());  System.out.println("preferredSize = " + c.getPreferredSize());  System.out.println("maximumSize = " + c.getMaximumSize());}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override protected String doTask() throws Exception {  ran.compareAndSet(false,true);  return getOnlyResource();}  }
class C{  public static LogoutResponse createSamlLogoutResponse(String issuerVal,String inResponseTo,String where,String status,String substatus,String message){  log.info("SP Creating SAML Logout Response in response to:" + inResponseTo + ", destination: "+ where);  log.info("SP Creating SAML Logout Response status:" + status + ", substatus: "+ substatus+ ", message:"+ message);  Validate.notNull(where,"destination is null");  if (status == null) {    status=SamlNames.SUCCESS;  }  LogoutResponse response=create(LogoutResponse.class,LogoutResponse.DEFAULT_ELEMENT_NAME);  response.setID(SamlUtils.generator.generateIdentifier());  if (inResponseTo != null) {    response.setInResponseTo(inResponseTo);  }  if (issuerVal != null) {    IssuerBuilder issuerBuilder=new IssuerBuilder();    Issuer issuer=issuerBuilder.buildObject(SamlNames.ASSERTION,"Issuer","samlp");    issuer.setValue(issuerVal);    response.setIssuer(issuer);  }  response.setVersion(SAMLVersion.VERSION_20);  DateTime now=new DateTime();  response.setIssueInstant(now);  response.setDestination(where);  Status samlStatus=spawnStatus(status,substatus,message);  response.setStatus(samlStatus);  return response;}  }
class C{  public WikipediaAccess(final String title){  this.title=title;}  }
class C{  public DrawerBuilder withSliderBackgroundColor(@ColorInt int sliderBackgroundColor){  this.mSliderBackgroundColor=sliderBackgroundColor;  return this;}  }
class C{  public void loadComponentShapeFromTemplate(IDIYComponent<?> component,Template template){  if (template != null && template.getPoints() != null && template.getPoints().size() >= component.getControlPointCount()) {    for (int i=0; i < component.getControlPointCount(); i++) {      Point p=new Point(component.getControlPoint(0));      p.translate(template.getPoints().get(i).x,template.getPoints().get(i).y);      component.setControlPoint(p,i);    }  }}  }
class C{  public void parse(InputStream is) throws Exception {  LOG.trace("parse()");  String baseContentType=HttpFields.valueParameters(contentType,null);  if (faultAllowed && baseContentType.equalsIgnoreCase(TEXT_XML)) {    parseFault(is);  } else   if (baseContentType.equalsIgnoreCase(MULTIPART_MIXED)) {    parseMultipart(is);  } else {    throw new CodedException(X_INVALID_CONTENT_TYPE,"Invalid content type: %s",baseContentType);  }}  }
class C{  public static void rollbackAndClose(Connection conn) throws SQLException {  if (conn != null) {    try {      conn.rollback();    }  finally {      conn.close();    }  }}  }
class C{  public static <T>AssociationNullPredicate<T> isNull(Association<T> association){  return new AssociationNullPredicate<>(association(association));}  }
class C{  public Node previousNode() throws DOMException {  if (!m_cacheNodes)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_CANNOT_ITERATE,null));  if ((m_next - 1) > 0) {    m_next--;    return this.elementAt(m_next);  } else   return null;}  }
class C{  public void readData(DataInput din) throws IOException {}  }
class C{  public static void destroy(){  try {    Region region1=cache.getRegion("/HARegionQueueDUnitTest_region");    region1.localDestroy("key-1");  } catch (  Exception e) {    fail("test failed due to exception in destroy",e);  }}  }
class C{  public static double raw(){  return RandEngine.raw();}  }
class C{  public static ExprTableAccessNode checkTableNameGetExprForProperty(TableService tableService,String propertyName){  int index=ASTUtil.unescapedIndexOfDot(propertyName);  if (index == -1) {    if (tableService.getTableMetadata(propertyName) != null) {      return new ExprTableAccessNodeTopLevel(propertyName);    }    return null;  }  String tableName=ASTUtil.unescapeDot(propertyName.substring(0,index));  if (tableService.getTableMetadata(tableName) == null) {    return null;  }  String sub=propertyName.substring(index + 1,propertyName.length());  return new ExprTableAccessNodeSubprop(tableName,sub);}  }
class C{  public void select(OMGraphicList list){  if (list != null && !list.isEmpty()) {    OMGraphic omg=list.getOMGraphicAt(0);    if (drawingTool != null && drawingTool.canEdit(omg.getClass())) {      drawingTool.setBehaviorMask(OMDrawingTool.QUICK_CHANGE_BEHAVIOR_MASK);      if (drawingTool.edit(omg,this) == null) {        fireRequestInfoLine("Can't figure out how to modify this object.");      }    }  }}  }
class C{  public static boolean endsWithJavadoc(StringBuilder usercode){  Matcher matcher=JAVADOC_COMMENT_AND_MAYBE_ANNOTATIONS_PATTERN.matcher(usercode);  return matcher.matches() && !matcher.group(1).contains("*/");}  }
class C{  public Component add(Component component){  gridbag.setConstraints(component,c);  return super.add(component);}  }
class C{  public boolean isWarning(){  return fSeverity == RefactoringStatus.WARNING;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void computeNextProducts(){  Eviction eviction=evictionDao.getEviction();  if (eviction == null) {    logger.warn("No Eviction setting found.");    return;  }  Set<Product> products=eviction.getStrategy().getProductsToEvict(eviction);  evictionDao.setProducts(products);}  }
class C{  private boolean isValidParentId(int parentId,String entidad) throws Exception {  String tblName, qual=null;  boolean valid=false;  int count=0;  DirsTable table=new DirsTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    tblName=table.getDirTableName();    qual=table.getLoadDirQual(parentId);    if (parentId == 0)     valid=true; else {      count=DbSelectFns.selectCount(dbConn,tblName,qual);      if (count > 0)       valid=true;    }  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return valid;}  }
class C{  public void display(){  if (GenInputsAbstract.progressinterval == -1)   return;  display(message());}  }
class C{  private void println(int logLevel,String format,Object... args){  if (logLevel < XLog.sLogLevel) {    return;  }  printlnInternal(logLevel,formatArgs(format,args));}  }
class C{  private void configureSocket(Socket sock,Properties props) throws SocketException, IOException {  sock.setTcpNoDelay(Boolean.valueOf(props.getProperty(TCP_NO_DELAY_PROPERTY_NAME,TCP_NO_DELAY_DEFAULT_VALUE)).booleanValue());  String keepAlive=props.getProperty(TCP_KEEP_ALIVE_PROPERTY_NAME,TCP_KEEP_ALIVE_DEFAULT_VALUE);  if (keepAlive != null && keepAlive.length() > 0) {    sock.setKeepAlive(Boolean.valueOf(keepAlive).booleanValue());  }  int receiveBufferSize=Integer.parseInt(props.getProperty(TCP_RCV_BUF_PROPERTY_NAME,TCP_RCV_BUF_DEFAULT_VALUE));  if (receiveBufferSize > 0) {    sock.setReceiveBufferSize(receiveBufferSize);  }  int sendBufferSize=Integer.parseInt(props.getProperty(TCP_SND_BUF_PROPERTY_NAME,TCP_SND_BUF_DEFAULT_VALUE));  if (sendBufferSize > 0) {    sock.setSendBufferSize(sendBufferSize);  }  int trafficClass=Integer.parseInt(props.getProperty(TCP_TRAFFIC_CLASS_PROPERTY_NAME,TCP_TRAFFIC_CLASS_DEFAULT_VALUE));  if (trafficClass > 0) {    sock.setTrafficClass(trafficClass);  }}  }
class C{  public static double smallNumber(){  if (smallNumber == 0)   smallNumber=Math.sqrt(getSmallestNumber());  return smallNumber;}  }
class C{  public void deleteSubCollection(final String id) throws IOException {  final Subcollection subCol=getSubColection(id);  if (subCol != null) {    collectionMap.remove(id);  }}  }
class C{  private void addRecoveryStatusListener(){  try {    coordinator.getCoordinatorClient().addNodeListener(new RecoveryStatusListener());  } catch (  Exception e) {    log.error("Fail to add recovery status listener",e);    throw APIException.internalServerErrors.addListenerFailed();  }}  }
class C{  public void put(double val,double weight){  if (m1 == Double.POSITIVE_INFINITY || m1 == Double.NEGATIVE_INFINITY) {    m1+=val;    n+=1.;    return;  }  final double nwsum=weight + n;  final double delta=val - m1;  final double rval=delta * weight / nwsum;  m1+=rval;  n=nwsum;}  }
class C{  public boolean isSOTrx(){  Object oo=get_Value(COLUMNNAME_IsSOTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public synchronized Map<String,Integer> receivedMessages(){  return new HashMap<>(rcvdMsgs);}  }
class C{  private static void sendPackets(PacketStreamer.Client client,short numPackets,OFMessageType ofType,boolean sync) throws TException {  while (numPackets-- > 0) {    Message msg=new Message();    Packet packet=new Packet();    List<String> sids=new ArrayList<String>();    sids.add("session1");    sids.add("session2");    msg.setSessionIDs(sids);    packet.setMessageType(ofType);    long sw_dpid=numPackets / 40 + 1;    packet.setSwPortTuple(new SwitchPortTuple(sw_dpid,(short)(numPackets - (sw_dpid - 1) * 40)));    String strData="New data, sequence " + numPackets;    packet.setData(strData.getBytes());    msg.setPacket(packet);    try {      if (sync) {        client.pushMessageSync(msg);        log.debug("Send packet sync: " + msg.toString());      } else {        client.pushMessageAsync(msg);        log.debug("Send packet sync: " + msg.toString());      }    } catch (    TTransportException e) {      log.error(e.toString());    }    try {      Thread.sleep(100);    } catch (    Exception e) {    }  }}  }
class C{  public Iterator fieldValuesIterator(){  return this.contents.iterator();}  }
class C{  public static void deleteTex(final int hTex){  if (DEBUG)   Log.v(TAG,"deleteTex:");  final int[] tex=new int[]{hTex};  GLES20.glDeleteTextures(1,tex,0);}  }
class C{  public static String toString(byte[] array){  if (array == null) {    return NULL;  }  StringBuilder sb=new StringBuilder();  for (int i=0; i < array.length; i++) {    if (i != 0) {      sb.append(',');    }    sb.append(array[i]);  }  return sb.toString();}  }
class C{  public String dest(String srcCollection){  String destCollection=mapCollectionName(srcCollection,true);  logger.info("Mapped Src:" + srcCollection + " --> Dst:"+ destCollection);  return destCollection;}  }
class C{  @SuppressWarnings("fallthrough") public void applyPattern(String pattern){  StringBuilder[] segments=new StringBuilder[4];  segments[SEG_RAW]=new StringBuilder();  int part=SEG_RAW;  int formatNumber=0;  boolean inQuote=false;  int braceStack=0;  maxOffset=-1;  for (int i=0; i < pattern.length(); ++i) {    char ch=pattern.charAt(i);    if (part == SEG_RAW) {      if (ch == '\'') {        if (i + 1 < pattern.length() && pattern.charAt(i + 1) == '\'') {          segments[part].append(ch);          ++i;        } else {          inQuote=!inQuote;        }      } else       if (ch == '{' && !inQuote) {        part=SEG_INDEX;        if (segments[SEG_INDEX] == null) {          segments[SEG_INDEX]=new StringBuilder();        }      } else {        segments[part].append(ch);      }    } else {      if (inQuote) {        segments[part].append(ch);        if (ch == '\'') {          inQuote=false;        }      } else {switch (ch) {case ',':          if (part < SEG_MODIFIER) {            if (segments[++part] == null) {              segments[part]=new StringBuilder();            }          } else {            segments[part].append(ch);          }        break;case '{':      ++braceStack;    segments[part].append(ch);  break;case '}':if (braceStack == 0) {  part=SEG_RAW;  makeFormat(i,formatNumber,segments);  formatNumber++;  segments[SEG_INDEX]=null;  segments[SEG_TYPE]=null;  segments[SEG_MODIFIER]=null;} else {  --braceStack;  segments[part].append(ch);}break;case ' ':if (part != SEG_TYPE || segments[SEG_TYPE].length() > 0) {segments[part].append(ch);}break;case '\'':inQuote=true;default :segments[part].append(ch);break;}}}}if (braceStack == 0 && part != 0) {maxOffset=-1;throw new IllegalArgumentException("Unmatched braces in the pattern.");}this.pattern=segments[0].toString();}  }
class C{  final boolean isVolatile(){  return Modifier.isVolatile(getModifiers());}  }
class C{  public AuthorityKeyIdentifierExtension(Boolean critical,Object value) throws IOException {  this.extensionId=PKIXExtensions.AuthorityKey_Id;  this.critical=critical.booleanValue();  this.extensionValue=(byte[])value;  DerValue val=new DerValue(this.extensionValue);  if (val.tag != DerValue.tag_Sequence) {    throw new IOException("Invalid encoding for " + "AuthorityKeyIdentifierExtension.");  }  while ((val.data != null) && (val.data.available() != 0)) {    DerValue opt=val.data.getDerValue();    if (opt.isContextSpecific(TAG_ID) && !opt.isConstructed()) {      if (id != null)       throw new IOException("Duplicate KeyIdentifier in " + "AuthorityKeyIdentifier.");      opt.resetTag(DerValue.tag_OctetString);      id=new KeyIdentifier(opt);    } else     if (opt.isContextSpecific(TAG_NAMES) && opt.isConstructed()) {      if (names != null)       throw new IOException("Duplicate GeneralNames in " + "AuthorityKeyIdentifier.");      opt.resetTag(DerValue.tag_Sequence);      names=new GeneralNames(opt);    } else     if (opt.isContextSpecific(TAG_SERIAL_NUM) && !opt.isConstructed()) {      if (serialNum != null)       throw new IOException("Duplicate SerialNumber in " + "AuthorityKeyIdentifier.");      opt.resetTag(DerValue.tag_Integer);      serialNum=new SerialNumber(opt);    } else     throw new IOException("Invalid encoding of " + "AuthorityKeyIdentifierExtension.");  }}  }
class C{  public static double xlogx(int c){  if (c == 0) {    return 0.0;  }  return c * Utils.log2((double)c);}  }
class C{  public static boolean join(Iterable<? extends GridWorker> ws,IgniteLogger log){  boolean retval=true;  if (ws != null)   for (  GridWorker w : ws)   if (!join(w,log))   retval=false;  return retval;}  }
class C{  public void addKdContainer(int index,KdistanceContainer kd){  this.listOfkDContainers.add(index,kd);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public <R>Promise<R> zipPromise(final ListFunction<T,Promise<R>> fuc){  return new Promise<>(null);}  }
class C{  public final void sendRequest() throws IOException {  if (responseSource != null) {    return;  }  prepareRawRequestHeaders();  initResponseSource();  OkResponseCache responseCache=client.getOkResponseCache();  if (responseCache != null) {    responseCache.trackResponse(responseSource);  }  if (requestHeaders.isOnlyIfCached() && responseSource.requiresConnection()) {    if (responseSource == ResponseSource.CONDITIONAL_CACHE) {      Util.closeQuietly(cachedResponseBody);    }    this.responseSource=ResponseSource.CACHE;    this.cacheResponse=GATEWAY_TIMEOUT_RESPONSE;    RawHeaders rawResponseHeaders=RawHeaders.fromMultimap(cacheResponse.getHeaders(),true);    setResponse(new ResponseHeaders(uri,rawResponseHeaders),cacheResponse.getBody());  }  if (responseSource.requiresConnection()) {    sendSocketRequest();  } else   if (connection != null) {    client.getConnectionPool().recycle(connection);    connection=null;  }}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public static Operation sendRequestAndWait(ServiceHost host,Operation requestedOperation,String referrer) throws TimeoutException, DocumentNotFoundException, BadRequestException, InterruptedException {  OperationLatch syncOp=new OperationLatch(requestedOperation);  if (requestedOperation.getReferer() == null) {    requestedOperation.setReferer(UriUtils.buildUri(host,referrer));  }  host.sendRequest(requestedOperation);  Operation completedOperation=syncOp.awaitOperationCompletion();  return OperationUtils.handleCompletedOperation(requestedOperation,completedOperation);}  }
class C{  public void parseHousehold(String filename){  Counter counter=new Counter("  households # ");  BufferedReader br=IOUtils.getBufferedReader(filename);  try {    String line=br.readLine();    while ((line=br.readLine()) != null) {      String[] sa=line.split(",");      int enu=Integer.parseInt(sa[0]);      int hhNo=Integer.parseInt(sa[1]);      String zone=sa[2];      String subzone=sa[3];      Integer numberOfPeople=Integer.parseInt(sa[4]);      Integer cars=Integer.parseInt(sa[5]);      Income income=IncomeTravelSurvey2004.getIncome(IncomeTravelSurvey2004.parseIncomeFromSurveyCode(sa[6]));      Id<Household> id=Id.create(String.format("%03d%03d",enu,hhNo),Household.class);      Household hh=sc.getHouseholds().getFactory().createHousehold(id);      hh.setIncome(income);      sc.getHouseholds().getHouseholdAttributes().putAttribute(id.toString(),"zone",zone);      sc.getHouseholds().getHouseholdAttributes().putAttribute(id.toString(),"subzone",subzone);      sc.getHouseholds().getHouseholdAttributes().putAttribute(id.toString(),"noOfPeopleInterviewed",numberOfPeople);      sc.getHouseholds().getHouseholdAttributes().putAttribute(id.toString(),"numberOfVehicles",cars);      sc.getHouseholds().getHouseholds().put(id,hh);      counter.incCounter();    }  } catch (  IOException e) {    throw new RuntimeException("Could not read from BufferedReader for " + filename);  } finally {    try {      br.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedReader for " + filename);    }  }  counter.printCounter();}  }
class C{  public void put(String key,InputStream stream){  put(key,stream,null);}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {  try {    write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));  } catch (  org.apache.thrift.TException te) {    throw new java.io.IOException(te);  }}  }
class C{  public static Script createMultiSigOutputScript(int threshold,List<ECKey> pubkeys){  checkArgument(threshold > 0);  checkArgument(threshold <= pubkeys.size());  checkArgument(pubkeys.size() <= 16);  ScriptBuilder builder=new ScriptBuilder();  builder.smallNum(threshold);  for (  ECKey key : pubkeys) {    builder.data(key.getPubKey());  }  builder.smallNum(pubkeys.size());  builder.op(OP_CHECKMULTISIG);  return builder.build();}  }
class C{  public boolean supportsCustomEditor(){  return true;}  }
class C{  private static List<LoadMetadataDetails> identifySegmentsToBeMergedBasedOnLoadedDate(List<LoadMetadataDetails> listOfSegmentsBelowThresholdSize){  List<LoadMetadataDetails> loadsOfSameDate=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  long numberOfDaysAllowedToMerge=0;  try {    numberOfDaysAllowedToMerge=Long.parseLong(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.DAYS_ALLOWED_TO_COMPACT,CarbonCommonConstants.DEFAULT_DAYS_ALLOWED_TO_COMPACT));    if (numberOfDaysAllowedToMerge < 0 || numberOfDaysAllowedToMerge > 100) {      LOGGER.error("The specified value for property " + CarbonCommonConstants.DAYS_ALLOWED_TO_COMPACT + " is incorrect."+ " Correct value should be in range of 0 -100. Taking the default value.");      numberOfDaysAllowedToMerge=Long.parseLong(CarbonCommonConstants.DEFAULT_DAYS_ALLOWED_TO_COMPACT);    }  } catch (  NumberFormatException e) {    numberOfDaysAllowedToMerge=Long.parseLong(CarbonCommonConstants.DEFAULT_DAYS_ALLOWED_TO_COMPACT);  }  if (numberOfDaysAllowedToMerge > 0) {    boolean first=true;    Date segDate1=null;    SimpleDateFormat sdf=new SimpleDateFormat(CarbonCommonConstants.CARBON_TIMESTAMP);    for (    LoadMetadataDetails segment : listOfSegmentsBelowThresholdSize) {      if (first) {        segDate1=initializeFirstSegment(loadsOfSameDate,segment,sdf);        first=false;        continue;      }      String segmentDate=segment.getLoadStartTime();      Date segDate2=null;      try {        segDate2=sdf.parse(segmentDate);      } catch (      ParseException e) {        LOGGER.error("Error while parsing segment start time" + e.getMessage());      }      if (isTwoDatesPresentInRequiredRange(segDate1,segDate2,numberOfDaysAllowedToMerge)) {        loadsOfSameDate.add(segment);      } else       if (loadsOfSameDate.size() < 2) {        loadsOfSameDate.clear();        segDate1=initializeFirstSegment(loadsOfSameDate,segment,sdf);      } else {        break;      }    }  } else {    return listOfSegmentsBelowThresholdSize;  }  return loadsOfSameDate;}  }
class C{  public void clearMappedTypes(){  mFastAdapter.clearTypeInstance();}  }
class C{  @ApiOperation(value="Remove user from account",notes="Remove user from a specific account. This API call requires account/owner, system/admin or system/manager role.",position=8) @ApiResponses(value={@ApiResponse(code=204,message="OK"),@ApiResponse(code=404,message="Account ID not found"),@ApiResponse(code=409,message="Account should have at least 1 owner"),@ApiResponse(code=500,message="Internal Server Error")}) @DELETE @Path("/{id}/members/{userid}") @RolesAllowed({"account/owner","system/admin","system/manager"}) public void removeMember(@ApiParam(value="Account ID",required=true) @PathParam("id") String accountId,@ApiParam(value="User ID") @PathParam("userid") String userId) throws NotFoundException, ServerException, ConflictException {  final List<Member> members=accountDao.getMembers(accountId);  Member target=null;  int owners=0;  for (  Member member : members) {    if (member.getRoles().contains("account/owner"))     owners++;    if (member.getUserId().equals(userId))     target=member;  }  if (target == null) {    throw new ConflictException(format("User %s doesn't have membership with account %s",userId,accountId));  }  if (owners == 1 && target.getRoles().contains("account/owner")) {    throw new ConflictException("Account should have at least 1 owner");  }  accountDao.removeMember(target);  LOG.info("EVENT#account-remove-member# ACCOUNT-ID#{}# USER-ID#{}#",accountId,userId);}  }
class C{  protected void waitForRelease(){  if (Thread.currentThread().isInterrupted()) {    release();    return;  }synchronized (m_latchLock) {    if (m_latch != null) {      throw new IllegalStateException("Latch not null");    }    m_latch=new CountDownLatch(1);    m_map.getUIContext().addShutdownLatch(m_latch);  }  try {    m_latch.await();  } catch (  final InterruptedException e) {    release();  }synchronized (m_latchLock) {  }}  }
class C{  public void leave(NodeInfo element,Context context){  if (element.getNodeType() == NodeInfo.ELEMENT) {    myDebugger.leave();    if (TRACE) {      indent=indent.substring(0,indent.length() - 1);      trace(indent + "</Instruction> <!-- " + element.getDisplayName()+ " -->");    }  }}  }
class C{  private static void globalUnionTest(final ISchemaVersion schemaVersion) throws IOException {  final Writer output=openOutput(schemaVersion,"comprehensive",TestType.UNION);  final HLL hll=newHLL(HLLType.EMPTY);  final HLL emptyHLL=newHLL(HLLType.EMPTY);  cumulativeUnionLine(output,hll,emptyHLL,schemaVersion);  for (int i=0; i < 1000; i++) {    final HLL randomHLL=generateRandomHLL();    cumulativeUnionLine(output,hll,randomHLL,schemaVersion);  }  output.flush();  output.close();}  }
class C{  @Override public void release(){  entity.removeChangeListener(updateListener);  released=true;}  }
class C{  public void clear(){  super.clear();  header.before=header.after=header;}  }
class C{  private table printWorkflow(int activeNode,MWorkflow wf,MWFNode[] nodes,ArrayList nodes_ID,int[][] imageMap){  table imageTable=new table();  final int ROW=imageMap.length;  final int COL=imageMap[0].length;  for (int i=0; i < ROW; i++) {    tr aRow=new tr();    for (int j=0; j < COL; j++) {      td grid=new td();      grid.setAlign("center");      img spaceImage=createWorkflowImage("Spacer",0,null,true);      img arrowForwardImage=createWorkflowImage("ArrowFW_",0,null,true);      img arrowBackwardImage=createWorkflowImage("ArrowBW_",0,null,true);      img arrowDownImage=createWorkflowImage("ArrowDown_",0,null,true);      img normalNodeImage=null;      img activeNodeImage=null;      if (imageMap[i][j] <= 0) {        if (imageMap[i][j] == ARROW_FORWARD)         grid.addElement(arrowForwardImage);        if (imageMap[i][j] == ARROW_BACKWARD)         grid.addElement(arrowBackwardImage);        if (imageMap[i][j] == ARROW_DOWN)         grid.addElement(arrowDownImage);        if (imageMap[i][j] == SPACE)         grid.addElement(spaceImage);      } else {        int AD_Window_ID=0;        String url="";        String Target_Window="";        String parameters="";        String js_command="";        if (imageMap[i][j] == activeNode) {          AD_Window_ID=nodes[getIndex(imageMap[i][j],nodes_ID)].getAD_Window_ID();          url="'WWindow?AD_Window_ID=" + AD_Window_ID;          Target_Window="'WWindow" + AD_Window_ID + "'";          System.out.println("WorkFlow if(true)======" + url);          parameters=url + "'," + Target_Window;          js_command="popUp(" + parameters + ");submit()";          activeNodeImage=createWorkflowImage("mWorkFlow_",imageMap[i][j],js_command,true);          grid.addElement(activeNodeImage);          grid.addElement(new br());          grid.addElement("" + imageMap[i][j]);          grid.addElement(new br());          grid.addElement("<font color=blue>" + nodes[getIndex(imageMap[i][j],nodes_ID)].getName() + "</font>");        } else {          AD_Window_ID=nodes[getIndex(imageMap[i][j],nodes_ID)].getAD_Window_ID();          url="'WWindow?AD_Window_ID=" + AD_Window_ID;          Target_Window="'WWindow" + AD_Window_ID + "'";          System.out.println("WorkFlow else======" + url);          parameters=url + "'," + Target_Window;          js_command="popUp(" + parameters + ");submit()";          normalNodeImage=createWorkflowImage("mWorkFlow_",imageMap[i][j],js_command,false);          grid.addElement(normalNodeImage);          grid.addElement(new br());          grid.addElement("" + imageMap[i][j]);          grid.addElement(new br());          grid.addElement(nodes[getIndex(imageMap[i][j],nodes_ID)].getName());        }      }      aRow.addElement(grid);    }    imageTable.addElement(aRow);  }  return imageTable;}  }
class C{  private void validateFields(){  if (GitUIUtil.getTextField(myOntoComboBox).getText().length() == 0) {    setErrorText(null);    setOKActionEnabled(false);    return;  } else   if (myOntoValidator.isInvalid()) {    setErrorText(GitBundle.getString("rebase.invalid.onto"));    setOKActionEnabled(false);    return;  }  if (GitUIUtil.getTextField(myFromComboBox).getText().length() != 0 && myFromValidator.isInvalid()) {    setErrorText(GitBundle.getString("rebase.invalid.from"));    setOKActionEnabled(false);    return;  }  if (GitRebaseUtils.isRebaseInTheProgress(gitRoot())) {    setErrorText(GitBundle.getString("rebase.in.progress"));    setOKActionEnabled(false);    return;  }  setErrorText(null);  setOKActionEnabled(true);}  }
class C{  public void shutdown(){  Enumeration appenders=logger.getAllAppenders();  while (appenders.hasMoreElements()) {    Appender appender=(Appender)appenders.nextElement();    appender.close();  }}  }
class C{  public int read(byte b[]) throws IOException {  return readBytes(b,0,b.length);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TVARIABLE__AST_ELEMENT:    setAstElement((EObject)newValue);  return;case TypesPackage.TVARIABLE__ANNOTATIONS:getAnnotations().clear();getAnnotations().addAll((Collection<? extends TAnnotation>)newValue);return;case TypesPackage.TVARIABLE__DECLARED_TYPE_ACCESS_MODIFIER:setDeclaredTypeAccessModifier((TypeAccessModifier)newValue);return;case TypesPackage.TVARIABLE__DECLARED_PROVIDED_BY_RUNTIME:setDeclaredProvidedByRuntime((Boolean)newValue);return;case TypesPackage.TVARIABLE__TYPE_REF:setTypeRef((TypeRef)newValue);return;case TypesPackage.TVARIABLE__CONST:setConst((Boolean)newValue);return;case TypesPackage.TVARIABLE__EXTERNAL:setExternal((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public void datasetChanged(DatasetChangeEvent event){  if (this.dataset != null) {    Number vn=this.dataset.getValue();    if (vn != null) {      double value=vn.doubleValue();      if (inSubrange(NORMAL,value)) {        this.subrange=NORMAL;      } else       if (inSubrange(WARNING,value)) {        this.subrange=WARNING;      } else       if (inSubrange(CRITICAL,value)) {        this.subrange=CRITICAL;      } else {        this.subrange=-1;      }      setAxisRange();    }  }  super.datasetChanged(event);}  }
class C{  public T invisible(){  return visibility(View.INVISIBLE);}  }
class C{  public Coordinate[] toCoordinateArray(){  return coordinates;}  }
class C{  void paintSkin(Graphics g,int dx,int dy,int dw,int dh,State state){  if (XPStyle.getXP() == null) {    return;  }  if (ThemeReader.isGetThemeTransitionDurationDefined() && component instanceof JComponent && SwingUtilities.getAncestorOfClass(CellRendererPane.class,component) == null) {    AnimationController.paintSkin((JComponent)component,this,g,dx,dy,dw,dh,state);  } else {    paintSkinRaw(g,dx,dy,dw,dh,state);  }}  }
class C{  public void updateLastCommitSeqno(ReplDBMSHeader header,long appliedLatency) throws ReplicatorException {  String fname=commitSeqno.getPrefix() + "." + taskId;  commitSeqno.store(fname,header,appliedLatency,true);}  }
class C{  boolean isUsed(int pageId){  return used.get(pageId - getPos());}  }
class C{  public MarketplaceRemovedException(String message,Throwable cause){  super(message,cause);}  }
class C{  @SuppressWarnings("fallthrough") private void checkConsistent(){  boolean staticOk=false;  int expectedKind=-1;  Filter<Name> nameFilter=nonInitFilter;  boolean interfaceOwner=false;switch (refKind) {case ClassFile.REF_getStatic:case ClassFile.REF_putStatic:    staticOk=true;case ClassFile.REF_getField:case ClassFile.REF_putField:  expectedKind=Kinds.VAR;break;case ClassFile.REF_newInvokeSpecial:nameFilter=initFilter;expectedKind=Kinds.MTH;break;case ClassFile.REF_invokeInterface:interfaceOwner=true;expectedKind=Kinds.MTH;break;case ClassFile.REF_invokeStatic:interfaceOwner=true;staticOk=true;case ClassFile.REF_invokeVirtual:expectedKind=Kinds.MTH;break;case ClassFile.REF_invokeSpecial:interfaceOwner=true;expectedKind=Kinds.MTH;break;}Assert.check(!refSym.isStatic() || staticOk);Assert.check(refSym.kind == expectedKind);Assert.check(nameFilter.accepts(refSym.name));Assert.check(!refSym.owner.isInterface() || interfaceOwner);}  }
class C{  private static String prepareTemplate(String template){  String[] keywords=new String[]{kw_schema_lower,kw_schema_UPPER,kw_types_plural_lower,kw_types_plural_UPPER,kw_objectname_lower,kw_objectname_UPPER,kw_extension_lower,kw_extension_UPPER};  for (int i=0; i < keywords.length; i++) {    template=template.replace(keywords[i],nonOracleChar + keywords[i]);  }  String typesPluralTail=kw_types_plural_lower.replace(kw_type_lower,"");  template=template.replaceAll(kw_type_lower + "(?!" + typesPluralTail+ ")",nonOracleChar + kw_type_lower);  typesPluralTail=kw_types_plural_UPPER.replace(kw_type_UPPER,"");  template=template.replaceAll(kw_type_UPPER + "(?!S_PLURAL)",nonOracleChar + kw_type_UPPER);  return template;}  }
class C{  protected void writeGraphicCtrlExt() throws IOException {  out.write(0x21);  out.write(0xf9);  out.write(4);  int transp, disp;  if (transparent == null) {    transp=0;    disp=0;  } else {    transp=1;    disp=2;  }  if (dispose >= 0) {    disp=dispose & 7;  }  disp<<=2;  out.write(0 | disp | 0| transp);  writeShort(delay);  out.write(transIndex);  out.write(0);}  }
class C{  public static void addSingleCrystallization(ItemStack input,ItemStack output,float xp){  addCrystallization(input,output,null,xp);}  }
class C{  public int read(byte b[]) throws IOException {  return read(b,0,b.length);}  }
class C{  public static void begin(){  getEntityManager().getTransaction().begin();}  }
class C{  public S2LatLng sub(final S2LatLng o){  return new S2LatLng(latRadians - o.latRadians,lngRadians - o.lngRadians);}  }
class C{  void onKeyChange(){}  }
class C{  @Bean public FanoutExchange exchangeDeadLetter(){  return new FanoutExchange(amqpProperties.getDeadLetterExchange(),false,true);}  }
class C{  public void load(GeneralSubtrees generalSubtrees){  List<GeneralSubtree> generalSubtreesList=generalSubtrees.getGeneralSubtrees();  Collections.sort(generalSubtreesList,new GeneralSubtreeBaseComparator());  data=new Object[generalSubtreesList.size()][3];  int i=0;  for (  GeneralSubtree generalSubtree : generalSubtreesList) {    data[i][0]=generalSubtree;    data[i][1]=generalSubtree;    data[i][2]=generalSubtree;    i++;  }  fireTableDataChanged();}  }
class C{  List<MobSimVehicleRoute> createFreightDriverPlans(){  clear();  System.out.flush();  System.err.flush();  List<MobSimVehicleRoute> routes=new ArrayList<MobSimVehicleRoute>();  if (carrier.getSelectedPlan() == null) {    return routes;  }  for (  ScheduledTour scheduledTour : carrier.getSelectedPlan().getScheduledTours()) {    Id<Person> driverId=createDriverId(scheduledTour.getVehicle());    CarrierVehicle carrierVehicle=scheduledTour.getVehicle();    Person driverPerson=createDriverPerson(driverId);    Vehicle vehicle=createVehicle(driverPerson,carrierVehicle);    CarrierDriverAgent carrierDriverAgent=new CarrierDriverAgent(driverId,scheduledTour);    Plan plan=PopulationUtils.createPlan();    Activity startActivity=PopulationUtils.createActivityFromLinkId(FreightConstants.START,scheduledTour.getVehicle().getLocation());    startActivity.setEndTime(scheduledTour.getDeparture());    plan.addActivity(startActivity);    for (    TourElement tourElement : scheduledTour.getTour().getTourElements()) {      if (tourElement instanceof org.matsim.contrib.freight.carrier.Tour.Leg) {        org.matsim.contrib.freight.carrier.Tour.Leg tourLeg=(org.matsim.contrib.freight.carrier.Tour.Leg)tourElement;        Route route=tourLeg.getRoute();        if (route == null)         throw new IllegalStateException("missing route for carrier " + this.getId());        Leg leg=PopulationUtils.createLeg(TransportMode.car);        leg.setRoute(route);        leg.setDepartureTime(tourLeg.getExpectedDepartureTime());        leg.setTravelTime(tourLeg.getExpectedTransportTime());        leg.setTravelTime(tourLeg.getExpectedDepartureTime() + tourLeg.getExpectedTransportTime() - leg.getDepartureTime());        plan.addLeg(leg);      } else       if (tourElement instanceof TourActivity) {        TourActivity act=(TourActivity)tourElement;        Activity tourElementActivity=PopulationUtils.createActivityFromLinkId(act.getActivityType(),act.getLocation());        double duration=act.getDuration();        tourElementActivity.setMaximumDuration(duration);        plan.addActivity(tourElementActivity);      }    }    Activity endActivity=PopulationUtils.createActivityFromLinkId(FreightConstants.END,scheduledTour.getVehicle().getLocation());    plan.addActivity(endActivity);    driverPerson.addPlan(plan);    plan.setPerson(driverPerson);    MobSimVehicleRoute mobsimRoute=new MobSimVehicleRoute(plan,vehicle);    routes.add(mobsimRoute);    carrierDriverAgents.put(driverId,carrierDriverAgent);    driverTourMap.put(driverId,scheduledTour);  }  return routes;}  }
class C{  public static List<X509Certificate> parseCertificates(String[] base64EncodedCertificates) throws CertificateException {  List<X509Certificate> certificates=new ArrayList<X509Certificate>();  for (  String base64EncodedCertificate : base64EncodedCertificates) {    certificates.add(parseCertificate(base64EncodedCertificate));  }  return certificates;}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(version);  if (originatorInfo != null) {    v.add(new DERTaggedObject(false,0,originatorInfo));  }  v.add(recipientInfos);  v.add(macAlgorithm);  if (digestAlgorithm != null) {    v.add(new DERTaggedObject(false,1,digestAlgorithm));  }  v.add(encapsulatedContentInfo);  if (authAttrs != null) {    v.add(new DERTaggedObject(false,2,authAttrs));  }  v.add(mac);  if (unauthAttrs != null) {    v.add(new DERTaggedObject(false,3,unauthAttrs));  }  return new BERSequence(v);}  }
class C{  public PseudoRandom(final int range){  int m_mask=0;  for (int m=0; m < s_masks.length; m++) {    if (s_masks[m] > range) {      m_mask=s_masks[m];      break;    }  }  this.m_mask=m_mask;  m_max=range;}  }
class C{  public static String formatMethodCall(Method m,Object... args){  StringBuilder buff=new StringBuilder();  buff.append(m.getName()).append('(');  for (int i=0; i < args.length; i++) {    Object a=args[i];    if (i > 0) {      buff.append(", ");    }    buff.append(a == null ? "null" : a.toString());  }  buff.append(")");  return buff.toString();}  }
class C{  private boolean isOverridden(OutputNode node,Object value) throws Exception {  return factory.setOverride(entry,value,node);}  }
class C{  protected boolean isForceincomments(){  return forceincomments;}  }
class C{  public LabelFigure(){  this("Label");}  }
class C{  public int deleteLog(){  if (getKeepLogDays() < 1)   return 0;  String sql="DELETE AD_LdapProcessorLog " + "WHERE AD_LdapProcessor_ID=" + getAD_LdapProcessor_ID() + " AND (Created+"+ getKeepLogDays()+ ") < SysDate";  int no=DB.executeUpdate(sql,get_TrxName());  return no;}  }
class C{  private void checkResourceLoading(String resName,Locale l) throws Exception {  final Loader loader=new Loader(new String[]{"Bug4168625Class"},new String[]{"Bug4168625Resource3_en_US","Bug4168625Resource3_en_CA"});  final Class c=loader.loadClass("Bug4168625Class");  Bug4168625Getter test=(Bug4168625Getter)c.newInstance();  final String resClassName;  if (l.toString().length() > 0) {    resClassName=resName + "_" + l;  } else {    resClassName=resName;  }  Object bundle=test.getResourceBundle(resName,l);  loader.logClasses("Initial lookup of " + resClassName + " generated the following loads:");  final Vector lastLoad=new Vector(loader.loadedClasses.size());  boolean dups=false;  for (int i=loader.loadedClasses.size() - 1; i >= 0; i--) {    final Object item=loader.loadedClasses.elementAt(i);    loader.loadedClasses.removeElementAt(i);    if (loader.loadedClasses.contains(item)) {      logln("Resource loaded more than once: " + item);      dups=true;    } else {      lastLoad.addElement(item);    }  }  if (dups) {    errln("ResourceBundle loaded some classes multiple times");  }  loader.loadedClasses.removeAllElements();  bundle=test.getResourceBundle(resName,l);  loader.logClasses("Second lookup of " + resClassName + " generated the following loads:");  dups=false;  for (int i=0; i < loader.loadedClasses.size(); i++) {    Object item=loader.loadedClasses.elementAt(i);    if (lastLoad.contains(item)) {      logln("ResourceBundle did not cache " + item + " correctly");      dups=true;    }  }  if (dups) {    errln("Resource bundle not caching some classes properly");  }}  }
class C{  private synchronized void enrollEntry(EntryFile entry){  mAllFiles.contents.add(entry);  mAllFiles.blocks+=entry.blocks;  if (entry.tag != null && entry.file != null && entry.blocks > 0) {    FileList tagFiles=mFilesByTag.get(entry.tag);    if (tagFiles == null) {      tagFiles=new FileList();      mFilesByTag.put(entry.tag,tagFiles);    }    tagFiles.contents.add(entry);    tagFiles.blocks+=entry.blocks;  }}  }
class C{  private FlowSizeSpec calcRowsOrColsSizes(boolean isHor,int containerSize){  ArrayList<LinkedDimGroup>[] groupsLists=isHor ? colGroupLists : rowGroupLists;  Float[] defPush=isHor ? pushXs : pushYs;  if (containerSize <= 0) {    containerSize=isHor ? container.getWidth() : container.getHeight();  }  BoundSize cSz=isHor ? lc.getWidth() : lc.getHeight();  if (!cSz.isUnset()) {    containerSize=cSz.constrain(containerSize,getParentSize(container,isHor),container);  }  DimConstraint[] primDCs=(isHor ? colConstr : rowConstr).getConstaints();  TreeSet<Integer> primIndexes=isHor ? colIndexes : rowIndexes;  int[][] rowColBoundSizes=new int[primIndexes.size()][];  HashMap<String,int[]> sizeGroupMap=new HashMap<String,int[]>(4);  DimConstraint[] allDCs=new DimConstraint[primIndexes.size()];  Iterator<Integer> primIt=primIndexes.iterator();  for (int r=0; r < rowColBoundSizes.length; r++) {    int cellIx=primIt.next();    int[] rowColSizes=new int[3];    if (cellIx >= -MAX_GRID && cellIx <= MAX_GRID) {      allDCs[r]=primDCs[cellIx >= primDCs.length ? primDCs.length - 1 : cellIx];    } else {      allDCs[r]=DOCK_DIM_CONSTRAINT;    }    ArrayList<LinkedDimGroup> groups=groupsLists[r];    int[] groupSizes=new int[]{getTotalGroupsSizeParallel(groups,LayoutUtil.MIN,false),getTotalGroupsSizeParallel(groups,LayoutUtil.PREF,false),LayoutUtil.INF};    correctMinMax(groupSizes);    BoundSize dimSize=allDCs[r].getSize();    for (int sType=LayoutUtil.MIN; sType <= LayoutUtil.MAX; sType++) {      int rowColSize=groupSizes[sType];      UnitValue uv=dimSize.getSize(sType);      if (uv != null) {        int unit=uv.getUnit();        if (unit == UnitValue.PREF_SIZE) {          rowColSize=groupSizes[LayoutUtil.PREF];        } else         if (unit == UnitValue.MIN_SIZE) {          rowColSize=groupSizes[LayoutUtil.MIN];        } else         if (unit == UnitValue.MAX_SIZE) {          rowColSize=groupSizes[LayoutUtil.MAX];        } else {          rowColSize=uv.getPixels(containerSize,container,null);        }      } else       if (cellIx >= -MAX_GRID && cellIx <= MAX_GRID && rowColSize == 0) {        rowColSize=LayoutUtil.isDesignTime(container) ? LayoutUtil.getDesignTimeEmptySize() : 0;      }      rowColSizes[sType]=rowColSize;    }    correctMinMax(rowColSizes);    addToSizeGroup(sizeGroupMap,allDCs[r].getSizeGroup(),rowColSizes);    rowColBoundSizes[r]=rowColSizes;  }  if (sizeGroupMap.size() > 0) {    for (int r=0; r < rowColBoundSizes.length; r++) {      if (allDCs[r].getSizeGroup() != null) {        rowColBoundSizes[r]=sizeGroupMap.get(allDCs[r].getSizeGroup());      }    }  }  ResizeConstraint[] resConstrs=getRowResizeConstraints(allDCs);  boolean[] fillInPushGaps=new boolean[allDCs.length + 1];  int[][] gapSizes=getRowGaps(allDCs,containerSize,isHor,fillInPushGaps);  FlowSizeSpec fss=mergeSizesGapsAndResConstrs(resConstrs,fillInPushGaps,rowColBoundSizes,gapSizes);  adjustMinPrefForSpanningComps(allDCs,defPush,fss,groupsLists);  return fss;}  }
class C{  private static <K,V>boolean mapsDiffer(Map<K,V> last,Map<K,V> attrs){  if (last == null) {    return (attrs != null && attrs.size() > 0);  }  return (!last.equals(attrs));}  }
class C{  public Graph search(){  topGraphs.clear();  lookupArrows=new ConcurrentHashMap<>();  final List<Node> nodes=new ArrayList<>(variables);  graph=new EdgeListGraphSingleConnections(nodes);  if (adjacencies != null) {    adjacencies=GraphUtils.replaceNodes(adjacencies,nodes);  }  if (initialGraph != null) {    graph=new EdgeListGraphSingleConnections(initialGraph);    graph=GraphUtils.replaceNodes(graph,nodes);  }  addRequiredEdges(graph);  if (faithfulnessAssumed) {    initializeForwardEdgesFromEmptyGraph(getVariables());    this.mode=Mode.heuristicSpeedup;    fes();    bes();    this.mode=Mode.coverNoncolliders;    initializeTwoStepEdges(getVariables());    fes();    bes();  } else {    initializeForwardEdgesFromEmptyGraph(getVariables());    this.mode=Mode.heuristicSpeedup;    fes();    bes();    this.mode=Mode.allowUnfaithfulness;    initializeForwardEdgesFromExistingGraph(getVariables());    fes();    bes();  }  long start=System.currentTimeMillis();  totalScore=0.0;  long endTime=System.currentTimeMillis();  this.elapsedTime=endTime - start;  this.logger.log("graph","\nReturning this graph: " + graph);  this.logger.log("info","Elapsed time = " + (elapsedTime) / 1000. + " s");  this.logger.flush();  this.modelScore=totalScore;  return graph;}  }
class C{  static boolean isValid(String s){  if (s.startsWith("0") && s.length() > 1 || Integer.valueOf(s) > 255)   return false;  return true;}  }
class C{  public void load(String entidad) throws ClaveIncorrectaExcepcion, DocumentosRepositorioExcepcion {  if (getId() != null && !getId().equals("")) {    DynamicTable tableInfo=new DynamicTable();    DynamicRows rowsInfo=new DynamicRows();    DynamicRow rowInfo=new DynamicRow();    EstadosTabla tablaNoti=new EstadosTabla();    DbConnection dbConn=new DbConnection();    if (isDebugeable)     logger.debug("load >> numero: " + getId());    boolean incorrectGuid=false;    try {      dbConn.open(DBSessionManager.getSession(entidad));      tableInfo.setTableObject(tablaNoti);      tableInfo.setClassName(EstadosTabla.class.getName());      tableInfo.setTablesMethod("getTableName");      tableInfo.setColumnsMethod("getAllColumnNames");      rowInfo.setClassName(EstadosDatos.class.getName());      rowInfo.setValuesMethod("loadAllValues");      rowInfo.addRow(this);      rowsInfo.add(rowInfo);      if (!DynamicFns.select(dbConn,tablaNoti.getClausulaPorId(getId()),tableInfo,rowsInfo)) {        incorrectGuid=true;      }    } catch (    Exception e) {      throw new DocumentosRepositorioExcepcion(DocumentosRepositorioErrorCodigos.EC_RETRIEVE_DOCUMENT,e);    } finally {      try {        if (dbConn.existConnection())         dbConn.close();      } catch (      Exception ee) {      }      if (incorrectGuid)       throw new ClaveIncorrectaExcepcion(ClaveIncorrectaErrorCodigos.EC_INCORRECT_GUID);    }  } else   throw new ClaveIncorrectaExcepcion(ClaveIncorrectaErrorCodigos.EC_INCORRECT_GUID);}  }
class C{  public JSONTokener(InputStream inputStream) throws JSONException {  this(new InputStreamReader(inputStream));}  }
class C{  public void populateAntiHostList(PTContainer c,List<String> antiHosts){  for (  PTContainer container : c.getStrictAntiPrefs()) {    if (antiAffinityMapping.containsKey(container)) {      antiHosts.add(antiAffinityMapping.get(container));    } else {      String antiHost=getHostForContainer(container);      if (antiHost != null) {        antiHosts.add(antiHost);      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:29.088 -0500",hash_original_method="F1834FC5D553230B29FB844FEC56B83F",hash_generated_method="7F757EFF2EA2D46B47A3E605693E0E2C") public View newGroupView(boolean isExpanded,ViewGroup parent){  return mInflater.inflate((isExpanded) ? mExpandedGroupLayout : mCollapsedGroupLayout,parent,false);}  }
class C{  @Override public final void moveTo(final float x,final float y){  shape_primitives.addElement(M);  shape_primitive_x.addElement(x);  shape_primitive_y.addElement(y);  shape_primitive_x2.addElement(0);  shape_primitive_y2.addElement(0);  shape_primitive_x3.addElement(0);  shape_primitive_y3.addElement(0);}  }
class C{  public void increment(String key){  add(key,1);}  }
class C{  private void renderReport(final HttpServletResponse resp,final ReportOutput reportOutput){  if (reportOutput == null) {    renderHtml(resp,"<html><body><b>ERROR: Report output not available!</b></body></html>");    return;  }  final FileFormat reportFormat=reportOutput.getReportFormat();  if (reportFormat == null) {    renderHtml(resp,"<html><body><b>ERROR: Report format not available!</b></body></html>");    return;  }  final byte[] reportData=reportOutput.getReportOutputData();  if (reportData == null) {    renderHtml(resp,"<html><body><b>ERROR: Report data not available!</b></body></html>");    return;  }  renderReport(resp,reportData,reportFormat);}  }
class C{  private static VersionResult apply_regexps(String page_contents,UpdateSourceEntry use,String package_name){  VersionResult vr=new VersionResult();  if (use.get_version_regexp() != null) {    Matcher m=Pattern.compile(String.format(use.get_version_regexp(),package_name)).matcher(page_contents);    if (m.find()) {      vr.set_latest_version(m.group(1));    } else {      Log.v(MainActivity.TAG,"The regular expression could not find a version number.");      Log.d(MainActivity.TAG,page_contents);    }  }  if (use.get_download_url() != null) {    vr.set_download_url(use.get_download_url());  } else   if (use.get_download_regexp() != null) {    Matcher m=Pattern.compile(String.format(use.get_download_regexp(),package_name)).matcher(page_contents);    if (m.find()) {      vr.set_download_url(m.group(1));    } else {      Log.v(MainActivity.TAG,"The regular expression could not find a download URL.");      Log.d(MainActivity.TAG,page_contents);    }  }  Log.v(MainActivity.TAG,String.format("Obtained version: %s - Download URL: %s",vr.get_latest_version(),vr.get_download_url()));  return vr;}  }
class C{  public double recall(int positives){  return ((double)tp) / (positives);}  }
class C{  private boolean adjustOutputDownwardsForFee(Transaction tx,CoinSelection coinSelection,BigInteger baseFee,BigInteger feePerKb){  TransactionOutput output=tx.getOutput(0);  int size=tx.bitcoinSerialize().length;  size+=estimateBytesForSigning(coinSelection);  BigInteger fee=baseFee.add(BigInteger.valueOf((size / 1000) + 1).multiply(feePerKb));  output.setValue(output.getValue().subtract(fee));  if (output.getValue().compareTo(Utils.CENT) < 0 && fee.compareTo(Transaction.REFERENCE_DEFAULT_MIN_TX_FEE) < 0)   output.setValue(output.getValue().subtract(Transaction.REFERENCE_DEFAULT_MIN_TX_FEE.subtract(fee)));  return output.getMinNonDustValue().compareTo(output.getValue()) <= 0;}  }
class C{  public ObjectGraph buildGraphWithAditionalModules(List<Object> modules){  if (modules == null) {    throw new IllegalArgumentException("You can't plus a null module, review your getModules() implementation");  }  return objectGraph.plus(modules.toArray());}  }
class C{  public void close() throws IOException {  close(false);}  }
class C{  private Response<BitmapDrawable> doVideoFileParse(){  final String requestUrl=getUrl();  File bitmapFile=new File(requestUrl.substring(8,requestUrl.length()));  if (!bitmapFile.exists() || !bitmapFile.isFile()) {    return Response.error(new ParseError(new FileNotFoundException(String.format("File not found: %s",bitmapFile.getAbsolutePath()))));  }  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  decodeOptions.inInputShareable=true;  decodeOptions.inPurgeable=true;  decodeOptions.inPreferredConfig=mDecodeConfig;  Bitmap bitmap;  if (mMaxWidth == 0 && mMaxHeight == 0) {    bitmap=getVideoFrame(bitmapFile.getAbsolutePath());    addMarker("read-full-size-image-from-file");  } else {    decodeOptions.inJustDecodeBounds=true;    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=ImageUtils.findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=getVideoFrame(bitmapFile.getAbsolutePath());    addMarker(String.format("read-from-file-scaled-times-%d",decodeOptions.inSampleSize));    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();      addMarker("scaling-read-from-file-bitmap");    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError());  } else {    BitmapDrawable drawable;    if (Utils.hasHoneycomb()) {      drawable=new BitmapDrawable(mResources,bitmap);    } else {      drawable=new RecyclingBitmapDrawable(mResources,bitmap);    }    return Response.success(drawable,HttpHeaderParser.parseBitmapCacheHeaders(bitmap));  }}  }
class C{  public String unparse(){  if (this.isNaN()) {    return "NaN";  }  if (terms.size() == 0) {    return "0";  }  StringBuilder sb=new StringBuilder();  boolean isNegative;  for (int i=0, size=terms.size(); i < size; i++) {    isNegative=terms.get(i).coeff.isNegative();    RatNum coeff=terms.get(i).coeff;    if (isNegative) {      coeff=coeff.negate();    }    if (isNegative && coeff.numer != Integer.MIN_VALUE) {      sb.append("-");    } else     if (i != 0 && !isNegative) {      sb.append("+");    }    if (terms.get(i).expt == 0) {      sb.append(coeff.unparse());    } else {      if (terms.get(i).expt == 1) {        if (coeff.equals(ONE)) {          sb.append("x");        } else {          sb.append((coeff.unparse() + "*x"));        }      } else {        if (coeff.equals(ONE)) {          sb.append(("x^" + terms.get(i).expt));        } else {          sb.append((coeff.unparse() + "*x^" + terms.get(i).expt));        }      }    }  }  return sb.toString();}  }
class C{  public String useConjugateGradientDescentTipText(){  return "Use conjugate gradient descent rather than BFGS updates; faster for problems with many parameters.";}  }
class C{  AttributeMetadataRegistry create(Schema schema){  return new AttributeMetadataRegistry(schema,this);}  }
class C{  public static boolean bernoulli(double p){  if (!(p >= 0.0 && p <= 1.0))   throw new IllegalArgumentException("Probability must be between 0.0 and 1.0");  return uniform() < p;}  }
class C{  public boolean equals(XObject obj2){  return obj2.getType() == CLASS_NULL;}  }
class C{  @Override public String toString(){  return getDescriptor();}  }
class C{  public static String longToString(long v,int radix){  int i=(int)v;  if (i == v) {    return intToString(i,radix);  }  if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX) {    radix=10;  }  if (radix == 10) {    return longToString(v);  }  boolean negative=false;  if (v < 0) {    negative=true;  } else {    v=-v;  }  int bufLen=radix < 8 ? 65 : 23;  char[] buf=new char[bufLen];  int cursor=bufLen;  do {    long q=v / radix;    buf[--cursor]=DIGITS[(int)(radix * q - v)];    v=q;  } while (v != 0);  if (negative) {    buf[--cursor]='-';  }  return new String(cursor,bufLen - cursor,buf);}  }
class C{  public FatalPeerException(final Throwable cause){  super(cause);}  }
class C{  public PKCS10CertificationRequest(byte[] bytes){  super(toDERSequence(bytes));}  }
class C{  public static Set<InetAddress> myIntranetIPs(){  if (localHostAddresses.size() < 1)   try {    Thread.sleep(1000);  } catch (  final InterruptedException e) {  }  return localHostAddresses;}  }
class C{  private void fade(){  mRoot.findViewById(R.id.preview_fader).setVisibility(View.VISIBLE);}  }
class C{  private void removeVolumesFromExportGroup(DbClient dbClient,ExportGroup exportGroup){  Set<URI> copyOfVolumes=new HashSet<>(_volumes);  Set<URI> volumesInAnExportMask=new HashSet<>();  for (  ExportMask associatedMask : ExportMaskUtils.getExportMasks(dbClient,exportGroup)) {    if (associatedMask.getVolumes() != null) {      for (      URI volumeURI : ExportMaskUtils.getVolumeURIs(associatedMask)) {        if (_volumes.contains(volumeURI)) {          volumesInAnExportMask.add(volumeURI);          copyOfVolumes.remove(volumeURI);        }      }    }  }  if (!volumesInAnExportMask.isEmpty()) {    _log.info(String.format("The following volumes are in an ExportMask associated with ExportGroup %s (%s): %s",exportGroup.getLabel(),exportGroup.getId(),Joiner.on(',').join(volumesInAnExportMask)));  }  if (!copyOfVolumes.isEmpty()) {    for (    URI uri : copyOfVolumes) {      exportGroup.removeVolume(uri);    }    dbClient.updateObject(exportGroup);    _log.info(String.format("The following volumes were removed from ExportGroup %s (%s): %s",exportGroup.getLabel(),exportGroup.getId(),Joiner.on(',').join(copyOfVolumes)));  }}  }
class C{  public List<ScanResult> syncGetScanResultsList(){synchronized (mScanResultCache) {    List<ScanResult> scanList=new ArrayList<ScanResult>();    for (    ScanResult result : mScanResults) {      scanList.add(new ScanResult(result));    }    return scanList;  }}  }
class C{  private byte[] sendMultipartPost(URL url) throws IOException, NetworkException {  boolean httpTraceEnabled=isHttpTraceEnabled();  DataOutputStream outputStream=null;  HttpURLConnection connection=null;  Map<String,String> headers=new HashMap<>();  headers.put("Connection","Keep-Alive");  headers.put("Content-Type","multipart/form-data; boundary=" + BOUNDARY_TAG);  try {    connection=openHttpConnection(url,headers);    connection.setDoInput(true);    connection.setReadTimeout(HTTP_READ_TIMEOUT);    connection.setChunkedStreamingMode(CHUNK_MAX_SIZE);    connection.setRequestMethod("POST");    String body=generateTidMultipart();    if (mAuth != null) {      String authValue=mAuth.generateAuthorizationHeaderValue("POST",url.getPath(),body);      connection.setRequestProperty("Authorization",authValue);    }    if (httpTraceEnabled) {      StringBuilder trace=new StringBuilder(">>> Send HTTP request:\nPOST ").append(url);      Map<String,List<String>> properties=connection.getRequestProperties();      for (      Entry<String,List<String>> property : properties.entrySet()) {        trace.append("\n").append(property.getKey()).append(": ").append(property.getValue());      }      trace.append("\n").append(body);      System.out.println(trace);    }    outputStream=new DataOutputStream(connection.getOutputStream());    outputStream.writeBytes(body);    if (mFileIcon != null && mFileIcon.getSize() > 0) {      writeThumbnailMultipart(outputStream);    }    HttpTransferEventListener listeners=getListener();    ((HttpUploadTransferEventListener)listeners).uploadStarted();    listeners.onHttpTransferStarted();    try {      writeFileMultipart(outputStream,mContent.getUri());      if (isCancelled() || isPaused()) {        return null;      }      outputStream.writeBytes(TWO_HYPENS + BOUNDARY_TAG + TWO_HYPENS);      int responseCode=connection.getResponseCode();      String message=connection.getResponseMessage();      if (sLogger.isActivated()) {        sLogger.debug("Second POST response " + responseCode + " ("+ message+ ")");      }      byte[] result=null;      boolean success=false;      boolean retry=false;      if (httpTraceEnabled) {        String trace="<<< Receive HTTP response:" + responseCode + " "+ message;        System.out.println(trace);      }switch (responseCode) {case HttpURLConnection.HTTP_OK:        success=true;      InputStream inputStream=connection.getInputStream();    result=convertStreamToString(inputStream);  if (httpTraceEnabled) {    System.out.println("\n" + new String(result));  }break;case HttpURLConnection.HTTP_UNAVAILABLE:long retryAfter=getRetryTimeout(connection);if (retryAfter > 0) {try {Thread.sleep(retryAfter);if (mRetryCount < RETRY_MAX) {  mRetryCount++;  retry=true;}} catch (InterruptedException ignore) {}}break;default :break;}if (success) {return result;} else if (retry) {return sendMultipartPost(url);} else {if (sLogger.isActivated()) {sLogger.warn("File Upload aborted, Received " + responseCode + " from server");}return null;}} catch (IOException e) {if (!isPaused() && !isCancelled()) {pauseTransferBySystem();}throw e;}catch (SecurityException e) {if (sLogger.isActivated()) {sLogger.error("Upload has failed due to that the file is not accessible!",e);}listeners.onHttpTransferNotAllowedToSend();return null;}}  finally {CloseableUtils.tryToClose(outputStream);if (connection != null) {connection.disconnect();}}}  }
class C{  public QueueReader listener(){  return (QueueReader)reader.clone();}  }
class C{  protected TreeSelectionListener createTreeSelectionListener(){  return getHandler();}  }
class C{  public static boolean isDate(String date){  if (isEmpty(date))   return defaultEmptyOK;  String month;  String day;  String year;  int dateSlash1=date.indexOf("/");  int dateSlash2=date.lastIndexOf("/");  if (dateSlash1 <= 0 || dateSlash1 == dateSlash2)   return false;  month=date.substring(0,dateSlash1);  day=date.substring(dateSlash1 + 1,dateSlash2);  year=date.substring(dateSlash2 + 1);  return isDate(year,month,day);}  }
class C{  public boolean isEmpty(){  return counter == 0;}  }
class C{  public static int computeMessageSizeNoTag(final MessageNano value){  final int size=value.getSerializedSize();  return computeRawVarint32Size(size) + size;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public void enableTabSwiping(boolean enable){  mEnableTabSwiping=TAB_SWIPING_ENABLED && enable;}  }
class C{  public GenericDocumentFragment(AbstractDocument owner){  ownerDocument=owner;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  CustomXYToolTipGenerator clone=(CustomXYToolTipGenerator)super.clone();  if (this.toolTipSeries != null) {    clone.toolTipSeries=new java.util.ArrayList(this.toolTipSeries);  }  return clone;}  }
class C{  public static double simpleTest(double[] test){  double scale=1. / (test.length + 1.);  double maxdev=Double.NEGATIVE_INFINITY;  for (int i=0; i < test.length; i++) {    double expected=(i + 1.) * scale;    double dev=Math.abs(test[i] - expected);    if (dev > maxdev) {      maxdev=dev;    }  }  return Math.abs(maxdev);}  }
class C{  @Override public double h(Object s){  MapNode currState=(MapNode)s;  return (new Position(currState)).getDistKM(goalState);}  }
class C{  private void updateMap(List<Coord> coords){  MapNode previousNode=null;  for (  Coord c : coords) {    previousNode=createOrUpdateNode(c,previousNode);  }}  }
class C{  private void handleActionFoo(String param1,String param2){  throw new UnsupportedOperationException("Not yet implemented");}  }
class C{  public void reset(){  clear();}  }
class C{  void materialize(){  if (cachefill < 0) {    return;  }  double min=Double.MAX_VALUE, max=Double.MIN_VALUE;  for (int i=0; i < cachefill; i++) {    min=Math.min(min,cachec[i]);    max=Math.max(max,cachec[i]);  }  LinearScale scale=new LinearScale(min,max);  min=scale.getMin();  max=scale.getMax();  this.base=min;  this.max=max;  this.binsize=(max - min) / this.destsize;  this.data=new double[this.destsize << 1];  size=destsize;  final int end=cachefill;  cachefill=-1;  for (int i=0; i < end; i++) {    increment(cachec[i],cachev[i]);  }  cachec=null;  cachev=null;}  }
class C{  public MaxCountExceededException(Localizable specific,Number max,Object... args){  getContext().addMessage(specific,max,args);  this.max=max;}  }
class C{  public DynamoDBBootstrapWorker(AmazonDynamoDBClient client,double rateLimit,String tableName,int numThreads) throws NullReadCapacityException {  this.client=client;  this.rateLimit=rateLimit;  this.tableName=tableName;  TableDescription description=client.describeTable(tableName).getTable();  this.section=0;  this.totalSections=1;  this.consistentScan=false;  this.numSegments=getNumberOfSegments(description);  int numProcessors=Runtime.getRuntime().availableProcessors() * 4;  if (numProcessors > numThreads) {    numThreads=numProcessors;  }  super.threadPool=Executors.newFixedThreadPool(numThreads);}  }
class C{  public void closeRing(){  if (size() > 0)   add(new Coordinate((Coordinate)get(0)),false);}  }
class C{  public void saveReachedAchievement(DBTransaction transaction,Integer achievementId,String playerName) throws SQLException {  String query="INSERT INTO reached_achievement " + "(charname, achievement_id) VALUES" + "('[charname]','[achievement_id]');";  Map<String,Object> parameters=new HashMap<String,Object>();  parameters.put("charname",playerName);  parameters.put("achievement_id",achievementId);  transaction.execute(query,parameters);}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String flowAccumulationHeader=null;  String streamsHeader=null;  double mdInfPower=1;  String outputType=null;  String flowAccumTotalHeader=null;  String flowAccumRightHeader=null;  String flowAccumLeftHeader=null;  double initialValue;  double z;  int numRows;  int numCols;  double noData;  float progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      demHeader=args[i];    } else     if (i == 1) {      flowAccumulationHeader=args[i];    } else     if (i == 2) {      streamsHeader=args[i];    } else     if (i == 3) {      mdInfPower=Double.parseDouble(args[i]);    } else     if (i == 4) {      outputType=args[i].toLowerCase();    } else     if (i == 5) {      caThreshold=Double.parseDouble(args[i]);    } else     if (i == 6) {      flowAccumTotalHeader=args[i];    } else     if (i == 7) {      flowAccumRightHeader=args[i];    } else     if (i == 8) {      flowAccumLeftHeader=args[i];    }  }  if ((demHeader == null) || (flowAccumulationHeader == null) || (streamsHeader == null)|| (flowAccumTotalHeader == null)|| (flowAccumRightHeader == null)|| (flowAccumLeftHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    flowAccumulation=new WhiteboxRaster(flowAccumulationHeader,"r");    streams=new WhiteboxRaster(streamsHeader,"r");    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    noData=dem.getNoDataValue();    gridRes=dem.getCellSizeX();    flowAccumTotal=new WhiteboxRaster(flowAccumTotalHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,1);    flowAccumTotal.setPreferredPalette("blueyellow.pal");    flowAccumTotal.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    flowAccumTotal.setZUnits("dimensionless");    flowAccumRight=new WhiteboxRaster(flowAccumRightHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,1);    flowAccumRight.setPreferredPalette("blueyellow.pal");    flowAccumRight.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    flowAccumRight.setZUnits("dimensionless");    flowAccumLeft=new WhiteboxRaster(flowAccumLeftHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,1);    flowAccumLeft.setPreferredPalette("blueyellow.pal");    flowAccumLeft.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    flowAccumLeft.setZUnits("dimensionless");    updateProgress("Loop 1 of 2:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        z=dem.getValue(row,col);        if (z != noData) {          flowAccumTotal.setValue(row,col,0);          flowAccumRight.setValue(row,col,0);          flowAccumLeft.setValue(row,col,0);        } else {          flowAccumTotal.setValue(row,col,noData);          flowAccumRight.setValue(row,col,noData);          flowAccumLeft.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("",(int)progress);    }    updateProgress("Loop 2 of 2:",0);switch (outputType) {case "specific catchment area (sca)":      initialValue=gridRes;    caThreshold=caThreshold * gridRes;  break;case "total catchment area":initialValue=gridRes * gridRes;caThreshold=caThreshold * gridRes * gridRes;break;default :initialValue=1;break;}for (int row=0; row < numRows; row++) {for (int col=0; col < numCols; col++) {if (streams.getValue(row,col) > 0) {flowAccumTotal.setValue(row,col,initialValue - caThreshold);flowAccumRight.setValue(row,col,(initialValue - caThreshold) / 2);flowAccumLeft.setValue(row,col,(initialValue - caThreshold) / 2);for (int c=0; c < 8; c++) {MDInfAccum(row + yd[c],col + xd[c],row,col,(c + 4) % 8,mdInfPower,noData);}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (numRows - 1));updateProgress("",(int)progress);}flowAccumTotal.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");flowAccumTotal.addMetadataEntry("Created on " + new Date());flowAccumRight.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");flowAccumRight.addMetadataEntry("Created on " + new Date());flowAccumLeft.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");flowAccumLeft.addMetadataEntry("Created on " + new Date());dem.close();flowAccumulation.close();streams.close();flowAccumTotal.close();flowAccumRight.close();flowAccumLeft.close();returnData(flowAccumTotalHeader);} catch (Exception e) {showFeedback(e.getMessage());} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public int readUnsignedShort() throws EOFException, FormatException {  return MoreMath.signedToInt(readShort());}  }
class C{  private UasBnoAuth(){}  }
class C{  public static void assertStreamEquals(final String witness,final byte[] actual,final int[] skip,final int endCompare) throws IOException {  File witnessFile=new File(witness);  if (witnessFile.exists()) {    int skipIndex=0;    byte[] expected=new byte[actual.length];    FileInputStream is=new FileInputStream(witnessFile);    int bytesRead=is.read(expected);    is.close();    if (bytesRead < endCompare) {      assertEquals(actual.length,bytesRead);    }    int endScan=actual.length;    if (endScan > endCompare) {      endScan=endCompare;    }    for (int i=0; i < endScan; i++) {      if ((skipIndex < skip.length) && (skip[skipIndex] == i)) {        skipIndex++;      } else {        if (expected[i] != actual[i]) {          assertEquals("Difference at offset " + i,actual[i],expected[i]);        }      }    }  } else {    FileOutputStream os=new FileOutputStream(witnessFile);    os.write(actual);    os.close();    Assert.fail("Writing witness file " + witness);  }}  }
class C{  public boolean hasCategorieses(){  return super.hasElement(Categories.KEY);}  }
class C{  public final Vec2 solve(final Vec2 b){  final float a11=ex.x, a12=ey.x, a21=ex.y, a22=ey.y;  float det=a11 * a22 - a12 * a21;  if (det != 0.0f) {    det=1.0f / det;  }  final Vec2 x=new Vec2(det * (a22 * b.x - a12 * b.y),det * (a11 * b.y - a21 * b.x));  return x;}  }
class C{  void writeLocalInnerClasses(Class cls) throws IOException {  List<InnerClass> localICs=cls.getInnerClasses();  class_InnerClasses_N.putInt(localICs.size());  for (  InnerClass ic : localICs) {    class_InnerClasses_RC.putRef(ic.thisClass);    if (ic.equals(pkg.getGlobalInnerClass(ic.thisClass))) {      class_InnerClasses_F.putInt(0);    } else {      int flags=ic.flags;      if (flags == 0)       flags=ACC_IC_LONG_FORM;      class_InnerClasses_F.putInt(flags);      class_InnerClasses_outer_RCN.putRef(ic.outerClass);      class_InnerClasses_name_RUN.putRef(ic.name);    }  }}  }
class C{  private Calendars(){}  }
class C{  public void notifyObservers(Object arg){  Object[] arrLocal;synchronized (this) {    if (!changed)     return;    arrLocal=obs.toArray();    clearChanged();  }  for (int i=arrLocal.length - 1; i >= 0; i--)   ((Observer)arrLocal[i]).update(this,arg);}  }
class C{  public static double atan2(double y,double x){  if (x > 0)   return MathLib.atan(y / x);  if ((y >= 0) && (x < 0))   return MathLib.atan(y / x) + PI;  if ((y < 0) && (x < 0))   return MathLib.atan(y / x) - PI;  if ((y > 0) && (x == 0))   return PI / 2;  if ((y < 0) && (x == 0))   return -PI / 2;  return Double.NaN;}  }
class C{  public boolean hitRefresh(){  return this.map.containsKey("hit-refresh");}  }
class C{  public static int checkArgumentPositive(final int value,final String errorMessage){  if (value <= 0) {    throw new IllegalArgumentException(errorMessage);  }  return value;}  }
class C{  public JHyperlink(){  super();  normalForeground=UIManager.getColor("Hyperlink.foreground");  activeForeground=UIManager.getColor("Hyperlink.activeForeground");  visitedForeground=UIManager.getColor("Hyperlink.visitedForeground");  setBorderPainted(false);  setContentAreaFilled(false);  setForeground(normalForeground);  setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));  setMargin(new Insets(0,0,0,0));  setAction(defaultBrowseAction);}  }
class C{  public Duration multipliedBy(long multiplicand){  if (multiplicand == 0) {    return ZERO;  }  if (multiplicand == 1) {    return this;  }  return create(toSeconds().multiply(BigDecimal.valueOf(multiplicand)));}  }
class C{  public BufferedInputStream(InputStream in,int size){  super(in);  if (size <= 0) {    throw new IllegalArgumentException("Buffer size <= 0");  }  buf=new byte[size];}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:03.124 -0500",hash_original_method="C7DCB9134CAFAAB6388686E1F6701327",hash_generated_method="62831236AB3808260B941677BFCA6C2C") @Deprecated public synchronized void addPlugin(Plugin plugin){  if (!mPlugins.contains(plugin)) {    mPlugins.add(plugin);  }}  }
class C{  @Override public void draw(final Graphics g,final int x,final int y){  sprite.draw(g,x,y,this.x,this.y,width,height);}  }
class C{  public synchronized int size(){  return options.size();}  }
class C{  public void mousePressed(MouseEvent e){  if (SwingUtilities2.shouldIgnore(e,tree)) {    return;  }  if (isEditing(tree) && tree.getInvokesStopCellEditing() && !stopEditing(tree)) {    return;  }  completeEditing();  pressedPath=getClosestPathForLocation(tree,e.getX(),e.getY());  if (tree.getDragEnabled()) {    mousePressedDND(e);  } else {    SwingUtilities2.adjustFocus(tree);    handleSelection(e);  }}  }
class C{  public IndexOutOfBoundsException(String s){  super(s);}  }
class C{  public static void fixLocale(Context context){  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);  String language=prefs.getString(Global.PREF_KEY_USER_LOCALE,"");  Locale locale=Global.systemLocale;  if ((language != null) && (!language.isEmpty())) {    locale=new Locale(language);  }  if (locale != null) {    Locale.setDefault(locale);    Configuration config=new Configuration();    config.locale=locale;    Resources resources=context.getResources();    resources.updateConfiguration(config,resources.getDisplayMetrics());    if (context instanceof LocalizedActivity) {      ((LocalizedActivity)context).myLocale=locale;    }  }}  }
class C{  public static PubSubServer startServer() throws IOException {  String bindToHostName=ConfigFactory.load().getString("pubsub.server.bindto");  int bindToPort=ConfigFactory.load().getInt("pubsub.server.port");  return startServer(bindToHostName,bindToPort);}  }
class C{  private static Pair<Map<String,String>,ZyGraphViewSettings> loadNativeSettings(final INaviView view){  final ConfigManager configFile=ConfigManager.instance();  final ZyGraphViewSettings graphSettings=view.getGraphType() == GraphType.CALLGRAPH ? configFile.getDefaultCallGraphSettings() : configFile.getDefaultFlowGraphSettings();  graphSettings.getProximitySettings().setProximityBrowsing(view.getGraph().nodeCount() >= graphSettings.getProximitySettings().getProximityBrowsingActivationThreshold());  return new Pair<Map<String,String>,ZyGraphViewSettings>(new HashMap<String,String>(),graphSettings);}  }
class C{  public Rectangle modelToView(JTextComponent a,int b) throws BadLocationException {  Rectangle returnValue=((TextUI)(uis.elementAt(0))).modelToView(a,b);  for (int i=1; i < uis.size(); i++) {    ((TextUI)(uis.elementAt(i))).modelToView(a,b);  }  return returnValue;}  }
class C{  public static String toDecimal(Object value,String defaultValue){  double res=toDoubleValue(value,true,Double.NaN);  if (Double.isNaN(res))   return defaultValue;  return toDecimal(res);}  }
class C{  public void write(char cbuf[],int off,int len) throws IOException {  ensureOpen();  if (bufferSize == 0) {    initOut();    out.write(cbuf,off,len);    return;  }  if ((off < 0) || (off > cbuf.length) || (len < 0)|| ((off + len) > cbuf.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }  if (len >= bufferSize) {    if (autoFlush)     flushBuffer(); else     bufferOverflow();    initOut();    out.write(cbuf,off,len);    return;  }  int b=off, t=off + len;  while (b < t) {    int d=min(getRemaining(),t - b);    System.arraycopy(cbuf,b,buf.buf,buf.pos,d);    b+=d;    buf.pos+=d;    if (getRemaining() == 0)     if (autoFlush)     flushBuffer(); else     bufferOverflow();  }}  }
class C{  public FastMap(FastmapDistanceMatrix matrixFastmap,int dimensions,int[][] pivots){  this.matrixFastmap=matrixFastmap;  this.dimensions=dimensions;  init();  predefinedPivots=true;  PA=pivots;}  }
class C{  public SprogVersion(SprogType t,String s){  if (log.isDebugEnabled()) {    log.debug("SprogVersion(SprogType, String) ctor: " + t.toString() + "v"+ s);  }  if (log.isDebugEnabled()) {    log.debug("sprogType: " + t.sprogType);  }  sprogType=t;  sprogVersion=s;}  }
class C{  public void writeln(String str) throws IOException {  super.write(str);  newLine();}  }
class C{  public PdfGenerationException(final Throwable cause){  super(PdfView.class,Messages.getString("PdfView.errorexporting"),cause);}  }
class C{  private Transformation(){}  }
class C{  private Object writeReplace(){  return new UnmodifiableList<E>(list);}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  <T>void addProvider(BindingAmp<T> binding){  Class<T> type=(Class)binding.key().rawClass();  addBinding(type,binding);}  }
class C{  protected void prepare(){  log.info("");  m_ctx=Env.getCtx();  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (name.equals("C_BankStatementLoader_ID"))     m_C_BankStmtLoader_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("FileName"))     fileName=(String)para[i].getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  m_AD_Client_ID=Env.getAD_Client_ID(m_ctx);  log.info("AD_Client_ID=" + m_AD_Client_ID);  m_AD_Org_ID=Env.getAD_Org_ID(m_ctx);  log.info("AD_Org_ID=" + m_AD_Org_ID);  log.info("C_BankStatementLoader_ID=" + m_C_BankStmtLoader_ID);}  }
class C{  protected void endVisitNode(ASTNode node){}  }
class C{  private <T extends DataObject>boolean testSelections(JClass jc,T dobj){  List<JSelection> list=jc.getSelections();  for (  JSelection js : list) {    if (testSelection(jc,js,dobj) == false) {      return false;    }  }  return true;}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.LITERAL_OR_COMPUTED_PROPERTY_NAME__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @SuppressWarnings("unused") public static void disconnected(){  showDisposableMessage(DISCONNECTED_MESSAGE,I18n.tr("Your machine does not appear to have an active Internet connection or a firewall is blocking FrostWire from accessing the internet. FrostWire will automatically keep trying to connect you to the network unless you select \"Disconnect\" from the File menu."),QuestionsHandler.NO_INTERNET_RETRYING,JOptionPane.ERROR_MESSAGE);}  }
class C{  private void fillInternalShadow(Graphics2D g,Shape s,boolean paintRightShadow){  Rectangle bounds=s.getBounds();  int x=bounds.x;  int y=bounds.y;  int w=bounds.width;  int h=bounds.height;  s=shapeGenerator.createRectangle(x,y,w,2);  g.setPaint(getTopShadowGradient(s));  g.fill(s);  s=shapeGenerator.createRectangle(x,y,1,h);  g.setPaint(getLeftShadowGradient(s));  g.fill(s);  if (paintRightShadow) {    s=shapeGenerator.createRectangle(x + w - 1,y,1,h);    g.setPaint(getRightShadowGradient(s));    g.fill(s);  }}  }
class C{  private static Object cloneSubarray(Object[] a,int from,int to){  int n=to - from;  Object result=Array.newInstance(a.getClass().getComponentType(),n);  System.arraycopy(a,from,result,0,n);  return result;}  }
class C{  public PropertyChangeEvent(Object source,String propertyName,Object oldValue,Object newValue){  this.source=source;  this.propertyName=propertyName;  this.newValue=newValue;  this.oldValue=oldValue;}  }
class C{  public String[] parseLine(String nextLine) throws IOException {  return parseLine(nextLine,false);}  }
class C{  public ElasticsearchLeafReader(LeafReader in,ShardId shardId){  super(in);  this.shardId=shardId;}  }
class C{  public static void demo1(){  double mean=5;  double variance=1.5;  double alpha=mean * mean / variance;  double lambda=1 / (variance / mean);  cern.jet.random.engine.RandomEngine engine=new cern.jet.random.engine.MersenneTwister();  cern.jet.random.AbstractDistribution dist=new cern.jet.random.Gamma(alpha,lambda,engine);  int size=100000;  cern.colt.list.DoubleArrayList numbers=new cern.colt.list.DoubleArrayList(size);  for (int i=0; i < size; i++)   numbers.add(dist.nextDouble());}  }
class C{  protected IntList addMetadata(ArrayList<MetaData> metadata){  if (keepEmbed)   return super.addMetadata(metadata);  IntList metaDataIndices=null;  if ((metadata != null) && (metadata.size() > 0)) {    metaDataIndices=new IntList(metadata.size());    for (    MetaData metaData : metadata) {      String id=metaData.id;      if (!id.equals(StandardDefs.MD_EMBED)) {        Value[] values=metaData.values;        int metaDataIndex=addMetadataInfo(id,values);        metaDataIndices.add(metaDataIndex);      }    }  }  return metaDataIndices;}  }
class C{  static void printMATSim4UrbanSimControlerSettings(M4UControlerConfigModuleV3 module){  log.info("MATSim4UrbanSimControler settings:");  log.info("UsingShapefileLocationDistribution:" + module.usingShapefileLocationDistribution());  log.info("UrbanSimZoneShapefileLocationDistribution:" + module.getUrbansimZoneRandomLocationDistributionShapeFile());  log.info("RandomLocationDistributionRadiusForUrbanSimZone:" + module.getUrbanSimZoneRadiusLocationDistribution());}  }
class C{  public void run(){  if (ExecutionThread.currentThread().isKilled())   return;  varPath.getValue().assignValue(expression.evaluate());}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.TRACE_CASE___TRACE_CASE_DEF_1:    return ((InternalEList<?>)getTraceCaseDef_1()).basicRemove(otherEnd,msgs);case UmplePackage.TRACE_CASE___TRACE_CASE_ACTIVATION_1:  return ((InternalEList<?>)getTraceCaseActivation_1()).basicRemove(otherEnd,msgs);case UmplePackage.TRACE_CASE___TRACE_CASE_DEACTIVATION_1:return ((InternalEList<?>)getTraceCaseDeactivation_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public T caseTransition(Transition object){  return null;}  }
class C{  public static <T>T var(Var<T> var,T value){  return var.value=value;}  }
class C{  private List<Target> generateTargets(final int noOfTgts,final String controllerIdPrefix,final String descriptionPrefix,final TargetTag[] tags){  final List<Target> list=new ArrayList<>();  for (int i=0; i < noOfTgts; i++) {    String ctrlID=controllerIdPrefix;    if (Strings.isNullOrEmpty(ctrlID)) {      ctrlID=UUID.randomUUID().toString();    }    ctrlID=String.format("%s-%05d",ctrlID,i);    final String description=descriptionPrefix + DEFAULT_DESCRIPTION;    final Target target=generateTarget(ctrlID,description,tags);    list.add(target);  }  return list;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  protected S_DisplayImpl(){  super();}  }
class C{  public static Method findMethod(Class<?> type,String name,Class<?>... args) throws NoSuchMethodException {  if (name == null) {    throw new IllegalArgumentException("Method name is not set");  }  PrimitiveWrapperMap.replacePrimitivesWithWrappers(args);  Signature signature=new Signature(type,name,args);  try {    Method method=CACHE.get(signature);    return (method == null) || isPackageAccessible(method.getDeclaringClass()) ? method : CACHE.create(signature);  } catch (  SignatureException exception) {    throw exception.toNoSuchMethodException("Method '" + name + "' is not found");  }}  }
class C{  protected void configureJndi(){  try {    System.setProperty(Context.INITIAL_CONTEXT_FACTORY,"org.apache.xbean.spring.jndi.SpringInitialContextFactory");    new InitialContext();  } catch (  NamingException ex) {    logger.error("Error configurando jndi para los test",ex);  }}  }
class C{  private String userAgent(){  return mUserAgent;}  }
class C{  public void paintListBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static PropertyHandler configurePropertyHandler(String propertiesFile){  try {    return new PropertyHandler.Builder().setPropertiesFile(propertiesFile).build();  } catch (  MalformedURLException murle) {    getLogger().log(Level.WARNING,murle.getMessage(),murle);  }catch (  IOException ioe) {    getLogger().log(Level.WARNING,ioe.getMessage(),ioe);  }  return new PropertyHandler();}  }
class C{  @Override public boolean flingToEnd(Selector obj,boolean isVertical,int maxSwipes) throws UiObjectNotFoundException {  UiScrollable scrollable=new UiScrollable(obj.toUiSelector());  if (isVertical)   scrollable.setAsVerticalList(); else   scrollable.setAsHorizontalList();  return scrollable.flingToEnd(maxSwipes);}  }
class C{  public void addPath(int[] path){  paths.add(path);}  }
class C{  public void commitTransaction(){  log.trace("commitTransaction({})",sessionFactoryName);  Transaction tx=getSession().getTransaction();  if (tx.isActive() && !tx.wasCommitted()) {    tx.commit();  }}  }
class C{  public static byte[] nextBytes(final int count){  Validate.isTrue(count >= 0,"Count cannot be negative.");  final byte[] result=new byte[count];  RANDOM.nextBytes(result);  return result;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public String defaultValue(){  return defaultValue;}  }
class C{  private String checkInService(){  String msg=null;  for (int i=0; i < _orders.size(); i++) {    BlockOrder bo=_orders.get(i);    OBlock block=bo.getBlock();    if ((block.getState() & OBlock.OUT_OF_SERVICE) != 0) {      _orders.get(0).getBlock().deAllocate(this);      msg=Bundle.getMessage("UnableToAllocate",getDisplayName()) + Bundle.getMessage("BlockOutOfService",block.getDisplayName());      break;    }  }  return msg;}  }
class C{  private boolean checkChange(MRequestAction ra,String columnName){  if (is_ValueChanged(columnName)) {    Object value=get_ValueOld(columnName);    if (value == null)     ra.addNullColumn(columnName); else     ra.set_ValueNoCheck(columnName,value);    m_changed=true;    return true;  }  return false;}  }
class C{  static ZoneRules readExternal(DataInput in) throws IOException, ClassNotFoundException {  int stdSize=in.readInt();  long[] stdTrans=(stdSize == 0) ? EMPTY_LONG_ARRAY : new long[stdSize];  for (int i=0; i < stdSize; i++) {    stdTrans[i]=Ser.readEpochSec(in);  }  ZoneOffset[] stdOffsets=new ZoneOffset[stdSize + 1];  for (int i=0; i < stdOffsets.length; i++) {    stdOffsets[i]=Ser.readOffset(in);  }  int savSize=in.readInt();  long[] savTrans=(savSize == 0) ? EMPTY_LONG_ARRAY : new long[savSize];  for (int i=0; i < savSize; i++) {    savTrans[i]=Ser.readEpochSec(in);  }  ZoneOffset[] savOffsets=new ZoneOffset[savSize + 1];  for (int i=0; i < savOffsets.length; i++) {    savOffsets[i]=Ser.readOffset(in);  }  int ruleSize=in.readByte();  ZoneOffsetTransitionRule[] rules=(ruleSize == 0) ? EMPTY_LASTRULES : new ZoneOffsetTransitionRule[ruleSize];  for (int i=0; i < ruleSize; i++) {    rules[i]=ZoneOffsetTransitionRule.readExternal(in);  }  return new ZoneRules(stdTrans,stdOffsets,savTrans,savOffsets,rules);}  }
class C{  public String sqlMetadata_triggerTables(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_triggerTables(catalogName,schemaName);}  }
class C{  public void testDoubleValue(){  LongAccumulator ai=new LongAccumulator(null,0L);  assertEquals(0.0,ai.doubleValue());  ai.accumulate(1);  assertEquals(1.0,ai.doubleValue());}  }
class C{  public static void denseDenseMatmult(Pointer output,int leftRows1,int leftCols1,int rightRows1,int rightCols1,boolean isLeftTransposed1,boolean isRightTransposed1,Pointer leftPtr,Pointer rightPtr) throws DMLRuntimeException {  Pointer A=rightPtr;  Pointer B=leftPtr;  int leftRows=rightCols1;  int leftCols=rightRows1;  int rightRows=leftCols1;  int rightCols=leftRows1;  boolean isLeftTransposed=isRightTransposed1;  boolean isRightTransposed=isLeftTransposed1;  int m=(int)(isLeftTransposed ? leftCols : leftRows);  int n=(int)(isRightTransposed ? rightRows : rightCols);  int k=(int)(isLeftTransposed ? leftRows : leftCols);  int k1=(int)(isRightTransposed ? rightCols : rightRows);  if (k != k1)   throw new DMLRuntimeException("Dimension mismatch: " + k + " != "+ k1);  if (m == -1 || n == -1 || k == -1)   throw new DMLRuntimeException("Incorrect dimensions");  double[] one={1};  double[] zero={0};  int lda=isLeftTransposed ? k : m;  int ldb=isRightTransposed ? n : k;  int ldc=m;  int transa=isLeftTransposed ? cublasOperation.CUBLAS_OP_T : cublasOperation.CUBLAS_OP_N;  int transb=isRightTransposed ? cublasOperation.CUBLAS_OP_T : cublasOperation.CUBLAS_OP_N;  Pointer C=output;  if (m == 1 && n == 1) {    LOG.debug(" GPU Dense-dense Vector Product");    double[] result={0};    JCublas2.cublasDdot(cublasHandle,k,A,1,B,1,Pointer.to(result));    cudaMemcpy(C,Pointer.to(result),1 * Sizeof.DOUBLE,cudaMemcpyHostToDevice);  } else   if (m == 1) {    LOG.debug(" GPU Dense Vector-Matrix Multiply");    transb=isRightTransposed ? cublasOperation.CUBLAS_OP_N : cublasOperation.CUBLAS_OP_T;    JCublas2.cublasDgemv(cublasHandle,transb,rightRows,rightCols,Pointer.to(one),B,ldb,A,1,Pointer.to(zero),C,1);  } else   if (n == 1) {    LOG.debug(" GPU Dense Matrix-Vector Multiply");    JCublas2.cublasDgemv(cublasHandle,transa,leftRows,leftCols,Pointer.to(one),A,lda,B,1,Pointer.to(zero),C,1);  } else {    LOG.debug(" GPU Dense-Dense Matrix Multiply ");    JCublas2.cublasDgemm(cublasHandle,transa,transb,m,n,k,Pointer.to(one),A,lda,B,ldb,Pointer.to(zero),C,ldc);  }}  }
class C{  private void updateReplicatedDatastoreCount(final State current,String imageId,Operation.CompletionHandler completionHandler){  ImageService.DatastoreCountRequest datastoreCountRequest=new ImageService.DatastoreCountRequest();  datastoreCountRequest.amount=-1;  if (current.isImageDatastore) {    datastoreCountRequest.kind=ImageService.DatastoreCountRequest.Kind.ADJUST_SEEDING_AND_REPLICATION_COUNT;  } else {    datastoreCountRequest.kind=ImageService.DatastoreCountRequest.Kind.ADJUST_REPLICATION_COUNT;  }  sendRequest(getCloudStoreHelper().createPatch(ServiceUriPaths.CLOUDSTORE_ROOT + "/images/" + imageId).setBody(datastoreCountRequest).setCompletion(completionHandler));}  }
class C{  @Override public void shutdown(){  if (_cimConnectionManager != null) {    try {      _cimConnectionManager.shutdown();    } catch (    ConnectionManagerException cme) {      s_logger.error("An exception occurred shutting down connection manager reference.",cme);    }  } else {    s_logger.error("Failed shutting down CIM storage monitor due to null connection manager reference.");  }}  }
class C{  public void removeRow(Value head){  table.remove(head);}  }
class C{  public static int dehexchar(char c){  if (c >= '0' && c <= '9') {    return c - '0';  }  if (c >= 'A' && c <= 'F') {    return c - ('A' - 10);  }  if (c >= 'a' && c <= 'f') {    return c - ('a' - 10);  }  return -1;}  }
class C{  public int hashCode(){  return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7;}  }
class C{  public void clearDiskCaches(){  mMainBufferedDiskCache.clearAll();  mSmallImageBufferedDiskCache.clearAll();}  }
class C{  public void saveSelection(){  miniTable.editingStopped(new ChangeEvent(this));  genForm.saveSelection(miniTable);}  }
class C{  private void initTrustManager(final KeyStore keystore) throws GeneralSecurityException, IOException {  TrustManagerFactory tmf=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());  tmf.init(keystore);  TrustManager[] tms=tmf.getTrustManagers();  for (  final TrustManager tm : tms) {    if (tm instanceof X509TrustManager) {      trustManager=(X509TrustManager)tm;      return;    }  }  throw new NoSuchAlgorithmException("No X509TrustManager in TrustManagerFactory");}  }
class C{  public void resetCropOverlayView(){  if (initializedCropWindow) {    initCropWindow(mBitmapRect);    invalidate();  }}  }
class C{  public static byte[] decodeLines(String s){  final char[] buf=new char[s.length()];  int p=0;  for (int ip=0; ip < s.length(); ip++) {    final char c=s.charAt(ip);    if (c != ' ' && c != '\r' && c != '\n' && c != '\t') {      buf[p++]=c;    }  }  return decode(buf,0,p);}  }
class C{  private Object _evaluateLeftLessRight(Object element,String lvalue,String rvalue){  if (element instanceof List) {    return evaluateLeftLessRight((List)element,lvalue,rvalue);  } else {    return evaluateLeftLessRight((StructuredContent)element,lvalue,rvalue);  }}  }
class C{  void updateConditionalPressed(ActionEvent e){  if (alreadyEditingActionOrVariable()) {    return;  }  if (!LRouteTableAction.LOGIX_INITIALIZER.equals(_curLogix.getSystemName())) {    for (int i=0; i < _variableList.size(); i++) {      if (_variableList.get(i).getType() == Conditional.TYPE_NONE) {        _variableList.remove(i);        _variableTableModel.fireTableRowsDeleted(i,i);      }    }  }  for (int i=0; i < _actionList.size(); i++) {    if (_actionList.get(i).getType() == Conditional.ACTION_NONE) {      _actionList.remove(i);      _actionTableModel.fireTableRowsDeleted(i,i);    }  }  if (_variableList.size() <= 0 && _actionList.size() <= 0) {    deleteConditionalPressed(null);    return;  }  if (_curLogix.getSystemName().equals(SensorGroupFrame.logixSysName)) {    javax.swing.JOptionPane.showMessageDialog(editConditionalFrame,java.text.MessageFormat.format(rbx.getString("Warn8"),new Object[]{SensorGroupFrame.logixUserName,SensorGroupFrame.logixSysName}) + java.text.MessageFormat.format(rbx.getString("Warn11"),new Object[]{_curConditional.getUserName(),_curConditional.getSystemName()}),Bundle.getMessage("WarningTitle"),javax.swing.JOptionPane.WARNING_MESSAGE);    cancelConditionalPressed(null);    return;  }  String uName=conditionalUserName.getText().trim();  if (!uName.equals(_curConditional.getUserName())) {    if (!checkConditionalUserName(uName,_curLogix)) {      return;    }    _curConditional.setUserName(uName);    conditionalTableModel.fireTableDataChanged();  }  if (_variableList.size() <= 0 && !_suppressReminder) {    javax.swing.JOptionPane.showMessageDialog(editLogixFrame,java.text.MessageFormat.format(rbx.getString("Warn5"),new Object[]{_curConditional.getUserName(),_curConditional.getSystemName()}),Bundle.getMessage("WarningTitle"),javax.swing.JOptionPane.WARNING_MESSAGE);  }  if (!validateAntecedent()) {    return;  }  _curConditional.setStateVariables(_variableList);  _curConditional.setAction(_actionList);  _curConditional.setLogicType(_logicType,_antecedent);  _curConditional.setTriggerOnChange(_triggerOnChangeButton.isSelected());  cancelConditionalPressed(null);}  }
class C{  public static RequestInfo markAsRemoved(RequestInfo requestInfo){  RequestInfo result=getCopy(requestInfo);  result.removedTime=new Date();  return result;}  }
class C{  public Object readRef() throws IOException {  return _refs.get(parseInt());}  }
class C{  public void addStorageResolver(StorageResolver storageResolver){  if (storageResolvers == nullList) {    storageResolvers=new ArrayList<StorageResolver>();  }  this.storageResolvers.add(storageResolver);}  }
class C{  private void loadCurrencies(){  s_Currencies=new Hashtable<Integer,KeyNamePair>(12);  String SQL="SELECT C_Currency_ID, ISO_Code FROM C_Currency " + "WHERE (IsEMUMember='Y' AND EMUEntryDate<SysDate) OR IsEuro='Y' " + "ORDER BY 2";  try {    PreparedStatement pstmt=DB.prepareStatement(SQL,null);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      int id=rs.getInt(1);      String name=rs.getString(2);      s_Currencies.put(new Integer(id),new KeyNamePair(id,name));    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,SQL,e);  }}  }
class C{  public synchronized void checkAccess(ThreadGroup g){  if (inThreadGroupCheck) {    checkPermission(SecurityConstants.MODIFY_THREADGROUP_PERMISSION);  } else {    try {      inThreadGroupCheck=true;      if (!inThreadGroup(g)) {        checkPermission(SecurityConstants.MODIFY_THREADGROUP_PERMISSION);      }    }  finally {      inThreadGroupCheck=false;    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isStrategyWorkerRunning(final Tradingday tradingday){  for (  Tradestrategy tradestrategy : tradingday.getTradestrategies()) {    if (isStrategyWorkerRunning(tradestrategy)) {      return true;    }  }  return false;}  }
class C{  public void dump(String prefix,FileDescriptor fd,PrintWriter writer,String[] args){  writer.print(prefix);  writer.print("mFragmentId=#");  writer.print(Integer.toHexString(mFragmentId));  writer.print(" mContainerId=#");  writer.print(Integer.toHexString(mContainerId));  writer.print(" mTag=");  writer.println(mTag);  writer.print(prefix);  writer.print("mState=");  writer.print(mState);  writer.print(" mIndex=");  writer.print(mIndex);  writer.print(" mWho=");  writer.print(mWho);  writer.print(" mBackStackNesting=");  writer.println(mBackStackNesting);  writer.print(prefix);  writer.print("mAdded=");  writer.print(mAdded);  writer.print(" mRemoving=");  writer.print(mRemoving);  writer.print(" mResumed=");  writer.print(mResumed);  writer.print(" mFromLayout=");  writer.print(mFromLayout);  writer.print(" mInLayout=");  writer.println(mInLayout);  writer.print(prefix);  writer.print("mHidden=");  writer.print(mHidden);  writer.print(" mDetached=");  writer.print(mDetached);  writer.print(" mMenuVisible=");  writer.print(mMenuVisible);  writer.print(" mHasMenu=");  writer.println(mHasMenu);  writer.print(prefix);  writer.print("mRetainInstance=");  writer.print(mRetainInstance);  writer.print(" mRetaining=");  writer.print(mRetaining);  writer.print(" mUserVisibleHint=");  writer.println(mUserVisibleHint);  if (mFragmentManager != null) {    writer.print(prefix);    writer.print("mFragmentManager=");    writer.println(mFragmentManager);  }  if (mActivity != null) {    writer.print(prefix);    writer.print("mActivity=");    writer.println(mActivity);  }  if (mParentFragment != null) {    writer.print(prefix);    writer.print("mParentFragment=");    writer.println(mParentFragment);  }  if (mArguments != null) {    writer.print(prefix);    writer.print("mArguments=");    writer.println(mArguments);  }  if (mSavedFragmentState != null) {    writer.print(prefix);    writer.print("mSavedFragmentState=");    writer.println(mSavedFragmentState);  }  if (mSavedViewState != null) {    writer.print(prefix);    writer.print("mSavedViewState=");    writer.println(mSavedViewState);  }  if (mTarget != null) {    writer.print(prefix);    writer.print("mTarget=");    writer.print(mTarget);    writer.print(" mTargetRequestCode=");    writer.println(mTargetRequestCode);  }  if (mNextAnim != 0) {    writer.print(prefix);    writer.print("mNextAnim=");    writer.println(mNextAnim);  }  if (mContainer != null) {    writer.print(prefix);    writer.print("mContainer=");    writer.println(mContainer);  }  if (mView != null) {    writer.print(prefix);    writer.print("mView=");    writer.println(mView);  }  if (mAnimatingAway != null) {    writer.print(prefix);    writer.print("mAnimatingAway=");    writer.println(mAnimatingAway);    writer.print(prefix);    writer.print("mStateAfterAnimating=");    writer.println(mStateAfterAnimating);  }  if (mLoaderManager != null) {    writer.print(prefix);    writer.println("Loader Manager:");    mLoaderManager.dump(prefix + "  ",fd,writer,args);  }  if (mChildFragmentManager != null) {    writer.print(prefix);    writer.println("Child " + mChildFragmentManager + ":");    mChildFragmentManager.dump(prefix + "  ",fd,writer,args);  }}  }
class C{  static private boolean tryCancelUpdate(final BigdataRDFContext context,final UUID queryId){  final RunningQuery query=context.getQueryById(queryId);  if (query != null) {    if (query.queryTask instanceof UpdateTask) {      final Future<Void> f=((UpdateTask)query.queryTask).updateFuture;      if (f != null) {        if (f.cancel(true)) {          return true;        }      }    }  }  return false;}  }
class C{  protected void put(String propName,Object propValue){  properties.put(propName,propValue);}  }
class C{  public ConnectionEndHandle(ConnectionFigure owner){  super(owner);}  }
class C{  @Override public Void visitBinary(BinaryTree node,Void p){  if (!(node.getKind() == Tree.Kind.EQUAL_TO || node.getKind() == Tree.Kind.NOT_EQUAL_TO)) {    return super.visitBinary(node,p);  }  ExpressionTree leftOp=node.getLeftOperand();  ExpressionTree rightOp=node.getRightOperand();  if (leftOp.getKind() == Tree.Kind.NULL_LITERAL || rightOp.getKind() == Tree.Kind.NULL_LITERAL) {    return super.visitBinary(node,p);  }  AnnotatedTypeMirror left=atypeFactory.getAnnotatedType(leftOp);  AnnotatedTypeMirror right=atypeFactory.getAnnotatedType(rightOp);  if (left.getKind().isPrimitive() || right.getKind().isPrimitive()) {    return super.visitBinary(node,p);  }  if (!shouldCheckExpression(leftOp) && !shouldCheckExpression(rightOp)) {    return super.visitBinary(node,p);  }  if (suppressInsideComparison(node)) {    return super.visitBinary(node,p);  }  if (suppressEarlyEquals(node)) {    return super.visitBinary(node,p);  }  if (suppressEarlyCompareTo(node)) {    return super.visitBinary(node,p);  }  if (suppressEqualsIfClassIsAnnotated(left,right)) {    return super.visitBinary(node,p);  }  Element leftElt=null;  Element rightElt=null;  if (left instanceof AnnotatedTypeMirror.AnnotatedDeclaredType) {    leftElt=((DeclaredType)left.getUnderlyingType()).asElement();  }  if (right instanceof AnnotatedTypeMirror.AnnotatedDeclaredType) {    rightElt=((DeclaredType)right.getUnderlyingType()).asElement();  }  if (!(left.hasEffectiveAnnotation(INTERNED) || (leftElt != null && leftElt.getAnnotation(UsesObjectEquals.class) != null))) {    checker.report(Result.failure("not.interned",left),leftOp);  }  if (!(right.hasEffectiveAnnotation(INTERNED) || (rightElt != null && rightElt.getAnnotation(UsesObjectEquals.class) != null))) {    checker.report(Result.failure("not.interned",right),rightOp);  }  return super.visitBinary(node,p);}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        int b=in.read();        if (b >= 0) {          b3[i]=(byte)b;          numBinaryBytes++;        } else {          break;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  public synchronized void clearNextResult(){  this.nextResultSet=null;}  }
class C{  public boolean rowUpdated() throws SQLException {  checkCursor();  if (onInsertRow == true) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.invalidop").toString());  }  return (((Row)getCurrentRow()).getUpdated());}  }
class C{  private int insertTestDataLocalDTTypes(PreparedStatement pstmt) throws Exception {  pstmt.setInt(1,1);  pstmt.setDate(2,testSqlDate);  pstmt.setTime(3,testSqlTime);  pstmt.setTimestamp(4,testSqlTimeStamp);  pstmt.setTimestamp(5,testSqlTimeStamp);  assertEquals(1,pstmt.executeUpdate());  pstmt.setInt(1,2);  pstmt.setObject(2,testLocalDate);  pstmt.setObject(3,testLocalTime);  pstmt.setObject(4,testLocalDateTime);  pstmt.setObject(5,testLocalDateTime);  assertEquals(1,pstmt.executeUpdate());  pstmt.setInt(1,3);  pstmt.setObject(2,testLocalDate,JDBCType.DATE);  pstmt.setObject(3,testLocalTime,JDBCType.TIME);  pstmt.setObject(4,testLocalDateTime,JDBCType.TIMESTAMP);  pstmt.setObject(5,testLocalDateTime,JDBCType.TIMESTAMP);  assertEquals(1,pstmt.executeUpdate());  pstmt.setInt(1,4);  pstmt.setObject(2,testLocalDate,JDBCType.DATE,10);  pstmt.setObject(3,testLocalTime,JDBCType.TIME,8);  pstmt.setObject(4,testLocalDateTime,JDBCType.TIMESTAMP,20);  pstmt.setObject(5,testLocalDateTime,JDBCType.TIMESTAMP,20);  assertEquals(1,pstmt.executeUpdate());  pstmt.setInt(1,5);  pstmt.setObject(2,testLocalDate,JDBCType.VARCHAR);  pstmt.setObject(3,testLocalTime,JDBCType.VARCHAR);  pstmt.setObject(4,testLocalDateTime,JDBCType.VARCHAR);  pstmt.setObject(5,testLocalDateTime,JDBCType.VARCHAR);  assertEquals(1,pstmt.executeUpdate());  pstmt.setInt(1,6);  pstmt.setObject(2,testLocalDate,JDBCType.VARCHAR,10);  pstmt.setObject(3,testLocalTime,JDBCType.VARCHAR,8);  pstmt.setObject(4,testLocalDateTime,JDBCType.VARCHAR,20);  pstmt.setObject(5,testLocalDateTime,JDBCType.VARCHAR,20);  assertEquals(1,pstmt.executeUpdate());  if (pstmt instanceof CallableStatement) {    CallableStatement cstmt=(CallableStatement)pstmt;    cstmt.setInt("id",7);    cstmt.setDate("d",testSqlDate);    cstmt.setTime("t",testSqlTime);    cstmt.setTimestamp("dt",testSqlTimeStamp);    cstmt.setTimestamp("ts",testSqlTimeStamp);    assertEquals(1,cstmt.executeUpdate());    cstmt.setInt("id",8);    cstmt.setObject("d",testLocalDate);    cstmt.setObject("t",testLocalTime);    cstmt.setObject("dt",testLocalDateTime);    cstmt.setObject("ts",testLocalDateTime);    assertEquals(1,cstmt.executeUpdate());    cstmt.setInt("id",9);    cstmt.setObject("d",testLocalDate,JDBCType.DATE);    cstmt.setObject("t",testLocalTime,JDBCType.TIME);    cstmt.setObject("dt",testLocalDateTime,JDBCType.TIMESTAMP);    cstmt.setObject("ts",testLocalDateTime,JDBCType.TIMESTAMP);    assertEquals(1,cstmt.executeUpdate());    cstmt.setInt("id",10);    cstmt.setObject("d",testLocalDate,JDBCType.DATE,10);    cstmt.setObject("t",testLocalTime,JDBCType.TIME,8);    cstmt.setObject("dt",testLocalDateTime,JDBCType.TIMESTAMP,20);    cstmt.setObject("ts",testLocalDateTime,JDBCType.TIMESTAMP,20);    assertEquals(1,cstmt.executeUpdate());    cstmt.setInt("id",11);    cstmt.setObject("d",testLocalDate,JDBCType.VARCHAR);    cstmt.setObject("t",testLocalTime,JDBCType.VARCHAR);    cstmt.setObject("dt",testLocalDateTime,JDBCType.VARCHAR);    cstmt.setObject("ts",testLocalDateTime,JDBCType.VARCHAR);    assertEquals(1,cstmt.executeUpdate());    cstmt.setInt("id",12);    cstmt.setObject("d",testLocalDate,JDBCType.VARCHAR,10);    cstmt.setObject("t",testLocalTime,JDBCType.VARCHAR,8);    cstmt.setObject("dt",testLocalDateTime,JDBCType.VARCHAR,20);    cstmt.setObject("ts",testLocalDateTime,JDBCType.VARCHAR,20);    assertEquals(1,cstmt.executeUpdate());    return 12;  }  return 6;}  }
class C{  public synchronized void finest(String sourceClass,String sourceMethod,String msg){  LogRecord record=new LogRecord(Level.FINEST,msg);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  log(record);}  }
class C{  public final void writeChildren(ObjectOutputStream oos) throws IOException {  boolean origSer=serializing;  serializing=true;  try {    int count=0;synchronized (children) {      for (Iterator<?> iter=children.values().iterator(); iter.hasNext(); ) {        BCSChild bcsc=(BCSChild)iter.next();        if (bcsc.child instanceof Serializable && (bcsc.proxyPeer == null || bcsc.proxyPeer instanceof Serializable)) {          oos.writeObject(bcsc.child);          oos.writeObject(bcsc);          count++;        }      }    }    if (count != serializable) {      throw new IOException(Messages.getString("beans.6F"));    }  }  finally {    serializing=origSer;  }}  }
class C{  public RuntimeCryptoException(String message){  super(message);}  }
class C{  private static String replaceWildcards(String input){  StringBuffer buffer=new StringBuffer();  char[] chars=input.toCharArray();  for (int i=0; i < chars.length; i++) {    if (chars[i] == '*') {      buffer.append(".*");    } else     if (chars[i] == '?') {      buffer.append(".{1}");    } else     if ("+()^$.{}[]|\\".indexOf(chars[i]) != -1) {      buffer.append('\\').append(chars[i]);    } else {      buffer.append(chars[i]);    }  }  return buffer.toString();}  }
class C{  private synchronized void updateEffectiveLevel(ClassLoader loader){  if (loader == null)   loader=_systemClassLoader;  int oldEffectiveLevel=getEffectiveLevel(loader);  Level newEffectiveLevel=calculateEffectiveLevel(loader);  if (oldEffectiveLevel == newEffectiveLevel.intValue() && loader != _systemClassLoader)   return;  _finestEffectiveLevel=newEffectiveLevel;  _hasLocalEffectiveLevel=false;  updateEffectiveLevelPart(_systemClassLoader);  updateEffectiveLevelPart(loader);  for (int i=0; i < _loaders.size(); i++) {    WeakReference<ClassLoader> loaderRef=_loaders.get(i);    ClassLoader classLoader=loaderRef.get();    if (classLoader != null)     updateEffectiveLevelPart(classLoader);  }  super.setLevel(_finestEffectiveLevel);  _finestEffectiveLevelValue=_finestEffectiveLevel.intValue();  updateChildren();}  }
class C{  String readMonth(String source,int ofs,String token,boolean adjacent){  if (token.length() < 3) {    if (adjacent) {      return source.substring(ofs,ofs + token.length());    }    if (isNumeric(source.charAt(0))) {      return readNumber(source,ofs,token,adjacent);    }  }  int i=findEndText(source,ofs);  if (i == -1) {    i=source.length();  }  String fragment=source.substring(ofs,i);  for (  String month : getDateFormatSymbols().getMonths()) {    if (fragment.equalsIgnoreCase(month)) {      return source.substring(ofs,ofs + month.length());    }  }  for (  String month : getDateFormatSymbols().getShortMonths()) {    if (fragment.equalsIgnoreCase(month)) {      return source.substring(ofs,ofs + month.length());    }  }  return null;}  }
class C{  boolean hasChildren(){  return labels.length > 0;}  }
class C{  private void turnOnLogging(boolean logXML){  ConsoleHandler logHandler=new ConsoleHandler();  logHandler.setLevel(Level.ALL);  Logger httpLogger=Logger.getLogger(HttpGDataRequest.class.getName());  httpLogger.setLevel(Level.ALL);  httpLogger.addHandler(logHandler);  if (logXML) {    Logger xmlLogger=Logger.getLogger(XmlParser.class.getName());    xmlLogger.setLevel(Level.ALL);    xmlLogger.addHandler(logHandler);  }}  }
class C{  private void displayEndScreen(){  getFragmentManager().popBackStack(GameViews.START_MENU_TAG,0);  getFragmentManager().beginTransaction().replace(R.id.container,mGameViews.getEndSummaryFragment(),GameViews.END_SUMMARY_TAG).addToBackStack(null).commit();  getFragmentManager().executePendingTransactions();  ArrayList<String> fictionalProgress=new ArrayList<>();  ArrayList<String> fitnessResults=new ArrayList<>();  if (mMainService != null) {    fictionalProgress.addAll(mMainService.getOverallFictionalProgress());    fitnessResults.addAll(mMainService.getFitnessStatistics());  }  mGameViews.getEndSummaryFragment().displayStats(fictionalProgress,fitnessResults);  if (mMainService.unlockAchievement(getString(R.string.ach_id_first_mission))) {    Utils.logDebug(TAG,"Achievement Unlocked: First Mission");  } else {    Utils.logDebug(TAG,"Warning: could not unlock achievement, not connected");  }  if (mMainService != null) {    mMainService.reset();  }  displayHomeUp(true);}  }
class C{  public static void clear(){  CPluginOutputDialog.instance().clear();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentgetelementsbytagnametotallength.class,args);}  }
class C{  public void clearLocalSlots(int start,int len){  start+=_currentFrameBottom;  System.arraycopy(m_nulls,0,_stackFrames,start,len);}  }
class C{  public void recycle(){  mTextureFront=Bitmap.createBitmap(1,1,Bitmap.Config.RGB_565);  mTextureFront.eraseColor(mColorFront);  mTextureBack=Bitmap.createBitmap(1,1,Bitmap.Config.RGB_565);  mTextureBack.eraseColor(mColorBack);  mTexturesChanged=false;}  }
class C{  Intent createHomeDockIntent(){  Intent intent=null;  if (mUiMode == Configuration.UI_MODE_TYPE_CAR) {    if (ENABLE_CAR_DOCK_HOME_CAPTURE) {      intent=mCarDockIntent;    }  } else   if (mUiMode == Configuration.UI_MODE_TYPE_DESK) {    if (ENABLE_DESK_DOCK_HOME_CAPTURE) {      intent=mDeskDockIntent;    }  }  if (intent == null) {    return null;  }  ActivityInfo ai=null;  ResolveInfo info=mContext.getPackageManager().resolveActivityAsUser(intent,PackageManager.MATCH_DEFAULT_ONLY | PackageManager.GET_META_DATA,mCurrentUser);  if (info != null) {    ai=info.activityInfo;  }  if (ai != null && ai.metaData != null && ai.metaData.getBoolean(Intent.METADATA_DOCK_HOME)) {    intent=new Intent(intent);    intent.setClassName(ai.packageName,ai.name);    return intent;  }  return null;}  }
class C{  private String runMessageExchange(boolean withDestination){  String msgIds="";  int nrof=5;  DTNHost dst=h4;  DTNHost other=h2;  clock.setTime(0.0);  newMessage("1",h1,dst);  clock.advance(2.5);  newMessage("2",h1,dst);  clock.advance(3.5);  newMessage("3",h1,dst);  clock.advance(1.5);  newMessage("3",h1,dst);  clock.advance(2.0);  newMessage("4",h1,dst);  clock.advance(2.5);  ;  newMessage("5",h1,dst);  if (withDestination) {    h1.connect(dst);  } else {    h1.connect(other);  }  mc.reset();  updateAllNodes();  assertTrue(mc.next());  assertEquals(mc.TYPE_START,mc.getLastType());  for (int i=0; i < nrof; i++) {    msgIds+=mc.getLastMsg().getId() + " ";    clock.advance(10);    updateAllNodes();    assertTrue("index " + i,mc.next());    assertEquals(mc.TYPE_RELAY,mc.getLastType());    if (i < nrof - 1) {      assertTrue("index " + i,mc.next());      assertEquals(mc.TYPE_START,mc.getLastType());    }  }  assertFalse(mc.next());  return msgIds;}  }
class C{  private static int decodeSingleRoman(char letter){switch (letter) {case 'M':    return 1000;case 'D':  return 500;case 'C':return 100;case 'L':return 50;case 'X':return 10;case 'V':return 5;case 'I':return 1;default :return 0;}}  }
class C{  public int hashCode(){  return super.hashCode();}  }
class C{  public void addChild(Element childElement){  setChildParent(childElement);  children.add(childElement);}  }
class C{  public void reset(){  mReceivedFlags=new ArrayList<>();  for (  final Flag f : mRegisteredFlags) {    f.reset();  }  for (  final Flag f : mAnonymousFlags) {    f.reset();  }  setParseMessage("");}  }
class C{  private <T extends Holiday>boolean isValidInYear(T h,int year){  return (h.getValidFrom() == null || h.getValidFrom() <= year) && (h.getValidTo() == null || h.getValidTo() >= year);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void close(){  for (  final INaviOperandTreeNode node : getNodes()) {    node.close();  }}  }
class C{  public final AssertSubscriber<T> assertComplete(){  assertNoError();  int c=completionCount;  if (c == 0) {    throw new AssertionError("Not completed",null);  }  if (c > 1) {    throw new AssertionError("Multiple completions: " + c,null);  }  return this;}  }
class C{  public void clearPayload(){  checkMutable();  this.payload=new byte[]{};}  }
class C{  @Override public void registerTap(Tap tap){  if (mLSMDemodulator != null) {    mLSMDemodulator.registerTap(tap);  }switch (tap.getName()) {case INSTRUMENT_BASEBAND_FILTER_OUTPUT:    ComplexSampleTap baseband=(ComplexSampleTap)tap;  mStreamConverter.setListener(baseband);baseband.setListener(mAGC);break;case INSTRUMENT_AGC_OUTPUT:ComplexSampleTap agcSymbol=(ComplexSampleTap)tap;mAGC.setListener(agcSymbol);agcSymbol.setListener(mLSMDemodulator);break;case INSTRUMENT_LSM_DEMODULATOR_OUTPUT:QPSKTap qpsk=(QPSKTap)tap;mLSMDemodulator.setSymbolListener(qpsk);qpsk.setListener(mQPSKSlicer);break;case INSTRUMENT_QPSK_SLICER_OUTPUT:mQPSKSlicer.addListener((DibitTap)tap);break;default :throw new IllegalArgumentException("Unrecognized tap: " + tap.getName());}}  }
class C{  public Group createGroup(){  GroupImpl group=new GroupImpl();  return group;}  }
class C{  public Builder newBuilder(){  return new Builder(this);}  }
class C{  public int recycleItems(LinearLayout layout,int firstItem,ItemsRange range){  int index=firstItem;  for (int i=0; i < layout.getChildCount(); ) {    if (!range.contains(index)) {      recycleView(layout.getChildAt(i),index);      layout.removeViewAt(i);      if (i == 0) {        firstItem++;      }    } else {      i++;    }    index++;  }  return firstItem;}  }
class C{  protected void updateWorkingDirectory(ILaunchConfiguration configuration){  String workingDir=IExternalToolConstants.EMPTY_STRING;  try {    workingDir=configuration.getAttribute(IExternalToolConstants.ATTR_WORKING_DIRECTORY,IExternalToolConstants.EMPTY_STRING);  } catch (  CoreException ce) {    TypeScriptUIPlugin.log("Error while reading ng configuration",ce);  }  workDirectoryField.setText(workingDir);}  }
class C{  public static String stripMnemonic(String caption){  return caption.replace("" + MNEMONIC_INDICATOR,"");}  }
class C{  public LinkedHashMapPro(int initialCapacity,float loadFactor,boolean accessOrder){  super(initialCapacity,loadFactor);  this.accessOrder=accessOrder;}  }
class C{  public void clearAll(){  if (items != null) {    items.clear();  }  if (emptyItems != null) {    emptyItems.clear();  }}  }
class C{  @OnWebSocketMessage public final void onMessage(Session session,String message){  JsonParser parser=new JsonParser();  JsonObject object=parser.parse(message).getAsJsonObject();  if (object.has("message")) {    String msg=object.get("message").getAsString();    if (msg == null || msg.isEmpty()) {      Discord4J.LOGGER.error(LogMarkers.WEBSOCKET,"Received unknown error from Discord. Frame: {}",message);    } else     Discord4J.LOGGER.error(LogMarkers.WEBSOCKET,"Received error from Discord: {}. Frame: {}",msg,message);  }  int op=object.get("op").getAsInt();  if (object.has("s") && !object.get("s").isJsonNull())   client.lastSequence=object.get("s").getAsLong();  if (op == GatewayOps.DISPATCH.ordinal()) {    String type=object.get("t").getAsString();    JsonElement eventObject=object.get("d");switch (type) {case "RESUMED":      resumed();    break;case "READY":  ready(eventObject);break;case "MESSAGE_CREATE":messageCreate(eventObject);break;case "TYPING_START":typingStart(eventObject);break;case "GUILD_CREATE":guildCreate(eventObject);break;case "GUILD_MEMBER_ADD":guildMemberAdd(eventObject);break;case "GUILD_MEMBER_REMOVE":guildMemberRemove(eventObject);break;case "GUILD_MEMBER_UPDATE":guildMemberUpdate(eventObject);break;case "MESSAGE_UPDATE":messageUpdate(eventObject);break;case "MESSAGE_DELETE":messageDelete(eventObject);break;case "MESSAGE_DELETE_BULK":messageDeleteBulk(eventObject);break;case "PRESENCE_UPDATE":presenceUpdate(eventObject);break;case "GUILD_DELETE":guildDelete(eventObject);break;case "CHANNEL_CREATE":channelCreate(eventObject);break;case "CHANNEL_DELETE":channelDelete(eventObject);break;case "CHANNEL_PINS_UPDATE":break;case "USER_UPDATE":userUpdate(eventObject);break;case "CHANNEL_UPDATE":channelUpdate(eventObject);break;case "GUILD_MEMBERS_CHUNK":guildMembersChunk(eventObject);break;case "GUILD_UPDATE":guildUpdate(eventObject);break;case "GUILD_ROLE_CREATE":guildRoleCreate(eventObject);break;case "GUILD_ROLE_UPDATE":guildRoleUpdate(eventObject);break;case "GUILD_ROLE_DELETE":guildRoleDelete(eventObject);break;case "GUILD_BAN_ADD":guildBanAdd(eventObject);break;case "GUILD_BAN_REMOVE":guildBanRemove(eventObject);break;case "GUILD_EMOJIS_UPDATE":break;case "GUILD_INTEGRATIONS_UPDATE":break;case "VOICE_STATE_UPDATE":voiceStateUpdate(eventObject);break;case "VOICE_SERVER_UPDATE":voiceServerUpdate(eventObject);break;default :Discord4J.LOGGER.warn(LogMarkers.WEBSOCKET,"Unknown message received: {}, REPORT THIS TO THE DISCORD4J DEV! (ignoring): {}",type,message);}} else if (op == GatewayOps.HEARTBEAT.ordinal()) {send(DiscordUtils.GSON.toJson(new KeepAliveRequest(client.lastSequence)));} else if (op == GatewayOps.RECONNECT.ordinal()) {RedirectResponse redirectResponse=DiscordUtils.GSON.fromJson(object.getAsJsonObject("d"),RedirectResponse.class);Discord4J.LOGGER.info(LogMarkers.WEBSOCKET,"Received a gateway redirect request, closing the socket at reopening at {}",redirectResponse.url);try {client.ws=new DiscordWS(client,redirectResponse.url,timeoutTime,maxMissedPingCount,isDaemon,maxReconnectAttempts,async);disconnect(DiscordDisconnectedEvent.Reason.RECONNECTING);} catch (Exception e) {Discord4J.LOGGER.error(LogMarkers.WEBSOCKET,"Discord4J Internal Exception",e);}} else if (op == GatewayOps.INVALID_SESSION.ordinal()) {Discord4J.LOGGER.warn(LogMarkers.WEBSOCKET,"Invalid session! Attempting to clear caches and reconnect...");disconnect(DiscordDisconnectedEvent.Reason.INVALID_SESSION);} else if (op == GatewayOps.HELLO.ordinal()) {connected();HelloResponse helloResponse=DiscordUtils.GSON.fromJson(object.get("d"),HelloResponse.class);client.heartbeat=helloResponse.heartbeat_interval;startKeepalive();if (client.sessionId != null) {handleReconnect();} else if (!client.getToken().isEmpty()) {send(DiscordUtils.GSON.toJson(new ConnectRequest(client.getToken(),"Java",Discord4J.NAME,Discord4J.NAME,"","",LARGE_THRESHOLD,true)));} else {Discord4J.LOGGER.error(LogMarkers.WEBSOCKET,"Use the login() method to set your token first!");}} else if (op == GatewayOps.HEARTBEAT_ACK.ordinal()) {if (!sentPing.get()) {Discord4J.LOGGER.warn(LogMarkers.KEEPALIVE,"Received pong without sending ping! Is the websocket out of sync?");} else {pingResponseTime.set(System.currentTimeMillis() - client.timer);Discord4J.LOGGER.trace(LogMarkers.KEEPALIVE,"Received pong... Response time is {}ms",pingResponseTime.get());sentPing.set(false);missedPingCount.set(0);}} else {Discord4J.LOGGER.warn(LogMarkers.WEBSOCKET,"Unhandled opcode received: {} (ignoring), REPORT THIS TO THE DISCORD4J DEV!",op);}}  }
class C{  @Override public String generateURL(PieDataset dataset,Comparable key,int pieIndex){  String url=this.prefix;  try {    if (url.contains("?")) {      url+="&amp;" + this.categoryParamName + "="+ URLEncoder.encode(key.toString(),"UTF-8");    } else {      url+="?" + this.categoryParamName + "="+ URLEncoder.encode(key.toString(),"UTF-8");    }    if (this.indexParamName != null) {      url+="&amp;" + this.indexParamName + "="+ pieIndex;    }  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }  return url;}  }
class C{  public static ChangeRequestAttribute createChangeRequestAttribute(boolean changeIP,boolean changePort){  ChangeRequestAttribute attribute=new ChangeRequestAttribute();  attribute.setChangeIpFlag(changeIP);  attribute.setChangePortFlag(changePort);  return attribute;}  }
class C{  private static void addDefaultProfile(SpringApplication app,SimpleCommandLinePropertySource source){  if (!source.containsProperty("spring.profiles.active")) {    app.setAdditionalProfiles(Constants.SPRING_PROFILE_DEVELOPMENT);  }}  }
class C{  private void disableButtons(){  setWalkEnabled(false);  setJumpEnabled(false);  setBackUpEnabled(false);  setTurnEnabled(false);  setFleeEnabled(false);  setFlyOffEnabled(false);  setEjectEnabled(false);  setUnjamEnabled(false);  setSearchlightEnabled(false,false);  setGetUpEnabled(false);  setGoProneEnabled(false);  setChargeEnabled(false);  setDFAEnabled(false);  setNextEnabled(false);  setForwardIniEnabled(false);  getBtn(MoveCommand.MOVE_MORE).setEnabled(false);  butDone.setEnabled(false);  setLoadEnabled(false);  setMountEnabled(false);  setUnloadEnabled(false);  setClearEnabled(false);  setHullDownEnabled(false);  setSwimEnabled(false);  setAccEnabled(false);  setDecEnabled(false);  setEvadeEnabled(false);  setShutdownEnabled(false);  setStartupEnabled(false);  setSelfDestructEnabled(false);  setTraitorEnabled(false);  setEvadeAeroEnabled(false);  setAccNEnabled(false);  setDecNEnabled(false);  setRollEnabled(false);  setLaunchEnabled(false);  setDockEnabled(false);  setDropEnabled(false);  setThrustEnabled(false);  setYawEnabled(false);  setEndOverEnabled(false);  setTurnLeftEnabled(false);  setTurnRightEnabled(false);  setDumpEnabled(false);  setRamEnabled(false);  setHoverEnabled(false);  setJoinEnabled(false);  setTakeOffEnabled(false);  setVTakeOffEnabled(false);  setLandEnabled(false);  setVLandEnabled(false);  setLowerEnabled(false);  setRaiseEnabled(false);  setRecklessEnabled(false);  setGoProneEnabled(false);  setManeuverEnabled(false);  getBtn(MoveCommand.MOVE_CLIMB_MODE).setEnabled(false);  getBtn(MoveCommand.MOVE_DIG_IN).setEnabled(false);  getBtn(MoveCommand.MOVE_CALL_SUPPORT).setEnabled(false);}  }
class C{  public static double divide(double left,double right){  return left / right;}  }
class C{  public Dimension preferredLayoutSize(Container parent){synchronized (parent.getTreeLock()) {    Insets insets=parent.getInsets();    int ncomponents=parent.getComponentCount();    int nrows=rows;    int ncols=cols;    if (nrows > 0) {      ncols=(ncomponents + nrows - 1) / nrows;    } else {      nrows=(ncomponents + ncols - 1) / ncols;    }    int w=0;    int h=0;    for (int i=0; i < ncomponents; i++) {      Component comp=parent.getComponent(i);      Dimension d=comp.getPreferredSize();      if (w < d.width) {        w=d.width;      }      if (h < d.height) {        h=d.height;      }    }    return new Dimension(insets.left + insets.right + ncols * w + (ncols - 1) * hgap,insets.top + insets.bottom + nrows * h + (nrows - 1) * vgap);  }}  }
class C{  public void actionPerformed(ActionEvent e){  Graph graph=getGraphEditable().getGraph();  Component parent=(Component)getGraphEditable();  if (type == Type.xml) {    File file=EditorUtils.getSaveFile("graph","xml",parent,false,title);    PrintWriter out=GraphUtils.saveGraph(graph,file,true);    Preferences.userRoot().put("fileSaveLocation",file.getParent());    out.close();  } else   if (type == Type.text) {    File file=EditorUtils.getSaveFile("graph","txt",parent,false,title);    PrintWriter out=GraphUtils.saveGraph(graph,file,false);    Preferences.userRoot().put("fileSaveLocation",file.getParent());    out.close();  } else   if (type == Type.r) {    File file=EditorUtils.getSaveFile("graph","r.txt",parent,false,title);    try {      String text=GraphUtils.rMatrix(graph);      PrintWriter out=new PrintWriter(file);      out.println(text);      Preferences.userRoot().put("fileSaveLocation",file.getParent());      out.close();    } catch (    FileNotFoundException e1) {      e1.printStackTrace();      throw new RuntimeException("Not a directed graph.",e1);    }catch (    IllegalArgumentException e1) {      JOptionPane.showMessageDialog(getGraphEditable().getWorkbench(),e1.getMessage());    }  }}  }
class C{  @Override public void run(){  amIActive=true;  try {    Long startTime=System.currentTimeMillis();    int progress, oldProgress, col, row, colN, rowN, r, c;    int numSolvedCells=0;    int dir, numCellsInPath, i, n;    boolean needsFilling=false;    double z, zN, zTest, zN2, lowestNeighbour, breachDepth, maxPathBreachDepth;    boolean isPit, isEdgeCell, flag, isPeak;    double pathTerminalHeight;    double outletHeight;    int outletRow, outletCol, outletDist;    GridCell gc;    int[] dX={1,1,1,0,-1,-1,-1,0};    int[] dY={-1,0,1,1,1,0,-1,-1};    int[] backLink={5,6,7,8,1,2,3,4};    double[] outPointer={0,1,2,4,8,16,32,64,128};    if (args.length < 2) {      showFeedback("Incorrect number of arguments given to tool.");      return;    }    String demFile=args[0];    String outputFile=args[1];    boolean maxLengthOrDepthUsed=false;    double maxDepth=Double.POSITIVE_INFINITY;    if (args.length >= 3 && !(args[2].trim()).isEmpty() && !(args[2].toLowerCase().equals("not specified"))) {      maxDepth=Double.parseDouble(args[2]);      maxLengthOrDepthUsed=true;    }    int maxLength=Integer.MAX_VALUE;    if (args.length >= 4 && !(args[3].trim()).isEmpty() && !(args[3].toLowerCase().equals("not specified"))) {      maxLength=Integer.parseInt(args[3]);      maxLengthOrDepthUsed=true;    }    boolean performConstrainedBreach=false;    if (args.length >= 5 && !(args[4].trim()).isEmpty() && !(args[4].toLowerCase().equals("not specified"))) {      performConstrainedBreach=Boolean.parseBoolean(args[4]);    }    if (maxDepth == Double.POSITIVE_INFINITY && maxLength == Integer.MAX_VALUE && performConstrainedBreach) {      performConstrainedBreach=false;    }    String pointerFile="";    String flowAccumFile="";    boolean outputPointer=false;    if (args.length >= 6 && !(args[5].trim()).isEmpty()) {      outputPointer=Boolean.parseBoolean(args[5]);      pointerFile=outputFile.replace(".dep","_flow_pntr.dep");    }    boolean performFlowAccumulation=false;    if (args.length >= 7 && !(args[6].trim()).isEmpty() && outputPointer) {      performFlowAccumulation=Boolean.parseBoolean(args[6]);      flowAccumFile=outputFile.replace(".dep","_flow_accum.dep");    }    WhiteboxRaster dem=new WhiteboxRaster(demFile,"r");    double nodata=dem.getNoDataValue();    int rows=dem.getNumberRows();    int cols=dem.getNumberColumns();    int rowsLessOne=rows - 1;    int numCellsTotal=rows * cols;    minVal=dem.getMinimumValue();    elevDigits=String.valueOf((int)(dem.getMaximumValue() - minVal)).length();    elevMultiplier=Math.pow(10,8 - elevDigits);    double SMALL_NUM=1 / elevMultiplier;    double[][] output=new double[rows + 2][cols + 2];    BooleanBitArray2D pits=new BooleanBitArray2D(rows + 2,cols + 2);    BooleanBitArray2D inQueue=new BooleanBitArray2D(rows + 2,cols + 2);    NibbleArray2D flowdir=new NibbleArray2D(rows + 2,cols + 2);    PriorityQueue<GridCell> queue=new PriorityQueue<>((2 * rows + 2 * cols) * 2);    oldProgress=-1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=dem.getValue(row,col);        output[row + 1][col + 1]=z;        flowdir.setValue(row + 1,col + 1,0);        if (z != nodata) {          isPit=true;          isPeak=true;          isEdgeCell=false;          lowestNeighbour=Double.POSITIVE_INFINITY;          for (n=0; n < 8; n++) {            zN=dem.getValue(row + dY[n],col + dX[n]);            if (zN != nodata) {              if (zN < z) {                isPit=false;                break;              } else {                if (zN < lowestNeighbour) {                  lowestNeighbour=zN;                }              }            } else {              isEdgeCell=true;            }          }          if (isPit) {            if (isEdgeCell) {              queue.add(new GridCell(row + 1,col + 1,z));              inQueue.setValue(row + 1,col + 1,true);              flowdir.setValue(row + 1,col + 1,0);            } else {              pits.setValue(row + 1,col + 1,true);              output[row + 1][col + 1]=lowestNeighbour - SMALL_NUM;            }          }        } else {          numSolvedCells++;        }      }      progress=(int)(100f * row / rowsLessOne);      if (progress != oldProgress) {        updateProgress("Breaching DEM (1 of 2):",progress);        oldProgress=progress;        if (cancelOp) {          showFeedback("Operation cancelled");          return;        }      }    }    String paletteName=dem.getPreferredPalette();    dem.close();    for (row=0; row < rows + 2; row++) {      output[row][0]=nodata;      output[row][cols + 1]=nodata;      flowdir.setValue(row,0,0);      flowdir.setValue(row,cols + 1,0);    }    for (col=0; col < cols + 2; col++) {      output[0][col]=nodata;      output[rows + 1][col]=nodata;      flowdir.setValue(0,col,0);      flowdir.setValue(rows + 1,col,0);    }    oldProgress=(int)(100f * numSolvedCells / numCellsTotal);    updateProgress("Breaching DEM (2 of 2):",oldProgress);    if (!maxLengthOrDepthUsed) {      while (queue.isEmpty() == false) {        gc=queue.poll();        row=gc.row;        col=gc.col;        for (i=0; i < 8; i++) {          rowN=row + dY[i];          colN=col + dX[i];          zN=output[rowN][colN];          if ((zN != nodata) && (!inQueue.getValue(rowN,colN))) {            flowdir.setValue(rowN,colN,backLink[i]);            if (pits.getValue(rowN,colN)) {              zTest=zN;              r=rowN;              c=colN;              flag=true;              while (flag) {                zTest-=SMALL_NUM;                dir=flowdir.getValue(r,c);                if (dir > 0) {                  r+=dY[dir - 1];                  c+=dX[dir - 1];                  zN2=output[r][c];                  if (zN2 <= zTest || zN2 == nodata) {                    flag=false;                  } else {                    output[r][c]=zTest;                  }                } else {                  flag=false;                }              }            }            numSolvedCells++;            queue.add(new GridCell(rowN,colN,zN));            inQueue.setValue(rowN,colN,true);          }        }        progress=(int)(100f * numSolvedCells / numCellsTotal);        if (progress != oldProgress) {          updateProgress("Breaching DEM (2 of 2):",progress);          oldProgress=progress;          if (cancelOp) {            showFeedback("Operation cancelled");            return;          }        }      }    } else     if (!performConstrainedBreach) {      while (queue.isEmpty() == false) {        gc=queue.poll();        row=gc.row;        col=gc.col;        for (i=0; i < 8; i++) {          rowN=row + dY[i];          colN=col + dX[i];          zN=output[rowN][colN];          if ((zN != nodata) && (!inQueue.getValue(rowN,colN))) {            flowdir.setValue(rowN,colN,backLink[i]);            if (pits.getValue(rowN,colN)) {              numCellsInPath=0;              maxPathBreachDepth=0;              breachDepth=0;              zTest=zN;              r=rowN;              c=colN;              flag=true;              while (flag) {                zTest-=SMALL_NUM;                dir=flowdir.getValue(r,c);                if (dir > 0) {                  r+=dY[dir - 1];                  c+=dX[dir - 1];                  zN2=output[r][c];                  if (zN2 <= zTest || zN2 == nodata) {                    flag=false;                  } else {                    breachDepth=zN2 - zTest;                    if (breachDepth > maxPathBreachDepth) {                      maxPathBreachDepth=breachDepth;                    }                  }                } else {                  flag=false;                }                numCellsInPath++;                if (numCellsInPath > maxLength) {                  flag=false;                }                if (maxPathBreachDepth > maxDepth) {                  flag=false;                }              }              if (numCellsInPath <= maxLength && maxPathBreachDepth <= maxDepth) {                zTest=zN;                r=rowN;                c=colN;                flag=true;                while (flag) {                  zTest-=SMALL_NUM;                  dir=flowdir.getValue(r,c);                  if (dir > 0) {                    r+=dY[dir - 1];                    c+=dX[dir - 1];                    zN2=output[r][c];                    if (zN2 <= zTest || zN2 == nodata) {                      flag=false;                    } else {                      output[r][c]=zTest;                    }                  } else {                    flag=false;                  }                }              } else {                needsFilling=true;              }            }            numSolvedCells++;            queue.add(new GridCell(rowN,colN,zN));            inQueue.setValue(rowN,colN,true);          }        }        progress=(int)(100f * numSolvedCells / numCellsTotal);        if (progress != oldProgress) {          updateProgress("Breaching DEM (2 of 2):",progress);          oldProgress=progress;          if (cancelOp) {            showFeedback("Operation cancelled");            return;          }        }      }    }    if (needsFilling) {      numSolvedCells=0;      queue.clear();      inQueue=new BooleanBitArray2D(rows + 2,cols + 2);      flowdir=new NibbleArray2D(rows + 2,cols + 2);      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output[row + 1][col + 1];          flowdir.setValue(row + 1,col + 1,0);          if (z != nodata) {            isPit=true;            isEdgeCell=false;            for (n=0; n < 8; n++) {              zN=output[row + dY[n] + 1][col + dX[n] + 1];              if (zN == nodata) {                isEdgeCell=true;              } else               if (zN < z) {                isPit=false;              }            }            if (isEdgeCell && isPit) {              queue.add(new GridCell(row + 1,col + 1,z));              inQueue.setValue(row + 1,col + 1,true);              numSolvedCells++;            }          } else {            numSolvedCells++;          }        }        progress=(int)(100f * row / rowsLessOne);        if (progress != oldProgress) {          updateProgress("Filling DEM (1 of 2):",progress);          oldProgress=progress;          if (cancelOp) {            showFeedback("Operation cancelled");            return;          }        }      }      while (queue.isEmpty() == false) {        gc=queue.poll();        row=gc.row;        col=gc.col;        z=output[row][col];        for (i=0; i < 8; i++) {          rowN=row + dY[i];          colN=col + dX[i];          zN=output[rowN][colN];          if ((zN != nodata) && (!inQueue.getValue(rowN,colN))) {            flowdir.setValue(rowN,colN,backLink[i]);            if (zN <= z) {              zN=z + SMALL_NUM;            }            numSolvedCells++;            output[rowN][colN]=zN;            queue.add(new GridCell(rowN,colN,zN));            inQueue.setValue(rowN,colN,true);          }        }        progress=(int)(100f * numSolvedCells / numCellsTotal);        if (progress != oldProgress) {          updateProgress("Filling DEM (2 of 2):",progress);          oldProgress=progress;          if (cancelOp) {            showFeedback("Operation cancelled");            return;          }        }      }    }    WhiteboxRaster outputRaster=new WhiteboxRaster(outputFile,"rw",demFile,WhiteboxRaster.DataType.FLOAT,nodata);    outputRaster.setPreferredPalette(paletteName);    oldProgress=-1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=output[row + 1][col + 1];        outputRaster.setValue(row,col,z);      }      progress=(int)(100f * row / rowsLessOne);      if (progress > oldProgress) {        updateProgress("Saving Data:",progress);        oldProgress=progress;        if (cancelOp) {          showFeedback("Operation cancelled");          return;        }      }    }    outputRaster.addMetadataEntry("Created by the " + this.getDescriptiveName() + " tool.");    outputRaster.addMetadataEntry("Created on " + new Date());    Long endTime=System.currentTimeMillis();    long sec=(endTime - startTime) / 1000;    String duration=String.format("%02d:%02d:%02d:%02d",sec / 86400,(sec % 86400) / 3600,(sec % 3600) / 60,(sec % 60));    outputRaster.addMetadataEntry("Elapsed time: " + duration);    outputRaster.addMetadataEntry("Max breach depth: " + maxDepth);    outputRaster.addMetadataEntry("Max length depth: " + maxLength);    outputRaster.close();    if (outputPointer) {      WhiteboxRaster pointer=new WhiteboxRaster(pointerFile,"rw",demFile,WhiteboxRaster.DataType.FLOAT,nodata);      pointer.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);      pointer.setPreferredPalette("qual.pal");      oldProgress=-1;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output[row + 1][col + 1];          if (z != nodata) {            pointer.setValue(row,col,outPointer[flowdir.getValue(row + 1,col + 1)]);          } else {            pointer.setValue(row,col,nodata);          }        }        progress=(int)(100f * row / rowsLessOne);        if (progress > oldProgress) {          updateProgress("Saving Pointer:",progress);          oldProgress=progress;          if (cancelOp) {            showFeedback("Operation cancelled");            return;          }        }      }      pointer.addMetadataEntry("Created by the " + this.getDescriptiveName() + " tool.");      pointer.addMetadataEntry("Created on " + new Date());      pointer.close();      returnData(pointerFile);    }    returnData(outputFile);    if (performFlowAccumulation) {      String[] args2={pointerFile,flowAccumFile,"number of upslope grid cells","false"};      myHost.runPlugin("FlowAccumD8",args2,false);    }    if (!outputPointer && !performFlowAccumulation) {      showFeedback("Elapsed time: " + duration);    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;  }}  }
class C{  public LiftControl(Duration duration,double distance,boolean goingUp){  this.duration=duration;  this.distance=distance;  this.goingUp=goingUp;}  }
class C{  @Override public boolean isSigned(int columnIndex){  return true;}  }
class C{  private static int saveProviderSettings(ContentResolver cr,long providerId,Map<String,String> config){  ContentValues[] settingValues=new ContentValues[config.size()];  int index=0;  for (  Map.Entry<String,String> entry : config.entrySet()) {    ContentValues settingValue=new ContentValues();    settingValue.put(Imps.ProviderSettings.PROVIDER,providerId);    settingValue.put(Imps.ProviderSettings.NAME,entry.getKey());    settingValue.put(Imps.ProviderSettings.VALUE,entry.getValue());    settingValues[index++]=settingValue;  }  return cr.bulkInsert(Imps.ProviderSettings.CONTENT_URI,settingValues);}  }
class C{  public Block createBlock(){  BlockImpl block=new BlockImpl();  return block;}  }
class C{  public static void compareGamaGraphs(String msg,GamaGraph original,GamaGraph tested,int acceptedIgnoredEdges){  assertEquals(msg + ": wrong number of vertices",original.getVertices().size(),tested.getVertices().size());  assertEquals(msg + ": wrong number of edges",original.getVertices().size() - acceptedIgnoredEdges,tested.getVertices().size());  for (  Object v : original.getVertices()) {    assertTrue(msg + ": node not found " + v,tested.containsVertex(v));  }  for (  Object e : original.getEdges()) {    Object source=original.getEdgeSource(e);    Object target=original.getEdgeTarget(e);    assertTrue(msg + ": edge " + source+ "->"+ target+ " not found",tested.containsEdge(source,target));  }  assertEquals(msg + ": directionality not restored",original.isDirected(),tested.isDirected());}  }
class C{  public int lastIndexOf(Object o){  int index=size;  if (o == null) {    for (Entry e=header.previous; e != header; e=e.previous) {      index--;      if (e.element == null)       return index;    }  } else {    for (Entry e=header.previous; e != header; e=e.previous) {      index--;      if (o.equals(e.element))       return index;    }  }  return -1;}  }
class C{  public <T>T waitForState(Class<T> type,Predicate<T> predicate) throws Throwable {  return waitForState(this.serviceUri,type,predicate);}  }
class C{  public void removeListener(final IFunctionNodeListener listener){  m_listeners.removeListener(listener);}  }
class C{  protected Device findDestByEntity(IEntityClass reference,Entity dstEntity){  Long deviceKey=primaryIndex.findByEntity(dstEntity);  if (deviceKey == null) {    ClassState classState=getClassState(reference);    if (classState.classIndex == null) {      return null;    }    deviceKey=classState.classIndex.findByEntity(dstEntity);  }  if (deviceKey == null)   return null;  return deviceMap.get(deviceKey);}  }
class C{  public String[] indices(){  return indices;}  }
class C{  public static Object deserialize(String input) throws IOException, ClassNotFoundException {  byte[] decoded=Base64.decodeBase64(input.getBytes("UTF-8"));  return deserialize(decoded);}  }
class C{  public ConfigureHashCollisionDialog_NB(HashCollision hashCollision){  this.hashCollision=hashCollision;  initComponents();  cbDJBX31A.addChangeListener(cbChangeListener);  cbDJBX33A.addChangeListener(cbChangeListener);  cbDJBX33X.addChangeListener(cbChangeListener);  cbRuby.addChangeListener(cbChangeListener);  cbTrue.addChangeListener(cbChangeListener);  cbFalse.addChangeListener(cbChangeListener);  final CollisionInterface[] collisionGenerators=hashCollision.getCollisionGenerators();  for (  CollisionInterface collision : collisionGenerators) {    if (collision instanceof CollisionDJBX31A) {      cbDJBX31A.setSelected(true);    }    if (collision instanceof CollisionDJBX33A) {      cbDJBX33A.setSelected(true);    }    if (collision instanceof CollisionDJBX33X) {      cbDJBX33X.setSelected(true);    }    if (collision instanceof CollisionDJBX) {      cbRuby.setSelected(true);    }  }  final Boolean[] useNamespace=hashCollision.getUseNamespace();  for (  Boolean b : useNamespace) {    if (b) {      cbTrue.setSelected(true);    }    if (!b) {      cbFalse.setSelected(true);    }  }  final IterateModel numberOfAttributesIterator=hashCollision.getNumberOfCollisionsIterator();  configureIterateModel_NB2.setStartAt(String.valueOf(numberOfAttributesIterator.getStartAt()));  configureIterateModel_NB2.setStopAt(String.valueOf(numberOfAttributesIterator.getStopAt()));  configureIterateModel_NB2.setIncrement(String.valueOf(numberOfAttributesIterator.getIncrement()));  configureIterateModel_NB2.setIterateStrategie(numberOfAttributesIterator.getIterateStrategie());}  }
class C{  private static void executeMethod(Object activity,Method executeMethod){  executeMethodWithParam(activity,executeMethod,new Object[]{});}  }
class C{  private Object replaceVarargsSectionWithArray(Object[] args,List modelArgs,CallableMemberDescriptor memberDesc,BeansWrapper unwrapper) throws TemplateModelException {  final Class[] paramTypes=memberDesc.getParamTypes();  final int paramCount=paramTypes.length;  final Class varArgsCompType=paramTypes[paramCount - 1].getComponentType();  final int totalArgCount=args.length;  final int fixArgCount=paramCount - 1;  if (args.length != paramCount) {    Object[] packedArgs=new Object[paramCount];    System.arraycopy(args,0,packedArgs,0,fixArgCount);    Object varargs=Array.newInstance(varArgsCompType,totalArgCount - fixArgCount);    for (int i=fixArgCount; i < totalArgCount; ++i) {      Object val=unwrapper.tryUnwrapTo((TemplateModel)modelArgs.get(i),varArgsCompType);      if (val == ObjectWrapperAndUnwrapper.CANT_UNWRAP_TO_TARGET_CLASS) {        return Integer.valueOf(i + 1);      }      Array.set(varargs,i - fixArgCount,val);    }    packedArgs[fixArgCount]=varargs;    return packedArgs;  } else {    Object val=unwrapper.tryUnwrapTo((TemplateModel)modelArgs.get(fixArgCount),varArgsCompType);    if (val == ObjectWrapperAndUnwrapper.CANT_UNWRAP_TO_TARGET_CLASS) {      return Integer.valueOf(fixArgCount + 1);    }    Object array=Array.newInstance(varArgsCompType,1);    Array.set(array,0,val);    args[fixArgCount]=array;    return args;  }}  }
class C{  public void tagDefineTextField(int fieldId,String fieldName,String initialText,Rect boundary,int flags,AlphaColor textColor,int alignment,int fontId,int fontSize,int charLimit,int leftMargin,int rightMargin,int indentation,int lineSpacing) throws IOException {  if (initialText != null) {    strings.add(initialText);  }}  }
class C{  public static <T>Box<T> create(T initial){  return new Box<T>(initial);}  }
class C{  public void update(byte[] data){  if ((data == null) || (data.length == 0)) {    return;  }  updateWithHash(hash(data,DEFAULT_UPDATE_SEED));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:33.668 -0500",hash_original_method="25293AE596CADCBBB53C06F5AC0CC1E4",hash_generated_method="605DFB2105E41AF97FEBDA947F8A9F93") public static double parseDouble(String string) throws NumberFormatException {  return string.getTaintDouble();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private boolean checkPreviewPreconditions(){  if (mPaused) {    return false;  }  if (mCameraDevice == null) {    Log.w(TAG,"startPreview: camera device not ready yet.");    return false;  }  SurfaceTexture st=mActivity.getCameraAppUI().getSurfaceTexture();  if (st == null) {    Log.w(TAG,"startPreview: surfaceTexture is not ready.");    return false;  }  if (!mCameraPreviewParamsReady) {    Log.w(TAG,"startPreview: parameters for preview is not ready.");    return false;  }  return true;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == AnnotableElement.class) {switch (baseOperationID) {case N4JSPackage.ANNOTABLE_ELEMENT___GET_ANNOTATIONS:      return N4JSPackage.PROPERTY_SETTER_DECLARATION___GET_ANNOTATIONS;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == PropertyNameOwner.class) {switch (baseOperationID) {case N4JSPackage.PROPERTY_NAME_OWNER___IS_VALID_NAME:  return N4JSPackage.PROPERTY_SETTER_DECLARATION___IS_VALID_NAME;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == FieldAccessor.class) {switch (baseOperationID) {case N4JSPackage.FIELD_ACCESSOR___IS_VALID_NAME:return N4JSPackage.PROPERTY_SETTER_DECLARATION___IS_VALID_NAME;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == PropertyAssignment.class) {switch (baseOperationID) {case N4JSPackage.PROPERTY_ASSIGNMENT___GET_DEFINED_MEMBER:return N4JSPackage.PROPERTY_SETTER_DECLARATION___GET_DEFINED_MEMBER;case N4JSPackage.PROPERTY_ASSIGNMENT___IS_VALID_NAME:return N4JSPackage.PROPERTY_SETTER_DECLARATION___IS_VALID_NAME;default :return -1;}}if (baseClass == AnnotablePropertyAssignment.class) {switch (baseOperationID) {case N4JSPackage.ANNOTABLE_PROPERTY_ASSIGNMENT___GET_ANNOTATIONS:return N4JSPackage.PROPERTY_SETTER_DECLARATION___GET_ANNOTATIONS;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void changeStarted(GraphicsNodeChangeEvent gnce){}  }
class C{  public static int computeSampleSize(BitmapFactory.Options options,int minSideLength,int maxNumOfPixels){  int initialSize=computeInitialSampleSize(options,minSideLength,maxNumOfPixels);  int roundedSize;  if (initialSize <= 8) {    roundedSize=1;    while (roundedSize < initialSize) {      roundedSize<<=1;    }  } else {    roundedSize=(initialSize + 7) / 8 * 8;  }  return roundedSize;}  }
class C{  public ComplexBuffer copyOf(){  float[] copy=Arrays.copyOf(mSamples,mSamples.length);  return new ComplexBuffer(copy);}  }
class C{  static void removeGlobalMetadataForFailedNode(Node failedNode,String regionIdentifier,GemFireCacheImpl cache){  removeGlobalMetadataForFailedNode(failedNode,regionIdentifier,cache,true);}  }
class C{  public InlineQueryResultDocument.InlineQueryResultDocumentBuilder caption(String caption){  this.caption=caption;  return this;}  }
class C{  public boolean isOngoing(){  return isOngoingStorage.get();}  }
class C{  public TFloatObjectIterator(TFloatObjectHashMap<V> map){  super(map);  _map=map;}  }
class C{  public static float interpolateLinear(float scale,float startValue,float endValue){  if (startValue == endValue) {    return startValue;  }  if (scale <= 0f) {    return startValue;  }  if (scale >= 1f) {    return endValue;  }  return ((1f - scale) * startValue) + (scale * endValue);}  }
class C{  protected String handleTime(Time time){  return time == null ? null : time.toString();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void testCertPathValidator08() throws NoSuchAlgorithmException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  Provider prov=null;  for (int t=0; t < validValues.length; t++) {    try {      CertPathValidator.getInstance(validValues[t],prov);      fail("IllegalArgumentException must be thrown");    } catch (    IllegalArgumentException e1) {    }  }}  }
class C{  private NSObject doParse(byte[] data) throws PropertyListFormatException, UnsupportedEncodingException {  bytes=data;  String magic=new String(copyOfRange(bytes,0,8));  if (!magic.startsWith("bplist")) {    throw new IllegalArgumentException("The given data is no binary property list. Wrong magic bytes: " + magic);  }  majorVersion=magic.charAt(6) - 0x30;  minorVersion=magic.charAt(7) - 0x30;  if (majorVersion > 0) {    throw new IllegalArgumentException("Unsupported binary property list format: v" + majorVersion + "."+ minorVersion+ ". "+ "Version 1.0 and later are not yet supported.");  }  byte[] trailer=copyOfRange(bytes,bytes.length - 32,bytes.length);  int offsetSize=(int)parseUnsignedInt(trailer,6,7);  objectRefSize=(int)parseUnsignedInt(trailer,7,8);  int numObjects=(int)parseUnsignedInt(trailer,8,16);  int topObject=(int)parseUnsignedInt(trailer,16,24);  int offsetTableOffset=(int)parseUnsignedInt(trailer,24,32);  offsetTable=new int[numObjects];  for (int i=0; i < numObjects; i++) {    offsetTable[i]=(int)parseUnsignedInt(bytes,offsetTableOffset + i * offsetSize,offsetTableOffset + (i + 1) * offsetSize);  }  return parseObject(topObject);}  }
class C{  public static <V,E>double diameter(Hypergraph<V,E> g,Distance<V> d){  return diameter(g,d,false);}  }
class C{  public static Timestamp minus(Timestamp self,int days){  return plus(self,-days);}  }
class C{  static WindowsPath createFromNormalizedPath(WindowsFileSystem fs,String path,BasicFileAttributes attrs){  try {    WindowsPathParser.Result result=WindowsPathParser.parseNormalizedPath(path);    if (attrs == null) {      return new WindowsPath(fs,result.type(),result.root(),result.path());    } else {      return new WindowsPathWithAttributes(fs,result.type(),result.root(),result.path(),attrs);    }  } catch (  InvalidPathException x) {    throw new AssertionError(x.getMessage());  }}  }
class C{  public void construct2ndStep(Node node,Object data){  if (node.isTwoStepsConstruction()) {    throw new IllegalStateException("Not Implemented in " + getClass().getName());  } else {    throw new YAMLException("Unexpected recursive structure for Node: " + node);  }}  }
class C{  public static ProtocolVersion valueOf(int major,int minor){  return valueOf(((major & 0xFF) << 8) | (minor & 0xFF));}  }
class C{  public int runScript(String scriptPath,String... args) throws IOException, InterruptedException {  ProcessBuilder processBuilder=getProcessBuilder(scriptPath,args);  Process p=processBuilder.inheritIO().start();  return waitForExitValue(p);}  }
class C{  protected void createSetterMethod(ClassNode declaringClass,PropertyNode propertyNode,String setterName,Statement setterBlock){  ClassNode[] exceptions={ClassHelper.make(PropertyVetoException.class)};  MethodNode setter=new MethodNode(setterName,PropertyNodeUtils.adjustPropertyModifiersForMethod(propertyNode),ClassHelper.VOID_TYPE,params(param(propertyNode.getType(),"value")),exceptions,setterBlock);  setter.setSynthetic(true);  declaringClass.addMethod(setter);}  }
class C{  public MockVariant(int start,int end,byte[] plus,byte[] minus,int id){  this(start,end,toPreds(plus,minus),id);}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public SymbolTableEntryInternal steFor_prototype(){  return getSymbolTableEntryInternal("prototype",true);}  }
class C{  protected void putVector(String name,FieldVector vector){  final ValueVector old=vectors.put(Preconditions.checkNotNull(name,"field name cannot be null").toLowerCase(),Preconditions.checkNotNull(vector,"vector cannot be null"));  if (old != null && old != vector) {    logger.debug("Field [{}] mutated from [{}] to [{}]",name,old.getClass().getSimpleName(),vector.getClass().getSimpleName());  }}  }
class C{  protected static boolean isText(int ch){  if (((ch >= 32) && (ch <= 126)) || ((ch >= 128) && (ch <= 255))) {    return true;  }switch (ch) {case '\t':case '\n':case '\r':    return true;}return false;}  }
class C{  public static double absClamp(double value,double bounds){  return min(max(value,-bounds),bounds);}  }
class C{  public void putAll(Map t){  int n=t.size();  if (n == 0)   return;  if (n > threshold)   resize(capacity(n));  for (Iterator it=t.entrySet().iterator(); it.hasNext(); ) {    Entry e=(Entry)it.next();    put(e.getKey(),e.getValue());  }}  }
class C{  static long fromHex(String hexStr){  String str=hexStr.startsWith("0x") ? hexStr.substring(2).toLowerCase() : hexStr.toLowerCase();  if (hexStr.length() == 0) {    throw new NumberFormatException();  }  long ret=0;  for (int i=0; i < str.length(); i++) {    int c=str.charAt(i);    if (c >= '0' && c <= '9') {      ret=(ret * 16) + (c - '0');    } else     if (c >= 'a' && c <= 'f') {      ret=(ret * 16) + (c - 'a' + 10);    } else {      throw new NumberFormatException();    }  }  return ret;}  }
class C{  protected boolean isAnnotationCompatible(){  return CompilerConfiguration.isPostJDK5(this.source.getConfiguration().getTargetBytecode());}  }
class C{  public void saveMethod(PseudoOp[] code){  savedCode=code;}  }
class C{  public ParameterAnnotationStruct(CstMethodRef method,AnnotationsList annotationsList){  if (method == null) {    throw new NullPointerException("method == null");  }  if (annotationsList == null) {    throw new NullPointerException("annotationsList == null");  }  this.method=method;  this.annotationsList=annotationsList;  int size=annotationsList.size();  ArrayList<AnnotationSetRefItem> arrayList=new ArrayList<AnnotationSetRefItem>(size);  for (int i=0; i < size; i++) {    Annotations annotations=annotationsList.get(i);    AnnotationSetItem item=new AnnotationSetItem(annotations);    arrayList.add(new AnnotationSetRefItem(item));  }  this.annotationsItem=new UniformListItem<AnnotationSetRefItem>(ItemType.TYPE_ANNOTATION_SET_REF_LIST,arrayList);}  }
class C{  private void propagateCurrentNodes(ChangeListener listener){  for (  ChildData child : childrenCache.getCurrentData()) {    String hostId=ZKPaths.getNodeFromPath(child.getPath());    listener.onHostAdded(hostId);  }}  }
class C{  public static Date parseDate(String dateValue,Collection dateFormats,Date startDate) throws DateParseException {  if (dateValue == null) {    throw new IllegalArgumentException("dateValue is null");  }  if (dateFormats == null) {    dateFormats=DEFAULT_PATTERNS;  }  if (startDate == null) {    startDate=DEFAULT_TWO_DIGIT_YEAR_START;  }  if (dateValue.length() > 1 && dateValue.startsWith("'") && dateValue.endsWith("'")) {    dateValue=dateValue.substring(1,dateValue.length() - 1);  }  SimpleDateFormat dateParser=null;  final Iterator formatIter=dateFormats.iterator();  while (formatIter.hasNext()) {    final String format=(String)formatIter.next();    if (dateParser == null) {      dateParser=new SimpleDateFormat(format,Locale.US);      dateParser.setTimeZone(TimeZone.getTimeZone("GMT"));      dateParser.set2DigitYearStart(startDate);    } else {      dateParser.applyPattern(format);    }    try {      return dateParser.parse(dateValue);    } catch (    final ParseException pe) {    }  }  throw new DateParseException("Unable to parse the date " + dateValue);}  }
class C{  public SayUnstartedQuestDescriptionFromNPCNameAction(List<String> regions){  this.regions=regions;}  }
class C{  @Override public void initForArch(IR ir){  PhysicalRegisterSet phys=(PhysicalRegisterSet)ir.regpool.getPhysicalRegisterSet();  phys.getFPR(7).reserveRegister();}  }
class C{  public static SsaMethod testPhiPlacement(RopMethod rmeth,int paramWidth,boolean isStatic){  SsaMethod result;  result=SsaMethod.newFromRopMethod(rmeth,paramWidth,isStatic);  edgeSplit(result);  LocalVariableInfo localInfo=LocalVariableExtractor.extract(result);  placePhiFunctions(result,localInfo,0);  return result;}  }
class C{  public static byte[] genSpecBytes(byte len){  char u8=convertByte2Uint8(len);  return genSpecBytes(u8);}  }
class C{  public static synchronized AnnotatedSequencesReader createDefaultSequencesReaderCheckEmpty(final File dir) throws IOException, NoTalkbackSlimException {  return createDefaultSequencesReaderCheckEmpty(dir,LongRange.NONE);}  }
class C{  public static void main(String[] argv){  runFilter(new PKIDiscretize(),argv);}  }
class C{  protected void drawBar(Canvas canvas,float xMin,float yMin,float xMax,float yMax,float halfDiffX,int seriesNr,int seriesIndex,Paint paint){  int scale=mDataset.getSeriesAt(seriesIndex).getScaleNumber();  if (mType == Type.STACKED || mType == Type.HEAPED) {    drawBar(canvas,xMin - halfDiffX,yMax,xMax + halfDiffX,yMin,scale,seriesIndex,paint);  } else {    float startX=xMin - seriesNr * halfDiffX + seriesIndex * 2 * halfDiffX;    drawBar(canvas,startX,yMax,startX + 2 * halfDiffX,yMin,scale,seriesIndex,paint);  }}  }
class C{  public boolean isDashed(){  return dashed;}  }
class C{  @Deprecated public static <V1,V2,V3,V4,V5,V6>GridTuple6<V1,V2,V3,V4,V5,V6> t6(){  return new GridTuple6<>();}  }
class C{  public static JobReturn cpDataTransform(ParameterizedBuiltinCPInstruction inst,CacheableData<?>[] inputs,MatrixObject[] outputs) throws IOException, DMLRuntimeException, IllegalArgumentException, JSONException {  TransformOperands oprnds=new TransformOperands(inst.getParameterMap(),inputs[0]);  return cpDataTransform(oprnds,inputs,outputs);}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  if (params instanceof KeyParameter) {    WorkingKey=generateWorkingKey(((KeyParameter)params).getKey(),forEncryption);    this.forEncryption=forEncryption;    return;  }  throw new IllegalArgumentException("invalid parameter passed to AES init - " + params.getClass().getName());}  }
class C{  @SafeVarargs public final GenericItemAdapter<Model,Item> addModel(int position,Model... models){  addModel(position,asList(models));  return this;}  }
class C{  @Override public void run(){  amIActive=true;  int numDecimalPlaces=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  numDecimalPlaces=Integer.parseInt(args[1]);  if (numDecimalPlaces < 0) {    numDecimalPlaces=0;  }  String outputHeader=args[2];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          BigDecimal bd=new BigDecimal(z);          bd=bd.setScale(numDecimalPlaces,BigDecimal.ROUND_FLOOR);          outputFile.setValue(row,col,bd.doubleValue());        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public SerialHandler(){}  }
class C{  public QueryAdvice generateAdvice(PTQuery query){  return QueryAdvice.generate(query);}  }
class C{  public static void main(String[] args){  java.util.Random r=new java.util.Random();  Bits bits=new Bits();  for (int i=0; i < 125; i++) {    int k;    do {      k=r.nextInt(250);    } while (bits.isMember(k));    System.out.println("adding " + k);    bits.incl(k);  }  int count=0;  for (int i=bits.nextBit(0); i >= 0; i=bits.nextBit(i + 1)) {    System.out.println("found " + i);    count++;  }  if (count != 125) {    throw new Error();  }}  }
class C{  public InlineQueryResultCachedVoiceBuilder replyMarkup(InlineReplyMarkup replyMarkup){  this.reply_markup=replyMarkup;  return this;}  }
class C{  public BreadthFirstIterator(Node n,int depth,int traversal){  init(new Node[]{n},depth,traversal);}  }
class C{  @Override public int size(){  return mSize;}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  try {    super.execute(mapping,form,request,response);    SchedulingSubpartEditForm frm=(SchedulingSubpartEditForm)form;    ActionMessages errors=new ActionMessages();    String subpartId=request.getParameter("ssuid") == null ? request.getAttribute("ssuid") != null ? request.getAttribute("ssuid").toString() : null : request.getParameter("ssuid");    String op=frm.getOp();    if (op == null)     throw new Exception(MSG.errorNullOperationNotSupported());    if (op.equals(MSG.actionEditSubpart()) || op.equals(MSG.actionAddDistributionPreference()) || op.equals(MSG.actionNextSubpart())|| op.equals(MSG.actionPreviousSubpart())|| op.equals(MSG.actionClearClassPreferencesOnSubpart())) {      subpartId=frm.getSchedulingSubpartId();    } else {      frm.reset(mapping,request);    }    Debug.debug("op: " + op);    Debug.debug("subpart: " + subpartId);    if (subpartId == null || subpartId.trim() == "")     throw new Exception(MSG.errorSubpartInfoNotSupplied());    sessionContext.checkPermission(subpartId,"SchedulingSubpart",Right.SchedulingSubpartDetail);    boolean timeVertical=CommonValues.VerticalGrid.eq(sessionContext.getUser().getProperty(UserProperty.GridOrientation));    SchedulingSubpartDAO sdao=new SchedulingSubpartDAO();    SchedulingSubpart ss=sdao.get(new Long(subpartId));    if (op.equals(MSG.actionEditSubpart()) && subpartId != null && subpartId.trim() != "") {      response.sendRedirect(response.encodeURL("schedulingSubpartEdit.do?ssuid=" + ss.getUniqueId().toString()));      return null;    }    if (op.equals(MSG.actionAddDistributionPreference())) {      sessionContext.checkPermission(ss,Right.DistributionPreferenceSubpart);      CourseOffering cco=ss.getInstrOfferingConfig().getControllingCourseOffering();      request.setAttribute("subjectAreaId",cco.getSubjectArea().getUniqueId().toString());      request.setAttribute("schedSubpartId",subpartId);      request.setAttribute("courseOffrId",cco.getUniqueId().toString());      request.setAttribute("classId",DistributionPrefsForm.ALL_CLASSES_SELECT);      return mapping.findForward("addDistributionPrefs");    }    if (op.equals(MSG.actionNextSubpart())) {      response.sendRedirect(response.encodeURL("schedulingSubpartDetail.do?ssuid=" + frm.getNextId()));      return null;    }    if (op.equals(MSG.actionClearClassPreferencesOnSubpart()) && "y".equals(request.getParameter("confirm"))) {      sessionContext.checkPermission(ss,Right.SchedulingSubpartDetailClearClassPreferences);      Class_DAO cdao=new Class_DAO();      for (Iterator i=ss.getClasses().iterator(); i.hasNext(); ) {        Class_ c=(Class_)i.next();        c.getPreferences().clear();        cdao.saveOrUpdate(c);      }      ChangeLog.addChange(null,sessionContext,ss,ChangeLog.Source.SCHEDULING_SUBPART_EDIT,ChangeLog.Operation.CLEAR_ALL_PREF,ss.getInstrOfferingConfig().getInstructionalOffering().getControllingCourseOffering().getSubjectArea(),ss.getManagingDept());    }    if (op.equals(MSG.actionPreviousSubpart())) {      response.sendRedirect(response.encodeURL("schedulingSubpartDetail.do?ssuid=" + frm.getPreviousId()));      return null;    }    doLoad(request,frm,ss,subpartId);    Set timePatterns=null;    frm.setAvailableTimePatterns(TimePattern.findApplicable(sessionContext.getUser(),ss.getMinutesPerWk(),ss.effectiveDatePattern(),ss.getInstrOfferingConfig().getDurationModel(),false,ss.getManagingDept()));    initPrefs(frm,ss,null,false);    timePatterns=ss.getTimePatterns();    DistributionPrefsTableBuilder tbl=new DistributionPrefsTableBuilder();    String html=tbl.getDistPrefsTableForSchedulingSubpart(request,sessionContext,ss);    if (html != null)     request.setAttribute(DistributionPref.DIST_PREF_REQUEST_ATTR,html);    processPrefAction(request,frm,errors);    setupDatePatterns(request,frm,ss);    super.generateTimePatternGrids(request,frm,ss,ss.getMinutesPerWk(),ss.getInstrOfferingConfig().getDurationModel(),ss.effectiveDatePattern(),timePatterns,"init",timeVertical,false,null);    LookupTables.setupDatePatterns(request,sessionContext.getUser(),"Default",ss.getSession().getDefaultDatePatternNotNull(),ss.getManagingDept(),ss.effectiveDatePattern());    LookupTables.setupRooms(request,ss);    LookupTables.setupBldgs(request,ss);    LookupTables.setupRoomFeatures(request,ss);    LookupTables.setupRoomGroups(request,ss);    BackTracker.markForBack(request,"schedulingSubpartDetail.do?ssuid=" + frm.getSchedulingSubpartId(),MSG.backSubpart(ss.getSchedulingSubpartLabel()),true,false);    return mapping.findForward("displaySchedulingSubpart");  } catch (  Exception e) {    Debug.error(e);    throw e;  }}  }
class C{  private boolean matchesFilter(Category cat,List<String> filterList) throws WikiTitleParsingException {  String categoryTitle=cat.getTitle().getPlainTitle();  for (  String filter : filterList) {    if (categoryTitle.startsWith(filter)) {      logger.info(categoryTitle + " starts with " + filter+ " => removing");      return true;    }  }  return false;}  }
class C{  public Vertex evaluateFormula(Vertex formula,Map<Vertex,Vertex> variables,Network network){  return evaluateFormulaTemplate(formula,variables,System.currentTimeMillis(),network);}  }
class C{  public CompiledST defineTemplateAlias(Token aliasT,Token targetT){  String alias=aliasT.getText();  String target=targetT.getText();  CompiledST targetCode=rawGetTemplate("/" + target);  if (targetCode == null) {    errMgr.compileTimeError(ErrorType.ALIAS_TARGET_UNDEFINED,null,aliasT,alias,target);    return null;  }  rawDefineTemplate("/" + alias,targetCode,aliasT);  return targetCode;}  }
class C{  void loadTweet(final long tweetId,final Callback<Tweet> cb){  final Tweet cachedTweet=tweetCache.get(tweetId);  if (cachedTweet != null) {    deliverTweet(cachedTweet,cb);    return;  }  twitterCore.getApiClient().getStatusesService().show(tweetId,null,null,null).enqueue(new SingleTweetCallback(cb));}  }
class C{  public QueryBuilder<T,ID> orderBy(String columnName,boolean ascending){  FieldType fieldType=verifyColumnName(columnName);  if (fieldType.isForeignCollection()) {    throw new IllegalArgumentException("Can't orderBy foreign colletion field: " + columnName);  }  if (orderByList == null) {    orderByList=new ArrayList<OrderBy>();  }  orderByList.add(new OrderBy(columnName,ascending));  return this;}  }
class C{  @Override public void disconnectionNotification(String eventName,Object source){  m_listenee=null;}  }
class C{  public static Name fromAddress(InetAddress addr){  return fromAddress(addr.getAddress());}  }
class C{  public static <E,M>ProducerT<E,M,T0> yield(E e){  return ProducerT.producerT(FreeT.liftF(YieldF.yield(e,T0.of())));}  }
class C{  public void println(Object o){  println(o,true);}  }
class C{  public static void checkState(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  public static boolean isPluginAvailable(String pluginIdentifier){  return Platform.getBundle(pluginIdentifier) != null;}  }
class C{  public static RegionSubRegionsSizeResponse create(DistributionManager dm,InternalDistributedMember recipient){  RegionSubRegionsSizeResponse m=new RegionSubRegionsSizeResponse();  m.setRecipient(recipient);  m.snapshot=null;  m.cancelled=false;  return m;}  }
class C{  private void assertConnectionIsOpen(){  if (conn == null) {    throw new IllegalStateException("Not connected.");  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @SuppressWarnings("unchecked") public UsersMultiSelectList(int contextId,int selectionModel){  super();  loadUsersManagementExtension();  reloadUsers(contextId);  this.setSelectionMode(selectionModel);  this.setCellRenderer(new UserListCellRenderer());}  }
class C{  public static Map<String,Object> convert(final Properties properties){  final Map<String,Object> map=new HashMap<String,Object>();  final Enumeration<? extends Object> e=properties.propertyNames();  while (e.hasMoreElements()) {    final Object key=e.nextElement();    final String name=(String)key;    map.put(name,properties.getProperty(name));  }  return map;}  }
class C{  public ForStatement newForStatement(){  return new ForStatement(this);}  }
class C{  public static String fromTag(ByteTag tag){  return String.valueOf(tag.getValue()) + BYTE_SUFFIX;}  }
class C{  static public IConstraint[] concat(final IConstraint[] a,final IConstraint[] b){  final List<IConstraint> list=new LinkedList<IConstraint>();  if (a != null) {    for (    IConstraint c : a) {      list.add(c);    }  }  if (b != null) {    for (    IConstraint c : b) {      list.add(c);    }  }  return list.isEmpty() ? null : list.toArray(new IConstraint[list.size()]);}  }
class C{  public void clearHistory(){  mEditHistory.clear();}  }
class C{  public void makePrivilegedAllCurrentThreads(){  ThreadGroup root=Thread.currentThread().getThreadGroup();  while (root.getParent() != null) {    root=root.getParent();  }  Thread[] threads=new Thread[root.activeCount() + 10];  root.enumerate(threads);  for (  Thread t : threads) {    if (t != null) {      addPrivilegedThread(t);    }  }}  }
class C{  public void start(){  super.start();  createGrids();  LSystemDrawer ld=new LSystemDrawer(l);  ld.stopper=schedule.scheduleRepeating(ld);}  }
class C{  boolean canPerform(String permissionName){  return canPerform(permissionName,false);}  }
class C{  public void addInt(int o,int x,int d){  if (force_defaults || x != d) {    addInt(x);    slot(o);  }}  }
class C{  protected boolean endingMultiLineComment(String content,int startOffset,int endOffset) throws BadLocationException {  if (!getMultiLineComment()) {    return false;  }  int index=indexOf(content,getMultiLineCommentEnd(),startOffset);  if ((index < 0) || (index > endOffset)) {    return false;  } else {    setInsideMultiLineComment(false);    return true;  }}  }
class C{  public void waitForIdle(Runnable recipient){  mMessageQueue.addIdleHandler(new Idler(recipient));  mThread.getHandler().post(new EmptyRunnable());}  }
class C{  public void addMinutes(int minutes){  super.addField(DurationFieldType.minutes(),minutes);}  }
class C{  public void disableDependency(Capability c){  if (doNotCheckCapabilities()) {    return;  }  if (c == Capability.NOMINAL_ATTRIBUTES) {    disableDependency(Capability.BINARY_ATTRIBUTES);  } else   if (c == Capability.BINARY_ATTRIBUTES) {    disableDependency(Capability.UNARY_ATTRIBUTES);  } else   if (c == Capability.UNARY_ATTRIBUTES) {    disableDependency(Capability.EMPTY_NOMINAL_ATTRIBUTES);  } else   if (c == Capability.NOMINAL_CLASS) {    disableDependency(Capability.BINARY_CLASS);  } else   if (c == Capability.BINARY_CLASS) {    disableDependency(Capability.UNARY_CLASS);  } else   if (c == Capability.UNARY_CLASS) {    disableDependency(Capability.EMPTY_NOMINAL_CLASS);  }  m_Dependencies.remove(c);}  }
class C{  private boolean isVNASActive(VirtualNAS virtualNAS){  if (virtualNAS.getInactive() || virtualNAS.getAssignedVirtualArrays() == null || virtualNAS.getAssignedVirtualArrays().isEmpty() || !RegistrationStatus.REGISTERED.toString().equalsIgnoreCase(virtualNAS.getRegistrationStatus()) || !DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name().equals(virtualNAS.getCompatibilityStatus()) || !VirtualNasState.LOADED.name().equals(virtualNAS.getVNasState()) || !DiscoveryStatus.VISIBLE.name().equals(virtualNAS.getDiscoveryStatus())) {    return false;  }  return true;}  }
class C{  public void linkDirectedEdgesForMinimalEdgeRings(){  DirectedEdge de=startDe;  do {    Node node=de.getNode();    ((DirectedEdgeStar)node.getEdges()).linkMinimalDirectedEdges(this);    de=de.getNext();  } while (de != startDe);}  }
class C{  public BigInteger calculateSessionKey() throws CryptoException {  if ((this.S == null) || (this.M1 == null) || (this.M2 == null)) {    throw new CryptoException("Impossible to compute Key: " + "some data are missing from the previous operations (S,M1,M2)");  }  this.Key=SRP6Util.calculateKey(digest,N,S);  return Key;}  }
class C{  protected void fireDocumentAboutToBeChanged(DocumentEvent event){  if (fDocumentPartitioners != null) {    Iterator<DocumentPartitioner> e=fDocumentPartitioners.values().iterator();    while (e.hasNext()) {      DocumentPartitioner p=e.next();      try {        p.documentAboutToBeChanged(event);      } catch (      Exception ex) {        fail(ex);      }    }  }  Object[] listeners=fPrenotifiedDocumentListeners.getListeners();  for (int i=0; i < listeners.length; i++) {    try {      ((DocumentListener)listeners[i]).documentAboutToBeChanged(event);    } catch (    Exception ex) {      fail(ex);    }  }  listeners=fDocumentListeners.getListeners();  for (int i=0; i < listeners.length; i++) {    try {      ((DocumentListener)listeners[i]).documentAboutToBeChanged(event);    } catch (    Exception ex) {      fail(ex);    }  }}  }
class C{  public static void main(String[] args){  FenwickTree ft=null;  String cmd="cmp";  while (true) {    String[] line=StdIn.readLine().split(" ");    if (line[0].equals("exit"))     break;    int arg1=0, arg2=0;    if (line.length > 1) {      arg1=Integer.parseInt(line[1]);    }    if (line.length > 2) {      arg2=Integer.parseInt(line[2]);    }    if ((!line[0].equals("set") && !line[0].equals("init")) && ft == null) {      StdOut.println("FenwickTree not initialized");      continue;    }    if (line[0].equals("init")) {      ft=new FenwickTree(arg1);      for (int i=1; i <= ft.size(); i++) {        StdOut.print(ft.rsq(i,i) + " ");      }      StdOut.println();    } else     if (line[0].equals("set")) {      ft=new FenwickTree(line.length - 1);      for (int i=1; i <= line.length - 1; i++) {        ft.update(i,Integer.parseInt(line[i]));      }    } else     if (line[0].equals("up")) {      ft.update(arg1,arg2);      for (int i=1; i <= ft.size(); i++) {        StdOut.print(ft.rsq(i,i) + " ");      }      StdOut.println();    } else     if (line[0].equals("rsq")) {      StdOut.printf("Sum from %d to %d = %d%n",arg1,arg2,ft.rsq(arg1,arg2));    } else {      StdOut.println("Invalid command");    }  }  StdOut.close();}  }
class C{  public static void initialize(final ExecutorService executorService){  checkTeaSpoonInstance();  executeEngine=new ExecuteEngine(executorService);}  }
class C{  private void findVerticalLines(final float minX,final float minY,final float maxX,final float maxY,final int currentWritingMode) throws PdfException {  final HashMap<Integer,Integer> xLines=new HashMap<Integer,Integer>();  int most_frequent=0;  final int count=pdf_data.getRawTextElementCount();  float x1, x2, y1, y2;  String raw;  for (int i=0; i < count; i++) {    float currentX=0, lastX;    Integer intX;    raw=this.pdf_data.contents[i];switch (currentWritingMode) {case PdfData.HORIZONTAL_LEFT_TO_RIGHT:      x1=this.f_x1[i];    x2=this.f_x2[i];  y1=this.f_y1[i];y2=this.f_y2[i];break;case PdfData.HORIZONTAL_RIGHT_TO_LEFT:x2=this.f_x1[i];x1=this.f_x2[i];y1=this.f_y1[i];y2=this.f_y2[i];break;case PdfData.VERTICAL_BOTTOM_TO_TOP:x1=this.f_y1[i];x2=this.f_y2[i];y1=this.f_x2[i];y2=this.f_x1[i];break;case PdfData.VERTICAL_TOP_TO_BOTTOM:x1=this.f_y2[i];x2=this.f_y1[i];y2=this.f_x1[i];y1=this.f_x2[i];break;default :throw new PdfException("Illegal value " + currentWritingMode + "for currentWritingMode");}if ((x1 > minX - .5) && (x2 < maxX + .5) && (y2 > minY - .5)&& (y1 < maxY + .5)) {final StringTokenizer tokens=new StringTokenizer(raw,MARKER,true);String value, lastValue="";Object currentValue;while (tokens.hasMoreTokens()) {value=tokens.nextToken();if (value.equals(MARKER)) {value=tokens.nextToken();if (!value.isEmpty()) {lastX=currentX;currentX=Float.parseFloat(value);try {if (lastValue.isEmpty() || (lastValue.indexOf(' ') != -1)) {intX=(int)currentX;currentValue=xLines.get(intX);if (currentValue == null) {xLines.put(intX,1);} else {int countReached=(Integer)currentValue;countReached++;if (countReached > most_frequent) {most_frequent=countReached;}xLines.put(intX,countReached);}final int middle=(int)(lastX + ((currentX - lastX) / 2));if (lastX != 0) {intX=middle;currentValue=xLines.get(intX);if (currentValue == null) {xLines.put(intX,1);} else {int count_reached=(Integer)currentValue;count_reached++;if (count_reached > most_frequent) {most_frequent=count_reached;}xLines.put(intX,count_reached);}}}} catch (final Exception e) {LogWriter.writeLog("Exception " + e + " stripping x values");}}tokens.nextToken();tokens.nextToken();tokens.nextToken();value=tokens.nextToken();lastValue=value;}}}}final Iterator<Integer> keys=xLines.keySet().iterator();final int minimum_needed=most_frequent / 2;while (keys.hasNext()) {final Integer current_key=keys.next();final int current_count=xLines.get(current_key);if (current_count > minimum_needed) {lineBreaks.addElement(current_key);}}}  }
class C{  private boolean checkRelationships(){  for (  final String aRelationCheck : m_relationship) {    final String[] relationCheck=aRelationCheck.split(":");    final PlayerID p1=getData().getPlayerList().getPlayerID(relationCheck[0]);    final PlayerID p2=getData().getPlayerList().getPlayerID(relationCheck[1]);    final int relationshipsExistance=Integer.parseInt(relationCheck[3]);    final Relationship currentRelationship=getData().getRelationshipTracker().getRelationship(p1,p2);    final RelationshipType currentRelationshipType=currentRelationship.getRelationshipType();    if (!relationShipExistsLongEnnough(currentRelationship,relationshipsExistance)) {      return false;    }    if (!(relationCheck[2].equals(Constants.RELATIONSHIP_CONDITION_ANY_ALLIED) && Matches.RelationshipTypeIsAllied.match(currentRelationshipType) || relationCheck[2].equals(Constants.RELATIONSHIP_CONDITION_ANY_NEUTRAL) && Matches.RelationshipTypeIsNeutral.match(currentRelationshipType) || relationCheck[2].equals(Constants.RELATIONSHIP_CONDITION_ANY_WAR) && Matches.RelationshipTypeIsAtWar.match(currentRelationshipType) || currentRelationshipType.equals(getData().getRelationshipTypeList().getRelationshipType(relationCheck[2])))) {      return false;    }  }  return true;}  }
class C{  public boolean hasKey(){  return m_value instanceof NamePair;}  }
class C{  public boolean isStreamMute(int streamType){  return mStreamStates[streamType].isMuted();}  }
class C{  protected String paramString(){  String paintTicksString=(paintTicks ? "true" : "false");  String paintTrackString=(paintTrack ? "true" : "false");  String paintLabelsString=(paintLabels ? "true" : "false");  String isInvertedString=(isInverted ? "true" : "false");  String snapToTicksString=(snapToTicks ? "true" : "false");  String snapToValueString=(snapToValue ? "true" : "false");  String orientationString=(orientation == HORIZONTAL ? "HORIZONTAL" : "VERTICAL");  return super.paramString() + ",isInverted=" + isInvertedString+ ",majorTickSpacing="+ majorTickSpacing+ ",minorTickSpacing="+ minorTickSpacing+ ",orientation="+ orientationString+ ",paintLabels="+ paintLabelsString+ ",paintTicks="+ paintTicksString+ ",paintTrack="+ paintTrackString+ ",snapToTicks="+ snapToTicksString+ ",snapToValue="+ snapToValueString;}  }
class C{  public boolean hasProperties(){  return hasRepeatingExtension(Property.class);}  }
class C{  protected AbstractRpcResponse(Object result){  complete(result);}  }
class C{  void init(){  if (mEvaluator == null) {    mEvaluator=(mValueType == Integer.class) ? sIntEvaluator : (mValueType == Float.class) ? sFloatEvaluator : null;  }  if (mEvaluator != null) {    mKeyframeSet.setEvaluator(mEvaluator);  }}  }
class C{  public void unregisterPlaylistListener(CheerleaderPlaylistListener listener){  checkState();  mCheerleaderPlaylistListeners.remove(listener);}  }
class C{  @Override public void removeServerAddress(Application application){  String suffixCloudUnit=application.getSuffixCloudUnitIO();  JedisPool pool=null;  Jedis jedis=null;  try {    pool=new JedisPool(new JedisPoolConfig(),redisIp,Integer.parseInt(redisPort),3000);    jedis=pool.getResource();    String subNameSpace=concatSubNameSpace(application);    String key=subNameSpace + suffixCloudUnit;    String frontend="frontend:" + subNameSpace + suffixCloudUnit;    jedis.rpop(frontend.toLowerCase());    String frontendServerManager="frontend:manager-" + key.toLowerCase();    jedis.del(frontendServerManager);  } catch (  JedisConnectionException|UnsupportedEncodingException e) {    logger.error("HipacheRedisUtils Exception",e);  } finally {    if (jedis != null) {      pool.destroy();    }  }}  }
class C{  public SVGOMAnimatedLength(AbstractElement elt,String ns,String ln,String def,short dir,boolean nonneg){  super(elt,ns,ln,dir,nonneg);  defaultValue=def;}  }
class C{  public boolean isNetworkResourceManagementSupported(){  return networkResourceManagementSupported;}  }
class C{  private void savedSyncedNumbers(){  for (  ContactSyncEntry eachEntry : mSyncQueue) {    if (eachEntry.isSynced()) {      for (int i=0; i < eachEntry.numbersToSync.size(); i++) {        String eachNumber=eachEntry.numbersToSync.get(i);        String eachName="";        if (i < eachEntry.nameToSync.size()) {          eachName=eachEntry.nameToSync.get(i);        }        final ContentValues values=new ContentValues(1);        values.put(DatabaseColumns.NUMBER,eachNumber);        values.put(DatabaseColumns.NAME,eachName);        DBInterface.insert(TableUploadedContacts.NAME,null,values,false);      }    }  }}  }
class C{  @SuppressWarnings("deprecation") private void updateClockControlLight(){  if (_clock != null) {    Date now=_clock.getTime();    int timeNow=now.getHours() * 60 + now.getMinutes();    int state=_parentLight.getState();    if (_timeOn <= _timeOff) {      if ((timeNow < _timeOn) || (timeNow >= _timeOff)) {        if (state == Light.ON) {          _parentLight.setState(Light.OFF);        }      } else {        if (state == Light.OFF) {          _parentLight.setState(Light.ON);        }      }    } else {      if ((timeNow >= _timeOn) || (timeNow < _timeOff)) {        if (state == Light.OFF) {          _parentLight.setState(Light.ON);        }      } else {        if (state == Light.ON) {          _parentLight.setState(Light.OFF);        }      }    }  }}  }
class C{  @Override public void addOFSwitchListener(IOFSwitchListener listener){  this.switchListeners.add(listener);}  }
class C{  public boolean hasValue(){  return mValue != null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int maxKeys(){  return maxKeys;}  }
class C{  public S2CellId prev(){  return new S2CellId(id - (lowestOnBit() << 1));}  }
class C{  public static boolean isDirectoryName(String fileName){  for (  String suffix : directoryNames) {    if (fileName.equals(suffix)) {      return true;    }  }  return false;}  }
class C{  public Set<String> loadAllReachedAchievementsOfPlayer(DBTransaction transaction,String playerName) throws SQLException {  Map<String,Object> params=new HashMap<String,Object>();  params.put("playername",playerName);  String query="SELECT identifier FROM achievement a JOIN reached_achievement ra ON ra.achievement_id = a.id WHERE ra.charname = '[playername]';";  ResultSet resultSet=transaction.query(query,params);  Set<String> identifiers=new HashSet<String>();  while (resultSet.next()) {    identifiers.add(resultSet.getString(1));  }  return identifiers;}  }
class C{  @Override protected void initialize(){  ExtensionFileFilter filter;  super.initialize();  m_Formatter=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  m_FileChooser=GUIHelper.newFileChooser();  filter=new ExtensionFileFilter(".log","Log files");  m_FileChooser.addChoosableFileFilter(filter);  m_FileChooser.setFileFilter(filter);  m_FileChooser.setAcceptAllFileFilterUsed(true);}  }
class C{  @Override public Rectangle2D focusOn(final IShape geometry,final IDisplaySurface s){  if (geometry == null)   return null;  Rectangle2D result=null;  for (  final ILayer display : enabledLayers) {    final Rectangle2D r=display.focusOn(geometry,s);    if (r != null) {      if (result == null)       result=new Rectangle2D.Double(r.getX(),r.getY(),r.getWidth(),r.getHeight()); else       result.add(r);    }  }  return result;}  }
class C{  public String valueFor(File file,String key){  StringBuilder pathBuilder=new StringBuilder(file.getAbsolutePath().length());  boolean isDirectory=file.isDirectory();  File parent=file.getParentFile();  pathBuilder.append(file.getName());  while (parent != null) {    String path=pathBuilder.toString();    String value=findAttributeInRules(path,isDirectory,key,getRulesForFolder(parent));    if (value != null) {      return value;    }    pathBuilder.insert(0,parent.getName() + "/");    parent=parent.getParentFile();  }  return null;}  }
class C{  static byte[] discardWhitespace(byte[] data){  byte groomedData[]=new byte[data.length];  int bytesCopied=0;  for (int i=0; i < data.length; i++) {switch (data[i]) {case (byte)' ':case (byte)'\n':case (byte)'\r':case (byte)'\t':      break;default :    groomedData[bytesCopied++]=data[i];}}byte packedData[]=new byte[bytesCopied];System.arraycopy(groomedData,0,packedData,0,bytesCopied);return packedData;}  }
class C{  public static Stats of(double... values){  StatsAccumulator acummulator=new StatsAccumulator();  acummulator.addAll(values);  return acummulator.snapshot();}  }
class C{  public HyperlinkEvent(Object source,EventType type,URL u,String desc){  this(source,type,u,desc,null);}  }
class C{  public void onLoaded(){}  }
class C{  private static void addListenersForReal(final Service service,final Set<Listener> existingListeners,final Listener listener,final Executor executor){  if (!existingListeners.contains(listener)) {    existingListeners.add(listener);    service.addListener(listener,executor);  }}  }
class C{  public PolicyQualifierInfo(ASN1ObjectIdentifier policyQualifierId,ASN1Encodable qualifier){  this.policyQualifierId=policyQualifierId;  this.qualifier=qualifier;}  }
class C{  private boolean isTaxonKeywordEmpty(TaxonKeyword word){  if (word != null) {    String scientificName=word.getScientificName();    String common=word.getCommonName();    String rank=word.getRank();    return Strings.isNullOrEmpty(scientificName) && Strings.isNullOrEmpty(common) && Strings.isNullOrEmpty(rank);  }  return true;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.818 -0400",hash_original_method="8351070DA7823031FCCA3BE9B1CDBB4D",hash_generated_method="5E144588AF176953A74CB8C14F71C89C") protected void processBytes(byte[] bytes,int offset,int length){}  }
class C{  public boolean isMine(Wallet wallet){  try {    Script script=getScriptPubKey();    if (script.isSentToRawPubKey()) {      byte[] pubkey=script.getPubKey();      return wallet.isPubKeyMine(pubkey);    } else {      byte[] pubkeyHash=script.getPubKeyHash();      return wallet.isPubKeyHashMine(pubkeyHash);    }  } catch (  ScriptException e) {    log.debug("Could not parse tx output script: {}",e.toString());    return false;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:08.180 -0500",hash_original_method="8D23F85B43098BFBC0CC2E7E59C1A10A",hash_generated_method="8AE753C071FF8E0D201DD8A4B290FA3D") public boolean isValid(){  SSLSessionContext context=sessionContext;  if (isValid && context != null && context.getSessionTimeout() != 0 && getCreationTime() + (context.getSessionTimeout() * 1000) < System.currentTimeMillis()) {    isValid=false;  }  return isValid;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override AndroidHttpClientConnection openConnection(Request req) throws IOException {  SSLSocket sslSock=null;  if (mProxyHost != null) {    AndroidHttpClientConnection proxyConnection=null;    Socket proxySock=null;    try {      proxySock=new Socket(mProxyHost.getHostName(),mProxyHost.getPort());      proxySock.setSoTimeout(60 * 1000);      proxyConnection=new AndroidHttpClientConnection();      HttpParams params=new BasicHttpParams();      HttpConnectionParams.setSocketBufferSize(params,8192);      proxyConnection.bind(proxySock,params);    } catch (    IOException e) {      if (proxyConnection != null) {        proxyConnection.close();      }      String errorMessage=e.getMessage();      if (errorMessage == null) {        errorMessage="failed to establish a connection to the proxy";      }      throw new IOException(errorMessage);    }    StatusLine statusLine=null;    int statusCode=0;    Headers headers=new Headers();    try {      BasicHttpRequest proxyReq=new BasicHttpRequest("CONNECT",mHost.toHostString());      for (      Header h : req.mHttpRequest.getAllHeaders()) {        String headerName=h.getName().toLowerCase(Locale.ROOT);        if (headerName.startsWith("proxy") || headerName.equals("keep-alive") || headerName.equals("host")) {          proxyReq.addHeader(h);        }      }      proxyConnection.sendRequestHeader(proxyReq);      proxyConnection.flush();      do {        statusLine=proxyConnection.parseResponseHeader(headers);        statusCode=statusLine.getStatusCode();      } while (statusCode < HttpStatus.SC_OK);    } catch (    ParseException e) {      String errorMessage=e.getMessage();      if (errorMessage == null) {        errorMessage="failed to send a CONNECT request";      }      throw new IOException(errorMessage);    }catch (    HttpException e) {      String errorMessage=e.getMessage();      if (errorMessage == null) {        errorMessage="failed to send a CONNECT request";      }      throw new IOException(errorMessage);    }catch (    IOException e) {      String errorMessage=e.getMessage();      if (errorMessage == null) {        errorMessage="failed to send a CONNECT request";      }      throw new IOException(errorMessage);    }    if (statusCode == HttpStatus.SC_OK) {      try {        sslSock=(SSLSocket)getSocketFactory().createSocket(proxySock,mHost.getHostName(),mHost.getPort(),true);      } catch (      IOException e) {        if (sslSock != null) {          sslSock.close();        }        String errorMessage=e.getMessage();        if (errorMessage == null) {          errorMessage="failed to create an SSL socket";        }        throw new IOException(errorMessage);      }    } else {      ProtocolVersion version=statusLine.getProtocolVersion();      req.mEventHandler.status(version.getMajor(),version.getMinor(),statusCode,statusLine.getReasonPhrase());      req.mEventHandler.headers(headers);      req.mEventHandler.endData();      proxyConnection.close();      return null;    }  } else {    try {      sslSock=(SSLSocket)getSocketFactory().createSocket(mHost.getHostName(),mHost.getPort());      sslSock.setSoTimeout(SOCKET_TIMEOUT);    } catch (    IOException e) {      if (sslSock != null) {        sslSock.close();      }      String errorMessage=e.getMessage();      if (errorMessage == null) {        errorMessage="failed to create an SSL socket";      }      throw new IOException(errorMessage);    }  }  SslError error=CertificateChainValidator.getInstance().doHandshakeAndValidateServerCertificates(this,sslSock,mHost.getHostName());  if (error != null) {synchronized (mSuspendLock) {      mSuspended=true;    }    boolean canHandle=req.getEventHandler().handleSslErrorRequest(error);    if (!canHandle) {      throw new IOException("failed to handle " + error);    }synchronized (mSuspendLock) {      if (mSuspended) {        try {          mSuspendLock.wait(10 * 60 * 1000);          if (mSuspended) {            mSuspended=false;            mAborted=true;            if (HttpLog.LOGV) {              HttpLog.v("HttpsConnection.openConnection():" + " SSL timeout expired and request was cancelled!!!");            }          }        } catch (        InterruptedException e) {        }      }      if (mAborted) {        sslSock.close();        throw new SSLConnectionClosedByUserException("connection closed by the user");      }    }  }  AndroidHttpClientConnection conn=new AndroidHttpClientConnection();  BasicHttpParams params=new BasicHttpParams();  params.setIntParameter(HttpConnectionParams.SOCKET_BUFFER_SIZE,8192);  conn.bind(sslSock,params);  return conn;}  }
class C{  final public boolean isMinus(){  return false;}  }
class C{  @Override public BigDecimal calculateTotalPendingAdvance(final BigDecimal totalAdvancePaid,final Date billDate,final WorkOrderEstimate workOrderEstimate,final Long billId){  final CChartOfAccounts advanceCOA=contractorAdvanceService.getContractorAdvanceAccountcodeForWOE(workOrderEstimate.getId());  BigDecimal totalPendingBalance=BigDecimal.ZERO;  BigDecimal totalAdvanceAdjusted=BigDecimal.ZERO;  if (advanceCOA != null && totalAdvancePaid != null && totalAdvancePaid.compareTo(BigDecimal.ZERO) > 0) {    totalAdvanceAdjusted=getTotalAdvanceAdjustedForWOE(billDate,workOrderEstimate.getId(),advanceCOA.getId(),billId);    if (totalAdvanceAdjusted != null && totalAdvanceAdjusted.compareTo(BigDecimal.ZERO) > 0 && totalAdvanceAdjusted.compareTo(BigDecimal.ZERO) > 0)     totalPendingBalance=totalAdvanceAdjusted.subtract(totalAdvanceAdjusted); else     totalPendingBalance=totalAdvancePaid;  }  return totalPendingBalance;}  }
class C{  public static FluentIterable<Registrar> loadAllActive(){  return FluentIterable.from(loadAll()).filter(IS_ACTIVE);}  }
class C{  public boolean visitFunction(ExpressionOwner owner,Function func){  return true;}  }
class C{  public boolean hasMimeType(String mimeType){  for (int i=0; i < mMimeTypes.length; i++) {    if (compareMimeTypes(mMimeTypes[i],mimeType)) {      return true;    }  }  return false;}  }
class C{  public void clear(){  throw new UnsupportedOperationException();}  }
class C{  public static DBMSData convertLCRtoDBMSDataDML(PlogLCR LCR) throws ReplicatorException, UnsupportedEncodingException, SerialException, SQLException {  int indexKey=1;  RowChangeData rowData=new RowChangeData();  OneRowChange oneRowChange=new OneRowChange(LCR.tableOwner,LCR.tableName,LCR.subtypeAsActionType());  oneRowChange.setTableId(LCR.tableId);  rowData.appendOneRowChange(oneRowChange);  LCR.parseDataTypes(oneRowChange);  ArrayList<ColumnSpec> keySpec=oneRowChange.getKeySpec();  ArrayList<ColumnSpec> valSpec=oneRowChange.getColumnSpec();  ArrayList<ArrayList<OneRowChange.ColumnVal>> keyValuesArray=oneRowChange.getKeyValues();  ArrayList<OneRowChange.ColumnVal> keyValues=new ArrayList<ColumnVal>();  if (oneRowChange.getAction() != ActionType.INSERT) {    keyValuesArray.add(keyValues);  }  ArrayList<ArrayList<OneRowChange.ColumnVal>> valValuesArray=oneRowChange.getColumnValues();  ArrayList<OneRowChange.ColumnVal> valValues=new ArrayList<ColumnVal>();  if (oneRowChange.getAction() != ActionType.DELETE) {    valValuesArray.add(valValues);  }  if (logger.isDebugEnabled()) {    logger.debug("Row Change: " + oneRowChange.getAction().toString() + ":"+ oneRowChange.getSchemaName()+ "."+ oneRowChange.getTableName());  }  HashMap<String,Integer> columnsPresentAny=new HashMap<String,Integer>();  HashMap<Integer,PlogLCR.oneColVal> columnsPresentKey=new HashMap<Integer,PlogLCR.oneColVal>();  HashMap<Integer,PlogLCR.oneColVal> columnsPresentVal=new HashMap<Integer,PlogLCR.oneColVal>();  for (  PlogLCR.oneColVal oneCol : LCR.columnValues) {    oneCol.parseValue();    int thisKey;    String p="?";    if (oneCol.imageType == PlogLCRTag.TAG_KEYIMAGE) {      p="KEY";    } else     if (oneCol.imageType == PlogLCRTag.TAG_PREIMAGE) {      p="PRE";    } else     if (oneCol.imageType == PlogLCRTag.TAG_POSTIMAGE) {      p="POST";    }    if (oneCol.imageType == PlogLCRTag.TAG_KEYIMAGE || oneCol.imageType == PlogLCRTag.TAG_PREIMAGE) {      if (columnsPresentAny.containsKey(oneCol.columnSpec.getName())) {        thisKey=columnsPresentAny.get(oneCol.columnSpec.getName());      } else {        thisKey=oneCol.id;        indexKey=thisKey > indexKey ? thisKey : indexKey;        columnsPresentAny.put(oneCol.columnSpec.getName(),thisKey);      }      columnsPresentKey.put(thisKey,oneCol);    } else {      if (columnsPresentAny.containsKey(oneCol.columnSpec.getName())) {        thisKey=columnsPresentAny.get(oneCol.columnSpec.getName());      } else {        thisKey=oneCol.id;        indexKey=thisKey > indexKey ? thisKey : indexKey;        columnsPresentAny.put(oneCol.columnSpec.getName(),thisKey);      }      columnsPresentVal.put(thisKey,oneCol);    }    if (logger.isDebugEnabled()) {      logger.debug("Col [[" + p + "] #"+ oneCol.id+ "->"+ thisKey+ " "+ oneCol.name+ "["+ oneCol.datatype+ "] "+ oneCol.imageType);    }  }  int idx;  for (idx=1; idx <= indexKey; idx++) {    if (columnsPresentKey.containsKey(idx)) {      PlogLCR.oneColVal oneCol=columnsPresentKey.get(idx);      oneCol.columnSpec.setIndex(idx);      keySpec.add(oneCol.columnSpec);      keyValues.add(oneCol.columnVal);      if (logger.isDebugEnabled()) {        logger.debug("Col [KEY] #" + oneCol.id + "->"+ idx+ " "+ oneCol.name+ "["+ oneCol.datatype+ "] "+ oneCol.imageType);      }    }    if (columnsPresentVal.containsKey(idx)) {      PlogLCR.oneColVal oneCol=columnsPresentVal.get(idx);      oneCol.columnSpec.setIndex(idx);      valSpec.add(oneCol.columnSpec);      valValues.add(oneCol.columnVal);      if (logger.isDebugEnabled()) {        logger.debug("Col [VAL] #" + oneCol.id + "->"+ idx+ " "+ oneCol.name+ "["+ oneCol.datatype+ "] "+ oneCol.imageType);      }    } else     if (columnsPresentKey.containsKey(idx) && oneRowChange.getAction() != ActionType.DELETE) {      PlogLCR.oneColVal oneCol=columnsPresentKey.get(idx);      valSpec.add(oneCol.columnSpec);      valValues.add(oneCol.columnVal);      if (logger.isDebugEnabled()) {        logger.debug("Col [KEY->VAL]#" + oneCol.id + "->"+ idx+ " "+ oneCol.name+ "["+ oneCol.datatype+ "] "+ oneCol.imageType);      }    }  }  return rowData;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public List<File> listPngsFromArgs(){  ArrayList<File> l=new ArrayList<File>();  for (  String arg : argslist)   l.addAll(listPng(new File(arg)));  return l;}  }
class C{  public static Put toPut(HBaseMailbox mailbox){  Put put=new Put(mailbox.getMailboxId().toBytes());  if (mailbox.getName() != null) {    put.add(MAILBOX_CF,MAILBOX_NAME,Bytes.toBytes(mailbox.getName()));  }  if (mailbox.getUser() != null) {    put.add(MAILBOX_CF,MAILBOX_USER,Bytes.toBytes(mailbox.getUser()));  }  if (mailbox.getNamespace() != null) {    put.add(MAILBOX_CF,MAILBOX_NAMESPACE,Bytes.toBytes(mailbox.getNamespace()));  }  put.add(MAILBOX_CF,MAILBOX_LASTUID,Bytes.toBytes(mailbox.getLastUid()));  put.add(MAILBOX_CF,MAILBOX_UIDVALIDITY,Bytes.toBytes(mailbox.getUidValidity()));  put.add(MAILBOX_CF,MAILBOX_HIGHEST_MODSEQ,Bytes.toBytes(mailbox.getHighestModSeq()));  put.add(MAILBOX_CF,MAILBOX_MESSAGE_COUNT,Bytes.toBytes(mailbox.getMessageCount()));  return put;}  }
class C{  public static boolean areALotOfWaiting(int waits){  return (waits > 5);}  }
class C{  @Override public void outputReloaded(){  setDisplayScope(output.getScope().copy("in OpenGLDisplaySurface"));  if (!GamaPreferences.ERRORS_IN_DISPLAYS.getValue())   getScope().disableErrorReporting();  renderer.initScene();  layerManager.outputChanged();  if (zoomFit) {    zoomFit();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.259 -0500",hash_original_method="AE92957E52CD2ECF48167D0FF23A4162",hash_generated_method="1F9DE2609B1FAB3B656ADC2A516F906D") public void update(Message message,State state,State orgState){  this.what=message.what;  this.state=state;  this.orgState=orgState;}  }
class C{  public double distance(Geo v2){  return Math.atan2(v2.crossLength(this),v2.dot(this));}  }
class C{  protected AxisState drawTickLabels(int band,Graphics2D g2,AxisState state,Rectangle2D dataArea,RectangleEdge edge){  double delta1=0.0;  FontMetrics fm=g2.getFontMetrics(this.labelInfo[band].getLabelFont());  if (edge == RectangleEdge.BOTTOM) {    delta1=this.labelInfo[band].getPadding().calculateTopOutset(fm.getHeight());  } else   if (edge == RectangleEdge.TOP) {    delta1=this.labelInfo[band].getPadding().calculateBottomOutset(fm.getHeight());  }  state.moveCursor(delta1,edge);  long axisMin=this.first.getFirstMillisecond();  long axisMax=this.last.getLastMillisecond();  g2.setFont(this.labelInfo[band].getLabelFont());  g2.setPaint(this.labelInfo[band].getLabelPaint());  RegularTimePeriod p1=this.labelInfo[band].createInstance(new Date(axisMin),this.timeZone,this.locale);  RegularTimePeriod p2=this.labelInfo[band].createInstance(new Date(axisMax),this.timeZone,this.locale);  DateFormat df=this.labelInfo[band].getDateFormat();  df.setTimeZone(this.timeZone);  String label1=df.format(new Date(p1.getMiddleMillisecond()));  String label2=df.format(new Date(p2.getMiddleMillisecond()));  Rectangle2D b1=TextUtilities.getTextBounds(label1,g2,g2.getFontMetrics());  Rectangle2D b2=TextUtilities.getTextBounds(label2,g2,g2.getFontMetrics());  double w=Math.max(b1.getWidth(),b2.getWidth());  long ww=Math.round(java2DToValue(dataArea.getX() + w + 5.0,dataArea,edge));  if (isInverted()) {    ww=axisMax - ww;  } else {    ww=ww - axisMin;  }  long length=p1.getLastMillisecond() - p1.getFirstMillisecond();  int periods=(int)(ww / length) + 1;  RegularTimePeriod p=this.labelInfo[band].createInstance(new Date(axisMin),this.timeZone,this.locale);  Rectangle2D b=null;  long lastXX=0L;  float y=(float)(state.getCursor());  TextAnchor anchor=TextAnchor.TOP_CENTER;  float yDelta=(float)b1.getHeight();  if (edge == RectangleEdge.TOP) {    anchor=TextAnchor.BOTTOM_CENTER;    yDelta=-yDelta;  }  while (p.getFirstMillisecond() <= axisMax) {    float x=(float)valueToJava2D(p.getMiddleMillisecond(),dataArea,edge);    String label=df.format(new Date(p.getMiddleMillisecond()));    long first=p.getFirstMillisecond();    long last=p.getLastMillisecond();    if (last > axisMax) {      Rectangle2D bb=TextUtilities.getTextBounds(label,g2,g2.getFontMetrics());      if ((x + bb.getWidth() / 2) > dataArea.getMaxX()) {        float xstart=(float)valueToJava2D(Math.max(first,axisMin),dataArea,edge);        if (bb.getWidth() < (dataArea.getMaxX() - xstart)) {          x=((float)dataArea.getMaxX() + xstart) / 2.0f;        } else {          label=null;        }      }    }    if (first < axisMin) {      Rectangle2D bb=TextUtilities.getTextBounds(label,g2,g2.getFontMetrics());      if ((x - bb.getWidth() / 2) < dataArea.getX()) {        float xlast=(float)valueToJava2D(Math.min(last,axisMax),dataArea,edge);        if (bb.getWidth() < (xlast - dataArea.getX())) {          x=(xlast + (float)dataArea.getX()) / 2.0f;        } else {          label=null;        }      }    }    if (label != null) {      g2.setPaint(this.labelInfo[band].getLabelPaint());      b=TextUtilities.drawAlignedString(label,g2,x,y,anchor);    }    if (lastXX > 0L) {      if (this.labelInfo[band].getDrawDividers()) {        long nextXX=p.getFirstMillisecond();        long mid=(lastXX + nextXX) / 2;        float mid2d=(float)valueToJava2D(mid,dataArea,edge);        g2.setStroke(this.labelInfo[band].getDividerStroke());        g2.setPaint(this.labelInfo[band].getDividerPaint());        g2.draw(new Line2D.Float(mid2d,y,mid2d,y + yDelta));      }    }    lastXX=last;    for (int i=0; i < periods; i++) {      p=p.next();    }    p.peg(this.calendar);  }  double used=0.0;  if (b != null) {    used=b.getHeight();    if (edge == RectangleEdge.BOTTOM) {      used+=this.labelInfo[band].getPadding().calculateBottomOutset(fm.getHeight());    } else     if (edge == RectangleEdge.TOP) {      used+=this.labelInfo[band].getPadding().calculateTopOutset(fm.getHeight());    }  }  state.moveCursor(used,edge);  return state;}  }
class C{  public static <A>FutureWTValue<A> of(final AnyMValue<FutureW<A>> monads){  return new FutureWTValue<>(monads);}  }
class C{  public void removeSelectionListener(SelectionListener l){  model.removeSelectionListener(l);}  }
class C{  static LagrangePolynomial constructInterpolatingPolynomial(DesignGrid G,double delta){  double[] extremaSubset=new double[G.extremaIndices.length - 1];  int n=extremaSubset.length;  double[] x=new double[n];  double[] f=new double[n];  double s=1.0;  for (int i=0; i < n; i++) {    int j=G.extremaIndices[i];    x[i]=G.X[j];    f[i]=G.H[j] - s * delta / G.W[j];    s=-s;  }  return new LagrangePolynomial(x,f);}  }
class C{  public boolean isClosing(){  return closing;}  }
class C{  private void log(String str){  Log.i(this.getClass().getSimpleName(),str);}  }
class C{  public DateTimeFormatterBuilder appendFraction(DateTimeFieldType fieldType,int minDigits,int maxDigits){  if (fieldType == null) {    throw new IllegalArgumentException("Field type must not be null");  }  if (maxDigits < minDigits) {    maxDigits=minDigits;  }  if (minDigits < 0 || maxDigits <= 0) {    throw new IllegalArgumentException();  }  return append0(new Fraction(fieldType,minDigits,maxDigits));}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == AnnotableElement.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == VariableEnvironmentElement.class) {switch (derivedFeatureID) {default :    return -1;}}if (baseClass == NamedElement.class) {switch (derivedFeatureID) {default :  return -1;}}if (baseClass == PropertyNameOwner.class) {switch (derivedFeatureID) {case N4JSPackage.PROPERTY_ASSIGNMENT_ANNOTATION_LIST__DECLARED_NAME:return N4JSPackage.PROPERTY_NAME_OWNER__DECLARED_NAME;default :return -1;}}if (baseClass == TypableElement.class) {switch (derivedFeatureID) {default :return -1;}}if (baseClass == PropertyAssignment.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static JSONArray toJSONArray(XMLTokener x) throws JSONException {  return (JSONArray)parse(x,true,null);}  }
class C{  public void transformRotate(Object nativeTransform,float angle,float x,float y,float z){  ((AffineTransform)nativeTransform).rotate(angle,x,y);  clamp((AffineTransform)nativeTransform);}  }
class C{  public void insert(final AbstractInsnNode insn){  ++size;  if (first == null) {    first=insn;    last=insn;  } else {    first.prev=insn;    insn.next=first;  }  first=insn;  cache=null;  insn.index=0;}  }
class C{  public Vec2 swap(Vec2 vector){  if (vector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Vec2","swap","missingVector"));  }  double tmp=this.x;  this.x=vector.x;  vector.x=tmp;  tmp=this.y;  this.y=vector.y;  vector.y=tmp;  return this;}  }
class C{  public ClockPane(){  setCurrentTime();}  }
class C{  public WicketChangeLocaleCartCommandImpl(final ShoppingCartCommandRegistry registry,final LanguageService languageService){  super(registry,languageService);}  }
class C{  private static Identity parse(final JsonObject json){  final Map<String,String> props=new HashMap<>(json.size());  final JsonObject image=json.getJsonObject("image");  if (image == null) {    props.put(PsGoogle.PICTURE,"#");  } else {    props.put(PsGoogle.PICTURE,image.getString("url","#"));  }  if (json.containsKey(PsGoogle.DISPLAY_NAME) && json.get(PsGoogle.DISPLAY_NAME) != null) {    props.put(PsGoogle.NAME,json.getString(PsGoogle.DISPLAY_NAME));  } else {    props.put(PsGoogle.NAME,"unknown");  }  return new Identity.Simple(String.format("urn:google:%s",json.getString("id")),props);}  }
class C{  private static PDFDecrypter createStandardDecrypter(PDFObject encryptDict,PDFObject documentId,PDFPassword password,Integer keyLength,boolean encryptMetadata,StandardDecrypter.EncryptionAlgorithm encryptionAlgorithm) throws PDFAuthenticationFailureException, IOException, EncryptionUnsupportedByPlatformException, EncryptionUnsupportedByProductException {  if (keyLength == null) {    keyLength=DEFAULT_KEY_LENGTH;  }  final PDFObject rObj=encryptDict.getDictRef("R");  if (rObj == null) {    throw new PDFParseException("No R entry present in Encrypt dictionary");  }  final int revision=rObj.getIntValue();  if (revision < 2 || revision > 4) {    throw new EncryptionUnsupportedByPlatformException("Unsupported Standard security handler revision; R=" + revision);  }  final PDFObject oObj=encryptDict.getDictRef("O");  if (oObj == null) {    throw new PDFParseException("No O entry present in Encrypt dictionary");  }  final byte[] o=oObj.getStream();  if (o.length != 32) {    throw new PDFParseException("Expected owner key O " + "value of 32 bytes; found " + o.length);  }  final PDFObject uObj=encryptDict.getDictRef("U");  if (uObj == null) {    throw new PDFParseException("No U entry present in Encrypt dictionary");  }  final byte[] u=uObj.getStream();  if (u.length != 32) {    throw new PDFParseException("Expected user key U value of 32 bytes; found " + o.length);  }  final PDFObject pObj=encryptDict.getDictRef("P");  if (pObj == null) {    throw new PDFParseException("Required P entry in Encrypt dictionary not found");  }  return new StandardDecrypter(encryptionAlgorithm,documentId,keyLength,revision,o,u,pObj.getIntValue(),encryptMetadata,password);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:28.441 -0500",hash_original_method="B265969ED1D5B160D0AFF42D0A073F4D",hash_generated_method="6947F0FF708D447C444AC79188FF3E12") @Override public void roll(int field,int value){  if (value == 0) {    return;  }  if (field < 0 || field >= ZONE_OFFSET) {    throw new IllegalArgumentException();  }  isCached=false;  complete();  int days, day, mod, maxWeeks, newWeek;  int max=-1;switch (field) {case YEAR:    max=maximums[field];  break;case WEEK_OF_YEAR:days=daysInYear(fields[YEAR]);day=DAY_OF_YEAR;mod=mod7(fields[DAY_OF_WEEK] - fields[day] - (getFirstDayOfWeek() - 1));maxWeeks=(days - 1 + mod) / 7 + 1;newWeek=mod(fields[field] - 1 + value,maxWeeks) + 1;if (newWeek == maxWeeks) {int addDays=(newWeek - fields[field]) * 7;if (fields[day] > addDays && fields[day] + addDays > days) {set(field,1);} else {set(field,newWeek - 1);}} else if (newWeek == 1) {int week=(fields[day] - ((fields[day] - 1) / 7 * 7) - 1 + mod) / 7 + 1;if (week > 1) {set(field,1);} else {set(field,newWeek);}} else {set(field,newWeek);}break;case WEEK_OF_MONTH:days=daysInMonth();day=DATE;mod=mod7(fields[DAY_OF_WEEK] - fields[day] - (getFirstDayOfWeek() - 1));maxWeeks=(days - 1 + mod) / 7 + 1;newWeek=mod(fields[field] - 1 + value,maxWeeks) + 1;if (newWeek == maxWeeks) {if (fields[day] + (newWeek - fields[field]) * 7 > days) {set(day,days);} else {set(field,newWeek);}} else if (newWeek == 1) {int week=(fields[day] - ((fields[day] - 1) / 7 * 7) - 1 + mod) / 7 + 1;if (week > 1) {set(day,1);} else {set(field,newWeek);}} else {set(field,newWeek);}break;case DATE:max=daysInMonth();break;case DAY_OF_YEAR:max=daysInYear(fields[YEAR]);break;case DAY_OF_WEEK:max=maximums[field];lastDateFieldSet=WEEK_OF_MONTH;break;case DAY_OF_WEEK_IN_MONTH:max=(fields[DATE] + ((daysInMonth() - fields[DATE]) / 7 * 7) - 1) / 7 + 1;break;case ERA:case MONTH:case AM_PM:case HOUR:case HOUR_OF_DAY:case MINUTE:case SECOND:case MILLISECOND:set(field,mod(fields[field] + value,maximums[field] + 1));if (field == MONTH && fields[DATE] > daysInMonth()) {set(DATE,daysInMonth());} else if (field == AM_PM) {lastTimeFieldSet=HOUR;}break;}if (max != -1) {set(field,mod(fields[field] - 1 + value,max) + 1);}complete();}  }
class C{  public IntHashMap(){  this(20,0.75f);}  }
class C{  protected String tableTitle(String longestOp){  StringBuilder sb=new StringBuilder();  sb.append(Format.format(OP,longestOp));  sb.append(ROUND);  sb.append(getRunData().getConfig().getColsNamesForValsByRound());  for (int i=0; i < COLS.length; i++) {    sb.append(COLS[i]);  }  return sb.toString();}  }
class C{  public static String dateToShortReadableString(Context context,Date date){  StringBuilder readable=new StringBuilder(32);  Locale locale=Locale.getDefault();  Calendar gmtCal=Calendar.getInstance(TimeZone.getTimeZone("GMT"));  gmtCal.setTime(date);  Calendar localCal=GregorianCalendar.getInstance(TimeZone.getDefault());  localCal.setTimeInMillis(gmtCal.getTimeInMillis());  Calendar now=Calendar.getInstance();  if (localCal.get(Calendar.DAY_OF_YEAR) >= now.get(Calendar.DAY_OF_YEAR) && localCal.get(Calendar.YEAR) == now.get(Calendar.YEAR)) {    readable.append(context.getString(R.string.today));  } else   if (localCal.get(Calendar.DAY_OF_YEAR) == now.get(Calendar.DAY_OF_YEAR) - 1) {    readable.append(context.getString(R.string.yesterday));  } else   if (localCal.get(Calendar.WEEK_OF_MONTH) == now.get(Calendar.WEEK_OF_MONTH) && localCal.get(Calendar.MONTH) == now.get(Calendar.MONTH)) {    readable.append(localCal.getDisplayName(Calendar.DAY_OF_WEEK,Calendar.SHORT,locale));  } else   if (localCal.get(Calendar.YEAR) == now.get(Calendar.YEAR)) {    readable.append(localCal.getDisplayName(Calendar.MONTH,Calendar.SHORT,locale)).append(" ").append(localCal.get(Calendar.DAY_OF_MONTH));  } else {    readable.append(localCal.get(Calendar.MONTH) + 1).append("/").append(localCal.get(Calendar.DAY_OF_MONTH)).append("/").append(localCal.get(Calendar.YEAR));  }  return readable.toString();}  }
class C{  protected void all(){  projectHelp();}  }
class C{  public boolean isArray(){  return false;}  }
class C{  public XY(float[] xypoints){  super(xypoints);  setIsPolygon(false);}  }
class C{  public Enumeration<String> enumerateMeasures(){  Vector<String> result=new Vector<String>();  result.addElement("measureKernelEvaluations");  result.addElement("measureCacheHits");  return result.elements();}  }
class C{  public void testStopSearchIdempotent() throws Exception {  SearchManager searchManager=(SearchManager)mContext.getSystemService(Context.SEARCH_SERVICE);  assertNotNull(searchManager);  searchManager.stopSearch();  searchManager.startSearch(null,false,SEARCHABLE_ACTIVITY,null,false);  searchManager.stopSearch();  searchManager.stopSearch();}  }
class C{  @Override public boolean touchDown(int screenX,int screenY,int pointer,int button){  Vector2 worldClick=viewport.unproject(new Vector2(screenX,screenY));  if (worldClick.dst(position) < baseRadius * radiusMultiplier) {    flicking=true;    flickStart=worldClick;  }  return true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementwrongdocumenterr.class,args);}  }
class C{  public BotInviteBuilder withPermissions(EnumSet<Permissions> permissions){  this.permissions=permissions;  return this;}  }
class C{  @Override public String globalInfo(){  return "Reweights the instances in the data so that each class has the same total " + "weight. The total sum of weights accross all instances will be maintained. Only " + "the weights in the first batch of data received by this filter are changed, so "+ "it can be used with the FilteredClassifier.";}  }
class C{  public Email to(String... to){  if (to == null)   throw new IllegalArgumentException("to == null");  this.toList.addAll(Arrays.asList(to));  return this;}  }
class C{  public Object parse(Reader in,ContainerFactory containerFactory) throws IOException, ParseException {  reset(in);  LinkedList statusStack=new LinkedList();  LinkedList valueStack=new LinkedList();  try {    do {      nextToken();switch (status) {case S_INIT:switch (token.type) {case Yytoken.TYPE_VALUE:          status=S_IN_FINISHED_VALUE;        statusStack.addFirst(new Integer(status));      valueStack.addFirst(token.value);    break;case Yytoken.TYPE_LEFT_BRACE:  status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));valueStack.addFirst(createObjectContainer(containerFactory));break;case Yytoken.TYPE_LEFT_SQUARE:status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));valueStack.addFirst(createArrayContainer(containerFactory));break;default :status=S_IN_ERROR;}break;case S_IN_FINISHED_VALUE:if (token.type == Yytoken.TYPE_EOF) return valueStack.removeFirst(); else throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);case S_IN_OBJECT:switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:if (token.value instanceof String) {String key=(String)token.value;valueStack.addFirst(key);status=S_PASSED_PAIR_KEY;statusStack.addFirst(new Integer(status));} else {status=S_IN_ERROR;}break;case Yytoken.TYPE_RIGHT_BRACE:if (valueStack.size() > 1) {statusStack.removeFirst();valueStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}break;default :status=S_IN_ERROR;break;}break;case S_PASSED_PAIR_KEY:switch (token.type) {case Yytoken.TYPE_COLON:break;case Yytoken.TYPE_VALUE:statusStack.removeFirst();String key=(String)valueStack.removeFirst();Map parent=(Map)valueStack.getFirst();parent.put(key,token.value);status=peekStatus(statusStack);break;case Yytoken.TYPE_LEFT_SQUARE:statusStack.removeFirst();key=(String)valueStack.removeFirst();parent=(Map)valueStack.getFirst();List newArray=createArrayContainer(containerFactory);parent.put(key,newArray);status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));valueStack.addFirst(newArray);break;case Yytoken.TYPE_LEFT_BRACE:statusStack.removeFirst();key=(String)valueStack.removeFirst();parent=(Map)valueStack.getFirst();Map newObject=createObjectContainer(containerFactory);parent.put(key,newObject);status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));valueStack.addFirst(newObject);break;default :status=S_IN_ERROR;}break;case S_IN_ARRAY:switch (token.type) {case Yytoken.TYPE_COMMA:break;case Yytoken.TYPE_VALUE:List val=(List)valueStack.getFirst();val.add(token.value);break;case Yytoken.TYPE_RIGHT_SQUARE:if (valueStack.size() > 1) {statusStack.removeFirst();valueStack.removeFirst();status=peekStatus(statusStack);} else {status=S_IN_FINISHED_VALUE;}break;case Yytoken.TYPE_LEFT_BRACE:val=(List)valueStack.getFirst();Map newObject=createObjectContainer(containerFactory);val.add(newObject);status=S_IN_OBJECT;statusStack.addFirst(new Integer(status));valueStack.addFirst(newObject);break;case Yytoken.TYPE_LEFT_SQUARE:val=(List)valueStack.getFirst();List newArray=createArrayContainer(containerFactory);val.add(newArray);status=S_IN_ARRAY;statusStack.addFirst(new Integer(status));valueStack.addFirst(newArray);break;default :status=S_IN_ERROR;}break;case S_IN_ERROR:throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}if (status == S_IN_ERROR) {throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}} while (token.type != Yytoken.TYPE_EOF);} catch (IOException ie) {throw ie;}throw new ParseException(getPosition(),ParseException.ERROR_UNEXPECTED_TOKEN,token);}  }
class C{  public Node removeMin(){  Node z=min;  if (z != null) {    int numKids=z.degree;    Node x=z.child;    Node tempRight;    while (numKids > 0) {      tempRight=x.right;      x.left.right=x.right;      x.right.left=x.left;      x.left=min;      x.right=min.right;      min.right=x;      x.right.left=x;      x.parent=null;      x=tempRight;      numKids--;    }    z.left.right=z.right;    z.right.left=z.left;    if (z == z.right) {      min=null;    } else {      min=z.right;      consolidate();    }    size--;  }  return z;}  }
class C{  private static <T>void batchGroupBy(T[] array,int start,int end,MultimapPutProcedure<?,T> castProcedure){  for (int i=start; i < end; i++) {    castProcedure.value(array[i]);  }}  }
class C{  public static void FindMatchingBrace(Vector inputVec,IntPair curLoc,String errorMsg) throws ParseAlgorithmException {  curLoc.two++;  while (curLoc.one < inputVec.size()) {    String curLine=(String)inputVec.elementAt(curLoc.one);    while (curLoc.two < curLine.length()) {      curLoc.two=NextBraceQuoteOrCommentCol(curLine,curLoc.two);      if (curLoc.two < curLine.length()) {        char c=curLine.charAt(curLoc.two);        if (c == '}') {          curLoc.two++;          return;        } else         if (c == '{') {          FindMatchingBrace(inputVec,curLoc,errorMsg);          curLine=(String)inputVec.elementAt(curLoc.one);        } else         if ((c == '(') && (curLoc.two + 1 < curLine.length()) && (curLine.charAt(curLoc.two + 1) == '*')) {          ParseAlgorithm.gotoEndOfComment(inputVec,curLoc);          curLine=(String)inputVec.elementAt(curLoc.one);        } else         if ((c == '\\') && (curLoc.two + 1 < curLine.length()) && (curLine.charAt(curLoc.two + 1) == '*')) {          curLoc.two=curLine.length();        } else         if (c == '"') {          curLoc.two=ParseAlgorithm.findEndOfString(curLine,curLoc.two,curLoc.one);        }      }    }    curLoc.one++;    curLoc.two=0;  }  throw new ParseAlgorithmException(errorMsg);}  }
class C{  public static Timeline createParallel(){  Timeline tl=pool.get();  tl.setup(Modes.PARALLEL);  return tl;}  }
class C{  @NotNull public QueryBuilder append(@NotNull String sql,@NotNull Collection<?> args){  query.append(requireNonNull(sql));  addArguments(args);  return this;}  }
class C{  public LogRecord write() throws ReplicatorException {  LogRecord logRecord=new LogRecord(file,-1,checkCRC);  try {    DataOutputStream dos=new DataOutputStream(logRecord.write());    dos.writeByte(LogRecord.EVENT_REPL);    dos.writeLong(event.getSeqno());    dos.writeShort(event.getFragno());    dos.writeByte((event.getLastFrag() ? 1 : 0));    dos.writeLong(event.getEpochNumber());    dos.writeUTF(event.getSourceId());    dos.writeUTF(event.getEventId());    dos.writeUTF(event.getShardId());    dos.writeLong(event.getSourceTstamp().getTime());    serializer.serializeEvent(event,dos);    dos.flush();    logRecord.done();    if (checkCRC)     logRecord.storeCrc(LogRecord.CRC_TYPE_32);  } catch (  IOException e) {    throw new THLException("Error writing log record data: " + e.getMessage(),e);  } finally {    logRecord.done();  }  return logRecord;}  }
class C{  public LogicalAndExpression createLogicalAndExpression(){  LogicalAndExpressionImpl logicalAndExpression=new LogicalAndExpressionImpl();  return logicalAndExpression;}  }
class C{  public Currency(final String id){  super(id);}  }
class C{  public boolean stopEditing(JTree a){  boolean returnValue=((TreeUI)(uis.elementAt(0))).stopEditing(a);  for (int i=1; i < uis.size(); i++) {    ((TreeUI)(uis.elementAt(i))).stopEditing(a);  }  return returnValue;}  }
class C{  private void initMetrics(){  if (g2D == null)   g2D=(Graphics2D)new BufferedImage(10,10,BufferedImage.TYPE_INT_RGB).getGraphics();  if (font == null)   font=g2D.getFont();  metrics=g2D.getFontMetrics(font);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  static public boolean isReadWriteTx(final long timestamp){  return timestamp < ITx.READ_COMMITTED;}  }
class C{  public synchronized void deactivate(int actionToDoWithOMGraphic){  if (DEBUG) {    Debug.output("OMDrawingTool: deactivate(" + (activated ? "while active" : "while inactive") + ")");  }  if (!activated) {    return;  }  if (!isMask(PASSIVE_MOUSE_EVENT_BEHAVIOR_MASK)) {    if (mouseDelegator != null) {      mouseDelegator.setActiveMouseMode(formerMouseMode);      mouseDelegator.removeMouseMode(dtmm);    } else     if (canvas != null) {      canvas.removeMouseListener(dtmm);      canvas.removeMouseMotionListener(dtmm);    }  }  if (canvas != null) {    if (canvas instanceof MapBean) {      ((MapBean)canvas).removeProjectionListener(this);      ((MapBean)canvas).removePaintListener(this);    }  }  OMGraphic g=null;  if (currentEditable != null) {    if (!(currentEditable.getStateMachine().getState() instanceof com.bbn.openmap.omGraphics.editable.GraphicUndefinedState)) {      g=currentEditable.getGraphic();    }    currentEditable.removeEOMGListener(this);  }  setCurrentEditable(null);  hidePalette();  unsetMask(DEACTIVATE_ASAP_BEHAVIOR_MASK);  popup=null;  activated=false;  undoStack.clearStacks(true,true);  if (g == null && (actionToDoWithOMGraphic & OMAction.DELETE_GRAPHIC_MASK) > 0) {    g=SinkGraphic.getSharedInstance();  }  if (g != null && requestor != null) {    g.setVisible(true);    OMAction action=new OMAction();    action.setMask(actionToDoWithOMGraphic);    generateOMGraphic(g);    notifyListener(g,action);  }  getGUI();}  }
class C{  @Override public void encode() throws Exception {  super.encode();  bodyLength=message.getEndOfBodyPosition();}  }
class C{  public ListIterator<AbstractInsnNode> iterator(){  return iterator(0);}  }
class C{  public static BufferedImage convertToBufferedImage(Image img){  BufferedImage buff=createCompatibleTranslucentImage(img.getWidth(null),img.getHeight(null));  Graphics2D g2=buff.createGraphics();  try {    g2.drawImage(img,0,0,null);  }  finally {    g2.dispose();  }  return buff;}  }
class C{  public static byte[] decodeChecked(String input) throws ParseException {  byte[] decoded=decode(input);  if (decoded.length < 4) {    throw new ParseException("Input too short",0);  }  byte[] data=Arrays.copyOfRange(decoded,0,decoded.length - 4);  byte[] checksum=Arrays.copyOfRange(decoded,decoded.length - 4,decoded.length);  byte[] actualChecksum=Arrays.copyOfRange(hashTwice(data),0,4);  if (!Arrays.equals(checksum,actualChecksum)) {    throw new ParseException("Checksum does not validate",0);  }  return data;}  }
class C{  private Node min(Node x){  if (x.left == null)   return x;  return min(x.left);}  }
class C{  @Override public void addDeviceKey(KeyPair deviceKey,String deviceName,char[] password){  try {    X509Certificate certChain=CryptCore.createSelfSignedX509Certificate(deviceKey.getPrivate(),deviceKey.getPublic(),this);    this.keyStore.setKeyEntry(deviceName,deviceKey.getPrivate(),password,new java.security.cert.Certificate[]{certChain});  } catch (  KeyStoreException e) {    logger.error("Could not add device key for device " + deviceName + " to identity's keystore",e);  }}  }
class C{  public Matrix4x3d translationRotate(double tx,double ty,double tz,Quaterniond quat){  double dqx=quat.x + quat.x, dqy=quat.y + quat.y, dqz=quat.z + quat.z;  double q00=dqx * quat.x;  double q11=dqy * quat.y;  double q22=dqz * quat.z;  double q01=dqx * quat.y;  double q02=dqx * quat.z;  double q03=dqx * quat.w;  double q12=dqy * quat.z;  double q13=dqy * quat.w;  double q23=dqz * quat.w;  m00=1.0 - (q11 + q22);  m01=q01 + q23;  m02=q02 - q13;  m10=q01 - q23;  m11=1.0 - (q22 + q00);  m12=q12 + q03;  m20=q02 + q13;  m21=q12 - q03;  m22=1.0 - (q11 + q00);  m30=tx;  m31=ty;  m32=tz;  properties=0;  return this;}  }
class C{  private boolean isAirPlaneMode(){  if (!Settings.System.getString(context.getContentResolver(),Settings.System.AIRPLANE_MODE_RADIOS).contains(RADIO_ANT)) {    return false;  }  if (Settings.System.getInt(context.getContentResolver(),Settings.System.AIRPLANE_MODE_ON,0) == 0) {    return false;  }  try {    Field field=Settings.System.class.getField("AIRPLANE_MODE_TOGGLEABLE_RADIOS");    return !Settings.System.getString(context.getContentResolver(),(String)field.get(null)).contains(RADIO_ANT);  } catch (  Exception e) {    return true;  }}  }
class C{  public SortableAndSearchableWrapperTableModel(){  this(null);}  }
class C{  public GraphDocument(GraphModel graph,SourcePlugin defaultAnalyzer){  this.graphAnalyzers=Lists.newArrayList(defaultAnalyzer);  this.graph=graph;}  }
class C{  private static JsonNode mergeResponse(List<Supplier<Pair<Integer,JsonNode>>> results){  ArrayNode list=JsonNodeFactory.instance.arrayNode();  for (  Supplier<Pair<Integer,JsonNode>> result : results) {    JsonNode node=result.get().getRight();    if (node == null || node instanceof NullNode) {      node=JsonNodeFactory.instance.objectNode().set("data",null);    }    list.add(node);  }  return list;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.msg.SystemMessage sm=getSysMsg(stack);  if (sm != null) {    String rv=sage.msg.SystemMessage.getNameForMsgType(sm.getType());    if (rv != null && rv.length() > 0)     return rv;    rv=sm.getMessageVarValue("typename");    if (rv != null)     return rv; else     return "";  } else   return null;}  }
class C{  public Swap(double probability){  super();  this.probability=probability;}  }
class C{  private void displayValue(long bytes,int exp){  int unit=1024;  double value=bytes / Math.pow(unit,exp);  modifyMarker=true;  valueText.setText(String.format(Locale.ENGLISH,"%.2f",value));}  }
class C{  public static IntRange fixed(int num){  return new IntRange(num,num);}  }
class C{  private static boolean dontUseMe_isInNonEmptyRange_(int min,int max,int a){  if (ASSERTIONS)   assert (min <= max);  return (Integer.MIN_VALUE + (a - min) <= Integer.MIN_VALUE + (max - min));}  }
class C{  protected void sendEvent(final ConnectionEvent event){  if (ActiveMQRAManagedConnection.trace) {    ActiveMQRALogger.LOGGER.trace("sendEvent(" + event + ")");  }  int type=event.getId();  ConnectionEventListener[] list=eventListeners.toArray(new ConnectionEventListener[eventListeners.size()]);  for (  ConnectionEventListener l : list) {switch (type) {case ConnectionEvent.CONNECTION_CLOSED:      l.connectionClosed(event);    break;case ConnectionEvent.LOCAL_TRANSACTION_STARTED:  l.localTransactionStarted(event);break;case ConnectionEvent.LOCAL_TRANSACTION_COMMITTED:l.localTransactionCommitted(event);break;case ConnectionEvent.LOCAL_TRANSACTION_ROLLEDBACK:l.localTransactionRolledback(event);break;case ConnectionEvent.CONNECTION_ERROR_OCCURRED:l.connectionErrorOccurred(event);break;default :throw new IllegalArgumentException("Illegal eventType: " + type);}}}  }
class C{  public V putIfAbsent(final K k,final V v){  final WeakReference<V> ref=newWeakRef(k,v,referenceQueue);  final WeakReference<V> oldRef=map.putIfAbsent(k,ref);  final V oldVal=oldRef == null ? null : oldRef.get();  if (oldRef != null && oldVal == null) {    if (map.replace(k,oldRef,ref)) {      if (queue.add(v) && DEBUG) {        log.debug("put: key=" + k + ", val="+ v);      }      didUpdate(k,ref,oldRef);      return null;    }  }  if (oldVal == null) {    if (queue.add(v) && DEBUG) {      log.debug("put: key=" + k + ", val="+ v);    }    didUpdate(k,ref,null);    return null;  }  return oldVal;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:38.088 -0400",hash_original_method="6DB44DC05092472C2E9CFC4E7733DDB9",hash_generated_method="6DB44DC05092472C2E9CFC4E7733DDB9") char[] DigestCalcHA1(String algorithm,String userName,String realm,String password,String nonce,String clientNonce) throws SaslException {  byte[] hash;  try {    MessageDigest md=MessageDigest.getInstance("MD5");    md.update(userName.getBytes("UTF-8"));    md.update(":".getBytes("UTF-8"));    md.update(realm.getBytes("UTF-8"));    md.update(":".getBytes("UTF-8"));    md.update(password.getBytes("UTF-8"));    hash=md.digest();    if ("md5-sess".equals(algorithm)) {      md.update(hash);      md.update(":".getBytes("UTF-8"));      md.update(nonce.getBytes("UTF-8"));      md.update(":".getBytes("UTF-8"));      md.update(clientNonce.getBytes("UTF-8"));      hash=md.digest();    }  } catch (  NoSuchAlgorithmException e) {    throw new SaslException("No provider found for MD5 hash",e);  }catch (  UnsupportedEncodingException e) {    throw new SaslException("UTF-8 encoding not supported by platform.",e);  }  return convertToHex(hash);}  }
class C{  public static Property walk(EsperEPL2GrammarParser.StartEventPropertyRuleContext tree,boolean isRootedDynamic){  if (tree.eventProperty().eventPropertyAtomic().size() == 1) {    return makeProperty(tree.eventProperty().eventPropertyAtomic(0),isRootedDynamic);  }  EsperEPL2GrammarParser.EventPropertyContext propertyRoot=tree.eventProperty();  List<Property> properties=new LinkedList<Property>();  boolean isRootedInDynamic=isRootedDynamic;  for (  EsperEPL2GrammarParser.EventPropertyAtomicContext atomic : propertyRoot.eventPropertyAtomic()) {    Property property=makeProperty(atomic,isRootedInDynamic);    if (property instanceof DynamicSimpleProperty) {      isRootedInDynamic=true;    }    properties.add(property);  }  return new NestedProperty(properties);}  }
class C{  public void testIdIsNullWhenPropertyStringIsBlank(){  String propertyString="";  DataSource ds=dataSourceConverter.fromPropertyString(propertyString);  assertEquals(null,ds.getId());}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  JokeCacheDao.createTable(db,ifNotExists);  FreshNewsCacheDao.createTable(db,ifNotExists);  PictureCacheDao.createTable(db,ifNotExists);  SisterCacheDao.createTable(db,ifNotExists);  VideoCacheDao.createTable(db,ifNotExists);}  }
class C{  public boolean updateConsistencyGroupPolicyStep(ProtectionSystem protectionSystem,URI cgUri,String copyMode,String stepId){  try {    _log.info(String.format("Updating consistency group policy for CG %s.",cgUri));    WorkflowStepCompleter.stepExecuting(stepId);    RecoverPointClient rp=RPHelper.getRecoverPointClient(protectionSystem);    BlockConsistencyGroup cg=_dbClient.queryObject(BlockConsistencyGroup.class,cgUri);    List<String> lockKeys=new ArrayList<String>();    lockKeys.add(ControllerLockingUtil.getConsistencyGroupStorageKey(_dbClient,cgUri,protectionSystem.getId()));    boolean lockAcquired=_workflowService.acquireWorkflowStepLocks(stepId,lockKeys,LockTimeoutValue.get(LockType.RP_CG));    if (!lockAcquired) {      throw DeviceControllerException.exceptions.failedToAcquireLock(lockKeys.toString(),String.format("Upgrade policy for RP consistency group %s; id: %s",cg.getLabel(),cgUri.toString()));    }    CGPolicyParams policyParams=new CGPolicyParams(copyMode);    UpdateCGPolicyParams updateParams=new UpdateCGPolicyParams(cg.getCgNameOnStorageSystem(protectionSystem.getId()),policyParams);    rp.updateConsistencyGroupPolicy(updateParams);    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  InternalException e) {    _log.error("Operation failed with Exception: ",e);    return stepFailed(stepId,(ServiceCoded)e,"updateConsistencyGroupPolicyStep");  }catch (  Exception e) {    _log.error("Operation failed with Exception: ",e);    return stepFailed(stepId,e,"updateConsistencyGroupPolicyStep");  }  return true;}  }
class C{  private void generateZeroStatisticsRecord(DbClient dbClient,Volume volume){  try {    Stat zeroStatRecord=new Stat();    zeroStatRecord.setTimeInMillis(System.currentTimeMillis());    zeroStatRecord.setTimeCollected(System.currentTimeMillis());    zeroStatRecord.setServiceType(Constants._Block);    zeroStatRecord.setAllocatedCapacity(0);    zeroStatRecord.setProvisionedCapacity(0);    zeroStatRecord.setBandwidthIn(0);    zeroStatRecord.setBandwidthOut(0);    zeroStatRecord.setTotalIOs(0);    zeroStatRecord.setIdleTimeCounter(0);    zeroStatRecord.setQueueLength(0);    zeroStatRecord.setWriteIOs(0);    zeroStatRecord.setReadIOs(0);    zeroStatRecord.setKbytesTransferred(0);    zeroStatRecord.setIoTimeCounter(0);    zeroStatRecord.setNativeGuid(volume.getNativeGuid());    zeroStatRecord.setSnapshotCapacity(0);    zeroStatRecord.setSnapshotCount(0);    zeroStatRecord.setResourceId(volume.getId());    zeroStatRecord.setVirtualPool(volume.getVirtualPool());    zeroStatRecord.setProject(volume.getProject().getURI());    zeroStatRecord.setTenant(volume.getTenant().getURI());    dbClient.insertTimeSeries(StatTimeSeries.class,zeroStatRecord);  } catch (  Exception e) {    _log.error("Zero Stat Record Creation failed for Volume : {}",volume.getId());  }}  }
class C{  public Define(String functionName,Class<?> returnType,String[] variableNames,Class<?>[] variableTypes){  super(Void.class,returnType);  this.functionName=functionName;  this.variableNames=variableNames;  this.variableTypes=variableTypes;}  }
class C{  public boolean write(IOFSwitch sw,OFMessage msg,FloodlightContext cntx,boolean flush) throws IOException {  if (!msgTypesToCache.contains(msg.getType())) {    sw.writeThrottled(msg,cntx);    if (flush) {      sw.flush();    }    return true;  }  DamperEntry entry=new DamperEntry(msg,sw);  if (cache.update(entry)) {    return false;  } else {    sw.writeThrottled(msg,cntx);    if (flush) {      sw.flush();    }    return true;  }}  }
class C{  public final boolean canGetInt(String field){  return m_table.canGetInt(field);}  }
class C{  protected void checkSensor(int newState,int oldState,Sensor sensor){  if (isVetoed()) {    return;  }  String name=sensor.getSystemName();  log.debug("check Sensor {} for {}",name,getSystemName());  boolean fire=false;  for (int i=0; i < _controlSensorList.size(); i++) {    if (getRouteSensor(i).equals(sensor)) {      int mode=getRouteSensorMode(i);      log.debug("match mode: {} new state: {} old state: {}",mode,newState,oldState);      if (((mode == ONACTIVE) && (newState == Sensor.ACTIVE)) || ((mode == ONINACTIVE) && (newState == Sensor.INACTIVE)) || ((mode == ONCHANGE) && (newState != oldState))) {        fire=true;      }    }  }  log.debug("check activated");  if (!fire) {    return;  }  log.debug("call setRoute for {}",getSystemName());  setRoute();}  }
class C{  protected static Placemark createAirportPlacemark(Position position,String airportName){  Placemark placemark=Placemark.createWithImage(position,ImageSource.fromResource(R.drawable.airport_terminal));  placemark.getAttributes().setImageOffset(Offset.bottomCenter()).setImageScale(NORMAL_IMAGE_SCALE);  placemark.setDisplayName(airportName);  return placemark;}  }
class C{  public PISAAlgorithms(){  super();}  }
class C{  @Override public void actionPerformed(ActionEvent event){  String command=event.getActionCommand();  if (command.equals("SelectLabelFont")) {    attemptLabelFontSelection();  } else   if (command.equals("SelectLabelPaint")) {    attemptModifyLabelPaint();  } else   if (command.equals("SelectTickLabelFont")) {    attemptTickLabelFontSelection();  }}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public static final void sendToAllAround(IMessage message,EntityPlayer player,double range){  PacketDispatcher.sendToAllAround(message,player.worldObj.provider.getDimension(),player.posX,player.posY,player.posZ,range);}  }
class C{  private void resizeFramebufferTexture(){  glDeleteTextures(raytraceTexture);  glDeleteTextures(positionTexture);  glDeleteTextures(normalTexture);  glDeleteRenderbuffers(depthBuffer);  glDeleteFramebuffers(fbo);  createRaytracingTexture();  createRasterizerTextures();  createRasterFrameBufferObject();}  }
class C{  public boolean fwIfCurrent(char c){  if (isCurrent(c)) {    pos++;    return true;  }  return false;}  }
class C{  public ParsedURL(ParsedURL baseURL,String urlStr){  if (baseURL != null) {    userAgent=baseURL.getUserAgent();    data=parseURL(baseURL,urlStr);  } else {    data=parseURL(urlStr);  }}  }
class C{  public Boolean isWhiteLabelWallet(){  return whiteLabelWallet;}  }
class C{  void localIsUnknown(Local l){  PurityNode node=PurityGlobalNode.node;  localsRemove(l);  localsPut(l,node);  nodes.add(node);  if (doCheck)   sanityCheck();}  }
class C{  public void addAlias(String field,float tiebreaker,Map<String,Float> fieldBoosts){  Alias a=new Alias();  a.tie=tiebreaker;  a.fields=fieldBoosts;  aliases.put(field,a);}  }
class C{  boolean hasFired(){  int status=getSequenceStatus();  return (status == SEQUENCE_FINISHED);}  }
class C{  public static PasswordValidator buildContentValidator(Map<String,String> properties){  List<Rule> ruleList=buildBaseRuleList(properties);  PasswordValidator validator=new PasswordValidator(ruleList);  return validator;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private static String toString(String attName,int num){  if (okToDisplayPropertyValue(attName)) {    return String.valueOf(num);  } else {    return OBFUSCATED_STRING;  }}  }
class C{  public Extension(Extension ext){  this.extensionId=ext.extensionId;  this.critical=ext.critical;  this.extensionValue=ext.extensionValue;}  }
class C{  public boolean attemptStop(){  if (mediaPlayer.getState() != MediaPlaybackState.Stopped) {    mediaPlayer.stop();    return true;  }  return false;}  }
class C{  public void checkStateErrors(MediaPlayerStateErrors stateErrors){  assertTrue(!stateErrors.errorInStartedState);  assertTrue(!stateErrors.errorInStartedStateAfterPause);  assertTrue(!stateErrors.errorInPausedState);  assertTrue(!stateErrors.errorInPreparedState);  assertTrue(!stateErrors.errorInPreparedStateAfterStop);  assertTrue(!stateErrors.errorInPlaybackCompletedState);  assertTrue(!stateErrors.errorInIdleStateAfterReset);  assertTrue(!stateErrors.errorInInitializedState);  assertTrue(!stateErrors.errorInStoppedState);  assertTrue(!stateErrors.errorInIdleState);  assertTrue(stateErrors.errorInErrorState);}  }
class C{  @Override public boolean add(E element){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public void mousePressed(final MouseEvent mouseEvent){  selectedEntity=null;  selectedPoint=mouseEvent.getPoint();  for (  OdorWorldEntity sprite : world.getObjectList()) {    if (sprite.getBounds().contains(selectedPoint)) {      selectedEntity=sprite;    }  }  if (selectedEntity != null) {    distanceX=(int)selectedEntity.getX() - mouseEvent.getPoint().x;    distanceY=(int)selectedEntity.getY() - mouseEvent.getPoint().y;  }  if (drawingWalls) {    mouseEvent.getPoint();    setWallPoint1(selectedPoint);  }  if (mouseEvent.isControlDown() || (mouseEvent.getButton() == MouseEvent.BUTTON3)) {    final JPopupMenu menu=buildPopupMenu(selectedEntity);    if (menu != null) {      menu.show(OdorWorldPanel.this,(int)selectedPoint.getX(),(int)selectedPoint.getY());    }  } else   if (mouseEvent.getClickCount() == 2) {    if (selectedEntity != null) {      ShowEntityDialogAction action=new ShowEntityDialogAction(selectedEntity);      action.actionPerformed(null);    }  }}  }
class C{  static <T0,T1,T2,T3,T4,T5>Tuple6OfNullables<T0,T1,T2,T3,T4,T5> ofNullables(T0 e0,T1 e1,T2 e2,T3 e3,T4 e4,T5 e5){  return new Tuple6OfNullablesImpl<>(e0,e1,e2,e3,e4,e5);}  }
class C{  public EObject basicGetAstElement(){  return astElement;}  }
class C{  public byte readByte(){  return readByteArray()[0];}  }
class C{  protected MariaDbClientPreparedStatement clientPrepareStatement(final String sql) throws SQLException {  return new MariaDbClientPreparedStatement(this,sql,ResultSet.TYPE_FORWARD_ONLY);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Integer(stack.getUIMgrSafe().getVideoFrame().getDVDAngle());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void execute(StepInstance stepInstance,String temporaryFileDirectory){  uniparcLoader.loadNewSequences();}  }
class C{  @Override public AgentAppController createController(){  return new RouteFindingAgentController();}  }
class C{  public SVGPath smoothCubicTo(double[] c2xy,double[] xy){  append(PATH_SMOOTH_CUBIC_TO,c2xy[0],c2xy[1],xy[0],xy[1]);  return this;}  }
class C{  public static BezierPath fitBezierPath(java.util.List<Point2D.Double> digitizedPoints,double error){  ArrayList<ArrayList<Point2D.Double>> segments;  segments=splitAtCorners(digitizedPoints,77 / 180d * Math.PI,error * error);  for (int i=0, n=segments.size(); i < n; i++) {    ArrayList<Point2D.Double> seg=segments.get(i);    seg=removeClosePoints(seg,error * 2);    seg=reduceNoise(seg,0.8);    segments.set(i,seg);  }  BezierPath fittedPath=new BezierPath();  boolean isEmpty=false;  for (  ArrayList<Point2D.Double> seg : segments) {    if (seg.isEmpty()) {      isEmpty=false;      break;    }  }  if (!isEmpty) {    double errorSquared=error * error;    for (    ArrayList<Point2D.Double> seg : segments) {switch (seg.size()) {case 0:        break;case 1:      fittedPath.add(new BezierPath.Node(seg.get(0)));    break;case 2:  if (fittedPath.isEmpty()) {    fittedPath.add(new BezierPath.Node(seg.get(0)));  }fittedPath.lineTo(seg.get(1).x,seg.get(1).y);break;default :if (fittedPath.isEmpty()) {fittedPath.add(new BezierPath.Node(seg.get(0)));}Point2D.Double tHat1;Point2D.Double tHat2;tHat1=computeLeftTangent(seg,0);tHat2=computeRightTangent(seg,seg.size() - 1);fitCubic(seg,0,seg.size() - 1,tHat1,tHat2,errorSquared,fittedPath);break;}}}return fittedPath;}  }
class C{  public synchronized void add(String category,double minValue,double maxValue){  super.add(category,minValue);  mMaxValues.add(maxValue);}  }
class C{  public static int rgbFromCmyk(float[] cmyk){  float cyan=cmyk[0];  float magenta=cmyk[1];  float yellow=cmyk[2];  float black=cmyk[3];  int red=(int)((1.0f - Math.min(1.0f,cyan * (1.0f - black) + black)) * 255);  int green=(int)((1.0f - Math.min(1.0f,magenta * (1.0f - black) + black)) * 255);  int blue=(int)((1.0f - Math.min(1.0f,yellow * (1.0f - black) + black)) * 255);  return ((0xff & red) << 16) + ((0xff & green) << 8) + (0xff & blue);}  }
class C{  public void write(int c) throws IOException {  checkWrite();  super.write(c);}  }
class C{  public void shutdown(){  amazonSqsToBeExtended.shutdown();}  }
class C{  public static boolean canPasteStringFromClipboard(){  return ClipboardHelper.canPasteStringFromClipboard();}  }
class C{  public WriteException(Collection<WriteRequest> requests){  super();  this.requests=asRequestList(requests);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:14:26.068 -0400",hash_original_method="F753AB60830D7C8A33F2091CC5455863",hash_generated_method="DC7059DF149C1A37B4C6A755465DCF7B") public boolean startTone(int toneType,int durationMs){  double taintDouble=0;  taintDouble+=toneType;  taintDouble+=durationMs;  addTaint(taintDouble);  return ((taintDouble) == 1);}  }
class C{  private Row createField(ResultSet rs,Rows rows,Row rw){  GridFieldVO voF=GridFieldVO.createParameter(Env.getCtx(),m_WindowNo,rs);  GridField mField=new GridField(voF);  m_mFields.add(mField);  Row row;  if (rw == null)   row=new Row(); else   row=rw;  WEditor editor=WebEditorFactory.getEditor(mField,false);  editor.addValueChangeListener(this);  editor.dynamicDisplay();  mField.addPropertyChangeListener(editor);  Object defaultObject=mField.getDefault();  mField.setValue(defaultObject,true);  if (mode == DEFAULT_MODE)   editor.fillHorizontal();  WEditorPopupMenu popupMenu=editor.getPopupMenu();  if (popupMenu != null) {    popupMenu.addMenuListener((ContextMenuListener)editor);    this.appendChild(popupMenu);  }  m_wEditors.add(editor);  Div div=new Div();  div.setAlign("right");  org.adempiere.webui.component.Label label=editor.getLabel();  div.appendChild(label);  if (label.getDecorator() != null)   div.appendChild(label.getDecorator());  row.appendChild(div);  if (voF.isRange) {    Hbox box=new Hbox();    box.appendChild(editor.getComponent());    GridFieldVO voF2=GridFieldVO.createParameter(voF);    GridField mField2=new GridField(voF2);    m_mFields2.add(mField2);    WEditor editor2=WebEditorFactory.getEditor(mField2,false);    mField2.addPropertyChangeListener(editor2);    editor2.dynamicDisplay();    editor2.fillHorizontal();    popupMenu=editor2.getPopupMenu();    if (popupMenu != null) {      popupMenu.addMenuListener((ContextMenuListener)editor2);      this.appendChild(popupMenu);    }    Object defaultObject2=mField2.getDefault();    mField2.setValue(defaultObject2,true);    m_wEditors2.add(editor2);    Label separator=new Label(" - ");    m_separators.add(separator);    box.appendChild(separator);    box.appendChild(editor2.getComponent());    row.appendChild(box);  } else {    row.appendChild(editor.getComponent());    m_mFields2.add(null);    m_wEditors2.add(null);    m_separators.add(null);  }  if (rw == null)   rows.appendChild(row);  return row;}  }
class C{  private void updateSegment(BratAnnotatorModel aBratAnnotatorModel,Map<Integer,Integer> segmentBeginEnd,Map<Integer,Integer> segmentNumber,Map<String,Map<Integer,Integer>> segmentAdress,JCas jCas,String username,int aWinSize) throws UIMAException, ClassNotFoundException, IOException {  Sentence firstSentence=selectSentenceAt(jCas,aBratAnnotatorModel.getSentenceBeginOffset(),aBratAnnotatorModel.getSentenceEndOffset());  Sentence lastSentence=selectByAddr(jCas,Sentence.class,getLastSentenceAddressInDisplayWindow(jCas,getAddr(firstSentence),aWinSize));  begin=firstSentence.getBegin();  end=lastSentence.getEnd();  sentenceNumber=getFirstSentenceNumber(jCas,getAddr(firstSentence));  segmentAdress.put(username,new HashMap<Integer,Integer>());  for (  Sentence sentence : selectCovered(jCas,Sentence.class,begin,end)) {    sentenceNumber+=1;    segmentBeginEnd.put(sentence.getBegin(),sentence.getEnd());    segmentNumber.put(sentence.getBegin(),sentenceNumber);    segmentAdress.get(username).put(sentence.getBegin(),getAddr(sentence));  }}  }
class C{  public static boolean isMainFrameProcessLocation(RepositoryLocation location){  if (getMainFrame() != null && getMainFrame().getProcess() != null) {    RepositoryLocation currentProcessLocation=getMainFrame().getProcess().getRepositoryLocation();    if (location.equals(currentProcessLocation)) {      return true;    }  }  return false;}  }
class C{  public int hashCode(){  int rest=((copies + fromPage + maxPage+ minPage+ prFirst+ prLast+ toPage) * 31) << 21;  if (pageRanges != null) {    int sum=0;    for (int i=0; i < pageRanges.length; i++) {      sum+=pageRanges[i][0] + pageRanges[i][1];    }    rest^=(sum * 31) << 11;  }  if (fileName != null) {    rest^=fileName.hashCode();  }  if (printer != null) {    rest^=printer.hashCode();  }  return (defaultSelection.hashCode() << 6 ^ destination.hashCode() << 5 ^ dialog.hashCode() << 3 ^ multipleDocumentHandling.hashCode() << 2 ^ sides.hashCode() ^ rest);}  }
class C{  @Deprecated public void listNoteVersions(String noteGuid,OnClientCallback<List<NoteVersionId>> callback){  AsyncReflector.execute(mClient,callback,"listNoteVersions",mAuthenticationToken,noteGuid);}  }
class C{  public void appendNodes(NodeVector nodes){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  super.appendNodes(nodes);}  }
class C{  public final void yybegin(final int newState){  zzLexicalState=newState;}  }
class C{  public static String padLeft(String s,int len,char pad_ch){  if (s.length() >= len) {    return s;  } else {    StringBuilder sb=new StringBuilder();    int n=len - s.length();    for (int i=0; i < n; i++) {      sb.append(pad_ch);    }    sb.append(s);    return sb.toString();  }}  }
class C{  public CatalogEntryRemovedException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public TimerTrigger(long period){  this(period,0);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  ZPseudoComp uiComp=getUIComp(stack);  if (uiComp != null) {    return new Float(uiComp.getTrueYf() / uiComp.getReality().getHeight());  }  return null;}  }
class C{  public Preferences systemRoot(){  return WindowsPreferences.systemRoot;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{uuid}/switchover") @CheckPermission(roles={Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN},blockProxies=true) public Response doSwitchover(@PathParam("uuid") String uuid){  log.info("Begin to switchover for standby UUID {}",uuid);  precheckForSwitchoverForActiveSite(uuid);  List<Site> allStandbySites=drUtil.listStandbySites();  for (  Site site : allStandbySites) {    if (!site.getUuid().equals(uuid) && site.getState() == SiteState.STANDBY_PAUSED) {      try (InternalSiteServiceClient client=new InternalSiteServiceClient(site)){        client.setCoordinatorClient(coordinator);        client.setKeyGenerator(apiSignatureGenerator);        client.switchoverPrecheck();      }     }  }  String oldActiveUUID=drUtil.getActiveSite().getUuid();  InterProcessLock lock=drUtil.getDROperationLock();  Site newActiveSite=null;  Site oldActiveSite=null;  try {    newActiveSite=drUtil.getSiteFromLocalVdc(uuid);    oldActiveSite=drUtil.getSiteFromLocalVdc(oldActiveUUID);    if (StringUtils.isEmpty(oldActiveSite.getSiteShortId())) {      oldActiveSite.setSiteShortId(newActiveSite.getVdcShortId());    }    coordinator.startTransaction();    oldActiveSite.setState(SiteState.ACTIVE_SWITCHING_OVER);    coordinator.persistServiceConfiguration(oldActiveSite.toConfiguration());    DistributedBarrier restartBarrier=coordinator.getDistributedBarrier(String.format("%s/%s/%s",ZkPath.SITES,oldActiveSite.getUuid(),Constants.SWITCHOVER_BARRIER_RESTART));    restartBarrier.setBarrier();    drUtil.recordDrOperationStatus(oldActiveSite.getUuid(),InterState.SWITCHINGOVER_ACTIVE);    long vdcConfigVersion=DrUtil.newVdcConfigVersion();    for (    Site eachSite : drUtil.listSites()) {      if (!eachSite.getUuid().equals(uuid) && eachSite.getState() == SiteState.STANDBY_PAUSED) {        try (InternalSiteServiceClient client=new InternalSiteServiceClient(eachSite)){          client.setCoordinatorClient(coordinator);          client.setKeyGenerator(apiSignatureGenerator);          client.switchover(newActiveSite.getUuid(),vdcConfigVersion);        }       } else {        drUtil.updateVdcTargetVersion(eachSite.getUuid(),SiteInfo.DR_OP_SWITCHOVER,vdcConfigVersion,oldActiveSite.getUuid(),newActiveSite.getUuid());      }    }    coordinator.commitTransaction();    auditDisasterRecoveryOps(OperationTypeEnum.SWITCHOVER,AuditLogManager.AUDITLOG_SUCCESS,AuditLogManager.AUDITOP_BEGIN,oldActiveSite.toBriefString(),newActiveSite.toBriefString());    return Response.status(Response.Status.ACCEPTED).build();  } catch (  Exception e) {    log.error(String.format("Error happened when switchover from site %s to site %s",oldActiveUUID,uuid),e);    coordinator.discardTransaction();    auditDisasterRecoveryOps(OperationTypeEnum.SWITCHOVER,AuditLogManager.AUDITLOG_FAILURE,null,newActiveSite.getName(),newActiveSite.getVipEndPoint());    throw APIException.internalServerErrors.switchoverFailed(oldActiveSite.getName(),newActiveSite.getName(),e.getMessage());  } finally {    try {      lock.release();    } catch (    Exception ignore) {      log.error(String.format("Lock release failed when switchover from %s to %s",oldActiveUUID,uuid));    }  }}  }
class C{  public DefaultResponseControlFactory(){}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length == 0)   System.out.println("Please provide file name and regular expression."); else   if (args.length == 1)   System.out.println("Please provide regular expression."); else {    try (Ignite ignite=Ignition.start("examples/config/filesystem/example-igfs.xml")){      System.out.println();      System.out.println(">>> IGFS map reduce example started.");      String fileName=args[0];      File file=new File(fileName);      String regexStr=args[1];      IgniteFileSystem fs=ignite.fileSystem("igfs");      IgfsPath workDir=new IgfsPath("/examples/fs");      IgfsPath fsPath=new IgfsPath(workDir,file.getName());      writeFile(fs,fsPath,file);      Collection<Line> lines=fs.execute(new GrepTask(),IgfsNewLineRecordResolver.NEW_LINE,Collections.singleton(fsPath),regexStr);      if (lines.isEmpty()) {        System.out.println();        System.out.println("No lines were found.");      } else {        System.out.println();        System.out.println("Found lines:");        for (        Line line : lines)         print(line.fileLine());      }    }   }}  }
class C{  public static void assertTextArea(String name,String text){  if (verbose) {    log("assertTextArea(" + name + ", "+ text+ ")");  }  TextArea l=(TextArea)findByName(name);  assertBool(l != null,"Null area " + text);  assertBool(l.getText().equals(text),"assertTextArea: " + l.getText() + " != "+ text);}  }
class C{  public void testSessionLeaderReset() throws Throwable {  callerContext.execute(null);  await();  ServerSessionContext session=state.getStateMachine().executor().context().sessions().getSession(1);  assertNotNull(session);  assertEquals(session.id(),1);  assertEquals(session.getTimestamp(),timestamp);  callerContext.execute(null);  await();  assertEquals(session.getTimestamp(),timestamp + 100);}  }
class C{  public AnnotationVisitor visitParameterAnnotation(int parameter,String desc,boolean visible){  if (mv != null) {    return mv.visitParameterAnnotation(parameter,desc,visible);  }  return null;}  }
class C{  protected void matchReportReference(ASTNode reference,IJavaElement element,IJavaElement localElement,IJavaElement[] otherElements,Binding elementBinding,int accuracy,MatchLocator locator) throws CoreException {  matchReportReference(reference,element,elementBinding,accuracy,locator);}  }
class C{  public ToStringBuilder append(float value){  style.append(buffer,null,value);  return this;}  }
class C{  protected void insertDataSet(String pathDataSet) throws IOException, DatabaseUnitException, SQLException {  Resource dataSetResource=new ClassPathResource(pathDataSet);  FlatXmlDataSetBuilder dsBuilder=new FlatXmlDataSetBuilder();  IDataSet dataSet=dsBuilder.build(dataSetResource.getInputStream());  IDataSet rds=new ReplacementDataSet(dataSet);  ((ReplacementDataSet)rds).addReplacementObject("[NULL]",null);  dataSet=rds;  DataSource dataSource=(DataSource)this.applicationContext.getBean("datasourceDbUnit");  IDatabaseConnection connection=new DatabaseConnection(dataSource.getConnection());  DatabaseOperation.CLEAN_INSERT.execute(connection,dataSet);}  }
class C{  public static ComponentAttribute valueOfAttribute(String name){  ComponentAttribute[] componentAtts=values();  for (int i=0; i < componentAtts.length; i++) {    if (componentAtts[i].getAttributeName().equals(name)) {      return componentAtts[i];    }  }  return null;}  }
class C{  private void configureResponseFromAxisFault(HttpServletResponse response,AxisFault fault){  int status=getHttpServletResponseStatus(fault);  if (status == HttpServletResponse.SC_UNAUTHORIZED) {    response.setHeader("WWW-Authenticate","Basic realm=\"AXIS\"");  }  response.setStatus(status);}  }
class C{  private void processUnManagedMasksForVolumes(com.emc.storageos.db.client.model.StorageSystem storageSystem,Map<URI,HostExportInfo> exportInfosForExistingMasks,List<HostExportInfo> exportInfosForNewMasks,Map<String,URI> unManagedVolumeNativeIdToUriMap,Map<String,URI> managedVolumeNativeIdToUriMap,List<UnManagedExportMask> unManagedExportMasksToUpdate,List<UnManagedExportMask> unManagedExportMasksToCreate,DbClient dbClient){  log.info("Processing unmanaged volumes: {} .",unManagedVolumeNativeIdToUriMap);  log.info("Processing masks to update: {} .",exportInfosForExistingMasks);  for (  Map.Entry<URI,HostExportInfo> entry : exportInfosForExistingMasks.entrySet()) {    URI maskUri=entry.getKey();    HostExportInfo exportInfo=entry.getValue();    Set<String> unManagedVolumesUris=new HashSet<>();    Set<String> managedVolumesUris=new HashSet<>();    List<String> volumesNativeIds=exportInfo.getStorageObjectNativeIds();    for (    String volumeNativeId : volumesNativeIds) {      URI volumeUri=unManagedVolumeNativeIdToUriMap.get(volumeNativeId);      if (volumeUri != null) {        unManagedVolumesUris.add(volumeUri.toString());      } else {        volumeUri=managedVolumeNativeIdToUriMap.get(volumeNativeId);        if (volumeUri != null) {          managedVolumesUris.add(volumeUri.toString());        }      }    }    UnManagedExportMask unManagedMask=dbClient.queryObject(UnManagedExportMask.class,maskUri);    StringSet unmangedVolumesInMask=unManagedMask.getUnmanagedVolumeUris();    if (unmangedVolumesInMask == null) {      unmangedVolumesInMask=new StringSet();      unManagedMask.setUnmanagedVolumeUris(unmangedVolumesInMask);    }    unmangedVolumesInMask.addAll(unManagedVolumesUris);    StringSet managedVolumesInMask=unManagedMask.getKnownVolumeUris();    if (managedVolumesInMask == null) {      managedVolumesInMask=new StringSet();      unManagedMask.setKnownVolumeUris(managedVolumesInMask);    }    managedVolumesInMask.addAll(managedVolumesUris);    unManagedExportMasksToUpdate.add(unManagedMask);  }  log.info("Processing masks to create: {} .",exportInfosForNewMasks);  for (  HostExportInfo hostExportInfo : exportInfosForNewMasks) {    Set<String> unManagedVolumesUris=new HashSet<>();    Set<String> managedVolumesUris=new HashSet<>();    List<String> volumesNativeIds=hostExportInfo.getStorageObjectNativeIds();    for (    String volumeNativeId : volumesNativeIds) {      URI volumeUri=unManagedVolumeNativeIdToUriMap.get(volumeNativeId);      if (volumeUri != null) {        unManagedVolumesUris.add(volumeUri.toString());      } else {        volumeUri=managedVolumeNativeIdToUriMap.get(volumeNativeId);        if (volumeUri != null) {          managedVolumesUris.add(volumeUri.toString());        }      }    }    UnManagedExportMask newMask=createUnManagedExportMask(storageSystem,hostExportInfo,unManagedVolumesUris,managedVolumesUris,dbClient);    unManagedExportMasksToCreate.add(newMask);  }}  }
class C{  public double error(){  int width=image.getWidth(null);  int height=image.getHeight(null);  int[] originalData=(int[])(original.getRaster().getDataElements(0,0,width,height,null));  int[] imageData=(int[])(image.getRaster().getDataElements(0,0,width,height,null));  int len=originalData.length;  double error=0;  for (int i=0; i < len; i++) {    int a=originalData[i];    int b=imageData[i];    int error1=((a & 0xff) - (b & 0xff));    int error2=(((a >> 8) & 0xff) - (((b >> 8) & 0xff)));    int error3=(((a >> 16) & 0xff) - (((b >> 16) & 0xff)));    error+=error1 * error1 + error2 * error2 + error3 * error3;  }  return Math.sqrt(error) / maxError();}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  protected void updateLeadSelectionRow(){  leadRow=getRowForPath(tree,getLeadSelectionPath());}  }
class C{  String nameAndDescriptor(){  return nameAndDescriptor;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:53.129 -0500",hash_original_method="99CC342CC6A41D10B099489516EB4814",hash_generated_method="951170F6072EBEE7723E27BC6697DA22") public boolean isIPAddress(){  return addressType != HOSTNAME;}  }
class C{  private FetchBufferPart(IgniteInternalFuture<byte[]> readFut,long pos,int len){  this.readFut=readFut;  this.pos=pos;  this.len=len;}  }
class C{  public void fellBlockAsItem(World world,int x,int y,int z){  dropBlockAsItem(world,x,y,z,world.getBlockMetadata(x,y,z),0);  world.setBlockToAir(x,y,z);}  }
class C{  public void buildTree(Instances data,SimpleLinearRegression[][] higherRegressions,double totalInstanceWeight,double higherNumParameters,Instances numericDataHeader) throws Exception {  m_totalInstanceWeight=totalInstanceWeight;  m_train=data;  m_isLeaf=true;  m_sons=null;  m_numInstances=m_train.numInstances();  m_numClasses=m_train.numClasses();  m_numericDataHeader=numericDataHeader;  m_numericData=getNumericData(m_train);  if (higherRegressions == null) {    m_regressions=initRegressions();  } else {    m_regressions=higherRegressions;  }  m_numParameters=higherNumParameters;  m_numRegressions=0;  if (m_numInstances >= m_numFoldsBoosting) {    if (m_fixedNumIterations > 0) {      performBoosting(m_fixedNumIterations);    } else     if (getUseAIC()) {      performBoostingInfCriterion();    } else {      performBoostingCV();    }  }  m_numParameters+=m_numRegressions;  Evaluation eval=new Evaluation(m_train);  eval.evaluateModel(this,m_train);  m_numIncorrectModel=eval.incorrect();  boolean grow;  if (m_numInstances > m_minNumInstances) {    if (m_modelSelection instanceof ResidualModelSelection) {      double[][] probs=getProbs(getFs(m_numericData));      double[][] trainYs=getYs(m_train);      double[][] dataZs=getZs(probs,trainYs);      double[][] dataWs=getWs(probs,trainYs);      m_localModel=((ResidualModelSelection)m_modelSelection).selectModel(m_train,dataZs,dataWs);    } else {      m_localModel=m_modelSelection.selectModel(m_train);    }    grow=(m_localModel.numSubsets() > 1);  } else {    grow=false;  }  if (grow) {    m_isLeaf=false;    Instances[] localInstances=m_localModel.split(m_train);    cleanup();    m_sons=new LMTNode[m_localModel.numSubsets()];    for (int i=0; i < m_sons.length; i++) {      m_sons[i]=new LMTNode(m_modelSelection,m_fixedNumIterations,m_fastRegression,m_errorOnProbabilities,m_minNumInstances,getWeightTrimBeta(),getUseAIC(),m_nominalToBinary);      m_sons[i].buildTree(localInstances[i],copyRegressions(m_regressions),m_totalInstanceWeight,m_numParameters,m_numericDataHeader);      localInstances[i]=null;    }  } else {    cleanup();  }}  }
class C{  protected SVGOMFEConvolveMatrixElement(){}  }
class C{  public void autoAdjustRange(){  this.axis.autoAdjustRange();  this.colorPalette.setMinZ(this.axis.getLowerBound());  this.colorPalette.setMaxZ(this.axis.getUpperBound());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:33.711 -0400",hash_original_method="E1846D744F51FCC12E25E8D2169ECF44",hash_generated_method="49BA0A14BCA5E88347A9522B6B7AC378") public ReflectiveOperationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void testToPlainStringPosPosExp(){  String a="123809648392384754573567356745735.63567890295784902768787678287E+100";  BigDecimal aNumber=new BigDecimal(a);  String result="1238096483923847545735673567457356356789029578490276878767828700000000000000000000000000000000000000000000000000000000000000000000000";  assertTrue("incorrect value",aNumber.toPlainString().equals(result));}  }
class C{  public boolean isIterable(){  if (fType == UNKNOWN && (fChecked & ITERABLE) == 0 && isSubtypeOf("java.lang.Iterable"))   fType=ITERABLE;  fChecked|=ITERABLE;  return fType == ITERABLE || fType == COLLECTION;}  }
class C{  final public boolean isReadOnly(){  return false;}  }
class C{  private ExprKraken parseOrExpr(){  ExprKraken left=parseAndExpr();  while (true) {    Token token=scanToken();switch (token) {case OR:      left=new BinaryExpr(BinaryOp.OR,left,parseAndExpr());    break;default :  _token=token;return left;}}}  }
class C{  public StructA(StructA other){  if (other.isSetS()) {    this.s=other.s;  }}  }
class C{  public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        try {          int b=in.read();          if (b >= 0) {            b3[i]=(byte)b;            numBinaryBytes++;          }        } catch (        java.io.IOException e) {          if (i == 0)           throw e;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && DECODABET[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0)         break;        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes)     return -1;    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength)       position=-1;      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  public Builder forcedGlossary(File forcedGlossary){  this.forcedGlossary=forcedGlossary;  return this;}  }
class C{  public void testUUID() throws Exception {  String s=UUID.randomUUID().toString().toLowerCase(Locale.ROOT);  assertU(adoc("id","101","uuid",s));  assertU(commit());  LocalSolrQueryRequest req=lrf.makeRequest("q","*:*");  SolrQueryResponse rsp=h.queryAndResponse(req.getParams().get(CommonParams.QT),req);  BinaryQueryResponseWriter writer=(BinaryQueryResponseWriter)h.getCore().getQueryResponseWriter("javabin");  ByteArrayOutputStream baos=new ByteArrayOutputStream();  writer.write(baos,req,rsp);  NamedList res=(NamedList)new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));  SolrDocumentList docs=(SolrDocumentList)res.get("response");  for (  Object doc : docs) {    SolrDocument document=(SolrDocument)doc;    assertEquals("Returned object must be a string","java.lang.String",document.getFieldValue("uuid").getClass().getName());    assertEquals("Wrong UUID string returned",s,document.getFieldValue("uuid"));  }  req.close();}  }
class C{  public FluentTriFunction<T1,T2,T3,R> before(final TriConsumer<T1,T2,T3> action){  return withFn(null);}  }
class C{  @Override public final void closePdfFile(){  if (pages != null) {    pages.stopGeneratingPage();  }  pages.disableScreen();  fileAccess.closePdfFile();}  }
class C{  public static Sdk findAndroidSDK(){  Sdk[] allJDKs=ProjectJdkTable.getInstance().getAllJdks();  for (  Sdk sdk : allJDKs) {    if (sdk.getSdkType().getName().toLowerCase().contains("android")) {      return sdk;    }  }  return null;}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException {  setHints(null);  return decodeInternal(image);}  }
class C{  public Relationship(final RelationshipType relationshipType,final int roundValue){  this.relationshipType=relationshipType;  this.roundCreated=roundValue;}  }
class C{  private void parseValidate(Attributes attributes) throws SAXException {  md.schemaUriRef=getSchema(attributes);  md.schemaUriBase=xmlBaseHandler.getBaseUri();  md.schemaType=getSchemaType(attributes);  if (md.schemaType == null)   md.schemaType=defaultSchemaType;  if (SchemaReceiverImpl.LEGACY_RNC_MEDIA_TYPE.equals(md.schemaType))   warning("legacy_rnc_media_type",locator);  if (md.actions != null)   md.modeUsage=getModeUsage(attributes); else   md.modeUsage=null;  md.options=new PropertyMapBuilder();  md.mustSupportOptions.clear();}  }
class C{  public boolean isValue(){  return value;}  }
class C{  private Map<String,Object> parseParameters(String parameters){  Map<String,Object> parameterMap=new HashMap<>();  parameterMap.put("thumb",Boolean.FALSE);  parameterMap.put("destination","images");  String[] details=parameters.split(",");  for (int x=0; x < details.length; x++) {    String key="";    String value="";    try {      String[] d=details[x].split("=");      key=d[0].trim();      value=d[1].trim();    } catch (    Exception e) {    }    if (StringUtils.isAnyBlank(key,value)) {      continue;    }switch (key.toLowerCase()) {case "type":      MediaFileType type=MediaFileType.valueOf(value.toUpperCase());    if (type != null) {      parameterMap.put(key,type);    }  break;case "destination":parameterMap.put("destination",value);break;case "thumb":parameterMap.put(key,Boolean.parseBoolean(value));break;case "width":try {parameterMap.put(key,Integer.parseInt(value));} catch (Exception e) {}break;default :break;}}return parameterMap;}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (outputFormatPeek() == null) {    setOutputFormat();  }  Instance inst=(Instance)instance.copy();  copyValues(inst,true,inst.dataset(),getOutputFormat());  convertInstance(inst);  return true;}  }
class C{  private int offset(int i,int j){  return i * max_source_phrase_length + j - i - 1;}  }
class C{  protected void correlatedPointAddedCallback(int correlatedTimeStep){  boolean sourceMatches=false;  if (stepKernel(sourceObs,source[correlatedTimeStep],kernelWidthSourceInUse) > 0) {    countPastSource++;    sourceMatches=true;  }  if (stepKernel(destNextObs,destNext[correlatedTimeStep],kernelWidthDestNextInUse) > 0) {    countNextPast++;    if (sourceMatches) {      countNextPastSource++;    }  }}  }
class C{  public ItemStack fillFluidItemStack(ItemStack container,StoredFluidStack fill,INetworkCache network,ActionType action){  return container;}  }
class C{  public boolean containsValue(long val){  byte[] states=_states;  long[] vals=_values;  for (int i=vals.length; i-- > 0; ) {    if (states[i] == FULL && val == vals[i]) {      return true;    }  }  return false;}  }
class C{  AlignmentPatternFinder(BitMatrix image,int startX,int startY,int width,int height,float moduleSize,ResultPointCallback resultPointCallback){  this.image=image;  this.possibleCenters=new ArrayList<AlignmentPattern>(5);  this.startX=startX;  this.startY=startY;  this.width=width;  this.height=height;  this.moduleSize=moduleSize;  this.crossCheckStateCount=new int[3];  this.resultPointCallback=resultPointCallback;}  }
class C{  public RoundedTransformationBuilder cornerRadiusTopRightDp(float radiusDp){  mCornerRadius[1]=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,radiusDp,mDisplayMetrics);  return this;}  }
class C{  public static boolean isNCName(int c){  return c < 0x10000 && (CHARS[c] & MASK_NCNAME) != 0;}  }
class C{  public void addLastCID(int regency,CertifiedDecision lastCID){  HashSet<CertifiedDecision> last=lastCIDs.get(regency);  if (last == null)   last=new HashSet<CertifiedDecision>();  last.add(lastCID);  lastCIDs.put(regency,last);}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_ZERO_OR_ONE,null));}  }
class C{  public String toString(String pattern,Locale locale) throws IllegalArgumentException {  if (pattern == null) {    return toString();  }  return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);}  }
class C{  public void resetOriginalSize(){  this.originalCardCount=getNumberOfPhysicalCards();}  }
class C{  public void visit(String name,Object value){  if (av != null) {    av.visit(name,value);  }}  }
class C{  protected void atCastToRtype(CastExpr expr) throws CompileError {  expr.getOprand().accept(this);  if (exprType == VOID || isRefType(exprType) || arrayDim > 0)   compileUnwrapValue(returnType,bytecode); else   if (returnType instanceof CtPrimitiveType) {    CtPrimitiveType pt=(CtPrimitiveType)returnType;    int destType=MemberResolver.descToType(pt.getDescriptor());    atNumCastExpr(exprType,destType);    exprType=destType;    arrayDim=0;    className=null;  } else   throw new CompileError("invalid cast");}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void optimizeImports(@NotNull final PsiFile file){  new PyImportOptimizer().processFile(file).run();}  }
class C{  Env<AttrContext> initEnv(JCVariableDecl tree,Env<AttrContext> env){  Env<AttrContext> localEnv=env.dupto(new AttrContextEnv(tree,env.info.dup()));  if (tree.sym.owner.kind == TYP) {    localEnv.info.scope=env.info.scope.dupUnshared();    localEnv.info.scope.owner=tree.sym;  }  if ((tree.mods.flags & STATIC) != 0 || ((env.enclClass.sym.flags() & INTERFACE) != 0 && env.enclMethod == null))   localEnv.info.staticLevel++;  return localEnv;}  }
class C{  public DefaultHttpResponseFactory(ReasonPhraseCatalog catalog){  if (catalog == null) {    throw new IllegalArgumentException("Reason phrase catalog must not be null.");  }  this.reasonCatalog=catalog;}  }
class C{  @Override public String toString(){  StringBuilder buf=new StringBuilder(DIGEST_SIZE * 2);  for (int nI=0; nI < DIGEST_SIZE; nI++) {    buf.append(HEXTAB.charAt((m_digestBits[nI] >>> 4) & 0x0f));    buf.append(HEXTAB.charAt(m_digestBits[nI] & 0x0f));  }  ;  return buf.toString();}  }
class C{  private static void reverseDisplay(String value){  if (value.length() == 1)   System.out.println(value); else {    System.out.print(value.charAt(value.length() - 1));    reverseDisplay(value.substring(0,value.length() - 1));  }}  }
class C{  public DateModel(Date date,BeansWrapper wrapper){  super(date,wrapper);  if (date instanceof java.sql.Date) {    type=DATE;  } else   if (date instanceof java.sql.Time) {    type=TIME;  } else   if (date instanceof java.sql.Timestamp) {    type=DATETIME;  } else {    type=wrapper.getDefaultDateType();  }}  }
class C{  public void traverse(Node pos,Node top) throws org.xml.sax.SAXException {  this.m_contentHandler.startDocument();  while (null != pos) {    startNode(pos);    Node nextNode=pos.getFirstChild();    while (null == nextNode) {      endNode(pos);      if ((null != top) && top.equals(pos))       break;      nextNode=pos.getNextSibling();      if (null == nextNode) {        pos=pos.getParentNode();        if ((null == pos) || ((null != top) && top.equals(pos))) {          nextNode=null;          break;        }      }    }    pos=nextNode;  }  this.m_contentHandler.endDocument();}  }
class C{  public static void ccDrawPoly(GL10 gl,CGPoint poli[],int numberOfPoints,boolean closePolygon){  FloatBuffer vertices=getVertices(2 * numberOfPoints);  for (int i=0; i < numberOfPoints; i++) {    vertices.put(poli[i].x);    vertices.put(poli[i].y);  }  vertices.position(0);  gl.glDisable(GL_TEXTURE_2D);  gl.glDisableClientState(GL_TEXTURE_COORD_ARRAY);  gl.glDisableClientState(GL_COLOR_ARRAY);  gl.glVertexPointer(2,GL_FLOAT,0,vertices);  if (closePolygon)   gl.glDrawArrays(GL_LINE_LOOP,0,numberOfPoints); else   gl.glDrawArrays(GL_LINE_STRIP,0,numberOfPoints);  gl.glEnableClientState(GL_COLOR_ARRAY);  gl.glEnableClientState(GL_TEXTURE_COORD_ARRAY);  gl.glEnable(GL_TEXTURE_2D);}  }
class C{  private static int upperIndex(int ch){  int index=-1;  if (ch >= 0xdf) {    if (ch <= 0x587) {switch (ch) {case 0xdf:        return 0;case 0x149:      return 1;case 0x1f0:    return 2;case 0x390:  return 3;case 0x3b0:return 4;case 0x587:return 5;}} else if (ch >= 0x1e96) {if (ch <= 0x1e9a) {index=6 + ch - 0x1e96;} else if (ch >= 0x1f50 && ch <= 0x1ffc) {index=upperValues2[ch - 0x1f50];if (index == 0) {index=-1;}} else if (ch >= 0xfb00) {if (ch <= 0xfb06) {index=90 + ch - 0xfb00;} else if (ch >= 0xfb13 && ch <= 0xfb17) {index=97 + ch - 0xfb13;}}}}return index;}  }
class C{  public BooleanAnswerFormat(String trueString,String falseString){  super(ChoiceAnswerStyle.SingleChoice,new Choice<>(trueString,true),new Choice<>(falseString,false));}  }
class C{  final void forgetContents(){  UNSAFE.putObject(this,itemOffset,this);  UNSAFE.putObject(this,waiterOffset,null);}  }
class C{  public OutOfMemoryError(){}  }
class C{  public JarLoader(String jarName) throws FileNotFoundException {  this.jarName=jarName;  InputStream is=new FileInputStream(jarName);  jarStream=new BufferedInputStream(is);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  TripSchedule findNextDeparture(int time,int stopOffset){  TripSchedule bestSchedule=null;  int bestTime=Integer.MAX_VALUE;  for (  TripSchedule schedule : tripSchedules) {    boolean active=servicesActive.get(schedule.serviceCode);    if (active) {      int departureTime=schedule.departures[stopOffset];      if (departureTime > time && departureTime < bestTime) {        bestTime=departureTime;        bestSchedule=schedule;      }    }  }  return bestSchedule;}  }
class C{  public static boolean writeAccount(AccountEntry a,boolean dump){  try {    if (dump)     account_dump.write(a.toJSON(null));    accounts.writeEntry(new IndexEntry<AccountEntry>(a.getScreenName(),a.getSourceType(),a));  } catch (  IOException e) {    Log.getLog().warn(e);  }  return true;}  }
class C{  private CIMObjectPath findSnapStoragePoolOrNull(StorageSystem storage) throws WBEMException {  CIMObjectPath snapPoolPath=null;  CloseableIterator<CIMObjectPath> snapPools=null;  try {    CIMObjectPath systemPath=_cimPath.getStorageSystem(storage);    snapPools=_helper.getAssociatorNames(storage,systemPath,null,storage.checkIfVmax3() ? StoragePool.PoolClassNames.Symm_SRPStoragePool.name() : SYMM_SNAP_STORAGE_POOL,null,null);    if (snapPools.hasNext()) {      snapPoolPath=snapPools.next();      _log.info(String.format("Found Symm_SnapStoragePool to use -> %s",snapPoolPath.toString()));    }  }  finally {    if (snapPools != null) {      snapPools.close();    }  }  return snapPoolPath;}  }
class C{  private void buildBranch(TreeNode parent,String[] values,int lvl){  if (lvl == values.length) {    parent.children=null;    return;  }  if (lvl > (m_Depth - 1)) {    m_Depth=lvl + 1;  }  Vector<TreeNode> kids=parent.children;  int index=search(kids,values[lvl]);  if (index != -1) {    TreeNode newParent=kids.elementAt(index);    if (newParent.children == null) {      newParent.children=new Vector<TreeNode>();    }    buildBranch(newParent,values,lvl + 1);  } else {    TreeNode added=new TreeNode();    added.parent=parent;    added.value=values[lvl];    added.children=new Vector<TreeNode>();    added.level=lvl;    if (parent != m_Root) {      added.context=parent.context + m_Seperator + parent.value;    } else {      added.context=parent.value;    }    kids.addElement(added);    buildBranch(added,values,lvl + 1);  }}  }
class C{  public VNXeCommandJob createFileSystem(String fsName,long size,String poolId,String nasServerId,boolean isThin,VNXeFSSupportedProtocolEnum supportedProtocols) throws VNXeException {  _logger.info("Creating file system:" + fsName);  CreateFileSystemParam parm=new CreateFileSystemParam();  parm.setName(fsName);  FileSystemParam fsParm=new FileSystemParam();  fsParm.setIsThinEnabled(isThin);  VNXeBase nasServer=new VNXeBase();  nasServer.setId(nasServerId);  fsParm.setNasServer(nasServer);  VNXeBase pool=new VNXeBase();  pool.setId(poolId);  fsParm.setPool(pool);  fsParm.setSize(size);  fsParm.setSupportedProtocols(supportedProtocols.getValue());  parm.setFsParameters(fsParm);  FileSystemActionRequest req=new FileSystemActionRequest(_khClient);  _logger.info("submitted the create file system job for " + fsName);  return req.createFileSystemAsync(parm);}  }
class C{  @Override public void handlePatch(Operation patch){  ServiceUtils.logInfo(this,"Handling patch for service %s",getSelfLink());  State startState=getState(patch);  State patchState=patch.getBody(State.class);  validatePatchState(startState,patchState);  PatchUtils.patchState(startState,patchState);  validateState(startState);  patch.complete();  try {    if (ControlFlags.isOperationProcessingDisabled(startState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping start operation processing (disabled)");    } else     if (TaskState.TaskStage.STARTED == startState.taskState.stage) {      deleteVm(startState);    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  public void rmdir(String dirName) throws IOException {  int req_id=generateNextRequestID();  TypesWriter tw=new TypesWriter();  tw.writeString(dirName,charsetName);  sendMessage(Packet.SSH_FXP_RMDIR,req_id,tw.getBytes());  expectStatusOKMessage(req_id);}  }
class C{  final void addHandler(HandlerBlockLE handler){  if (handlers == null) {    handlers=new HandlerBlockLE[1];    handlers[0]=handler;  } else {    for (    HandlerBlockLE handler1 : handlers) {      if (handler1 == handler) {        return;      }    }    int n=handlers.length;    HandlerBlockLE[] tmp=new HandlerBlockLE[n + 1];    for (int i=0; i < n; i++) {      tmp[i]=handlers[i];    }    tmp[n]=handler;    handlers=tmp;  }}  }
class C{  protected void registerLinkLabelAttributes(){  addAttributeProcessor(new UrlLmlAttribute(),"url","href");}  }
class C{  protected void initFollowsFrom(APMSpanBuilder builder,TraceReporter reporter,Reference ref){  if (ref.getReferredTo() instanceof APMSpan) {    APMSpan referenced=(APMSpan)ref.getReferredTo();    initTopLevelState(referenced.getTraceContext().getTopSpan(),reporter);    String nodeId=referenced.getNodePath();    getNodeBuilder().addCorrelationId(new CorrelationIdentifier(Scope.CausedBy,nodeId));    getNodeBuilder().setNodeType(NodeType.Consumer);    getNodeBuilder().setEndpointType(null);    EndpointRef epref=referenced.getTraceContext().getSourceEndpoint();    getNodeBuilder().setUri(epref.getUri());    getNodeBuilder().setOperation(epref.getOperation());    getNodeBuilder().setTimestamp(TimeUtil.toMicros(builder.start));    nodeBuilder=new NodeBuilder(getNodeBuilder());    traceContext.setBusinessTransaction(referenced.getTraceContext().getBusinessTransaction());    traceContext.setReportingLevel(referenced.getTraceContext().getReportingLevel());  }}  }
class C{  public static JSONArray toJSONArray(JSONTokener x) throws JSONException {  return toJSONArray(rowToJSONArray(x),x);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:51.237 -0500",hash_original_method="9881403720ADE533F77BFD7C116DE8A0",hash_generated_method="0F2DC0835E1E6FB890D0373B8BD49B08") public static final void zygoteInit(int targetSdkVersion,String[] argv) throws ZygoteInit.MethodAndArgsCaller {  if (DEBUG)   Slog.d(TAG,"RuntimeInit: Starting application from zygote");  redirectLogStreams();  commonInit();  zygoteInitNative();  applicationInit(targetSdkVersion,argv);}  }
class C{  protected Path createPath(){  Path path=new Path();  path.setFollowTerrain(true);  path.setPathType(AVKey.GREAT_CIRCLE);  path.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  path.setDelegateOwner(this.getActiveDelegateOwner());  path.setAttributes(this.getActiveShapeAttributes());  return path;}  }
class C{  @Override public void analyze(Graph graph,Map<String,DescriptiveStatistics> statsMap){  DescriptiveStatistics stats=module.statistics(graph.getVertices());  printStats(stats,key);  statsMap.put(key,stats);  if (outputDirectoryNotNull()) {    try {      writeHistograms(stats,new LinearDiscretizer(1.0),key,false);      writeHistograms(stats,new LinearDiscretizer(5.0),key + "_5",false);      writeHistograms(stats,key,13,1);    } catch (    IOException e) {      e.printStackTrace();    }  }  stats=new DescriptiveStatistics();  stats.addValue(module.assortativity(graph));  statsMap.put("r_" + key,stats);  printStats(stats,"r_" + key);}  }
class C{  public int policy(){  return Integer.parseInt(fields[40]);}  }
class C{  @Override public boolean equals(final Object o){  if (this == o) {    return true;  }  if (!(o instanceof Type)) {    return false;  }  Type t=(Type)o;  if (sort != t.sort) {    return false;  }  if (sort >= ARRAY) {    if (len != t.len) {      return false;    }    for (int i=off, j=t.off, end=i + len; i < end; i++, j++) {      if (buf[i] != t.buf[j]) {        return false;      }    }  }  return true;}  }
class C{  final public SyntaxTreeNode GeneralId() throws ParseException {  SyntaxTreeNode zn[]=new SyntaxTreeNode[2];  Token t;  bpa("General ID");  zn[0]=IdPrefix();  zn[1]=Identifier();  epa();{    if (true)     return new SyntaxTreeNode(mn,N_GeneralId,zn);  }  throw new Error("Missing return statement in function");}  }
class C{  protected ReferenceEntry next(){  return (ReferenceEntry)next;}  }
class C{  public static byte[] decode(byte[] source){  byte[] decoded=null;  try {    decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : "IOExceptions only come from GZipping, which is turned off: " + ex.getMessage();  }  return decoded;}  }
class C{  private static boolean endsWith(String str,String suffix,boolean ignoreCase){  if (str == null || suffix == null) {    return (str == null && suffix == null);  }  if (suffix.length() > str.length()) {    return false;  }  int strOffset=str.length() - suffix.length();  return str.regionMatches(ignoreCase,strOffset,suffix,0,suffix.length());}  }
class C{  protected Statement createBindableStatement(PropertyNode propertyNode,Expression fieldExpression){  return stmt(callThisX("firePropertyChange",args(constX(propertyNode.getName()),fieldExpression,assignX(fieldExpression,varX("value")))));}  }
class C{  public void initServer(int port,boolean log) throws Exception {  initServer(port,DEFAULT_TIMEOUT,log);}  }
class C{  public String groupName(){  ensureGroup();  return groupName;}  }
class C{  public Parameter(String name,double lowerBound,double upperBound){  super();  this.name=name;  this.lowerBound=lowerBound;  this.upperBound=upperBound;}  }
class C{  public void interpolatePathDataNode(PathDataNode nodeFrom,PathDataNode nodeTo,float fraction){  for (int i=0; i < nodeFrom.mParams.length; i++) {    mParams[i]=nodeFrom.mParams[i] * (1 - fraction) + nodeTo.mParams[i] * fraction;  }}  }
class C{  public synchronized long size() throws IOException {  initialize();  return size;}  }
class C{  public static byte[] customMessageRowKey(HBaseId mailboxUid,MessageUid value){  return Bytes.add(mailboxUid.toBytes(),Bytes.toBytes(value.asLong()));}  }
class C{  public void windowClosing(java.awt.event.WindowEvent e){  doneButtonActionPerformed();}  }
class C{  public int diameter(){  return diameter(root);}  }
class C{  @Override public void keyReleased(KeyEvent e){  clearMessages();}  }
class C{  public void open(String name) throws IOException {  this.open(new FileOutputStream(name));}  }
class C{  @Override public int isNullable(int param) throws SQLException {  try {    debugCodeCall("isNullable",param);    return getParameter(param).getNullable();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static void addImportedModulesSet(HashSet<ModuleNode> modules,StringSet symbols,Location loc,ModuleNode node){  if (modules.contains(node)) {    return;  }  modules.add(node);  HashSet<ModuleNode> extendees=node.getExtendedModuleSet();  Iterator<ModuleNode> iter=extendees.iterator();  while (iter.hasNext()) {    ModuleNode modNode=iter.next();    addImportedModulesSet(modules,symbols,infiniteLoc,modNode);  }  InstanceNode[] instances=node.getInstances();  for (int i=0; i < instances.length; i++) {    if (earlierLine(instances[i].stn.getLocation(),loc) && (!instances[i].getLocal() || earlierLine(loc,infiniteLoc))) {      if (instances[i].getName() != null) {        symbols.add(instances[i].getName().toString());      } else {        addImportedModulesSet(modules,symbols,infiniteLoc,instances[i].getModule());      }    }  }}  }
class C{  private static <K,V>ImmutableSortedMap<K,V> of(Comparator<? super K> comparator,K k1,V v1){  return new ImmutableSortedMap<K,V>(new RegularImmutableSortedSet<K>(ImmutableList.of(k1),checkNotNull(comparator)),ImmutableList.of(v1));}  }
class C{  public static byte[] generateAlternativeSeed(){  try {    ByteArrayOutputStream bout=new ByteArrayOutputStream();    DataOutputStream out=new DataOutputStream(bout);    out.writeLong(System.currentTimeMillis());    out.writeLong(System.nanoTime());    out.writeInt(new Object().hashCode());    Runtime runtime=Runtime.getRuntime();    out.writeLong(runtime.freeMemory());    out.writeLong(runtime.maxMemory());    out.writeLong(runtime.totalMemory());    try {      String s=System.getProperties().toString();      out.writeInt(s.length());      out.write(s.getBytes("UTF-8"));    } catch (    Exception e) {      warn("generateAlternativeSeed",e);    }    try {      Class<?> inetAddressClass=Class.forName("java.net.InetAddress");      Object localHost=inetAddressClass.getMethod("getLocalHost").invoke(null);      String hostName=inetAddressClass.getMethod("getHostName").invoke(localHost).toString();      out.writeUTF(hostName);      Object[] list=(Object[])inetAddressClass.getMethod("getAllByName",String.class).invoke(null,hostName);      Method getAddress=inetAddressClass.getMethod("getAddress");      for (      Object o : list) {        out.write((byte[])getAddress.invoke(o));      }    } catch (    Throwable e) {    }    for (int j=0; j < 16; j++) {      int i=0;      long end=System.currentTimeMillis();      while (end == System.currentTimeMillis()) {        i++;      }      out.writeInt(i);    }    out.close();    return bout.toByteArray();  } catch (  IOException e) {    warn("generateAlternativeSeed",e);    return new byte[1];  }}  }
class C{  public ResolvedContact resolveContact(String contactInformation,int searchType){  String resolvedName;  String number=sAliasHelper.convertAliasToNumber(contactInformation);  if (Phone.isCellPhoneNumber(number)) {    resolvedName=ContactsManager.getContactName(sContext,number);    return new ResolvedContact(resolvedName,number);  }  return resolveContactRec(contactInformation,searchType);}  }
class C{  public void readFields(DataInput dataInput) throws IOException {  if (dataInput.readBoolean()) {    int numPointers=dataInput.readInt();    pointers=new int[numPointers];    for (int i=0; i < numPointers; ++i) {      pointers[i]=dataInput.readInt();    }  } else {    pointers=null;  }}  }
class C{  public static boolean isIdentityOrEquivalent(final EvolutionState state,GPTree toBchecked){  LambdaTree toB=(LambdaTree.generateFromGPTree((LambdaTree)toBchecked)).betaReduce();  GPNode iter=toB.child;  if (iter instanceof LNode && iter.children[0] instanceof IndexNode && ((IndexNode)iter.children[0]).getIndex() == 1) {    return true;  } else {    return false;  }}  }
class C{  public boolean insert(IInterval interval){  checkInterval(interval);  int begin=interval.getLeft();  int end=interval.getRight();  boolean modified=false;  if (begin <= left && right <= end) {    count++;    update(interval);    modified=true;  } else {    int mid=(left + right) / 2;    if (begin < mid) {      modified|=lson.insert(interval);    }    if (mid < end) {      modified|=rson.insert(interval);    }  }  return modified;}  }
class C{  public Vset check(Environment env,Context ctx,Vset vset,Hashtable exp){  return checkValue(env,ctx,vset,exp);}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public SnowballAnalyzer stopwords(String stopwords){  this.stopwords=stopwords;  return this;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:11.286 -0500",hash_original_method="A9512F39350C94C0C69735359EF3AADA",hash_generated_method="3B672CC1EE5CF4720FA4708FF79B3CB8") public PortUnreachableException(){}  }
class C{  boolean isFullRange(){  return max == Integer.MAX_VALUE && min == Integer.MIN_VALUE;}  }
class C{  public LinkOutputStream(OutputStream out){  super(out);}  }
class C{  protected SimplePhase(String name,Timer timer){  super(name,timer);}  }
class C{  public FunctionDomainException(String msg){  super(msg);}  }
class C{  public double toRealProgress(int seekBarProgress){  if (seekBarProgress == getMax()) {    return mMaxValue;  }  return seekBarProgress * mStep + mMinValue;}  }
class C{  @VisibleForTesting protected static boolean notAllowedStrategy(DockerSlaveTemplate template){  if (isNull(template)) {    LOG.debug("Skipping DockerProvisioningStrategy because: template is null");    return true;  }  final RetentionStrategy retentionStrategy=template.getRetentionStrategy();  if (isNull(retentionStrategy)) {    LOG.debug("Skipping DockerProvisioningStrategy because: strategy is null for {}",template);  }  if (retentionStrategy instanceof DockerOnceRetentionStrategy) {    if (template.getNumExecutors() == 1) {      LOG.debug("Applying faster provisioning for single executor template {}",template);      return false;    } else {      LOG.debug("Skipping DockerProvisioningStrategy because: numExecutors is {} for {}",template.getNumExecutors(),template);      return true;    }  }  if (retentionStrategy instanceof RetentionStrategy.Demand) {    LOG.debug("Applying faster provisioning for Demand strategy for template {}",template);    return false;  }  LOG.trace("Skipping YAD provisioning for unknown mix of configuration for {}",template);  return true;}  }
class C{  public void startDelayed(int seconds) throws SchedulerException {  sched.startDelayed(seconds);}  }
class C{  void writeChunkHeader(WriteBuffer buff,int minLength){  long pos=buff.position();  buff.put(asString().getBytes(DataUtils.LATIN));  while (buff.position() - pos < minLength - 1) {    buff.put((byte)' ');  }  if (minLength != 0 && buff.position() > minLength) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_INTERNAL,"Chunk metadata too long");  }  buff.put((byte)'\n');}  }
class C{  public String initialize(){  String result;  debug("pre: init");  m_Initializing=true;  m_Running=false;  m_Stopping=false;  notifyExecutionStageListeners(ExecutionStageEvent.Stage.INITIALIZING);  ExperimentUtils.ensureThreadSafety(this);  for (  LogListener l : m_LogListeners) {    m_DatasetProvider.addLogListener(l);    m_StatisticsHandler.addLogListener(l);    m_Evaluator.addLogListener(l);  }  m_Statistics.clear();  result=handleError(m_DatasetProvider,m_DatasetProvider.initialize());  if (result == null)   result=handleError(m_StatisticsHandler,m_StatisticsHandler.initialize());  if (result != null)   log(result);  m_Initializing=false;  debug("post: init");  return result;}  }
class C{  public VietnameseContextGenerator(Element node){  readFeatureParameters(node);}  }
class C{  @Override public void mark(int limit){}  }
class C{  boolean isAltIdIndex(String fieldName){  DbIndex index=getIndex(fieldName);  return (index != null && index instanceof AltIdDbIndex);}  }
class C{  public boolean isDisponible(){  return disponible;}  }
class C{  public InterpreterException(String message,int lineno,int columnno){  super(message);  line=lineno;  column=columnno;}  }
class C{  public ChunkedConvertingIterator(final IChunkedOrderedIterator<E> src,final IChunkConverter<E,F> converter,final IKeyOrder<F> keyOrder){  if (src == null)   throw new IllegalArgumentException();  if (converter == null)   throw new IllegalArgumentException();  this.src=src;  this.converter=converter;  this.keyOrder=keyOrder;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:07.611 -0500",hash_original_method="7F4FC3BA20FD4185DE24EC53F9CE84DB",hash_generated_method="8FFE92A71082343259180CD0F83727B9") private synchronized void blockMessages(){  mBlockMessages=true;}  }
class C{  private void validatePortAttribute(LogicalPlan dag,String name,int memory){  LogicalPlan.InputPortMeta imeta=dag.getOperatorMeta(name).getInputStreams().keySet().iterator().next();  Assert.assertEquals(memory,(int)imeta.getAttributes().get(Context.PortContext.BUFFER_MEMORY_MB));}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ExpressionsPackage.LOGICAL_NOT_EXPRESSION__OPERAND:    return basicSetOperand(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @Override public void registerPersistentStore(String storeName,Scope scope) throws SyncException {  registerStore(storeName,scope);}  }
class C{  public ReplDBMSEvent peek(int taskId){  return queues.get(taskId).peek();}  }
class C{  public static String adapterName(Object o){  String className=o.getClass().getName();  log.debug("handle object of class {}",className);  int lastDot=className.lastIndexOf(".");  String result=null;  if (lastDot > 0) {    result=className.substring(0,lastDot) + ".configurexml." + className.substring(lastDot + 1,className.length())+ "Xml";    log.debug("adapter class name is {}",result);    return result;  } else {    log.error("No package name found, which is not yet handled!");    return null;  }}  }
class C{  private Object writeReplace(){  return new Ser(Ser.CHRONO_LOCAL_DATE_TIME_TYPE,this);}  }
class C{  public WriteSingleRegisterResponse(){  super();  setDataLength(4);  setFunctionCode(Modbus.WRITE_SINGLE_REGISTER);}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.BLOCK;}  }
class C{  public void handleNotification(Notification notif,Object handback){  if (notif == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"handleNotification",notif);  if (notif instanceof MBeanServerNotification) {    MBeanServerNotification mbsNtf=(MBeanServerNotification)notif;    String ntfType=notif.getType();    if (ntfType.equals(MBeanServerNotification.UNREGISTRATION_NOTIFICATION)) {      ObjectName mbeanName=((MBeanServerNotification)notif).getMBeanName();      boolean isRefedMBeanFlag=false;synchronized (myRefedMBeanObjName2RelIdsMap) {        if (myRefedMBeanObjName2RelIdsMap.containsKey(mbeanName)) {synchronized (myUnregNtfList) {            myUnregNtfList.add(mbsNtf);          }          isRefedMBeanFlag=true;        }        if (isRefedMBeanFlag && myPurgeFlag) {          try {            purgeRelations();          } catch (          Exception exc) {            throw new RuntimeException(exc.getMessage());          }        }      }      String relId;synchronized (myRelMBeanObjName2RelIdMap) {        relId=myRelMBeanObjName2RelIdMap.get(mbeanName);      }      if (relId != null) {        try {          removeRelation(relId);        } catch (        Exception exc) {          throw new RuntimeException(exc.getMessage());        }      }    }  }  RELATION_LOGGER.exiting(RelationService.class.getName(),"handleNotification");  return;}  }
class C{  public void test_engineCreateSSLEngine_02(){  int[] invalid_port={Integer.MIN_VALUE,-65535,-1,65536,Integer.MAX_VALUE};  SSLContextSpiImpl ssl=new SSLContextSpiImpl();  try {    SSLEngine sleng=ssl.engineCreateSSLEngine("localhost",1080);    fail("RuntimeException wasn't thrown");  } catch (  RuntimeException re) {    String str=re.getMessage();    if (!str.equals("Not initialiazed"))     fail("Incorrect exception message: " + str);  }catch (  Exception e) {    fail("Incorrect exception " + e + " was thrown");  }  for (int i=0; i < invalid_port.length; i++) {    try {      SSLEngine sleng=ssl.engineCreateSSLEngine("localhost",invalid_port[i]);      fail("IllegalArgumentException wasn't thrown");    } catch (    IllegalArgumentException iae) {    }  }}  }
class C{  public void engineSetCertificateEntry(String alias,Certificate cert) throws KeyStoreException {synchronized (entries) {    Object entry=entries.get(alias.toLowerCase(Locale.ENGLISH));    if (entry != null) {      if (entry instanceof PrivateKeyEntry) {        throw new KeyStoreException("Cannot overwrite own " + "certificate");      } else       if (entry instanceof SecretKeyEntry) {        throw new KeyStoreException("Cannot overwrite secret key");      }    }    TrustedCertEntry trustedCertEntry=new TrustedCertEntry();    trustedCertEntry.cert=cert;    trustedCertEntry.date=new Date();    entries.put(alias.toLowerCase(Locale.ENGLISH),trustedCertEntry);  }}  }
class C{  public DerValue(InputStream in) throws IOException {  data=init(false,in);}  }
class C{  public List<MediaSearchResult> searchMovie(String searchTerm,Movie movie,MediaScraper mediaScraper,MediaLanguages langu){  List<MediaSearchResult> sr=null;  try {    IMovieMetadataProvider provider;    if (mediaScraper == null) {      provider=(IMovieMetadataProvider)getDefaultMediaScraper().getMediaProvider();    } else {      provider=(IMovieMetadataProvider)mediaScraper.getMediaProvider();    }    boolean idFound=false;    MediaSearchOptions options=new MediaSearchOptions(MediaType.MOVIE);    options.setLanguage(LocaleUtils.toLocale(langu.name()));    options.setCountry(movieSettings.getCertificationCountry());    if (movie != null) {      if (Utils.isValidImdbId(movie.getImdbId())) {        options.setImdbId(movie.getImdbId());        idFound=true;      }      if (movie.getTmdbId() != 0) {        options.setTmdbId(movie.getTmdbId());        idFound=true;      }      options.setQuery(movie.getTitle());      if (!movie.getYear().isEmpty()) {        try {          options.setYear(Integer.parseInt(movie.getYear()));        } catch (        Exception ignored) {        }      }    }    if (!searchTerm.isEmpty()) {      if (idFound) {        if (!searchTerm.equals(movie.getTitle())) {          options.setQuery(searchTerm);        }      } else {        options.setQuery(searchTerm);      }    }    LOGGER.info("=====================================================");    LOGGER.info("Searching with scraper: " + provider.getProviderInfo().getId() + ", "+ provider.getProviderInfo().getVersion());    LOGGER.info(options.toString());    LOGGER.info("=====================================================");    sr=provider.search(options);    if (sr.isEmpty() && movieSettings.isScraperFallback()) {      for (      MediaScraper ms : getAvailableMediaScrapers()) {        if (!ms.isEnabled() || provider.getProviderInfo().equals(ms.getMediaProvider().getProviderInfo()) || ms.getMediaProvider().getProviderInfo().getName().startsWith("Kodi")) {          continue;        }        LOGGER.info("no result yet - trying alternate scraper: " + ms.getName());        try {          LOGGER.info("=====================================================");          LOGGER.info("Searching with alternate scraper: " + ms.getMediaProvider().getProviderInfo().getId() + ", "+ provider.getProviderInfo().getVersion());          LOGGER.info(options.toString());          LOGGER.info("=====================================================");          sr=((IMovieMetadataProvider)ms.getMediaProvider()).search(options);        } catch (        Exception e) {          LOGGER.error("searchMovieFallback",e);          MessageManager.instance.pushMessage(new Message(MessageLevel.ERROR,movie,"message.movie.searcherror",new String[]{":",e.getLocalizedMessage()}));        }        if (!sr.isEmpty()) {          break;        }      }    }  } catch (  Exception e) {    LOGGER.error("searchMovie",e);    MessageManager.instance.pushMessage(new Message(MessageLevel.ERROR,movie,"message.movie.searcherror",new String[]{":",e.getLocalizedMessage()}));  }  return sr;}  }
class C{  protected GatheredEvent createGatheredEventObject(final EventType type,final String id,final Date date,final long multiplier){  GatheredEvent e=createGatheredEventObject(type,id,date);  e.setMultiplier(multiplier);  return e;}  }
class C{  static int[] square(int[] a,int aLen,int[] res){  long carry;  for (int i=0; i < aLen; i++) {    carry=0;    for (int j=i + 1; j < aLen; j++) {      carry=unsignedMultAddAdd(a[i],a[j],res[i + j],(int)carry);      res[i + j]=(int)carry;      carry>>>=32;    }    res[i + aLen]=(int)carry;  }  TBitLevel.shiftLeftOneBit(res,res,aLen << 1);  carry=0;  for (int i=0, index=0; i < aLen; i++, index++) {    carry=unsignedMultAddAdd(a[i],a[i],res[index],(int)carry);    res[index]=(int)carry;    carry>>>=32;    index++;    carry+=res[index] & 0xFFFFFFFFL;    res[index]=(int)carry;    carry>>>=32;  }  return res;}  }
class C{  boolean stepAnimation(){  if (mDimSurface == null) {    Slog.e(TAG,"stepAnimation: null Surface");    mTargetAlpha=mAlpha=0;    return false;  }  if (isAnimating()) {    final long curTime=SystemClock.uptimeMillis();    final float alphaDelta=mTargetAlpha - mStartAlpha;    float alpha=mStartAlpha + alphaDelta * (curTime - mStartTime) / mDuration;    if (alphaDelta > 0 && alpha > mTargetAlpha || alphaDelta < 0 && alpha < mTargetAlpha) {      alpha=mTargetAlpha;    }    if (DEBUG)     Slog.v(TAG,"stepAnimation: curTime=" + curTime + " alpha="+ alpha);    setAlpha(alpha);  }  return isAnimating();}  }
class C{  public boolean isEnded(){  return curveState >= SUSTAIN_CURVE_STATE && envelopeHeight <= 0;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected DebuggerStatementImpl(){  super();}  }
class C{  public Node represent(Object data){  return representer.represent(data);}  }
class C{  public int size(){  return outputPos;}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public ToastBuilder gravityOffsetX(int gravityOffsetX){  this.gravityOffsetX=gravityOffsetX;  return this;}  }
class C{  private static void addCraftingRecipes(){  GameRegistry.addRecipe(new ShapelessCuttingRecipe(new ItemStack(Blocks.PLANKS,2,BlockPlanks.EnumType.OAK.getMetadata()),new ItemStack(Items.WOODEN_AXE,1,OreDictionary.WILDCARD_VALUE),new ItemStack(Blocks.LOG,1,BlockPlanks.EnumType.OAK.getMetadata())));  GameRegistry.addShapelessRecipe(new ItemStack(Blocks.PLANKS,2,BlockPlanks.EnumType.OAK.getMetadata()),new ItemStack(ModItems.WOODEN_AXE,1,OreDictionary.WILDCARD_VALUE),new ItemStack(Blocks.LOG,1,BlockPlanks.EnumType.OAK.getMetadata()));  GameRegistry.addRecipe(new ShapedArmourUpgradeRecipe(Items.GOLDEN_HELMET,"AAA","ABA","AAA",'A',Blocks.GOLD_BLOCK,'B',new ItemStack(Items.IRON_HELMET,1,OreDictionary.WILDCARD_VALUE)));  final ItemStack guardianSpawner=new ItemStack(Blocks.MOB_SPAWNER);  final NBTTagCompound tileEntityData=guardianSpawner.getSubCompound("BlockEntityTag",true);  final NBTTagCompound spawnData=new NBTTagCompound();  spawnData.setString("id","Guardian");  tileEntityData.setTag("SpawnData",spawnData);  tileEntityData.setTag("SpawnPotentials",new NBTTagList());  GameRegistry.addRecipe(guardianSpawner,"SSS","SFS","SSS",'S',Items.STICK,'F',Items.FISH);  final ItemStack bucketOfStaticGas=UniversalBucket.getFilledBucket(ForgeModContainer.getInstance().universalBucket,ModFluids.STATIC_GAS);  GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Blocks.COBBLESTONE),bucketOfStaticGas,bucketOfStaticGas,bucketOfStaticGas));  GameRegistry.addShapelessRecipe(new ItemStack(ModItems.DIMENSION_REPLACEMENT),ModItems.SUBSCRIPTS,ModItems.SUPERSCRIPTS);  GameRegistry.addSmelting(ModItems.SUBSCRIPTS,new ItemStack(ModItems.DIMENSION_REPLACEMENT),0.35f);  GameRegistry.addRecipe(new ShapedOreRecipe(Items.ACACIA_BOAT,"F",'F',"fooBar"));}  }
class C{  @Timed @ExceptionMetered @PUT public Response enrollClientInGroup(@Auth AutomationClient automationClient,@PathParam("clientId") LongParam clientId,@PathParam("groupId") LongParam groupId){  try {    Map<String,String> extraInfo=new HashMap<>();    extraInfo.put("deprecated","true");    aclDAO.findAndEnrollClient(clientId.get(),groupId.get(),auditLog,automationClient.getName(),extraInfo);  } catch (  IllegalStateException e) {    throw new NotFoundException();  }  return Response.ok().build();}  }
class C{  public RTMPMinaConnection(){  super(PERSISTENT);}  }
class C{  public static ProfileFragment newInstance(@SuppressWarnings("TypeMayBeWeakened") User user,int selectedTab){  ProfileFragment profileFragment=new ProfileFragment();  Bundle args=new Bundle();  args.putSerializable(KEY_USER,user);  args.putInt(KEY_SELECTED_TAB,selectedTab);  profileFragment.setArguments(args);  return profileFragment;}  }
class C{  public boolean exists(OsmElement element){  return getDelegator().getCurrentStorage().contains(element);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length) {    char newBuffer[]=new char[zzCurrentPos * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;  }  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);  if (numRead > 0) {    zzEndRead+=numRead;    return false;  }  if (numRead == 0) {    int c=zzReader.read();    if (c == -1) {      return true;    } else {      zzBuffer[zzEndRead++]=(char)c;      return false;    }  }  return true;}  }
class C{  public void handleGetFeatureInfoRequest(Properties requestProperties,IHttpResponse httpResponse) throws IOException, MapRequestFormatException, WMSException {  GetFeatureInfoRequestParameters parameters=new GetFeatureInfoRequestParameters();  checkVersion(requestProperties,parameters);  checkExceptions(requestProperties,parameters);  checkFormat(requestProperties,parameters);  setFormatter(parameters.formatter);  checkBackground(requestProperties,parameters);  checkProjectionType(requestProperties,parameters);  checkWidthAndHeight(requestProperties,parameters);  checkBoundingBox(requestProperties,parameters);  checkFeatureInfoPoint(requestProperties,parameters);  checkLayersAndStyles(requestProperties,parameters);  checkQueryLayers(requestProperties,parameters);  checkInfoFormat(requestProperties,parameters);  Proj projection=createProjection(requestProperties,parameters);  FeatureInfoResponse featureInfoResponse=getFeatureInfoResponse();  StringBuffer out=new StringBuffer();  featureInfoResponse.setOutput(parameters.infoFormat,out);  for (  String queryLayerName : parameters.queryLayerNames) {    IWmsLayer wmslayer=wmsLayerByName.get(queryLayerName);    Layer layer=getTopLayerByName(queryLayerName);    layer.setProjection(new ProjectionEvent(this,projection));    LayerFeatureInfoResponse layerResponse=wmslayer.query(parameters.x,parameters.y);    featureInfoResponse.output(layerResponse);  }  featureInfoResponse.flush();  byte[] response=out.toString().getBytes("UTF-8");  httpResponse.writeHttpResponse(parameters.infoFormat,response);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:17.698 -0400",hash_original_method="930BFD52E6B403D3AE39B0DCC1C0944A",hash_generated_method="9D853BB59F90A873BD76A19D9B80C5CF") Node(Object item,boolean isData){  UNSAFE.putObject(this,itemOffset,item);  this.isData=isData;}  }
class C{  public static boolean putFloat(Context context,String key,float value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putFloat(key,value);  return editor.commit();}  }
class C{  public Vector3f sub(Vector3fc v){  x-=v.x();  y-=v.y();  z-=v.z();  return this;}  }
class C{  public Query like(String fieldName,Reader... readers) throws IOException {  Map<String,Int> words=new HashMap<>();  for (  Reader r : readers) {    addTermFrequencies(r,words,fieldName);  }  return createQuery(createQueue(words));}  }
class C{  private Naming(){}  }
class C{  public LinkRef(Name linkName){  super(linkClassName,new StringRefAddr(linkAddrType,linkName.toString()));}  }
class C{  public void run(String username,String password) throws AuthenticationException {  for (  String s : WELCOME_MESSAGE) {    out.println(s);  }  BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));  login(username,password);  try {    loadSheet(reader);  } catch (  Exception e) {    e.printStackTrace();  }  while (executeCommand(reader)) {  }}  }
class C{  public void execDetails(int reqId,com.ib.client.Contract contractIB,Execution execution){  try {    TWSBrokerModel.logExecution(execution);    TradeOrder transientInstance=m_tradePersistentModel.findTradeOrderByKey(new Integer(Math.abs(execution.m_orderId)));    if (null == transientInstance) {      if (null == m_tradePersistentModel.findTradeOrderfillByExecId(execution.m_execId)) {        executionDetails.put(execution.m_execId,execution);      }      return;    }    if (transientInstance.existTradeOrderfill(execution.m_execId))     return;    TradeOrderfill tradeOrderfill=new TradeOrderfill();    TWSBrokerModel.populateTradeOrderfill(execution,tradeOrderfill);    tradeOrderfill.setTradeOrder(transientInstance);    transientInstance.addTradeOrderfill(tradeOrderfill);    transientInstance.setAverageFilledPrice(tradeOrderfill.getAveragePrice());    transientInstance.setFilledQuantity(tradeOrderfill.getCumulativeQuantity());    transientInstance.setFilledDate(tradeOrderfill.getTime());    boolean isFilled=transientInstance.getIsFilled();    transientInstance=m_tradePersistentModel.persistTradeOrderfill(transientInstance);    if (transientInstance.getIsFilled() && !isFilled)     this.fireTradeOrderFilled(transientInstance);    tradeOrdersExecutions.put(transientInstance.getOrderKey(),transientInstance);    _log.error("execDetails tradeOrdersExecutions reqId: " + reqId);  } catch (  Exception ex) {    error(reqId,3160,"Errors saving execution: " + ex.getMessage());  }}  }
class C{  public boolean hasString(){  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.272 -0500",hash_original_method="589849ECCDAFDA20BE0DBE1D9A436669",hash_generated_method="E3A560F8FEC6A0B6AED8F8CC16C5F534") public SupportedHeader createSupportedHeader(String optionTag) throws ParseException {  if (optionTag == null)   throw new NullPointerException("null optionTag arg");  Supported supported=new Supported();  supported.setOptionTag(optionTag);  return supported;}  }
class C{  private void scanNumber() throws IOException {  boolean seenNonOctal=false;  boolean overflow=false;  boolean seenDigit=false;  radix=(ch == '0' ? 8 : 10);  long value=ch - '0';  count=0;  putc(ch);  numberLoop:   for (; ; ) {switch (ch=in.read()) {case '.':      if (radix == 16)       break numberLoop;    scanReal();  return;case '8':case '9':seenNonOctal=true;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':seenDigit=true;putc(ch);if (radix == 10) {overflow=overflow || (value * 10) / 10 != value;value=(value * 10) + (ch - '0');overflow=overflow || (value - 1 < -1);} else if (radix == 8) {overflow=overflow || (value >>> 61) != 0;value=(value << 3) + (ch - '0');} else {overflow=overflow || (value >>> 60) != 0;value=(value << 4) + (ch - '0');}break;case 'd':case 'D':case 'e':case 'E':case 'f':case 'F':if (radix != 16) {scanReal();return;}case 'a':case 'A':case 'b':case 'B':case 'c':case 'C':seenDigit=true;putc(ch);if (radix != 16) break numberLoop;overflow=overflow || (value >>> 60) != 0;value=(value << 4) + 10 + Character.toLowerCase((char)ch) - 'a';break;case 'l':case 'L':ch=in.read();longValue=value;token=LONGVAL;break numberLoop;case 'x':case 'X':if (count == 1 && radix == 8) {radix=16;seenDigit=false;break;} else {break numberLoop;}default :intValue=(int)value;token=INTVAL;break numberLoop;}}if (Character.isJavaLetterOrDigit((char)ch) || ch == '.') {env.error(in.pos,"invalid.number");do {ch=in.read();} while (Character.isJavaLetterOrDigit((char)ch) || ch == '.');intValue=0;token=INTVAL;} else if (radix == 8 && seenNonOctal) {intValue=0;token=INTVAL;env.error(pos,"invalid.octal.number");} else if (radix == 16 && seenDigit == false) {intValue=0;token=INTVAL;env.error(pos,"invalid.hex.number");} else {if (token == INTVAL) {overflow=overflow || (value & 0xFFFFFFFF00000000L) != 0 || (radix == 10 && value > 2147483648L);if (overflow) {intValue=0;switch (radix) {case 8:env.error(pos,"overflow.int.oct");break;case 10:env.error(pos,"overflow.int.dec");break;case 16:env.error(pos,"overflow.int.hex");break;default :throw new CompilerError("invalid radix");}}} else {if (overflow) {longValue=0;switch (radix) {case 8:env.error(pos,"overflow.long.oct");break;case 10:env.error(pos,"overflow.long.dec");break;case 16:env.error(pos,"overflow.long.hex");break;default :throw new CompilerError("invalid radix");}}}}}  }
class C{  private static Entity addLessonsTable(Schema schema){  Entity lesson=schema.addEntity("LessonEntity");  lesson.setTableName("LESSONS");  lesson.addIdProperty().autoincrement();  lesson.addStringProperty("lessonName").notNull();  lesson.addBooleanProperty("userLesson").notNull();  lesson.addStringProperty("imagePath").notNull();  lesson.addBooleanProperty("bookmarked").notNull();  lesson.implementsSerializable();  return lesson;}  }
class C{  public boolean isConnected(){  return mService != null;}  }
class C{  public static void generateDefault(PrintWriter pw){  (new CacheXmlGenerator()).generate(pw);}  }
class C{  public void test_setSubjectPublicKeyLjava_security_PublicKey() throws Exception {  PublicKey pkey1=new TestKeyPair("RSA").getPublic();  PublicKey pkey2=new TestKeyPair("DSA").getPublic();  TestCert cert1=new TestCert(pkey1);  TestCert cert2=new TestCert(pkey2);  X509CertSelector selector=new X509CertSelector();  selector.setSubjectPublicKey((PublicKey)null);  assertTrue("Any certificate should match in the case of null " + "subjectPublicKey criteria.",selector.match(cert1) && selector.match(cert2));  selector.setSubjectPublicKey(pkey1);  assertTrue("The certificate should match the selection criteria.",selector.match(cert1));  assertFalse("The certificate should not match the selection criteria.",selector.match(cert2));  selector.setSubjectPublicKey(pkey2);  assertTrue("The certificate should match the selection criteria.",selector.match(cert2));}  }
class C{  private void processConsumersForInputs(Lop node,ArrayList<Instruction> inst,ArrayList<Instruction> delteInst) throws DMLRuntimeException {  for (  Lop in : node.getInputs()) {    if (DMLScript.ENABLE_DEBUG_MODE) {      processConsumers(in,inst,delteInst,node);    } else {      processConsumers(in,inst,delteInst,null);    }  }}  }
class C{  public CSearchMenu(final ZyGraph graph){  super("Search");  final ZyGraphSearchSettings settings=graph.getSettings().getSearchSettings();  setMnemonic("HK_MENU_SEARCH".charAt(0));  final JCheckBoxMenuItem searchVisibleMenu=new JCheckBoxMenuItem(new CActionSearchOnlyVisibleNodes(graph));  searchVisibleMenu.setSelected(settings.getSearchVisibleNodesOnly());  add(searchVisibleMenu);  final JCheckBoxMenuItem searchSelectedOnly=new JCheckBoxMenuItem(new CActionSearchOnlySelectedNodes(graph));  searchSelectedOnly.setSelected(settings.getSearchSelectedNodesOnly());  add(searchSelectedOnly);  final JCheckBoxMenuItem searchCaseSensitiveMenu=new JCheckBoxMenuItem(new CActionSearchCaseSensitive(graph));  searchCaseSensitiveMenu.setSelected(settings.getSearchCaseSensitive());  add(searchCaseSensitiveMenu);  final JCheckBoxMenuItem searchRegexMenu=new JCheckBoxMenuItem(new CActionSearchRegEx(graph));  searchRegexMenu.setSelected(settings.getSearchRegEx());  add(searchRegexMenu);}  }
class C{  public PathExtensionContentTypeResolver(){  super(null);}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public final boolean addAll(int index,Collection<? extends E> newElements){  throw new UnsupportedOperationException();}  }
class C{  public int groupCount(){  return re2.numberOfCapturingGroups();}  }
class C{  public PropertyChangeListenerProxy(String propertyName,PropertyChangeListener listener){  super(listener);  this.propertyName=propertyName;}  }
class C{  public void removeUser(User user){  users.remove(user);}  }
class C{  public static void streamContentToBrowser(HttpServletResponse response,byte[] bytes,String contentType,String fileName) throws IOException {  setResponseBrowserProxyNoCache(response);  response.setContentLength(bytes.length);  if (contentType != null) {    response.setContentType(contentType);  }  if (fileName != null) {    response.setHeader("Content-Disposition","attachment;filename=" + fileName);  }  OutputStream out=response.getOutputStream();  InputStream in=new ByteArrayInputStream(bytes);  try {    streamContent(out,in,bytes.length);  } catch (  IOException e) {    in.close();    out.close();    throw e;  }  in.close();  out.flush();  out.close();}  }
class C{  public void testRoundMathContextHALF_UP(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=45;  int precision=15;  RoundingMode rm=RoundingMode.HALF_UP;  MathContext mc=new MathContext(precision,rm);  String res="3736186567876.88";  int resScale=2;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal result=aNumber.round(mc);  assertEquals("incorrect quotient value",res,result.toString());  assertEquals("incorrect quotient scale",resScale,result.scale());}  }
class C{  public CommandLine add(String... args){  if (args != null && args.length > 0) {    Collections.addAll(arguments,args);  }  return this;}  }
class C{  private boolean checkClassName(PojoDescriptor pojo,String newVal,boolean key){  if (newVal.trim().isEmpty()) {    MessageBox.warningDialog(owner,(key ? "Key" : "Value") + " class name must be non empty!");    return false;  }  if (key) {    if (newVal.equals(pojo.valueClassName())) {      MessageBox.warningDialog(owner,"Key class name must be different from value class name!");      return false;    }  } else   if (newVal.equals(pojo.keyClassName())) {    MessageBox.warningDialog(owner,"Value class name must be different from key class name!");    return false;  }  return checkClassNameUnique(pojo,newVal,key);}  }
class C{  @Override public void addEntity(Entity entity){  getCube(Coords.getCubeYForEntity(entity)).addEntity(entity);}  }
class C{  public static boolean nullEquals(String s1,String s2){  return (s1 == null ? s2 == null : s1.equals(s2));}  }
class C{  public DriverTask createConsistencyGroupClone(VolumeConsistencyGroup consistencyGroup,List<VolumeClone> clones,List<CapabilityInstance> capabilities,DriverTask task,Registry driverRegistry){  _log.info("3PARDriver: createConsistencyGroupClone for storage system  id {}, Base CG name {} , Base CG native id {} - start",consistencyGroup.getStorageSystemId(),consistencyGroup.getDisplayName(),consistencyGroup.getNativeId());  String VVsetNameForClone=consistencyGroup.getDisplayName();  VolumeDetailsCommandResult volResult=null;  HashMap<String,VolumeClone> clonesMap=new HashMap<String,VolumeClone>();  try {    Boolean saveSnapshot=true;    HP3PARApi hp3parApi=hp3parUtil.getHP3PARDeviceFromNativeId(consistencyGroup.getStorageSystemId(),driverRegistry);    for (    VolumeClone clone : clones) {      _log.info("3PARDriver: createConsistencyGroupClone generated clone parent id {}, display name {} ",clone.getParentId(),clone.getDisplayName());      String generatedCloneName=clone.getDisplayName();      VVsetNameForClone=generatedCloneName.substring(0,generatedCloneName.lastIndexOf("-"));      _log.info("3PARDriver: createConsistencyGroupClone CG name {} to be used in cloning ",VVsetNameForClone);      clonesMap.put(clone.getParentId(),clone);    }    _log.info("3PARDriver: createConsistencyGroupClone  clonesMap {}",clonesMap.toString());    VVSetVolumeClone[] result=hp3parApi.createVVsetPhysicalCopy(consistencyGroup.getNativeId(),VVsetNameForClone,clones,saveSnapshot);    _log.info("3PARDriver: createConsistencyGroupClone outPut of CG clone result  {} ",result.toString());    for (    VVSetVolumeClone cloneCreated : result) {      VolumeClone clone=clonesMap.get(cloneCreated.getParent());      _log.info("createConsistencyGroupClone cloneCreated {} and local clone obj nativeid = {} , parent id = {}",cloneCreated.getValues(),clone.getNativeId(),clone.getParentId());      volResult=hp3parApi.getVolumeDetails(cloneCreated.getChild());      _log.info("createConsistencyGroupClone cloneCreated All values {} ",volResult.getAllValues());      clone.setWwn(volResult.getWwn());      clone.setNativeId(volResult.getId());      clone.setDeviceLabel(volResult.getName());      clone.setDisplayName(volResult.getName());      clone.setReplicationState(VolumeClone.ReplicationState.SYNCHRONIZED);      clone.setProvisionedCapacity(clone.getRequestedCapacity());      clone.setAllocatedCapacity(clone.getRequestedCapacity());    }    task.setStatus(DriverTask.TaskStatus.READY);    _log.info("createConsistencyGroupClone for storage system native id {}, CG display Name {}, CG native id {} - end",consistencyGroup.getStorageSystemId(),consistencyGroup.getDisplayName(),consistencyGroup.getNativeId());  } catch (  Exception e) {    String msg=String.format("3PARDriver: createConsistencyGroupClone Unable to create vv set snap name %s and its native id %s whose storage system  id is %s; Error: %s.\n",VVsetNameForClone,consistencyGroup.getNativeId(),consistencyGroup.getStorageSystemId(),e.getMessage());    _log.error(msg);    task.setMessage(msg);    task.setStatus(DriverTask.TaskStatus.PARTIALLY_FAILED);    e.printStackTrace();  }  return task;}  }
class C{  public void addObjectsToLocation(final Object[] objs,final int x,final int y){  if (objs == null)   return;  Bag[] fieldx=field[x];  if (fieldx[y] == null)   buildBag(fieldx,y);  fieldx[y].addAll(0,objs);}  }
class C{  public float applyBaitModifier(float f){  float result=f;  final ItemStack bait=baitInventory.getStackInSlot(0);  if (bait != null) {    final BaitHandle handle=FishTrapRegistry.instance().findBait(bait);    if (handle != null) {      result+=handle.baseRate;      result*=handle.multiplier;    }  }  return result;}  }
class C{  public static String replace(String text,String repl,String with){  return replace(text,repl,with,-1);}  }
class C{  private void makePanel(){  this.setLayout(new BorderLayout(0,ButtonDialog.GAP));  this.add(makeSettingsPanel(),BorderLayout.NORTH);  this.add(makePreviewTable(),BorderLayout.CENTER);  this.add(collapsibleErrorTable,BorderLayout.SOUTH);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.ANNOTABLE_SCRIPT_ELEMENT___GET_ANNOTATIONS:    return getAnnotations();}return super.eInvoke(operationID,arguments);}  }
class C{  @BeforeClass public static void beforeClass() throws Exception {  initCore("solr/collection1/conf/solrconfig.xml","solr/collection1/conf/schema-minimal.xml");  assertNull("UniqueKey Field isn't null",h.getCore().getLatestSchema().getUniqueKeyField());  lrf.args.put(CommonParams.VERSION,"2.2");  assertNull("Simple assertion that adding a document works",h.validateUpdate(adoc("id","4055","subject","Hoss","project","Solr")));  assertNull(h.validateUpdate(adoc("id","4056","subject","Yonik","project","Solr")));  assertNull(h.validateUpdate(commit()));  assertNull(h.validateUpdate(optimize()));}  }
class C{  public DBObject_Unique_Table(DBConnection parent,String name,int sequence){  super(parent,name,sequence);}  }
class C{  public ContinueStatement newContinueStatement(){  return new ContinueStatement(this);}  }
class C{  public void dispose(){  view=null;  viewWindow=null;}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true;  if (o == null || this.getClass() != o.getClass())   return false;  TextureAtlasElement that=(TextureAtlasElement)o;  return this.imageSource != null ? this.imageSource.equals(that.imageSource) : that.imageSource == null;}  }
class C{  protected Tokens.Comment processComment(int pos,int endPos,CommentStyle style){  if (scannerDebug)   System.out.println("processComment(" + pos + ","+ endPos+ ","+ style+ ")=|"+ new String(reader.getRawCharacters(pos,endPos))+ "|");  char[] buf=reader.getRawCharacters(pos,endPos);  return new BasicComment<UnicodeReader>(new UnicodeReader(fac,buf,buf.length),style);}  }
class C{  public SSLMicroNetworkModule(String host,int port){  this.uri="ssl://" + host + ":"+ port;}  }
class C{  public BusinessObjectDataAttributeDefinitionEntity createBusinessObjectDataAttributeDefinitionEntity(String namespaceCode,String businessObjectDefinitionName,String businessObjectFormatUsage,String businessObjectFormatFileType,Integer businessObjectFormatVersion,String businessObjectDataAttributeName){  BusinessObjectFormatEntity businessObjectFormatEntity=businessObjectFormatDao.getBusinessObjectFormatByAltKey(new BusinessObjectFormatKey(namespaceCode,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion));  if (businessObjectFormatEntity == null) {    businessObjectFormatEntity=createBusinessObjectFormatEntity(namespaceCode,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,AbstractDaoTest.FORMAT_DESCRIPTION,true,AbstractDaoTest.PARTITION_KEY);  }  return createBusinessObjectDataAttributeDefinitionEntity(businessObjectFormatEntity,businessObjectDataAttributeName,AbstractDaoTest.NO_PUBLISH_ATTRIBUTE);}  }
class C{  public boolean isSupportedLookAndFeel(){  return true;}  }
class C{  public CryptoException(String message){  super(message);}  }
class C{  protected void connected(Connection connection){  policy.setSelectedProxy(connection.getRoute().getProxy());  connected=true;}  }
class C{  private void putTag(final Tag tag){  if (tag == null)   return;  if (tag.isEmpty()) {    this.tags.remove(tag.getTagHash());  } else {    this.tags.put(tag.getTagHash(),tag);  }}  }
class C{  public static void decayDecayableObjects(){  decayEventCounter++;  AOSLogging.logger.decayingCounters();  for (  Decayable obj : decayObjects) {    obj.decay();  }}  }
class C{  public SetTriggeringResponse SetTriggering(RequestHeader RequestHeader,UnsignedInteger SubscriptionId,UnsignedInteger TriggeringItemId,UnsignedInteger[] LinksToAdd,UnsignedInteger... LinksToRemove) throws ServiceFaultException, ServiceResultException {  SetTriggeringRequest req=new SetTriggeringRequest(RequestHeader,SubscriptionId,TriggeringItemId,LinksToAdd,LinksToRemove);  return (SetTriggeringResponse)channel.serviceRequest(req);}  }
class C{  public static long min(long x,long y){  return (x < y) ? x : y;}  }
class C{  protected ContentNodeImpl(){  super();}  }
class C{  public void addPatterns(PatternList patternList){  if (patternList == null) {    return;  }  if (taxonList == null) {    taxonList=patternList;    patternLength=taxonList.getTaxonCount();  }  if (dataType == null) {    dataType=patternList.getDataType();  } else   if (dataType != patternList.getDataType()) {    throw new IllegalArgumentException("Patterns' existing DataType does not match that of added PatternList");  }  for (int i=0; i < patternList.getPatternCount(); i++) {    int[] pattern=patternList.getPattern(i);    if (!isInvariant(pattern) || (!isGapped(pattern) && !isAmbiguous(pattern) && !isUnknown(pattern))) {      addPattern(pattern,patternList.getPatternWeight(i));    }  }}  }
class C{  private boolean changeProxy(HttpHost hostTemp,String proxy){  try {    HttpHost host=URLUtils.getHost(proxy);    if (!http.verifyHost(host)) {      if (hostTemp != null) {        log.info("Proxy could not be validated, reverting to previous proxy setting on http client: " + hostTemp.toString());        client.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY,hostTemp);      }      throw new InvalidConfigException(TYPE.INVALID_PROXY,"admin.config.error.connectionRefused");    }    log.info("Proxy validated, updating the proxy setting on http client to: " + proxy);    client.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY,host);  } catch (  NumberFormatException e) {    if (hostTemp != null) {      log.info("NumberFormatException encountered, reverting to previous proxy setting on http client: " + hostTemp.toString());      client.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY,hostTemp);    }    throw new InvalidConfigException(TYPE.INVALID_PROXY,"admin.config.error.invalidPort");  }catch (  MalformedURLException e) {    if (hostTemp != null) {      log.info("MalformedURLException encountered, reverting to previous proxy setting on http client: " + hostTemp.toString());      client.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY,hostTemp);    }    throw new InvalidConfigException(TYPE.INVALID_PROXY,"admin.config.error.invalidProxyURL");  }  return true;}  }
class C{  Object replace(Object obj) throws IOException {  if (writeReplaceMtd != null) {    try {      return writeReplaceMtd.invoke(obj);    } catch (    IllegalAccessException|InvocationTargetException e) {      throw new IOException(e);    }  }  return obj;}  }
class C{  void listConstantPool(){  cp_info c;  int i;  for (i=1; i < constant_pool_count; i++) {    c=constant_pool[i];    G.v().out.println("[" + i + "] "+ c.typeName()+ "="+ c.toString(constant_pool));    if ((constant_pool[i]).tag == cp_info.CONSTANT_Long || (constant_pool[i]).tag == cp_info.CONSTANT_Double) {      i++;    }  }}  }
class C{  public Vset check(Environment env,Context ctx,Vset vset,Hashtable exp){  return checkValue(env,ctx,vset,exp);}  }
class C{  public boolean isPreclosed(){  return preclosed;}  }
class C{  private void writeChartToKmz(final String filename,final JFreeChart chart) throws IOException {  byte[] img;  img=ChartUtilities.encodeAsPNG(chart.createBufferedImage(CHARTWIDTH,CHARTHEIGHT));  this.writer.addNonKMLFile(img,filename);}  }
class C{  public R proceed(final T param){  return fn.apply(param);}  }
class C{  public static SolverPredefinedSetting findByName(String name){  List list=(new SolverPredefinedSettingDAO()).getSession().createCriteria(SolverPredefinedSetting.class).add(Restrictions.eq("name",name)).setCacheable(true).list();  if (list.isEmpty())   return null;  return (SolverPredefinedSetting)list.get(0);}  }
class C{  public String mapMethodName(String owner,String name,String desc){  Map<String,String> map=mapMethod.get(map(owner));  if (map != null) {    String data=map.get(name + mapDesc(desc));    if (data != null) {      return data;    }  }  return name;}  }
class C{  @Override public long skip(long n) throws IOException {  long length=Math.min(n,this.contentLength - this.pos);  length=this.wrappedStream.skip(length);  if (length > 0) {    this.pos+=length;  }  return length;}  }
class C{  public DSAPublicKeyImpl(BigInteger y,BigInteger p,BigInteger q,BigInteger g) throws InvalidKeyException {  super(y,p,q,g);}  }
class C{  public static void createMavenProject(IProject project,String withGwtSdkVersion) throws Exception {  IJavaProject javaProject=JavaCore.create(project);  IClasspathEntry[] entriesWithGwtContainer=javaProject.getRawClasspath();  IClasspathEntry[] entriesWithOutGwtContainer=new IClasspathEntry[entriesWithGwtContainer.length - 1];  int b=0;  for (int a=0; a < entriesWithGwtContainer.length; a++) {    String path=entriesWithGwtContainer[a].getPath().toString();    if (!path.contains(GWTRuntimeContainer.CONTAINER_ID)) {      entriesWithOutGwtContainer[b]=entriesWithGwtContainer[a];      b++;    }  }  javaProject.setRawClasspath(entriesWithOutGwtContainer,new NullProgressMonitor());  JobsUtilities.waitForIdle();  URL url=GwtTestingPlugin.getDefault().getBundle().getResource("resources/pom.xml");  InputStream pomxmlStream=url.openStream();  pomxmlStream=changeGwtSdkVersionInPom(pomxmlStream,withGwtSdkVersion);  ResourceUtils.createFile(project.getFullPath().append("pom.xml"),pomxmlStream);  NatureUtils.addNature(project,MAVEN2_NATURE_ID);  JobsUtilities.waitForIdle();  IProjectConfigurationManager projectConfig=MavenPlugin.getProjectConfigurationManager();  projectConfig.updateProjectConfiguration(project,new NullProgressMonitor());  JobsUtilities.waitForIdle();}  }
class C{  public static void fill(double[] array,int start,int end,double value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  protected int retrieveRightBraceOrSemiColonPosition(int start,int end){  this.scanner.resetTo(start,end);  try {    int token;    while ((token=this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {switch (token) {case TerminalTokens.TokenNameRBRACE:        return this.scanner.currentPosition - 1;case TerminalTokens.TokenNameSEMICOLON:      return this.scanner.currentPosition - 1;  }}} catch (InvalidInputException e) {}return -1;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public boolean onUpdateAnimation(long time,boolean jumpToEnd){  boolean finished=true;  if (mLayoutAnimations != null) {    if (jumpToEnd) {      finished=mLayoutAnimations.finished();      mLayoutAnimations.updateAndFinish();    } else {      finished=mLayoutAnimations.update(time);    }    if (finished || jumpToEnd) {      mLayoutAnimations=null;      onAnimationFinished();    }    requestUpdate();  }  return finished;}  }
class C{  void go(){  if (handler instanceof AsyncDocumentRequestHandler) {    DocumentInfo docInfo=cssDocInfo != null ? cssDocInfo : new DocumentInfo(imageUrl,DocumentInfo.TYPE_IMAGE);    ((AsyncDocumentRequestHandler)handler).resourceRequestedAsync(docInfo,this);  } else {    Display.getInstance().startThread(this,"HTML Resources").start();  }}  }
class C{  @Override public Element store(Object o){  Element e=new Element("console");  e.setAttribute("class",this.getClass().getName());  SystemConsolePreferencesManager manager=InstanceManager.getDefault(SystemConsolePreferencesManager.class);  e.setAttribute("scheme","" + manager.getScheme());  e.setAttribute("fontfamily","" + manager.getFontFamily());  e.setAttribute("fontsize","" + manager.getFontSize());  e.setAttribute("fontstyle","" + manager.getFontStyle());  e.setAttribute("wrapstyle","" + manager.getWrapStyle());  return e;}  }
class C{  synchronized void inc(String name){  ClassLoaderBox box=(ClassLoaderBox)loaders.get(name);  if (box != null)   box.users++;}  }
class C{  @Override public void reset(){  super.reset();  stringReferences.clear();}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void merge(final AccountInfoCache other){  assert this != EMPTY;  accounts.putAll(other.accounts);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:03.289 -0500",hash_original_method="CFCAD341235F37A4BB7DBC5A0D66ECE2",hash_generated_method="F3F38ABC98AD185F1F455D50033A29E3") public int receiveFile(String filename,int mode,OutputStream output,InetAddress host) throws IOException {  return receiveFile(filename,mode,output,host,DEFAULT_PORT);}  }
class C{  public static String buildSdpOfferWithoutOrientation(VideoCodec[] supportedCodecs,int localRtpPort){  List<VideoCodec> codecs=new ArrayList<VideoCodec>(Arrays.asList(supportedCodecs));  StringBuilder result=new StringBuilder("m=video ").append(localRtpPort).append(" RTP/AVP");  for (  VideoCodec codec : codecs) {    result.append(" ").append(codec.getPayloadType());  }  result.append(SipUtils.CRLF);  int framerate=0;  for (  VideoCodec codec : codecs) {    int codeFrameRate=codec.getFrameRate();    if (codeFrameRate > framerate) {      framerate=codeFrameRate;    }  }  if (framerate > 0) {    result.append("a=framerate:").append(framerate).append(SipUtils.CRLF);  }  for (  VideoCodec codec : codecs) {    int payloadType=codec.getPayloadType();    result.append("a=rtpmap:").append(payloadType).append(" ").append(codec.getEncoding()).append("/").append(codec.getClockRate()).append(SipUtils.CRLF);    int width=codec.getWidth();    int height=codec.getHeight();    if (width != 0 && height != 0) {      result.append("a=framesize:").append(payloadType).append(" ").append(width).append("-").append(height).append(SipUtils.CRLF);    }    result.append("a=fmtp:").append(payloadType).append(" ").append(codec.getParameters()).append(SipUtils.CRLF);  }  return result.toString();}  }
class C{  protected double toScreenDouble(int xOrY){  Dimension sz=getSize();  int min=getMinimum();  double scale;  if (orientation == VERTICAL) {    scale=(sz.height - (2 * ARROW_SZ)) / (double)(getMaximum() + 1 - min);  } else {    scale=(sz.width - (2 * ARROW_SZ)) / (double)(getMaximum() + 1 - min);  }  if (direction == LEFTRIGHT_TOPBOTTOM) {    return ARROW_SZ + ((xOrY - min) * scale);  } else {    if (orientation == VERTICAL) {      return sz.height - (xOrY - min) * scale - ARROW_SZ;    } else {      return sz.width - (xOrY - min) * scale - ARROW_SZ;    }  }}  }
class C{  public void addFileset(FileSet fs){  filesets.add(fs);}  }
class C{  public OMRaster(double lt,double ln,int offset_x1,int offset_y1,int w,int h,byte[] bytes,Color[] colorTable,int trans){  super(RENDERTYPE_OFFSET,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);  setColorModel(COLORMODEL_INDEXED);  lat=lt;  lon=ln;  x=offset_x1;  y=offset_y1;  width=w;  height=h;  transparent=trans;  bits=bytes;  if (colorTable != null) {    setColors(colorTable);  }  if (bits != null && bits.length != 0) {    if (colorTable != null && colors.length != 0) {      pixels=computePixels(bits);    }  } else {    bits=new byte[height * width];  }}  }
class C{  public boolean hasPort(){  return (getSentBy()).hasPort();}  }
class C{  private void clearOutput(){  if (currentOutput != null) {    out.println();  }  currentOutput=null;}  }
class C{  public static Object invoke(Object obj,String methodName) throws NoSuchMethodException {  try {    Method method=obj.getClass().getMethod(methodName,new Class[0]);    Object result=method.invoke(obj,new Object[0]);    return result;  } catch (  IllegalAccessException e) {    throw new NoSuchMethodException(methodName + " is not accessible");  }catch (  InvocationTargetException e) {    throw new InternalError(e.getMessage());  }}  }
class C{  protected double calculatePairwiseDistance(int taxon1,int taxon2){  int state1, state2;  int n=patterns.getPatternCount();  double weight, distance;  double sumDistance=0.0;  double sumWeight=0.0;  int[] pattern;  for (int i=0; i < n; i++) {    pattern=patterns.getPattern(i);    state1=pattern[taxon1];    state2=pattern[taxon2];    weight=patterns.getPatternWeight(i);    if (!dataType.isAmbiguousState(state1) && !dataType.isAmbiguousState(state2) && state1 != state2) {      sumDistance+=weight;    }    sumWeight+=weight;  }  distance=sumDistance / sumWeight;  return distance;}  }
class C{  public boolean isDeep(){  return deep;}  }
class C{  public VerticalLayout(int vgap){  this(vgap,CENTER,TOP);}  }
class C{  public Abstract_ createAbstract_(){  Abstract_Impl abstract_=new Abstract_Impl();  return abstract_;}  }
class C{  public boolean closed(){  return (this.closed);}  }
class C{  public void XXXtestEncodeInternal() throws Exception {  byte[] input={(byte)0x61,(byte)0x62,(byte)0x63};  byte[] output=new byte[100];  Base64.Encoder encoder=new Base64.Encoder(Base64.NO_PADDING | Base64.NO_WRAP,output);  encoder.process(input,0,3,false);  assertEquals("YWJj".getBytes(),4,encoder.output,encoder.op);  assertEquals(0,encoder.tailLen);  encoder.process(input,0,3,false);  assertEquals("YWJj".getBytes(),4,encoder.output,encoder.op);  assertEquals(0,encoder.tailLen);  encoder.process(input,0,1,false);  assertEquals(0,encoder.op);  assertEquals(1,encoder.tailLen);  encoder.process(input,0,1,false);  assertEquals(0,encoder.op);  assertEquals(2,encoder.tailLen);  encoder.process(input,0,1,false);  assertEquals("YWFh".getBytes(),4,encoder.output,encoder.op);  assertEquals(0,encoder.tailLen);  encoder.process(input,0,2,false);  assertEquals(0,encoder.op);  assertEquals(2,encoder.tailLen);  encoder.process(input,0,2,false);  assertEquals("YWJh".getBytes(),4,encoder.output,encoder.op);  assertEquals(1,encoder.tailLen);  encoder.process(input,0,2,false);  assertEquals("YmFi".getBytes(),4,encoder.output,encoder.op);  assertEquals(0,encoder.tailLen);  encoder.process(input,0,1,true);  assertEquals("YQ".getBytes(),2,encoder.output,encoder.op);}  }
class C{  public MyFunctionExecutionException(String msg){  super(msg);}  }
class C{  public void start(){  runner=new Thread(this,getShellName());  runner.start();}  }
class C{  public void flush(){  lock.readLock().lock();  try {    map.clear();  }  finally {    lock.readLock().unlock();  }}  }
class C{  public boolean isEnum(){  return false;}  }
class C{  public SSLContext select(InetSocketAddress target){  if (sslContext == null) {    throw new NullPointerException("sslContext is null!");  }  return sslContext;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  private String generateFilename(final long timestamp){  return "V1_log" + timestamp + "-wifi.xml";}  }
class C{  public Cleanup(final ExecutorDriver driver,final CassandraDaemonProcess daemon,final CleanupTask task){  this.driver=driver;  this.daemon=daemon;  this.task=task;}  }
class C{  Object addMarkedOccurrenceHighlight(int start,int end,MarkOccurrencesHighlightPainter p) throws BadLocationException {  Document doc=textArea.getDocument();  TextUI mapper=textArea.getUI();  HighlightInfo i=new LayeredHighlightInfo();  i.painter=p;  i.p0=doc.createPosition(start);  i.p1=doc.createPosition(end - 1);  markedOccurrences.add(i);  mapper.damageRange(textArea,start,end);  return i;}  }
class C{  @Override public String[] punctuationTags(){  return tags;}  }
class C{  private File createZipFile(int entryCount,int entrySize) throws IOException {  File result=createTemporaryZipFile();  byte[] writeBuffer=new byte[8192];  Random random=new Random();  ZipOutputStream out=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(result)));  for (int entry=0; entry < entryCount; ++entry) {    ZipEntry ze=new ZipEntry(Integer.toHexString(entry));    out.putNextEntry(ze);    for (int i=0; i < entrySize; i+=writeBuffer.length) {      random.nextBytes(writeBuffer);      int byteCount=Math.min(writeBuffer.length,entrySize - i);      out.write(writeBuffer,0,byteCount);    }    out.closeEntry();  }  out.close();  return result;}  }
class C{  Principal invokeAuthenticator(Properties securityProps,DistributedMember member,Properties credentials) throws AuthenticationFailedException {  String authMethod=securityProps.getProperty(SECURITY_PEER_AUTHENTICATOR);  org.apache.geode.security.Authenticator auth=null;  try {    auth=SecurityService.getObjectOfType(authMethod,org.apache.geode.security.Authenticator.class);    LogWriter logWriter=this.services.getLogWriter();    LogWriter securityLogWriter=this.services.getSecurityLogWriter();    auth.init(this.securityProps,logWriter,securityLogWriter);    return auth.authenticate(credentials,member);  } catch (  GemFireSecurityException gse) {    throw gse;  }catch (  Exception ex) {    throw new AuthenticationFailedException(HandShake_FAILED_TO_ACQUIRE_AUTHENTICATOR_OBJECT.toLocalizedString(),ex);  } finally {    if (auth != null)     auth.close();  }}  }
class C{  public DOMSource(Node n){  setNode(n);}  }
class C{  @Override public void processEvent(World world){  DTNHost to=world.getNodeByAddress(this.toAddr);  DTNHost from=world.getNodeByAddress(this.fromAddr);  Message m=new Message(from,to,this.id,this.size);  m.setResponseSize(this.responseSize);  from.createNewMessage(m);}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,final Intent data){  if (resultCode == Activity.RESULT_OK && requestCode == PICK_CONTACT_REQUEST)   displayMap(data);  animateAddFab(true);}  }
class C{  private static int countEchoBreakpoints(final BreakpointManager manager,final ZyGraph graph){  final BreakpointableNodeCounter ebc=new BreakpointableNodeCounter(manager);  NodeBreakpointIterator.iterate(graph,ebc);  return ebc.getCount();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public String toString(){  return value;}  }
class C{  public static Method findInstanceMethod(Class<?> type,String name,Class<?>... args) throws NoSuchMethodException {  Method method=findMethod(type,name,args);  if (Modifier.isStatic(method.getModifiers())) {    throw new NoSuchMethodException("Method '" + name + "' is static");  }  return method;}  }
class C{  public AsyncResult CloseSessionAsync(CloseSessionRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  protected Key engineUnwrap(byte[] wrappedKey,String wrappedKeyAlgorithm,int wrappedKeyType) throws InvalidKeyException, NoSuchAlgorithmException {  return core.unwrap(wrappedKey,wrappedKeyAlgorithm,wrappedKeyType);}  }
class C{  public void compare(Network network,int lanes,double threshold){  log.info("Comparing the " + compareField + " field of the two files.");  int comparisonCounter=0;  int counter=0;  int multiplier=1;  try {    BufferedReader br1=IOUtils.getBufferedReader(baselineFile.getAbsolutePath());    BufferedReader br2=IOUtils.getBufferedReader(compareFile.getAbsolutePath());    try {      String line1=br1.readLine();      String line2=br2.readLine();      while ((line1=br1.readLine()) != null && (line2=br2.readLine()) != null) {        String[] sa1=line1.split("\t");        String[] sa2=line2.split("\t");        if (!sa1[0].equalsIgnoreCase(sa2[0])) {          log.error("Two line entries do not have the same link Id.");        }        if (lanes > 1) {          if (network.getLinks().get(Id.create(sa1[0],Link.class)).getNumberOfLanes() >= lanes) {            comparisonCounter++;            double baseValue=Double.parseDouble(sa1[baselineIndex]);            double compareValue=Double.parseDouble(sa2[compareIndex]);            double difference=(compareValue - baseValue) / baseValue;            if (Math.abs(difference) > threshold) {              differenceMap.put(Id.create(sa1[0],Link.class),difference);            }          }        } else {          comparisonCounter++;          double baseValue=Double.parseDouble(sa1[baselineIndex]);          double compareValue=Double.parseDouble(sa2[compareIndex]);          double difference=(compareValue - baseValue) / baseValue;          if (Math.abs(difference) > threshold) {            differenceMap.put(Id.create(sa1[0],Link.class),difference);          }        }        if (++counter == multiplier) {          log.info("   lines: " + counter);          multiplier*=2;        }      }      log.info("   lines: " + counter + " (Done)");    }  finally {      br1.close();      br2.close();    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  log.info("Of the " + network.getLinks().size() + " links, "+ comparisonCounter+ " were compared (had "+ lanes+ " lanes or more).");  log.info(differenceMap.size() + " links exceeded the difference threshold of " + threshold);}  }
class C{  public FirewireBroadcastCaptureDevice(){  super();}  }
class C{  public ZookeeperConfigProvider(CuratorFramework client,String serviceName) throws Exception {  initProvider(client,serviceName);}  }
class C{  public static boolean checkIfLeftExpressionRequireEvaluation(Expression expression){  if (expression.getFilterExpressionType() == ExpressionType.UNKNOWN || !(expression instanceof ColumnExpression)) {    return true;  }  for (  Expression child : expression.getChildren()) {    if (checkIfLeftExpressionRequireEvaluation(child)) {      return true;    }  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String imageType=getString(stack);  Show s=getShow(stack);  if (s == null)   return new Integer(0);  if (imageType == null || imageType.length() == 0)   return s.hasAnyImages() ? new Integer(1) : new Integer(0);  int imageNumType=0;  if ("PhotoTall".equalsIgnoreCase(imageType))   imageNumType=Show.IMAGE_PHOTO_TALL; else   if ("PhotoWide".equalsIgnoreCase(imageType))   imageNumType=Show.IMAGE_PHOTO_WIDE; else   if ("PosterWide".equalsIgnoreCase(imageType))   imageNumType=Show.IMAGE_POSTER_WIDE; else   if ("PosterTall".equalsIgnoreCase(imageType))   imageNumType=Show.IMAGE_POSTER_TALL; else   if ("PhotoThumbTall".equalsIgnoreCase(imageType))   imageNumType=Show.IMAGE_PHOTO_THUMB_TALL; else   if ("PhotoThumbWide".equalsIgnoreCase(imageType))   imageNumType=Show.IMAGE_PHOTO_THUMB_WIDE; else   if ("PosterThumbWide".equalsIgnoreCase(imageType))   imageNumType=Show.IMAGE_POSTER_THUMB_WIDE; else   if ("PosterThumbTall".equalsIgnoreCase(imageType))   imageNumType=Show.IMAGE_POSTER_THUMB_TALL;  if (imageNumType == 0)   return new Integer(0);  return new Integer(s.getImageCount(imageNumType));}  }
class C{  public JulianDate add(int units,int amount){  JulianDate date=null;synchronized (gc) {    gc.setTime(getJavaDate());    gc.add(units,amount);    date=new JulianDate(gc.getTime());  }  return date;}  }
class C{  @Override protected void onStarted(final Player player){  player.sendPrivateText("You have started to pick for coal.");  addEvent(new SoundEvent(startSound,SOUND_RADIUS,100,SoundLayer.AMBIENT_SOUND));  notifyWorldAboutChanges();}  }
class C{  public PlayerLootedNumberOfItemsCondition(int number,String... item){  this.number=number;  items=new LinkedList<String>();  if (item != null) {    for (    String string : item) {      items.add(string);    }  }}  }
class C{  @Override public String toString(){  if (this.root == null) {    return "null";  }  return this.root.printTree();}  }
class C{  public static void printTag(PrintStream out,Hashtable atts){  out.print("<applet");  String v=(String)atts.get("codebase");  if (v != null) {    out.print(" codebase=\"" + v + "\"");  }  v=(String)atts.get("code");  if (v == null) {    v="applet.class";  }  out.print(" code=\"" + v + "\"");  v=(String)atts.get("width");  if (v == null) {    v="150";  }  out.print(" width=" + v);  v=(String)atts.get("height");  if (v == null) {    v="100";  }  out.print(" height=" + v);  v=(String)atts.get("name");  if (v != null) {    out.print(" name=\"" + v + "\"");  }  out.println(">");  int len=atts.size();  String params[]=new String[len];  len=0;  for (Enumeration e=atts.keys(); e.hasMoreElements(); ) {    String param=(String)e.nextElement();    int i=0;    for (; i < len; i++) {      if (params[i].compareTo(param) >= 0) {        break;      }    }    System.arraycopy(params,i,params,i + 1,len - i);    params[i]=param;    len++;  }  for (int i=0; i < len; i++) {    String param=params[i];    if (systemParam.get(param) == null) {      out.println("<param name=" + param + " value=\""+ atts.get(param)+ "\">");    }  }  out.println("</applet>");}  }
class C{  @LogMessageDoc(level="ERROR",message="Tried to write to switch {switch} but got {error}",explanation="An I/O error occured while trying to write a " + "static flow to a switch",recommendation=LogMessageDoc.CHECK_SWITCH) private void writeOFMessageToSwitch(long dpid,OFMessage message){  IOFSwitch ofswitch=floodlightProvider.getSwitch(dpid);  if (ofswitch != null) {    try {      if (log.isDebugEnabled()) {        log.debug("Sending 1 new entries to {}",HexString.toHexString(dpid));      }      ofswitch.write(message,null);      ofswitch.flush();    } catch (    IOException e) {      log.error("Tried to write to switch {} but got {}",dpid,e.getMessage());    }  }}  }
class C{  public static float overshoot(float x,float min,float max,float unit){  if (x > max) {    float amount=(x - max) / unit;    float adjusted=amount / (amount + 1);    return adjusted * unit + max;  } else   if (x < min) {    float amount=(min - x) / unit;    float adjusted=amount / (amount + 1);    return min - adjusted * unit;  } else {    return x;  }}  }
class C{  public BoolStack(int size){  m_allocatedSize=size;  m_values=new boolean[size];  m_index=-1;}  }
class C{  public void drawBezierCurve(Canvas canvas,Paint paint){  mPath.reset();  mPath.moveTo(mP1.x,mP1.y);  mPath.quadTo(mCP1.x,mCP1.y,mP2.x,mP2.y);  mPath.lineTo(mP4.x,mP4.y);  mPath.quadTo(mCP2.x,mCP2.y,mP3.x,mP3.y);  mPath.lineTo(mP1.x,mP1.y);  mPath.close();  canvas.drawPath(mPath,paint);}  }
class C{  @Override public void writeJSONString(Writer out) throws IOException {  writeJSONString(this,out);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  static public void assertTrue(boolean condition){  assertTrue(null,condition);}  }
class C{  private void runTask(Task task){  if (PerforceTask.equalsIgnoreCase(task.getTaskName())) {    long time=System.currentTimeMillis();    copyDirectory(new File(perforceBase + perforceWWW),new File(wampWWW + "/RServer"),true);    log("Updated web directory: " + (System.currentTimeMillis() - time) + " ms");  }  updateJobStatus(task.getJobId(),"Running",null);  try {    task.setOutcome(PerforceTask.equalsIgnoreCase(task.getTaskName()) ? "" : "Failure");    File taskDir=new File(scriptPath + task.getTaskName());    File sourceDir=new File(perforceBase + task.getPerforcePath().replace("//","/"));    if (taskDir.exists() && sourceDir.exists()) {      int result=0;      if (isLinux) {        String command="R CMD BATCH " + (task.getParameters().length() > 0 ? "\"--args " + task.getParameters() + "\" " : "") + task.getrScript();        ProcessBuilder pb=new ProcessBuilder("bash","-c",command);        pb.directory(new File(taskDir.getAbsolutePath()));        Process process=pb.start();        try {          Field f=process.getClass().getDeclaredField("pid");          f.setAccessible(true);          task.setPID((int)f.get(process));        } catch (        Exception e) {          log("ERROR: unable to get PID for task: " + e.getMessage());        }        result=process.waitFor();      } else {        File batchFile=new File(taskDir.getPath() + "/run.bat");        BufferedWriter writer=new BufferedWriter(new FileWriter(batchFile));        writer.write("cd \"" + taskDir.getAbsolutePath() + "\"\n");        log("Running R Script: " + task.getTaskName());        writer.write("\"" + rPath + "\"R CMD BATCH "+ (task.getParameters().length() > 0 ? "\"--args " + task.getParameters() + "\" " : "")+ task.getrScript()+ "\n");        writer.close();        Process process=new ProcessBuilder(batchFile.getAbsolutePath()).start();        result=process.waitFor();      }      boolean errorInScipt=false;      StringBuffer output=new StringBuffer();      File resultsFile=new File(taskDir.getPath() + "/" + task.getrScript()+ ".Rout");      if (!resultsFile.exists()) {        resultsFile=new File(taskDir.getPath() + "/" + task.getrScript().split("\\.")[0]+ ".Rout");      }      if (resultsFile.exists()) {        BufferedReader reader=new BufferedReader(new FileReader(resultsFile));        String line=reader.readLine();        while (line != null) {          if (line.startsWith("Execution halted")) {            errorInScipt=true;          }          output.append(line + "\n");          line=reader.readLine();        }        reader.close();      }      Calendar today=Calendar.getInstance();      String outputDir="output_" + today.get(Calendar.YEAR) + "-"+ (today.get(Calendar.MONTH) + 1)+ "-"+ today.get(Calendar.DAY_OF_MONTH);      if (new File(routDir + outputDir).exists() == false) {        new File(routDir + outputDir).mkdir();      }      task.setRout(outputDir + "/" + task.getTaskName()+ "_"+ System.currentTimeMillis() % 100000 + ".Rout");      File outputFile=new File(routDir + task.getRout());      BufferedWriter outputWriter=new BufferedWriter(new FileWriter(outputFile));      outputWriter.write(output.toString());      outputWriter.close();      if (isLinux) {        Runtime.getRuntime().exec("sudo chmod 0777 " + outputFile).waitFor();      }      if (task.getAborted()) {        task.setOutcome("Terminated");        log("R Script was aborted: " + task.getTaskName());      } else       if (result > 0 || !resultsFile.exists()) {        if (errorInScipt) {          log("ERROR: R Script failed during execution: " + task.getTaskName());        } else {          log("ERROR: Unable to run R Script: " + task.getTaskName());        }        String url="http://" + fullHostName + "/RServer/Rout/"+ task.getRout();        sendEmail(task.getOwner(),"R Script Failed: " + task.getTaskName(),"The R Script failed: " + task.getTaskName() + "\n"+ "Link to Rout file: "+ url+ "\n\n"+ "Output from R Script:\n"+ output.toString());      } else {        task.setOutcome("Success");        log("R Script completed successfully: " + task.getTaskName());        if (task.getEmailOnSuccess()) {          String url="http://" + fullHostName + "/RServer/Rout/"+ task.getRout();          sendEmail(task.getOwner(),"R Script completed: " + task.getTaskName(),"The R Script completed successfully: " + task.getrScript() + "\n\n"+ "Link to Rout file: "+ url);        }      }    }  } catch (  Exception e) {    log("ERROR: running script: " + e.getMessage());    sendEmail(task.getOwner(),"R Script Failed: " + task.getTaskName(),"The R Script failed to complete: " + task.getTaskName() + "\n\n"+ e.getMessage()+ "\n"+ e);    sendEmail(serverAdmin,"R Script Failed: " + task.getTaskName(),"The R Script failed to complete: " + task.getTaskName() + "\n\n"+ e.getMessage()+ "\n"+ e);  }synchronized (RServer.this) {    runningTasks.remove(task.getTaskName());    task.setEndTime(System.currentTimeMillis());    completed.add(0,task);    if (completed.size() > completedTaskSize) {      completed.remove(completedTaskSize);    }  }  updateJobStatus(task.getJobId(),task.getOutcome(),task.getRout() != null ? "Rout/" + task.getRout() : "");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static FXMLLoader createFxmlLoaderForProjectFile(final String localFxmlFile){  return createFxmlLoader(parentClass,ResourcePaths.FXML_PATH + localFxmlFile);}  }
class C{  public void animateLayout(final int duration){  animateLayout(duration,false,255,true);}  }
class C{  private void addAllItems(CnATreeElement parent){  items.add(parent);  for (  CnATreeElement child : parent.getChildren()) {    addAllItems(child);  }}  }
class C{  public void append(char[] value){  text.append(value,0,value.length);}  }
class C{  public static org.oscm.vo.VORoleDefinition convertToApi(org.oscm.internal.vo.VORoleDefinition oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VORoleDefinition newVO=new org.oscm.vo.VORoleDefinition();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setRoleId(oldVO.getRoleId());  newVO.setName(oldVO.getName());  newVO.setDescription(oldVO.getDescription());  return newVO;}  }
class C{  private RankedSpellPossibility internalNext(){  if (nextOnes != null && nextOnes.hasNext()) {    RankedSpellPossibility rsl=new RankedSpellPossibility();    rsl.corrections=nextOnes.next();    rsl.rank=nextOnesRank;    rsl.index=nextOnesIndex++;    return rsl;  }  if (done) {    throw new NoSuchElementException();  }  internalNextAdvance();  if (nextOnes != null && nextOnes.hasNext()) {    RankedSpellPossibility rsl=new RankedSpellPossibility();    rsl.corrections=nextOnes.next();    rsl.rank=nextOnesRank;    rsl.index=nextOnesIndex++;    return rsl;  }  throw new NoSuchElementException();}  }
class C{  private void addUserToken(Map<String,Set<String>> userLinktoTokenMap,String userServiceLink,String token){  Set<String> tokenSet=userLinktoTokenMap.get(userServiceLink);  if (tokenSet == null) {    tokenSet=new HashSet<String>();  }  tokenSet.add(token);  userLinktoTokenMap.put(userServiceLink,tokenSet);}  }
class C{  public OpenIntObjectHashMap(){  this(defaultCapacity);}  }
class C{  protected void reportProgress(){  String[] messages=ToolIO.getAllMessages();  for (; reported < messages.length; reported++) {    System.out.println(messages[reported]);  }}  }
class C{  public boolean hasName(){  return super.hasAttribute(NAME);}  }
class C{  public Tasks<BlockSnapshotSessionRestRep> relinkTargets(URI snapshotSessionId,SnapshotSessionRelinkTargetsParam relinkTargetsParam){  return postTasks(relinkTargetsParam,getIdUrl() + "/relink-targets",snapshotSessionId);}  }
class C{  public static OutputAnalyzer executeCommand(String... cmds) throws Throwable {  String cmdLine=Arrays.stream(cmds).collect(Collectors.joining(" "));  System.out.println("Command line: [" + cmdLine + "]");  OutputAnalyzer analyzer=ProcessTools.executeProcess(cmds);  System.out.println(analyzer.getOutput());  return analyzer;}  }
class C{  public LocalDate extractLocalDateAsArrayNamed(final String parameterName,final JsonElement element,final Set<String> parametersPassedInCommand){  LocalDate value=null;  if (element.isJsonObject()) {    final JsonObject object=element.getAsJsonObject();    if (object.has(parameterName) && object.get(parameterName).isJsonArray()) {      parametersPassedInCommand.add(parameterName);      final JsonArray dateArray=object.get(parameterName).getAsJsonArray();      final Integer year=dateArray.get(0).getAsInt();      final Integer month=dateArray.get(1).getAsInt();      final Integer day=dateArray.get(2).getAsInt();      value=new LocalDate().withYearOfEra(year).withMonthOfYear(month).withDayOfMonth(day);    }  }  return value;}  }
class C{  public void start() throws Exception {  m_numOfSamplesPerGenerator=(int)Math.pow(m_samplesBase,m_trainingData.numAttributes() - 3);  m_stopReplotting=true;  if (m_trainingData == null) {    throw new Exception("No training data set (BoundaryPanel)");  }  if (m_classifier == null) {    throw new Exception("No classifier set (BoundaryPanel)");  }  if (m_dataGenerator == null) {    throw new Exception("No data generator set (BoundaryPanel)");  }  if (m_trainingData.attribute(m_xAttribute).isNominal() || m_trainingData.attribute(m_yAttribute).isNominal()) {    throw new Exception("Visualization dimensions must be numeric " + "(BoundaryPanel)");  }  computeMinMaxAtts();  startPlotThread();}  }
class C{  public Polyline2D(int[] xpoints,int[] ypoints,int npoints){  if (npoints > xpoints.length || npoints > ypoints.length) {    throw new IndexOutOfBoundsException("npoints > xpoints.length || npoints > ypoints.length");  }  this.npoints=npoints;  this.xpoints=new float[npoints];  this.ypoints=new float[npoints];  for (int i=0; i < npoints; i++) {    this.xpoints[i]=xpoints[i];    this.ypoints[i]=ypoints[i];  }  calculatePath();}  }
class C{  public DrawerBuilder withRootView(@IdRes int rootViewRes){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  return withRootView((ViewGroup)mActivity.findViewById(rootViewRes));}  }
class C{  public InputVenueMessageContent.InputVenueMessageContentBuilder foursquareId(String foursquareId){  this.foursquare_id=foursquareId;  return this;}  }
class C{  @DSComment("not sensitive") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:34.197 -0500",hash_original_method="8C5F759C4AF4AEC08D993539B9258E9A",hash_generated_method="B47E30D69F5477AD7A446E48D70712A0") public static boolean hasProfile(int quality){  int numberOfCameras=Camera.getNumberOfCameras();  CameraInfo cameraInfo=new CameraInfo();  for (int i=0; i < numberOfCameras; i++) {    Camera.getCameraInfo(i,cameraInfo);    if (cameraInfo.facing == CameraInfo.CAMERA_FACING_BACK) {      return hasProfile(i,quality);    }  }  return false;}  }
class C{  public static boolean isEmpty(boolean[] array){  return array == null || array.length == 0;}  }
class C{  public Future<SyncReply> sendRequest(int xid,SyncMessage request) throws RemoteStoreException {  ensureConnected();  RemoteSyncFuture future=new RemoteSyncFuture(xid,connectionGeneration);  futureMap.put(Integer.valueOf(xid),future);  if (futureMap.size() > MAX_PENDING_REQUESTS) {synchronized (futureNotify) {      while (futureMap.size() > MAX_PENDING_REQUESTS) {        try {          futureNotify.wait();        } catch (        InterruptedException e) {          throw new RemoteStoreException("Could not send request",e);        }      }    }  }  channel.writeAndFlush(request);  return future;}  }
class C{  public void exit(Context context){  exit(context,true);}  }
class C{  private MailContent tag(String tag){  ends.push("</" + tag + ">");  html.a('<').a(tag).a('>');  return this;}  }
class C{  private synchronized void handleServiceConnectionError(LicenseValidator validator){  mPolicy.processServerResponse(Policy.RETRY,null);  if (mPolicy.allowAccess()) {    validator.getCallback().allow(Policy.RETRY);  } else {    validator.getCallback().dontAllow(Policy.RETRY);  }}  }
class C{  protected int writeObject(STWriter out,InstanceScope scope,Object o,String[] options){  int n=0;  if (o == null) {    if (options != null && options[Option.NULL.ordinal()] != null) {      o=options[Option.NULL.ordinal()];    } else     return 0;  }  if (o instanceof ST) {    scope=new InstanceScope(scope,(ST)o);    if (options != null && options[Option.WRAP.ordinal()] != null) {      try {        out.writeWrap(options[Option.WRAP.ordinal()]);      } catch (      IOException ioe) {        errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe);      }    }    n=exec(out,scope);  } else {    o=convertAnythingIteratableToIterator(scope,o);    try {      if (o instanceof Iterator)       n=writeIterator(out,scope,o,options); else       n=writePOJO(out,scope,o,options);    } catch (    IOException ioe) {      errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe,o);    }  }  return n;}  }
class C{  @Override public boolean storesMixedCaseQuotedIdentifiers() throws SQLException {  debugCodeCall("storesMixedCaseQuotedIdentifiers");  String m=getMode();  return !m.equals("MySQL");}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  protected boolean afterDelete(boolean success){  if (!success)   return success;  return true;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public static GenomeRelationships load(VcfHeader header){  final GenomeRelationships ped=new GenomeRelationships();  for (  String sample : header.getSampleNames()) {    ped.addGenome(sample).setProperty(GenomeRelationships.PRIMARY_GENOME_PROPERTY,"true");  }  for (  String line : header.getGenericMetaInformationLines()) {    if (line.startsWith(VcfHeader.META_STRING + "diseased=")) {      for (      String sample : StringUtils.split(line.substring((VcfHeader.META_STRING + "diseased=").length()),',')) {        ped.addGenome(sample).setProperty(GenomeRelationships.DISEASE_PROPERTY,"true");      }    }  }  for (  SampleField sampleField : header.getSampleLines()) {    final String sample=sampleField.getId();    String sex=null;    final Sex sexField=sampleField.getSex();    if (sexField != null) {      sex=sexField.name();    }    ped.addGenome(sample,sex);  }  for (  PedigreeField pedField : header.getPedigreeLines()) {    parsePedLine(ped,pedField);  }  return ped;}  }
class C{  private void sendFailurePatch(AzureStatsDataHolder statsData,Throwable throwable){  AdapterUtils.sendFailurePatchToProvisioningTask(this,statsData.statsRequest.taskReference,throwable);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return A;case 2:  return B;case 3:return C;case 4:return SHORT_SET;case 5:return INT_SET;case 6:return MIX_STRUCTLIST;case 7:return SHORT_LIST;case 8:return ORDERED_STRUCT_MAP;case 9:return MIX_STRUCT_MAP;case 10:return ORDER_ENUM;case 11:return BIN;default :return null;}}  }
class C{  public Schaffer(){  super(1,2);}  }
class C{  private void incrementCursors(){  if (mCompareResultIsValid) {switch (mCompareResult) {case LEFT:      mCursorLeft.moveToNext();    break;case RIGHT:  mCursorRight.moveToNext();break;case BOTH:mCursorLeft.moveToNext();mCursorRight.moveToNext();break;}mCompareResultIsValid=false;}}  }
class C{  private void nextToken() throws IOException {  st.nextToken();  currentToken=new Token(st.ttype,st.sval);  logln("Read token: type = " + currentToken.ttype + " string = "+ currentToken.sval);}  }
class C{  private void doRangeQuery(DBID o_p,AbstractMTreeNode<O,?,?> node,O q,double r_q,ModifiableDoubleDBIDList result){  double d1=0.;  if (o_p != null) {    d1=distanceQuery.distance(o_p,q);    index.statistics.countDistanceCalculation();  }  if (!node.isLeaf()) {    for (int i=0; i < node.getNumEntries(); i++) {      MTreeEntry entry=node.getEntry(i);      DBID o_r=entry.getRoutingObjectID();      double r_or=entry.getCoveringRadius();      double d2=o_p != null ? entry.getParentDistance() : 0.;      double diff=Math.abs(d1 - d2);      double sum=r_q + r_or;      if (diff <= sum) {        double d3=distanceQuery.distance(o_r,q);        index.statistics.countDistanceCalculation();        if (d3 <= sum) {          AbstractMTreeNode<O,?,?> child=index.getNode(((DirectoryEntry)entry).getPageID());          doRangeQuery(o_r,child,q,r_q,result);        }      }    }  } else {    for (int i=0; i < node.getNumEntries(); i++) {      MTreeEntry entry=node.getEntry(i);      DBID o_j=entry.getRoutingObjectID();      double d2=o_p != null ? entry.getParentDistance() : 0.;      double diff=Math.abs(d1 - d2);      if (diff <= r_q) {        double d3=distanceQuery.distance(o_j,q);        index.statistics.countDistanceCalculation();        if (d3 <= r_q) {          result.add(d3,o_j);        }      }    }  }}  }
class C{  protected CipherForKeyProtector(CipherSpi cipherSpi,Provider provider,String transformation){  super(cipherSpi,provider,transformation);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (declaredDynamic: ");  result.append(declaredDynamic);  result.append(", alias: ");  result.append(alias);  result.append(')');  return result.toString();}  }
class C{  public void open(int port) throws IOException {  connection=new DatagramSocket(port);  connection.setSoTimeout(timeout);}  }
class C{  void updateStorageViewInitiatorPWWN(VPlexStorageViewInfo storageViewInfo){  List<String> initiators=storageViewInfo.getInitiators();  List<VPlexInitiatorInfo> initiatorsInfoList=new ArrayList<VPlexInitiatorInfo>();  for (  String initiator : initiators) {    VPlexInitiatorInfo initiatorInfo=new VPlexInitiatorInfo();    initiatorInfo.setName(initiator);    updateInitiatorInfo(storageViewInfo.getClusterId(),initiatorInfo);    initiatorsInfoList.add(initiatorInfo);  }  List<String> initiatorPWWNs=new ArrayList<String>();  for (  VPlexInitiatorInfo initiatorInfo : initiatorsInfoList) {    String pwwn=initiatorInfo.getPortWwn();    if (pwwn.startsWith(VPlexApiConstants.WWN_PREFIX)) {      pwwn=pwwn.substring(2);    }    pwwn=pwwn.toUpperCase();    initiatorPWWNs.add(pwwn);  }  storageViewInfo.setInitiatorPwwns(initiatorPWWNs);  s_logger.info("Updated Storage View Info {}",storageViewInfo.toString());}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:12.521 -0500",hash_original_method="54879B5E9B62042FEEDC1EE4ADCFBB66",hash_generated_method="019781F3234A40E57E115A2ACF307C37") HopImpl(String hop) throws IllegalArgumentException {  if (hop == null)   throw new IllegalArgumentException("Null arg!");  int brack=hop.indexOf(']');  int colon=hop.indexOf(':',brack);  int slash=hop.indexOf('/',colon);  if (colon > 0) {    this.host=hop.substring(0,colon);    String portstr;    if (slash > 0) {      portstr=hop.substring(colon + 1,slash);      this.transport=hop.substring(slash + 1);    } else {      portstr=hop.substring(colon + 1);      this.transport="UDP";    }    try {      port=Integer.parseInt(portstr);    } catch (    NumberFormatException ex) {      throw new IllegalArgumentException("Bad port spec");    }  } else {    if (slash > 0) {      this.host=hop.substring(0,slash);      this.transport=hop.substring(slash + 1);      this.port=transport.equalsIgnoreCase("TLS") ? 5061 : 5060;    } else {      this.host=hop;      this.transport="UDP";      this.port=5060;    }  }  if (host == null || host.length() == 0)   throw new IllegalArgumentException("no host!");  this.host=this.host.trim();  this.transport=this.transport.trim();  if ((brack > 0) && host.charAt(0) != '[') {    throw new IllegalArgumentException("Bad IPv6 reference spec");  }  if (transport.compareToIgnoreCase("UDP") != 0 && transport.compareToIgnoreCase("TLS") != 0 && transport.compareToIgnoreCase("TCP") != 0) {    System.err.println("Bad transport string " + transport);    throw new IllegalArgumentException(hop);  }}  }
class C{  ReflectionStringConverter(Class<T> cls,Method toString){  if (toString.getParameterTypes().length != 0) {    throw new IllegalStateException("ToString method must have no parameters");  }  if (toString.getReturnType() != String.class) {    throw new IllegalStateException("ToString method must return a String");  }  this.cls=cls;  this.toString=toString;}  }
class C{  static void reportSpaces(){  Log.write("\n  Low semispace:  ");  Log.write(SSGCspy.copySpace0.getStart());  Log.write(" - ");  Log.write(SSGCspy.copySpace0.getStart().plus(SSGCspy.copySpace0.getExtent()));  Log.write("\n  High semispace: ");  Log.write(SSGCspy.copySpace1.getStart());  Log.write(" - ");  Log.write(SSGCspy.copySpace1.getStart().plus(SSGCspy.copySpace1.getExtent()));  Log.flush();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:29.520 -0500",hash_original_method="BA5AD9CB5800C0FF06E65720317D213F",hash_generated_method="31DE44F9B3F8EE0CE72E5066DA9C5597") public void onCallTransferring(SipSession newSession,String sessionDescription){}  }
class C{  public byte[] generate(){  DexOptions options=new DexOptions();  options.targetApiLevel=DexFormat.API_NO_EXTENDED_OPCODES;  DexFile outputDex=new DexFile(options);  for (  TypeDeclaration typeDeclaration : types.values()) {    outputDex.add(typeDeclaration.toClassDefItem());  }  try {    return outputDex.toDex(null,false);  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  private MenuItem addToMenu(Menu menu,String packageName,MenuItem item){  Menu subMenu=null;  ObservableList<MenuItem> menuComps=menu.getItems();  int i;  for (i=0; i < menuComps.size(); i++) {    Menu comp=(Menu)menuComps.get(i);    if (comp.getText().equals(packageName))     subMenu=comp; else     if (comp.getText().compareTo(packageName) > 0)     break;  }  if (subMenu == null) {    subMenu=new Menu(packageName);    menu.getItems().add(i,subMenu);  }  subMenu.getItems().add(item);  return item;}  }
class C{  public ITurnOrdered nextSmallCraftElement(){  return this.getTurnSCEnum().nextElement();}  }
class C{  public double eval(double params[]){  return (Math.asin(params[0]));}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public RandomMixedRunner(DataWrapper dataWrapper,Parameters params){  super(dataWrapper,params,null);}  }
class C{  public static void intializeMasterPlan(ArrayList<OptimizationPlanElement> temp){  LIR2MIR(temp);  MIROptimizations(temp);  MIR2MC(temp);}  }
class C{  public static void main(String[] args){  Log.printLine("Starting CloudSimExample4...");  try {    int num_user=1;    Calendar calendar=Calendar.getInstance();    boolean trace_flag=false;    CloudSim.init(num_user,calendar,trace_flag);    @SuppressWarnings("unused") Datacenter datacenter0=createDatacenter("Datacenter_0");    @SuppressWarnings("unused") Datacenter datacenter1=createDatacenter("Datacenter_1");    DatacenterBroker broker=createBroker();    int brokerId=broker.getId();    vmlist=new ArrayList<Vm>();    int vmid=0;    int mips=250;    long size=10000;    int ram=512;    long bw=1000;    int pesNumber=1;    String vmm="Xen";    Vm vm1=new Vm(vmid,brokerId,mips,pesNumber,ram,bw,size,vmm,new CloudletSchedulerTimeShared());    vmid++;    Vm vm2=new Vm(vmid,brokerId,mips,pesNumber,ram,bw,size,vmm,new CloudletSchedulerTimeShared());    vmlist.add(vm1);    vmlist.add(vm2);    broker.submitVmList(vmlist);    cloudletList=new ArrayList<Cloudlet>();    int id=0;    long length=40000;    long fileSize=300;    long outputSize=300;    UtilizationModel utilizationModel=new UtilizationModelFull();    Cloudlet cloudlet1=new Cloudlet(id,length,pesNumber,fileSize,outputSize,utilizationModel,utilizationModel,utilizationModel);    cloudlet1.setUserId(brokerId);    id++;    Cloudlet cloudlet2=new Cloudlet(id,length,pesNumber,fileSize,outputSize,utilizationModel,utilizationModel,utilizationModel);    cloudlet2.setUserId(brokerId);    cloudletList.add(cloudlet1);    cloudletList.add(cloudlet2);    broker.submitCloudletList(cloudletList);    broker.bindCloudletToVm(cloudlet1.getCloudletId(),vm1.getId());    broker.bindCloudletToVm(cloudlet2.getCloudletId(),vm2.getId());    CloudSim.startSimulation();    List<Cloudlet> newList=broker.getCloudletReceivedList();    CloudSim.stopSimulation();    printCloudletList(newList);    Log.printLine("CloudSimExample4 finished!");  } catch (  Exception e) {    e.printStackTrace();    Log.printLine("The simulation has been terminated due to an unexpected error");  }}  }
class C{  public final double apply(double a,double b){  return a + b * multiplicator;}  }
class C{  @Override public int hashCode(){  return Objects.hashCode(name,url,duration);}  }
class C{  public Vector3d mul(Vector3dc v){  x*=v.x();  y*=v.y();  z*=v.z();  return this;}  }
class C{  public void hexMoused(BoardViewEvent b){}  }
class C{  public void addToHex(Coords c){  if (board.contains(c)) {    IHex newHex=curHex.duplicate();    IHex oldHex=board.getHex(c);    newHex.setLevel(oldHex.getLevel());    int terrainTypes[]=oldHex.getTerrainTypes();    for (int i=0; i < terrainTypes.length; i++) {      int terrainID=terrainTypes[i];      if (!newHex.containsTerrain(terrainID) && oldHex.containsTerrain(terrainID)) {        newHex.addTerrain(oldHex.getTerrain(terrainID));      }    }    board.resetStoredElevation();    board.setHex(c,newHex);  }}  }
class C{  public static void writeXML(Writer out,String tag,String val,Map<String,String> attrs) throws IOException {  out.write('<');  out.write(tag);  for (  Map.Entry<String,String> entry : attrs.entrySet()) {    out.write(' ');    out.write(entry.getKey());    out.write('=');    out.write('"');    escapeAttributeValue(entry.getValue(),out);    out.write('"');  }  if (val == null) {    out.write('/');    out.write('>');  } else {    out.write('>');    escapeCharData(val,out);    out.write('<');    out.write('/');    out.write(tag);    out.write('>');  }}  }
class C{  @Override protected void removeRange(int start,int end){  if (start < 0) {    throw new IndexOutOfBoundsException("" + start);  } else   if (end > size) {    throw new IndexOutOfBoundsException("" + end + " out of: "+ size);  } else   if (start > end) {    throw new IndexOutOfBoundsException("" + start + " out of: "+ end);  }  if (start == end) {    return;  }  if (end == size) {    Arrays.fill(array,firstIndex + start,firstIndex + size,null);  } else   if (start == 0) {    Arrays.fill(array,firstIndex,firstIndex + end,null);    firstIndex+=end;  } else {    System.arraycopy(array,firstIndex + end,array,firstIndex + start,size - end);    int lastIndex=firstIndex + size;    int newLast=lastIndex + start - end;    Arrays.fill(array,newLast,lastIndex,null);  }  size-=end - start;  modCount++;}  }
class C{  public int milliseconds(){  return this.milliseconds;}  }
class C{  public Validator(){  loadImages();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (type: ");  result.append(type);  result.append(", constraintValues: ");  result.append(constraintValues);  result.append(')');  return result.toString();}  }
class C{  public void threadDetach(){  tcontext.set(null);}  }
class C{  public final void addPropertyChangeListener(PropertyChangeListener listener){  pcs.addPropertyChangeListener(listener);}  }
class C{  public void init(boolean forEncryption,CipherParameters param){  core.init(forEncryption,param);  if (param instanceof ParametersWithRandom) {    ParametersWithRandom rParam=(ParametersWithRandom)param;    key=(RSAKeyParameters)rParam.getParameters();    random=rParam.getRandom();  } else {    key=(RSAKeyParameters)param;    random=new SecureRandom();  }}  }
class C{  @SuppressWarnings({"rawtypes"}) public synchronized int sendBrowserMessageToMembers(Object newMessage){  try {    IConnection current=Red5.getConnectionLocal();    List newMessageList=(List)newMessage;    String action=newMessageList.get(0).toString();    BrowserStatus browserStatus=(BrowserStatus)current.getScope().getAttribute("browserStatus");    if (browserStatus == null) {      browserStatus=new BrowserStatus();    }    if (action.equals("initBrowser") || action.equals("newBrowserURL")) {      browserStatus.setBrowserInited(true);      browserStatus.setCurrentURL(newMessageList.get(1).toString());    } else     if (action.equals("closeBrowserURL")) {      browserStatus.setBrowserInited(false);    }    current.getScope().setAttribute("browserStatus",browserStatus);    syncMessageToCurrentScope("sendVarsToMessage",newMessage,false);  } catch (  Exception err) {    log.error("[sendMessage]",err);  }  return 1;}  }
class C{  private Token simpleTokenLexer(Token tkn,int c) throws IOException {  for (; ; ) {    if (isEndOfLine(c)) {      tkn.type=TT_EORECORD;      tkn.isReady=true;      break;    } else     if (isEndOfFile(c)) {      tkn.type=TT_EOF;      tkn.isReady=true;      break;    } else     if (c == strategy.getDelimiter()) {      tkn.type=TT_TOKEN;      tkn.isReady=true;      break;    } else     if (c == '\\' && strategy.getUnicodeEscapeInterpretation() && in.lookAhead() == 'u') {      tkn.content.append((char)unicodeEscapeLexer(c));    } else     if (c == strategy.getEscape()) {      tkn.content.append((char)readEscape(c));    } else {      tkn.content.append((char)c);    }    c=in.read();  }  if (strategy.getIgnoreTrailingWhitespaces()) {    tkn.content.trimTrailingWhitespace();  }  return tkn;}  }
class C{  private void verifyDownload(long requestId,byte[] fileData) throws Exception {  int fileSize=fileData.length;  ParcelFileDescriptor pfd=mDownloadManager.openDownloadedFile(requestId);  Cursor cursor=mDownloadManager.query(new Query().setFilterById(requestId));  try {    assertEquals(1,cursor.getCount());    assertTrue(cursor.moveToFirst());    verifyFileSize(pfd,fileSize);    verifyFileContents(pfd,fileData);    int colIndex=cursor.getColumnIndex(DownloadManager.COLUMN_LOCAL_FILENAME);    String fileName=cursor.getString(colIndex);    assertTrue(fileName.startsWith(CACHE_DIR));  }  finally {    pfd.close();    cursor.close();  }}  }
class C{  public TimeSeriesCollection(TimeZone zone){  this(null,zone);}  }
class C{  public void createTopic(String topic,int partitions,int replication){  createTopic(topic,partitions,replication,new Properties());}  }
class C{  @Override public void onReceive(Object message){  if (message instanceof NewMessage) {    NewMessage newMessage=(NewMessage)message;    onNewMessage(newMessage.getPeer(),newMessage.getSender(),newMessage.getSortDate(),newMessage.getContentDescription(),newMessage.getHasCurrentUserMention(),newMessage.getUnreadMessagesCount(),newMessage.getUnreadDialogsCount());  } else   if (message instanceof MessagesRead) {    MessagesRead read=(MessagesRead)message;    onMessagesRead(read.getPeer(),read.getFromDate());  } else   if (message instanceof PauseNotifications) {    onNotificationsPaused();  } else   if (message instanceof ResumeNotifications) {    onNotificationsResumed();  } else {    super.onReceive(message);  }}  }
class C{  public void loadAttachments(){  log.fine("#" + m_vo.TabNo);  if (!canHaveAttachment())   return;  String SQL="SELECT AD_Attachment_ID, Record_ID FROM AD_Attachment " + "WHERE AD_Table_ID=?";  try {    if (m_Attachments == null)     m_Attachments=new HashMap<Integer,Integer>(); else     m_Attachments.clear();    PreparedStatement pstmt=DB.prepareStatement(SQL,null);    pstmt.setInt(1,m_vo.AD_Table_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      Integer key=new Integer(rs.getInt(2));      Integer value=new Integer(rs.getInt(1));      m_Attachments.put(key,value);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,"loadAttachments",e);  }  log.config("#" + m_Attachments.size());}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.core.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new JAXPDOMTestDocumentBuilderFactory(null,JAXPDOMTestDocumentBuilderFactory.getConfiguration1());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  private static void printInlining(final InlineInfo info,final int inliningDepth,final boolean success,final String msg,final Object... args){  printInlining(info.methodAt(0),info.invoke(),inliningDepth,success,msg,args);}  }
class C{  public static String toClasspathString(Collection<String> elements){  final StringBuilder str=new StringBuilder();  elements.forEach(null);  return str.toString();}  }
class C{  private static int scanUriEscape(ByteToChar converter,byte[] rawUri,int i,int len) throws IOException {  int ch1=i < len ? (rawUri[i++] & 0xff) : -1;  if (ch1 == 'u') {    ch1=i < len ? (rawUri[i++] & 0xff) : -1;    int ch2=i < len ? (rawUri[i++] & 0xff) : -1;    int ch3=i < len ? (rawUri[i++] & 0xff) : -1;    int ch4=i < len ? (rawUri[i++] & 0xff) : -1;    converter.addChar((char)((toHex(ch1) << 12) + (toHex(ch2) << 8) + (toHex(ch3) << 4)+ (toHex(ch4))));  } else {    int ch2=i < len ? (rawUri[i++] & 0xff) : -1;    int b=(toHex(ch1) << 4) + toHex(ch2);    ;    converter.addByte(b);  }  return i;}  }
class C{  public void writeRawMessageSetExtension(final int fieldNumber,final ByteString value) throws IOException {  writeTag(WireFormat.MESSAGE_SET_ITEM,WireFormat.WIRETYPE_START_GROUP);  writeUInt32(WireFormat.MESSAGE_SET_TYPE_ID,fieldNumber);  writeBytes(WireFormat.MESSAGE_SET_MESSAGE,value);  writeTag(WireFormat.MESSAGE_SET_ITEM,WireFormat.WIRETYPE_END_GROUP);}  }
class C{  LuaValue loadNumber() throws IOException {  if (luacNumberFormat == NUMBER_FORMAT_INTS_ONLY) {    return LuaInteger.valueOf(loadInt());  } else {    return longBitsToLuaNumber(loadInt64());  }}  }
class C{  public IImageLineSet<? extends IImageLine> readRows(){  return readRows(getCurImgInfo().rows,0,1);}  }
class C{  @Override public Object saveState(FacesContext facesContext){  return new Object[]{converterId,forClass};}  }
class C{  @Override protected void onStarted(final Player player){  addEvent(new SoundEvent(startSound,SOUND_RADIUS,100,SoundLayer.AMBIENT_SOUND));  notifyWorldAboutChanges();  player.drop("flask");  player.sendPrivateText("You started to fill fresh spring water into an empty flask. It will hopefully not slip out of your hand!");}  }
class C{  private int indexOf(String fullPath){  for (int i=0, length=this.relativePaths.length; i < length; i++) {    String currentRelativePath=this.relativePaths[i];    if (currentRelativePath == null)     continue;    String currentContainerPath=this.containerPaths[i];    String currentFullPath=currentRelativePath.length() == 0 ? currentContainerPath : (currentContainerPath + '/' + currentRelativePath);    if (encloses(currentFullPath,fullPath,i))     return i;  }  return -1;}  }
class C{  public long globalIndex(){  return globalIndex;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public int print(Graphics g,PageFormat pageFormat,int pageIndex){  if (pageIndex > 0)   return NO_SUCH_PAGE;  Graphics2D g2=(Graphics2D)g;  g2.translate(pageFormat.getImageableX(),pageFormat.getImageableY());  boolean wasBuffered=disableDoubleBuffering(m_component);  m_component.printAll(g2);  restoreDoubleBuffering(m_component,wasBuffered);  return PAGE_EXISTS;}  }
class C{  Node(Node<V> next){  this.key=null;  this.value=this;  this.next=next;}  }
class C{  public DataMigration(int version){  super(MigrationType.DATA,version);}  }
class C{  void generateIndexAnnotations(AnnotationBuilder ap,String parameter,IndexType type){  List<IndexInspector> list=getIndexes(type);  if (list.size() == 0) {    return;  }  if (list.size() == 1) {    ap.addParameter(parameter,list.get(0).getColumnsString());  } else {    List<String> parameters=New.arrayList();    for (    IndexInspector index : list) {      parameters.add(index.getColumnsString());    }    ap.addParameter(parameter,parameters);  }}  }
class C{  @Override public void recordGaugeValue(String key,long value){  client.recordGaugeValue(key,value);}  }
class C{  private void executeUpload(String[] args) throws IOException, ServiceException, DocumentListException, InterruptedException {  if (args.length == 3) {    DocumentListEntry entry=documentList.uploadFile(args[1],args[2]);    printDocumentEntry(entry);  } else {    printMessage(COMMAND_HELP_UPLOAD);  }}  }
class C{  public static Integer appendGlobalFunctionComment(final AbstractSQLProvider provider,final INaviFunction function,final String commentText,final Integer userId) throws CouldntSaveDataException {  Preconditions.checkNotNull(function,"IE01042: function argument can not be null");  Preconditions.checkNotNull(commentText,"IE01240: commentText argument can not be null");  Preconditions.checkNotNull(userId,"IE01241: userId argument can not be null");  final Connection connection=provider.getConnection().getConnection();  final Integer moduleId=function.getModule().getConfiguration().getId();  final String storedProcedure=" { ? = call append_function_comment( ?, ?, ?, ?) } ";  try (CallableStatement appendCommentProcedure=connection.prepareCall(storedProcedure)){    appendCommentProcedure.registerOutParameter(1,Types.INTEGER);    appendCommentProcedure.setInt(2,moduleId);    appendCommentProcedure.setObject(3,function.getAddress().toBigInteger(),Types.BIGINT);    appendCommentProcedure.setInt(4,userId);    appendCommentProcedure.setString(5,commentText);    appendCommentProcedure.execute();    final int commentId=appendCommentProcedure.getInt(1);    if (appendCommentProcedure.wasNull()) {      throw new CouldntSaveDataException("Error: Got an comment id of null from the database");    }    return commentId;  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  private void enforceStaggeredLayout(){  if (width != MATCH_PARENT) {    width=MATCH_PARENT;  }  if (height == MATCH_PARENT) {    height=WRAP_CONTENT;  }}  }
class C{  public static boolean isIsatapAddress(Inet6Address ip){  if (isTeredoAddress(ip)) {    return false;  }  byte[] bytes=ip.getAddress();  if ((bytes[8] | (byte)0x03) != (byte)0x03) {    return false;  }  return (bytes[9] == (byte)0x00) && (bytes[10] == (byte)0x5e) && (bytes[11] == (byte)0xfe);}  }
class C{  public void addGetstatic(CtClass c,String name,String type){  add(GETSTATIC);  int ci=constPool.addClassInfo(c);  addIndex(constPool.addFieldrefInfo(ci,name,type));  growStack(Descriptor.dataSize(type));}  }
class C{  public int viewSize(){  return viewClasses().size();}  }
class C{  public DotGraphEdge(DotGraphNode src,DotGraphNode dst){  this.start=src;  this.end=dst;  this.isDirected=true;}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void testDoCheckWithDetectionResultOverridenByConstructorAndProcessRemarkOnAttribute(){  LOGGER.debug("doCheckWithDetectionResultOverridenByConstructorAndProcessRemarkOnAttribute");  elements.add(element);  mockTestSolutionHandler.addTestSolution(TestSolution.FAILED);  expectLastCall().once();  Collection<EvidenceElement> evidenceElementList=new ArrayList<>();  EvidenceElement ee=createMock(EvidenceElement.class);  expect(mockProcessRemarkService.getEvidenceElement(EvidenceStore.TARGETTED_ELEMENT_FROM_SCOPE_EE,AttributeStore.ALT_ATTR)).andReturn(ee).once();  evidenceElementList.add((ee));  mockProcessRemarkService.addSourceCodeRemarkOnElement(TestSolution.FAILED,element,ATTR_PRESENT_MSG,evidenceElementList);  expectLastCall().once();  AttributePresenceChecker instance=new AttributePresenceChecker(AttributeStore.ALT_ATTR,TestSolution.FAILED,TestSolution.PASSED,ATTR_PRESENT_MSG,ATTR_ABSENT_MSG,true);  instance.setProcessRemarkService(mockProcessRemarkService);  replay(mockSSPHandler,mockTestSolutionHandler,mockProcessRemarkService);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockSSPHandler,mockTestSolutionHandler,mockProcessRemarkService);}  }
class C{  public void dragDropEnd(DragSourceDropEvent dsde){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:42.907 -0500",hash_original_method="56094138813247401A1CB12DD1515681",hash_generated_method="CADD5401E7B96B2C34F0800ED8CF8313") @Deprecated public static void resetGlobalExternalAllocCount(){}  }
class C{  private double convertFromPanelX(double pX){  pX/=m_panelWidth;  pX*=m_rangeX;  return pX + m_minX;}  }
class C{  private void mergeDHTNode(Node node) throws IIOInvalidTreeException {  ArrayList oldDHTs=new ArrayList();  Iterator iter=markerSequence.iterator();  while (iter.hasNext()) {    MarkerSegment seg=(MarkerSegment)iter.next();    if (seg instanceof DHTMarkerSegment) {      oldDHTs.add(seg);    }  }  if (!oldDHTs.isEmpty()) {    NodeList children=node.getChildNodes();    for (int i=0; i < children.getLength(); i++) {      Node child=children.item(i);      NamedNodeMap attrs=child.getAttributes();      int childID=MarkerSegment.getAttributeValue(child,attrs,"htableId",0,3,true);      int childClass=MarkerSegment.getAttributeValue(child,attrs,"class",0,1,true);      DHTMarkerSegment dht=null;      int tableIndex=-1;      for (int j=0; j < oldDHTs.size(); j++) {        DHTMarkerSegment testDHT=(DHTMarkerSegment)oldDHTs.get(j);        for (int k=0; k < testDHT.tables.size(); k++) {          DHTMarkerSegment.Htable testTable=(DHTMarkerSegment.Htable)testDHT.tables.get(k);          if ((childID == testTable.tableID) && (childClass == testTable.tableClass)) {            dht=testDHT;            tableIndex=k;            break;          }        }        if (dht != null)         break;      }      if (dht != null) {        dht.tables.set(tableIndex,dht.getHtableFromNode(child));      } else {        dht=(DHTMarkerSegment)oldDHTs.get(oldDHTs.size() - 1);        dht.tables.add(dht.getHtableFromNode(child));      }    }  } else {    DHTMarkerSegment newGuy=new DHTMarkerSegment(node);    int lastDQT=findMarkerSegmentPosition(DQTMarkerSegment.class,false);    int firstSOF=findMarkerSegmentPosition(SOFMarkerSegment.class,true);    int firstSOS=findMarkerSegmentPosition(SOSMarkerSegment.class,true);    if (lastDQT != -1) {      markerSequence.add(lastDQT + 1,newGuy);    } else     if (firstSOF != -1) {      markerSequence.add(firstSOF,newGuy);    } else     if (firstSOS != -1) {      markerSequence.add(firstSOS,newGuy);    } else {      markerSequence.add(newGuy);    }  }}  }
class C{  private boolean test_float_3D(){  CUarray array=new CUarray();  CUDA_ARRAY3D_DESCRIPTOR ad=new CUDA_ARRAY3D_DESCRIPTOR();  ad.Format=CU_AD_FORMAT_FLOAT;  ad.Width=sizeX;  ad.Height=sizeY;  ad.Depth=sizeZ;  ad.NumChannels=1;  cuArray3DCreate(array,ad);  CUDA_MEMCPY3D copy=new CUDA_MEMCPY3D();  copy.srcMemoryType=CUmemorytype.CU_MEMORYTYPE_HOST;  copy.srcHost=Pointer.to(input_float_3D);  copy.srcPitch=sizeX * Sizeof.FLOAT;  copy.srcHeight=sizeY;  copy.dstMemoryType=CUmemorytype.CU_MEMORYTYPE_ARRAY;  copy.dstArray=array;  copy.dstHeight=sizeX;  copy.WidthInBytes=sizeX * Sizeof.FLOAT;  copy.Height=sizeY;  copy.Depth=sizeZ;  cuMemcpy3D(copy);  CUtexref texref=new CUtexref();  cuModuleGetTexRef(texref,module,"texture_float_3D");  cuTexRefSetFilterMode(texref,CU_TR_FILTER_MODE_LINEAR);  cuTexRefSetAddressMode(texref,0,CU_TR_ADDRESS_MODE_CLAMP);  cuTexRefSetAddressMode(texref,1,CU_TR_ADDRESS_MODE_CLAMP);  cuTexRefSetAddressMode(texref,2,CU_TR_ADDRESS_MODE_CLAMP);  cuTexRefSetFlags(texref,CU_TRSF_NORMALIZED_COORDINATES);  cuTexRefSetFormat(texref,CU_AD_FORMAT_FLOAT,1);  cuTexRefSetArray(texref,array,CU_TRSA_OVERRIDE_FORMAT);  CUdeviceptr dOutput=new CUdeviceptr();  cuMemAlloc(dOutput,Sizeof.FLOAT * 1);  CUfunction function=new CUfunction();  cuModuleGetFunction(function,module,"test_float_3D");  Pointer kernelParameters=Pointer.to(Pointer.to(dOutput),Pointer.to(new float[]{posX}),Pointer.to(new float[]{posY}),Pointer.to(new float[]{posZ}));  cuLaunchKernel(function,1,1,1,1,1,1,0,null,kernelParameters,null);  cuCtxSynchronize();  float hOutput[]=new float[1];  cuMemcpyDtoH(Pointer.to(hOutput),dOutput,Sizeof.FLOAT * 1);  log("Result float  3D " + Arrays.toString(hOutput));  float expected[]=new float[]{3.5f};  boolean passed=Arrays.equals(hOutput,expected);  log("Test   float  3D " + (passed ? "PASSED" : "FAILED"));  cuArrayDestroy(array);  cuMemFree(dOutput);  return passed;}  }
class C{  @Override public void onApplicationEvent(TransportServiceEvent event){switch (event.getType()) {case INITIALIZED:case TRANSPORT_FINISHED:case TRANSPORT_ONFAILURE:case TRANSPORT_CANCELED:case TRANSPORT_INTERRUPTED:    final TransportOrder to=repository.findOne((Long)event.getSource());  LOGGER.debug("> Request to start the TransportOrder with PKey [{}]",to.getPersistentKey());Optional<LocationGroup> lg=commonGateway.getLocationGroup(to.getTargetLocationGroup());Optional<Location> loc=commonGateway.getLocation(to.getTargetLocation());if (!lg.isPresent() && !loc.isPresent()) {throw new NotFoundException("Neither a valid target LocationGroup nor a Location are set, hence it is not possible to start the TransportOrder");}lg.ifPresent(null);loc.ifPresent(null);lg.ifPresent(null);loc.ifPresent(null);List<TransportOrder> others=repository.findByTransportUnitBKAndStates(to.getTransportUnitBK(),TransportOrderState.STARTED);if (!others.isEmpty()) {throw new StateChangeException("Cannot start TransportOrder for TransportUnit [" + to.getTransportUnitBK() + "] because "+ others.size()+ " TransportOrders already started ["+ others.get(0).getPersistentKey()+ "]");}to.changeState(TransportOrderState.STARTED);repository.save(to);LOGGER.info("TransportOrder for TransportUnit with Barcode {} STARTED at {}. Persisted key is {}",to.getTransportUnitBK(),to.getStartDate(),to.getPk());break;}}  }
class C{  public HBaseProjectionCriteria addColumn(ColumnMetaData column){  this.columns.add(column);  return this;}  }
class C{  public void flush() throws IOException {  out.flush();}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  String desc;  String param;  int i;  SelectedTag tag;  result.addAll(Collections.list(super.listOptions()));  desc="";  param="";  for (i=0; i < TAGS_PRUNING.length; i++) {    if (i > 0) {      param+="|";    }    tag=new SelectedTag(TAGS_PRUNING[i].getID(),TAGS_PRUNING);    param+="" + tag.getSelectedTag().getID();    desc+="\t" + tag.getSelectedTag().getID() + " = "+ tag.getSelectedTag().getReadable()+ "\n";  }  result.addElement(new Option("\tThe pruning method to use:\n" + desc + "\t(default: "+ PRUNING_NONE+ ")","P",1,"-P <" + param + ">"));  result.addElement(new Option("\tThe size of the cache (a prime number).\n" + "\t(default: 250007)","C",1,"-C <num>"));  result.addElement(new Option("\tThe size of the internal cache (a prime number).\n" + "\t(default: 200003)","IC",1,"-IC <num>"));  result.addElement(new Option("\tThe lambda constant. Penalizes non-continuous subsequence\n" + "\tmatches. Must be in (0,1).\n" + "\t(default: 0.5)","L",1,"-L <num>"));  result.addElement(new Option("\tThe length of the subsequence.\n" + "\t(default: 3)","ssl",1,"-ssl <num>"));  result.addElement(new Option("\tThe maximum length of the subsequence.\n" + "\t(default: 9)","ssl-max",1,"-ssl-max <num>"));  result.addElement(new Option("\tUse normalization.\n" + "\t(default: no)","N",0,"-N"));  return result.elements();}  }
class C{  private void updateModelPosition(){  Matrix.setIdentityM(modelCube,0);  Matrix.translateM(modelCube,0,modelPosition[0],modelPosition[1],modelPosition[2]);  checkGLError("updateCubePosition");}  }
class C{  @Override public NBTTagCompound writeToNBT(NBTTagCompound nbt){  super.writeToNBT(nbt);  if (date != null) {    nbt.setTag("Date",date.toNBT());    nbt.setTag("Item",tool.writeToNBT(new NBTTagCompound()));    nbt.setByte("Days",(byte)days);  }  return nbt;}  }
class C{  public static void flush(final OscMessage theOscMessage,final NetAddress theNetAddress){  flush(theOscMessage.getBytes(),theNetAddress);}  }
class C{  public boolean hasExperimentId(){  return hasExtension(GwoExperimentId.class);}  }
class C{  public static double readDouble(final JSONArray jsonArray,final int index,final boolean required,final boolean notNull) throws JSONException {  if (required) {    return jsonArray.getDouble(index);  }  if (notNull && jsonArray.isNull(index)) {    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index));  }  double value=0.0;  if (!jsonArray.isNull(index)) {    value=jsonArray.getDouble(index);  }  return value;}  }
class C{  public double[] residuals(String x,List<String> z){  int N=data.getRowDimension();  int _x=indices.get(x);  double[] residuals=new double[N];  if (z.size() == 0) {    for (int i=0; i < N; i++) {      residuals[i]=data.getEntry(i,_x);    }    return residuals;  }  int[] _z=new int[z.size()];  for (int m=0; m < z.size(); m++) {    _z[m]=indices.get(z.get(m));  }  double h=0.0;  for (  int c : _z) {    if (this.h[c] > h) {      h=this.h[c];    }  }  h*=sqrt(_z.length);  double[] sums=new double[N];  double[] weights=new double[N];  for (int i=0; i < N; i++) {    double xi=data.getEntry(i,_x);    for (int j=i + 1; j < N; j++) {      double d=distance(data,_z,i,j);      double k=kernel(d / h);      double xj=data.getEntry(j,_x);      sums[i]+=k * xj;      weights[i]+=k;      sums[j]+=k * xi;      weights[j]+=k;    }  }  for (int i=0; i < N; i++) {    double xi=data.getEntry(i,_x);    double d=distance(data,_z,i,i);    double k=kernel(d / h);    sums[i]+=k * xi;    weights[i]+=k;  }  for (int i=0; i < residuals.length; i++) {    residuals[i]=data.getEntry(i,_x) - sums[i] / weights[i];  }  return residuals;}  }
class C{  public int parseEnumeration() throws DecodeException {  return parseIntWithTag(ASN_ENUMERATED);}  }
class C{  public short clearShort(final short holder){  return (short)clear(holder);}  }
class C{  public void testGetPrefix() throws Throwable {  Document doc;  Element element;  Element qelement;  Attr attr;  Attr qattr;  String elemNoPrefix;  String elemPrefix;  String attrNoPrefix;  String attrPrefix;  doc=(Document)load("staff",builder);  element=doc.createElementNS("http://www.w3.org/DOM/Test/elem","elem");  qelement=doc.createElementNS("http://www.w3.org/DOM/Test/elem","qual:qelem");  attr=doc.createAttributeNS("http://www.w3.org/DOM/Test/attr","attr");  qattr=doc.createAttributeNS("http://www.w3.org/DOM/Test/attr","qual:qattr");  elemNoPrefix=element.getPrefix();  elemPrefix=qelement.getPrefix();  attrNoPrefix=attr.getPrefix();  attrPrefix=qattr.getPrefix();  assertNull("nodegetprefix03_1",elemNoPrefix);  assertEquals("nodegetprefix03_2","qual",elemPrefix);  assertNull("nodegetprefix03_3",attrNoPrefix);  assertEquals("nodegetprefix03_4","qual",attrPrefix);}  }
class C{  @Override public boolean onKeyDown(int keyCode,KeyEvent event){  if (android.os.Build.VERSION.SDK_INT < 5 && keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {    onBackPressed();    return true;  }  return super.onKeyDown(keyCode,event);}  }
class C{  public void addUndoableEdit(UndoableEdit edit){}  }
class C{  public void mapDatasetToDomainAxis(int index,int axisIndex){  List axisIndices=new java.util.ArrayList(1);  axisIndices.add(new Integer(axisIndex));  mapDatasetToDomainAxes(index,axisIndices);}  }
class C{  public static void fill(long[] array,int start,int end,long value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  static boolean isSameFile(WindowsFileAttributes attrs1,WindowsFileAttributes attrs2){  return (attrs1.volSerialNumber == attrs2.volSerialNumber) && (attrs1.fileIndexHigh == attrs2.fileIndexHigh) && (attrs1.fileIndexLow == attrs2.fileIndexLow);}  }
class C{  public void addInitiatorsToStorageView(String viewName,String clusterName,List<PortInfo> initiatorPortInfo) throws VPlexApiException {  s_logger.info("Request to add initiators to storage view on VPlex at {}",_baseURI);  _exportMgr.addInitiatorsToStorageView(viewName,clusterName,initiatorPortInfo);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!super.equals(obj)) {    return false;  }  if (!(obj instanceof XYImageAnnotation)) {    return false;  }  XYImageAnnotation that=(XYImageAnnotation)obj;  if (this.x != that.x) {    return false;  }  if (this.y != that.y) {    return false;  }  if (!ObjectUtilities.equal(this.image,that.image)) {    return false;  }  if (!this.anchor.equals(that.anchor)) {    return false;  }  return true;}  }
class C{  @Override public boolean isParented(){  return true;}  }
class C{  protected void verifyJBossHome(){  List<String> requiredDirs=new ArrayList<String>();  requiredDirs.add(getFileHandler().append(getHome(),"bin"));  requiredDirs.add(getFileHandler().append(getHome(),"client"));  requiredDirs.add(getFileHandler().append(getHome(),"lib"));  requiredDirs.add(getFileHandler().append(getHome(),"lib/endorsed"));  requiredDirs.add(getFileHandler().append(getHome(),"server"));  String errorPrefix="Invalid JBoss installation. ";  String errorSuffix="Make sure the JBoss container home directory you have specified " + "points to the right location (It's currently pointing to [" + getHome() + "])";  for (  String dir : requiredDirs) {    if (!getFileHandler().exists(dir)) {      throw new ContainerException(errorPrefix + "The [" + dir+ "] directory doesn't exist. "+ errorSuffix);    }    if (!getFileHandler().isDirectory(dir)) {      throw new ContainerException(errorPrefix + "The [" + dir+ "] path should be a directory. "+ errorSuffix);    }    if (getFileHandler().isDirectoryEmpty(dir)) {      throw new ContainerException(errorPrefix + "The [" + dir+ "] directory is empty and it shouldn't be. "+ errorSuffix);    }  }  String[] requiredJars=new String[]{"bin/run.jar","bin/shutdown.jar"};  for (  String requiredJar : requiredJars) {    String jarFile=getFileHandler().append(getHome(),requiredJar);    if (!getFileHandler().exists(jarFile)) {      throw new ContainerException(errorPrefix + "The [" + jarFile+ "] JAR doesn't exist. "+ errorSuffix);    }  }}  }
class C{  @Override public void exportGroupCreate(URI storageURI,URI exportGroupURI,List<URI> initiatorURIs,Map<URI,Integer> volumeMap,String token) throws Exception {  ExportOrchestrationTask taskCompleter=null;  try {    BlockStorageDevice device=getDevice();    ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupURI);    StorageSystem storage=_dbClient.queryObject(StorageSystem.class,storageURI);    taskCompleter=new ExportOrchestrationTask(exportGroupURI,token);    if (initiatorURIs != null && !initiatorURIs.isEmpty()) {      _log.info("export_create: initiator list non-empty");      Workflow workflow=_workflowService.getNewWorkflow(MaskingWorkflowEntryPoints.getInstance(),"exportGroupCreate",true,token);      String zoningStep=generateZoningCreateWorkflow(workflow,null,exportGroup,null,volumeMap);      boolean createdSteps=determineExportGroupCreateSteps(workflow,zoningStep,device,storage,exportGroup,initiatorURIs,volumeMap,token);      if (createdSteps) {        String successMessage=String.format("ExportGroup successfully applied for StorageArray %s",storage.getLabel());        workflow.executePlan(taskCompleter,successMessage);      }    } else {      _log.info("export_create: initiator list");      taskCompleter.ready(_dbClient);    }  } catch (  Exception ex) {    _log.error("ExportGroup Orchestration failed.",ex);    if (taskCompleter != null) {      ServiceError serviceError=DeviceControllerException.errors.jobFailedMsg(ex.getMessage(),ex);      taskCompleter.error(_dbClient,serviceError);    }  }}  }
class C{  public GreaterThanOrEqual(){  super(Boolean.class,Number.class,Number.class);}  }
class C{  public static long[] transformLongArray(Long[] source){  long[] destin=new long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public Resources(List<String> values){  super(values);}  }
class C{  private BOSHClientConnEvent(final BOSHClient source,final boolean cConnected,final List<ComposableBody> cRequests,final Throwable cCause){  super(source);  connected=cConnected;  cause=cCause;  if (connected) {    if (cCause != null) {      throw (new IllegalStateException("Cannot be connected and have a cause"));    }    if (cRequests != null && cRequests.size() > 0) {      throw (new IllegalStateException("Cannot be connected and have outstanding requests"));    }  }  if (cRequests == null) {    requests=Collections.emptyList();  } else {    requests=Collections.unmodifiableList(new ArrayList<ComposableBody>(cRequests));  }}  }
class C{  void printChunk(int logLevel,String tag,String msg){  android.util.Log.println(logLevel,tag,msg);}  }
class C{  protected List<Metric> mapping(List<Metric> metrics,List<String> constants){  SystemAssert.requireArgument(metrics != null,"Cannot transform empty metric/metrics");  if (metrics.isEmpty()) {    return metrics;  }  List<Metric> newMetricsList=new ArrayList<Metric>();  for (  Metric metric : metrics) {    metric.setDatapoints(this.valueReducerOrMapping.mapping(metric.getDatapoints(),constants));    newMetricsList.add(metric);  }  return newMetricsList;}  }
class C{  @Nullable public String normalize(@Nullable String id){  if (id == null) {    return null;  }  return NOT_VALID_ID_CHARS_PATTERN.matcher(id).replaceAll("");}  }
class C{  @Override public String toString(){  return "state=" + state.getName() + ",active="+ active+ ",parent="+ ((parentStateInfo == null) ? "null" : parentStateInfo.state.getName());}  }
class C{  public static SSLEngine[] connect(final TestSSLContext c,Hooks hooks) throws IOException {  if (hooks == null) {    hooks=new Hooks();  }  SSLSession session=c.clientContext.createSSLEngine().getSession();  int packetBufferSize=session.getPacketBufferSize();  ByteBuffer clientToServer=ByteBuffer.allocate(packetBufferSize);  ByteBuffer serverToClient=ByteBuffer.allocate(packetBufferSize);  int applicationBufferSize=session.getApplicationBufferSize();  ByteBuffer scratch=ByteBuffer.allocate(applicationBufferSize);  SSLEngine client=c.clientContext.createSSLEngine();  SSLEngine server=c.serverContext.createSSLEngine();  client.setUseClientMode(true);  server.setUseClientMode(false);  hooks.beforeBeginHandshake(client,server);  client.beginHandshake();  server.beginHandshake();  while (true) {    boolean clientDone=client.getHandshakeStatus() == HandshakeStatus.NOT_HANDSHAKING;    boolean serverDone=server.getHandshakeStatus() == HandshakeStatus.NOT_HANDSHAKING;    if (clientDone && serverDone) {      break;    }    boolean progress=false;    if (!clientDone) {      progress|=handshakeCompleted(client,clientToServer,serverToClient,scratch);    }    if (!serverDone) {      progress|=handshakeCompleted(server,serverToClient,clientToServer,scratch);    }    if (!progress) {      break;    }  }  return new SSLEngine[]{server,client};}  }
class C{  public boolean includeGlobalState(){  return includeGlobalState;}  }
