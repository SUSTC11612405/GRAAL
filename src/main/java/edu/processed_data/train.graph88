class C{  private String[] removeDuplicates(String[] list){  if ((list == null) || (list.length < 2))   return list;  String[] list2=new String[list.length];  int count=0;  for (int i=0; i < list.length; i++) {    boolean duplicate=false;    String element=list[i];    for (int j=0; j < count; j++) {      if (((element == null) && (list2[j] == null)) || ((element != null) && (element.equals(list2[j])))) {        duplicate=true;        break;      }    }    if (duplicate)     continue;    list2[count++]=list[i];  }  if (count == list2.length)   return list2;  String[] tmp=new String[count];  System.arraycopy(list2,0,tmp,0,count);  return tmp;}  }
class C{  public IgfsMode mode(Path path){  return mode(convert(path));}  }
class C{  private void updateItem(FacesContext ctx,Object value){  Map<String,Object> reqMap=ctx.getExternalContext().getRequestMap();  Object oldVarValue=null;  if (var != null) {    oldVarValue=reqMap.put(var,value);  }  try {    Map<String,Object> attrs=sourceComponent.getAttributes();    Object itemValueResult=attrs.get(ITEM_VALUE);    Object itemLabelResult=attrs.get(ITEM_LABEL);    Object itemDescriptionResult=attrs.get(ITEM_DESCRIPTION);    Object itemEscapedResult=attrs.get(ITEM_ESCAPED);    Object itemDisabledResult=attrs.get(ITEM_DISABLED);    Object noSelectionOptionResult=attrs.get(NO_SELECTION_OPTION);    setValue(((itemValueResult != null) ? itemValueResult : value));    setLabel(((itemLabelResult != null) ? itemLabelResult.toString() : value.toString()));    setDescription(((itemDescriptionResult != null) ? itemDescriptionResult.toString() : null));    setEscape(((itemEscapedResult != null) ? Boolean.valueOf(itemEscapedResult.toString()) : true));    setDisabled(((itemDisabledResult != null) ? Boolean.valueOf(itemDisabledResult.toString()) : false));    setNoSelectionOption(((noSelectionOptionResult != null) ? Boolean.valueOf(noSelectionOptionResult.toString()) : false));  }  finally {    if (var != null) {      if (oldVarValue != null) {        reqMap.put(var,oldVarValue);      } else {        reqMap.remove(var);      }    }  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static void cutSchedule(TransitSchedule schedule,Coord SWcorner,Coord NEcorner){  Set<Id<TransitStopFacility>> stopsInArea=new HashSet<>();  for (  TransitStopFacility stopFacility : schedule.getFacilities().values()) {    if (CoordTools.isInArea(stopFacility.getCoord(),SWcorner,NEcorner)) {      stopsInArea.add(stopFacility.getId());    }  }  cutSchedule(schedule,stopsInArea);}  }
class C{  public RequestHandle delete(Context context,String url,ResponseHandlerInterface responseHandler){  final HttpDelete delete=new HttpDelete(getURI(url));  return sendRequest(httpClient,httpContext,delete,null,responseHandler,context);}  }
class C{  public void removeListener(final INaviGraphListener listener){  super.removeListener(listener);  m_listeners.removeListener(listener);  m_synchronizer.removeListener(listener);}  }
class C{  private PatternMatcher(){}  }
class C{  public static int convertLongToInt(long l){  if (l <= Integer.MIN_VALUE) {    return Integer.MIN_VALUE;  } else   if (l >= Integer.MAX_VALUE) {    return Integer.MAX_VALUE;  } else {    return (int)l;  }}  }
class C{  private String stateToString(long s){  return super.toString() + "[phase = " + phaseOf(s)+ " parties = "+ partiesOf(s)+ " arrived = "+ arrivedOf(s)+ "]";}  }
class C{  public TeXFormula add(TeXFormula f){  addImpl(f);  return this;}  }
class C{  void query(Connection conn,String s,int i,int size,StringBuilder buff){  if (!(s.startsWith("@") && s.endsWith("."))) {    buff.append(PageParser.escapeHtml(s + ";")).append("<br />");  }  boolean forceEdit=s.startsWith("@edit");  buff.append(getResult(conn,i + 1,s,size == 1,forceEdit)).append("<br />");}  }
class C{  public char next(){  pos+=1;  int end=offset + count;  if (pos >= end) {    pos=end;    return DONE;  }  return current();}  }
class C{  public static SecretKey createKey(String password,int pbkdfIterations){  return createKey(password,pbkdfIterations,new PrngSaltGenerator());}  }
class C{  public void testCFII_ServerClosed_Block() throws Exception {  ensureServerOpen();  assertTrue(this.channel1.isBlocking());  statusNotConnected_NotPending();  assertTrue(this.channel1.connect(localAddr1));  statusConnected_NotPending();  ensureServerClosed();  tryFinish();  this.channel1.close();  statusChannelClosed();}  }
class C{  public void enableRowScaling(boolean enable){  mRowScaleEnabled=enable;}  }
class C{  public Contributor(){  super(KEY);}  }
class C{  private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){  try {    PackageManager pm=context.getPackageManager();    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);    if (handlers == null || handlers.size() == 0) {      return false;    }    for (    ResolveInfo resolveInfo : handlers) {      IntentFilter filter=resolveInfo.filter;      if (filter == null)       continue;      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;      if (resolveInfo.activityInfo == null)       continue;      return true;    }  } catch (  RuntimeException e) {    Log.e(TAG,"Runtime exception while getting specialized handlers");  }  return false;}  }
class C{  @org.junit.Test public void testAlice(){  Bot bot=Bot.createInstance();  Language language=bot.mind().getThought(Language.class);  language.setLearningMode(LearningMode.Disabled);  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("where is alice based");  String response=waitForOutput(output);  if (!response.equals("It is in Oakland, California.")) {    fail("Incorrect response: " + response);  }  text.input("Who, is ALICE Toklas...?");  response=waitForOutput(output);  if (!response.equals("She was the partner of Gertrude Stein, and inventor of the pot brownie.")) {    fail("Incorrect response: " + response);  }  text.input("Is HAL smarter than you?");  response=waitForOutput(output);  if (!response.equals("The ALICE series is the most intelligent chat robot software.")) {    fail("Incorrect response: " + response);  }  text.input("call me alice");  response=waitForOutput(output);  if (!response.equals("My name is ALICE too!")) {    fail("Incorrect response: " + response);  }  text.input("WHERE IS THE DOCUMENTATION");  response=waitForOutput(output);  if (!response.equals("Try visiting <a href=\"http://www.Botbots.com\" target=\"_new\">Botbots.com</a> or <a href=\"http://www.alicebot.org\" target=\"_new\">Alicebot.org</a>.")) {    fail("Incorrect response: " + response);  }  text.input("WHAT DOES A L I C E stand for?");  response=waitForOutput(output);  if (!response.equals("ALICE = Artificial Linguistic Internet Computer Entity")) {    fail("Incorrect response: " + response);  }  bot.shutdown();}  }
class C{  public boolean approveIt(){  log.info("approveIt - " + toString());  setIsApproved(true);  return true;}  }
class C{  public static List<MetaMethod> respondsTo(Object self,String name,Object[] argTypes){  return InvokerHelper.getMetaClass(self).respondsTo(self,name,argTypes);}  }
class C{  private void run(){  SsaBasicBlock root=postdom ? meth.getExitBlock() : meth.getEntryBlock();  if (root != null) {    vertex.add(root);    domInfos[root.getIndex()].idom=root.getIndex();  }  DfsWalker walker=new DfsWalker();  meth.forEachBlockDepthFirst(postdom,walker);  int dfsMax=vertex.size() - 1;  for (int i=dfsMax; i >= 2; --i) {    SsaBasicBlock w=vertex.get(i);    DFSInfo wInfo=info[w.getIndex()];    BitSet preds=getPreds(w);    for (int j=preds.nextSetBit(0); j >= 0; j=preds.nextSetBit(j + 1)) {      SsaBasicBlock predBlock=blocks.get(j);      DFSInfo predInfo=info[predBlock.getIndex()];      if (predInfo != null) {        int predSemidom=info[eval(predBlock).getIndex()].semidom;        if (predSemidom < wInfo.semidom) {          wInfo.semidom=predSemidom;        }      }    }    info[vertex.get(wInfo.semidom).getIndex()].bucket.add(w);    wInfo.ancestor=wInfo.parent;    ArrayList<SsaBasicBlock> wParentBucket;    wParentBucket=info[wInfo.parent.getIndex()].bucket;    while (!wParentBucket.isEmpty()) {      int lastItem=wParentBucket.size() - 1;      SsaBasicBlock last=wParentBucket.remove(lastItem);      SsaBasicBlock U=eval(last);      if (info[U.getIndex()].semidom < info[last.getIndex()].semidom) {        domInfos[last.getIndex()].idom=U.getIndex();      } else {        domInfos[last.getIndex()].idom=wInfo.parent.getIndex();      }    }  }  for (int i=2; i <= dfsMax; ++i) {    SsaBasicBlock w=vertex.get(i);    if (domInfos[w.getIndex()].idom != vertex.get(info[w.getIndex()].semidom).getIndex()) {      domInfos[w.getIndex()].idom=domInfos[domInfos[w.getIndex()].idom].idom;    }  }}  }
class C{  public String maxCountTipText(){  return "The maximum count for any class value (0 = unlimited).";}  }
class C{  private void checkLegality(ExpressionTree node){  if (isLocalVarOrParam(node)) {    if (atypeFactory.getAnnotatedType(node).hasAnnotation(Unusable.class)) {      checker.report(Result.failure("use.unsafe",TreeUtils.elementFromUse(node),node),node);    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  return (a == null) ? new Integer(1) : new Integer(Math.max(1,a.getPartNum()));}  }
class C{  public Map<String,Tuple<Coord,Tuple<Double,Double>>> parseCustomerFile(String inputFile){  BufferedReader br=IOUtils.getBufferedReader(inputFile);  Map<String,Tuple<Coord,Tuple<Double,Double>>> customerMap=new HashMap<String,Tuple<Coord,Tuple<Double,Double>>>();  try {    br.readLine();    String line;    while ((line=br.readLine()) != null) {      String[] array=line.split(",");      String customer=array[1];      double longi=Double.parseDouble(array[2]);      double lati=Double.parseDouble(array[3]);      double distance=Double.parseDouble(array[4]);      double earliestStart=Double.parseDouble(array[5]);      double latestEnd=Double.parseDouble(array[6]);      Coord coord=new Coord(longi,lati);      Tuple<Double,Double> timeWindow=new Tuple<Double,Double>(earliestStart,latestEnd);      Tuple<Coord,Tuple<Double,Double>> entry=new Tuple<Coord,Tuple<Double,Double>>(coord,timeWindow);      customerMap.put(customer,entry);    }  } catch (  IOException e) {    log.error("Could not read customer file");  } finally {    try {      br.close();    } catch (    IOException e) {      log.info("Could not close customer file");    }  }  return customerMap;}  }
class C{  public boolean matches(String s){  return matcher(s).matches();}  }
class C{  public Column removeColumn(String field){  int idx=m_names.indexOf(field);  if (idx < 0) {    throw new IllegalArgumentException("No such column.");  }  return removeColumn(idx);}  }
class C{  public static Container encloseCenterBottom(Component... cmps){  return Container.encloseIn(new FlowLayout(Component.CENTER,Component.BOTTOM),cmps);}  }
class C{  protected void release(){  AppContext tempAppContext=null;synchronized (grabReleaseSynchronizer) {    if (usageCount > 1) {      --usageCount;    } else {synchronized (threadGroupSynchronizer) {        tempAppContext=resetAppContext();      }    }  }  if (tempAppContext != null) {    try {      tempAppContext.dispose();    } catch (    IllegalThreadStateException e) {    }  }}  }
class C{  public void merge(Schedule other){  if (inStep || other.inStep)   throw new RuntimeException("May not merge with another schedule while inside a step method.");  if (sealed || other.sealed)   throw new RuntimeException("May not merge with a sealed schedule.");  if (!other.queue.isEmpty()) {    double minKey=((Key)(other.queue.getMinKey())).getTime();    if (minKey <= getTime())     throw new RuntimeException("May not merge with a schedule which has Steppables scheduled for an earlier time than my current time value.");  }  queue=queue.merge(other.queue);}  }
class C{  @Override public synchronized double score(int sourceId,Sequence<TK> source,List<Sequence<TK>> references,Sequence<TK> translation){  assert sourceId >= 0;  assert references != null && translation != null;  return score(sourceId,references,translation,false);}  }
class C{  private TreeElement findDepthFirst(TreeElement parent,String name){  int len=parent.getNumChildren();  for (int i=0; i < len; ++i) {    TreeElement e=parent.getChildAt(i);    if (name.equals(e.getName())) {      return e;    } else     if (e.getNumChildren() != 0) {      TreeElement v=findDepthFirst(e,name);      if (v != null)       return v;    }  }  return null;}  }
class C{  public double l2Distance(final ColumnVector vector){  final double distance=this.distance(vector,null);  return Math.sqrt(distance);}  }
class C{  public IntHashMap(int initialCapacity,float loadFactor){  super();  if (initialCapacity < 0) {    throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity);  }  if (loadFactor <= 0) {    throw new IllegalArgumentException("Illegal Load: " + loadFactor);  }  if (initialCapacity == 0) {    initialCapacity=1;  }  this.loadFactor=loadFactor;  table=new Entry[initialCapacity];  threshold=(int)(initialCapacity * loadFactor);}  }
class C{  @SuppressWarnings("unchecked") protected static void addFieldToAnnotationBuilder(String fieldKey,Object obj,AnnotationBuilder builder){  if (obj instanceof List<?>) {    builder.setValue(fieldKey,(List<Object>)obj);  } else   if (obj instanceof String) {    builder.setValue(fieldKey,(String)obj);  } else   if (obj instanceof Integer) {    builder.setValue(fieldKey,(Integer)obj);  } else   if (obj instanceof Float) {    builder.setValue(fieldKey,(Float)obj);  } else   if (obj instanceof Long) {    builder.setValue(fieldKey,(Long)obj);  } else   if (obj instanceof Boolean) {    builder.setValue(fieldKey,(Boolean)obj);  } else   if (obj instanceof Character) {    builder.setValue(fieldKey,(Character)obj);  } else   if (obj instanceof Class<?>) {    builder.setValue(fieldKey,(Class<?>)obj);  } else   if (obj instanceof Double) {    builder.setValue(fieldKey,(Double)obj);  } else   if (obj instanceof Float) {    builder.setValue(fieldKey,(Float)obj);  } else   if (obj instanceof Enum<?>) {    builder.setValue(fieldKey,(Enum<?>)obj);  } else   if (obj instanceof Enum<?>[]) {    builder.setValue(fieldKey,(Enum<?>[])obj);  } else   if (obj instanceof AnnotationMirror) {    builder.setValue(fieldKey,(AnnotationMirror)obj);  } else   if (obj instanceof Object[]) {    builder.setValue(fieldKey,(Object[])obj);  } else   if (obj instanceof TypeMirror) {    builder.setValue(fieldKey,(TypeMirror)obj);  } else   if (obj instanceof Short) {    builder.setValue(fieldKey,(Short)obj);  } else   if (obj instanceof VariableElement) {    builder.setValue(fieldKey,(VariableElement)obj);  } else   if (obj instanceof VariableElement[]) {    builder.setValue(fieldKey,(VariableElement[])obj);  } else {    ErrorReporter.errorAbort("Unrecognized type: " + obj.getClass());  }}  }
class C{  public int hashCode(){  return (errorIndex << 16) | index;}  }
class C{  protected void addAtomicPromotionMove(int fromSquare,int toSquare,int colorToMove,int contents,int promotedPiece,PriorityMoveList moves){  if (contents == EMPTY) {    addMove(new Move(fromSquare,toSquare,PAWN,getColorToMove(),getPieceWithPromoteMask(toSquare),promotedPiece,EMPTY_SQUARE,Move.PROMOTION_CHARACTERISTIC),moves);  } else {    Move move=new Move(fromSquare,toSquare,PAWN,getColorToMove(),getPieceWithPromoteMask(toSquare),promotedPiece,EMPTY_SQUARE,Move.PROMOTION_CHARACTERISTIC);    move.setAtomicExplosionInfo(getAtomicExplosionInfo(toSquare,fromSquare,PAWN,getColorToMove()));    addMove(move,moves);  }}  }
class C{  static byte[] hash_df(Digest digest,byte[] seedMaterial,int seedLength){  byte[] temp=new byte[(seedLength + 7) / 8];  int len=temp.length / digest.getDigestSize();  int counter=1;  byte[] dig=new byte[digest.getDigestSize()];  for (int i=0; i <= len; i++) {    digest.update((byte)counter);    digest.update((byte)(seedLength >> 24));    digest.update((byte)(seedLength >> 16));    digest.update((byte)(seedLength >> 8));    digest.update((byte)seedLength);    digest.update(seedMaterial,0,seedMaterial.length);    digest.doFinal(dig,0);    int bytesToCopy=((temp.length - i * dig.length) > dig.length) ? dig.length : (temp.length - i * dig.length);    System.arraycopy(dig,0,temp,i * dig.length,bytesToCopy);    counter++;  }  if (seedLength % 8 != 0) {    int shift=8 - (seedLength % 8);    int carry=0;    for (int i=0; i != temp.length; i++) {      int b=temp[i] & 0xff;      temp[i]=(byte)((b >>> shift) | (carry << (8 - shift)));      carry=b;    }  }  return temp;}  }
class C{  public void waitForSchemaAgreement(String targetSchemaVersion){  waitForSchemaAgreement(targetSchemaVersion,-1);}  }
class C{  protected OperationImpl(){  super();}  }
class C{  public void addPropertyChangeListener(String propertyName,PropertyChangeListener in_pcl){  beanContextChildSupport.addPropertyChangeListener(propertyName,in_pcl);}  }
class C{  public void testDirectCreate(){  new Block("SystemName");}  }
class C{  private String computeXML(){  BodyQName bodyName=getBodyQName();  StringBuilder builder=new StringBuilder();  builder.append("<");  builder.append(bodyName.getLocalPart());  for (  Map.Entry<BodyQName,String> entry : attrs.entrySet()) {    builder.append(" ");    BodyQName name=entry.getKey();    String prefix=name.getPrefix();    if (prefix != null && prefix.length() > 0) {      builder.append(prefix);      builder.append(":");    }    builder.append(name.getLocalPart());    builder.append("='");    builder.append(escape(entry.getValue()));    builder.append("'");  }  builder.append(" ");  builder.append(XMLConstants.XMLNS_ATTRIBUTE);  builder.append("='");  builder.append(bodyName.getNamespaceURI());  builder.append("'>");  if (payload != null) {    builder.append(payload);  }  builder.append("</body>");  return builder.toString();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  CaptureDeviceInput cdi=getCapDevInput(stack);  return cdi == null ? null : cdi.getBroadcastStandard();}  }
class C{  public static int twoBytesToInt(byte[] bytes,ByteOrder order){  if (order == ByteOrder.BIG_ENDIAN) {    return bytesToInt(bytes[0],bytes[1]);  } else   if (order == ByteOrder.LITTLE_ENDIAN) {    return bytesToInt(bytes[1],bytes[0]);  } else {    throw new IllegalArgumentException("ByteOrder must be BIG_ENDIAN or LITTLE_ENDIAN");  }}  }
class C{  public boolean addAll(Collection<? extends E> c){  if (!(c instanceof JumboEnumSet))   return super.addAll(c);  JumboEnumSet<?> es=(JumboEnumSet<?>)c;  if (es.elementType != elementType) {    if (es.isEmpty())     return false; else     throw new ClassCastException(es.elementType + " != " + elementType);  }  for (int i=0; i < elements.length; i++)   elements[i]|=es.elements[i];  return recalculateSize();}  }
class C{  public synchronized boolean hasExpired(){  return getUpdatedDelay() > expiresAfter * (1 + updateFailedCounter / 2);}  }
class C{  public static List<MetricDto> transformToDto(List<Metric> metrics){  if (metrics == null) {    throw new WebApplicationException("Null entity object cannot be converted to Dto object.",Status.INTERNAL_SERVER_ERROR);  }  List<MetricDto> result=new ArrayList<>();  for (  Metric metric : metrics) {    result.add(transformToDto(metric));  }  return result;}  }
class C{  public Model(Node node,DirichletBayesIm dirichletBayesIm,JComponent messageAnchor){  if (node == null) {    throw new NullPointerException("Node must not be null.");  }  if (dirichletBayesIm == null) {    throw new NullPointerException("Bayes IM must not be null.");  }  if (messageAnchor == null) {    throw new NullPointerException("Message anchor must not be null.");  }  this.dirichletBayesIm=dirichletBayesIm;  this.nodeIndex=dirichletBayesIm.getNodeIndex(node);  this.messageAnchor=messageAnchor;}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  int previewFormat=configManager.getPreviewFormat();  String previewFormatString=configManager.getPreviewFormatString();switch (previewFormat) {case PixelFormat.YCbCr_420_SP:case PixelFormat.YCbCr_422_SP:    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());default :  if ("yuv420p".equals(previewFormatString)) {    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());  }}throw new IllegalArgumentException("Unsupported picture format: " + previewFormat + '/'+ previewFormatString);}  }
class C{  public void startFtpDownload(final String hostname,final String uri,final int reportInterval){  initReportTask(reportInterval,true);  mTask.setReportInterval(true);  startFtpDownload(hostname,SpeedTestConst.FTP_DEFAULT_PORT,uri,SpeedTestConst.FTP_DEFAULT_USER,SpeedTestConst.FTP_DEFAULT_PASSWORD);}  }
class C{  synchronized void writeSampleData(final int trackIndex,final ByteBuffer byteBuf,final MediaCodec.BufferInfo bufferInfo){  if (mStatredCount > 0)   mMediaMuxer.writeSampleData(trackIndex,byteBuf,bufferInfo);}  }
class C{  public static void applyToOr(ColorHolder colorHolder,TextView textView,ColorStateList colorDefault){  if (colorHolder != null && textView != null) {    colorHolder.applyToOr(textView,colorDefault);  } else   if (textView != null) {    textView.setTextColor(colorDefault);  }}  }
class C{  void rename(String fromFileName,String toFileName) throws IOException {  send("RNFR " + fromFileName);  readCode(350);  send("RNTO " + toFileName);  readCode(250);}  }
class C{  public void validateLogin(){  Login login=new Login(ctx);  String userId=txtUserId.getValue();  String userPassword=txtPassword.getValue();  String token=(String)txtPassword.getAttribute("user.token.hash");  if (token != null && token.equals(userPassword)) {    userPassword="";    int AD_Session_ID=(Integer)txtPassword.getAttribute("user.token.sid");    MSession session=new MSession(Env.getCtx(),AD_Session_ID,null);    if (session.get_ID() == AD_Session_ID) {      MUser user=MUser.get(Env.getCtx(),session.getCreatedBy());      if (BrowserToken.validateToken(session,user,token)) {        userPassword=user.getPassword();      }    }  }  KeyNamePair rolesKNPairs[]=login.getRoles(userId,userPassword);  if (rolesKNPairs == null || rolesKNPairs.length == 0)   throw new WrongValueException("User Id or Password invalid!!!"); else {    String langName=null;    if (lstLanguage.getSelectedItem() != null)     langName=(String)lstLanguage.getSelectedItem().getLabel(); else     langName=Language.getBaseLanguage().getName();    Language language=findLanguage(langName);    wndLogin.loginOk(userId,userPassword);    Env.setContext(ctx,UserPreference.LANGUAGE_NAME,language.getName());    Locales.setThreadLocal(language.getLocale());    Clients.response("zkLocaleJavaScript",new AuScript(null,ZkFns.outLocaleJavaScript()));    String timeoutText=getUpdateTimeoutTextScript();    if (!Strings.isEmpty(timeoutText))     Clients.response("zkLocaleJavaScript2",new AuScript(null,timeoutText));  }  Session currSess=Executions.getCurrent().getDesktop().getSession();  currSess.setAttribute("Check_AD_User_ID",Env.getAD_User_ID(ctx));  Env.setContext(ctx,BrowserToken.REMEMBER_ME,chkRememberMe.isChecked());  String version=DB.getSQLValueString(null,"SELECT Version FROM AD_System");  if (!Adempiere.DB_VERSION.equals(version)) {    String AD_Message="DatabaseVersionError";    String msg=Msg.getMsg(ctx,AD_Message);    msg=MessageFormat.format(msg,new Object[]{Adempiere.DB_VERSION,version});    throw new ApplicationException(msg);  }}  }
class C{  public CalendarWeekDayFormatter(){  this(CalendarUtils.getInstance());}  }
class C{  public CipherInputStream(InputStream is,StreamCipher cipher,int bufSize){  super(is);  this.streamCipher=cipher;  this.inBuf=new byte[bufSize];  this.skippingCipher=(cipher instanceof SkippingCipher) ? (SkippingCipher)cipher : null;}  }
class C{  public boolean isInvoked(){  return isInvoked;}  }
class C{  public Object remove(Object name){  return map.remove(name);}  }
class C{  public static int hash32(final byte[] data,int length,int seed){  final int m=0x5bd1e995;  final int r=24;  int h=seed ^ length;  int length4=length / 4;  for (int i=0; i < length4; i++) {    final int i4=i * 4;    int k=(data[i4 + 0] & 0xff) + ((data[i4 + 1] & 0xff) << 8) + ((data[i4 + 2] & 0xff) << 16)+ ((data[i4 + 3] & 0xff) << 24);    k*=m;    k^=k >>> r;    k*=m;    h*=m;    h^=k;  }switch (length % 4) {case 3:    h^=(data[(length & ~3) + 2] & 0xff) << 16;case 2:  h^=(data[(length & ~3) + 1] & 0xff) << 8;case 1:h^=(data[length & ~3] & 0xff);h*=m;}h^=h >>> 13;h*=m;h^=h >>> 15;return h;}  }
class C{  @Override public void registerOutParameter(String parameterName,int sqlType) throws SQLException {  registerOutParameter(getIndexForName(parameterName),sqlType);}  }
class C{  public Builder namedConsumerStrategy(SystemConsumerStrategy namedConsumerStrategy){  this.namedConsumerStrategy=namedConsumerStrategy;  return this;}  }
class C{  private OverrideUrlLoadingResult clobberCurrentTabWithFallbackUrl(String browserFallbackUrl,ExternalNavigationParams params){  if (!params.isMainFrame()) {    return OverrideUrlLoadingResult.NO_OVERRIDE;  }  if (params.getRedirectHandler() != null) {    params.getRedirectHandler().setShouldNotOverrideUrlLoadingUntilNewUrlLoading();  }  return mDelegate.clobberCurrentTab(browserFallbackUrl,params.getReferrerUrl(),params.getTab());}  }
class C{  @Override public void onCountDownStop(long millisInFuture){  Toast.makeText(StyleActivity.this,"onCountDownStop",Toast.LENGTH_SHORT).show();}  }
class C{  public Device(DeviceManagerImpl deviceManager,Long deviceKey,String dhcpClientName,Collection<AttachmentPoint> oldAPs,Collection<AttachmentPoint> attachmentPoints,Collection<Entity> entities,IEntityClass entityClass){  this.deviceManager=deviceManager;  this.deviceKey=deviceKey;  this.dhcpClientName=dhcpClientName;  this.entities=entities.toArray(new Entity[entities.size()]);  this.oldAPs=null;  this.attachmentPoints=null;  if (oldAPs != null) {    this.oldAPs=new ArrayList<AttachmentPoint>(oldAPs);  }  if (attachmentPoints != null) {    this.attachmentPoints=new ArrayList<AttachmentPoint>(attachmentPoints);  }  this.macAddressString=this.entities[0].getMacAddress().toString();  this.entityClass=entityClass;  Arrays.sort(this.entities);  vlanIds=computeVlandIds();}  }
class C{  public void append(NSString s){  append(s.getContent());}  }
class C{  public void focusLost(FocusEvent e){  getHandler().focusLost(e);}  }
class C{  public boolean hasBatchInterrupted(){  return hasExtension(BatchInterrupted.class);}  }
class C{  public static void putByte(byte[] arr,long off,byte val){  UNSAFE.putByte(arr,off,val);}  }
class C{  public static Date createRelativeAge(double age,Type units){  return new Date(age,units,true);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.REACTION__NAME:    setName(NAME_EDEFAULT);  return;case SexecPackage.REACTION__CHECK:setCheck((Check)null);return;case SexecPackage.REACTION__EFFECT:setEffect((Step)null);return;case SexecPackage.REACTION__TRANSITION:setTransition(TRANSITION_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  Node<E> node(int index){  if (index < (size >> 1)) {    Node<E> x=first;    for (int i=0; i < index; i++)     x=x.next;    return x;  } else {    Node<E> x=last;    for (int i=size - 1; i > index; i--)     x=x.prev;    return x;  }}  }
class C{  public java.lang.StringBuilder append(double d){  return null;}  }
class C{  public static double absAverageLinkDiff(ArrayList<EventLog> eventLog1,ArrayList<EventLog> eventLog2){  HashMap<Integer,Double[]> hm=new HashMap<Integer,Double[]>();  assert eventLog1.size() == eventLog2.size() : "The size of both eventLogs must be the same!" + eventLog1.size() + " - "+ eventLog2.size();  for (int i=0; i < eventLog1.size(); i++) {    int link1=eventLog1.get(i).getLinkId();    if (!hm.containsKey(link1)) {      Double[] d=new Double[4];      d[0]=0d;      d[1]=0d;      d[2]=0d;      d[3]=0d;      hm.put(link1,d);    }    hm.get(link1)[1]=eventLog1.get(i).time - hm.get(link1)[0];    int link2=eventLog2.get(i).getLinkId();    if (!hm.containsKey(link2)) {      Double[] d=new Double[4];      d[0]=0d;      d[1]=0d;      d[2]=0d;      d[3]=0d;      hm.put(link2,d);    }    hm.get(link2)[3]=eventLog2.get(i).time - hm.get(link2)[2];  }  double absSum=0;  double absAverage=0;  for (  Double[] d : hm.values()) {    absSum+=Math.abs(d[1] - d[3]);  }  absAverage=absSum / hm.size();  System.out.println("absSumLink:" + absSum);  System.out.println("absAverageLinkDiff:" + absAverage);  return absAverage;}  }
class C{  public static Intent create(Context context,List<String> userIds){  final Intent intent=new Intent(context,NameGroupActivity.class);  intent.putStringArrayListExtra(EXTRA_USER_IDS,new ArrayList<>(userIds));  return intent;}  }
class C{  private void mergeHi(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  T[] a=this.a;  T[] tmp=ensureCapacity(len2);  System.arraycopy(a,base2,tmp,0,len2);  int cursor1=base1 + len1 - 1;  int cursor2=len2 - 1;  int dest=base2 + len2 - 1;  a[dest--]=a[cursor1--];  if (--len1 == 0) {    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);    return;  }  if (len2 == 1) {    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];    return;  }  Comparator<? super T> c=this.c;  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      if (c.compare(tmp[cursor2],a[cursor1]) < 0) {        a[dest--]=a[cursor1--];        count1++;        count2=0;        if (--len1 == 0)         break outer;      } else {        a[dest--]=tmp[cursor2--];        count2++;        count1=0;        if (--len2 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      count1=len1 - gallopRight(tmp[cursor2],a,base1,len1,len1 - 1,c);      if (count1 != 0) {        dest-=count1;        cursor1-=count1;        len1-=count1;        System.arraycopy(a,cursor1 + 1,a,dest + 1,count1);        if (len1 == 0)         break outer;      }      a[dest--]=tmp[cursor2--];      if (--len2 == 1)       break outer;      count2=len2 - gallopLeft(a[cursor1],tmp,0,len2,len2 - 1,c);      if (count2 != 0) {        dest-=count2;        cursor2-=count2;        len2-=count2;        System.arraycopy(tmp,cursor2 + 1,a,dest + 1,count2);        if (len2 <= 1)         break outer;      }      a[dest--]=a[cursor1--];      if (--len1 == 0)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len2 == 1) {    if (DEBUG)     assert len1 > 0;    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];  } else   if (len2 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len1 == 0;    if (DEBUG)     assert len2 > 0;    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  CaptureDeviceInput cdi=getCapDevInput(stack);  return (cdi == null) ? "" : CaptureDeviceInput.getCrossbarNameForType(cdi.getType());}  }
class C{  public static void center(JDialog frame){  Dimension screen_size=Toolkit.getDefaultToolkit().getScreenSize();  frame.setLocation((int)((screen_size.getWidth() - frame.getWidth()) / 2),(int)((screen_size.getHeight() - frame.getHeight()) / 2));}  }
class C{  private void doWatchdogCheck(){  mHaveWatchdogScheduled=false;  if (!mIsRunning) {    return;  }  long now=mMonotonicClock.now();  boolean hasNotDrawnWithinTimeout=mWaitingForDraw && now - mLastInvalidateTimeMs > WATCH_DOG_TIMER_MIN_TIMEOUT_MS;  boolean hasNotAdvancedFrameWithinTimeout=mNextFrameTaskMs != -1 && now - mNextFrameTaskMs > WATCH_DOG_TIMER_MIN_TIMEOUT_MS;  if (hasNotDrawnWithinTimeout || hasNotAdvancedFrameWithinTimeout) {    dropCaches();    doInvalidateSelf();  } else {    mScheduledExecutorServiceForUiThread.schedule(mWatchdogTask,WATCH_DOG_TIMER_POLL_INTERVAL_MS,TimeUnit.MILLISECONDS);    mHaveWatchdogScheduled=true;  }}  }
class C{  private void updateTouchSelectorColor(final int touchSelectorColor){  final Drawable content=getDrawable();  if (content != null && content instanceof OkulusDrawable) {    ((OkulusDrawable)content).setTouchSelectorColor(touchSelectorColor);    invalidate();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:21.395 -0500",hash_original_method="FF1AB110B94FCC8AEFA697D75FFC57DD",hash_generated_method="B371B1A5EBF86980C6290FA035BAE684") public void connected(){}  }
class C{  public void testMergeMultipleServletsIntoEmptyDocument() throws Exception {  String srcXml="<web-app></web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <servlet>" + "    <servlet-name>s1</servlet-name>"+ "    <servlet-class>sclass1</servlet-class>"+ "  </servlet>"+ "  <servlet>"+ "    <servlet-name>s2</servlet-name>"+ "    <servlet-class>sclass2</servlet-class>"+ "  </servlet>"+ "  <servlet>"+ "    <servlet-name>s3</servlet-name>"+ "    <servlet-class>sclass3</servlet-class>"+ "  </servlet>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.merge(mergeWebXml);  List<String> servletNames=WebXmlUtils.getServletNames(srcWebXml);  assertEquals(3,servletNames.size());  assertEquals("s1",servletNames.get(0));  assertEquals("s2",servletNames.get(1));  assertEquals("s3",servletNames.get(2));}  }
class C{  public static ConflictResolutionPolicy showDialog(String targetMethodName){  int exit=Messages.showYesNoCancelDialog("Replace existing " + targetMethodName + " method","Method Already Exists",Messages.getQuestionIcon());  if (exit == Messages.CANCEL) {    return CancelPolicy.getInstance();  }  if (exit == Messages.YES) {    return ReplacePolicy.getInstance();  }  if (exit == Messages.NO) {    return DuplicatePolicy.getInstance();  }  throw new IllegalArgumentException("exit code [" + exit + "] from YesNoCancelDialog not supported");}  }
class C{  protected IntLiteralImpl(){  super();}  }
class C{  public OccupantArea(final int width,final int height,final int interval){  super(width,height);  this.interval=interval;  playersOnly=false;  targets=new LinkedList<RPEntity.ID>();}  }
class C{  public static void showContactOnMap(Context ctx,ContactId contact,Geoloc geoloc){  HashMap<String,Geoloc> mapContactGeoloc=new HashMap<>();  String displayName=RcsContactUtil.getInstance(ctx).getDisplayName(contact);  mapContactGeoloc.put(displayName,geoloc);  Intent intent=new Intent(ctx,DisplayGeoloc.class);  intent.putExtra(DisplayGeoloc.EXTRA_GEOLOC,mapContactGeoloc);  ctx.startActivity(intent);}  }
class C{  public void invalidateWheel(boolean clearCaches){  if (clearCaches) {    recycle.clearAll();    if (itemsLayout != null) {      itemsLayout.removeAllViews();    }    scrollingOffset=0;  } else   if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());  }  invalidate();}  }
class C{  @Override public void write(int b){}  }
class C{  @TargetApi(21) public static MusicVideoDetailsFragment newInstance(MusicVideoListFragment.ViewHolder vh){  MusicVideoDetailsFragment fragment=new MusicVideoDetailsFragment();  Bundle args=new Bundle();  args.putInt(BUNDLE_KEY_ID,vh.musicVideoId);  args.putString(BUNDLE_KEY_TITLE,vh.musicVideoTitle);  args.putString(BUNDLE_KEY_ALBUM,vh.album);  args.putString(BUNDLE_KEY_ARTIST,vh.artist);  args.putString(BUNDLE_KEY_GENRES,vh.genres);  args.putString(BUNDLE_KEY_PLOT,vh.plot);  args.putInt(BUNDLE_KEY_RUNTIME,vh.runtime);  args.putInt(BUNDLE_KEY_YEAR,vh.year);  if (Utils.isLollipopOrLater()) {    args.putString(POSTER_TRANS_NAME,vh.artView.getTransitionName());  }  fragment.setArguments(args);  return fragment;}  }
class C{  public Component unregister(Provider provider) throws ProviderMissingException {  return unregister(provider.type(),provider.getQualifier());}  }
class C{  public byte[] decrypt(byte[] data,TorPrivateKey privateKey){  if (data.length < PK_ENC_LEN)   throw new TorException("Message is too short");  if (data.length == PK_ENC_LEN)   return decryptSimple(data,privateKey);  final byte[] c1=new byte[PK_ENC_LEN];  final byte[] c2=new byte[data.length - PK_ENC_LEN];  System.arraycopy(data,0,c1,0,PK_ENC_LEN);  System.arraycopy(data,PK_ENC_LEN,c2,0,c2.length);  final byte[] kAndM1=decryptSimple(c1,privateKey);  final byte[] streamKey=new byte[TorStreamCipher.KEY_LEN];  final int m1Length=kAndM1.length - TorStreamCipher.KEY_LEN;  final byte[] m1=new byte[m1Length];  System.arraycopy(kAndM1,0,streamKey,0,TorStreamCipher.KEY_LEN);  System.arraycopy(kAndM1,TorStreamCipher.KEY_LEN,m1,0,m1Length);  final TorStreamCipher streamCipher=TorStreamCipher.createFromKeyBytes(streamKey);  streamCipher.encrypt(c2);  final byte[] m2=c2;  final byte[] output=new byte[m1.length + m2.length];  System.arraycopy(m1,0,output,0,m1.length);  System.arraycopy(m2,0,output,m1.length,m2.length);  return output;}  }
class C{  public static String dump(byte[] arr,int offset,int length,int outOffset,int bpl,int addressLength){  int end=offset + length;  if (((offset | length | end) < 0) || (end > arr.length)) {    throw new IndexOutOfBoundsException("arr.length " + arr.length + "; "+ offset+ "..!"+ end);  }  if (outOffset < 0) {    throw new IllegalArgumentException("outOffset < 0");  }  if (length == 0) {    return "";  }  StringBuffer sb=new StringBuffer(length * 4 + 6);  int col=0;  while (length > 0) {    if (col == 0) {      String astr;switch (addressLength) {case 2:        astr=Hex.u1(outOffset);      break;case 4:    astr=Hex.u2(outOffset);  break;case 6:astr=Hex.u3(outOffset);break;default :astr=Hex.u4(outOffset);break;}sb.append(astr);sb.append(": ");} else if ((col & 1) == 0) {sb.append(' ');}sb.append(Hex.u1(arr[offset]));outOffset++;offset++;col++;if (col == bpl) {sb.append('\n');col=0;}length--;}if (col != 0) {sb.append('\n');}return sb.toString();}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  @Override public void actionPerformed(ActionEvent event){  String command=event.getActionCommand();  if (command.equals("AngleOffsetValue")) {    validateAngleOffset();  } else   if (command.equals("TickUnitValue")) {    validateTickUnit();  }}  }
class C{  public void resetData(){  mLastReceivedPdu=null;  sDataSet=false;}  }
class C{  private void addRequestHeaders(InnerState innerState,HttpGet request){  if (innerState.mContinuingDownload) {    if (innerState.mHeaderETag != null) {      request.addHeader("If-Match",innerState.mHeaderETag);    }    request.addHeader("Range","bytes=" + innerState.mBytesSoFar + "-");  }}  }
class C{  public static final int previousMonthLength(int year,int month){  return (month > 0) ? monthLength(year,month - 1) : 31;}  }
class C{  public static void invertSelection(final ZyGraph graph){  Preconditions.checkNotNull(graph,"IE01741: Graph argument can not be null");  SelectionFunctions.invertSelection(graph);  if (graph.getSettings().getProximitySettings().getProximityBrowsingFrozen()) {    graph.selectNodes(GraphHelpers.filter(graph,new CInvisibleNodeFilter()),false);  }}  }
class C{  public IpcSharedMemoryOperationTimedoutException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  protected boolean convertToUppercase(){  return false;}  }
class C{  public void testLoadContent1(){  System.out.println("LoadContent with 1 file");  mockInitialisationCalls(false,AuditStatus.CONTENT_LOADING);  fileMap.put("My File Name","MyFileContent");  EasyMock.expect(mockAudit.getStatus()).andReturn(AuditStatus.CONTENT_LOADING).once();  Page mockPage=EasyMock.createMock(Page.class);  EasyMock.expect(mockWebResourceDataService.createPage("My File Name")).andReturn(mockPage).once();  mockPage.setAudit(mockAudit);  EasyMock.expectLastCall().once();  EasyMock.expect(mockWebResourceDataService.saveOrUpdate(mockPage)).andReturn(mockPage).once();  mockAudit.setSubject(mockPage);  EasyMock.expectLastCall().once();  EasyMock.expect(mockAudit.getSubject()).andReturn(mockPage).once();  EasyMock.expect(mockContentLoaderService.loadContent(mockPage,fileMap)).andReturn(new ArrayList<Content>()).once();  mockAudit.setStatus(AuditStatus.CONTENT_ADAPTING);  EasyMock.expectLastCall().once();  EasyMock.expect(mockAuditDataService.saveOrUpdate(mockAudit)).andReturn(mockAudit).once();  EasyMock.replay(mockPage);  setReplayMode();  UploadAuditCommandImpl instance=getInstance();  instance.loadContent();  EasyMock.verify(mockPage);  setVerifyMode();}  }
class C{  void init(boolean decrypting,String algorithm,byte[] key,byte[] iv) throws InvalidKeyException {  if ((key == null) || (iv == null) || (iv.length != blockSize)) {    throw new InvalidKeyException("Internal error");  }  this.iv=iv;  reset();  embeddedCipher.init(decrypting,algorithm,key);}  }
class C{  public static boolean isPN_CHARS(int codePoint){  return isPN_CHARS_U(codePoint) || ASCIIUtil.isNumber(codePoint) || codePoint == '-' || codePoint == 0x00B7 || codePoint >= 0x0300 && codePoint <= 0x036F || codePoint >= 0x203F && codePoint <= 0x2040;}  }
class C{  protected void decomposePolygon(List<Vector2> polygon,List<Convex> polygons){  int size=polygon.size();  Vector2 upperIntersection=new Vector2();  Vector2 lowerIntersection=new Vector2();  double upperDistance=Double.MAX_VALUE;  double lowerDistance=Double.MAX_VALUE;  double closestDistance=Double.MAX_VALUE;  int upperIndex=0;  int lowerIndex=0;  int closestIndex=0;  List<Vector2> lower=new ArrayList<Vector2>();  List<Vector2> upper=new ArrayList<Vector2>();  for (int i=0; i < size; i++) {    Vector2 p=polygon.get(i);    Vector2 p0=polygon.get(i - 1 < 0 ? size - 1 : i - 1);    Vector2 p1=polygon.get(i + 1 == size ? 0 : i + 1);    if (isReflex(p0,p,p1)) {      for (int j=0; j < size; j++) {        Vector2 q=polygon.get(j);        Vector2 q0=polygon.get(j - 1 < 0 ? size - 1 : j - 1);        Vector2 q1=polygon.get(j + 1 == size ? 0 : j + 1);        Vector2 s=new Vector2();        if (left(p0,p,q) && rightOn(p0,p,q0)) {          if (this.getIntersection(p0,p,q,q0,s)) {            if (right(p1,p,s)) {              double dist=p.distanceSquared(s);              if (dist < lowerDistance) {                lowerDistance=dist;                lowerIntersection.set(s);                lowerIndex=j;              }            }          }        }        if (left(p1,p,q1) && rightOn(p1,p,q)) {          if (this.getIntersection(p1,p,q,q1,s)) {            if (left(p0,p,s)) {              double dist=p.distanceSquared(s);              if (dist < upperDistance) {                upperDistance=dist;                upperIntersection.set(s);                upperIndex=j;              }            }          }        }      }      if (lowerIndex == (upperIndex + 1) % size) {        Vector2 s=upperIntersection.sum(lowerIntersection).multiply(0.5);        if (i < upperIndex) {          lower.addAll(polygon.subList(i,upperIndex + 1));          lower.add(s);          upper.add(s);          if (lowerIndex != 0)           upper.addAll(polygon.subList(lowerIndex,size));          upper.addAll(polygon.subList(0,i + 1));        } else {          if (i != 0)           lower.addAll(polygon.subList(i,size));          lower.addAll(polygon.subList(0,upperIndex + 1));          lower.add(s);          upper.add(s);          upper.addAll(polygon.subList(lowerIndex,i + 1));        }      } else {        if (lowerIndex > upperIndex) {          upperIndex+=size;        }        closestIndex=lowerIndex;        for (int j=lowerIndex; j <= upperIndex; j++) {          int jmod=j % size;          Vector2 q=polygon.get(jmod);          if (q == p || q == p0 || q == p1)           continue;          double dist=p.distanceSquared(q);          if (dist < closestDistance) {            if (this.isVisible(polygon,i,jmod)) {              closestDistance=dist;              closestIndex=jmod;            }          }        }        if (i < closestIndex) {          lower.addAll(polygon.subList(i,closestIndex + 1));          if (closestIndex != 0)           upper.addAll(polygon.subList(closestIndex,size));          upper.addAll(polygon.subList(0,i + 1));        } else {          if (i != 0)           lower.addAll(polygon.subList(i,size));          lower.addAll(polygon.subList(0,closestIndex + 1));          upper.addAll(polygon.subList(closestIndex,i + 1));        }      }      if (lower.size() < upper.size()) {        decomposePolygon(lower,polygons);        decomposePolygon(upper,polygons);      } else {        decomposePolygon(upper,polygons);        decomposePolygon(lower,polygons);      }      return;    }  }  if (polygon.size() < 3) {    throw new IllegalArgumentException(Messages.getString("geometry.decompose.crossingEdges"));  }  Vector2[] vertices=new Vector2[polygon.size()];  polygon.toArray(vertices);  polygons.add(Geometry.createPolygon(vertices));}  }
class C{  public static <T>T splitEachLine(CharSequence self,Pattern pattern,@ClosureParams(value=FromString.class,options={"List<String>","String[]"},conflictResolutionStrategy=PickFirstResolver.class) Closure<T> closure){  T result=null;  for (  String line : new LineIterable(self)) {    List vals=Arrays.asList(pattern.split(line));    result=closure.call(vals);  }  return result;}  }
class C{  private boolean[] correctBits(boolean[] rawbits) throws FormatException {  GenericGF gf;  int codewordSize;  if (ddata.getNbLayers() <= 2) {    codewordSize=6;    gf=GenericGF.AZTEC_DATA_6;  } else   if (ddata.getNbLayers() <= 8) {    codewordSize=8;    gf=GenericGF.AZTEC_DATA_8;  } else   if (ddata.getNbLayers() <= 22) {    codewordSize=10;    gf=GenericGF.AZTEC_DATA_10;  } else {    codewordSize=12;    gf=GenericGF.AZTEC_DATA_12;  }  int numDataCodewords=ddata.getNbDatablocks();  int numCodewords=rawbits.length / codewordSize;  if (numCodewords < numDataCodewords) {    throw FormatException.getFormatInstance();  }  int offset=rawbits.length % codewordSize;  int numECCodewords=numCodewords - numDataCodewords;  int[] dataWords=new int[numCodewords];  for (int i=0; i < numCodewords; i++, offset+=codewordSize) {    dataWords[i]=readCode(rawbits,offset,codewordSize);  }  try {    ReedSolomonDecoder rsDecoder=new ReedSolomonDecoder(gf);    rsDecoder.decode(dataWords,numECCodewords);  } catch (  ReedSolomonException ex) {    throw FormatException.getFormatInstance(ex);  }  int mask=(1 << codewordSize) - 1;  int stuffedBits=0;  for (int i=0; i < numDataCodewords; i++) {    int dataWord=dataWords[i];    if (dataWord == 0 || dataWord == mask) {      throw FormatException.getFormatInstance();    } else     if (dataWord == 1 || dataWord == mask - 1) {      stuffedBits++;    }  }  boolean[] correctedBits=new boolean[numDataCodewords * codewordSize - stuffedBits];  int index=0;  for (int i=0; i < numDataCodewords; i++) {    int dataWord=dataWords[i];    if (dataWord == 1 || dataWord == mask - 1) {      Arrays.fill(correctedBits,index,index + codewordSize - 1,dataWord > 1);      index+=codewordSize - 1;    } else {      for (int bit=codewordSize - 1; bit >= 0; --bit) {        correctedBits[index++]=(dataWord & (1 << bit)) != 0;      }    }  }  return correctedBits;}  }
class C{  public Builder(RequestFieldLengthProvider provider){  this.provider=provider;  this.requestMessage=new RequestMessage();}  }
class C{  public void sendRegistrationEvent(LicenseInfoExt licenseInfo,MediaType mediaType){  if (licenseInfo.isTrialLicense()) {    _log.info("CallHomeEventsFacade will not send registration event for trial license of type {}",licenseInfo.getLicenseType().toString());    return;  }  licenseInfo.setLastRegistrationEventDate(formatCurrentDate());  _log.info("CallHomeEventsFacade::sendRegistrationEvent updating coordinator with {} registration data",licenseInfo.getLicenseType().toString());  _licenseManager.updateCoordinatorWithLicenseInfo(licenseInfo);  _log.info("CallHomeEventsFacade::sendRegistrationEvent sending {} registration to SYR",licenseInfo.getLicenseType());  SendRegistrationEvent sendRegistrationEvent=new SendRegistrationEvent(serviceInfo,logSvcPropertiesLoader,mediaType,licenseInfo,coordinator);  sendRegistrationEvent.callEMCHome();}  }
class C{  private List<Extension> search(String keyword,boolean includeEmptySubject,boolean searchForCores){  List<Extension> list=new ArrayList<Extension>();  keyword=StringUtils.trimToNull(keyword);  if (keyword != null) {    keyword=keyword.toLowerCase();    for (    Extension e : extensionsByRowtype.values()) {      if ((searchForCores && !e.isCore()) || (!searchForCores && e.isCore())) {        continue;      }      if (includeEmptySubject && StringUtils.trimToNull(e.getSubject()) == null || StringUtils.containsIgnoreCase(e.getSubject(),keyword)) {        list.add(e);      }    }  }  return list;}  }
class C{  public Language(final String id,final IModel<?> model){  super(id,model);}  }
class C{  private static void showStartTraceProgressWindow(final JFrame parent,final Set<BreakpointAddress> addresses,final TraceLogger logger,final int maximumHits){  final TraceList trace=createTrace(parent,logger);  final CStartTraceListener bpl=new CStartTraceListener(logger,trace,addresses,maximumHits);  CProgressDialog.showEndless(parent,"Setting echo breakpoints",bpl);}  }
class C{  public JBIG2Exception(String message){  super(message);}  }
class C{  public static QueryUniqueIdentifiersForFileSystemsResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryUniqueIdentifiersForFileSystemsResponse object=new QueryUniqueIdentifiersForFileSystemsResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryUniqueIdentifiersForFileSystemsResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryUniqueIdentifiersForFileSystemsResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(reader.getElementText());      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(reader.getElementText());            }          } else {            loopDone1=true;          }        }      }      object.set_return((java.lang.String[])list1.toArray(new java.lang.String[list1.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  private boolean isUnmarkedFileLocation(String aLocation){  return aLocation.indexOf(':') < 2;}  }
class C{  public Object remove(String key){  return this.map.remove(key);}  }
class C{  public void addTag(String text,int position){  onAddTag(text,position);  postInvalidate();}  }
class C{  public T caseGenExpr_(GenExpr_ object){  return null;}  }
class C{  protected ZKLogMetadata(URI uri,String logName,String logIdentifier){  this.uri=uri;  this.logName=logName;  this.logIdentifier=logIdentifier;  this.logRootPath=getLogRootPath(uri,logName,logIdentifier);  this.logSegmentsPath=logRootPath + LOGSEGMENTS_PATH;  this.lockPath=logRootPath + LOCK_PATH;  this.maxTxIdPath=logRootPath + MAX_TXID_PATH;  this.allocationPath=logRootPath + ALLOCATION_PATH;}  }
class C{  public static int negHalfWidth(final int min,final int max){  if (min > max) {    throw new IllegalArgumentException("min [" + min + "] must be <= max ["+ max+ "]");  }  int mean=meanLow(min,max);  return min - mean - ((min ^ max) & 1);}  }
class C{  public JBBPNumericField findForFieldOffset(final int offset){  JBBPNumericField result=null;  for (  final Map.Entry<JBBPNamedFieldInfo,JBBPNumericField> f : fieldMap.entrySet()) {    if (f.getKey().getFieldOffsetInCompiledBlock() == offset) {      result=f.getValue();      break;    }  }  return result;}  }
class C{  public DeleteMessageBatchResult deleteMessageBatch(DeleteMessageBatchRequest deleteMessageBatchRequest){  if (deleteMessageBatchRequest == null) {    String errorMessage="deleteMessageBatchRequest cannot be null.";    LOG.error(errorMessage);    throw new AmazonClientException(errorMessage);  }  deleteMessageBatchRequest.getRequestClientOptions().appendUserAgent(SQSExtendedClientConstants.USER_AGENT_HEADER);  if (!clientConfiguration.isLargePayloadSupportEnabled()) {    return super.deleteMessageBatch(deleteMessageBatchRequest);  }  for (  DeleteMessageBatchRequestEntry entry : deleteMessageBatchRequest.getEntries()) {    String receiptHandle=entry.getReceiptHandle();    String origReceiptHandle=receiptHandle;    if (isS3ReceiptHandle(receiptHandle)) {      deleteMessagePayloadFromS3(receiptHandle);      origReceiptHandle=getOrigReceiptHandle(receiptHandle);    }    entry.setReceiptHandle(origReceiptHandle);  }  return super.deleteMessageBatch(deleteMessageBatchRequest);}  }
class C{  private boolean apply(GridClientPredicate<N>[] p,N n){  if (p != null) {    for (    GridClientPredicate<? super N> r : p) {      if (r != null && !r.apply(n))       return false;    }  }  return true;}  }
class C{  public IntSparseArrayDataRow(int size){  super(size);  values=new int[size];}  }
class C{  public T caseFormalParameter(FormalParameter object){  return null;}  }
class C{  public boolean hitsDrawingArea(Rectangle rect){  return mDrawingArea.intersects((float)rect.getMinY(),(float)rect.getMaxY());}  }
class C{  public static Object invokeMethod(Object object,String method,Object arguments){  return InvokerHelper.invokeMethod(object,method,arguments);}  }
class C{  public void addExtension(ASN1ObjectIdentifier oid,boolean critical,byte[] value){  if (extensions.containsKey(oid)) {    throw new IllegalArgumentException("extension " + oid + " already added");  }  extOrdering.addElement(oid);  extensions.put(oid,new X509Extension(critical,new DEROctetString(value)));}  }
class C{  public void hideFloatingActionButton(){  if (!mHidden) {    ObjectAnimator scaleX=ObjectAnimator.ofFloat(this,"scaleX",1,0);    ObjectAnimator scaleY=ObjectAnimator.ofFloat(this,"scaleY",1,0);    AnimatorSet animSetXY=new AnimatorSet();    animSetXY.playTogether(scaleX,scaleY);    animSetXY.setInterpolator(accelerateInterpolator);    animSetXY.setDuration(100);    animSetXY.start();    mHidden=true;  }}  }
class C{  private static void createDefaultAddressSpace(final JFrame parent,final INaviProject newProject) throws CouldntSaveDataException {  final CAddressSpace addressSpace=newProject.getContent().createAddressSpace("Default address space");  try {    addressSpace.load();  } catch (  final CouldntLoadDataException exception) {    CUtilityFunctions.logException(exception);    final String innerMessage="E00139: " + "Default address space could not be loaded";    final String innerDescription=CUtilityFunctions.createDescription("The default address space of the new project could not be loaded.",new String[]{"There was a problem with the database connection."},new String[]{"The new project was created but its default address space could not be loaded."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,exception);  }catch (  final LoadCancelledException e) {  }}  }
class C{  public URI startSubscriptionService(Operation subscribe,Service notificationTarget,ServiceSubscriber request){  if (subscribe == null) {    throw new IllegalArgumentException("subscribe operation is required");  }  if (subscribe.getUri() == null) {    subscribe.fail(new IllegalArgumentException("subscribe URI is required"));    return null;  }  if (!subscribe.getUri().getPath().endsWith(SERVICE_URI_SUFFIX_SUBSCRIPTIONS)) {    subscribe.setUri(UriUtils.extendUri(subscribe.getUri(),SERVICE_URI_SUFFIX_SUBSCRIPTIONS));  }  if (notificationTarget.getProcessingStage().ordinal() > ProcessingStage.AVAILABLE.ordinal()) {    subscribe.fail(new IllegalArgumentException("subscription notification target cannot be reused"));    return null;  }  URI subscriptionUri;  String notificationTargetSelfLink=notificationTarget.getSelfLink();  if (notificationTarget.getProcessingStage() == ProcessingStage.AVAILABLE) {    if (request.usePublicUri) {      subscriptionUri=UriUtils.buildPublicUri(notificationTarget.getHost(),notificationTargetSelfLink);    } else {      subscriptionUri=notificationTarget.getUri();    }  } else {    if (notificationTargetSelfLink == null) {      notificationTargetSelfLink=UUID.randomUUID().toString();    }    if (request.usePublicUri) {      subscriptionUri=UriUtils.buildPublicUri(this,notificationTargetSelfLink);    } else {      subscriptionUri=UriUtils.buildUri(this,notificationTargetSelfLink);    }  }  if (request.documentExpirationTimeMicros != 0) {    long delta=request.documentExpirationTimeMicros - Utils.getSystemNowMicrosUtc();    if (delta <= 0) {      log(Level.WARNING,"Expiration time is in the past: %d",request.documentExpirationTimeMicros);      subscribe.fail(new CancellationException("Subscription has already expired"));      return null;    }    schedule(null,delta,TimeUnit.MICROSECONDS);  }  request.reference=subscriptionUri;  subscribe.setBody(request);  Operation post=Operation.createPost(subscriptionUri).setAuthorizationContext(this.getSystemAuthorizationContext()).setCompletion(null);  if (notificationTarget.getProcessingStage() == ProcessingStage.CREATED) {    this.startService(post,notificationTarget);  } else {    post.complete();  }  return subscriptionUri;}  }
class C{  public static void i(String tag,String msg,Object... args){  if (sLevel > LEVEL_INFO) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.i(tag,msg);}  }
class C{  public void testSinglePartition() throws Exception {  TungstenProperties conf=generateConfig();  PluginContext context=new ReplicatorRuntime(conf,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  ParallelQueueStore pqs=new ParallelQueueStore();  pqs.configure(context);  pqs.prepare(context);  assertEquals("1 partition by default",1,pqs.getPartitions());  pqs.release(context);}  }
class C{  public boolean isSignatureValid(String signature,String data){  if (!signature.isEmpty()) {    RSATool tool=RSAToolFactory.getRSATool();    RSAKey thePublicKey=new RSAKeyImpl(theCertificate.getPublicKey());    try {      String hash=DigestUtils.sha256Hex(data);      return tool.verifyWithKey(StringUtils.getBytesUtf8(hash),Base64.decode(signature),thePublicKey);    } catch (    Exception e) {      log.error("Unable to verify signature",e);    }  }  return false;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAssociation_();}  }
class C{  public void show(FullTextSearchView.ActionDelegate searcher){  this.searcher=searcher;  List<Node> rootNodes=newArrayList();  for (  Project project : appContext.getProjects()) {    rootNodes.add(nodeFactory.newContainerNode(project,settingsProvider.getSettings()));  }  view.setStructure(rootNodes);  view.show();}  }
class C{  public void addItem(Item item){  if (item == null) {    throw new NullPointerException("item is null");  }  mItems.add(item);}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public RandomRBF(){  super();  setNumAttributes(defaultNumAttributes());  setNumClasses(defaultNumClasses());  setNumCentroids(defaultNumCentroids());}  }
class C{  private void addIndex(Index<E> idx,HeadIndex<E> h,int indexLevel){  int insertionLevel=indexLevel;  Comparable<? super E> key=comparable(idx.node.key);  if (key == null)   throw new NullPointerException();  for (; ; ) {    int j=h.level;    Index<E> q=h;    Index<E> r=q.right;    Index<E> t=idx;    for (; ; ) {      if (r != null) {        Node<E> n=r.node;        int c=key.compareTo(n.key);        if (n.value == null) {          if (!q.unlink(r))           break;          r=q.right;          continue;        }        if (c > 0) {          q=r;          r=r.right;          continue;        }      }      if (j == insertionLevel) {        if (t.indexesDeletedNode()) {          findNode(key);          return;        }        if (!q.link(r,t))         break;        if (--insertionLevel == 0) {          if (t.indexesDeletedNode())           findNode(key);          return;        }      }      if (--j >= insertionLevel && j < indexLevel)       t=t.down;      q=q.down;      r=q.right;    }  }}  }
class C{  public OutlierResult run(Relation<Model> models,Relation<NumberVector> vecs,Relation<?> labels){  WritableDoubleDataStore scores=DataStoreUtil.makeDoubleStorage(models.getDBIDs(),DataStoreFactory.HINT_HOT);  HashSet<GeneratorSingleCluster> generators=new HashSet<>();  for (DBIDIter iditer=models.iterDBIDs(); iditer.valid(); iditer.advance()) {    Model model=models.get(iditer);    if (model instanceof GeneratorSingleCluster) {      generators.add((GeneratorSingleCluster)model);    }  }  if (generators.isEmpty()) {    LOG.warning("No generator models found for dataset - all points will be considered outliers.");  }  for (  GeneratorSingleCluster gen : generators) {    for (int i=0; i < gen.getDim(); i++) {      Distribution dist=gen.getDistribution(i);      if (!(dist instanceof NormalDistribution)) {        throw new AbortException("TrivialGeneratedOutlier currently only supports normal distributions, got: " + dist);      }    }  }  for (DBIDIter iditer=models.iterDBIDs(); iditer.valid(); iditer.advance()) {    double score=1.;    double[] v=vecs.get(iditer).toArray();    for (    GeneratorSingleCluster gen : generators) {      double[] tv=v;      if (gen.getTransformation() != null) {        tv=gen.getTransformation().applyInverse(v);      }      final int dim=tv.length;      double lensq=0.0;      int norm=0;      for (int i=0; i < dim; i++) {        Distribution dist=gen.getDistribution(i);        if (dist instanceof NormalDistribution) {          NormalDistribution d=(NormalDistribution)dist;          double delta=(tv[i] - d.getMean()) / d.getStddev();          lensq+=delta * delta;          norm+=1;        } else {          throw new AbortException("TrivialGeneratedOutlier currently only supports normal distributions, got: " + dist);        }      }      if (norm > 0.) {        score=Math.min(score,ChiSquaredDistribution.cdf(lensq,norm));      } else {        score=0.;      }    }    if (expect < 1) {      score=expect * score / (1 - score + expect);    }    scores.putDouble(iditer,score);  }  DoubleRelation scoreres=new MaterializedDoubleRelation("Model outlier scores","model-outlier",scores,models.getDBIDs());  OutlierScoreMeta meta=new ProbabilisticOutlierScore(0.,1.);  return new OutlierResult(meta,scoreres);}  }
class C{  @DesireNoWarning("SF_SWITCH_FALLTHROUGH") public int testFallThroughGood(int x){switch (x) {case 0:    System.out.println("Hello");case 1:  return 17;case 2:return 345;}return 0;}  }
class C{  public ToolbarPhone(Context context,AttributeSet attrs){  super(context,attrs);  mToolbarSidePadding=getResources().getDimensionPixelOffset(R.dimen.toolbar_edge_padding);  mLocationBarInsets=getResources().getDimensionPixelSize(R.dimen.location_bar_margin_top) + getResources().getDimensionPixelSize(R.dimen.location_bar_margin_bottom);}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("SubscriptionStateParser.parse");  SubscriptionState subscriptionState=new SubscriptionState();  try {    headerName(TokenTypes.SUBSCRIPTION_STATE);    subscriptionState.setHeaderName(SIPHeaderNames.SUBSCRIPTION_STATE);    lexer.match(TokenTypes.ID);    Token token=lexer.getNextToken();    subscriptionState.setState(token.getTokenValue());    while (lexer.lookAhead(0) == ';') {      this.lexer.match(';');      this.lexer.SPorHT();      lexer.match(TokenTypes.ID);      token=lexer.getNextToken();      String value=token.getTokenValue();      if (value.equalsIgnoreCase("reason")) {        this.lexer.match('=');        this.lexer.SPorHT();        lexer.match(TokenTypes.ID);        token=lexer.getNextToken();        value=token.getTokenValue();        subscriptionState.setReasonCode(value);      } else       if (value.equalsIgnoreCase("expires")) {        this.lexer.match('=');        this.lexer.SPorHT();        lexer.match(TokenTypes.ID);        token=lexer.getNextToken();        value=token.getTokenValue();        try {          int expires=Integer.parseInt(value);          subscriptionState.setExpires(expires);        } catch (        NumberFormatException ex) {          throw createParseException(ex.getMessage());        }catch (        InvalidArgumentException ex) {          throw createParseException(ex.getMessage());        }      } else       if (value.equalsIgnoreCase("retry-after")) {        this.lexer.match('=');        this.lexer.SPorHT();        lexer.match(TokenTypes.ID);        token=lexer.getNextToken();        value=token.getTokenValue();        try {          int retryAfter=Integer.parseInt(value);          subscriptionState.setRetryAfter(retryAfter);        } catch (        NumberFormatException ex) {          throw createParseException(ex.getMessage());        }catch (        InvalidArgumentException ex) {          throw createParseException(ex.getMessage());        }      } else {        this.lexer.match('=');        this.lexer.SPorHT();        lexer.match(TokenTypes.ID);        Token secondToken=lexer.getNextToken();        String secondValue=secondToken.getTokenValue();        subscriptionState.setParameter(value,secondValue);      }      this.lexer.SPorHT();    }  }  finally {    if (debug)     dbg_leave("SubscriptionStateParser.parse");  }  return subscriptionState;}  }
class C{  protected void internalBeginToCompile(ICompilationUnit[] sourceUnits,int maxUnits){  for (int i=0; i < maxUnits; i++) {    try {      CompilationUnitDeclaration parsedUnit;      CompilationResult unitResult=new CompilationResult(sourceUnits[i],i,maxUnits,this.options.maxProblemsPerUnit);      long parseStart=System.currentTimeMillis();      if (this.totalUnits < this.parseThreshold) {        parsedUnit=this.parser.parse(sourceUnits[i],unitResult);      } else {        parsedUnit=this.parser.dietParse(sourceUnits[i],unitResult);      }      long resolveStart=System.currentTimeMillis();      this.stats.parseTime+=resolveStart - parseStart;      this.lookupEnvironment.buildTypeBindings(parsedUnit,null);      this.stats.resolveTime+=System.currentTimeMillis() - resolveStart;      addCompilationUnit(sourceUnits[i],parsedUnit);      ImportReference currentPackage=parsedUnit.currentPackage;      if (currentPackage != null) {        unitResult.recordPackageName(currentPackage.tokens);      }    }  finally {      sourceUnits[i]=null;    }  }  this.lookupEnvironment.completeTypeBindings();}  }
class C{  @Benchmark public void custom(){  run();}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public int splitEdge(Split split){  Edge edge=edgeStore.getCursor(split.edge);  if (split.distance0_mm < SNAP_RADIUS_MM || split.distance1_mm < SNAP_RADIUS_MM) {    if (split.distance0_mm < split.distance1_mm) {      return edge.getFromVertex();    } else {      return edge.getToVertex();    }  }  int newVertexIndex=vertexStore.addVertexFixed((int)split.fixedLat,(int)split.fixedLon);  int oldToVertex=edge.getToVertex();  edge.setLengthMm(split.distance0_mm);  edge.setToVertex(newVertexIndex);  edge.setGeometry(Collections.EMPTY_LIST);  EdgeStore.Edge newEdge=edgeStore.addStreetPair(newVertexIndex,oldToVertex,split.distance1_mm,edge.getOSMID());  spatialIndex.insert(newEdge.getEnvelope(),newEdge.edgeIndex);  newEdge.copyPairFlagsAndSpeeds(edge);  edgeStore.turnRestrictions.removeAll(split.edge).forEach(null);  return newVertexIndex;}  }
class C{  private void updateCheckedListPanel(){  m_checkedList.removeListSelectionListener(m_updateListener);  m_checkedListPanel.removeAll();  m_checkedList=new JCheckedListbox<>(getDebuggerVector(),false);  m_checkedList.addListSelectionListener(m_updateListener);  final JScrollPane debuggerScrollPane=new JScrollPane(m_checkedList);  m_checkedListPanel.add(debuggerScrollPane);  final Collection<DebuggerTemplate> debuggers=m_project.getConfiguration().getDebuggers();  final ListModel<DebuggerTemplate> model=m_checkedList.getModel();  for (int i=0; i < model.getSize(); ++i) {    final DebuggerTemplate debuggerId=model.getElementAt(i);    m_checkedList.setChecked(i,debuggers.contains(debuggerId));  }  m_checkedList.updateUI();  updateUI();}  }
class C{  public void forEachInsn(Insn.Visitor visitor){  int sz=size();  for (int i=0; i < sz; i++) {    BasicBlock one=get(i);    InsnList insns=one.getInsns();    insns.forEach(visitor);  }}  }
class C{  private static int binarySearchFromTo(int a,int from,int to,IntComparator comp){  while (from <= to) {    int mid=(from + to) / 2;    int comparison=comp.compare(mid,a);    if (comparison < 0)     from=mid + 1; else     if (comparison > 0)     to=mid - 1; else     return mid;  }  return -(from + 1);}  }
class C{  private boolean isGTEDelta(double value){  return Math.abs(value) - Math.abs(mDelta) > -1.0e-5;}  }
class C{  public static boolean isHighSurrogate(int c){  return (0xD800 <= c && c <= 0xDBFF);}  }
class C{  protected void compare(jmetal.core.Solution solutionA,Solution solutionB){  for (int i=0; i < solutionA.numberOfObjectives(); i++) {    TestUtils.assertEquals(solutionA.getObjective(i),solutionB.getObjective(i));  }  TestUtils.assertEquals(Math.abs(solutionA.getOverallConstraintViolation()),Math.abs(StatUtils.sum(solutionB.getConstraints())));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:49.397 -0500",hash_original_method="FD5D2C58D86BF6903270C5515850C93F",hash_generated_method="AF5D2F7608E8365EE455C5E50D8D95C4") public ObjectSlot[] slots(){  return slotsToSerialize;}  }
class C{  public void addPart(MessagePart part){  this.parts.add(part);}  }
class C{  @Override public Item withOnItemPreClickListener(FastAdapter.OnClickListener<Item> onItemPreClickListener){  mOnItemPreClickListener=onItemPreClickListener;  return (Item)this;}  }
class C{  public void printDominators(IR ir){  for (Enumeration<BasicBlock> e=ir.getBasicBlocks(); e.hasMoreElements(); ) {    BasicBlock b=e.nextElement();    DominatorInfo i=dominatorInfo.get(b);    System.out.println("Dominators of " + b + ":"+ i.dominators);  }}  }
class C{  public TestRequest(String template,ClientId client,ServiceId service,List<RequestTag> content,String boundary,String description,Integer timeoutSec){  this.service=service;  this.content=new Request(template,client,service,"1234567890",content,false,boundary).toRawContent();  this.description=description;  this.timeoutSec=timeoutSec;}  }
class C{  public static <K extends Comparable<K>,V extends Comparable<V>>Map<K,V> createByValueSortedConcurrentMap(boolean reversed){  return new ByValueSortingConcurrentSkipListMap<>(ByValueComparator.<K,V>create(reversed));}  }
class C{  public CountRequest source(QuerySourceBuilder sourceBuilder){  this.source=sourceBuilder.buildAsBytes(Requests.CONTENT_TYPE);  return this;}  }
class C{  public SemanticChangeStructureDataType clone(){  SemanticChangeStructureDataType result=new SemanticChangeStructureDataType();  result.Affected=Affected;  result.AffectedType=AffectedType;  return result;}  }
class C{  public void testApostropheInsertion(){  assertTrue(sh.isDefaultSuggestion("im","I'm"));  assertTrue(sh.isDefaultSuggestion("dont","don't"));}  }
class C{  public MovingAverageDataset(){  this.data=new ArrayList<IndicatorSeries>();}  }
class C{  public boolean request(InterruptRequest interruptRequest){  if (((TxCPUState)platform.getCpuState()).getPowerMode() != TxCPUState.PowerMode.RUN) {    int interruptNumber=interruptRequest.getInterruptNumber();    if (isImcgIntxen(getIMCGSectionForInterrupt(interruptNumber))) {      ((TxCPUState)platform.getCpuState()).setPowerMode(TxCPUState.PowerMode.RUN);    } else {      return false;    }  }  TxInterruptRequest newInterruptRequest=(TxInterruptRequest)interruptRequest;synchronized (interruptRequestQueue) {    for (    InterruptRequest currentInterruptRequest : interruptRequestQueue) {      TxInterruptRequest currentTxInterruptRequest=(TxInterruptRequest)currentInterruptRequest;      if (currentTxInterruptRequest.getType() == newInterruptRequest.getType()) {        if (newInterruptRequest.getType() != Type.HARDWARE_INTERRUPT) {          return false;        } else {          if (newInterruptRequest.getInterruptNumber() == currentTxInterruptRequest.getInterruptNumber()) {            if ((newInterruptRequest.getPriority() < currentTxInterruptRequest.getPriority())) {              interruptRequestQueue.remove(currentTxInterruptRequest);              break;            } else {              return false;            }          }        }      }    }    interruptRequestQueue.add(newInterruptRequest);    Collections.sort(interruptRequestQueue);    return true;  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:26.834 -0500",hash_original_method="6209E5C519243BC33CB9A47AFA9E017F",hash_generated_method="6209E5C519243BC33CB9A47AFA9E017F") Iterator<V> createValueCollectionIterator(){  return new ValueIteratorImpl();}  }
class C{  public void clearEPGImageCache(){  mChannelImageCache.clear();}  }
class C{  public void loading(){  mHintView.setVisibility(View.GONE);  mProgressBar.setVisibility(View.VISIBLE);}  }
class C{  private ITupleIterator parallelRangeIterator(final long ts,final boolean isReadConsistentTx,final byte[] fromKey,final byte[] toKey,final int capacity,final int flags,final IFilter filter){  final int minimumChunkSize=100;  final long chunkTimeout=1;  final TimeUnit chunkTimeoutUnit=TimeUnit.MILLISECONDS;  final BlockingBuffer<ITuple<?>[]> queryBuffer=new BlockingBuffer<ITuple<?>[]>(capacity,minimumChunkSize,chunkTimeout,chunkTimeoutUnit);  final ParallelRangeIteratorTask task=new ParallelRangeIteratorTask(ts,isReadConsistentTx,fromKey,toKey,capacity,flags,filter,queryBuffer);  final FutureTask<Void> ft=new FutureTask<Void>(task);  queryBuffer.setFuture(ft);  fed.getExecutorService().submit(ft);  return new UnchunkedTupleIterator(queryBuffer.iterator());}  }
class C{  public int[] reset(){  return init;}  }
class C{  public void downloadSeasonPoster(int season){  artworkHelper.downloadSeasonPoster(this,season);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributenodenull.class,args);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println("Progress: " + progress + "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void skip(){  if (!Play.mode.isDev()) {    forbidden();  }  checkCompleteAndLicensed();  SetupUtils.markSetupComplete();  license();}  }
class C{  private XYDataset createXYDataset1(){  XYSeries series1=new XYSeries("S1");  series1.add(1.0,100.0);  series1.add(2.0,101.0);  series1.add(3.0,102.0);  XYSeries series2=new XYSeries("S2");  series2.add(1.0,103.0);  series2.add(2.0,null);  series2.add(3.0,105.0);  XYSeriesCollection result=new XYSeriesCollection();  result.addSeries(series1);  result.addSeries(series2);  result.setIntervalWidth(0.0);  return result;}  }
class C{  public static JarFile jarForClass(Class<?> clazz,JarFile defaultJar){  String path="/" + clazz.getName().replace('.','/') + ".class";  URL jarUrl=clazz.getResource(path);  if (jarUrl == null) {    return defaultJar;  }  String url=jarUrl.toString();  int bang=url.indexOf("!");  String JAR_URI_PREFIX="jar:file:";  if (url.startsWith(JAR_URI_PREFIX) && bang != -1) {    try {      return new JarFile(url.substring(JAR_URI_PREFIX.length(),bang));    } catch (    IOException e) {      throw new IllegalStateException("Error loading jar file.",e);    }  } else {    return defaultJar;  }}  }
class C{  public int size(){  return container.size() + cache.size();}  }
class C{  public void enable(Capability c){  if (doNotCheckCapabilities()) {    return;  }  if (c == Capability.NOMINAL_ATTRIBUTES) {    enable(Capability.BINARY_ATTRIBUTES);  } else   if (c == Capability.BINARY_ATTRIBUTES) {    enable(Capability.UNARY_ATTRIBUTES);  } else   if (c == Capability.UNARY_ATTRIBUTES) {    enable(Capability.EMPTY_NOMINAL_ATTRIBUTES);  } else   if (c == Capability.NOMINAL_CLASS) {    enable(Capability.BINARY_CLASS);  }  m_Capabilities.add(c);}  }
class C{  public void resetIvParameter(final byte[] iv,final int offset){  try {    decryptCipher.init(Cipher.DECRYPT_MODE,key,new IvParameterSpec(iv,offset,KEY_LENGTH));  } catch (  InvalidKeyException|InvalidAlgorithmParameterException e) {    throw new RuntimeException("unexpected",e);  }}  }
class C{  public void registerProcessor(String processor,Priority prio){  this.processorNames.get(prio).add(processor);}  }
class C{  public boolean userCanMoveUser(int connectedUserId,int UserId,int dstDeptId,String entidad) throws Exception {  boolean can=false;  int parentId=ISicresAdminDefsKeys.NULL_ID;  int deptMgrId=ISicresAdminDefsKeys.NULL_ID;  int dstMgrId=ISicresAdminDefsKeys.NULL_ID;  try {    parentId=getUserParentId(UserId,entidad);    deptMgrId=getDeptMgrId(parentId,entidad);    dstMgrId=getDeptMgrId(dstDeptId,entidad);    can=hasUserAuth(connectedUserId,USER_ACTION_ID_MOVE,deptMgrId,dstMgrId,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0] == State.main_region_A;case main_region_B:  return stateVector[0] == State.main_region_B;default :return false;}}  }
class C{  private void testIsoWeekJanuary1thSaturday() throws Exception {  assertEquals(52,getIsoWeek(parse("2010-12-31")));  assertEquals(52,getIsoWeek(parse("2011-01-01")));  assertEquals(52,getIsoWeek(parse("2011-01-02")));  assertEquals(1,getIsoWeek(parse("2011-01-03")));}  }
class C{  private static void populateAccessRequest(AccessRequest accessRequest){  accessRequest.setAccessLicenseNumber(mProps.getProperty(LICENSE_NUMBER));  accessRequest.setUserId(mProps.getProperty(USER_NAME));  accessRequest.setPassword(mProps.getProperty(PASSWORD));}  }
class C{  public Method[] allowedMethods(){  return allowedMethods;}  }
class C{  void attributeRenamed(AttributeMetaData amd,String oldName){  attributeMetaData.remove(oldName);  attributeMetaData.put(amd.getName(),amd);}  }
class C{  public static PlaylistViewFragment newInstance(Playlist p){  PlaylistViewFragment fragment=new PlaylistViewFragment();  Bundle bundle=new Bundle();  bundle.putParcelable(KEY_PLAYLIST,p);  fragment.setArguments(bundle);  return fragment;}  }
class C{  public void hleKernelThreadEnterWaitState(SceKernelThreadInfo thread,int waitType,int waitId,IWaitStateChecker waitStateChecker,int micros,boolean forever,boolean callbacks){  thread.waitType=waitType;  thread.waitId=waitId;  thread.wait.waitStateChecker=waitStateChecker;  hleKernelThreadWait(thread,micros,forever);  hleChangeThreadState(thread,PSP_THREAD_WAITING);  hleRescheduleCurrentThread(callbacks);}  }
class C{  protected Element writeLongToXML(Element parent,long o,String name) throws Exception {  Element node;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  node=addElement(parent,name,Long.TYPE.getName(),true);  node.appendChild(node.getOwnerDocument().createTextNode(new Long(o).toString()));  return node;}  }
class C{  public static void ensures(final boolean b,final String string){  if (enabled && b != true) {    if (Cfg.DEBUG) {      Check.log(TAG + "##### Ensures - " + string+ " #####");    }  }}  }
class C{  static public String convertToDateFormat(Long time){  Date inputDate=new Date(time.longValue());  SimpleDateFormat sdf=new SimpleDateFormat(DATE_FORMAT);  String date=sdf.format(inputDate);  return date;}  }
class C{  public Node cloneNode(boolean deep){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public Team findTeam(String name){  for (int i=0; i < teamList.size(); i++) {    if (teamList.get(i).strRep().equals(name)) {      return teamList.get(i);    }  }  return teamList.get(0);}  }
class C{  public long size() throws Exception {  return rangeCount(null,null,null);}  }
class C{  private static void populateLevels(){  levelList=new LinkedList<>();  levelList.add(Level.SEVERE.toString());  levelList.add(Level.WARNING.toString());  levelList.add(Level.INFO.toString());  levelList.add(Level.CONFIG.toString());  levelList.add(Level.FINE.toString());  levelList.add(Level.FINER.toString());  levelList.add(Level.FINEST.toString());}  }
class C{  @Deprecated public ContentItem id(String id){  this.id=id;  return this;}  }
class C{  public Response serveFile(String uri,Properties header,File homeDir,boolean allowDirectoryListing){  if (uri.equals("/shutdown")) {    callExit=true;    stop();  }  System.out.println("serveFile with: " + homeDir);  if (!homeDir.isDirectory())   return new Response(HTTP_INTERNALERROR,MIME_PLAINTEXT,"INTERNAL ERRROR: serveFile(): given homeDir is not a directory.");  uri=uri.trim().replace(File.separatorChar,'/');  if (uri.indexOf('?') >= 0)   uri=uri.substring(0,uri.indexOf('?'));  if (uri.startsWith("..") || uri.endsWith("..") || uri.indexOf("../") >= 0)   return new Response(HTTP_FORBIDDEN,MIME_PLAINTEXT,"FORBIDDEN: Won't serve ../ for security reasons.");  File f=new File(homeDir,uri);  if (!f.exists())   return new Response(HTTP_NOTFOUND,MIME_PLAINTEXT,"Error 404, file not found.");  if (f.isDirectory()) {    if (!uri.endsWith("/")) {      uri+="/";      Response r=new Response(HTTP_REDIRECT,MIME_HTML,"<html><body>Redirected: <a href=\"" + uri + "\">"+ uri+ "</a></body></html>");      r.addHeader("Location",uri);      return r;    }    if (new File(f,"index.html").exists())     f=new File(homeDir,uri + "/index.html"); else     if (new File(f,"index.htm").exists())     f=new File(homeDir,uri + "/index.htm"); else     if (allowDirectoryListing) {      String[] files=f.list();      String msg="<html><body><h1>Directory " + uri + "</h1><br/>";      if (uri.length() > 1) {        String u=uri.substring(0,uri.length() - 1);        int slash=u.lastIndexOf('/');        if (slash >= 0 && slash < u.length())         msg+="<b><a href=\"" + uri.substring(0,slash + 1) + "\">..</a></b><br/>";      }      for (int i=0; i < files.length; ++i) {        File curFile=new File(f,files[i]);        boolean dir=curFile.isDirectory();        if (dir) {          msg+="<b>";          files[i]+="/";        }        msg+="<a href=\"" + encodeUri(uri + files[i]) + "\">"+ files[i]+ "</a>";        if (curFile.isFile()) {          long len=curFile.length();          msg+=" &nbsp;<font size=2>(";          if (len < 1024)           msg+=curFile.length() + " bytes"; else           if (len < 1024 * 1024)           msg+=curFile.length() / 1024 + "." + (curFile.length() % 1024 / 10 % 100) + " KB"; else           msg+=curFile.length() / (1024 * 1024) + "." + curFile.length() % (1024 * 1024) / 10 % 100 + " MB";          msg+=")</font>";        }        msg+="<br/>";        if (dir)         msg+="</b>";      }      return new Response(HTTP_OK,MIME_HTML,msg);    } else {      return new Response(HTTP_FORBIDDEN,MIME_PLAINTEXT,"FORBIDDEN: No directory listing.");    }  }  try {    String mime=null;    int dot=f.getCanonicalPath().lastIndexOf('.');    if (dot >= 0)     mime=(String)theMimeTypes.get(f.getCanonicalPath().substring(dot + 1).toLowerCase());    if (mime == null)     mime=MIME_DEFAULT_BINARY;    long startFrom=0;    String range=header.getProperty("range");    if (range != null) {      if (range.startsWith("bytes=")) {        range=range.substring("bytes=".length());        int minus=range.indexOf('-');        if (minus > 0)         range=range.substring(0,minus);        try {          startFrom=Long.parseLong(range);        } catch (        NumberFormatException nfe) {        }      }    }    FileInputStream fis=new FileInputStream(f);    fis.skip(startFrom);    Response r=new Response(HTTP_OK,mime,fis);    r.addHeader("Content-length","" + (f.length() - startFrom));    r.addHeader("Content-range","" + startFrom + "-"+ (f.length() - 1)+ "/"+ f.length());    return r;  } catch (  IOException ioe) {    return new Response(HTTP_FORBIDDEN,MIME_PLAINTEXT,"FORBIDDEN: Reading file failed.");  }}  }
class C{  public PeriodFormatter(PeriodPrinter printer,PeriodParser parser){  super();  iPrinter=printer;  iParser=parser;  iLocale=null;  iParseType=null;}  }
class C{  protected void removeAt(int index){  _set[index]=no_entry_key;  super.removeAt(index);}  }
class C{  public static double dchisq(double x,double ncp){  if (ncp == 0.0)   return dchisq(x);  double xh=Math.sqrt(x);  double mean=Math.sqrt(ncp);  return (dnorm(xh - mean) + dnorm(-xh - mean)) / (2 * xh);}  }
class C{  public static boolean ask(int windowNo,Component comp,String adMessage,String msg){  String out=constructMessage(adMessage,msg);  try {    int response=Messagebox.showDialog(out,AEnv.getDialogHeader(Env.getCtx(),windowNo),Messagebox.OK | Messagebox.CANCEL,Messagebox.QUESTION);    return (response == Messagebox.OK);  } catch (  InterruptedException ex) {    Thread.currentThread().interrupt();  }  return true;}  }
class C{  public ListEntry(String id,String versionId){  this();  setId(id);  setVersionId(versionId);}  }
class C{  @Override public void onUpdate(final ItemStack stack,final World worldIn,final Entity entity,final int itemSlot,final boolean isSelected){  if (!worldIn.isRemote) {    final EntityInventoryType successfulInventoryType=InventoryUtils.forEachEntityInventory(entity,null,EntityInventoryType.MAIN,EntityInventoryType.HAND);    if (successfulInventoryType != null) {      Logger.info("Restricted armour deleted from slot %d of %s's %s inventory",itemSlot,entity.getName(),successfulInventoryType);    }  }}  }
class C{  public AlbumFeed(){  super();  getCategories().add(AlbumData.ALBUM_CATEGORY);  this.delegate=new AlbumDataImpl(this);}  }
class C{  public String delete(){  append("DELETE CHECKED button pressed");  List removes=new ArrayList();  int n=data.getRowCount();  for (int i=0; i < n; i++) {    data.setRowIndex(i);    if (checked.isSelected()) {      removes.add(data.getRowData());      checked.setSelected(false);      created.setSelected(false);    }  }  if (removes.size() > 0) {    List<CustomerBean> list=getCustomers();    Iterator remove=removes.iterator();    while (remove.hasNext()) {      list.remove(remove.next());    }  }  clear();  return (null);}  }
class C{  public ServerLauncher build(){  validate();  return new ServerLauncher(this);}  }
class C{  protected void notifyHistoryChangedListeners(){  Iterator<HistoryChangedListener> iter;  HistoryChangedListener l;  iter=m_HistoryChangedListeners.iterator();  while (iter.hasNext()) {    l=iter.next();    l.historyChanged(new HistoryChangedEvent(this,HISTORY_NAME,getHistory()));  }}  }
class C{  public void reset(){  this.position=HEADER_LENGTH;}  }
class C{  @Subscribe public void onTabSelectedEvent(TabSelectedEvent event){  if (event.position != MainFragment.SECOND)   return;  if (mInAtTop) {    mRefreshLayout.setRefreshing(true);    onRefresh();  } else {    scrollToTop();  }}  }
class C{  public boolean isValidAmt(){  BigDecimal price=getPrice();  if (price == null || Env.ZERO.compareTo(price) == 0) {    log.warning("No Price - " + price);    return false;  }  BigDecimal discount=getDiscount();  if (discount != null) {    if (discount.abs().compareTo(ONEHUNDRED) > 0) {      log.warning("Discount > 100 - " + discount);      return false;    }  }  BigDecimal net=getNetAmt();  if (net == null) {    log.warning("Net is null");    return false;  }  if (net.compareTo(Env.ZERO) <= 0) {    log.warning("Net <= 0 - " + net);    return false;  }  return true;}  }
class C{  @Override public void displayResults(WeatherData weatherData,String errorMessage){  if (weatherData == null)   Utils.showToast(this,errorMessage); else {    final Intent intent=DisplayWeatherActivity.makeIntent((WeatherData)weatherData);    if (intent.resolveActivity(getPackageManager()) != null)     startActivity(intent); else     Utils.showToast(this,"No Activity found to display Weather Data");  }}  }
class C{  private static Set<String> expandHeadersFromRequest(Table table,RestRequest request){  Set<String> headers=new LinkedHashSet<>(table.getHeaders().size());  for (  String header : Strings.splitStringByCommaToArray(request.param("h"))) {    if (Regex.isSimpleMatchPattern(header)) {      for (      Table.Cell tableHeaderCell : table.getHeaders()) {        String configuredHeader=tableHeaderCell.value.toString();        if (Regex.simpleMatch(header,configuredHeader)) {          headers.add(configuredHeader);        } else         if (tableHeaderCell.attr.containsKey("alias")) {          String[] aliases=Strings.splitStringByCommaToArray(tableHeaderCell.attr.get("alias"));          for (          String alias : aliases) {            if (Regex.simpleMatch(header,alias)) {              headers.add(configuredHeader);              break;            }          }        }      }    } else {      headers.add(header);    }  }  return headers;}  }
class C{  public void byteOrder(boolean msbfirst){  MSBFirst=msbfirst;}  }
class C{  public void addWaypoint(Waypoint waypoint){synchronized (waypoints) {    waypoints.add(waypoint);  }}  }
class C{  private UIViewRoot restoreTree(FacesContext context,String renderKitId,Object[] tree) throws FacesException {  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.log(Level.FINEST,"FaceletFullStateManagementStrategy.restoreTree",renderKitId);  }  UIComponent c;  FacetNode fn;  TreeNode tn;  for (int i=0; i < tree.length; i++) {    if (tree[i] instanceof FacetNode) {      fn=(FacetNode)tree[i];      c=newInstance(fn);      tree[i]=c;      if (i != fn.parent) {        ((UIComponent)tree[fn.parent]).getFacets().put(fn.facetName,c);      }    } else {      tn=(TreeNode)tree[i];      c=newInstance(tn);      tree[i]=c;      if (i != tn.parent) {        ((UIComponent)tree[tn.parent]).getChildren().add(c);      } else {        assert (c instanceof UIViewRoot);        UIViewRoot viewRoot=(UIViewRoot)c;        context.setViewRoot(viewRoot);        viewRoot.setRenderKitId(renderKitId);      }    }  }  return (UIViewRoot)tree[0];}  }
class C{  public final String doubleString(double value){  double absvalue=Math.abs(value);  if (absvalue >= 10e7 || (int)value == value) {    return Integer.toString((int)value);  } else {    return decimalFormat.format(value);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:15.410 -0500",hash_original_method="2A845E5CA6C44D2307376F014D4A5DD1",hash_generated_method="7E02DA2BE2889F07A6282D6854935FD4") private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  count.set(0);  last=head=new Node<E>(null);  for (; ; ) {    @SuppressWarnings("unchecked") E item=(E)s.readObject();    if (item == null)     break;    add(item);  }}  }
class C{  public void testFailureWithDefaultConfig(){  CircuitBreaker breaker=new CircuitBreaker();  breaker.halfOpen();  HalfOpenState state=new HalfOpenState(breaker);  assertFalse(breaker.isOpen());  assertFalse(breaker.isClosed());  state.recordFailure();  assertTrue(breaker.isOpen());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:49.226 -0500",hash_original_method="776CFF97F037037124FC98CDEBC144D9",hash_generated_method="7F44A91851C61867CCC26530BF48F302") protected boolean isTokenChar(char ch){  if (Character.isLetterOrDigit(ch))   return true;  if (Character.isISOControl(ch))   return false;  if (isHttpSeparator(ch))   return false;  return true;}  }
class C{  @Deprecated public final @Nullable String readLine() throws IOException {  char buf[]=lineBuffer;  if (buf == null) {    buf=lineBuffer=new char[128];  }  int room=buf.length;  int offset=0;  int c;  loop:   while (true) {switch (c=in.read()) {case -1:case '\n':      break loop;case '\r':    int c2=in.read();  if ((c2 != '\n') && (c2 != -1)) {    if (!(in instanceof PushbackInputStream)) {      this.in=new PushbackInputStream(in);    }    ((PushbackInputStream)in).unread(c2);  }break loop;default :if (--room < 0) {buf=new char[offset + 128];room=buf.length - offset - 1;System.arraycopy(lineBuffer,0,buf,0,offset);lineBuffer=buf;}buf[offset++]=(char)c;break;}}if ((c == -1) && (offset == 0)) {return null;}return String.copyValueOf(buf,0,offset);}  }
class C{  public void receiveResultdeleteSessionsForSessionId(org.oscm.example.client.SessionServiceStub.DeleteSessionsForSessionIdResponseE result){}  }
class C{  public ObjectFactory(){}  }
class C{  @RequestProcessing(value="/mall",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class}) @After(adviceClass={CSRFToken.class,StopwatchEndAdvice.class}) public void showMall(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get("skinDirName"));  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("mall.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  String pageNumStr=request.getParameter("p");  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {    pageNumStr="1";  }  final int pageNum=Integer.valueOf(pageNumStr);  final int pageSize=Symphonys.PAGE_SIZE;  final int windowSize=Symphonys.WINDOW_SIZE;  final JSONObject requestJSONObject=new JSONObject();  requestJSONObject.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  requestJSONObject.put(Pagination.PAGINATION_PAGE_SIZE,pageSize);  requestJSONObject.put(Pagination.PAGINATION_WINDOW_SIZE,windowSize);  final String name=request.getParameter(Common.NAME);  if (!Strings.isEmptyOrNull(name)) {    requestJSONObject.put(Product.PRODUCT_NAME,name);  }  final Map<String,Class<?>> fields=new HashMap<String,Class<?>>();  fields.put(Keys.OBJECT_ID,String.class);  fields.put(Product.PRODUCT_CATEGORY,String.class);  fields.put(Product.PRODUCT_DESCRIPTION,String.class);  fields.put(Product.PRODUCT_NAME,String.class);  fields.put(Product.PRODUCT_PRICE,Double.class);  fields.put(Product.PRODUCT_IMG_URL,String.class);  fields.put(Product.PRODUCT_COUNT,Integer.class);  fields.put(Product.PRODUCT_STATUS,Integer.class);  final JSONObject result=productQueryService.getOnShelfProducts(requestJSONObject,fields);  final List<JSONObject> products=CollectionUtils.jsonArrayToList(result.optJSONArray(Product.PRODUCTS));  for (  final JSONObject product : products) {    final double price=product.optDouble(Product.PRODUCT_PRICE);    final int point=(int)Math.floor(price * Symphonys.getInt("pointExchangeUnit"));    product.put(Product.PRODUCT_T_POINT,point);  }  dataModel.put(Product.PRODUCTS,products);  filler.fillHeaderAndFooter(request,response,dataModel);  filler.fillRandomArticles(dataModel);  filler.fillHotArticles(dataModel);  filler.fillSideTags(dataModel);  filler.fillLatestCmts(dataModel);}  }
class C{  private void releaseLock(InterProcessLock lock){  if (lock == null) {    log.info("The recovery lock is null, no need to release");    return;  }  try {    lock.release();    log.info("Release recovery lock successful");  } catch (  Exception ignore) {    log.warn("Release recovery lock failed",ignore);  }}  }
class C{  public static Script dmlFromInputStream(InputStream inputStream){  return scriptFromInputStream(inputStream,ScriptType.DML);}  }
class C{  public GuacamoleClientBadTypeException(Throwable cause){  super(cause);}  }
class C{  public void clear(){  DelaunayTriangle t;  for (int i=0; i < 3; i++) {    t=neighbors[i];    if (t != null) {      t.clearNeighbor(this);    }  }  clearNeighbors();  points[0]=points[1]=points[2]=null;}  }
class C{  public void accept(final ClassVisitor cv){  cv.visitInnerClass(name,outerName,innerName,access);}  }
class C{  protected SmallAttributeSet createSmallAttributeSet(AttributeSet a){  return new SmallAttributeSet(a);}  }
class C{  public ByteBufferBackedInputStream(ByteBuffer buf){  this.buf=buf;}  }
class C{  static int applyMaskPenaltyRule1(ByteMatrix matrix){  return applyMaskPenaltyRule1Internal(matrix,true) + applyMaskPenaltyRule1Internal(matrix,false);}  }
class C{  private void serializeCalendar(){  if (Cfg.DEBUG) {    Check.ensures(calendar != null,"null calendar");  }  try {    final boolean ret=markupCalendar.writeMarkupSerializable(calendar);    if (Cfg.DEBUG) {      Check.ensures(ret,"cannot serialize");    }  } catch (  final IOException e) {    if (Cfg.EXCEPTION) {      Check.log(e);    }    if (Cfg.DEBUG) {      Check.log(TAG + " Error (serializeContacts): " + e);    }  }}  }
class C{  private void deletePubsubTopic(String topic) throws IOException {  if (pubsubClient == null) {    pubsubClient=Transport.newPubsubClient(options).build();  }  if (executeNullIfNotFound(pubsubClient.projects().topics().get(topic)) != null) {    pubsubClient.projects().topics().delete(topic).execute();  }}  }
class C{  public static void initializeEdgeType(final INaviEdge edge,final ZyEdgeRealizer<NaviEdge> realizer){switch (edge.getType()) {case JUMP_CONDITIONAL_FALSE:    realizer.setLineType(LineType.LINE_2);  return;case JUMP_CONDITIONAL_FALSE_LOOP:realizer.setLineType(LineType.DASHED_DOTTED_2);return;case JUMP_CONDITIONAL_TRUE:realizer.setLineType(LineType.LINE_2);return;case JUMP_CONDITIONAL_TRUE_LOOP:realizer.setLineType(LineType.DASHED_DOTTED_2);return;case JUMP_UNCONDITIONAL_LOOP:realizer.setLineType(LineType.DASHED_DOTTED_2);return;case ENTER_INLINED_FUNCTION:realizer.setLineType(LineType.DASHED_2);return;case LEAVE_INLINED_FUNCTION:realizer.setLineType(LineType.DASHED_2);return;case TEXTNODE_EDGE:realizer.setArrow(Arrow.WHITE_DIAMOND);return;default :realizer.setLineType(LineType.LINE_2);return;}}  }
class C{  @SuppressWarnings({"cast","unchecked"}) public List<DeviceInfo> listDeviceInfo(){  EntityManager mgr=getEntityManager();  List<DeviceInfo> result=new ArrayList<DeviceInfo>();  try {    Query query=mgr.createQuery("select from DeviceInfo");    for (    Object obj : (List<Object>)query.getResultList()) {      result.add(((DeviceInfo)obj));    }  }  finally {    mgr.close();  }  return result;}  }
class C{  final public boolean contains(final Object ref){  throw new UnsupportedOperationException();}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() == bOK) {    if (bOK.getText().length() == 0)     dispose(); else {      ProcessCtl.process(this,m_WindowNo,parameterPanel,m_pi,null);    }  } else   if (e.getSource() == bPrint)   printScreen();}  }
class C{  public static void writeSplitsFile(final Collection<Text> splits,final FileSystem fs,final Path splitsFile) throws IOException {  try (final PrintStream out=new PrintStream(new BufferedOutputStream(fs.create(splitsFile,true)),false,CommonConstants.UTF_8)){    for (    final Text split : splits) {      out.println(new String(Base64.encodeBase64(split.getBytes()),CommonConstants.UTF_8));    }  } }  }
class C{  @Override public String generateToolTip(CategoryDataset dataset,int row,int column){  return generateLabelString(dataset,row,column);}  }
class C{  public boolean revokeMissingDiskStores(final String diskStoreId) throws Exception {  boolean found=false;  PersistentMemberDetails[] details=listMissingDiskStores();  if (details != null) {    for (    PersistentMemberDetails member : details) {      if (member.getDiskStoreId().equalsIgnoreCase(diskStoreId)) {        found=true;        break;      }    }  }  if (!found) {    return false;  }  PersistentMemberPattern pattern=new PersistentMemberPattern(UUID.fromString(diskStoreId));  boolean success=false;  try {    PrepareRevokePersistentIDRequest.send(dm,pattern);    success=true;  }  finally {    if (success) {      RevokePersistentIDRequest.send(dm,pattern);    } else {      PrepareRevokePersistentIDRequest.cancel(dm,pattern);    }  }  return success;}  }
class C{  public static MeasurementSimulator serializableInstance(){  return new MeasurementSimulator(new Parameters());}  }
class C{  public static void writeTLBytes(byte[] v,OutputStream stream) throws IOException {  int startOffset=1;  if (v.length >= 254) {    startOffset=4;    writeByte(254,stream);    writeByte(v.length & 0xFF,stream);    writeByte((v.length >> 8) & 0xFF,stream);    writeByte((v.length >> 16) & 0xFF,stream);  } else {    writeByte(v.length,stream);  }  writeByteArray(v,stream);  int offset=(v.length + startOffset) % 4;  if (offset != 0) {    int offsetCount=4 - offset;    writeByteArray(new byte[offsetCount],stream);  }}  }
class C{  public ContainerOverflowException(String message){  super(message);}  }
class C{  protected void init(Context context){  myContext=context;  ViewGroup.LayoutParams p=new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,DpUtil.dp2px(context,1));  setLayoutParams(p);  setSeparatorTheme(SeparatorTheme.DARK);}  }
class C{  public DefragHeadroomFraction(){  super(Options.set,"Defrag Headroom Fraction","Allow the defrag this fraction of the heap as headroom during defrag.",DEFAULT_DEFRAG_HEADROOM_FRACTION);}  }
class C{  protected static PsiFile createFile(@NonNls String fileName,@NonNls String text) throws IncorrectOperationException {  FileType fileType=FileTypeManager.getInstance().getFileTypeByFileName(fileName);  return PsiFileFactory.getInstance(getProject()).createFileFromText(fileName,fileType,text,LocalTimeCounter.currentTime(),true,false);}  }
class C{  public final Vec3D normalizeTo(float len){  float mag=(float)Math.sqrt(x * x + y * y + z * z);  if (mag > 0) {    mag=len / mag;    x*=mag;    y*=mag;    z*=mag;  }  return this;}  }
class C{  public void testGetF0Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF0Momentary();  assertEquals(expResult,result);}  }
class C{  public ArffPanel(){  super();  initialize();  createPanel();}  }
class C{  public void insertUpdate(DocumentEvent e){  m_ApplyButton.setEnabled(isValidFormat());}  }
class C{  @Deprecated public static void logErrorAtMostOnce(Logger logger,String message){  AtMostOnceLogger.error(logger,message);}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void removeSubviewsFromContainerWithID(int containerTag){  ReactShadowNode containerNode=mShadowNodeRegistry.getNode(containerTag);  if (containerNode == null) {    throw new IllegalViewOperationException("Trying to remove subviews of an unknown view tag: " + containerTag);  }  WritableArray indicesToRemove=Arguments.createArray();  for (int childIndex=0; childIndex < containerNode.getChildCount(); childIndex++) {    indicesToRemove.pushInt(childIndex);  }  manageChildren(containerTag,null,null,null,null,indicesToRemove);}  }
class C{  public void cancel(){}  }
class C{  protected Position computePickPosition(DrawContext dc,Vec4 locationSW,Dimension mapSize){  Position pickPosition=null;  Point pickPoint=dc.getPickPoint();  if (pickPoint != null) {    Rectangle viewport=dc.getView().getViewport();    if (pickPoint.getX() >= locationSW.getX() && pickPoint.getX() < locationSW.getX() + mapSize.width && viewport.height - pickPoint.getY() >= locationSW.getY() && viewport.height - pickPoint.getY() < locationSW.getY() + mapSize.height) {      double lon=(pickPoint.getX() - locationSW.getX()) / mapSize.width * 360 - 180;      double lat=(viewport.height - pickPoint.getY() - locationSW.getY()) / mapSize.height * 180 - 90;      double pickAltitude=1000e3;      pickPosition=new Position(Angle.fromDegrees(lat),Angle.fromDegrees(lon),pickAltitude);    }  }  return pickPosition;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.TRACE_REACTION_WILL_FIRE__REACTION:    if (resolve)     return getReaction();  return basicGetReaction();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public final byte readByte() throws IOException {  int ch=this.read();  if (ch < 0) {    throw new EOFException();  }  return (byte)(ch);}  }
class C{  public boolean hasCapability(String capability){  boolean hasCap=false;  for (  DeviceService service : services.values()) {    if (service.hasCapability(capability)) {      hasCap=true;      break;    }  }  return hasCap;}  }
class C{  public static GLFont fromSpritefont(String name,ResourceLocation image,ResourceLocation xml){  if (name == null)   throw new IllegalArgumentException("name may not be null");  if (image == null)   throw new IllegalArgumentException("image may not be null");  if (xml == null)   throw new IllegalArgumentException("xml may not be null");  try {    IResource imageResource=Minecraft.getMinecraft().getResourceManager().getResource(image);    InputStream stream=imageResource.getInputStream();    if (stream == null)     throw new IOException("Could not open image file.");    BufferedImage buffer=ImageIO.read(stream);    GLFontMetrics metric=GLFontMetrics.fromResource(xml,buffer.getWidth(),buffer.getHeight());    GLFont f0=fromBuffer(name,buffer,buffer.getWidth(),buffer.getHeight(),metric);    return f0;  } catch (  IOException ioex) {  }  return null;}  }
class C{  public void reset(){  mLastEventSeq=-1;  mLastNestingLevel=0;  mTrackballDown=false;  mTrackballUnhandled=false;  mTouchEventStreamPointers=0;  mTouchEventStreamIsTainted=false;  mTouchEventStreamUnhandled=false;  mHoverEntered=false;  while (mKeyStateList != null) {    final KeyState state=mKeyStateList;    mKeyStateList=state.next;    state.recycle();  }}  }
class C{  @Override public Request<BuilderStatus> status(ProjectReference projectReference,long taskId){  checkNotNull(projectReference);  final Invocation request=getWebTarget().path(projectReference.workspaceId()).path("status").path(String.valueOf(taskId)).request().accept(APPLICATION_JSON).buildGet();  return new SimpleRequest<BuilderStatus>(request,DefaultBuilderStatus.class,getAuthenticationManager());}  }
class C{  @RequestMapping(value="/contents",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Content> updateContent(@Valid @RequestBody Content content) throws URISyntaxException {  log.debug("REST request to update Content : {}",content);  if (content.getId() == null) {    return createContent(content);  }  Content result=contentService.updateContent(content);  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("content",content.getId().toString())).body(result);}  }
class C{  public boolean areAllDaysExcluded(){  return isDayExcluded(java.util.Calendar.SUNDAY) && isDayExcluded(java.util.Calendar.MONDAY) && isDayExcluded(java.util.Calendar.TUESDAY)&& isDayExcluded(java.util.Calendar.WEDNESDAY)&& isDayExcluded(java.util.Calendar.THURSDAY)&& isDayExcluded(java.util.Calendar.FRIDAY)&& isDayExcluded(java.util.Calendar.SATURDAY);}  }
class C{  public static boolean equals(int[] list1,int[] list2){  if (list1.length != list2.length)   return false;  for (int i=0; i < list1.length; i++) {    if (list1[i] != list2[i])     return false;  }  return true;}  }
class C{  protected int convertRowToY(int row){  if (row >= getRowCount(0) || row < 0) {    return -1;  }  Rectangle bounds=getCellBounds(list,row,row);  return bounds.y;}  }
class C{  public Builder<T> compacted(){  this.compacted=true;  return this;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SXTAH");  translateAll(environment,instruction,"SXTAH",instructions);}  }
class C{  protected int[] toDocIDs(DocList docs){  int[] docIDs=new int[docs.size()];  DocIterator iterator=docs.iterator();  for (int i=0; i < docIDs.length; i++) {    if (!iterator.hasNext()) {      throw new AssertionError();    }    docIDs[i]=iterator.nextDoc();  }  if (iterator.hasNext()) {    throw new AssertionError();  }  return docIDs;}  }
class C{  private double distance(Instance inst1,Instance inst2){  return distance(inst1,inst2.toDoubleArray());}  }
class C{  public LoggingBaleenHistory(){}  }
class C{  @Transactional public T insert(T newInstance){  if (entityManager.contains(newInstance)) {    LOGGER.debug("The Entity that you are attempting to store has already been persisted.");    return newInstance;  }  entityManager.persist(newInstance);  return newInstance;}  }
class C{  public SpecObj(String pfn,FilenameToStream ntfis){  if (ntfis == null) {    ntfis=ToolIO.getDefaultResolver();  }  this.primaryFileName=pfn;  this.resolver=ntfis;}  }
class C{  private boolean importMInventoryMoveLine(MMovement move,X_I_Movement imove){  isImported=false;  MMovementLine moveLine=getMInventoryMoveLine(move,imove);  if (moveLine == null) {    moveLine=new MMovementLine(Env.getCtx(),0,get_TrxName());  }  try {    moveLine.setM_Movement_ID(move.getM_Movement_ID());    moveLine.setAD_Org_ID(imove.getAD_Org_ID());    moveLine.setM_Product_ID(imove.getM_Product_ID());    moveLine.setM_Locator_ID(imove.getM_Locator_ID());    moveLine.setM_LocatorTo_ID(imove.getM_LocatorTo_ID());    moveLine.setMovementQty(imove.getMovementQty());    moveLine.saveEx();    imove.setM_MovementLine_ID(moveLine.getM_MovementLine_ID());    imove.saveEx();    isImported=true;  } catch (  Exception e) {    imove.setI_ErrorMsg(e.getMessage());    isImported=false;  }  return isImported;}  }
class C{  public DoubleLinkedList<IMove> validMoves(){  DoubleLinkedList<IMove> list=new DoubleLinkedList<IMove>();  for (int i=0; i < moves.length; i++) {    int from=moves[i][0];    int over=moves[i][1];    int to=moves[i][2];    if (filled[from] && filled[over] && !filled[to]) {      list.insert(new JumpMove(from,over,to));    }  }  return list;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="SBSC_USE_STRINGBUFFER_CONCATENATION") public void cancelButtonActionPerformed(){  editMode=false;  curNode=null;  String nodesstring="";  int tempnumnodes=_memo.getTrafficController().getNumNodes();  for (int i=0; i < tempnumnodes; i++) {    AcelaNode tempnode;    tempnode=(AcelaNode)_memo.getTrafficController().getNodeFromAddress(i);    nodesstring=nodesstring + " " + tempnode.getNodeTypeString();  }  thenodesStaticC.setText(nodesstring);  nodeAddress=readNodeAddress();  if (nodeAddress < 0) {    return;  }  curNode=(AcelaNode)_memo.getTrafficController().getNodeFromAddress(nodeAddress);  if (curNode == null) {    statusText1.setText(rb.getString("Error4"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return;  }  nodeAddrStatic.setText(Integer.toString(nodeAddress));  nodeAddrBox.setVisible(true);  nodeAddrField.setVisible(false);  nodeAddrStatic.setVisible(false);  nodeType=curNode.getNodeType();  nodeTypeBox.setSelectedIndex(nodeType);  nodeTypeBox.setVisible(false);  nodeTypeStatic.setText(AcelaNode.getModuleNames()[nodeType]);  nodeTypeStatic.setVisible(true);  int numoutputbits=curNode.getNumOutputBitsPerCard();  if (numoutputbits > 0) {    for (int o=0; o < numoutputbits; o++) {      if (curNode.getOutputInit(o) == 0) {        initialState[o]=rb.getString("InitialStateOff");      } else {        initialState[o]=rb.getString("InitialStateOn");      }      if (curNode.getOutputWired(o) == 0) {        outputWired[o]=rb.getString("OutputWiredNO");      } else {        outputWired[o]=rb.getString("OutputWiredNC");      }      if (curNode.getOutputType(o) == 0) {        outputType[o]=rb.getString("OutputTypeONOFF");      } else {        if (curNode.getOutputType(o) == 1) {          outputType[o]=rb.getString("OutputTypePULSE");        } else {          outputType[o]=rb.getString("OutputTypeBLINK");        }      }      outputLength[o]=String.valueOf(curNode.getOutputLength(o));    }  }  int numsensorbits=curNode.getNumSensorBitsPerCard();  if (numsensorbits > 0) {    for (int i=0; i < numsensorbits; i++) {      if (curNode.getSensorType(i) == 0) {        filterType[i]=rb.getString("FilterTypeNoise");      } else       if (curNode.getSensorType(i) == 1) {        filterType[i]=rb.getString("FilterTypeDebounce");      } else       if (curNode.getSensorType(i) == 2) {        filterType[i]=rb.getString("FilterTypeCarGap");      } else {        filterType[i]=rb.getString("FilterTypeDirtyTrack");      }      if (curNode.getSensorPolarity(i) == 0) {        filterPolarity[i]=rb.getString("FilterNormalPolarity");      } else {        filterPolarity[i]=rb.getString("FilterInversePolarity");      }      filterThreshold[i]=String.valueOf(curNode.getSensorThreshold(i));    }  }  editMode=false;  addButton.setVisible(true);  editButton.setVisible(true);  deleteButton.setVisible(true);  doneButton.setVisible(true);  updateButton.setVisible(false);  cancelButton.setVisible(false);  statusText1.setText(infoStatus1);  statusText2.setText(infoStatus2);  statusText3.setText(infoStatus3);  d8outputConfigModel.setEditMode(false);  swoutputConfigModel.setEditMode(false);  ymoutputConfigModel.setEditMode(false);  TBoutputConfigModel.setEditMode(false);  TBsensorConfigModel.setEditMode(false);  smoutputConfigModel.setEditMode(false);  wmsensorConfigModel.setEditMode(false);  sysensorConfigModel.setEditMode(false);  contentPane.repaint();}  }
class C{  public void testCloseCompletes(){  SubmissionPublisher<Integer> p=basicPublisher();  TestSubscriber s1=new TestSubscriber();  TestSubscriber s2=new TestSubscriber();  p.subscribe(s1);  p.subscribe(s2);  p.submit(1);  p.close();  assertTrue(p.isClosed());  assertNull(p.getClosedException());  s1.awaitComplete();  assertEquals(1,s1.nexts);  assertEquals(1,s1.completes);  s2.awaitComplete();  assertEquals(1,s2.nexts);  assertEquals(1,s2.completes);}  }
class C{  public static String formatNumber(final long number){  long divided=number;  final StringBuffer sb=new StringBuffer();  while (divided > 1000) {    long rest=divided % 1000;    sb.insert(0," " + String.format("%03d",rest));    divided=divided / 1000;  }  long rest=divided % 1000;  sb.insert(0,rest);  return sb.toString();}  }
class C{  public InputOutput<T> seekCeil(IntsRef target) throws IOException {  this.target=target;  targetLength=target.length;  super.doSeekCeil();  return setResult();}  }
class C{  public InternalFunctionInvocationTargetException(String msg,DistributedMember failedNode){  super(msg,failedNode);  this.failedIds.add(failedNode.getId());}  }
class C{  protected <V extends DataObjectRestRep>boolean accept(V item,ResourceFilter<V> filter){  if (!includeInactive && !ResourceUtils.isActive(item)) {    return false;  }  if (!includeInternal && !ResourceUtils.isNotInternal(item)) {    return false;  }  if (filter != null) {    return filter.accept(item);  }  return true;}  }
class C{  public static DBIDRef invalid(){  return DBIDFactory.FACTORY.invalid();}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public void startAnimation(){  resetAnimation();}  }
class C{  public final void removeField(String name){  Iterator<IndexableField> it=fields.iterator();  while (it.hasNext()) {    IndexableField field=it.next();    if (field.name().equals(name)) {      it.remove();      return;    }  }}  }
class C{  public GitHubRepositoryList createRepositoriesList(GHRepository ghRepository) throws ApiException, IOException {  GitHubRepositoryList dtoRepositoriesList=DtoFactory.getInstance().createDto(GitHubRepositoryList.class);  List<GitHubRepository> dtoRepositories=new ArrayList<>();  dtoRepositories.add(createRepository(ghRepository));  dtoRepositoriesList.setRepositories(dtoRepositories);  return dtoRepositoriesList;}  }
class C{  public void testInlineSimpleFilterEqURIRev(){  final BigdataValueFactory f=store.getValueFactory();  final BigdataURI fooLit=f.createURI(":foo");  final IV foo=makeIV(fooLit);  final BigdataValue[] values=new BigdataValue[]{fooLit};  store.getLexiconRelation().addTerms(values,values.length,false);  final IBindingSet[] bsets=new IBindingSet[]{new ListBindingSet()};  final QueryRoot given=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    projection.addProjectionVar(new VarNode("p"));    projection.addProjectionVar(new VarNode("o"));    given.setProjection(projection);    final JoinGroupNode whereClause=new JoinGroupNode();    given.setWhereClause(whereClause);    whereClause.addChild(new StatementPatternNode(new VarNode("s"),new VarNode("p"),new VarNode("o"),null,Scope.DEFAULT_CONTEXTS));    whereClause.addChild(new FilterNode(FunctionNode.EQ(new ConstantNode(foo),new VarNode("o"))));  }  final QueryRoot expected=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    projection.addProjectionVar(new VarNode("p"));    projection.addProjectionVar(new VarNode("o"));    expected.setProjection(projection);    final JoinGroupNode whereClause=new JoinGroupNode();    expected.setWhereClause(whereClause);    whereClause.addChild(new StatementPatternNode(new VarNode("s"),new VarNode("p"),new ConstantNode(new Constant((IVariable)Var.var("o"),foo)),null,Scope.DEFAULT_CONTEXTS));    whereClause.addChild(new FilterNode(FunctionNode.EQ(new ConstantNode(foo),new ConstantNode(new Constant((IVariable)Var.var("o"),foo)))));  }  final IASTOptimizer rewriter=new ASTStaticBindingsOptimizer();  final AST2BOpContext context=new AST2BOpContext(new ASTContainer(given),store);  final IQueryNode actual=rewriter.optimize(context,new QueryNodeWithBindingSet(given,bsets)).getQueryNode();  assertSameAST(expected,actual);}  }
class C{  public static DbException convert(Throwable e){  if (e instanceof DbException) {    return (DbException)e;  } else   if (e instanceof SQLException) {    return new DbException((SQLException)e);  } else   if (e instanceof InvocationTargetException) {    return convertInvocation((InvocationTargetException)e,null);  } else   if (e instanceof IOException) {    return get(ErrorCode.IO_EXCEPTION_1,e,e.toString());  } else   if (e instanceof OutOfMemoryError) {    return get(ErrorCode.OUT_OF_MEMORY,e);  } else   if (e instanceof StackOverflowError || e instanceof LinkageError) {    return get(ErrorCode.GENERAL_ERROR_1,e,e.toString());  } else   if (e instanceof Error) {    throw (Error)e;  }  return get(ErrorCode.GENERAL_ERROR_1,e,e.toString());}  }
class C{  @Profile("default") @Bean @DependsOn("locationRunner") CommandLineRunner transportRunner(TransportUnitRepository tur,TransportUnitTypeRepository tutr,LocationService ls){  TransportUnitType tut=tutr.save(new TransportUnitType(("Carton")));  return null;}  }
class C{  public Photo(InputStream in,ImageType type) throws IOException {  super(in,type);}  }
class C{  public Future<Void> updateTableEntityAsync(TableEntity tableEntity,boolean commit){  updateTableEntity(tableEntity,commit);  return new AsyncResult<Void>(null);}  }
class C{  public CompiledST compile(String srcName,String name,List<FormalArgument> args,String template,Token templateToken){  Compiler c=new Compiler(this);  return c.compile(srcName,name,args,template,templateToken);}  }
class C{  public boolean isSummary(){  Object oo=get_Value(COLUMNNAME_IsSummary);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void respond(String response){  getChannel().send().message(user,response);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Channel c=getChannel(stack);  return (c == null) ? "" : c.getName();}  }
class C{  private static int checkClassTypeSignature(final String signature,int pos){  pos=checkChar('L',signature,pos);  pos=checkIdentifier(signature,pos);  while (getChar(signature,pos) == '/') {    pos=checkIdentifier(signature,pos + 1);  }  if (getChar(signature,pos) == '<') {    pos=checkTypeArguments(signature,pos);  }  while (getChar(signature,pos) == '.') {    pos=checkIdentifier(signature,pos + 1);    if (getChar(signature,pos) == '<') {      pos=checkTypeArguments(signature,pos);    }  }  return checkChar(';',signature,pos);}  }
class C{  public MemoryTableAction(String actionName){  super(actionName);  if (jmri.InstanceManager.getNullableDefault(jmri.MemoryManager.class) == null) {    setEnabled(false);  }}  }
class C{  public int length(){  return pos;}  }
class C{  public boolean isStackPointer(){  return m_register.isSp();}  }
class C{  public void testCommitVisibility() throws Exception {  File logDir=prepareLogDir("testCommitVisibility");  DiskLog log=new DiskLog();  log.setLogDir(logDir.getAbsolutePath());  log.setReadOnly(false);  log.setLogFileSize(1000000);  log.setTimeoutMillis(Integer.MAX_VALUE);  log.prepare();  LogConnection conn=log.connect(false);  SimpleLogReader reader=new SimpleLogReader(log,LogConnection.FIRST,4);  Thread thread=new Thread(reader);  thread.start();  logger.info("Writing message #0, no commit");  THLEvent e=this.createTHLEvent(0);  conn.store(e,false);  reader.lastSeqno.waitSeqnoGreaterEqual(0,2000);  assertEquals("Reader does not see",0,reader.eventsRead);  logger.info("Writing message #1, implicit commit");  e=this.createTHLEvent(1);  long commitStart=System.currentTimeMillis();  conn.store(e,true);  reader.lastSeqno.waitSeqnoGreaterEqual(1,2000);  long commitEnd=System.currentTimeMillis();  assertEquals("Reader does see",2,reader.eventsRead);  logger.info("Saw committed value #1: elapsed millis=" + (commitEnd - commitStart));  logger.info("Writing message #2, no commit");  e=this.createTHLEvent(2);  conn.store(e,false);  reader.lastSeqno.waitSeqnoGreaterEqual(2,2000);  assertEquals("Reader does not see uncommitted #2",2,reader.eventsRead);  logger.info("Writing message #3, explicit commit");  e=this.createTHLEvent(3);  conn.store(e,false);  commitStart=System.currentTimeMillis();  conn.commit();  commitEnd=System.currentTimeMillis();  reader.lastSeqno.waitSeqnoGreaterEqual(3,5000);  assertEquals("Reader sees all events",4,reader.eventsRead);  logger.info("Saw committed value #3: elapsed millis=" + (commitEnd - commitStart));  assertTrue("Reader is done",reader.waitFinish(1000));  if (reader.error != null) {    throw new Exception("Reader thread failed with exception after " + reader.eventsRead + " events",reader.error);  }  log.release();}  }
class C{  public static String replaceFullRequestContent(String requestContentTemplate,String replacementString){  return (requestContentTemplate.replace(PcConstants.COMMAND_VAR_DEFAULT_REQUEST_CONTENT,replacementString));}  }
class C{  public static InputStream newInputStream(String fileName) throws IOException {  return FilePath.get(fileName).newInputStream();}  }
class C{  public PairedStats snapshot(){  return new PairedStats(xStats.snapshot(),yStats.snapshot(),sumOfProductsOfDeltas);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFEImageElement(prefix,(AbstractDocument)doc);}  }
class C{  private void displayCastList(Cursor cursor){  if (cursor.moveToFirst()) {    castArrayList=new ArrayList<VideoType.Cast>(cursor.getCount());    do {      castArrayList.add(new VideoType.Cast(cursor.getString(MovieCastListQuery.NAME),cursor.getInt(MovieCastListQuery.ORDER),cursor.getString(MovieCastListQuery.ROLE),cursor.getString(MovieCastListQuery.THUMBNAIL)));    } while (cursor.moveToNext());    UIUtils.setupCastInfo(getActivity(),castArrayList,videoCastList,AllCastActivity.buildLaunchIntent(getActivity(),movieTitle,castArrayList));  }}  }
class C{  public void testZeroPos(){  byte aBytes[]={0};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=0;  int bSign=1;  byte rBytes[]={0,-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static ServerLocator createServerLocator(final boolean ha,final DiscoveryGroupConfiguration groupConfiguration){  return new ServerLocatorImpl(ha,groupConfiguration);}  }
class C{  public static <T>T runWithCheckCanceled(@NotNull final Callable<T> callable,@NotNull final ProgressIndicator indicator) throws Exception {  return runWithCheckCanceled(callable,indicator,PooledThreadExecutor.INSTANCE);}  }
class C{  public WaitForViewInstallation(){}  }
class C{  @Override public void perform(IR ir){  liveIntervals=new LiveInterval();  final boolean dumpFinalLiveIntervals=DEBUG || ir.options.PRINT_GC_MAPS && (!ir.options.hasMETHOD_TO_PRINT() || (ir.options.hasMETHOD_TO_PRINT() && ir.options.fuzzyMatchMETHOD_TO_PRINT(ir.method.toString())));  final boolean dumpFinalMaps=dumpFinalLiveIntervals;  final boolean dumpFixedPointResults=dumpFinalLiveIntervals;  DefUse.recomputeSpansBasicBlock(ir);  debugBegining(ir,createGCMaps,dumpFinalLiveIntervals,dumpFinalMaps,dumpFixedPointResults);  bbLiveInfo=new BBLiveElement[ir.cfg.numberOfNodes()];  for (int i=0; i < ir.cfg.numberOfNodes(); i++) {    bbLiveInfo[i]=new BBLiveElement();  }  currentSet=new LiveSet();  boolean reuseCurrentSet=false;  BasicBlock currentBlock=(BasicBlock)ir.cfg.buildRevTopSort();  SortedGraphIterator bbIter=new SortedGraphIterator(currentBlock,false);  while (currentBlock != null) {    boolean changed=processBlock(currentBlock,reuseCurrentSet,ir);    BasicBlock nextBlock=(BasicBlock)bbIter.markAndGetNextTopSort(changed);    reuseCurrentSet=nextBlock != null && bbIter.isSinglePredecessor(currentBlock,nextBlock);    currentBlock=nextBlock;  }  debugPostGlobal(ir,dumpFinalLiveIntervals,dumpFinalMaps,dumpFixedPointResults);  if (!skipLocal) {    performLocalPropagation(ir,createGCMaps);    if (createGCMaps && dumpFinalMaps) {      System.out.println("**** START OF IR for method: " + ir.method.getName() + " in class: "+ ir.method.getDeclaringClass());      ir.printInstructions();      System.out.println("**** END   OF IR INSTRUCTION DUMP ****");      printFinalMaps(ir);    }    if (dumpFinalLiveIntervals) {      printFinalLiveIntervals(ir);    }    bbLiveInfo=null;    computeRegisterMap(ir);  }  currentSet=null;  if (createGCMaps) {    ir.MIRInfo.gcIRMap=map;    ir.MIRInfo.osrVarMap=osrMap;  }  ir.setHandlerLivenessComputed(storeLiveAtHandlers);  ir.setLivenessInformation(liveIntervals);}  }
class C{  private ContentProviderOperation modifyBlockingStateForContact(long rawContactId,ContactId contact,BlockingState newBlockingState,BlockingState oldBlockingState){  if (newBlockingState == oldBlockingState) {    return null;  }  return ContentProviderOperation.newUpdate(Data.CONTENT_URI).withSelection(SEL_RAW_CONTACT_MIMETYPE_DATA1,new String[]{Long.toString(rawContactId),MIMETYPE_BLOCKING_STATE,contact.toString()}).withValue(Data.DATA2,newBlockingState.toInt()).build();}  }
class C{  protected DatagramSocket(DatagramSocketImpl impl){  if (impl == null)   throw new NullPointerException();  this.impl=impl;  checkOldImpl();}  }
class C{  @SuppressWarnings("unused") public int indexOfDialCode(int dialCode){  for (int i=0; i < this.size(); i++) {    if (this.get(i).getDialCode() == dialCode) {      return i;    }  }  return -1;}  }
class C{  public SassColor(double red,double green,double blue,double alpha){  this.red=red;  this.green=green;  this.blue=blue;  this.alpha=alpha;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public void processTuple(String line) throws ParseException {  String url;  String httpStatusCode;  long numOfBytes;  String referer;  String agent;  String ipAddr;  Pattern accessLogPattern=Pattern.compile(getAccessLogRegex(),Pattern.CASE_INSENSITIVE | Pattern.DOTALL);  Matcher accessLogEntryMatcher;  accessLogEntryMatcher=accessLogPattern.matcher(line);  if (accessLogEntryMatcher.matches()) {    ipAddr=accessLogEntryMatcher.group(1);    url=accessLogEntryMatcher.group(5);    httpStatusCode=accessLogEntryMatcher.group(6);    numOfBytes=Long.parseLong(accessLogEntryMatcher.group(7));    referer=accessLogEntryMatcher.group(8);    agent=accessLogEntryMatcher.group(9);    outputIPAddress.emit(ipAddr);    outputUrl.emit(url);    outputStatusCode.emit(httpStatusCode);    outputBytes.emit(numOfBytes);    outputReferer.emit(referer);    outputAgent.emit(agent);  }}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public static ExceptionBuilder badRequest(){  return new ExceptionBuilder(Status.BAD_REQUEST);}  }
class C{  public int[] $clone(){  throw Util.makeJavaArrayWrapperException();}  }
class C{  public boolean merge(Measure measure){  if (master.getParent().getRoot().equals(measure.getParent().getRoot())) {    return add(measure);  }  return false;}  }
class C{  public MaterialEditText inputColor(int color){  mInputColor=color;  mEditText.setTextColor(mInputColor);  return this;}  }
class C{  public void startKeyframe(int duration){  if (!this.correctAnimation) {    return;  }  this.prevTempTick=this.tempTick;  this.tempTick+=duration;}  }
class C{  private void crop(){  if (count != data.length) {    data=PApplet.subset(data,0,count);  }}  }
class C{  public InterpolatingDiscretizer(double[] values){  Arrays.sort(values);  TDoubleArrayList tmpBorders=new TDoubleArrayList();  TDoubleArrayList tmpValues=new TDoubleArrayList();  double low=values[0];  double high;  for (int i=1; i < values.length; i++) {    high=values[i];    if (low < high) {      tmpBorders.add(low + (high - low) / 2.0);      tmpValues.add(low);    }    low=high;  }  tmpValues.add(values[values.length - 1]);  borders=new FixedBordersDiscretizer(tmpBorders.toArray());  binValues=tmpValues.toArray();}  }
class C{  public Object executeFunction(final ScriptEngine engine,final String functionName,final Object... args){  Object evalResult=null;  if (engine instanceof Invocable)   try {    evalResult=((Invocable)engine).invokeFunction(functionName,args);    if (evalResult == null)     evalResult=engine.get("result");  } catch (  final Exception e) {    final String errMsg="Exception while invoking function [" + functionName + "]";    LOG.error(errMsg,e);    throw new ApplicationRuntimeException(errMsg,e);  } else {    final String errMsg="Script engine [" + engine + "] does not support method execution!";    LOG.error(errMsg);    throw new ApplicationRuntimeException(errMsg);  }  return evalResult;}  }
class C{  public Point indexToLocation(JList a,int b){  Point returnValue=((ListUI)(uis.elementAt(0))).indexToLocation(a,b);  for (int i=1; i < uis.size(); i++) {    ((ListUI)(uis.elementAt(i))).indexToLocation(a,b);  }  return returnValue;}  }
class C{  private void fixTabControlsVisibility(){  CTabItem[] items=tabFolder.getItems();  for (  CTabItem cTabItem : items) {    if (cTabItem.equals(tabFolder.getSelection())) {      cTabItem.getControl().setVisible(true);    } else {      cTabItem.getControl().setVisible(false);    }  }}  }
class C{  public boolean existsAnyRelFldValueUpdate() throws Exception {  boolean exists;  exists=m_relFlds.existsAnyFldUpdate();  return exists;}  }
class C{  @Override protected EClass eStaticClass(){  return SGraphPackage.Literals.COMPOSITE_ELEMENT;}  }
class C{  public static synchronized String addCertRequest(String keyId,ClientId memberId,String subjectName,KeyUsageInfo keyUsage){  log.trace("addCertRequest({}, {})",keyId,memberId);  Key key=findKey(keyId);  if (key.getUsage() != null && key.getUsage() != keyUsage) {    throw CodedException.tr(X_WRONG_CERT_USAGE,"cert_request_wrong_usage","Cannot add %s certificate request to %s key",keyUsage,key.getUsage());  }  key.setUsage(keyUsage);  for (  CertRequest certRequest : key.getCertRequests()) {    ClientId crMember=certRequest.getMemberId();    String crSubject=certRequest.getSubjectName();    if ((memberId == null && crSubject.equalsIgnoreCase(subjectName)) || (memberId != null && memberId.equals(crMember) && crSubject.equalsIgnoreCase(subjectName))) {      log.warn("Certificate request (memberId: {}, " + "subjectName: {}) already exists",memberId,subjectName);      return certRequest.getId();    }  }  String certId=SignerUtil.randomId();  key.addCertRequest(new CertRequest(certId,memberId,subjectName));  log.info("Added new certificate request (memberId: {}, " + "subjectId: {}) under key {}",new Object[]{memberId,subjectName,keyId});  return certId;}  }
class C{  protected void reorderActions(final List<String> list){}  }
class C{  @Override public String toString(){  return "BugCode[" + abbrev + "]";}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  public TreePath(String initialPathEntry,String... args){  this.add(initialPathEntry);  for (  String pathElement : args) {    if (!WWUtil.isEmpty(pathElement))     this.add(pathElement);  }}  }
class C{  public Task<BucketRestRep> updateBucketACL(URI id,ObjectBucketACLUpdateParams param){  UriBuilder builder=client.uriBuilder(getBucketACLUrl());  URI targetUri=builder.build(id);  return putTaskURI(param,targetUri);}  }
class C{  private void playNextEpisode(){  Playlist playlist=PlaylistModel.getPlaylist(this);  if (playlist.next()) {    PlaylistModel.savePlaylist(this,playlist);    Episode episode=EpisodeModel.getEpisodeByGeneratedId(this,playlist.getCurrentEpisodeServerId());    play(episode,true);  } else {    SleepTimerHelper.cancelTimer(this);  }}  }
class C{  public SVGPathOutlineHandle(SVGPathFigure owner){  this(owner,false);}  }
class C{  public void initRestAssured(){  super.initRestAssured();  RestAssured.requestSpecification.basePath(SERVER_ROOT + "/");}  }
class C{  private void ensureStaticLayout(int width,boolean bUseExpandedSize){  if (mStaticMeasuringLayout != null)   mStaticMeasuringLayout=null;  mTextPaint.setTextSize((bUseExpandedSize) ? mfExpandedTextSize : mfCollapsedTextSize);  mStaticMeasuringLayout=new StaticLayout(msDisplayText,mTextPaint,width,Layout.Alignment.ALIGN_NORMAL,1.0f,0.0f,false);}  }
class C{  public JrmpGenerator(){}  }
class C{  synchronized boolean expire(long threshold){  Iterator<ConnectionDesc> iter=conns.iterator();  ConnectionDesc entry;  while (iter.hasNext()) {    entry=iter.next();    if (entry.expire(threshold)) {      d("expire(): removing ",entry);      td("Expired ",entry);      iter.remove();    }  }  return conns.isEmpty();}  }
class C{  public Intent intent(Context ctx,String token,String url){  Intent i=new Intent(ctx,ContributorsActivity.class);  i.putExtra(Contributors.BUNDLE_THEME,this.activityTheme);  if (!TextUtils.isEmpty(token)) {    i.putExtra(Contributors.BUNDLE_CONTRIBUTORS_LIBRARY_GITHUB_TOKEN,token);  }  if (!TextUtils.isEmpty(url)) {    i.putExtra(Contributors.BUNDLE_REPOSITORY_URL,url);  }  if (this.activityStyle != null) {    i.putExtra(Contributors.BUNDLE_STYLE,this.activityStyle.name());  }  return i;}  }
class C{  @Override public boolean containsClass(String className) throws IOException {  boolean containsClass=false;  String resourceName="WEB-INF/classes/" + className.replace('.','/') + ".class";  if (getResource(resourceName) != null) {    containsClass=true;  }  for (  String resource : getResources("WEB-INF/lib/")) {    JarArchive jar=new DefaultJarArchive(getResource(resource));    if (jar.containsClass(className)) {      containsClass=true;    }  }  return containsClass;}  }
class C{  public boolean isPathEditable(){  return origin == RepFolderOrigin.USER;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void paintLayeredHighlights(Graphics g,int p0,int p1,Shape viewBounds,JTextComponent editor,View view){  paintListLayered(g,p0,p1,viewBounds,editor,view,markedOccurrences);  super.paintLayeredHighlights(g,p0,p1,viewBounds,editor,view);  paintListLayered(g,p0,p1,viewBounds,editor,view,parserHighlights);}  }
class C{  public static Object removePUTALL_KEY1(){  try {    Region region=cache.getRegion(Region.SEPARATOR + REGION_NAME);    assertNotNull(region);    region.remove(PUTALL_KEY1);    return eventId;  } catch (  Exception e) {    fail("put failed due to ",e);  }  return null;}  }
class C{  public char[] GetSuffix(int len){  char[] ret=new char[len];  if ((bufpos + 1) >= len)   System.arraycopy(buffer,bufpos - len + 1,ret,0,len); else {    System.arraycopy(buffer,bufsize - (len - bufpos - 1),ret,0,len - bufpos - 1);    System.arraycopy(buffer,0,ret,len - bufpos - 1,bufpos + 1);  }  return ret;}  }
class C{  public ItemNode(TreeNode<?> parent,ItemReference data,TreeStructure treeStructure,EventBus eventBus,ProjectServiceClient projectServiceClient,DtoUnmarshallerFactory dtoUnmarshallerFactory){  super(parent,data,treeStructure,eventBus);  this.projectServiceClient=projectServiceClient;  this.dtoUnmarshallerFactory=dtoUnmarshallerFactory;}  }
class C{  public boolean isAttributeSpecified(int attributeHandle){  return true;}  }
class C{  public void drawOrb(Renderer renderer){  orb.onDraw(renderer);}  }
class C{  private static void decodeHanziSegment(BitSource bits,StringBuilder result,int count) throws FormatException {  if (count * 13 > bits.available()) {    throw FormatException.getFormatInstance();  }  byte[] buffer=new byte[2 * count];  int offset=0;  while (count > 0) {    int twoBytes=bits.readBits(13);    int assembledTwoBytes=((twoBytes / 0x060) << 8) | (twoBytes % 0x060);    if (assembledTwoBytes < 0x003BF) {      assembledTwoBytes+=0x0A1A1;    } else {      assembledTwoBytes+=0x0A6A1;    }    buffer[offset]=(byte)((assembledTwoBytes >> 8) & 0xFF);    buffer[offset + 1]=(byte)(assembledTwoBytes & 0xFF);    offset+=2;    count--;  }  try {    result.append(new String(buffer,StringUtils.GB2312));  } catch (  UnsupportedEncodingException ignored) {    throw FormatException.getFormatInstance();  }}  }
class C{  public void insert(Key key){  keys[n + d]=key;  swim(n++);  if (n == keys.length - d) {    resize(getN(order + 1) + d);    order++;  }}  }
class C{  public void update(byte[] b,int offset,int length){  digest.update(b,offset,length);}  }
class C{  public void add(String dim,Query subQuery){  assert drillDownDims.size() == dimQueries.size();  if (drillDownDims.containsKey(dim) == false) {    drillDownDims.put(dim,drillDownDims.size());    BooleanQuery.Builder builder=new BooleanQuery.Builder();    dimQueries.add(builder);  }  final int index=drillDownDims.get(dim);  dimQueries.get(index).add(subQuery,Occur.SHOULD);}  }
class C{  public Bindings add(String property,JTextArea textArea,String defaultValue){  registerPropertyChangeListener(textArea);  return add(new JTextComponentBinding(property,textArea,defaultValue));}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/unassign-file-policy/{filePolicyUri}") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep unAssignFilePolicy(@PathParam("id") URI id,@PathParam("filePolicyUri") URI filePolicyUri) throws InternalException {  _log.info("Unassign Policy on File System : request received for {}  with {}",id,filePolicyUri);  String task=UUID.randomUUID().toString();  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  FileShare fs=queryResource(id);  ArgValidator.checkEntity(fs,id,isIdEmbeddedInURL(id));  ArgValidator.checkFieldUriType(filePolicyUri,SchedulePolicy.class,"filePolicyUri");  ArgValidator.checkUri(filePolicyUri);  SchedulePolicy fp=_permissionsHelper.getObjectById(filePolicyUri,SchedulePolicy.class);  ArgValidator.checkEntityNotNull(fp,filePolicyUri,isIdEmbeddedInURL(filePolicyUri));  if (!fp.getTenantOrg().getURI().toString().equalsIgnoreCase(fs.getTenant().getURI().toString())) {    throw APIException.badRequests.associatedPolicyTenantMismatch(filePolicyUri,id);  }  if (!fs.getFilePolicies().contains(filePolicyUri.toString())) {    throw APIException.badRequests.cannotFindAssociatedPolicy(filePolicyUri);  }  StorageSystem device=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());  FileController controller=getController(FileController.class,device.getSystemType());  String path=fs.getMountPath();  _log.info("Mount path found {} ",path);  Operation op=_dbClient.createTaskOpStatus(FileShare.class,fs.getId(),task,ResourceOperationTypeEnum.UNASSIGN_FILE_SYSTEM_SNAPSHOT_SCHEDULE);  op.setDescription("Filesystem unassign policy");  try {    _log.info("No Errors found proceeding further {}, {}, {}",new Object[]{_dbClient,fs,fp});    controller.unassignFileSystemSnapshotPolicy(device.getId(),fs.getId(),fp.getId(),task);    auditOp(OperationTypeEnum.ASSIGN_FILE_SYSTEM_SNAPSHOT_SCHEDULE,true,AuditLogManager.AUDITOP_BEGIN,fs.getId().toString(),device.getId().toString(),fp.getId());  } catch (  BadRequestException e) {    op=_dbClient.error(FileShare.class,fs.getId(),task,e);    _log.error("Error Unassigning Filesystem policy {}, {}",e.getMessage(),e);    throw e;  }catch (  Exception e) {    _log.error("Error Unassigning Filesystem policy {}, {}",e.getMessage(),e);    throw APIException.badRequests.unableToProcessRequest(e.getMessage());  }  return toTask(fs,task,op);}  }
class C{  public String moveForward(){  Check.isTrue(currentIndex < history.size() - 1,"currentIndex < history.size() - 1");  currentIndex++;  return history.get(currentIndex);}  }
class C{  private static synchronized TeamInfo addLiveTeam(){  String teamName=randomElement(COLORS) + randomElement(ANIMALS);  String robot=null;  if (random.nextInt(ROBOT_PROBABILITY) == 0) {    robot="Robot-" + random.nextInt(NUM_ROBOTS);  }  TeamInfo newTeam=new TeamInfo(teamName,System.currentTimeMillis(),robot);  liveTeams.add(newTeam);  System.out.println("[+" + newTeam + "]");  return newTeam;}  }
class C{  public void addText(float latPoint,float lonPoint,String stuff,int justify,LinkProperties properties) throws IOException {  LinkText.write(latPoint,lonPoint,stuff,LinkText.DEFAULT_FONT,justify,properties,link.dos);}  }
class C{  public QueryBuilder<T,ID> groupBy(String columnName){  FieldType fieldType=verifyColumnName(columnName);  if (fieldType.isForeignCollection()) {    throw new IllegalArgumentException("Can't groupBy foreign colletion field: " + columnName);  }  if (groupByList == null) {    groupByList=new ArrayList<String>();  }  groupByList.add(columnName);  selectIdColumn=false;  return this;}  }
class C{  public boolean isPlaylistSessionError(){  return mSessionError;}  }
class C{  protected int MultiplicativeExpr(int addPos) throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  if (-1 == addPos)   addPos=opPos;  UnaryExpr();  if (null != m_token) {    if (tokenIs('*')) {      nextToken();      insertOp(addPos,2,OpCodes.OP_MULT);      int opPlusLeftHandLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH) - addPos;      addPos=MultiplicativeExpr(addPos);      m_ops.setOp(addPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(addPos + opPlusLeftHandLen + 1) + opPlusLeftHandLen);      addPos+=2;    } else     if (tokenIs("div")) {      nextToken();      insertOp(addPos,2,OpCodes.OP_DIV);      int opPlusLeftHandLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH) - addPos;      addPos=MultiplicativeExpr(addPos);      m_ops.setOp(addPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(addPos + opPlusLeftHandLen + 1) + opPlusLeftHandLen);      addPos+=2;    } else     if (tokenIs("mod")) {      nextToken();      insertOp(addPos,2,OpCodes.OP_MOD);      int opPlusLeftHandLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH) - addPos;      addPos=MultiplicativeExpr(addPos);      m_ops.setOp(addPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(addPos + opPlusLeftHandLen + 1) + opPlusLeftHandLen);      addPos+=2;    } else     if (tokenIs("quo")) {      nextToken();      insertOp(addPos,2,OpCodes.OP_QUO);      int opPlusLeftHandLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH) - addPos;      addPos=MultiplicativeExpr(addPos);      m_ops.setOp(addPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(addPos + opPlusLeftHandLen + 1) + opPlusLeftHandLen);      addPos+=2;    }  }  return addPos;}  }
class C{  public AbstractMekaFilterTest(String name){  super(name);}  }
class C{  public double computeAverageLocalOfObservations() throws Exception {  detCovariance=MatrixUtils.determinantViaCholeskyResult(L);  detSourceCovariance=MatrixUtils.determinantViaCholeskyResult(Lsource);  detDestCovariance=MatrixUtils.determinantViaCholeskyResult(Ldest);  lastAverage=0.5 * Math.log(Math.abs(detSourceCovariance * detDestCovariance / detCovariance));  miComputed=true;  return lastAverage;}  }
class C{  public int joinSegments(Point2D.Double join,float tolerance){  return path.joinSegments(join,tolerance);}  }
class C{  protected void removeTag(short tagId){  mExifTags.remove(tagId);}  }
class C{  @Override public void onCreate(Bundle icicle){  super.onCreate(icicle);  setContentView(R.layout.scoaudiotest);  mScoStateTxt=(TextView)findViewById(R.id.scoStateTxt);  mVdStateTxt=(TextView)findViewById(R.id.vdStateTxt);  IntentFilter intentFilter=new IntentFilter(BluetoothHeadset.ACTION_AUDIO_STATE_CHANGED);  intentFilter.addAction(AudioManager.ACTION_SCO_AUDIO_STATE_CHANGED);  intentFilter.addAction(AudioManager.ACTION_SCO_AUDIO_STATE_UPDATED);  registerReceiver(mReceiver,intentFilter);  mAudioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);  mAudioManager2=(AudioManager)getApplicationContext().getSystemService(Context.AUDIO_SERVICE);  mHandler=new Handler();  mMediaControllers[0]=new SimplePlayerController(this,R.id.playPause1,R.id.stop1,R.raw.sine440_mo_16b_16k,AudioManager.STREAM_BLUETOOTH_SCO);  TextView name=(TextView)findViewById(R.id.playPause1Text);  name.setText("VOICE_CALL stream");  mScoButton=(ToggleButton)findViewById(R.id.ForceScoButton);  mScoButton.setOnCheckedChangeListener(mForceScoChanged);  mForceScoOn=false;  mScoButton.setChecked(mForceScoOn);  mVoiceDialerButton=(ToggleButton)findViewById(R.id.VoiceDialerButton);  mVoiceDialerButton.setOnCheckedChangeListener(mVoiceDialerChanged);  mVoiceDialerOn=false;  mVoiceDialerButton.setChecked(mVoiceDialerOn);  mMediaControllers[1]=new SimpleRecordController(this,R.id.recStop1,0,"Sco_record_");  mTtsInited=false;  mTts=new TextToSpeech(this,new TtsInitListener());  mTtsParams=new HashMap<String,String>();  mTtsParams.put(TextToSpeech.Engine.KEY_PARAM_STREAM,String.valueOf(AudioManager.STREAM_BLUETOOTH_SCO));  mTtsParams.put(TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID,UTTERANCE);  mSpeakText=(EditText)findViewById(R.id.speakTextEdit);  mSpeakText.setOnKeyListener(mSpeakKeyListener);  mSpeakText.setText("sco audio test sentence");  mTtsToFileButton=(ToggleButton)findViewById(R.id.TtsToFileButton);  mTtsToFileButton.setOnCheckedChangeListener(mTtsToFileChanged);  mTtsToFile=true;  mTtsToFileButton.setChecked(mTtsToFile);  mModeSpinner=(Spinner)findViewById(R.id.modeSpinner);  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,mModeStrings);  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);  mModeSpinner.setAdapter(adapter);  mModeSpinner.setOnItemSelectedListener(mModeChanged);  mCurrentMode=mAudioManager.getMode();  mModeSpinner.setSelection(mCurrentMode);  mBluetoothHeadsetDevice=null;  BluetoothAdapter btAdapter=BluetoothAdapter.getDefaultAdapter();  if (btAdapter != null) {    btAdapter.getProfileProxy(this,mBluetoothProfileServiceListener,BluetoothProfile.HEADSET);  }  sVoiceCommandIntent=new Intent(Intent.ACTION_VOICE_COMMAND);  sVoiceCommandIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);}  }
class C{  private void validateBackendMethodNameUnique(PsiMethod psiMethod,Map<String,PsiMethod> javaMethodNames){  if (!EndpointUtilities.isApiMethod(psiMethod)) {    return;  }  if (psiMethod.isConstructor()) {    return;  }  String javaName=psiMethod.getContainingClass().getQualifiedName() + "." + psiMethod.getName();  PsiMethod seenMethod=javaMethodNames.get(javaName);  if (seenMethod == null) {    javaMethodNames.put(javaName,psiMethod);  } else {    String psiMethodName=psiMethod.getContainingClass().getName() + "." + psiMethod.getName()+ psiMethod.getParameterList().getText();    String seenMethodName=seenMethod.getContainingClass().getName() + "." + seenMethod.getName()+ seenMethod.getParameterList().getText();    holder.registerProblem(psiMethod,"Overloaded methods are not supported. " + javaName + " has at least one overload: "+ psiMethodName+ " and "+ seenMethodName,new MyQuickFix());  }}  }
class C{  @Override public HitData rollHitLocation(int table,int side,int aimedLocation,int aimingMode,int cover){  List<Entity> activeFighters=getActiveSubEntities().orElse(Collections.emptyList());  if (isDoomed() || activeFighters.isEmpty()) {    return new HitData(0);  }  int hit=activeFighters.get(Compute.randomInt(activeFighters.size())).getId();  return new HitData(fighters.stream().filter(null).findFirst().orElse(0));}  }
class C{  public Village(int level,int l,Village p,int s){  back=p;  label=l;  forward=new Village[4];  seed=label * (IQ + s);  hospital=new Hospital(level);  returned=new List();}  }
class C{  public void reset(){  internalReset(0L);}  }
class C{  public void shift(int offset){  for (int i=0; i < idxList.size(); i++) {    idxList.set(i,idxList.get(i) + offset);  }}  }
class C{  public static void asserType(Object object,Class<?> classToBeChecked,String message){  if (!classToBeChecked.isAssignableFrom(object.getClass())) {    throw new IllegalArgumentException("assertion failed: The object has type " + object.getClass().getSimpleName() + ", but should have type "+ classToBeChecked.getSimpleName()+ ". "+ message);  }}  }
class C{  public static void meterFromString(OFFlowMod.Builder fmb,String inst,Logger log){  if (inst == null || inst.isEmpty()) {    return;  }  if (fmb.getVersion().compareTo(OFVersion.OF_13) < 0) {    log.error("Goto Meter Instruction not supported in OpenFlow 1.0, 1.1, or 1.2");    return;  }  OFInstructionMeter.Builder ib=OFFactories.getFactory(fmb.getVersion()).instructions().buildMeter();  if (inst.startsWith("0x")) {    ib.setMeterId(Long.valueOf(inst.replaceFirst("0x",""),16));  } else {    ib.setMeterId(Long.valueOf(inst));  }  log.debug("Appending (Goto)Meter instruction: {}",ib.build());  appendInstruction(fmb,ib.build());  log.debug("All instructions after append: {}",fmb.getInstructions());}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  public boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof ObjectIntHashMap))   return false;  ObjectIntHashMap m=(ObjectIntHashMap)o;  if (m.size() != size())   return false;  try {    Iterator<Entry> i=entrySet().iterator();    while (i.hasNext()) {      Entry e=i.next();      Object key=e.getKey();      int value=e.getValue();      if (!(m.containsKey(key))) {        return false;      } else       if (!(value == m.get(key))) {        return false;      }    }  } catch (  ClassCastException unused) {    return false;  }catch (  NullPointerException unused) {    return false;  }  return true;}  }
class C{  public static void validateHasNames(final File sdf){  try {    final boolean hasNames;    if (ReaderUtils.isPairedEndDirectory(sdf)) {      hasNames=hasNames(ReaderUtils.getLeftEnd(sdf)) || hasNames(ReaderUtils.getRightEnd(sdf));    } else {      hasNames=hasNames(sdf);    }    if (!hasNames) {      throw new NoTalkbackSlimException(ErrorType.INFO_ERROR,"SDF: " + sdf + " has no name data");    }  } catch (  final FileNotFoundException e) {    throw new NoTalkbackSlimException(ErrorType.INFO_ERROR,"Unable to find file: " + e.getMessage() + " part of SDF: "+ sdf);  }catch (  final IOException e) {    throw new NoTalkbackSlimException(ErrorType.INFO_ERROR,"Unable to read SDF: " + sdf + " ("+ e.getMessage()+ ")");  }}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  private GridifyRangeArgument createGridifyArgument(GridifyRangeArgument arg,Collection<?> taskRes) throws IgniteCheckedException {  if (taskRes == null)   return arg;  if (taskRes.size() == 1)   return null;  return new GridifyArgumentBuilder().createTaskArgument(arg,taskRes);}  }
class C{  public static void addShadowFilter(SVGPlot svgp){  Element shadow=svgp.getIdElement(SHADOW_ID);  if (shadow == null) {    shadow=svgp.svgElement(SVGConstants.SVG_FILTER_TAG);    shadow.setAttribute(SVGConstants.SVG_ID_ATTRIBUTE,SHADOW_ID);    shadow.setAttribute(SVGConstants.SVG_WIDTH_ATTRIBUTE,"140%");    shadow.setAttribute(SVGConstants.SVG_HEIGHT_ATTRIBUTE,"140%");    Element offset=svgp.svgElement(SVGConstants.SVG_FE_OFFSET_TAG);    offset.setAttribute(SVGConstants.SVG_IN_ATTRIBUTE,SVGConstants.SVG_SOURCE_ALPHA_VALUE);    offset.setAttribute(SVGConstants.SVG_RESULT_ATTRIBUTE,"off");    offset.setAttribute(SVGConstants.SVG_DX_ATTRIBUTE,"0.1");    offset.setAttribute(SVGConstants.SVG_DY_ATTRIBUTE,"0.1");    shadow.appendChild(offset);    Element gauss=svgp.svgElement(SVGConstants.SVG_FE_GAUSSIAN_BLUR_TAG);    gauss.setAttribute(SVGConstants.SVG_IN_ATTRIBUTE,"off");    gauss.setAttribute(SVGConstants.SVG_RESULT_ATTRIBUTE,"blur");    gauss.setAttribute(SVGConstants.SVG_STD_DEVIATION_ATTRIBUTE,"0.1");    shadow.appendChild(gauss);    Element blend=svgp.svgElement(SVGConstants.SVG_FE_BLEND_TAG);    blend.setAttribute(SVGConstants.SVG_IN_ATTRIBUTE,SVGConstants.SVG_SOURCE_GRAPHIC_VALUE);    blend.setAttribute(SVGConstants.SVG_IN2_ATTRIBUTE,"blur");    blend.setAttribute(SVGConstants.SVG_MODE_ATTRIBUTE,SVGConstants.SVG_NORMAL_VALUE);    shadow.appendChild(blend);    svgp.getDefs().appendChild(shadow);    svgp.putIdElement(SHADOW_ID,shadow);  }}  }
class C{  public boolean isSensor(){  return sensor;}  }
class C{  public DocumentedElementItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.IF__CHECK:    return getCheck();case SexecPackage.IF__THEN_STEP:  return getThenStep();case SexecPackage.IF__ELSE_STEP:return getElseStep();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void addRefreshable(Refreshable refreshable){  refreshables.add(refreshable);}  }
class C{  public void reset(int newCapacity){  buff=new byte[newCapacity];}  }
class C{  public static void notifyClients(InternalCacheEvent event){  CacheClientNotifier instance=ccnSingleton;  if (instance != null) {    instance.singletonNotifyClients(event,null);  }}  }
class C{  public void analyzeInvocations(){  AnalyzeInvocation analyzer=this.injector.getInstance(AnalyzeInvocation.class);  analyzer.analyze();}  }
class C{  public void testImportNoFile_gpx(){  testImportNoFile(TrackFileFormat.GPX);}  }
class C{  @Override public void actionPerformed(ActionEvent e){  TextTransfer textTransfer=new TextTransfer();  textTransfer.setClipboardContents(receiveBitcoinPanel.getReceiveAddress());}  }
class C{  protected double calculateProjectedArea(){  int j=0;  double area=0.0;  float[] xpts=xpoints[0];  float[] ypts=ypoints[0];  int npoints=xpts.length;  for (int i=0; i < npoints; ++i) {    j=(i + 1) % npoints;    area+=xpts[i] * ypts[j];    area-=ypts[i] * xpts[j];  }  return area / 2.0;}  }
class C{  protected void writeAppData(byte[] data,int offset,int len) throws IOException {  if (!handshake_started) {    startHandshake();  }  if (logger != null) {    logger.println("SSLSocket.writeAppData: " + len + " "+ SSLRecordProtocol.MAX_DATA_LENGTH);  }  try {    if (len < SSLRecordProtocol.MAX_DATA_LENGTH) {      output.write(recordProtocol.wrap(ContentType.APPLICATION_DATA,data,offset,len));    } else {      while (len >= SSLRecordProtocol.MAX_DATA_LENGTH) {        output.write(recordProtocol.wrap(ContentType.APPLICATION_DATA,data,offset,SSLRecordProtocol.MAX_DATA_LENGTH));        offset+=SSLRecordProtocol.MAX_DATA_LENGTH;        len-=SSLRecordProtocol.MAX_DATA_LENGTH;      }      if (len > 0) {        output.write(recordProtocol.wrap(ContentType.APPLICATION_DATA,data,offset,len));      }    }  } catch (  AlertException e) {    reportFatalAlert(e.getDescriptionCode(),e.getReason());  }}  }
class C{  InvalidateMessage(InvalidateMessage original,EntryEventImpl event,Set members){  super(original,event,members);}  }
class C{  public static long[] preprocessSpooky4(final BitVector bv,final long seed){  final long length=bv.length();  if (length < Long.SIZE * 2)   return null;  final long[] state=new long[4 * (int)(length + Long.SIZE * 2) / (4 * Long.SIZE)];  long h0, h1, h2, h3;  h0=seed;  h1=seed;  h2=ARBITRARY_BITS;  h3=ARBITRARY_BITS;  long remaining=length;  long pos=0;  int p=0;  for (; ; ) {    h2+=bv.getLong(pos + 0 * Long.SIZE,pos + 1 * Long.SIZE);    h3+=bv.getLong(pos + 1 * Long.SIZE,pos + 2 * Long.SIZE);    h2=Long.rotateLeft(h2,50);    h2+=h3;    h0^=h2;    h3=Long.rotateLeft(h3,52);    h3+=h0;    h1^=h3;    h0=Long.rotateLeft(h0,30);    h0+=h1;    h2^=h0;    h1=Long.rotateLeft(h1,41);    h1+=h2;    h3^=h1;    h2=Long.rotateLeft(h2,54);    h2+=h3;    h0^=h2;    h3=Long.rotateLeft(h3,48);    h3+=h0;    h1^=h3;    h0=Long.rotateLeft(h0,38);    h0+=h1;    h2^=h0;    h1=Long.rotateLeft(h1,37);    h1+=h2;    h3^=h1;    h2=Long.rotateLeft(h2,62);    h2+=h3;    h0^=h2;    h3=Long.rotateLeft(h3,34);    h3+=h0;    h1^=h3;    h0=Long.rotateLeft(h0,5);    h0+=h1;    h2^=h0;    h1=Long.rotateLeft(h1,36);    h1+=h2;    h3^=h1;    state[p + 0]=h0;    state[p + 1]=h1;    state[p + 2]=h2;    state[p + 3]=h3;    p+=4;    if (remaining >= Long.SIZE * 6) {      h0+=bv.getLong(pos + 2 * Long.SIZE,pos + 3 * Long.SIZE);      h1+=bv.getLong(pos + 3 * Long.SIZE,pos + 4 * Long.SIZE);      remaining-=4 * Long.SIZE;      pos+=4 * Long.SIZE;    } else     return state;  }}  }
class C{  public void addHttpResponseHeader(CharSequence name){  ensureNotStarted();  builder.addHttpResponseHeader(name);}  }
class C{  public void initEncoderWithUploader(IChunkUploader uploader) throws IOException {  this.writer=new RawWriter(uploader);}  }
class C{  public Void call() throws Exception {  byte[] buff=new byte[2048];  try {    serverSocket.setSoTimeout(TIMEOUT);    peerSocket=serverSocket.accept();    peerSocket.setSoTimeout(TIMEOUT);    log("Client connection ACCEPTED");    InputStream is=peerSocket.getInputStream();    OutputStream os=peerSocket.getOutputStream();    int num=is.read(buff);    if (num == -1) {      log("Unexpected EOF");      return null;    }    String message=new String(buff,0,num);    log("Got request:\n" + message);    log("------------------");    if (!actAsProxy) {      if (message.startsWith("POST")) {        log("try to read client data");        String data=message.substring(message.indexOf("\r\n\r\n") + 4);        log("client's data: '" + data + "'");        assertEquals(clientsData,data);      }    } else {      if (needProxyAuthentication) {        log("Authentication required...");        os.write(respAuthenticationRequired.getBytes());        num=is.read(buff);        if (num == -1) {          closeSocket(peerSocket);          peerSocket=serverSocket.accept();          peerSocket.setSoTimeout(TIMEOUT);          log("New client connection ACCEPTED");          is=peerSocket.getInputStream();          os=peerSocket.getOutputStream();          num=is.read(buff);        }        message=new String(buff,0,num);        log("Got authenticated request:\n" + message);        log("------------------");        assertTrue("no proxy-authorization credentials: " + message,message.toLowerCase().indexOf("proxy-authorization:") != -1);      }      assertTrue(message.startsWith("CONNECT"));      log("Send proxy response");      os.write(proxyResponse.getBytes());      log("Perform SSL Handshake...");      SSLSocket sslSocket=(SSLSocket)getContext().getSocketFactory().createSocket(peerSocket,"localhost",peerSocket.getPort(),true);      sslSocket.setUseClientMode(false);      sslSocket.setNeedClientAuth(true);      sslSocket.startHandshake();      peerSocket=sslSocket;      is=peerSocket.getInputStream();      os=peerSocket.getOutputStream();      num=is.read(buff);      message=new String(buff,0,num);      log("[Remote Server] Request from SSL tunnel:\n" + message);      log("------------------");      if (message.startsWith("POST")) {        log("[Remote Server] try to read client data");        String data=message.substring(message.indexOf("\r\n\r\n") + 4);        log("[Remote Server] client's data: '" + message + "'");        assertEquals(clientsData,data);      }      log("[Remote Server] Sending the response by SSL tunnel...");    }    os.write(("HTTP/1.1 " + responseCode + " Message\r\n"+ httpsResponseTail).getBytes());    os.flush();    os.close();    log("Work is DONE actAsProxy=" + actAsProxy);    return null;  }  finally {    closeSocket(peerSocket);    try {      serverSocket.close();    } catch (    IOException e) {    }  }}  }
class C{  protected boolean owns(KeyCacheObject key){  assert key != null;  return totalCnt == 1 || key.hashCode() % totalCnt == id;}  }
class C{  public RegulatedOutputStream build() throws IllegalArgumentException, RegulationException {  return new RegulatedOutputStream(this);}  }
class C{  private void doUnlockOrder(Order order){  lock.lock();  try {    activeOrders.remove(order.getId());  }  finally {    lock.unlock();  }}  }
class C{  @ObjectiveCName("findPeersWithQuery:") public Command<List<PeerSearchEntity>> findPeers(String query){  return null;}  }
class C{  private void handleHtmlDoOfflineDbBackup(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String csrft=requestAndResponse.getParameter("csrft");  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,servletText.pageTitleOfflineBackupDb(),true).setPaneId("offlineBackup");  pageWrapper.addHeader();  if (isTheCsrftWrong(requestAndResponse,csrft)) {    requestAndResponse.print(servletText.errorRequiresSignIn(false));  } else   if (!isUserAnAdmin(requestAndResponse)) {    requestAndResponse.print(servletText.errorPageNotAllowed());  } else {    final String source=dbLogic.getDbDirectory().getAbsolutePath();    final String destination=getDbBackupDestination().getAbsolutePath();    final StringBuffer out=new StringBuffer();    final StringBuffer err=new StringBuffer();    final int result=CommandLineUtil.copyDirectory(out,err,source,destination);    if (result == 0) {      requestAndResponse.print(servletText.sentenceOfflineDbBackupWasSuccessful());    } else {      requestAndResponse.print(servletText.sentenceOfflineDbBackupWasNotSuccessful());    }  }  pageWrapper.addFooter();}  }
class C{  public static String indent(String s,int spaces,boolean newline){  StringBuilder buff=new StringBuilder(s.length() + spaces);  for (int i=0; i < s.length(); ) {    for (int j=0; j < spaces; j++) {      buff.append(' ');    }    int n=s.indexOf('\n',i);    n=n < 0 ? s.length() : n + 1;    buff.append(s.substring(i,n));    i=n;  }  if (newline && !s.endsWith("\n")) {    buff.append('\n');  }  return buff.toString();}  }
class C{  static public void dump(Map map){  System.out.println("Dump Map - size=" + map.size());  Iterator it=map.keySet().iterator();  while (it.hasNext()) {    Object key=it.next();    Object value=map.get(key);    System.out.println(key + "=" + value);  }}  }
class C{  public boolean refreshNeeded(){  return this.softTtl < System.currentTimeMillis();}  }
class C{  private int tailingNonNewline(String str,int off,int len){  for (int cnt=0; cnt < len; cnt++) {    final int pos=off + (len - 1) - cnt;    if (str.charAt(pos) == OutputStreamLogger.UNIX_NEWLINE) {      return cnt;    }  }  return len;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public StoredField(String name,double value){  super(name,TYPE);  fieldsData=value;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.193 -0500",hash_original_method="0D8BB79D644235D834A5B870E7DE5E55",hash_generated_method="26CF2A3DDBA2B25D750180E7A5D924AA") public Region(){}  }
class C{  public void removeResultListener(ResultListener listener){  listenerList.remove(listener);}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  float[] oldKeys=_set;  long[] oldVals=_values;  byte[] oldStates=_states;  _set=new float[newCapacity];  _values=new long[newCapacity];  _states=new byte[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldStates[i] == FULL) {      float o=oldKeys[i];      int index=insertionIndex(o);      _set[index]=o;      _values[index]=oldVals[i];      _states[index]=FULL;    }  }}  }
class C{  public static ShoppingCart makeShoppingListCart(LocalDispatcher dispatcher,GenericValue shoppingList,Locale locale){  return makeShoppingListCart(null,dispatcher,shoppingList,locale);}  }
class C{  public List<ProcessWorkflow> searchWorkflow(long serviceProcessId,int start,int end) throws PortalException, SystemException {  return processWorkflowPersistence.findByS_P_ID(serviceProcessId,start,end);}  }
class C{  public void insertSites(Collection vertices){  for (Iterator i=vertices.iterator(); i.hasNext(); ) {    Vertex v=(Vertex)i.next();    insertSite(v);  }}  }
class C{  @Override public void initialize(){  board=null;switch (simPaneCtrl.getParamValueIndex(PARAM_INIT_CONF)) {case 0:    board=new EightPuzzleBoard(new int[]{1,2,5,3,4,0,6,7,8});  break;case 1:board=new EightPuzzleBoard(new int[]{1,4,2,7,5,8,3,0,6});break;case 2:board=new EightPuzzleBoard(new int[]{0,8,7,6,5,4,3,2,1});break;case 3:board=new EightPuzzleBoard(new int[]{0,1,2,3,4,5,6,7,8});Random r=new Random(System.currentTimeMillis());for (int i=0; i < 200; i++) {switch (r.nextInt(4)) {case 0:board.moveGapUp();break;case 1:board.moveGapDown();break;case 2:board.moveGapLeft();break;case 3:board.moveGapRight();break;}}}stateViewCtrl.initialize(board);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGraphPackage.SCOPED_ELEMENT__SCOPES:    return scopes != null && !scopes.isEmpty();case SGraphPackage.SCOPED_ELEMENT__NAMESPACE:  return NAMESPACE_EDEFAULT == null ? namespace != null : !NAMESPACE_EDEFAULT.equals(namespace);}return super.eIsSet(featureID);}  }
class C{  @PostConstruct public void init(){  super.init(filterByHeader,multipleTargetFilter);  eventbus.subscribe(this);}  }
class C{  public String toString(){  if (this.uid.length == 16) {    return String.format("0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x",this.uid[0],this.uid[1],this.uid[2],this.uid[3],this.uid[4],this.uid[5],this.uid[6],this.uid[7],this.uid[8],this.uid[9],this.uid[10],this.uid[11],this.uid[12],this.uid[13],this.uid[14],this.uid[15]);  } else   if (this.uid.length == 32) {    return String.format("0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x",this.uid[0],this.uid[1],this.uid[2],this.uid[3],this.uid[4],this.uid[5],this.uid[6],this.uid[7],this.uid[8],this.uid[9],this.uid[10],this.uid[11],this.uid[12],this.uid[13],this.uid[14],this.uid[15],this.uid[16],this.uid[17],this.uid[18],this.uid[19],this.uid[20],this.uid[21],this.uid[22],this.uid[23],this.uid[24],this.uid[25],this.uid[26],this.uid[27],this.uid[28],this.uid[29],this.uid[30],this.uid[31]);  } else {    return Arrays.toString(this.uid);  }}  }
class C{  public static String formatXml(Node node){  return formatXml(node,true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:01.626 -0500",hash_original_method="31F6FBF38938A8E830748EA5A3D758B3",hash_generated_method="54E3F8853B4F0637E7B3F1BC87878747") protected String encodeBody(){  return new StringBuffer().append(rSeqNumber).append(SP).append(cSeqNumber).append(SP).append(method).toString();}  }
class C{  protected void propertyChange(PropertyChangeEvent evt){  String name=evt.getPropertyName();  if ("editable".equals(name))   updateFocusTraversalKeysX(); else   super.propertyChange(evt);}  }
class C{  public static void sort(char[] array,int start,int end){  DualPivotQuicksort.sort(array,start,end);}  }
class C{  public UTF8StreamReader(){  _bytes=new byte[2048];}  }
class C{  public static void main(String[] args) throws SQLException {  Main.exitIfAssertionsDisabled();  Set<String> transactionsToProcess=Sets.newHashSet();  try (Manager mgr=ManagerFactory.getInstance().newManager()){    mgr.disableAuditLogs();    if (args.length == 0) {      String QUERY="SELECT DISTINCT transaction_id FROM audit WHERE audit.action = 'INVITE_NEW_USER'";      List<String[]> inviteResults=Lists.newArrayList(mgr.processedAuditDao.queryRaw(QUERY));      for (      String[] row : inviteResults) {        String tid=row[0];        if (Strings.isNullOrEmpty(tid)) {          continue;        }        transactionsToProcess.add(tid);      }    } else {      for (int i=0; i < args.length; ++i) {        transactionsToProcess.add(args[i]);      }    }    if (true) {      for (      String tid : transactionsToProcess) {        System.out.println("deleting " + tid);        DeleteBuilder<DBProcessedAudit,Integer> deleter=mgr.processedAuditDao.deleteBuilder();        deleter.where().eq("transaction_id",tid);        deleter.delete();      }    }    logger.info("we must process logs for {} transactions.",transactionsToProcess.size());    for (    String tid : transactionsToProcess) {      int count=putActionsForTransactionId(mgr,tid);      mgr.commitTransaction();      logger.info("transaction {} -> {} events.",tid,count);    }  } }  }
class C{  public void removeConflictRemovedListener(final ConflictCacheListener listener){  Check.notNull(listener,"listener");synchronized (listenerLock) {    conflictListeners.removeListener(listener,REMOVED);  }}  }
class C{  public double distance(Instance first,Instance second,PerformanceStats stats){  return Math.sqrt(distance(first,second,Double.POSITIVE_INFINITY,stats));}  }
class C{  @Override public void addMessage(final String message,final String from,final boolean thirdperson){  addMessageWithSound(message,from,thirdperson,SoundPath.CLIP_CHAT_MESSAGE);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public Attaching pipe(PreProcessor... processors){  this.processors.addAll(Arrays.asList(processors));  return this;}  }
class C{  void reset(OperationEntry<?> entry,ServerSessionContext session,long timestamp){  if (references.compareAndSet(0,1)) {    this.index=entry.getIndex();    this.session=session;    this.instant=Instant.ofEpochMilli(timestamp);    this.operation=entry.getOperation();    session.acquire();    references.set(1);  } else {    throw new IllegalStateException("Cannot recycle commit with " + references.get() + " references");  }}  }
class C{  public static Long valueOf(String string) throws NumberFormatException {  return valueOf(parseLong(string));}  }
class C{  public CreateSubscriptionRequest clone(){  CreateSubscriptionRequest result=new CreateSubscriptionRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.RequestedPublishingInterval=RequestedPublishingInterval;  result.RequestedLifetimeCount=RequestedLifetimeCount;  result.RequestedMaxKeepAliveCount=RequestedMaxKeepAliveCount;  result.MaxNotificationsPerPublish=MaxNotificationsPerPublish;  result.PublishingEnabled=PublishingEnabled;  result.Priority=Priority;  return result;}  }
class C{  public GridByteArrayList(byte[] data){  assert data != null;  this.data=data;  size=data.length;}  }
class C{  public boolean isFirst(){  return isFirst;}  }
class C{  @Synchronized("stateLock") public boolean isConnected(){  return socket != null && !socket.isClosed();}  }
class C{  public static SoapMessageImpl createResponse(String fileName) throws Exception {  return createResponse(QUERY_DIR,fileName);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public KeyStoreManager(String path,String password,String type){  this._keyStoreFilePath=path;  this._keyStorePwd=password;  this._keyStoreType=type;  this._keyStore=loadKeyStore(this._keyStoreFilePath,this._keyStorePwd.toCharArray());}  }
class C{  public boolean isYellow2Green(){  return yellow2Green;}  }
class C{  private AssociationSessionType(String sessType,String hAlgorithm,String assocType,boolean compat,int order){  _sessType=sessType;  _hAlgorithm=hAlgorithm;  _assocType=assocType;  _compat=compat;  _order=order;}  }
class C{  private List<CSpecialInstruction> updateInstructions(){  final List<CSpecialInstruction> instructions=new ArrayList<CSpecialInstruction>();  if (highlightAny()) {    try {      final ReilFunction reilCode=m_graph.getRawView().getContent().getReilCode();      for (      final ITypeDescription description : m_model.getDescriptions()) {        if (description.isEnabled()) {          instructions.addAll(description.visit(reilCode,m_instructionMap));        }      }    } catch (    final InternalTranslationException e) {      CUtilityFunctions.logException(e);    }  }  return instructions;}  }
class C{  public ChainingHtmlWriter template(Template template){  this.template=template;  return this;}  }
class C{  public boolean satisfiesBoundaries(WildcardType wildcardType,Map<TypeVariable<?>,Type> typeMap){  boolean isAssignable=true;  Map<TypeVariable<?>,Type> ownerVariableMap=getTypeVariableMap();  ownerVariableMap.putAll(typeMap);  for (  Type theType : wildcardType.getUpperBounds()) {    logger.debug("Checking upper bound " + theType);    if (GenericTypeReflector.erase(theType).equals(Enum.class)) {      if (isEnum())       continue; else {        isAssignable=false;        break;      }    }    Type type=GenericUtils.replaceTypeVariables(theType,ownerVariableMap);    if (!isAssignableTo(type)) {      if (GenericTypeReflector.erase(type).isAssignableFrom(getRawClass())) {        Type instanceType=GenericTypeReflector.getExactSuperType(type,getRawClass());        if (instanceType == null) {          isAssignable=false;          break;        }        if (GenericClass.isAssignable(type,instanceType)) {          logger.debug("Found assignable generic exact type: " + instanceType);          continue;        }      }      isAssignable=false;      break;    }  }  Type[] lowerBounds=wildcardType.getLowerBounds();  if (lowerBounds != null && lowerBounds.length > 0) {    for (    Type theType : wildcardType.getLowerBounds()) {      logger.debug("Checking lower bound " + theType);      Type type=GenericUtils.replaceTypeVariables(theType,ownerVariableMap);      logger.debug("Bound after variable replacement: " + type);      logger.debug("Is assignable from " + toString() + "?");      if (!isAssignableFrom(type)) {        logger.debug("Not assignable from " + toString());        if (type instanceof WildcardType)         continue;        if (GenericTypeReflector.erase(type).isAssignableFrom(getRawClass())) {          Type instanceType=GenericTypeReflector.getExactSuperType(type,getRawClass());          if (instanceType == null) {            isAssignable=false;            break;          }          if (GenericClass.isAssignable(type,instanceType)) {            logger.debug("Found assignable generic exact type: " + instanceType);            continue;          }        }        isAssignable=false;        break;      } else {        logger.debug("Is assignable from " + toString());      }    }  }  return isAssignable;}  }
class C{  public PermImpl(int id,int dest,int product,int perm){  _id=id;  _dest=dest;  _product=product;  _perm=perm;}  }
class C{  @Override public void onFastScrollerStateChange(boolean scrolling){  super.onFastScrollerStateChange(scrolling);  isFastScroll=scrolling;}  }
class C{  public Account(Account.Id newId,Timestamp registeredOn){  this.accountId=newId;  this.registeredOn=registeredOn;}  }
class C{  public static boolean isCompatibleWithThrowsClause(Throwable ex,Class[] declaredExceptions){  if (!isCheckedException(ex)) {    return true;  }  if (declaredExceptions != null) {    for (int i=0; i < declaredExceptions.length; i++) {      if (declaredExceptions[i].isAssignableFrom(ex.getClass())) {        return true;      }    }  }  return false;}  }
class C{  private Action processMessage(byte[] bytes) throws IOException, FlinkTestFailedException {  MessageType type=MessageType.getMessageType(bytes);  String msg;  byte[] out;switch (type) {case OPEN:    if (participatingSinks.isEmpty()) {      verifier.init();    }  msg=new String(bytes,"UTF-8");String[] values=msg.split(" ");participatingSinks.add(Integer.parseInt(values[1]));parallelism=Integer.parseInt(values[2]);if (typeSerializer == null) {out=type.getPayload(bytes);typeSerializer=SerializeUtil.deserialize(out);}break;case REC:out=type.getPayload(bytes);OUT elem=SerializeUtil.deserialize(out,typeSerializer);numRecords++;try {verifier.receive(elem);} catch (Exception e) {throw new FlinkTestFailedException(e);}if (trigger.onRecord(elem) || trigger.onRecordCount(numRecords)) {return Action.STOP;}break;case CLOSE:msg=new String(bytes,"UTF-8");int sinkIndex=Integer.parseInt(msg.split(" ")[1]);int countRecords=Integer.parseInt(msg.split(" ")[2]);expectedNumRecords+=countRecords;closedSinks.add(sinkIndex);break;}if (closedSinks.size() == parallelism && numRecords == expectedNumRecords) {if (participatingSinks.size() < parallelism) {throw new IOException("not all parallel sinks have been initialized");}return Action.FINISH;}return Action.CONTINUE;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  @Override public void drawRangeMarker(Graphics2D g2,CategoryPlot plot,ValueAxis axis,Marker marker,Rectangle2D dataArea){  Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX(),dataArea.getY() + getYOffset(),dataArea.getWidth() - getXOffset(),dataArea.getHeight() - getYOffset());  if (marker instanceof ValueMarker) {    ValueMarker vm=(ValueMarker)marker;    double value=vm.getValue();    Range range=axis.getRange();    if (!range.contains(value)) {      return;    }    GeneralPath path=null;    PlotOrientation orientation=plot.getOrientation();    if (orientation == PlotOrientation.HORIZONTAL) {      float x=(float)axis.valueToJava2D(value,adjusted,plot.getRangeAxisEdge());      float y=(float)adjusted.getMaxY();      path=new GeneralPath();      path.moveTo(x,y);      path.lineTo((float)(x + getXOffset()),y - (float)getYOffset());      path.lineTo((float)(x + getXOffset()),(float)(adjusted.getMinY() - getYOffset()));      path.lineTo(x,(float)adjusted.getMinY());      path.closePath();    } else     if (orientation == PlotOrientation.VERTICAL) {      float y=(float)axis.valueToJava2D(value,adjusted,plot.getRangeAxisEdge());      float x=(float)dataArea.getX();      path=new GeneralPath();      path.moveTo(x,y);      path.lineTo(x + (float)this.xOffset,y - (float)this.yOffset);      path.lineTo((float)(adjusted.getMaxX() + this.xOffset),y - (float)this.yOffset);      path.lineTo((float)(adjusted.getMaxX()),y);      path.closePath();    } else {      throw new IllegalStateException();    }    g2.setPaint(marker.getPaint());    g2.fill(path);    g2.setPaint(marker.getOutlinePaint());    g2.draw(path);    String label=marker.getLabel();    RectangleAnchor anchor=marker.getLabelAnchor();    if (label != null) {      Font labelFont=marker.getLabelFont();      g2.setFont(labelFont);      g2.setPaint(marker.getLabelPaint());      Point2D coordinates=calculateRangeMarkerTextAnchorPoint(g2,orientation,dataArea,path.getBounds2D(),marker.getLabelOffset(),LengthAdjustmentType.EXPAND,anchor);      TextUtilities.drawAlignedString(label,g2,(float)coordinates.getX(),(float)coordinates.getY(),marker.getLabelTextAnchor());    }  } else {    super.drawRangeMarker(g2,plot,axis,marker,adjusted);  }}  }
class C{  @Override public List<Node> generate(int popSize){  List<Node> population=new ArrayList<>();  for (int i=0; i < popSize; ) {    Node candidate=grow(1);    if (candidate.isValid()) {      population.add(candidate);      i++;    }  }  return population;}  }
class C{  public String remove(int index){  if (index < 0 || index >= count) {    throw new ArrayIndexOutOfBoundsException(index);  }  String entry=data[index];  for (int i=index; i < count - 1; i++) {    data[i]=data[i + 1];  }  count--;  return entry;}  }
class C{  public SAXException(String description,Throwable error){  super(description,error);}  }
class C{  private void standardResponseStuff(RequestAndResponse requestAndResponse){  getSessionId(requestAndResponse);  requestAndResponse.response.setHeader("Cache-control","no-store");  requestAndResponse.response.setContentType("text/html;charset=utf-8");}  }
class C{  @SuppressWarnings("unchecked") public final T timeout(TimeValue timeout){  this.timeout=timeout;  return (T)this;}  }
class C{  private static ImageDescriptor decorateImageDescriptor(Image baseImage,ImageDescriptor overlayDescriptor){  return new DecorationOverlayIcon(baseImage,overlayDescriptor,IDecoration.BOTTOM_LEFT);}  }
class C{  public PushbackReader(Reader in){  this(in,1);}  }
class C{  public URLConnectionRequestPropertiesBuilder withAccessToken(String accessToken){  requestProperties.put("Authorization","Bearer " + accessToken);  return this;}  }
class C{  private Utf8InfoRef findConstant(String text){  byte[] utf8InfoBytes=getUtf8InfoBytes(text);  assert utf8InfoBytes[0] == 1;  int off=10;  for (int i=1; i < constant_pool_count && off < templateBytes.length; ++i) {    if (matchAtIndex(utf8InfoBytes,off)) {      return new Utf8InfoRef(off,utf8InfoBytes.length);    }switch (templateBytes[off]) {case 1:{        int len=(templateBytes[off + 1] & 0xff << 8) + (templateBytes[off + 2] & 0xff);        off+=3 + len;        break;      }case 7:case 8:    off+=3;  break;case 3:case 4:case 9:case 10:case 11:case 12:off+=5;break;case 5:case 6:off+=9;break;default :throw new IllegalArgumentException("Unrecognized class file constant pool tag " + templateBytes[off]);}}return null;}  }
class C{  protected int countAncestors(ElemTemplateElement elem){  int count=0;  while (null != elem) {    count++;    elem=elem.getParentElem();  }  return count;}  }
class C{  private void verifySnapshotIsForConsistencyGroup(BlockSnapshot snapshot,BlockConsistencyGroup consistencyGroup){  URI snapshotCGURI=snapshot.getConsistencyGroup();  if ((NullColumnValueGetter.isNullURI(snapshotCGURI)) || (!snapshotCGURI.equals(consistencyGroup.getId()))) {    throw APIException.badRequests.snapshotIsNotForConsistencyGroup(snapshot.getLabel(),consistencyGroup.getLabel());  }}  }
class C{  public void addFilterDestinations(Map<String,Map<String,String>> destinationEntries){  getDestinationEntries().putAll(destinationEntries);}  }
class C{  public MapBuilder<K,V> withMaxMemory(long maxMemory){  if (memoryManager != null) {    throw new IllegalStateException("Can not change max memory after the memory manager initalized");  }  this.maxMemory=maxMemory;  return this;}  }
class C{  public boolean isPersistent(){  return (null != cookieExpiryDate);}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  private void validateCertPath(CertPath certPath) throws CertificateRevocationCheckException, IdmCertificateRevokedException {  HashMap<String,AlternativeOCSPList> ocspSiteMap=this.certPolicy.get_siteOCSPList();  AlternativeOCSPList altOCSPList=null;  if (null != ocspSiteMap) {    Validate.notEmpty(this.siteID,"siteID");    altOCSPList=ocspSiteMap.get(this.siteID);  }  List<AlternativeOCSP> ocspCollection=null;  if (null != altOCSPList) {    ocspCollection=altOCSPList.get_ocspList();  }  Collection<Object> crlCollection=new ArrayList<Object>();  setupCRLOptions(crlCollection,certPath);  CertStore certStore=createCertStoreForRevChecking(ocspCollection);  if (null != ocspCollection && ocspCollection.size() > 0 && this.certPolicy.useOCSP()) {    Iterator<AlternativeOCSP> iter=ocspCollection.iterator();    while (iter.hasNext()) {      AlternativeOCSP altOCSP=iter.next();      try {        validateCertPath(certPath,crlCollection,certStore,altOCSP);        break;      } catch (      CertRevocationStatusUnknownException e) {        if (!iter.hasNext()) {          throw e;        }      }    }  } else {    validateCertPath(certPath,crlCollection,certStore,null);  }}  }
class C{  private void testFileStream() throws IOException {  Stream<String> fileLines=Files.lines(Paths.get("/Users/mkonda/Temp/tmp.txt"));  fileLines.forEach(null);  Path root=Paths.get("/Users/mkonda/Temp");  int maxDepth=Integer.MAX_VALUE;  BiPredicate<Path,BasicFileAttributes> filter=null;  Stream<Path> pathStream=Files.find(root,maxDepth,filter);  pathStream.forEach(null);}  }
class C{  public void updateValue(Number value){  if (this.data == null) {    throw new RuntimeException("updateValue: can't update null.");  }  setValue(this.data.getKey(),value);}  }
class C{  public void testIntMissing() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(new NumericDocValuesField("value",-1));  doc.add(newStringField("value","-1",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new NumericDocValuesField("value",4));  doc.add(newStringField("value","4",Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.INT));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("4",searcher.doc(td.scoreDocs[2].doc).get("value"));  ir.close();  dir.close();}  }
class C{  private void load() throws IOException, RepositoryException {  try (InputStream rawIn=getInputStream()){    demoData=new LinkedList<>();    NonClosingZipInputStream zip=new NonClosingZipInputStream(rawIn);    try {      ZipEntry entry;      while ((entry=zip.getNextEntry()) != null) {        if (entry.isDirectory()) {          throw new RepositoryException("Template malformed. A template must not contain a directory.");        }        String entryName=entry.getName();        if ("template.properties".equals(entryName)) {          Properties props=new Properties();          props.load(zip);          title=props.getProperty("template.name",NO_TITLE);          shortDescription=props.getProperty("template.short_description",NO_DESCRIPTION);        } else         if (entryName.endsWith(".rmp")) {          processName=entryName.split("\\.")[0];        } else         if (entryName.endsWith(".ioo")) {          demoData.add(entryName.split("\\.")[0]);        } else         if ("icon.png".equals(entryName)) {          icon=new ImageIcon(Tools.readInputStream(zip));        }      }    }  finally {      zip.close();      zip.close2();    }  } }  }
class C{  public boolean execute(final String sql,final int[] columnIndexes) throws SQLException {  return executeInternal(sql,fetchSize);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("X.509 Certificate Pair: [\n");  if (forward != null)   sb.append("  Forward: ").append(forward).append("\n");  if (reverse != null)   sb.append("  Reverse: ").append(reverse).append("\n");  sb.append("]");  return sb.toString();}  }
class C{  private void decodeEvents(final Document document,LogDataCollector collector,ParsingContext parsingContext){  NodeList eventList=document.getElementsByTagName("record");  for (int eventIndex=0; eventIndex < eventList.getLength(); eventIndex++) {    Node eventNode=eventList.item(eventIndex);    Logger logger=null;    long timeStamp=0L;    Level level=null;    String threadName=null;    Object message=null;    String className=null;    String methodName=null;    String exceptionStackTrace=null;    NodeList list=eventNode.getChildNodes();    int listLength=list.getLength();    if (listLength == 0) {      continue;    }    for (int y=0; y < listLength; y++) {      Node logEventNode=list.item(y);      String tagName=logEventNode.getNodeName();      if (tagName.equalsIgnoreCase("logger")) {        logger=LoggerFactory.getLogger(getCData(list.item(y)));      } else       if (tagName.equalsIgnoreCase("millis")) {        timeStamp=Long.parseLong(getCData(list.item(y)));      } else       if (tagName.equalsIgnoreCase("level")) {        level=Level.parse(getCData(list.item(y)));      } else       if (tagName.equalsIgnoreCase("thread")) {        threadName=getCData(list.item(y));      } else       if (tagName.equalsIgnoreCase("message")) {        message=getCData(list.item(y));      } else       if (tagName.equalsIgnoreCase("class")) {        className=getCData(list.item(y));      } else       if (tagName.equalsIgnoreCase("method")) {        methodName=getCData(list.item(y));      } else       if (tagName.equalsIgnoreCase("exception")) {        exceptionStackTrace=getExceptionStackTrace(list.item(y));      }    }    if (message != null && exceptionStackTrace != null) {      message=message + "\n" + exceptionStackTrace;    } else     if (exceptionStackTrace != null) {      message=exceptionStackTrace;    }    LogData logData=new LogData();    logData.setLevel(level);    logData.setClazz(className);    logData.setId(parsingContext.getGeneratedIdAndIncrease());    logData.setDate(new Date(timeStamp));    logData.setLoggerName(logger.getName());    logData.setMessage(StringUtils.defaultString(message != null ? message.toString() : ""));    logData.setThread(threadName);    logData.setMethod(methodName);    logData.setLogSource(parsingContext.getLogSource());    collector.add(logData);  }}  }
class C{  @Override public <C extends Collection<T>>Eval<C> toCollection(final Supplier<C> collectionFactory){  return Eval.later(null);}  }
class C{  public static void sort(List<?> list){  if (list.size() > 1) {    Collections.sort(list,INSTANCE);  }}  }
class C{  private Insets parseInsets(String insets,String errorMsg) throws SAXException {  StringTokenizer tokenizer=new StringTokenizer(insets);  return new Insets(nextInt(tokenizer,errorMsg),nextInt(tokenizer,errorMsg),nextInt(tokenizer,errorMsg),nextInt(tokenizer,errorMsg));}  }
class C{  public static boolean assertTrue(final boolean check){  if (!check) {    throw new ExamException();  }  return check;}  }
class C{  public long completeSegmentByteCount(){  long result=size;  if (result == 0)   return 0;  Segment tail=head.prev;  if (tail.limit < Segment.SIZE && tail.owner) {    result-=tail.limit - tail.pos;  }  return result;}  }
class C{  protected void highlight(Positionable pos){  if (pos == null) {    _highlightcomponent=null;  } else {    _highlightcomponent=new Rectangle(pos.getX(),pos.getY(),pos.maxWidth(),pos.maxHeight());  }  repaint();}  }
class C{  public static Node selectSingleNode(Node contextNode,String str) throws TransformerException {  return selectSingleNode(contextNode,str,contextNode);}  }
class C{  private void parseRule(String ns,Attributes attributes) throws SAXException {  md.match=toElementsOrAttributes(attributes.getValue("","match"),ElementsOrAttributes.ELEMENTS);  String wildcard=attributes.getValue("","wildCard");  if (wildcard == null) {    wildcard=NamespaceSpecification.DEFAULT_WILDCARD;  }  if (md.match.containsAttributes()) {    md.attributeActions=new AttributeActionSet();    if (!md.currentMode.bindAttribute(ns,wildcard,md.attributeActions)) {      if (ns.equals(NamespaceSpecification.ANY_NAMESPACE))       error("duplicate_attribute_action_any_namespace"); else       error("duplicate_attribute_action",ns);    }  } else   md.attributeActions=null;  if (md.match.containsElements()) {    md.actions=new ActionSet();    if (!md.currentMode.bindElement(ns,wildcard,md.actions)) {      if (ns.equals(NamespaceSpecification.ANY_NAMESPACE))       error("duplicate_element_action_any_namespace"); else       error("duplicate_element_action",ns);    }  } else   md.actions=null;}  }
class C{  public static boolean isValidObjectName(@Nullable String name){  if (name == null || name.isEmpty()) {    return false;  }  boolean validName=false;  for (int i=0; i < name.length(); i++) {    if (Character.isLetterOrDigit(name.charAt(i))) {      validName=true;      break;    }  }  return validName;}  }
class C{  public boolean hasMoreElements(){  if (suit <= Card.SPADES)   return true;  return false;}  }
class C{  public DeterministicHierarchy(DeterministicKey rootKey){  putKey(rootKey);  rootPath=rootKey.getChildNumberPath();}  }
class C{  @Override @SuppressWarnings("rawtypes") public ITupleIterator rangeIterator(final byte[] fromKey,final byte[] toKey,int capacity,int flags,final IFilter filter){  if (capacity == 0) {    capacity=defaultCapacity;  }  if ((flags & IRangeQuery.REMOVEALL) != 0) {    flags|=IRangeQuery.KEYS;  }  return new ChunkedIterator(this.ndx,fromKey,toKey,capacity,flags,filter);}  }
class C{  private boolean maySkipASI(CommonToken lastToken,ObservableXtextTokenStream tokens){  int countDownFrom=lastToken.getTokenIndex();  for (int i=countDownFrom - 1; i >= 0; i--) {    Token prevToken=tokens.get(i);    if (prevToken.getChannel() == Token.DEFAULT_CHANNEL) {      if (mandatoryASI.get(prevToken.getType())) {        return false;      }      return true;    }  }  return true;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.CONDITIONAL_EXPRESSION__EXPRESSION:    return basicSetExpression(null,msgs);case N4JSPackage.CONDITIONAL_EXPRESSION__TRUE_EXPRESSION:  return basicSetTrueExpression(null,msgs);case N4JSPackage.CONDITIONAL_EXPRESSION__FALSE_EXPRESSION:return basicSetFalseExpression(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static Widget createDraggablePumpkinImage(DragController dragController){  Image image=new Image("images/99pumpkin2-65x58.jpg");  dragController.makeDraggable(image);  return image;}  }
class C{  private void clearClientDeadChannels(){  ArrayList<Messenger> deadClients=new ArrayList<Messenger>();  for (  ClientInfo c : mClientInfoList.values()) {    Message msg=Message.obtain();    msg.what=WifiP2pManager.PING;    msg.arg1=0;    msg.arg2=0;    msg.obj=null;    try {      c.mMessenger.send(msg);    } catch (    RemoteException e) {      if (DBG)       logd("detect dead channel");      deadClients.add(c.mMessenger);    }  }  for (  Messenger m : deadClients) {    clearClientInfo(m);  }}  }
class C{  public LocalConnection connect(LocalConnection connection){  this.connection=connection;  return this;}  }
class C{  public static Collection<HobbyLevel> all(){  return enums.all();}  }
class C{  private char convertToChar(String kurzname){  char result=KEIN_SIEGEL;  if (kurzname != null && !kurzname.isEmpty()) {    if (kurzname.length() > 1) {      result=kurzname.toCharArray()[1];    } else {      result=kurzname.toCharArray()[0];    }  }  return result;}  }
class C{  public boolean isDomainCrosshairLockedOnData(){  return this.domainCrosshairLockedOnData;}  }
class C{  void passCallerStackParam(Type argType,int paramNr,int calleeLocalsIndex){  Type type=argType;  if (type.getSort() == Type.OBJECT || type.getSort() == Type.ARRAY)   type=TYPE_OBJECT;  pushInt(paramNr);  pushInt(calleeLocalsIndex);  String signature=desc(VOID_TYPE,type,INT_TYPE,INT_TYPE);  mv.visitMethodInsn(INVOKESTATIC,VM_FQ,CALLER_STACK_PARAM,signature);}  }
class C{  @Override public boolean isEmpty(){  return size == 0;}  }
class C{  public static CommandResult execute(Command command,CommandContext context) throws IOException {  checkNotNull(command);  checkNotNull(context);  return waitFor(executeAsync(command,context));}  }
class C{  public GitRefNotFoundException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void algorithmDouglasPeucker(List<Entry> entries,double epsilon,int start,int end){  if (end <= start + 1) {    return;  }  int maxDistIndex=0;  double distMax=0;  Entry firstEntry=entries.get(start);  Entry lastEntry=entries.get(end);  for (int i=start + 1; i < end; i++) {    double dist=calcAngleBetweenLines(firstEntry,lastEntry,firstEntry,entries.get(i));    if (dist > distMax) {      distMax=dist;      maxDistIndex=i;    }  }  if (distMax > epsilon) {    keep[maxDistIndex]=true;    algorithmDouglasPeucker(entries,epsilon,start,maxDistIndex);    algorithmDouglasPeucker(entries,epsilon,maxDistIndex,end);  }}  }
class C{  private void stopNodeAndSleep(long timeout) throws Exception {  stopGrid(0);  info("Stopped grid.");  U.sleep(timeout);}  }
class C{  public static String asUTF16BEEncoded(String basicString){  try {    return new String(asBytes(basicString),2,basicString.length() - 2,"UTF-16BE");  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException("No UTF-16BE charset!");  }}  }
class C{  public Utf8Constant(ConstantPool pool,int index,String value){  super(pool,index);  _value=value;}  }
class C{  public BillingException(){  super();  init();}  }
class C{  public S_Set createS_Set(){  S_SetImpl s_Set=new S_SetImpl();  return s_Set;}  }
class C{  private View findFocusableViewInBoundsHorizontally(boolean leftFocus,int left,int right){  List<View> focusables=getFocusables(View.FOCUS_FORWARD);  View focusCandidate=null;  boolean foundFullyContainedFocusable=false;  int count=focusables.size();  for (int i=0; i < count; i++) {    View view=focusables.get(i);    int viewLeft=view.getLeft();    int viewRight=view.getRight();    if (left < viewRight && viewLeft < right) {      final boolean viewIsFullyContained=(left < viewLeft) && (viewRight < right);      if (focusCandidate == null) {        focusCandidate=view;        foundFullyContainedFocusable=viewIsFullyContained;      } else {        final boolean viewIsCloserToBoundary=(leftFocus && viewLeft < focusCandidate.getLeft()) || (!leftFocus && viewRight > focusCandidate.getRight());        if (foundFullyContainedFocusable) {          if (viewIsFullyContained && viewIsCloserToBoundary) {            focusCandidate=view;          }        } else {          if (viewIsFullyContained) {            focusCandidate=view;            foundFullyContainedFocusable=true;          } else           if (viewIsCloserToBoundary) {            focusCandidate=view;          }        }      }    }  }  return focusCandidate;}  }
class C{  public boolean validateParameters(){  log.config("");  StringBuffer sb=new StringBuffer();  int size=m_mFields.size();  for (int i=0; i < size; i++) {    GridField field=(GridField)m_mFields.get(i);    if (field.isMandatory(true)) {      WEditor wEditor=(WEditor)m_wEditors.get(i);      Object data=wEditor.getValue();      if (data == null || data.toString().length() == 0) {        field.setInserting(true);        field.setError(true);        if (sb.length() > 0)         sb.append(", ");        sb.append(field.getHeader());      } else       field.setError(false);      WEditor wEditor2=(WEditor)m_wEditors2.get(i);      if (wEditor2 != null) {        Object data2=wEditor.getValue();        GridField field2=(GridField)m_mFields2.get(i);        if (data2 == null || data2.toString().length() == 0) {          field.setInserting(true);          field2.setError(true);          if (sb.length() > 0)           sb.append(", ");          sb.append(field.getHeader());        } else         field2.setError(false);      }    }  }  if (sb.length() != 0) {    FDialog.error(m_WindowNo,this,"FillMandatory",sb.toString());    return false;  }  return true;}  }
class C{  public Rational divide(Rational secondRational){  long n=r[0] * secondRational.getDenominator();  long d=r[1] * secondRational.getNumerator();  return new Rational(n,d);}  }
class C{  static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {  return createObject(factoryId,null,fallbackClassName);}  }
class C{  public static String disableFsCachePropertyName(@Nullable String scheme){  return String.format("fs.%s.impl.disable.cache",scheme);}  }
class C{  public void updateText(int x,int y,String stuff,int justify,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkText.write(x,y,stuff,LinkText.DEFAULT_FONT,justify,properties,link.dos);}  }
class C{  public static double max(double a,double b){  return (a >= b) ? a : b;}  }
class C{  public void install(JTextComponent c){  if (!(c instanceof RTextArea))   throw new IllegalArgumentException("c must be instance of RTextArea");  super.install(c);}  }
class C{  public SequenceCharacterIterator(CharSequence sequence){  this(sequence,0);}  }
class C{  @Override public final void startElement(final String ns,final String lName,final String qName,final Attributes list) throws SAXException {  String name=lName == null || lName.length() == 0 ? qName : lName;  StringBuffer sb=new StringBuffer(match);  if (match.length() > 0) {    sb.append('/');  }  sb.append(name);  match=sb.toString();  Rule r=(Rule)RULES.match(match);  if (r != null) {    r.begin(name,list);  }}  }
class C{  public GlowHumanEntity(Location location,PlayerProfile profile){  super(location);  this.profile=profile;  xpSeed=new Random().nextInt();  permissions=new PermissibleBase(this);  gameMode=server.getDefaultGameMode();  inventoryView=new GlowInventoryView(this);  addViewer(inventoryView.getTopInventory());  addViewer(inventoryView.getBottomInventory());}  }
class C{  private String addSpaceToCardNumber(){  final int splitBy=4;  final int length=mCardNumber.length();  if (length % splitBy != 0 || length <= splitBy) {    return mCardNumber;  } else {    final StringBuilder result=new StringBuilder();    result.append(mCardNumber.substring(0,splitBy));    for (int i=splitBy; i < length; i++) {      if (i % splitBy == 0) {        result.append(" ");      }      result.append(mCardNumber.charAt(i));    }    return result.toString();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:23.594 -0500",hash_original_method="F7EE0AD6B5FEC8E1C17A6ECF2237A359",hash_generated_method="530EE26BE2899B5E67FC33DA1E821FC4") public static int blue(int color){  return color & 0xFF;}  }
class C{  public Object next(){  String line=readLine();  if (line == null)   return null;  return parsePOSBracketForm(line);}  }
class C{  public void send(String message){  network.send(message);}  }
class C{  @SuppressWarnings("rawtypes") public void sendTelegram(char[] buffer,int type,Object id){  Iterator it=telegramWriters.iterator();  Object currWriter;  ProtoHeader.log.debug(this.toString() + " TX:" + ProtUtils.hexDumpBuffer(buffer));  while (it.hasNext()) {    currWriter=it.next();    if (currWriter != null && currWriter instanceof TelegramWriter) {      ((TelegramWriter)currWriter).writeTelegram(buffer,type,id);    }  }}  }
class C{  private static void addTag(Javadoc doc,JavadocTag tag){  if (!hasTagAlready(requireNonNull(doc),requireNonNull(tag))) {    doc.add(tag);  }}  }
class C{  public void debug(String msg){  log(Log.DEBUG,msg,null);}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  public void putByte(byte x){  bb.put(space-=1,x);}  }
class C{  private void start(XmlPullParser parser) throws XmlPullParserException, IOException {  JDiffClassDescription currentClass=null;  String currentPackage="";  JDiffMethod currentMethod=null;  beginDocument(parser,TAG_ROOT);  int type;  while (true) {    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT && type != XmlPullParser.END_TAG) {    }    if (type == XmlPullParser.END_TAG) {      if (TAG_CLASS.equals(parser.getName()) || TAG_INTERFACE.equals(parser.getName())) {        currentClass.checkSignatureCompliance();      } else       if (TAG_PACKAGE.equals(parser.getName())) {        currentPackage="";      }      continue;    }    if (type == XmlPullParser.END_DOCUMENT) {      break;    }    String tagname=parser.getName();    if (!mKeyTagSet.contains(tagname)) {      continue;    }switch (tagname) {case TAG_PACKAGE:      currentPackage=parser.getAttributeValue(null,ATTRIBUTE_NAME);    break;case TAG_CLASS:  currentClass=loadClassInfo(parser,false,currentPackage);break;case TAG_INTERFACE:currentClass=loadClassInfo(parser,true,currentPackage);break;case TAG_IMPLEMENTS:currentClass.addImplInterface(parser.getAttributeValue(null,ATTRIBUTE_NAME));break;case TAG_CONSTRUCTOR:JDiffConstructor constructor=loadConstructorInfo(parser,currentClass);currentClass.addConstructor(constructor);currentMethod=constructor;break;case TAG_METHOD:currentMethod=loadMethodInfo(currentClass.getClassName(),parser);currentClass.addMethod(currentMethod);break;case TAG_PARAM:currentMethod.addParam(parser.getAttributeValue(null,ATTRIBUTE_TYPE));break;case TAG_EXCEPTION:currentMethod.addException(parser.getAttributeValue(null,ATTRIBUTE_TYPE));break;case TAG_FIELD:JDiffField field=loadFieldInfo(currentClass.getClassName(),parser);currentClass.addField(field);break;default :throw new RuntimeException("unknow tag exception:" + tagname);}}}  }
class C{  public boolean drawImage(Image img,int dx1,int dy1,int dx2,int dy2,int sx1,int sy1,int sx2,int sy2,Color bgcolor,ImageObserver observer){  Paint paint=gc.getPaint();  gc.setPaint(bgcolor);  fillRect(dx1,dy1,dx2 - dx1,dy2 - dy1);  gc.setPaint(paint);  return drawImage(img,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,observer);}  }
class C{  public void convolve(ComplexVector other,int direction){  IncompatibleVectorsException.checkVectorsCompatible(this,other);  if (this.getOpMode().equals(Mode.HERMITIAN) && other.getOpMode().equals(Mode.HERMITIAN))   convolveCartesian(other,direction); else {    toDensePolar();    ComplexVector otherCopy=other.copy();    otherCopy.toDensePolar();    short[] otherAngles=otherCopy.getPhaseAngles();    for (int i=0; i < dimension; i++) {      if (otherAngles[i] == CircleLookupTable.ZERO_INDEX) {        continue;      }      if (phaseAngles[i] == CircleLookupTable.ZERO_INDEX) {        phaseAngles[i]=otherAngles[i];        continue;      }      short angleToAdd=otherAngles[i];      if (direction <= 0) {        angleToAdd=(short)(CircleLookupTable.PHASE_RESOLUTION - angleToAdd);      }      phaseAngles[i]=(short)((phaseAngles[i] + angleToAdd) % CircleLookupTable.PHASE_RESOLUTION);    }  }}  }
class C{  public boolean dynInit(){  return m_data.load();}  }
class C{  private boolean isCharStrong(int chr){  return (STRONG_TEXT_FLAGS[chr >> 5] & (1 << (chr % 32))) != 0;}  }
class C{  @CanIgnoreReturnValue public E removeFirst(){  return remove();}  }
class C{  public BasicPoolEntry(ClientConnectionOperator op,HttpRoute route,ReferenceQueue<Object> queue){  super(op,route);  if (route == null) {    throw new IllegalArgumentException("HTTP route may not be null");  }  this.reference=new BasicPoolEntryRef(this,queue);}  }
class C{  private ArrayModifiableDBIDs mergeIDs(List<? extends DoubleDBIDList> queryResults,DBIDs... ids){  ModifiableDBIDs result=DBIDUtil.newHashSet();  for (  DBIDs dbids : ids) {    result.addDBIDs(dbids);  }  for (  DoubleDBIDList queryResult : queryResults) {    result.addDBIDs(queryResult);  }  return DBIDUtil.newArray(result);}  }
class C{  public static String saveTable(String folderName,Relation table) throws IOException {  ExecutorService executorService=Executors.newFixedThreadPool(10);  CompletionService writerCompletionService=new ExecutorCompletionService<>(executorService);  String name=table.name();  name=WHITE_SPACE_PATTERN.matcher(name).replaceAll("");  name=SEPARATOR_PATTERN.matcher(name).replaceAll("_");  String storageFolder=folderName + separator() + name+ '.'+ FILE_EXTENSION;  Path path=Paths.get(storageFolder);  if (!Files.exists(path)) {    try {      Files.createDirectories(path);    } catch (    IOException e) {      e.printStackTrace();    }  }  writeTableMetadata(path.toString() + separator() + "Metadata.json",table);  try {    for (    Column column : table.columns()) {      writerCompletionService.submit(null);    }    for (int i=0; i < table.columnCount(); i++) {      Future future=writerCompletionService.take();      future.get();    }  } catch (  InterruptedException|ExecutionException e) {    throw new RuntimeException(e);  }  executorService.shutdown();  return storageFolder;}  }
class C{  public void testXY_GeometryCollection_MultiPolygon_Doc() throws Exception {  checkValue(MDSYS.SDO_GEOMETRY(2004,NULL,NULL,MDSYS.SDO_ELEM_INFO_ARRAY(1,1,1,3,2,1,7,1003,1,17,1003,1,25,2003,1),MDSYS.SDO_ORDINATE_ARRAY(1,1,1,2,2,1,2,2,3,2,3,3,2,3,2,2,5,1,9,5,5,5,5,1,5,3,6,4,6,3,5,3)),"GEOMETRYCOLLECTION (POINT (1 1), LINESTRING (1 2, 2 1), MULTIPOLYGON (((2 2, 3 2, 3 3, 2 3, 2 2)), ((5 1, 9 5, 5 5, 5 1), (5 3, 6 4, 6 3, 5 3))) )");}  }
class C{  public Enumeration<Permission> elements(){synchronized (this) {    return Collections.enumeration(perms.values());  }}  }
class C{  public static int calculateSQImpl(final int unspentResources,final int income){  return (int)Math.round(35 * (0.00137 * income - Math.log(unspentResources)) + 240);}  }
class C{  public static RIcon sc2(final String name){  return new RIcon("icon/sc2/" + name + ".png");}  }
class C{  public static PseudoRandom defaultPRNG(long seed){  return new XOrShiftPRNG(seed);}  }
class C{  public void annotation(String type,int numMemberValuePairs) throws IOException {  annotation(pool.addUtf8Info(type),numMemberValuePairs);}  }
class C{  protected void notifyClickListenersAboutClick(int item){  for (  OnWheelClickedListener listener : clickingListeners) {    listener.onItemClicked(this,item);  }}  }
class C{  public CertificateEncodingException(String message){  super(message);}  }
class C{  @Override protected void onFinished(final Player player,final boolean successful){  if (successful) {    final Item item=SingletonRepository.getEntityManager().getItem(itemName);    if (item != null) {      player.equipOrPutOnGround(item);      player.incMinedForItem(item.getName(),item.getQuantity());      SingletonRepository.getAchievementNotifier().onObtain(player);      player.sendPrivateText("You found " + Grammar.a_noun(item.getTitle()) + ".");    } else {      logger.error("could not find item: " + itemName);    }  } else {    player.sendPrivateText("You didn't find anything.");  }}  }
class C{  private static void await(SocketChannel channel,int op) throws IOException {  Selector selector=Selector.open();  SelectionKey key=channel.register(selector,op);  try {    assertEquals(true,awaitOp(selector,key,op));  }  finally {    key.cancel();    selector.close();  }}  }
class C{  private void resizePanel(){  scroller.resize();  if (getParentFrame() != null) {    getParentFrame().pack();  }}  }
class C{  public static boolean isMacOS(){  String osName=System.getProperty("os.name");  return osName != null && osName.toLowerCase().contains("mac");}  }
class C{  public static boolean isXML11NameHighSurrogate(int c){  return (0xD800 <= c && c <= 0xDB7F);}  }
class C{  double startv(SMat A,double[][] wptr,int step,int n){  double rnm2, t;  double[] r;  int id, i;  rnm2=svd_ddot(n,wptr[0],1,wptr[0],1);  Random random=new Random(918273L + step);  r=wptr[0];  for (id=0; id < 3; id++) {    if (id > 0 || step > 0 || rnm2 == 0)     for (i=0; i < n; i++)     r[i]=random.nextDouble();    svd_dcopy(n,wptr[0],1,wptr[3],1);    svd_opb(A,wptr[3],wptr[0],OPBTemp);    svd_dcopy(n,wptr[0],1,wptr[3],1);    rnm2=svd_ddot(n,wptr[0],1,wptr[3],1);    if (rnm2 > 0.0)     break;  }  if (rnm2 <= 0.0) {    ierr=8192;    return (-1);  }  if (step > 0) {    for (i=0; i < step; i++) {      store(n,RETRQ,i,wptr[5]);      t=-svd_ddot(n,wptr[3],1,wptr[5],1);      svd_daxpy(n,t,wptr[5],1,wptr[0],1);    }    t=svd_ddot(n,wptr[4],1,wptr[0],1);    svd_daxpy(n,-t,wptr[2],1,wptr[0],1);    svd_dcopy(n,wptr[0],1,wptr[3],1);    t=svd_ddot(n,wptr[3],1,wptr[0],1);    if (t <= eps * rnm2)     t=0.0;    rnm2=t;  }  return (Math.sqrt(rnm2));}  }
class C{  public boolean isExternalIdAlreadyTaken(String externalId,String id){  return resourceDao.isExternalIdAlreadyTaken(externalId,id);}  }
class C{  protected WindowSupport createWindowSupport(){  return new WindowSupport(getGUI(),getName());}  }
class C{  @Override protected void entryRemoved(boolean evicted,String key,BitmapDrawable oldValue,BitmapDrawable newValue){  if (RecyclingBitmapDrawable.class.isInstance(oldValue)) {    ((RecyclingBitmapDrawable)oldValue).setIsCached(false);  } else {    if (Utils.hasHoneycomb()) {      mReusableBitmaps.add(new SoftReference<Bitmap>(oldValue.getBitmap()));    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:43.721 -0500",hash_original_method="EF23341A4D9A5255D7511F96FA9CF980",hash_generated_method="40E5EDC4616C5EA6D3E6611FA1DAB53E") private void readStatisticsLocked(){  try {    byte[] data=mStatisticsFile.readFully();    Parcel in=Parcel.obtain();    in.unmarshall(data,0,data.length);    in.setDataPosition(0);    int token;    int index=0;    while ((token=in.readInt()) != STATISTICS_FILE_END) {      if (token == STATISTICS_FILE_ITEM || token == STATISTICS_FILE_ITEM_OLD) {        int day=in.readInt();        if (token == STATISTICS_FILE_ITEM_OLD) {          day=day - 2009 + 14245;        }        DayStats ds=new DayStats(day);        ds.successCount=in.readInt();        ds.successTime=in.readLong();        ds.failureCount=in.readInt();        ds.failureTime=in.readLong();        if (index < mDayStats.length) {          mDayStats[index]=ds;          index++;        }      } else {        Log.w(TAG,"Unknown stats token: " + token);        break;      }    }  } catch (  java.io.IOException e) {    Log.i(TAG,"No initial statistics");  }}  }
class C{  public LocalFileResource(String filePath){  this.filePath=filePath;}  }
class C{  boolean isCanceled(){  return canceled;}  }
class C{  public SpanTermQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  protected void paint(SynthContext context,Graphics g){}  }
class C{  public MockTokenFilterFactory(Map<String,String> args){  super(args);  String stopset=get(args,"stopset",Arrays.asList("english","empty"),null,false);  String stopregex=get(args,"stopregex");  if (null != stopset) {    if (null != stopregex) {      throw new IllegalArgumentException("Parameters stopset and stopregex cannot both be specified.");    }    if ("english".equalsIgnoreCase(stopset)) {      filter=MockTokenFilter.ENGLISH_STOPSET;    } else {      filter=MockTokenFilter.EMPTY_STOPSET;    }  } else   if (null != stopregex) {    RegExp regex=new RegExp(stopregex);    filter=new CharacterRunAutomaton(regex.toAutomaton());  } else {    throw new IllegalArgumentException("Configuration Error: either the 'stopset' or the 'stopregex' parameter must be specified.");  }  enablePositionIncrements=getBoolean(args,"enablePositionIncrements",true);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public void unregisterWifiDisablingListener(){  mNetworkCnx.unregisterWifiDisablingListener();}  }
class C{  private void drawChannels(Graphics2D graphics){  for (  Channel channel : mVisibleChannels) {    if (mChannelDisplay == ChannelDisplay.ALL || (mChannelDisplay == ChannelDisplay.ENABLED && channel.getEnabled())) {      if (channel.isSelected()) {        graphics.setColor(mColorChannelConfigSelected);      } else       if (channel.getEnabled()) {        graphics.setColor(mColorChannelConfigProcessing);      } else {        graphics.setColor(mColorChannelConfig);      }      TunerChannel tunerChannel=channel.getTunerChannel();      if (tunerChannel != null) {        double xAxis=getAxisFromFrequency(tunerChannel.getFrequency());        double width=(double)(tunerChannel.getBandwidth()) / (double)getDisplayBandwidth() * getSize().getWidth();        Rectangle2D.Double box=new Rectangle2D.Double(xAxis - (width / 2.0d),0.0d,width,getSize().getHeight() - mSpectrumInset);        graphics.fill(box);        graphics.draw(box);        graphics.setColor(mColorSpectrumLine);        double yAxis=0;        String system=channel.hasSystem() ? channel.getSystem() : " ";        yAxis+=drawLabel(graphics,system,this.getFont(),xAxis,yAxis,width);        String site=channel.hasSite() ? channel.getSite() : " ";        yAxis+=drawLabel(graphics,site,this.getFont(),xAxis,yAxis,width);        yAxis+=drawLabel(graphics,channel.getName(),this.getFont(),xAxis,yAxis,width);        drawLabel(graphics,channel.getDecodeConfiguration().getDecoderType().getShortDisplayString(),this.getFont(),xAxis,yAxis,width);        long frequency=tunerChannel.getFrequency();        double frequencyAxis=getAxisFromFrequency(frequency);        drawChannelCenterLine(graphics,frequencyAxis);        int correction=channel.getChannelFrequencyCorrection();        if (correction != 0) {          long error=frequency + correction;          drawAFC(graphics,frequencyAxis,getAxisFromFrequency(error));        }      }    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private boolean checkStatus(String TableName,int Record_ID,String DocStatus){  String sql="SELECT 2 FROM " + TableName + " WHERE "+ TableName+ "_ID="+ Record_ID+ " AND DocStatus='"+ DocStatus+ "'";  int result=DB.getSQLValue(null,sql);  return result == 2;}  }
class C{  final static int distance(int color,int a,int r,int g,int b){  return (SQUARES[((color >> 24) & 0xFF) - a + MAX_RGB] + SQUARES[((color >> 16) & 0xFF) - r + MAX_RGB] + SQUARES[((color >> 8) & 0xFF) - g + MAX_RGB]+ SQUARES[((color >> 0) & 0xFF) - b + MAX_RGB]);}  }
class C{  public MaterialEditText errorSize(int unit,float size){  mErrorSize=size;  mError.setTextSize(unit,mErrorSize);  return this;}  }
class C{  public static Bound create(){  return new Bound();}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.IF;}  }
class C{  public synchronized void undoOrRedo() throws CannotRedoException, CannotUndoException {  if (indexOfNextAdd == edits.size()) {    undo();  } else {    redo();  }}  }
class C{  Basis(InputStream is,NTRUSigningKeyGenerationParameters params,boolean include_h) throws IOException {  int N=params.N;  int q=params.q;  int d1=params.d1;  int d2=params.d2;  int d3=params.d3;  boolean sparse=params.sparse;  this.params=params;  if (params.polyType == NTRUParameters.TERNARY_POLYNOMIAL_TYPE_PRODUCT) {    f=ProductFormPolynomial.fromBinary(is,N,d1,d2,d3 + 1,d3);  } else {    IntegerPolynomial fInt=IntegerPolynomial.fromBinary3Tight(is,N);    f=sparse ? new SparseTernaryPolynomial(fInt) : new DenseTernaryPolynomial(fInt);  }  if (params.basisType == NTRUSigningKeyGenerationParameters.BASIS_TYPE_STANDARD) {    IntegerPolynomial fPrimeInt=IntegerPolynomial.fromBinary(is,N,q);    for (int i=0; i < fPrimeInt.coeffs.length; i++) {      fPrimeInt.coeffs[i]-=q / 2;    }    fPrime=fPrimeInt;  } else   if (params.polyType == NTRUParameters.TERNARY_POLYNOMIAL_TYPE_PRODUCT) {    fPrime=ProductFormPolynomial.fromBinary(is,N,d1,d2,d3 + 1,d3);  } else {    fPrime=IntegerPolynomial.fromBinary3Tight(is,N);  }  if (include_h) {    h=IntegerPolynomial.fromBinary(is,N,q);  }}  }
class C{  public void handleManagerStart() throws ManagementException {  if (!isServiceInitialised("handleManagerStart")) {    return;  }  MBeanJMXAdapter jmxAdapter=service.getJMXAdapter();  Map<ObjectName,Object> registeredMBeans=jmxAdapter.getLocalGemFireMBean();  DistributedSystemBridge dsBridge=new DistributedSystemBridge(service);  this.aggregator=new MBeanAggregator(dsBridge);  service.addProxyListener(aggregator);  MemberMXBean localMember=service.getMemberMXBean();  ObjectName memberObjectName=MBeanJMXAdapter.getMemberMBeanName(InternalDistributedSystem.getConnectedInstance().getDistributedMember());  FederationComponent addedComp=service.getLocalManager().getFedComponents().get(memberObjectName);  service.afterCreateProxy(memberObjectName,MemberMXBean.class,localMember,addedComp);  Iterator<ObjectName> it=registeredMBeans.keySet().iterator();  while (it.hasNext()) {    ObjectName objectName=it.next();    if (objectName.equals(memberObjectName)) {      continue;    }    Object object=registeredMBeans.get(objectName);    ObjectInstance instance;    try {      instance=mbeanServer.getObjectInstance(objectName);      String className=instance.getClassName();      Class cls=ClassLoadUtil.classFromName(className);      Type[] intfTyps=cls.getGenericInterfaces();      FederationComponent newObj=service.getLocalManager().getFedComponents().get(objectName);      for (int i=0; i < intfTyps.length; i++) {        Class intfTyp=(Class)intfTyps[i];        service.afterCreateProxy(objectName,intfTyp,object,newObj);      }    } catch (    InstanceNotFoundException e) {      if (logger.isDebugEnabled()) {        logger.debug("Failed in Registering distributed mbean ");      }      throw new ManagementException(e);    }catch (    ClassNotFoundException e) {      if (logger.isDebugEnabled()) {        logger.debug("Failed in Registering distributed mbean");      }      throw new ManagementException(e);    }  }}  }
class C{  private void mapApplicationUserIdToLicense(List<UsageLicense> licenses,User[] createdUsers){  if (createdUsers == null) {    return;  }  String applicationUserId;  for (  UsageLicense license : licenses) {    for (    User createdUser : createdUsers) {      applicationUserId=createdUser.getApplicationUserId();      if (createdUser.getUserId().equals(license.getUser().getUserId()) && applicationUserId != null) {        license.setApplicationUserId(applicationUserId);        break;      }    }  }}  }
class C{  private void declareExtensions(){  new AclFeed().declareExtensions(extProfile);  new FeatureFeed().declareExtensions(extProfile);  new MapFeed().declareExtensions(extProfile);  new VersionFeed().declareExtensions(extProfile);  BatchUtils.declareExtensions(extProfile);}  }
class C{  public Vector divide(Vector other){  return new Vector(x / other.x,y / other.y,z / other.z);}  }
class C{  @Override public void close(){  mPrint.close();}  }
class C{  private void stopSketchBlockSendTimeout(){  if (sketchBlockSendTimeout != null) {    sketchBlockSendTimeout.cancel();    sketchBlockSendTimeout=null;  }}  }
class C{  @Deprecated public LuaValue fullScroll(U view,Varargs varargs){  final int direction=varargs.optint(2,0);  return view.fullScroll(direction);}  }
class C{  public boolean isAvailable(){  if (!hasOption(Service.ServiceOption.INSTRUMENTATION)) {    return true;  }  if (getProcessingStage() != ProcessingStage.PAUSED && getProcessingStage() != ProcessingStage.AVAILABLE) {    return false;  }  ServiceStat st=this.getStat(STAT_NAME_AVAILABLE);  if (st != null && st.latestValue == STAT_VALUE_TRUE) {    return true;  }  return false;}  }
class C{  public void drawPalette(int[] colors,int selectedColor){  drawPalette(colors,selectedColor,null);}  }
class C{  public void testDoublesCount(){  LongAdder counter=new LongAdder();  Random r=new Random();  long size=0;  for (int reps=0; reps < REPS; ++reps) {    counter.reset();    r.doubles(size).forEach(null);    assertEquals(counter.sum(),size);    size+=524959;  }}  }
class C{  public BigIntegerMapper digits(Integer digits){  this.digits=digits;  return this;}  }
class C{  @Override public boolean doHasNext() throws IOException, CollectionException {  WatchKey key;  while ((key=watcher.poll()) != null && !isShuttingDown()) {    for (    WatchEvent<?> event : key.pollEvents()) {      processEvent(key,event);      getMonitor().meter("events").mark();    }    key.reset();  }  return !queue.isEmpty();}  }
class C{  private final boolean checkBoolean(boolean b,Condition condition){  String value=condition.getValue();  boolean v=Boolean.parseBoolean(value);switch (condition.getConditionType()) {case EQUALS:{      return (v == b);    }case NOT_EQUALS:{    return (v != b);  }default :{  return false;}}}  }
class C{  public static void info(int WindowNo,Container c,String AD_Message,String msg){  log.info(AD_Message + " - " + msg);  Properties ctx=Env.getCtx();  StringBuffer out=new StringBuffer();  if (AD_Message != null && !AD_Message.equals(""))   out.append(Msg.getMsg(ctx,AD_Message));  if (msg != null && msg.length() > 0)   out.append("\n").append(msg);  Window parent=Env.getParent(c);  if (parent == null)   parent=Env.getWindow(WindowNo);  if (showDialog && parent != null) {    if (parent instanceof JFrame)     new ADialogDialog((JFrame)parent,Env.getHeader(ctx,WindowNo),out.toString(),JOptionPane.INFORMATION_MESSAGE); else     new ADialogDialog((JDialog)parent,Env.getHeader(ctx,WindowNo),out.toString(),JOptionPane.INFORMATION_MESSAGE);  } else   JOptionPane.showMessageDialog(parent,out.toString() + "\n",Env.getHeader(ctx,WindowNo),JOptionPane.INFORMATION_MESSAGE);}  }
class C{  protected int index(char c){  if (lazy) {    int index=indexActual(c);    if (index != -1) {      return index;    }    addGlyph(c);    return indexActual(c);  } else {    return indexActual(c);  }}  }
class C{  static StructuredRecord.Builder cloneRecord(StructuredRecord record,Schema outputSchema,String predictionField){  List<Schema.Field> fields=new ArrayList<>(outputSchema.getFields());  fields.add(Schema.Field.of(predictionField,Schema.of(Schema.Type.DOUBLE)));  outputSchema=Schema.recordOf("records",fields);  StructuredRecord.Builder builder=StructuredRecord.builder(outputSchema);  for (  Schema.Field field : outputSchema.getFields()) {    if (!predictionField.equals(field.getName())) {      builder.set(field.getName(),record.get(field.getName()));    }  }  return builder;}  }
class C{  public static void main(String[] args){  String filename;  if (args.length >= 1)   filename=args[0]; else   filename="PersistentLayoutDemo.out";  new PersistentLayoutDemo(filename);}  }
class C{  public TermVectorsRequest fieldStatistics(boolean fieldStatistics){  setFlag(Flag.FieldStatistics,fieldStatistics);  return this;}  }
class C{  private UTMCoord convertMGRSToUTM(String MGRSString){  double grid_easting;  double grid_northing;  double latitude=0.0;  double divisor=1.0;  long error_code=MGRS_NO_ERROR;  String hemisphere=AVKey.NORTH;  double easting=0;  double northing=0;  UTMCoord UTM=null;  MGRSComponents MGRS=breakMGRSString(MGRSString);  if (MGRS == null)   error_code|=MGRS_STRING_ERROR; else {    if (error_code == MGRS_NO_ERROR) {      if ((MGRS.latitudeBand == LETTER_X) && ((MGRS.zone == 32) || (MGRS.zone == 34) || (MGRS.zone == 36)))       error_code|=MGRS_STRING_ERROR; else {        if (MGRS.latitudeBand < LETTER_N)         hemisphere=AVKey.SOUTH; else         hemisphere=AVKey.NORTH;        getGridValues(MGRS.zone);        if ((MGRS.squareLetter1 < ltr2_low_value) || (MGRS.squareLetter1 > ltr2_high_value) || (MGRS.squareLetter2 > LETTER_V))         error_code|=MGRS_STRING_ERROR;        if (error_code == MGRS_NO_ERROR) {          grid_northing=(double)(MGRS.squareLetter2) * ONEHT;          grid_easting=(double)((MGRS.squareLetter1) - ltr2_low_value + 1) * ONEHT;          if ((ltr2_low_value == LETTER_J) && (MGRS.squareLetter1 > LETTER_O))           grid_easting=grid_easting - ONEHT;          if (MGRS.squareLetter2 > LETTER_O)           grid_northing=grid_northing - ONEHT;          if (MGRS.squareLetter2 > LETTER_I)           grid_northing=grid_northing - ONEHT;          if (grid_northing >= TWOMIL)           grid_northing=grid_northing - TWOMIL;          error_code=getLatitudeBandMinNorthing(MGRS.latitudeBand);          if (error_code == MGRS_NO_ERROR) {            grid_northing=grid_northing - false_northing;            if (grid_northing < 0.0)             grid_northing+=TWOMIL;            grid_northing+=northing_offset;            if (grid_northing < min_northing)             grid_northing+=TWOMIL;            easting=grid_easting + MGRS.easting;            northing=grid_northing + MGRS.northing;            try {              UTM=UTMCoord.fromUTM(MGRS.zone,hemisphere,easting,northing);              latitude=UTM.getLatitude().radians;              divisor=Math.pow(10.0,MGRS.precision);              error_code=getLatitudeRange(MGRS.latitudeBand);              if (error_code == MGRS_NO_ERROR) {                if (!(((south - DEG_TO_RAD / divisor) <= latitude) && (latitude <= (north + DEG_TO_RAD / divisor))))                 error_code|=MGRS_LAT_WARNING;              }            } catch (            Exception e) {              error_code=MGRS_UTM_ERROR;            }          }        }      }    }  }  last_error=error_code;  if (error_code == MGRS_NO_ERROR || error_code == MGRS_LAT_WARNING)   return UTM;  return null;}  }
class C{  public void changeCompleted(GraphicsNodeChangeEvent gnce){}  }
class C{  private ArrayList<Node> createButtonsWithLabels(){  ArrayList<Node> buttonWithLabelsList=new ArrayList<>();  Arrays.asList(FingerprintFilterType.PacketType.values()).stream().forEach(null);  return buttonWithLabelsList;}  }
class C{  private int helper(int[][] matrix,int[][] longest,int[][] dirs,int rows,int cols,int i,int j){  if (longest[i][j] > 0)   return longest[i][j];  int max=1;  for (  int[] d : dirs) {    if (matrix[i][j] > matrix[i + d[0]][j + d[1]]) {      int temp=helper(matrix,longest,dirs,rows,cols,i + d[0],j + d[1]) + 1;      max=temp > max ? temp : max;    }  }  longest[i][j]=max;  return max;}  }
class C{  public void onEvent(Event event){  Component component=event.getTarget();  if (component instanceof Button) {    Button element=(Button)component;    if ("Ok".equalsIgnoreCase(element.getId())) {      this.startProcess();    } else     if ("Cancel".equalsIgnoreCase(element.getId())) {      this.dispose();    }  }}  }
class C{  public static ComponentUI createUI(JComponent x){  return new CompiereMenuBarUI();}  }
class C{  public Polyline2D(double[] xs,double[] ys){  points=new ArrayList<Point2D>();  for (int i=0; i < xs.length; i++)   points.add(new Point2D(xs[i],ys[i]));}  }
class C{  public E methodThatUsesTypeParameter(E param){  return param;}  }
class C{  @Override public StreamImpl stream() throws IOException {  if (_channelStream == null) {    _channelStream=new SocketChannelStream();  }  if (_sslSocket == null) {    _channelStream.init(_channel);    _streamImpl=_channelStream;  } else {    if (_sslStream == null) {      _sslStream=new SocketStream();    }    _sslStream.init(_sslSocket);    _streamImpl=_sslStream;  }  return _streamImpl;}  }
class C{  @Override protected void onStarted(final Player player){  player.sendPrivateText("You have started to prospect for gold.");}  }
class C{  public CipherParameters generateDerivedMacParameters(int keySize){  keySize=keySize / 8;  byte[] dKey=generateDerivedKey(MAC_MATERIAL,keySize);  return new KeyParameter(dKey,0,keySize);}  }
class C{  @Deprecated public void logrb(Level level,String sourceClass,String sourceMethod,String bundleName,String msg){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msg);  lr.setSourceClassName(sourceClass);  lr.setSourceMethodName(sourceMethod);  doLog(lr,bundleName);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void deleteExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  ActionErrors errors=null;  CamposDatoForm camposDatoForm=(CamposDatoForm)form;  if ((errors=validateFormParaEliminarCampo(camposDatoForm)) == null) {    GestionDescripcionBI descripcionService=getGestionDescripcionBI(request);    String idCamposABorrar[]=camposDatoForm.getCamposABorrar();    if (!isCampoDatoEnUso(request,idCamposABorrar))     descripcionService.deleteCamposDato(idCamposABorrar);  } else {    ErrorsTag.saveErrors(request,errors);  }  goLastClientExecuteLogic(mapping,form,request,response);}  }
class C{  int allowedNetworkTypes(){  return allowedNetworkTypes;}  }
class C{  public void hitObjects(DrawInfo2D range,Bag putInHere){  hitOrDraw(null,range,putInHere);}  }
class C{  private boolean checkStorageFileSystemExistsInDB(String nativeGuid,DbClient dbClient) throws IOException {  URIQueryResultList result=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getFileSystemNativeGUIdConstraint(nativeGuid),result);  return (result.iterator().hasNext());}  }
class C{  protected EnumSourceImpl(){  super();}  }
class C{  public static <S>ServiceLoader<S> load(Class<S> service,ClassLoader loader){  return new ServiceLoader<>(service,loader);}  }
class C{  public static void fill(short[] array,int start,int end,short value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public void updateRaster(int x1,int y1,ImageIcon ii,LinkProperties properties,int graphicUpdateMask) throws IOException, InterruptedException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkRaster.write(x1,y1,ii,properties,link.dos);}  }
class C{  public ImageException(String message,Reason reason){  super(message);  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.name());}  }
class C{  public static int[] bubbleSort(int[] list){  for (int x=0; x < list.length - 1; x++) {    for (int y=0; y < list.length - x - 1; y++) {      if (list[y] > list[y + 1]) {        int tmp=list[y];        list[y]=list[y + 1];        list[y + 1]=tmp;      }    }  }  return list;}  }
class C{  public static String toString(Object o){  Class<?> c=o.getClass();  StringBuilder sb=new StringBuilder();  sb.append(c.getSimpleName()).append('[');  int i=0;  for (  Field f : c.getDeclaredFields()) {    if ((f.getModifiers() & (Modifier.STATIC | Modifier.TRANSIENT)) != 0) {      continue;    }    f.setAccessible(true);    try {      Object value=f.get(o);      if (i++ > 0) {        sb.append(',');      }      sb.append(f.getName());      sb.append('=');      if (value.getClass().isArray()) {        if (value.getClass() == boolean[].class) {          sb.append(Arrays.toString((boolean[])value));        } else         if (value.getClass() == byte[].class) {          sb.append(Arrays.toString((byte[])value));        } else         if (value.getClass() == char[].class) {          sb.append(Arrays.toString((char[])value));        } else         if (value.getClass() == double[].class) {          sb.append(Arrays.toString((double[])value));        } else         if (value.getClass() == float[].class) {          sb.append(Arrays.toString((float[])value));        } else         if (value.getClass() == int[].class) {          sb.append(Arrays.toString((int[])value));        } else         if (value.getClass() == long[].class) {          sb.append(Arrays.toString((long[])value));        } else         if (value.getClass() == short[].class) {          sb.append(Arrays.toString((short[])value));        } else {          sb.append(Arrays.toString((Object[])value));        }      } else       if (value.getClass() == Character.class) {        sb.append('\'').append(value).append('\'');      } else       if (value.getClass() == String.class) {        sb.append('"').append(value).append('"');      } else {        sb.append(value);      }    } catch (    IllegalAccessException unexpected) {      throw new AssertionError(unexpected);    }  }  sb.append("]");  return sb.toString();}  }
class C{  protected void updateMeanAndVariance(){  m_Mean=0;  if (m_SumOfWeights > 0) {    m_Mean=m_WeightedSum / m_SumOfWeights;  }  m_Variance=Double.MAX_VALUE;  if (m_SumOfWeights > 0) {    m_Variance=m_WeightedSumSquared / m_SumOfWeights - m_Mean * m_Mean;  }  if (m_Variance <= m_MinVar) {    m_Variance=m_MinVar;  }}  }
class C{  public List<String> types(){  List<String> types=allValues("type");  List<String> lowerCaseTypes=new ArrayList<String>(types.size());  for (  String type : types) {    lowerCaseTypes.add(type.toLowerCase());  }  return lowerCaseTypes;}  }
class C{  public int closestPoint(Instance instance,Instances allPoints,int[] pointList) throws Exception {  double minDist=Integer.MAX_VALUE;  int bestPoint=0;  for (int i=0; i < pointList.length; i++) {    double dist=distance(instance,allPoints.instance(pointList[i]),Double.POSITIVE_INFINITY);    if (dist < minDist) {      minDist=dist;      bestPoint=i;    }  }  return pointList[bestPoint];}  }
class C{  protected static String quoteArray(String[] s){  return StringUtils.quoteJavaStringArray(s);}  }
class C{  protected boolean checkMidTierGraph(StructuredGraph graph){  return true;}  }
class C{  public Telephone(){  super();}  }
class C{  private String generateBlendModeImport(BlendMode blendMode){  if (blendMode == BlendMode.COLOR)   return "import mx.graphics.shaderClasses.ColorShader;\n\n"; else   if (blendMode == BlendMode.COLORBURN)   return "import mx.graphics.shaderClasses.ColorBurnShader;\n\n"; else   if (blendMode == BlendMode.COLORDODGE)   return "import mx.graphics.shaderClasses.ColorDodgeShader;\n\n"; else   if (blendMode == BlendMode.EXCLUSION)   return "import mx.graphics.shaderClasses.ExclusionShader;\n\n"; else   if (blendMode == BlendMode.HUE)   return "import mx.graphics.shaderClasses.HueShader;\n\n"; else   if (blendMode == BlendMode.LUMINOSITY)   return "import mx.graphics.shaderClasses.LuminosityShader;\n\n"; else   if (blendMode == BlendMode.SATURATION)   return "import mx.graphics.shaderClasses.SaturationShader;\n\n"; else   if (blendMode == BlendMode.SOFTLIGHT)   return "import mx.graphics.shaderClasses.SoftLightShader;\n\n"; else   return null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return SESSION_IDS;case 2:  return PACKET;default :return null;}}  }
class C{  public boolean isDelete(){  if (delete == null) {    return false;  } else {    return delete;  }}  }
class C{  public CertificateSample() throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException, ClientProtocolException, ClientException, IOException {  super();  resource=new CertificateResource(client);}  }
class C{  public static void deleteDirectory(File directory) throws IOException {  if (!directory.exists()) {    return;  }  if (!isSymlink(directory)) {    cleanDirectory(directory);  }  if (!directory.delete()) {    String message="Unable to delete directory " + directory + ".";    throw new IOException(message);  }}  }
class C{  void onMoved(){  double diff=System.currentTimeMillis() - timeStamp;  timeStamp=0;  if (diff > DISCARD_THRESHOLD) {    return;  }  double recentJitter=0;  double sum=0.0;  for (int i=0; i < VECTOR_LENGTH; i++) {    double old=times[i];    double avg=(diff + old) / 2;    recentJitter+=Math.abs(old - diff);    times[i]=avg;    diff=old;    sum+=avg;  }  recentJitter/=8;  jitter=(jitter + 2.0 * Math.max(jitter,recentJitter) + recentJitter) / 4.0;  prediction=TURN_LENGTH / (sum / VECTOR_LENGTH + jitter);  WtWindowManager wm=WtWindowManager.getInstance();  wm.setProperty(SPEED_PROPERTY,Double.toString(prediction));  wm.setProperty(JITTER_PROPERTY,Double.toString(jitter));}  }
class C{  public void push(StepSingle stepSingle){  checkDumpStep();  stepSingle.index=currentLevel;  stepSingle.parent=parentLevel;  parentLevel=currentLevel;  currentLevel++;}  }
class C{  void unbind(){}  }
class C{  public boolean isSetRegisterResponse(){  return this.registerResponse != null;}  }
class C{  public final boolean levelCheck(int itr){  if (this.levelChecked >= itr)   return this.levelCorrect;  this.levelChecked=itr;  this.levelCorrect=true;  for (int i=0; i < this.operands.length; i++) {    if (this.operands[i] != null && !this.operands[i].levelCheck(itr)) {      this.levelCorrect=false;    }  }  for (int i=0; i < this.ranges.length; i++) {    if (this.ranges[i] != null && !this.ranges[i].levelCheck(itr)) {      this.levelCorrect=false;    }  }  if (this.operator instanceof AnyDefNode) {    AnyDefNode opDef=(AnyDefNode)this.operator;    boolean opDefLevelCheck=opDef.levelCheck(itr);    for (int i=0; i < this.operands.length; i++) {      ExprOrOpArgNode opd=this.operands[i];      if (opd != null) {        if (opd.getLevel() > opDef.getMaxLevel(i)) {          if (opDefLevelCheck && opd.levelCheck(itr)) {            errors.addError(this.stn.getLocation(),"Level error in applying operator " + opDef.getName() + ":\nThe level of argument "+ (i + 1)+ " exceeds the"+ " maximum level allowed by the operator.");          }          this.levelCorrect=false;        }        if (opd instanceof OpArgNode && ((OpArgNode)opd).getOp() instanceof AnyDefNode) {          AnyDefNode opdDef=(AnyDefNode)((OpArgNode)opd).getOp();          boolean opdDefLevelCheck=opdDef.levelCheck(itr);          int alen=opdDef.getArity();          for (int j=0; j < alen; j++) {            if (opdDef.getMaxLevel(j) < opDef.getMinMaxLevel(i,j)) {              if (opDefLevelCheck && opd.levelCheck(itr)) {                errors.addError(this.stn.getLocation(),"Level error in applying operator " + opDef.getName() + ":\n"+ "The permitted level of argument "+ (j + 1)+ " of the operator argument "+ (i + 1)+ " \nmust be at least "+ opDef.getMinMaxLevel(i,j)+ ".");              }              this.levelCorrect=false;            }          }          for (int j=0; j < this.operands.length; j++) {            for (int k=0; k < alen; k++) {              if (opDef.getOpLevelCond(i,j,k) && this.operands[j].getLevel() > opdDef.getMaxLevel(k)) {                if (opd.levelCheck(itr) && this.operands[j].levelCheck(itr)) {                  errors.addError(this.stn.getLocation(),"Level error in applying operator " + opDef.getName() + ":\nThe level of argument "+ (j + 1)+ " exceeds the"+ " maximum level allowed by the operator.");                }                this.levelCorrect=false;              }            }          }        }      }    }    for (int i=0; i < this.ranges.length; i++) {      ExprNode range=this.ranges[i];      if (range != null) {        boolean rangeLevelCheck=range.levelCheck(itr);        if (range.getLevel() > ActionLevel) {          if (rangeLevelCheck) {            errors.addError(this.stn.getLocation(),"Level error in applying operator " + opDef.getName() + ":\nThe level of the range for the bounded variable "+ boundedBoundSymbols[i][0]+ " \nexceeds the maximum "+ "level allowed by the operator.");          }          this.levelCorrect=false;        }      }    }    this.level=opDef.getLevel();    for (int i=0; i < this.operands.length; i++) {      if (this.operands[i] != null && opDef.getWeight(i) == 1) {        this.level=Math.max(this.level,this.operands[i].getLevel());      }    }    for (int i=0; i < this.ranges.length; i++) {      this.level=Math.max(this.level,this.ranges[i].getLevel());    }    this.levelParams.addAll(opDef.getLevelParams());    this.allParams.addAll(opDef.getAllParams());    this.nonLeibnizParams.addAll(opDef.getNonLeibnizParams());    int ar=opDef.getArity();    for (int i=0; i < this.operands.length; i++) {      if (this.operands[i] != null && opDef.getWeight(i) == 1) {        this.levelParams.addAll(this.operands[i].getLevelParams());      }      ;      if (this.operands[i] != null) {        this.allParams.addAll(this.operands[i].getAllParams());        this.nonLeibnizParams.addAll(this.operands[i].getNonLeibnizParams());      }      ;      int ii=i;      if (ar == -1) {        ii=0;      }      ;      if (!opDef.getIsLeibnizArg()[ii]) {        this.nonLeibnizParams.addAll(this.operands[i].getAllParams());      }    }    for (int i=0; i < this.ranges.length; i++) {      this.levelParams.addAll(this.ranges[i].getLevelParams());      this.allParams.addAll(this.ranges[i].getAllParams());      this.nonLeibnizParams.addAll(this.ranges[i].getNonLeibnizParams());    }    HashSet allBoundSymbols=new HashSet();    if (this.unboundedBoundSymbols != null) {      for (int i=0; i < this.unboundedBoundSymbols.length; i++) {        allBoundSymbols.add(this.unboundedBoundSymbols[i]);      }    }    ;    if (this.boundedBoundSymbols != null) {      for (int i=0; i < this.boundedBoundSymbols.length; i++) {        if (this.boundedBoundSymbols[i] != null) {          for (int j=0; j < this.boundedBoundSymbols[i].length; j++) {            allBoundSymbols.add(this.boundedBoundSymbols[i][j]);          }        }      }    }    ;    Iterator absIter=allBoundSymbols.iterator();    while (absIter.hasNext()) {      Object nextBoundSymbol=absIter.next();      this.levelParams.remove(nextBoundSymbol);      this.allParams.remove(nextBoundSymbol);      this.nonLeibnizParams.remove(nextBoundSymbol);    }    ;    this.levelConstraints.putAll(opDef.getLevelConstraints());    for (int i=0; i < this.operands.length; i++) {      if (this.operands[i] != null) {        if (allBoundSymbols.size() == 0) {          this.levelConstraints.putAll(this.operands[i].getLevelConstraints());        } else {          SetOfLevelConstraints lcons=this.operands[i].getLevelConstraints();          Iterator iter=lcons.keySet().iterator();          while (iter.hasNext()) {            SymbolNode param=(SymbolNode)iter.next();            if (!allBoundSymbols.contains(param)) {              this.levelConstraints.put(param,lcons.get(param));            }          }        }      }    }    for (int i=0; i < this.ranges.length; i++) {      this.levelConstraints.putAll(this.ranges[i].getLevelConstraints());    }    for (int i=0; i < this.operands.length; i++) {      Integer mlevel=new Integer(opDef.getMaxLevel(i));      if (this.operands[i] != null) {        Iterator iter=this.operands[i].getLevelParams().iterator();        while (iter.hasNext()) {          this.levelConstraints.put(iter.next(),mlevel);        }      }    }    for (int i=0; i < this.operands.length; i++) {      ExprOrOpArgNode opdi=this.operands[i];      if (opdi != null && opdi instanceof OpArgNode && ((OpArgNode)opdi).getOp() instanceof AnyDefNode) {        AnyDefNode argDef=(AnyDefNode)((OpArgNode)opdi).getOp();        argDef.levelCheck(itr);        int alen=argDef.getArity();        for (int j=0; j < this.operands.length; j++) {          for (int k=0; k < alen; k++) {            if (opDef.getOpLevelCond(i,j,k)) {              Integer mlevel=new Integer(argDef.getMaxLevel(k));              Iterator iter=this.operands[j].getLevelParams().iterator();              while (iter.hasNext()) {                this.levelConstraints.put(iter.next(),mlevel);              }            }          }        }        ;        if (!argDef.getIsLeibniz()) {          for (int j=0; j < this.operands.length; j++) {            for (int k=0; k < alen; k++) {              if (opDef.getOpLevelCond(i,j,k) && !argDef.getIsLeibnizArg()[k]) {                this.nonLeibnizParams.addAll(this.operands[j].getAllParams());              }            }          }          ;        }        ;      }    }    HashSet alpSet=opDef.getArgLevelParams();    Iterator iter=alpSet.iterator();    while (iter.hasNext()) {      ArgLevelParam alp=(ArgLevelParam)iter.next();      ExprOrOpArgNode arg=this.getArg(alp.op);      if (arg != null && arg instanceof OpArgNode && ((OpArgNode)arg).getOp() instanceof AnyDefNode) {        AnyDefNode argDef=(AnyDefNode)((OpArgNode)arg).getOp();        argDef.levelCheck(itr);        Integer mlevel=new Integer(argDef.getMaxLevel(alp.i));        this.levelConstraints.put(alp.param,mlevel);      }    }    this.argLevelConstraints.putAll(opDef.getArgLevelConstraints());    for (int i=0; i < this.operands.length; i++) {      if (this.operands[i] != null) {        this.argLevelConstraints.putAll(this.operands[i].getArgLevelConstraints());      }    }    for (int i=0; i < this.ranges.length; i++) {      this.argLevelConstraints.putAll(this.ranges[i].getArgLevelConstraints());    }    for (int i=0; i < this.operands.length; i++) {      ExprOrOpArgNode opdi=this.operands[i];      if (opdi != null && opdi instanceof OpArgNode && ((OpArgNode)opdi).getOp().isParam()) {        SymbolNode opArg=((OpArgNode)opdi).getOp();        int alen=opArg.getArity();        for (int j=0; j < alen; j++) {          ParamAndPosition pap=new ParamAndPosition(opArg,j);          Integer mlevel=new Integer(opDef.getMinMaxLevel(i,j));          this.argLevelConstraints.put(pap,mlevel);        }        for (int j=0; j < this.operands.length; j++) {          for (int k=0; k < alen; k++) {            if (opDef.getOpLevelCond(i,j,k)) {              ParamAndPosition pap=new ParamAndPosition(opArg,k);              Integer mlevel=new Integer(this.operands[j].getLevel());              this.argLevelConstraints.put(pap,mlevel);            }          }        }      }    }    iter=alpSet.iterator();    while (iter.hasNext()) {      ArgLevelParam alp=(ArgLevelParam)iter.next();      ExprOrOpArgNode arg=this.getArg(alp.op);      if (arg != null) {        arg.levelCheck(itr);        ParamAndPosition pap=new ParamAndPosition(alp.op,alp.i);        this.argLevelConstraints.put(pap,new Integer(arg.getLevel()));      }    }    this.argLevelParams=new HashSet();    for (int i=0; i < this.operands.length; i++) {      if (this.operands[i] != null) {        if (allBoundSymbols.size() == 0) {          this.argLevelParams.addAll(this.operands[i].getArgLevelParams());        } else {          Iterator alpiter=this.operands[i].getArgLevelParams().iterator();          while (alpiter.hasNext()) {            ArgLevelParam alp=(ArgLevelParam)alpiter.next();            if (!allBoundSymbols.contains(alp.param)) {              this.argLevelParams.add(alp);            }          }          ;        }      }    }    ;    for (int i=0; i < this.ranges.length; i++) {      this.argLevelParams.addAll(this.ranges[i].getArgLevelParams());    }    ;    iter=alpSet.iterator();    while (iter.hasNext()) {      ArgLevelParam alp=(ArgLevelParam)iter.next();      ExprOrOpArgNode arg=this.getArg(alp.op);      if (arg == null) {        arg=this.getArg(alp.param);        if (arg == null) {          this.argLevelParams.add(alp);        } else {          arg.levelCheck(itr);          Iterator iter1=arg.getLevelParams().iterator();          while (iter1.hasNext()) {            SymbolNode param=(SymbolNode)iter1.next();            this.argLevelParams.add(new ArgLevelParam(alp.op,alp.i,param));          }        }      } else {        if (arg instanceof OpArgNode && ((OpArgNode)arg).getOp().isParam()) {          SymbolNode argOp=((OpArgNode)arg).getOp();          this.argLevelParams.add(new ArgLevelParam(argOp,alp.i,alp.param));        }      }    }    for (int i=0; i < this.operands.length; i++) {      ExprOrOpArgNode opdi=this.operands[i];      if (opdi != null && opdi instanceof OpArgNode && ((OpArgNode)opdi).getOp().isParam()) {        SymbolNode opArg=((OpArgNode)opdi).getOp();        int alen=opArg.getArity();        for (int j=0; j < this.operands.length; j++) {          for (int k=0; k < alen; k++) {            if (opDef.getOpLevelCond(i,j,k)) {              Iterator iter1=this.operands[j].getLevelParams().iterator();              while (iter1.hasNext()) {                SymbolNode param=(SymbolNode)iter1.next();                this.argLevelParams.add(new ArgLevelParam(opArg,k,param));              }            }          }        }      }    }  } else {    this.operator.levelCheck(itr);    this.level=this.operator.getLevel();    for (int i=0; i < this.operands.length; i++) {      this.operands[i].levelCheck(itr);      this.level=Math.max(this.level,this.operands[i].getLevel());    }    this.levelParams=new HashSet();    this.levelParams.add(this.operator);    this.allParams.add(this.operator);    for (int i=0; i < this.operands.length; i++) {      this.levelParams.addAll(this.operands[i].getLevelParams());      this.allParams.addAll(this.operands[i].getAllParams());      this.nonLeibnizParams.addAll(this.operands[i].getNonLeibnizParams());    }    this.levelConstraints=new SetOfLevelConstraints();    for (int i=0; i < this.operands.length; i++) {      this.levelConstraints.putAll(this.operands[i].getLevelConstraints());    }    this.argLevelConstraints=new SetOfArgLevelConstraints();    for (int i=0; i < this.operands.length; i++) {      this.argLevelConstraints.put(this.operator,i,this.operands[i].getLevel());      this.argLevelConstraints.putAll(this.operands[i].getArgLevelConstraints());    }    this.argLevelParams=new HashSet();    for (int i=0; i < this.operands.length; i++) {      HashSet lpSet=this.operands[i].getLevelParams();      Iterator iter=lpSet.iterator();      while (iter.hasNext()) {        SymbolNode param=(SymbolNode)iter.next();        this.argLevelParams.add(new ArgLevelParam(this.operator,i,param));      }      ;      this.argLevelParams.addAll(this.operands[i].getArgLevelParams());    }    ;  }  ;  String opName=this.operator.getName().toString();  if (opName.equals("[]")) {    ExprNode arg=(ExprNode)this.getArgs()[0];    if ((arg.getLevel() == ActionLevel) && (arg.getKind() == OpApplKind)) {      if (!((OpApplNode)arg).operator.getName().toString().equals("$SquareAct")) {        errors.addError(stn.getLocation(),"[] followed by action not of form [A]_v.");      }    }  }  ;  if (opName.equals("<>")) {    ExprNode arg=(ExprNode)this.getArgs()[0];    if ((arg.getLevel() == ActionLevel) && (arg.getKind() == OpApplKind)) {      if (!((OpApplNode)arg).operator.getName().toString().equals("$AngleAct")) {        errors.addError(stn.getLocation(),"<> followed by action not of form <<A>>_v.");      }    }  }  ;  if (opName.equals("~>") || opName.equals("-+->")) {    if ((this.getArgs()[0].getLevel() == ActionLevel) || (this.getArgs()[1].getLevel() == ActionLevel)) {      errors.addError(stn.getLocation(),"Action used where only temporal formula or " + "state predicate allowed.");    }  }  ;  if (opName.equals("\\land") || opName.equals("\\lor") || opName.equals("=>")|| opName.equals("\\equiv")|| opName.equals("$ConjList")|| opName.equals("$DisjList")) {    boolean hasTemporal=false;    boolean hasAction=false;    for (int i=0; i < this.getArgs().length; i++) {      hasTemporal=hasTemporal || (this.getArgs()[i].getLevel() == TemporalLevel);      hasAction=hasAction || (this.getArgs()[i].getLevel() == ActionLevel);    }    if (hasTemporal && hasAction) {      String pop=opName;      if (pop.equals("$ConjList")) {        pop="Conjunction list";      }      if (pop.equals("$DisjList")) {        pop="Disjunction list";      }      errors.addError(stn.getLocation(),pop + " has both temporal formula and action as arguments.");    }  }  if ((this.level == TemporalLevel) && (opName.equals("$BoundedExists") || opName.equals("$BoundedForall"))) {    for (int i=0; i < this.ranges.length; i++) {      if (this.ranges[i].getLevel() == ActionLevel) {        errors.addError(this.ranges[i].stn.getLocation(),"Action-level bound of quantified temporal formula.");      }    }  }  return this.levelCorrect;}  }
class C{  public String toString(PeriodFormatter formatter){  if (formatter == null) {    return toString();  }  return formatter.print(this);}  }
class C{  private static FileDescriptor open(String pathForWindows,String pathToCheck,Flags flags,long pSecurityDescriptor) throws WindowsException {  boolean truncateAfterOpen=false;  int dwDesiredAccess=0;  if (flags.read)   dwDesiredAccess|=GENERIC_READ;  if (flags.write)   dwDesiredAccess|=GENERIC_WRITE;  int dwShareMode=0;  if (flags.shareRead)   dwShareMode|=FILE_SHARE_READ;  if (flags.shareWrite)   dwShareMode|=FILE_SHARE_WRITE;  if (flags.shareDelete)   dwShareMode|=FILE_SHARE_DELETE;  int dwFlagsAndAttributes=FILE_ATTRIBUTE_NORMAL;  int dwCreationDisposition=OPEN_EXISTING;  if (flags.write) {    if (flags.createNew) {      dwCreationDisposition=CREATE_NEW;      dwFlagsAndAttributes|=FILE_FLAG_OPEN_REPARSE_POINT;    } else {      if (flags.create)       dwCreationDisposition=OPEN_ALWAYS;      if (flags.truncateExisting) {        if (dwCreationDisposition == OPEN_ALWAYS) {          truncateAfterOpen=true;        } else {          dwCreationDisposition=TRUNCATE_EXISTING;        }      }    }  }  if (flags.dsync || flags.sync)   dwFlagsAndAttributes|=FILE_FLAG_WRITE_THROUGH;  if (flags.overlapped)   dwFlagsAndAttributes|=FILE_FLAG_OVERLAPPED;  if (flags.deleteOnClose)   dwFlagsAndAttributes|=FILE_FLAG_DELETE_ON_CLOSE;  boolean okayToFollowLinks=true;  if (dwCreationDisposition != CREATE_NEW && (flags.noFollowLinks || flags.openReparsePoint || flags.deleteOnClose)) {    if (flags.noFollowLinks || flags.deleteOnClose)     okayToFollowLinks=false;    dwFlagsAndAttributes|=FILE_FLAG_OPEN_REPARSE_POINT;  }  if (pathToCheck != null) {    SecurityManager sm=System.getSecurityManager();    if (sm != null) {      if (flags.read)       sm.checkRead(pathToCheck);      if (flags.write)       sm.checkWrite(pathToCheck);      if (flags.deleteOnClose)       sm.checkDelete(pathToCheck);    }  }  long handle=CreateFile(pathForWindows,dwDesiredAccess,dwShareMode,pSecurityDescriptor,dwCreationDisposition,dwFlagsAndAttributes);  if (!okayToFollowLinks) {    try {      if (WindowsFileAttributes.readAttributes(handle).isSymbolicLink())       throw new WindowsException("File is symbolic link");    } catch (    WindowsException x) {      CloseHandle(handle);      throw x;    }  }  if (truncateAfterOpen) {    try {      SetEndOfFile(handle);    } catch (    WindowsException x) {      CloseHandle(handle);      throw x;    }  }  if (dwCreationDisposition == CREATE_NEW && flags.sparse) {    try {      DeviceIoControlSetSparse(handle);    } catch (    WindowsException x) {    }  }  FileDescriptor fdObj=new FileDescriptor();  fdAccess.setHandle(fdObj,handle);  return fdObj;}  }
class C{  public void assertAssignable(Type s,Type t,boolean expected){  if (types.isAssignable(s,t) != expected) {    String msg=expected ? " is not assignable to " : " is assignable to ";    error(s + msg + t);  }}  }
class C{  private void initializeDependencyInjector(){  RootModule rootModule=new RootModule(this);  applicationObjectGraph=ObjectGraph.create(rootModule);  inject(this);}  }
class C{  private byte[][] extractIPsAndSubnetMasks(byte[] ipWithSubmask1,byte[] ipWithSubmask2){  int ipLength=ipWithSubmask1.length / 2;  byte ip1[]=new byte[ipLength];  byte subnetmask1[]=new byte[ipLength];  System.arraycopy(ipWithSubmask1,0,ip1,0,ipLength);  System.arraycopy(ipWithSubmask1,ipLength,subnetmask1,0,ipLength);  byte ip2[]=new byte[ipLength];  byte subnetmask2[]=new byte[ipLength];  System.arraycopy(ipWithSubmask2,0,ip2,0,ipLength);  System.arraycopy(ipWithSubmask2,ipLength,subnetmask2,0,ipLength);  return new byte[][]{ip1,subnetmask1,ip2,subnetmask2};}  }
class C{  public ClusterGroupEmptyCheckedException(String msg){  super(msg);}  }
class C{  public CMSSignedData generate(CMSProcessable content,boolean encapsulate,Provider sigProvider) throws NoSuchAlgorithmException, CMSException {  if (content instanceof CMSTypedData) {    return this.generate(((CMSTypedData)content).getContentType().getId(),content,encapsulate,sigProvider);  } else {    return this.generate(DATA,content,encapsulate,sigProvider);  }}  }
class C{  public CompletableFuture<T> exceptAsync(Consumer<Throwable> consumer,Executor executor){  return whenCompleteAsync(null,executor);}  }
class C{  synchronized public void removeClusterChangeListener(ClusterEventListener l){  if (listeners == null)   listeners=new Vector();  listeners.removeElement(l);}  }
class C{  public boolean isEmpty(){  if (lastBatch != null) {    if (!lastBatch.isEmpty()) {      return false;    }  }  return currentBatch.isEmpty();}  }
class C{  static void compileArrayStoreBarrierDouble(Assembler asm,BaselineCompilerImpl compiler){  arrayStoreBarrierHelper(asm,compiler,Entrypoints.doubleArrayWriteBarrierMethod);}  }
class C{  public void runAndAssertAllData(){  runAndAssert(0,data.size());}  }
class C{  static <K,V>void moveRootToFront(Node<K,V>[] tab,TreeNode<K,V> root){  int n;  if (root != null && tab != null && (n=tab.length) > 0) {    int index=(n - 1) & root.hash;    TreeNode<K,V> first=(TreeNode<K,V>)tab[index];    if (root != first) {      Node<K,V> rn;      tab[index]=root;      TreeNode<K,V> rp=root.prev;      if ((rn=root.next) != null)       ((TreeNode<K,V>)rn).prev=rp;      if (rp != null)       rp.next=rn;      if (first != null)       first.prev=root;      root.next=first;      root.prev=null;    }    assert checkInvariants(root);  }}  }
class C{  public void createMemory(String database,boolean schema){  try {    Accessor accessor=((JpaEntityManagerFactory)getFactory()).getServerSession().getReadConnectionPool().acquireConnection();    Connection connection=accessor.getConnection();    Statement statement=connection.createStatement();    if (schema) {      statement.executeUpdate("CREATE SCHEMA " + database);    } else {      statement.executeUpdate("CREATE DATABASE " + database);    }    statement.close();    ((JpaEntityManagerFactory)getFactory()).getServerSession().getReadConnectionPool().releaseConnection(accessor);    shutdown();    restore(database,schema,true);  } catch (  Exception failed) {    this.bot.log(this,failed);    throw new RuntimeException(failed);  }}  }
class C{  protected final void BOOLEAN_CMP_DOUBLE(Instruction s,RegisterOperand res,ConditionOperand cond,Operand val1,Operand val2){  RegisterOperand temp=regpool.makeTemp(TypeReference.Boolean);  EMIT(CPOS(s,MIR_Move.create(IA32_FMOV,D(getFPR(0)),CondMove.getVal1(s))));  EMIT(CPOS(s,MIR_Compare.create(IA32_FCOMI,D(getFPR(0)),CondMove.getVal2(s))));  EMIT(CPOS(s,MIR_Set.create(IA32_SET__B,temp,COND(cond))));  EMIT(MIR_Unary.mutate(s,IA32_MOVZX__B,res,temp.copyD2U()));}  }
class C{  public XORWOW(){  super();}  }
class C{  public RequestHandle delete(String url,RequestParams params,AsyncHttpResponseHandler responseHandler){  final HttpDelete delete=new HttpDelete(getUrlWithQueryString(isUrlEncodingEnabled,url,params));  return sendRequest(httpClient,httpContext,delete,null,responseHandler,null);}  }
class C{  public MediaTypes merge(final MediaTypes types){  final SortedSet<MediaType> set=new TreeSet<>();  set.addAll(this.list);  set.addAll(types.list);  return new MediaTypes(set);}  }
class C{  private void addMapping(TreeStateNode node){  treePathMapping.put(node.getTreePath(),node);}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  return toJSONObject(new XMLTokener(string));}  }
class C{  public static void enableAll(final BackEndDebuggerProvider debuggerProvider){  checkArguments(debuggerProvider);  for (  final IDebugger debugger : debuggerProvider) {    enableAll(debugger.getBreakpointManager());  }}  }
class C{  public static void reformatJavaSource(File file) throws CoreException {  try {    String generatedSource=textFromFile(file);    String reformattedSource=reformatJavaSourceAsString(generatedSource);    if (!reformattedSource.equals(generatedSource)) {      writeStringToFile(reformattedSource,file);    }  } catch (  IOException ioe) {    throw new CoreException(new Status(Status.ERROR,CorePlugin.PLUGIN_ID,"IOException while trying to reformat source code in new project"));  }}  }
class C{  public JSONObject(Map map){  super(map);}  }
class C{  public boolean containsKey(int key){  return contains(key);}  }
class C{  public void mouseExited(MouseEvent e){  if (wantsEvents()) {    if (omdtmm != null) {      omdtmm.mouseExited(e);    }  } else {    super.mouseExited(e);  }}  }
class C{  public DocumentaryEffect(){}  }
class C{  public TimestampValidityState(long timestamp){  myTimestamp=timestamp;}  }
class C{  public GrammarMutation(double probability){  super();  this.probability=probability;}  }
class C{  public XYBoxAndWhiskerRenderer(double boxWidth){  super();  this.boxWidth=boxWidth;  this.boxPaint=Color.green;  this.fillBox=true;  setBaseToolTipGenerator(new BoxAndWhiskerXYToolTipGenerator());}  }
class C{  public static MDepreciationExp createEntry(Properties ctx,String entryType,int A_Asset_ID,int A_Period,Timestamp DateAcct,String postingType,int drAcct,int crAcct,BigDecimal expense,String description,MDepreciationWorkfile assetwk){  MDepreciationExp depexp=new MDepreciationExp(ctx,0,null);  depexp.setA_Entry_Type(entryType);  depexp.setA_Asset_ID(A_Asset_ID);  depexp.setDR_Account_ID(drAcct);  depexp.setCR_Account_ID(crAcct);  depexp.setA_Account_Number_Acct(drAcct);  depexp.setPostingType(postingType);  depexp.setExpense(expense);  depexp.setDescription(Msg.parseTranslation(ctx,description));  depexp.setA_Period(A_Period);  depexp.setIsDepreciated(true);  depexp.setDateAcct(DateAcct);  depexp.updateFrom(assetwk);  s_log.fine("depexp=" + depexp);  return depexp;}  }
class C{  public void refreshSpecAndOutlineView(boolean reInitialize){  IProject project=getProject();  fInputElement=DroidsafePluginUtilities.getSecuritySpec(project,true,reInitialize);  if (fInputElement == null) {    showEmptyPage();  } else {    updateView();    InfoFlowSummaryViewPart.openView(fInputElement);    if (reInitialize) {      IndicatorViewPart indicatorView=IndicatorViewPart.openView();      if (indicatorView != null) {        indicatorView.forceReloadAll();        indicatorView.updateView();      }    }  }}  }
class C{  @Override final public void mouseEntered(MouseEvent e){  mouseEnter(e);}  }
class C{  private synchronized void touchPeer(Peer peer){  Peer copyInList=getCanonicalPeer(peer);  if (copyInList != null) {    copyInList.touch();  }  if (peer != null) {    peer.touch();  }}  }
class C{  private static Map<URI,Set<Initiator>> generateHostInitiatorsMap(Collection<Initiator> initiators){  Map<URI,Set<Initiator>> hostInitiatorsMap=new HashMap<URI,Set<Initiator>>();  for (  Initiator initiator : initiators) {    URI host=initiator.getHost();    if (hostInitiatorsMap.get(host) == null) {      hostInitiatorsMap.put(host,new HashSet<Initiator>());    }    hostInitiatorsMap.get(host).add(initiator);  }  return hostInitiatorsMap;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public SingleResourceReaderTask(String resource,String baseURL,RDFFormat rdfFormat,final RDFParserOptions parserOptions,final boolean deleteAfter,IStatementBufferFactory bufferFactory,AtomicLong toldTriples){  if (resource == null)   throw new IllegalArgumentException();  if (baseURL == null)   throw new IllegalArgumentException();  if (rdfFormat == null)   throw new IllegalArgumentException();  if (parserOptions == null)   throw new IllegalArgumentException();  if (bufferFactory == null)   throw new IllegalArgumentException();  if (toldTriples == null)   throw new IllegalArgumentException();  this.resource=resource;  this.baseURL=baseURL;  this.rdfFormat=rdfFormat;  this.parserOptions=parserOptions;  this.deleteAfter=deleteAfter;  this.bufferFactory=bufferFactory;  this.toldTriples=toldTriples;  this.createTime=System.currentTimeMillis();}  }
class C{  static StepPattern loadSteps(MatchPatternIterator mpi,Compiler compiler,int stepOpCodePos,int stepIndex) throws javax.xml.transform.TransformerException {  if (DEBUG_PATTERN_CREATION) {    System.out.println("================");    System.out.println("loadSteps for: " + compiler.getPatternString());  }  int stepType;  StepPattern step=null;  StepPattern firstStep=null, prevStep=null;  int analysis=analyze(compiler,stepOpCodePos,stepIndex);  while (OpCodes.ENDOP != (stepType=compiler.getOp(stepOpCodePos))) {    step=createDefaultStepPattern(compiler,stepOpCodePos,mpi,analysis,firstStep,prevStep);    if (null == firstStep) {      firstStep=step;    } else {      step.setRelativePathPattern(prevStep);    }    prevStep=step;    stepOpCodePos=compiler.getNextStepPos(stepOpCodePos);    if (stepOpCodePos < 0)     break;  }  int axis=Axis.SELF;  int paxis=Axis.SELF;  StepPattern tail=step;  for (StepPattern pat=step; null != pat; pat=pat.getRelativePathPattern()) {    int nextAxis=pat.getAxis();    pat.setAxis(axis);    int whatToShow=pat.getWhatToShow();    if (whatToShow == DTMFilter.SHOW_ATTRIBUTE || whatToShow == DTMFilter.SHOW_NAMESPACE) {      int newAxis=(whatToShow == DTMFilter.SHOW_ATTRIBUTE) ? Axis.ATTRIBUTE : Axis.NAMESPACE;      if (isDownwardAxisOfMany(axis)) {        StepPattern attrPat=new StepPattern(whatToShow,pat.getNamespace(),pat.getLocalName(),newAxis,0);        XNumber score=pat.getStaticScore();        pat.setNamespace(null);        pat.setLocalName(NodeTest.WILD);        attrPat.setPredicates(pat.getPredicates());        pat.setPredicates(null);        pat.setWhatToShow(DTMFilter.SHOW_ELEMENT);        StepPattern rel=pat.getRelativePathPattern();        pat.setRelativePathPattern(attrPat);        attrPat.setRelativePathPattern(rel);        attrPat.setStaticScore(score);        if (Axis.PRECEDING == pat.getAxis())         pat.setAxis(Axis.PRECEDINGANDANCESTOR); else         if (Axis.DESCENDANT == pat.getAxis())         pat.setAxis(Axis.DESCENDANTORSELF);        pat=attrPat;      } else       if (Axis.CHILD == pat.getAxis()) {        pat.setAxis(Axis.ATTRIBUTE);      }    }    axis=nextAxis;    tail=pat;  }  if (axis < Axis.ALL) {    StepPattern selfPattern=new ContextMatchStepPattern(axis,paxis);    XNumber score=tail.getStaticScore();    tail.setRelativePathPattern(selfPattern);    tail.setStaticScore(score);    selfPattern.setStaticScore(score);  }  if (DEBUG_PATTERN_CREATION) {    System.out.println("Done loading steps: " + step.toString());    System.out.println("");  }  return step;}  }
class C{  public static void putFloatLE(long addr,float val){  int intVal=Float.floatToIntBits(val);  if (UNALIGNED)   UNSAFE.putInt(addr,Integer.reverseBytes(intVal)); else   putIntByByte(addr,intVal,false);}  }
class C{  public void startElement(String uri,String localName,String qName) throws SAXException {  if (m_state != null) {    m_state.resetState(getTransformer());  }  if (m_tracer != null)   super.fireStartElem(qName);}  }
class C{  private void heapifyUp(int twopos,Comparable<Object> cur){  while (twopos > 0) {    final int parent=(twopos - 1) >>> 1;    Comparable<Object> par=twoheap[parent];    if (cur.compareTo(par) >= 0) {      break;    }    twoheap[twopos]=par;    twopos=parent;  }  twoheap[twopos]=cur;}  }
class C{  public MovePath addStep(final MoveStepType type,final Targetable target){  return addStep(new MoveStep(this,type,target));}  }
class C{  public Matrix3d mulComponentWise(Matrix3dc other){  return mulComponentWise(other,this);}  }
class C{  public TypeAnnotationsWriter(OutputStream os,ConstPool cp){  super(os,cp);}  }
class C{  public synchronized void push(){  for (int i=0; i < count; i++) {    int ix=(start + i) % buffer.length;    LogRecord record=buffer[ix];    target.publish(record);  }  start=0;  count=0;}  }
class C{  public IntIterator rangeSortedBy(String field,double lo,double hi,int indexType){  Index index=getIndex(field,double.class,true);  return index.rows(lo,hi,indexType);}  }
class C{  @SuppressWarnings("unchecked") private void checkLoadedPlugins(final ConfigManager configFile){  final ArrayList<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>> checked=new ArrayList<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>>();  for (int i=0; i < model.getSize(); i++) {    for (    final PluginConfigItem plugin : configFile.getGeneralSettings().getPlugins()) {      if (plugin.getGUID() == model.get(i).getObject().getGuid()) {        setChecked(i,plugin.isLoad());      }      checked.add(model.get(i).getObject());    }  }  for (int i=configFile.getGeneralSettings().getPlugins().size(); i < model.getSize(); i++) {    setChecked(i,true);  }}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.GUARD;}  }
class C{  @Override public String toString(){  return "ModelMBeanAttributeInfo: " + this.getName() + " ; Description: "+ this.getDescription()+ " ; Types: "+ this.getType()+ " ; isReadable: "+ this.isReadable()+ " ; isWritable: "+ this.isWritable()+ " ; Descriptor: "+ this.getDescriptor();}  }
class C{  void updateValue(Object value){  try {    if (value == null) {      String string=getFormattedTextField().getText();      value=stringToValue(string);    }    if (getCommitsOnValidEdit()) {      commitEdit();    }    setEditValid(true);  } catch (  ParseException pe) {    setEditValid(false);  }}  }
class C{  @Override protected void buildGrid(){  min[0]=0;  min[1]=0;  max[0]=columns * cellSize;  max[1]=rows * cellSize;  FloatBuffer vertices=buildLatticeVertices(rows,columns);  lattice.setVertexBuffer(vertices);  lattice.updateModelBound();  lattice.setLineWidth(lineWidth);  buildText();  updateGeometricState(0,true);  updateWorldTransform(true);  updateWorldBound(true);}  }
class C{  @Override public Collection<OFMessage> write(Iterable<OFMessage> msglist){  return this.write(msglist,LogicalOFMessageCategory.MAIN);}  }
class C{  static TimePeriod fromRequestedTokenLifetime(LifetimeType lifetime) throws InvalidRequestException, InvalidTimeRangeException {  assert lifetime != null;  try {    return newTimePeriod(lifetime.getCreated(),lifetime.getExpires());  } catch (  ParseException e) {    throw new InvalidRequestException("Cannot parse requested token lifetime [" + lifetime.getCreated() == null ? null : lifetime.getCreated().getValue() + "; " + lifetime.getExpires() == null ? null : lifetime.getExpires().getValue() + ")",e);  }catch (  IllegalArgumentException e) {    throw new InvalidTimeRangeException("Invalid token lifetime",e);  }}  }
class C{  public ClusterConfig(List<Node> nodes,short thisNodeId,String listenAddress,AuthScheme authScheme,String keyStorePath,String keyStorePassword) throws SyncException {  init(nodes,thisNodeId,authScheme,keyStorePath,keyStorePassword);  this.listenAddress=listenAddress;}  }
class C{  public static void putString2bytes(byte[] destbytes,String srcString,int destOffset,int srcOffset,int count){  for (int i=0; i < count; i++) {    destbytes[count + i]=srcString.getBytes()[i];  }}  }
class C{  public double num(){  return m_val ? 1.0 : 0.0;}  }
class C{  public void test_getOffsetIIIIII(){  st1=new SimpleTimeZone(TimeZone.getTimeZone("EST").getRawOffset(),"EST");  assertTrue("Incorrect offset returned",st1.getOffset(GregorianCalendar.AD,1998,Calendar.NOVEMBER,11,Calendar.WEDNESDAY,0) == -(5 * 60 * 60* 1000));  st1=new SimpleTimeZone(TimeZone.getTimeZone("EST").getRawOffset(),"EST");  assertEquals("Incorrect offset returned",-(5 * 60 * 60* 1000),st1.getOffset(GregorianCalendar.AD,1998,Calendar.JUNE,11,Calendar.THURSDAY,0));  st1=new SimpleTimeZone(TimeZone.getDefault().getRawOffset(),TimeZone.getDefault().getID());  int fourHours=4 * 60 * 60* 1000;  st1.setRawOffset(fourHours);  assertEquals(fourHours,st1.getOffset(1,2099,01,1,5,0));  try {    st1.getOffset(-1,2099,01,1,5,0);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    st1.getOffset(1,2099,15,1,5,0);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    st1.getOffset(1,2099,01,100,5,0);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    st1.getOffset(1,2099,01,1,50,0);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    st1.getOffset(1,2099,01,1,5,-10);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public WeakReference(T referent){  super(referent);}  }
class C{  public static <T>void checkCompleted(CompletionStage<T> stage){  if (!stage.toCompletableFuture().isDone()) {    throw new IllegalStateException("future was not completed");  }}  }
class C{  public void testConstructor4(){  try {    Integer[] ints=new Integer[SIZE];    LinkedBlockingQueue q=new LinkedBlockingQueue(Arrays.asList(ints));    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  public static NodeReference createFromNodeId(ExpandedNodeId nodeId,NamespaceTable namespaceTable,ServerTable serverTable){  if (nodeId.getNamespaceUri() != null)   return new NodeReference(serverTable.getUri(nodeId.getServerIndex().intValue()),nodeId.getNamespaceUri(),nodeId.getValue());  return new NodeReference(serverTable.getUri(nodeId.getServerIndex().intValue()),namespaceTable.getUri(nodeId.getNamespaceIndex()),nodeId.getValue());}  }
class C{  public void writeTag(String tag,double value,String nanString){  writeTag(tag,Util.formatDouble(value,nanString,true));}  }
class C{  public byte[] gunzipIt(byte[] bytes) throws IOException {  byte[] buffer=new byte[1024];  ByteArrayOutputStream out=new ByteArrayOutputStream();  try (GZIPInputStream gzis=new GZIPInputStream(new ByteArrayInputStream(bytes))){    int len;    while ((len=gzis.read(buffer)) > 0) {      out.write(buffer,0,len);    }  }   return out.toByteArray();}  }
class C{  public Matrix4x3d rotateZYX(Vector3d angles){  return rotateZYX(angles.z,angles.y,angles.x);}  }
class C{  public static void main(String[] args){  try {    generateHashFunctions();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public final void lineStrip2D(List<? extends Vec2D> points){  boolean isFilled=gfx.fill;  gfx.fill=false;  processVertices2D(points.iterator(),PConstants.POLYGON,false);  gfx.fill=isFilled;}  }
class C{  public static int cs_spsolve(Scs G,Scs B,int k,int[] xi,float[] x,int[] pinv,boolean lo){  int j, J, p, q, px, top, n, Gp[], Gi[], Bp[], Bi[];  float Gx[], Bx[];  if (!Scs_util.CS_CSC(G) || !Scs_util.CS_CSC(B) || xi == null || x == null)   return (-1);  Gp=G.p;  Gi=G.i;  Gx=G.x;  n=G.n;  Bp=B.p;  Bi=B.i;  Bx=B.x;  top=Scs_reach.cs_reach(G,B,k,xi,pinv);  for (p=top; p < n; p++)   x[xi[p]]=0;  for (p=Bp[k]; p < Bp[k + 1]; p++)   x[Bi[p]]=Bx[p];  for (px=top; px < n; px++) {    j=xi[px];    J=pinv != null ? (pinv[j]) : j;    if (J < 0)     continue;    x[j]/=Gx[lo ? (Gp[J]) : (Gp[J + 1] - 1)];    p=lo ? (Gp[J] + 1) : (Gp[J]);    q=lo ? (Gp[J + 1]) : (Gp[J + 1] - 1);    for (; p < q; p++) {      x[Gi[p]]-=Gx[p] * x[j];    }  }  return (top);}  }
class C{  public static TransportNetwork fromFeeds(String osmFile,List<GTFSFeed> feeds,TNBuilderConfig config){  return fromFiles(osmFile,null,feeds,config);}  }
class C{  public final boolean post(@NonNull Runnable r){  return mExec.post(wrapRunnable(r));}  }
class C{  public static Map<String,Object> findRelatedContent(DispatchContext dctx,Map<String,? extends Object> context){  LocalDispatcher dispatcher=dctx.getDispatcher();  Map<String,Object> results=FastMap.newInstance();  GenericValue currentContent=(GenericValue)context.get("currentContent");  String fromDate=(String)context.get("fromDate");  String thruDate=(String)context.get("thruDate");  String toFrom=(String)context.get("toFrom");  Locale locale=(Locale)context.get("locale");  if (toFrom == null) {    toFrom="TO";  } else {    toFrom=toFrom.toUpperCase();  }  List<String> assocTypes=UtilGenerics.checkList(context.get("contentAssocTypeList"));  List<String> targetOperations=UtilGenerics.checkList(context.get("targetOperationList"));  List<String> contentTypes=UtilGenerics.checkList(context.get("contentTypeList"));  List<GenericValue> contentList=null;  try {    contentList=ContentWorker.getAssociatedContent(currentContent,toFrom,assocTypes,contentTypes,fromDate,thruDate);  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentAssocRetrievingError",UtilMisc.toMap("errorString",e.toString()),locale));  }  if (UtilValidate.isEmpty(targetOperations)) {    results.put("contentList",contentList);    return results;  }  Map<String,Object> serviceInMap=FastMap.newInstance();  serviceInMap.put("userLogin",context.get("userLogin"));  serviceInMap.put("targetOperationList",targetOperations);  serviceInMap.put("entityOperation",context.get("entityOperation"));  List<GenericValue> permittedList=FastList.newInstance();  Map<String,Object> permResults=null;  for (  GenericValue content : contentList) {    serviceInMap.put("currentContent",content);    try {      permResults=dispatcher.runSync("checkContentPermission",serviceInMap);    } catch (    GenericServiceException e) {      Debug.logError(e,"Problem checking permissions","ContentServices");      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentPermissionNotGranted",locale));    }    String permissionStatus=(String)permResults.get("permissionStatus");    if (permissionStatus != null && permissionStatus.equalsIgnoreCase("granted")) {      permittedList.add(content);    }  }  results.put("contentList",permittedList);  return results;}  }
class C{  public boolean hasNoDragOffset(){  return mTransOffsetX <= 0 && mTransOffsetY <= 0 ? true : false;}  }
class C{  public TextEditor indent(int spaces){  StringBuilder sb=new StringBuilder(spaces);  for (int i=0; i < spaces; i++) {    sb.append(' ');  }  return replaceAll("^",sb.toString());}  }
class C{  public Matrix4x3f translationRotateTowards(float posX,float posY,float posZ,float dirX,float dirY,float dirZ,float upX,float upY,float upZ){  float invDirLength=1.0f / (float)Math.sqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);  float ndirX=dirX * invDirLength;  float ndirY=dirY * invDirLength;  float ndirZ=dirZ * invDirLength;  float leftX, leftY, leftZ;  leftX=upY * ndirZ - upZ * ndirY;  leftY=upZ * ndirX - upX * ndirZ;  leftZ=upX * ndirY - upY * ndirX;  float invLeftLength=1.0f / (float)Math.sqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);  leftX*=invLeftLength;  leftY*=invLeftLength;  leftZ*=invLeftLength;  float upnX=ndirY * leftZ - ndirZ * leftY;  float upnY=ndirZ * leftX - ndirX * leftZ;  float upnZ=ndirX * leftY - ndirY * leftX;  this.m00=leftX;  this.m01=leftY;  this.m02=leftZ;  this.m10=upnX;  this.m11=upnY;  this.m12=upnZ;  this.m20=ndirX;  this.m21=ndirY;  this.m22=ndirZ;  this.m30=posX;  this.m31=posY;  this.m32=posZ;  properties=0;  return this;}  }
class C{  public S2LatLng add(final S2LatLng o){  return new S2LatLng(latRadians + o.latRadians,lngRadians + o.lngRadians);}  }
class C{  final public SyntaxTreeNode SetExcept() throws ParseException {  SyntaxTreeNode tn;  Token t;  bpa("Set Except");  t=jj_consume_token(LWB);  addHeir(new SyntaxTreeNode(mn,t));  tn=Expression();  addHeir(tn);  t=jj_consume_token(EXCEPT);  addHeir(new SyntaxTreeNode(mn,t));  tn=SExceptSpec();  addHeir(tn);  label_42:   while (true) {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case COMMA:      ;    break;default :  jj_la1[117]=jj_gen;break label_42;}t=jj_consume_token(COMMA);addHeir(new SyntaxTreeNode(mn,t));tn=SExceptSpec();addHeir(tn);}t=jj_consume_token(RWB);addHeir(new SyntaxTreeNode(mn,t));SyntaxTreeNode sn[]=getLastHeirs();epa();{if (true) return new SyntaxTreeNode(mn,N_SetExcept,sn);}throw new Error("Missing return statement in function");}  }
class C{  @Override public void resize(long newSize){  final int numPages=numPages(newSize);  if (numPages > pages.length) {    pages=Arrays.copyOf(pages,ArrayUtil.oversize(numPages,RamUsageEstimator.NUM_BYTES_OBJECT_REF));  }  for (int i=numPages - 1; i >= 0 && pages[i] == null; --i) {    pages[i]=newLongPage(i);  }  for (int i=numPages; i < pages.length && pages[i] != null; ++i) {    pages[i]=null;    releasePage(i);  }  this.size=newSize;}  }
class C{  private void init(Context context,AttributeSet attrs,int defStyle){  LayoutInflater.from(getContext()).inflate(R.layout.likeview,this,true);  icon=(ImageView)findViewById(R.id.icon);  dotsView=(DotsView)findViewById(R.id.dots);  circleView=(CircleView)findViewById(R.id.circle);  final TypedArray array=context.obtainStyledAttributes(attrs,R.styleable.LikeButton,defStyle,0);  iconSize=array.getDimensionPixelSize(R.styleable.LikeButton_icon_size,-1);  if (iconSize == -1)   iconSize=40;  String iconType=array.getString(R.styleable.LikeButton_icon_type);  likeDrawable=array.getDrawable(R.styleable.LikeButton_like_drawable);  if (likeDrawable != null)   setLikeDrawable(likeDrawable);  unLikeDrawable=array.getDrawable(R.styleable.LikeButton_unlike_drawable);  if (unLikeDrawable != null)   setUnlikeDrawable(unLikeDrawable);  if (iconType != null)   if (!iconType.isEmpty())   currentIcon=parseIconType(iconType);  circleStartColor=array.getColor(R.styleable.LikeButton_circle_start_color,0);  if (circleStartColor != 0)   circleView.setStartColor(circleStartColor);  circleEndColor=array.getColor(R.styleable.LikeButton_circle_end_color,0);  if (circleEndColor != 0)   circleView.setEndColor(circleEndColor);  dotPrimaryColor=array.getColor(R.styleable.LikeButton_dots_primary_color,0);  dotSecondaryColor=array.getColor(R.styleable.LikeButton_dots_secondary_color,0);  if (dotPrimaryColor != 0 && dotSecondaryColor != 0) {    dotsView.setColors(dotPrimaryColor,dotSecondaryColor);  }  if (likeDrawable == null && unLikeDrawable == null) {    if (currentIcon != null) {      setLikeDrawableRes(currentIcon.getOnIconResourceId());      setUnlikeDrawableRes(currentIcon.getOffIconResourceId());    } else {      currentIcon=parseIconType(IconType.Heart);      setLikeDrawableRes(currentIcon.getOnIconResourceId());      setUnlikeDrawableRes(currentIcon.getOffIconResourceId());    }  }  setEnabled(array.getBoolean(R.styleable.LikeButton_enabled,true));  Boolean status=array.getBoolean(R.styleable.LikeButton_liked,false);  setAnimationScaleFactor(array.getFloat(R.styleable.LikeButton_anim_scale_factor,3));  setLiked(status);  setOnClickListener(this);  array.recycle();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void addFirst(StatementSequence statements){  if (statements != null) {    sequence.addAll(0,statements.sequence);  }}  }
class C{  public synchronized final int evictionCount(){  return evictionCount;}  }
class C{  public static final int random(final int pMin,final int pMax){  return pMin + MathUtils.RANDOM.nextInt((pMax - pMin) + 1);}  }
class C{  public boolean isAnnotationPresent(Class annotationType){  return false;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name_1: ");  result.append(name_1);  result.append(", index_1: ");  result.append(index_1);  result.append(')');  return result.toString();}  }
class C{  public static boolean isValidAuthType(String authType){  log.debug("isValidAuthType");  if (authType != null) {    if (!authType.isEmpty()) {      if (authType.equalsIgnoreCase(LdapAuthBase.LDAP_AUTH_TYPE_SIMPLE))       return true;      if (authType.equalsIgnoreCase(LdapAuthBase.LDAP_AUTH_TYPE_NONE))       return true;    }  }  return false;}  }
class C{  public static Long convertToGB(long volumeSize){  Double doubleVolSize=(double)volumeSize;  Double sizeInGB=(double)(doubleVolSize / (CinderConstants.BYTES_TO_GB));  long cinderCapacity=(long)Math.ceil(sizeInGB);  return cinderCapacity;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:23.610 -0400",hash_original_method="676C0A638DA8EF39748E2163ADEF98DA",hash_generated_method="C632400BF56BB1F2E34FC2D1096C579B") public V remove(Object key){  int index=key == null ? indexOfNull() : indexOf(key,key.hashCode());  if (index >= 0) {    return removeAt(index);  }  return null;}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public static String bytesToBinHex(byte[] data){  return bytesToBinHex(data,0,data.length);}  }
class C{  public static void inform(final String title,final String text){  inform(null,title,text);}  }
class C{  public static void link(final OperandExpression parent,final OperandExpression child){  Preconditions.checkNotNull(parent,"Error: Parent argument can't be null");  Preconditions.checkNotNull(child,"Error: Child argument can't be null");  parent.m_children.add(child);  child.m_parent=parent;}  }
class C{  public static byte[] hexStringToBytes(String hexString){  byte[] data=new byte[hexString.length() / 2];  for (int i=0; i < data.length; i++) {    String a=hexString.substring(i * 2,i * 2 + 2);    data[i]=(byte)Integer.parseInt(a,16);  }  return data;}  }
class C{  public Tasks<VolumeRestRep> syncContinuousCopies(URI id,CopiesParam input){  return postTasks(input,getContinuousCopiesUrl() + "/sync",id);}  }
class C{  public void tagDefineQuickTimeMovie(int id,String filename) throws IOException {  startTag(TAG_DEFINEQUICKTIMEMOVIE,id,true);  out.writeString(filename);  completeTag();}  }
class C{  private List<Volume> prepareFullCopyHAVolumes(String name,int copyCount,Long size,StorageSystem vplexSystem,Project vplexSystemProject,VirtualArray srcVarray,Volume srcHAVolume,String taskId,List<VolumeDescriptor> volumeDescriptors){  List<Volume> copyHAVolumes=new ArrayList<>();  Set<URI> vplexSystemURIS=new HashSet<>();  vplexSystemURIS.add(vplexSystem.getId());  VirtualArray haVarray=_dbClient.queryObject(VirtualArray.class,srcHAVolume.getVirtualArray());  VirtualPool haVpool=_dbClient.queryObject(VirtualPool.class,srcHAVolume.getVirtualPool());  VirtualPoolCapabilityValuesWrapper haCapabilities=new VirtualPoolCapabilityValuesWrapper();  haCapabilities.put(VirtualPoolCapabilityValuesWrapper.SIZE,size);  haCapabilities.put(VirtualPoolCapabilityValuesWrapper.RESOURCE_COUNT,copyCount);  VirtualPool vpool=BlockFullCopyUtils.queryFullCopySourceVPool(srcHAVolume,_dbClient);  if (VirtualPool.ProvisioningType.Thin.toString().equalsIgnoreCase(vpool.getSupportedProvisioningType())) {    haCapabilities.put(VirtualPoolCapabilityValuesWrapper.THIN_PROVISIONING,Boolean.TRUE);    haCapabilities.put(VirtualPoolCapabilityValuesWrapper.THIN_VOLUME_PRE_ALLOCATE_SIZE,BlockFullCopyUtils.getAllocatedCapacityForFullCopySource(srcHAVolume,_dbClient));  }  List<Recommendation> recommendations=((VPlexScheduler)_scheduler).scheduleStorageForImport(srcVarray,vplexSystemURIS,haVarray,haVpool,haCapabilities);  if (recommendations.isEmpty()) {    throw APIException.badRequests.noStorageForHaVolumesForVplexVolumeCopies();  }  int copyIndex=1;  for (  Recommendation recommendation : recommendations) {    VPlexRecommendation haRecommendation=(VPlexRecommendation)recommendation;    for (int i=0; i < haRecommendation.getResourceCount(); i++) {      StringBuilder nameBuilder=new StringBuilder(name);      nameBuilder.append("-1");      if (copyCount > 1) {        nameBuilder.append("-");        nameBuilder.append(copyIndex++);      }      Volume volume=VPlexBlockServiceApiImpl.prepareVolumeForRequest(size,vplexSystemProject,haVarray,haVpool,haRecommendation.getSourceStorageSystem(),haRecommendation.getSourceStoragePool(),nameBuilder.toString(),null,taskId,_dbClient);      volume.addInternalFlags(Flag.INTERNAL_OBJECT);      _dbClient.persistObject(volume);      copyHAVolumes.add(volume);      VolumeDescriptor volumeDescriptor=new VolumeDescriptor(VolumeDescriptor.Type.BLOCK_DATA,volume.getStorageController(),volume.getId(),volume.getPool(),haCapabilities);      volumeDescriptors.add(volumeDescriptor);    }  }  return copyHAVolumes;}  }
class C{  public void sort(Comparator<T> sortFunction){  if (values instanceof List) {    ((List<T>)values).sort(sortFunction);  } else {    ArrayList<T> sortedList=new ArrayList<>(values);    sortedList.sort(sortFunction);    values.clear();    values.addAll(sortedList);  }}  }
class C{  @Path("add") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) public CLIOutputResponse add(final AddRequest request) throws ApiException, IOException {  request.setProjectPath(getAbsoluteProjectPath(request.getProjectPath()));  return this.subversionApi.add(request);}  }
class C{  public CacheSet queryConjunction(Predicate... selectors){  return query(new ConjunctionPredicate(selectors));}  }
class C{  public HttpMethodClient(){  this(5000,10000,3 * 60000);}  }
class C{  public void and() throws IOException {  print("and",null);}  }
class C{  public static BufferedImage createCompatibleImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height);}  }
class C{  public static Validator<CharSequence> regex(@NonNull final Context context,@StringRes final int resourceId,@NonNull final Pattern regex){  return new RegexValidator(context,resourceId,regex);}  }
class C{  public static void globalClassesAbsent(Class<?> aClass){  throw new MappingErrorException(MSG.INSTANCE.message(mappingErrorRelationalException3,aClass.getSimpleName()));}  }
class C{  public void show(){  show(false,null);}  }
class C{  public ActivityChooserView(Context context){  this(context,null);}  }
class C{  protected Document createDefaultModel(){  return new RSyntaxDocument(SYNTAX_STYLE_NONE);}  }
class C{  public XMLSignature(Document doc,String baseURI,Element SignatureMethodElem,Element CanonicalizationMethodElem) throws XMLSecurityException {  super(doc);  String xmlnsDsPrefix=getDefaultPrefix(Constants.SignatureSpecNS);  if (xmlnsDsPrefix == null || xmlnsDsPrefix.length() == 0) {    this.constructionElement.setAttributeNS(Constants.NamespaceSpecNS,"xmlns",Constants.SignatureSpecNS);  } else {    this.constructionElement.setAttributeNS(Constants.NamespaceSpecNS,"xmlns:" + xmlnsDsPrefix,Constants.SignatureSpecNS);  }  XMLUtils.addReturnToElement(this.constructionElement);  this.baseURI=baseURI;  this.signedInfo=new SignedInfo(this.doc,SignatureMethodElem,CanonicalizationMethodElem);  this.constructionElement.appendChild(this.signedInfo.getElement());  XMLUtils.addReturnToElement(this.constructionElement);  signatureValueElement=XMLUtils.createElementInSignatureSpace(this.doc,Constants._TAG_SIGNATUREVALUE);  this.constructionElement.appendChild(signatureValueElement);  XMLUtils.addReturnToElement(this.constructionElement);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:04.430 -0500",hash_original_method="895DA247F3EA500D4E298433EB0DC81A",hash_generated_method="895DA247F3EA500D4E298433EB0DC81A") TFTPRequestPacket(InetAddress destination,int port,int type,String filename,int mode){  super(type,destination,port);  _filename=filename;  _mode=mode;}  }
class C{  public boolean executeCommand(BufferedReader reader){  for (  String s : COMMAND_HELP_MESSAGE) {    out.println(s);  }  System.err.print("Command: ");  try {    String command=reader.readLine();    String[] parts=command.trim().split(" ",2);    String name=parts[0];    String parameters=parts.length > 1 ? parts[1] : "";    if (name.equals("add")) {      addNewEntry(parameters);    } else     if (name.equals("load")) {      loadSheet(reader);    } else     if (name.equals("list")) {      listAllEntries();    } else     if (name.equals("search")) {      search(parameters);    } else     if (name.equals("delete")) {      delete(parameters);    } else     if (name.equals("update")) {      String[] split=parameters.split(" ",2);      if (split.length < 2) {        out.println("insufficient number of params for update.");      }      update(split[0],split[1]);    } else     if (name.startsWith("q") || name.startsWith("exit")) {      return false;    } else {      out.println("Unknown command.");    }  } catch (  ServiceException se) {    se.printStackTrace();  }catch (  IOException ioe) {    ioe.printStackTrace();  }  return true;}  }
class C{  public static void addNeededHiddenField(FacesContext context,String clientId){  Map map=getHiddenFieldMap(context,true);  if (!map.containsKey(clientId)) {    map.put(clientId,Boolean.TRUE);  }}  }
class C{  public void testMinEqual(){  byte aBytes[]={45,91,3,-15,35,26,3,91};  byte bBytes[]={45,91,3,-15,35,26,3,91};  int aSign=1;  int bSign=1;  byte rBytes[]={45,91,3,-15,35,26,3,91};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.min(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertTrue("incorrect sign",result.signum() == 1);}  }
class C{  @Override protected Appender<ILoggingEvent> createAppender(LoggerContext context,Encoder<ILoggingEvent> encoder){  ConsoleAppender<ILoggingEvent> appender=new ConsoleAppender<ILoggingEvent>();  appender.setEncoder(encoder);  return appender;}  }
class C{  public GenericObjectEditorDialog(Frame owner,boolean modal){  super(owner,modal);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.DEBUG___DEBUG_1:    return isDebug_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.982 -0400",hash_original_method="14229043FF7E6DA90FB3DBFED2A622C0",hash_generated_method="C79FA1001550868C2AE9DDDD308C961F") private void checkAndNotify(FileEntry parent,FileEntry[] previous,File[] files){  int c=0;  FileEntry[] current=files.length > 0 ? new FileEntry[files.length] : FileEntry.EMPTY_ENTRIES;  for (  FileEntry entry : previous) {    while (c < files.length && comparator.compare(entry.getFile(),files[c]) > 0) {      current[c]=createFileEntry(parent,files[c]);      doCreate(current[c]);      c++;    }    if (c < files.length && comparator.compare(entry.getFile(),files[c]) == 0) {      doMatch(entry,files[c]);      checkAndNotify(entry,entry.getChildren(),listFiles(files[c]));      current[c]=entry;      c++;    } else {      checkAndNotify(entry,entry.getChildren(),FileUtils.EMPTY_FILE_ARRAY);      doDelete(entry);    }  }  for (; c < files.length; c++) {    current[c]=createFileEntry(parent,files[c]);    doCreate(current[c]);  }  parent.setChildren(current);}  }
class C{  public SnapshotsStatusRequestBuilder(ElasticsearchClient client,SnapshotsStatusAction action){  super(client,action,new SnapshotsStatusRequest());}  }
class C{  private void addIndex(Index<K,V> idx,HeadIndex<K,V> h,int indexLevel){  int insertionLevel=indexLevel;  Comparable<? super K> key=comparable(idx.node.key);  if (key == null)   throw new NullPointerException();  for (; ; ) {    int j=h.level;    Index<K,V> q=h;    Index<K,V> r=q.right;    Index<K,V> t=idx;    for (; ; ) {      if (r != null) {        Node<K,V> n=r.node;        int c=key.compareTo(n.key);        if (n.value == null) {          if (!q.unlink(r))           break;          r=q.right;          continue;        }        if (c > 0) {          q=r;          r=r.right;          continue;        }      }      if (j == insertionLevel) {        if (t.indexesDeletedNode()) {          findNode(key);          return;        }        if (!q.link(r,t))         break;        if (--insertionLevel == 0) {          if (t.indexesDeletedNode())           findNode(key);          return;        }      }      if (--j >= insertionLevel && j < indexLevel)       t=t.down;      q=q.down;      r=q.right;    }  }}  }
class C{  public WhitenedZCA(double regularization,int dims){  setRegularization(regularization);  setDimensions(dims);}  }
class C{  public static void write32bit(int value,byte[] code,int index){  code[index]=(byte)(value >>> 24);  code[index + 1]=(byte)(value >>> 16);  code[index + 2]=(byte)(value >>> 8);  code[index + 3]=(byte)value;}  }
class C{  private void checkFileReopening(FileObject fileObject,boolean addToHistory) throws FilerException {  for (  FileObject veteran : fileObjectHistory) {    if (fileManager.isSameFile(veteran,fileObject)) {      if (lint)       log.warning("proc.file.reopening",fileObject.getName());      throw new FilerException("Attempt to reopen a file for path " + fileObject.getName());    }  }  if (addToHistory)   fileObjectHistory.add(fileObject);}  }
class C{  public final void init(Key key) throws InvalidKeyException {  try {    if (spi != null) {      spi.engineInit(key,null);    } else {      chooseProvider(key,null);    }  } catch (  InvalidAlgorithmParameterException e) {    throw new InvalidKeyException("init() failed",e);  }  initialized=true;  if (!skipDebug && pdebug != null) {    pdebug.println("Mac." + algorithm + " algorithm from: "+ this.provider.getName());  }}  }
class C{  public int isPositionIlluminated(Coords c){  for (  Flare flare : flares) {    if (flare.illuminates(c)) {      return ILLUMINATED_FLARE;    }  }  IHex hex=getBoard().getHex(c);  if (illuminatedPositions.contains(c)) {    return ILLUMINATED_LIGHT;  }  if (hex != null && hex.containsTerrain(Terrains.FIRE)) {    return ILLUMINATED_FIRE;  }  for (int dir=0; dir < 6; dir++) {    Coords adj=c.translated(dir);    hex=getBoard().getHex(adj);    if (hex != null && hex.containsTerrain(Terrains.FIRE)) {      return ILLUMINATED_FIRE;    }  }  return ILLUMINATED_NONE;}  }
class C{  public SQLTransientConnectionException(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  public static <X,Y>List<Pair<X,Y>> fromMap(Map<X,Y> m){  List<Pair<X,Y>> l=new ArrayList<>();  for (  Map.Entry<X,Y> me : m.entrySet()) {    l.add(Pair.cons(me.getKey(),me.getValue()));  }  return l;}  }
class C{  private List<Node> possibleParents(Node node,List<Node> adjNode){  List<Node> possibleParents=new LinkedList<>();  String _x=node.getName();  for (  Node z : adjNode) {    String _z=z.getName();    if (possibleParentOf(_z,_x,knowledge)) {      possibleParents.add(z);    }  }  return possibleParents;}  }
class C{  @Override public void rateIndividuals(String filename,String outputFolder){  Map<String,Integer[]> personMap=new TreeMap<String,Integer[]>();  LOG.info("Processing records for person-specific scoring...");  LOG.info("Weights used:");  LOG.info("  \\_ acceleration: " + this.getAccelWeight());  LOG.info("  \\_ speed: " + this.getSpeedWeight());  Counter counter=new Counter("   lines # ");  BufferedReader br=IOUtils.getBufferedReader(filename);  try {    String line=null;    while ((line=br.readLine()) != null && counter.getCounter() < maxLines) {      String[] sa=line.split(",");      String id=sa[1];      if (!personMap.containsKey(id)) {        Integer[] ia={0,0,0,0};        personMap.put(id,ia);      }      Integer[] thisArray=personMap.get(id);      RISK_GROUP risk=getRiskGroup(line);      int index;switch (risk) {case NONE:        index=0;      break;case LOW:    index=1;  break;case MEDIUM:index=2;break;case HIGH:index=3;break;default :throw new RuntimeException("Don't know where to get risk values for " + risk.toString());}int oldCount=thisArray[index];thisArray[index]=oldCount + 1;counter.incCounter();}} catch (IOException e) {e.printStackTrace();throw new RuntimeException("Cannot read from " + filename);} finally {try {br.close();} catch (IOException e) {e.printStackTrace();throw new RuntimeException("Cannot close " + filename);}}counter.printCounter();LOG.info("Done processing records. Unique persons identified: " + personMap.size());String outputFilename=outputFolder + (outputFolder.endsWith("/") ? "" : "/") + "riskClassCountsPerPerson.csv";LOG.info("Writing the per-person risk classes counts to " + outputFilename);BufferedWriter bw=IOUtils.getBufferedWriter(outputFilename);try {bw.write("id,none,low,medium,high");bw.newLine();for (String id : personMap.keySet()) {Integer[] thisArray=personMap.get(id);bw.write(String.format("%s,%d,%d,%d,%d\n",id,thisArray[0],thisArray[1],thisArray[2],thisArray[3]));if (thisArray[1] + thisArray[2] + thisArray[3] == 0 && noRiskWarningCount < 10) {LOG.warn("No risk customer: " + id);noRiskWarningCount++;if (noRiskWarningCount == 10) {LOG.warn("Future occurences of this warning will be surpressed.");}}}} catch (IOException e) {e.printStackTrace();throw new RuntimeException("Cannot write to " + outputFilename);} finally {try {bw.close();} catch (IOException e) {e.printStackTrace();throw new RuntimeException("Cannot close " + outputFilename);}}LOG.info("Done writing the per-person risk classes counts.");}  }
class C{  public synchronized void deleteMember(final TypeMember member) throws CouldntDeleteException, CouldntSaveDataException {  Preconditions.checkNotNull(member,"IE02785: Member can not be null.");  backend.deleteMember(member);  final BaseType containingType=member.getParentType();  boolean sizeChanged=member == containingType.getLastMember();  final ImmutableMap<BaseType,Integer> originalTypeSizes=(sizeChanged) ? captureTypeSizesState(typesContainer.getAffectedTypes(containingType)) : ImmutableMap.<BaseType,Integer>of();  final ImmutableSet<BaseType> affectedTypes=typesContainer.deleteTypeMember(member);  notifySubstitutionsChanged(affectedTypes);  notifyTypesUpdated(affectedTypes);  notifyMemberDeleted(member);  if (sizeChanged) {    ensureConsistencyAfterTypeUpdate(affectedTypes,Sets.newHashSet(affectedTypes),originalTypeSizes);  }}  }
class C{  @Override public String graph() throws Exception {  StringBuffer text=new StringBuffer();  text.append("digraph J48Tree {\n");  if (m_isLeaf) {    text.append("N" + m_id + " [label=\""+ "NB model"+ "\" "+ "shape=box style=filled ");    if (m_train != null && m_train.numInstances() > 0) {      text.append("data =\n" + m_train + "\n");      text.append(",\n");    }    text.append("]\n");  } else {    text.append("N" + m_id + " [label=\""+ Utils.backQuoteChars(m_localModel.leftSide(m_train))+ "\" ");    if (m_train != null && m_train.numInstances() > 0) {      text.append("data =\n" + m_train + "\n");      text.append(",\n");    }    text.append("]\n");    graphTree(text);  }  return text.toString() + "}\n";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:56.143 -0500",hash_original_method="8E4AD7240C251CF428BBDBBDF32B610B",hash_generated_method="2A2A56198B9E7D41956B2035F014B4D4") public int[] answerSubnegotiation(int suboptionData[],int suboptionLength){  return null;}  }
class C{  static void performTwoKeys(File keys2) throws java.io.FileNotFoundException {  keyWords=loadStringArray(keys2);  SpecialHashKeys2 sp=new SpecialHashKeys2();  trial_specialBuild(sp);  trial_search(sp,641);  GPerfTwo gperf=new GPerfTwo();  trial_search(gperf,641);  trial_JDK(641,11);  trial_JDK(641,keyWords.length * 4);  trial_JDK(641,4413);  BalancedTreeSearch treeCollection=tree_build();  trial_search(treeCollection,641);  LinearProbe probe=new LinearProbe(4413,1);  HashbasedSearch<String> keysLP=trial_build(4413,probe);  trial_search(keysLP,641);  QuadraticProbe quadProbe=new QuadraticProbe(4413,0.5f,0.5f);  QuadraticProbe quadProbe2=new QuadraticProbe(4413,1,1);  HashbasedSearch<String> keysQP=trial_build(4413,quadProbe);  trial_search(keysQP,641);  keysQP=trial_build(4413,quadProbe2);  trial_search(keysQP,641);  float mult=15;  for (int i=0; i < 10; i++) {    int size=(int)(keyWords.length * mult);    LinearProbe lp=new LinearProbe(size,1);    HashbasedSearch<String> st=trial_build(size,lp);    trial_search(st,641);    quadProbe=new QuadraticProbe(size,0.5f,0.5f);    quadProbe2=new QuadraticProbe(size,1,1);    try {      keysQP=trial_build(size,quadProbe);      trial_search(keysQP,641);      keysQP=trial_build(size,quadProbe2);      trial_search(keysQP,641);    } catch (    RuntimeException re) {      System.err.println(re.getMessage());    }    mult=mult - (mult - 1.0f) / 2.0f;  }  int[] bases=new int[]{641,1283,2557,5113};  for (int p=0; p < bases.length; p++) {    System.out.println("Table Size:" + bases[p] + "\n");    for (int delta=1; delta < 10; delta++) {      LinearProbe lp=new LinearProbe(bases[p],delta);      trial_build(bases[p],lp);    }  }}  }
class C{  public void updateBeforeNextTask(Schedule<TaxiTask> schedule){  if (schedule.getStatus() != ScheduleStatus.STARTED) {    return;  }  double endTime=timer.getTimeOfDay();  TaxiTask currentTask=schedule.getCurrentTask();  updateTimelineImpl(schedule,endTime);  if (!params.destinationKnown) {    if (currentTask.getTaxiTaskType() == TaxiTaskType.PICKUP) {      appendOccupiedDriveAndDropoff(schedule);      appendTasksAfterDropoff(schedule);    }  }}  }
class C{  public boolean isForcedWithdrawal(){  return forcedWithdrawal;}  }
class C{  public int next(){  int node=_currentNode;  final int nodeType=_nodeType;  final int startNodeID=_startNodeID;  if (nodeType != DTM.ELEMENT_NODE) {    while (node != NULL && node != startNodeID && _exptype2(node) != nodeType) {      node=_nextsib2(node);    }  } else {    while (node != NULL && node != startNodeID && _exptype2(node) < DTM.NTYPES) {      node=_nextsib2(node);    }  }  if (node == DTM.NULL || node == startNodeID) {    _currentNode=NULL;    return NULL;  } else {    _currentNode=_nextsib2(node);    return returnNode(makeNodeHandle(node));  }}  }
class C{  private Resource packIcon(int dpi,Bitmap icon){  Resource res=new Resource();  res.dpi=dpi;  res.data=Utilities.flattenBitmap(icon);  return res;}  }
class C{  private boolean addVolumesToCG(StorageSystem vplexSystem,BlockConsistencyGroup cg,Collection<Volume> vplexVolumes,String stepId){  try {    VPlexApiClient client=getVPlexAPIClient(vplexApiFactory,vplexSystem,dbClient);    Volume protoVolume=null;    List<String> vplexVolumeNames=new ArrayList<String>();    for (    Volume vplexVolume : vplexVolumes) {      if (protoVolume == null) {        protoVolume=vplexVolume;      }      vplexVolumeNames.add(vplexVolume.getDeviceLabel());      log.info("VPLEX volume:" + vplexVolume.getDeviceLabel());    }    log.info("Got VPLEX volume names.");    String cgName=getVplexCgName(protoVolume,cg.getId());    long startTime=System.currentTimeMillis();    client.addVolumesToConsistencyGroup(cgName,vplexVolumeNames);    long elapsed=System.currentTimeMillis() - startTime;    log.info(String.format("TIMER: Adding %s virtual volume(s) %s to the consistency group %s took %f seconds",vplexVolumeNames.size(),vplexVolumeNames,cgName,(double)elapsed / (double)1000));    for (    Volume vplexVolume : vplexVolumes) {      vplexVolume.setConsistencyGroup(cg.getId());      dbClient.updateObject(vplexVolume);    }    WorkflowStepCompleter.stepSucceded(stepId);    log.info("Updated workflow step state to success for add volumes to consistency group.");    return true;  } catch (  VPlexApiException vae) {    log.error("Exception adding volumes to consistency group: " + vae.getMessage(),vae);    WorkflowStepCompleter.stepFailed(stepId,vae);    return false;  }catch (  Exception ex) {    log.error("Exception adding volumes to consistency group: " + ex.getMessage(),ex);    ServiceError svcError=VPlexApiException.errors.jobFailed(ex);    WorkflowStepCompleter.stepFailed(stepId,svcError);    return false;  }}  }
class C{  public void reset(){  for (int i=0; i < count; i++) {    buffer[i]=null;  }  count=0;  ndocs=0;  nfields=0;  nterms=0;  lastDocId=null;  lastFieldId=-1;}  }
class C{  public static List<SearchResult> search(final NaviEdge edge,final String searchString,final boolean regEx,final boolean caseSensitive){  if (edge.getRealizerLabelCount() != 1) {    return new ArrayList<SearchResult>();  }  return CElementSearcher.search(edge,edge.getLabelContent(),searchString,regEx,caseSensitive);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"cmpxchg");  Preconditions.checkArgument(instruction.getOperands().size() == 2,"Error: Argument instruction is not a cmp instruction (invalid number of operands)");  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final IOperandTree targetOperand=operands.get(0);  final IOperandTree sourceOperand=operands.get(1);  final TranslationResult targetResult=Helpers.translateOperand(environment,offset,targetOperand,true);  instructions.addAll(targetResult.getInstructions());  offset=baseOffset + instructions.size();  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,sourceOperand,true);  instructions.addAll(sourceResult.getInstructions());  offset=baseOffset + instructions.size();  String xaxRegister;switch (targetResult.getSize()) {case BYTE:    xaxRegister="al";  break;case WORD:xaxRegister="ax";break;case DWORD:xaxRegister="eax";break;default :throw new InternalTranslationException("Error: The first operand has to be BYTE/WORD/DWORD !");}String comparisonResult=environment.getNextVariableString();OperandSize currentSize=targetResult.getSize();instructions.add(ReilHelpers.createSub(baseOffset + instructions.size(),currentSize,xaxRegister,currentSize,targetResult.getRegister(),currentSize,comparisonResult));instructions.add(ReilHelpers.createBisz(baseOffset + instructions.size(),currentSize,comparisonResult,OperandSize.BYTE,Helpers.ZERO_FLAG));final List<ReilInstruction> firstWriteBack=new ArrayList<ReilInstruction>();Helpers.writeBack(environment,baseOffset + instructions.size() + 1,targetOperand,sourceResult.getRegister(),sourceResult.getSize(),targetResult.getAddress(),targetResult.getType(),firstWriteBack);final long secondWriteBackOffset=instructions.size() + firstWriteBack.size() + 3;final String secondWriteBackGoal=String.format("%d.%d",instruction.getAddress().toLong(),secondWriteBackOffset);instructions.add(ReilHelpers.createJcc(baseOffset + instructions.size(),currentSize,comparisonResult,OperandSize.ADDRESS,secondWriteBackGoal));instructions.addAll(firstWriteBack);ReilOperandNode xAXOperandRoot=new ReilOperandNode(currentSize.toSizeString(),ExpressionType.SIZE_PREFIX);ReilOperandNode xAXOperandLeaf=new ReilOperandNode(xaxRegister,ExpressionType.REGISTER);ReilOperandNode.link(xAXOperandRoot,xAXOperandLeaf);ReilOperand xAXOperand=new ReilOperand(xAXOperandRoot);final List<ReilInstruction> secondWriteBack=new ArrayList<ReilInstruction>();Helpers.writeBack(environment,baseOffset + instructions.size() + 1,xAXOperand,targetResult.getRegister(),currentSize,null,TranslationResultType.REGISTER,secondWriteBack);final long terminatingNopOffset=instructions.size() + secondWriteBack.size() + 2;final String terminatingNopGoal=String.format("%d.%d",instruction.getAddress().toLong(),terminatingNopOffset);instructions.add(ReilHelpers.createJcc(baseOffset + instructions.size(),OperandSize.BYTE,"1",OperandSize.ADDRESS,terminatingNopGoal));instructions.addAll(secondWriteBack);instructions.add(ReilHelpers.createNop(baseOffset + instructions.size()));}  }
class C{  public TcpHarvester(int port) throws IOException {  super(port);  this.ssltcp=false;}  }
class C{  public static Container encloseXNoGrow(Component... cmps){  return Container.encloseIn(new BoxLayout(BoxLayout.X_AXIS_NO_GROW),cmps);}  }
class C{  public boolean isBigEndian(){  return isBigEndian;}  }
class C{  public String put(String s,String v){  if (current.pushCount != 0) {    current.pushCount--;    current=new Link(current);  }  if (s.length() == 0)   current.defaultStr=v;  return (String)current.table.put(s,v);}  }
class C{  private void skipWhitespace(){  matcher.usePattern(WHITESPACE);  if (matcher.lookingAt()) {    matcher.region(matcher.end(),matcher.regionEnd());  }}  }
class C{  public JSONArray optJSONArray(int index){  Object o=this.opt(index);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  @Override public List<NamedRelatedResourceRep> list(){  ComputeImageServerList response=client.get(ComputeImageServerList.class,baseUrl);  return ResourceUtils.defaultList(response.getComputeImageServers());}  }
class C{  public void dataSourceRemoved(int index){  update();  updateCoordinateProjectionComboBoxes();}  }
class C{  public static byte[] splitUint8To2bytes(char uint8){  if (uint8 < 0 || uint8 > 0xff) {    throw new RuntimeException("Out of Boundary");  }  String hexString=Integer.toHexString(uint8);  byte low;  byte high;  if (hexString.length() > 1) {    high=(byte)Integer.parseInt(hexString.substring(0,1),16);    low=(byte)Integer.parseInt(hexString.substring(1,2),16);  } else {    high=0;    low=(byte)Integer.parseInt(hexString.substring(0,1),16);  }  byte[] result=new byte[]{high,low};  return result;}  }
class C{  public boolean process(){  if (!save())   return false;  if (getM_Product_ID() == 0) {    log.log(Level.SEVERE,"No Product");    return false;  }  MProduct product=MProduct.get(getCtx(),getM_Product_ID());  if (!product.isStocked()) {    setProcessed(true);    return save();  }  MTransaction mTrx=new MTransaction(getCtx(),getAD_Org_ID(),MTransaction.MOVEMENTTYPE_WorkOrderPlus,getM_Locator_ID(),getM_Product_ID(),getM_AttributeSetInstance_ID(),getMovementQty().negate(),getMovementDate(),get_TrxName());  mTrx.setC_ProjectIssue_ID(getC_ProjectIssue_ID());  MLocator loc=MLocator.get(getCtx(),getM_Locator_ID());  if (MStorage.add(getCtx(),loc.getM_Warehouse_ID(),getM_Locator_ID(),getM_Product_ID(),getM_AttributeSetInstance_ID(),getM_AttributeSetInstance_ID(),getMovementQty().negate(),null,null,get_TrxName())) {    if (mTrx.save(get_TrxName())) {      setProcessed(true);      if (save())       return true; else       log.log(Level.SEVERE,"Issue not saved");    } else     log.log(Level.SEVERE,"Transaction not saved");  } else   log.log(Level.SEVERE,"Storage not updated");  return false;}  }
class C{  public void register2(String name,Type arg1,Type arg2,InvocationPlugin plugin){  plugins.register(plugin,false,allowOverwrite,declaringType,name,arg1,arg2);}  }
class C{  public TransferTransactionAttachment(final Message message){  this.setMessage(message);}  }
class C{  public static boolean putInt(Context context,String key,int value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putInt(key,value);  return editor.commit();}  }
class C{  public void testEqual(){  m_Filter=getFilter("ATT2 = 4");  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(1,result.numInstances());}  }
class C{  public void initialise(double kernelWidth){  this.kernelWidth=kernelWidth;  svke.initialise(kernelWidth);}  }
class C{  @SuppressWarnings("unchecked") public static org.oscm.vo.VOTriggerProcessParameter convertToApi(org.oscm.internal.vo.VOTriggerProcessParameter oldVO) throws OperationNotPermittedException {  if (oldVO == null) {    return null;  }  ConversionStrategy<Object,String> strategy=TPPConversionStrategyFactory.getStrategy(oldVO.getType());  org.oscm.vo.VOTriggerProcessParameter newVO=new org.oscm.vo.VOTriggerProcessParameter();  newVO.setType(EnumConverter.convert(oldVO.getType(),TriggerProcessParameterType.class));  newVO.setValue(strategy.convert(oldVO.getValue()));  newVO.setTriggerProcessKey(oldVO.getTriggerProcessKey());  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  return newVO;}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(suite());}  }
class C{  public FastByteBuffer(){  this.minChunkLen=1024;}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject,boolean has_required,boolean required,int order,boolean multiAllowed){  this(schema,namespace,name,nameAlias,elements,attributes,contentHandler,classObject,has_required,required);  this.m_order=order;  this.m_multiAllowed=multiAllowed;}  }
class C{  public void processInstance(CIMInstance instance){  processInstance("",instance);}  }
class C{  public NoSuchAttributeException(){  super();}  }
class C{  private void doPostHelper(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  logger.log(Level.INFO,"request: " + request.getRequestURI());  final RequestAndResponse requestAndResponse=new RequestAndResponse(request,response);  standardResponseStuff(requestAndResponse);  final String uri=request.getRequestURI();  requestAndResponse.setOverrideUri(uri);  if (uri.equals("/createQuotationJson")) {    handleJsonCreateQuotation(requestAndResponse);  } else   if (uri.equals("/makeNotebook")) {    handleHtmlMakeNotebook(requestAndResponse);  } else   if (uri.equals("/moveNotesJson")) {    handleJsonMoveNotes(requestAndResponse);  } else   if (uri.equals("/noteOpJson")) {    handleJsonNoteOp(requestAndResponse);  } else   if (uri.equals("/getNotebookPathJson")) {    handleJsonGetNotebookPath(requestAndResponse);  } else   if (uri.equals("/makeChildrenJson")) {    handleJsonMakeChildren(requestAndResponse);  } else   if (uri.equals("/makeSiblingsJson")) {    handleJsonMakeSiblings(requestAndResponse);  } else   if (uri.equals("/signIn")) {    handleJsonSignIn(requestAndResponse);  } else   if (uri.equals("/signOut")) {    handleJsonSignOut(requestAndResponse);  } else   if (uri.equals("/createAccount")) {    handleJsonCreateAccount(requestAndResponse);  } else   if (uri.startsWith("/doRestore/")) {    handleHtmlDoUserRestore(requestAndResponse);  } else   if (uri.startsWith("/doOfflineBackup/")) {    handleHtmlDoOfflineDbBackup(requestAndResponse);  } else   if (uri.startsWith("/doOnlineBackup/")) {    handleHtmlDoOnlineDbBackup(requestAndResponse);  } else   if (uri.startsWith("/doClear/")) {    handleHtmlDoClear(requestAndResponse);  } else   if (uri.startsWith("/doBackup/")) {    handleHtmlDoUserBackup(requestAndResponse);  } else   if (uri.startsWith("/doShutdown/")) {    handleHtmlDoShutdown(requestAndResponse);  } else   if (uri.startsWith("/doCheckForErrors/")) {    handleHtmlDoCheckForErrors(requestAndResponse);  } else   if (uri.startsWith("/changePassword/")) {    handleHtmlChangePassword(requestAndResponse);  } else   if (uri.startsWith("/changeAccount/")) {    handleHtmlChangeAccount(requestAndResponse);  } else   if (uri.startsWith("/closeAccount/")) {    handleHtmlCloseAccount(requestAndResponse);  } else   if (uri.equals("/saveOptions")) {    handleJsonSaveOptions(requestAndResponse);  } else   if (uri.startsWith("/doExport/")) {    handleHtmlDoExport(requestAndResponse);  } else {    returnHtml404(requestAndResponse);  }}  }
class C{  public SPA(){  this(10,PassiveAggressive.Mode.PA2);}  }
class C{  public void chainTest(boolean useInt) throws IOException {  byte[] plainText=TestUtilities.generateBytes(PLAIN_TEXT_LENGTH);  byte[] recoveredText=new byte[plainText.length];  try (MyNullCipherInputStream ciInput1=new MyNullCipherInputStream(new ByteArrayInputStream(plainText));PipedOutputStream piOut=new PipedOutputStream();MyNullCipherInputStream ciInput2=new MyNullCipherInputStream(new PipedInputStream(piOut));MyNullCipherOutputStream ciOut=new MyNullCipherOutputStream(piOut)){    if (useInt) {      int buffer=ciInput1.read();      while (buffer != -1) {        piOut.write(buffer);        buffer=ciInput1.read();      }    } else {      byte[] buffer=new byte[20];      int len=ciInput1.read(buffer);      while (len != -1) {        ciOut.write(buffer,0,len);        len=ciInput1.read(buffer);      }    }    ciOut.flush();    piOut.flush();    ciInput2.read(recoveredText);    if (ciInput2.available() > 0) {      throw new RuntimeException("Expected no data from ciInput2, but" + " ciInput2.available() = " + ciInput2.available());    }  }   if (!Arrays.equals(plainText,recoveredText)) {    throw new RuntimeException("plainText:" + new String(plainText) + " recoveredText:"+ new String(recoveredText)+ " Test failed due to result compare fail");  }}  }
class C{  public static String random(int count){  return random(count,false,false);}  }
class C{  public Y gt(X value){  return add(" > ?",value);}  }
class C{  public void put(int oldStart,int newStart,int extent,boolean temporary){  (temporary ? temp : this).put(oldStart,newStart,extent);}  }
class C{  @SuppressWarnings("unchecked") public <TX>TX[] toArray(final TX[] a){  final TX[] r=a.length >= size ? a : (TX[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),size);  int n=0;  for (int i=tail; n < size; n++) {    final T ref=refs[i];    assert ref != null;    r[n]=(TX)ref;    i=(i + 1) % capacity;  }  if (n < r.length) {    r[n]=null;  }  return r;}  }
class C{  public final CC growPrioX(int p){  hor.setGrowPriority(p);  return this;}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public Cardinal(){  if (instance != null) {    throw new IllegalStateException("The Cardinal object has already been created.");  }  instance=this;  matchThreads=Lists.newArrayList();  MatchThread matchThread=new MatchThread();  matchThreads.add(matchThread);  Bukkit.getPluginManager().callEvent(new MatchThreadMakeEvent(matchThread));  registerCommands();  registerLocales();}  }
class C{  protected void applyDarkColorTheme(String subreddit){  getTheme().applyStyle(new FontPreferences(this).getPostFontStyle().getResId(),true);  getTheme().applyStyle(new ColorPreferences(this).getDarkThemeSubreddit(subreddit),true);  getTheme().applyStyle(new FontPreferences(this).getCommentFontStyle().getResId(),true);}  }
class C{  @Override public int hashCode(){  return sessionId.hashCode();}  }
class C{  public boolean mousePressed(MouseEvent e){  Debug.message("eomg","ScalingRasterStateMachine|selected state|mousePressed");  ((EditableOMScalingRaster)graphic).initRectSize();  return super.mousePressed(e);}  }
class C{  public double rhumbDistance(Location location){  if (location == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Location","rhumbDistance","missingLocation"));  }  double lat1=Math.toRadians(this.latitude);  double lon1=Math.toRadians(this.longitude);  double lat2=Math.toRadians(location.latitude);  double lon2=Math.toRadians(location.longitude);  if (lat1 == lat2 && lon1 == lon2) {    return 0;  }  double dLat=lat2 - lat1;  double dLon=lon2 - lon1;  double q;  if (Math.abs(dLat) < NEAR_ZERO_THRESHOLD) {    q=Math.cos(lat1);  } else {    double dPhi=Math.log(Math.tan(lat2 / 2.0 + Math.PI / 4) / Math.tan(lat1 / 2.0 + Math.PI / 4));    q=dLat / dPhi;  }  if (Math.abs(dLon) > Math.PI) {    dLon=dLon > 0 ? -(2 * Math.PI - dLon) : (2 * Math.PI + dLon);  }  double distanceRadians=Math.sqrt(dLat * dLat + q * q * dLon* dLon);  return Double.isNaN(distanceRadians) ? 0 : distanceRadians;}  }
class C{  public void transformToCRS(CoordinateReferenceSystem newCRS){  try {    MathTransform transform=CRS.findMathTransform(crs,newCRS);    int srid=CRSUtils.getSRID(newCRS);    if (srid == 0) {      throw new RuntimeException("Cannot obtain SRID form coordinate reference system.");    }    for (    SpatialVertex vertex : getVertices()) {      if (vertex.getPoint() != null) {        double[] points=new double[]{vertex.getPoint().getCoordinate().x,vertex.getPoint().getCoordinate().y};        transform.transform(points,0,points,0,1);        vertex.getPoint().getCoordinate().x=points[0];        vertex.getPoint().getCoordinate().y=points[1];        vertex.getPoint().setSRID(srid);      }    }    crs=newCRS;  } catch (  FactoryException e) {    e.printStackTrace();  }catch (  TransformException e) {    e.printStackTrace();    System.exit(-1);  }}  }
class C{  public boolean isDefNoncollider(Node node1,Node node2,Node node3){  List<Edge> edges=getEdges(node2);  boolean circle12=false;  boolean circle32=false;  for (  Edge edge : edges) {    boolean _node1=edge.getDistalNode(node2) == node1;    boolean _node3=edge.getDistalNode(node2) == node3;    if (_node1 && edge.pointsTowards(node1))     return true;    if (_node3 && edge.pointsTowards(node3))     return true;    if (_node1 && edge.getProximalEndpoint(node2) == Endpoint.CIRCLE)     circle12=true;    if (_node3 && edge.getProximalEndpoint(node2) == Endpoint.CIRCLE)     circle32=true;    if (circle12 && circle32 && !isAdjacentTo(node1,node2))     return true;  }  return false;}  }
class C{  public void updateWeights(NeuralNode node,double learn,double momentum){  NeuralConnection[] inputs=node.getInputs();  double[] cWeights=node.getChangeInWeights();  double[] weights=node.getWeights();  double learnTimesError=0;  learnTimesError=learn * node.errorValue(false);  double c=learnTimesError + momentum * cWeights[0];  weights[0]+=c;  cWeights[0]=c;  int stopValue=node.getNumInputs() + 1;  for (int noa=1; noa < stopValue; noa++) {    c=learnTimesError * inputs[noa - 1].outputValue(false);    c+=momentum * cWeights[noa];    weights[noa]+=c;    cWeights[noa]=c;  }}  }
class C{  @ModelAttribute("logsnifferProps") public Properties logsnifferProps(){  return logsnifferProps;}  }
class C{  public GemFireCacheException(CacheException ex){  super(ex);}  }
class C{  @Override protected boolean canTriggerWalking(){  return false;}  }
class C{  public boolean add(double val){  int index=insertionIndex(val);  if (index < 0) {    return false;  }  byte previousState=_states[index];  _set[index]=val;  _states[index]=FULL;  postInsertHook(previousState == FREE);  return true;}  }
class C{  public void restoreState(String stateInXml){  if (stateInXml == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  RestorableSupport restorableSupport;  try {    restorableSupport=RestorableSupport.parse(stateInXml);  } catch (  Exception e) {    String message=Logging.getMessage("generic.ExceptionAttemptingToParseStateXml",stateInXml);    Logging.logger().severe(message);    throw new IllegalArgumentException(message,e);  }  restoreAttributes(restorableSupport,null,this);  RestorableSupport.StateObject defaultAttributesStateObj=restorableSupport.getStateObject("defaultAttributes");  if (defaultAttributesStateObj != null) {    AnnotationAttributes newDefaultAttributes=this.defaultAttributes;    if (newDefaultAttributes == AnnotationAttributes.defaults)     newDefaultAttributes=new AnnotationAttributes();    restoreAttributes(restorableSupport,defaultAttributesStateObj,newDefaultAttributes);    setDefaults(newDefaultAttributes);  }}  }
class C{  public CharSequenceReader(CharSequence seq){  this.seq=checkNotNull(seq);}  }
class C{  public boolean isFrozen(HGHandle handle){  HGLiveHandle lHandle=(handle instanceof HGPersistentHandle) ? cache.get((HGPersistentHandle)handle) : (HGLiveHandle)handle;  return (lHandle == null) ? false : cache.isFrozen(lHandle);}  }
class C{  private void log(String message){  if (context != null)   context.log("SessionListener: " + message); else   System.out.println("SessionListener: " + message);}  }
class C{  private AlarmEvent activation(AlarmPoint alarm){  AlarmStatus oldStatus=alarm.currentStatus();  if ((oldStatus.name(null).equals(AlarmPoint.STATUS_NORMAL)) || (oldStatus.name(null).equals(AlarmPoint.STATUS_DEACTIVATED))) {    AlarmStatus newStatus=createStatus(AlarmPoint.STATUS_ACTIVATED);    return createEvent(alarm.identity().get(),oldStatus,newStatus,AlarmPoint.EVENT_ACTIVATION);  }  return null;}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("SDENullTarg");  targetClass=bpe.location().declaringType();  mainThread=bpe.thread();  EventRequestManager erm=vm().eventRequestManager();  vm().setDefaultStratum(null);  if (!testFailed) {    println("SDENullTest: passed");  } else {    throw new Exception("SDENullTest: failed");  }}  }
class C{  public Field(String name,byte[] value,int offset,int length,IndexableFieldType type){  this(name,new BytesRef(value,offset,length),type);}  }
class C{  public static boolean isBookSearchUrl(String url){  return url.startsWith("http://google.com/books") || url.startsWith("http://books.google.");}  }
class C{  public void callEnd(String channelNumber){synchronized (mTrafficChannelsInUse) {    if (channelNumber != null && mTrafficChannelsInUse.containsKey(channelNumber)) {      Channel channel=mTrafficChannelsInUse.get(channelNumber);      mChannelModel.broadcast(new ChannelEvent(channel,Event.REQUEST_DISABLE));      mTrafficChannelsInUse.remove(channelNumber);    }  }}  }
class C{  public boolean removeReorganizeEventListener(WalletReorganizeEventListener listener){  return ListenerRegistration.removeFromList(listener,reorganizeListeners);}  }
class C{  public void removeAllScanningCallbacks(){  scanningCallbacks.clear();}  }
class C{  public static VisitorData newVisitor(){  int visitorId=new SecureRandom().nextInt() & 0x7FFFFFFF;  long now=now();  return new VisitorData(visitorId,now,now,now,1);}  }
class C{  public HotDeployParameters withShutdownCondition(Awaitable shutdownCondition){  this.shutdownCondition=Optional.ofNullable(shutdownCondition);  return this;}  }
class C{  public AuthenticationTokenProcessingFilter(AuthenticationManager authenticationManager,UserDetailsService userService){  this.authenticationManager=authenticationManager;  this.userService=userService;}  }
class C{  public static <T>ValueHashMap<T> newInstance(){  return new ValueHashMap<T>();}  }
class C{  public XML(String element_type,Filter filter){  setElementType(element_type);  setFilter(filter);}  }
class C{  public Long exists(final String... keys){  checkIsInMultiOrPipeline();  client.exists(keys);  return client.getIntegerReply();}  }
class C{  public static void writeTo(final Serializer serializer,final String label,final NamespaceId namespaceId){  serializer.writeString(label,namespaceId.toString());}  }
class C{  protected void processLob(LobMetadata lob,DatabaseMapping mapping,MetadataClass referenceClass,boolean isForMapKey){  lob.process(mapping,this,referenceClass,isForMapKey);}  }
class C{  private void runReadTest(byte[] input,CompressionMode inputCompressionMode,@Nullable DecompressingChannelFactory decompressionFactory) throws IOException {  File tmpFile=tmpFolder.newFile();  writeFile(tmpFile,input,inputCompressionMode);  verifyReadContents(input,tmpFile,decompressionFactory);}  }
class C{  public int lookupAcelaNodeAddress(int bitAddress,boolean isSensor){  for (int i=0; i < getNumNodes(); i++) {    AcelaNode node=(AcelaNode)getNode(i);    if (isSensor) {      if ((bitAddress >= node.getStartingSensorAddress()) && (bitAddress <= node.getEndingSensorAddress())) {        return (i);      }    } else {      if ((bitAddress >= node.getStartingOutputAddress()) && (bitAddress <= node.getEndingOutputAddress())) {        return (i);      }    }  }  return (-1);}  }
class C{  public SVGOMImageElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public static void main(String[] args){  CountsAnalyser ca=new CountsAnalyser();  Options options=new Options();  Option networkOption=OptionBuilder.withArgName("PATH").hasArg().withDescription("path to network file").withLongOpt("network").create("n");  Option crsOption=OptionBuilder.withArgName("CRSID").hasArg().withDescription("coordinate reference system identifier").create("crs");  Option countsOption=OptionBuilder.withArgName("PATH").hasArg().withDescription("path to counts xml file").withLongOpt("counts").create("c");  Option linkstatsOption=OptionBuilder.withArgName("PATH").hasArg().withDescription("path to linkstats file").withLongOpt("linkstats").create("ls");  Option scaleOption=OptionBuilder.withArgName("double").hasArg().withDescription("scale factor").withLongOpt("scale").create("s");  options.addOption(networkOption);  options.addOption(crsOption);  options.addOption(countsOption);  options.addOption(linkstatsOption);  options.addOption(crsOption);  options.addOption(scaleOption);  CommandLineParser parser=new BasicParser();  try {    CommandLine line=parser.parse(options,args);    if (line.hasOption("n")) {      ca.setNetworkFilename(line.getOptionValue("n"));    } else {      System.err.println("No network file specified");      printHelp(options);    }    if (line.hasOption("c")) {      ca.setCountsFilename(line.getOptionValue("c"));    } else {      System.err.println("No counts file specified");    }    if (line.hasOption("crs")) {      ca.setCoordinateSystem(line.getOptionValue("crs"));    } else {      System.err.println("No crs file specified");    }    if (line.hasOption("ls")) {      ca.setLinkStatsFilename(line.getOptionValue("ls"));    } else {      System.err.println("No counts file specified");    }    if (line.hasOption("sf")) {      double scale=Double.parseDouble(line.getOptionValue("sf"));      ca.setScaleFactor(scale);    }  } catch (  ParseException exp) {    log.error("Parsing failed.  Reason: " + exp.getMessage());  }}  }
class C{  public void testUpdateByteBuffer02() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, IllegalStateException, InvalidAlgorithmParameterException, InvalidKeyException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  byte[] bb={(byte)1,(byte)2,(byte)3,(byte)4,(byte)5};  SecretKeySpec sks=new SecretKeySpec(bb,"SHA1");  byte[] bbuf={(byte)5,(byte)4,(byte)3,(byte)2,(byte)1};  ByteBuffer byteBuf;  byte[] bb1;  byte[] bb2;  for (int i=0; i < macs.length; i++) {    byteBuf=ByteBuffer.allocate(5);    byteBuf.put(bbuf);    byteBuf.position(2);    macs[i].init(sks);    macs[i].update(byteBuf);    bb1=macs[i].doFinal();    macs[i].init(sks);    macs[i].update(bbuf,2,3);    bb2=macs[i].doFinal();    for (int t=0; t < bb1.length; t++) {      assertEquals("Incorrect doFinal result",bb1[t],bb2[t]);    }  }}  }
class C{  public boolean isAfter(long instant){  return (getMillis() > instant);}  }
class C{  public static String makePair(String label,String value){  return String.format("%s%s%s",label,DELIMITER,value);}  }
class C{  private void connect(Throwable exception){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  c.changeConnectionStatus(Connection.ConnectionStatus.ERROR);  c.addAction("Client failed to connect");  System.out.println("Client failed to connect");}  }
class C{  @Override protected GenericRecord readEntity() throws IOException {  GenericRecord record=null;  record=null;  try {    if (avroDataStream != null && avroDataStream.hasNext()) {      offset++;      record=avroDataStream.next();      recordCount++;      return record;    }  } catch (  AvroRuntimeException are) {    LOG.error("Exception in parsing record for file - " + super.currentFile + " at offset - "+ offset,are);    if (errorRecordsPort.isConnected()) {      errorRecordsPort.emit("FileName:" + super.currentFile + ", Offset:"+ offset);    }    errorCount++;    throw new AvroRuntimeException(are);  }  return record;}  }
class C{  public void actionPerformed(ActionEvent e){  color=chooser.getColor();  setPreviewColor(color);  isOK=true;}  }
class C{  public static int endPos(JCTree tree){  if (tree.hasTag(BLOCK) && ((JCBlock)tree).endpos != Position.NOPOS)   return ((JCBlock)tree).endpos; else   if (tree.hasTag(SYNCHRONIZED))   return endPos(((JCSynchronized)tree).body); else   if (tree.hasTag(TRY)) {    JCTry t=(JCTry)tree;    return endPos((t.finalizer != null) ? t.finalizer : (t.catchers.nonEmpty() ? t.catchers.last().body : t.body));  } else   return tree.pos;}  }
class C{  public final boolean isClosed(){  return closed;}  }
class C{  @Override public boolean isPostOperation(){  return false;}  }
class C{  boolean shouldAnimateMove(){  return mContentChanged && !mExiting && !mWinAnimator.mLastHidden&& mService.okToDisplay()&& (mFrame.top != mLastFrame.top || mFrame.left != mLastFrame.left)&& (mAttrs.privateFlags & PRIVATE_FLAG_NO_MOVE_ANIMATION) == 0 && (mAttachedWindow == null || !mAttachedWindow.shouldAnimateMove());}  }
class C{  protected Object processColumn(ResultSet rs,int index,Class propType) throws SQLException {  if (propType.equals(String.class)) {    return rs.getString(index);  } else   if (propType.equals(Integer.TYPE) || propType.equals(Integer.class)) {    return new Integer(rs.getInt(index));  } else   if (propType.equals(Boolean.TYPE) || propType.equals(Boolean.class)) {    return new Boolean(rs.getBoolean(index));  } else   if (propType.equals(Long.TYPE) || propType.equals(Long.class)) {    return new Long(rs.getLong(index));  } else   if (propType.equals(Double.TYPE) || propType.equals(Double.class)) {    return new Double(rs.getDouble(index));  } else   if (propType.equals(Float.TYPE) || propType.equals(Float.class)) {    return new Float(rs.getFloat(index));  } else   if (propType.equals(Short.TYPE) || propType.equals(Short.class)) {    return new Short(rs.getShort(index));  } else   if (propType.equals(Byte.TYPE) || propType.equals(Byte.class)) {    return new Byte(rs.getByte(index));  } else   if (propType.equals(Timestamp.class)) {    return rs.getTimestamp(index);  } else {    return rs.getObject(index);  }}  }
class C{  public int read() throws IOException {  if (next >= length)   return -1;  return text.charAt(next++);}  }
class C{  public int next(int ctx) throws XMLException {  start=position - 1;  try {switch (ctx) {case DOCUMENT_START_CONTEXT:      type=nextInDocumentStart();    break;case TOP_LEVEL_CONTEXT:  type=nextInTopLevel();break;case PI_CONTEXT:type=nextInPI();break;case START_TAG_CONTEXT:type=nextInStartTag();break;case ATTRIBUTE_VALUE_CONTEXT:type=nextInAttributeValue();break;case CONTENT_CONTEXT:type=nextInContent();break;case END_TAG_CONTEXT:type=nextInEndTag();break;case CDATA_SECTION_CONTEXT:type=nextInCDATASection();break;case XML_DECL_CONTEXT:type=nextInXMLDecl();break;case DOCTYPE_CONTEXT:type=nextInDoctype();break;case DTD_DECLARATIONS_CONTEXT:type=nextInDTDDeclarations();break;case ELEMENT_DECLARATION_CONTEXT:type=nextInElementDeclaration();break;case ATTLIST_CONTEXT:type=nextInAttList();break;case NOTATION_CONTEXT:type=nextInNotation();break;case ENTITY_CONTEXT:type=nextInEntity();break;case ENTITY_VALUE_CONTEXT:return nextInEntityValue();case NOTATION_TYPE_CONTEXT:return nextInNotationType();case ENUMERATION_CONTEXT:return nextInEnumeration();default :throw new IllegalArgumentException("unexpected ctx:" + ctx);}} catch (IOException e) {throw new XMLException(e);}end=position - ((current == -1) ? 0 : 1);return type;}  }
class C{  public AnimatedSprite(final Sprite[] frames,final int delay,final boolean animating){  this(frames,delay,animating,null);}  }
class C{  public static String intToIp(int i){  return ((i) & 0xFF) + "." + ((i >> 8) & 0xFF)+ "."+ ((i >> 16) & 0xFF)+ "."+ (i >> 24 & 0xFF);}  }
class C{  public static int computeOrientation(Coordinate p1,Coordinate p2,Coordinate q){  return orientationIndex(p1,p2,q);}  }
class C{  public static int ceilPow2(int v){  return Integer.highestOneBit(v - 1) << 1;}  }
class C{  @Override public KeyParameter deriveKey(CharSequence password) throws KeyCrypterException {  byte[] passwordBytes=null;  try {    passwordBytes=convertToByteArray(password);    byte[] salt=new byte[0];    if (scryptParameters.getSalt() != null) {      salt=scryptParameters.getSalt().toByteArray();    } else {      log.warn("You are using a ScryptParameters with no salt. Your encryption may be vulnerable to a dictionary attack.");    }    byte[] keyBytes=SCrypt.scrypt(passwordBytes,salt,(int)scryptParameters.getN(),scryptParameters.getR(),scryptParameters.getP(),KEY_LENGTH);    return new KeyParameter(keyBytes);  } catch (  Exception e) {    throw new KeyCrypterException("Could not generate key from password and salt.",e);  } finally {    if (passwordBytes != null) {      java.util.Arrays.fill(passwordBytes,(byte)0);    }  }}  }
class C{  public List superInterfaceTypes(){  if (this.superInterfaceTypes == null) {    unsupportedIn2();  }  return this.superInterfaceTypes;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:01.410 -0500",hash_original_method="57889AAEA0A214C7174BC35DF28DBD1D",hash_generated_method="6EFD19B86B030E724E05F98976AE63FA") public void removeBearing(){  mBearing=0.0f;  mHasBearing=false;}  }
class C{  public static void showMessageSheet(Component parentComponent,Object message,int messageType,SheetListener listener){  showMessageSheet(parentComponent,message,messageType,null,listener);}  }
class C{  public static List<PowerHost> createHostList(int hostsNumber){  List<PowerHost> hostList=new ArrayList<PowerHost>();  for (int i=0; i < hostsNumber; i++) {    int hostType=i % Constants.HOST_TYPES;    List<Pe> peList=new ArrayList<Pe>();    for (int j=0; j < Constants.HOST_PES[hostType]; j++) {      peList.add(new Pe(j,new PeProvisionerSimple(Constants.HOST_MIPS[hostType])));    }    hostList.add(new PowerHostUtilizationHistory(i,new RamProvisionerSimple(Constants.HOST_RAM[hostType]),new BwProvisionerSimple(Constants.HOST_BW),Constants.HOST_STORAGE,peList,new VmSchedulerTimeSharedOverSubscription(peList),Constants.HOST_POWER[hostType]));  }  return hostList;}  }
class C{  public void solveSudoku(char[][] board){  if (board == null || board.length != 9 || board[0].length != 9)   return;  row=new int[9];  col=new int[9];  sqr=new int[9];  for (int i=0; i < 9; i++) {    for (int j=0; j < 9; j++) {      if (board[i][j] != '.') {        int num=board[i][j] - '0';        int k=(i - i % 3) + j / 3;        row[i]|=1 << num;        col[j]|=1 << num;        sqr[k]|=1 << num;      }    }  }  for (int i=1; i <= 9; i++)   if (helper(board,0,0,0,i))   return;}  }
class C{  public void goBack(){  TestUtils.goBack();}  }
class C{  private void onInvalidTapDetectionTimeout(){  mHandler.handleInvalidTap();  mIsWaitingForInvalidTapDetection=false;}  }
class C{  private static boolean isRightOutlier(int index,ArrayList<Double> values){  double currentValue=values.get(index);  double valueToRight=values.get(index + 1);  return Math.abs(currentValue - valueToRight) > 20;}  }
class C{  public LocalSageFile(String name,String mode) throws IOException {  randomAccessFile=new RandomAccessFile(name,mode);  readonly=!mode.contains("w");}  }
class C{  public void reset(){  offset=0;  length=0;  lastTrailingHighSurrogate=0;}  }
class C{  public static boolean isIdCardNumber(String str){  return isRegexMatch(str,REGEX_ID_CARD);}  }
class C{  public void close() throws IOException {  if (dataStream != null) {    dataStream.close();  }  byteStream=null;  dataStream=null;}  }
class C{  public static void mkdirs(File f){  File p=f.getParentFile();  if (!p.exists())   p.mkdirs();}  }
class C{  public void addText(String text) throws ConfigException {  _period=toPeriod(text,getDefaultUnits());}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthRootPaneUI();}  }
class C{  protected BoundaryDropController newBoundaryDropController(AbsolutePanel boundaryPanel,boolean allowDroppingOnBoundaryPanel){  return new BoundaryDropController(boundaryPanel,allowDroppingOnBoundaryPanel);}  }
class C{  private final void processSplitFactors() throws AdeException {  final String tempSplitFactor=getProp(TEMP_SPLIT_FACTOR);  final String permSplitFactor=getProp(PERM_SPLIT_FACTOR);  final long duration=m_outerFramingFlow.getDuration();  short permSplitFactorVal;  short tempSplitFactorVal;  if (permSplitFactor != null) {    permSplitFactorVal=validatePermSplitFactor(permSplitFactor);  } else {    permSplitFactorVal=(short)(duration / MILLISECONDS_IN_TEN_MINUTES);  }  if (tempSplitFactor != null) {    short permDurationInMinutes=(short)((duration / permSplitFactorVal) / MILLISECONDS_IN_ONE_MINUTE);    tempSplitFactorVal=validateTempSplitFactor(tempSplitFactor,permDurationInMinutes,permSplitFactorVal);  } else {    tempSplitFactorVal=(short)(duration / MILLISECONDS_IN_TWO_MINUTES);  }  setTempSplitFactor(tempSplitFactorVal);}  }
class C{  public CategoricalResults(double[] probabilities){  this.probabilities=probabilities;  n=probabilities.length;}  }
class C{  public static ReportEngine startCheckPrint(int C_Payment_ID){  int C_PaySelectionCheck_ID=0;  MPaySelectionCheck psc=MPaySelectionCheck.getOfPayment(Env.getCtx(),C_Payment_ID,null);  if (psc != null)   C_PaySelectionCheck_ID=psc.getC_PaySelectionCheck_ID(); else {    psc=MPaySelectionCheck.createForPayment(Env.getCtx(),C_Payment_ID,null);    if (psc != null)     C_PaySelectionCheck_ID=psc.getC_PaySelectionCheck_ID();  }  return startDocumentPrint(ReportEngine.CHECK,C_PaySelectionCheck_ID);}  }
class C{  public void emitDirect(int taskId,List<Object> tuple){  emitDirect(taskId,tuple,null);}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public boolean undoAutoMoves(INode state){  for (int i=autoMoves.size() - 1; i >= 0; i--) {    IMove move=autoMoves.get(i);    move.undo(state);  }  autoMoves.clear();  return true;}  }
class C{  public static final String filename4Source(DigestURL source){  return filenamePrefix + OAIPMHImporter.filenameSeparationChar + OAIPMHImporter.hostID(source)+ OAIPMHImporter.filenameSeparationChar+ GenericFormatter.SHORT_MILSEC_FORMATTER.format()+ ".xml";}  }
class C{  public PeriodType withYearsRemoved(){  return withFieldRemoved(0,"NoYears");}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera);  }}  }
class C{  public final long makeLong(byte[] bytes,int offset,boolean isle) throws BinaryParseException {  long result=0;  int shift=0;  if (isle)   for (int i=7; i >= 0; i--) {    shift=i * 8;    result+=(((long)bytes[offset + i]) << shift) & (0xffL << shift);  } else   for (int i=0; i <= 7; i++) {    shift=(7 - i) * 8;    result+=(((long)bytes[offset + i]) << shift) & (0xffL << shift);  }  return result;}  }
class C{  public V put(K key,V value,long expireTimeMillis){  return putInternal(key,value,TimeUnit.NANOSECONDS.convert(expireTimeMillis,TimeUnit.MILLISECONDS));}  }
class C{  public void paintToolTipBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  @Override public String dumpWindowHierarchy(boolean compressed){  device.setCompressedLayoutHeirarchy(compressed);  try {    ByteArrayOutputStream os=new ByteArrayOutputStream();    device.dumpWindowHierarchy(os);    os.close();    return os.toString("UTF-8");  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  } finally {    device.setCompressedLayoutHeirarchy(false);  }  return null;}  }
class C{  @NotNull @ObjectiveCName("saveGroupPermissionsWithGid:withSettings:") public Promise<Void> saveGroupPermissions(int gid,GroupPermissions adminSettings){  return modules.getGroupsModule().saveAdminSettings(gid,adminSettings);}  }
class C{  private void gatherCandidates(Component component,int preferredPort,int minPort,int maxPort) throws IllegalArgumentException, IOException {  logger.info("Gathering candidates for component " + component.toShortString() + ". Local ufrag "+ getLocalUfrag());  if (useHostHarvester()) {    hostCandidateHarvester.harvest(component,preferredPort,minPort,maxPort,Transport.UDP);  } else {    if (hostHarvesters.isEmpty())     logger.warning("No host harvesters available!");  }  for (  CandidateHarvester harvester : hostHarvesters) {    harvester.harvest(component);  }  if (component.getLocalCandidateCount() == 0)   logger.warning("Failed to gather any host candidates!");  if (!isTrickling()) {    harvestingStarted=true;    harvesters.harvest(component);  }  logger.fine("Candidate count in first harvest: " + component.getLocalCandidateCount());  component.selectDefaultCandidate();}  }
class C{  public String toString(){  return new StringBuffer("CTable[").append(getModel()).append("]").toString();}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFEMergeElement(prefix,(AbstractDocument)doc);}  }
class C{  public DropInfostringItemAction(final String itemName,final String infostring){  this.itemName=checkNotNull(itemName);  this.amount=1;  this.infostring=checkNotNull(infostring);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  boolean importStackContains(String hrefUrl){  return stackContains(m_importStack,hrefUrl);}  }
class C{  public void testConstrStringWithExponentWithPoint1(){  String a="23985439837984782435652424523876878.7678287e+214";  int aScale=-207;  BigInteger bA=new BigInteger("239854398379847824356524245238768787678287");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  protected void assertResult(String expected,Statement stat,String sql) throws SQLException {  ResultSet rs=stat.executeQuery(sql);  if (rs.next()) {    String actual=rs.getString(1);    assertEquals(expected,actual);  } else {    assertEquals(expected,null);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:11.661 -0500",hash_original_method="762501862EB015269BBC405DBBAC5194",hash_generated_method="35FF15333BFC2F82D2301F5965AF8264") public String encodeBody(){  return contentEncoding;}  }
class C{  @Override public void add(int pos,T entry){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public static InlineDecision YES(RVMMethod target,String reason){  RVMMethod[] targets=new RVMMethod[1];  targets[0]=target;  return new InlineDecision(targets,null,Code.DECIDE_YES,reason);}  }
class C{  public ECKey decrypt(KeyCrypter keyCrypter,KeyParameter aesKey) throws KeyCrypterException {  checkNotNull(keyCrypter);  if (this.keyCrypter != null && !this.keyCrypter.equals(keyCrypter))   throw new KeyCrypterException("The keyCrypter being used to decrypt the key is different to the one that was used to encrypt it");  checkState(encryptedPrivateKey != null,"This key is not encrypted");  byte[] unencryptedPrivateKey=keyCrypter.decrypt(encryptedPrivateKey,aesKey);  ECKey key=ECKey.fromPrivate(unencryptedPrivateKey);  if (!isCompressed())   key=key.decompress();  if (!Arrays.equals(key.getPubKey(),getPubKey()))   throw new KeyCrypterException("Provided AES key is wrong");  key.setCreationTimeSeconds(creationTimeSeconds);  return key;}  }
class C{  public static void completePlanToHwh(Plan plan,Coord workCoord){  Activity act=PopulationUtils.getFirstActivity(plan);  act.setEndTime(7. * 3600.);  Coord homeCoord=act.getCoord();  PopulationUtils.createAndAddLeg(plan,(String)TransportMode.car);  final Coord coord=workCoord;  act=PopulationUtils.createAndAddActivityFromCoord(plan,(String)ACT_WORK,coord);  ((Activity)act).setMaximumDuration(8. * 3600.);  PopulationUtils.createAndAddLeg(plan,(String)TransportMode.car);  final Coord coord1=homeCoord;  PopulationUtils.createAndAddActivityFromCoord(plan,(String)ACT_HOME,coord1);}  }
class C{  public Criteria addProperty(String name,String value,Operator operator){  properties.add(new PropertyCriteria(name,value,operator));  return this;}  }
class C{  public static double acosh(final double a){  return FastMath.log(a + FastMath.sqrt(a * a - 1));}  }
class C{  public void swap(){  MethodVisitor mv=controller.getMethodVisitor();  int size=stack.size();  ClassNode b=stack.get(size - 1);  ClassNode a=stack.get(size - 2);  if (isTwoSlotType(a)) {    if (isTwoSlotType(b)) {      mv.visitInsn(DUP2_X2);      mv.visitInsn(POP2);    } else {      mv.visitInsn(DUP_X2);      mv.visitInsn(POP);    }  } else {    if (isTwoSlotType(b)) {      mv.visitInsn(DUP2_X1);      mv.visitInsn(POP2);    } else {      mv.visitInsn(SWAP);    }  }  stack.set(size - 1,a);  stack.set(size - 2,b);}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  MessageResources rsc=getResources(request);  InstructionalOfferingModifyForm frm=(InstructionalOfferingModifyForm)form;  LookupTables.setupExternalDepts(request,sessionContext.getUser().getCurrentAcademicSessionId());  TreeSet ts=new TreeSet();  for (Iterator it=((TreeSet)request.getAttribute(Department.EXTERNAL_DEPT_ATTR_NAME)).iterator(); it.hasNext(); ) {    Department d=(Department)it.next();    if (sessionContext.hasPermission(d,Right.MultipleClassSetupDepartment))     ts.add(d);  }  request.setAttribute((Department.EXTERNAL_DEPT_ATTR_NAME + "list"),ts);  String op=(request.getParameter("op") == null) ? (frm.getOp() == null || frm.getOp().length() == 0) ? (request.getAttribute("op") == null) ? null : request.getAttribute("op").toString() : frm.getOp() : request.getParameter("op");  if (op == null)   op=request.getParameter("hdnOp");  if (op == null || op.trim().length() == 0)   throw new Exception(MSG.errorOperationNotInterpreted() + op);  String instrOffrConfigId="";  frm.setOp(op);  if (op.equalsIgnoreCase(MSG.actionClassSetup())) {    instrOffrConfigId=(request.getParameter("uid") == null) ? (request.getAttribute("uid") == null) ? null : request.getAttribute("uid").toString() : request.getParameter("uid");    doLoad(request,frm,instrOffrConfigId);  }  if (op.equalsIgnoreCase(rsc.getMessage("button.add"))) {    ActionMessages errors=frm.validate(mapping,request);    if (errors.size() == 0) {      String addTemplateClass=frm.getAddTemplateClassId().toString();      frm.addNewClassesBasedOnTemplate(addTemplateClass);    } else {      saveErrors(request,errors);    }  }  if (op.equalsIgnoreCase(rsc.getMessage("button.moveUp"))) {    ActionMessages errors=frm.validate(mapping,request);    if (errors.size() == 0) {      String moveUpClass=frm.getMoveUpClassId().toString();      frm.moveClassUp(moveUpClass);    } else {      saveErrors(request,errors);    }  }  if (op.equalsIgnoreCase(rsc.getMessage("button.moveDown"))) {    ActionMessages errors=frm.validate(mapping,request);    if (errors.size() == 0) {      String moveDownClass=frm.getMoveDownClassId().toString();      frm.moveClassDown(moveDownClass);    } else {      saveErrors(request,errors);    }  }  if (op.equalsIgnoreCase(rsc.getMessage("button.delete"))) {    String deletedClass=request.getParameter("deletedClassId");    if (deletedClass != null && deletedClass.trim().length() > 0)     frm.removeFromClasses(deletedClass);  }  if ("cancel".equals(op)) {    frm.setCancelled(request.getParameter("deletedClassId"),true);  }  if ("reopen".equals(op)) {    frm.setCancelled(request.getParameter("deletedClassId"),false);  }  if (op.equalsIgnoreCase("multipleLimits")) {    frm.setDisplayMaxLimit(new Boolean(!frm.getDisplayMaxLimit().booleanValue()));    if (!frm.getDisplayMaxLimit().booleanValue()) {      if (!frm.maxLimitCanBeHidden()) {        frm.setDisplayMaxLimit(new Boolean(true));        frm.setDisplayOptionForMaxLimit(new Boolean(true));      }    }  }  if (op.equalsIgnoreCase(MSG.actionUpdateMultipleClassSetup())) {    ActionMessages errors=frm.validate(mapping,request);    if (errors.size() == 0) {      doUpdate(request,frm);      ActionRedirect redirect=new ActionRedirect(mapping.findForward("instructionalOfferingDetail"));      redirect.addParameter("io",frm.getInstrOfferingId());      redirect.addParameter("op","view");      return redirect;    } else {      saveErrors(request,errors);    }  }  if (frm.getInstrOfferingId() != null) {    InstructionalOffering io=(new InstructionalOfferingDAO()).get(frm.getInstrOfferingId());    if (io != null)     LookupTables.setupDatePatterns(request,sessionContext.getUser(),"Default",null,io.getDepartment(),io.getSession().getDefaultDatePatternNotNull());  }  frm.setDirectionsClassesCanMove();  frm.initalizeSubpartSubtotalsAndDisplayFlags();  frm.initializeEnableAllClassesForStudentScheduling();  frm.initializeDisplayAllClassInstructors();  return mapping.findForward("instructionalOfferingModify");}  }
class C{  public int hashCode(){  return value & 0xff;}  }
class C{  public void createStorageFileEntities(StorageUnitEntity storageUnitEntity,String s3KeyPrefix,List<SchemaColumn> partitionColumns,List<String> subPartitionValues,boolean replaceUnderscoresWithHyphens){  int discoverableSubPartitionsCount=partitionColumns != null ? partitionColumns.size() - subPartitionValues.size() - 1 : 0;  int storageFilesCount=(int)Math.pow(2,discoverableSubPartitionsCount);  for (int i=0; i < storageFilesCount; i++) {    StringBuilder subDirectory=new StringBuilder();    String binaryString=StringUtils.leftPad(Integer.toBinaryString(i),discoverableSubPartitionsCount,"0");    for (int j=0; j < discoverableSubPartitionsCount; j++) {      String subpartitionKey=partitionColumns.get(j + subPartitionValues.size() + 1).getName().toLowerCase();      if (replaceUnderscoresWithHyphens) {        subpartitionKey=subpartitionKey.replace("_","-");      }      subDirectory.append(String.format("/%s=%s",subpartitionKey,binaryString.substring(j,j + 1)));    }    createStorageFileEntity(storageUnitEntity,String.format("%s%s/data.dat",s3KeyPrefix,subDirectory.toString()),AbstractDaoTest.FILE_SIZE_1_KB,AbstractDaoTest.ROW_COUNT_1000);  }}  }
class C{  public static GroupMapping mapping(Map.Entry<String,Mapping<?>>... fields){  return new GroupMapping(Arrays.asList(fields));}  }
class C{  public static void transformBackToBooleanField(){  transformedBackToBooleanField++;}  }
class C{  @Override public ValueLob copyToTemp(){  ValueLob lob;  if (type == CLOB) {    lob=ValueLob.createClob(getReader(),precision);  } else {    lob=ValueLob.createBlob(getInputStream(),precision);  }  return lob;}  }
class C{  public BottomSheetMenuItem(Context context,CharSequence title,Drawable icon){  this(context,0,0,0,0,title);  setIcon(icon);}  }
class C{  public TextEditChangeGroup(TextChange change,TextEditGroup group){  super(change,group);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:41.757 -0500",hash_original_method="D9BC0395AD15FA7E073090B68C8CD68C",hash_generated_method="A1470DF6E91C2DDFFED0E9A70B2A0C17") public static void dumpHprofData(String fileName) throws IOException {  if (fileName == null)   throw new NullPointerException();  dumpHprofData(fileName,null);}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  private void initiateUnregistration(){  txtRegText.setText(R.string.register_text_view_text_unregister);  btnUnregister.setText(R.string.register_button_text);  btnUnregister.setTag(TAG_BTN_RE_REGISTER);  btnUnregister.setOnClickListener(onClickListenerButtonClicked);  CommonUtils.clearAppData(context);}  }
class C{  public BundledSignaturesType createBundledSignatures(){  final BundledSignaturesType s=new BundledSignaturesType();  s.setProject(getProject());  bundledSignatures.add(s);  return s;}  }
class C{  public static final boolean even(short x){  return ((x & 0x1) == 0);}  }
class C{  public void addToExistingInitiatorsIfAbsent(String port){  if (_existingInitiators == null) {    _existingInitiators=new StringSet();  }  String normalizedPort=Initiator.normalizePort(port);  if (!_existingInitiators.contains(normalizedPort) && (_userAddedInitiators == null || !_userAddedInitiators.containsKey(normalizedPort))) {    _existingInitiators.add(normalizedPort);  }}  }
class C{  public synchronized String format(long inDate){  long seconds=inDate / 1000;  if (seconds < _lastSeconds || _lastSeconds > 0 && seconds > _lastSeconds + __hitWindow) {    Date d=new Date(inDate);    return _tzFormat.format(d);  }  if (_lastSeconds == seconds)   return _lastResult;  Date d=new Date(inDate);  long minutes=seconds / 60;  if (_lastMinutes != minutes) {    _lastMinutes=minutes;    _secFormatString=_minFormat.format(d);    int i=_secFormatString.indexOf("ss");    int l=2;    _secFormatString0=_secFormatString.substring(0,i);    _secFormatString1=_secFormatString.substring(i + l);  }  _lastSeconds=seconds;  StringBuilder sb=new StringBuilder(_secFormatString.length());  sb.append(_secFormatString0);  int s=(int)(seconds % 60);  if (s < 10)   sb.append('0');  sb.append(s);  sb.append(_secFormatString1);  _lastResult=sb.toString();  return _lastResult;}  }
class C{  public void diff_cleanupSemantic(LinkedList<Diff> diffs){  if (diffs.isEmpty()) {    return;  }  boolean changes=false;  Stack<Diff> equalities=new Stack<Diff>();  String lastequality=null;  ListIterator<Diff> pointer=diffs.listIterator();  int length_insertions1=0;  int length_deletions1=0;  int length_insertions2=0;  int length_deletions2=0;  Diff thisDiff=pointer.next();  while (thisDiff != null) {    if (thisDiff.operation == Operation.EQUAL) {      equalities.push(thisDiff);      length_insertions1=length_insertions2;      length_deletions1=length_deletions2;      length_insertions2=0;      length_deletions2=0;      lastequality=thisDiff.text;    } else {      if (thisDiff.operation == Operation.INSERT) {        length_insertions2+=thisDiff.text.length();      } else {        length_deletions2+=thisDiff.text.length();      }      if (lastequality != null && (lastequality.length() <= Math.max(length_insertions1,length_deletions1)) && (lastequality.length() <= Math.max(length_insertions2,length_deletions2))) {        while (thisDiff != equalities.lastElement()) {          thisDiff=pointer.previous();        }        pointer.next();        pointer.set(new Diff(Operation.DELETE,lastequality));        pointer.add(new Diff(Operation.INSERT,lastequality));        equalities.pop();        if (!equalities.empty()) {          equalities.pop();        }        if (equalities.empty()) {          while (pointer.hasPrevious()) {            pointer.previous();          }        } else {          thisDiff=equalities.lastElement();          while (thisDiff != pointer.previous()) {          }        }        length_insertions1=0;        length_insertions2=0;        length_deletions1=0;        length_deletions2=0;        lastequality=null;        changes=true;      }    }    thisDiff=pointer.hasNext() ? pointer.next() : null;  }  if (changes) {    diff_cleanupMerge(diffs);  }  diff_cleanupSemanticLossless(diffs);  pointer=diffs.listIterator();  Diff prevDiff=null;  thisDiff=null;  if (pointer.hasNext()) {    prevDiff=pointer.next();    if (pointer.hasNext()) {      thisDiff=pointer.next();    }  }  while (thisDiff != null) {    if (prevDiff.operation == Operation.DELETE && thisDiff.operation == Operation.INSERT) {      String deletion=prevDiff.text;      String insertion=thisDiff.text;      int overlap_length1=this.diff_commonOverlap(deletion,insertion);      int overlap_length2=this.diff_commonOverlap(insertion,deletion);      if (overlap_length1 >= overlap_length2) {        if (overlap_length1 >= deletion.length() / 2.0 || overlap_length1 >= insertion.length() / 2.0) {          pointer.previous();          pointer.add(new Diff(Operation.EQUAL,insertion.substring(0,overlap_length1)));          prevDiff.text=deletion.substring(0,deletion.length() - overlap_length1);          thisDiff.text=insertion.substring(overlap_length1);        }      } else {        if (overlap_length2 >= deletion.length() / 2.0 || overlap_length2 >= insertion.length() / 2.0) {          pointer.previous();          pointer.add(new Diff(Operation.EQUAL,deletion.substring(0,overlap_length2)));          prevDiff.operation=Operation.INSERT;          prevDiff.text=insertion.substring(0,insertion.length() - overlap_length2);          thisDiff.operation=Operation.DELETE;          thisDiff.text=deletion.substring(overlap_length2);        }      }      thisDiff=pointer.hasNext() ? pointer.next() : null;    }    prevDiff=thisDiff;    thisDiff=pointer.hasNext() ? pointer.next() : null;  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Seeker.getInstance().getArchiveDirectories(Seeker.ALL_DIR_MASK);}  }
class C{  public static void beginStartingService(Context context){  if (BuildConfig.DEBUG)   Log.v("SmsMonitorService: beginStartingService()");  context.startService(new Intent(context,SmsMonitorService.class));}  }
class C{  public void end(String namespace,String name) throws Exception {  MapEntryBean top=null;  try {    top=(MapEntryBean)digester.pop();  } catch (  Exception e) {    throw new IllegalStateException("Popped object is not a " + CLASS_NAME + " instance");  }  MapEntriesBean mesb=(MapEntriesBean)digester.peek();  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[MapEntryRule]{" + digester.getMatch() + "} Add");  }  mesb.addMapEntry(top);}  }
class C{  private void refreshChallengeCounts(){  mDueChallengeCounts=mDueChallengeLogic.getDueChallengeCounts(mCategories);}  }
class C{  public static boolean any(Object self,Closure closure){  BooleanClosureWrapper bcw=new BooleanClosureWrapper(closure);  for (Iterator iter=InvokerHelper.asIterator(self); iter.hasNext(); ) {    if (bcw.call(iter.next()))     return true;  }  return false;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:10.644 -0500",hash_original_method="06B09237572FDBACE4B91CD9A5DB4A4A",hash_generated_method="14C1CE767CE584FF5B151067AFB17C61") static synchronized void computePRF_SSLv3(byte[] out,byte[] secret,byte[] seed){  if (sha == null) {    init();  }  int pos=0;  int iteration=1;  byte[] digest;  while (pos < out.length) {    byte[] pref=new byte[iteration];    Arrays.fill(pref,(byte)(64 + iteration++));    sha.update(pref);    sha.update(secret);    sha.update(seed);    md5.update(secret);    md5.update(sha.digest());    digest=md5.digest();    if (pos + 16 > out.length) {      System.arraycopy(digest,0,out,pos,out.length - pos);      pos=out.length;    } else {      System.arraycopy(digest,0,out,pos,16);      pos+=16;    }  }}  }
class C{  public void initGUI(){  removeAll();  try {    URL url=PropUtils.getResourceOrFileOrURL(TimerControlButtonPanel.class,forwardIconURL);    forwardIcon=new ImageIcon(url);    url=PropUtils.getResourceOrFileOrURL(TimerControlButtonPanel.class,forwardStepIconURL);    forwardStepIcon=new ImageIcon(url);    url=PropUtils.getResourceOrFileOrURL(TimerControlButtonPanel.class,backwardIconURL);    backwardIcon=new ImageIcon(url);    url=PropUtils.getResourceOrFileOrURL(TimerControlButtonPanel.class,backwardStepIconURL);    backwardStepIcon=new ImageIcon(url);    url=PropUtils.getResourceOrFileOrURL(TimerControlButtonPanel.class,pauseIconURL);    pauseIcon=new ImageIcon(url);  } catch (  MalformedURLException murle) {    Debug.error("TimerToggleButton: initGUI() bad icon.");  }catch (  NullPointerException npe) {    Debug.error("TimerToggleButton: initGUI() bad icon.");    npe.printStackTrace();  }  JToolBar jtb=new JToolBar();  jtb.setFloatable(false);  backwardButton=new JButton(backwardIcon);  backwardButton.setToolTipText("Run Timer Backwards");  backwardButton.setActionCommand(TimerStatus.TIMER_BACKWARD);  backwardButton.addActionListener(this);  forwardStepButton=new JButton(backwardStepIcon);  forwardStepButton.setToolTipText("Step Timer Backward");  forwardStepButton.setActionCommand(TimerStatus.TIMER_STEP_BACKWARD);  forwardStepButton.addActionListener(this);  jtb.add(forwardStepButton);  forwardButton=new JButton(forwardIcon);  forwardButton.setToolTipText("Run Timer Forward");  forwardButton.setActionCommand(TimerStatus.TIMER_FORWARD);  forwardButton.addActionListener(this);  jtb.add(forwardButton);  backwardStepButton=new JButton(forwardStepIcon);  backwardStepButton.setToolTipText("Step Timer Forward");  backwardStepButton.setActionCommand(TimerStatus.TIMER_STEP_FORWARD);  backwardStepButton.addActionListener(this);  jtb.add(backwardStepButton);  add(jtb);}  }
class C{  public Builder withLeader(Address leader){  response.leader=leader;  return this;}  }
class C{  public Edge(Graph<V,E> source,Type type,E edge){  super(source,type);  this.edge=edge;}  }
class C{  public String debugDump(){  String superstring=super.debugDump();  stringRepresentation="";  sprint(SIPResponse.class.getCanonicalName());  sprint("{");  if (statusLine != null) {    sprint(statusLine.debugDump());  }  sprint(superstring);  sprint("}");  return stringRepresentation;}  }
class C{  public ExitStateItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public boolean isIndependent(Node x,Node y,List<Node> z){  double r;  int n=sampleSize();  if (z.isEmpty()) {    Integer xi=indexMap.get(x);    Integer yi=indexMap.get(y);    if (xi == null || yi == null) {      xi=indexMap.get(nameMap.get(x.getName()));      yi=indexMap.get(nameMap.get(y.getName()));      if (xi == null || yi == null) {        throw new IllegalArgumentException("Node not in map");      }    }    double a=_covMatrix.get(xi,xi);    double b=_covMatrix.get(xi,yi);    double d=_covMatrix.get(yi,yi);    r=-b / Math.sqrt(a * d);  } else {    TetradMatrix submatrix=DataUtils.subMatrix(_covMatrix,indexMap,x,y,z);    r=StatUtils.partialCorrelation(submatrix);  }  if (r > 1.)   r=1.;  if (r < -1.)   r=-1.;  double fisherZ=Math.sqrt(n - z.size() - 3.0) * 0.5 * (Math.log(1.0 + r) - Math.log(1.0 - r));  this.fisherZ=fisherZ;  if (Double.isNaN(fisherZ)) {    return true;  }  double pValue=2.0 * (1.0 - RandomUtil.getInstance().normalCdf(0,1,Math.abs(fisherZ)));  return pValue > alpha;}  }
class C{  public IndexMate(Table newTable,int id,String name,IndexColumn[] newIndexColumns,IndexType newIndexType){  initSchemaObjectBase(newTable.getSchema(),id,name,Trace.INDEX);  this.indexType=newIndexType;  this.table=newTable;  if (newIndexColumns != null) {    this.indexColumns=newIndexColumns;    columns=new Column[newIndexColumns.length];    int len=columns.length;    columnIds=new int[len];    for (int i=0; i < len; i++) {      Column col=newIndexColumns[i].column;      columns[i]=col;      columnIds[i]=col.getColumnId();    }  }}  }
class C{  @Override public void configure(final HttpSecurity http) throws Exception {  http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.NEVER).and().authorizeRequests().antMatchers(HttpMethod.GET,"/delete/**").access("#oauth2.hasScope('uid')").and().authorizeRequests().antMatchers(HttpMethod.GET,"/init/**").access("#oauth2.hasScope('uid')");}  }
class C{  public static void initFonts(){  try {    final String fontMaps=System.getProperty("org.jpedal.fontmaps");    if (fontMaps != null) {      final StringTokenizer fontPaths=new StringTokenizer(fontMaps,",");      while (fontPaths.hasMoreTokens()) {        final String fontPath=fontPaths.nextToken();        final StringTokenizer values=new StringTokenizer(fontPath,"=:");        final int count=values.countTokens() - 1;        final String[] nameInPDF=new String[count];        final String key=values.nextToken();        for (int i=0; i < count; i++) {          nameInPDF[i]=values.nextToken();        }        setSubstitutedFontAliases(key,nameInPDF);      }    }  } catch (  final Exception e) {    LogWriter.writeLog("Unable to read org.jpedal.fontmaps " + e.getMessage());  }  try {    final String fontDirs=System.getProperty("org.jpedal.fontdirs");    String failed=null;    if (fontDirs != null) {      failed=FontMappings.addFonts(fontDirs,failed);    }    if (failed != null) {      LogWriter.writeLog("Could not find " + failed);    }  } catch (  final Exception e) {    LogWriter.writeLog("Unable to read FontDirs " + e.getMessage());  }}  }
class C{  public void paintToggleButtonBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private int add(CharSequence value,long[] bloom,int[] bloomSeeds,long bloomMask){  int i=bloomSeeds.length;  int seen=1;  while (--i >= 0) {    seen=updateBloom(bloom,bloomMask,seen,MurmurHash.hash32(value,bloomSeeds[i]));  }  memberCount++;  return seen;}  }
class C{  public String minWindow(String s,String t){  String res="";  int[] tCnt=new int[256];  for (  char c : t.toCharArray()) {    tCnt[c]++;  }  int minLen=Integer.MAX_VALUE;  int count=t.length();  for (int start=0, end=0; end < s.length(); end++) {    if (tCnt[s.charAt(end)]-- > 0) {      count--;    }    while (count == 0) {      if (end - start + 1 < minLen) {        minLen=end - start + 1;        res=s.substring(start,end + 1);      }      if (++tCnt[s.charAt(start++)] > 0) {        count++;      }    }  }  return res;}  }
class C{  public static <T>FileWriterFlushConfig<T> newConfig(int cntTuples,long periodMsec,Predicate<T> tuplePredicate){  return new FileWriterFlushConfig<>(cntTuples,periodMsec,tuplePredicate);}  }
class C{  private void emitDataFrame(boolean outFinished) throws IOException {  long toWrite;synchronized (FramedStream.this) {    writeTimeout.enter();    try {      while (bytesLeftInWriteWindow <= 0 && !finished && !closed && errorCode == null) {        waitForIo();      }    }  finally {      writeTimeout.exitAndThrowIfTimedOut();    }    checkOutNotClosed();    toWrite=Math.min(bytesLeftInWriteWindow,sendBuffer.size());    bytesLeftInWriteWindow-=toWrite;  }  writeTimeout.enter();  try {    connection.writeData(id,outFinished && toWrite == sendBuffer.size(),sendBuffer,toWrite);  }  finally {    writeTimeout.exitAndThrowIfTimedOut();  }}  }
class C{  public boolean isI_IsImported(){  Object oo=get_Value(COLUMNNAME_I_IsImported);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void checkTurnoutAlignment(){  Sensor sensor=this.getTurnoutsAlgdSensor();  if (sensor != null) {    try {      if (this.isRouteBusy()) {        sensor.setKnownState(Sensor.INCONSISTENT);        return;      }      for (      OutputTurnout ot : this._outputTurnoutList) {        Turnout turnout=ot.getTurnout();        int targetState=ot.getState();        if (!turnout.isConsistentState()) {          sensor.setKnownState(Sensor.INCONSISTENT);          return;        }        if (targetState != Route.TOGGLE && targetState != turnout.getKnownState()) {          sensor.setKnownState(Sensor.INACTIVE);          return;        }      }      sensor.setKnownState(Sensor.ACTIVE);    } catch (    JmriException ex) {      log.warn("Exception setting sensor {} in route",getTurnoutsAlignedSensor());    }  }}  }
class C{  @Override public void init(RandomGenerator random){  this.clusters.clear();  double sizeSum=0.0d;  int numberOfClusters=2;  for (int i=0; i < numberOfClusters; i++) {    double[] coordinates=new double[numberOfAttributes];    double[] sigmas=new double[numberOfAttributes];    for (int j=0; j < coordinates.length; j++) {      coordinates[j]=random.nextDoubleInRange(lowerBound,upperBound);      sigmas[j]=random.nextDouble();    }    int labelIndex=label.getMapping().mapString("cluster" + i);    double size=random.nextDouble();    sizeSum+=size;    this.clusters.add(new Cluster(coordinates,sigmas,size,labelIndex));  }  Iterator i=this.clusters.iterator();  while (i.hasNext()) {    Cluster cluster=(Cluster)i.next();    cluster.size/=sizeSum;  }}  }
class C{  public String toString(){  return this.getState().name();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:26.541 -0500",hash_original_method="21950621664F241C91FE4E959BCE80F5",hash_generated_method="8D17A7D6545AFF55B795464598770CC6") protected T childValue(T parentValue){  return parentValue;}  }
class C{  public boolean isFrozen(){  return true;}  }
class C{  static double biLinearValueInterpolation(SpatialGrid sg,double xCoord,double yCoord){  double xDif=(xCoord - sg.getXmin()) % sg.getResolution();  double yDif=(yCoord - sg.getYmin()) % sg.getResolution();  double x1=xCoord - xDif;  double x2=x1 + sg.getResolution();  double y1=yCoord - yDif;  double y2=y1 + sg.getResolution();  double xWeight=xDif / sg.getResolution();  double yWeight=yDif / sg.getResolution();  if (xDif == 0) {    if (yDif == 0) {      return sg.getValue(xCoord,yCoord);    }    return sg.getValue(x1,y1) * (1 - yWeight) + sg.getValue(x1,y2) * yWeight;  }  if (yDif == 0) {    return sg.getValue(x1,y1) * (1 - xWeight) + sg.getValue(x2,y1) * xWeight;  }  return (sg.getValue(x1,y1) * (1 - yWeight) + sg.getValue(x1,y2) * yWeight) * (1 - xWeight) + (sg.getValue(x2,y1) * (1 - yWeight) + sg.getValue(x2,y2) * yWeight) * xWeight;}  }
class C{  private static int checkTypeVariableSignature(final String signature,int pos){  pos=checkChar('T',signature,pos);  pos=checkIdentifier(signature,pos);  return checkChar(';',signature,pos);}  }
class C{  public <R>MapStream<R,V> mapKey(BiFunction<? super K,? super V,? extends R> mapper){  return new MapStream<>(inner.map(null));}  }
class C{  boolean alwaysOnTop(){  return true;}  }
class C{  public void testDoConfigureSetsPort() throws Exception {  configuration.setProperty(ServletPropertySet.PORT,PORT);  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(PORT,"//weblogic:listen-port",config);}  }
class C{  private Object readResolve(){  return ToStringStyle.SHORT_PREFIX_STYLE;}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xBB70706F,version=150) public int sceHttpSendRequest(int requestId,@CanBeNull @BufferInfo(lengthInfo=LengthInfo.nextParameter,usage=Usage.in) TPointer data,int dataSize){  HttpRequest httpRequest=getHttpRequest(requestId);  httpRequest.send(data.getAddress(),dataSize);  return 0;}  }
class C{  public final AlgVector substract(AlgVector other){  int n=m_Elements.length;  AlgVector b;  try {    b=(AlgVector)clone();  } catch (  CloneNotSupportedException ex) {    b=new AlgVector(n);  }  for (int i=0; i < n; i++) {    b.m_Elements[i]=m_Elements[i] - other.m_Elements[i];  }  return b;}  }
class C{  public Builder rootView(int rootViewRes){  if (activity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  return rootView((ViewGroup)activity.findViewById(rootViewRes));}  }
class C{  public static byte[] fromHexString(String s){  char[] rawChars=s.toUpperCase().toCharArray();  int hexChars=0;  for (int i=0; i < rawChars.length; i++) {    if ((rawChars[i] >= '0' && rawChars[i] <= '9') || (rawChars[i] >= 'A' && rawChars[i] <= 'F')) {      hexChars++;    }  }  byte[] byteString=new byte[(hexChars + 1) >> 1];  int pos=hexChars & 1;  for (int i=0; i < rawChars.length; i++) {    if (rawChars[i] >= '0' && rawChars[i] <= '9') {      byteString[pos >> 1]<<=4;      byteString[pos >> 1]|=rawChars[i] - '0';    } else     if (rawChars[i] >= 'A' && rawChars[i] <= 'F') {      byteString[pos >> 1]<<=4;      byteString[pos >> 1]|=rawChars[i] - 'A' + 10;    } else {      continue;    }    pos++;  }  return byteString;}  }
class C{  @Override public String toString(){  return "[id=" + id + ",length="+ length+ "]";}  }
class C{  protected String r(String s,String u) throws Exception {  Date d=parser.parse(s);  Calendar c=Calendar.getInstance(UTC,Locale.ROOT);  c.setTime(d);  DateMathParser.round(c,u);  return fmt.format(c.getTime());}  }
class C{  public InstanceContent(long index,Instance instance,boolean isTraining,boolean isTesting){  if (instance != null) {    this.instance=new SerializableInstance(instance);  }  this.instanceIndex=index;  this.isTraining=isTraining;  this.isTesting=isTesting;}  }
class C{  public PercentEscaper(String safeChars,boolean plusForSpace){  if (safeChars.matches(".*[0-9A-Za-z].*")) {    throw new IllegalArgumentException("Alphanumeric characters are always 'safe' and should not be " + "explicitly specified");  }  if (plusForSpace && safeChars.contains(" ")) {    throw new IllegalArgumentException("plusForSpace cannot be specified when space is a 'safe' character");  }  if (safeChars.contains("%")) {    throw new IllegalArgumentException("The '%' character cannot be specified as 'safe'");  }  this.plusForSpace=plusForSpace;  this.safeOctets=createSafeOctets(safeChars);}  }
class C{  public Map<String,Class<?>> mapAllClasses(String uri) throws IOException, ClassNotFoundException {  Map<String,Class<?>> classes=new HashMap<>();  Map<String,String> map=mapAllStrings(uri);  for (Iterator<Entry<String,String>> iterator=map.entrySet().iterator(); iterator.hasNext(); ) {    Entry<String,String> entry=iterator.next();    String string=entry.getKey();    String className=entry.getValue();    Class<?> clazz=_classLoader.loadClass(className);    classes.put(string,clazz);  }  return classes;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (code_1: ");  result.append(code_1);  result.append(')');  return result.toString();}  }
class C{  protected void addInstance(Element parent,Instance inst){  Element node;  Element value;  Element child;  boolean sparse;  int i;  int n;  int index;  node=m_Document.createElement(TAG_INSTANCE);  parent.appendChild(node);  sparse=(inst instanceof SparseInstance);  if (sparse) {    node.setAttribute(ATT_TYPE,VAL_SPARSE);  }  if (inst.weight() != 1.0) {    node.setAttribute(ATT_WEIGHT,Utils.doubleToString(inst.weight(),m_Precision));  }  for (i=0; i < inst.numValues(); i++) {    index=inst.index(i);    value=m_Document.createElement(TAG_VALUE);    node.appendChild(value);    if (inst.isMissing(index)) {      value.setAttribute(ATT_MISSING,VAL_YES);    } else {      if (inst.attribute(index).isRelationValued()) {        child=m_Document.createElement(TAG_INSTANCES);        value.appendChild(child);        for (n=0; n < inst.relationalValue(i).numInstances(); n++) {          addInstance(child,inst.relationalValue(i).instance(n));        }      } else {        if (inst.attribute(index).type() == Attribute.NUMERIC) {          value.appendChild(m_Document.createTextNode(Utils.doubleToString(inst.value(index),m_Precision)));        } else {          value.appendChild(m_Document.createTextNode(validContent(inst.stringValue(index))));        }      }    }    if (sparse) {      value.setAttribute(ATT_INDEX,"" + (index + 1));    }  }}  }
class C{  public void error(SAXParseException e) throws SAXException {  javax.xml.transform.ErrorListener errorListener=m_transformer.getErrorListener();  if (errorListener instanceof ErrorHandler) {    ((ErrorHandler)errorListener).error(e);    if (null != m_errorHandler)     m_errorHandler.error(e);  } else {    try {      errorListener.error(new javax.xml.transform.TransformerException(e));      if (null != m_errorHandler)       m_errorHandler.error(e);    } catch (    javax.xml.transform.TransformerException te) {      throw e;    }  }}  }
class C{  public final boolean isUnresolved(){  return addr == null;}  }
class C{  public static DeleteServiceSessionResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeleteServiceSessionResponse object=new DeleteServiceSessionResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"deleteServiceSessionResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (DeleteServiceSessionResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","return").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.set_return(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void testMinorCompaction() throws Throwable {  writeEntries(31);  assertEquals(log.length(),31L);  for (long index=21; index < 28; index++) {    log.release(index);  }  log.commit(31).compactor().minorIndex(31);  CountDownLatch latch=new CountDownLatch(1);  log.compactor().compact(Compaction.MINOR).thenRun(null);  latch.await();  assertEquals(log.length(),31L);  for (long index=21; index < 28; index++) {    assertTrue(log.lastIndex() >= index);    if (index % 2 != 0) {      assertFalse(log.contains(index));      try (TestEntry entry=log.get(index)){        assertNull(entry);      }     } else {      assertTrue(log.contains(index));      try (TestEntry entry=log.get(index)){        assertNotNull(entry);      }     }  }}  }
class C{  protected Anonymous_constraintBody_1_Impl(){  super();}  }
class C{  public void test_smallSlotRecycling(){  final Journal store=(Journal)getSmallSlotStore(1024);  try {    final RWStrategy bufferStrategy=(RWStrategy)store.getBufferStrategy();    final RWStore rw=bufferStrategy.getStore();    final int cSlotSize=128;    final int cAllocSize=99;    int breaks=0;    int contiguous=0;    ArrayList<Integer> recycle=new ArrayList<Integer>();    long pap=rw.physicalAddress(rw.alloc(cAllocSize,null));    for (int i=0; i < 500000; i++) {      final int a=rw.alloc(cSlotSize,null);      final long pa=rw.physicalAddress(a);      if (r.nextInt(7) < 5) {        recycle.add(a);      }      if (pa == (pap + cSlotSize)) {        contiguous++;      } else {        breaks++;      }      pap=pa;      if (recycle.size() > 5000) {        log.warn("Transient Frees for immediate recyling");        for (        int e : recycle) {          rw.free(e,cAllocSize);        }        recycle.clear();      }    }    store.commit();    final StringBuilder sb=new StringBuilder();    rw.showAllocators(sb);    log.warn("Contiguous: " + contiguous + ", breaks: "+ breaks+ "\n"+ sb.toString());  }  finally {    store.destroy();  }}  }
class C{  public Vertex details(Vertex source,Vertex vertex,Vertex vertex2,Vertex vertex3,Vertex vertex4,Vertex vertex5){  return discover(true,false,null,vertex,vertex2,vertex3,vertex4,vertex5);}  }
class C{  public static int hash(int aSeed,long aLong){  return firstTerm(aSeed) + (int)(aLong ^ (aLong >>> 32));}  }
class C{  public static String ensureNotEndingSlash(String path){  final int length=path.length();  return path.charAt(length - 1) == '/' ? path.substring(0,length - 1) : path;}  }
class C{  public void go(OutputStream out) throws TransformerException {  createXCalDocument().write(out,outputProperties);}  }
class C{  public void readGroup(AttributeSet attrs){  TypedArray a=mContext.obtainStyledAttributes(attrs,R.styleable.SherlockMenuGroup);  groupId=a.getResourceId(R.styleable.SherlockMenuGroup_android_id,defaultGroupId);  groupCategory=a.getInt(R.styleable.SherlockMenuGroup_android_menuCategory,defaultItemCategory);  groupOrder=a.getInt(R.styleable.SherlockMenuGroup_android_orderInCategory,defaultItemOrder);  groupCheckable=a.getInt(R.styleable.SherlockMenuGroup_android_checkableBehavior,defaultItemCheckable);  groupVisible=a.getBoolean(R.styleable.SherlockMenuGroup_android_visible,defaultItemVisible);  groupEnabled=a.getBoolean(R.styleable.SherlockMenuGroup_android_enabled,defaultItemEnabled);  a.recycle();}  }
class C{  public AnimationBuilder andAnimate(View... views){  return viewAnimator.addAnimationBuilder(views);}  }
class C{  public void addSubAction(SubAction sub){  list.add(sub);}  }
class C{  protected TAnnotationImpl(){  super();}  }
class C{  public ManagedBean addDynamicAttributes(ManagedBean managed) throws org.apache.geode.admin.AdminException {  return Helper.addDynamicAttributes(this,managed);}  }
class C{  protected LatLon greatCircleIntersectionAtLatitude(LatLon p1,LatLon p2,Angle latitude){  LatLon pos=null;  if (Math.signum(p1.getLatitude().degrees - latitude.degrees) != Math.signum(p2.getLatitude().degrees - latitude.degrees)) {    int count=0;    double precision=1d / 6378137d;    LatLon a=p1;    LatLon b=p2;    LatLon midPoint=greatCircleMidPoint(a,b);    while (Math.abs(midPoint.getLatitude().radians - latitude.radians) > precision && count <= 20) {      count++;      if (Math.signum(a.getLatitude().degrees - latitude.degrees) != Math.signum(midPoint.getLatitude().degrees - latitude.degrees))       b=midPoint; else       a=midPoint;      midPoint=greatCircleMidPoint(a,b);    }    pos=midPoint;  }  if (pos != null)   pos=new LatLon(latitude,pos.getLongitude());  return pos;}  }
class C{  protected byte[] readResource(final String nameResource) throws IOException {  byte[] classBuffer=null;  int i=0;synchronized (m_jarVect) {    while (classBuffer == null && i < m_jarVect.size()) {      classBuffer=readEntryFromJar((String)m_jarVect.elementAt(i),nameResource);      i++;    }  }  return classBuffer;}  }
class C{  @VisibleForTesting void registerMetric(String name,Metric<?> metric){  Metric<?> previousMetric=registeredMetrics.putIfAbsent(name,metric);  checkState(previousMetric == null,"Duplicate metric of same name: %s",name);}  }
class C{  public void rejectDrop(){  getDropTargetContext().rejectDrop();}  }
class C{  public void prepare(String name) throws ReplicatorException, InterruptedException {  UniversalDataSource ds=find(name);  ds.prepare();}  }
class C{  public CStandardBottomPanel(){  super(new FilledList<IResultsPanel>());}  }
class C{  @Deprecated protected boolean doAction(){  return true;}  }
class C{  protected RexNode adjustInputRef(Blackboard bb,RexInputRef inputRef){  RelDataTypeField field=bb.getRootField(inputRef);  if (field != null) {    return rexBuilder.makeInputRef(field.getType(),inputRef.getIndex());  }  return inputRef;}  }
class C{  protected String doIt(){  createBalanceLine();  createDetailLines();  log.fine((System.currentTimeMillis() - m_start) + " ms");  return "";}  }
class C{  public void stripDirectory(String directory,String nameMustContain){  if (directory == null)   throw new NullPointerException("Strip: directory cannot be null");  File dir=new File(directory);  if (!dir.exists() || !dir.isDirectory())   throw new IllegalArgumentException("Strip: directory  does not exist or is not a directory: " + dir);  File[] list=dir.listFiles();  if (list == null)   return;  if (VERBOSE)   System.out.println("Stripping directory: " + dir);  for (int i=0; i < list.length; i++) {    String name=list[i].getAbsolutePath();    if (list[i].isDirectory())     stripDirectory(name,nameMustContain); else     if (nameMustContain == null || name.indexOf(nameMustContain) != -1)     strip(list[i],null);  }}  }
class C{  public static byte[] convertObjectToJsonBytes(Object object) throws IOException {  ObjectMapper mapper=new ObjectMapper();  mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);  JavaTimeModule module=new JavaTimeModule();  module.addSerializer(OffsetDateTime.class,JSR310DateTimeSerializer.INSTANCE);  module.addSerializer(ZonedDateTime.class,JSR310DateTimeSerializer.INSTANCE);  module.addSerializer(LocalDateTime.class,JSR310DateTimeSerializer.INSTANCE);  module.addSerializer(Instant.class,JSR310DateTimeSerializer.INSTANCE);  module.addDeserializer(LocalDate.class,JSR310LocalDateDeserializer.INSTANCE);  mapper.registerModule(module);  return mapper.writeValueAsBytes(object);}  }
class C{  public static double nextTriangular(RandomEngine randomGenerator){  double u;  u=randomGenerator.raw();  if (u <= 0.5)   return (Math.sqrt(2.0 * u) - 1.0); else   return (1.0 - Math.sqrt(2.0 * (1.0 - u)));}  }
class C{  public void componentFromIterableColumn(String componentName,ValueType valueType,ValueByteOrder valueByteOrder,String sourceColumnName,String codeToAccessValue){  addComponent(IndexComponent.createIterableFromColumn(new NameComponentDescription(componentName,valueType,valueByteOrder),sourceColumnName,codeToAccessValue));}  }
class C{  public void addCookie(final Cookie cookie){  cookies.add(cookie);  super.addCookie(cookie);}  }
class C{  public static long computeBlockIndex(long cellIndex,int blockSize){  return (cellIndex - 1) / blockSize + 1;}  }
class C{  protected void checkAndUpdateConfigFile() throws IOException {  List<String> subversionConfigContent=Files.readAllLines(GLOBAL_SUBVERSION_CONFIG_FILE_PATH,Charset.forName("UTF-8"));  int miscellanySectionIndex=-1;  int globalIgnoresIndex=-1;  boolean ignoreSectionCommented=true;  for (int i=0; i < subversionConfigContent.size(); i++) {    String line=subversionConfigContent.get(i);    if (line.startsWith("[miscellany]")) {      miscellanySectionIndex=i;    } else     if (line.trim().startsWith("# global-ignores")) {      globalIgnoresIndex=i;      ignoreSectionCommented=true;      break;    } else     if (line.trim().startsWith("global-ignores")) {      globalIgnoresIndex=i;      ignoreSectionCommented=false;      break;    }  }  if (miscellanySectionIndex == -1) {    subversionConfigContent.add("[miscellany]");    subversionConfigContent.add("global-ignores = " + getDefaultExcludes());  } else   if (globalIgnoresIndex == -1) {    subversionConfigContent.add(miscellanySectionIndex,"global-ignores = " + getDefaultExcludes());  } else {    String configParameter=subversionConfigContent.get(globalIgnoresIndex);    if (ignoreSectionCommented) {      configParameter=configParameter.substring(2).concat(" ").concat(getDefaultExcludes());    } else {      Iterable<String> filteredExcludes=filterExistingExcludes(configParameter,SUBVERSION_IGNORE_PATTERNS);      configParameter=configParameter.concat(" ").concat(Joiner.on(" ").join(filteredExcludes));    }    subversionConfigContent.set(globalIgnoresIndex,configParameter);  }  updateConfigFile(Joiner.on('\n').join(subversionConfigContent),GLOBAL_SUBVERSION_CONFIG_FILE_PATH);}  }
class C{  public static GTEToken gteToken(final long token){  return new GTEToken(token);}  }
class C{  public void close(){  this.video.close();  this.audio.close();  this.data.close();}  }
class C{  public int waitAndGetStatus() throws InterruptedException {  Object statusLock=getStatusLock();synchronized (statusLock) {    statusLock.wait();    return getStatus();  }}  }
class C{  public static boolean hasNavBar(Context context){  boolean hasBackKey=KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_BACK);  boolean hasHomeKey=KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_HOME);  if (hasBackKey && hasHomeKey) {    Display display=((Activity)context).getWindowManager().getDefaultDisplay();    Point size=new Point();    Point realSize=new Point();    display.getSize(size);    display.getRealSize(realSize);    if (Build.MANUFACTURER.toLowerCase().contains("samsung") && !Build.MODEL.toLowerCase().contains("nexus")) {      return false;    }    try {      return Math.max(size.x,size.y) < Math.max(realSize.x,realSize.y) || (context.getResources().getBoolean(R.bool.isTablet) && context.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE);    } catch (    Exception e) {      Resources resources=context.getResources();      int id=resources.getIdentifier("config_showNavigationBar","bool","android");      if (id > 0) {        return resources.getBoolean(id);      } else {        return false;      }    }  } else {    return true;  }}  }
class C{  public void start() throws IOException {  switchToFile(FileUsageLoggingClient.ensureUsageFile(mUsageDir,getDate()));  try {    mServer=HttpServer.create(new InetSocketAddress(mPort),50);  } catch (  IOException e) {    throw new NoTalkbackSlimException("Could not create socket on port " + mPort + ". "+ e.getMessage());  }  mServer.createContext("/",new UsageHandler());  mServer.setExecutor(mThreadPoolExecutor);  mServer.start();}  }
class C{  public Floor(){  try {    defimg=ImageIO.read(getClass().getClassLoader().getResourceAsStream("uk/chromis/images/floors.png"));  } catch (  Exception fnfe) {  }}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  builder.put(k2,v2);  builder.put(k3,v3);  builder.put(k4,v4);  builder.put(k5,v5);  return builder.build();}  }
class C{  public boolean undeployed(){  return usage.getReference();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeclonenodefalse.class,args);}  }
class C{  public void run(){  try {    String line;    do {      line=reader.readLine();      if (line != null) {        line=line.trim();        if (line.toLowerCase().equals("end")) {          return;        }synchronized (waiter) {          appendBuffer.append(line + "\n");        }        waiter.indicateChange();      }    } while (line != null);  } catch (  Exception e) {    if (!shutDown) {      e.printStackTrace();    }  } finally {    if (!socket.isClosed()) {      try {        socket.close();      } catch (      IOException ex) {        ex.printStackTrace();      }    }  }}  }
class C{  public void put_element(int i,Object o){  int low=0;  int high=cache_size;  int pos=0;  int j;  high=lookup(i);  if (high == cache_size) {    pos=high - 1;  } else {    pos=high;  }  ;  if ((index[pos] != i) || (last_used[pos] == 0)) {    if (index[pos] == i) {      low=pos;    } else {      low=get_lru_pos();    }    ;    Object[] my_elements=elements;    long[] my_last_used=last_used;    int[] my_index=index;    if (high <= low) {      for (j=low; j > high; j--) {        my_elements[j]=my_elements[j - 1];        my_index[j]=my_index[j - 1];        my_last_used[j]=my_last_used[j - 1];      }      ;    } else {      for (j=low; j < high - 1; j++) {        my_elements[j]=my_elements[j + 1];        my_index[j]=my_index[j + 1];        my_last_used[j]=my_last_used[j + 1];      }      ;      high--;    }    ;    pos=high;    my_elements[high]=o;    my_index[high]=i;  }  ;  counter++;  last_used[pos]=counter;}  }
class C{  public final void testIsSatisfiedSucceeds(){  ContainsLetterConstraint containsLetterConstraint=new ContainsLetterConstraint();  assertTrue(containsLetterConstraint.isSatisfied("123a123"));  assertTrue(containsLetterConstraint.isSatisfied("123A123"));}  }
class C{  public T caseTypedElement(TypedElement object){  return null;}  }
class C{  protected void initDataBindings(){  JTableBinding<TvShowChooserModel,List<TvShowChooserModel>,JTable> jTableBinding=SwingBindings.createJTableBinding(UpdateStrategy.READ,tvShowsFound,table);  BeanProperty<TvShowChooserModel,String> tvShowChooserModelBeanProperty=BeanProperty.create("combinedName");  jTableBinding.addColumnBinding(tvShowChooserModelBeanProperty).setEditable(false);  jTableBinding.bind();  BeanProperty<JTable,String> jTableBeanProperty_1=BeanProperty.create("selectedElement.overview");  BeanProperty<JTextPane,String> jTextPaneBeanProperty=BeanProperty.create("text");  AutoBinding<JTable,String,JTextPane,String> autoBinding_1=Bindings.createAutoBinding(UpdateStrategy.READ,table,jTableBeanProperty_1,tpTvShowOverview,jTextPaneBeanProperty);  autoBinding_1.bind();  BeanProperty<JTable,String> jTableBeanProperty_2=BeanProperty.create("selectedElement.posterUrl");  BeanProperty<ImageLabel,String> imageLabelBeanProperty=BeanProperty.create("imageUrl");  AutoBinding<JTable,String,ImageLabel,String> autoBinding_2=Bindings.createAutoBinding(UpdateStrategy.READ,table,jTableBeanProperty_2,lblTvShowPoster,imageLabelBeanProperty);  autoBinding_2.bind();  BeanProperty<JTable,String> jTableBeanProperty_3=BeanProperty.create("selectedElement.combinedName");  BeanProperty<JTextArea,String> jTextAreaBeanProperty_1=BeanProperty.create("text");  AutoBinding<JTable,String,JTextArea,String> autoBinding_3=Bindings.createAutoBinding(UpdateStrategy.READ,table,jTableBeanProperty_3,lblTvShowName,jTextAreaBeanProperty_1);  autoBinding_3.bind();}  }
class C{  public final boolean covdata(){  return (getFlags() & F_COVDATA) != 0;}  }
class C{  public RegionInfo(Shape s,float verticalAlignment){  this.shape=s;  this.verticalAlignment=verticalAlignment;}  }
class C{  private boolean inPullMode(){  checkState(STATE.isActive,"No test is active");  return STATE.expectedSubscription != null;}  }
class C{  public static <V,C extends Collection<? super V>>C addAll(C c,V... vals){  Collections.addAll(c,vals);  return c;}  }
class C{  public boolean isUnindexSupported(){  return true;}  }
class C{  public static Matrix constructWithCopy(double[][] A){  int m=A.length;  int n=A[0].length;  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    if (A[i].length != n) {      throw new IllegalArgumentException("All rows must have the same length.");    }    for (int j=0; j < n; j++) {      C[i][j]=A[i][j];    }  }  return X;}  }
