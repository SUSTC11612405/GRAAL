class C{  public Statement copyInline(Context ctx,boolean valNeeded){  VarDeclarationStatement s=(VarDeclarationStatement)clone();  if (expr != null) {    s.expr=expr.copyInline(ctx);  }  return s;}  }
class C{  public BandedSampleModel(int dataType,int w,int h,int scanlineStride,int bankIndices[],int bandOffsets[]){  super(dataType,w,h,1,scanlineStride,bankIndices,bandOffsets);}  }
class C{  public boolean isIncludeNullsUserElement1(){  Object oo=get_Value(COLUMNNAME_IsIncludeNullsUserElement1);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Ifle2(){  super("ifle2",2);}  }
class C{  public ListProcessesParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_LIST_PROCESSES_SUCCESS);}  }
class C{  public void addSpiderListener(SpiderListener listener){  this.listeners.add(listener);}  }
class C{  public static boolean isData(Object potentialData){  if (potentialData instanceof Object[][]) {    Object[][] o=(Object[][])potentialData;    if (o.length > 0 && o[0].length == 2 && ArrayFuncs.getBaseClass(o[0][0]) == ArrayFuncs.getBaseClass(o[0][1])) {      String cn=o[0][0].getClass().getName();      if (cn.length() == 2 && cn.charAt(1) != 'Z' || cn.charAt(1) != 'C') {        return true;      }    }  }  return false;}  }
class C{  public ExpireRule(int expireTime){  this.expireTime=expireTime;}  }
class C{  public boolean waitForAppliedEvent(String event,long timeout) throws Exception {  HashMap<String,String> args=new HashMap<String,String>();  args.put(ARG_EVENT,event);  args.put(ARG_TIMEOUT,new Long(timeout).toString());  runScript(CMD_WAITEVENT,args);  return true;}  }
class C{  public Allpass(double[] k){  this.k=k.clone();  order=this.k.length;  state=new double[order + 1];  constructRationalRepresentation();}  }
class C{  public PushDownDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.PUSH_DOWN,project,description,comment,arguments,flags);}  }
class C{  static void checkDesc(final String desc,final boolean canBeVoid){  int end=checkDesc(desc,0,canBeVoid);  if (end != desc.length()) {    throw new IllegalArgumentException("Invalid descriptor: " + desc);  }}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public final <T extends Extension>boolean hasExtension(Class<T> extensionClass){  return nonRepeatingExtensionMap.containsKey(extensionClass);}  }
class C{  static boolean isValidShortcutLaunchIntent(Intent launchIntent){  if (launchIntent != null && Intent.ACTION_MAIN.equals(launchIntent.getAction()) && launchIntent.getComponent() != null && launchIntent.getCategories() != null && launchIntent.getCategories().size() == 1 && launchIntent.hasCategory(Intent.CATEGORY_LAUNCHER) && launchIntent.getExtras() == null && TextUtils.isEmpty(launchIntent.getDataString())) {    return false;  }  return true;}  }
class C{  protected void initializeWorld(){  this.world=new World();  Rectangle floorRect=new Rectangle(15.0,1.0);  GameObject floor=new GameObject();  floor.addFixture(new BodyFixture(floorRect));  floor.setMass(MassType.INFINITE);  floor.translate(0.0,-4.0);  this.world.addBody(floor);  Triangle triShape=new Triangle(new Vector2(0.0,0.5),new Vector2(-0.5,-0.5),new Vector2(0.5,-0.5));  GameObject triangle=new GameObject();  triangle.addFixture(triShape);  triangle.setMass(MassType.NORMAL);  triangle.translate(-1.0,2.0);  triangle.getLinearVelocity().set(5.0,0.0);  this.world.addBody(triangle);  Rectangle rectShape=new Rectangle(1.0,1.0);  GameObject rectangle=new GameObject();  rectangle.addFixture(rectShape);  rectangle.setMass(MassType.NORMAL);  rectangle.translate(0.0,2.0);  rectangle.getLinearVelocity().set(-5.0,0.0);  this.world.addBody(rectangle);  Polygon polyShape=Geometry.createUnitCirclePolygon(10,1.0);  GameObject polygon=new GameObject();  polygon.addFixture(polyShape);  polygon.setMass(MassType.NORMAL);  polygon.translate(-2.5,2.0);  polygon.setAngularVelocity(Math.toRadians(-20.0));  this.world.addBody(polygon);  GameObject issTri=new GameObject();  issTri.addFixture(Geometry.createIsoscelesTriangle(1.0,3.0));  issTri.setMass(MassType.NORMAL);  issTri.translate(2.0,3.0);  this.world.addBody(issTri);  GameObject equTri=new GameObject();  equTri.addFixture(Geometry.createEquilateralTriangle(2.0));  equTri.setMass(MassType.NORMAL);  equTri.translate(3.0,3.0);  this.world.addBody(equTri);  GameObject rightTri=new GameObject();  rightTri.addFixture(Geometry.createRightTriangle(2.0,1.0));  rightTri.setMass(MassType.NORMAL);  rightTri.translate(4.0,3.0);  this.world.addBody(rightTri);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj instanceof SymbolicXYItemLabelGenerator) {    return true;  }  return false;}  }
class C{  public static Thread makeSameThread(){  if (runningMainThread()) {    return new MainThread();  } else {    return new WorkerThread();  }}  }
class C{  private void closeStartTag() throws XMLStreamException {  if (_currentEle.isEmpty()) {    _writer.write(CLOSE_EMPTY_ELEMENT);  } else {    _writer.write(CLOSE_START_TAG);  }  if (_currentEle.getParent() == null) {    writeLineSeparator();  }  _currentEle.setState(ELEMENT_STARTTAG_CLOSE);}  }
class C{  private ITag readTagHeader(){  fillBuffer(15);  int previousTagSize=in.getInt();  byte dataType=in.get();  if (dataType != 8 && dataType != 9 && dataType != 18) {    log.debug("Invalid data type detected, skipping crap-bytes");    in.skip(51);    dataType=in.get();  }  int bodySize=IOUtils.readUnsignedMediumInt(in);  int timestamp=IOUtils.readExtendedMediumInt(in);  if (log.isDebugEnabled()) {  } else {    in.skip(3);  }  return new Tag(dataType,timestamp,bodySize,null,previousTagSize);}  }
class C{  public void paintPopupMenuBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static Vector3 min(Vector3 o1,Vector3 o2){  return new Vector3(Math.min(o1.x,o2.x),Math.min(o1.y,o2.y),Math.min(o1.z,o2.z));}  }
class C{  public Alert createAlert(Alert alert) throws IOException {  String requestUrl=RESOURCE;  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.POST,requestUrl,alert);  assertValidResponse(response,requestUrl);  return fromJson(response.getResult(),Alert.class);}  }
class C{  @Override public UpdateResponse rollback() throws SolrServerException, IOException {  UpdateResponse ur=null;  if (this.solr0 != null)   ur=this.solr0.rollback();  if (this.solr1 != null)   ur=this.solr1.rollback();  return ur;}  }
class C{  public void commitTx(Transaction tx) throws VerificationException {  checkArgument(maybeCommitTx(tx),"commitTx called on the same transaction twice");}  }
class C{  void ortbnd(double[] alf,double[] eta,double[] oldeta,double[] bet,int step,double rnm){  int i;  if (step < 1)   return;  if (0 != rnm) {    if (step > 1) {      oldeta[0]=(bet[1] * eta[1] + (alf[0] - alf[step]) * eta[0] - bet[step] * oldeta[0]) / rnm + eps1;    }    for (i=1; i <= step - 2; i++)     oldeta[i]=(bet[i + 1] * eta[i + 1] + (alf[i] - alf[step]) * eta[i] + bet[i] * eta[i - 1] - bet[step] * oldeta[i]) / rnm + eps1;  }  oldeta[step - 1]=eps1;  svd_dswap(step,oldeta,1,eta,1);  eta[step]=eps1;  return;}  }
class C{  public static Device findDevice(short vendorId,short productId){  DeviceList list=new DeviceList();  int result=LibUsb.getDeviceList(null,list);  if (result < 0)   throw new LibUsbException("Unable to get device list",result);  System.out.println("USB DEVICE LIST COMPLETE");  try {    for (    Device device : list) {      DeviceDescriptor descriptor=new DeviceDescriptor();      result=LibUsb.getDeviceDescriptor(device,descriptor);      if (result != LibUsb.SUCCESS)       throw new LibUsbException("Unable to read device descriptor",result);      if (descriptor.idVendor() == vendorId && descriptor.idProduct() == productId)       return device;    }  }  finally {    LibUsb.freeDeviceList(list,true);  }  return null;}  }
class C{  static String decodeString(ByteBuf in) throws UnsupportedEncodingException {  return new String(readFixedLengthContent(in),"UTF-8");}  }
class C{  public void translate(int deltaX,int deltaY){  for (int i=0; i < npoints; i++) {    xpoints[i]+=deltaX;    ypoints[i]+=deltaY;  }  if (bounds != null) {    bounds.translate(deltaX,deltaY);  }}  }
class C{  public void testAddPackage2(){  try {    IWapPushManager iwapman=getInterface();    iwapman.addPackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName,0,false,false);    iwapman.addPackage(Integer.toString(mAppIdValue + 10),Integer.toString(mContentTypeValue),mPackageName,mClassName,0,false,false);    iwapman.addPackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue + 10),mPackageName,mClassName,0,false,false);    assertFalse(iwapman.addPackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName,0,false,false));    assertFalse(iwapman.addPackage(Integer.toString(mAppIdValue + 10),Integer.toString(mContentTypeValue),mPackageName,mClassName,0,false,false));    assertFalse(iwapman.addPackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue + 10),mPackageName,mClassName,0,false,false));    iwapman.deletePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName);    iwapman.deletePackage(Integer.toString(mAppIdValue + 10),Integer.toString(mContentTypeValue),mPackageName,mClassName);    iwapman.deletePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue + 10),mPackageName,mClassName);  } catch (  RemoteException e) {    assertTrue(false);  }}  }
class C{  private boolean maybeShowNativePage(String url,boolean isReload){  NativePage candidateForReuse=isReload ? null : getNativePage();  NativePage nativePage=NativePageFactory.createNativePageForURL(url,candidateForReuse,this,mActivity.getTabModelSelector(),mActivity);  if (nativePage != null) {    showNativePage(nativePage);    notifyPageTitleChanged();    notifyFaviconChanged();    return true;  }  return false;}  }
class C{  public boolean hasStoredClustering(){  return curDataSet != null;}  }
class C{  public static <T>T[] toSorted(T[] self){  return toSorted(self,new NumberAwareComparator<T>());}  }
class C{  public static BigDecimal createBigDecimal(final String str){  if (str == null) {    return null;  }  if (StringUtils.isBlank(str)) {    throw new NumberFormatException("A blank string is not a valid number");  }  if (str.trim().startsWith("--")) {    throw new NumberFormatException(str + " is not a valid number.");  }  return new BigDecimal(str);}  }
class C{  @Override public boolean send(Bytestring message) throws InterruptedException, IOException {  String receivedMessage;  try {    receivedMessage=sessionImpl.transformReceiving(new String(message.bytes));    if (!encrypted) {      messageCount++;      if (messageCount == 2) {        chan.send(true);        encrypted=true;      }    }  } catch (  OtrException e) {    chan.send(false);    this.close();    return false;  }  if (receivedMessage == null) {    return true;  }  chan.close();  try {    return z.send(new Bytestring(org.bouncycastle.util.encoders.Hex.decode(receivedMessage)));  } catch (  IOException e) {    this.close();    return false;  }}  }
class C{  public void makeSpace(int sizeNeeded){  int needed=count + sizeNeeded - buf.length;  if (needed > 0) {    bump(needed);  }}  }
class C{  public ArgsParser(String[] args,JoshuaConfiguration config) throws IOException {  if (args.length >= 1) {    for (int i=0; i < args.length; i++) {      if (args[i].equals("-v")) {        Decoder.VERBOSE=Integer.parseInt(args[i + 1].trim());        config.setVerbosity(Decoder.VERBOSE);      }      if (args[i].equals("-version")) {        System.out.println(String.format("The Apache Joshua Machine Translator, version %s",Constants.VERSION));        System.out.println("http://joshua.apache.org/");        System.exit(0);      } else       if (args[i].equals("-license")) {        try {          Files.readAllLines(Paths.get(String.format("%s/../LICENSE",JoshuaConfiguration.class.getProtectionDomain().getCodeSource().getLocation().getPath())),Charset.defaultCharset()).forEach(null);        } catch (        IOException e) {          throw new RuntimeException("FATAL: missing license file!",e);        }        System.exit(0);      }    }    for (int i=args.length - 1; i >= 0; i--) {      if (args[i].equals("-c") || args[i].equals("-config")) {        setConfigFile(args[i + 1].trim());        try {          LOG.info("Parameters read from configuration file: {}",getConfigFile());          config.readConfigFile(getConfigFile());        } catch (        IOException e) {          throw new RuntimeException(e);        }        break;      }    }    config.processCommandLineOptions(args);  }}  }
class C{  public int show(FragmentTransaction transaction,@IdRes int bottomSheetLayoutId){  dismissed=false;  shownByMe=true;  this.bottomSheetLayoutId=bottomSheetLayoutId;  transaction.add(fragment,String.valueOf(bottomSheetLayoutId));  viewDestroyed=false;  backStackId=transaction.commit();  return backStackId;}  }
class C{  public static boolean isJavaKeyword(String name){  return tokens.contains(name);}  }
class C{  public JSONArray put(boolean value){  this.put(value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  @Override public boolean equals(Object other){  if (other == null) {    return false;  } else   if (!(other instanceof PeerNetwork)) {    return false;  } else   if (other.getClass() != this.getClass()) {    return false;  } else   if (((PeerNetwork)other).getWifiP2pDevice() == null) {    return this.getWifiP2pDevice() == null;  }  return ((PeerNetwork)other).getWifiP2pDevice().equals(this.getWifiP2pDevice());}  }
class C{  public void write(IXMLElement xml) throws IOException {  this.write(xml,false,0,true);}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  Element map=getElement();  RSyntaxDocument doc=(RSyntaxDocument)getDocument();  int lineIndex=map.getElementIndex(pos);  Rectangle lineArea=lineToRect(a,lineIndex);  tabBase=lineArea.x;  Token tokenList=doc.getTokenListForLine(lineIndex);  lineArea=tokenList.listOffsetToView((RSyntaxTextArea)getContainer(),this,pos,tabBase,lineArea);  return lineArea;}  }
class C{  public void registerOptional2(String name,Type arg1,Type arg2,InvocationPlugin plugin){  plugins.register(plugin,true,allowOverwrite,declaringType,name,arg1,arg2);}  }
class C{  public QueryExecuteEvent(Object source,DbUtils utils,String query,int rows,ResultSet rs,Exception ex){  super(source);  m_DbUtils=utils;  m_Query=query;  m_MaxRows=rows;  m_ResultSet=rs;  m_Exception=ex;}  }
class C{  private boolean readZipFile(final File fl) throws IOException {  boolean success=false;  ZipFile zipFile=null;  try {    BufferedReader reader=null;    zipFile=new ZipFile(fl);    final Enumeration<? extends ZipEntry> e=zipFile.entries();    while (e.hasMoreElements()) {      success=false;      final ZipEntry zipEntry=e.nextElement();      reader=new BufferedReader(new InputStreamReader(zipFile.getInputStream(zipEntry)));      int line=1;      String readLine=null;      while (reader.ready() && (readLine=reader.readLine()) != null) {        parseValue(readLine,line);        line++;      }      reader.close();      success=true;    }  }  finally {    if (zipFile != null) {      zipFile.close();    }  }  return success;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.INDEXED_ACCESS_EXPRESSION__TARGET:    return basicSetTarget(null,msgs);case N4JSPackage.INDEXED_ACCESS_EXPRESSION__INDEX:  return basicSetIndex(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean isEvent1Received(){  return event1Received;}  }
class C{  protected EnumStringType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:51.833 -0500",hash_original_method="DE9D0F52F3286ED66509E4F5CE87141D",hash_generated_method="DA85C1A6164964624C791245B33DAFE2") public HostNameParser(LexerCore lexer){  this.lexer=lexer;  lexer.selectLexer("charLexer");  stripAddressScopeZones=Boolean.getBoolean("gov.nist.core.STRIP_ADDR_SCOPES");}  }
class C{  private void consolidateStore(){  if (!isMaster)   return;  cntConsolidateStoreRuns.increment();  if (logger.isDebugEnabled()) {    logger.debug("Running consolidateStore.");  }  IClosableIterator<Map.Entry<String,Versioned<DeviceSyncRepresentation>>> iter=null;  try {    iter=storeClient.entries();  } catch (  SyncException e) {    cntSyncException.increment();    logger.error("Failed to read devices from sync store",e);    return;  }  try {    while (iter.hasNext()) {      boolean found=false;      Versioned<DeviceSyncRepresentation> versionedDevice=iter.next().getValue();      DeviceSyncRepresentation storedDevice=versionedDevice.getValue();      if (storedDevice == null)       continue;      for (      SyncEntity se : storedDevice.getEntities()) {        try {          IDevice d=findDevice(MacAddress.of(se.macAddress),VlanVid.ofVlan(se.vlan),IPv4Address.of(se.ipv4Address),DatapathId.of(se.switchDPID),OFPort.of(se.switchPort));          if (d != null) {            found=true;            break;          }        } catch (        IllegalArgumentException e) {        }      }      if (!found) {        if (logger.isDebugEnabled()) {          logger.debug("Removing device {} from store. No " + "corresponding live device",storedDevice.getKey());        }        cntConsolidateStoreDevicesRemoved.increment();        removeDevice(versionedDevice);      }    }  }  finally {    if (iter != null)     iter.close();  }}  }
class C{  public String toString(){  DateTimeFormatter printer=ISODateTimeFormat.dateTime();  printer=printer.withChronology(getChronology());  StringBuffer buf=new StringBuffer(48);  printer.printTo(buf,getStartMillis());  buf.append('/');  printer.printTo(buf,getEndMillis());  return buf.toString();}  }
class C{  public static List<Country> readXMLofCountries(Context context){  List<Country> countries=new ArrayList<Country>();  try {    XmlPullParserFactory xmlFactoryObject=XmlPullParserFactory.newInstance();    XmlPullParser xmlPullParser=xmlFactoryObject.newPullParser();    InputStream ins=context.getResources().openRawResource(R.raw.countries);    xmlPullParser.setInput(ins,null);    int event=xmlPullParser.getEventType();    while (event != XmlPullParser.END_DOCUMENT) {      String name=xmlPullParser.getName();switch (event) {case XmlPullParser.START_TAG:        break;case XmlPullParser.END_TAG:      if (name.equals("country")) {        Country country=new Country();        country.setNameCode(xmlPullParser.getAttributeValue(null,"code").toUpperCase());        country.setPhoneCode(xmlPullParser.getAttributeValue(null,"phoneCode"));        country.setName(xmlPullParser.getAttributeValue(null,"name"));        countries.add(country);      }    break;}event=xmlPullParser.next();}} catch (XmlPullParserException e) {e.printStackTrace();}catch (IOException e) {e.printStackTrace();} finally {}return countries;}  }
class C{  private void populateItemDAOTable(SQLiteDatabase database){  List<ItemDAO> items=ItemDAO.findAll(database);  if (items.size() > 0) {    database.close();    return;  }  for (int i=1; i <= 500; i++) {    ItemDAO item=new ItemDAO("RecyclerExt Demo Item " + i);    item.save(database);  }}  }
class C{  public static String normalizeDecimal(String decimal){  decimal=collapseWhiteSpace(decimal);  int decLength=decimal.length();  StringBuilder result=new StringBuilder(decLength + 2);  if (decLength == 0) {    throwIAE("Not a legal decimal: " + decimal);  }  boolean isZeroPointZero=true;  int idx=0;  if (decimal.charAt(idx) == '-') {    result.append('-');    idx++;  } else   if (decimal.charAt(idx) == '+') {    idx++;  }  if (idx == decLength) {    throwIAE("Not a legal decimal: " + decimal);  }  while (idx < decLength && decimal.charAt(idx) == '0') {    idx++;  }  if (idx == decLength) {    result.append('0');  } else   if (idx < decLength && decimal.charAt(idx) == '.') {    result.append('0');  } else {    isZeroPointZero=false;    while (idx < decLength) {      char c=decimal.charAt(idx);      if (c == '.') {        break;      }      if (!isDigit(c)) {        throwIAE("Not a legal decimal: " + decimal);      }      result.append(c);      idx++;    }  }  result.append('.');  if (idx == decLength) {    result.append('0');  } else {    idx++;    int lastIdx=decLength - 1;    while (lastIdx >= 0 && decimal.charAt(lastIdx) == '0') {      lastIdx--;    }    if (idx > lastIdx) {      result.append('0');    } else {      isZeroPointZero=false;      while (idx <= lastIdx) {        char c=decimal.charAt(idx);        if (!isDigit(c)) {          throwIAE("Not a legal decimal: " + decimal);        }        result.append(c);        idx++;      }    }  }  if (isZeroPointZero) {    return "0.0";  } else {    return result.toString();  }}  }
class C{  public CoreParser(Analyzer analyzer,QueryParser parser){  this(null,analyzer,parser);}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter an integer: ");  String n=input.nextLine();  System.out.println("Factorial of " + n + " is "+ factorial(new BigInteger(n)));}  }
class C{  public V1 addAction(int icon,CharSequence title,Action.OnActionListener listener,ComponentName activity,ComponentName service,String broadcast,Bundle extra){  N.addAction(icon,title,listener,activity,service,broadcast,extra);  return this;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public Page replaceExceptFirst(final PageFactory factory,final PageAnimatorFactory pageAnimatorFactory){  checkNotNull(factory,"factory == null");  checkNotNull(pageAnimatorFactory,"inPageAnimatorFactory == null");  while (size() > 1) {    Page popped=pop();    unmountPage(popped,false);    destroyPage(popped);  }  return goTo(factory,pageAnimatorFactory);}  }
class C{  public void storeIinResponseInCache(String partialCreditCardNumber,IinDetailsResponse iinResponse){  if (partialCreditCardNumber == null) {    throw new InvalidParameterException("Error storing response in partialCreditCardNumber, context may not be null");  }  if (iinResponse == null) {    throw new InvalidParameterException("Error storing response in iinResponse, iinResponse may not be null");  }  Map<String,IinDetailsResponse> currentCachedIinResponses=storage.getIinResponsesFromCache();  if (currentCachedIinResponses.containsKey(partialCreditCardNumber)) {    currentCachedIinResponses.remove(partialCreditCardNumber);  }  currentCachedIinResponses.put(partialCreditCardNumber,iinResponse);  String directory=context.getFilesDir() + Constants.DIRECTORY_IINRESPONSES;  File file=new File(directory,Constants.FILENAME_IINRESPONSE_CACHE);  file.getParentFile().mkdirs();  FileOutputStream fileOutputStream=null;  ObjectOutputStream objectOutputStream=null;  try {    fileOutputStream=new FileOutputStream(file);    objectOutputStream=new ObjectOutputStream(fileOutputStream);    objectOutputStream.writeObject(currentCachedIinResponses);  } catch (  StreamCorruptedException e) {    Log.e(TAG,"Error storing BasicPaymentProducts on internal device storage",e);  }catch (  IOException e) {    Log.e(TAG,"Error storing BasicPaymentProducts on internal device storage",e);  } finally {    try {      objectOutputStream.close();      fileOutputStream.close();    } catch (    IOException e) {    }  }}  }
class C{  public boolean isServiceReady(){  return true;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (isACH() && getBank() != null)   setRoutingNo(null);  return true;}  }
class C{  public PersonProperty(PersonProperty other){  if (other.is_set_id()) {    this.id=new PersonID(other.id);  }  if (other.is_set_property()) {    this.property=new PersonPropertyValue(other.property);  }}  }
class C{  public static boolean is18OrHigher(IJavaProject project){  return is18OrHigher(getSourceCompliance(project));}  }
class C{  @Override protected OccupantArea createArea(final ConfigurableFactoryContext ctx){  return new LifeDrainArea(getWidth(ctx),getHeight(ctx),getInterval(ctx),getDamageRatio(ctx),getMimimumDamage(ctx));}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public static void hideKeyboard(Activity activity,IBinder windowToken){  InputMethodManager mgr=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);  mgr.hideSoftInputFromWindow(windowToken,0);}  }
class C{  public ColladaBind(String ns){  super(ns);}  }
class C{  public final Mat22 clone(){  return new Mat22(ex,ey);}  }
class C{  @Override public void notifyRepositoryConflict(){  notifyConflict();}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.ACTION_REF;}  }
class C{  public static void relaxHostChecking(HttpURLConnection conn) throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException {  if (conn instanceof HttpsURLConnection) {    HttpsURLConnection httpsConnection=(HttpsURLConnection)conn;    SSLSocketFactory factory=prepFactory(httpsConnection);    httpsConnection.setSSLSocketFactory(factory);    httpsConnection.setHostnameVerifier(TRUSTING_HOSTNAME_VERIFIER);  }}  }
class C{  private final void mapActionStatusToTotalTargetCountStatus(final List<TotalTargetCountActionStatus> targetCountActionStatus){  if (targetCountActionStatus == null) {    statusTotalCountMap.put(TotalTargetCountStatus.Status.NOTSTARTED,totalTargetCount);    return;  }  statusTotalCountMap.put(Status.RUNNING,0L);  Long notStartedTargetCount=totalTargetCount;  for (  final TotalTargetCountActionStatus item : targetCountActionStatus) {    convertStatus(item);    notStartedTargetCount-=item.getCount();  }  statusTotalCountMap.put(TotalTargetCountStatus.Status.NOTSTARTED,notStartedTargetCount);}  }
class C{  public void addStyleSheet(String name,VirtualLocalFile file){  stylesheets.put(name,file);}  }
class C{  public void load(){}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (roleName_1: ");  result.append(roleName_1);  result.append(')');  return result.toString();}  }
class C{  public static boolean isWithinDistance(Geometry g0,Geometry g1,double distance){  DistanceOp distOp=new DistanceOp(g0,g1,distance);  return distOp.distance() <= distance;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeinsertbeforenodename.class,args);}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster image;  WhiteboxRaster image2;  int cols=0;  int rows=0;  double noData=-32768;  double noDataImage2=-32768;  int numImages;  double z;  float progress=0;  int col, row;  int a, b, i;  String inputFilesString=null;  String[] imageFiles;  Object[] images;  double[] imageTotals;  long[] imageNs;  double[] imageAverages;  double image1TotalDeviation=0;  double image2TotalDeviation=0;  double totalProductDeviations=0;  double[][] correlationMatrix;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 2) {    showFeedback("At least two images must be specified for an image correlation.");    return;  }  try {    imageTotals=new double[numImages];    imageNs=new long[numImages];    imageAverages=new double[numImages];    correlationMatrix=new double[numImages][numImages];    for (a=0; a < numImages; a++) {      for (b=0; b < numImages; b++) {        correlationMatrix[a][b]=-99;      }    }    double[] data;    double[] data2;    updateProgress("Calculating image averages:",0);    for (a=0; a < numImages; a++) {      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      if (a == 0) {        rows=image.getNumberRows();        cols=image.getNumberColumns();      } else {        if (image.getNumberColumns() != cols || image.getNumberRows() != rows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            imageTotals[a]+=data[col];            imageNs[a]++;          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      image.close();      imageAverages[a]=imageTotals[a] / imageNs[a];      progress=a / (numImages - 1) * 100;      updateProgress("Calculating image average:",(int)progress);    }    updateProgress("Calculating the correlation matrix:",0);    i=0;    for (a=0; a < numImages; a++) {      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      for (b=0; b <= i; b++) {        if (a == b) {          correlationMatrix[a][b]=1.0;        } else {          image1TotalDeviation=0;          image2TotalDeviation=0;          totalProductDeviations=0;          image2=new WhiteboxRaster(imageFiles[b],"r");          noDataImage2=image2.getNoDataValue();          for (row=0; row < rows; row++) {            data=image.getRowValues(row);            data2=image2.getRowValues(row);            for (col=0; col < cols; col++) {              if (data[col] != noData && data2[col] != noDataImage2) {                image1TotalDeviation+=(data[col] - imageAverages[a]) * (data[col] - imageAverages[a]);                image2TotalDeviation+=(data2[col] - imageAverages[b]) * (data2[col] - imageAverages[b]);                totalProductDeviations+=(data[col] - imageAverages[a]) * (data2[col] - imageAverages[b]);              }            }            if (cancelOp) {              cancelOperation();              return;            }          }          image2.close();          correlationMatrix[a][b]=totalProductDeviations / (Math.sqrt(image1TotalDeviation * image2TotalDeviation));        }      }      i++;      image.close();      progress=a / (numImages - 1) * 100;      updateProgress("Calculating the correlation matrix:",(int)progress);    }    String retstr=null;    retstr="IMAGE CORRELATION MATRIX\n\n";    String headers="\t";    for (a=0; a < numImages; a++) {      headers=headers + "Image" + (a + 1)+ "\t";    }    retstr+=headers;    DecimalFormat df=new DecimalFormat("0.0000");    for (a=0; a < numImages; a++) {      retstr=retstr + "\nImage" + (a + 1)+ "\t";      for (b=0; b < numImages; b++) {        if (correlationMatrix[a][b] != -99) {          if (correlationMatrix[a][b] >= 0) {            retstr=retstr + "  " + df.format(correlationMatrix[a][b])+ "\t";          } else {            retstr=retstr + df.format(correlationMatrix[a][b]) + "\t";          }        } else {          retstr=retstr + "\t";        }      }    }    retstr=retstr + "\n\n";    String shortFileName;    int j, k;    for (a=0; a < numImages; a++) {      j=imageFiles[a].toString().lastIndexOf(File.separator);      k=imageFiles[a].toString().lastIndexOf(".");      shortFileName=imageFiles[a].toString().substring(j + 1,k);      retstr=retstr + "Image" + (a + 1)+ " = "+ shortFileName+ "\n";    }    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public Properties trackShowTranscript(String videoId,Double currentTime,String courseId,String unitUrl){  SegmentAnalyticsEvent aEvent=getCommonPropertiesWithCurrentTime(currentTime,videoId,Values.TRANSCRIPT_SHOWN);  aEvent.setCourseContext(courseId,unitUrl,Values.VIDEOPLAYER);  tracker.track(Events.SHOW_TRANSCRIPT,aEvent.properties);  return aEvent.properties;}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});  return null;}  }
class C{  public void backup(int amount){  inBuf+=amount;  if ((bufpos-=amount) < 0)   bufpos+=bufsize;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.backgroundPaint,stream);  SerialUtilities.writePaint(this.foregroundPaint,stream);  SerialUtilities.writeStroke(this.stroke,stream);}  }
class C{  public static long copy(InputStream in,OutputStream out) throws IOException {  return copy(in,out,Long.MAX_VALUE);}  }
class C{  int acc_compareToLen(AccurateValue n2,int len){  int i;  if (sign < 0 || n2.sign < 0) {    System.err.println("WARNING: compareToLen called with negative number\n");  }  for (i=0; i < len; i++) {    if (n2.digits[i] == digits[i]) {      continue;    }    if (n2.digits[i] > digits[i]) {      return -1;    } else {      return +1;    }  }  return 0;}  }
class C{  public boolean isFullyZoomedOutX(){  if (mScaleX > mMinScaleX || mMinScaleX > 1f)   return false; else   return true;}  }
class C{  protected void clear(){  resultListModel.clear();  resultTable.getSelectionModel().clearSelection();  resultTableModel.fireTableDataChanged();  metricListModel.clear();  metricList.getSelectionModel().clearSelection();  paintHelper.clear();  chartContainer.removeAll();  chartContainer.revalidate();  chartContainer.repaint();}  }
class C{  public void test_setIntLjava_lang_ObjectI() throws Exception {  TestField x=new TestField();  Field f=null;  int val=0;  try {    f=x.getClass().getDeclaredField("intField");    f.setInt(x,Integer.MIN_VALUE);    val=f.getInt(x);  } catch (  Exception e) {    fail("Exception during setInteger test: " + e.toString());  }  assertEquals("Returned incorrect int field value",Integer.MIN_VALUE,val);  boolean thrown=false;  try {    f=x.getClass().getDeclaredField("booleanField");    f.setInt(x,Integer.MIN_VALUE);    fail("Accessed field of invalid type");  } catch (  IllegalArgumentException ex) {    thrown=true;  }  assertTrue("IllegalArgumentException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("intPFField");    assertFalse(f.isAccessible());    f.setInt(x,Integer.MIN_VALUE);    fail("Accessed inaccessible field");  } catch (  IllegalAccessException ex) {    thrown=true;  }  assertTrue("IllegalAccessException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("intField");    f.setInt(null,Integer.MIN_VALUE);    fail("NullPointerException expected but not thrown");  } catch (  NullPointerException ex) {    thrown=true;  }catch (  Exception ex) {    fail("NullPointerException expected but not thrown");  }  assertTrue("NullPointerException expected but not thrown",thrown);  f=x.getClass().getDeclaredField("intSField");  f.setInt(null,Integer.MIN_VALUE);  val=f.getInt(x);  assertEquals("Returned incorrect int field value",Integer.MIN_VALUE,val);}  }
class C{  public Set<String> keys(){  return this.selectionMapping.keySet();}  }
class C{  TypeExtractor(Set<Type> inputTypes,VisibilityPredicate predicate){  this.inputTypes=inputTypes;  this.predicate=predicate;}  }
class C{  public IntersectionSimilarityRequest(long queryNode,int maxNumResults,LongSet seedSet,int maxNumNeighbors,int minNeighborDegree,int maxNumSamplesPerNeighbor,int minCooccurrence,int minQueryDegree,double maxLowerMultiplicativeDeviation,double maxUpperMultiplicativeDeviation,boolean populateTweetFeatures){  super(queryNode,maxNumResults);  this.seedSet=seedSet;  this.maxNumNeighbors=maxNumNeighbors;  this.minNeighborDegree=minNeighborDegree;  this.maxNumSamplesPerNeighbor=maxNumSamplesPerNeighbor;  this.minCooccurrence=minCooccurrence;  this.minQueryDegree=minQueryDegree;  this.maxLowerMultiplicativeDeviation=maxLowerMultiplicativeDeviation;  this.maxUpperMultiplicativeDeviation=maxUpperMultiplicativeDeviation;  this.populateTweetFeatures=populateTweetFeatures;}  }
class C{  private static boolean isParameterSeparator(char c){  if (Character.isWhitespace(c)) {    return true;  }  for (  char separator : PARAMETER_SEPARATORS) {    if (c == separator) {      return true;    }  }  return false;}  }
class C{  @Override protected EClass eStaticClass(){  return FunctionblockPackage.Literals.RETURN_TYPE;}  }
class C{  public static void clearClipboard(){  setClipboardEntity(null);}  }
class C{  public void createCloudletList(List<Integer> vmIdList){  for (int i=0; i < numbervm; i++) {    long length=4;    long fileSize=300;    long outputSize=300;    long memory=256;    int pesNumber=4;    UtilizationModel utilizationModel=new UtilizationModelFull();    NetworkCloudlet cl=new NetworkCloudlet(NetworkConstants.currentCloudletId,length,pesNumber,fileSize,outputSize,memory,utilizationModel,utilizationModel,utilizationModel);    NetworkConstants.currentCloudletId++;    cl.setUserId(userId);    cl.submittime=CloudSim.clock();    cl.currStagenum=-1;    clist.add(cl);  }}  }
class C{  public void centerHorizontal(ArrayList<Integer> nodes){  if (m_bNeedsUndoAction) {    addUndoAction(new centerHorizontalAction(nodes));  }  int nMinY=-1;  int nMaxY=-1;  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nY=getPositionY(nodes.get(iNode));    if (nY < nMinY || iNode == 0) {      nMinY=nY;    }    if (nY > nMaxY || iNode == 0) {      nMaxY=nY;    }  }  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nNode=nodes.get(iNode);    m_nPositionY.set(nNode,(nMinY + nMaxY) / 2);  }}  }
class C{  public void stopSession(){  if (processor != null) {    processor.stopProcessing();  }  if (outputStream != null)   outputStream.close();}  }
class C{  private static void printXmlFields(ClassRef cref){  FieldRef[] fields=cref.getFieldArray();  for (int i=0; i < fields.length; i++) {    FieldRef fref=fields[i];    out.println(IN3 + "<field name=\"" + fref.getName()+ "\" type=\""+ descriptorToDot(fref.getTypeName())+ "\"/>");  }}  }
class C{  int addAttribute(int attrId,String value){  if (value == null) {    return HTMLCallback.ERROR_ATTIBUTE_VALUE_INVALID;  }  int i=attrId - CSS_STYLE_ID_OFFSET;  boolean knownType=true;  int val=-1;switch (CSS_ATTRIBUTE_TYPES[i]) {case TYPE_COLOR:    val=getColor(value,-1);  break;case TYPE_CSS_LENGTH:val=convertUnits(value,LENGTH_SUFFIX_PX);break;case TYPE_CSS_LENGTH_OR_PERCENTAGE:val=convertUnitsOrPercentage(value,LENGTH_SUFFIX_PX);break;case TYPE_CSS_LENGTH_OR_PERCENTAGE_OR_MULTIPLIER:val=convertUnitsOrPercentage(value,LENGTH_SUFFIX_EM);break;default :knownType=false;}if (val == -1) {if (CSS_ALLOWED_STRINGS[i] != null) {val=HTMLUtils.getStringVal(value,CSS_ALLOWED_STRINGS[i],CSS_ALLOWED_STRINGS_VALS[i]);if (val == -1) {return HTMLCallback.ERROR_ATTIBUTE_VALUE_INVALID;} else {attrVals[i]=val;fixBackgroundPositionDefaults(attrId);}} else {if (knownType) {return HTMLCallback.ERROR_ATTIBUTE_VALUE_INVALID;} else {setAttribute(new Integer(attrId),value);}}} else {attrVals[i]=val;fixBackgroundPositionDefaults(attrId);}return -1;}  }
class C{  public AttributeSet parseDeclaration(Reader r) throws IOException {  parse(base,r,true,false);  return declaration.copyAttributes();}  }
class C{  public static void init(){  usernames.set(null);}  }
class C{  public static boolean storeAsFile(Bitmap bitmap,File file,Bitmap.CompressFormat format,int quality){  OutputStream out=null;  try {    out=new BufferedOutputStream(new FileOutputStream(file));    return bitmap.compress(format,quality,out);  } catch (  FileNotFoundException e) {    Log.e(TAG,"no such file for saving bitmap: ",e);    return false;  } finally {    CloseableUtils.close(out);  }}  }
class C{  private void adjustPoints(){  float xMin=decodeArr[0];  float xMax=decodeArr[1];  float yMin=decodeArr[2];  float yMax=decodeArr[3];  float xw=xMax - xMin;  float yw=yMax - yMin;  ArrayList<Point2D> triPoints=new ArrayList<Point2D>();  for (  Point2D p : triangles) {    double xx=p.getX();    double yy=p.getY();    xx=(xw * xx) + xMin;    yy=(yw * yy) + yMin;    triPoints.add(new Point2D.Double(xx,yy));  }  triangles.clear();  float scaleX=1 / (matrix[0][0]);  float scaleY=1 / (matrix[1][1]);  float tx=matrix[2][0] * scaleX;  float ty=matrix[2][1] * scaleY;  for (  Point2D t : triPoints) {    double x=t.getX();    double y=t.getY();    float b=0;    float c=0;    double xx=(x) + (c * y) + tx;    double yy=(b * x) + y + ty;    xx=(int)xx;    yy=(int)yy;    triangles.add(new Point2D.Double(xx,yy));  }  for (int t=0; t < triangles.size(); t+=3) {    GeneralPath sh=new GeneralPath();    sh.moveTo(triangles.get(t).getX(),triangles.get(t).getY());    sh.lineTo(triangles.get(t + 1).getX(),triangles.get(t + 1).getY());    sh.lineTo(triangles.get(t + 2).getX(),triangles.get(t + 2).getY());    sh.closePath();    shapes.add(sh);  }}  }
class C{  public Subspace(int dimension){  dimensions=BitsUtil.zero(dimension + 1);  BitsUtil.setI(dimensions,dimension);  dimensionality=1;}  }
class C{  private Map<String,Double> createNBestList(SpeechResult result){  Map<String,Double> table=new HashMap<String,Double>();  if (configuration.getUseGrammar()) {    String hypothesis=result.getHypothesis().trim();    if (hypothesis.length() > 0 && !hypothesis.equals("<unk>")) {      table.put(hypothesis,RECOG_PROB);    }  } else {    for (    String r : result.getNbest(NBEST)) {      String hypothesis=r.replaceAll("</?s>","").trim();      if (hypothesis.length() > 0 && !hypothesis.equals("<unk>")) {        table.put(hypothesis,1.0 / (table.size() + 1));      }    }    table=InferenceUtils.normalise(table);  }  return table;}  }
class C{  public static String specialFunctionName(SpecialFunctionNode node){switch (node.getNodeType()) {case NodeTypes.USER_NODE:case NodeTypes.CURRENT_USER_NODE:    return "current_user";case NodeTypes.SESSION_USER_NODE:  return "session_user";case NodeTypes.SYSTEM_USER_NODE:return "system_user";case NodeTypes.CURRENT_SCHEMA_NODE:return "current_schema";case NodeTypes.CURRENT_ISOLATION_NODE:case NodeTypes.IDENTITY_VAL_NODE:case NodeTypes.CURRENT_ROLE_NODE:default :return null;}}  }
class C{  boolean unmapLun(String initGroup){  NaElement elem=new NaElement("lun-unmap");  elem.addNewChild("initiator-group",initGroup);  elem.addNewChild("path",path);  try {    server.invokeElem(elem);    return true;  } catch (  Exception e) {    String msg="Failed to unmap LUN path=" + path;    log.error(msg,e);    throw new NetAppException(msg,e);  }}  }
class C{  @Override public boolean execute() throws SQLException {  try {    int id=getNextId(TraceObject.RESULT_SET);    if (isDebugEnabled()) {      debugCodeCall("execute");    }    checkClosedForWrite();    try {      boolean returnsResultSet;synchronized (conn.getSession()) {        closeOldResultSet();        try {          setExecutingStatement(command);          if (command.isQuery()) {            returnsResultSet=true;            boolean scrollable=resultSetType != ResultSet.TYPE_FORWARD_ONLY;            boolean updatable=resultSetConcurrency == ResultSet.CONCUR_UPDATABLE;            ResultInterface result=command.executeQuery(maxRows,scrollable);            resultSet=new JdbcResultSet(conn,this,result,id,closedByResultSet,scrollable,updatable);          } else {            returnsResultSet=false;            updateCount=command.executeUpdate();          }        }  finally {          setExecutingStatement(null);        }      }      return returnsResultSet;    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void rpExportGroupRollback(){  if (exportGroupsCreated != null && !exportGroupsCreated.isEmpty()) {    for (    URI exportGroupURI : exportGroupsCreated) {      ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupURI);      if (exportGroup != null && !exportGroup.getInactive()) {        _log.info(String.format("Marking ExportGroup [%s](%s) for deletion.",exportGroup.getLabel(),exportGroup.getId()));        _dbClient.markForDeletion(exportGroup);      }    }  }  if (exportGroupVolumesAdded != null && !exportGroupVolumesAdded.isEmpty()) {    for (    Entry<URI,Set<URI>> entry : exportGroupVolumesAdded.entrySet()) {      if (entry.getValue() != null && !entry.getValue().isEmpty()) {        if (exportGroupsCreated != null && !exportGroupsCreated.isEmpty()) {          if (exportGroupsCreated.contains(entry.getKey())) {            continue;          }        }        ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,entry.getKey());        _log.info(String.format("Removing volumes (%s) from ExportGroup (%s).",entry.getValue(),entry.getKey()));        exportGroup.removeVolumes(new ArrayList<URI>(entry.getValue()));        _dbClient.updateObject(exportGroup);      }    }  }}  }
class C{  public boolean hasLabel(){  return getLabel() != null;}  }
class C{  @Override public void failure(int requestId,int errorCode,String message){}  }
class C{  public List<Volume> processVolumeDeletion(StorageSystem storageSystem,List<Volume> volumes,CIMArgument[] outArgs,MultiVolumeTaskCompleter multiVolumeTaskCompleter) throws Exception {  CimConnection connection=_cimConnection.getConnection(storageSystem);  WBEMClient client=connection.getCimClient();  List<Volume> volumesToProcess=new ArrayList<Volume>();  for (  Volume vol : volumes) {    Volume volume=_dbClient.queryObject(Volume.class,vol.getId());    volumesToProcess.add(volume);    StoragePool storagePool=_dbClient.queryObject(StoragePool.class,volume.getPool());    updateStoragePoolCapacity(client,storagePool);  }  StringBuilder logMsgBuilder=new StringBuilder();  UnsignedInteger32[] returnCoedes=(UnsignedInteger32[])_cimPath.getFromOutputArgs(outArgs,IBMSmisConstants.CP_RETURN_CODES);  List<Volume> volumesToSave=new ArrayList<Volume>(returnCoedes.length);  for (int i=0; i < returnCoedes.length; i++) {    Volume volume=volumesToProcess.get(i);    VolumeTaskCompleter deleteTaskCompleter=multiVolumeTaskCompleter.skipTaskCompleter(volume.getId());    if (returnCoedes[i].longValue() == 0L) {      volume.setInactive(true);      volume.setConsistencyGroup(NullColumnValueGetter.getNullURI());      _dbClient.updateAndReindexObject(volume);      deleteTaskCompleter.ready(_dbClient);      if (logMsgBuilder.length() != 0) {        logMsgBuilder.append("\n");      }      logMsgBuilder.append(String.format("Successfully deleted volume %s",volume.getId()));    } else {      String errorMessage=String.format("Failed to delete volume: %s , nativeId: %s with return code: %s",volume.getId(),volume.getNativeId(),returnCoedes[i].toString());      ServiceError error=DeviceControllerErrors.smis.methodFailed("doDeleteVolume",errorMessage);      deleteTaskCompleter.error(_dbClient,error);      if (logMsgBuilder.length() != 0) {        logMsgBuilder.append("\n");      }      logMsgBuilder.append(errorMessage);    }  }  if (logMsgBuilder.length() > 0) {    _log.info(logMsgBuilder.toString());  }  return volumesToSave;}  }
class C{  public Skype build(){  if (resources.isEmpty()) {    throw new IllegalArgumentException("No resources selected");  }  if (password != null) {    return new FullClient(username,password,resources,customLogger,errorHandlers);  } else   if (chatId != null) {    return new GuestClient(username,chatId,resources,customLogger,errorHandlers);  } else {    throw new IllegalArgumentException("No chat specified");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:24.394 -0500",hash_original_method="91223A19E58DDEF4278C27D9FB9EBEA3",hash_generated_method="3314B25AF66BFE180F30D55AB12A0DB4") public LocalActivityManager(Activity parent,boolean singleMode){  mActivityThread=ActivityThread.currentActivityThread();  mParent=parent;  mSingleMode=singleMode;}  }
class C{  public static void onEvent(Context context,PostEvent event){  init(context);  if (event.getStringMap() != null) {    startLogService(MessageUtils.HASH_EVENT_DATA,event.eventToJOSNObj());  } else {    startLogService(MessageUtils.EVENT_DATA,event.eventToJOSNObj());  }}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGraphPackage.STATE__PARENT_REGION:    if (eInternalContainer() != null)     msgs=eBasicRemoveFromContainer(msgs);  return basicSetParentRegion((Region)otherEnd,msgs);case SGraphPackage.STATE__INCOMING_TRANSITIONS:return ((InternalEList<InternalEObject>)(InternalEList<?>)getIncomingTransitions()).basicAdd(otherEnd,msgs);case SGraphPackage.STATE__OUTGOING_TRANSITIONS:return ((InternalEList<InternalEObject>)(InternalEList<?>)getOutgoingTransitions()).basicAdd(otherEnd,msgs);case SGraphPackage.STATE__REGIONS:return ((InternalEList<InternalEObject>)(InternalEList<?>)getRegions()).basicAdd(otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public static void execute(String[] args) throws Exception {  Configuration conf=parseArgs(args);  String exe=conf.executable;  if (exe == null) {    throw new CeylonRuntimeException("Missing -executable argument");  }  Executable executable=createInstance(Executable.class,exe);  executable.execute(conf);}  }
class C{  public static boolean isPackageAvailable(@NonNull Context context,@NonNull String packageName){  return (getPackageInfo(context,packageName) != null);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.695 -0400",hash_original_method="B4FA3AE06204AB7289DB84225F541AF1",hash_generated_method="ADC309CA8828389521AD207F87DEF6F3") public synchronized long resetByteCount(){  long tmp=this.count;  this.count=0;  return tmp;}  }
class C{  public BeginsWithUppercaseLetterValidator(@NonNull final CharSequence errorMessage){  super(errorMessage);}  }
class C{  private void updateMetaData() throws SQLException {  if (conn.isClosed())   throw new SQLException("Connection is closed.");  try {    byte[] packet=conn.client().compute().execute(TASK_NAME,conn.cacheName());    byte status=packet[0];    byte[] data=new byte[packet.length - 1];    U.arrayCopy(packet,1,data,0,data.length);    if (status == 1)     throw JdbcUtils.unmarshalError(data); else {      List<Object> res=JdbcUtils.unmarshal(data);      meta=(Map<String,Map<String,Map<String,String>>>)res.get(0);      indexes=(Collection<List<Object>>)res.get(1);    }  } catch (  GridClientException e) {    throw new SQLException("Failed to get meta data from Ignite.",e);  }}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,byte[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public IgniteUuid surrogateId(int idx){  assert surrogateIds != null;  assert idx > lastExistingIdx;  assert idx < surrogateIds.length;  return surrogateIds[idx];}  }
class C{  public SourceCodeTraversal(Visitor visitor){  super(visitor);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:06.961 -0500",hash_original_method="17F8945CD061768B74E94788483D8BB3",hash_generated_method="58CDF0B92616E046601827ABF090FF71") public static void pauseTimers(){  if (BrowserFrame.sJavaBridge == null) {    throw new IllegalStateException("No WebView has been created in this process!");  }  BrowserFrame.sJavaBridge.pause();}  }
class C{  public Vector3d half(Vector3dc other){  return this.add(other).normalize();}  }
class C{  public void loadJarFile(String name){  try {    JarInputStream zin=new JarInputStream(new FileInputStream(JarName));    JarEntry entry;    fileText.setText("");    while ((entry=zin.getNextJarEntry()) != null) {      if (entry.getName().equals(name)) {        BufferedReader in=new BufferedReader(new InputStreamReader(zin));        String line;        while ((line=in.readLine()) != null) {          fileText.append(line);          fileText.append("\n");        }      }      zin.closeEntry();    }    zin.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public void testJAASEntry(){  RuntimeConfiguration configuration=new Jonas4xRuntimeConfiguration();  configuration.setProperty(JonasPropertySet.JONAS_MEJB_JAAS_ENTRY,"foo");  Hashtable<String,Object> connectionOptions=factory.readConfiguration(configuration);  assertEquals(connectionOptions.get(Context.INITIAL_CONTEXT_FACTORY),MEJBMBeanServerConnectionFactory.DEFAULT_JNDI_INITIAL_CTX_FACTORY);  assertEquals(connectionOptions.get(Context.PROVIDER_URL),MEJBMBeanServerConnectionFactory.DEFAULT_PROVIDER_URI);  assertNull(connectionOptions.get(Context.SECURITY_PRINCIPAL));  assertNull(connectionOptions.get(Context.SECURITY_CREDENTIALS));  assertEquals(factory.mejbJndiPath,MEJBMBeanServerConnectionFactory.DEFAULT_JNDI_MEJB_PATH);  assertNull(factory.username);  assertNull(factory.password);  assertEquals(factory.jaasFile,MEJBMBeanServerConnectionFactory.DEFAULT_JAAS_FILE);  assertEquals(factory.jaasEntry,"foo");}  }
class C{  public static void pause(long millis){  try {    Thread.sleep(millis);  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();    throw new IllegalStateException("InterrupedException while pausing",e);  }}  }
class C{  public static void hold(int src,long delay){  SimEvent e=new SimEvent(SimEvent.HOLD_DONE,clock + delay,src);  future.addEvent(e);  entities.get(src).setState(SimEntity.HOLDING);}  }
class C{  protected void processAttachResponse(GenericResponse genericResponse){  handle=genericResponse.getObjectHandle();}  }
class C{  protected final void connect() throws IOException {  if (connection != null) {    return;  }  if (routeSelector == null) {    String uriHost=uri.getHost();    if (uriHost == null) {      throw new UnknownHostException(uri.toString());    }    SSLSocketFactory sslSocketFactory=null;    HostnameVerifier hostnameVerifier=null;    if (uri.getScheme().equalsIgnoreCase("https")) {      sslSocketFactory=client.getSslSocketFactory();      hostnameVerifier=client.getHostnameVerifier();    }    Address address=new Address(uriHost,getEffectivePort(uri),sslSocketFactory,hostnameVerifier,client.getAuthenticator(),client.getProxy(),client.getTransports());    routeSelector=new RouteSelector(address,uri,client.getProxySelector(),client.getConnectionPool(),Dns.DEFAULT,client.getRoutesDatabase());  }  connection=routeSelector.next(method);  if (!connection.isConnected()) {    connection.connect(client.getConnectTimeout(),client.getReadTimeout(),getTunnelConfig());    client.getConnectionPool().maybeShare(connection);    client.getRoutesDatabase().connected(connection.getRoute());  } else {    connection.updateReadTimeout(client.getReadTimeout());  }  connected(connection);  if (connection.getRoute().getProxy() != client.getProxy()) {    requestHeaders.getHeaders().setRequestLine(getRequestLine());  }}  }
class C{  protected void fillContextProperties(Context context){  Enumeration enm=props.propertyNames();  while (enm.hasMoreElements()) {    String nm=(String)enm.nextElement();    if (nm.startsWith("context.objects.")) {      String contextObj=props.getProperty(nm);      int colon=nm.lastIndexOf('.');      String contextName=nm.substring(colon + 1);      try {        Class cls=Class.forName(contextObj);        Object o=cls.newInstance();        context.put(contextName,o);      } catch (      Exception e) {        e.printStackTrace();      }    }  }}  }
class C{  @CanIgnoreReturnValue public static long copy(ReadableByteChannel from,WritableByteChannel to) throws IOException {  checkNotNull(from);  checkNotNull(to);  if (from instanceof FileChannel) {    FileChannel sourceChannel=(FileChannel)from;    long oldPosition=sourceChannel.position();    long position=oldPosition;    long copied;    do {      copied=sourceChannel.transferTo(position,ZERO_COPY_CHUNK_SIZE,to);      position+=copied;      sourceChannel.position(position);    } while (copied > 0 || position < sourceChannel.size());    return position - oldPosition;  }  ByteBuffer buf=ByteBuffer.wrap(createBuffer());  long total=0;  while (from.read(buf) != -1) {    buf.flip();    while (buf.hasRemaining()) {      total+=to.write(buf);    }    buf.clear();  }  return total;}  }
class C{  @Override public String toStringRanking(){  int biggest;  int width;  String result;  int[] ranking;  int i;  int curr;  if (m_RankingWins == null) {    return "-ranking data not set-";  }  biggest=Math.max(m_RankingWins[Utils.maxIndex(m_RankingWins)],m_RankingLosses[Utils.maxIndex(m_RankingLosses)]);  width=Math.max(2 + (int)(Math.log(biggest) / Math.log(10)),">-<".length());  result=Utils.padLeft(">-<",width) + ' ' + Utils.padLeft(">",width)+ ' '+ Utils.padLeft("<",width)+ " Resultset\n";  ranking=Utils.sort(m_RankingDiff);  for (i=getColCount() - 1; i >= 0; i--) {    curr=ranking[i];    if (getColHidden(curr)) {      continue;    }    result+=Utils.padLeft("" + m_RankingDiff[curr],width) + ' ' + Utils.padLeft("" + m_RankingWins[curr],width)+ ' '+ Utils.padLeft("" + m_RankingLosses[curr],width)+ ' '+ removeFilterName(m_ColNames[curr])+ '\n';  }  return result;}  }
class C{  public Window buildWindow(){  final Window window=new Window(caption);  window.setContent(content);  window.setSizeUndefined();  window.setModal(true);  window.setResizable(false);  decorateWindow(window);  if (SPUIDefinitions.CREATE_UPDATE_WINDOW.equals(type)) {    window.setClosable(false);  }  return window;}  }
class C{  public static void write(String data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public Builder filter(MetricFilter filter){  this.filter=filter;  return this;}  }
class C{  public ShortMessage(){  this(new byte[3]);  data[0]=(byte)(NOTE_ON & 0xFF);  data[1]=(byte)64;  data[2]=(byte)127;  length=3;}  }
class C{  public int index(){  return currentBufferIndex;}  }
class C{  public SignatureException(String msg){  super(msg);}  }
class C{  public boolean has(String key){  return this.map.containsKey(key);}  }
class C{  public void startTimingSpecifierList(){}  }
class C{  private void removeDuplicates(){  m_reducedResults.clear();  Object last=null;  for (  final SearchResult r : m_results) {    if (last != r.getObject()) {      last=r.getObject();      m_reducedResults.add(r);    }  }}  }
class C{  @Override public void add(int size,Register dst,Register src,int immediate){  if (immediate < 0) {    sub(size,dst,src,-immediate);  } else   if (!(dst.equals(src) && immediate == 0)) {    super.add(size,dst,src,immediate);  }}  }
class C{  public int indexOf(long value){  return indexOf(0,value);}  }
class C{  public int judgePoint(Coords c){  final String METHOD_NAME="judgePoint(Coords)";  owner.methodBegin(getClass(),METHOD_NAME);  try {    HexLine comparor=new HexLine(c,getDirection(),owner);    if (comparor.getIntercept() < getIntercept()) {      return (getDirection() < 3) ? -1 : 1;    } else     if (comparor.getIntercept() > getIntercept()) {      return (getDirection() < 3) ? 1 : -1;    }    return 0;  }  finally {    owner.methodEnd(getClass(),METHOD_NAME);  }}  }
class C{  public static void searchMemory(final Window parent,final IDebugger debugger,final CMemoryViewer memoryView){  checkArguments(parent,debugger);  Preconditions.checkNotNull(memoryView,"IE01431: Memory view argument can not be null");  final CSearchDialog dlg=new CSearchDialog(parent);  final byte[] data=dlg.getSearchData();  if (data != null && data.length != 0) {    final JHexView hexView=memoryView.getHexView();    final long start=hexView.getCurrentOffset();    final int size=(int)(hexView.getLastOffset() - hexView.getCurrentOffset());    final CSearchWaiter waiter=new CSearchWaiter(debugger,new CAddress(start),size,data);    CProgressDialog.showEndless(parent,"Loading memory" + " ...",waiter);    hexView.uncolorizeAll();    if (waiter.getException() == null) {      final SearchReply reply=waiter.getReply();      if (reply != null) {        final IAddress offset=reply.getAddress();        if (reply.success()) {          if (hexView.isEnabled() && hexView.getDefinitionStatus() == DefinitionStatus.DEFINED) {            hexView.colorize(5,offset.toLong(),data.length,Color.BLACK,Color.YELLOW);            hexView.gotoOffset(offset.toLong());            hexView.requestFocusInWindow();          }        } else {          CMessageBox.showInformation(parent,"The specified search string was not found.");        }      }    } else {      CUtilityFunctions.logException(waiter.getException());      final String innerMessage="E00079: " + "Could not search through memory";      final String innerDescription=CUtilityFunctions.createDescription("It was not possible to send the search request to the debug client.",new String[]{"There was a problem with the connection to the debug client."},new String[]{"The search operation could not be started."});      NaviErrorDialog.show(parent,innerMessage,innerDescription,waiter.getException());    }  }}  }
class C{  public void removeNode(String hostIdString){  InetAddress myAddress=FBUtilities.getBroadcastAddress();  UUID localHostId=tokenMetadata.getHostId(myAddress);  UUID hostId=UUID.fromString(hostIdString);  InetAddress endpoint=tokenMetadata.getEndpointForHostId(hostId);  if (endpoint == null)   throw new UnsupportedOperationException("Host ID not found.");  Collection<Token> tokens=tokenMetadata.getTokens(endpoint);  if (endpoint.equals(myAddress))   throw new UnsupportedOperationException("Cannot remove self");  if (Gossiper.instance.getLiveMembers().contains(endpoint))   throw new UnsupportedOperationException("Node " + endpoint + " is alive and owns this ID. Use decommission command to remove it from the ring");  if (tokenMetadata.isLeaving(endpoint))   logger.warn("Node {} is already being removed, continuing removal anyway",endpoint);  if (!replicatingNodes.isEmpty())   throw new UnsupportedOperationException("This node is already processing a removal. Wait for it to complete, or use 'removenode force' if this has failed.");  for (  String keyspaceName : Schema.instance.getNonSystemKeyspaces()) {    if (Keyspace.open(keyspaceName).getReplicationStrategy().getReplicationFactor() == 1)     continue;    Multimap<Range<Token>,InetAddress> changedRanges=getChangedRangesForLeaving(keyspaceName,endpoint);    IFailureDetector failureDetector=FailureDetector.instance;    for (    InetAddress ep : changedRanges.values()) {      if (failureDetector.isAlive(ep))       replicatingNodes.add(ep); else       logger.warn("Endpoint {} is down and will not receive data for re-replication of {}",ep,endpoint);    }  }  removingNode=endpoint;  tokenMetadata.addLeavingEndpoint(endpoint);  PendingRangeCalculatorService.instance.update();  Gossiper.instance.advertiseRemoving(endpoint,hostId,localHostId);  restoreReplicaCount(endpoint,myAddress);  while (!replicatingNodes.isEmpty()) {    Uninterruptibles.sleepUninterruptibly(100,TimeUnit.MILLISECONDS);  }  excise(tokens,endpoint);  Gossiper.instance.advertiseTokenRemoved(endpoint,hostId);  replicatingNodes.clear();  removingNode=null;}  }
class C{  public Days toStandardDays(){  return Days.days(getValue() / DateTimeConstants.SECONDS_PER_DAY);}  }
class C{  public FullscreenParallaxPage lastParallaxFactor(float factor){  this.lastParallaxFactor=factor;  return this;}  }
class C{  public Integer evaluate(float fraction,Integer startValue,Integer endValue){  int startInt=startValue;  return (int)(startInt + fraction * (endValue - startInt));}  }
class C{  public final boolean contains(long fp) throws IOException {  return getFPSet(fp).contains(fp);}  }
class C{  public void executeCurrentLine(){  executeLineNumber(highlighter.getLineNumberByOffset(getEditor().getCaretPosition()),false);  scrollToExecutionMark();  updateAll();}  }
class C{  private IgniteConfiguration config(int idx){  FileSystemConfiguration igfsCfg=new FileSystemConfiguration();  igfsCfg.setDataCacheName("dataCache");  igfsCfg.setMetaCacheName("metaCache");  igfsCfg.setName("igfs");  igfsCfg.setBlockSize(BLOCK_SIZE);  igfsCfg.setDefaultMode(PRIMARY);  igfsCfg.setFragmentizerEnabled(false);  CacheConfiguration dataCacheCfg=new CacheConfiguration();  dataCacheCfg.setName("dataCache");  dataCacheCfg.setCacheMode(PARTITIONED);  dataCacheCfg.setAtomicityMode(TRANSACTIONAL);  dataCacheCfg.setWriteSynchronizationMode(FULL_SYNC);  dataCacheCfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(1));  dataCacheCfg.setBackups(0);  CacheConfiguration metaCacheCfg=new CacheConfiguration();  metaCacheCfg.setName("metaCache");  metaCacheCfg.setCacheMode(REPLICATED);  metaCacheCfg.setAtomicityMode(TRANSACTIONAL);  metaCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  IgniteConfiguration cfg=new IgniteConfiguration();  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();  discoSpi.setIpFinder(IP_FINDER);  cfg.setDiscoverySpi(discoSpi);  cfg.setCacheConfiguration(dataCacheCfg,metaCacheCfg);  cfg.setFileSystemConfiguration(igfsCfg);  cfg.setGridName("node-" + idx);  return cfg;}  }
class C{  public String toString(){  StringBuilder s=new StringBuilder();  for (  Item item : this)   s.append(item + " ");  return s.toString();}  }
class C{  public void accept(final ClassVisitor cv){  String[] exceptions=new String[this.exceptions.size()];  this.exceptions.toArray(exceptions);  MethodVisitor mv=cv.visitMethod(access,name,desc,signature,exceptions);  if (mv != null) {    accept(mv);  }}  }
class C{  public TupleSerializer(){  super();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void toVH(double lat,double lon){  lat=Math.toRadians(lat);  lon=Math.toRadians(lon);  double lon1=lon + Math.toRadians(52.0);  double latsq=lat * lat;  double lat1=lat * (K1 + (K2 + (K3 + (K4 + K5 * latsq) * latsq) * latsq) * latsq);  double cos_lat1=Math.cos(lat1);  double x=cos_lat1 * Math.sin(-lon1);  double y=cos_lat1 * Math.cos(-lon1);  double z=Math.sin(lat1);  double e=EX * x + EY * y + EZ * z;  double w=WX * x + WY * y + WZ * z;  e=e > 1.0 ? 1.0 : e;  w=w > 1.0 ? 1.0 : w;  e=M_PI_2 - Math.atan(e / Math.sqrt(1 - e * e));  w=M_PI_2 - Math.atan(w / Math.sqrt(1 - w * w));  double ht=(e * e - w * w + .16) / .8;  double vt=Math.sqrt(Math.abs(e * e - ht * ht));  vt=(PX * x + PY * y + PZ * z) < 0 ? -vt : vt;  double v=TRANSV + K9 * ht - K10 * vt;  double h=TRANSH + K10 * ht + K9 * vt;  this.resultV=v;  this.resultH=h;}  }
class C{  public void distribute(int start,byte remainder,int blockSize,byte value){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(remainder <= blockSize);  if (value <= remainder) {    data[start]+=value;  } else {    data[start]+=remainder;    value-=remainder;    start++;    while (value >= blockSize) {      data[start]+=blockSize;      value-=blockSize;      start++;    }    data[start]+=value;  }}  }
class C{  public Set<ObjectInstance> queryMBeans(ObjectName name,QueryExp query){  return mbsInterceptor.queryMBeans(cloneObjectName(name),query);}  }
class C{  private void snapSegments(CoordinateList srcCoords,Coordinate[] snapPts){  if (snapPts.length == 0)   return;  int distinctPtCount=snapPts.length;  if (snapPts[0].equals2D(snapPts[snapPts.length - 1]))   distinctPtCount=snapPts.length - 1;  for (int i=0; i < distinctPtCount; i++) {    Coordinate snapPt=snapPts[i];    int index=findSegmentIndexToSnap(snapPt,srcCoords);    if (index >= 0) {      srcCoords.add(index + 1,new Coordinate(snapPt),false);    }  }}  }
class C{  public void testGetName(){  String expectedReturn="SOFTWARE";  String actualReturn=softwareAttribute.getName();  assertEquals("getting name failed",expectedReturn,actualReturn);}  }
class C{  public XMLTableModel(Element tableDefinition,Object source){  this(XMLTableDefinition.load(tableDefinition),source);}  }
class C{  @SuppressWarnings("PMD.AvoidReassigningParameters") public static boolean fuzzyContains(String text,String query){  if (query.isEmpty()) {    return true;  }  if (text.isEmpty()) {    return false;  }  text=text.toUpperCase(Locale.ENGLISH).replaceAll("[^a-zA-Z]","");  query=query.toUpperCase(Locale.ENGLISH).replaceAll("[^a-zA-Z]","");  if (query.length() <= text.length()) {    final int substrLength=query.length();    final int substrCount=text.length() - query.length() + 1;    for (int i=0; i < substrCount; i++) {      final String subname=text.substring(i,i + substrLength);      if (StringUtils.getLevenshteinDistance(query,subname,1) != -1) {        return true;      }    }    return false;  } else {    return StringUtils.getLevenshteinDistance(query,text,1) != -1;  }}  }
class C{  public static String removeAll(String source,String strToRemove){  int toRemoveIndex=source.indexOf(strToRemove);  if (toRemoveIndex != -1) {    StringBuilder result=new StringBuilder(source.length());    int sourceIndex=0;    while (toRemoveIndex != -1) {      result.append(source.substring(sourceIndex,toRemoveIndex));      sourceIndex=toRemoveIndex + strToRemove.length();      toRemoveIndex=source.indexOf(strToRemove,sourceIndex);      if (toRemoveIndex == -1) {        result.append(source.substring(sourceIndex,source.length()));      }    }    return result.toString();  } else {    return source;  }}  }
class C{  public CharSequence convert(Object value,String key){  return (paramCount == 1) ? closure.call(value) : closure.call(value,key);}  }
class C{  public Builder exitAnimation(@AnimRes int exitAnimationResId){  this.exitAnimationResId=exitAnimationResId;  return this;}  }
class C{  private static void addStickyFooterDivider(Context ctx,ViewGroup footerView){  LinearLayout divider=new LinearLayout(ctx);  LinearLayout.LayoutParams dividerParams=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);  divider.setMinimumHeight((int)UIUtils.convertDpToPixel(1,ctx));  divider.setOrientation(LinearLayout.VERTICAL);  divider.setBackgroundColor(UIUtils.getThemeColorFromAttrOrRes(ctx,R.attr.material_drawer_divider,R.color.material_drawer_divider));  footerView.addView(divider,dividerParams);}  }
class C{  public boolean isMinYSet(){  return isMinYSet(0);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean thumb=evalBool(stack.pop());  Person p=getPerson(stack);  SeriesInfo si=getSeriesInfo(stack);  if (si == null || p == null)   return null;  String imageURL=si.getActorInCharacterImageURL(p,thumb);  if (imageURL == null || imageURL.length() == 0)   return null; else   return imageURL;}  }
class C{  public void forkRepository(@NotNull final String owner,@NotNull final String repositorySlug,@NotNull final String forkName,final boolean isForkPrivate,@NotNull final AsyncRequestCallback<BitbucketRepositoryFork> callback) throws IllegalArgumentException {  checkArgument(owner != null,"owner");  checkArgument(repositorySlug != null,"repositorySlug");  checkArgument(forkName != null && !isNullOrEmpty(forkName),"forkName");  checkArgument(callback != null,"callback");  final String requestUrl=getBaseUrl() + REPOSITORIES + "/"+ owner+ "/"+ repositorySlug+ "/fork"+ "?forkName="+ forkName+ "&isForkPrivate="+ isForkPrivate;  asyncRequestFactory.createPostRequest(requestUrl,null).loader(loaderFactory.newLoader()).send(callback);}  }
class C{  @SuppressWarnings("unused") private static boolean userHasRole(String privilegedRole,HttpServletRequest request){  return request.isUserInRole(privilegedRole);}  }
class C{  public static StddevProjectionExpression stddevDistinct(String propertyName){  return new StddevProjectionExpression(getPropExpr(propertyName),true);}  }
class C{  protected boolean haveSharedCellsRaw(ObjectMatrix1D other){  if (other instanceof SelectedSparseObjectMatrix1D) {    SelectedSparseObjectMatrix1D otherMatrix=(SelectedSparseObjectMatrix1D)other;    return this.elements == otherMatrix.elements;  } else   if (other instanceof SparseObjectMatrix1D) {    SparseObjectMatrix1D otherMatrix=(SparseObjectMatrix1D)other;    return this.elements == otherMatrix.elements;  }  return false;}  }
class C{  public static boolean stringToFile(final String data,final File targetFile,final boolean doAppend){  if (targetFile == null || !isWritable(targetFile,true)) {    Log.e(FileUtils.class,"stringToFile(): File is null or cant make path dirs");    return false;  }  boolean isSucceed=true;  try {    final FileWriter out=new FileWriter(targetFile,doAppend);    out.write(data);    out.flush();    out.close();  } catch (  IOException e) {    isSucceed=false;  }  return isSucceed;}  }
class C{  public EventStoreBuilder persistentSubscriptionBufferSize(int size){  settingsBuilder.persistentSubscriptionBufferSize(size);  return this;}  }
class C{  @Override public boolean isSelected(Photo photo){  return getSelectedPhotos().contains(photo.getPath());}  }
class C{  private boolean isFormType(){  return TYPE_FORM.equals(dataForm.getType());}  }
class C{  public void copyAttributes(Document doc,Element eold,Element enew){  if (eold.hasAttributes()) {    NamedNodeMap attr=eold.getAttributes();    int len=attr.getLength();    for (int i=0; i < len; i++) {      enew.setAttributeNode((Attr)doc.importNode(attr.item(i),true));    }  }}  }
class C{  public boolean isEmpty(){  return lat.isEmpty();}  }
class C{  private void handleAddLine(final String header,final String line,final NotificationType type){  insertNewline();  String dateString=dateFormatter.format(new Date());  insertTimestamp(dateString);  insertHeader(header);  insertText(line,type);}  }
class C{  public void testMarkSupported(){  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};  TestInputStream tis=new TestInputStream(data);  CipherInputStream cis=new CipherInputStream(tis,new NullCipher());  assertFalse("The returned by markSupported() method value " + "should be false.",cis.markSupported());}  }
class C{  private Figure readTextElement(IXMLElement elem) throws IOException {  HashMap<AttributeKey,Object> a=new HashMap<AttributeKey,Object>();  readCoreAttributes(elem,a);  readTransformAttribute(elem,a);  readOpacityAttribute(elem,a);  readShapeAttributes(elem,a);  readFontAttributes(elem,a);  readTextAttributes(elem,a);  String[] xStr=toCommaSeparatedArray(readAttribute(elem,"x","0"));  String[] yStr=toCommaSeparatedArray(readAttribute(elem,"y","0"));  Point2D.Double[] coordinates=new Point2D.Double[Math.max(xStr.length,yStr.length)];  double lastX=0;  double lastY=0;  for (int i=0; i < coordinates.length; i++) {    if (xStr.length > i) {      try {        lastX=toNumber(elem,xStr[i]);      } catch (      NumberFormatException ex) {      }    }    if (yStr.length > i) {      try {        lastY=toNumber(elem,yStr[i]);      } catch (      NumberFormatException ex) {      }    }    coordinates[i]=new Point2D.Double(lastX,lastY);  }  String[] rotateStr=toCommaSeparatedArray(readAttribute(elem,"rotate",""));  double[] rotate=new double[rotateStr.length];  for (int i=0; i < rotateStr.length; i++) {    try {      rotate[i]=toDouble(elem,rotateStr[i]);    } catch (    NumberFormatException ex) {      rotate[i]=0;    }  }  DefaultStyledDocument doc=new DefaultStyledDocument();  try {    if (elem.getContent() != null) {      doc.insertString(0,toText(elem,elem.getContent()),null);    } else {      for (      IXMLElement node : elem.getChildren()) {        if (node.getName() == null) {          doc.insertString(0,toText(elem,node.getContent()),null);        } else         if (node.getName().equals("tspan")) {          readTSpanElement((IXMLElement)node,doc);        } else {          if (DEBUG) {            System.out.println("SVGInputFormat unsupported text node <" + node.getName() + ">");          }        }      }    }  } catch (  BadLocationException e) {    InternalError ex=new InternalError(e.getMessage());    ex.initCause(e);    throw ex;  }  Figure figure=factory.createText(coordinates,rotate,doc,a);  elementObjects.put(elem,figure);  return figure;}  }
class C{  public void initDefault(){  automatic=false;  redline=false;  lockDAVMinutes=240;  undoNumber=50;  xslDir=String.valueOf(GanttOptions.class.getResource("/xslt"));  xslFo=String.valueOf(GanttOptions.class.getResource("/xslfo/ganttproject.xsl"));  toolBarPosition=JToolBar.HORIZONTAL;  bShowStatusBar=true;  iconSize="16";  buttonsshow=GanttOptions.ICONS;  bExportName=true;  bExportComplete=true;  bExportRelations=true;  bExport3DBorders=false;  csvOptions=new CSVOptions();}  }
class C{  public void testTieBreaker() throws Exception {  Directory directory=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),directory);  addDoc("a123456",writer);  addDoc("c123456",writer);  addDoc("d123456",writer);  addDoc("e123456",writer);  Directory directory2=newDirectory();  RandomIndexWriter writer2=new RandomIndexWriter(random(),directory2);  addDoc("a123456",writer2);  addDoc("b123456",writer2);  addDoc("b123456",writer2);  addDoc("b123456",writer2);  addDoc("c123456",writer2);  addDoc("f123456",writer2);  IndexReader ir1=writer.getReader();  IndexReader ir2=writer2.getReader();  MultiReader mr=new MultiReader(ir1,ir2);  IndexSearcher searcher=newSearcher(mr);  FuzzyQuery fq=new FuzzyQuery(new Term("field","z123456"),1,0,2,false);  TopDocs docs=searcher.search(fq,2);  assertEquals(5,docs.totalHits);  mr.close();  ir1.close();  ir2.close();  writer.close();  writer2.close();  directory.close();  directory2.close();}  }
class C{  public boolean increment(float key){  return adjustValue(key,1);}  }
class C{  void findMissingKeys(Set<String> codeStrings,Set<String> resourceKeys){  for (  String cs : codeStrings) {    if (cs.matches("[A-Za-z][^.]*\\..*")) {      if (cs.matches(".*\\.java"))       continue;      if (cs.matches("(com|java|javax|sun)\\.[A-Za-z.]+"))       continue;      if (noResourceRequired.contains(cs))       continue;      if (hasMatch(resourceKeys,cs))       continue;      error("no match for \"" + cs + "\"");    }  }}  }
class C{  @SuppressWarnings("rawtypes") public static AbstractLiteralIV createInlineIV(final BigInteger value){  if (value.compareTo(MIN_LONG_AS_BIGINT) < 0 || value.compareTo(MAX_LONG_AS_BIGINT) > 0) {    return new XSDIntegerIV(value);  }  return createInlineIV(value.longValue());}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case StextPackage.TRANSITION_ROOT__DEF:    return def != null;}return super.eIsSet(featureID);}  }
class C{  public StringBuffer(){}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, FormatException, ChecksumException {  return decode(image,null);}  }
class C{  public static double cauchyCdf(double x){  return (Math.atan(x) + Math.PI / 2) / Math.PI;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof DefaultStatisticalCategoryDataset)) {    return false;  }  DefaultStatisticalCategoryDataset that=(DefaultStatisticalCategoryDataset)obj;  if (!this.data.equals(that.data)) {    return false;  }  return true;}  }
class C{  public static int[] truncateAndConvertToInt(long[] longArray){  int[] intArray=new int[longArray.length];  for (int i=0; i < longArray.length; i++) {    intArray[i]=longArray[i] > Integer.MAX_VALUE ? Integer.MAX_VALUE : longArray[i] < Integer.MIN_VALUE ? Integer.MIN_VALUE : (int)longArray[i];  }  return intArray;}  }
class C{  public boolean read(){  if (mBluetoothGatt == null)   return false;  if (mUuidCharacteristic != null) {    mBluetoothGatt.readCharacteristic(mUuidCharacteristic);    return true;  } else   if (mMajorMinorCharacteristic != null) {    mBluetoothGatt.readCharacteristic(mMajorMinorCharacteristic);    return true;  } else   if (mRssiCharacteristic != null) {    mBluetoothGatt.readCharacteristic(mRssiCharacteristic);    return true;  }  return false;}  }
class C{  public String asSingle(){  if (values.isEmpty()) {    return "";  }  JsonValue first=values.get(0);  if (first.isNull()) {    return "";  }  Object obj=first.getValue();  if (obj != null) {    return obj.toString();  }  List<JsonValue> array=first.getArray();  if (array != null && !array.isEmpty()) {    obj=array.get(0).getValue();    if (obj != null) {      return obj.toString();    }  }  return "";}  }
class C{  public synchronized void updateAllRows(int columnId){  fireTableRowsUpdated(0,getRowCount());}  }
class C{  public Version(int numericVersion){  this.numericVersion=toDigits(numericVersion);  StringBuilder builder=new StringBuilder();  for (  int i : this.numericVersion) {    builder.append(i + builder.length() == 0 ? "." : "");  }  this.version=builder.toString();}  }
class C{  public static boolean isBuiltIn(Type type){  return N4Scheme.isFromResourceWithN4Scheme(type);}  }
class C{  public void write(byte[] data){  if (mBluetoothGatt != null) {    mWriteCharacteristic.setValue(data);    mBluetoothGatt.writeCharacteristic(mWriteCharacteristic);  }}  }
class C{  public void removeParameter(String name){  parameters.remove(name);}  }
class C{  @Override public void paintComponent(java.awt.Graphics g){  java.awt.Graphics2D g2=(java.awt.Graphics2D)g;  g2.setBackground(Color.white);  g2.clearRect(0,0,getWidth(),getHeight());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void test_encode_decode_0bits_stress(){  final Random r=new Random();  final TermIdEncoder encoder=new TermIdEncoder(0);  for (int i=0; i < 1000000; i++) {    final long v0=r.nextLong();    if (v0 == 0L) {      continue;    }    final long v1=encoder.encode(v0);    final long v2=encoder.encode2(v0);    assertTrue(v1 == v2);    if (v0 != v1)     fail(encoder,v0,v1);  }}  }
class C{  public void decodeDCTCoeffs(ShortBuffer[] buffer,int numMCURows) throws IOException {  if (!insideSOS) {    throw new IllegalStateException("decode not started");  }  if (numMCURows <= 0 || currentMCURow + numMCURows > mcuCountY) {    throw new IllegalArgumentException("numMCURows");  }  int scanN=order.length;  if (scanN != components.length) {    throw new UnsupportedOperationException("for RAW decode all components need to be decoded at once");  }  if (scanN > buffer.length) {    throw new IllegalArgumentException("not enough buffers");  }  for (int compIdx=0; compIdx < scanN; compIdx++) {    order[compIdx].outPos=buffer[compIdx].position();  }  outer:   for (int j=0; j < numMCURows; j++) {    ++currentMCURow;    for (int i=0; i < mcuCountX; i++) {      for (int compIdx=0; compIdx < scanN; compIdx++) {        Component c=order[compIdx];        ShortBuffer sb=buffer[compIdx];        int outStride=64 * c.blocksPerMCUHorz * mcuCountX;        int outPos=c.outPos + 64 * i * c.blocksPerMCUHorz + j * c.blocksPerMCUVert * outStride;        for (int y=0; y < c.blocksPerMCUVert; y++) {          sb.position(outPos);          for (int x=0; x < c.blocksPerMCUHorz; x++) {            try {              decodeBlock(data,c);            } catch (            ArrayIndexOutOfBoundsException ex) {              throwBadHuffmanCode();            }            sb.put(data);          }          outPos+=outStride;        }      }      if (--todo <= 0) {        if (!checkRestart()) {          break outer;        }      }    }  }  checkDecodeEnd();  for (int compIdx=0; compIdx < scanN; compIdx++) {    Component c=order[compIdx];    int outStride=64 * c.blocksPerMCUHorz * mcuCountX;    buffer[compIdx].position(c.outPos + numMCURows * c.blocksPerMCUVert * outStride);  }}  }
class C{  public Attribute value(TargetAttribute targetAttribute){  xmlAttribute.value=targetAttribute.toXStream();  return this;}  }
class C{  public boolean increment(long key){  return adjustValue(key,1);}  }
class C{  public boolean hasVideoStatusExt(){  return hasExtension(GphotoVideoStatus.class);}  }
class C{  public static int overload1or2(int one){  return one;}  }
class C{  public OutputNode put(String name,String value){  OutputNode node=new OutputAttribute(source,name,value);  if (source != null) {    put(name,node);  }  return node;}  }
class C{  @Override public boolean solutionGoodEnough(Population pop) throws OperatorException {  return pop.empty() || generationsWOImp > 0 && pop.getGenerationsWithoutImproval() >= generationsWOImp || pop.getGeneration() >= maxGenerations;}  }
class C{  protected void sequence_Primary(ISerializationContext context,Parameters semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static <T>Range<T> lessThan(T v){  return range(null,null,v,BoundType.OPEN);}  }
class C{  public static double calculateLogLikelihood(IntervalList intervals,DemographicFunction demographicFunction){  return calculateLogLikelihood(intervals,demographicFunction,0.0);}  }
class C{  private Item newDouble(final double value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.put1(DOUBLE).put8(Double.doubleToLongBits(value));    result=new Item(index,key);    put(result);    index+=2;  }  return result;}  }
class C{  public void removeContextDataFactory(ContextDataFactory contextDataFactory){  if (contextDataFactory == null) {    throw new IllegalArgumentException("Parameter contextDataFactory must not be null.");  }  contextDataFactories.remove(contextDataFactory);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:51.025 -0500",hash_original_method="3D7442B3A5CE831DBB9C36AFA9551D12",hash_generated_method="446CA08DBEC578D6A1C8A4F194264E1A") public ParseException createParseException(){  return new ParseException(this.buffer,this.ptr);}  }
class C{  public OrganizationAuthoritiesException(String message,Object[] params){  super(message,params);}  }
class C{  public void clearAdditionalRoles(){  getAdditionalRoles().clear();}  }
class C{  public FsPermission permission(){  return perm;}  }
class C{  public UnsignedInteger inc(){  return valueOf(getValue() + 1);}  }
class C{  Type toType(Environment env,Context ctx){  Identifier id=toIdentifier(this);  if (id == null) {    env.error(where,"invalid.type.expr");    return Type.tError;  }  Type t=Type.tClass(ctx.resolveName(env,id));  if (env.resolve(where,ctx.field.getClassDefinition(),t)) {    return t;  }  return Type.tError;}  }
class C{  public void readBoolean() throws IOException {  if (tag != ASN1Constants.TAG_BOOLEAN) {    throw expected("boolean");  }  if (length != 1) {    throw new ASN1Exception("Wrong length for ASN.1 boolean at [" + tagOffset + "]");  }  readContent();}  }
class C{  public static Vector2 floor(Vector2 o){  return new Vector2(Math.floor(o.x),Math.floor(o.z));}  }
class C{  public void sendMessage(SimpleString targetAddress,ClientMessage message){  if (targetAddress == null) {    throw new IllegalArgumentException(String.format("%s error - address cannot be null",this.getClass().getSimpleName()));  }  try {    if (autoCreateQueue && !session.addressQuery(targetAddress).isExists()) {      log.warn("queue does not exist - creating queue: address = {}, name = {}",address.toString(),address.toString());      session.createQueue(targetAddress,targetAddress);    }  } catch (  ActiveMQException amqEx) {    throw new ActiveMQClientResourceException(String.format("Queue creation failed for queue: address = %s, name = %s",address.toString(),address.toString()));  }  try {    producer.send(targetAddress,message);  } catch (  ActiveMQException amqEx) {    throw new ActiveMQClientResourceException(String.format("Failed to send message to %s",targetAddress.toString()),amqEx);  }}  }
class C{  private Hop fuseSumSquared(Hop parent,Hop hi,int pos) throws HopsException {  if (hi instanceof AggUnaryOp && ((AggUnaryOp)hi).getOp() == AggOp.SUM) {    Hop sumInput=hi.getInput().get(0);    if (sumInput instanceof BinaryOp && ((BinaryOp)sumInput).getOp() == OpOp2.POW && sumInput.getInput().get(1) instanceof LiteralOp && HopRewriteUtils.getDoubleValue((LiteralOp)sumInput.getInput().get(1)) == 2 && sumInput.getParent().size() == 1) {      Hop x=sumInput.getInput().get(0);      if (x.getDim2() > 1) {        DataType dt=hi.getDataType();        ValueType vt=hi.getValueType();        Direction dir=((AggUnaryOp)hi).getDirection();        long brlen=hi.getRowsInBlock();        long bclen=hi.getColsInBlock();        AggUnaryOp sumSq=new AggUnaryOp("sumSq",dt,vt,AggOp.SUM_SQ,dir,x);        HopRewriteUtils.setOutputBlocksizes(sumSq,brlen,bclen);        HopRewriteUtils.removeChildReferenceByPos(parent,hi,pos);        HopRewriteUtils.addChildReference(parent,sumSq,pos);        if (hi.getParent().isEmpty())         HopRewriteUtils.removeAllChildReferences(hi);        if (sumInput.getParent().isEmpty())         HopRewriteUtils.removeAllChildReferences(sumInput);        hi=sumSq;      }    }  }  return hi;}  }
class C{  public BeansAccessBuilder(Class<?> type,Accessor[] accs,DynamicClassLoader loader){  this.type=type;  this.accs=accs;  this.loader=loader;  this.className=type.getName();  if (className.startsWith("java."))   this.accessClassName="net.minidev.asm." + className + "AccAccess"; else   this.accessClassName=className.concat("AccAccess");  this.accessClassNameInternal=accessClassName.replace('.','/');  this.classNameInternal=className.replace('.','/');}  }
class C{  private void checkState(){  if (!start) {    throw new IllegalStateException("Cannot visit member before visit has been called.");  }  if (end) {    throw new IllegalStateException("Cannot visit member after visitEnd has been called.");  }}  }
class C{  public void paint(Graphics2D g){}  }
class C{  public ReadOnlyLDAPUser(String userName,String userDN,LdapContext ldapContext){  this();  _userName=userName;  _userDN=userDN;  _ldapContext=ldapContext;}  }
class C{  public static Certificate[] verifySignature(InputStream signature,InputStream signatureBlock) throws IOException, GeneralSecurityException {  BerInputStream bis=new BerInputStream(signatureBlock);  ContentInfo info=(ContentInfo)ContentInfo.ASN1.decode(bis);  SignedData signedData=info.getSignedData();  if (signedData == null) {    throw new IOException("No SignedData found");  }  Collection<org.apache.harmony.security.x509.Certificate> encCerts=signedData.getCertificates();  if (encCerts.isEmpty()) {    return null;  }  X509Certificate[] certs=new X509Certificate[encCerts.size()];  int i=0;  for (  org.apache.harmony.security.x509.Certificate encCert : encCerts) {    certs[i++]=new X509CertImpl(encCert);  }  List<SignerInfo> sigInfos=signedData.getSignerInfos();  SignerInfo sigInfo;  if (!sigInfos.isEmpty()) {    sigInfo=sigInfos.get(0);  } else {    return null;  }  X500Principal issuer=sigInfo.getIssuer();  BigInteger snum=sigInfo.getSerialNumber();  int issuerSertIndex=0;  for (i=0; i < certs.length; i++) {    if (issuer.equals(certs[i].getIssuerDN()) && snum.equals(certs[i].getSerialNumber())) {      issuerSertIndex=i;      break;    }  }  if (i == certs.length) {    return null;  }  if (certs[issuerSertIndex].hasUnsupportedCriticalExtension()) {    throw new SecurityException("Can not recognize a critical extension");  }  final String daOid=sigInfo.getDigestAlgorithm();  final String daName=sigInfo.getDigestAlgorithmName();  final String deaOid=sigInfo.getDigestEncryptionAlgorithm();  String alg=null;  Signature sig=null;  if (daOid != null && deaOid != null) {    alg=daOid + "with" + deaOid;    try {      sig=Signature.getInstance(alg);    } catch (    NoSuchAlgorithmException e) {    }    if (sig == null) {      final String deaName=sigInfo.getDigestEncryptionAlgorithmName();      alg=daName + "with" + deaName;      try {        sig=Signature.getInstance(alg);      } catch (      NoSuchAlgorithmException e) {      }    }  }  if (sig == null && daOid != null) {    alg=daOid;    try {      sig=Signature.getInstance(alg);    } catch (    NoSuchAlgorithmException e) {    }    if (sig == null && daName != null) {      alg=daName;      try {        sig=Signature.getInstance(alg);      } catch (      NoSuchAlgorithmException e) {      }    }  }  if (sig == null) {    return null;  }  sig.initVerify(certs[issuerSertIndex]);  List<AttributeTypeAndValue> atr=sigInfo.getAuthenticatedAttributes();  byte[] sfBytes=new byte[signature.available()];  signature.read(sfBytes);  if (atr == null) {    sig.update(sfBytes);  } else {    sig.update(sigInfo.getEncodedAuthenticatedAttributes());    byte[] existingDigest=null;    for (    AttributeTypeAndValue a : atr) {      if (Arrays.equals(a.getType().getOid(),MESSAGE_DIGEST_OID)) {        if (existingDigest != null) {          throw new SecurityException("Too many MessageDigest attributes");        }        Collection<?> entries=a.getValue().getValues(ASN1OctetString.getInstance());        if (entries.size() != 1) {          throw new SecurityException("Too many values for MessageDigest attribute");        }        existingDigest=(byte[])entries.iterator().next();      }    }    if (existingDigest == null) {      throw new SecurityException("Missing MessageDigest in Authenticated Attributes");    }    MessageDigest md=null;    if (daOid != null) {      md=MessageDigest.getInstance(daOid);    }    if (md == null && daName != null) {      md=MessageDigest.getInstance(daName);    }    if (md == null) {      return null;    }    byte[] computedDigest=md.digest(sfBytes);    if (!Arrays.equals(existingDigest,computedDigest)) {      throw new SecurityException("Incorrect MD");    }  }  if (!sig.verify(sigInfo.getEncryptedDigest())) {    throw new SecurityException("Incorrect signature");  }  return createChain(certs[issuerSertIndex],certs);}  }
class C{  private void onResized(){  Dimension screenSize=stendhal.getDisplaySize();  sw=getWidth();  sh=getHeight();  if (useScaling) {    double xScale=sw / screenSize.getWidth();    double yScale=sh / screenSize.getHeight();    scale=Math.max(xScale,yScale);    if (Math.abs(scale - 1.0) > 0.0001) {      useTripleBuffer=true;    } else {      useTripleBuffer=false;      buffer=null;    }  } else {    sw=Math.min(sw,screenSize.width);    sh=Math.min(sh,screenSize.height);    useTripleBuffer=false;    buffer=null;  }  calculateView(x,y);  center();}  }
class C{  public static void main(String... args) throws Exception {  final GenomeRelationships pedigree;  if (args[0].endsWith(".ped")) {    pedigree=PedFileParser.loadFile(new java.io.File(args[0]));  } else   if (args[0].endsWith(".vcf") || args[0].endsWith(".vcf.gz")) {    pedigree=VcfPedigreeParser.loadFile(new java.io.File(args[0]));  } else {    pedigree=RelationshipsFileParser.loadFile(new java.io.File(args[0]));  }  System.out.print(pedigree);  System.out.print(PedFileParser.toString(pedigree));  final Set<Family> families=Family.getFamilies(pedigree,false,null);  for (  Family f : families) {    System.out.println("Family: " + f);    String familycmd="";    familycmd+="--father " + f.getFather();    familycmd+=" --mother " + f.getMother();    for (    String child : f.getChildren()) {      if (pedigree.getSex(child) == Sex.MALE) {        familycmd+=" --son " + child;      } else       if (pedigree.getSex(child) == Sex.FEMALE) {        familycmd+=" --daughter " + child;      } else {        System.err.println("Child has unknown sex: " + child);      }    }    System.out.println("Sample arguments for rtg family: " + familycmd);  }}  }
class C{  public boolean isCodeAttribute(){  return false;}  }
class C{  public static RenderingHints convertShapeRendering(Element e,RenderingHints hints){  Value v=getComputedStyle(e,SVGCSSEngine.SHAPE_RENDERING_INDEX);  String s=v.getStringValue();  int len=s.length();  if ((len == 4) && (s.charAt(0) == 'a'))   return hints;  if (len < 10)   return hints;  if (hints == null)   hints=new RenderingHints(null);switch (s.charAt(0)) {case 'o':    hints.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_SPEED);  hints.put(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_OFF);break;case 'c':hints.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_DEFAULT);hints.put(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_OFF);break;case 'g':hints.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);hints.put(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);hints.put(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_PURE);break;}return hints;}  }
class C{  private ValueGraphVertex findOrCreateVertex(Register r){  ValueGraphVertex v=getVertex(r);  if (v == null) {    v=new ValueGraphVertex(r);    v.setLabel(r,0);    graph.addGraphNode(v);    nameMap.put(r,v);  }  return v;}  }
class C{  public void parseCaseByteCode(TextStream stream,DataOutputStream dataStream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network) throws IOException {  stream.nextWord();  stream.skipWhitespace();  dataStream.writeLong(network.createVertex(Primitive.CASE).getId());  Vertex variable=parseElement(stream,elements,debug,network);  dataStream.writeLong(variable.getId());  String next=stream.nextWord().toLowerCase();  if (next.equals(AS)) {    dataStream.writeLong(network.createVertex(Primitive.AS).getId());    parseElementByteCode(stream,dataStream,elements,debug,network);    next=stream.nextWord().toLowerCase();  }  if (next.equals(TOPIC)) {    dataStream.writeLong(network.createVertex(Primitive.TOPIC).getId());    parseElementByteCode(stream,dataStream,elements,debug,network);    next=stream.nextWord().toLowerCase();  }  if (next.equals(THAT)) {    dataStream.writeLong(network.createVertex(Primitive.THAT).getId());    parseElementByteCode(stream,dataStream,elements,debug,network);    next=stream.nextWord().toLowerCase();  }  if (next.equals(GOTO)) {    dataStream.writeLong(network.createVertex(Primitive.GOTO).getId());    stream.skipWhitespace();    boolean parseGoto=true;    while (parseGoto) {      parseElementByteCode(stream,dataStream,elements,debug,network);      stream.skipWhitespace();      if (stream.peek() == ',') {        stream.skip();      } else {        parseGoto=false;      }    }    dataStream.writeLong(0l);  } else   if (next.equals(TEMPLATE) || next.equals(ANSWER)) {    dataStream.writeLong(network.createVertex(Primitive.TEMPLATE).getId());    parseElementByteCode(stream,dataStream,elements,debug,network);  } else   if (next.equals(RETURN)) {    dataStream.writeLong(network.createVertex(Primitive.GOTO).getId());    dataStream.writeLong(network.createVertex(Primitive.RETURN).getId());    dataStream.writeLong(0l);  } else {    stream.setPosition(stream.getPosition() - next.length());    throw new SelfParseException("expected one of GOTO, TEMPLATE, ANSWER, RETURN, THAT, TOPIC, found: " + next,stream);  }  next=stream.peekWord().toLowerCase();  if (next.equals(FOR)) {    dataStream.writeLong(network.createVertex(Primitive.FOR).getId());    stream.nextWord();    ensureNext(EACH,stream);    parseElementByteCode(stream,dataStream,elements,debug,network);    ensureNext(OF,stream);    parseElementByteCode(stream,dataStream,elements,debug,network);    dataStream.writeLong(0l);  }  dataStream.writeLong(0l);  ensureNext(';',stream);}  }
class C{  public void adjustTransformation(BoundingBox bb,int viewWidth,int viewHeight){  if (bb != null) {    lonCorr=(float)Math.cos((bb.getLatMax() + bb.getLatMin()) / 360.0 * Math.PI);    float scaleX=1f;    float scaleY=1f;    if (bb.getLonMax() > bb.getLonMin())     scaleX=viewWidth / ((bb.getLonMax() - bb.getLonMin()) * lonCorr);    if (bb.getLatMax() > bb.getLatMin())     scaleY=viewHeight / (bb.getLatMax() - bb.getLatMin());    dotsPerDeg=Math.max(scaleX,scaleY);    originLon=bb.getLonMin();    originLat=bb.getLatMax();    originLon+=(bb.getLonMax() - lon(viewWidth)) / 2.0;    originLat+=(bb.getLatMin() - lat(viewHeight)) / 2.0;  } else {    lonCorr=1.0f;    dotsPerDeg=100;    originLon=0;    originLat=0;  }}  }
class C{  boolean addEquivalentProperty(OwlProperty p){  boolean change=this.superProperties.add(p);  change=p.superProperties.add(this) || change;  return change;}  }
class C{  public void removeRestrictionList(Node n){  while (!nodeCausingRestriction.empty() && nodeCausingRestriction.peek() == n) {    neighbourLists.pop();    nodeCausingRestriction.pop();  }}  }
class C{  private void createOnePerson(Coord coord,Coord coordWork,String mode,String toFromPrefix,double activityChain){  Id<Person> personId=Id.createPersonId(toFromPrefix + this.personcount);  this.personcount++;  Person person=scenario.getPopulation().getFactory().createPerson(personId);  Plan plan=scenario.getPopulation().getFactory().createPlan();  Activity home=scenario.getPopulation().getFactory().createActivityFromCoord("home",coord);  double startTime=6.5 * 60 * 60 + (2 * 60 * 60* rnd.nextDouble());  home.setEndTime(startTime);  plan.addActivity(home);  Leg hinweg1=scenario.getPopulation().getFactory().createLeg(mode);  plan.addLeg(hinweg1);  if (ENRICHPLANS) {    if ((activityChain > 0.6) && (activityChain <= 0.7)) {      Activity kindergarten1=scenario.getPopulation().getFactory().createActivityFromCoord("kindergarten1",this.findClosestCoordInMap(coord,kindergartens));      kindergarten1.setMaximumDuration(300 + rnd.nextInt(300));      plan.addActivity(kindergarten1);      Leg hinweg2=scenario.getPopulation().getFactory().createLeg(mode);      plan.addLeg(hinweg2);    }  }  Activity work=scenario.getPopulation().getFactory().createActivityFromCoord("work",coordWork);  double workEndTime=startTime + (7.5 * 60 * 60) + (1 * 60 * 60* rnd.nextDouble());  work.setEndTime(workEndTime);  plan.addActivity(work);  Leg rueckweg1=scenario.getPopulation().getFactory().createLeg(mode);  plan.addLeg(rueckweg1);  if (ENRICHPLANS) {    if ((activityChain > 0.6) && (activityChain <= 0.7)) {      Activity kindergarten2=scenario.getPopulation().getFactory().createActivityFromCoord("kindergarten2",this.findClosestCoordInMap(coord,kindergartens));      kindergarten2.setMaximumDuration(300 + rnd.nextInt(300));      plan.addActivity(kindergarten2);      Leg back2=scenario.getPopulation().getFactory().createLeg(mode);      plan.addLeg(back2);    }  }  if (ENRICHPLANS) {    if (activityChain > 0.7) {      Activity home2=scenario.getPopulation().getFactory().createActivityFromCoord("home",coord);      double startShoppingTime=workEndTime + (1 * 60 * 60) + (0.5 * 60 * 60* rnd.nextDouble());      home2.setEndTime(startShoppingTime);      plan.addActivity(home2);      Leg zumShoppen=scenario.getPopulation().getFactory().createLeg(mode);      plan.addLeg(zumShoppen);      Activity shopping=scenario.getPopulation().getFactory().createActivityFromCoord("shopping",this.findClosestCoordInMap(coord,shops));      shopping.setEndTime(startShoppingTime + (0.5 * 60 * 60) + (1 * 60 * 60* rnd.nextDouble()));      plan.addActivity(shopping);      Leg vomShoppen=scenario.getPopulation().getFactory().createLeg(mode);      plan.addLeg(vomShoppen);    }  }  Activity home3=scenario.getPopulation().getFactory().createActivityFromCoord("home",coord);  plan.addActivity(home3);  person.addPlan(plan);  scenario.getPopulation().addPerson(person);}  }
class C{  public void verify() throws VerificationException {  final Transaction fromTx=getOutpoint().fromTx;  long spendingIndex=getOutpoint().getIndex();  checkNotNull(fromTx,"Not connected");  final TransactionOutput output=fromTx.getOutput((int)spendingIndex);  verify(output);}  }
class C{  public static String generateSystemUniqueId(String salt){  return getEncodedHash(IdentifierUtil.getFirstNetworkInterfaceHardwareAddress(),salt.getBytes(Charset.forName("UTF-8")));}  }
class C{  private void removeListeners(final IDebugger debugger){  debugger.getProcessManager().removeListener(m_processListener);  debugger.getBreakpointManager().removeListener(m_breakpointManagerListener);  debugger.removeListener(m_debugEventListener);}  }
class C{  public OpenMsCapiAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("OpenMsCapiAction.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() + InputEvent.SHIFT_MASK));  putValue(LONG_DESCRIPTION,res.getString("OpenMsCapiAction.statusbar"));  putValue(NAME,res.getString("OpenMsCapiAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("OpenMsCapiAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("OpenMsCapiAction.image")))));}  }
class C{  public void onResponse(DiscoveryNode node){  boolean found=pendingNodes.remove(node);  assert found : "node [" + node + "] already responded or failed";  latch.countDown();}  }
class C{  public void test_ConstructorIF(){  LinkedHashMap hm2=new LinkedHashMap(5,(float)0.5);  assertEquals("Created incorrect LinkedHashMap",0,hm2.size());  try {    new LinkedHashMap(0,0);    fail("Failed to throw IllegalArgumentException for initial " + "load factor <= 0");  } catch (  IllegalArgumentException e) {  }  LinkedHashMap empty=new LinkedHashMap(0,0.75f);  assertNull("Empty hashtable access",empty.get("nothing"));  empty.put("something","here");  assertTrue("cannot get element",empty.get("something") == "here");}  }
class C{  public Builder newBuilder(){  return new Builder(this);}  }
class C{  @JsonProperty("operation") public GeoShapeConditionBuilder operation(String operation){  this.operation=GeoOperation.parse(operation);  return this;}  }
class C{  public void checkValidity(Date date) throws CertificateExpiredException, CertificateNotYetValidException {  try {    wrappedCert.checkValidity(date);  } catch (  java.security.cert.CertificateNotYetValidException e) {    throw new CertificateNotYetValidException(e.getMessage());  }catch (  java.security.cert.CertificateExpiredException e) {    throw new CertificateExpiredException(e.getMessage());  }}  }
class C{  public void multiplyVector4fByMatrix(Vector4f vector){  if (matrixValid && matrix.length == 16) {    float x=0;    float y=0;    float z=0;    float w=0;    float[] vectorArray=vector.ToArray();    if (colMaj) {      for (int i=0; i < 4; i++) {        int k=i * 4;        x+=this.matrix[k + 0] * vectorArray[i];        y+=this.matrix[k + 1] * vectorArray[i];        z+=this.matrix[k + 2] * vectorArray[i];        w+=this.matrix[k + 3] * vectorArray[i];      }    } else {      for (int i=0; i < 4; i++) {        x+=this.matrix[0 + i] * vectorArray[i];        y+=this.matrix[4 + i] * vectorArray[i];        z+=this.matrix[8 + i] * vectorArray[i];        w+=this.matrix[12 + i] * vectorArray[i];      }    }    vector.setX(x);    vector.setY(y);    vector.setZ(z);    vector.setW(w);  } else   Log.e("matrix","Matrix is invalid, is " + matrix.length + " long, this equation expects a 16 value matrix");}  }
class C{  protected JavaScriptSourceViewerConfiguration createTypeScriptSourceViewerConfiguration(){  JavaScriptTextTools textTools=JavaScriptPlugin.getDefault().getJavaTextTools();  return new TypeScriptSourceViewerConfiguration(textTools.getColorManager(),getPreferenceStore(),this,IJavaScriptPartitions.JAVA_PARTITIONING);}  }
class C{  void createEntry(int hash,K key,V value,int bucketIndex){  MyIdentityHashMap.Entry<K,V> old=table[bucketIndex];  Entry<K,V> e=new Entry<K,V>(hash,key,value,old);  table[bucketIndex]=e;  e.addBefore(header);  size++;}  }
class C{  public static int effectiveDistance(IGame game,Entity attacker,Targetable target,boolean useGroundDistance){  if (Compute.isAirToGround(attacker,target)) {    return 0;  }  Vector<Coords> attackPos=new Vector<Coords>();  attackPos.add(attacker.getPosition());  Vector<Coords> targetPos=new Vector<Coords>();  targetPos.add(target.getPosition());  if ((attacker instanceof Dropship) && !attacker.isAirborne() && !attacker.isSpaceborne()) {    attackPos=new Vector<Coords>();    for (    int key : attacker.getSecondaryPositions().keySet()) {      attackPos.add(attacker.getSecondaryPositions().get(key));    }  }  if ((target instanceof Entity) && (target instanceof Dropship) && !((Entity)target).isAirborne()&& !((Entity)target).isSpaceborne()) {    targetPos=new Vector<Coords>();    for (    int key : ((Entity)target).getSecondaryPositions().keySet()) {      targetPos.add(((Entity)target).getSecondaryPositions().get(key));    }  }  int distance=Integer.MAX_VALUE;  for (  Coords apos : attackPos) {    for (    Coords tpos : targetPos) {      if ((tpos != null) && (apos != null) && (apos.distance(tpos) < distance)) {        distance=apos.distance(tpos);      }    }  }  if (Compute.isGroundToAir(attacker,target) && (target instanceof Entity)) {    distance=attacker.getPosition().distance(getClosestFlightPath(attacker.getId(),attacker.getPosition(),(Entity)target));    if (attacker.usesWeaponBays() && game.getBoard().onGround()) {      distance=(int)Math.ceil(distance / 16.0);    }  }  if (Compute.isAirToAir(attacker,target) && game.getBoard().onGround() && !useGroundDistance) {    distance=(int)Math.ceil(distance / 16.0);  }  if (Compute.isInSameBuilding(game,attacker,target)) {    int aElev=attacker.getElevation();    int tElev=target.getElevation();    distance+=Math.abs(aElev - tElev);  }  if (Compute.isAirToAir(attacker,target)) {    int aAlt=attacker.getAltitude();    int tAlt=target.getAltitude();    if (target.isAirborneVTOLorWIGE()) {      tAlt++;    }    distance+=Math.abs(aAlt - tAlt);  }  if (Compute.isGroundToAir(attacker,target)) {    if (attacker.usesWeaponBays() && game.getBoard().onGround()) {      distance+=(target.getAltitude());    } else {      distance+=(2 * target.getAltitude());    }  }  return distance;}  }
class C{  public Iterator iterator(){  return keySet.iterator();}  }
class C{  public void createDummyAccount(){  mAccount=new DummyAccountFactory(mAccountConfig).setHttpClient(httpclient).createAccount();}  }
class C{  private void scan(Detail detail) throws Exception {  DefaultType override=detail.getOverride();  DefaultType access=detail.getAccess();  Class base=detail.getSuper();  if (base != null) {    extend(base,override);  }  extract(detail,access);  extract(detail);  build();}  }
class C{  private ProjectWizard createDefaultWizard(@Nullable MutableProjectConfig dataObject,@NotNull ProjectWizardMode mode){  final ProjectWizard projectWizard=projectWizardFactory.newWizard(dataObject,mode);  projectWizard.setUpdateDelegate(this);  projectWizard.addPage(categoriesPage);  return projectWizard;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (bayesIm == null) {    throw new NullPointerException();  }}  }
class C{  private void testSumSquared(String testName,boolean sparse,boolean vector,boolean rewrites,ExecType platform){  boolean rewritesOld=OptimizerUtils.ALLOW_ALGEBRAIC_SIMPLIFICATION;  OptimizerUtils.ALLOW_ALGEBRAIC_SIMPLIFICATION=rewrites;  RUNTIME_PLATFORM platformOld=rtplatform;switch (platform) {case MR:    rtplatform=RUNTIME_PLATFORM.HADOOP;  break;case SPARK:rtplatform=RUNTIME_PLATFORM.SPARK;break;default :rtplatform=RUNTIME_PLATFORM.SINGLE_NODE;break;}boolean sparkConfigOld=DMLScript.USE_LOCAL_SPARK_CONFIG;if (rtplatform == RUNTIME_PLATFORM.SPARK) DMLScript.USE_LOCAL_SPARK_CONFIG=true;try {getAndLoadTestConfiguration(testName);String HOME=SCRIPT_DIR + TEST_DIR;fullDMLScriptName=HOME + testName + ".dml";programArgs=new String[]{"-explain","-stats","-args",input(INPUT_NAME),output(OUTPUT_NAME)};fullRScriptName=HOME + testName + ".R";rCmd="Rscript" + " " + fullRScriptName + " "+ inputDir()+ " "+ expectedDir();double sparsity=sparse ? sparsity2 : sparsity1;int columns=vector ? 1 : cols;double[][] X=getRandomMatrix(rows,columns,-1,1,sparsity,7);writeInputMatrixWithMTD(INPUT_NAME,X,true);runTest(true,false,null,-1);runRScript(true);HashMap<CellIndex,Double> dmlfile=readDMLMatrixFromHDFS(OUTPUT_NAME);HashMap<CellIndex,Double> rfile=readRMatrixFromFS(OUTPUT_NAME);TestUtils.compareMatrices(dmlfile,rfile,eps,"Stat-DML","Stat-R");if (rewrites && (platform == ExecType.SPARK || platform == ExecType.CP)) {String prefix=(platform == ExecType.SPARK) ? Instruction.SP_INST_PREFIX : "";String opcode=prefix + op;boolean rewriteApplied=Statistics.getCPHeavyHitterOpCodes().contains(opcode);if (vector) Assert.assertFalse("Rewrite applied to vector case.",rewriteApplied); else Assert.assertTrue("Rewrite not applied to matrix case.",rewriteApplied);}}  finally {OptimizerUtils.ALLOW_ALGEBRAIC_SIMPLIFICATION=rewritesOld;rtplatform=platformOld;DMLScript.USE_LOCAL_SPARK_CONFIG=sparkConfigOld;}}  }
class C{  public String readLink(String path) throws IOException {  int req_id=generateNextRequestID();  TypesWriter tw=new TypesWriter();  tw.writeString(path,charsetName);  if (debug != null) {    debug.println("Sending SSH_FXP_READLINK...");    debug.flush();  }  sendMessage(Packet.SSH_FXP_READLINK,req_id,tw.getBytes());  byte[] resp=receiveMessage(34000);  if (debug != null) {    debug.println("Got REPLY.");    debug.flush();  }  TypesReader tr=new TypesReader(resp);  int t=tr.readByte();  int rep_id=tr.readUINT32();  if (rep_id != req_id)   throw new IOException("The server sent an invalid id field.");  if (t == Packet.SSH_FXP_NAME) {    int count=tr.readUINT32();    if (count != 1)     throw new IOException("The server sent an invalid SSH_FXP_NAME packet.");    return tr.readString(charsetName);  }  if (t != Packet.SSH_FXP_STATUS)   throw new IOException("The SFTP server sent an unexpected packet type (" + t + ")");  int errorCode=tr.readUINT32();  throw new SFTPException(tr.readString(),errorCode);}  }
class C{  public boolean isConnected(String clientHandle){  MqttConnection client=getConnection(clientHandle);  return client.isConnected();}  }
class C{  public void mousePressed(MouseEvent e){  if (log.isDebugEnabled()) {    log.debug("pressed " + (e.getModifiers() & MouseEvent.BUTTON1_MASK) + " "+ e.isPopupTrigger()+ " "+ (e.getModifiers() & (MouseEvent.ALT_MASK + MouseEvent.META_MASK + MouseEvent.CTRL_MASK))+ (" " + MouseEvent.ALT_MASK + "/"+ MouseEvent.META_MASK+ "/"+ MouseEvent.CTRL_MASK));  }  if (e.isPopupTrigger() && parentFrame.isSelected()) {    try {      _menu.show(e.getComponent(),e.getX(),e.getY());    } catch (    java.awt.IllegalComponentStateException cs) {    }    e.consume();  }}  }
class C{  public JsonWriter name(String name) throws IOException {  if (name == null) {    throw new NullPointerException("name == null");  }  if (deferredName != null) {    throw new IllegalStateException();  }  deferredName=name;  return this;}  }
class C{  public static boolean isVat(BigDecimal value){  return value != null && value.compareTo(BigDecimal.valueOf(100)) <= 0 && value.compareTo(BigDecimal.ZERO) >= 0 && value.scale() < 3;}  }
class C{  private OpcodeInfo(){}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public static boolean hasConflictingLink(final WorkItemLinkTypeEnd linkTypeEnd,final LinkCollection linkCollection){  if (linkTypeEnd.getLinkType().isOneToMany() && !linkTypeEnd.isForwardLink()) {    for (    final Link existingLink : linkCollection) {      if (existingLink instanceof RelatedLink) {        final RelatedLink existingRelatedLink=(RelatedLink)existingLink;        if (existingRelatedLink.getWorkItemLinkTypeID() == linkTypeEnd.getID()) {          return true;        }      }    }  }  return false;}  }
class C{  private void appendLinearizableQuery(QueryEntry entry,ServerSessionContext session,CompletableFuture<QueryResponse> future){  appender.appendEntries().whenComplete(null);}  }
class C{  private void initializeMessages(List<String> messages){  messages.addAll(Arrays.asList(TipOfTheDayMessages.getGeneralMessages()));  if (OSUtils.isWindows()) {    messages.addAll(Arrays.asList(TipOfTheDayMessages.getWindowsMessages()));  } else   if (OSUtils.isMacOSX()) {    messages.addAll(Arrays.asList(TipOfTheDayMessages.getMacOSXMessages()));  } else   if (OSUtils.isLinux()) {    messages.addAll(Arrays.asList(TipOfTheDayMessages.getLinuxMessages()));  } else {    messages.addAll(Arrays.asList(TipOfTheDayMessages.getOtherMessages()));  }  if (!OSUtils.isMacOSX()) {    messages.addAll(Arrays.asList(TipOfTheDayMessages.getNonMacOSXMessages()));  }  messages.addAll(Arrays.asList(TipOfTheDayMessages.getFrostWireMessages()));  Collections.shuffle(messages);  _currentTip=-1;}  }
class C{  public File file(){  return file;}  }
class C{  private void initSecurity(){  Policy policy=Policy.getPolicy();  if (policy != null) {    try {      String docBase=context.getRealPath("/");      if (docBase == null) {        docBase=options.getScratchDir().toString();      }      String codeBase=docBase;      if (!codeBase.endsWith(File.separator)) {        codeBase=codeBase + File.separator;      }      File contextDir=new File(codeBase);      URL url=contextDir.getCanonicalFile().toURL();      codeSource=new CodeSource(url,(Certificate[])null);      permissionCollection=policy.getPermissions(codeSource);      if (!docBase.endsWith(File.separator)) {        permissionCollection.add(new FilePermission(docBase,"read"));        docBase=docBase + File.separator;      } else {        permissionCollection.add(new FilePermission(docBase.substring(0,docBase.length() - 1),"read"));      }      docBase=docBase + "-";      permissionCollection.add(new FilePermission(docBase,"read"));      String workDir=options.getScratchDir().toString();      if (!workDir.endsWith(File.separator)) {        permissionCollection.add(new FilePermission(workDir,"read"));        workDir=workDir + File.separator;      }      workDir=workDir + "-";      permissionCollection.add(new FilePermission(workDir,"read"));      permissionCollection.add(new RuntimePermission("accessClassInPackage.org.apache.jasper.runtime"));      ClassLoader parentClassLoader=getParentClassLoader();      if (parentClassLoader instanceof URLClassLoader) {        URL[] urls=((URLClassLoader)parentClassLoader).getURLs();        String jarUrl=null;        String jndiUrl=null;        for (int i=0; i < urls.length; i++) {          if (jndiUrl == null && urls[i].toString().startsWith("jndi:")) {            jndiUrl=urls[i].toString() + "-";          }          if (jarUrl == null && urls[i].toString().startsWith("jar:jndi:")) {            jarUrl=urls[i].toString();            jarUrl=jarUrl.substring(0,jarUrl.length() - 2);            jarUrl=jarUrl.substring(0,jarUrl.lastIndexOf('/')) + "/-";          }        }        if (jarUrl != null) {          permissionCollection.add(new FilePermission(jarUrl,"read"));          permissionCollection.add(new FilePermission(jarUrl.substring(4),"read"));        }        if (jndiUrl != null)         permissionCollection.add(new FilePermission(jndiUrl,"read"));      }    } catch (    Exception e) {      context.log("Security Init for context failed",e);    }  }}  }
class C{  @SuppressWarnings("WeakerAccess") public static Map<String,String> splitCertificateSubject(String subject){  HashMap<String,String> map=new HashMap<>();  if (subject != null) {    String[] parts=subject.split(",");    for (    String part : parts) {      String[] kv=part.split("=");      if (kv.length != 2)       continue;      map.put(kv[0].trim(),kv[1].trim());    }  }  return map;}  }
class C{  @UiThreadTest @SmallTest public void testCancel() throws Exception {  mAnimator.cancel();}  }
class C{  protected TupleExpr selectNextTupleExpr(List<TupleExpr> expressions,Map<TupleExpr,Double> cardinalityMap,Map<TupleExpr,List<Var>> varsMap,Map<Var,Integer> varFreqMap,Set<String> boundVars){  double lowestCardinality=Double.MAX_VALUE;  TupleExpr result=null;  for (  TupleExpr tupleExpr : expressions) {    double cardinality=getTupleExprCardinality(tupleExpr,cardinalityMap,varsMap,varFreqMap,boundVars);    if (cardinality < lowestCardinality) {      lowestCardinality=cardinality;      result=tupleExpr;    }  }  return result;}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  private void cmd_print(){  if (fPaymentRule.getSelectedItem() == null)   return;  String PaymentRule=fPaymentRule.getSelectedItem().toValueNamePair().getValue();  log.info(PaymentRule);  if (!getChecks(PaymentRule))   return;  List<File> pdfList=new ArrayList<File>();  for (  MHRPaySelectionCheck check : m_checks) {    ReportEngine re=ReportEngine.get(Env.getCtx(),ReportEngine.HR_CHECK,check.get_ID());    try {      File file=File.createTempFile("WHRPayPrint",null);      re.getPDF(file);      pdfList.add(file);    } catch (    Exception e) {      log.log(Level.SEVERE,e.getLocalizedMessage(),e);      return;    }  }  SimplePDFViewer chequeViewer=null;  try {    File outFile=File.createTempFile("WHRPayPrint",null);    AEnv.mergePdf(pdfList,outFile);    chequeViewer=new SimplePDFViewer(form.getFormName(),new FileInputStream(outFile));    chequeViewer.setAttribute(Window.MODE_KEY,Window.MODE_EMBEDDED);    chequeViewer.setWidth("100%");  } catch (  Exception e) {    log.log(Level.SEVERE,e.getLocalizedMessage(),e);    return;  }  int lastDocumentNo=MHRPaySelectionCheck.confirmPrint(m_checks,m_batch);  if (lastDocumentNo != 0) {    StringBuffer sb=new StringBuffer();    sb.append("UPDATE C_BankAccountDoc SET CurrentNext=").append(++lastDocumentNo).append(" WHERE C_BankAccount_ID=").append(m_C_BankAccount_ID).append(" AND PaymentRule='").append(PaymentRule).append("'");    DB.executeUpdate(sb.toString(),null);  }  SimplePDFViewer remitViewer=null;  if (FDialog.ask(m_WindowNo,form,"VPayPrintPrintRemittance")) {    pdfList=new ArrayList<File>();    for (    MHRPaySelectionCheck check : m_checks) {      ReportEngine re=ReportEngine.get(Env.getCtx(),ReportEngine.HR_REMITTANCE,check.get_ID());      try {        File file=File.createTempFile("WHRPayPrint",null);        re.getPDF(file);        pdfList.add(file);      } catch (      Exception e) {        log.log(Level.SEVERE,e.getLocalizedMessage(),e);      }    }    try {      File outFile=File.createTempFile("WHRPayPrint",null);      AEnv.mergePdf(pdfList,outFile);      String name=Msg.translate(Env.getCtx(),"Remittance");      remitViewer=new SimplePDFViewer(form.getFormName() + " - " + name,new FileInputStream(outFile));      remitViewer.setAttribute(Window.MODE_KEY,Window.MODE_EMBEDDED);      remitViewer.setWidth("100%");    } catch (    Exception e) {      log.log(Level.SEVERE,e.getLocalizedMessage(),e);    }  }  dispose();  if (chequeViewer != null)   SessionManager.getAppDesktop().showWindow(chequeViewer);  if (remitViewer != null)   SessionManager.getAppDesktop().showWindow(remitViewer);}  }
class C{  public boolean computeScrollOffset(){  if (isFinished()) {    return false;  }switch (mMode) {case SCROLL_MODE:    long time=AnimationUtils.currentAnimationTimeMillis();  final long elapsedTime=time - mScrollerX.mStartTime;final int duration=mScrollerX.mDuration;if (elapsedTime < duration) {float q=(float)(elapsedTime) / duration;if (mInterpolator == null) {  q=Scroller.viscousFluid(q);} else {  q=mInterpolator.getInterpolation(q);}mScrollerX.updateScroll(q);mScrollerY.updateScroll(q);} else {abortAnimation();}break;case FLING_MODE:if (!mScrollerX.mFinished) {if (!mScrollerX.update()) {if (!mScrollerX.continueWhenFinished()) {mScrollerX.finish();}}}if (!mScrollerY.mFinished) {if (!mScrollerY.update()) {if (!mScrollerY.continueWhenFinished()) {mScrollerY.finish();}}}break;}return true;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public CategoryLabelPositions(CategoryLabelPosition top,CategoryLabelPosition bottom,CategoryLabelPosition left,CategoryLabelPosition right){  ParamChecks.nullNotPermitted(top,"top");  ParamChecks.nullNotPermitted(bottom,"bottom");  ParamChecks.nullNotPermitted(left,"left");  ParamChecks.nullNotPermitted(right,"right");  this.positionForAxisAtTop=top;  this.positionForAxisAtBottom=bottom;  this.positionForAxisAtLeft=left;  this.positionForAxisAtRight=right;}  }
class C{  @SuppressWarnings("rawtypes") public ArrayList loadChartObject(String SID,Long room_id,String fileName){  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkUserLevel(user_level)) {      String roomName=room_id.toString();      String current_dir=ScopeApplicationAdapter.webAppPath + File.separatorChar + OpenmeetingsVariables.UPLOAD_DIR+ File.separatorChar+ roomName+ File.separatorChar;      log.debug("### this is my working directory: " + current_dir);      return LibraryChartLoader.getInstance().loadChart(current_dir,fileName);    }  } catch (  Exception err) {    log.error("[loadChartObject] ",err);  }  return null;}  }
class C{  private static void xstaticSetRandomGenerator(RandomEngine randomGenerator){synchronized (shared) {    shared.setRandomGenerator(randomGenerator);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name_1: ");  result.append(name_1);  result.append(", stateName_1: ");  result.append(stateName_1);  result.append(')');  return result.toString();}  }
class C{  public String removeLeadingNoiseWords(String s){  if (noiseWords == null || noiseWords.size() == 0) {    return s;  }  String result=s.toUpperCase(locale);  boolean found=true;  int startPos=0;  while ((startPos < s.length()) && found) {    found=false;    for (    String noiseWord : noiseWords) {      if (result.substring(startPos).startsWith(noiseWord)) {        startPos+=noiseWord.length();        found=true;      }    }  }  result=s.substring(startPos);  if (!removeWords && startPos > 0) {    if (s.charAt(startPos - 1) == ' ')     startPos--;    result+=", " + s.substring(0,startPos);  }  return result;}  }
class C{  private String decodeString(String in) throws Exception {  byte[] out=Base64.decode(in,0);  return new String(out);}  }
class C{  public void registerObjectsForNotification(final Observer observer){  if (observer != null) {    registrator.setObserver(observer);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:04.297 -0500",hash_original_method="62A4EBD8F4E62508750FECA9D13AF599",hash_generated_method="BD27898EED9580F366AC4D9476AB1AFF") private static String convertObsoleteLanguageCodeToNew(String langCode){  if (langCode == null) {    return null;  }  if ("iw".equals(langCode)) {    return "he";  } else   if ("in".equals(langCode)) {    return "id";  } else   if ("ji".equals(langCode)) {    return "yi";  }  return langCode;}  }
class C{  public static X509Certificate createCertificate(String commonName,KeyPair keyPair,ContentSigner signer) throws Exception {  Calendar cal=GregorianCalendar.getInstance();  cal.add(Calendar.YEAR,-1);  Date notBefore=cal.getTime();  cal.add(Calendar.YEAR,2);  Date notAfter=cal.getTime();  X500Name subject=new X500Name("CN=" + commonName);  JcaX509v3CertificateBuilder builder=new JcaX509v3CertificateBuilder(subject,BigInteger.ONE,notBefore,notAfter,subject,keyPair.getPublic());  X509CertificateHolder holder=builder.build(signer);  return new JcaX509CertificateConverter().getCertificate(holder);}  }
class C{  public static boolean testRayTriangle(Vector3d origin,Vector3d dir,Vector3d v0,Vector3d v1,Vector3d v2,double epsilon){  return testRayTriangleFront(origin.x,origin.y,origin.z,dir.x,dir.y,dir.z,v0.x,v0.y,v0.z,v1.x,v1.y,v1.z,v2.x,v2.y,v2.z,epsilon);}  }
class C{  public void onClick(View v){  try {switch (v.getId()) {case R.id.view_main_button_play:      start();    break;case R.id.view_main_button_stop:  stop();break;}} catch (Exception e) {Log.e(LOG,"exc",e);}}  }
class C{  public RemoteDLockInfo(){}  }
class C{  public static void assertJDelete(String request,double delta,String... tests) throws Exception {  int queryStartPos=request.indexOf('?');  String query;  String path;  if (-1 == queryStartPos) {    query="";    path=request;  } else {    query=request.substring(queryStartPos + 1);    path=request.substring(0,queryStartPos);  }  query=setParam(query,"wt","json");  request=path + '?' + setParam(query,"indent","on");  String response;  boolean failed=true;  try {    response=restTestHarness.delete(request);    failed=false;  }  finally {    if (failed) {      log.error("REQUEST FAILED: " + request);    }  }  for (  String test : tests) {    if (null == test || 0 == test.length())     continue;    String testJSON=json(test);    try {      failed=true;      String err=JSONTestUtil.match(response,testJSON,delta);      failed=false;      if (err != null) {        log.error("query failed JSON validation. error=" + err + "\n expected ="+ testJSON+ "\n response = "+ response+ "\n request = "+ request+ "\n");        throw new RuntimeException(err);      }    }  finally {      if (failed) {        log.error("JSON query validation threw an exception." + "\n expected =" + testJSON + "\n response = "+ response+ "\n request = "+ request+ "\n");      }    }  }}  }
class C{  public static int computeEnumSize(final int fieldNumber,final int value){  return computeTagSize(fieldNumber) + computeEnumSizeNoTag(value);}  }
class C{  public String requestLine(){  return startLine;}  }
class C{  public RadioButton(String text,Image icon){  super(text,icon);  setUIID("RadioButton");}  }
class C{  public static <I,A,B>Parser<I,B> then(Parser<I,? extends A> p,Parser<I,B> q){  return null;}  }
class C{  public static void addSignature(JSONObject obj,PrivateKey key) throws InvalidKeyException, SignatureException {  removeSignature(obj);  Signature signature;  try {    signature=Signature.getInstance("SHA256withRSA");  } catch (  NoSuchAlgorithmException e) {    return;  }  signature.initSign(key);  signature.update(obj.toString().getBytes(StandardCharsets.UTF_8));  byte[] sigBytes=signature.sign();  obj.put(signatureString,new String(Base64.getEncoder().encode(sigBytes)));}  }
class C{  public static void localVarValueChanged(double newValue,String localVar,int lineNumber){  instance.localVarValueChanged(localVar,lineNumber,newValue);}  }
class C{  public static RE mkRange(char low,char high){  if (low == high) {    return mkChar(low);  }  RE res=new RE(ReOp.RANGE);  res.low=low;  res.high=high;  return res;}  }
class C{  private void shareText(WXShareContent content,WXMediaMessage msg,SendMessageToWX.Req req){  WXTextObject wxTextObject=new WXTextObject();  wxTextObject.text=content.getText();  msg.mediaObject=wxTextObject;  msg.description=content.getText();  req.transaction=buildTransaction("text");  req.message=msg;  req.scene=content.getScene();  mAPI.sendReq(req);}  }
class C{  public static boolean canOpen(Object source){  if (!gdalIsAvailable.get()) {    return false;  }  File file=(null != source) ? WWIO.getFileForLocalAddress(source) : null;  if (null == file) {    return false;  }  Dataset ds=null;  boolean canOpen=false;  try {    gdal.PushErrorHandler("CPLQuietErrorHandler");    if (file.exists() && file.canRead()) {      ds=gdal.Open(file.getAbsolutePath(),gdalconst.GA_ReadOnly);      canOpen=!(ds == null);    }  } catch (  Throwable t) {  } finally {    if (null != ds) {      ds.delete();    }    gdal.PopErrorHandler();  }  return canOpen;}  }
class C{  private void deletePubsubTopic(String topic) throws IOException {  if (pubsubClient == null) {    pubsubClient=Transport.newPubsubClient(options.as(PubsubOptions.class)).build();  }  if (executeNullIfNotFound(pubsubClient.projects().topics().get(topic)) != null) {    pubsubClient.projects().topics().delete(topic).execute();  }}  }
class C{  void clearSerializableDefinitions(){  this.cells.clear();  this.hDividers.clear();  this.vDividers.clear();}  }
class C{  private Map<Member,String[]> inspectClass(Class<?> clazz){  InputStream is=clazz.getResourceAsStream(ClassUtils.getClassFileName(clazz));  if (is == null) {    if (logger.isDebugEnabled()) {      logger.debug("Cannot find '.class' file for class [" + clazz + "] - unable to determine constructor/method parameter names");    }    return NO_DEBUG_INFO_MAP;  }  try {    ClassReader classReader=new ClassReader(is);    Map<Member,String[]> map=new ConcurrentHashMap<Member,String[]>(32);    classReader.accept(new ParameterNameDiscoveringVisitor(clazz,map),0);    return map;  } catch (  IOException ex) {    if (logger.isDebugEnabled()) {      logger.debug("Exception thrown while reading '.class' file for class [" + clazz + "] - unable to determine constructor/method parameter names",ex);    }  }catch (  IllegalArgumentException ex) {    if (logger.isDebugEnabled()) {      logger.debug("ASM ClassReader failed to parse class file [" + clazz + "], probably due to a new Java class file version that isn't supported yet "+ "- unable to determine constructor/method parameter names",ex);    }  } finally {    try {      is.close();    } catch (    IOException ex) {    }  }  return NO_DEBUG_INFO_MAP;}  }
class C{  @SafeVarargs public static final List<String> combine(Collection<String> list1,Collection<String>... lists){  List<String> ret=new LinkedList<String>(list1);  for (  Collection<String> list : lists) {    ret.addAll(list);  }  return ret;}  }
class C{  protected boolean afterDelete(boolean success){  if (!success)   return success;  return updateHeader();}  }
class C{  private double calculateXFactor(){  double deltaSource=sourceBBOX.getMaxX() - sourceBBOX.getMinX();  double deltaTarget=targetBBOX.getMaxX() - targetBBOX.getMinX();  return deltaTarget / deltaSource;}  }
class C{  public boolean containsValue(Object value){  return contains(value);}  }
class C{  public String toString(){  StringBuilder s=new StringBuilder();  for (  int i : st.keys()) {    s.append("(" + i + ", "+ st.get(i)+ ") ");  }  return s.toString();}  }
class C{  @Override public boolean supportsMultipleOpenResults(){  debugCodeCall("supportsMultipleOpenResults");  return true;}  }
class C{  public GridCacheLocalMultithreadedSelfTest(){  super(true);}  }
class C{  private void push(final ClassWriter cw,final String desc){  int type=type(cw,desc);  if (type != 0) {    push(type);    if (type == LONG || type == DOUBLE) {      push(TOP);    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notations;  Node notationNode;  String notationValue;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  notationNode=notations.getNamedItem("notation1");  assertNotNull("notationNotNull",notationNode);  notationValue=notationNode.getNodeValue();  assertNull("nodeValue",notationValue);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().setCCState(BasicVideoFrame.getCCStateCode(getString(stack)));  return null;}  }
class C{  public void reverse(){  final ArrayList<Animator> animators=mAnimatedVectorState.mAnimators;  final int size=animators.size();  for (int i=0; i < size; i++) {    final Animator animator=animators.get(i);    if (canReverse(animator)) {      reverse(animator);    } else {      Log.w(LOG_TAG,"AnimatedVectorDrawable can't reverse()");    }  }}  }
class C{  public void canonicalize(Map<K,V> returnVal){  Map<K,V> canonicalizedMappings=new HashMap<K,V>();  for (Iterator<Map.Entry<K,V>> iter=returnVal.entrySet().iterator(); iter.hasNext(); ) {    Map.Entry<K,V> entry=iter.next();    V myValue=get(entry.getKey());    if (myValue != null) {      iter.remove();      canonicalizedMappings.put(entry.getKey(),myValue);    }  }  returnVal.putAll(canonicalizedMappings);}  }
class C{  public static int quantile(ArrayModifiableDBIDs data,Comparator<? super DBIDRef> comparator,double quant){  return quantile(data,comparator,0,data.size(),quant);}  }
class C{  protected static final boolean isSmscDeliveryReceipt(byte registeredDelivery,byte smscDeliveryReceiptValue){  return (registeredDelivery & 0x03) == smscDeliveryReceiptValue;}  }
class C{  public double findMedianSortedArrays(int[] nums1,int[] nums2){  int m=nums1.length;  int n=nums2.length;  if (m > n) {    return findMedianSortedArrays(nums2,nums1);  }  int i=0;  int j=0;  int iMin=0;  int iMax=m;  int mid=(m + n + 1) / 2;  while (iMin <= iMax) {    i=(iMin + iMax) / 2;    j=mid - i;    if (j > 0 && i < m && nums2[j - 1] > nums1[i]) {      iMin=i + 1;    } else     if (i > 0 && j < n && nums1[i - 1] > nums2[j]) {      iMax=i - 1;    } else {      break;    }  }  int leftMax=0;  if (i == 0) {    leftMax=nums2[j - 1];  } else   if (j == 0) {    leftMax=nums1[i - 1];  } else {    leftMax=Math.max(nums1[i - 1],nums2[j - 1]);  }  if ((m + n) % 2 == 1) {    return leftMax;  }  int rightMin=0;  if (i == m) {    rightMin=nums2[j];  } else   if (j == n) {    rightMin=nums1[i];  } else {    rightMin=Math.min(nums1[i],nums2[j]);  }  return (leftMax + rightMin) / 2.0;}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder=MadRs.class.getClassLoader().getResource("workload/planetlab").getPath();  String outputFolder="output";  String workload="20110303";  String vmAllocationPolicy="mad";  String vmSelectionPolicy="rs";  String parameter="2.5";  new PlanetLabRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  private StoragePort compareAndSelectPortURIForUMFS(StorageSystem system,StoragePort currentUMFSPort,VirtualArray vArray){  StoragePort sPort=null;  URI adapterNativeGuid=currentUMFSPort.getStorageHADomain();  List<URI> storagePortsForVArray=returnAllPortsInVArray(vArray.getId());  List<URI> matchedPorts=new ArrayList<URI>();  if (null != adapterNativeGuid) {    List<URI> fellowPortURIs=returnAllFellowPortsInHADomain(adapterNativeGuid);    for (    URI fPortUri : fellowPortURIs) {      for (      URI vaPortUri : storagePortsForVArray) {        if (fPortUri.toString().equals(vaPortUri.toString())) {          URI localURI=fPortUri;          matchedPorts.add(localURI);        }      }    }  } else {    matchedPorts=returnAllPortsforStgArrayAndVArray(system,storagePortsForVArray);  }  if (matchedPorts != null && !matchedPorts.isEmpty()) {    Collections.shuffle(matchedPorts);    sPort=_dbClient.queryObject(StoragePort.class,matchedPorts.get(0));  }  return sPort;}  }
class C{  public Writer buildUniqueConstraintDeletionWriter(AbstractSession session,UniqueKeyConstraint uniqueKey,Writer writer) throws ValidationException {  try {    writer.write("ALTER TABLE " + getFullName());    writer.write(session.getPlatform().getUniqueConstraintDeletionString() + uniqueKey.getName());  } catch (  IOException ioException) {    throw ValidationException.fileError(ioException);  }  return writer;}  }
class C{  @Override @Transactional @CacheEvict(value="env",allEntries=true) public Application remove(Application application,User user) throws ServiceException, CheckException {  try {    logger.info("Starting removing application " + application.getName());    List<Module> listModules=application.getModules();    for (    Module module : listModules) {      try {        moduleService.remove(user,module,false,application.getStatus());      } catch (      ServiceException|CheckException e) {        application.setStatus(Status.FAIL);        logger.error("ApplicationService Error : failed to remove module " + module.getName() + " for application "+ application.getName()+ " : "+ e);        e.printStackTrace();      }    }    List<String> aliases=new ArrayList<>();    aliases.addAll(application.getAliases());    for (    String alias : aliases) {      removeAlias(application,alias);    }    Server server=application.getServer();    serverService.remove(server.getName());    application.removeServer();    applicationDAO.delete(application);    hipacheRedisUtils.removeRedisAppKey(application);    logger.info("ApplicationService : Application successfully removed ");  } catch (  PersistenceException e) {    setStatus(application,Status.FAIL);    logger.error("ApplicationService Error : failed to remove " + application.getName() + " : "+ e);    throw new ServiceException(e.getLocalizedMessage(),e);  }catch (  ServiceException e) {    setStatus(application,Status.FAIL);    logger.error("ApplicationService Error : failed to remove application " + application.getName() + " : "+ e);    e.printStackTrace();  }catch (  CheckException e) {    e.printStackTrace();  }  return application;}  }
class C{  public void findAndUndo(Iterator it){  while (it.hasNext()) {    findAndUndo(it.next());  }}  }
class C{  @NoInline @NoOptCompile public static Object invokeWithDotDotVarArg(int methodID,TypeReference expectReturnType) throws Exception {  MethodReference mr=MemberReference.getMethodRef(methodID);  Address varargAddress=getVarArgAddress(false);  Object[] argObjectArray=packageParameterFromVarArg(mr,varargAddress);  return callMethod(null,mr,argObjectArray,expectReturnType,true);}  }
class C{  @Override protected void initData(){  this.detailAdapter.setList(this.getDetail());  this.detailAdapter.notifyDataSetChanged();}  }
class C{  public void testPhrase() throws Exception {  PhraseQuery expected=new PhraseQuery("field","foo","bar");  assertEquals(expected,parse("\"foo bar\""));}  }
class C{  private void replyHalfConnected(int status){  Message msg=mSrcHandler.obtainMessage(CMD_CHANNEL_HALF_CONNECTED);  msg.arg1=status;  msg.obj=this;  msg.replyTo=mDstMessenger;  if (mConnection == null) {    mDeathMonitor=new DeathMonitor();    try {      mDstMessenger.getBinder().linkToDeath(mDeathMonitor,0);    } catch (    RemoteException e) {      mDeathMonitor=null;      msg.arg1=STATUS_BINDING_UNSUCCESSFUL;    }  }  mSrcHandler.sendMessage(msg);}  }
class C{  public Object visit(ASTModNode node,Object data){  return showNode(node,data);}  }
class C{  public static int cycle(int type,int data,int increment){  if (increment != -1 && increment != 1) {    throw new IllegalArgumentException("Increment must be 1 or -1.");  }  int store;switch (type) {case BlockID.LOG:case BlockID.LOG2:    if (increment == -1) {      store=data & 0x3;      return mod((data & ~0x3) + 4,16) | store;    } else {      store=data & ~0x3;      return mod((data & 0x3) + 1,4) | store;    }case BlockID.LONG_GRASS:case BlockID.SANDSTONE:case BlockID.DIRT:  if (data > 2)   return -1;return mod((data + increment),3);case BlockID.TORCH:case BlockID.REDSTONE_TORCH_ON:case BlockID.REDSTONE_TORCH_OFF:if (data < 1 || data > 4) return -1;return mod((data - 1 + increment),4) + 1;case 203:case BlockID.RED_SANDSTONE_STAIRS:case BlockID.OAK_WOOD_STAIRS:case BlockID.COBBLESTONE_STAIRS:case BlockID.BRICK_STAIRS:case BlockID.STONE_BRICK_STAIRS:case BlockID.NETHER_BRICK_STAIRS:case BlockID.SANDSTONE_STAIRS:case BlockID.SPRUCE_WOOD_STAIRS:case BlockID.BIRCH_WOOD_STAIRS:case BlockID.JUNGLE_WOOD_STAIRS:case BlockID.QUARTZ_STAIRS:case BlockID.ACACIA_STAIRS:case BlockID.DARK_OAK_STAIRS:if (data > 7) return -1;return mod((data + increment),8);case BlockID.STONE_BRICK:case BlockID.QUARTZ_BLOCK:case BlockID.PUMPKIN:case BlockID.JACKOLANTERN:case BlockID.NETHER_WART:case BlockID.CAULDRON:case BlockID.WOODEN_STEP:case BlockID.DOUBLE_WOODEN_STEP:case BlockID.HAY_BLOCK:if (data > 3) return -1;return mod((data + increment),4);case BlockID.STEP:case BlockID.DOUBLE_STEP:case BlockID.CAKE_BLOCK:case BlockID.PISTON_BASE:case BlockID.PISTON_STICKY_BASE:case BlockID.SILVERFISH_BLOCK:if (data > 5) return -1;return mod((data + increment),6);case BlockID.DOUBLE_PLANT:store=data & 0x8;data&=~0x8;if (data > 5) return -1;return mod((data + increment),6) | store;case BlockID.CROPS:case BlockID.PUMPKIN_STEM:case BlockID.MELON_STEM:if (data > 6) return -1;return mod((data + increment),7);case BlockID.SOIL:case BlockID.RED_FLOWER:if (data > 8) return -1;return mod((data + increment),9);case BlockID.RED_MUSHROOM_CAP:case BlockID.BROWN_MUSHROOM_CAP:if (data > 10) return -1;return mod((data + increment),11);case BlockID.CACTUS:case BlockID.REED:case BlockID.SIGN_POST:case BlockID.VINE:case BlockID.SNOW:case BlockID.COCOA_PLANT:if (data > 15) return -1;return mod((data + increment),16);case BlockID.FURNACE:case BlockID.BURNING_FURNACE:case BlockID.WALL_SIGN:case BlockID.LADDER:case BlockID.CHEST:case BlockID.ENDER_CHEST:case BlockID.TRAPPED_CHEST:case BlockID.HOPPER:int extra=data & 0x8;int withoutFlags=data & ~0x8;if (withoutFlags < 2 || withoutFlags > 5) return -1;return (mod((withoutFlags - 2 + increment),4) + 2) | extra;case 198:case BlockID.DISPENSER:case BlockID.DROPPER:store=data & 0x8;data&=~0x8;if (data > 5) return -1;return mod((data + increment),6) | store;case BlockID.REDSTONE_REPEATER_OFF:case BlockID.REDSTONE_REPEATER_ON:case BlockID.COMPARATOR_OFF:case BlockID.COMPARATOR_ON:case BlockID.TRAP_DOOR:case BlockID.FENCE_GATE:case BlockID.LEAVES:case BlockID.LEAVES2:if (data > 7) return -1;store=data & ~0x3;return mod(((data & 0x3) + increment),4) | store;case BlockID.MINECART_TRACKS:if (data < 6 || data > 9) return -1;return mod((data - 6 + increment),4) + 6;case BlockID.SAPLING:if ((data & 0x3) == 3 || data > 15) return -1;store=data & ~0x3;return mod(((data & 0x3) + increment),3) | store;case BlockID.FLOWER_POT:if (data > 13) return -1;return mod((data + increment),14);case BlockID.CLOTH:case BlockID.STAINED_CLAY:case BlockID.CARPET:case BlockID.STAINED_GLASS:case BlockID.STAINED_GLASS_PANE:if (increment == 1) {data=nextClothColor(data);} else if (increment == -1) {data=prevClothColor(data);}return data;default :return -1;}}  }
class C{  public void text(char c,float x,float y){  if (textFont == null) {    defaultFontOrDeath("text");  }  if (textAlignY == CENTER) {    y+=textAscent() / 2;  } else   if (textAlignY == TOP) {    y+=textAscent();  } else   if (textAlignY == BOTTOM) {    y-=textDescent();  }  textBuffer[0]=c;  textLineAlignImpl(textBuffer,0,1,x,y);}  }
class C{  static @Nullable TypeInference forField(FieldStyle fieldStyle,VariableElement parameter){  List<Unifiable> lhs=new ArrayList<>();  List<Unifiable> rhs=new ArrayList<>();  AtomAndVarRegistry registry=new AtomAndVarRegistry();  Variable builderFieldType=new Variable();  Map<String,Variable> startOverridenTypeVariables=overridenTypeVariables(fieldStyle.start());  Map<String,Variable> finishOverridenTypeVariables=overridenTypeVariables(fieldStyle.finish());  lhs.add(registry.encode(fieldStyle.start().getReturnType(),startOverridenTypeVariables));  rhs.add(builderFieldType);  lhs.add(builderFieldType);  List<? extends VariableElement> finishParameters=fieldStyle.finish().getParameters();  rhs.add(registry.encode(finishParameters.get(0).asType(),finishOverridenTypeVariables));  lhs.add(registry.encode(fieldStyle.finish().getReturnType(),finishOverridenTypeVariables));  rhs.add(registry.encode(parameter.asType(),Collections.<String,Variable>emptyMap()));  Substitution result=Unification.unify(new Sequence(lhs),new Sequence(rhs));  if (result != null) {    return new TypeInference(registry,result.resolve(builderFieldType));  } else {    return null;  }}  }
class C{  public static boolean contentEqualsIgnoreEOL(Reader input1,Reader input2) throws IOException {  BufferedReader br1=toBufferedReader(input1);  BufferedReader br2=toBufferedReader(input2);  String line1=br1.readLine();  String line2=br2.readLine();  while (line1 != null && line2 != null && line1.equals(line2)) {    line1=br1.readLine();    line2=br2.readLine();  }  return line1 == null ? line2 == null ? true : false : line1.equals(line2);}  }
class C{  public <T extends IntentionAction & LocalQuickFix>void registerUniversalFix(@NotNull T fix,@Nullable TextRange range,@Nullable final HighlightDisplayKey key){  registerBatchFix(fix,range,key);  registerFix(fix,range,key);}  }
class C{  public Jdk14Logger(String name){  this.name=name;  logger=getLogger();}  }
class C{  public String listQuest(final Player player,final String questName){  final StringBuilder sb=new StringBuilder();  for (  final IQuest quest : quests) {    if (quest.getName().equals(questName)) {      dumpQuest(sb,quest,player);    }  }  return sb.toString();}  }
class C{  @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.627 -0500",hash_original_method="EDE82742DF271310D47CFC69F814BF44",hash_generated_method="E5B689D6ABBE0E3C06D78A5F5688548E") public ListIterator<HDR> listIterator(int position){  return hlist.listIterator(position);}  }
class C{  @Override public void send(HandshakeIODataStream out){  out.writeUint16(bytes1.length);  out.write(bytes1);  out.writeUint16(bytes2.length);  out.write(bytes2);  if (bytes3 != null) {    out.writeUint16(bytes3.length);    out.write(bytes3);  }  if (hash != null) {    out.writeUint16(hash.length);    out.write(hash);  }}  }
class C{  private void updateDeliveryPredFor(DTNHost host){  double PEnc;  double simTime=SimClock.getTime();  double lastEncTime=getEncTimeFor(host);  if (lastEncTime == 0)   PEnc=PEncMax; else   if ((simTime - lastEncTime) < I_TYP) {    PEnc=PEncMax * ((simTime - lastEncTime) / I_TYP);  } else   PEnc=PEncMax;  double oldValue=getPredFor(host);  double newValue=oldValue + (1 - oldValue) * PEnc;  preds.put(host,newValue);  lastEncouterTime.put(host,simTime);}  }
class C{  public static boolean isBetweenExclusive(double min,double i,double max){  return (i > min) && (i < max);}  }
class C{  protected String checkFileName(String filePath,String imageSuffix){  String fileName=filePath.substring(filePath.lastIndexOf(File.separator));  String newFilePath;  if (fileName.indexOf('.') == -1) {    newFilePath=filePath + "." + imageSuffix;  } else {    newFilePath=filePath;  }  File file=new File(newFilePath);  if (file.exists()) {    int choice=JOptionPane.showConfirmDialog(null,"The file " + newFilePath + " exists, replace?","Confirm File Replacement",JOptionPane.YES_NO_OPTION);    if (choice != JOptionPane.YES_OPTION) {      newFilePath=null;    }  }  return newFilePath;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:14.461 -0500",hash_original_method="E18C025F8AE162B11B2BEFB826A371E0",hash_generated_method="D18BE62B7BD542E701B03C7182DE5FBD") public RSASSAPSSparams(){  hashAlgorithm=DEFAULT_HASH_ALGORITHM;  maskGenAlgorithm=DEFAULT_MASK_GEN_FUNCTION;  saltLength=DEFAULT_SALT_LENGTH;  trailerField=DEFAULT_TRAILER_FIELD;}  }
class C{  public boolean mayBeVolatile(){  if (!isFieldAccess())   return false;  RVMField f=fieldRef.peekResolvedField();  return f == null || f.isVolatile();}  }
class C{  @WorkerThread public Responses.ClaimCodeResponse generateClaimCode() throws ParticleCloudException {  try {    return mainApi.generateClaimCode("okhttp_appeasement");  } catch (  RetrofitError error) {    throw new ParticleCloudException(error);  }}  }
class C{  public boolean decodeUintvarInteger(int startIndex){  int index=startIndex;  unsigned32bit=0;  while ((wspData[index] & 0x80) != 0) {    if ((index - startIndex) >= 4) {      return false;    }    unsigned32bit=(unsigned32bit << 7) | (wspData[index] & 0x7f);    index++;  }  unsigned32bit=(unsigned32bit << 7) | (wspData[index] & 0x7f);  dataLength=index - startIndex + 1;  return true;}  }
class C{  public ThreeRegisterDecodedInstruction(InstructionCodec format,int opcode,int index,IndexType indexType,int target,long literal,int a,int b,int c){  super(format,opcode,index,indexType,target,literal);  this.a=a;  this.b=b;  this.c=c;}  }
class C{  protected Drawable loadDefaultIcon(PackageManager pm){  return pm.getDefaultActivityIcon();}  }
class C{  public AbstractScriptEngine(){  context=new SimpleScriptContext();}  }
class C{  public static float fromDpToPx(float dp){  return dp * Resources.getSystem().getDisplayMetrics().density;}  }
class C{  @OnOpen public void onOpen(Session session) throws IOException {  if (Boolean.parseBoolean(InitParametersInjector.get(InitParametersInjector.INIT_PARAM_ENABLE_ROLES))) {    Principal principal=session.getUserPrincipal();    if (principal == null) {      session.getBasicRemote().sendText("Login first to be able to use the Terminal websocket channel.");      session.close();    }  }  openSessions.put(session.getId(),session);  callInternal("onOpen",session,null);}  }
class C{  public void updateByte(int columnIndex,byte x) throws SQLException {  throw new NotUpdatable();}  }
class C{  public boolean updateAttribute(String fieldName,Object newVal){  Class<?> fieldClass=dictionary.getType(getResourceClass(),fieldName);  newVal=coerce(newVal,fieldName,fieldClass);  Object val=getValueUnchecked(fieldName);  checkFieldAwareDeferPermissions(UpdatePermission.class,fieldName,newVal,val);  if (val != newVal && (val == null || !val.equals(newVal))) {    this.setValueChecked(fieldName,newVal);    this.markDirty();    return true;  }  return false;}  }
class C{  private void createNewPoint(Fusiontables fusiontables,String tableId,String name,String description,Location location,String type) throws IOException {  String values=SendFusionTablesUtils.formatSqlValues(name,description,SendFusionTablesUtils.getKmlPoint(location),type);  Sql sql=fusiontables.query().sql("INSERT INTO " + tableId + " (name,description,geometry,icon) VALUES "+ values);  sql.execute();}  }
class C{  public AnnotationSetRefItem(AnnotationSetItem annotations){  super(ALIGNMENT,WRITE_SIZE);  if (annotations == null) {    throw new NullPointerException("annotations == null");  }  this.annotations=annotations;}  }
class C{  public void end(Xid xid,int flags) throws XAException {  if (flags != TMSUCCESS && flags != TMSUSPEND && flags != TMFAIL) {    throw new XAException(XAException.XAER_INVAL);  }  execute("XA END " + xidToString(xid) + " "+ flagsToString(flags));}  }
class C{  public static void enableTranslucentBars(Window window){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);    window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);    disableBarColoring(window);  }}  }
class C{  public void initialize(){  for (  TabModel model : mTabModelSelector.getModels())   model.addObserver(mTabModelObserver);  mTabModelSelector.addObserver(mTabModelSelectorObserver);}  }
class C{  public void sendToAll(PacketAbstract packet){  this.channelEnumMap.get(Side.SERVER).attr(FMLOutboundHandler.FML_MESSAGETARGET).set(FMLOutboundHandler.OutboundTarget.ALL);  this.channelEnumMap.get(Side.SERVER).writeAndFlush(packet);}  }
class C{  public Tag(int ident,String identStr,String readable){  this(ident,identStr,readable,true);}  }
class C{  public static void markCacheableForever(HttpServletResponse response){  long expiresAfterMillis=System.currentTimeMillis() + ONE_YEAR_MILLIS;  response.setHeader(ServletConstants.HTTP_PRAGMA,"");  response.setDateHeader(ServletConstants.HTTP_EXPIRES,expiresAfterMillis);  response.setHeader(ServletConstants.HTTP_CACHE_CONTROL,ServletConstants.HTTP_CACHE_CONTROL_PRIVATE);  response.addHeader(ServletConstants.HTTP_CACHE_CONTROL,ServletConstants.HTTP_CACHE_CONTROL_MAX_AGE + ONE_YEAR_MILLIS);}  }
class C{  public static void f(String tag,String msg,Object... args){  if (sLevel > LEVEL_FATAL) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.wtf(tag,msg);}  }
class C{  public static double logpdf(double val,double alpha,double beta){  if (alpha <= 0. || beta <= 0. || Double.isNaN(alpha) || Double.isNaN(beta) || Double.isNaN(val)) {    return Double.NaN;  }  if (val < 0. || val > 1.) {    return Double.NEGATIVE_INFINITY;  }  if (val == 0.) {    return (alpha > 1.) ? Double.NEGATIVE_INFINITY : (alpha < 1.) ? Double.POSITIVE_INFINITY : Math.log(beta);  }  if (val == 1.) {    return (beta > 1.) ? Double.NEGATIVE_INFINITY : (beta < 1.) ? Double.POSITIVE_INFINITY : Math.log(alpha);  }  return -logBeta(alpha,beta) + Math.log(val) * (alpha - 1) + Math.log1p(-val) * (beta - 1);}  }
class C{  public A peek(){  if (isEmpty()) {    throw new NoSuchElementException();  }  return root.value;}  }
class C{  protected int indexOfArray(int r[],int rpos,int rend,char d[],int dpos){  if (rend < rpos) {    throw new IllegalArgumentException("rend < rpos");  }  if (rend == rpos) {    return (d.length);  }  if ((rend - rpos) == 1) {    for (int x=dpos; x < d.length; x++) {      if (r[rpos] == d[x]) {        return (x);      }    }  }  while ((dpos + rend - rpos) <= d.length) {    int y=dpos;    for (int x=rpos; x <= rend; x++) {      if (x == rend) {        return (dpos);      }      if (r[x] != d[y++]) {        break;      }    }    dpos++;  }  return (-1);}  }
class C{  @Override public Optional<Shortcut> read(AppContext ctx,ShortcutPK id){  return ds.read(ctx,type,id);}  }
class C{  private void insertTrx(String sqlSubSelect){  String sql="INSERT INTO T_Transaction " + "(AD_PInstance_ID, M_Transaction_ID," + " AD_Client_ID, AD_Org_ID, IsActive, Created,CreatedBy, Updated,UpdatedBy,"+ " MovementType, M_Locator_ID, M_Product_ID, M_AttributeSetInstance_ID,"+ " MovementDate, MovementQty,"+ " M_InOutLine_ID, M_InOut_ID,"+ " M_MovementLine_ID, M_Movement_ID,"+ " M_InventoryLine_ID, M_Inventory_ID, "+ " C_ProjectIssue_ID, C_Project_ID, "+ " M_ProductionLine_ID, M_Production_ID, "+ " Search_Order_ID, Search_Invoice_ID, Search_InOut_ID) "+ "SELECT " + getAD_PInstance_ID() + ", M_Transaction_ID,"+ " AD_Client_ID, AD_Org_ID, IsActive, Created,CreatedBy, Updated,UpdatedBy,"+ " MovementType, M_Locator_ID, M_Product_ID, M_AttributeSetInstance_ID,"+ " MovementDate, MovementQty,"+ " M_InOutLine_ID, M_InOut_ID, "+ " M_MovementLine_ID, M_Movement_ID,"+ " M_InventoryLine_ID, M_Inventory_ID, "+ " C_ProjectIssue_ID, C_Project_ID, "+ " M_ProductionLine_ID, M_Production_ID, "+ p_Search_Order_ID+ ", "+ p_Search_Invoice_ID+ ","+ p_Search_InOut_ID+ " "+ "FROM M_Transaction_v "+ "WHERE M_AttributeSetInstance_ID > 0 AND M_AttributeSetInstance_ID IN ("+ sqlSubSelect+ ") ORDER BY M_Transaction_ID";  int no=DB.executeUpdate(sql,get_TrxName());  log.fine(sql);  log.config("#" + no);}  }
class C{  public static void main(String[] args) throws IgniteException {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println("Compute task split example started.");    int cnt=ignite.compute().execute(SplitExampleCharacterCountTask.class,"Hello Ignite Enabled World!");    System.out.println();    System.out.println(">>> Total number of characters in the phrase is '" + cnt + "'.");    System.out.println(">>> Check all nodes for output (this node is also part of the cluster).");  } }  }
class C{  public NtpMessage(byte leapIndicator,byte version,byte mode,short stratum,byte pollInterval,byte precision,double rootDelay,double rootDispersion,byte[] referenceIdentifier,double referenceTimestamp,double originateTimestamp,double receiveTimestamp,double transmitTimestamp){  this.leapIndicator=leapIndicator;  this.version=version;  this.mode=mode;  this.stratum=stratum;  this.pollInterval=pollInterval;  this.precision=precision;  this.rootDelay=rootDelay;  this.rootDispersion=rootDispersion;  this.referenceIdentifier=referenceIdentifier;  this.referenceTimestamp=referenceTimestamp;  this.originateTimestamp=originateTimestamp;  this.receiveTimestamp=receiveTimestamp;  this.transmitTimestamp=transmitTimestamp;}  }
class C{  @POST @Path(DELETE_ENTITIES_PATH) @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public GenericServiceAPIResponseEntity deleteEntities(InputStream inputStream,@QueryParam("serviceName") String serviceName,@QueryParam("byId") Boolean deleteById){  GenericServiceAPIResponseEntity<String> response=new GenericServiceAPIResponseEntity<String>();  DataStorage dataStorage=null;  Map<String,Object> meta=new HashMap<String,Object>();  if (deleteById == null)   deleteById=false;  StopWatch stopWatch=new StopWatch();  try {    stopWatch.start();    dataStorage=DataStorageManager.getDataStorageByEagleConfig();    DeleteStatement statement=new DeleteStatement(serviceName);    if (deleteById) {      LOG.info("Deleting " + serviceName + " by ids");      List<String> deleteIds=unmarshalAsStringlist(inputStream);      statement.setIds(deleteIds);    } else {      LOG.info("Deleting " + serviceName + " by entities");      EntityDefinition entityDefinition=EntityDefinitionManager.getEntityByServiceName(serviceName);      if (entityDefinition == null) {        throw new IllegalArgumentException("Entity definition of service " + serviceName + " not found");      }      List<? extends TaggedLogAPIEntity> entities=unmarshalEntitiesByServie(inputStream,entityDefinition);      statement.setEntities(entities);    }    ModifyResult<String> result=statement.execute(dataStorage);    if (result.isSuccess()) {      List<String> keys=result.getIdentifiers();      if (keys != null) {        response.setObj(keys,String.class);        meta.put(TOTAL_RESULTS,keys.size());      } else {        meta.put(TOTAL_RESULTS,0);      }      meta.put(ELAPSEDMS,stopWatch.getTime());      response.setMeta(meta);      response.setSuccess(true);    }  } catch (  Exception e) {    LOG.error(e.getMessage(),e);    response.setException(e);  } finally {    stopWatch.stop();  }  return response;}  }
class C{  public boolean isWand(){  return (this == WAND);}  }
class C{  public boolean isSuperMemberAccess(){  return ((this.eContainer() instanceof ParameterizedPropertyAccessExpression) || (this.eContainer() instanceof IndexedAccessExpression));}  }
class C{  public MapColorsFilter(int oldColor,int newColor){  canFilterIndexColorModel=true;  this.oldColor=oldColor;  this.newColor=newColor;}  }
class C{  public String[] computeBinding(String superType,int index) throws IndexOutOfBoundsException {  return new String[0];}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'lookMyPrivate' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'IS_READED' INTEGER,"+ "'LOOK_DATE' INTEGER,"+ "'PIC_PATH' TEXT,"+ "'RESOLVER' TEXT);");}  }
class C{  public void addReturnHotspot(String signature){  List<ValueBox> sigSpots=StringAnalysis.getReturnExpressions(signature);  logger.debug("For signature " + signature + " got "+ sigSpots.size()+ " hotspots.");  if (!sigSpots.isEmpty()) {    addSignatureToHotspotMap(signature,new Hotspot(signature,sigSpots));    hotspots.addAll(sigSpots);  }}  }
class C{  public void release(){}  }
class C{  public Stats snapshot(){  return new Stats(count,mean,sumOfSquaresOfDeltas,min,max);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void cleanMapping(){  ArrayList<Integer> toRemove=new ArrayList<Integer>();  int size=mListMapping.size();  for (int i=0; i < size; ++i) {    if (mListMapping.keyAt(i) == mListMapping.valueAt(i)) {      toRemove.add(mListMapping.keyAt(i));    }  }  size=toRemove.size();  for (int i=0; i < size; ++i) {    mListMapping.delete(toRemove.get(i));  }}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  Signature sig;  try {    sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(Base64.decode(signature))) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");  }  return false;}  }
class C{  public void testToString(){  createParams(false,false);  KeyStore.PrivateKeyEntry ksPKE=new KeyStore.PrivateKeyEntry(testPrivateKey,testChain);  String res=ksPKE.toString();  assertNotNull("toString() returns null",res);}  }
class C{  public boolean isMinXSet(){  return isMinXSet(0);}  }
class C{  @Override public List<NamedRelatedResourceRep> list(){  StorageProviderList response=client.get(StorageProviderList.class,baseUrl);  return ResourceUtils.defaultList(response.getStorageProviders());}  }
class C{  public static void fixGTFSBusSingapore() throws IOException {  File oldFile=new File("C:/Users/sergioo/Desktop/Desktop/buses/trips2.txt");  File newFile=new File("C:/Users/sergioo/Desktop/Desktop/buses/trips.txt");  BufferedReader reader=new BufferedReader(new FileReader(oldFile));  PrintWriter writer=new PrintWriter(newFile);  String line=reader.readLine();  writer.println(line);  line=reader.readLine();  while (line != null) {    String[] parts=line.split(",");    if (parts[1].endsWith("saturday"))     parts[1]="saturday"; else     if (parts[1].endsWith("sunday"))     parts[1]="sunday"; else     if (parts[1].endsWith("weekday"))     parts[1]="weekday";    writer.print(parts[0]);    int i=1;    for (; i < parts.length; i++)     writer.print("," + parts[i]);    for (; i < 5; i++)     writer.print(",");    writer.println();    line=reader.readLine();  }  writer.close();  reader.close();}  }
class C{  public void paintGraph(Graphics g,int xattrib,int yattrib,int xpos,int ypos){  int x, y;  g.setColor(this.getBackground().darker().darker());  g.drawRect(xpos - 1,ypos - 1,cellSize + 1,cellSize + 1);  g.setColor(Color.white);  g.fillRect(xpos,ypos,cellSize,cellSize);  for (int i=0; i < m_points.length; i++) {    if (!(m_missing[i][yattrib] || m_missing[i][xattrib])) {      if (m_type[0] == 0) {        if (m_missing[i][m_missing[0].length - 1]) {          g.setColor(m_defaultColors[m_defaultColors.length - 1]);        } else {          g.setColor(new Color(m_pointColors[i],150,(255 - m_pointColors[i])));        }      } else {        g.setColor(m_colorList.get(m_pointColors[i]));      }      if (m_points[i][xattrib] + jitterVals[i][0] < 0 || m_points[i][xattrib] + jitterVals[i][0] > cellRange) {        if (cellRange - m_points[i][yattrib] + jitterVals[i][1] < 0 || cellRange - m_points[i][yattrib] + jitterVals[i][1] > cellRange) {          x=intpad + m_points[i][xattrib];          y=intpad + (cellRange - m_points[i][yattrib]);        } else {          x=intpad + m_points[i][xattrib];          y=intpad + (cellRange - m_points[i][yattrib]) + jitterVals[i][1];        }      } else       if (cellRange - m_points[i][yattrib] + jitterVals[i][1] < 0 || cellRange - m_points[i][yattrib] + jitterVals[i][1] > cellRange) {        x=intpad + m_points[i][xattrib] + jitterVals[i][0];        y=intpad + (cellRange - m_points[i][yattrib]);      } else {        x=intpad + m_points[i][xattrib] + jitterVals[i][0];        y=intpad + (cellRange - m_points[i][yattrib]) + jitterVals[i][1];      }      if (datapointSize == 1) {        g.drawLine(x + xpos,y + ypos,x + xpos,y + ypos);      } else {        g.drawOval(x + xpos - datapointSize / 2,y + ypos - datapointSize / 2,datapointSize,datapointSize);      }    }  }  g.setColor(fontColor);}  }
class C{  public final CC gapBefore(String boundsSize){  hor.setGapBefore(ConstraintParser.parseBoundSize(boundsSize,true,true));  return this;}  }
class C{  private void graphTree(StringBuffer text) throws Exception {  for (int i=0; i < m_sons.length; i++) {    text.append("N" + m_id + "->"+ "N"+ m_sons[i].m_id+ " [label=\""+ Utils.backQuoteChars(m_localModel.rightSide(i,m_train).trim())+ "\"]\n");    if (m_sons[i].m_isLeaf) {      text.append("N" + m_sons[i].m_id + " [label=\"LM_"+ m_sons[i].m_leafModelNum+ ":"+ m_sons[i].getModelParameters()+ "\" "+ "shape=box style=filled");      text.append("]\n");    } else {      text.append("N" + m_sons[i].m_id + " [label=\""+ Utils.backQuoteChars(m_sons[i].m_localModel.leftSide(m_train))+ "\" ");      text.append("]\n");      m_sons[i].graphTree(text);    }  }}  }
class C{  public VostroSeries(Strategy strategy,String name,String type,String description,Boolean displayOnChart,Integer chartRGBColor,Boolean subChart){  super(strategy,name,type,description,displayOnChart,chartRGBColor,subChart);}  }
class C{  public RangeBuilder addRange(String key,double from,double to){  ranges.add(new Range(key,from,to));  return this;}  }
class C{  public AnnotationCursorConverter(DataFetcher<Cursor> proxy,Class<DATA> clazz){  super(proxy);  mDataClazz=clazz;  processAnnotation();}  }
class C{  public String createClassic() throws NonUniqueBusinessKeyException, UserRoleAssignmentException, OperationPendingException, MarketplaceRemovedException {  if (isTokenValid()) {    String newUserId=this.newUser.getUserId();    String outcome=createInt(null);    if (outcome.equals(OUTCOME_SUCCESS)) {      addMessage(null,FacesMessage.SEVERITY_INFO,INFO_USER_CREATED,newUserId);      TableState ts=ui.findBean(TableState.BEAN_NAME);      ts.resetActivePages();    } else     if (outcome.equals(OUTCOME_PENDING)) {      addMessage(PROGRESS_PANEL,FacesMessage.SEVERITY_INFO,PROGRESS_DEFAULT,(String)null);      return OUTCOME_ADD_USER;    }    resetToken();  }  return null;}  }
class C{  public void testPrecisionAndScale() throws Exception {  testPrecisionForType("TINYINT",8,-1,false);  testPrecisionForType("TINYINT",8,-1,true);  testPrecisionForType("SMALLINT",8,-1,false);  testPrecisionForType("SMALLINT",8,-1,true);  testPrecisionForType("MEDIUMINT",8,-1,false);  testPrecisionForType("MEDIUMINT",8,-1,true);  testPrecisionForType("INT",8,-1,false);  testPrecisionForType("INT",8,-1,true);  testPrecisionForType("BIGINT",8,-1,false);  testPrecisionForType("BIGINT",8,-1,true);  testPrecisionForType("FLOAT",8,4,false);  testPrecisionForType("FLOAT",8,4,true);  testPrecisionForType("DOUBLE",8,4,false);  testPrecisionForType("DOUBLE",8,4,true);  testPrecisionForType("DECIMAL",8,4,false);  testPrecisionForType("DECIMAL",8,4,true);  testPrecisionForType("DECIMAL",9,0,false);  testPrecisionForType("DECIMAL",9,0,true);}  }
class C{  public String deleteSnapshotVolume(String storageSystemObjId,String logicalUnitObjId,String model) throws Exception {  return hdsApiVolumeManager.deleteSnapshotVolume(storageSystemObjId,logicalUnitObjId,model);}  }
class C{  public boolean skipsLocation(String locationId){  return _skipLocationsList.contains(locationId);}  }
class C{  @Override public void undoableEditHappened(UndoableEditEvent e){  fireUndoableEditHappened(e.getEdit());}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  @Override protected EClass eStaticClass(){  return EipPackage.Literals.ROUTER;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void handlePost(Operation post){  if (!post.hasBody()) {    post.fail(new IllegalArgumentException("body is required"));    return;  }  NodeGroupState localState=getState(post);  if (localState == null || localState.nodes == null) {    logWarning("invalid local state");    post.fail(Operation.STATUS_CODE_BAD_REQUEST);    return;  }  JoinPeerRequest joinBody=post.getBody(JoinPeerRequest.class);  if (joinBody != null && joinBody.memberGroupReference != null) {    long joinTimeOutMicrosUtc=Utils.fromNowMicrosUtc(Math.max(TimeUnit.SECONDS.toMicros(1),getHost().getOperationTimeoutMicros() / 10));    handleJoinPost(joinBody,post,joinTimeOutMicrosUtc,getState(post),null);    return;  }  NodeState body=post.getBody(NodeState.class);  if (body.id == null) {    post.fail(new IllegalArgumentException("id is required"));    return;  }  boolean isLocalNode=body.id.equals(getHost().getId());  if (body.groupReference == null) {    post.fail(new IllegalArgumentException("groupReference is required"));    return;  }  if (isLocalNode) {    buildLocalNodeState(body);  } else {    body.documentSelfLink=UriUtils.buildUriPath(getSelfLink(),body.id);  }  localState.nodes.put(body.id,body);  post.setBody(localState).complete();}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"bswap");  if (instruction.getOperands().size() != 1) {    throw new InternalTranslationException("Error: Argument instruction is not a lahf instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  final OperandSize archSize=environment.getArchitectureSize();  final String operand=instruction.getOperands().get(0).getRootNode().getChildren().get(0).getValue();  final String masked1st=environment.getNextVariableString();  final String masked2nd=environment.getNextVariableString();  final String masked3rd=environment.getNextVariableString();  final String masked4th=environment.getNextVariableString();  final String shifted1st=environment.getNextVariableString();  final String shifted2nd=environment.getNextVariableString();  final String shifted3rd=environment.getNextVariableString();  final String shifted4th=environment.getNextVariableString();  final String combined1=environment.getNextVariableString();  final String combined2=environment.getNextVariableString();  instructions.add(ReilHelpers.createAnd(baseOffset + 0,archSize,operand,archSize,"255",archSize,masked1st));  instructions.add(ReilHelpers.createAnd(baseOffset + 1,archSize,operand,archSize,"65280",archSize,masked2nd));  instructions.add(ReilHelpers.createAnd(baseOffset + 2,archSize,operand,archSize,"16711680",archSize,masked3rd));  instructions.add(ReilHelpers.createAnd(baseOffset + 3,archSize,operand,archSize,"4278190080",archSize,masked4th));  instructions.add(ReilHelpers.createBsh(baseOffset + 4,archSize,masked1st,archSize,"24",archSize,shifted1st));  instructions.add(ReilHelpers.createBsh(baseOffset + 5,archSize,masked2nd,archSize,"8",archSize,shifted2nd));  instructions.add(ReilHelpers.createBsh(baseOffset + 6,archSize,masked3rd,archSize,"-8",archSize,shifted3rd));  instructions.add(ReilHelpers.createBsh(baseOffset + 7,archSize,masked4th,archSize,"-24",archSize,shifted4th));  instructions.add(ReilHelpers.createOr(baseOffset + 8,archSize,shifted1st,archSize,shifted2nd,archSize,combined1));  instructions.add(ReilHelpers.createOr(baseOffset + 9,archSize,shifted3rd,archSize,shifted4th,archSize,combined2));  instructions.add(ReilHelpers.createOr(baseOffset + 10,archSize,combined1,archSize,combined2,archSize,operand));}  }
class C{  public static double intersectRayTriangle(double originX,double originY,double originZ,double dirX,double dirY,double dirZ,double v0X,double v0Y,double v0Z,double v1X,double v1Y,double v1Z,double v2X,double v2Y,double v2Z,double epsilon){  double edge1X=v1X - v0X;  double edge1Y=v1Y - v0Y;  double edge1Z=v1Z - v0Z;  double edge2X=v2X - v0X;  double edge2Y=v2Y - v0Y;  double edge2Z=v2Z - v0Z;  double pvecX=dirY * edge2Z - dirZ * edge2Y;  double pvecY=dirZ * edge2X - dirX * edge2Z;  double pvecZ=dirX * edge2Y - dirY * edge2X;  double det=edge1X * pvecX + edge1Y * pvecY + edge1Z * pvecZ;  if (det > -epsilon && det < epsilon)   return -1.0;  double tvecX=originX - v0X;  double tvecY=originY - v0Y;  double tvecZ=originZ - v0Z;  double invDet=1.0 / det;  double u=(tvecX * pvecX + tvecY * pvecY + tvecZ * pvecZ) * invDet;  if (u < 0.0 || u > 1.0)   return -1.0;  double qvecX=tvecY * edge1Z - tvecZ * edge1Y;  double qvecY=tvecZ * edge1X - tvecX * edge1Z;  double qvecZ=tvecX * edge1Y - tvecY * edge1X;  double v=(dirX * qvecX + dirY * qvecY + dirZ * qvecZ) * invDet;  if (v < 0.0 || u + v > 1.0)   return -1.0;  double t=(edge2X * qvecX + edge2Y * qvecY + edge2Z * qvecZ) * invDet;  return t;}  }
class C{  public void clearPermissions(){  loginButtonProperties.clearPermissions();}  }
class C{  public Statement toOptionalBlock(){switch (inner.size()) {case 0:    return ast.newEmptyStatement();case 1:  return first(inner);default :return toBlock();}}  }
class C{  private boolean checkReady(){  if (mMap == null) {    Toast.makeText(this,R.string.map_not_ready,Toast.LENGTH_SHORT).show();    return false;  }  return true;}  }
class C{  public static void checkState(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public int sign(){  return isHole() ? -1 : 1;}  }
class C{  public Anonymous_afterCode_2_ createAnonymous_afterCode_2_(){  Anonymous_afterCode_2_Impl anonymous_afterCode_2_=new Anonymous_afterCode_2_Impl();  return anonymous_afterCode_2_;}  }
class C{  public E peek(){  if (size == 0)   return null;  return getFirst();}  }
class C{  public static UpgradeSubscriptionResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  UpgradeSubscriptionResponseE object=new UpgradeSubscriptionResponseE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","upgradeSubscriptionResponse").equals(reader.getName())) {          object.setUpgradeSubscriptionResponse(org.oscm.xsd.UpgradeSubscriptionResponse.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  protected SiteMap processText(String sitemapUrl,byte[] content) throws IOException {  LOG.debug("Processing textual Sitemap");  SiteMap textSiteMap=new SiteMap(sitemapUrl);  textSiteMap.setType(SitemapType.TEXT);  BOMInputStream bomIs=new BOMInputStream(new ByteArrayInputStream(content));  @SuppressWarnings("resource") BufferedReader reader=new BufferedReader(new InputStreamReader(bomIs,"UTF-8"));  String line;  int i=1;  while ((line=reader.readLine()) != null) {    if (line.length() > 0 && i <= MAX_URLS) {      addUrlIntoSitemap(line,textSiteMap,null,null,null,i++);    }  }  textSiteMap.setProcessed(true);  return textSiteMap;}  }
class C{  public void closeEntry() throws IOException {  ensureOpen();  while (read(tmpbuf,0,tmpbuf.length) != -1)   ;  entryEOF=true;}  }
class C{  @Override protected void makeFinished(){  byte[] verify_data;  boolean isTLS=(serverHello.server_version[1] == 1);  if (isTLS) {    verify_data=new byte[12];    computerVerifyDataTLS("server finished",verify_data);  } else {    verify_data=new byte[36];    computerVerifyDataSSLv3(SSLv3Constants.server,verify_data);  }  serverFinished=new Finished(verify_data);  send(serverFinished);  if (isResuming) {    if (isTLS) {      computerReferenceVerifyDataTLS("client finished");    } else {      computerReferenceVerifyDataSSLv3(SSLv3Constants.client);    }    status=NEED_UNWRAP;  } else {    session.lastAccessedTime=System.currentTimeMillis();    status=FINISHED;  }}  }
class C{  public UnassignedDatasetException(String message){  super(message);}  }
class C{  private void construct(){  if (STEPPING) {    JPanel panel=new JPanel(new BorderLayout());    panel.setMinimumSize(new Dimension(400,340));    panel.setPreferredSize(new Dimension(400,340));    panel.setMaximumSize(new Dimension(400,340));    panel.add(BAR,BorderLayout.SOUTH);    add(panel);    LABEL.setForeground(new Color(0x426a81));    LABEL.setMinimumSize(new Dimension(400,20));    LABEL.setPreferredSize(new Dimension(400,20));    LABEL.setMaximumSize(new Dimension(400,20));    LABEL.setAlignmentX(CENTER_ALIGNMENT);    LABEL.setFont(LABEL.getFont().deriveFont(9f));    add(LABEL);  } else {    BAR.setStringPainted(true);    add(BAR);  }}  }
class C{  public void info(Throwable throwable,String msg,Object arg0,Object arg1){  innerLog(Level.INFO,throwable,msg,arg0,arg1,UNKNOWN_ARG,null);}  }
class C{  public static boolean canPasteFromClipboard(DataFlavor flavor){  return ClipboardHelper.canPasteFromClipboard(flavor);}  }
class C{  private void tagAttributes() throws IOException {  while (!isAllRead() && _asExpected && !isChar('>')&& !startsWith("/>")) {    if (Thread.currentThread().isInterrupted()) {      handleInterruption();      return;    }    skipWhitespaces();    String attName=identifier();    if (!_asExpected) {      if (!isChar('<') && !isChar('>') && !startsWith("/>")) {        saveCurrent();        go();      }      if (!isChar('<')) {        _asExpected=true;      }      continue;    }    String attValue;    skipWhitespaces();    if (isChar('=')) {      saveCurrent();      go();      attValue=attributeValue();    } else     if (CleanerProperties.BOOL_ATT_EMPTY.equals(props.getBooleanAttributeValues())) {      attValue="";    } else     if (CleanerProperties.BOOL_ATT_TRUE.equals(props.getBooleanAttributeValues())) {      attValue="true";    } else {      attValue=attName;    }    if (_asExpected) {      _currentTagToken.addAttribute(attName,attValue);    }  }}  }
class C{  public void prepare(boolean force){  prepareWorkDir();  if (!force && confDir.exists() && confDir.isDirectory()) {    File confFile=new File(confDir,"configuration.version");    if (confFile.exists()) {      Properties props=new Properties();      FileInputStream fis=null;      try {        fis=new FileInputStream(confFile);        props.load(fis);        if (props.get("version").equals(CONFIG_CURRENT_VERSION)) {          LOG.debug("Arbeitsverzeichnis bereits vorhanden, wird nicht neu erzeugt: " + confDir.getAbsolutePath());          return;        }      } catch (      Exception e) {        LOG.debug(e);      } finally {        if (fis != null) {          try {            fis.close();          } catch (          IOException e) {            LOG.error("Error while closing FileInputStream",e);          }        }      }    }  }  CnAWorkspace workspace=new CnAWorkspace();  try {    workspace.createConfDir();    workspace.createConfDirFiles();    workspace.createHtmlDir();    workspace.createOfficeDir();    workspace.createDatabaseConfig();    workspace.createGstoolPropertyFiles();  } catch (  Exception e) {    ExceptionUtil.log(e,NLS.bind(Messages.CnAWorkspace_4,confDir.getAbsolutePath()));  }}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  @Override public boolean provides(Class<?> type){  if (adapterMemo.getDisabled()) {    return false;  } else   if (type.equals(jmri.ProgrammerManager.class)) {    return true;  } else   if (type.equals(jmri.ThrottleManager.class)) {    return true;  } else   if (type.equals(jmri.PowerManager.class)) {    return true;  } else   if (type.equals(jmri.SensorManager.class)) {    return true;  } else   if (type.equals(jmri.TurnoutManager.class)) {    return true;  } else   if (type.equals(jmri.ReporterManager.class)) {    return true;  } else   if (type.equals(jmri.LightManager.class)) {    return true;  } else   if (type.equals(jmri.CommandStation.class)) {    return true;  }  return false;}  }
class C{  public LookupSwitchStmt newLookupSwitchStmt(Value key,List lookupValues,List targets,Unit defaultTarget){  return new JLookupSwitchStmt(key,lookupValues,targets,defaultTarget);}  }
class C{  @Override public void close(){  currentRow=null;  rows=null;  columns=null;  rowId=-1;  if (source != null) {    source.close();    source=null;  }}  }
class C{  public void destroy(){}  }
class C{  public void migrateTo(DTMManager manager){}  }
class C{  static void testAccess2(ClassLoader loader){  Class altClass;  try {    altClass=loader.loadClass("Inaccessible2");    System.err.println("ERROR: Inaccessible2 was accessible");  } catch (  ClassNotFoundException cnfe) {    Throwable cause=cnfe.getCause();    if (cause instanceof IllegalAccessError) {      System.out.println("Got expected CNFE/IAE #2");    } else {      System.err.println("Got unexpected CNFE/IAE #2");      cnfe.printStackTrace();    }  }}  }
class C{  public ReceiptInstrumentInfoImpl(final InstrumentHeader instrumentHeader){  this.instrumentHeader=instrumentHeader;}  }
class C{  static MemberName generateLambdaFormInterpreterEntryPoint(String sig){  assert (isValidSignature(sig));  String name="interpret_" + signatureReturn(sig).basicTypeChar();  MethodType type=signatureType(sig);  type=type.changeParameterType(0,MethodHandle.class);  InvokerBytecodeGenerator g=new InvokerBytecodeGenerator("LFI",name,type);  return g.loadMethod(g.generateLambdaFormInterpreterEntryPointBytes());}  }
class C{  private ActionBarBackground fadeIn(Integer color){  Drawable transBackground=getColoredBackground(android.R.color.transparent);  Drawable background=getColoredBackground(color);  background.setAlpha(1);  fadeBackground(transBackground,background);  return this;}  }
class C{  public DefaultTileFactory(TileFactoryInfo info){  super(info);}  }
class C{  private void rememberFileSizesAndLastModified(File walletFile,WalletInfoData walletInfo){  if (walletFile == null || walletInfo == null) {    return;  }  long walletFileSize=walletFile.length();  long walletFileLastModified=walletFile.lastModified();  String walletFilename=walletFile.getAbsolutePath();  String walletInfoFilename=WalletInfoData.createWalletInfoFilename(walletFilename);  File walletInfoFile=new File(walletInfoFilename);  long walletInfoFileSize=walletInfoFile.length();  long walletInfoFileLastModified=walletInfoFile.lastModified();  walletInfo.put(BitcoinModel.WALLET_FILE_SIZE,"" + walletFileSize);  walletInfo.put(BitcoinModel.WALLET_FILE_LAST_MODIFIED,"" + walletFileLastModified);  walletInfo.put(BitcoinModel.WALLET_INFO_FILE_SIZE,"" + walletInfoFileSize);  walletInfo.put(BitcoinModel.WALLET_INFO_FILE_LAST_MODIFIED,"" + walletInfoFileLastModified);  log.debug("rememberFileSizesAndLastModified: Wallet filename " + walletFilename + " , "+ BitcoinModel.WALLET_FILE_SIZE+ " "+ walletFileSize+ " ,"+ BitcoinModel.WALLET_FILE_LAST_MODIFIED+ " "+ walletFileLastModified+ " ,"+ BitcoinModel.WALLET_INFO_FILE_SIZE+ " "+ walletInfoFileSize+ " ,"+ BitcoinModel.WALLET_INFO_FILE_LAST_MODIFIED+ " "+ walletInfoFileLastModified);}  }
class C{  public MultisigCosignatoryModificationNotification(final Account multisigAccount,final MultisigCosignatoryModification modification){  super(NotificationType.CosignatoryModification);  this.multisigAccount=multisigAccount;  this.modification=modification;}  }
class C{  public long persistenceId(){  return persistenceId;}  }
class C{  private static boolean contains(String value,int start,int length,String criteria1,String criteria2,String criteria3,String criteria4,String criteria5,String criteria6){  return contains(value,start,length,new String[]{criteria1,criteria2,criteria3,criteria4,criteria5,criteria6});}  }
class C{  private DoubleMinMax sampleMinMax(Relation<O> relation,DistanceQuery<O> distFunc){  int size=relation.size();  Random rnd=new Random();  int k=(int)Math.max(25,Math.pow(relation.size(),0.2));  TreeSet<DoubleDBIDPair> minhotset=new TreeSet<>();  TreeSet<DoubleDBIDPair> maxhotset=new TreeSet<>(Collections.reverseOrder());  int randomsize=(int)Math.max(25,Math.pow(relation.size(),0.2));  double rprob=((double)randomsize) / size;  ArrayModifiableDBIDs randomset=DBIDUtil.newArray(randomsize);  DBIDIter iter=relation.iterDBIDs();  if (!iter.valid()) {    throw new EmptyDataException();  }  DBID firstid=DBIDUtil.deref(iter);  iter.advance();  minhotset.add(DBIDUtil.newPair(Double.MAX_VALUE,firstid));  maxhotset.add(DBIDUtil.newPair(Double.MIN_VALUE,firstid));  for (; iter.valid(); iter.advance()) {    ArrayList<DoubleDBIDPair> np=new ArrayList<>(k * 2 + randomsize * 2);    for (    DoubleDBIDPair pair : minhotset) {      if (DBIDUtil.equal(iter,pair)) {        continue;      }      double d=distFunc.distance(iter,pair);      np.add(DBIDUtil.newPair(d,iter));      np.add(DBIDUtil.newPair(d,pair));    }    for (DBIDIter iter2=randomset.iter(); iter2.valid(); iter2.advance()) {      double d=distFunc.distance(iter,iter2);      np.add(DBIDUtil.newPair(d,iter));      np.add(DBIDUtil.newPair(d,iter2));    }    minhotset.addAll(np);    shrinkHeap(minhotset,k);    ArrayList<DoubleDBIDPair> np2=new ArrayList<>(k * 2 + randomsize * 2);    for (    DoubleDBIDPair pair : minhotset) {      if (DBIDUtil.equal(iter,pair)) {        continue;      }      double d=distFunc.distance(iter,pair);      np2.add(DBIDUtil.newPair(d,iter));      np2.add(DBIDUtil.newPair(d,pair));    }    for (DBIDIter iter2=randomset.iter(); iter2.valid(); iter2.advance()) {      double d=distFunc.distance(iter,iter2);      np.add(DBIDUtil.newPair(d,iter));      np.add(DBIDUtil.newPair(d,iter2));    }    maxhotset.addAll(np2);    shrinkHeap(maxhotset,k);    if (randomset.size() < randomsize) {      randomset.add(iter);    } else     if (rnd.nextDouble() < rprob) {      randomset.set((int)Math.floor(rnd.nextDouble() * randomsize),iter);    }  }  return new DoubleMinMax(minhotset.first().doubleValue(),maxhotset.first().doubleValue());}  }
class C{  public void actionPerformed(ActionEvent e){  String cmd=e.getActionCommand();  int returnValue=-1;  if (cmd.equals("Cut") || cmd.equals("Copy") || cmd.equals("Paste")) {    JInternalFrame f=getSelectedFrame();    if (f != null && f instanceof ActionListener) {      ((ActionListener)f).actionPerformed(e);    }  } else   if (cmd.equals("Step Over")) {    returnValue=Dim.STEP_OVER;  } else   if (cmd.equals("Step Into")) {    returnValue=Dim.STEP_INTO;  } else   if (cmd.equals("Step Out")) {    returnValue=Dim.STEP_OUT;  } else   if (cmd.equals("Go")) {    returnValue=Dim.GO;  } else   if (cmd.equals("Break")) {    dim.setBreak();  } else   if (cmd.equals("Exit")) {    exit();  } else   if (cmd.equals("Open")) {    String fileName=chooseFile("Select a file to compile");    if (fileName != null) {      String text=readFile(fileName);      if (text != null) {        RunProxy proxy=new RunProxy(this,RunProxy.OPEN_FILE);        proxy.fileName=fileName;        proxy.text=text;        new Thread(proxy).start();      }    }  } else   if (cmd.equals("Load")) {    String fileName=chooseFile("Select a file to execute");    if (fileName != null) {      String text=readFile(fileName);      if (text != null) {        RunProxy proxy=new RunProxy(this,RunProxy.LOAD_FILE);        proxy.fileName=fileName;        proxy.text=text;        new Thread(proxy).start();      }    }  } else   if (cmd.equals("More Windows...")) {    MoreWindows dlg=new MoreWindows(this,fileWindows,"Window","Files");    dlg.showDialog(this);  } else   if (cmd.equals("Console")) {    if (console.isIcon()) {      desk.getDesktopManager().deiconifyFrame(console);    }    console.show();    desk.getDesktopManager().activateFrame(console);    console.consoleTextArea.requestFocus();  } else   if (cmd.equals("Cut")) {  } else   if (cmd.equals("Copy")) {  } else   if (cmd.equals("Paste")) {  } else   if (cmd.equals("Go to function...")) {    FindFunction dlg=new FindFunction(this,"Go to function","Function");    dlg.showDialog(this);  } else   if (cmd.equals("Tile")) {    JInternalFrame[] frames=desk.getAllFrames();    int count=frames.length;    int rows, cols;    rows=cols=(int)Math.sqrt(count);    if (rows * cols < count) {      cols++;      if (rows * cols < count) {        rows++;      }    }    Dimension size=desk.getSize();    int w=size.width / cols;    int h=size.height / rows;    int x=0;    int y=0;    for (int i=0; i < rows; i++) {      for (int j=0; j < cols; j++) {        int index=(i * cols) + j;        if (index >= frames.length) {          break;        }        JInternalFrame f=frames[index];        try {          f.setIcon(false);          f.setMaximum(false);        } catch (        Exception exc) {        }        desk.getDesktopManager().setBoundsForFrame(f,x,y,w,h);        x+=w;      }      y+=h;      x=0;    }  } else   if (cmd.equals("Cascade")) {    JInternalFrame[] frames=desk.getAllFrames();    int count=frames.length;    int x, y, w, h;    x=y=0;    h=desk.getHeight();    int d=h / count;    if (d > 30)     d=30;    for (int i=count - 1; i >= 0; i--, x+=d, y+=d) {      JInternalFrame f=frames[i];      try {        f.setIcon(false);        f.setMaximum(false);      } catch (      Exception exc) {      }      Dimension dimen=f.getPreferredSize();      w=dimen.width;      h=dimen.height;      desk.getDesktopManager().setBoundsForFrame(f,x,y,w,h);    }  } else {    Object obj=getFileWindow(cmd);    if (obj != null) {      FileWindow w=(FileWindow)obj;      try {        if (w.isIcon()) {          w.setIcon(false);        }        w.setVisible(true);        w.moveToFront();        w.setSelected(true);      } catch (      Exception exc) {      }    }  }  if (returnValue != -1) {    updateEnabled(false);    dim.setReturnValue(returnValue);  }}  }
class C{  public static <E>Set<E> of(E e1){  return ImmutableCollections.setOf(e1);}  }
class C{  public void testKeywords(){  for (int i=0; i < ITLAReserveredWords.ALL_WORDS_ARRAY.length; i++) {    assertEquals(SemanticHelper.KEYWORD,helper.getUsedHint(ITLAReserveredWords.ALL_WORDS_ARRAY[i]));  }}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  private void importExampleCertificates(){  if (fileHelper.startedFromJar()) {    try {      BurpCertificate c1=importCertificate(fileHelper.exportRessourceFromJar("examples/certificate.pem"));      importPrivateKey(c1,fileHelper.exportRessourceFromJar("examples/private_key_rsa.pem"));      importCertificateChain(fileHelper.exportRessourceFromJar("examples/example.org_chain.pem"));      setCertificateDetails(c1);    } catch (    IOException e) {      setStatus("Error importing example certificates (" + e.getMessage() + ")");    }catch (    Exception e) {      setStatus("Error (" + e.getMessage() + ")");    }  } else {    BurpCertificate c1=importCertificate("src/main/resources/examples/certificate.pem");    importPrivateKey(c1,"src/main/resources/examples/private_key_rsa.pem");    importCertificateChain("src/main/resources/examples/example.org_chain.pem");    setCertificateDetails(c1);  }}  }
class C{  public Mul(){  super("*",2);}  }
class C{  private boolean validateAction(final RPAction action){  return action.has(TEXT);}  }
class C{  public void addWidgetLinkedTo(final String propertyKey,final PWWidget widget){  if (!this.values.containsKey(propertyKey)) {    this.values.put(propertyKey,new ValueAndAssociatedWidgets(null));  }  this.values.get(propertyKey).addWidget(widget);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:27.374 -0500",hash_original_method="9511A18425627270E054955D67656A71",hash_generated_method="0AB2DFAEA106666CF949B6C0829A17DD") public void addFile(String filename){synchronized (files) {    if (!files.contains(filename)) {      files.add(filename);    }  }}  }
class C{  public void add(OMGraphic omgraphic,double height){  add(OMGraphicUtil.createShape3D(omgraphic,height));}  }
class C{  public static synchronized void startHAServices(GemFireCacheImpl c){  if (qrmThread == null) {    dispatchedMessagesMap=new ConcurrentHashMap();    qrmThread=new QueueRemovalThread(c);    qrmThread.setName("Queue Removal Thread");    qrmThread.start();  }}  }
class C{  public ListBuffer(){  clear();}  }
class C{  private HashMap<String,Object> updateFriendInSharedWith(Boolean addFriend,User friendToAddOrRemove){  HashMap<String,Object> updatedUserData=new HashMap<String,Object>();  HashMap<String,User> newSharedWith=new HashMap<String,User>(mSharedUsersList);  if (addFriend) {    mShoppingList.setTimestampLastChangedToNow();    final HashMap<String,Object> shoppingListForFirebase=(HashMap<String,Object>)new ObjectMapper().convertValue(mShoppingList,Map.class);    final HashMap<String,Object> friendForFirebase=(HashMap<String,Object>)new ObjectMapper().convertValue(friendToAddOrRemove,Map.class);    updatedUserData.put("/" + Constants.FIREBASE_LOCATION_LISTS_SHARED_WITH + "/"+ mListId+ "/"+ friendToAddOrRemove.getEmail(),friendForFirebase);    updatedUserData.put("/" + Constants.FIREBASE_LOCATION_USER_LISTS + "/"+ friendToAddOrRemove.getEmail()+ "/"+ mListId,shoppingListForFirebase);  } else {    updatedUserData.put("/" + Constants.FIREBASE_LOCATION_LISTS_SHARED_WITH + "/"+ mListId+ "/"+ friendToAddOrRemove.getEmail(),null);    updatedUserData.put("/" + Constants.FIREBASE_LOCATION_USER_LISTS + "/"+ friendToAddOrRemove.getEmail()+ "/"+ mListId,null);    newSharedWith.remove(friendToAddOrRemove.getEmail());  }  Utils.updateMapWithTimestampLastChanged(newSharedWith,mListId,mShoppingList.getOwner(),updatedUserData);  return updatedUserData;}  }
class C{  private static List<Node> findCanonicalReps(List<TextBlock> textBlocks,Node docNode){  List<Node> reps=new ArrayList<Node>();  for (int i=0; i < textBlocks.size(); ++i) {    Node nextNode=i + 1 == textBlocks.size() ? docNode : textBlocks.get(i + 1).getFirstNonWhitespaceTextNode();    Node prevNode=i == 0 ? docNode : textBlocks.get(i - 1).getLastNonWhitespaceTextNode();    Node currNode=textBlocks.get(i).getFirstNonWhitespaceTextNode();    Node currParent=currNode.getParentNode();    while (!JavaScript.contains(currParent,prevNode) && !JavaScript.contains(currParent,nextNode)) {      currNode=currParent;      currParent=currNode.getParentNode();    }    reps.add(currNode);  }  return reps;}  }
class C{  public SearchObject(String imageUrl,String keyword){  this.imageUrl=imageUrl;  this.keyword=keyword;}  }
class C{  private Lock lock(long id){  Lock lock=lockMap.get(id);  assert lock != null : "Lock not found for ID: " + id;  return lock;}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  write("<?");  write(target);  write(' ');  write(data);  write("?>");  if (elementLevel < 1) {    write('\n');  }  super.processingInstruction(target,data);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer(ExportModelValidator.class.getName());  return sb.toString();}  }
class C{  public boolean isSetValues(){  return this.values != null;}  }
class C{  private void openProposalPopup(boolean autoActivated){  if (isValid() && isEnabled()) {    contentAssistant.showPossibleCompletions();    ((ContentAssistant)contentAssistant).addCompletionListener(this);  }}  }
class C{  public static void main(String[] args){  ErrorReporting.setShowWarnings(true);  MainFrame frame=new MainFrame();  frame.setSize(new Dimension(1024,680));  frame.setVisible(true);  frame.loadGCTraces(args);}  }
class C{  public void showDialog(){  project=appContext.getCurrentProject();  updateRemotes();}  }
class C{  public void updateText(){  interactionBox.setText(subnetwork.getLabel());  interactionBox.updateText();}  }
class C{  public void externalEntityDecl(String name,String publicId,String systemId) throws SAXException {}  }
class C{  @Override public Codebase edit(Codebase input,Map<String,String> options){  return input;}  }
class C{  protected void installListeners(){  propertyChangeListener=createPropertyChangeListener();  spinner.addPropertyChangeListener(propertyChangeListener);  if (DefaultLookup.getBoolean(spinner,this,"Spinner.disableOnBoundaryValues",false)) {    spinner.addChangeListener(getHandler());  }  JComponent editor=spinner.getEditor();  if (editor != null && editor instanceof JSpinner.DefaultEditor) {    JTextField tf=((JSpinner.DefaultEditor)editor).getTextField();    if (tf != null) {      tf.addFocusListener(nextButtonHandler);      tf.addFocusListener(previousButtonHandler);    }  }}  }
class C{  void rollbackTo(Transaction t,long maxLogId,long toLogId){synchronized (undoLog) {    for (long logId=maxLogId - 1; logId >= toLogId; logId--) {      Long undoKey=getOperationId(t.getId(),logId);      Object[] op=undoLog.get(undoKey);      if (op == null) {        undoKey=undoLog.floorKey(undoKey);        if (undoKey == null || getTransactionId(undoKey) != t.getId()) {          break;        }        logId=getLogId(undoKey) + 1;        continue;      }      int mapId=((Integer)op[0]).intValue();      MVMap<Object,VersionedValue> map=openMap(mapId);      if (map != null) {        Object key=op[1];        VersionedValue oldValue=(VersionedValue)op[2];        if (oldValue == null) {          map.remove(key);        } else {          map.put(key,oldValue);        }      }      undoLog.remove(undoKey);    }  }}  }
class C{  @Override public void onSessionOpened(GridNioSession ses) throws IgniteCheckedException {  head.onSessionOpened(ses);}  }
class C{  public TreeEvaluationException(String msg){  super(msg);}  }
class C{  public File pathToFile(String fileName) throws IOException {  File file=new File(fileName);  if (!file.isAbsolute()) {    String cwd=(String)getu("bsh.cwd");    file=new File(cwd + File.separator + fileName);  }  return new File(file.getCanonicalPath());}  }
class C{  private void performBackgroundOffset(final float screenTransX,final float screenTransY){  int height=map.getHeight();  int lon=xToLonE7(screenTransX);  int lat=yToLatE7(height - screenTransY);  int relativeLon=lon - viewBox.getLeft();  int relativeLat=lat - viewBox.getBottom();  TileLayerServer osmts=map.getOpenStreetMapTilesOverlay().getRendererInfo();  double lonOffset=0d;  double latOffset=0d;  Offset o=osmts.getOffset(map.getZoomLevel());  if (o != null) {    lonOffset=o.lon;    latOffset=o.lat;  }  osmts.setOffset(map.getZoomLevel(),lonOffset - relativeLon / 1E7d,latOffset - relativeLat / 1E7d);}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  s.writeInt(getStyle());}  }
class C{  public MatrixStack(){  this.stack=new Stack<>();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.775 -0500",hash_original_method="46806E59674A3999FECD68BC3A52D44D",hash_generated_method="47A995612DEAB59037431FA6ED023A14") public Reader retrieveArticleBody(String articleId) throws IOException {  return retrieveArticleBody(articleId,null);}  }
class C{  protected String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString().toUpperCase(Locale.US);}  }
class C{  public static boolean grOrEq(double a,double b){  return (b - a < SMALL) || (a >= b);}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  @SuppressWarnings("unchecked") private MethodNode wrapMethod(final ClassNode classNode,final String className,final MethodNode methodNode){  methodNode.maxStack+=4;  final MethodNode wrappingMethodNode=new MethodNode(methodNode.access,methodNode.name,methodNode.desc,methodNode.signature,(String[])methodNode.exceptions.toArray(new String[methodNode.exceptions.size()]));  wrappingMethodNode.maxStack=methodNode.maxStack;  wrappingMethodNode.visibleAnnotations=methodNode.visibleAnnotations;  wrappingMethodNode.visibleParameterAnnotations=methodNode.visibleParameterAnnotations;  methodNode.visibleAnnotations=null;  methodNode.visibleParameterAnnotations=null;  methodNode.access=TransformerUtil.modifyVisibility(methodNode.access,Opcodes.ACC_PRIVATE);  final LabelNode l0=new LabelNode();  final LabelNode l1=new LabelNode();  final LabelNode l2=new LabelNode();  final InsnList wInstructions=wrappingMethodNode.instructions;  if ("<init>".equals(methodNode.name)) {    methodNode.name=WRAP_NAME_PREFIX + "init" + WRAP_NAME_PREFIX;    AbstractInsnNode ins=null;    ListIterator<AbstractInsnNode> iter=methodNode.instructions.iterator();    int numInvokeSpecials=0;    while (iter.hasNext()) {      ins=iter.next();      iter.remove();      wInstructions.add(ins);      if (ins instanceof MethodInsnNode) {        MethodInsnNode mins=(MethodInsnNode)ins;        if (ins.getOpcode() == Opcodes.INVOKESPECIAL) {          if (mins.name.startsWith("<init>")) {            if (numInvokeSpecials == 0) {              break;            } else {              numInvokeSpecials--;            }          }        }      } else       if (ins instanceof TypeInsnNode) {        TypeInsnNode typeIns=(TypeInsnNode)ins;        if (typeIns.getOpcode() == Opcodes.NEW || typeIns.getOpcode() == Opcodes.NEWARRAY) {          numInvokeSpecials++;        }      }    }  } else {    methodNode.name=WRAP_NAME_PREFIX + methodNode.name;  }  int varReturnValue=0;  final Type returnType=Type.getReturnType(methodNode.desc);  if (returnType.equals(Type.VOID_TYPE)) {    wrappingMethodNode.tryCatchBlocks.add(new TryCatchBlockNode(l0,l1,l1,"java/lang/Throwable"));  } else {    wrappingMethodNode.tryCatchBlocks.add(new TryCatchBlockNode(l0,l1,l2,"java/lang/Throwable"));    if (!TransformerUtil.isStatic(methodNode.access)) {      varReturnValue++;    }    final Type[] argTypes=Type.getArgumentTypes(methodNode.desc);    for (int i=0; i < argTypes.length; i++) {      varReturnValue++;      if (argTypes[i].equals(Type.LONG_TYPE) || argTypes[i].equals(Type.DOUBLE_TYPE)) {        varReturnValue++;      }    }    wInstructions.add(new InsnNode(Opcodes.ACONST_NULL));    wInstructions.add(new VarInsnNode(Opcodes.ASTORE,varReturnValue));  }  int var=0;  wInstructions.add(l0);  wInstructions.add(this.addCaptureCall(TransformerUtil.isStatic(methodNode.access),className,wrappingMethodNode.name,wrappingMethodNode.desc,Type.getArgumentTypes(methodNode.desc)));  if (!TransformerUtil.isStatic(methodNode.access)) {    wInstructions.add(new VarInsnNode(Opcodes.ALOAD,0));    var++;  }  final Type[] argTypes=Type.getArgumentTypes(methodNode.desc);  for (int i=0; i < argTypes.length; i++) {    this.addLoadInsn(wInstructions,argTypes[i],var++);    if (argTypes[i].equals(Type.LONG_TYPE) || argTypes[i].equals(Type.DOUBLE_TYPE)) {      var++;    }  }  if (TransformerUtil.isStatic(methodNode.access)) {    wInstructions.add(new MethodInsnNode(Opcodes.INVOKESTATIC,classNode.name,methodNode.name,methodNode.desc));  } else {    wInstructions.add(new MethodInsnNode(Opcodes.INVOKEVIRTUAL,classNode.name,methodNode.name,methodNode.desc));  }  var++;  if (returnType.equals(Type.VOID_TYPE)) {    wInstructions.add(new JumpInsnNode(Opcodes.GOTO,l2));    wInstructions.add(l1);    wInstructions.add(new FrameNode(Opcodes.F_SAME1,0,null,1,new Object[]{"java/lang/Throwable"}));    wInstructions.add(new VarInsnNode(Opcodes.ASTORE,--var));    this.addCaptureEnableStatement(className,methodNode,wInstructions,-1);    wInstructions.add(new VarInsnNode(Opcodes.ALOAD,var));    wInstructions.add(new InsnNode(Opcodes.ATHROW));    wInstructions.add(l2);    wInstructions.add(new FrameNode(Opcodes.F_SAME,0,null,0,null));    this.addCaptureEnableStatement(className,methodNode,wInstructions,-1);    wInstructions.add(new InsnNode(Opcodes.RETURN));  } else {    this.addBoxingStmt(wInstructions,returnType);    wInstructions.add(new VarInsnNode(Opcodes.ASTORE,varReturnValue));    wInstructions.add(new VarInsnNode(Opcodes.ALOAD,varReturnValue));    this.addUnBoxingStmt(wInstructions,returnType);    final int storeOpcode=returnType.getOpcode(Opcodes.ISTORE);    wInstructions.add(new VarInsnNode(storeOpcode,++var));    wInstructions.add(l1);    this.addCaptureEnableStatement(className,methodNode,wInstructions,varReturnValue);    int loadOpcode=returnType.getOpcode(Opcodes.ILOAD);    wInstructions.add(new VarInsnNode(loadOpcode,var));    this.addReturnInsn(wInstructions,returnType);    wInstructions.add(l2);    wInstructions.add(new FrameNode(Opcodes.F_FULL,2,new Object[]{className,this.getInternalName(returnType)},1,new Object[]{"java/lang/Throwable"}));    wInstructions.add(new VarInsnNode(Opcodes.ASTORE,--var));    this.addCaptureEnableStatement(className,methodNode,wInstructions,varReturnValue);    wInstructions.add(new VarInsnNode(Opcodes.ALOAD,var));    wInstructions.add(new InsnNode(Opcodes.ATHROW));  }  transformWrapperCalls(methodNode);  return wrappingMethodNode;}  }
class C{  protected static final void checkArguments(final SQLProvider provider,final CModule module,final CTagManager viewTagManager){  checkArguments(provider,viewTagManager);  Preconditions.checkNotNull(module,"IE00497: Module argument can't be null");  Preconditions.checkArgument(module.inSameDatabase(provider),"IE00498: Module is not part of this database");}  }
class C{  public static <K,V>Map<K,V> constrainedMap(Map<K,V> map,MapConstraint<? super K,? super V> constraint){  return new ConstrainedMap<K,V>(map,constraint);}  }
class C{  private void delayedExecute(RunnableScheduledFuture<?> task){  if (isShutdown())   reject(task); else {    super.getQueue().add(task);    if (isShutdown() && !canRunInCurrentRunState(task.isPeriodic()) && remove(task))     task.cancel(false); else     ensurePrestart();  }}  }
class C{  protected int drawUnselectedText(Graphics g,int x,int y,int p0,int p1) throws BadLocationException {  g.setColor(unselected);  Document doc=getDocument();  Segment segment=SegmentCache.getSharedSegment();  doc.getText(p0,p1 - p0,segment);  int ret=Utilities.drawTabbedText(this,segment,x,y,g,this,p0);  SegmentCache.releaseSharedSegment(segment);  return ret;}  }
class C{  protected String windowHelpID(){  return "package.apps.PanelPro.PanelPro";}  }
class C{  public boolean startUpWorker(int priority){  final long now=System.currentTimeMillis();  if (timeLastChecked + checkInterval < now) {synchronized (LOCK_CHECK) {      if (timeLastChecked + checkInterval < now) {        final CommandLineConversationImpl clc=new CommandLineConversationImpl();        try {          int exitStatus=clc.runCommand(false,"busers",linuxAccountName);          if (exitStatus != 0) {            LOG.warn("Unable to run busers command to find out the number of submitted jobs on LSF");          }          final String busersOut=clc.getOutput();          if (busersOut == null) {            LOG.warn("No output retrieved from the busers command:");          }          if (busersOut != null) {            String[] lines=busersOut.split("\\n");            if (lines.length != 2) {              LOG.warn("Unable to parse the output from the busers command:\n" + busersOut);            }            String[] fields=lines[1].split("\\s+");            if (fields.length < 9) {              LOG.warn("Unable to parse the output from the busers command:\n" + busersOut);            }            submittedJobs=Integer.parseInt(fields[3]);          }        } catch (        IOException e) {          LOG.warn("Unable to run busers command to find out the number of submitted jobs on LSF",e);        }catch (        InterruptedException e) {          LOG.warn("Unable to run busers command to find out the number of submitted jobs on LSF",e);        }        timeLastChecked=now;      }    }  }  if (submittedJobs < maximumSubmittedJobs) {    submittedJobs++;    return true;  }  return false;}  }
class C{  private LinkedHashMap<IVariable,IConstant> copyMinusErrors(final LinkedHashMap<IVariable,IConstant> src,final IVariable[] variablesToKeep){  final LinkedHashMap<IVariable,IConstant> dst=new LinkedHashMap<IVariable,IConstant>(variablesToKeep != null ? variablesToKeep.length : src.size());  final Iterator<Map.Entry<IVariable,IConstant>> itr=src.entrySet().iterator();  while (itr.hasNext()) {    final Map.Entry<IVariable,IConstant> e=itr.next();    if (e.getValue() == Constant.errorValue()) {      continue;    }    boolean keep=true;    if (variablesToKeep != null) {      keep=false;      for (      IVariable<?> x : variablesToKeep) {        if (x == e.getKey()) {          keep=true;          break;        }      }    }    if (keep) {      dst.put(e.getKey(),e.getValue());    }  }  return dst;}  }
class C{  public static int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  return encoder.encode(data,off,length,out);}  }
class C{  public static int random(Env env,int low,int high){  return env.random().nextInt(high - low + 1) + low;}  }
class C{  public void saveReachedAchievement(Integer achievementId,String playerName) throws SQLException {  DBTransaction transaction=TransactionPool.get().beginWork();  saveReachedAchievement(transaction,achievementId,playerName);  TransactionPool.get().commit(transaction);}  }
class C{  private boolean isBarrierClean(Instruction barrier){  OsrTypeInfoOperand typeInfo=OsrBarrier.getTypeInfo(barrier);  int totalOperands=countNonVoidTypes(typeInfo.localTypeCodes);  totalOperands+=countNonVoidTypes(typeInfo.stackTypeCodes);  return (totalOperands == OsrBarrier.getNumberOfElements(barrier));}  }
class C{  private ResultPointsAndTransitions transitionsBetween(ResultPoint from,ResultPoint to){  int fromX=(int)from.getX();  int fromY=(int)from.getY();  int toX=(int)to.getX();  int toY=(int)to.getY();  boolean steep=Math.abs(toY - fromY) > Math.abs(toX - fromX);  if (steep) {    int temp=fromX;    fromX=fromY;    fromY=temp;    temp=toX;    toX=toY;    toY=temp;  }  int dx=Math.abs(toX - fromX);  int dy=Math.abs(toY - fromY);  int error=-dx >> 1;  int ystep=fromY < toY ? 1 : -1;  int xstep=fromX < toX ? 1 : -1;  int transitions=0;  boolean inBlack=image.get(steep ? fromY : fromX,steep ? fromX : fromY);  for (int x=fromX, y=fromY; x != toX; x+=xstep) {    boolean isBlack=image.get(steep ? y : x,steep ? x : y);    if (isBlack != inBlack) {      transitions++;      inBlack=isBlack;    }    error+=dy;    if (error > 0) {      if (y == toY) {        break;      }      y+=ystep;      error-=dx;    }  }  return new ResultPointsAndTransitions(from,to,transitions);}  }
class C{  public static boolean isPostgreSQL(){  if (s_cc != null)   return s_cc.isPostgreSQL();  log.severe("No Database");  return false;}  }
class C{  public static Set<String> analyzeTarget(String target,List<String> classPath) throws RuntimeException, ClassNotFoundException {  initInheritanceTree(classPath);  targetClasses=ResourceList.getInstance(TestGenerationContext.getInstance().getClassLoaderForSUT()).getAllClasses(target,false);  for (  String className : targetClasses) {    Properties.TARGET_CLASS=className;    analyze(className,classPath);  }  return targetClasses;}  }
class C{  @Override public String toString(){  return String.format("Block Edge [%s -> %s]",super.getSource().getAddress().toHexString(),super.getTarget().getAddress().toHexString());}  }
class C{  public void removeObject(Long id){  beans.remove(id);  graphics.remove(id);}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Sage.client ? Sage.preferredServer : SageTV.hostname;}  }
class C{  public void fetchAllStreaming() throws SQLException {  try {    try {      Protocol protocolTmp=this.protocol;      while (readNextValue(resultSet)) {      }      resultSetSize=resultSet.size();      if (protocolTmp.hasMoreResults()) {        if (this.statement != null) {          this.statement.getMoreResults();        }      }    } catch (    IOException ioexception) {      throw new QueryException("Could not close resultset : " + ioexception.getMessage(),-1,CONNECTION_EXCEPTION,ioexception);    }  } catch (  QueryException queryException) {    ExceptionMapper.throwException(queryException,null,this.getStatement());  }  dataFetchTime++;  streaming=false;}  }
class C{  protected Distributions(){  throw new RuntimeException("Non instantiable");}  }
class C{  public void triggerVpoolMatcherIfPortAllocationQualificationChanged(URI storageSystemId,List<StoragePort> storagePorts){  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,storageSystemId);  Set<StoragePort> disqualifiedPortBeforeCompute=filterAllocationDisqualifiedPorts(storagePorts);  computeStoragePortUsage(storagePorts,storageSystem,true);  Set<StoragePort> disqualifiedPortAfterCompute=filterAllocationDisqualifiedPorts(storagePorts);  if (!disqualifiedPortAfterCompute.equals(disqualifiedPortBeforeCompute)) {    StringBuffer errorMessage=new StringBuffer();    ImplicitPoolMatcher.matchStorageSystemPoolsToVPools(storageSystem.getId(),_dbClient,_coordinator,errorMessage);  }}  }
class C{  public void enableLimit(boolean flag){  joint.enableLimit(flag);}  }
class C{  public Jerry removeAttr(String name){  for (  Node node : nodes) {    node.removeAttribute(name);  }  return this;}  }
class C{  protected void findNext(){  nextEntry=nextEntry.next;  if (nextEntry == null) {    nextIndex++;    while (nextIndex < table.length) {      nextEntry=table[nextIndex];      if (nextEntry != null) {        break;      }      nextIndex++;    }  }  finished=nextEntry == null;}  }
class C{  public static double decodeDimension(byte value[],int offset){  return NumericUtils.sortableLongToDouble(NumericUtils.sortableBytesToLong(value,offset));}  }
class C{  public double eval(double params[]){  boolean p1=params[0] == 0.0 ? false : true;  boolean p2=params[1] == 0.0 ? false : true;  return (((p1 || p2) == true) ? 1.0 : 0.0);}  }
class C{  public HandleMulticaster(Handle handle){  this.handles=new LinkedList<Handle>();  this.handles.add(handle);}  }
class C{  public boolean matches(String line,String route){  if (!lines.isEmpty() && !lines.contains(line))   return false;  if (!routes.isEmpty() && !routes.contains(route))   return false;  return true;}  }
class C{  public static long quantile(long[] values,double quantile){  if (values == null)   throw new IllegalArgumentException("Values cannot be null.");  if (quantile < 0.0 || quantile > 1.0)   throw new IllegalArgumentException("Quantile must be between 0.0 and 1.0");  long[] copy=new long[values.length];  System.arraycopy(values,0,copy,0,copy.length);  Arrays.sort(copy);  int index=(int)(copy.length * quantile);  return copy[index];}  }
class C{  protected void updatePosition(int i){  Solution parent=particles[i];  Solution offspring=parent.copy();  for (int j=0; j < problem.getNumberOfVariables(); j++) {    RealVariable variable=(RealVariable)offspring.getVariable(j);    double value=variable.getValue() + velocities[i][j];    if (value < variable.getLowerBound()) {      value=variable.getLowerBound();      velocities[i][j]*=-1;    } else     if (value > variable.getUpperBound()) {      value=variable.getUpperBound();      velocities[i][j]*=-1;    }    variable.setValue(value);  }  particles[i]=offspring;}  }
class C{  void nextWeapon(){  if (ce() == null) {    return;  }  int weaponId=clientgui.mechD.wPan.selectNextWeapon();  if (ce().getId() != clientgui.mechD.wPan.getSelectedEntityId()) {    clientgui.mechD.wPan.displayMech(ce());  }  if (weaponId == -1) {    setFireModeEnabled(false);  } else {    Mounted m=ce().getEquipment(weaponId);    setFireModeEnabled(m.isModeSwitchable());  }  updateTarget();}  }
class C{  @Override public void parseArgs(String[] args) throws AdeUsageException {  Options options=new Options();  buildOptions(options);  CommandLineParser parser=new GnuParser();  CommandLine line=parseLine(parser,options,args);  if (line.hasOption('h')) {    new HelpFormatter().printHelp(this.getClass().getSimpleName(),options);    System.exit(0);  }  if (line.hasOption('j')) {    String jsonFile=line.getOptionValue("j");    inputJSONFile=new File(jsonFile);    validateFile(inputJSONFile);  } else {    new HelpFormatter().printHelp(this.getClass().getSimpleName(),options);    throw new AdeUsageException("Must specify a JSON file path using the -j option.");  }}  }
class C{  public Matrix S(){  return S.clone();}  }
class C{  public LinkedCorrectionProposal(String name,ICompilationUnit cu,ASTRewrite rewrite,int relevance,Image image){  super(name,cu,rewrite,relevance,image);  fLinkedProposalModel=null;}  }
class C{  public double calcRadius(TempNode n1,TempNode n2) throws Exception {  Instance a1=n1.anchor, a2=n2.anchor;  double radius=n1.radius + m_DistanceFunction.distance(a1,a2) + n2.radius;  return radius / 2;}  }
class C{  @SuppressWarnings("unchecked") public V removeAt(int index){  final Object old=mArray[(index << 1) + 1];  if (mSize <= 1) {    freeArrays(mHashes,mArray,mSize);    mHashes=EMPTY_INTS;    mArray=EMPTY_OBJECTS;    mSize=0;  } else {    if (mHashes.length > (BASE_SIZE * 2) && mSize < mHashes.length / 3) {      final int n=mSize > (BASE_SIZE * 2) ? (mSize + (mSize >> 1)) : (BASE_SIZE * 2);      final int[] ohashes=mHashes;      final Object[] oarray=mArray;      allocArrays(n);      mSize--;      if (index > 0) {        System.arraycopy(ohashes,0,mHashes,0,index);        System.arraycopy(oarray,0,mArray,0,index << 1);      }      if (index < mSize) {        System.arraycopy(ohashes,index + 1,mHashes,index,mSize - index);        System.arraycopy(oarray,(index + 1) << 1,mArray,index << 1,(mSize - index) << 1);      }    } else {      mSize--;      if (index < mSize) {        System.arraycopy(mHashes,index + 1,mHashes,index,mSize - index);        System.arraycopy(mArray,(index + 1) << 1,mArray,index << 1,(mSize - index) << 1);      }      mArray[mSize << 1]=null;      mArray[(mSize << 1) + 1]=null;    }  }  return (V)old;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {  }  throw new IllegalStateException();}  }
class C{  public void onSetListener(int type){}  }
class C{  private static int readCode(boolean[] rawbits,int startIndex,int length){  int res=0;  for (int i=startIndex; i < startIndex + length; i++) {    res<<=1;    if (rawbits[i]) {      res|=0x01;    }  }  return res;}  }
class C{  private void resolveScreen(){  IBoard board=game.getBoard();  int width=board.getWidth();  int height=board.getHeight();  debugTime("resolve screen 1",true);  for (int currentXCoord=0; currentXCoord < width; currentXCoord++) {    for (int currentYCoord=0; currentYCoord < height; currentYCoord++) {      Coords currentCoords=new Coords(currentXCoord,currentYCoord);      IHex currentHex=board.getHex(currentXCoord,currentYCoord);      if (currentHex.containsTerrain(Terrains.SCREEN)) {        if (Compute.d6(2) > 6) {          Report r=new Report(9075,Report.PUBLIC);          r.add(currentCoords.getBoardNum());          vPhaseReport.addElement(r);          currentHex.removeTerrain(Terrains.SCREEN);          server.getHexUpdateSet().add(currentCoords);        }      }    }  }  debugTime("resolve screen 1 end",true);}  }
class C{  public void fault(String faultXml) throws Exception {  LOG.trace("writeFault({})",faultXml);  if (inAttachmentPart) {    endAttachments();  }  mpEncoder.startPart(TEXT_XML_UTF8);  mpEncoder.write(faultXml.getBytes(StandardCharsets.UTF_8));}  }
class C{  private void analize(){  StringTokenizer tokenizer=new StringTokenizer(sourceData,"|");  String nextToken=tokenizer.nextToken();  ver=nextToken.substring(1,nextToken.length() - 1);  nextToken=tokenizer.nextToken();  int size=Integer.parseInt(nextToken.substring(nextToken.lastIndexOf(',') + 1,nextToken.length()));  StringBuffer buffer=new StringBuffer();  buffer.append(nextToken);  for (int i=0; i < size; i++) {    buffer.append("|");    buffer.append(tokenizer.nextToken());    if (i != size - 1) {      buffer.append("|");    }  }  dlgDef=new QDlgDef(buffer.toString());  varDefs=tokenizer.nextToken();  vldDefs=tokenizer.nextToken();  selectDef=new QSelectDef(tokenizer.nextToken());  nextToken=tokenizer.nextToken();  nextToken=nextToken.substring(1,nextToken.length() - 1);  if (nextToken.length() > 0) {    size=Integer.parseInt(nextToken);    buffer=new StringBuffer();    buffer.append(size);    for (int i=0; i < size; i++) {      buffer.append("|");      buffer.append(tokenizer.nextToken());      if (i != size - 1) {        buffer.append("|");      }    }    info=new QInfo(buffer.toString());  }  nextToken=tokenizer.nextToken();  StringTokenizer tokenizer2=new StringTokenizer(nextToken,",");  resultMode=Integer.parseInt(tokenizer2.nextToken());  relFmtId=Integer.parseInt(tokenizer2.nextToken());  try {    webMacroId=Integer.parseInt(tokenizer.nextToken());  } catch (  Exception e) {    webMacroId=0;  }}  }
class C{  Values initializeValues(Thread current){  return current.localValues=new Values();}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException ex) {    throw new InternalError("Clone error");  }}  }
class C{  private boolean compareStrings(String s1,String s2){  if (s1 == s2)   return (true);  if (s1 == null)   return (false);  if (s2 == null)   return (false);  return (s1.equals(s2));}  }
class C{  private void failExpiredRequests(long now){  List<Operation> expired=null;  if (this.pendingRequests.isEmpty()) {    return;  }  final int searchLimit=1000;  int i=0;  for (  Operation o : this.pendingRequests.values()) {    if (i++ >= searchLimit) {      break;    }    long exp=o.getExpirationMicrosUtc();    if (exp > now) {      continue;    }    if (o.getStatusCode() == Operation.STATUS_CODE_TIMEOUT) {      if (expired == null) {        expired=new ArrayList<>();      }      expired.add(o);    } else {      o.setStatusCode(Operation.STATUS_CODE_TIMEOUT);    }  }  if (expired == null) {    return;  }  LOGGER.info("Failed expired operations, count: " + expired.size());  for (  Operation o : expired) {    failWithTimeout(o,o.getBodyRaw());  }}  }
class C{  @Override public void clear(){  super.clear();  positionIncrement=positionLength=1;  startOffset=endOffset=0;  type=DEFAULT_TYPE;}  }
class C{  public RoundedTransformationBuilder borderColor(int color){  mBorderColor=ColorStateList.valueOf(color);  return this;}  }
class C{  public boolean isOwned(){  return this.keyPair.hasPrivateKey();}  }
class C{  public void deploy(String path,InputStream war) throws TomcatManagerException, IOException {  deploy(path,war,false);}  }
class C{  public boolean userCanEditArch(int connectedUserId,int archId,String entidad) throws Exception {  boolean can=false;  int acsId, parentId;  int archMgrId=ISicresAdminDefsKeys.NULL_ID;  ArchivesTable table=new ArchivesTable();  LdapUsersTable usrTable=new LdapUsersTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    acsId=DbSelectFns.selectLongInteger(dbConn,table.getArchHdrTableName(),table.getAcsIdArchHdrColName(),table.getLoadArchIdQual(archId));    archMgrId=DbSelectFns.selectLongInteger(dbConn,usrTable.getOwnershipTableName(),usrTable.getOwnerIdColumnName(),usrTable.getLoadOwnerIdQual(acsId));    can=hasUserAuth(connectedUserId,USER_ACTION_ID_EDIT,archMgrId,ISicresAdminDefsKeys.NULL_ID,ISicresAdminDefsKeys.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  public static File downloadFile(File parent,String prefix,String suffix,URL url) throws IOException {  File file=File.createTempFile(prefix,suffix,parent);  URLConnection conn=null;  final String protocol=url.getProtocol().toLowerCase(Locale.ENGLISH);  try {    conn=url.openConnection();    if ("http".equals(protocol) || "https".equals(protocol)) {      HttpURLConnection http=(HttpURLConnection)conn;      http.setInstanceFollowRedirects(false);      http.setRequestMethod(HttpMethod.GET);    }    try (InputStream input=conn.getInputStream();FileOutputStream fOutput=new FileOutputStream(file)){      byte[] b=new byte[8192];      int r;      while ((r=input.read(b)) != -1) {        fOutput.write(b,0,r);      }    }   }  finally {    if (conn != null && ("http".equals(protocol) || "https".equals(protocol))) {      ((HttpURLConnection)conn).disconnect();    }  }  return file;}  }
class C{  public static org.oscm.vo.VOCategory convertToApi(org.oscm.internal.vo.VOCategory oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOCategory newVO=new org.oscm.vo.VOCategory();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setCategoryId(oldVO.getCategoryId());  newVO.setMarketplaceId(oldVO.getMarketplaceId());  newVO.setName(oldVO.getName());  return newVO;}  }
class C{  private static void swap(byte[] x,int a,int b){  byte t=x[a];  x[a]=x[b];  x[b]=t;}  }
class C{  @Override protected void createChildren(){  if (m_project.isLoaded()) {    for (    final INaviAddressSpace addressSpace : m_project.getContent().getAddressSpaces()) {      add(new CAddressSpaceNode(getProjectTree(),this,m_database,m_project,addressSpace,m_container));    }    add(new CProjectViewsContainerNode(getProjectTree(),m_project,m_container));    add(new CTracesNode(getProjectTree(),m_container));  }}  }
class C{  public boolean interiorIntersects(S2LatLngRect other){  return (lat.interiorIntersects(other.lat) && lng.interiorIntersects(other.lng));}  }
class C{  public boolean isConsumed(){  return consumed;}  }
class C{  public static java.sql.Date plus(java.sql.Date self,int days){  return new java.sql.Date(plus((Date)self,days).getTime());}  }
class C{  public void toXml(PrintStream s){  s.println("<!--");  s.println("  Round Robin RRDatabase Dump ");  s.println("  Generated by jRRD <ciaran@codeloop.com>");  s.println("-->");  s.println("<rrd>");  s.print("\t<version> ");  s.print(header.version);  s.println(" </version>");  s.print("\t<step> ");  s.print(header.pdpStep);  s.println(" </step> <!-- Seconds -->");  s.print("\t<lastupdate> ");  s.print(lastUpdate.getTime() / 1000);  s.print(" </lastupdate> <!-- ");  s.print(lastUpdate.toString());  s.println(" -->");  s.println();  for (int i=0; i < header.dsCount; i++) {    DataSource ds=dataSources.get(i);    ds.toXml(s);  }  s.println("<!-- Round Robin Archives -->");  for (int i=0; i < header.rraCount; i++) {    Archive archive=archives.get(i);    archive.toXml(s);  }  s.println("</rrd>");  s.flush();}  }
class C{  public static void encodeDimension(double value,byte dest[],int offset){  NumericUtils.longToSortableBytes(NumericUtils.doubleToSortableLong(value),dest,offset);}  }
class C{  @SuppressWarnings("unchecked") protected void notifyImageListeners(ImageEvent te){  ArrayList<ImageListener> l;synchronized (this) {    l=(ArrayList<ImageListener>)m_imageListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      l.get(i).acceptImage(te);    }  }}  }
class C{  public static void advance(final PsiBuilder builder,final int count){  for (int i=0; i < count && !builder.eof(); i++) {    builder.getTokenType();    builder.advanceLexer();  }}  }
class C{  protected Map<AnnotationMirror,Set<AnnotationMirror>> buildFullMap(Map<AnnotationMirror,Set<AnnotationMirror>> supertypes){  Map<AnnotationMirror,Set<AnnotationMirror>> fullMap=AnnotationUtils.createAnnotationMap();  for (  AnnotationMirror anno : supertypes.keySet()) {    findAllSupers(anno,supertypes,fullMap);  }  return fullMap;}  }
class C{  public boolean matchWithPattern(String pattern){  if (TextUtils.isEmpty(pattern)) {    mCurrentPattern="";    mUpperCasePattern="";    mLowerCasePattern="";  }  if (TextUtils.isEmpty(mDisplayName)) {    return false;  }  if (TextUtils.isEmpty(mUpperCaseDisplayName)) {    mUpperCaseDisplayName=mDisplayName.toLowerCase();    mLowerCaseDisplayName=mDisplayName.toUpperCase();  }  if (!pattern.equals(mCurrentPattern)) {    mCurrentPattern=pattern;    mUpperCasePattern=pattern.toUpperCase();    mLowerCasePattern=pattern.toLowerCase();  }  return (mUpperCaseDisplayName.indexOf(mUpperCasePattern) >= 0) || (mLowerCaseDisplayName.indexOf(mUpperCasePattern) >= 0);}  }
class C{  public boolean isTrimUnusedFields(){  return false;}  }
class C{  public Cache create() throws TimeoutException, CacheWriterException, GatewayException, RegionExistsException {synchronized (CacheFactory.class) {    DistributedSystem ds=null;    if (this.dsProps.isEmpty()) {      ds=InternalDistributedSystem.getConnectedInstance();    }    if (ds == null) {      ds=DistributedSystem.connect(this.dsProps);    }    return create(ds,true,cacheConfig);  }}  }
class C{  public static void applyToOrSetInvisible(ImageHolder imageHolder,ImageView imageView){  applyToOrSetInvisible(imageHolder,imageView,null);}  }
class C{  private boolean removeElement(int s){  int at=indexOf(s,0);  if (at < 0)   return false;  removeElementAt(at);  return true;}  }
class C{  public void writeOut(OutputStream os) throws IOException {  Entity e=root;  while (e.next != null) {    e=e.next;    os.write(e.data);  }  os.write(buffer,0,pos);}  }
class C{  public Vector leftMultiplyLeftCompactForm(Vector vec){  if (!(vec instanceof GF2Vector)) {    throw new ArithmeticException("vector is not defined over GF(2)");  }  if (vec.length != numRows) {    throw new ArithmeticException("length mismatch");  }  int[] v=((GF2Vector)vec).getVecArray();  int[] res=new int[(numRows + numColumns + 31) >>> 5];  int words=numRows >>> 5;  int row=0;  for (int i=0; i < words; i++) {    int bitMask=1;    do {      int b=v[i] & bitMask;      if (b != 0) {        for (int j=0; j < length; j++) {          res[j]^=matrix[row][j];        }        int q=(numColumns + row) >>> 5;        int r=(numColumns + row) & 0x1f;        res[q]|=1 << r;      }      row++;      bitMask<<=1;    } while (bitMask != 0);  }  int rem=1 << (numRows & 0x1f);  int bitMask=1;  while (bitMask != rem) {    int b=v[words] & bitMask;    if (b != 0) {      for (int j=0; j < length; j++) {        res[j]^=matrix[row][j];      }      int q=(numColumns + row) >>> 5;      int r=(numColumns + row) & 0x1f;      res[q]|=1 << r;    }    row++;    bitMask<<=1;  }  return new GF2Vector(res,numRows + numColumns);}  }
class C{  private String findMatchingSuperTypeSignature(IType subType,IType superType) throws JavaModelException {  String[] signatures=getSuperTypeSignatures(subType,superType);  for (int i=0; i < signatures.length; i++) {    String signature=signatures[i];    String qualified=SignatureUtil.qualifySignature(signature,subType);    String subFQN=SignatureUtil.stripSignatureToFQN(qualified);    String superFQN=superType.getFullyQualifiedName();    if (subFQN.equals(superFQN)) {      return signature;    }  }  throw new JavaModelException(new CoreException(new Status(IStatus.ERROR,JavaPlugin.getPluginId(),IStatus.OK,"Illegal hierarchy",null)));}  }
class C{  public void begin(){  if (!autoShapeType)   throw new IllegalStateException("autoShapeType must be true to use this method.");  begin(ShapeType.Line);}  }
class C{  private void validateSourceVolumeVarrayWithTargetVPool(UnManagedVolume unManagedVolume,VirtualPool sourceVPool){  StringSetMap unManagedVolumeInformation=unManagedVolume.getVolumeInformation();  StringSet targetUnManagedVolumeGuids=unManagedVolumeInformation.get(SupportedVolumeInformation.REMOTE_MIRRORS.toString());  if (null != targetUnManagedVolumeGuids && !targetUnManagedVolumeGuids.isEmpty()) {    StringSet targetVolumeNativeGuids=VolumeIngestionUtil.getListofVolumeIds(targetUnManagedVolumeGuids);    List<URI> targetUris=VolumeIngestionUtil.getVolumeUris(targetVolumeNativeGuids,_dbClient);    if (null == targetUris || targetUris.isEmpty()) {      _logger.info("None of the targets ingested for source volume: {}",unManagedVolume.getNativeGuid());    } else {      List<Volume> targetVolumes=_dbClient.queryObject(Volume.class,targetUris);      for (      Volume targetVolume : targetVolumes) {        Map<URI,VpoolRemoteCopyProtectionSettings> settings=sourceVPool.getRemoteProtectionSettings(sourceVPool,_dbClient);        if (null == settings || settings.size() == 0 || !settings.containsKey(targetVolume.getVirtualArray())) {          _logger.info("Target Volume's VArray {} is not matching already ingested source volume virtual pool's remote VArray {}",targetVolume.getVirtualArray(),Joiner.on(",").join(settings.keySet()));          throw IngestionException.exceptions.unmanagedSRDFSourceVolumeVArrayMismatch(unManagedVolume.getLabel(),targetVolume.getVirtualArray().toString());        }      }    }  }}  }
class C{  public void test_create02() throws Exception {  final String namespace2="kb2-" + UUID.randomUUID() + "-&<>-foo";  doTestCreate(namespace2);}  }
class C{  @Inject public IdeLoader(LoaderResources resources){  messageHeap=new MessageHeap();  loader=new ViewLoader(resources);}  }
class C{  @Nullable public static <T>T evaluate(@Nullable final PyExpression expression,@NotNull final Class<T> resultType){  return PyUtil.as(new PyEvaluator().evaluate(expression),resultType);}  }
class C{  public static <S extends HasClickHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    ClickEvent event=new ClickEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  protected void clearParameters(){  Object nullObject=null;  fieldFrom.setValue(nullObject);  fieldResource.setValue(nullObject);  fieldResourceType.setValue(nullObject);  fieldTo.setValue(nullObject);  return;}  }
class C{  private BookKeeperClientBuilder(){}  }
class C{  static public boolean isAllowedToAbortFileUploadSession(FileUpload session) throws RcsPersistentStorageException, RcsGenericException {switch (session.getState()) {case STARTED:case INITIATING:    return true;default :  return false;}}  }
class C{  public void addSigner(PrivateKey key,X509Certificate cert,String encryptionOID,String digestOID,AttributeTable signedAttr,AttributeTable unsignedAttr) throws IllegalArgumentException {  doAddSigner(key,cert,encryptionOID,digestOID,new DefaultSignedAttributeTableGenerator(signedAttr),new SimpleAttributeTableGenerator(unsignedAttr),signedAttr);}  }
class C{  public synchronized void animatePanAndZoomToAbs(final Point2D p,double scale,long duration){  m_transact.panAndZoom(p,scale,duration);}  }
class C{  public static RamlRoot loadRamlFromFile(String ramlFileUrl){  try {    return RamlModelFactoryOfFactories.createRamlModelFactory().buildRamlRoot(ramlFileUrl);  } catch (  NullPointerException npe) {    logger.error("File not found at " + ramlFileUrl);    return null;  }}  }
class C{  private PieDataset createDataset(){  DefaultPieDataset result=new DefaultPieDataset();  result.setValue("Linux",29);  result.setValue("Mac",20);  result.setValue("Windows",51);  return result;}  }
class C{  public static final String transformStringForPartialWordIndexation(String originalString,char delimiter){  if (originalString == null) {    return null;  }  if (originalString.length() > MAX_STRING_INDEXABLE_LENGTH) {    return null;  }  String substring=null;  StringBuffer sb=new StringBuffer();  Set<String> set=new HashSet<String>();  originalString=normalize(originalString);  for (int i=0; i < originalString.length(); i++) {    for (int j=i + 1; j <= originalString.length(); j++) {      substring=originalString.substring(i,j);      if (!substring.endsWith(" ")) {        if (substring.startsWith(" ")) {          substring=substring.substring(1);        }        if (substring.length() > 1) {          set.add(substring.replace(" ",String.valueOf(delimiter)));        }      }    }  }  for (  String part : set) {    sb.append(part).append(" ");  }  return sb.toString();}  }
class C{  public TableHelper(ArrayList<TableEntry> list){  this.list=list;}  }
class C{  public Configurator emptyBackgroundResource(int backgroundRes){  if (backgroundRes > 0) {    viewEmptyBackgroundResource=backgroundRes;  }  return this;}  }
class C{  public void detach(){  if (null != m_val) {    m_val.allowDetachToRelease(true);    m_val.detach();  }}  }
class C{  public static void updateServerTimestampHeader(HttpServerRequest request){  updateServerTimestampHeader(request.headers());}  }
class C{  public RemoteCandidate(TransportAddress transportAddress,Component parentComponent,CandidateType type,String foundation,long priority,RemoteCandidate relatedCandidate,String ufrag){  super(transportAddress,parentComponent,type,relatedCandidate);  setFoundation(foundation);  setPriority(priority);  this.ufrag=ufrag;}  }
class C{  public void selectionChanged(IAction action,ISelection selection){  Object sel=((IStructuredSelection)selection).getFirstElement();  if (sel instanceof IBSIStrukturKategorie) {    action.setEnabled(false);  } else   if (sel instanceof IISO27kElement) {    action.setEnabled(false);  } else   if (sel instanceof CnATreeElement) {    boolean b=CnAElementHome.getInstance().isWriteAllowed((CnATreeElement)sel);    if (action.isEnabled()) {      action.setEnabled(b);    }  }}  }
class C{  public void dup2X1(){  mv.visitInsn(Opcodes.DUP2_X1);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static boolean isNetworkTypeMobile(int networkType){switch (networkType) {case TYPE_MOBILE:case TYPE_MOBILE_MMS:case TYPE_MOBILE_SUPL:case TYPE_MOBILE_DUN:case TYPE_MOBILE_HIPRI:case TYPE_MOBILE_FOTA:case TYPE_MOBILE_IMS:case TYPE_MOBILE_CBS:    return true;default :  return false;}}  }
class C{  public ComboBoxEditableState(){  super("Editable");}  }
class C{  protected int defaultMaxRuleSize(){  return 10;}  }
class C{  public static MathTransform findTransform(Geometry source,Geometry target){  CoordinateReferenceSystem sourceCRS=getCRS(source.getSRID());  CoordinateReferenceSystem targetCRS=getCRS(target.getSRID());  try {    return CRS.findMathTransform(sourceCRS,targetCRS);  } catch (  FactoryException e) {    e.printStackTrace();    return null;  }}  }
class C{  public final void pushPredicateRoot(int n){  m_predicateRoots.push(n);}  }
class C{  public Executor distributeOnAllCores(){  return distributeOn(Runtime.getRuntime().availableProcessors());}  }
class C{  @Override public void updateRef(int columnIndex,Ref x) throws SQLException {  throw unsupported("ref");}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  @Override public final synchronized void insert(double _priority,Object _data){  super.insert(_priority,_data);  try {    notifyAll();  } catch (  Exception e) {    VM.sysWrite("Exception occurred while notifying that element was inserted!\n");  }}  }
class C{  private static void usage(String s){  err.println("\n** " + s + "\n");  err.println("usage: java GenerateMBeanHTML xmlFile htmlFile");  err.println("");  err.println("Converts an MBeans description XML file into an HTML");  err.println("file suitable for documentation");  err.println("");  System.exit(1);}  }
class C{  public static boolean isExternalMemoryAvailable(){  return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);}  }
class C{  public BarycenterScorer(Hypergraph<V,E> graph,Distance<V> distance){  super(graph,distance,false);}  }
class C{  private String serializedLambdaDisambiguation(){  StringBuilder buf=new StringBuilder();  Assert.check(owner.type != null || directlyEnclosingLambda() != null);  if (owner.type != null) {    buf.append(typeSig(owner.type));    buf.append(":");  }  buf.append(types.findDescriptorSymbol(tree.type.tsym).owner.flatName());  buf.append(" ");  if (assignedTo != null) {    buf.append(assignedTo.flatName());    buf.append("=");  }  for (  Symbol fv : getSymbolMap(CAPTURED_VAR).keySet()) {    if (fv != self) {      buf.append(typeSig(fv.type));      buf.append(" ");      buf.append(fv.flatName());      buf.append(",");    }  }  return buf.toString();}  }
class C{  public String viewBudgetFolio(){  if (abstractEstimate.getParent() != null)   financialDetail=abstractEstimate.getParent().getFinancialDetails().get(0); else   financialDetail=abstractEstimate.getFinancialDetails().get(0);  setUserDepartment(abstractEstimate.getUserDepartment().getId());  addDropdownData(BUDGET_GROUP_SEARCH_LIST,dropdownData.get(BUDGET_GROUP_LIST));  final AbstractEstimateAppropriation astractEstimateAppropriation=abstractEstimateService.getEstimateAppropriationService().findByNamedQuery("getLatestBudgetUsageForEstimate",abstractEstimate.getId());  if (astractEstimateAppropriation != null)   reportDate=new Date(astractEstimateAppropriation.getBudgetUsage().getUpdatedTime().getTime());  isEnableSelect="true";  return SEARCH_BUDGET_FOLIO;}  }
class C{  @Override public void configure(WebSecurity web) throws Exception {  web.ignoring().antMatchers("/app/**","/js/**","/favicon.ico");}  }
class C{  public PasteAction(@Nullable JComponent target){  super(target);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");  labels.configureAction(this,ID);}  }
class C{  public static List<JCExpression> toExpressionList(Iterable<ExpressionAndType> exprAndTypes){  ListBuffer<JCExpression> lb=new ListBuffer<JCExpression>();  for (  ExpressionAndType arg : exprAndTypes) {    lb.append(arg.expression);  }  return lb.toList();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void buildIndex(Collection<?> coll){  certSubjects=new HashMap<X500Principal,Object>();  crlIssuers=new HashMap<X500Principal,Object>();  otherCertificates=null;  otherCRLs=null;  for (  Object obj : coll) {    if (obj instanceof X509Certificate) {      indexCertificate((X509Certificate)obj);    } else     if (obj instanceof X509CRL) {      indexCRL((X509CRL)obj);    } else     if (obj instanceof Certificate) {      if (otherCertificates == null) {        otherCertificates=new HashSet<Certificate>();      }      otherCertificates.add((Certificate)obj);    } else     if (obj instanceof CRL) {      if (otherCRLs == null) {        otherCRLs=new HashSet<CRL>();      }      otherCRLs.add((CRL)obj);    } else {    }  }  if (otherCertificates == null) {    otherCertificates=Collections.<Certificate>emptySet();  }  if (otherCRLs == null) {    otherCRLs=Collections.<CRL>emptySet();  }}  }
class C{  private void initialize(Class<OpsType> opsType,Interface instance) throws InstantiationException, IllegalAccessException {  mOpsInstance=opsType.newInstance();  mRetainedFragmentManager.put(opsType.getSimpleName(),mOpsInstance);  mOpsInstance.onConfiguration(instance,true);}  }
class C{  public ExtendedNode append(ExtendedNode n){  if (lastChild == null) {    firstChild=n;  } else {    lastChild.setNextSibling(n);    n.setPreviousSibling(lastChild);  }  lastChild=n;  children++;  if (n.getNodeType() == Node.ELEMENT_NODE) {    elementChildren++;  }  return n;}  }
class C{  private static boolean allowEmptyValue(String propertyName){  return PROPERTIES_ALLOW_EMPTY_VALUE.contains(propertyName);}  }
class C{  protected void sequence_ThisTypeRefNominal(ISerializationContext context,ThisTypeRefNominal semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public XML(String element_type,boolean close){  setElementType(element_type);  setNeedClosingTag(close);}  }
class C{  public JSONException(String message){  super(message);}  }
class C{  public static String sha256Hash(String string) throws NoSuchAlgorithmException {  return sha256Hash(string.getBytes(StandardCharsets.UTF_8));}  }
class C{  @Override public void beginWindow(long windowId){}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static void main(String[] args){  TestRunner.run(suite());}  }
class C{  public boolean containsKey(long key){  int hash=getHash(key);  return getSegment(hash).containsKey(key,hash);}  }
class C{  public void doNarrow(NarrowFilter filter){  narrowedList=MessageListFragment.newInstance(filter);  pushListFragment(narrowedList,NARROW);  narrowedList.onReadyToDisplay(true);  showView(appBarLayout);}  }
class C{  public void updateUI(){  super.updateUI();  updateButton();}  }
class C{  public boolean isAutoInsertable(){  return fIsAutoInsertable;}  }
class C{  public Closure<V> memoizeBetween(final int protectedCacheSize,final int maxCacheSize){  if (protectedCacheSize < 0)   throw new IllegalArgumentException("A non-negative number is required as the protectedCacheSize parameter for memoizeBetween.");  if (maxCacheSize < 0)   throw new IllegalArgumentException("A non-negative number is required as the maxCacheSize parameter for memoizeBetween.");  if (protectedCacheSize > maxCacheSize)   throw new IllegalArgumentException("The maxCacheSize parameter to memoizeBetween is required to be greater or equal to the protectedCacheSize parameter.");  return Memoize.buildSoftReferenceMemoizeFunction(protectedCacheSize,new LRUCache(maxCacheSize),this);}  }
class C{  private float handleText(TextPaint wp,int start,int end,int contextStart,int contextEnd,boolean runIsRtl,Canvas c,float x,int top,int y,int bottom,FontMetricsInt fmi,boolean needWidth){  if (fmi != null) {    expandMetricsFromPaint(fmi,wp);  }  int runLen=end - start;  if (runLen == 0) {    return 0f;  }  float ret=0;  int contextLen=contextEnd - contextStart;  if (needWidth || (c != null && (wp.bgColor != 0 || wp.underlineColor != 0 || runIsRtl))) {    int flags=runIsRtl ? Paint.DIRECTION_RTL : Paint.DIRECTION_LTR;    if (mCharsValid) {      ret=wp.getTextRunAdvances(mChars,start,runLen,contextStart,contextLen,flags,null,0);    } else {      int delta=mStart;      ret=wp.getTextRunAdvances(mText,delta + start,delta + end,delta + contextStart,delta + contextEnd,flags,null,0);    }  }  if (c != null) {    if (runIsRtl) {      x-=ret;    }    if (wp.bgColor != 0) {      int previousColor=wp.getColor();      Paint.Style previousStyle=wp.getStyle();      wp.setColor(wp.bgColor);      wp.setStyle(Paint.Style.FILL);      c.drawRect(x,top,x + ret,bottom,wp);      wp.setStyle(previousStyle);      wp.setColor(previousColor);    }    if (wp.underlineColor != 0) {      float underlineTop=y + wp.baselineShift + (1.0f / 9.0f) * wp.getTextSize();      int previousColor=wp.getColor();      Paint.Style previousStyle=wp.getStyle();      boolean previousAntiAlias=wp.isAntiAlias();      wp.setStyle(Paint.Style.FILL);      wp.setAntiAlias(true);      wp.setColor(wp.underlineColor);      c.drawRect(x,underlineTop,x + ret,underlineTop + wp.underlineThickness,wp);      wp.setStyle(previousStyle);      wp.setColor(previousColor);      wp.setAntiAlias(previousAntiAlias);    }    drawTextRun(c,wp,start,end,contextStart,contextEnd,runIsRtl,x,y + wp.baselineShift);  }  return runIsRtl ? -ret : ret;}  }
class C{  public synchronized void add(T newElement){  if (elements.size() - 1 > nextElementIndex) {    elements.set(nextElementIndex++,newElement);  } else {    elements.add(nextElementIndex++,newElement);  }  if (nextElementIndex == capacity) {    nextElementIndex=0;  }}  }
class C{  public Kernel newKernel(String name){  Kernel kernel=getKernelByName(name);  if (kernel == null && !name.equals(NONE)) {    kernel=new Kernel(name);    Integer oldSize=Integer.valueOf(_kernelHashTable.size());    _kernelHashTable.put(name,kernel);    setDirtyAndFirePropertyChange(KERNEL_LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_kernelHashTable.size()));  }  return kernel;}  }
class C{  public void writeLong(final long i){  buffer[offset++]=(byte)((i >> 56) & 0xff);  buffer[offset++]=(byte)((i >> 48) & 0xff);  buffer[offset++]=(byte)((i >> 40) & 0xff);  buffer[offset++]=(byte)((i >> 32) & 0xff);  buffer[offset++]=(byte)((i >> 24) & 0xff);  buffer[offset++]=(byte)((i >> 16) & 0xff);  buffer[offset++]=(byte)((i >> 8) & 0xff);  buffer[offset++]=(byte)(i & 0xff);}  }
class C{  public SQLClientInfoException(String reason,Map<String,ClientInfoStatus> failedProperties,Throwable cause){  super(reason);  initCause(cause);  this.failedProperties=failedProperties;}  }
class C{  @Override public boolean isSecondaryArcWeapon(int weaponId){  if (isQuad()) {    return getEquipment(weaponId).getLocation() == LOC_MAINGUN;  }  return true;}  }
class C{  public void postMessage(String id,Object data){  if (this.appView != null) {    this.appView.postMessage(id,data);  }}  }
class C{  protected Class loadClass(String name,boolean resolve) throws ClassFormatError, ClassNotFoundException {  name=name.intern();synchronized (name) {    Class c=findLoadedClass(name);    if (c == null)     c=loadClassByDelegation(name);    if (c == null)     c=findClass(name);    if (c == null)     c=delegateToParent(name);    if (resolve)     resolveClass(c);    return c;  }}  }
class C{  public String urlEncode(){  StringBuilder sb=new StringBuilder();  for (  String key : map.keySet()) {    if (sb.length() > 0) {      sb.append("&");    }    sb.append(key);    String value=map.get(key);    if (value != null) {      sb.append("=");      try {        sb.append(URLEncoder.encode(value,RequestHandler.UTF8));      } catch (      UnsupportedEncodingException e) {        e.printStackTrace();      }    }  }  return sb.toString();}  }
class C{  private int decodeQuantWordlen(){  for (int chNum=0; chNum < numChannels; chNum++) {    Arrays.fill(ctx.channels[chNum].quWordlen,0);    int ret=decodeChannelWordlen(chNum);    if (ret < 0) {      return ret;    }  }  int i;  for (i=ctx.numQuantUnits - 1; i >= 0; i--) {    if (ctx.channels[0].quWordlen[i] != 0 || (numChannels == 2 && ctx.channels[1].quWordlen[i] != 0)) {      break;    }  }  ctx.usedQuantUnits=i + 1;  return 0;}  }
class C{  public static String quoteComment(String comment){  int len=comment.length();  StringBuilder sb=new StringBuilder();  for (int i=0; i < len; i++) {    char c=comment.charAt(i);    if (c == '(' || c == ')' || c == '\\') {      sb.append('\\');    }    sb.append(c);  }  return sb.toString();}  }
class C{  private void createErrorResponse(Exception exception){  ResponseStatusCodeLogUtil.debug(req,StatusCode.INTERNAL_SERVER_ERROR,RecursiveZipRootHandler.class);  req.response().setStatusCode(StatusCode.INTERNAL_SERVER_ERROR.getStatusCode());  req.response().setStatusMessage(StatusCode.INTERNAL_SERVER_ERROR.getStatusMessage());  req.response().end(exception.getMessage());}  }
class C{  private long longToZigzag(long l){  return (l << 1) ^ (l >> 63);}  }
class C{  private void readCentralDir() throws IOException {  long scanOffset=raf.length() - ENDHDR;  if (scanOffset < 0) {    throw new ZipException("File too short to be a zip file: " + raf.length());  }  raf.seek(0);  final int headerMagic=Integer.reverseBytes(raf.readInt());  if (headerMagic != LOCSIG) {    throw new ZipException("Not a zip archive");  }  long stopOffset=scanOffset - 65536;  if (stopOffset < 0) {    stopOffset=0;  }  while (true) {    raf.seek(scanOffset);    if (Integer.reverseBytes(raf.readInt()) == ENDSIG) {      break;    }    scanOffset--;    if (scanOffset < stopOffset) {      throw new ZipException("End Of Central Directory signature not found");    }  }  byte[] eocd=new byte[ENDHDR - 4];  raf.readFully(eocd);  BufferIterator it=HeapBufferIterator.iterator(eocd,0,eocd.length,ByteOrder.LITTLE_ENDIAN);  int diskNumber=it.readShort() & 0xffff;  int diskWithCentralDir=it.readShort() & 0xffff;  int numEntries=it.readShort() & 0xffff;  int totalNumEntries=it.readShort() & 0xffff;  it.skip(4);  long centralDirOffset=((long)it.readInt()) & 0xffffffffL;  int commentLength=it.readShort() & 0xffff;  if (numEntries != totalNumEntries || diskNumber != 0 || diskWithCentralDir != 0) {    throw new ZipException("Spanned archives not supported");  }  if (commentLength > 0) {    byte[] commentBytes=new byte[commentLength];    raf.readFully(commentBytes);    comment=new String(commentBytes,0,commentBytes.length,StandardCharsets.UTF_8);  }  RAFStream rafStream=new RAFStream(raf,centralDirOffset);  BufferedInputStream bufferedStream=new BufferedInputStream(rafStream,4096);  byte[] hdrBuf=new byte[CENHDR];  for (int i=0; i < numEntries; ++i) {    ZipEntry newEntry=new ZipEntry(hdrBuf,bufferedStream);    if (newEntry.localHeaderRelOffset >= centralDirOffset) {      throw new ZipException("Local file header offset is after central directory");    }    String entryName=newEntry.getName();    if (entries.put(entryName,newEntry) != null) {      throw new ZipException("Duplicate entry name: " + entryName);    }  }}  }
class C{  private void reducedRowEchelonForm(int method){  final int rows=coeff.length;  final int cols=coeff[0].length;  int k=-1;  int pivotRow;  int pivotCol;  double pivot;  boolean exitLoop=false;  while (!exitLoop) {    k++;    IntIntPair pivotPos=new IntIntPair(0,0);    IntIntPair currPos=new IntIntPair(k,k);switch (method) {case TRIVAL_PIVOT_SEARCH:      pivotPos=nonZeroPivotSearch(k);    break;case TOTAL_PIVOT_SEARCH:  pivotPos=totalPivotSearch(k);break;}pivotRow=pivotPos.first;pivotCol=pivotPos.second;pivot=coeff[this.row[pivotRow]][col[pivotCol]];if (LOG.isDebugging()) {StringBuilder msg=new StringBuilder();msg.append("equations ").append(equationsToString(4));msg.append("  *** pivot at (").append(pivotRow).append(',').append(pivotCol).append(") = ").append(pivot).append('\n');LOG.debugFine(msg.toString());}permutePivot(pivotPos,currPos);if ((Math.abs(pivot) <= DELTA)) {exitLoop=true;}if ((Math.abs(pivot) > DELTA)) {rank++;pivotOperation(k);}if (k == rows - 1 || k == cols - 1) {exitLoop=true;}}reducedRowEchelonForm=true;}  }
class C{  private static void ReleaseIntArrayElements(JNIEnvironment env,int arrayJREF,Address copyBufferAddress,int releaseMode){  if (traceJNI)   VM.sysWrite("JNI called: ReleaseIntArrayElements  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    int[] sourceArray=(int[])env.getJNIRef(arrayJREF);    if (Magic.objectAsAddress(sourceArray).NE(copyBufferAddress)) {      int size=sourceArray.length;      if (releaseMode == 0 || releaseMode == 1) {        Memory.memcopy(Magic.objectAsAddress(sourceArray),copyBufferAddress,size << LOG_BYTES_IN_INT);      }      if (releaseMode == 0 || releaseMode == 2) {        sysCall.sysFree(copyBufferAddress);      }    }  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public DelphiUnit(String unitName){  name=unitName;  realName=unitName;}  }
class C{  public static float convertDpToPixel(float dp,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float px=dp * (metrics.densityDpi / 160f);  return px;}  }
class C{  public VersionedMessageDeserializer(Type versionedMessageType,MessageVersion expectedVersion,Gson gson,Logger notificationLogger){  this.versionedMessageType=versionedMessageType;  this.expectedVersion=expectedVersion;  this.gson=gson;  this.notificationLogger=notificationLogger;}  }
class C{  public void attributeAdded(String key,String value,String systemId,int lineNr){  Properties props=(Properties)this.currentElements.peek();  if (props.containsKey(key)) {    props.remove(key);  }}  }
class C{  public void remove(VertexLabelType from,VertexLabelType to){  Hashtable<VertexLabelType,EdgeLabelType> localEdgeLookup=globalEdgeLookup.get(from);  if (localEdgeLookup != null)   localEdgeLookup.remove(to);}  }
class C{  public void addInvokeinterface(String classname,String name,String desc,int count){  addInvokeinterface(constPool.addClassInfo(classname),name,desc,count);}  }
class C{  public void cleanupCommands(){  Set<CommandHandlerBase> currentActiveCommandSet=new HashSet<CommandHandlerBase>(mCommandHandlersSet);  for (  CommandHandlerBase cmd : currentActiveCommandSet) {    try {      cmd.deactivate();    } catch (    Exception e) {      Log.e("Failed to cleanup command",e);    }  }}  }
class C{  static void stringToPacket(String s,DatagramPacket packet){  byte[] bytes=s.getBytes();  System.arraycopy(bytes,0,packet.getData(),0,bytes.length);  packet.setLength(bytes.length);}  }
class C{  public TermsBuilder include(String[] terms){  if (includePattern != null) {    throw new IllegalArgumentException("include clause must be an array of exact values or a regex, not both");  }  this.includeTerms=terms;  return this;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildRicardo(zone);}  }
class C{  public static <T>Streamable<T> fromStream(final Stream<T> stream){  return new StreamableImpl(Impl.collectStream(stream));}  }
class C{  public static double P_FmicroAvg(int Y[][],int Ypred[][]){  return F1(MatrixUtils.flatten(Y),MatrixUtils.flatten(Ypred));}  }
class C{  public GameSurfaceRenderer(GameState gameState,GameSurfaceView surfaceView,TextResources.Configuration textConfig){  mSurfaceView=surfaceView;  mGameState=gameState;  mTextConfig=textConfig;}  }
class C{  public void terminate(){  ProverHelper.cancelProverJobs(true);}  }
class C{  public long readRawVarint64() throws IOException {  int shift=0;  long result=0;  while (shift < 64) {    final byte b=readRawByte();    result|=(long)(b & 0x7F) << shift;    if ((b & 0x80) == 0) {      return result;    }    shift+=7;  }  throw InvalidProtocolBufferException.malformedVarint();}  }
class C{  public int size(){  return parts.size();}  }
class C{  public StorageBase(Context context,int encryptionMode) throws IllegalArgumentException {  if (encryptionMode != ENCRYPTION_NONE) {    throw new IllegalArgumentException("encryptionMode " + encryptionMode + " not supported.");  }  store=context.getSharedPreferences(STORE_FILE_NAME,Context.MODE_PRIVATE);  editor=store.edit();}  }
class C{  protected int indexOf(Local l,RefType t){  if (locals.indexOf(l) == -1 || types.indexOf(t) == -1) {    throw new RuntimeException("Invalid local or type in LocalTypeSet");  }  return locals.indexOf(l) * types.size() + types.indexOf(t);}  }
class C{  protected void handleException(Exception exception){  System.err.println(exception);}  }
class C{  public Certificate toASN1Structure(){  return x509Certificate;}  }
class C{  public void addLink(Id<Link> newLinkId,Id<Node> fromNodeId,Id<Node> toNodeId,Id<Link> attributeLinkId){  Node fromNode=network.getNodes().get(fromNodeId);  Node toNode=network.getNodes().get(toNodeId);  Link newLink=networkFactory.createLink(newLinkId,fromNode,toNode);  if (attributeLinkId != null) {    Link attributeLink=network.getLinks().get(attributeLinkId);    newLink.setAllowedModes(attributeLink.getAllowedModes());    newLink.setCapacity(attributeLink.getCapacity());    newLink.setFreespeed(attributeLink.getFreespeed());    newLink.setNumberOfLanes(attributeLink.getNumberOfLanes());  }  network.addLink(newLink);}  }
class C{  public void onAnimationEnd(Animator animation){  if (mRule == Dependency.AFTER) {    startIfReady(animation);  }}  }
class C{  public static final MediaFormat createVideoFormat(String mime,int width,int height){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_WIDTH,width);  format.setInteger(KEY_HEIGHT,height);  return format;}  }
class C{  public void addNewsStory(){  if (numOT >= 3) {    Team winner, loser;    int winScore, loseScore;    if (awayScore > homeScore) {      winner=awayTeam;      loser=homeTeam;      winScore=awayScore;      loseScore=homeScore;    } else {      winner=homeTeam;      loser=awayTeam;      winScore=homeScore;      loseScore=awayScore;    }    homeTeam.league.newsStories.get(homeTeam.league.currentWeek + 1).add(numOT + "OT Thriller!>" + winner.strRep()+ " and "+ loser.strRep()+ " played an absolutely thrilling game "+ "that went to "+ numOT+ " overtimes, with "+ winner.name+ " finally emerging victorious "+ winScore+ " to "+ loseScore+ ".");  } else   if (homeScore > awayScore && awayTeam.losses == 1 && awayTeam.league.currentWeek > 5) {    awayTeam.league.newsStories.get(homeTeam.league.currentWeek + 1).add("Undefeated no more! " + awayTeam.name + " suffers first loss!"+ ">"+ homeTeam.strRep()+ " hands "+ awayTeam.strRep()+ " their first loss of the season, winning "+ homeScore+ " to "+ awayScore+ ".");  } else   if (awayScore > homeScore && homeTeam.losses == 1 && homeTeam.league.currentWeek > 5) {    homeTeam.league.newsStories.get(homeTeam.league.currentWeek + 1).add("Undefeated no more! " + homeTeam.name + " suffers first loss!"+ ">"+ awayTeam.strRep()+ " hands "+ homeTeam.strRep()+ " their first loss of the season, winning "+ awayScore+ " to "+ homeScore+ ".");  } else   if (awayScore > homeScore && homeTeam.rankTeamPollScore < 20 && (awayTeam.rankTeamPollScore - homeTeam.rankTeamPollScore) > 20) {    awayTeam.league.newsStories.get(awayTeam.league.currentWeek + 1).add("Upset! " + awayTeam.strRep() + " beats "+ homeTeam.strRep()+ ">#"+ awayTeam.rankTeamPollScore+ " "+ awayTeam.name+ " was able to pull off the upset on the road against #"+ homeTeam.rankTeamPollScore+ " "+ homeTeam.name+ ", winning "+ awayScore+ " to "+ homeScore+ ".");  } else   if (homeScore > awayScore && awayTeam.rankTeamPollScore < 20 && (homeTeam.rankTeamPollScore - awayTeam.rankTeamPollScore) > 20) {    homeTeam.league.newsStories.get(homeTeam.league.currentWeek + 1).add("Upset! " + homeTeam.strRep() + " beats "+ awayTeam.strRep()+ ">#"+ homeTeam.rankTeamPollScore+ " "+ homeTeam.name+ " was able to pull off the upset at home against #"+ awayTeam.rankTeamPollScore+ " "+ awayTeam.name+ ", winning "+ homeScore+ " to "+ awayScore+ ".");  }}  }
class C{  public IdentifiedDoublePoint(final double[] point,int id){  super(point);  this.id=id;}  }
class C{  public InputHandler copy(){  return new DefaultInputHandler(this);}  }
class C{  protected Map<String,String> computeEntry2DpidMap(Map<String,Map<String,OFFlowMod>> map){  Map<String,String> ret=new ConcurrentHashMap<String,String>();  for (  String dpid : map.keySet()) {    for (    String entry : map.get(dpid).keySet())     ret.put(entry,dpid);  }  return ret;}  }
class C{  public static String stripHTMLTags(String html){  html=stripHTMLTagPairs(html);  return stripIndividualTags(html);}  }
class C{  private void createNewStatusSet(){  if (log.isDebugEnabled()) {    log.debug("createNewFamily: type= \"" + _type + "\", family= \""+ _family+ "\" key= "+ _key);  }  HashMap<String,NamedIcon> iconMap=ItemPanel.makeNewIconMap("Turnout");  ItemPalette.addLevel4FamilyMap(_type,_parent._family,_key,iconMap);  addFamilySet(_parent._family,iconMap,_key);  dispose();}  }
class C{  private synchronized void log(int logType,String msg,Object... args){  if (settings.getLogLevel() == LogLevel.NONE) {    return;  }  String tag=getTag();  String message=createMessage(msg,args);  int methodCount=getMethodCount();  logTopBorder(logType,tag);  logHeaderContent(logType,tag,methodCount);  byte[] bytes=message.getBytes();  int length=bytes.length;  if (length <= CHUNK_SIZE) {    if (methodCount > 0) {      logDivider(logType,tag);    }    logContent(logType,tag,message);    logBottomBorder(logType,tag);    return;  }  if (methodCount > 0) {    logDivider(logType,tag);  }  for (int i=0; i < length; i+=CHUNK_SIZE) {    int count=Math.min(length - i,CHUNK_SIZE);    logContent(logType,tag,new String(bytes,i,count));  }  logBottomBorder(logType,tag);}  }
class C{  private void moveLastFocusedComponentToFront(){  if (!lastFocusedStack.isEmpty()) {    GuiComponent<?> lastFocused=lastFocusedStack.peek();    if (lastFocused != null) {      try {        ((JInternalFrame)lastFocused.getParentFrame()).setSelected(true);      } catch (      Exception e) {        e.printStackTrace();      }    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected boolean keepCarriageReturn(){  return this.keepCR;}  }
class C{  private NotificationCompat.Action generateAction(int icon,String title,String intentAction){  Intent intent=new Intent(getApplicationContext(),BackgroundAudioService.class);  intent.setAction(intentAction);  PendingIntent pendingIntent=PendingIntent.getService(getApplicationContext(),1,intent,0);  return new NotificationCompat.Action.Builder(icon,title,pendingIntent).build();}  }
class C{  public final int moveFromSubstack(int n){  int x;  for (x=0; x < n; x++) {    if (onSubstack == 0)     break;    ADFContext obj=substack[--onSubstack];    if (onStack == stack.length) {      ADFContext[] newstack=new ADFContext[stack.length * 2];      System.arraycopy(stack,0,newstack,0,stack.length);      stack=newstack;    }    stack[onStack++]=obj;  }  return x;}  }
class C{  public ChatEvent[] parse(String inboundMessage){  if (LOG.isDebugEnabled()) {    LOG.debug("Raw message in " + connector.getContext().getShortName() + ": "+ inboundMessage);  }  List<ChatEvent> events=new ArrayList<ChatEvent>(5);  String afterMovesMessage=parseMovesMessage(inboundMessage,events);  if (LOG.isDebugEnabled()) {    LOG.debug("After handling moves message: " + afterMovesMessage);  }  if (StringUtils.isNotBlank(afterMovesMessage)) {    String afterGameEvents=parseGameEvents(afterMovesMessage);    if (LOG.isDebugEnabled()) {      LOG.debug("After handling game events: " + afterGameEvents);    }    if (StringUtils.isNotBlank(afterGameEvents) && !afterGameEvents.trim().equals(connector.getContext().getPrompt())) {      ChatEvent bugWhoEvent=processBugWho(afterGameEvents);      if (bugWhoEvent == null) {        ChatEvent soughtEvent=processSought(afterGameEvents);        if (soughtEvent == null) {          ChatEvent gameInfoEvent=processGameInfo(afterGameEvents);          if (gameInfoEvent == null) {            for (            ChatEventParser parser : nonGameEventParsers) {              ChatEvent event=parser.parse(afterGameEvents);              if (event != null) {                events.add(event);                break;              }            }            if (events.isEmpty()) {              events.add(new ChatEvent(null,ChatType.UNKNOWN,afterGameEvents));            }          } else {            events.add(gameInfoEvent);          }        } else {          events.add(soughtEvent);        }      } else {        events.add(bugWhoEvent);      }    }  }  return events.toArray(new ChatEvent[0]);}  }
class C{  public static <A extends CommonAllocator<A>,ValueT>MemBufferHolder<A> toMemBufferHolder(A ar,ValueT obj) throws IOException {  MemBufferHolder<A> ret=null;  ByteBuffer bb=toByteBuffer(obj);  if (null != bb && bb.remaining() > 0) {    ret=ar.createBuffer(bb.remaining());    ret.get().put(bb);    ret.get().flip();  }  return ret;}  }
class C{  protected SampledEdgeDecorator(E delegate){  super(delegate);}  }
class C{  public BacktrackingArmijoLineSearch(double rho,double c1){  if (!(rho > 0 && rho < 1))   throw new IllegalArgumentException("rho must be in (0,1), not " + rho);  this.rho=rho;  setC1(c1);}  }
class C{  public static VideoCastControllerFragment newInstance(Bundle extras){  VideoCastControllerFragment f=new VideoCastControllerFragment();  Bundle b=new Bundle();  b.putBundle(EXTRAS,extras);  f.setArguments(b);  return f;}  }
class C{  public void warn(String msg,Throwable t){  log(Log.WARN,msg,t);}  }
class C{  @Override public boolean onScaleBegin(ScaleGestureDetector detector){  return true;}  }
class C{  public void loadAndRun(final String configurationFile) throws SpyException {  loader.loadConfiguration(configurationFile);  loadAndRun(loader.getConfiguration());}  }
class C{  protected boolean indexExpressionMatches(ExpressionNode indexExpression,ExpressionNode comparisonOperand){  if (indexExpression.equals(comparisonOperand))   return true;  if (!(indexExpression instanceof ColumnExpression) || !(comparisonOperand instanceof ColumnExpression))   return false;  if (getColumnEquivalencies().areEquivalent((ColumnExpression)indexExpression,(ColumnExpression)comparisonOperand))   return true;  ColumnExpression comparisonColumn=(ColumnExpression)comparisonOperand;  ColumnSource comparisonTable=comparisonColumn.getTable();  if (!(comparisonTable instanceof SubquerySource))   return false;  Subquery subquery=((SubquerySource)comparisonTable).getSubquery();  if (subquery != queryGoal.getQuery())   return false;  PlanNode input=subquery.getQuery();  if (input instanceof ResultSet)   input=((ResultSet)input).getInput();  if (!(input instanceof Project))   return false;  Project project=(Project)input;  ExpressionNode insideExpression=project.getFields().get(comparisonColumn.getPosition());  return indexExpressionMatches(indexExpression,insideExpression);}  }
class C{  public static PropertyInfoUpdate configureEmail(ConnectEmcEmail email){  PropertyInfoUpdate propInfo=new PropertyInfoUpdate();  propInfo.addProperty("system_connectemc_transport",SMTP_TRANSPORT);  if (email.getSafeEncryption() != null) {    propInfo.addProperty("system_connectemc_encrypt",(email.getSafeEncryption()));  }  if (email.getEmailServer() != null) {    propInfo.addProperty("system_connectemc_smtp_server",email.getEmailServer());  }  if (email.getPort() != null) {    propInfo.addProperty("system_connectemc_smtp_port",email.getPort());  }  if (email.getPrimaryEmailAddress() != null) {    propInfo.addProperty("system_connectemc_smtp_emcto",email.getPrimaryEmailAddress());  }  if (email.getNotifyEmailAddress() != null) {    propInfo.addProperty("system_connectemc_smtp_to",email.getNotifyEmailAddress());  }  if (email.getEmailSender() != null) {    propInfo.addProperty("system_connectemc_smtp_from",email.getEmailSender());  }  if (email.getStartTls() != null) {    propInfo.addProperty("system_connectemc_smtp_enabletls",(email.getStartTls()));  }  if (email.getSmtpAuthType() != null) {    propInfo.addProperty("system_connectemc_smtp_authtype",email.getSmtpAuthType());  }  if (!isEmpty(email.getSmtpAuthType())) {    if (!isEmpty(email.getUserName()) && !isEmpty(email.getPassword())) {      propInfo.addProperty("system_connectemc_smtp_username",email.getUserName());      propInfo.addProperty("system_connectemc_smtp_password",email.getPassword());      propInfo.addProperty("system_connectemc_smtp_enabletlscert",email.getEnableTlsCert());    } else {      throw APIException.badRequests.configEmailError();    }  }  return propInfo;}  }
class C{  @Override public void updateLong(int columnIndex,long x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateLong(" + columnIndex + ", "+ x+ "L);");    }    update(columnIndex,ValueLong.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void schedulePlaylistSave(){  if (!mPlaylistLoading) {    if (mPlaylistSavePending.compareAndSet(false,true)) {      mThreadPoolManager.scheduleOnce(new PlaylistSaveTask(),2,TimeUnit.SECONDS);    }  }}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);}  }
class C{  private static boolean isCoverage(){  for (  StackTraceElement e : Thread.currentThread().getStackTrace()) {    if (e.toString().contains(".emma.")) {      return true;    }  }  return false;}  }
class C{  protected String createDistanceInformationLine(Point2D llp,double distance,double azimuth){  String unitInfo=null;  if (unit == null) {    unitInfo=df.format(Length.NM.fromRadians((float)distance)) + Length.NM.getAbbr() + ",  "+ df.format(Length.KM.fromRadians((float)distance))+ Length.KM.getAbbr()+ ",  "+ df.format(Length.MILE.fromRadians((float)distance))+ Length.MILE.getAbbr()+ "  ";  } else {    unitInfo=unit.fromRadians((float)distance) + " " + unit.getAbbr();  }  StringBuffer infoLine=new StringBuffer();  infoLine.append("Lat, Lon (").append(df.format(llp.getY())).append(", ").append(df.format(llp.getX())).append("), distance (");  infoLine.append(unitInfo).append(")");  if (showAngle) {    infoLine.append(", angle (").append(df.format(azimuth)).append(")");  }  return infoLine.toString();}  }
class C{  private int parseStatusLine(InputStream is){  int index;  int nread=0;  log("Parse status line");  nread=readOneLine(is);  if (nread == -1) {    requestMethod=UNKNOWN_METHOD;    return -1;  }  if (buf[0] == (byte)'G' && buf[1] == (byte)'E' && buf[2] == (byte)'T' && buf[3] == (byte)' ') {    requestMethod=GET_METHOD;    log("GET request");    index=4;  } else   if (buf[0] == (byte)'H' && buf[1] == (byte)'E' && buf[2] == (byte)'A' && buf[3] == (byte)'D' && buf[4] == (byte)' ') {    requestMethod=HEAD_METHOD;    log("HEAD request");    index=5;  } else   if (buf[0] == (byte)'P' && buf[1] == (byte)'O' && buf[2] == (byte)'S' && buf[3] == (byte)'T' && buf[4] == (byte)' ') {    requestMethod=POST_METHOD;    log("POST request");    index=5;  } else {    requestMethod=UNKNOWN_METHOD;    return -1;  }  if (requestMethod > UNKNOWN_METHOD) {    int i=index;    while (buf[i] != (byte)' ') {      if ((buf[i] == (byte)'\n') || (buf[i] == (byte)'\r')) {        requestMethod=UNKNOWN_METHOD;        return -1;      }      i++;    }    path=new String(buf,0,index,i - index);    testID=path.substring(1);    return nread;  }  return -1;}  }
class C{  public String marshalStrictlyOrDie(JAXBElement<?> element){  try {    return getMarshaller().marshal(element);  } catch (  MarshalException e) {    throw new RuntimeException(e);  }}  }
class C{  public static void testBCPRef2BCPRef(){  Class bcpInterface=CharSequence.class;  Class bcpSubClass1=String.class;  Class bcpSubClass2=StringBuffer.class;  Object testObj01=new String("test");  Object testObj02=new StringBuffer("test");  Class[] children={bcpSubClass1,bcpSubClass2};  Object[] childInst={testObj01,testObj02};  for (  TestConversionMode mode : TestConversionMode.values()) {    for (int i=0; i < children.length; i++) {      testConversion(mode,children[i],bcpInterface,childInst[i],childInst[i],false,null);      testConversion(mode,children[i],bcpInterface,null,null,false,null);      testConversion(mode,bcpInterface,children[i],childInst[i],childInst[i],false,null);      testConversion(mode,bcpInterface,children[i],null,null,false,null);    }    testConversion(mode,bcpSubClass1,bcpSubClass2,testObj01,null,true,ClassCastException.class);    testConversion(mode,bcpSubClass1,bcpSubClass2,null,null,false,null);    testConversion(mode,bcpInterface,bcpSubClass1,testObj02,null,true,ClassCastException.class);  }}  }
class C{  @Override public Result decode(BinaryBitmap image,Map<DecodeHintType,?> hints) throws NotFoundException {  setHints(hints);  return decodeInternal(image);}  }
class C{  private void runActions(List<String> actionIds,Event keyEvent){  for (  String actionId : actionIds) {    Action action=actionManager.getAction(actionId);    ActionEvent e=new ActionEvent("",presentationFactory.getPresentation(action),actionManager,0);    action.update(e);    if (e.getPresentation().isEnabled() && e.getPresentation().isVisible()) {      keyEvent.preventDefault();      keyEvent.stopPropagation();      action.actionPerformed(e);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:39.630 -0500",hash_original_method="E250E51CEC55FC558312A1D8553D2784",hash_generated_method="16E4B6B0FCD735FE4AE16227A8A11C24") public void cancel(){  mTable.Deny(mHostAndPort);  mBrowserFrame.nativeSslClientCert(mHandle,null,null);}  }
class C{  public static boolean hasNotNull(Object... objects){  for (  Object object : objects) {    if (object != null)     return true;  }  return false;}  }
class C{  @Override @Pure public String toString(){  return getDescriptor().toString().replace('/','.');}  }
class C{  public void requestURL(InstagramAPIResponseCallback<IGUser> callback,String userId){  Call<IGAPIResponse> call=instagramAPIService.getUser(userId,getSession().getAccessToken());  call.enqueue(new InstagramAPIResponseManager<>(callback,IGUser.class));}  }
class C{  public static String readStringAndClose(Reader in,int length) throws IOException {  try {    if (length <= 0) {      length=Integer.MAX_VALUE;    }    int block=Math.min(Constants.IO_BUFFER_SIZE,length);    StringWriter out=new StringWriter(block);    copyAndCloseInput(in,out,length);    return out.toString();  }  finally {    in.close();  }}  }
class C{  public CodesSurePOS(){}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public static void writeLong(long v,OutputStream stream) throws IOException {  writeByte((byte)(v & 0xFF),stream);  writeByte((byte)((v >> 8) & 0xFF),stream);  writeByte((byte)((v >> 16) & 0xFF),stream);  writeByte((byte)((v >> 24) & 0xFF),stream);  writeByte((byte)((v >> 32) & 0xFF),stream);  writeByte((byte)((v >> 40) & 0xFF),stream);  writeByte((byte)((v >> 48) & 0xFF),stream);  writeByte((byte)((v >> 56) & 0xFF),stream);}  }
class C{  public BrownianBridge(final int steps){  if (System.getProperty("EXPERIMENTAL") == null)   throw new UnsupportedOperationException("Work in progress");  this.size_=steps;  this.t_=new double[this.size_];  this.sqrtdt_=new double[this.size_];  this.bridgeIndex_=new int[this.size_];  this.leftIndex_=new int[this.size_];  this.rightIndex_=new int[this.size_];  this.leftWeight_=new double[this.size_];  this.rightWeight_=new double[this.size_];  this.stdDev_=new double[this.size_];  for (int i=0; i < size_; ++i) {    t_[i]=(i + 1);  }  initialize();}  }
class C{  public static BitmapDescriptor fromView(View view){  final int spec=View.MeasureSpec.makeMeasureSpec(0,View.MeasureSpec.UNSPECIFIED);  view.measure(spec,spec);  final int width=view.getMeasuredWidth();  final int height=view.getMeasuredHeight();  view.layout(0,0,width,height);  final Bitmap bitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  final Canvas canvas=new Canvas(bitmap);  view.draw(canvas);  return BitmapDescriptorFactory.fromBitmap(bitmap);}  }
class C{  public boolean validate(List<ZielobjektTypeResult> zielobjektTypeList){  unknownTypes=new HashSet<String>();  for (  ZielobjektTypeResult zielobjektType : zielobjektTypeList) {    validate(zielobjektType.type,zielobjektType.subtype);  }  if (!unknownTypes.isEmpty()) {    showCancelDialog();  }  return result;}  }
class C{  public JRDataSourceBasic(BaseSentence sent,ReportFields fields,Object params) throws BasicException {  this.sent=sent;  SRS=sent.openExec(params);  m_fields=fields;}  }
class C{  public static SortClause create(String item,ORDER order){  return new SortClause(item,order);}  }
class C{  public LinkedList<Patch> patch_make(String text1,LinkedList<Diff> diffs){  if (text1 == null || diffs == null) {    throw new IllegalArgumentException("Null inputs. (patch_make)");  }  LinkedList<Patch> patches=new LinkedList<Patch>();  if (diffs.isEmpty()) {    return patches;  }  Patch patch=new Patch();  int char_count1=0;  int char_count2=0;  String prepatch_text=text1;  String postpatch_text=text1;  for (  Diff aDiff : diffs) {    if (patch.diffs.isEmpty() && aDiff.operation != Operation.EQUAL) {      patch.start1=char_count1;      patch.start2=char_count2;    }switch (aDiff.operation) {case INSERT:      patch.diffs.add(aDiff);    patch.length2+=aDiff.text.length();  postpatch_text=postpatch_text.substring(0,char_count2) + aDiff.text + postpatch_text.substring(char_count2);break;case DELETE:patch.length1+=aDiff.text.length();patch.diffs.add(aDiff);postpatch_text=postpatch_text.substring(0,char_count2) + postpatch_text.substring(char_count2 + aDiff.text.length());break;case EQUAL:if (aDiff.text.length() <= 2 * Patch_Margin && !patch.diffs.isEmpty() && aDiff != diffs.getLast()) {patch.diffs.add(aDiff);patch.length1+=aDiff.text.length();patch.length2+=aDiff.text.length();}if (aDiff.text.length() >= 2 * Patch_Margin) {if (!patch.diffs.isEmpty()) {patch_addContext(patch,prepatch_text);patches.add(patch);patch=new Patch();prepatch_text=postpatch_text;char_count1=char_count2;}}break;}if (aDiff.operation != Operation.INSERT) {char_count1+=aDiff.text.length();}if (aDiff.operation != Operation.DELETE) {char_count2+=aDiff.text.length();}}if (!patch.diffs.isEmpty()) {patch_addContext(patch,prepatch_text);patches.add(patch);}return patches;}  }
class C{  @AfterMethod(alwaysRun=true) public void recoveryScenario(ITestResult rs) throws Throwable {  if (rs.getStatus() == 2) {    Reporter.log("Failed Test: " + rs.getTestName());    gotoMyVideosView();  }}  }
class C{  public void assignPolicyToFileSystem(URI fileSystemId,URI policyId){  client.put(String.class,PathConstants.ASSIGN_POLICY_URL,fileSystemId,policyId);}  }
class C{  public static Vector3 scale(Vector3 a,float b){  return new Vector3(a.getX() * b,a.getY() * b,a.getZ() * b);}  }
class C{  public void addStateValueAsString(StateObject context,String name,String value,boolean escapeValue){  if (context != null && !containsElement(context.elem)) {    String message=Logging.getMessage("RestorableSupport.InvalidStateObject");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (name == null || value == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  createStateObject(context != null ? context.elem : null,name,value,escapeValue);}  }
class C{  private void expandsAllSections(){  final int groupCount=mAdapter.getGroupCount();  for (int groupIndex=0; groupIndex < groupCount; groupIndex++) {    mRecentsListView.expandGroup(groupIndex);  }}  }
class C{  protected void fire(final SelectionEvent event){  if (this.listener == null)   return;  this.listener.widgetSelected(event);}  }
class C{  private static byte[] createInt(int value){  return datatypeCoder.encodeInt(value);}  }
class C{  public static boolean putFloat(Context context,String key,float value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putFloat(key,value);  return editor.commit();}  }
class C{  public int doStartTag() throws JspException {  UserContext user=getUser();  if (user == null || user.getCurrentAuthority() == null || !user.getCurrentAuthority().hasRight(Right.IsAdmin))   throw new PageAccessException("Access Denied.");  StringBuffer html=new StringBuffer("");  Formats.Format<Date> sdf=Formats.getDateFormat(Formats.Pattern.DATE_TIME_STAMP);  try {    html.append("<TABLE border='0' cellspacing='1' cellpadding='2' width='100%'>");    html.append("<TR>");    html.append("<TD align='center'>User</TD>");    html.append("<TD align='center'>Created</TD>");    html.append("<TD align='center'>Last Access</TD>");    html.append("</TR>");    HashMap s=SessionListener.getSessions();    Set keys=s.keySet();    Iterator i=keys.iterator();    while (i.hasNext()) {      String sessionId=i.next().toString();      HttpSession session=(HttpSession)s.get(sessionId);      if (session != null) {        session.getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY);        UserContext u=getUser((SecurityContext)session.getAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY));        String userDetail="Cannot be determined";        if (u != null && u.getUsername() != null)         userDetail=u.getUsername() + (u.getCurrentAuthority() == null ? "" : " (" + u.getCurrentAuthority() + ")");        html.append("<TR>");        html.append("<TD align='left'>" + userDetail + "</TD>");        html.append("<TD align='left'>" + sdf.format(new Date(session.getCreationTime())) + "</TD>");        html.append("<TD align='left'>" + sdf.format(new Date(session.getLastAccessedTime())) + "</TD>");        html.append("</TR>");      }    }    html.append("</TABLE>");    pageContext.getOut().print(html.toString());  } catch (  Exception ex) {    throw new JspTagException("SessionsTag: " + ex.getMessage());  }  return SKIP_BODY;}  }
class C{  public static void clearCache(){  allHousePortals=null;}  }
class C{  protected Product(){}  }
class C{  private void createEsxiSession(ImageServerDialog d,ComputeImageJob job,ComputeImage ci,ComputeImageServer imageServer){  String s=ImageServerUtils.getResourceAsString(ESXI5X_UUID_TEMPLATE);  StringBuilder sb=new StringBuilder(s);  ImageServerUtils.replaceAll(sb,"${os_full_name}",ci.getImageName());  ImageServerUtils.replaceAll(sb,"${os_path}",ci.getPathToDirectory());  ImageServerUtils.replaceAll(sb,"${pxe_identifier}",job.getPxeBootIdentifier());  String content=sb.toString();  log.trace(content);  d.writeFile(imageServer.getTftpBootDir() + PXELINUX_CFG_DIR + job.getPxeBootIdentifier(),content);  s=d.readFile(imageServer.getTftpBootDir() + ci.getPathToDirectory() + "/boot.cfg");  sb=new StringBuilder(s.trim());  ImageServerUtils.replaceAll(sb,"/","/" + ci.getPathToDirectory());  ImageServerUtils.replaceAll(sb,"runweasel","runweasel vmkopts=debugLogToSerial:1 ks=http://" + imageServer.getImageServerSecondIp() + ":"+ imageServer.getImageServerHttpPort()+ "/ks/"+ job.getPxeBootIdentifier()+ " kssendmac");  content=sb.toString();  log.trace(content);  d.writeFile(imageServer.getTftpBootDir() + PXELINUX_CFG_DIR + job.getPxeBootIdentifier()+ ".boot.cfg",content);  content=generateKickstart(job,ci,imageServer);  d.writeFile(imageServer.getTftpBootDir() + HTTP_KICKSTART_DIR + job.getPxeBootIdentifier(),content);  content=generateFirstboot(job,ci);  d.writeFile(imageServer.getTftpBootDir() + HTTP_FIRSTBOOT_DIR + job.getPxeBootIdentifier(),content);  d.rm(imageServer.getTftpBootDir() + HTTP_SUCCESS_DIR + job.getPxeBootIdentifier());  d.rm(imageServer.getTftpBootDir() + HTTP_FAILURE_DIR + job.getPxeBootIdentifier());}  }
class C{  protected String doIt() throws Exception {  log.info("Selection=" + p_Selection + ", M_Warehouse_ID="+ p_M_Warehouse_ID+ ", C_BPartner_ID="+ p_C_BPartner_ID+ ", Consolidate="+ p_ConsolidateDocument+ ", IsUnconfirmed="+ p_IsUnconfirmedInOut+ ", Movement="+ m_movementDate);  if (p_M_Warehouse_ID == 0)   throw new AdempiereUserError("@NotFound@ @M_Warehouse_ID@");  if (p_Selection) {    m_sql="SELECT C_Order.* FROM C_Order, T_Selection " + "WHERE C_Order.DocStatus='CO' AND C_Order.IsSOTrx='Y' AND C_Order.AD_Client_ID=? " + "AND C_Order.C_Order_ID = T_Selection.T_Selection_ID "+ "AND T_Selection.AD_PInstance_ID=? ";  } else {    m_sql="SELECT * FROM C_Order o " + "WHERE DocStatus='CO' AND IsSOTrx='Y'" + " AND o.C_DocType_ID IN (SELECT C_DocType_ID FROM C_DocType "+ "WHERE DocBaseType='SOO' AND DocSubTypeSO NOT IN ('ON','OB','WR'))"+ "	AND o.IsDropShip='N'"+ " AND o.DeliveryRule<>'M'"+ " AND EXISTS (SELECT * FROM C_OrderLine ol "+ "WHERE ol.M_Warehouse_ID=?";    if (p_DatePromised != null)     m_sql+=" AND TRUNC(ol.DatePromised, 'DD')<=?";    m_sql+=" AND o.C_Order_ID=ol.C_Order_ID AND ol.QtyOrdered<>ol.QtyDelivered)";    if (p_C_BPartner_ID != 0)     m_sql+=" AND o.C_BPartner_ID=?";  }  m_sql+=" ORDER BY M_Warehouse_ID, PriorityRule, M_Shipper_ID, C_BPartner_ID, C_BPartner_Location_ID, C_Order_ID";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(m_sql,get_TrxName());    int index=1;    if (p_Selection) {      pstmt.setInt(index++,Env.getAD_Client_ID(getCtx()));      pstmt.setInt(index++,getAD_PInstance_ID());    } else {      pstmt.setInt(index++,p_M_Warehouse_ID);      if (p_DatePromised != null)       pstmt.setTimestamp(index++,p_DatePromised);      if (p_C_BPartner_ID != 0)       pstmt.setInt(index++,p_C_BPartner_ID);    }  } catch (  Exception e) {    log.log(Level.SEVERE,m_sql,e);  }  return generate(pstmt);}  }
class C{  private void signalNotFull(){  final ReentrantLock putLock=this.putLock;  putLock.lock();  try {    notFull.signal();  }  finally {    putLock.unlock();  }}  }
class C{  public void close(){  finished=true;  IOUtils.closeQuietly(bufferedReader);  cachedLine=null;}  }
class C{  public void test_simpleReset(){  final Journal store=(Journal)getStore();  try {    final RWStrategy bs=(RWStrategy)store.getBufferStrategy();    final long addr=bs.write(randomData(78));    assertTrue(bs.inWriteCache(addr));    store.commit();    bs.delete(addr);    final long addr2=bs.write(randomData(78));    assertTrue(bs.inWriteCache(addr2));    bs.abort();    assertTrue(bs.inWriteCache(addr));    assertFalse(bs.inWriteCache(addr2));    try {      bs.read(addr2);      fail("Exception expected");    } catch (    IllegalArgumentException e) {    }    store.commit();    assertTrue(bs.isCommitted(addr));  }  finally {    store.destroy();  }}  }
class C{  public boolean zoomOut(){  if (mScrollable && mCurrentZoomScaleIndex > 0) {    updateScaleStep(mCurrentZoomScaleIndex - 1);    return true;  }  return false;}  }
class C{  public void removeLoader(Loader loader){synchronized (_loaders) {    for (int i=_loaders.size() - 1; i >= 0; i--) {      if (_loaders.get(i) == loader) {        _loaders.remove(i);      }    }  }}  }
class C{  public DividerItemDecoration(@NonNull Context context,@DrawableRes int resId,@IntRange(from=0) int sectionOffset){  if (resId > 0)   mDivider=ContextCompat.getDrawable(context,resId);  mSectionOffset=(int)(context.getResources().getDisplayMetrics().density * sectionOffset);}  }
class C{  public void paintTabbedPaneTabAreaBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintTabbedPaneTabAreaBorder(context,g,x,y,w,h);}  }
class C{  public DViewExtensions(JDialog parent,String title,X509Extension extensions){  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  this.extensions=extensions;  initComponents();}  }
class C{  public void noop() throws IOException {  frameWriter.noop();}  }
class C{  public static void logErrorRetrieveArchive(final Logger logger,final ArchiveDescription archive,final Error e){  logger.logError(Level.SEVERE,"Error while accessing archive " + archive.toString(),e);}  }
class C{  public long index(){  return index;}  }
class C{  protected void finalize() throws Throwable {  super.finalize();  shutDown();}  }
class C{  public boolean isAnimationStarted(){  return mAnimationStarted;}  }
class C{  public MonetaryFormat prefixCode(){  if (codePrefixed)   return this; else   return new MonetaryFormat(negativeSign,positiveSign,zeroDigit,decimalMark,minDecimals,decimalGroups,shift,roundingMode,codes,codeSeparator,true);}  }
class C{  @Override public int hashCode(){  int result;  result=(this.period != null ? this.period.hashCode() : 0);  result=29 * result + (this.value != null ? this.value.hashCode() : 0);  return result;}  }
class C{  public AssociationClassDefinition_ createAssociationClassDefinition_(){  AssociationClassDefinition_Impl associationClassDefinition_=new AssociationClassDefinition_Impl();  return associationClassDefinition_;}  }
class C{  public static void createImageToStorage(String url,Label l,String cacheId,Dimension toScale,byte priority){  createImageToStorage(url,l,cacheId,false,toScale,priority,null,defaultMaintainAspectRatio);}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public boolean importData(JComponent comp,Transferable t){  JTextComponent c=(JTextComponent)comp;  withinSameComponent=c == exportComp;  if (withinSameComponent && c.getCaretPosition() >= p0 && c.getCaretPosition() <= p1) {    shouldRemove=false;    return true;  }  boolean imported=false;  DataFlavor importFlavor=getImportFlavor(t.getTransferDataFlavors(),c);  if (importFlavor != null) {    try {      InputContext ic=c.getInputContext();      if (ic != null)       ic.endComposition();      Reader r=importFlavor.getReaderForText(t);      handleReaderImport(r,c);      imported=true;    } catch (    UnsupportedFlavorException ufe) {      ufe.printStackTrace();    }catch (    BadLocationException ble) {      ble.printStackTrace();    }catch (    IOException ioe) {      ioe.printStackTrace();    }  }  return imported;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public BlinkConn(Sender sender,SendDelivery sendDelivery,Receiver receiver,ReceiveDelivery receiveDelivery,Resource resource){  mSender=sender;  mReceiver=receiver;  mResource=resource;  mSendDelivery=sendDelivery;  mReceiveDelivery=receiveDelivery;  init();}  }
class C{  private void drawDataSeries(Canvas canvas){  for (  ChartValueSeries chartValueSeries : series) {    if (chartValueSeries.isEnabled() && chartValueSeries.hasData()) {      chartValueSeries.drawPath(canvas);    }  }}  }
class C{  private static int streamtoword(byte data[],int offp[]){  int i;  int word=0;  int off=offp[0];  for (i=0; i < 4; i++) {    word=(word << 8) | (data[off] & 0xff);    off=(off + 1) % data.length;  }  offp[0]=off;  return word;}  }
class C{  public void close() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public UnweightedGraph(int[][] edges,int numberOfVertices){  super(edges,numberOfVertices);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XObject bestScore=null;  int n=m_patterns.length;  for (int i=0; i < n; i++) {    XObject score=m_patterns[i].execute(xctxt);    if (score != NodeTest.SCORE_NONE) {      if (null == bestScore)       bestScore=score; else       if (score.num() > bestScore.num())       bestScore=score;    }  }  if (null == bestScore) {    bestScore=NodeTest.SCORE_NONE;  }  return bestScore;}  }
class C{  @Reference(authors="Zhao, Y. and Karypis, G.",title="Criterion functions for document clustering: Experiments and analysis",booktitle="University of Minnesota, Department of Computer Science, Technical Report 01-40, 2001",url="http://www-users.cs.umn.edu/~karypis/publications/Papers/PDF/vscluster.pdf") public double purity(){  return smPurity;}  }
class C{  public void log() throws LoggingException {  LoggingEvent event=null;  Iterator it=this.eventos.iterator();  while (it.hasNext()) {    event=(LoggingEvent)it.next();    this.log(event);  }  eventos.removeAllElements();}  }
class C{  public static MediaType create(String type,String subtype){  return create(type,subtype,ImmutableListMultimap.<String,String>of());}  }
class C{  public Cuboid outset(CuboidDirection dir,int amount){  Cuboid c;switch (dir) {case Horizontal:    c=expand(CuboidDirection.North,amount).expand(CuboidDirection.South,amount).expand(CuboidDirection.East,amount).expand(CuboidDirection.West,amount);  break;case Vertical:c=expand(CuboidDirection.Down,amount).expand(CuboidDirection.Up,amount);break;case Both:c=outset(CuboidDirection.Horizontal,amount).outset(CuboidDirection.Vertical,amount);break;default :throw new IllegalArgumentException("Invalid direction " + dir);}return c;}  }
class C{  public void internalEntityDecl(String name,String value) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#internalEntityDecl: " + name + ", "+ value);  if (null != m_declHandler) {    m_declHandler.internalEntityDecl(name,value);  }}  }
class C{  private boolean equalsAbsOne(){  for (int i=1; i < coeffs.length; i++) {    if (coeffs[i] != 0) {      return false;    }  }  return Math.abs(coeffs[0]) == 1;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (sepsets == null) {    throw new NullPointerException();  }}  }
class C{  public static String humanSizeOf(Object object){  return RamUsageEstimator.humanReadableUnits(sizeOf(object));}  }
class C{  private SpeechletResponse buildSpeechletResponse(final String title,final String output,final boolean shouldEndSession){  SimpleCard card=new SimpleCard();  card.setTitle(String.format("HelloWorldSpeechlet - %s",title));  card.setContent(String.format("HelloWorldSpeechlet - %s",output));  PlainTextOutputSpeech speech=new PlainTextOutputSpeech();  speech.setText(output);  SpeechletResponse response=new SpeechletResponse();  response.setShouldEndSession(shouldEndSession);  response.setOutputSpeech(speech);  response.setCard(card);  return response;}  }
class C{  private void addBlockListener(OBlock block,Tracker tracker){  List<Tracker> trackers=_blocks.get(block);  if (trackers == null) {    trackers=new ArrayList<Tracker>();    trackers.add(tracker);    _blocks.put(block,trackers);    block.addPropertyChangeListener(this);    if (log.isDebugEnabled())     log.debug("\taddPropertyChangeListener for block {}",block.getDisplayName());  } else {    if (trackers.isEmpty()) {      block.addPropertyChangeListener(this);      if (log.isDebugEnabled())       log.debug("\taddPropertyChangeListener for block {}",block.getDisplayName());    } else {      if (log.isDebugEnabled())       log.debug("\tassumed block {} already has listener" + block.getDisplayName());    }    if (!trackers.contains(tracker)) {      trackers.add(tracker);    }  }}  }
class C{  private void createAttributesEle(Element parent) throws Exception {  Collection<Attribute> attributes=idmClient.getAttributeDefinitions(tenantName);  for (  Attribute attr : attributes) {    Element attrEle=doc.createElement(SAMLNames.ATTRIBUTE);    attrEle.setAttribute(SAMLNames.NAME,attr.getName());    attrEle.setAttribute(SAMLNames.NAMEFORMAT,attr.getNameFormat());    attrEle.setAttribute(SAMLNames.FRIENDLYNAME,attr.getFriendlyName());    parent.appendChild(attrEle);  }}  }
class C{  public void fill(int o){  int[] objs=this.objs;  int numObjs=this.numObjs;  for (int x=0; x < numObjs; x++)   objs[x]=o;}  }
class C{  private static String findSomeFile(String dir,String subdir,String[] dl){  for (int i=0; i < dl.length; i++) {    File f=new File(subdir,dl[i]);    File df=new File(dir,f.getPath());    if (Files.isRegularFile(df.toPath(),LinkOption.NOFOLLOW_LINKS)) {      return f.getPath();    }  }  for (int i=0; i < dl.length; i++) {    File f=(subdir.length() == 0) ? new File(dl[i]) : new File(subdir,dl[i]);    File df=new File(dir,f.getPath());    if (Files.isDirectory(df.toPath(),LinkOption.NOFOLLOW_LINKS)) {      String[] dl2=df.list();      if (dl2 != null) {        String ff=findSomeFile(dir,f.getPath(),dl2);        if (ff != null)         return ff;      }    }  }  return null;}  }
class C{  public ParameterTypeRegexp(final String key,String description,boolean optional,boolean expert){  super(key,description,optional || expert);  setExpert(expert);}  }
class C{  @Retained EntryEventImpl createListenerEvent(EntryEventImpl sourceEvent,PartitionedRegion r,InternalDistributedMember member){  final EntryEventImpl e2;  if (this.notificationOnly && this.bridgeContext == null) {    e2=sourceEvent;  } else {    e2=new EntryEventImpl(sourceEvent);    if (this.bridgeContext != null) {      e2.setContext(this.bridgeContext);    }  }  e2.setRegion(r);  e2.setOriginRemote(true);  e2.setInvokePRCallbacks(!notificationOnly);  if (this.filterInfo != null) {    e2.setLocalFilterInfo(this.filterInfo.getFilterInfo(member));  }  if (this.versionTag != null) {    this.versionTag.replaceNullIDs(getSender());    e2.setVersionTag(this.versionTag);  }  return e2;}  }
class C{  public DataSource createXtremIOHostInitiatorGroupFolderNameDataSource(String hostName,StorageSystem storageSystem){  Host host=getHostByName(hostName);  return createDataSource(CustomConfigConstants.XTREMIO_HOST_INITIATOR_GROUP_FOLDER_NAME,new DataObject[]{host,storageSystem});}  }
class C{  public EntityClassifier<EntityViewInfo> createNightViewClassifier(){  EntityClassifier<EntityViewInfo> result=createDefaultClassifier();  result.replaceRule("highway","path",createWayInfo(1f / 100000,1f / 3500,38,UColor.YELLOW.darker(),1));  result.replaceRule("highway","track",createWayInfo(1f / 60000,1f / 3500,37,UColor.YELLOW.darker(),1));  result.replaceRule("place","city",createPoiInfo(1e-9f,1f / 3500000,30,UColor.WHITE,null,false));  result.replaceRule("place","town",createPoiInfo(1e-9f,1f / 350000,29,UColor.WHITE,null,false));  result.replaceRule("place","village",createPoiInfo(1e-9f,1f / 100000,29,UColor.GRAY,null,false));  result.replaceRule("place",null,createPoiInfo(1e-9f,1f / 35000,28,UColor.GRAY,null,false));  result.replaceRule("marker","yes",createPoiInfo(1e-9f,1e-9f,0,UColor.YELLOW,new PinIcon(12,UColor.YELLOW,UColor.YELLOW),false));  result.replaceRule("track_type",null,createTrackInfo(UColor.WHITE));  return result;}  }
class C{  public boolean isApplicationRunning(){synchronized (activities) {    for (int i=0; i < activities.size(); i++)     if (activities.get(i).isRunning())     return true;  }  return false;}  }
class C{  public final void testGetFieldSize(){  assertEquals(2000,new ECFieldF2m(2000).getFieldSize());}  }
class C{  void moveRow(int increment){  if (selectedRow == -1) {    return;  }  if ((selectedRow + increment) < 0) {    return;  }  if ((selectedRow + increment) >= numRows) {    return;  }  int newRow=selectedRow + increment;  for (int item=0; item < MAX_ITEMS; item++) {    if (itemIsUsed[item]) {      int selectedRowValue=Integer.valueOf(_varModel.getValString(iVarIndex[item][selectedRow]));      int newRowValue=Integer.valueOf(_varModel.getValString(iVarIndex[item][newRow]));      _varModel.setIntValue(iVarIndex[item][selectedRow],newRowValue);      _varModel.setIntValue(iVarIndex[item][newRow],selectedRowValue);    }  }  selectedRow=newRow;  rowButton[selectedRow].setSelected(true);}  }
class C{  public CalendarIntervalTriggerImpl(String name,String group,Date startTime,Date endTime,IntervalUnit intervalUnit,int repeatInterval){  super(name,group);  setStartTime(startTime);  setEndTime(endTime);  setRepeatIntervalUnit(intervalUnit);  setRepeatInterval(repeatInterval);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:30.585 -0500",hash_original_method="3D7E63CDF154AB38FFF5F8515CF699BF",hash_generated_method="6922CC887F15BE18EBAC154EF990D97C") boolean sequenceScroll(int direction){  int selectedPosition=mSelectedPosition;  int numColumns=mNumColumns;  int count=mItemCount;  int startOfRow;  int endOfRow;  if (!mStackFromBottom) {    startOfRow=(selectedPosition / numColumns) * numColumns;    endOfRow=Math.min(startOfRow + numColumns - 1,count - 1);  } else {    int invertedSelection=count - 1 - selectedPosition;    endOfRow=count - 1 - (invertedSelection / numColumns) * numColumns;    startOfRow=Math.max(0,endOfRow - numColumns + 1);  }  boolean moved=false;  boolean showScroll=false;switch (direction) {case FOCUS_FORWARD:    if (selectedPosition < count - 1) {      mLayoutMode=LAYOUT_MOVE_SELECTION;      setSelectionInt(selectedPosition + 1);      moved=true;      showScroll=selectedPosition == endOfRow;    }  break;case FOCUS_BACKWARD:if (selectedPosition > 0) {  mLayoutMode=LAYOUT_MOVE_SELECTION;  setSelectionInt(selectedPosition - 1);  moved=true;  showScroll=selectedPosition == startOfRow;}break;}if (moved) {playSoundEffect(SoundEffectConstants.getContantForFocusDirection(direction));invokeOnItemScrollListener();}if (showScroll) {awakenScrollBars();}return moved;}  }
class C{  public boolean isDictType(String match) throws IOException {  if (type == INDIRECT) {    return dereference().isDictType(match);  } else   if (type != DICTIONARY && type != STREAM) {    return false;  }  PDFObject obj=getDictRef("Type");  return obj != null && obj.getStringValue().equals(match);}  }
class C{  protected FinalizableSoftReference(T referent,FinalizableReferenceQueue queue){  super(referent,queue.queue);  queue.cleanUp();}  }
class C{  @Override public String runEmrJobFlow(AmazonElasticMapReduceClient emrClient,RunJobFlowRequest jobFlowRequest){  return emrClient.runJobFlow(jobFlowRequest).getJobFlowId();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Observable<PlaceSearchResult> searchPlaces(String query){  return routes.searchPlaces(KEY,Normalizer.get().normalizeSearchQuery(query)).flatMapIterable(null);}  }
class C{  public DrawingColorIcon(DrawingEditor editor,AttributeKey<Color> key,URL imageLocation,Shape colorShape){  super(imageLocation);  this.editor=editor;  this.key=key;  this.colorShape=colorShape;}  }
class C{  public double calcScoreWithExtraParent(int nNode,int nCandidateParent){  ParentSet oParentSet=m_BayesNet.getParentSet(nNode);  if (oParentSet.contains(nCandidateParent)) {    return -1e100;  }  oParentSet.addParent(nCandidateParent,m_BayesNet.m_Instances);  double logScore=calcNodeScore(nNode);  oParentSet.deleteLastParent(m_BayesNet.m_Instances);  return logScore;}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.VARIABLE_BINDING__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public String metaRefresh(){  return metaRefresh;}  }
class C{  public boolean hasChanged(){  return false;}  }
class C{  public SendableVenueMessage.SendableVenueMessageBuilder foursquareId(String foursquareId){  this.foursquareId=foursquareId;  return this;}  }
class C{  @Field(25) public __VARIANT_NAME_3_union pdate(Pointer<Double> pdate){  this.io.setPointerField(this,25,pdate);  return this;}  }
class C{  public IsNullValue markInformationAsComingFromFieldValue(XField field){  if (getBaseKind() == NO_KABOOM_NN) {    return new IsNullValue(kind | FIELD_VAL,locationOfKaBoom);  }  return instanceByFlagsList[(getFlags() | FIELD_VAL) >> FLAG_SHIFT][getBaseKind()];}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    double multiplier=Math.PI / 180;    if (inputFile.getZUnits().toLowerCase().contains("rad")) {      multiplier=1;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.tan(z * multiplier));        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.stroke=SerialUtilities.readStroke(stream);  this.outlinePaint=SerialUtilities.readPaint(stream);  this.fillPaint=SerialUtilities.readPaint(stream);}  }
class C{  private String sendBind(BindType bindType,String systemId,String password,String systemType,InterfaceVersion interfaceVersion,TypeOfNumber addrTon,NumberingPlanIndicator addrNpi,String addressRange,long timeout) throws PDUException, ResponseTimeoutException, InvalidResponseException, NegativeResponseException, IOException {  BindCommandTask task=new BindCommandTask(pduSender(),bindType,systemId,password,systemType,interfaceVersion,addrTon,addrNpi,addressRange);  BindResp resp=(BindResp)executeSendCommand(task,timeout);  OptionalParameter.Sc_interface_version scVersion=resp.getOptionalParameter(Sc_interface_version.class);  if (scVersion != null) {    logger.debug("Other side reports SMPP interface version {}",scVersion);  }  logger.info("Bind response systemId '{}'",resp.getSystemId());  return resp.getSystemId();}  }
class C{  protected void appendSummary(StringBuffer buffer,String fieldName,Object[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object o=stack.pop();  if (o instanceof sage.vfs.MediaNode)   o=((sage.vfs.MediaNode)o).getDataObject();  return Boolean.valueOf(o instanceof Airing);}  }
class C{  private void recordExchangeAttemptTime(Peer peer,Date exchangeTime){  BluetoothDevice device=peer.getNetwork().getBluetoothDevice();  if (device == null) {    log.error("Recording exchange attempt time of non-bluetooth peer! Can't do it.");    return;  } else {    Date nextAttempt=new Date(exchangeTime.getDate() + (random.nextInt() % MS_BETWEEN_EXCHANGE_ATTEMPTS));    exchangeAttemptTimes.put(device.getAddress(),nextAttempt);    log.warn("Will attempt another exchange with peer " + peer + " no sooner than "+ nextAttempt);  }}  }
class C{  protected void createSubsample(){  int origSize=getInputFormat().numInstances();  int sampleSize=(int)(origSize * m_SampleSizePercent / 100);  Random random=new Random(m_RandomSeed);  if (getNoReplacement()) {    createSubsampleWithoutReplacement(random,origSize,sampleSize);  } else {    createSubsampleWithReplacement(random,origSize,sampleSize);  }}  }
class C{  public boolean isFinished(){  return (currentGoal == null);}  }
class C{  private void shrinkValueSet(int maxSize){  if (valueSet != null) {    if (valueSet.size() > maxSize) {      Set<String> newSet=new TreeSet<String>();      Iterator<String> i=valueSet.iterator();      int count=0;      while (i.hasNext() && count < maxSize) {        newSet.add(i.next());        count++;      }      this.valueSet=newSet;      valueSetRelation=valueSetRelation.merge(SetRelation.SUPERSET);      if (owner != null) {        owner.setNominalDataWasShrinked(true);      }    }  }}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof RuleGrounding) {    return ((RuleGrounding)o).groundings.equals(groundings);  }  return false;}  }
class C{  public static boolean hasUID(String classname){  boolean result;  try {    result=hasUID(Class.forName(classname));  } catch (  Exception e) {    result=false;  }  return result;}  }
class C{  @Override public void initHeaderBuffer() throws IOException {  resetHTMLHead();}  }
class C{  public Tween cast(Class<?> targetClass){  if (isStarted())   throw new RuntimeException("You can't cast the target of a tween once it is started");  this.targetClass=targetClass;  return this;}  }
class C{  public synchronized void addChannelToHistory(String channel){  if (!settings.getBoolean("saveChannelHistory")) {    return;  }  channel=prepareChannel(channel);  if (channel == null) {    return;  }  settings.mapPut(HISTORY_SETTING,channel,System.currentTimeMillis());  settings.setSettingChanged("channelHistory");}  }
class C{  public FastShortBuffer append(short[] array){  return append(array,0,array.length);}  }
class C{  public void refreshMaps(){  virtualVolumeWWNMap.clear();  virtualVolumeHLUMap.clear();  for (  String volumeInfoStr : virtualVolumes) {    StringTokenizer tokenizer=new StringTokenizer(volumeInfoStr,",");    String hluStr=tokenizer.nextToken();    Integer volumeHLU=VPlexApiConstants.LUN_UNASSIGNED;    hluStr=hluStr.substring(1);    if (null != hluStr && !VPlexApiConstants.NULL_ATT_VAL.equals(hluStr)) {      try {        volumeHLU=Integer.valueOf(hluStr);      } catch (      NumberFormatException ex) {        s_logger.error("could not parse HLU from '{}', will be set to -1",hluStr);      }    }    String volumeName=tokenizer.nextToken();    String vpdId=tokenizer.nextToken();    int indexColon=vpdId.indexOf(':');    String volumeWWN=vpdId.substring(indexColon + 1).toUpperCase();    virtualVolumeWWNMap.put(volumeName,volumeWWN);    virtualVolumeHLUMap.put(volumeName,volumeHLU);  }}  }
class C{  public Select<Model> and(DataFilterClause clause){  filterCriteria.addClause(clause,DataFilterConjunction.AND);  return this;}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  private void generateDiscovery() throws SAXException {  handler.startElement("",LOCATORS,LOCATORS,EMPTY);  generateLocators();  handler.endElement("",LOCATORS,LOCATORS);}  }
class C{  private void updateLocations(){  log.debug("update checkboxes");  removePropertyChangeLocations();  trackCheckBoxList.clear();  int x=0;  pLocations.removeAll();  String type=(String)typeComboBox.getSelectedItem();  String load=(String)loadComboBox.getSelectedItem();  log.debug("Selected car type : ({}) load ({})",type,load);  if (_location != null && locationManager.getLocationByName(_location.getName()) == null) {    _location=null;  }  List<Location> locations=locationManager.getLocationsByNameList();  for (  Location location : locations) {    if (_location != null && _location != location) {      continue;    }    location.addPropertyChangeListener(this);    JLabel locationName=new JLabel(location.getName());    addItemLeft(pLocations,locationName,0,x++);    List<Track> tracks=location.getTrackByNameList(null);    for (    Track track : tracks) {      track.addPropertyChangeListener(this);      JCheckBox cb=new JCheckBox(track.getName());      cb.setName(track.getId() + "-" + "r");      addCheckBoxAction(cb);      trackCheckBoxList.add(cb);      cb.setEnabled(track.acceptsTypeName(type));      cb.setSelected(track.acceptsLoad(load,type));      addItemLeft(pLocations,cb,1,x++);      if (cb.isEnabled()) {        cb.setToolTipText(MessageFormat.format(Bundle.getMessage("TipTrackCarLoad"),new Object[]{load}));      } else {        cb.setToolTipText(MessageFormat.format(Bundle.getMessage("TipTrackNotThisType"),new Object[]{type}));      }    }    if (location.isStaging()) {      JLabel ships=new JLabel(location.getName() + " (" + Bundle.getMessage("Ships")+ ")");      addItemLeft(pLocations,ships,0,x++);      for (      Track track : tracks) {        JCheckBox cb=new JCheckBox(track.getName());        cb.setName(track.getId() + "-" + "s");        addCheckBoxAction(cb);        trackCheckBoxList.add(cb);        cb.setEnabled(track.acceptsTypeName(type));        cb.setSelected(track.shipsLoad(load,type));        addItemLeft(pLocations,cb,1,x++);        if (cb.isEnabled()) {          cb.setToolTipText(MessageFormat.format(Bundle.getMessage("TipTrackCarShipsLoad"),new Object[]{load}));        } else {          cb.setToolTipText(MessageFormat.format(Bundle.getMessage("TipTrackNotThisType"),new Object[]{type}));        }      }    }  }  pLocations.revalidate();  repaint();}  }
class C{  public static DrawerLayout.LayoutParams processDrawerLayoutParams(DrawerBuilder drawer,DrawerLayout.LayoutParams params){  if (params != null) {    if (drawer.mDrawerGravity != null && (drawer.mDrawerGravity == Gravity.RIGHT || drawer.mDrawerGravity == Gravity.END)) {      params.rightMargin=0;      if (Build.VERSION.SDK_INT >= 17) {        params.setMarginEnd(0);      }      params.leftMargin=drawer.mActivity.getResources().getDimensionPixelSize(R.dimen.material_drawer_margin);      if (Build.VERSION.SDK_INT >= 17) {        params.setMarginEnd(drawer.mActivity.getResources().getDimensionPixelSize(R.dimen.material_drawer_margin));      }    }    if (drawer.mDrawerWidth > -1) {      params.width=drawer.mDrawerWidth;    } else {      params.width=DrawerUIUtils.getOptimalDrawerWidth(drawer.mActivity);    }  }  return params;}  }
class C{  @LargeTest public void testAudioTrackMute() throws Exception {  final String audioFileName=INPUT_FILE_PATH + "AACLC_48KHz_256Kbps_s_1_17.3gp";  final AudioTrack audioTrack=mVideoEditorHelper.createAudio(mVideoEditor,"audioTrack",audioFileName);  assertFalse("Audio Track UnMute",audioTrack.isMuted());  audioTrack.setMute(true);  assertTrue("Audio Track Mute",audioTrack.isMuted());  audioTrack.setMute(false);  assertFalse("Audio Track UnMute",audioTrack.isMuted());}  }
class C{  public static boolean isNullOrEmpty(QualifiedName value){  if (isNull(value)) {    return true;  } else   if ("".equals(value.name)) {    return true;  } else {    return false;  }}  }
class C{  public DefaultRequest itemCode(String value){  setString(ITEM_CODE,value);  return this;}  }
class C{  protected void prepareRequestContextFormat(MediaType formatMediaType) throws Exception {  context=createODataRequestContext(createODataRequest(GET),createODataUri(formatMediaType),entityDataModel);}  }
class C{  public RDFParseException(Throwable t,long lineNo,long columnNo){  super(t.getMessage() + getLocationString(lineNo,columnNo),t);  this.lineNo=lineNo;  this.columnNo=columnNo;}  }
class C{  private int executeHiveQuery(String qry) throws Exception {  ProcessBuilder procBuilder=createProcessBuilder();  List<String> cmd=new ArrayList<>();  procBuilder.command(cmd);  cmd.add(hiveHome + "/bin/hive");  cmd.add("--hiveconf");  cmd.add("hive.rpc.query.plan=true");  cmd.add("--hiveconf");  cmd.add("javax.jdo.option.ConnectionURL=jdbc:derby:" + testWorkDir.getAbsolutePath() + "/metastore_db;"+ "databaseName=metastore_db;create=true");  cmd.add("-e");  cmd.add(qry);  procBuilder.command(cmd);  log().info("Execute: " + procBuilder.command());  return watchProcess(procBuilder.start());}  }
class C{  public String toString(){  return "MImage[ID=" + get_ID() + ",Name="+ getName()+ "]";}  }
class C{  public UnsupportedParser(String unsupported){  super(unsupported);}  }
class C{  public static void deleteDirectoryRecursively(File dir) throws IOException {  File[] files=dir.listFiles();  if (files == null) {    throw new IllegalArgumentException("not a directory: " + dir);  }  for (  File file : files) {    if (file.isDirectory()) {      deleteDirectoryRecursively(file);    }    if (!file.delete()) {      throw new IOException("failed to delete file: " + file);    }  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.STATE_MACHINE_DEFINITION___STATE_1:    return ((InternalEList<?>)getState_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MProductCategoryAcct[");  sb.append(get_ID()).append(",M_Product_Category_ID=").append(getM_Product_Category_ID()).append(",C_AcctSchema_ID=").append(getC_AcctSchema_ID()).append(",CostingLevel=").append(getCostingLevel()).append(",CostingMethod=").append(getCostingMethod()).append("]");  return sb.toString();}  }
class C{  public static String sanitizeName(String name){  return name;}  }
class C{  public void testSingleFile() throws IOException {  int data[]=new int[]{0,1,10,100};  for (int i=0; i < data.length; i++) {    String testfile="_" + i + ".test";    Directory dir=newDirectory();    SegmentInfo si=newSegmentInfo(dir,"_" + i);    createSequenceFile(dir,testfile,(byte)0,data[i],si.getId(),"suffix");    si.setFiles(Collections.singleton(testfile));    si.getCodec().compoundFormat().write(dir,si,IOContext.DEFAULT);    Directory cfs=si.getCodec().compoundFormat().getCompoundReader(dir,si,IOContext.DEFAULT);    IndexInput expected=dir.openInput(testfile,newIOContext(random()));    IndexInput actual=cfs.openInput(testfile,newIOContext(random()));    assertSameStreams(testfile,expected,actual);    assertSameSeekBehavior(testfile,expected,actual);    expected.close();    actual.close();    cfs.close();    dir.close();  }}  }
class C{  public SecretKey engineResolveSecretKey(Element element,String baseURI,StorageResolver storage) throws KeyResolverException {  if (log.isLoggable(java.util.logging.Level.FINE)) {    log.log(java.util.logging.Level.FINE,"Can I resolve " + element.getTagName() + "?");  }  if (secretKey != null && XMLUtils.elementIsInSignatureSpace(element,Constants._TAG_KEYNAME)) {    String name=element.getFirstChild().getNodeValue();    if (keyName.equals(name)) {      return secretKey;    }  }  log.log(java.util.logging.Level.FINE,"I can't");  return null;}  }
class C{  public void test_getInstanceLjava_lang_String() throws Exception {  try {    TrustManagerFactory.getInstance(null);    fail("NoSuchAlgorithmException or NullPointerException should be thrown (algorithm is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      TrustManagerFactory.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  TrustManagerFactory tmf;  for (int i=0; i < validValues.length; i++) {    tmf=TrustManagerFactory.getInstance(validValues[i]);    assertTrue("Not instanceof TrustManagerFactory object",tmf instanceof TrustManagerFactory);    assertEquals("Incorrect algorithm",tmf.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",tmf.getProvider(),mProv);    checkResult(tmf);  }}  }
class C{  private static int scaleCoordinate(float coordinate,float plain,int pixelSize){  return round(coordinate / plain * pixelSize);}  }
class C{  public InlineQueryResultCachedMpeg4GifBuilder caption(String caption){  this.caption=caption;  return this;}  }
class C{  public boolean hasResourceId(){  return hasExtension(ResourceId.class);}  }
class C{  @HLEFunction(nid=0xCA5EDA6F,version=150) public int sceNetAdhocMatchingCreate(int mode,int maxPeers,int port,int bufSize,int helloDelay,int pingDelay,int initCount,int msgDelay,@CanBeNull TPointer callback){  checkInitialized();  if (log.isDebugEnabled()) {    log.debug(String.format("sceNetAdhocMatchingCreate mode=%s",getModeName(mode)));  }  MatchingObject matchingObject=getNetworkAdapter().createMatchingObject();  matchingObject.setMode(mode);  matchingObject.setMaxPeers(maxPeers);  matchingObject.setPort(port);  matchingObject.setBufSize(bufSize);  matchingObject.setHelloDelay(helloDelay);  matchingObject.setPingDelay(pingDelay);  matchingObject.setInitCount(initCount);  matchingObject.setMsgDelay(msgDelay);  matchingObject.setCallback(callback.getAddress());  matchingObject.create();  matchingObjects.put(matchingObject.getId(),matchingObject);  return matchingObject.getId();}  }
class C{  private boolean traverse(Tree tree,NodeRef node,double mu,double k,double lambda){  boolean update=false;  final int nodeNum=node.getNumber();  NodeRef parent=tree.getParent(node);  if (parent != null && updateNode[nodeNum]) {    double time0=nodeTimes[node.getNumber()];    double branchTime=tree.getNodeHeight(parent) - tree.getNodeHeight(node);    double time1=time0 + branchTime;    for (int i=0; i < categoryCount; i++) {      double branchLength=rateIntegral(time1,mu,k * gammaCategoryRates[i],lambda);      if (time0 > 0.0) {        branchLength-=rateIntegral(time0,mu,k * gammaCategoryRates[i],lambda);      }      siteModel.getTransitionProbabilities(branchLength,probabilities);      likelihoodCore.setNodeMatrix(nodeNum,i,probabilities);    }    update=true;  }  if (!tree.isExternal(node)) {    NodeRef child1=tree.getChild(node,0);    boolean update1=traverse(tree,child1,mu,k,lambda);    NodeRef child2=tree.getChild(node,1);    boolean update2=traverse(tree,child2,mu,k,lambda);    if (update1 || update2) {      int childNum1=child1.getNumber();      int childNum2=child2.getNumber();      likelihoodCore.calculatePartials(childNum1,childNum2,nodeNum);      if (parent == null) {        double[] frequencies=frequencyModel.getFrequencies();        double[] proportions=siteModel.getCategoryProportions();        likelihoodCore.integratePartials(nodeNum,proportions,rootPartials);        likelihoodCore.calculateLogLikelihoods(rootPartials,frequencies,patternLogLikelihoods);      }      update=true;    }  }  return update;}  }
class C{  public void onTaskSubmit(HadoopTaskInfo info,long ts){  evts.add(new T2<>(eventName(info,"submit"),ts));}  }
class C{  public final void handleSelection(final OptionsTreeNode node){  _paneManager.show(node);  if (_constructor.isOptionsVisible()) {    ApplicationSettings.OPTIONS_LAST_SELECTED_KEY.setValue(node.getTitleKey());  }}  }
class C{  private void evictAll(IgniteCache<Integer,CacheValue> cache) throws Exception {  resetCounters();  assertEquals(ENTRY_CNT,cache.size());  assertEquals(0,cache.localSize(CachePeekMode.OFFHEAP));  for (int i=0; i < ENTRY_CNT; i++) {    cache.localEvict(Collections.singleton(i));    assertEquals(ENTRY_CNT - i - 1,cache.localSize(CachePeekMode.ONHEAP));    assertEquals(i + 1,cache.localSize(CachePeekMode.OFFHEAP));  }  assertEquals(0,cache.localSize(CachePeekMode.ONHEAP));  assertEquals(ENTRY_CNT,cache.localSize(CachePeekMode.OFFHEAP));  for (int i=0; i < ENTRY_CNT; i++)   assertNull(cache.localPeek(i,CachePeekMode.ONHEAP));  assertEquals(ENTRY_CNT,swapCnt.get());  assertEquals(0,unswapCnt.get());}  }
class C{  public static String toString(InputStream is,Charset charset,long timeout) throws IOException {  return toString(getReader(is,charset),timeout);}  }
class C{  public TableModelEvent(TableModel source){  this(source,0,Integer.MAX_VALUE,ALL_COLUMNS,UPDATE);}  }
class C{  private void cmd_newEdit(){  boolean rw=cbNewEdit.isSelected();  log.config("R/W=" + rw + " "+ m_masi);  fieldLotString.setEditable(rw && m_masi.getM_Lot_ID() == 0);  if (fieldLot != null)   fieldLot.setReadWrite(rw);  bLot.setReadWrite(rw);  fieldSerNo.setReadWrite(rw);  bSerNo.setReadWrite(rw);  fieldGuaranteeDate.setReadWrite(rw);  for (int i=0; i < m_editors.size(); i++) {    CEditor editor=(CEditor)m_editors.get(i);    editor.setReadWrite(rw);  }}  }
class C{  @Override public void clear(){  this._map.clear();}  }
class C{  public boolean postData(InputStream data,Integer length,OutputStream output,String type,URL url){  if (mockMode)   return true;  boolean success=true;  if (type == null)   type=DEFAULT_CONTENT_TYPE;  HttpURLConnection urlc=null;  try {    try {      urlc=(HttpURLConnection)url.openConnection();      try {        urlc.setRequestMethod("POST");      } catch (      ProtocolException e) {        fatal("Shouldn't happen: HttpURLConnection doesn't support POST??" + e);      }      urlc.setDoOutput(true);      urlc.setDoInput(true);      urlc.setUseCaches(false);      urlc.setAllowUserInteraction(false);      urlc.setRequestProperty("Content-type",type);      if (url.getUserInfo() != null) {        String encoding=DatatypeConverter.printBase64Binary(url.getUserInfo().getBytes(StandardCharsets.US_ASCII));        urlc.setRequestProperty("Authorization","Basic " + encoding);      }      if (null != length)       urlc.setFixedLengthStreamingMode(length);      urlc.connect();    } catch (    IOException e) {      fatal("Connection error (is Solr running at " + solrUrl + " ?): "+ e);      success=false;    }    try (final OutputStream out=urlc.getOutputStream()){      pipe(data,out);    } catch (    IOException e) {      fatal("IOException while posting data: " + e);      success=false;    }    try {      success&=checkResponseCode(urlc);      try (final InputStream in=urlc.getInputStream()){        pipe(in,output);      }     } catch (    IOException e) {      warn("IOException while reading response: " + e);      success=false;    }  }  finally {    if (urlc != null)     urlc.disconnect();  }  return success;}  }
class C{  public static void addURL(URL u) throws IOException {  URLClassLoader sysLoader=(URLClassLoader)ClassLoader.getSystemClassLoader();  URL urls[]=sysLoader.getURLs();  for (int i=0; i < urls.length; i++) {    if (urls[i].toString().equalsIgnoreCase(u.toString())) {      System.err.println("URL " + u + " is already in the CLASSPATH");      return;    }  }  Class sysclass=URLClassLoader.class;  try {    Method method=sysclass.getDeclaredMethod("addURL",parameters);    method.setAccessible(true);    method.invoke(sysLoader,new Object[]{u});  } catch (  Throwable t) {    t.printStackTrace();    throw new IOException("Error, could not add URL to system classloader");  }}  }
class C{  @OnMessage public void onMessage(@PathParam("clientId") String clientId,String applicationConfig){  LOGGER.config(null);  if (applicationConfig != null && !applicationConfig.isEmpty()) {    clients.register(fromJSON(applicationConfig));  } else {    clients.deRegister(clientId);  }}  }
class C{  @Override public void addLast(E element){  add(size(),element);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void deleteReviewInt(ProductReview review,boolean mplMarketplaceOwnerDelete,String reason) throws OperationNotPermittedException, ObjectNotFoundException {  deleteReviewInt(review,mplMarketplaceOwnerDelete,reason,true);}  }
class C{  protected void paint(SeaGlassContext context,Graphics g){  super.paint(g,context.getComponent());}  }
class C{  private static void runOverlayListenerTest(TourGuide[] tourGuides,int ActualSequence){}  }
class C{  public int positionOfNext(){  return textPos + startSourcePos;}  }
class C{  public FishingArea(){  super();}  }
class C{  public boolean isTableDirty(){  return isDirty;}  }
class C{  public final void toString(StringBuffer sb,String padding){  TreeNode treeNode=getTreeNode();  if (treeNode instanceof SyntaxTreeNode && System.getProperty(SemanticNode.class.getName() + ".showPlainFormulae") != null) {    SyntaxTreeNode stn=(SyntaxTreeNode)treeNode;    sb.append(stn.getHumanReadableImage());  } else {    sb.append(this.getLocation());  }}  }
class C{  private int selectedItemCount(){  ListView lv=getListView();  int count=0;  SparseBooleanArray sba=lv.getCheckedItemPositions();  for (int i=0; i < lv.getCount(); i++) {    if (sba.get(i,false)) {      count++;    }  }  return count;}  }
class C{  @SuppressWarnings("all") static Handler remove(Handler h,Label start,Label end){  if (h == null) {    return null;  } else {    h.next=remove(h.next,start,end);  }  int hstart=h.start.position;  int hend=h.end.position;  int s=start.position;  int e=end == null ? Integer.MAX_VALUE : end.position;  if (s < hend && e > hstart) {    if (s <= hstart) {      if (e >= hend) {        h=h.next;      } else {        h.start=end;      }    } else     if (e >= hend) {      h.end=start;    } else {      Handler g=new Handler();      g.start=end;      g.end=h.end;      g.handler=h.handler;      g.desc=h.desc;      g.type=h.type;      g.next=h.next;      h.end=start;      h.next=g;    }  }  return h;}  }
class C{  private Set<UnitCalculationDetail> cloneUnitCalculationDetails(){  final Set<UnitCalculationDetail> unitCalculationDetailClones=new HashSet<UnitCalculationDetail>();  for (  final UnitCalculationDetail unitCalcDetail : getUnitCalculationDetails())   unitCalculationDetailClones.add(new UnitCalculationDetail(unitCalcDetail));  return unitCalculationDetailClones;}  }
class C{  private void put(final Item i){  if (index + typeCount > threshold) {    int ll=items.length;    int nl=ll * 2 + 1;    Item[] newItems=new Item[nl];    for (int l=ll - 1; l >= 0; --l) {      Item j=items[l];      while (j != null) {        int index=j.hashCode % newItems.length;        Item k=j.next;        j.next=newItems[index];        newItems[index]=j;        j=k;      }    }    items=newItems;    threshold=(int)(nl * 0.75);  }  int index=i.hashCode % items.length;  i.next=items[index];  items[index]=i;}  }
class C{  public static boolean isNumericType(Class type){  return (type == byte.class || type == short.class || type == int.class || type == long.class || type == double.class || type == float.class);}  }
class C{  public void testmodInverseException(){  byte aBytes[]={1,2,3,4,5,6,7};  byte mBytes[]={1,2,3};  int aSign=1;  int mSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger modulus=new BigInteger(mSign,mBytes);  try {    aNumber.modInverse(modulus);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  @Override public Tree<String> extractBestMaxRuleParse2(int start,int end,int state,List<String> sentence){  List<Tree<String>> children=new ArrayList<Tree<String>>();  String stateStr=(String)tagNumberer.object(state);  if (stateStr.endsWith("^g"))   stateStr=stateStr.substring(0,stateStr.length() - 2);  boolean posLevel=(end - start == 1);  if (posLevel) {    if (grammars[0].isGrammarTag(state)) {      List<Tree<String>> childs=new ArrayList<Tree<String>>();      childs.add(new Tree<String>(sentence.get(start)));      String stateStr2=(String)tagNumberer.object(maxcChild[start][end][state]);      children.add(new Tree<String>(stateStr2,childs));    } else     children.add(new Tree<String>(sentence.get(start)));  } else {    int split=maxcSplit[start][end][state];    if (split == -1) {      System.err.println("Warning: no symbol can generate the span from " + start + " to "+ end+ ".");      System.err.println("The score is " + maxcScore[start][end][state] + " and the state is supposed to be "+ stateStr);      System.err.println("The insideScores are " + Arrays.toString(iScore[start][end][state]) + " and the outsideScores are "+ Arrays.toString(oScore[start][end][state]));      System.err.println("The maxcScore is " + maxcScore[start][end][state]);      return new Tree<String>("ROOT");    }    int lState=maxcLeftChild[start][end][state];    int rState=maxcRightChild[start][end][state];    Tree<String> leftChildTree=extractBestMaxRuleParse1(start,split,lState,sentence);    Tree<String> rightChildTree=extractBestMaxRuleParse1(split,end,rState,sentence);    children.add(leftChildTree);    children.add(rightChildTree);  }  return new Tree<String>(stateStr,children);}  }
class C{  @Deprecated public void onFailure(int statusCode,Throwable error,String content){  onFailure(error,content);}  }
class C{  public static <T>List<T> makeList(T... ts){  List<T> l=new ArrayList<T>();  for (  T t : ts) {    l.add(t);  }  return l;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Integer(stack.getUIMgrSafe().getVideoFrame().getDVDChapter());}  }
class C{  @Override public boolean eventGeneratable(String eventName){  if (m_listenee == null) {    return false;  }  if (m_listenee instanceof EventConstraints) {    if (!((EventConstraints)m_listenee).eventGeneratable("dataSet")) {      return false;    }  }  return true;}  }
class C{  private static int compressPackBits(byte[] data,int numRows,int bytesPerRow,byte[] compData){  int inOffset=0;  int outOffset=0;  for (int i=0; i < numRows; i++) {    outOffset=packBits(data,inOffset,bytesPerRow,compData,outOffset);    inOffset+=bytesPerRow;  }  return outOffset;}  }
class C{  public static final boolean isIplDcs51IdentityReportMessage(LocoNetMessage m){  return isIplSpecificIdentityReportMessage(m,LnConstants.RE_IPL_MFR_DIGITRAX,LnConstants.RE_IPL_DIGITRAX_HOST_DCS51);}  }
class C{  @Override public BindRequest connectAndOutbind(String host,int port,String systemId,String password) throws IOException {  return connectAndOutbind(host,port,new OutbindParameter(systemId,password),60000);}  }
class C{  private Object readResolve(){  return ToStringStyle.MULTI_LINE_STYLE;}  }
class C{  void flushPackage(OutputStream out,int nextCount) throws IOException {  int nfiles=pkg.files.size();  if (!keepFileOrder) {    if (verbose > 1)     Utils.log.fine("Reordering files.");    boolean stripDirectories=true;    pkg.reorderFiles(keepClassOrder,stripDirectories);  } else {    assert (pkg.files.containsAll(pkg.getClassStubs()));    List<Package.File> res=pkg.files;    assert ((res=new ArrayList<>(pkg.files)).retainAll(pkg.getClassStubs()) || true);    assert (res.equals(pkg.getClassStubs()));  }  pkg.trimStubs();  if (props.getBoolean(Utils.COM_PREFIX + "strip.debug"))   pkg.stripAttributeKind("Debug");  if (props.getBoolean(Utils.COM_PREFIX + "strip.compile"))   pkg.stripAttributeKind("Compile");  if (props.getBoolean(Utils.COM_PREFIX + "strip.constants"))   pkg.stripAttributeKind("Constant");  if (props.getBoolean(Utils.COM_PREFIX + "strip.exceptions"))   pkg.stripAttributeKind("Exceptions");  if (props.getBoolean(Utils.COM_PREFIX + "strip.innerclasses"))   pkg.stripAttributeKind("InnerClasses");  PackageWriter pw=new PackageWriter(pkg,out);  pw.archiveNextCount=nextCount;  pw.write();  out.flush();  if (verbose > 0) {    long outSize=pw.archiveSize0 + pw.archiveSize1;    totalOutputSize+=outSize;    long inSize=segmentSize;    Utils.log.info("Transmitted " + nfiles + " files of "+ inSize+ " input bytes in a segment of "+ outSize+ " bytes");  }}  }
class C{  private List<File> uncompress(final InputStream inputStream,CountingInputStream countingInputStream,final File outputDir,long finalSize,Consumer<ProgressEntity> stateCallback){  final List<File> uncompressedFiles=new LinkedList<>();  try (ArchiveInputStream debInputStream=new ArchiveStreamFactory().createArchiveInputStream("tar",inputStream)){    TarArchiveEntry entry;    while ((entry=(TarArchiveEntry)debInputStream.getNextEntry()) != null) {      final File outputFile=new File(outputDir,entry.getName());      if (entry.isDirectory()) {        LOGGER.info(String.format("Attempting to write output directory %s.",outputFile.getAbsolutePath()));        if (!outputFile.exists()) {          LOGGER.info(String.format("Attempting to createPrefix output directory %s.",outputFile.getAbsolutePath()));          Files.createDirectories(outputFile.toPath());        }      } else {        LOGGER.info(String.format("Creating output file %s (%s).",outputFile.getAbsolutePath(),entry.getMode()));        if (entry.isSymbolicLink()) {          Files.createSymbolicLink(Paths.get(outputFile.getAbsolutePath()),Paths.get(entry.getLinkName()));        } else {          try (final OutputStream outputFileStream=new FileOutputStream(outputFile)){            IOUtils.copy(debInputStream,outputFileStream);            Files.setPosixFilePermissions(Paths.get(outputFile.getPath()),com.playonlinux.core.utils.Files.octToPosixFilePermission(entry.getMode()));          }         }      }      uncompressedFiles.add(outputFile);      stateCallback.accept(new ProgressEntity.Builder().withPercent((double)countingInputStream.getCount() / (double)finalSize * (double)100).withProgressText("Extracting " + outputFile.getName()).build());    }    return uncompressedFiles;  } catch (  IOException|org.apache.commons.compress.archivers.ArchiveException e) {    throw new ArchiveException("Unable to extract the file",e);  }}  }
class C{  public List<GenericEntry> retrieveAllOrganizationUnits(String customerId) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return retrieveAllPages(new URL("https://apps-apis.google.com/a/feeds/orgunit/2.0/" + customerId + "?get=all"));}  }
class C{  private Node<Key> erase(int i){  Node<Key> reference=nodes[i];  Node<Key> x=head;  Node<Key> previous=null;  while (x != reference) {    previous=x;    x=x.sibling;  }  previous.sibling=x.sibling;  if (x == head)   head=head.sibling;  nodes[i]=null;  return x;}  }
class C{  void startSequenceDelay(){  log.debug("startSequenceDelay");  int delay=Integer.parseInt(mDelayField[mNextSequenceElement].getText());  mNextSequenceElement++;  restartTimer(delay);}  }
class C{  public synchronized void blocker(boolean tf){  if (tf) {    try {      wait();    } catch (    InterruptedException e) {    }  } else {    notifyAll();  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.GAML_DEFINITION__NAME:    setName(NAME_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public boolean isPinchToZoomEnabled(){  return pinchToZoom;}  }
class C{  public ActionPopupButton(final ActionGroup action,ActionManager actionManager,KeyBindingAgent keyBindingAgent,final PresentationFactory presentationFactory,Provider<PerspectiveManager> managerProvider,ToolbarResources toolbarResources){  this.action=action;  this.actionManager=actionManager;  this.keyBindingAgent=keyBindingAgent;  this.presentationFactory=presentationFactory;  this.managerProvider=managerProvider;  this.toolbarResources=toolbarResources;  presentation=presentationFactory.getPresentation(action);  panel=new ButtonPanel();  initWidget(panel);  panel.setStyleName(toolbarResources.toolbar().popupButtonPanel());  renderImage();  setEnabled(presentation.isEnabled());  setVisible(presentation.isVisible());  if (presentation.getDescription() != null) {    tooltip=Tooltip.create((elemental.dom.Element)panel.getElement(),PositionController.VerticalAlign.BOTTOM,PositionController.HorizontalAlign.MIDDLE,presentation.getDescription());  }  this.ensureDebugId("PopupButton/" + action.getTemplatePresentation().getText());}  }
class C{  public boolean checkEpochEqual(){  int acceptedEpoch=readEpoch(new File(zkDir,ZK_ACCEPTED_EPOCH));  int currentEpoch=readEpoch(new File(zkDir,ZK_CURRENT_EPOCH));  return (acceptedEpoch == currentEpoch);}  }
class C{  public static QRResult decode(String url,MultiFormatReader reader){  try {    BitmapFactory.Options options=new BitmapFactory.Options();    options.inJustDecodeBounds=true;    BitmapFactory.decodeFile(url,options);    if (options.outWidth >= 1920) {      options.inSampleSize=6;    } else     if (options.outWidth >= 1280) {      options.inSampleSize=5;    } else     if (options.outWidth >= 1024) {      options.inSampleSize=4;    } else     if (options.outWidth >= 960) {      options.inSampleSize=3;    }    options.inJustDecodeBounds=false;    Bitmap bitmap=BitmapFactory.decodeFile(url);    if (bitmap == null)     return null;    int width=bitmap.getWidth(), height=bitmap.getHeight();    int[] pixels=new int[width * height];    bitmap.getPixels(pixels,0,width,0,0,width,height);    Result result=decode(new RGBLuminanceSource(width,height,pixels),reader);    if (result != null) {      return new QRResult(bitmap,result);    }    bitmap.recycle();    return null;  } catch (  Exception e) {    Log.e("decode exception",e.toString());    return null;  }}  }
class C{  public LegendItem(AttributedString label,String description,String toolTipText,String urlText,boolean shapeVisible,Shape shape,boolean shapeFilled,Paint fillPaint,boolean shapeOutlineVisible,Paint outlinePaint,Stroke outlineStroke,boolean lineVisible,Shape line,Stroke lineStroke,Paint linePaint){  ParamChecks.nullNotPermitted(label,"label");  ParamChecks.nullNotPermitted(fillPaint,"fillPaint");  ParamChecks.nullNotPermitted(lineStroke,"lineStroke");  ParamChecks.nullNotPermitted(line,"line");  ParamChecks.nullNotPermitted(linePaint,"linePaint");  ParamChecks.nullNotPermitted(outlinePaint,"outlinePaint");  ParamChecks.nullNotPermitted(outlineStroke,"outlineStroke");  this.label=characterIteratorToString(label.getIterator());  this.attributedLabel=label;  this.description=description;  this.shapeVisible=shapeVisible;  this.shape=shape;  this.shapeFilled=shapeFilled;  this.fillPaint=fillPaint;  this.fillPaintTransformer=new StandardGradientPaintTransformer();  this.shapeOutlineVisible=shapeOutlineVisible;  this.outlinePaint=outlinePaint;  this.outlineStroke=outlineStroke;  this.lineVisible=lineVisible;  this.line=line;  this.lineStroke=lineStroke;  this.linePaint=linePaint;  this.toolTipText=toolTipText;  this.urlText=urlText;}  }
class C{  @LargeTest public void testPerformanceAddRemoveImageItem640x480() throws Exception {  final String imageItemFileName=INPUT_FILE_PATH + "IMG_640x480.jpg";  final int imageItemDuration=0;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final String[] loggingInfo=new String[3];  int timeTaken=0;  final MediaImageItem[] mediaImageItem=new MediaImageItem[NUM_OF_ITERATIONS];  long beginTime=SystemClock.uptimeMillis();  createImageItems(mediaImageItem,imageItemFileName,renderingMode,imageItemDuration);  timeTaken=calculateTimeTaken(beginTime,NUM_OF_ITERATIONS);  loggingInfo[0]="Time taken to Create  Media Image Item (640x480) :" + timeTaken;  beginTime=SystemClock.uptimeMillis();  addImageItems(mediaImageItem);  timeTaken=calculateTimeTaken(beginTime,NUM_OF_ITERATIONS);  loggingInfo[1]="\n\tTime taken to add  Media Image Item (640x480) :" + timeTaken;  beginTime=SystemClock.uptimeMillis();  removeImageItems(mediaImageItem);  timeTaken=calculateTimeTaken(beginTime,NUM_OF_ITERATIONS);  loggingInfo[2]="\n\tTime taken to remove  Media Image Item (640x480) :" + timeTaken;  writeTimingInfo("testPerformanceAddRemoveImageItem640x480 (in mSec)",loggingInfo);}  }
class C{  public AtomicReference(){}  }
class C{  @Nullable static HighlightInfo checkAbstractInstantiation(@NotNull PsiJavaCodeReferenceElement ref){  PsiElement parent=ref.getParent();  HighlightInfo highlightInfo=null;  if (parent instanceof PsiAnonymousClass && parent.getParent() instanceof PsiNewExpression && !PsiUtilCore.hasErrorElementChild(parent.getParent())) {    PsiAnonymousClass aClass=(PsiAnonymousClass)parent;    highlightInfo=checkClassWithAbstractMethods(aClass,ref.getTextRange());  }  return highlightInfo;}  }
class C{  public PickledGraphite(String hostname,int port,SocketFactory socketFactory,int batchSize){  this(hostname,port,socketFactory,UTF_8,batchSize);}  }
class C{  private void removeRange(int fromIndex,int toIndex){  Object[] elements;  Object[] newElements;  do {    elements=array;    int len=elements.length;    if (fromIndex < 0 || toIndex > len || toIndex < fromIndex) {      throw new IndexOutOfBoundsException();    }    int newlen=len - (toIndex - fromIndex);    int numMoved=len - toIndex;    if (numMoved == 0) {      newElements=Arrays.copyOf(elements,newlen,Object[].class);    } else {      newElements=new Object[newlen];      System.arraycopy(elements,0,newElements,0,fromIndex);      System.arraycopy(elements,toIndex,newElements,fromIndex,numMoved);    }  } while (!replaceArray(elements,newElements));}  }
class C{  public void addSelectionListener(final SelectionListener listener){  checkWidget();  this.selectionListeners.add(listener);}  }
class C{  public CNode(int j,int inX[],int paY[]){  this.j=j;  this.inX=inX;  this.paY=paY;}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public AbstractValidatorImplementation(final CharSequence errorMessage,final boolean result){  super(errorMessage);  this.result=result;}  }
class C{  private void testAvailabilityChange(Member.Type type) throws Throwable {  List<CopycatServer> servers=createServers(3);  CopycatServer server=servers.get(0);  server.cluster().onJoin(null);  Member member=nextMember(type);  CopycatServer joiner=createServer(member);  joiner.join(members.stream().map(null).collect(Collectors.toList())).thenRun(null);  await(10000);  joiner.shutdown().thenRun(null);  await(10000,2);}  }
class C{  public void resetChildrenOnKeyListeners(){  int childCount=mChildren.getChildCount();  for (int j=0; j < childCount; ++j) {    mChildren.getChildAt(j).setOnKeyListener(null);  }}  }
class C{  private static Website mergePermissionInfoForTopLevelOrigin(WebsiteAddress address,List<Set<Website>> websiteSets){  String origin=address.getOrigin();  String host=Uri.parse(origin).getHost();  Website merged=new Website(address);  for (  Set<Website> websiteSet : websiteSets) {    for (    Website other : websiteSet) {      if (merged.getCookieInfo() == null && other.getCookieInfo() != null && permissionInfoIsForTopLevelOrigin(other.getCookieInfo(),origin)) {        merged.setCookieInfo(other.getCookieInfo());      }      if (merged.getFullscreenInfo() == null && other.getFullscreenInfo() != null && permissionInfoIsForTopLevelOrigin(other.getFullscreenInfo(),origin)) {        merged.setFullscreenInfo(other.getFullscreenInfo());      }      if (merged.getGeolocationInfo() == null && other.getGeolocationInfo() != null && permissionInfoIsForTopLevelOrigin(other.getGeolocationInfo(),origin)) {        merged.setGeolocationInfo(other.getGeolocationInfo());      }      if (merged.getMidiInfo() == null && other.getMidiInfo() != null && permissionInfoIsForTopLevelOrigin(other.getMidiInfo(),origin)) {        merged.setMidiInfo(other.getMidiInfo());      }      if (merged.getProtectedMediaIdentifierInfo() == null && other.getProtectedMediaIdentifierInfo() != null && permissionInfoIsForTopLevelOrigin(other.getProtectedMediaIdentifierInfo(),origin)) {        merged.setProtectedMediaIdentifierInfo(other.getProtectedMediaIdentifierInfo());      }      if (merged.getPushNotificationInfo() == null && other.getPushNotificationInfo() != null && permissionInfoIsForTopLevelOrigin(other.getPushNotificationInfo(),origin)) {        merged.setPushNotificationInfo(other.getPushNotificationInfo());      }      if (merged.getCameraInfo() == null && other.getCameraInfo() != null) {        if (origin.equals(other.getCameraInfo().getOrigin()) && (origin.equals(other.getCameraInfo().getEmbedderSafe()) || "*".equals(other.getCameraInfo().getEmbedderSafe()))) {          merged.setCameraInfo(other.getCameraInfo());        }      }      if (merged.getMicrophoneInfo() == null && other.getMicrophoneInfo() != null) {        if (origin.equals(other.getMicrophoneInfo().getOrigin()) && (origin.equals(other.getMicrophoneInfo().getEmbedderSafe()) || "*".equals(other.getMicrophoneInfo().getEmbedderSafe()))) {          merged.setMicrophoneInfo(other.getMicrophoneInfo());        }      }      if (merged.getLocalStorageInfo() == null && other.getLocalStorageInfo() != null && origin.equals(other.getLocalStorageInfo().getOrigin())) {        merged.setLocalStorageInfo(other.getLocalStorageInfo());      }      for (      StorageInfo storageInfo : other.getStorageInfo()) {        if (host.equals(storageInfo.getHost())) {          merged.addStorageInfo(storageInfo);        }      }    }  }  return merged;}  }
class C{  public DeploymentResourceAdapter(String name,Class<?> rsrcCls,ClassLoader clsLdr){  assert name != null;  assert rsrcCls != null;  assert clsLdr != null;  this.name=name;  this.rsrcCls=rsrcCls;  this.clsLdr=clsLdr;}  }
class C{  public int deleteBack(){  int oldBack=getBack();  size=size - 1;  return oldBack;}  }
class C{  public T caseTInterface(TInterface object){  return null;}  }
class C{  @Override public String globalInfo(){  return "The Classifier Chains (CC) method.\n" + "Multi-target version of CC (directly applicable, but the posterior distribution is multidimensional (may help ensemble performance)).";}  }
class C{  public Void doInBackground(){  try {    this.grandtotal=tradingdays.getTradingdays().size();    this.startTime=System.currentTimeMillis();    int totalComplete=0;    getProgressBar().setMaximum(100);    setProgress(0);    String message=null;    this.toStrategy=this.tradeManagerModel.findStrategyById(this.toStrategy.getIdStrategy());    Collections.sort(tradingdays.getTradingdays(),Tradingday.DATE_ORDER_ASC);    for (    Tradingday tradingday : tradingdays.getTradingdays()) {      this.tradeManagerModel.reassignStrategy(this.fromStrategy,this.toStrategy,tradingday);      totalComplete++;      int percent=(int)(((double)(totalComplete) / this.grandtotal) * 100d);      setProgress(percent);    }    setProgress(100);    message="Complete re-assign of Strategies total days processed: " + totalComplete + " in : "+ ((System.currentTimeMillis() - this.startTime) / 1000)+ " Seconds.";    publish(message);  } catch (  Exception ex) {    setErrorMessage("Error reassigning strategy.",ex.getMessage(),ex);  }  return null;}  }
class C{  public static List<TopTreebankNode> parseDocument(String parse,int textOffset,String text){  List<TopTreebankNode> returnValues=new ArrayList<TopTreebankNode>();  String[] sentenceParses=splitSentences(parse);  for (  String sentenceParse : sentenceParses) {    TopTreebankNode topNode=parse(sentenceParse,text,textOffset);    textOffset=topNode.getTextEnd();    returnValues.add(topNode);  }  return returnValues;}  }
class C{  public static boolean available(int port){  ServerSocket ss=null;  DatagramSocket ds=null;  try {    ss=new ServerSocket(port);    ss.setReuseAddress(true);    ds=new DatagramSocket(port);    ds.setReuseAddress(true);    return true;  } catch (  IOException e) {    return false;  } finally {    if (ds != null) {      ds.close();    }    if (ss != null) {      try {        ss.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public static IPath createFrancaFDEPLFile(IResourceSetProvider resourceSetProvider,Map<String,Object> parameters){  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();  IResource containerResource=root.findMember(new Path((String)parameters.get("containerName")));  ResourceSet resourceSet=resourceSetProvider.get(containerResource.getProject());  IPath filePath=containerResource.getFullPath().append(((String)parameters.get("packageName")).replaceAll("\\.","/")).append((String)parameters.get("fileName"));  String fullPath=filePath.toString();  URI fileURI=URI.createPlatformResourceURI(fullPath,false);  Resource resource=resourceSet.createResource(fileURI);  FDModel model=FDeployFactory.eINSTANCE.createFDModel();  String specificationName=(String)parameters.get("specificationName");  FDSpecification specification=null;  if (specificationName != null && !specificationName.isEmpty()) {    specification=FDeployFactory.eINSTANCE.createFDSpecification();    specification.setName(specificationName);    model.getSpecifications().add(specification);  }  if (specification == null) {    specification=(FDSpecification)parameters.get("specification");    Import _import=FDeployFactory.eINSTANCE.createImport();    _import.setImportURI(FrancaIDLUtils.relativeURIString(fileURI,specification.eResource().getURI()));    model.getImports().add(_import);  }  FInterface fInterface=(FInterface)parameters.get("interface");  String providerName=(String)parameters.get("providerName");  FTypeCollection typeCollection=(FTypeCollection)parameters.get("typeCollection");  if (fInterface != null) {    FDInterface fDInterface=FDeployFactory.eINSTANCE.createFDInterface();    fDInterface.setTarget(fInterface);    fDInterface.setSpec(specification);    model.getDeployments().add(fDInterface);    Import _import=FDeployFactory.eINSTANCE.createImport();    _import.setImportURI(FrancaIDLUtils.relativeURIString(fileURI,fInterface.eResource().getURI()));    model.getImports().add(_import);  }  if (typeCollection != null) {    FDTypes fDTypes=FDeployFactory.eINSTANCE.createFDTypes();    fDTypes.setTarget(typeCollection);    fDTypes.setSpec(specification);    model.getDeployments().add(fDTypes);    Import _import=FDeployFactory.eINSTANCE.createImport();    _import.setImportURI(FrancaIDLUtils.relativeURIString(fileURI,typeCollection.eResource().getURI()));    model.getImports().add(_import);  }  if (providerName != null && !providerName.isEmpty()) {    FDProvider provider=FDeployFactory.eINSTANCE.createFDProvider();    provider.setName(providerName);    provider.setSpec(specification);    model.getDeployments().add(provider);  }  resource.getContents().add(model);  try {    resource.save(Collections.EMPTY_MAP);    containerResource.getProject().refreshLocal(IResource.DEPTH_INFINITE,null);    return filePath;  } catch (  IOException e) {    e.printStackTrace();    return null;  }catch (  CoreException e) {    e.printStackTrace();    return null;  }}  }
class C{  public boolean contains(Object o){  return objectToInts.containsKey(o);}  }
class C{  public synchronized void shutdown(){  if (this.state == ActiveState.SHUTDOWN) {    log(this,"Already shutdown",Level.INFO);    return;  }  this.state=ActiveState.SHUTDOWN;  log(this,"Shutting down",Level.INFO);  try {    awareness().shutdown();    mind().shutdown();    mood().shutdown();    avatar().shutdown();    memory().shutdown();  } catch (  Exception exception) {    log(this,exception);  }  getLogListeners().clear();}  }
class C{  public final boolean sendMessage(Message msg){  return mExec.sendMessage(msg);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case EipPackage.INVOCABLE_ENDPOINT__TO_CHANNELS:    return ((InternalEList<?>)getToChannels()).basicRemove(otherEnd,msgs);case EipPackage.INVOCABLE_ENDPOINT__FROM_CHANNELS:  return ((InternalEList<?>)getFromChannels()).basicRemove(otherEnd,msgs);case EipPackage.INVOCABLE_ENDPOINT__OWNED_SERVICE_INVOCATIONS:return ((InternalEList<?>)getOwnedServiceInvocations()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static final Parameter base(){  return new Parameter(P_GEP);}  }
class C{  public EpsilonBoxDominanceArchive(EpsilonBoxDominanceComparator comparator){  super(comparator);}  }
class C{  public void remove(S item){  ordered.remove(item);  unordered.remove(item);  Collections.sort(ordered,comparator);  list.clear();  list.addAll(ordered);  list.addAll(unordered);}  }
class C{  private void handleDoubleClick(final MouseEvent event){  final IViewSelectionTreeNode selectedNode=(IViewSelectionTreeNode)TreeHelpers.getNodeAt(this,event.getX(),event.getY());  if (selectedNode == null) {    return;  }  selectedNode.doubleClicked();}  }
class C{  private String readInputUntil(char... symbols){  StringBuilder strBuf=new StringBuilder();  while (!accept(symbols)) {    strBuf.append((char)data[index]);    skip();  }  return strBuf.toString();}  }
class C{  private static int hash(Object x,int length){  int h=System.identityHashCode(x);  return ((h << 1) - (h << 8)) & (length - 1);}  }
class C{  public static boolean registerCrowbar(ItemStack aTool){  return registerTool(aTool,sCrowbarList);}  }
class C{  public void put(ExprNode exprNode,FilterSpecParam param){  exprNodes.put(exprNode,param);  if (param != null) {    specParams.put(param,exprNode);  }}  }
class C{  public int prestartAllCoreThreads(){  int n=0;  while (addWorker(null,true))   ++n;  return n;}  }
class C{  public Object clone(){  try {    NameConstraintsExtension newNCE=(NameConstraintsExtension)super.clone();    if (permitted != null) {      newNCE.permitted=(GeneralSubtrees)permitted.clone();    }    if (excluded != null) {      newNCE.excluded=(GeneralSubtrees)excluded.clone();    }    return newNCE;  } catch (  CloneNotSupportedException cnsee) {    throw new RuntimeException("CloneNotSupportedException while " + "cloning NameConstraintsException. This should never happen.");  }}  }
class C{  public Line3D toLine3DWithPointAtDistance(float dist){  return new Line3D(this,getPointAtDistance(dist));}  }
class C{  public Database open() throws IOException {  return DatabaseImpl.open(_mdbFile,_readOnly,_channel,_autoSync,_charset,_timeZone,_codecProvider);}  }
class C{  public MethExecutorResult executeMethodOnObject(Object obj,String methodName){  String name=obj.getClass().getName() + "." + methodName+ " on object: "+ obj;  long start=start(name);  MethExecutorResult result=MethExecutor.executeObject(obj,methodName);  logDelta(name,start,result);  return result;}  }
class C{  public Boolean isWSPullPointSupport(){  return wsPullPointSupport;}  }
class C{  boolean persistValue(int id){  int bit=1 << id;  return (persistValue & bit) != 0;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == AnnotableElement.class) {switch (baseOperationID) {case N4JSPackage.ANNOTABLE_ELEMENT___GET_ANNOTATIONS:      return N4JSPackage.ANNOTABLE_EXPRESSION___GET_ANNOTATIONS;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TypableElement.class) {switch (baseOperationID) {default :  return -1;}}if (baseClass == Expression.class) {switch (baseOperationID) {case N4JSPackage.EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET:return N4JSPackage.ANNOTABLE_EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public String trim(){  int start=offset, last=offset + count - 1;  int end=last;  while ((start <= end) && (value[start] <= ' ')) {    start++;  }  while ((end >= start) && (value[end] <= ' ')) {    end--;  }  if (start == offset && end == last) {    return this;  }  return new String(start,end - start + 1,value);}  }
class C{  public byte loadByte(){  return (byte)0;}  }
class C{  public boolean isWellSigned(){  return wellSigned;}  }
class C{  public Object resolveNodeHash(ClusterNode node){  if (hashIdRslvr != null)   return hashIdRslvr.resolve(node); else   return node.consistentId();}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String pathInfo=setPathInfo(request);  String rootpath=contextInfo.resolvePath(pathInfo);  if (!pathOkay(rootpath,pathInfo,response)) {    return;  }  PrintWriter out=response.getWriter();  File rp=new File(rootpath);  String filename=rp.getName().toLowerCase();  String end="</BODY></HTML>\r\n";  request.setAttribute(ROOTPATH_FILENAME,rootpath);  try {    if (rp.isDirectory()) {      RequestDispatcher rd=request.getRequestDispatcher("/DirectoryList");      rd.forward(request,response);      return;    } else     if (filename.endsWith("x") || filename.endsWith("x.")) {      response.setContentType("text/html");      out.println(HTML_DOCTYPE + "<HTML><HEAD><TITLE>" + filename+ "</TITLE></HEAD>\r\n<BODY>\r\n<H1>Table "+ filename+ "</H1>\r\n");      out.println(getStylesheetHTML(request));      out.println("Skipping VLI format - this format is simply an index to find rows in a corresponding table file, it isn't very interesting to look at so its getting skipped.");    } else     if (filename.endsWith("ti")) {      RequestDispatcher rd=request.getRequestDispatcher("/Thematic");      rd.forward(request,response);    } else     if (filename.endsWith("si") || filename.endsWith("si.")) {      RequestDispatcher rd=request.getRequestDispatcher("/SpatialIndex");      rd.forward(request,response);    } else     if (filename.endsWith(".doc")) {      RequestDispatcher rd=request.getRequestDispatcher("/DocFile");      rd.forward(request,response);    } else {      response.setContentType("text/html");      out.println(HTML_DOCTYPE + "<HTML>\n<HEAD><TITLE>" + filename+ "</TITLE></HEAD>\r\n<BODY>\r\n<H1>Table "+ filename+ "</H1>\r\n");      out.println(getStylesheetHTML(request));      DcwRecordFile foo=new DcwRecordFile(rootpath);      request.setAttribute(RECORD_FILE_OBJ,foo);      RequestDispatcher rd=request.getRequestDispatcher("/Schema");      rd.include(request,response);      RequestDispatcher rd2=request.getRequestDispatcher("/Data");      rd2.include(request,response);      foo.close();    }  } catch (  FormatException f) {    throw new ServletException("Format Error: ",f);  }  out.println("<pre>");  out.println("Context Path: " + request.getContextPath());  out.println("PathInfo: " + request.getPathInfo());  out.println("ServletPath: " + request.getServletPath());  out.println("Query String: " + request.getQueryString());  out.println("</pre>" + end);}  }
class C{  public void play() throws IOException {  print("play",null);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.231 -0400",hash_original_method="6960AEC98B2B3DE56B5CF65D073FAA4F",hash_generated_method="22D7F578167645A1CA74B71D4DCC15DA") public static int copy(Reader input,Writer output) throws IOException {  char[] buffer=new char[DEFAULT_BUFFER_SIZE];  int count=0;  int n=0;  while (-1 != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  private long hash(final int x,final int k){  return (((a[k] * x) ^ b[k]) & 0x7FFFFFFFFFFFFFFFL) % m;}  }
class C{  private static boolean mergeResourceStateWithPatch(ResourceState source,ResourceState patch){  boolean isChanged=false;  if (patch.tenantLinks != null && !patch.tenantLinks.isEmpty()) {    if (source.tenantLinks == null || source.tenantLinks.isEmpty()) {      source.tenantLinks=patch.tenantLinks;      isChanged=true;    } else {      for (      String e : patch.tenantLinks) {        if (!source.tenantLinks.contains(e)) {          source.tenantLinks.add(e);          isChanged=true;        }      }    }  }  return isChanged;}  }
class C{  public HostListPanel(){  m_List=new JList();  m_List.setModel(new DefaultListModel());  m_DeleteBut.setEnabled(false);  m_DeleteBut.addActionListener(this);  m_HostField.addActionListener(this);  setLayout(new BorderLayout());  setBorder(BorderFactory.createTitledBorder("Hosts"));  JPanel topLab=new JPanel();  GridBagLayout gb=new GridBagLayout();  GridBagConstraints constraints=new GridBagConstraints();  topLab.setBorder(BorderFactory.createEmptyBorder(10,5,10,5));  topLab.setLayout(gb);  constraints.gridx=0;  constraints.gridy=0;  constraints.weightx=5;  constraints.fill=GridBagConstraints.HORIZONTAL;  constraints.gridwidth=1;  constraints.gridheight=1;  constraints.insets=new Insets(0,2,0,2);  topLab.add(m_DeleteBut,constraints);  constraints.gridx=1;  constraints.gridy=0;  constraints.weightx=5;  constraints.gridwidth=1;  constraints.gridheight=1;  topLab.add(m_HostField,constraints);  add(topLab,BorderLayout.NORTH);  add(new JScrollPane(m_List),BorderLayout.CENTER);}  }
class C{  private void move(){  itemIndex++;  if (items.isEmpty() || itemIndex == items.size()) {    items.clear();    return;  }  final ResourceBasedNode<?> item=items.get(itemIndex);  try {    projectServiceClient.move(((HasStorablePath)item).getStorablePath(),((HasStorablePath)destination).getStorablePath(),null,moveCallback);  } catch (  Exception error) {    notificationManager.showNotification(new Notification(error.getMessage(),ERROR));    dialogFactory.createMessageDialog("ERROR",error.getMessage(),null).show();    items.clear();  }}  }
class C{  public final Vec2D addSelf(float a,float b){  x+=a;  y+=b;  return this;}  }
class C{  public void replaceExistingNonRootView(int oldTag,int newTag){  if (mShadowNodeRegistry.isRootNode(oldTag) || mShadowNodeRegistry.isRootNode(newTag)) {    throw new IllegalViewOperationException("Trying to add or replace a root tag!");  }  ReactShadowNode oldNode=mShadowNodeRegistry.getNode(oldTag);  if (oldNode == null) {    throw new IllegalViewOperationException("Trying to replace unknown view tag: " + oldTag);  }  ReactShadowNode parent=oldNode.getParent();  if (parent == null) {    throw new IllegalViewOperationException("Node is not attached to a parent: " + oldTag);  }  int oldIndex=parent.indexOf(oldNode);  if (oldIndex < 0) {    throw new IllegalStateException("Didn't find child tag in parent");  }  WritableArray tagsToAdd=Arguments.createArray();  tagsToAdd.pushInt(newTag);  WritableArray addAtIndices=Arguments.createArray();  addAtIndices.pushInt(oldIndex);  WritableArray indicesToRemove=Arguments.createArray();  indicesToRemove.pushInt(oldIndex);  manageChildren(parent.getReactTag(),null,null,tagsToAdd,addAtIndices,indicesToRemove);}  }
class C{  private void sweep(){  final long oldestAllowed=System.currentTimeMillis() - exchangeLifetime;  final long start=System.currentTimeMillis();  for (  Map.Entry<?,Exchange> entry : incomingMessages.entrySet()) {    Exchange exchange=entry.getValue();    if (exchange.getTimestamp() < oldestAllowed) {      LOGGER.log(Level.FINER,"Mark-And-Sweep removes {0}",entry.getKey());      incomingMessages.remove(entry.getKey());    }  }  LOGGER.log(Level.FINE,"Sweep run took {0}ms",System.currentTimeMillis() - start);}  }
class C{  public static List<VOSteppedPrice> toVOSteppedPrices(List<SteppedPrice> steppedPriceList){  ArrayList<VOSteppedPrice> voSteppedPriceList=new ArrayList<VOSteppedPrice>();  for (  SteppedPrice currentSteppedPrice : steppedPriceList) {    VOSteppedPrice voSteppedPrice=toVOSteppedPrice(currentSteppedPrice);    voSteppedPriceList.add(voSteppedPrice);  }  return voSteppedPriceList;}  }
class C{  public ViewElevationAnimator(Globe globe,double beginZoom,double endZoom,LatLon beginLatLon,LatLon endLatLon,int altitudeMode,PropertyAccessor.DoubleAccessor propertyAccessor){  super(null,beginZoom,endZoom,propertyAccessor);  this.endLatLon=endLatLon;  this.altitudeMode=altitudeMode;  if (globe == null) {    useMidZoom=false;  } else {    this.globe=globe;    this.midZoom=computeMidZoom(globe,beginLatLon,endLatLon,beginZoom,endZoom);    useMidZoom=useMidZoom(beginZoom,endZoom,midZoom);  }  if (useMidZoom) {    this.trueEndZoom=endZoom;    this.end=this.midZoom;  }}  }
class C{  public ApnsFuture send(String deviceTokenString,ApnsPayload apnsPayload){  checkClosed();  return this.send(ApnsHelper.toByteArray(deviceTokenString),apnsPayload);}  }
class C{  public static InputStream toInputStream(final CharSequence input,final Charset encoding){  return IOUtils.toInputStream(input.toString(),encoding);}  }
class C{  @Override public int hashCode(){  int result=effectiveKeyBits;  if (iv == null) {    return result;  }  for (  byte element : iv) {    result+=element;  }  return result;}  }
class C{  public static int findBeforeNewLineChar(CharSequence s,int start){  for (int i=start - 1; i > 0; i--) {    if (s.charAt(i) == '\n') {      return i;    }  }  return -1;}  }
class C{  public void deployContext(String path,URL config) throws TomcatManagerException, IOException {  deployContext(path,config,false);}  }
class C{  public RsFluent withBody(final CharSequence body){  return new RsFluent(new RsWithBody(this,body));}  }
class C{  public void serialize(KXmlSerializer serializer) throws IOException {  serializer.startTag(ns,TAG);  if (!mMetrics.isEmpty()) {    Map<String,String> metricsCopy=new HashMap<String,String>(mMetrics);    serializer.startTag(ns,SCREEN_TAG);    serializer.attribute(ns,DeviceInfoConstants.RESOLUTION,getMetric(metricsCopy,DeviceInfoConstants.RESOLUTION));    serializer.attribute(ns,DeviceInfoConstants.SCREEN_DENSITY,getMetric(metricsCopy,DeviceInfoConstants.SCREEN_DENSITY));    serializer.attribute(ns,DeviceInfoConstants.SCREEN_DENSITY_BUCKET,getMetric(metricsCopy,DeviceInfoConstants.SCREEN_DENSITY_BUCKET));    serializer.attribute(ns,DeviceInfoConstants.SCREEN_SIZE,getMetric(metricsCopy,DeviceInfoConstants.SCREEN_SIZE));    serializer.attribute(ns,STATUSBAR_HEIGHT,getMetric(metricsCopy,STATUSBAR_HEIGHT));    setStatusBarHeight(getMetric(metricsCopy,STATUSBAR_HEIGHT));    serializer.endTag(ns,SCREEN_TAG);    serializer.startTag(ns,PHONE_TAG);    serializer.attribute(ns,DeviceInfoConstants.PHONE_NUMBER,getMetric(metricsCopy,DeviceInfoConstants.PHONE_NUMBER));    serializer.endTag(ns,PHONE_TAG);    String featureData=getMetric(metricsCopy,DeviceInfoConstants.FEATURES);    String processData=getMetric(metricsCopy,DeviceInfoConstants.PROCESSES);    String sysLibData=getMetric(metricsCopy,DeviceInfoConstants.SYS_LIBRARIES);    String textureData=getMetric(metricsCopy,DeviceInfoConstants.OPEN_GL_COMPRESSED_TEXTURE_FORMATS);    serializer.startTag(ns,BUILD_TAG);    for (    Map.Entry<String,String> metricEntry : metricsCopy.entrySet()) {      serializer.attribute(ns,metricEntry.getKey(),metricEntry.getValue());    }    serializer.endTag(ns,BUILD_TAG);    serializeFeatureInfo(serializer,featureData);    serializeProcessInfo(serializer,processData);    serializeSystemLibrariesInfo(serializer,sysLibData);    serializeOpenGLCompressedTextureFormatsInfo(serializer,textureData);  } else {    CLog.d("Could not find device info");  }  serializer.endTag(ns,TAG);}  }
class C{  public static Integer[] transformIntArray(int[] source){  Integer[] destin=new Integer[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  private void parseSupl(Node node){  String textMaxLength=null;  String locInfoMaxValidTime=null;  Node childnode=node.getFirstChild();  if (childnode != null) {    do {      if (textMaxLength == null) {        if ((textMaxLength=getValueByParamName("TextMaxLength",childnode,TYPE_INT)) != null) {          mRcsSettings.writeInteger(RcsSettingsData.MAX_GEOLOC_LABEL_LENGTH,Integer.parseInt(textMaxLength));          continue;        }      }      if (locInfoMaxValidTime == null) {        if ((locInfoMaxValidTime=getValueByParamName("LocInfoMaxValidTime",childnode,TYPE_INT)) != null) {          mRcsSettings.writeLong(RcsSettingsData.GEOLOC_EXPIRATION_TIME,Long.parseLong(locInfoMaxValidTime) * SECONDS_TO_MILLISECONDS_CONVERSION_RATE);        }      }    } while ((childnode=childnode.getNextSibling()) != null);  }}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  public String toOIDString(){  if (sOID == null) {    sOID="OID." + toString();  }  return sOID;}  }
class C{  Switch(String propertyName,String envName,boolean enabledByDefault,String description){  if (enabledByDefault) {    enabled=!("false".equals(getProperty(propertyName)) || "0".equals(getenv(envName)));  } else {    enabled="true".equals(getProperty(propertyName)) || "1".equals(getenv(envName));  }  this.enabledByDefault=enabledByDefault;  this.propertyName=propertyName;  this.envName=envName;  this.description=description;}  }
class C{  @Override public TermQuery build(QueryNode queryNode) throws QueryNodeException {  return null;}  }
class C{  private void updateVirtualVolumeInfoAfterCommit(String virtualVolumeName,List<VPlexMigrationInfo> migrationInfoList,boolean rename) throws VPlexApiException {  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  List<VPlexClusterInfo> clusterInfoList=discoveryMgr.getClusterInfoLite();  for (  VPlexMigrationInfo migrationInfo : migrationInfoList) {    if (migrationInfo.getIsDeviceMigration()) {      updateVolumeInfoAfterCommitDeviceMigration(virtualVolumeName,migrationInfo,clusterInfoList,rename);    } else {      updateVolumeInfoAfterCommitExtentMigration(virtualVolumeName,migrationInfo,clusterInfoList,rename);    }  }  s_logger.info("Done updating volume info after commit");}  }
class C{  private void resizeFrame(float hdelta,float vdelta){  Dimension d=eezeFrame.getSize();  eezeFrame.setSize((int)(d.getWidth() * hdelta),(int)(d.getHeight() * vdelta));}  }
class C{  public static String parse(String message,String[] params){  String[] tokens=message.split("[{}]",-1);  String result=tokens[0];  for (int i=1; i < tokens.length; i+=2) {    try {      int ind=tokens[i].indexOf('_');      String num=(ind == -1) ? tokens[i] : tokens[i].substring(0,ind);      result+=params[Integer.parseInt(num) - 1];    } catch (    Exception ex) {      if (ex instanceof NumberFormatException || ex instanceof IndexOutOfBoundsException) {        ex.printStackTrace();        result+="{ILLEGAL PARAMETER INDEX \"" + tokens[i] + "\"}";      } else       throw (RuntimeException)ex;    }    if (i + 1 < tokens.length)     result+=tokens[i + 1];  }  return result;}  }
class C{  private void removePostfixOperator(Set<FollowElement> result){  Iterator<FollowElement> iter=result.iterator();  while (iter.hasNext()) {    FollowElement fe=iter.next();    if (postfixGroup == fe.getGrammarElement()) {      iter.remove();    }  }}  }
class C{  int acc_compareToRight(int len1,AccurateValue n2,int len2){  int sz1, sz2;  int off1=0;  int off2=0;  int i;  boolean z1=false, z2=false;  if (acc_isZero()) {    off1=digits.length;    z1=true;  } else {    while (digits[off1] == 0) {      off1++;    }  }  if (n2.acc_isZero()) {    off2=n2.digits.length;    z2=true;  } else {    while (n2.digits[off2] == 0) {      off2++;    }  }  if (z1 && z2) {    return 0;  }  if (z1) {    return +1;  }  if (z2) {    return -1;  }  sz1=len1 - off1;  sz2=len2 - off2;  if (sz1 < sz2) {    return -1;  }  if (sz2 < sz1) {    return +1;  }  for (i=0; i < sz1; i++) {    if (off1 + i >= digits.length) {      return -1;    }    if (off2 + i >= n2.digits.length) {      return +1;    }    if (digits[off1 + i] == n2.digits[off2 + i]) {      continue;    }    if (n2.digits[off2 + i] > digits[off1 + i]) {      return -1;    } else {      return +1;    }  }  return 0;}  }
class C{  public void deleteLocalInstructionComment(final INaviInstruction instruction,final IComment comment) throws CouldntDeleteException {  CommentManager.get(m_provider).deleteLocalInstructionComment(instruction,m_codeNode,comment);}  }
class C{  public void newEvent(long bucketKey,T event){  int bucketIdx=(int)(bucketKey % noOfBuckets);  Bucket<T> bucket=buckets[bucketIdx];  if (bucket == null || bucket.bucketKey != bucketKey) {    if (bucket != null) {      dirtyBuckets.put(bucket.bucketKey,bucket);    }    bucket=createBucket(bucketKey);    buckets[bucketIdx]=bucket;  }  Object key=event.getEventKey();  Set<Long> keyBuckets=key2Buckets.get(key);  if (keyBuckets == null) {    keyBuckets=new HashSet<Long>();    keyBuckets.add(bucketKey);    key2Buckets.put(key,keyBuckets);  } else {    keyBuckets.add(bucketKey);  }  bucket.addNewEvent(key,event);}  }
class C{  public void scheduleAtFixedRate(TimerTask task,Date firstTime,long period){  TimerTaskWrapper taskWrapper=new TimerTaskWrapper(task);  wrappedTasks.put(task,taskWrapper);  timer.scheduleAtFixedRate(taskWrapper,firstTime,period);}  }
class C{  private static int indexOf(Object o,Object[] elements,int index,int fence){  if (o == null) {    for (int i=index; i < fence; i++)     if (elements[i] == null)     return i;  } else {    for (int i=index; i < fence; i++)     if (o.equals(elements[i]))     return i;  }  return -1;}  }
class C{  public ExtrudedBoundaryInfo(List<? extends LatLon> locations){  this.locations=locations;  this.faceCount=locations.size() - 1;}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true);}  }
class C{  @Override public final boolean isClosed(){  return _source == null || _source.isClosed() || _writeBuffer == null;}  }
class C{  public static void validateInputOptionsAndParameters(CommandLine line) throws IllegalArgumentException {  java.util.Properties properties=line.getOptionProperties("D");  String cut=line.getOptionValue("class");  if (cut != null) {    if (cut.endsWith(".java")) {      throw new IllegalArgumentException("The target -class should be a JVM qualifying name (e.g., org.foo.SomeClass) and not a source file");    }    if (cut.endsWith(".class")) {      throw new IllegalArgumentException("The target -class should be a JVM qualifying name (e.g., org.foo.SomeClass) and not a bytecode file");    }  }  if (!line.hasOption(Continuous.NAME) && !line.hasOption("startedByCtg")) {    for (    Object p : properties.keySet()) {      if (p.toString().startsWith("ctg_")) {        throw new IllegalArgumentException("Option " + p + " is only valid in '-"+ Continuous.NAME+ "' mode");      }    }  }  String junitSuffix=properties.getProperty("junit_suffix");  if (junitSuffix != null && !junitSuffix.endsWith("Test")) {    throw new IllegalArgumentException("A JUnit suffix should always end with a 'Test'");  }}  }
class C{  public static void filledSquare(double x,double y,double r){  if (r < 0)   throw new IllegalArgumentException("square side length must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * r);  double hs=factorY(2 * r);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.fill(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public void testMoveFileSourceParentRootSourceMissing() throws Exception {  IgfsPath file=new IgfsPath("/" + FILE.name());  create(igfsSecondary,paths(DIR_NEW,SUBDIR_NEW),paths(file));  create(igfs,paths(DIR_NEW,SUBDIR_NEW),null);  igfs.rename(file,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,new IgfsPath(SUBDIR_NEW,FILE.name()));  checkNotExist(igfs,igfsSecondary,file);}  }
class C{  public boolean isCompiled(){  return mIsCompiled;}  }
class C{  public static void fill(char[] array,char value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  private void validateContext(VirtualPool vpool,TenantOrg tenant,VplexBackendIngestionContext context) throws IngestionException {  UnManagedVolume unManagedVirtualVolume=context.getUnmanagedVirtualVolume();  List<UnManagedVolume> unManagedBackendVolumes=context.getUnmanagedBackendVolumes();  _logger.info("validating the ingestion context for these backend volumes: " + unManagedBackendVolumes);  _logger.info("checking if we have found enough backend volumes for ingestion");  if ((context.isLocal() && (unManagedBackendVolumes.isEmpty())) || context.isDistributed() && (unManagedBackendVolumes.size() < 2)) {    String supportingDevice=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.VPLEX_SUPPORTING_DEVICE_NAME.toString(),unManagedVirtualVolume.getVolumeInformation());    if (unManagedBackendVolumes.isEmpty()) {      String reason="failed to find any VPLEX backend volume for UnManagedVolume " + unManagedVirtualVolume.getLabel() + " with supporting device "+ supportingDevice+ ".  Has the backend array been discovered for unmanaged volumes?";      _logger.error(reason);      throw IngestionException.exceptions.validationException(reason);    } else {      String reason="failed to find all VPLEX backend volume for UnManagedVolume " + unManagedVirtualVolume.getLabel() + " with supporting device "+ supportingDevice+ ". Did find these backend volumes, though: "+ Joiner.on(", ").join(unManagedBackendVolumes)+ ".  Have all backend arrays been discovered for unmanaged volumes?";      ;      _logger.error(reason);      throw IngestionException.exceptions.validationException(reason);    }  }  if (!VplexBackendIngestionContext.DISCOVERY_MODE_DB_ONLY.equals(_discoveryMode)) {    context.validateSupportingDeviceStructure();  }  if (context.isDistributed()) {    _logger.info("checking for presence of replicas on both legs of this distributed volume");    List<String> snapshotsList=new ArrayList<String>();    List<String> clonesList=new ArrayList<String>();    for (    UnManagedVolume vol : unManagedBackendVolumes) {      StringSet snapshots=VplexBackendIngestionContext.extractValuesFromStringSet(SupportedVolumeInformation.SNAPSHOTS.name(),vol.getVolumeInformation());      if (snapshots != null && !snapshots.isEmpty()) {        snapshotsList.add(Joiner.on(", ").join(snapshots));      }      StringSet clones=VplexBackendIngestionContext.extractValuesFromStringSet(SupportedVolumeInformation.FULL_COPIES.name(),vol.getVolumeInformation());      if (clones != null && !clones.isEmpty()) {        clonesList.add(Joiner.on(", ").join(clones));      }    }    int counter=0;    StringBuilder message=new StringBuilder("");    if (snapshotsList.size() > 1) {      for (      String snapshots : snapshotsList) {        if (counter > 0) {          message.append(" and");        }        message.append(" one distributed volume component has snapshots ").append(snapshots);        counter++;      }      counter=0;    }    if (clonesList.size() > 1) {      for (      String clones : clonesList) {        if (counter > 0) {          message.append(" and");        }        message.append(" one distributed volume component has full copies ").append(clones);        counter++;      }    }    if (message.length() > 0) {      String reason=message.toString();      _logger.error(reason);      throw IngestionException.exceptions.vplexVolumeCannotHaveReplicasOnBothLegs(reason);    }  }  for (  UnManagedVolume vol : unManagedBackendVolumes) {    _logger.info("checking for non native mirrors on backend volume " + vol.getNativeGuid());    StringSet mirrors=PropertySetterUtil.extractValuesFromStringSet(SupportedVolumeInformation.MIRRORS.toString(),vol.getVolumeInformation());    Iterator<String> mirrorator=mirrors.iterator();    while (mirrorator.hasNext()) {      String mirrorGuid=mirrorator.next();      _logger.info("\tvolume has mirror " + mirrorGuid);      for (      Entry<UnManagedVolume,String> entry : context.getUnmanagedVplexMirrors().entrySet()) {        if (mirrorGuid.equals(entry.getKey().getNativeGuid())) {          _logger.info("\t\tbut it's native, so it's okay...");          mirrorator.remove();        }      }    }    if (!mirrors.isEmpty()) {      String reason="cannot ingest a mirror on the backend array, " + "only VPLEX device mirrors are supported. Mirrors found: " + Joiner.on(", ").join(mirrors);      _logger.error(reason);      throw IngestionException.exceptions.validationException(reason);    }  }  if (context.getUnmanagedBackendOnlyClones().size() > 0) {    List<String> cloneInfo=new ArrayList<String>();    for (    Entry<UnManagedVolume,Set<UnManagedVolume>> cloneEntry : context.getUnmanagedBackendOnlyClones().entrySet()) {      String message=cloneEntry.getKey().getLabel() + " has ";      List<String> clones=new ArrayList<String>();      for (      UnManagedVolume clone : cloneEntry.getValue()) {        clones.add(clone.getLabel());      }      message+=Joiner.on(", ").join(clones) + ". ";      cloneInfo.add(message);    }    String reason="cannot currently ingest a clone on the backend array " + "that doesn't have a virtual volume in front of it. " + "Backend-only clones found: "+ Joiner.on(", ").join(cloneInfo);    _logger.error(reason);    throw IngestionException.exceptions.validationException(reason);  }  int mirrorCount=context.getUnmanagedVplexMirrors().size();  if (mirrorCount > 0) {    _logger.info("{} native mirror(s) are present, validating vpool",mirrorCount);    if (VirtualPool.vPoolSpecifiesMirrors(vpool,_dbClient)) {      if (mirrorCount > vpool.getMaxNativeContinuousCopies()) {        if (context.isDistributed() && mirrorCount == 2) {          List<UnManagedVolume> mirrors=new ArrayList<UnManagedVolume>();          for (          UnManagedVolume mirror : context.getUnmanagedVplexMirrors().keySet()) {            mirrors.add(mirror);          }          if (mirrors.size() == 2) {            String backendClusterId0=VplexBackendIngestionContext.extractValueFromStringSet(SupportedVolumeInformation.VPLEX_BACKEND_CLUSTER_ID.toString(),mirrors.get(0).getVolumeInformation());            String backendClusterId1=VplexBackendIngestionContext.extractValueFromStringSet(SupportedVolumeInformation.VPLEX_BACKEND_CLUSTER_ID.toString(),mirrors.get(1).getVolumeInformation());            if (backendClusterId0.equals(backendClusterId1)) {              StringBuilder reason=new StringBuilder("the volume's mirrors must be on separate ");              reason.append(" vplex clusters. mirrors found: ");              reason.append(backendClusterId0).append(": ").append(mirrors.get(0).getLabel()).append("; ").append(backendClusterId1).append(": ").append(mirrors.get(1).getLabel()).append(".");              String message=reason.toString();              _logger.error(message);              throw IngestionException.exceptions.validationException(message);            } else {              VirtualPool haVpool=VirtualPool.getHAVPool(vpool,_dbClient);              if (haVpool == null) {                String reason="no high availability virtual pool is " + "set on source virtual pool " + vpool.getLabel();                _logger.error(reason);                throw IngestionException.exceptions.validationException(reason);              }              if (vpool.getMaxNativeContinuousCopies() == 1 && haVpool.getMaxNativeContinuousCopies() == 1) {                _logger.info("volume is distributed, has a mirror on each leg, both source and " + "high availaiblity vpools have continuous copies value of 1, " + "volume is ok for ingestion");              } else {                StringBuilder reason=new StringBuilder("the virtual pools' continuous copy ");                reason.append("settings are incorrect for ingesting a dual distributed mirror. ");                reason.append("Source virtual pool is set to ").append(vpool.getMaxNativeContinuousCopies()).append(" and target virtual pool is set to ").append(haVpool.getMaxNativeContinuousCopies()).append(". ");                reason.append("Mirrors found - ").append(backendClusterId0).append(": ").append(mirrors.get(0).getLabel()).append("; ").append(backendClusterId1).append(": ").append(mirrors.get(1).getLabel()).append(".");                String message=reason.toString();                _logger.error(message);                throw IngestionException.exceptions.validationException(message);              }            }          }        } else {          StringBuilder reason=new StringBuilder("volume has more continuous copies (");          reason.append(mirrorCount).append(" than vpool allows. Mirrors found: ");          reason.append(Joiner.on(", ").join(context.getUnmanagedVplexMirrors().keySet()));          String message=reason.toString();          _logger.error(message);          throw IngestionException.exceptions.validationException(message);        }      }    } else {      String reason="virtual pool does not allow continuous copies, but volume has " + mirrorCount + " mirror(s)";      _logger.error(reason);      throw IngestionException.exceptions.validationException(reason);    }  }  int snapshotCount=context.getUnmanagedSnapshots().size();  if (snapshotCount > 0) {    _logger.info("{} snapshot(s) are present, validating vpool",snapshotCount);    if (VirtualPool.vPoolSpecifiesSnapshots(vpool)) {      if (snapshotCount > vpool.getMaxNativeSnapshots()) {        String reason="volume has more snapshots (" + snapshotCount + ") than vpool allows";        _logger.error(reason);        throw IngestionException.exceptions.validationException(reason);      }    } else {      String reason="vpool does not allow snapshots, but volume has " + snapshotCount + " snapshot(s)";      _logger.error(reason);      throw IngestionException.exceptions.validationException(reason);    }  }  long unManagedVolumesCapacity=VolumeIngestionUtil.getTotalUnManagedVolumeCapacity(_dbClient,context.getUnmanagedBackendVolumeUris());  _logger.info("validating total backend volume capacity {} against the vpool",unManagedVolumesCapacity);  CapacityUtils.validateQuotasForProvisioning(_dbClient,vpool,context.getBackendProject(),tenant,unManagedVolumesCapacity,"volume");  _logger.info("validating backend volumes against the vpool");  VolumeIngestionUtil.checkIngestionRequestValidForUnManagedVolumes(context.getUnmanagedBackendVolumeUris(),vpool,_dbClient);}  }
class C{  public MarkdownDialog(Frame owner,String title){  super(owner,title);}  }
class C{  public byte[] toByteArray(){  char[] src=key.toCharArray();  byte[] dest=new byte[2 * src.length];  int j=0;  for (int i=0; i < src.length; i++) {    dest[j++]=(byte)(src[i] >>> 8);    dest[j++]=(byte)(src[i] & 0x00ff);  }  return dest;}  }
class C{  public int countTokens(){  int count=0;  boolean inToken=false;  for (int i=position, length=string.length(); i < length; i++) {    if (delimiters.indexOf(string.charAt(i),0) >= 0) {      if (returnDelimiters)       count++;      if (inToken) {        count++;        inToken=false;      }    } else {      inToken=true;    }  }  if (inToken)   count++;  return count;}  }
class C{  public static char switchCase(char source){  if (Character.isUpperCase(source)) {    return Character.toLowerCase(source);  }  if (Character.isLowerCase(source)) {    return Character.toUpperCase(source);  }  return source;}  }
class C{  public GifDrawable(@NonNull InputStream stream) throws IOException {  this(GifInfoHandle.openMarkableInputStream(stream,false),null,null,true);}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  int i;  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_InterfaceMethodref_info cu=(CONSTANT_InterfaceMethodref_info)cp;  i=constant_pool[class_index].compareTo(constant_pool,cp_constant_pool[cu.class_index],cp_constant_pool);  if (i != 0)   return i;  return constant_pool[name_and_type_index].compareTo(constant_pool,cp_constant_pool[cu.name_and_type_index],cp_constant_pool);}  }
class C{  public char next(char c) throws JSONException {  char n=this.next();  if (n != c) {    throw this.syntaxError("Expected '" + c + "' and instead saw '"+ n+ "'");  }  return n;}  }
class C{  public int print(Graphics graphics,PageFormat pageFormat,int pageIndex) throws PrinterException {  if (!havePage(pageIndex))   return Printable.NO_SUCH_PAGE;  Rectangle r=new Rectangle(0,0,(int)getPaper().getWidth(true),(int)getPaper().getHeight(true));  Page page=getPage(pageIndex + 1);  page.paint((Graphics2D)graphics,r,false,m_isCopy);  getHeaderFooter().paint((Graphics2D)graphics,r,false);  return Printable.PAGE_EXISTS;}  }
class C{  public JH256(){}  }
class C{  public static <T>Set<T> findDuplicates(Iterable<T> iterable){  return Multisets.difference(HashMultiset.create(iterable),HashMultiset.create(ImmutableSet.copyOf(iterable))).elementSet();}  }
class C{  public static void main(String[] args){  Properties opts=StringUtils.argsToProperties(args,optionArgDefs());  int numEpochs=PropertiesUtils.getInt(opts,"e",1);  String optimizerAlg=opts.getProperty("o","mira-1best");  String[] optimizerFlags=opts.containsKey("of") ? opts.getProperty("of").split(",") : null;  String scoreMetricStr=opts.getProperty("m","bleu-smooth");  String[] scoreMetricOpts=opts.containsKey("mf") ? opts.getProperty("mf").split(",") : null;  String experimentName=opts.getProperty("n","debug");  boolean uniformStartWeights=PropertiesUtils.getBool(opts,"uw");  String refStr=opts.getProperty("r",null);  boolean finalWeightsFromBestEpoch=PropertiesUtils.getBool(opts,"bw",false);  boolean doParameterAveraging=PropertiesUtils.getBool(opts,"a",false);  int batchSize=PropertiesUtils.getInt(opts,"b",1);  boolean randomizeStartingWeights=PropertiesUtils.getBool(opts,"rw",false);  int expectedNumFeatures=PropertiesUtils.getInt(opts,"ef",30);  int weightWriteOutInterval=PropertiesUtils.getInt(opts,"wi",10000 / batchSize);  int minFeatureCount=PropertiesUtils.getInt(opts,"fmc",0);  String tmpPath=opts.getProperty("tmp",System.getProperty("java.io.tmpdir"));  String pseudoRefOptions=opts.getProperty("p",null);  boolean wrapBoundary=PropertiesUtils.getBool(opts,"s",false);  boolean shuffleDev=PropertiesUtils.getBool(opts,"rand",true);  boolean outputSingleBest=PropertiesUtils.getBool(opts,"sb",false);  boolean outputPrefixDecoding=PropertiesUtils.getBool(opts,"pd",false);  boolean trainLocalTM=PropertiesUtils.getBool(opts,"localTM",false);  String localTMoutFile=PropertiesUtils.getString(opts,"localTMout","");  boolean enforceStrictlySequential=PropertiesUtils.getBool(opts,"seq",false);  boolean normalizeInitialWeights=PropertiesUtils.getBool(opts,"niw",false);  String prefixTuningFile=opts.getProperty("pt",null);  String additionalInitialFeatureWeights=opts.getProperty("ifw",null);  if (prefixTuningFile != null && refStr != null) {    System.err.println("ERROR: Only one reference allowed for prefix tuning.");    System.exit(-1);  }  String[] parsedArgs=opts.getProperty("","").split("\\s+");  if (parsedArgs.length != 4) {    System.err.println(usage());    System.exit(-1);  }  String srcFile=parsedArgs[0];  String tgtFile=parsedArgs[1];  String phrasalIniFile=parsedArgs[2];  String wtsInitialFile=parsedArgs[3];  final long startTime=TimingUtils.startTime();  logger.info("Phrasal Online Tuner");  logger.info("Options: {}",PropertiesUtils.getSortedEntries(opts).stream().map(null).collect(Collectors.joining(" ")));  try {    final SentenceLevelMetric<IString,String> slScoreMetric=SentenceLevelMetricFactory.getMetric(scoreMetricStr,scoreMetricOpts);    final String clMetricString=SentenceLevelMetricFactory.sentenceLevelToCorpusLevel(scoreMetricStr);    OnlineTuner tuner=new OnlineTuner(srcFile,tgtFile,phrasalIniFile,wtsInitialFile,optimizerAlg,optimizerFlags,uniformStartWeights,randomizeStartingWeights,expectedNumFeatures,wrapBoundary,experimentName,normalizeInitialWeights);    if (additionalInitialFeatureWeights != null)     tuner.addAdditionalFeatureWeights(additionalInitialFeatureWeights);    if (refStr != null)     tuner.loadReferences(refStr,wrapBoundary);    if (prefixTuningFile != null)     tuner.loadPrefixFile(prefixTuningFile);    if (pseudoRefOptions != null)     tuner.computePseudoReferences(pseudoRefOptions,tmpPath);    tuner.doParameterAveraging(doParameterAveraging);    tuner.finalWeightsFromBestEpoch(finalWeightsFromBestEpoch);    tuner.minFeatureCount(minFeatureCount);    tuner.shuffleDev(shuffleDev);    tuner.outputSingleBest(outputSingleBest);    tuner.outputPrefixDecoding(outputPrefixDecoding);    tuner.enforceStrictlySequential(enforceStrictlySequential);    tuner.trainLocalTM(trainLocalTM,localTMoutFile);    tuner.run(numEpochs,batchSize,slScoreMetric,clMetricString,weightWriteOutInterval);    final double elapsedTime=TimingUtils.elapsedSeconds(startTime);    logger.info("Elapsed time: {} seconds",elapsedTime);    logger.info("Shutdown");  } catch (  IOException e) {    logger.fatal(e);  }}  }
class C{  public PersonalityInsights(){  super(SERVICE_NAME);  if ((getEndPoint() == null) || getEndPoint().isEmpty()) {    setEndPoint(URL);  }}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success || newRecord)   return success;  if (is_ValueChanged("AD_Org_ID")) {    String sql="UPDATE C_InvoiceLine ol" + " SET AD_Org_ID =" + "(SELECT AD_Org_ID"+ " FROM C_Invoice o WHERE ol.C_Invoice_ID=o.C_Invoice_ID) "+ "WHERE C_Invoice_ID="+ getC_Invoice_ID();    int no=DB.executeUpdate(sql,get_TrxName());    log.fine("Lines -> #" + no);  }  return true;}  }
class C{  private static int calculateNested(@NonNull String text){  int nested=0;  while (true) {    if ((nested + 1) * KEY_BLOCK_QUOTES.length() > text.length()) {      break;    }    String sub=text.substring(nested * KEY_BLOCK_QUOTES.length(),(nested + 1) * KEY_BLOCK_QUOTES.length());    if (!KEY_BLOCK_QUOTES.equals(sub)) {      break;    }    ++nested;  }  return nested;}  }
class C{  private void releaseOptimizationPlan(int plan){synchronized (optimizationPlanLocks) {    optimizationPlanLocks.set(plan,Boolean.FALSE);  }}  }
class C{  protected void onBackNavigation(){}  }
class C{  @Override public String globalInfo(){  return "Implementing Minkowski distance (or similarity) function.\n\n" + "One object defines not one distance but the data model in which " + "the distances between objects of that data model can be computed.\n\n"+ "Attention: For efficiency reasons the use of consistency checks "+ "(like are the data models of the two instances exactly the same), "+ "is low.\n\n"+ "For more information, see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public void signal(){  Thread t=ownerAccess.getAndSet(this,null);  if (t != null) {    LockSupport.unpark(t);  }}  }
class C{  public boolean hasOriginalId(){  return super.hasAttribute(ORIGINAL_ID);}  }
class C{  public static <TK>double computeLocalTERScore(Sequence<TK> translation,List<Sequence<TK>> references){  TERcalc terCalc=new TERcalc(new TERcost());  terCalc.BEAM_WIDTH=20;  Set<Sequence<TK>> uniqRefs=new HashSet<Sequence<TK>>(references);  final String hyp=translation.toString();  double bestTER=Double.POSITIVE_INFINITY;  for (  Sequence<TK> refSeq : uniqRefs) {    String ref=refSeq.toString();    TERalignment align=terCalc.TER(hyp,ref);    double ter=align.numEdits / align.numWords;    if (ter < bestTER) {      bestTER=ter;    }  }  return bestTER;}  }
class C{  private HtmlSelectOneMenu createOperatorMenu(){  HtmlSelectOneMenu field=new HtmlSelectOneMenu();  List children=field.getChildren();  children.add(createSelectItem("contains"));  children.add(createSelectItem("doesn't contain"));  children.add(createSelectItem("is"));  children.add(createSelectItem("isn't"));  children.add(createSelectItem("starts with"));  children.add(createSelectItem("ends with"));  return field;}  }
class C{  public void stopAutoScroll(){  handler.removeMessages(SCROLL_WHAT);}  }
class C{  static public Automaton optional(Automaton a){  Automaton result=new Automaton();  result.createState();  result.setAccept(0,true);  if (a.getNumStates() > 0) {    result.copy(a);    result.addEpsilon(0,1);  }  result.finishState();  return result;}  }
class C{  public void testExclude() throws IOException {  CharArraySet exclusionSet=new CharArraySet(asSet("jaktkarlarne"),false);  Analyzer a=new SwedishAnalyzer(SwedishAnalyzer.getDefaultStopSet(),exclusionSet);  checkOneTerm(a,"jaktkarlarne","jaktkarlarne");  checkOneTerm(a,"jaktkarlens","jaktkarl");  a.close();}  }
class C{  public void testAcrossWholeWorldSteps(){  for (int lat1=-90; lat1 <= 90; lat1+=10) {    for (int lon1=-180; lon1 <= 180; lon1+=10) {      for (int lat2=-90; lat2 <= 90; lat2+=10) {        for (int lon2=-180; lon2 <= 180; lon2+=10) {          double expected=slowHaversin(lat1,lon1,lat2,lon2);          double actual=haversinMeters(lat1,lon1,lat2,lon2);          assertEquals(expected,actual,HAVERSIN_DELTA);        }      }    }  }}  }
class C{  public static boolean hasFroyo(){  return Build.VERSION.SDK_INT >= VERSION_CODES.FROYO;}  }
class C{  public static void swapCols(double[][] matrix,int col1,int col2){  double temp=0;  int rows=matrix.length;  double[] r=null;  for (int row=0; row < rows; row++) {    r=matrix[row];    temp=r[col1];    r[col1]=r[col2];    r[col2]=temp;  }}  }
class C{  public static String jsonExtractSubnetMask(String fmJson) throws IOException {  String subnet_mask="";  MappingJsonFactory f=new MappingJsonFactory();  JsonParser jp;  try {    jp=f.createJsonParser(fmJson);  } catch (  JsonParseException e) {    throw new IOException(e);  }  jp.nextToken();  if (jp.getCurrentToken() != JsonToken.START_OBJECT) {    throw new IOException("Expected START_OBJECT");  }  while (jp.nextToken() != JsonToken.END_OBJECT) {    if (jp.getCurrentToken() != JsonToken.FIELD_NAME) {      throw new IOException("Expected FIELD_NAME");    }    String n=jp.getCurrentName();    jp.nextToken();    if (jp.getText().equals(""))     continue;    if (n == "subnet-mask") {      subnet_mask=jp.getText();      break;    }  }  return subnet_mask;}  }
class C{  public boolean isEmpty(){  boolean empty=false;  if ((null == m_value) || (null != m_invalidValue)) {    empty=true;  }  return empty;}  }
class C{  @Override public boolean onInterceptTouchEvent(MotionEvent ev){  if (!isEnabled()) {    return false;  }  final int action=MotionEventCompat.getActionMasked(ev);switch (action) {case MotionEvent.ACTION_CANCEL:case MotionEvent.ACTION_UP:    mViewDragHelper.cancel();  return false;case MotionEvent.ACTION_DOWN:int index=MotionEventCompat.getActionIndex(ev);mActivePointerId=MotionEventCompat.getPointerId(ev,index);if (mActivePointerId == INVALID_POINTER) {return false;}default :return mViewDragHelper.shouldInterceptTouchEvent(ev);}}  }
class C{  @Inline private static void checkAllocationCountDownToGC(){  if (canForceGC()) {    if (allocationCountDownToGC-- <= 0) {      allocationCountDownToGC=VM.StressGCAllocationInterval;      System.gc();    }  }}  }
class C{  public Statement groupBy(Object... columns){  statement.append(" GROUP BY ");  appendClauses(columns);  return this;}  }
class C{  public static void verifyMailAddresses(Collection<MailAddress> col) throws MessagingException {  try {    MailAddress addresses[]=col.toArray(new MailAddress[col.size()]);    if (addresses.length != col.size()) {      throw new MailetException("The recipient list contains objects other than MailAddress objects");    }  } catch (  ArrayStoreException ase) {    throw new MailetException("The recipient list contains objects other than MailAddress objects");  }}  }
class C{  public static String cleanupMessage(String message){  return StringUtils.remove(message,'\r');}  }
class C{  @Override public boolean isEntailed(KnowledgeBase kb,Sentence alpha){  Set<Clause> kbAndNotAlpha=new LinkedHashSet<Clause>();  Sentence notQuery=new ComplexSentence(Connective.NOT,alpha);  Set<PropositionSymbol> symbols=new LinkedHashSet<PropositionSymbol>();  List<PropositionSymbol> querySymbols=new ArrayList<PropositionSymbol>(SymbolCollector.getSymbolsFrom(notQuery));  kbAndNotAlpha.addAll(kb.asCNF());  kbAndNotAlpha.addAll(ConvertToConjunctionOfClauses.convert(notQuery).getClauses());  symbols.addAll(querySymbols);  symbols.addAll(kb.getSymbols());  return !dpll(kbAndNotAlpha,new ArrayList<PropositionSymbol>(symbols),new Model());}  }
class C{  public static <T>AtomicLongFieldUpdater<T> newAtomicLongFieldUpdater(Class<T> tClass,String fieldName){  try {    return new UnsafeAtomicLongFieldUpdater<>(JUnsafe.getUnsafe(),tClass,fieldName);  } catch (  Throwable t) {    return AtomicLongFieldUpdater.newUpdater(tClass,fieldName);  }}  }
class C{  private final void append(List<? super NameValuePair> l,final String k,final String v){  if (v != null)   l.add(new NameValuePair(k,v));}  }
class C{  private void initGUI(Color backgroundColor,LicenseConstraintViolation<Integer,Integer> violation){  setLayout(new GridBagLayout());  GridBagConstraints gbc=new GridBagConstraints();  containerPanel=new JPanel(new GridBagLayout());  containerPanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLineBorder(Colors.PANEL_BORDER,1,true),BorderFactory.createEmptyBorder(5,5,5,5)));  containerPanel.setBackground(Colors.WARNING_COLOR);  ResourceLabel firstLabel=new ResourceLabel("too_much_data.display_license",NumberFormat.getIntegerInstance().format(violation.getConstraintValue()));  firstLabel.setFont(BOLD_LABEL_FONT);  gbc.gridx=0;  gbc.weightx=0;  gbc.insets=new Insets(0,5,0,0);  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.anchor=GridBagConstraints.WEST;  containerPanel.add(firstLabel,gbc);  LinkRemoteButton upgradeButton=new LinkRemoteButton(UPGRADE_ACTION);  gbc.insets=new Insets(0,0,0,0);  gbc.gridx+=1;  containerPanel.add(upgradeButton,gbc);  ResourceLabel secondLabel=new ResourceLabel("too_much_data.display_leverage");  secondLabel.setFont(BOLD_LABEL_FONT);  gbc.gridx+=1;  containerPanel.add(secondLabel,gbc);  gbc.gridx+=1;  gbc.weightx=1.0;  gbc.fill=GridBagConstraints.REMAINDER;  containerPanel.add(new JLabel(),gbc);  LinkRemoteButton moreButton=new LinkRemoteButton(DOCUMENTATION_ACTION);  gbc.gridx+=1;  gbc.anchor=GridBagConstraints.EAST;  containerPanel.add(moreButton,gbc);  gbc.gridx=0;  gbc.weightx=1.0;  gbc.insets=new Insets(10,10,10,10);  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.anchor=GridBagConstraints.WEST;  add(containerPanel,gbc);  setBackground(backgroundColor);}  }
class C{  public static BitmapRegionDecoderCompat newInstance(FileDescriptor fd,boolean isShareable) throws IOException {  return new BitmapRegionDecoderCompat(isAPI10() ? BitmapRegionDecoderNative.newInstance(fd,isShareable) : BitmapRegionDecoderGinger.newInstance(fd,isShareable));}  }
class C{  public static void runJavadoc(String[] javadocArgs){  if (com.sun.tools.javadoc.Main.execute(javadocArgs) != 0) {    throw new Error("Javadoc failed to execute");  }}  }
class C{  @Override public boolean equals(final Object o){  if (!(o instanceof UUID)) {    return false;  }  byte[] otherId=((UUID)o).mId;  byte[] thisId=mId;  for (int i=0; i < 16; ++i) {    if (otherId[i] != thisId[i]) {      return false;    }  }  return true;}  }
class C{  @Override public void addView(View child,int index,ViewGroup.LayoutParams params){  super.addView(child,index,params);  int childId=child.getId();  if (childId == CHRONOMETER_ID && child instanceof Chronometer) {    mChronometer=(Chronometer)child;    mChronometer.setOnChronometerTickListener(this);    mChronometerFollow=(params.width == ViewGroup.LayoutParams.WRAP_CONTENT);    mChronometerGravity=(mChronometer.getGravity() & Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK);  } else   if (childId == PROGRESSBAR_ID && child instanceof ProgressBar) {    mProgressBar=(ProgressBar)child;  }}  }
class C{  public static int daysBetween(int year1,int month1,int day1,int year2,int month2,int day2){  return fixedFromGregorian(year1,month1,day1) - fixedFromGregorian(year2,month2,day2);}  }
class C{  public RelationalOperator createRelationalOperatorFromString(EDataType eDataType,String initialValue){  RelationalOperator result=RelationalOperator.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public static boolean isConnectedMobile(Context context){  NetworkInfo info=Connectivity.getNetworkInfo(context);  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_MOBILE);}  }
class C{  private void completeOrder(){  if (m_order == null)   return;  m_order.setDocAction(DocAction.ACTION_Prepare);  m_order.processIt(DocAction.ACTION_Prepare);  if (!m_order.save())   throw new IllegalStateException("Cannot save Order");  m_noOrders++;  addLog(m_order.get_ID(),m_order.getDateOrdered(),m_order.getGrandTotal(),m_order.getDocumentNo());  m_order=null;}  }
class C{  private void purgeNotOnline(){  Set<UUID> uuids=Sponge.getServer().getOnlinePlayers().stream().map(null).collect(Collectors.toSet());  afkData.entrySet().removeIf(null);}  }
class C{  protected boolean isVolunteering(){synchronized (this) {    return this.primaryState == VOLUNTEERING_HOSTING;  }}  }
class C{  private boolean deactivateTopologyHandler(String topologyName){  NetworkUtils.TunnelConfig tunnelConfig=NetworkUtils.TunnelConfig.build(config,NetworkUtils.HeronSystem.SCHEDULER);  return TMasterUtils.transitionTopologyState(topologyName,TMasterUtils.TMasterCommand.DEACTIVATE,Runtime.schedulerStateManagerAdaptor(runtime),TopologyAPI.TopologyState.RUNNING,TopologyAPI.TopologyState.PAUSED,tunnelConfig);}  }
class C{  protected ProxyGraphicsNode[] buildMiddleMarkerProxies(){  ExtendedPathIterator iter=getExtShape().getExtendedPathIterator();  double[] prev=new double[7];  double[] curr=new double[7];  double[] next=new double[7], tmp=null;  int prevSegType=0, currSegType=0, nextSegType=0;  if (iter.isDone()) {    return null;  }  prevSegType=iter.currentSegment(prev);  double[] moveTo=new double[2];  if (prevSegType != PathIterator.SEG_MOVETO) {    return null;  }  moveTo[0]=prev[0];  moveTo[1]=prev[1];  iter.next();  if (iter.isDone()) {    return null;  }  currSegType=iter.currentSegment(curr);  if (currSegType == PathIterator.SEG_MOVETO) {    moveTo[0]=curr[0];    moveTo[1]=curr[1];  } else   if (currSegType == PathIterator.SEG_CLOSE) {    currSegType=PathIterator.SEG_LINETO;    curr[0]=moveTo[0];    curr[1]=moveTo[1];  }  iter.next();  List proxies=new ArrayList();  while (!iter.isDone()) {    nextSegType=iter.currentSegment(next);    if (nextSegType == PathIterator.SEG_MOVETO) {      moveTo[0]=next[0];      moveTo[1]=next[1];    } else     if (nextSegType == PathIterator.SEG_CLOSE) {      nextSegType=PathIterator.SEG_LINETO;      next[0]=moveTo[0];      next[1]=moveTo[1];    }    proxies.add(createMiddleMarker(prev,prevSegType,curr,currSegType,next,nextSegType));    tmp=prev;    prev=curr;    prevSegType=currSegType;    curr=next;    currSegType=nextSegType;    next=tmp;    iter.next();  }  ProxyGraphicsNode[] gn=new ProxyGraphicsNode[proxies.size()];  proxies.toArray(gn);  return gn;}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static String conflict(GitRepository repository,String branch){  return GitScenarios.conflict(repository,branch,"conflict.txt");}  }
class C{  public static Class resolveClass(BinaryContext ctx,int typeId,@Nullable String clsName,@Nullable ClassLoader ldr,boolean deserialize){  Class cls;  if (typeId == GridBinaryMarshaller.OBJECT_TYPE_ID)   return Object.class;  if (typeId != GridBinaryMarshaller.UNREGISTERED_TYPE_ID)   cls=ctx.descriptorForTypeId(true,typeId,ldr,deserialize).describedClass(); else {    try {      cls=U.forName(clsName,ldr);    } catch (    ClassNotFoundException e) {      throw new BinaryInvalidTypeException("Failed to load the class: " + clsName,e);    }    ctx.descriptorForClass(cls,true);  }  return cls;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object p=stack.pop();  if (p instanceof sage.vfs.MediaNode)   p=((sage.vfs.MediaNode)p).getDataObject();  return Boolean.valueOf(p instanceof UserRecord);}  }
class C{  protected MicroPipelineManager(final String processingNodeId,final MicroPipelineFactory factory,final ExecutorService executorService) throws RequiredInputMissingException {  if (factory == null)   throw new RequiredInputMissingException("Missing required component repository");  if (executorService == null)   throw new RequiredInputMissingException("Missing required executor service");  if (StringUtils.isBlank(processingNodeId))   throw new RequiredInputMissingException("Missing required processing node identifier");  this.processingNodeId=StringUtils.lowerCase(StringUtils.trim(processingNodeId));  this.microPipelineFactory=factory;  this.executorService=executorService;}  }
class C{  private String constructWWNQuery(String systemId,List<HostStorageDomain> hsdList,String model){  Map<String,Object> attributeMap=new HashMap<String,Object>();  StorageArray array=new StorageArray(systemId);  Add addOp=new Add(HDSConstants.ADD_WWN_TO_HSD_TARGET);  attributeMap.put(HDSConstants.STORAGEARRAY,array);  attributeMap.put(HDSConstants.ADD,addOp);  attributeMap.put(HDSConstants.MODEL,model);  attributeMap.put(HDSConstants.HOSTGROUP_LIST,hsdList);  return InputXMLGenerationClient.getInputXMLString(HDSConstants.BATCH_ADD_WWN_TO_HSD_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);}  }
class C{  public SubscriptionMigrationException(String message,SubscriptionMigrationExceptionBean bean,Throwable cause){  super(message,bean,cause);  this.bean=bean;}  }
class C{  public String write(Integer indent,String xmlVersion){  return write(new XCalOutputProperties(indent,xmlVersion));}  }
class C{  public DockerSlaveTemplate(){  this.id=UUID.randomUUID().toString();}  }
