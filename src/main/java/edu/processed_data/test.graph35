class C{  public void fireEvent(final String instanceId,String ref,String type,Map<String,Object> params){  fireEvent(instanceId,ref,type,params,null);}  }
class C{  private char[] applyFloatPadding(char[] ca4,boolean noDigits){  char[] ca5=ca4;  if (fieldWidthSet) {    int i, j, nBlanks;    if (leftJustify) {      nBlanks=fieldWidth - ca4.length;      if (nBlanks > 0) {        ca5=new char[ca4.length + nBlanks];        for (i=0; i < ca4.length; i++)         ca5[i]=ca4[i];        for (j=0; j < nBlanks; j++, i++)         ca5[i]=' ';      }    } else     if (!leadingZeros || noDigits) {      nBlanks=fieldWidth - ca4.length;      if (nBlanks > 0) {        ca5=new char[ca4.length + nBlanks];        for (i=0; i < nBlanks; i++)         ca5[i]=' ';        for (j=0; j < ca4.length; i++, j++)         ca5[i]=ca4[j];      }    } else     if (leadingZeros) {      nBlanks=fieldWidth - ca4.length;      if (nBlanks > 0) {        ca5=new char[ca4.length + nBlanks];        i=0;        j=0;        if (ca4[0] == '-') {          ca5[0]='-';          i++;          j++;        }        for (int k=0; k < nBlanks; i++, k++)         ca5[i]='0';        for (; j < ca4.length; i++, j++)         ca5[i]=ca4[j];      }    }  }  return ca5;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelDeBuff_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200356,skillname);}  }
class C{  public boolean isDead(){  if (nodeState == ZWaveNodeState.DEAD || nodeState == ZWaveNodeState.FAILED) {    return true;  } else {    return false;  }}  }
class C{  public static String dbStringToCamelStyle(String str){  if (str != null) {    StringBuilder sb=new StringBuilder();    sb.append(String.valueOf(str.charAt(0)).toUpperCase());    for (int i=1; i < str.length(); i++) {      char c=str.charAt(i);      if (c != '_') {        sb.append(c);      } else {        if (i + 1 < str.length()) {          sb.append(String.valueOf(str.charAt(i + 1)).toUpperCase());          i++;        }      }    }    return sb.toString();  }  return null;}  }
class C{  public boolean hasArrayInit(){  return getArrayInitOpt().getNumChild() != 0;}  }
class C{  protected void fireGraphEvent(Table t,int first,int last,int col,int type){  String table=(t == getNodeTable() ? NODES : EDGES);  if (type != EventConstants.UPDATE) {    fireTupleEvent(t,first,last,type);  }  if (!m_listeners.isEmpty()) {    Object[] lstnrs=m_listeners.getArray();    for (int i=0; i < lstnrs.length; ++i) {      ((GraphListener)lstnrs[i]).graphChanged(this,table,first,last,col,type);    }  }}  }
class C{  public void init() throws SpaceComponentsInitializeException {  _componentsHandlers=_space.getSpaceComponentHandlers();  try {    SpaceInitializationIndicator.setInitializer();    for (Iterator<ISpaceComponentsHandler> iterator=_componentsHandlers.iterator(); iterator.hasNext(); ) {      ISpaceComponentsHandler handler=iterator.next();      if (handler.isRecoverySupported())       handler.initComponents(false);    }  }  finally {    SpaceInitializationIndicator.unsetInitializer();  }  _space.addInternalSpaceModeListener(this);}  }
class C{  @Override public Scan open(){  SortScan ss1=(SortScan)sp1.open();  SortScan ss2=(SortScan)sp2.open();  return new MergeJoinScan(ss1,ss2,fldName1,fldName2);}  }
class C{  @Override public void connect() throws AWSIotException {  super.connect();}  }
class C{  public boolean remove(Comparator c){  for (int i=0; i < m_size; ++i) {    if (m_cmp[i].equals(c)) {      System.arraycopy(m_cmp,i + 1,m_cmp,i,m_size - i);      --m_size;      return true;    }  }  return false;}  }
class C{  @Override public void pause(){  Log.d(SBMP_TAG,"pause() 424");  if (pmInterface == null) {    if (!ConnectPlayMediaService()) {      ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);    }  }  try {    pmInterface.pause(ServiceBackedMediaPlayer.this.sessionId);  } catch (  RemoteException e) {    e.printStackTrace();    ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);  }}  }
class C{  public boolean profile(){  return soot.PhaseOptions.getBoolean(options,"profile");}  }
class C{  private void initView(){  this.initContentView();  this.initLoadingView();}  }
class C{  public static int evaluateTransitionColor(float fraction,int startValue,int endValue){  int startInt=startValue;  int startA=(startInt >> 24) & 0xff;  int startR=(startInt >> 16) & 0xff;  int startG=(startInt >> 8) & 0xff;  int startB=startInt & 0xff;  int endInt=endValue;  int endA=(endInt >> 24) & 0xff;  int endR=(endInt >> 16) & 0xff;  int endG=(endInt >> 8) & 0xff;  int endB=endInt & 0xff;  return ((startA + (int)(fraction * (endA - startA))) << 24) | ((startR + (int)(fraction * (endR - startR))) << 16) | ((startG + (int)(fraction * (endG - startG))) << 8)| ((startB + (int)(fraction * (endB - startB))));}  }
class C{  public void start(){  this.prestartAllCoreThreads();}  }
class C{  public boolean isApplicable(){  return getDoc().getNumberOfReads() > 0;}  }
class C{  public String namespace(){  return theNamespace;}  }
class C{  public SecureAddAppEventQuery addAppEvent(ServiceActor actor,int userId,int activityId){  return new SecureAddAppEventQuery(getClient(),actor,userId,activityId);}  }
class C{  public static Map<String,String> toMap(String s){  Map<String,String> newMap=new HashMap<String,String>();  if (s.startsWith("{") && s.endsWith("}")) {    s=s.substring(1,s.length() - 1);    String[] entries=s.split("\\,\\s");    for (    String entry : entries) {      String[] nv=entry.split("\\=");      if (nv.length == 2) {        newMap.put(nv[0],nv[1]);      }    }  } else {    throw new IllegalArgumentException("String is not from Map.toString()");  }  return newMap;}  }
class C{  public static String formatTimestamp(long millis){  return ISO8601Utils.format(new Date(millis),true);}  }
class C{  public BigDecimal bigDecimalValue(final int scale,final int roundingMode){  return new BigDecimal(numerator).divide(new BigDecimal(denominator),scale,roundingMode);}  }
class C{  public void addSupportedType(@NotNull AnnotatedClass object){  mSupportedTypesMap.put(TypeUtils.getOuterClassType(object.getType()),object);  mSupportedTypes.add(object.getElement());}  }
class C{  @Override public void stopPropagation(){  stopPropagation=true;}  }
class C{  public static int monthsBetween(Date startDate,Date endDate){  final Months days=Months.monthsBetween(new DateTime(startDate),new DateTime(endDate));  return days.getMonths();}  }
class C{  @deprecated public Object clone(){  try {    CompactCharArray other=(CompactCharArray)super.clone();    other.values=((char[])this.values.clone());    other.indices=((char[])this.indices.clone());    if (this.hashes != null)     other.hashes=((int[])this.hashes.clone());    return other;  } catch (  CloneNotSupportedException e) {    throw new IllegalStateException();  }}  }
class C{  public void updateSyncStateFromAndroid(){  if (AndroidSyncSettings.isSyncEnabled(mContext)) {    start();  } else {    stop();  }}  }
class C{  public static EventHandler<ActionEvent> createNextAction(final ConnectionStatus state,final MqttAsyncConnection connection,final MqttConnectionViewManager connectionManager){  if (state == null) {    return createEmptyAction();  }switch (state) {case CONNECTED:    return createDisconnectAction(connectionManager,connection);case CONNECTING:  return createEmptyAction();case DISCONNECTED:return createConnectAction(connectionManager,connection);case DISCONNECTING:return createEmptyAction();case NOT_CONNECTED:return createConnectAction(connectionManager,connection);default :return createEmptyAction();}}  }
class C{  public int size(String group){  TupleSet tset=getGroup(group);  return (tset == null ? 0 : tset.getTupleCount());}  }
class C{  public IgnoreResourcesDialog(Shell shell,IResource[] resources){  super(shell);  this.resources=resources;  IDialogSettings workbenchSettings=SVNUIPlugin.getPlugin().getDialogSettings();  this.settings=workbenchSettings.getSection("IgnoreResourcesDialog");  if (settings == null) {    this.settings=workbenchSettings.addNewSection("IgnoreResourcesDialog");  }  try {    selectedAction=settings.getInt(ACTION_KEY);  } catch (  NumberFormatException e) {    selectedAction=ADD_NAME_ENTRY;  }}  }
class C{  public static float vibration(float x,float totalLength,float A,float B,float C,float D){  x*=totalLength;  return (float)(A * Math.exp(-B * x) * Math.sin(C * x + D));}  }
class C{  public static final String toString(byte[] ba,int offset,int length){  char[] buf=new char[length * 2];  for (int i=0, j=0, k; i < length; ) {    k=ba[offset + i++];    buf[j++]=HEX_DIGITS[(k >>> 4) & 0x0F];    buf[j++]=HEX_DIGITS[k & 0x0F];  }  return new String(buf);}  }
class C{  public String print(String aClassName,String aFieldOrMtdSignature,Tag aTag){  return tagPrinter.print(aClassName,aFieldOrMtdSignature,aTag);}  }
class C{  public ToolbarTablet(Context context,AttributeSet attrs){  super(context,attrs);}  }
class C{  public void track(String path,Object marker,FileDeleteStrategy deleteStrategy){  if (path == null) {    throw new NullPointerException("The path must not be null");  }  addTracker(path,marker,deleteStrategy);}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TShortObjectHashMap)) {    return false;  }  TShortObjectHashMap that=(TShortObjectHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure(that));}  }
class C{  protected double filterStep(final double h,final boolean forward,final boolean acceptSmall) throws MathIllegalArgumentException {  double filteredH=h;  if (FastMath.abs(h) < minStep) {    if (acceptSmall) {      filteredH=forward ? minStep : -minStep;    } else {      throw new MathIllegalArgumentException(LocalizedODEFormats.MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION,FastMath.abs(h),minStep,true);    }  }  if (filteredH > maxStep) {    filteredH=maxStep;  } else   if (filteredH < -maxStep) {    filteredH=-maxStep;  }  return filteredH;}  }
class C{  private void swap(Item item1,Item item2){  int idx1=item1.idx;  int idx2=item2.idx;  heap.set(idx2,item1);  heap.set(idx1,item2);  item1.idx=idx2;  item2.idx=idx1;}  }
class C{  private NotificationCompat.Builder createNotificationBuilder(){  NotificationCompat.Builder notificationBuilder=new NotificationCompat.Builder(getContext());  notificationBuilder.setSmallIcon(R.drawable.notification_icon).setAutoCancel(true);  notificationBuilder.setColor(getContext().getResources().getColor(R.color.primary));  return notificationBuilder;}  }
class C{  public static int randRange(int min,int max){  int mod=max - min;  double val=Math.ceil(Math.random() * 1000000) % mod;  return (int)val + min;}  }
class C{  public void endSubreport(String subreport){  if (subreport.isEmpty()) {    LOG.error(String.format("Tried to end non-existing report \"%s\"",subreport));    return;  }  String topSubreport=subreports.peek();  if (topSubreport.equals(subreport)) {    subreports.pop();    addLogEntry(new SubreportEndEntry(subreport));    return;  }  LOG.error(String.format("Tried to end non-existing report \"%s\"",subreport));}  }
class C{  public SendResultBehaviour(CalcResults rResult){  super();  Result=rResult;}  }
class C{  public GeneralRuntimeException(String msg){  super(msg);}  }
class C{  @Override public double[] makeInverseCumulativeTestPoints(){  double[] points=makeCumulativeTestValues();  double[] points2=new double[points.length - 4];  System.arraycopy(points,4,points2,0,points2.length - 4);  return points2;}  }
class C{  public AdsGetClientsQuery(VkApiClient client,UserActor actor,int accountId){  super(client,"ads.getClients",Utils.buildParametrizedType(List.class,Client.class));  accessToken(actor.getAccessToken());  accountId(accountId);}  }
class C{  protected void wrapContent(){  mWidget.setMinWidth(100);  mWidget.setMinHeight(30);  int tw=mWidget.getMinWidth();  int th=mWidget.getMinHeight();  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {    mWidget.setWidth(tw);  }  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {    mWidget.setHeight(th);  }  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {    if (mWidget.getWidth() <= mWidget.getMinWidth()) {      mWidget.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);    }  }  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {    if (mWidget.getHeight() <= mWidget.getMinHeight()) {      mWidget.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);    }  }  mWidget.setBaselineDistance(0);}  }
class C{  public synchronized boolean compareAndRegister(SpaceMode spaceMode,ISpaceModeListener listener){  if (_spaceMode != spaceMode)   return false;  _primarySpaceModeListeners.addListener(listener);  return true;}  }
class C{  public DataSizeAction(String group,String field,int bins,int scale){  super(group,NO_SIZE);  m_dataField=field;  setScale(scale);  setBinCount(bins);}  }
class C{  public SecantSolver(final double relativeAccuracy,final double absoluteAccuracy){  super(relativeAccuracy,absoluteAccuracy);}  }
class C{  public boolean deleteFilesInWhiteList(){  return true;}  }
class C{  public String toString(long n){  StringBuilder buf=new StringBuilder();  for (long i=0; i < Math.min(n,length()); i++) {    buf.append(" ").append(get(i));  }  return buf.toString();}  }
class C{  private boolean removeGroupsInt(String[] oldGroups){  boolean removed=false;  for (int i=0; i < oldGroups.length; i++) {    removed|=groups.remove(oldGroups[i]);  }  return removed;}  }
class C{  private void initializeBasicVariables(final int startColumn){  basicVariables=new int[getWidth() - 1];  basicRows=new int[getHeight()];  Arrays.fill(basicVariables,-1);  for (int i=startColumn; i < getWidth() - 1; i++) {    Integer row=findBasicRow(i);    if (row != null) {      basicVariables[i]=row;      basicRows[row]=i;    }  }}  }
class C{  public int lastIndexOf(int value){  return lastIndexOf(_pos,value);}  }
class C{  public MCepDatagram(long setDuration,float[] coeffs){  super(setDuration);  this.coeffs=coeffs;}  }
class C{  public BoardAddTopicQuery addTopic(UserActor actor,int groupId,String title){  return new BoardAddTopicQuery(getClient(),actor,groupId,title);}  }
class C{  protected boolean isEnabledForSVNResource(ISVNLocalResource svnResource) throws SVNException {  if (svnResource.getResource() == null || !svnResource.getResource().exists()) {    return false;  }  return super.isEnabledForSVNResource(svnResource) || svnResource.getParent().isManaged();}  }
class C{  public AppsGetQuery fields(List<UserField> value){  return unsafeParam("fields",value);}  }
class C{  public boolean isAddColumnSupported(){  return false;}  }
class C{  public static long sign(final long x){  return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public static Map<String,Object> uploadImageAndParameters(HttpServletRequest request,String uploadField){  Locale locale=UtilHttp.getLocale(request);  Map<String,Object> results=FastMap.newInstance();  Map<String,String> formInput=FastMap.newInstance();  results.put("formInput",formInput);  ServletFileUpload fu=new ServletFileUpload(new DiskFileItemFactory(10240,new File(new File("runtime"),"tmp")));  FileUploadProgressListener listener=new FileUploadProgressListener();  fu.setProgressListener(listener);  request.getSession().setAttribute("uploadProgressListener",listener);  List<FileItem> lst=null;  try {    lst=UtilGenerics.checkList(fu.parseRequest(request));  } catch (  FileUploadException e4) {    return ServiceUtil.returnError(e4.getMessage());  }  if (lst.size() == 0) {    String errMsg=UtilProperties.getMessage(err_resource,"layoutEvents.no_files_uploaded",locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return ServiceUtil.returnError(UtilProperties.getMessage(err_resource,"layoutEvents.no_files_uploaded",locale));  }  FileItem fi=null;  FileItem imageFi=null;  for (int i=0; i < lst.size(); i++) {    fi=lst.get(i);    String fieldName=fi.getFieldName();    String fieldStr=fi.getString();    if (fi.isFormField()) {      formInput.put(fieldName,fieldStr);      request.setAttribute(fieldName,fieldStr);    }    if (fieldName.equals(uploadField)) {      imageFi=fi;      results.put("uploadMimeType",fi.getContentType());    }  }  if (imageFi == null) {    String errMsg=UtilProperties.getMessage(err_resource,"layoutEvents.image_null",UtilMisc.toMap("imageFi",imageFi),locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return null;  }  byte[] imageBytes=imageFi.get();  ByteBuffer byteWrap=ByteBuffer.wrap(imageBytes);  results.put("imageData",byteWrap);  results.put("imageFileName",imageFi.getName());  return results;}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  private void processResultFromCamera(int destType,Intent intent) throws IOException {  int rotate=0;  ExifHelper exif=new ExifHelper();  String sourcePath=(this.allowEdit && this.croppedUri != null) ? FileHelper.stripFileProtocol(this.croppedUri.toString()) : FileHelper.stripFileProtocol(this.imageUri.toString());  if (this.encodingType == JPEG) {    try {      exif.createInFile(sourcePath);      exif.readExifData();      rotate=exif.getOrientation();    } catch (    IOException e) {      e.printStackTrace();    }  }  Bitmap bitmap=null;  Uri galleryUri=null;  if (this.saveToPhotoAlbum) {    galleryUri=Uri.fromFile(new File(getPicutresPath()));    if (this.allowEdit && this.croppedUri != null) {      writeUncompressedImage(this.croppedUri,galleryUri);    } else {      writeUncompressedImage(this.imageUri,galleryUri);    }    refreshGallery(galleryUri);  }  if (destType == DATA_URL) {    bitmap=getScaledBitmap(sourcePath);    if (bitmap == null) {      bitmap=(Bitmap)intent.getExtras().get("data");    }    if (bitmap == null) {      Log.d(LOG_TAG,"I either have a null image path or bitmap");      this.failPicture("Unable to create bitmap!");      return;    }    if (rotate != 0 && this.correctOrientation) {      bitmap=getRotatedBitmap(rotate,bitmap,exif);    }    this.processPicture(bitmap,this.encodingType);    if (!this.saveToPhotoAlbum) {      checkForDuplicateImage(DATA_URL);    }  } else   if (destType == FILE_URI || destType == NATIVE_URI) {    if (this.targetHeight == -1 && this.targetWidth == -1 && this.mQuality == 100 && !this.correctOrientation) {      if (this.saveToPhotoAlbum) {        this.callbackContext.success(galleryUri.toString());      } else {        Uri uri=Uri.fromFile(createCaptureFile(this.encodingType,System.currentTimeMillis() + ""));        if (this.allowEdit && this.croppedUri != null) {          writeUncompressedImage(this.croppedUri,uri);        } else {          writeUncompressedImage(this.imageUri,uri);        }        this.callbackContext.success(uri.toString());      }    } else {      Uri uri=Uri.fromFile(createCaptureFile(this.encodingType,System.currentTimeMillis() + ""));      bitmap=getScaledBitmap(sourcePath);      if (bitmap == null) {        Log.d(LOG_TAG,"I either have a null image path or bitmap");        this.failPicture("Unable to create bitmap!");        return;      }      if (rotate != 0 && this.correctOrientation) {        bitmap=getRotatedBitmap(rotate,bitmap,exif);      }      OutputStream os=this.cordova.getActivity().getContentResolver().openOutputStream(uri);      CompressFormat compressFormat=encodingType == JPEG ? CompressFormat.JPEG : CompressFormat.PNG;      bitmap.compress(compressFormat,this.mQuality,os);      os.close();      if (this.encodingType == JPEG) {        String exifPath;        exifPath=uri.getPath();        exif.createOutFile(exifPath);        exif.writeExifData();      }      this.callbackContext.success(uri.toString());    }  } else {    throw new IllegalStateException();  }  this.cleanup(FILE_URI,this.imageUri,galleryUri,bitmap);  bitmap=null;}  }
class C{  @Override public Object illegal(Metadata<Enum> metadata){  throwExceptionOnEmptyArray(metadata);  String defaultOptional=metadata.getAnnotation().illegal();  Type type=metadata.getType();  if (!defaultOptional.isEmpty()) {    return safetyCast.with(defaultOptional,metadata.getType());  } else   if (type.equals(String.class)) {    return safetyCast.with("",type);  } else {    return safetyCast.with(0,type);  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (minStart > maxStart || maxStart > minStop || minStop > maxStop) {    throw new InvalidObjectException("invalid times");  }}  }
class C{  public boolean containsKey(Object key){  return backedMap.containsKey(key);}  }
class C{  public boolean isRotationEnabled(){  return mIsRotationEnabled;}  }
class C{  public TokenMarker(){}  }
class C{  private void removeOptionFields(Box box,GraphicPanelFieldManager fieldConfigManager){  if (optionPanel != null) {    box.remove(optionPanel);    for (    FieldConfigBase field : optionFieldList) {      fieldConfigManager.removeField(field);    }    optionFieldList.clear();    optionPanel=null;    box.revalidate();  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALARMS\"";  db.execSQL(sql);}  }
class C{  public ConditionStack discoverLoadableContextHierarchy(Class clazz,ClassFieldContext directClassFieldContext){  Stack<LoadableComponentContext> stack=new Stack<>();  if (directClassFieldContext != null) {    directClassFieldContext.toLoadableContextList().stream().forEach(null);  }  ConditionHierarchyNode treeNode=findNode(clazz,treeRootNode);  if (treeNode == null) {    LOG.debug("Didin't found class {} in the loadable component hierarchy tree",clazz.getName());  }  while (treeNode != null) {    for (    LoadableComponentContext lodableContext : treeNode.getLoadableFieldContext().toLoadableContextList()) {      stack.add(lodableContext);    }    treeNode=treeNode.getParent();  }  return new ConditionStack(stack);}  }
class C{  @Override public boolean accept(File file){  boolean newer=FileUtils.isFileNewer(file,cutoff);  return acceptOlder ? !newer : newer;}  }
class C{  protected void processXMLLangAttributes(XMLAttributes attributes){  String language=attributes.getValue(NamespaceContext.XML_URI,"lang");  if (language != null) {    fCurrentLanguage=language;    saveLanguage(fCurrentLanguage);  }}  }
class C{  public HttpClient(String url,Map<String,Object> parameters,Map<String,String> headers){  this.url=url;  this.parameters=parameters;  this.headers=headers;}  }
class C{  private void checkMatrixDimensions(Matrix B){  if (B.m != m || B.n != n) {    throw new IllegalArgumentException("Matrix dimensions must agree.");  }}  }
class C{  public static AsyncCommandResult executeAsync(String command,File dir){  return executeAsync(new SimpleCommand(command),dir);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Search_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200711,skillcaster,skillname);}  }
class C{  public EnterMonitorStmt newEnterMonitorStmt(Value op){  return new GEnterMonitorStmt(op);}  }
class C{  public Builder shadowSize(Point shadowSize){  this.shadowSize=shadowSize;  return this;}  }
class C{  @Override public void onTextChanged(CharSequence s,int start,int before,int count){  isSendVisible=s != null && s.length() > 0;  setSendBtn();  if (isSendVisible) {    chatView.sending();  }}  }
class C{  public static Map<String,Object> createOrder(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  Security security=ctx.getSecurity();  List<GenericValue> toBeStored=new LinkedList<GenericValue>();  Locale locale=(Locale)context.get("locale");  Map<String,Object> successResult=ServiceUtil.returnSuccess();  GenericValue userLogin=(GenericValue)context.get("userLogin");  String orderTypeId=(String)context.get("orderTypeId");  String partyId=(String)context.get("partyId");  String billFromVendorPartyId=(String)context.get("billFromVendorPartyId");  Map<String,Object> resultSecurity=new HashMap<String,Object>();  boolean hasPermission=OrderServices.hasPermission(orderTypeId,partyId,userLogin,"CREATE",security);  if (!hasPermission) {    partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,resultSecurity,"ORDERMGR","_CREATE");    if (resultSecurity.size() > 0) {      return resultSecurity;    }  }  String productStoreId=(String)context.get("productStoreId");  GenericValue productStore=null;  if ((orderTypeId.equals("SALES_ORDER")) && (UtilValidate.isNotEmpty(productStoreId))) {    try {      productStore=EntityQuery.use(delegator).from("ProductStore").where("productStoreId",productStoreId).cache().queryOne();    } catch (    GenericEntityException e) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCouldNotFindProductStoreWithID",UtilMisc.toMap("productStoreId",productStoreId),locale) + e.toString());    }  }  boolean isImmediatelyFulfilled=false;  if (productStore != null) {    isImmediatelyFulfilled="Y".equals(productStore.getString("isImmediatelyFulfilled"));  }  successResult.put("orderTypeId",orderTypeId);  GenericValue orderType=null;  try {    orderType=EntityQuery.use(delegator).from("OrderType").where("orderTypeId",orderTypeId).cache().queryOne();  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorOrderTypeLookupFailed",locale) + e.toString());  }  if (orderType == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorInvalidOrderTypeWithID",UtilMisc.toMap("orderTypeId",orderTypeId),locale));  }  List<GenericValue> orderItems=UtilGenerics.checkList(context.get("orderItems"));  if (orderItems.size() < 1) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"items.none",locale));  }  List<GenericValue> orderAdjustments=UtilGenerics.checkList(context.get("orderAdjustments"));  List<GenericValue> orderItemShipGroupInfo=UtilGenerics.checkList(context.get("orderItemShipGroupInfo"));  List<GenericValue> orderItemPriceInfo=UtilGenerics.checkList(context.get("orderItemPriceInfos"));  List<String> errorMessages=FastList.newInstance();  Map<String,BigDecimal> normalizedItemQuantities=FastMap.newInstance();  Map<String,String> normalizedItemNames=FastMap.newInstance();  Map<String,GenericValue> itemValuesBySeqId=FastMap.newInstance();  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();  for (  GenericValue orderItem : orderItems) {    itemValuesBySeqId.put(orderItem.getString("orderItemSeqId"),orderItem);    String currentProductId=orderItem.getString("productId");    if (currentProductId != null) {      if (normalizedItemQuantities.get(currentProductId) == null) {        normalizedItemQuantities.put(currentProductId,orderItem.getBigDecimal("quantity"));        normalizedItemNames.put(currentProductId,orderItem.getString("itemDescription"));      } else {        BigDecimal currentQuantity=normalizedItemQuantities.get(currentProductId);        normalizedItemQuantities.put(currentProductId,currentQuantity.add(orderItem.getBigDecimal("quantity")));      }      try {        dispatcher.runSync("countProductQuantityOrdered",UtilMisc.<String,Object>toMap("productId",currentProductId,"quantity",orderItem.getBigDecimal("quantity"),"userLogin",userLogin));      } catch (      GenericServiceException e1) {        Debug.logError(e1,"Error calling countProductQuantityOrdered service",module);        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCallingCountProductQuantityOrderedService",locale) + e1.toString());      }    }  }  if (!"PURCHASE_ORDER".equals(orderTypeId) && productStoreId == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorTheProductStoreIdCanOnlyBeNullForPurchaseOrders",locale));  }  Timestamp orderDate=(Timestamp)context.get("orderDate");  for (  String currentProductId : normalizedItemQuantities.keySet()) {    BigDecimal currentQuantity=normalizedItemQuantities.get(currentProductId);    String itemName=normalizedItemNames.get(currentProductId);    GenericValue product=null;    try {      product=EntityQuery.use(delegator).from("Product").where("productId",currentProductId).cache().queryOne();    } catch (    GenericEntityException e) {      String errMsg=UtilProperties.getMessage(resource_error,"product.not_found",new Object[]{currentProductId},locale);      Debug.logError(e,errMsg,module);      errorMessages.add(errMsg);      continue;    }    if (product == null) {      String errMsg=UtilProperties.getMessage(resource_error,"product.not_found",new Object[]{currentProductId},locale);      Debug.logError(errMsg,module);      errorMessages.add(errMsg);      continue;    }    if ("SALES_ORDER".equals(orderTypeId)) {      if (product.get("introductionDate") != null && nowTimestamp.before(product.getTimestamp("introductionDate"))) {        String excMsg=UtilProperties.getMessage(resource_error,"product.not_yet_for_sale",new Object[]{getProductName(product,itemName),product.getString("productId")},locale);        Debug.logWarning(excMsg,module);        errorMessages.add(excMsg);        continue;      }    }    if ("SALES_ORDER".equals(orderTypeId)) {      boolean salesDiscontinuationFlag=false;      if (orderDate != null && product.get("salesDiscontinuationDate") != null) {        salesDiscontinuationFlag=orderDate.after(product.getTimestamp("salesDiscontinuationDate")) && nowTimestamp.after(product.getTimestamp("salesDiscontinuationDate"));      } else       if (product.get("salesDiscontinuationDate") != null) {        salesDiscontinuationFlag=nowTimestamp.after(product.getTimestamp("salesDiscontinuationDate"));      }      if (salesDiscontinuationFlag) {        String excMsg=UtilProperties.getMessage(resource_error,"product.no_longer_for_sale",new Object[]{getProductName(product,itemName),product.getString("productId")},locale);        Debug.logWarning(excMsg,module);        errorMessages.add(excMsg);        continue;      }    }    if ("SALES_ORDER".equals(orderTypeId)) {      try {        Map<String,Object> invReqResult=dispatcher.runSync("isStoreInventoryAvailableOrNotRequired",UtilMisc.toMap("productStoreId",productStoreId,"productId",product.get("productId"),"product",product,"quantity",currentQuantity));        if (ServiceUtil.isError(invReqResult)) {          errorMessages.add((String)invReqResult.get(ModelService.ERROR_MESSAGE));          List<String> errMsgList=UtilGenerics.checkList(invReqResult.get(ModelService.ERROR_MESSAGE_LIST));          errorMessages.addAll(errMsgList);        } else         if (!"Y".equals(invReqResult.get("availableOrNotRequired"))) {          String invErrMsg=UtilProperties.getMessage(resource_error,"product.out_of_stock",new Object[]{getProductName(product,itemName),currentProductId},locale);          Debug.logWarning(invErrMsg,module);          errorMessages.add(invErrMsg);          continue;        }      } catch (      GenericServiceException e) {        String errMsg="Fatal error calling inventory checking services: " + e.toString();        Debug.logError(e,errMsg,module);        errorMessages.add(errMsg);      }    }  }  List<GenericValue> workEfforts=UtilGenerics.checkList(context.get("workEfforts"));  for (  GenericValue orderItem : orderItems) {    if ("RENTAL_ORDER_ITEM".equals(orderItem.getString("orderItemTypeId"))) {      if (UtilValidate.isEmpty(workEfforts)) {        String errMsg="Work Efforts missing for ordertype RENTAL_ORDER_ITEM " + "Product: " + orderItem.getString("productId");        Debug.logError(errMsg,module);        errorMessages.add(errMsg);        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderRentalOrderItems",locale));      }      for (      GenericValue workEffort : workEfforts) {        if (workEffort.getString("workEffortId").equals(orderItem.getString("orderItemSeqId"))) {          List<GenericValue> selFixedAssetProduct=null;          try {            selFixedAssetProduct=EntityQuery.use(delegator).from("FixedAssetProduct").where("productId",orderItem.getString("productId"),"fixedAssetProductTypeId","FAPT_USE").filterByDate(nowTimestamp,"fromDate","thruDate").queryList();          } catch (          GenericEntityException e) {            String excMsg="Could not find related Fixed Asset for the product: " + orderItem.getString("productId");            Debug.logError(excMsg,module);            errorMessages.add(excMsg);            return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderCouldNotFindRelatedFixedAssetForTheProduct",UtilMisc.toMap("productId",orderItem.getString("productId")),locale));          }          if (UtilValidate.isNotEmpty(selFixedAssetProduct)) {            Iterator<GenericValue> firstOne=selFixedAssetProduct.iterator();            if (firstOne.hasNext()) {              GenericValue fixedAssetProduct=delegator.makeValue("FixedAssetProduct");              fixedAssetProduct=firstOne.next();              workEffort.set("fixedAssetId",fixedAssetProduct.get("fixedAssetId"));              workEffort.set("quantityToProduce",orderItem.get("quantity"));              workEffort.set("createdByUserLogin",userLogin.get("userLoginId"));            }          }          break;        }      }    }  }  if (errorMessages.size() > 0) {    return ServiceUtil.returnError(errorMessages);  }  String initialStatus="ORDER_CREATED";  successResult.put("statusId",initialStatus);  String orderId=(String)context.get("orderId");  String orgPartyId=null;  if (productStore != null) {    orgPartyId=productStore.getString("payToPartyId");  } else   if (billFromVendorPartyId != null) {    orgPartyId=billFromVendorPartyId;  }  if (UtilValidate.isNotEmpty(orgPartyId)) {    Map<String,Object> getNextOrderIdContext=FastMap.newInstance();    getNextOrderIdContext.putAll(context);    getNextOrderIdContext.put("partyId",orgPartyId);    getNextOrderIdContext.put("userLogin",userLogin);    if ((orderTypeId.equals("SALES_ORDER")) || (productStoreId != null)) {      getNextOrderIdContext.put("productStoreId",productStoreId);    }    if (UtilValidate.isEmpty(orderId)) {      try {        getNextOrderIdContext=ctx.makeValidContext("getNextOrderId","IN",getNextOrderIdContext);        Map<String,Object> getNextOrderIdResult=dispatcher.runSync("getNextOrderId",getNextOrderIdContext);        if (ServiceUtil.isError(getNextOrderIdResult)) {          String errMsg=UtilProperties.getMessage(resource_error,"OrderErrorGettingNextOrderIdWhileCreatingOrder",locale);          return ServiceUtil.returnError(errMsg,null,null,getNextOrderIdResult);        }        orderId=(String)getNextOrderIdResult.get("orderId");      } catch (      GenericServiceException e) {        String errMsg=UtilProperties.getMessage(resource_error,"OrderCaughtGenericServiceExceptionWhileGettingOrderId",locale);        Debug.logError(e,errMsg,module);        return ServiceUtil.returnError(errMsg);      }    }  }  if (UtilValidate.isEmpty(orderId)) {    orderId=delegator.getNextSeqId("OrderHeader");  }  String billingAccountId=(String)context.get("billingAccountId");  if (orderDate == null) {    orderDate=nowTimestamp;  }  Map<String,Object> orderHeaderMap=UtilMisc.<String,Object>toMap("orderId",orderId,"orderTypeId",orderTypeId,"orderDate",orderDate,"entryDate",nowTimestamp,"statusId",initialStatus,"billingAccountId",billingAccountId);  orderHeaderMap.put("orderName",context.get("orderName"));  if (isImmediatelyFulfilled) {    orderHeaderMap.put("needsInventoryIssuance","Y");  }  GenericValue orderHeader=delegator.makeValue("OrderHeader",orderHeaderMap);  String salesChannelEnumId=(String)context.get("salesChannelEnumId");  if ((salesChannelEnumId == null) || salesChannelEnumId.equals("UNKNWN_SALES_CHANNEL")) {    if (orderTypeId.equals("SALES_ORDER") && (productStore != null)) {      salesChannelEnumId=productStore.getString("defaultSalesChannelEnumId");    }    if (salesChannelEnumId == null) {      salesChannelEnumId="UNKNWN_SALES_CHANNEL";    }  }  orderHeader.set("salesChannelEnumId",salesChannelEnumId);  if (context.get("currencyUom") != null) {    orderHeader.set("currencyUom",context.get("currencyUom"));  }  if (context.get("firstAttemptOrderId") != null) {    orderHeader.set("firstAttemptOrderId",context.get("firstAttemptOrderId"));  }  if (context.get("grandTotal") != null) {    orderHeader.set("grandTotal",context.get("grandTotal"));  }  if (UtilValidate.isNotEmpty(context.get("visitId"))) {    orderHeader.set("visitId",context.get("visitId"));  }  if (UtilValidate.isNotEmpty(context.get("internalCode"))) {    orderHeader.set("internalCode",context.get("internalCode"));  }  if (UtilValidate.isNotEmpty(context.get("externalId"))) {    orderHeader.set("externalId",context.get("externalId"));  }  if (UtilValidate.isNotEmpty(context.get("originFacilityId"))) {    orderHeader.set("originFacilityId",context.get("originFacilityId"));  }  if (UtilValidate.isNotEmpty(context.get("productStoreId"))) {    orderHeader.set("productStoreId",context.get("productStoreId"));  }  if (UtilValidate.isNotEmpty(context.get("transactionId"))) {    orderHeader.set("transactionId",context.get("transactionId"));  }  if (UtilValidate.isNotEmpty(context.get("terminalId"))) {    orderHeader.set("terminalId",context.get("terminalId"));  }  if (UtilValidate.isNotEmpty(context.get("autoOrderShoppingListId"))) {    orderHeader.set("autoOrderShoppingListId",context.get("autoOrderShoppingListId"));  }  if (UtilValidate.isNotEmpty(context.get("webSiteId"))) {    orderHeader.set("webSiteId",context.get("webSiteId"));  }  if (userLogin != null && userLogin.get("userLoginId") != null) {    orderHeader.set("createdBy",userLogin.getString("userLoginId"));  }  String invoicePerShipment=EntityUtilProperties.getPropertyValue("AccountingConfig","create.invoice.per.shipment",delegator);  if (UtilValidate.isNotEmpty(invoicePerShipment)) {    orderHeader.set("invoicePerShipment",invoicePerShipment);  }  try {    delegator.create(orderHeader);  } catch (  GenericEntityException e) {    Debug.logError(e,"Cannot create OrderHeader entity; problems with insert",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderOrderCreationFailedPleaseNotifyCustomerService",locale));  }  String orderStatusSeqId=delegator.getNextSeqId("OrderStatus");  GenericValue orderStatus=delegator.makeValue("OrderStatus",UtilMisc.toMap("orderStatusId",orderStatusSeqId));  orderStatus.set("orderId",orderId);  orderStatus.set("statusId",orderHeader.getString("statusId"));  orderStatus.set("statusDatetime",nowTimestamp);  orderStatus.set("statusUserLogin",userLogin.getString("userLoginId"));  toBeStored.add(orderStatus);  List<GenericValue> orderItemGroups=UtilGenerics.checkList(context.get("orderItemGroups"));  if (UtilValidate.isNotEmpty(orderItemGroups)) {    for (    GenericValue orderItemGroup : orderItemGroups) {      orderItemGroup.set("orderId",orderId);      toBeStored.add(orderItemGroup);    }  }  for (  GenericValue orderItem : orderItems) {    orderItem.set("orderId",orderId);    toBeStored.add(orderItem);    String itemStatusId=delegator.getNextSeqId("OrderStatus");    GenericValue itemStatus=delegator.makeValue("OrderStatus",UtilMisc.toMap("orderStatusId",itemStatusId));    itemStatus.put("statusId",orderItem.get("statusId"));    itemStatus.put("orderId",orderId);    itemStatus.put("orderItemSeqId",orderItem.get("orderItemSeqId"));    itemStatus.put("statusDatetime",nowTimestamp);    itemStatus.set("statusUserLogin",userLogin.getString("userLoginId"));    toBeStored.add(itemStatus);  }  List<GenericValue> orderAttributes=UtilGenerics.checkList(context.get("orderAttributes"));  if (UtilValidate.isNotEmpty(orderAttributes)) {    for (    GenericValue oatt : orderAttributes) {      oatt.set("orderId",orderId);      toBeStored.add(oatt);    }  }  List<GenericValue> orderItemAttributes=UtilGenerics.checkList(context.get("orderItemAttributes"));  if (UtilValidate.isNotEmpty(orderItemAttributes)) {    for (    GenericValue oiatt : orderItemAttributes) {      oiatt.set("orderId",orderId);      toBeStored.add(oiatt);    }  }  List<String> orderInternalNotes=UtilGenerics.checkList(context.get("orderInternalNotes"));  if (UtilValidate.isNotEmpty(orderInternalNotes)) {    for (    String orderInternalNote : orderInternalNotes) {      try {        Map<String,Object> noteOutputMap=dispatcher.runSync("createOrderNote",UtilMisc.<String,Object>toMap("orderId",orderId,"internalNote","Y","note",orderInternalNote,"userLogin",userLogin));        if (ServiceUtil.isError(noteOutputMap)) {          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderNoteCannotBeCreated",UtilMisc.toMap("errorString",""),locale),null,null,noteOutputMap);        }      } catch (      GenericServiceException e) {        Debug.logError(e,"Error creating internal notes while creating order: " + e.toString(),module);        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderNoteCannotBeCreated",UtilMisc.toMap("errorString",e.toString()),locale));      }    }  }  List<String> orderNotes=UtilGenerics.checkList(context.get("orderNotes"));  if (UtilValidate.isNotEmpty(orderNotes)) {    for (    String orderNote : orderNotes) {      try {        Map<String,Object> noteOutputMap=dispatcher.runSync("createOrderNote",UtilMisc.<String,Object>toMap("orderId",orderId,"internalNote","N","note",orderNote,"userLogin",userLogin));        if (ServiceUtil.isError(noteOutputMap)) {          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderNoteCannotBeCreated",UtilMisc.toMap("errorString",""),locale),null,null,noteOutputMap);        }      } catch (      GenericServiceException e) {        Debug.logError(e,"Error creating notes while creating order: " + e.toString(),module);        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"OrderOrderNoteCannotBeCreated",UtilMisc.toMap("errorString",e.toString()),locale));      }    }  }  if (UtilValidate.isNotEmpty(workEfforts)) {    List<GenericValue> tempList=new LinkedList<GenericValue>();    for (    GenericValue workEffort : workEfforts) {      GenericValue workOrderItemFulfillment=delegator.makeValue("WorkOrderItemFulfillment");      GenericValue fixedAsset=null;      Debug.logInfo("find the fixedAsset",module);      try {        fixedAsset=EntityQuery.use(delegator).from("FixedAsset").where("fixedAssetId",workEffort.get("fixedAssetId")).queryOne();      } catch (      GenericEntityException e) {        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderFixedAssetNotFoundFixedAssetId",UtilMisc.toMap("fixedAssetId",workEffort.get("fixedAssetId")),locale));      }      if (fixedAsset == null) {        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderFixedAssetNotFoundFixedAssetId",UtilMisc.toMap("fixedAssetId",workEffort.get("fixedAssetId")),locale));      }      Debug.logInfo("find the techdatacalendar",module);      GenericValue techDataCalendar=null;      try {        techDataCalendar=fixedAsset.getRelatedOne("TechDataCalendar",false);      } catch (      GenericEntityException e) {        Debug.logInfo("TechData calendar does not exist yet so create for fixedAsset: " + fixedAsset.get("fixedAssetId"),module);      }      if (techDataCalendar == null) {        for (        GenericValue currentValue : tempList) {          if ("FixedAsset".equals(currentValue.getEntityName()) && currentValue.getString("fixedAssetId").equals(workEffort.getString("fixedAssetId"))) {            fixedAsset=currentValue;            break;          }        }        for (        GenericValue currentValue : tempList) {          if ("TechDataCalendar".equals(currentValue.getEntityName()) && currentValue.getString("calendarId").equals(fixedAsset.getString("calendarId"))) {            techDataCalendar=currentValue;            break;          }        }      }      if (techDataCalendar == null) {        techDataCalendar=delegator.makeValue("TechDataCalendar");        Debug.logInfo("create techdata calendar because it does not exist",module);        String calendarId=delegator.getNextSeqId("TechDataCalendar");        techDataCalendar.set("calendarId",calendarId);        tempList.add(techDataCalendar);        Debug.logInfo("update fixed Asset",module);        fixedAsset.set("calendarId",calendarId);        tempList.add(fixedAsset);      }      workOrderItemFulfillment.set("orderItemSeqId",workEffort.get("workEffortId").toString());      String workEffortId=delegator.getNextSeqId("WorkEffort");      workEffort.set("workEffortId",workEffortId);      workEffort.set("workEffortTypeId","ASSET_USAGE");      workEffort.set("currentStatusId","_NA_");      toBeStored.add(workEffort);      workOrderItemFulfillment.set("workEffortId",workEffortId);      workOrderItemFulfillment.set("orderId",orderId);      toBeStored.add(workOrderItemFulfillment);      Timestamp estimatedStartDate=workEffort.getTimestamp("estimatedStartDate");      Timestamp estimatedCompletionDate=workEffort.getTimestamp("estimatedCompletionDate");      long dayCount=(estimatedCompletionDate.getTime() - estimatedStartDate.getTime()) / 86400000;      while (--dayCount >= 0) {        GenericValue techDataCalendarExcDay=null;        Timestamp exceptionDateStartTime=UtilDateTime.getDayStart(new Timestamp(estimatedStartDate.getTime()),(int)dayCount);        try {          techDataCalendarExcDay=EntityQuery.use(delegator).from("TechDataCalendarExcDay").where("calendarId",fixedAsset.get("calendarId"),"exceptionDateStartTime",exceptionDateStartTime).queryOne();        } catch (        GenericEntityException e) {          Debug.logInfo(" techData excday record not found so creating........",module);        }        if (techDataCalendarExcDay == null) {          for (          GenericValue currentValue : tempList) {            if ("TechDataCalendarExcDay".equals(currentValue.getEntityName()) && currentValue.getString("calendarId").equals(fixedAsset.getString("calendarId")) && currentValue.getTimestamp("exceptionDateStartTime").equals(exceptionDateStartTime)) {              techDataCalendarExcDay=currentValue;              break;            }          }        }        if (techDataCalendarExcDay == null) {          techDataCalendarExcDay=delegator.makeValue("TechDataCalendarExcDay");          techDataCalendarExcDay.set("calendarId",fixedAsset.get("calendarId"));          techDataCalendarExcDay.set("exceptionDateStartTime",exceptionDateStartTime);          techDataCalendarExcDay.set("usedCapacity",BigDecimal.ZERO);          techDataCalendarExcDay.set("exceptionCapacity",fixedAsset.getBigDecimal("productionCapacity"));        }        BigDecimal newUsedCapacity=techDataCalendarExcDay.getBigDecimal("usedCapacity").add(workEffort.getBigDecimal("quantityToProduce"));        if (fixedAsset.get("productionCapacity") != null) {          if (newUsedCapacity.compareTo(techDataCalendarExcDay.getBigDecimal("exceptionCapacity")) > 0) {            String errMsg="ERROR: fixed_Asset_sold_out AssetId: " + workEffort.get("fixedAssetId") + " on date: "+ techDataCalendarExcDay.getString("exceptionDateStartTime");            Debug.logError(errMsg,module);            errorMessages.add(errMsg);            continue;          }        }        techDataCalendarExcDay.set("usedCapacity",newUsedCapacity);        tempList.add(techDataCalendarExcDay);      }    }    if (tempList.size() > 0) {      toBeStored.addAll(tempList);    }  }  if (errorMessages.size() > 0) {    return ServiceUtil.returnError(errorMessages);  }  if (UtilValidate.isNotEmpty(orderAdjustments)) {    for (    GenericValue orderAdjustment : orderAdjustments) {      try {        orderAdjustment.set("orderAdjustmentId",delegator.getNextSeqId("OrderAdjustment"));      } catch (      IllegalArgumentException e) {        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCouldNotGetNextSequenceIdForOrderAdjustmentCannotCreateOrder",locale));      }      orderAdjustment.set("orderId",orderId);      orderAdjustment.set("createdDate",UtilDateTime.nowTimestamp());      orderAdjustment.set("createdByUserLogin",userLogin.getString("userLoginId"));      if (UtilValidate.isEmpty(orderAdjustment.get("orderItemSeqId"))) {        orderAdjustment.set("orderItemSeqId",DataModelConstants.SEQ_ID_NA);      }      if (UtilValidate.isEmpty(orderAdjustment.get("shipGroupSeqId"))) {        orderAdjustment.set("shipGroupSeqId",DataModelConstants.SEQ_ID_NA);      }      toBeStored.add(orderAdjustment);    }  }  List<GenericValue> orderContactMechs=UtilGenerics.checkList(context.get("orderContactMechs"));  if (UtilValidate.isNotEmpty(orderContactMechs)) {    for (    GenericValue ocm : orderContactMechs) {      ocm.set("orderId",orderId);      toBeStored.add(ocm);    }  }  List<GenericValue> orderItemContactMechs=UtilGenerics.checkList(context.get("orderItemContactMechs"));  if (UtilValidate.isNotEmpty(orderItemContactMechs)) {    for (    GenericValue oicm : orderItemContactMechs) {      oicm.set("orderId",orderId);      toBeStored.add(oicm);    }  }  List<String> dropShipGroupIds=FastList.newInstance();  if (UtilValidate.isNotEmpty(orderItemShipGroupInfo)) {    for (    GenericValue valueObj : orderItemShipGroupInfo) {      valueObj.set("orderId",orderId);      if ("OrderItemShipGroup".equals(valueObj.getEntityName())) {        if (valueObj.get("carrierRoleTypeId") == null) {          valueObj.set("carrierRoleTypeId","CARRIER");        }        if (!UtilValidate.isEmpty(valueObj.getString("supplierPartyId"))) {          dropShipGroupIds.add(valueObj.getString("shipGroupSeqId"));        }      } else       if ("OrderAdjustment".equals(valueObj.getEntityName())) {        if (UtilValidate.isEmpty(valueObj.get("orderItemSeqId"))) {          valueObj.set("orderItemSeqId",DataModelConstants.SEQ_ID_NA);        }        valueObj.set("orderAdjustmentId",delegator.getNextSeqId("OrderAdjustment"));        valueObj.set("createdDate",UtilDateTime.nowTimestamp());        valueObj.set("createdByUserLogin",userLogin.getString("userLoginId"));      }      toBeStored.add(valueObj);    }  }  Map<String,List<String>> additionalPartyRole=UtilGenerics.checkMap(context.get("orderAdditionalPartyRoleMap"));  if (additionalPartyRole != null) {    for (    Map.Entry<String,List<String>> entry : additionalPartyRole.entrySet()) {      String additionalRoleTypeId=entry.getKey();      List<String> parties=entry.getValue();      if (parties != null) {        for (        String additionalPartyId : parties) {          toBeStored.add(delegator.makeValue("PartyRole",UtilMisc.toMap("partyId",additionalPartyId,"roleTypeId",additionalRoleTypeId)));          toBeStored.add(delegator.makeValue("OrderRole",UtilMisc.toMap("orderId",orderId,"partyId",additionalPartyId,"roleTypeId",additionalRoleTypeId)));        }      }    }  }  List<GenericValue> surveyResponses=UtilGenerics.checkList(context.get("orderItemSurveyResponses"));  if (UtilValidate.isNotEmpty(surveyResponses)) {    for (    GenericValue surveyResponse : surveyResponses) {      surveyResponse.set("orderId",orderId);      toBeStored.add(surveyResponse);    }  }  if (UtilValidate.isNotEmpty(orderItemPriceInfo)) {    for (    GenericValue oipi : orderItemPriceInfo) {      try {        oipi.set("orderItemPriceInfoId",delegator.getNextSeqId("OrderItemPriceInfo"));      } catch (      IllegalArgumentException e) {        return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCouldNotGetNextSequenceIdForOrderItemPriceInfoCannotCreateOrder",locale));      }      oipi.set("orderId",orderId);      toBeStored.add(oipi);    }  }  List<GenericValue> orderItemAssociations=UtilGenerics.checkList(context.get("orderItemAssociations"));  if (UtilValidate.isNotEmpty(orderItemAssociations)) {    for (    GenericValue orderItemAssociation : orderItemAssociations) {      if (orderItemAssociation.get("toOrderId") == null) {        orderItemAssociation.set("toOrderId",orderId);      } else       if (orderItemAssociation.get("orderId") == null) {        orderItemAssociation.set("orderId",orderId);      }      toBeStored.add(orderItemAssociation);    }  }  List<GenericValue> orderProductPromoUses=UtilGenerics.checkList(context.get("orderProductPromoUses"));  if (UtilValidate.isNotEmpty(orderProductPromoUses)) {    for (    GenericValue productPromoUse : orderProductPromoUses) {      productPromoUse.set("orderId",orderId);      toBeStored.add(productPromoUse);    }  }  Set<String> orderProductPromoCodes=UtilGenerics.checkSet(context.get("orderProductPromoCodes"));  if (UtilValidate.isNotEmpty(orderProductPromoCodes)) {    for (    String productPromoCodeId : orderProductPromoCodes) {      GenericValue orderProductPromoCode=delegator.makeValue("OrderProductPromoCode");      orderProductPromoCode.set("orderId",orderId);      orderProductPromoCode.set("productPromoCodeId",productPromoCodeId);      toBeStored.add(orderProductPromoCode);    }  }  Map<String,String> attributeRoleMap=salesAttributeRoleMap;  if ("PURCHASE_ORDER".equals(orderTypeId)) {    attributeRoleMap=purchaseAttributeRoleMap;  }  for (  Map.Entry<String,String> attributeRoleEntry : attributeRoleMap.entrySet()) {    if (UtilValidate.isNotEmpty(context.get(attributeRoleEntry.getKey()))) {      toBeStored.add(delegator.makeValue("PartyRole",UtilMisc.toMap("partyId",context.get(attributeRoleEntry.getKey()),"roleTypeId",attributeRoleEntry.getValue())));      toBeStored.add(delegator.makeValue("OrderRole",UtilMisc.toMap("orderId",orderId,"partyId",context.get(attributeRoleEntry.getKey()),"roleTypeId",attributeRoleEntry.getValue())));    }  }  String affiliateId=(String)context.get("affiliateId");  if (UtilValidate.isNotEmpty(affiliateId)) {    toBeStored.add(delegator.makeValue("OrderRole",UtilMisc.toMap("orderId",orderId,"partyId",affiliateId,"roleTypeId","AFFILIATE")));  }  String distributorId=(String)context.get("distributorId");  if (UtilValidate.isNotEmpty(distributorId)) {    toBeStored.add(delegator.makeValue("OrderRole",UtilMisc.toMap("orderId",orderId,"partyId",distributorId,"roleTypeId","DISTRIBUTOR")));  }  if (UtilValidate.isNotEmpty(context.get("productStoreId"))) {    try {      GenericValue productStoreRole=EntityQuery.use(delegator).from("ProductStoreRole").where("roleTypeId","VENDOR","productStoreId",context.get("productStoreId")).orderBy("-fromDate").filterByDate().queryFirst();      if (productStoreRole != null) {        toBeStored.add(delegator.makeValue("OrderRole",UtilMisc.toMap("orderId",orderId,"partyId",productStoreRole.get("partyId"),"roleTypeId","VENDOR")));      }    } catch (    GenericEntityException e) {      Debug.logError(e,"Error looking up Vendor for the current Product Store",module);    }  }  if (UtilValidate.isNotEmpty(context.get("webSiteId"))) {    try {      GenericValue webSiteRole=EntityQuery.use(delegator).from("WebSiteRole").where("roleTypeId","VENDOR","webSiteId",context.get("webSiteId")).orderBy("-fromDate").filterByDate().queryFirst();      if (webSiteRole != null) {        toBeStored.add(delegator.makeValue("OrderRole",UtilMisc.toMap("orderId",orderId,"partyId",webSiteRole.get("partyId"),"roleTypeId","VENDOR")));      }    } catch (    GenericEntityException e) {      Debug.logError(e,"Error looking up Vendor for the current Web Site",module);    }  }  List<GenericValue> orderPaymentInfos=UtilGenerics.checkList(context.get("orderPaymentInfo"));  if (UtilValidate.isNotEmpty(orderPaymentInfos)) {    for (    GenericValue valueObj : orderPaymentInfos) {      valueObj.set("orderId",orderId);      if ("OrderPaymentPreference".equals(valueObj.getEntityName())) {        if (valueObj.get("orderPaymentPreferenceId") == null) {          valueObj.set("orderPaymentPreferenceId",delegator.getNextSeqId("OrderPaymentPreference"));          valueObj.set("createdDate",UtilDateTime.nowTimestamp());          valueObj.set("createdByUserLogin",userLogin.getString("userLoginId"));        }        if (valueObj.get("statusId") == null) {          valueObj.set("statusId","PAYMENT_NOT_RECEIVED");        }      }      toBeStored.add(valueObj);    }  }  List<GenericValue> trackingCodeOrders=UtilGenerics.checkList(context.get("trackingCodeOrders"));  if (UtilValidate.isNotEmpty(trackingCodeOrders)) {    for (    GenericValue trackingCodeOrder : trackingCodeOrders) {      trackingCodeOrder.set("orderId",orderId);      toBeStored.add(trackingCodeOrder);    }  }  List<GenericValue> orderTerms=UtilGenerics.checkList(context.get("orderTerms"));  if (UtilValidate.isNotEmpty(orderTerms)) {    for (    GenericValue orderTerm : orderTerms) {      orderTerm.set("orderId",orderId);      if (orderTerm.get("orderItemSeqId") == null) {        orderTerm.set("orderItemSeqId","_NA_");      }      toBeStored.add(orderTerm);    }  }  String workEffortId=(String)context.get("workEffortId");  if (UtilValidate.isNotEmpty(workEffortId)) {    GenericValue orderHeaderWorkEffort=delegator.makeValue("OrderHeaderWorkEffort");    orderHeaderWorkEffort.set("orderId",orderId);    orderHeaderWorkEffort.set("workEffortId",workEffortId);    toBeStored.add(orderHeaderWorkEffort);  }  try {    delegator.storeAll(toBeStored);    List<String> resErrorMessages=new LinkedList<String>();    if (UtilValidate.isNotEmpty(orderItems)) {      for (      GenericValue orderItem : orderItems) {        String productId=(String)orderItem.get("productId");        GenericValue product=delegator.getRelatedOne("Product",orderItem,false);        if (product != null && ("SERVICE_PRODUCT".equals(product.get("productTypeId")) || "AGGREGATEDSERV_CONF".equals(product.get("productTypeId")))) {          String inventoryFacilityId=null;          if ("Y".equals(productStore.getString("oneInventoryFacility"))) {            inventoryFacilityId=productStore.getString("inventoryFacilityId");            if (UtilValidate.isEmpty(inventoryFacilityId)) {              Debug.logWarning("ProductStore with id " + productStoreId + " has Y for oneInventoryFacility but inventoryFacilityId is empty, returning false for inventory check",module);            }          } else {            List<GenericValue> productFacilities=null;            GenericValue productFacility=null;            try {              productFacilities=product.getRelated("ProductFacility",null,null,true);            } catch (            GenericEntityException e) {              Debug.logWarning(e,"Error invoking getRelated in isCatalogInventoryAvailable",module);            }            if (UtilValidate.isNotEmpty(productFacilities)) {              productFacility=EntityUtil.getFirst(productFacilities);              inventoryFacilityId=(String)productFacility.get("facilityId");            }          }          Map<String,Object> ripCtx=FastMap.newInstance();          if (UtilValidate.isNotEmpty(inventoryFacilityId) && UtilValidate.isNotEmpty(productId) && orderItem.getBigDecimal("quantity").compareTo(BigDecimal.ZERO) > 0) {            GenericValue permUserLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId","system").cache().queryOne();            ripCtx.put("productId",productId);            ripCtx.put("facilityId",inventoryFacilityId);            ripCtx.put("inventoryItemTypeId","SERIALIZED_INV_ITEM");            ripCtx.put("statusId","INV_AVAILABLE");            ripCtx.put("quantityAccepted",orderItem.getBigDecimal("quantity"));            ripCtx.put("quantityRejected",0.0);            ripCtx.put("userLogin",permUserLogin);            try {              Map<String,Object> ripResult=dispatcher.runSync("receiveInventoryProduct",ripCtx);              if (ServiceUtil.isError(ripResult)) {                String errMsg=ServiceUtil.getErrorMessage(ripResult);                @SuppressWarnings("unchecked") Collection<? extends String> map=(Collection<? extends String>)UtilMisc.<String,String>toMap("reasonCode","ReceiveInventoryServiceError","description",errMsg);                resErrorMessages.addAll(map);              }            } catch (            GenericServiceException e) {              Debug.logWarning(e,"Error invoking receiveInventoryProduct service in createOrder",module);            }          }        }      }    }    try {      reserveInventory(delegator,dispatcher,userLogin,locale,orderItemShipGroupInfo,dropShipGroupIds,itemValuesBySeqId,orderTypeId,productStoreId,resErrorMessages);    } catch (    GeneralException e) {      return ServiceUtil.returnError(e.getMessage());    }    if (resErrorMessages.size() > 0) {      return ServiceUtil.returnError(resErrorMessages);    }    successResult.put("orderId",orderId);  } catch (  GenericEntityException e) {    Debug.logError(e,"Problem with order storage or reservations",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCouldNotCreateOrderWriteError",locale) + e.getMessage() + ").");  }  return successResult;}  }
class C{  @VisibleForTesting static Intent createFindAndUploadAllCrashesIntent(Context context){  Intent intent=new Intent(context,MinidumpUploadService.class);  intent.setAction(ACTION_FIND_ALL);  return intent;}  }
class C{  public void jsFnCall(String jsString){  showDialog(jsString);}  }
class C{  public static Style blueGrey(){  final Style style=new Style();  style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_BLUE_GREY);  return style;}  }
class C{  static void removeValueStatic(@NotNull GrStatementOwner root,@NotNull BuildFileKey key){  GrMethodCall method=getMethodCallByPath(root,key.getPath());  if (method != null) {    method.delete();  }}  }
class C{  private static void registerSymbols(List<ClassLoader> classLoadersList,ConversionData data){  logger.info("Symbols supported:");  Reflections reflections=new Reflections(new ConfigurationBuilder().setScanners(new SubTypesScanner(false),new ResourcesScanner()).setUrls(ClasspathHelper.forClassLoader(classLoadersList.toArray(new ClassLoader[0]))).filterInputsBy(new FilterBuilder().include(FilterBuilder.prefix("com.sldeditor.importdata.esri.symbol"))));  Set<Class<? extends Object>> allClasses=reflections.getSubTypesOf(Object.class);  for (  Class<? extends Object> claszz : allClasses) {    try {      if (validClass(claszz,EsriSymbolInterface.class)) {        EsriSymbolInterface symbolObj=(EsriSymbolInterface)claszz.newInstance();        logger.info(symbolObj.getSymbolClass().getName());        data.addSymbol(symbolObj);      }    } catch (    InstantiationException e) {      e.printStackTrace();    }catch (    IllegalAccessException e) {      e.printStackTrace();    }  }}  }
class C{  public void onDestroy(){  this.stop();}  }
class C{  private static byte charToByte(char c){  return (byte)"0123456789ABCDEF".indexOf(c);}  }
class C{  @Override public boolean hasRaster(Symbolizer symbolizer){  return false;}  }
class C{  public PointVectorValuePair(final double[] point,final double[] value,final boolean copyArray){  super(copyArray ? ((point == null) ? null : point.clone()) : point,copyArray ? ((value == null) ? null : value.clone()) : value);}  }
class C{  public SearchResult search(String queryString,int page){  SearchResult searchResult=new SearchResult();  statsService.incrementSearchCount();  try {    IndexReader reader=DirectoryReader.open(FSDirectory.open(Paths.get(this.INDEXPATH)));    IndexSearcher searcher=new IndexSearcher(reader);    Analyzer analyzer=new CodeAnalyzer();    QueryParser parser=new QueryParser(CODEFIELD,analyzer);    Query query=parser.parse(queryString);    LOGGER.info("Searching for: " + query.toString(CODEFIELD));    LOGGER.searchLog(query.toString(CODEFIELD) + " " + page);    searchResult=this.doPagingSearch(reader,searcher,query,page);    reader.close();  } catch (  Exception ex) {    LOGGER.warning(" caught a " + ex.getClass() + "\n with message: "+ ex.getMessage());  }  return searchResult;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CANT_WHO_LEVEL(String value0){  return new SM_SYSTEM_MESSAGE(1400341,value0);}  }
class C{  static ClassLoader findClassLoader() throws ConfigurationError {  ClassLoader context=SecuritySupport.getContextClassLoader();  ClassLoader system=SecuritySupport.getSystemClassLoader();  ClassLoader chain=system;  while (true) {    if (context == chain) {      ClassLoader current=ObjectFactory.class.getClassLoader();      chain=system;      while (true) {        if (current == chain) {          return system;        }        if (chain == null) {          break;        }        chain=SecuritySupport.getParentClassLoader(chain);      }      return current;    }    if (chain == null) {      break;    }    chain=SecuritySupport.getParentClassLoader(chain);  }  return context;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GATHERING_INFO_UPGRADE(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1330067,value0,value1);}  }
class C{  public static APIUser createAPIUser(){  return new APIUser("APIUser" + internalId++);}  }
class C{  private static boolean matches(Pattern pattern,String input){  Matcher m=pattern.matcher(input);  return m.matches();}  }
class C{  public static <T extends Bean>Beans<T> load(String where,Object[] args,String orderby,int offset,int limit,Class<T> t){  Table mapping=(Table)t.getAnnotation(Table.class);  if (mapping == null) {    if (log.isErrorEnabled())     log.error("mapping missed in [" + t + "] declaretion");    return null;  }  return load(mapping.name(),where,args,orderby,offset,limit,t);}  }
class C{  public final boolean greaterEquals(SaveProtocolVersion version){  return isComparable(version) && (compareToVersion(version) >= 0);}  }
class C{  public static CipherTextIvMac encrypt(byte[] plaintext,SecretKeys secretKeys) throws GeneralSecurityException {  byte[] iv=generateIv();  Cipher aesCipherForEncryption=Cipher.getInstance(CIPHER_TRANSFORMATION);  aesCipherForEncryption.init(Cipher.ENCRYPT_MODE,secretKeys.getConfidentialityKey(),new IvParameterSpec(iv));  iv=aesCipherForEncryption.getIV();  byte[] byteCipherText=aesCipherForEncryption.doFinal(plaintext);  byte[] ivCipherConcat=CipherTextIvMac.ivCipherConcat(iv,byteCipherText);  byte[] integrityMac=generateMac(ivCipherConcat,secretKeys.getIntegrityKey());  return new CipherTextIvMac(byteCipherText,iv,integrityMac);}  }
class C{  public static JsonObject unmodifiableObject(JsonObject object){  return new JsonObject(object,true);}  }
class C{  protected boolean contains(Vector2 a,Vector2 b,Vector2 c,Vector2 p){  Vector2 ab=a.to(b);  Vector2 ac=a.to(c);  Vector2 pa=a.to(p);  double dot00=ac.dot(ac);  double dot01=ac.dot(ab);  double dot02=ac.dot(pa);  double dot11=ab.dot(ab);  double dot12=ab.dot(pa);  double denominator=dot00 * dot11 - dot01 * dot01;  double u=(dot11 * dot02 - dot01 * dot12) / denominator;  double v=(dot00 * dot12 - dot01 * dot02) / denominator;  return u > 0 && v > 0 && (u + v <= 1 + EarClipping.CONTAINS_EPSILON);}  }
class C{  public void removeClassLoader(ClassLoader classLoader){  if (_logger.isLoggable(Level.FINE))   _logger.fine("removing class loader from cache [" + ClassLoaderHelper.getClassLoaderLogName(classLoader) + "]");  Long removedClassLoadedId=_classLoaderToIdMap.remove(classLoader);  if (removedClassLoadedId != null) {    ClassLoaderContext removedContext=_classLoaders.put(removedClassLoadedId,new ClassLoaderContext(null,Represent.REMOVED_EXPLICIT));    if (removedContext.getRepresents() == Represent.REMOVED_EXPLICIT || removedContext.getRepresents() == Represent.REMOVED_IMPLICIT)     return;    dispatchClassLoaderRemovedEvent(removedClassLoadedId,removedContext,true);  } else {    _logger.fine("class loader [" + ClassLoaderHelper.getClassLoaderLogName(classLoader) + "] is not present in cache");  }}  }
class C{  public EntityXmlAssertTest(String caseName,Element mainElement){  super(caseName);  this.entityXmlUrlString=mainElement.getAttribute("entity-xml-url");  this.action=mainElement.getAttribute("action");  if (UtilValidate.isEmpty(this.action))   this.action="assert";}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_MY_SUMMONED_ENEMY_CRITICAL(String value0,int num2,String value1){  return new SM_SYSTEM_MESSAGE(1200005,value0,num2,value1);}  }
class C{  public IntrospectorPropertyResolver(){  super(true);}  }
class C{  public void updateParameters(){  put(ATTR_COPY_ICONS,!Boolean.parseBoolean(get(ATTR_CREATE_ICONS).toString()));  copyParameters(myParameters,myActivityTemplateState.myParameters,ATTR_PACKAGE_NAME,ATTR_APP_TITLE,ATTR_MIN_API,ATTR_MIN_API_LEVEL,ATTR_TARGET_API,ATTR_TARGET_API_STRING,ATTR_BUILD_API_STRING,ATTR_BUILD_API,ATTR_COPY_ICONS,ATTR_IS_NEW_PROJECT,ATTR_IS_LAUNCHER,ATTR_CREATE_ACTIVITY,ATTR_CREATE_ICONS,ATTR_IS_GRADLE,ATTR_TOP_OUT,ATTR_PROJECT_OUT,ATTR_SRC_OUT,ATTR_TEST_OUT,ATTR_RES_OUT,ATTR_MANIFEST_OUT);}  }
class C{  @Override public boolean isDisallowedSubstitution(short disallowed){  return (fBlock & disallowed) != 0;}  }
class C{  public static boolean isNonnegativeInteger(String s){  if (isEmpty(s))   return defaultEmptyOK;  try {    int temp=Integer.parseInt(s);    if (temp >= 0)     return true;    return false;  } catch (  Exception e) {    return false;  }}  }
class C{  public PaginationException(ErrorCode errorCode,String detailMessage){  super(errorCode,detailMessage);}  }
class C{  public boolean containsJobIdForUid(int jobId,int uId){  for (int i=mJobSet.size() - 1; i >= 0; i--) {    JobStatus ts=mJobSet.valueAt(i);    if (ts.getUid() == uId && ts.getJobId() == jobId) {      return true;    }  }  return false;}  }
class C{  public void fail(String errorMessage){  testEventCollector.fail(errorMessage);  throw new AssertionError(errorMessage);}  }
class C{  public void delete() throws IOException {  close();  IoUtils.deleteContents(directory);}  }
class C{  public StandaloneContainerRunnable(BeanLevelProperties beanLevelProperties,ClusterInfo clusterInfo,List<String> configLocations){  this.config.setBeanLevelProperties(beanLevelProperties);  this.config.setClusterInfo(clusterInfo);  this.configLocations=configLocations;}  }
class C{  @Override public boolean hasObservers(){  return hasObservers;}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public static boolean propertyValueEquals(String resource,String name,String compareString){  String value=getPropertyValue(resource,name);  if (value == null)   return false;  return value.trim().equals(compareString);}  }
class C{  public static double mean(double[] data,int opt){  if (opt == 0) {    int numData=0;    double mean=0;    for (int i=0; i < data.length; i++) {      if (!Double.isNaN(data[i])) {        mean+=data[i];        numData++;      }    }    mean/=numData;    return mean;  } else {    int numData=0;    double mean=0;    for (int i=0; i < data.length; i++) {      if (!Double.isNaN(data[i])) {        mean+=Math.log(data[i]);        numData++;      }    }    mean=mean / numData;    return Math.exp(mean);  }}  }
class C{  private void parseAndAdd(String line){  StringTokenizer tokenizer=new StringTokenizer(line," ");  try {    String word=tokenizer.nextToken();    String pos=tokenizer.nextToken();    partOfSpeechMap.put(word,pos);  } catch (  NoSuchElementException nse) {    System.err.println("part of speech data in bad format at line " + lineCount);  }}  }
class C{  public boolean isActiveWhenBackup(){  return activeWhenBackup;}  }
class C{  public char[] GetSuffix(int len){  char[] ret=new char[len];  if ((bufpos + 1) >= len)   System.arraycopy(buffer,bufpos - len + 1,ret,0,len); else {    System.arraycopy(buffer,bufsize - (len - bufpos - 1),ret,0,len - bufpos - 1);    System.arraycopy(buffer,0,ret,len - bufpos - 1,bufpos + 1);  }  return ret;}  }
class C{  public static boolean isStringNumeric(String str){  DecimalFormatSymbols currentLocaleSymbols=DecimalFormatSymbols.getInstance();  char localeMinusSign=currentLocaleSymbols.getMinusSign();  if (!Character.isDigit(str.charAt(0)) && str.charAt(0) != localeMinusSign)   return false;  boolean isDecimalSeparatorFound=false;  char localeDecimalSeparator=currentLocaleSymbols.getDecimalSeparator();  for (  char c : str.substring(1).toCharArray()) {    if (!Character.isDigit(c)) {      if (c == localeDecimalSeparator && !isDecimalSeparatorFound) {        isDecimalSeparatorFound=true;        continue;      }      return false;    }  }  return true;}  }
class C{  @VisibleForTesting public boolean isAnimating(){  return false;}  }
class C{  private void createAnonClassDecl(polyglot.ast.New aNew){  SootClass outerClass=((soot.RefType)Util.getSootType(aNew.anonType().outer())).getSootClass();  if (InitialResolver.v().getInnerClassInfoMap() == null) {    InitialResolver.v().setInnerClassInfoMap(new HashMap<SootClass,InnerClassInfo>());  }  InitialResolver.v().getInnerClassInfoMap().put(sootClass,new InnerClassInfo(outerClass,"0",InnerClassInfo.ANON));  sootClass.setOuterClass(outerClass);  soot.SootClass typeClass=((soot.RefType)Util.getSootType(aNew.objectType().type())).getSootClass();  if (((polyglot.types.ClassType)aNew.objectType().type()).flags().isInterface()) {    sootClass.addInterface(typeClass);    sootClass.setSuperclass(soot.Scene.v().getSootClass("java.lang.Object"));  } else {    sootClass.setSuperclass(typeClass);    if (((polyglot.types.ClassType)aNew.objectType().type()).isNested()) {      polyglot.types.ClassType superType=(polyglot.types.ClassType)aNew.objectType().type();      Util.addInnerClassTag(sootClass,typeClass.getName(),((soot.RefType)Util.getSootType(superType.outer())).toString(),superType.name(),Util.getModifier(superType.flags()));    }  }  ArrayList params=new ArrayList();  soot.SootMethod method;  if (((polyglot.types.ClassType)aNew.objectType().type()).flags().isInterface()) {    method=new soot.SootMethod("<init>",params,soot.VoidType.v());  } else {    if (!aNew.arguments().isEmpty()) {      polyglot.types.ConstructorInstance ci=InitialResolver.v().getConstructorForAnon(aNew);      Iterator aIt=ci.formalTypes().iterator();      while (aIt.hasNext()) {        polyglot.types.Type pType=(polyglot.types.Type)aIt.next();        params.add(Util.getSootType(pType));      }    }    method=new soot.SootMethod("<init>",params,soot.VoidType.v());  }  AnonClassInitMethodSource src=new AnonClassInitMethodSource();  method.setSource(src);  sootClass.addMethod(method);  AnonLocalClassInfo info=InitialResolver.v().finalLocalInfo().get(new polyglot.util.IdentityKey(aNew.anonType()));  if (aNew.qualifier() != null) {    addQualifierRefToInit(aNew.qualifier().type());    src.hasQualifier(true);  }  if (info != null) {    src.inStaticMethod(info.inStaticMethod());    if (!info.inStaticMethod()) {      if (!InitialResolver.v().isAnonInCCall(aNew.anonType())) {        addOuterClassThisRefToInit(aNew.anonType().outer());        addOuterClassThisRefField(aNew.anonType().outer());        src.thisOuterType(Util.getSootType(aNew.anonType().outer()));        src.hasOuterRef(true);      }    }  }  src.polyglotType((polyglot.types.ClassType)aNew.anonType().superType());  src.anonType(aNew.anonType());  if (info != null) {    src.setFinalsList(addFinalLocals(aNew.body(),info.finalLocalsAvail(),aNew.anonType(),info));  }  src.outerClassType(Util.getSootType(aNew.anonType().outer()));  if (((polyglot.types.ClassType)aNew.objectType().type()).isNested()) {    src.superOuterType(Util.getSootType(((polyglot.types.ClassType)aNew.objectType().type()).outer()));    src.isSubType(Util.isSubType(aNew.anonType().outer(),((polyglot.types.ClassType)aNew.objectType().type()).outer()));  }  Util.addLnPosTags(sootClass,aNew.position().line(),aNew.body().position().endLine(),aNew.position().column(),aNew.body().position().endColumn());}  }
class C{  public DIPHardwareAddressImpl(final String pItemName,final String pFieldName,final int pFieldIndex) throws ConfigurationException {  setItemName(pItemName);  setFieldName(pFieldName);  setFieldIndex(pFieldIndex);}  }
class C{  public EntityQuery distinct(){  this.distinct=true;  return this;}  }
class C{  private static boolean validGeometryFieldName(Expression geometryField){  return ((geometryField != null) && (geometryField.toString() != null) && !geometryField.toString().trim().isEmpty());}  }
class C{  @Override public final void separator(short separator,Augmentations augs) throws XNIException {  if (separator == XMLDTDContentModelHandler.SEPARATOR_CHOICE) {    fOpStack[fDepth]=XMLContentSpec.CONTENTSPECNODE_CHOICE;  } else   if (separator == XMLDTDContentModelHandler.SEPARATOR_SEQUENCE) {    fOpStack[fDepth]=XMLContentSpec.CONTENTSPECNODE_SEQ;  }}  }
class C{  public void clearAllLines(){  if (textArea != null) {    textArea.setText("");  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public BooleanLiteral fullCopy(){  BooleanLiteral tree=(BooleanLiteral)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static boolean isPrimaryThread(){  return server.isPrimaryThread();}  }
class C{  public boolean isApplicable(){  return getViewer() instanceof ChartViewer && ((ChartViewer)getViewer()).getChartDrawer() instanceof BarChartDrawer;}  }
class C{  public Builder corePoolSize(int corePoolSize){  this.corePoolSize=corePoolSize;  return this;}  }
class C{  protected SecureGetUserLevelQuery userIds(List<Integer> value){  return unsafeParam("user_ids",value);}  }
class C{  public Pair<DAAQueryRecord,DAAMatchRecord[]> readQueryAndMatches(InputReaderLittleEndian ins,InputReaderLittleEndian refIns,int maxMatchesPerRead,ByteInputBuffer inputBuffer,DAAMatchRecord[] matchRecords) throws IOException {  final DAAQueryRecord queryRecord=new DAAQueryRecord(this);  if (inputBuffer == null)   inputBuffer=new ByteInputBuffer(); else   inputBuffer.rewind();  if (matchRecords == null)   matchRecords=new DAAMatchRecord[maxMatchesPerRead];  queryRecord.setLocation(ins.getPosition());  ins.readSizePrefixedBytes(inputBuffer);  queryRecord.parseBuffer(inputBuffer);  int numberOfMatches=0;  while (inputBuffer.getPosition() < inputBuffer.size()) {    DAAMatchRecord matchRecord=new DAAMatchRecord(queryRecord);    matchRecord.parseBuffer(inputBuffer,refIns);    if (numberOfMatches < maxMatchesPerRead)     matchRecords[numberOfMatches++]=matchRecord; else     break;  }  if (numberOfMatches > 0) {    DAAMatchRecord[] usedMatchRecords=new DAAMatchRecord[numberOfMatches];    System.arraycopy(matchRecords,0,usedMatchRecords,0,numberOfMatches);    return new Pair<>(queryRecord,usedMatchRecords);  } else   return new Pair<>(queryRecord,new DAAMatchRecord[0]);}  }
class C{  @SuppressWarnings("unchecked") protected final List<N> computeOrder(DirectedGraph<N> g,boolean reverse){  final int n=g.size();  visited=Collections.newSetFromMap(new IdentityHashMap<N,Boolean>(n * 2 + 1));  indexStack=new int[n];  stmtStack=(N[])new Object[n];  order=(N[])new Object[n];  graph=g;  orderLength=0;  for (  N s : g) {    if (visited.add(s))     visitNode(s);    if (orderLength == n)     break;  }  if (reverse)   reverseArray(order);  List<N> o=Arrays.asList(order);  indexStack=null;  stmtStack=null;  visited=null;  order=null;  return o;}  }
class C{  public void init$Children(){  children=new ASTNode[2];  setChild(new List(),1);}  }
class C{  protected LinesToCharsResult diff_linesToChars(String text1,String text2){  List<String> lineArray=new ArrayList<String>();  Map<String,Integer> lineHash=new HashMap<String,Integer>();  lineArray.add("");  String chars1=diff_linesToCharsMunge(text1,lineArray,lineHash);  String chars2=diff_linesToCharsMunge(text2,lineArray,lineHash);  return new LinesToCharsResult(chars1,chars2,lineArray);}  }
class C{  public Bundler putChar(String key,char value){  bundle.putChar(key,value);  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stumble_END_A_TO_SELF(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200758,skilltarget);}  }
class C{  protected void writeStreamHeader() throws IOException {}  }
class C{  private boolean workspaceValid(String workspaceName){  if (isDefaultWorkspace(workspaceName)) {    return true;  }  return Pattern.matches("\\w+",workspaceName);}  }
class C{  @NotNull public AnalyzeImageAction analyzeImage(@NotNull List<VisualFeatures> visualFeatures,@NotNull List<DomainSpecificDetails> domainSpecificDetails,@NotNull String imageUrl){  return new AnalyzeImageAction(cognitiveContext,visualFeatures,domainSpecificDetails,imageUrl);}  }
class C{  public AnySpacePredicate(ISpacePredicate... operands){  super(operands);}  }
class C{  public SwipeBackManageImplementor(SwipeBackManageView view){  this.view=view;}  }
class C{  private void createEventSessionConfig() throws IOException {  eventSessionConfig=new EventSessionConfig();  eventSessionConfig.setFifo(true);  eventSessionConfig.setReplicateNotifyTemplate(true);  eventSessionConfig.setTriggerNotifyTemplate(false);}  }
class C{  public SVNCompareEditorInput(ResourceEditionNode left,ResourceEditionNode right,ResourceEditionNode ancestor){  super(new CompareConfiguration());  this.left=left;  this.right=right;  this.ancestor=ancestor;  if (left != null) {    this.leftImage=left.getImage();    if (left.getRemoteResource() instanceof RemoteResource) {      if (((RemoteResource)left.getRemoteResource()).getPegRevision() == null) {        ((RemoteResource)left.getRemoteResource()).setPegRevision(SVNRevision.HEAD);      }    }  }  if (right != null) {    this.rightImage=right.getImage();    if (right.getRemoteResource() instanceof RemoteResource) {      if (((RemoteResource)right.getRemoteResource()).getPegRevision() == null) {        ((RemoteResource)right.getRemoteResource()).setPegRevision(SVNRevision.HEAD);      }    }  }  if (ancestor != null) {    this.ancestorImage=ancestor.getImage();  }}  }
class C{  public static <E>boolean isEmpty(CharSequence c){  return (c == null) || c.length() == 0;}  }
class C{  public FoundFile lookupInClassPath(String fileName){  for (  String dir : classPath) {    FoundFile ret=null;    ClassSourceType cst=getClassSourceType(dir);    if (cst == ClassSourceType.zip || cst == ClassSourceType.jar) {      ret=lookupInArchive(dir,fileName);    } else     if (cst == ClassSourceType.directory) {      ret=lookupInDir(dir,fileName);    }    if (ret != null)     return ret;  }  return null;}  }
class C{  public AdsDeleteTargetGroupQuery(VkApiClient client,UserActor actor,int accountId,int targetGroupId){  super(client,"ads.deleteTargetGroup",OkResponse.class);  accessToken(actor.getAccessToken());  accountId(accountId);  targetGroupId(targetGroupId);}  }
class C{  public boolean isNull(){  return !sourceContent.isSuccess() && extendedTrim(sourceContent.getHtmlCode()).equals("") && !isImage(sourceContent.getFinalUrl());}  }
class C{  public R reduce(List<AsyncResult<T>> results) throws Exception {  return reducer.reduce(results);}  }
class C{  protected PhotosGetByIdQueryWithExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  private void promptSpeechInput(){  Intent intent=new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);  intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);  intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE,Locale.getDefault());  intent.putExtra(RecognizerIntent.EXTRA_PROMPT,getString(R.string.speech_prompt));  try {    startActivityForResult(intent,REQ_CODE_SPEECH_INPUT);  } catch (  ActivityNotFoundException a) {    Toast.makeText(getApplicationContext(),getString(R.string.speech_not_supported),Toast.LENGTH_SHORT).show();  }}  }
class C{  private int klattRule1(Element boundary){  int breakindex=getBreakindex(boundary);  if (breakindex >= 1 && breakindex <= 6) {    int durationMeasure=100;    Element prosody=(Element)DomUtils.getAncestor(boundary,MaryXML.PROSODY);    if (prosody != null) {      ProsodicSettings settings=(ProsodicSettings)prosodyMap.get(prosody);      assert settings != null;      int deltaRate=settings.rate() - 100;      int deltaPauseDur=settings.pauseDuration() - 100;      durationMeasure=100 - deltaRate + deltaPauseDur;    }    if (durationMeasure == 100) {      return getPropertyAsInteger("rule1.bi" + String.valueOf(breakindex) + ".medium");    } else {      int longer;      int shorter;      int dist;      if (durationMeasure > 100) {        if (durationMeasure > 120) {          longer=getPropertyAsInteger("rule1.bi" + String.valueOf(breakindex) + ".verylong");          shorter=getPropertyAsInteger("rule1.bi" + String.valueOf(breakindex) + ".long");          dist=durationMeasure - 120;        } else {          longer=getPropertyAsInteger("rule1.bi" + String.valueOf(breakindex) + ".long");          shorter=getPropertyAsInteger("rule1.bi" + String.valueOf(breakindex) + ".medium");          dist=durationMeasure - 100;        }      } else {        if (durationMeasure < 80) {          longer=getPropertyAsInteger("rule1.bi" + String.valueOf(breakindex) + ".short");          shorter=getPropertyAsInteger("rule1.bi" + String.valueOf(breakindex) + ".veryshort");          dist=durationMeasure - 60;        } else {          longer=getPropertyAsInteger("rule1.bi" + String.valueOf(breakindex) + ".medium");          shorter=getPropertyAsInteger("rule1.bi" + String.valueOf(breakindex) + ".short");          dist=durationMeasure - 80;        }      }      int result=shorter + (dist * (longer - shorter)) / 20;      if (result < 10)       result=10;      return result;    }  }  return 0;}  }
class C{  private static Schema schema(Type fldType){  Schema sch=new Schema();  sch.addField(SCHEMA_KEY,fldType);  sch.addField(SCHEMA_RID_BLOCK,BIGINT);  sch.addField(SCHEMA_RID_ID,INTEGER);  return sch;}  }
class C{  UnitType(String name,int start,int count){  this.name=name;  this.start=start;  this.count=count;}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  trimToFileCount();  journalWriter.flush();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_MY_SUMMONED_ATTACK(String value0,int num2,String value1){  return new SM_SYSTEM_MESSAGE(1200002,value0,num2,value1);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_INVITE_SENT_INVITE_MSG_TO_HIM(String value0){  return new SM_SYSTEM_MESSAGE(1300258,value0);}  }
class C{  @Override public int read(){  return (_position < _count) ? readUnsignedByte() : -1;}  }
class C{  public static long now(){  return System.currentTimeMillis();}  }
class C{  private static void alertFailedLogin(final String exceptionClass,final String message,final int tries){  System.out.println("Error: " + exceptionClass + StringLiterals.NEWLINE+ message);  JOptionPane.showMessageDialog(WindowStuffHelper.ALWAYS_ON_TOP_PARENT,"Unfortunately, your login has failed. Reason: " + StringLiterals.NEWLINE + exceptionClass+ ": "+ message+ StringLiterals.NEWLINE+ "This is try number "+ tries+ "."+ StringLiterals.NEWLINE+ "Press OK to try again.","Login Failed",JOptionPane.ERROR_MESSAGE);}  }
class C{  public Builder withKeysOnly(boolean keysOnly){  this.keysOnly=keysOnly;  return this;}  }
class C{  private static void mergeDirectories(TreeMap<String,RootDirectory> rootDirectories){  String keyToMerge=rootDirectories.lastKey();  while (keyToMerge != null) {    RootDirectory dirToMerge=rootDirectories.get(keyToMerge);    VirtualFile dir=dirToMerge.rootDir.getParent();    while (dir != null) {      RootDirectory targetDir=rootDirectories.get(dir.getPath());      if (targetDir == null) {        dir=dir.getParent();        continue;      }      targetDir.sourceFolders.addAll(dirToMerge.sourceFolders);      targetDir.sourceFiles.addAll(dirToMerge.sourceFiles);      rootDirectories.remove(keyToMerge);      keyToMerge=rootDirectories.lastKey();      break;    }    if (rootDirectories.size() <= 1) {      break;    }    if (dir == null) {      keyToMerge=rootDirectories.lowerKey(keyToMerge);    }  }}  }
class C{  public AttributeDomProcessor(Document domDoc){  setDomDoc(domDoc);}  }
class C{  FindResult(final JSONObject node,final String name){  this.node=node;  this.name=name;}  }
class C{  @Override public void map(Text key,MapWritable value,Context ctx) throws IOException, InterruptedException {  logger.debug("key = " + key.toString());  logger.debug("value: " + StringUtils.mapWritableToString(value));  boolean passFilter=true;  if (filter != null) {    passFilter=((DataFilter)filter).filterDataElement(value,dSchema);  }  if (passFilter) {    Tuple2<Integer,BytesArrayWritable> returnTuple;    try {      returnTuple=HashSelectorAndPartitionData.hashSelectorAndFormPartitions(value,qSchema,dSchema,queryInfo);    } catch (    Exception e) {      logger.error("Error in partitioning data element value = " + StringUtils.mapWritableToString(value));      e.printStackTrace();      throw new RuntimeException(e);    }    keyOut.set(returnTuple._1);    ctx.write(keyOut,returnTuple._2);  }}  }
class C{  public CollapsedStackLayout(String group,String field){  super(group);  m_polyField=field;}  }
class C{  public static double signedArea(S2Point a,S2Point b,S2Point c){  return area(a,b,c) * robustCCW(a,b,c);}  }
class C{  public static UnitThrowAnalysis v(){  return G.v().soot_toolkits_exceptions_UnitThrowAnalysis();}  }
class C{  public static boolean isUnicode(String unicodeString){  return unicodeString.startsWith(UNICODE_PREFIX);}  }
class C{  public static Zmat ua(Z1 u,Zmat A,int r1,int r2,int c1,int c2,Z1 v) throws JampackException {  int i, j, ru;  if (r2 < r1 || c2 < c1) {    return A;  }  if (r2 - r1 + 1 > u.n) {    throw new JampackException("Householder vector too short.");  }  if (c2 - c1 + 1 > v.n) {    throw new JampackException("Work vector too short.");  }  A.dirty=true;  r1=r1 - A.basex;  r2=r2 - A.basex;  c1=c1 - A.basex;  c2=c2 - A.basex;  for (j=c1; j <= c2; j++) {    v.re[j - c1]=0;    v.im[j - c1]=0;  }  for (i=r1; i <= r2; i++) {    for (j=c1; j <= c2; j++) {      v.re[j - c1]=v.re[j - c1] + u.re[i - r1] * A.re[i][j] + u.im[i - r1] * A.im[i][j];      v.im[j - c1]=v.im[j - c1] + u.re[i - r1] * A.im[i][j] - u.im[i - r1] * A.re[i][j];    }  }  for (i=r1; i <= r2; i++) {    for (j=c1; j <= c2; j++) {      A.re[i][j]=A.re[i][j] - u.re[i - r1] * v.re[j - c1] + u.im[i - r1] * v.im[j - c1];      A.im[i][j]=A.im[i][j] - u.re[i - r1] * v.im[j - c1] - u.im[i - r1] * v.re[j - c1];    }  }  return A;}  }
class C{  public EntryUnmatchedPacket(OperationID operationID,IEntryHolder originalEntryHolder,IEntryHolder newEntryHolder,ServerTransaction xtn,boolean fromReplication){  super(operationID,originalEntryHolder,xtn,0);  _newEntryHolder=newEntryHolder;  _fromReplication=fromReplication;}  }
class C{  public void loadAllHashCodes(File sigFolder){  logger.info("Hashcodes loading start...");  final long startTime=System.currentTimeMillis();  loadAllHashCodesTemp(sigFolder);  final long endTime=System.currentTimeMillis();  logger.info("Hashcodes loading completed! (Execution Time: " + (endTime - startTime) / 1000 + "s)");  logger.info("allTightHashcodes: " + allTightHashcodes.size());  logger.info("allLooseHashcodes: " + allLooseHashcodes.size());}  }
class C{  public static void buildGridData(JsonObject json,GridDimensions environmentDimensions,EntityPlayerMP player,String jsonName){  if (player == null || json == null)   return;  JsonArray arr=new JsonArray();  BlockPos pos=new BlockPos(player.posX,player.posY,player.posZ);  for (int y=environmentDimensions.yMin; y <= environmentDimensions.yMax; y++) {    for (int z=environmentDimensions.zMin; z <= environmentDimensions.zMax; z++) {      for (int x=environmentDimensions.xMin; x <= environmentDimensions.xMax; x++) {        BlockPos p;        if (environmentDimensions.absoluteCoords)         p=new BlockPos(x,y,z); else         p=pos.add(x,y,z);        String name="";        IBlockState state=player.worldObj.getBlockState(p);        Object blockName=Block.blockRegistry.getNameForObject(state.getBlock());        if (blockName instanceof ResourceLocation) {          name=((ResourceLocation)blockName).getResourcePath();        }        JsonElement element=new JsonPrimitive(name);        arr.add(element);      }    }  }  json.add(jsonName,arr);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public AssignOrExpr fullCopy(){  AssignOrExpr tree=(AssignOrExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public IndexTable(final int k,final int m1,final int m2,final int m3){  final int r=calculateBlockCount(k);  iRm1=new int[r];  iRm2=new int[r];  i1=new int[r];  i2=new int[r];  i3=new int[r];  for (int j=0; j < r; ++j) {    iRm1[j]=(j + r - 1) % r;    iRm2[j]=(j + r - 2) % r;    i1[j]=(j + m1) % r;    i2[j]=(j + m2) % r;    i3[j]=(j + m3) % r;  }}  }
class C{  public static void load(){  try {    Properties myProps=null;    try {      log.info("Loading: mygs.properties");      myProps=PropertiesUtils.load("./config/mygs.properties");    } catch (    Exception e) {      log.info("No override properties found");    }    Util.printSection("ADMINISTRATION");    String administration="./config/administration";    Properties[] adminProps=PropertiesUtils.loadAllFromDirectory(administration);    PropertiesUtils.overrideProperties(adminProps,myProps);    ConfigurableProcessor.process(AdminConfig.class,adminProps);    log.info("Loading: " + administration + "/admin.properties");    ConfigurableProcessor.process(DeveloperConfig.class,adminProps);    log.info("Loading: " + administration + "/developer.properties");    Util.printSection("MAIN");    String main="./config/main";    Properties[] mainProps=PropertiesUtils.loadAllFromDirectory(main);    PropertiesUtils.overrideProperties(mainProps,myProps);    ConfigurableProcessor.process(AgentFightConfig.class,mainProps);    log.info("Loading: " + main + "/agentfight.properties");    ConfigurableProcessor.process(AIConfig.class,mainProps);    log.info("Loading: " + main + "/ai.properties");    ConfigurableProcessor.process(AutoGroupConfig.class,mainProps);    log.info("Loading: " + main + "/autogroup.properties");    ConfigurableProcessor.process(BaseConfig.class,mainProps);    log.info("Loading: " + main + "/base.properties");    ConfigurableProcessor.process(BeritraConfig.class,mainProps);    log.info("Loading: " + main + "/beritra.properties");    ConfigurableProcessor.process(CompositionConfig.class,mainProps);    log.info("Loading: " + main + "/composition.properties");    ConfigurableProcessor.process(ConquerorProtectorConfig.class,mainProps);    log.info("Loading: " + main + "/conqueror.properties");    ConfigurableProcessor.process(DualBoxConfig.class,mainProps);    log.info("Loading: " + main + "/DualBoxConfig.properties");    ConfigurableProcessor.process(CommonsConfig.class,mainProps);    log.info("Loading: " + main + "/commons.properties");    ConfigurableProcessor.process(CacheConfig.class,mainProps);    log.info("Loading: " + main + "/cache.properties");    ConfigurableProcessor.process(CleaningConfig.class,mainProps);    log.info("Loading: " + main + "/cleaning.properties");    ConfigurableProcessor.process(CompositionConfig.class,mainProps);    log.info("Loading: " + main + "/composition.properties");    ConfigurableProcessor.process(CraftConfig.class,mainProps);    log.info("Loading: " + main + "/craft.properties");    ConfigurableProcessor.process(CustomConfig.class,mainProps);    log.info("Loading: " + main + "/custom.properties");    ConfigurableProcessor.process(DropConfig.class,mainProps);    log.info("Loading: " + main + "/drop.properties");    ConfigurableProcessor.process(EnchantsConfig.class,mainProps);    log.info("Loading: " + main + "/enchants.properties");    ConfigurableProcessor.process(EventsConfig.class,mainProps);    log.info("Loading: " + main + "/events.properties");    ConfigurableProcessor.process(FallDamageConfig.class,mainProps);    log.info("Loading: " + main + "/falldamage.properties");    ConfigurableProcessor.process(FastTrackConfig.class,mainProps);    log.info("Loading: " + main + "/fasttrack.properties");    ConfigurableProcessor.process(GSConfig.class,mainProps);    log.info("Loading: " + main + "/gameserver.properties");    ConfigurableProcessor.process(GeoDataConfig.class,mainProps);    log.info("Loading: " + main + "/geodata.properties");    ConfigurableProcessor.process(GroupConfig.class,mainProps);    log.info("Loading: " + main + "/group.properties");    ConfigurableProcessor.process(HousingConfig.class,mainProps);    log.info("Loading: " + main + "/housing.properties");    ConfigurableProcessor.process(HTMLConfig.class,mainProps);    log.info("Loading: " + main + "/html.properties");    ConfigurableProcessor.process(InGameShopConfig.class,mainProps);    log.info("Loading: " + main + "/ingameshop.properties");    ConfigurableProcessor.process(LegionConfig.class,mainProps);    log.info("Loading: " + main + "/legion.properties");    ConfigurableProcessor.process(LoggingConfig.class,mainProps);    log.info("Loading: " + main + "/logging.properties");    ConfigurableProcessor.process(MembershipConfig.class,mainProps);    log.info("Loading: " + main + "/membership.properties");    ConfigurableProcessor.process(MoltenusConfig.class,mainProps);    log.info("Loading: " + main + "/moltenus.properties");    ConfigurableProcessor.process(NameConfig.class,mainProps);    log.info("Loading: " + main + "/name.properties");    ConfigurableProcessor.process(PeriodicSaveConfig.class,mainProps);    log.info("Loading: " + main + "/periodicsave.properties");    ConfigurableProcessor.process(PlayerTransferConfig.class,mainProps);    log.info("Loading: " + main + "/playertransfer.properties");    ConfigurableProcessor.process(PricesConfig.class,mainProps);    log.info("Loading: " + main + "/prices.properties");    ConfigurableProcessor.process(PunishmentConfig.class,mainProps);    log.info("Loading: " + main + "/punishment.properties");    ConfigurableProcessor.process(RankingConfig.class,mainProps);    log.info("Loading: " + main + "/ranking.properties");    ConfigurableProcessor.process(RateConfig.class,mainProps);    log.info("Loading: " + main + "/rates.properties");    ConfigurableProcessor.process(SecurityConfig.class,mainProps);    log.info("Loading: " + main + "/security.properties");    ConfigurableProcessor.process(ShutdownConfig.class,mainProps);    log.info("Loading: " + main + "/shutdown.properties");    ConfigurableProcessor.process(SiegeConfig.class,mainProps);    log.info("Loading: " + main + "/siege.properties");    ConfigurableProcessor.process(ThreadConfig.class,mainProps);    log.info("Loading: " + main + "/thread.properties");    ConfigurableProcessor.process(WeddingsConfig.class,mainProps);    log.info("Loading: " + main + "/weddings.properties");    ConfigurableProcessor.process(WorldConfig.class,mainProps);    log.info("Loading: " + main + "/world.properties");    Util.printSection("NETWORK");    String network="./config/network";    Properties[] networkProps=PropertiesUtils.loadAllFromDirectory(network);    PropertiesUtils.overrideProperties(networkProps,myProps);    log.info("Loading: " + network + "/database.properties");    ConfigurableProcessor.process(DatabaseConfig.class,networkProps);    log.info("Loading: " + network + "/network.properties");    ConfigurableProcessor.process(NetworkConfig.class,networkProps);  } catch (  Exception e) {    log.error("Can't load gameserver configuration: ",e);    throw new Error("Can't load gameserver configuration: ",e);  }  IPConfig.load();}  }
class C{  static int compact(@JobConstraint int[] constraints){  int result=0;  for (  int c : constraints) {    result|=c;  }  return result;}  }
class C{  public boolean containsEx(int memberObjId){  return legionMemberExById.containsKey(memberObjId);}  }
class C{  public Query handleStatement(RequestPacket request,ISpaceProxy space) throws SQLException {  Query query=_queryCache.getQueryFromCache(request.getStatement());  try {    if (query == null) {      if (_logger.isLoggable(Level.FINE)) {        _logger.fine("Query wasn't in cache, will be parsed");      }      StringReader sReader=new StringReader(request.getStatement());      Reader reader=new BufferedReader(sReader);      SqlParser parser=new SqlParser(reader);      query=parser.parseStatement();      query.validateQuery(space);      if (!query.isPrepared() && !query.containsSubQueries())       query.build();      _queryCache.addQueryToCache(request.getStatement(),query);    } else     if (query instanceof AbstractDMLQuery) {      query=(Query)((AbstractDMLQuery)query).clone();    }    return query;  } catch (  SQLException sqlEx) {    if (_logger.isLoggable(Level.FINE)) {      _logger.log(Level.FINE,"Error executing statement [" + request + "]",sqlEx);    }    throw sqlEx;  }catch (  Throwable t) {    if (_logger.isLoggable(Level.FINE)) {      _logger.log(Level.FINE,"Couldn't parse given statement [" + request + "]",t);    }    SQLException sqlEx=new SQLException("Error in statement [" + request + "]; Cause: "+ t,"GSP",-201);    sqlEx.initCause(t);    throw sqlEx;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Snare_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200621,skillcaster,skillname);}  }
class C{  public boolean isSelectionFindable(){  return classificationViewer.getSelectedNodes().size() > 0;}  }
class C{  private Object deserialize(TypeInfo type,Object rawValue) throws SerDeException {  Object value=null;  if (rawValue != null) {switch (type.getCategory()) {case PRIMITIVE:      value=deserializePrimitive((PrimitiveTypeInfo)type,rawValue);    break;case STRUCT:  value=deserializeStruct((StructTypeInfo)type,rawValue);break;case MAP:value=deserializeMap((MapTypeInfo)type,rawValue);break;case LIST:value=deserializeList((ListTypeInfo)type,rawValue);break;case UNION:value=deserializeUnion((UnionTypeInfo)type,rawValue);break;}}return value;}  }
class C{  @Override public void endParameterEntity(String name,Augmentations augs) throws XNIException {  try {    if (augs == null || !Boolean.TRUE.equals(augs.getItem(Constants.ENTITY_SKIPPED))) {      if (fLexicalHandler != null && fLexicalHandlerParameterEntities) {        fLexicalHandler.endEntity(name);      }    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public void dispose(){  if (serverSocket != null) {    try {      serverSocket.close();    } catch (    IOException e) {      ;    }  }}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  UserInfoDao.createTable(db,ifNotExists);  BookInfoDao.createTable(db,ifNotExists);}  }
class C{  @Override public int countMissing(){  int count=0;  for (int i=0; i < size(); i++) {    if (get(i) == MISSING_VALUE) {      count++;    }  }  return count;}  }
class C{  public BrokerItem(Item item,long price,String seller,int sellerId,BrokerRace itemBrokerRace,boolean partSale){  this.item=item;  this.itemId=item.getItemTemplate().getTemplateId();  this.itemUniqueId=item.getObjectId();  this.itemCount=item.getItemCount();  this.itemCreator=item.getItemCreator();  this.price=price;  this.seller=seller;  this.sellerId=sellerId;  this.itemBrokerRace=itemBrokerRace;  this.isSold=false;  this.isSettled=false;  this.expireTime=new Timestamp(Calendar.getInstance().getTimeInMillis() + 691200000);  this.settleTime=new Timestamp(Calendar.getInstance().getTimeInMillis());  this.partSale=partSale;  this.state=PersistentState.NEW;}  }
class C{  public synchronized VisualGraph addGraph(String group,Graph graph){  return addGraph(group,graph,null);}  }
class C{  public void add(int val){  IntListNode node=new IntListNode(val);  if (head == null) {    head=node;    tail=node;  } else {    tail.next=node;    tail=node;  }}  }
class C{  public String htmlEncode(Object object){  return object != null ? StringEscapeUtils.escapeHtml4(String.valueOf(object)) : null;}  }
class C{  @Override public void removeAlarm(final Long alarmId,final ConfigurationElementReport alarmReport){  try {    AlarmCacheObject alarm=(AlarmCacheObject)alarmCache.getCopy(alarmId);    alarmConfigTransacted.doRemoveAlarm(alarmId,alarmReport);    alarmCache.remove(alarmId);    alarm.setState(AlarmCondition.TERMINATE);    alarm.setInfo("Alarm was removed");    alarm.setTimestamp(new Timestamp(System.currentTimeMillis()));    alarmCache.notifyListenersOfUpdate(alarm);  } catch (  CacheElementNotFoundException e) {    alarmReport.setWarning("Alarm " + alarmId + " is not know by the system ==> Nothing to be removed from the Alarm cache.");  }}  }
class C{  public double optDouble(String key){  return this.optDouble(key,Double.NaN);}  }
class C{  protected boolean baseMatches(final Value baseValue,Abstraction source){  if (baseValue instanceof Local) {    if (baseValue.equals(source.getAccessPath().getPlainValue()))     return true;  } else   if (baseValue instanceof InstanceFieldRef) {    InstanceFieldRef ifr=(InstanceFieldRef)baseValue;    if (ifr.getBase().equals(source.getAccessPath().getPlainValue()) && source.getAccessPath().firstFieldMatches(ifr.getField()))     return true;  } else   if (baseValue instanceof StaticFieldRef) {    StaticFieldRef sfr=(StaticFieldRef)baseValue;    if (source.getAccessPath().firstFieldMatches(sfr.getField()))     return true;  }  return false;}  }
class C{  private boolean shouldProcessUndoRedoAction(){  boolean populating=false;  if (populationCheck != null) {    populating=populationCheck.isPopulating();  }  return (!isUndoRedoAction && !populating);}  }
class C{  public NullnessAnalysis(UnitGraph graph){  super(graph);  doAnalysis();}  }
class C{  public static float max(final float a,final float b){  if (a > b) {    return a;  }  if (a < b) {    return b;  }  if (a != b) {    return Float.NaN;  }  int bits=Float.floatToRawIntBits(a);  if (bits == 0x80000000) {    return b;  }  return a;}  }
class C{  public synchronized void animatePanToAbs(Point2D p,long duration){  m_tmpPoint.setLocation(0,0);  m_itransform.transform(m_tmpPoint,m_tmpPoint);  double x=p.getX();  x=(Double.isNaN(x) ? 0 : x);  double y=p.getY();  y=(Double.isNaN(y) ? 0 : y);  double w=getWidth() / (2 * m_transform.getScaleX());  double h=getHeight() / (2 * m_transform.getScaleY());  double dx=w - x + m_tmpPoint.getX();  double dy=h - y + m_tmpPoint.getY();  animatePanAbs(dx,dy,duration);}  }
class C{  @Override public void onSuccess(int statusCode,Header[] headers,byte[] binaryData){  onSuccess(statusCode,binaryData);}  }
class C{  public void mergeWith(Node other){  if (other.replacement != other) {    throw new RuntimeException("Shouldn't happen");  }  Node myRep=getReplacement();  if (other == myRep)   return;  other.replacement=myRep;  if (other.p2set != p2set && other.p2set != null && !other.p2set.isEmpty()) {    if (myRep.p2set == null || myRep.p2set.isEmpty()) {      myRep.p2set=other.p2set;    } else {      myRep.p2set.mergeWith(other.p2set);    }  }  other.p2set=null;  pag.mergedWith(myRep,other);  if ((other instanceof VarNode) && (myRep instanceof VarNode) && ((VarNode)other).isInterProcTarget())   ((VarNode)myRep).setInterProcTarget();}  }
class C{  public VideoSearchQueryWithExtended(VkApiClient client,UserActor actor,String q){  super(client,"video.search",SearchExtendedResponse.class);  accessToken(actor.getAccessToken());  q(q);  extended(true);}  }
class C{  private void editBodyAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxBody) {      SandboxBody body=(SandboxBody)node.getUserObject();synchronized (Simulation.LOCK) {        EditBodyDialog.show(ControlUtilities.getParentWindow(this),body);      }    }  }}  }
class C{  protected void animateProperty(Property property,float start,float end,long duration){  if (duration > 0) {    if (animationIsRunning()) {      cancelAnimation(this,property);    }    addToAnimation(this,property,start,end,duration,0);  }}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  protected static ObjectReader initDefault(){  return init(CsvSchema.emptySchema());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_FACTION(String value0,int num1){  return new SM_SYSTEM_MESSAGE(1300586,value0,num1);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.String intern()")) {    java_lang_String_intern(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public void guardMode(){  SummonsService.guardMode(getOwner());}  }
class C{  public static boolean findAndSetSdk(@NotNull Module module,@NotNull String targetHashString,@Nullable String sdkPath){  if (sdkPath != null) {    sdkPath=toSystemIndependentName(sdkPath);  }  Sdk sdk=findSuitableAndroidSdk(targetHashString);  if (sdk != null) {    setModuleSdk(module,sdk);    return true;  }  if (sdkPath != null && tryToCreateAndSetAndroidSdk(module,sdkPath,targetHashString)) {    return true;  }  String androidHomeValue=System.getenv(ANDROID_HOME_ENV);  if (androidHomeValue != null && tryToCreateAndSetAndroidSdk(module,toSystemIndependentName(androidHomeValue),targetHashString)) {    return true;  }  for (  String dir : getAndroidSdkPathsFromExistingPlatforms()) {    if (tryToCreateAndSetAndroidSdk(module,dir,targetHashString)) {      return true;    }  }  return false;}  }
class C{  public static boolean banIp(String ip){  return banIp(ip,null);}  }
class C{  @Deprecated public static void removeDependencyOnOldPlugin(Project project,String pluginId){  ExternalDependenciesManager manager=ExternalDependenciesManager.getInstance(project);  List<ProjectExternalDependency> deps=Lists.newArrayList(manager.getAllDependencies());  Iterator<ProjectExternalDependency> iter=deps.iterator();  while (iter.hasNext()) {    ProjectExternalDependency dep=iter.next();    if (!(dep instanceof DependencyOnPlugin)) {      continue;    }    DependencyOnPlugin pluginDep=(DependencyOnPlugin)dep;    if (pluginDep.getPluginId().equals(pluginId)) {      iter.remove();    }  }  manager.setAllDependencies(deps);}  }
class C{  public Builder type(final java.lang.reflect.Type type){  this.propertyType=TypeFactory.valueOf(type);  return this;}  }
class C{  public double optDouble(String key){  LazyNode token=getOptionalFieldToken(key);  if (token == null)   return 0.0;  if (token.type == LazyNode.VALUE_NULL)   return 0.0;  return token.getDoubleValue(cbuf);}  }
class C{  public Call postWithJsonBody(String url,JSONObject params,Callback callback){  MediaType JSON=MediaType.parse("application/json; charset=utf-8");  RequestBody body=RequestBody.create(JSON,params.toString());  Request request=new Builder().url(url).post(body).build();  Call call=client.newCall(request);  call.enqueue(callback);  return call;}  }
class C{  public boolean isDirty(){  return dirty;}  }
class C{  public LocalFolder(IContainer container){  super(container);}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  protected static MockResponse jsonResponse(Object body){  return new MockResponse().addHeader(CONTENT_TYPE,HttpMediaType.APPLICATION_JSON).setBody(GsonSingleton.getGsonWithoutPrettyPrinting().toJson(body));}  }
class C{  public GreaterSpacePredicate(Comparable<?> expectedValue,Comparator<?> comparator){  super(expectedValue,comparator);}  }
class C{  protected void removeAt(int index){  _values[index]=0;  super.removeAt(index);}  }
class C{  public void java_lang_reflect_Array_newArray(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  throw new NativeMethodNotSupportedException(method);}  }
class C{  public InterpolatingMicrosphere(int dimension,int size,double maxDarkFraction,double darkThreshold,double background,UnitSphereRandomVectorGenerator rand){  this(dimension,size,maxDarkFraction,darkThreshold,background);  for (int i=0; i < size; i++) {    add(rand.nextVector(),false);  }}  }
class C{  public static byte[] giveBuff(MapleStatEffect effect,int amount){  EnumMap<MapleBuffStat,Integer> statups=new EnumMap<MapleBuffStat,Integer>(MapleBuffStat.class);  statups.put(MapleBuffStat.SmashStack,amount);  return giveBuff(0,0,statups,effect,null);}  }
class C{  public AudioSearchQuery searchOwn(Boolean value){  return unsafeParam("search_own",value);}  }
class C{  public PhotosEditAlbumQuery description(String value){  return unsafeParam("description",value);}  }
class C{  public FriendsGetListsQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  private Grammar removeEntry(Entry entry){  if (entry.prev != null) {    entry.prev.next=entry.next;  } else {    fGrammars[entry.bucket]=entry.next;  }  if (entry.next != null) {    entry.next.prev=entry.prev;  }  --fGrammarCount;  entry.grammar.entry=null;  return (Grammar)entry.grammar.get();}  }
class C{  public NoSimpleValueParseException(){  super(MESSAGE);}  }
class C{  private void checkPopulateComplete(GeoServerConnection connection){  PopulateState state=populateStateMap.get(connection);  if (state != null) {    if (state.isComplete()) {      GeoServerNode geoServerNode=nodeMap.get(connection);      if (geoServerNode != null) {        removeNode(geoServerNode,PROGRESS_NODE_TITLE);        populateStyles(connection,geoServerNode);        populateLayers(connection,geoServerNode);        if (treeModel != null) {          treeModel.reload(geoServerNode);        }      }      parseComplete.populateComplete(connection,geoServerStyleMap.get(connection),geoServerLayerMap.get(connection));    }  }}  }
class C{  public static MonsterHabitatFragment newInstance(long mon_id){  MonsterHabitatFragment fragment=new MonsterHabitatFragment();  Bundle args=new Bundle();  args.putLong(ARG_MONSTER_ID,mon_id);  fragment.setArguments(args);  return fragment;}  }
class C{  @ManagedOperation(description="Refresh supervision timestamps of Processes/(Sub)Equipments and notify all listeners.") @Override public void refreshAllSupervisionStatus(){  notifyAllSupervisedCachesOfUpdate();}  }
class C{  public void drawScreen(int mouseX,int mouseY,float partialTicks){  this.profileListCtrl.drawScreen(mouseX,mouseY,partialTicks);  super.drawScreen(mouseX,mouseY,partialTicks,false);}  }
class C{  @Provides @Singleton @DatabusZooKeeper CuratorFramework provideDatabusZooKeeperConnection(@Global CuratorFramework curator){  return withComponentNamespace(curator,"bus");}  }
class C{  public NewsfeedSearchQuery startTime(Integer value){  return unsafeParam("start_time",value);}  }
class C{  public static final double kilogramsToSlugs(double kilograms){  return kilograms * KILOGRAM_TO_SLUG;}  }
class C{  protected MathIllegalNumberException(Localizable pattern,Number wrong,Object... arguments){  super(pattern,wrong,arguments);  argument=wrong;}  }
class C{  public Vec2d add(double x,double y){  this.x+=x;  this.y+=y;  return this;}  }
class C{  @Deployment public void testSplitMergeNoWaitstates(){  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("forkJoinNoWaitStates");  assertTrue(processInstance.isEnded());}  }
class C{  public static DataFileFooter readMetadatFile(String filePath,long blockOffset,long blockLength) throws CarbonUtilException {  DataFileFooterConverter fileFooterConverter=new DataFileFooterConverter();  try {    return fileFooterConverter.readDataFileFooter(filePath,blockOffset,blockLength);  } catch (  IOException e) {    throw new CarbonUtilException("Problem while reading the file metadata",e);  }}  }
class C{  public JMXConnection(String jmxServiceURL,String name){  this.jmxServiceURL=jmxServiceURL;  this.name=name;}  }
class C{  public void contentTag(String tag,String name,String value,String content){  spacing();  m_out.print('<');  m_out.print(tag);  m_out.print(' ');  m_out.print(name);  m_out.print('=');  m_out.print('\"');  escapeString(value);  m_out.print('\"');  m_out.print('>');  escapeString(content);  m_out.print('<');  m_out.print('/');  m_out.print(tag);  m_out.print('>');  println();}  }
class C{  public static AirMap init(Context context,String authToken){  return init(context,authToken,false);}  }
class C{  private static boolean throwsException(IMethod method,Class<?> exceptionClass){  Class<?>[] exceptionClasses=method.getExceptionTypes();  for (  Class<?> c : exceptionClasses) {    if (exceptionClass.isAssignableFrom(c)) {      return true;    }  }  return false;}  }
class C{  public static void clickButtonTeamspeakConnect(){  RewiMod.getInstance().openUrl("ts3server://rewinside.tv");}  }
class C{  public boolean isInGroup(VisualItem item,String group){  if (ALL_ITEMS.equals(group))   return true;  if (item.getGroup() == group)   return true;  TupleSet tset=getGroup(group);  return (tset == null ? false : tset.containsTuple(item));}  }
class C{  @Override public void animShow(final View v){  AnimUtils.animShow(v);}  }
class C{  public void removeGroups(String[] groups){  if (groups == null) {    throw new NullPointerException("can't remove null from groups to discover");  }  String[] curGroupsToDiscover=lookupDisc.getGroups();  if (curGroupsToDiscover == null) {    throw new UnsupportedOperationException("can't remove from \"any groups\"");  }  if (curGroupsToDiscover.length == 0)   return;  HashSet curGroups=new HashSet(curGroupsToDiscover.length);  for (int i=0; i < curGroupsToDiscover.length; i++) {    curGroups.add(curGroupsToDiscover[i]);  }  boolean removed=false;  for (int i=0; i < groups.length; i++) {    removed|=curGroups.remove(groups[i]);  }  if (!removed)   return;  lookupDisc.removeGroups(groups);}  }
class C{  private void initResourcesIfNecessary(){  if (centerDrawable == null) {    centerDrawable=getContext().getResources().getDrawable(wheelForeground);  }  if (topShadow == null) {    topShadow=new GradientDrawable(Orientation.TOP_BOTTOM,SHADOWS_COLORS);  }  if (bottomShadow == null) {    bottomShadow=new GradientDrawable(Orientation.BOTTOM_TOP,SHADOWS_COLORS);  }  setBackgroundResource(wheelBackground);}  }
class C{  public static double determinationCoefficient(double[] y1,double[] y2,int n){  return Math.pow(correlation(y1,y2),2);}  }
class C{  public V remove(long key){  V prev=null;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  public BigReal(char[] in){  d=new BigDecimal(in);}  }
class C{  public static String[] splitOnCharWithQuoting(String s,char splitChar,char quoteChar,char escapeChar){  List<String> result=new ArrayList<>();  int i=0;  int length=s.length();  StringBuilder b=new StringBuilder();  while (i < length) {    char curr=s.charAt(i);    if (curr == splitChar) {      if (b.length() > 0) {        result.add(b.toString());        b=new StringBuilder();      }      i++;    } else     if (curr == quoteChar) {      i++;      while (i < length) {        curr=s.charAt(i);        if (curr == escapeChar) {          b.append(s.charAt(i + 1));          i+=2;        } else         if (curr == quoteChar) {          i++;          break;        } else {          b.append(s.charAt(i));          i++;        }      }    } else {      b.append(curr);      i++;    }  }  if (b.length() > 0) {    result.add(b.toString());  }  return result.toArray(new String[0]);}  }
class C{  public XPathException(String message){  super(message);  if (message == null) {    throw new NullPointerException("message can't be null");  }  this.cause=null;}  }
class C{  @SuppressWarnings("unchecked") public <INKEY,INVALUE,OUTKEY,OUTVALUE,T extends org.apache.hadoop.mapreduce.InputSplit>void run() throws Exception {  Configuration conf=job.getConfiguration();  reporter=new ContentPumpReporter();  InputFormat<INKEY,INVALUE> inputFormat=(InputFormat<INKEY,INVALUE>)ReflectionUtils.newInstance(job.getInputFormatClass(),conf);  List<InputSplit> splits=inputFormat.getSplits(job);  T[] array=(T[])splits.toArray(new org.apache.hadoop.mapreduce.InputSplit[splits.size()]);  Arrays.sort(array,new SplitLengthComparator());  OutputFormat<OUTKEY,OUTVALUE> outputFormat=(OutputFormat<OUTKEY,OUTVALUE>)ReflectionUtils.newInstance(job.getOutputFormatClass(),conf);  Class<? extends Mapper<?,?,?,?>> mapperClass=job.getMapperClass();  Mapper<INKEY,INVALUE,OUTKEY,OUTVALUE> mapper=(Mapper<INKEY,INVALUE,OUTKEY,OUTVALUE>)ReflectionUtils.newInstance(mapperClass,conf);  try {    outputFormat.checkOutputSpecs(job);  } catch (  Exception ex) {    if (LOG.isDebugEnabled()) {      LOG.debug("Error checking output specification: ",ex);    } else {      LOG.error("Error checking output specification: ");      LOG.error(ex.getMessage());    }    return;  }  progress=new AtomicInteger[splits.size()];  for (int i=0; i < splits.size(); i++) {    progress[i]=new AtomicInteger();  }  Monitor monitor=new Monitor();  monitor.start();  List<Future<Object>> taskList=new ArrayList<Future<Object>>();  for (int i=0; i < array.length; i++) {    InputSplit split=array[i];    if (pool != null) {      LocalMapTask<INKEY,INVALUE,OUTKEY,OUTVALUE> task=new LocalMapTask<INKEY,INVALUE,OUTKEY,OUTVALUE>(inputFormat,outputFormat,conf,i,split,reporter,progress[i]);      availableThreads=assignThreads(i,array.length);      Class<? extends Mapper<?,?,?,?>> runtimeMapperClass=job.getMapperClass();      if (availableThreads > 1 && availableThreads != threadsPerSplit) {        if (runtimeMapperClass != (Class)MultithreadedMapper.class) {          runtimeMapperClass=(Class<? extends Mapper<INKEY,INVALUE,OUTKEY,OUTVALUE>>)cmd.getRuntimeMapperClass(job,mapperClass,threadsPerSplit,availableThreads);        }        if (runtimeMapperClass != mapperClass) {          task.setMapperClass(runtimeMapperClass);        }        if (runtimeMapperClass == (Class)MultithreadedMapper.class) {          task.setThreadCount(availableThreads);          if (LOG.isDebugEnabled()) {            LOG.debug("Thread Count for Split#" + i + " : "+ availableThreads);          }        }      }      if (runtimeMapperClass == (Class)MultithreadedMapper.class) {synchronized (pool) {          taskList.add(pool.submit(task));          pool.wait();        }      } else {        pool.submit(task);      }    } else {      JobID jid=new JobID();      TaskID taskId=new TaskID(jid.getJtIdentifier(),jid.getId(),TaskType.MAP,i);      TaskAttemptID taskAttemptId=new TaskAttemptID(taskId,0);      TaskAttemptContext context=ReflectionUtil.createTaskAttemptContext(conf,taskAttemptId);      RecordReader<INKEY,INVALUE> reader=inputFormat.createRecordReader(split,context);      RecordWriter<OUTKEY,OUTVALUE> writer=outputFormat.getRecordWriter(context);      OutputCommitter committer=outputFormat.getOutputCommitter(context);      TrackingRecordReader trackingReader=new TrackingRecordReader(reader,progress[i]);      Mapper.Context mapperContext=ReflectionUtil.createMapperContext(mapper,conf,taskAttemptId,trackingReader,writer,committer,reporter,split);      trackingReader.initialize(split,mapperContext);      Class<? extends Mapper<?,?,?,?>> mapClass=job.getMapperClass();      mapperContext.getConfiguration().setClass(CONF_MAPREDUCE_JOB_MAP_CLASS,mapClass,Mapper.class);      mapper=(Mapper<INKEY,INVALUE,OUTKEY,OUTVALUE>)ReflectionUtils.newInstance(mapClass,mapperContext.getConfiguration());      mapper.run(mapperContext);      trackingReader.close();      writer.close(mapperContext);      committer.commitTask(context);    }  }  if (pool != null) {    for (    Future<Object> f : taskList) {      f.get();    }    pool.shutdown();    while (!pool.awaitTermination(1,TimeUnit.DAYS))     ;    jobComplete.set(true);  }  monitor.interrupt();  monitor.join(1000);  Iterator<CounterGroup> groupIt=reporter.counters.iterator();  while (groupIt.hasNext()) {    CounterGroup group=groupIt.next();    LOG.info(group.getDisplayName() + ": ");    Iterator<Counter> counterIt=group.iterator();    while (counterIt.hasNext()) {      Counter counter=counterIt.next();      LOG.info(counter.getDisplayName() + ": " + counter.getValue());    }  }  LOG.info("Total execution time: " + (System.currentTimeMillis() - startTime) / 1000 + " sec");}  }
class C{  public boolean pointsToSetEquals(Object other){  if (this == other) {    return true;  }  if (!(other instanceof AllocAndContextSet)) {    return false;  }  AllocAndContextSet otherPts=(AllocAndContextSet)other;  return superSetOf(otherPts,this) && superSetOf(this,otherPts);}  }
class C{  public void distributeAndUpdateMapObjectsInIntervalSet(){  for (  InternalMapObject mapObject : mapObjects) {    for (    Interval interval : intervalSet.getIntervals()) {      if (mapObject.getValue() >= interval.getValueLow() && mapObject.getValue() <= interval.getValueHigh()) {        interval.addMember(mapObject);        mapObject.setInterval(interval);        break;      }    }  }}  }
class C{  private static byte[][] rotateArray(byte[][] bitarray){  byte[][] temp=new byte[bitarray[0].length][bitarray.length];  for (int ii=0; ii < bitarray.length; ii++) {    int inverseii=bitarray.length - ii - 1;    for (int jj=0; jj < bitarray[0].length; jj++) {      temp[jj][inverseii]=bitarray[ii][jj];    }  }  return temp;}  }
class C{  public NewsfeedSaveListQuery saveList(UserActor actor,String title){  return new NewsfeedSaveListQuery(getClient(),actor,title);}  }
class C{  public void waitUntilCompletion() throws InterruptedException {  Iterator iIter=qThreads.iterator();  while (iIter.hasNext()) {    Thread tCur=(Thread)iIter.next();    if (tCur.isAlive())     tCur.join();  }}  }
class C{  public static String rFrameRateToEditRate(String rFrameRate){  String[] parts=rFrameRate.split("/");  if (parts.length == 2) {    return String.format("%s %s",parts[0],parts[1]);  }  return String.format("%s %s",rFrameRate,1);}  }
class C{  public BigInteger decrypt(BigInteger c){  BigInteger x=ModPowAbstraction.modPow(c,lambdaN,NSquared);  BigInteger y=(x.subtract(BigInteger.ONE)).divide(N);  return (y.multiply(w)).mod(N);}  }
class C{  protected void render(Graphics2D g){  g.setColor(Color.WHITE);  g.fillRect(-400,-300,800,600);  g.translate(0.0,-1.0 * SCALE);  for (int i=0; i < this.world.getBodyCount(); i++) {    GameObject go=(GameObject)this.world.getBody(i);    go.render(g);  }}  }
class C{  protected String updateDdlForMySqlVersionLowerThan56(String ddlStatements){  return ddlStatements.replace("timestamp(3)","timestamp").replace("datetime(3)","datetime").replace("TIMESTAMP(3)","TIMESTAMP").replace("DATETIME(3)","DATETIME");}  }
class C{  public void render(Graphics2D g,double scale,Color color){  final int pr=4;  AffineTransform ot=g.getTransform();  AffineTransform lt=new AffineTransform();  lt.translate(this.transform.getTranslationX() * scale,this.transform.getTranslationY() * scale);  lt.rotate(this.transform.getRotation());  g.transform(lt);  for (  BodyFixture fixture : this.fixtures) {    this.renderFixture(g,scale,fixture,color);  }  Ellipse2D.Double ce=new Ellipse2D.Double(this.getLocalCenter().x * scale - pr * 0.5,this.getLocalCenter().y * scale - pr * 0.5,pr,pr);  g.setColor(Color.WHITE);  g.fill(ce);  g.setColor(Color.DARK_GRAY);  g.draw(ce);  g.setTransform(ot);}  }
class C{  public String toString(){  return "Segmenter";}  }
class C{  public boolean contains(S2LatLng ll){  return (lat.contains(ll.lat().radians()) && lng.contains(ll.lng().radians()));}  }
class C{  public int addItemToEnd(String productId,BigDecimal amount,BigDecimal quantity,BigDecimal unitPrice,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,HashMap<String,GenericValue> features,HashMap<String,Object> attributes,String prodCatalogId,String itemType,LocalDispatcher dispatcher,Boolean triggerExternalOps,Boolean triggerPriceRules) throws CartItemModifyException, ItemNotFoundException {  return addItemToEnd(ShoppingCartItem.makeItem(null,productId,amount,quantity,unitPrice,reservStart,reservLength,reservPersons,null,null,features,attributes,prodCatalogId,null,itemType,null,dispatcher,this,triggerExternalOps,triggerPriceRules,null,Boolean.FALSE,Boolean.FALSE));}  }
class C{  private ULong(long value){  this.value=value;}  }
class C{  public VideoRemoveFromAlbumQuery albumIds(List<Integer> value){  return unsafeParam("album_ids",value);}  }
class C{  public void addPoint(float x,float y){  if (npoints == xpoints.length) {    float[] tmp;    tmp=new float[npoints * 2];    System.arraycopy(xpoints,0,tmp,0,npoints);    xpoints=tmp;    tmp=new float[npoints * 2];    System.arraycopy(ypoints,0,tmp,0,npoints);    ypoints=tmp;  }  xpoints[npoints]=x;  ypoints[npoints]=y;  npoints++;  updatePath(x,y);}  }
class C{  public FriendsAddQuery text(String value){  return unsafeParam("text",value);}  }
class C{  public static String readAll(){  if (!scanner.hasNextLine())   return "";  String result=scanner.useDelimiter(EVERYTHING_PATTERN).next();  scanner.useDelimiter(WHITESPACE_PATTERN);  return result;}  }
class C{  private static void addExtraSdkLibrariesAsDependencies(@NotNull Module module,@NotNull IdeModifiableModelsProvider modelsProvider,@NotNull AndroidProject androidProject){  ModifiableRootModel moduleModel=modelsProvider.getModifiableRootModel(module);  Sdk sdk=moduleModel.getSdk();  assert sdk != null;  String suffix=null;  AndroidSdkData sdkData=AndroidSdkData.getSdkData(sdk);  if (sdkData != null) {    SdkAdditionalData data=sdk.getSdkAdditionalData();    if (data instanceof AndroidSdkAdditionalData) {      AndroidSdkAdditionalData androidSdkData=(AndroidSdkAdditionalData)data;      suffix=androidSdkData.getBuildTargetHashString();    }  }  if (suffix == null) {    suffix=androidProject.getCompileTarget();  }  Set<String> currentIdeSdkFilePaths=Sets.newHashSetWithExpectedSize(5);  for (  VirtualFile sdkFile : sdk.getRootProvider().getFiles(CLASSES)) {    File sdkFilePath=virtualToIoFile(sdkFile);    currentIdeSdkFilePaths.add(sdkFilePath.getPath());  }  Collection<String> bootClasspath=androidProject.getBootClasspath();  for (  String library : bootClasspath) {    if (isNotEmpty(library) && !currentIdeSdkFilePaths.contains(library)) {      File binaryPath=new File(library);      String name=binaryPath.isFile() ? getNameWithoutExtension(binaryPath) : sanitizeFileName(library);      name=name + "-" + suffix;      setUpLibraryDependency(module,modelsProvider,name,DependencyScope.COMPILE,Collections.singletonList(library));    }  }}  }
class C{  private static void paintCycle(GuidelineHandler myState,NlGraphics g,List<Constraint> cycle){  assert cycle.size() > 0;  NlComponent from=cycle.get(0).from.node;  assert from != null;  Rectangle fromBounds=new Rectangle(from.x,from.y,from.w,from.h);  if (myState.myDraggedNodes.contains(from)) {    fromBounds=myState.myBounds;  }  Point fromCenter=center(fromBounds);  List<Point> points=new ArrayList<Point>();  points.add(fromCenter);  for (  Constraint constraint : cycle) {    assert constraint.from.node == from;    NlComponent to=constraint.to.node;    assert to != null;    Point toCenter=new Point(to.x + to.w / 2,to.y + to.h / 2);    points.add(toCenter);    boolean isDragged=myState.myDraggedNodes.contains(to);    if (isDragged) {      toCenter=center(myState.myBounds);      points.add(toCenter);    }    from=to;    fromCenter=toCenter;  }  points.add(fromCenter);  points.add(points.get(0));  g.useStyle(CYCLE);  for (int i=1, n=points.size(); i < n; i++) {    Point a=points.get(i - 1);    Point b=points.get(i);    g.drawLine(a.x,a.y,b.x,b.y);  }}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  public boolean isApplicable(){  final Document doc=((MainViewer)getDir().getMainViewer()).getDocument();  return doc.getNumberOfReads() > 0;}  }
class C{  protected MarketRemoveFromAlbumQuery albumIds(List<Integer> value){  return unsafeParam("album_ids",value);}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public void testDoublesLargerThanLife() throws Exception {  int iters=atLeast(100000);  for (int i=0; i < iters; i++) {    BigInteger unscaled=TestUtil.nextBigInteger(random(),42);    int scale=TestUtil.nextInt(random(),-100,100);    int precision=TestUtil.nextInt(random(),1,100);    BigDecimal bigDecimal=new BigDecimal(unscaled,scale,new MathContext(precision,RoundingMode.HALF_EVEN));    String encoded=bigDecimal.toString();    double v=Double.parseDouble(encoded);    checkDouble(v,encoded,1);  }}  }
class C{  @Override public void cancel(){  bobcatWait.withTimeout(Timeouts.BIG).until(WindowActions.clickButton(cancelButton));}  }
class C{  public void updateMatrixSearcher(){  updateCurrent();}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  public int allowed_modifier_changes(){  String s=soot.PhaseOptions.getString(options,"allowed-modifier-changes");  if (s.equalsIgnoreCase("unsafe"))   return allowed_modifier_changes_unsafe;  if (s.equalsIgnoreCase("safe"))   return allowed_modifier_changes_safe;  if (s.equalsIgnoreCase("none"))   return allowed_modifier_changes_none;  throw new RuntimeException("Invalid value " + s + " of phase option allowed-modifier-changes");}  }
class C{  public boolean isApplicable(){  return getViewer() instanceof SamplesViewer;}  }
class C{  public void addInsn(Insn insn){  insns.addElement(insn);}  }
class C{  TaskManager.Task[] createTasks(){  TaskManager.Task[] tmp=new TaskManager.Task[1];  tmp[0]=new ParticipantTask(getPool(),getMgr(),this,handle);  return tmp;}  }
class C{  public static GenericPK create(Delegator delegator,ModelEntity modelEntity,Object singlePkValue){  GenericPK newPK=new GenericPK();  newPK.init(delegator,modelEntity,singlePkValue);  return newPK;}  }
class C{  @Override public boolean onUnbind(Intent intent){  if (mState == State.PAUSED || mState == State.STOPPED) {    processStopRequest(false);  }  return false;}  }
class C{  public static boolean charInString(char c,String s){  return (s.indexOf(c) != -1);}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public static byte[] serializeLogSegmentSequenceNumber(long logSegmentSeqNo){  return Long.toString(logSegmentSeqNo).getBytes(UTF_8);}  }
class C{  public void check(List<CheckResultInterface> remarks,TransMeta transMeta,StepMeta stepMeta,RowMetaInterface prev,String[] input,String[] output,RowMetaInterface info){  CarbonDataProcessorUtil.checkResult(remarks,stepMeta,input);}  }
class C{  Circle sharedCircleWith(final Vertex vertex){  for (  final Circle circle1 : circles) {    for (    final Circle circle2 : vertex.circles) {      if (circle1 == circle2) {        return circle1;      }    }  }  return null;}  }
class C{  public void loadVersion1(File f) throws ConfigPersisterException {  try {    Props props=new Props(f);    _config=new Config();    String header=props.getProperty(Config.HEADER);    _config.setHeaderType(header == null || header.toLowerCase().equals("guihead.bin") ? Config.GUI_HEADER : Config.CONSOLE_HEADER);    _config.setJar(props.getFile(Config.JAR));    _config.setOutfile(props.getFile(Config.OUTFILE));    _config.setJre(new Jre());    _config.getJre().setPath(props.getProperty(Jre.PATH));    _config.getJre().setMinVersion(props.getProperty(Jre.MIN_VERSION));    _config.getJre().setMaxVersion(props.getProperty(Jre.MAX_VERSION));    String args=props.getProperty(Jre.ARGS);    if (args != null) {      List<String> jreOptions=new ArrayList<String>();      jreOptions.add(args);      _config.getJre().setOptions(jreOptions);    }    _config.setCmdLine(props.getProperty(Config.JAR_ARGS));    _config.setChdir("true".equals(props.getProperty(Config.CHDIR)) ? "." : null);    _config.setStayAlive("true".equals(props.getProperty(Config.STAY_ALIVE)));    _config.setErrTitle(props.getProperty(Config.ERR_TITLE));    _config.setIcon(props.getFile(Config.ICON));    File splashFile=props.getFile(Splash.SPLASH_FILE);    if (splashFile != null) {      _config.setSplash(new Splash());      _config.getSplash().setFile(splashFile);      String waitfor=props.getProperty("waitfor");      _config.getSplash().setWaitForWindow(waitfor != null && !waitfor.equals(""));      String splashTimeout=props.getProperty(Splash.TIMEOUT);      if (splashTimeout != null) {        _config.getSplash().setTimeout(Integer.parseInt(splashTimeout));      }      _config.getSplash().setTimeoutErr("true".equals(props.getProperty(Splash.TIMEOUT_ERR)));    } else {      _config.setSplash(null);    }    setConfigPath(f);  } catch (  IOException e) {    throw new ConfigPersisterException(e);  }}  }
class C{  private void launchProc(String cmdLine,String task,String baseName){  Process proc=null;  BufferedReader procStdout=null;  String line=null;  try {    proc=Runtime.getRuntime().exec(cmdLine);    procStdout=new BufferedReader(new InputStreamReader(proc.getInputStream()));    while (true) {      line=procStdout.readLine();      if (line == null)       break;      System.out.println(line);    }    proc.waitFor();    if (proc.exitValue() != 0) {      throw new RuntimeException(task + " computation failed on file [" + baseName+ "]!\n"+ "Command line was: ["+ cmdLine+ "].");    }  } catch (  IOException e) {    throw new RuntimeException(task + " computation provoked an IOException on file [" + baseName+ "].",e);  }catch (  InterruptedException e) {    throw new RuntimeException(task + " computation interrupted on file [" + baseName+ "].",e);  }}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  public boolean forEach(TShortProcedure procedure){  for (int i=0; i < _pos; i++) {    if (!procedure.execute(_data[i])) {      return false;    }  }  return true;}  }
class C{  public int size(){  return count;}  }
class C{  private void notJustAlphasToWords(String tokenVal){  int index=0;  int tokenLength=tokenVal.length();  for (; index < tokenLength; index++) {    if (isTextSplitable(tokenVal,index)) {      break;    }  }  String aaa=tokenVal.substring(0,index + 1);  String bbb=tokenVal.substring(index + 1,tokenLength);  FeatureSet featureSet=tokenItem.getFeatures();  featureSet.setString("nsw","nide");  tokenToWords(aaa);  tokenToWords(bbb);}  }
class C{  public FriendsEditQuery edit(UserActor actor,int userId){  return new FriendsEditQuery(getClient(),actor,userId);}  }
class C{  public Builder stringToTimeTransform(String column,String format,DateTimeZone dateTimeZone){  return transform(new StringToTimeTransform(column,format,dateTimeZone));}  }
class C{  public static boolean isInRange(final String currentRelease,final ReleaseStatus release){  if ((new DefaultArtifactVersion(currentRelease).compareTo(new DefaultArtifactVersion(release.getFromVersion())) >= 0) && (new DefaultArtifactVersion(currentRelease).compareTo(new DefaultArtifactVersion(release.getToVersion())) <= 0)) {    return true;  }  return false;}  }
class C{  public int compareTo(cp_info cp){  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_Utf8_info cu=(CONSTANT_Utf8_info)cp;  G.v().coffi_CONSTANT_Utf8_info_e1.reset(bytes);  G.v().coffi_CONSTANT_Utf8_info_e2.reset(cu.bytes);  for (; G.v().coffi_CONSTANT_Utf8_info_e1.hasMoreElements() && G.v().coffi_CONSTANT_Utf8_info_e2.hasMoreElements(); ) {    G.v().coffi_CONSTANT_Utf8_info_e1.nextElement();    G.v().coffi_CONSTANT_Utf8_info_e2.nextElement();    if (G.v().coffi_CONSTANT_Utf8_info_e1.c < G.v().coffi_CONSTANT_Utf8_info_e2.c)     return -1;    if (G.v().coffi_CONSTANT_Utf8_info_e2.c < G.v().coffi_CONSTANT_Utf8_info_e1.c)     return 1;  }  if (G.v().coffi_CONSTANT_Utf8_info_e1.hasMoreElements())   return -1;  if (G.v().coffi_CONSTANT_Utf8_info_e2.hasMoreElements())   return 1;  return 0;}  }
class C{  static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  if (DEBUG)   debugPrintln("debug is on");  ClassLoader cl=findClassLoader();  try {    String systemProp=SecuritySupport.getSystemProperty(factoryId);    if (systemProp != null && systemProp.length() > 0) {      if (DEBUG)       debugPrintln("found system property, value=" + systemProp);      return newInstance(systemProp,cl,true);    }  } catch (  SecurityException se) {  }  String factoryClassName=null;  if (propertiesFilename == null) {    File propertiesFile=null;    boolean propertiesFileExists=false;    try {      String javah=SecuritySupport.getSystemProperty("java.home");      propertiesFilename=javah + File.separator + "lib"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;      propertiesFile=new File(propertiesFilename);      propertiesFileExists=SecuritySupport.getFileExists(propertiesFile);    } catch (    SecurityException e) {      fLastModified=-1;      fXercesProperties=null;    }synchronized (ObjectFactory.class) {      boolean loadProperties=false;      FileInputStream fis=null;      try {        if (fLastModified >= 0) {          if (propertiesFileExists && (fLastModified < (fLastModified=SecuritySupport.getLastModified(propertiesFile)))) {            loadProperties=true;          } else {            if (!propertiesFileExists) {              fLastModified=-1;              fXercesProperties=null;            }          }        } else {          if (propertiesFileExists) {            loadProperties=true;            fLastModified=SecuritySupport.getLastModified(propertiesFile);          }        }        if (loadProperties) {          fXercesProperties=new Properties();          fis=SecuritySupport.getFileInputStream(propertiesFile);          fXercesProperties.load(fis);        }      } catch (      Exception x) {        fXercesProperties=null;        fLastModified=-1;      } finally {        if (fis != null) {          try {            fis.close();          } catch (          IOException exc) {          }        }      }    }    if (fXercesProperties != null) {      factoryClassName=fXercesProperties.getProperty(factoryId);    }  } else {    FileInputStream fis=null;    try {      fis=SecuritySupport.getFileInputStream(new File(propertiesFilename));      Properties props=new Properties();      props.load(fis);      factoryClassName=props.getProperty(factoryId);    } catch (    Exception x) {    } finally {      if (fis != null) {        try {          fis.close();        } catch (        IOException exc) {        }      }    }  }  if (factoryClassName != null) {    if (DEBUG)     debugPrintln("found in " + propertiesFilename + ", value="+ factoryClassName);    return newInstance(factoryClassName,cl,true);  }  Object provider=findJarServiceProvider(factoryId);  if (provider != null) {    return provider;  }  if (fallbackClassName == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  if (DEBUG)   debugPrintln("using fallback, value=" + fallbackClassName);  return newInstance(fallbackClassName,cl,true);}  }
class C{  public static GenericPK create(GenericPK value){  GenericPK newPK=new GenericPK();  newPK.init(value);  return newPK;}  }
class C{  public AddCellToColumnException(Exception e,int columnIndex,long rowNumber,String[] columnNames,String[] line){  super("Error while addding cell from row " + rowNumber + " and column "+ columnNames[columnIndex]+ "(position:"+ columnIndex+ "): "+ e.getMessage(),e);  this.columnIndex=columnIndex;  this.rowNumber=rowNumber;  this.columnNames=columnNames;  this.line=line;}  }
class C{  public void sync() throws IOException {  if (dataOutputStream instanceof FSDataOutputStream) {    ((FSDataOutputStream)dataOutputStream).hsync();  }}  }
class C{  private CarbonDictionaryWriterImpl prepareWriter() throws IOException {  initDictionaryDirPaths();  return new CarbonDictionaryWriterImpl(this.carbonStorePath,carbonTableIdentifier,columnIdentifier);}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Sleep_END_A(String value0){  return new SM_SYSTEM_MESSAGE(1201133,value0);}  }
class C{  public void toggleMaximize(@NotNull Component comp){  assert mComponentInfoMap.containsKey(comp);  ComponentInfo info=mComponentInfoMap.get(comp);  setStateInternal(comp,info,info.state == AccordionState.MAXIMIZE ? AccordionState.PREFERRED : AccordionState.MAXIMIZE);}  }
class C{  private boolean isNeedToRemove(String columnName){  return isRemovedFromClass(columnName) && !isIdColumn(columnName) && !isForeignKeyColumn(mTableModel,columnName);}  }
class C{  public void init$Children(){  children=new ASTNode[2];  setChild(new List(),0);  setChild(new Opt(),1);}  }
class C{  public boolean hasObservers(){  return observers.get().length != 0;}  }
class C{  private float computeCorrelationCoefficent(String classNameX,String attributeNameY){  ArrayList<Double> xValues=new ArrayList<>(getChartData().getSeriesNames().size());  ArrayList<Double> yValues=new ArrayList<>(getChartData().getSeriesNames().size());  for (  String sample : getChartData().getSeriesNames()) {    final double x=getChartData().getValueAsDouble(sample,classNameX);    final double y;    Object obj=viewer.getDir().getDocument().getSampleAttributeTable().get(sample,attributeNameY);    if (obj instanceof Number)     y=((Number)obj).doubleValue(); else     throw new IllegalArgumentException("Attribute '" + attributeNameY + "': has non-numerical value: "+ obj);    xValues.add(x);    yValues.add(y);  }  return (float)Correlation.computePersonsCorrelationCoefficent(xValues.size(),xValues,yValues);}  }
class C{  protected DocsAddQuery docId(int value){  return unsafeParam("doc_id",value);}  }
class C{  public void load(Reader r0) throws IOException {  BufferedReader r=new BufferedReader(r0);  char[] mapPos2Char=null;  String aLine;  int cols=0;  while ((aLine=r.readLine()) != null) {    aLine=aLine.trim();    if (aLine.length() == 0 || aLine.startsWith("#"))     continue;    if (mapPos2Char == null) {      String[] tokens=aLine.split(" ");      cols=tokens.length;      if (tokens.length < 20)       throw new IOException("Expected >=20 tokens, got: " + tokens.length + " in line: "+ aLine);      List<String> list=new LinkedList<>();      list.addAll(Arrays.asList(tokens));      int count=0;      mapPos2Char=new char[list.size()];      for (      String label : list) {        char c=Character.toUpperCase(label.charAt(0));        mapPos2Char[count++]=c;      }    } else {      String[] tokens=aLine.split(" ");      if (tokens.length != cols + 1)       throw new IOException("Expected " + (cols + 1) + " tokens, got: "+ tokens.length+ " in line: "+ aLine);      char c=Character.toUpperCase(tokens[0].charAt(0));      for (int i=1; i < tokens.length; i++) {        int value=Integer.parseInt(tokens[i]);        char d=mapPos2Char[i - 1];        matrix[c][d]=value;      }    }  }}  }
class C{  public VideoGetQuery(VkApiClient client,UserActor actor){  super(client,"video.get",GetResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  private void writeDictionaryFile(CarbonDictionaryWriterImpl writer,List<String> list) throws IOException {  try {    for (    String value : list) {      writer.write(value);    }  }  finally {    writer.close();    writer.commit();  }}  }
class C{  public static void writeString(PacketBuffer buf,String value){  buf.writeInt(value.length());  buf.writeString(value);}  }
class C{  public MarketEditAlbumQuery photoId(Integer value){  return unsafeParam("photo_id",value);}  }
class C{  public double deriv(){  return deriv;}  }
class C{  private static List<DependencyGraph> readCoNLLU(String fileName){  List<DependencyGraph> graphs=new ArrayList<DependencyGraph>();  BufferedReader br=null;  try {    br=new BufferedReader(new InputStreamReader(new FileInputStream(fileName),"UTF-8"));    String line=null;    List<String> tokens=new LinkedList<String>();    tokens.add("ROOT");    List<String> lemmas=new LinkedList<String>();    lemmas.add("ROOT");    List<String> tags=new LinkedList<String>();    tags.add("ROOT");    List<Integer> heads=new LinkedList<Integer>();    heads.add(-1);    List<String> labels=new LinkedList<String>();    labels.add("NULL");    while ((line=br.readLine()) != null) {      if (line.trim().length() == 0) {        int n=tokens.size();        Sentence sentence=new Sentence(tokens.toArray(new String[n]),lemmas.toArray(new String[n]),tags.toArray(new String[n]));        DependencyGraph graph=new DependencyGraph(sentence,heads.toArray(new Integer[n]),labels.toArray(new String[n]));        graphs.add(graph);        tokens=new LinkedList<String>();        tokens.add("ROOT");        lemmas=new LinkedList<String>();        lemmas.add("ROOT");        tags=new LinkedList<String>();        tags.add("ROOT");        heads=new LinkedList<Integer>();        heads.add(-1);        labels=new LinkedList<String>();        labels.add("NULL");      } else {        String[] parts=line.split("\\s+");        if (parts.length != 10) {          throw new IllegalArgumentException("Bad file format! " + line);        }        tokens.add(parts[1]);        lemmas.add(parts[2]);        tags.add(parts[3]);        heads.add(new Integer(parts[6]));        labels.add(parts[7]);      }    }    br.close();  } catch (  IOException e) {    e.printStackTrace();  } finally {    try {      br.close();    } catch (    IOException e) {      e.printStackTrace();    }  }  return graphs;}  }
class C{  private BitmapUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  private void calculateJavaSourceDirectories(BlazeContext context,WorkspaceRoot workspaceRoot,ArtifactLocationDecoder artifactLocationDecoder,WorkspacePath directoryRoot,SourceTestConfig sourceTestConfig,Collection<SourceArtifact> javaArtifacts,Collection<JavaPackageReader> javaPackageReaders,Collection<BlazeSourceDirectory> result){  List<SourceRoot> sourceRootsPerFile=Lists.newArrayList();  List<ListenableFuture<SourceRoot>> sourceRootFutures=Lists.newArrayList();  for (  final SourceArtifact sourceArtifact : javaArtifacts) {    ListenableFuture<SourceRoot> future=executorService.submit(null);    sourceRootFutures.add(future);  }  try {    for (    SourceRoot sourceRoot : Futures.allAsList(sourceRootFutures).get()) {      if (sourceRoot != null) {        sourceRootsPerFile.add(sourceRoot);      }    }  } catch (  ExecutionException|InterruptedException e) {    LOG.error(e);    throw new IllegalStateException("Could not read sources");  }  Multimap<WorkspacePath,SourceRoot> sourceDirectoryToSourceRoots=HashMultimap.create();  for (  SourceRoot sourceRoot : sourceRootsPerFile) {    sourceDirectoryToSourceRoots.put(sourceRoot.workspacePath,sourceRoot);  }  Map<WorkspacePath,SourceRoot> workspacePathToSourceRoot=Maps.newHashMap();  for (  WorkspacePath workspacePath : sourceDirectoryToSourceRoots.keySet()) {    Collection<SourceRoot> sources=sourceDirectoryToSourceRoots.get(workspacePath);    Multiset<String> packages=HashMultiset.create();    for (    SourceRoot source : sources) {      packages.add(source.packagePrefix);    }    final String directoryPackagePrefix;    if (packages.elementSet().size() == 1) {      directoryPackagePrefix=packages.elementSet().iterator().next();    } else {      String preferredPackagePrefix=PackagePrefixCalculator.packagePrefixOf(workspacePath);      directoryPackagePrefix=pickMostFrequentlyOccurring(packages,preferredPackagePrefix);    }    SourceRoot candidateRoot=new SourceRoot(workspacePath,directoryPackagePrefix);    workspacePathToSourceRoot.put(workspacePath,candidateRoot);  }  if (!workspacePathToSourceRoot.containsKey(directoryRoot)) {    SourceRoot candidateRoot=new SourceRoot(directoryRoot,PackagePrefixCalculator.packagePrefixOf(directoryRoot));    workspacePathToSourceRoot.put(directoryRoot,candidateRoot);  }  Map<WorkspacePath,SourceRootDirectoryNode> sourceRootDirectoryNodeMap=Maps.newHashMap();  SourceRootDirectoryNode rootNode=new SourceRootDirectoryNode(directoryRoot,null);  sourceRootDirectoryNodeMap.put(directoryRoot,rootNode);  for (  SourceRoot sourceRoot : workspacePathToSourceRoot.values()) {    final String sourcePathRelativeToDirectoryRoot=sourcePathRelativeToDirectoryRoot(directoryRoot,sourceRoot.workspacePath);    List<String> pathComponents=!Strings.isNullOrEmpty(sourcePathRelativeToDirectoryRoot) ? PATH_SPLITTER.splitToList(sourcePathRelativeToDirectoryRoot) : ImmutableList.of();    SourceRootDirectoryNode previousNode=rootNode;    for (int i=0; i < pathComponents.size(); ++i) {      final WorkspacePath workspacePath=getWorkspacePathFromPathComponents(directoryRoot,pathComponents,i + 1);      SourceRootDirectoryNode node=sourceRootDirectoryNodeMap.get(workspacePath);      if (node == null) {        node=new SourceRootDirectoryNode(workspacePath,pathComponents.get(i));        sourceRootDirectoryNodeMap.put(workspacePath,node);        previousNode.children.add(node);      }      previousNode=node;    }  }  for (  SourceRoot sourceRoot : workspacePathToSourceRoot.values()) {    final String sourcePathRelativeToDirectoryRoot=sourcePathRelativeToDirectoryRoot(directoryRoot,sourceRoot.workspacePath);    List<String> packageComponents=PACKAGE_SPLITTER.splitToList(sourceRoot.packagePrefix);    List<String> pathComponents=!Strings.isNullOrEmpty(sourcePathRelativeToDirectoryRoot) ? PATH_SPLITTER.splitToList(sourcePathRelativeToDirectoryRoot) : ImmutableList.of();    int packageIndex=packageComponents.size();    int pathIndex=pathComponents.size();    while (pathIndex >= 0 && packageIndex >= 0) {      final WorkspacePath workspacePath=getWorkspacePathFromPathComponents(directoryRoot,pathComponents,pathIndex);      SourceRootDirectoryNode node=sourceRootDirectoryNodeMap.get(workspacePath);      String packagePrefix=PACKAGE_JOINER.join(packageComponents.subList(0,packageIndex));      if (sourceRoot.workspacePath.equals(workspacePath)) {        node.forcedPackagePrefix=packagePrefix;      } else {        node.packagePrefixVotes.add(packagePrefix);      }      String pathComponent=pathIndex > 0 ? pathComponents.get(pathIndex - 1) : "";      String packageComponent=packageIndex > 0 ? packageComponents.get(packageIndex - 1) : "";      if (!pathComponent.equals(packageComponent)) {        break;      }      --packageIndex;      --pathIndex;    }  }  Map<WorkspacePath,SourceRoot> sourceRoots=Maps.newHashMap();  SourceRootDirectoryNode root=sourceRootDirectoryNodeMap.get(directoryRoot);  visitDirectoryNode(sourceRoots,root,null);  for (  SourceRoot sourceRoot : sourceRoots.values()) {    result.add(BlazeSourceDirectory.builder(workspaceRoot.fileForPath(sourceRoot.workspacePath)).setPackagePrefix(sourceRoot.packagePrefix).setTest(sourceTestConfig.isTestSource(sourceRoot.workspacePath.relativePath())).setGenerated(false).build());  }}  }
class C{  public void abortCurrentDataTransfer(boolean sendAborCommand) throws IOException, FTPIllegalReplyException {synchronized (abortLock) {    if (ongoingDataTransfer && !aborted) {      if (sendAborCommand) {        communication.sendFTPCommand("ABOR");        touchAutoNoopTimer();        consumeAborCommandReply=true;      }      if (dataTransferInputStream != null) {        try {          dataTransferInputStream.close();        } catch (        Throwable t) {          ;        }      }      if (dataTransferOutputStream != null) {        try {          dataTransferOutputStream.close();        } catch (        Throwable t) {          ;        }      }      aborted=true;    }  }}  }
class C{  private static void prepareRmiGC(){  try {    if (System.getProperty("sun.rmi.dgc.client.gcInterval") == null)     System.setProperty("sun.rmi.dgc.client.gcInterval","36000000");    if (System.getProperty("sun.rmi.dgc.server.gcInterval") == null)     System.setProperty("sun.rmi.dgc.server.gcInterval","36000000");  } catch (  Exception secExc) {    if (logger.isLoggable(Level.WARNING)) {      logger.log(Level.WARNING,"Failed to set sun.rmi.dgc.xxx system properties. \n",secExc);    }  }}  }
class C{  protected void load(String fileName) throws IOException, BufferUnderflowException, MaryConfigurationException, NullPointerException {  load(fileName,true);}  }
class C{  @Override public void startExternalSubset(XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {  if (fDTDGrammar != null)   fDTDGrammar.startExternalSubset(identifier,augs);  if (fDTDHandler != null) {    fDTDHandler.startExternalSubset(identifier,augs);  }}  }
class C{  public <T>T recall(String path,Class<T> type) throws IOException {  return recall(new File(path),type);}  }
class C{  protected BoardRestoreCommentQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public void exp(final double[] operand,final int operandOffset,final double[] result,final int resultOffset){  double[] function=new double[1 + order];  Arrays.fill(function,FastMath.exp(operand[operandOffset]));  compose(operand,operandOffset,function,result,resultOffset);}  }
class C{  public void assertContains(TrafficLogPredicate query){  assertThat(trafficLogProvider.get(),new TrafficLogContains(query.getPredicates()));}  }
class C{  @Override protected RangeToken parseCharacterClass(boolean useNrange) throws ParseException {  this.setContext(S_INBRACKETS);  this.next();  boolean nrange=false;  boolean wasDecoded=false;  RangeToken base=null;  RangeToken tok;  if (this.read() == T_CHAR && this.chardata == '^') {    nrange=true;    this.next();    base=Token.createRange();    base.addRange(0,Token.UTF16_MAX);    tok=Token.createRange();  } else {    tok=Token.createRange();  }  int type;  boolean firstloop=true;  while ((type=this.read()) != T_EOF) {    wasDecoded=false;    if (type == T_CHAR && this.chardata == ']' && !firstloop) {      if (nrange) {        base.subtractRanges(tok);        tok=base;      }      break;    }    int c=this.chardata;    boolean end=false;    if (type == T_BACKSOLIDUS) {switch (c) {case 'd':case 'D':case 'w':case 'W':case 's':case 'S':        tok.mergeRanges(this.getTokenForShorthand(c));      end=true;    break;case 'i':case 'I':case 'c':case 'C':  c=this.processCIinCharacterClass(tok,c);if (c < 0) end=true;break;case 'p':case 'P':int pstart=this.offset;RangeToken tok2=this.processBacksolidus_pP(c);if (tok2 == null) throw this.ex("parser.atom.5",pstart);tok.mergeRanges(tok2);end=true;break;case '-':c=this.decodeEscaped();wasDecoded=true;break;default :c=this.decodeEscaped();}} else if (type == T_XMLSCHEMA_CC_SUBTRACTION && !firstloop) {if (nrange) {base.subtractRanges(tok);tok=base;}RangeToken range2=this.parseCharacterClass(false);tok.subtractRanges(range2);if (this.read() != T_CHAR || this.chardata != ']') throw this.ex("parser.cc.5",this.offset);break;}this.next();if (!end) {if (type == T_CHAR) {if (c == '[') throw this.ex("parser.cc.6",this.offset - 2);if (c == ']') throw this.ex("parser.cc.7",this.offset - 2);if (c == '-' && this.chardata != ']' && !firstloop) throw this.ex("parser.cc.8",this.offset - 2);}if (this.read() != T_CHAR || this.chardata != '-' || c == '-' && firstloop) {if (!this.isSet(RegularExpression.IGNORE_CASE) || c > 0xffff) {tok.addRange(c,c);} else {addCaseInsensitiveChar(tok,c);}} else {this.next();if ((type=this.read()) == T_EOF) throw this.ex("parser.cc.2",this.offset);if (type == T_CHAR && this.chardata == ']') {if (!this.isSet(RegularExpression.IGNORE_CASE) || c > 0xffff) {tok.addRange(c,c);} else {addCaseInsensitiveChar(tok,c);}tok.addRange('-','-');} else if (type == T_XMLSCHEMA_CC_SUBTRACTION) {throw this.ex("parser.cc.8",this.offset - 1);} else {int rangeend=this.chardata;if (type == T_CHAR) {if (rangeend == '[') throw this.ex("parser.cc.6",this.offset - 1);if (rangeend == ']') throw this.ex("parser.cc.7",this.offset - 1);if (rangeend == '-') throw this.ex("parser.cc.8",this.offset - 2);} else if (type == T_BACKSOLIDUS) rangeend=this.decodeEscaped();this.next();if (c > rangeend) throw this.ex("parser.ope.3",this.offset - 1);if (!this.isSet(RegularExpression.IGNORE_CASE) || (c > 0xffff && rangeend > 0xffff)) {tok.addRange(c,rangeend);} else {addCaseInsensitiveCharRange(tok,c,rangeend);}}}}firstloop=false;}if (this.read() == T_EOF) throw this.ex("parser.cc.2",this.offset);tok.sortRanges();tok.compactRanges();this.setContext(S_NORMAL);this.next();return tok;}  }
class C{  public void addModule(@NotNull String modulePath,@NotNull File location){  checkInitialized();  commitDocumentChanges();  for (  GrMethodCall includeStatement : getMethodCalls(myGroovyFile,INCLUDE_METHOD)) {    for (    GrLiteral lit : getLiteralArguments(includeStatement)) {      if (modulePath.equals(lit.getValue())) {        return;      }    }  }  GrMethodCall includeStatement=getMethodCall(myGroovyFile,INCLUDE_METHOD);  if (includeStatement != null) {    GrArgumentList argList=includeStatement.getArgumentList();    GrLiteral literal=GroovyPsiElementFactory.getInstance(myProject).createLiteralFromValue(modulePath);    argList.addAfter(literal,argList.getLastChild());  } else {    GrStatement statement=GroovyPsiElementFactory.getInstance(myProject).createStatementFromText(INCLUDE_METHOD + " '" + modulePath+ "'");    myGroovyFile.add(statement);  }  VirtualFile parent=getFile().getParent();  File defaultLocation=GradleUtil.getModuleDefaultPath(parent,modulePath);  if (!FileUtil.filesEqual(defaultLocation,location)) {    final String path;    File parentFile=VfsUtilCore.virtualToIoFile(parent);    if (FileUtil.isAncestor(parentFile,location,true)) {      path=PathUtil.toSystemIndependentName(FileUtil.getRelativePath(parentFile,location));    } else {      path=PathUtil.toSystemIndependentName(location.getAbsolutePath());    }    String locationAssignment=String.format(CUSTOM_LOCATION_FORMAT,modulePath,path);    GrStatement locationStatement=GroovyPsiElementFactory.getInstance(myProject).createStatementFromText(locationAssignment);    myGroovyFile.add(locationStatement);  }}  }
class C{  public void resetLowThreshold(){  this.currentLowThreshold=lowThreshold;}  }
class C{  public void addRequestLocation(String name){  if (name != null) {    this.requestLocationSet.add(name);  }}  }
class C{  public void addImplements(Access node){  List<Access> list=(parent == null || state == null) ? getImplementsListNoTransform() : getImplementsList();  list.addChild(node);}  }
class C{  public static byte[] objectToBytes(Object obj) throws java.io.IOException {  ByteArrayOutputStream bos=new ByteArrayOutputStream();  ObjectOutputStream oos=new ObjectOutputStream(bos);  oos.writeObject(obj);  oos.flush();  oos.close();  bos.close();  byte[] data=bos.toByteArray();  return data;}  }
class C{  public boolean contains(Node n){  return false;}  }
class C{  public OrdersGetByIdQuery orderId(Integer value){  return unsafeParam("order_id",value);}  }
class C{  @Nullable public VirtualFile extractAndGetContentRoot(VirtualFile file){  File tempFile;  try {    tempFile=FileUtil.createTempFile(file.getName(),APKZIP_SUFFIX,true);  } catch (  IOException e) {    Logger.getInstance(ApkFileSystem.class).warn("IOException while extracting zip file from APK",e);    return null;  }  try (InputStream is=new ByteArrayInputStream(file.contentsToByteArray())){    Files.copy(is,tempFile.toPath(),StandardCopyOption.REPLACE_EXISTING);  } catch (  IOException e) {    Logger.getInstance(ApkFileSystem.class).warn("IOException while copying contents of zip file to temp file",e);    return null;  }  VirtualFile vfile=VfsUtil.findFileByIoFile(tempFile,true);  if (vfile == null) {    return null;  }  vfile.putUserData(APKZIP_KEY,Boolean.TRUE);  return getInstance().getRootByLocal(vfile);}  }
class C{  public void disconnect(String reason){  if (!connecting) {    proxy.getNetwork().closeSession(raknetID,reason);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DELETE_CASH_SOCIALACTION_BY_TIMEOUT(String value0){  return new SM_SYSTEM_MESSAGE(1390245,value0);}  }
class C{  public GrantPermission(String name){  super(name);  initFromName(name);}  }
class C{  public static Date max(Collection<Date> dates){  Date latest=null;  for (  Date d : dates) {    latest=max(d,latest);  }  return latest;}  }
class C{  public static InputStream toInputStream(String input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  public SlickForm(Context context,AttributeSet attrs){  super(context,attrs);  initAttrs(context,attrs);}  }
class C{  public LocatorProxy(XMLLocator locator){  fLocator=locator;}  }
class C{  public static int intPow(int b,int e){  if (e == 0) {    return 1;  }  int result=1;  int currPow=b;  do {    if ((e & 1) == 1)     result*=currPow;    currPow=currPow * currPow;    e>>=1;  } while (e > 0);  return result;}  }
class C{  public Webster(String roots) throws BindException {  this.port=Integer.getInteger(WEBSTER_PORT,0);  initialize(roots);}  }
class C{  private void fillBuffer() throws IOException {  if (!endOfInput && (lastCoderResult == null || lastCoderResult.isUnderflow())) {    encoderIn.compact();    int position=encoderIn.position();    int c=reader.read(encoderIn.array(),position,encoderIn.remaining());    if (c == -1) {      endOfInput=true;    } else {      encoderIn.position(position + c);    }    encoderIn.flip();  }  encoderOut.compact();  lastCoderResult=encoder.encode(encoderIn,encoderOut,endOfInput);  encoderOut.flip();}  }
class C{  public void verifyTestItem(TestItem testItem,String id) throws BusinessRuleViolationException {  expect(testItem,notNull(),Suppliers.formattedSupplier("Cannot update issue type for test item '{}', cause it is not found.",id)).verify();  Status actualStatus=testItem.getStatus();  expect(actualStatus,not(equalTo(PASSED)),Suppliers.formattedSupplier("Issue status update cannot be applied on {} test items, cause it is not allowed.",PASSED.name())).verify();  boolean hasDescendants=testItemRepository.hasDescendants(testItem.getId());  expect(hasDescendants,not(equalTo(TRUE)),Suppliers.formattedSupplier("It is not allowed to udpate issue type for items with descendants. Test item '{}' has descendants.",id)).verify();  TestItemIssue actualItemIssue=testItem.getIssue();  expect(actualItemIssue,notNull(),Suppliers.formattedSupplier("Cannot update issue type for test item '{}', cause there is no info about actual issue type value.",id)).verify();  String actualIssueType=actualItemIssue.getIssueType();  expect(actualIssueType,notNull(),Suppliers.formattedSupplier("Cannot update issue type for test item {}, cause it's actual issue type value is not provided.",id)).verify();}  }
class C{  public static Object stringToValue(String string){  Double d;  if (string.equals("")) {    return string;  }  if (string.equalsIgnoreCase("true")) {    return Boolean.TRUE;  }  if (string.equalsIgnoreCase("false")) {    return Boolean.FALSE;  }  if (string.equalsIgnoreCase("null")) {    return JSONObject.NULL;  }  char b=string.charAt(0);  if ((b >= '0' && b <= '9') || b == '-') {    try {      if (string.indexOf('.') > -1 || string.indexOf('e') > -1 || string.indexOf('E') > -1) {        d=Double.valueOf(string);        if (!d.isInfinite() && !d.isNaN()) {          return d;        }      } else {        Long myLong=new Long(string);        if (string.equals(myLong.toString())) {          if (myLong == myLong.intValue()) {            return myLong.intValue();          } else {            return myLong;          }        }      }    } catch (    Exception ignore) {    }  }  return string;}  }
class C{  public static boolean storeNewPlayer(Player player,String accountName,int accountId){  return DAOManager.getDAO(PlayerDAO.class).saveNewPlayer(player.getCommonData(),accountId,accountName) && DAOManager.getDAO(PlayerAppearanceDAO.class).store(player) && DAOManager.getDAO(PlayerSkillListDAO.class).storeSkills(player)&& DAOManager.getDAO(InventoryDAO.class).store(player);}  }
class C{  protected void addOnPropertyChangedCallback(Observable.OnPropertyChangedCallback callback){  onPropertyChangedCallbacks.add(callback);  getViewModel().addOnPropertyChangedCallback(callback);}  }
class C{  public static ControlTagCacheObject createTestEquipmentAlive(){  ControlTagCacheObject cacheObject=new ControlTagCacheObject(new Long(5000200),"Test equipment alive tag","Long",DataTagConstants.MODE_TEST);  cacheObject.setDescription("test alive description");  cacheObject.setLogged(false);  cacheObject.setUnit("seconds since 1970");  cacheObject.setDipAddress("testDIPaddress");  cacheObject.setJapcAddress("testJAPCaddress");  cacheObject.setValue(new Long(System.currentTimeMillis()));  cacheObject.setValueDescription("test value description");  cacheObject.setSimulated(false);  cacheObject.setMinValue(Long.MIN_VALUE);  cacheObject.setMaxValue(Long.MAX_VALUE);  cacheObject.setValueDictionary(new DataTagValueDictionary());  cacheObject.setAddress(new DataTagAddress());  cacheObject.setDataTagQuality(createValidQuality());  cacheObject.setCacheTimestamp(new Timestamp(System.currentTimeMillis()));  cacheObject.setDaqTimestamp(new Timestamp(System.currentTimeMillis()));  cacheObject.setSourceTimestamp(new Timestamp(System.currentTimeMillis()));  return cacheObject;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GIVE_ITEM_PROC_ENCHANTED_TARGET_ITEM(DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1300508,descriptionId);}  }
class C{  public static Object objectFromByteBuffer(byte[] buffer) throws IOException, ClassNotFoundException {  if (buffer == null)   return null;  OptimizedByteArrayInputStream inStream=new OptimizedByteArrayInputStream(buffer);  ObjectInputStream in=new ObjectInputStream(inStream);  Object retval=in.readObject();  in.close();  return retval;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Reflector_PROTECT_A_to_B(String skilltarget,int num0,String skillcaster){  return new SM_SYSTEM_MESSAGE(1201169,skilltarget,num0,skillcaster);}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  void copy(WebappInfo newInfo){  mIsInitialized=newInfo.mIsInitialized;  mEncodedIcon=newInfo.mEncodedIcon;  mDecodedIcon=newInfo.mDecodedIcon;  mId=newInfo.mId;  mUri=newInfo.mUri;  mName=newInfo.mName;  mShortName=newInfo.mShortName;  mOrientation=newInfo.mOrientation;  mSource=newInfo.mSource;  mThemeColor=newInfo.mThemeColor;  mBackgroundColor=newInfo.mBackgroundColor;  mIsIconGenerated=newInfo.mIsIconGenerated;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Recall_Instant_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201242,skilltarget,skillname);}  }
class C{  @Override public void onConnected(Session session){  startPublishing();}  }
class C{  public ViewsFinder not(){  this.complementNextWithFilter=true;  return this;}  }
class C{  public ResultPoint[] detect() throws NotFoundException {  int left=leftInit;  int right=rightInit;  int up=upInit;  int down=downInit;  boolean sizeExceeded=false;  boolean aBlackPointFoundOnBorder=true;  boolean atLeastOneBlackPointFoundOnBorder=false;  boolean atLeastOneBlackPointFoundOnRight=false;  boolean atLeastOneBlackPointFoundOnBottom=false;  boolean atLeastOneBlackPointFoundOnLeft=false;  boolean atLeastOneBlackPointFoundOnTop=false;  while (aBlackPointFoundOnBorder) {    aBlackPointFoundOnBorder=false;    boolean rightBorderNotWhite=true;    while ((rightBorderNotWhite || !atLeastOneBlackPointFoundOnRight) && right < width) {      rightBorderNotWhite=containsBlackPoint(up,down,right,false);      if (rightBorderNotWhite) {        right++;        aBlackPointFoundOnBorder=true;        atLeastOneBlackPointFoundOnRight=true;      } else       if (!atLeastOneBlackPointFoundOnRight) {        right++;      }    }    if (right >= width) {      sizeExceeded=true;      break;    }    boolean bottomBorderNotWhite=true;    while ((bottomBorderNotWhite || !atLeastOneBlackPointFoundOnBottom) && down < height) {      bottomBorderNotWhite=containsBlackPoint(left,right,down,true);      if (bottomBorderNotWhite) {        down++;        aBlackPointFoundOnBorder=true;        atLeastOneBlackPointFoundOnBottom=true;      } else       if (!atLeastOneBlackPointFoundOnBottom) {        down++;      }    }    if (down >= height) {      sizeExceeded=true;      break;    }    boolean leftBorderNotWhite=true;    while ((leftBorderNotWhite || !atLeastOneBlackPointFoundOnLeft) && left >= 0) {      leftBorderNotWhite=containsBlackPoint(up,down,left,false);      if (leftBorderNotWhite) {        left--;        aBlackPointFoundOnBorder=true;        atLeastOneBlackPointFoundOnLeft=true;      } else       if (!atLeastOneBlackPointFoundOnLeft) {        left--;      }    }    if (left < 0) {      sizeExceeded=true;      break;    }    boolean topBorderNotWhite=true;    while ((topBorderNotWhite || !atLeastOneBlackPointFoundOnTop) && up >= 0) {      topBorderNotWhite=containsBlackPoint(left,right,up,true);      if (topBorderNotWhite) {        up--;        aBlackPointFoundOnBorder=true;        atLeastOneBlackPointFoundOnTop=true;      } else       if (!atLeastOneBlackPointFoundOnTop) {        up--;      }    }    if (up < 0) {      sizeExceeded=true;      break;    }    if (aBlackPointFoundOnBorder) {      atLeastOneBlackPointFoundOnBorder=true;    }  }  if (!sizeExceeded && atLeastOneBlackPointFoundOnBorder) {    int maxSize=right - left;    ResultPoint z=null;    for (int i=1; i < maxSize; i++) {      z=getBlackPointOnSegment(left,down - i,left + i,down);      if (z != null) {        break;      }    }    if (z == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint t=null;    for (int i=1; i < maxSize; i++) {      t=getBlackPointOnSegment(left,up + i,left + i,up);      if (t != null) {        break;      }    }    if (t == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint x=null;    for (int i=1; i < maxSize; i++) {      x=getBlackPointOnSegment(right,up + i,right - i,up);      if (x != null) {        break;      }    }    if (x == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint y=null;    for (int i=1; i < maxSize; i++) {      y=getBlackPointOnSegment(right,down - i,right - i,down);      if (y != null) {        break;      }    }    if (y == null) {      throw NotFoundException.getNotFoundInstance();    }    return centerEdges(y,z,x,t);  } else {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  public void loadAttributeData(String fileName) throws IOException {  InputStream ins=ResourceManager.getFileAsStream(fileName);  loadAttributeData(ins);  ins.close();}  }
class C{  public String inflateByteArray2String(int numberOfBytes,byte[] bytes) throws DataFormatException {  if (numberOfBytes == 0)   return "";  if (numberOfBytes < 0) {    try {      return new String(bytes,0,-numberOfBytes,"UTF-8");    } catch (    UnsupportedEncodingException e) {      StringBuilder buf=new StringBuilder();      for (int i=0; i < -numberOfBytes; i++)       buf.append((char)bytes[i]);      return buf.toString();    }  }  inflater.setInput(bytes,0,numberOfBytes);  if (buffer.length < 10 * bytes.length)   buffer=new byte[10 * bytes.length];  int resultLength=inflater.inflate(buffer);  String outputString;  try {    outputString=new String(buffer,0,resultLength,"UTF-8");  } catch (  UnsupportedEncodingException e) {    StringBuilder buf=new StringBuilder();    for (int i=0; i < resultLength; i++)     buf.append((char)buffer[i]);    outputString=buf.toString();  }  inflater.reset();  return outputString;}  }
class C{  public boolean isDir(){  return isDir;}  }
class C{  public void clear(){  this.keys.clear();}  }
class C{  public MaxReducer ignoreExceptions(){  this.ignoreExceptions=true;  return this;}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public MessagesAddChatUserQuery(VkApiClient client,UserActor actor,int chatId,int userId){  super(client,"messages.addChatUser",OkResponse.class);  accessToken(actor.getAccessToken());  chatId(chatId);  userId(userId);}  }
class C{  protected FileFileFilter(){}  }
class C{  public static LinkedHashSet<PhysicalTableDefinition> buildShapeTableDefinitions(TestDimensions testDimensions){  return Utils.asLinkedHashSet(new PhysicalTableDefinition(ALL_SHAPES,DAY.buildZonedTimeGrain(DateTimeZone.UTC),testDimensions.getDimensionConfigurationsByApiName(COLOR,SIZE,SHAPE,OTHER,MODEL)),new PhysicalTableDefinition(COLOR_SHAPES_HOURLY,HOUR.buildZonedTimeGrain(DateTimeZone.UTC),testDimensions.getDimensionConfigurationsByApiName(COLOR)),new PhysicalTableDefinition(COLOR_SHAPES,DAY.buildZonedTimeGrain(DateTimeZone.UTC),testDimensions.getDimensionConfigurationsByApiName(COLOR)),new PhysicalTableDefinition(COLOR_SHAPES_MONTHLY,MONTH.buildZonedTimeGrain(DateTimeZone.UTC),testDimensions.getDimensionConfigurationsByApiName(COLOR)),new PhysicalTableDefinition(COLOR_SIZE_SHAPES,DAY.buildZonedTimeGrain(DateTimeZone.UTC),testDimensions.getDimensionConfigurationsByApiName(COLOR,SIZE)),new PhysicalTableDefinition(COLOR_SIZE_SHAPE_SHAPES,DAY.buildZonedTimeGrain(DateTimeZone.UTC),testDimensions.getDimensionConfigurationsByApiName(COLOR,SIZE,SHAPE)));}  }
class C{  public PathSubject containsFile(String filename,String fileContents) throws IOException {  Path filePath=checkFile(filename);  String realContents=new String(Files.readAllBytes(filePath),StandardCharsets.UTF_8);  if (!realContents.equals(fileContents)) {    failWithCustomSubject(filename + " file content equals",fileContents,realContents);  }  return this;}  }
class C{  public VideoSaveQuery noComments(Boolean value){  return unsafeParam("no_comments",value);}  }
class C{  public boolean isComponentPresent(String componentName,String groupName){  if (isComponentGroupPresent(groupName)) {    if (!SidekickActions.isSectionExpanded(getSectionByName(groupName))) {      clickComponentGroupToggle(groupName);    }    return getComponentNames(groupName).contains(componentName);  }  throw new IllegalArgumentException("Group name " + groupName + " does not exist");}  }
class C{  protected AdsCreateTargetGroupQuery name(String value){  return unsafeParam("name",value);}  }
class C{  private Collection<Var> migrateAsResource(String ownerType,ResourceType.DataType columnType,String columnName){  String resourceName=namer.resourceName(ownerType,columnName);  Var resourceType=var().id(resourceName).datatype(columnType).isa("resource-type");  Var hasResource=var().id(ownerType).hasResource(resourceName);  return Lists.newArrayList(resourceType,hasResource);}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  private void onSaveState(Bundle outState){  outState.putSerializable(KEY_UUID,mUUID);}  }
class C{  public List<Entry> parse(InputStream in) throws XmlPullParserException, IOException, ParseException {  try {    XmlPullParser parser=Xml.newPullParser();    parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES,false);    parser.setInput(in,null);    parser.nextTag();    return readFeed(parser);  }  finally {    in.close();  }}  }
class C{  public String diff_toDelta(List<Diff> diffs){  StringBuilder text=new StringBuilder();  for (  Diff aDiff : diffs) {switch (aDiff.operation) {case INSERT:      try {        text.append("+").append(URLEncoder.encode(aDiff.text,"UTF-8").replace('+',' ')).append("\t");      } catch (      UnsupportedEncodingException e) {        throw new Error("This system does not support UTF-8.",e);      }    break;case DELETE:  text.append("-").append(aDiff.text.length()).append("\t");break;case EQUAL:text.append("=").append(aDiff.text.length()).append("\t");break;}}String delta=text.toString();if (delta.length() != 0) {delta=delta.substring(0,delta.length() - 1);delta=unescapeForEncodeUriCompatability(delta);}return delta;}  }
class C{  public static Map<String,Object> createUserPrefMap(List<GenericValue> recList) throws GeneralException {  Map<String,Object> userPrefMap=new LinkedHashMap<String,Object>();  if (recList != null) {    for (    GenericValue value : recList) {      addPrefToMap(value,userPrefMap);    }  }  return userPrefMap;}  }
class C{  public Vector3f interpolate(Vector3f beginVec,Vector3f finalVec,float changeAmnt){  this.x=(1 - changeAmnt) * beginVec.x + changeAmnt * finalVec.x;  this.y=(1 - changeAmnt) * beginVec.y + changeAmnt * finalVec.y;  this.z=(1 - changeAmnt) * beginVec.z + changeAmnt * finalVec.z;  return this;}  }
class C{  public static final boolean isValidQueryValue(String value){  return value != null && value.matches(QUERY_VALUE_REGEX);}  }
class C{  public double optDouble(String key,double defaultValue){  LazyNode token=getOptionalFieldToken(key);  if (token == null)   return defaultValue;  if (token.type == LazyNode.VALUE_NULL)   return defaultValue;  return token.getDoubleValue(cbuf);}  }
class C{  public boolean isEmpty(){  return this == NONE || (left == 0 && top == 0 && right == 0 && bottom == 0);}  }
class C{  public static boolean checkIfExpressionContainsColumn(Expression expression){  if (expression instanceof ColumnExpression) {    return true;  }  for (  Expression child : expression.getChildren()) {    if (checkIfExpressionContainsColumn(child)) {      return true;    }  }  return false;}  }
class C{  public List<Double> train(DataSource<Document> docs,int numIterations,int numBurnIn){  LOG.info("Training start, num_iter:" + numIterations + " num_burn_in:"+ numBurnIn);  List<Double> loglikelihoods=new ArrayList<Double>();  setLocked(false);  long numTagTokens=0;  int totalNumDocs=0;  for (  Document d : docs) {    initializeDocument(d);    numTagTokens+=d.tags.length;    totalNumDocs++;  }  docs.rewind();  LOG.info("Number of tag tokens: " + numTagTokens + " N/R: "+ pcm());  SparseCounter<String> meanNtw=new SparseCounter<String>();  Counter<String> meanNw=new Counter<String>();  for (int i=0; i < numIterations; i++) {    double l=0;    Map<String,AnyDoublePair<Integer>> perTagLikelihood=new Hashtable<String,AnyDoublePair<Integer>>();    long numDocs=0;    for (    Document d : docs) {      l+=inference(d,perTagLikelihood);      numDocs++;      if (numDocs % 1000 == 0) {        System.err.print("Sampling " + (numDocs * 100 / totalNumDocs) + "%  \r");        System.err.flush();      }    }    docs.rewind();    l/=numTagTokens;    double pertagl=0;    for (    Entry<String,AnyDoublePair<Integer>> e : perTagLikelihood.entrySet()) {      pertagl+=e.getValue().second / (double)e.getValue().first;    }    pertagl/=perTagLikelihood.size();    LOG.info(" No: " + i + " LL: "+ String.format("%.4f",l)+ " PL: "+ String.format("%.4f",pertagl)+ " NR: "+ String.format("%.4f",pcm())+ " SP: "+ String.format("%.4f",ntw.sparsity())+ " NZ: "+ ntw.numNonZeroElements());    if (i > numBurnIn) {      meanNtw.inc(ntw);      meanNw.inc(nw);    }    loglikelihoods.add(l);  }  ntw=null;  ntw=meanNtw;  nw=null;  nw=meanNw;  numCombinedIterations=numIterations - numBurnIn;  setLocked(true);  return loglikelihoods;}  }
class C{  public void updateSchema(TableId table,String topic,Set<Schema> schemas){  Schema kafkaConnectSchema=schemaRetriever.retrieveSchema(table,topic,schemas);  bigQuery.update(constructTableInfo(table,kafkaConnectSchema));}  }
class C{  private boolean isBrigadeGeneral(Player player){  return player.getLegionMember().isBrigadeGeneral();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PET_CONDITION_CARE_01(String value0){  return new SM_SYSTEM_MESSAGE(1400865,value0);}  }
class C{  private static void shieldExample(RxJava1Hub rxJava1Hub){  Shield shield=new Shield(rxJava1Hub);  Observable srcLong=Observable.from(new Long[]{1l,3l,5l,7l,11l,13l,101l,201l,301l,401l,501l});  Observable srcString=Observable.from(new String[]{"a","b","c","d","f"});  shield.getNames().subscribe(null);  shield.getBigOnes().subscribe(null);  rxJava1Hub.addUpstream("topic1",srcLong);  rxJava1Hub.addUpstream("topic1",srcString);  new Thread(null).start();}  }
class C{  protected final Interval doSolveInterval() throws MathIllegalStateException {  double x0=getMin();  double x1=getMax();  double f0=computeObjectiveValue(x0);  double f1=computeObjectiveValue(x1);  if (f0 == 0.0) {    return new Interval(x0,f0,x0,f0);  }  if (f1 == 0.0) {    return new Interval(x1,f1,x1,f1);  }  verifyBracketing(x0,x1);  final double ftol=getFunctionValueAccuracy();  final double atol=getAbsoluteAccuracy();  final double rtol=getRelativeAccuracy();  boolean inverted=false;  while (true) {    final double x=x1 - ((f1 * (x1 - x0)) / (f1 - f0));    final double fx=computeObjectiveValue(x);    if (fx == 0.0) {      return new Interval(x,fx,x,fx);    }    if (f1 * fx < 0) {      x0=x1;      f0=f1;      inverted=!inverted;    } else {switch (method) {case ILLINOIS:        f0*=0.5;      break;case PEGASUS:    f0*=f1 / (f1 + fx);  break;case REGULA_FALSI:if (x == x1) {  throw new MathIllegalStateException(LocalizedCoreFormats.CONVERGENCE_FAILED);}break;default :throw MathRuntimeException.createInternalError();}}x1=x;f1=fx;if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol) || (FastMath.abs(f1) < ftol && (allowed == AllowedSolution.ANY_SIDE || (inverted && allowed == AllowedSolution.LEFT_SIDE) || (!inverted && allowed == AllowedSolution.RIGHT_SIDE) || (f1 <= 0.0 && allowed == AllowedSolution.BELOW_SIDE) || (f1 >= 0.0 && allowed == AllowedSolution.ABOVE_SIDE)))) {if (inverted) {return new Interval(x1,f1,x0,f0);} else {return new Interval(x0,f0,x1,f1);}}}}  }
class C{  private static TxnManager constrainServer(TxnManager server,MethodConstraints constraints){  RemoteMethodControl constrainedServer=((RemoteMethodControl)server).setConstraints(constraints);  return ((TxnManager)constrainedServer);}  }
class C{  public long pos(){  return (id & (-1L >>> FACE_BITS));}  }
class C{  public void show(boolean animate){  show(animate,fadeIn);}  }
class C{  public void flush(){  if (this.durable) {    PageAllocator.incrementCacheMisses();    this.pageData.force();  }}  }
class C{  private static double computeJSD(double[] px,double[] py){  double[] m=computeMean(px,py);  return 0.5 * (computeKLD(px,m) + computeKLD(py,m));}  }
class C{  private void parseCatalogs() throws IOException {  if (fCatalogsList != null) {    fCatalog=new Catalog(fResolverCatalogManager);    attachReaderToCatalog(fCatalog);    for (int i=0; i < fCatalogsList.length; ++i) {      String catalog=fCatalogsList[i];      if (catalog != null && catalog.length() > 0) {        fCatalog.parseCatalog(catalog);      }    }  } else {    fCatalog=null;  }}  }
class C{  public int read(ByteBuffer dst) throws IOException {  if (!dst.hasRemaining())   return 0;  if (!isHandShakeComplete()) {    if (isBlocking()) {      while (!isHandShakeComplete()) {        processHandshake();      }    } else {      processHandshake();      if (!isHandShakeComplete()) {        return 0;      }    }  }  int purged=readRemaining(dst);  if (purged != 0)   return purged;  assert (inData.position() == 0);  inData.clear();  if (!inCrypt.hasRemaining())   inCrypt.clear(); else   inCrypt.compact();  if (isBlocking() || readEngineResult.getStatus() == Status.BUFFER_UNDERFLOW)   if (socketChannel.read(inCrypt) == -1) {    return -1;  }  inCrypt.flip();  unwrap();  int transfered=transfereTo(inData,dst);  if (transfered == 0 && isBlocking()) {    return read(dst);  }  return transfered;}  }
class C{  @Override public boolean accept(File directory,String fileName){  if (!super.accept(directory,fileName))   return false;  final String firstLine=Basic.getFirstLineFromFile(new File(fileName));  return firstLine != null && (firstLine.contains(" vs ") || firstLine.contains("NO HIT"));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBINE_BROADCAST_COMBINE_SUCCESS(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400974,value0,value1);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ITEM_COLOR_REMOVE_SUCCEED(String value0){  return new SM_SYSTEM_MESSAGE(1300510,value0);}  }
class C{  public void drawChartTransposed(Graphics2D gc){  final SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));  gc.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  int y0=getHeight() - bottomMargin;  int y1=topMargin;  int x0=leftMargin;  int scaleWidth=30;  int x1=getWidth() - rightMargin - scaleWidth;  if (x0 >= x1)   return;  if (inUpdateCoordinates) {    gc.setFont(getFont("Default"));    gc.setColor(Color.LIGHT_GRAY);    gc.drawString("Computing correlation plot...",x0,y1 + 20);    viewer.getScrollPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));    return;  } else   viewer.getScrollPane().setCursor(Cursor.getDefaultCursor());  if (sgc != null) {    drawYAxis(gc,null);  }  if (!getChartTitle().startsWith("Correlation plot: "))   setChartTitle("Correlation plot: " + getChartTitle());  final int numberOfClasses=(classNames != null ? classNames.length : 0);  final int numberOfAttributes=(attributeNames != null ? attributeNames.length : 0);  if (viewer.getAttributesList().isDoClustering())   y1+=topTreeSpace;  if (sgc == null) {    drawScaleBar(gc,x1,scaleWidth,y1,y0 - y1);  }  if (viewer.getClassesList().isDoClustering()) {    x1-=rightTreeSpace;    int height=(int)Math.round((y0 - y1) / (numberOfClasses + 1.0) * numberOfClasses);    int yStart=y0 + ((y1 - y0) - height) / 2;    final Rectangle rect=new Rectangle(x1,yStart,rightTreeSpace,height);    classesClusteringTree.paint(gc,rect);  }  if (viewer.getAttributesList().isDoClustering()) {    int width=(int)((x1 - x0) / (numberOfAttributes + 1.0) * numberOfAttributes);    int xStart=x0 + ((x1 - x0) - width) / 2;    final Rectangle rect=new Rectangle(xStart,y1 - topTreeSpace,width,topTreeSpace);    attributesClusteringTree.paint(gc,rect);  }  double xStep=(x1 - x0) / (double)numberOfAttributes;  double yStep=(y0 - y1) / (double)numberOfClasses;  if (numberOfClasses > 0 && numberOfAttributes > 0) {    int d=0;    for (    String attributeNameX : attributeNames) {      final double xLabel=x0 + (d + 0.5) * xStep;      Point2D apt=new Point2D.Double(xLabel,getHeight() - bottomMargin + 10);      final Dimension labelSize=Basic.getStringSize(gc,attributeNameX,gc.getFont()).getSize();      if (classLabelAngle == 0) {        apt.setLocation(apt.getX() - labelSize.getWidth() / 2,apt.getY());      } else       if (classLabelAngle > Math.PI / 2) {        apt=Geometry.translateByAngle(apt,classLabelAngle,-labelSize.width);      }      if (getChartData().getChartSelection().isSelectedAttribute(attributeNameX)) {        fillAndDrawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);      }      gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.DARK_GRAY));      drawString(gc,attributeNameX,apt.getX(),apt.getY(),classLabelAngle);      if (sgc != null) {        sgc.setCurrentItem(new String[]{null,attributeNameX});        drawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle);        sgc.clearCurrentItem();      }      int c=numberOfClasses - 1;      for (      String classNameY : classNames) {        final Float correlationCoefficient=dataMatrix.get(classNameY,attributeNameX);        if (correlationCoefficient != null) {          final double[] boundingBox=new double[]{x0 + d * xStep,y0 - (c + 1) * yStep,xStep,yStep};          drawCell(gc,boundingBox,correlationCoefficient);          if (sgc != null && !sgc.isShiftDown()) {            sgc.setCurrentItem(new String[]{null,classNameY,attributeNameX});            gc.fillRect((int)Math.round(boundingBox[0]),(int)Math.round(boundingBox[1]),(int)Math.round(boundingBox[2]),(int)Math.round(boundingBox[3]));            sgc.clearCurrentItem();            sgc.setCurrentItem(new String[]{null,classNameY,attributeNameX});            gc.fillRect((int)Math.round(boundingBox[0]),(int)Math.round(boundingBox[1]),(int)Math.round(boundingBox[2]),(int)Math.round(boundingBox[3]));            sgc.clearCurrentItem();          }          boolean isSelected=false;          if (getChartData().getChartSelection().isSelectedClass(classNameY)) {            if (getChartData().getChartSelection().isSelectedAttribute(attributeNameX) || getChartData().getChartSelection().getSelectedAttributes().size() == 0)             isSelected=true;          } else           if (getChartData().getChartSelection().getSelectedClasses().size() == 0 && getChartData().getChartSelection().isSelectedAttribute(attributeNameX))           isSelected=true;          if (isSelected) {            gc.setStroke(HEAVY_STROKE);            gc.setColor(ProgramProperties.SELECTION_COLOR);            gc.drawRect((int)Math.round(boundingBox[0]),(int)Math.round(boundingBox[1]),(int)Math.round(boundingBox[2]),(int)Math.round(boundingBox[3]));            gc.setStroke(NORMAL_STROKE);          }          if (showValues || isSelected) {            String aLabel=String.format("%.3f",correlationCoefficient);            valuesList.add(new DrawableValue(aLabel,(int)Math.round(boundingBox[0] + boundingBox[2] / 2),(int)Math.round(boundingBox[1] + boundingBox[3] / 2) - gc.getFont().getSize() / 2,isSelected));          }        }        c--;      }      d++;    }  }  if (valuesList.size() > 0) {    gc.setFont(getFont(ChartViewer.FontKeys.ValuesFont.toString()));    DrawableValue.drawValues(gc,valuesList,true,true);    valuesList.clear();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_GET_COIN_IDARENA(String value0){  return new SM_SYSTEM_MESSAGE(1400934,value0);}  }
class C{  void adjustSelection(int selectionStartAdjust,int selectionEndAdjust){  if (selectionStartAdjust == 0 && selectionEndAdjust == 0)   return;  ContentViewCore basePageContentView=getBaseContentView();  if (basePageContentView != null && basePageContentView.getWebContents() != null) {    mDidExpandSelection=true;    basePageContentView.getWebContents().adjustSelectionByCharacterOffset(selectionStartAdjust,selectionEndAdjust);  }}  }
class C{  public static float calculateBottom(float left,float top,float right,float targetAspectRatio){  final float width=right - left;  return (width / targetAspectRatio) + top;}  }
class C{  public AppAboutObject(int id,int iconId,String text){  this.id=id;  this.iconId=iconId;  this.text=text;}  }
class C{  public void selectAll(boolean select){  classificationViewer.selectAllNodes(select);  classificationViewer.repaint();}  }
class C{  @Override public long addUser(User user){  return sessionTemplate.insert(NAMESPACE + ".addUser",user);}  }
class C{  public AccountUnbanUserQuery(VkApiClient client,UserActor actor,int userId){  super(client,"account.unbanUser",OkResponse.class);  accessToken(actor.getAccessToken());  userId(userId);}  }
class C{  public static List<Locale> availableLocales(){  return LocaleHolder.availableLocaleList;}  }
class C{  public LocalFileSystemStore(){  super();}  }
class C{  public static List<Target> createTargetsWithPauses(List<Element> segmentsAndBoundaries,String silenceSymbol){  List<Target> targets=new ArrayList<Target>();  if (segmentsAndBoundaries.size() == 0)   return targets;  Element last=segmentsAndBoundaries.get(segmentsAndBoundaries.size() - 1);  if (!last.getTagName().equals(MaryXML.BOUNDARY)) {    Element finalPause=MaryXML.createElement(last.getOwnerDocument(),MaryXML.BOUNDARY);    Element token=(Element)DomUtils.getAncestor(last,MaryXML.TOKEN);    Element parent=(Element)token.getParentNode();    parent.appendChild(finalPause);    segmentsAndBoundaries.add(finalPause);  }  for (  Element sOrB : segmentsAndBoundaries) {    String phone=UnitSelector.getPhoneSymbol(sOrB);    targets.add(new HalfPhoneTarget(phone + "_L",sOrB,true));    targets.add(new HalfPhoneTarget(phone + "_R",sOrB,false));  }  return targets;}  }
class C{  private static byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  public static Dfp tan(final Dfp a){  return sin(a).divide(cos(a));}  }
class C{  public static String fromColour(Color colour){  if (colour == null) {    return null;  }  String colourString=toHex(colour.getRed(),colour.getGreen(),colour.getBlue());  return colourString;}  }
class C{  private void addColumns(List<ColumnModel> columnModelList){  LogUtil.d(TAG,"do addColumn");  execute(getAddColumnSQLs(columnModelList),mDb);  for (  ColumnModel columnModel : columnModelList) {    mTableModelDB.addColumnModel(columnModel);  }}  }
class C{  public void shuffleTestSet(){  utils.shuffleList(TestFiles);}  }
class C{  public InsertComponentWindow openInsertDialog(){  tryToSelect();  tryToOpenInsertWindow();  return insertComponentWindow;}  }
class C{  public Builder noWrap(Boolean noWrap){  this.noWrap=noWrap;  return this;}  }
class C{  public static boolean openIntent(Context context,Intent intent,boolean allowSelfOpen){  boolean activityResolved=ExternalNavigationDelegateImpl.resolveIntent(context,intent,allowSelfOpen);  if (activityResolved) {    try {      context.startActivity(intent);      return true;    } catch (    ActivityNotFoundException ex) {      Log.d(TAG,"activity not found for " + intent.getType() + " over "+ intent.getData().getScheme(),ex);    }  }  return false;}  }
class C{  @Override public void clear(){  if (mSize != 0) {    freeArrays(mHashes,mArray,mSize);    mHashes=ContainerHelpers.EMPTY_INTS;    mArray=ContainerHelpers.EMPTY_OBJECTS;    mSize=0;  }}  }
class C{  public DocumentNGramGaussNormSymWinGraph(int iMinSize,int iMaxSize,int iCorrelationWindow){  MinSize=iMinSize;  MaxSize=iMaxSize;  CorrelationWindow=iCorrelationWindow;  InitGraphs();}  }
class C{  public SLDEditor(String filename,List<String> extensionArgList){  UndoManager.getInstance().setPopulationCheck(Controller.getInstance());  PropertyManagerInterface propertyManager=PropertyManagerFactory.getInstance();  propertyManager.readConfig();  PrefManager.initialise(propertyManager);  extensionList=ExtensionFactory.getAvailableExtensions();  String uiLayout=PrefManager.getInstance().getPrefData().getUiLayoutClass();  UILayoutInterface ui=UILayoutFactory.getUILayout(uiLayout);  ui.createUI(this,uiMgr,extensionList);  SLDEditorMenus.createMenus(this,extensionList);  frame.setBounds(0,0,APPLICATION_FRAME_WIDTH,APPLICATION_FRAME_HEIGHT);  setApplicationIcon();  UILayoutFactory.readLayout(null);  PrefManager.finish();  uiMgr.populateUI(0);  for (  ExtensionInterface extension : extensionList) {    List<String> extensionSpecificArgumentList=ExtensionFactory.getArguments(extension,extensionArgList);    extension.setArguments(extensionSpecificArgumentList);  }  if (filename != null) {    File file=new File(filename);    URL url;    try {      url=file.toURI().toURL();      List<SLDDataInterface> sldDataList=null;      for (      ExtensionInterface extension : extensionList) {        if (sldDataList == null) {          sldDataList=extension.open(url);        }      }    } catch (    MalformedURLException e) {      ConsoleManager.getInstance().exception(this,e);    }  }}  }
class C{  public ToolButton(String text,String resourceString){  super("");  setToolTipText(text);  ImageIcon imageIcon=getResourceIcon(resourceString);  this.setIcon(imageIcon);  if (imageIcon != null) {    this.setSize(imageIcon.getIconWidth(),imageIcon.getIconHeight());  }}  }
class C{  public boolean shouldAllowRequest(String url){  for (  PluginEntry entry : this.entryMap.values()) {    CordovaPlugin plugin=pluginMap.get(entry.service);    if (plugin != null) {      Boolean result=plugin.shouldAllowRequest(url);      if (result != null) {        return result;      }    }  }  if (url.startsWith("blob:") || url.startsWith("data:") || url.startsWith("about:blank")) {    return true;  }  if (url.startsWith("https://ssl.gstatic.com/accessibility/javascript/android/")) {    return true;  }  if (url.startsWith("file://")) {    return !url.contains("/app_webview/");  }  return false;}  }
class C{  @SuppressWarnings("unused") public int resumptionPoint(){  return resumptionPoint;}  }
class C{  public boolean isEmpty(){  return map.isEmpty();}  }
class C{  public char next() throws JSONException {  int c;  if (this.usePrevious) {    this.usePrevious=false;    c=this.previous;  } else {    try {      c=this.reader.read();    } catch (    IOException exception) {      throw new JSONException(exception);    }    if (c <= 0) {      this.eof=true;      c=0;    }  }  this.index+=1;  if (this.previous == '\r') {    this.line+=1;    this.character=c == '\n' ? 0 : 1;  } else   if (c == '\n') {    this.line+=1;    this.character=0;  } else {    this.character+=1;  }  this.previous=(char)c;  return this.previous;}  }
class C{  @Override public int hashCode(){  return _hashCode;}  }
class C{  static Set<String> parsePathParameters(String path){  Matcher m=PARAM_URL_REGEX.matcher(path);  Set<String> patterns=new LinkedHashSet<>();  while (m.find()) {    patterns.add(m.group(1));  }  return patterns;}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public FieldConfigCommonData(FieldConfigCommonData commonData){  if (commonData != null) {    this.panelId=commonData.panelId;    this.id=commonData.id;    this.label=commonData.label;    this.valueOnly=commonData.valueOnly;    this.rasterSymbol=commonData.rasterSymbol;  }}  }
class C{  protected WallSearchQueryWithExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  public static String convertToJavaClassName(String name){  int dotIndex=name.indexOf('.');  if (dotIndex >= 0) {    name=name.substring(0,dotIndex);  }  String[] split=name.split("[_-]");  StringBuilder out=new StringBuilder();  for (  String section : split) {    out.append(StringUtil.capitalize(section));  }  return out.toString();}  }
class C{  private void analyzeClassFields(String className,int action){  try {    Class<?> dynamicClass=Class.forName(className);    Field[] fields=dynamicClass.getDeclaredFields();    for (    Field field : fields) {      if (isPrivateAndNonPrimitive(field)) {        oneToAnyConditions(className,field,action);        manyToAnyConditions(className,field,action);      }    }  } catch (  ClassNotFoundException ex) {    ex.printStackTrace();    throw new DatabaseGenerateException(DatabaseGenerateException.CLASS_NOT_FOUND + className);  }}  }
class C{  public boolean isSeparateGroup(){  return isSeparateGroup;}  }
class C{  @Deprecated public static String toString(byte[] input) throws IOException {  return new String(input);}  }
class C{  private void displayCaughtMsg(PokeModel pokeModel,boolean hasPokemonBeenCaught){  if (hasPokemonBeenCaught) {    SoundUtils.playPokemonCaughtSound(mContext);    TypefaceUtils.displayToast(mContext,pokeModel.getName().toUpperCase() + " was caught!",TypefaceUtils.TOAST_SHORT_DURATION);  }}  }
class C{  public IdsQuery(Class<T> type,Object[] ids,Object[] routings,QueryResultType queryResultType){  this(type.getName(),ids,null,routings,queryResultType);}  }
class C{  public GroupsGetQuery fields(GroupField... value){  return unsafeParam("fields",value);}  }
class C{  public ExampleLineImpl(){}  }
class C{  protected View onCreateDialogView(){  if (mDialogLayoutResId == 0) {    return null;  }  LayoutInflater inflater=LayoutInflater.from(mBuilder.getContext());  return inflater.inflate(mDialogLayoutResId,null);}  }
class C{  protected GroupsInviteQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  public static Map<String,Object> testXmlRpcAdd(DispatchContext dctx,Map<String,?> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> response=ServiceUtil.returnSuccess();  Integer num1=(Integer)context.get("num1");  Integer num2=(Integer)context.get("num2");  if (UtilValidate.isEmpty(num1) || UtilValidate.isEmpty(num2)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ServiceTestXmlRpcMissingParameters",locale));  }  Integer res=num1 + num2;  response.put("resulting",res);  return response;}  }
class C{  public static Call checkCoordinate(Coordinate coordinate,@Nullable Double buffer,@Nullable List<MappingService.AirMapAirspaceType> types,@Nullable List<MappingService.AirMapAirspaceType> ignoredTypes,boolean showWeather,@Nullable Date date,@Nullable AirMapCallback<AirMapStatus> callback){  return StatusService.checkCoordinate(coordinate,buffer,types,ignoredTypes,showWeather,date,callback);}  }
class C{  public void write(String filename) throws DataIOException {  try {    write(new FileOutputStream(filename));  } catch (  FileNotFoundException e) {    throw new DataIOException(e);  }}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  private void populateSingleIVMatch(IVScanResult ivScanResult){  llMaxIV.setVisibility(View.GONE);  llMinIV.setVisibility(View.GONE);  tvAvgIV.setText(getString(R.string.iv));  resultsAttack.setText(String.valueOf(ivScanResult.iVCombinations.get(0).att));  resultsDefense.setText(String.valueOf(ivScanResult.iVCombinations.get(0).def));  resultsHP.setText(String.valueOf(ivScanResult.iVCombinations.get(0).sta));  GuiUtil.setTextColorByIV(resultsAttack,ivScanResult.iVCombinations.get(0).att);  GuiUtil.setTextColorByIV(resultsDefense,ivScanResult.iVCombinations.get(0).def);  GuiUtil.setTextColorByIV(resultsHP,ivScanResult.iVCombinations.get(0).sta);  llSingleMatch.setVisibility(View.VISIBLE);  llMultipleIVMatches.setVisibility(View.GONE);}  }
class C{  private void internal_updateSymbolIntegerField(Map<String,String> options,FieldIdEnum field,String key){  int value=fieldConfigVisitor.getInteger(field);  Integer defaultValue=(Integer)getDefaultFieldValue(field);  if (defaultValue == null) {    ConsoleManager.getInstance().error(this,"Failed to find default for field : " + field);  } else   if (value != defaultValue) {    options.put(key,String.valueOf(value));  }}  }
class C{  public Map<String,Object> makeValid(Map<String,? extends Object> source,String mode,boolean includeInternal,List<Object> errorMessages){  return makeValid(source,mode,includeInternal,errorMessages,null);}  }
class C{  public synchronized final Map<String,V> snapshot(){  return new LinkedHashMap<String,V>(map);}  }
class C{  public BoxFolder createFolderUnderRoot(String folderName) throws BoxSDKServiceException {  return createFolder(folderName,getBoxSDKServiceConfig().getRootFolderId());}  }
class C{  public boolean hasSuperClassAccess(){  return getSuperClassAccessOpt().getNumChild() != 0;}  }
class C{  Edge(final Vertex start,final Vertex end,final double length,final Circle circle){  this.start=start;  this.end=end;  this.length=length;  this.circle=circle;  start.setOutgoing(this);  end.setIncoming(this);}  }
class C{  public static boolean sleep(final long milliseconds){  try {    Thread.sleep(milliseconds);    return false;  } catch (  InterruptedException e) {    logger.warn("Thread {} has been interrupted",Thread.currentThread().getName(),e);    return true;  }}  }
class C{  @Override public Box clone(){  return new Box(center.clone(),xExtent,yExtent,zExtent);}  }
class C{  public Matrix4f invertLocal(){  float fA0=m00 * m11 - m01 * m10;  float fA1=m00 * m12 - m02 * m10;  float fA2=m00 * m13 - m03 * m10;  float fA3=m01 * m12 - m02 * m11;  float fA4=m01 * m13 - m03 * m11;  float fA5=m02 * m13 - m03 * m12;  float fB0=m20 * m31 - m21 * m30;  float fB1=m20 * m32 - m22 * m30;  float fB2=m20 * m33 - m23 * m30;  float fB3=m21 * m32 - m22 * m31;  float fB4=m21 * m33 - m23 * m31;  float fB5=m22 * m33 - m23 * m32;  float fDet=fA0 * fB5 - fA1 * fB4 + fA2 * fB3 + fA3 * fB2 - fA4 * fB1 + fA5 * fB0;  if (FastMath.abs(fDet) <= 0f) {    return zero();  }  float f00=+m11 * fB5 - m12 * fB4 + m13 * fB3;  float f10=-m10 * fB5 + m12 * fB2 - m13 * fB1;  float f20=+m10 * fB4 - m11 * fB2 + m13 * fB0;  float f30=-m10 * fB3 + m11 * fB1 - m12 * fB0;  float f01=-m01 * fB5 + m02 * fB4 - m03 * fB3;  float f11=+m00 * fB5 - m02 * fB2 + m03 * fB1;  float f21=-m00 * fB4 + m01 * fB2 - m03 * fB0;  float f31=+m00 * fB3 - m01 * fB1 + m02 * fB0;  float f02=+m31 * fA5 - m32 * fA4 + m33 * fA3;  float f12=-m30 * fA5 + m32 * fA2 - m33 * fA1;  float f22=+m30 * fA4 - m31 * fA2 + m33 * fA0;  float f32=-m30 * fA3 + m31 * fA1 - m32 * fA0;  float f03=-m21 * fA5 + m22 * fA4 - m23 * fA3;  float f13=+m20 * fA5 - m22 * fA2 + m23 * fA1;  float f23=-m20 * fA4 + m21 * fA2 - m23 * fA0;  float f33=+m20 * fA3 - m21 * fA1 + m22 * fA0;  m00=f00;  m01=f01;  m02=f02;  m03=f03;  m10=f10;  m11=f11;  m12=f12;  m13=f13;  m20=f20;  m21=f21;  m22=f22;  m23=f23;  m30=f30;  m31=f31;  m32=f32;  m33=f33;  float fInvDet=1.0f / fDet;  multLocal(fInvDet);  return this;}  }
class C{  public boolean contains(String sCategory){  return CategoryEstimations.containsKey(sCategory);}  }
class C{  public void removeWorldMapInstance(int instanceId){  if (instanceId == 0) {    instanceId=1;  }  instances.remove(instanceId);}  }
class C{  public LDCard(Context context,AttributeSet attrs){  super(context,attrs);  attributes=getContext().obtainStyledAttributes(attrs,R.styleable.LDCard);}  }
class C{  public void clickSubmenu(MenuOption menuOption){  toolbar.findElement(By.xpath(String.format("//span[text()=%s]",XpathUtils.quote(menuOption.getLabel())))).click();}  }
class C{  public void updateTransform(boolean draw3D){  if (draw3D) {    final SortedSet<Pair<Double,Node>> pairs=new TreeSet<>(new Pair<Double,Node>());    for (Iterator<Node> it=graph.nodeIteratorIncludingHidden(); it.hasNext(); ) {      final Node v=it.next();      Vector3D vector=node2vector.get(v);      if (vector != null) {        Vector3D newVector=new Vector3D(vector);        newVector.transform(transformation3D);        graphView.setLocation(v,newVector.get(0),newVector.get(1));        pairs.add(new Pair<>(newVector.get(2),v));        if (newVector.get(2) >= 0) {          graphView.setColor(v,Color.BLACK);        } else {          graphView.setColor(v,Color.LIGHT_GRAY);        }      } else       pairs.add(new Pair<>(0d,v));    }    List<Node> nodeOrder=new ArrayList<>(pairs.size());    for (    Pair<Double,Node> pair : pairs) {      nodeOrder.add(pair.get2());    }    graph.reorderNodes(nodeOrder);  } else {    for (Iterator<Node> it=graph.nodeIteratorIncludingHidden(); it.hasNext(); ) {      final Node v=it.next();      graphView.setColor(v,Color.BLACK);    }  }  graphView.repaint();}  }
class C{  public static int multiplyExact(final int a,final int b){  if (((b > 0) && (a > Integer.MAX_VALUE / b || a < Integer.MIN_VALUE / b)) || ((b < -1) && (a > Integer.MIN_VALUE / b || a < Integer.MAX_VALUE / b)) || ((b == -1) && (a == Integer.MIN_VALUE))) {    throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW_IN_MULTIPLICATION,a,b);  }  return a * b;}  }
class C{  public static boolean isCurrentUserInRole(String authority){  SecurityContext securityContext=SecurityContextHolder.getContext();  Authentication authentication=securityContext.getAuthentication();  if (authentication != null) {    if (authentication.getPrincipal() instanceof UserDetails) {      UserDetails springSecurityUser=(UserDetails)authentication.getPrincipal();      return springSecurityUser.getAuthorities().contains(new SimpleGrantedAuthority(authority));    }  }  return false;}  }
class C{  public final boolean canSetLong(String field){  Column col=getColumn(field);  return (col == null ? false : col.canSetLong());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_REFUND_MONEY_SYSTEM(int num0){  return new SM_SYSTEM_MESSAGE(1380002,num0);}  }
class C{  public static Router create(String url){  return new Router(Uri.parse(url));}  }
class C{  @Override public void onActivityResult(int requestCode,int resultCode,Intent data){  super.onActivityResult(requestCode,resultCode,data);  ReactiveLogin.onActivityResult(requestCode,resultCode,data);}  }
class C{  public void removeActionFireListener(OnActionFiredListener listener){  if (listener != null)   mActionFiredListeners.remove(listener);}  }
class C{  public void startInitialisation(ZWaveNodeInitStage startStage){  logger.debug("NODE {}: Starting initialisation from {}",node.getNodeId(),startStage);  currentStage=startStage;  queryStageTimeStamp=Calendar.getInstance().getTime();  retryTimer=BACKOFF_TIMER_START;  wakeupCount=0;  controller.addEventListener(this);  advanceNodeStage(null);}  }
class C{  public Builder withCountOnly(boolean countOnly){  this.countOnly=countOnly;  return this;}  }
class C{  @deprecated public String toString(){  return toString(0,this.items.size());}  }
class C{  public boolean isFailure(){  return this.status != null && this.status.equals(ConfigConstants.Status.FAILURE);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BackDashATK_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200795,skillcaster,num0,skillname);}  }
class C{  public void addColumn(String name,String expr){  throw new UnsupportedOperationException();}  }
class C{  public JSearchPanel createSearchPanel(){  return createSearchPanel(m_set instanceof PrefixSearchTupleSet);}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public final boolean equals(Object obj){  if (toString() == null) {    return (obj != null) && (obj.toString() == null);  }  if (obj instanceof Encoding) {    return toString().equals(obj.toString());  }  return false;}  }
class C{  public void addLocal(Matrix4f mat){  m00+=mat.m00;  m01+=mat.m01;  m02+=mat.m02;  m03+=mat.m03;  m10+=mat.m10;  m11+=mat.m11;  m12+=mat.m12;  m13+=mat.m13;  m20+=mat.m20;  m21+=mat.m21;  m22+=mat.m22;  m23+=mat.m23;  m30+=mat.m30;  m31+=mat.m31;  m32+=mat.m32;  m33+=mat.m33;}  }
class C{  private void showNextSuperToast(){  if (superToastPriorityQueue.isEmpty())   return;  final SuperToast superToast=superToastPriorityQueue.peek();  if (!superToast.isShowing()) {    final Message message=obtainMessage(Messages.DISPLAY_SUPERTOAST);    message.obj=superToast;    sendMessage(message);  }}  }
class C{  @PostConstruct private void init(){  jmsProxy.registerConnectionListener(this);  jmsProxy.registerSupervisionListener(this);  heartbeatManager.addHeartbeatListener(this);}  }
class C{  @Override public void validate(String content,ValidationContext context) throws InvalidDatatypeValueException {  StringTokenizer parsedList=new StringTokenizer(content," ");  int numberOfTokens=parsedList.countTokens();  if (numberOfTokens == 0) {    throw new InvalidDatatypeValueException("EmptyList",null);  }  while (parsedList.hasMoreTokens()) {    this.fItemValidator.validate(parsedList.nextToken(),context);  }}  }
class C{  private void onSubEquipmentDown(final Long subEquipmentId,final Timestamp timestamp,final String message){  SubEquipment subEquipmentCopy=subEquipmentCache.getCopy(subEquipmentId);  if (LOGGER.isDebugEnabled()) {    StringBuffer str=new StringBuffer("onSubEquipmentDown(");    str.append(subEquipmentCopy.getName());    str.append(", ");    str.append(timestamp);    str.append(", ");    str.append(message);    LOGGER.debug(str.toString());  }  subEquipmentFacade.suspend(subEquipmentId,timestamp,message);  Long stateTagId=subEquipmentCopy.getStateTagId();  if (stateTagId == null) {    LOGGER.error("Could not find any state tag for subequipment " + subEquipmentCopy.getId() + " - this should never happen.");  } else {    try {      controlTagFacade.updateAndValidate(stateTagId,SupervisionStatus.DOWN.toString(),message,timestamp);    } catch (    CacheElementNotFoundException cacheEx) {      LOGGER.error("Could not locate state tag (Id is " + stateTagId + ") in cache for subequipment "+ subEquipmentCopy.getId());    }  }}  }
class C{  public static double sin(double x){  boolean negative=false;  int quadrant=0;  double xa;  double xb=0.0;  xa=x;  if (x < 0) {    negative=true;    xa=-xa;  }  if (xa == 0.0) {    long bits=Double.doubleToRawLongBits(x);    if (bits < 0) {      return -0.0;    }    return 0.0;  }  if (xa != xa || xa == Double.POSITIVE_INFINITY) {    return Double.NaN;  }  if (xa > 3294198.0) {    double reduceResults[]=new double[3];    reducePayneHanek(xa,reduceResults);    quadrant=((int)reduceResults[0]) & 3;    xa=reduceResults[1];    xb=reduceResults[2];  } else   if (xa > 1.5707963267948966) {    final CodyWaite cw=new CodyWaite(xa);    quadrant=cw.getK() & 3;    xa=cw.getRemA();    xb=cw.getRemB();  }  if (negative) {    quadrant^=2;  }switch (quadrant) {case 0:    return sinQ(xa,xb);case 1:  return cosQ(xa,xb);case 2:return -sinQ(xa,xb);case 3:return -cosQ(xa,xb);default :return Double.NaN;}}  }
class C{  public EventBuilder async(){  this.event.setAsync(true);  return this;}  }
class C{  protected final void pressButton(final String action){  CommandProcessor.getInstance().executeCommand(getProject(),null,"",null);}  }
class C{  public static FileSubjects.PathSubject assertThatCheckout(GitRepository repo,String ref) throws IOException, RepoException {  Path tempWorkTree=Files.createTempDirectory("assertAboutCheckout");  repo.withWorkTree(tempWorkTree).simpleCommand("checkout",ref,"--",".");  return assertThatPath(tempWorkTree);}  }
class C{  public static void main(String[] args){  StdOut.println("Test");  StdOut.println(17);  StdOut.println(true);  StdOut.printf("%.6f\n",1.0 / 7.0);}  }
class C{  public static DockerImage fromImageName(String imageName){  imageName=prepare(imageName);  String[] parts=imageName.split(SECTION_SEPARATOR);switch (parts.length) {case 1:    return fromParts(null,null,parts[0]);case 2:  if (isValidNamespace(parts[0])) {    return fromParts(null,parts[0],parts[1]);  } else {    return fromParts(parts[0],null,parts[1]);  }case 3:return fromParts(parts[0],parts[1],parts[2]);default :throw new IllegalArgumentException("Invalid image format: " + imageName);}}  }
class C{  public void createSymEdgesConnecting(UniqueVertexGraph gGraph,String sStartNode,List lOtherNodes,HashMap hAppearenceHistogram){  double dStartWeight=0;  double dIncreaseWeight=0;  if (lOtherNodes != null)   if (lOtherNodes.size() == 0) {    VertexImpl v=new VertexImpl();    v.setLabel(sStartNode);    try {      gGraph.add(v);    } catch (    Exception e) {    }    return;  }  java.util.Iterator iIter=lOtherNodes.iterator();  Vertex vOldA=gr.demokritos.iit.jinsect.utils.locateVertexInGraph(gGraph,sStartNode);  Vertex vA;  if (vOldA != null)   vA=vOldA; else {    vA=new VertexImpl();    vA.setLabel(sStartNode);    try {      gGraph.add(vA);    } catch (    Exception e) {    }  }  List lOldEdges;  lOldEdges=gGraph.getEdges(vA);  int iCnt=0;  while (iIter.hasNext()) {    VertexImpl vB=new VertexImpl();    vB.setLabel((String)iIter.next());    double dOldWeight=0;    double dNewWeight=0;    dStartWeight=1.0;    dIncreaseWeight=dStartWeight;    if (eclLocator == null)     eclLocator=new EdgeCachedLocator(10);    WeightedEdge weCorrectEdge=(WeightedEdge)eclLocator.locateDirectedEdgeInGraph(gGraph,vA,vB);    if (weCorrectEdge == null)     dNewWeight=dStartWeight; else {      dOldWeight=weCorrectEdge.getWeight();      dNewWeight=dOldWeight + dIncreaseWeight;    }    try {      if (weCorrectEdge == null) {        WeightedEdge e=gGraph.addEdge(vA,vB,dNewWeight);        eclLocator.addedEdge(e);      } else       weCorrectEdge.setWeight(dNewWeight);    } catch (    Exception e) {      e.printStackTrace();    }    weCorrectEdge=(WeightedEdge)eclLocator.locateDirectedEdgeInGraph(gGraph,vB,vA);    if (weCorrectEdge == null)     dNewWeight=dStartWeight; else {      dOldWeight=weCorrectEdge.getWeight();      dNewWeight=dOldWeight + dIncreaseWeight;    }    try {      if (weCorrectEdge == null) {        WeightedEdge e=gGraph.addEdge(vB,vA,dNewWeight);        eclLocator.addedEdge(e);      } else       weCorrectEdge.setWeight(dNewWeight);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  String fieldName(int i){  return fields[i].toName(constant_pool);}  }
class C{  public Object parse(String text) throws DataParseException {  try {    StringTokenizer st=new StringTokenizer(text,"\"[](){}, ");    long[] array=new long[st.countTokens()];    for (int i=0; st.hasMoreTokens(); ++i) {      String tok=st.nextToken();      array[i]=LongParser.parseLong(tok);    }    return array;  } catch (  NumberFormatException e) {    throw new DataParseException(e);  }}  }
class C{  public boolean drag(float x,float y){  if (!checkClicked(x,y)) {    setPressed(false);    return false;  }  return isPressed();}  }
class C{  @Override public void beforeFirst(){  s1.beforeFirst();  isLhsEmpty=!s1.next();  s2.beforeFirst();}  }
class C{  private static BigDecimal parseBigDecimal(String whole,String part,int index) throws IllegalArgumentException {  if (part == null) {    return null;  }  part=part.substring(0,part.length() - 1);  return new BigDecimal(part);}  }
class C{  private static ExternalSystem resetOAuthFields(ExternalSystem input){  input.setAccessKey(null);  return input;}  }
class C{  public static String encodeString(String s){  return new String(encode(s.getBytes()));}  }
class C{  public Map<String,List<QueryResponseJSON>> decrypt(int numThreads) throws InterruptedException, PIRException {  Map<String,List<QueryResponseJSON>> resultMap=new HashMap<>();  QueryInfo queryInfo=response.getQueryInfo();  Paillier paillier=querier.getPaillier();  List<String> selectors=querier.getSelectors();  Map<Integer,String> embedSelectorMap=querier.getEmbedSelectorMap();  List<BigInteger> rElements=decryptElements(response.getResponseElements(),paillier);  logger.debug("rElements.size() = " + rElements.size());  int dataPartitionBitSize=queryInfo.getDataPartitionBitSize();  Map<String,BigInteger> selectorMaskMap=new HashMap<>();  int selectorNum=0;  for (  String selector : selectors) {    resultMap.put(selector,new ArrayList<>());    BigInteger mask=TWO_BI.pow(selectorNum * dataPartitionBitSize).multiply((TWO_BI.pow(dataPartitionBitSize).subtract(BigInteger.ONE)));    logger.debug("selector = " + selector + " mask = "+ mask.toString(2));    selectorMaskMap.put(selector,mask);    ++selectorNum;  }  ExecutorService es=Executors.newCachedThreadPool();  if (selectors.size() < numThreads) {    numThreads=selectors.size();  }  int elementsPerThread=selectors.size() / numThreads;  List<Future<Map<String,List<QueryResponseJSON>>>> futures=new ArrayList<>();  for (int i=0; i < numThreads; ++i) {    int start=i * elementsPerThread;    int stop=start + elementsPerThread - 1;    if (i == (numThreads - 1)) {      stop=selectors.size() - 1;    }    TreeMap<Integer,String> selectorsPartition=new TreeMap<>();    for (int j=start; j <= stop; ++j) {      selectorsPartition.put(j,selectors.get(j));    }    DecryptResponseTask<Map<String,List<QueryResponseJSON>>> runDec=new DecryptResponseTask<>(rElements,selectorsPartition,selectorMaskMap,queryInfo.clone(),embedSelectorMap);    futures.add(es.submit(runDec));  }  try {    for (    Future<Map<String,List<QueryResponseJSON>>> future : futures) {      resultMap.putAll(future.get(1,TimeUnit.DAYS));    }  } catch (  TimeoutException|ExecutionException e) {    throw new PIRException("Exception in decryption threads.",e);  }  es.shutdown();  return resultMap;}  }
class C{  public final boolean isValid(RetryStrategy retryStrategy){  return validate(retryStrategy) == null;}  }
class C{  public Builder columns(int columns){  this.columns=columns;  return this;}  }
class C{  public static double roundSignificant(double value){  if (value >= 10.0 || value <= -10.0) {    return getRounded(value,1);  } else {    return roundToSignificantDigits(value,3);  }}  }
class C{  public void addLanguage(Long languageId){  if (languageId != null) {    addLanguage(languageId.toString());  } else {    Logger.warn(this,"Tried to add languageId Null!");  }}  }
class C{  @Override public void onSaveInstanceState(Bundle outState){  super.onSaveInstanceState(outState);  outState.putString(POKE_MODEL_STATE_KEY,new Gson().toJson(mPokeModel));}  }
class C{  public static void print(short x){  out.print(x);  out.flush();}  }
class C{  public VideoSearchQuery adult(Boolean value){  return unsafeParam("adult",value);}  }
class C{  private LinkedList<Diff> diff_lineMode(String text1,String text2,long deadline){  LinesToCharsResult b=diff_linesToChars(text1,text2);  text1=b.chars1;  text2=b.chars2;  List<String> linearray=b.lineArray;  LinkedList<Diff> diffs=diff_main(text1,text2,false,deadline);  diff_charsToLines(diffs,linearray);  diff_cleanupSemantic(diffs);  diffs.add(new Diff(Operation.EQUAL,""));  int count_delete=0;  int count_insert=0;  String text_delete="";  String text_insert="";  ListIterator<Diff> pointer=diffs.listIterator();  Diff thisDiff=pointer.next();  while (thisDiff != null) {switch (thisDiff.operation) {case INSERT:      count_insert++;    text_insert+=thisDiff.text;  break;case DELETE:count_delete++;text_delete+=thisDiff.text;break;case EQUAL:if (count_delete >= 1 && count_insert >= 1) {pointer.previous();for (int j=0; j < count_delete + count_insert; j++) {pointer.previous();pointer.remove();}for (Diff newDiff : diff_main(text_delete,text_insert,false,deadline)) {pointer.add(newDiff);}}count_insert=0;count_delete=0;text_delete="";text_insert="";break;}thisDiff=pointer.hasNext() ? pointer.next() : null;}diffs.removeLast();return diffs;}  }
class C{  private static final String toXml(Shape shape){  StringBuilder sb=new StringBuilder();  sb.append("<Shape Id=\"").append(shape.getId()).append("\" xsi:type=\"");  String c=XmlGenerator.toXml(shape.getCenter(),"LocalCenter");  if (shape instanceof Circle) {    sb.append("Circle\">").append(c).append("<Radius>").append(((Circle)shape).getRadius()).append("</Radius>");  } else   if (shape instanceof Rectangle) {    Rectangle r=(Rectangle)shape;    sb.append("Rectangle\">").append(c).append("<Width>").append(r.getWidth()).append("</Width>").append("<Height>").append(r.getHeight()).append("</Height>").append("<LocalRotation>").append(Math.toDegrees(r.getRotation())).append("</LocalRotation>");  } else   if (shape instanceof Triangle) {    Triangle t=(Triangle)shape;    Vector2[] vs=t.getVertices();    sb.append("Triangle\">").append(c);    for (    Vector2 v : vs) {      sb.append(XmlGenerator.toXml(v,"Vertex"));    }  } else   if (shape instanceof Polygon) {    Polygon p=(Polygon)shape;    Vector2[] vs=p.getVertices();    sb.append("Polygon\">").append(c);    for (    Vector2 v : vs) {      sb.append(XmlGenerator.toXml(v,"Vertex"));    }  } else   if (shape instanceof Segment) {    Segment s=(Segment)shape;    Vector2[] vs=s.getVertices();    sb.append("Segment\">").append(c);    for (    Vector2 v : vs) {      sb.append(XmlGenerator.toXml(v,"Vertex"));    }  } else {    throw new UnsupportedOperationException(MessageFormat.format(Messages.getString("exception.persist.unknownClass"),shape.getClass().getName()));  }  sb.append("</Shape>");  return sb.toString();}  }
class C{  public static byte[] decode(String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  private void select(Rectangle rect,Rectangle selectionRect,int mouseClicks){  if (selectionRect == null || chartSelection == null || mouseClicks != 1)   return;  selectionGraphics.setSelectionRectangle(selectionRect);  selectionGraphics.getSelectedItems().clear();  doPaint(selectionGraphics,rect);  final Collection<Edge> hitEdges=selectionGraphics.getSelectedItems();  if (hitEdges.size() > 0) {    final Set<Node> seen=new HashSet<>();    final Stack<Node> stack=new Stack<>();    for (    Edge e : hitEdges) {      stack.add(e.getTarget());    }    while (stack.size() > 0) {      final Node v=stack.pop();      if (v.getOutDegree() == 0) {        if (type == TYPE.SERIES)         chartSelection.setSelectedSeries(treeView.getLabel(v),true); else         if (type == TYPE.CLASSES)         chartSelection.setSelectedClass(treeView.getLabel(v),true); else         if (type == TYPE.ATTRIBUTES)         chartSelection.setSelectedAttribute(treeView.getLabel(v),true);      } else {        for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {          if (!seen.contains(e.getTarget())) {            stack.push(e.getTarget());            seen.add(e.getTarget());          }        }      }    }  }}  }
class C{  public void addSLDEditorFileUpdateListener(SLDEditorDataUpdateInterface listener){  sldEditorFileUpdateListenerList.add(listener);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  @Override public boolean accept(File file){  String name=file.getName();  for (  String name2 : this.names) {    if (caseSensitivity.checkEquals(name,name2)) {      return true;    }  }  return false;}  }
class C{  @NotNull public ImageDescription describeImage(@NotNull File image){  try {    return computerVisionBuilder.describeImage(1,new FileInputStream(image)).withResult();  } catch (  FileNotFoundException e) {    throw new ImageNotFoundException(image);  }}  }
class C{  private static float crossProductZ(ResultPoint pointA,ResultPoint pointB,ResultPoint pointC){  float bX=pointB.x;  float bY=pointB.y;  return ((pointC.x - bX) * (pointA.y - bY)) - ((pointC.y - bY) * (pointA.x - bX));}  }
class C{  private boolean isStateName(WordRelation wordRelation,Item tokenItem,String tokenVal){  String[] state=(String[])usStatesHash.get(tokenVal);  if (state != null) {    boolean expandState=false;    if (state[1].equals("ambiguous")) {      String previous=(String)tokenItem.findFeature("p.name");      String next=(String)tokenItem.findFeature("n.name");      int nextLength=next.length();      FeatureSet featureSet=tokenItem.getFeatures();      boolean previousIsCity=(isUppercaseLetter(previous.charAt(0)) && previous.length() > 2 && matches(alphabetPattern,previous) && tokenItem.findFeature("p.punc").equals(","));      boolean nextIsGood=(isLowercaseLetter(next.charAt(0)) || tokenItem.getNext() == null || featureSet.getString("punc").equals(".") || ((nextLength == 5 || nextLength == 10) && matches(digitsPattern,next)));      expandState=previousIsCity && nextIsGood;    } else {      expandState=true;    }    if (expandState) {      for (int j=2; j < state.length; j++) {        if (state[j] != null) {          wordRelation.addWord(tokenItem,state[j]);        }      }      return true;    }  }  return false;}  }
class C{  protected void shareBySystem(){  ShareUtil.startShare(this,ShareConstant.SHARE_CHANNEL_SYSTEM,getShareData(ShareConstant.SHARE_CHANNEL_SYSTEM),ShareConstant.REQUEST_CODE);}  }
class C{  UnitType(DataInputStream is) throws IOException {  this.name=Utilities.getString(is);  this.start=is.readInt();  this.count=is.readInt();}  }
class C{  public boolean is(String k,String value){  String v=get(k);  return v == null && value == null || v != null && v.equals(value);}  }
class C{  private MethodNode doProxy(ClassNode cn,MethodNode origin){  MethodNode newNode=copyMethod(origin);  hideAnnotations(origin);  LabelNode l0=new LabelNode();  LabelNode l1=new LabelNode();  LabelNode l2=new LabelNode();  String returnType=origin.desc.substring(origin.desc.indexOf(')') + 1);  int localIndex=copyParameters(origin,newNode,l0,l2);  newNode.tryCatchBlocks.add(new TryCatchBlockNode(l0,l1,l2,"java/lang/Exception"));  newNode.localVariables.add(new LocalVariableNode("elapsedTime","J",null,l0,l1,localIndex));  newNode.instructions.add(l0);  newNode.instructions.add(new MethodInsnNode(Opcodes.INVOKESTATIC,"java/lang/System","currentTimeMillis","()J"));  newNode.instructions.add(new VarInsnNode(Opcodes.LSTORE,localIndex));  int paramCount=getParamCount(origin.desc,origin.access);  for (int i=0; i < paramCount; i++) {    LocalVariableNode node=(LocalVariableNode)newNode.localVariables.get(i);switch (node.desc) {case "J":      newNode.instructions.add(new VarInsnNode(Opcodes.LLOAD,node.index));    break;case "D":  newNode.instructions.add(new VarInsnNode(Opcodes.DLOAD,node.index));break;case "F":newNode.instructions.add(new VarInsnNode(Opcodes.FLOAD,node.index));break;case "I":newNode.instructions.add(new VarInsnNode(Opcodes.ILOAD,node.index));break;case "S":newNode.instructions.add(new VarInsnNode(Opcodes.ILOAD,node.index));break;case "Z":newNode.instructions.add(new VarInsnNode(Opcodes.ILOAD,node.index));break;case "B":newNode.instructions.add(new VarInsnNode(Opcodes.ILOAD,node.index));break;case "C":newNode.instructions.add(new VarInsnNode(Opcodes.ILOAD,node.index));break;default :newNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,node.index));break;}}newNode.instructions.add(new MethodInsnNode(Opcodes.INVOKEVIRTUAL,cn.name,origin.name,origin.desc));newNode.instructions.add(new MethodInsnNode(Opcodes.INVOKESTATIC,"java/lang/System","currentTimeMillis","()J"));newNode.instructions.add(new VarInsnNode(Opcodes.LLOAD,localIndex));newNode.instructions.add(new InsnNode(Opcodes.LSUB));newNode.instructions.add(new VarInsnNode(Opcodes.LSTORE,localIndex));newNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,localIndex - 1));newNode.instructions.add(new MethodInsnNode(Opcodes.INVOKEINTERFACE,"javax/servlet/http/HttpServletRequest","getRequestURI","()Ljava/lang/String;"));newNode.instructions.add(new VarInsnNode(Opcodes.LLOAD,localIndex));newNode.instructions.add(new MethodInsnNode(Opcodes.INVOKESTATIC,"io/awacs/plugin/springmvc/SpringmvcPlugin","incrAccess","(Ljava/lang/String;J)V"));newNode.instructions.add(l1);switch (returnType) {case "J":newNode.instructions.add(new InsnNode(Opcodes.LRETURN));break;case "D":newNode.instructions.add(new InsnNode(Opcodes.DRETURN));break;case "F":newNode.instructions.add(new InsnNode(Opcodes.FRETURN));break;case "I":newNode.instructions.add(new InsnNode(Opcodes.IRETURN));break;case "S":newNode.instructions.add(new InsnNode(Opcodes.IRETURN));break;case "C":newNode.instructions.add(new InsnNode(Opcodes.IRETURN));break;case "B":newNode.instructions.add(new InsnNode(Opcodes.IRETURN));break;case "Z":newNode.instructions.add(new InsnNode(Opcodes.IRETURN));break;default :newNode.instructions.add(new InsnNode(Opcodes.ARETURN));break;}newNode.instructions.add(l2);newNode.instructions.add(new FrameNode(Opcodes.F_SAME1,0,null,1,new Object[]{"java/lang/Exception"}));newNode.instructions.add(new VarInsnNode(Opcodes.ASTORE,localIndex));newNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,localIndex - 1));newNode.instructions.add(new MethodInsnNode(Opcodes.INVOKEINTERFACE,"javax/servlet/http/HttpServletRequest","getRequestURI","()Ljava/lang/String;"));newNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,localIndex));newNode.instructions.add(new MethodInsnNode(Opcodes.INVOKESTATIC,"io/awacs/plugin/springmvc/SpringmvcPlugin","incrFailure","(Ljava/lang/String;Ljava/lang/Throwable;)V"));newNode.instructions.add(new VarInsnNode(Opcodes.ALOAD,localIndex));newNode.instructions.add(new InsnNode(Opcodes.ATHROW));newNode.maxLocals=origin.maxLocals + 3;newNode.maxStack=Math.max(localIndex + 2,6);return newNode;}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  String newValueObj=(String)undoRedoObject.getNewValue();  attributeComboBox.setSelectedItem(newValueObj);}  }
class C{  public TextEditor outdent(int spaces){  return deleteAll("^(\\t|[ ]{1," + spaces + "})");}  }
class C{  public void finishTemplatesSearch(NotifyContext notifyContext){  decreaseCounter(notifyContext);  _backupLog.clearTriggered(notifyContext.getOperationId());}  }
class C{  private void changeNickname(Player activePlayer,String charName,String newNickname){  Legion legion=activePlayer.getLegion();  LegionMember legionMember;  Player targetPlayer;  if ((targetPlayer=World.getInstance().findPlayer(charName)) != null) {    legionMember=targetPlayer.getLegionMember();    if (targetPlayer.getLegion() != legion) {      return;    }  } else {    LegionMemberEx LM=getLegionMemberEx(charName);    if (LM == null || LM.getLegion() != legion) {      return;    }    legionMember=getLegionMember(LM.getObjectId());  }  if (legionRestrictions.canChangeNickname(legion,legionMember.getObjectId(),newNickname)) {    legionMember.setNickname(newNickname);    PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_UPDATE_NICKNAME(legionMember.getObjectId(),newNickname));    if (targetPlayer == null) {      DAOManager.getDAO(LegionMemberDAO.class).storeLegionMember(legionMember.getObjectId(),legionMember);    }  }}  }
class C{  public static String addFileExtensionSeparator(String fileExtension){  return "." + fileExtension;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stumble_END_ME_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200452,skilltarget);}  }
class C{  private static IntervalsSet buildIntervalSet(final Vector3D start,final Vector3D end,final double tolerance) throws MathIllegalArgumentException {  final Line line=new Line(start,end,tolerance);  return new IntervalsSet(line.toSubSpace((Point<Euclidean3D>)start).getX(),line.toSubSpace((Point<Euclidean3D>)end).getX(),tolerance);}  }
class C{  public boolean isApplicable(){  TaxonomicProfileDialog viewer=(TaxonomicProfileDialog)getParent();  return viewer != null;}  }
class C{  private synchronized void addChildNode(DefaultMutableTreeNode parent,DefaultMutableTreeNode child){  int childCount=parent.getChildCount();  if (childCount == 0) {    addChildNode(parent,child,0);    return;  }  if (child instanceof ComparableDefaultMutableTreeNode) {    ComparableDefaultMutableTreeNode comparableChild=(ComparableDefaultMutableTreeNode)child;    for (int i=childCount - 1; i >= 0; i--) {      DefaultMutableTreeNode brother=(DefaultMutableTreeNode)parent.getChildAt(i);      if (comparableChild.compareTo(brother) >= 0) {        addChildNode(parent,child,i + 1);        return;      }    }    addChildNode(parent,child,0);    return;  }  addChildNode(parent,child,childCount);}  }
class C{  protected void handleStart(File startDirectory,Collection<T> results) throws IOException {}  }
class C{  protected OrdersGetAmountQuery votes(List<String> value){  return unsafeParam("votes",value);}  }
class C{  public DocumentNGramGraph(){  InitGraphs();}  }
class C{  public static boolean findQuery(String queryName,FileIterator it,boolean isFastA){  try {    if (isFastA) {      while (it.hasNext()) {        byte[] line=it.next();        if (line[0] == '>' && matchName(queryName,line,it.getLineLength()))         return true;      }    } else {      if (it.getLinePosition() == 0) {        byte[] line=it.next();        if (line[0] != '@')         throw new IOException("Expected FastQ header line (starting with '@'), got: " + Basic.toString(line,it.getLineLength()));        if (matchName(queryName,line,it.getLineLength()))         return true;        it.next();        it.next();        it.next();      }      while (it.hasNext()) {        byte[] line=it.next();        if (line[0] != '@')         throw new IOException("Expected FastQ header line (starting with '@'), got: " + Basic.toString(line,it.getLineLength()));        if (matchName(queryName,line,it.getLineLength()))         return true;        it.next();        it.next();        it.next();      }    }  } catch (  Exception ex) {    Basic.caught(ex);  }  return false;}  }
class C{  private void pickCenteredConnections(ScoutWidget[] list,boolean checkResizeable){  Direction[][] side={{Direction.NORTH,Direction.SOUTH},{Direction.WEST,Direction.EAST}};  int[] dualIndex=new int[2];  for (int i=1; i < len; i++) {    float[][][] widgetBinaryProbability=mBinaryProbability[i];    float[][][] widgetBinaryBias=mBinaryBias[i];    for (int horizontal=0; horizontal < widgetBinaryProbability.length; horizontal++) {      float[][] pmatrix=widgetBinaryProbability[horizontal];      float[][] bias=widgetBinaryBias[horizontal];      if (pmatrix == null) {        continue;      }      boolean worked=false;      while (!worked) {        Utils.max(pmatrix,dualIndex);        int max1=dualIndex[0];        int max2=dualIndex[1];        int wNo1=max1 / 2;        int wNo2=max2 / 2;        Direction widget1Side=side[horizontal][max1 & 0x1];        Direction widget2Side=side[horizontal][max2 & 0x1];        float centerProbability=pmatrix[max1][max2];        worked=true;        if (centerProbability > .9) {          if (checkResizeable && !list[i].isCandidateResizable(horizontal)) {            continue;          }          worked=list[i].setCentered(horizontal * 2,list[wNo1],list[wNo2],widget1Side,widget2Side,bias[max1][max2]);          if (worked) {            mProbability[i][horizontal * 2]=null;            mProbability[i][horizontal * 2 + 1]=null;          } else {            pmatrix[max1][max2]=0;          }        }      }    }  }}  }
class C{  @Override public Node cloneNode(boolean deep){  HTMLFormElementImpl clonedNode=(HTMLFormElementImpl)super.cloneNode(deep);  clonedNode._elements=null;  return clonedNode;}  }
class C{  public Fraction(double value) throws FractionConversionException {  this(value,1.0e-5,100);}  }
class C{  public void actionPerformed(ActionEvent ev){  executeImmediately("close what=others;");}  }
class C{  private void scrollToChild(View child){  child.getDrawingRect(mTempRect);  offsetDescendantRectToMyCoords(child,mTempRect);  int scrollDelta=computeScrollDeltaToGetChildRectOnScreen(mTempRect);  if (scrollDelta != 0) {    scrollBy(scrollDelta,0);  }}  }
class C{  public RTText convertTo(RTFormat destFormat,RTMediaFactory<RTImage,RTAudio,RTVideo> mediaFactory){  if (destFormat == mRTFormat) {    return this;  }  throw new UnsupportedOperationException("Can't convert from " + mRTFormat.getClass().getSimpleName() + " to "+ destFormat.getClass().getSimpleName());}  }
class C{  @Override protected void onStart(){  super.onStart();  LOG.d(TAG,"Started the activity.");  if (this.appView == null) {    return;  }  this.appView.handleStart();}  }
class C{  public boolean reset(BookmarkId id,String title,String url,boolean isEditable,boolean isManaged){  jumpDrawablesToCurrentState();  if (mId != null && mId.equals(id) && TextUtils.equals(title,mTitle) && TextUtils.equals(url,mUrl) && isEditable == mIsEditable && isManaged == mIsManaged) {    return false;  }  mTitle=title;  mUrl=url;  mIsFolder=TextUtils.isEmpty(mUrl);  mIsEditable=isEditable;  mIsManaged=isManaged;  mId=id;  setText(mTitle);  setFavicon(null);  if (mIsFolder) {    setContentDescription(getResources().getString(R.string.accessibility_bookmark_folder,mTitle));  }  return true;}  }
class C{  private void splitPeerList(){  List<Peer> newIncoming=new ArrayList<>();  List<Peer> newOutgoing=new ArrayList<>();  for (  Peer peer : peerList) {    if (peer.hasReceivedData()) {      newIncoming.add(peer);    } else {      newOutgoing.add(peer);    }  }  boolean changed=false;  if (!newIncoming.equals(incomingList)) {    changed=true;    incomingList.clear();    incomingList.addAll(newIncoming);  }  if (!newOutgoing.equals(outgoingList)) {    changed=true;    outgoingList.clear();    outgoingList.addAll(newOutgoing);  }  if (changed)   updatePeerStats();}  }
class C{  public synchronized void checkOwnership() throws LockingException {  if (null == lockAcquireFuture || !lockAcquireFuture.isDefined()) {    throw new LockingException(lockPath,"check ownership before acquiring");  }  if (!haveLock()) {    throw new LockingException(lockPath,"Lost lock ownership");  }}  }
class C{  SubTable(Table original){  super(original.name(),original.emptyCopy().columns().toArray(new Column[original.columnCount()]));}  }
class C{  public ResponseContext(LinkedHashMap<Dimension,LinkedHashSet<DimensionField>> dimensionToDimensionFieldMap){  this.dimensionToDimensionFieldMap=dimensionToDimensionFieldMap;}  }
class C{  private static boolean isVerticalScreenConfig(int availableWidth,int availableHeight,@NotNull Dimension preferredSize){  boolean stackVertically=preferredSize.width > preferredSize.height;  if (availableWidth > 10 && availableHeight > 3 * availableWidth / 2) {    stackVertically=true;  }  return stackVertically;}  }
class C{  public boolean verbose(){  return soot.PhaseOptions.getBoolean(options,"verbose");}  }
class C{  public <RES>Partial<RES,ARG> as(){  return new Partial<>();}  }
class C{  private static boolean isVideoResult(JsonObject result){  if (result.get("tag") != null && result.get("tag").isJsonObject()) {    JsonElement timestamps=result.get("tag").getAsJsonObject().get("timestamps");    if (timestamps != null && timestamps.isJsonArray()) {      return true;    }  }  if (result.get("embed") != null && result.get("embed").isJsonArray()) {    JsonArray embedArray=result.get("embed").getAsJsonArray();    if (embedArray.size() > 0 && embedArray.get(0).isJsonArray()) {      return true;    }  }  return false;}  }
class C{  public ValidationException(Object concerned,String strMessage,String strCompatibilityMessage){  this(concerned,strMessage,strCompatibilityMessage,false);}  }
class C{  public void populateBooleanField(FieldIdEnum fieldId,Boolean value){  if (fieldConfigManager == null) {    return;  }  FieldConfigBase fieldConfig=fieldConfigManager.get(fieldId);  if (value != null) {    ((FieldConfigValuePopulateInterface)fieldConfig).populateField(value);  } else {    fieldConfig.revertToDefaultValue();  }}  }
class C{  public static void forceMkdir(File directory) throws IOException {  if (directory.exists()) {    if (!directory.isDirectory()) {      String message="File " + directory + " exists and is "+ "not a directory. Unable to create directory.";      throw new IOException(message);    }  } else {    if (!directory.mkdirs()) {      if (!directory.isDirectory()) {        String message="Unable to create directory " + directory;        throw new IOException(message);      }    }  }}  }
class C{  @Override public ISBNParsedResult parse(Result result){  BarcodeFormat format=result.getBarcodeFormat();  if (format != BarcodeFormat.EAN_13) {    return null;  }  String rawText=getMassagedText(result);  int length=rawText.length();  if (length != 13) {    return null;  }  if (!rawText.startsWith("978") && !rawText.startsWith("979")) {    return null;  }  return new ISBNParsedResult(rawText);}  }
class C{  public NumberIsTooSmallException(Number wrong,Number min,boolean boundIsAllowed){  this(boundIsAllowed ? LocalizedFormats.NUMBER_TOO_SMALL : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED,wrong,min,boundIsAllowed);}  }
class C{  public static String byteCountToDisplaySize(long size){  return byteCountToDisplaySize(BigInteger.valueOf(size));}  }
class C{  public static synchronized boolean lock(String name,long timeout){  name="lock." + name;  heartbeat.schedule(10);  if (locked.containsKey(name)) {    return true;  }  if (timeout <= 0) {    return false;  }  try {    long now=System.currentTimeMillis();    String node=Model.node();    Global f=Helper.load(name,Global.class);    if (f == null) {      String linkid=UID.random();      Helper.insert(V.create(X.ID,name).set("s",node).set("linkid",linkid),Global.class);      f=Helper.load(name,Global.class);      if (f == null) {        log.error("occur error when create unique id, name=" + name);        return false;      } else       if (!X.isSame(f.getString("linkid"),linkid)) {synchronized (name) {          name.wait(1000);        }        return lock(name,timeout - System.currentTimeMillis() + now);      }      locked.put(name,Thread.currentThread());      return true;    } else {      String s=f.getString("s");      if (X.isEmpty(s) || System.currentTimeMillis() - f.getUpdated() > 10000) {        if (Helper.update(W.create(X.ID,name).and("s",s),V.create("s",node),Global.class) > 0) {          locked.put(name,Thread.currentThread());          return true;        } else {synchronized (name) {            name.wait(1000);          }          return lock(name,timeout - System.currentTimeMillis() + now);        }      }    }  } catch (  Exception e) {    log.error(e.getMessage(),e);  }  return false;}  }
class C{  public <RES>Partial<RES,ARG> as(AnyType<RES> dummy){  return new Partial<>();}  }
class C{  protected boolean isEnabledForAddedResources(){  return true;}  }
class C{  public static void unZipFile(String zipFile,String outputFolder){  byte[] buffer=new byte[1024];  try {    File folder=new File(outputFolder);    if (!folder.exists()) {      folder.mkdir();    }    ZipInputStream zipInputStream=new ZipInputStream(new FileInputStream(zipFile));    ZipEntry zipEntry=zipInputStream.getNextEntry();    while (zipEntry != null) {      String fileName=zipEntry.getName();      File newFile=new File(FileUtility.joinPath(outputFolder,fileName));      System.out.println("file unzip : " + newFile.getAbsoluteFile());      new File(newFile.getParent()).mkdirs();      FileOutputStream fileOutputStream=new FileOutputStream(newFile);      int length;      while ((length=zipInputStream.read(buffer)) > 0) {        fileOutputStream.write(buffer,0,length);      }      fileOutputStream.close();      zipEntry=zipInputStream.getNextEntry();    }    zipInputStream.closeEntry();    zipInputStream.close();  } catch (  IOException ex) {    LOGGER.log(Level.WARNING,"Unable to unzip file",ex);  }}  }
class C{  public static void o(int ia[]){  o(ia,Parameters.OutputFieldWidth);}  }
class C{  public boolean isSmoking(){  return isSmoking;}  }
class C{  public static <T>IStoredList<T> createUniDirectionalConcurrentList(boolean segmented){  return new ConcurrentSegmentedStoredList<T>(segmented,false,true,0);}  }
class C{  public static Map<String,Object> updatePerson(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  String partyId=getPartyId(context);  if (UtilValidate.isEmpty(partyId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(ServiceUtil.resource,"serviceUtil.party_id_missing",locale));  }  GenericValue person=null;  GenericValue party=null;  try {    person=EntityQuery.use(delegator).from("Person").where("partyId",partyId).queryOne();    party=EntityQuery.use(delegator).from("Party").where("partyId",partyId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"person.update.read_failure",new Object[]{e.getMessage()},locale));  }  if (person == null || party == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"person.update.not_found",locale));  }  String oldStatusId=party.getString("statusId");  if (party.get("statusId") == null) {    party.set("statusId","PARTY_ENABLED");  }  person.setNonPKFields(context);  party.setNonPKFields(context);  party.set("statusId",oldStatusId);  try {    person.store();    party.store();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"person.update.write_failure",new Object[]{e.getMessage()},locale));  }  if (UtilValidate.isNotEmpty(context.get("statusId")) && !context.get("statusId").equals(oldStatusId)) {    try {      dispatcher.runSync("setPartyStatus",UtilMisc.toMap("partyId",partyId,"statusId",context.get("statusId"),"userLogin",context.get("userLogin")));    } catch (    GenericServiceException e) {      Debug.logWarning(e.getMessage(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"person.update.write_failure",new Object[]{e.getMessage()},locale));    }  }  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resourceError,"person.update.success",locale));  return result;}  }
class C{  static boolean isSystemWindows(){  return SYSTEM_SEPARATOR == WINDOWS_SEPARATOR;}  }
class C{  private void assignAnglesToEdges(SplitSystem splits,int[] cycle,PhyloGraph graph,Set forbiddenSplits) throws NotOwnerException {  double[] TaxaAngles=new double[ntax + 1];  for (int t=1; t < ntax + 1; t++) {    TaxaAngles[t]=(Math.PI * 2 * t / (double)ntax);  }  double[] split2angle=new double[splits.size() + 1];  assignAnglesToSplits(TaxaAngles,split2angle,splits,cycle);  Iterator it=graph.edgeIterator();  while (it.hasNext()) {    Edge e=(Edge)it.next();    if (!forbiddenSplits.contains(new Integer(graph.getSplit(e)))) {      try {        graph.setAngle(e,split2angle[graph.getSplit(e)]);      } catch (      Exception ex) {      }    }  }}  }
class C{  public Builder maxHeight(Number maxHeight){  this.maxHeight=maxHeight;  return this;}  }
class C{  public IdsQuery(Class<T> type,Object[] ids){  this(type.getName(),ids,null,null,QueryResultType.DEFAULT);}  }
class C{  public void initialize(Configuration conf,InputSplit split,ImageTransform imageTransform) throws IOException, InterruptedException {  this.imageLoader=null;  this.imageTransform=imageTransform;  initialize(conf,split);}  }
class C{  public static void write(char[] data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public CatchEntry(Label start,Label end,Label handler,CP cat){  start_pc=start;  end_pc=end;  handler_pc=handler;  catch_cpe=cat;}  }
class C{  PwsResult(String requestUrl,String siteUrl,String iconUrl,String title,String description){  this.requestUrl=requestUrl;  this.siteUrl=siteUrl;  this.iconUrl=iconUrl;  this.title=title;  this.description=description;}  }
class C{  static int readInt(final byte[] b,final int index){  return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16) | ((b[index + 2] & 0xFF) << 8)| (b[index + 3] & 0xFF);}  }
class C{  private void refresh(){  try {    final CompletableFuture<? extends Collection<ResolverTuple>> fut=underlying.getTuples();synchronized (this) {      currentFut=fut.whenCompleteAsync(null,SCHEDULER);      if (closed)       fut.cancel(false);    }  } catch (  Exception ex) {synchronized (this) {      exception=ex;    }    reschedule(FAILURE_RESCHEDULE_DELAY);  }}  }
class C{  private int readAndCompareBytes0Terminated(byte[] key,int keyLength,long pos,ByteFileGetterMappedMemory byteBuffer) throws IOException {  int i=0;  boolean equal=true;  while (true) {    final byte b=(byte)byteBuffer.get(pos++);    if (b == 0)     break;    if (i < keyLength) {      if (equal && b != key[i]) {        equal=false;      }    }    i++;  }  return (equal && i == keyLength) ? i : -i;}  }
class C{  public MarketAddQuery deleted(Boolean value){  return unsafeParam("deleted",value);}  }
class C{  @Override public void onClick(View view){switch (view.getId()) {case R.id.container_photo_details_sizeContainer:    photoDetailsPresenter.showExifDescription(getContext(),getContext().getString(R.string.feedback_size),sizeText.getText().toString());  break;case R.id.container_photo_details_colorContainer:photoDetailsPresenter.showExifDescription(getContext(),getContext().getString(R.string.feedback_color),colorText.getText().toString());break;case R.id.container_photo_details_locationContainer:photoDetailsPresenter.showExifDescription(getContext(),getContext().getString(R.string.feedback_location),locationText.getText().toString());break;case R.id.container_photo_details_modelContainer:photoDetailsPresenter.showExifDescription(getContext(),getContext().getString(R.string.feedback_model),modelText.getText().toString());break;case R.id.container_photo_details_exposureContainer:photoDetailsPresenter.showExifDescription(getContext(),getContext().getString(R.string.feedback_exposure),exposureText.getText().toString());break;case R.id.container_photo_details_apertureContainer:photoDetailsPresenter.showExifDescription(getContext(),getContext().getString(R.string.feedback_aperture),apertureText.getText().toString());break;case R.id.container_photo_details_focalContainer:photoDetailsPresenter.showExifDescription(getContext(),getContext().getString(R.string.feedback_focal),focalText.getText().toString());break;case R.id.container_photo_details_isoContainer:photoDetailsPresenter.showExifDescription(getContext(),getContext().getString(R.string.feedback_iso),isoText.getText().toString());break;}}  }
class C{  public RegressionResults regress(int numberOfRegressors) throws MathIllegalArgumentException {  if (this.nobs <= numberOfRegressors) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS,this.nobs,numberOfRegressors);  }  if (numberOfRegressors > this.nvars) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.TOO_MANY_REGRESSORS,numberOfRegressors,this.nvars);  }  tolset();  singcheck();  double[] beta=this.regcf(numberOfRegressors);  ss();  double[] cov=this.cov(numberOfRegressors);  int rnk=0;  for (int i=0; i < this.lindep.length; i++) {    if (!this.lindep[i]) {      ++rnk;    }  }  boolean needsReorder=false;  for (int i=0; i < numberOfRegressors; i++) {    if (this.vorder[i] != i) {      needsReorder=true;      break;    }  }  if (!needsReorder) {    return new RegressionResults(beta,new double[][]{cov},true,this.nobs,rnk,this.sumy,this.sumsqy,this.sserr,this.hasIntercept,false);  } else {    double[] betaNew=new double[beta.length];    double[] covNew=new double[cov.length];    int[] newIndices=new int[beta.length];    for (int i=0; i < nvars; i++) {      for (int j=0; j < numberOfRegressors; j++) {        if (this.vorder[j] == i) {          betaNew[i]=beta[j];          newIndices[i]=j;        }      }    }    int idx1=0;    int idx2;    int _i;    int _j;    for (int i=0; i < beta.length; i++) {      _i=newIndices[i];      for (int j=0; j <= i; j++, idx1++) {        _j=newIndices[j];        if (_i > _j) {          idx2=_i * (_i + 1) / 2 + _j;        } else {          idx2=_j * (_j + 1) / 2 + _i;        }        covNew[idx1]=cov[idx2];      }    }    return new RegressionResults(betaNew,new double[][]{covNew},true,this.nobs,rnk,this.sumy,this.sumsqy,this.sserr,this.hasIntercept,false);  }}  }
class C{  @Override public int read(){  if (idx >= charSequence.length()) {    return -1;  } else {    return charSequence.charAt(idx++);  }}  }
class C{  public void clearDocumentGraph(){  Graph=new DistributionGraph();}  }
class C{  private boolean transactionsIsEmpty(){  return loadingJobs.get() + enqueuedJobs.get() == 0;}  }
class C{  public WallEditQuery lat(Float value){  return unsafeParam("lat",value);}  }
class C{  @Override protected IJSpace doCreateSpace() throws DataAccessException {  return factory.create(this,url);}  }
class C{  public Bundler putByteArray(String key,byte[] value){  bundle.putByteArray(key,value);  return this;}  }
class C{  private final void reapRecentUpdates(){  if (!_cacheManager.useRecentUpdatesForPinning())   return;  int reapCount=0;  Context context=null;  try {    long currentTime=SystemTime.timeMillis();    long expirationTime=currentTime - _expirationTimeRecentUpdates;    long checkTime=currentTime - -LM_EXPIRATION_TIME_RECENT_UPDATES_CHECK_DEFAULT;    if (_force || _lastReapedRecentUpdates < checkTime)     _lastReapedRecentUpdates=checkTime; else     return;    context=_cacheManager.getCacheContext();    for (Iterator<RecentUpdatesRepository.RecentUpdateInfo> itr=_cacheManager.getRecentUpdatesIterator(); itr.hasNext(); ) {      RecentUpdatesRepository.RecentUpdateInfo rdinfo=itr.next();      long etime=rdinfo.getTimeBase();      if (etime < expirationTime || (etime == Long.MAX_VALUE && _cacheManager.requiresEvictionReplicationProtection())) {        ILockObject entryLock=null;        try {          entryLock=_cacheManager.getLockManager().getLockObject(rdinfo.getUid());synchronized (entryLock) {            RecentUpdatesRepository.RecentUpdateInfo curInfo=_cacheManager.getRecentUpdateInfo(rdinfo.getUid());            if (curInfo != rdinfo)             continue;            IEntryHolder entry=_cacheManager.getEntryByUidFromPureCache(rdinfo.getUid());            if (entry == null)             throw new RuntimeException("RecentUpdates reaper: entry not in memory " + rdinfo.getUid());            if (curInfo.getTimeBase() == Long.MAX_VALUE) {              XtnEntry xtnEntry=rdinfo.getXtn() != null ? _engine.getTransaction(rdinfo.getXtn()) : null;              if (xtnEntry != null && xtnEntry.getStatus() != XtnStatus.COMMITED && xtnEntry.getStatus() != XtnStatus.ROLLED)               continue;              if (_cacheManager.getEvictionReplicationsMarkersRepository().isEntryEvictable(rdinfo.getUid(),false)) {                _cacheManager.insertToRecentUpdates(entry,SystemTime.timeMillis(),rdinfo.getXtn());              }              continue;            }            itr.remove();            reapCount++;            _cacheManager.unpinIfNeeded(context,entry,null,null);          }        }  finally {          if (entryLock != null)           _cacheManager.getLockManager().freeLockObject(entryLock);        }      }    }  } catch (  Exception ex) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,this.getName() + " - caught exception while reaping recent updated entries content.",ex);    }  } finally {    if (context != null)     context=_cacheManager.freeCacheContext(context);  }  if (reapCount > 0 && _logger.isLoggable(Level.FINE)) {    _logger.fine(this.getName() + " - Reaped expired content of recently updated entries. [Reaped: " + reapCount+ ", Remaining:"+ _cacheManager.getNumOfRecentUpdates()+ "]");  }}  }
class C{  public static final void sendStorageUpdatePacket(Player player,StorageType storageType,Item item,ItemAddType addType){switch (storageType) {case CUBE:    PacketSendUtility.sendPacket(player,new SM_INVENTORY_ADD_ITEM(Collections.singletonList(item),player,addType));  break;case LEGION_WAREHOUSE:if (item.getItemTemplate().isKinah()) {  PacketSendUtility.sendPacket(player,new SM_LEGION_EDIT(0x04,player.getLegion()));  break;}default :PacketSendUtility.sendPacket(player,new SM_WAREHOUSE_ADD_ITEM(item,storageType.getId(),player,addType));}PacketSendUtility.sendPacket(player,SM_CUBE_UPDATE.cubeSize(storageType,player));}  }
class C{  protected static int binarySearch(final int values[],int start,int end,int target){  if (DEBUG_IDS) {    System.out.println("binarySearch(), target: " + target);  }  while (start <= end) {    int middle=(start + end) >>> 1;    int value=values[middle];    if (DEBUG_IDS) {      System.out.print("  value: " + value + ", target: "+ target+ " // ");      print(values,start,end,middle,target);    }    if (value == target) {      while (middle > 0 && values[middle - 1] == target) {        middle--;      }      if (DEBUG_IDS) {        System.out.println("FOUND AT " + middle);      }      return middle;    }    if (value > target) {      end=middle - 1;    } else {      start=middle + 1;    }  }  if (DEBUG_IDS) {    System.out.println("NOT FOUND!");  }  return -1;}  }
class C{  public TextFieldPropertyChange(int nbColumns){  super("",nbColumns);  this.setDocument(new UpdatedDocument());}  }
class C{  private void write(String s) throws SAXException {  try {    output.write(s);  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  private Class loadProxyClass(String[] interfaceNames,ClassLoader interfaceLoader,String interfaceLoaderName,ClassLoader otherLoader,boolean tryOtherLoaderFirst) throws ClassNotFoundException {  Class[] classObjs=new Class[interfaceNames.length];  boolean[] nonpublic={false};  ClassLoader proxyLoader=loadProxyInterfaces(interfaceNames,interfaceLoader,classObjs,nonpublic);  if (logger.isLoggable(Level.FINEST)) {    ClassLoader[] definingLoaders=new ClassLoader[classObjs.length];    for (int i=0; i < definingLoaders.length; i++) {      definingLoaders[i]=getClassLoader(classObjs[i]);    }    logger.log(Level.FINEST,"proxy interfaces loaded via {0}, defined by {1}",new Object[]{interfaceLoaderName,Arrays.asList(definingLoaders)});  }  if (!nonpublic[0]) {    if (tryOtherLoaderFirst) {      try {        return Proxy.getProxyClass(otherLoader,classObjs);      } catch (      IllegalArgumentException e) {      }    }    proxyLoader=interfaceLoader;  }  return Proxy.getProxyClass(proxyLoader,classObjs);}  }
class C{  private CollectionHelper(){}  }
class C{  public GroupsIsMemberQueryWithUserIdsExtended(VkApiClient client,UserActor actor,String groupId,List<Integer> userIds){  super(client,"groups.isMember",Utils.buildParametrizedType(List.class,MemberStatusFull.class));  accessToken(actor.getAccessToken());  groupId(groupId);  extended(true);  userIds(userIds);}  }
class C{  public <T>void register(Class<T> service,T provider,Plugin plugin,ServicePriority priority){  RegisteredServiceProvider<T> registeredProvider=null;synchronized (providers) {    List<RegisteredServiceProvider<?>> registered=providers.get(service);    if (registered == null) {      registered=new ArrayList<RegisteredServiceProvider<?>>();      providers.put(service,registered);    }    registeredProvider=new RegisteredServiceProvider<T>(service,provider,priority,plugin);    int position=Collections.binarySearch(registered,registeredProvider);    if (position < 0) {      registered.add(-(position + 1),registeredProvider);    } else {      registered.add(position,registeredProvider);    }  }  Bukkit.getServer().getPluginManager().callEvent(new ServiceRegisterEvent(registeredProvider));}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,Writer writer) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  for (  Object line : lines) {    if (line != null) {      writer.write(line.toString());    }    writer.write(lineEnding);  }}  }
class C{  public void testCycleDateStartTimerEvent() throws Exception {  Clock previousClock=processEngineConfiguration.getClock();  Clock testClock=new DefaultClockImpl();  processEngineConfiguration.setClock(testClock);  Calendar calendar=Calendar.getInstance();  calendar.set(2025,Calendar.DECEMBER,10,0,0,0);  testClock.setCurrentTime(calendar.getTime());  repositoryService.createDeployment().addClasspathResource("org/activiti/engine/test/bpmn/event/timer/StartTimerEventRepeatWithoutEndDateTest.testCycleDateStartTimerEvent.bpmn20.xml").deploy();  assertEquals(1,repositoryService.createProcessDefinitionQuery().count());  List<Job> jobs=managementService.createTimerJobQuery().list();  assertEquals(1,jobs.size());  Calendar dueDateCalendar=Calendar.getInstance();  dueDateCalendar.set(2025,Calendar.DECEMBER,11,0,0,0);  assertEquals(true,Math.abs(dueDateCalendar.getTime().getTime() - jobs.get(0).getDuedate().getTime()) < 2000);  List<ProcessInstance> processInstances=runtimeService.createProcessInstanceQuery().list();  assertEquals(0,processInstances.size());  List<Task> tasks=taskService.createTaskQuery().list();  assertEquals(0,tasks.size());  moveByMinutes(9 * 60 * 24);  executeJobExecutorForTime(10000,200);  jobs=managementService.createTimerJobQuery().list();  assertEquals(1,jobs.size());  processInstances=runtimeService.createProcessInstanceQuery().list();  assertEquals(9,processInstances.size());  tasks=taskService.createTaskQuery().list();  assertEquals(9,tasks.size());  jobs=managementService.createTimerJobQuery().list();  assertEquals(1,jobs.size());  dueDateCalendar=Calendar.getInstance();  dueDateCalendar.set(2025,Calendar.DECEMBER,20,0,0,0);  assertEquals(true,Math.abs(dueDateCalendar.getTime().getTime() - jobs.get(0).getDuedate().getTime()) < 2000);  moveByMinutes(60 * 24);  try {    waitForJobExecutorToProcessAllJobsAndExecutableTimerJobs(2000,200);  } catch (  Exception e) {    fail("Because the maximum number of repeats is reached it will not be executed other jobs");  }  processInstances=runtimeService.createProcessInstanceQuery().list();  assertEquals(10,processInstances.size());  jobs=managementService.createJobQuery().list();  assertEquals(0,jobs.size());  tasks=taskService.createTaskQuery().list();  assertEquals(10,tasks.size());  int timerFiredCount=0;  List<ActivitiEvent> eventsReceived=listener.getEventsReceived();  for (  ActivitiEvent eventReceived : eventsReceived) {    if (ActivitiEventType.TIMER_FIRED.equals(eventReceived.getType())) {      timerFiredCount++;    }  }  int eventCreatedCount=0;  for (  ActivitiEvent eventReceived : eventsReceived) {    if (ActivitiEventType.ENTITY_CREATED.equals(eventReceived.getType())) {      eventCreatedCount++;    }  }  int eventDeletedCount=0;  for (  ActivitiEvent eventReceived : eventsReceived) {    if (ActivitiEventType.ENTITY_DELETED.equals(eventReceived.getType())) {      eventDeletedCount++;    }  }  assertEquals(10,timerFiredCount);  assertEquals(20,eventCreatedCount);  assertEquals(20,eventDeletedCount);  for (  ProcessInstance processInstance : processInstances) {    tasks=taskService.createTaskQuery().processInstanceId(processInstance.getProcessInstanceId()).list();    Task task=tasks.get(0);    assertEquals("Task A",task.getName());    assertEquals(1,tasks.size());    taskService.complete(task.getId());  }  processInstances=runtimeService.createProcessInstanceQuery().list();  assertEquals(0,processInstances.size());  jobs=managementService.createJobQuery().list();  assertEquals(0,jobs.size());  jobs=managementService.createTimerJobQuery().list();  assertEquals(0,jobs.size());  tasks=taskService.createTaskQuery().list();  assertEquals(0,tasks.size());  listener.clearEventsReceived();  processEngineConfiguration.setClock(previousClock);  repositoryService.deleteDeployment(repositoryService.createDeploymentQuery().singleResult().getId(),true);}  }
class C{  public String directionFromBearing(double bearing){  int index=(int)((bearing / 22.5) + 0.5) % 16;  return compassDirections[index];}  }
class C{  private final void createChunk(int data[][],int chunk){  data[chunk]=new int[CHUNK_SIZE + 1];  System.arraycopy(INIT_ARRAY,0,data[chunk],0,CHUNK_SIZE);}  }
class C{  public Matrix3f invert(){  return invert(null);}  }
class C{  public static <T>Iterator<T> toIterator(Collection<T> col){  if (col == null)   return null; else   return col.iterator();}  }
class C{  @Override public Fraction multiply(Fraction fraction){  MathUtils.checkNotNull(fraction,LocalizedCoreFormats.FRACTION);  if (numerator == 0 || fraction.numerator == 0) {    return ZERO;  }  int d1=ArithmeticUtils.gcd(numerator,fraction.denominator);  int d2=ArithmeticUtils.gcd(fraction.numerator,denominator);  return getReducedFraction(ArithmeticUtils.mulAndCheck(numerator / d1,fraction.numerator / d2),ArithmeticUtils.mulAndCheck(denominator / d2,fraction.denominator / d1));}  }
class C{  public static Bitmap drawableToBitmap(Drawable drawable){  return drawable == null ? null : ((BitmapDrawable)drawable).getBitmap();}  }
class C{  public TObjectIntHashMap(TObjectHashingStrategy<K> strategy){  super(strategy);}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set nodeShape=diamond;");}  }
class C{  public boolean isFullRank(){  for (int j=0; j < n; j++) {    if (Rdiag[j] == 0)     return false;  }  return true;}  }
class C{  public static Map<String,Object> deactivateAssocs(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  String contentIdTo=(String)context.get("contentIdTo");  String mapKey=(String)context.get("mapKey");  String contentAssocTypeId=(String)context.get("contentAssocTypeId");  String activeContentId=(String)context.get("activeContentId");  String contentId=(String)context.get("contentId");  Timestamp fromDate=(Timestamp)context.get("fromDate");  Locale locale=(Locale)context.get("locale");  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();  String sequenceNum=null;  Map<String,Object> results=FastMap.newInstance();  try {    GenericValue activeAssoc=null;    if (fromDate != null) {      activeAssoc=EntityQuery.use(delegator).from("ContentAssoc").where("contentId",activeContentId,"contentIdTo",contentIdTo,"fromDate",fromDate,"contentAssocTypeId",contentAssocTypeId).queryOne();      if (activeAssoc == null) {        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentAssocNotFound",UtilMisc.toMap("activeContentId",activeContentId,"contentIdTo",contentIdTo,"contentAssocTypeId",contentAssocTypeId,"fromDate",fromDate),locale));      }      sequenceNum=(String)activeAssoc.get("sequenceNum");    }    List<EntityCondition> exprList=FastList.newInstance();    exprList.add(EntityCondition.makeCondition("mapKey",EntityOperator.EQUALS,mapKey));    if (sequenceNum != null) {      exprList.add(EntityCondition.makeCondition("sequenceNum",EntityOperator.EQUALS,sequenceNum));    }    exprList.add(EntityCondition.makeCondition("mapKey",EntityOperator.EQUALS,mapKey));    exprList.add(EntityCondition.makeCondition("thruDate",EntityOperator.EQUALS,null));    exprList.add(EntityCondition.makeCondition("contentIdTo",EntityOperator.EQUALS,contentIdTo));    exprList.add(EntityCondition.makeCondition("contentAssocTypeId",EntityOperator.EQUALS,contentAssocTypeId));    if (UtilValidate.isNotEmpty(activeContentId)) {      exprList.add(EntityCondition.makeCondition("contentId",EntityOperator.NOT_EQUAL,activeContentId));    }    if (UtilValidate.isNotEmpty(contentId)) {      exprList.add(EntityCondition.makeCondition("contentId",EntityOperator.EQUALS,contentId));    }    EntityConditionList<EntityCondition> assocExprList=EntityCondition.makeCondition(exprList,EntityOperator.AND);    List<GenericValue> relatedAssocs=EntityQuery.use(delegator).from("ContentAssoc").where(assocExprList).orderBy("fromDate").filterByDate().queryList();    for (    GenericValue val : relatedAssocs) {      val.set("thruDate",nowTimestamp);      val.store();    }    results.put("deactivatedList",relatedAssocs);  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(e.getMessage());  }  return results;}  }
class C{  private void createMirrorServiceConfig(ReplicationPolicy replPolicy){  Element mirrorService=getFirstMatchElement(m_rootDoc.getDocumentElement(),MIRROR_SERVICE_TAG);  String elemValue=getNodeValueIfExists(mirrorService,MIRROR_SERVICE_URL_TAG);  if (elemValue == null)   throw new IllegalArgumentException(new ClusterConfigurationException("Mirror service enabled for replication group: " + replPolicy.m_ReplicationGroupName + ", but mirror url is missing. Check "+ clusterConfigFile+ " cluster config file."));  MirrorServiceConfig mirrorConfig=new MirrorServiceConfig();  try {    Properties custProps=null;    if (_spaceURL != null) {      custProps=_spaceURL.getCustomProperties();    }    Properties memberCustomProperties=removeRedundantProperties(custProps);    mirrorConfig.serviceURL=SpaceURLParser.parseURL(elemValue,memberCustomProperties);  } catch (  MalformedURLException e) {    throw new RuntimeException(new ClusterConfigurationException("Failed to parse mirror-service finder URL: " + mirrorConfig.serviceURL,e));  }  if (_spaceURL != null) {    String jiniGroup=_spaceURL.getProperty(SpaceURL.GROUPS);    if (jiniGroup != null)     mirrorConfig.serviceURL.setProperty(SpaceURL.GROUPS,jiniGroup);  }  elemValue=getNodeValueIfExists(mirrorService,MIRROR_SERVICE_BULK_SIZE_TAG);  if (elemValue != null)   mirrorConfig.bulkSize=Integer.parseInt(elemValue);  elemValue=getNodeValueIfExists(mirrorService,MIRROR_SERVICE_INTERVAL_MILLIS_TAG);  if (elemValue != null)   mirrorConfig.intervalMillis=Long.parseLong(elemValue);  elemValue=getNodeValueIfExists(mirrorService,MIRROR_SERVICE_INTERVAL_OPERS_TAG);  if (elemValue != null)   mirrorConfig.intervalOpers=Integer.parseInt(elemValue);  elemValue=getNodeValueIfExists(mirrorService,MIRROR_SERVICE_REDO_LOG_CAPACITY_EXCEEDED_TAG);  if (elemValue != null)   mirrorConfig.onRedoLogCapacityExceeded=parseRedoLogCapacityExceededPolicy(elemValue);  elemValue=getNodeValueIfExists(mirrorService,MIRROR_SERVICE_REDO_LOG_CAPACITY_TAG);  if (elemValue != null)   mirrorConfig.maxRedoLogCapacity=Long.parseLong(elemValue);  elemValue=getNodeValueIfExists(mirrorService,MIRROR_SERVICE_SUPPORTS_PARTIAL_UPDATE_TAG);  if (elemValue != null)   mirrorConfig.supportsPartialUpdate=Boolean.parseBoolean(elemValue);  elemValue=getNodeValueIfExists(mirrorService,MIRROR_SERVICE_SUPPORTS_CHANGE_TAG);  if (elemValue != null) {    if (elemValue.equals(MIRROR_SERVICE_CHANGE_SUPPORT_NONE_VALUE))     mirrorConfig.supportedChangeOperations=null; else {      String[] split=elemValue.split(",");      HashSet<String> operations=new HashSet<String>();      for (      String operation : split)       operations.add(operation.trim());      mirrorConfig.supportedChangeOperations=operations;    }  }  replPolicy.setMirrorServiceConfig(mirrorConfig);  replPolicy.m_ReplicationGroupMembersNames.add(mirrorConfig.serviceURL.getMemberName());  replPolicy.m_ReplicationGroupMembersURLs.add(mirrorConfig.serviceURL);  mirrorConfig.memberName=mirrorConfig.serviceURL.getMemberName();}  }
class C{  public static String parseValue(String value,CarbonDimension dimension){  try {switch (dimension.getDataType()) {case DECIMAL:      return parseStringToBigDecimal(value,dimension);default :    return value;}} catch (Exception e) {return null;}}  }
class C{  public AirCycleConfig build(){  return new AirCycleConfig(passIntentBundleOnCreate,ignoredLifecycleCallbacks);}  }
class C{  public String start(Consumer<SubscriptionNotification<T>> notificationHandler){  if (!subscribeForNotifications) {    documentUpdateTimeMicros=Utils.getNowMicrosUtc();    schedulePolling(notificationHandler);    if (completionHandler != null) {      completionHandler.accept(null);    }    return null;  }  CountDownLatch countDown=new CountDownLatch(1);  host.registerForServiceAvailability(null,subscribeForServiceLink);  boolean waited;  try {    waited=countDown.await(10,TimeUnit.SECONDS);    if (!waited) {      host.log(Level.WARNING,"Waiting for subscription timedout: %s",subscribeForServiceLink);    }  } catch (  InterruptedException ex) {    host.log(Level.WARNING,"Thred interrupted: %s",Utils.toString(ex));  }  Operation subscribe=Operation.createPost(buildSubscribeForUri()).setReferer(host.getUri()).setCompletion(null);  StatelessService notificationTarget=new NotificationStatelessServiceHandler<T>(this,notificationHandler);  notificationTarget.setSelfLink(UriUtils.buildUriPath("subscriptions",uniqueSubscriptionId,"resource",Service.getId(subscribeForServiceLink)));  try {    host.stopService(notificationTarget);  } catch (  Throwable e) {    Utils.logWarning("Error while stopping the a subscription service %s",Utils.toString(e));  }  boolean replayState=false;  boolean usePublicUri=false;  ServiceSubscriber sr=ServiceSubscriber.create(replayState).setUsePublicUri(usePublicUri);  host.startSubscriptionService(subscribe,notificationTarget,sr);  this.subscriptionLink=notificationTarget.getSelfLink();  return subscriptionLink;}  }
class C{  protected DTDDVFactory createDatatypeValidatorFactory(){  return DTDDVFactory.getInstance();}  }
class C{  private Observable<JobRow> buildJobRowStoredNotification(Observable<JobRow> asynchronousPayload,JobRow jobRow){  return asynchronousPayload.flatMap(null).onErrorReturn(null);}  }
class C{  public int pxToDp(@AndroidCoordinate int px){  return (int)(0.5f + px / myDpiFactor);}  }
class C{  protected Expression generateExpression(){  Expression expression=null;  if (attributeComboBox != null) {    String value=getStringValue();    if (value != null) {      expression=getFilterFactory().property(value);    }  }  return expression;}  }
class C{  private void updateProcessStatus(){  boolean down=false;  StringBuilder invalidationMessage=new StringBuilder();  for (  SupervisionEvent event : processSupervisionStatus.values()) {    if (event != null) {      boolean isDown=false;      isDown|=event.getStatus().equals(SupervisionStatus.DOWN);      isDown|=event.getStatus().equals(SupervisionStatus.STOPPED);      if (isDown) {        down=true;        if (invalidationMessage.length() > 0) {          invalidationMessage.append("; ");        }        invalidationMessage.append(event.getMessage());      }    }  }  if (down) {    tagQuality.addInvalidStatus(TagQualityStatus.PROCESS_DOWN,invalidationMessage.toString());  } else {    tagQuality.removeInvalidStatus(TagQualityStatus.PROCESS_DOWN);  }}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  private boolean warmUpTextLayoutCache(Layout layout){  boolean result;  try {    layout.draw(DUMMY_CANVAS);    result=true;  } catch (  Exception e) {    WXLogUtils.eTag(TAG,e);    result=false;  }  return result;}  }
class C{  public boolean optBoolean(int index,boolean defaultValue){  try {    return getBoolean(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  @Override public void reset(){  Log.d(SBMP_TAG,"reset() 523");  if (pmInterface == null) {    if (!ConnectPlayMediaService()) {      ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);    }  }  try {    pmInterface.reset(ServiceBackedMediaPlayer.this.sessionId);  } catch (  RemoteException e) {    e.printStackTrace();    ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);  }}  }
class C{  public static <K>int calculateNumStreamsToRebalance(K nodeToRebalance,Map<K,Integer> loadDistribution,int rebalanceWaterMark,double tolerancePercentage){  Integer myLoad=loadDistribution.get(nodeToRebalance);  if (null == myLoad || myLoad <= rebalanceWaterMark) {    return 0;  }  long totalLoad=0L;  int numNodes=loadDistribution.size();  for (  Map.Entry<K,Integer> entry : loadDistribution.entrySet()) {    if (null == entry.getKey() || null == entry.getValue()) {      continue;    }    totalLoad+=entry.getValue();  }  double averageLoad=((double)totalLoad) / numNodes;  long permissibleLoad=Math.max(1L,(long)Math.ceil(averageLoad + averageLoad * tolerancePercentage / 100.0f));  if (myLoad <= permissibleLoad) {    return 0;  }  return Math.max(0,myLoad - (int)Math.ceil(averageLoad));}  }
class C{  void applyFacets1(XSFacets facets,short presentFacet,short fixedFacet,short patternType){  try {    applyFacets(facets,presentFacet,fixedFacet,patternType,fDummyContext);  } catch (  InvalidDatatypeFacetException e) {    throw new RuntimeException("internal error");  }  fIsImmutable=true;}  }
class C{  public void prepareStatement(String sql,boolean specifyTypeAndConcur,int resultSetType,int resultSetConcurrency) throws GenericDataSourceException, GenericEntityException {  this.prepareStatement(sql,specifyTypeAndConcur,resultSetType,resultSetConcurrency,-1,-1);}  }
class C{  private static <T>SortedSet<T> cast(Iterable<T> iterable){  return (SortedSet<T>)iterable;}  }
class C{  public SelectorFilter withValue(String value){  return new SelectorFilter(getDimension(),value);}  }
class C{  @Override public Collection<PostAggregation> updateNestedQueryPostAggs(Collection<PostAggregation> nestedQueryPostAggs,Map<String,String> oldFieldNameToNewFieldNameMap,String filterSuffix){  Set<PostAggregation> postAggregationSet=new HashSet<>();  for (  PostAggregation postAggregation : nestedQueryPostAggs) {    if (postAggregation instanceof ConstantPostAggregation) {      postAggregationSet.add(postAggregation);    } else {      oldFieldNameToNewFieldNameMap.put(postAggregation.getName(),postAggregation.getName().concat(filterSuffix));      postAggregationSet.add(postAggregation.withName(oldFieldNameToNewFieldNameMap.get(postAggregation.getName())));    }  }  return postAggregationSet;}  }
class C{  public Bundler putLong(String key,long value){  bundle.putLong(key,value);  return this;}  }
class C{  public void pointValuesToPixel(float[] pts){  mMatrixValueToPx.mapPoints(pts);  mViewPortHandler.getMatrixTouch().mapPoints(pts);  mMatrixOffset.mapPoints(pts);}  }
class C{  private LocationHelper(){}  }
class C{  public static StyledLayerDescriptor createNewSLD(){  StyledLayerDescriptor sld=styleFactory.createStyledLayerDescriptor();  return sld;}  }
class C{  public RawFileAudioPlayer() throws IOException {  this(Utilities.getProperty("com.sun.speech.freetts.AudioPlayer.baseName","freetts") + ".raw");}  }
class C{  private void addAnnotation(TextContainer textContainer,Issue issue){  TMTextUnitVariantCommentAnnotation tmTextUnitVariantCommentAnnotation=new TMTextUnitVariantCommentAnnotation();  tmTextUnitVariantCommentAnnotation.setCommentType(TMTextUnitVariantComment.Type.QUALITY_CHECK);  tmTextUnitVariantCommentAnnotation.setMessage(issue.getMessage());  tmTextUnitVariantCommentAnnotation.setSeverity(TMTextUnitVariantComment.Severity.WARNING);  new TMTextUnitVariantCommentAnnotations(textContainer).addAnnotation(tmTextUnitVariantCommentAnnotation);}  }
class C{  public static void moveToDirectory(File src,File destDir,boolean createDestDir) throws IOException {  if (src == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination must not be null");  }  if (!src.exists()) {    throw new FileNotFoundException("Source '" + src + "' does not exist");  }  if (src.isDirectory()) {    moveDirectoryToDirectory(src,destDir,createDestDir);  } else {    moveFileToDirectory(src,destDir,createDestDir);  }}  }
class C{  public LeadsGetUsersQuery status(LeadsGetUsersStatus value){  return unsafeParam("status",value);}  }
class C{  public final int computeHashCode(short val){  return HashFunctions.hash(val);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public void start(float valueFactor,int duration,PathPointsHolder pathPointsHolder){  mValueFactor=valueFactor;  mDuration=duration;  mFinished=false;  mPathPointsHolder=pathPointsHolder;  mStartTime=AnimationUtils.currentAnimationTimeMillis();}  }
class C{  void receiveInsertedText(CharacterDataImpl node,int index,int len){  if (node == null)   return;  if (fInsertNode == node)   return;  if (node == fStartContainer) {    if (index < fStartOffset) {      fStartOffset=fStartOffset + len;    }  }  if (node == fEndContainer) {    if (index < fEndOffset) {      fEndOffset=fEndOffset + len;    }  }}  }
class C{  public void draw(Canvas c,RectF bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColor);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setRetainInstance(true);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Spin_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200897,skilltarget,skillcaster,skillname);}  }
class C{  protected void writePixels() throws IOException {  LZWEncoder encoder=new LZWEncoder(width,height,indexedPixels,colorDepth);  encoder.encode(out);}  }
class C{  public void handleStep(final FieldODEStateInterpolator<T> interpolator,final boolean isLast) throws MathIllegalStateException {  if (last == null) {    first=interpolator.getPreviousState();    last=first;    forward=interpolator.isForward();    if (!forward) {      h=-h;    }  }  T nextTime=(mode == StepNormalizerMode.INCREMENT) ? last.getTime().add(h) : last.getTime().getField().getZero().add((FastMath.floor(last.getTime().getReal() / h) + 1) * h);  if (mode == StepNormalizerMode.MULTIPLES && Precision.equals(nextTime.getReal(),last.getTime().getReal(),1)) {    nextTime=nextTime.add(h);  }  boolean nextInStep=isNextInStep(nextTime,interpolator);  while (nextInStep) {    doNormalizedStep(false);    last=interpolator.getInterpolatedState(nextTime);    nextTime=nextTime.add(h);    nextInStep=isNextInStep(nextTime,interpolator);  }  if (isLast) {    final boolean addLast=bounds.lastIncluded() && last.getTime().getReal() != interpolator.getCurrentState().getTime().getReal();    doNormalizedStep(!addLast);    if (addLast) {      last=interpolator.getCurrentState();      doNormalizedStep(true);    }  }}  }
class C{  public JSONStringer(){  super(new StringWriter());}  }
class C{  protected T deserialize(HttpServletRequest request) throws IOException {  String type=request.getContentType();  type=!StringUtils.isEmpty(type) ? type : MediaType.APPLICATION_JSON_VALUE;  if (request.getPathInfo().endsWith(".json")) {    type=MediaType.APPLICATION_JSON_VALUE;  } else   if (request.getPathInfo().endsWith(".xml")) {    type=MediaType.APPLICATION_XML_VALUE;  }  if (isCompatibleWith(type,MediaType.APPLICATION_JSON)) {    return renderService.fromJson(request.getInputStream(),getEntityClass());  } else   if (isCompatibleWith(type,MediaType.APPLICATION_XML)) {    return renderService.fromXml(request.getInputStream(),getEntityClass());  }  return null;}  }
class C{  public static Long daysBetween(String start,String end){  LocalDate st=LocalDate.parse(start,DATE_FORMAT);  LocalDate en=LocalDate.parse(end,DATE_FORMAT);  return ChronoUnit.DAYS.between(st,en);}  }
class C{  static ClassLoader findClassLoader() throws ConfigurationError {  ClassLoader context=SecuritySupport.getContextClassLoader();  ClassLoader system=SecuritySupport.getSystemClassLoader();  ClassLoader chain=system;  while (true) {    if (context == chain) {      ClassLoader current=ObjectFactory.class.getClassLoader();      chain=system;      while (true) {        if (current == chain) {          return system;        }        if (chain == null) {          break;        }        chain=SecuritySupport.getParentClassLoader(chain);      }      return current;    }    if (chain == null) {      break;    }    chain=SecuritySupport.getParentClassLoader(chain);  }  return context;}  }
class C{  @Override public void startConditional(short type,Augmentations augs) throws XNIException {}  }
class C{  public ChangeSet increment(String path,Number delta){  return add(new IncrementSpaceEntryMutator(path,delta));}  }
class C{  public void add(int[] vals){  add(vals,0,vals.length);}  }
class C{  public boolean matchKeyword(String keyword){  return tok.ttype == StreamTokenizer.TT_WORD && tok.sval.equals(keyword) && keywords.contains(tok.sval);}  }
class C{  private void computeTabOffsetHelper(RectF stackRect){  final boolean portrait=mCurrentMode == Orientation.PORTRAIT;  final float parentWidth=stackRect.width();  final float parentHeight=stackRect.height();  final float overscrollPercent=computeOverscrollPercent();  final float scrollOffset=MathUtils.clamp(mScrollOffset,getMinScroll(false),getMaxScroll(false));  final float stackScale=getStackScale(stackRect);  int stackedCount=0;  float minStackedPosition=0.0f;  for (int i=0; i < mStackTabs.length; ++i) {    assert mStackTabs[i] != null;    StackTab stackTab=mStackTabs[i];    LayoutTab layoutTab=stackTab.getLayoutTab();    final float stackScrollOffset=stackTab.isDying() ? mScrollOffsetForDyingTabs : scrollOffset;    float screenScrollOffset=approxScreen(stackTab,stackScrollOffset);    screenScrollOffset=Math.max(minStackedPosition,screenScrollOffset);    if (stackedCount < MAX_NUMBER_OF_STACKED_TABS_TOP) {      final float tiltXcos=(float)Math.cos(Math.toRadians(layoutTab.getTiltX()));      final float tiltYcos=(float)Math.cos(Math.toRadians(layoutTab.getTiltY()));      float collapse=Math.min(Math.abs(tiltXcos),Math.abs(tiltYcos));      collapse*=layoutTab.getAlpha();      minStackedPosition+=StackTab.sStackedTabVisibleSize * collapse;    }    stackedCount+=stackTab.isDying() ? 0 : 1;    if (overscrollPercent < 0) {      screenScrollOffset+=(overscrollPercent / OVERSCROLL_TOP_SLIDE_PCTG) * screenScrollOffset;      screenScrollOffset=Math.max(0,screenScrollOffset);    }    float xIn=(parentWidth - layoutTab.getScaledContentWidth()) / 2.0f;    float yIn=(parentHeight - layoutTab.getScaledContentHeight()) / 2.0f;    final float horizontalPadding=(parentWidth - layoutTab.getOriginalContentWidth() * StackAnimation.SCALE_AMOUNT * stackScale) / 2.0f;    final float verticalPadding=(parentHeight - layoutTab.getOriginalContentHeight() * StackAnimation.SCALE_AMOUNT * stackScale) / 2.0f;    if (portrait) {      yIn+=STACK_PORTRAIT_Y_OFFSET_PROPORTION * verticalPadding;      yIn+=screenScrollOffset;    } else {      if (LocalizationUtils.isLayoutRtl()) {        xIn-=STACK_LANDSCAPE_START_OFFSET_PROPORTION * horizontalPadding;        xIn-=screenScrollOffset;      } else {        xIn+=STACK_LANDSCAPE_START_OFFSET_PROPORTION * horizontalPadding;        xIn+=screenScrollOffset;      }      yIn+=STACK_LANDSCAPE_Y_OFFSET_PROPORTION * verticalPadding;    }    layoutTab.setX(xIn);    layoutTab.setY(yIn);  }  stackedCount=0;  float maxStackedPosition=portrait ? mLayout.getHeightMinusTopControls() : mLayout.getWidth();  for (int i=mStackTabs.length - 1; i >= 0; i--) {    assert mStackTabs[i] != null;    StackTab stackTab=mStackTabs[i];    LayoutTab layoutTab=stackTab.getLayoutTab();    if (stackTab.isDying())     continue;    float pos;    if (portrait) {      pos=layoutTab.getY();      layoutTab.setY(Math.min(pos,maxStackedPosition));    } else     if (LocalizationUtils.isLayoutRtl()) {      float posOffset=mLayout.getWidth() - layoutTab.getOriginalContentWidth() * StackAnimation.SCALE_AMOUNT * stackScale;      pos=-layoutTab.getX() + posOffset;      layoutTab.setX(-Math.min(pos,maxStackedPosition) + posOffset);    } else {      pos=layoutTab.getX();      layoutTab.setX(Math.min(pos,maxStackedPosition));    }    if (pos >= maxStackedPosition && stackedCount < MAX_NUMBER_OF_STACKED_TABS_BOTTOM) {      maxStackedPosition-=StackTab.sStackedTabVisibleSize;      stackedCount++;    }  }  final float discardRange=getDiscardRange();  for (int i=0; i < mStackTabs.length; ++i) {    assert mStackTabs[i] != null;    StackTab stackTab=mStackTabs[i];    LayoutTab layoutTab=stackTab.getLayoutTab();    final float xIn=layoutTab.getX() + stackTab.getXInStackOffset();    final float yIn=layoutTab.getY() + stackTab.getYInStackOffset();    final float xOut=stackTab.getXOutOfStack();    final float yOut=stackTab.getYOutOfStack();    float x=MathUtils.interpolate(xOut,xIn,stackTab.getXInStackInfluence());    float y=MathUtils.interpolate(yOut,yIn,stackTab.getYInStackInfluence());    if (stackTab.getDiscardAmount() != 0) {      float discard=stackTab.getDiscardAmount();      boolean fromClick=stackTab.getDiscardFromClick();      float scale=computeDiscardScale(discard,discardRange,fromClick);      float deltaX=stackTab.getDiscardOriginX() - stackTab.getLayoutTab().getOriginalContentWidth() / 2.f;      float deltaY=stackTab.getDiscardOriginY() - stackTab.getLayoutTab().getOriginalContentHeight() / 2.f;      float discardOffset=fromClick ? 0.f : discard;      if (portrait) {        x+=discardOffset + deltaX * (1.f - scale);        y+=deltaY * (1.f - scale);      } else {        x+=deltaX * (1.f - scale);        y+=discardOffset + deltaY * (1.f - scale);      }    }    layoutTab.setX(stackRect.left + x);    layoutTab.setY(stackRect.top + y);  }}  }
class C{  public Bundler putCharArray(String key,char[] value){  bundle.putCharArray(key,value);  return this;}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){switch (event.getAction()) {case MotionEvent.ACTION_DOWN:    pressPaint.setAlpha(pressAlpha);  invalidate();break;case MotionEvent.ACTION_UP:pressPaint.setAlpha(0);invalidate();break;case MotionEvent.ACTION_MOVE:break;default :pressPaint.setAlpha(0);invalidate();break;}return super.onTouchEvent(event);}  }
class C{  public static void recordPageStart(Context context){  TcStatSdk.getInstance(context).recordPageStart(context);}  }
class C{  public static boolean isNonpositiveInteger(String s){  if (isEmpty(s))   return defaultEmptyOK;  try {    int temp=Integer.parseInt(s);    if (temp <= 0)     return true;    return false;  } catch (  Exception e) {    return false;  }}  }
class C{  private Map<DownloadInfo,Pair<Long,Boolean>> updateAllNotifications(){  assert !ThreadUtils.runningOnUiThread();  Map<DownloadInfo,Pair<Long,Boolean>> completionMap=new HashMap<DownloadInfo,Pair<Long,Boolean>>();  for (  DownloadProgress progress : mDownloadProgressMap.values()) {    if (progress != null) {switch (progress.mDownloadStatus) {case COMPLETE:        removeProgressNotificationForDownload(progress.mDownloadInfo.getDownloadId());      long downloadId=addCompletedDownload(progress.mDownloadInfo);    if (downloadId == INVALID_DOWNLOAD_ID) {      completionMap.put(progress.mDownloadInfo,Pair.create(INVALID_DOWNLOAD_ID,false));      mDownloadNotifier.notifyDownloadFailed(progress.mDownloadInfo);    } else {      boolean canResolve=canResolveDownloadItem(mContext,downloadId);      completionMap.put(progress.mDownloadInfo,Pair.create(downloadId,canResolve));      mDownloadNotifier.notifyDownloadSuccessful(progress.mDownloadInfo,getLaunchIntentFromDownloadId(mContext,downloadId));      broadcastDownloadSuccessful(progress.mDownloadInfo);    }  break;case FAILED:removeProgressNotificationForDownload(progress.mDownloadInfo.getDownloadId());mDownloadNotifier.notifyDownloadFailed(progress.mDownloadInfo);completionMap.put(progress.mDownloadInfo,Pair.create(INVALID_DOWNLOAD_ID,false));Log.w(TAG,"Download failed: " + progress.mDownloadInfo.getFilePath());break;case IN_PROGRESS:mDownloadNotifier.notifyDownloadProgress(progress.mDownloadInfo,progress.mStartTimeInMillis);}}}return completionMap;}  }
class C{  public static PDF417DetectorResult detect(BinaryBitmap image,Map<DecodeHintType,?> hints,boolean multiple) throws NotFoundException {  BitMatrix bitMatrix=image.getBlackMatrix();  List<ResultPoint[]> barcodeCoordinates=detect(multiple,bitMatrix);  if (barcodeCoordinates.isEmpty()) {    bitMatrix=bitMatrix.clone();    bitMatrix.rotate180();    barcodeCoordinates=detect(multiple,bitMatrix);  }  return new PDF417DetectorResult(bitMatrix,barcodeCoordinates);}  }
class C{  @RequestMapping(value="/{namespace}/{key}",method=RequestMethod.DELETE,produces="application/json") public void deleteUserKeyJsonValue(@PathVariable String namespace,@PathVariable String key,HttpServletResponse response) throws WebMessageException {  UserKeyJsonValue userKeyJsonValue=userKeyJsonValueService.getUserKeyJsonValue(currentUserService.getCurrentUser(),namespace,key);  if (userKeyJsonValue == null) {    throw new WebMessageException(WebMessageUtils.notFound("The key '" + key + "' was not found in the namespace '"+ namespace+ "'."));  }  userKeyJsonValueService.deleteUserKeyJsonValue(userKeyJsonValue);  messageService.sendJson(WebMessageUtils.ok("Key '" + key + "' deleted from the namespace '"+ namespace+ "'."),response);}  }
class C{  public static void embedTree(PhyloTreeView treeView){  treeView.removeAllInternalPoints();  Node root=treeView.getPhyloTree().getRoot();  if (root != null)   computeEmbeddingRec(treeView,root,null,0,0,true);  treeView.resetViews();  for (Node v=treeView.getPhyloTree().getFirstNode(); v != null; v=v.getNext()) {    treeView.setLabel(v,treeView.getPhyloTree().getLabel(v));    treeView.setLabelLayout(v,NodeView.EAST);  }  treeView.trans.setCoordinateRect(treeView.getBBox());  treeView.fitGraphToWindow();}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public XPathMatcher createMatcher(ValueStore store){  return new Field.Matcher(fXPath,store);}  }
class C{  public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set select=");  TimeSeriesViewer viewer=(TimeSeriesViewer)getViewer();  DataJTable dataJTable=viewer.getDataJTable();  if (np.peekMatchIgnoreCase("all")) {    np.matchIgnoreCase("all");    dataJTable.selectAll();  } else   if (np.peekMatchIgnoreCase("none")) {    np.matchIgnoreCase("none");    dataJTable.clearSelection();  } else   if (np.peekMatchIgnoreCase("name")) {    np.matchIgnoreCase("name=");    String name=np.getWordRespectCase();    dataJTable.select(name,true);  }  np.matchIgnoreCase(";");}  }
class C{  public PhotosGetUserPhotosQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public static boolean isConnected(Context context){  NetworkInfo info=Connectivity.getNetworkInfo(context);  return (info != null && info.isConnected());}  }
class C{  public boolean hasSegmentParameter(SegmentContextParameters segmParameter,ContextInfo contextInfo){  return hasTemplateParameter(new TemplateParameter(TemplateParameterContext.SEGMENT,segmParameter.getName()),contextInfo);}  }
class C{  public static boolean isXML11ValidNCName(String ncName){  final int length=ncName.length();  if (length == 0) {    return false;  }  int i=1;  char ch=ncName.charAt(0);  if (!isXML11NCNameStart(ch)) {    if (length > 1 && isXML11NameHighSurrogate(ch)) {      char ch2=ncName.charAt(1);      if (!XMLChar.isLowSurrogate(ch2) || !isXML11NCNameStart(XMLChar.supplemental(ch,ch2))) {        return false;      }      i=2;    } else {      return false;    }  }  while (i < length) {    ch=ncName.charAt(i);    if (!isXML11NCName(ch)) {      if (++i < length && isXML11NameHighSurrogate(ch)) {        char ch2=ncName.charAt(i);        if (!XMLChar.isLowSurrogate(ch2) || !isXML11NCName(XMLChar.supplemental(ch,ch2))) {          return false;        }      } else {        return false;      }    }    ++i;  }  return true;}  }
class C{  public boolean exists(String key){  return exists(key,false);}  }
class C{  public boolean isPageOnTheList(String title){  boolean isOnTheList=getRowByTitle(title) != null;  if (!isOnTheList) {    LOG.debug("There were no page with title {} on the list",title);  }  return isOnTheList;}  }
class C{  public String makeQueryString(HttpServletRequest request,ConfigXMLReader.RequestResponse requestResponse){  if (requestResponse == null || (requestResponse.redirectParameterMap.size() == 0 && requestResponse.redirectParameterValueMap.size() == 0)) {    Map<String,Object> urlParams=UtilHttp.getUrlOnlyParameterMap(request);    String queryString=UtilHttp.urlEncodeArgs(urlParams,false);    if (UtilValidate.isEmpty(queryString)) {      return queryString;    }    return "?" + queryString;  } else {    StringBuilder queryString=new StringBuilder();    queryString.append("?");    for (    Map.Entry<String,String> entry : requestResponse.redirectParameterMap.entrySet()) {      String name=entry.getKey();      String from=entry.getValue();      Object value=request.getAttribute(from);      if (value == null) {        value=request.getParameter(from);      }      addNameValuePairToQueryString(queryString,name,(String)value);    }    for (    Map.Entry<String,String> entry : requestResponse.redirectParameterValueMap.entrySet()) {      String name=entry.getKey();      String value=entry.getValue();      addNameValuePairToQueryString(queryString,name,value);    }    return queryString.toString();  }}  }
class C{  public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {  String simpleMethodName=method.getName();  Class[] params=method.getParameterTypes();  if ("equals".equals(simpleMethodName) && params.length == 1 && params[0].equals(Object.class)) {    Object value=args[0];    if (value == null || !Proxy.isProxyClass(value.getClass())) {      return Boolean.FALSE;    }    FastServletProxyInvocationHandler handler=(FastServletProxyInvocationHandler)Proxy.getInvocationHandler(value);    return this.url.equals(handler.getURL()) ? Boolean.TRUE : Boolean.FALSE;  }  if ("hashCode".equals(simpleMethodName) && params.length == 0) {    return Integer.valueOf(this.url.hashCode());  }  if ("toString".equals(simpleMethodName) && params.length == 0) {    return "[FastServletProxyInvocationHandler " + this.url + "]";  }  return this.invokeRemoteMethod(proxy,method,args);}  }
class C{  private void internal_updateSymbolIntegerField(Map<String,String> options,FieldIdEnum field,String key){  int value=fieldConfigVisitor.getInteger(field);  Integer defaultValue=(Integer)getDefaultFieldValue(field);  if (defaultValue == null) {    ConsoleManager.getInstance().error(this,"Failed to find default for field : " + field);  } else   if (value != defaultValue) {    options.put(key,String.valueOf(value));  }}  }
class C{  public void addNewStyle(Style style){  if (this.symbolData.getStyledLayer() == null) {    ConsoleManager.getInstance().error(this,"styledLayer == null");  } else {    if (this.symbolData.getStyledLayer() instanceof NamedLayerImpl) {      NamedLayerImpl namedLayer=(NamedLayerImpl)this.symbolData.getStyledLayer();      List<Style> styleList=namedLayer.styles();      styleList.add(style);    } else     if (this.symbolData.getStyledLayer() instanceof UserLayerImpl) {      UserLayerImpl userLayer=(UserLayerImpl)this.symbolData.getStyledLayer();      List<Style> styleList=userLayer.userStyles();      styleList.add(style);    }  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  @Override public void dataChanged(FieldIdEnum changedField){  updateSymbol();}  }
class C{  @Override public Set<String> vertexMatchPatternLabels(){  return Collections.emptySet();}  }
class C{  public void revertToDefaultValue(){  List<FieldConfigBase> fieldList=fieldConfigManager.getFields(null);  for (  FieldConfigBase field : fieldList) {    if (field != null) {      field.revertToDefaultValue();    }  }}  }
class C{  public static Map<String,List<Distributable>> nodeBlockMapping(List<Distributable> blockInfos,int noOfNodesInput,List<String> activeNodes){  Map<String,List<Distributable>> nodeBlocksMap=new HashMap<String,List<Distributable>>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  List<NodeBlockRelation> flattenedList=new ArrayList<NodeBlockRelation>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  Set<Distributable> uniqueBlocks=new HashSet<Distributable>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  Set<String> nodes=new HashSet<String>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  createFlattenedListFromMap(blockInfos,flattenedList,uniqueBlocks,nodes);  int noofNodes=(-1 == noOfNodesInput) ? nodes.size() : noOfNodesInput;  if (null != activeNodes) {    noofNodes=activeNodes.size();  }  int blocksPerNode=blockInfos.size() / noofNodes;  blocksPerNode=blocksPerNode <= 0 ? 1 : blocksPerNode;  Collections.sort(flattenedList);  Map<String,List<Distributable>> nodeAndBlockMapping=new LinkedHashMap<String,List<Distributable>>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  createNodeVsBlockMapping(flattenedList,nodeAndBlockMapping);  createOutputMap(nodeBlocksMap,blocksPerNode,uniqueBlocks,nodeAndBlockMapping,activeNodes);  assignLeftOverBlocks(nodeBlocksMap,uniqueBlocks,blocksPerNode,activeNodes);  return nodeBlocksMap;}  }
class C{  public boolean onUpdateAnimation(long time,boolean jumpToEnd){  if (mContentAnimations == null)   return true;  boolean finished=true;  if (jumpToEnd) {    finished=mContentAnimations.finished();  } else {    finished=mContentAnimations.update(time);  }  if (jumpToEnd || finished)   finishAnimation();  return finished;}  }
class C{  @Override protected void initToolbar(Bundle savedInstanceState){}  }
class C{  public Covariance(RealMatrix matrix,boolean biasCorrected) throws MathIllegalArgumentException {  checkSufficientData(matrix);  n=matrix.getRowDimension();  covarianceMatrix=computeCovarianceMatrix(matrix,biasCorrected);}  }
class C{  public void register(String key,Block value){  register(key,matcherOf(value));}  }
class C{  public static IClassificationBlock loadClassification(DAAHeader daaHeader,String classificationName) throws IOException {  for (int i=0; i < daaHeader.getBlockTypeRankArrayLength() - 1; i++) {    if (daaHeader.getBlockType(i) == BlockType.megan_classification_key_block) {      long keyBase=daaHeader.computeBlockStart(i);      try (InputReaderLittleEndian ins=new InputReaderLittleEndian(new FileRandomAccessReadOnlyAdapter(daaHeader.getFileName()))){        ins.seek(keyBase);        String cName=ins.readNullTerminatedBytes();        if (cName.equalsIgnoreCase(classificationName)) {          final ClassificationBlockDAA classificationBlock=new ClassificationBlockDAA(classificationName);          int numberOfClasses=ins.readInt();          for (int c=0; c < numberOfClasses; c++) {            int classId=ins.readInt();            classificationBlock.setSum(classId,ins.readInt());            ins.skipBytes(12);          }          return classificationBlock;        }      }     }  }  return null;}  }
class C{  public void parseAllCatalogs() throws IOException {  for (int catPos=0; catPos < catalogs.size(); catPos++) {    Catalog c=null;    try {      c=(Catalog)catalogs.elementAt(catPos);    } catch (    ClassCastException e) {      String catfile=(String)catalogs.elementAt(catPos);      c=newCatalog();      c.parseCatalog(catfile);      catalogs.setElementAt(c,catPos);      c.parseAllCatalogs();    }  }  Enumeration en=catalogEntries.elements();  while (en.hasMoreElements()) {    CatalogEntry e=(CatalogEntry)en.nextElement();    if (e.getEntryType() == DELEGATE_PUBLIC || e.getEntryType() == DELEGATE_SYSTEM || e.getEntryType() == DELEGATE_URI) {      Catalog dcat=newCatalog();      dcat.parseCatalog(e.getEntryArg(1));    }  }}  }
class C{  public static void show(@Nullable Activity activity,CharSequence msg,int duration){  show(activity,msg,duration,DEFAULT_GRAVITY);}  }
class C{  public boolean isInterfaceSubinterfaceOf(SootClass child,SootClass possibleParent){  child.checkLevel(SootClass.HIERARCHY);  possibleParent.checkLevel(SootClass.HIERARCHY);  return getSubinterfacesOf(possibleParent).contains(child);}  }
class C{  public boolean isLoggedIn(){  AccessToken accessToken=getAccessToken();  return accessToken != null && !accessToken.isExpired();}  }
class C{  public static boolean needBoolean(String property) throws NoSuchPropertyException {  String value=getProperty(property);  if (value == null) {    throw new NoSuchPropertyException("Missing property `" + property + "' in configuration files");  }  try {    return Boolean.valueOf(value).booleanValue();  } catch (  NumberFormatException e) {    throw new NoSuchPropertyException("Boolean property `" + property + "' in configuration files has wrong value `"+ value+ "'");  }}  }
class C{  public void sync(final boolean force){  if (closed) {    throw new AlreadyClosedException();  }  final int f=force ? 1 : 0;  checkRc(LIB.mdb_env_sync(ptr,f));}  }
class C{  public ContrastSubfilter(float contrast){  this.contrast=contrast;}  }
class C{  @Override public void removeStroke(Symbolizer symbolizer){  if (symbolizer instanceof LineSymbolizer) {    LineSymbolizer line=(LineSymbolizer)symbolizer;    if (line != null) {      line.setStroke(null);    }  }}  }
class C{  public static boolean calculatePhysicalCriticalRate(Creature attacker,Creature attacked,boolean isMainHand,int criticalProb,boolean isSkill){  if (attacker instanceof Servant || attacker instanceof Homing) {    return false;  }  int critical;  if (attacker instanceof Player && !isMainHand) {    critical=((PlayerGameStats)attacker.getGameStats()).getOffHandPCritical().getCurrent();  } else {    critical=attacker.getGameStats().getMainHandPCritical().getCurrent();  }  AttackerCriticalStatus acStatus=attacker.getObserveController().checkAttackerCriticalStatus(AttackStatus.CRITICAL,isSkill);  if (acStatus.isResult()) {    if (acStatus.isPercent()) {      critical*=(1 + acStatus.getValue() / 100);    } else {      return Rnd.nextInt(1000) < acStatus.getValue();    }  }  critical=attacked.getGameStats().getPositiveReverseStat(StatEnum.PHYSICAL_CRITICAL_RESIST,critical) - attacker.getGameStats().getStat(StatEnum.PVP_HIT_ACCURACY,0).getCurrent();  critical*=(float)criticalProb / 100f;  double criticalRate;  if (critical <= 440) {    criticalRate=critical * 0.1f;  } else   if (critical <= 600) {    criticalRate=(440 * 0.1f) + ((critical - 440) * 0.05f);  } else {    criticalRate=(440 * 0.1f) + (160 * 0.05f) + ((critical - 600) * 0.02f);  }  return Rnd.nextInt(100) < criticalRate;}  }
class C{  private ChannelSelection createChannelSelection(StyleFactoryImpl styleFactory,ContrastMethod contrastMethod){  ContrastEnhancement contrastEnhancement=(ContrastEnhancement)styleFactory.contrastEnhancement(null,contrastMethod.name());  FilterFactory ff=CommonFactoryFinder.getFilterFactory();  Map<String,Expression> options=contrastEnhancement.getOptions();  options.put("algorithm",ff.literal("StretchToMinimumMaximum"));  options.put("minValue",ff.literal("1"));  options.put("maxValue",ff.literal("5"));  SelectedChannelType channelType=styleFactory.createSelectedChannelType("channel name",contrastEnhancement);  SelectedChannelType[] channels=new SelectedChannelType[3];  channels[0]=channelType;  channels[1]=channelType;  channels[2]=channelType;  ChannelSelection channelSelection=styleFactory.createChannelSelection(channels);  return channelSelection;}  }
class C{  protected void handleSourceTextUnit(ITextUnit textUnit){  if (!textUnit.isTranslatable()) {    return;  }  String name=textUnit.getName();  String sourceContent=textUnit.getSource().toString();  ImportExportNote importExportNote=textUnitUtils.getImportExportNote(textUnit);  tmService.addTMTextUnit(asset.getRepository().getTm().getId(),asset.getId(),name,sourceContent,importExportNote.getSourceComment(),importExportNote.getCreatedDate());}  }
class C{  @Override public boolean equals(Object other){  if (this == other)   return true;  if (!(other instanceof ServerTransaction))   return false;  ServerTransaction t=(ServerTransaction)other;  return (id == t.id && mgr.equals(t.mgr));}  }
class C{  @Override public void textDecl(String version,String encoding,Augmentations augs) throws XNIException {  if (fDocumentHandler != null) {    fDocumentHandler.textDecl(version,encoding,augs);  }}  }
class C{  public GroupsEditQuery messages(Boolean value){  return unsafeParam("messages",value);}  }
class C{  @Override public void actionPerformed(ActionEvent event){  ImportBlastDialog importBlastDialog=(ImportBlastDialog)getParent();  File lastOpenFile;  String name=importBlastDialog.getBlastFileName();  if (name.length() > 0)   lastOpenFile=new File(Basic.replaceFileSuffix(name,".rma6")); else   lastOpenFile=new File(ProgramProperties.getFile(MeganProperties.SAVEFILE),"Untitled.rma6");  File file=ChooseFileDialog.chooseFileToSave(importBlastDialog,lastOpenFile,new RMAFileFilter(),new RMAFileFilter(),event,"Save MEGAN file",".rma6");  if (file != null) {    ProgramProperties.put(MeganProperties.SAVEFILE,file);    importBlastDialog.setMeganFileName(file.getPath());    importBlastDialog.getMeganFileNameField().setText(file.getPath());  }}  }
class C{  public StreamingStatistics(){  this.secondMoment=new SecondMoment();  this.maxImpl=new Max();  this.minImpl=new Min();  this.sumImpl=new Sum();  this.sumOfSquaresImpl=new SumOfSquares();  this.sumOfLogsImpl=new SumOfLogs();  this.meanImpl=new Mean(this.secondMoment);  this.varianceImpl=new Variance(this.secondMoment);  this.geoMeanImpl=new GeometricMean(this.sumOfLogsImpl);  this.populationVariance=new Variance(false,this.secondMoment);}  }
class C{  private void drawSun(Canvas canvas){  final Matrix matrix=mMatrix;  matrix.reset();  float dragPercent=Math.min(1f,Math.abs(mPercent));  final float offsetX=isRefreshing ? mScreenWidth / 2 * (2 - dragPercent) - mSunWidth / 2 : (mScreenWidth * dragPercent - mSunWidth) / 2;  final float offsetY=totalDistance * func(dragPercent);  matrix.preRotate(mSunRotateAngle == 0.0f ? (360 * dragPercent) : mSunRotateAngle,mSunWidth / 2,mSunHeight / 2);  matrix.postTranslate(offsetX,offsetY);  canvas.drawBitmap(mSun,matrix,null);}  }
class C{  static public void apply(String fileName,Document doc,String[] cNames,boolean tabSeparator,long multiplier) throws IOException {  String separator=(tabSeparator ? "\t" : ",");  System.err.println("Importing summary of" + Basic.toString(cNames,", ") + " assignments from CSV file");  System.err.println("Specified line format: classname" + separator + "count{"+ separator+ "count"+ separator+ "count...}");  DataTable table=doc.getDataTable();  table.clear();  table.setCreator(ProgramProperties.getProgramName());  table.setCreationDate((new Date()).toString());  table.setAlgorithm(ClassificationType.Taxonomy.toString(),"Summary");  doc.getActiveViewers().clear();  doc.getActiveViewers().addAll(Arrays.asList(cNames));  IdParser[] idParsers=new IdParser[cNames.length];  int taxonomyIndex=-1;  for (int i=0; i < cNames.length; i++) {    String cName=cNames[i];    idParsers[i]=ClassificationManager.get(cName,true).getIdMapper().createIdParser();    if (!cName.equals(Classification.Taxonomy)) {      ClassificationManager.ensureTreeIsLoaded(cName);      doc.getActiveViewers().add(cName);    } else {      taxonomyIndex=i;    }    idParsers[i].setUseTextParsing(true);  }  String[] names=null;  final Map<Integer,Integer[]>[] class2counts=new HashMap[cNames.length];  for (int i=0; i < class2counts.length; i++) {    class2counts[i]=new HashMap<>();  }  Integer[][] total=new Integer[cNames.length][];  int[] add=null;  int numberOfColumns=-1;  int numberOfErrors=0;  boolean first=true;  int numberOfLines=0;  try (FileInputIterator it=new FileInputIterator(fileName)){    while (it.hasNext()) {      numberOfLines++;      String aLine=it.next().trim();      if (aLine.length() == 0 || (!first && aLine.startsWith("#")))       continue;      try {        String[] tokens=aLine.split(separator);        if (numberOfColumns == -1) {          numberOfColumns=tokens.length;        } else         if (tokens.length != numberOfColumns)         throw new IOException("Line " + it.getLineNumber() + ": incorrect number of columns, expected "+ numberOfColumns+ ", got: "+ tokens.length+ " ("+ aLine+ ")");        if (first) {          first=false;          boolean headerLinePresent=false;          if (tokens.length < 2)           throw new IOException("Line " + it.getLineNumber() + ": incorrect number of columns, expected at least 2, got: "+ tokens.length+ " ("+ aLine+ ")");          if (tokens[0].startsWith("#"))           tokens[0]=tokens[0].substring(1).trim();          if (tokens[0].equalsIgnoreCase("name") || tokens[0].equalsIgnoreCase("names") || tokens[0].equalsIgnoreCase("samples")|| tokens[0].equalsIgnoreCase("SampleID")|| tokens[0].equalsIgnoreCase(SampleAttributeTable.SAMPLE_ID)|| tokens[0].equalsIgnoreCase("Dataset")|| tokens[0].equalsIgnoreCase("Datasets")) {            names=new String[tokens.length - 1];            System.arraycopy(tokens,1,names,0,names.length);            table.setSamples(names,null,null,null);            headerLinePresent=true;          } else           if (tokens.length == 2) {            names=new String[]{Basic.getFileBaseName((new File(fileName)).getName())};          } else {            names=new String[tokens.length - 1];            for (int i=0; i < names.length; i++)             names[i]="Sample" + (i + 1);          }          for (int i=0; i < total.length; i++) {            total[i]=newZeroedIntegerArray(names.length);          }          if (headerLinePresent)           continue;        }        if (add == null)         add=new int[names.length];        for (int i=1; i < tokens.length; i++) {          String number=tokens[i].trim();          if (number.length() == 0)           add[i - 1]=0; else           if (Basic.isInteger(number))           add[i - 1]=(int)(multiplier * Integer.parseInt(number)); else           add[i - 1]=(int)(multiplier * Double.parseDouble(number));        }        boolean found=false;        for (int i=0; !found && i < idParsers.length; i++) {          int id;          if (i == taxonomyIndex && Basic.isInteger(tokens[0]))           id=Basic.parseInt(tokens[1]); else           id=idParsers[i].getIdFromHeaderLine(tokens[0]);          if (id != 0) {            Integer[] counts=getOrCreate(class2counts[i],id,names.length);            addToArray(counts,add);            addToArray(total[i],add);            found=true;          }        }        if (!found) {          System.err.println("Unrecognized name: " + tokens[0]);          for (int i=0; i < idParsers.length; i++) {            Integer[] counts=getOrCreate(class2counts[i],IdMapper.UNASSIGNED_ID,names.length);            addToArray(counts,add);            addToArray(total[i],add);          }        }      } catch (      Exception ex) {        System.err.println("Error: " + ex + ", skipping");        numberOfErrors++;      }    }  }   Integer[] sizes=new Integer[names.length];  System.arraycopy(total[taxonomyIndex],0,sizes,0,sizes.length);  table.setSamples(names,null,sizes,null);  for (int i=0; i < cNames.length; i++) {    table.getClassification2Class2Counts().put(cNames[i],class2counts[i]);  }  long totalReads=0;  for (  Integer size : sizes) {    totalReads+=size;  }  table.setTotalReads(totalReads);  doc.setNumberReads(totalReads);  System.err.println("Number of lines read: " + numberOfLines);  if (numberOfErrors > 0)   NotificationsInSwing.showWarning(MainViewer.getLastActiveFrame(),"Number of lines skipped during import: " + numberOfErrors);  for (int i=0; i < cNames.length; i++) {    System.err.println("Different " + (cNames[i].length() <= 4 ? cNames[i] : cNames[i].substring(0,3) + ".") + " classes identified: "+ class2counts[i].size());  }  System.err.println("done (" + totalReads + " reads)");}  }
class C{  public GroupsGetInvitesQueryWithExtended offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_ROOM_PASSWORD_CHANGED(String value0){  return new SM_SYSTEM_MESSAGE(1300866,value0);}  }
class C{  protected boolean isAjax(){  String request=this.getHeader("X-Requested-With");  if (request != null && request.equals("XMLHttpRequest")) {    return true;  }  String type=this.getHeader("Content-Type");  if (type != null && type.contains("application/json")) {    return true;  }  String output=this.getString("output");  if (X.isSame("json",output)) {    return true;  }  output=this.getHeader("output");  if (X.isSame("json",output)) {    return true;  }  return false;}  }
class C{  public BigReal(long val){  d=new BigDecimal(val);}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length == 0 && System.getProperty("user.name").equals("huson")) {    args=new String[]{"-i","/Users/huson/data/michael/adam/PF04563_meta.out","-o","/Users/huson/data/michael/adam/PF04563_meta.blastx","-r","/Users/huson/data/michael/input/SRR172902-rpoB.fasta"};    args=new String[]{"-i","/Users/huson/data/michael/adam/next2/880_rpoB_sequences_min_1000_AAs.out","-o","/Users/huson/data/michael/adam/next2/880_rpoB_sequences_min_1000_AAs.blastx","-r","/Users/huson/data/michael/adam/next2/SRR172902-rpoB.fasta"};    args=new String[]{"-i","/Users/huson/data/michael/adam/next/orthodb_EOG6M9DS6_bacteria_all.out","-o","/Users/huson/data/michael/adam/next/orthodb_EOG6M9DS6_bacteria_all.blastx","-r","/Users/huson/data/michael/adam/next/SRR172902-rpoB.fasta"};    args=new String[]{"-i","/Users/huson/data/michael/adam/next/33_uniprot_seqs_with_specific_RNA_pol_Rpb2_arch.out","-o","/Users/huson/data/michael/adam/next/33_uniprot_seqs_with_specific_RNA_pol_Rpb2_arch.blastx","-r","/Users/huson/data/michael/adam/next/SRR172902-rpoB.fasta"};    args=new String[]{"-i","/Users/huson/data/michael/adam/next3/SRR172902.out","-o","/Users/huson/data/michael/adam/next3/SRR172902.blastx","-r","/Users/huson/data/hmp-mock/input-wgs/SRR172902.fastq.gz"};    args=new String[]{"-i","/Users/huson/data/michael/adam/next4/rpoB_reference_sequences_malt_matches.out","-o","/Users/huson/data/michael/adam/next4/rpoB_reference_sequences_malt_matches.blastx","-r","/Users/huson/data/michael/adam/next/SRR172902-rpoB.fasta"};    args=new String[]{"-i","/Users/huson/data/michael/adam/next5/rpoB_reference_sequences_SRR172902.out","-o","/Users/huson/data/michael/adam/next5/rpoB_reference_sequences_SRR172902.blastx","-r","/Users/huson/data/hmp-mock/input-wgs/SRR172902.fastq.gz"};  }  try {    ProgramProperties.setProgramName("HMM2BlastX");    ProgramProperties.setProgramVersion(megan.main.Version.SHORT_DESCRIPTION);    long start=System.currentTimeMillis();    (new HMM2Blastx()).run(args);    System.err.println("Time: " + ((System.currentTimeMillis() - start) / 1000) + "s");    System.exit(0);  } catch (  Exception ex) {    Basic.caught(ex);    System.exit(1);  }}  }
class C{  @Override public void onLoadHandler(Item item){  if (item.getItemTemplate().isKinah()) {    kinahItem=item;  } else {    itemStorage.putItem(item);  }}  }
class C{  public boolean has(String key){  return this.map.containsKey(key);}  }
class C{  public AudioDestination(boolean isInRam) throws IOException {  this.ram=isInRam;  if (ram) {    os=new ByteArrayOutputStream();    f=null;  } else {    f=MaryUtils.createSelfDeletingTempFile(3600);    os=new FileOutputStream(f);  }}  }
class C{  public void hide(boolean animate){  hide(animate,fadeOut);}  }
class C{  public void addTaintPropagationHandler(TaintPropagationHandler handler){  if (this.taintPropagationHandlers == null)   this.taintPropagationHandlers=new HashSet<>();  this.taintPropagationHandlers.add(handler);}  }
class C{  public SpellingProblemCollector(IAnnotationModel annotationModel){  fAnnotationModel=annotationModel;}  }
class C{  public static double log10(final double x){  final double hiPrec[]=new double[2];  final double lores=log(x,hiPrec);  if (Double.isInfinite(lores)) {    return lores;  }  final double tmp=hiPrec[0] * HEX_40000000;  final double lna=hiPrec[0] + tmp - tmp;  final double lnb=hiPrec[0] - lna + hiPrec[1];  final double rln10a=0.4342944622039795;  final double rln10b=1.9699272335463627E-8;  return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;}  }
class C{  @Override public void startDocument(XMLLocator locator,String encoding,NamespaceContext namespaceContext,Augmentations augs) throws XNIException {  fLocator=locator;  if (!fDeferNodeExpansion) {    if (fDocumentClassName.equals(DEFAULT_DOCUMENT_CLASS_NAME)) {      fDocument=new DocumentImpl();      fDocumentImpl=(CoreDocumentImpl)fDocument;      fDocumentImpl.setStrictErrorChecking(false);      fDocumentImpl.setInputEncoding(encoding);      fDocumentImpl.setDocumentURI(locator.getExpandedSystemId());    } else     if (fDocumentClassName.equals(PSVI_DOCUMENT_CLASS_NAME)) {      fDocument=new PSVIDocumentImpl();      fDocumentImpl=(CoreDocumentImpl)fDocument;      fStorePSVI=true;      fDocumentImpl.setStrictErrorChecking(false);      fDocumentImpl.setInputEncoding(encoding);      fDocumentImpl.setDocumentURI(locator.getExpandedSystemId());    } else {      try {        ClassLoader cl=ObjectFactory.findClassLoader();        Class documentClass=ObjectFactory.findProviderClass(fDocumentClassName,cl,true);        fDocument=(Document)documentClass.newInstance();        Class defaultDocClass=ObjectFactory.findProviderClass(CORE_DOCUMENT_CLASS_NAME,cl,true);        if (defaultDocClass.isAssignableFrom(documentClass)) {          fDocumentImpl=(CoreDocumentImpl)fDocument;          Class psviDocClass=ObjectFactory.findProviderClass(PSVI_DOCUMENT_CLASS_NAME,cl,true);          if (psviDocClass.isAssignableFrom(documentClass)) {            fStorePSVI=true;          }          fDocumentImpl.setStrictErrorChecking(false);          fDocumentImpl.setInputEncoding(encoding);          if (locator != null) {            fDocumentImpl.setDocumentURI(locator.getExpandedSystemId());          }        }      } catch (      ClassNotFoundException e) {      }catch (      Exception e) {        throw new RuntimeException(DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"CannotCreateDocumentClass",new Object[]{fDocumentClassName}));      }    }    fCurrentNode=fDocument;  } else {    fDeferredDocumentImpl=new DeferredDocumentImpl(fNamespaceAware);    fDocument=fDeferredDocumentImpl;    fDocumentIndex=fDeferredDocumentImpl.createDeferredDocument();    fDeferredDocumentImpl.setInputEncoding(encoding);    fDeferredDocumentImpl.setDocumentURI(locator.getExpandedSystemId());    fCurrentNodeIndex=fDocumentIndex;  }}  }
class C{  protected PhotosGetCommentsQueryWithExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  public void sendTextMessage(final String messageText,final Destination destination,final Session session) throws JMSException {  MessageProducer messageProducer=session.createProducer(destination);  try {    TextMessage message=session.createTextMessage();    message.setText(messageText);    log.debug("Sending response to DataTagValueRequest");    messageProducer.send(destination,message);  }  finally {    messageProducer.close();  }}  }
class C{  public LogController(){  this.maxLines=defaultMaxLines;}  }
class C{  public void updateState(final boolean done,final boolean current){  mStepDoneIndicator.setVisibility(done ? View.VISIBLE : View.GONE);  mStepNumber.setVisibility(!done ? View.VISIBLE : View.GONE);  colorViewBackground(done ? mStepDoneIndicator : mStepNumber,done || current);  mStepTitle.setTypeface(current ? Typeface.DEFAULT_BOLD : Typeface.DEFAULT);  mStepTitle.setAlpha(done || current ? OPAQUE_ALPHA : INACTIVE_STEP_TITLE_ALPHA);}  }
class C{  public SessionKey(int accountId,int loginOk,int playOk1,int playOk2){  this.accountId=accountId;  this.loginOk=loginOk;  this.playOk1=playOk1;  this.playOk2=playOk2;}  }
class C{  public void runEM(PointList samplePoints) throws CovarianceSingularityException {  double p_old=-Double.MAX_VALUE;  double p=-Double.MAX_VALUE;  int numberIterations=0;synchronized (p_ij) {    getBuffer(components.length,samplePoints.size());    do {      p_old=p;      estimationStep(samplePoints);      maximizationStep(samplePoints);      numberIterations++;      p=getLogLikelihood(samplePoints);      System.out.print("*");    } while (p_old - p < -0.1 && numberIterations < MAX_ITERATIONS);    p_ij=new double[1][1];  }  System.out.println();}  }
class C{  public static boolean isBeginnerSkill(int skillId){  return isBeginnerJob(skillId / 10000) && (skillId % 10000 == 1000 || skillId % 10000 == 1001 || skillId % 10000 == 1002 || skillId % 10000 == 2);}  }
class C{  public Well1024a(int[] seed){  super(K,seed);}  }
class C{  public boolean isApplicable(){  return ((Director)getDir()).getDocument().getSampleSelection().size() > 0;}  }
class C{  public static String encodeParam(String param){  try {    return URLEncoder.encode(param,"UTF-8");  } catch (  UnsupportedEncodingException e) {    e.printStackTrace();    return "";  }}  }
class C{  @Override public void endGeneralEntity(String name,Augmentations augs) throws XNIException {  fEntityRef=false;  if (fDocumentHandler != null) {    fDocumentHandler.endGeneralEntity(name,augs);  }}  }
class C{  public synchronized void cancelled(){  completed=true;  cancelled=true;  notifyAll();}  }
class C{  public boolean forEachEntry(TLongObjectProcedure<V> procedure){  byte[] states=_states;  long[] keys=_set;  V[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  public void shareWeiXin(String liveTitle,String webUrl){  String msgTitle=context.getString(R.string.app_name);  String msgText=liveTitle + context.getString(R.string.share_str_weixin_title);  shareWeiXin(webUrl,msgTitle,msgText);}  }
class C{  public WallSearchQueryWithExtended fields(List<EnumParam> value){  return unsafeParam("fields",value);}  }
class C{  static public int makePosition(int line,int column){  return line << COLUMN_FIELD_BITS | column;}  }
class C{  private void fingerScroll(final float yDiff){  float ratio=mDragRatio;  float yScrolled=yDiff * ratio;  float tmpTargetOffset=yScrolled + mTargetOffset;  if ((tmpTargetOffset > 0 && mTargetOffset < 0) || (tmpTargetOffset < 0 && mTargetOffset > 0)) {    yScrolled=-mTargetOffset;  }  if (mRefreshFinalDragOffset >= mRefreshTriggerOffset && tmpTargetOffset > mRefreshFinalDragOffset) {    yScrolled=mRefreshFinalDragOffset - mTargetOffset;  } else   if (mLoadMoreFinalDragOffset >= mLoadMoreTriggerOffset && -tmpTargetOffset > mLoadMoreFinalDragOffset) {    yScrolled=-mLoadMoreFinalDragOffset - mTargetOffset;  }  if (STATUS.isRefreshStatus(mStatus)) {    mRefreshCallback.onMove(mTargetOffset,false,false);  } else   if (STATUS.isLoadMoreStatus(mStatus)) {    mLoadMoreCallback.onMove(mTargetOffset,false,false);  }  updateScroll(yScrolled);}  }
class C{  public FormField(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);  initAttrs(context,TEXT,R.drawable.ic_slick_user,"Username");}  }
class C{  public static <T extends RealFieldElement<T>>T distance(final Vector3D v1,final FieldVector3D<T> v2){  return v2.distance(v1);}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  public static float calculateAspectRatio(float left,float top,float right,float bottom){  final float width=right - left;  final float height=bottom - top;  final float aspectRatio=width / height;  return aspectRatio;}  }
class C{  public BooleanColumn(){  this(0,10,false);}  }
class C{  void cancelAllSuperToasts(){  removeMessages(Messages.SHOW_NEXT);  removeMessages(Messages.DISPLAY_SUPERTOAST);  removeMessages(Messages.REMOVE_SUPERTOAST);  for (  SuperToast superToast : superToastPriorityQueue) {    if (superToast instanceof SuperActivityToast) {      if (superToast.isShowing()) {        try {          ((SuperActivityToast)superToast).getViewGroup().removeView(superToast.getView());          ((SuperActivityToast)superToast).getViewGroup().invalidate();        } catch (        NullPointerException|IllegalStateException exception) {          Log.e(getClass().getName(),exception.toString());        }      }    } else {      final WindowManager windowManager=(WindowManager)superToast.getContext().getApplicationContext().getSystemService(Context.WINDOW_SERVICE);      if (superToast.isShowing()) {        try {          windowManager.removeView(superToast.getView());        } catch (        NullPointerException|IllegalArgumentException exception) {          Log.e(getClass().getName(),exception.toString());        }      }    }  }  superToastPriorityQueue.clear();}  }
class C{  private float smoothInput(float current,float input){  current=MathUtils.clamp(current,input - 30,input + 30);  return MathUtils.interpolate(current,input,0.8f);}  }
class C{  public float[] generateTransformedValuesLine(ILineDataSet data,float phaseX,float phaseY,int from,int to){  final int count=(int)((to - from) * phaseX + 1) * 2;  if (valuePointsForGenerateTransformedValuesLine.length != count) {    valuePointsForGenerateTransformedValuesLine=new float[count];  }  float[] valuePoints=valuePointsForGenerateTransformedValuesLine;  for (int j=0; j < count; j+=2) {    Entry e=data.getEntryForIndex(j / 2 + from);    if (e != null) {      valuePoints[j]=e.getX();      valuePoints[j + 1]=e.getY() * phaseY;    } else {      valuePoints[j]=0;      valuePoints[j + 1]=0;    }  }  getValueToPixelMatrix().mapPoints(valuePoints);  return valuePoints;}  }
class C{  @Override public Filter createFilter(){  return new TContainsExtended();}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  public OpenMapRealVector(int dimension,int expectedSize,double epsilon){  virtualSize=dimension;  entries=new OpenIntToDoubleHashMap(expectedSize,0.0);  this.epsilon=epsilon;}  }
class C{  @Override public void cleanup(){  fEntityManager.closeReaders();}  }
class C{  public void registerToolbar(ViewGroup toolbarContainer,RTToolbar toolbar){  mToolbars.put(toolbar.getId(),toolbar);  toolbar.setToolbarListener(this);  toolbar.setToolbarContainer(toolbarContainer);  updateToolbarVisibility();}  }
class C{  public static int daysSince1900(Date date){  final Calendar calendar=Calendar.getInstance();  calendar.clear();  calendar.set(1900,0,1);  return daysBetween(calendar.getTime(),date);}  }
class C{  public EqIOException(final int code){  super(code);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("unhide attribute=");  Set<String> attributes=new HashSet<>();  while (!np.peekMatchIgnoreCase(";")) {    String attribute=np.getWordRespectCase();    attributes.add(attribute);  }  np.matchIgnoreCase(";");  if (attributes.size() > 0) {    final SamplesViewer viewer=((SamplesViewer)getViewer());    viewer.getSamplesTable().unhideColumns(attributes.toArray(new String[attributes.size()]));  }}  }
class C{  public VideoEditQuery noComments(Boolean value){  return unsafeParam("no_comments",value);}  }
class C{  public int removeEntry(Context context,IEntryHolder entryHolder,IEntryCacheInfo pEntry,boolean shouldReplicate,boolean origin,EntryRemoveReasonCodes removeReason,boolean disableSAcall) throws SAException {  boolean is_writing_xtn=entryHolder.getXidOriginatedTransaction() != null;  XtnEntry xtnEntry=null;  boolean updated_recent_deletes=false;  if (entryHolder.hasShadow()) {    TypeData typeData=_typeDataMap.get(entryHolder.getServerTypeDesc());    if (pEntry == null)     pEntry=getPEntryByUid(entryHolder.getUID());    consolidateWithShadowEntry(typeData,pEntry,false,false);  }  boolean leaseExpiration=removeReason == EntryRemoveReasonCodes.LEASE_CANCEL || removeReason == EntryRemoveReasonCodes.LEASE_EXPIRED;  try {    if (is_writing_xtn) {      xtnEntry=entryHolder.getXidOriginated();      is_writing_xtn=xtnEntry != null;    }    if (!is_writing_xtn) {      if (useRecentDeletes() && !entryHolder.isTransient() && !(leaseExpiration && isCacheExternalDB())) {        insertToRecentDeletes(entryHolder,requiresEvictionReplicationProtection() ? Long.MAX_VALUE : 0,context.getCommittingXtn());        updated_recent_deletes=true;      }      if (!disableSAcall) {        if (entryHolder.isOffHeapEntry() && isDirectPersistencyEmbeddedtHandlerUsed() && context.isActiveBlobStoreBulk())         context.setForBulkRemove(entryHolder,removeReason);        _storageAdapter.removeEntry(context,entryHolder,origin,leaseExpiration,shouldReplicate);        if (shouldReplicate && !context.isDelayedReplicationForbulkOpUsed())         handleRemoveEntryReplication(context,entryHolder,removeReason);      }    } else {      if (xtnEntry.m_AlreadyPrepared) {        if (useRecentDeletes() && !entryHolder.isTransient() && !(leaseExpiration && isCacheExternalDB())) {          insertToRecentDeletes(entryHolder,requiresEvictionReplicationProtection() ? Long.MAX_VALUE : 0,context.getCommittingXtn());          updated_recent_deletes=true;        }        boolean actualUpdateRedoLog=shouldReplicate;        if (!xtnEntry.m_SingleParticipant) {          if (xtnEntry.getStatus() != XtnStatus.COMMITED && xtnEntry.getStatus() != XtnStatus.COMMITING)           actualUpdateRedoLog=false;        }        if (!disableSAcall) {          if (entryHolder.isOffHeapEntry() && isDirectPersistencyEmbeddedtHandlerUsed() && context.isActiveBlobStoreBulk())           context.setForBulkRemove(entryHolder,removeReason);          _storageAdapter.removeEntry(context,entryHolder,origin,leaseExpiration,actualUpdateRedoLog);          if (actualUpdateRedoLog && !context.isDelayedReplicationForbulkOpUsed())           handleRemoveEntryReplication(context,entryHolder,removeReason);        }      }    }  } catch (  Exception ex) {    if (updated_recent_deletes)     removeFromRecentDeletes(entryHolder);    if (ex instanceof SAException)     throw (SAException)ex;    throw new RuntimeException(ex);  }  RecentDeleteCodes recentDeleteUsage=updated_recent_deletes ? RecentDeleteCodes.INSERT_DUMMY : RecentDeleteCodes.NONE;  if (!entryHolder.isOffHeapEntry() || context.getBlobStoreBulkInfo() == null || (((IOffHeapEntryHolder)entryHolder).getBulkInfo() == null && !context.getBlobStoreBulkInfo().wasEntryRemovedInChunk(entryHolder.getUID())))   removeEntryFromCache(entryHolder,false,true,pEntry,recentDeleteUsage);  if (!context.isSyncReplFromMultipleOperation() && !context.isDisableSyncReplication() && shouldReplicate) {    return _engine.performReplication(context);  }  return 0;}  }
class C{  public static void enableTrafficAlerts(AirMapTrafficListener listener){  getAirMapTrafficService().addListener(listener);  getAirMapTrafficService().connect();}  }
class C{  @Override public void serializeAsOmittedField(Object bean,JsonGenerator jgen,SerializerProvider prov) throws Exception {  if (!jgen.canOmitFields()) {    jgen.writeOmittedField(_name.getValue());  }}  }
class C{  public boolean matches(EventDescriptor template){  if (template == null)   throw new NullPointerException("template is null");  boolean matches=false;  if (template.eventID == null) {    if (template.eventClass == null)     matches=true; else     if (this.eventClass != null)     matches=this.eventClass.equals(template.eventClass);  } else {    if (this.eventID != null)     matches=this.eventID.equals(template.eventID);  }  return (matches);}  }
class C{  public void addHistory(Legion legion,String text,LegionHistoryType legionHistoryType,int tabId,String description){  LegionHistory legionHistory=new LegionHistory(legionHistoryType,text,new Timestamp(System.currentTimeMillis()),tabId,description);  legion.addHistory(legionHistory);  DAOManager.getDAO(LegionDAO.class).saveNewLegionHistory(legion.getLegionId(),legionHistory);  PacketSendUtility.broadcastPacketToLegion(legion,new SM_LEGION_TABS(legion.getLegionHistoryByTabId(tabId),tabId));}  }
class C{  public void recalculateInfluence(){  calculateInfluence();}  }
class C{  private void moveToPrevBlock(){  blk=new BlockId(blk.fileName(),blk.number() + 1);  pg.read(blk);  currentRec=0 + pointerSize;}  }
class C{  public static String ellipsize(String text,int max){  if (textWidth(text) <= max)   return text;  int end=text.lastIndexOf(' ',max - 3);  if (end == -1)   return text.substring(0,max - 3) + "...";  int newEnd=end;  do {    end=newEnd;    newEnd=text.indexOf(' ',end + 1);    if (newEnd == -1)     newEnd=text.length();  } while (textWidth(text.substring(0,newEnd) + "...") < max);  return text.substring(0,end) + "...";}  }
class C{  public static Bucket createBucket(Experiment experiment){  return createBucket(experiment,false);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){}  }
class C{  public static void println(int priority,String tag,String msg){  println(priority,tag,msg,null);}  }
class C{  public void endContentModel() throws XNIException {}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_OTHER_FRIENDLY_DODGE(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1240219,value0,value1);}  }
class C{  public grammaticalityEstimator(String sCorpusDir,int iMinChar,int iMaxChar,int iMinWord,int iMaxWord,int iNeighbourhoodWindow,boolean bFlatDir){  iMinCharNGram=iMinChar;  iMaxCharNGram=iMaxChar;  iMinWordNGram=iMinWord;  iMaxWordNGram=iMaxWord;  DistroDocs=new TreeMap<Integer,DistributionDocument>();  DistroWordDocs=new TreeMap<Integer,DistributionWordDocument>();  StringBuffer sb=new StringBuffer();  DocumentSet ds=new DocumentSet(sCorpusDir,1.0);  ds.createSets(bFlatDir);  Iterator iTexts=ds.getTrainingSet().iterator();  while (iTexts.hasNext()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)iTexts.next();    try {      BufferedReader bf=new BufferedReader(new FileReader(cfeCur.getFileName()));      String sTmp;      while ((sTmp=bf.readLine()) != null)       sb.append(sTmp);      bf.close();    } catch (    FileNotFoundException ex) {      ex.printStackTrace(System.err);    }catch (    IOException ex) {      ex.printStackTrace(System.err);    }    sb.append((char)0);  }  FullTextDataString=sb.toString();  for (int iCnt=iMinCharNGram; iCnt <= iMaxCharNGram; iCnt++) {    DistroDocs.put(iCnt,new DistributionDocument(iNeighbourhoodWindow,iCnt));  }  for (int iCnt=iMinWordNGram; iCnt <= iMaxWordNGram; iCnt++) {    DistroWordDocs.put(iCnt,new DistributionWordDocument(iNeighbourhoodWindow,iCnt));  }}  }
class C{  public void treeCollapsed(TreeExpansionEvent event){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostHealEffect_ME_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200484,skillcaster,skilltarget,skillname);}  }
class C{  public void addToTimeDeadband(final SourceDataTag currentTag,final ValueUpdate update,final SourceDataTagQuality newSDQuality){  if (this.equipmentLogger.isDebugEnabled()) {    this.equipmentLogger.debug(format("addToTimeDeadband - entering addToTimeDeadband(%d)..",currentTag.getId()));  }synchronized (currentTag) {    long tagID=currentTag.getId();    SDTTimeDeadbandScheduler tagScheduler=this.sdtTimeDeadbandSchedulers.get(tagID);    if (tagScheduler == null) {      tagScheduler=createTagScheduler(currentTag);      startSDTtimeDeadbandScheduler(tagScheduler);    } else {      if (tagScheduler.isNewQualityStatus(newSDQuality)) {        tagScheduler.flushAndCancel();        tagScheduler=createTagScheduler(currentTag);        startSDTtimeDeadbandScheduler(tagScheduler);      }    }    this.dynamicTimeDeadbandFilterer.recordTag(currentTag);    if (tagScheduler.isScheduledForSending()) {      this.equipmentLogger.debug("addToTimeDeadband - Sending time deadband filtered value to statistics module " + tagID);      ValueUpdate currentValue=new ValueUpdate(currentTag.getCurrentValue().getValue(),currentTag.getCurrentValue().getValueDescription(),currentTag.getCurrentValue().getTimestamp().getTime());      if (this.dynamicTimeDeadbandFilterer.isDynamicTimeDeadband(currentTag)) {        this.equipmentLogger.debug("Tag filtered through Dynamic time deadband filtering: '" + tagID + "'");        this.equipmentSenderFilterModule.sendToFilterModuleByDynamicTimedeadbandFilterer(currentTag,currentValue,FilterType.TIME_DEADBAND.getNumber());      } else {        this.equipmentLogger.debug("Tag filtered through Static time deadband filtering: '" + tagID + "'");        this.equipmentSenderFilterModule.sendToFilterModule(currentTag,currentValue,FilterType.TIME_DEADBAND.getNumber());      }    }    currentTag.update(update,newSDQuality);    this.equipmentLogger.debug("addToTimeDeadband - scheduling value update due to time-deadband filtering rule");    tagScheduler.scheduleValueForSending();  }  if (this.equipmentLogger.isDebugEnabled()) {    this.equipmentLogger.debug(format("addToTimeDeadband - leaving addToTimeDeadband(%d)",currentTag.getId()));  }}  }
class C{  private void addDependenciesForRequiredKeys(SetMultimap<NewBindingKey,NewDependencyInfo> result,Set<NewBindingKey> requiredKeys){  while (!requiredKeys.isEmpty()) {    NewBindingKey key=Iterables.getFirst(requiredKeys,null);    Preconditions.checkNotNull(key);    requiredKeys.remove(key);    if (result.containsKey(key)) {      continue;    }    TypeName typeName=key.getTypeName();    if (Utils.hasBuiltinBinding(typeName)) {      key=Utils.getElementKeyForBuiltinBinding(key);      requiredKeys.add(key);      continue;    }    if (Utils.isMapWithBuiltinValueType(key)) {      NewBindingKey peeledMapKey=Preconditions.checkNotNull(Utils.peelMapWithBuiltinValue(key));      requiredKeys.add(peeledMapKey);      continue;    }    ClassName className;    if (typeName instanceof ClassName) {      className=(ClassName)typeName;    } else {      Preconditions.checkState(typeName instanceof ParameterizedTypeName,"Expect a %s but get %s",ParameterizedTypeName.class,typeName);      ParameterizedTypeName parameterizedTypeName=(ParameterizedTypeName)typeName;      for (      TypeName parameter : parameterizedTypeName.typeArguments) {        Preconditions.checkState(parameter instanceof ClassName || parameter instanceof ParameterizedTypeName,String.format("Unexpected parameter type %s for type %s.",parameter,typeName));      }      NewDependencyInfo dependencyInfo=Utils.getDependencyInfoByGeneric(result,key);      if (dependencyInfo != null) {        requiredKeys.addAll(dependencyInfo.getDependencies());        continue;      } else {        className=((ParameterizedTypeName)typeName).rawType;      }    }    TypeElement classTypeElement=env.getElementUtils().getTypeElement(Utils.getClassCanonicalName(className));    Preconditions.checkNotNull(classTypeElement,String.format("Class %s not found.",className));    Collection<NewDependencyInfo> dependencies=collectFromCtorInjectedClass(classTypeElement);    if (dependencies == null) {      messager.printMessage(Kind.ERROR,String.format("Binding not found for %s",key));      continue;    }    NewDependencyInfo dependency=Iterables.getOnlyElement(dependencies);    if (typeName instanceof ParameterizedTypeName) {      Map<TypeVariableName,TypeName> parameterMap=Utils.getMapFromTypeVariableToSpecialized((ParameterizedTypeName)typeName,(ParameterizedTypeName)dependency.getDependant().getTypeName());      requiredKeys.addAll(Utils.specializeIfNeeded(dependency.getDependencies(),parameterMap));    } else {      requiredKeys.addAll(dependency.getDependencies());    }    checkOneDependency(result,dependency);    addDependencyInfo(result,dependency);  }}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  public synchronized VisualTree addTree(String group,Tree tree,Predicate filter){  return addTree(group,tree,filter,VisualItem.SCHEMA,VisualItem.SCHEMA);}  }
class C{  public static final SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_DUNGEON_OPENED_FOR_SELF(int worldId){  return new SM_SYSTEM_MESSAGE(1400640,worldId);}  }
class C{  public static void d(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg,throwable);}  }
class C{  public PhotosSearchQuery lat(Float value){  return unsafeParam("lat",value);}  }
class C{  public void sortBy(Comparator<T> comparator){  Collections.sort(data,null);}  }
class C{  public boolean blocksForInput(ConversationContext context){  return true;}  }
class C{  public void actionPerformed(ActionEvent ev){  ClusterViewer viewer=getViewer();  String name=Basic.replaceFileSuffix(((Director)getDir()).getDocument().getMeganFile().getName(),".nex");  File lastOpenFile=new File(name);  String lastDir=ProgramProperties.get(MeganProperties.NETWORK_DIRECTORY,"");  if (lastDir.length() > 0) {    lastOpenFile=new File(lastDir,lastOpenFile.getName());  }  getDir().notifyLockInput();  File file=ChooseFileDialog.chooseFileToSave(viewer.getFrame(),lastOpenFile,new TextFileFilter(),new NexusFileFilter(),ev,"Save as Nexus file",".nexus");  getDir().notifyUnlockInput();  if (file != null) {    execute("export data=distances file='" + file.getPath() + "' replace=true;");    ProgramProperties.put(MeganProperties.NETWORK_DIRECTORY,file.getParent());  }}  }
class C{  public static String encode(byte[] binaryData){  if (binaryData == null) {    return null;  }  int lengthDataBits=binaryData.length * EIGHTBIT;  if (lengthDataBits == 0) {    return "";  }  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  int numberQuartet=fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;  char encodedData[]=null;  encodedData=new char[numberQuartet * 4];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  for (int i=0; i < numberTriplets; i++) {    b1=binaryData[dataIndex++];    b2=binaryData[dataIndex++];    b3=binaryData[dataIndex++];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex++]=lookUpBase64Alphabet[b3 & 0x3f];  }  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex++]=PAD;    encodedData[encodedIndex++]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex++]=PAD;  }  return new String(encodedData);}  }
class C{  private void addFile(String name) throws FileNotFoundException {  Path pathPath=Paths.get(path);  FileTreeNode node=new FileTreeNode(pathPath,name);  this.add(node);  FileHandlerInterface handler=fileHandlerMap.get(ExternalFilenames.getFileExtension(name));  if (handler != null) {    if (handler.populate(inputInterface,treeModel,node)) {      node.isDir=true;    }  }}  }
class C{  public static void addDefaultResource(String name){  ArrayList<Configuration> toReload;synchronized (Configuration.class) {    if (defaultResources.contains(name)) {      return;    }    defaultResources.add(name);    toReload=new ArrayList<>(REGISTRY.size());    toReload.addAll(REGISTRY.keySet());  }  for (  Configuration conf : toReload) {    if (conf.loadDefaults) {      conf.reloadConfiguration();    }  }}  }
class C{  public void configInterceptor(InterceptorLoader interceptorLoader){}  }
class C{  private boolean shouldRenderSymbol(Style style,FeatureTypeStyle ftsToRender,Rule ruleToRender){  if (ruleToRender == null) {    return true;  }  for (  FeatureTypeStyle fts : style.featureTypeStyles()) {    if (fts == ftsToRender) {      for (      Rule rule : fts.rules()) {        if (rule == ruleToRender) {          return true;        }      }    }  }  return false;}  }
class C{  private static String newUniquePath(File location){  if (!location.exists()) {    return location.getAbsolutePath();  }  String name=location.getName();  File directory=location.getParentFile();  int tries=0;  while (true) {    String candidateName=String.format("%s-%02d",name,tries);    File candidateFile=new File(directory,candidateName);    if (!candidateFile.exists()) {      return candidateFile.getAbsolutePath();    }    tries++;  }}  }
class C{  public UnmatchedToken(int line,int position,String token){  this.line=line;  this.position=position;  this.token=token;}  }
class C{  void add() throws RepoException, IOException {  ExcludesFinder visitor=new ExcludesFinder(repo.getGitDir(),destinationFiles);  Files.walkFileTree(repo.getWorkTree(),visitor);  int size=0;  List<String> current=new ArrayList<>();  for (  String path : visitor.excluded) {    current.add(path);    size+=path.length();    if (size > 6 * 1024) {      repo.add().force().files(current).run();      current=new ArrayList<>();      size=0;    }  }  if (!current.isEmpty()) {    repo.add().force().files(current).run();  }  for (  String addBackSubmodule : addBackSubmodules) {    repo.simpleCommand("reset","--","--quiet",addBackSubmodule);    repo.add().force().files(ImmutableList.of(addBackSubmodule)).run();  }}  }
class C{  public void close() throws IOException {  if (io != null) {    try {      io.close();    }  finally {      io=null;    }  }}  }
class C{  public Boolean isAutoSubscribe(){  return autoSubscribe;}  }
class C{  @RequestMapping(method=RequestMethod.POST,value="/api/drops/import") public ImportDropConfig importDrop(@RequestBody ImportDropConfig importDropConfig) throws Exception {  PollableFuture importDropFuture=dropService.importDrop(importDropConfig.getDropId(),importDropConfig.getStatus(),PollableTask.INJECT_CURRENT_TASK);  importDropConfig.setPollableTask(importDropFuture.getPollableTask());  return importDropConfig;}  }
class C{  public static void main(String[] args){  SpringApplication.run(JBotApplication.class,args);}  }
class C{  protected NodeIterator(DirectedGraph graph,boolean showLeafNodes,boolean showDecisionNodes,boolean showDirectedGraphNodes){  this(graph.getRootNode(),showLeafNodes,showDecisionNodes,showDirectedGraphNodes);}  }
class C{  @SafeVarargs public static SimplifiedIntervalList simplifyIntervals(Collection<Interval>... intervals){  Stream<Interval> allIntervals=Stream.empty();  for (  Collection<Interval> intervalCollection : intervals) {    allIntervals=Stream.concat(allIntervals,intervalCollection.stream());  }  return allIntervals.sorted(null).collect(getCollector());}  }
class C{  public void removeEquipment(int pieceIndex){  removeEquipment(pieceIndex,true);}  }
class C{  public boolean hasSequenceParameter(SequenceContextParameters seqParameter,ContextInfo contextInfo){  return hasTemplateParameter(new TemplateParameter(TemplateParameterContext.SEQUENCE,seqParameter.getName()),contextInfo);}  }
class C{  public void testAttachmentEntityEventsStandaloneTask() throws Exception {  if (processEngineConfiguration.getHistoryLevel().isAtLeast(HistoryLevel.ACTIVITY)) {    Task task=null;    try {      task=taskService.newTask();      taskService.saveTask(task);      assertNotNull(task);      Attachment attachment=taskService.createAttachment("test",task.getId(),null,"attachment name","description","http://activiti.org");      assertEquals(2,listener.getEventsReceived().size());      ActivitiEntityEvent event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);      assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());      assertNull(event.getProcessInstanceId());      assertNull(event.getExecutionId());      assertNull(event.getProcessDefinitionId());      Attachment attachmentFromEvent=(Attachment)event.getEntity();      assertEquals(attachment.getId(),attachmentFromEvent.getId());      event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);      assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());      listener.clearEventsReceived();      attachment=taskService.createAttachment("test",task.getId(),null,"attachment name","description",new ByteArrayInputStream("test".getBytes()));      assertEquals(2,listener.getEventsReceived().size());      event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);      assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());      assertNull(event.getProcessInstanceId());      assertNull(event.getExecutionId());      assertNull(event.getProcessDefinitionId());      attachmentFromEvent=(Attachment)event.getEntity();      assertEquals(attachment.getId(),attachmentFromEvent.getId());      event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);      assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());      listener.clearEventsReceived();      attachment=taskService.getAttachment(attachment.getId());      attachment.setDescription("Description");      taskService.saveAttachment(attachment);      assertEquals(1,listener.getEventsReceived().size());      event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);      assertEquals(ActivitiEventType.ENTITY_UPDATED,event.getType());      assertNull(event.getProcessInstanceId());      assertNull(event.getExecutionId());      assertNull(event.getProcessDefinitionId());      attachmentFromEvent=(Attachment)event.getEntity();      assertEquals(attachment.getId(),attachmentFromEvent.getId());      assertEquals("Description",attachmentFromEvent.getDescription());      listener.clearEventsReceived();      taskService.deleteAttachment(attachment.getId());      assertEquals(1,listener.getEventsReceived().size());      event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);      assertEquals(ActivitiEventType.ENTITY_DELETED,event.getType());      assertNull(event.getProcessInstanceId());      assertNull(event.getExecutionId());      assertNull(event.getProcessDefinitionId());      attachmentFromEvent=(Attachment)event.getEntity();      assertEquals(attachment.getId(),attachmentFromEvent.getId());    }  finally {      if (task != null && task.getId() != null) {        taskService.deleteTask(task.getId());        historyService.deleteHistoricTaskInstance(task.getId());      }    }  }}  }
class C{  static public void softmax(float[] scores){  float sum=0;  for (int i=0; i < scores.length; i++) {    scores[i]=(float)FastMath.exp(scores[i]);    sum+=scores[i];  }  for (int i=0; i < scores.length; i++)   scores[i]/=sum;}  }
class C{  public Fraction(double value,int maxDenominator) throws FractionConversionException {  this(value,0,maxDenominator,100);}  }
class C{  public boolean approxEquals(R1Interval y,double maxError){  if (isEmpty()) {    return y.getLength() <= maxError;  }  if (y.isEmpty()) {    return getLength() <= maxError;  }  return Math.abs(y.lo() - lo()) + Math.abs(y.hi() - hi()) <= maxError;}  }
class C{  public static double polynomialSquaredDistance(float[] coeffs1,float[] coeffs2){  if (coeffs1 == null || coeffs2 == null)   throw new NullPointerException("Received null argument");  if (coeffs1.length != coeffs2.length)   throw new IllegalArgumentException("Can only compare polynomials with same order");  int order=coeffs1.length - 1;  double[] a=new double[coeffs1.length];  for (int i=0; i < a.length; i++) {    a[i]=coeffs1[order - i] - coeffs2[order - i];  }  return integrateSquared(order,a);}  }
class C{  @Override public void clear(){  rowMap.clear();}  }
class C{  public CannotJoinException(String desc){  super(desc);}  }
class C{  public VideoSearchQuery date(Integer value){  return unsafeParam("date",value);}  }
class C{  protected void notifyModelChanged(EpoxyModel<?> model){  int index=getModelPosition(model);  if (index != -1) {    notifyItemChanged(index);  }}  }
class C{  public WallReportPostQuery reportPost(UserActor actor,int ownerId,int postId){  return new WallReportPostQuery(getClient(),actor,ownerId,postId);}  }
class C{  public void train(Set<String> sFileNames){  Iterator<String> iFile=sFileNames.iterator();  while (iFile.hasNext()) {    String sText=utils.loadFileToString(iFile.next());    train(sText);  }}  }
class C{  public void replaceLineAt(int pos,String newLines) throws BadLocationException {  Element e=getParagraphElement(pos);  replace(e.getStartOffset(),getElementLength(e),newLines,null);}  }
class C{  public String stringValue(){  if (actualValue == null) {    return normalizedValue;  } else {    return actualValue.toString();  }}  }
class C{  private List<View> addView(View view,List<View> cache){  if (cache == null) {    cache=new LinkedList<View>();  }  cache.add(view);  return cache;}  }
class C{  public int computeId(BitSet activeMatches,IReadBlock readBlock){  if (readBlock.getNumberOfMatches() == 0)   return IdMapper.NOHITS_ID;  if (activeMatches.cardinality() > 0) {    boolean hasDisabledMatches=false;    int numberOfAddresses=0;    for (int i=activeMatches.nextSetBit(0); i != -1; i=activeMatches.nextSetBit(i + 1)) {      final IMatchBlock matchBlock=readBlock.getMatchBlock(i);      final int id=matchBlock.getId(cName);      if (id > 0) {        String address=fullTree.getAddress(id);        if (address != null) {          if (numberOfAddresses >= addresses.length) {            String[] tmp=new String[2 * addresses.length];            System.arraycopy(addresses,0,tmp,0,addresses.length);            addresses=tmp;          }          addresses[numberOfAddresses++]=address;        }      } else       hasDisabledMatches=true;    }    if (numberOfAddresses == 0 && hasDisabledMatches) {      for (int i=activeMatches.nextSetBit(0); i != -1; i=activeMatches.nextSetBit(i + 1)) {        final IMatchBlock matchBlock=readBlock.getMatchBlock(i);        final int id=matchBlock.getId(cName);        if (id > 0) {          String address=fullTree.getAddress(id);          if (address != null) {            if (numberOfAddresses >= addresses.length) {              String[] tmp=new String[2 * addresses.length];              System.arraycopy(addresses,0,tmp,0,addresses.length);              addresses=tmp;            }            addresses[numberOfAddresses++]=address;          }        }      }    }    if (numberOfAddresses > 0) {      final String address=LCAAddressing.getCommonPrefix(addresses,numberOfAddresses,true);      final int id=fullTree.getAddress2Id(address);      if (id > 0) {        return id;      }    }  }  return IdMapper.UNASSIGNED_ID;}  }
class C{  public DivExpr newDivExpr(Value op1,Value op2){  return new JDivExpr(op1,op2);}  }
class C{  public synchronized byte[] lookupAudio(String inputtype,String locale,String voice,String outputparams,String style,String effects,String inputtext) throws SQLException {  if (inputtype == null || locale == null || voice == null || inputtext == null) {    throw new NullPointerException("Null argument");  }  byte[] audio=null;  String query="Select outputaudio FROM marycache WHERE inputtype = '" + inputtype + "' AND outputtype = 'AUDIO' AND locale = '"+ locale+ "' AND voice = '"+ voice+ "' AND outputparams = '"+ outputparams+ "' AND style = '"+ style+ "' AND effects = '"+ effects+ "' AND inputtext = ?";  PreparedStatement st=connection.prepareStatement(query);  st.setString(1,inputtext);  ResultSet results=st.executeQuery();  if (results.next()) {    audio=results.getBytes(1);  }  return audio;}  }
class C{  public boolean isMap(){  return card == Cardinality.REPEATED && kind == Type.TYPE_MESSAGE && messageType.getProto().getOptions().getMapEntry();}  }
class C{  public R reduce(List<AsyncResult<T>> results) throws Exception {  return reducer.reduce(results);}  }
class C{  protected void failed(Throwable e,Description description){}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static Pattern convertPerlRegexToPattern(@Nonnull final String regex){  return convertPerlRegexToPattern(regex,false);}  }
class C{  public File mapUriToFile(Uri uri){  assertBackgroundThread();switch (getUriType(uri)) {case URI_TYPE_FILE:    return new File(uri.getPath());case URI_TYPE_CONTENT:{    Cursor cursor=contentResolver.query(uri,LOCAL_FILE_PROJECTION,null,null,null);    if (cursor != null) {      try {        int columnIndex=cursor.getColumnIndex(LOCAL_FILE_PROJECTION[0]);        if (columnIndex != -1 && cursor.getCount() > 0) {          cursor.moveToFirst();          String realPath=cursor.getString(columnIndex);          if (realPath != null) {            return new File(realPath);          }        }      }  finally {        cursor.close();      }    }  }}return null;}  }
class C{  public FriendsGetRequestsQuery(VkApiClient client,UserActor actor){  super(client,"friends.getRequests",GetRequestsResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public void recover(LogRecovery client) throws LogException {  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(MultiLogManager.class.getName(),"recover",client);  }  if (persistenceLogger.isLoggable(Level.FINEST)) {    persistenceLogger.log(Level.FINEST,"(ignored) Recovering for: {0}",new Long(cookie));  }  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(MultiLogManager.class.getName(),"recover");  }}  }
class C{  public static String[][] ISO8859_1_ESCAPE(){  return ISO8859_1_ESCAPE.clone();}  }
class C{  @deprecated public LanguageMatcherData cloneAsThawed(){  try {    LanguageMatcherData result=(LanguageMatcherData)clone();    result.languageScores=this.languageScores.cloneAsThawed();    result.scriptScores=this.scriptScores.cloneAsThawed();    result.regionScores=this.regionScores.cloneAsThawed();    result.frozen=false;    return result;  } catch (  CloneNotSupportedException e) {    throw new IllegalArgumentException(e);  }}  }
class C{  public int hashCode(){  return (int)(value ^ (value >>> 32));}  }
class C{  protected boolean isKidOK(Node parent,Node child){  if (allowGrammarAccess && parent.getNodeType() == Node.DOCUMENT_TYPE_NODE) {    return child.getNodeType() == Node.ELEMENT_NODE;  }  return 0 != (kidOK[parent.getNodeType()] & 1 << child.getNodeType());}  }
class C{  public JsonSlurper(){  this(JsonSortStrategy.SORT_NONE,null);}  }
class C{  public CacheException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void childrenElement(String elementName) throws XNIException {}  }
class C{  public void renderRotationDisc(GL2 gl){  Vector2 c=this.mass.getCenter();  gl.glColor4fv(Preferences.getBodyRotationDiscColor(),0);  double r=this.getRotationDiscRadius();  RenderUtilities.drawCircleFromCenter(gl,r,c.x,c.y,false,false);}  }
class C{  public DetailsAreaConfiguration(String name,boolean closable){  this.name=name;  this.closable=closable;}  }
class C{  public int optInt(String key){  LazyNode token=getOptionalFieldToken(key);  if (token == null)   return 0;  if (token.type == LazyNode.VALUE_NULL)   return 0;  return token.getIntValue(cbuf);}  }
class C{  public static <T>CopyOnWriteArrayList<T> copyOnWriteArrayList(){  return new CopyOnWriteArrayList<T>();}  }
class C{  public WKTTypeComboBoxModel(List<WKTType> wktTypeDataList){  this.wktTypeList=wktTypeDataList;}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public Vector2f subtract(Vector2f vec){  return subtract(vec,null);}  }
class C{  public PageLink(int page,String label,String url){  this.page=page;  if (url != null) {    StringBuilder sb=new StringBuilder("<a ").append("id='page_");    if ("<".equals(label)) {      sb.append("prev");    } else     if (">".equals(label)) {      sb.append("next");    } else {      sb.append(label);    }    sb.append("'").append(" href='").append(url).append("'>").append(label).append("</a>").toString();    this.link=sb.toString();  } else {    this.label=label;  }}  }
class C{  public void prepareStatement(String sql) throws GenericDataSourceException, GenericEntityException {  this.prepareStatement(sql,false,0,0,-1,-1);}  }
class C{  public void clearAll(){  if (items != null) {    items.clear();  }  if (emptyItems != null) {    emptyItems.clear();  }}  }
class C{  private Uri whichContentStore(){  if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {    return android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI;  } else {    return android.provider.MediaStore.Images.Media.INTERNAL_CONTENT_URI;  }}  }
class C{  public Object[] patch_apply(LinkedList<Patch> patches,String text){  if (patches.isEmpty()) {    return new Object[]{text,new boolean[0]};  }  patches=patch_deepCopy(patches);  String nullPadding=patch_addPadding(patches);  text=nullPadding + text + nullPadding;  patch_splitMax(patches);  int x=0;  int delta=0;  boolean[] results=new boolean[patches.size()];  for (  Patch aPatch : patches) {    int expected_loc=aPatch.start2 + delta;    String text1=diff_text1(aPatch.diffs);    int start_loc;    int end_loc=-1;    if (text1.length() > this.Match_MaxBits) {      start_loc=match_main(text,text1.substring(0,this.Match_MaxBits),expected_loc);      if (start_loc != -1) {        end_loc=match_main(text,text1.substring(text1.length() - this.Match_MaxBits),expected_loc + text1.length() - this.Match_MaxBits);        if (end_loc == -1 || start_loc >= end_loc) {          start_loc=-1;        }      }    } else {      start_loc=match_main(text,text1,expected_loc);    }    if (start_loc == -1) {      results[x]=false;      delta-=aPatch.length2 - aPatch.length1;    } else {      results[x]=true;      delta=start_loc - expected_loc;      String text2;      if (end_loc == -1) {        text2=text.substring(start_loc,Math.min(start_loc + text1.length(),text.length()));      } else {        text2=text.substring(start_loc,Math.min(end_loc + this.Match_MaxBits,text.length()));      }      if (text1.equals(text2)) {        text=text.substring(0,start_loc) + diff_text2(aPatch.diffs) + text.substring(start_loc + text1.length());      } else {        LinkedList<Diff> diffs=diff_main(text1,text2,false);        if (text1.length() > this.Match_MaxBits && diff_levenshtein(diffs) / (float)text1.length() > this.Patch_DeleteThreshold) {          results[x]=false;        } else {          diff_cleanupSemanticLossless(diffs);          int index1=0;          for (          Diff aDiff : aPatch.diffs) {            if (aDiff.operation != Operation.EQUAL) {              int index2=diff_xIndex(diffs,index1);              if (aDiff.operation == Operation.INSERT) {                text=text.substring(0,start_loc + index2) + aDiff.text + text.substring(start_loc + index2);              } else               if (aDiff.operation == Operation.DELETE) {                text=text.substring(0,start_loc + index2) + text.substring(start_loc + diff_xIndex(diffs,index1 + aDiff.text.length()));              }            }            if (aDiff.operation != Operation.DELETE) {              index1+=aDiff.text.length();            }          }        }      }    }    x++;  }  text=text.substring(nullPadding.length(),text.length() - nullPadding.length());  return new Object[]{text,results};}  }
class C{  public void clear(){  for (int i=0; i < lastNumber; ++i)   numberToObj[i]=null;  lastNumber=0;  filledCells=0;  objContainer.clear();}  }
class C{  public static Number parseNumber(final String source,final NumberFormat format,final ParsePosition pos){  final int startIndex=pos.getIndex();  Number number=format.parse(source,pos);  final int endIndex=pos.getIndex();  if (startIndex == endIndex) {    final double[] special={Double.NaN,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY};    for (int i=0; i < special.length; ++i) {      number=parseNumber(source,special[i],pos);      if (number != null) {        break;      }    }  }  return number;}  }
class C{  public static long calculateDifference(Date startDate,Date endDate,DifferenceMode mode){  long[] different=calculateDifference(startDate,endDate);  if (mode.equals(DifferenceMode.Minute)) {    return different[2];  } else   if (mode.equals(DifferenceMode.Hour)) {    return different[1];  } else   if (mode.equals(DifferenceMode.Day)) {    return different[0];  } else {    return different[3];  }}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  @Override public void update(){  for (  UIElement element : elements)   element.update();}  }
class C{  public Well19937a(int[] seed){  super(K,seed);}  }
class C{  static VersionNumber identifyBadaVersion(final String userAgent){  VersionNumber version=VersionNumber.UNKNOWN;  final Pattern pattern=Pattern.compile("Bada/((\\d+)((\\.\\d+)+)?)");  final Matcher m=pattern.matcher(userAgent);  if (m.find()) {    version=parseFirstVersionNumber(m.group(MAJOR_INDEX));  }  return version;}  }
class C{  public FinderException(Throwable cause){  super(cause);}  }
class C{  public void incThresholdClearedCount(){  clearedCount++;}  }
class C{  private void check(boolean includeIntercept){  final int sets=2;  final ISAACRandom rand=new ISAACRandom(10L);  final SimpleRegression whole=new SimpleRegression(includeIntercept);  final SimpleRegression parts=new SimpleRegression(includeIntercept);  for (int s=0; s < sets; s++) {    final double coef=rand.nextDouble();    final SimpleRegression sub=new SimpleRegression(includeIntercept);    for (int i=0; i < 5; i++) {      final double x=rand.nextDouble();      final double y=x * coef + rand.nextDouble();      sub.addData(x,y);      whole.addData(x,y);    }    parts.append(sub);    Assert.assertTrue(equals(parts,whole,1E-6));  }}  }
class C{  private void cacheAuthorizationInfoByInternalId(String internalId,AuthorizationInfo authorizationInfo){  Cache<String,AuthorizationInfo> internalAuthorizationCache=getAvailableInternalAuthorizationCache();  if (internalAuthorizationCache != null) {    internalAuthorizationCache.put(internalId,authorizationInfo);  }}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately("copy what=clusterViewer;");}  }
class C{  private static Pattern makePatternFromWildcard(String pattern){  StringBuilder regexp=new StringBuilder();  for (int i=0, len=pattern.length(); i < len; i++) {    char c=pattern.charAt(i);switch (c) {case '*':      int toIncrement=0;    if (len > i + 1 && pattern.charAt(i + 1) == '*') {      toIncrement=1;      if (len > i + 2 && pattern.charAt(i + 2) == '/') {        toIncrement=2;      } else       if (len == i + 2 && i > 0 && pattern.charAt(i - 1) == '/') {        regexp.delete(regexp.length() - 1,regexp.length());      }    }  regexp.append(".*");i+=toIncrement;break;case '?':regexp.append('.');break;case '^':case '$':case '|':case '+':case '{':case '}':case '[':case ']':case '\\':case '.':regexp.append('\\');regexp.append(c);break;default :regexp.append(c);break;}}return Pattern.compile(regexp.toString());}  }
class C{  public void Notify(Object oSender,Object oParams){  double dVar=((Double)oParams).doubleValue();  long lLeft=(long)((1.0 - dVar) * (double)(new Date().getTime() - dStart.getTime()) / dVar);  String sLeft;  if (((int)(dVar * 10000) % 5) == 0) {    if (dVar < 0.0001)     sLeft="Calculating remaining time..."; else     sLeft=String.format("%35s",gr.demokritos.iit.jinsect.utils.millisToMinSecString(lLeft));    System.err.print(String.format("%5.3f%%",((Double)oParams).doubleValue() * 100.0) + " complete..." + sLeft+ "\r");  }}  }
class C{  private void add(Diphone diphone){  diphoneMap.put(diphone.getName(),diphone);  if (defaultDiphone == null) {    defaultDiphone=diphone;  }}  }
class C{  public static int copy(InputStream in,OutputStream out) throws IOException {  return copy(in,out,true);}  }
class C{  public void update(Vector2 mousePosition){synchronized (this.mousePosition) {    if (this.mousePosition.distanceSquared(mousePosition) <= Epsilon.E)     return;    this.mousePosition=mousePosition.copy();    if (!this.updateRequired) {      this.updateRequired=true;      this.updateEDT();    }  }}  }
class C{  public void java_lang_Class_getInterfaces(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassObject());}  }
class C{  public static ToolbarTapTarget forToolbarNavigationIcon(android.widget.Toolbar toolbar,CharSequence title,@Nullable CharSequence description){  return new ToolbarTapTarget(toolbar,true,title,description);}  }
class C{  public WallSearchQueryWithExtended query(String value){  return unsafeParam("query",value);}  }
class C{  @Override public void endDocument(Augmentations augs) throws XNIException {}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  this(AccountManager.get(context),account,authTokenType,notifyAuthFailure);}  }
class C{  @Override public RegressionResults regress(int[] variablesToInclude) throws MathIllegalArgumentException {  if (variablesToInclude == null || variablesToInclude.length == 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED);  }  if (variablesToInclude.length > 2 || (variablesToInclude.length > 1 && !hasIntercept)) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.ARRAY_SIZE_EXCEEDS_MAX_VARIABLES,(variablesToInclude.length > 1 && !hasIntercept) ? 1 : 2);  }  if (hasIntercept) {    if (variablesToInclude.length == 2) {      if (variablesToInclude[0] == 1) {        throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_INCREASING_SEQUENCE);      } else       if (variablesToInclude[0] != 0) {        throw new MathIllegalArgumentException(LocalizedCoreFormats.OUT_OF_RANGE_SIMPLE,variablesToInclude[0],0,1);      }      if (variablesToInclude[1] != 1) {        throw new MathIllegalArgumentException(LocalizedCoreFormats.OUT_OF_RANGE_SIMPLE,variablesToInclude[0],0,1);      }      return regress();    } else {      if (variablesToInclude[0] != 1 && variablesToInclude[0] != 0) {        throw new MathIllegalArgumentException(LocalizedCoreFormats.OUT_OF_RANGE_SIMPLE,variablesToInclude[0],0,1);      }      final double _mean=sumY * sumY / n;      final double _syy=sumYY + _mean;      if (variablesToInclude[0] == 0) {        final double[] vcv=new double[]{sumYY / (((n - 1) * n))};        final double[] params=new double[]{ybar};        return new RegressionResults(params,new double[][]{vcv},true,n,1,sumY,_syy + _mean,sumYY,true,false);      } else       if (variablesToInclude[0] == 1) {        final double _sxx=sumXX + sumX * sumX / n;        final double _sxy=sumXY + sumX * sumY / n;        final double _sse=FastMath.max(0d,_syy - _sxy * _sxy / _sxx);        final double _mse=_sse / ((n - 1));        if (!Double.isNaN(_sxx)) {          final double[] vcv=new double[]{_mse / _sxx};          final double[] params=new double[]{_sxy / _sxx};          return new RegressionResults(params,new double[][]{vcv},true,n,1,sumY,_syy,_sse,false,false);        } else {          final double[] vcv=new double[]{Double.NaN};          final double[] params=new double[]{Double.NaN};          return new RegressionResults(params,new double[][]{vcv},true,n,1,Double.NaN,Double.NaN,Double.NaN,false,false);        }      }    }  } else {    if (variablesToInclude[0] != 0) {      throw new MathIllegalArgumentException(LocalizedCoreFormats.OUT_OF_RANGE_SIMPLE,variablesToInclude[0],0,0);    }    return regress();  }  return null;}  }
class C{  private String linePrinter(List<TextRead> textReads,boolean bs,boolean noFormat,boolean withReadName) throws IOException {  StringBuilder sb=new StringBuilder();  int curPos=0;  for (  TextRead tr : textReads) {    sb.append(StringUtils.repeat(" ",(tr.getTextStart() - 1) - curPos));    String printableRead=tr.getPrintableTextRead(bs,noFormat,withReadName);    sb.append(printableRead);    curPos=tr.getTextEnd();  }  return sb.toString();}  }
class C{  public static long[] calculateDifference(Date startDate,Date endDate){  return calculateDifference(endDate.getTime() - startDate.getTime());}  }
class C{  public UpgradePatchRetry(Context context){  this.context=context;  retryInfoFile=new File(SharePatchFileUtil.getPatchDirectory(context),RETRY_INFO_NAME);  tempPatchFile=new File(SharePatchFileUtil.getPatchDirectory(context),TEMP_PATCH_NAME);}  }
class C{  public boolean hasProcessingHint(ProcessingHint hint){  return this.processingHints.contains(hint);}  }
class C{  public void addCachedValue(@NotNull String value,@NotNull TextRange range){  addCachedValue(new Value(value,new Location(myCurrentFile,range)));}  }
class C{  public static Integer stringToInteger(String val){  return Integer.valueOf(trim(val));}  }
class C{  public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public void add(Iterator<IEntryPacket> iterator){  if (iterator == null)   return;  if (_iterator == null)   _iterator=iterator;  _listOfIterators.add(iterator);}  }
class C{  @Override public boolean isEnabled(){  if (wktPanel != null) {    return wktPanel.isEnabled();  }  return false;}  }
class C{  public boolean isApplicable(){  ViewerBase viewer=(ViewerBase)getViewer();  return viewer.getGraph().getNumberOfNodes() > 0;}  }
class C{  public UsersGetSubscriptionsQuery(VkApiClient client,UserActor actor){  super(client,"users.getSubscriptions",GetSubscriptionsResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  @Override public void mark(int readAheadLimit) throws IOException {  throw new IOException(fFormatter.formatMessage(fLocale,"OperationNotSupported",new Object[]{"mark()","UTF-16"}));}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  if (sharedGroupLog == null) {    throw new InvalidObjectException("null shared group log");  }  if (host == null) {    throw new InvalidObjectException("null activation host name");  }  if (port <= 0) {    throw new InvalidObjectException("invalid activation port value: " + port);  }  innerProxyPreparer=null;}  }
class C{  public DIPHardwareAddressImpl(final String pItemName) throws ConfigurationException {  this(pItemName,null,-1);}  }
class C{  protected void processEventSupportedReport(SerialMessage serialMessage,int offset,int endpoint) throws ZWaveSerialMessageException {  int notificationType=serialMessage.getMessagePayloadByte(offset + 1);  int numBytes=serialMessage.getMessagePayloadByte(offset + 2) & 0x1f;  List<Integer> types=new ArrayList<>();  for (int i=0; i < numBytes; ++i) {    for (int bit=0; bit < 8; ++bit) {      if (((serialMessage.getMessagePayloadByte(offset + i + 3)) & (1 << bit)) == 0) {        continue;      }      int index=(i << 3) + bit;      types.add(index);      getAlarm(notificationType).getReportedEvents().add(index);    }  }  logger.debug("NODE {}: AlarmType: {} reported events -> {}",getNode().getNodeId(),AlarmType.getAlarmType(notificationType),types);  eventsSupportedInitialised=true;}  }
class C{  private <T>T send(String method,TypeReference<T> responseType,@Nullable Object entity){  try {    InputStream responseStream=entity == null ? builder().method(method,InputStream.class) : builder().method(method,InputStream.class,entity);    return EntityHelper.getEntity(responseStream,responseType);  } catch (  UniformInterfaceException e) {    throw asEmoClientException(e);  }}  }
class C{  public void outputRes(){  for (int i=0; i < disks; i++) {    System.out.printf("idata:%d:  ",i);    System.out.println(idata.get(i));  }  System.out.print("odata:0:  ");  System.out.println(odata.get(0));  System.out.print("odata:1:  ");  System.out.println(odata.get(1));}  }
class C{  public void testWithScore2() throws Exception {  deleteAllDocs();  send("addDocument","{fields: {text: 'the wind is howling like this swirling storm inside', id: 0, boost: 1.0}}");  send("addDocument","{fields: {text: 'I am one with the wind and sky', id: 1, boost: 2.0}}");  send("search","{queryText: wind, sort: {fields: [{field: scoreboost, reverse: true}]}, retrieveFields: [id, scoreboost, logboost]}");  assertEquals(2,getInt("totalHits"));  assertEquals(1,getInt("hits[0].fields.id"));  assertEquals(0,getInt("hits[1].fields.id"));  assertEquals(0.861380339f,getFloat("hits[0].fields.scoreboost"),.0001f);  assertEquals(0.16823316f,getFloat("hits[1].fields.scoreboost"),.0001f);  assertEquals(.6931f,getFloat("hits[0].fields.logboost"),.0001f);  assertEquals(0.0f,getFloat("hits[1].fields.logboost"),.0001f);}  }
class C{  public Builder zoomControl(Boolean zoomControl){  this.zoomControl=zoomControl;  return this;}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  private static String keyForVersion(String name){  return "service_version_" + name;}  }
class C{  private static String trimRight(@Nonnull final String text){  return text.replaceAll("\\s+$","");}  }
class C{  public void configureForRecentlyClosedTabs(boolean isExpanded){  mDeviceIcon.setVisibility(View.VISIBLE);  mDeviceIcon.setImageResource(R.drawable.recent_recently_closed);  mDeviceLabel.setText(R.string.recently_closed);  setTimeLabelVisibility(View.GONE);  configureExpandedCollapsed(isExpanded);}  }
class C{  public void deactivate(){  if (!inSelection) {    inSelection=true;    try {      chartSelection.clearSelectionClasses();      this.repaint();    }  finally {      inSelection=false;    }  }}  }
class C{  private Map<String,List<ChartObject>> assembleWidgetData(List<ChartObject> input){  if (input.isEmpty())   return new HashMap<>();  input.stream().forEach(null);  Map<String,List<ChartObject>> result=new HashMap<>();  result.put(RESULT,input);  return result;}  }
class C{  public Builder delayBeforeLoading(int delayInMillis){  this.delayBeforeLoading=delayInMillis;  return this;}  }
class C{  public Builder stdevColumns(String... columns){  return add(ReduceOp.Stdev,columns);}  }
class C{  public void paintReference(Graphics g0){  Graphics2D g=(Graphics2D)g0;  Rectangle rec=getVisibleRect();  g.setColor(Color.WHITE);  g.fillRect(0,0,getWidth(),getHeight());  g.setColor(Color.BLACK);  g.setBackground(Color.WHITE);  g.setFont(sequenceFont);  final Lane referenceSequence=alignment.getReference();  if (alignment.getReference() != null) {    final GapColumnContractor gapColumnContractor=getAlignment().getGapColumnContractor();    int minVisibleCol=(int)Math.max(0,(rec.getX() / cellWidth)) + gapColumnContractor.getFirstOriginalColumn();    int maxVisibleCol=(int)Math.min(gapColumnContractor.getLastOriginalColumn() - 1,(rec.getX() + rec.getWidth()) / cellWidth);    if (minVisibleCol - 3 > 0)     minVisibleCol-=3;    if ((!alignment.getReferenceType().equals(Alignment.PROTEIN) && cellWidth < 1) || cellWidth < 0.5) {      final Lane lane=alignment.getReference();      int firstLayoutCol=lane.getFirstNonGapPosition();      Integer[] jumpCols=gapColumnContractor.getJumpPositionsRelativeToOriginalColumns().toArray(new Integer[gapColumnContractor.getJumpPositionsRelativeToOriginalColumns().size()]);      if (jumpCols.length > 0) {        int jc=0;        int jumped=0;        while (jc < jumpCols.length && jumpCols[jc] <= firstLayoutCol) {          jumped+=gapColumnContractor.getJumpBeforeOriginalColumn(jumpCols[jc]);          jc++;        }        firstLayoutCol-=jumped;      }      int lastLayoutCol=lane.getLastNonGapPosition();      if (jumpCols.length > 0) {        int jc=0;        int jumped=0;        while (jc < jumpCols.length && jumpCols[jc] < lastLayoutCol) {          jumped+=gapColumnContractor.getJumpBeforeOriginalColumn(jumpCols[jc]);          jc++;        }        lastLayoutCol-=jumped;      }      double firstX=getX(firstLayoutCol);      double lastX=getX(lastLayoutCol);      if (firstX <= maxVisibleCol && lastX >= minVisibleCol) {        g.setColor(Color.GRAY);        g.fill(new Rectangle2D.Double(firstX,0,lastX - firstX,getHeight()));      }    } else {      final Rectangle2D drawRect=new Rectangle2D.Float();      if (isShowColors() && getColorScheme() != null) {        g.setColor(Color.WHITE);        Integer[] jumpCols=gapColumnContractor.getJumpPositionsRelativeToLayoutColumns().toArray(new Integer[gapColumnContractor.getJumpPositionsRelativeToLayoutColumns().size()]);        int jc=0;        int jumped=0;        int colorStreak=0;        for (int layoutCol=minVisibleCol; layoutCol <= maxVisibleCol; layoutCol++) {          while (jc < jumpCols.length && jumpCols[jc] <= layoutCol) {            jumped+=gapColumnContractor.getJumpBeforeLayoutColumn(jumpCols[jc]);            jc++;          }          int trueCol=layoutCol + jumped;          char ch=referenceSequence.charAt(trueCol);          if (ch != ' ') {            g.setColor(getColorScheme().getBackground(ch));            colorStreak=0;          } else {            colorStreak++;            if (colorStreak == 3) {              g.setColor(Color.WHITE);              colorStreak=0;            }          }          if (!g.getColor().equals(Color.WHITE)) {            drawRect.setRect(getX(layoutCol) - 1,0,cellWidth,getSize().height);            g.fill(drawRect);          }        }        g.setColor(Color.BLACK);      }    }    if (cellWidth > 4) {      Integer[] jumpCols=gapColumnContractor.getJumpPositionsRelativeToLayoutColumns().toArray(new Integer[gapColumnContractor.getJumpPositionsRelativeToLayoutColumns().size()]);      int jc=0;      int jumped=0;      for (int layoutCol=minVisibleCol; layoutCol <= maxVisibleCol; layoutCol++) {        while (jc < jumpCols.length && jumpCols[jc] <= layoutCol) {          jumped+=gapColumnContractor.getJumpBeforeLayoutColumn(jumpCols[jc]);          jc++;        }        int trueCol=layoutCol + jumped;        if (trueCol < gapColumnContractor.getLastOriginalColumn()) {          char ch=referenceSequence.charAt(trueCol);          if (isShowColors() && getColorScheme() != null) {            g.setColor(Color.BLACK);          }          g.drawString("" + ch,Math.round(getX(layoutCol)),(int)Math.round(getSize().height - 0.5 * (getSize().height - cellHeight)) - 2);        }      }    }    if (cellWidth > 1) {      SortedSet<Integer> jumpColumns=gapColumnContractor.getJumpPositionsRelativeToLayoutColumns();      for (      Integer col : jumpColumns) {        g.setColor(Color.WHITE);        g.drawLine((int)getX(col),-1,(int)getX(col),getSize().height);        g.setColor(Color.GRAY);        g.drawLine((int)getX(col) - 1,-1,(int)getX(col) - 1,getSize().height);        g.drawLine((int)getX(col) + 1,-1,(int)getX(col) + 1,getSize().height);      }    }  }}  }
class C{  public static Iterator providers(Class service,ClassLoader loader) throws ServiceConfigurationError {  return new LazyIterator(service,loader);}  }
class C{  public void addAll(Iterable<Map.Entry<String,String>> iterable){  if (iterable == null) {    throw new NullPointerException("contexts");  }synchronized (this.contexts) {    for (    Map.Entry<String,String> e : iterable) {      this.contexts.add(Maps.immutableEntry(e.getKey(),e.getValue()));    }  }}  }
class C{  public LocalCacheDetails(){}  }
class C{  @Override public JsonObject convert(IFeatureRenderer renderer){  UniqueValueRenderer uniqueValueRenderer=(UniqueValueRenderer)renderer;  logger.info("UniqueValueRenderer");  String value=null;  String referenceValue=null;  int index=-1;  try {    JsonObject jsonObject=new JsonObject();    JsonObject rendererObject=new JsonObject();    JsonArray fieldArray=new JsonArray();    JsonArray valueArray=new JsonArray();    rendererObject.addProperty(UniqueValueRendererKeys.FIELD_DELIMETER,uniqueValueRenderer.getFieldDelimiter());    rendererObject.addProperty(CommonRendererKeys.ROTATIONFIELD,uniqueValueRenderer.getRotationField());    rendererObject.addProperty(CommonRendererKeys.ROTATIONTYPE,uniqueValueRenderer.getRotationType());    rendererObject.addProperty(CommonRendererKeys.TRANSPARENCY_FIELD,uniqueValueRenderer.getTransparencyField());    rendererObject.addProperty(UniqueValueRendererKeys.FLIPSYMBOLS,uniqueValueRenderer.isFlipSymbols());    rendererObject.addProperty(UniqueValueRendererKeys.REVERSE_UNIQUEVALUES_SORTING,uniqueValueRenderer.isReverseUniqueValuesSorting());    rendererObject.addProperty(CommonRendererKeys.GRADUATED_SYMBOLS,uniqueValueRenderer.isSymbolsAreGraduated());    rendererObject.addProperty(CommonRendererKeys.USES_FILTER,uniqueValueRenderer.isUsesFilter());    rendererObject.addProperty(UniqueValueRendererKeys.USE_DEFAULTSYMBOL,uniqueValueRenderer.isUseDefaultSymbol());    for (int fieldIndex=0; fieldIndex < uniqueValueRenderer.getFieldCount(); fieldIndex++) {      JsonObject jsonValueObject=new JsonObject();      jsonValueObject.addProperty(UniqueValueRendererKeys.FIELD_NAME,uniqueValueRenderer.getField(fieldIndex));      fieldArray.add(jsonValueObject);    }    for (index=0; index < uniqueValueRenderer.getValueCount(); index++) {      JsonObject jsonValueObject=new JsonObject();      try {        value=uniqueValueRenderer.getValue(index);        jsonValueObject.addProperty(UniqueValueRendererKeys.VALUES_VALUE,value);      } catch (      AutomationException e) {      }      try {        jsonValueObject.addProperty(UniqueValueRendererKeys.VALUES_HEADING,uniqueValueRenderer.getHeading(value));      } catch (      AutomationException e) {      }      try {        jsonValueObject.addProperty(UniqueValueRendererKeys.VALUES_LABEL,uniqueValueRenderer.getLabel(value));      } catch (      AutomationException e) {      }      try {        jsonValueObject.addProperty(UniqueValueRendererKeys.VALUES_DESCRIPTION,uniqueValueRenderer.getDescription(value));      } catch (      AutomationException e) {      }      try {        referenceValue=uniqueValueRenderer.getReferenceValue(value);        jsonValueObject.addProperty(UniqueValueRendererKeys.VALUES_REFERENCEVALUE,referenceValue);      } catch (      AutomationException e) {      }      jsonValueObject.add(UniqueValueRendererKeys.VALUES_SYMBOL,ParseLayer.createSymbol(uniqueValueRenderer.getSymbol(value)));      valueArray.add(jsonValueObject);    }    if (uniqueValueRenderer.isUseDefaultSymbol()) {      JsonObject jsonValueObject=new JsonObject();      jsonValueObject.addProperty(UniqueValueRendererKeys.DEFAULTLABEL,uniqueValueRenderer.getDefaultLabel());      jsonValueObject.add(UniqueValueRendererKeys.DEFAULTSYMBOL,ParseLayer.createSymbol(uniqueValueRenderer.getDefaultSymbol()));      valueArray.add(jsonValueObject);    }    rendererObject.add(UniqueValueRendererKeys.VALUES,valueArray);    rendererObject.add(UniqueValueRendererKeys.FIELDS,fieldArray);    jsonObject.add(UniqueValueRendererKeys.RENDERER_UNIQUEVALUE,rendererObject);    return jsonObject;  } catch (  AutomationException e) {    logger.error(String.format("%s %s %d",value,referenceValue,index));    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();    logger.error(e.getMessage());  }  return null;}  }
class C{  public KMeansPlusPlusClusterer(final int k,final int maxIterations,final DistanceMeasure measure,final RandomGenerator random){  this(k,maxIterations,measure,random,EmptyClusterStrategy.LARGEST_VARIANCE);}  }
class C{  private void printHelp(){  HelpFormatter formatter=new HelpFormatter();  formatter.setWidth(140);  formatter.printHelp("QuerierDriver",cliOptions);}  }
class C{  @Override protected void checkFeature(String featureId) throws XMLConfigurationException {  if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {    final int suffixLength=featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();    if (suffixLength == Constants.DYNAMIC_VALIDATION_FEATURE.length() && featureId.endsWith(Constants.DYNAMIC_VALIDATION_FEATURE)) {      return;    }    if (suffixLength == Constants.DEFAULT_ATTRIBUTE_VALUES_FEATURE.length() && featureId.endsWith(Constants.DEFAULT_ATTRIBUTE_VALUES_FEATURE)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,featureId);    }    if (suffixLength == Constants.VALIDATE_CONTENT_MODELS_FEATURE.length() && featureId.endsWith(Constants.VALIDATE_CONTENT_MODELS_FEATURE)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,featureId);    }    if (suffixLength == Constants.LOAD_DTD_GRAMMAR_FEATURE.length() && featureId.endsWith(Constants.LOAD_DTD_GRAMMAR_FEATURE)) {      return;    }    if (suffixLength == Constants.LOAD_EXTERNAL_DTD_FEATURE.length() && featureId.endsWith(Constants.LOAD_EXTERNAL_DTD_FEATURE)) {      return;    }    if (suffixLength == Constants.VALIDATE_DATATYPES_FEATURE.length() && featureId.endsWith(Constants.VALIDATE_DATATYPES_FEATURE)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,featureId);    }    if (suffixLength == Constants.SCHEMA_VALIDATION_FEATURE.length() && featureId.endsWith(Constants.SCHEMA_VALIDATION_FEATURE)) {      return;    }    if (suffixLength == Constants.SCHEMA_FULL_CHECKING.length() && featureId.endsWith(Constants.SCHEMA_FULL_CHECKING)) {      return;    }    if (suffixLength == Constants.SCHEMA_NORMALIZED_VALUE.length() && featureId.endsWith(Constants.SCHEMA_NORMALIZED_VALUE)) {      return;    }    if (suffixLength == Constants.SCHEMA_ELEMENT_DEFAULT.length() && featureId.endsWith(Constants.SCHEMA_ELEMENT_DEFAULT)) {      return;    }    if (suffixLength == Constants.PARSER_SETTINGS.length() && featureId.endsWith(Constants.PARSER_SETTINGS)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,featureId);    }  }  super.checkFeature(featureId);}  }
class C{  private void createTestImage(){  mInitialImage=new byte[3 * mSize / 2];  for (int i=0; i < mSize; i++) {    mInitialImage[i]=(byte)(40 + i % 199);  }  for (int i=mSize; i < 3 * mSize / 2; i+=2) {    mInitialImage[i]=(byte)(40 + i % 200);    mInitialImage[i + 1]=(byte)(40 + (i + 99) % 200);  }}  }
class C{  public static String execute(String command,File cwd){  return SubprocessUttility.execute(command,cwd);}  }
class C{  public boolean removeDataSet(int index){  if (index >= mDataSets.size() || index < 0)   return false;  T set=mDataSets.get(index);  return removeDataSet(set);}  }
class C{  public void init$Children(){  children=new ASTNode[2];  setChild(new Opt(),1);}  }
class C{  public CursorIterator<T> iterate(final Txn<T> txn,final T key,final IteratorType type){  if (SHOULD_CHECK) {    requireNonNull(txn);    txn.checkReady();  }  return new CursorIterator<>(openCursor(txn),key,type);}  }
class C{  public static double db(double energy){  if (energy <= 1e-80)   return -200.0; else   return 10 * log10(energy);}  }
class C{  private boolean isValueDeadbandFiltered(final SourceDataTag currentTag,final ValueUpdate update,final SourceDataTagQuality newSDQuality){  if (this.equipmentLogger.isTraceEnabled()) {    this.equipmentLogger.trace(format("entering valueDeadbandFilterOut(%d)..",currentTag.getId()));  }  boolean filterTag=false;  float valueDeadband;  if (currentTag.getAddress().isProcessValueDeadbandEnabled()) {    if (isCurrentValueAvailable(currentTag) && (currentTag.getCurrentValue().getQuality().getQualityCode() == newSDQuality.getQualityCode())) {      valueDeadband=currentTag.getAddress().getValueDeadband();      if (TypeConverter.isNumber(currentTag.getDataType())) {        if (isCurrentValueAvailable(currentTag)) {          Number currentValue=(Number)currentTag.getCurrentValue().getValue();          Number newValue=update.getValue() == null ? null : (Number)update.getValue();switch (currentTag.getAddress().getValueDeadbandType()) {case DataTagDeadband.DEADBAND_PROCESS_ABSOLUTE:            filterTag=isAbsoluteValueDeadband(currentValue,newValue,valueDeadband);          break;case DataTagDeadband.DEADBAND_PROCESS_ABSOLUTE_VALUE_DESCR_CHANGE:        String tagValueDesc=currentTag.getCurrentValue().getValueDescription();      if (tagValueDesc == null) {        tagValueDesc="";      }    String newValueDesc=update.getValueDescription();  if (newValueDesc == null) {    newValueDesc="";  }String currentValueDesc=currentTag.getCurrentValue().getValueDescription();if (currentValueDesc == null) {currentValueDesc="";}if (tagValueDesc.equals(newValueDesc)) {filterTag=isAbsoluteValueDeadband(currentValue,newValue,valueDeadband);}break;case DataTagDeadband.DEADBAND_PROCESS_RELATIVE:filterTag=isRelativeValueDeadband(currentValue,newValue,valueDeadband);break;case DataTagDeadband.DEADBAND_PROCESS_RELATIVE_VALUE_DESCR_CHANGE:tagValueDesc=currentTag.getCurrentValue().getValueDescription();if (tagValueDesc == null) {tagValueDesc="";}newValueDesc=update.getValueDescription();if (newValueDesc == null) {newValueDesc="";}currentValueDesc=currentTag.getCurrentValue().getValueDescription();if (currentValueDesc == null) {currentValueDesc="";}if (tagValueDesc.equals(newValueDesc)) {filterTag=isRelativeValueDeadband(currentValue,newValue,valueDeadband);}break;default :break;}}}}}if (this.equipmentLogger.isTraceEnabled()) {this.equipmentLogger.trace(format("leaving valueDeadbandFilterOut(%d); filter out = %b",currentTag.getId(),filterTag));}return filterTag;}  }
class C{  public static MultiPolygon createMultiPolygonFromJson(JsonNode json){  Polygon[] polygons=new Polygon[MapUtils.getNonEmptyNodes(json)];  for (int i=0; i < json.size(); i++) {    JsonNode node=json.get(i);    if (MapUtils.nodeIsNonEmpty(node)) {      polygons[i]=createPolygonFromJson(node);    }  }  return FACTORY.createMultiPolygon(polygons);}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=InfiniteViewPager.FakePositionHelper.getAdapterSize(mViewPager);    ;    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public static int hash(double value){  return Double.hashCode(value);}  }
class C{  public boolean unitCanReadFrom(Unit u,Value v){  return valueTouchesRWSet(readSet(u),v,u.getUseBoxes());}  }
class C{  public static IEntryHolder createEntryHolder(IServerTypeDesc typeDesc,IEntryPacket entryPacket,EntryDataType entryDataType){  String uid;  if (entryPacket.getUID() != null)   uid=entryPacket.getUID(); else   uid=ClientUIDHandler.createUIDFromName(entryPacket.getPropertyValue(typeDesc.getTypeDesc().getDefaultPropertyName()).toString(),entryPacket.getTypeName());  int version=entryPacket.getVersion();  ITransactionalEntryData entryData=createEntryData(entryPacket,entryDataType,version > 0 ? version : 1,-1,false,false);  return new EntryHolder(typeDesc,uid,SystemTime.timeMillis(),entryPacket.isTransient(),entryData);}  }
class C{  public static UInteger valueOf(long value) throws NumberFormatException {  return valueOfUnchecked(rangeCheck(value));}  }
class C{  @Category(BoxSDKTest.class) public void removeContentOlderThanADayInRootFolder() throws BoxSDKServiceException {  BoxFolder rootFolder=boxSDKService.getRootFolder();  DateTime dateTime=new DateTime();  dateTime=dateTime.minusDays(1);  boxSDKService.deleteFolderContentOlderThan(rootFolder.getID(),dateTime);}  }
class C{  private void mapContainerIPAddress(ContainerState containerState,Map<String,Object> networkSettings){  if (networkSettings == null) {    return;  }  Object ipAddress=networkSettings.get(DOCKER_CONTAINER_NETWORK_SETTINGS_IP_ADDRESS_PROP_NAME);  if (ipAddress == null) {    return;  }  containerState.address=ipAddress.toString();}  }
class C{  public static boolean showGuidelines(){  if ((Math.abs(Edge.LEFT.getCoordinate() - Edge.RIGHT.getCoordinate()) < DEFAULT_SHOW_GUIDELINES_LIMIT) || (Math.abs(Edge.TOP.getCoordinate() - Edge.BOTTOM.getCoordinate()) < DEFAULT_SHOW_GUIDELINES_LIMIT))   return false; else   return true;}  }
class C{  public static void actions(Context context,Api api,Api.ApiOptions.HasOptions options,Action1<GoogleApiClient> onClientConnected,Action1<Throwable> onError){  GoogleApiClientActions.create(context.getApplicationContext(),new ApiWithOptions(api,options),onClientConnected,onError);}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot,String path){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true,path);}  }
class C{  private void purgeData(TableJson json,Storage storage,int iteration,Runnable progress){  _log.info("Purging data for table '{}' and table uuid '{}' (facade={}, iteration={}).",json.getTable(),storage.getUuidString(),storage.isFacade(),iteration);  Runnable rateLimitedProgress=rateLimited(_placementCache.get(storage.getPlacement()),progress);  audit(json.getTable(),"doPurgeData" + iteration,new AuditBuilder().set("_uuid",storage.getUuidString()).set("_placement",storage.getPlacement()).build());  _dataPurgeDAO.purge(newAstyanaxStorage(storage,json.getTable()),rateLimitedProgress);}  }
class C{  public PagesGetVersionQuery(VkApiClient client,UserActor actor,int versionId){  super(client,"pages.getVersion",WikipageFull.class);  accessToken(actor.getAccessToken());  versionId(versionId);}  }
class C{  public void parse(String s){  try {    s=URLDecoder.decode(s,"utf-8");    String[] ss=s.split("&");    for (    String s1 : ss) {      int i=s1.indexOf("=");      if (i > -1) {        String n=s1.substring(0,i);        String v=s1.substring(i + 1);        set(n,v);      }    }  } catch (  Exception e) {  }}  }
class C{  public static Collection<String> validate(Collection<Key<?>> stages,Element element){  StageValidator validator=new StageValidator(stages);  validator.visit(element);  return validator.errors;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ResurrectBase_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201239,skilltarget,skillname);}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set pc1=2 pc2=3;");}  }
class C{  public DecoderResult decode(boolean[][] image) throws FormatException, ChecksumException {  int dimension=image.length;  BitMatrix bits=new BitMatrix(dimension);  for (int i=0; i < dimension; i++) {    for (int j=0; j < dimension; j++) {      if (image[i][j]) {        bits.set(j,i);      }    }  }  return decode(bits);}  }
class C{  public boolean equalsWithHardDefaults(Object other){  if (this == other) {    return true;  } else   if (other == null) {    return false;  } else   if (!(other instanceof WebSiteProperties)) {    return false;  }  WebSiteProperties o=(WebSiteProperties)other;  return sameFields(this.httpHost,o.httpHost,"localhost") && sameFields(this.httpPort,o.httpPort,"80") && sameFields(this.httpsHost,o.httpsHost,"localhost")&& sameFields(this.httpsPort,o.httpsPort,"443")&& (this.enableHttps == o.enableHttps);}  }
class C{  public void deleteItem(final int _index){  this.model.remove(_index);  notifyItemRemoved(_index);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public boolean isLocked(){  return isLocked;}  }
class C{  public BoxFolder createSharedFolder(String folderName) throws BoxSDKServiceException {  return createSharedFolder(folderName,getBoxSDKServiceConfig().getRootFolderId());}  }
class C{  public static boolean checkIfLeftExpressionRequireEvaluation(Expression expression){  if (expression.getFilterExpressionType() == ExpressionType.UNKNOWN || !(expression instanceof ColumnExpression)) {    return true;  }  for (  Expression child : expression.getChildren()) {    if (checkIfLeftExpressionRequireEvaluation(child)) {      return true;    }  }  return false;}  }
class C{  private boolean refreshStatsMessage(final boolean updateOnly){  final String appName=configurationManager.getDefaultPropertyFile().getApplicationName();  if ((statMessageIndex == 0) && (StatisticsManager.stats.getConnections() > 0)) {    controlPanelItemController.setTitle(String.format("Your %s made %s connection" + (StatisticsManager.stats.getConnections() > 1 ? "s" : "") + " to MQTT brokers%s.",appName,FormattingUtils.formatNumber(StatisticsManager.stats.getConnections()),IN_DAYS_PHRASE));    return true;  } else   if ((statMessageIndex == 1) && (StatisticsManager.stats.getMessagesPublished() > 1)) {    controlPanelItemController.setTitle(String.format("Your %s published %s messages to MQTT brokers.",appName,FormattingUtils.formatNumber(StatisticsManager.stats.getMessagesPublished()),IN_DAYS_PHRASE));    return true;  } else   if ((statMessageIndex == 2) && (StatisticsManager.stats.getSubscriptions() > 1)) {    controlPanelItemController.setTitle(String.format("Your %s made %s subscriptions to MQTT brokers%s.",appName,FormattingUtils.formatNumber(StatisticsManager.stats.getSubscriptions()),IN_DAYS_PHRASE));    return true;  } else   if ((statMessageIndex == 3) && (StatisticsManager.stats.getMessagesReceived() > 1)) {    controlPanelItemController.setTitle(String.format("Your %s received %s messages%s.",appName,FormattingUtils.formatNumber(StatisticsManager.stats.getMessagesReceived()),SINCE_PHRASE));    return true;  } else   if ((statMessageIndex == 4) && (updateOnly || StatisticsManager.getMessagesPublished() > 1)) {    controlPanelItemController.setTitle(String.format("Right now your %s is publishing %s msgs/s.",appName,StatisticsManager.getMessagesPublished()));    return true;  } else   if ((statMessageIndex == 5) && (updateOnly || StatisticsManager.getMessagesReceived() > 1)) {    controlPanelItemController.setTitle(String.format("Right now your %s is munching through %d msgs/s.",appName,StatisticsManager.getMessagesReceived()));    return true;  }  return false;}  }
class C{  public static HttpResponse execute(HttpMethod method,String targetUrl,String body) throws IOException, KeyStoreException, NoSuchAlgorithmException, CertificateException, KeyManagementException {  return execute(method,targetUrl,body,null);}  }
class C{  public String title(){  if (d != null) {    return d.title();  }  return null;}  }
class C{  public void put(ServletRequest request,T value,Map<String,Object> expandContext){  AttributeAccessor<T> aa=new AttributeAccessor<T>(name,expandContext,this.attributeName,this.fma,this.needsExpand);  aa.put(request,value);}  }
class C{  protected String hash(String key){  try {    MessageDigest gen=HASH_GENERATOR.get();    byte[] keyBytes=key.getBytes("UTF-8");    gen.update(keyBytes,0,keyBytes.length);    byte[] binaryhash=gen.digest();    return ENCODER.encodeToString(binaryhash);  } catch (  Exception e) {    LOG.warn("Failed to get hash encoding for key: {}",key,e);  }  return null;}  }
class C{  public void toString(StringBuffer sb){  getTypeAccess().toString(sb);  sb.append("<>");}  }
class C{  private void prepareLocators(LookupLocator[] locators) throws RemoteException {  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(JoinStateManager.class.getName(),"prepareLocators");  }  for (int i=0; i < locators.length; i++) {    locators[i]=(LookupLocator)lookupLocatorPreparer.prepareProxy(locators[i]);  }  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(JoinStateManager.class.getName(),"prepareLocators");  }}  }
class C{  default String roleParentName(String type){  return String.format(ROLE_PARENT,type);}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  private void returnEntryNotInSpaceError(Context context,ITemplateHolder template,EntryDeletedException edx,boolean makeWaitForInfo){  EntryNotInSpaceException exv=new EntryNotInSpaceException(template.getUidToOperateBy(),getFullSpaceName(),(edx != null && edx.deletedByOwnTxn()));  ILockObject templateLock=null;  try {    if (template.isInCache() || makeWaitForInfo) {      templateLock=getTemplateLockObject(template);synchronized (templateLock) {        if (!template.isDeleted()) {          context.setOperationAnswer(template,null,exv);          if (template.isInCache())           _cacheManager.removeTemplate(context,template,false,true,false);        }      }    } else {      context.setOperationAnswer(template,null,exv);      template.setDeleted(true);    }  }  finally {    if (templateLock != null)     freeTemplateLockObject(templateLock);  }}  }
class C{  protected void checkKey(Object key){  if (!canContainKey(key))   throw new IllegalArgumentException("key is not valid for this LeaseMap");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_TURN_OFF_ABNORMAL_STATUS(String value0){  return new SM_SYSTEM_MESSAGE(1300058,value0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_XPBoost_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1201212,skillname);}  }
class C{  public SerialMessage encapsulate(SerialMessage serialMessage,ZWaveCommandClass commandClass,int endpointId){  ZWaveMultiInstanceCommandClass multiInstanceCommandClass;  if (serialMessage == null) {    return null;  }  if (endpointId == 0) {    return serialMessage;  }  multiInstanceCommandClass=(ZWaveMultiInstanceCommandClass)this.getCommandClass(CommandClass.MULTI_INSTANCE);  if (multiInstanceCommandClass != null) {    logger.debug("NODE {}: Encapsulating message, instance / endpoint {}",this.getNodeId(),endpointId);switch (multiInstanceCommandClass.getVersion()) {case 2:      if (commandClass.getEndpoint() != null) {        serialMessage=multiInstanceCommandClass.getMultiChannelEncapMessage(serialMessage,commandClass.getEndpoint());        return serialMessage;      }    break;case 1:default :  if (commandClass.getInstances() >= endpointId) {    serialMessage=multiInstanceCommandClass.getMultiInstanceEncapMessage(serialMessage,endpointId);    return serialMessage;  }break;}}logger.warn("NODE {}: Encapsulating message, instance / endpoint {} failed, will discard message.",this.getNodeId(),endpointId);return null;}  }
class C{  private void stop(final AliveTimer aliveTimer){  if (aliveTimer.isActive()) {    if (LOGGER.isDebugEnabled()) {      StringBuffer str=new StringBuffer("stop() : stopping alive for ");      str.append(aliveTimer.getAliveTypeDescription() + " ");      str.append(aliveTimer.getRelatedName());      str.append(".");      LOGGER.debug(str.toString());    }    aliveTimer.setActive(false);    aliveTimer.setLastUpdate(System.currentTimeMillis());  }}  }
class C{  public UserNotFoundException(String s){  super(s);}  }
class C{  private void updateSymbol(){  StandardData standardData=getStandardData();  Expression label=fieldConfigVisitor.getExpression(FieldIdEnum.LABEL);  Expression haloRadius=fieldConfigVisitor.getExpression(FieldIdEnum.HALO_RADIUS);  Expression geometryField=fieldConfigVisitor.getExpression(FieldIdEnum.GEOMETRY);  String geometryFieldName=null;  Expression defaultGeometryField=getFilterFactory().property(geometryFieldName);  LabelPlacement labelPlacement=null;  MultiOptionGroup labelPlacementPanel=(MultiOptionGroup)getGroup(GroupIdEnum.PLACEMENT);  OptionGroup labelPlacementOption=labelPlacementPanel.getSelectedOptionGroup();  if (labelPlacementOption.getId() == GroupIdEnum.POINTPLACEMENT) {    AnchorPoint anchor=null;    GroupConfigInterface anchorPointPanel=getGroup(GroupIdEnum.ANCHORPOINT);    if (anchorPointPanel == null) {      String errorMessage=String.format("%s : %s",Localisation.getString(TextSymbolizerDetails.class,"TextSymbol.error1"),GroupIdEnum.ANCHORPOINT);      ConsoleManager.getInstance().error(this,errorMessage);    } else     if (anchorPointPanel.isPanelEnabled()) {      Expression anchorPointH=fieldConfigVisitor.getExpression(FieldIdEnum.ANCHOR_POINT_H);      Expression anchorPointV=fieldConfigVisitor.getExpression(FieldIdEnum.ANCHOR_POINT_V);      anchor=(AnchorPoint)getStyleFactory().anchorPoint(anchorPointH,anchorPointV);    }    Displacement displacement=null;    GroupConfigInterface displacementPanel=getGroup(GroupIdEnum.DISPLACEMENT);    if (displacementPanel == null) {      ConsoleManager.getInstance().error(this,String.format("%s : %s",Localisation.getString(TextSymbolizerDetails.class,"TextSymbol.error1"),GroupIdEnum.DISPLACEMENT));    } else     if (displacementPanel.isPanelEnabled()) {      displacement=getStyleFactory().displacement(fieldConfigVisitor.getExpression(FieldIdEnum.DISPLACEMENT_X),fieldConfigVisitor.getExpression(FieldIdEnum.DISPLACEMENT_Y));    }    Expression rotation=null;    GroupConfigInterface rotationPanel=getGroup(GroupIdEnum.ROTATION);    if (rotationPanel == null) {      ConsoleManager.getInstance().error(this,String.format("%s : %s",Localisation.getString(TextSymbolizerDetails.class,"TextSymbol.error1"),GroupIdEnum.ROTATION));    } else     if (rotationPanel.isPanelEnabled()) {      rotation=fieldConfigVisitor.getExpression(FieldIdEnum.ANGLE);    }    labelPlacement=getStyleFactory().pointPlacement(anchor,displacement,rotation);  } else   if (labelPlacementOption.getId() == GroupIdEnum.LINEPLACEMENT) {    Expression offset=fieldConfigVisitor.getExpression(FieldIdEnum.PERPENDICULAR_OFFSET);    Expression initialGap=fieldConfigVisitor.getExpression(FieldIdEnum.INITIAL_GAP);    Expression gap=fieldConfigVisitor.getExpression(FieldIdEnum.GAP);    boolean repeated=fieldConfigVisitor.getBoolean(FieldIdEnum.REPEATED);    boolean aligned=fieldConfigVisitor.getBoolean(FieldIdEnum.ALIGN);    boolean generalizedLine=fieldConfigVisitor.getBoolean(FieldIdEnum.GENERALISED_LINE);    labelPlacement=getStyleFactory().linePlacement(offset,initialGap,gap,repeated,aligned,generalizedLine);  }  FieldConfigColour fdmFillColour=(FieldConfigColour)fieldConfigManager.get(FieldIdEnum.FILL_COLOUR);  Expression fillColour=fdmFillColour.getColourExpression();  Expression fillColourOpacity=fdmFillColour.getColourOpacityExpression();  Fill fill=getStyleFactory().createFill(fillColour,fillColourOpacity);  FieldConfigColour fdmHaloColour=(FieldConfigColour)fieldConfigManager.get(FieldIdEnum.HALO_COLOUR);  Expression haloFillColour=fdmHaloColour.getColourExpression();  Expression haloFillColourOpacity=fdmHaloColour.getColourOpacityExpression();  Fill haloFill=getStyleFactory().fill(null,haloFillColour,haloFillColourOpacity);  Halo halo=null;  GroupConfigInterface haloPanel=getGroup(GroupIdEnum.HALO);  if (haloPanel.isPanelEnabled()) {    halo=(Halo)getStyleFactory().halo(haloFill,haloRadius);  }  Font font=extractFont();  fieldConfigVisitor.populateFontField(FieldIdEnum.FONT_PREVIEW,font);  TextSymbolizer textSymbolizer=(TextSymbolizer)getStyleFactory().textSymbolizer(standardData.name,defaultGeometryField,standardData.description,standardData.unit,label,font,labelPlacement,halo,fill);  if ((geometryField != null) && !geometryField.toString().isEmpty()) {    textSymbolizer.setGeometry(geometryField);  }  if (vendorOptionTextFactory != null) {    vendorOptionTextFactory.updateSymbol(textSymbolizer);  }  SelectedSymbol.getInstance().replaceSymbolizer(textSymbolizer);  this.fireUpdateSymbol();}  }
class C{  public ArrayRealVector(double[] v1,double[] v2){  final int l1=v1.length;  final int l2=v2.length;  data=new double[l1 + l2];  System.arraycopy(v1,0,data,0,l1);  System.arraycopy(v2,0,data,l1,l2);}  }
class C{  public void reset(){  fDeclaration=null;  fTypeDecl=null;  fNil=false;  fSpecified=false;  fNotation=null;  fValidationAttempted=ItemPSVI.VALIDATION_NONE;  fValidity=ItemPSVI.VALIDITY_NOTKNOWN;  fErrors=null;  fValidationContext=null;  fValue.reset();}  }
class C{  @NotNull public DeletePersonAction deletePerson(@NotNull String personGroupId,@NotNull String personId){  Validation.validate(personGroupId,"^[a-z0-9_-]{1,64}$",new ParameterValidationException("personGroupId","Person group ID is invalid. Valid format should be a string composed by numbers, english letters in lower case, '-', '_', and no longer than 64 characters."));  return new DeletePersonAction(cognitiveContext,personGroupId,personId);}  }
class C{  protected void updateEnablements(){  int type=getSaveType();  browseButton.setEnabled(type == FILESYSTEM);  filenameCombo.setEnabled(type == FILESYSTEM);  wsPathText.setEnabled(type == WORKSPACE);  wsBrowseButton.setEnabled(type == WORKSPACE);  if (type == WORKSPACE)   wsBrowsed=false;}  }
class C{  public static String formatPrice(double price){  return priceDecimalFormat.format(price);}  }
class C{  public TakeModifiers(TakeModifiers modifiers1,TakeModifiers modifiers2,TakeModifiers modifiers3){  super(modifiers1,modifiers2,modifiers3);}  }
class C{  @Override public void endDocument() throws SAXException {  if (saxParser != null) {    saxParser.endDocument();  }}  }
class C{  public static String abbreviateName(String str,FontMetrics fm,int width){  if (fm.stringWidth(str) > width)   str=abbreviateName(str,false);  if (fm.stringWidth(str) > width)   str=abbreviateName(str,true);  return str;}  }
class C{  private void convertTOBIAccents2ProsodyContour(Document doc) throws Exception {  TreeWalker tw=DomUtils.createTreeWalker(doc,MaryXML.TOKEN);  Element tokenElement=(Element)tw.nextNode();  while (tokenElement != null) {    boolean hasAccentAttribute=tokenElement.hasAttribute("accent");    if (hasAccentAttribute) {      String accentAttribute=tokenElement.getAttribute("accent");      boolean isDefined=this.toBI2ContourMap.containsKey(accentAttribute);      if (!isDefined) {        tokenElement=(Element)tw.nextNode();        continue;      }      String contourValue=this.toBI2ContourMap.get(accentAttribute);      assert contourValue != null : "contour attribute should not be null";      Node tokenAncestor=tokenElement.getParentNode();      Element prosody=MaryXML.createElement(doc,MaryXML.PROSODY);      prosody.setAttribute("contour",contourValue);      prosody.appendChild(tokenElement.cloneNode(true));      tokenAncestor.insertBefore(prosody,tokenElement);      Element nextTokenElement=(Element)tw.nextNode();      if (nextTokenElement == null) {        tokenAncestor.removeChild(tokenElement);        break;      }      tokenAncestor.removeChild(tokenElement);      tokenElement=nextTokenElement;      continue;    }    tokenElement=(Element)tw.nextNode();  }}  }
class C{  public void dump(Writer writer){  DecimalFormat numberFormat=new DecimalFormat();  numberFormat.setMaximumFractionDigits(6);  numberFormat.setMinimumFractionDigits(6);  PrintWriter pw=new PrintWriter(new BufferedWriter(writer));  if (getNumberOfFrames() == 0) {    pw.println("# ========== LPCResult ==========");    pw.println("# Num_of_Frames: " + getNumberOfFrames());    pw.flush();    return;  }  pw.println("========== LPCResult ==========");  pw.println("Num_of_Frames: " + getNumberOfFrames());  pw.println("Num_of_Channels: " + getNumberOfChannels());  pw.println("Num_of_Samples: " + getNumberOfSamples());  pw.println("Sample_Rate: " + sampleRate);  pw.println("LPC_Minimum: " + numberFormat.format(lpcMinimum));  pw.println("LPC_Range: " + numberFormat.format(lpcRange));  pw.println("Residual_Fold: " + residualFold);  pw.println("Post_Emphasis: " + numberFormat.format(POST_EMPHASIS));  int i;  pw.print("Times:\n");  for (i=0; i < getNumberOfFrames(); i++) {    pw.print(times[i] + " ");  }  pw.print("\nFrames: ");  for (i=0; i < getNumberOfFrames(); i++) {    short[] frame=getFrame(i);    for (int j=0; j < frame.length; j++) {      pw.print((((int)frame[j]) + 32768) + "\n");    }  }  pw.print("\nSizes: ");  for (i=0; i < getNumberOfFrames(); i++) {    pw.print(sizes[i] + " ");  }  pw.print("\nResiduals: ");  for (i=0; i < getNumberOfSamples(); i++) {    if (residuals[i] == 0) {      pw.print(255);    } else {      pw.print((((int)residuals[i]) + 128));    }    pw.print("\n");    pw.flush();  }  pw.flush();}  }
class C{  public INDArray asMatrix(File f) throws IOException {  return NDArrayUtil.toNDArray(fromFile(f));}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof Calculable) {    if (getId() == null && ((Calculable)obj).getId() == null)     return (true); else     if (getId() == null || ((Calculable)obj).getId() == null)     return (false); else     return (getId().equals(((Calculable)obj).getId()));  }  return (false);}  }
class C{  public Type toSoot(){  return toSoot(type.getType(),0);}  }
class C{  public void hideTooltip(){  logger.trace("Hiding tooltip...");  hideRequested=false;  super.hide();}  }
class C{  public ReceiveResultBehaviour(ResultsAgent a,long lInterval,PrintStream pResultOutput,boolean bBlocking){  super(a,lInterval);  myAgent=a;  Interval=lInterval;  pOut=pResultOutput;  Blocking=bBlocking;}  }
class C{  private Java.CompilationUnit parseCompilationUnit(String fileName,InputStream inputStream,@Nullable String optionalCharacterEncoding) throws CompileException, IOException {  try {    Scanner scanner=new Scanner(fileName,inputStream,optionalCharacterEncoding);    Parser parser=new Parser(scanner);    parser.setWarningHandler(this.optionalWarningHandler);    this.benchmark.beginReporting("Parsing \"" + fileName + "\"");    try {      return parser.parseCompilationUnit();    }  finally {      this.benchmark.endReporting();    }  }  finally {    inputStream.close();  }}  }
class C{  public static String packageToPath(String packageName){  return packageName.replace('.',File.separatorChar);}  }
class C{  public Iterator visibleItems(){  return items(VisiblePredicate.TRUE);}  }
class C{  @Override public void onParameterAdded(Effect effect,Parameter parameter){}  }
class C{  public AppsDeleteAppRequestsQuery deleteAppRequests(UserActor actor){  return new AppsDeleteAppRequestsQuery(getClient(),actor);}  }
class C{  public static SpawnTemplate addNewSpawn(int worldId,int npcId,float x,float y,float z,byte heading,int respawnTime){  SpawnTemplate spawnTemplate=createSpawnTemplate(worldId,npcId,x,y,z,heading);  spawnTemplate.setRespawnTime(respawnTime);  return spawnTemplate;}  }
class C{  @Nullable private static StateListState createStateListState(XmlTag tag,boolean isFramework){  String stateValue=null;  String alphaValue=null;  Map<String,Boolean> stateAttributes=new HashMap<>();  XmlAttribute[] attributes=tag.getAttributes();  for (  XmlAttribute attr : attributes) {    String name=attr.getLocalName();    String value=attr.getValue();    if (value == null) {      continue;    }    if (ATTR_COLOR.equals(name) || ATTR_DRAWABLE.equals(name)) {      ResourceUrl url=ResourceUrl.parse(value,isFramework);      stateValue=url != null ? url.toString() : value;    } else     if ("alpha".equals(name)) {      ResourceUrl url=ResourceUrl.parse(value,isFramework);      alphaValue=url != null ? url.toString() : value;    } else     if (name.startsWith(STATE_NAME_PREFIX)) {      stateAttributes.put(name,Boolean.valueOf(value));    }  }  if (stateValue == null) {    return null;  }  return new StateListState(stateValue,stateAttributes,alphaValue);}  }
class C{  public CRectFEvaluator(RectF reuseRect){  mRectF=reuseRect;}  }
class C{  @Override public void serializeAsPlaceholder(Object bean,JsonGenerator jgen,SerializerProvider prov) throws Exception {  if (_nullSerializer != null) {    _nullSerializer.serialize(null,jgen,prov);  } else {    jgen.writeNull();  }}  }
class C{  public BrentSolver(double relativeAccuracy,double absoluteAccuracy,double functionValueAccuracy){  super(relativeAccuracy,absoluteAccuracy,functionValueAccuracy);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PET_UNSUMMONED(String value0){  return new SM_SYSTEM_MESSAGE(1400646,value0);}  }
class C{  static String[] splitOnTokens(String text){  if (text.indexOf('?') == -1 && text.indexOf('*') == -1) {    return new String[]{text};  }  char[] array=text.toCharArray();  ArrayList<String> list=new ArrayList<>();  StringBuilder buffer=new StringBuilder();  for (int i=0; i < array.length; i++) {    if (array[i] == '?' || array[i] == '*') {      if (buffer.length() != 0) {        list.add(buffer.toString());        buffer.setLength(0);      }      if (array[i] == '?') {        list.add("?");      } else       if (list.isEmpty() || i > 0 && list.get(list.size() - 1).equals("*") == false) {        list.add("*");      }    } else {      buffer.append(array[i]);    }  }  if (buffer.length() != 0) {    list.add(buffer.toString());  }  return list.toArray(new String[list.size()]);}  }
class C{  public int size(){  return set.size();}  }
class C{  public void updateEntry(Context context,IEntryHolder updatedEntry,boolean updateRedoLog,boolean origin,boolean[] partialUpdateValuesIndicators) throws SAException {}  }
class C{  public JSONObject append(String key,Object value) throws JSONException {  testValidity(value);  Object o=opt(key);  if (o == null) {    put(key,new JSONArray().put(value));  } else   if (o instanceof JSONArray) {    put(key,((JSONArray)o).put(value));  } else {    throw new JSONException("JSONObject[" + key + "] is not a JSONArray.");  }  return this;}  }
class C{  public Variable(Object initialValue){  this.value=initialValue;}  }
class C{  private void init(AttributeSet attrs){  if (attrs != null) {    Resources resources=getResources();    TypedArray typedArray=context.obtainStyledAttributes(attrs,com.luseen.spacenavigation.R.styleable.SpaceNavigationView);    spaceItemIconSize=typedArray.getDimensionPixelSize(com.luseen.spacenavigation.R.styleable.SpaceNavigationView_space_item_icon_size,resources.getDimensionPixelSize(com.luseen.spacenavigation.R.dimen.space_item_icon_default_size));    spaceItemIconOnlySize=typedArray.getDimensionPixelSize(com.luseen.spacenavigation.R.styleable.SpaceNavigationView_space_item_icon_only_size,resources.getDimensionPixelSize(com.luseen.spacenavigation.R.dimen.space_item_icon_only_size));    spaceItemTextSize=typedArray.getDimensionPixelSize(com.luseen.spacenavigation.R.styleable.SpaceNavigationView_space_item_text_size,resources.getDimensionPixelSize(com.luseen.spacenavigation.R.dimen.space_item_text_default_size));    spaceItemIconOnlySize=typedArray.getDimensionPixelSize(com.luseen.spacenavigation.R.styleable.SpaceNavigationView_space_item_icon_only_size,resources.getDimensionPixelSize(com.luseen.spacenavigation.R.dimen.space_item_icon_only_size));    spaceBackgroundColor=typedArray.getColor(com.luseen.spacenavigation.R.styleable.SpaceNavigationView_space_background_color,resources.getColor(com.luseen.spacenavigation.R.color.space_default_color));    centreButtonColor=typedArray.getColor(com.luseen.spacenavigation.R.styleable.SpaceNavigationView_centre_button_color,resources.getColor(com.luseen.spacenavigation.R.color.centre_button_color));    activeSpaceItemColor=typedArray.getColor(com.luseen.spacenavigation.R.styleable.SpaceNavigationView_active_item_color,resources.getColor(com.luseen.spacenavigation.R.color.space_white));    inActiveSpaceItemColor=typedArray.getColor(com.luseen.spacenavigation.R.styleable.SpaceNavigationView_inactive_item_color,resources.getColor(com.luseen.spacenavigation.R.color.default_inactive_item_color));    centreButtonIcon=typedArray.getResourceId(R.styleable.SpaceNavigationView_centre_button_icon,R.drawable.near_me);    centreButtonIconColor=typedArray.getColor(R.styleable.SpaceNavigationView_centre_button_icon_color,resources.getColor(R.color.space_white));    typedArray.recycle();  }}  }
class C{  public int addSecondaryEquations(final SecondaryODE secondary){  components.add(secondary);  mapper=new EquationsMapper(mapper,secondary.getDimension());  return components.size();}  }
class C{  @Override protected void checkProperty(String propertyId) throws XMLConfigurationException {  if (propertyId.startsWith(Constants.XERCES_PROPERTY_PREFIX)) {    final int suffixLength=propertyId.length() - Constants.XERCES_PROPERTY_PREFIX.length();    if (suffixLength == Constants.DTD_SCANNER_PROPERTY.length() && propertyId.endsWith(Constants.DTD_SCANNER_PROPERTY)) {      return;    }  }  if (propertyId.startsWith(Constants.JAXP_PROPERTY_PREFIX)) {    final int suffixLength=propertyId.length() - Constants.JAXP_PROPERTY_PREFIX.length();    if (suffixLength == Constants.SCHEMA_SOURCE.length() && propertyId.endsWith(Constants.SCHEMA_SOURCE)) {      return;    }  }  super.checkProperty(propertyId);}  }
class C{  private void populateCache() throws KettleException {  String carbonStorePath=CarbonProperties.getInstance().getProperty(CarbonCommonConstants.STORE_LOCATION_HDFS);  String[] dimColumnNames=columnsInfo.getDimColNames();  String[] dimColumnIds=columnsInfo.getDimensionColumnIds();  String databaseName=columnsInfo.getDatabaseName();  String tableName=columnsInfo.getTableName();  CarbonTable carbonTable=CarbonMetadata.getInstance().getCarbonTable(databaseName + CarbonCommonConstants.UNDERSCORE + tableName);  CarbonTableIdentifier carbonTableIdentifier=carbonTable.getCarbonTableIdentifier();  CacheProvider cacheProvider=CacheProvider.getInstance();  Cache reverseDictionaryCache=cacheProvider.createCache(CacheType.REVERSE_DICTIONARY,carbonStorePath);  List<String> dictionaryKeys=new ArrayList<>(dimColumnNames.length);  List<DictionaryColumnUniqueIdentifier> dictionaryColumnUniqueIdentifiers=new ArrayList<>(dimColumnNames.length);  ColumnSchemaDetailsWrapper columnSchemaDetailsWrapper=columnsInfo.getColumnSchemaDetailsWrapper();  for (int i=0; i < dimColumnNames.length; i++) {    String dimColName=dimColumnNames[i].substring(tableName.length() + 1);    ColumnSchemaDetails details=columnSchemaDetailsWrapper.get(dimColumnIds[i]);    if (details.isDirectDictionary()) {      continue;    }    GenericDataType complexType=columnsInfo.getComplexTypesMap().get(dimColName);    if (complexType != null) {      List<GenericDataType> primitiveChild=new ArrayList<GenericDataType>();      complexType.getAllPrimitiveChildren(primitiveChild);      for (      GenericDataType eachPrimitive : primitiveChild) {        details=columnSchemaDetailsWrapper.get(eachPrimitive.getColumnId());        if (details.isDirectDictionary()) {          continue;        }        ColumnIdentifier columnIdentifier=new ColumnIdentifier(eachPrimitive.getColumnId(),columnsInfo.getColumnProperties(eachPrimitive.getName()),details.getColumnType());        String dimColumnName=tableName + CarbonCommonConstants.UNDERSCORE + eachPrimitive.getName();        DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier=new DictionaryColumnUniqueIdentifier(carbonTableIdentifier,columnIdentifier);        dictionaryColumnUniqueIdentifiers.add(dictionaryColumnUniqueIdentifier);        dictionaryKeys.add(dimColumnName);      }    } else {      ColumnIdentifier columnIdentifier=new ColumnIdentifier(dimColumnIds[i],columnsInfo.getColumnProperties(dimColName),details.getColumnType());      DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier=new DictionaryColumnUniqueIdentifier(carbonTableIdentifier,columnIdentifier);      dictionaryColumnUniqueIdentifiers.add(dictionaryColumnUniqueIdentifier);      dictionaryKeys.add(dimColumnNames[i]);    }  }  initDictionaryCacheInfo(dictionaryKeys,dictionaryColumnUniqueIdentifiers,reverseDictionaryCache,carbonStorePath);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  if (undoRedoObject != null) {    if (undoRedoObject.getOldValue() instanceof ReferencedEnvelope) {      ReferencedEnvelope oldValue=(ReferencedEnvelope)undoRedoObject.getOldValue();      populateField(oldValue);    }  }}  }
class C{  void remove(VisibleObject object){  if (objects.remove(object.getObjectId()) != null) {    if (object instanceof Player) {      checkActiveness(playerCount.decrementAndGet() > 0);    }  }}  }
class C{  public static boolean isSolaris(){  return (OS.indexOf("sunos") >= 0);}  }
class C{  private void addUrlsToContextClassLoader(URL[] urls){  if (addedSharedLibToClassLoader) {    return;  }  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();  Class clazz=classLoader.getClass();  while (clazz != Object.class && !URLClassLoader.class.equals(clazz)) {    clazz=clazz.getSuperclass();  }  if (clazz == Object.class) {    throw new CannotCreateContainerException("Failed to find URLClassLoader to add shared lib for " + classLoader.getClass());  }  try {    Method addURL=clazz.getDeclaredMethod("addURL",URL.class);    addURL.setAccessible(true);    for (    URL url : urls) {      addURL.invoke(classLoader,url);    }  } catch (  Exception e) {    throw new CannotCreateContainerException("Failed to add shared lib to thread context class loader [" + classLoader + "]",e);  }  addedSharedLibToClassLoader=true;}  }
class C{  private void authorizeDomain(Registration registration,String domain){  try {    val authorization=getAuthorization(registration,domain);    val challenge=prepareDnsChallenge(authorization);    completeChallenge(challenge);  } catch (  AcmeException e) {    e.printStackTrace();    throw new LetsencryptException(e.getMessage());  }}  }
class C{  @Override public Node renameNode(Node n,String namespaceURI,String name) throws DOMException {  if (errorChecking && n.getOwnerDocument() != this && n != this) {    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"WRONG_DOCUMENT_ERR",null);    throw new DOMException(DOMException.WRONG_DOCUMENT_ERR,msg);  }switch (n.getNodeType()) {case ELEMENT_NODE:{      ElementImpl el=(ElementImpl)n;      if (el instanceof ElementNSImpl) {        if (canRenameElements(namespaceURI,name,el)) {          ((ElementNSImpl)el).rename(namespaceURI,name);          callUserDataHandlers(el,null,UserDataHandler.NODE_RENAMED);        } else {          el=replaceRenameElement(el,namespaceURI,name);        }      } else {        if (namespaceURI == null && canRenameElements(null,name,el)) {          el.rename(name);          callUserDataHandlers(el,null,UserDataHandler.NODE_RENAMED);        } else {          el=replaceRenameElement(el,namespaceURI,name);        }      }      renamedElement((Element)n,el);      return el;    }case ATTRIBUTE_NODE:{    AttrImpl at=(AttrImpl)n;    Element el=at.getOwnerElement();    if (el != null) {      el.removeAttributeNode(at);    }    if (n instanceof AttrNSImpl) {      ((AttrNSImpl)at).rename(namespaceURI,name);      if (el != null) {        el.setAttributeNodeNS(at);      }      callUserDataHandlers(at,null,UserDataHandler.NODE_RENAMED);    } else {      if (namespaceURI == null) {        at.rename(name);        if (el != null) {          el.setAttributeNode(at);        }        callUserDataHandlers(at,null,UserDataHandler.NODE_RENAMED);      } else {        AttrNSImpl nat=(AttrNSImpl)createAttributeNS(namespaceURI,name);        copyEventListeners(at,nat);        Hashtable data=removeUserDataTable(at);        Node child=at.getFirstChild();        while (child != null) {          at.removeChild(child);          nat.appendChild(child);          child=at.getFirstChild();        }        setUserDataTable(nat,data);        callUserDataHandlers(at,nat,UserDataHandler.NODE_RENAMED);        if (el != null) {          el.setAttributeNode(nat);        }        at=nat;      }    }    renamedAttrNode((Attr)n,at);    return at;  }default :{  String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_SUPPORTED_ERR",null);  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,msg);}}}  }
class C{  public static Account loadAccount(String name){  Account account=getAccountDAO().getAccount(name);  if (account != null) {    account.setAccountTime(getAccountTimeDAO().getAccountTime(account.getId()));  }  return account;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostHealEffect_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200637,skillcaster,skillname);}  }
class C{  public static boolean isAmericanExpress(String cc){  int firstdig=Integer.parseInt(cc.substring(0,1));  int seconddig=Integer.parseInt(cc.substring(1,2));  if ((cc.length() == 15) && (firstdig == 3) && ((seconddig == 4) || (seconddig == 7)))   return isCreditCard(cc);  return false;}  }
class C{  protected boolean loadPluginConfiguration(final String file){  return PluginLoader.load(file);}  }
class C{  public void writeBytes(DataOutput out) throws IOException {  out.writeLong(mostSig);  out.writeLong(leastSig);}  }
class C{  protected String encodedByte(int b){  String hex=Integer.toHexString(b).toUpperCase();  if (hex.length() < 2) {    return "%0" + hex;  } else {    return "%" + hex;  }}  }
class C{  @Override public Writer append(char value){  builder.append(value);  return this;}  }
class C{  public NewsfeedIgnoreItemQuery(VkApiClient client,UserActor actor,NewsfeedItemType type,int ownerId,int itemId){  super(client,"newsfeed.ignoreItem",OkResponse.class);  accessToken(actor.getAccessToken());  type(type);  ownerId(ownerId);  itemId(itemId);}  }
class C{  @Override protected final synchronized boolean writeData(ByteBuffer data){  AionServerPacket packet=sendMsgQueue.pollFirst();  if (packet == null) {    return false;  }  packet.setBuf(data);  packet.write(this);  return true;}  }
class C{  public static boolean updateGradleExperimentalPluginVersionAndNotifyFailure(@NotNull Project project,@NotNull String pluginVersion,@Nullable String gradleVersion,boolean invalidateSyncOnFailure){  return updateGradlePluginVersionAndNotifyFailure(project,pluginVersion,gradleVersion,true,invalidateSyncOnFailure);}  }
class C{  public DecimalSpinner(SpinnerModel model){  super(model);}  }
class C{  protected void fireDataEvent(Object src,int type,int idx0,int idx1){  Object[] lstnrs=m_lstnrs.getArray();  if (lstnrs.length > 0) {    ListDataEvent e=new ListDataEvent(src,type,idx0,idx1);    for (int i=0; i < lstnrs.length; ++i) {      ((ListDataListener)lstnrs[i]).contentsChanged(e);    }  }}  }
