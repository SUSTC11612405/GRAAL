class C{  public static File createTempDir(File parent){  File temp=new File(parent,Integer.toString(Math.abs(UNSEEDED_RANDOM.nextInt()) % 1000000));  temp.delete();  temp.mkdir();  temp.deleteOnExit();  return temp;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:10.397 -0500",hash_original_method="BEB5EB52101798DC8AC0FA25480A2C90",hash_generated_method="7166FDD059B68813A67B9C42C369C0B6") public Object remove(String name){  return nameValuePairs.remove(name);}  }
class C{  protected CoapResponse(Response response){  this.response=response;}  }
class C{  private boolean checkForAllFailedHosts(){  boolean allbad=true;  for (  int m_remoteHostsStatu : m_remoteHostsStatus) {    if (m_remoteHostsStatu != CONNECTION_FAILED) {      allbad=false;      break;    }  }  if (allbad) {    abortExperiment();    notifyListeners(false,true,true,"Experiment aborted! All connections " + "to remote hosts failed.");  }  return allbad;}  }
class C{  @Override public Clob createClob() throws SQLException {  try {    int id=getNextId(TraceObject.CLOB);    debugCodeAssign("Clob",TraceObject.CLOB,id,"createClob()");    checkClosedForWrite();    try {      Value v=session.getDataHandler().getLobStorage().createClob(new InputStreamReader(new ByteArrayInputStream(Utils.EMPTY_BYTES)),0);      session.addTemporaryLob(v);      return new JdbcClob(this,v,id);    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public IPermissionRequest buildRequest(){  return buildRequest(getOptions());}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.arrowPaint=SerialUtilities.readPaint(stream);  this.arrowStroke=SerialUtilities.readStroke(stream);}  }
class C{  public void addAll(TypedProperties properties){  addAll(properties.getProperties());}  }
class C{  public static double[] pairOfCleanAddingNumbers(int maxSum){  int[] easyNumbers={10,50,100,1000,10000};  int[][] easyDivisors={{1,2},{1,5,10},{1,5,10,25},{100,200,250},{1000,2000,2500}};  int index, sub_index, sum=Integer.MAX_VALUE;  double[] nums=new double[2];  while (sum > maxSum) {    index=ExUtil.randomInt(0,easyNumbers.length - 1,false);    sub_index=ExUtil.randomInt(0,easyDivisors[index].length - 1,false);    sum=easyNumbers[index] * ExUtil.randomInt(1,4,false);    nums[0]=ExUtil.randomInt(1,sum / easyDivisors[index][sub_index] - 1,true) * easyDivisors[index][sub_index];    nums[1]=sum - nums[0];  }  return nums;}  }
class C{  private void lookupManager(TimetableManagerForm frm) throws Exception {  String id=frm.getExternalId();  if (id != null && id.trim().length() > 0 && frm.getLookupEnabled().booleanValue()) {    String className=ApplicationProperty.ManagerExternalIdLookupClass.value();    ExternalUidLookup lookup=(ExternalUidLookup)(Class.forName(className).newInstance());    UserInfo results=lookup.doLookup(id);    if (results == null)     return;    frm.setExternalId(results.getExternalId());    frm.setLookupResult(results.getUserName());    if (frm.getFirstName() == null || frm.getFirstName().trim().length() == 0) {      frm.setFirstName(results.getFirstName());    }    if (frm.getMiddleName() == null || frm.getMiddleName().trim().length() == 0) {      frm.setMiddleName(results.getMiddleName());    }    if (frm.getLastName() == null || frm.getLastName().trim().length() == 0) {      frm.setLastName(results.getLastName());    }    if (frm.getTitle() == null || frm.getTitle().trim().length() == 0) {      frm.setTitle(results.getAcademicTitle());    }    frm.setEmail(results.getEmail());  }}  }
class C{  @Override public ImmutableCollection<V> values(){  return valueList;}  }
class C{  public static double sinh(double x){  return (MathLib.exp(x) - MathLib.exp(-x)) * 0.5;}  }
class C{  @Override public double value(double[] parameters){  for (  double parameter : parameters) {    if (Double.isNaN(parameter) || Double.isInfinite(parameter)) {      return 100000;    }  }  for (int i=0; i < parameters.length; i++) {    if (freeParameters.get(i).getType() == ParamType.VAR && parameters[i] <= 0.0) {      return 100000;    }  }  sem.setFreeParamValues(parameters);  double fml=sem.getScore();  if (Double.isNaN(fml) || Double.isInfinite(fml)) {    return 100000;  }  if (Double.isNaN(fml)) {    return 100000;  }  if (fml < 0) {    return 100000;  }  return fml;}  }
class C{  void addAttributeValue(String attribute,String value){  if (attribute.equals(OMA_TYPE)) {    mTypes.add(value);  } else {    mDescription.put(attribute,value);  }}  }
class C{  public void testReadXmlLangOldStyle() throws Exception {  Properties result=xmlToProperties("_");  assertNotNull(result);  assertTrue(!result.isEmpty());  assertEquals(1,result.size());  assertEquals("Key Value",result.getProperty("PropertyKey"));}  }
class C{  public TransposeConverter(){}  }
class C{  protected HierarchicType _findSuperTypeChain(Class<?> subtype,Class<?> supertype){  if (supertype.isInterface()) {    return _findSuperInterfaceChain(subtype,supertype);  }  return _findSuperClassChain(subtype,supertype);}  }
class C{  @Deprecated public static boolean eqOrdered(@Nullable Collection<?> c1,@Nullable Collection<?> c2){  if (c1 == c2)   return true;  if (c1 == null || c2 == null)   return false;  if (c1.size() != c2.size())   return false;  Iterator<?> it1=c1.iterator();  Iterator<?> it2=c2.iterator();  while (it1.hasNext() && it2.hasNext())   if (!eq(it1.next(),it2.next()))   return false;  return it1.hasNext() == it2.hasNext();}  }
class C{  protected TraceOptions_Impl(){  super();}  }
class C{  public final boolean isFatalErrorEnabled(){  return m_priority.isLowerOrEqual(Priority.FATAL_ERROR);}  }
class C{  public String validate(){  for (  MigrationInfo migrationInfo : migrationInfos) {    String message=migrationInfo.validate();    if (message != null) {      return message;    }  }  return null;}  }
class C{  public static short toShort(NibbleArray nibbles){  return toShort(nibbles.get(0),nibbles.get(1),nibbles.get(2),nibbles.get(3));}  }
class C{  public void preDeregister() throws Exception {}  }
class C{  public CResultColumnWrapper(final INaviInstruction startInstruction,final String trackedRegister,final CInstructionResult instructionResult){  Preconditions.checkNotNull(startInstruction,"IE01677: Start instruction argument can not be null");  Preconditions.checkNotNull(trackedRegister,"IE01678: Tracked register argument can not be null");  Preconditions.checkNotNull(instructionResult,"IE01679: Instruction result argument can not be null");  m_startInstruction=startInstruction;  m_trackedRegister=trackedRegister;  m_instructionResult=instructionResult;}  }
class C{  public static DateTime parseDateTime(String s) throws ParseException {  final int l=s.length();  if (l < 10)   throw new ParseException("Cannot parse DateTime from " + s + " expecting format 'yyyy-MM-dd'T'hh:mm:ssZ', for example '2011-04-13T11:47:12Z' for UTC timezone",0);  int year=Integer.parseInt(s.substring(0,4));  int month=Integer.parseInt(s.substring(5,7));  int day=Integer.parseInt(s.substring(8,10));  int hour=(l < 13) ? 0 : Integer.parseInt(s.substring(11,13));  int min=(l < 16) ? 0 : Integer.parseInt(s.substring(14,16));  int sec=(l < 19) ? 0 : Integer.parseInt(s.substring(17,19));  TimeZone timeZone=UTC;  if (l > 19) {    String tz=s.substring(19);    if (tz.charAt(0) == '+' || tz.charAt(0) == '-')     tz="GMT" + tz;    timeZone=TimeZone.getTimeZone(tz);  }  return new DateTime(year,month - 1,day,hour,min,sec,0,timeZone);}  }
class C{  public Update where(Criterion criterion){  if (criterion != null) {    this.criterions.add(criterion);    invalidateCompileCache();  }  return this;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"div");  if (instruction.getOperands().size() != 1) {    throw new InternalTranslationException("Error: Argument instruction is not a div instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final IOperandTree divisorOperand=operands.get(0);  final OperandSize size=Helpers.getOperandSize(divisorOperand);  final TranslationResult resultDividend=Helpers.loadFirstDivOperand(environment,offset,size);  instructions.addAll(resultDividend.getInstructions());  offset=baseOffset + instructions.size();  final String dividend=resultDividend.getRegister();  final TranslationResult resultDivisor=Helpers.translateOperand(environment,offset,divisorOperand,true);  instructions.addAll(resultDivisor.getInstructions());  offset=baseOffset + instructions.size();  final String divisor=resultDivisor.getRegister();  final String divResult=environment.getNextVariableString();  final String modResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createDiv(offset++,size,dividend,size,divisor,size,divResult));  instructions.add(ReilHelpers.createMod(offset++,size,dividend,size,divisor,size,modResult));  instructions.addAll(Helpers.writeDivResult(environment,offset++,divResult,modResult,size));  offset=baseOffset + instructions.size();  instructions.add(ReilHelpers.createUndef(offset++,OperandSize.BYTE,Helpers.AUXILIARY_FLAG));  instructions.add(ReilHelpers.createUndef(offset++,OperandSize.BYTE,Helpers.CARRY_FLAG));  instructions.add(ReilHelpers.createUndef(offset++,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  instructions.add(ReilHelpers.createUndef(offset++,OperandSize.BYTE,Helpers.PARITY_FLAG));  instructions.add(ReilHelpers.createUndef(offset++,OperandSize.BYTE,Helpers.SIGN_FLAG));  instructions.add(ReilHelpers.createUndef(offset++,OperandSize.BYTE,Helpers.ZERO_FLAG));}  }
class C{  public DrawerBuilder addDrawerItems(@NonNull IDrawerItem... drawerItems){  this.getItemAdapter().add(drawerItems);  return this;}  }
class C{  public EventDefinition_ createEventDefinition_(){  EventDefinition_Impl eventDefinition_=new EventDefinition_Impl();  return eventDefinition_;}  }
class C{  public void connectToBeanContext(BeanContext in_bc) throws PropertyVetoException {  if (in_bc != null) {    in_bc.addBeanContextMembershipListener(this);    beanContextChildSupport.setBeanContext(in_bc);  }}  }
class C{  public void testAttributeWithMissing(){  ((MergeInfrequentNominalValues)m_Filter).setAttributeIndices("5");  ((MergeInfrequentNominalValues)m_Filter).setMinimumFrequency(100);  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(m_Instances.numInstances(),result.numInstances());  int mergedIndex=-1;  for (int i=0; i < result.numInstances(); i++) {    if (m_Instances.instance(i).isMissing(4)) {      assertTrue("Missing in input should give missing in result",result.instance(i).isMissing(4));    } else     if ((m_Instances.instance(i).value(4) == 1) || (m_Instances.instance(i).value(4) == 2)) {      if (mergedIndex == -1) {        mergedIndex=(int)result.instance(i).value(4);      } else {        assertEquals("Checking merged value for instance: " + (i + 1),mergedIndex,(int)result.instance(i).value(4));      }    }  }}  }
class C{  public TextEditorPane(int textMode,boolean wordWrapEnabled){  super(textMode);  setLineWrap(wordWrapEnabled);  try {    init(null,null);  } catch (  IOException ioe) {    ioe.printStackTrace();  }}  }
class C{  private void addSMISProviderIntoActiveProviderCache(String smisProviderURI){  if (StringUtils.isNotEmpty(smisProviderURI)) {    ACTIVE_SMIS_PROVIDERS_CACHE.add(smisProviderURI);  }}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    zzEndRead+=zzFinalHighSurrogate;    zzFinalHighSurrogate=0;    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {    char newBuffer[]=new char[zzBuffer.length * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;    zzEndRead+=zzFinalHighSurrogate;    zzFinalHighSurrogate=0;  }  int requested=zzBuffer.length - zzEndRead;  int totalRead=0;  while (totalRead < requested) {    int numRead=zzReader.read(zzBuffer,zzEndRead + totalRead,requested - totalRead);    if (numRead == -1) {      break;    }    totalRead+=numRead;  }  if (totalRead > 0) {    zzEndRead+=totalRead;    if (totalRead == requested) {      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {        --zzEndRead;        zzFinalHighSurrogate=1;      }    }    return false;  }  return true;}  }
class C{  public Builder(String name){  Assert.hasText(name,"Not allowed to create a Role with an empty name");  role=new Role(name);  role.immutable=false;}  }
class C{  void ensureDataAvailable(final long position){  if (position > commitOffset + 1) {    log.warn("Oldest kafka position is {} and commit offset is {}, updating",position,commitOffset);    commitOffset=position;  }  if (position > sentOffset + 1) {    log.warn("Oldest kafka position is {} and sent offset is {}, updating",position,sentOffset);    sentOffset=position;  }}  }
class C{  @Override public void generateCode(BlockScope currentScope,boolean valueRequired){  BranchLabel falseLabel, endifLabel;  if (this.constant != Constant.NotAConstant) {    return;  }switch ((this.bits & OperatorMASK) >> OperatorSHIFT) {case NOT:switch ((this.expression.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) {case T_boolean:      this.expression.generateOptimizedBoolean(currentScope,null,new BranchLabel(),valueRequired);    break;}break;case TWIDDLE:switch ((this.expression.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) {case T_int:this.expression.generateCode(currentScope,valueRequired);break;case T_long:this.expression.generateCode(currentScope,valueRequired);}break;case MINUS:if (this.constant != Constant.NotAConstant) {} else {this.expression.generateCode(currentScope,valueRequired);}break;case PLUS:this.expression.generateCode(currentScope,valueRequired);}}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TANNOTABLE_ELEMENT__ANNOTATIONS:    getAnnotations().clear();  getAnnotations().addAll((Collection<? extends TAnnotation>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected boolean canResponseHaveBody(final HttpRequest request,final HttpResponse response){  if ("HEAD".equalsIgnoreCase(request.getRequestLine().getMethod())) {    return false;  }  int status=response.getStatusLine().getStatusCode();  return status >= HttpStatus.SC_OK && status != HttpStatus.SC_NO_CONTENT && status != HttpStatus.SC_NOT_MODIFIED && status != HttpStatus.SC_RESET_CONTENT;}  }
class C{  public static IndexType createNonUnique(boolean persistent){  return createNonUnique(persistent,false,false);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:22.816 -0500",hash_original_method="222D378B2B8943C109AD4B8264ED828B",hash_generated_method="1EEF55911D982D9804A2FF9D6A90314B") public boolean compress(CompressFormat format,int quality,OutputStream stream){  checkRecycled("Can't compress a recycled bitmap");  if (stream == null) {    throw new NullPointerException();  }  if (quality < 0 || quality > 100) {    throw new IllegalArgumentException("quality must be 0..100");  }  stream.addTaint(this.getTaint());  byte[] array=new byte[WORKING_COMPRESS_STORAGE];  array[0]=(byte)this.getTaintInt();  array.addTaint(this.getTaint());  return nativeCompress(mNativeBitmap,format.nativeInt,quality,stream,array);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:42.190 -0500",hash_original_method="9444E4DD6F96D0E4E7D1939FD8BB2A49",hash_generated_method="61BC4C7C6279566227BA9078B67FA7D5") public static boolean constantTimeAreEqual(byte[] a,byte[] b){  if (a == b) {    return true;  }  if (a == null || b == null) {    return false;  }  if (a.length != b.length) {    return false;  }  int nonEqual=0;  for (int i=0; i != a.length; i++) {    nonEqual|=(a[i] ^ b[i]);  }  return nonEqual == 0;}  }
class C{  public static IgfsDirectoryInfo createDirectory(IgniteUuid id){  return createDirectory(id,null,null);}  }
class C{  public void activateObject(PooledObject<Connection> p) throws Exception {}  }
class C{  public FastStringBuffer append(char[] chars,int offset,int len){  int newCount=count + len;  if (newCount > value.length) {    resizeForMinimum(newCount);  }  System.arraycopy(chars,offset,value,count,len);  count=newCount;  return this;}  }
class C{  public void readFromPacketNBT(NBTTagCompound cmp){}  }
class C{  private Object readResolve(){synchronized (levels) {    for (    Level level : levels) {      if (value != level.value) {        continue;      }      if (!name.equals(level.name)) {        continue;      }      if (Objects.equal(resourceBundleName,level.resourceBundleName)) {        return level;      }    }    levels.add(this);    return this;  }}  }
class C{  private LR1State mergeStates(LR1State state,HashMap<LR1State,LR1State> equalStates){  LR1State ret=state;  for (  LR1State s : equalStates.keySet()) {    if (equalStates.get(s) == state)     ret=ret.merge(s);  }  for (  LR1State s : equalStates.keySet()) {    if (equalStates.get(s) == state)     equalStates.put(s,ret);  }  return ret;}  }
class C{  public static Label createLabel(Composite parent,String text,int hspan){  Label l=new Label(parent,SWT.NONE);  l.setFont(parent.getFont());  if (text != null) {    l.setText(text);  }  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=hspan;  gd.grabExcessHorizontalSpace=false;  l.setLayoutData(gd);  return l;}  }
class C{  public void addOneToOneChatComposingStatus(ContactId contact,boolean status){synchronized (getImsServiceSessionOperationLock()) {    mOneToOneChatComposingStatusToNotify.put(contact,status);  }}  }
class C{  public boolean isForeignCurrency(){  Object oo=get_Value(COLUMNNAME_IsForeignCurrency);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void processhostpacket(SimEvent ev){  NetworkPacket hspkt=(NetworkPacket)ev.getData();  NetworkHost hs=hostlist.get(hspkt.recieverhostid);  hs.packetrecieved.add(hspkt);}  }
class C{  public int intValue(){  return value;}  }
class C{  public static double note(String aNote,int aOctave){  int i;  double freq;  int enharmonic=0;  aNote=aNote.toUpperCase();  i=aNote.indexOf(FLAT);  if (i > -1) {    aNote=aNote.substring(i - 1,1);    enharmonic=-1;  }  i=aNote.indexOf(SHARP);  if (i > -1) {    aNote=aNote.substring(i - 1,1);    enharmonic=1;  }  freq=getOctaveIndex(aNote,enharmonic);  if (aOctave == 4) {    return freq;  } else {    int d=aOctave - 4;    int j=Math.abs(d);    for (i=0; i < j; ++i) {      if (d > 0)       freq*=2; else       freq*=.5;    }    return freq;  }}  }
class C{  public static void loadUserAvatar(Context context,MXSession session,ImageView imageView,User user){  if (null != user) {    VectorUtils.loadUserAvatar(context,session,imageView,user.getAvatarUrl(),user.user_id,user.displayname);  }}  }
class C{  private void partitionConstraintValidate(String query){  if (_partitionValues != null && _partitionValues.size() > 1) {    final String[] values=_partitionValues.get(0);    for (int i=1; i < _partitionValues.size(); ++i) {      final String[] tmpValues=_partitionValues.get(i);      for (int j=0; j < values.length; ++j) {        if (values[j] == null || (!values[j].equals(tmpValues[j]))) {          final String errMsg="One query for multiple partitions is NOT allowed for now! Query: " + query;          LOG.error(errMsg);          throw new IllegalArgumentException(errMsg);        }      }    }  }}  }
class C{  public static int readOrientationFromTIFF(InputStream is,int length) throws IOException {  TiffHeader tiffHeader=new TiffHeader();  length=readTiffHeader(is,length,tiffHeader);  int toSkip=tiffHeader.firstIfdOffset - 8;  if (length == 0 || toSkip > length) {    return 0;  }  is.skip(toSkip);  length-=toSkip;  length=moveToTiffEntryWithTag(is,length,tiffHeader.isLittleEndian,TIFF_TAG_ORIENTATION);  return getOrientationFromTiffEntry(is,length,tiffHeader.isLittleEndian);}  }
class C{  private void synchronizeDebugger(final IDebugger oldDebugger,final IDebugger newDebugger){  if (oldDebugger != null) {    oldDebugger.getProcessManager().removeListener(m_processListener);  }  if (newDebugger != null) {    newDebugger.getProcessManager().addListener(m_processListener);  }}  }
class C{  public void decreaseTimer(int time){  if (this.timer - time > 0.0D) {    this.timer-=time;  } else {    this.timer=0;  }}  }
class C{  public final Collection<? extends CRL> generateCRLs(InputStream inStream) throws CRLException {  return spiImpl.engineGenerateCRLs(inStream);}  }
class C{  boolean merge(final ClassWriter cw,final Frame frame,final int edge){  boolean changed=false;  int i, s, dim, kind, t;  int nLocal=inputLocals.length;  int nStack=inputStack.length;  if (frame.inputLocals == null) {    frame.inputLocals=new int[nLocal];    changed=true;  }  for (i=0; i < nLocal; ++i) {    if (outputLocals != null && i < outputLocals.length) {      s=outputLocals[i];      if (s == 0) {        t=inputLocals[i];      } else {        dim=s & DIM;        kind=s & KIND;        if (kind == BASE) {          t=s;        } else {          if (kind == LOCAL) {            t=dim + inputLocals[s & VALUE];          } else {            t=dim + inputStack[nStack - (s & VALUE)];          }          if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {            t=TOP;          }        }      }    } else {      t=inputLocals[i];    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputLocals,i);  }  if (edge > 0) {    for (i=0; i < nLocal; ++i) {      t=inputLocals[i];      changed|=merge(cw,t,frame.inputLocals,i);    }    if (frame.inputStack == null) {      frame.inputStack=new int[1];      changed=true;    }    changed|=merge(cw,edge,frame.inputStack,0);    return changed;  }  int nInputStack=inputStack.length + owner.inputStackTop;  if (frame.inputStack == null) {    frame.inputStack=new int[nInputStack + outputStackTop];    changed=true;  }  for (i=0; i < nInputStack; ++i) {    t=inputStack[i];    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,i);  }  for (i=0; i < outputStackTop; ++i) {    s=outputStack[i];    dim=s & DIM;    kind=s & KIND;    if (kind == BASE) {      t=s;    } else {      if (kind == LOCAL) {        t=dim + inputLocals[s & VALUE];      } else {        t=dim + inputStack[nStack - (s & VALUE)];      }      if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {        t=TOP;      }    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,nInputStack + i);  }  return changed;}  }
class C{  public void addElevationModel(ElevationModel em){  if (em == null) {    String msg=Logging.getMessage("nullValue.ElevationModelIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.elevationModels.add(em);  this.sortElevationModels();}  }
class C{  public void test_setShortLjava_lang_ObjectS() throws Exception {  TestField x=new TestField();  Field f=null;  short val=0;  try {    f=x.getClass().getDeclaredField("shortField");    f.setShort(x,Short.MIN_VALUE);    val=f.getShort(x);  } catch (  Exception e) {    fail("Exception during setShort test : " + e.getMessage());  }  assertEquals("Returned incorrect short field value",Short.MIN_VALUE,val);  boolean thrown=false;  try {    f=x.getClass().getDeclaredField("booleanField");    f.setShort(x,Short.MIN_VALUE);    fail("Accessed field of invalid type");  } catch (  IllegalArgumentException ex) {    thrown=true;  }  assertTrue("IllegalArgumentException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("shortPFField");    assertFalse(f.isAccessible());    f.setShort(x,Short.MIN_VALUE);    fail("Accessed inaccessible field");  } catch (  IllegalAccessException ex) {    thrown=true;  }  assertTrue("IllegalAccessException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("shortField");    f.setShort(null,Short.MIN_VALUE);    fail("NullPointerException expected but not thrown");  } catch (  NullPointerException ex) {    thrown=true;  }catch (  Exception ex) {    fail("NullPointerException expected but not thrown");  }  assertTrue("NullPointerException expected but not thrown",thrown);  f=x.getClass().getDeclaredField("shortSField");  f.setShort(null,Short.MIN_VALUE);  val=f.getShort(x);  assertEquals("Returned incorrect short field value",Short.MIN_VALUE,val);}  }
class C{  public static AuditLevel toLevel(int val,Level defaultLevel){  return AUDIT;}  }
class C{  public static void runSubActions(List<ModelAction> actions,Map<String,Object> context){  if (actions == null)   return;  for (  ModelAction action : actions) {    if (Debug.verboseOn())     Debug.logVerbose("Running action " + action.getClass().getName(),module);    try {      action.runAction(context);    } catch (    GeneralException e) {      throw new RuntimeException(e);    }  }}  }
class C{  public static String replaceLastSuffix(String s,String separator,String newElementName){  Pair<String,String> quotes=null;  if (isQuoted(s)) {    quotes=getQuotes(s);    s=stripQuotesAroundValue(s);  }  s=removeLastSuffix(s,separator);  if (s.length() > 0) {    s+=separator;  }  s+=newElementName;  if (quotes != null) {    s=quotes.first + s + quotes.second;  }  return s;}  }
class C{  public static Stamp forKind(JavaKind kind){  assert stampCache[kind.ordinal()] != null : "unexpected forKind(" + kind + ")";  return stampCache[kind.ordinal()];}  }
class C{  @Override public E poll(){  PseudoEntry<E> entry=this.delegate.poll();  while ((entry != null) && (!entry.valid)) {    entry=this.delegate.poll();  }  if (entry == null) {    return null;  }  this.lastEntry.remove(entry.value);  return entry.value;}  }
class C{  @Deprecated public static <T>T rand(List<T> l){  A.notNull(l,"l");  return l.get(ThreadLocalRandom8.current().nextInt(l.size()));}  }
class C{  protected Object readObjectImpl(Class cl) throws IOException {  try {    Object obj=cl.newInstance();    if (_refs == null)     _refs=new ArrayList();    _refs.add(obj);    HashMap fieldMap=getFieldMap(cl);    int code=read();    for (; code >= 0 && code != 'z'; code=read()) {      unread();      Object key=readObject();      Field field=(Field)fieldMap.get(key);      if (field != null) {        Object value=readObject(field.getType());        field.set(obj,value);      } else {        Object value=readObject();      }    }    if (code != 'z')     throw expect("map",code);    try {      Method method=cl.getMethod("readResolve",new Class[0]);      return method.invoke(obj,new Object[0]);    } catch (    Exception e) {    }    return obj;  } catch (  IOException e) {    throw e;  }catch (  Exception e) {    throw new IOExceptionWrapper(e);  }}  }
class C{  private MutableBigInteger modInverse(MutableBigInteger mod){  MutableBigInteger p=new MutableBigInteger(mod);  MutableBigInteger f=new MutableBigInteger(this);  MutableBigInteger g=new MutableBigInteger(p);  SignedMutableBigInteger c=new SignedMutableBigInteger(1);  SignedMutableBigInteger d=new SignedMutableBigInteger();  MutableBigInteger temp=null;  SignedMutableBigInteger sTemp=null;  int k=0;  if (f.isEven()) {    int trailingZeros=f.getLowestSetBit();    f.rightShift(trailingZeros);    d.leftShift(trailingZeros);    k=trailingZeros;  }  while (!f.isOne()) {    if (f.isZero())     throw new ArithmeticException("BigInteger not invertible.");    if (f.compare(g) < 0) {      temp=f;      f=g;      g=temp;      sTemp=d;      d=c;      c=sTemp;    }    if (((f.value[f.offset + f.intLen - 1] ^ g.value[g.offset + g.intLen - 1]) & 3) == 0) {      f.subtract(g);      c.signedSubtract(d);    } else {      f.add(g);      c.signedAdd(d);    }    int trailingZeros=f.getLowestSetBit();    f.rightShift(trailingZeros);    d.leftShift(trailingZeros);    k+=trailingZeros;  }  while (c.sign < 0)   c.signedAdd(p);  return fixup(c,p,k);}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public static synchronized void installTimerContextListener(ContextListener s){  int numListeners=timerContextListeners.length;  ContextListener[] tmp=new ContextListener[numListeners + 1];  for (int i=0; i < numListeners; i++) {    tmp[i]=timerContextListeners[i];  }  tmp[numListeners]=s;  timerContextListeners=tmp;}  }
class C{  private long toLong(){  assert (intLen <= 2) : "this MutableBigInteger exceeds the range of long";  if (intLen == 0)   return 0;  long d=value[offset] & LONG_MASK;  return (intLen == 2) ? d << 32 | (value[offset + 1] & LONG_MASK) : d;}  }
class C{  public static String readFirstLine(final String filePath) throws IOException, SyssvcInternalException {  return readLines(filePath)[0];}  }
class C{  public IntervalRatioStatisticalTest(int numberOfGroups){  super();  this.numberOfGroups=numberOfGroups;  data=new ArrayList<Observation>();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:26.731 -0500",hash_original_method="7C9447501CA37C2477868C242A118750",hash_generated_method="E89AF51F11EE4A7F22F37BAAA98FE0BB") public int enumerate(Thread[] threads,boolean recurse){  return enumerateGeneric(threads,recurse,0,true);}  }
class C{  public static List<String> retrievePropertyValues(Entity e,String[] propertyTypes,Class<?>[] classes){  ArrayList<String> values=new ArrayList<String>(propertyTypes.length);  int i=0;  for (  String name : propertyTypes) {    Class<?> c=(i >= classes.length ? null : classes[i]);    if (c == null || c == String.class) {      values.add(e.getSimpleValue(name));    } else     if (c == Integer.class) {      values.add(String.valueOf(e.getInt(name)));    } else {      throw new IllegalArgumentException("Invalid class for propertyType '" + name + "'.");    }    i++;  }  return values;}  }
class C{  public void queryTruncation(boolean truncation) throws SQLException {  Connection connection=setConnection("&jdbcCompliantTruncation=" + truncation);  Statement stmt=connection.createStatement();  stmt.execute("INSERT INTO TruncateExceptionTest (id) VALUES (999)");  stmt.close();  connection.close();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:35.569 -0500",hash_original_method="DE1B2BCCD3B55E7FACB214B3EF8522F8",hash_generated_method="ABB9422B750CE62A42A7A36B491E4432") public static ObjectAnimator ofObject(Object target,String propertyName,TypeEvaluator evaluator,Object... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setObjectValues(values);  anim.setEvaluator(evaluator);  return anim;}  }
class C{  private void createLocalRegion() throws ParseException {  Cache cache=CacheUtils.getCache();  AttributesFactory attributesFactory=new AttributesFactory();  attributesFactory.setDataPolicy(DataPolicy.NORMAL);  RegionAttributes regionAttributes=attributesFactory.create();  Region region=cache.createRegion(regionName,regionAttributes);}  }
class C{  @DSComment("Power management") @DSSpec(DSCat.DEVICE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:28.667 -0500",hash_original_method="4304724C92023C406072B166ABF56DE4",hash_generated_method="6AA21D14C5EDE1271ACE8C5C9841CF80") public void release(){  release(0);}  }
class C{  @PostConstruct public void customInit(){  logger.debug("Looking for Spring active profiles...");  if (env.getActiveProfiles().length == 0) {    logger.info("No Spring profile configured, running with default configuration.");  } else {    logger.info("Detected Spring profiles: {}",Arrays.asList(env.getActiveProfiles()));  }}  }
class C{  public void normalize(){  float norm=this.length();  this.x=this.x / norm;  this.y=this.y / norm;  this.z=this.z / norm;}  }
class C{  public static void initMostUsedValues(MostUsedValues mostUsedValues,ServletContext servletContext){  long interval=1000L * 60L * 60L;  mostUsedValues.cache(interval,14,servletContext,Recipe.CUISINE_ATTRIBUTE);  mostUsedValues.cache(interval,16,servletContext,Recipe.MAIN_INGREDIENT_ATTRIBUTE);}  }
class C{  public CutKeyPairAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("CutKeyPairAction.statusbar"));}  }
class C{  public void writeEntryHeader(byte[] outbuf){  int offset=0;  offset=TarHeader.getNameBytes(this.header.name,outbuf,offset,TarHeader.NAMELEN);  offset=Octal.getOctalBytes(this.header.mode,outbuf,offset,TarHeader.MODELEN);  offset=Octal.getOctalBytes(this.header.userId,outbuf,offset,TarHeader.UIDLEN);  offset=Octal.getOctalBytes(this.header.groupId,outbuf,offset,TarHeader.GIDLEN);  long size=this.header.size;  offset=Octal.getLongOctalBytes(size,outbuf,offset,TarHeader.SIZELEN);  offset=Octal.getLongOctalBytes(this.header.modTime,outbuf,offset,TarHeader.MODTIMELEN);  int csOffset=offset;  for (int c=0; c < TarHeader.CHKSUMLEN; ++c)   outbuf[offset++]=(byte)' ';  outbuf[offset++]=this.header.linkFlag;  offset=TarHeader.getNameBytes(this.header.linkName,outbuf,offset,TarHeader.NAMELEN);  offset=TarHeader.getNameBytes(this.header.magic,outbuf,offset,TarHeader.MAGICLEN);  offset=TarHeader.getNameBytes(this.header.userName,outbuf,offset,TarHeader.UNAMELEN);  offset=TarHeader.getNameBytes(this.header.groupName,outbuf,offset,TarHeader.GNAMELEN);  offset=Octal.getOctalBytes(this.header.devMajor,outbuf,offset,TarHeader.DEVLEN);  offset=Octal.getOctalBytes(this.header.devMinor,outbuf,offset,TarHeader.DEVLEN);  int oblen=outbuf.length;  for (; offset < oblen; )   outbuf[offset++]=0;  long checkSum=this.computeCheckSum(outbuf);  Octal.getCheckSumOctalBytes(checkSum,outbuf,csOffset,TarHeader.CHKSUMLEN);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.900 -0400",hash_original_method="4400B3E15A2A28E8125FDEC9DF38B771",hash_generated_method="92DCC8E1A5682EE4914998B1B41402AB") private ByteOrderMark find(){  for (  ByteOrderMark bom : boms) {    if (matches(bom)) {      return bom;    }  }  return null;}  }
class C{  public boolean connect() throws Exception {  serverAddress=InetAddress.getByName(serverIP);  latch=new CountDownLatch(2);  tcpThread.start();  udpThread.start();  return latch.await(10,TimeUnit.SECONDS);}  }
class C{  public final long verticalDHTPosition(final byte[] wordHash,final int verticalPosition){  assert verticalPosition >= 0 && verticalPosition < verticalPartitions();  long verticalMask=((long)verticalPosition) << this.shiftLength;  return (Distribution.horizontalDHTPosition(wordHash) & partitionMask) | verticalMask;}  }
class C{  public <V2>JavaPairRDD<Tuple2<K,V>,V2> joinGeodeRegion(String regionPath,GeodeConnectionConf connConf){  GeodeJoinRDD<Tuple2<K,V>,K,V2> rdd=rddf.joinGeodeRegion(regionPath,connConf);  ClassTag<Tuple2<K,V>> kt=fakeClassTag();  ClassTag<V2> vt=fakeClassTag();  return new JavaPairRDD<>(rdd,kt,vt);}  }
class C{  private void populateComponentWithValue(FacesContext context,UIComponent component,String componentType,String value,String valueType){  Application application=context.getApplication();  Converter converter=null;  if (!"java.lang.String".equals(valueType) && component instanceof ValueHolder) {    try {      converter=application.createConverter(CarStore.loadClass(valueType,this));      ((ValueHolder)component).setConverter(converter);    } catch (    ClassNotFoundException cne) {      FacesMessage errMsg=MessageFactory.getMessage(CONVERTER_ERROR_MESSAGE_ID,valueType);      throw new IllegalStateException(errMsg.getSummary());    }  }  if (isMultiValue(componentType)) {    UISelectItems items=new UISelectItems();    items.setValue(parseStringIntoArrayList(value,converter));    component.getChildren().add(items);  } else {    if (null != converter) {      component.getAttributes().put("value",converter.getAsObject(context,component,value));    } else {      component.getAttributes().put("value",value);    }  }}  }
class C{  public static int remitLocation(int p_C_BPartner_ID) throws SQLException {  int C_Location_ID=0;  String sql="SELECT IsRemitTo, C_Location_ID " + "FROM C_BPartner_Location " + "WHERE C_BPartner_ID=? "+ "ORDER BY IsRemitTo DESC";  PreparedStatement pstmt=Adempiere.prepareStatement(sql);  pstmt.setInt(1,p_C_BPartner_ID);  ResultSet rs=pstmt.executeQuery();  if (rs.next())   C_Location_ID=rs.getInt(2);  rs.close();  pstmt.close();  return C_Location_ID;}  }
class C{  public final void transformZero(Vec3D normal){  float x, y;  x=m00 * normal.x + m01 * normal.y + m02 * normal.z;  y=m10 * normal.x + m11 * normal.y + m12 * normal.z;  normal.z=m20 * normal.x + m21 * normal.y + m22 * normal.z;  normal.x=x;  normal.y=y;}  }
class C{  public ASTRewriteCorrectionProposal(String name,ASTRewrite rewrite,int relevance,Document document,Images image){  super(name,relevance,document,image);  fRewrite=rewrite;}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;    framingRect=null;    framingRectInPreview=null;  }}  }
class C{  public RestResponseDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  public void testSuspend_DisablesEventBusListener(){  mController.init();  mController.suspend();  SyncFinishedEvent event=new SyncSucceededEvent();  mFakeEventBus.post(event);  assertEquals(0,mFakeEventBus.countRegisteredReceivers());}  }
class C{  public Iterator<String> keys(){  return this.keySet().iterator();}  }
class C{  public Token(int kind,String image){  this.kind=kind;  this.image=image;}  }
class C{  protected List<E> executeQuery(IIndexQuery indexQuery,boolean useForkJoin){  return this.executeQuery(indexQuery,null,null,-1,useForkJoin);}  }
class C{  public String toString(){  if (C_ValidCombination_ID == 0)   return "";  return Combination;}  }
class C{  public boolean isExternalStorageReadable(){  String state=Environment.getExternalStorageState();  return Environment.MEDIA_MOUNTED.equals(state) || Environment.MEDIA_MOUNTED_READ_ONLY.equals(state);}  }
class C{  public boolean isSolvable(){  return a * d - b * c != 0;}  }
class C{  public synchronized int allocateObjectId(){  int i=objectIds.nextClearBit(0);  objectIds.set(i);  return i;}  }
class C{  protected void store(final TransferContent item,final byte[] data){  try {    if (item.name.indexOf("..") > -1) {      logger.error("Cannot store item to cache because .. is not allowed in name " + item.name);      return;    }    String filename=stendhal.getGameFolder() + "cache/" + item.name;    OutputStream os=new FileOutputStream(filename);    try {      os.write(data);    }  finally {      os.close();    }    logger.debug("Content " + item.name + " cached now.");  } catch (  IOException e) {    logger.error("store",e);  }}  }
class C{  public static JCTree skipParens(JCTree tree){  if (tree.hasTag(PARENS))   return skipParens((JCParens)tree); else   return tree;}  }
class C{  public static boolean addShapelessEnchantingRecipe(ItemStack aResult,Enchantment[] aEnchantmentsAdded,int[] aEnchantmentLevelsAdded,Object[] aRecipe){  return addShapelessCraftingRecipe(aResult,aEnchantmentsAdded,aEnchantmentLevelsAdded,true,false,false,false,aRecipe);}  }
class C{  public void removeHeader(String header){  clientHeaderMap.remove(header);}  }
class C{  private static boolean checkObjectGraphIdentityHashCodeCollision(Object obj,Set<Integer> counted,List<Integer> countedList) throws SecurityException {  Stack<Object> stack=new Stack<>();  stack.push(obj);  while (!(stack.isEmpty())) {    Object object=stack.pop();    Integer identityHashCode=Integer.valueOf(System.identityHashCode(object));    boolean added=counted.add(identityHashCode);    if (!added) {      if (!countedList.contains(identityHashCode)) {        return false;      }    } else {      Class<?> clazz=object.getClass();      Class<?> compType=clazz.getComponentType();      if ((compType != null) && (!(compType.isPrimitive()))) {        Object[] array=(Object[])object;        for (        Object element : array) {          if (element != null) {            stack.push(element);          }        }      }      while (clazz != null) {        for (        Field field : clazz.getDeclaredFields()) {          int mod=field.getModifiers();          if ((mod & 0x8) == 0) {            Class<?> fieldClass=field.getType();            if (!(fieldClass.isPrimitive())) {              if (!(field.isAccessible())) {                field.setAccessible(true);              }              try {                Object subObject=field.get(object);                if (subObject != null) {                  stack.push(subObject);                }              } catch (              IllegalAccessException illAcc) {                throw new InternalError("Couldn't read " + field);              }            }          }        }        clazz=clazz.getSuperclass();      }    }  }  return true;}  }
class C{  public int readUnsignedByte(){  return (data[position++] & 0xFF);}  }
class C{  public static synchronized Offset allocateNumericSlot(int size,boolean field){  int slot;  if (size == 16) {    nextNumericSlot-=3;    if ((nextNumericSlot & 1) != 0) {      nextNumericSlot--;      numericSlotHole=nextNumericSlot + 4;    }    if ((nextNumericSlot & 3) != 0) {      nextNumericSlot-=2;    }    slot=nextNumericSlot;    nextNumericSlot--;    if (field) {      numericFieldVector.set(slot);      numericFieldVector.set(slot + 1);      numericFieldVector.set(slot + 2);      numericFieldVector.set(slot + 3);    }  } else   if (size == BYTES_IN_LONG) {    nextNumericSlot--;    if ((nextNumericSlot & 1) != 0) {      nextNumericSlot--;      numericSlotHole=nextNumericSlot + 2;    }    slot=nextNumericSlot;    nextNumericSlot--;    if (field) {      numericFieldVector.set(slot);      numericFieldVector.set(slot + 1);    }  } else {    if (numericSlotHole != middleOfTable) {      slot=numericSlotHole;      numericSlotHole=middleOfTable;    } else {      slot=nextNumericSlot;      nextNumericSlot--;    }    if (field) {      numericFieldVector.set(slot);    }  }  if (nextNumericSlot < 0) {    enlargeTable();  }  return slotAsOffset(slot);}  }
class C{  public static Dependency createDependencyAnnotation(JCas jCas,GrammaticalRelation aDependencyType,Token aGovernor,Token aDependent){  String dependencyTypeName=DEPPACKAGE + aDependencyType.getShortName().toUpperCase();  Type type=jCas.getTypeSystem().getType(dependencyTypeName);  if (type == null) {    type=JCasUtil.getType(jCas,Dependency.class);  }  Dependency dep=(Dependency)jCas.getCas().createFS(type);  dep.setDependencyType(aDependencyType.toString());  dep.setGovernor(aGovernor);  dep.setDependent(aDependent);  dep.setBegin(dep.getDependent().getBegin());  dep.setEnd(dep.getDependent().getEnd());  dep.addToIndexes();  return dep;}  }
class C{  public boolean contains(int index){  return index >= getFirst() && index <= getLast();}  }
class C{  public boolean applyOptions() throws IOException {  if (!isDirty())   return false;  StatusBarSettings.BANDWIDTH_DISPLAY_ENABLED.setValue(CHECK_BOX.isSelected());  GUIMediator.instance().getStatusLine().refresh();  return false;}  }
class C{  public void sendMessage(final XDROutputBuffer xdr) throws IOException {  for (  SocketAddress socketAddress : metricsServers) {    final DatagramPacket packet=new DatagramPacket(xdr.getBuffer(),xdr.getLength(),socketAddress);    datagramSocket.send(packet);  }}  }
class C{  public TabButton(){  final int size=17;  setPreferredSize(new Dimension(size,size));  setToolTipText("Close this tab.");  setUI(new BasicButtonUI());  setContentAreaFilled(false);  setFocusable(false);  setBorder(BorderFactory.createBevelBorder(1));  setBorderPainted(false);  addMouseListener(buttonMouseListener);  setRolloverEnabled(true);  addActionListener(this);}  }
class C{  private void subscribe(){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  String actionTaken=context.getString(R.string.toast_sub_success,(Object[])additionalArgs);  c.addAction(actionTaken);  Notify.toast(context,actionTaken,Toast.LENGTH_SHORT);}  }
class C{  public boolean isRecursive(){  return recursive;}  }
class C{  public boolean hasNameValue(String name){  return hmap.containsKey(name.toLowerCase());}  }
class C{  public static ECPoint.F2m tau(ECPoint.F2m p){  return p.tau();}  }
class C{  public static <E extends Comparable<E>>E max(E[][] list){  E max=list[0][0];  for (int i=0; i < list.length; i++) {    for (int j=0; j < list[i].length; j++) {      if (list[i][j].compareTo(max) > 0)       max=list[i][j];    }  }  return max;}  }
class C{  public static boolean addExchangedLocators(Map<Integer,Set<DistributionLocatorId>> locators,LocatorMembershipListener locatorListener){  ConcurrentHashMap<Integer,Set<DistributionLocatorId>> allLocators=(ConcurrentHashMap<Integer,Set<DistributionLocatorId>>)locatorListener.getAllLocatorsInfo();  if (!allLocators.equals(locators)) {    for (    Map.Entry<Integer,Set<DistributionLocatorId>> entry : locators.entrySet()) {      Set<DistributionLocatorId> existingValue=allLocators.putIfAbsent(entry.getKey(),new CopyOnWriteHashSet<DistributionLocatorId>(entry.getValue()));      if (existingValue != null) {        Set<DistributionLocatorId> localLocators=allLocators.get(entry.getKey());        if (!localLocators.equals(entry.getValue())) {          entry.getValue().removeAll(localLocators);          for (          DistributionLocatorId locator : entry.getValue()) {            localLocators.add(locator);            addServerLocator(entry.getKey(),locatorListener,locator);            locatorListener.locatorJoined(entry.getKey(),locator,null);          }        }      } else {        for (        DistributionLocatorId locator : entry.getValue()) {          addServerLocator(entry.getKey(),locatorListener,locator);          locatorListener.locatorJoined(entry.getKey(),locator,null);        }      }    }    return true;  }  return false;}  }
class C{  private static KeySpec decryptPrivateKey(final byte[] encryptedPrivateKey) throws GeneralSecurityException {  EncryptedPrivateKeyInfo epkInfo;  try {    epkInfo=new EncryptedPrivateKeyInfo(encryptedPrivateKey);  } catch (  final IOException ex) {    return null;  }  final String pass="android";  final char[] password=pass.toCharArray();  final SecretKeyFactory skFactory=SecretKeyFactory.getInstance(epkInfo.getAlgName());  final Key key=skFactory.generateSecret(new PBEKeySpec(password));  final Cipher cipher=Cipher.getInstance(epkInfo.getAlgName());  cipher.init(Cipher.DECRYPT_MODE,key,epkInfo.getAlgParameters());  try {    return epkInfo.getKeySpec(cipher);  } catch (  final InvalidKeySpecException ex) {    Log.e(TAG,"Password for keyFile may be bad.",ex);    return null;  }}  }
class C{  @Override public boolean loadDeferred(){  return true;}  }
class C{  protected void readExtras(@NonNull Bundle bundle){}  }
class C{  protected void writeHeader() throws ConfigurationException, IOException {  if (this.output != null) {    close();  }  this.counter++;  String filePath=PATH_OUTPUT_SQL_FILES + this.outputName + "_"+ counter;  this.output=OutputFactory.getOutputStream(filePath);  this.dataArchive=new File(filePath);  this.output.flush();}  }
class C{  @Override public void perform(IR ir){  if (ir.desiredSSAOptions.getAbort())   return;  IndexPropagationSystem system=new IndexPropagationSystem(ir);  if (DEBUG) {    System.out.print("Solving...");  }  system.solve();  if (DEBUG) {    System.out.println("done");  }  DF_Solution solution=system.getSolution();  if (DEBUG) {    System.out.println("Index Propagation Solution: " + solution);  }  ir.HIRInfo.indexPropagationSolution=solution;}  }
class C{  public <R>MapStream<R,V> mapKey(Function<? super K,? extends R> mapper){  return new MapStream<>(inner.map(null));}  }
class C{  @Override public void accept(final Visitor v){  throw new UnsupportedOperationException();}  }
class C{  @Nullable public static ShardId extractShardId(LeafReader reader){  final ElasticsearchLeafReader esReader=ElasticsearchLeafReader.getElasticsearchLeafReader(reader);  if (esReader != null) {    assert reader.getRefCount() > 0 : "ElasticsearchLeafReader is already closed";    return esReader.shardId();  }  return null;}  }
class C{  public static List<BlockNode> filterPredecessors(BlockNode block){  List<BlockNode> predecessors=block.getPredecessors();  List<BlockNode> list=new ArrayList<BlockNode>(predecessors.size());  for (  BlockNode pred : predecessors) {    IgnoreEdgeAttr edgeAttr=pred.get(AType.IGNORE_EDGE);    if (edgeAttr == null) {      list.add(pred);    } else     if (!edgeAttr.contains(block)) {      list.add(pred);    }  }  return list;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:53.155 -0500",hash_original_method="7A0506F80A0A925F6D871EC270864AAB",hash_generated_method="71E7462F24A8A3736FDA626CC2C92154") public void addConnection(int connectionId,IAccessibilityServiceConnection connection){synchronized (sConnectionCache) {    sConnectionCache.put(connectionId,connection);  }}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public void before(PropertyInfoRestRep oldProps,PropertyInfoRestRep newProps){  String newValue=newProps.getProperty(getPropertyName());  if (newValue == null) {    return;  }  int intNewValue=Integer.parseInt(newValue);  if (intNewValue < 0 || intNewValue > Constants.MAX_PASSWORD_CHANGE_INTERVAL_IN_MINUTES) {    throw BadRequestException.badRequests.passwordIntervalNotInRange(Constants.MIN_PASSWORD_CHANGE_INTERVAL_IN_MINUTES,Constants.MAX_PASSWORD_CHANGE_INTERVAL_IN_MINUTES);  }}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public boolean allowsTouchInterceptionWhileZoomed(){  return mAllowTouchInterceptionWhileZoomed;}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static String generateToken(String cookie,String url,String method,long currentTimeSecs){  String data=url + " " + method+ " "+ currentTimeSecs;  byte[] hmac;  try {    hmac=computeSHA1HMac(data,cookie);  } catch (  GeneralSecurityException e) {    throw new RuntimeException("Security exception - " + e.getMessage());  }  return Base64.encodeWebSafe(hmac,true);}  }
class C{  public void closeSequence(){  closeSequence(SequenceTag);}  }
class C{  @Inject public ConsolePartPresenter(ConsolePartView view){  this.view=view;  this.view.setTitle(TITLE);  this.view.setDelegate(this);}  }
class C{  public JavaMethod findMethod(String name,String descriptor){  ArrayList<JavaMethod> methodList=getMethodList();  for (int i=0; i < methodList.size(); i++) {    JavaMethod method=methodList.get(i);    if (method.getName().equals(name) && method.getDescriptor().equals(descriptor))     return method;  }  return null;}  }
class C{  public boolean union(RWSet other){  throw new RuntimeException("Can't do that");}  }
class C{  public boolean isPostingType(){  String PostingType=getPostingType();  return (PostingType != null && PostingType.length() > 0);}  }
class C{  @Override public void postProcess(ResultProducer rp) throws Exception {  m_ResultListener.postProcess(this);}  }
class C{  public static void draw(GL2 gl,Shape s){  gl.glBegin(GL2.GL_LINE_STRIP);  drawShape(gl,s);  gl.glEnd();}  }
class C{  public static final Object eval(String expression,Map<String,Object> context) throws EvalError {  Object o=null;  if (expression == null || expression.equals("")) {    Debug.logError("BSH Evaluation error. Empty expression",module);    return null;  }  if (Debug.verboseOn())   Debug.logVerbose("Evaluating -- " + expression,module);  if (Debug.verboseOn())   Debug.logVerbose("Using Context -- " + context,module);  try {    Interpreter bsh=makeInterpreter(context);    o=bsh.eval(expression);    if (Debug.verboseOn())     Debug.logVerbose("Evaluated to -- " + o,module);    NameSpace ns=bsh.getNameSpace();    String[] varNames=ns.getVariableNames();    for (    String varName : varNames) {      context.put(varName,bsh.get(varName));    }  } catch (  EvalError e) {    Debug.logError(e,"BSH Evaluation error.",module);    throw e;  }  return o;}  }
class C{  public static String prechomp(String str,String sep){  int idx=str.indexOf(sep);  if (idx != -1) {    return str.substring(idx + sep.length());  } else {    return str;  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementremoveattributenodenomodificationallowederr.class,args);}  }
class C{  @KnownFailure("not supported") public void testDelete6() throws SQLException {  DatabaseCreator.fillFKStrictTable(conn);  statement.execute("DELETE FROM " + DatabaseCreator.FKSTRICT_TABLE + " WHERE name_id = ANY (SELECT id FROM "+ DatabaseCreator.PARENT_TABLE+ " WHERE id > 1)");  ResultSet r=statement.executeQuery("SELECT COUNT(*) FROM " + DatabaseCreator.FKSTRICT_TABLE + " WHERE name_id = 1;");  r.next();  assertEquals("Should be 2 rows",2,r.getInt(1));  r.close();}  }
class C{  public static void validatePositiveNumber(long fieldValue,String fieldName){  if (fieldValue <= 0) {    logAndThrow(String.format("%s should be a positive number: %d",fieldName,fieldValue));  }}  }
class C{  public ArrayDeque(){  elements=new Object[16];}  }
class C{  public ProcessModalDialog(Window parent,String title,ASyncProcess aProcess,int WindowNo,int AD_Process_ID,int tableId,int recordId,boolean autoStart){  this(aProcess,WindowNo,AD_Process_ID,tableId,recordId,autoStart);}  }
class C{  protected void onError(CloudException err){  Log.e(err);}  }
class C{  public BrushTool(String permission){  checkNotNull(permission);  this.permission=permission;}  }
class C{  public static boolean isFullCopy(UnManagedVolume volume){  if (null == volume.getVolumeCharacterstics()) {    return false;  }  String status=volume.getVolumeCharacterstics().get(SupportedVolumeCharacterstics.IS_FULL_COPY.toString());  return TRUE.equals(status);}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public static void main(String args[]){  Main main=new Main();  args=main.processOptions(args);  if (args == null) {    if (main.printHelp) {      System.out.println(ToolErrorReporter.getMessage("msg.jsc.usage",Main.class.getName()));      System.exit(0);    }    System.exit(1);  }  if (!main.reporter.hasReportedError()) {    main.processSource(args);  }}  }
class C{  public Secret create(){  secretDAO.createSecret(name,encryptedSecret,hmac,creator,metadata,expiry,description,type,generationOptions);  return transformer.transform(secretDAO.getSecretByName(name).get());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public ServiceChangedException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public TypeBound(InferenceVariable left,TypeRef right,Variance variance){  this.left=left;  this.right=right;  this.variance=variance;}  }
class C{  public static Builder builder(){  return new Builder(new RegisterResponse());}  }
class C{  public ResourceAppender(Layout layout,Resource res,Charset charset,RetireListener listener) throws IOException {  this(layout,res,charset,true,false,60,DEFAULT_BUFFER_SIZE,listener);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:13.387 -0400",hash_original_method="3DEF91AB073042C444F1A120853B7161",hash_generated_method="5C6F8479B12BAEC8F1C43EBE644FC669") public AnnotationFormatError(String message,Throwable cause){  super(message,cause);}  }
class C{  private void parse(final String osmFilename,final InputStream stream) throws UncheckedIOException {  if (this.hierarchyLayers.isEmpty()) {    log.warn("No hierarchy layer specified. Will convert every highway specified by setHighwayDefaults.");  }  OsmXmlParser parser=null;  if (this.slowButLowMemory) {    log.info("parsing osm file first time: identifying nodes used by ways");    parser=new OsmXmlParser(this.nodes,this.ways,this.transform);    parser.enableOptimization(1);    if (stream != null) {      parser.parse(new InputSource(stream));    } else {      parser.readFile(osmFilename);    }    log.info("parsing osm file second time: loading required nodes and ways");    parser.enableOptimization(2);    if (stream != null) {      parser.parse(new InputSource(stream));    } else {      parser.readFile(osmFilename);    }    log.info("done loading data");  } else {    parser=new OsmXmlParser(this.nodes,this.ways,this.transform);    if (stream != null) {      parser.parse(new InputSource(stream));    } else {      parser.readFile(osmFilename);    }  }  convert();  log.info("= conversion statistics: ==========================");  log.info("osm: # nodes read:       " + parser.nodeCounter.getCounter());  log.info("osm: # ways read:        " + parser.wayCounter.getCounter());  log.info("MATSim: # nodes created: " + this.network.getNodes().size());  log.info("MATSim: # links created: " + this.network.getLinks().size());  log.info("BikeObjectAttributs for cyclewaytype created: " + countCyclewaytype);  log.info("BikeObjectAttributs for surface created: " + countSurface);  log.info("BikeObjectAttributs for smoothness created: " + countSmoothness);  log.info("No of Signalnodes: " + signalNodes.size());  log.info("BikeObjectAttributs for signalLink created: " + countSignalLinks);  log.info("No of Pegelnodes: " + monitorNodes.size());  if (this.unknownHighways.size() > 0) {    log.info("The following highway-types had no defaults set and were thus NOT converted:");    for (    String highwayType : this.unknownHighways) {      log.info("- \"" + highwayType + "\"");    }  }  log.info("= end of conversion statistics ====================");}  }
class C{  public long longValue(){  return lb.get(0);}  }
class C{  public void unregisterName(final String name){  operatorNameMap.remove(name);}  }
class C{  private boolean predictsFalseDependence(Graph graph){  for (int k=0; k < variables.size() - 1; k++) {    Node x=variables.get(k);    for (int m=k + 1; m < variables.size(); m++) {      Node y=variables.get(m);      for (      SepsetMapDci sepset : minimalSepsetMaps) {        if (sepset.get(x,y) == null) {          continue;        }        for (        List<Node> condSet : sepset.getSet(x,y)) {          if (!graph.isDSeparatedFrom(x,y,condSet)) {            return true;          }        }      }    }  }  return false;}  }
class C{  private int checkGlyphRange(int glyphId){  if (glyphId < 0 || glyphId > this.lastGlyphIndex()) {    throw new IndexOutOfBoundsException("Glyph ID is outside of the allowed range.");  }  return glyphId;}  }
class C{  public static SetVal create(Value... vals){  return new SetVal(vals);}  }
class C{  public static void classNotMapped(Class<?> aClass){  throw new ClassNotMappedException(MSG.INSTANCE.message(classNotMappedException1,aClass.getSimpleName()));}  }
class C{  public synchronized void putAll(Map<? extends K,? extends V> t){  for (  Map.Entry<? extends K,? extends V> e : t.entrySet())   put(e.getKey(),e.getValue());}  }
class C{  public void loadFunctionsFromScript(final String scriptName){  final Script script=getScript(scriptName,DateUtils.today());  final ScriptEngine engine=scriptEngineProvider.getScriptEngine(script.getType());  executeScript(script,engine,engine.getContext());}  }
class C{  public static void addListener(final PropertyChangeListener listener){  PM.addListener(listener);}  }
class C{  public static void d(String tag,String msg,Object... args){  if (sLevel > LEVEL_DEBUG) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.d(tag,msg);}  }
class C{  public void snapshotMetabits(final ISnapshotData tm) throws IOException {  final long mba;  if (m_metaBitsAddr < 0) {    mba=physicalAddress((int)m_metaBitsAddr);  } else {    mba=convertAddr(-m_metaBitsAddr);  }  tm.put(mba,genMetabitsData());}  }
class C{  protected TableSource trivialCountStar(AggregateSource source){  PlanNode input=source.getInput();  if (!(input instanceof Select))   return null;  Select select=(Select)input;  if (!select.getConditions().isEmpty())   return null;  input=select.getInput();  if (input instanceof SingleIndexScan) {    SingleIndexScan index=(SingleIndexScan)input;    if (index.isCovering() && !index.hasConditions() && index.getIndex().isTableIndex())     return index.getLeafMostTable();  } else   if (input instanceof Flatten) {    Flatten flatten=(Flatten)input;    if (flatten.getTableNodes().size() != 1)     return null;    input=flatten.getInput();    if (input instanceof GroupScan)     return flatten.getTableSources().get(0);  }  return null;}  }
class C{  public String[] keyArray(){  return keyArray(null);}  }
class C{  public <K,V>TransactionMap<K,V> openMap(String name){  return openMap(name,null,null);}  }
class C{  private static void check(double[] x,double[] y){  if (x.length == y.length) {    for (int i=0; i < x.length; i++) {      check(x[i],y[i]);    }  } else {    throw new RuntimeException("Attempt to compare vectors of different lengths");  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Client build(@Nonnull final ZipkinClientConfiguration configuration){  final Client client=new JerseyClientBuilder(environment).using(configuration).build(configuration.getServiceName());  return build(client);}  }
class C{  public Text createTextNode(String data){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  public MapOptions center(LatLon center){  this.center=center;  return this;}  }
class C{  protected GenericContainer deserializeWithSchemaAndVersion(String topic,boolean isKey,byte[] payload) throws SerializationException {  return (GenericContainer)deserialize(true,topic,isKey,payload,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:58.182 -0500",hash_original_method="735E28281E7A2112C9B0A11E7D511734",hash_generated_method="39B25F2BBFB141F92751C86A74C99C21") public boolean addGpsStatusListener(GpsStatus.Listener listener){  boolean result;  if (mGpsStatusListeners.get(listener) != null) {    return true;  }  try {    GpsStatusListenerTransport transport=new GpsStatusListenerTransport(listener);    result=mService.addGpsStatusListener(transport);    if (result) {      mGpsStatusListeners.put(listener,transport);    }  } catch (  RemoteException e) {    Log.e(TAG,"RemoteException in registerGpsStatusListener: ",e);    result=false;  }  return result;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] parameters=getParameter();  for (  ProcessInfoParameter parameter : parameters) {    String name=parameter.getParameterName();    if (parameter.getParameter() == null)     ;    if (name.equals(MCostDetail.COLUMNNAME_C_AcctSchema_ID)) {      p_C_AcctSchema_ID=parameter.getParameterAsInt();    } else     if (name.equals(MCostDetail.COLUMNNAME_M_CostType_ID)) {      p_M_CostType_ID=parameter.getParameterAsInt();    } else     if (name.equals(MCostDetail.COLUMNNAME_M_CostElement_ID)) {      p_M_CostElement_ID=parameter.getParameterAsInt();    } else     if (name.equals(MCostDetail.COLUMNNAME_M_Product_ID)) {      p_M_Product_ID=parameter.getParameterAsInt();    } else     if (name.equals(MCostDetail.COLUMNNAME_DateAcct)) {      p_DateAcct=(Timestamp)parameter.getParameter();      if (p_DateAcct == null)       throw new FillMandatoryException(MCostDetail.COLUMNNAME_DateAcct);      p_DateAcctTo=(Timestamp)parameter.getParameter_To();      if (p_DateAcctTo == null)       p_DateAcctTo=new Timestamp(System.currentTimeMillis());    }  }  if (p_DateAcct != null) {    setup();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override final public AssignmentNode visit(final ASTLet node,final Object data) throws VisitorException {  if (node.jjtGetNumChildren() != 2)   throw new AssertionError("Expecting two children, not " + node.jjtGetNumChildren() + ", node="+ node.dump(">>>"));  final ValueExpressionNode ve=(ValueExpressionNode)node.jjtGetChild(1).jjtAccept(this,data);  final Node aliasNode=node.jjtGetChild(0);  final String alias=((ASTVar)aliasNode).getName();  final AssignmentNode bind=new AssignmentNode(new VarNode(alias),ve);  graphPattern.add(bind);  return bind;}  }
class C{  public RegisterOperand makeTempValidation(){  Register reg=getValidation();  reg.setValidation();  return new RegisterOperand(reg,TypeReference.VALIDATION_TYPE);}  }
class C{  public Matrix3f scale(Vector3fc xyz){  return scale(xyz.x(),xyz.y(),xyz.z(),this);}  }
class C{  public String valueOf(boolean b){  return String.valueOf(b);}  }
class C{  public void mouseReleased(MouseEvent e){  if (log.isDebugEnabled()) {    log.debug("released " + (e.getModifiers() & MouseEvent.BUTTON1_MASK) + " "+ e.isPopupTrigger()+ " "+ (e.getModifiers() & (MouseEvent.ALT_MASK + MouseEvent.META_MASK + MouseEvent.CTRL_MASK)));  }  JToggleButton button=(JToggleButton)e.getSource();  if (e.isPopupTrigger()) {    popup.show(e.getComponent(),e.getX(),e.getY());  } else   if (button.isEnabled() && ((e.getModifiers() & MouseEvent.BUTTON1_MASK) != 0) && ((e.getModifiers() & (MouseEvent.ALT_MASK + MouseEvent.META_MASK + MouseEvent.CTRL_MASK)) == 0)) {    if (!isLockable) {      changeState(false);    } else {      changeState(!isOn);    }  }  button.setSelected(isOn);}  }
class C{  public final List<String[]> executeStringListQuery2d(String sql) throws AdeException {  final ConnectionWrapper cw=new ConnectionWrapper(m_connection);  final ArrayList<String[]> result=new ArrayList<String[]>();  try {    final PreparedStatement ps=cw.preparedStatement(sql).getPreparedStatement();    final ResultSet rs=ps.executeQuery();    while (rs.next()) {      final String[] row=new String[rs.getMetaData().getColumnCount()];      for (int i=1; i <= rs.getMetaData().getColumnCount(); ++i) {        row[i - 1]=rs.getString(i);      }      result.add(row);    }    cw.close();  } catch (  SQLException e) {    cw.failed(e);  } finally {    cw.quietCleanup();  }  return result;}  }
class C{  @Override public Object compile(String template){  return (new JsonEscapingMustacheFactory()).compile(new FastStringReader(template),"query-template");}  }
class C{  public TreeNode lowestCommonAncestorB(TreeNode root,TreeNode p,TreeNode q){  Deque<TreeNode> stack=new ArrayDeque<>();  Deque<TreeNode> ancestors=null;  TreeNode lca=null;  TreeNode next=null;  while (!stack.isEmpty() || root != null) {    if (root != null) {      stack.push(root);      root=root.left;    } else {      root=stack.pop();      if (lca == null) {        if (root == p || root == q) {          ancestors=new ArrayDeque<>(stack);          lca=root;          next=lca == p ? q : p;        }      } else {        if (!ancestors.isEmpty() && ancestors.peek() == root) {          lca=ancestors.pop();        }        if (root == next) {          break;        }      }      root=root.right;    }  }  return lca;}  }
class C{  public List<VirtualArrayRestRep> findByConnectedCluster(URI clusterId,ResourceFilter<VirtualArrayRestRep> filter){  return search().byCluster(clusterId).filter(filter).run();}  }
class C{  public void actionPerformed(ActionEvent evt){  JMenuItem mi=(JMenuItem)evt.getSource();  if (mi.getActionCommand().equals("Cascade")) {    doCascade();  } else   if (mi.getActionCommand().equals("Cascade All")) {    doCascadeAll();  } else   if (mi.getActionCommand().equals("Tile All")) {    doTileAll();  } else   if (mi.getActionCommand().equals("Close")) {    doClose();  }  this.repaint();}  }
class C{  public static Observable<Boolean> observeInternetConnectivity(final InternetObservingStrategy strategy,final int initialIntervalInMs,final int intervalInMs,final String host,final int port,final int timeoutInMs,final SocketErrorHandler socketErrorHandler){  Preconditions.checkNotNull(strategy,"strategy == null");  return strategy.observeInternetConnectivity(initialIntervalInMs,intervalInMs,host,port,timeoutInMs,socketErrorHandler);}  }
class C{  public String[] values(){  crop();  return data;}  }
class C{  public static TermSuggestionBuilder termSuggestion(String name){  return new TermSuggestionBuilder(name);}  }
class C{  boolean updatePriority(String msg,double priority){  checkPriority(priority);  final double MIN_PRIORITY=-1.0f;  String msgPriorityKey=MESSAGE_PRIORITY_KEY + msg;  boolean found=!(store.getDouble(msgPriorityKey,NOT_FOUND) < MIN_PRIORITY);  if (!found) {    return false;  }  store.putDouble(msgPriorityKey,priority);  return true;}  }
class C{  private void populateRecyclerView(boolean recreateAdapter){  if (users == null) {    return;  }  if (recyclerView == null) {    return;  }  RecyclerView.Adapter prevAdapter=recyclerView.getAdapter();  if (!recreateAdapter && prevAdapter != null) {    return;  }  FollowAdapter followAdapter=new FollowAdapter(getContext(),navigationHandler,userHandler,client,MetricsUtil.inPx(AVATAR_SIZE_DP),null,false,users);  if (prevAdapter == null) {    recyclerView.setAdapter(followAdapter);  } else {    recyclerView.swapAdapter(followAdapter,false);  }}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    checkNotClosed();    if (pos != count) {      return str.charAt(pos++);    }    return -1;  }}  }
class C{  public FloatMatrix(int newRows,int newColumns,float... newData){  rows=newRows;  columns=newColumns;  length=rows * columns;  if (newData != null && newData.length != newRows * newColumns) {    throw new IllegalArgumentException("Passed data must match matrix dimensions.");  }  data=newData;}  }
class C{  public final void addElement(int value){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_map[m_firstFree]=value;  m_firstFree++;}  }
class C{  public static ICompilationUnit createCompilationUnitFrom(File file,IJavaProject project){  if (file == null)   return null;  IPackageFragment pkg=(IPackageFragment)determineIfOnClasspath(file,(JavaProject)project);  if (pkg == null) {    PackageFragmentRoot root=(PackageFragmentRoot)project.getPackageFragmentRoot(file.getParent());    pkg=root.getPackageFragment(CharOperation.NO_STRINGS);    if (VERBOSE) {      System.out.println("WARNING : creating unit element outside classpath (" + Thread.currentThread() + "): "+ file.getAbsolutePath());    }  }  return pkg.getCompilationUnit(file.getName());}  }
class C{  public boolean wasShiftKeyPressedWhenActionInvoked(){  if (event != null) {    return (event.stateMask & SWT.SHIFT) > 0;  } else {    return false;  }}  }
class C{  public static FirstEverProjectionExpression firstEver(String propertyName){  return new FirstEverProjectionExpression(getPropExpr(propertyName),false);}  }
class C{  public final double totalCost(){  return m_TotalCost;}  }
class C{  private final State processMsg(Message msg){  StateInfo curStateInfo=mStateStack[mStateStackTopIndex];  if (mDbg) {    mSm.log("processMsg: " + curStateInfo.state.getName());  }  if (isQuit(msg)) {    transitionTo(mQuittingState);  } else {    while (!curStateInfo.state.processMessage(msg)) {      curStateInfo=curStateInfo.parentStateInfo;      if (curStateInfo == null) {        mSm.unhandledMessage(msg);        break;      }      if (mDbg) {        mSm.log("processMsg: " + curStateInfo.state.getName());      }    }  }  return (curStateInfo != null) ? curStateInfo.state : null;}  }
class C{  int hash(short order,long qAddr){  return lrus[order].hash(qAddr);}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof Key) {    Key that=(Key)obj;    if (jdkObject == that.jdkObject) {      return true;    } else     if (jdkObject instanceof String && that.jdkObject instanceof String) {      return jdkObject.equals(that.jdkObject);    } else     if (jdkObject instanceof Integer && that.jdkObject instanceof Integer) {      return jdkObject.equals(that.jdkObject);    }  }  return false;}  }
class C{  @Deprecated public JCTree.JCCompilationUnit parse(String filename){  JavacFileManager fm=(JavacFileManager)fileManager;  return parse(fm.getJavaFileObjectsFromStrings(List.of(filename)).iterator().next());}  }
class C{  protected void initialize(AVList params) throws IOException {  try {    AVList csParams=this.readCoordinateSystem();    if (csParams != null)     this.setValues(csParams);  } catch (  IOException e) {    Logging.logger().log(Level.WARNING,Logging.getMessage("SHP.ExceptionAttemptingToReadProjection",this.getStringValue(AVKey.DISPLAY_NAME)),e);  }  if (params != null) {    this.setValues(params);  }  String message=this.validateCoordinateSystem(this);  if (message != null) {    throw new WWRuntimeException(message);  }  try {    this.index=this.readIndex();  } catch (  IOException e) {    Logging.logger().log(Level.WARNING,Logging.getMessage("SHP.ExceptionAttemptingToReadIndex",this.getStringValue(AVKey.DISPLAY_NAME)),e);  }  this.header=this.readHeader();  this.open=true;  this.setNormalizePoints(this.header.normalizePoints);}  }
class C{  final public String yytext(){  return new String(yy_buffer,yy_startRead,yy_markedPos - yy_startRead);}  }
class C{  public void launchMissile(Pos3D target,int launchHeight){  float inaccuracy;  if (supportFrame != null) {    inaccuracy=this.supportFrame.getInaccuracy();  } else {    inaccuracy=30f;  }  inaccuracy*=(float)Math.random() * 2 - 1;  target.xPos+=inaccuracy;  target.zPos+=inaccuracy;  decrStackSize(0,1);  missile.launch(target,launchHeight);  missile=null;}  }
class C{  @Deprecated public ErrorDialog(String key,Object... arguments){  this(ApplicationFrame.getApplicationFrame(),key,arguments);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.382 -0400",hash_original_method="A43774E69E9908236515137E841EAEB1",hash_generated_method="0C0A24C290F14EB46D0ACD23CBBBCC62") @DSSink(DSSinkKind.ENCODER) public static final byte[] encodeUrl(BitSet urlsafe,byte[] bytes){  if (bytes == null) {    return null;  }  if (urlsafe == null) {    urlsafe=WWW_FORM_URL;  }  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  for (int i=0; i < bytes.length; i++) {    int b=bytes[i];    if (b < 0) {      b=256 + b;    }    if (urlsafe.get(b)) {      if (b == ' ') {        b='+';      }      buffer.write(b);    } else {      buffer.write('%');      char hex1=Character.toUpperCase(Character.forDigit((b >> 4) & 0xF,16));      char hex2=Character.toUpperCase(Character.forDigit(b & 0xF,16));      buffer.write(hex1);      buffer.write(hex2);    }  }  return buffer.toByteArray();}  }
class C{  public IgniteThreadPoolExecutor(String threadNamePrefix,String gridName,int corePoolSize,int maxPoolSize,long keepAliveTime,BlockingQueue<Runnable> workQ){  super(corePoolSize,maxPoolSize,keepAliveTime,TimeUnit.MILLISECONDS,workQ,new IgniteThreadFactory(gridName,threadNamePrefix));}  }
class C{  private static int childIdx(int parentIdx,int n){  return 2 * parentIdx + 1 + n;}  }
class C{  public boolean equals(String t){  return this.s.equals(t);}  }
class C{  public boolean empty(){  return size() == 0;}  }
class C{  private void updateBounds(){  this.maximumRangeValue=Double.NaN;  this.maximumRangeValueRow=-1;  this.maximumRangeValueColumn=-1;  this.minimumRangeValue=Double.NaN;  this.minimumRangeValueRow=-1;  this.minimumRangeValueColumn=-1;  this.maximumRangeValueIncStdDev=Double.NaN;  this.maximumRangeValueIncStdDevRow=-1;  this.maximumRangeValueIncStdDevColumn=-1;  this.minimumRangeValueIncStdDev=Double.NaN;  this.minimumRangeValueIncStdDevRow=-1;  this.minimumRangeValueIncStdDevColumn=-1;  int rowCount=this.data.getRowCount();  int columnCount=this.data.getColumnCount();  for (int r=0; r < rowCount; r++) {    for (int c=0; c < columnCount; c++) {      MeanAndStandardDeviation masd=(MeanAndStandardDeviation)this.data.getObject(r,c);      if (masd == null) {        continue;      }      double m=masd.getMeanValue();      double sd=masd.getStandardDeviationValue();      if (!Double.isNaN(m)) {        if (Double.isNaN(this.maximumRangeValue)) {          this.maximumRangeValue=m;          this.maximumRangeValueRow=r;          this.maximumRangeValueColumn=c;        } else {          if (m > this.maximumRangeValue) {            this.maximumRangeValue=m;            this.maximumRangeValueRow=r;            this.maximumRangeValueColumn=c;          }        }        if (Double.isNaN(this.minimumRangeValue)) {          this.minimumRangeValue=m;          this.minimumRangeValueRow=r;          this.minimumRangeValueColumn=c;        } else {          if (m < this.minimumRangeValue) {            this.minimumRangeValue=m;            this.minimumRangeValueRow=r;            this.minimumRangeValueColumn=c;          }        }        if (!Double.isNaN(sd)) {          if (Double.isNaN(this.maximumRangeValueIncStdDev)) {            this.maximumRangeValueIncStdDev=m + sd;            this.maximumRangeValueIncStdDevRow=r;            this.maximumRangeValueIncStdDevColumn=c;          } else {            if (m + sd > this.maximumRangeValueIncStdDev) {              this.maximumRangeValueIncStdDev=m + sd;              this.maximumRangeValueIncStdDevRow=r;              this.maximumRangeValueIncStdDevColumn=c;            }          }          if (Double.isNaN(this.minimumRangeValueIncStdDev)) {            this.minimumRangeValueIncStdDev=m - sd;            this.minimumRangeValueIncStdDevRow=r;            this.minimumRangeValueIncStdDevColumn=c;          } else {            if (m - sd < this.minimumRangeValueIncStdDev) {              this.minimumRangeValueIncStdDev=m - sd;              this.minimumRangeValueIncStdDevRow=r;              this.minimumRangeValueIncStdDevColumn=c;            }          }        }      }    }  }}  }
class C{  public BackchainOwlSameAsPropertiesPOIterator(final IChunkedOrderedIterator<ISPO> src,final IV p,final IV o,AbstractTripleStore db,final IV sameAs){  super(src,db,sameAs);{    SPO[] spos=new SPO[chunkSize];    int numSPOs=0;    Iterator<IV> samesIt=getSames(o).iterator();    while (samesIt.hasNext()) {      IV same=samesIt.next();      final IChunkedOrderedIterator<ISPO> reversePropsIt=db.getAccessPath(null,p,same).iterator();      while (reversePropsIt.hasNext()) {        final ISPO reverseProp=reversePropsIt.next();        if (IVUtility.equals(reverseProp.p(),sameAs) && IVUtility.equals(reverseProp.s(),o)) {          continue;        }        if (numSPOs == chunkSize) {          boolean present=false;          IChunkedOrderedIterator<ISPO> absent=db.bulkFilterStatements(spos,numSPOs,present);          if (absent.hasNext()) {            if (sameAs3 == null) {              sameAs3=createTempTripleStore();            }            db.addStatements(sameAs3,copyOnly,absent,null);          }          numSPOs=0;        }        spos[numSPOs++]=new SPO(reverseProp.s(),reverseProp.p(),o,StatementEnum.Inferred);        dumpSPO(spos[numSPOs - 1]);      }    }    if (numSPOs > 0) {      boolean present=false;      IChunkedOrderedIterator<ISPO> absent=db.bulkFilterStatements(spos,numSPOs,present);      if (absent.hasNext()) {        if (sameAs3 == null) {          sameAs3=createTempTripleStore();        }        db.addStatements(sameAs3,copyOnly,absent,null);      }    }  }}  }
class C{  public Boolean isPersistentNotificationStorage(){  return persistentNotificationStorage;}  }
class C{  public void warn(String message,Object... args){  logger.warn(message,args);}  }
class C{  public float screenY(float x,float y,float z){  return g.screenY(x,y,z);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.CAST_EXPRESSION__EXPRESSION:    return getExpression();case N4JSPackage.CAST_EXPRESSION__TARGET_TYPE_REF:  return getTargetTypeRef();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private static CasualtyDetails IndividuallyFiredAACasualties(final boolean defending,final Collection<Unit> planes,final Collection<Unit> defendingAA,final DiceRoll dice,final IDelegateBridge bridge,final boolean allowMultipleHitsPerUnit){  final int planeHP=(allowMultipleHitsPerUnit ? getTotalHitpointsLeft(planes) : planes.size());  if (DiceRoll.getTotalAAattacks(defendingAA,planes) != planeHP) {    return RandomAACasualties(planes,dice,bridge,allowMultipleHitsPerUnit);  }  final Triple<Integer,Integer,Boolean> triple=DiceRoll.getTotalAAPowerThenHitsAndFillSortedDiceThenIfAllUseSameAttack(null,null,!defending,defendingAA,planes,bridge.getData(),false);  final boolean allSameAttackPower=triple.getThird();  if (!allSameAttackPower) {    return RandomAACasualties(planes,dice,bridge,allowMultipleHitsPerUnit);  }  final Tuple<Integer,Integer> attackThenDiceSides=DiceRoll.getAAattackAndMaxDiceSides(defendingAA,bridge.getData(),!defending);  final int highestAttack=attackThenDiceSides.getFirst();  final CasualtyDetails finalCasualtyDetails=new CasualtyDetails();  final int hits=dice.getHits();  final List<Unit> planesList=new ArrayList<>();  for (  final Unit plane : planes) {    final int hpLeft=allowMultipleHitsPerUnit ? (UnitAttachment.get(plane.getType()).getHitPoints() - plane.getHits()) : (Math.min(1,UnitAttachment.get(plane.getType()).getHitPoints() - plane.getHits()));    for (int hp=0; hp < hpLeft; ++hp) {      planesList.add(plane);    }  }  if (hits > planeHP) {    throw new IllegalStateException("Cannot have more hits than number of die rolls");  }  if (hits < planeHP) {    final List<Die> rolls=dice.getRolls(highestAttack);    for (int i=0; i < rolls.size(); i++) {      final Die die=rolls.get(i);      if (die.getType() == DieType.HIT) {        final Unit unit=planesList.get(i);        if (allowMultipleHitsPerUnit && (Collections.frequency(finalCasualtyDetails.getDamaged(),unit) < (getTotalHitpointsLeft(unit) - 1))) {          finalCasualtyDetails.addToDamaged(unit);        } else {          finalCasualtyDetails.addToKilled(unit);        }      }    }  } else {    for (    final Unit plane : planesList) {      if (finalCasualtyDetails.getKilled().contains(plane)) {        finalCasualtyDetails.addToDamaged(plane);      } else {        finalCasualtyDetails.addToKilled(plane);      }    }  }  return finalCasualtyDetails;}  }
class C{  public AccountHeader build(){  if (mAccountHeaderContainer == null) {    withAccountHeader(-1);  }  mAccountHeader=mAccountHeaderContainer.findViewById(R.id.material_drawer_account_header);  int defaultHeaderMinHeight=mActivity.getResources().getDimensionPixelSize(R.dimen.material_drawer_account_header_height);  int statusBarHeight=UIUtils.getStatusBarHeight(mActivity,true);  int height;  if (mHeight != null) {    height=mHeight.asPixel(mActivity);  } else {    if (mCompactStyle) {      height=mActivity.getResources().getDimensionPixelSize(R.dimen.material_drawer_account_header_height_compact);    } else {      height=(int)(DrawerUIUtils.getOptimalDrawerWidth(mActivity) * AccountHeader.NAVIGATION_DRAWER_ACCOUNT_ASPECT_RATIO);      if (Build.VERSION.SDK_INT < 19) {        int tempHeight=height - statusBarHeight;        if (tempHeight > defaultHeaderMinHeight - UIUtils.convertDpToPixel(8,mActivity)) {          height=tempHeight;        }      }    }  }  if (mTranslucentStatusBar && Build.VERSION.SDK_INT >= 19) {    mAccountHeader.setPadding(mAccountHeader.getPaddingLeft(),mAccountHeader.getPaddingTop() + statusBarHeight,mAccountHeader.getPaddingRight(),mAccountHeader.getPaddingBottom());    if (mCompactStyle) {      height=height + statusBarHeight;    } else     if ((height - statusBarHeight) <= defaultHeaderMinHeight) {      height=defaultHeaderMinHeight + statusBarHeight;    }  }  setHeaderHeight(height);  mAccountHeaderBackground=(ImageView)mAccountHeaderContainer.findViewById(R.id.material_drawer_account_header_background);  ImageHolder.applyTo(mHeaderBackground,mAccountHeaderBackground,DrawerImageLoader.Tags.ACCOUNT_HEADER.name());  if (mHeaderBackgroundScaleType != null) {    mAccountHeaderBackground.setScaleType(mHeaderBackgroundScaleType);  }  int textColor=ColorHolder.color(mTextColor,mActivity,R.attr.material_drawer_header_selection_text,R.color.material_drawer_header_selection_text);  if (mCompactStyle) {    mAccountHeaderTextSection=mAccountHeader;  } else {    mAccountHeaderTextSection=mAccountHeaderContainer.findViewById(R.id.material_drawer_account_header_text_section);  }  mAccountHeaderTextSectionBackgroundResource=DrawerUIUtils.getSelectableBackground(mActivity);  handleSelectionView(mCurrentProfile,true);  mAccountSwitcherArrow=(ImageView)mAccountHeaderContainer.findViewById(R.id.material_drawer_account_header_text_switcher);  mAccountSwitcherArrow.setImageDrawable(new IconicsDrawable(mActivity,MaterialDrawerFont.Icon.mdf_arrow_drop_down).sizeRes(R.dimen.material_drawer_account_header_dropdown).paddingRes(R.dimen.material_drawer_account_header_dropdown_padding).color(textColor));  mCurrentProfileView=(BezelImageView)mAccountHeader.findViewById(R.id.material_drawer_account_header_current);  mCurrentProfileName=(TextView)mAccountHeader.findViewById(R.id.material_drawer_account_header_name);  mCurrentProfileEmail=(TextView)mAccountHeader.findViewById(R.id.material_drawer_account_header_email);  if (mNameTypeface != null) {    mCurrentProfileName.setTypeface(mNameTypeface);  } else   if (mTypeface != null) {    mCurrentProfileName.setTypeface(mTypeface);  }  if (mEmailTypeface != null) {    mCurrentProfileEmail.setTypeface(mEmailTypeface);  } else   if (mTypeface != null) {    mCurrentProfileEmail.setTypeface(mTypeface);  }  mCurrentProfileName.setTextColor(textColor);  mProfileFirstView=(BezelImageView)mAccountHeader.findViewById(R.id.material_drawer_account_header_small_first);  mProfileSecondView=(BezelImageView)mAccountHeader.findViewById(R.id.material_drawer_account_header_small_second);  mProfileThirdView=(BezelImageView)mAccountHeader.findViewById(R.id.material_drawer_account_header_small_third);  calculateProfiles();  buildProfiles();  if (mSavedInstance != null) {    int selection=mSavedInstance.getInt(AccountHeader.BUNDLE_SELECTION_HEADER,-1);    if (selection != -1) {      if (mProfiles != null && (selection) > -1 && selection < mProfiles.size()) {        switchProfiles(mProfiles.get(selection));      }    }  }  if (mDrawer != null) {    mDrawer.setHeader(mAccountHeaderContainer,mPaddingBelowHeader,mDividerBelowHeader);  }  mActivity=null;  return new AccountHeader(this);}  }
class C{  private void initMnemonics(){  mnemonicToIndexMap=new Hashtable<Integer,Integer>();  mnemonicInputMap=new ComponentInputMapUIResource(tabPane);  mnemonicInputMap.setParent(SwingUtilities.getUIInputMap(tabPane,JComponent.WHEN_IN_FOCUSED_WINDOW));  SwingUtilities.replaceUIInputMap(tabPane,JComponent.WHEN_IN_FOCUSED_WINDOW,mnemonicInputMap);}  }
class C{  protected ComputeJobContinuationAdapter(@Nullable Object... args){  super(args);}  }
class C{  public WRecordInfo(String title,DataStatusEvent dse){  super();  this.setTitle(title);  this.setAttribute("modal",Boolean.TRUE);  this.setWidth("500px");  this.setHeight("400px");  this.setBorder("normal");  this.setSizable(true);  this.setClosable(true);  try {    init(dynInit(dse,title));  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }  AEnv.showCenterScreen(this);}  }
class C{  @Inline protected final void uncheckedHeadInsert(Address value){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(bufferOffset(head).sLT(bufferSentinel(queue.getArity())));  head.store(value);  head=head.plus(BYTES_IN_ADDRESS);}  }
class C{  public boolean hasUpdates(){  return hasExtension(Updates.class);}  }
class C{  @Deprecated public Scanner createScanner(RawComparable beginKey,RawComparable endKey) throws IOException {  return createScannerByKey(beginKey,endKey);}  }
class C{  public static double normalizeLatitude(double latitude){  if (Double.isNaN(latitude))   return Double.NaN;  if (latitude > 0) {    return Math.min(latitude,90.0);  } else {    return Math.max(latitude,-90.0);  }}  }
class C{  public void suspend(){  videoViewImpl.suspend();  setKeepScreenOn(false);  if (videoControls != null) {    videoControls.updatePlaybackState(false);  }}  }
class C{  public CLIOutputResponse add(final AddRequest request) throws IOException, SubversionException, UnauthorizedException {  final File projectPath=new File(request.getProjectPath());  final List<String> args=defaultArgs();  addFlag(args,"--no-ignore",request.isAddIgnored());  addFlag(args,"--parents",request.isAddParents());  if (request.isAutoProps()) {    args.add("--auto-props");  }  if (request.isNotAutoProps()) {    args.add("--no-auto-props");  }  addOption(args,"--depth",request.getDepth());  args.add("add");  final CommandLineResult result=runCommand(null,args,projectPath,request.getPaths());  return DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrOutput(result.getStderr());}  }
class C{  public synchronized void init(){  if (slowQueryCacheSize > 0)   slowQueries=new IndexedLRUCache<Long>(slowQueryCacheSize,null);  pendingQueries=new IndexedLRUCache<Long>(100,null);}  }
class C{  public JBZipOutputStream(JBZipFile file,long currentCDOffset) throws IOException {  myFile=file;  raf=myFile.archive;  written=currentCDOffset;  raf.seek(currentCDOffset);}  }
class C{  @Override protected EClass eStaticClass(){  return SGenPackage.Literals.FEATURE_TYPE_LIBRARY;}  }
class C{  static void guarantee(boolean value){  if (!value) {    throw new RuntimeException("Failed to meet guarantee");  }}  }
class C{  public static TcFeature create(Class<? extends Resource> featureName,Object... parameters){  String id=featureName.getSimpleName() + System.nanoTime();  List<Object> params=getParameterAsString(parameters);  params.add(FeatureExtractorResource_ImplBase.PARAM_UNIQUE_EXTRACTOR_NAME);  params.add(id);  TcFeature tcFeature=new TcFeature(featureName,id,params.toArray());  return tcFeature;}  }
class C{  public void childrenRemoved(BeanContextMembershipEvent bcme){  Iterator<?> it=bcme.iterator();  while (it.hasNext()) {    findAndUndo(it.next());  }}  }
class C{  void calculateUtility(FiringPlan firingPlan,int overheatTolerance,boolean shooterIsAero){  int overheat=0;  if (firingPlan.getHeat() > overheatTolerance) {    overheat=firingPlan.getHeat() - overheatTolerance;  }  double modifier=1;  modifier+=calcCommandUtility(firingPlan.getTarget());  modifier+=calcStrategicBuildingTargetUtility(firingPlan.getTarget());  modifier+=calcPriorityUnitTargetUtility(firingPlan.getTarget());  double utility=0;  utility+=DAMAGE_UTILITY * firingPlan.getExpectedDamage();  utility+=CRITICAL_UTILITY * firingPlan.getExpectedCriticals();  utility+=KILL_UTILITY * firingPlan.getKillProbability();  utility*=calcTargetPotentialDamageMultiplier(firingPlan.getTarget());  utility+=TARGET_HP_FRACTION_DEALT_UTILITY * calcDamageAllocationUtility(firingPlan.getTarget(),firingPlan.getExpectedDamage());  utility-=calcCivilianTargetDisutility(firingPlan.getTarget());  utility*=modifier;  utility-=(shooterIsAero ? OVERHEAT_DISUTILITY_AERO : OVERHEAT_DISUTILITY) * overheat;  utility-=(firingPlan.getTarget() instanceof MechWarrior) ? EJECTED_PILOT_DISUTILITY : 0;  firingPlan.setUtility(utility);}  }
class C{  public void resetRotationPoint(){  this.rotationPointX=this.defaultRotationPointX;  this.rotationPointY=this.defaultRotationPointY;  this.rotationPointZ=this.defaultRotationPointZ;}  }
class C{  public boolean writeData(RowSetInternal caller){  return false;}  }
class C{  public void cancel(){  if (mRequest != null) {    mRequest.cancel();  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE:  return isSetStore();case VERSIONS:return isSetVersions();}throw new IllegalStateException();}  }
class C{  @Override public void run(){  if (verbose >= 1) {    RVMThread.trace("FinalizerThread ","run routine entered");  }  try {    while (true) {      schedLock.lockNoHandshake();      if (!shouldRun) {        if (verbose >= 1) {          VM.sysWriteln("finalizer thread sleeping.");        }        schedLock.waitWithHandshake();      }      shouldRun=false;      schedLock.unlock();      if (verbose >= 1) {        VM.sysWriteln("FinalizerThread starting finalization");      }      while (true) {        Object o=MemoryManager.getFinalizedObject();        if (o == null)         break;        if (verbose >= 2) {          VM.sysWrite("FinalizerThread finalizing object at ",Magic.objectAsAddress(o));          VM.sysWrite(" of type ");          VM.sysWrite(Magic.getObjectType(o).getDescriptor());          VM.sysWriteln();        }        try {          java.lang.JikesRVMSupport.invokeFinalize(o);        } catch (        Throwable e) {          if (verbose >= 1)           VM.sysWriteln("Throwable exception caught for finalize call");        }        if (verbose >= 2) {          VM.sysWriteln("FinalizerThread done with object at ",Magic.objectAsAddress(o));        }      }      if (verbose >= 1)       VM.sysWriteln("FinalizerThread finished finalization");    }  } catch (  Throwable e) {    VM.sysWriteln("Unexpected exception thrown in finalizer thread: ",e.toString());    e.printStackTrace();  }}  }
class C{  protected Node newNode(){  return new SVGOMFontFaceFormatElement();}  }
class C{  private boolean isImcDmSet(int imcSection){  return (imcSection & 0b0001_0000) != 0;}  }
class C{  void recalcMinMaxVersionTimestamp(){  if (versionTimestamps == null)   throw new UnsupportedOperationException();  final int nkeys=keys.nkeys;  long min=Long.MAX_VALUE;  long max=Long.MIN_VALUE;  for (int i=0; i < nkeys; i++) {    final long t=versionTimestamps[i];    if (t < min)     min=t;    if (t > max)     max=t;  }  minimumVersionTimestamp=min;  maximumVersionTimestamp=max;}  }
class C{  public void validate(FacesContext facesContext,UIComponent component,Object value) throws ValidatorException {  if (value == null) {    return;  }  String str=value.toString();  if (str.length() == 0) {    return;  }  if (ADMValidator.isAbsoluteOrRelativeUrl(str)) {    return;  }  Object[] args=null;  String label=JSFUtils.getLabel(component);  if (label != null) {    args=new Object[]{label};  }  ValidationException e=new ValidationException(ValidationException.ReasonEnum.URL,label,null);  String text=JSFUtils.getText(e.getMessageKey(),args,facesContext);  throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR,text,null));}  }
class C{  private final String tenthsToFixedString(int x){  int tens=x / 10;  return Integer.toString(tens) + "." + Math.abs(x - 10 * tens);}  }
class C{  public CalendarIntervalScheduleBuilder withIntervalInWeeks(int intervalInWeeks){  validateInterval(intervalInWeeks);  this.interval=intervalInWeeks;  this.intervalUnit=IntervalUnit.WEEK;  return this;}  }
class C{  public JobBuilder withIdentity(String name,String group){  key=new JobKey(name,group);  return this;}  }
class C{  public TDoubleObjectHashMapDecorator(TDoubleObjectHashMap<V> map){  super();  this._map=map;}  }
class C{  public LogMessage(Audit audit,PersistentResource record,Optional<ChangeSpec> changeSpec) throws InvalidSyntaxException {  this(audit.logStatement(),record,audit.logExpressions(),audit.operation(),changeSpec);}  }
class C{  public static BitSet bitwiseNegate(BitSet self){  BitSet result=(BitSet)self.clone();  result.flip(0,result.size() - 1);  return result;}  }
class C{  public DChangePassword(JFrame parent,Dialog.ModalityType modality,String title,Password oldPassword,PasswordQualityConfig passwordQualityConfig){  super(parent,title,modality);  this.oldPassword=oldPassword;  this.passwordQualityConfig=passwordQualityConfig;  initComponents();}  }
class C{  public RecordDemo(SpreadsheetService service,PrintStream outputStream){  this.out=outputStream;  this.service=service;  this.factory=FeedURLFactory.getDefault();  this.entriesCached=new HashMap<String,RecordEntry>();}  }
class C{  protected float scorePayload(int doc,int start,int end,BytesRef payload){  return 1;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static double computeSquareSize(double[] minmax){  double max=0;  for (int d=0; d < minmax.length; d+=2) {    double width=minmax[d + 1] - minmax[d];    max+=width * width;  }  return max;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:49.172 -0500",hash_original_method="EA4956080FAF0CF8E371329CB76D5A40",hash_generated_method="4BD624D90F73EF099C6F4BC3376B0CB8") public Drawable peekDrawable(){  Bitmap bm=sGlobals.peekWallpaperBitmap(mContext,false);  if (bm != null) {    Drawable dr=new BitmapDrawable(mContext.getResources(),bm);    dr.setDither(false);    return dr;  }  return null;}  }
class C{  private Executors(){}  }
class C{  protected static String encode(String url){  StringBuilder encoder=new StringBuilder();  for (  char chr : url.toCharArray()) {    byte chrByte=(byte)chr;    if ((chrByte <= 32 || chrByte >= 127 || chr == '#' || chr == '%')) {      encoder.append(String.format("%%%02X",chrByte));    } else {      encoder.append(chr);    }  }  return encoder.toString();}  }
class C{  public Mailer(){  this(null);}  }
class C{  public CUDA_RESOURCE_VIEW_DESC(){}  }
class C{  public static ReilInstruction createXor(final Address address,final ReilOperand firstOperand,final ReilOperand secondOperand,final ReilOperand thirdOperand){  return new ReilInstruction(address,ReilMnemonics.XOR,firstOperand,secondOperand,thirdOperand);}  }
class C{  public boolean isEmpty(){  CodeAttribute ca=getMethodInfo2().getCodeAttribute();  if (ca == null)   return (getModifiers() & Modifier.ABSTRACT) != 0;  CodeIterator it=ca.iterator();  try {    return it.hasNext() && it.byteAt(it.next()) == Opcode.RETURN && !it.hasNext();  } catch (  BadBytecode e) {  }  return false;}  }
class C{  @Override public String save(){  field.setTranslation(trans.getPersistentMap());  saveResource();  id=mapping.getExtension().getRowType();  addActionMessage(getText("manage.translation.saved",new String[]{field.getTerm().toString()}));  return NONE;}  }
class C{  void renderNormal(){  glEnable(GL_DEPTH_TEST);  glUseProgram(this.normalProgram);  glUniformMatrix4fv(viewMatrixUniform,false,viewMatrix.get(matrixBuffer));  glUniformMatrix4fv(projMatrixUniform,false,projMatrix.get(matrixBuffer));  glUniformMatrix3fv(normalMatrixUniform,false,normalMatrix.get(matrixBuffer));  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT,fbo);  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);  glBindBuffer(GL_ARRAY_BUFFER,this.cubeVbo);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,3,GL_FLOAT,false,0,0L);  glEnableVertexAttribArray(1);  glVertexAttribPointer(1,3,GL_FLOAT,false,0,normalsOffset);  glDrawArrays(GL_TRIANGLES,0,numVertices);  glDisableVertexAttribArray(0);  glDisableVertexAttribArray(1);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT,0);  glUseProgram(0);}  }
class C{  public static boolean isDownwardAxisOfMany(int axis){  return ((Axis.DESCENDANTORSELF == axis) || (Axis.DESCENDANT == axis) || (Axis.FOLLOWING == axis)|| (Axis.PRECEDING == axis));}  }
class C{  protected synchronized void dequeueKeyEvents(long after,Component untilFocused){  if (untilFocused == null) {    return;  }  if (focusLog.isLoggable(PlatformLogger.Level.FINER)) {    focusLog.finer("Dequeue at {0} for {1}",after,untilFocused);  }  TypeAheadMarker marker;  ListIterator<TypeAheadMarker> iter=typeAheadMarkers.listIterator((after >= 0) ? typeAheadMarkers.size() : 0);  if (after < 0) {    while (iter.hasNext()) {      marker=iter.next();      if (marker.untilFocused == untilFocused) {        iter.remove();        return;      }    }  } else {    while (iter.hasPrevious()) {      marker=iter.previous();      if (marker.untilFocused == untilFocused && marker.after == after) {        iter.remove();        return;      }    }  }}  }
class C{  protected MyAbstractList(){}  }
class C{  private void propagateIndexDecls(final AbstractJournal oldJournal,final AbstractJournal newJournal,final OverflowMetadata overflowMetadata){  final int numIndices=overflowMetadata.getIndexCount();  int numIndicesProcessed=0;  int numIndicesViewRedefined=0;  int numIndicesNonZeroCopy=0;  int ncopy=0;  final int maxNonZeroCopy=100;  final long lastCommitTime=oldJournal.getRootBlockView().getLastCommitTime();{    if (log.isInfoEnabled())     log.info("doOverflow(): lastCommitTime=" + lastCommitTime + "\nfile="+ oldJournal.getFile()+ "\npre-condition views: synchronousOverflowCounter="+ getSynchronousOverflowCount()+ "\n"+ listIndexPartitions(TimestampUtility.asHistoricalRead(lastCommitTime)));    final Iterator<ViewMetadata> itr=overflowMetadata.views();    while (itr.hasNext()) {      final ViewMetadata bm=itr.next();      final BTree oldBTree=bm.getBTree();      final IndexMetadata indexMetadata=oldBTree.getIndexMetadata().clone();      final LocalPartitionMetadata oldpmd=indexMetadata.getPartitionMetadata();      if (oldpmd == null) {        throw new RuntimeException("Not a partitioned index: " + bm.name);      }      final boolean hasOverflowHandler=indexMetadata.getOverflowHandler() != null;      final long entryCount=bm.entryCount;      final boolean copyIndex=(entryCount == 0) || ((copyIndexThreshold > 0 && entryCount <= copyIndexThreshold) && numIndicesNonZeroCopy < maxNonZeroCopy && !hasOverflowHandler && !bm.mandatoryMerge);      if (copyIndex) {        final IResourceMetadata[] oldResources=oldpmd.getResources();        final IResourceMetadata[] newResources=new IResourceMetadata[oldResources.length];        System.arraycopy(oldResources,0,newResources,0,oldResources.length);        newResources[0]=newJournal.getResourceMetadata();        indexMetadata.setPartitionMetadata(new LocalPartitionMetadata(oldpmd.getPartitionId(),oldpmd.getSourcePartitionId(),oldpmd.getLeftSeparatorKey(),oldpmd.getRightSeparatorKey(),newResources,oldpmd.getIndexPartitionCause()));      } else {        final IResourceMetadata[] oldResources=oldpmd.getResources();        final IResourceMetadata[] newResources=new IResourceMetadata[oldResources.length + 1];        System.arraycopy(oldResources,0,newResources,1,oldResources.length);        newResources[0]=newJournal.getResourceMetadata();        indexMetadata.setPartitionMetadata(new LocalPartitionMetadata(oldpmd.getPartitionId(),oldpmd.getSourcePartitionId(),oldpmd.getLeftSeparatorKey(),oldpmd.getRightSeparatorKey(),newResources,oldpmd.getIndexPartitionCause()));      }{        indexMetadata.write(newJournal);        final long oldCounter=oldBTree.getCounter().get();        if (log.isInfoEnabled())         log.info("Re-defining view on new journal" + ": name=" + bm.name + ", copyIndex="+ copyIndex+ ", entryCount="+ entryCount+ ", counter="+ oldCounter+ ", partitionId="+ oldpmd.getPartitionId()+ ", checkpoint="+ oldBTree.getCheckpoint());        final Checkpoint overflowCheckpoint=indexMetadata.overflowCheckpoint(oldBTree.getCheckpoint());        overflowCheckpoint.write(newJournal);        final BTree newBTree=BTree.load(newJournal,overflowCheckpoint.getCheckpointAddr(),false);        final long newCounter=newBTree.getCounter().get();        assert newCounter == oldCounter : "expected oldCounter=" + oldCounter + ", but found newCounter="+ newCounter;        if (copyIndex) {          if (log.isDebugEnabled())           log.debug("Copying data to new journal: name=" + bm.name + ", entryCount="+ entryCount+ ", threshold="+ copyIndexThreshold);          newBTree.rangeCopy(oldBTree,null,null,true);          overflowMetadata.setAction(bm.name,OverflowActionEnum.Copy);          ncopy++;          if (entryCount > 0) {            numIndicesNonZeroCopy++;          }        } else {          numIndicesViewRedefined++;        }        newJournal.registerIndex(bm.name,newBTree);      }      numIndicesProcessed++;    }    if (log.isInfoEnabled())     log.info("Processed indices: #indices=" + numIndices + ", ncopy="+ ncopy+ ", ncopyNonZero="+ numIndicesNonZeroCopy+ ", #viewRedefined="+ numIndicesViewRedefined);    assert numIndices == numIndicesProcessed;    assert numIndices == (ncopy + numIndicesViewRedefined);    assert ncopy == overflowMetadata.getActionCount(OverflowActionEnum.Copy);    overflowMetadata.postProcess=numIndicesViewRedefined > 0;  }}  }
class C{  public static DoubleMatrix1D plus(DoubleMatrix1D A,double s){  return A.assign(F.plus(s));}  }
class C{  public Object extractJavaFieldToSqlArgValue(Object object) throws SQLException {  return convertJavaFieldToSqlArgValue(extractJavaFieldValue(object));}  }
class C{  public BrowseResponse browse() throws IOException {  return browse(null,null);}  }
class C{  public static BarChart criar(String titulo,String eixo,Map<String,List<Relatorio>> mapa){  eixoX=new CategoryAxis();  eixoY=new NumberAxis();  grafico=new BarChart<>(eixoX,eixoY);  config(titulo,eixo);  for (  String chave : mapa.keySet()) {    XYChart.Series<String,Number> serie=new XYChart.Series<>();    serie.setName(chave);    List<Relatorio> relatorios=mapa.get(chave);    for (    Relatorio relatorio : relatorios) {      XYChart.Data<String,Number> dado=new XYChart.Data<>(relatorio.getFormatar(),relatorio.getTotal());      dado.nodeProperty().addListener(null);      serie.getData().add(dado);    }    grafico.getData().add(serie);  }  eixoY.setUpperBound(eixoY.getUpperBound() + 10);  return grafico;}  }
class C{  public static void mixin(Class self,Class categoryClass){  mixin(getMetaClass(self),Collections.singletonList(categoryClass));}  }
class C{  public SVGOMAnimatedNumber(AbstractElement elt,String ns,String ln,float val){  this(elt,ns,ln,val,false);}  }
class C{  private int nextObjId(int position){  objPositions.put(curObjId,position);  return curObjId++;}  }
class C{  public boolean isUnchanged(CalendarEventModel originalModel){  if (this == originalModel) {    return true;  }  if (originalModel == null) {    return false;  }  if (!checkOriginalModelFields(originalModel)) {    return false;  }  if (TextUtils.isEmpty(mLocation)) {    if (!TextUtils.isEmpty(originalModel.mLocation)) {      return false;    }  } else   if (!mLocation.equals(originalModel.mLocation)) {    return false;  }  if (TextUtils.isEmpty(mTitle)) {    if (!TextUtils.isEmpty(originalModel.mTitle)) {      return false;    }  } else   if (!mTitle.equals(originalModel.mTitle)) {    return false;  }  if (TextUtils.isEmpty(mDescription)) {    if (!TextUtils.isEmpty(originalModel.mDescription)) {      return false;    }  } else   if (!mDescription.equals(originalModel.mDescription)) {    return false;  }  if (TextUtils.isEmpty(mDuration)) {    if (!TextUtils.isEmpty(originalModel.mDuration)) {      return false;    }  } else   if (!mDuration.equals(originalModel.mDuration)) {    return false;  }  if (mEnd != mOriginalEnd) {    return false;  }  if (mStart != mOriginalStart) {    return false;  }  if (mOriginalId != originalModel.mOriginalId && mOriginalId != originalModel.mId) {    return false;  }  if (TextUtils.isEmpty(mRrule)) {    if (!TextUtils.isEmpty(originalModel.mRrule)) {      boolean syncIdNotReferenced=mOriginalSyncId == null || !mOriginalSyncId.equals(originalModel.mSyncId);      boolean localIdNotReferenced=mOriginalId == -1 || !(mOriginalId == originalModel.mId);      if (syncIdNotReferenced && localIdNotReferenced) {        return false;      }    }  } else   if (!mRrule.equals(originalModel.mRrule)) {    return false;  }  return true;}  }
class C{  private static int parseType(final String signature,int pos,final SignatureVisitor v){  char c;  int start, end;  boolean visited, inner;  String name;switch (c=signature.charAt(pos++)) {case 'Z':case 'C':case 'B':case 'S':case 'I':case 'F':case 'J':case 'D':case 'V':    v.visitBaseType(c);  return pos;case '[':return parseType(signature,pos,v.visitArrayType());case 'T':end=signature.indexOf(';',pos);v.visitTypeVariable(signature.substring(pos,end));return end + 1;default :start=pos;visited=false;inner=false;for (; ; ) {switch (c=signature.charAt(pos++)) {case '.':case ';':if (!visited) {name=signature.substring(start,pos - 1);if (inner) {v.visitInnerClassType(name);} else {v.visitClassType(name);}}if (c == ';') {v.visitEnd();return pos;}start=pos;visited=false;inner=true;break;case '<':name=signature.substring(start,pos - 1);if (inner) {v.visitInnerClassType(name);} else {v.visitClassType(name);}visited=true;top: for (; ; ) {switch (c=signature.charAt(pos)) {case '>':break top;case '*':++pos;v.visitTypeArgument();break;case '+':case '-':pos=parseType(signature,pos + 1,v.visitTypeArgument(c));break;default :pos=parseType(signature,pos,v.visitTypeArgument('='));break;}}}}}}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Agent fav=(Agent)stack.pop();  if (fav == null)   return null;  return fav.getRelatedAirings(Wizard.getInstance().getRawAccess(Wizard.AIRING_CODE,Wizard.AIRINGS_BY_CT_CODE),true,false,new StringBuffer());}  }
class C{  public Builder until(Date until){  return until(until,true);}  }
class C{  public FifoEvictionPolicy(int max){  A.ensure(max >= 0,"max >= 0");  this.max=max;}  }
class C{  public static List<String> extractExtentFields(String extentDescription){  List<String> extentFields=new ArrayList<String>();  Matcher m=EXTENT_TOKEN_PATTERN.matcher(extentDescription);  while (m.find()) {    extentFields.add(m.group(1).replace("\"",""));  }  return extentFields;}  }
class C{  public BasicRasterServerCache(){  super(0L,Runtime.getRuntime().freeMemory() + Runtime.getRuntime().maxMemory() - Runtime.getRuntime().totalMemory());  new Thread(new MemoryMonitorThread()).start();  new Thread(new CachePrunerThread()).start();}  }
class C{  public String toSummaryString(String title){  StringBuffer result;  result=new StringBuffer(title);  if (title.length() != 0) {    result.append("\n");  }  result.append(m_Result);  return result.toString();}  }
class C{  public void findSimplePathTo(final Coords dest,final MoveStepType type,int direction,int facing){  Coords src=getFinalCoords();  Coords currStep=src;  Coords nextStep=currStep.translated(direction);  while (dest.distance(nextStep) < dest.distance(currStep)) {    addStep(type);    currStep=nextStep;    nextStep=currStep.translated(direction);  }  if (!currStep.equals(dest)) {    int dir=currStep.direction(dest);    dir=(((dir - facing) % 6) + 6) % 6;switch (dir) {case 0:      findSimplePathTo(dest,MoveStepType.FORWARDS,currStep.direction(dest),facing);    break;case 1:  findSimplePathTo(dest,MoveStepType.LATERAL_RIGHT,currStep.direction(dest),facing);break;case 2:findSimplePathTo(dest,MoveStepType.LATERAL_LEFT_BACKWARDS,currStep.direction(dest),facing);break;case 3:findSimplePathTo(dest,MoveStepType.BACKWARDS,currStep.direction(dest),facing);break;case 4:findSimplePathTo(dest,MoveStepType.LATERAL_RIGHT_BACKWARDS,currStep.direction(dest),facing);break;case 5:findSimplePathTo(dest,MoveStepType.LATERAL_LEFT,currStep.direction(dest),facing);break;}}}  }
class C{  public static void addValidator(IFDeployExternalValidator validator,String mode){  if (validatorMap == null) {    validatorMap=ArrayListMultimap.create();  }  putToMap(validator,mode);}  }
class C{  public DocumentTemplateContext(TemplateContextType type,Document document,int offset,int length){  this(type,document,new Position(offset,length));}  }
class C{  public void activateLogix(){  if (_isActivated) {    return;  }  resetConditionals();  assembleListenerList();  for (int i=0; i < _listeners.size(); i++) {    startListener(_listeners.get(i));  }  _isActivated=true;  calculateConditionals();}  }
class C{  public String toString(){  return "OrderKey: " + this.getOrderKey() + " Id: "+ this.getIdTradeOrder()+ " Version: "+ this.getVersion()+ " Action: "+ this.getAction()+ " Quantity: "+ this.getQuantity()+ " Status: "+ this.getStatus()+ " OrderType: "+ this.getOrderType()+ " AuxPrice: "+ new Money(this.getAuxPrice())+ " LmtPrice: "+ new Money(this.getLimitPrice())+ " Open Position: "+ this.getIsOpenPosition()+ " Filled: "+ this.getIsFilled()+ " Filled Qty: "+ this.getFilledQuantity()+ " Trade Id: "+ this.getTradePosition().getIdTradePosition()+ " Trade Version: "+ this.getTradePosition().getVersion();}  }
class C{  public String globalInfo(){  return "Stores the experiment as a Java serialized object.";}  }
class C{  protected void createDistributedRegion(VM vm,final String regionName) throws Exception {  AsyncInvocation future=createDistributedRegionAsync(vm,regionName);  future.join(MAX_WAIT);  if (future.isAlive()) {    fail("Region not created within" + MAX_WAIT);  }  if (future.exceptionOccurred()) {    throw new RuntimeException(future.getException());  }}  }
class C{  public void testIsSigned(){  try {    assertFalse(rsmd.isSigned(1));  } catch (  SQLException e1) {    fail("ResultSetMetaDataTest.isSigned" + e1.getMessage());    e1.printStackTrace();  }  try {    rsmd.isSigned(0);    fail("SQLException is not thrown");  } catch (  SQLException e) {  }}  }
class C{  public AuthenticationException(final String message){  super(message);}  }
class C{  public String lowerSizeTipText(){  return "Set the minmum number of instances in a dataset. Setting zero " + "here will actually use <stepSize> number of instances at the first " + "step (since it makes no sense to use zero instances :-))";}  }
class C{  public boolean isSameLine(){  Object oo=get_Value(COLUMNNAME_IsSameLine);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  String namespaceURI=null;  String qualifiedName="null:xml";  doc=(Document)load("staffNS",false);{    boolean success=false;    try {      element=doc.createElementNS(namespaceURI,qualifiedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("documentcreateelementNS05",success);  }}  }
class C{  public boolean isAppsServerOK(boolean tryContactAgain){  if (isServerEmbedded())   return true;  if (Ini.isClient() && !tryContactAgain && m_queryAppsServer)   return m_okApps;  if (getAppsHost().equalsIgnoreCase("MyAppsServer")) {    log.warning(getAppsHost() + " ignored");    return false;  }  m_queryAppsServer=true;  try {    Status status=(Status)lookup(Status.JNDI_NAME);    m_version=status.getDateVersion();    m_okApps=true;  } catch (  Exception ce) {    m_okApps=false;    String connect=(String)m_env.get(Context.PROVIDER_URL);    if (connect == null || connect.trim().length() == 0)     connect=getAppsHost() + ":" + getAppsPort();    log.warning(connect + "\n - " + ce.toString()+ "\n - "+ m_env);    ce.printStackTrace();  }catch (  Throwable t) {    m_okApps=false;    String connect=(String)m_env.get(Context.PROVIDER_URL);    if (connect == null || connect.trim().length() == 0)     connect=getAppsHost() + ":" + getAppsPort();    log.warning(connect + "\n - " + t.toString()+ "\n - "+ m_env);    t.printStackTrace();  }  return m_okApps;}  }
class C{  public void actionPerformed(ActionEvent e){  JFileChooser chooser=getJFileChooser();  chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);  chooser.showOpenDialog((Component)this.graphEditable);  final File file=chooser.getSelectedFile();  if (file == null) {    System.out.println("File was null.");    return;  }  Preferences.userRoot().put("fileSaveLocation",file.getParent());  Graph graph=GraphUtils.loadGraphTxt(file);  GraphUtils.circleLayout(graph,200,200,150);  graphEditable.setGraph(graph);}  }
class C{  public boolean isFollowRedirects(){  return followRedirects;}  }
class C{  private void increaseScoreMatch(){  mSoundPool.play(mSoundMatchRight,1,1,0,0,1.0f);  mMatchScore+=(50 * (Math.pow(1.1,mLevelNumber - 1)));  mScoreText.setText(String.valueOf(mMatchScore));  mTextPlayAgainScore.setText(String.valueOf(mMatchScore));}  }
class C{  public ServerConnectivityException(String message,Throwable cause){  super(message,cause);}  }
class C{  public boolean ready() throws java.io.IOException {  return false;}  }
class C{  @RequestMapping(value="/routes",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<List<RouteDTO>> activeRoutes(){  List<Route> routes=routeLocator.getRoutes();  List<RouteDTO> routeDTOs=new ArrayList<>();  routes.forEach(null);  return new ResponseEntity<>(routeDTOs,HttpStatus.OK);}  }
class C{  public DialogueSystem(String domainFile){  this();  changeDomain(XMLDomainReader.extractDomain(domainFile));}  }
class C{  @Override public int deleteAssetScenarioLinks(Set<String> elementUuidSet){  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting links from assets to scenario...");  }  GsmAssetScenarioRemover assetScenarioRemover=(GsmAssetScenarioRemover)assetScenarioRemoverFactory.getObject();  Integer numberOfDeletedLinks=assetScenarioRemover.deleteAssetScenarioLinks(elementUuidSet);  return numberOfDeletedLinks;}  }
class C{  public double doOperation() throws OperatorFailedException {  double logq=0;  try {    if (MathUtils.nextDouble() < 1.0 / (1 + Math.exp(-size))) {      logq=AddOperation() - size;    } else {      logq=RemoveOperation() + size;    }  } catch (  NoReassortmentEventException nree) {    throw new OperatorFailedException("");  }  assert !Double.isInfinite(logq) && !Double.isNaN(logq);  return logq;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public EqualsResult append(final int lhs,final int rhs){  if (!isEqual) {    return this;  }  isEqual=lhs == rhs;  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodevalue03.class,args);}  }
class C{  public EliminacionSerieVO actualizarCriteriosEliminacion(EliminacionSerieVO eliminacionNew) throws EliminacionActionNotAllowedException {  EliminacionSerieVO eliminacion=getEliminacion(eliminacionNew.getId());  eliminacion.setCondicionBusqueda(eliminacionNew.getCondicionBusqueda());  this.check(FondosSecurityManager.ACTUALIZAR_ELIMINACION_ACTION);  LoggingEvent event=getLogginEvent(ArchivoActions.FONDOS_MODULE_ACTUALIZACION_ELIMINACION);  DataLoggingEvent logData=event.getDataLoggingEvent(ArchivoObjects.OBJECT_ELIMINACION,eliminacion.getId());  getConditionChecker().checkOnUpdate(eliminacion);  iniciarTransaccion();  eliminacion.setFechaEstado(DBUtils.getFechaActual());  eliminacionSerieDBEntity.updateEliminacion(eliminacion);  Locale locale=getServiceClient().getLocale();  logData.addDetalle(locale,ArchivoDetails.SELECCION_COD_SELECCION,eliminacion.getTitulo());  commit();  return eliminacion;}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public void nohup(String cmd){  send(String.format(ImageServerDialogProperties.getString("cmd.nohup"),cmd));  try {    Thread.sleep(1000);  } catch (  InterruptedException e) {  }}  }
class C{  public ASN1Implicit(int tagNumber,ASN1Type type){  super(CLASS_CONTEXTSPECIFIC,tagNumber);  if ((type instanceof ASN1Choice) || (type instanceof ASN1Any)) {    throw new IllegalArgumentException("Implicit tagging can not be used for ASN.1 ANY or CHOICE type");  }  this.type=type;  if (type.checkTag(type.id)) {    if (type.checkTag(type.constrId)) {      taggingType=TAGGING_STRING;    } else {      taggingType=TAGGING_PRIMITIVE;    }  } else {    taggingType=TAGGING_CONSTRUCTED;  }}  }
class C{  public final MutableDouble2D add(final MutableDouble2D other1,final Double2D other2){  x=other1.x + other2.x;  y=other1.y + other2.y;  return this;}  }
class C{  private Object[] unmarshalParametersUnchecked(Method method,ObjectInput in) throws IOException, ClassNotFoundException {  Class<?>[] types=method.getParameterTypes();  Object[] params=new Object[types.length];  for (int i=0; i < types.length; i++) {    params[i]=unmarshalValue(types[i],in);  }  return params;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  @Override public boolean addAll(Collection<? extends E> that){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public static double[] random(int m){  double[] res=new double[m];  for (int i=0; i < m; ++i) {    res[i]=Math.random();  }  return (res);}  }
class C{  @Override public void renderLimitLines(Canvas c){}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:20.919 -0500",hash_original_method="D4C81D48070585F36B5352844546D049",hash_generated_method="629B9A28DBC1AA3E670F6F3B511A78B5") private static final boolean isIdeographic(char c,boolean includeNonStarters){  if (c >= '\u2E80' && c <= '\u2FFF') {    return true;  }  if (c == '\u3000') {    return true;  }  if (c >= '\u3040' && c <= '\u309F') {    if (!includeNonStarters) {switch (c) {case '\u3041':case '\u3043':case '\u3045':case '\u3047':case '\u3049':case '\u3063':case '\u3083':case '\u3085':case '\u3087':case '\u308E':case '\u3095':case '\u3096':case '\u309B':case '\u309C':case '\u309D':case '\u309E':        return false;    }  }  return true;}if (c >= '\u30A0' && c <= '\u30FF') {  if (!includeNonStarters) {switch (c) {case '\u30A0':case '\u30A1':case '\u30A3':case '\u30A5':case '\u30A7':case '\u30A9':case '\u30C3':case '\u30E3':case '\u30E5':case '\u30E7':case '\u30EE':case '\u30F5':case '\u30F6':case '\u30FB':case '\u30FC':case '\u30FD':case '\u30FE':      return false;  }}return true;}if (c >= '\u3400' && c <= '\u4DB5') {return true;}if (c >= '\u4E00' && c <= '\u9FBB') {return true;}if (c >= '\uF900' && c <= '\uFAD9') {return true;}if (c >= '\uA000' && c <= '\uA48F') {return true;}if (c >= '\uA490' && c <= '\uA4CF') {return true;}if (c >= '\uFE62' && c <= '\uFE66') {return true;}if (c >= '\uFF10' && c <= '\uFF19') {return true;}return false;}  }
class C{  private void onClassLoaderReleased(ClassLoader clsLdr){  DeploymentListener tmp=lsnr;  if (tmp != null)   tmp.onUnregistered(clsLdr);}  }
class C{  public static void closeSafely(@Nullable EncodedImage encodedImage){  if (encodedImage != null) {    encodedImage.close();  }}  }
class C{  public int offset(){  return offset;}  }
class C{  public void testOverlappingMultiLineStringsRoundTrip() throws SQLException {  GridGenerator grid=new GridGenerator();  grid.setGeometryFactory(geometryFactory);  grid.setBoundingBox(new Envelope(0,10,0,10));  grid.setNumberColumns(2);  grid.setNumberRows(2);  MultiLineString[] pt=new MultiLineString[4];  STRUCT[] st=new STRUCT[8];  LineStringGenerator pgc=new LineStringGenerator();  pgc.setGeometryFactory(geometryFactory);  pgc.setNumberPoints(10);  MultiGenerator pg=new MultiGenerator(pgc);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberGeometries(3);  pg.setGeometryFactory(geometryFactory);  OraWriter ow=new OraWriter();  int i=0;  while (grid.canCreate() && i < 8) {    pg.setBoundingBox(grid.createEnv());    pt[i]=(MultiLineString)pg.create();    st[i]=ow.write(pt[i],getConnection());    i++;  }  for (int j=0; j < 4; j++) {    if (pt[j] != null)     st[i++]=ow.write(pt[j],getConnection());  }  OraReader or=new OraReader();  i=0;  while (i < 8 && pt[i % 4] != null) {    MultiLineString pt2=(MultiLineString)or.read(st[i]);    assertTrue("The input MultiLineString is not the same as the output MultiLineString",pt[i % 4].equals(pt2));    i++;  }}  }
class C{  public void accept(final MethodVisitor mv,boolean visible){  Label[] start=new Label[this.start.size()];  Label[] end=new Label[this.end.size()];  int[] index=new int[this.index.size()];  for (int i=0; i < start.length; ++i) {    start[i]=this.start.get(i).getLabel();    end[i]=this.end.get(i).getLabel();    index[i]=this.index.get(i);  }  accept(mv.visitLocalVariableAnnotation(typeRef,typePath,start,end,index,desc,true));}  }
class C{  private void startPrimary() throws Exception {  FileSystemConfiguration igfsCfg=new FileSystemConfiguration();  igfsCfg.setDataCacheName("dataCache");  igfsCfg.setMetaCacheName("metaCache");  igfsCfg.setName(IGFS_PRIMARY);  igfsCfg.setBlockSize(512);  igfsCfg.setDefaultMode(DUAL_SYNC);  igfsCfg.setPrefetchBlocks(1);  igfsCfg.setSequentialReadsBeforePrefetch(Integer.MAX_VALUE);  igfsCfg.setSecondaryFileSystem(secondaryFs.asSecondary());  Map<String,IgfsMode> pathModes=new HashMap<>();  pathModes.put(FILE.toString(),PRIMARY);  igfsCfg.setPathModes(pathModes);  CacheConfiguration dataCacheCfg=defaultCacheConfiguration();  dataCacheCfg.setName("dataCache");  dataCacheCfg.setCacheMode(PARTITIONED);  dataCacheCfg.setNearConfiguration(null);  dataCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  dataCacheCfg.setAtomicityMode(TRANSACTIONAL);  evictPlc=new IgfsPerBlockLruEvictionPolicy();  dataCacheCfg.setEvictionPolicy(evictPlc);  dataCacheCfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(128));  dataCacheCfg.setBackups(0);  CacheConfiguration metaCacheCfg=defaultCacheConfiguration();  metaCacheCfg.setName("metaCache");  metaCacheCfg.setCacheMode(REPLICATED);  metaCacheCfg.setNearConfiguration(null);  metaCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  metaCacheCfg.setAtomicityMode(TRANSACTIONAL);  IgniteConfiguration cfg=new IgniteConfiguration();  cfg.setGridName("grid-primary");  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();  discoSpi.setIpFinder(new TcpDiscoveryVmIpFinder(true));  cfg.setDiscoverySpi(discoSpi);  cfg.setCacheConfiguration(dataCacheCfg,metaCacheCfg);  cfg.setFileSystemConfiguration(igfsCfg);  cfg.setLocalHost("127.0.0.1");  cfg.setConnectorConfiguration(null);  Ignite g=G.start(cfg);  igfsPrimary=(IgfsImpl)g.fileSystem(IGFS_PRIMARY);  dataCache=igfsPrimary.context().kernalContext().cache().internalCache(igfsPrimary.context().configuration().getDataCacheName());}  }
class C{  Sequence intArray2Sequence(int[] seq,NodeRef node){  StringBuilder sSeq=new StringBuilder();  for (int i=0; i < m_sequenceLength; i++) {    sSeq.append(m_siteModel.getFrequencyModel().getDataType().getCode(seq[i]));  }  return new Sequence(m_tree.getNodeTaxon(node),sSeq.toString());}  }
class C{  protected void writeStartTag(String tag) throws IOException {  indent();  write(tag);  write(NEWLINE);  incrIndent();}  }
class C{  public SubscriberObject(){  super();}  }
class C{  public Matrix computeInverse(){  if (numRows != numColumns) {    throw new ArithmeticException("Matrix is not invertible.");  }  int[][] tmpMatrix=new int[numRows][length];  for (int i=numRows - 1; i >= 0; i--) {    tmpMatrix[i]=IntUtils.clone(matrix[i]);  }  int[][] invMatrix=new int[numRows][length];  for (int i=numRows - 1; i >= 0; i--) {    int q=i >> 5;    int r=i & 0x1f;    invMatrix[i][q]=1 << r;  }  for (int i=0; i < numRows; i++) {    int q=i >> 5;    int bitMask=1 << (i & 0x1f);    if ((tmpMatrix[i][q] & bitMask) == 0) {      boolean foundNonZero=false;      for (int j=i + 1; j < numRows; j++) {        if ((tmpMatrix[j][q] & bitMask) != 0) {          foundNonZero=true;          swapRows(tmpMatrix,i,j);          swapRows(invMatrix,i,j);          j=numRows;          continue;        }      }      if (!foundNonZero) {        throw new ArithmeticException("Matrix is not invertible.");      }    }    for (int j=numRows - 1; j >= 0; j--) {      if ((j != i) && ((tmpMatrix[j][q] & bitMask) != 0)) {        addToRow(tmpMatrix[i],tmpMatrix[j],q);        addToRow(invMatrix[i],invMatrix[j],0);      }    }  }  return new GF2Matrix(numColumns,invMatrix);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static PaginationContext fromContext(RoutingContext context){  HttpServerRequest request=context.request();  String pageStr=request.getParam(PaginationContext.CURRENT_PAGE_QUERY_PARAM);  String perPageStr=request.getParam(PaginationContext.PER_PAGE_QUERY_PARAM);  Integer page=null;  Integer perPage=null;  try {    if (pageStr != null) {      page=Integer.parseInt(pageStr);    }    if (perPageStr != null) {      perPage=Integer.parseInt(perPageStr);    }  } catch (  NumberFormatException e) {    DefaultErrorHandler.badRequest(context,"Invalid pagination parameters : expecting integers");  }  if (perPage != null && perPage > PaginationContext.MAX_PER_PAGE) {    DefaultErrorHandler.badRequest(context,"Invalid " + PaginationContext.PER_PAGE_QUERY_PARAM + " parameter, max is "+ PaginationContext.MAX_PER_PAGE);  }  return new PaginationContext(page,perPage);}  }
class C{  public final boolean isDockRoot(){  return dockRoot;}  }
class C{  public bdo addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static int findWordEnd(String line,int pos,String noWordSep){  char ch=line.charAt(pos);  if (noWordSep == null)   noWordSep="";  boolean selectNoLetter=(!Character.isLetterOrDigit(ch) && noWordSep.indexOf(ch) == -1);  int wordEnd=line.length();  for (int i=pos; i < line.length(); i++) {    ch=line.charAt(i);    if (selectNoLetter ^ (!Character.isLetterOrDigit(ch) && noWordSep.indexOf(ch) == -1)) {      wordEnd=i;      break;    }  }  return wordEnd;}  }
class C{  private static LineMap loadScriptMap(Class cl){  ClassLoader loader=cl.getClassLoader();  if (loader == null)   return new LineMap();  try {    String pathName=cl.getName().replace('.','/') + ".class";    InputStream is=loader.getResourceAsStream(pathName);    if (is == null)     return null;    try {      JavaClass jClass=new ByteCodeParser().parse(is);      Attribute attr=jClass.getAttribute("SourceDebugExtension");      if (attr == null) {        int p=cl.getName().indexOf('$');        if (p > 0) {          String className=cl.getName().substring(0,p);          return loadScriptMap(loader.loadClass(className));        }        return new LineMap();      } else       if (attr instanceof OpaqueAttribute) {        byte[] value=((OpaqueAttribute)attr).getValue();        ByteArrayInputStream bis=new ByteArrayInputStream(value);        ReadStreamOld rs=VfsOld.openRead(bis);        rs.setEncoding("UTF-8");        try {          return parseSmap(rs);        }  finally {          rs.close();        }      } else       throw new IllegalStateException(L.l("Expected opaque attribute at '{0}'",attr));    }  finally {      if (is != null)       is.close();    }  } catch (  Throwable e) {    log.finer(e.toString());    log.log(Level.FINEST,e.toString(),e);    return new LineMap();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  String value;  doc=(Document)load("hc_staff",false);  addressList=doc.getElementsByTagName("acronym");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("title");  value=domesticAttr.getNodeValue();  assertEquals("attrEffectiveValueAssert","Yes",value);}  }
class C{  private static int jacobiSymbol(int p,BigInteger n){  if (p == 0)   return 0;  int j=1;  int u=n.mag[n.mag.length - 1];  if (p < 0) {    p=-p;    int n8=u & 7;    if ((n8 == 3) || (n8 == 7))     j=-j;  }  while ((p & 3) == 0)   p>>=2;  if ((p & 1) == 0) {    p>>=1;    if (((u ^ (u >> 1)) & 2) != 0)     j=-j;  }  if (p == 1)   return j;  if ((p & u & 2) != 0)   j=-j;  u=n.mod(BigInteger.valueOf(p)).intValue();  while (u != 0) {    while ((u & 3) == 0)     u>>=2;    if ((u & 1) == 0) {      u>>=1;      if (((p ^ (p >> 1)) & 2) != 0)       j=-j;    }    if (u == 1)     return j;    assert (u < p);    int t=u;    u=p;    p=t;    if ((u & p & 2) != 0)     j=-j;    u%=p;  }  return 0;}  }
class C{  public static List<EObject> collectAncestors(EObject o1,List<EObject> al){  if (o1 != null) {    if (o1.eContainer() != null) {      collectAncestors(o1.eContainer(),al);      al.add(o1.eContainer());    }  }  return al;}  }
class C{  public StringPrintWriter(int initialSize){  super(new StringWriter(initialSize));}  }
class C{  private int calculateContainerSize(File apkFile,boolean forwardLocked) throws IOException {  long sizeBytes=apkFile.length();  if (sizeBytes == 0 && !apkFile.exists()) {    throw new FileNotFoundException();  }  sizeBytes+=NativeLibraryHelper.sumNativeBinariesLI(apkFile);  if (forwardLocked) {    sizeBytes+=PackageHelper.extractPublicFiles(apkFile.getPath(),null);  }  int sizeMb=(int)(sizeBytes >> 20);  if ((sizeBytes - (sizeMb * 1024 * 1024)) > 0) {    sizeMb++;  }  sizeMb++;  return sizeMb;}  }
class C{  public void startShimmerAnimation(){  if (mAnimationStarted) {    return;  }  Animator animator=getShimmerAnimation();  animator.start();  mAnimationStarted=true;}  }
class C{  public void release(){}  }
class C{  public void removeIncomingBytestreamListener(BytestreamListener listener){  this.allRequestListeners.remove(listener);}  }
class C{  private String load(BufferedReader reader) throws IOException {  String line=null;  StringBuilder builder=new StringBuilder();  while ((line=reader.readLine()) != null) {    builder.append(line);    builder.append(Settings.NEW_LINE);  }  return builder.toString();}  }
class C{  @Deprecated public Long updateRoom(String SID,Long rooms_id,String name,Long roomtypes_id,String comment,Long numberOfPartizipants,Boolean ispublic,Integer videoPodWidth,Integer videoPodHeight,Integer videoPodXPosition,Integer videoPodYPosition,Integer moderationPanelXPosition,Boolean showWhiteBoard,Integer whiteBoardPanelXPosition,Integer whiteBoardPanelYPosition,Integer whiteBoardPanelHeight,Integer whiteBoardPanelWidth,Boolean showFilesPanel,Integer filesPanelXPosition,Integer filesPanelYPosition,Integer filesPanelHeight,Integer filesPanelWidth,Boolean appointment) throws AxisFault {  return this.getRoomServiceProxy().updateRoom(SID,rooms_id,name,roomtypes_id,comment,numberOfPartizipants,ispublic,videoPodWidth,videoPodHeight,videoPodXPosition,videoPodYPosition,moderationPanelXPosition,showWhiteBoard,whiteBoardPanelXPosition,whiteBoardPanelYPosition,whiteBoardPanelHeight,whiteBoardPanelWidth,showFilesPanel,filesPanelXPosition,filesPanelYPosition,filesPanelHeight,filesPanelWidth,appointment);}  }
class C{  public void push(String key,T value){  pipes.push(key,value);}  }
class C{  public void ifICmp(final int mode,final Label label){  ifCmp(Type.INT_TYPE,mode,label);}  }
class C{  static boolean compare(ByteBuffer bb,byte[] message){  if (message.length != bb.remaining()) {    out.println("Compare failed, byte array length != to buffer remaining");    return false;  }  for (int i=0; i < message.length; i++) {    byte b=bb.get();    if (message[i] != b) {      out.println("Position " + i + ": "+ message[i]+ " != "+ b);      return false;    }  }  return true;}  }
class C{  public ExpiringMap(){  this(DEFAULT_TIME_TO_LIVE,DEFAULT_EXPIRATION_INTERVAL);}  }
class C{  public void frameRate(float newRateTarget){  frameRateTarget=newRateTarget;  frameRatePeriod=(long)(1000000000.0 / frameRateTarget);  g.setFrameRate(newRateTarget);}  }
class C{  @Override protected void writePostProcess(Object o) throws Exception {  Element node;  node=addElement(m_Document.getDocument().getDocumentElement(),NAME_CLASSFIRST,Boolean.class.getName(),false);  node.appendChild(node.getOwnerDocument().createTextNode(new Boolean(false).toString()));}  }
class C{  public void writeUTF8(String value) throws IOException {  writeUTF8(_bb,value);  writeShort(_bb.size());  _os.write(_bb.getBuffer(),0,_bb.size());}  }
class C{  public static void openWarning(Shell parent,String title,String message){  open(WARNING,parent,title,message,SWT.NONE);}  }
class C{  public Proxy removeProxy(String proxyName){  if (model != null) {    return model.removeProxy(proxyName);  }  return null;}  }
class C{  public void testGetImportedKeysUsingInfoSchema() throws Exception {  if (versionMeetsMinimum(5,0,7)) {    this.stmt.executeUpdate("DROP TABLE IF EXISTS child");    this.stmt.executeUpdate("DROP TABLE If EXISTS parent");    this.stmt.executeUpdate("CREATE TABLE parent(id INT NOT NULL, PRIMARY KEY (id)) ENGINE=INNODB");    this.stmt.executeUpdate("CREATE TABLE child(id INT, parent_id INT, " + "FOREIGN KEY (parent_id) REFERENCES parent(id) ON DELETE SET NULL) ENGINE=INNODB");    Properties props=new Properties();    props.put("useInformationSchema","true");    Connection conn1=null;    try {      conn1=getConnectionWithProps(props);      DatabaseMetaData metaData=conn1.getMetaData();      this.rs=metaData.getImportedKeys(null,null,"child");      this.rs.next();      assertEquals("parent",this.rs.getString("PKTABLE_NAME"));      assertEquals("id",this.rs.getString("PKCOLUMN_NAME"));      assertEquals("child",this.rs.getString("FKTABLE_NAME"));      assertEquals("parent_id",this.rs.getString("FKCOLUMN_NAME"));    }  finally {      this.stmt.executeUpdate("DROP TABLE IF EXISTS child");      this.stmt.executeUpdate("DROP TABLE If EXISTS parent");      if (conn1 != null) {        conn1.close();      }    }  }}  }
class C{  public void onSignInGooglePressed(View view){  Intent signInIntent=Auth.GoogleSignInApi.getSignInIntent(mGoogleApiClient);  startActivityForResult(signInIntent,RC_GOOGLE_LOGIN);  mAuthProgressDialog.show();}  }
class C{  public static void notEmpty(String argumentName,String argumentObject){  notNull(argumentName,argumentObject);  if (argumentObject.length() == 0) {    throw new IllegalArgumentException(argumentName + " cannot be empty");  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static Object fileWriteBegin(String path){  return IoTraceHandler.fileWriteBegin(path);}  }
class C{  public Chronology withUTC(){  return withZone(DateTimeZone.UTC);}  }
class C{  public void sort(int i){  Arrays.sort(vector[i],0,sizes.get(i));}  }
class C{  synchronized final void operationFinished(final int id){  mRunningOperations.remove(id);}  }
class C{  protected void engineSetMode(String mode) throws NoSuchAlgorithmException {  if (!mode.equalsIgnoreCase("ECB")) {    throw new NoSuchAlgorithmException(mode + " cannot be used");  }}  }
class C{  private static FtRemote secure(final Take take) throws IOException {  final ServerSocket skt=SSLServerSocketFactory.getDefault().createServerSocket(0);  return new FtRemote(new FtSecure(new BkBasic(take),skt),skt,true);}  }
class C{  public SearchFieldPainter(Which state){  super();  this.state=state;  this.ctx=new PaintContext(AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES);  type=(state == Which.BACKGROUND_DISABLED || state == Which.BORDER_DISABLED) ? CommonControlState.DISABLED : CommonControlState.ENABLED;  focused=(state == Which.BORDER_FOCUSED);}  }
class C{  public static boolean isLinkToThisSI(String fn,String fn2){  for (int i=0; i < encryptedSiPosition.size(); i++) {    if (encryptedSiPosition.get(i)[0].equals(fn) && encryptedSiPosition.get(i)[2].equals(fn2)) {      return true;    }  }  return false;}  }
class C{  public boolean addPart(PduPart part){  if (null == part) {    throw new NullPointerException();  }  putPartToMaps(part);  return mParts.add(part);}  }
class C{  public int hashCode(){  int hash=addrType.hashCode();  for (int i=0; i < buf.length; i++) {    hash+=buf[i];  }  return hash;}  }
class C{  @SuppressWarnings("unchecked") public static boolean testFilter(String filterString,Consumer<String> errCB){  if (filterString.isEmpty()) {    filterString=" ";  }  try {    try {      PcapBpfProgram test=new PcapBpfProgram();      Pcap pcap=Pcap.openDead(1,Pcap.DEFAULT_SNAPLEN);      int res=pcap.compile(test,filterString,1,-128);      freeFilter(test,true);      if (errCB != null && !pcap.getErr().isEmpty()) {        errCB.accept(pcap.getErr());      }      return res != -1;    } catch (    Error e) {      if (errCB != null) {        errCB.accept(e.getLocalizedMessage());      }    }  } catch (  Exception ex) {    if (errCB != null) {      errCB.accept(ex.getLocalizedMessage());    }  }  return false;}  }
class C{  public boolean trimToSizeIfGreaterThanPercent(double loadFactor){  double excessCapacity=1.0 - (double)this.size / (double)this.items.length;  if (excessCapacity > loadFactor) {    this.trimToSize();    return true;  }  return false;}  }
class C{  public PutIndexTemplateRequest aliases(XContentBuilder source){  return aliases(source.bytes());}  }
class C{  protected <T>double updateWeights(WritableDoubleDataStore weights,DBIDs ids,T latest,DistanceQuery<? super T> distQ){  double weightsum=0.;  for (DBIDIter it=ids.iter(); it.valid(); it.advance()) {    double weight=weights.doubleValue(it);    if (weight <= 0.) {      continue;    }    double newweight=distQ.distance(latest,it);    if (newweight < weight) {      weights.putDouble(it,newweight);      weight=newweight;    }    weightsum+=weight;  }  return weightsum;}  }
class C{  public void invokeVirtual(final Type owner,final Method method){  invokeInsn(Opcodes.INVOKEVIRTUAL,owner,method,false);}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){}  }
class C{  public static String geFileFromRaw(Context context,int resId){  if (context == null) {    return null;  }  StringBuilder s=new StringBuilder();  try {    InputStreamReader in=new InputStreamReader(context.getResources().openRawResource(resId));    BufferedReader br=new BufferedReader(in);    String line;    while ((line=br.readLine()) != null) {      s.append(line);    }    return s.toString();  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  private static BaseFeed parseFeed(ApiClient actor,InputStream is,MapsService maps,boolean preview,PrintWriter pw) throws Exception {  BaseFeed feed;  feed=actor.parseFeed(is);  if (preview) {    pp(maps,feed,pw);  }  return feed;}  }
class C{  public static int ESRMNT(){  return 69;}  }
class C{  public void clearReleaseControl(){  removeMessages(MSG_CONTROL);  removeMessages(MSG_RELEASE_CONTROL);}  }
class C{  public static List<Rule> parseReferential(String path){  Ruleset ruleset=DelphiRulesUtils.buildRuleSetFromXml(DelphiRulesUtils.getConfigurationFromFile(path));  List<Rule> rulesRepository=new ArrayList<Rule>();  for (  DelphiRule fRule : ruleset.getRules()) {    rulesRepository.add(createRepositoryRule(fRule));  }  return rulesRepository;}  }
class C{  public void printArguments(Vertex expression,Primitive type,int start,String[] tokens,boolean reverse,boolean newLine,boolean unravel,boolean brackets,Writer writer,String indent,List<Vertex> variables,List<Vertex> functions,Set<Vertex> elements,boolean space,Network network) throws IOException {  List<Relationship> arguments=expression.orderedRelationships(type);  if (brackets) {    writer.write("(");  }  if (arguments != null) {    boolean needsBrackets=!unravel && !brackets;    if ((arguments.size() == 1) || (tokens != null)) {      needsBrackets=false;    }    if (arguments.size() <= (start + 1)) {      newLine=false;    } else     if (arguments.size() > (3 + start)) {      newLine=true;    }    if (!unravel && space) {      writer.write(" ");    }    if (needsBrackets) {      writer.write("(");    }    int size=arguments.size();    boolean isDo=false;    for (int index=start; index < size; index++) {      if (newLine && (!unravel || (index > 0))) {        writer.write("\r\n");        writer.write(indent);        writer.write("\t");        writer.write("\t");      }      Vertex argument=null;      isDo=false;      if (reverse) {        argument=arguments.get(size - index - 1).getTarget();      } else {        argument=arguments.get(index).getTarget();      }      if (argument.instanceOf(Primitive.VARIABLE) && !elements.contains(argument)) {        variables.add(argument);        elements.add(argument);      }      boolean isExpression=argument.instanceOf(Primitive.EXPRESSION);      if (!unravel && !needsBrackets && isExpression&& !brackets) {        writer.write("(");      }      printElement(argument,writer,indent,functions,variables,elements,network);      if (!unravel && !needsBrackets && isExpression&& !brackets) {        writer.write(")");      }      Vertex operator=argument.getRelationship(Primitive.OPERATOR);      if (operator != null && !argument.instanceOf(Primitive.FUNCTION) && (operator.is(Primitive.DO) || operator.is(Primitive.IF) || operator.is(Primitive.WHILE)|| operator.is(Primitive.FOR))) {        isDo=true;      }      if (index < (size - 1)) {        if (tokens != null) {          writer.write(" ");          writer.write(tokens[index]);          writer.write(" ");        } else         if (!isDo) {          if (unravel) {            writer.write(";");          } else {            writer.write(",");          }          if (!newLine) {            writer.write(" ");          }        }      }    }    if (unravel) {      if (!isDo) {        writer.write(";");      }      writer.write("\r\n");    }    if (!unravel && newLine) {      writer.write("\r\n");      writer.write(indent);      writer.write("\t");    }    if (needsBrackets) {      writer.write(")");    }  }  if (brackets) {    writer.write(")");  }}  }
class C{  private Map<String,ResourceNode> createEmptyNodeMap(List<String> subResourceNames){  Map<String,ResourceNode> map=new LinkedHashMap<>(subResourceNames.size());  for (  String resourceName : subResourceNames) {    map.put(resourceName.replace("/",""),null);  }  return map;}  }
class C{  public static byte[] sign(Signature signatureAlgorithm,PrivateKey privateKey,byte[] contentBytes) throws InvalidKeyException, SignatureException {  signatureAlgorithm.initSign(privateKey);  signatureAlgorithm.update(contentBytes);  return signatureAlgorithm.sign();}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  private void collapseBucket(int hole){  assert this.buckets[hole] != null;  --this.size;  int currentIndex=hole;  while (true) {    currentIndex=getNextIndex(currentIndex);    XZAddressable bucket=this.buckets[currentIndex];    if (bucket == null) {      this.buckets[hole]=null;      return;    }    int targetIndex=getIndex(bucket.getX(),bucket.getZ());    if (hole < currentIndex) {      if (targetIndex <= hole || currentIndex < targetIndex) {        this.buckets[hole]=bucket;        hole=currentIndex;      }    } else {      if (hole >= targetIndex && targetIndex > currentIndex) {        this.buckets[hole]=bucket;        hole=currentIndex;      }    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String streamsLinkIDHeader=null;  String pointerHeader=null;  String DEMHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  int i, c;  double z;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsLinkIDHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      DEMHeader=args[i];    } else     if (i == 3) {      outputHeader=args[i];    }  }  if ((streamsLinkIDHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streamID=new WhiteboxRaster(streamsLinkIDHeader,"r");    int rows=streamID.getNumberRows();    int cols=streamID.getNumberColumns();    double noData=streamID.getNoDataValue();    double gridResX=streamID.getCellSizeX();    double gridResY=streamID.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    double maxLinkID=streamID.getMaximumValue();    double[] linkLengths=new double[(int)maxLinkID + 1];    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster DEM=new WhiteboxRaster(DEMHeader,"r");    if (DEM.getNumberRows() != rows || DEM.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsLinkIDHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    double[][] linkRelief=new double[3][(int)maxLinkID + 1];    for (c=0; c <= maxLinkID; c++) {      linkRelief[0][c]=99999999;      linkRelief[1][c]=-99999999;    }    byte numNeighbouringStreamCells=0;    double currentID=0;    double linkLength=0;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streamID.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streamID.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            linkLength=0;            currentID=streamID.getValue(y,x);            flag=true;            do {              z=DEM.getValue(y,x);              if (z < linkRelief[0][(int)currentID]) {                linkRelief[0][(int)currentID]=z;              }              if (z > linkRelief[1][(int)currentID]) {                linkRelief[1][(int)currentID]=z;              }              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                linkLength+=gridLengths[c];                x+=dX[c];                y+=dY[c];                if (streamID.getValue(y,x) != currentID) {                  linkLengths[(int)(currentID)]=linkLength;                  currentID=streamID.getValue(y,x);                  if (currentID != noData) {                    linkLength=0;                    if (linkLengths[(int)currentID] > 0) {                      flag=false;                    }                  } else {                    flag=false;                  }                }              } else {                linkLengths[(int)currentID]=linkLength;                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    for (i=1; i <= maxLinkID; i++) {      linkRelief[2][i]=(linkRelief[1][i] - linkRelief[0][i]) / linkLengths[i] * 100;    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streamID.getValue(row,col) > 0) {          currentID=streamID.getValue(row,col);          output.setValue(row,col,linkRelief[2][(int)currentID]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streamID.close();    output.close();    returnData(outputHeader);    String retData="Stream Link Slope Output\n";    for (i=1; i <= maxLinkID; i++) {      retData=retData + i + "\t"+ linkRelief[2][i]+ "\n";    }    returnData(retData);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static User createUser(final String rawJSON) throws TwitterException {  try {    final JSONObject json=new JSONObject(rawJSON);    return userConstructor.newInstance(json);  } catch (  final InstantiationException e) {    throw new TwitterException(e);  }catch (  final IllegalAccessException e) {    throw new AssertionError(e);  }catch (  final InvocationTargetException e) {    throw new TwitterException(e);  }catch (  final JSONException e) {    throw new TwitterException(e);  }}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  public PieSliceRenderer(PiePlot plot){  this.plot=plot;  setValueColumn(0);  setErrorColumnTop(1);  setErrorColumnBottom(2);  setColor(new QuasiRandomColors());  outerRadius=1.0;  innerRadius=0.0;  gap=0.0;}  }
class C{  public Coord4D difference(Coord4D other){  return new Coord4D(xCoord - other.xCoord,yCoord - other.yCoord,zCoord - other.zCoord,dimensionId);}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.",source.length,srcOffset));  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.",destination.length,destOffset));  }  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public ScoreScoreboardEntry(ScoreboardDisplay display,PlayerContainerScore score){  super(display,"",display.getEntry(score.getContainer().getColor() + "",score.getContainer().getColor() + ""));  this.score=score;  score.getEntryHolder().addEntry(this);}  }
class C{  public static void gameKeyPress(int gameKey){  if (verbose) {    log("gameKeyPress(" + gameKey + ")");  }  Display.getInstance().getCurrent().keyPressed(Display.getInstance().getKeyCode(gameKey));  waitFor(10);}  }
class C{  private void dynInit(int C_BPartner_ID){  log.config("C_BPartner_ID=" + C_BPartner_ID);  if (C_BPartner_ID != 0) {    int ShelfLifeMinPct=0;    int ShelfLifeMinDays=0;    String sql="SELECT bp.ShelfLifeMinPct, bpp.ShelfLifeMinPct, bpp.ShelfLifeMinDays " + "FROM C_BPartner bp " + " LEFT OUTER JOIN C_BPartner_Product bpp"+ " ON (bp.C_BPartner_ID=bpp.C_BPartner_ID AND bpp.M_Product_ID=?) "+ "WHERE bp.C_BPartner_ID=?";    PreparedStatement pstmt=null;    ResultSet rs=null;    try {      pstmt=DB.prepareStatement(sql,null);      pstmt.setInt(1,m_M_Product_ID);      pstmt.setInt(2,C_BPartner_ID);      rs=pstmt.executeQuery();      if (rs.next()) {        ShelfLifeMinPct=rs.getInt(1);        int pct=rs.getInt(2);        if (pct > 0)         ShelfLifeMinDays=pct;        ShelfLifeMinDays=rs.getInt(3);      }    } catch (    Exception e) {      log.log(Level.SEVERE,sql,e);    } finally {      DB.close(rs,pstmt);      rs=null;      pstmt=null;    }    if (ShelfLifeMinPct > 0) {      s_sqlMinLife=" AND COALESCE(TRUNC(((daysbetween(asi.GuaranteeDate, SYSDATE))/p.GuaranteeDays)*100),0)>=" + ShelfLifeMinPct;      log.config("PAttributeInstance.dynInit - ShelfLifeMinPct=" + ShelfLifeMinPct);    }    if (ShelfLifeMinDays > 0) {      s_sqlMinLife+=" AND COALESCE((daysbetween(asi.GuaranteeDate, SYSDATE)),0)>=" + ShelfLifeMinDays;      log.config("PAttributeInstance.dynInit - ShelfLifeMinDays=" + ShelfLifeMinDays);    }  }  m_sql=m_table.prepareTable(s_layout,s_sqlFrom,s_sqlWhereWithoutWarehouse + s_sqlNonZero,false,"asi") + " ORDER BY asi.GuaranteeDate, s.QtyOnHand";  m_table.setMultiSelection(false);  m_table.getModel().addTableModelListener(this);  refresh();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public boolean accept(File file){  String name=file.getName().toLowerCase();  if (file.isDirectory()) {    return true;  }  for (  String element : m_Extension) {    if (name.endsWith(element)) {      return true;    }  }  return false;}  }
class C{  protected int engineDoFinal(byte[] in,int inOffset,int inLen,byte[] out,int outOffset) throws IllegalBlockSizeException, ShortBufferException, BadPaddingException {  throw new IllegalStateException("Cipher has not been initialized");}  }
class C{  public void learnNetwork(ClassificationDataSet D){  IntList varOrder=new IntList(D.getNumCategoricalVars() + 1);  varOrder.add(D.getNumCategoricalVars());  ListUtils.addRange(varOrder,0,D.getNumCategoricalVars(),1);  ri=new int[varOrder.size()];  for (  int i : varOrder)   if (i == D.getNumCategoricalVars())   ri[i]=D.getClassSize(); else   ri[i]=D.getCategories()[i].getNumOfCategories();  int u=maxParents;  if (u <= 0)   u=ri.length;  Set<Integer> preceding=new IntSet();  for (  int i : varOrder) {    Set<Integer> pi=new IntSet();    double pOld=f(i,pi,D);    boolean OKToProceed=true;    Set<Integer> candidates=new IntSet(preceding);    while (OKToProceed && pi.size() < u) {      if (candidates.isEmpty())       break;      double pNew=Double.NEGATIVE_INFINITY;      int z=-1;      candidates.removeAll(pi);      for (      int candidate : candidates) {        pi.add(candidate);        double tmp=f(i,pi,D);        if (tmp > pNew) {          pNew=tmp;          z=candidate;        }        pi.remove(candidate);      }      if (pNew > pOld) {        pOld=pNew;        pi.add(z);      } else       OKToProceed=false;    }    for (    int parrent : pi)     depends(parrent,i);    preceding.add(i);  }  ri=null;}  }
class C{  protected String computeMessage(){  final StringBuilder sb=new StringBuilder();  sb.append("Project dependencies contain the following API projects:\n");  for (  String apiId : apiImplMapping.getApiIds()) {    sb.append("- " + apiId + " ("+ apiImplMapping.getImplIds(apiId).stream().collect(Collectors.joining(", "))+ ")\n");  }  sb.append('\n');  sb.append("Please choose an implementation below:");  return sb.toString();}  }
class C{  public boolean isDebugEnabled(){  return debugEnabled;}  }
class C{  public CLProgram createProgram(String... srcs){  return createProgram(null,srcs);}  }
class C{  public static BigDecimal rate(int p_C_CurrencyFrom_ID,int p_C_CurrencyTo_ID,Timestamp p_ConversionDate,int p_C_ConversionType_ID,int p_AD_Client_ID,int p_AD_Org_ID) throws SQLException {  if (p_C_CurrencyFrom_ID == p_C_CurrencyTo_ID)   return Adempiere.ONE;  Timestamp ConversionDate=p_ConversionDate;  if (ConversionDate == null)   ConversionDate=new Timestamp(System.currentTimeMillis());  ConversionDate=Adempiere.trunc(ConversionDate);  int C_ConversionType_ID=p_C_ConversionType_ID;  if (C_ConversionType_ID == 0) {    String sql="SELECT C_ConversionType_ID " + "FROM C_ConversionType " + "WHERE IsDefault='Y'"+ " AND AD_Client_ID IN (0,?) "+ "ORDER BY AD_Client_ID DESC";    C_ConversionType_ID=Adempiere.getSQLValue(sql,p_AD_Client_ID);  }  BigDecimal rate=null;  String sql="SELECT MultiplyRate " + "FROM C_Conversion_Rate " + "WHERE C_Currency_ID=? AND C_Currency_ID_To=?"+ " AND C_ConversionType_ID=?"+ " AND TRUNC(ValidFrom, 'DD') <= ?"+ " AND TRUNC(ValidTo, 'DD') >= ?"+ " AND AD_Client_ID IN (0,?) AND AD_Org_ID IN (0,?) "+ "ORDER BY AD_Client_ID DESC, AD_Org_ID DESC, ValidFrom DESC";  PreparedStatement pstmt=Adempiere.prepareStatement(sql);  pstmt.setInt(1,p_C_CurrencyFrom_ID);  pstmt.setInt(2,p_C_CurrencyTo_ID);  pstmt.setInt(3,C_ConversionType_ID);  pstmt.setTimestamp(4,ConversionDate);  pstmt.setTimestamp(5,ConversionDate);  pstmt.setInt(6,p_AD_Client_ID);  pstmt.setInt(7,p_AD_Org_ID);  ResultSet rs=pstmt.executeQuery();  if (rs.next()) {    rate=rs.getBigDecimal(1);  }  rs.close();  pstmt.close();  if (rate == null)   return null;  return rate;}  }
class C{  public PleaseWaitDialog(java.awt.Frame parent,String message){  super(parent,false);  bundle=ResourceBundle.getBundle("org.panbox.desktop.common.gui.Messages",Settings.getInstance().getLocale());  initComponents(message);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static List<StoragePort> findStoragePortsInDB(String pwwn,DbClient dbClient){  List<StoragePort> ports=new ArrayList<StoragePort>();  _log.info("Looking for storage port {} in database",pwwn);  URIQueryResultList portUriList=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePortEndpointConstraint(pwwn),portUriList);  Iterator<URI> itr=portUriList.iterator();  while (itr.hasNext()) {    StoragePort port=dbClient.queryObject(StoragePort.class,itr.next());    if (port != null && !port.getInactive()) {      _log.info("Found storage port {}",pwwn);      ports.add(port);    }  }  return ports;}  }
class C{  private void cmd_matchTo(){  int index=matchTo.getSelectedIndex();  String selection=(String)matchTo.getModel().getElementAt(index);  xMatchedToBorder.setValue(selection);  xMatchedToTable.setRowCount(0);}  }
class C{  public TopologyUsage(){}  }
class C{  private void loadGui(){  setContentView(R.layout.editor);  DisplayMetrics metrics=new DisplayMetrics();  getWindowManager().getDefaultDisplay().getMetrics(metrics);  mDensity=metrics.density;  mMarkerLeftInset=(int)(46 * mDensity);  mMarkerRightInset=(int)(48 * mDensity);  mMarkerTopOffset=(int)(10 * mDensity);  mMarkerBottomOffset=(int)(10 * mDensity);  mStartText=(TextView)findViewById(R.id.starttext);  mStartText.addTextChangedListener(mTextWatcher);  mEndText=(TextView)findViewById(R.id.endtext);  mEndText.addTextChangedListener(mTextWatcher);  mPlayButton=(ImageButton)findViewById(R.id.play);  mPlayButton.setOnClickListener(mPlayListener);  mRewindButton=(ImageButton)findViewById(R.id.rew);  mRewindButton.setOnClickListener(mRewindListener);  mFfwdButton=(ImageButton)findViewById(R.id.ffwd);  mFfwdButton.setOnClickListener(mFfwdListener);  TextView markStartButton=(TextView)findViewById(R.id.mark_start);  markStartButton.setOnClickListener(mMarkStartListener);  TextView markEndButton=(TextView)findViewById(R.id.mark_end);  markEndButton.setOnClickListener(mMarkEndListener);  enableDisableButtons();  mWaveformView=(WaveformView)findViewById(R.id.waveform);  mWaveformView.setListener(this);  mInfo=(TextView)findViewById(R.id.info);  mInfo.setText(mCaption);  mMaxPos=0;  mLastDisplayedStartPos=-1;  mLastDisplayedEndPos=-1;  if (mSoundFile != null && !mWaveformView.hasSoundFile()) {    mWaveformView.setSoundFile(mSoundFile);    mWaveformView.recomputeHeights(mDensity);    mMaxPos=mWaveformView.maxPos();  }  mStartMarker=(MarkerView)findViewById(R.id.startmarker);  mStartMarker.setListener(this);  mStartMarker.setAlpha(1f);  mStartMarker.setFocusable(true);  mStartMarker.setFocusableInTouchMode(true);  mStartVisible=true;  mEndMarker=(MarkerView)findViewById(R.id.endmarker);  mEndMarker.setListener(this);  mEndMarker.setAlpha(1f);  mEndMarker.setFocusable(true);  mEndMarker.setFocusableInTouchMode(true);  mEndVisible=true;  updateDisplay();}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public void addUpdateManagerListener(UpdateManagerListener l){  listeners.add(l);}  }
class C{  public void printDocumentEntry(DocumentListEntry doc){  StringBuffer outputBuffer=new StringBuffer();  outputBuffer.append(" -- " + doc.getTitle().getPlainText() + " ");  if (!doc.getParentLinks().isEmpty()) {    for (    Link link : doc.getParentLinks()) {      outputBuffer.append("[" + link.getTitle() + "] ");    }  }  outputBuffer.append(doc.getResourceId());  output.println(outputBuffer);}  }
class C{  public static double quantile(double val,double loc,double scale,double shape1,double shape2){  if (!(val >= 0.) || !(val <= 1.)) {    return Double.NaN;  }  if (val == 0.) {    if (shape2 <= 0.) {      if (shape1 < 0.) {        return loc + scale / shape1;      } else {        return Double.NEGATIVE_INFINITY;      }    } else {      if (shape1 != 0.) {        return loc + scale / shape1 * (1. - Math.pow(shape2,-shape1));      } else {        return loc + scale * Math.log(shape2);      }    }  }  if (val == 1.) {    if (shape1 <= 0.) {      return Double.NEGATIVE_INFINITY;    }    return loc + scale / shape1;  }  val=-Math.log(val);  if (shape2 != 0.) {    val=(1 - Math.exp(-shape2 * val)) / shape2;  }  val=-Math.log(val);  if (shape1 != 0.) {    val=(1 - Math.exp(-shape1 * val)) / shape1;  }  return loc + scale * val;}  }
class C{  @Override public void writeIncremental(Instance inst) throws IOException {  int writeMode=getWriteMode();  Instances structure=getInstances();  PrintWriter outW=null;  if ((getRetrieval() == BATCH) || (getRetrieval() == NONE)) {    throw new IOException("Batch and incremental saving cannot be mixed.");  }  if (getWriter() != null) {    outW=new PrintWriter(getWriter());  }  if (writeMode == WAIT) {    if (structure == null) {      setWriteMode(CANCEL);      if (inst != null) {        System.err.println("Structure (Header Information) has to be set in advance");      }    } else {      setWriteMode(STRUCTURE_READY);    }    writeMode=getWriteMode();  }  if (writeMode == CANCEL) {    if (outW != null) {      outW.close();    }    cancel();  }  if (writeMode == STRUCTURE_READY) {    setWriteMode(WRITE);    writeMode=getWriteMode();  }  if (writeMode == WRITE) {    if (structure == null) {      throw new IOException("No instances information available.");    }    if (inst != null) {      if ((retrieveFile() == null) && (outW == null)) {        System.out.println(instanceToSvmlight(inst));      } else {        outW.println(instanceToSvmlight(inst));        m_incrementalCounter++;        if (m_incrementalCounter > 100) {          m_incrementalCounter=0;          outW.flush();        }      }    } else {      if (outW != null) {        outW.flush();        outW.close();      }      m_incrementalCounter=0;      resetStructure();      outW=null;      resetWriter();    }  }}  }
class C{  public Vertex applyLEARN(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network) throws Exception {  Vertex pattern=arguments.get(0).getTarget().applyEval(variables,network);  Vertex template=arguments.get(1).getTarget().applyEval(variables,network);  Relationship relationship=pattern.addRelationship(Primitive.RESPONSE,template);  template.addRelationship(Primitive.QUESTION,pattern);  Vertex that=getRelationship(Primitive.THAT);  if (that != null) {    that=that.applyEval(variables,network);    Vertex meta=network.createMeta(relationship);    meta.addRelationship(Primitive.PREVIOUS,that);    meta.addRelationship(Primitive.REQUIRE,Primitive.PREVIOUS);  }  Vertex topic=getRelationship(Primitive.TOPIC);  if (topic != null) {    topic=topic.applyEval(variables,network);    Vertex meta=network.createMeta(relationship);    meta.addRelationship(Primitive.TOPIC,topic);    meta.addRelationship(Primitive.REQUIRE,Primitive.TOPIC);  }  network.getBot().log(this,"New response learned",Level.FINER,pattern,template,that,topic);  if (!pattern.instanceOf(Primitive.PATTERN)) {    pattern.associateAll(Primitive.WORD,pattern,Primitive.QUESTION);  } else {    Vertex state=variables.get(network.createVertex(Primitive.STATE));    if (state != null) {      List<Vertex> instructions=state.orderedRelations(Primitive.DO);      Vertex sentenceState=null;      if (instructions != null) {        for (        Vertex instruction : instructions) {          if (instruction.instanceOf(Primitive.CASE)) {            Vertex variable=instruction.getRelationship(Primitive.CASE);            if ((variable != null) && variable.isVariable() && variable.hasRelationship(Primitive.INPUT)) {              sentenceState=instruction.getRelationship(Primitive.GOTO);              break;            }          }        }      }      if (sentenceState != null) {        if (sentenceState.getNetwork() != network) {          sentenceState=network.createVertex(sentenceState);        }        Vertex child=AIMLParser.parser().createState(pattern,sentenceState,network);        Vertex equation=network.createInstance(Primitive.CASE);        equation.addRelationship(Primitive.PATTERN,pattern);        if (that != null) {          equation.addRelationship(Primitive.THAT,that);        }        if (topic != null) {          equation.addRelationship(Primitive.TOPIC,topic);        }        equation.addRelationship(Primitive.TEMPLATE,template);        child.addRelationship(Primitive.DO,equation);      }    }  }  return pattern;}  }
class C{  private static void expandFieldArray(Object instance,String fieldName,Object[] extraElements) throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException {  Field jlrField=findField(instance,fieldName);  Object[] original=(Object[])jlrField.get(instance);  Object[] combined=(Object[])Array.newInstance(original.getClass().getComponentType(),original.length + extraElements.length);  System.arraycopy(original,0,combined,0,original.length);  System.arraycopy(extraElements,0,combined,original.length,extraElements.length);  jlrField.set(instance,combined);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public boolean relative(int rowCount) throws SQLException {  try {    debugCodeCall("relative",rowCount);    checkClosed();    int row=result.getRowId() + 1 + rowCount;    if (row < 0) {      row=0;    } else     if (row > result.getRowCount()) {      row=result.getRowCount() + 1;    }    return absolute(row);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static Transform makeTranslation(float x,float y,float z){  Transform out=new Transform(null);  out.translateX=x;  out.translateY=y;  out.translateZ=z;  out.type=TYPE_TRANSLATION;  return out;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public synchronized void deleteObservers(){  observers.clear();}  }
class C{  public int sqrt(int x){  if (x < 0)   throw new ArithmeticException("positive number needed");  if (x <= 1)   return x;  int lo=1, hi=x;  while (lo + 1 < hi) {    int mid=lo + ((hi - lo) >> 1);    if (mid > x / mid)     hi=mid; else     lo=mid;  }  return lo;}  }
class C{  public static char[] toCharArray(float[] array){  char[] result=new char[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(char)array[i];  }  return result;}  }
class C{  private static int calculateInSampleSizeByReqestedSize(int width,int height,int reqWidth,int reqHeight){  int inSampleSize=1;  if (height > reqHeight || width > reqWidth) {    while ((height / 2 / inSampleSize) > reqHeight && (width / 2 / inSampleSize) > reqWidth) {      inSampleSize*=2;    }  }  return inSampleSize;}  }
class C{  public DisruptorBlockingQueue(final int capacity){  this(capacity,SpinPolicy.WAITING);}  }
class C{  public BitVector(long[] bits,int size){  elements(bits,size);}  }
class C{  private void pushDouble(FPR reg){  if (VM.VerifyAssertions)   validateStackPush(BYTES_IN_DOUBLE);  asm.emitSTFD(reg,spTopOffset - BYTES_IN_DOUBLE,FP);  spTopOffset-=2 * BYTES_IN_STACKSLOT;}  }
class C{  public AbstractRequest putFields(ArrayMap<String,String> fields){  fields.putAll(fields);  return this;}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.DOMAIN;}  }
class C{  public String formatVector(List list,String delim,String finaldelim){  StringBuffer sb=new StringBuffer();  int size=list.size();  for (int i=0; i < size; i++) {    sb.append(list.get(i));    if (i < size - 2) {      sb.append(delim);    } else     if (i < size - 1) {      sb.append(finaldelim);    }  }  return sb.toString();}  }
class C{  public Object eval(CallStack callstack,Interpreter interpreter) throws EvalError {  SimpleNode child=(SimpleNode)jjtGetChild(0);  if (child instanceof BSHArrayInitializer) {    if (baseType == null)     throw new EvalError("Internal Array Eval err:  unknown base type",this,callstack);    Object initValue=((BSHArrayInitializer)child).eval(baseType,numUndefinedDims,callstack,interpreter);    Class arrayClass=initValue.getClass();    int actualDimensions=Reflect.getArrayDimensions(arrayClass);    definedDimensions=new int[actualDimensions];    if (definedDimensions.length != numUndefinedDims)     throw new EvalError("Incompatible initializer. Allocation calls for a " + numUndefinedDims + " dimensional array, but initializer is a "+ actualDimensions+ " dimensional array",this,callstack);    Object arraySlice=initValue;    for (int i=0; i < definedDimensions.length; i++) {      definedDimensions[i]=Array.getLength(arraySlice);      if (definedDimensions[i] > 0)       arraySlice=Array.get(arraySlice,0);    }    return initValue;  } else {    definedDimensions=new int[numDefinedDims];    for (int i=0; i < numDefinedDims; i++) {      try {        Object length=((SimpleNode)jjtGetChild(i)).eval(callstack,interpreter);        definedDimensions[i]=((Primitive)length).intValue();      } catch (      Exception e) {        throw new EvalError("Array index: " + i + " does not evaluate to an integer",this,callstack);      }    }  }  return Primitive.VOID;}  }
class C{  public LockTimeout(){  super(Harness.options,"Lock Timeout","Lock timeout (seconds)",Integer.valueOf(System.getProperty("mmtk.harness.timeout.lock","30")));}  }
class C{  public boolean isQuestInState(final String name,final String... states){  return quests.isQuestInState(name,states);}  }
class C{  public void installDefaults(SeaGlassContext context,SeaglassUI ui){  if (!context.isSubregion()) {    JComponent c=context.getComponent();    Border border=c.getBorder();    if (border == null || border instanceof UIResource) {      c.setBorder(new SeaGlassBorder(ui,getInsets(context,null)));    }  }  installDefaults(context);}  }
class C{  public static void disableSync(Context context){  PreferencesUtils.setBoolean(context,R.string.drive_sync_key,PreferencesUtils.DRIVE_SYNC_DEFAULT);  disableSyncForAll(context);  clearSyncState(context);}  }
class C{  private Stream<VisualItem> streamNodes(){  Stream<VisualItem> stream;  if (this.graph.getTupleCount() > 0) {    stream=Stream.concat(Stream.of(this.getVisualRootItem()),this.map.values().stream().filter(null).map(null).filter(null));  } else {    stream=Stream.empty();  }  return stream;}  }
class C{  public void addIndex(int index){  add(index >> 8,index);}  }
class C{  public String toString(){  return ("DNSName: " + name);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public CloneNotSupportedException(String s){  super(s);}  }
class C{  @Override public boolean matches(SolrDocument doc){  Object v=doc.getFieldValue(this.key.getSolrFieldName());  if (v == null)   return false;  return v.toString().matches(Long.toString(this.value));}  }
class C{  public static CallArgumentsNode create(boolean modeChange,boolean modeChangeForAll,RNode[] args,ArgumentsSignature signature,int[] varArgsSymbolIndicesArr){  RNode[] wrappedArgs=new RNode[args.length];  for (int i=0; i < wrappedArgs.length; i++) {    RNode arg=args[i];    if (arg == null) {      wrappedArgs[i]=null;    } else {      wrappedArgs[i]=WrapArgumentNode.create(arg,i == 0 || modeChangeForAll ? modeChange : true,i);    }  }  return new CallArgumentsNode(wrappedArgs,signature,varArgsSymbolIndicesArr);}  }
class C{  @Override public void endProcessTokens(){  if (tokens.isConnected()) {    tokens.emit(tokentuple);    tokentuple=null;  }  if (splittokens.isConnected()) {    splittokens.emit(stokentuple);    stokentuple=null;    smap=null;    vals=null;  }}  }
class C{  public synchronized Portfolio persistPortfolio(final Portfolio instance) throws PersistentModelException {  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    Portfolio portfolio=findPortfolioByName(instance.getName());    if (null == portfolio) {      instance.setLastUpdateDate(TradingCalendar.getDateTimeNowMarketTimeZone());      for (      PortfolioAccount item : instance.getPortfolioAccounts()) {        Account account=findByAccountNumber(item.getAccount().getAccountNumber());        if (null == account) {          item.getAccount().setCurrency(Currency.USD);          item.getAccount().setName(item.getAccount().getAccountNumber());          item.getAccount().setLastUpdateDate(TradingCalendar.getDateTimeNowMarketTimeZone());        } else {          item.setAccount(account);        }      }      entityManager.persist(instance);    } else {      if (0 != CoreUtils.nullSafeComparator(portfolio.getAllocationMethod(),instance.getAllocationMethod())) {        portfolio.setAllocationMethod(instance.getAllocationMethod());        portfolio.setLastUpdateDate(TradingCalendar.getDateTimeNowMarketTimeZone());      }      for (      PortfolioAccount item : instance.getPortfolioAccounts()) {        Account account=findByAccountNumber(item.getAccount().getAccountNumber());        if (null == account) {          item.getAccount().setCurrency(Currency.USD);          item.getAccount().setName(item.getAccount().getAccountNumber());          item.getAccount().setLastUpdateDate(TradingCalendar.getDateTimeNowMarketTimeZone());        } else {          item.setAccount(account);        }        PortfolioAccount portfolioAccount=findByNameAndAccountNumber(portfolio.getName(),item.getAccount().getAccountNumber());        if (null == portfolioAccount) {          item.setPortfolio(portfolio);          portfolio.getPortfolioAccounts().add(item);        }      }      entityManager.persist(portfolio);    }    entityManager.getTransaction().commit();    return (portfolio == null ? instance : portfolio);  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public WaitingThread(Condition cond,RouteSpecificPool pool){  if (cond == null) {    throw new IllegalArgumentException("Condition must not be null.");  }  this.cond=cond;  this.pool=pool;}  }
class C{  public BitwiseOpExpression(BitWiseOpEnum binaryOp){  this.binaryOp=binaryOp;}  }
class C{  public boolean replaceRef(Object oldRef,Object newRef) throws IOException {  Integer value=(Integer)_refs.remove(oldRef);  if (value != null) {    _refs.put(newRef,value);    return true;  } else   return false;}  }
class C{  public static boolean hasMimeType(String mimeType){  if (mimeType == null || mimeType.isEmpty()) {    return false;  }  return mimeTypeToExtensionMap.containsKey(mimeType);}  }
class C{  public boolean isXRoundedLabels(){  return mXRoundedLabels;}  }
class C{  public static <S,T>List<S> projectFirst(final List<Pair<S,T>> list){  return list.stream().map(null).collect(Collectors.toList());}  }
class C{  public static String s1(int v){  char[] result=new char[3];  if (v < 0) {    result[0]='-';    v=-v;  } else {    result[0]='+';  }  for (int i=0; i < 2; i++) {    result[2 - i]=Character.forDigit(v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  protected Node deepCopyInto(Node n){  GenericElementNS ge=(GenericElementNS)super.deepCopyInto(n);  ge.nodeName=nodeName;  return n;}  }
class C{  public void fillUserAvatarURL(final JSONObject user){  final String originalURL=user.optString(UserExt.USER_AVATAR_URL);  if (Symphonys.getBoolean("qiniu.enabled")) {    if (!StringUtils.contains(originalURL,"qnssl.com") && !StringUtils.contains(originalURL,"clouddn.com")) {      user.put(UserExt.USER_AVATAR_URL,DEFAULT_AVATAR_URL);      return;    }  }  user.put(UserExt.USER_AVATAR_URL,StringUtils.substringBeforeLast(originalURL,"?"));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:33.371 -0500",hash_original_method="F26FB5757482F756B15ADBECFFA22920",hash_generated_method="866E2D88D33729E33FBF0566E77B7956") public PEMReader(Reader reader,PasswordFinder pFinder,String provider){  this(reader,pFinder,provider,provider);}  }
class C{  static AttrMaxPause createFromString(final String str) throws BOSHException {  if (str == null) {    return null;  } else {    return new AttrMaxPause(str);  }}  }
class C{  public QueryStringQueryBuilder allowLeadingWildcard(boolean allowLeadingWildcard){  this.allowLeadingWildcard=allowLeadingWildcard;  return this;}  }
class C{  public void toData(DataOutput out) throws IOException {  DataSerializer.writeString(this.regionPath,out);  DataSerializer.writeObject(this.callbackArgument,out);  out.writeByte(this.op.ordinal);  out.writeBoolean(this.originRemote);  InternalDataSerializer.invokeToData(((InternalDistributedMember)this.distributedMember),out);}  }
class C{  public void run(){  long st=System.currentTimeMillis();  long lasten=st;  long lasttotalops=0;  boolean alldone;  do {    alldone=true;    int totalops=0;    for (    Thread t : _threads) {      if (t.getState() != Thread.State.TERMINATED) {        alldone=false;      }      ClientThread ct=(ClientThread)t;      totalops+=ct.getOpsDone();    }    long en=System.currentTimeMillis();    long interval=en - st;    double curthroughput=1000.0 * (((double)(totalops - lasttotalops)) / ((double)(en - lasten)));    lasttotalops=totalops;    lasten=en;    DecimalFormat d=new DecimalFormat("#.##");    if (totalops == 0) {      System.err.println(_label + " " + (interval / 1000)+ " sec: "+ totalops+ " operations; "+ Measurements.getMeasurements().getSummary());    } else {      System.err.println(_label + " " + (interval / 1000)+ " sec: "+ totalops+ " operations; "+ d.format(curthroughput)+ " current ops/sec; "+ Measurements.getMeasurements().getSummary());    }    if (_standardstatus) {      if (totalops == 0) {        System.out.println(_label + " " + (interval / 1000)+ " sec: "+ totalops+ " operations; "+ Measurements.getMeasurements().getSummary());      } else {        System.out.println(_label + " " + (interval / 1000)+ " sec: "+ totalops+ " operations; "+ d.format(curthroughput)+ " current ops/sec; "+ Measurements.getMeasurements().getSummary());      }    }    try {      sleep(sleeptime);    } catch (    InterruptedException e) {    }  } while (!alldone);}  }
class C{  private void storeMap(){  clearMap();  int i=0;  Collection<List<AssignableControl>> list=map.values();  for (Iterator<List<AssignableControl>> it=list.iterator(); it.hasNext(); ) {    List<AssignableControl> list1=it.next();    for (Iterator<AssignableControl> it1=list1.iterator(); it1.hasNext(); ) {      AssignableControl assignableCommand=it1.next();      prefs.put("CONTROL_MAPPING_" + i++,assignableCommand.getPrefString());    }  }  try {    prefs.flush();  } catch (  BackingStoreException ex) {    Logger.getLogger(ControlMap.class.getName()).error("{0}",ex);  }}  }
class C{  public void testSolrExceptionCodeNotFromSolr() throws IOException, SolrServerException {  final int status=527;  assertEquals(status + " didn't generate an UNKNOWN error code, someone modified the list of valid ErrorCode's w/o changing this test to work a different way",ErrorCode.UNKNOWN,ErrorCode.getErrorCode(status));  try (HttpSolrClient client=getHttpSolrClient(jetty.getBaseUrl().toString() + "/debug/foo")){    DebugServlet.setErrorCode(status);    try {      SolrQuery q=new SolrQuery("foo");      client.query(q,METHOD.GET);      fail("Didn't get excepted exception from oversided request");    } catch (    SolrException e) {      assertEquals("Unexpected exception status code",status,e.code());    }  }  finally {    DebugServlet.clear();  }}  }
class C{  private Operation analyze(){  AbstractType<?> comparator=backend.getBaseCfs().getComparator();  Stack<Operation.Builder> operations=new Stack<>();  Stack<IndexExpression> group=new Stack<>();  boolean isOldFormat=true;  for (  IndexExpression e : filter.getClause()) {    if (e.isSetLogicalOp()) {      OperationType op=OperationType.valueOf(e.logicalOp.name());      Operation.Builder sideL, sideR;switch (group.size()) {case 0:        sideL=operations.pop();      sideR=operations.pop();    Operation.Builder operation=new Operation.Builder(op,comparator,controller);  if (sideL.op == sideR.op && op == sideL.op) {    operation.add(sideL.expressions);    operation.add(sideR.expressions);  } else {    operation.setLeft(sideL).setRight(sideR);  }operations.push(operation);break;case 1:sideR=operations.pop();if (op == OperationType.AND && op == sideR.op) {sideR.add(group.pop());operations.push(sideR);} else {operation=new Operation.Builder(op,comparator,controller,group.pop());operation.setRight(sideR);operations.push(operation);}break;default :operations.push(new Operation.Builder(op,comparator,controller,group.pop(),group.pop()));break;}isOldFormat=false;} else {group.add(e);}}if (isOldFormat) {Operation.Builder and=new Operation.Builder(OperationType.AND,comparator,controller);while (!group.empty()) and.add(group.pop());operations.push(and);}Operation.Builder root=operations.pop();return root.complete();}  }
class C{  @Override protected boolean isReparseSupported(){  return false;}  }
class C{  public ServerValidatableSamlToken parseToken(Element tokenRoot) throws InvalidTokenException {  return new ServerValidatableSamlTokenImpl(tokenRoot);}  }
class C{  public void treeNodesInserted(TreeModelEvent e){  TreePath path=e.getTreePath();  DefaultTreeCheckingModel.this.checkingMode.updateCheckAfterChildrenInserted(path);}  }
class C{  protected PropertyChangeListener createRolloverListener(){  return null;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.BINARY_LOGICAL_EXPRESSION__LHS:    return getLhs();case N4JSPackage.BINARY_LOGICAL_EXPRESSION__OP:  return getOp();case N4JSPackage.BINARY_LOGICAL_EXPRESSION__RHS:return getRhs();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public void firePropertyChange(String propertyName,boolean oldValue,boolean newValue){}  }
class C{  public static void main(String[] args) throws IOException {  new LagAnalyser().generateHTMLReport(args[0],args[1]);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:29.515 -0500",hash_original_method="711404AF80F30F53943AF0817E2DC7DA",hash_generated_method="59E93A15BE6AEC5A1FBECAC978774B99") public void onCallEnded(SipSession session){}  }
class C{  private void createPackageParents(File packageFile,File treeFile){  if (null == packageFile) {    return;  }  TreeClimber treePath=new TreeClimber(treeFile);  GraphNode lookupNode=builder.newNode(packageNode);  while (lookupNode == packageNode) {    packageFile=packageFile.getParentFile();    treePath.ascendTree();    if (null == packageFile) {      return;    }    PackageElement childNode=packageNode;    DirectoryElement childDir=packageDir;    createPackageDir(packageFile,treePath.getTreePath());    builder.newDep(packageNode,childNode,JavaRelation.PACKAGE);    builder.newDep(packageDir,childDir,FileSystemRelation.CONTAINS_DIR);    lookupNode=builder.newNode(packageNode);  }}  }
class C{  private int indexOf(final CharSequence s,final int from,final int to){  final int c=pattern[0];  int i=from < 0 ? -1 : from - 1;  if (caseSensitive) {    while (++i < to)     if (s.charAt(i) == c)     return i;    return -1;  } else   if (asciiCase) {    while (++i < to)     if (asciiToLowerCase(s.charAt(i)) == c)     return i;    return -1;  } else {    while (++i < to)     if (unicodeToLowerCase(s.charAt(i)) == c)     return i;    return -1;  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i;  double numInNeighbours;  boolean flag=false;  boolean logTransform=false;  String outputType=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      power=Double.parseDouble(args[i]);      if (power > 10) {        power=10;      }    } else     if (i == 3) {      outputType=args[i].toLowerCase();    } else     if (i == 4) {      logTransform=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      if (!args[i].toLowerCase().contains("not specified")) {        threshold=Double.parseDouble(args[i]);      } else {        threshold=-9999;      }    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    gridRes=DEM.getCellSizeX();    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,1);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    tmpGrid=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpGrid.isTemporaryFile=true;    int loopNum=1;    updateProgress("Loop " + loopNum + ":",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          numInNeighbours=0;          for (i=0; i < 8; i++) {            if (DEM.getValue(row + dY[i],col + dX[i]) > z) {              numInNeighbours++;            }          }          tmpGrid.setValue(row,col,numInNeighbours);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop " + loopNum + ":",(int)progress);    }    boolean somethingDone;    do {      loopNum++;      updateProgress("Loop " + loopNum + ":",0);      somethingDone=false;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          if (tmpGrid.getValue(row,col) == 0) {            FD8Accum(row,col);            somethingDone=true;          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    } while (somethingDone);    loopNum++;    updateProgress("Loop " + loopNum + ":",0);    if (outputType.equals("specific catchment area (sca)")) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=DEM.getValue(row,col);          if (z != noData) {            output.setValue(row,col,output.getValue(row,col) * gridRes);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    } else     if (outputType.equals("total catchment area")) {      double gridCellArea=gridRes * gridRes;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output.getValue(row,col);          if (z != noData) {            output.setValue(row,col,output.getValue(row,col) * gridCellArea);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    }    if (logTransform) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output.getValue(row,col);          if (z != noData) {            output.setValue(row,col,Math.log(output.getValue(row,col)));          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    } else {      output.setNonlinearity(0.2);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    tmpGrid.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void beforeKey() throws JSONException {  Scope context=peek();  if (context == Scope.NONEMPTY_OBJECT) {    out.append(',');  } else   if (context != Scope.EMPTY_OBJECT) {    throw new JSONException("Nesting problem");  }  newline();  replaceTop(Scope.DANGLING_KEY);}  }
class C{  public void animateY(int durationMillis,EasingFunction easing){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setInterpolator(easing);  animatorY.setDuration(durationMillis);  animatorY.addUpdateListener(mListener);  animatorY.start();}  }
class C{  public ArbitraryLengthPath(Var subject,TupleExpr pathExpression,Var object,Var context,long minLength){  this(Scope.DEFAULT_CONTEXTS,subject,pathExpression,object,context,minLength);}  }
class C{  public Boolean isCpuHotRemoveEnabled(){  return cpuHotRemoveEnabled;}  }
class C{  protected void startProgrammer(@CheckForNull DecoderFile decoderFile,@Nonnull RosterEntry r,@Nonnull String progName){  log.error("startProgrammer method in CombinedLocoSelPane should have been overridden");}  }
class C{  public void flexUpAService(int instances,String serviceName) throws MyriadBadConfigurationException {  final ServiceConfiguration auxTaskConf=cfg.getServiceConfiguration(serviceName).get();  if (auxTaskConf.getMaxInstances().isPresent()) {    int totalflexInstances=instances + getFlexibleInstances(serviceName);    Integer maxInstances=auxTaskConf.getMaxInstances().get();    if (maxInstances > 0) {      if (totalflexInstances > maxInstances) {        LOGGER.error("Current number of active, staging, pending and requested instances: {}" + ", while it is greater then max instances allowed: {}",totalflexInstances,maxInstances);        throw new MyriadBadConfigurationException("Current number of active, staging, pending instances and requested: " + totalflexInstances + ", while it is greater then max instances allowed: "+ maxInstances);      }    }  }  final Double cpu=auxTaskConf.getCpus();  final Double mem=auxTaskConf.getJvmMaxMemoryMB();  Collection<NodeTask> nodes=new HashSet<>();  for (int i=0; i < instances; i++) {    NodeTask nodeTask=new NodeTask(new ServiceResourceProfile(serviceName,cpu,mem,auxTaskConf.getPorts()),null);    nodeTask.setTaskPrefix(serviceName);    nodes.add(nodeTask);  }  LOGGER.info("Adding {} {} instances to cluster",nodes.size(),serviceName);  this.schedulerState.addNodes(nodes);}  }
class C{  public boolean shouldRemoteUiBeVisible(int state,int idleReason) throws TransientNetworkDisconnectionException, NoConnectionException {switch (state) {case MediaStatus.PLAYER_STATE_PLAYING:case MediaStatus.PLAYER_STATE_PAUSED:case MediaStatus.PLAYER_STATE_BUFFERING:    return true;case MediaStatus.PLAYER_STATE_IDLE:  return isRemoteStreamLive() && (idleReason == MediaStatus.IDLE_REASON_CANCELED);default :}return false;}  }
class C{  public CommonsExecuter(){  super();}  }
class C{  public String reason(){  final String ret;  final String r=this.record.get("reason");  if (r != null) {    final byte[] b;    ret=((b=Base64Order.enhancedCoder.decode(r)) != null) ? UTF8.String(b) : "unknown";  } else {    ret="";  }  return ret;}  }
class C{  public void configure(){  MrcPacketizer tc=new MrcPacketizer();  tc.connectPort(this);  this.getSystemConnectionMemo().setMrcTrafficController(tc);  tc.setAdapterMemo(this.getSystemConnectionMemo());  this.getSystemConnectionMemo().configureManagers();  tc.setCabNumber(2);  sourceThread=new Thread(this);  sourceThread.setName("Mrc Simulator");  sourceThread.setPriority(Thread.MIN_PRIORITY);  sourceThread.start();  tc.startThreads();}  }
class C{  @Override public boolean canCheckConnection(){  return false;}  }
class C{  public ListNode mergeKListsB(ListNode[] lists){  return mergeKListsB(lists,0,lists.length - 1);}  }
class C{  boolean isCompact(){  return _rowSortHead == _rowHead;}  }
class C{  public void testUserDataHandlerNotifiedOfDeepClones(){  RecordingHandler handler=new RecordingHandler();  name.setUserData("a","apple",handler);  name.setUserData("b","banana",handler);  standard.setUserData("c","cat",handler);  waffles.setUserData("d","dog",handler);  Element clonedName=(Element)name.cloneNode(true);  Attr clonedStandard=clonedName.getAttributeNode("a:standard");  Text clonedWaffles=(Text)clonedName.getChildNodes().item(0);  Set<String> expected=new HashSet<String>();  expected.add(notification(NODE_CLONED,"a","apple",name,clonedName));  expected.add(notification(NODE_CLONED,"b","banana",name,clonedName));  expected.add(notification(NODE_CLONED,"c","cat",standard,clonedStandard));  expected.add(notification(NODE_CLONED,"d","dog",waffles,clonedWaffles));  assertEquals(expected,handler.calls);}  }
class C{  public void writeToParcel(Parcel dest,int flags){  dest.writeInt(mWidth);  dest.writeInt(mHeight);}  }
class C{  public void testForEachVarStatusNoException() throws Exception {  HtmlPage page=getPage("/faces/facelets/forEach.xhtml");  assertTrue(page.asText().contains("1 2 3"));}  }
class C{  public void init(){  text.setLength(0);  innerText.setLength(0);  name="";}  }
class C{  public Hyperpoint(String s){  ArrayList<String> al=new ArrayList<String>();  StringTokenizer st=new StringTokenizer(s,",");  while (st.hasMoreTokens()) {    al.add(st.nextToken());  }  dimensionality=al.size();  values=new double[dimensionality];  for (int i=1; i <= dimensionality; i++) {    values[i - 1]=Double.valueOf(al.get(i - 1));  }}  }
class C{  public FBSimpleDataSource(){  super();}  }
class C{  public SampleDataSource(){}  }
class C{  public RVEA(Problem problem,ReferenceVectorGuidedPopulation population,Variation variation,Initialization initialization,int maxGeneration,int adaptFrequency){  super(problem,population,null,initialization);  this.variation=variation;  if (variation.getArity() != 2) {    throw new FrameworkException("RVEA only supports operators requiring 2 parents");  }}  }
class C{  protected static Object object(long element){  return new Long(element);}  }
class C{  public static long sizeOf(byte[] arr){  return alignObjectSize((long)NUM_BYTES_ARRAY_HEADER + arr.length);}  }
class C{  public void end(String namespace,String name) throws Exception {  RendererBean top=null;  try {    top=(RendererBean)digester.pop();  } catch (  Exception e) {    throw new IllegalStateException("Popped object is not a " + CLASS_NAME + " instance");  }  RenderKitBean rkb=(RenderKitBean)digester.peek();  RendererBean old=rkb.getRenderer(top.getComponentFamily(),top.getRendererType());  if (old == null) {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[RendererRule]{" + digester.getMatch() + "} New("+ top.getComponentFamily()+ ","+ top.getRendererType()+ ")");    }    rkb.addRenderer(top);  } else {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[RendererRule]{" + digester.getMatch() + "} Merge("+ top.getComponentFamily()+ ","+ top.getRendererType()+ ")");    }    mergeRenderer(top,old);  }}  }
class C{  public SignatureVisitor visitTypeArgument(char wildcard){  return this;}  }
class C{  public List<Tone> tones(){  return tones;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.558 -0400",hash_original_method="51D98BC23EDBD98D3C1A640CAE368CF4",hash_generated_method="1632425B4BDCADE76DD082B000ECC42C") public void stop(){  this.run=false;}  }
class C{  public void init() throws ServletException {}  }
class C{  public Iterable<PemAttribute> values(){  return attributes;}  }
class C{  private LocaleContext(){}  }
class C{  public int append(final short lhs,final short rhs,final String fieldName){  int comparison=((lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0));  fieldComparisons.setAt(fieldName).value(comparison);  return comparison;}  }
class C{  public void reset(){  byteOffset=0;  bitOffset=0;}  }
class C{  @Override public void execute(String[] params,Server server,Conversation conversation,IRCService service) throws CommandException {  service.getConnection(server.getId()).sendRawLineViaQueue("AWAY " + BaseHandler.mergeParams(params));}  }
class C{  void merge(ElementMetadataRegistryBuilder other){  for (  Map.Entry<TransformKey,ElementCreatorImpl> entry : other.creators.entrySet()) {    TransformKey key=entry.getKey();    ElementCreatorImpl creator=creators.get(key);    if (creator == null) {      creator=new ElementCreatorImpl(root,key);      creators.put(key,creator);    }    creator.merge(entry.getValue());  }}  }
class C{  private void _set_date(InstalledApp app,Context ctx){  String update_source=app.get_update_source();  if (app.get_last_check_date() == null) {    _check_date.setText(String.format(update_source == null ? "%s %s." : "[" + update_source + "] %s %s.",ctx.getResources().getString(R.string.last_check),ctx.getResources().getString(R.string.never)));    _check_date.setTextColor(Color.GRAY);  } else {    DateFormat sdf=SimpleDateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT);    _check_date.setText(String.format(update_source == null ? "%s %s." : "[" + update_source + "] %s %s.",ctx.getResources().getString(R.string.last_check),sdf.format(app.get_last_check_date())));    _check_date.setTextColor(_default_color);  }}  }
class C{  public GenericValue queryFirst() throws GenericEntityException {  EntityFindOptions efo=makeEntityFindOptions();  if (!this.useCache && !this.filterByDate) {    efo.setMaxRows(1);  }  GenericValue result=EntityUtil.getFirst(query(efo));  return result;}  }
class C{  @SuppressWarnings("ExternalizableWithoutPublicNoArgConstructor") public static <T>IgniteInternalFuture<T> runAsync(final Callable<T> task){  return runAsync(task,"async-runner");}  }
class C{  public static boolean isSameLength(final Object[] array1,final Object[] array2){  if (array1 == null && array2 != null && array2.length > 0 || array2 == null && array1 != null && array1.length > 0 || array1 != null && array2 != null && array1.length != array2.length) {    return false;  }  return true;}  }
class C{  public boolean RM1Send(String mac,String sendData){  JsonObject initJsonObjectParams=broadlinkStandardParams(BroadlinkConstants.CMD_RM1_SEND_ID,BroadlinkConstants.CMD_RM1_SEND);  initJsonObjectParams.addProperty("mac",mac);  initJsonObjectParams.addProperty("data",sendData);  JsonObject out=broadlinkExecuteCommand(initJsonObjectParams);  int code=out.get(BroadlinkConstants.CODE).getAsInt();  return code == 0;}  }
class C{  public void run(){  traffic.setText(message);}  }
class C{  public boolean isSpinning(){  return isSpinning;}  }
class C{  public CommandAPDU(byte[] apdu){  this.apdu=apdu.clone();  parse();}  }
class C{  public CostInsufficientQtyException(int product_id,int asi_id,BigDecimal qty,BigDecimal remainingQty){  super(createMessage(product_id,asi_id,qty,remainingQty));}  }
class C{  public static double RSfitness(boolean useTrainingData,GEPIndividual ind){  double RS=RSrawFitness(useTrainingData,ind,0);  return (1000.0 * RS * RS);}  }
class C{  public String toString(){  return name.toString();}  }
class C{  private void doIteration(){  Integer key=rnd.nextInt(KEY_RANGE);  if (rnd.nextDouble() <= writeProportion)   map.put(key,rnd.nextInt()); else   readOp.apply(key,map);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeentitynodename.class,args);}  }
class C{  public final void mul(float scalar,Matrix4f m1){  this.m00=m1.m00 * scalar;  this.m01=m1.m01 * scalar;  this.m02=m1.m02 * scalar;  this.m03=m1.m03 * scalar;  this.m10=m1.m10 * scalar;  this.m11=m1.m11 * scalar;  this.m12=m1.m12 * scalar;  this.m13=m1.m13 * scalar;  this.m20=m1.m20 * scalar;  this.m21=m1.m21 * scalar;  this.m22=m1.m22 * scalar;  this.m23=m1.m23 * scalar;  this.m30=m1.m30 * scalar;  this.m31=m1.m31 * scalar;  this.m32=m1.m32 * scalar;  this.m33=m1.m33 * scalar;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public Installer callback(@NonNull KonamiCodeLayout.Callback callback){  this.callback=callback;  return this;}  }
class C{  public ServiceCall<Void> deleteRanker(final String rankerID){  Validator.isTrue((rankerID != null) && !rankerID.isEmpty(),"rankerId cannot be null or empty");  final Request request=RequestBuilder.delete(String.format(PATH_RANKER,rankerID)).build();  return createServiceCall(request,ResponseConverterUtils.getVoid());}  }
class C{  public void testPutNull() throws InterruptedException {  try {    LinkedBlockingDeque q=new LinkedBlockingDeque(SIZE);    q.put(null);    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  protected JScrollPane createScroller(){  JScrollPane sp=new JScrollPane(tree,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);  sp.setHorizontalScrollBar(null);  sp.setName("TreePopup.scrollPane");  sp.setFocusable(false);  sp.getVerticalScrollBar().setFocusable(false);  sp.setBorder(null);  return sp;}  }
class C{  public Excerpt declarationParameters(){  return new DeclarationParameters(typeParameters);}  }
class C{  public ListQueuesResult listQueues() throws AmazonServiceException, AmazonClientException {  return amazonSqsToBeExtended.listQueues();}  }
class C{  protected void writeParameterTable(StringBuffer buffer,Map<String,OutputVariable<?>> data){  buffer.append("<h2 id=parameters>EvoSuite Parameters</h2>\n");  buffer.append("<div class=statistics><ul>\n");  for (  String key : data.keySet()) {    buffer.append("<li>" + key + ": "+ data.get(key).getValue()+ "\n");  }  buffer.append("</ul></div>\n");}  }
class C{  public boolean isPostdatable(){  if (postdatable == null) {    return false;  } else {    return postdatable;  }}  }
class C{  private CellEntry createUpdateOperation(int row,int col,String value) throws ServiceException, IOException {  String batchId="R" + row + "C"+ col;  URL entryUrl=new URL(cellFeedUrl.toString() + "/" + batchId);  CellEntry entry=service.getEntry(entryUrl,CellEntry.class);  entry.changeInputValueLocal(value);  BatchUtils.setBatchId(entry,batchId);  BatchUtils.setBatchOperationType(entry,BatchOperationType.UPDATE);  return entry;}  }
class C{  private boolean isPersistedType(PaymentInfoType type){  return isPaymentTypeAvailable(operatorSelectOrgBean.getOrganization(),type);}  }
class C{  @Override public void executeStoragePolicyTransitionAfterStep(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto){  executeStoragePolicyTransitionAfterStepImpl(storagePolicyTransitionParamsDto);}  }
class C{  public UndoableEdit remove(int where,int nitems) throws BadLocationException {  if (where + nitems >= length()) {    throw new BadLocationException("Invalid remove",length() + 1);  }  String removedString=getString(where,nitems);  UndoableEdit edit=new RemoveUndo(where,removedString);  replace(where,nitems,empty,0);  return edit;}  }
class C{  @SuppressWarnings("deprecation") public Challenge tlsSniChallenge(Authorization auth,String domain) throws AcmeException {  org.shredzone.acme4j.challenge.TlsSni01Challenge challenge=auth.findChallenge(org.shredzone.acme4j.challenge.TlsSni01Challenge.TYPE);  if (challenge == null) {    LOG.error("Found no " + org.shredzone.acme4j.challenge.TlsSni01Challenge.TYPE + " challenge, don't know what to do...");    return null;  }  String subject=challenge.getSubject();  KeyPair domainKeyPair;  try (FileWriter fw=new FileWriter("tlssni.key")){    domainKeyPair=KeyPairUtils.createKeyPair(2048);    KeyPairUtils.writeKeyPair(domainKeyPair,fw);  } catch (  IOException ex) {    LOG.error("Could not create keypair",ex);    return null;  }  try (FileWriter fw=new FileWriter("tlssni.crt")){    X509Certificate cert=CertificateUtils.createTlsSniCertificate(domainKeyPair,subject);    CertificateUtils.writeX509Certificate(cert,fw);  } catch (  IOException ex) {    LOG.error("Could not create certificate",ex);    return null;  }  LOG.info("Please configure your web server.");  LOG.info("It must return the certificate 'tlssni.crt' on a SNI request to:");  LOG.info(subject);  LOG.info("The matching keypair is available at 'tlssni.key'.");  LOG.info("If you're ready, dismiss the dialog...");  StringBuilder message=new StringBuilder();  message.append("Please use 'tlssni.key' and 'tlssni.crt' cert for SNI requests to:\n\n");  message.append("https://").append(subject).append("\n\n");  int option=JOptionPane.showConfirmDialog(null,message.toString(),"Prepare Challenge",JOptionPane.OK_CANCEL_OPTION);  if (option == JOptionPane.CANCEL_OPTION) {    LOG.error("User cancelled challenge");    return null;  }  return challenge;}  }
class C{  private void addItems(@NonNull final BottomSheet.Builder builder){  int dividerCount=getDividerCount();  boolean showDividerTitle=shouldDividerTitleBeShown();  int itemCount=getItemCount();  boolean showIcon=shouldItemIconsBeShown();  boolean disableItems=shouldItemsBeDisabled();  int index=0;  for (int i=0; i < dividerCount + 1; i++) {    if (i > 0) {      builder.addDivider(showDividerTitle ? getString(R.string.divider_title,i) : null);      index++;    }    for (int j=0; j < itemCount; j++) {      String title=getString(R.string.item_title,i * itemCount + j + 1);      Drawable icon;      if (isDarkThemeSet()) {        icon=showIcon ? ContextCompat.getDrawable(getActivity(),getStyle() == Style.GRID ? R.drawable.grid_item_dark : R.drawable.list_item_dark) : null;      } else {        icon=showIcon ? ContextCompat.getDrawable(getActivity(),getStyle() == Style.GRID ? R.drawable.grid_item : R.drawable.list_item) : null;      }      builder.addItem(i * dividerCount + j,title,icon);      if (disableItems) {        builder.setItemEnabled(index,false);      }      index++;    }  }  builder.setOnItemClickListener(createItemClickListener());}  }
class C{  @Override public int hashCode(){  return (int)checksum;}  }
class C{  public void onRenamingAttemptTimeOut(OneSheeldDevice device){}  }
class C{  public void afterWriting(){  if (fileLockMethod != FileLock.LOCK_SERIALIZED) {    return;  }synchronized (reconnectSync) {    checkpointAllowed--;  }  if (SysProperties.CHECK && checkpointAllowed < 0) {    throw DbException.throwInternalError();  }}  }
class C{  private void createSubRegionOfPartitionedRegion(List vmList,int regionType){  Iterator nodeIterator=vmList.iterator();  while (nodeIterator.hasNext()) {    VM vm=(VM)nodeIterator.next();    vm.invoke(SubRegionOfPartitonedRegion(regionType));  }}  }
class C{  public void addHistory(DefaultBranchColouring history){  if (childColour != history.parentColour) {    throw new Error("My child colour and the added parent colour don't match");  }  colourChanges.addAll(history.colourChanges);  changeHeights.addAll(history.changeHeights);  childColour=history.childColour;  fullSanityCheck();}  }
class C{  private Long calculateReservedCapacity(){  Long reservedCapacity=0L;  if (_reservedCapacityMap != null) {    Collection<String> capacityCollection=_reservedCapacityMap.values();    for (    String capacity : capacityCollection) {      reservedCapacity=reservedCapacity + Long.valueOf(capacity);    }  }  Long reservedCapacityKB=(reservedCapacity % KB == 0) ? reservedCapacity / KB : reservedCapacity / KB + 1;  return reservedCapacityKB;}  }
class C{  private void checkSalvageBeforeTimeout(TransactionConcurrency mode,boolean prepare) throws Exception {  startTxAndPutKeys(mode,prepare);  List<Integer> nearSizes=new ArrayList<>(GRID_CNT - 1);  List<Integer> dhtSizes=new ArrayList<>(GRID_CNT - 1);  for (int i=1; i < GRID_CNT; i++) {    nearSizes.add(near(i).context().tm().txs().size());    dhtSizes.add(dht(i).context().tm().txs().size());  }  stopNodeAndSleep(SALVAGE_TIMEOUT - DELTA_BEFORE);  for (int i=1; i < GRID_CNT; i++) {    checkTxsNotEmpty(near(i).context(),nearSizes.get(i - 1));    checkTxsNotEmpty(dht(i).context(),dhtSizes.get(i - 1));  }}  }
class C{  public DeleteIndexedScriptRequest id(String id){  this.id=id;  return this;}  }
class C{  public void mergeInterferenceSet(int reg,IntSet set){  if (reg < interference.size()) {    set.merge(interference.get(reg));  }}  }
class C{  @Override public String toString(){switch (trapCode) {case RuntimeEntrypoints.TRAP_NULL_POINTER:    return "<NULL PTR>";case RuntimeEntrypoints.TRAP_ARRAY_BOUNDS:  return "<ARRAY BOUNDS>";case RuntimeEntrypoints.TRAP_DIVIDE_BY_ZERO:return "<DIV BY ZERO>";case RuntimeEntrypoints.TRAP_STACK_OVERFLOW:return "<STACK OVERFLOW>";case RuntimeEntrypoints.TRAP_CHECKCAST:return "<CLASSCAST>";case RuntimeEntrypoints.TRAP_MUST_IMPLEMENT:return "<MUST IMPLEMENT>";case RuntimeEntrypoints.TRAP_STORE_CHECK:return "<OBJARRAY STORE CHECK>";case RuntimeEntrypoints.TRAP_REGENERATE:return "<REGENERATE>";default :return "<UNKNOWN TRAP>";}}  }
class C{  public Analyzer printAnalysis(PrintStream ps){  getAnalysis().print(ps);  return this;}  }
class C{  public BooleanList2(){  cList=new LegacyList();}  }
class C{  protected void drawVerticalItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column){  Number dataValue=dataset.getValue(row,column);  if (dataValue == null) {    return;  }  double rectX=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;  int seriesCount=getRowCount();  double value=dataValue.doubleValue();  double base=0.0;  double lclip=getLowerClip();  double uclip=getUpperClip();  if (uclip <= 0.0) {    if (value >= uclip) {      return;    }    base=uclip;    if (value <= lclip) {      value=lclip;    }  } else   if (lclip <= 0.0) {    if (value >= uclip) {      value=uclip;    } else {      if (value <= lclip) {        value=lclip;      }    }  } else {    if (value <= lclip) {      return;    }    base=getLowerClip();    if (value >= uclip) {      value=uclip;    }  }  RectangleEdge edge=plot.getRangeAxisEdge();  double transY1=rangeAxis.valueToJava2D(base,dataArea,edge);  double transY2=rangeAxis.valueToJava2D(value,dataArea,edge);  double rectY=Math.min(transY2,transY1);  double rectWidth;  double rectHeight=Math.abs(transY2 - transY1);  double shift=0.0;  double widthFactor=1.0;  double seriesBarWidth=getSeriesBarWidth(row);  if (!Double.isNaN(seriesBarWidth)) {    widthFactor=seriesBarWidth;  }  rectWidth=widthFactor * state.getBarWidth();  rectX=rectX + (1 - widthFactor) * state.getBarWidth() / 2.0;  if (seriesCount > 1) {    shift=rectWidth * 0.20 / (seriesCount - 1);  }  Rectangle2D bar=new Rectangle2D.Double((rectX + ((seriesCount - 1 - row) * shift)),rectY,(rectWidth - (seriesCount - 1 - row) * shift * 2),rectHeight);  if (state.getElementHinting()) {    beginElementGroup(g2,dataset.getRowKey(row),dataset.getColumnKey(column));  }  Paint itemPaint=getItemPaint(row,column);  GradientPaintTransformer t=getGradientPaintTransformer();  if (t != null && itemPaint instanceof GradientPaint) {    itemPaint=t.transform((GradientPaint)itemPaint,bar);  }  g2.setPaint(itemPaint);  g2.fill(bar);  if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {    g2.setStroke(getItemOutlineStroke(row,column));    g2.setPaint(getItemOutlinePaint(row,column));    g2.draw(bar);  }  if (state.getElementHinting()) {    endElementGroup(g2);  }  CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column);  if (generator != null && isItemLabelVisible(row,column)) {    double transX1=rangeAxis.valueToJava2D(base,dataArea,edge);    double transX2=rangeAxis.valueToJava2D(value,dataArea,edge);    drawItemLabel(g2,dataset,row,column,plot,generator,bar,(transX1 > transX2));  }  EntityCollection entities=state.getEntityCollection();  if (entities != null) {    addItemEntity(entities,dataset,row,column,bar);  }}  }
class C{  public synchronized void putAsInt(Object key,int value){  put(key,new Integer(value));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public DigestURL(final File file) throws MalformedURLException {  this("file","",-1,file.getAbsolutePath());}  }
class C{  public void printLenString(String v) throws IOException {  if (v == null) {    os.write(0);    os.write(0);  } else {    int len=v.length();    os.write(len >> 8);    os.write(len);    printString(v,0,len);  }}  }
class C{  public BinlogIndex(String directory,String baseName,boolean readIndex) throws ReplicatorException {  this.binlogDirectory=new File(directory);  if (!binlogDirectory.canRead()) {    throw new MySQLExtractException("Binlog index missing or unreadable; check binlog directory and file pattern settings: " + binlogDirectory.getAbsolutePath());  }  indexFile=new File(binlogDirectory,baseName + ".index");  if (!indexFile.canRead()) {    throw new MySQLExtractException("Binlog index missing or unreadable; check binlog directory and file pattern settings: " + indexFile.getAbsolutePath());  }  if (readIndex)   readIndex();}  }
class C{  public static void main(String[] args) throws Exception {  Properties config=new Properties();  config.put(StreamsConfig.APPLICATION_ID_CONFIG,"tumbling-window-kafka-streams");  config.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,"localhost:9092");  config.put(StreamsConfig.ZOOKEEPER_CONNECT_CONFIG,"localhost:2181");  config.put(StreamsConfig.KEY_SERDE_CLASS_CONFIG,Serdes.ByteArray().getClass().getName());  config.put(StreamsConfig.VALUE_SERDE_CLASS_CONFIG,Serdes.Long().getClass().getName());  KStreamBuilder builder=new KStreamBuilder();  KStream<byte[],Long> longs=builder.stream(Serdes.ByteArray(),Serdes.Long(),"longs");  KTable<Windowed<byte[]>,Long> longCounts=longs.countByKey(TimeWindows.of("longCounts",10000L),Serdes.ByteArray());  longCounts.toStream(null).to(Serdes.ByteArray(),Serdes.Long(),"long-counts-all");  KafkaStreams streams=new KafkaStreams(builder,config);  streams.start();  Properties producerConfig=new Properties();  producerConfig.put("bootstrap.servers","localhost:9092");  producerConfig.put("key.serializer","org.apache.kafka.common" + ".serialization.ByteArraySerializer");  producerConfig.put("value.serializer","org.apache.kafka.common" + ".serialization.LongSerializer");  KafkaProducer producer=new KafkaProducer<byte[],Long>(producerConfig);  Random rng=new Random(12345L);  while (true) {    producer.send(new ProducerRecord<byte[],Long>("longs","A".getBytes(),rng.nextLong() % 10));    Thread.sleep(500L);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public final float readLEFloat() throws IOException {  return Float.intBitsToFloat(this.readLEInt());}  }
class C{  public T caseOperationSource(OperationSource object){  return null;}  }
class C{  private void showSelectedPayment(Payment payment){  if (payment != null && selectedPaymentNameTv != null && selectedPaymentPriceTv != null) {    selectedPaymentNameTv.setText(payment.getName());    if (payment.getPrice() != 0) {      selectedPaymentPriceTv.setText(payment.getPriceFormatted());    } else {      selectedPaymentPriceTv.setText(getText(R.string.free));    }    orderTotalPrice=payment.getTotalPrice();    orderTotalPriceTv.setText(payment.getTotalPriceFormatted());  } else {    Timber.e("Showing selected payment with null values.");  }}  }
class C{  public String toString(){  if (hi8 == 0) {    return Long.toHexString(lo8);  } else {    StringBuilder result=new StringBuilder();    result.append(Long.toHexString(hi8));    String loString=Long.toHexString(lo8);    for (int i=loString.length(); i < 16; ++i) {      result.append('0');    }    result.append(loString);    return result.toString();  }}  }
class C{  public void startDocument() throws SAXException {  if (documentHandler != null)   documentHandler.startDocument();}  }
class C{  public String filter(){  return filter;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public String truncateTipText(){  return "Truncate (i.e. drop and recreate) table if it already exists";}  }
class C{  public synchronized void step(){  currentIteration++;  while (true) {    try {      for (      V v1 : getGraph().getVertices()) {        calcRepulsion(v1);      }      break;    } catch (    ConcurrentModificationException cme) {    }  }  while (true) {    try {      for (      E e : getGraph().getEdges()) {        calcAttraction(e);      }      break;    } catch (    ConcurrentModificationException cme) {    }  }  while (true) {    try {      for (      V v : getGraph().getVertices()) {        if (isLocked(v))         continue;        calcPositions(v);      }      break;    } catch (    ConcurrentModificationException cme) {    }  }  cool();}  }
class C{  public CharTrie(int initialValue,int leadUnitValue,DataManipulate dataManipulate){  super(new char[BMP_INDEX_LENGTH + SURROGATE_BLOCK_COUNT],HEADER_OPTIONS_LATIN1_IS_LINEAR_MASK_,dataManipulate);  int dataLength, latin1Length, i, limit;  char block;  dataLength=latin1Length=INDEX_STAGE_1_SHIFT_ <= 8 ? 256 : DATA_BLOCK_LENGTH;  if (leadUnitValue != initialValue) {    dataLength+=DATA_BLOCK_LENGTH;  }  m_data_=new char[dataLength];  m_dataLength_=dataLength;  m_initialValue_=(char)initialValue;  for (i=0; i < latin1Length; ++i) {    m_data_[i]=(char)initialValue;  }  if (leadUnitValue != initialValue) {    block=(char)(latin1Length >> INDEX_STAGE_2_SHIFT_);    i=0xd800 >> INDEX_STAGE_1_SHIFT_;    limit=0xdc00 >> INDEX_STAGE_1_SHIFT_;    for (; i < limit; ++i) {      m_index_[i]=block;    }    limit=latin1Length + DATA_BLOCK_LENGTH;    for (i=latin1Length; i < limit; ++i) {      m_data_[i]=(char)leadUnitValue;    }  }  m_friendAgent_=new FriendAgent();}  }
class C{  private boolean isValid(String line,Pattern pattern){  if (globalMatcher != null) {    globalMatcher.reset();  }  globalMatcher=pattern.matcher(line);  return globalMatcher.matches();}  }
class C{  @Override public int hashCode(){  return this.labelTemplate.hashCode();}  }
class C{  private boolean isPasteAvailable(){  try {    Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();    return clipboard.isDataFlavorAvailable(DataFlavor.stringFlavor);  } catch (  UnsupportedOperationException he) {    return false;  }catch (  IllegalStateException ise) {    return false;  }}  }
class C{  private void drawDiamond(Canvas canvas,Paint paint,float[] path,float x,float y){  path[0]=x;  path[1]=y - size;  path[2]=x - size;  path[3]=y;  path[4]=x;  path[5]=y + size;  path[6]=x + size;  path[7]=y;  drawPath(canvas,path,paint,true);}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  if (m_savedLastOrder != null && !m_savedLastOrder.empty())   getElemDef().setLastOrder(m_savedLastOrder.pop());  if (!getElemDef().getRequiredFound())   handler.error(XSLTErrorResources.ER_REQUIRED_ELEM_NOT_FOUND,new Object[]{getElemDef().getRequiredElem()},null);}  }
class C{  public IComment editLocalInstructionComment(final Instruction instruction,final IComment comment,final String newComment) throws com.google.security.zynamics.binnavi.API.disassembly.CouldntSaveDataException {  try {    return m_node.getComments().editLocalInstructionComment(instruction.getNative(),comment,newComment);  } catch (  final CouldntSaveDataException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntSaveDataException(exception);  }}  }
class C{  @DSComment("not sensitive/not an action") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:51.467 -0500",hash_original_method="10F3069F21F3E55AED4FC89118BF5C5A",hash_generated_method="E3D01B2B9125EFEB96BBDB3B34AEDE01") public static AccessibilityEvent obtain(){synchronized (sPoolLock) {    if (sPool != null) {      AccessibilityEvent event=sPool;      sPool=sPool.mNext;      sPoolSize--;      event.mNext=null;      event.mIsInPool=false;      return event;    }    return new AccessibilityEvent();  }}  }
class C{  public DOM2Helper(){}  }
class C{  public void removeExtension(Extension extension){  extPoint.removeExtension(extension);}  }
class C{  public GPUImageDilationFilter(int radius){  this(getVertexShader(radius),getFragmentShader(radius));}  }
class C{  private synchronized void resetPriority(final boolean recursive){  if (recursive) {    m_priorityForceSet=false;  } else   if (m_priorityForceSet) {    return;  }  m_priority=m_parent.m_priority;  resetChildPriorities(recursive);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override protected void readInternal(byte[] b,int offset,int len) throws IOException {synchronized (file) {    long position=off + getFilePointer();    file.seek(position);    int total=0;    if (position + len > end) {      throw new EOFException("read past EOF: " + this);    }    try {      while (total < len) {        final int toRead=Math.min(CHUNK_SIZE,len - total);        final int i=file.read(b,offset + total,toRead);        if (i < 0) {          throw new EOFException("read past EOF: " + this + " off: "+ offset+ " len: "+ len+ " total: "+ total+ " chunkLen: "+ toRead+ " end: "+ end);        }        assert i > 0 : "RandomAccessFile.read with non zero-length toRead must always read at least one byte";        total+=i;      }      assert total == len;    } catch (    IOException ioe) {      throw new IOException(ioe.getMessage() + ": " + this,ioe);    }  }}  }
class C{  public ICompletionProposal[] parameterProposals(String expectedType,String paramName,Position pos,IJavaElement[] suggestions,boolean fillBestGuess,boolean isLastParameter) throws JavaModelException {  List<Variable> typeMatches=evaluateVisibleMatches(expectedType,suggestions);  orderMatches(typeMatches,paramName);  boolean hasVarWithParamName=false;  ICompletionProposal[] ret=new ICompletionProposal[typeMatches.size()];  int i=0;  int replacementLength=0;  for (Iterator<Variable> it=typeMatches.iterator(); it.hasNext(); ) {    Variable v=it.next();    if (i == 0) {      fAlreadyMatchedNames.add(v.name);      replacementLength=v.name.length();    }    String displayString=v.name;    hasVarWithParamName|=displayString.equals(paramName);    final char[] triggers;    if (isLastParameter) {      triggers=v.triggerChars;    } else {      triggers=new char[v.triggerChars.length + 1];      System.arraycopy(v.triggerChars,0,triggers,0,v.triggerChars.length);      triggers[triggers.length - 1]=',';    }    ret[i++]=new PositionBasedCompletionProposal(v.name,pos,replacementLength,getImage(v.descriptor),displayString,null,null,triggers);  }  if (!fillBestGuess && !hasVarWithParamName) {    ICompletionProposal[] extended=new ICompletionProposal[ret.length + 1];    System.arraycopy(ret,0,extended,1,ret.length);    extended[0]=new PositionBasedCompletionProposal(paramName,pos,replacementLength,null,paramName,null,null,isLastParameter ? null : new char[]{','});    return extended;  }  return ret;}  }
class C{  public boolean removeLast(K obj){  int p=writePos;  int idx=getIndex(p - 1);  if (buffer[idx] != obj) {    return false;  }  buffer[idx]=null;  writePos=p - 1;  return true;}  }
class C{  public static Column fromOrd(int i){  if ((i < 0) || (i >= Column.values().length)) {    throw new IndexOutOfBoundsException("Invalid ordinal");  }  return Column.values()[i];}  }
class C{  public void eliminarGrupos(String[] grupos){  StringBuffer qual=new StringBuffer("WHERE ").append(DBUtils.generateInTokenField(CAMPO_ID,grupos));  deleteVO(qual.toString(),TABLE_NAME);  qual.setLength(0);  qual.append("WHERE ").append(DBUtils.generateInTokenField(GrupoUsuarioDBEntityImpl.CAMPO_ID_GRUPO,grupos));  deleteVO(qual.toString(),GrupoUsuarioDBEntityImpl.TABLE_NAME);}  }
class C{  public String[] availableCodecs(){  return codecs.keySet().toArray(new String[0]);}  }
class C{  public final DoubleGrid2D add(final IntGrid2D withThis){  checkBounds(withThis);  final int[][] otherField=withThis.field;  double[] fieldx=null;  int[] ofieldx=null;  final int width=this.width;  final int height=this.height;  for (int x=0; x < width; x++) {    fieldx=field[x];    ofieldx=otherField[x];    for (int y=0; y < height; y++)     fieldx[y]+=ofieldx[y];  }  return this;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public void start(){  invokeAction(null);}  }
class C{  @DSSink({DSSinkKind.NETWORK}) @DSComment("IO movement methodName") @DSSpec(DSCat.IO_ACTION_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:10.819 -0500",hash_original_method="CB72409718452D46955A0A85FC179645",hash_generated_method="9FFC82767BCEE2CD44BAA6101C4AB2EB") public URLConnection openConnection(Proxy proxy) throws IOException {  if (proxy == null) {    throw new IllegalArgumentException("proxy == null");  }  return streamHandler.openConnection(this,proxy);}  }
class C{  @Override public void dispose(){  updateProblemIndication=false;  ResourcesPlugin.getWorkspace().removeResourceChangeListener(resourceChangeListener);  getSite().getPage().removePartListener(partListener);  adapterFactory.dispose();  if (getActionBarContributor().getActiveEditor() == this) {    getActionBarContributor().setActiveEditor(null);  }  for (  PropertySheetPage propertySheetPage : propertySheetPages) {    propertySheetPage.dispose();  }  if (contentOutlinePage != null) {    contentOutlinePage.dispose();  }  super.dispose();}  }
class C{  public void registerInput(String varName,MLMatrix df) throws DMLRuntimeException {  registerInput(varName,MLMatrix.getRDDLazily(df),df.mc);}  }
class C{  public List<Site> listSitesInState(SiteState state){  return listSitesInState(getLocalVdcShortId(),state);}  }
class C{  public static float cs_house(float[] x,int x_offset,float[] beta,int n){  float s, sigma=0;  int i;  if (x == null || beta == null)   return (-1);  for (i=1; i < n; i++)   sigma+=x[x_offset + i] * x[x_offset + i];  if (sigma == 0) {    s=Math.abs(x[x_offset + 0]);    beta[0]=(x[x_offset + 0] <= 0) ? 2.0f : 0.0f;    x[x_offset + 0]=1;  } else {    s=(float)Math.sqrt(x[x_offset + 0] * x[x_offset + 0] + sigma);    x[x_offset + 0]=(x[x_offset + 0] <= 0) ? (x[x_offset + 0] - s) : (-sigma / (x[x_offset + 0] + s));    beta[0]=-1.0f / (s * x[x_offset + 0]);  }  return (s);}  }
class C{  private void explodeProduct(int productId,boolean isComponent){  MProduct product=MProduct.get(getCtx(),productId);  List<MPPProductBOM> list=getBOMs(product,isComponent);  if (!isComponent && list.size() == 0) {    throw new AdempiereException("@Error@ Product is not a BOM");  }  for (  MPPProductBOM bom : list) {    if (!isComponent) {      createLines(bom,null);    }    m_LevelNo++;    for (    MPPProductBOMLine bomLine : bom.getLines()) {      if (!bomLine.isActive()) {        continue;      }      createLines(bom,bomLine);      explodeProduct(bomLine.getM_Product_ID(),true);    }    m_LevelNo--;  }}  }
class C{  public boolean evaluate(int nTuples,T tuple){  return (cntTuples > 0 && nTuples > 0 && nTuples % cntTuples == 0) || (tuplePredicate != null && tuplePredicate.test(tuple));}  }
class C{  public int next(){  int node=_currentNode;  final int nodeType=_nodeType;  if (nodeType >= DTM.NTYPES) {    while (true) {      node++;      if (_sp < 0) {        node=NULL;        break;      } else       if (node >= _stack[_sp]) {        if (--_sp < 0) {          node=NULL;          break;        }      } else       if (_exptype2(node) == nodeType) {        break;      }    }  } else {    int expType;    while (true) {      node++;      if (_sp < 0) {        node=NULL;        break;      } else       if (node >= _stack[_sp]) {        if (--_sp < 0) {          node=NULL;          break;        }      } else {        expType=_exptype2(node);        if (expType < DTM.NTYPES) {          if (expType == nodeType) {            break;          }        } else {          if (m_extendedTypes[expType].getNodeType() == nodeType) {            break;          }        }      }    }  }  _currentNode=node;  return (node == NULL) ? NULL : returnNode(makeNodeHandle(node));}  }
class C{  public ByteArrayInStream(final byte[] buffer){  setBytes(buffer);}  }
class C{  protected void closeConnection(Connection conn){  try {    conn.close();  } catch (  JMSException jmsExc) {    LOG.info("failed to cleanup connection",jmsExc);  }}  }
class C{  public final AssertSubscriber<T> await(Duration timeout){  if (cdl.getCount() == 0) {    return this;  }  try {    if (!cdl.await(timeout.toMillis(),TimeUnit.MILLISECONDS)) {      throw new AssertionError("No complete or error signal before timeout");    }    return this;  } catch (  InterruptedException ex) {    throw new AssertionError("Wait interrupted",ex);  }}  }
class C{  @Override protected final Object clone(){  return this;}  }
class C{  public CtField lookupFieldByJvmName2(String jvmClassName,Symbol fieldSym,ASTree expr) throws NoFieldException {  String field=fieldSym.get();  CtClass cc=null;  try {    cc=lookupClass(jvmToJavaName(jvmClassName),true);  } catch (  CompileError e) {    throw new NoFieldException(jvmClassName + "/" + field,expr);  }  try {    return cc.getField(field);  } catch (  NotFoundException e) {    jvmClassName=javaToJvmName(cc.getName());    throw new NoFieldException(jvmClassName + "$" + field,expr);  }}  }
class C{  public void onPause(boolean multitasking){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onPause(multitasking);    }  }}  }
class C{  public LocalRasterServerLayer(AVList params){  super(params);  this.createRasterServer(params);}  }
class C{  static public void stepSuspendedNoError(String stepId) throws WorkflowException {  WorkflowService.completerStepSuspendedNoError(stepId);}  }
class C{  private Boolean functionExists(String functionName,String functionAlias){  GetFunctionRequest getFunctionRequest=new GetFunctionRequest().withFunctionName(functionName);  if (functionAlias != null) {    getFunctionRequest.withQualifier(functionAlias);    logger.log("Lambda function existence with alias request:%n%s%n",getFunctionRequest.toString());  } else {    logger.log("Lambda function existence check:%n%s%n",getFunctionRequest.toString());  }  try {    GetFunctionResult functionResult=client.getFunction(getFunctionRequest);    logger.log("Lambda function exists:%n%s%n",functionResult.toString());    return true;  } catch (  ResourceNotFoundException rnfe) {    logger.log("Lambda function does not exist");    return false;  }}  }
class C{  public void shutdown() throws Exception {  (new Thread(this,"UnregisterInactive")).start();}  }
class C{  public static boolean useForHost(final String host,Protocol protocol){  assert protocol != null;  if (!use)   return false;  if (protocol == Protocol.HTTPS && !use4ssl)   return false;  if (allowProxy.containsKey(host))   return true;  if (disallowProxy.containsKey(host))   return false;  for (  String pattern : noProxy) {    if (host.matches(pattern)) {      disallowProxy.put(host,PRESENT);      return false;    }  }  allowProxy.put(host,PRESENT);  return true;}  }
class C{  public Key max(){  if (isEmpty())   throw new NoSuchElementException("called max() with empty symbol table");  return max(root).key;}  }
class C{  @SuppressWarnings("fallthrough") public static long round(long time,Resolution resolution){  final Calendar calInstance=TL_CAL.get();  calInstance.setTimeInMillis(time);switch (resolution) {case YEAR:    calInstance.set(Calendar.MONTH,0);case MONTH:  calInstance.set(Calendar.DAY_OF_MONTH,1);case DAY:calInstance.set(Calendar.HOUR_OF_DAY,0);case HOUR:calInstance.set(Calendar.MINUTE,0);case MINUTE:calInstance.set(Calendar.SECOND,0);case SECOND:calInstance.set(Calendar.MILLISECOND,0);case MILLISECOND:break;default :throw new IllegalArgumentException("unknown resolution " + resolution);}return calInstance.getTimeInMillis();}  }
class C{  public static Typeface droidRobot(Context context){  return FontSourceProcessor.process(R.raw.droid_robot_jp2,context);}  }
class C{  public CoordinateSequence create(int size,int dimension){  if (dimension > 3)   dimension=3;  if (dimension < 2)   return new CoordinateArraySequence(size);  return new CoordinateArraySequence(size,dimension);}  }
class C{  public ShardIterator shardsIt(){  return new PlainShardIterator(shardId(),asList);}  }
class C{  protected boolean hasNonPawnDropPiece(int color){  boolean result=false;  for (int i=2; i < dropCounts[color].length; i++) {    if (dropCounts[color][i] > 0) {      result=true;      break;    }  }  return result;}  }
class C{  private String isVolumeIngestable(CIMInstance volumeInstance,String isBound,String usageProp,String unManagedVolumeNativeGuid,Map<String,Set<String>> duplicateSyncAspectElementNameMap){  String usage=getCIMPropertyValue(volumeInstance,usageProp);  if (!Boolean.valueOf(isBound)) {    return "The volume is not ingestable because it is not bound and the controller only supports bound volumes";  }  if (!(TWO.equalsIgnoreCase(usage) || NINE.equalsIgnoreCase(usage) || SEVEN.equalsIgnoreCase(usage)|| ELEVEN.equalsIgnoreCase(usage)|| USAGE_LOCAL_REPLICA_TARGET.equalsIgnoreCase(usage)|| USAGE_DELTA_REPLICA_TARGET.equalsIgnoreCase(usage)|| USGAE_LOCAL_REPLICA_SOURCE.equalsIgnoreCase(usage)|| USAGE_LOCAL_REPLICA_SOURCE_OR_TARGET.equalsIgnoreCase(usage))) {    return "The volume is not ingestable because it has a usage that is not supported by the controller";  }  boolean hasUnsupportedSnapshotSessions=false;  if (duplicateSyncAspectElementNameMap.containsKey(unManagedVolumeNativeGuid)) {    Set<String> duplicateSyncAspectElementNames=duplicateSyncAspectElementNameMap.get(unManagedVolumeNativeGuid);    if ((duplicateSyncAspectElementNames != null) && (!duplicateSyncAspectElementNames.isEmpty())) {      hasUnsupportedSnapshotSessions=true;    }  }  if (hasUnsupportedSnapshotSessions) {    return "The volume is not ingestable because it has multiple array snapshots with the same name, " + "which is not supported by the controller. The storage system may use generation numbers " + "to differentiate these snapshots, and the controller does not currently support generation numbers";  }  return null;}  }
class C{  public static BufferedImage convertToRGB(BufferedImage image){  BufferedImage converted=image;  if (image.getType() != BufferedImage.TYPE_INT_RGB && image.getType() != BufferedImage.TYPE_INT_ARGB) {    int targetType;    if (image.getColorModel() != null && image.getColorModel().hasAlpha()) {      targetType=BufferedImage.TYPE_INT_ARGB;    } else {      targetType=BufferedImage.TYPE_INT_RGB;    }    BufferedImage target=new BufferedImage(image.getWidth(),image.getHeight(),targetType);    ColorConvertOp convertOP=new ColorConvertOp(null);    converted=convertOP.filter(image,target);  }  return converted;}  }
class C{  public boolean functionAvailable(String ns,String funcName) throws javax.xml.transform.TransformerException {  try {    if (funcName == null) {      String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_ARG_CANNOT_BE_NULL,new Object[]{"Function Name"});      throw new NullPointerException(fmsg);    }    javax.xml.namespace.QName myQName=new QName(ns,funcName);    javax.xml.xpath.XPathFunction xpathFunction=resolver.resolveFunction(myQName,0);    if (xpathFunction == null) {      return false;    }    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void delete(Commit<DeleteCommand> commit){  try {    if (value != null) {      value.close();      value=null;    }  }  finally {    commit.close();  }}  }
class C{  @Override public boolean supportsCapability(OperatorCapability lc){switch (lc) {case NO_LABEL:case UPDATABLE:case FORMULA_PROVIDER:    return false;default :  return true;}}  }
class C{  private void addLinkToSpan(Link link){  if (spannable == null) {    spannable=SpannableString.valueOf(text);  }  addLinkToSpan(spannable,link);}  }
class C{  public void putPendingTransaction(SIPServerTransaction tr){  if (isLoggingEnabled())   stackLogger.logDebug("putPendingTransaction: " + tr);  this.pendingTransactions.put(tr.getTransactionId(),tr);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public Shape transform(Shape shape){  return transform(shape,0);}  }
class C{  private void initMediaRequest(GDataRequest request,String title){  if (title != null) {    request.setHeader("Slug",escapeSlug(title));  }  if (chunkedBufferSize != NO_CHUNKED_MEDIA_REQUEST && request instanceof HttpGDataRequest) {    HttpGDataRequest httpRequest=(HttpGDataRequest)request;    httpRequest.getConnection().setChunkedStreamingMode(chunkedBufferSize);  }}  }
class C{  public void paintToolBarContentBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  @SuppressWarnings("deprecation") public boolean contains(JComponent c,int x,int y){  return c.inside(x,y);}  }
class C{  public Enumeration listOptions(){  Vector newVector=new Vector(2);  newVector.addElement(new Option("\tChange generalization parameter Rho\n","P",0,"-P"));  newVector.addElement(new Option("\tUse ranking to class function special dev. for ARAM.\n","K",0,"-K"));  return newVector.elements();}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){  JComponent comp=(c instanceof JComponent) ? (JComponent)c : null;  if (g instanceof Graphics2D) {    Graphics2D g2=(Graphics2D)g;    g2.translate(x,y);    paint(g2,comp,width,height);    g2.translate(-x,-y);  } else {    BufferedImage img=new BufferedImage(IMG_SIZE,IMG_SIZE,BufferedImage.TYPE_INT_ARGB);    Graphics2D g2=(Graphics2D)img.getGraphics();    paint(g2,comp,width,height);    g2.dispose();    ImageScalingHelper.paint(g,x,y,width,height,img,INSETS,INSETS,ImageScalingHelper.PaintType.PAINT9_STRETCH,ImageScalingHelper.PAINT_ALL);  }}  }
class C{  public boolean isSolved(){  return correspondingDeclaration.isPresent();}  }
class C{  public InvalidHeaderValueException(String message){  super(message);}  }
class C{  public static void check(boolean cond,Object value){  if (!cond)   error(String.valueOf(value));}  }
class C{  @Override public String toString(){  if (m_displayModelInOldFormat) {    return toStringOriginal();  }  StringBuffer temp=new StringBuffer();  temp.append("Naive Bayes Classifier");  if (m_Instances == null) {    temp.append(": No model built yet.");  } else {    int maxWidth=0;    int maxAttWidth=0;    boolean containsKernel=false;    for (int i=0; i < m_Instances.numClasses(); i++) {      if (m_Instances.classAttribute().value(i).length() > maxWidth) {        maxWidth=m_Instances.classAttribute().value(i).length();      }    }    for (int i=0; i < m_Instances.numAttributes(); i++) {      if (i != m_Instances.classIndex()) {        Attribute a=m_Instances.attribute(i);        if (a.name().length() > maxAttWidth) {          maxAttWidth=m_Instances.attribute(i).name().length();        }        if (a.isNominal()) {          for (int j=0; j < a.numValues(); j++) {            String val=a.value(j) + "  ";            if (val.length() > maxAttWidth) {              maxAttWidth=val.length();            }          }        }      }    }    for (    Estimator[] m_Distribution : m_Distributions) {      for (int j=0; j < m_Instances.numClasses(); j++) {        if (m_Distribution[0] instanceof NormalEstimator) {          NormalEstimator n=(NormalEstimator)m_Distribution[j];          double mean=Math.log(Math.abs(n.getMean())) / Math.log(10.0);          double precision=Math.log(Math.abs(n.getPrecision())) / Math.log(10.0);          double width=(mean > precision) ? mean : precision;          if (width < 0) {            width=1;          }          width+=6.0;          if ((int)width > maxWidth) {            maxWidth=(int)width;          }        } else         if (m_Distribution[0] instanceof KernelEstimator) {          containsKernel=true;          KernelEstimator ke=(KernelEstimator)m_Distribution[j];          int numK=ke.getNumKernels();          String temps="K" + numK + ": mean (weight)";          if (maxAttWidth < temps.length()) {            maxAttWidth=temps.length();          }          if (ke.getNumKernels() > 0) {            double[] means=ke.getMeans();            double[] weights=ke.getWeights();            for (int k=0; k < ke.getNumKernels(); k++) {              String m=Utils.doubleToString(means[k],maxWidth,4).trim();              m+=" (" + Utils.doubleToString(weights[k],maxWidth,1).trim() + ")";              if (maxWidth < m.length()) {                maxWidth=m.length();              }            }          }        } else         if (m_Distribution[0] instanceof DiscreteEstimator) {          DiscreteEstimator d=(DiscreteEstimator)m_Distribution[j];          for (int k=0; k < d.getNumSymbols(); k++) {            String size="" + d.getCount(k);            if (size.length() > maxWidth) {              maxWidth=size.length();            }          }          int sum=("" + d.getSumOfCounts()).length();          if (sum > maxWidth) {            maxWidth=sum;          }        }      }    }    for (int i=0; i < m_Instances.numClasses(); i++) {      String cSize=m_Instances.classAttribute().value(i);      if (cSize.length() > maxWidth) {        maxWidth=cSize.length();      }    }    for (int i=0; i < m_Instances.numClasses(); i++) {      String priorP=Utils.doubleToString(((DiscreteEstimator)m_ClassDistribution).getProbability(i),maxWidth,2).trim();      priorP="(" + priorP + ")";      if (priorP.length() > maxWidth) {        maxWidth=priorP.length();      }    }    if (maxAttWidth < "Attribute".length()) {      maxAttWidth="Attribute".length();    }    if (maxAttWidth < "  weight sum".length()) {      maxAttWidth="  weight sum".length();    }    if (containsKernel) {      if (maxAttWidth < "  [precision]".length()) {        maxAttWidth="  [precision]".length();      }    }    maxAttWidth+=2;    temp.append("\n\n");    temp.append(pad("Class"," ",(maxAttWidth + maxWidth + 1) - "Class".length(),true));    temp.append("\n");    temp.append(pad("Attribute"," ",maxAttWidth - "Attribute".length(),false));    for (int i=0; i < m_Instances.numClasses(); i++) {      String classL=m_Instances.classAttribute().value(i);      temp.append(pad(classL," ",maxWidth + 1 - classL.length(),true));    }    temp.append("\n");    temp.append(pad(""," ",maxAttWidth,true));    for (int i=0; i < m_Instances.numClasses(); i++) {      String priorP=Utils.doubleToString(((DiscreteEstimator)m_ClassDistribution).getProbability(i),maxWidth,2).trim();      priorP="(" + priorP + ")";      temp.append(pad(priorP," ",maxWidth + 1 - priorP.length(),true));    }    temp.append("\n");    temp.append(pad("","=",maxAttWidth + (maxWidth * m_Instances.numClasses()) + m_Instances.numClasses()+ 1,true));    temp.append("\n");    int counter=0;    for (int i=0; i < m_Instances.numAttributes(); i++) {      if (i == m_Instances.classIndex()) {        continue;      }      String attName=m_Instances.attribute(i).name();      temp.append(attName + "\n");      if (m_Distributions[counter][0] instanceof NormalEstimator) {        String meanL="  mean";        temp.append(pad(meanL," ",maxAttWidth + 1 - meanL.length(),false));        for (int j=0; j < m_Instances.numClasses(); j++) {          NormalEstimator n=(NormalEstimator)m_Distributions[counter][j];          String mean=Utils.doubleToString(n.getMean(),maxWidth,4).trim();          temp.append(pad(mean," ",maxWidth + 1 - mean.length(),true));        }        temp.append("\n");        String stdDevL="  std. dev.";        temp.append(pad(stdDevL," ",maxAttWidth + 1 - stdDevL.length(),false));        for (int j=0; j < m_Instances.numClasses(); j++) {          NormalEstimator n=(NormalEstimator)m_Distributions[counter][j];          String stdDev=Utils.doubleToString(n.getStdDev(),maxWidth,4).trim();          temp.append(pad(stdDev," ",maxWidth + 1 - stdDev.length(),true));        }        temp.append("\n");        String weightL="  weight sum";        temp.append(pad(weightL," ",maxAttWidth + 1 - weightL.length(),false));        for (int j=0; j < m_Instances.numClasses(); j++) {          NormalEstimator n=(NormalEstimator)m_Distributions[counter][j];          String weight=Utils.doubleToString(n.getSumOfWeights(),maxWidth,4).trim();          temp.append(pad(weight," ",maxWidth + 1 - weight.length(),true));        }        temp.append("\n");        String precisionL="  precision";        temp.append(pad(precisionL," ",maxAttWidth + 1 - precisionL.length(),false));        for (int j=0; j < m_Instances.numClasses(); j++) {          NormalEstimator n=(NormalEstimator)m_Distributions[counter][j];          String precision=Utils.doubleToString(n.getPrecision(),maxWidth,4).trim();          temp.append(pad(precision," ",maxWidth + 1 - precision.length(),true));        }        temp.append("\n\n");      } else       if (m_Distributions[counter][0] instanceof DiscreteEstimator) {        Attribute a=m_Instances.attribute(i);        for (int j=0; j < a.numValues(); j++) {          String val="  " + a.value(j);          temp.append(pad(val," ",maxAttWidth + 1 - val.length(),false));          for (int k=0; k < m_Instances.numClasses(); k++) {            DiscreteEstimator d=(DiscreteEstimator)m_Distributions[counter][k];            String count="" + d.getCount(j);            temp.append(pad(count," ",maxWidth + 1 - count.length(),true));          }          temp.append("\n");        }        String total="  [total]";        temp.append(pad(total," ",maxAttWidth + 1 - total.length(),false));        for (int k=0; k < m_Instances.numClasses(); k++) {          DiscreteEstimator d=(DiscreteEstimator)m_Distributions[counter][k];          String count="" + d.getSumOfCounts();          temp.append(pad(count," ",maxWidth + 1 - count.length(),true));        }        temp.append("\n\n");      } else       if (m_Distributions[counter][0] instanceof KernelEstimator) {        String kL="  [# kernels]";        temp.append(pad(kL," ",maxAttWidth + 1 - kL.length(),false));        for (int k=0; k < m_Instances.numClasses(); k++) {          KernelEstimator ke=(KernelEstimator)m_Distributions[counter][k];          String nk="" + ke.getNumKernels();          temp.append(pad(nk," ",maxWidth + 1 - nk.length(),true));        }        temp.append("\n");        String stdDevL="  [std. dev]";        temp.append(pad(stdDevL," ",maxAttWidth + 1 - stdDevL.length(),false));        for (int k=0; k < m_Instances.numClasses(); k++) {          KernelEstimator ke=(KernelEstimator)m_Distributions[counter][k];          String stdD=Utils.doubleToString(ke.getStdDev(),maxWidth,4).trim();          temp.append(pad(stdD," ",maxWidth + 1 - stdD.length(),true));        }        temp.append("\n");        String precL="  [precision]";        temp.append(pad(precL," ",maxAttWidth + 1 - precL.length(),false));        for (int k=0; k < m_Instances.numClasses(); k++) {          KernelEstimator ke=(KernelEstimator)m_Distributions[counter][k];          String prec=Utils.doubleToString(ke.getPrecision(),maxWidth,4).trim();          temp.append(pad(prec," ",maxWidth + 1 - prec.length(),true));        }        temp.append("\n");        int maxK=0;        for (int k=0; k < m_Instances.numClasses(); k++) {          KernelEstimator ke=(KernelEstimator)m_Distributions[counter][k];          if (ke.getNumKernels() > maxK) {            maxK=ke.getNumKernels();          }        }        for (int j=0; j < maxK; j++) {          String meanL="  K" + (j + 1) + ": mean (weight)";          temp.append(pad(meanL," ",maxAttWidth + 1 - meanL.length(),false));          for (int k=0; k < m_Instances.numClasses(); k++) {            KernelEstimator ke=(KernelEstimator)m_Distributions[counter][k];            double[] means=ke.getMeans();            double[] weights=ke.getWeights();            String m="--";            if (ke.getNumKernels() == 0) {              m="" + 0;            } else             if (j < ke.getNumKernels()) {              m=Utils.doubleToString(means[j],maxWidth,4).trim();              m+=" (" + Utils.doubleToString(weights[j],maxWidth,1).trim() + ")";            }            temp.append(pad(m," ",maxWidth + 1 - m.length(),true));          }          temp.append("\n");        }        temp.append("\n");      }      counter++;    }  }  return temp.toString();}  }
class C{  private void throwPrintToFile(){  SecurityManager security=System.getSecurityManager();  if (security != null) {    if (printToFilePermission == null) {      printToFilePermission=new FilePermission("<<ALL FILES>>","read,write");    }    security.checkPermission(printToFilePermission);  }}  }
class C{  public MatrixReader(File file,int numberOfColumns) throws FileNotFoundException {  this(new FileReader(file),numberOfColumns);}  }
class C{  public GTSEncoder(long baseTimestamp){  this.baseTimestamp=baseTimestamp;  this.stream=new ByteArrayOutputStream();  this.wrappingKey=null;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.SAVE_HISTORY__REGION:    setRegion((ExecutionRegion)null);  return;case SexecPackage.SAVE_HISTORY__DEEP:setDeep(DEEP_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public CloseableImage decodeGif(final EncodedImage encodedImage,final ImageDecodeOptions options,final Bitmap.Config bitmapConfig){  final CloseableReference<PooledByteBuffer> bytesRef=encodedImage.getByteBufferRef();  Preconditions.checkNotNull(bytesRef);  try {    Preconditions.checkState(!options.forceOldAnimationCode);    final PooledByteBuffer input=bytesRef.get();    GifImage gifImage=GifImage.create(input.getNativePtr(),input.size());    return getCloseableImage(options,gifImage,bitmapConfig);  }  finally {    CloseableReference.closeSafely(bytesRef);  }}  }
class C{  public String join(String separator) throws JSONException {  int len=this.length();  StringBuilder sb=new StringBuilder();  for (int i=0; i < len; i+=1) {    if (i > 0) {      sb.append(separator);    }    sb.append(JSONObject.valueToString(this.myArrayList.get(i)));  }  return sb.toString();}  }
class C{  public void createGroup(String groupName) throws FabricCommunicationException {  errorSafeCallMethod(METHOD_GROUP_CREATE,new Object[]{groupName});}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:14.410 -0500",hash_original_method="80B68145386C06F39CF9C77A11CB4F6E",hash_generated_method="8224FCD3C213FD53AFC8DB9EB6ED1691") private void acquireWakeLock(){synchronized (mWakeLock) {    mWakeLock.acquire();    mRequestMessagesPending++;    mSender.removeMessages(EVENT_WAKE_LOCK_TIMEOUT);    Message msg=mSender.obtainMessage(EVENT_WAKE_LOCK_TIMEOUT);    mSender.sendMessageDelayed(msg,mWakeLockTimeout);  }}  }
class C{  public static void mergeSort(double[] a,int fromIndex,int toIndex){  mergeSort2(a,fromIndex,toIndex);}  }
class C{  public boolean isHighVolume(){  return m_vo.IsHighVolume;}  }
class C{  public static Tuple max(TupleSet tuples,String field,Comparator cmp){  if (tuples instanceof Table) {    Table table=(Table)tuples;    ColumnMetadata md=table.getMetadata(field);    return table.getTuple(md.getMaximumRow());  } else {    return max(tuples.tuples(),field,cmp);  }}  }
class C{  private void copyTuple(final int j,final ITuple<?> tuple){  if (ntuplesWritten == 0) {    assertIteratorOk(tuple);  }  ntuplesWritten++;  final MutableKeyBuffer keys=leaf.keys;  assert keys.nkeys == j;  keys.keys[j]=tuple.getKey();  if (deleteMarkers)   leaf.deleteMarkers[j]=tuple.isDeletedVersion();  if (versionTimestamps) {    final long t=tuple.getVersionTimestamp();    leaf.versionTimestamps[j]=t;    if (t < leaf.minimumVersionTimestamp)     leaf.minimumVersionTimestamp=t;    if (t > leaf.maximumVersionTimestamp)     leaf.maximumVersionTimestamp=t;  }  final byte[] val;  if (deleteMarkers && tuple.isDeletedVersion()) {    val=null;  } else {    if (overflowHandler != null) {      val=overflowHandler.handle(tuple,blobBuffer);    } else {      val=tuple.getValue();    }  }  if (rawRecords) {    final long maxRecLen=metadata.getMaxRecLen();    if (val != null && val.length > maxRecLen) {      final long addr1=blobBuffer.write(ByteBuffer.wrap(val));      final int nbytes=blobBuffer.getByteCount(addr1);      final long offset=blobBuffer.getOffset(addr1);      final long addr=addressManager.toAddr(nbytes,IndexSegmentRegion.BLOB.encodeOffset(offset));      leaf.vals.values[j]=AbstractBTree.encodeRecordAddr(recordAddrBuf,addr);      leaf.rawRecords[j]=true;    } else {      leaf.vals.values[j]=val;      leaf.rawRecords[j]=false;    }  } else {    leaf.vals.values[j]=val;  }  if (bloomFilter != null) {    bloomFilter.add(keys.keys[j]);  }  keys.nkeys++;  leaf.vals.nvalues++;}  }
class C{  public RangeQueryBuilder lte(double to){  this.to=to;  this.includeUpper=true;  return this;}  }
class C{  private int stringHexChar() throws JsonParserException {  int c="0123456789abcdef0123456789ABCDEF".indexOf(advanceChar()) % 16;  if (c == -1)   throw createParseException(null,"Expected unicode hex escape character",false);  return c;}  }
class C{  public static Integer toInteger(Object o,Integer defaultValue){  if (defaultValue != null)   return Integer.valueOf(toIntValue(o,defaultValue.intValue()));  int res=toIntValue(o,Integer.MIN_VALUE);  if (res == Integer.MIN_VALUE)   return defaultValue;  return Integer.valueOf(res);}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  protected void drawLine(int lineIndex,Graphics g,int x,int y){  Element line=getElement().getElement(lineIndex);  Element elem;  try {    if (line.isLeaf()) {      drawElement(lineIndex,line,g,x,y);    } else {      int count=line.getElementCount();      for (int i=0; i < count; i++) {        elem=line.getElement(i);        x=drawElement(lineIndex,elem,g,x,y);      }    }  } catch (  BadLocationException e) {    throw new StateInvariantError("Can't render line: " + lineIndex);  }}  }
class C{  public void postProcessDistances(double distances[]){  m_Distance.postProcessDistances(distances);}  }
class C{  public int hashCode(){  long bits=Double.doubleToLongBits(width);  bits^=Double.doubleToLongBits(height) * 31;  return (((int)bits) ^ ((int)(bits >> 32)));}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  private void decorateVolumeWithRPProperties(RecoverPointVolumeIngestionContext volumeContext,Volume volume,UnManagedVolume unManagedVolume){  StringSetMap unManagedVolumeInformation=unManagedVolume.getVolumeInformation();  String type=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.RP_PERSONALITY.toString(),unManagedVolumeInformation);  _logger.info("decorating {} volume {} with RecoverPoint properties",type,volume.forDisplay());  if (Volume.PersonalityTypes.SOURCE.toString().equalsIgnoreCase(type)) {    decorateUpdatesForRPSource(volumeContext,volume,unManagedVolume);  } else   if (Volume.PersonalityTypes.TARGET.toString().equalsIgnoreCase(type)) {    decorateUpdatesForRPTarget(volumeContext,volume,unManagedVolume);  } else   if (Volume.PersonalityTypes.METADATA.toString().equalsIgnoreCase(type)) {    volume.setPersonality(PersonalityTypes.METADATA.toString());    volume.setAccessState(Volume.VolumeAccessState.NOT_READY.toString());  }  String rpCopyName=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.RP_COPY_NAME.toString(),unManagedVolumeInformation);  String rpRSetName=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.RP_RSET_NAME.toString(),unManagedVolumeInformation);  String rpProtectionSystem=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.RP_PROTECTIONSYSTEM.toString(),unManagedVolumeInformation);  String rpInternalSiteName=PropertySetterUtil.extractValueFromStringSet(SupportedVolumeInformation.RP_INTERNAL_SITENAME.toString(),unManagedVolumeInformation);  if (!Volume.PersonalityTypes.METADATA.toString().equalsIgnoreCase(type)) {    volume.setRSetName(rpRSetName);  }  volume.setRpCopyName(rpCopyName);  volume.setInternalSiteName(rpInternalSiteName);  volume.setProtectionController(URI.create(rpProtectionSystem));  volume.setSyncActive(true);}  }
class C{  public HtmlTable table(){  HtmlTable t=new HtmlTable();  addBodyNode(t);  return t;}  }
class C{  public boolean checkPosition(int position){  Iterator<PositionSpan> positionSpanIt=positionSpans.iterator();  while (positionSpanIt.hasNext()) {    PositionSpan posSpan=positionSpanIt.next();    if (((position >= posSpan.start) && (position <= posSpan.end))) {      return true;    }  }  return false;}  }
class C{  private void dumpMapping() throws IOException {  List<String> list=new ArrayList<String>();  for (  PackageNode p : deobfuscator.getRootPackage().getInnerPackages()) {    for (    PackageNode pp : p.getInnerPackages()) {      dfsPackageName(list,p.getName(),pp);    }    if (p.hasAlias()) {      list.add(String.format("p %s = %s",p.getName(),p.getAlias()));    }  }  for (  DeobfClsInfo deobfClsInfo : deobfuscator.getClsMap().values()) {    if (deobfClsInfo.getAlias() != null) {      list.add(String.format("c %s = %s",deobfClsInfo.getCls().getClassInfo().getFullName(),deobfClsInfo.getAlias()));    }  }  for (  FieldInfo fld : deobfuscator.getFldMap().keySet()) {    list.add(String.format("f %s = %s",fld.getFullId(),fld.getAlias()));  }  for (  MethodInfo mth : deobfuscator.getMthMap().keySet()) {    list.add(String.format("m %s = %s",mth.getFullId(),mth.getAlias()));  }  Collections.sort(list);  FileUtils.writeLines(deobfMapFile,MAP_FILE_CHARSET,list);  list.clear();}  }
class C{  public void updateSeries(CandleSeries source,int skip,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleSeries).");  }  if (getLength() == null || getLength() < 1) {    throw new IllegalArgumentException("CCI period must be  greater than zero.");  }  if (source.getItemCount() > skip) {    CandleItem candleItem=(CandleItem)source.getDataItem(skip);    double typicalPrice=(candleItem.getClose() + candleItem.getHigh() + candleItem.getLow()) / 3;    if (this.getRollingCandle()) {      typicalPrice=(source.getRollingCandle().getClose() + source.getRollingCandle().getHigh() + source.getRollingCandle().getLow()) / 3;    }    if (0 != typicalPrice) {      if (typicalPriceValues.size() == getLength()) {        if (newBar) {          sumTypicalPrice=sumTypicalPrice - typicalPriceValues.getLast() + typicalPrice;          typicalPriceValues.removeLast();          typicalPriceValues.addFirst(typicalPrice);        } else {          sumTypicalPrice=sumTypicalPrice - typicalPriceValues.getFirst() + typicalPrice;          typicalPriceValues.removeFirst();          typicalPriceValues.addFirst(typicalPrice);        }      } else {        if (newBar) {          sumTypicalPrice=sumTypicalPrice + typicalPrice;          typicalPriceValues.addFirst(typicalPrice);        } else {          sumTypicalPrice=sumTypicalPrice + typicalPrice - typicalPriceValues.getFirst();          typicalPriceValues.removeFirst();          typicalPriceValues.addFirst(typicalPrice);        }      }      if (typicalPriceValues.size() == getLength()) {        double cci=calculateCCI(sumTypicalPrice,typicalPriceValues);        if (newBar) {          CommodityChannelIndexItem dataItem=new CommodityChannelIndexItem(candleItem.getPeriod(),new BigDecimal(cci));          this.add(dataItem,false);        } else {          CommodityChannelIndexItem dataItem=(CommodityChannelIndexItem)this.getDataItem(this.getItemCount() - 1);          dataItem.setCommodityChannelIndex(cci);        }      }    }  }}  }
class C{  @Override public int read(byte[] buf,int offset,int length) throws IOException {  try {    if (_is == null) {      if (_s == null) {        return -1;      }      _is=_s.getInputStream();    }    int readLength=_is.read(buf,offset,length);    if (readLength >= 0) {      _totalReadBytes+=readLength;    }    return readLength;  } catch (  InterruptedIOException e) {    e.printStackTrace();    if (_throwReadInterrupts)     throw e;    log.log(Level.FINEST,e.toString(),e);  }catch (  IOException e) {    e.printStackTrace();    if (_throwReadInterrupts) {      throw e;    }    if (log.isLoggable(Level.FINEST)) {      log.log(Level.FINEST,e.toString(),e);    } else {      log.finer(e.toString());    }  }  return -1;}  }
class C{  static public double doubleValue(String val) throws java.text.ParseException {  return java.text.NumberFormat.getInstance().parse(val).doubleValue();}  }
class C{  public PostCodeValidator(){  propertySupport=new PropertyChangeSupport(this);}  }
class C{  @Override public byte[] decode(final byte[] valuesRead){  int special_cases=0, returns=0, data_size=valuesRead.length;  for (int i=0; i < data_size; i++) {    if (valuesRead[i] == 122) {      special_cases++;    } else     if (valuesRead[i] == 10) {      returns++;    }  }  if (returns == 5 && special_cases == 0 && ((data_size - returns) % 5) == 4) {    data_size++;  }  int output_pointer=0;  long value;  final byte[] temp_data=new byte[data_size - returns + 1 + (special_cases * 3)];  int ii, next;  for (int i=0; i < data_size; i++) {    value=0;    next=valuesRead[i];    while ((next == 10) || (next == 13)) {      i++;      if (i == data_size) {        next=0;      } else {        next=valuesRead[i];      }    }    if (next == 122) {      for (int i3=0; i3 < 4; i3++) {        temp_data[output_pointer]=0;        output_pointer++;      }    } else     if ((data_size - i > 4) && (next > 32) && (next < 118)) {      int cut=4;      for (ii=0; ii < 5; ii++) {        if (i < valuesRead.length) {          next=valuesRead[i];        }        while ((next == 10) || (next == 13)) {          i++;          if (i == data_size) {            next=0;          } else {            next=valuesRead[i];          }        }        i++;        if (next == 126 && valuesRead[i] == 62) {          cut=ii - 1;        }        if (((next > 32) && (next < 118)) || (next == 126)) {          value+=((next - 33) * base_85_indices[ii]);        }      }      for (int i3=0; i3 < 4 && i3 < cut; i3++) {        temp_data[output_pointer]=(byte)((value / hex_indices[i3]) & 255);        output_pointer++;      }      i--;    }  }  final byte[] processed_data=new byte[output_pointer];  System.arraycopy(temp_data,0,processed_data,0,output_pointer);  return processed_data;}  }
class C{  public int pop(){  int numObjs=this.numObjs;  if (numObjs <= 0)   return 0;  int ret=objs[--numObjs];  this.numObjs=numObjs;  return ret;}  }
class C{  public static Long toLong(Number self){  return self.longValue();}  }
class C{  public static String writeMetadataToString(OFInstructionWriteMetadata inst,Logger log){  return STR_SUB_WRITE_METADATA_METADATA + "=" + Long.toString(inst.getMetadata().getValue())+ ","+ STR_SUB_WRITE_METADATA_MASK+ "="+ Long.toString(inst.getMetadataMask().getValue());}  }
class C{  private SystemMemberType(String name){  this.name=name;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(HREF);  builder.addAttribute(ORIGINAL_ID).setRequired(true);  builder.addElement(When.KEY).setRequired(true);}  }
class C{  public static ErStackTraceElement fromStackTraceElement(StackTraceElement element){  ErStackTraceElement erl=new ErStackTraceElement();  erl.setDeclaringClass(element.getClassName());  erl.setFileName(element.getFileName());  erl.setMethodName(element.getMethodName());  erl.setLineNumber(element.getLineNumber());  return erl;}  }
class C{  public InlineQueryResultCachedMpeg4GifBuilder mpeg4FileId(String mpeg4FileId){  this.mpeg4_file_id=mpeg4FileId;  return this;}  }
class C{  public void load(Element element,Object o){  Editor ed=(Editor)o;  SignalHeadIcon l=new SignalHeadIcon(ed);  String name;  Attribute attr=element.getAttribute("signalhead");  if (attr == null) {    log.error("incorrect information for signal head; must use signalhead name");    ed.loadFailed();    return;  } else {    name=attr.getValue();  }  SignalHead sh=jmri.InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(name);  if (sh != null) {    l.setSignalHead(name);  } else {    log.error("SignalHead named '" + attr.getValue() + "' not found.");    return;  }  int rotation=0;  try {    attr=element.getAttribute("rotate");    rotation=attr.getIntValue();  } catch (  org.jdom2.DataConversionException e) {  }catch (  NullPointerException e) {  }  List<Element> aspects=element.getChildren();  if (aspects.size() > 0) {    Element icons=element.getChild("icons");    Element elem=element;    if (icons != null) {      List<Element> c=icons.getChildren();      aspects=c;      elem=icons;    }    for (int i=0; i < aspects.size(); i++) {      String aspect=aspects.get(i).getName();      NamedIcon icon=loadIcon(l,aspect,elem,"SignalHead \"" + name + "\": icon \""+ aspect+ "\" ",ed);      if (icon != null) {        l.setIcon(_nameMap.get(aspect),icon);      } else {        log.info("SignalHead \"" + name + "\": icon \""+ aspect+ "\" removed");      }    }    log.debug(aspects.size() + " icons loaded for " + l.getNameString());  } else {    NamedIcon icon=loadSignalIcon("red",rotation,l,element,name,ed);    if (icon != null) {      l.setIcon(rbean.getString("SignalHeadStateRed"),icon);    }    icon=loadSignalIcon("yellow",rotation,l,element,name,ed);    if (icon != null) {      l.setIcon(rbean.getString("SignalHeadStateYellow"),icon);    }    icon=loadSignalIcon("green",rotation,l,element,name,ed);    if (icon != null) {      l.setIcon(rbean.getString("SignalHeadStateGreen"),icon);    }    icon=loadSignalIcon("lunar",rotation,l,element,name,ed);    if (icon != null) {      l.setIcon(rbean.getString("SignalHeadStateLunar"),icon);    }    icon=loadSignalIcon("held",rotation,l,element,name,ed);    if (icon != null) {      l.setIcon(rbean.getString("SignalHeadStateHeld"),icon);    }    icon=loadSignalIcon("dark",rotation,l,element,name,ed);    if (icon != null) {      l.setIcon(rbean.getString("SignalHeadStateDark"),icon);    }    icon=loadSignalIcon("flashred",rotation,l,element,name,ed);    if (icon != null) {      l.setIcon(rbean.getString("SignalHeadStateFlashingRed"),icon);    }    icon=loadSignalIcon("flashyellow",rotation,l,element,name,ed);    if (icon != null) {      l.setIcon(rbean.getString("SignalHeadStateFlashingYellow"),icon);    }    icon=loadSignalIcon("flashgreen",rotation,l,element,name,ed);    if (icon != null) {      l.setIcon(rbean.getString("SignalHeadStateFlashingGreen"),icon);    }    icon=loadSignalIcon("flashlunar",rotation,l,element,name,ed);    if (icon != null) {      l.setIcon(rbean.getString("SignalHeadStateFlashingLunar"),icon);    }  }  Element elem=element.getChild("iconmaps");  if (elem != null) {    attr=elem.getAttribute("family");    if (attr != null) {      l.setFamily(attr.getValue());    }  }  try {    attr=element.getAttribute("clickmode");    if (attr != null) {      l.setClickMode(attr.getIntValue());    }  } catch (  org.jdom2.DataConversionException e) {    log.error("Failed on clickmode attribute: " + e);  }  try {    attr=element.getAttribute("litmode");    if (attr != null) {      l.setLitMode(attr.getBooleanValue());    }  } catch (  org.jdom2.DataConversionException e) {    log.error("Failed on litmode attribute: " + e);  }  ed.putItem(l);  loadCommonAttributes(l,Editor.SIGNALS,element);}  }
class C{  @SuppressWarnings("unchecked") @Override public <T>T deserialize(byte[] data,Class<T> clazz){  try {    return (T)this.unmarshal(new String(data));  } catch (  Exception e) {    e.printStackTrace();  }  return null;}  }
class C{  public boolean visit(SimpleType node){  return true;}  }
class C{  public void updatePropertyDetail(Property property,Long floorTypeId,Long roofTypeId,Long wallTypeId,Long woodTypeId,String areaOfPlot,String propertyCategory,String nonResPlotArea,String propUsageId,String propOccId,String propTypeId){  PropertyDetail propertyDetail=property.getPropertyDetail();  if (floorTypeId != null && floorTypeId != -1) {    final FloorType floorType=(FloorType)getPropPerServ().find("From FloorType where id = ?",floorTypeId);    propertyDetail.setFloorType(floorType);  }  if (roofTypeId != null && roofTypeId != -1) {    final RoofType roofType=(RoofType)getPropPerServ().find("From RoofType where id = ?",roofTypeId);    propertyDetail.setRoofType(roofType);  }  if (wallTypeId != null && wallTypeId != -1) {    final WallType wallType=(WallType)getPropPerServ().find("From WallType where id = ?",wallTypeId);    propertyDetail.setWallType(wallType);  }  if (woodTypeId != null && woodTypeId != -1) {    final WoodType woodType=(WoodType)getPropPerServ().find("From WoodType where id = ?",woodTypeId);    propertyDetail.setWoodType(woodType);  }  if (areaOfPlot != null && !areaOfPlot.isEmpty()) {    propertyDetail.getSitalArea().setArea(new Float(areaOfPlot));  }  propertyDetail.setCategoryType(propertyDetail.getCategoryType());  if (propertyDetail.getApartment() != null && propertyDetail.getApartment().getId() != null) {    final Apartment apartment=(Apartment)getPropPerServ().find("From Apartment where id = ?",property.getPropertyDetail().getApartment().getId());    propertyDetail.setApartment(apartment);  }  if (nonResPlotArea != null && !nonResPlotArea.isEmpty()) {    propertyDetail.getNonResPlotArea().setArea(new Float(nonResPlotArea));  }  propertyDetail.setFieldVerified('Y');  propertyDetail.setProperty(property);  final PropertyMutationMaster propMutMstr=(PropertyMutationMaster)getPropPerServ().find("from PropertyMutationMaster PM where upper(PM.code) = ?",property.getBasicProperty().getPropertyMutationMaster().getCode());  final PropertyTypeMaster propTypeMstr=(PropertyTypeMaster)getPropPerServ().find("from PropertyTypeMaster PTM where PTM.id = ?",Long.valueOf(propTypeId));  if (propUsageId != null) {    final PropertyUsage usage=(PropertyUsage)getPropPerServ().find("from PropertyUsage pu where pu.id = ?",Long.valueOf(propUsageId));    propertyDetail.setPropertyUsage(usage);  }  if (propOccId != null) {    final PropertyOccupation occupancy=(PropertyOccupation)getPropPerServ().find("from PropertyOccupation po where po.id = ?",Long.valueOf(propOccId));    propertyDetail.setPropertyOccupation(occupancy);  }  if (propTypeMstr.getCode().equals(OWNERSHIP_TYPE_VAC_LAND))   propertyDetail.setPropertyType(VACANT_PROPERTY); else   propertyDetail.setPropertyType(BUILT_UP_PROPERTY);  propertyDetail.setPropertyTypeMaster(propTypeMstr);  propertyDetail.setPropertyMutationMaster(propMutMstr);  propertyDetail.setUpdatedTime(new Date());  if (propertyDetail.getPropertyTypeMaster().getCode().equalsIgnoreCase(OWNERSHIP_TYPE_VAC_LAND)) {    propertyDetail.setNoofFloors(0);    if (!property.getPropertyDetail().getFloorDetails().isEmpty())     property.getPropertyDetail().getFloorDetails().clear();    property.getPropertyDetail().getTotalBuiltupArea().setArea(new Float(0));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.056 -0500",hash_original_method="76654AC28D619222BBA1A28B5AC8BB60",hash_generated_method="3C614CFF977835D0BE5CAEABFB7C59E3") public String localName(String name){  int colon=name.indexOf(':');  if (colon == -1) {    return name;  } else {    return name.substring(colon + 1).intern();  }}  }
class C{  public boolean hasMoreResults(){  return isServerFlagSet(MySQLConstants.SERVER_MORE_RESULTS_EXISTS);}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  @Override public int hashCode(){  int result=super.hashCode();  result=29 * result + (this.domain != null ? this.domain.hashCode() : 0);  result=29 * result + (this.range != null ? this.range.hashCode() : 0);  result=29 * result + (this.timePeriodClass != null ? this.timePeriodClass.hashCode() : 0);  int count=getItemCount();  if (count > 0) {    TimeSeriesDataItem item=getRawDataItem(0);    result=29 * result + item.hashCode();  }  if (count > 1) {    TimeSeriesDataItem item=getRawDataItem(count - 1);    result=29 * result + item.hashCode();  }  if (count > 2) {    TimeSeriesDataItem item=getRawDataItem(count / 2);    result=29 * result + item.hashCode();  }  result=29 * result + this.maximumItemCount;  result=29 * result + (int)this.maximumItemAge;  return result;}  }
class C{  public MonKeyBase(String rangeKeyStr,LinkedHashMap keyMap){  this.rangeKeyStr=rangeKeyStr;  this.keyMap=(keyMap == null) ? new LinkedHashMap() : keyMap;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public ClassFileReader(ClassAnalysisStats analysisStats){  this.analysisStats=analysisStats;}  }
class C{  private void createExportGroup(ExportGroup oldExportGroup,Volume volume,Integer lun){  ExportGroup exportGroup=new ExportGroup();  exportGroup.setLabel(oldExportGroup.getLabel());  exportGroup.setType(oldExportGroup.getType());  exportGroup.setId(URIUtil.createId(ExportGroup.class));  exportGroup.setProject(oldExportGroup.getProject());  exportGroup.setVirtualArray(volume.getVirtualArray());  exportGroup.setTenant(oldExportGroup.getTenant());  exportGroup.setGeneratedName(oldExportGroup.getGeneratedName());  exportGroup.addVolume(volume.getId(),lun);  exportGroup.addInitiators(StringSetUtil.stringSetToUriList(oldExportGroup.getInitiators()));  exportGroup.addHosts(StringSetUtil.stringSetToUriList(oldExportGroup.getHosts()));  exportGroup.setClusters(oldExportGroup.getClusters());  List<ExportMask> exportMasks=ExportMaskUtils.getExportMasks(_dbClient,oldExportGroup);  if (!exportMasks.isEmpty()) {    for (    ExportMask exportMask : exportMasks) {      exportGroup.addExportMask(exportMask.getId());    }  }  exportGroup.setNumPaths(oldExportGroup.getNumPaths());  exportGroup.setZoneAllInitiators(oldExportGroup.getZoneAllInitiators());  _dbClient.createObject(exportGroup);}  }
class C{  private boolean shouldSkipASI(CommonToken lastToken){  if (lastToken.getType() == eol) {    return true;  }  if (lastToken.getType() == semi && lastToken.getText() != null && !";".equals(lastToken.getText())) {    return true;  }  return false;}  }
class C{  public applet addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public static Object showInternalInputDialog(Component parentComponent,Object message,String title,int messageType,Icon icon,Object[] selectionValues,Object initialSelectionValue){  JOptionPane pane=new JOptionPane(message,messageType,OK_CANCEL_OPTION,icon,null,null);  pane.putClientProperty(PopupFactory_FORCE_HEAVYWEIGHT_POPUP,Boolean.TRUE);  Component fo=KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();  pane.setWantsInput(true);  pane.setSelectionValues(selectionValues);  pane.setInitialSelectionValue(initialSelectionValue);  JInternalFrame dialog=pane.createInternalFrame(parentComponent,title);  pane.selectInitialValue();  dialog.setVisible(true);  if (dialog.isVisible() && !dialog.isShowing()) {    Container parent=dialog.getParent();    while (parent != null) {      if (parent.isVisible() == false) {        parent.setVisible(true);      }      parent=parent.getParent();    }  }  try {    Method method=AccessController.doPrivileged(new ModalPrivilegedAction(Container.class,"startLWModal"));    if (method != null) {      method.invoke(dialog,(Object[])null);    }  } catch (  IllegalAccessException ex) {  }catch (  IllegalArgumentException ex) {  }catch (  InvocationTargetException ex) {  }  if (parentComponent instanceof JInternalFrame) {    try {      ((JInternalFrame)parentComponent).setSelected(true);    } catch (    java.beans.PropertyVetoException e) {    }  }  if (fo != null && fo.isShowing()) {    fo.requestFocus();  }  Object value=pane.getInputValue();  if (value == UNINITIALIZED_VALUE) {    return null;  }  return value;}  }
class C{  @SuppressWarnings("deprecation") public void stopThreads(){  int i;  Thread[] thGroup;  Thread t;  thGroup=new Thread[Thread.activeCount()];  Thread.enumerate(thGroup);  for (i=0; i < thGroup.length; i++) {    t=thGroup[i];    if (t != null) {      if (t != Thread.currentThread()) {        if (t.getName().startsWith("Thread")) {          t.stop();        } else         if (t.getName().startsWith("AWT-EventQueue")) {          t.stop();        }      }    }  }  thGroup=null;  System.gc();}  }
class C{  public void testCalendars(){  Calendar tCal1=calStatic;  if (tCal1.equals(calStatic))   System.out.println("Cal1 equals calStatic");  Calendar tCal2=getCal();  if (System.currentTimeMillis() < 1L)   return;  if (tCal2.equals(calStatic))   return;  Calendar tCal3=calInstace;  tCal3.clear();  Calendar tCal4=calStatic2;  int tInt=1;  boolean tBoolean=false;  Object tObj=new Object();  if (tObj.hashCode() > 0)   return;  tCal4.clear();  tCal4=new GregorianCalendar();  tCal4.clear();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean more() throws JSONException {  this.next();  if (this.end()) {    return false;  }  this.back();  return true;}  }
class C{  protected int measureWidth(int measureSpec){  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  int result;  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * radius) + getPaddingLeft() + getPaddingRight()+ (int)(2 * strokeWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public String toString(){  return toMasterFile();}  }
class C{  public final void walkGraph(Hashtable semNodesTable){  Integer uid=new Integer(myUID);  if (semNodesTable.get(uid) != null)   return;  semNodesTable.put(new Integer(myUID),this);}  }
class C{  public void subtract(double value1,double value2){  xStats.subtract(value1);  yStats.subtract(value2);  differencesStats.subtract(value1 - value2);  xySum-=value1 * value2;  count--;}  }
class C{  private static int checkTypeVariableSignature(final String signature,int pos){  pos=checkChar('T',signature,pos);  pos=checkIdentifier(signature,pos);  return checkChar(';',signature,pos);}  }
class C{  public static DecodingException createDecodingException(final ErrorKeys errorId,final String message,final Exception e){  return new DecodingException(errorId.toString() + ":\r\n" + message,e);}  }
class C{  public boolean match(ReplDBMSHeader event){  if (event == null)   return false; else   if (event.getSeqno() > seqno)   return true; else   if (event.getSeqno() == seqno && event.getLastFrag())   return true; else   return false;}  }
class C{  public ConversationBuilder last(ConversationPrompt prompt){  prompts.add(prompt);  return end();}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  super.reset(mapping,request);  tipos=new String[0];  estados=new String[0];}  }
class C{  public void fitToScreen(){  getScreenFit(m_viewPos,m_viewSize);  repaint();}  }
class C{  public static <T>void isNotEmpty(String member,Collection<T> inputValue) throws ValidationException {  isNotNull(member,inputValue);  if (inputValue.isEmpty()) {    ValidationException vf=new ValidationException(ReasonEnum.EMPTY_VALUE,member,new Object[]{member});    logValidationFailure(vf);    throw vf;  }}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  int dim=in.readInt();  min=new double[dim];  max=new double[dim];  for (int i=0; i < min.length; i++) {    min[i]=in.readDouble();  }  for (int i=0; i < max.length; i++) {    max[i]=in.readDouble();  }}  }
class C{  protected GraphSONXModuleV2d0(final boolean normalize){  super("graphsonx-2.0");  addSerializer(Duration.class,new JavaTimeSerializersV2d0.DurationJacksonSerializer());  addSerializer(Instant.class,new JavaTimeSerializersV2d0.InstantJacksonSerializer());  addSerializer(LocalDate.class,new JavaTimeSerializersV2d0.LocalDateJacksonSerializer());  addSerializer(LocalDateTime.class,new JavaTimeSerializersV2d0.LocalDateTimeJacksonSerializer());  addSerializer(LocalTime.class,new JavaTimeSerializersV2d0.LocalTimeJacksonSerializer());  addSerializer(MonthDay.class,new JavaTimeSerializersV2d0.MonthDayJacksonSerializer());  addSerializer(OffsetDateTime.class,new JavaTimeSerializersV2d0.OffsetDateTimeJacksonSerializer());  addSerializer(OffsetTime.class,new JavaTimeSerializersV2d0.OffsetTimeJacksonSerializer());  addSerializer(Period.class,new JavaTimeSerializersV2d0.PeriodJacksonSerializer());  addSerializer(Year.class,new JavaTimeSerializersV2d0.YearJacksonSerializer());  addSerializer(YearMonth.class,new JavaTimeSerializersV2d0.YearMonthJacksonSerializer());  addSerializer(ZonedDateTime.class,new JavaTimeSerializersV2d0.ZonedDateTimeJacksonSerializer());  addSerializer(ZoneOffset.class,new JavaTimeSerializersV2d0.ZoneOffsetJacksonSerializer());  addDeserializer(Duration.class,new JavaTimeSerializersV2d0.DurationJacksonDeserializer());  addDeserializer(Instant.class,new JavaTimeSerializersV2d0.InstantJacksonDeserializer());  addDeserializer(LocalDate.class,new JavaTimeSerializersV2d0.LocalDateJacksonDeserializer());  addDeserializer(LocalDateTime.class,new JavaTimeSerializersV2d0.LocalDateTimeJacksonDeserializer());  addDeserializer(LocalTime.class,new JavaTimeSerializersV2d0.LocalTimeJacksonDeserializer());  addDeserializer(MonthDay.class,new JavaTimeSerializersV2d0.MonthDayJacksonDeserializer());  addDeserializer(OffsetDateTime.class,new JavaTimeSerializersV2d0.OffsetDateTimeJacksonDeserializer());  addDeserializer(OffsetTime.class,new JavaTimeSerializersV2d0.OffsetTimeJacksonDeserializer());  addDeserializer(Period.class,new JavaTimeSerializersV2d0.PeriodJacksonDeserializer());  addDeserializer(Year.class,new JavaTimeSerializersV2d0.YearJacksonDeserializer());  addDeserializer(YearMonth.class,new JavaTimeSerializersV2d0.YearMonthJacksonDeserializer());  addDeserializer(ZonedDateTime.class,new JavaTimeSerializersV2d0.ZonedDateTimeJacksonDeserializer());  addDeserializer(ZoneOffset.class,new JavaTimeSerializersV2d0.ZoneOffsetJacksonDeserializer());}  }
class C{  public RestoreInProgress(Entry... entries){  this.entries=Arrays.asList(entries);}  }
class C{  public int findApproxKeyDistance(Key id){  Key d=Key.distance(id,this);  return d.leadingOneBit();}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (bayesPm == null) {    throw new NullPointerException();  }  if (nodes == null) {    throw new NullPointerException();  }  if (parents == null) {    throw new NullPointerException();  }  if (parentDims == null) {    throw new NullPointerException();  }  if (pseudocounts == null) {    throw new NullPointerException();  }}  }
class C{  public String replace(final StrBuilder source,final int offset,final int length){  if (source == null) {    return null;  }  final StrBuilder buf=new StrBuilder(length).append(source,offset,length);  substitute(buf,0,length);  return buf.toString();}  }
class C{  public String reload(){  reloadSourceValues();  return SUCCESS;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static HKDFParameters skipExtractParameters(final byte[] ikm,final byte[] info){  return new HKDFParameters(ikm,true,null,info);}  }
class C{  @Override public void removeValue(String key){  if (key == null) {    throw new IllegalArgumentException("argument can not be null");  }  SecureKey secureKey=new SecureKey(key);  Object value=table.remove(secureKey);  if (value instanceof SSLSessionBindingListener) {    SSLSessionBindingEvent e;    e=new SSLSessionBindingEvent(this,key);    ((SSLSessionBindingListener)value).valueUnbound(e);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  static private <E>List<IAllocation> moveToNIOBuffers(final IAllocationContext allocationContext,final E[] source,final AtomicInteger nsolutions){  int nbytes=0;  int n=0;  final List<IAllocation> allocations=new LinkedList<IAllocation>();  final E[] chunk=source;  n+=chunk.length;  final byte[] data=SerializerUtil.serialize(chunk);  nbytes+=data.length;  final IAllocation[] tmp;  try {    tmp=allocationContext.alloc(data.length);  } catch (  InterruptedException ex) {    throw new RuntimeException(ex);  }  DirectBufferPoolAllocator.put(data,tmp);  for (  IAllocation a : tmp) {    a.getSlice().flip();    allocations.add(a);  }  nsolutions.addAndGet(n);  return allocations;}  }
class C{  public static void main(String[] args){  try {    HTTP_TRANSPORT=GoogleNetHttpTransport.newTrustedTransport();    DATA_STORE_FACTORY=new FileDataStoreFactory(DATA_STORE_DIR);    Analytics analytics=initializeAnalytics();    GaData gaData=executeDataQuery(analytics,TABLE_ID);    printReportInfo(gaData);    printProfileInfo(gaData);    printQueryInfo(gaData);    printPaginationInfo(gaData);    printTotalsForAllResults(gaData);    printColumnHeaders(gaData);    printDataTable(gaData);  } catch (  GoogleJsonResponseException e) {    System.err.println("There was a service error: " + e.getDetails().getCode() + " : "+ e.getDetails().getMessage());  }catch (  Throwable t) {    t.printStackTrace();  }}  }
class C{  public static ActionErrors validarDatosUsuario(UsuarioForm usuarioForm){  ActionErrors errores=new ActionErrors();  boolean datosValidos=true;  int contador=0;  if (usuarioForm != null) {    if (isNuloOVacio(usuarioForm.getNombreIdentificacion())) {      datosValidos=false;      contador++;      ActionError error=new ActionError("ieci.tecdoc.sgm.rpadmin.usuarios.identificacion.nombre.required");      errores.add("Error interno",error);    }    if (isNuloOVacio(usuarioForm.getNombre())) {      datosValidos=false;      contador++;      ActionError error=new ActionError("ieci.tecdoc.sgm.rpadmin.usuarios.identificacion.nombre.required");      errores.add("Error interno",error);    }    if (isNuloOVacio(usuarioForm.getPrimerApellido())) {      datosValidos=false;      contador++;      ActionError error=new ActionError("ieci.tecdoc.sgm.rpadmin.usuarios.identificacion.primer.apellido.required");      errores.add("Error interno",error);    }    if ((isNotNuloOVacio(usuarioForm.getCodigoPostal())) || (isNotNuloOVacio(usuarioForm.getProvincia())) || (isNotNuloOVacio(usuarioForm.getProvincia()))|| (isNotNuloOVacio(usuarioForm.getCiudad()))|| (isNotNuloOVacio(usuarioForm.getTelefono()))|| (isNotNuloOVacio(usuarioForm.getFax()))|| (isNotNuloOVacio(usuarioForm.getDireccion()))) {      if (isNuloOVacio(usuarioForm.getDireccion()) && (contador < 2)) {        datosValidos=false;        contador++;        ActionError error=new ActionError("ieci.tecdoc.sgm.rpadmin.usuarios.localizacion.direccion.required");        errores.add("Error interno",error);      }      if (isNuloOVacio(usuarioForm.getCiudad()) && (contador < 2)) {        datosValidos=false;        contador++;        ActionError error=new ActionError("ieci.tecdoc.sgm.rpadmin.usuarios.localizacion.ciudad.required");        errores.add("Error interno",error);      }    }  }  if (datosValidos) {    errores=null;  }  return errores;}  }
class C{  public BloomFilter(int filterSize,int expectedNumberOfObjects){  bitSet=new BitSet(filterSize);  this.filterSize=filterSize;  this.expectedNumberOfObjects=expectedNumberOfObjects;  bigPrime=getPrimeLargerThan(filterSize);}  }
class C{  protected void prepareCurrentTable() throws ReplicatorException {  if (currentTableName == null) {    hasNext=false;    return;  }  this.tableNames.remove(currentTableName);  try {    hasNext=true;    String fileName=uri.getPath() + "/" + currentTableName+ ".txt";    lineReader=new LineNumberReader(new InputStreamReader(new FileInputStream(fileName)));    for (int i=0; i < currentTablePosition; i++) {      lineReader.readLine();    }  } catch (  FileNotFoundException e) {    throw new ReplicatorException("Unable to find import file for " + currentTableName);  }catch (  IOException e) {    throw new ReplicatorException("Unable to skip " + currentTablePosition + " characters in "+ currentTableName);  }}  }
class C{  public static Complex divide(Complex c,double a){  return new Complex(c.real / a,c.imag / a);}  }
class C{  public static String numberToString(Number number) throws JSONException {  if (number == null) {    throw new JSONException("Null pointer");  }  testValidity(number);  String string=number.toString();  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:05.186 -0500",hash_original_method="28B33299F4BA824C1BCFC057E41834D8",hash_generated_method="8411EC820AA584BF44E6CCED4A3DBD03") private void mergeLo(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  T[] a=this.a;  T[] tmp=ensureCapacity(len1);  System.arraycopy(a,base1,tmp,0,len1);  int cursor1=0;  int cursor2=base2;  int dest=base1;  a[dest++]=a[cursor2++];  if (--len2 == 0) {    System.arraycopy(tmp,cursor1,a,dest,len1);    return;  }  if (len1 == 1) {    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];    return;  }  Comparator<? super T> c=this.c;  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      if (c.compare(a[cursor2],tmp[cursor1]) < 0) {        a[dest++]=a[cursor2++];        count2++;        count1=0;        if (--len2 == 0)         break outer;      } else {        a[dest++]=tmp[cursor1++];        count1++;        count2=0;        if (--len1 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      count1=gallopRight(a[cursor2],tmp,cursor1,len1,0,c);      if (count1 != 0) {        System.arraycopy(tmp,cursor1,a,dest,count1);        dest+=count1;        cursor1+=count1;        len1-=count1;        if (len1 <= 1)         break outer;      }      a[dest++]=a[cursor2++];      if (--len2 == 0)       break outer;      count2=gallopLeft(tmp[cursor1],a,cursor2,len2,0,c);      if (count2 != 0) {        System.arraycopy(a,cursor2,a,dest,count2);        dest+=count2;        cursor2+=count2;        len2-=count2;        if (len2 == 0)         break outer;      }      a[dest++]=tmp[cursor1++];      if (--len1 == 1)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len1 == 1) {    if (DEBUG)     assert len2 > 0;    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];  } else   if (len1 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len2 == 0;    if (DEBUG)     assert len1 > 1;    System.arraycopy(tmp,cursor1,a,dest,len1);  }}  }
class C{  public void writeSortTempFile(Object[][] records) throws CarbonSortKeyAndGroupByException {  ByteArrayOutputStream blockDataArray=null;  DataOutputStream dataOutputStream=null;  int totalSize=0;  int recordSize=0;  try {    recordSize=(measureCount * CarbonCommonConstants.DOUBLE_SIZE_IN_BYTE) + (dimensionCount * CarbonCommonConstants.INT_SIZE_IN_BYTE);    totalSize=records.length * recordSize;    blockDataArray=new ByteArrayOutputStream(totalSize);    dataOutputStream=new DataOutputStream(blockDataArray);    writeDataOutputStream(records,dataOutputStream,measureCount,dimensionCount,noDictionaryCount,complexDimensionCount);    stream.writeInt(records.length);    byte[] byteArray=blockDataArray.toByteArray();    stream.writeInt(byteArray.length);    stream.write(byteArray);  } catch (  IOException e) {    throw new CarbonSortKeyAndGroupByException(e);  } finally {    CarbonUtil.closeStreams(blockDataArray);    CarbonUtil.closeStreams(dataOutputStream);  }}  }
class C{  public Object clone(){  return new AbstractDataSource(sourcename);}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:43.468 -0500",hash_original_method="9FDE6314AF63D7F1DD1D0AE258CFAA9B",hash_generated_method="CEF177E2B1177F4D9C650F330300EDD2") public StatusLine parseSIPStatusLine(String statusLine) throws ParseException {  statusLine+="\n";  return new StatusLineParser(statusLine).parse();}  }
class C{  public OptionalInt executeIfAbsent(Runnable action){  if (!isPresent())   action.run();  return this;}  }
class C{  @Reference(title="Fast and accurate computation of binomial probabilities",authors="C. Loader",booktitle="",url="http://projects.scipy.org/scipy/raw-attachment/ticket/620/loader2000Fast.pdf") private static double devianceTerm(double x,double np){  if (Math.abs(x - np) < 0.1 * (x + np)) {    final double v=(x - np) / (x + np);    double s=(x - np) * v;    double ej=2.0d * x * v;    for (int j=1; ; j++) {      ej*=v * v;      final double s1=s + ej / (2 * j + 1);      if (s1 == s) {        return s1;      }      s=s1;    }  }  return x * Math.log(x / np) + np - x;}  }
class C{  private Node rotateLeft(Node x){  Node y=x.right;  x.right=y.left;  y.left=x;  y.size=x.size;  x.size=1 + size(x.left) + size(x.right);  x.height=1 + Math.max(height(x.left),height(x.right));  y.height=1 + Math.max(height(y.left),height(y.right));  return y;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:40:20.072 -0400",hash_original_method="A6C7BF5F295A95BA9C2B4CB01496A965",hash_generated_method="FA8FF5DEEDE51E75FA508466CB231594") public void show(IBinder windowToken){  final MenuBuilder menu=mMenu;  final AlertDialog.Builder builder=new AlertDialog.Builder(menu.getContext());  mPresenter=new ListMenuPresenter(builder.getContext(),com.android.internal.R.layout.list_menu_item_layout);  mPresenter.setCallback(this);  mMenu.addMenuPresenter(mPresenter);  builder.setAdapter(mPresenter.getAdapter(),this);  final View headerView=menu.getHeaderView();  if (headerView != null) {    builder.setCustomTitle(headerView);  } else {    builder.setIcon(menu.getHeaderIcon()).setTitle(menu.getHeaderTitle());  }  builder.setOnKeyListener(this);  mDialog=builder.create();  mDialog.setOnDismissListener(this);  WindowManager.LayoutParams lp=mDialog.getWindow().getAttributes();  lp.type=WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG;  if (windowToken != null) {    lp.token=windowToken;  }  lp.flags|=WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM;  mDialog.show();}  }
class C{  protected void expandParentAndReceiver(){  TreeStateNode parent=(TreeStateNode)getParent();  if (parent != null)   parent.expandParentAndReceiver();  expand();}  }
class C{  private JobDefinitionParameterEntity updateParameter(JobDefinitionParameterEntity parameter){  JobDefinitionParameterEntity parameterToUpdate=null;  if (parameters != null) {    for (    JobDefinitionParameterEntity existingParameter : parameters) {      if (existingParameter.getName().equalsIgnoreCase(parameter.getName())) {        parameterToUpdate=existingParameter;        break;      }    }  }  if (parameterToUpdate == null) {    parameterToUpdate=parameter;    parameterToUpdate.setJobDefinition(this);  }  parameterToUpdate.setName(parameter.getName());  parameterToUpdate.setValue(parameter.getValue());  return parameterToUpdate;}  }
class C{  @Override public Connection createConnection(final String userName,final String password) throws JMSException {  if (ActiveMQRAConnectionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("createConnection(" + userName + ", ****)");  }  ActiveMQRASessionFactoryImpl s=new ActiveMQRASessionFactoryImpl(mcf,cm,getResourceAdapter().getTM(),ActiveMQRAConnectionFactory.CONNECTION);  s.setUserName(userName);  s.setPassword(password);  validateUser(s);  if (ActiveMQRAConnectionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("Created connection: " + s);  }  return s;}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  JdbcPreparedStatement(JdbcConnection conn,String sql){  super(conn);  this.sql=sql;  argsCnt=sql.replaceAll("[^?]","").length();}  }
class C{  @NotNull private static String adjustHttpUrlForSettings(@NotNull String url){  String prefix="https";  if (url.startsWith(prefix)) {    return "http" + url.substring(prefix.length());  }  return url;}  }
class C{  public JarInputStream(InputStream in) throws IOException {  this(in,true);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case FunctionblockPackage.CONFIGURATION__PROPERTIES:    return ((InternalEList<?>)getProperties()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void addNode(String sName,int nCardinality) throws Exception {  addNode(sName,nCardinality,100 + getNrOfNodes() * 10,100 + getNrOfNodes() * 10);}  }
class C{  public synchronized boolean logOut(){  if (!isLoggedIn()) {    return false;  }  mAuthenticationResult.clear();  mAuthenticationResult=null;  EvernoteUtil.removeAllCookies(getApplicationContext());  return true;}  }
class C{  public boolean hasName(){  return getName() != null;}  }
class C{  public DtlsCorrelationContext(String sessionId,String epoch,String cipher){  if (sessionId == null) {    throw new NullPointerException("Session ID must not be null");  } else   if (epoch == null) {    throw new NullPointerException("Epoch must not be null");  } else   if (cipher == null) {    throw new NullPointerException("Cipher must not be null");  } else {    put(KEY_SESSION_ID,sessionId);    put(KEY_EPOCH,epoch);    put(KEY_CIPHER,cipher);  }}  }
class C{  @Override public void writeTo(OutputStream os,String[] ignoreList) throws IOException, MessagingException {  getWrappedMessage().writeTo(os,ignoreList);}  }
class C{  @Override public String toString(){  return Base64.encodeToString(getConfidentialityKey().getEncoded(),BASE64_FLAGS) + ":" + Base64.encodeToString(getIntegrityKey().getEncoded(),BASE64_FLAGS);}  }
class C{  @Override public Value sample(Assignment condition){  double prob=getProb(condition);  if (sampler.nextDouble() < prob) {    return ValueFactory.create(true);  } else {    return ValueFactory.create(false);  }}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public static String arraytoString(String[] Strs){  if (Strs == null) {    return null;  }  StringBuilder s=new StringBuilder();  for (int ii=0; ii < Strs.length; ii++) {    if (ii == Strs.length - 1) {      s.append("'");      s.append(Strs[ii]);      s.append("'");    } else {      s.append("'");      s.append(Strs[ii]);      s.append("'");      s.append(",");    }  }  return s.toString();}  }
class C{  @Override public void onConnectionFailed(Throwable ex){  setDelegatingRequests(true);  setDelegatingResponses(true);  super.onConnectionFailed(ex);}  }
class C{  protected void sequence_TStructMemberList_ThisTypeRefStructural_TypeRefWithModifiers_TypeRefWithoutModifiers(ISerializationContext context,ThisTypeRefStructural semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Deprecated public SimpleTriggerImpl(String name,String group,Date startTime,Date endTime,int repeatCount,long repeatInterval){  super(name,group);  setStartTime(startTime);  setEndTime(endTime);  setRepeatCount(repeatCount);  setRepeatInterval(repeatInterval);}  }
class C{  @Command(aliases="cycle",description="Cycles to the next map") public static void cycle(CommandContext cmd,@Optional Integer time,@Optional LoadedMap map){  if (time == null) {    time=30;  }  time*=20;  MatchThread matchThread=Cardinal.getMatchThread(cmd.getSender());  if (map != null) {    Cardinal.getModule(CycleModule.class).getNextCycle(Cardinal.getMatchThread(cmd.getSender())).setMap(map);  }  CycleCountdown countdown=Cardinal.getModule(CountdownModule.class).getCycleCountdown(matchThread);  countdown.setTime(time);  countdown.setCancelled(false);}  }
class C{  protected void loadParametersForGene(EvolutionState state,int index,Parameter base,Parameter def,String postfix){  super.loadParametersForGene(state,index,base,def,postfix);  String mtype=state.parameters.getStringWithDefault(base.push(P_MUTATIONTYPE).push(postfix),def.push(P_MUTATIONTYPE).push(postfix),null);  if (mtype == null) {  } else   if (mtype.equalsIgnoreCase(V_RESET_MUTATION))   mutationType[index]=C_RESET_MUTATION; else   if (mtype.equalsIgnoreCase(V_FLIP_MUTATION))   mutationType[index]=C_FLIP_MUTATION; else   state.output.fatal("BitVectorSpecies given a bad mutation type: " + mtype,base.push(P_MUTATIONTYPE).push(postfix),def.push(P_MUTATIONTYPE).push(postfix));}  }
class C{  public void merge(Rectangle rect){  float minX=Math.min(x,rect.x);  float maxX=Math.max(x + width,rect.x + rect.width);  x=minX;  width=maxX - minX;  float minY=Math.min(y,rect.y);  float maxY=Math.max(y + height,rect.y + rect.height);  y=minY;  height=maxY - minY;}  }
class C{  public static Scale scale(int scale){  return new Scale(scale);}  }
class C{  Item newNameTypeItem(final String name,final String desc){  key2.set(NAME_TYPE,name,desc,null);  Item result=get(key2);  if (result == null) {    put122(NAME_TYPE,newUTF8(name),newUTF8(desc));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  public DuplicatePropertyKeyException(){  super("Connection Property has at least one duplicate key.");}  }
class C{  private static Path renameToVanillaNetherOrEnd(Path worldContainer,Path oldWorldPath,Path worldPath){  final String newName=getVanillaNetherOrEndName(oldWorldPath);  final Path newWorldPath=worldContainer.resolve(newName);  if (isValidBukkitNetherOrEnd(worldContainer,oldWorldPath)) {    if (Files.notExists(worldContainer.resolve(newName))) {      return newWorldPath;    }  }  return worldPath;}  }
class C{  public IntHolder(int initialVal){  if (initialVal < 0)   throw new RuntimeException("negative number");  mValue=initialVal;}  }
class C{  public Map<Integer,EnumInfo> enumMap(){  return distributedTypeRegistry.enums();}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public static double clampDouble(double value,double min,double max){  return value < min ? min : (value > max ? max : value);}  }
class C{  public boolean canEncode(char ch){  return getEncoder(ch) != null;}  }
class C{  @Override public boolean isStorageProductLicensed(LicenseType licenseType){  if (PlatformUtils.isOssBuild()) {    return true;  }  return (getLicenseInfo(licenseType) != null);}  }
class C{  public static Map ordinalMap(Iterator tuples,String field){  return ordinalMap(tuples,field,DefaultLiteralComparator.getInstance());}  }
class C{  public Boolean isShellAccess(){  return shellAccess;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.ANNOTABLE_PROPERTY_ASSIGNMENT__ANNOTATION_LIST:    return basicSetAnnotationList(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public RequestAnnounce(final Deserializer deserializer){  this.data=deserializer.readBytes("data");  this.signature=deserializer.readBytes("signature");}  }
class C{  public boolean isFileSize(){  return fileSize;}  }
class C{  private GridCacheAdapter<IgfsBlockKey,byte[]> cache(UUID nodeId){  return (GridCacheAdapter<IgfsBlockKey,byte[]>)((IgniteEx)G.ignite(nodeId)).cachex(DATA_CACHE_NAME).<IgfsBlockKey,byte[]>cache();}  }
class C{  private static String valueToString(Object value){  String toString;  try {    toString=DefaultGroovyMethods.toString(value);  } catch (  Exception e) {    return String.format("%s (toString() threw %s)",javaLangObjectToString(value),e.getClass().getName());  }  if (toString == null) {    return String.format("%s (toString() == null)",javaLangObjectToString(value));  }  if (toString.equals("")) {    if (hasStringLikeType(value))     return "\"\"";    return String.format("%s (toString() == \"\")",javaLangObjectToString(value));  }  return toString;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public ReturnOp(AST source,Register operand){  super(source,"return");  this.operand=operand.getIndex();}  }
class C{  private static int parseHdlr(ParsableByteArray hdlr){  hdlr.setPosition(Atom.FULL_HEADER_SIZE + 4);  return hdlr.readInt();}  }
class C{  public boolean mouseDragged(MouseEvent e){  return false;}  }
class C{  protected final void clearSerializationCaches(){  try {    clearSerializationCache(Class.forName("java.io.ObjectInputStream$Caches"),"subclassAudits");    clearSerializationCache(Class.forName("java.io.ObjectOutputStream$Caches"),"subclassAudits");    clearSerializationCache(Class.forName("java.io.ObjectStreamClass$Caches"),"localDescs");    clearSerializationCache(Class.forName("java.io.ObjectStreamClass$Caches"),"reflectors");  } catch (  ClassNotFoundException e) {    if (log.isDebugEnabled())     log.debug("Class not found: " + e.getMessage());  }catch (  NoSuchFieldException e) {    if (log.isDebugEnabled())     log.debug("Field not found: " + e.getMessage());  }catch (  IllegalAccessException e) {    if (log.isDebugEnabled())     log.debug("Field can't be accessed: " + e.getMessage());  }}  }
class C{  public boolean interiorContains(double p){  if (p == -S2.M_PI) {    p=S2.M_PI;  }  if (isInverted()) {    return p > lo() || p < hi();  } else {    return (p > lo() && p < hi()) || isFull();  }}  }
class C{  @Override protected void onPostExecute(Void result){  if (mActivity.isFinishing()) {    return;  }  if (mProgressDialog != null && mProgressDialog.isShowing()) {    mProgressDialog.dismiss();  }  if (mPostExecuteTask != null) {    mPostExecuteTask.run();  }}  }
class C{  public void restoreState(){  super.restoreState();  updateIntermediates=true;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  public boolean isValid(){  if (!_parameters.hasParameter("required") && !_parameters.hasParameter("optional")) {    _log.warn("One of 'required' or 'optional' parameters must be present.");    return false;  }  Iterator it=_parameters.getParameters().iterator();  while (it.hasNext()) {    String paramName=((Parameter)it.next()).getKey();    if (!paramName.equals("required") && !paramName.equals("optional") && !paramName.equals("policy_url")) {      _log.warn("Invalid parameter name in SReg request: " + paramName);    }  }  return true;}  }
class C{  static double stirlingFormula(double x) throws ArithmeticException {  double STIR[]={7.87311395793093628397E-4,-2.29549961613378126380E-4,-2.68132617805781232825E-3,3.47222221605458667310E-3,8.33333333333482257126E-2};  double MAXSTIR=143.01608;  double w=1.0 / x;  double y=Math.exp(x);  w=1.0 + w * Polynomial.polevl(w,STIR,4);  if (x > MAXSTIR) {    double v=Math.pow(x,0.5 * x - 0.25);    y=v * (v / y);  } else {    y=Math.pow(x,x - 0.5) / y;  }  y=SQTPI * y * w;  return y;}  }
class C{  @Override public boolean onScaleBegin(ScaleGestureDetector detector){  return true;}  }
class C{  public DetectorResult detect() throws NotFoundException {  ResultPoint[] cornerPoints=rectangleDetector.detect();  ResultPoint pointA=cornerPoints[0];  ResultPoint pointB=cornerPoints[1];  ResultPoint pointC=cornerPoints[2];  ResultPoint pointD=cornerPoints[3];  List<ResultPointsAndTransitions> transitions=new ArrayList<>(4);  transitions.add(transitionsBetween(pointA,pointB));  transitions.add(transitionsBetween(pointA,pointC));  transitions.add(transitionsBetween(pointB,pointD));  transitions.add(transitionsBetween(pointC,pointD));  Collections.sort(transitions,new ResultPointsAndTransitionsComparator());  ResultPointsAndTransitions lSideOne=transitions.get(0);  ResultPointsAndTransitions lSideTwo=transitions.get(1);  Map<ResultPoint,Integer> pointCount=new HashMap<>();  increment(pointCount,lSideOne.getFrom());  increment(pointCount,lSideOne.getTo());  increment(pointCount,lSideTwo.getFrom());  increment(pointCount,lSideTwo.getTo());  ResultPoint maybeTopLeft=null;  ResultPoint bottomLeft=null;  ResultPoint maybeBottomRight=null;  for (  Map.Entry<ResultPoint,Integer> entry : pointCount.entrySet()) {    ResultPoint point=entry.getKey();    Integer value=entry.getValue();    if (value == 2) {      bottomLeft=point;    } else {      if (maybeTopLeft == null) {        maybeTopLeft=point;      } else {        maybeBottomRight=point;      }    }  }  if (maybeTopLeft == null || bottomLeft == null || maybeBottomRight == null) {    throw NotFoundException.getNotFoundInstance();  }  ResultPoint[] corners={maybeTopLeft,bottomLeft,maybeBottomRight};  ResultPoint.orderBestPatterns(corners);  ResultPoint bottomRight=corners[0];  bottomLeft=corners[1];  ResultPoint topLeft=corners[2];  ResultPoint topRight;  if (!pointCount.containsKey(pointA)) {    topRight=pointA;  } else   if (!pointCount.containsKey(pointB)) {    topRight=pointB;  } else   if (!pointCount.containsKey(pointC)) {    topRight=pointC;  } else {    topRight=pointD;  }  int dimensionTop=transitionsBetween(topLeft,topRight).getTransitions();  int dimensionRight=transitionsBetween(bottomRight,topRight).getTransitions();  if ((dimensionTop & 0x01) == 1) {    dimensionTop++;  }  dimensionTop+=2;  if ((dimensionRight & 0x01) == 1) {    dimensionRight++;  }  dimensionRight+=2;  BitMatrix bits;  ResultPoint correctedTopRight;  if (4 * dimensionTop >= 7 * dimensionRight || 4 * dimensionRight >= 7 * dimensionTop) {    correctedTopRight=correctTopRightRectangular(bottomLeft,bottomRight,topLeft,topRight,dimensionTop,dimensionRight);    if (correctedTopRight == null) {      correctedTopRight=topRight;    }    dimensionTop=transitionsBetween(topLeft,correctedTopRight).getTransitions();    dimensionRight=transitionsBetween(bottomRight,correctedTopRight).getTransitions();    if ((dimensionTop & 0x01) == 1) {      dimensionTop++;    }    if ((dimensionRight & 0x01) == 1) {      dimensionRight++;    }    bits=sampleGrid(image,topLeft,bottomLeft,bottomRight,correctedTopRight,dimensionTop,dimensionRight);  } else {    int dimension=Math.min(dimensionRight,dimensionTop);    correctedTopRight=correctTopRight(bottomLeft,bottomRight,topLeft,topRight,dimension);    if (correctedTopRight == null) {      correctedTopRight=topRight;    }    int dimensionCorrected=Math.max(transitionsBetween(topLeft,correctedTopRight).getTransitions(),transitionsBetween(bottomRight,correctedTopRight).getTransitions());    dimensionCorrected++;    if ((dimensionCorrected & 0x01) == 1) {      dimensionCorrected++;    }    bits=sampleGrid(image,topLeft,bottomLeft,bottomRight,correctedTopRight,dimensionCorrected,dimensionCorrected);  }  return new DetectorResult(bits,new ResultPoint[]{topLeft,bottomLeft,bottomRight,correctedTopRight});}  }
class C{  public Class<?> findClass(String className,ObjectName aLoader) throws ReflectionException, InstanceNotFoundException {  if (aLoader == null)   throw new RuntimeOperationsException(new IllegalArgumentException(),"Null loader passed in parameter");  ClassLoader loader=null;synchronized (this) {    loader=getClassLoader(aLoader);  }  if (loader == null) {    throw new InstanceNotFoundException("The loader named " + aLoader + " is not registered in the MBeanServer");  }  return findClass(className,loader);}  }
class C{  public NavigationCommand(String command){  super(command);}  }
class C{  protected int decodeLinePrefix(PushbackInputStream inStream,OutputStream outStream) throws IOException {  int c;  c=inStream.read();  if (c == ' ') {    c=inStream.read();    c=inStream.read();    if ((c != '\n') && (c != -1))     inStream.unread(c);    throw new CEStreamExhausted();  } else   if (c == -1) {    throw new CEFormatException("UUDecoder: Short Buffer.");  }  c=(c - ' ') & 0x3f;  if (c > bytesPerLine()) {    throw new CEFormatException("UUDecoder: Bad Line Length.");  }  return (c);}  }
class C{  @Override public void run(){  amIActive=true;  String pointerHeader, loadingHeader, efficiencyHeader, absorptionHeader, outputHeader;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i, c;  double numInNeighbours;  boolean flag=false;  double flowDir;  efficiencyMultiplier=1d;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  pointerHeader=args[0];  loadingHeader=args[1];  efficiencyHeader=args[2];  absorptionHeader=args[3];  outputHeader=args[4];  if (pointerHeader.isEmpty() || outputHeader.isEmpty() || loadingHeader.isEmpty()|| efficiencyHeader.isEmpty()|| absorptionHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointer=new WhiteboxRaster(pointerHeader,"r");    int rows=pointer.getNumberRows();    int cols=pointer.getNumberColumns();    noData=pointer.getNoDataValue();    gridRes=pointer.getCellSizeX();    WhiteboxRaster loading=new WhiteboxRaster(loadingHeader,"r");    if (loading.getNumberRows() != rows || loading.getNumberColumns() != cols) {      showFeedback("Each of the input images must have the same dimensions.");      return;    }    double noDataLoading=loading.getNoDataValue();    efficiency=new WhiteboxRaster(efficiencyHeader,"r");    if (efficiency.getNumberRows() != rows || efficiency.getNumberColumns() != cols) {      showFeedback("Each of the input images must have the same dimensions.");      return;    }    double noDataEfficiency=efficiency.getNoDataValue();    if (efficiency.getMaximumValue() > 1) {      efficiencyMultiplier=0.01;    }    absorption=new WhiteboxRaster(absorptionHeader,"r");    if (absorption.getNumberRows() != rows || absorption.getNumberColumns() != cols) {      showFeedback("Each of the input images must have the same dimensions.");      return;    }    double noDataAbsorption=absorption.getNoDataValue();    double outputNoData=-32768.0;    output=new WhiteboxRaster(outputHeader,"rw",pointerHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    tmpGrid=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",pointerHeader,WhiteboxRaster.DataType.FLOAT,outputNoData);    tmpGrid.isTemporaryFile=true;    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        flowDir=pointer.getValue(row,col);        if (flowDir != noData && loading.getValue(row,col) != noDataLoading && efficiency.getValue(row,col) != noDataEfficiency && absorption.getValue(row,col) != noDataAbsorption) {          i=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            flowDir=pointer.getValue(y,x);            if (flowDir >= 0 && flowDir <= 360) {              if (c != 3) {                if (flowDir > startFD[c] && flowDir < endFD[c]) {                  i++;                }              } else {                if (flowDir > startFD[c] || flowDir < endFD[c]) {                  i++;                }              }            }          }          tmpGrid.setValue(row,col,i);          output.setValue(row,col,loading.getValue(row,col));        } else {          output.setValue(row,col,outputNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    loading.close();    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (tmpGrid.getValue(row,col) == 0) {          DinfAccum(row,col);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pointer.close();    efficiency.close();    absorption.close();    tmpGrid.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  public void terminateAllSessions(TerminationReason reasonCode) throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.debug("Terminate all sessions");  }  for (  ImsService service : getImsServices()) {    service.terminateAllSessions(reasonCode);  }}  }
class C{  public void putDouble(double d){  putLong(Double.doubleToLongBits(d));}  }
class C{  public void pOln(Object o) throws IOException {  pO(o.toString());  pln();}  }
class C{  @Nullable public static <T>T deserialize(Class<T> type,@Nullable byte[] objectBytes){  checkNotNull(type);  if (objectBytes == null) {    return null;  }  try {    return type.cast(new ObjectInputStream(new ByteArrayInputStream(objectBytes)).readObject());  } catch (  ClassNotFoundException|IOException e) {    throw new IllegalArgumentException("Unable to deserialize: objectBytes=" + base16().encode(objectBytes),e);  }}  }
class C{  public ModifierOperation(final String enumName,final ModifierOperationAction action){  super(enumName);  this.action=action;  this.onEnd=null;}  }
class C{  public boolean isServerObjects(){  return false;}  }
class C{  public boolean isUNSIGNED(){switch (value) {case HIGHER:case LOWER:case HIGHER_EQUAL:case LOWER_EQUAL:    return true;default :  return false;}}  }
class C{  public static Update newUpdate(DatabaseManager manager){  return new UpdateImpl(manager);}  }
class C{  public XMLSignatureInput engineResolveURI(ResourceResolverContext context) throws ResourceResolverException {  return engineResolve(context.attr,context.baseUri);}  }
class C{  public RectDrawer rotateRegistration(float regX,float regY){  setRotateRegistration(regX,regY);  return this;}  }
class C{  ComputingConcurrentHashMap(MapMaker builder,Function<? super K,? extends V> computingFunction){  super(builder);  this.computingFunction=checkNotNull(computingFunction);}  }
class C{  public void testTransitions() throws Exception {  startReplicatorManager();  try {    TungstenProperties conf=new TungstenProperties();    conf.setString(ReplicatorConf.APPLIER,applierPlugin);    conf.setString(ReplicatorConf.EXTRACTOR,extractorPlugin);    conf.setString(ReplicatorConf.THL_STORAGE,thlStoragePlugin);    conf.setString(ReplicatorConf.THL_URI,"thl://localhost/");    conf.setString(ReplicatorConf.MASTER_CONNECT_URI,"thl://localhost/");    conf.setString(ReplicatorConf.METADATA_SCHEMA,"test");    waitStatus("OFFLINE");    rmb.configure(conf.map());    rmb.online();    waitStatus("MASTER");    rmb.offline();    waitStatus("OFFLINE");    rmb.online();    waitStatus("MASTER");    rmb.offline();    waitStatus("OFFLINE");    rmb.online();    waitStatus("MASTER");    rmb.offline();    waitStatus("OFFLINE");  } catch (  Exception e) {    e.printStackTrace();    fail(e.getMessage());  }  stopReplicatorManager();}  }
class C{  public static BeanInstance findInstance(String beanName,Integer... tab){  BeanInstance found=null;  int index=0;  if (tab.length > 0) {    index=tab[0].intValue();  }  Vector<Object> components=null;  if (TABBED_COMPONENTS.size() > 0 && index < TABBED_COMPONENTS.size()) {    components=TABBED_COMPONENTS.get(index);    for (int i=0; i < components.size(); i++) {      BeanInstance t=(BeanInstance)components.elementAt(i);      if (t.getBean() instanceof BeanCommon) {        String bN=((BeanCommon)t).getCustomName();        if (bN.equals(beanName)) {          found=t;          break;        }      }    }  }  return found;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.100 -0500",hash_original_method="235414C6394F3123BE59FBE1973087EC",hash_generated_method="A0A7CEC8D23BCA2FF66D7F23CCD8D47A") public synchronized StringBuffer delete(int start,int end){  delete0(start,end);  return this;}  }
class C{  protected int[] determineIndices(int numAttributes) throws Exception {  int[] result;  Vector<Integer> list;  int i;  StringTokenizer tok;  String token;  String[] range;  int from;  int to;  list=new Vector<Integer>();  tok=new StringTokenizer(m_NewOrderCols,",");  while (tok.hasMoreTokens()) {    token=tok.nextToken();    if (token.indexOf("-") > -1) {      range=token.split("-");      if (range.length != 2) {        throw new IllegalArgumentException("'" + token + "' is not a valid range!");      }      from=determineIndex(range[0],numAttributes);      to=determineIndex(range[1],numAttributes);      if (from <= to) {        for (i=from; i <= to; i++) {          list.add(i);        }      } else {        for (i=from; i >= to; i--) {          list.add(i);        }      }    } else {      list.add(determineIndex(token,numAttributes));    }  }  result=new int[list.size()];  for (i=0; i < list.size(); i++) {    result[i]=list.get(i);  }  return result;}  }
class C{  public String fromBase64(String toDecode){  try {    byte[] bytes=Base64.decodeBase64(toDecode.trim());    return new String(bytes,Charset.forName("utf-8"));  } catch (  Exception e) {    LOG.error("Error base64 decoding " + toDecode + ": "+ e);  }  return toDecode;}  }
class C{  public void addCommandToRightBar(Command cmd){  checkIfInitialized();  cmd.putClientProperty("TitleCommand",Boolean.TRUE);  sideMenu.addCommand(cmd,0);}  }
class C{  private void generateJava() throws Exception {  long t1, t2, t3, t4;  t1=t2=t3=t4=0;  if (log.isLoggable(Level.FINE)) {    t1=System.currentTimeMillis();  }  pageInfo=new PageInfo(new BeanRepository(ctxt.getClassLoader(),errDispatcher),ctxt.getJspFile());  JspConfig jspConfig=options.getJspConfig();  JspProperty jspProperty=jspConfig.findJspProperty(ctxt.getJspFile());  pageInfo.setELIgnored(JspUtil.booleanValue(jspProperty.isELIgnored()));  pageInfo.setScriptingInvalid(JspUtil.booleanValue(jspProperty.isScriptingInvalid()));  pageInfo.setTrimDirectiveWhitespaces(JspUtil.booleanValue(jspProperty.getTrimSpaces()));  pageInfo.setDeferredSyntaxAllowedAsLiteral(JspUtil.booleanValue(jspProperty.getPoundAllowed()));  pageInfo.setErrorOnUndeclaredNamespace(JspUtil.booleanValue(jspProperty.errorOnUndeclaredNamespace()));  if (jspProperty.getIncludePrelude() != null) {    pageInfo.setIncludePrelude(jspProperty.getIncludePrelude());  }  if (jspProperty.getIncludeCoda() != null) {    pageInfo.setIncludeCoda(jspProperty.getIncludeCoda());  }  if (options.isDefaultBufferNone() && pageInfo.getBufferValue() == null) {    pageInfo.setBuffer(0);  }  String javaFileName=ctxt.getServletJavaFileName();  ServletWriter writer=null;  try {    Writer javaWriter=javaCompiler.getJavaWriter(javaFileName,ctxt.getOptions().getJavaEncoding());    writer=new ServletWriter(new PrintWriter(javaWriter));    ctxt.setWriter(writer);    JspUtil.resetTemporaryVariableName();    ParserController parserCtl=new ParserController(ctxt,this);    pageNodes=parserCtl.parse(ctxt.getJspFile());    if (ctxt.isPrototypeMode()) {      Generator.generate(writer,this,pageNodes);      writer.close();      writer=null;      return;    }    Validator.validate(this,pageNodes);    if (log.isLoggable(Level.FINE)) {      t2=System.currentTimeMillis();    }    Collector.collect(this,pageNodes);    tfp=new TagFileProcessor();    tfp.loadTagFiles(this,pageNodes);    if (log.isLoggable(Level.FINE)) {      t3=System.currentTimeMillis();    }    ScriptingVariabler.set(pageNodes,errDispatcher);    TagPluginManager tagPluginManager=options.getTagPluginManager();    tagPluginManager.apply(pageNodes,errDispatcher,pageInfo);    TextOptimizer.concatenate(this,pageNodes);    ELFunctionMapper.map(this,pageNodes);    Generator.generate(writer,this,pageNodes);    writer.close();    writer=null;    ctxt.setWriter(null);    if (log.isLoggable(Level.FINE)) {      t4=System.currentTimeMillis();      log.fine("Generated " + javaFileName + " total="+ (t4 - t1)+ " generate="+ (t4 - t3)+ " validate="+ (t2 - t1));    }  } catch (  Exception e) {    if (writer != null) {      try {        writer.close();        writer=null;      } catch (      Exception e1) {      }    }    javaCompiler.doJavaFile(false);    throw e;  } finally {    if (writer != null) {      try {        writer.close();      } catch (      Exception e2) {      }    }  }  if (!options.isSmapSuppressed()) {    smapUtil.generateSmap(pageNodes);  }  tfp.removeProtoTypeFiles(ctxt.getClassFileName());}  }
class C{  public static TempBuffer createLarge(){  return new TempBuffer(TempBuffers.createLarge());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public _QueueStatus(final String[] flagStrings){  super(flagStrings);}  }
class C{  public static double dot(final double x1,final double y1,final double z1,final double x2,final double y2,final double z2){  return (x1 * x2 + y1 * y2 + z1 * z2);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Client(CnATreeElement parent){  super(parent);  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());  if (getLog().isDebugEnabled()) {    getLog().debug("Client Kuerzel: " + getKuerzel());  }  setTitel(getTypeFactory().getMessage(TYPE_ID));}  }
class C{  public boolean isInRange(double value){  return (value >= min && value <= max);}  }
class C{  public void randomizeBuffer(){  setBuffer(getUpdateRule().getRandomValue());}  }
class C{  @Override public boolean isOverloaded(){  return packetInThrottleEnabled;}  }
class C{  public void requestValidation(){  this.needsValidation=true;}  }
class C{  public DbSchemaChanger(String className) throws Exception {  this.className=className;  pool=ClassPool.getDefault();  cc=pool.getCtClass(className);  String classFileName=cc.getURL().getFile();  classFile=new File(classFileName);  log.info("The class file:{}  package:{}",classFileName,cc.getPackageName());}  }
class C{  public static boolean isMetric(Context context){  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);  return prefs.getString(context.getString(R.string.pref_units_key),context.getString(R.string.pref_units_metric)).equals(context.getString(R.string.pref_units_metric));}  }
class C{  public void drawVerticalItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column){  BoxAndWhiskerCategoryDataset bawDataset=(BoxAndWhiskerCategoryDataset)dataset;  double categoryEnd=domainAxis.getCategoryEnd(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());  double categoryStart=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());  double categoryWidth=categoryEnd - categoryStart;  double xx=categoryStart;  int seriesCount=getRowCount();  int categoryCount=getColumnCount();  if (seriesCount > 1) {    double seriesGap=dataArea.getWidth() * getItemMargin() / (categoryCount * (seriesCount - 1));    double usedWidth=(state.getBarWidth() * seriesCount) + (seriesGap * (seriesCount - 1));    double offset=(categoryWidth - usedWidth) / 2;    xx=xx + offset + (row * (state.getBarWidth() + seriesGap));  } else {    double offset=(categoryWidth - state.getBarWidth()) / 2;    xx=xx + offset;  }  double yyAverage;  double yyOutlier;  Paint itemPaint=getItemPaint(row,column);  g2.setPaint(itemPaint);  Stroke s=getItemStroke(row,column);  g2.setStroke(s);  double aRadius=0;  RectangleEdge location=plot.getRangeAxisEdge();  Number yQ1=bawDataset.getQ1Value(row,column);  Number yQ3=bawDataset.getQ3Value(row,column);  Number yMax=bawDataset.getMaxRegularValue(row,column);  Number yMin=bawDataset.getMinRegularValue(row,column);  Shape box=null;  if (yQ1 != null && yQ3 != null && yMax != null && yMin != null) {    double yyQ1=rangeAxis.valueToJava2D(yQ1.doubleValue(),dataArea,location);    double yyQ3=rangeAxis.valueToJava2D(yQ3.doubleValue(),dataArea,location);    double yyMax=rangeAxis.valueToJava2D(yMax.doubleValue(),dataArea,location);    double yyMin=rangeAxis.valueToJava2D(yMin.doubleValue(),dataArea,location);    double xxmid=xx + state.getBarWidth() / 2.0;    double halfW=(state.getBarWidth() / 2.0) * this.whiskerWidth;    box=new Rectangle2D.Double(xx,Math.min(yyQ1,yyQ3),state.getBarWidth(),Math.abs(yyQ1 - yyQ3));    if (this.fillBox) {      g2.fill(box);    }    Paint outlinePaint=getItemOutlinePaint(row,column);    if (this.useOutlinePaintForWhiskers) {      g2.setPaint(outlinePaint);    }    g2.draw(new Line2D.Double(xxmid,yyMax,xxmid,yyQ3));    g2.draw(new Line2D.Double(xxmid - halfW,yyMax,xxmid + halfW,yyMax));    g2.draw(new Line2D.Double(xxmid,yyMin,xxmid,yyQ1));    g2.draw(new Line2D.Double(xxmid - halfW,yyMin,xxmid + halfW,yyMin));    g2.setStroke(getItemOutlineStroke(row,column));    g2.setPaint(outlinePaint);    g2.draw(box);  }  g2.setPaint(this.artifactPaint);  if (this.meanVisible) {    Number yMean=bawDataset.getMeanValue(row,column);    if (yMean != null) {      yyAverage=rangeAxis.valueToJava2D(yMean.doubleValue(),dataArea,location);      aRadius=state.getBarWidth() / 4;      if ((yyAverage > (dataArea.getMinY() - aRadius)) && (yyAverage < (dataArea.getMaxY() + aRadius))) {        Ellipse2D.Double avgEllipse=new Ellipse2D.Double(xx + aRadius,yyAverage - aRadius,aRadius * 2,aRadius * 2);        g2.fill(avgEllipse);        g2.draw(avgEllipse);      }    }  }  if (this.medianVisible) {    Number yMedian=bawDataset.getMedianValue(row,column);    if (yMedian != null) {      double yyMedian=rangeAxis.valueToJava2D(yMedian.doubleValue(),dataArea,location);      g2.draw(new Line2D.Double(xx,yyMedian,xx + state.getBarWidth(),yyMedian));    }  }  double maxAxisValue=rangeAxis.valueToJava2D(rangeAxis.getUpperBound(),dataArea,location) + aRadius;  double minAxisValue=rangeAxis.valueToJava2D(rangeAxis.getLowerBound(),dataArea,location) - aRadius;  g2.setPaint(itemPaint);  double oRadius=state.getBarWidth() / 3;  List outliers=new ArrayList();  OutlierListCollection outlierListCollection=new OutlierListCollection();  List yOutliers=bawDataset.getOutliers(row,column);  if (yOutliers != null) {    for (int i=0; i < yOutliers.size(); i++) {      double outlier=((Number)yOutliers.get(i)).doubleValue();      Number minOutlier=bawDataset.getMinOutlier(row,column);      Number maxOutlier=bawDataset.getMaxOutlier(row,column);      Number minRegular=bawDataset.getMinRegularValue(row,column);      Number maxRegular=bawDataset.getMaxRegularValue(row,column);      if (outlier > maxOutlier.doubleValue()) {        outlierListCollection.setHighFarOut(true);      } else       if (outlier < minOutlier.doubleValue()) {        outlierListCollection.setLowFarOut(true);      } else       if (outlier > maxRegular.doubleValue()) {        yyOutlier=rangeAxis.valueToJava2D(outlier,dataArea,location);        outliers.add(new Outlier(xx + state.getBarWidth() / 2.0,yyOutlier,oRadius));      } else       if (outlier < minRegular.doubleValue()) {        yyOutlier=rangeAxis.valueToJava2D(outlier,dataArea,location);        outliers.add(new Outlier(xx + state.getBarWidth() / 2.0,yyOutlier,oRadius));      }      Collections.sort(outliers);    }    for (Iterator iterator=outliers.iterator(); iterator.hasNext(); ) {      Outlier outlier=(Outlier)iterator.next();      outlierListCollection.add(outlier);    }    for (Iterator iterator=outlierListCollection.iterator(); iterator.hasNext(); ) {      OutlierList list=(OutlierList)iterator.next();      Outlier outlier=list.getAveragedOutlier();      Point2D point=outlier.getPoint();      if (list.isMultiple()) {        drawMultipleEllipse(point,state.getBarWidth(),oRadius,g2);      } else {        drawEllipse(point,oRadius,g2);      }    }    if (outlierListCollection.isHighFarOut()) {      drawHighFarOut(aRadius / 2.0,g2,xx + state.getBarWidth() / 2.0,maxAxisValue);    }    if (outlierListCollection.isLowFarOut()) {      drawLowFarOut(aRadius / 2.0,g2,xx + state.getBarWidth() / 2.0,minAxisValue);    }  }  if (state.getInfo() != null && box != null) {    EntityCollection entities=state.getEntityCollection();    if (entities != null) {      addItemEntity(entities,dataset,row,column,box);    }  }}  }
class C{  private void roundtrip(String hs){  convert(hs,hs);}  }
class C{  private synchronized void handleServiceConnectionError(LicenseValidator validator){  mPolicy.processServerResponse(Policy.RETRY,null);  if (mPolicy.allowAccess()) {    validator.getCallback().allow(Policy.RETRY);  } else {    validator.getCallback().dontAllow(Policy.RETRY);  }}  }
class C{  protected static boolean typeCheckMethodArgumentWithGenerics(ClassNode parameterType,ClassNode argumentType,boolean lastArg){  if (UNKNOWN_PARAMETER_TYPE == argumentType) {    return !isPrimitiveType(parameterType);  }  if (!isAssignableTo(argumentType,parameterType) && !lastArg) {    return false;  }  if (!isAssignableTo(argumentType,parameterType) && lastArg) {    if (parameterType.isArray()) {      if (!isAssignableTo(argumentType,parameterType.getComponentType())) {        return false;      }    } else {      return false;    }  }  if (parameterType.isUsingGenerics() && argumentType.isUsingGenerics()) {    GenericsType gt=GenericsUtils.buildWildcardType(parameterType);    if (!gt.isCompatibleWith(argumentType)) {      boolean samCoercion=isSAMType(parameterType) && argumentType.equals(CLOSURE_TYPE);      if (!samCoercion)       return false;    }  } else   if (parameterType.isArray() && argumentType.isArray()) {    return typeCheckMethodArgumentWithGenerics(parameterType.getComponentType(),argumentType.getComponentType(),lastArg);  } else   if (lastArg && parameterType.isArray()) {    return typeCheckMethodArgumentWithGenerics(parameterType.getComponentType(),argumentType,lastArg);  }  return true;}  }
class C{  public ListEntry addListEntry(ListEntry entry) throws IOException, ServiceException {  return service.insert(feedUrl,entry);}  }
class C{  @Override public String toString(){  return category + " - " + name;}  }
class C{  @Override public String globalInfo(){  return "The Pruned Sets method (PS).\n" + "Removes examples with P-infrequent labelsets from the training data, then subsamples these labelsets N time to produce N new examples with P-frequent labelsets. Then train a standard LC classifier. The idea is to reduce the number of unique class values that would otherwise need to be learned by LC. Best used in an Ensemble (e.g., EnsembleML).\n" + "For more information see:\n"+ getTechnicalInformation().toString();}  }
class C{  public static void main(String[] argv){  runClassifier(new IBk(),argv);}  }
class C{  public static cuDoubleComplex cuCmplx(double r,double i){  cuDoubleComplex res=new cuDoubleComplex();  res.x=r;  res.y=i;  return res;}  }
class C{  private synchronized MonitorNotification updateNotifications(GaugeMonitorObservedObject o){  MonitorNotification n=null;  if (o.getStatus() == RISING_OR_FALLING) {    if (isFirstGreaterThanLast((Number)o.getDerivedGauge(),highThreshold,o.getType())) {      if (notifyHigh) {        n=new MonitorNotification(THRESHOLD_HIGH_VALUE_EXCEEDED,this,0,0,"",null,null,null,highThreshold);      }      o.setStatus(FALLING);    } else     if (isFirstGreaterThanLast(lowThreshold,(Number)o.getDerivedGauge(),o.getType())) {      if (notifyLow) {        n=new MonitorNotification(THRESHOLD_LOW_VALUE_EXCEEDED,this,0,0,"",null,null,null,lowThreshold);      }      o.setStatus(RISING);    }  } else {    if (o.getStatus() == RISING) {      if (isFirstGreaterThanLast((Number)o.getDerivedGauge(),highThreshold,o.getType())) {        if (notifyHigh) {          n=new MonitorNotification(THRESHOLD_HIGH_VALUE_EXCEEDED,this,0,0,"",null,null,null,highThreshold);        }        o.setStatus(FALLING);      }    } else     if (o.getStatus() == FALLING) {      if (isFirstGreaterThanLast(lowThreshold,(Number)o.getDerivedGauge(),o.getType())) {        if (notifyLow) {          n=new MonitorNotification(THRESHOLD_LOW_VALUE_EXCEEDED,this,0,0,"",null,null,null,lowThreshold);        }        o.setStatus(RISING);      }    }  }  return n;}  }
class C{  protected BasicWWTexture initializeTexture(){  Object imageSource=this.getImageSource();  if (imageSource instanceof String || imageSource instanceof URL) {    URL imageURL=WorldWind.getDataFileStore().requestFile(imageSource.toString());    if (imageURL != null) {      this.texture=new BasicWWTexture(imageURL,true);      this.texture.setUseAnisotropy(false);    }  } else   if (imageSource != null) {    this.texture=new BasicWWTexture(imageSource,true);    return this.texture;  }  return null;}  }
class C{  protected RhythmOverlay inflateOverlayInternal(List<String> configStrings,@NonNull Map<String,String> globalVars,int offset){  int size=4;  int[] indents=new int[size];  RhythmSpecLayerParent[] parents=new RhythmSpecLayerParent[size];  int headIndex=0;  final RhythmOverlay overlay=new RhythmOverlay();  parents[0]=overlay;  indents[0]=-1;  Map<String,String> localVars=globalVars;  boolean hasLocalVars=false;  for (int i=0, lines=configStrings.size(); i < lines; i++) {    String line=configStrings.get(i);    if (isEmptyOrComment(line.trim())) {      continue;    }    final int lineNumber=i + offset;    if (line.charAt(0) == '@') {      if (overlay.size() != 0) {        throw new RhythmInflationException("Unexpected variable declaration.\nVariables must be declared before spec layers.").setLineNumber(lineNumber);      }      if (!hasLocalVars) {        localVars=new HashMap<>(globalVars);        hasLocalVars=true;      }      Matcher matcher=PATTERN_VARIABLES.matcher(line);      if (matcher.matches()) {        String name=matcher.group(1);        String value=resolveVariableInternal(localVars,matcher.group(2),lineNumber);        localVars.put(name,value);      } else {        throw new RhythmInflationException("Malformed variable declaration: \"" + line + "\".\nExpected syntax is @name=value where name may contain only letters, digits, and/or underscores.").setLineNumber(lineNumber);      }    } else     if (line.charAt(0) == '#') {      if (overlay.getTitle() != null || hasLocalVars || overlay.size() != 0) {        throw new RhythmInflationException("Unexpected overlay title.\nThere can be only one title per overlay, and it must be the first line. Did you forget an empty newline before starting a new overlay?").setLineNumber(lineNumber);      }      String title=line.substring(1).trim();      if (title.length() != 0) {        overlay.setTitle(title);      }    } else {      LayerConfig config=parseConfigInternal(line,localVars,lineNumber);      while (config.getIndent() <= indents[headIndex]) {        headIndex--;      }      RhythmSpecLayer thisLayer=inflateLayerInternal(config,lineNumber);      parents[headIndex].addLayer(thisLayer);      if (thisLayer instanceof RhythmSpecLayerParent) {        headIndex++;        if (headIndex >= size) {          int newSize=size * 2;          int[] newIndents=new int[newSize];          RhythmSpecLayerParent[] newParents=new RhythmSpecLayerParent[newSize];          System.arraycopy(indents,0,newIndents,0,size);          System.arraycopy(parents,0,newParents,0,size);          indents=newIndents;          parents=newParents;          size=newSize;        }        parents[headIndex]=(RhythmSpecLayerParent)thisLayer;        indents[headIndex]=config.getIndent();      }    }  }  if (hasLocalVars && overlay.size() == 0 && overlay.getTitle() == null) {    throw new RhythmInflationException("Unexpected variable declaration.\nGlobal variables must be declared before all overlay blocks.").setLineNumber(offset);  }  return overlay;}  }
class C{  public static String parseCharset(Map<String,String> headers){  return parseCharset(headers,HTTP.DEFAULT_CONTENT_CHARSET);}  }
class C{  @Override public void initializeFromFile(TreeIndexHeader header,PageFile<FlatRStarTreeNode> file){  super.initializeFromFile(header,file);  int nextPageID=file.getNextPageID();  dirCapacity=nextPageID;  root=createNewDirectoryNode();  for (int i=1; i < nextPageID; i++) {    FlatRStarTreeNode node=getNode(i);    root.addDirectoryEntry(createNewDirectoryEntry(node));  }  if (LOG.isDebugging()) {    LOG.debugFine("root: " + root + " with "+ nextPageID+ " leafNodes.");  }}  }
class C{  public void nextEvent(PartitionedEvent event){  this.context.counter().scope("receive_count").incr();  if (!dispatchToSortHandler(event)) {    this.context.counter().scope("direct_count").incr();    outputCollector.emit(event);  }  this.context.counter().scope("sort_count").incr();  streamTimeClockManager.onTimeUpdate(event.getStreamId(),event.getTimestamp());}  }
class C{  public EventStoreBuilder clusterNodeUnlimitedDiscoverAttempts(){  clusterNodeMaxDiscoverAttempts=-1;  return this;}  }
class C{  public GreyscaleSlopeColors(){  getColors();}  }
class C{  public void quit(){  removeAllMessages();  stop(mCurrentWorkItem);  mHandlerThread.interrupt();}  }
class C{  @Override public int size(){  try (Cursor cursor=mContext.getContentResolver().query(WeatherContract.WeatherValuesEntry.WEATHER_VALUES_CONTENT_URI,new String[]{WeatherValuesEntry._ID},null,null,null)){    return cursor.getCount();  } }  }
class C{  protected void initKey(byte[] salt){}  }
class C{  @SuppressWarnings("resource") public PaCoTrieDistributor(final Iterable<? extends T> elements,final int log2BucketSize,final TransformationStrategy<? super T> transformationStrategy) throws IOException {  this.transformationStrategy=transformationStrategy;  ProgressLogger pl=new ProgressLogger(LOGGER);  pl.displayLocalSpeed=true;  pl.displayFreeMemory=true;  pl.itemsName="keys";  PartialTrie<T> immutableBinaryTrie=new PartialTrie<T>(elements,log2BucketSize,transformationStrategy,pl);  FastByteArrayOutputStream fbStream=new FastByteArrayOutputStream();  OutputBitStream trie=new OutputBitStream(fbStream,0);  pl.start("Converting to bitstream...");  numberOfLeaves=immutableBinaryTrie.toStream(trie,pl);  pl.done();  defRetValue=-1;  LOGGER.info("Trie bit size: " + trie.writtenBits());  trie.flush();  fbStream.trim();  this.trie=fbStream.array;  if (DDEBUG) {    MutableString s=new MutableString();    recToString(new InputBitStream(this.trie),new MutableString(),s,new MutableString(),0);    System.err.println(s);  }}  }
class C{  public static boolean isSubDirectory(Path p1,Path p2){  URI relativizedUri=p1.toUri().relativize(p2.toUri());  return !relativizedUri.equals(p2.toUri());}  }
class C{  @SuppressWarnings("unchecked") public void writeStruct(Struct x) throws SQLException {  SerialStruct s=new SerialStruct(x,map);  ;  attribs.add(s);}  }
class C{  private float interpolate(float startValue,float endValue,float fraction){  if (mSizeInterpolator != null)   fraction=mSizeInterpolator.getInterpolation(fraction);  return (startValue + (fraction * (endValue - startValue)));}  }
class C{  public void handleNodeGroupMaintenance(Operation post){  post.complete();}  }
class C{  private int generatePermutationId(double[] data){  int permutationId=0;  for (int c=0; c < dimensions; c++) {    permutationId*=dimensions;    permutationId+=(int)data[c];  }  return permutationId;}  }
class C{  public void storeCredentials(String userId,UserCredentials credentials) throws IOException {  if (tokenStore == null) {    throw new IllegalStateException("Cannot store tokens if tokenStore is not specified.");  }  AccessToken accessToken=credentials.getAccessToken();  String acessTokenValue=null;  Date expiresBy=null;  if (accessToken != null) {    acessTokenValue=accessToken.getTokenValue();    expiresBy=accessToken.getExpirationTime();  }  String refreshToken=credentials.getRefreshToken();  GenericJson tokenStateJson=new GenericJson();  tokenStateJson.setFactory(OAuth2Utils.JSON_FACTORY);  tokenStateJson.put("access_token",acessTokenValue);  tokenStateJson.put("expiration_time_millis",expiresBy.getTime());  if (refreshToken != null) {    tokenStateJson.put("refresh_token",refreshToken);  }  String tokenState=tokenStateJson.toString();  tokenStore.store(userId,tokenState);}  }
class C{  protected void produceMail(Session session,Map<String,Object> props,int msgPrio,Mail mail) throws JMSException, MessagingException, IOException {  MessageProducer producer=null;  try {    Queue queue=session.createQueue(queueName);    producer=session.createProducer(queue);    ObjectMessage message=session.createObjectMessage();    for (    Map.Entry<String,Object> entry : props.entrySet()) {      message.setObjectProperty(entry.getKey(),entry.getValue());    }    long size=mail.getMessageSize();    ByteArrayOutputStream out;    if (size > -1) {      out=new ByteArrayOutputStream((int)size);    } else {      out=new ByteArrayOutputStream();    }    mail.getMessage().writeTo(out);    message.setObject(out.toByteArray());    producer.send(message,Message.DEFAULT_DELIVERY_MODE,msgPrio,Message.DEFAULT_TIME_TO_LIVE);  }  finally {    try {      if (producer != null)       producer.close();    } catch (    JMSException e) {    }  }}  }
class C{  public void remove(AbstractButton b){  if (b == null) {    return;  }  buttons.removeElement(b);  if (b.getModel() == selection) {    selection=null;  }  b.getModel().setGroup(null);}  }
class C{  private static List<X509Certificate> parsePKIPATH(InputStream is) throws CertificateException {  List<X509Certificate> certList=null;  CertificateFactory certFac=null;  if (is == null) {    throw new CertificateException("input stream is null");  }  try {    DerInputStream dis=new DerInputStream(readAllBytes(is));    DerValue[] seq=dis.getSequence(3);    if (seq.length == 0) {      return Collections.<X509Certificate>emptyList();    }    certFac=CertificateFactory.getInstance("X.509");    certList=new ArrayList<X509Certificate>(seq.length);    for (int i=seq.length - 1; i >= 0; i--) {      certList.add((X509Certificate)certFac.generateCertificate(new ByteArrayInputStream(seq[i].toByteArray())));    }    return Collections.unmodifiableList(certList);  } catch (  IOException ioe) {    throw new CertificateException("IOException parsing PkiPath data: " + ioe,ioe);  }}  }
class C{  @DSComment("Wifi subsystem") @DSSpec(DSCat.WIFI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.322 -0500",hash_original_method="F8088016DD577DAE90193BD2B16E77E5",hash_generated_method="C6E6D263C7E7F070386825C9F4C9A388") public boolean startScan(){  try {    mService.startScan(false);    return true;  } catch (  RemoteException e) {    return false;  }}  }
class C{  public LocationGroup(String name){  this.name=name;}  }
class C{  public static void main(String[] args) throws IOException {  if (!checkArgs(args)) {    displayHelp();    return;  }  String modelDir=args[2];  boolean isAll=(args[0].compareToIgnoreCase("-all") == 0);  boolean isTrn=(args[0].compareToIgnoreCase("-trn") == 0);  boolean isTst=(args[0].compareToIgnoreCase("-tst") == 0);  boolean isCont=(args[0].compareToIgnoreCase("-cont") == 0);  Option option=new Option(modelDir);  option.optionFile=args[4];  option.readOptions();  Data data=null;  Dictionary dict=null;  FeatureGen feaGen=null;  Train train=null;  Inference inference=null;  Evaluation evaluation=null;  Model model=null;  PrintWriter foutModel=null;  BufferedReader finModel=null;  if (isAll) {    PrintWriter flog=option.openTrainLogFile();    if (flog == null) {      System.out.println("Couldn't create training log file");      return;    }    foutModel=option.createModelFile();    if (foutModel == null) {      System.out.println("Couldn't create model file");      return;    }    data=new Data(option);    data.readTrnData(option.modelDir + File.separator + option.trainDataFile);    data.readTstData(option.modelDir + File.separator + option.testDataFile);    dict=new Dictionary(option,data);    dict.generateDict();    feaGen=new FeatureGen(option,data,dict);    feaGen.generateFeatures();    data.writeCpMaps(dict,foutModel);    data.writeLbMaps(foutModel);    train=new Train();    inference=new Inference();    evaluation=new Evaluation();    model=new Model(option,data,dict,feaGen,train,inference,evaluation);    model.doTrain(flog);    model.doInference(model.data.tstData);    model.evaluation.evaluate(flog);    dict.writeDict(foutModel);    feaGen.writeFeatures(foutModel);    foutModel.close();  }  if (isTrn) {    PrintWriter flog=option.openTrainLogFile();    if (flog == null) {      System.out.println("Couldn't create training log file");      return;    }    foutModel=option.createModelFile();    if (foutModel == null) {      System.out.println("Couldn't create model file");      return;    }    data=new Data(option);    data.readTrnData(option.modelDir + File.separator + option.trainDataFile);    dict=new Dictionary(option,data);    dict.generateDict();    feaGen=new FeatureGen(option,data,dict);    feaGen.generateFeatures();    data.writeCpMaps(dict,foutModel);    data.writeLbMaps(foutModel);    train=new Train();    model=new Model(option,data,dict,feaGen,train,null,null);    model.doTrain(flog);    dict.writeDict(foutModel);    feaGen.writeFeatures(foutModel);    foutModel.close();  }  if (isTst) {    finModel=option.openModelFile();    if (finModel == null) {      System.out.println("Couldn't open model file");      return;    }    data=new Data(option);    data.readCpMaps(finModel);    data.readLbMaps(finModel);    data.readTstData(option.modelDir + File.separator + option.testDataFile);    dict=new Dictionary(option,data);    dict.readDict(finModel);    feaGen=new FeatureGen(option,data,dict);    feaGen.readFeatures(finModel);    inference=new Inference();    evaluation=new Evaluation();    model=new Model(option,data,dict,feaGen,null,inference,evaluation);    model.doInference(model.data.tstData);    model.evaluation.evaluate(null);    finModel.close();  }  if (isCont) {    PrintWriter flog=option.openTrainLogFile();    if (flog == null) {      System.out.println("Couldn't create training log file");      return;    }    finModel=option.openModelFile();    if (finModel == null) {      System.out.println("Couldn't open model file");      return;    }    data=new Data(option);    data.readCpMaps(finModel);    data.readLbMaps(finModel);    data.readTstData(option.modelDir + File.separator + option.testDataFile);    dict=new Dictionary(option,data);    dict.readDict(finModel);    feaGen=new FeatureGen(option,data,dict);    feaGen.readFeatures(finModel);    inference=new Inference();    evaluation=new Evaluation();    foutModel=option.createModelFile();    if (foutModel == null) {      System.out.println("Couldn't create model file");      return;    }    model=new Model(option,data,dict,feaGen,train,inference,evaluation);    model.doTrain(flog);    model.doInference(model.data.tstData);    model.evaluation.evaluate(flog);    foutModel.close();  }}  }
class C{  public boolean isAddressedModePossible(){  return true;}  }
class C{  public List<String> combineNodeNamesWithNodeIds(List<String> nodeNames,List<String> nodeIds){  if (!nodeNames.isEmpty()) {    List<String> matchedIds=getMatchingNodeIds(nodeNames);    if (matchedIds.size() != nodeNames.size()) {      throw APIException.badRequests.parameterIsNotValid("node name");    }    for (    String id : matchedIds) {      if (!nodeIds.contains(id))       nodeIds.add(id);    }  }  return nodeIds;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.201 -0400",hash_original_method="6ED4CA4A5697FDAC39D30ACE5ED4B1F3",hash_generated_method="1DF065C3FE4B389B4DE429CB66411112") public LockableFileWriter(File file) throws IOException {  this(file,false,null);}  }
class C{  public static MMovement createInventoryMove(Properties ctx,String description,String trxName) throws OperationException {  MMovement mmovement=new MMovement(ctx,0,trxName);  mmovement.setDescription(description);  int docTypeId=getDocType(ctx,"Inter Branch Transfer");  mmovement.setC_DocType_ID(docTypeId);  PoManager.save(mmovement);  return mmovement;}  }
class C{  public static <R,A,B,C,D>CompletionStage<R> combine(CompletionStage<A> a,CompletionStage<B> b,CompletionStage<C> c,CompletionStage<D> d,Function4<A,B,C,D,R> function){  final CompletableFuture<A> af=a.toCompletableFuture();  final CompletableFuture<B> bf=b.toCompletableFuture();  final CompletableFuture<C> cf=c.toCompletableFuture();  final CompletableFuture<D> df=d.toCompletableFuture();  return CompletableFuture.allOf(af,bf,cf,df).thenApply(null);}  }
class C{  public void endDocument() throws IOException, SAXException {  getWriter().endDocument();}  }
class C{  public int append(final long lhs,final long rhs,final String fieldName){  int comparison=((lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0));  fieldComparisons.setAt(fieldName).value(comparison);  return comparison;}  }
class C{  private static void copyFunctions(FunctionLib extFL,FunctionLib newFL){  Iterator<Entry<String,FunctionLibFunction>> it=extFL.getFunctions().entrySet().iterator();  FunctionLibFunction flf;  while (it.hasNext()) {    flf=it.next().getValue();    newFL.setFunction(flf);  }}  }
class C{  public static void init(final Context context){  init(context.getPackageName());  isDebuggable=(context.getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;}  }
class C{  public final static byte[] writeInt(int v,byte[] b,int offset){  b[offset]=(byte)v;  b[offset + 1]=(byte)(v >> 8);  b[offset + 2]=(byte)(v >> 16);  b[offset + 3]=(byte)(v >> 24);  return b;}  }
class C{  public void validateVarEntryId(SnmpOid rowOid,long var,Object data) throws SnmpStatusException {  node.validateVarId(var,data);}  }
class C{  protected void showResults(final HttpURLConnection conn) throws Exception {  final LineNumberReader r=new LineNumberReader(new InputStreamReader(conn.getInputStream(),conn.getContentEncoding() == null ? "ISO-8859-1" : conn.getContentEncoding()));  try {    String s;    while ((s=r.readLine()) != null) {      System.out.println(s);    }  }  finally {    r.close();  }}  }
class C{  public void test_getLongLjava_lang_ObjectI(){  long[] x={1};  long ret=0;  boolean thrown=false;  try {    ret=Array.getLong(x,0);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,ret);  try {    ret=Array.getLong(new Object(),0);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    ret=Array.getLong(x,4);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    ret=Array.getLong(null,0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  private boolean buildList(List<List<Vertex>> theList,int index,BuildStep follow){  List<Vertex> l=theList.get(index);  boolean allNegOne=true;  boolean allXcps=true;  for (  Vertex v : l) {    if (v.getIndex() != -1) {      if (theList.get(v.getIndex()).size() != 0)       allNegOne=false;    } else {      if (v.getThrowable() == null)       allXcps=false;    }    mStepList.add(new BuildStep(v,BuildStep.POSSIBLE));  }  if (allNegOne) {    if (allXcps) {      if (follow == null)       mStepList.add(new BuildStep(null,BuildStep.FAIL)); else       mStepList.add(new BuildStep(follow.getVertex(),BuildStep.BACK));      return false;    } else {      List<Vertex> possibles=new ArrayList<>();      for (      Vertex v : l) {        if (v.getThrowable() == null)         possibles.add(v);      }      if (possibles.size() == 1) {        mStepList.add(new BuildStep(possibles.get(0),BuildStep.SUCCEED));      } else {        mStepList.add(new BuildStep(possibles.get(0),BuildStep.SUCCEED));      }      return true;    }  } else {    boolean success=false;    for (    Vertex v : l) {      if (v.getIndex() != -1) {        if (theList.get(v.getIndex()).size() != 0) {          BuildStep bs=new BuildStep(v,BuildStep.FOLLOW);          mStepList.add(bs);          success=buildList(theList,v.getIndex(),bs);        }      }    }    if (success) {      return true;    } else {      if (follow == null)       mStepList.add(new BuildStep(null,BuildStep.FAIL)); else       mStepList.add(new BuildStep(follow.getVertex(),BuildStep.BACK));      return false;    }  }}  }
class C{  public java.lang.Object newInstance() throws java.lang.InstantiationException, java.lang.IllegalAccessException {  return null;}  }
class C{  public AnimationBuilder duration(long duration){  viewAnimator.duration(duration);  return this;}  }
class C{  protected synchronized void findAllModules(Collection<String> mList) throws FloodlightModuleException {  if (serviceMap != null)   return;  serviceMap=new HashMap<>();  moduleServiceMap=new HashMap<>();  moduleNameMap=new HashMap<>();  ClassLoader cl=Thread.currentThread().getContextClassLoader();  ServiceLoader<IFloodlightModule> moduleLoader=ServiceLoader.load(IFloodlightModule.class,cl);  Iterator<IFloodlightModule> moduleIter=moduleLoader.iterator();  while (moduleIter.hasNext()) {    IFloodlightModule m=null;    try {      m=moduleIter.next();    } catch (    ServiceConfigurationError sce) {      logger.error("Could not find module: {}",sce.getMessage());      continue;    }    if (logger.isDebugEnabled()) {      logger.debug("Found module " + m.getClass().getName());    }    moduleNameMap.put(m.getClass().getCanonicalName(),m);    Collection<Class<? extends IFloodlightService>> servs=m.getModuleServices();    if (servs != null) {      moduleServiceMap.put(m,servs);      for (      Class<? extends IFloodlightService> s : servs) {        Collection<IFloodlightModule> mods=serviceMap.get(s);        if (mods == null) {          mods=new ArrayList<IFloodlightModule>();          serviceMap.put(s,mods);        }        mods.add(m);        int dupInConf=0;        for (        IFloodlightModule cMod : mods) {          if (mList.contains(cMod.getClass().getCanonicalName()))           dupInConf+=1;        }        if (dupInConf > 1) {          StringBuilder sb=new StringBuilder();          for (          IFloodlightModule mod : mods) {            sb.append(mod.getClass().getCanonicalName());            sb.append(", ");          }          String duplicateMods=sb.toString();          String mess="ERROR! The configuration file " + "specifies more than one module that " + "provides the service " + s.getCanonicalName() + ". Please specify only ONE of the "+ "following modules in the config file: "+ duplicateMods;          throw new FloodlightModuleException(mess);        }      }    }  }}  }
class C{  public void saveNewGroupWithAcls(DBGroup group,List<DBAcl> acls) throws InvalidRequestException, SQLException {  validateGroupAcls(group,acls);  Set<Integer> groupAdmins=getFirstLevelUsers(acls,DBAcl.modifyGroupSecretsAccess());  if (!groupAdmins.contains(identity.getId())) {    throw new InvalidRequestException("Cannot create group where requestor " + identity.getName() + " does not have permission to modify group secrets");  }  manager.groupDao.create(group);  for (  DBAcl acl : acls) {    manager.aclDao.create(acl);  }}  }
class C{  public void testOnlyOneTerm() throws IOException {  BasicStats stats=createStats();  stats.setNumberOfFieldTokens(1);  stats.setAvgFieldLength(1.0f / stats.getNumberOfDocuments());  stats.setDocFreq(1);  stats.setTotalTermFreq(1);  unitTestCore(stats,1,DOC_LEN);}  }
class C{  public void test_copy_check_index(){  ArrayList a1=new ArrayList();  a1.add("one");  a1.add("two");  ArrayList a2=new ArrayList();  a2.add("aa");  try {    Collections.copy(a2,a1);    fail("Expected IndexOutOfBoundsException");  } catch (  IndexOutOfBoundsException e) {  }  assertEquals("aa",a2.get(0));}  }
class C{  public MalformedURLException(){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected Node newNode(){  return new SVGOMLineElement();}  }
class C{  protected void incomingNetWriteReply(boolean netWriteSuccessful,Exception e,boolean exe){synchronized (this) {    this.remoteException=e;    this.netWriteSucceeded=netWriteSuccessful;    computeRemainingTimeout();    signalDone();  }}  }
class C{  public void testHeaderCopy(){  Instances data;  data=new Instances(m_Instances,0);  assertEquals("# of attributes differ",m_Instances.numAttributes(),data.numAttributes());  assertEquals("class index differs",m_Instances.classIndex(),data.classIndex());  assertEquals("Unexpected instances",0,data.numInstances());  m_Instances.setClassIndex(m_Instances.numAttributes() - 1);  data=new Instances(m_Instances,0);  assertEquals("class index differs",m_Instances.classIndex(),data.classIndex());}  }
class C{  public void stop(){  _throttle.setSpeedSetting(-0.5F);  _throttle.setSpeedSetting(0.0F);  stopLabel.setIcon(stopIcon);  stopLabel.setIconTextGap(_gap);  pack();}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @org.junit.After public void executeTest() throws Throwable {  try {    testEnv.executeTest();  } catch (  AssertionError assertionError) {    if (testEnv.hasBeenStopped()) {      throw new AssertionError("Test terminated due timeout!" + assertionError.getMessage());    }    throw assertionError;  }}  }
class C{  protected Key engineUnwrap(byte[] wrappedKey,String wrappedKeyAlgorithm,int wrappedKeyType) throws InvalidKeyException, NoSuchAlgorithmException {  return core.unwrap(wrappedKey,wrappedKeyAlgorithm,wrappedKeyType);}  }
class C{  public Vector(int capacity,int capacityIncrement){  if (capacity < 0) {    throw new IllegalArgumentException("capacity < 0: " + capacity);  }  elementData=newElementArray(capacity);  elementCount=0;  this.capacityIncrement=capacityIncrement;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:10.012 -0400",hash_original_method="7F6C6ED0BA74F98C262CDB8E4F5CCB65",hash_generated_method="7F6C6ED0BA74F98C262CDB8E4F5CCB65") FilePreferencesImpl(boolean userNode){  super(null,"");  this.userNode=userNode;  path=userNode ? USER_HOME : SYSTEM_HOME;  initPrefs();}  }
class C{  private void grow(){  if (keys == null || nkeys >= keys.length) {    String[] nk=new String[nkeys + 4];    String[] nv=new String[nkeys + 4];    if (keys != null)     System.arraycopy(keys,0,nk,0,nkeys);    if (values != null)     System.arraycopy(values,0,nv,0,nkeys);    keys=nk;    values=nv;  }}  }
class C{  @Override public InputSource resolveEntity(String publicId,String systemId){  for (int i=0; i < Constants.DTDS_FLD.length; i++) {    if (publicId.equals(Constants.DTDS_FLD[i])) {      return new InputSource(getClass().getResourceAsStream(DTD_1_0));    }  }  return null;}  }
class C{  public boolean isExceptionMS(){  return (flags & EXCEPTION_MS) != 0;}  }
class C{  public void testChecksumFailure() throws Exception {  Serializer serializer=new ProtobufSerializer();  ReplDBMSEvent replEvent=new ReplDBMSEvent(31,(short)0,true,"unittest",1,new Timestamp(System.currentTimeMillis()),new DBMSEvent());  LogFile tfrw=writeToLogFile("testChecksumFailure.dat",replEvent);  RandomAccessFile raf=new RandomAccessFile(tfrw.getFile(),"rw");  long len=raf.length();  raf.seek(len - 20);  raf.writeShort(0);  raf.close();  LogFile tfro=LogHelper.openExistingFileForRead("testChecksumFailure.dat");  LogRecord logRec2=tfro.readRecord(0);  try {    LogEventReplReader reader=new LogEventReplReader(logRec2,serializer,true);    throw new Exception("Able to instantiate reader on corrupt file: reader=" + reader.toString());  } catch (  LogConsistencyException e) {    logger.info("Got expected exception: " + e.toString());  } finally {    tfro.close();  }}  }
class C{  public InstanceComparator(boolean includeClass){  this(includeClass,"first-last",false);}  }
class C{  public boolean isCanceled(){  return canceled;}  }
class C{  public InheritableThreadLocal(){}  }
class C{  @SuppressWarnings("unchecked") private List<Element> castToChildElementList(final Element element){  return new ArrayList<>(element.getChildren());}  }
class C{  public void appendRow(DATA data,Map<String,?> keys){  Preconditions.checkNotNull(data);  Preconditions.checkNotNull(keys);  Object[] keysArray=new Object[keys.size()];  for (  Map.Entry<String,?> entry : keys.entrySet()) {    String keyName=entry.getKey();    Object value=entry.getValue();    Preconditions.checkNotNull(keyName);    Integer index=dimensionNameToIndex.get(keyName);    keysArray[index]=value;  }  appendRow(data,keysArray);}  }
class C{  public Iterator<JsonElement> iterator(){  return elements.iterator();}  }
class C{  public static void cancelTermsAndConditionsNotification(Context context){  NotificationManager notificationManager=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.cancel(TC_NOTIFICATION_TAG,TC_NOTIFICATION_ID);}  }
class C{  private double determinant(){  return m00 * (m11 * m22 - m12 * m21) - m01 * (m10 * m22 - m20 * m12) + m02 * (m10 * m21 - m20 * m11);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void endEntity(String name) throws SAXException {}  }
class C{  public void test_parseObjectLjava_lang_StringLjavajava_text_ParsePosition(){  MessageFormat mf=new MessageFormat("{0,number,#.##}, {0,number,#.#}");  try {    Object[] objs={new Double(3.1415)};    String result=mf.format(objs);    Object[] res=null;    ParsePosition pp=new ParsePosition(0);    int parseIndex=pp.getIndex();    res=(Object[])mf.parseObject(result,pp);    assertTrue("Parse operation return null",res != null);    assertTrue("parse operation return array with incorrect length",1 == res.length);    assertTrue("ParseIndex is incorrect",pp.getIndex() != parseIndex);    assertTrue("Result object is incorrect",new Double(3.1).equals(res[0]));    pp.setIndex(0);    char[] cur=result.toCharArray();    cur[cur.length / 2]='Z';    String partialCorrect=new String(cur);    res=(Object[])mf.parseObject(partialCorrect,pp);    assertTrue("Parse operation return null",res == null);    assertTrue("ParseIndex is incorrect",pp.getIndex() == 0);    assertTrue("ParseErrorIndex is incorrect",pp.getErrorIndex() == cur.length / 2);    try {      mf.parseObject(result,null);      fail("Expected NullPointerException was not thrown");    } catch (    NullPointerException e) {    }  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  public void process(final String jarFolder,final Properties bootProp,final Boolean initialDownload,ClassLoader classLoader){  if (!Boolean.parseBoolean(ClientGameConfiguration.get("UPDATE_ENABLE_AUTO_UPDATE"))) {    System.out.println("Automatic Update disabled");    return;  }  this.jarFolder=jarFolder;  this.bootProp=bootProp;  this.classLoader=classLoader;  downloadUpdateProp(initialDownload.booleanValue());  if (updateProp == null) {    if (initialDownload.booleanValue()) {      UpdateGUIDialogs.messageBox("Sorry, we need to download additional files from\r\n" + serverFolder + "\r\nbut that server is not reachable at the moment. Please try again later.");      System.exit(1);    }    return;  }  VersionState versionState=null;  if (initialDownload.booleanValue()) {    versionState=VersionState.INITIAL_DOWNLOAD;    fromVersion=null;  } else {    fromVersion=getVersion();    final String versionStateString=updateProp.getProperty("version." + fromVersion);    versionState=VersionState.getFromString(versionStateString);  }  if (fromVersion == null) {    versionState=VersionState.INITIAL_DOWNLOAD;  }  System.out.println("Update state: " + versionState + " initialDownload: "+ initialDownload+ " fromVersion: "+ fromVersion);switch (versionState) {case CURRENT:    System.out.println("Current Version");  break;case ERROR:UpdateGUIDialogs.messageBox("An error occurred while trying to update");break;case OUTDATED:UpdateGUIDialogs.messageBox("Sorry, your client is too outdated for the update to work.\r\nPlease download the current version from http://arianne.sf.net .");break;case INITIAL_DOWNLOAD:List<String> files=getFilesForFirstDownload();String version=updateProp.getProperty("init.version");if (version != null) {files.addAll(getFilesToUpdate(version));}List<String> filesToAddToClasspath=new ArrayList<String>(files);removeAlreadyExistingFiles(files);int updateSize=getSizeOfFilesToUpdate(files);if (downloadFiles(files,updateSize)) {updateClasspathConfig(filesToAddToClasspath);}break;case UPDATE_NEEDED:version=getVersion();files=getFilesToUpdate(version);filesToAddToClasspath=new ArrayList<String>(files);removeAlreadyExistingFiles(files);updateSize=getSizeOfFilesToUpdate(files);if ((updateSize == 0) || (UpdateGUIDialogs.askForDownload(updateSize,true))) {if (downloadFiles(files,updateSize)) {updateClasspathConfig(filesToAddToClasspath);}}break;case UNKNOWN:System.out.println("Unknown state of update");break;default :System.out.println("Internal Error on Update");break;}}  }
class C{  public static boolean isAutoCommit(Properties ctx){  if (ctx == null)   throw new IllegalArgumentException("Require Context");  String s=getContext(ctx,"AutoCommit");  if (s != null && s.equals("Y"))   return true;  return false;}  }
class C{  private void verifyVolumeResults() throws Exception {  verifyVPlexVolumeResults();  verifyRPVolumeResults();}  }
class C{  public static Bitmap makeBitmap(int minSideLength,int maxNumOfPixels,Uri uri,ContentResolver cr,boolean useNative){  ParcelFileDescriptor input=null;  try {    input=cr.openFileDescriptor(uri,"r");    BitmapFactory.Options options=null;    if (useNative) {      options=createNativeAllocOptions();    }    return makeBitmap(minSideLength,maxNumOfPixels,uri,cr,input,options);  } catch (  IOException ex) {    return null;  } finally {    closeSilently(input);  }}  }
class C{  public String sendMsgWaitingVoice(int count,String dest) throws SmsException, IOException {  return sendMsgWaiting(MwiType.VOICE,count,dest);}  }
class C{  public void resetLabels(){  AbstractInsnNode insn=first;  while (insn != null) {    if (insn instanceof LabelNode) {      ((LabelNode)insn).resetLabel();    }    insn=insn.next;  }}  }
class C{  public boolean containsValue(Object value){  if (value == null) {    for (Entry e=header.after; e != header; e=e.after)     if (e.value == null)     return true;  } else {    for (Entry e=header.after; e != header; e=e.after)     if (value.equals(e.value))     return true;  }  return false;}  }
class C{  protected void sequence_BindingElementFragment_BogusTypeRefFragment_ColonSepTypeRef_FormalParameter(ISerializationContext context,FormalParameter semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public QuestNotInStateCondition(final String questname,final int index,final String state){  this.questname=checkNotNull(questname);  this.index=index;  this.state=checkNotNull(state);}  }
class C{  public ForceMergeRequest maxNumSegments(int maxNumSegments){  this.maxNumSegments=maxNumSegments;  return this;}  }
class C{  public void createConstraints(DatabaseSession session){  createConstraints(session,new JPAMSchemaManager(session));}  }
class C{  public void initDisplayImageOptions(){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  options.inJustDecodeBounds=false;  options.inPurgeable=true;  int emptyColorPatch=UIElementsHelper.getEmptyColorPatch(this);  mDisplayImageOptions=null;  mDisplayImageOptions=new DisplayImageOptions.Builder().showImageForEmptyUri(emptyColorPatch).showImageOnFail(emptyColorPatch).showImageOnLoading(emptyColorPatch).cacheInMemory(true).cacheOnDisc(true).decodingOptions(options).imageScaleType(ImageScaleType.IN_SAMPLE_POWER_OF_2).bitmapConfig(Bitmap.Config.ARGB_4444).delayBeforeLoading(400).displayer(new FadeInBitmapDisplayer(200)).build();}  }
class C{  public static String TO_CHAR(String columnName,int displayType,String AD_Language){  if (columnName == null || AD_Language == null || columnName.length() == 0)   throw new IllegalArgumentException("Required parameter missing");  return s_cc.getDatabase().TO_CHAR(columnName,displayType,AD_Language);}  }
class C{  private void internalSet(String name,String value){  if (value != null) {    _pairs.put(name,value);  } else {    _pairs.remove(name);  }}  }
class C{  public Boolean isIncludeImageFiles(){  return includeImageFiles;}  }
class C{  private ComplianceFeature checkWifiPolicy(org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException {  String ssid=null;  try {    JSONObject wifiData=new JSONObject(operation.getPayLoad().toString());    if (!wifiData.isNull(resources.getString(R.string.intent_extra_ssid))) {      ssid=(String)wifiData.get(resources.getString(R.string.intent_extra_ssid));    }    WiFiConfig config=new WiFiConfig(context.getApplicationContext());    if (config.findWifiConfigurationBySsid(ssid)) {      policy.setCompliance(true);    } else {      policy.setCompliance(false);      policy.setMessage(resources.getString(R.string.error_wifi_policy));    }  } catch (  JSONException e) {    throw new AndroidAgentException("Invalid JSON format.",e);  }  return policy;}  }
class C{  private void insertPhiFunctions(IR ir,BitVector[] defs,Register[] symbolics,boolean excludeGuards){  for (int r=0; r < defs.length; r++) {    if (symbolics[r] == null)     continue;    if (symbolics[r].isSSA())     continue;    if (symbolics[r].isPhysical())     continue;    if (excludeGuards && symbolics[r].isValidation())     continue;    if (DEBUG)     System.out.println("Inserting phis for register " + r);    if (DEBUG)     System.out.println("Start iterated frontier...");    BitVector needsPhi=DominanceFrontier.getIteratedDominanceFrontier(ir,defs[r]);    removePhisThatDominateAllDefs(needsPhi,ir,defs[r]);    if (DEBUG)     System.out.println("Done.");    for (int b=0; b < needsPhi.length(); b++) {      if (needsPhi.get(b)) {        BasicBlock bb=ir.getBasicBlock(b);        if (live.getLiveInfo(bb).getIn().contains(symbolics[r])) {          insertPhi(bb,symbolics[r]);        }      }    }  }}  }
class C{  private static void parseCopy(String field,ParseContext context) throws IOException {  FieldMapper fieldMapper=context.docMapper().mappers().getMapper(field);  if (fieldMapper != null) {    fieldMapper.parse(context);  } else {    context=context.overridePath(new ContentPath(0));    ObjectMapper mapper=context.root();    String objectPath="";    String fieldPath=field;    int posDot=field.lastIndexOf('.');    if (posDot > 0) {      objectPath=field.substring(0,posDot);      context.path().add(objectPath);      mapper=context.docMapper().objectMappers().get(objectPath);      fieldPath=field.substring(posDot + 1);    }    if (mapper == null) {      throw new MapperParsingException("attempt to copy value to non-existing object [" + field + "]");    }    ObjectMapper update=parseDynamicValue(context,mapper,fieldPath,context.parser().currentToken());    assert update != null;    while (objectPath.length() > 0) {      String parentPath="";      ObjectMapper parent=context.root();      posDot=objectPath.lastIndexOf('.');      if (posDot > 0) {        parentPath=objectPath.substring(0,posDot);        parent=context.docMapper().objectMappers().get(parentPath);      }      if (parent == null) {        throw new IllegalStateException("[" + objectPath + "] has no parent for path ["+ parentPath+ "]");      }      update=parent.mappingUpdate(update);      objectPath=parentPath;    }    context.addDynamicMappingsUpdate(update);  }}  }
class C{  public static void stopTcpRouter(UUID tcpRouterId){  GridTcpRouterImpl router=tcpRouters.remove(tcpRouterId);  if (router != null)   router.stop();}  }
class C{  public int hashCode(){  if (hashCode == 0) {    int result=17;    result=37 * result + methodName.hashCode();    if (argClasses != null) {      for (int i=0; i < argClasses.length; i++) {        result=37 * result + ((argClasses[i] == null) ? 0 : argClasses[i].hashCode());      }    }    hashCode=result;  }  return hashCode;}  }
class C{  private static LiveSet processExpression(Expression e,LiveSet onEntry){  if (e instanceof Operation) {    return processOperation((Operation)e,onEntry);  } else   if (e instanceof FunctionConstructor) {    processFunctionConstructor((FunctionConstructor)e);    return onEntry;  } else   if (e instanceof Reference) {    return processReference((Reference)e,onEntry);  } else {    return processLiteralOrConstructor(e,onEntry);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:30.440 -0500",hash_original_method="ECD7EEB642891ACE11FADF160200B8D1",hash_generated_method="33C179F165B0173000D1AC24FD82604B") private View fillFromTop(int nextTop){  mFirstPosition=Math.min(mFirstPosition,mSelectedPosition);  mFirstPosition=Math.min(mFirstPosition,mItemCount - 1);  if (mFirstPosition < 0) {    mFirstPosition=0;  }  mFirstPosition-=mFirstPosition % mNumColumns;  return fillDown(mFirstPosition,nextTop);}  }
class C{  public HtmlDocumentBuilder(XmlViolationPolicy xmlPolicy){  this(jaxpDOMImplementation(),xmlPolicy);}  }
class C{  @Override public void perform(IR ir){  GenerationContext gc=new GenerationContext(ir.method,ir.params,ir.compiledMethod,ir.options,ir.inlinePlan);  BC2IR.generateHIR(gc);  ir.initializeStateForHIR(gc);}  }
class C{  public final void popNamespaceContext(){  m_prefixResolvers.pop();}  }
class C{  private void onDatatypeElement(Element xsdElement,DocumentFactory parentFactory){  String name=xsdElement.attributeValue("name");  String type=xsdElement.attributeValue("type");  QName qname=getQName(name);  DatatypeElementFactory factory=getDatatypeElementFactory(qname);  if (type != null) {    XSDatatype dataType=getTypeByName(type);    if (dataType != null) {      factory.setChildElementXSDatatype(qname,dataType);    } else {      QName typeQName=getQName(type);      namedTypeResolver.registerTypedElement(xsdElement,typeQName,parentFactory);    }    return;  }  Element xsdSimpleType=xsdElement.element(XSD_SIMPLETYPE);  if (xsdSimpleType != null) {    XSDatatype dataType=loadXSDatatypeFromSimpleType(xsdSimpleType);    if (dataType != null) {      factory.setChildElementXSDatatype(qname,dataType);    }  }  Element schemaComplexType=xsdElement.element(XSD_COMPLEXTYPE);  if (schemaComplexType != null) {    onSchemaComplexType(schemaComplexType,factory);  }  Iterator<Element> iter=xsdElement.elementIterator(XSD_ATTRIBUTE);  if (iter.hasNext()) {    do {      onDatatypeAttribute(xsdElement,factory,iter.next());    } while (iter.hasNext());  }}  }
class C{  public final Iterator<String> schemesIterator(){  return mDataSchemes != null ? mDataSchemes.iterator() : null;}  }
class C{  public void mainHeader(String... header){  mainHeader=Arrays.asList(header);}  }
class C{  @Override public void process(HashMap<K,Integer> tuple){  for (  Map.Entry<K,Integer> e : tuple.entrySet()) {    Integer val=mergedTuple.get(e.getKey());    if (val == null) {      val=e.getValue();    } else {      val+=e.getValue();    }    mergedTuple.put(e.getKey(),val);  }}  }
class C{  @Override public V remove(Object key){  int hash=getHash(key);  int segmentIndex=getSegmentIndex(hash);  Segment<K,V> s=segments[segmentIndex];synchronized (s) {    s=resizeIfNeeded(s,segmentIndex);    return s.remove(key,hash);  }}  }
class C{  public String toString(){  if (myToString == null) {    myToString=getClass().getName() + "(name=" + getTypeName()+ ",dimension="+ dimension+ ",elementType="+ elementType+ ",primitiveArray="+ primitiveArray+ ")";  }  return myToString;}  }
class C{  private void defineScrollPane(UIDefaults d){  String c=PAINTER_PREFIX + "ScrollPanePainter";  String p="ScrollPane";  d.put(p + ".opaque",Boolean.FALSE);  d.put(p + ".contentMargins",new InsetsUIResource(3,3,3,3));  d.put(p + ".backgroundPainter",new LazyPainter(c,ScrollPanePainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Enabled+Focused].borderPainter",new LazyPainter(c,ScrollPanePainter.Which.BORDER_ENABLED_FOCUSED));  d.put(p + "[Enabled].borderPainter",new LazyPainter(c,ScrollPanePainter.Which.BORDER_ENABLED));  d.put(p + ".cornerPainter",new LazyPainter(c,ScrollPanePainter.Which.CORNER_ENABLED));  p="Viewport";  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + ".opaque",Boolean.TRUE);}  }
class C{  public DeleteAction(){  this(null,ID);}  }
class C{  public void markRecording(){  state=StorageState.RECORDING;}  }
class C{  public void addLanguage(Language language){  getLanguages().add(language);}  }
class C{  public Insertion(double probability){  super();  this.probability=probability;}  }
class C{  static void deleteLocalDeviceTokenLastModifiedFile(){  ParseFileUtils.deleteQuietly(getLocalDeviceTokenLastModifiedFile());}  }
class C{  public static Object valueOf(Class<?> type,String value){  try {    if (type.equals(String.class))     return value;    Method m=class2Value.get(type);    if (m != null)     return m.invoke(null,value);    if (type.equals(Character.TYPE) || type.equals(Character.class))     return new Character(value.charAt(0));    Constructor<?> c=type.getConstructor(String.class);    return c.newInstance(value);  } catch (  NoSuchMethodException e) {  }catch (  IllegalAccessException e) {  }catch (  InstantiationException e) {  }catch (  InvocationTargetException e) {    if (e.getTargetException() instanceof Error)     throw (Error)(e.getTargetException());  }  return null;}  }
class C{  public void locationChanged(String newLocation,boolean permanent){  if (false) {    Log.v(LOGTAG,"TestEventHandler: locationChanged() " + newLocation + " permanent "+ permanent);  }  eventsReceived[TEST_LOCATION_CHANGED]=true;  if (notExpecting[TEST_LOCATION_CHANGED]) {    expectDetails.append("Location changed event received but " + "not expected");    expectDetails.append("\r\n");  }  if (expectLocation != null) {    if (expectLocation.equals(newLocation)) {      expectLocation=null;    } else {      expectDetails.append("Location expected:" + expectLocation + " got:"+ newLocation);      expectDetails.append("\r\n");    }  }  if (expectPermanent != -1) {    if (((expectPermanent == 0) && !permanent) || ((expectPermanent == 1) && permanent)) {      expectPermanent=-1;    } else {      expectDetails.append("Location permanent expected:" + expectPermanent + " got"+ permanent);      expectDetails.append("\r\n");    }  }  if ((expectLocation == null) && (expectPermanent == -1))   expects[TEST_LOCATION_CHANGED]=false;}  }
class C{  public void test_getY() throws Exception {  KeyPairGenerator keyGen=null;  KeyPair keys=null;  DSAPrivateKey priv=null;  DSAPublicKey publ=null;  keyGen=KeyPairGenerator.getInstance("DSA");  keyGen.initialize(new DSAParameterSpec(Util.P,Util.Q,Util.G),new SecureRandom(new MySecureRandomSpi(),null){  });  keys=keyGen.generateKeyPair();  priv=(DSAPrivateKey)keys.getPrivate();  publ=(DSAPublicKey)keys.getPublic();  assertNotNull("Invalid Y value",publ.getY());  keyGen=KeyPairGenerator.getInstance("DSA");  keys=keyGen.generateKeyPair();  priv=(DSAPrivateKey)keys.getPrivate();  publ=(DSAPublicKey)keys.getPublic();  assertNotNull("Invalid Y value",publ.getY());}  }
class C{  public StendhalFirstScreen(final StendhalClient client){  super(detectScreen());  setLocationByPlatform(true);  WindowUtils.trackLocation(this,"main",true);  this.client=client;  client.setSplashScreen(this);  initializeComponent();  setVisible(true);}  }
class C{  public boolean isDeleteAllowed(CnATreeElement cte){  if (cte instanceof ImportIsoGroup) {    return true;  }  if (cte instanceof IBSIStrukturKategorie) {    return false;  }  if (cte instanceof ITVerbund || cte instanceof Organization) {    return isWriteAllowed(cte);  }  return isWriteAllowed(cte) && isWriteAllowed(cte.getParent());}  }
class C{  private <S extends Symbol>S nameToSymbol(String nameStr,Class<S> clazz){  Name name=names.fromString(nameStr);  Symbol sym=(clazz == ClassSymbol.class) ? syms.classes.get(name) : syms.packages.get(name);  try {    if (sym == null)     sym=javaCompiler.resolveIdent(nameStr);    sym.complete();    return (sym.kind != Kinds.ERR && sym.exists() && clazz.isInstance(sym) && name.equals(sym.getQualifiedName())) ? clazz.cast(sym) : null;  } catch (  CompletionFailure e) {    return null;  }}  }
class C{  @Override public void buildClusterer(Instances data) throws Exception {  m_training=true;  getCapabilities().testWithFail(data);  m_replaceMissing=new ReplaceMissingValues();  Instances instances=new Instances(data);  instances.setClassIndex(-1);  m_replaceMissing.setInputFormat(instances);  data=weka.filters.Filter.useFilter(instances,m_replaceMissing);  instances=null;  m_theInstances=data;  m_minValues=new double[m_theInstances.numAttributes()];  m_maxValues=new double[m_theInstances.numAttributes()];  for (int i=0; i < m_theInstances.numAttributes(); i++) {    m_minValues[i]=m_maxValues[i]=Double.NaN;  }  for (int i=0; i < m_theInstances.numInstances(); i++) {    updateMinMax(m_theInstances.instance(i));  }  doEM();  m_theInstances=new Instances(m_theInstances,0);  m_training=false;}  }
class C{  public void testConstrDouble02(){  double a=0.555;  int aScale=53;  BigInteger bA=new BigInteger("55500000000000004884981308350688777863979339599609375");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  protected Expression matchPattern(int opPos) throws TransformerException {  locPathDepth++;  try {    int nextOpPos=opPos;    int i;    for (i=0; getOp(nextOpPos) == OpCodes.OP_LOCATIONPATHPATTERN; i++) {      nextOpPos=getNextOpPos(nextOpPos);    }    if (i == 1)     return compile(opPos);    UnionPattern up=new UnionPattern();    StepPattern[] patterns=new StepPattern[i];    for (i=0; getOp(opPos) == OpCodes.OP_LOCATIONPATHPATTERN; i++) {      nextOpPos=getNextOpPos(opPos);      patterns[i]=(StepPattern)compile(opPos);      opPos=nextOpPos;    }    up.setPatterns(patterns);    return up;  }  finally {    locPathDepth--;  }}  }
class C{  public SuggestScoreDocPriorityQueue(int size){  super(size);}  }
class C{  public boolean retainAll(AbstractByteList other){  if (!(other instanceof ByteArrayList))   return super.retainAll(other);  int limit=other.size() - 1;  int j=0;  byte[] theElements=elements;  int mySize=size();  double N=(double)other.size();  double M=(double)mySize;  if ((N + M) * cern.jet.math.Arithmetic.log2(N) < M * N) {    ByteArrayList sortedList=(ByteArrayList)other.clone();    sortedList.quickSort();    for (int i=0; i < mySize; i++) {      if (sortedList.binarySearchFromTo(theElements[i],0,limit) >= 0)       theElements[j++]=theElements[i];    }  } else {    for (int i=0; i < mySize; i++) {      if (other.indexOfFromTo(theElements[i],0,limit) >= 0)       theElements[j++]=theElements[i];    }  }  boolean modified=(j != mySize);  setSize(j);  return modified;}  }
class C{  public synchronized void add(long[] argIds){  add(argIds,argIds.length);}  }
class C{  public static void parseModelToContentValues(Object model,ContentValues contentValues){  if (contentValues.size() > 0)   contentValues.clear();  Class<?> clazz=model.getClass();  Field[] fields=clazz.getDeclaredFields();  Class<?> fieldType=null;  Object fieldVal=null;  for (  Field field : fields) {    try {      if (field.isAccessible() == false)       field.setAccessible(true);      Column column=field.getAnnotation(Column.class);      fieldType=field.getType();      fieldVal=field.get(model);      if (column == null || fieldVal == null)       continue;      if (fieldType.equals(int.class)) {        contentValues.put(column.name(),field.getInt(model));      } else       if (fieldType.equals(Integer.class)) {        contentValues.put(column.name(),(Integer)field.get(model));      } else       if (fieldType.equals(short.class)) {        contentValues.put(column.name(),field.getShort(model));      } else       if (fieldType.equals(Short.class)) {        contentValues.put(column.name(),(Short)field.get(model));      } else       if (fieldType.equals(long.class)) {        contentValues.put(column.name(),field.getLong(model));      } else       if (fieldType.equals(Long.class)) {        contentValues.put(column.name(),(Long)field.get(model));      } else       if (fieldType.equals(float.class)) {        contentValues.put(column.name(),field.getFloat(model));      } else       if (fieldType.equals(Float.class)) {        contentValues.put(column.name(),(Float)field.get(model));      } else       if (fieldType.equals(double.class)) {        contentValues.put(column.name(),field.getDouble(model));      } else       if (fieldType.equals(Double.class)) {        contentValues.put(column.name(),(Double)field.get(model));      } else       if (fieldType.equals(boolean.class)) {        if (field.getBoolean(model) == true) {          contentValues.put(column.name(),"1");        } else {          contentValues.put(column.name(),"0");        }      } else       if (fieldType.equals(Boolean.class)) {        if ((Boolean)field.get(model) == true) {          contentValues.put(column.name(),"1");        } else {          contentValues.put(column.name(),"0");        }      } else       if (fieldType.equals(String.class)) {        contentValues.put(column.name(),(String)field.get(model));      } else       if (fieldType.equals(byte[].class)) {        contentValues.put(column.name(),(byte[])field.get(model));      } else       if (fieldType.equals(Date.class)) {        Date date=(Date)field.get(model);        contentValues.put(column.name(),DateUtils.formatDate2Str(date));      }    } catch (    IllegalArgumentException e) {      e.printStackTrace();    }catch (    IllegalAccessException e) {      e.printStackTrace();    }  }}  }
class C{  public void focusLost(FocusEvent e){  setVisible(false);  setSelectionVisible(ownsSelection || e.isTemporary());}  }
class C{  public void addControllerListener(ControllerListener listener){  listeners.addListener(listener);}  }
class C{  public void add(final T value){  checkWidget();  if (value == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  if (this.elements == null) {    this.elements=new ArrayList<T>();  }  this.elements.add(value);  refresh();}  }
class C{  SocketTerminationException(String msg,IOException trappedException){  super(msg,trappedException);}  }
class C{  private static List<INaviCodeNode> collectNodes(final INaviView view,final INaviCodeNode codeNode){  final List<INaviCodeNode> nodelist=new ArrayList<INaviCodeNode>();  for (  final INaviViewNode viewnode : view.getGraph().getNodes()) {    if (viewnode instanceof INaviCodeNode) {      final INaviCodeNode node=(INaviCodeNode)viewnode;      if (codeNode.getAddress().equals(node.getAddress()) && !nodelist.contains(node) && (node != codeNode)) {        nodelist.add(node);      }    }  }  return nodelist;}  }
class C{  public static double[][] generateTestMatrix(int rows,int cols,double min,double max,double sparsity,long seed){  double[][] matrix=new double[rows][cols];  Random random;  if (seed == -1)   random=TestUtils.random; else   random=new Random(seed);  for (int i=0; i < rows; i++) {    for (int j=0; j < cols; j++) {      if (random.nextDouble() > sparsity)       continue;      matrix[i][j]=(random.nextDouble() * (max - min) + min);    }  }  return matrix;}  }
class C{  public static void main(String[] args) throws Throwable {  Loader cl=new Loader();  cl.run(args);}  }
class C{  public void prepareConnectionChanges(){  this.block.prepareConnectionChanges();}  }
class C{  private static void checkForEmptyString(String[] arg,String argName){  for (int i=0; i < arg.length; i++) {    if (arg[i].trim().equals("")) {      throw new IllegalArgumentException("Argument's element " + argName + "["+ i+ "] cannot be an empty string.");    }  }}  }
class C{  public void clearArguments(){  _myTypetag=new byte[0];  _myData=new byte[0];  _myArguments=new Object[0];}  }
class C{  public boolean isGrouped(){  return mDataSets.size() > 1 ? true : false;}  }
class C{  public boolean is_subset_of(terminal_set other) throws internal_error {  not_null(other);  BitSet copy_other=(BitSet)other._elements.clone();  copy_other.or(_elements);  return copy_other.equals(other._elements);}  }
class C{  public final void writeChar(int v) throws IOException {  out.write((v >>> 8) & 0xFF);  out.write((v >>> 0) & 0xFF);  incCount(2);}  }
class C{  public boolean inDaylightTime(Date date){  return (getOffset(date.getTime()) != rawOffset);}  }
class C{  public void init(SecureRandom random) throws IllegalArgumentException {}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  private void createBackupFile(){  if (createBackupFile) {    if (backupFileExtension.trim().length() == 0) {      throw new FailureException("Could not create backup file, extension name was empty");    }    fileUtil.backupFile();    log.info(String.format("Saved backup of %s to %s%s",pomFile.getAbsolutePath(),pomFile.getAbsolutePath(),backupFileExtension));  }}  }
class C{  public void run(){  final boolean logActivated=sLogger.isActivated();  try {    if (logActivated) {      sLogger.info("Initiate a store & forward session for messages");    }    SipDialogPath dialogPath=getDialogPath();    if (mImdnManager.isDeliveryDeliveredReportsEnabled()) {      String msgId=ChatUtils.getMessageId(dialogPath.getInvite());      if (msgId != null) {        ContactId remote=getRemoteContact();        mImdnManager.sendMessageDeliveryStatusImmediately(remote.toString(),remote,msgId,ImdnDocument.DeliveryStatus.DELIVERED,SipUtils.getRemoteInstanceId(dialogPath.getInvite()),getTimestamp());      }    }    Collection<ImsSessionListener> listeners=getListeners();    ContactId contact=getRemoteContact();    if (isSessionAccepted()) {      if (logActivated) {        sLogger.debug("Auto accept store and forward chat invitation");      }      for (      ImsSessionListener listener : listeners) {        ((OneToOneChatSessionListener)listener).onSessionAutoAccepted(contact);      }    } else {      if (logActivated) {        sLogger.debug("Accept manually store and forward chat invitation");      }      for (      ImsSessionListener listener : listeners) {        ((OneToOneChatSessionListener)listener).onSessionInvited(contact);      }      send180Ringing(dialogPath.getInvite(),dialogPath.getLocalTag());      InvitationStatus answer=waitInvitationAnswer();switch (answer) {case INVITATION_REJECTED_DECLINE:case INVITATION_REJECTED_BUSY_HERE:        if (logActivated) {          sLogger.debug("Session has been rejected by user");        }      sendErrorResponse(dialogPath.getInvite(),dialogPath.getLocalTag(),answer);    removeSession();  for (  ImsSessionListener listener : listeners) {    listener.onSessionRejected(contact,TerminationReason.TERMINATION_BY_USER);  }return;case INVITATION_TIMEOUT:if (logActivated) {sLogger.debug("Session has been rejected on timeout");}send486Busy(dialogPath.getInvite(),dialogPath.getLocalTag());removeSession();for (ImsSessionListener listener : listeners) {listener.onSessionRejected(contact,TerminationReason.TERMINATION_BY_TIMEOUT);}return;case INVITATION_REJECTED_BY_SYSTEM:if (logActivated) {sLogger.debug("Session has been aborted by system");}removeSession();return;case INVITATION_CANCELED:if (logActivated) {sLogger.debug("Session has been rejected by remote");}removeSession();for (ImsSessionListener listener : listeners) {listener.onSessionRejected(contact,TerminationReason.TERMINATION_BY_REMOTE);}return;case INVITATION_ACCEPTED:setSessionAccepted();for (ImsSessionListener listener : listeners) {listener.onSessionAccepting(contact);}break;case INVITATION_DELETED:if (logActivated) {sLogger.debug("Session has been deleted");}removeSession();return;default :throw new IllegalArgumentException("Unknown invitation answer in run; answer=" + answer);}}final SipRequest invite=dialogPath.getInvite();String remoteSdp=invite.getSdpContent();SipUtils.assertContentIsNotNull(remoteSdp,invite);SdpParser parser=new SdpParser(remoteSdp.getBytes(UTF8));Vector<MediaDescription> media=parser.getMediaDescriptions();MediaDescription mediaDesc=media.elementAt(0);MediaAttribute attr1=mediaDesc.getMediaAttribute("path");String remotePath=attr1.getValue();String remoteHost=SdpUtils.extractRemoteHost(parser.sessionDescription,mediaDesc);int remotePort=mediaDesc.mPort;String fingerprint=SdpUtils.extractFingerprint(parser,mediaDesc);String remoteSetup="passive";MediaAttribute attr2=mediaDesc.getMediaAttribute("setup");if (attr2 != null) {remoteSetup=attr2.getValue();}if (logActivated) {sLogger.debug("Remote setup attribute is ".concat(remoteSetup));}String localSetup=createSetupAnswer(remoteSetup);if (logActivated) {sLogger.debug("Local setup attribute is ".concat(localSetup));}int localMsrpPort;if (localSetup.equals("active")) {localMsrpPort=9;} else {localMsrpPort=getMsrpMgr().getLocalMsrpPort();}String ipAddress=dialogPath.getSipStack().getLocalIpAddress();String sdp=SdpUtils.buildChatSDP(ipAddress,localMsrpPort,getMsrpMgr().getLocalSocketProtocol(),getAcceptTypes(),getWrappedTypes(),localSetup,getMsrpMgr().getLocalMsrpPath(),getSdpDirection());dialogPath.setLocalContent(sdp);if (isInterrupted()) {if (logActivated) {sLogger.debug("Session has been interrupted: end of processing");}return;}if (logActivated) {sLogger.info("Send 200 OK");}SipResponse resp=SipMessageFactory.create200OkInviteResponse(dialogPath,getFeatureTags(),sdp);dialogPath.setSigEstablished();SipTransactionContext ctx=getImsService().getImsModule().getSipManager().sendSipMessage(resp);if (localSetup.equals("passive")) {MsrpSession session=getMsrpMgr().createMsrpServerSession(remotePath,this);session.setFailureReportOption(false);session.setSuccessReportOption(false);getMsrpMgr().openMsrpSession();sendEmptyDataChunk();}getImsService().getImsModule().getSipManager().waitResponse(ctx);if (isInterrupted()) {if (sLogger.isActivated()) {sLogger.debug("Session has been interrupted: end of processing");}return;}if (ctx.isSipAck()) {if (logActivated) {sLogger.info("ACK request received");}dialogPath.setSessionEstablished();if (localSetup.equals("active")) {MsrpSession session=getMsrpMgr().createMsrpClientSession(remoteHost,remotePort,remotePath,this,fingerprint);session.setFailureReportOption(false);session.setSuccessReportOption(false);getMsrpMgr().openMsrpSession();sendEmptyDataChunk();}for (ImsSessionListener listener : listeners) {listener.onSessionStarted(contact);}SessionTimerManager sessionTimerManager=getSessionTimerManager();if (sessionTimerManager.isSessionTimerActivated(resp)) {sessionTimerManager.start(SessionTimerManager.UAS_ROLE,dialogPath.getSessionExpireTime());}getActivityManager().start();} else {if (logActivated) {sLogger.debug("No ACK received for INVITE");}handleError(new ChatError(ChatError.SEND_RESPONSE_FAILED));}} catch (PayloadException e) {sLogger.error("Unable to send 200OK response!",e);handleError(new ChatError(ChatError.SEND_RESPONSE_FAILED,e));}catch (NetworkException e) {handleError(new ChatError(ChatError.SEND_RESPONSE_FAILED,e));}catch (RuntimeException e) {sLogger.error("Failed initiating a store & forward session for messages!",e);handleError(new ChatError(ChatError.SEND_RESPONSE_FAILED,e));}}  }
class C{  public static Number round(Number a){  if (isFloatingPoint(a)) {    return Math.round(a.doubleValue());  } else {    return a.longValue();  }}  }
class C{  @Override public Consist addConsist(DccLocoAddress address){  if (consistTable.containsKey(address)) {    return consistTable.get(address);  }  XNetConsist consist;  consist=new XNetConsist(address,tc,systemMemo);  consistTable.put(address,consist);  return (consist);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:34.922 -0500",hash_original_method="3167ECA848A59D0FB98E0257E20EB2C0",hash_generated_method="ACC8505AA35F49E36D783FB341A67AE3") public X509Principal(String dirName){  super(dirName);}  }
class C{  private File showSaveDialogNative(final File file){  FileDialog chooser=new FileDialog(new JFrame(),"Save",FileDialog.SAVE);  chooser.setDirectory(getCurrentLocation());  if (file != null) {    if (exts.size() >= 1) {      chooser.setFilenameFilter(new ExtensionSetFileFilter(exts.keySet(),description));      chooser.setFile(addExtension(file,new ExtensionSetFileFilter(exts.keySet(),description)).getName());    } else {      chooser.setFile(file.getName());    }  }  chooser.setVisible(true);  if (chooser.getFile() == null) {    return null;  } else {    currentDirectory=chooser.getDirectory();    return new File(chooser.getDirectory() + FS + chooser.getFile());  }}  }
class C{  protected ClientConnectionManager createConnectionManager(SchemeRegistry schemeRegistry,BasicHttpParams httpParams){  return new ThreadSafeClientConnManager(httpParams,schemeRegistry);}  }
class C{  public Vec3D tangentPlaneNormalAt(ReadonlyVec3D q){  return q.sub(this).normalize();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  double sum;  int[] dX;  int[] dY;  double[] weights;  int numPixelsInFilter;  boolean reflectAtBorders=true;  double centreValue;  String filterSize="3 x 3 (1)";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  filterSize=args[2].toLowerCase().replace("\u00D7","x");  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    if (filterSize.equals("3 x 3 (1)")) {      weights=new double[]{0,-1,0,-1,4,-1,0,-1,0};      dX=new int[]{-1,0,1,-1,0,1,-1,0,1};      dY=new int[]{-1,-1,-1,0,0,0,1,1,1};    } else     if (filterSize.equals("3 x 3 (2)")) {      weights=new double[]{0,-1,0,-1,5,-1,0,-1,0};      dX=new int[]{-1,0,1,-1,0,1,-1,0,1};      dY=new int[]{-1,-1,-1,0,0,0,1,1,1};    } else     if (filterSize.equals("3 x 3 (3)")) {      weights=new double[]{-1,-1,-1,-1,8,-1,-1,-1,-1};      dX=new int[]{-1,0,1,-1,0,1,-1,0,1};      dY=new int[]{-1,-1,-1,0,0,0,1,1,1};    } else     if (filterSize.equals("3 x 3 (4)")) {      weights=new double[]{1,-2,1,-2,4,-2,1,-2,1};      dX=new int[]{-1,0,1,-1,0,1,-1,0,1};      dY=new int[]{-1,-1,-1,0,0,0,1,1,1};    } else     if (filterSize.equals("5 x 5 (1)")) {      weights=new double[]{0,0,-1,0,0,0,-1,-2,-1,0,-1,-2,17,-2,-1,0,-1,-2,-1,0,0,0,-1,0,0};      dX=new int[]{-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2};      dY=new int[]{-2,-2,-2,-2,-2,-1,-1,-1,-1,-1,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2};    } else {      weights=new double[]{0,0,-1,0,0,0,-1,-2,-1,0,-1,-2,16,-2,-1,0,-1,-2,-1,0,0,0,-1,0,0};      dX=new int[]{-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2};      dY=new int[]{-2,-2,-2,-2,-2,-1,-1,-1,-1,-1,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2};    }    numPixelsInFilter=dX.length;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=inputFile.getValue(row,col);        if (centreValue != noData) {          sum=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z == noData) {              z=centreValue;            }            sum+=z * weights[a];          }          outputFile.setValue(row,col,sum);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void compose(StylesheetRoot sroot) throws javax.xml.transform.TransformerException {  super.compose(sroot);  java.util.Vector vnames=sroot.getComposeState().getVariableNames();  if (null != m_matchPattern)   m_matchPattern.fixupVariables(vnames,sroot.getComposeState().getGlobalsSize());  if (null != m_use)   m_use.fixupVariables(vnames,sroot.getComposeState().getGlobalsSize());}  }
class C{  public boolean isDisplayValues(){  return mDisplayValues;}  }
class C{  void register(RTEditTextListener listener,RTMediaFactory<RTImage,RTAudio,RTVideo> mediaFactory){  mListener=listener;  mMediaFactory=mediaFactory;}  }
class C{  public static List<? extends Element> childElementList(Element element,String childElementName){  if (element == null)   return null;  List<Element> elements=new LinkedList<Element>();  Node node=element.getFirstChild();  if (node != null) {    do {      if (node.getNodeType() == Node.ELEMENT_NODE && (childElementName == null || childElementName.equals(node.getNodeName()))) {        Element childElement=(Element)node;        elements.add(childElement);      }    } while ((node=node.getNextSibling()) != null);  }  return elements;}  }
class C{  public int installFunction(String name,Class func){  int funcIndex;  Object funcIndexObj=getFunctionID(name);  if (null != funcIndexObj) {    funcIndex=((Integer)funcIndexObj).intValue();    if (funcIndex < NUM_BUILT_IN_FUNCS) {      funcIndex=m_funcNextFreeIndex++;      m_functionID_customer.put(name,new Integer(funcIndex));    }    m_functions_customer[funcIndex - NUM_BUILT_IN_FUNCS]=func;  } else {    funcIndex=m_funcNextFreeIndex++;    m_functions_customer[funcIndex - NUM_BUILT_IN_FUNCS]=func;    m_functionID_customer.put(name,new Integer(funcIndex));  }  return funcIndex;}  }
class C{  public Bundler putDoubleArray(String key,double[] value){  bundle.putDoubleArray(key,value);  return this;}  }
class C{  public void testSharedClasspathNotNull() throws Exception {  AbstractInstalledLocalContainer container=new AbstractInstalledLocalContainerStub(configuration);  assertNotNull(container.getSharedClasspath());  assertEquals(0,container.getSharedClasspath().length);}  }
class C{  @Override public Boolean visitWildcard_Wildcard(final AnnotatedWildcardType type1,final AnnotatedWildcardType type2,final VisitHistory visited){  if (visited.contains(type1,type2)) {    return true;  }  visited.add(type1,type2);  return areEqual(type1.getExtendsBound(),type2.getExtendsBound(),visited) && areEqual(type1.getSuperBound(),type2.getSuperBound(),visited);}  }
class C{  public static double MCSCE2maxFitness(GEPIndividual ind){  return (1000.0);}  }
class C{  public static int realignTo(boolean logRealign,double val,boolean roundUp,int gridSize){  double alignedVal=val;  double mod=val % gridSize;  if (mod != 0) {    alignedVal-=mod;    if (val > 0 && roundUp) {      alignedVal+=gridSize;    }    if (val < 0 && !roundUp) {      alignedVal-=gridSize;    }    if (logRealign) {      log.error("realignToGrid from " + val + " to "+ alignedVal);    }  }  return (int)alignedVal;}  }
class C{  @Override public String toString(){  return toString(null);}  }
class C{  public static ImmutableList<ChildNumber> concat(List<ChildNumber> path,List<ChildNumber> path2){  return ImmutableList.<ChildNumber>builder().addAll(path).addAll(path2).build();}  }
class C{  public boolean isProcessConverted(){  return isProcessConverted;}  }
class C{  @Override public void countExample(Example example){  int label=classNameMap.get(example.getNominalValue(labelAttribute));  int plabel=classNameMap.get(example.getNominalValue(predictedLabelAttribute));  double weight=1.0d;  if (weightAttribute != null) {    weight=example.getValue(weightAttribute);  }  counter[label][plabel]+=weight;}  }
class C{  public static void clearCache(){  fontMap.clear();}  }
class C{  public TermsBuilder order(Terms.Order order){  this.order=order;  return this;}  }
