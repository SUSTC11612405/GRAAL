class C{  @Override public ShapeTileBox offset(double p_dist){  if (p_dist == 0 || is_empty()) {    return this;  }  int dist=(int)Math.round(p_dist);  PlaPointInt lower_left=new PlaPointInt(box_ll.v_x - dist,box_ll.v_y - dist);  PlaPointInt upper_right=new PlaPointInt(box_ur.v_x + dist,box_ur.v_y + dist);  return new ShapeTileBox(lower_left,upper_right);}  }
class C{  public void removeAllChildren(){  children.clear();}  }
class C{  public ClassIDs(File classIDsFile) throws IOException {  this.classIDFile=classIDsFile;  BufferedReader reader=null;  if (classIDFile.isFile()) {    reader=new BufferedReader(new FileReader(classIDFile));    if (classIDFile.length() > 0) {      while (true) {        String entry=reader.readLine();        if (entry == null)         break;        ClassID id=new ClassID(entry);        if (classesByID.containsKey(id.id))         throw new RuntimeException("This classid cache is corrupt! " + classesByID.get(id.id) + " is already assigned id "+ id);        classesByName.put(id.name,id);        classesByID.put(id.id,id);        if (id.id > nextClassID)         nextClassID=id.id;      }      nextClassID++;    }    reader.close();  } else   throw new IOException("Couldn't find file " + classIDsFile);  subclassesOfTextualOutputProducers=new TIntHashSet();  subclassesOfTextualOutputProducers.add(QualifiedClassName.STRING_BUILDER.getID());  subclassesOfTextualOutputProducers.addAll(getSubclassesOf(QualifiedClassName.STRING_BUILDER).toArray());  subclassesOfTextualOutputProducers.add(QualifiedClassName.OUTPUT_STREAM.getID());  subclassesOfTextualOutputProducers.addAll(getSubclassesOf(QualifiedClassName.OUTPUT_STREAM).toArray());  subclassesOfTextualOutputProducers.add(QualifiedClassName.WRITER.getID());  subclassesOfTextualOutputProducers.addAll(getSubclassesOf(QualifiedClassName.WRITER).toArray());}  }
class C{  void flushBuffer() throws IOException {  se.flushBuffer();}  }
class C{  public boolean isAgentGroup(String universalId){  boolean isGroup=false;  try {    AMIdentity amid=IdUtils.getIdentity(getUserSSOToken(),universalId);    isGroup=amid.getType().equals(IdType.AGENTGROUP);  } catch (  IdRepoException e) {    debug.error("AgentModelImpl.getSecurityMechanisms",e);  }  return isGroup;}  }
class C{  @NonNull public static Interpolator divide(Interpolator dividend,float divisor){  return divide(dividend,constant(divisor));}  }
class C{  public boolean hasComment(){  return comment != -1;}  }
class C{  public LineUnavailableException(){  super();}  }
class C{  public void removeAuthRole(String authRole){  if (authRole == null)   return;  if (ROLE_ALL_ROLES.equals(authRole)) {    allRoles=false;    return;  }  if (ROLE_ALL_AUTHENTICATED_USERS.equals(authRole)) {    authenticatedUsers=false;    return;  }  int n=-1;  for (int i=0; i < authRoles.length; i++) {    if (authRoles[i].equals(authRole)) {      n=i;      break;    }  }  if (n >= 0) {    int j=0;    String results[]=new String[authRoles.length - 1];    for (int i=0; i < authRoles.length; i++) {      if (i != n)       results[j++]=authRoles[i];    }    authRoles=results;  }}  }
class C{  public boolean isAccessibleChildSelected(int i){  MenuElement me[]=MenuSelectionManager.defaultManager().getSelectedPath();  if (me != null) {    JMenuItem mi=JMenu.this.getItem(i);    for (int j=0; j < me.length; j++) {      if (me[j] == mi) {        return true;      }    }  }  return false;}  }
class C{  void completeTemplateInitialization(final Map<String,Template> templates) throws DecodeException {  subTemplates=new ArrayList<>();  for (  final String subordinateName : subTemplateNames) {    final Template template=templates.get(subordinateName.toLowerCase());    if (template == null) {      throw DecodeException.fatalError(ERR_ENTRY_GENERATOR_UNDEFINED_TEMPLATE_SUBORDINATE.get(this.name,subordinateName));    }    subTemplates.add(template);  }  ensureAllRDNAttributesAreDefined();}  }
class C{  public void requestSecondsUntilAccountExpiration(){  operations.add(PasswordPolicyStateOperationType.GET_SECONDS_UNTIL_ACCOUNT_EXPIRATION);}  }
class C{  public void test_chooseServerAlias(){  init(SERVER);  assertNull(manager.chooseServerAlias(null,null,new Socket()));  assertNull(manager.chooseServerAlias("",null,new Socket()));  String res=manager.chooseServerAlias(TYPE_RSA,null,null);  assertNotNull(res);  assertEquals("serverkey_00",res.toLowerCase());  res=manager.chooseServerAlias(TYPE_RSA,null,new Socket());  assertNotNull(res);  assertEquals("serverkey_00",res.toLowerCase());}  }
class C{  public void testKeyPairGenerator08() throws IllegalArgumentException {  if (!DSASupported) {    fail(NotSupportMsg);    return;  }  try {    KeyPairGenerator.getInstance(null,validProvider);    fail("NullPointerException or NoSuchAlgorithmException must be thrown  when algorithm is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyPairGenerator.getInstance(invalidValues[i],validProvider);      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(algs[i]).concat(" provider: ").concat(validProviderName).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeattributenodename.class,args);}  }
class C{  @Override public int realReadBytes() throws IOException {  if (closed) {    return -1;  }  if (coyoteRequest == null) {    return -1;  }  if (state == INITIAL_STATE) {    state=BYTE_STATE;  }  int result=coyoteRequest.doRead(bb);  return result;}  }
class C{  private Map mergeWithParent(Map cMap){  String ct=getClientType(cMap);  String parentId=getParentID(cMap);  Map rMap=cMap;  Map pMap=null;  OrderedSet os=new OrderedSet();  while ((parentId != null) && (!ct.equals(parentId))) {    pMap=(Map)mergedClientData.get(parentId);    if (pMap == null) {      debug.error(CLASS + "clientdata null for: " + parentId);      rMap=null;      break;    }    rMap=mergeMap(pMap,cMap);    os.add(parentId);    cMap=rMap;    ct=getClientType(pMap);    parentId=getParentID(pMap);  }  if (rMap != null) {    rMap.put(PARENT_ID,os);  }  return rMap;}  }
class C{  private StringManager(String packageName,Locale locale){  String bundleName=packageName + ".LocalStrings";  ResourceBundle bnd=null;  try {    bnd=ResourceBundle.getBundle(bundleName,locale);  } catch (  MissingResourceException ex) {    ClassLoader cl=Thread.currentThread().getContextClassLoader();    if (cl != null) {      try {        bnd=ResourceBundle.getBundle(bundleName,locale,cl);      } catch (      MissingResourceException ex2) {      }    }  }  bundle=bnd;  if (bundle != null) {    Locale bundleLocale=bundle.getLocale();    if (bundleLocale.equals(Locale.ROOT)) {      this.locale=Locale.ENGLISH;    } else {      this.locale=bundleLocale;    }  } else {    this.locale=null;  }}  }
class C{  public ProtocolException(String detailMessage){  super(detailMessage);}  }
class C{  public boolean equals(NameIdentifier nid){  if (nid != null) {    String name=nid.getName();    String nameQualifier=nid.getNameQualifier();    String format=nid.getFormat();    if ((name.length() == 0) || (!name.equalsIgnoreCase(_name))) {      return false;    }    if (!nameQualifier.equalsIgnoreCase(_nameQualifier)) {      return false;    }    if (!format.equals(_format)) {      return false;    }  } else {    return false;  }  return true;}  }
class C{  void notifyProgress(final ProgressNotificationCallback callback) throws ClientException {  try {    handler.handle(new Callback[]{callback});  } catch (  final Exception e) {    throw new ClientException(ReturnCode.ERROR_UNEXPECTED,ERR_UPGRADE_DISPLAY_NOTIFICATION_ERROR.get(e.getMessage()));  }}  }
class C{  public StateInteractive fanout(ThreadStoppable p_stoppable_thread){  boolean saved_board_read_only=i_brd.is_board_read_only();  i_brd.set_board_read_only(true);  if (p_stoppable_thread != null) {    String start_message=resources.getString("fanout") + " " + resources.getString("stop_message");    i_brd.screen_messages.set_status_message(start_message);  }  Integer not_found_count=0;  Integer found_count=0;  boolean interrupted=false;  Collection<BrdAbitPin> fanout_list=new java.util.LinkedList<BrdAbitPin>();  for (  BrdItem curr_item : items_list) {    if (curr_item instanceof BrdAbitPin) {      fanout_list.add((BrdAbitPin)curr_item);    }  }  int items_to_go_count=fanout_list.size();  i_brd.screen_messages.set_interactive_autoroute_info(found_count,not_found_count,items_to_go_count);  items_list.clear();  boolean ratsnest_hidden_before=i_brd.get_ratsnest().hide();  for (  BrdAbitPin curr_pin : fanout_list) {    if (p_stoppable_thread != null && p_stoppable_thread.is_stop_requested()) {      interrupted=true;      break;    }    r_brd.changed_area_clear();    ArtResult autoroute_result=r_brd.fanout(curr_pin,i_brd.itera_settings,-1,p_stoppable_thread);    if (autoroute_result == ArtResult.ROUTED) {      ++found_count;      i_brd.repaint();    } else     if (autoroute_result != ArtResult.ALREADY_CONNECTED) {      ++not_found_count;    }    --items_to_go_count;    i_brd.screen_messages.set_interactive_autoroute_info(found_count,not_found_count,items_to_go_count);  }  if (p_stoppable_thread != null) {    i_brd.screen_messages.clear();    String curr_message;    if (interrupted) {      curr_message=resources.getString("interrupted");    } else {      curr_message=resources.getString("completed");    }    String end_message=resources.getString("fanout") + " " + curr_message+ ": "+ found_count.toString()+ " "+ resources.getString("connections_found")+ ", "+ not_found_count.toString()+ " "+ resources.getString("connections_not_found");    i_brd.screen_messages.set_status_message(end_message);  }  i_brd.set_board_read_only(saved_board_read_only);  actlog_start_scope(LogfileScope.FANOUT_SELECTED);  i_brd.update_ratsnest();  if (!ratsnest_hidden_before) {    i_brd.get_ratsnest().show();  }  return return_state;}  }
class C{  private String generateDigestMD5Response(String authID,String authzID,ByteSequence password,String realm,String nonce,String cnonce,String nonceCount,String digestURI,String qop,String charset) throws ClientException, UnsupportedEncodingException {  if (md5Digest == null) {    try {      md5Digest=MessageDigest.getInstance("MD5");    } catch (    Exception e) {      LocalizableMessage message=ERR_LDAPAUTH_CANNOT_INITIALIZE_MD5_DIGEST.get(getExceptionMessage(e));      throw new ClientException(ReturnCode.CLIENT_SIDE_LOCAL_ERROR,message,e);    }  }  String a1String1=authID + ':' + ((realm == null) ? "" : realm)+ ':';  byte[] a1Bytes1a=a1String1.getBytes(charset);  byte[] a1Bytes1=new byte[a1Bytes1a.length + password.length()];  System.arraycopy(a1Bytes1a,0,a1Bytes1,0,a1Bytes1a.length);  password.copyTo(a1Bytes1,a1Bytes1a.length);  byte[] urpHash=md5Digest.digest(a1Bytes1);  StringBuilder a1String2=new StringBuilder();  a1String2.append(':');  a1String2.append(nonce);  a1String2.append(':');  a1String2.append(cnonce);  if (authzID != null) {    a1String2.append(':');    a1String2.append(authzID);  }  byte[] a1Bytes2a=a1String2.toString().getBytes(charset);  byte[] a1Bytes2=new byte[urpHash.length + a1Bytes2a.length];  System.arraycopy(urpHash,0,a1Bytes2,0,urpHash.length);  System.arraycopy(a1Bytes2a,0,a1Bytes2,urpHash.length,a1Bytes2a.length);  byte[] a1Hash=md5Digest.digest(a1Bytes2);  byte[] a2Bytes=("AUTHENTICATE:" + digestURI).getBytes(charset);  byte[] a2Hash=md5Digest.digest(a2Bytes);  String a1HashHex=getHexString(a1Hash);  String a2HashHex=getHexString(a2Hash);  String kdStr=a1HashHex + ':' + nonce+ ':'+ nonceCount+ ':'+ cnonce+ ':'+ qop+ ':'+ a2HashHex;  return getHexString(md5Digest.digest(kdStr.getBytes(charset)));}  }
class C{  public void addField(PdfFormField field){  PdfPage page;  if (document.getNumberOfPages() == 0) {    document.addNewPage();  }  page=document.getLastPage();  addField(field,page);}  }
class C{  public boolean isSubConfigSupported(){  return supportSubConfig;}  }
class C{  public boolean isEmpty(){  return true;}  }
class C{  public static String format(String pattern,Map arguments){  MapFormat temp=new MapFormat(arguments);  return temp.format(pattern);}  }
class C{  public boolean useStartTLS(){  return useStartTLSArg.isPresent();}  }
class C{  @Override public boolean isGroupingUsed(){  return ndf.isGroupingUsed();}  }
class C{  public Set<IPrivilege> search(Subject adminSubject,String realm,BufferedIterator iterator,ResourceSearchIndexes indexes,Set<String> subjectIndexes,boolean bSubTree,Set<String> excludeDNs) throws EntitlementException {  SSOToken token=getSSOToken(adminSubject);  Set<IPrivilege> results=searchPrivileges(realm,iterator,indexes,subjectIndexes,bSubTree,excludeDNs);  int countInt=getNumberOfReferrals(realm);  if (countInt > 0) {    results.addAll(searchReferral(token,realm,iterator,indexes,bSubTree,excludeDNs));  }  return results;}  }
class C{  public MarshalException(){  super();}  }
class C{  public java.util.List<HDR> subList(int index1,int index2){  return this.hlist.subList(index1,index2);}  }
class C{  private void pop(final int elements){  if (outputStackTop >= elements) {    outputStackTop-=elements;  } else {    owner.inputStackTop-=elements - outputStackTop;    outputStackTop=0;  }}  }
class C{  public static void chmodFileReadOnly(File f) throws IOException {  if (!(f.setReadOnly() && f.setReadable(false,false) && f.setReadable(true,true))) {  }}  }
class C{  public void logModifyDNRequest(ModifyDNOperation modifyDNOperation){}  }
class C{  @KnownFailure("Fixed on DonutBurger, Wrong Exception thrown") public void test_unwrap_ByteBuffer$ByteBuffer_03(){  String host="new host";  int port=8080;  ByteBuffer[] bbA={ByteBuffer.allocate(100),ByteBuffer.allocate(10),ByteBuffer.allocate(100)};  ByteBuffer[] bbN={ByteBuffer.allocate(100),null,ByteBuffer.allocate(100)};  ByteBuffer[] bbAN=null;  ByteBuffer bb=ByteBuffer.allocate(10);  ByteBuffer bN=null;  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.unwrap(bN,bbA);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iobe) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  try {    sse.unwrap(bb,bbAN);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iobe) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  try {    sse.unwrap(bb,bbN);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iobe) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  try {    sse.unwrap(bN,bbAN);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iobe) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }}  }
class C{  public void updatePasswordHistory(){  for (  Attribute a : userEntry.getAllAttributes(passwordPolicy.getPasswordAttribute())) {    ByteString insecurePassword=null;    for (    ByteString v : a) {      try {        PasswordStorageScheme<?> scheme=getPasswordStorageScheme(v);        if (scheme.isStorageSchemeSecure()) {          addPasswordToHistory(v.toString());          insecurePassword=null;          break;        } else         if (insecurePassword == null) {          insecurePassword=v;        }      } catch (      DirectoryException e) {        if (logger.isTraceEnabled()) {          logger.trace("Encoded password " + v + " cannot be decoded and cannot be added to history.");        }      }    }    if (insecurePassword != null) {      addPasswordToHistory(insecurePassword.toString());    }  }}  }
class C{  public final boolean containsDescriptor(final MetadataDescriptor lookup){  assert lookup != null;  return this.descriptors.containsKey(this.perfPoint.setDescriptor(lookup));}  }
class C{  public SCSAML2SOAPBindingModelImpl(HttpServletRequest req,Map map) throws AMConsoleException {  super(req,SERVICE_NAME,map);}  }
class C{  public java.lang.String toString(boolean includeNS,boolean declareNS){  StringBuffer xml=new StringBuffer(3000);  String NS="";  String appendNS="";  if (declareNS)   NS=sc.assertionDeclareStr;  if (includeNS)   appendNS="saml:";  xml.append("<").append(appendNS).append("Conditions").append(" ").append(NS).append(" ");  if (_notBefore != null) {    xml.append("NotBefore").append("=\"").append(DateUtils.toUTCDateFormat(_notBefore)).append("\"").append(" ");  }  if (_notOnOrAfter != null) {    xml.append("NotOnOrAfter").append("=\"").append(DateUtils.toUTCDateFormat(_notOnOrAfter)).append("\"").append(" ");  }  xml.append(">").append(sc.NL);  Iterator it;  if (_arcs.size() > 0) {    it=_arcs.iterator();    while (it.hasNext()) {      xml.append(((AudienceRestrictionCondition)it.next()).toString(includeNS,false));    }  }  if (doNotCache != null) {    xml.append(doNotCache.toString(includeNS,false));  }  String o=SAMLUtilsCommon.makeEndElementTagXML("Conditions",includeNS);  xml.append(o);  return xml.toString();}  }
class C{  ASN1InputStreamReader(final InputStream stream,final int maxElementSize){  this.in=stream;  this.maxElementSize=maxElementSize;}  }
class C{  public ExternalSASLMechanismHandler(){  super();}  }
class C{  public DERUTCTime(Date time){  SimpleDateFormat dateF=new SimpleDateFormat("yyMMddHHmmss'Z'");  dateF.setTimeZone(new SimpleTimeZone(0,"Z"));  this.time=Strings.toByteArray(dateF.format(time));}  }
class C{  public JButton(Icon icon){  this(null,icon);}  }
class C{  public DisplayMode(int width,int height,int bitDepth,int refreshRate){  this.size=new Dimension(width,height);  this.bitDepth=bitDepth;  this.refreshRate=refreshRate;}  }
class C{  public int compare(Object o1,Object o2){  AttributeSchema attr1=(AttributeSchema)o1;  AttributeSchema attr2=(AttributeSchema)o2;  if (collator != null) {    return collator.compare(attr1.getI18NKey(),attr2.getI18NKey());  } else {    return attr1.getI18NKey().compareTo(attr2.getI18NKey());  }}  }
class C{  private static String initialise(Token currentToken,int[][] expectedTokenSequences,String[] tokenImage){  StringBuffer expected=new StringBuffer();  int maxSize=0;  for (int i=0; i < expectedTokenSequences.length; i++) {    if (maxSize < expectedTokenSequences[i].length) {      maxSize=expectedTokenSequences[i].length;    }    for (int j=0; j < expectedTokenSequences[i].length; j++) {      expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');    }    if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {      expected.append("...");    }    expected.append(System.lineSeparator()).append("    ");  }  String retval="Encountered \"";  Token tok=currentToken.next;  for (int i=0; i < maxSize; i++) {    if (i != 0)     retval+=" ";    if (tok.kind == 0) {      retval+=tokenImage[0];      break;    }    retval+=" " + tokenImage[tok.kind];    retval+=" \"";    retval+=add_escapes(tok.image);    retval+=" \"";    tok=tok.next;  }  retval+="\" at line " + currentToken.next.beginLine + ", column "+ currentToken.next.beginColumn;  retval+="." + System.lineSeparator();  if (expectedTokenSequences.length == 1) {    retval+="Was expecting:" + System.lineSeparator() + "    ";  } else {    retval+="Was expecting one of:" + System.lineSeparator() + "    ";  }  retval+=expected.toString();  return retval;}  }
class C{  int appendSlot(int w0,int w1,int w2,int w3){{    final int slotsize=4;    int newoffset=(lastUsed + 1) * slotsize;    int chunkpos=newoffset >> lowbits;    int slotpos=(newoffset & lowmask);    if (chunkpos > chunks.size() - 1)     chunks.addElement(new int[chunkalloc]);    int[] chunk=chunks.elementAt(chunkpos);    chunk[slotpos]=w0;    chunk[slotpos + 1]=w1;    chunk[slotpos + 2]=w2;    chunk[slotpos + 3]=w3;    return ++lastUsed;  }}  }
class C{  @Override @Deprecated public Object resolveVariable(String pName) throws ELException {  ELContext ctx=this.getELContext();  return ctx.getELResolver().getValue(ctx,null,pName);}  }
class C{  public boolean validate(int validateAction,String sql){  if (this.isDiscarded()) {    return false;  }  if (!doValidate(validateAction)) {    return true;  }  long now=System.currentTimeMillis();  if (validateAction != VALIDATE_INIT && poolProperties.getValidationInterval() > 0 && (now - this.lastValidated) < poolProperties.getValidationInterval()) {    return true;  }  if (poolProperties.getValidator() != null) {    if (poolProperties.getValidator().validate(connection,validateAction)) {      this.lastValidated=now;      return true;    } else {      if (getPoolProperties().getLogValidationErrors()) {        log.error("Custom validation through " + poolProperties.getValidator() + " failed.");      }      return false;    }  }  String query=sql;  if (validateAction == VALIDATE_INIT && poolProperties.getInitSQL() != null) {    query=poolProperties.getInitSQL();  }  if (query == null) {    query=poolProperties.getValidationQuery();  }  Statement stmt=null;  try {    stmt=connection.createStatement();    int validationQueryTimeout=poolProperties.getValidationQueryTimeout();    if (validationQueryTimeout > 0) {      stmt.setQueryTimeout(validationQueryTimeout);    }    stmt.execute(query);    stmt.close();    this.lastValidated=now;    return true;  } catch (  Exception ex) {    if (getPoolProperties().getLogValidationErrors()) {      log.warn("SQL Validation error",ex);    } else     if (log.isDebugEnabled()) {      log.debug("Unable to validate object:",ex);    }    if (stmt != null)     try {      stmt.close();    } catch (    Exception ignore2) {    }  }  return false;}  }
class C{  private void createMoveFielsNode(final Element rootElement){  Element element=creator.getDocument().createElement("MoveFiles");  element.setAttribute("moved",String.valueOf(this.filesMoved));  element.setAttribute("movedTotal",String.valueOf(this.movedAll + this.filesMoved));  rootElement.appendChild(element);}  }
class C{  public void testConnect_NonBlockWithServer() throws IOException {  this.channel1.configureBlocking(false);  connectLocalServer();  datagramSocket1.close();  disconnectAfterConnected();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapgetnameditemns03.class,args);}  }
class C{  public static void main(final String[] args){  final int retCode=new LDAPPasswordModify().run(args);  System.exit(filterExitCode(retCode));}  }
class C{  private void updateCOTAttrInConfig(String realm,List configList,String cotName,EntityConfigElement entityConfig,ObjectFactory objFactory,IDFFMetaManager idffMetaMgr) throws IDFFMetaException, JAXBException {  boolean foundCOT=false;  for (Iterator iter=configList.iterator(); iter.hasNext(); ) {    BaseConfigType bConfig=(BaseConfigType)iter.next();    List list=bConfig.getAttribute();    for (Iterator iter2=list.iterator(); iter2.hasNext(); ) {      AttributeType avp=(AttributeType)iter2.next();      if (avp.getName().trim().equalsIgnoreCase(COT_LIST)) {        foundCOT=true;        List avpl=avp.getValue();        if (avpl.isEmpty() || !containsValue(avpl,cotName)) {          avpl.add(cotName);          idffMetaMgr.setEntityConfig(realm,entityConfig);          break;        }      }    }    if (!foundCOT) {      AttributeType atype=objFactory.createAttributeType();      atype.setName(COT_LIST);      atype.getValue().add(cotName);      list.add(atype);      idffMetaMgr.setEntityConfig(realm,entityConfig);    }  }}  }
class C{  public void stopEncryption(){  if (false) {    StaticUtils.close(secureSocket);  }  input=new BufferedInputStream(plainInput);  output=new BufferedOutputStream(plainOutput);  isEncrypted=false;}  }
class C{  public int indexOfTab(Icon icon){  for (int i=0; i < getTabCount(); i++) {    Icon tabIcon=getIconAt(i);    if ((tabIcon != null && tabIcon.equals(icon)) || (tabIcon == null && tabIcon == icon)) {      return i;    }  }  return -1;}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  out.writeUTF(serializedData);  if (certs == null) {    out.writeInt(0);  } else {    out.writeInt(certs.length);    for (int i=0; i < certs.length; i++) {      out.writeObject(certs[i]);    }  }}  }
class C{  public CompositeData remove(Object[] key){  checkKeyType(key);  return dataMap.remove(Arrays.asList(key));}  }
class C{  public static SearchRequest newSearchRequest(final String name,final SearchScope scope,final String filter) throws DirectoryException {  return newSearchRequest(DN.valueOf(name),scope,SearchFilter.createFilterFromString(filter));}  }
class C{  public static Pnt cross(Pnt[] matrix){  int len=matrix.length + 1;  if (len != matrix[0].dimension())   throw new IllegalArgumentException("Dimension mismatch");  boolean[] columns=new boolean[len];  for (int i=0; i < len; i++)   columns[i]=true;  double[] result=new double[len];  int sign=1;  try {    for (int i=0; i < len; i++) {      columns[i]=false;      result[i]=sign * determinant(matrix,0,columns);      columns[i]=true;      sign=-sign;    }  } catch (  ArrayIndexOutOfBoundsException e) {    throw new IllegalArgumentException("Matrix is wrong shape");  }  return new Pnt(result);}  }
class C{  public static int countByField2(boolean field2){  return getPersistence().countByField2(field2);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateelementcasesensitive.class,args);}  }
class C{  public static Set combineOCs(Set one,Set two){  if (one == null || one.isEmpty()) {    return two;  }  if (two == null || two.isEmpty()) {    return one;  }  Set resultSet=new HashSet();  Iterator itr1=one.iterator();  while (itr1.hasNext()) {    String value1=(String)itr1.next();    resultSet.add(value1.toLowerCase());  }  Iterator itr2=two.iterator();  while (itr2.hasNext()) {    String value2=(String)itr2.next();    resultSet.add(value2.toLowerCase());  }  return resultSet;}  }
class C{  public boolean equals(Object obj){  if (obj instanceof AttributeSet) {    AttributeSet attrs=(AttributeSet)obj;    return ((getAttributeCount() == attrs.getAttributeCount()) && containsAttributes(attrs));  }  return false;}  }
class C{  public void deleteStaticGroups(Set groupDNs) throws AMException, SSOException {  Iterator iter=groupDNs.iterator();  while (iter.hasNext()) {    String groupDN=(String)iter.next();    AMStaticGroup group=new AMStaticGroupImpl(super.token,groupDN);    group.delete();  }}  }
class C{  public void replaceReferral(String referralName,Referral referral) throws NameNotFoundException {  if (!referrals.containsKey(referralName)) {    String[] objs={referralName};    throw (new NameNotFoundException(ResBundleUtils.rbName,"name_not_present",objs,referralName,PolicyException.REFERRAL_COLLECTION));  }  referrals.put(referralName,referral);}  }
class C{  public void logEvent(String eventName,double valueToSum,Bundle parameters){  logEvent(eventName,valueToSum,parameters,false);}  }
class C{  public String toString(){  if (options == null) {    return module + " " + flag;  } else {    return module + " " + flag+ " "+ options;  }}  }
class C{  public String encode(final String pString,final String charset) throws EncoderException {  if (pString == null) {    return null;  }  try {    return encodeText(pString,charset);  } catch (  UnsupportedEncodingException e) {    throw new EncoderException(e.getMessage());  }}  }
class C{  public static void handleTypeMismatchError(XMLSerializer serializer,Object parentObject,String fieldName,Object childObject) throws AbortSerializationException {  ValidationEvent ve=new ValidationEventImpl(ValidationEvent.ERROR,Messages.format(Messages.ERR_TYPE_MISMATCH,getUserFriendlyTypeName(parentObject),fieldName,getUserFriendlyTypeName(childObject)),new ValidationEventLocatorExImpl(parentObject,fieldName));  serializer.reportError(ve);}  }
class C{  public void close() throws IOException {  long length=cache.getLength();  seek(length);  flushBefore(length);  super.close();  cache.reset();  cache=null;  stream=null;}  }
class C{  public boolean isObsolete(){  return isObsolete;}  }
class C{  public void addSigner(PrivateKey key,X509Certificate cert,String digestOID,AttributeTable signedAttr,AttributeTable unsignedAttr) throws IllegalArgumentException {  addSigner(key,cert,getEncOID(key,digestOID),digestOID,signedAttr,unsignedAttr);}  }
class C{  static <T>void sort(T[] a,int lo,int hi,Comparator<? super T> c,T[] work,int workBase,int workLen){  assert c != null && a != null && lo >= 0 && lo <= hi && hi <= a.length;  int nRemaining=hi - lo;  if (nRemaining < 2)   return;  if (nRemaining < MIN_MERGE) {    int initRunLen=countRunAndMakeAscending(a,lo,hi,c);    binarySort(a,lo,hi,lo + initRunLen,c);    return;  }  TimSort<T> ts=new TimSort<>(a,c,work,workBase,workLen);  int minRun=minRunLength(nRemaining);  do {    int runLen=countRunAndMakeAscending(a,lo,hi,c);    if (runLen < minRun) {      int force=nRemaining <= minRun ? nRemaining : minRun;      binarySort(a,lo,lo + force,lo + runLen,c);      runLen=force;    }    ts.pushRun(lo,runLen);    ts.mergeCollapse();    lo+=runLen;    nRemaining-=runLen;  } while (nRemaining != 0);  assert lo == hi;  ts.mergeForceCollapse();  assert ts.stackSize == 1;}  }
class C{  void constructNode(String nodeName,String prefix,String nodeNamespace,TransformerImpl transformer) throws TransformerException {  boolean shouldAddAttrs;  try {    SerializationHandler rhandler=transformer.getResultTreeHandler();    if (null == nodeName) {      shouldAddAttrs=false;    } else {      if (null != prefix) {        rhandler.startPrefixMapping(prefix,nodeNamespace,true);      }      rhandler.startElement(nodeNamespace,QName.getLocalPart(nodeName),nodeName);      super.execute(transformer);      shouldAddAttrs=true;    }    transformer.executeChildTemplates(this,shouldAddAttrs);    if (null != nodeName) {      rhandler.endElement(nodeNamespace,QName.getLocalPart(nodeName),nodeName);      if (null != prefix) {        rhandler.endPrefixMapping(prefix);      }    }  } catch (  SAXException se) {    throw new TransformerException(se);  }}  }
class C{  public IOException(String message,Object obj){  this(message);  this.obj=obj;}  }
class C{  protected JButton createArrowButton(){  JButton button=new BasicArrowButton(BasicArrowButton.SOUTH,UIManager.getColor("ComboBox.buttonBackground"),UIManager.getColor("ComboBox.buttonShadow"),UIManager.getColor("ComboBox.buttonDarkShadow"),UIManager.getColor("ComboBox.buttonHighlight"));  button.setName("ComboBox.arrowButton");  return button;}  }
class C{  protected PStmtKey createKey(final String sql,final int resultSetType,final int resultSetConcurrency){  String catalog=null;  try {    catalog=getCatalog();  } catch (  final SQLException e) {  }  return new PStmtKey(normalizeSQL(sql),catalog,resultSetType,resultSetConcurrency);}  }
class C{  private StartupCommandsHolder unmarshalStartupCommands(String file) throws JAXBException, FileNotFoundException, XMLStreamException {  JAXBContext context=JAXBContext.newInstance(StartupCommandsHolder.class);  Unmarshaller um=context.createUnmarshaller();  XMLInputFactory xif=XMLInputFactory.newFactory();  xif.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES,false);  xif.setProperty(XMLInputFactory.SUPPORT_DTD,false);  XMLStreamReader xsr=xif.createXMLStreamReader(new FileInputStream(file));  return (StartupCommandsHolder)um.unmarshal(xsr);}  }
class C{  public void invoke(Context context,Map<String,Object> syncFailure,Exception failureCause) throws SyncHandlerException {  if (null == scriptEntry) {    throw new SyncHandlerException("No script registered");  }  Script script=scriptEntry.getScript(context);  script.put("context",context);  script.put("syncFailure",syncFailure);  script.put("failureCause",failureCause);  script.put("failureHandlers",builtInHandlers);  try {    script.eval();  } catch (  Exception e) {    logger.debug("sync failure script on {} encountered exception",syncFailure.get("systemIdentifier"),e);    throw new SyncHandlerException("Issue with handling the failure during synchronize " + syncFailure.get("uid") + " object: "+ failureCause.getMessage()+ ". Failure handling reported "+ e.getMessage(),e);  }}  }
class C{  public void copyTo(byte[] buffer){  copyTo(0,buffer,0,buffer.length);}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  logger.info("shootme: got an ACK! ");  logger.info("Dialog = " + requestEvent.getDialog());  if (requestEvent.getDialog() != null) {    logger.info("Dialog State = " + requestEvent.getDialog().getState());  }  this.ackSeen=true;}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  public NotContextException(String explanation){  super(explanation);}  }
class C{  @Override public boolean removeAll(Collection<?> collection){  boolean result=false;  if (size() <= collection.size()) {    Iterator<?> it=iterator();    while (it.hasNext()) {      if (collection.contains(it.next())) {        it.remove();        result=true;      }    }  } else {    Iterator<?> it=collection.iterator();    while (it.hasNext()) {      result=remove(it.next()) || result;    }  }  return result;}  }
class C{  public BrdAreaConduction insert_conduction_area(PlaArea p_area,int p_layer,NetNosList p_net_no_arr,int p_clearance_class,boolean p_is_obstacle,ItemFixState p_fixed_state){  if (p_area == null) {    System.out.println("BasicBoard.insert_conduction_area: p_area is null");    return null;  }  BrdAreaConduction cc_area=new BrdAreaConduction(p_area,p_layer,PlaVectorInt.ZERO,0,false,p_net_no_arr,p_clearance_class,0,0,null,p_is_obstacle,p_fixed_state,this);  insert_item(cc_area);  return cc_area;}  }
class C{  public void removeQValue(){  super.removeParameter(ParameterNames.Q);}  }
class C{  public PushNotificationException(String message,Throwable throwable){  super(message,throwable);}  }
class C{  @Override protected void onStartLoading(){  super.onStartLoading();  if (objectToRetain != null) {    deliverResult(objectToRetain);  } else {    forceLoad();  }}  }
class C{  static <T>IntStream makeInt(AbstractPipeline<?,Integer,?> upstream){  return new OfInt(upstream);}  }
class C{  @NonNull public final Closeable consume(@NonNull Runnable run){  RunnableUpdatable ru=new RunnableUpdatable(this,run);  addUpdatable(ru);  return ru;}  }
class C{  public boolean isAcquired(){  return acquired;}  }
class C{  public static BindResult copyOfBindResult(final BindResult result){  return new BindResultImpl(result);}  }
class C{  public MapDemo(Channel channel,String mapName){  map=new LazyReplicatedMap<>(null,channel,5000,mapName,null);  table=SimpleTableDemo.createAndShowGUI(map,channel.getLocalMember(false).getName());  channel.addChannelListener(this);  channel.addMembershipListener(this);  this.messageReceived(null,null);}  }
class C{  public ARCFOUREncryption(){}  }
class C{  @Override public void clear(){  cache.clear();  rules.clear();}  }
class C{  public static void handleException(Exception ex,StackLogger stackLogger){  System.err.println("Unexpected internal error  " + ex.getMessage());  stackLogger.logError("UNEXPECTED INTERNAL ERROR " + ex.getMessage());  ex.printStackTrace();  stackLogger.logException(ex);  throw new RuntimeException("Unexpected internal error !! " + ex.getMessage(),ex);}  }
class C{  public static boolean isTimeValid(Assertion assertion,int timeskew){  String classMethod="WSFederationUtils.isTimeValid: ";  long timeNow=currentTimeMillis();  Date notOnOrAfter=assertion.getConditions().getNotOnorAfter();  String assertionID=assertion.getAssertionID();  if (notOnOrAfter == null) {    String[] data={LogUtil.isErrorLoggable(Level.FINER) ? assertion.toString(true,true) : assertionID};    LogUtil.error(Level.INFO,LogUtil.MISSING_CONDITIONS_NOT_ON_OR_AFTER,data,null);    return false;  } else   if ((notOnOrAfter.getTime() + timeskew * 1000) < timeNow) {    String[] data={LogUtil.isErrorLoggable(Level.FINER) ? assertion.toString(true,true) : assertionID,notOnOrAfter.toString(),Integer.toString(timeskew),(new Date(timeNow)).toString()};    LogUtil.error(Level.INFO,LogUtil.ASSERTION_EXPIRED,data,null);    return false;  }  Date notBefore=assertion.getConditions().getNotBefore();  if (notBefore == null) {    String[] data={LogUtil.isErrorLoggable(Level.FINER) ? assertion.toString(true,true) : assertionID};    LogUtil.error(Level.INFO,LogUtil.MISSING_CONDITIONS_NOT_BEFORE,data,null);    return false;  } else   if ((notBefore.getTime() - timeskew * 1000) > timeNow) {    String[] data={LogUtil.isErrorLoggable(Level.FINER) ? assertion.toString(true,true) : assertionID,notBefore.toString(),Integer.toString(timeskew),(new Date(timeNow)).toString()};    LogUtil.error(Level.INFO,LogUtil.ASSERTION_NOT_YET_VALID,data,null);    return false;  }  return true;}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    System.out.println("shootme: got an ACK! ");    System.out.println("Dialog State = " + dialog.getState());    SipProvider provider=(SipProvider)requestEvent.getSource();    if (!callerSendsBye) {      Request byeRequest=dialog.createRequest(Request.BYE);      ClientTransaction ct=provider.getNewClientTransaction(byeRequest);      dialog.sendRequest(ct);    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  private static float patternMatchVariance(int[] counters,int[] pattern,float maxIndividualVariance){  int numCounters=counters.length;  int total=0;  int patternLength=0;  for (int i=0; i < numCounters; i++) {    total+=counters[i];    patternLength+=pattern[i];  }  if (total < patternLength) {    return Float.POSITIVE_INFINITY;  }  float unitBarWidth=(float)total / patternLength;  maxIndividualVariance*=unitBarWidth;  float totalVariance=0.0f;  for (int x=0; x < numCounters; x++) {    int counter=counters[x];    float scaledPattern=pattern[x] * unitBarWidth;    float variance=counter > scaledPattern ? counter - scaledPattern : scaledPattern - counter;    if (variance > maxIndividualVariance) {      return Float.POSITIVE_INFINITY;    }    totalVariance+=variance;  }  return totalVariance / total;}  }
class C{  public void appendInt(int val){  buf[pos++]=(byte)((val >>> 8) & 0xFF);  buf[pos++]=(byte)(val & 0xFF);}  }
class C{  public String toString(){  return "[" + minimum + ","+ preferred+ ","+ maximum+ "]@"+ alignment;}  }
class C{  public Double(double x,double y,double w,double h){  setFrame(x,y,w,h);}  }
class C{  void addNameToNameTree(String key,PdfObject value,PdfName treeType){  getNameTree(treeType).addEntry(key,value);}  }
class C{  protected String[] parseParamValues(StringBuilder cmd,int start,int count){  int valIndex=0;  boolean inside=false;  String[] vals=new String[count];  StringBuilder sb=new StringBuilder();  char endQuote=0;  for (int bIdx=start; bIdx < cmd.length(); bIdx++) {    if (!inside) {      while (bIdx < cmd.length() && !isQuote(cmd.charAt(bIdx)))       bIdx++;      if (bIdx >= cmd.length())       break;      inside=!inside;      endQuote=cmd.charAt(bIdx);    } else {      boolean escaped=false;      for (; bIdx < cmd.length(); bIdx++) {        char c=cmd.charAt(bIdx);        if (c == '\\' && !escaped) {          escaped=true;          continue;        }        if (c == endQuote && !escaped)         break;        if (c == '$' && escaped)         sb.append('\\');        escaped=false;        sb.append(c);      }      if (bIdx == cmd.length())       return null;      vals[valIndex++]=sb.toString();      sb.delete(0,sb.length());      inside=!inside;    }  }  return vals;}  }
class C{  public void testNegNegFirstLonger(){  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-1,127,-10,-57,-101,1,2,2,2,-96,-16,8,-40,-59,68,-88,-88,16,73};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public boolean containsHeader(String name){  return this._getHttpServletResponse() != null ? this._getHttpServletResponse().containsHeader(name) : internalHeaders.containsKey(name);}  }
class C{  public final void toString(StringBuilder buffer){  if (this.keywordRuleMap != null) {    for (    KeywordBindRule rule : this.keywordRuleMap.values()) {      rule.toString(buffer);      buffer.append(";");    }  }}  }
class C{  public static void logSearchResultDone(SearchOperation searchOperation){  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {    publisher.logSearchResultDone(searchOperation);  }}  }
class C{  public void endCDATA() throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#endCDATA");  if (null != m_lexicalHandler) {    m_lexicalHandler.endCDATA();  }}  }
class C{  public String toString(){  String str="";switch (align) {case LEFT:    str=",align=left";  break;case CENTER:str=",align=center";break;case RIGHT:str=",align=right";break;case LEADING:str=",align=leading";break;case TRAILING:str=",align=trailing";break;}return getClass().getName() + "[hgap=" + hgap+ ",vgap="+ vgap+ str+ "]";}  }
class C{  public static Foo create(long fooId){  return getPersistence().create(fooId);}  }
class C{  public boolean searchScheduledTasks(SearchOperation searchOperation) throws DirectoryException {  SearchFilter filter=searchOperation.getFilter();  schedulerLock.lock();  try {    for (    Task t : tasks.values()) {      DN taskEntryDN=t.getTaskEntryDN();      DNLock lock=readLockEntry(taskEntryDN);      try {        Entry e=t.getTaskEntry().duplicate(true);        if (filter.matchesEntry(e) && !searchOperation.returnEntry(e,null)) {          return false;        }      }  finally {        lock.unlock();      }    }    return true;  }  finally {    schedulerLock.unlock();  }}  }
class C{  protected byte[] serializeSessions(Session[] currentSessions) throws IOException {  ByteArrayOutputStream fos=new ByteArrayOutputStream();  try (ObjectOutputStream oos=new ObjectOutputStream(new BufferedOutputStream(fos))){    oos.writeObject(Integer.valueOf(currentSessions.length));    for (int i=0; i < currentSessions.length; i++) {      ((DeltaSession)currentSessions[i]).writeObjectData(oos);    }    oos.flush();  } catch (  IOException e) {    log.error(sm.getString("deltaManager.unloading.ioe",e),e);    throw e;  }  return fos.toByteArray();}  }
class C{  private void flushInternal() throws IOException {  if (pos > 0) {    out.write(buf,0,pos);  }  pos=0;}  }
class C{  public TransformerException(Throwable e){  super(e.toString());  this.containedException=e;  this.locator=null;}  }
class C{  public PlaPointInt fortyfive_degree_projection(PlaPointInt p_other){  int dx=this.v_x - p_other.v_x;  int dy=this.v_y - p_other.v_y;  double[] dist_arr=new double[4];  dist_arr[0]=Math.abs(dx);  dist_arr[1]=Math.abs(dy);  double diagonal_1=((double)dy - (double)dx) / 2;  double diagonal_2=((double)dy + (double)dx) / 2;  dist_arr[2]=Math.abs(diagonal_1);  dist_arr[3]=Math.abs(diagonal_2);  double min_dist=dist_arr[0];  for (int i=1; i < 4; ++i) {    if (dist_arr[i] < min_dist) {      min_dist=dist_arr[i];    }  }  PlaPointInt result;  if (min_dist == dist_arr[0]) {    result=new PlaPointInt(p_other.v_x,this.v_y);  } else   if (min_dist == dist_arr[1]) {    result=new PlaPointInt(this.v_x,p_other.v_y);  } else   if (min_dist == dist_arr[2]) {    int diagonal_value=(int)diagonal_2;    result=new PlaPointInt(p_other.v_x + diagonal_value,p_other.v_y + diagonal_value);  } else {    int diagonal_value=(int)diagonal_1;    result=new PlaPointInt(p_other.v_x - diagonal_value,p_other.v_y + diagonal_value);  }  return result;}  }
class C{  public CoreTokenException(int errorCode,Object[] params){  this.errorCode=errorCode;  this.params=params;  this.message=getLocalizedMessage(Locale.getDefault());}  }
class C{  void ReconstructPrivateDict(int Font,OffsetItem[] fdPrivate,IndexBaseItem[] fdPrivateBase,OffsetItem[] fdSubrs){  for (int i=0; i < fonts[Font].fdprivateOffsets.length; i++) {    OutputList.addLast(new MarkerItem(fdPrivate[i]));    fdPrivateBase[i]=new IndexBaseItem();    OutputList.addLast(fdPrivateBase[i]);    seek(fonts[Font].fdprivateOffsets[i]);    while (getPosition() < fonts[Font].fdprivateOffsets[i] + fonts[Font].fdprivateLengths[i]) {      int p1=getPosition();      getDictItem();      int p2=getPosition();      if ("Subrs".equals(key)) {        fdSubrs[i]=new DictOffsetItem();        OutputList.addLast(fdSubrs[i]);        OutputList.addLast(new UInt8Item((char)19));      } else       OutputList.addLast(new RangeItem(buf,p1,p2 - p1));    }  }}  }
class C{  private String doRawStream(BOMInputStream bom,BOMInputStream pis,boolean lenient) throws IOException {  String bomEnc=bom.getBOMCharsetName();  String xmlGuessEnc=pis.getBOMCharsetName();  String xmlEnc=getXmlProlog(pis,xmlGuessEnc);  try {    return calculateRawEncoding(bomEnc,xmlGuessEnc,xmlEnc);  } catch (  XmlStreamReaderException ex) {    if (lenient) {      return doLenientDetection(null,ex);    } else {      throw ex;    }  }}  }
class C{  public Mp4BoxHeader(String id){  if (id.length() != IDENTIFIER_LENGTH) {    throw new RuntimeException("Invalid length:atom idenifier should always be 4 characters long");  }  dataBuffer=ByteBuffer.allocate(HEADER_LENGTH);  try {    this.id=id;    dataBuffer.put(4,id.getBytes("ISO-8859-1")[0]);    dataBuffer.put(5,id.getBytes("ISO-8859-1")[1]);    dataBuffer.put(6,id.getBytes("ISO-8859-1")[2]);    dataBuffer.put(7,id.getBytes("ISO-8859-1")[3]);  } catch (  UnsupportedEncodingException uee) {    throw new RuntimeException(uee);  }}  }
class C{  public void addLayoutComponent(String name,Component c){}  }
class C{  public static void shutdown() throws IOException {  reset();  mockWebServer.shutdown();}  }
class C{  public Builder withWhiteList(final List<Pattern> whiteList){  Reject.ifNull(whiteList);  this.whiteList=whiteList;  return this;}  }
class C{  public boolean drawImage(Image img,int dx1,int dy1,int dx2,int dy2,int sx1,int sy1,int sx2,int sy2,Color bgcolor,ImageObserver observer){  DebugGraphicsInfo info=info();  if (debugLog()) {    info.log(toShortString() + " Drawing image: " + img+ " destination: "+ new Rectangle(dx1,dy1,dx2,dy2)+ " source: "+ new Rectangle(sx1,sy1,sx2,sy2)+ ", bgcolor: "+ bgcolor);  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawImage(img,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,bgcolor,observer);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    int i, count=(info.flashCount * 2) - 1;    ImageProducer oldProducer=img.getSource();    ImageProducer newProducer=new FilteredImageSource(oldProducer,new DebugGraphicsFilter(info.flashColor));    Image newImage=Toolkit.getDefaultToolkit().createImage(newProducer);    DebugGraphicsObserver imageObserver=new DebugGraphicsObserver();    Image imageToDraw;    for (i=0; i < count; i++) {      imageToDraw=(i % 2) == 0 ? newImage : img;      loadImage(imageToDraw);      graphics.drawImage(imageToDraw,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,bgcolor,imageObserver);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }  }  return graphics.drawImage(img,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,bgcolor,observer);}  }
class C{  public boolean disableAll(){  return disableAll;}  }
class C{  public int countRedos(UndoOwner[] owners){  if (owners == null) {    return mRedos.size();  }  int count=0;  int i=0;  while ((i=findNextState(mRedos,owners,i)) >= 0) {    count++;    i++;  }  return count;}  }
class C{  public ImageReaderWriterSpi(){}  }
class C{  private CSN generateCSN(PluginOperation operation){  return pendingChanges.putLocalOperation(operation);}  }
class C{  protected String long2roman(long val,boolean prefixesAreOK){  if (val <= 0) {    return getZeroString();  }  String roman="";  int place=0;  if (val <= 3999L) {    do {      while (val >= m_romanConvertTable[place].m_postValue) {        roman+=m_romanConvertTable[place].m_postLetter;        val-=m_romanConvertTable[place].m_postValue;      }      if (prefixesAreOK) {        if (val >= m_romanConvertTable[place].m_preValue) {          roman+=m_romanConvertTable[place].m_preLetter;          val-=m_romanConvertTable[place].m_preValue;        }      }      place++;    } while (val > 0);  } else {    roman=XSLTErrorResources.ERROR_STRING;  }  return roman;}  }
class C{  private void buildNew(MethodVisitor methodVisitor,CodeInfo info,Ins.New aNew){  methodVisitor.visitTypeInsn(Opcodes.NEW,typeToInternalName(aNew.type()));  info.push(CodeInfo.Size._1);  methodVisitor.visitInsn(Opcodes.DUP);  info.push(CodeInfo.Size._1);  for (  Value v : aNew.args()) {    buildValueAccess(methodVisitor,info,v,true);  }  Label label=new Label();  methodVisitor.visitLabel(label);  methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL,typeToInternalName(aNew.type()),"<init>",methodDesc(VoidType.get(),aNew.constructor().getParameters().stream().map(null).collect(Collectors.toList())),false);  info.pop(1 + aNew.args().size());  VisitLineNumber(methodVisitor,aNew.line_col(),label);}  }
class C{  public void doDefaultCloseAction(){  fireInternalFrameEvent(InternalFrameEvent.INTERNAL_FRAME_CLOSING);switch (defaultCloseOperation) {case DO_NOTHING_ON_CLOSE:    break;case HIDE_ON_CLOSE:  setVisible(false);if (isSelected()) try {  setSelected(false);} catch (PropertyVetoException pve) {}break;case DISPOSE_ON_CLOSE:try {fireVetoableChange(IS_CLOSED_PROPERTY,Boolean.FALSE,Boolean.TRUE);isClosed=true;setVisible(false);firePropertyChange(IS_CLOSED_PROPERTY,Boolean.FALSE,Boolean.TRUE);dispose();} catch (PropertyVetoException pve) {}break;default :break;}}  }
class C{  static Promise<Double> blockingPromiseDouble(){  return new BlockingPromise<>();}  }
class C{  private CapturerErrorListener capturerErrorListener(){  return null;}  }
class C{  protected void callRouteHandlers(R requestContext,IRoutingResult<R> routingResult) throws Exception {  requestContext.variables().add(SpincastConstants.RequestScopedVariables.ROUTING_RESULT,routingResult);  for (  IRouteHandlerMatch<R> routeHandlerMatch : routingResult.getRouteHandlerMatches()) {    requestContext.variables().add(SpincastConstants.RequestScopedVariables.ROUTE_HANDLER_MATCH,routeHandlerMatch);    IHandler<R> handlerMethod=routeHandlerMatch.getHandler();    try {      handlerMethod.handle(requestContext);    } catch (    ForwardRouteException ex) {      manageForwardRouteException(ex,requestContext,routingResult);      return;    }catch (    RedirectException ex) {      manageRedirectException(ex,requestContext,routingResult);      break;    }catch (    SkipRemainingHandlersException ex) {      break;    }  }  if (!requestContext.response().isClosed()) {    requestContext.response().end();  }}  }
class C{  public static byte[] copyOfRange(byte[] src,int startIndex,int endIndex){  int length=endIndex - startIndex;  if (length < 0) {    throw new IllegalArgumentException("startIndex (" + startIndex + ")"+ " > endIndex ("+ endIndex+ ")");  }  byte[] dest=new byte[length];  System.arraycopy(src,startIndex,dest,0,length);  return dest;}  }
class C{  public boolean acceptFilenameIdentical(String fileName){  return acceptIdentical(null,fileName);}  }
class C{  public void testDoubleValueNegMantissaIsZero(){  byte[] a={-128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  int aSign=-1;  double aNumber=new BigInteger(aSign,a).doubleValue();  assertTrue(aNumber == -8.98846567431158E307);}  }
class C{  private void checkEnablingState(){  boolean importLDIF=getRadioButton(NewSuffixOptions.Type.IMPORT_FROM_LDIF_FILE).isSelected();  boolean automaticData=getRadioButton(NewSuffixOptions.Type.IMPORT_AUTOMATICALLY_GENERATED_DATA).isSelected();  getField(FieldName.LDIF_PATH).setEnabled(importLDIF);  getLDIFBrowseButton().setEnabled(importLDIF);  getField(FieldName.NUMBER_ENTRIES).setEnabled(automaticData);  getLabel(FieldName.LDIF_PATH).setEnabled(importLDIF);  getLabel(FieldName.NUMBER_ENTRIES).setEnabled(automaticData);}  }
class C{  private void checkGenerationId(){  if (localGenerationId <= 0) {    oldGenerationId=replicationServerDomain.changeGenerationId(generationId);    return;  }  if (generationId > 0 && generationId != localGenerationId) {    logger.warn(WARN_BAD_GENERATION_ID_FROM_RS,serverId,session.getReadableRemoteAddress(),generationId,getBaseDN(),getReplicationServerId(),localGenerationId);  }}  }
class C{  public IdentitySubjectEditViewBean(){  super("IdentitySubjectEdit",DEFAULT_DISPLAY_URL);}  }
class C{  @Deprecated public void logrb(Level level,String sourceClass,String sourceMethod,String bundleName,String msg,Throwable thrown){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msg);  lr.setSourceClassName(sourceClass);  lr.setSourceMethodName(sourceMethod);  lr.setThrown(thrown);  doLog(lr,bundleName);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"PICTURE_INFO\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"PATH\" TEXT NOT NULL ,"+ "\"DISTANCE\" TEXT NOT NULL ,"+ "\"TIME\" TEXT NOT NULL ,"+ "\"TIPS\" TEXT);");}  }
class C{  private int decodeId(final byte[] idBytes){  int id=0;  for (  final byte b : idBytes) {    id<<=8;    id|=b & 0xFF;  }  return id - 1;}  }
class C{  private static void cleanDirectoryOnExit(File directory) throws IOException {  if (!directory.exists()) {    String message=directory + " does not exist";    throw new IllegalArgumentException(message);  }  if (!directory.isDirectory()) {    String message=directory + " is not a directory";    throw new IllegalArgumentException(message);  }  File[] files=directory.listFiles();  if (files == null) {    throw new IOException("Failed to list contents of " + directory);  }  IOException exception=null;  for (  File file : files) {    try {      forceDeleteOnExit(file);    } catch (    IOException ioe) {      exception=ioe;    }  }  if (null != exception) {    throw exception;  }}  }
class C{  @AndroidOnly("Uses bks key store. Change useBKS to false to run on the RI") public void testClientAuth() throws Exception {  boolean useBKS=true;  listener=new MyHandshakeListener();  String serverKeys=(useBKS ? SERVER_KEYS_BKS : SERVER_KEYS_JKS);  String clientKeys=(useBKS ? CLIENT_KEYS_BKS : CLIENT_KEYS_JKS);  TestServer server=new TestServer(true,TestServer.CLIENT_AUTH_WANTED,serverKeys);  TestClient client=new TestClient(true,clientKeys);  Thread serverThread=new Thread(server);  Thread clientThread=new Thread(client);  serverThread.start();  Thread.currentThread().sleep(3000);  clientThread.start();  serverThread.join();  clientThread.join();  Exception e=server.getException();  if (e != null) {    e.printStackTrace();  }  e=client.getException();  if (e != null) {    e.printStackTrace();  }  assertNull(e);  assertTrue(listener.completeDone);}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public boolean isEmpty(){  return (m_index == -1);}  }
class C{  public void processBytes(byte[] in,int inOff,int len,byte[] out,int outOff) throws DataLengthException {  if (outOff + len > out.length) {    throw new DataLengthException("output buffer too small in processBytes()");  }  for (int i=0; i != len; i++) {    cipher.processBlock(in,inOff + i,out,outOff + i);  }}  }
class C{  private void ensureOpen() throws IOException {  if (in == null)   throw new IOException("Stream closed");}  }
class C{  public NodeSetDTM(NodeSetDTM nodelist){  super();  m_manager=nodelist.getDTMManager();  m_root=nodelist.getRoot();  addNodes((DTMIterator)nodelist);}  }
class C{  private boolean processSearchRequest(LDAPMessage message,List<Control> controls){  if (ldapVersion == 2 && !controls.isEmpty()) {    SearchResultDoneProtocolOp responseOp=new SearchResultDoneProtocolOp(LDAPResultCode.PROTOCOL_ERROR,ERR_LDAPV2_CONTROLS_NOT_ALLOWED.get());    sendLDAPMessage(message,responseOp);    disconnectControlsNotAllowed();    return false;  }  SearchRequestProtocolOp protocolOp=message.getSearchRequestProtocolOp();  SearchOperationBasis searchOp=new SearchOperationBasis(this,nextOperationID.getAndIncrement(),message.getMessageID(),controls,protocolOp.getBaseDN(),protocolOp.getScope(),protocolOp.getDereferencePolicy(),protocolOp.getSizeLimit(),protocolOp.getTimeLimit(),protocolOp.getTypesOnly(),protocolOp.getFilter(),protocolOp.getAttributes());  try {    addOperationInProgress(searchOp);  } catch (  DirectoryException de) {    logger.traceException(de);    SearchResultDoneProtocolOp responseOp=new SearchResultDoneProtocolOp(de.getResultCode().intValue(),de.getMessageObject(),de.getMatchedDN(),de.getReferralURLs());    sendLDAPMessage(new LDAPMessage(message.getMessageID(),responseOp,searchOp.getResponseControls()));  }  return connectionValid;}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.AgreementMethodType createAgreementMethodType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.AgreementMethodTypeImpl();}  }
class C{  public ReplicationBroker(ReplicationDomain replicationDomain,ServerState state,ReplicationDomainCfg config,ReplSessionSecurity replSessionSecurity){  this.domain=replicationDomain;  this.state=state;  this.config=config;  this.replSessionSecurity=replSessionSecurity;  this.rcvWindow=getMaxRcvWindow();  this.halfRcvWindow=rcvWindow / 2;  this.shutdown=true;  this.monitor=replicationDomain != null ? new ReplicationMonitor(replicationDomain) : null;  registerReplicationMonitor();}  }
class C{  private static boolean matchFiltersServlet(FilterMap filterMap,String servletName){  if (servletName == null) {    return false;  } else   if (filterMap.getMatchAllServletNames()) {    return true;  } else {    String[] servletNames=filterMap.getServletNames();    for (int i=0; i < servletNames.length; i++) {      if (servletName.equals(servletNames[i])) {        return true;      }    }    return false;  }}  }
class C{  public TriggerWrapper(final String name,final String group,final String serializedValue,final boolean paused){  this(name,group,serializedValue,paused,false,null);}  }
class C{  public PassthroughAuthenticator(Provider<ConnectionFactory> connectionFactoryProvider,String passThroughAuth){  this.connectionFactoryProvider=checkNotNull(connectionFactoryProvider);  this.passThroughAuth=checkNotNull(passThroughAuth);}  }
class C{  public Builder removeSuperiorObjectClass(String objectClassNameOrOID){  this.superiorClasses.remove(objectClassNameOrOID);  return this;}  }
class C{  public final void testGenerateSeedint03(){  byte[] myBytes1;  byte[] myBytes2;  for (int i=0; i < LENGTH; i+=INCR) {    int n=0;    myBytes1=sr.generateSeed(i);    myBytes2=sr.generateSeed(i);    for (int j=0; j < i; j++) {      if (myBytes1[j] == myBytes2[j]) {        n++;      }    }    assertFalse("unexpected: n*2 > i  :: i=" + i + " n="+ n,n * 2 > i);  }}  }
class C{  public JKTimeObject toTimeObject(Date date,Date time){  JKTimeObject fsTimeObject=new JKTimeObject();  Calendar timeInstance=Calendar.getInstance();  timeInstance.setTimeInMillis(time.getTime());  fsTimeObject.setHour(timeInstance.get(Calendar.HOUR_OF_DAY));  fsTimeObject.setMunite(timeInstance.get(Calendar.MINUTE));  Calendar dateInstance=Calendar.getInstance();  dateInstance.setTime(date);  fsTimeObject.setYear(dateInstance.get(Calendar.YEAR));  fsTimeObject.setMonth(dateInstance.get(Calendar.MONTH));  fsTimeObject.setDay(dateInstance.get(Calendar.DAY_OF_MONTH));  return fsTimeObject;}  }
class C{  public XStringForChars(char[] val,int start,int length){  super(val);  m_start=start;  m_length=length;  if (null == val)   throw new IllegalArgumentException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_FASTSTRINGBUFFER_CANNOT_BE_NULL,null));}  }
class C{  public PlaPointFloat read_corner(){  double x=0;  double y=0;  for (int i=0; i < 2; ++i) {    Object curr_ob=next_token();    if (!(curr_ob instanceof Double)) {      pending_token=curr_ob;      return null;    }    double f=((Double)curr_ob).doubleValue();    if (i == 0) {      x=f;    } else {      y=f;    }  }  return new PlaPointFloat(x,y);}  }
class C{  public CanceledOperationException(CancelRequest cancelRequest){  super();  this.cancelRequest=cancelRequest;}  }
class C{  private static ClassLoader createSystemClassLoader(){  String classPath=System.getProperty("java.class.path",".");  return new PathClassLoader(classPath,BootClassLoader.getInstance(),false);}  }
class C{  public final static EventEntry start(Name eventName,Object payload,Object context){  return eventName.publisherImpl.start(eventName,payload,context);}  }
class C{  @Modified void modified(ComponentContext compContext) throws Exception {  logger.debug("Reconfiguring the JDBC Repository Service with configuration {}",compContext.getProperties());  try {    JsonValue newConfig=enhancedConfig.getConfigurationAsJson(compContext);    if (hasConfigChanged(config,newConfig)) {      deactivate(compContext);      activate(compContext);      logger.info("Reconfigured the JDBC Repository Service {}",compContext.getProperties());    }  } catch (  Exception ex) {    logger.warn("Configuration invalid, can not reconfigure the JDBC Repository Service.",ex);    throw ex;  }}  }
class C{  public Color mixColors(Color... colors){  Validate.noNullElements(colors,"Colors cannot be null");  int totalRed=this.getRed();  int totalGreen=this.getGreen();  int totalBlue=this.getBlue();  int totalMax=Math.max(Math.max(totalRed,totalGreen),totalBlue);  for (  Color color : colors) {    totalRed+=color.getRed();    totalGreen+=color.getGreen();    totalBlue+=color.getBlue();    totalMax+=Math.max(Math.max(color.getRed(),color.getGreen()),color.getBlue());  }  float averageRed=totalRed / (colors.length + 1);  float averageGreen=totalGreen / (colors.length + 1);  float averageBlue=totalBlue / (colors.length + 1);  float averageMax=totalMax / (colors.length + 1);  float maximumOfAverages=Math.max(Math.max(averageRed,averageGreen),averageBlue);  float gainFactor=averageMax / maximumOfAverages;  return Color.fromRGB((int)(averageRed * gainFactor),(int)(averageGreen * gainFactor),(int)(averageBlue * gainFactor));}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    target.setCaretPosition(target.getCaretPosition());  }}  }
class C{  protected static String normalizeEncoding(String enc){  String tmp=enc == null ? "" : enc.toLowerCase();switch (tmp) {case "":case "winansi":case "winansiencoding":    return PdfEncodings.WINANSI;case "macroman":case "macromanencoding":  return PdfEncodings.MACROMAN;case "zapfdingbatsencoding":return PdfEncodings.ZAPFDINGBATS;default :return enc;}}  }
class C{  public char previous(){  if (pos == offset) {    return DONE;  }  pos-=1;  return current();}  }
class C{  public void fireEvent(final String instanceId,final String ref,final String type,final Map<String,Object> data){  if (TextUtils.isEmpty(instanceId) || TextUtils.isEmpty(ref) || TextUtils.isEmpty(type)|| mJSHandler == null) {    return;  }  if (!checkMainThread()) {    throw new WXRuntimeException("fireEvent must be called by main thread");  }  addUITask(METHOD_FIRE_EVENT,instanceId,ref,type,data);  sendMessage(instanceId,WXJSBridgeMsgType.CALL_JS_BATCH);}  }
class C{  public com.sun.identity.liberty.ws.authnsvc.jaxb.SASLResponseType.CredentialsType createSASLResponseTypeCredentialsType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.authnsvc.jaxb.impl.SASLResponseTypeImpl.CredentialsTypeImpl();}  }
class C{  public Label(){}  }
class C{  void createImpl() throws SocketException {  if (impl == null)   setImpl();  try {    impl.create(true);    created=true;  } catch (  IOException e) {    throw new SocketException(e.getMessage());  }}  }
class C{  public FacebookServiceException(FacebookRequestError error,String errorMessage){  super(errorMessage);  this.error=error;}  }
class C{  public boolean endsWith(String suffix){  return m_str.endsWith(suffix);}  }
class C{  public static Socket doInteraction(final HttpsURLConnection clientConnection,final ServerSocket serverSocket) throws Throwable {  return doInteraction(clientConnection,serverSocket,OK_CODE,false);}  }
class C{  public ArrayList<DbEntry> loadEntries(long screen){  Cursor c=mContext.getContentResolver().query(LauncherSettings.Favorites.CONTENT_URI,new String[]{LauncherSettings.Favorites._ID,LauncherSettings.Favorites.ITEM_TYPE,LauncherSettings.Favorites.CELLX,LauncherSettings.Favorites.CELLY,LauncherSettings.Favorites.SPANX,LauncherSettings.Favorites.SPANY,LauncherSettings.Favorites.INTENT,LauncherSettings.Favorites.APPWIDGET_PROVIDER},LauncherSettings.Favorites.CONTAINER + " = " + LauncherSettings.Favorites.CONTAINER_DESKTOP+ " AND "+ LauncherSettings.Favorites.SCREEN+ " = "+ screen,null,null,null);  final int indexId=c.getColumnIndexOrThrow(LauncherSettings.Favorites._ID);  final int indexItemType=c.getColumnIndexOrThrow(LauncherSettings.Favorites.ITEM_TYPE);  final int indexCellX=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CELLX);  final int indexCellY=c.getColumnIndexOrThrow(LauncherSettings.Favorites.CELLY);  final int indexSpanX=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SPANX);  final int indexSpanY=c.getColumnIndexOrThrow(LauncherSettings.Favorites.SPANY);  final int indexIntent=c.getColumnIndexOrThrow(LauncherSettings.Favorites.INTENT);  final int indexAppWidgetProvider=c.getColumnIndexOrThrow(LauncherSettings.Favorites.APPWIDGET_PROVIDER);  ArrayList<DbEntry> entries=new ArrayList<>();  while (c.moveToNext()) {    DbEntry entry=new DbEntry();    entry.id=c.getLong(indexId);    entry.itemType=c.getInt(indexItemType);    entry.cellX=c.getInt(indexCellX);    entry.cellY=c.getInt(indexCellY);    entry.spanX=c.getInt(indexSpanX);    entry.spanY=c.getInt(indexSpanY);    entry.screenId=screen;    try {switch (entry.itemType) {case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:{          verifyIntent(c.getString(indexIntent));          entry.weight=entry.itemType == LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT ? WT_SHORTCUT : WT_APPLICATION;          break;        }case LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET:{        String provider=c.getString(indexAppWidgetProvider);        ComponentName cn=ComponentName.unflattenFromString(provider);        verifyPackage(cn.getPackageName());        entry.weight=Math.max(WT_WIDGET_MIN,WT_WIDGET_FACTOR * entry.spanX * entry.spanY);        LauncherAppWidgetProviderInfo pInfo=LauncherModel.getProviderInfo(mContext,cn,UserHandleCompat.myUserHandle());        Point spans=pInfo == null ? mWidgetMinSize.get(provider) : pInfo.getMinSpans(mIdp,mContext);        if (spans != null) {          entry.minSpanX=spans.x > 0 ? spans.x : entry.spanX;          entry.minSpanY=spans.y > 0 ? spans.y : entry.spanY;        } else {          entry.minSpanX=entry.minSpanY=2;        }        if (entry.minSpanX > mTrgX || entry.minSpanY > mTrgY) {          throw new Exception("Widget can't be resized down to fit the grid");        }        break;      }case LauncherSettings.Favorites.ITEM_TYPE_FOLDER:{      int total=getFolderItemsCount(entry.id);      if (total == 0) {        throw new Exception("Folder is empty");      }      entry.weight=WT_FOLDER_FACTOR * total;      break;    }default :  throw new Exception("Invalid item type");}} catch (Exception e) {if (DEBUG) {Log.d(TAG,"Removing item " + entry.id,e);}mEntryToRemove.add(entry.id);continue;}entries.add(entry);}return entries;}  }
class C{  public Name addAll(int posn,Name suffix) throws InvalidNameException {  unparsed=null;  if (suffix instanceof LdapName) {    LdapName s=(LdapName)suffix;    rdns.addAll(posn,s.rdns);  } else {    Enumeration<String> comps=suffix.getAll();    while (comps.hasMoreElements()) {      rdns.add(posn++,(new Rfc2253Parser(comps.nextElement()).parseRdn()));    }  }  return this;}  }
class C{  static String encode(final ByteSequence bytes){  Reject.ifNull(bytes);  if (bytes.isEmpty()) {    return "";  }  final StringBuilder buffer=new StringBuilder(4 * bytes.length() / 3);  int pos=0;  final int iterations=bytes.length() / 3;  for (int i=0; i < iterations; i++) {    final int value=((bytes.byteAt(pos++) & 0xFF) << 16) | ((bytes.byteAt(pos++) & 0xFF) << 8) | (bytes.byteAt(pos++) & 0xFF);    buffer.append(BASE64_ALPHABET[(value >>> 18) & 0x3F]);    buffer.append(BASE64_ALPHABET[(value >>> 12) & 0x3F]);    buffer.append(BASE64_ALPHABET[(value >>> 6) & 0x3F]);    buffer.append(BASE64_ALPHABET[value & 0x3F]);  }switch (bytes.length() % 3) {case 1:    buffer.append(BASE64_ALPHABET[(bytes.byteAt(pos) >>> 2) & 0x3F]);  buffer.append(BASE64_ALPHABET[(bytes.byteAt(pos) << 4) & 0x3F]);buffer.append("==");break;case 2:final int value=((bytes.byteAt(pos++) & 0xFF) << 8) | (bytes.byteAt(pos) & 0xFF);buffer.append(BASE64_ALPHABET[(value >>> 10) & 0x3F]);buffer.append(BASE64_ALPHABET[(value >>> 4) & 0x3F]);buffer.append(BASE64_ALPHABET[(value << 2) & 0x3F]);buffer.append("=");break;}return buffer.toString();}  }
class C{  public final boolean isVbr(){  return vbr;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  try {    updateInternalMask();  } catch (  ParseException pe) {  }}  }
class C{  public static Date valueOf(String s){  final int YEAR_LENGTH=4;  final int MONTH_LENGTH=2;  final int DAY_LENGTH=2;  final int MAX_MONTH=12;  final int MAX_DAY=31;  int firstDash;  int secondDash;  Date d=null;  if (s == null) {    throw new java.lang.IllegalArgumentException();  }  firstDash=s.indexOf('-');  secondDash=s.indexOf('-',firstDash + 1);  if ((firstDash > 0) && (secondDash > 0) && (secondDash < s.length() - 1)) {    String yyyy=s.substring(0,firstDash);    String mm=s.substring(firstDash + 1,secondDash);    String dd=s.substring(secondDash + 1);    if (yyyy.length() == YEAR_LENGTH && (mm.length() >= 1 && mm.length() <= MONTH_LENGTH) && (dd.length() >= 1 && dd.length() <= DAY_LENGTH)) {      int year=Integer.parseInt(yyyy);      int month=Integer.parseInt(mm);      int day=Integer.parseInt(dd);      if ((month >= 1 && month <= MAX_MONTH) && (day >= 1 && day <= MAX_DAY)) {        d=new Date(year - 1900,month - 1,day);      }    }  }  if (d == null) {    throw new java.lang.IllegalArgumentException();  }  return d;}  }
class C{  public boolean isLocalServer(String serverID){  return localServerID.equals(serverID);}  }
class C{  public PlaPointInt round_to_the_right(PlaDirection p_dir){  PlaPointFloat dir=p_dir.to_float();  double rounded_x;  if (dir.v_y > 0) {    rounded_x=Math.ceil(v_x);  } else   if (dir.v_y < 0) {    rounded_x=Math.floor(v_x);  } else {    rounded_x=Math.round(v_x);  }  double rounded_y;  if (dir.v_x > 0) {    rounded_y=Math.floor(v_y);  } else   if (dir.v_x < 0) {    rounded_y=Math.ceil(v_y);  } else {    rounded_y=Math.round(v_y);  }  return new PlaPointInt(rounded_x,rounded_y);}  }
class C{  public void testConstructorSignBytesNegative1(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15};  int aSign=-1;  byte rBytes[]={-13,-57,-101,1,75,-90,-46,-92,-4,15};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(isSupported09.class,args);}  }
class C{  public void write(byte[] b,int offset,int length) throws IOException {  out.write(b,offset,length);}  }
class C{  public static void sort(char[] a){  doSort(a,0,a.length - 1);}  }
class C{  public int new_no(){  if (last_generated_id_no >= c_max_id_no) {    System.err.println("IdGenerator: danger of overflow, please regenerate id numbers from scratch!");  }  last_generated_id_no++;  return last_generated_id_no;}  }
class C{  protected void fireStateChanged(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ChangeListener.class) {      if (changeEvent == null)       changeEvent=new ChangeEvent(this);      ((ChangeListener)listeners[i + 1]).stateChanged(changeEvent);    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Node child;  String strong;  int length;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testEmployee=elementList.item(2);  attributes=testEmployee.getAttributes();  length=(int)attributes.getLength();  if (("text/html".equals(getContentType()))) {    assertEquals("htmlLength",2,length);  } else {    assertEquals("length",3,length);    child=attributes.item(2);    assertNotNull("attr2",child);  }  child=attributes.item(0);  assertNotNull("attr0",child);  child=attributes.item(1);  assertNotNull("attr1",child);  child=attributes.item(3);  assertNull("attr3",child);}  }
class C{  protected void desFunc(int[] wKey,byte[] in,int inOff,byte[] out,int outOff){  int work, right, left;  left=(in[inOff + 0] & 0xff) << 24;  left|=(in[inOff + 1] & 0xff) << 16;  left|=(in[inOff + 2] & 0xff) << 8;  left|=(in[inOff + 3] & 0xff);  right=(in[inOff + 4] & 0xff) << 24;  right|=(in[inOff + 5] & 0xff) << 16;  right|=(in[inOff + 6] & 0xff) << 8;  right|=(in[inOff + 7] & 0xff);  work=((left >>> 4) ^ right) & 0x0f0f0f0f;  right^=work;  left^=(work << 4);  work=((left >>> 16) ^ right) & 0x0000ffff;  right^=work;  left^=(work << 16);  work=((right >>> 2) ^ left) & 0x33333333;  left^=work;  right^=(work << 2);  work=((right >>> 8) ^ left) & 0x00ff00ff;  left^=work;  right^=(work << 8);  right=((right << 1) | ((right >>> 31) & 1)) & 0xffffffff;  work=(left ^ right) & 0xaaaaaaaa;  left^=work;  right^=work;  left=((left << 1) | ((left >>> 31) & 1)) & 0xffffffff;  for (int round=0; round < 8; round++) {    int fval;    work=(right << 28) | (right >>> 4);    work^=wKey[round * 4 + 0];    fval=SP7[work & 0x3f];    fval|=SP5[(work >>> 8) & 0x3f];    fval|=SP3[(work >>> 16) & 0x3f];    fval|=SP1[(work >>> 24) & 0x3f];    work=right ^ wKey[round * 4 + 1];    fval|=SP8[work & 0x3f];    fval|=SP6[(work >>> 8) & 0x3f];    fval|=SP4[(work >>> 16) & 0x3f];    fval|=SP2[(work >>> 24) & 0x3f];    left^=fval;    work=(left << 28) | (left >>> 4);    work^=wKey[round * 4 + 2];    fval=SP7[work & 0x3f];    fval|=SP5[(work >>> 8) & 0x3f];    fval|=SP3[(work >>> 16) & 0x3f];    fval|=SP1[(work >>> 24) & 0x3f];    work=left ^ wKey[round * 4 + 3];    fval|=SP8[work & 0x3f];    fval|=SP6[(work >>> 8) & 0x3f];    fval|=SP4[(work >>> 16) & 0x3f];    fval|=SP2[(work >>> 24) & 0x3f];    right^=fval;  }  right=(right << 31) | (right >>> 1);  work=(left ^ right) & 0xaaaaaaaa;  left^=work;  right^=work;  left=(left << 31) | (left >>> 1);  work=((left >>> 8) ^ right) & 0x00ff00ff;  right^=work;  left^=(work << 8);  work=((left >>> 2) ^ right) & 0x33333333;  right^=work;  left^=(work << 2);  work=((right >>> 16) ^ left) & 0x0000ffff;  left^=work;  right^=(work << 16);  work=((right >>> 4) ^ left) & 0x0f0f0f0f;  left^=work;  right^=(work << 4);  out[outOff + 0]=(byte)((right >>> 24) & 0xff);  out[outOff + 1]=(byte)((right >>> 16) & 0xff);  out[outOff + 2]=(byte)((right >>> 8) & 0xff);  out[outOff + 3]=(byte)(right & 0xff);  out[outOff + 4]=(byte)((left >>> 24) & 0xff);  out[outOff + 5]=(byte)((left >>> 16) & 0xff);  out[outOff + 6]=(byte)((left >>> 8) & 0xff);  out[outOff + 7]=(byte)(left & 0xff);}  }
class C{  public static byte[] copyOf(byte[] original,int newLength){  byte[] copy=new byte[newLength];  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  if ((event.getAction() & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_DOWN) {    cancelAllAnimations();  }  if (event.getPointerCount() > 1) {    mMidPntX=(event.getX(0) + event.getX(1)) / 2;    mMidPntY=(event.getY(0) + event.getY(1)) / 2;  }  mGestureDetector.onTouchEvent(event);  if (mIsScaleEnabled) {    mScaleDetector.onTouchEvent(event);  }  if (mIsRotateEnabled) {    mRotateDetector.onTouchEvent(event);  }  if ((event.getAction() & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_UP) {    setImageToWrapCropBounds();  }  return true;}  }
class C{  protected boolean isPlainFlavor(DataFlavor flavor){  DataFlavor[] flavors=plainFlavors;  for (int i=0; i < flavors.length; i++) {    if (flavors[i].equals(flavor)) {      return true;    }  }  return false;}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  if (documentHandler != null)   documentHandler.endElement(qName);}  }
class C{  public static void writeFile(File file,String contents) throws IOException {  writeFile(file.getAbsolutePath(),contents);}  }
class C{  public static String formatMessage(String formatStr,Object obj1){  Object arr[]=new Object[1];  arr[0]=obj1;  return MessageFormat.format(formatStr,arr);}  }
class C{  @Override public List<Foo> findByField2(boolean field2){  return findByField2(field2,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);}  }
class C{  public Lyrics3v1(){}  }
class C{  public StringHolder(){}  }
class C{  private boolean isApplicationModule(String moduleName){  boolean isApp=(moduleName != null) && (moduleName.equalsIgnoreCase(ISAuthConstants.APPLICATION_MODULE));  if (DEBUG.messageEnabled()) {    DEBUG.message("is Application Module : " + isApp);  }  return isApp;}  }
class C{  static SynthStyle updateStyle(SynthContext context,SynthUI ui){  SynthStyle newStyle=getStyle(context.getComponent(),context.getRegion());  SynthStyle oldStyle=context.getStyle();  if (newStyle != oldStyle) {    if (oldStyle != null) {      oldStyle.uninstallDefaults(context);    }    context.setStyle(newStyle);    newStyle.installDefaults(context,ui);  }  return newStyle;}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public Barcode128(PdfDocument document){  super(document);  try {    x=0.8f;    font=PdfFontFactory.createFont(FontConstants.HELVETICA,PdfEncodings.WINANSI);    size=8;    baseline=size;    barHeight=size * 3;    textAlignment=ALIGN_CENTER;    codeType=CODE128;  } catch (  IOException e) {    throw new RuntimeException("Cannot create font",e);  }}  }
class C{  private void ensureOpen() throws IOException {  if (closed) {    throw new IOException("Stream closed");  }}  }
class C{  private void genPreambleClassVariableDeclarations(){  if (isPoolingEnabled && !tagHandlerPoolNames.isEmpty()) {    for (int i=0; i < tagHandlerPoolNames.size(); i++) {      out.printil("private org.apache.jasper.runtime.TagHandlerPool " + tagHandlerPoolNames.elementAt(i) + ";");    }    out.println();  }  out.printin("private volatile javax.el.ExpressionFactory ");  out.print(VAR_EXPRESSIONFACTORY);  out.println(";");  out.printin("private volatile org.apache.tomcat.InstanceManager ");  out.print(VAR_INSTANCEMANAGER);  out.println(";");  out.println();}  }
class C{  public void testCase12(){  byte bBytes[]={15,48,-29,7,98,-1,39,-128};  int bSign=-1;  byte rBytes[]={0};  BigInteger aNumber=BigInteger.ZERO;  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public boolean isCombineAgentType(String type){  return combineAgent.keySet().contains(type);}  }
class C{  protected void int2alphaCount(long val,CharArrayWrapper aTable,FastStringBuffer stringBuf){  int radix=aTable.getLength();  char[] table=new char[radix];  int i;  for (i=0; i < radix - 1; i++) {    table[i + 1]=aTable.getChar(i);  }  table[0]=aTable.getChar(i);  char buf[]=new char[100];  int charPos;  charPos=buf.length - 1;  int lookupIndex=1;  long correction=0;  do {    correction=((lookupIndex == 0) || (correction != 0 && lookupIndex == radix - 1)) ? (radix - 1) : 0;    lookupIndex=(int)(val + correction) % radix;    val=(val / radix);    if (lookupIndex == 0 && val == 0)     break;    buf[charPos--]=table[lookupIndex];  } while (val > 0);  stringBuf.append(buf,charPos + 1,(buf.length - charPos - 1));}  }
class C{  Builder addLenient(String line){  int index=line.indexOf(":",1);  if (index != -1) {    return addLenient(line.substring(0,index),line.substring(index + 1));  } else   if (line.startsWith(":")) {    return addLenient("",line.substring(1));  } else {    return addLenient("",line);  }}  }
class C{  public void connect(ServerState serverState) throws Exception {  InetSocketAddress serverAddr=new InetSocketAddress("localhost",port);  Socket socket=new Socket();  socket.setTcpNoDelay(true);  int timeoutMS=MultimasterReplication.getConnectionTimeoutMS();  socket.connect(serverAddr,timeoutMS);  fakePort++;  String fakeUrl="localhost:" + fakePort;  ReplSessionSecurity replSessionSecurity=new ReplSessionSecurity();  session=replSessionSecurity.createClientSession(socket,timeoutMS);  ReplServerStartMsg replServerStartMsg=new ReplServerStartMsg(serverId,fakeUrl,baseDN,100,serverState,generationId,sslEncryption,groupId,5000);  session.publish(replServerStartMsg);  ReplServerStartMsg inReplServerStartMsg=(ReplServerStartMsg)session.receive();  sslEncryption=inReplServerStartMsg.getSSLEncryption();  if (!sslEncryption) {    session.stopEncryption();  }  RSInfo rsInfo=new RSInfo(serverId,fakeUrl,generationId,groupId,1);  session.publish(new TopologyMsg(null,newArrayList(rsInfo)));  TopologyMsg inTopoMsg=(TopologyMsg)session.receive();  debugInfo("Fake RS " + serverId + " handshake received the following info:"+ inTopoMsg);}  }
class C{  public DsnPolygon(DsnLayer p_layer,double[] p_coor){  super(p_layer);  coor=p_coor;}  }
class C{  public void cellToRect(int cellX,int cellY,int cellHSpan,int cellVSpan,Rect resultRect){  final int cellWidth=mCellWidth;  final int cellHeight=mCellHeight;  final int widthGap=mWidthGap;  final int heightGap=mHeightGap;  final int hStartPadding=getPaddingLeft();  final int vStartPadding=getPaddingTop();  int width=cellHSpan * cellWidth + ((cellHSpan - 1) * widthGap);  int height=cellVSpan * cellHeight + ((cellVSpan - 1) * heightGap);  int x=hStartPadding + cellX * (cellWidth + widthGap);  int y=vStartPadding + cellY * (cellHeight + heightGap);  resultRect.set(x,y,x + width,y + height);}  }
class C{  public void mouseDragged(MouseEvent e){  int thumbMiddle;  if (!slider.isEnabled()) {    return;  }  currentMouseX=e.getX();  currentMouseY=e.getY();  if (!isDragging) {    return;  }  slider.setValueIsAdjusting(true);switch (slider.getOrientation()) {case JSlider.VERTICAL:    int halfThumbHeight=thumbRect.height / 2;  int thumbTop=e.getY() - offset;int trackTop=trackRect.y;int trackBottom=trackRect.y + (trackRect.height - 1);int vMax=yPositionForValue(slider.getMaximum() - slider.getExtent());if (drawInverted()) {trackBottom=vMax;} else {trackTop=vMax;}thumbTop=Math.max(thumbTop,trackTop - halfThumbHeight);thumbTop=Math.min(thumbTop,trackBottom - halfThumbHeight);setThumbLocation(thumbRect.x,thumbTop);thumbMiddle=thumbTop + halfThumbHeight;slider.setValue(valueForYPosition(thumbMiddle));break;case JSlider.HORIZONTAL:int halfThumbWidth=thumbRect.width / 2;int thumbLeft=e.getX() - offset;int trackLeft=trackRect.x;int trackRight=trackRect.x + (trackRect.width - 1);int hMax=xPositionForValue(slider.getMaximum() - slider.getExtent());if (drawInverted()) {trackLeft=hMax;} else {trackRight=hMax;}thumbLeft=Math.max(thumbLeft,trackLeft - halfThumbWidth);thumbLeft=Math.min(thumbLeft,trackRight - halfThumbWidth);setThumbLocation(thumbLeft,thumbRect.y);thumbMiddle=thumbLeft + halfThumbWidth;slider.setValue(valueForXPosition(thumbMiddle));break;}}  }
class C{  protected void addTask(Entry taskEntry,ResultCode expectedResult,LocalizableMessage errorMessage) throws Exception {  logger.trace("AddTask/" + taskEntry);  AddOperation addOperation=connection.processAdd(taskEntry);  assertEquals(addOperation.getResultCode(),expectedResult,"Result of ADD operation of the task is: " + addOperation.getResultCode() + " Expected:"+ expectedResult+ " Details:"+ addOperation.getErrorMessage()+ addOperation.getAdditionalLogItems());  if (expectedResult != ResultCode.SUCCESS) {    Assertions.assertThat(addOperation.getErrorMessage().toString()).startsWith(errorMessage.toString());    logger.trace("Create config task: <" + errorMessage.resourceName() + "-"+ errorMessage.ordinal()+ addOperation.getErrorMessage()+ ">");  } else {    waitTaskState(taskEntry,TaskState.RUNNING,20000,null);  }  entriesToCleanup.add(taskEntry.getName());  logger.trace("AddedTask/" + taskEntry.getName());}  }
class C{  @Override public ContainerListener[] findContainerListeners(){  ContainerListener[] results=new ContainerListener[0];  return listeners.toArray(results);}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS,boolean includeHeader) throws FSMsgException {  StringBuffer xml=new StringBuffer(300);  if (includeHeader) {    xml.append(IFSConstants.XML_PREFIX).append(IFSConstants.DEFAULT_ENCODING).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.QUESTION_MARK).append(IFSConstants.RIGHT_ANGLE);  }  String prefix="";  String uri="";  if (includeNS) {    prefix=IFSConstants.LIB_PREFIX;  }  if (declareNS) {    if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      uri=IFSConstants.LIB_12_NAMESPACE_STRING;    } else {      uri=IFSConstants.LIB_NAMESPACE_STRING;    }  }  xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.AUTHN_RESPONSE_ENVELOPE).append(uri).append(IFSConstants.RIGHT_ANGLE);  if (authnResponse != null) {    xml.append(authnResponse.toXMLString());  }  if (assertionConsumerServiceURL != null && assertionConsumerServiceURL.length() != 0) {    xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.ASSERTION_CONSUMER_SERVICE_URL).append(uri).append(IFSConstants.RIGHT_ANGLE).append(assertionConsumerServiceURL).append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.ASSERTION_CONSUMER_SERVICE_URL).append(IFSConstants.RIGHT_ANGLE);  } else {    throw new FSMsgException("nullInput",null);  }  xml.append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.AUTHN_RESPONSE_ENVELOPE);  return xml.toString();}  }
class C{  protected void tearDown(){  try {    if (s != null)     s.close();  } catch (  Exception e) {  }  try {    if (ss != null)     ss.close();  } catch (  Exception e) {  }  try {    if (t != null)     t.interrupt();  } catch (  Exception e) {  }}  }
class C{  ToggleComponentOrientationAction(){  super(toggleComponentOrientationAction);}  }
class C{  @Override public boolean accept(File dir,String name){  return pattern.matcher(name).matches();}  }
class C{  protected Document createDefaultModel(){  return new PlainDocument();}  }
class C{  public int nextMessageID(){  int msgID=nextMessageID.getAndIncrement();  if (msgID < 0) {synchronized (nextMessageID) {      if (nextMessageID.get() < 0) {        nextMessageID.set(2);        return 1;      } else {        return nextMessageID.getAndIncrement();      }    }  }  return msgID;}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_TWO_OR_THREE,null));}  }
class C{  private static String applyFontToHtmlWithDiv(String html,Font font){  return "<div style=\"" + getFontStyle(font) + "\">"+ html+ DIV_CLOSE;}  }
class C{  public boolean equals(Area other){  if (other == this) {    return true;  }  if (other == null) {    return false;  }  Vector c=new AreaOp.XorOp().calculate(this.curves,other.curves);  return c.isEmpty();}  }
class C{  private int performDeleteOperation(boolean authentication) throws Exception {  return LDAPDelete.mainDelete(deleteArgs(authentication),false,null,null);}  }
class C{  @Override public void write(byte[] buffer,int off,int nbytes) throws IOException {  super.write(buffer,off,nbytes);  crc.update(buffer,off,nbytes);}  }
class C{  public boolean offer(E e,long timeout,TimeUnit unit) throws InterruptedException {  if (e == null)   throw new NullPointerException();  long nanos=unit.toNanos(timeout);  int c=-1;  final ReentrantLock putLock=this.putLock;  final AtomicInteger count=this.count;  putLock.lockInterruptibly();  try {    while (count.get() == capacity) {      if (nanos <= 0)       return false;      nanos=notFull.awaitNanos(nanos);    }    enqueue(new Node<E>(e));    c=count.getAndIncrement();    if (c + 1 < capacity)     notFull.signal();  }  finally {    putLock.unlock();  }  if (c == 0)   signalNotEmpty();  return true;}  }
class C{  protected void tearDown(){}  }
class C{  void createFinish(String instanceId){  if (!isDomThread()) {    throw new WXRuntimeException("CreateFinish operation must be done in dom thread");  }  WXDomStatement statement=mDomRegistries.get(instanceId);  if (statement == null) {    return;  }  statement.createFinish();}  }
class C{  public Decision createDecision() throws XACMLException {  Object object=XACMLSDKUtils.getObjectInstance(XACMLConstants.DECISION);  if (object == null) {    return new DecisionImpl();  } else {    return (Decision)object;  }}  }
class C{  public static long[] copyOfRange(long[] original,int from,int to){  int newLength=to - from;  if (newLength < 0)   throw new IllegalArgumentException(from + " > " + to);  long[] copy=new long[newLength];  System.arraycopy(original,from,copy,0,Math.min(original.length - from,newLength));  return copy;}  }
class C{  protected void establishRoute(HttpRoute route,HttpContext context) throws HttpException, IOException {  HttpRouteDirector rowdy=new BasicRouteDirector();  int step;  do {    HttpRoute fact=managedConn.getRoute();    step=rowdy.nextStep(route,fact);switch (step) {case HttpRouteDirector.CONNECT_TARGET:case HttpRouteDirector.CONNECT_PROXY:      managedConn.open(route,context,this.params);    break;case HttpRouteDirector.TUNNEL_TARGET:{    boolean secure=createTunnelToTarget(route,context);    this.log.debug("Tunnel to target created.");    managedConn.tunnelTarget(secure,this.params);  }break;case HttpRouteDirector.TUNNEL_PROXY:{final int hop=fact.getHopCount() - 1;boolean secure=createTunnelToProxy(route,hop,context);this.log.debug("Tunnel to proxy created.");managedConn.tunnelProxy(route.getHopTarget(hop),secure,this.params);}break;case HttpRouteDirector.LAYER_PROTOCOL:managedConn.layerProtocol(context,this.params);break;case HttpRouteDirector.UNREACHABLE:throw new IllegalStateException("Unable to establish route." + "\nplanned = " + route + "\ncurrent = "+ fact);case HttpRouteDirector.COMPLETE:break;default :throw new IllegalStateException("Unknown step indicator " + step + " from RouteDirector.");}} while (step > HttpRouteDirector.COMPLETE);}  }
class C{  @Override public boolean accept(File file){  String name=file.getName();  for (  String suffix : this.suffixes) {    if (caseSensitivity.checkEndsWith(name,suffix)) {      return true;    }  }  return false;}  }
class C{  private void checkVerifiedPasswordPolicyState(Entry userEntry,SASLMechanismHandler<?> saslHandler) throws DirectoryException {  PasswordPolicyState pwPolicyState=(PasswordPolicyState)authPolicyState;  PasswordPolicy policy=pwPolicyState.getAuthenticationPolicy();  if (pwPolicyState.isDisabled()) {    throw new DirectoryException(ResultCode.INVALID_CREDENTIALS,ERR_BIND_OPERATION_ACCOUNT_DISABLED.get());  } else   if (pwPolicyState.isAccountExpired()) {    LocalizableMessage m=ERR_BIND_OPERATION_ACCOUNT_EXPIRED.get();    pwPolicyState.generateAccountStatusNotification(AccountStatusNotificationType.ACCOUNT_EXPIRED,userEntry,m,AccountStatusNotification.createProperties(pwPolicyState,false,-1,null,null));    throw new DirectoryException(ResultCode.INVALID_CREDENTIALS,m);  } else   if (pwPolicyState.lockedDueToFailures()) {    if (pwPolicyErrorType == null) {      pwPolicyErrorType=PasswordPolicyErrorType.ACCOUNT_LOCKED;    }    throw new DirectoryException(ResultCode.INVALID_CREDENTIALS,ERR_BIND_OPERATION_ACCOUNT_FAILURE_LOCKED.get());  } else   if (pwPolicyState.lockedDueToIdleInterval()) {    if (pwPolicyErrorType == null) {      pwPolicyErrorType=PasswordPolicyErrorType.ACCOUNT_LOCKED;    }    LocalizableMessage m=ERR_BIND_OPERATION_ACCOUNT_IDLE_LOCKED.get();    pwPolicyState.generateAccountStatusNotification(AccountStatusNotificationType.ACCOUNT_IDLE_LOCKED,userEntry,m,AccountStatusNotification.createProperties(pwPolicyState,false,-1,null,null));    throw new DirectoryException(ResultCode.INVALID_CREDENTIALS,m);  }  boolean isSASLBind=saslHandler != null;  if (!isSASLBind || saslHandler.isPasswordBased(saslMechanism)) {    if (pwPolicyState.lockedDueToMaximumResetAge()) {      if (pwPolicyErrorType == null) {        pwPolicyErrorType=PasswordPolicyErrorType.ACCOUNT_LOCKED;      }      LocalizableMessage m=ERR_BIND_OPERATION_ACCOUNT_RESET_LOCKED.get();      pwPolicyState.generateAccountStatusNotification(AccountStatusNotificationType.ACCOUNT_RESET_LOCKED,userEntry,m,AccountStatusNotification.createProperties(pwPolicyState,false,-1,null,null));      throw new DirectoryException(ResultCode.INVALID_CREDENTIALS,m);    }    if (pwPolicyState.isPasswordExpired()) {      if (pwPolicyErrorType == null) {        pwPolicyErrorType=PasswordPolicyErrorType.PASSWORD_EXPIRED;      }      int maxGraceLogins=policy.getGraceLoginCount();      if (maxGraceLogins > 0 && pwPolicyState.mayUseGraceLogin()) {        List<Long> graceLoginTimes=pwPolicyState.getGraceLoginTimes();        if (graceLoginTimes == null || graceLoginTimes.size() < maxGraceLogins) {          isGraceLogin=true;          mustChangePassword=true;          if (pwPolicyWarningType == null) {            pwPolicyWarningType=PasswordPolicyWarningType.GRACE_LOGINS_REMAINING;            pwPolicyWarningValue=maxGraceLogins - (graceLoginTimes.size() + 1);          }        } else {          LocalizableMessage m=ERR_BIND_OPERATION_PASSWORD_EXPIRED.get();          pwPolicyState.generateAccountStatusNotification(AccountStatusNotificationType.PASSWORD_EXPIRED,userEntry,m,AccountStatusNotification.createProperties(pwPolicyState,false,-1,null,null));          throw new DirectoryException(ResultCode.INVALID_CREDENTIALS,m);        }      } else {        LocalizableMessage m=ERR_BIND_OPERATION_PASSWORD_EXPIRED.get();        pwPolicyState.generateAccountStatusNotification(AccountStatusNotificationType.PASSWORD_EXPIRED,userEntry,m,AccountStatusNotification.createProperties(pwPolicyState,false,-1,null,null));        throw new DirectoryException(ResultCode.INVALID_CREDENTIALS,m);      }    } else     if (pwPolicyState.shouldWarn()) {      int numSeconds=pwPolicyState.getSecondsUntilExpiration();      if (pwPolicyWarningType == null) {        pwPolicyWarningType=PasswordPolicyWarningType.TIME_BEFORE_EXPIRATION;        pwPolicyWarningValue=numSeconds;      }      isFirstWarning=pwPolicyState.isFirstWarning();    }    if (pwPolicyState.mustChangePassword()) {      mustChangePassword=true;      if (pwPolicyErrorType == null) {        pwPolicyErrorType=PasswordPolicyErrorType.CHANGE_AFTER_RESET;      }    }  }}  }
class C{  public MigrateFromInstallState(Map keyValuePairs,ArrayList keysToUse) throws InstallException {  Debug.log("MigrateFromInstallState : initalizing the state");  String instanceName=getInstFinderStore().getInstanceName(keyValuePairs,keysToUse);  getInstallDataStore();  Debug.log("MigrateFromInstallState() - loaded Install state: " + getInstallDataStore());  if (!MigrateFromInstallDataStore.isExistingStore()) {    Debug.log("MigrateFromInstallState(): Error - " + "No existing data store was found. " + "Creating state with Instance Finder data.");  } else {    Debug.log("MigrateFromInstallState(): Existing data store found. " + "Creating state.");    initializeFromStore(instanceName,keyValuePairs);  }}  }
class C{  public void paintProgressBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintProgressBarBackground(context,g,x,y,w,h);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticatorTransportProtocolElement createAuthenticatorTransportProtocolElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticatorTransportProtocolElementImpl();}  }
class C{  public GenericTableHandler(JsonValue tableConfig,String dbSchemaName,JsonValue queriesConfig,JsonValue commandsConfig,int maxBatchSize,SQLExceptionHandler sqlExceptionHandler){  cfg=GenericTableConfig.parse(tableConfig);  this.mainTableName=cfg.mainTableName;  this.propTableName=cfg.propertiesTableName;  this.dbSchemaName=dbSchemaName;  if (maxBatchSize < 1) {    this.maxBatchSize=1;  } else {    this.maxBatchSize=maxBatchSize;  }  if (sqlExceptionHandler == null) {    this.sqlExceptionHandler=new DefaultSQLExceptionHandler();  } else {    this.sqlExceptionHandler=sqlExceptionHandler;  }  queries=new TableQueries(this,mainTableName,propTableName,dbSchemaName,getSearchableLength(),new GenericQueryResultMapper());  queryMap=Collections.unmodifiableMap(initializeQueryMap());  queries.setConfiguredQueries(queriesConfig,commandsConfig,queryMap);  enableBatching=(this.maxBatchSize > 1);  if (enableBatching) {    logger.info("JDBC statement batching enabled, maximum batch size {}",this.maxBatchSize);  } else {    logger.info("JDBC statement batching disabled.");  }}  }
class C{  public AuthPropertiesModelImpl(HttpServletRequest req,Map map){  super(req,map);  currentRealm=(String)map.get(AMAdminConstants.CURRENT_REALM);  if (currentRealm == null) {    currentRealm="/";  }}  }
class C{  public static MatchedValuesFilter createEqualityFilter(AttributeType attributeType,ByteString assertionValue){  Reject.ifNull(attributeType,assertionValue);  String rawAttributeType=attributeType.getNameOrOID();  MatchedValuesFilter filter=new MatchedValuesFilter(EQUALITY_MATCH_TYPE,rawAttributeType,assertionValue,null,null,null,null);  filter.attributeType=attributeType;  filter.assertionValue=assertionValue;  return filter;}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  public Canvas(PdfCanvas pdfCanvas,PdfDocument pdfDocument,Rectangle rootArea){  super();  this.pdfDocument=pdfDocument;  this.pdfCanvas=pdfCanvas;  this.rootArea=rootArea;}  }
class C{  public IntHolder(){}  }
class C{  protected void invokeOperator(PdfLiteral operator,List<PdfObject> operands){  IContentOperator op=operators.get(operator.toString());  if (op == null)   op=operators.get(DEFAULT_OPERATOR);  op.invoke(this,operator,operands);}  }
class C{  public static Response parseXML(InputStream is) throws SAMLException {  Document doc=XMLUtils.toDOMDocument(is,SAMLUtils.debug);  Element root=doc.getDocumentElement();  return new Response(root);}  }
class C{  protected void start(){  if (engine.getLogger().isDebugEnabled())   engine.getLogger().debug(sm.getString("engineConfig.start"));}  }
class C{  private boolean hasNextTlsMode(){  return nextTlsMode != TLS_MODE_NULL;}  }
class C{  public static void writeJSONString(List list,Writer out) throws IOException {  if (list == null) {    out.write("null");    return;  }  boolean first=true;  Iterator iter=list.iterator();  out.write('[');  while (iter.hasNext()) {    if (first)     first=false; else     out.write(',');    Object value=iter.next();    if (value == null) {      out.write("null");      continue;    }    JSONValue.writeJSONString(value,out);  }  out.write(']');}  }
class C{  public URLClassLoader(URL[] urls,ClassLoader parent){  this(urls,parent,null);}  }
class C{  public void removeIndexInterval(int index0,int index1){  int rmMinIndex=Math.min(index0,index1);  int rmMaxIndex=Math.max(index0,index1);  int gapLength=(rmMaxIndex - rmMinIndex) + 1;  for (int i=rmMinIndex; i <= maxIndex; i++) {    setState(i,value.get(i + gapLength));  }}  }
class C{  public final boolean isDebugEnabled(){  return isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeinsertbeforedocfragment.class,args);}  }
class C{  public SAML2ConfigBuilder keystorePassword(byte[] keystorePassword){  this.keystorePassword=keystorePassword;  return this;}  }
class C{  private boolean useDateFormatSymbols(){  return useDateFormatSymbols || locale == null;}  }
class C{  long parseBytes(String freeSpace,String path) throws IOException {  try {    long bytes=Long.parseLong(freeSpace);    if (bytes < 0) {      throw new IOException("Command line '" + DF + "' did not find free space in response "+ "for path '"+ path+ "'- check path is valid");    }    return bytes;  } catch (  NumberFormatException ex) {    throw new IOExceptionWithCause("Command line '" + DF + "' did not return numeric data as expected "+ "for path '"+ path+ "'- check path is valid",ex);  }}  }
class C{  public void reloadTopology() throws TopologyCacheException {  suffixes.clear();  servers.clear();  try {    Set<Map<ServerProperty,Object>> adsServers=adsContext.readServerRegistry();    Set<ServerLoader> threadSet=new HashSet<>();    for (    Map<ServerProperty,Object> serverProperties : adsServers) {      ServerLoader t=getServerLoader(serverProperties);      t.start();      threadSet.add(t);    }    joinThreadSet(threadSet);    Map<DN,Set<SuffixDescriptor>> hmSuffixes=new HashMap<>();    for (    ServerLoader loader : threadSet) {      ServerDescriptor descriptor=loader.getServerDescriptor();      for (      ReplicaDescriptor replica : descriptor.getReplicas()) {        DN dn=replica.getSuffix().getDN();        logger.info(LocalizableMessage.raw("Handling replica with dn: " + dn));        Set<SuffixDescriptor> sufs=hmSuffixes.get(dn);        SuffixDescriptor suffix=findSuffix(replica,sufs);        if (suffix != null) {          suffix.addReplica(replica);          replica.setSuffix(suffix);        } else {          if (sufs == null) {            sufs=new HashSet<>();            hmSuffixes.put(dn,sufs);          }          sufs.add(replica.getSuffix());          suffixes.add(replica.getSuffix());        }      }      servers.add(descriptor);    }    if (getFilter().searchMonitoringInformation()) {      readReplicationMonitoring();    }  } catch (  ADSContextException ade) {    throw new TopologyCacheException(ade);  }catch (  Throwable t) {    throw new TopologyCacheException(TopologyCacheException.Type.BUG,t);  }}  }
class C{  public InvalidDataTypeException(Throwable ex){  super(ex);}  }
class C{  @Override public Behavior initialBehavior(Optional<CargoState> snapshotState){  BehaviorBuilder b=newBehaviorBuilder(snapshotState.orElse(CargoState.builder().cargo(Cargo.builder().id("").description("").destination("").name("").owner("").build()).timestamp(LocalDateTime.now()).build()));  b.setCommandHandler(RegisterCargo.class,null);  b.setEventHandler(CargoRegistered.class,null);  return b.build();}  }
class C{  public BigInteger nextBigInteger() throws DecodeException {  if (!hasNext(GSER_INTEGER)) {    final LocalizableMessage msg=WARN_GSER_NO_VALID_INTEGER.get(gserValue.substring(pos,length));    throw DecodeException.error(msg);  }  return new BigInteger(next(GSER_INTEGER));}  }
class C{  public static String signQueryString(String queryString,String realm,String hostEntity,String hostEntityRole) throws SAML2Exception {  String method="signQueryString : ";  if (debug.messageEnabled()) {    debug.message(method + "queryString :" + queryString);  }  String alias=getSigningCertAlias(realm,hostEntity,hostEntityRole);  String encryptedKeyPass=getSigningCertEncryptedKeyPass(realm,hostEntity,hostEntityRole);  if (debug.messageEnabled()) {    debug.message(method + "realm is : " + realm);    debug.message(method + "hostEntity is : " + hostEntity);    debug.message(method + "Host Entity role is : " + hostEntityRole);    debug.message(method + "Signing Cert Alias is : " + alias);    if (encryptedKeyPass != null && !encryptedKeyPass.isEmpty()) {      debug.message(method + "Using provided Signing Cert KeyPass");    }  }  PrivateKey signingKey;  if (encryptedKeyPass == null || encryptedKeyPass.isEmpty()) {    signingKey=keyProvider.getPrivateKey(alias);  } else {    signingKey=keyProvider.getPrivateKey(alias,encryptedKeyPass);  }  if (signingKey == null) {    debug.error("Incorrect configuration for Signing Certificate.");    throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));  }  return QuerySignatureUtil.sign(queryString,signingKey);}  }
class C{  public void paintSliderBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  public boolean startsWith(List<Rdn> rdns){  if (rdns == null) {    return false;  }  int len1=this.rdns.size();  int len2=rdns.size();  return (len1 >= len2 && doesListMatch(0,len2,rdns));}  }
class C{  public final void testRead06() throws IOException {  InputStream is=new ByteArrayInputStream(myMessage);  DigestInputStream dis=new DigestInputStream(is,null);  dis.on(false);  for (int i=0; i < MY_MESSAGE_LEN; i++) {    assertTrue((byte)dis.read() == myMessage[i]);  }}  }
class C{  public void init(InputMeta in) throws IOException {  height=Math.abs(in.readShort());  in.skip(2);  angle=(float)(in.readShort() / 1800.0 * Math.PI);  in.skip(2);  bold=(in.readShort() >= BOLDTHRESHOLD ? MARKER_BOLD : 0);  italic=(in.readByte() != 0 ? MARKER_ITALIC : 0);  underline=(in.readByte() != 0);  strikeout=(in.readByte() != 0);  charset=in.readByte();  in.skip(3);  pitchAndFamily=in.readByte();  byte[] name=new byte[NAME_SIZE];  int k;  for (k=0; k < NAME_SIZE; ++k) {    int c=in.readByte();    if (c == 0) {      break;    }    name[k]=(byte)c;  }  try {    faceName=new String(name,0,k,"Cp1252");  } catch (  UnsupportedEncodingException e) {    faceName=new String(name,0,k);  }  faceName=faceName.toLowerCase();}  }
class C{  public boolean isSubjectExclusive(String subjectName) throws NameNotFoundException {  if (!users.containsKey(subjectName)) {    String[] objs={subjectName};    throw (new NameNotFoundException(ResBundleUtils.rbName,"name_not_present",objs,subjectName,PolicyException.USER_COLLECTION));  } else {    return ((QualifiedSubject)users.get(subjectName)).isExclusive();  }}  }
class C{  private int expandFlexItems(FlexLine flexLine,@FlexDirection int flexDirection,int maxMainSize,int paddingAlongMainAxis,int startIndex){  int childIndex=startIndex;  if (flexLine.mTotalFlexGrow <= 0 || maxMainSize < flexLine.mMainSize) {    childIndex+=flexLine.mItemCount;    return childIndex;  }  int sizeBeforeExpand=flexLine.mMainSize;  boolean needsReexpand=false;  float unitSpace=(maxMainSize - flexLine.mMainSize) / flexLine.mTotalFlexGrow;  flexLine.mMainSize=paddingAlongMainAxis + flexLine.mDividerLengthInMainSize;  float accumulatedRoundError=0;  for (int i=0; i < flexLine.mItemCount; i++) {    View child=getReorderedChildAt(childIndex);    if (child == null) {      continue;    } else     if (child.getVisibility() == View.GONE) {      childIndex++;      continue;    }    LayoutParams lp=(LayoutParams)child.getLayoutParams();    if (isMainAxisDirectionHorizontal(flexDirection)) {      if (!mChildrenFrozen[childIndex]) {        float rawCalculatedWidth=child.getMeasuredWidth() + unitSpace * lp.flexGrow;        if (i == flexLine.mItemCount - 1) {          rawCalculatedWidth+=accumulatedRoundError;          accumulatedRoundError=0;        }        int newWidth=Math.round(rawCalculatedWidth);        if (newWidth > lp.maxWidth) {          needsReexpand=true;          newWidth=lp.maxWidth;          mChildrenFrozen[childIndex]=true;          flexLine.mTotalFlexGrow-=lp.flexGrow;        } else {          accumulatedRoundError+=(rawCalculatedWidth - newWidth);          if (accumulatedRoundError > 1.0) {            newWidth+=1;            accumulatedRoundError-=1.0;          } else           if (accumulatedRoundError < -1.0) {            newWidth-=1;            accumulatedRoundError+=1.0;          }        }        child.measure(MeasureSpec.makeMeasureSpec(newWidth,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(child.getMeasuredHeight(),MeasureSpec.EXACTLY));      }      flexLine.mMainSize+=child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;    } else {      if (!mChildrenFrozen[childIndex]) {        float rawCalculatedHeight=child.getMeasuredHeight() + unitSpace * lp.flexGrow;        if (i == flexLine.mItemCount - 1) {          rawCalculatedHeight+=accumulatedRoundError;          accumulatedRoundError=0;        }        int newHeight=Math.round(rawCalculatedHeight);        if (newHeight > lp.maxHeight) {          needsReexpand=true;          newHeight=lp.maxHeight;          mChildrenFrozen[childIndex]=true;          flexLine.mTotalFlexGrow-=lp.flexGrow;        } else {          accumulatedRoundError+=(rawCalculatedHeight - newHeight);          if (accumulatedRoundError > 1.0) {            newHeight+=1;            accumulatedRoundError-=1.0;          } else           if (accumulatedRoundError < -1.0) {            newHeight-=1;            accumulatedRoundError+=1.0;          }        }        child.measure(MeasureSpec.makeMeasureSpec(child.getMeasuredWidth(),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(newHeight,MeasureSpec.EXACTLY));      }      flexLine.mMainSize+=child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;    }    childIndex++;  }  if (needsReexpand && sizeBeforeExpand != flexLine.mMainSize) {    expandFlexItems(flexLine,flexDirection,maxMainSize,paddingAlongMainAxis,startIndex);  }  return childIndex;}  }
class C{  private static MenuResult<Void> commitManagedObject(ConsoleApplication app,ManagementContext context,ManagedObject<?> mo,SubCommandHandler handler) throws ClientException {  ManagedObjectDefinition<?,?> d=mo.getManagedObjectDefinition();  LocalizableMessage ufn=d.getUserFriendlyName();  PropertyValueEditor editor=new PropertyValueEditor(app,context);  while (true) {    if (app.isInteractive()) {      SortedSet<PropertyDefinition<?>> properties=new TreeSet<>();      for (      PropertyDefinition<?> pd : d.getAllPropertyDefinitions()) {        if (cannotDisplay(app,pd)) {          continue;        }        properties.add(pd);      }      MenuResult<Void> result=editor.edit(mo,properties,true);      if (result.isSuccess()) {        result=checkReferences(app,context,mo,handler);        if (result.isAgain()) {          continue;        }      }      if (result.isQuit()) {        if (!app.isMenuDrivenMode()) {          app.println();          app.println(INFO_DSCFG_CONFIRM_CREATE_FAIL.get(ufn));        }        return MenuResult.quit();      } else       if (result.isCancel()) {        return MenuResult.cancel();      }    }    try {      mo.commit();      if (app.isInteractive() || app.isVerbose()) {        app.println();        app.println(INFO_DSCFG_CONFIRM_CREATE_SUCCESS.get(ufn));      }      if (handler != null) {        for (        PropertyEditorModification<?> mod : editor.getModifications()) {          try {            Argument arg=createArgument(mod);            handler.getCommandBuilder().addArgument(arg);          } catch (          ArgumentException ae) {            throw new RuntimeException("Unexpected error generating the command builder: " + ae,ae);          }        }        handler.setCommandBuilderUseful(true);      }      return MenuResult.success();    } catch (    MissingMandatoryPropertiesException e) {      if (!app.isInteractive()) {        throw new ClientException(ReturnCode.CONSTRAINT_VIOLATION,e.getMessageObject(),e);      }      app.errPrintln();      displayMissingMandatoryPropertyException(app,e);      app.errPrintln();      if (!app.confirmAction(INFO_DSCFG_PROMPT_EDIT_AGAIN.get(ufn),true)) {        return MenuResult.cancel();      }    }catch (    AuthorizationException e) {      LocalizableMessage msg=ERR_DSCFG_ERROR_CREATE_AUTHZ.get(ufn);      throw new ClientException(ReturnCode.INSUFFICIENT_ACCESS_RIGHTS,msg);    }catch (    ConcurrentModificationException e) {      LocalizableMessage msg=ERR_DSCFG_ERROR_CREATE_CME.get(ufn);      throw new ClientException(ReturnCode.CONSTRAINT_VIOLATION,msg);    }catch (    OperationRejectedException e) {      if (!app.isInteractive()) {        throw new ClientException(ReturnCode.CONSTRAINT_VIOLATION,e.getMessageObject(),e);      }      app.errPrintln();      displayOperationRejectedException(app,e);      app.errPrintln();      if (!app.confirmAction(INFO_DSCFG_PROMPT_EDIT_AGAIN.get(ufn),true)) {        return MenuResult.cancel();      }    }catch (    LdapException e) {      LocalizableMessage msg=ERR_DSCFG_ERROR_CREATE_CE.get(ufn,e.getMessage());      return interactivePrintOrThrowError(app,msg,CLIENT_SIDE_SERVER_DOWN);    }catch (    ManagedObjectAlreadyExistsException e) {      LocalizableMessage msg=ERR_DSCFG_ERROR_CREATE_MOAEE.get(ufn);      return interactivePrintOrThrowError(app,msg,ENTRY_ALREADY_EXISTS);    }  }}  }
class C{  public void createStructure(){  MP3File.getStructureFormatter().openHeadingElement(TYPE_TAG,getIdentifier());  super.createStructureHeader();  MP3File.getStructureFormatter().openHeadingElement(TYPE_HEADER,"");  MP3File.getStructureFormatter().addElement(TYPE_UNSYNCHRONISATION,this.isUnsynchronization());  MP3File.getStructureFormatter().addElement(TYPE_CRCDATA,this.crcData);  MP3File.getStructureFormatter().addElement(TYPE_EXPERIMENTAL,this.experimental);  MP3File.getStructureFormatter().addElement(TYPE_EXTENDED,this.extended);  MP3File.getStructureFormatter().addElement(TYPE_PADDINGSIZE,this.paddingSize);  MP3File.getStructureFormatter().addElement(TYPE_FOOTER,this.footer);  MP3File.getStructureFormatter().addElement(TYPE_IMAGEENCODINGRESTRICTION,this.paddingSize);  MP3File.getStructureFormatter().addElement(TYPE_IMAGESIZERESTRICTION,this.imageSizeRestriction);  MP3File.getStructureFormatter().addElement(TYPE_TAGRESTRICTION,this.tagRestriction);  MP3File.getStructureFormatter().addElement(TYPE_TAGSIZERESTRICTION,this.tagSizeRestriction);  MP3File.getStructureFormatter().addElement(TYPE_TEXTFIELDSIZERESTRICTION,this.textFieldSizeRestriction);  MP3File.getStructureFormatter().addElement(TYPE_TEXTENCODINGRESTRICTION,this.textEncodingRestriction);  MP3File.getStructureFormatter().addElement(TYPE_UPDATETAG,this.updateTag);  MP3File.getStructureFormatter().closeHeadingElement(TYPE_HEADER);  super.createStructureBody();  MP3File.getStructureFormatter().closeHeadingElement(TYPE_TAG);}  }
class C{  public InsertWebXMLContent(Pattern pattern){  this.pattern=pattern;}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  public void testGetSpanCount(){  mRichTextView.formatSpan(0,5,RichTextView.FormatType.BOLD);  assertEquals(1,mRichTextView.getSpanCount());}  }
class C{  public void fireTimeoutTimer(){  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))   logger.logDebug("fireTimeoutTimer " + this);  SIPDialog dialog=(SIPDialog)this.getDialog();  if (TransactionState._CALLING == this.getInternalState() || TransactionState._TRYING == this.getInternalState() || TransactionState._PROCEEDING == this.getInternalState()) {    if (dialog != null && (dialog.getState() == null || dialog.getState() == DialogState.EARLY)) {      if (SIPTransactionStack.isDialogCreated(this.getMethod())) {        dialog.delete();      }    } else     if (dialog != null) {      if (this.getMethod().equalsIgnoreCase(Request.BYE) && dialog.isTerminatedOnBye()) {        dialog.delete();      }    }  }  if (TransactionState._COMPLETED != this.getInternalState() && TransactionState._TERMINATED != this.getInternalState()) {    raiseErrorEvent(SIPTransactionErrorEvent.TIMEOUT_ERROR);    if (this.getMethod().equalsIgnoreCase(Request.CANCEL)) {      SIPClientTransaction inviteTx=(SIPClientTransaction)this.getOriginalRequest().getInviteTransaction();      if (inviteTx != null && ((inviteTx.getInternalState() == TransactionState._CALLING || inviteTx.getInternalState() == TransactionState._PROCEEDING)) && inviteTx.getDialog() != null) {        inviteTx.setState(TransactionState._TERMINATED);      }    }  } else {    this.setState(TransactionState._TERMINATED);  }}  }
class C{  public SAMLVersionMismatchException(String s){  super(s);}  }
class C{  private int decryptBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if ((inOff + blockSize) > in.length) {    throw new DataLengthException("input buffer too short");  }  System.arraycopy(in,inOff,cbcNextV,0,blockSize);  int length=cipher.processBlock(in,inOff,out,outOff);  for (int i=0; i < blockSize; i++) {    out[outOff + i]^=cbcV[i];  }  byte[] tmp;  tmp=cbcV;  cbcV=cbcNextV;  cbcNextV=tmp;  return length;}  }
class C{  public java.lang.String signXML(java.lang.String XML,java.lang.String certAlias) throws XMLSignatureException {  return sp.signXML(XML,certAlias);}  }
class C{  public TransformerException(String message){  super(message);  this.containedException=null;  this.locator=null;}  }
class C{  private static boolean mayUseExec(){  return !DirectoryServer.getEnvironmentConfig().disableExec();}  }
class C{  protected boolean createTunnelToTarget(HttpRoute route,HttpContext context) throws HttpException, IOException {  HttpHost proxy=route.getProxyHost();  HttpHost target=route.getTargetHost();  HttpResponse response=null;  boolean done=false;  while (!done) {    done=true;    if (!this.managedConn.isOpen()) {      this.managedConn.open(route,context,this.params);    }    HttpRequest connect=createConnectRequest(route,context);    String agent=HttpProtocolParams.getUserAgent(params);    if (agent != null) {      connect.addHeader(HTTP.USER_AGENT,agent);    }    connect.addHeader(HTTP.TARGET_HOST,target.toHostString());    AuthScheme authScheme=this.proxyAuthState.getAuthScheme();    AuthScope authScope=this.proxyAuthState.getAuthScope();    Credentials creds=this.proxyAuthState.getCredentials();    if (creds != null) {      if (authScope != null || !authScheme.isConnectionBased()) {        try {          connect.addHeader(authScheme.authenticate(creds,connect));        } catch (        AuthenticationException ex) {          if (this.log.isErrorEnabled()) {            this.log.error("Proxy authentication error: " + ex.getMessage());          }        }      }    }    response=requestExec.execute(connect,this.managedConn,context);    int status=response.getStatusLine().getStatusCode();    if (status < 200) {      throw new HttpException("Unexpected response to CONNECT request: " + response.getStatusLine());    }    CredentialsProvider credsProvider=(CredentialsProvider)context.getAttribute(ClientContext.CREDS_PROVIDER);    if (credsProvider != null && HttpClientParams.isAuthenticating(params)) {      if (this.proxyAuthHandler.isAuthenticationRequested(response,context)) {        this.log.debug("Proxy requested authentication");        Map<String,Header> challenges=this.proxyAuthHandler.getChallenges(response,context);        try {          processChallenges(challenges,this.proxyAuthState,this.proxyAuthHandler,response,context);        } catch (        AuthenticationException ex) {          if (this.log.isWarnEnabled()) {            this.log.warn("Authentication error: " + ex.getMessage());            break;          }        }        updateAuthState(this.proxyAuthState,proxy,credsProvider);        if (this.proxyAuthState.getCredentials() != null) {          done=false;          if (this.reuseStrategy.keepAlive(response,context)) {            this.log.debug("Connection kept alive");            HttpEntity entity=response.getEntity();            if (entity != null) {              entity.consumeContent();            }          } else {            this.managedConn.close();          }        }      } else {        this.proxyAuthState.setAuthScope(null);      }    }  }  int status=response.getStatusLine().getStatusCode();  if (status > 299) {    HttpEntity entity=response.getEntity();    if (entity != null) {      response.setEntity(new BufferedHttpEntity(entity));    }    this.managedConn.close();    throw new TunnelRefusedException("CONNECT refused by proxy: " + response.getStatusLine(),response);  }  this.managedConn.markReusable();  return false;}  }
class C{  private void updateSystemIcon(){  Window window=getWindow();  if (window == null) {    systemIcon=null;    return;  }  java.util.List<Image> icons=window.getIconImages();  assert icons != null;  if (icons.size() == 0) {    systemIcon=null;  } else   if (icons.size() == 1) {    systemIcon=icons.get(0);  } else {    systemIcon=SunToolkit.getScaledIconImage(icons,IMAGE_WIDTH,IMAGE_HEIGHT);  }}  }
class C{  @Override public void initializeForTemplate(TemplateFile templateFile,Template template,String[] arguments,int lineNumber,List<LocalizableMessage> warnings) throws InitializationException {  this.templateFile=templateFile;  if (arguments.length != 0) {    LocalizableMessage message=ERR_MAKELDIF_TAG_INVALID_ARGUMENT_COUNT.get(getName(),lineNumber,0,arguments.length);    throw new InitializationException(message);  }}  }
class C{  public AuthorizationToken(Map<String,String> token,boolean fragment){  this.token=token;  this.fragment=fragment;}  }
class C{  public static AppEventsLogger newLogger(Context context,Session session){  return new AppEventsLogger(context,null,session);}  }
class C{  public void logBindRequest(BindOperation bindOperation){}  }
class C{  protected static boolean isCloneable(Object obj){  return obj instanceof Cloneable;}  }
class C{  public void clear(){  data.clear();}  }
class C{  private static int unsignedToSigned(int unsigned,int size){  if ((unsigned & (1 << size - 1)) != 0) {    unsigned=-1 * ((1 << size - 1) - (unsigned & ((1 << size - 1) - 1)));  }  return unsigned;}  }
class C{  public static long calculateChecksum(final UIComponent component){  try {    final Checksum checksumHandler=new CRC32();    final UIFacesVisitor visitors=JKJsfUtil.visitComponent(component);    final List<UIInput> inputs=visitors.getInputs();    for (    final UIInput uiInput : inputs) {      if (uiInput.getValue() == null) {        checksumHandler.update("null".getBytes(),0,0);      } else {        final byte[] bytes=uiInput.getValue().toString().getBytes("UTF-8");        checksumHandler.update(bytes,0,bytes.length);      }    }    return checksumHandler.getValue();  } catch (  final Exception e) {    JKExceptionUtil.handle(e);    return -1;  }}  }
class C{  public boolean isValid(Object session) throws SessionException {  try {    return SSOTokenManager.getInstance().isValidToken((SSOToken)session);  } catch (  SSOException se) {    throw new SessionException(se);  }}  }
class C{  private boolean isNumericOID(String oid){  if (oid == null || oid.isEmpty() || !startsAndEndsWithDigit(oid) || !oid.contains(".") || oid.contains("..")) {    return false;  }  StringTokenizer tokenizer=new StringTokenizer(oid,".");  while (tokenizer.hasMoreTokens()) {    String token=tokenizer.nextToken();    for (    char c : token.toCharArray()) {      if (!Character.isDigit(c)) {        return false;      }    }  }  return true;}  }
class C{  public void addService(ContextService service){  if (service.getWsdlfile() != null) {    URL wsdlURL=null;    try {      wsdlURL=new URL(service.getWsdlfile());    } catch (    MalformedURLException e) {    }    if (wsdlURL == null) {      try {        wsdlURL=((Context)container).getServletContext().getResource(service.getWsdlfile());      } catch (      MalformedURLException e) {      }    }    if (wsdlURL == null) {      try {        wsdlURL=((Context)container).getServletContext().getResource("/" + service.getWsdlfile());        log.debug("  Changing service ref wsdl file for /" + service.getWsdlfile());      } catch (      MalformedURLException e) {        log.error(sm.getString("naming.wsdlFailed",e));      }    }    if (wsdlURL == null)     service.setWsdlfile(null); else     service.setWsdlfile(wsdlURL.toString());  }  if (service.getJaxrpcmappingfile() != null) {    URL jaxrpcURL=null;    try {      jaxrpcURL=new URL(service.getJaxrpcmappingfile());    } catch (    MalformedURLException e) {    }    if (jaxrpcURL == null) {      try {        jaxrpcURL=((Context)container).getServletContext().getResource(service.getJaxrpcmappingfile());      } catch (      MalformedURLException e) {      }    }    if (jaxrpcURL == null) {      try {        jaxrpcURL=((Context)container).getServletContext().getResource("/" + service.getJaxrpcmappingfile());        log.debug("  Changing service ref jaxrpc file for /" + service.getJaxrpcmappingfile());      } catch (      MalformedURLException e) {        log.error(sm.getString("naming.wsdlFailed",e));      }    }    if (jaxrpcURL == null)     service.setJaxrpcmappingfile(null); else     service.setJaxrpcmappingfile(jaxrpcURL.toString());  }  Reference ref=new ServiceRef(service.getName(),service.getType(),service.getServiceqname(),service.getWsdlfile(),service.getJaxrpcmappingfile());  Iterator<String> portcomponent=service.getServiceendpoints();  while (portcomponent.hasNext()) {    String serviceendpoint=portcomponent.next();    StringRefAddr refAddr=new StringRefAddr(ServiceRef.SERVICEENDPOINTINTERFACE,serviceendpoint);    ref.add(refAddr);    String portlink=service.getPortlink(serviceendpoint);    refAddr=new StringRefAddr(ServiceRef.PORTCOMPONENTLINK,portlink);    ref.add(refAddr);  }  Iterator<String> handlers=service.getHandlers();  while (handlers.hasNext()) {    String handlername=handlers.next();    ContextHandler handler=service.getHandler(handlername);    HandlerRef handlerRef=new HandlerRef(handlername,handler.getHandlerclass());    Iterator<String> localParts=handler.getLocalparts();    while (localParts.hasNext()) {      String localPart=localParts.next();      String namespaceURI=handler.getNamespaceuri(localPart);      handlerRef.add(new StringRefAddr(HandlerRef.HANDLER_LOCALPART,localPart));      handlerRef.add(new StringRefAddr(HandlerRef.HANDLER_NAMESPACE,namespaceURI));    }    Iterator<String> params=handler.listProperties();    while (params.hasNext()) {      String paramName=params.next();      String paramValue=(String)handler.getProperty(paramName);      handlerRef.add(new StringRefAddr(HandlerRef.HANDLER_PARAMNAME,paramName));      handlerRef.add(new StringRefAddr(HandlerRef.HANDLER_PARAMVALUE,paramValue));    }    for (int i=0; i < handler.getSoapRolesSize(); i++) {      handlerRef.add(new StringRefAddr(HandlerRef.HANDLER_SOAPROLE,handler.getSoapRole(i)));    }    for (int i=0; i < handler.getPortNamesSize(); i++) {      handlerRef.add(new StringRefAddr(HandlerRef.HANDLER_PORTNAME,handler.getPortName(i)));    }    ((ServiceRef)ref).addHandler(handlerRef);  }  try {    if (log.isDebugEnabled()) {      log.debug("  Adding service ref " + service.getName() + "  "+ ref);    }    createSubcontexts(envCtx,service.getName());    envCtx.bind(service.getName(),ref);  } catch (  NamingException e) {    log.error(sm.getString("naming.bindFailed",e));  }}  }
class C{  public FileWriterWithEncoding(File file,String encoding,boolean append) throws IOException {  super();  this.out=initWriter(file,encoding,append);}  }
class C{  public RestAuthResponseException(final int statusCode,final Map<String,String> responseHeaders,final JsonValue jsonResponse){  super(statusCode,jsonResponse.toString());  this.statusCode=statusCode;  this.responseHeaders=responseHeaders;  this.jsonResponse=jsonResponse;}  }
class C{  public boolean contains_padstack(freert.library.LibPadstack p_padstack){  for (  BrdViaInfo curr_info : this.vinfo_list) {    if (curr_info.get_padstack() == p_padstack) {      return true;    }  }  return false;}  }
class C{  public X509CRLImpl(InputStream in) throws CRLException {  try {    this.crl=(CertificateList)CertificateList.ASN1.decode(in);    this.tbsCertList=crl.getTbsCertList();    this.extensions=tbsCertList.getCrlExtensions();  } catch (  IOException e) {    throw new CRLException(e);  }}  }
class C{  public boolean isPrimitive(){  char tcode=signature.charAt(0);  return ((tcode != 'L') && (tcode != '['));}  }
class C{  @BeforeTest(groups={"cli-idrepo"}) public void suiteSetup() throws CLIException {  Map<String,Object> env=new HashMap<String,Object>();  env.put(CLIConstants.SYS_PROPERTY_COMMAND_NAME,"amadm");  env.put(CLIConstants.SYS_PROPERTY_DEFINITION_FILES,"com.sun.identity.cli.AccessManager");  env.put(CLIConstants.SYS_PROPERTY_OUTPUT_WRITER,outputWriter);  cmdManager=new CommandManager(env);}  }
class C{  private static boolean isSchemaBackend(String backendId){  return "schema".equalsIgnoreCase(backendId);}  }
class C{  public Handle(int tag,String owner,String name,String desc,boolean itf){  this.tag=tag;  this.owner=owner;  this.name=name;  this.desc=desc;  this.itf=itf;}  }
class C{  public boolean hasRights(int rights){  List<PermBindRulePair> pairs=getPermBindRulePairs();  for (  PermBindRulePair p : pairs) {    if (p.hasRights(rights)) {      return true;    }  }  return false;}  }
class C{  public PipedReader(PipedWriter src,int pipeSize) throws IOException {  initPipe(pipeSize);  connect(src);}  }
class C{  public void postProcessModify(SSOToken token,String entryDN,Map oldAttributes,Map newAttributes,int objectType) throws AMPostCallBackException {}  }
class C{  public static boolean matchSecret(String secret){  return false;}  }
class C{  void removeEQ(Object o){  final ReentrantLock lock=this.lock;  lock.lock();  try {    for (Iterator<E> it=q.iterator(); it.hasNext(); ) {      if (o == it.next()) {        it.remove();        break;      }    }  }  finally {    lock.unlock();  }}  }
class C{  protected ArrayList<Integer> calculateHeightsForAnimationParts(int titleViewHeight,int contentViewHeight,int additionalFlipsCount){  ArrayList<Integer> partHeights=new ArrayList<>();  int additionalPartsTotalHeight=contentViewHeight - titleViewHeight * 2;  if (additionalPartsTotalHeight < 0)   throw new IllegalStateException("Content View height is too small");  partHeights.add(titleViewHeight);  partHeights.add(titleViewHeight);  if (additionalPartsTotalHeight == 0)   return partHeights;  if (additionalFlipsCount != 0) {    int additionalPartHeight=additionalPartsTotalHeight / additionalFlipsCount;    int remainingHeight=additionalPartsTotalHeight % additionalFlipsCount;    if (additionalPartHeight + remainingHeight > titleViewHeight)     throw new IllegalStateException("Additional flips count is too small");    for (int i=0; i < additionalFlipsCount; i++)     partHeights.add(additionalPartHeight + (i == 0 ? remainingHeight : 0));  } else {    int partsCount=additionalPartsTotalHeight / titleViewHeight;    int restPartHeight=additionalPartsTotalHeight % titleViewHeight;    for (int i=0; i < partsCount; i++)     partHeights.add(titleViewHeight);    if (restPartHeight > 0)     partHeights.add(restPartHeight);  }  return partHeights;}  }
class C{  public void testInit01() throws Exception {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  createKeys();  KeyAgreement[] kAgs=createKAs();  SecureRandom random=null;  AlgorithmParameterSpec aps=null;  DHParameterSpec dhPs=new DHParameterSpec(new BigInteger("56"),new BigInteger("56"));  for (int i=0; i < kAgs.length; i++) {    try {      kAgs[i].init(publKey);      fail("InvalidKeyException must be throw");    } catch (    InvalidKeyException e) {    }    try {      kAgs[i].init(publKey,new SecureRandom());      fail("InvalidKeyException must be throw");    } catch (    InvalidKeyException e) {    }    try {      kAgs[i].init(publKey,random);      fail("InvalidKeyException must be throw");    } catch (    InvalidKeyException e) {    }    try {      kAgs[i].init(publKey,dhPs);      fail("InvalidKeyException must be throw");    } catch (    InvalidKeyException e) {    }    try {      kAgs[i].init(publKey,aps);      fail("InvalidKeyException must be throw");    } catch (    InvalidKeyException e) {    }    try {      kAgs[i].init(publKey,dhPs,new SecureRandom());      fail("InvalidKeyException must be throw");    } catch (    InvalidKeyException e) {    }  }}  }
class C{  public TaskRunnable previous(){  return previousTask;}  }
class C{  protected HttpURLConnection createConnection(String uri) throws IOException {  URL url=new URL(createUri(uri));  return (HttpURLConnection)url.openConnection();}  }
class C{  public List<Long> deleteEmptyFolders(){  ArrayList<Long> folderIds=new ArrayList<Long>();  SQLiteDatabase db=mOpenHelper.getWritableDatabase();  db.beginTransaction();  try {    String selection=LauncherSettings.Favorites.ITEM_TYPE + " = " + LauncherSettings.Favorites.ITEM_TYPE_FOLDER+ " AND "+ LauncherSettings.Favorites._ID+ " NOT IN (SELECT "+ LauncherSettings.Favorites.CONTAINER+ " FROM "+ TABLE_FAVORITES+ ")";    Cursor c=db.query(TABLE_FAVORITES,new String[]{LauncherSettings.Favorites._ID},selection,null,null,null,null);    while (c.moveToNext()) {      folderIds.add(c.getLong(0));    }    c.close();    if (folderIds.size() > 0) {      db.delete(TABLE_FAVORITES,Utilities.createDbSelectionQuery(LauncherSettings.Favorites._ID,folderIds),null);    }    db.setTransactionSuccessful();  } catch (  SQLException ex) {    Log.e(TAG,ex.getMessage(),ex);    folderIds.clear();  } finally {    db.endTransaction();  }  return folderIds;}  }
class C{  public void test_SelectOrderBy() throws SQLException {  String selectQuery="SELECT onum FROM " + DatabaseCreator.ORDERS_TABLE + " ORDER BY onum";  ResultSet result=statement.executeQuery(selectQuery);  ArrayList<Integer> values=new ArrayList<Integer>();  values.add(Integer.valueOf(3001));  values.add(Integer.valueOf(3002));  values.add(Integer.valueOf(3003));  values.add(Integer.valueOf(3005));  values.add(Integer.valueOf(3006));  values.add(Integer.valueOf(3007));  values.add(Integer.valueOf(3008));  values.add(Integer.valueOf(3009));  values.add(Integer.valueOf(3010));  values.add(Integer.valueOf(3011));  int index=0;  while (result.next()) {    Integer onum=result.getInt("onum");    assertTrue("result set doesn't contain value",values.contains(onum));    assertEquals("result set is not sorted",index,values.indexOf(onum));    index++;  }  result.close();}  }
class C{  public static List<String> readLines(File file,String encoding) throws IOException {  return readLines(file,Charsets.toCharset(encoding));}  }
class C{  public PrintWriter log(PrintWriter out){  return log(this,out);}  }
class C{  public MimeTypeParseException(){  super();}  }
class C{  public void slashStarComments(boolean flag){  slashStarComments=flag;}  }
class C{  public int compareTo(IteraEdge p_other){  double result=length_square - p_other.length_square;  if (result != 0)   return Signum.as_int(result);  result=from_corner.v_x - p_other.from_corner.v_x;  if (result != 0)   return Signum.as_int(result);  result=from_corner.v_y - p_other.from_corner.v_y;  if (result != 0)   return Signum.as_int(result);  result=to_corner.v_x - p_other.to_corner.v_y;  if (result != 0)   return Signum.as_int(result);  result=to_corner.v_y - p_other.to_corner.v_x;  if (result != 0)   return Signum.as_int(result);  return 1;}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  String xml=(String)getPageSessionAttribute(AuthConfigViewBean.ENTRY_LIST);  List chains=new ArrayList(AMAuthConfigUtils.xmlToAuthConfigurationEntry(xml));  List newChains=new ArrayList();  CCOrderableList list=(CCOrderableList)getChild(REORDER_LIST);  list.restoreStateData();  CCOrderableListModel model=(CCOrderableListModel)list.getModel();  OptionList optList=model.getSelectedOptionList();  int sz=optList.size();  for (int i=0; i < sz; i++) {    String idx=optList.getValue(i);    int num=Integer.parseInt(idx);    newChains.add(chains.get(num));  }  setPageSessionAttribute(AuthConfigViewBean.ENTRY_LIST,AMAuthConfigUtils.authConfigurationEntryToXMLString(newChains));  forwardToAuthConfigViewBean();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  String namespaceURI;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  namespaceURI=employeeNode.getNamespaceURI();{    boolean success=false;    try {      employeeNode.setPrefix("employee1");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public static boolean hasScheme(CharSequence uri){  int len=uri.length();  for (int i=0; i < len; i++) {    char c=uri.charAt(i);    if (c == ':') {      return i > 0;    } else     if (!UriUtil.isSchemeChar(c)) {      return false;    }  }  return false;}  }
class C{  protected void closeStartTag() throws SAXException {  m_elemContext.m_startTagOpen=false;  final String localName=getLocalName(m_elemContext.m_elementName);  final String uri=getNamespaceURI(m_elemContext.m_elementName,true);  if (m_needToCallStartDocument) {    startDocumentInternal();  }  m_saxHandler.startElement(uri,localName,m_elemContext.m_elementName,m_attributes);  m_attributes.clear();  if (m_state != null)   m_state.setCurrentNode(null);}  }
class C{  private void broadcastUnlockRequest(){  final Intent intent=new Intent(ACTION_DISSMISS_UNLOCK);  LocalBroadcastManager.getInstance(this).sendBroadcast(intent);}  }
class C{  public SelfServiceInfoBuilder(){  protectedUserAttributes=new HashSet<>();}  }
class C{  public static String defaultGCCreateDuringOrgConfig(){  initialize();  return (defaultGCCreateDuringOrgConfig);}  }
class C{  public Void call() throws Exception {  log("Opening the connection to " + connection.getURL());  connection.connect();  log("Connection has been ESTABLISHED, using proxy: " + connection.usingProxy());  if (connection.getDoOutput()) {    log("Posting data");    connection.getOutputStream().write(clientsData.getBytes());  }  InputStream is=connection.getInputStream();  log("Input Stream obtained");  byte[] buff=new byte[2048];  int num=0;  int byt=0;  while ((num < buff.length) && ((byt=is.read()) != -1)) {    buff[num++]=(byte)byt;  }  String message=new String(buff,0,num);  log("Got content:\n" + message);  log("------------------");  log("Response code: " + connection.getResponseCode());  assertEquals(httpsResponseContent,message);  return null;}  }
class C{  public Object clone(){  try {    TabularDataSupport c=(TabularDataSupport)super.clone();    c.dataMap=new HashMap<Object,CompositeData>(c.dataMap);    return c;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e.toString(),e);  }}  }
class C{  public void notationDecl(String name,String publicId,String systemId) throws SAXException {}  }
class C{  public void abandon(){  abandon(new ConversationAbandonedEvent(this,new ManuallyAbandonedConversationCanceller()));}  }
class C{  public static String writeStars(String result){  SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(GithubWidgetApplication.getAppContext()).edit();  JSONArray jsonArray=null;  SimpleDateFormat format=new SimpleDateFormat("yyyy-MM-dd");  String nowDateString=format.format(Calendar.getInstance().getTime());  boolean thisIsANewDay=false;  if (SettingsManager.getLastUpdateStarsDate() == null || !SettingsManager.getLastUpdateStarsDate().equals(nowDateString)) {    thisIsANewDay=true;  }  if (thisIsANewDay)   SettingsManager.setTodayStars(0);  try {    jsonArray=new JSONArray(result);    String lastId=SettingsManager.getLastUpdateStarsId();    int stars=SettingsManager.getTodayStars();    boolean first=true;    for (int i=0; i < jsonArray.length(); i++) {      JSONObject jsonObject=jsonArray.getJSONObject(i);      if (jsonObject == null)       continue;      if (jsonObject.has("id") && jsonObject.getString("id").equals(lastId))       break;      if (first) {        if (jsonObject.has("id")) {          SettingsManager.setLastUpdateStarsId(jsonObject.getString("id"));          SettingsManager.setLastUpdateStarsDate(jsonObject.getString("created_at").substring(0,10));          first=false;        }      }      if (nowDateString.equals(jsonObject.getString("created_at").substring(0,10))) {        if (jsonObject.has("type") && jsonObject.getString("type").equals("WatchEvent")) {          JSONObject payload=jsonObject.getJSONObject("payload");          if (payload.has("action") && payload.getString("action").equals("started")) {            JSONObject repo=jsonObject.getJSONObject("repo");            if (repo != null && repo.has("name")) {              String repoName=repo.getString("name");              if (repoName != null)               repoName=repoName.toLowerCase();              String userName=SettingsManager.getUserName();              if (userName != null)               userName=userName.toLowerCase();              if (repoName != null && userName != null) {                if (repoName.indexOf(userName) == 0) {                  stars++;                }              }            }          }        }      }    }    SettingsManager.setTodayStars(stars);    return "+" + stars;  } catch (  JSONException e) {    e.printStackTrace();    return "+" + 0;  } finally {    editor.commit();  }}  }
class C{  public String toStringImpl(){  return state;}  }
class C{  @Override protected void finalize() throws Throwable {  try {    connection.close();  } catch (  final Exception ignored) {  }  if (logicalConnection != null && !logicalConnection.isClosed()) {    throw new SQLException("PooledConnection was gc'ed, without" + "its last Connection being closed.");  }}  }
class C{  private String fetchCharsetFromCache(Client client,Locale loc){  Map cCache=(Map)charsetCache.get(client.getClientType());  String val=null;  if (cCache != null) {    val=(String)cCache.get(loc);  }  return val;}  }
class C{  private boolean isAuthnManagedLocally(){  return pwPolicyState != null;}  }
class C{  @Override protected void decrypt() throws IOException {  Utils.checkState(inBuffer.position() >= padding);  if (inBuffer.position() == padding) {    return;  }  inBuffer.flip();  outBuffer.clear();  decryptBuffer(outBuffer);  inBuffer.clear();  outBuffer.flip();  if (padding > 0) {    outBuffer.position(padding);  }}  }
class C{  public boolean hasMoreRequirements(boolean noFilter){  if (localFlag) {    return (acLocal.hasMoreRequirements(noFilter));  } else {    if ((!loginStatus.equals(Status.IN_PROGRESS)) || ((getCallbacks(receivedDocument,noFilter)) == null)) {      return (false);    }    return (true);  }}  }
class C{  public ItemStack(final Material type,final int amount){  this(type.getId(),amount);}  }
class C{  public void test_unwrap_ByteBuffer$ByteBuffer_01() throws IOException, InterruptedException {  prepareEngines();  doHandshake();  ByteBuffer bbs=ByteBuffer.allocate(100);  ByteBuffer bbd=ByteBuffer.allocate(100);  try {    clientEngine.engine.unwrap(bbs,new ByteBuffer[]{bbd});    fail("SSLException wasn't thrown");  } catch (  SSLException ex) {  }}  }
class C{  public BasicStroke(float width,int cap,int join,float miterlimit){  this(width,cap,join,miterlimit,null,0.0f);}  }
class C{  public Panel(){  this(new FlowLayout());}  }
class C{  public int highestLayer(){  if (getComponentCount() > 0)   return getLayer(getComponent(0));  return 0;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_notationssetnameditem1.class,args);}  }
class C{  boolean inSameSubroutine(final Label block){  if ((status & VISITED) == 0 || (block.status & VISITED) == 0) {    return false;  }  for (int i=0; i < srcAndRefPositions.length; ++i) {    if ((srcAndRefPositions[i] & block.srcAndRefPositions[i]) != 0) {      return true;    }  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetdoctypenodtd.class,args);}  }
class C{  public static void delete(String dn,Connection ld,boolean doDelete){  String theDN="";  try {    ConnectionEntryReader res=ld.search(LDAPRequests.newSearchRequest(dn,SearchScope.SINGLE_LEVEL,"objectclass=*"));    while (res.hasNext()) {      if (res.isReference()) {        res.readReference();      } else {        SearchResultEntry entry=res.readEntry();        theDN=entry.getName().toString();        delete(theDN,ld,doDelete);      }    }    try {      if (doDelete) {        ld.delete(LDAPRequests.newDeleteRequest(dn));        if (debug.messageEnabled()) {          debug.message(dn + " deleted");        }      }    } catch (    LdapException e) {      if (debug.messageEnabled()) {        debug.message(e.toString());      }    }catch (    Exception e) {      if (debug.messageEnabled()) {        debug.message(e.toString());      }    }  } catch (  Exception me) {  }}  }
class C{  @Override public NamingEnumeration<Binding> listBindings(String name) throws NamingException {  if (log.isDebugEnabled()) {    log.debug(sm.getString("selectorContext.methodUsingString","listBindings",name));  }  return getBoundContext().listBindings(parseName(name));}  }
class C{  public PrintJobAttributeEvent(DocPrintJob source,PrintJobAttributeSet attributes){  super(source);  this.attributes=AttributeSetUtilities.unmodifiableView(attributes);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentinvalidcharacterexceptioncreateentref.class,args);}  }
class C{  boolean validateAttributes(AttrSet attrSet) throws UMSException, DataConstraintException {  Enumeration en1=attrSet.getAttributes();  while (en1.hasMoreElements()) {    Attr attr=(Attr)en1.nextElement();    Enumeration en2=getValidation(attr.getName());    while (en2.hasMoreElements()) {      ValidationElement vElement=(ValidationElement)en2.nextElement();      Validation.validateAttribute(attr,vElement.getValidator(),vElement.getRule());    }  }  return true;}  }
class C{  @Override public void flush() throws IOException {  if (debug > 1) {    System.out.println("flush() @ CompressionResponseStream");  }  if (closed) {    throw new IOException("Cannot flush a closed output stream");  }  if (gzipstream != null) {    gzipstream.flush();  }}  }
class C{  public void addSigner(PrivateKey key,byte[] subjectKeyID,String encryptionOID,String digestOID) throws IllegalArgumentException {  doAddSigner(key,subjectKeyID,encryptionOID,digestOID,new DefaultSignedAttributeTableGenerator(),null,null);}  }
class C{  public static void updateScore(int score){  score+=Integer.parseInt(scoresDisplay.getText().replaceAll("[^0-9]",""));  String output="";  while ((score + output).length() < 7) {    output+="0";  }  output+=score;  scoresDisplay.setText("SCORE\n" + output);}  }
class C{  @Override public void rename(String oldName,String newName) throws NamingException {  getBoundContext().rename(parseName(oldName),parseName(newName));}  }
class C{  public AMGroup createStaticGroup(String name,Map attributes,Map serviceNameAndAttrs) throws AMException, SSOException {  return createGroup(name,attributes,serviceNameAndAttrs,AMObject.STATIC_GROUP);}  }
class C{  public String[] findExecutors() throws MBeanException {  Service service;  try {    service=(Service)getManagedResource();  } catch (  InstanceNotFoundException e) {    throw new MBeanException(e);  }catch (  RuntimeOperationsException e) {    throw new MBeanException(e);  }catch (  InvalidTargetObjectTypeException e) {    throw new MBeanException(e);  }  Executor[] executors=service.findExecutors();  String[] str=new String[executors.length];  for (int i=0; i < executors.length; i++) {    str[i]=executors[i].toString();  }  return str;}  }
class C{  public void paintScrollBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  public void paintTabbedPaneTabAreaBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static ScheduleType createLaunchLater(Date date){  ScheduleType schedule=new ScheduleType();  schedule.type=Type.LAUNCH_LATER;  schedule.launchLaterDate=date;  schedule.toString=schedule.calculateToString();  schedule.hashCode=schedule.calculateHashCode();  return schedule;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wspolicy.AppliesToType createAppliesToType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wspolicy.impl.AppliesToTypeImpl();}  }
class C{  protected void toggleOpenClose(){  setPopupVisible(comboBox,!isPopupVisible(comboBox));}  }
class C{  private OptionalInt(int value){  this.isPresent=true;  this.value=value;}  }
class C{  void shrink(){  int n=m_opMap.elementAt(MAPINDEX_LENGTH);  m_opMap.setToSize(n + 4);  m_opMap.setElementAt(0,n);  m_opMap.setElementAt(0,n + 1);  m_opMap.setElementAt(0,n + 2);  n=m_tokenQueue.size();  m_tokenQueue.setToSize(n + 4);  m_tokenQueue.setElementAt(null,n);  m_tokenQueue.setElementAt(null,n + 1);  m_tokenQueue.setElementAt(null,n + 2);}  }
class C{  public void paintScrollPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void removeUpdate(DocumentEvent e,Shape a,ViewFactory f){  super.removeUpdate(e,a,f);}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {}  }
class C{  protected void installKeyboardActions(){  InputMap km=getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);  SwingUtilities.replaceUIInputMap(splitPane,JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,km);  LazyActionMap.installLazyActionMap(splitPane,BasicSplitPaneUI.class,"SplitPane.actionMap");}  }
class C{  public static boolean isPresent(){  return true;}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  if (isSigned && signedXMLString != null) {    return signedXMLString;  }  StringBuffer xml=new StringBuffer();  String NS="";  String NSP="";  if (declareNS) {    NS=SAML2Constants.PROTOCOL_DECLARE_STR;  }  if (includeNSPrefix) {    NSP=SAML2Constants.PROTOCOL_PREFIX;  }  xml.append("<").append(NSP).append(elementName).append(" ");  xml.append(super.toXMLString(includeNSPrefix,includeNSPrefix));  xml.append("</").append(NSP).append(elementName).append(">");  return xml.toString();}  }
class C{  public void assertConsistency(int options) throws XMPException {  if ((options & STRUCT) > 0 && (options & ARRAY) > 0) {    throw new XMPException("IsStruct and IsArray options are mutually exclusive",XMPError.BADOPTIONS);  } else   if ((options & URI) > 0 && (options & (ARRAY | STRUCT)) > 0) {    throw new XMPException("Structs and arrays can't have \"value\" options",XMPError.BADOPTIONS);  }}  }
class C{  public String elementTypeName(Field field){  Type items=getApiaryConfig().getType(field.getTypeUrl());  if (field.getKind() == Field.Kind.TYPE_MESSAGE) {    Field elements=getField(items,DiscoveryImporter.ELEMENTS_FIELD_NAME);    if (elements != null) {      return typeName(items,elements,"item");    } else {      return objectTypeName(field);    }  }  return nativeElementTypeName(field);}  }
class C{  public synchronized Plugin loadPlugin(File file) throws InvalidPluginException, UnknownDependencyException {  Validate.notNull(file,"File cannot be null");  checkUpdate(file);  Set<Pattern> filters=fileAssociations.keySet();  Plugin result=null;  for (  Pattern filter : filters) {    String name=file.getName();    Matcher match=filter.matcher(name);    if (match.find()) {      PluginLoader loader=fileAssociations.get(filter);      result=loader.loadPlugin(file);    }  }  if (result != null) {    plugins.add(result);    lookupNames.put(result.getDescription().getName(),result);  }  return result;}  }
class C{  private void logout(){  try {synchronized (loginContextLock) {      if (loginContext != null) {        loginContext.logout();        loginContext=null;      }    }  } catch (  LoginException e) {    logger.traceException(e);  }}  }
class C{  boolean removeEq(Object o){  for (int i=0; i < size; i++) {    if (o == queue[i]) {      removeAt(i);      return true;    }  }  return false;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  forwardTo();}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public static String generateID(){  if (random == null) {    return null;  }  byte bytes[]=new byte[SAMLConstants.ID_LENGTH];  random.nextBytes(bytes);  String encodedID=null;  try {    encodedID=Base64.encode(bytes).trim();  } catch (  Exception e) {    e.printStackTrace();  }  return encodedID;}  }
class C{  public static ObjectName createObjectName(String domain,ContextResourceLink resourceLink) throws MalformedObjectNameException {  ObjectName name=null;  String quotedResourceLinkName=ObjectName.quote(resourceLink.getName());  Object container=resourceLink.getNamingResources().getContainer();  if (container instanceof Server) {    name=new ObjectName(domain + ":type=ResourceLink" + ",resourcetype=Global"+ ",name="+ quotedResourceLinkName);  } else   if (container instanceof Context) {    Context context=((Context)container);    ContextName cn=new ContextName(context.getName(),false);    Container host=context.getParent();    name=new ObjectName(domain + ":type=ResourceLink" + ",resourcetype=Context,host="+ host.getName()+ ",context="+ cn.getDisplayName()+ ",name="+ quotedResourceLinkName);  }  return (name);}  }
class C{  public ResponseProvider createResponseProvider(String realmName,String providerType,Map values) throws AMConsoleException {  ResponseProvider provider=null;  try {    PolicyManager policyMgr=getPolicyManager(realmName);    if (policyMgr != null) {      ResponseProviderTypeManager mgr=policyMgr.getResponseProviderTypeManager();      provider=mgr.getResponseProvider(providerType);      provider.setProperties(values);    }  } catch (  NameNotFoundException e) {    throw new AMConsoleException(getErrorString(e));  }catch (  PolicyException e) {    throw new AMConsoleException(getErrorString(e));  }  return provider;}  }
class C{  private boolean isSolveConflict(ReplicationDomainCfg cfg){  return !getBaseDN().equals(DirectoryServer.getSchemaDN()) && cfg.isSolveConflicts();}  }
class C{  public StringBuffer insert(int index,boolean b){  return insert(index,b ? "true" : "false");}  }
class C{  private final void internalMapWrapper(ContextVersion contextVersion,CharChunk path,MappingData mappingData) throws IOException {  int pathOffset=path.getOffset();  int pathEnd=path.getEnd();  boolean noServletPath=false;  int length=contextVersion.path.length();  if (length == (pathEnd - pathOffset)) {    noServletPath=true;  }  int servletPath=pathOffset + length;  path.setOffset(servletPath);  MappedWrapper[] exactWrappers=contextVersion.exactWrappers;  internalMapExactWrapper(exactWrappers,path,mappingData);  boolean checkJspWelcomeFiles=false;  MappedWrapper[] wildcardWrappers=contextVersion.wildcardWrappers;  if (mappingData.wrapper == null) {    internalMapWildcardWrapper(wildcardWrappers,contextVersion.nesting,path,mappingData);    if (mappingData.wrapper != null && mappingData.jspWildCard) {      char[] buf=path.getBuffer();      if (buf[pathEnd - 1] == '/') {        mappingData.wrapper=null;        checkJspWelcomeFiles=true;      } else {        mappingData.wrapperPath.setChars(buf,path.getStart(),path.getLength());        mappingData.pathInfo.recycle();      }    }  }  if (mappingData.wrapper == null && noServletPath && contextVersion.object.getMapperContextRootRedirectEnabled()) {    path.append('/');    pathEnd=path.getEnd();    mappingData.redirectPath.setChars(path.getBuffer(),pathOffset,pathEnd - pathOffset);    path.setEnd(pathEnd - 1);    return;  }  MappedWrapper[] extensionWrappers=contextVersion.extensionWrappers;  if (mappingData.wrapper == null && !checkJspWelcomeFiles) {    internalMapExtensionWrapper(extensionWrappers,path,mappingData,true);  }  if (mappingData.wrapper == null) {    boolean checkWelcomeFiles=checkJspWelcomeFiles;    if (!checkWelcomeFiles) {      char[] buf=path.getBuffer();      checkWelcomeFiles=(buf[pathEnd - 1] == '/');    }    if (checkWelcomeFiles) {      for (int i=0; (i < contextVersion.welcomeResources.length) && (mappingData.wrapper == null); i++) {        path.setOffset(pathOffset);        path.setEnd(pathEnd);        path.append(contextVersion.welcomeResources[i],0,contextVersion.welcomeResources[i].length());        path.setOffset(servletPath);        internalMapExactWrapper(exactWrappers,path,mappingData);        if (mappingData.wrapper == null) {          internalMapWildcardWrapper(wildcardWrappers,contextVersion.nesting,path,mappingData);        }        if (mappingData.wrapper == null && contextVersion.resources != null) {          String pathStr=path.toString();          WebResource file=contextVersion.resources.getResource(pathStr);          if (file != null && file.isFile()) {            internalMapExtensionWrapper(extensionWrappers,path,mappingData,true);            if (mappingData.wrapper == null && contextVersion.defaultWrapper != null) {              mappingData.wrapper=contextVersion.defaultWrapper.object;              mappingData.requestPath.setChars(path.getBuffer(),path.getStart(),path.getLength());              mappingData.wrapperPath.setChars(path.getBuffer(),path.getStart(),path.getLength());              mappingData.requestPath.setString(pathStr);              mappingData.wrapperPath.setString(pathStr);            }          }        }      }      path.setOffset(servletPath);      path.setEnd(pathEnd);    }  }  if (mappingData.wrapper == null) {    boolean checkWelcomeFiles=checkJspWelcomeFiles;    if (!checkWelcomeFiles) {      char[] buf=path.getBuffer();      checkWelcomeFiles=(buf[pathEnd - 1] == '/');    }    if (checkWelcomeFiles) {      for (int i=0; (i < contextVersion.welcomeResources.length) && (mappingData.wrapper == null); i++) {        path.setOffset(pathOffset);        path.setEnd(pathEnd);        path.append(contextVersion.welcomeResources[i],0,contextVersion.welcomeResources[i].length());        path.setOffset(servletPath);        internalMapExtensionWrapper(extensionWrappers,path,mappingData,false);      }      path.setOffset(servletPath);      path.setEnd(pathEnd);    }  }  if (mappingData.wrapper == null && !checkJspWelcomeFiles) {    if (contextVersion.defaultWrapper != null) {      mappingData.wrapper=contextVersion.defaultWrapper.object;      mappingData.requestPath.setChars(path.getBuffer(),path.getStart(),path.getLength());      mappingData.wrapperPath.setChars(path.getBuffer(),path.getStart(),path.getLength());      mappingData.matchType=MappingMatch.DEFAULT;    }    char[] buf=path.getBuffer();    if (contextVersion.resources != null && buf[pathEnd - 1] != '/') {      String pathStr=path.toString();      WebResource file;      if (pathStr.length() == 0) {        file=contextVersion.resources.getResource("/");      } else {        file=contextVersion.resources.getResource(pathStr);      }      if (file != null && file.isDirectory() && contextVersion.object.getMapperDirectoryRedirectEnabled()) {        path.setOffset(pathOffset);        path.append('/');        mappingData.redirectPath.setChars(path.getBuffer(),path.getStart(),path.getLength());      } else {        mappingData.requestPath.setString(pathStr);        mappingData.wrapperPath.setString(pathStr);      }    }  }  path.setOffset(pathOffset);  path.setEnd(pathEnd);}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  IDRepoModel model=(IDRepoModel)getModel();  AMPropertySheet prop=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);  String idRepoType=(String)propertySheetModel.getValue(IDREPO_TYPE);  String idRepoName=(String)propertySheetModel.getValue(IDREPO_NAME);  Map defaultValues=model.getDefaultAttributeValues(idRepoType);  if (idRepoName.trim().length() > 0) {    try {      boolean LoadSchema=false;      Map values=prop.getAttributeValues(defaultValues.keySet());      String realmName=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);      Set set=(HashSet)values.get("idRepoLoadSchema");      if (set != null) {        Iterator i=set.iterator();        if (i.hasNext()) {          String loadingSchemaFlag=(String)i.next();          if (loadingSchemaFlag.equals("true") && IdRepoUtils.hasIdRepoSchema(idRepoType)) {            LoadSchema=true;          }        }      }      model.createIDRepo(realmName,idRepoName,idRepoType,values);      if (LoadSchema == true) {        ServletContext servletCtx=event.getRequestContext().getServletContext();        model.loadIdRepoSchema(idRepoName,realmName,servletCtx);      }      forwardToIDRepoViewBean();    } catch (    AMConsoleException e) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());      forwardTo();    }  } else {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error","idrepo.missing.idRepoName");    forwardTo();  }}  }
class C{  public void addDragSourceListener(DragSourceListener dsl){  if (dsl != null) {synchronized (this) {      listener=DnDEventMulticaster.add(listener,dsl);    }  }}  }
class C{  public EntityException(String msg,String errorCode){  super(msg);  this.localizedMsg=msg;  this.errorCode=errorCode;}  }
class C{  private void assertResultsContainCookieControl(InternalSearchOperation searchOp,List<String> cookies) throws Exception {  for (  SearchResultEntry entry : searchOp.getSearchEntries()) {    EntryChangelogNotificationControl cookieControl=getCookieControl(entry);    assertNotNull(cookieControl,"result entry " + entry + " should contain the cookie control");    String cookieStr=cookieControl.getCookie().toString();    assertThat(cookieStr).isIn(cookies);    cookies.remove(cookieStr);  }  assertThat(cookies).as("All cookie values should have been returned").isEmpty();}  }
class C{  public Obligation createObligation(Element elem) throws XACMLException {  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.REQUEST,elem);  if (obj == null) {    return new ObligationImpl(elem);  } else {    return (Obligation)obj;  }}  }
class C{  private static UriRecord parseAbsolute(NdefRecord record){  byte[] payload=record.getPayload();  Uri uri=Uri.parse(new String(payload,Charset.forName("UTF-8")));  return new UriRecord(uri);}  }
class C{  public void generateSelfSignedCertificate(KeyType keyType,String alias,String subjectDN,int validity) throws KeyStoreException, IllegalArgumentException {  ensureValid(alias,CERT_ALIAS_MSG);  ensureValid(subjectDN,SUBJECT_DN_MSG);  if (validity <= 0) {    LocalizableMessage msg=ERR_CERTMGR_VALIDITY.get(validity);    throw new IllegalArgumentException(msg.toString());  }  if (aliasInUse(alias)) {    LocalizableMessage msg=ERR_CERTMGR_ALIAS_ALREADY_EXISTS.get(alias);    throw new IllegalArgumentException(msg.toString());  }  keyStore=null;  Platform.generateSelfSignedCertificate(getKeyStore(),keyStoreType,keyStorePath,keyType,alias,password,subjectDN,validity);}  }
class C{  public ServiceNotFoundException(){  super();}  }
class C{  private Map<Integer,int[]> readFormat6() throws java.io.IOException {  Map<Integer,int[]> h=new LinkedHashMap<>();  raf.skipBytes(4);  int start_code=raf.readUnsignedShort();  int code_count=raf.readUnsignedShort();  for (int k=0; k < code_count; ++k) {    int[] r=new int[2];    r[0]=raf.readUnsignedShort();    r[1]=getGlyphWidth(r[0]);    h.put(k + start_code,r);  }  return h;}  }
class C{  public FSSessionPartner(String sessionPartner,boolean isRoleIDP){  this.sessionPartner=sessionPartner;  this.isRoleIDP=isRoleIDP;}  }
class C{  private Node<K,V> findPredecessorOfLast(){  for (; ; ) {    for (Index<K,V> q=head; ; ) {      Index<K,V> d, r;      if ((r=q.right) != null) {        if (r.indexesDeletedNode()) {          q.unlink(r);          break;        }        if (r.node.next != null) {          q=r;          continue;        }      }      if ((d=q.down) != null)       q=d; else       return q.node;    }  }}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  if (m_textPendingStart == -1) {    m_textPendingStart=m_chars.size();    m_coalescedTextType=m_textType;  } else   if (m_textType == DTM.TEXT_NODE) {    m_coalescedTextType=DTM.TEXT_NODE;  }  m_chars.append(ch,start,length);}  }
class C{  public static String toDecamelize(final String value,final String chr){  String camelCasedString=toCamelCase(value);  String[] words=camelCasedString.split("(?=\\p{Upper})");  return Arrays.stream(words).map(null).collect(joining(Optional.ofNullable(chr).orElse(" ")));}  }
class C{  public static boolean appendLinesToFile(String filePath,String[] linesToAppend,boolean create){  boolean result=false;  try {    if (linesToAppend != null && linesToAppend.length > 0) {      LineNumberReader reader=getLineNumReader(filePath,create);      StringWriter writer=new StringWriter();      String line=null;      while ((line=reader.readLine()) != null) {        writeLine(writer,line);      }      for (int i=0; i < linesToAppend.length; i++) {        writeLine(writer,linesToAppend[i]);      }      String tempFilePath=filePath + ".tmp";      result=writeToFile(tempFilePath,writer);      if (result) {        File tempFile=new File(tempFilePath);        if (tempFile.exists() && tempFile.isFile()) {          result=copyFile(tempFilePath,filePath);          if (result) {            result=tempFile.delete();          }        }      }    }  } catch (  Exception ex) {    result=false;    Debug.log("FileUtils.appendLinesToFile() threw exception : ",ex);  }  return result;}  }
class C{  public final void put(String key,int value){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    String newMap[]=new String[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;    int newValues[]=new int[m_mapSize];    System.arraycopy(m_values,0,newValues,0,m_firstFree + 1);    m_values=newValues;  }  m_map[m_firstFree]=key;  m_values[m_firstFree]=value;  m_firstFree++;}  }
class C{  public void next(){  index++;}  }
class C{  private void initialize(URI p_other){  m_scheme=p_other.getScheme();  m_userinfo=p_other.getUserinfo();  m_host=p_other.getHost();  m_port=p_other.getPort();  m_path=p_other.getPath();  m_queryString=p_other.getQueryString();  m_fragment=p_other.getFragment();}  }
class C{  public void removeAllUpdateListeners(){  if (updateListeners == null) {    return;  }  updateListeners.clear();  updateListeners=null;}  }
class C{  @Bean(initMethod="start",destroyMethod="stop") @Profile(Constants.SPRING_PROFILE_DEVELOPMENT) public Server h2TCPServer() throws SQLException {  return Server.createTcpServer("-tcp","-tcpAllowOthers");}  }
class C{  public static String rightPad(final String value,String pad,final int length){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  if (value.length() > length) {    return value;  }  return append(value,repeat(pad,length - value.length()));}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {}  }
class C{  static int shouldComponentDebug(JComponent component){  DebugGraphicsInfo info=info();  if (info == null) {    return 0;  } else {    Container container=(Container)component;    int debugOptions=0;    while (container != null && (container instanceof JComponent)) {      debugOptions|=info.getDebugOptions((JComponent)container);      container=container.getParent();    }    return debugOptions;  }}  }
class C{  public void displayFieldInvalid(FieldName fieldName,boolean invalid){  getCurrentStepPanel().displayFieldInvalid(fieldName,invalid);}  }
class C{  public void exprSetParent(ExpressionNode n){  super.exprSetParent(n);  int nArgs=m_argVec.size();  for (int i=0; i < nArgs; i++) {    Expression arg=(Expression)m_argVec.elementAt(i);    arg.exprSetParent(n);  }}  }
class C{  public void startElement(String elementNamespaceURI,String elementLocalName,String elementName) throws SAXException {  super.startElement(elementNamespaceURI,elementLocalName,elementName);}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.InteractionResponseElement createInteractionResponseElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.InteractionResponseElementImpl();}  }
class C{  public boolean is_lt_point(){  return value <= PLAD_POINT;}  }
class C{  public static void installAllConfig(ConfigurationAdmin configAdmin) throws IOException {  String enabled=System.getProperty(OPENIDM_FILEINSTALL_ENABLED,"true");  String poll=System.getProperty(OPENIDM_FILEINSTALL_POLL,"2000");  String dir=getConfigFileInstallDir();  String filter=System.getProperty(OPENIDM_FILEINSTALL_FILTER,".*\\.cfg|.*\\.json");  String start=System.getProperty(OPENIDM_FILEINSTALL_BUNDLES_NEW_START,"false");  Configuration config=configAdmin.createFactoryConfiguration(FELIX_FILEINSTALL_PID,null);  Dictionary<String,Object> props=config.getProperties();  if (props == null) {    props=new Hashtable<>();  }  if ("true".equals(enabled)) {    props.put("felix.fileinstall.poll",poll);    props.put("felix.fileinstall.noInitialDelay","true");    props.put("felix.fileinstall.dir",dir);    props.put("felix.fileinstall.filter",filter);    props.put("felix.fileinstall.bundles.new.start",start);    props.put("config.factory-pid","openidm");    config.update(props);    logger.info("Configuration from file enabled");  } else {    logger.info("Configuration from file disabled");  }}  }
class C{  public com.sun.identity.saml2.jaxb.entityconfig.AttributeQueryConfigElement createAttributeQueryConfigElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.entityconfig.impl.AttributeQueryConfigElementImpl();}  }
class C{  public static PasswordModifyExtendedResult copyOfPasswordModifyExtendedResult(final PasswordModifyExtendedResult result){  return new PasswordModifyExtendedResultImpl(result);}  }
class C{  public JDialog createDialog(String title) throws HeadlessException {  int style=styleFromMessageType(getMessageType());  JDialog dialog=new JDialog((Dialog)null,title,true);  initDialog(dialog,style,null);  return dialog;}  }
class C{  public ReferencesHeader createReferencesHeader(String callId,String rel) throws ParseException {  ReferencesHeader retval=new References();  retval.setCallId(callId);  retval.setRel(rel);  return retval;}  }
class C{  @Override public int doFinal(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException {  return cipher.doFinal(input,inputOffset,inputLen,output,outputOffset);}  }
class C{  public final void test_ROUNDTRIP_GetKeySpecKeyProvider02(){  boolean performed=false;  for (int i=0; i < algName.length; i++) {    for (int l=0; l < provider.length; l++) {      if (provider[l] == null) {        continue;      }      TestDataGenerator g;      try {        g=new TestDataGenerator(algName[i][0],algName[i][1],privateKeyInfoDamaged,provider[l]);      } catch (      TestDataGenerator.AllowedFailure allowedFailure) {        continue;      }      try {        EncryptedPrivateKeyInfo epki;        if (g.ap() == null) {          epki=new EncryptedPrivateKeyInfo(algName[i][0],g.ct());        } else {          epki=new EncryptedPrivateKeyInfo(g.ap(),g.ct());        }        try {          epki.getKeySpec(g.pubK() == null ? g.k() : g.pubK(),provider[l]);          fail(algName[i][0] + ", " + algName[i][1]);        } catch (        InvalidKeyException e) {        }        performed=true;      } catch (      NoSuchAlgorithmException allowedFailure) {      }    }  }  assertTrue("Test not performed",performed);}  }
class C{  public static SecurityOptions createNoCertificateOptions(){  SecurityOptions ops=new SecurityOptions();  ops.setCertificateType(CertificateType.NO_CERTIFICATE);  ops.setEnableSSL(false);  ops.setEnableStartTLS(false);  return ops;}  }
class C{  public void parseForClass(GenericDeclaration genericDecl,String signature){  setInput(genericDecl,signature);  if (!eof) {    parseClassSignature();  } else {    if (genericDecl instanceof Class) {      Class c=(Class)genericDecl;      this.formalTypeParameters=EmptyArray.TYPE_VARIABLE;      this.superclassType=c.getSuperclass();      Class<?>[] interfaces=c.getInterfaces();      if (interfaces.length == 0) {        this.interfaceTypes=ListOfTypes.EMPTY;      } else {        this.interfaceTypes=new ListOfTypes(interfaces);      }    } else {      this.formalTypeParameters=EmptyArray.TYPE_VARIABLE;      this.superclassType=Object.class;      this.interfaceTypes=ListOfTypes.EMPTY;    }  }}  }
class C{  @SuppressWarnings("unchecked") public void writeRef(Ref x) throws SQLException {  if (x == null) {    attribs.add(null);  } else {    attribs.add(new SerialRef(x));  }}  }
class C{  public JMXConnectorServer(MBeanServer mbeanServer){  this.mbeanServer=mbeanServer;}  }
class C{  void decodeHeader(final ByteArrayScanner scanner,byte... allowedTypes) throws DataFormatException {  final byte msgType=scanner.nextByte();  if (!isTypeAllowed(allowedTypes,msgType)) {    throw new DataFormatException("byte[] is not a valid start msg: " + msgType);  }  final byte version=scanner.nextByte();  if (msgType == MSG_TYPE_REPL_SERVER_START_V1) {    if (version != ProtocolVersion.REPLICATION_PROTOCOL_V1_REAL) {      throw new DataFormatException("Not a valid message: type is " + msgType + " but protocol version byte is "+ version+ " instead of "+ ProtocolVersion.REPLICATION_PROTOCOL_V1_REAL);    }    protocolVersion=ProtocolVersion.REPLICATION_PROTOCOL_V1;    scanner.skipZeroSeparator();    generationId=scanner.nextLongUTF8();  } else {    if (version < ProtocolVersion.REPLICATION_PROTOCOL_V2) {      throw new DataFormatException("Not a valid message: type is " + msgType + " but protocol version byte is "+ version+ " instead of "+ ProtocolVersion.getCurrentVersion());    }    protocolVersion=version;    generationId=scanner.nextLongUTF8();    groupId=scanner.nextByte();  }}  }
class C{  public static void cacheResult(List<Foo> foos){  getPersistence().cacheResult(foos);}  }
class C{  private void analyzeServerTerminationAndWriteFile(ServerStartCommandExecutor sce,String folder,String variableName,String workflowName,long phase,WorkflowTrace workflow) throws IOException, JAXBException {  if (fuzzerConfig.containsServerCommand() && sce.isServerTerminated()) {    interruptFuzzing=true;    FileOutputStream fos=new FileOutputStream(folder + "/terminated" + variableName+ workflowName+ Long.toString(phase)+ ".xml");    WorkflowTraceSerializer.write(fos,workflow);    LOGGER.error(sce.getServerErrorOutputString());    LOGGER.error(sce.getServerOutputString());  }}  }
class C{  public void runTest() throws Throwable {  String namespaceURI=null;  String qualifiedName="emp:qualifiedName";  Document doc;  NodeList elementList;  Node testAddr;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  testAddr=elementList.item(0);{    boolean success=false;    try {      ((Element)testAddr).setAttributeNS(namespaceURI,qualifiedName,"newValue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public void paintTextAreaBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void traverse(Node pos,Node top) throws org.xml.sax.SAXException {  this.fSerializer.startDocument();  if (pos.getNodeType() != Node.DOCUMENT_NODE) {    Document ownerDoc=pos.getOwnerDocument();    if (ownerDoc != null && ownerDoc.getImplementation().hasFeature("Core","3.0")) {      fIsLevel3DOM=true;    }  } else {    if (((Document)pos).getImplementation().hasFeature("Core","3.0")) {      fIsLevel3DOM=true;    }  }  if (fSerializer instanceof LexicalHandler) {    fLexicalHandler=((LexicalHandler)this.fSerializer);  }  if (fFilter != null)   fWhatToShowFilter=fFilter.getWhatToShow();  while (null != pos) {    startNode(pos);    Node nextNode=null;    nextNode=pos.getFirstChild();    while (null == nextNode) {      endNode(pos);      if ((null != top) && top.equals(pos))       break;      nextNode=pos.getNextSibling();      if (null == nextNode) {        pos=pos.getParentNode();        if ((null == pos) || ((null != top) && top.equals(pos))) {          nextNode=null;          break;        }      }    }    pos=nextNode;  }  this.fSerializer.endDocument();}  }
class C{  private static int checkStoppability(ArgumentParser argParser,PrintStream out,PrintStream err){  int returnValue;  boolean isServerRunning;  boolean quietMode=false;  Argument quietArg=argParser.getArgumentForLongID(ArgumentConstants.OPTION_LONG_QUIET);  if (quietArg != null && quietArg.isPresent()) {    quietMode=true;  }  final boolean restartPresent=argParser.getArgumentForLongID(OPTION_LONG_RESTART).isPresent();  final boolean windowsNetStopPresent=argParser.getArgumentForLongID(OPTION_LONG_WINDOWS_NET_STOP).isPresent();  boolean stopThroughProtocol=false;  for (  final Argument arg : argParser.getArgumentList()) {    if (!OPTION_LONG_RESTART.equals(arg.getLongIdentifier()) && !OPTION_LONG_QUIET.equals(arg.getLongIdentifier()) && !OPTION_LONG_HELP.equals(arg.getLongIdentifier())&& !OPTION_LONG_CHECK_STOPPABILITY.equals(arg.getLongIdentifier())&& !OPTION_LONG_WINDOWS_NET_STOP.equals(arg.getLongIdentifier())&& !OPTION_LONG_NO_PROP_FILE.equals(arg.getLongIdentifier())) {      stopThroughProtocol|=arg.isPresent();    }  }  if (stopThroughProtocol) {    returnValue=STOP_USING_PROTOCOL;  } else {    String lockFile=LockFileManager.getServerLockFileName();    try {      StringBuilder failureReason=new StringBuilder();      if (LockFileManager.acquireExclusiveLock(lockFile,failureReason)) {        LocalizableMessage message=INFO_STOPDS_SERVER_ALREADY_STOPPED.get();        out.println(message);        LockFileManager.releaseLock(lockFile,failureReason);        isServerRunning=false;      } else {        isServerRunning=true;      }    } catch (    Exception e) {      isServerRunning=true;    }    boolean configuredAsService=DirectoryServer.isRunningAsWindowsService();    if (!isServerRunning) {      if (configuredAsService && !windowsNetStopPresent) {        if (restartPresent) {          returnValue=RESTART_AS_WINDOW_SERVICE;        } else {          returnValue=STOP_AS_WINDOW_SERVICE;        }      } else       if (restartPresent) {        if (quietMode) {          returnValue=START_SERVER_QUIET;        } else {          returnValue=START_SERVER;        }      } else {        returnValue=SERVER_ALREADY_STOPPED;      }    } else {      if (configuredAsService) {        if (windowsNetStopPresent) {          if (restartPresent) {            if (quietMode) {              returnValue=RESTART_USING_SYSTEM_CALL_QUIET;            } else {              returnValue=RESTART_USING_SYSTEM_CALL;            }          } else {            returnValue=STOP_USING_SYSTEM_CALL;          }        } else {          if (restartPresent) {            returnValue=RESTART_AS_WINDOW_SERVICE;          } else {            returnValue=STOP_AS_WINDOW_SERVICE;          }          LocalizableMessage message=INFO_STOPDS_GOING_TO_STOP.get();          out.println(message);        }      } else {        LocalizableMessage message=INFO_STOPDS_GOING_TO_STOP.get();        out.println(message);        if (restartPresent) {          if (quietMode) {            returnValue=RESTART_USING_SYSTEM_CALL_QUIET;          } else {            returnValue=RESTART_USING_SYSTEM_CALL;          }        } else {          returnValue=STOP_USING_SYSTEM_CALL;        }      }    }  }  return returnValue;}  }
class C{  public static String toString(final Reader reader){  try (final BufferedReader r=new BufferedReader(reader)){    return r.lines().collect(Collectors.joining(System.lineSeparator()));  } catch (  final IOException ex) {    throw new IllegalStateException("Failed converting Reader to String.",ex);  }}  }
class C{  public Cache(String name,int initCapacity,int maxSize,float loadFactor){  if (initCapacity < 0) {    throw new IllegalArgumentException("Illegal Capacity: " + initCapacity);  }  if (maxSize < 0) {    throw new IllegalArgumentException("Illegal maximum size: " + maxSize);  }  if (loadFactor <= 0) {    throw new IllegalArgumentException("Illegal Load: " + loadFactor);  }  if (initCapacity == 0) {    initCapacity=1;  }  if (maxSize == 0) {    maxSize=1;  }  this.name=name;  this.loadFactor=loadFactor;  this.maxSize=maxSize;  table=new Entry[initCapacity];  threshold=(int)(initCapacity * loadFactor);  lruTracker=new LRUList();}  }
class C{  private static synchronized void initDocBuilderFactory(){  docBuilderFactory=DocumentBuilderFactory.newInstance();  docBuilderFactory.setIgnoringComments(true);  docBuilderFactory.setCoalescing(true);}  }
class C{  @Override public void initializeForTemplate(TemplateFile templateFile,Template template,String[] arguments,int lineNumber,List<LocalizableMessage> warnings) throws InitializationException {  if (arguments.length < 1 || arguments.length > 2) {    LocalizableMessage message=ERR_MAKELDIF_TAG_INVALID_ARGUMENT_RANGE_COUNT.get(getName(),lineNumber,1,2,arguments.length);    throw new InitializationException(message);  }  attributeType=DirectoryServer.getSchema().getAttributeType(arguments[0]);  if (!template.hasAttribute(attributeType)) {    LocalizableMessage message=ERR_MAKELDIF_TAG_UNDEFINED_ATTRIBUTE.get(arguments[0],lineNumber);    throw new InitializationException(message);  }  if (arguments.length == 2) {    assertionValue=arguments[1];  } else {    assertionValue=null;  }}  }
class C{  @Override public boolean execute(){  try {    if (!originalFile.exists()) {      System.err.println("Source file does not exist:" + originalFile);      return false;    }    try (FileInputStream fis=new FileInputStream(originalFile);FileOutputStream fos=new FileOutputStream(newFile);GZIPOutputStream gzip=new GZIPOutputStream(fos)){      byte[] buf=new byte[8192];      int n;      while ((n=fis.read(buf)) != -1) {        gzip.write(buf,0,n);      }    }     if (deleteOriginal && !originalFile.delete()) {      System.err.println("Cannot delete original file:" + originalFile);      return false;    }    return true;  } catch (  IOException ioe) {    logger.traceException(ioe);    return false;  }}  }
class C{  public int nextNode(){  if (m_foundLast)   return DTM.NULL;  int next;  m_lastFetched=next=(DTM.NULL == m_lastFetched) ? m_context : DTM.NULL;  if (DTM.NULL != next) {    m_pos++;    return next;  } else {    m_foundLast=true;    return DTM.NULL;  }}  }
class C{  public PlaPoint intersection(PlaLineInt p_other,String error_msg){  if (line_dir.is_vertical) {    if (p_other.line_dir.is_horizontal) {      return new PlaPointInt(point_a.v_x,p_other.point_a.v_y);    }    if (p_other.line_dir.is_diagonal_right()) {      int this_x=point_a.v_x;      PlaPointInt other_a=p_other.point_a;      return new PlaPointInt(this_x,other_a.v_y + this_x - other_a.v_x);    }    if (p_other.line_dir.is_diagonal_left()) {      int this_x=point_a.v_x;      PlaPointInt other_a=p_other.point_a;      return new PlaPointInt(this_x,other_a.v_y + other_a.v_x - this_x);    }  } else   if (line_dir.is_horizontal) {    if (p_other.line_dir.is_vertical) {      return new PlaPointInt(p_other.point_a.v_x,point_a.v_y);    }    if (p_other.line_dir.is_diagonal_right()) {      int this_y=point_a.v_y;      PlaPointInt other_a=p_other.point_a;      return new PlaPointInt(other_a.v_x + this_y - other_a.v_y,this_y);    }    if (p_other.line_dir.is_diagonal_left()) {      int this_y=point_a.v_y;      PlaPointInt other_a=p_other.point_a;      return new PlaPointInt(other_a.v_x + other_a.v_y - this_y,this_y);    }  } else   if (line_dir.is_diagonal_right()) {    if (p_other.line_dir.is_vertical) {      int other_x=p_other.point_a.v_x;      PlaPointInt this_a=point_a;      return new PlaPointInt(other_x,this_a.v_y + other_x - this_a.v_x);    }    if (p_other.line_dir.is_horizontal) {      int other_y=p_other.point_a.v_y;      PlaPointInt this_a=point_a;      return new PlaPointInt(this_a.v_x + other_y - this_a.v_y,other_y);    }  } else   if (line_dir.is_diagonal_left()) {    if (p_other.line_dir.is_vertical) {      int other_x=p_other.point_a.v_x;      PlaPointInt this_a=point_a;      return new PlaPointInt(other_x,this_a.v_y + this_a.v_x - other_x);    }    if (p_other.line_dir.is_horizontal) {      int other_y=p_other.point_a.v_y;      PlaPointInt this_a=point_a;      return new PlaPointInt(this_a.v_x + this_a.v_y - other_y,other_y);    }  }  BigInteger det_1=BigInteger.valueOf(point_a.determinant(point_b));  BigInteger det_2=BigInteger.valueOf(p_other.point_a.determinant(p_other.point_b));  PlaVectorInt delta_1=point_b.difference_by(point_a);  PlaVectorInt delta_2=p_other.point_b.difference_by(p_other.point_a);  BigInteger det=BigInteger.valueOf(delta_2.determinant(delta_1));  BigInteger tmp_1=det_1.multiply(BigInteger.valueOf(delta_2.v_x));  BigInteger tmp_2=det_2.multiply(BigInteger.valueOf(delta_1.v_x));  BigInteger is_x=tmp_1.subtract(tmp_2);  tmp_1=det_1.multiply(BigInteger.valueOf(delta_2.v_y));  tmp_2=det_2.multiply(BigInteger.valueOf(delta_1.v_y));  BigInteger is_y=tmp_1.subtract(tmp_2);  int signum=det.signum();  if (signum == 0) {    if (error_msg != null)     new IllegalArgumentException(classname + "intersection NAN " + error_msg).printStackTrace();    return new PlaPointRational(is_x,is_y,det);  }  if (signum < 0) {    det=det.negate();    is_x=is_x.negate();    is_y=is_y.negate();  }  if ((is_x.mod(det)).signum() == 0 && (is_y.mod(det)).signum() == 0) {    is_x=is_x.divide(det);    is_y=is_y.divide(det);    return new PlaPointInt(is_x.longValue(),is_y.longValue());  }  return new PlaPointRational(is_x,is_y,det);}  }
class C{  public void finish() throws IOException {  if (!def.finished()) {    def.finish();    while (!def.finished()) {      int len=def.deflate(buf,0,buf.length);      if (def.finished() && len <= buf.length - TRAILER_SIZE) {        writeTrailer(buf,len);        len=len + TRAILER_SIZE;        out.write(buf,0,len);        return;      }      if (len > 0)       out.write(buf,0,len);    }    byte[] trailer=new byte[TRAILER_SIZE];    writeTrailer(trailer,0);    out.write(trailer);  }}  }
class C{  AuthLevelCondition(Debug debug,CoreWrapper coreWrapper){  this.debug=debug;  this.coreWrapper=coreWrapper;}  }
class C{  public void globalConfigChanged(String serviceName,String version,String groupName,String serviceComponent,int type){  if (debug.messageEnabled()) {    debug.message("IdRepoPluginsCache: Global Config changed called " + "ServiceName: " + serviceName + " groupName: "+ groupName+ " serviceComp: "+ serviceComponent+ " Type: "+ type);  }  if (serviceComponent.equals("") || serviceComponent.equals("/")) {    return;  }  if (!serviceComponent.startsWith("/users/") && !serviceComponent.startsWith("/roles/")) {    if (type != 1) {      clearIdRepoPluginsCache();    }  } else {    ((IdServicesImpl)IdServicesImpl.getInstance()).clearSpecialIdentityCache();  }}  }
class C{  public com.sun.identity.liberty.ws.meta.jaxb.OrganizationNameType createOrganizationNameType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.meta.jaxb.impl.OrganizationNameTypeImpl();}  }
class C{  @Override public void updateDrawState(TextPaint ds){  ds.setColor(editorDelegate.mEditText.getCurrentTextColor());  ds.setUnderlineText(false);}  }
class C{  public static Bitmap decodeSampledBitmapFromResource(Resources res,int resId,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeResource(res,resId,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  options.inJustDecodeBounds=false;  return BitmapFactory.decodeResource(res,resId,options);}  }
class C{  @Override public void flush() throws IOException {  throw exception;}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public static void addAttributeChoiceValues(String serviceName,String subSchemaName,String schemaType,String attributeName,Map choiceValuesMap) throws UpgradeException {  String classMethod="UpgradeUtils.addAttributeChoiceValues";  try {    ServiceSchema ss=getServiceSchema(serviceName,subSchemaName,schemaType);    AttributeSchema attrSchema=ss.getAttributeSchema(attributeName);    addChoiceValues(attrSchema,choiceValuesMap);  } catch (  SSOException ssoe) {    throw new UpgradeException(classMethod + " Error getting SSOToken ");  }catch (  SMSException sme) {    throw new UpgradeException(classMethod + " Error updating choice values ");  }}  }
class C{  DeqSpliterator(ArrayDeque<E> deq,int origin,int fence){  this.deq=deq;  this.index=origin;  this.fence=fence;}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  public static UIFacesVisitor visitView(final String viewId){  final UIViewRoot view=JKJsfUtil.createView(viewId);  final UIFacesVisitor visitor=new UIFacesVisitor();  view.visitTree(VisitContext.createVisitContext(FacesContext.getCurrentInstance()),visitor);  return visitor;}  }
class C{  public void addFocusListener(FocusListener l){  getTextComponent().addFocusListener(l);}  }
class C{  public AttributeCertificateIssuer(AttCertIssuer issuer){  form=issuer.getIssuer();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  Node entRef;  ProcessingInstruction piNode;  Node appendedChild;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  entRef=doc.createEntityReference("ent4");  appendedChild=gender.appendChild(entRef);  entRef=gender.getLastChild();  assertNotNull("entRefNotNull",entRef);  piNode=(ProcessingInstruction)entRef.getLastChild();  assertNotNull("piNodeNotNull",piNode);{    boolean success=false;    try {      piNode.setData("newData");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public final void testRSAMultiPrimePrivateCrtKeySpec07(){  try {    new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,null,BigInteger.ONE,BigInteger.ONE,opi);    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  public boolean isAcceptAllFileFilterUsed(){  return useAcceptAllFileFilter;}  }
class C{  protected View createChild(String name){  View view=null;  if (name.equals(TF_PARENTID) || name.equals(TF_CLIENT_TYPE)) {    view=new CCTextField(this,name,"");  } else   if (name.equals(SEC_MH_COMMON)) {    view=new CCSecondaryMasthead(this,name);  } else   if (name.equals(PGTITLE)) {    view=new CCPageTitle(this,ptModel,name);  } else   if (ptModel.isChildSupported(name)) {    view=ptModel.createChild(this,name);  } else   if (name.equals(PROPERTY_ATTRIBUTE)) {    view=new AMPropertySheet(this,propertySheetModel,name);  } else   if (propertySheetModel.isChildSupported(name)) {    view=propertySheetModel.createChild(this,name,getModel());  } else {    view=super.createChild(name);  }  return view;}  }
class C{  public void printJobCanceled(PrintJobEvent pje){}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList emList;  Node emNode;  CharacterData emText;  boolean hasChild;  doc=(Document)load("hc_staff",false);  emList=doc.getElementsByTagName("em");  emNode=emList.item(0);  emText=(CharacterData)emNode.getFirstChild();  hasChild=emText.hasChildNodes();  assertFalse("hasChild",hasChild);}  }
class C{  public synchronized void unregister(RegisteredListener listener){  if (handlerslots.get(listener.getPriority()).remove(listener)) {    handlers=null;  }}  }
class C{  @Override public Foo fetchByUUID_G(String uuid,long groupId){  return fetchByUUID_G(uuid,groupId,true);}  }
class C{  private void handleTopologyCache(QuickSetup qs,TopologyCache cache){  logger.info(LocalizableMessage.raw("Handling TopologyCache"));  boolean stopProcessing=false;  Set<TopologyCacheException> exceptions=new HashSet<>();  for (  ServerDescriptor server : cache.getServers()) {    TopologyCacheException e=server.getLastException();    if (e != null) {      exceptions.add(e);    }  }  Set<LocalizableMessage> exceptionMsgs=new LinkedHashSet<>();  for (  TopologyCacheException e : exceptions) {    logger.info(LocalizableMessage.raw("Analyzing exception: " + e,e));    if (stopProcessing) {      break;    }switch (e.getType()) {case NOT_GLOBAL_ADMINISTRATOR:      LocalizableMessage errorMsg=INFO_NOT_GLOBAL_ADMINISTRATOR_PROVIDED.get();    qs.displayError(errorMsg,INFO_ERROR_TITLE.get());  stopProcessing=true;break;case GENERIC_CREATING_CONNECTION:if (isCertificateException(e.getCause())) {ApplicationTrustManager.Cause cause=null;if (e.getTrustManager() != null) {  cause=e.getTrustManager().getLastRefusedCause();}logger.info(LocalizableMessage.raw("Certificate exception cause: " + cause));UserDataCertificateException.Type excType=getCertificateExceptionType(cause);if (excType != null) {  HostPort hp=e.getHostPort();  String h=hp.getHost();  int p=hp.getPort();  UserDataCertificateException exc=new UserDataCertificateException(Step.REPLICATION_OPTIONS,INFO_CERTIFICATE_EXCEPTION.get(h,p),e.getCause(),h,p,e.getTrustManager().getLastRefusedChain(),e.getTrustManager().getLastRefusedAuthType(),excType);  handleCertificateException(qs,exc,cache);  stopProcessing=true;}}}exceptionMsgs.add(getMessage(e));}if (!stopProcessing && !exceptionMsgs.isEmpty()) {LocalizableMessage confirmationMsg=ERR_UNINSTALL_READING_REGISTERED_SERVERS_CONFIRM_UPDATE_REMOTE.get(getMessageFromCollection(exceptionMsgs,"\n"));stopProcessing=!qs.displayConfirmation(confirmationMsg,INFO_CONFIRMATION_TITLE.get());}if (!stopProcessing) {stopProcessing=!qs.displayConfirmation(INFO_CONFIRM_UNINSTALL_SERVER_RUNNING_MSG.get(),INFO_CONFIRM_UNINSTALL_SERVER_RUNNING_TITLE.get());}if (!stopProcessing) {getUninstallUserData().setUpdateRemoteReplication(true);getUninstallUserData().setRemoteServers(cache.getServers());getUserData().setStopServer(true);qs.launch();qs.setCurrentStep(getNextWizardStep(Step.CONFIRM_UNINSTALL));}}  }
class C{  public void test_getCrtCoefficient(){  assertEquals("invalid CRT coefficient",Util.rsaCrtParam.getCrtCoefficient(),key.getCrtCoefficient());}  }
class C{  public SessionRequestParser(String xmlString){  document=XMLUtils.toDOMDocument(xmlString,debug);}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  @Override protected void handleErrorFlush(String output){  handleErrorOutput(output);  redirectErrPrintStream.flush();}  }
class C{  public List slice(int fromIndex,int toIndex){  int size=size();  if (fromIndex < 0)   fromIndex=size - fromIndex;  if (toIndex < 0)   toIndex=size - toIndex;  return new List(subList(fromIndex,toIndex));}  }
class C{  public void debug(String msg){  print("[DEBUG] " + msg,out.debug);}  }
class C{  void close(final UnbindRequest unbindRequest,final boolean isDisconnectNotification,final Result reason){  final boolean notifyClose;  final boolean notifyErrorOccurred;  final List<ConnectionEventListener> tmpListeners;synchronized (stateLock) {    if (isClosed) {      return;    } else     if (unbindRequest != null) {      notifyClose=true;      notifyErrorOccurred=false;      isClosed=true;      tmpListeners=listeners;      listeners=null;      if (connectionInvalidReason == null) {        connectionInvalidReason=reason;      }    } else     if (isFailed) {      return;    } else {      notifyClose=false;      notifyErrorOccurred=true;      isFailed=true;      failedDueToDisconnect=isDisconnectNotification;      connectionInvalidReason=reason;      tmpListeners=listeners;    }  }  for (  final int requestID : pendingRequests.keySet()) {    final ResultLdapPromiseImpl<?,?> promise=pendingRequests.remove(requestID);    if (promise != null) {      promise.adaptErrorResult(connectionInvalidReason);    }  }  if (notifyClose) {    final LDAPWriter<ASN1BufferWriter> writer=GrizzlyUtils.getWriter();    try {      writer.writeUnbindRequest(nextMsgID.getAndIncrement(),unbindRequest);      connection.write(writer.getASN1Writer().getBuffer(),null);    } catch (    final Exception ignore) {    } finally {      GrizzlyUtils.recycleWriter(writer);    }    factory.getTimeoutChecker().removeListener(this);    connection.closeSilently();    factory.releaseTransportAndTimeoutChecker();  }  if (tmpListeners != null) {    if (notifyErrorOccurred) {      for (      final ConnectionEventListener listener : tmpListeners) {        listener.handleConnectionError(isDisconnectNotification,newLdapException(reason));      }    }    if (notifyClose) {      for (      final ConnectionEventListener listener : tmpListeners) {        listener.handleConnectionClosed();      }    }  }}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider01() throws Exception {  for (  String validValue : getValidValues()) {    try {      TrustManagerFactory.getInstance(validValue,(Provider)null);    } catch (    IllegalArgumentException expected) {    }  }}  }
class C{  public int size(){  return _attrs.size();}  }
class C{  public AssertionArtifact createAssertionArtifact(String id,String destID,String targetUrl,String version) throws SAMLException {  return createAssertionArtifact(id,destID,null,null,targetUrl,version);}  }
class C{  public boolean isRevoked(Certificate cert){  if (!cert.getType().equals("X.509")) {    throw new RuntimeException("X.509 CRL used with non X.509 Cert");  }  TBSCertList.CRLEntry[] certs=c.getRevokedCertificates();  X500Name caName=c.getIssuer();  if (certs != null) {    BigInteger serial=((X509Certificate)cert).getSerialNumber();    for (int i=0; i < certs.length; i++) {      if (isIndirect && certs[i].hasExtensions()) {        Extension currentCaName=certs[i].getExtensions().getExtension(Extension.certificateIssuer);        if (currentCaName != null) {          caName=X500Name.getInstance(GeneralNames.getInstance(currentCaName.getParsedValue()).getNames()[0].getName());        }      }      if (certs[i].getUserCertificate().getValue().equals(serial)) {        X500Name issuer;        if (cert instanceof X509Certificate) {          issuer=X500Name.getInstance(((X509Certificate)cert).getIssuerX500Principal().getEncoded());        } else {          try {            issuer=org.bouncycastle.asn1.x509.Certificate.getInstance(cert.getEncoded()).getIssuer();          } catch (          CertificateEncodingException e) {            throw new RuntimeException("Cannot process certificate");          }        }        if (!caName.equals(issuer)) {          return false;        }        return true;      }    }  }  return false;}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    if (isClosed()) {      return;    }    Throwable thrown=null;    try {      flushInternal();    } catch (    Throwable e) {      thrown=e;    }    buf=null;    try {      out.close();    } catch (    Throwable e) {      if (thrown == null) {        thrown=e;      }    }    out=null;    if (thrown != null) {      SneakyThrow.sneakyThrow(thrown);    }  }}  }
class C{  public static void clearRecipes(){  server.clearRecipes();}  }
class C{  public SRGLoader(){  super(null);  useNodes=false;}  }
class C{  public @CheckForNull Queue.Item run2(@Nonnull String replacementMainScript,@Nonnull Map<String,String> replacementLoadedScripts){  List<Action> actions=new ArrayList<Action>();  CpsFlowExecution execution=getExecution();  if (execution == null) {    return null;  }  actions.add(new ReplayFlowFactoryAction(replacementMainScript,replacementLoadedScripts,execution.isSandbox()));  actions.add(new CauseAction(new Cause.UserIdCause(),new ReplayCause(run)));  for (  Class<? extends Action> c : COPIED_ACTIONS) {    actions.addAll(run.getActions(c));  }  return ParameterizedJobMixIn.scheduleBuild2(run.getParent(),0,actions.toArray(new Action[actions.size()]));}  }
class C{  public AuthzDecisionStatement createAuthzDecisionStatement(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.AUTHZ_DECISION_STATEMENT,xml);  if (obj == null) {    return null;  } else {    return (AuthzDecisionStatement)obj;  }}  }
class C{  public boolean hasEventCount(){  return fieldSetFlags()[2];}  }
class C{  public AuthPermission(String name){  super("createLoginContext".equals(name) ? "createLoginContext.*" : name);}  }
class C{  ScriptContextScope(final ScriptContext scriptContext){  Reject.ifNull(scriptContext);  this.scriptContext=scriptContext;}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.SingleLogoutServiceElement createSingleLogoutServiceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.SingleLogoutServiceElementImpl();}  }
class C{  private void createLayout(){  GridBagConstraints gbc=new GridBagConstraints();  addErrorPanel(gbc);  addBackendLabel(gbc);  addBackendNamesComboBox(gbc);  addNewBackendName(gbc);  addNewBackendTypeLabel(gbc);  addNewBackendTypeComboBox(gbc);  addBaseDNLabel(gbc);  addBaseDNTextField(gbc);  addBaseDNInlineHelp(gbc);  addDirectoryDataLabel(gbc);  addImportDataChoiceSection(gbc);  addBottomGlue(gbc);}  }
class C{  ZoneRules(ZoneOffset baseStandardOffset,ZoneOffset baseWallOffset,List<ZoneOffsetTransition> standardOffsetTransitionList,List<ZoneOffsetTransition> transitionList,List<ZoneOffsetTransitionRule> lastRules){  super();  this.standardTransitions=new long[standardOffsetTransitionList.size()];  this.standardOffsets=new ZoneOffset[standardOffsetTransitionList.size() + 1];  this.standardOffsets[0]=baseStandardOffset;  for (int i=0; i < standardOffsetTransitionList.size(); i++) {    this.standardTransitions[i]=standardOffsetTransitionList.get(i).toEpochSecond();    this.standardOffsets[i + 1]=standardOffsetTransitionList.get(i).getOffsetAfter();  }  List<LocalDateTime> localTransitionList=new ArrayList<>();  List<ZoneOffset> localTransitionOffsetList=new ArrayList<>();  localTransitionOffsetList.add(baseWallOffset);  for (  ZoneOffsetTransition trans : transitionList) {    if (trans.isGap()) {      localTransitionList.add(trans.getDateTimeBefore());      localTransitionList.add(trans.getDateTimeAfter());    } else {      localTransitionList.add(trans.getDateTimeAfter());      localTransitionList.add(trans.getDateTimeBefore());    }    localTransitionOffsetList.add(trans.getOffsetAfter());  }  this.savingsLocalTransitions=localTransitionList.toArray(new LocalDateTime[localTransitionList.size()]);  this.wallOffsets=localTransitionOffsetList.toArray(new ZoneOffset[localTransitionOffsetList.size()]);  this.savingsInstantTransitions=new long[transitionList.size()];  for (int i=0; i < transitionList.size(); i++) {    this.savingsInstantTransitions[i]=transitionList.get(i).toEpochSecond();  }  if (lastRules.size() > 16) {    throw new IllegalArgumentException("Too many transition rules");  }  this.lastRules=lastRules.toArray(new ZoneOffsetTransitionRule[lastRules.size()]);}  }
class C{  protected static void initialize_idrepo(){  initializeCacheSize();  serverPort=SystemProperties.get(Constants.AM_SERVER_PORT);  serverURL=SystemProperties.get(Constants.AM_SERVER_PROTOCOL) + "://" + SystemProperties.get(Constants.AM_SERVER_HOST)+ ":"+ serverPort;  if (idRepoDebug.messageEnabled()) {    idRepoDebug.message("IdRepoJAXRPCObjectImpl.static server URL " + serverURL);  }  if (idServices == null) {    idServices=IdServicesFactory.getDataStoreServices();  }}  }
class C{  private String doHttpStream(BOMInputStream bom,BOMInputStream pis,String httpContentType,boolean lenient) throws IOException {  String bomEnc=bom.getBOMCharsetName();  String xmlGuessEnc=pis.getBOMCharsetName();  String xmlEnc=getXmlProlog(pis,xmlGuessEnc);  try {    return calculateHttpEncoding(httpContentType,bomEnc,xmlGuessEnc,xmlEnc,lenient);  } catch (  XmlStreamReaderException ex) {    if (lenient) {      return doLenientDetection(httpContentType,ex);    } else {      throw ex;    }  }}  }
class C{  private static void parseRootNode(String schemaNS,PathPosition pos,XMPPath expandedXPath) throws XMPException {  while (pos.stepEnd < pos.path.length() && "/[*".indexOf(pos.path.charAt(pos.stepEnd)) < 0) {    pos.stepEnd++;  }  if (pos.stepEnd == pos.stepBegin) {    throw new XMPException("Empty initial XMPPath step",XMPError.BADXPATH);  }  String rootProp=verifyXPathRoot(schemaNS,pos.path.substring(pos.stepBegin,pos.stepEnd));  XMPAliasInfo aliasInfo=XMPMetaFactory.getSchemaRegistry().findAlias(rootProp);  if (aliasInfo == null) {    expandedXPath.add(new XMPPathSegment(schemaNS,XMPPath.SCHEMA_NODE));    XMPPathSegment rootStep=new XMPPathSegment(rootProp,XMPPath.STRUCT_FIELD_STEP);    expandedXPath.add(rootStep);  } else {    expandedXPath.add(new XMPPathSegment(aliasInfo.getNamespace(),XMPPath.SCHEMA_NODE));    XMPPathSegment rootStep=new XMPPathSegment(verifyXPathRoot(aliasInfo.getNamespace(),aliasInfo.getPropName()),XMPPath.STRUCT_FIELD_STEP);    rootStep.setAlias(true);    rootStep.setAliasForm(aliasInfo.getAliasForm().getOptions());    expandedXPath.add(rootStep);    if (aliasInfo.getAliasForm().isArrayAltText()) {      XMPPathSegment qualSelectorStep=new XMPPathSegment("[?xml:lang='x-default']",XMPPath.QUAL_SELECTOR_STEP);      qualSelectorStep.setAlias(true);      qualSelectorStep.setAliasForm(aliasInfo.getAliasForm().getOptions());      expandedXPath.add(qualSelectorStep);    } else     if (aliasInfo.getAliasForm().isArray()) {      XMPPathSegment indexStep=new XMPPathSegment("[1]",XMPPath.ARRAY_INDEX_STEP);      indexStep.setAlias(true);      indexStep.setAliasForm(aliasInfo.getAliasForm().getOptions());      expandedXPath.add(indexStep);    }  }}  }
class C{  public AMPreCallBackException(String msg,String errorCode,Object[] args){  super(msg,errorCode,args);}  }
class C{  public Object parse(File file) throws IOException, SAXException {  configure();  InputSource input=new InputSource(new FileInputStream(file));  input.setSystemId("file://" + file.getAbsolutePath());  getXMLReader().parse(input);  return (root);}  }
class C{  public void addLocalEjb(ContextLocalEjb localEjb){}  }
class C{  public void addApplicationLifecycleListener(Object listener){  int len=applicationLifecycleListenersObjects.length;  Object[] newListeners=Arrays.copyOf(applicationLifecycleListenersObjects,len + 1);  newListeners[len]=listener;  applicationLifecycleListenersObjects=newListeners;}  }
class C{  protected Label readLabel(int offset,Label[] labels){  if (labels[offset] == null) {    labels[offset]=new Label();  }  return labels[offset];}  }
class C{  private static boolean shouldParkAfterFailedAcquire(Node pred,Node node){  int ws=pred.waitStatus;  if (ws == Node.SIGNAL)   return true;  if (ws > 0) {    do {      node.prev=pred=pred.prev;    } while (pred.waitStatus > 0);    pred.next=node;  } else {    compareAndSetWaitStatus(pred,ws,Node.SIGNAL);  }  return false;}  }
class C{  public MetadataContainer findExtendedContentDescription(){  MetadataContainer result=getExtendedContentDescription();  if (result == null && getExtendedHeader() != null) {    result=getExtendedHeader().getExtendedContentDescription();  }  return result;}  }
class C{  public void insert_long(int value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_long",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    $self.insert_long(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private static int[] makePositive(int a[]){  int keep, j;  for (keep=0; keep < a.length && a[keep] == -1; keep++)   ;  for (j=keep; j < a.length && a[j] == 0; j++)   ;  int extraInt=(j == a.length ? 1 : 0);  int result[]=new int[a.length - keep + extraInt];  for (int i=keep; i < a.length; i++)   result[i - keep + extraInt]=~a[i];  for (int i=result.length - 1; ++result[i] == 0; i--)   ;  return result;}  }
class C{  public boolean beginUnselectedChoiceDisplay(ChildDisplayEvent event){  return (curTile != defaultValue);}  }
class C{  public static byte[] fromAscii(byte[] ascii){  if (ascii == null || ascii.length == 0) {    return EMPTY_BYTE_ARRAY;  }  byte[] l_raw=new byte[ascii.length >> 3];  for (int ii=0, jj=ascii.length - 1; ii < l_raw.length; ii++, jj-=8) {    for (int bits=0; bits < BITS.length; ++bits) {      if (ascii[jj - bits] == '1') {        l_raw[ii]|=BITS[bits];      }    }  }  return l_raw;}  }
class C{  private LocalBackendWorkflowElement(DN baseDN,Backend<?> backend){  this.baseDN=baseDN;  this.backend=backend;}  }
class C{  protected ElemVariable createGlobalPseudoVarDecl(QName uniquePseudoVarName,StylesheetRoot stylesheetRoot,LocPathIterator lpi) throws org.w3c.dom.DOMException {  ElemVariable psuedoVar=new ElemVariable();  psuedoVar.setIsTopLevel(true);  XPath xpath=new XPath(lpi);  psuedoVar.setSelect(xpath);  psuedoVar.setName(uniquePseudoVarName);  Vector globalVars=stylesheetRoot.getVariablesAndParamsComposed();  psuedoVar.setIndex(globalVars.size());  globalVars.addElement(psuedoVar);  return psuedoVar;}  }
class C{  public FieldPosition(Format.Field attribute,int fieldID){  this.attribute=attribute;  this.field=fieldID;}  }
class C{  public int compareTo(Object obj){  if (!(obj instanceof Rdn)) {    throw new ClassCastException("The obj is not a Rdn");  }  if (obj == this) {    return 0;  }  Rdn that=(Rdn)obj;  int minSize=Math.min(entries.size(),that.entries.size());  for (int i=0; i < minSize; i++) {    int diff=entries.get(i).compareTo(that.entries.get(i));    if (diff != 0) {      return diff;    }  }  return (entries.size() - that.entries.size());}  }
class C{  @Override public synchronized void close() throws SecurityException {  flushAndClose();}  }
class C{  public SessionException(String bundleName,String errCode,Object[] args){  super(bundleName,errCode,args);}  }
class C{  public String findInLine(String pattern){  return findInLine(patternCache.forName(pattern));}  }
class C{  public PdfCanvas newlineText(){  contentStream.getOutputStream().writeBytes(TStar);  return this;}  }
class C{  static Object internalMemberNameEnsureInit(Object mh){  DirectMethodHandle dmh=(DirectMethodHandle)mh;  dmh.ensureInitialized();  return dmh.member;}  }
class C{  public void addSigner(PrivateKey key,X509Certificate cert,String encryptionOID,String digestOID) throws IllegalArgumentException {  doAddSigner(key,cert,encryptionOID,digestOID,new DefaultSignedAttributeTableGenerator(),null,null);}  }
class C{  protected void updateLeadSelectionRow(){  leadRow=getRowForPath(tree,getLeadSelectionPath());}  }
class C{  public void addActionListener(ActionListener l){  listenerList.add(ActionListener.class,l);}  }
class C{  public AMSearchResults searchSubOrganizationalUnits(String wildcard,AMSearchControl searchControl) throws AMException, SSOException {  return searchSubOrganizationalUnits(wildcard,null,searchControl);}  }
class C{  private String readInputUntil(char... symbols){  String s="";  while (!accept(symbols)) {    s+=(char)data[index];    skip();  }  return s;}  }
class C{  public void testDivideBigDecimalScaleMathContextUP(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=15;  String b="748766876876723342238476237823787879183470";  int bScale=10;  int precision=21;  RoundingMode rm=RoundingMode.UP;  MathContext mc=new MathContext(precision,rm);  String c="49897861180.2562512996";  int resScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public void addObjectCreate(String pattern,String className,String attributeName){  addRule(pattern,new ObjectCreateRule(className,attributeName));}  }
class C{  private SIPRequest createRequest(String method,String topMostViaTransport) throws SipException {  if (method == null || topMostViaTransport == null)   throw new NullPointerException("null argument");  if (method.equals(Request.CANCEL))   throw new SipException("Dialog.createRequest(): Invalid request");  if (this.getState() == null || (this.getState().getValue() == TERMINATED_STATE && !method.equalsIgnoreCase(Request.BYE)) || (this.isServer() && this.getState().getValue() == EARLY_STATE && method.equalsIgnoreCase(Request.BYE)))   throw new SipException("Dialog  " + getDialogId() + " not yet established or terminated "+ this.getState());  SipUri sipUri=null;  if (this.getRemoteTarget() != null)   sipUri=(SipUri)this.getRemoteTarget().getURI().clone(); else {    sipUri=(SipUri)this.getRemoteParty().getURI().clone();    sipUri.clearUriParms();  }  CSeq cseq=new CSeq();  try {    cseq.setMethod(method);    cseq.setSeqNumber(this.getLocalSeqNumber());  } catch (  Exception ex) {    if (logger.isLoggingEnabled())     logger.logError("Unexpected error");    InternalErrorHandler.handleException(ex);  }  ListeningPointImpl lp=(ListeningPointImpl)this.sipProvider.getListeningPoint(topMostViaTransport);  if (lp == null) {    if (logger.isLoggingEnabled())     logger.logError("Cannot find listening point for transport " + topMostViaTransport);    throw new SipException("Cannot find listening point for transport " + topMostViaTransport);  }  Via via=lp.getViaHeader();  From from=new From();  from.setAddress(this.getLocalParty());  To to=new To();  to.setAddress(this.getRemoteParty());  SIPRequest sipRequest=createRequest(sipUri,via,cseq,from,to);  if (SIPRequest.isTargetRefresh(method)) {    ContactHeader contactHeader=((ListeningPointImpl)this.sipProvider.getListeningPoint(lp.getTransport())).createContactHeader();    ((SipURI)contactHeader.getAddress().getURI()).setSecure(this.isSecure());    sipRequest.setHeader(contactHeader);  }  try {    cseq=(CSeq)sipRequest.getCSeq();    cseq.setSeqNumber(getLocalSeqNumber() + 1);    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("SIPDialog::createRequest:setting Request Seq Number to " + cseq.getSeqNumber());    }  } catch (  InvalidArgumentException ex) {    InternalErrorHandler.handleException(ex);  }  if (method.equals(Request.SUBSCRIBE)) {    if (eventHeader != null)     sipRequest.addHeader(eventHeader);  }  if (method.equals(Request.NOTIFY)) {    if (eventHeader != null) {      sipRequest.addHeader(eventHeader);    }  }  try {    if (this.getLocalTag() != null) {      from.setTag(this.getLocalTag());    } else {      from.removeTag();    }    if (this.getRemoteTag() != null) {      to.setTag(this.getRemoteTag());    } else {      to.removeTag();    }  } catch (  ParseException ex) {    InternalErrorHandler.handleException(ex);  }  this.updateRequest(sipRequest);  return sipRequest;}  }
class C{  public Builder withParentSpanId(String parentSpanId){  this.parentSpanId=parentSpanId;  return this;}  }
class C{  public void testCodeSigner_00(){  try {    new CodeSigner(null,ts);    fail("must not accept null");  } catch (  NullPointerException ex) {  }}  }
class C{  public void testRemoveNamedItemNS() throws Throwable {  Document doc;  NamedNodeMap notations;  DocumentType docType;  doc=(Document)load("hc_staff",builder);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);    notations=docType.getNotations();    assertNotNull("notationsNotNull",notations);    try {      notations.removeNamedItemNS("http://www.w3.org/1999/xhtml","alpha");      fail("throw_NO_MOD_OR_NOT_FOUND_ERR");    } catch (    DOMException ex) {switch (ex.code) {case 7:        break;case 8:      break;default :    throw ex;}}}}  }
class C{  DynamicGroup(AttrSet attrSet,Guid baseGuid,String filter,int scope) throws UMSException {  this(TemplateManager.getTemplateManager().getCreationTemplate(_class,null),attrSet,baseGuid,filter,scope);}  }
class C{  public void handleBtnFilterRequest(RequestInvocationEvent event){  CCDropDownMenu menu=(CCDropDownMenu)getChild(FILTER_TYPE);  setPageSessionAttribute(ENTITY_TYPE,(String)menu.getValue());  bFilter=true;  submitCycle=true;  forwardTo();}  }
class C{  public CacheObject(Object object,int size){  this.object=object;  this.size=size;}  }
class C{  public void paintTabbedPaneTabBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int tabIndex){}  }
class C{  public SaltedSHA512PasswordStorageScheme(){  super();}  }
class C{  protected void failAndClearBuffer(){  for (  Tuple t : buffer) {    collector.fail(t);  }  buffer.clear();}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.LAltCNElement createLAltCNElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LAltCNElementImpl();}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  getOptions(rc);  validateOptions();  normalizeOptions();  String spec=FederationManager.getIDFFSubCommandSpecification(rc);  String[] params={entityID,metadata,extendedData,idpAlias,spAlias,attraAlias,attrqAlias,authnaAlias,pdpAlias,pepAlias,affiAlias,spec};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_CREATE_METADATA_TEMPL",params);  try {    if (spec.equals(FederationManager.DEFAULT_SPECIFICATION)) {      handleSAML2Request(rc);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_CREATE_METADATA_TEMPL",params);    } else     if (spec.equals(FedCLIConstants.IDFF_SPECIFICATION)) {      handleIDFFRequest(rc);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_CREATE_METADATA_TEMPL",params);    } else     if (spec.equals(FedCLIConstants.WSFED_SPECIFICATION)) {      handleWSFedRequest(rc);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_CREATE_METADATA_TEMPL",params);    } else {      throw new CLIException(getResourceString("unsupported-specification"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }  } catch (  CLIException e) {    String[] args={entityID,spec,e.getMessage()};    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_METADATA_TEMPL",args);    throw e;  }}  }
class C{  public static void createDestinationFolder(String path){  File fpath=new File(path);  fpath.mkdirs();}  }
class C{  public AMSearchResults searchUsers(String wildcard,AMSearchControl searchControl) throws AMException, SSOException {  return searchUsers(wildcard,null,searchControl);}  }
class C{  public JsonValue toJsonValue(){  JsonValue invalidJson=json(object(field("archive",archiveFileName),field("reason",getMessage())));  if (null != getCause()) {    invalidJson.put("errorMessage",getCause().getMessage());  }  return invalidJson;}  }
class C{  public EntryCacheMonitorProvider(String entryCacheName,EntryCache<? extends EntryCacheCfg> entryCache){  this.entryCacheName=entryCacheName + " Entry Cache";  this.entryCache=entryCache;}  }
class C{  public static void deregisterAlertGenerator(AlertGenerator alertGenerator){  DN componentDN=alertGenerator.getComponentEntryDN();  JMXMBean mBean=directoryServer.mBeans.get(componentDN);  if (mBean != null) {    mBean.removeAlertGenerator(alertGenerator);  }}  }
class C{  private void processInboundRemove(final PreParseModifyOperation modifyOperation){  final List<RawModification> rawMods=new LinkedList<>(modifyOperation.getRawModifications());  final ListIterator<RawModification> iterator=rawMods.listIterator();  while (iterator.hasNext()) {    final RawModification rawMod=iterator.next();    final RawAttribute rawAttr=rawMod.getAttribute();    final String attrName=toLowerCase(rawAttr.getAttributeType().trim());    if (attributesToRemove.contains(attrName)) {      if (logger.isTraceEnabled()) {        logger.trace("AttributeCleanupPlugin removing '%s'",rawAttr.getAttributeType());      }      iterator.remove();    }  }  modifyOperation.setRawModifications(rawMods);}  }
class C{  private static final int slashCount(String name){  int pos=-1;  int count=0;  while ((pos=name.indexOf('/',pos + 1)) != -1) {    count++;  }  return count;}  }
class C{  public void appendRemainingName(Name name){  if (name == null) {    return;  }  if (remainingName != null) {    try {      remainingName.addAll(name);    } catch (    NamingException e) {      throw new IllegalArgumentException(e.toString());    }  } else {    remainingName=(Name)(name.clone());  }}  }
class C{  public boolean supportsParameter(Object parameter){  EngineDescription cap=knownEngines.get(type);  if (cap == null) {    return true;  }  if (cap.supportsParameter == false) {    throw new InvalidParameterException("supportsParameter() not " + "used with " + type + " engines");  }  if ((parameter != null) && (parameter instanceof Key == false)) {    throw new InvalidParameterException("Parameter must be instanceof Key for engine " + type);  }  if (hasKeyAttributes() == false) {    return true;  }  if (parameter == null) {    return false;  }  Key key=(Key)parameter;  if (supportsKeyFormat(key)) {    return true;  }  if (supportsKeyClass(key)) {    return true;  }  return false;}  }
class C{  protected boolean isParam(ExpressionNode expr){  while (null != expr) {    if (expr instanceof ElemTemplateElement)     break;    expr=expr.exprGetParent();  }  if (null != expr) {    ElemTemplateElement ete=(ElemTemplateElement)expr;    while (null != ete) {      int type=ete.getXSLToken();switch (type) {case Constants.ELEMNAME_PARAMVARIABLE:        return true;case Constants.ELEMNAME_TEMPLATE:case Constants.ELEMNAME_STYLESHEET:      return false;  }  ete=ete.getParentElem();}}return false;}  }
class C{  public TreeModelEvent(Object source,TreePath path){  super(source);  this.path=path;  this.childIndices=new int[0];}  }
class C{  @Override public void onBackPressed(){  super.onBackPressed();}  }
class C{  public DSAPrivateKeySpec(BigInteger x,BigInteger p,BigInteger q,BigInteger g){  this.x=x;  this.p=p;  this.q=q;  this.g=g;}  }
class C{  public static String toUnicode(String input,int flag){  int p=0, q=0;  StringBuffer out=new StringBuffer();  if (isRootLabel(input)) {    return ".";  }  while (p < input.length()) {    q=searchDots(input,p);    out.append(toUnicodeInternal(input.substring(p,q),flag));    if (q != (input.length())) {      out.append('.');    }    p=q + 1;  }  return out.toString();}  }
class C{  public void testFloatValueNegativeInfinity2(){  byte[] a={0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};  int aSign=-1;  float aNumber=new BigInteger(aSign,a).floatValue();  assertTrue(aNumber == Float.NEGATIVE_INFINITY);}  }
class C{  public CharArrayWriter(){  this(32);}  }
class C{  private Bitmap createBase(int color){  Bitmap finalImg=Bitmap.createBitmap(mSize,mSize,Bitmap.Config.ARGB_8888);  mCanvas.setBitmap(finalImg);  mCanvas.save();  float[] hsv=new float[3];  Color.colorToHSV(color,hsv);  if (hsv[1] == 0) {    hsv[2]=Math.min(hsv[2],MAX_WHITE_BRIGHTNESS);  } else {    hsv[2]=Math.min(hsv[2],MAX_COLOR_BRIGHTNESS);    hsv[1]=Math.max(MIN_COLOR_SATURATION,hsv[1]);  }  int colorMid=Color.HSVToColor(hsv);  hsv[2]+=0.1f;  int colorTop=Color.HSVToColor(hsv);  hsv[2]-=0.2f;  int colorBot=Color.HSVToColor(hsv);  float edge=mSize * 0.01f;  mCanvas.translate(-edge,-edge);  mPaint.setColor(colorTop);  mCanvas.drawPath(mRoundRect,mPaint);  mPaint.setColor(colorBot);  mPaint.setXfermode(new PorterDuffXfermode(Mode.XOR));  mCanvas.translate(edge,edge);  mCanvas.drawPath(mRoundRect,mPaint);  mPaint.setColor(colorMid);  mPaint.setXfermode(new PorterDuffXfermode(Mode.DST_OVER));  mCanvas.drawPath(mRoundRect,mPaint);  mCanvas.restore();  mCanvas.setBitmap(null);  mPaint.setXfermode(null);  return finalImg;}  }
class C{  public int size(){  return map.size();}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("UserAgentParser.parse");  UserAgent userAgent=new UserAgent();  try {    headerName(TokenTypes.USER_AGENT);    if (this.lexer.lookAhead(0) == '\n')     throw createParseException("empty header");    while (this.lexer.lookAhead(0) != '\n' && this.lexer.lookAhead(0) != '\0') {      if (this.lexer.lookAhead(0) == '(') {        String comment=this.lexer.comment();        userAgent.addProductToken('(' + comment + ')');      } else {        this.getLexer().SPorHT();        String product=this.lexer.byteStringNoSlash();        if (product == null)         throw createParseException("Expected product string");        StringBuilder productSb=new StringBuilder(product);        if (this.lexer.peekNextToken().getTokenType() == TokenTypes.SLASH) {          this.lexer.match(TokenTypes.SLASH);          this.getLexer().SPorHT();          String productVersion=this.lexer.byteStringNoSlash();          if (productVersion == null)           throw createParseException("Expected product version");          productSb.append("/");          productSb.append(productVersion);        }        userAgent.addProductToken(productSb.toString());      }      this.lexer.SPorHT();    }  }  finally {    if (debug)     dbg_leave("UserAgentParser.parse");  }  return userAgent;}  }
class C{  public void login(HttpServletRequest request,HttpServletResponse response) throws AuthLoginException {  login(null,null,null,null,request,response);}  }
class C{  public void scrollToReference(String reference){  Document d=getDocument();  if (d instanceof HTMLDocument) {    HTMLDocument doc=(HTMLDocument)d;    HTMLDocument.Iterator iter=doc.getIterator(HTML.Tag.A);    for (; iter.isValid(); iter.next()) {      AttributeSet a=iter.getAttributes();      String nm=(String)a.getAttribute(HTML.Attribute.NAME);      if ((nm != null) && nm.equals(reference)) {        try {          int pos=iter.getStartOffset();          Rectangle r=modelToView(pos);          if (r != null) {            Rectangle vis=getVisibleRect();            r.height=vis.height;            scrollRectToVisible(r);            setCaretPosition(pos);          }        } catch (        BadLocationException ble) {          UIManager.getLookAndFeel().provideErrorFeedback(JEditorPane.this);        }      }    }  }}  }
class C{  XSLTAttributeDef(String namespace,String name,int type,boolean supportsAVT,int errorType,String defaultVal){  this.m_namespace=namespace;  this.m_name=name;  this.m_type=type;  this.m_required=false;  this.m_supportsAVT=supportsAVT;  this.m_errorType=errorType;  this.m_default=defaultVal;}  }
class C{  public void stop(){  getLock().lock();  try {    cancelEvent();    timerQueue().removeTimer(this);  }  finally {    getLock().unlock();  }}  }
class C{  @Override @Deprecated public String encodeRedirectUrl(String url){  return (encodeRedirectURL(url));}  }
class C{  public static String printBase64Binary(byte[] val){  if (theConverter == null)   initConverter();  return theConverter.printBase64Binary(val);}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiLabelUI();  return MultiLookAndFeel.createUIs(mui,((MultiLabelUI)mui).uis,a);}  }
class C{  void updateSettings(DebugLogPublisher<?>[] publishers){  publisherSettings=toPublisherSettings(publishers);}  }
class C{  boolean writeStyle(String name,Style style,boolean outputStyle) throws IOException {  boolean didOutputStyle=false;  Enumeration attributes=style.getAttributeNames();  if (attributes != null) {    while (attributes.hasMoreElements()) {      Object attribute=attributes.nextElement();      if (attribute instanceof CSS.Attribute) {        String value=style.getAttribute(attribute).toString();        if (value != null) {          if (!outputStyle) {            writeStyleStartTag();            outputStyle=true;          }          if (!didOutputStyle) {            didOutputStyle=true;            indentSmart();            write(name);            write(" {");          } else {            write(";");          }          write(' ');          write(attribute.toString());          write(": ");          write(value);        }      }    }  }  if (didOutputStyle) {    write(" }");    writeLineSeparator();  }  return didOutputStyle;}  }
class C{  public static Context createPendingActionContext(Context context,ReconAction action,String mappingName,JsonValue sourceObject,String reconId,Situation situation){  Map<String,Object> pendingActionMap=new HashMap<String,Object>();  pendingActionMap.put(MAPPING_NAME,mappingName);  pendingActionMap.put(SOURCE_OBJECT,sourceObject);  pendingActionMap.put(RECON_ID,reconId);  pendingActionMap.put(ORIGINAL_SITUATION,situation.toString());  PendingActionContext pendingActionContext=new PendingActionContext(context,pendingActionMap,action.toString());  return pendingActionContext;}  }
class C{  public Object clone() throws CloneNotSupportedException {  NodeVector clone=(NodeVector)super.clone();  if ((null != this.m_map) && (this.m_map == clone.m_map)) {    clone.m_map=new int[this.m_map.length];    System.arraycopy(this.m_map,0,clone.m_map,0,this.m_map.length);  }  return clone;}  }
class C{  public void write(int b) throws IOException {  out.write(b);}  }
class C{  public SAXException createSAXException(Exception e){  if (e instanceof InvocationTargetException) {    Throwable t=e.getCause();    if (t instanceof ThreadDeath) {      throw (ThreadDeath)t;    }    if (t instanceof VirtualMachineError) {      throw (VirtualMachineError)t;    }    if (t instanceof Exception) {      e=(Exception)t;    }  }  return createSAXException(e.getMessage(),e);}  }
class C{  public boolean isIntervalInFuture(String intervalString) throws IllegalArgumentException {  return Interval.parse(intervalString).getStart().isAfterNow();}  }
class C{  public void insert_long(int value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_long",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    $self.insert_long(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public AuthenticationException(Throwable cause){  super(ERR_AUTHENTICATION_EXCEPTION_DEFAULT.get(),cause);}  }
class C{  private void updateMenuStatus(){  boolean isPlaying=mService.isPowerUp();  boolean isPoweruping=mService.isPowerUping();  boolean isSeeking=mService.isSeeking();  boolean isScan=mService.isScanning();  boolean isMakePowerdown=mService.isMakePowerDown();  Log.d(TAG,"updateMenuStatus.isSeeking:" + isSeeking);  boolean fmStatus=(isScan || isSeeking || isPoweruping);  refreshImageButton(fmStatus ? false : isPlaying);  refreshPopupMenuItem(fmStatus ? false : isPlaying);  refreshActionMenuItem(fmStatus ? false : isPlaying);  Log.d(TAG,"updateMenuStatus.mIsNeedDisablePower: " + mIsNeedDisablePower);  refreshActionMenuPower(fmStatus ? false : (isPlaying || (isMakePowerdown && !mIsNeedDisablePower)));  if (isSeeking || isPoweruping) {    Log.d(TAG,"updateMenuStatus. it is seeking or poweruping");    startAnimation();  }}  }
class C{  public ParseException(String detailMessage,int location){  super(detailMessage + (" (at offset " + location + ")"));  errorOffset=location;}  }
class C{  public Object remove(int posn){  Object r=addrs.elementAt(posn);  addrs.removeElementAt(posn);  return r;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text terNode;  Text dayNode;  Node retval;  Node lastChild;  DocumentFragment docFrag;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  terNode=doc.createTextNode("ter");  dayNode=doc.createTextNode("day");  docFrag=doc.createDocumentFragment();  retval=docFrag.appendChild(terNode);  retval=docFrag.appendChild(dayNode);  retval=titleAttr.appendChild(docFrag);  value=titleAttr.getValue();  assertEquals("attrValue","Yesterday",value);  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","Yesterday",value);  value=retval.getNodeValue();  assertNull("retvalValue",value);  lastChild=titleAttr.getLastChild();  value=lastChild.getNodeValue();  assertEquals("lastChildValue","day",value);}  }
class C{  public final boolean contains(PlaPointInt p_point,double tolerance){  if (p_point.is_NaN() || start_point.is_NaN() || end_point.is_NaN())   return false;  PlaPointFloat f_point=p_point.to_float();  PlaPointFloat f_begin=start_point.to_float();  PlaPointFloat f_end=end_point.to_float();  double d_begin_this=f_begin.distance_square(f_point);  double d_end_this=f_end.distance_square(f_point);  double d_begin_end=f_begin.distance_square(f_end);  if (d_begin_end >= d_begin_this + tolerance) {    if (d_begin_end >= d_end_this + tolerance) {      return true;    } else {      return false;    }  } else {    if (d_begin_end >= d_end_this + tolerance) {      return false;    } else {      return false;    }  }}  }
class C{  @SuppressWarnings("unchecked") public static Map<String,Integer> parseExport(String export){  if (StringUtils.isBlank(export)) {    return Collections.emptyMap();  }  Map<String,Integer> pps=new HashMap<String,Integer>();  String[] protocolAndPorts=MotanConstants.COMMA_SPLIT_PATTERN.split(export);  for (  String pp : protocolAndPorts) {    if (StringUtils.isBlank(pp)) {      continue;    }    String[] ppDetail=pp.split(":");    if (ppDetail.length == 2) {      pps.put(ppDetail[0],Integer.parseInt(ppDetail[1]));    } else     if (ppDetail.length == 1) {      if (MotanConstants.PROTOCOL_INJVM.equals(ppDetail[0])) {        pps.put(ppDetail[0],MotanConstants.DEFAULT_INT_VALUE);      } else {        int port=MathUtil.parseInt(ppDetail[0],0);        if (port <= 0) {          throw new MotanServiceException("Export is malformed :" + export);        } else {          pps.put(MotanConstants.PROTOCOL_MOTAN,port);        }      }    } else {      throw new MotanServiceException("Export is malformed :" + export);    }  }  return pps;}  }
class C{  private static InetAddress[] lookupHostByName(String host) throws UnknownHostException {  BlockGuard.getThreadPolicy().onNetwork();  Object cachedResult=addressCache.get(host);  if (cachedResult != null) {    if (cachedResult instanceof InetAddress[]) {      return (InetAddress[])cachedResult;    } else {      throw new UnknownHostException((String)cachedResult);    }  }  try {    StructAddrinfo hints=new StructAddrinfo();    hints.ai_flags=AI_ADDRCONFIG;    hints.ai_family=AF_UNSPEC;    hints.ai_socktype=SOCK_STREAM;    InetAddress[] addresses=Libcore.os.getaddrinfo(host,hints);    for (    InetAddress address : addresses) {      address.hostName=host;    }    addressCache.put(host,addresses);    return addresses;  } catch (  GaiException gaiException) {    if (gaiException.getCause() instanceof ErrnoException) {      if (((ErrnoException)gaiException.getCause()).errno == EACCES) {        throw new SecurityException("Permission denied (missing INTERNET permission?)",gaiException);      }    }    String detailMessage="Unable to resolve host \"" + host + "\": "+ Libcore.os.gai_strerror(gaiException.error);    addressCache.putUnknownHost(host,detailMessage);    throw gaiException.rethrowAsUnknownHostException(detailMessage);  }}  }
class C{  static MemberName generateLambdaFormInterpreterEntryPoint(String sig){  assert (isValidSignature(sig));  String name="interpret_" + signatureReturn(sig).basicTypeChar();  MethodType type=signatureType(sig);  type=type.changeParameterType(0,MethodHandle.class);  InvokerBytecodeGenerator g=new InvokerBytecodeGenerator("LFI",name,type);  return g.loadMethod(g.generateLambdaFormInterpreterEntryPointBytes());}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.KeyValueType createKeyValueType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.KeyValueTypeImpl();}  }
class C{  public final boolean isFatalEnabled(){  return isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL);}  }
class C{  public StreamResult(String systemId){  this.systemId=systemId;}  }
class C{  public SIPRequest createAckRequest(To responseToHeader){  SIPRequest newRequest=(SIPRequest)this.clone();  newRequest.setMethod(Request.ACK);  newRequest.removeHeader(RouteHeader.NAME);  newRequest.removeHeader(ProxyAuthorizationHeader.NAME);  newRequest.removeContent();  newRequest.removeHeader(ContentTypeHeader.NAME);  try {    newRequest.getCSeq().setMethod(Request.ACK);  } catch (  ParseException e) {  }  if (responseToHeader != null) {    newRequest.setTo(responseToHeader);  }  newRequest.removeHeader(ContactHeader.NAME);  newRequest.removeHeader(ExpiresHeader.NAME);  ViaList via=newRequest.getViaHeaders();  if (via != null && via.size() > 1) {    for (int i=2; i < via.size(); i++) {      via.remove(i);    }  }  if (MessageFactoryImpl.getDefaultUserAgentHeader() != null) {    newRequest.setHeader(MessageFactoryImpl.getDefaultUserAgentHeader());  }  return newRequest;}  }
class C{  @Override public boolean xacmlPrivilegeEnabled(){  if (!hasEntitlementDITs()) {    return false;  }  Set<String> xacmlEnabledSet=getConfiguration(XACML_PRIVILEGE_ENABLED);  String xacmlEnabled=((xacmlEnabledSet != null) && !xacmlEnabledSet.isEmpty()) ? xacmlEnabledSet.iterator().next() : null;  return (xacmlEnabled != null) ? Boolean.parseBoolean(xacmlEnabled) : false;}  }
class C{  public boolean hasAttribute(final AttributeType attributeType){  return attributes.contains(attributeType);}  }
class C{  public int versionMinorNumber(){  return Integer.valueOf(properties.getProperty("version.minor"));}  }
class C{  public synchronized void removeNotification(Integer id) throws InstanceNotFoundException {  if (timerTable.containsKey(id) == false) {    throw new InstanceNotFoundException("Timer notification to remove not in the list of notifications");  }  Object[] obj=timerTable.get(id);  TimerAlarmClock alarmClock=(TimerAlarmClock)obj[ALARM_CLOCK_INDEX];  if (alarmClock != null) {    alarmClock.cancel();  }  if (TIMER_LOGGER.isLoggable(Level.FINER)) {    StringBuilder strb=new StringBuilder().append("removing timer notification:").append("\n\tNotification source = ").append(((TimerNotification)obj[TIMER_NOTIF_INDEX]).getSource()).append("\n\tNotification type = ").append(((TimerNotification)obj[TIMER_NOTIF_INDEX]).getType()).append("\n\tNotification ID = ").append(((TimerNotification)obj[TIMER_NOTIF_INDEX]).getNotificationID()).append("\n\tNotification date = ").append(obj[TIMER_DATE_INDEX]).append("\n\tNotification period = ").append(obj[TIMER_PERIOD_INDEX]).append("\n\tNotification nb of occurrences = ").append(obj[TIMER_NB_OCCUR_INDEX]).append("\n\tNotification executes at fixed rate = ").append(obj[FIXED_RATE_INDEX]);    TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"removeNotification",strb.toString());  }  timerTable.remove(id);  TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"removeNotification","timer notification removed");}  }
class C{  public int peekChar() throws IOException {  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int c=fCurrentEntity.ch[fCurrentEntity.position];  if (fCurrentEntity.isExternal()) {    return c != '\r' ? c : '\n';  } else {    return c;  }}  }
class C{  protected AMInvalidDNException(String msg,String errorCode,Object args[],UMSException ue){  super(msg,errorCode,args,ue);}  }
class C{  public int compare(Object s1,Object s2){  int result=0;  String str1=(String)s1;  String str2=(String)s2;  int len1=((String)s1).length();  int len2=((String)s2).length();  if (len1 > len2) {    result=-1;  } else   if (len1 < len2) {    result=1;  }  return result;}  }
class C{  public String versionFull(){  return versionFull;}  }
class C{  public static NameIDInfoKey parse(String infoKey) throws SAML2Exception {  if (infoKey == null) {    throw new SAML2Exception(SAML2Utils.bundle.getString("nullNameIDInfoKey"));  }  StringTokenizer st=new StringTokenizer(infoKey,DELIM);  if (st.countTokens() != 3) {    throw new SAML2Exception(SAML2Utils.bundle.getString("inValidNameIDInfoKey"));  }  String hostID=st.nextToken();  String remoteID=st.nextToken();  String nameID=st.nextToken();  return new NameIDInfoKey(nameID,hostID,remoteID);}  }
class C{  public ArrayList<Polyline> split(int p_line_no,PlaLineInt p_end_line){  ArrayList<Polyline> result=new ArrayList<Polyline>(2);  if (p_line_no < 1 || p_line_no > plaline_len(-2)) {    System.out.println("Polyline.split: p_line_no out of range");    return result;  }  PlaLineInt s_line=plaline(p_line_no);  if (s_line.is_parallel(p_end_line))   return result;  PlaPointFloat a_corner=s_line.intersection_approx(p_end_line);  if (a_corner.is_NaN())   return result;  PlaPointInt new_end_corner=a_corner.round();  if (p_line_no == 1 && new_end_corner.equals(corner_first()))   return result;  if (p_line_no == plaline_len(-2) && new_end_corner.equals(corner_last()))   return result;  PlaLineIntAlist first_piece=new PlaLineIntAlist(plaline_len());  alist_append_to(first_piece,0,p_line_no + 1);  if (!corner(p_line_no - 1).equals(new_end_corner))   first_piece.add(p_end_line);  PlaLineIntAlist second_piece=new PlaLineIntAlist(plaline_len());  if (!corner(p_line_no).equals(new_end_corner))   second_piece.add(p_end_line);  alist_append_to(second_piece,p_line_no);  Polyline first_poly=new Polyline(first_piece);  if (first_poly.has_corner_loopt())   return result;  Polyline second_poly=new Polyline(second_piece);  if (second_poly.has_corner_loopt())   return result;  result.add(first_poly);  result.add(second_poly);  return result;}  }
class C{  public Set createGroupContainers(Map groupContainersMap) throws AMException, SSOException {  Iterator iter=groupContainersMap.keySet().iterator();  Set groupContainers=new HashSet();  while (iter.hasNext()) {    String groupContainerName=(String)iter.next();    String groupContainerDN=AMNamingAttrManager.getNamingAttr(GROUP_CONTAINER) + "=" + groupContainerName+ ","+ entryDN;    Map attributes=(Map)groupContainersMap.get(groupContainerName);    AMGroupContainerImpl groupContainerImpl=new AMGroupContainerImpl(token,groupContainerDN);    groupContainerImpl.setAttributes(attributes);    groupContainerImpl.create();    groupContainers.add(groupContainerImpl);  }  return groupContainers;}  }
class C{  public JsonValue read(String location,String resourceId,Context context) throws ResourceException {  Reject.ifTrue(StringUtils.isEmpty(location),"The endpoint destination may not be null or empty.");  Reject.ifTrue(StringUtils.isEmpty(resourceId),"The resourceId to read may not be null or empty.");  final Router rootRouter=router.get();  final ReadRequest readRequest=Requests.newReadRequest(location,resourceId);  return rootRouter.handleRead(context,readRequest).getOrThrowUninterruptibly().getContent();}  }
class C{  @Override public Response<DirectionsResponse> executeCall() throws IOException {  return getCall().execute();}  }
class C{  protected void writeAttributes(AttributeSet attr) throws IOException {  convAttr.removeAttributes(convAttr);  convertToHTML32(attr,convAttr);  Enumeration names=convAttr.getAttributeNames();  while (names.hasMoreElements()) {    Object name=names.nextElement();    if (name instanceof HTML.Tag || name instanceof StyleConstants || name == HTML.Attribute.ENDTAG) {      continue;    }    write(" " + name + "=\""+ convAttr.getAttribute(name)+ "\"");  }}  }
class C{  public boolean delete(Long ruleID){  if (ruleID == null) {    throw new IllegalArgumentException("primary key null.");  }  return database.delete(DATABASE_TABLE,KEY_RULEID + "=" + ruleID,null) > 0;}  }
class C{  public AMIdentityMembershipCondition(){  this(PrivilegeManager.debug,new CoreWrapper());}  }
class C{  public synchronized void put(final String name,final Object object){  objects.put(name,object);  contexts.put(name,new DecorationContext(this,this.name.child(name),json(emptyMap())));}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  private void parseMinorVersion(String minorVer) throws SAMLException {  try {    minorVersion=Integer.parseInt(minorVer);  } catch (  NumberFormatException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("Request(Element): invalid " + "MinorVersion",e);    }    throw new SAMLRequesterException(FSUtils.BUNDLE_NAME,"wrongInput",null);  }  if (minorVersion > IFSConstants.FF_12_SAML_PROTOCOL_MINOR_VERSION) {    FSUtils.debug.error("Request(Element): MinorVersion" + " of the Request is too high.");    throw new SAMLRequestVersionTooHighException(FSUtils.BUNDLE_NAME,"requestVersionTooHigh",null);  } else   if (minorVersion < IFSConstants.FF_11_SAML_PROTOCOL_MINOR_VERSION) {    FSUtils.debug.error("Request(Element): MinorVersion" + " of the Request is too low.");    throw new SAMLRequestVersionTooLowException(FSUtils.BUNDLE_NAME,"requestVersionTooLow",null);  }}  }
class C{  public DelegateFileFilter(FilenameFilter filter){  if (filter == null) {    throw new IllegalArgumentException("The FilenameFilter must not be null");  }  this.filenameFilter=filter;  this.fileFilter=null;}  }
class C{  protected void handleRenegotiation(){  clientWorkflowContext.setProtocolMessagePointer(0);  serverWorkflowContext.setProtocolMessagePointer(0);  clientTlsContext.getDigest().reset();  serverTlsContext.getDigest().reset();  clientTlsContext.setClientAuthentication(true);  serverTlsContext.setClientAuthentication(true);  RenegotiationWorkflowConfiguration clientReneWorkflowConfig=new RenegotiationWorkflowConfiguration(clientTlsContext);  clientReneWorkflowConfig.createWorkflow();  RenegotiationWorkflowConfiguration serverReneWorkflowConfig=new RenegotiationWorkflowConfiguration(serverTlsContext);  serverReneWorkflowConfig.createWorkflow();  clientTlsContext.setSessionResumption(false);  serverTlsContext.setSessionResumption(false);  clientTlsContext.setRenegotiation(true);  serverTlsContext.setRenegotiation(true);  renegotiation=false;  executed=false;  executeWorkflow();}  }
class C{  public void debugWarning(String message){  debug.warning(message);}  }
class C{  private Conversion(){}  }
class C{  @Override public String toString(){  StringBuffer buf=new StringBuffer();  buf.append("Poller");  long[] res=new long[actualPollerSize * 2];  for (int i=0; i < pollers.length; i++) {    int count=Poll.pollset(pollers[i],res);    buf.append(" [ ");    for (int j=0; j < count; j++) {      buf.append(desc[2 * j + 1]).append(" ");    }    buf.append("]");  }  return buf.toString();}  }
class C{  private Collection<String> promptForCertificateNickname(List<String> nicknames){  Collection<String> choosenNicknames=new ArrayList<>();  while (choosenNicknames.isEmpty()) {    for (    final String n : nicknames) {      try {        if (confirmAction(INFO_INSTALLDS_PROMPT_CERTNICKNAME.get(n),true)) {          choosenNicknames.add(n);        }      } catch (      final ClientException ce) {        logger.warn(LocalizableMessage.raw("Error reading input: " + ce,ce));      }    }  }  return choosenNicknames;}  }
class C{  public String decode(String pString,String charset) throws DecoderException, UnsupportedEncodingException {  if (pString == null) {    return null;  }  return new String(decode(pString.getBytes(StringEncodings.US_ASCII)),charset);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createDocument02.class,args);}  }
class C{  private void addCalendarEvent(String summary,Date start,boolean allDay,Date end,String location,String description,String[] attendees){  Intent intent=new Intent(Intent.ACTION_INSERT);  intent.setType("vnd.android.cursor.item/event");  long startMilliseconds=start.getTime();  intent.putExtra("beginTime",startMilliseconds);  if (allDay) {    intent.putExtra("allDay",true);  }  long endMilliseconds;  if (end == null) {    if (allDay) {      endMilliseconds=startMilliseconds + 24 * 60 * 60* 1000;    } else {      endMilliseconds=startMilliseconds;    }  } else {    endMilliseconds=end.getTime();  }  intent.putExtra("endTime",endMilliseconds);  intent.putExtra("title",summary);  intent.putExtra("eventLocation",location);  intent.putExtra("description",description);  if (attendees != null) {    intent.putExtra(Intent.EXTRA_EMAIL,attendees);  }  try {    rawLaunchIntent(intent);  } catch (  ActivityNotFoundException anfe) {    Log.w(TAG,"No calendar app available that responds to " + Intent.ACTION_INSERT);    intent.setAction(Intent.ACTION_EDIT);    launchIntent(intent);  }}  }
class C{  public void sendHeader(MessageBytes name,MessageBytes value){  write(name);  headerBuffer[pos++]=Constants.COLON;  headerBuffer[pos++]=Constants.SP;  write(value);  headerBuffer[pos++]=Constants.CR;  headerBuffer[pos++]=Constants.LF;}  }
class C{  public static List artifactQueryHandler(String[] arti,String connecto) throws IOException, SAMLException {  if ((arti == null) || (arti.length == 0)) {    SAMLUtils.debug.message("artifactQueryHandler: null input.");    throw new SAMLException(SAMLUtils.bundle.getString("nullInput"));  }  String firstSourceID=null;  com.sun.identity.saml.common.SAMLServiceManager.SOAPEntry dest=null;  Response samlresponse=null;  List al=new ArrayList();  List artl=new ArrayList();  AssertionArtifact firstArtifact=new AssertionArtifact(arti[0]);  firstSourceID=firstArtifact.getSourceID();  if (SystemConfigurationUtil.isServerMode()) {    String[] data={SAMLUtils.bundle.getString("Artifact") + " " + 0,arti[0]};    LogUtils.access(java.util.logging.Level.INFO,LogUtils.ARTIFACT_TO_SEND,data);  }  artl.add(firstArtifact);  al.add(arti[0]);  AssertionArtifact assertArtifact=null;  String destination=null;  for (int k=1; k < arti.length; k++) {    assertArtifact=new AssertionArtifact(arti[k]);    destination=assertArtifact.getSourceID();    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("SourceID within the Artifact is " + destination);    }    if (!destination.equals(firstSourceID)) {      if (SAMLUtils.debug.messageEnabled()) {        SAMLUtils.debug.message("Received multiple Artifacts " + "have different source id.");      }      throw new SAMLException(SAMLUtils.bundle.getString("sourceidDifferent"));    }    if (SystemConfigurationUtil.isServerMode()) {      String[] data={SAMLUtils.bundle.getString("Artifact") + " " + k,arti[k]};      LogUtils.access(java.util.logging.Level.FINE,LogUtils.ARTIFACT_TO_SEND,data);    }    artl.add(assertArtifact);    al.add(arti[k]);  }  try {    String to=null;    Map soaps=(Map)SAMLServiceManager.getAttribute(SAMLConstants.PARTNER_URLS);    if (soaps == null) {      SAMLUtils.debug.error(SAMLUtils.bundle.getString("nullPartnerUrl"));      throw new SAMLException(SAMLUtils.bundle.getString("nullPartnerUrl"));    }    String urlEndpoint=null;    if (soaps.containsKey(firstSourceID)) {      dest=(SAMLServiceManager.SOAPEntry)soaps.get(firstSourceID);      to=dest.getSOAPUrl();      if (to == null) {        if (connecto == null || connecto.length() == 0) {          if (SystemConfigurationUtil.isServerMode()) {            String[] data={SAMLUtils.bundle.getString("wrongPartnerSOAPUrl")};            LogUtils.error(java.util.logging.Level.INFO,LogUtils.WRONG_SOAP_URL,data);          }          throw new SAMLException(SAMLUtils.bundle.getString("wrongPartnerSOAPUrl"));        } else {          urlEndpoint=connecto;        }      } else {        urlEndpoint=createSOAPReceiverUrl(dest,to);      }    } else {      if (SAMLUtils.debug.messageEnabled()) {        SAMLUtils.debug.message("SAMLClient:artifactQueryHandler: " + "Failed to locate SOAP-Receiver-URL " + "using the source id from AssertionArtifact.");      }      if (connecto == null || connecto.length() == 0) {        throw new SAMLException(SAMLUtils.bundle.getString("failedLocateSOAPUrl"));      } else {        urlEndpoint=connecto;      }    }    if (urlEndpoint == null) {      SAMLUtils.debug.error("SAMLClient:artifactQueryHandler:" + "createSOAPReceiverURL Error!");      if (SystemConfigurationUtil.isServerMode()) {        String[] data={SAMLUtils.bundle.getString("wrongPartnerSOAPUrl")};        LogUtils.error(java.util.logging.Level.INFO,LogUtils.WRONG_SOAP_URL,data);      }      throw new SAMLException(SAMLUtils.bundle.getString("wrongPartnerSOAPUrl"));    }    Request req=new Request(null,artl);    String ver=dest.getVersion();    if (ver != null) {      StringTokenizer st=new StringTokenizer(ver,".");      if (st.countTokens() == 2) {        req.setMajorVersion(Integer.parseInt(st.nextToken().trim()));        req.setMinorVersion(Integer.parseInt(st.nextToken().trim()));      }    }    if (((Boolean)SAMLServiceManager.getAttribute(SAMLConstants.SIGN_REQUEST)).booleanValue()) {      req.signXML();    }    String xmlString=createSOAPMessage(req);    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("SENDING message: \n " + xmlString);    }    if (SystemConfigurationUtil.isServerMode()) {      String[] data={SAMLUtils.bundle.getString("sendingSAMLRequest"),xmlString};      LogUtils.access(java.util.logging.Level.FINE,LogUtils.SAML_ARTIFACT_QUERY,data);    }    String[] urls={urlEndpoint};    SOAPClient client=new SOAPClient(urls);    InputStream inbuf=client.call(xmlString,null,null);    StringBuffer reply=new StringBuffer();    String line;    BufferedReader reader=new BufferedReader(new InputStreamReader(inbuf,"UTF-8"));    while ((line=reader.readLine()) != null) {      reply.append(line).append("\n");    }    if (reply == null) {      if (SystemConfigurationUtil.isServerMode()) {        String[] data={SAMLUtils.bundle.getString("noReplyfromSOAPReceiver")};        LogUtils.error(java.util.logging.Level.INFO,LogUtils.NO_REPLY_FROM_SOAP_RECEIVER,data);      }      throw new SAMLException(SAMLUtils.bundle.getString("noReplyfromSOAPReceiver"));    }    xmlString=reply.toString();    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("REPLIED message: \n " + xmlString);    }    if (SystemConfigurationUtil.isServerMode()) {      String[] data={SAMLUtils.bundle.getString("repliedSOAPMessage"),xmlString};      LogUtils.access(java.util.logging.Level.FINE,LogUtils.REPLIED_SOAP_MESSAGE,data);    }    samlresponse=getSAMLResponse(xmlString);    if (samlresponse == null) {      SAMLUtils.debug.error("SAMLClient:artifactQueryHandler:" + "No SAML Response contained in SOAPMessage.");      if (SystemConfigurationUtil.isServerMode()) {        String[] data={SAMLUtils.bundle.getString("noSAMLResponse")};        LogUtils.error(java.util.logging.Level.INFO,LogUtils.NULL_SAML_RESPONSE,data);      }      throw new SAMLException(SAMLUtils.bundle.getString("noSAMLResponse"));    }  } catch (  Exception e) {    SAMLUtils.debug.error("SAMLClient:artifactQueryHandler",e);    throw new SAMLException(e.getMessage());  }  if (SAMLUtils.debug.messageEnabled()) {    SAMLUtils.debug.message("Start to process SAML Response...");  }  if (!samlresponse.isSignatureValid()) {    if (SystemConfigurationUtil.isServerMode()) {      String[] data={SAMLUtils.bundle.getString("cannotVerifyResponse")};      LogUtils.error(java.util.logging.Level.INFO,LogUtils.INVALID_RESPONSE_SIGNATURE,data);    }    throw new SAMLException(SAMLUtils.bundle.getString("cannotVerifyResponse"));  }  try {    String statuscode=samlresponse.getStatus().getStatusCode().getValue();    int idex=0;    if ((idex=statuscode.indexOf(":")) == -1) {      throw new SAMLException(SAMLUtils.bundle.getString("wrongformatStatusCode"));    }    if (!(statuscode.substring(idex).equals(":Success"))) {      SAMLUtils.debug.error("Error:SAML StatusCode is not Success");      throw new SAMLException(SAMLUtils.displayXML(samlresponse.getStatus().toString()));    }  } catch (  Exception e) {    if (SystemConfigurationUtil.isServerMode()) {      String[] data={SAMLUtils.bundle.getString("errorSAMLStatusCode")};      LogUtils.error(java.util.logging.Level.INFO,LogUtils.ERROR_RESPONSE_STATUS,data);    }    throw new SAMLException(e.getMessage());  }  List asserts=new ArrayList();  asserts=getAssertionList(samlresponse,al);  return asserts;}  }
class C{  static private byte[] toBytes(ASN1OctetString[] octs){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  for (int i=0; i != octs.length; i++) {    try {      DEROctetString o=(DEROctetString)octs[i];      bOut.write(o.getOctets());    } catch (    ClassCastException e) {      throw new IllegalArgumentException(octs[i].getClass().getName() + " found in input should only contain DEROctetString");    }catch (    IOException e) {      throw new IllegalArgumentException("exception converting octets " + e.toString());    }  }  return bOut.toByteArray();}  }
class C{  void checkDSDegradedStatus(){  final int degradedStatusThreshold=localReplicationServer.getDegradedStatusThreshold();  if (degradedStatusThreshold > 0) {    for (    DataServerHandler serverHandler : connectedDSs.values()) {      final int nChanges=serverHandler.getRcvMsgQueueSize();      if (logger.isTraceEnabled()) {        logger.trace("In RS " + getLocalRSServerId() + ", for baseDN="+ getBaseDN()+ ": "+ "Status analyzer: DS "+ serverHandler.getServerId()+ " has "+ nChanges+ " message(s) in writer queue.");      }      if (nChanges >= degradedStatusThreshold) {        if (serverHandler.getStatus() == NORMAL_STATUS && changeStatus(serverHandler,TO_DEGRADED_STATUS_EVENT)) {          break;        }      } else {        if (serverHandler.getStatus() == DEGRADED_STATUS && changeStatus(serverHandler,TO_NORMAL_STATUS_EVENT)) {          break;        }      }    }  }}  }
class C{  public ShapeTileBox(PlaPointInt p_ll,PlaPointInt p_ur){  box_ll=p_ll;  box_ur=p_ur;}  }
class C{  public ContainerMBean() throws MBeanException, RuntimeOperationsException {  super();}  }
class C{  public void addCdataSectionElements(String URI_and_localNames){  if (URI_and_localNames != null)   initCdataElems(URI_and_localNames);  if (m_StringOfCDATASections == null)   m_StringOfCDATASections=URI_and_localNames; else   m_StringOfCDATASections+=(" " + URI_and_localNames);}  }
class C{  public ServerConfigXML(String xml) throws Exception {  Document doc=XMLUtils.getXMLDocument(new ByteArrayInputStream(xml.getBytes("UTF-8")));  Node root=XMLUtils.getRootNode(doc,DSConfigMgr.ROOT);  defaultServerGroup=new ServerGroup(XMLUtils.getNamedChildNode(root,DSConfigMgr.SERVERGROUP,DSConfigMgr.NAME,DSConfigMgr.DEFAULT));  smsServerGroup=new ServerGroup(XMLUtils.getNamedChildNode(root,DSConfigMgr.SERVERGROUP,DSConfigMgr.NAME,"sms"));}  }
class C{  public void testMoreThanOneMessageInTheFrame() throws Exception {  ByteArrayInputStream bais1=new ByteArrayInputStream(raw52);  WebSocketCodec codec=new WebSocketCodec(true,false);  String s=new String(codec.decode(bais1));  assertNotNull(s);  assertTrue(s.startsWith("REGISTER"));  System.out.println(s);  s=new String(codec.decode(new ByteArrayInputStream(new byte[]{})));  System.out.println(s);  assertNotNull(s);  assertTrue(s.startsWith("REGISTER"));}  }
class C{  private final void processCookieHeader(byte bytes[],int off,int len,ServerCookies serverCookies){  if (len <= 0 || bytes == null) {    return;  }  int end=off + len;  int pos=off;  int nameStart=0;  int nameEnd=0;  int valueStart=0;  int valueEnd=0;  int version=0;  ServerCookie sc=null;  boolean isSpecial;  boolean isQuoted;  while (pos < end) {    isSpecial=false;    isQuoted=false;    while (pos < end && (isHttpSeparator((char)bytes[pos]) && !getAllowHttpSepsInV0() || isV0Separator((char)bytes[pos]) || isWhiteSpace(bytes[pos]))) {      pos++;    }    if (pos >= end) {      return;    }    if (bytes[pos] == '$') {      isSpecial=true;      pos++;    }    valueEnd=valueStart=nameStart=pos;    pos=nameEnd=getTokenEndPosition(bytes,pos,end,version,true);    while (pos < end && isWhiteSpace(bytes[pos])) {      pos++;    }    if (pos < (end - 1) && bytes[pos] == '=') {      do {        pos++;      } while (pos < end && isWhiteSpace(bytes[pos]));      if (pos >= end) {        return;      }switch (bytes[pos]) {case '"':        isQuoted=true;      valueStart=pos + 1;    valueEnd=getQuotedValueEndPosition(bytes,valueStart,end);  pos=valueEnd;if (pos >= end) {  return;}break;case ';':case ',':valueStart=valueEnd=-1;break;default :if (version == 0 && !isV0Separator((char)bytes[pos]) && getAllowHttpSepsInV0() || !isHttpSeparator((char)bytes[pos]) || bytes[pos] == '=') {valueStart=pos;valueEnd=getTokenEndPosition(bytes,valueStart,end,version,false);pos=valueEnd;if (valueStart == valueEnd) {valueStart=-1;valueEnd=-1;}} else {UserDataHelper.Mode logMode=userDataLog.getNextMode();if (logMode != null) {String message=sm.getString("cookies.invalidCookieToken");switch (logMode) {case INFO_THEN_DEBUG:message+=sm.getString("cookies.fallToDebug");case INFO:log.info(message);break;case DEBUG:log.debug(message);}}while (pos < end && bytes[pos] != ';' && bytes[pos] != ',') {pos++;}pos++;sc=null;continue;}}} else {valueStart=valueEnd=-1;pos=nameEnd;}while (pos < end && isWhiteSpace(bytes[pos])) {pos++;}while (pos < end && bytes[pos] != ';' && bytes[pos] != ',') {pos++;}pos++;if (isSpecial) {isSpecial=false;if (equals("Version",bytes,nameStart,nameEnd) && sc == null) {if (bytes[valueStart] == '1' && valueEnd == (valueStart + 1)) {version=1;} else {}continue;}if (sc == null) {continue;}if (equals("Domain",bytes,nameStart,nameEnd)) {sc.getDomain().setBytes(bytes,valueStart,valueEnd - valueStart);continue;}if (equals("Path",bytes,nameStart,nameEnd)) {sc.getPath().setBytes(bytes,valueStart,valueEnd - valueStart);continue;}if (equals("Port",bytes,nameStart,nameEnd)) {continue;}if (equals("CommentURL",bytes,nameStart,nameEnd)) {continue;}UserDataHelper.Mode logMode=userDataLog.getNextMode();if (logMode != null) {String message=sm.getString("cookies.invalidSpecial");switch (logMode) {case INFO_THEN_DEBUG:message+=sm.getString("cookies.fallToDebug");case INFO:log.info(message);break;case DEBUG:log.debug(message);}}} else {if (valueStart == -1 && !getAllowNameOnly()) {continue;}sc=serverCookies.addCookie();sc.setVersion(version);sc.getName().setBytes(bytes,nameStart,nameEnd - nameStart);if (valueStart != -1) {sc.getValue().setBytes(bytes,valueStart,valueEnd - valueStart);if (isQuoted) {unescapeDoubleQuotes(sc.getValue().getByteChunk());}} else {sc.getValue().setString("");}continue;}}}  }
class C{  public Object clone(){  PolicyDecision clone=new PolicyDecision();  clone.actionDecisions=new HashMap(actionDecisions.size());  Iterator actionDecisionIter=actionDecisions.keySet().iterator();  while (actionDecisionIter.hasNext()) {    String key=(String)actionDecisionIter.next();    ActionDecision ad=(ActionDecision)actionDecisions.get(key);    clone.addActionDecision((ActionDecision)ad.clone());  }  if (responseDecisions != null) {    clone.responseDecisions=new HashMap(responseDecisions.size());    Iterator responseDecisionsIter=responseDecisions.keySet().iterator();    while (responseDecisionsIter.hasNext()) {      String key=(String)responseDecisionsIter.next();      clone.responseDecisions.put(key,responseDecisions.get(key));    }  }  if (responseAttributes != null) {    clone.responseAttributes=new HashMap(responseAttributes.size());    Iterator responseAttributesIter=responseAttributes.keySet().iterator();    while (responseAttributesIter.hasNext()) {      String key=(String)responseAttributesIter.next();      clone.responseAttributes.put(key,responseAttributes.get(key));    }  }  return clone;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  assertSize("elementGetElementsByTagNameAssert",5,elementList);}  }
class C{  void open(WriteableTransaction txn,boolean createOnDemand) throws StorageRuntimeException {  for (  Index index : indexIdToIndexes.values()) {    index.open(txn,createOnDemand);  }  config.addChangeListener(this);}  }
class C{  protected Locale determineLocale(HttpContext context){  return Locale.getDefault();}  }
class C{  @Override public Servlet allocate() throws ServletException {  if (unloading) {    throw new ServletException(sm.getString("standardWrapper.unloading",getName()));  }  boolean newInstance=false;  if (!singleThreadModel) {    if (instance == null || !instanceInitialized) {synchronized (this) {        if (instance == null) {          try {            if (log.isDebugEnabled()) {              log.debug("Allocating non-STM instance");            }            instance=loadServlet();            newInstance=true;            if (!singleThreadModel) {              countAllocated.incrementAndGet();            }          } catch (          ServletException e) {            throw e;          }catch (          Throwable e) {            ExceptionUtils.handleThrowable(e);            throw new ServletException(sm.getString("standardWrapper.allocate"),e);          }        }        if (!instanceInitialized) {          initServlet(instance);        }      }    }    if (singleThreadModel) {      if (newInstance) {synchronized (instancePool) {          instancePool.push(instance);          nInstances++;        }      }    } else {      if (log.isTraceEnabled()) {        log.trace("  Returning non-STM instance");      }      if (!newInstance) {        countAllocated.incrementAndGet();      }      return instance;    }  }synchronized (instancePool) {    while (countAllocated.get() >= nInstances) {      if (nInstances < maxInstances) {        try {          instancePool.push(loadServlet());          nInstances++;        } catch (        ServletException e) {          throw e;        }catch (        Throwable e) {          ExceptionUtils.handleThrowable(e);          throw new ServletException(sm.getString("standardWrapper.allocate"),e);        }      } else {        try {          instancePool.wait();        } catch (        InterruptedException e) {        }      }    }    if (log.isTraceEnabled()) {      log.trace("  Returning allocated STM instance");    }    countAllocated.incrementAndGet();    return instancePool.pop();  }}  }
class C{  public int sp2px(float spValue){  final float fontScale=mContext.getResources().getDisplayMetrics().scaledDensity;  return (int)(spValue * fontScale + 0.5f);}  }
class C{  public static void fill(long[] array,int start,int end,long value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public char next(){  return pos < in.length() ? in.charAt(pos++) : '\0';}  }
class C{  public static void startPermissionFlow(Activity activity){  startPermissionFlow(activity,MESSAGE_RATIONALE);}  }
class C{  public int read(byte b[]) throws IOException {  int nr=in.read(b);  if (nr > 0)   monitor.setProgress(nread+=nr);  if (monitor.isCanceled()) {    InterruptedIOException exc=new InterruptedIOException("progress");    exc.bytesTransferred=nread;    throw exc;  }  return nr;}  }
class C{  public static void calculateAlignedPositions(int allocated,SizeRequirements total,SizeRequirements[] children,int[] offsets,int[] spans,boolean normal){  float totalAlignment=normal ? total.alignment : 1.0f - total.alignment;  int totalAscent=(int)(allocated * totalAlignment);  int totalDescent=allocated - totalAscent;  for (int i=0; i < children.length; i++) {    SizeRequirements req=children[i];    float alignment=normal ? req.alignment : 1.0f - req.alignment;    int maxAscent=(int)(req.maximum * alignment);    int maxDescent=req.maximum - maxAscent;    int ascent=Math.min(totalAscent,maxAscent);    int descent=Math.min(totalDescent,maxDescent);    offsets[i]=totalAscent - ascent;    spans[i]=(int)Math.min((long)ascent + (long)descent,Integer.MAX_VALUE);  }}  }
class C{  protected Frame<V> newFrame(final int nLocals,final int nStack){  return new Frame<V>(nLocals,nStack);}  }
class C{  @org.opends.server.types.PublicAPI(stability=org.opends.server.types.StabilityLevel.PRIVATE,mayInstantiate=false,mayExtend=false,mayInvoke=false) @Override public boolean removeOperationInProgress(int messageID){  return false;}  }
class C{  @WXModuleAnno(moduleMethod=true,runOnUIThread=false) public void moveElement(String ref,String parentRef,Integer index){  if (TextUtils.isEmpty(ref) || TextUtils.isEmpty(parentRef)) {    return;  }  Message msg=Message.obtain();  WXDomTask task=new WXDomTask();  task.instanceId=mWXSDKInstance.getInstanceId();  task.args=new ArrayList<>();  task.args.add(ref);  task.args.add(parentRef);  task.args.add(index);  msg.what=WXDomHandler.MsgType.WX_DOM_MOVE_DOM;  msg.obj=task;  WXSDKManager.getInstance().getWXDomManager().sendMessage(msg);}  }
class C{  public void addRule(Rule rule) throws NameAlreadyExistsException, InvalidNameException {  if (rule.getName() == null) {    rule.setName("rule" + ServiceTypeManager.generateRandomName());  }  if (rules.containsKey(rule.getName())) {    throw (new NameAlreadyExistsException(ResBundleUtils.rbName,"rule_name_already_present",null,rule.getName(),PolicyException.RULE));  } else   if (rules.containsValue(rule)) {    throw (new NameAlreadyExistsException(ResBundleUtils.rbName,"rule_already_present",null,rule.getName(),PolicyException.RULE));  }  rules.put(rule.getName(),rule);}  }
class C{  private PlaLineInt smoothen_sharp_corner(PlaLineIntAlist p_line_arr,int p_no){  PlaPointFloat curr_corner=p_line_arr.get(p_no).intersection_approx(p_line_arr.get(p_no + 1));  if (curr_corner.v_x != (int)curr_corner.v_x) {    PlaLineInt result=smoothen_non_integer_corner(p_line_arr,p_no);{      if (result != null) {        return result;      }    }  }  PlaPointFloat prev_corner=p_line_arr.get(p_no).intersection_approx(p_line_arr.get(p_no - 1));  PlaPointFloat next_corner=p_line_arr.get(p_no + 1).intersection_approx(p_line_arr.get(p_no + 2));  PlaDirection prev_dir=p_line_arr.get(p_no).direction();  PlaDirection next_dir=p_line_arr.get(p_no + 1).direction();  PlaDirection new_line_dir=prev_dir.add(next_dir);  PlaLineInt translate_line=new PlaLineInt(curr_corner.round(),new_line_dir);  double translate_dist=(PlaLimits.sqrt2 - 1) * curr_half_width;  double prev_dist=Math.abs(translate_line.distance_signed(prev_corner));  double next_dist=Math.abs(translate_line.distance_signed(next_corner));  translate_dist=Math.min(translate_dist,prev_dist);  translate_dist=Math.min(translate_dist,next_dist);  if (translate_dist < 0.99) {    return null;  }  translate_dist=Math.max(translate_dist - 1,1);  if (translate_line.side_of(next_corner) == PlaSide.ON_THE_LEFT) {    translate_dist=-translate_dist;  }  PlaLineInt result=translate_line.translate(translate_dist);  r_board.changed_area.join(curr_corner,curr_layer);  return result;}  }
class C{  private void promptIfRequired(UserData uData) throws UserDataException, ClientException {  uData.setQuiet(isQuiet());  uData.setVerbose(isVerbose());  uData.setConnectTimeout(getConnectTimeout());  promptIfRequiredForDirectoryManager(uData);  promptIfRequiredForPortData(uData);  uData.setNewSuffixOptions(promptIfRequiredForImportData(uData));  uData.setSecurityOptions(promptIfRequiredForSecurityData(uData));  uData.setEnableWindowsService(promptIfRequiredForWindowsService());  uData.setStartServer(promptIfRequiredForStartServer());}  }
class C{  public boolean add(ByteString attributeValue){  AttributeValue value=createAttributeValue(attributeDescription,attributeValue);  boolean isNewValue=values.add(value);  if (!isNewValue) {    values.addOrReplace(value);  }  return isNewValue;}  }
class C{  public int lastIndexOf(Object obj){  return this.hlist.lastIndexOf(obj);}  }
class C{  private MessageBytes(){}  }
class C{  public boolean visitVariableOrParamDecl(ElemVariable elem){  return true;}  }
class C{  public StreamSource(Reader reader,String systemId){  setReader(reader);  setSystemId(systemId);}  }
class C{  static String step2Groovy(Step s) throws UnsupportedOperationException {  return object2Groovy(new StringBuilder(),s,false).toString();}  }
class C{  private boolean isSlavoGermanic(final String s){  return s.contains("W") || s.contains("K") || s.contains("CZ")|| s.contains("WITZ");}  }
class C{  public SynthGraphicsUtils(){}  }
class C{  public int currentSegment(double[] coords){  if (isDone()) {    throw new NoSuchElementException("cubic iterator iterator out of bounds");  }  int type;  if (index == 0) {    coords[0]=cubic.getX1();    coords[1]=cubic.getY1();    type=SEG_MOVETO;  } else {    coords[0]=cubic.getCtrlX1();    coords[1]=cubic.getCtrlY1();    coords[2]=cubic.getCtrlX2();    coords[3]=cubic.getCtrlY2();    coords[4]=cubic.getX2();    coords[5]=cubic.getY2();    type=SEG_CUBICTO;  }  if (affine != null) {    affine.transform(coords,0,coords,0,index == 0 ? 1 : 3);  }  return type;}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.CompanyElement createCompanyElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.CompanyElementImpl(value);}  }
class C{  protected void engineUpdate(byte[] input,int offset,int len){  if (input == null) {    throw new IllegalArgumentException("input == null");  }  if (len <= 0) {    return;  }  if (offset < 0) {    throw new ArrayIndexOutOfBoundsException(offset);  }  if (offset > input.length || len > input.length || (len + offset) > input.length) {    throw new IllegalArgumentException();  }  SHA1Impl.updateHash(buffer,input,offset,offset + len - 1);  messageLength+=len;}  }
class C{  public static Bitmap createIconBitmap(String packageName,String resourceName,Context context){  PackageManager packageManager=context.getPackageManager();  try {    Resources resources=packageManager.getResourcesForApplication(packageName);    if (resources != null) {      final int id=resources.getIdentifier(resourceName,null,null);      return createIconBitmap(resources.getDrawableForDensity(id,LauncherAppState.getInstance().getInvariantDeviceProfile().fillResIconDpi),context);    }  } catch (  Exception e) {  }  return null;}  }
class C{  @Override public Foo findByUuid_First(String uuid,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByUuid_First(uuid,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(4);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("uuid=");  msg.append(uuid);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  @Override protected JsonGenerator _createGenerator(Writer out,IOContext ctxt) throws IOException {  return _nonByteTarget();}  }
class C{  @Deprecated public String toString(){  return operation;}  }
class C{  public void traverseFragment(Node pos) throws org.xml.sax.SAXException {  Node top=pos;  while (null != pos) {    startNode(pos);    Node nextNode=pos.getFirstChild();    while (null == nextNode) {      endNode(pos);      if (top.equals(pos))       break;      nextNode=pos.getNextSibling();      if (null == nextNode) {        pos=pos.getParentNode();        if ((null == pos) || (top.equals(pos))) {          if (null != pos)           endNode(pos);          nextNode=null;          break;        }      }    }    pos=nextNode;  }}  }
class C{  public static GenericExtendedResult unmodifiableGenericExtendedResult(final GenericExtendedResult result){  if (result instanceof UnmodifiableGenericExtendedResultImpl) {    return result;  }  return new UnmodifiableGenericExtendedResultImpl(result);}  }
class C{  public NameFileFilter(List<String> names,IOCase caseSensitivity){  if (names == null) {    throw new IllegalArgumentException("The list of names must not be null");  }  this.names=names.toArray(new String[names.size()]);  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  protected Object convertStringToType(String value,String valueType){  if ("java.lang.String".equals(valueType))   return value;  Object convertValue=value;  if ("java.lang.Integer".equals(valueType) || "int".equals(valueType)) {    try {      convertValue=Integer.valueOf(value);    } catch (    NumberFormatException ex) {      if (isEcho())       handleErrorOutput("Unable to convert to integer:" + value);    }  } else   if ("java.lang.Long".equals(valueType) || "long".equals(valueType)) {    try {      convertValue=Long.valueOf(value);    } catch (    NumberFormatException ex) {      if (isEcho())       handleErrorOutput("Unable to convert to long:" + value);    }  } else   if ("java.lang.Boolean".equals(valueType) || "boolean".equals(valueType)) {    convertValue=Boolean.valueOf(value);  } else   if ("java.lang.Float".equals(valueType) || "float".equals(valueType)) {    try {      convertValue=Float.valueOf(value);    } catch (    NumberFormatException ex) {      if (isEcho())       handleErrorOutput("Unable to convert to float:" + value);    }  } else   if ("java.lang.Double".equals(valueType) || "double".equals(valueType)) {    try {      convertValue=Double.valueOf(value);    } catch (    NumberFormatException ex) {      if (isEcho())       handleErrorOutput("Unable to convert to double:" + value);    }  } else   if ("javax.management.ObjectName".equals(valueType) || "name".equals(valueType)) {    try {      convertValue=new ObjectName(value);    } catch (    MalformedObjectNameException e) {      if (isEcho())       handleErrorOutput("Unable to convert to ObjectName:" + value);    }  } else   if ("java.net.InetAddress".equals(valueType)) {    try {      convertValue=InetAddress.getByName(value);    } catch (    UnknownHostException exc) {      if (isEcho())       handleErrorOutput("Unable to resolve host name:" + value);    }  }  return convertValue;}  }
class C{  public final void endDocument() throws org.xml.sax.SAXException {  flushPending();  if (m_doIndent && !m_isprevtext) {    try {      outputLineSep();    } catch (    IOException e) {      throw new SAXException(e);    }  }  flushWriter();  if (m_tracer != null)   super.fireEndDoc();}  }
class C{  public MemoryImageSource(int w,int h,ColorModel cm,byte[] pix,int off,int scan){  initialize(w,h,cm,(Object)pix,off,scan,null);}  }
class C{  public final Promise<ResourceResponse,ResourceException> log(ConfigAuditState configAuditState,Request request,Context context,ConnectionFactory connectionFactory){  try {    final AuditEvent auditEvent=ConfigAuditEventBuilder.configEvent().operationFromCrestRequest(request).userId(getUserId(context)).runAs(getUserId(context)).transactionIdFromContext(context).revision(configAuditState.getRevision()).timestamp(System.currentTimeMillis()).objectId(configAuditState.getId()).eventName(CONFIG_AUDIT_EVENT_NAME).before(configAuditState.getBefore()).after(configAuditState.getAfter()).changedFields(getChangedFields(configAuditState.getBefore(),configAuditState.getAfter(),request.getRequestType())).toEvent();    return connectionFactory.getConnection().create(context,Requests.newCreateRequest(AUDIT_CONFIG_REST_PATH,auditEvent.getValue())).asPromise();  } catch (  ResourceException e) {    LOGGER.error("had trouble logging audit event for config changes.",e);    return e.asPromise();  }catch (  Exception e) {    LOGGER.error("had trouble logging audit event for config changes.",e);    return new InternalServerErrorException(e.getMessage(),e).asPromise();  }}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  if (options == null) {    options=new String[0];  }}  }
class C{  protected void close(Connection dbConnection){  if (dbConnection == null)   return;  try {    preparedSizeSql.close();  } catch (  Throwable f) {    ExceptionUtils.handleThrowable(f);  }  this.preparedSizeSql=null;  try {    preparedSaveSql.close();  } catch (  Throwable f) {    ExceptionUtils.handleThrowable(f);  }  this.preparedSaveSql=null;  try {    preparedClearSql.close();  } catch (  Throwable f) {    ExceptionUtils.handleThrowable(f);  }  try {    preparedRemoveSql.close();  } catch (  Throwable f) {    ExceptionUtils.handleThrowable(f);  }  this.preparedRemoveSql=null;  try {    preparedLoadSql.close();  } catch (  Throwable f) {    ExceptionUtils.handleThrowable(f);  }  this.preparedLoadSql=null;  try {    if (!dbConnection.getAutoCommit()) {      dbConnection.commit();    }  } catch (  SQLException e) {    manager.getContext().getLogger().error(sm.getString(getStoreName() + ".commitSQLException"),e);  }  try {    dbConnection.close();  } catch (  SQLException e) {    manager.getContext().getLogger().error(sm.getString(getStoreName() + ".close",e.toString()));  } finally {    this.dbConnection=null;  }}  }
class C{  private void stretchViewVertically(View view,int crossSize){  LayoutParams lp=(LayoutParams)view.getLayoutParams();  int newHeight=crossSize - lp.topMargin - lp.bottomMargin;  newHeight=Math.max(newHeight,0);  view.measure(MeasureSpec.makeMeasureSpec(view.getMeasuredWidth(),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(newHeight,MeasureSpec.EXACTLY));}  }
class C{  public SpinnerNumberModel(Number value,Comparable minimum,Comparable maximum,Number stepSize){  if ((value == null) || (stepSize == null)) {    throw new IllegalArgumentException("value and stepSize must be non-null");  }  if (!(((minimum == null) || (minimum.compareTo(value) <= 0)) && ((maximum == null) || (maximum.compareTo(value) >= 0)))) {    throw new IllegalArgumentException("(minimum <= value <= maximum) is false");  }  this.value=value;  this.minimum=minimum;  this.maximum=maximum;  this.stepSize=stepSize;}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.PasswordType createPasswordType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.PasswordTypeImpl();}  }
class C{  @Override public void onTokenDeleted(Context context){}  }
class C{  public LinkedHashMapEntry(final String... ldifLines){  this(Requests.newAddRequest(ldifLines));}  }
class C{  @Override public String toString(){  return "(" + exp1 + ") between ("+ exp2+ ") and ("+ exp3+ ")";}  }
class C{  public void signXML() throws SAMLException {  throw new SAMLException(FSUtils.BUNDLE_NAME,"unsupportedOperation",null);}  }
class C{  public SNMPInetAddressAcl(SNMPConnectionHandlerCfg configuration){  super();  this.currentConfig=configuration;  SortedSet<String> tmp=this.currentConfig.getAllowedManager();  if (tmp.contains(ALL_MANAGERS_ALLOWED)) {    this.allManagers=true;  }  this.hostsList=new HashSet<InetAddress>();  for (  String dest : tmp) {    try {      this.hostsList.add(InetAddress.getByName(dest));    } catch (    UnknownHostException ignore) {    }  }  this.trapsDestinations=this.currentConfig.getTrapsDestination();  this.communities=this.currentConfig.getCommunity();  this.trapsCommunity=this.currentConfig.getTrapsCommunity();}  }
class C{  public boolean writeToURI(Node nodeArg,String uri) throws LSException {  if (nodeArg == null) {    return false;  }  Serializer serializer=fXMLSerializer;  serializer.reset();  if (nodeArg != fVisitedNode) {    String xmlVersion=getXMLVersion(nodeArg);    fEncoding=getInputEncoding(nodeArg);    if (fEncoding == null) {      fEncoding=fEncoding != null ? fEncoding : getXMLEncoding(nodeArg) == null ? "UTF-8" : getXMLEncoding(nodeArg);    }    serializer.getOutputFormat().setProperty("version",xmlVersion);    fDOMConfigProperties.setProperty(DOMConstants.S_XERCES_PROPERTIES_NS + DOMConstants.S_XML_VERSION,xmlVersion);    fDOMConfigProperties.setProperty(DOMConstants.S_XSL_OUTPUT_ENCODING,fEncoding);    if ((nodeArg.getNodeType() != Node.DOCUMENT_NODE || nodeArg.getNodeType() != Node.ELEMENT_NODE || nodeArg.getNodeType() != Node.ENTITY_NODE) && ((fFeatures & XMLDECL) != 0)) {      fDOMConfigProperties.setProperty(DOMConstants.S_XSL_OUTPUT_OMIT_XML_DECL,DOMConstants.DOM3_DEFAULT_FALSE);    }    fVisitedNode=nodeArg;  }  fXMLSerializer.setOutputFormat(fDOMConfigProperties);  try {    if (uri == null) {      String msg=Utils.messages.createMessage(MsgKey.ER_NO_OUTPUT_SPECIFIED,null);      if (fDOMErrorHandler != null) {        fDOMErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_NO_OUTPUT_SPECIFIED));      }      throw new LSException(LSException.SERIALIZE_ERR,msg);    } else {      String absoluteURI=SystemIDResolver.getAbsoluteURI(uri);      URL url=new URL(absoluteURI);      OutputStream urlOutStream=null;      String protocol=url.getProtocol();      String host=url.getHost();      if (protocol.equalsIgnoreCase("file") && (host == null || host.length() == 0 || host.equals("localhost"))) {        urlOutStream=new FileOutputStream(getPathWithoutEscapes(url.getPath()));      } else {        URLConnection urlCon=url.openConnection();        urlCon.setDoInput(false);        urlCon.setDoOutput(true);        urlCon.setUseCaches(false);        urlCon.setAllowUserInteraction(false);        if (urlCon instanceof HttpURLConnection) {          HttpURLConnection httpCon=(HttpURLConnection)urlCon;          httpCon.setRequestMethod("PUT");        }        urlOutStream=urlCon.getOutputStream();      }      serializer.setOutputStream(urlOutStream);    }    if (fDOMSerializer == null) {      fDOMSerializer=(DOM3Serializer)serializer.asDOM3Serializer();    }    if (fDOMErrorHandler != null) {      fDOMSerializer.setErrorHandler(fDOMErrorHandler);    }    if (fSerializerFilter != null) {      fDOMSerializer.setNodeFilter(fSerializerFilter);    }    fDOMSerializer.setNewLine(fEndOfLine.toCharArray());    fDOMSerializer.serializeDOM3(nodeArg);  } catch (  LSException lse) {    throw lse;  }catch (  RuntimeException e) {    throw (LSException)createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();  }catch (  Exception e) {    if (fDOMErrorHandler != null) {      fDOMErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,e.getMessage(),null,e));    }    throw (LSException)createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();  }  return true;}  }
class C{  public int next(){  _currentNode=(_currentNode == DTM.NULL) ? DTM.NULL : _nextsib(_currentNode);  return returnNode(makeNodeHandle(_currentNode));}  }
class C{  public boolean visitBinaryOperation(ExpressionOwner owner,Operation op){  return true;}  }
class C{  public Location zero(){  x=0;  y=0;  z=0;  return this;}  }
class C{  void parse(String templateFilename,List<LocalizableMessage> warnings) throws IOException, DecodeException {  try (BufferedReader templateReader=getReader(templateFilename)){    if (templateReader == null) {      throw DecodeException.fatalError(ERR_ENTRY_GENERATOR_COULD_NOT_FIND_TEMPLATE_FILE.get(templateFilename));    }    if (resourcePath == null) {      final File file=getFile(templateFilename);      if (file != null) {        resourcePath=file.getCanonicalFile().getParentFile().getAbsolutePath();      }    }    final List<String> fileLines=readLines(templateReader);    final String[] lines=fileLines.toArray(new String[fileLines.size()]);    parse(lines,warnings);  } }  }
class C{  public static Throwable unwrapInvocationTargetException(Throwable t){  if (t instanceof InvocationTargetException && t.getCause() != null) {    return t.getCause();  }  return t;}  }
class C{  public void replaceURI(String uri){  if ((namingTable != null) && !namingTable.isEmpty()) {    Hashtable newNamingTable=new Hashtable();    Enumeration e=namingTable.keys();    while (e.hasMoreElements()) {      String name=e.nextElement().toString();      String value=namingTable.get(name).toString();      if (value.indexOf("%uri") != -1) {        value=value.replaceAll("%uri",uri);      } else {        try {          Integer.parseInt(name);          int li=value.lastIndexOf(uri);          if (li != -1 && value.endsWith(uri)) {            value=value.substring(0,li);          }        } catch (        NumberFormatException ex) {        }      }      newNamingTable.put(name,value);    }    namingTable=newNamingTable;  }}  }
class C{  @Override public boolean hasMembers(){  if (getNext() != null)   return getNext().hasMembers(); else   return false;}  }
class C{  public static Attribute create(AttributeType attributeType,ByteString value){  return create(attributeType,attributeType.getNameOrOID(),value);}  }
class C{  protected void uninstallKeyboardActions(){  SwingUtilities.replaceUIInputMap(comboBox,JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,null);  SwingUtilities.replaceUIActionMap(comboBox,null);}  }
class C{  public AWTPermission(String name){  super(name);}  }
class C{  public BrdFromSide calc_from_side(ShapeTile p_shape,PlaPointInt p_shape_center,int p_layer,int p_offset,int p_cl_class){  NetNosList empty_arr=NetNosList.EMPTY;  ShapeTile offset_shape=p_shape.offset(p_offset);  for (int index=0; index < offset_shape.border_line_count(); ++index) {    ShapeTile check_shape=calc_check_chape_for_from_side(p_shape,p_shape_center,offset_shape.border_line(index));    if (r_board.check_trace(check_shape,p_layer,empty_arr,p_cl_class,null)) {      return new BrdFromSide(index,null);    }  }  for (int index=0; index < offset_shape.border_line_count(); ++index) {    ShapeTile check_shape=calc_check_chape_for_from_side(p_shape,p_shape_center,offset_shape.border_line(index));    if (r_board.check_trace(check_shape,p_layer,empty_arr,0,null)) {      return new BrdFromSide(index,null);    }  }  return BrdFromSide.NOT_CALCULATED;}  }
class C{  public final void testSetSeedbyteArray01(){  try {    sr.setSeed(null);    fail("setSeed(null) :: No NullPointerException");  } catch (  NullPointerException e) {  }}  }
class C{  @NonNull public static Interpolator dilate(Interpolator interpolator,Interpolator dilation){  return new DilateInterpolator(interpolator,dilation);}  }
class C{  public boolean isAttributeSpecified(int attributeHandle){  return false;}  }
class C{  public static int bitCount(int i){  i-=(i >> 1) & 0x55555555;  i=(i & 0x33333333) + ((i >> 2) & 0x33333333);  i=((i >> 4) + i) & 0x0F0F0F0F;  i+=i >> 8;  i+=i >> 16;  return i & 0x0000003F;}  }
class C{  protected void Expr() throws javax.xml.transform.TransformerException {  OrExpr();}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) protected void addRequestContextInCustomRequestScope(R requestContext){  Key key=Key.get(new TypeLiteral<IRequestContext<?>>(){  });  getSpincastRequestScope().seed(key,requestContext);  key=Key.get(getRequestContextType());  getSpincastRequestScope().seed(key,requestContext);}  }
class C{  public boolean equals(Object obj){  if (obj == null) {    return false;  }  TabularType other;  try {    other=(TabularType)obj;  } catch (  ClassCastException e) {    return false;  }  if (!this.getTypeName().equals(other.getTypeName())) {    return false;  }  if (!this.rowType.equals(other.rowType)) {    return false;  }  if (!this.indexNames.equals(other.indexNames)) {    return false;  }  return true;}  }
class C{  public String createHttpsConnector(String parent,String address,int port) throws Exception {  return createConnector(parent,address,port,false,true);}  }
class C{  public synchronized Object clone(){  try {    Hashtable<?,?> t=(Hashtable<?,?>)super.clone();    t.table=new Entry<?,?>[table.length];    for (int i=table.length; i-- > 0; ) {      t.table[i]=(table[i] != null) ? (Entry<?,?>)table[i].clone() : null;    }    t.keySet=null;    t.entrySet=null;    t.values=null;    t.modCount=0;    return t;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public SubjectLocality(org.w3c.dom.Element localityElement) throws SAMLException {  Element elt=(Element)localityElement;  String eltName=elt.getLocalName();  if (eltName == null) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("SubjectLocality: local name " + "missing");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  if (!(eltName.equals("SubjectLocality")))   throw new SAMLException("invalidElement");  String read=elt.getAttribute("IPAddress");  if ((read != null) && (read.length() != 0)) {    _ipAddress=read;  }  read=elt.getAttribute("DNSAddress");  if ((read != null) && (read.length() != 0)) {    _dnsAddress=read;  }}  }
class C{  public void handleTblDataActionHrefRequest(RequestInvocationEvent event){  String name=hexToString((String)getDisplayFieldValue(TBL_DATA_ACTION_HREF));  setPageSessionAttribute(DelegationPropertiesViewBean.CURRENT_IDENTITY,name);  DelegationPropertiesViewBean vb=(DelegationPropertiesViewBean)getViewBean(DelegationPropertiesViewBean.class);  unlockPageTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public Policy(String policyName,String description,boolean referralPolicy) throws InvalidNameException {  this(policyName,description,referralPolicy,true);}  }
class C{  public static boolean isValidFQDNRequest(String hostName){  if (utilDebug.messageEnabled()) {    utilDebug.message("hostName is : " + hostName);  }  boolean retVal=FqdnValidator.getInstance().isHostnameValid(hostName);  if (utilDebug.messageEnabled()) {    if (retVal) {      utilDebug.message("hostname  and fqdnDefault match returning true");    } else {      utilDebug.message("hostname and fqdnDefault don't match");    }    utilDebug.message("retVal is : " + retVal);  }  return retVal;}  }
class C{  private void checkPermission(final String name,final Node configNode,final ServiceConfig permissionsConfig) throws SMSException, SSOException {  final ServiceConfig permissionConfig=permissionsConfig.getSubConfig(name);  if (permissionConfig == null) {    newPermissions.add(ChangeSet.newInstance(name,configNode));  }}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  @Override protected Object createSsoServerAuthSvcMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  if (server != null)   authSvcGroup=new SsoServerAuthSvcImpl(this,server); else   authSvcGroup=new SsoServerAuthSvcImpl(this);  return authSvcGroup;}  }
class C{  final void loadText(Segment segment,int p0,int p1){  try {    Document doc=getDocument();    doc.getText(p0,p1 - p0,segment);  } catch (  BadLocationException bl) {    throw new StateInvariantError("Can't get line text");  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"SAVED_STORY\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"IMAGE\" TEXT,"+ "\"TITLE\" TEXT,"+ "\"DATE\" TEXT,"+ "\"POSITION\" INTEGER);");}  }
class C{  public void enableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glEnableVertexAttribArray(location);}  }
class C{  @Override public void storeData(StreamingQuote quote){  if (conn != null && quote instanceof StreamingQuoteModeLtp) {    StreamingQuoteModeLtp quoteModeLtp=(StreamingQuoteModeLtp)quote;    try {      String sql="INSERT INTO " + quoteTable + " "+ "(Time, InstrumentToken, LastTradedPrice) "+ "values(?,?,?)";      PreparedStatement prepStmt=conn.prepareStatement(sql);      prepStmt.setString(1,quoteModeLtp.getTime());      prepStmt.setString(2,quoteModeLtp.getInstrumentToken());      prepStmt.setBigDecimal(3,quoteModeLtp.getLtp());      prepStmt.executeUpdate();      prepStmt.close();    } catch (    SQLException e) {      System.out.println("StreamingQuoteDAOModeLtp.storeData(): ERROR: SQLException on Storing data to Table: " + quote);      System.out.println("StreamingQuoteDAOModeLtp.storeData(): [SQLException Cause]: " + e.getMessage());    }  } else {    if (conn != null) {      System.out.println("StreamingQuoteDAOModeLtp.storeData(): ERROR: DB conn is null !!!");    } else {      System.out.println("StreamingQuoteDAOModeLtp.storeData(): ERROR: quote is not of type StreamingQuoteModeLtp !!!");    }  }}  }
class C{  InvalidClientAuthZHeaderException(final String message,final String challengeScheme,final String challengeRealm){  super(401,"invalid_client",message);  this.challengeScheme=challengeScheme;  this.challengeRealm=challengeRealm;}  }
class C{  static HijrahDate ofEpochDay(HijrahChronology chrono,long epochDay){  return new HijrahDate(chrono,epochDay);}  }
class C{  HistoricalAttributeValue(String strVal){  String[] token=strVal.split(":",4);  attrDesc=AttributeDescription.valueOf(token[0]);  attrString=toLowerCase(attrDesc.getNameOrOID());  attrTypeIsNull=attrString.equalsIgnoreCase("dn");  isModDN=attrTypeIsNull && token.length >= 3 && token[2].compareTo("moddn") == 0;  csn=new CSN(token[1]);  histKey=HistAttrModificationKey.decodeKey(token[2]);  if (histKey != ATTRDEL) {    if (token.length == 4) {      stringValue=token[3];      attributeValue=ByteString.valueOfUtf8(stringValue);    } else {      stringValue=null;      attributeValue=null;    }  } else {    stringValue=null;    attributeValue=null;  }}  }
class C{  public PasswordPolicyException(ResultCode resultCode,String errorCode,Object... args){  super(IdRepoBundle.BUNDLE_NAME,errorCode,String.valueOf(resultCode.intValue()),args);}  }
class C{  @Override public void initialize(MessagePolicy requestPolicy,MessagePolicy responsePolicy,CallbackHandler handler,Map<String,Object> options) throws AuthenticationException {  JsonValue properties=json(options);  authenticationIdAttribute=properties.get(AUTHENTICATION_ID).required().asString();}  }
class C{  private static final boolean updateWidget(AppWidgetManager appWidgetManager,Context context,int widgetId,boolean updateFull){  final WidgetSetting settings=SettingStorage.getSettingForWidget(context,widgetId);  if (updateFull) {    appWidgetManager.updateAppWidget(widgetId,getRemoteView(context,settings,false,widgetId));  } else {    appWidgetManager.partiallyUpdateAppWidget(widgetId,settings.rvFactory.getFastRemoteView(context,settings,false));  }  return settings.batteryEnabled;}  }
class C{  private BufferStrategy createBufferStrategy(){  Container root=getRoot();  if (root == null) {    return null;  }  BufferStrategy bs=null;  if (SwingUtilities3.isVsyncRequested(root)) {    bs=createBufferStrategy(root,true);    if (LOGGER.isLoggable(PlatformLogger.Level.FINER)) {      LOGGER.finer("createBufferStrategy: using vsynced strategy");    }  }  if (bs == null) {    bs=createBufferStrategy(root,false);  }  if (!(bs instanceof SubRegionShowable)) {    bs=null;  }  return bs;}  }
class C{  public void initializeArguments() throws ArgumentException {  hostNameArg=hostNameArgument(UserData.getDefaultHostName());  addArgument(hostNameArg);  portArg=portArgument(getDefaultAdministrationPort(),INFO_DESCRIPTION_ADMIN_PORT.get());  addArgument(portArg);  bindDnArg=bindDNArgument(getDefaultBindDN());  addArgument(bindDnArg);  bindPasswordArg=bindPasswordArgument();  addArgument(bindPasswordArg);  bindPasswordFileArg=bindPasswordFileArgument();  addArgument(bindPasswordFileArg);  trustAllArg=trustAllArgument();  addArgument(trustAllArg);  remoteArg=remoteArgument();  addArgument(remoteArg);  connectTimeoutArg=connectTimeOutArgument();  addArgument(connectTimeoutArg);  showUsageArg=showUsageArgument();  addArgument(showUsageArg);  setUsageArgument(showUsageArg);}  }
class C{  public Builder removeAllOptionalAttributes(){  this.optionalAttributeOIDs.clear();  return this;}  }
class C{  public static int mainCLI(String[] args,OutputStream outStream,OutputStream errStream){  PrintStream out=NullOutputStream.wrapOrNullStream(outStream);  PrintStream err=NullOutputStream.wrapOrNullStream(errStream);  JDKLogging.disableLogging();  try {    ControlPanelLog.initLogFileHandler(File.createTempFile(LOG_FILE_PREFIX,LOG_FILE_SUFFIX));    ControlPanelLog.initPackage("org.opends.server.tools.status");  } catch (  Throwable t) {    System.err.println("Unable to initialize log");    t.printStackTrace();  }  final StatusCli statusCli=new StatusCli(out,err);  int retCode=statusCli.execute(args);  if (retCode == 0) {    ControlPanelLog.closeAndDeleteLogFile();  }  return retCode;}  }
class C{  public boolean isSticky(){  return (getData() & 8) == 8;}  }
class C{  public void closeSubpath(){  Subpath lastSubpath=getLastSubpath();  lastSubpath.setClosed(true);  Point startPoint=lastSubpath.getStartPoint();  moveTo((float)startPoint.getX(),(float)startPoint.getY());}  }
class C{  public ArgumentParser(final String mainClassName,final LocalizableMessage toolDescription,final boolean longArgumentsCaseSensitive,final boolean allowsTrailingArguments,final int minTrailingArguments,final int maxTrailingArguments,final String trailingArgsDisplayName){  this.mainClassName=mainClassName;  this.toolDescription=toolDescription;  this.longArgumentsCaseSensitive=longArgumentsCaseSensitive;  this.allowsTrailingArguments=allowsTrailingArguments;  this.minTrailingArguments=minTrailingArguments;  this.maxTrailingArguments=maxTrailingArguments;  this.trailingArgsDisplayName=trailingArgsDisplayName;  initGroups();}  }
class C{  @Inject public PooledTaskExecutor(Provider<SimpleTaskExecutor> simpleTaskExecutorProvider,@Named(DataLayerConstants.DATA_LAYER_DEBUG) Debug debug,ConnectionType connectionType,ConnectionConfigFactory connectionConfig,@Named(SEMAPHORE) Semaphore semaphore){  this.simpleTaskExecutorProvider=simpleTaskExecutorProvider;  this.debug=debug;  this.semaphore=semaphore;  this.maximumPoolSize=connectionConfig.getConfig(connectionType).getMaxConnections();  if (maximumPoolSize < 1) {    throw new IllegalStateException("No connections allocated for " + connectionType);  }  if (maximumPoolSize != semaphore.availablePermits()) {    throw new IllegalArgumentException("Configuration error - mismatch in pool sizes");  }}  }
class C{  private void activateSecurityConfigurators(ComponentContext context,HttpContext httpContext){  for (  SecurityConfigurator configurator : securityConfigurators) {    configurator.activate(httpService,httpContext,context);    logger.info("Activated security configurator {}",configurator.getClass().getName());  }}  }
class C{  public void resetPassword(String uuid,String realm,Map map) throws PWResetException {  populateLockoutValues(realm);  PWResetAccountLockout pwResetLockout=new PWResetAccountLockout(this);  try {    localeContext.setOrgLocale(realm);    AMIdentity user=IdUtils.getIdentity(getSSOToken(),uuid);    sendAttemptEmail(user);    if (isUserAnswersCorrect(map,user,realm)) {      pwResetLockout.removeUserLockoutEntry(uuid);      String password=getPasswordResetValue(realm,user);      if (password != null && password.length() > 0) {        NotifyPassword passwordNotify=getNotifyPassword(realm);        if (passwordNotify != null) {          changePassword(user,password,passwordNotify,uuid,realm);          writeLog("pwResetSuccess.message",uuid);        } else {          errorMsg=getLocalizedString("passResetError.message");        }      } else {        errorMsg=getLocalizedString("passResetError.message");      }    } else {      pwResetLockout.invalidAnswer(user);      if (!isLockoutWarning(pwResetLockout,uuid)) {        errorMsg=getLocalizedString("wrongAnswer.message");      }    }  } catch (  SSOException e) {    debug.warning("PWResetQuestionModelImpl.resetPassword",e);    errorMsg=getErrorString(e);  }catch (  IdRepoException e) {    debug.warning("PWResetQuestionModelImpl.resetPassword",e);    errorMsg=getErrorString(e);  }  if ((errorMsg != null) && (errorMsg.length() > 0)) {    writeLog("pwResetFail.message",errorMsg,uuid);    throw new PWResetException(errorMsg);  } else   if ((informationMsg != null) && (informationMsg.length() > 0)) {    writeLog("pwResetFail.message",uuid);    throw new PWResetException(informationMsg);  }}  }
class C{  public void addColumnModelListener(TableColumnModelListener x){  listenerList.add(TableColumnModelListener.class,x);}  }
class C{  public Set searchUsers(String wildcard,int level) throws AMException, SSOException {  return searchUsers(wildcard,null,level);}  }
class C{  private void clearCookieAndDestroySession(AuthContextLocal ac){  if (AuthUtils.isCookieSupported(ac)) {    clearCookie(AuthUtils.getAuthCookieName());  }  AuthUtils.destroySession(ac);}  }
class C{  public static DeleteRequest newDeleteRequest(final DN name){  Reject.ifNull(name);  return new DeleteRequestImpl(name);}  }
class C{  public CredentialNotFoundException(String msg){  super(msg);}  }
class C{  public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  @Override public boolean isSortAscending(){  return sortAscending;}  }
class C{  public final void printUnprintable(String value){  if (value == null)   return;  byte[] byteVal=value.getBytes();  int letti=byteVal.length;  StringBuffer risul=new StringBuffer(letti * 2);  for (int index=0; index < letti; index++) {    byte ch=byteVal[index];    if (ch < ' ' || ch > 'z')     risul.append("(" + ch + ")");    risul.append((char)ch);  }  print(risul.toString());}  }
class C{  void repositionCursor(int offset,int direction){  getFormattedTextField().getCaret().setDot(getNextCursorPosition(offset,direction));}  }
class C{  public com.sun.identity.liberty.ws.idpp.plugin.jaxb.PPISExtensionType createPPISExtensionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.plugin.jaxb.impl.PPISExtensionTypeImpl();}  }
class C{  public ArrayDeque(Collection<? extends E> c){  allocateElements(c.size());  addAll(c);}  }
class C{  public SaltedSHA512FieldStorageScheme() throws Exception {  super(SHA512_LENGTH,ALGORITHM_SHA_512);}  }
class C{  private static boolean findStringIgnoreCase(byte[] bytes,int searchStartIndex,String searchString){  if ((bytes.length - searchStartIndex) < searchString.length()) {    return false;  }  for (int i=0; i < searchString.length(); i++) {    char c=searchString.charAt(i);    byte b=bytes[i + searchStartIndex];    if (b != c && b != Character.toUpperCase(c)) {      return false;    }  }  return true;}  }
class C{  public static Foo findByField2_First(boolean field2,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByField2_First(field2,orderByComparator);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.LLegalNameElement createLLegalNameElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LLegalNameElementImpl();}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public void resetLockoutAttempts(String userDN,AMIdentity amIdentity,AccountLockoutInfo acInfo,boolean resetDuration){  debug.message("entering ISAccountLockout.resetLockoutAttempts");  if (debug.messageEnabled()) {    debug.message("ISAccountLockout.resetLockoutAttempts:: " + "resetDuration =" + resetDuration);  }  int fail_count=0;  long lastFailTime=0;  long locked_out_at=0;  long actualLockoutDuration=failureLockoutDuration;  long currentLockoutDuration=acInfo.getActualLockoutDuration();  if (acInfo != null) {    fail_count=acInfo.getFailCount();    lastFailTime=acInfo.getLastFailTime();    locked_out_at=acInfo.getLockoutAt();    long now=currentTimeMillis();    if (!resetDuration) {      actualLockoutDuration=currentLockoutDuration;      if (debug.messageEnabled()) {        debug.message("ISAccountLockout.resetLockoutAttempts::" + "Locked out At =" + locked_out_at);      }      if (locked_out_at > 0) {        if (debug.messageEnabled()) {          debug.message("ISAccountLockout.resetLockoutAttempts::" + " Using the multiplier");        }        actualLockoutDuration=failureLockoutMultiplier * (currentLockoutDuration);      }    }  }  if (storeInvalidAttemptsInDS) {    try {      if ((fail_count != 0) || (lastFailTime != 0) || (locked_out_at != 0)|| (actualLockoutDuration != currentLockoutDuration)) {        Map attrMap=new HashMap();        Set invalidAttempts=new HashSet();        String invalidXML=createInvalidAttemptsXML(0,0,0,actualLockoutDuration);        invalidAttempts.add(invalidXML);        attrMap.put(invalidAttemptsDataAttrName,invalidAttempts);        setLockoutObjectClass(amIdentity);        amIdentity.setAttributes(attrMap);        debug.message("Saving XML = " + invalidXML);        amIdentity.store();      }      debug.message("ISAccountLockout::resetLockoutAttempts done");    } catch (    Exception exp) {      debug.message("error reseting Lockout Attempts");    }  }  acInfo.setFailCount(0);  acInfo.setLastFailTime(0);  acInfo.setLockoutAt(0);  acInfo.setLockout(false);  acInfo.setActualLockoutDuration(actualLockoutDuration);}  }
class C{  public static String toHexString(byte[] array){  if (array == null) {    return null;  }  if (array.length == 0) {    return "[]";  }  StringBuilder sb=new StringBuilder();  sb.append('[');  sb.append(String.format("%02x",array[0] & 0xff));  for (int i=1; i < array.length; i++) {    sb.append(", ");    sb.append(String.format("%02x",array[i] & 0xff));  }  sb.append(']');  return sb.toString();}  }
class C{  private E dequeue(){  Node<E> h=head;  Node<E> first=h.next;  h.next=h;  head=first;  E x=first.item;  first.item=null;  return x;}  }
class C{  @DataProvider(name="illegalLongLimitData") Object[][] createIllegalLongLimitData(){  return new Object[][]{{-1L,0L,true},{0L,-1L,false},{2L,1L,true},{2L,1L,false}};}  }
class C{  static DynamicMBean createMBean(Group group) throws Exception {  String mname=createManagedName(group);  ManagedBean managed=registry.findManagedBean(mname);  if (managed == null) {    Exception e=new Exception("ManagedBean is not found with " + mname);    throw new MBeanException(e);  }  String domain=managed.getDomain();  if (domain == null)   domain=mserver.getDefaultDomain();  DynamicMBean mbean=managed.createMBean(group);  ObjectName oname=createObjectName(domain,group);  if (mserver.isRegistered(oname)) {    mserver.unregisterMBean(oname);  }  mserver.registerMBean(mbean,oname);  return (mbean);}  }
class C{  public W3CEndpointReferenceBuilder address(String address){  this.address=address;  return this;}  }
class C{  public void addExtension(ASN1ObjectIdentifier oid,boolean critical,ASN1Encodable value){  try {    this.addExtension(oid,critical,value.toASN1Primitive().getEncoded(ASN1Encoding.DER));  } catch (  IOException e) {    throw new IllegalArgumentException("error encoding value: " + e);  }}  }
class C{  public void connectionFailed(){  deallocate(true,false,true);}  }
class C{  protected static Long convertStringToBuckectingLong(String stringToBeConverted){  if (stringToBeConverted == null || stringToBeConverted.equals("")) {    return null;  }  byte[] byteString=stringToBeConverted.getBytes();  if (byteString.length < 8) {    byte[] newByteString=new byte[8];    for (int i=0; i < newByteString.length; i++) {      if (i < byteString.length) {        newByteString[i]=byteString[i];      } else {        newByteString[i]=0;      }    }    byteString=newByteString;  }  ByteBuffer bb=ByteBuffer.wrap(byteString);  long byteMethod=bb.getLong();  byteMethod=Math.abs(byteMethod);  return byteMethod;}  }
class C{  void writeNormalizedChars(final char ch[],final int start,final int length,final boolean useLineSep) throws IOException, org.xml.sax.SAXException {  final String encoding=getEncoding();  final java.io.Writer writer=m_writer;  final int end=start + length;  final char S_LINEFEED=CharInfo.S_LINEFEED;  for (int i=start; i < end; i++) {    final char c=ch[i];    if (S_LINEFEED == c && useLineSep) {      writer.write(m_lineSep,0,m_lineSepLen);    } else     if (m_encodingInfo.isInEncoding(c)) {      writer.write(c);    } else     if (Encodings.isHighUTF16Surrogate(c)) {      final int codePoint=writeUTF16Surrogate(c,ch,i,end);      if (codePoint != 0) {        final String integralValue=Integer.toString(codePoint);        final String msg=Utils.messages.createMessage(MsgKey.ER_ILLEGAL_CHARACTER,new Object[]{integralValue,encoding});        System.err.println(msg);      }      i++;    } else {      if (encoding != null) {        writer.write('&');        writer.write('#');        writer.write(Integer.toString(c));        writer.write(';');        final String integralValue=Integer.toString(c);        final String msg=Utils.messages.createMessage(MsgKey.ER_ILLEGAL_CHARACTER,new Object[]{integralValue,encoding});        System.err.println(msg);      } else {        writer.write(c);      }    }  }}  }
class C{  public void read(ByteBuffer byteBuffer) throws InvalidFrameException, InvalidDataTypeException {  String identifier=readIdentifier(byteBuffer);  if (!isValidID3v2FrameIdentifier(identifier)) {    logger.config(getLoggingFilename() + ":" + "Invalid identifier:"+ identifier);    byteBuffer.position(byteBuffer.position() - (getFrameIdSize() - 1));    throw new InvalidFrameIdentifierException(getLoggingFilename() + ":" + identifier+ ":is not a valid ID3v2.30 frame");  }  getFrameSize(byteBuffer);  statusFlags=new StatusFlags(byteBuffer.get());  encodingFlags=new EncodingFlags(byteBuffer.get());  int extraHeaderBytesCount=0;  int dataLengthSize=-1;  if (((EncodingFlags)encodingFlags).isGrouping()) {    extraHeaderBytesCount=ID3v24Frame.FRAME_GROUPING_INDICATOR_SIZE;    groupIdentifier=byteBuffer.get();  }  if (((EncodingFlags)encodingFlags).isEncryption()) {    extraHeaderBytesCount+=ID3v24Frame.FRAME_ENCRYPTION_INDICATOR_SIZE;    encryptionMethod=byteBuffer.get();  }  if (((EncodingFlags)encodingFlags).isDataLengthIndicator()) {    dataLengthSize=ID3SyncSafeInteger.bufferToValue(byteBuffer);    extraHeaderBytesCount+=FRAME_DATA_LENGTH_SIZE;    logger.config(getLoggingFilename() + ":" + "Frame Size Is:"+ frameSize+ " Data Length Size:"+ dataLengthSize);  }  int realFrameSize=frameSize - extraHeaderBytesCount;  ByteBuffer frameBodyBuffer=byteBuffer.slice();  frameBodyBuffer.limit(realFrameSize);  int syncSize=realFrameSize;  if (((EncodingFlags)encodingFlags).isUnsynchronised()) {    frameBodyBuffer=ID3Unsynchronization.synchronize(frameBodyBuffer);    syncSize=frameBodyBuffer.limit();    logger.config(getLoggingFilename() + ":" + "Frame Size After Syncing is:"+ syncSize);  }  try {    if (((EncodingFlags)encodingFlags).isCompression()) {      frameBodyBuffer=ID3Compression.uncompress(identifier,getLoggingFilename(),byteBuffer,dataLengthSize,realFrameSize);      if (((EncodingFlags)encodingFlags).isEncryption()) {        frameBody=readEncryptedBody(identifier,frameBodyBuffer,dataLengthSize);      } else {        frameBody=readBody(identifier,frameBodyBuffer,dataLengthSize);      }    } else     if (((EncodingFlags)encodingFlags).isEncryption()) {      frameBodyBuffer=byteBuffer.slice();      frameBodyBuffer.limit(realFrameSize);      frameBody=readEncryptedBody(identifier,byteBuffer,frameSize);    } else {      frameBody=readBody(identifier,frameBodyBuffer,syncSize);    }    if (!(frameBody instanceof ID3v24FrameBody)) {      logger.config(getLoggingFilename() + ":" + "Converted frame body with:"+ identifier+ " to deprecated framebody");      frameBody=new FrameBodyDeprecated((AbstractID3v2FrameBody)frameBody);    }  }  finally {    byteBuffer.position(byteBuffer.position() + realFrameSize);  }}  }
class C{  public MonitorMsg(int sender,int destination){  this.senderID=sender;  this.destination=destination;}  }
class C{  @Override public Writer append(char value){  builder.append(value);  return this;}  }
class C{  protected void requireLogin(RoutingContext context,BiConsumer<RoutingContext,JsonObject> biHandler){  Optional<JsonObject> principal=Optional.ofNullable(context.request().getHeader("user-principal")).map(null);  if (principal.isPresent()) {    biHandler.accept(context,principal.get());  } else {    context.response().setStatusCode(401).end(new JsonObject().put("message","need_auth").encode());  }}  }
class C{  public ConfigDeleteListenerAdaptor(ServerManagementContext serverContext,ManagedObjectPath<?,?> path,OptionalRelationDefinition<?,S> relation,ServerManagedObjectDeleteListener<S> listener){  this.serverContext=serverContext;  this.path=path;  this.optionalRelation=relation;  this.instantiableRelation=null;  this.setRelation=null;  this.listener=listener;  this.cachedManagedObject=null;}  }
class C{  private void writeBaseDNContents(ServerDescriptor desc){  LocalizableMessage title=INFO_DATABASES_TITLE.get();  if (!isScriptFriendly()) {    println(centerTitle(title));  }  Set<BaseDNDescriptor> replicas=new HashSet<>();  Set<BackendDescriptor> bs=desc.getBackends();  for (  BackendDescriptor backend : bs) {    if (!backend.isConfigBackend()) {      replicas.addAll(backend.getBaseDns());    }  }  if (replicas.isEmpty()) {    if (desc.getStatus() == ServerDescriptor.ServerStatus.STARTED) {      if (!desc.isAuthenticated()) {        println(INFO_NOT_AVAILABLE_AUTHENTICATION_REQUIRED_CLI_LABEL.get());      } else {        println(INFO_NO_DBS_FOUND.get());      }    } else {      println(INFO_NO_DBS_FOUND.get());    }  } else {    BaseDNTableModel baseDNTableModel=new BaseDNTableModel(true,false);    baseDNTableModel.setData(replicas,desc.getStatus(),desc.isAuthenticated());    writeBaseDNTableModel(baseDNTableModel,desc);  }}  }
class C{  public BufferedBlockCipher(BlockCipher cipher){  this.cipher=cipher;  buf=new byte[cipher.getBlockSize()];  bufOff=0;  String name=cipher.getAlgorithmName();  int idx=name.indexOf('/') + 1;  pgpCFB=(idx > 0 && name.startsWith("PGP",idx));  if (pgpCFB) {    partialBlockOkay=true;  } else {    partialBlockOkay=(idx > 0 && (name.startsWith("CFB",idx) || name.startsWith("OFB",idx) || name.startsWith("OpenPGP",idx)|| name.startsWith("SIC",idx)|| name.startsWith("GCTR",idx)));  }}  }
class C{  public void saveDeviceProfile(@Nonnull String user,@Nonnull String realm,@Nonnull PushDeviceSettings deviceSettings) throws AuthLoginException {  Reject.ifNull(user,realm,deviceSettings);  try {    devicesDao.saveDeviceProfiles(user,realm,jsonUtils.toJsonValues(Collections.singletonList(deviceSettings)));  } catch (  IOException e) {    debug.error("Pusher.createDeviceProfile(): Unable to save device profile for user {} in realm {}",user,realm,e);    throw new AuthLoginException(e);  }}  }
class C{  public boolean hasResourceNames(){  boolean hasResources=false;  Collection actionSchemas=getActionSchemas().values();  Iterator iter=actionSchemas.iterator();  while (iter.hasNext()) {    ActionSchema actionSchema=(ActionSchema)iter.next();    if (actionSchema.requiresResourceName()) {      hasResources=true;      break;    }  }  return hasResources;}  }
class C{  @Override public int read(byte[] b) throws IOException {  return read(b,0,b.length);}  }
class C{  void appendEndElement(){  if (previousSiblingWasParent)   nodes.writeEntry(previousSibling,2,NULL);  previousSibling=currentParent;  nodes.readSlot(currentParent,gotslot);  currentParent=gotslot[1] & 0xFFFF;  previousSiblingWasParent=true;}  }
class C{  public DSMLCompareOperation(LDAPConnection connection){  this.connection=connection;}  }
class C{  public final <T>T readValidatedInput(final LocalizableMessage prompt,final ValidationCallback<T> validator,final int maxTries) throws ClientException {  int nTries=0;  while (nTries < maxTries) {    final String response=readLineOfInput(prompt);    final T value=validator.validate(this,response);    if (value != null) {      return value;    }    nTries++;  }  throw new ClientException(ReturnCode.ERROR_USER_DATA,ERR_TRIES_LIMIT_REACHED.get(maxTries));}  }
class C{  private CompletionStage<Done> prepareWriteOffset(CassandraSession session){  return session.prepare("INSERT INTO cargo_offset (partition, offset) VALUES (1, ?)").thenApply(null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatareplacedatabegining.class,args);}  }
class C{  @NonNull public final Agera takeUntil(@NonNull Condition condition){  return new AgeraTakeUntilCondition(this,condition);}  }
class C{  public static EmbeddedDirectoryServer manageEmbeddedDirectoryServer(ConfigParameters configParams,ConnectionParameters connParams,OutputStream out,OutputStream err){  return new EmbeddedDirectoryServer(configParams,connParams,out,err);}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  return toXMLString(includeNS,declareNS,false);}  }
class C{  public void handleTblButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {  CCActionTable table=(CCActionTable)getChild(TBL_SEARCH);  table.restoreStateData();  Integer[] selected=tblModel.getSelectedRows();  Set names=new HashSet(selected.length * 2);  SerializedField szCache=(SerializedField)getChild(SZ_CACHE);  List cache=(List)szCache.getSerializedObj();  for (int i=0; i < selected.length; i++) {    names.add((String)cache.get(selected[i].intValue()));  }  try {    EntitiesModel model=(EntitiesModel)getModel();    String curRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);    String idType=(String)getPageSessionAttribute(PG_SESSION_ENTITY_TYPE);    model.deleteEntities(curRealm,names);    if (selected.length == 1) {      Object[] param={model.getLocalizedString(idType)};      String msg=model.getLocalizedString("entities.message.deleted");      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information",MessageFormat.format(msg,param));    } else {      Object[] param={model.getLocalizedString(idType)};      String msg=model.getLocalizedString("entities.message.deleted.pural");      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information",MessageFormat.format(msg,param));    }  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  public SimplexOctaveGenerator(long seed,int octaves){  this(new Random(seed),octaves);}  }
class C{  public R visitSize(SizePropertyDefinition pd,P p){  return visitUnknown(pd,p);}  }
class C{  public MBeanException(java.lang.Exception e){  super();  exception=e;}  }
class C{  public AccessibleAttributeSequence(int start,int end,AttributeSet attr){  startIndex=start;  endIndex=end;  attributes=attr;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeprocessinginstructionnodevalue.class,args);}  }
class C{  public JobGroupWrapper(JsonValue map){  name=map.get("name").asString();  if (map.get("paused").isNotNull()) {    paused=map.get("paused").asBoolean();  }  if (map.get("jobs").isNotNull()) {    jobs=map.get("jobs").asList(String.class);  } else {    jobs=new ArrayList<>();  }  revision=map.get("_rev").asString();}  }
class C{  public void prepend(NSString s){  prepend(s.getContent());}  }
class C{  @Override public boolean equals(Object obj){  if (!super.equals(obj)) {    return false;  }  if (!getClass().equals(obj.getClass())) {    return false;  }  NotCondition object=(NotCondition)obj;  if (eCondition == null) {    if (object.eCondition != null) {      return false;    }  } else {    if (!eCondition.equals(object.eCondition)) {      return false;    }  }  if (pConditionName == null) {    if (object.pConditionName != null) {      return false;    }  } else {    if (!pConditionName.equals(object.pConditionName)) {      return false;    }  }  return true;}  }
class C{  public static boolean isECLEnabledDomain(DN baseDN){  waitForStartup();  final LDAPReplicationDomain domain=domains.get(baseDN);  return domain != null && domain.isECLEnabled();}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  forwardTo();}  }
class C{  private void simulateEntryChange(Entry newEntry,ConfigurationRepository configRepository){  ArgumentCaptor<ConfigChangeListener> registeredListener=ArgumentCaptor.forClass(ConfigChangeListener.class);  verify(configRepository).registerChangeListener(eq(newEntry.getName()),registeredListener.capture());  registeredListener.getValue().configChangeIsAcceptable(newEntry,new LocalizableMessageBuilder());}  }
class C{  protected void initializeRequestContext(RequestContext requestContext){  super.initializeRequestContext(requestContext);  ViewBeanManager viewBeanManager=new ViewBeanManager(requestContext,PACKAGE_NAME);  ((RequestContextImpl)requestContext).setViewBeanManager(viewBeanManager);}  }
class C{  public double noise(double x,double y,double z,double w){  x+=offsetX;  y+=offsetY;  z+=offsetZ;  w+=offsetW;  double n0, n1, n2, n3, n4;  double s=(x + y + z+ w) * F4;  int i=floor(x + s);  int j=floor(y + s);  int k=floor(z + s);  int l=floor(w + s);  double t=(i + j + k+ l) * G4;  double X0=i - t;  double Y0=j - t;  double Z0=k - t;  double W0=l - t;  double x0=x - X0;  double y0=y - Y0;  double z0=z - Z0;  double w0=w - W0;  int c1=(x0 > y0) ? 32 : 0;  int c2=(x0 > z0) ? 16 : 0;  int c3=(y0 > z0) ? 8 : 0;  int c4=(x0 > w0) ? 4 : 0;  int c5=(y0 > w0) ? 2 : 0;  int c6=(z0 > w0) ? 1 : 0;  int c=c1 + c2 + c3+ c4+ c5+ c6;  int i1, j1, k1, l1;  int i2, j2, k2, l2;  int i3, j3, k3, l3;  i1=simplex[c][0] >= 3 ? 1 : 0;  j1=simplex[c][1] >= 3 ? 1 : 0;  k1=simplex[c][2] >= 3 ? 1 : 0;  l1=simplex[c][3] >= 3 ? 1 : 0;  i2=simplex[c][0] >= 2 ? 1 : 0;  j2=simplex[c][1] >= 2 ? 1 : 0;  k2=simplex[c][2] >= 2 ? 1 : 0;  l2=simplex[c][3] >= 2 ? 1 : 0;  i3=simplex[c][0] >= 1 ? 1 : 0;  j3=simplex[c][1] >= 1 ? 1 : 0;  k3=simplex[c][2] >= 1 ? 1 : 0;  l3=simplex[c][3] >= 1 ? 1 : 0;  double x1=x0 - i1 + G4;  double y1=y0 - j1 + G4;  double z1=z0 - k1 + G4;  double w1=w0 - l1 + G4;  double x2=x0 - i2 + G42;  double y2=y0 - j2 + G42;  double z2=z0 - k2 + G42;  double w2=w0 - l2 + G42;  double x3=x0 - i3 + G43;  double y3=y0 - j3 + G43;  double z3=z0 - k3 + G43;  double w3=w0 - l3 + G43;  double x4=x0 + G44;  double y4=y0 + G44;  double z4=z0 + G44;  double w4=w0 + G44;  int ii=i & 255;  int jj=j & 255;  int kk=k & 255;  int ll=l & 255;  int gi0=perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;  int gi1=perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;  int gi2=perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;  int gi3=perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;  int gi4=perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32;  double t0=0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;  if (t0 < 0) {    n0=0.0;  } else {    t0*=t0;    n0=t0 * t0 * dot(grad4[gi0],x0,y0,z0,w0);  }  double t1=0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;  if (t1 < 0) {    n1=0.0;  } else {    t1*=t1;    n1=t1 * t1 * dot(grad4[gi1],x1,y1,z1,w1);  }  double t2=0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;  if (t2 < 0) {    n2=0.0;  } else {    t2*=t2;    n2=t2 * t2 * dot(grad4[gi2],x2,y2,z2,w2);  }  double t3=0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;  if (t3 < 0) {    n3=0.0;  } else {    t3*=t3;    n3=t3 * t3 * dot(grad4[gi3],x3,y3,z3,w3);  }  double t4=0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;  if (t4 < 0) {    n4=0.0;  } else {    t4*=t4;    n4=t4 * t4 * dot(grad4[gi4],x4,y4,z4,w4);  }  return 27.0 * (n0 + n1 + n2+ n3+ n4);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodecommentnodetype.class,args);}  }
class C{  public BAD_INV_ORDER(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  private int readAnnotationTarget(final Context context,int u){  int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:    target&=0xFFFF0000;  u+=2;break;case 0x13:case 0x14:case 0x15:target&=0xFF000000;u+=1;break;case 0x40:case 0x41:{target&=0xFF000000;int n=readUnsignedShort(u + 1);context.start=new Label[n];context.end=new Label[n];context.index=new int[n];u+=3;for (int i=0; i < n; ++i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);context.start[i]=readLabel(start,context.labels);context.end[i]=readLabel(start + length,context.labels);context.index[i]=readUnsignedShort(u + 4);u+=6;}break;}case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:target&=0xFF0000FF;u+=4;break;default :target&=(target >>> 24) < 0x43 ? 0xFFFFFF00 : 0xFF000000;u+=3;break;}int pathLength=readByte(u);context.typeRef=target;context.typePath=pathLength == 0 ? null : new TypePath(b,u);return u + 1 + 2 * pathLength;}  }
class C{  public static void generateProxyResponse(HttpServletRequest request,HttpServletResponse response,PrintWriter out,String metaAlias,ResponseInfo respInfo,Object newSession,SAML2EventLogger auditor) throws SAML2Exception {  Response saml2Resp=respInfo.getResponse();  String requestID=saml2Resp.getInResponseTo();  String nameidFormat=getNameIDFormat(saml2Resp);  if (nameidFormat != null && SAML2Utils.debug.messageEnabled()) {    SAML2Utils.debug.message("NAME ID Format= " + nameidFormat);  }  request.setAttribute(SAML2Constants.SAML_PROXY_IDP_RESPONSE_KEY,saml2Resp);  sendProxyResponse(request,response,out,requestID,metaAlias,newSession,nameidFormat,auditor);}  }
class C{  public void mouseDragged(MouseEvent e){  JMenu menu=(JMenu)menuItem;  if (!menu.isEnabled())   return;  MenuSelectionManager.defaultManager().processMouseEvent(e);}  }
class C{  public boolean equals(Object obj){  if (obj == null)   return false;  if (!(obj instanceof FieldPosition))   return false;  FieldPosition other=(FieldPosition)obj;  if (attribute == null) {    if (other.attribute != null) {      return false;    }  } else   if (!attribute.equals(other.attribute)) {    return false;  }  return (beginIndex == other.beginIndex && endIndex == other.endIndex && field == other.field);}  }
class C{  @SuppressWarnings("unchecked") public static void addExtraEncoding(String name,IExtraEncoding enc){synchronized (extraEncodings) {    extraEncodings.put(name.toLowerCase(),enc);  }}  }
class C{  public static int d(String tag,String msg,Throwable tr){  return Log.d(tag,msg,tr);}  }
class C{  public boolean isMemberOf(IMembership im) throws UMSException {  return im.hasMember(getGuid());}  }
class C{  private boolean isBoundAs(DN dn,ConnectionWithControls conn){  final DN bindDN=conn.getConnectionWrapper().getBindDn();  boolean isBoundAs=dn.equals(bindDN);  if (!isBoundAs) {    String attrName=ATTR_ROOTDN_ALTERNATE_BIND_DN;    Filter filter=Filter.valueOf("(|(objectClass=*)(objectclass=ldapsubentry))");    SearchRequest request=newSearchRequest(dn,BASE_OBJECT,filter,attrName);    try (ConnectionEntryReader entries=conn.search(request)){      while (entries.hasNext()) {        SearchResultEntry sr=entries.readEntry();        return asSetOfDN(sr,attrName).contains(bindDN);      }    } catch (    Throwable t) {    }  }  return isBoundAs;}  }
class C{  public NameFileFilter(String[] names,IOCase caseSensitivity){  if (names == null) {    throw new IllegalArgumentException("The array of names must not be null");  }  this.names=new String[names.length];  System.arraycopy(names,0,this.names,0,names.length);  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public Class<?> loadTagFile() throws JasperException {  try {    if (ctxt.isRemoved()) {      throw new FileNotFoundException(jspUri);    }    if (options.getDevelopment() || firstTime) {synchronized (this) {        firstTime=false;        ctxt.compile();      }    } else {      if (compileException != null) {        throw compileException;      }    }    if (reload) {      tagHandlerClass=ctxt.load();      reload=false;    }  } catch (  FileNotFoundException ex) {    throw new JasperException(ex);  }  return tagHandlerClass;}  }
class C{  protected boolean isIgnoredProfile(String realm){  return SAML2PluginsUtils.isIgnoredProfile(realm);}  }
class C{  public static boolean isInvalid(int c){  return !isValid(c);}  }
class C{  public void processNewStatus(DataServerHandler senderHandler,ChangeStatusMsg csMsg){  if (logger.isTraceEnabled()) {    debug("receiving ChangeStatusMsg from " + senderHandler.getServerId() + ":\n"+ csMsg);  }  try {    lock();  } catch (  InterruptedException ex) {    Thread.currentThread().interrupt();    return;  }  try {    ServerStatus newStatus=senderHandler.processNewStatus(csMsg);    if (newStatus == ServerStatus.INVALID_STATUS) {      return;    }    enqueueTopoInfoToAllExcept(senderHandler);    logger.info(NOTE_DIRECTORY_SERVER_CHANGED_STATUS,senderHandler.getServerId(),baseDN,newStatus);  } catch (  Exception e) {    logger.error(LocalizableMessage.raw(stackTraceToSingleLineString(e)));  } finally {    release();  }}  }
class C{  public static boolean isEqualTo(String s1,String s2){  return CollectionUtils.genericCompare(s1,s2);}  }
class C{  public boolean isDocOrdered(){  return false;}  }
class C{  public void test_Password(){  String prompt="promptTest";  char[] psw1="testPassword".toCharArray();  char[] psw2="newPassword".toCharArray();  PasswordCallback pc=new PasswordCallback(prompt,true);  try {    assertNull(pc.getPassword());    pc.setPassword(psw1);    assertEquals(psw1.length,pc.getPassword().length);    pc.setPassword(null);    assertNull(pc.getPassword());    pc.setPassword(psw2);    char[] res=pc.getPassword();    assertEquals(psw2.length,res.length);    for (int i=0; i < res.length; i++) {      assertEquals("Incorrect password was returned",psw2[i],res[i]);    }    pc.clearPassword();    res=pc.getPassword();    if (res.equals(psw2)) {      fail("Incorrect password was returned after clear");    }    pc.setPassword(psw1);    res=pc.getPassword();    assertEquals(psw1.length,res.length);    for (int i=0; i < res.length; i++) {      assertEquals("Incorrect result",psw1[i],res[i]);    }  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }}  }
class C{  public static int resetPreOperationCount(){  return preOperationCounter.getAndSet(0);}  }
class C{  public void testField(){  checkPublicKey cPK=new checkPublicKey();  assertEquals("Incorrect serialVersionUID",cPK.getSerVerUID(),7187392471159151072L);}  }
class C{  public boolean isEmpty(){  return fields.size() <= 1;}  }
class C{  public void testAddMathContextDiffScalePosNeg(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=15;  String b="747233429293018787918347987234564568";  int bScale=-10;  String c="7.47233429416141E+45";  int cScale=-31;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  MathContext mc=new MathContext(15,RoundingMode.CEILING);  BigDecimal result=aNumber.add(bNumber,mc);  assertEquals("incorrect value",c,c.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public String dn(final String template,final Object... attributeValues){  return DN.format(template,attributeValues).toString();}  }
class C{  public byte[] toByteArray(){  char[] src=key.toCharArray();  byte[] dest=new byte[2 * src.length];  int j=0;  for (int i=0; i < src.length; i++) {    dest[j++]=(byte)(src[i] >>> 8);    dest[j++]=(byte)(src[i] & 0x00ff);  }  return dest;}  }
class C{  public boolean isExpired(){  return jwt.getClaimsSet().getExpirationTime().getTime() <= (timeService.now() - SKEW_ALLOWANCE);}  }
class C{  public C create() throws DataLayerException {  boolean success=false;  try {    C response=connectionFactory.create();    success=true;    return response;  }  finally {    monitorStore.addConnection(success);  }}  }
class C{  public IPSigninRequest(HttpServletRequest request,HttpServletResponse response,String whr,String wtrealm,String wct,String wctx,String wreply){  super(request,response);  this.whr=whr;  this.wtrealm=wtrealm;  this.wct=wct;  this.wctx=wctx;  this.wreply=wreply;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNodeNS05.class,args);}  }
class C{  public BaseAttributeFilter(String name){  super();  if (name != null)   addAttribute(name);}  }
class C{  final static boolean isIgnorable(int order){  return ((primaryOrder(order) == 0) ? true : false);}  }
class C{  private void startCameraActivity(){  try {    String IMGS_PATH=Environment.getExternalStorageDirectory().toString() + "/TesseractSample/imgs";    prepareDirectory(IMGS_PATH);    String img_path=IMGS_PATH + "/ocr.jpg";    outputFileUri=Uri.fromFile(new File(img_path));    final Intent takePictureIntent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);    takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT,outputFileUri);    if (takePictureIntent.resolveActivity(getPackageManager()) != null) {      startActivityForResult(takePictureIntent,PHOTO_REQUEST_CODE);    }  } catch (  Exception e) {    Log.e(TAG,e.getMessage());  }}  }
class C{  private static void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);  String key=preference.getKey();  Object value=Pref.getInstance(preference.getContext()).getValue(key);  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,value);}  }
class C{  public List() throws HeadlessException {  this(0,false);}  }
class C{  public BarcodeInter25(PdfDocument document){  super(document);  try {    x=0.8f;    n=2;    font=PdfFontFactory.createFont(FontConstants.HELVETICA,PdfEncodings.WINANSI);    size=8;    baseline=size;    barHeight=size * 3;    textAlignment=ALIGN_CENTER;    generateChecksum=false;    checksumText=false;  } catch (  Exception e) {    throw new PdfException(e);  }}  }
class C{  public static ConnectionFactory newRootConnectionFactory(){  InternalClientConnection icc=InternalClientConnection.getRootConnection();  return newConnectionFactory(icc);}  }
class C{  public void addLayoutComponent(Component comp,Object constraints){  if ((constraints == null) || (constraints instanceof String)) {    addLayoutComponent((String)constraints,comp);  } else {    throw new IllegalArgumentException("cannot add to layout: " + "constraint must be a " + "string (or null)");  }}  }
class C{  public void paintMenuItemBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private boolean checkHasCameraOrNot(Context context){  return context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA);}  }
class C{  public DialogDoesNotExistException(String message){  super(message);}  }
class C{  private void checkValueType(CompositeData value){  if (value == null) {    throw new NullPointerException("Argument value cannot be null.");  }  if (!tabularType.getRowType().isValue(value)) {    throw new InvalidOpenTypeException("Argument value's composite type [" + value.getCompositeType() + "] is not assignable to "+ "this TabularData instance's row type ["+ tabularType.getRowType()+ "].");  }}  }
class C{  static void redirectAuthentication(HttpServletRequest request,HttpServletResponse response,AuthnRequest authnReq,String reqID,String realm,String idpEntityID,String spEntityID) throws SAML2Exception, IOException {  String classMethod="IDPSSOUtil.redirectAuthentication: ";  StringBuffer newURL=new StringBuffer(IDPSSOUtil.getAuthenticationServiceURL(realm,idpEntityID,request));  if (spEntityID != null) {    if (newURL.indexOf("?") == -1) {      newURL.append("?");    } else {      newURL.append("&");    }    newURL.append(SAML2Constants.SPENTITYID);    newURL.append("=");    newURL.append(URLEncDec.encode(spEntityID));  }  IDPAuthnContextMapper idpAuthnContextMapper=getIDPAuthnContextMapper(realm,idpEntityID);  IDPAuthnContextInfo info=idpAuthnContextMapper.getIDPAuthnContextInfo(authnReq,idpEntityID,realm);  Set authnTypeAndValues=info.getAuthnTypeAndValues();  if ((authnTypeAndValues != null) && (!authnTypeAndValues.isEmpty())) {    Iterator iter=authnTypeAndValues.iterator();    StringBuffer authSB=new StringBuffer((String)iter.next());    while (iter.hasNext()) {      authSB.append("&");      authSB.append((String)iter.next());    }    if (newURL.indexOf("?") == -1) {      newURL.append("?");    } else {      newURL.append("&");    }    newURL.append(authSB.toString());    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message(classMethod + "authString=" + authSB.toString());    }  }  if (newURL.indexOf("?") == -1) {    newURL.append("?goto=");  } else {    newURL.append("&goto=");  }  String gotoURL=request.getRequestURL().toString();  String gotoQuery=request.getQueryString();  if (gotoQuery != null) {    gotoURL+="?" + gotoQuery + "&"+ REDIRECTED_TRUE;  } else {    gotoURL+="?" + REDIRECTED_TRUE;  }  if (reqID != null) {    gotoURL+="&ReqID=" + reqID;  }  if (SAML2Utils.debug.messageEnabled()) {    SAML2Utils.debug.message(classMethod + "gotoURL=" + gotoURL);  }  newURL.append(URLEncDec.encode(gotoURL));  if (SAML2Utils.debug.messageEnabled()) {    SAML2Utils.debug.message(classMethod + "New URL for authentication: " + newURL.toString());  }  response.sendRedirect(newURL.toString());  return;}  }
class C{  protected RuntimeException manageInterruptedException(Exception ex){  Thread.currentThread().interrupt();  return new RuntimeException(ex.getMessage(),ex);}  }
class C{  public static boolean isClassLoaderBound(){  ClassLoader cl=Thread.currentThread().getContextClassLoader();  do {    if (clBindings.containsKey(cl)) {      return true;    }  } while ((cl=cl.getParent()) != null);  return false;}  }
class C{  public String toXMLString() throws XACMLException {  return toXMLString(true,false);}  }
class C{  public static SearchRequest newSearchRequest(final String name,final SearchScope scope,final String filter,final String... attributeDescriptions){  Reject.ifNull(name,scope,filter);  final SearchRequest request=new SearchRequestImpl(DN.valueOf(name),scope,Filter.valueOf(filter));  for (  final String attributeDescription : attributeDescriptions) {    request.addAttribute(attributeDescription);  }  return request;}  }
class C{  public Builder(String uri,boolean alignBaseline){  this.uri=uri;  if (uri == null) {    throw new NullPointerException("Attempt to create a DraweeSpan with null uri string!");  }  if (alignBaseline) {    this.verticalAlignment=ALIGN_BASELINE;  }}  }
class C{  public SIPIfMatchParser(String etag){  super(etag);}  }
class C{  public JspWriterImpl(ServletResponse response,int sz,boolean autoFlush){  super(sz,autoFlush);  if (sz < 0)   throw new IllegalArgumentException("Buffer size <= 0");  this.response=response;  cb=sz == 0 ? null : new char[sz];  nextChar=0;}  }
class C{  public void check(){  if (log.isDebugEnabled())   log.debug(sm.getString("warWatcher.checkingWars",watchDir));  File[] list=watchDir.listFiles(new WarFilter());  if (list == null) {    log.warn(sm.getString("warWatcher.cantListWatchDir",watchDir));    list=new File[0];  }  for (int i=0; i < list.length; i++) {    if (!list[i].exists())     log.warn(sm.getString("warWatcher.listedFileDoesNotExist",list[i],watchDir));    addWarInfo(list[i]);  }  for (Iterator<Map.Entry<String,WarInfo>> i=currentStatus.entrySet().iterator(); i.hasNext(); ) {    Map.Entry<String,WarInfo> entry=i.next();    WarInfo info=entry.getValue();    if (log.isTraceEnabled())     log.trace(sm.getString("warWatcher.checkingWar",info.getWar()));    int check=info.check();    if (check == 1) {      listener.fileModified(info.getWar());    } else     if (check == -1) {      listener.fileRemoved(info.getWar());      i.remove();    }    if (log.isTraceEnabled())     log.trace(sm.getString("warWatcher.checkWarResult",Integer.valueOf(check),info.getWar()));  }}  }
class C{  public boolean isLetterOrDigitAhead(){  int pos=currentPosition;  while (pos < maxPosition) {    if (Character.isLetterOrDigit(str.charAt(pos)))     return true;    pos++;  }  return false;}  }
class C{  private void stopTimer(){  if (taskId != -1) {    plugin.getServer().getScheduler().cancelTask(taskId);    taskId=-1;  }}  }
class C{  public WriterProperties useDebugMode(){  this.debugMode=true;  return this;}  }
class C{  public TerminationActionAttribute(int action){  super(OctetUtils.toOctets(AttributeType.TERMINATION_ACTION,action));  this.action=action;}  }
class C{  public BufferedOutputStream(OutputStream out,int size){  super(out);  if (size <= 0) {    throw new IllegalArgumentException("Buffer size <= 0");  }  buf=new byte[size];}  }
class C{  private void encodeValue(ByteSequence str,StringBuilder buffer){  if (StaticUtils.needsBase64Encoding(str)) {    buffer.append(": ");    buffer.append(Base64.encode(str));  } else {    buffer.append(" ");    buffer.append(str.toString());  }}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  if (null != m_args) {    for (int i=0; i < m_args.length; i++) {      m_args[i].fixupVariables(vars,globalsSize);    }  }}  }
class C{  public StoreDescription findDescription(Class<?> aClass){  return findDescription(aClass.getName());}  }
class C{  static Class lookUpFactoryClass(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  String factoryClassName=lookUpFactoryClassName(factoryId,propertiesFilename,fallbackClassName);  ClassLoader cl=findClassLoader();  if (factoryClassName == null) {    factoryClassName=fallbackClassName;  }  try {    Class providerClass=findProviderClass(factoryClassName,cl,true);    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return providerClass;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + factoryClassName + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + factoryClassName + " could not be instantiated: "+ x,x);  }}  }
class C{  protected void reconcileIDs() throws SAXException {  if (!validateID)   return;  for (Iterator itr=IDREFs.entrySet().iterator(); itr.hasNext(); ) {    Map.Entry e=(Map.Entry)itr.next();    if (IDs.contains(e.getKey()))     continue;    ValidatableObject source=(ValidatableObject)e.getValue();    reportEvent(source,new NotIdentifiableEventImpl(ValidationEvent.ERROR,Messages.format(Messages.ID_NOT_FOUND,e.getKey()),new ValidationEventLocatorImpl(source)));  }  IDREFs.clear();}  }
class C{  public final int readInt() throws IOException {  int ch1=in.read();  int ch2=in.read();  int ch3=in.read();  int ch4=in.read();  if ((ch1 | ch2 | ch3| ch4) < 0)   throw new EOFException();  return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8)+ (ch4 << 0));}  }
class C{  FormSubmitEvent(Object source,EventType type,URL targetURL,Element sourceElement,String targetFrame,MethodType method,String data){  super(source,type,targetURL,sourceElement,targetFrame);  this.method=method;  this.data=data;}  }
class C{  public PlaLineInt rotate_90_deg(int p_factor,PlaPointInt p_pole){  PlaPointInt new_a=point_a.rotate_90_deg(p_factor,p_pole);  PlaPointInt new_b=point_b.rotate_90_deg(p_factor,p_pole);  return new PlaLineInt(new_a,new_b);}  }
class C{  public AuthXMLRequest parseXML() throws AuthException {  try {    debug.message("entering parseXML");    if (xmlDocument == null) {      return null;    }    authXMLRequest=new AuthXMLRequest();    Element docElem=xmlDocument.getDocumentElement();    if (docElem != null) {      String temp=docElem.getAttribute("version");      if (debug.messageEnabled()) {        debug.message("Request Version is.. : " + temp);      }      if (temp != null) {        authXMLRequest.setRequestVersion(temp);      }      Node requestNode=XMLUtils.getChildNode((Node)docElem,"Request");      String authIdentifier=null;      if (requestNode != null) {        authIdentifier=parseNodeAttributes(requestNode,"authIdentifier");        if (debug.messageEnabled()) {          debug.message("AuthIdentifier is : " + authIdentifier);        }        authXMLRequest.setAuthIdentifier(authIdentifier);      }      Node appSSOTokenNode=XMLUtils.getChildNode((Node)requestNode,"AppSSOToken");      if (appSSOTokenNode != null) {        debug.message("Got the SSO Token node: ");        String appSSOTokenID=XMLUtils.getValueOfValueNode(appSSOTokenNode);        if (appSSOTokenID != null) {          if (debug.messageEnabled()) {            debug.message("Got the Session Id: " + appSSOTokenID);          }          authXMLRequest.setAppSSOTokenID(appSSOTokenID);        }      }      Node newAuthContextNode=XMLUtils.getChildNode(requestNode,"NewAuthContext");      if (newAuthContextNode != null) {        String orgName=parseNodeAttributes(newAuthContextNode,"orgName");        authXMLRequest.setOrgName(orgName);        authXMLRequest.setRequestType(AuthXMLRequest.NewAuthContext);        AuthContextLocal authContext=AuthUtils.getAuthContext(orgName,authIdentifier,false,servletReq,null,null);        authXMLRequest.setAuthContext(authContext);      }      Node queryInfoNode=XMLUtils.getChildNode(requestNode,"QueryInformation");      if (queryInfoNode != null) {        String queryType=parseNodeAttributes(queryInfoNode,"requestedInformation");        authXMLRequest.setRequestInformation(queryType);        authXMLRequest.setRequestType(AuthXMLRequest.QueryInformation);        String orgName=parseNodeAttributes(queryInfoNode,"orgName");        AuthContextLocal authContext=null;        if (orgName != null) {          authContext=AuthUtils.getAuthContext(orgName,servletReq);        } else {          authContext=AuthUtils.getAuthContext(null,authIdentifier,false);        }        authXMLRequest.setAuthContext(authContext);      }      Node loginNode=XMLUtils.getChildNode(requestNode,"Login");      if (loginNode != null) {        debug.message("found login node !!");        String orgName=parseNodeAttributes(loginNode,"orgName");        authXMLRequest.setRequestType(AuthXMLRequest.Login);        parseLoginNodeElements(loginNode,authXMLRequest);        AuthContext.IndexType indexType=authXMLRequest.getIndexType();        String indexTypeParam=convertIndexType(indexType);        String indexName=authXMLRequest.getIndexName();        if (indexType == AuthContext.IndexType.COMPOSITE_ADVICE) {          orgName=AuthUtils.getRealmFromPolicyAdvice(indexName);        }        AuthContextLocal authContext=null;        if (orgName != null) {          authXMLRequest.setOrgName(orgName);        }        String hostName=parseNodeAttributes(loginNode,"hostName");        if (hostName != null) {          authXMLRequest.setHostName(hostName);        }        String localeAttr=parseNodeAttributes(loginNode,AuthXMLTags.LOCALE);        if (localeAttr != null) {          authXMLRequest.setLocale(localeAttr);        }        String forceAuth=parseNodeAttributes(loginNode,"forceAuth");        if (forceAuth != null) {          authXMLRequest.setForceAuth(forceAuth);          if (debug.messageEnabled()) {            debug.message("AuthXMLRequestParser.parseXML: " + "Got the force auth flag: " + forceAuth);          }        }        boolean forceAuthBool=Boolean.parseBoolean(forceAuth);        authContext=AuthUtils.getAuthContext(orgName,authIdentifier,false,servletReq,indexTypeParam,authXMLRequest,forceAuthBool);        authXMLRequest.setAuthContext(authContext);        if (localeAttr != null) {          LoginState loginState=authContext.getLoginState();          loginState.setRemoteLocale(localeAttr);        }        HttpServletRequest clientRequest=AuthXMLUtils.getRemoteRequest(XMLUtils.getChildNode(requestNode,AuthXMLTags.REMOTE_REQUEST_RESPONSE));        HttpServletResponse clientResponse=AuthXMLUtils.getRemoteResponse(XMLUtils.getChildNode(requestNode,AuthXMLTags.REMOTE_REQUEST_RESPONSE));        authXMLRequest.setClientRequest(clientRequest);        authXMLRequest.setClientResponse(clientResponse);      }      Node submitReqNode=XMLUtils.getChildNode(requestNode,"SubmitRequirements");      if (submitReqNode != null) {        authXMLRequest.setRequestType(AuthXMLRequest.SubmitRequirements);        AuthContextLocal authContext=AuthUtils.getAuthContext(servletReq,authIdentifier);        authXMLRequest.setAuthContext(authContext);        Callback[] callbacks=AuthUtils.getRecdCallback(authContext);        parseSubmitReqElements(submitReqNode,authXMLRequest,callbacks);        String localeStr=authXMLRequest.getLocale();        LoginState loginState=authContext.getLoginState();        loginState.setRemoteLocale(localeStr);        HttpServletRequest clientRequest=AuthXMLUtils.getRemoteRequest(XMLUtils.getChildNode(requestNode,AuthXMLTags.REMOTE_REQUEST_RESPONSE));        HttpServletResponse clientResponse=AuthXMLUtils.getRemoteResponse(XMLUtils.getChildNode(requestNode,AuthXMLTags.REMOTE_REQUEST_RESPONSE));        authXMLRequest.setClientRequest(clientRequest);        authXMLRequest.setClientResponse(clientResponse);      }      Node logoutNode=XMLUtils.getChildNode(requestNode,"Logout");      if (logoutNode != null) {        authXMLRequest.setRequestType(AuthXMLRequest.Logout);      }      Node abortNode=XMLUtils.getChildNode(requestNode,"Abort");      if (abortNode != null) {        authXMLRequest.setRequestType(AuthXMLRequest.Abort);        AuthContextLocal authContext=AuthUtils.getAuthContext(null,authIdentifier,true);        authXMLRequest.setAuthContext(authContext);      }    }  } catch (  AuthException e) {    throw e;  }catch (  Exception e) {    debug.message("Error in parseXML: : ",e);  }  return authXMLRequest;}  }
class C{  public Rectangle toRectangle(){  try {    float x1=getAsNumber(0).floatValue();    float y1=getAsNumber(1).floatValue();    float x2=getAsNumber(2).floatValue();    float y2=getAsNumber(3).floatValue();    return new Rectangle(x1,y1,x2 - x1,y2 - y1);  } catch (  Exception e) {    throw new PdfException(PdfException.CannotConvertPdfArrayToRectanle,e,this);  }}  }
class C{  public static void initialize() throws Throwable {  if (!initialized) {    try {      UIManager.put("OptionPane.background",getColor(INFO_OPTIONPANE_BACKGROUND_COLOR.get()));      UIManager.put("Panel.background",getColor(INFO_PANEL_BACKGROUND_COLOR.get()));      UIManager.put("ComboBox.background",getColor(INFO_COMBOBOX_BACKGROUND_COLOR.get()));    } catch (    Throwable t) {      logger.warn(LocalizableMessage.raw("Error updating UIManager: " + t,t));    }    initializeLookAndFeel();    initialized=true;  }}  }
class C{  static HttpServer start(final int port,final int sslPort){  return start(port,sslPort,false);}  }
class C{  public PasswordPolicyConfigManager(ServerContext serverContext){  this.serverContext=serverContext;}  }
class C{  public void addJarFile(final File jarFile) throws MalformedURLException {  addURL(jarFile.toURI().toURL());}  }
class C{  public Client createClient(){  return new Client(clientID,clientType,redirectionURIs,allowedGrantScopes,defaultGrantScopes,displayName,displayDescription,clientName,subjectType,idTokenSignedResponseAlgorithm,postLogoutRedirectionURIs,accessToken,clientSessionURI,applicationType,clientSecret,responseTypes,contacts,defaultMaxAge,defaultMaxAgeEnabled,tokenEndpointAuthMethod,jwks,jwksUri,x509,selector,sectorIdentifierUri,authorizationCodeLifeTime,accessTokenLifeTime,refreshTokenLifeTime,jwtTokenLifeTime);}  }
class C{  private int localizedWeekOfWeekBasedYear(TemporalAccessor temporal){  int dow=localizedDayOfWeek(temporal);  int doy=temporal.get(DAY_OF_YEAR);  int offset=startOfWeekOffset(doy,dow);  int week=computeWeek(offset,doy);  if (week == 0) {    ChronoLocalDate date=Chronology.from(temporal).date(temporal);    date=date.minus(doy,DAYS);    return localizedWeekOfWeekBasedYear(date);  } else   if (week > 50) {    ValueRange dayRange=temporal.range(DAY_OF_YEAR);    int yearLen=(int)dayRange.getMaximum();    int newYearWeek=computeWeek(offset,yearLen + weekDef.getMinimalDaysInFirstWeek());    if (week >= newYearWeek) {      week=week - newYearWeek + 1;    }  }  return week;}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  if (isSigned && signedXMLString != null) {    return signedXMLString;  }  validateData();  StringBuffer xmlString=new StringBuffer(1000);  xmlString.append(SAML2Constants.START_TAG);  if (includeNSPrefix) {    xmlString.append(SAML2Constants.PROTOCOL_PREFIX);  }  xmlString.append(SAML2Constants.LOGOUT_REQUEST).append(SAML2Constants.SPACE);  if (declareNS) {    xmlString.append(SAML2Constants.PROTOCOL_DECLARE_STR).append(SAML2Constants.SPACE);  }  xmlString.append(SAML2Constants.ID).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(requestId).append(SAML2Constants.QUOTE).append(SAML2Constants.SPACE).append(SAML2Constants.VERSION).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(version).append(SAML2Constants.QUOTE).append(SAML2Constants.SPACE).append(SAML2Constants.ISSUE_INSTANT).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(DateUtils.toUTCDateFormat(issueInstant)).append(SAML2Constants.QUOTE);  if ((destinationURI != null) && (destinationURI.length() > 0)) {    xmlString.append(SAML2Constants.SPACE).append(SAML2Constants.DESTINATION).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(destinationURI).append(SAML2Constants.QUOTE);  }  if ((consent != null) && (consent.length() > 0)) {    xmlString.append(SAML2Constants.SPACE).append(SAML2Constants.CONSENT).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(consent).append(SAML2Constants.QUOTE);  }  if (notOnOrAfter != null) {    xmlString.append(SAML2Constants.SPACE).append(SAML2Constants.NOTONORAFTER).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(DateUtils.toUTCDateFormat(notOnOrAfter)).append(SAML2Constants.QUOTE);  }  if ((reason != null) && (reason.length() > 0)) {    xmlString.append(SAML2Constants.SPACE).append(SAML2Constants.REASON).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(reason).append(SAML2Constants.QUOTE);  }  xmlString.append(SAML2Constants.END_TAG);  if (nameID != null) {    String issuerString=nameID.toXMLString(includeNSPrefix,declareNS);    xmlString.append(issuerString);  }  if ((signatureString != null) && (signatureString.length() > 0)) {    xmlString.append(signatureString);  }  if (extensions != null) {    xmlString.append(extensions.toXMLString(includeNSPrefix,declareNS));  }  if (baseId != null) {    xmlString.append(baseId.toXMLString(includeNSPrefix,declareNS));  }  if (nameId != null) {    xmlString.append(nameId.toXMLString(includeNSPrefix,declareNS));  }  if (encryptedId != null) {    xmlString.append(encryptedId.toXMLString(includeNSPrefix,declareNS));  }  if (sessionIndexList != null && !sessionIndexList.isEmpty()) {    Iterator sessionIterator=sessionIndexList.iterator();    while (sessionIterator.hasNext()) {      ProtocolFactory protoFactory=ProtocolFactory.getInstance();      String sessionString=(String)sessionIterator.next();      SessionIndex sIndex=protoFactory.createSessionIndex(sessionString);      xmlString.append(sIndex.toXMLString(includeNSPrefix,declareNS));    }  }  xmlString.append(SAML2Constants.SAML2_END_TAG).append(SAML2Constants.LOGOUT_REQUEST).append(SAML2Constants.END_TAG);  return xmlString.toString();}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.ObjectType createObjectType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.ObjectTypeImpl();}  }
class C{  private void assignDirectCOSDef(PersistentObject pObject,DirectCOSDefinition cosDef,COSTemplate cosTemplate,SchemaManager sMgr) throws UMSException {  if (cosDef.getGuid() == null) {    String msg=i18n.getString(IUMSConstants.COS_DEFINITION_NOT_PERSISTENT);    throw new UMSException(msg);  }  DN targetDN=DN.valueOf(pObject.getGuid().getDn());  DN cosParentDN=DN.valueOf(cosDef.getParentGuid().getDn());  if (!(targetDN.isInScopeOf(cosParentDN,SearchScope.SUBORDINATES))) {    String msg=i18n.getString(IUMSConstants.COS_TARGET_OBJECT_DIFFERENT_TREE);    throw new UMSException(msg);  }  if (cosDef.getCOSSpecifier().equalsIgnoreCase("nsrole"))   return;  ArrayList aList;  AttrSet attrSet=new AttrSet();  aList=(ArrayList)sMgr.getObjectClasses(cosDef.getCOSSpecifier());  String cosSpecObjectClass=(String)aList.get(0);  if (!objectClassExists(cosSpecObjectClass,pObject)) {    attrSet.add(new Attr("objectclass",cosSpecObjectClass));  }  String[] cosAttributes=cosDef.getCOSAttributes();  String qualifier=null;  Arrays.asList(ICOSDefinition.qualifiers);  Attr attr=cosTemplate.getAttribute("objectclass");  String[] cosTempObjClasses=attr.getStringValues();  for (int i=0; i < cosAttributes.length; i++) {    StringTokenizer st=new StringTokenizer(cosAttributes[i]);    st.nextToken();    qualifier=st.nextToken();    if ((!qualifier.equals(ICOSDefinition.qualifiers[ICOSDefinition.OPERATIONAL]))) {      for (int j=0; j < cosTempObjClasses.length; j++) {        if (!cosTempObjClasses[j].equalsIgnoreCase("top") && !cosTempObjClasses[j].equalsIgnoreCase("costemplate") && !objectClassExists(cosTempObjClasses[j],pObject)) {          if (!attrSet.contains("objectclass",cosTempObjClasses[j])) {            attrSet.add(new Attr("objectclass",cosTempObjClasses[j]));          }        }      }    }  }  if (pObject.getAttribute(cosDef.getCOSSpecifier()) == null)   attrSet.add(new Attr(cosDef.getCOSSpecifier(),cosTemplate.getName()));  if (attrSet.size() > 0) {    pObject.modify(toModifications(ModificationType.ADD,attrSet));    pObject.save();  }}  }
class C{  public static void main(String[] args){  try {    SelectAliasDialog dlg=new SelectAliasDialog(new JDialog());    dlg.display(new String[]{"test1","test2"});  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  private boolean matchModes(QName m1,QName m2){  return (((null == m1) && (null == m2)) || ((null != m1) && (null != m2) && m1.equals(m2)));}  }
class C{  public FrameBodyTDRC(byte textEncoding,String text){  super(textEncoding,text);  findMatchingMaskAndExtractV3Values();}  }
class C{  public INTF_REPOS(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public void clear(int maximumCapacity){  if (capacity <= maximumCapacity) {    clear();    return;  }  zeroValue=null;  hasZeroValue=false;  size=0;  resize(maximumCapacity);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  NodeList elementList;  boolean hasAttributes;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  element=(Element)elementList.item(0);  hasAttributes=element.hasAttributes();  assertFalse("nodehasattributes01_1",hasAttributes);  elementList=doc.getElementsByTagName("address");  element=(Element)elementList.item(0);  hasAttributes=element.hasAttributes();  assertTrue("nodehasattributes01_2",hasAttributes);}  }
class C{  public InitialLdapContext() throws NamingException {  super(null);}  }
class C{  public SequentialTag(){}  }
class C{  private ReplicaId(DN baseDN,int serverId){  this.baseDN=baseDN;  this.serverId=serverId;}  }
class C{  SubMap(ConcurrentSkipListMap<K,V> map,K fromKey,boolean fromInclusive,K toKey,boolean toInclusive,boolean isDescending){  Comparator<? super K> cmp=map.comparator;  if (fromKey != null && toKey != null && cpr(cmp,fromKey,toKey) > 0)   throw new IllegalArgumentException("inconsistent range");  this.m=map;  this.lo=fromKey;  this.hi=toKey;  this.loInclusive=fromInclusive;  this.hiInclusive=toInclusive;  this.isDescending=isDescending;}  }
class C{  public StaticAuthenticator(String username,String password){  Reject.ifNull(username,"username was not specified");  Reject.ifNull(password,"password was not specified");  resource=newResourceResponse(username,RESOURCE_REV,json(object(field(FIELD_CONTENT_ID,username),field(FIELD_CONTENT_REVISION,RESOURCE_REV),field(RESOURCE_FIELD_USERNAME,username),field(RESOURCE_FIELD_PASSWORD,password))));}  }
class C{  public void testSetBitBug1331(){  BigInteger result=BigInteger.valueOf(0L).setBit(191);  assertEquals("incorrect value","3138550867693340381917894711603833208051177722232017256448",result.toString());  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void startDrag(Cursor dragCursor,Transferable transferable) throws InvalidDnDOperationException {  dragSource.startDrag(this,dragCursor,transferable,null);}  }
class C{  public void disallow(final Result result,final String message){  this.result=result;  this.message=message;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementinuseattributeerr.class,args);}  }
class C{  private int monthLength(int month,int gregorianYear){  return CalendarUtils.isGregorianLeapYear(gregorianYear) ? GregorianCalendar.LEAP_MONTH_LENGTH[month] : GregorianCalendar.MONTH_LENGTH[month];}  }
class C{  private static SASLResponse processSASLRequest(SASLRequest saslReq,Message message,String respMessageID) throws AuthnSvcException {  String mechanism=saslReq.getMechanism().trim();  if (AuthnSvcUtils.debug.messageEnabled()) {    String msg=AuthnSvcUtils.getString("messageID") + "=" + message.getCorrelationHeader().getMessageID()+ ", "+ AuthnSvcUtils.getString("mechanism")+ "="+ mechanism+ ", "+ AuthnSvcUtils.getString("authzID")+ "="+ saslReq.getAuthzID()+ ", "+ AuthnSvcUtils.getString("advisoryAuthnID")+ "="+ saslReq.getAdvisoryAuthnID();    AuthnSvcUtils.debug.message(msg);  }  String[] data={message.getCorrelationHeader().getMessageID(),mechanism,saslReq.getAuthzID(),saslReq.getAdvisoryAuthnID()};  if (mechanism.length() == 0) {    if (AuthnSvcUtils.debug.messageEnabled()) {      AuthnSvcUtils.debug.message("AuthnSvcRequestHanderImpl.processSASLRequest: " + "mechanism is empty");    }    if (LogUtil.isLogEnabled()) {      LogUtil.access(Level.INFO,LogUtil.AS_ABORT,data);    }    return new SASLResponse(SASLResponse.ABORT);  }  MechanismHandler mechanismHandler=null;  StringTokenizer stz=new StringTokenizer(mechanism);  while (stz.hasMoreTokens()) {    String mech=stz.nextToken();    mechanismHandler=AuthnSvcService.getMechanismHandler(mech);    if (mechanismHandler != null) {      break;    }  }  if (mechanismHandler == null) {    if (AuthnSvcUtils.debug.messageEnabled()) {      AuthnSvcUtils.debug.message("AuthnSvcRequestHanderImpl.processSASLRequest: " + "Unable to find mechanismHandler");    }    if (LogUtil.isLogEnabled()) {      LogUtil.access(Level.INFO,LogUtil.AS_ABORT,data);    }    return new SASLResponse(SASLResponse.ABORT);  } else {    if (AuthnSvcUtils.debug.messageEnabled()) {      AuthnSvcUtils.debug.message("AuthnSvcRequestHanderImpl.processSASLRequest: " + "mechanismHandler = " + mechanismHandler.getClass());    }  }  SASLResponse saslResp=mechanismHandler.processSASLRequest(saslReq,message,respMessageID);  if (LogUtil.isLogEnabled()) {    String statusCode=saslResp.getStatusCode();    if (statusCode.equals(SASLResponse.OK)) {      LogUtil.access(Level.INFO,LogUtil.AS_OK,data);    } else     if (statusCode.equals(SASLResponse.CONTINUE)) {      LogUtil.access(Level.INFO,LogUtil.AS_CONTINUE,data);    } else {      LogUtil.access(Level.INFO,LogUtil.AS_ABORT,data);    }  }  return saslResp;}  }
class C{  public ExpandRoom other_room(ExpandRoom p_room){  if (p_room == first_room)   return second_room; else   if (p_room == second_room)   return first_room; else   return null;}  }
class C{  protected JButton createScrollButton(int direction){  if (direction != SOUTH && direction != NORTH && direction != EAST && direction != WEST) {    throw new IllegalArgumentException("Direction must be one of: " + "SOUTH, NORTH, EAST or WEST");  }  return new ScrollableTabButton(direction);}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public boolean has_no_active_member(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("has_no_active_member",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    return $self.has_no_active_member();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private PlaPointFloat right_left_tangential_point(PlaPointFloat p_from_point,PlaPointFloat p_to_point,PlaPointFloat p_center,double p_dist){  PlaPointFloat curr_tangential_point=p_from_point.right_tangential_point(p_center,p_dist);  if (curr_tangential_point == null) {    System.out.println("LocateFoundConnectionAlgo. right_left_tangential_point: right tangential point is null");    return null;  }  PlaSegmentFloat first_line=new PlaSegmentFloat(p_from_point,curr_tangential_point);  curr_tangential_point=p_to_point.left_tangential_point(p_center,p_dist);  if (curr_tangential_point == null) {    System.out.println("LocateFoundConnectionAlgo. right_left_tangential_point: left tangential point is null");    return null;  }  PlaSegmentFloat second_line=new PlaSegmentFloat(p_to_point,curr_tangential_point);  return first_line.intersection(second_line);}  }
class C{  public void printStackTrace(){  if (!isJDK14OrAbove && causeOnJDK13OrBelow != null) {    printStackTrace0(new PrintWriter(System.err,true));  } else {    super.printStackTrace();  }}  }
class C{  private String buildCacheKey(String orgName,String policyName){  String serviceComponent=CACHE_KEY_DELIMITER + PolicyManager.NAMED_POLICY + CACHE_KEY_DELIMITER+ policyName;  return buildCacheKey(PolicyManager.POLICY_SERVICE_NAME,PolicyManager.POLICY_VERSION,orgName,"default",serviceComponent);}  }
class C{  private void savepostMni(String mnipostLocation,String mnipostRespLocation,List manageNameIdList,com.sun.identity.saml2.jaxb.metadata.ObjectFactory objFact) throws JAXBException {  if (mnipostLocation != null && mnipostLocation.length() > 0) {    ManageNameIDServiceElement slsElemPost=objFact.createManageNameIDServiceElement();    slsElemPost.setBinding(httpPostBinding);    slsElemPost.setLocation(mnipostLocation);    slsElemPost.setResponseLocation(mnipostRespLocation);    manageNameIdList.add(slsElemPost);  }}  }
class C{  protected void initializeParser(){  argParser=new UninstallerArgumentParser(getClass().getName(),INFO_UNINSTALL_LAUNCHER_USAGE_DESCRIPTION.get(),false);  try {    argParser.initializeGlobalArguments(System.out);  } catch (  ArgumentException ae) {    LocalizableMessage message=ToolMessages.ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage());    System.err.println(wrapText(message,Utils.getCommandLineMaxLineWidth()));  }}  }
class C{  OAuth2AbstractAccessAuditFilter(AuditConstants.Component component,Restlet restlet,AuditEventPublisher auditEventPublisher,AuditEventFactory auditEventFactory,OAuth2RequestFactory requestFactory,RestletBodyAuditor requestDetailCreator,RestletBodyAuditor responseDetailCreator){  super(component,restlet,auditEventPublisher,auditEventFactory,requestDetailCreator,responseDetailCreator);  this.requestFactory=requestFactory;}  }
class C{  public void createStructure(){  MP3File.getStructureFormatter().openHeadingElement(TYPE_TAG,getIdentifier());  MP3File.getStructureFormatter().addElement(TYPE_TITLE,this.title);  MP3File.getStructureFormatter().addElement(TYPE_ARTIST,this.artist);  MP3File.getStructureFormatter().addElement(TYPE_ALBUM,this.album);  MP3File.getStructureFormatter().addElement(TYPE_YEAR,this.year);  MP3File.getStructureFormatter().addElement(TYPE_COMMENT,this.comment);  MP3File.getStructureFormatter().addElement(TYPE_GENRE,this.genre);  MP3File.getStructureFormatter().closeHeadingElement(TYPE_TAG);}  }
class C{  protected void closeStartTag() throws SAXException {  try {    if (m_tracer != null)     super.fireStartElem(m_elemContext.m_elementName);    int nAttrs=m_attributes.getLength();    if (nAttrs > 0) {      processAttributes(m_writer,nAttrs);      m_attributes.clear();    }    m_writer.write('>');    if (m_CdataElems != null)     m_elemContext.m_isCdataSection=isCdataSection();    if (m_doIndent) {      m_isprevtext=false;      m_preserves.push(m_ispreserve);    }  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  @Override public void resetBuffer(){  try {    jspWriter.clearBuffer();  } catch (  IOException ioe) {  }}  }
class C{  public static boolean directoryExistsAndIsNotEmpty(String path){  final File f=new File(path);  if (f.isDirectory()) {    final String[] ch=f.list();    return ch != null && ch.length > 0;  }  return false;}  }
class C{  public void removeAllHighlights(){  TextUI mapper=component.getUI();  if (getDrawsLayeredHighlights()) {    int len=highlights.size();    if (len != 0) {      int minX=0;      int minY=0;      int maxX=0;      int maxY=0;      int p0=-1;      int p1=-1;      for (int i=0; i < len; i++) {        HighlightInfo hi=highlights.elementAt(i);        if (hi instanceof LayeredHighlightInfo) {          LayeredHighlightInfo info=(LayeredHighlightInfo)hi;          minX=Math.min(minX,info.x);          minY=Math.min(minY,info.y);          maxX=Math.max(maxX,info.x + info.width);          maxY=Math.max(maxY,info.y + info.height);        } else {          if (p0 == -1) {            p0=hi.p0.getOffset();            p1=hi.p1.getOffset();          } else {            p0=Math.min(p0,hi.p0.getOffset());            p1=Math.max(p1,hi.p1.getOffset());          }        }      }      if (minX != maxX && minY != maxY) {        component.repaint(minX,minY,maxX - minX,maxY - minY);      }      if (p0 != -1) {        try {          safeDamageRange(p0,p1);        } catch (        BadLocationException e) {        }      }      highlights.removeAllElements();    }  } else   if (mapper != null) {    int len=highlights.size();    if (len != 0) {      int p0=Integer.MAX_VALUE;      int p1=0;      for (int i=0; i < len; i++) {        HighlightInfo info=highlights.elementAt(i);        p0=Math.min(p0,info.p0.getOffset());        p1=Math.max(p1,info.p1.getOffset());      }      try {        safeDamageRange(p0,p1);      } catch (      BadLocationException e) {      }      highlights.removeAllElements();    }  }}  }
class C{  public GradientPaint(float x1,float y1,Color color1,float x2,float y2,Color color2){  if ((color1 == null) || (color2 == null)) {    throw new NullPointerException("Colors cannot be null");  }  p1=new Point2D.Float(x1,y1);  p2=new Point2D.Float(x2,y2);  this.color1=color1;  this.color2=color2;}  }
class C{  public RunnerSearchConfig markTestsWithoutAnnotationAsIgnored(){  isToMarkTestsWithoutAnnotationAsIgnored=true;  return this;}  }
class C{  public void repaint(long tm,int x,int y,int width,int height){}  }
class C{  private void enqueueTopoInfoToAllDSsExcept(DataServerHandler excludedDS){  int excludedServerId=excludedDS != null ? excludedDS.getServerId() : -1;  if (sendDSTopologyMsg) {    if (excludedServerId != excludedDSForTopologyMsg) {      excludedDSForTopologyMsg=-1;    }  } else {    sendDSTopologyMsg=true;    excludedDSForTopologyMsg=excludedServerId;  }}  }
class C{  public net.aimeizi.person.QueryParameter.Builder clearAgeEnd(){  fieldSetFlags()[1]=false;  return this;}  }
class C{  @Override public void customize(ConfigurableEmbeddedServletContainer container){  MimeMappings mappings=new MimeMappings(MimeMappings.DEFAULT);  mappings.add("html","text/html;charset=utf-8");  mappings.add("json","text/html;charset=utf-8");  container.setMimeMappings(mappings);}  }
class C{  private float measureRun(int start,int offset,int limit,boolean runIsRtl,FontMetricsInt fmi){  return handleRun(start,offset,limit,runIsRtl,null,0,0,0,0,fmi,true);}  }
class C{  public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return (m_left.num(xctxt) % m_right.num(xctxt));}  }
class C{  public static void initiateLogoutRequest(HttpServletRequest request,HttpServletResponse response,PrintWriter out,String binding,Map paramsMap) throws SAML2Exception {  if (debug.messageEnabled()) {    debug.message("in initiateLogoutRequest");    debug.message("binding : " + binding);    debug.message("logoutAll : " + (String)paramsMap.get(SAML2Constants.LOGOUT_ALL));    debug.message("paramsMap : " + paramsMap);  }  boolean logoutall=false;  String logoutAllValue=(String)paramsMap.get(SAML2Constants.LOGOUT_ALL);  if ((logoutAllValue != null) && logoutAllValue.equalsIgnoreCase("true")) {    logoutall=true;  }  String metaAlias=(String)paramsMap.get(SAML2Constants.IDP_META_ALIAS);  try {    Object session=sessionProvider.getSession(request);    String sessUser=sessionProvider.getPrincipalName(session);    if (session == null) {      throw new SAML2Exception(SAML2Utils.bundle.getString("nullSSOToken"));    }    if (metaAlias == null) {      String[] values=sessionProvider.getProperty(session,SAML2Constants.IDP_META_ALIAS);      if (values != null && values.length != 0) {        metaAlias=values[0];      }    }    if (metaAlias == null) {      throw new SAML2Exception(SAML2Utils.bundle.getString("nullIDPMetaAlias"));    }    paramsMap.put(SAML2Constants.METAALIAS,metaAlias);    String realm=SAML2Utils.getRealm(SAML2MetaUtils.getRealmByMetaAlias(metaAlias));    String idpEntityID=sm.getEntityByMetaAlias(metaAlias);    if (idpEntityID == null) {      debug.error("Identity Provider ID is missing");      String[] data={idpEntityID};      LogUtil.error(Level.INFO,LogUtil.INVALID_IDP,data,null);      throw new SAML2Exception(SAML2Utils.bundle.getString("nullIDPEntityID"));    }    String idpSessionIndex=IDPSSOUtil.getSessionIndex(session);    if (idpSessionIndex == null) {      if (debug.messageEnabled()) {        debug.message("No SP session participant(s)");      }      MultiProtocolUtils.invalidateSession(session,request,response,SingleLogoutManager.SAML2);      return;    }    if (!SAML2FailoverUtils.isSAML2FailoverEnabled() && isMisroutedRequest(request,response,out,session)) {      return;    } else {      if (debug.messageEnabled()) {        debug.message("IDPSingleLogout.initiateLogoutRequest: " + "SAML2 Failover will be attempted. Be sure SFO is " + "properly configured or the attempt will fail");      }    }    IDPSession idpSession=IDPCache.idpSessionsByIndices.get(idpSessionIndex);    if (idpSession == null) {      if (debug.messageEnabled()) {        debug.message("IDPSLO.initiateLogoutRequest: " + "IDP Session with session index " + idpSessionIndex + " already removed.");      }      try {        if (SAML2FailoverUtils.isSAML2FailoverEnabled()) {          SAML2FailoverUtils.deleteSAML2Token(idpSessionIndex);        }      } catch (      SAML2TokenRepositoryException se) {        debug.error("IDPSingleLogout.initiateLogoutReq: Error while deleting token from " + "SAML2 Token Repository for idpSessionIndex:" + idpSessionIndex,se);      }      IDPCache.authnContextCache.remove(idpSessionIndex);      MultiProtocolUtils.invalidateSession(session,request,response,SingleLogoutManager.SAML2);      return;    }    if (debug.messageEnabled()) {      debug.message("idpSessionIndex=" + idpSessionIndex);    }    List<NameIDandSPpair> list=idpSession.getNameIDandSPpairs();    int n=list.size();    if (debug.messageEnabled()) {      debug.message("IDPSingleLogout.initiateLogoutReq:" + " NameIDandSPpairs=" + list + ", size="+ n);    }    if (n == 0) {      if (debug.messageEnabled()) {        debug.message("No SP session participant(s)");      }      IDPCache.idpSessionsByIndices.remove(idpSessionIndex);      if ((agent != null) && agent.isRunning() && (saml2Svc != null)) {        saml2Svc.setIdpSessionCount((long)IDPCache.idpSessionsByIndices.size());      }      try {        if (SAML2FailoverUtils.isSAML2FailoverEnabled()) {          SAML2FailoverUtils.deleteSAML2Token(idpSessionIndex);        }      } catch (      SAML2TokenRepositoryException se) {        debug.error("IDPSingleLogout.initiateLogoutReq: Error while deleting token from " + "SAML2 Token Repository for idpSessionIndex:" + idpSessionIndex,se);      }      IDPCache.authnContextCache.remove(idpSessionIndex);      MultiProtocolUtils.invalidateSession(session,request,response,SingleLogoutManager.SAML2);      return;    }    String relayState=(String)paramsMap.get(SAML2Constants.RELAY_STATE);    SAML2Utils.validateRelayStateURL(realm,idpEntityID,relayState,SAML2Constants.IDP_ROLE);    int soapFailCount=0;    idpSession.setOriginatingLogoutRequestBinding(binding);    for (int i=0; i < n; i++) {      NameIDandSPpair pair=list.remove(0);      removeTransientNameIDFromCache(pair.getNameID());      String spEntityID=pair.getSPEntityID();      if (debug.messageEnabled()) {        debug.message("IDPSingleLogout.initLogoutReq: processing spEntityID " + spEntityID);      }      List extensionsList=LogoutUtil.getExtensionsList(paramsMap);      List<SingleLogoutServiceElement> slosList=getSPSLOServiceEndpoints(realm,spEntityID);      SPSSOConfigElement spConfig=sm.getSPSSOConfig(realm,spEntityID);      if (logoutall == true) {        idpSessionIndex=null;      }      SingleLogoutServiceElement logoutEndpoint=LogoutUtil.getMostAppropriateSLOServiceLocation(slosList,idpSession.getOriginatingLogoutRequestBinding());      if (logoutEndpoint == null) {        continue;      }      StringBuffer requestID=null;      try {        requestID=LogoutUtil.doLogout(metaAlias,spEntityID,extensionsList,logoutEndpoint,relayState,idpSessionIndex,pair.getNameID(),request,response,paramsMap,spConfig);      } catch (      SAML2Exception ex) {        if (logoutEndpoint.getBinding().equals(SAML2Constants.SOAP)) {          debug.error("IDPSingleLogout.initiateLogoutRequest:",ex);          soapFailCount++;          continue;        } else {          throw ex;        }      }      String requestIDStr=requestID.toString();      String bindingUsed=logoutEndpoint.getBinding();      if (debug.messageEnabled()) {        debug.message("\nIDPSLO.requestIDStr = " + requestIDStr + "\nbinding = "+ bindingUsed);      }      if (!requestIDStr.isEmpty() && (bindingUsed.equals(SAML2Constants.HTTP_REDIRECT) || bindingUsed.equals(SAML2Constants.HTTP_POST))) {        idpSession.setPendingLogoutRequestID(requestIDStr);        idpSession.setLogoutAll(logoutall);        Map logoutMap=(Map)paramsMap.get("LogoutMap");        if (logoutMap != null && !logoutMap.isEmpty()) {          IDPCache.logoutResponseCache.put(requestIDStr,(Map)paramsMap.get("LogoutMap"));        }        return;      }    }    if (logoutall == true) {      String userID=sessionProvider.getPrincipalName(idpSession.getSession());      destroyAllTokenForUser(userID,request,response);    } else {      MultiProtocolUtils.invalidateSession(idpSession.getSession(),request,response,SingleLogoutManager.SAML2);      IDPCache.idpSessionsByIndices.remove(idpSessionIndex);      if (agent != null && agent.isRunning() && saml2Svc != null) {        saml2Svc.setIdpSessionCount((long)IDPCache.idpSessionsByIndices.size());      }      IDPCache.authnContextCache.remove(idpSessionIndex);    }    int logoutStatus=SingleLogoutManager.LOGOUT_SUCCEEDED_STATUS;    boolean isMultiProtocol=MultiProtocolUtils.isMultipleProtocolSession(request,SingleLogoutManager.SAML2);    if (soapFailCount == n) {      if (isMultiProtocol) {        logoutStatus=SingleLogoutManager.LOGOUT_FAILED_STATUS;      }    } else     if (soapFailCount > 0) {      if (isMultiProtocol) {        logoutStatus=SingleLogoutManager.LOGOUT_PARTIAL_STATUS;      }    }    if (isMultiProtocol) {      Set set=new HashSet();      set.add(session);      boolean isSOAPInitiated=binding.equals(SAML2Constants.SOAP) ? true : false;      int retStat=SingleLogoutManager.LOGOUT_SUCCEEDED_STATUS;      try {        debug.message("IDPSingleLogout.initLogReq: MP");        retStat=SingleLogoutManager.getInstance().doIDPSingleLogout(set,sessUser,request,response,isSOAPInitiated,true,SingleLogoutManager.SAML2,realm,idpEntityID,null,relayState,null,null,logoutStatus);      } catch (      Exception ex) {        debug.warning("IDPSingleLogout.initiateLoogutReq: MP",ex);        throw new SAML2Exception(ex.getMessage());      }      if (debug.messageEnabled()) {        debug.message("IDPSingleLogout.initLogoutRequest: " + "SLOManager return status = " + retStat);      }switch (retStat) {case SingleLogoutManager.LOGOUT_FAILED_STATUS:        throw new SAML2Exception(SAML2Utils.bundle.getString("sloFailed"));case SingleLogoutManager.LOGOUT_PARTIAL_STATUS:      throw new SAML2Exception(SAML2Utils.bundle.getString("partialLogout"));default :    break;}}} catch (SAML2MetaException sme) {debug.error("Error retreiving metadata",sme);throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));}catch (SessionException ssoe) {debug.error("SessionException: ",ssoe);throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));}}  }
class C{  public boolean isEmpty(){  return (tag == null || tag.isEmpty()) && images.size() == 0;}  }
class C{  public void storeLocal(final int local,final Type type){  setLocalType(local,type);  storeInsn(type,local);}  }
class C{  public void testSendRequest(){  try {    Request invite=createTiInviteRequest(null,null,null);    RequestEvent receivedRequestEvent=null;    ClientTransaction tran=null;    try {      tran=tiSipProvider.getNewClientTransaction(invite);      eventCollector.collectRequestEvent(riSipProvider);      tran.sendRequest();      waitForMessage();      receivedRequestEvent=eventCollector.extractCollectedRequestEvent();      assertNotNull("The sent request was not received by the RI!",receivedRequestEvent);      assertNotNull("The sent request was not received by the RI!",receivedRequestEvent.getRequest());    } catch (    TransactionUnavailableException exc) {      throw new TiUnexpectedError("A TransactionUnavailableException was thrown while trying to " + "create a new client transaction",exc);    }catch (    SipException exc) {      exc.printStackTrace();      fail("The SipException was thrown while trying to send the request.");    }catch (    TooManyListenersException exc) {      throw new TckInternalError("A  TooManyListenersException was thrown while trying " + "to add a SipListener to an RI SipProvider",exc);    }  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  private void decodeLength(String[] arguments,int startPos,int lineNumber,List<LocalizableMessage> warnings) throws InitializationException {  int numArgs=arguments.length - startPos + 1;  if (numArgs == 2) {    randomType=RANDOM_TYPE_CHARS_FIXED;    try {      minLength=Integer.parseInt(arguments[startPos]);      if (minLength < 0) {        LocalizableMessage message=ERR_MAKELDIF_TAG_INTEGER_BELOW_LOWER_BOUND.get(minLength,0,getName(),lineNumber);        throw new InitializationException(message);      } else       if (minLength == 0) {        LocalizableMessage message=WARN_MAKELDIF_TAG_WARNING_EMPTY_VALUE.get(lineNumber);        warnings.add(message);      }    } catch (    NumberFormatException nfe) {      LocalizableMessage message=ERR_MAKELDIF_TAG_CANNOT_PARSE_AS_INTEGER.get(arguments[startPos],getName(),lineNumber);      throw new InitializationException(message,nfe);    }  } else   if (numArgs == 3) {    randomType=RANDOM_TYPE_CHARS_VARIABLE;    try {      minLength=Integer.parseInt(arguments[startPos]);      if (minLength < 0) {        LocalizableMessage message=ERR_MAKELDIF_TAG_INTEGER_BELOW_LOWER_BOUND.get(minLength,0,getName(),lineNumber);        throw new InitializationException(message);      }    } catch (    NumberFormatException nfe) {      LocalizableMessage message=ERR_MAKELDIF_TAG_CANNOT_PARSE_AS_INTEGER.get(arguments[startPos],getName(),lineNumber);      throw new InitializationException(message,nfe);    }    try {      maxLength=Integer.parseInt(arguments[startPos + 1]);      lengthRange=maxLength - minLength + 1;      if (maxLength < minLength) {        LocalizableMessage message=ERR_MAKELDIF_TAG_INTEGER_BELOW_LOWER_BOUND.get(maxLength,minLength,getName(),lineNumber);        throw new InitializationException(message);      } else       if (maxLength == 0) {        LocalizableMessage message=WARN_MAKELDIF_TAG_WARNING_EMPTY_VALUE.get(lineNumber);        warnings.add(message);      }    } catch (    NumberFormatException nfe) {      LocalizableMessage message=ERR_MAKELDIF_TAG_CANNOT_PARSE_AS_INTEGER.get(arguments[startPos + 1],getName(),lineNumber);      throw new InitializationException(message,nfe);    }  } else {    LocalizableMessage message=ERR_MAKELDIF_TAG_INVALID_ARGUMENT_RANGE_COUNT.get(getName(),lineNumber,startPos + 1,startPos + 2,numArgs);    throw new InitializationException(message);  }}  }
class C{  public String debugDump(int indent){  int save=indentation;  indentation=indent;  String retval=this.debugDump();  indentation=save;  return retval;}  }
class C{  public FrameBodyWOAF(String urlLink){  super(urlLink);}  }
class C{  public CSN nextCSNUTF8() throws DataFormatException {  try {    return CSN.valueOf(nextString());  } catch (  IndexOutOfBoundsException e) {    throw new DataFormatException(e.getMessage());  }}  }
class C{  public boolean isValidHOTP(String enteredHOTPCode){  if (sentHOTPCode != null && sentHOTPCode.equals(enteredHOTPCode)) {    long timePassed=currentTimeMillis() - sentHOTPCodeTime;    if (timePassed <= (codeValidityDuration * 60000)) {      sentHOTPCode=null;      return true;    } else {      if (DEBUG.messageEnabled()) {        DEBUG.message("HOTP.process() : HOTP code has expired");      }      return false;    }  } else {    if (DEBUG.messageEnabled()) {      DEBUG.message("HOTP.process() : HOTP code is not valid");    }    return false;  }}  }
class C{  public KeyException(){  super();}  }
class C{  public IllegalBoundaryException(){  super();}  }
class C{  @Override public Object invoke(String name,Object params[],String signature[]) throws MBeanException, ReflectionException {  if ((resource instanceof DynamicMBean) && !(resource instanceof BaseModelMBean)) {    return ((DynamicMBean)resource).invoke(name,params,signature);  }  if (name == null)   throw new RuntimeOperationsException(new IllegalArgumentException("Method name is null"),"Method name is null");  if (log.isDebugEnabled())   log.debug("Invoke " + name);  Method method=managedBean.getInvoke(name,params,signature,this,resource);  Object result=null;  try {    if (method.getDeclaringClass().isAssignableFrom(this.getClass())) {      result=method.invoke(this,params);    } else {      result=method.invoke(resource,params);    }  } catch (  InvocationTargetException e) {    Throwable t=e.getTargetException();    log.error("Exception invoking method " + name,t);    if (t == null)     t=e;    if (t instanceof RuntimeException)     throw new RuntimeOperationsException((RuntimeException)t,"Exception invoking method " + name); else     if (t instanceof Error)     throw new RuntimeErrorException((Error)t,"Error invoking method " + name); else     throw new MBeanException((Exception)t,"Exception invoking method " + name);  }catch (  Exception e) {    log.error("Exception invoking method " + name,e);    throw new MBeanException(e,"Exception invoking method " + name);  }  return (result);}  }
class C{  @Override @Deprecated public boolean awaitTermination(long l,TimeUnit timeUnit) throws InterruptedException {  throw new UnsupportedOperationException();}  }
class C{  public void addNodes(NodeSet ns){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  addNodes((NodeIterator)ns);}  }
class C{  @Override public ShapeTileOctagon bounding_octagon(){  if (precalc_bounding_octagon != null)   return precalc_bounding_octagon;  double lx=Integer.MAX_VALUE;  double ly=Integer.MAX_VALUE;  double rx=Integer.MIN_VALUE;  double uy=Integer.MIN_VALUE;  double ulx=Integer.MAX_VALUE;  double lrx=Integer.MIN_VALUE;  double llx=Integer.MAX_VALUE;  double urx=Integer.MIN_VALUE;  for (int index=0; index < lines_size(); ++index) {    PlaPointFloat curr=corner_approx(index);    lx=Math.min(lx,curr.v_x);    ly=Math.min(ly,curr.v_y);    rx=Math.max(rx,curr.v_x);    uy=Math.max(uy,curr.v_y);    double tmp=curr.v_x - curr.v_y;    ulx=Math.min(ulx,tmp);    lrx=Math.max(lrx,tmp);    tmp=curr.v_x + curr.v_y;    llx=Math.min(llx,tmp);    urx=Math.max(urx,tmp);  }  precalc_bounding_octagon=new ShapeTileOctagon(Math.floor(lx),Math.floor(ly),Math.ceil(rx),Math.ceil(uy),Math.floor(ulx),Math.ceil(lrx),Math.floor(llx),Math.ceil(urx));  return precalc_bounding_octagon;}  }
class C{  private static byte[] convertToUTF8(byte ch){  int c=ch & 0xFF;  try {    if (c >= 0x80) {      if (c == 0x81 || c == 0x8D || c == 0x8F || c == 0x90 || c == 0x9D) {        return new byte[]{0x20};      }      return new String(new byte[]{ch},"cp1252").getBytes("UTF-8");    }  } catch (  UnsupportedEncodingException e) {  }  return new byte[]{ch};}  }
class C{  public LongInfo addLongInfo(long value) throws JavaSpecificationViolation {  LongInfo longinfo=new LongInfo(this,value);  addItem(longinfo);  addItem(new ConstantPoolPadding(this));  return longinfo;}  }
class C{  protected MouseListener createMouseListener(){  return getHandler();}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.AltIDType createAltIDType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.AltIDTypeImpl();}  }
class C{  public String append(String superResource,String subResource){  return subResource + delimiter + superResource;}  }
class C{  public synchronized void selectAll(){  this.selectionStart=0;  this.selectionEnd=getText().length();  TextComponentPeer peer=(TextComponentPeer)this.peer;  if (peer != null) {    peer.select(selectionStart,selectionEnd);  }}  }
class C{  private boolean isSelectAlternative(int pos){  if (pos + 1 >= lambdaForm.names.length)   return false;  Name name0=lambdaForm.names[pos];  Name name1=lambdaForm.names[pos + 1];  return nameRefersTo(name0,MethodHandleImpl.class,"selectAlternative") && isInvokeBasic(name1) && name1.lastUseIndex(name0) == 0 && lambdaForm.lastUseIndex(name0) == pos + 1;}  }
class C{  public ArtifactResolve createArtifactResolve(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ARTIFACT_RESOLVE,xml);  if (obj == null) {    return new ArtifactResolveImpl(xml);  } else {    return (ArtifactResolve)obj;  }}  }
class C{  public void treeDidChange(){  revalidate();  repaint();}  }
class C{  public void close() throws IOException {  if (in != null) {    try {      if (usesDefaultDeflater) {        def.end();      }      in.close();    }  finally {      in=null;    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  String value;  doc=(Document)load("hc_staff",false);  addressList=doc.getElementsByTagName("acronym");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("title");  value=domesticAttr.getNodeValue();  assertEquals("attrEffectiveValueAssert","Yes",value);}  }
class C{  public static ComponentUI createUIs(ComponentUI mui,Vector uis,JComponent target){  ComponentUI ui;  ui=UIManager.getDefaults().getUI(target);  if (ui != null) {    uis.addElement(ui);    LookAndFeel[] auxiliaryLookAndFeels;    auxiliaryLookAndFeels=UIManager.getAuxiliaryLookAndFeels();    if (auxiliaryLookAndFeels != null) {      for (int i=0; i < auxiliaryLookAndFeels.length; i++) {        ui=auxiliaryLookAndFeels[i].getDefaults().getUI(target);        if (ui != null) {          uis.addElement(ui);        }      }    }  } else {    return null;  }  if (uis.size() == 1) {    return (ComponentUI)uis.elementAt(0);  } else {    return mui;  }}  }
class C{  final Node<K,V> untreeify(HashMap<K,V> map){  Node<K,V> hd=null, tl=null;  for (Node<K,V> q=this; q != null; q=q.next) {    Node<K,V> p=map.replacementNode(q,null);    if (tl == null)     hd=p; else     tl.next=p;    tl=p;  }  return hd;}  }
class C{  public Set searchUsers(String wildcard,Map avPairs,int level) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(USER),getSearchFilter(AMObject.USER),wildcard,avPairs,level);}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.XACMLAuthzServiceElement createXACMLAuthzServiceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.XACMLAuthzServiceElementImpl();}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  retrieveCommonProperties();  try {    IDFFModel model=(IDFFModel)getModel();    AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTES);    Map stdValues=ps.getAttributeValues(model.getEntityIDPDescriptor(realm,entityName),false,model);    Map extValues=ps.getAttributeValues(model.getAllIDPExtendedMetaMap(),false,model);    Map idpAllExtValues=model.getIDPEntityConfig(realm,entityName,ENTITY_LOCATION);    idpAllExtValues.putAll(extValues);    model.updateEntityIDPDescriptor(realm,entityName,stdValues,idpAllExtValues,isHosted());    model.updateIDPEntityConfig(realm,entityName,idpAllExtValues);    if (isHosted()) {      model.updateIDPAuthenticationContexts(realm,entityName,getAuthenticationContexts());    }    setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","idff.entityDescriptor.provider.idp.updated");  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  public HS256Helper(byte[] secret,String challenge){  this.secret=secret;  this.challenge=challenge;  perform();}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType ownerDocument;  doc=(Document)load("staff",false);  ownerDocument=(DocumentType)doc.getOwnerDocument();  assertNull("throw_Null",ownerDocument);}  }
class C{  @DataProvider public Object[][] invalidAttributeDescriptions(){  return new Object[][]{{"cn+xxx",false},{"cn_xxx",false},{"cn.xxx",false},{"cn+xxx",true},{"cn;xxx+yyy",false},{"cn;xxx_yyy",false},{"cn;xxx.yyy",false},{"cn;xxx+yyy",true}};}  }
class C{  public void init(DSAParameterGenerationParameters params){  this.use186_3=true;  this.L=params.getL();  this.N=params.getN();  this.certainty=params.getCertainty();  this.random=params.getRandom();  this.usageIndex=params.getUsageIndex();  if ((L < 1024 || L > 3072) || L % 1024 != 0) {    throw new IllegalArgumentException("L values must be between 1024 and 3072 and a multiple of 1024");  } else   if (L == 1024 && N != 160) {    throw new IllegalArgumentException("N must be 160 for L = 1024");  } else   if (L == 2048 && (N != 224 && N != 256)) {    throw new IllegalArgumentException("N must be 224 or 256 for L = 2048");  } else   if (L == 3072 && N != 256) {    throw new IllegalArgumentException("N must be 256 for L = 3072");  }  if (digest.getDigestSize() * 8 < N) {    throw new IllegalStateException("Digest output size too small for value of N");  }}  }
class C{  public boolean isErrorButtonShown(){  return mShowErrorButton;}  }
class C{  private int injectCallbacks(final Callback[] realCallbacks,final int state) throws AuthLoginException {  if (authenticationContext.hasMoreRequirements()) {    if (realCallbacks != null) {      authenticationContext.submitRequirements(realCallbacks);    }    if (authenticationContext.hasMoreRequirements()) {      return injectAndReturn(state);    } else {      return finishLoginModule(state);    }  }  return processError(bundle.getString("invalidLoginState"),"SAML2 :: injectCallbacks() : Authentication Module - invalid login state");}  }
class C{  public DebugConfigurationFromProperties(String debugFilePropertiesPath) throws InvalidDebugConfigurationException {  InputStream is=null;  try {    is=DebugConfigurationFromProperties.class.getResourceAsStream(debugFilePropertiesPath);    if (is == null) {      throw new InvalidDebugConfigurationException("Can't find the configuration file '" + debugFilePropertiesPath + "'.");    }    Properties rotationConfig=new Properties();    rotationConfig.load(is);    debugPrefix=rotationConfig.getProperty(DebugConstants.CONFIG_DEBUG_LOGFILE_PREFIX);    debugSuffix=rotationConfig.getProperty(DebugConstants.CONFIG_DEBUG_LOGFILE_SUFFIX);    String maxFileSizedInMb=rotationConfig.getProperty(DebugConstants.CONFIG_DEBUG_LOGFILE_MAX_SIZE);    if (!StringUtils.isEmpty(maxFileSizedInMb)) {      try {        maxFileSizeInByte=Integer.parseInt(maxFileSizedInMb);        maxFileSizeInByte<<=20;      } catch (      NumberFormatException e) {        String message="The '" + DebugConstants.CONFIG_DEBUG_LOGFILE_MAX_SIZE + "' value : "+ maxFileSizedInMb+ "' cannot be parsed. Please check the configuration file '"+ DebugConstants.CONFIG_DEBUG_PROPERTIES+ "'.";        StdDebugFile.printError(DebugConfigurationFromProperties.class.getSimpleName(),message,e);      }    }    String rotation=rotationConfig.getProperty(DebugConstants.CONFIG_DEBUG_LOGFILE_ROTATION);    if (!StringUtils.isEmpty(rotation)) {      try {        rotationInterval=Integer.parseInt(rotation);      } catch (      NumberFormatException e) {        String message="'" + DebugConstants.CONFIG_DEBUG_LOGFILE_ROTATION + "' value can't be parsed: '"+ rotation+ "'. Please check the configuration file '"+ DebugConstants.CONFIG_DEBUG_PROPERTIES+ "'.";        StdDebugFile.printError(DebugConfigurationFromProperties.class.getSimpleName(),message,e);        rotationInterval=-1;      }    }    validate();  } catch (  IOException ex) {    String message="Can't load debug file properties. Please check the configuration file '" + debugFilePropertiesPath + "'.";    throw new InvalidDebugConfigurationException(message);  } finally {    IOUtils.closeIfNotNull(is);  }}  }
class C{  static void updateHash(int[] intArray,byte[] byteInput,int fromByte,int toByte){  int index=intArray[BYTES_OFFSET];  int i=fromByte;  int maxWord;  int nBytes;  int wordIndex=index >> 2;  int byteIndex=index & 0x03;  intArray[BYTES_OFFSET]=(index + toByte - fromByte + 1) & 077;  if (byteIndex != 0) {    for (; (i <= toByte) && (byteIndex < 4); i++) {      intArray[wordIndex]|=(byteInput[i] & 0xFF) << ((3 - byteIndex) << 3);      byteIndex++;    }    if (byteIndex == 4) {      wordIndex++;      if (wordIndex == 16) {        computeHash(intArray);        wordIndex=0;      }    }    if (i > toByte) {      return;    }  }  maxWord=(toByte - i + 1) >> 2;  for (int k=0; k < maxWord; k++) {    intArray[wordIndex]=(((int)byteInput[i] & 0xFF) << 24) | (((int)byteInput[i + 1] & 0xFF) << 16) | (((int)byteInput[i + 2] & 0xFF) << 8)| (((int)byteInput[i + 3] & 0xFF));    i+=4;    wordIndex++;    if (wordIndex < 16) {      continue;    }    computeHash(intArray);    wordIndex=0;  }  nBytes=toByte - i + 1;  if (nBytes != 0) {    int w=((int)byteInput[i] & 0xFF) << 24;    if (nBytes != 1) {      w|=((int)byteInput[i + 1] & 0xFF) << 16;      if (nBytes != 2) {        w|=((int)byteInput[i + 2] & 0xFF) << 8;      }    }    intArray[wordIndex]=w;  }  return;}  }
class C{  public void addOperation(OperationInfo operation){  operations.put(createOperationKey(operation),operation);}  }
class C{  @Override public void unlock(){  diffLock.unlock();}  }
class C{  public ArtifactResponse createArtifactResponse(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ARTIFACT_RESPONSE,xml);  if (obj == null) {    return new ArtifactResponseImpl(xml);  } else {    return (ArtifactResponse)obj;  }}  }
class C{  public void processVirtualAttributes(){  for (  VirtualAttributeRule rule : DirectoryServer.getVirtualAttributes(this)) {    AttributeType attributeType=rule.getAttributeType();    List<Attribute> attrList=userAttributes.get(attributeType);    if (attrList == null || attrList.isEmpty()) {      attrList=operationalAttributes.get(attributeType);      if (attrList == null || attrList.isEmpty()) {        Attribute attr=new VirtualAttribute(attributeType,this,rule);        putAttributes(attributeType,newLinkedList(attr));      } else {        resolveVirtualConflict(rule,attrList,operationalAttributes,attributeType);      }    } else {      resolveVirtualConflict(rule,attrList,userAttributes,attributeType);    }  }  processCollectiveAttributes();}  }
class C{  public void fill_ellipse_arr(PlaEllipse[] p_ellipse_arr,Graphics p_g,Color p_color,double p_translucency_factor){  if (p_color == null)   return;  if (p_ellipse_arr.length <= 0)   return;  GeneralPath draw_path=new GeneralPath(GeneralPath.WIND_EVEN_ODD);  for (  PlaEllipse curr_ellipse : p_ellipse_arr) {    Point2D center=coordinate_transform.board_to_screen(curr_ellipse.center);    double bigger_radius=coordinate_transform.board_to_screen(curr_ellipse.bigger_radius);    if (!point_near_rectangle(center.getX(),center.getY(),(Rectangle)p_g.getClip(),bigger_radius)) {      continue;    }    double smaller_radius=coordinate_transform.board_to_screen(curr_ellipse.smaller_radius);    Ellipse2D draw_ellipse=new Ellipse2D.Double(center.getX() - bigger_radius,center.getY() - smaller_radius,2 * bigger_radius,2 * smaller_radius);    double rotation=coordinate_transform.board_to_screen_angle(curr_ellipse.rotation);    AffineTransform affine_transform=new AffineTransform();    affine_transform.rotate(rotation,center.getX(),center.getY());    Shape rotated_ellipse=affine_transform.createTransformedShape(draw_ellipse);    draw_path.append(rotated_ellipse,false);  }  Graphics2D g2=(Graphics2D)p_g;  g2.setColor(p_color);  set_translucency(g2,p_translucency_factor);  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  g2.fill(draw_path);}  }
class C{  public Socket accept() throws IOException {  checkOpen();  if (!isBound()) {    throw new SocketException("Socket is not bound");  }  Socket aSocket=new Socket();  try {    implAccept(aSocket);  } catch (  IOException e) {    aSocket.close();    throw e;  }  return aSocket;}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  Stylesheet thisSheet=handler.getStylesheet();  WhitespaceInfoPaths paths=new WhitespaceInfoPaths(thisSheet);  setPropertiesFromAttributes(handler,rawName,attributes,paths);  Vector xpaths=paths.getElements();  for (int i=0; i < xpaths.size(); i++) {    WhiteSpaceInfo wsi=new WhiteSpaceInfo((XPath)xpaths.elementAt(i),false,thisSheet);    wsi.setUid(handler.nextUid());    thisSheet.setPreserveSpaces(wsi);  }  paths.clearElements();}  }
class C{  public void onLoginSuccess(Map requestParamsMap,HttpServletRequest request,HttpServletResponse response,SSOToken ssoToken) throws AuthenticationException {  if (request == null) {    debug.message("ReplayPasswd.onLoginSuccess: request is not available, password is not saved.");    return;  }  if (debug.messageEnabled()) {    debug.message("ReplayPasswd.onLoginSuccess called: Req:" + request.getRequestURL());  }  try {    if (requestParamsMap == null) {      debug.warning("ReplayPasswd: unable to get user password as requestParamsMap is null");    } else {      String userpasswd=(String)requestParamsMap.get(ISAuthConstants.SHARED_STATE_PASSWORD);      if (StringUtils.isNotEmpty(userpasswd)) {        String encryptedPassword=encryptPassword(userpasswd);        if (StringUtils.isNotBlank(encryptedPassword)) {          ssoToken.setProperty(SUN_IDENTITY_USER_PASSWORD,encryptedPassword);        } else         if (debug.warningEnabled()) {          debug.warning("ReplayPasswd: unable to set encrypted Password as encrypted value is empty");        }      } else       if (debug.warningEnabled()) {        debug.warning("ReplayPasswd: unable to get user password to encrypt");      }    }    String iisOwaEnabled=SystemProperties.get(IIS_OWA_ENABLED);    String strAttributeName=SystemProperties.get(SHAREPOINT_LOGIN_ATTR_NAME);    if (Boolean.parseBoolean(iisOwaEnabled)) {      Cookie owaAuthCookie;      for (      String domain : AuthUtils.getCookieDomainsForRequest(request)) {        owaAuthCookie=CookieUtils.newCookie(OWA_AUTH_COOKIE,OWA_AUTH_COOKIE_VALUE,"/",domain);        CookieUtils.addCookieToResponse(response,owaAuthCookie);      }    }    if (strAttributeName != null && !strAttributeName.trim().equals("")) {      AMIdentity amIdentityUser=IdUtils.getIdentity(ssoToken);      Map attrMap=amIdentityUser.getAttributes();      String strAttributeValue=Misc.getMapAttr(attrMap,strAttributeName,null);      if (strAttributeValue != null) {        ssoToken.setProperty(SHAREPOINT_LOGIN_ATTR_VALUE,strAttributeValue);      }      if (debug.messageEnabled()) {        debug.message("ReplayPasswd.onLoginSuccess: " + strAttributeName + "="+ strAttributeValue);      }    }    if (debug.messageEnabled()) {      debug.message("ReplayPasswd.onLoginSuccess: Replay password concluded successfully");    }  } catch (  IdRepoException ire) {    debug.error("ReplayPasswd.onLoginSuccess: IOException while fetching user attributes: " + ire);  }catch (  NoSuchAlgorithmException noe) {    debug.error("ReplayPasswd.onLoginSuccess: NoSuchAlgorithmException" + " while setting session password property: " + noe);  }catch (  InvalidKeyException ike) {    debug.error("ReplayPasswd.onLoginSuccess: InvalidKeyException " + "while setting session password property: " + ike);  }catch (  IllegalBlockSizeException ibe) {    debug.error("ReplayPasswd.onLoginSuccess:IllegalBlockSizeException" + " while setting session password property: " + ibe);  }catch (  NoSuchPaddingException npe) {    debug.error("ReplayPasswd.onLoginSuccess: NoSuchPaddingException " + "while setting session password property: " + npe);  }catch (  BadPaddingException bpe) {    debug.error("ReplayPasswd.onLoginSuccess: BadPaddingException " + "while setting session password property: " + bpe);  }catch (  SSOException sse) {    debug.error("ReplayPasswd.onLoginSuccess: SSOException while setting session password property: " + sse);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node secondChildNode;  Node textNode;  Node noChildNode;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(0);  employeeList=employeeNode.getChildNodes();  secondChildNode=employeeList.item(1);  textNode=secondChildNode.getFirstChild();  noChildNode=textNode.getFirstChild();  assertNull("nodeGetFirstChildNullAssert1",noChildNode);}  }
class C{  public static Objectify ofy(){  return ObjectifyService.ofy();}  }
class C{  public void newLine() throws IOException {  write(lineSeparator);}  }
class C{  public void testSetBitPositiveInside1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=20;  byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  EndParagraphAction(String nm,boolean select){  super(nm);  this.select=select;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node child;  String childName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  child=employeeList.item(0);  childName=child.getNodeName();  if (!equals("#text",childName)) {    assertEquals("childName","employeeId",childName);  }}  }
class C{  public String deferenceRestrictedID(Session session,String restrictedID) throws SessionException {  SessionID sessionId=new SessionID(restrictedID);  return sessionOperationStrategy.getOperation(session.getSessionID()).deferenceRestrictedID(session,sessionId);}  }
class C{  public TimeDescriptionImpl(){  timeImpl=new TimeField();  repeatList=new Vector();}  }
class C{  public static boolean isAbsolutePath(String systemId){  if (systemId == null)   return false;  final File file=new File(systemId);  return file.isAbsolute();}  }
class C{  public DTMIterator cloneWithReset() throws CloneNotSupportedException {  OneStepIterator clone=(OneStepIterator)super.cloneWithReset();  clone.m_iterator=m_iterator;  return clone;}  }
class C{  public StatusCode createStatusCode() throws XACMLException {  Object object=XACMLSDKUtils.getObjectInstance(XACMLConstants.STATUS_CODE);  if (object == null) {    return new StatusCodeImpl();  } else {    return (StatusCode)object;  }}  }
class C{  public boolean isSameNode(Node other){  return this == other;}  }
class C{  public ActionLog(long id,long timestamp,long logEventID,String ruleName,String appName,String actionName,String parameters,String text){  super(id,timestamp,text);  this.ruleName=ruleName;  this.logEventID=logEventID;  this.appName=appName;  this.actionName=actionName;  this.parameters=parameters;}  }
class C{  private DelegationPrivilege policyToPrivilege(Policy policy) throws DelegationException {  String pname=null;  Set permissions=new HashSet();  Set svalues=new HashSet();  if (policy == null) {    return null;  }  try {    pname=policy.getName();    Set snames=policy.getSubjectNames();    if ((snames != null) && (!snames.isEmpty())) {      if (snames.contains(DELEGATION_AUTHN_USERS)) {        svalues.add(AUTHN_USERS_ID);      }      if (snames.contains(DELEGATION_SUBJECT)) {        Subject subject=policy.getSubject(DELEGATION_SUBJECT);        Set values=subject.getValues();        if (values != null) {          svalues.addAll(values);        }      }    }    if (DelegationManager.debug.messageEnabled()) {      DelegationManager.debug.message("SubjectValues=" + svalues);    }    String realmName=null;    String serviceName=null;    String version=null;    String configType=null;    String subconfigName=null;    String resource=null;    Set actions=null;    Set ruleNames=policy.getRuleNames();    if ((ruleNames != null) && (!ruleNames.isEmpty())) {      Iterator rit=ruleNames.iterator();      while (rit.hasNext()) {        String ruleName=(String)rit.next();        Rule rule=policy.getRule(ruleName);        String service=rule.getServiceTypeName();        if (service.equalsIgnoreCase(DelegationManager.DELEGATION_SERVICE)) {          resource=rule.getResourceName();          actions=rule.getActionNames();          if (resource.startsWith(PREFIX)) {            String suffix=resource.substring(PREFIX.length());            if (suffix != null) {              StringTokenizer st=new StringTokenizer(suffix,DELIMITER);              realmName=st.nextToken();              if (st.hasMoreTokens()) {                serviceName=st.nextToken();                if (st.hasMoreTokens()) {                  version=st.nextToken();                  if (st.hasMoreTokens()) {                    configType=st.nextToken();                    if (st.hasMoreTokens()) {                      subconfigName=st.nextToken();                      while (st.hasMoreTokens()) {                        subconfigName+=DELIMITER + st.nextToken();                      }                    }                  }                }              }            }          }          if (DelegationManager.debug.messageEnabled()) {            DelegationManager.debug.message("DelegationPolicyImpl.policyToPrivilege(): " + "create DelegationPermission object with: " + "realm=" + realmName + "; service="+ serviceName+ "; version="+ version+ "; configType="+ configType+ "; subconfig="+ subconfigName+ "; actions="+ actions);          }          DelegationPermission dp=new DelegationPermission(realmName,serviceName,version,configType,subconfigName,actions,null);          permissions.add(dp);        }      }    }    return new DelegationPrivilege(pname,permissions,svalues);  } catch (  Exception e) {    throw new DelegationException(e);  }}  }
class C{  @Override public synchronized void flush(){  if (writer != null) {    try {      writer.flush();    } catch (    Exception ex) {      reportError(null,ex,ErrorManager.FLUSH_FAILURE);    }  }}  }
class C{  public void test_putLjava_lang_ObjectLjava_lang_Object(){  WeakHashMap map=new WeakHashMap();  map.put(null,"value");  System.gc();  System.gc();  FinalizationTester.induceFinalization();  map.remove("nothing");  assertEquals("null key was removed",1,map.size());}  }
class C{  public boolean beginIsRequiredDisplay(ChildDisplayEvent event){  boolean required=false;  if ((requiredList != null) && !requiredList.isEmpty()) {    String s=(String)requiredList.get(curTile - 1);    if ((s != null) && (s.length() > 0)) {      required=true;    }  }  return required;}  }
class C{  public MimeType(String primary,String sub,MimeTypeParameterList mtpl) throws MimeTypeParseException {  if (isValidToken(primary)) {    primaryType=primary.toLowerCase(Locale.ENGLISH);  } else {    throw new MimeTypeParseException("Primary type is invalid.");  }  if (isValidToken(sub)) {    subType=sub.toLowerCase(Locale.ENGLISH);  } else {    throw new MimeTypeParseException("Sub type is invalid.");  }  parameters=(MimeTypeParameterList)mtpl.clone();}  }
class C{  public static void dataChanged(Context context){  if (sBackupManager == null) {    sBackupManager=new BackupManager(context);  }  sBackupManager.dataChanged();}  }
class C{  public JAXBException(String message,String errorCode){  this(message,errorCode,null);}  }
class C{  public static Attribute merge(Attribute a1,Attribute a2,Collection<ByteString> duplicateValues){  AttributeBuilder builder=new AttributeBuilder(a1);  for (  ByteString av : a2) {    if (!builder.add(av) && duplicateValues != null) {      duplicateValues.add(av);    }  }  return builder.toAttribute();}  }
class C{  @Override public int read() throws IOException {  if (eof) {    throw new IOException("Read after end of file");  }  if (position == size) {    return doEndOfFile();  }  position++;  return processByte();}  }
class C{  @Override public Foo fetchByUUID_G(String uuid,long groupId,boolean retrieveFromCache){  Object[] finderArgs=new Object[]{uuid,groupId};  Object result=null;  if (retrieveFromCache) {    result=finderCache.getResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs,this);  }  if (result instanceof Foo) {    Foo foo=(Foo)result;    if (!Objects.equals(uuid,foo.getUuid()) || (groupId != foo.getGroupId())) {      result=null;    }  }  if (result == null) {    StringBundler query=new StringBundler(4);    query.append(_SQL_SELECT_FOO_WHERE);    boolean bindUuid=false;    if (uuid == null) {      query.append(_FINDER_COLUMN_UUID_G_UUID_1);    } else     if (uuid.equals(StringPool.BLANK)) {      query.append(_FINDER_COLUMN_UUID_G_UUID_3);    } else {      bindUuid=true;      query.append(_FINDER_COLUMN_UUID_G_UUID_2);    }    query.append(_FINDER_COLUMN_UUID_G_GROUPID_2);    String sql=query.toString();    Session session=null;    try {      session=openSession();      Query q=session.createQuery(sql);      QueryPos qPos=QueryPos.getInstance(q);      if (bindUuid) {        qPos.add(uuid);      }      qPos.add(groupId);      List<Foo> list=q.list();      if (list.isEmpty()) {        finderCache.putResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs,list);      } else {        Foo foo=list.get(0);        result=foo;        cacheResult(foo);        if ((foo.getUuid() == null) || !foo.getUuid().equals(uuid) || (foo.getGroupId() != groupId)) {          finderCache.putResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs,foo);        }      }    } catch (    Exception e) {      finderCache.removeResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs);      throw processException(e);    } finally {      closeSession(session);    }  }  if (result instanceof List<?>) {    return null;  } else {    return (Foo)result;  }}  }
class C{  public void sort(int a[],int lo0,int hi0) throws Exception {  int lo=lo0;  int hi=hi0;  if (lo >= hi) {    return;  } else   if (lo == hi - 1) {    if (a[lo] > a[hi]) {      int T=a[lo];      a[lo]=a[hi];      a[hi]=T;    }    return;  }  int pivot=a[(lo + hi) / 2];  a[(lo + hi) / 2]=a[hi];  a[hi]=pivot;  while (lo < hi) {    while (a[lo] <= pivot && lo < hi) {      lo++;    }    while (pivot <= a[hi] && lo < hi) {      hi--;    }    if (lo < hi) {      int T=a[lo];      a[lo]=a[hi];      a[hi]=T;    }  }  a[hi0]=a[hi];  a[hi]=pivot;  sort(a,lo0,lo - 1);  sort(a,hi + 1,hi0);}  }
class C{  public boolean isTracking(){  return isTracking;}  }
class C{  public void test_ConstructorLjava_lang_ObjectLjava_lang_ref_ReferenceQueue(){  ReferenceQueue rq=new ReferenceQueue();  bool=new Boolean(true);  try {    WeakReference wr=new WeakReference(bool,rq);    assertTrue("Initialization failed.",((Boolean)wr.get()).booleanValue());  } catch (  Exception e) {    fail("Exception during test : " + e.getMessage());  }  assertTrue("should always pass",bool.booleanValue());  boolean exception=false;  try {    new WeakReference(bool,null);  } catch (  NullPointerException e) {    exception=true;  }  assertTrue("Should not throw NullPointerException",!exception);}  }
class C{  public String buildUser(){  return properties.getProperty("build.user");}  }
class C{  UnsavedChangesDialog.Result checkUnsavedChanges(){  UnsavedChangesDialog.Result result;  UnsavedChangesDialog unsavedChangesDlg=new UnsavedChangesDialog(Utilities.getParentDialog(this),getInfo());  unsavedChangesDlg.setMessage(INFO_CTRL_PANEL_UNSAVED_CHANGES_SUMMARY.get(),INFO_CTRL_PANEL_UNSAVED_INDEX_CHANGES_DETAILS.get(index.getName()));  Utilities.centerGoldenMean(unsavedChangesDlg,Utilities.getParentDialog(this));  unsavedChangesDlg.setVisible(true);  result=unsavedChangesDlg.getResult();  if (result == UnsavedChangesDialog.Result.SAVE) {    saveIndex(false);    if (newModifyTask == null || newModifyTask.getState() != Task.State.FINISHED_SUCCESSFULLY) {      result=UnsavedChangesDialog.Result.CANCEL;    }  }  return result;}  }
class C{  public Void call() throws Exception {  byte[] buff=new byte[2048];  try {    serverSocket.setSoTimeout(TIMEOUT);    peerSocket=serverSocket.accept();    peerSocket.setSoTimeout(TIMEOUT);    log("Client connection ACCEPTED");    InputStream is=peerSocket.getInputStream();    OutputStream os=peerSocket.getOutputStream();    int num=is.read(buff);    if (num == -1) {      log("Unexpected EOF");      return null;    }    String message=new String(buff,0,num);    log("Got request:\n" + message);    log("------------------");    if (!actAsProxy) {      if (message.startsWith("POST")) {        log("try to read client data");        String data=message.substring(message.indexOf("\r\n\r\n") + 4);        log("client's data: '" + data + "'");        assertEquals(clientsData,data);      }    } else {      if (needProxyAuthentication) {        log("Authentication required...");        os.write(respAuthenticationRequired.getBytes());        num=is.read(buff);        if (num == -1) {          closeSocket(peerSocket);          peerSocket=serverSocket.accept();          peerSocket.setSoTimeout(TIMEOUT);          log("New client connection ACCEPTED");          is=peerSocket.getInputStream();          os=peerSocket.getOutputStream();          num=is.read(buff);        }        message=new String(buff,0,num);        log("Got authenticated request:\n" + message);        log("------------------");        assertTrue("no proxy-authorization credentials: " + message,message.toLowerCase().indexOf("proxy-authorization:") != -1);      }      assertTrue(message.startsWith("CONNECT"));      log("Send proxy response");      os.write(proxyResponse.getBytes());      log("Perform SSL Handshake...");      SSLSocket sslSocket=(SSLSocket)getContext().getSocketFactory().createSocket(peerSocket,"localhost",peerSocket.getPort(),true);      sslSocket.setUseClientMode(false);      sslSocket.setNeedClientAuth(true);      sslSocket.startHandshake();      peerSocket=sslSocket;      is=peerSocket.getInputStream();      os=peerSocket.getOutputStream();      num=is.read(buff);      message=new String(buff,0,num);      log("[Remote Server] Request from SSL tunnel:\n" + message);      log("------------------");      if (message.startsWith("POST")) {        log("[Remote Server] try to read client data");        String data=message.substring(message.indexOf("\r\n\r\n") + 4);        log("[Remote Server] client's data: '" + message + "'");        assertEquals(clientsData,data);      }      log("[Remote Server] Sending the response by SSL tunnel...");    }    os.write(("HTTP/1.1 " + responseCode + " Message\r\n"+ httpsResponseTail).getBytes());    os.flush();    os.close();    log("Work is DONE actAsProxy=" + actAsProxy);    return null;  }  finally {    closeSocket(peerSocket);    try {      serverSocket.close();    } catch (    IOException e) {    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode07.class,args);}  }
class C{  private int awaitDone(boolean timed,long nanos) throws InterruptedException {  final long deadline=timed ? System.nanoTime() + nanos : 0L;  WaitNode q=null;  boolean queued=false;  for (; ; ) {    if (Thread.interrupted()) {      removeWaiter(q);      throw new InterruptedException();    }    int s=state;    if (s > COMPLETING) {      if (q != null)       q.thread=null;      return s;    } else     if (s == COMPLETING)     Thread.yield(); else     if (q == null)     q=new WaitNode(); else     if (!queued)     queued=UNSAFE.compareAndSwapObject(this,waitersOffset,q.next=waiters,q); else     if (timed) {      nanos=deadline - System.nanoTime();      if (nanos <= 0L) {        removeWaiter(q);        return state;      }      LockSupport.parkNanos(this,nanos);    } else     LockSupport.park(this);  }}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AuthnStatementElement createAuthnStatementElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AuthnStatementElementImpl();}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.SPKIDataElement createSPKIDataElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.SPKIDataElementImpl();}  }
class C{  static void checkUnsignedShort(final int value,final String msg){  if (value < 0 || value > 65535) {    throw new IllegalArgumentException(msg + " (must be an unsigned short): " + value);  }}  }
class C{  public void removePostDial(){  parameters.delete(POSTDIAL);}  }
class C{  public String toXMLString(){  StringBuilder xml=new StringBuilder(300);  xml.append("<?xml version=").append(QUOTE).append("1.0").append(QUOTE).append(" encoding=").append(QUOTE).append("UTF-8").append(QUOTE).append(" standalone=").append(QUOTE).append("yes").append(QUOTE).append("?>").append(NL);  xml.append("<NotificationSet vers=").append(QUOTE).append(notificationSetVersion).append(QUOTE).append(" svcid=").append(QUOTE).append(serviceID).append(QUOTE).append(" notid=").append(QUOTE).append(notificationSetID).append(QUOTE).append('>').append(NL);  int numNotifications=notificationVector.size();  for (int i=0; i < numNotifications; i++) {    Notification notif=notificationVector.elementAt(i);    xml.append("<Notification");    if (notif.getDtdID() != null) {      xml.append(" dtdid=").append(QUOTE).append(notif.getDtdID()).append(QUOTE);    }    xml.append('>');    xml.append(BEGIN_CDATA).append(notif.getContent()).append(END_CDATA);    xml.append("</Notification>").append(NL);  }  xml.append("</NotificationSet>");  return (xml.toString());}  }
class C{  public HttpException(){  super();}  }
class C{  public JsonArray add(Object value){  list.add(value);  return this;}  }
class C{  public PKCS10CertificationRequest(String signatureAlgorithm,X500Principal subject,PublicKey key,ASN1Set attributes,PrivateKey signingKey,String provider) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  this(signatureAlgorithm,convertName(subject),key,attributes,signingKey,provider);}  }
class C{  protected Object engineGetParameter(String param) throws InvalidParameterException {  if (param == null) {    throw new NullPointerException("param == null");  }  return null;}  }
class C{  public QueryFailedException(Connection connection,DN dn,Filter filter,Throwable cause){  super(MessageFormat.format("Failed to complete query:\n" + "      DN: {0}\n" + "    Conn: {1}\n"+ "  Filter: {2}",dn,connection,filter),cause);}  }
class C{  protected void writeComponent(Element elem) throws IOException {}  }
class C{  public void stopRecord(){  if (recordStatus != RecordStatus.RUNNING) {    return;  }  recordHistory.put(newDate(),STOPPED);  recordStatus=RecordStatus.STOPPED;}  }
class C{  public MappedMember findFieldByNameAndDesc(String name,String desc,boolean useOriginalName){  for (  MappedMember mm : getFields()) {    if (mm.getDesc().equals(desc) && useOriginalName ? mm.getOriginalName().equals(name) : mm.getNewName().equals(name)) {      return mm;    }  }  return null;}  }
class C{  public StaticResponseHandler addHeader(final String key,final Expression<String> expression){  headers.add(key,expression);  return this;}  }
class C{  public void write(char buf[],int off,int len){  try {synchronized (lock) {      ensureOpen();      out.write(buf,off,len);    }  } catch (  InterruptedIOException x) {    Thread.currentThread().interrupt();  }catch (  IOException x) {    trouble=true;  }}  }
class C{  @Override protected Object createSsoServerInstanceMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  if (server != null)   instanceGroup=new SsoServerInstanceImpl(this,server); else   instanceGroup=new SsoServerInstanceImpl(this);  return instanceGroup;}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public boolean evaluateCondition(JsonValue sourceObject,JsonValue oldSource,JsonValue targetObject,JsonValue oldTarget,String linkQualifier,Context context) throws SynchronizationException {  JsonValue params=json(object(field("object",sourceObject),field("target",targetObject),field("linkQualifier",linkQualifier)));  if (oldSource != null) {    params.put("oldSource",oldSource);  }  if (oldTarget != null) {    params.put("oldTarget",oldTarget);  }  return condition.evaluate(params,context);}  }
class C{  public boolean redo(ObserverItem p_observers){  if (!undo_list.redo(null,null))   return false;  restore_component_arr_from_undo_list(p_observers);  return true;}  }
class C{  public static ModifyRequest newModifyRequest(final String... ldifLines){  final ChangeRecord record=LDIFChangeRecordReader.valueOfLDIFChangeRecord(ldifLines);  if (record instanceof ModifyRequest) {    return (ModifyRequest)record;  } else {    final LocalizableMessage message=WARN_READ_LDIF_RECORD_CHANGE_RECORD_WRONG_TYPE.get("modify");    throw new LocalizedIllegalArgumentException(message);  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doPost(request,response);}  }
class C{  public static List<Foo> toModels(FooSoap[] soapModels){  if (soapModels == null) {    return null;  }  List<Foo> models=new ArrayList<Foo>(soapModels.length);  for (  FooSoap soapModel : soapModels) {    models.add(toModel(soapModel));  }  return models;}  }
class C{  public UnmodifiableSetException(String message){  super(message);}  }
class C{  private static boolean isWindowsAbsolutePath(String systemId){  if (!isAbsolutePath(systemId))   return false;  if (systemId.length() > 2 && systemId.charAt(1) == ':' && Character.isLetter(systemId.charAt(0)) && (systemId.charAt(2) == '\\' || systemId.charAt(2) == '/'))   return true; else   return false;}  }
class C{  boolean isSpacePreserve(){  return m_spacePreserveStack.peek();}  }
class C{  private SingleLogoutManager(){  try {    ConfigurationInstance configInst=ConfigurationManager.getConfigurationInstance(MULTI_PROTOCOL_CONFIG_NAME);    Map attrs=configInst.getConfiguration(null,null);    Set handlers=(Set)attrs.get("SingleLogoutHandlerList");    if (debug.messageEnabled()) {      debug.message("SingleLogoutManager.constructor: handlers set=" + handlers);    }    if ((handlers != null) && !handlers.isEmpty()) {      Iterator it=handlers.iterator();      while (it.hasNext()) {        String tmp=(String)it.next();        StringTokenizer tokens=new StringTokenizer(tmp,DELIMITOR);        if (tokens.countTokens() != 2) {          debug.error("SingleLogoutManager.constructor: wrong " + "handler value " + tmp);          continue;        }        String[] params=new String[2];        params[0]=tokens.nextToken();        params[1]=tokens.nextToken();        String key=null;        String className=null;        for (int i=0; i < 2; i++) {          int loc=params[i].indexOf("=");          if (i == -1) {            debug.error("SingleLogoutManager.constructor: " + "missing = in parameter " + params[i]);            break;          }          String first=params[i].substring(0,loc);          if (first.equalsIgnoreCase(KEY_PARAM)) {            key=params[i].substring(loc + 1);          } else           if (first.equalsIgnoreCase(CLASS_PARAM)) {            className=params[i].substring(loc + 1);          } else {            debug.error("SingleLogoutManager.constructor: " + "wrong key in parameter " + params[i]);            break;          }        }        if ((key == null) || (key.length() == 0) || (className == null)|| (className.length() == 0)) {          debug.error("SingleLogoutManager.constructor: " + "invalid value " + params[0] + "|"+ params[1]);          continue;        }        try {          if (key.equalsIgnoreCase(SAML2)) {            key=SAML2;          } else           if (key.equalsIgnoreCase(IDFF)) {            key=IDFF;          } else           if (key.equalsIgnoreCase(WS_FED)) {            key=WS_FED;          } else {            debug.error("SingleLogoutManager.constructor: " + "invalid protocol " + key);            continue;          }          SingleLogoutHandler handler=(SingleLogoutHandler)Class.forName(className).newInstance();          protocolList.add(key);          handlerMap.put(key,handler);        } catch (        ClassNotFoundException c) {          debug.error("SingleLogoutManager.constructor: " + "class not found " + className,c);        }catch (        InstantiationException i) {          debug.error("SingleLogoutManager.constructor: " + "instantiation exception " + className,i);        }catch (        IllegalAccessException i) {          debug.error("SingleLogoutManager.constructor: " + "illegal access exception " + className,i);        }      }    }    if (debug.messageEnabled()) {      debug.message("SingleLogoutManager.constructor: handlers map=" + handlerMap);    }  } catch (  ConfigurationException e) {    debug.error("Unable to initiate Single Loogut Manager",e);  }}  }
class C{  private String smallToString(int radix){  if (signum == 0) {    return "0";  }  int maxNumDigitGroups=(4 * mag.length + 6) / 7;  String digitGroup[]=new String[maxNumDigitGroups];  BigInteger tmp=this.abs();  int numGroups=0;  while (tmp.signum != 0) {    BigInteger d=longRadix[radix];    MutableBigInteger q=new MutableBigInteger(), a=new MutableBigInteger(tmp.mag), b=new MutableBigInteger(d.mag);    MutableBigInteger r=a.divide(b,q);    BigInteger q2=q.toBigInteger(tmp.signum * d.signum);    BigInteger r2=r.toBigInteger(tmp.signum * d.signum);    digitGroup[numGroups++]=Long.toString(r2.longValue(),radix);    tmp=q2;  }  StringBuilder buf=new StringBuilder(numGroups * digitsPerLong[radix] + 1);  if (signum < 0) {    buf.append('-');  }  buf.append(digitGroup[numGroups - 1]);  for (int i=numGroups - 2; i >= 0; i--) {    int numLeadingZeros=digitsPerLong[radix] - digitGroup[i].length();    if (numLeadingZeros != 0) {      buf.append(zeros[numLeadingZeros]);    }    buf.append(digitGroup[i]);  }  return buf.toString();}  }
class C{  public CharVector(char[] a){  blockSize=DEFAULT_BLOCK_SIZE;  array=a;  n=a.length;}  }
class C{  public Matcher reset(){  first=-1;  last=0;  oldLast=-1;  for (int i=0; i < groups.length; i++)   groups[i]=-1;  for (int i=0; i < locals.length; i++)   locals[i]=-1;  lastAppendPosition=0;  from=0;  to=getTextLength();  return this;}  }
class C{  public static Foo[] findByField2_PrevAndNext(long fooId,boolean field2,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByField2_PrevAndNext(fooId,field2,orderByComparator);}  }
class C{  public void mouseMoved(MouseEvent e){}  }
class C{  private void loadSelectData(AttributeSet attr,StringBuilder buffer){  String name=(String)attr.getAttribute(HTML.Attribute.NAME);  if (name == null) {    return;  }  Object m=attr.getAttribute(StyleConstants.ModelAttribute);  if (m instanceof OptionListModel) {    OptionListModel<Option> model=(OptionListModel<Option>)m;    for (int i=0; i < model.getSize(); i++) {      if (model.isSelectedIndex(i)) {        Option option=model.getElementAt(i);        appendBuffer(buffer,name,option.getValue());      }    }  } else   if (m instanceof ComboBoxModel) {    ComboBoxModel model=(ComboBoxModel)m;    Option option=(Option)model.getSelectedItem();    if (option != null) {      appendBuffer(buffer,name,option.getValue());    }  }}  }
class C{  public Finished(byte[] bytes){  data=bytes;  length=data.length;}  }
class C{  public SQLTimeoutException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public void printStackTrace(java.io.PrintWriter s){  if (s == null)   s=new java.io.PrintWriter(System.err);  try {    super.printStackTrace(s);  } catch (  Exception e) {  }  boolean isJdk14OrHigher=false;  try {    Throwable.class.getMethod("getCause",(Class<?>)null);    isJdk14OrHigher=true;  } catch (  NoSuchMethodException nsme) {  }  if (!isJdk14OrHigher) {    Throwable exception=m_exception;    for (int i=0; (i < 10) && (null != exception); i++) {      s.println("---------");      try {        exception.printStackTrace(s);      } catch (      Exception e) {        s.println("Could not print stack trace...");      }      if (exception instanceof TransformerException) {        TransformerException se=(TransformerException)exception;        Throwable prev=exception;        exception=se.getException();        if (prev == exception) {          exception=null;          break;        }      } else {        exception=null;      }    }  }}  }
class C{  public boolean isTimedOut(){  return timedOutTimeInSeconds != 0;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException, java.io.InvalidObjectException {  Object a=s.readFields().get("array",null);  if (a == null || !a.getClass().isArray())   throw new java.io.InvalidObjectException("Not array type");  if (a.getClass() != Object[].class)   a=Arrays.copyOf((Object[])a,Array.getLength(a),Object[].class);  unsafe.putObjectVolatile(this,arrayFieldOffset,a);}  }
class C{  public Set createAssignableDynamicGroups(Map groupsMap) throws AMException, SSOException {  Iterator iter=groupsMap.keySet().iterator();  Set groups=new HashSet();  while (iter.hasNext()) {    String groupName=(String)iter.next();    String groupDN=AMNamingAttrManager.getNamingAttr(GROUP) + "=" + groupName+ ","+ entryDN;    Map attributes=(Map)groupsMap.get(groupName);    AMAssignableDynamicGroupImpl groupImpl=new AMAssignableDynamicGroupImpl(token,groupDN);    groupImpl.setAttributes(attributes);    groupImpl.create();    groups.add(groupImpl);  }  return groups;}  }
class C{  private void parseMinorVersion(String minorVer) throws SAMLException, FSMsgException {  try {    minorVersion=Integer.parseInt(minorVer);  } catch (  NumberFormatException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnResponse(Element): invalid " + "MinorVersion",e);    }    throw new FSMsgException("wrongInput",null);  }  if (minorVersion > IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnResponse.checkMinorVersion:" + " Minor Version of the AuthnResponse is too high.");    }    throw new FSMsgException("requestVersionTooHigh",null);  } else   if (minorVersion < IFSConstants.FF_11_PROTOCOL_MINOR_VERSION) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnResponse.checkMinorVersion:" + " Minor Version of the AuthnResponse is too low.");    }    throw new FSMsgException("requestVersionTooLow",null);  }}  }
class C{  public static boolean putLong(Context context,String key,long value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putLong(key,value);  return editor.commit();}  }
class C{  public void testHandleLowMemory() throws Exception {  assertNull(cache.toVerboseString(),"Expected empty cache.  " + "Cache contents:" + ServerConstants.EOL + cache.toVerboseString());  cache.handleLowMemory();  cache.clear();}  }
class C{  private void findCRL(ASN1Sequence seq){  try {    crls=new ArrayList<>();    for (int k=0; k < seq.size(); ++k) {      ByteArrayInputStream ar=new ByteArrayInputStream(seq.getObjectAt(k).toASN1Primitive().getEncoded(ASN1Encoding.DER));      X509CRL crl=(X509CRL)SignUtils.parseCrlFromStream(ar);      crls.add(crl);    }  } catch (  Exception ex) {  }}  }
class C{  public Note(int octave,Tone tone,boolean sharped){  if (sharped && !tone.isSharpable()) {    tone=Tone.values()[tone.ordinal() + 1];    sharped=false;  }  if (octave < 0 || octave > 2 || (octave == 2 && !(tone == Tone.F && sharped))) {    throw new IllegalArgumentException("Tone and octave have to be between F#0 and F#2");  }  this.note=(byte)(octave * Tone.TONES_COUNT + tone.getId(sharped));}  }
class C{  protected void init(String text,Icon icon){  if (text != null) {    setText(text);  }  if (icon != null) {    setIcon(icon);  }  addFocusListener(new MenuItemFocusListener());  setUIProperty("borderPainted",Boolean.FALSE);  setFocusPainted(false);  setHorizontalTextPosition(JButton.TRAILING);  setHorizontalAlignment(JButton.LEADING);  updateUI();}  }
class C{  @Override public void dismiss(){  delegate.dismiss();}  }
class C{  public boolean markSupported(){  return false;}  }
class C{  public static Response sendAuthnQuery(AuthnQuery authnQuery,String authnAuthorityEntityID,String realm,String binding) throws SAML2Exception {  SAML2MetaManager metaManager=SAML2Utils.getSAML2MetaManager();  AuthnAuthorityDescriptorElement aad=null;  try {    aad=metaManager.getAuthnAuthorityDescriptor(realm,authnAuthorityEntityID);  } catch (  SAML2MetaException sme) {    SAML2Utils.debug.error("AttributeService.sendAuthnQuery:",sme);    throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));  }  if (aad == null) {    throw new SAML2Exception(SAML2Utils.bundle.getString("authnAuthorityNotFound"));  }  if (binding == null) {    throw new SAML2Exception(SAML2Utils.bundle.getString("unsupportedBinding"));  }  String location=null;  List authnService=aad.getAuthnQueryService();  for (Iterator iter=authnService.iterator(); iter.hasNext(); ) {    AuthnQueryServiceElement authnService1=(AuthnQueryServiceElement)iter.next();    if (binding.equalsIgnoreCase(authnService1.getBinding())) {      location=authnService1.getLocation();      break;    }  }  if (location == null) {    throw new SAML2Exception(SAML2Utils.bundle.getString("unsupportedBinding"));  }  if (binding.equalsIgnoreCase(SAML2Constants.SOAP)) {    signAuthnQuery(authnQuery,realm,false);    return sendAuthnQuerySOAP(authnQuery,location,authnAuthorityEntityID,realm,aad);  } else {    throw new SAML2Exception(SAML2Utils.bundle.getString("unsupportedBinding"));  }}  }
