class C{  protected SecureConnectionCliParser(String mainClassName,LocalizableMessage toolDescription,boolean longArgumentsCaseSensitive){  super(mainClassName,toolDescription,longArgumentsCaseSensitive);}  }
class C{  public void add(Permission permission){  if (!(permission instanceof DelegationPermission))   throw new IllegalArgumentException("invalid permission: " + permission);  if (isReadOnly())   throw new SecurityException("attempt to add a Permission to a readonly PermissionCollection");synchronized (this) {    perms.add(0,permission);  }}  }
class C{  public static void deregisterVirtualAttribute(VirtualAttributeRule rule){  getInstance().virtualAttributeConfigManager.deregister(rule);}  }
class C{  public UnmarshalException(String s,Exception ex){  super(s,ex);}  }
class C{  public static String readLine(InputStream inputStream) throws IOException {  return readLine(inputStream,CharsetUtils.DEFAULT_HTTP_ENCODING);}  }
class C{  public FileSystemAlreadyExistsException(){}  }
class C{  public void doMeasure(int widthMeasureSpec,int heightMeasureSpec){  if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) {    int tempSpec=widthMeasureSpec;    widthMeasureSpec=heightMeasureSpec;    heightMeasureSpec=tempSpec;  }  int width=View.getDefaultSize(mVideoWidth,widthMeasureSpec);  int height=View.getDefaultSize(mVideoHeight,heightMeasureSpec);  if (mCurrentAspectRatio == IRenderView.AR_MATCH_PARENT) {    width=widthMeasureSpec;    height=heightMeasureSpec;  } else   if (mVideoWidth > 0 && mVideoHeight > 0) {    int widthSpecMode=View.MeasureSpec.getMode(widthMeasureSpec);    int widthSpecSize=View.MeasureSpec.getSize(widthMeasureSpec);    int heightSpecMode=View.MeasureSpec.getMode(heightMeasureSpec);    int heightSpecSize=View.MeasureSpec.getSize(heightMeasureSpec);    if (widthSpecMode == View.MeasureSpec.AT_MOST && heightSpecMode == View.MeasureSpec.AT_MOST) {      float specAspectRatio=(float)widthSpecSize / (float)heightSpecSize;      float displayAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_16_9_FIT_PARENT:        displayAspectRatio=16.0f / 9.0f;      if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270)       displayAspectRatio=1.0f / displayAspectRatio;    break;case IRenderView.AR_4_3_FIT_PARENT:  displayAspectRatio=4.0f / 3.0f;if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) displayAspectRatio=1.0f / displayAspectRatio;break;case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_ASPECT_FILL_PARENT:case IRenderView.AR_ASPECT_WRAP_CONTENT:default :displayAspectRatio=(float)mVideoWidth / (float)mVideoHeight;if (mVideoSarNum > 0 && mVideoSarDen > 0) displayAspectRatio=displayAspectRatio * mVideoSarNum / mVideoSarDen;break;}boolean shouldBeWider=displayAspectRatio > specAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_16_9_FIT_PARENT:case IRenderView.AR_4_3_FIT_PARENT:if (shouldBeWider) {width=widthSpecSize;height=(int)(width / displayAspectRatio);} else {height=heightSpecSize;width=(int)(height * displayAspectRatio);}break;case IRenderView.AR_ASPECT_FILL_PARENT:if (shouldBeWider) {height=heightSpecSize;width=(int)(height * displayAspectRatio);} else {width=widthSpecSize;height=(int)(width / displayAspectRatio);}break;case IRenderView.AR_ASPECT_WRAP_CONTENT:default :if (shouldBeWider) {width=Math.min(mVideoWidth,widthSpecSize);height=(int)(width / displayAspectRatio);} else {height=Math.min(mVideoHeight,heightSpecSize);width=(int)(height * displayAspectRatio);}break;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY && heightSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=heightSpecSize;if (mVideoWidth * height < width * mVideoHeight) {width=height * mVideoWidth / mVideoHeight;} else if (mVideoWidth * height > width * mVideoHeight) {height=width * mVideoHeight / mVideoWidth;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;}} else if (heightSpecMode == View.MeasureSpec.EXACTLY) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;}} else {width=mVideoWidth;height=mVideoHeight;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;}if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;}}} else {}mMeasuredWidth=width;mMeasuredHeight=height;}  }
class C{  public void addNotify(DropTargetContextPeer dtcp){  dropTargetContextPeer=dtcp;}  }
class C{  Object processENUM(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  AVT avt=null;  if (getSupportsAVT()) {    try {      avt=new AVT(handler,uri,name,rawName,value,owner);      if (!avt.isSimple())       return avt;    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }  }  int retVal=this.getEnum(value);  if (retVal == StringToIntTable.INVALID_KEY) {    StringBuffer enumNamesList=getListOfEnums();    handleError(handler,XSLTErrorResources.INVALID_ENUM,new Object[]{name,value,enumNamesList.toString()},null);    return null;  }  if (getSupportsAVT())   return avt; else   return new Integer(retVal);}  }
class C{  public static byte[] encodeBase64(byte[] binaryData,boolean isChunked){  int lengthDataBits=binaryData.length * EIGHTBIT;  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  byte encodedData[]=null;  int encodedDataLength=0;  int nbrChunks=0;  if (fewerThan24bits != 0) {    encodedDataLength=(numberTriplets + 1) * 4;  } else {    encodedDataLength=numberTriplets * 4;  }  if (isChunked) {    nbrChunks=(CHUNK_SEPARATOR.length == 0 ? 0 : (int)Math.ceil((float)encodedDataLength / CHUNK_SIZE));    encodedDataLength+=nbrChunks * CHUNK_SEPARATOR.length;  }  encodedData=new byte[encodedDataLength];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  int i=0;  int nextSeparatorIndex=CHUNK_SIZE;  int chunksSoFar=0;  for (i=0; i < numberTriplets; i++) {    dataIndex=i * 3;    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    b3=binaryData[dataIndex + 2];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex + 3]=lookUpBase64Alphabet[b3 & 0x3f];    encodedIndex+=4;    if (isChunked) {      if (encodedIndex == nextSeparatorIndex) {        System.arraycopy(CHUNK_SEPARATOR,0,encodedData,encodedIndex,CHUNK_SEPARATOR.length);        chunksSoFar++;        nextSeparatorIndex=(CHUNK_SIZE * (chunksSoFar + 1)) + (chunksSoFar * CHUNK_SEPARATOR.length);        encodedIndex+=CHUNK_SEPARATOR.length;      }    }  }  dataIndex=i * 3;  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex + 2]=PAD;    encodedData[encodedIndex + 3]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex + 1]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex + 2]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex + 3]=PAD;  }  if (isChunked) {    if (chunksSoFar < nbrChunks) {      System.arraycopy(CHUNK_SEPARATOR,0,encodedData,encodedDataLength - CHUNK_SEPARATOR.length,CHUNK_SEPARATOR.length);    }  }  return encodedData;}  }
class C{  public Builder superiorObjectClasses(final String... objectClassNamesOrOIDs){  this.superiorClasses.addAll(asList(objectClassNamesOrOIDs));  return this;}  }
class C{  public void readAll() throws IOException {  if (in.readInt() != 0x9AC6CDD7) {    throw new PdfException(PdfException.NotAPlaceableWindowsMetafile);  }  in.readWord();  left=in.readShort();  top=in.readShort();  right=in.readShort();  bottom=in.readShort();  inch=in.readWord();  state.setScalingX((float)(right - left) / (float)inch * 72f);  state.setScalingY((float)(bottom - top) / (float)inch * 72f);  state.setOffsetWx(left);  state.setOffsetWy(top);  state.setExtentWx(right - left);  state.setExtentWy(bottom - top);  in.readInt();  in.readWord();  in.skip(18);  int tsize;  int function;  cb.setLineCapStyle(PdfCanvasConstants.LineCapStyle.ROUND);  cb.setLineJoinStyle(PdfCanvasConstants.LineJoinStyle.ROUND);  for (; ; ) {    int lenMarker=in.getLength();    tsize=in.readInt();    if (tsize < 3)     break;    function=in.readWord();switch (function) {case 0:      break;case META_CREATEPALETTE:case META_CREATEREGION:case META_DIBCREATEPATTERNBRUSH:    state.addMetaObject(new MetaObject());  break;case META_CREATEPENINDIRECT:{  MetaPen pen=new MetaPen();  pen.init(in);  state.addMetaObject(pen);  break;}case META_CREATEBRUSHINDIRECT:{MetaBrush brush=new MetaBrush();brush.init(in);state.addMetaObject(brush);break;}case META_CREATEFONTINDIRECT:{MetaFont font=new MetaFont();font.init(in);state.addMetaObject(font);break;}case META_SELECTOBJECT:{int idx=in.readWord();state.selectMetaObject(idx,cb);break;}case META_DELETEOBJECT:{int idx=in.readWord();state.deleteMetaObject(idx);break;}case META_SAVEDC:state.saveState(cb);break;case META_RESTOREDC:{int idx=in.readShort();state.restoreState(idx,cb);break;}case META_SETWINDOWORG:state.setOffsetWy(in.readShort());state.setOffsetWx(in.readShort());break;case META_SETWINDOWEXT:state.setExtentWy(in.readShort());state.setExtentWx(in.readShort());break;case META_MOVETO:{int y=in.readShort();Point p=new Point(in.readShort(),y);state.setCurrentPoint(p);break;}case META_LINETO:{int y=in.readShort();int x=in.readShort();Point p=state.getCurrentPoint();cb.moveTo(state.transformX((int)p.getX()),state.transformY((int)p.getY()));cb.lineTo(state.transformX(x),state.transformY(y));cb.stroke();state.setCurrentPoint(new Point(x,y));break;}case META_POLYLINE:{state.setLineJoinPolygon(cb);int len=in.readWord();int x=in.readShort();int y=in.readShort();cb.moveTo(state.transformX(x),state.transformY(y));for (int k=1; k < len; ++k) {x=in.readShort();y=in.readShort();cb.lineTo(state.transformX(x),state.transformY(y));}cb.stroke();break;}case META_POLYGON:{if (isNullStrokeFill(false)) break;int len=in.readWord();int sx=in.readShort();int sy=in.readShort();cb.moveTo(state.transformX(sx),state.transformY(sy));for (int k=1; k < len; ++k) {int x=in.readShort();int y=in.readShort();cb.lineTo(state.transformX(x),state.transformY(y));}cb.lineTo(state.transformX(sx),state.transformY(sy));strokeAndFill();break;}case META_POLYPOLYGON:{if (isNullStrokeFill(false)) break;int numPoly=in.readWord();int[] lens=new int[numPoly];for (int k=0; k < lens.length; ++k) lens[k]=in.readWord();for (int j=0; j < lens.length; ++j) {int len=lens[j];int sx=in.readShort();int sy=in.readShort();cb.moveTo(state.transformX(sx),state.transformY(sy));for (int k=1; k < len; ++k) {int x=in.readShort();int y=in.readShort();cb.lineTo(state.transformX(x),state.transformY(y));}cb.lineTo(state.transformX(sx),state.transformY(sy));}strokeAndFill();break;}case META_ELLIPSE:{if (isNullStrokeFill(state.getLineNeutral())) break;int b=in.readShort();int r=in.readShort();int t=in.readShort();int l=in.readShort();cb.arc(state.transformX(l),state.transformY(b),state.transformX(r),state.transformY(t),0,360);strokeAndFill();break;}case META_ARC:{if (isNullStrokeFill(state.getLineNeutral())) break;float yend=state.transformY(in.readShort());float xend=state.transformX(in.readShort());float ystart=state.transformY(in.readShort());float xstart=state.transformX(in.readShort());float b=state.transformY(in.readShort());float r=state.transformX(in.readShort());float t=state.transformY(in.readShort());float l=state.transformX(in.readShort());float cx=(r + l) / 2;float cy=(t + b) / 2;float arc1=getArc(cx,cy,xstart,ystart);float arc2=getArc(cx,cy,xend,yend);arc2-=arc1;if (arc2 <= 0) arc2+=360;cb.arc(l,b,r,t,arc1,arc2);cb.stroke();break;}case META_PIE:{if (isNullStrokeFill(state.getLineNeutral())) break;float yend=state.transformY(in.readShort());float xend=state.transformX(in.readShort());float ystart=state.transformY(in.readShort());float xstart=state.transformX(in.readShort());float b=state.transformY(in.readShort());float r=state.transformX(in.readShort());float t=state.transformY(in.readShort());float l=state.transformX(in.readShort());float cx=(r + l) / 2;float cy=(t + b) / 2;float arc1=getArc(cx,cy,xstart,ystart);float arc2=getArc(cx,cy,xend,yend);arc2-=arc1;if (arc2 <= 0) arc2+=360;List<double[]> ar=PdfCanvas.bezierArc(l,b,r,t,arc1,arc2);if (ar.size() == 0) break;double[] pt=ar.get(0);cb.moveTo(cx,cy);cb.lineTo(pt[0],pt[1]);for (int k=0; k < ar.size(); ++k) {pt=ar.get(k);cb.curveTo(pt[2],pt[3],pt[4],pt[5],pt[6],pt[7]);}cb.lineTo(cx,cy);strokeAndFill();break;}case META_CHORD:{if (isNullStrokeFill(state.getLineNeutral())) break;float yend=state.transformY(in.readShort());float xend=state.transformX(in.readShort());float ystart=state.transformY(in.readShort());float xstart=state.transformX(in.readShort());float b=state.transformY(in.readShort());float r=state.transformX(in.readShort());float t=state.transformY(in.readShort());float l=state.transformX(in.readShort());float cx=(r + l) / 2;float cy=(t + b) / 2;float arc1=getArc(cx,cy,xstart,ystart);float arc2=getArc(cx,cy,xend,yend);arc2-=arc1;if (arc2 <= 0) arc2+=360;List<double[]> ar=PdfCanvas.bezierArc(l,b,r,t,arc1,arc2);if (ar.size() == 0) break;double[] pt=ar.get(0);cx=(float)pt[0];cy=(float)pt[1];cb.moveTo(cx,cy);for (int k=0; k < ar.size(); ++k) {pt=ar.get(k);cb.curveTo(pt[2],pt[3],pt[4],pt[5],pt[6],pt[7]);}cb.lineTo(cx,cy);strokeAndFill();break;}case META_RECTANGLE:{if (isNullStrokeFill(true)) break;float b=state.transformY(in.readShort());float r=state.transformX(in.readShort());float t=state.transformY(in.readShort());float l=state.transformX(in.readShort());cb.rectangle(l,b,r - l,t - b);strokeAndFill();break;}case META_ROUNDRECT:{if (isNullStrokeFill(true)) break;float h=state.transformY(0) - state.transformY(in.readShort());float w=state.transformX(in.readShort()) - state.transformX(0);float b=state.transformY(in.readShort());float r=state.transformX(in.readShort());float t=state.transformY(in.readShort());float l=state.transformX(in.readShort());cb.roundRectangle(l,b,r - l,t - b,(h + w) / 4);strokeAndFill();break;}case META_INTERSECTCLIPRECT:{float b=state.transformY(in.readShort());float r=state.transformX(in.readShort());float t=state.transformY(in.readShort());float l=state.transformX(in.readShort());cb.rectangle(l,b,r - l,t - b);cb.eoClip();cb.newPath();break;}case META_EXTTEXTOUT:{int y=in.readShort();int x=in.readShort();int count=in.readWord();int flag=in.readWord();int x1=0;int y1=0;int x2=0;int y2=0;if ((flag & (MetaFont.ETO_CLIPPED | MetaFont.ETO_OPAQUE)) != 0) {x1=in.readShort();y1=in.readShort();x2=in.readShort();y2=in.readShort();}byte[] text=new byte[count];int k;for (k=0; k < count; ++k) {byte c=(byte)in.readByte();if (c == 0) break;text[k]=c;}String s;try {s=new String(text,0,k,"Cp1252");} catch (UnsupportedEncodingException e) {s=new String(text,0,k);}outputText(x,y,flag,x1,y1,x2,y2,s);break;}case META_TEXTOUT:{int count=in.readWord();byte[] text=new byte[count];int k;for (k=0; k < count; ++k) {byte c=(byte)in.readByte();if (c == 0) break;text[k]=c;}String s;try {s=new String(text,0,k,"Cp1252");} catch (UnsupportedEncodingException e) {s=new String(text,0,k);}count=count + 1 & 0xfffe;in.skip(count - k);int y=in.readShort();int x=in.readShort();outputText(x,y,0,0,0,0,0,s);break;}case META_SETBKCOLOR:state.setCurrentBackgroundColor(in.readColor());break;case META_SETTEXTCOLOR:state.setCurrentTextColor(in.readColor());break;case META_SETTEXTALIGN:state.setTextAlign(in.readWord());break;case META_SETBKMODE:state.setBackgroundMode(in.readWord());break;case META_SETPOLYFILLMODE:state.setPolyFillMode(in.readWord());break;case META_SETPIXEL:{Color color=in.readColor();int y=in.readShort();int x=in.readShort();cb.saveState();cb.setFillColor(color);cb.rectangle(state.transformX(x),state.transformY(y),.2f,.2f);cb.fill();cb.restoreState();break;}case META_DIBSTRETCHBLT:case META_STRETCHDIB:{int rop=in.readInt();if (function == META_STRETCHDIB) {in.readWord();}int srcHeight=in.readShort();int srcWidth=in.readShort();int ySrc=in.readShort();int xSrc=in.readShort();float destHeight=state.transformY(in.readShort()) - state.transformY(0);float destWidth=state.transformX(in.readShort()) - state.transformX(0);float yDest=state.transformY(in.readShort());float xDest=state.transformX(in.readShort());byte[] b=new byte[tsize * 2 - (in.getLength() - lenMarker)];for (int k=0; k < b.length; ++k) b[k]=(byte)in.readByte();try {cb.saveState();cb.rectangle(xDest,yDest,destWidth,destHeight);cb.clip();cb.newPath();ImageData bmpImage=ImageDataFactory.createBmp(b,true,b.length);PdfImageXObject imageXObject=new PdfImageXObject(bmpImage);float width=destWidth * bmpImage.getWidth() / srcWidth;float height=-destHeight * bmpImage.getHeight() / srcHeight;float x=xDest - destWidth * xSrc / srcWidth;float y=yDest + destHeight * ySrc / srcHeight - height;cb.addXObject(imageXObject,new Rectangle(x,y,width,height));cb.restoreState();} catch (Exception e) {}break;}}in.skip(tsize * 2 - (in.getLength() - lenMarker));}state.cleanup(cb);}  }
class C{  public Float(){}  }
class C{  public void installUI(JComponent c){  this.spinner=(JSpinner)c;  installDefaults();  installListeners();  maybeAdd(createNextButton(),"Next");  maybeAdd(createPreviousButton(),"Previous");  maybeAdd(createEditor(),"Editor");  updateEnabledState();  installKeyboardActions();}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> filterUpdate(Context context,UpdateRequest request,RequestHandler next){  final String resource=ServerContextUtils.getResourceId(request,context);  final String action=ServerContextUtils.getUpdateString(request);  logAccess(resource,action,context);  return next.handleUpdate(context,request);}  }
class C{  public FSSPAuthenticationContextInfo(String authenticationContext,String authenticationLevel) throws FSException {  setAuthenticationContext(authenticationContext);  setAuthenticationLevel(authenticationLevel);}  }
class C{  public long skip(long n) throws IOException {  if ((n % frameSize) != 0) {    n-=(n % frameSize);  }  if (frameLength != AudioSystem.NOT_SPECIFIED) {    if ((n / frameSize) > (frameLength - framePos)) {      n=(frameLength - framePos) * frameSize;    }  }  long temp=stream.skip(n);  if (temp % frameSize != 0) {    throw new IOException("Could not skip an integer number of frames.");  }  if (temp >= 0) {    framePos+=temp / frameSize;  }  return temp;}  }
class C{  static double checkDouble(double d) throws JSONException {  if (Double.isInfinite(d) || Double.isNaN(d)) {    throw new JSONException("Forbidden numeric value: " + d);  }  return d;}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  EncodingFlags(byte flags){  super(flags);  logEnabledFlags();}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  boolean continueFlag=isOptionSet(IArgument.CONTINUE);  IOutput outputWriter=getOutputWriter();  List xmlFiles=(List)rc.getOption(IArgument.XML_FILE);  ServiceManager ssm=null;  try {    ssm=new ServiceManager(adminSSOToken);  } catch (  SMSException e) {    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }  CommandManager mgr=getCommandManager();  String url=mgr.getWebEnabledURL();  if ((url != null) && (url.length() > 0)) {    String strXML=(String)xmlFiles.iterator().next();    try {      List serviceNames=getServiceNames(SMSSchema.getXMLDocument(strXML,true));      deleteServices(rc,ssm,serviceNames,adminSSOToken,continueFlag,outputWriter);      loadSchemaXML(ssm,strXML);      outputWriter.printlnMessage(getResourceString("service-updated"));    } catch (    SMSException e) {      throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }  } else {    for (Iterator i=xmlFiles.iterator(); i.hasNext(); ) {      String file=(String)i.next();      FileInputStream fis=null;      try {        fis=new FileInputStream(file);        List serviceNames=getServiceNames(SMSSchema.getXMLDocument(fis));        deleteServices(rc,ssm,serviceNames,adminSSOToken,continueFlag,outputWriter);        loadSchema(ssm,file);        outputWriter.printlnMessage(getResourceString("service-updated"));      } catch (      CLIException e) {        if (continueFlag) {          outputWriter.printlnError(getResourceString("service-updated-failed") + e.getMessage());          if (isVerbose()) {            outputWriter.printlnError(Debugger.getStackTrace(e));          }        } else {          throw e;        }      }catch (      SMSException e) {        if (continueFlag) {          outputWriter.printlnError(getResourceString("service-updated-failed") + e.getMessage());          if (isVerbose()) {            outputWriter.printlnError(Debugger.getStackTrace(e));          }        } else {          throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);        }      }catch (      FileNotFoundException e) {        if (continueFlag) {          outputWriter.printlnError(getResourceString("service-updated-failed") + e.getMessage());          if (isVerbose()) {            outputWriter.printlnError(Debugger.getStackTrace(e));          }        } else {          throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);        }      } finally {        if (fis != null) {          try {            fis.close();          } catch (          IOException ie) {          }        }      }    }  }}  }
class C{  public Object nextValue() throws JSONException {  int c=nextCleanInternal();switch (c) {case -1:    throw syntaxError("End of input");case '{':  return readObject();case '[':return readArray();case '\'':case '"':return nextString((char)c);default :pos--;return readLiteral();}}  }
class C{  public JMXPrincipal(String name){  validate(name);  this.name=name;}  }
class C{  private void initializeConnectionHandlers() throws ConfigException, InitializationException {  if (connectionHandlerConfigManager == null) {    connectionHandlerConfigManager=new ConnectionHandlerConfigManager(serverContext);  }  connectionHandlerConfigManager.initializeConnectionHandlerConfig();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document docImp;  DOMImplementation domImpl;  DocumentType docType;  DocumentType docTypeNull=null;  NamedNodeMap nodeMap;  Entity entity4;  Entity entityImp4;  Element element;  CharacterData cdata;  ProcessingInstruction pi;  NodeList childList;  NodeList elemchildList;  String ent4Name;  String ent4ImpName;  String cdataVal;  String piTargetVal;  String piDataVal;  doc=(Document)load("staffNS",true);  domImpl=doc.getImplementation();  docType=doc.getDoctype();  docImp=domImpl.createDocument("http://www.w3.org/DOM/Test","a:b",docTypeNull);  nodeMap=docType.getEntities();  entity4=(Entity)nodeMap.getNamedItem("ent4");  entityImp4=(Entity)docImp.importNode(entity4,true);  childList=entityImp4.getChildNodes();  element=(Element)childList.item(0);  elemchildList=element.getChildNodes();  cdata=(CharacterData)elemchildList.item(0);  pi=(ProcessingInstruction)childList.item(1);  ent4Name=entity4.getNodeName();  ent4ImpName=entityImp4.getNodeName();  cdataVal=cdata.getData();  piTargetVal=pi.getTarget();  piDataVal=pi.getData();  assertEquals("documentimportnode20_Ent4NodeName",ent4Name,ent4ImpName);  assertEquals("documentimportnode20_Cdata","Element data",cdataVal);  assertEquals("documentimportnode20_PITarget","PItarget",piTargetVal);  assertEquals("documentimportnode20_PIData","PIdata",piDataVal);}  }
class C{  public java.lang.String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  public TextRegionEventFilter(Rectangle filterRect){  this.filterRect=filterRect;}  }
class C{  @Override public int hashCode(){  return super.hashCode() * 37 + positivePrefix.hashCode();}  }
class C{  public int hashCode(){  return 1;}  }
class C{  public SAML2MetaException(String message){  super(message);}  }
class C{  protected void logMsg(String s){  outWriter.println(s);}  }
class C{  public static void deregisterSupportedControl(String controlOID){synchronized (directoryServer.supportedControls) {    directoryServer.supportedControls.remove(controlOID);  }}  }
class C{  public void warning(Supplier<String> msgSupplier){  log(Level.WARNING,msgSupplier);}  }
class C{  static MutableBigInteger modInverseBP2(MutableBigInteger mod,int k){  return fixup(new MutableBigInteger(1),new MutableBigInteger(mod),k);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNS01.class,args);}  }
class C{  public void testSetNull_int_int() throws SQLException {  PreparedStatement ps=null;  try {    String query="insert into type (BoolVal, IntVal) values ('true', ?);";    ps=conn.prepareStatement(query);    Statement st=null;    try {      ps.setNull(1,Types.INTEGER);      ps.execute();    }  finally {      try {        ps.close();      } catch (      Exception ee) {      }    }    query="insert into type (BoolVal, LongVal) values ('true', ?);";    ps=conn.prepareStatement(query);    try {      ps.setNull(1,Types.BIGINT);      ps.execute();    }  finally {      try {        ps.close();      } catch (      Exception ee) {      }    }    query="insert into type (BoolVal, DecVal) values ('true', ?)";    ps=conn.prepareStatement(query);    try {      ps.setNull(1,Types.DECIMAL);      ps.execute();    }  finally {      try {        ps.close();      } catch (      Exception ee) {      }    }    query="insert into type (BoolVal, dateVal) values ('true', ?);";    ps=conn.prepareStatement(query);    try {      ps.setNull(1,Types.DATE);      ps.execute();    }  finally {      try {        ps.close();      } catch (      Exception ee) {      }    }    query="insert into type (BoolVal, BlobVal) values ('true', ?);";    ps=conn.prepareStatement(query);    try {      ps.setNull(1,Types.BLOB);      ps.execute();    }  finally {      try {        ps.close();      } catch (      Exception ee) {      }    }    query="insert into type (BoolVal, TextVal) values ('true', ?);";    ps=conn.prepareStatement(query);    ps.setNull(1,Types.CHAR);    ps.execute();  }  finally {    try {      ps.close();    } catch (    Exception ee) {    }  }}  }
class C{  ReplOutputStream(ReplicationDomain domain){  this.domain=domain;}  }
class C{  public WritableRaster createCompatibleDestRaster(Raster src){  int nBands=src.getNumBands();  if ((ncols != nBands) && (ncols != (nBands + 1))) {    throw new IllegalArgumentException("Number of columns in the " + "matrix (" + ncols + ") must be equal to the number"+ " of bands ([+1]) in src ("+ nBands+ ").");  }  if (src.getNumBands() == nrows) {    return src.createCompatibleWritableRaster();  } else {    throw new IllegalArgumentException("Don't know how to create a " + " compatible Raster with " + nrows + " bands.");  }}  }
class C{  public static boolean mergeAttributeValues(Map map1,Map map2,Map<String,Boolean> multipleAttributesMap,boolean bAdd){  boolean modified=false;  for (Iterator i=map2.keySet().iterator(); i.hasNext(); ) {    String key=(String)i.next();    Set orig=(Set)map1.get(key);    Boolean b=multipleAttributesMap.get(key);    boolean multipleTyped=((b != null) && b.booleanValue());    if (!multipleTyped) {      map1.put(key,(Set)map2.get(key));      modified=true;    } else     if ((orig != null) && !orig.isEmpty()) {      modified=(bAdd) ? orig.addAll((Set)map2.get(key)) : orig.removeAll((Set)map2.get(key));    } else     if (bAdd) {      map1.put(key,(Set)map2.get(key));      modified=true;    }  }  return modified;}  }
class C{  public boolean beginOccupyFullBrowserDisplay(ChildDisplayEvent event){  if (loginDebug.messageEnabled()) {    loginDebug.message("Login Status : " + ac.getStatus());  }  if (sessionUpgrade)   return false;  return true;}  }
class C{  public MaterialBarcodeScannerBuilder withTrackerColor(int color){  mTrackerColor=color;  return this;}  }
class C{  public boolean readBoolean() throws SQLException {  Boolean attrib=(Boolean)getNextAttribute();  return (attrib == null) ? false : attrib.booleanValue();}  }
class C{  public static String encode(byte[] binaryData){  if (binaryData == null) {    return null;  }  int lengthDataBits=binaryData.length * EIGHTBIT;  if (lengthDataBits == 0) {    return "";  }  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  int numberQuartet=fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;  char encodedData[]=null;  encodedData=new char[numberQuartet * 4];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  if (fDebug) {    System.out.println("number of triplets = " + numberTriplets);  }  for (int i=0; i < numberTriplets; i++) {    b1=binaryData[dataIndex++];    b2=binaryData[dataIndex++];    b3=binaryData[dataIndex++];    if (fDebug) {      System.out.println("b1= " + b1 + ", b2= "+ b2+ ", b3= "+ b3);    }    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    if (fDebug) {      System.out.println("val2 = " + val2);      System.out.println("k4   = " + (k << 4));      System.out.println("vak  = " + (val2 | (k << 4)));    }    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex++]=lookUpBase64Alphabet[b3 & 0x3f];  }  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    if (fDebug) {      System.out.println("b1=" + b1);      System.out.println("b1<<2 = " + (b1 >> 2));    }    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex++]=PAD;    encodedData[encodedIndex++]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex++]=PAD;  }  return new String(encodedData);}  }
class C{  final long internalNextLong(long origin,long bound){  long r=mix64(nextSeed());  if (origin < bound) {    long n=bound - origin, m=n - 1;    if ((n & m) == 0L)     r=(r & m) + origin; else     if (n > 0L) {      for (long u=r >>> 1; u + m - (r=u % n) < 0L; u=mix64(nextSeed()) >>> 1)       ;      r+=origin;    } else {      while (r < origin || r >= bound)       r=mix64(nextSeed());    }  }  return r;}  }
class C{  protected void updateExpandedDescendants(TreePath path){  completeEditing();  if (treeState != null) {    treeState.setExpandedState(path,true);    Enumeration descendants=tree.getExpandedDescendants(path);    if (descendants != null) {      while (descendants.hasMoreElements()) {        path=(TreePath)descendants.nextElement();        treeState.setExpandedState(path,true);      }    }    updateLeadSelectionRow();    updateSize();  }}  }
class C{  public final void removeAllElements(){  for (int i=0; i < m_firstFree; i++) {    m_map[i]=null;  }  m_firstFree=0;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.SubjectLocalityType createSubjectLocalityType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.SubjectLocalityTypeImpl();}  }
class C{  public boolean isFixedRowHeight(){  return (rowHeight > 0);}  }
class C{  public static void printCurrentTime(final Object label){  logger.debug(JKDateTimeUtil.getCurrentTime() + "  :" + label);}  }
class C{  public void endPrefixMapping(String prefix) throws SAXException {  flushStartDoc();  m_resultContentHandler.endPrefixMapping(prefix);}  }
class C{  public void testCertPathBuilder06() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  try {    CertPathBuilder.getInstance(null,defaultProviderName);    fail("No expected NullPointerException");  } catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertPathBuilder.getInstance(invalidValues[i],defaultProviderName);      fail("NoSuchAlgorithmException must be thrown");    } catch (    NoSuchAlgorithmException e1) {    }  }}  }
class C{  public boolean isBinary(){  return true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documenttypesystemid01.class,args);}  }
class C{  public void draw(Graphics p_graphics,GdiContext p_graphics_context,double p_intensity){  for (int j=0; j < page_arr.length; ++j) {    ExpandDrillPage[] curr_row=page_arr[j];    for (int i=0; i < curr_row.length; ++i) {      curr_row[i].draw(p_graphics,p_graphics_context,p_intensity);    }  }}  }
class C{  public FileNotFoundException(){  super();}  }
class C{  public FrameBodyUFID(String owner,byte[] uniqueIdentifier){  setOwner(owner);  setUniqueIdentifier(uniqueIdentifier);}  }
class C{  public static void startPermissionFlow(Activity activity,String rationale){  if (ActivityCompat.shouldShowRequestPermissionRationale(activity,permission)) {    Toast.makeText(activity,rationale,Toast.LENGTH_LONG).show();    requestPermissions(activity);  } else {    requestPermissions(activity);  }}  }
class C{  public static String toSnakeCase(final String value){  return toDecamelize(value,"_");}  }
class C{  private Session resolveSession(SessionID sessionID) throws SessionException {  return sessionOperationStrategy.getOperation(sessionID).resolveSession(sessionID);}  }
class C{  @Override public boolean equals(Object o){  rwlock.readLock().lock();  try {    if (o == this) {      return true;    }    if (!(o instanceof Map)) {      return false;    }    Map t=(Map)o;    if (t.size() != size()) {      return false;    }    for (Iterator i=entrySet().iterator(); i.hasNext(); ) {      Entry e=(Entry)i.next();      Object key=e.getKey();      Object value=e.getValue();      if (value == null) {        if (!(t.get(key) == null && t.containsKey(key))) {          return false;        }      } else {        if (!value.equals(t.get(key))) {          return false;        }      }    }    return true;  }  finally {    rwlock.readLock().unlock();  }}  }
class C{  public JsonValue toJson(){  JsonValue ret=json(object(field("filePath",getFilePath()),field("fileState",getFileState()),field("actionTaken",getActionTaken())));  if (getBackupFile() != null) {    ret.put("backupFile",getBackupFile());  }  if (getStockFile() != null) {    ret.put("stockFile",getStockFile());  }  return ret;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.IncludeTimestampElement createIncludeTimestampElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.IncludeTimestampElementImpl();}  }
class C{  private boolean hasUserPassword(String[] ocs){  Schema schema=getInfo().getServerDescriptor().getSchema();  if (ocs != null && schema != null) {    AttributeType attr=schema.getAttributeType(ServerConstants.ATTR_USER_PASSWORD);    for (    String oc : ocs) {      ObjectClass objectClass=schema.getObjectClass(oc);      if (!attr.isPlaceHolder() && !objectClass.isPlaceHolder() && objectClass.isRequiredOrOptional(attr)) {        return true;      }    }  }  return false;}  }
class C{  private void allowAccessAndTerminateProcess(RadiusResponse response,ContextHolder holder) throws RadiusProcessingException {  response.setResponsePacket(new AccessAccept());  response.setUniversalId(holder.getUniversalId());  terminateAuthnProcess(holder);}  }
class C{  private void incorporateDequeues(){  final int cycles=itrs.cycles;  final int takeIndex=ArrayBlockingQueue.this.takeIndex;  final int prevCycles=this.prevCycles;  final int prevTakeIndex=this.prevTakeIndex;  if (cycles != prevCycles || takeIndex != prevTakeIndex) {    final int len=items.length;    long dequeues=(cycles - prevCycles) * len + (takeIndex - prevTakeIndex);    if (invalidated(lastRet,prevTakeIndex,dequeues,len))     lastRet=REMOVED;    if (invalidated(nextIndex,prevTakeIndex,dequeues,len))     nextIndex=REMOVED;    if (invalidated(cursor,prevTakeIndex,dequeues,len))     cursor=takeIndex;    if (cursor < 0 && nextIndex < 0 && lastRet < 0)     detach(); else {      this.prevCycles=cycles;      this.prevTakeIndex=takeIndex;    }  }}  }
class C{  public static boolean isScreenW(int widthDp){  DisplayMetrics displayMetrics=Resources.getSystem().getDisplayMetrics();  float screenWidth=displayMetrics.widthPixels / displayMetrics.density;  return screenWidth >= widthDp;}  }
class C{  public void addLogInfo(String key,Object value){  logInfoMap.put(key,value);}  }
class C{  public JKTableRecord removeRecord(final int row){  return this.records.remove(row);}  }
class C{  public Tree(final Material type){  this(type,DEFAULT_SPECIES,DEFAULT_DIRECTION);}  }
class C{  public com.sun.identity.saml2.protocol.Response handleQuery(String pdpEntityId,String pepEntityId,RequestAbstract samlpRequest,SOAPMessage soapMessage) throws SAML2Exception {  SubjectMapper subjectMapper=new FMSubjectMapper();  subjectMapper.initialize(pdpEntityId,pepEntityId,null);  ResourceMapper resourceMapper=new FMResourceMapper();  resourceMapper.initialize(pdpEntityId,pepEntityId,null);  ActionMapper actionMapper=new FMActionMapper();  actionMapper.initialize(pdpEntityId,pepEntityId,null);  EnvironmentMapper environmentMapper=new FMEnvironmentMapper();  environmentMapper.initialize(pdpEntityId,pepEntityId,null);  ResultMapper resultMapper=new FMResultMapper();  resultMapper.initialize(pdpEntityId,pepEntityId,null);  boolean evaluationFailed=false;  String statusCodeValue=null;  if (XACMLSDKUtils.debug.messageEnabled()) {    XACMLSDKUtils.debug.message("XACMLAuthzDecisionQueryHandler.handleQuery(), entering" + ":pdpEntityId=" + pdpEntityId + ":pepEntityId="+ pepEntityId+ ":samlpRequest=\n"+ samlpRequest.toXMLString(true,true)+ ":soapMessage=\n"+ soapMessage);  }  Request xacmlRequest=((XACMLAuthzDecisionQuery)samlpRequest).getRequest();  boolean returnContext=((XACMLAuthzDecisionQuery)samlpRequest).getReturnContext();  SSOToken ssoToken=null;  String resourceName=null;  String serviceName=null;  String actionName=null;  Map environment=null;  boolean booleanDecision=false;  try {    ssoToken=(SSOToken)subjectMapper.mapToNativeSubject(xacmlRequest.getSubjects());    if (ssoToken == null) {      statusCodeValue=XACMLConstants.STATUS_CODE_MISSING_ATTRIBUTE;      evaluationFailed=true;    } else {      if (XACMLSDKUtils.debug.messageEnabled()) {        XACMLSDKUtils.debug.message("XACMLAuthzDecisionQueryHandler.handleQuery()," + "created ssoToken");      }    }    if (ssoToken != null) {      List resources=xacmlRequest.getResources();      Resource resource=null;      if (!resources.isEmpty()) {        resource=(Resource)resources.get(0);      }      if (resource != null) {        String[] resourceService=resourceMapper.mapToNativeResource(resource);        if (resourceService != null) {          if (resourceService.length > 0) {            resourceName=resourceService[0];          }          if (resourceService.length > 1) {            serviceName=resourceService[1];          }        }      }      if (resourceName == null) {        statusCodeValue=XACMLConstants.STATUS_CODE_MISSING_ATTRIBUTE;        evaluationFailed=true;      }      if (serviceName == null) {        throw new SAML2Exception(XACMLSDKUtils.xacmlResourceBundle.getString("missing_attribute"));      }    }    if (serviceName != null) {      if (serviceName != null) {        actionName=actionMapper.mapToNativeAction(xacmlRequest.getAction(),serviceName);      }      if (actionName == null) {        statusCodeValue=XACMLConstants.STATUS_CODE_MISSING_ATTRIBUTE;        evaluationFailed=true;      }    }  } catch (  XACMLException xe) {    statusCodeValue=XACMLConstants.STATUS_CODE_MISSING_ATTRIBUTE;    evaluationFailed=true;    if (XACMLSDKUtils.debug.warningEnabled()) {      XACMLSDKUtils.debug.warning("XACMLAuthzDecisionQueryHandler.handleQuery()," + "caught exception",xe);    }  }  if (!evaluationFailed) {    try {      PolicyEvaluator pe=new PolicyEvaluator(serviceName);      booleanDecision=pe.isAllowed(ssoToken,resourceName,actionName,environment);    } catch (    SSOException ssoe) {      if (XACMLSDKUtils.debug.warningEnabled()) {        XACMLSDKUtils.debug.warning("XACMLAuthzDecisionQueryHandler.handleQuery()," + "caught exception",ssoe);      }      evaluationFailed=true;    }catch (    PolicyException pe) {      if (XACMLSDKUtils.debug.warningEnabled()) {        XACMLSDKUtils.debug.warning("XACMLAuthzDecisionQueryHandler.handleQuery()," + "caught exception",pe);      }      evaluationFailed=true;    }  }  Decision decision=ContextFactory.getInstance().createDecision();  Status status=ContextFactory.getInstance().createStatus();  StatusCode code=ContextFactory.getInstance().createStatusCode();  StatusMessage message=ContextFactory.getInstance().createStatusMessage();  StatusDetail detail=ContextFactory.getInstance().createStatusDetail();  detail.getElement().insertBefore(detail.getElement().cloneNode(true),null);  if (evaluationFailed) {    decision.setValue(XACMLConstants.INDETERMINATE);    if (statusCodeValue == null) {      statusCodeValue=XACMLConstants.STATUS_CODE_PROCESSING_ERROR;    }    code.setValue(statusCodeValue);    message.setValue("processing_error");  } else   if (booleanDecision) {    decision.setValue(XACMLConstants.PERMIT);    code.setValue(XACMLConstants.STATUS_CODE_OK);    message.setValue("ok");  } else {    decision.setValue(XACMLConstants.DENY);    code.setValue(XACMLConstants.STATUS_CODE_OK);    message.setValue("ok");  }  Result result=ContextFactory.getInstance().createResult();  String resourceId=resourceName;  List resources=xacmlRequest.getResources();  Resource resource=null;  if (!resources.isEmpty()) {    resource=(Resource)resources.get(0);    if (resource != null) {      List attributes=resource.getAttributes();      if (attributes != null) {        for (int count=0; count < attributes.size(); count++) {          Attribute attr=(Attribute)attributes.get(count);          if (attr != null) {            URI tmpURI=attr.getAttributeId();            if (tmpURI.toString().equals(XACMLConstants.RESOURCE_ID)) {              Element element=(Element)attr.getAttributeValues().get(0);              resourceId=XMLUtils.getElementValue(element);              break;            }          }        }      }    }  }  result.setResourceId(resourceId);  result.setDecision(decision);  status.setStatusCode(code);  status.setStatusMessage(message);  status.setStatusDetail(detail);  result.setStatus(status);  Response response=ContextFactory.getInstance().createResponse();  response.addResult(result);  XACMLAuthzDecisionStatement statement=ContextFactory.getInstance().createXACMLAuthzDecisionStatement();  statement.setResponse(response);  if (returnContext) {    statement.setRequest(xacmlRequest);  }  com.sun.identity.saml2.protocol.Response samlpResponse=createSamlpResponse(statement,status.getStatusCode().getValue());  if (XACMLSDKUtils.debug.messageEnabled()) {    XACMLSDKUtils.debug.message("XACMLAuthzDecisionQueryHandler.handleQuery(), returning" + ":samlResponse=\n" + samlpResponse.toXMLString(true,true));  }  return samlpResponse;}  }
class C{  public boolean notRequiredResourceName(Policy policy,String realmName,String name){  getSvcTypeNameToActionsMap(policy,realmName);  return notRequiredResourceNameService.contains(name);}  }
class C{  public com.sun.identity.liberty.ws.meta.jaxb.AffiliationDescriptorType createAffiliationDescriptorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.meta.jaxb.impl.AffiliationDescriptorTypeImpl();}  }
class C{  public EncoderException(String pMessage){  super(pMessage);}  }
class C{  public void initializeBackendConfig(Collection<String> backendIDsToStart) throws ConfigException, InitializationException {  initializeConfigurationBackend();  RootCfg root=serverContext.getRootConfig();  root.addBackendAddListener(this);  root.addBackendDeleteListener(this);  Entry backendRoot;  try {    DN configEntryDN=DN.valueOf(ConfigConstants.DN_BACKEND_BASE);    backendRoot=DirectoryServer.getConfigEntry(configEntryDN);  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_CONFIG_BACKEND_CANNOT_GET_CONFIG_BASE.get(getExceptionMessage(e));    throw new ConfigException(message,e);  }  if (backendRoot == null) {    throw new ConfigException(ERR_CONFIG_BACKEND_BASE_DOES_NOT_EXIST.get());  }  initializeBackends(backendIDsToStart,root);}  }
class C{  public void test_getIterator$Ljava_text_AttributedCharacterIterator$Attribute(){  String test="Test string";  try {    Map<AttributedCharacterIterator.Attribute,String> hm=new HashMap<AttributedCharacterIterator.Attribute,String>();    AttributedCharacterIterator.Attribute[] aci=new AttributedCharacterIterator.Attribute[3];    aci[0]=new TestAttributedCharacterIteratorAttribute("att1");    aci[1]=new TestAttributedCharacterIteratorAttribute("att2");    aci[2]=new TestAttributedCharacterIteratorAttribute("att3");    hm.put(aci[0],"value1");    hm.put(aci[1],"value2");    AttributedString attrString=new AttributedString(test,hm);    AttributedCharacterIterator it=attrString.getIterator(aci);    assertTrue("Incorrect iteration on AttributedString",it.getAttribute(aci[0]).equals("value1"));    assertTrue("Incorrect iteration on AttributedString",it.getAttribute(aci[1]).equals("value2"));    assertTrue("Incorrect iteration on AttributedString",it.getAttribute(aci[2]) == null);  } catch (  Exception e) {    fail("Unexpected exceptiption " + e.toString());  }}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws XACMLException {  StringBuffer sb=new StringBuffer(2000);  StringBuffer namespaceBuffer=new StringBuffer(100);  String nsDeclaration="";  if (declareNS) {    namespaceBuffer.append(XACMLConstants.CONTEXT_NS_DECLARATION).append(XACMLConstants.SPACE);    namespaceBuffer.append(XACMLConstants.XSI_NS_URI).append(XACMLConstants.SPACE).append(XACMLConstants.CONTEXT_SCHEMA_LOCATION);  }  if (includeNSPrefix) {    nsDeclaration=XACMLConstants.CONTEXT_NS_PREFIX + ":";  }  sb.append("<").append(nsDeclaration).append(XACMLConstants.ACTION).append(namespaceBuffer);  sb.append(">");  int length=0;  if (attributes != null) {    sb.append("\n");    length=attributes.size();    for (int i=0; i < length; i++) {      Attribute attr=(Attribute)attributes.get(i);      sb.append(attr.toXMLString(includeNSPrefix,false));    }  }  sb.append("</").append(nsDeclaration).append(XACMLConstants.ACTION);  sb.append(">\n");  return sb.toString();}  }
class C{  private void remove(String id,Connection _conn) throws SQLException {  if (preparedRemoveSql == null) {    String removeSql="DELETE FROM " + sessionTable + " WHERE "+ sessionIdCol+ " = ?  AND "+ sessionAppCol+ " = ?";    preparedRemoveSql=_conn.prepareStatement(removeSql);  }  preparedRemoveSql.setString(1,id);  preparedRemoveSql.setString(2,getName());  preparedRemoveSql.execute();}  }
class C{  public void show(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);}  }
class C{  public void removeTargetFilter(){  _targetFilter=null;}  }
class C{  public AMSearchControl(){  searchControl=new SearchControl();}  }
class C{  public RecoveryCodeGenerator(SecureRandom secureRandom,int retryMaximum){  this.secureRandom=secureRandom;  this.retryMaximum=retryMaximum;}  }
class C{  public ECLMultiDomainDBCursor(ECLEnabledDomainPredicate predicate,MultiDomainDBCursor cursor){  this.predicate=predicate;  this.cursor=cursor;}  }
class C{  LDAPURL findUrlForLocalEntry(BasicNode node){  ConnectionWrapper conn=connConfig.getConnectionWrapper();  if (node == rootNode) {    return LDAPConnectionPool.makeLDAPUrl(conn.getHostPort(),"",conn.isLdaps());  }  final BasicNode parent=(BasicNode)node.getParent();  if (parent != null) {    final LDAPURL parentUrl=findUrlForDisplayedEntry(parent);    return LDAPConnectionPool.makeLDAPUrl(parentUrl,node.getDN().toString());  }  return LDAPConnectionPool.makeLDAPUrl(conn.getHostPort(),node.getDN().toString(),conn.isLdaps());}  }
class C{  public boolean bool(){  return (Double.isNaN(m_val) || (m_val == 0.0)) ? false : true;}  }
class C{  static public void fail(){  fail(null);}  }
class C{  @Override public String toString(){  if (className != null) {    return className + "." + super.toString();  } else {    return super.toString();  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.RequireThumbprintReferenceElement createRequireThumbprintReferenceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RequireThumbprintReferenceElementImpl();}  }
class C{  public static Calendar fromUnixTime(long unixTime){  return fromUnixTime(unixTime,TimeUnit.SECONDS);}  }
class C{  public static <K,V>Map<K,V> map(K key1,V value1){  return getInstance().mapInstance(key1,value1);}  }
class C{  protected Map loadInternalClient(String clientType){  Map iMap=(Map)loadedInternalClients.get(clientType);  if (iMap == null) {    if (intCapInstance != null) {      iMap=intCapInstance.getProperties(clientType);    }    if (iMap == null) {      return null;    }    loadedInternalClients.put(clientType,iMap);    internalClientData.put(clientType,iMap);  }  return iMap;}  }
class C{  public boolean remove(Object o){  return map.remove(o) == PRESENT;}  }
class C{  public static int broadcast(String message,String permission){  return server.broadcast(message,permission);}  }
class C{  public ImageWriteParam(Locale locale){  this.locale=locale;}  }
class C{  @Override public synchronized Class<?> loadClass(final String name,boolean resolve) throws ClassNotFoundException {  Class<?> clazz=null;  clazz=findLoadedClass(name);  if (clazz != null) {    if (resolve)     resolveClass(clazz);    return (clazz);  }  if (securityManager != null) {    int dot=name.lastIndexOf('.');    if (dot >= 0) {      try {        if (!"org.apache.jasper.runtime".equalsIgnoreCase(name.substring(0,dot))) {          securityManager.checkPackageAccess(name.substring(0,dot));        }      } catch (      SecurityException se) {        String error="Security Violation, attempt to use " + "Restricted Class: " + name;        se.printStackTrace();        throw new ClassNotFoundException(error);      }    }  }  if (!name.startsWith(Constants.JSP_PACKAGE_NAME + '.')) {    clazz=getParent().loadClass(name);    if (resolve)     resolveClass(clazz);    return clazz;  }  return findClass(name);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.QueryAbstractType createQueryAbstractType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.QueryAbstractTypeImpl();}  }
class C{  private boolean isDeleted(){  return isDeleted;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsse.NonceElement createNonceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsse.impl.NonceElementImpl();}  }
class C{  public java.lang.String toString(){  String xml=this.toString(true,false);  return xml;}  }
class C{  public int receive(byte[] buffer,int offset,int count,int timeout){  checkArrayBounds(buffer,offset,count);  if (count == 0) {    return 0;  }  byte[] data=buffer;  if (offset > 0) {    data=new byte[count];  }  IntOut bytesReceivedOut=new IntOut();  try {    IDevice.checkResult(LibIMobileDevice.idevice_connection_receive_timeout(getRef(),data,count,bytesReceivedOut,timeout));    int bytesRead=bytesReceivedOut.getValue();    if (bytesRead > 0 && data != buffer) {      System.arraycopy(data,0,buffer,offset,bytesRead);    }    return bytesRead;  }  finally {    bytesReceivedOut.delete();  }}  }
class C{  private void checkForConflictingArguments() throws ArgumentException {  throwIfArgumentsConflict(bindPasswordArg,bindPasswordFileArg);  throwIfArgumentsConflict(trustAllArg,trustStorePathArg);  throwIfArgumentsConflict(trustAllArg,trustStorePasswordArg);  throwIfArgumentsConflict(trustAllArg,trustStorePasswordFileArg);  throwIfArgumentsConflict(trustStorePasswordArg,trustStorePasswordFileArg);  throwIfArgumentsConflict(useStartTLSArg,useSSLArg);  if (trustStorePathArg.isPresent()) {    final String value=trustStorePathArg.getValue();    if (!canReadPath(value)) {      final LocalizableMessage message=ERR_CANNOT_READ_TRUSTSTORE.get(value);      throw new ArgumentException(message);    }  }  if (keyStorePathArg.isPresent()) {    final String value=keyStorePathArg.getValue();    if (!canReadPath(value)) {      final LocalizableMessage message=ERR_CANNOT_READ_KEYSTORE.get(value);      throw new ArgumentException(message);    }  }}  }
class C{  private synchronized void writeObject(java.io.ObjectOutputStream s) throws IOException {  if (actions == null)   getActions();  s.defaultWriteObject();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetattributenodens03.class,args);}  }
class C{  private void fullyDecode(){  if (!decoded) {    getAttributeType();    getAssertionValue();    getSubstringAssertion();    getMatchingRule();    getApproximateMatchingRule();    getEqualityMatchingRule();    getOrderingMatchingRule();    getSubstringMatchingRule();    decoded=true;  }}  }
class C{  public Exchanger(){  participant=new Participant();}  }
class C{  public boolean is_orthogonal(){  int lmax=plaline_len();  for (int index=0; index < lmax; ++index) {    if (plaline(index).is_orthogonal())     continue;    return false;  }  return true;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthRootPaneUI();}  }
class C{  public static void clearBackend(String backendId) throws Exception {  clearBackend(backendId,null);}  }
class C{  public Builder withColor(Color color) throws IllegalArgumentException {  Validate.notNull(color,"Cannot have null color");  colors.add(color);  return this;}  }
class C{  public void login(AuthContext.IndexType type,String indexName) throws AuthLoginException {  if (authDebug.messageEnabled()) {    authDebug.message("AuthContextLocal::login() called " + "with IndexType : " + type + " & Indexname : "+ indexName);  }  login(type,indexName,null,null,null);}  }
class C{  private Conditions(){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrremovechild1.class,args);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node docNode;  Document ownerDocument;  Element docElement;  String elementName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  docNode=elementList.item(1);  ownerDocument=docNode.getOwnerDocument();  docElement=ownerDocument.getDocumentElement();  elementName=docElement.getNodeName();  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("svgTagName","svg",elementName);  } else {    assertEquals("nodeGetOwnerDocumentAssert1","staff",elementName);  }}  }
class C{  public void readObjectData(ObjectInputStream stream) throws ClassNotFoundException, IOException {  doReadObject(stream);}  }
class C{  private boolean promptToProvideAuthenticationAgain() throws ClientException {  return askConfirmation(INFO_UNINSTALL_CONFIRM_PROVIDE_AUTHENTICATION_AGAIN.get(),true,logger);}  }
class C{  private DirectoryServerPlugin[] removePlugin(DirectoryServerPlugin[] pluginArray,DirectoryServerPlugin plugin){  int slot=-1;  int length=pluginArray.length;  for (int i=0; i < length; i++) {    if (pluginArray[i].getPluginEntryDN().equals(plugin.getPluginEntryDN())) {      slot=i;      break;    }  }  if (slot < 0) {    return pluginArray;  }  if (length == 0) {    return new DirectoryServerPlugin[0];  }  DirectoryServerPlugin[] newPlugins=new DirectoryServerPlugin[length - 1];  if (slot > 0) {    System.arraycopy(pluginArray,0,newPlugins,0,slot);  }  if (slot < length - 1) {    System.arraycopy(pluginArray,slot + 1,newPlugins,slot,length - slot - 1);  }  return newPlugins;}  }
class C{  public String cacheData(SSOToken token,SMDiscoveryServiceData data){  String randomStr;  try {    String key=token.getTokenID().toString();synchronized (mapTokenIDs) {      Map map=(Map)mapTokenIDs.get(key);      if (map == null) {        map=new HashMap(10);        token.addSSOTokenListener(this);      }      randomStr=getRandomString();      map.put(randomStr,data);      mapTokenIDs.put(key,map);    }  } catch (  SSOException ssoe) {    randomStr="";  }  return randomStr;}  }
class C{  public ErasingThread(String prompt){  this.prompt=prompt;}  }
class C{  public void disable_layer_item(int p_no){  if (change_layer_menu != null) {    change_layer_menu.disable_item(p_no);  }}  }
class C{  public void remove(){  Log.w(TAG,"Removing" + DATABASE_NAME);  IOUtil.remove(databaseDir() + DATABASE_NAME);}  }
class C{  public static boolean binaryDataIsPngFormat(byte[] data){  if (data.length < 4) {    return false;  }  return (0x89 == (data[0] & 0xff)) && (0x50 == (data[1] & 0xff)) && (0x4E == (data[2] & 0xff))&& (0x47 == (data[3] & 0xff));}  }
class C{  public void copyArea(int x,int y,int width,int height,int destX,int destY){  if (debugLog()) {    info().log(toShortString() + " Copying area from: " + new Rectangle(x,y,width,height)+ " to: "+ new Point(destX,destY));  }  graphics.copyArea(x,y,width,height,destX,destY);}  }
class C{  public boolean validate(Set<String> values){  boolean valid=true;  boolean globalFound=false;  if (CollectionUtils.isNotEmpty(values)) {    for (    String val : values) {      if (!valid) {        break;      }      String trimmed=val.trim();      Matcher matcher=pattern.matcher(trimmed);      valid=matcher.matches();      Matcher globalMatcher=globalPattern.matcher(trimmed);      boolean globalMatch=globalMatcher.matches();      if (globalFound && globalMatch && valid) {        valid=false;      } else       if (globalMatch && valid) {        globalFound=true;      }    }  } else {    valid=false;  }  if (valid)   valid=MapDuplicateKeyChecker.checkForNoDuplicateKeyInValue(values);  return valid;}  }
class C{  public void paintColorChooserBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  @Override public Response<MapMatchingResponse> executeCall() throws IOException {  return getCall().execute();}  }
class C{  private GroupDN(EnumBindRuleType type,List<DN> groupDNs){  this.groupDNs=groupDNs;  this.type=type;}  }
class C{  void cleanup(){  DBHelper.closePools();}  }
class C{  public String encode(){  String encoded_string=ATTRIBUTE_FIELD;  if (attribute != null)   encoded_string+=attribute.encode();  return encoded_string + Separators.NEWLINE;}  }
class C{  protected void translateFrame(AbstractID3v2Frame frame){  FrameBodyTDRC tmpBody=(FrameBodyTDRC)frame.getBody();  tmpBody.findMatchingMaskAndExtractV3Values();  ID3v23Frame newFrame;  if (!tmpBody.getYear().equals("")) {    newFrame=new ID3v23Frame(ID3v23Frames.FRAME_ID_V3_TYER);    ((FrameBodyTYER)newFrame.getBody()).setText(tmpBody.getYear());    logger.config("Adding Frame:" + newFrame.getIdentifier());    frameMap.put(newFrame.getIdentifier(),newFrame);  }  if (!tmpBody.getDate().equals("")) {    newFrame=new ID3v23Frame(ID3v23Frames.FRAME_ID_V3_TDAT);    ((FrameBodyTDAT)newFrame.getBody()).setText(tmpBody.getDate());    ((FrameBodyTDAT)newFrame.getBody()).setMonthOnly(tmpBody.isMonthOnly());    logger.config("Adding Frame:" + newFrame.getIdentifier());    frameMap.put(newFrame.getIdentifier(),newFrame);  }  if (!tmpBody.getTime().equals("")) {    newFrame=new ID3v23Frame(ID3v23Frames.FRAME_ID_V3_TIME);    ((FrameBodyTIME)newFrame.getBody()).setText(tmpBody.getTime());    ((FrameBodyTIME)newFrame.getBody()).setHoursOnly(tmpBody.isHoursOnly());    logger.config("Adding Frame:" + newFrame.getIdentifier());    frameMap.put(newFrame.getIdentifier(),newFrame);  }}  }
class C{  private static void compareAliasedSubtrees(XMPNode aliasNode,XMPNode baseNode,boolean outerCall) throws XMPException {  if (!aliasNode.getValue().equals(baseNode.getValue()) || aliasNode.getChildrenLength() != baseNode.getChildrenLength()) {    throw new XMPException("Mismatch between alias and base nodes",XMPError.BADXMP);  }  if (!outerCall && (!aliasNode.getName().equals(baseNode.getName()) || !aliasNode.getOptions().equals(baseNode.getOptions()) || aliasNode.getQualifierLength() != baseNode.getQualifierLength())) {    throw new XMPException("Mismatch between alias and base nodes",XMPError.BADXMP);  }  for (Iterator an=aliasNode.iterateChildren(), bn=baseNode.iterateChildren(); an.hasNext() && bn.hasNext(); ) {    XMPNode aliasChild=(XMPNode)an.next();    XMPNode baseChild=(XMPNode)bn.next();    compareAliasedSubtrees(aliasChild,baseChild,false);  }  for (Iterator an=aliasNode.iterateQualifier(), bn=baseNode.iterateQualifier(); an.hasNext() && bn.hasNext(); ) {    XMPNode aliasQual=(XMPNode)an.next();    XMPNode baseQual=(XMPNode)bn.next();    compareAliasedSubtrees(aliasQual,baseQual,false);  }}  }
class C{  public void testCase14(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  int aSign=-1;  int bSign=1;  byte rBytes[]={1,2,3,3,-6,-15,-24,-40,-49,-58,-67,-6,-15,-23};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public JPanel(boolean isDoubleBuffered){  this(new FlowLayout(),isDoubleBuffered);}  }
class C{  public PlaSide side_of(PlaPointFloat p_point){  return side_of(p_point,PlaSide.OPTIMAL_side_tolerance);}  }
class C{  char charAt(int i){  return text.charAt(i);}  }
class C{  public SignerInformationStore generateCounterSigners(SignerInformation signer) throws CMSException {  return this.generate(new CMSProcessableByteArray(null,signer.getSignature()),false).getSignerInfos();}  }
class C{  private Route nextPostponed(){  return postponedRoutes.remove(0);}  }
class C{  public void writeExif(String jpegFileName,String exifOutFileName) throws FileNotFoundException, IOException {  if (jpegFileName == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  InputStream is=null;  try {    is=new FileInputStream(jpegFileName);    writeExif(is,exifOutFileName);  } catch (  IOException e) {    closeSilently(is);    throw e;  }  is.close();}  }
class C{  private void read(char symbol) throws ParseException {  expect(symbol);  index++;}  }
class C{  public FacebookGraphObjectException(String message,Throwable throwable){  super(message,throwable);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node retval;  Node lastChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("class");  value=titleAttr.getValue();  assertEquals("attrValue1","Y\u03b1",value);}  }
class C{  public AuthenticationInfo(Entry authenticationEntry,String saslMechanism,boolean isRoot){  ifNull(authenticationEntry,saslMechanism);  this.authenticationEntry=authenticationEntry;  this.isRoot=isRoot;  this.isAuthenticated=true;  this.mustChangePassword=false;  this.authorizationEntry=authenticationEntry;  this.simpleBindDN=null;  this.authenticationType=AuthenticationType.SASL;  this.saslMechanism=saslMechanism;}  }
class C{  protected ClassLoader initClassLoader() throws IOException {  classPath=getClassPath();  ClassLoader jspcLoader=getClass().getClassLoader();  if (jspcLoader instanceof AntClassLoader) {    classPath+=File.pathSeparator + ((AntClassLoader)jspcLoader).getClasspath();  }  ArrayList<URL> urls=new ArrayList<>();  StringTokenizer tokenizer=new StringTokenizer(classPath,File.pathSeparator);  while (tokenizer.hasMoreTokens()) {    String path=tokenizer.nextToken();    try {      File libFile=new File(path);      urls.add(libFile.toURI().toURL());    } catch (    IOException ioe) {      throw new RuntimeException(ioe.toString());    }  }  File webappBase=new File(uriRoot);  if (webappBase.exists()) {    File classes=new File(webappBase,"/WEB-INF/classes");    try {      if (classes.exists()) {        classPath=classPath + File.pathSeparator + classes.getCanonicalPath();        urls.add(classes.getCanonicalFile().toURI().toURL());      }    } catch (    IOException ioe) {      throw new RuntimeException(ioe.toString());    }    File lib=new File(webappBase,"/WEB-INF/lib");    if (lib.exists() && lib.isDirectory()) {      String[] libs=lib.list();      if (libs != null) {        for (int i=0; i < libs.length; i++) {          if (libs[i].length() < 5)           continue;          String ext=libs[i].substring(libs[i].length() - 4);          if (!".jar".equalsIgnoreCase(ext)) {            if (".tld".equalsIgnoreCase(ext)) {              log.warn("TLD files should not be placed in " + "/WEB-INF/lib");            }            continue;          }          try {            File libFile=new File(lib,libs[i]);            classPath=classPath + File.pathSeparator + libFile.getAbsolutePath();            urls.add(libFile.getAbsoluteFile().toURI().toURL());          } catch (          IOException ioe) {            throw new RuntimeException(ioe.toString());          }        }      }    }  }  URL urlsA[]=new URL[urls.size()];  urls.toArray(urlsA);  loader=new URLClassLoader(urlsA,this.getClass().getClassLoader());  return loader;}  }
class C{  private void enqueue(Node<E> node){  last=last.next=node;}  }
class C{  static void checkUsageDirectiveHeader(UsageDirectiveHeader usagH,String messageID,boolean isServer) throws SOAPBindingException, SOAPFaultException {  if (usagH == null) {    return;  }  try {    checkActorAndMustUnderstand(usagH.getActor(),usagH.getMustUnderstand(),messageID,isServer);  } catch (  SOAPFaultException sfe) {    List usagHs=new ArrayList();    usagHs.add(usagH);    sfe.getSOAPFaultMessage().getSOAPFault().getDetail().setUsageDirectiveHeaders(usagHs);    throw sfe;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrcreatetextnode.class,args);}  }
class C{  void pushImportURL(String hrefUrl){  m_importStack.push(hrefUrl);}  }
class C{  public boolean isTokenRestricted() throws SSOException {  try {    return session.isRestricted();  } catch (  SessionException se) {    throw new SSOException(se);  }}  }
class C{  public Document decryptAndReplace(Document encryptedDoc,java.security.Key privKey) throws EncryptionException {  return ep.decryptAndReplace(encryptedDoc,privKey);}  }
class C{  private static String convertJava2MimeEncoding(String encoding){  EncodingInfo enc=(EncodingInfo)_encodingTableKeyJava.get(toUpperCaseFast(encoding));  if (null != enc)   return enc.name;  return encoding;}  }
class C{  public void firePropertyChange(String propertyName,int oldValue,int newValue){  super.firePropertyChange(propertyName,oldValue,newValue);}  }
class C{  private boolean shouldDrawItemDivider(ViewHolder holder,List<AlphabeticalAppsList.AdapterItem> items){  int pos=holder.getPosition();  return items.get(pos).viewType == AllAppsGridAdapter.PREDICTION_ICON_VIEW_TYPE;}  }
class C{  public void addSubSchema(String name,ServiceSchemaModificationWrapper subSchema){  subSchemas.put(name,subSchema);}  }
class C{  public int hashCode(){  return attr.hashCode() + entries.hashCode();}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String04() throws NoSuchProviderException, NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  KeyManagerFactory kMF;  for (int i=0; i < validValues.length; i++) {    kMF=KeyManagerFactory.getInstance(validValues[i],defaultProviderName);    assertNotNull("No KeyManagerFactory created",kMF);    assertEquals("Incorrect algorithm",kMF.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",kMF.getProvider().getName(),defaultProviderName);  }}  }
class C{  public void treeNodesChanged(TreeModelEvent e){  if (e != null) {    int changedIndexs[];    FHTreeStateNode changedParent=getNodeForPath(SwingUtilities2.getTreePath(e,getModel()),false,false);    int maxCounter;    changedIndexs=e.getChildIndices();    if (changedParent != null) {      if (changedIndexs != null && (maxCounter=changedIndexs.length) > 0) {        Object parentValue=changedParent.getUserObject();        for (int counter=0; counter < maxCounter; counter++) {          FHTreeStateNode child=changedParent.getChildAtModelIndex(changedIndexs[counter]);          if (child != null) {            child.setUserObject(treeModel.getChild(parentValue,changedIndexs[counter]));          }        }        if (changedParent.isVisible() && changedParent.isExpanded())         visibleNodesChanged();      } else       if (changedParent == root && changedParent.isVisible() && changedParent.isExpanded()) {        visibleNodesChanged();      }    }  }}  }
class C{  public static String pad(String self,int length,String padding){  while (self.length() < length) {    self=padding + self;  }  return self;}  }
class C{  protected int engineDigest(byte[] buf,int offset,int len) throws DigestException {  if (buf == null) {    throw new IllegalArgumentException("buf == null");  }  if (offset > buf.length || len > buf.length || (len + offset) > buf.length) {    throw new IllegalArgumentException();  }  if (len < DIGEST_LENGTH) {    throw new DigestException("len < DIGEST_LENGTH");  }  if (offset < 0) {    throw new ArrayIndexOutOfBoundsException(offset);  }  processDigest(buf,offset);  return DIGEST_LENGTH;}  }
class C{  public Template(TemplateFile templateFile,String name,AttributeType[] rdnAttributes,String[] subordinateTemplateNames,int[] numEntriesPerTemplate,TemplateLine[] templateLines){  this.templateFile=templateFile;  this.name=name;  this.rdnAttributes=rdnAttributes;  this.subordinateTemplateNames=subordinateTemplateNames;  this.numEntriesPerTemplate=numEntriesPerTemplate;  this.templateLines=templateLines;  subordinateTemplates=null;}  }
class C{  public void addBackendPopulatedListener(BackendPopulatedListener listener){  backendPopulatedListeners.add(listener);}  }
class C{  public AbandonedTrace(){  init(null);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.TokenKeyInfoType createTokenKeyInfoType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.TokenKeyInfoTypeImpl();}  }
class C{  public Preferences userRoot(){  return WindowsPreferences.userRoot;}  }
class C{  private OptionalLong(){  this.isPresent=false;  this.value=0;}  }
class C{  private void validatePurgeHistoricalOptions(LocalizableMessageBuilder buf){  try {    if (!isInteractive() && !connectionArgumentsPresent()) {      taskArgs.validateArgsIfOffline();    } else {      taskArgs.validateArgs();    }  } catch (  ClientException|ArgumentException e) {    addMessage(buf,e.getMessageObject());  }}  }
class C{  private void refreshOptionsClicked(){  if (panel == null) {    panel=new RefreshOptionsPanel();    panel.setInfo(getInfo());    dlg=new GenericDialog(Utilities.getFrame(MainMenuBar.this),panel);    dlg.setModal(true);    Utilities.centerGoldenMean(dlg,Utilities.getFrame(MainMenuBar.this));  }  dlg.setVisible(true);  if (!panel.isCanceled()) {    getInfo().setPoolingPeriod(panel.getPoolingPeriod());    getInfo().stopPooling();    getInfo().startPooling();  }}  }
class C{  public static AciBody decode(String input) throws AciException {  String version=null, name=null;  int startPos=0;  List<PermBindRulePair> permBindRulePairs=new ArrayList<>();  Pattern bodyPattern=Pattern.compile(header);  Matcher bodyMatcher=bodyPattern.matcher(input);  if (bodyMatcher.find()) {    startPos=bodyMatcher.start();    version=bodyMatcher.group(VERSION);    if (!version.equalsIgnoreCase(supportedVersion)) {      LocalizableMessage message=WARN_ACI_SYNTAX_INVAILD_VERSION.get(version);      throw new AciException(message);    }    name=bodyMatcher.group(NAME);    input=input.substring(bodyMatcher.end());  }  Pattern bodyPattern1=Pattern.compile("\\G" + actionRegex);  Matcher bodyMatcher1=bodyPattern1.matcher(input);  int lastIndex=-1;  while (bodyMatcher1.find()) {    String perm=bodyMatcher1.group(PERM);    String rights=bodyMatcher1.group(RIGHTS);    String bRule=bodyMatcher1.group(BINDRULE);    PermBindRulePair pair=PermBindRulePair.decode(perm,rights,bRule);    permBindRulePairs.add(pair);    lastIndex=bodyMatcher1.end();  }  if (lastIndex >= 0 && input.charAt(lastIndex) != ')') {    LocalizableMessage message=WARN_ACI_SYNTAX_GENERAL_PARSE_FAILED.get(input);    throw new AciException(message);  }  return new AciBody(version,name,startPos,permBindRulePairs);}  }
class C{  @Override public String toString(){  return "Rectangle: " + getWidth() + 'x'+ getHeight();}  }
class C{  public PageAttributes(ColorType color,MediaType media,OrientationRequestedType orientationRequested,OriginType origin,PrintQualityType printQuality,int[] printerResolution){  setColor(color);  setMedia(media);  setOrientationRequested(orientationRequested);  setOrigin(origin);  setPrintQuality(printQuality);  setPrinterResolution(printerResolution);}  }
class C{  @Override protected void onNewIntent(final Intent intent){  super.onNewIntent(intent);}  }
class C{  public SQLRecoverableException(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  public SchemaFactoryConfigurationError(String message,Throwable cause){  super(message,cause);}  }
class C{  public static Event35.Builder newBuilder(Event35 other){  return new Event35.Builder(other);}  }
class C{  public String encode(){  return encode(new StringBuilder()).toString();}  }
class C{  public boolean equals(Object o){  boolean eq=false;  if (!(o instanceof IdSearchOpModifier)) {    eq=false;  } else {    IdSearchOpModifier soperation=(IdSearchOpModifier)o;    eq=(soperation.sOp == this.sOp);  }  return eq;}  }
class C{  public static SearchRequest newSearchRequest(final DN name,final SearchScope scope){  return newSearchRequest(name,scope,SearchFilter.objectClassPresent());}  }
class C{  private void addEntry(Entry entry) throws Exception {  connection.processAdd(entry);  assertNotNull(getEntry(entry.getName(),1000,true));}  }
class C{  public void testGetPrefix() throws Throwable {  Document doc;  Element element;  Element qelement;  Attr attr;  Attr qattr;  String elemNoPrefix;  String elemPrefix;  String attrNoPrefix;  String attrPrefix;  doc=(Document)load("staff",builder);  element=doc.createElementNS("http://www.w3.org/DOM/Test/elem","elem");  qelement=doc.createElementNS("http://www.w3.org/DOM/Test/elem","qual:qelem");  attr=doc.createAttributeNS("http://www.w3.org/DOM/Test/attr","attr");  qattr=doc.createAttributeNS("http://www.w3.org/DOM/Test/attr","qual:qattr");  elemNoPrefix=element.getPrefix();  elemPrefix=qelement.getPrefix();  attrNoPrefix=attr.getPrefix();  attrPrefix=qattr.getPrefix();  assertNull("nodegetprefix03_1",elemNoPrefix);  assertEquals("nodegetprefix03_2","qual",elemPrefix);  assertNull("nodegetprefix03_3",attrNoPrefix);  assertEquals("nodegetprefix03_4","qual",attrPrefix);}  }
class C{  private static boolean validateSAMLResponseForFedlet(Response samlResp,String spEntityID,boolean wantNameIDEncrypted) throws SAML2Exception {  boolean resp=true;  if (samlResp != null && samlResp.isSigned()) {    List assertions=null;    if (wantNameIDEncrypted) {      assertions=samlResp.getEncryptedAssertion();    } else {      assertions=samlResp.getAssertion();    }    if (assertions == null) {      return false;    }    for (Iterator asserIter=assertions.iterator(); asserIter.hasNext(); ) {      Assertion assertion=null;      if (wantNameIDEncrypted) {        assertion=getDecryptedAssertion((EncryptedAssertion)asserIter.next(),spEntityID);      } else {        assertion=(Assertion)asserIter.next();      }      if (assertion != null) {        Conditions conditions=assertion.getConditions();        if (conditions != null) {          List audienceRes=conditions.getAudienceRestrictions();          if (audienceRes.size() > 1) {            resp=false;            break;          }        }        List statements=assertion.getAttributeStatements();        if (statements.size() > 1) {          resp=false;          break;        }      }    }  } else {    resp=false;  }  return resp;}  }
class C{  public GSERParser(String value){  ifNull(value);  this.gserValue=value;  this.pos=0;  this.length=value.length();}  }
class C{  private void endOuterRDFDescription(int level) throws IOException {  writeIndent(level + 1);  write(RDF_SCHEMA_END);  writeNewline();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.GoverningAgreementsElement createGoverningAgreementsElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.GoverningAgreementsElementImpl();}  }
class C{  public static SessionNotification parseXML(String xml){  SessionNotificationParser parser=new SessionNotificationParser(xml);  return parser.parseXML();}  }
class C{  @Override @SuppressWarnings("unchecked") public V put(K key,V value){  return putImpl(key,value);}  }
class C{  public static boolean isTransient(final Field field){  return Modifier.isTransient(field.getModifiers());}  }
class C{  public static double addAmounts(final double num1,final double num2){  final BigDecimal b1=new BigDecimal(num1);  final BigDecimal b2=new BigDecimal(num2);  BigDecimal b3=b1.add(b2);  b3=b3.setScale(3,BigDecimal.ROUND_HALF_UP);  final double result=b3.doubleValue();  return result;}  }
class C{  @Override public void mark(int readlimit){}  }
class C{  static void usePasswordPolicyRequestControl(Connection connection){  if (isSupported(PasswordPolicyRequestControl.OID)) {    final String dn="uid=bjensen,ou=People,dc=example,dc=com";    final char[] pwd="hifalutin".toCharArray();    try {      final BindRequest request=Requests.newSimpleBindRequest(dn,pwd).addControl(PasswordPolicyRequestControl.newControl(true));      final BindResult result=connection.bind(request);      final PasswordPolicyResponseControl control=result.getControl(PasswordPolicyResponseControl.DECODER,new DecodeOptions());      if (control != null && control.getWarningType() != null) {        System.out.println("Password policy warning " + control.getWarningType() + ", value "+ control.getWarningValue()+ " for "+ dn);      }    } catch (    final LdapException e) {      final Result result=e.getResult();      try {        final PasswordPolicyResponseControl control=result.getControl(PasswordPolicyResponseControl.DECODER,new DecodeOptions());        if (control != null) {          System.out.println("Password policy error " + control.getErrorType() + " for "+ dn);        }      } catch (      final DecodeException de) {        System.err.println(de.getMessage());        System.exit(ResultCode.CLIENT_SIDE_DECODING_ERROR.intValue());      }    }catch (    final DecodeException e) {      System.err.println(e.getMessage());      System.exit(ResultCode.CLIENT_SIDE_DECODING_ERROR.intValue());    }  } else {    System.err.println("PasswordPolicyRequestControl not supported");  }}  }
class C{  public INV_FLAG(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public boolean grabPixels() throws InterruptedException {  return grabPixels(0);}  }
class C{  public HeapException(String message){  super(message);}  }
class C{  void updateChildSizes(){  int n=getViewCount();  if (majorAxis == X_AXIS) {    for (int i=0; i < n; i++) {      View v=getView(i);      v.setSize((float)majorSpans[i],(float)minorSpans[i]);    }  } else {    for (int i=0; i < n; i++) {      View v=getView(i);      v.setSize((float)minorSpans[i],(float)majorSpans[i]);    }  }}  }
class C{  public static void releaseMBeanServer(MBeanServer mbeanServer){  checkPermission("releaseMBeanServer");  removeMBeanServer(mbeanServer);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode08.class,args);}  }
class C{  @Override protected void doCatch(Throwable throwable){  exceptionHandler.handle(throwable,getResponse());}  }
class C{  private void recurseTreeNodes(ProfileStackFrame parentFrame,DefaultMutableTreeNode parentNode){  ProfileStackFrame[] subFrames=parentFrame.getSubordinateFrames();  if (subFrames.length == 0) {    return;  }  for (  ProfileStackFrame subFrame : subFrames) {    boolean hasChildren=parentFrame.hasSubFrames();    DefaultMutableTreeNode subNode=new DefaultMutableTreeNode(subFrame,hasChildren);    if (hasChildren) {      recurseTreeNodes(subFrame,subNode);    }    parentNode.add(subNode);  }}  }
class C{  public void initialize(Object credential,XMLSignatureManager sigManager) throws SecurityTokenException {  debug.message("LibSecurityTokenProvider.initialize");  if (sigManager == null) {    debug.error("AMP: nulll signature manager");    throw new SecurityTokenException(bundle.getString("nullXMLSigManager"));  }  keystore=sigManager.getKeyProvider();  try {    ssoToken=credential;    SessionProvider provider=SessionManager.getProvider();    if (!provider.isValid(ssoToken)) {      throw new SecurityTokenException(bundle.getString("invalidSSOToken"));    }    String[] tmp=provider.getProperty(ssoToken,SessionProvider.AUTH_METHOD);    if ((tmp != null) && (tmp.length != 0)) {      authType=tmp[0];    }    tmp=provider.getProperty(ssoToken,SessionProvider.AUTH_INSTANT);    if ((tmp != null) && (tmp.length != 0)) {      authTime=tmp[0];    }  } catch (  SessionException e) {    debug.error("AMP: invalid SSO Token",e);    throw new SecurityTokenException(bundle.getString("invalidSSOToken"));  }  this.sigManager=sigManager;}  }
class C{  public static boolean isPubid(int c){  return c < 0x10000 && (CHARS[c] & MASK_PUBID) != 0;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.MsgAccountElement createMsgAccountElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.MsgAccountElementImpl();}  }
class C{  public final void testGetEncoded() throws CertificateException {  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  assertNotNull(c1.getEncoded());  assertTrue(Arrays.equals(testEncoding,c1.getEncoded()));  CertificateFactory cf=CertificateFactory.getInstance("X.509");  byte[] expectedEncoding=cert.getEncoded();  Certificate actual=cf.generateCertificate(new ByteArrayInputStream(expectedEncoding));  byte[] actualEncoding=actual.getEncoded();  assertTrue(Arrays.equals(expectedEncoding,actualEncoding));  assertFalse(expectedEncoding[4] == 200);  expectedEncoding[4]=(byte)200;  try {    cf.generateCertificate(new ByteArrayInputStream(expectedEncoding));    fail();  } catch (  CertificateException expected) {  }}  }
class C{  @Override public void rename(String oldName,String newName) throws NamingException {  rename(new CompositeName(oldName),new CompositeName(newName));}  }
class C{  public static boolean isMatch(String actualString,String pattern,char wildCard){  String tempPattern=pattern.trim();  int matchOffset=0;  boolean matched=true;  StringBuffer buffer=new StringBuffer();  for (int i=0; i < tempPattern.length(); i++) {    if (tempPattern.charAt(i) != wildCard) {      buffer.append(tempPattern.charAt(i));    }    if ((i == (tempPattern.length() - 1)) || (tempPattern.charAt(i) == wildCard)) {      if (buffer.length() > 0) {        int matchedIndex=actualString.indexOf(buffer.toString(),matchOffset);        if (matchedIndex >= matchOffset) {          if (i != (tempPattern.length() - 1)) {            matchOffset=matchedIndex + buffer.length();          } else {            if (tempPattern.charAt(i) != wildCard) {              if (actualString.substring(matchedIndex).length() != buffer.length()) {                matched=false;                break;              }            }          }        } else {          matched=false;          break;        }        buffer=new StringBuffer();      }    }  }  return matched;}  }
class C{  @Override public String toString(){  String dsc=null;switch (this.type) {case TYPE_UNDERFLOW:    dsc="UNDERFLOW error";  break;case TYPE_OVERFLOW:dsc="OVERFLOW error";break;case TYPE_UNMAPPABLE_CHAR:dsc="Unmappable-character error with erroneous input length " + this.length;break;case TYPE_MALFORMED_INPUT:dsc="Malformed-input error with erroneous input length " + this.length;break;default :dsc="";break;}return getClass().getName() + "[" + dsc+ "]";}  }
class C{  private void checkColRange(int col) throws SQLException {  if (col <= 0 || col > colCount) {    throw new SQLException("Invalid column index :" + col);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(textsplittextfour.class,args);}  }
class C{  public static String encodeURIComponent(String component,String encoding) throws UnsupportedEncodingException {  if (component == null) {    return null;  }  String result=URLEncoder.encode(component,encoding).replaceAll("\\%28","(").replaceAll("\\%29",")").replaceAll("\\+","%20").replaceAll("\\%27","'").replaceAll("\\%21","!").replaceAll("\\%7E","~");  return result;}  }
class C{  private static Project findProjectThatOwnsNode(Node node){  if (node != null) {    Project project=node.getLookup().lookup(Project.class);    if (project == null) {      DataObject dataObject=node.getLookup().lookup(DataObject.class);      if (dataObject != null) {        project=FileOwnerQuery.getOwner(dataObject.getPrimaryFile());      }    }    return (project == null) ? findProjectThatOwnsNode(node.getParentNode()) : project;  } else {    return null;  }}  }
class C{  public int hashCode(){  return super.hashCode();}  }
class C{  public void addConnectionProperty(final String name,final String value){  connectionProperties.put(name,value);}  }
class C{  private Map parsePropertyNames(Map m){  Map props=new HashMap();  Iterator allKeys=m.keySet().iterator();  while (allKeys.hasNext()) {    String attrName=(String)allKeys.next();    Set vals=(Set)m.get(attrName);    if (vals.isEmpty()) {      continue;    }    if (attrName.equalsIgnoreCase(ADDITIONAL_PROPERTIES_ATTR)) {      Iterator attrs=vals.iterator();      while (attrs.hasNext()) {        String compositeVal=(String)attrs.next();        int index=compositeVal.indexOf(EQUALS);        String propName=compositeVal.substring(0,index);        String propVal=compositeVal.substring(index + 1);        addToMap(props,propName,propVal);      }    } else {      String propertyName=(String)LDAPToSchema.get(attrName);      if (propertyName != null) {        addToMap(props,propertyName,vals);      }    }  }  return props;}  }
class C{  @Inject public AuthorizationRequestEndpoint(UmaProviderSettingsFactory umaProviderSettingsFactory,TokenStore oauth2TokenStore,OAuth2RequestFactory requestFactory,OAuth2ProviderSettingsFactory oauth2ProviderSettingsFactory,OAuth2UrisFactory oAuth2UrisFactory,UmaAuditLogger auditLogger,PendingRequestsService pendingRequestsService,Map<String,ClaimGatherer> claimGatherers,ExtensionFilterManager extensionFilterManager,UmaExceptionHandler exceptionHandler,JacksonRepresentationFactory jacksonRepresentationFactory){  this.umaProviderSettingsFactory=umaProviderSettingsFactory;  this.requestFactory=requestFactory;  this.oauth2TokenStore=oauth2TokenStore;  this.oauth2ProviderSettingsFactory=oauth2ProviderSettingsFactory;  this.oAuth2UrisFactory=oAuth2UrisFactory;  this.auditLogger=auditLogger;  this.pendingRequestsService=pendingRequestsService;  this.claimGatherers=claimGatherers;  this.extensionFilterManager=extensionFilterManager;  this.exceptionHandler=exceptionHandler;  this.jacksonRepresentationFactory=jacksonRepresentationFactory;}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    ServerTransaction st=requestEvent.getServerTransaction();    int finalResponse;    logger.info("Got an INVITE  " + request + " serverTx = "+ st);    Thread.sleep(300);    if (st == null) {      st=sipProvider.getNewServerTransaction(request);      logger.info("Server transaction created!" + request);      System.out.println("Dialog = " + st.getDialog());      if (st.getDialog().getApplicationData() == null) {        st.getDialog().setApplicationData(new ApplicationData());      }      finalResponse=200;    } else {      System.out.println("Dialog = " + st.getDialog());      logger.info("This is a RE INVITE ");      this.reInviteCount++;      ReInviteBusyTest.assertSame("Dialog mismatch ",st.getDialog(),this.dialog);      finalResponse=Response.BUSY_HERE;    }    logger.info("shootme: got an Invite sending " + finalResponse);    Response response=protocolObjects.messageFactory.createResponse(finalResponse,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    Address address=protocolObjects.addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=protocolObjects.headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    logger.info("got a server tranasaction " + st);    byte[] content=request.getRawContent();    if (content != null) {      ContentTypeHeader contentTypeHeader=protocolObjects.headerFactory.createContentTypeHeader("application","sdp");      response.setContent(content,contentTypeHeader);    }    dialog=st.getDialog();    if (dialog != null) {      logger.info("Dialog " + dialog);      logger.info("Dialog state " + dialog.getState());    }    st.sendResponse(response);    response=protocolObjects.messageFactory.createResponse(finalResponse,request);    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    response.addHeader(contactHeader);    st.sendResponse(response);    logger.info("TxState after sendResponse = " + st.getState());    this.inviteTid=st;  } catch (  Exception ex) {    String s="unexpected exception";    logger.error(s,ex);    ReInviteBusyTest.fail(s);  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.RequireDerivedKeysElement createRequireDerivedKeysElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RequireDerivedKeysElementImpl();}  }
class C{  void reset(Component owner,Component contents,int ownerX,int ownerY){  super.reset(owner,contents,ownerX,ownerY);  JComponent component=(JComponent)getComponent();  component.setOpaque(contents.isOpaque());  component.setLocation(ownerX,ownerY);  component.add(contents,BorderLayout.CENTER);  contents.invalidate();  pack();}  }
class C{  public static byte[] bitmapToByte(Bitmap b){  ByteArrayOutputStream o=new ByteArrayOutputStream();  b.compress(Bitmap.CompressFormat.PNG,100,o);  return o.toByteArray();}  }
class C{  public SIPHeader parse() throws ParseException {  Subject subject=new Subject();  if (debug)   dbg_enter("SubjectParser.parse");  try {    headerName(TokenTypes.SUBJECT);    String s=this.lexer.getRest();    subject.setSubject(s.trim());  }  finally {    if (debug)     dbg_leave("SubjectParser.parse");  }  return subject;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementgetelementsbytagnameaccessnodelist.class,args);}  }
class C{  public void includeClassName(QualifiedClassName classname){  if (classname == null)   throw new NullPointerException("Can't get the class id of null");  getClassID(classname);}  }
class C{  public boolean hasExtensions(){  return extensions != null;}  }
class C{  public void test_GetParams(){  assertEquals("wrong parameters",ecparams,ecpks.getParams());}  }
class C{  public SeriesTaskExecutorThread create(BlockingQueue<Task> queue){  Reject.ifNull(queue);  SeriesTaskExecutorThread processor=injector.getInstance(SeriesTaskExecutorThread.class);  processor.setQueue(queue);  return processor;}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public static void main(String[] args){  try {    LoginDialog dlg=new LoginDialog(org.opends.guitools.controlpanel.util.Utilities.createFrame(),new ApplicationTrustManager(null),5000);    dlg.pack();    dlg.setVisible(true);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  private void writeToFile(final InputStream input,final File output) throws IOException {  try (FileWriter writer=new FileWriter(output)){    BufferedReader reader=new BufferedReader(new InputStreamReader(input));    String line;    while ((line=reader.readLine()) != null) {      writer.write(line);      writer.write(EOL);    }  } }  }
class C{  @Override public void characters(char buffer[],int start,int length) throws SAXException {  if (saxLog.isDebugEnabled()) {    saxLog.debug("characters(" + new String(buffer,start,length) + ")");  }  bodyText.append(buffer,start,length);}  }
class C{  public void handle(Throwable throwable,Context context,Request request,Response response){  if (throwable.getCause() instanceof OAuth2RestletException) {    final OAuth2RestletException e=(OAuth2RestletException)throwable.getCause();    handle(e,context,request,response);  } else {    final ServerException serverException=new ServerException(throwable);    final OAuth2RestletException exception=new OAuth2RestletException(serverException.getStatusCode(),serverException.getError(),serverException.getMessage(),null);    handle(exception,context,request,response);  }}  }
class C{  public com.sun.identity.liberty.ws.meta.jaxb.SPDescriptorType createSPDescriptorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.meta.jaxb.impl.SPDescriptorTypeImpl();}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=getBitmapSize(value) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementremoveattributenode.class,args);}  }
class C{  protected Configuration createConfigurationInstance(){  return new Configuration(this.servletConf);}  }
class C{  boolean isAccountValid(AMIdentity amIdentity){  boolean userEnabled=true;  try {    String userActive=amIdentity.isActive() ? USER_ACTIVE : USER_INACTIVE;    Map<String,Set<String>> attrs=amIdentity.getAttributes(asSet(LOGIN_STATUS_ATTR,NSACCOUNTLOCK_ATTR));    String loginStatus=CollectionHelper.getMapAttr(attrs,LOGIN_STATUS_ATTR);    if (loginStatus == null || loginStatus.isEmpty()) {      loginStatus=USER_ACTIVE;    }    String nsAccountVal=CollectionHelper.getMapAttr(attrs,NSACCOUNTLOCK_ATTR);    if (nsAccountVal == null || nsAccountVal.isEmpty()) {      nsAccountVal=FALSE_VALUE;    }    if (DEBUG.messageEnabled()) {      DEBUG.message("inetuserstatus : " + userActive);      DEBUG.message("loginStatus : " + loginStatus);      DEBUG.message("nsAccountLockVal : " + nsAccountVal);    }    userEnabled=userActive.equalsIgnoreCase(USER_ACTIVE) && loginStatus.equalsIgnoreCase(USER_ACTIVE) && nsAccountVal.equalsIgnoreCase(FALSE_VALUE);  } catch (  Exception e) {    if (DEBUG.messageEnabled()) {      DEBUG.message("isAccountValid:Error :" + e.toString());    }  }  if (DEBUG.messageEnabled()) {    DEBUG.message("User enabled..." + userEnabled);  }  return userEnabled;}  }
class C{  public Builder names(final String... names){  return names(asList(names));}  }
class C{  public char readChar() throws java.io.IOException {  if (inBuf > 0) {    --inBuf;    if (++bufpos == bufsize)     bufpos=0;    return buffer[bufpos];  }  if (++bufpos >= maxNextCharInd)   FillBuff();  char c=buffer[bufpos];  UpdateLineColumn(c);  return c;}  }
class C{  @Override public PlaDimension dimension(){  if (lines_size() == 0)   return PlaDimension.EMPTY;  if (lines_size() > 4)   return PlaDimension.AREA;  if (lines_size() == 1)   return PlaDimension.AREA;  if (lines_size() == 2) {    if (tline_get(0).overlaps(tline_get(1))) {      return PlaDimension.LINE;    }    return PlaDimension.AREA;  }  if (lines_size() == 3) {    if (tline_get(0).overlaps(tline_get(1)) || tline_get(0).overlaps(tline_get(2)) || tline_get(1).overlaps(tline_get(2))) {      return PlaDimension.LINE;    }    PlaPoint intersection=tline_get(1).intersection(tline_get(2),"what does this do ?");    PlaSide side_of_line0=tline_get(0).side_of(intersection);    if (side_of_line0 == PlaSide.ON_THE_RIGHT) {      return PlaDimension.AREA;    }    if (side_of_line0 == PlaSide.ON_THE_LEFT) {      System.out.println("empty Simplex not normalized");      return PlaDimension.EMPTY;    }    return PlaDimension.POINT;  }  boolean collinear_0_2=tline_get(0).overlaps(tline_get(2));  boolean collinear_1_3=tline_get(1).overlaps(tline_get(3));  if (collinear_0_2 && collinear_1_3) {    return PlaDimension.POINT;  }  if (collinear_0_2 || collinear_1_3) {    return PlaDimension.LINE;  }  return PlaDimension.AREA;}  }
class C{  public void startDocument() throws SAXException {  m_endDocumentOccured=false;  m_prefixMappings=new java.util.Vector();  m_contextIndexes=new IntStack();  m_parents=new IntStack();  m_currentDocumentNode=m_size;  super.startDocument();}  }
class C{  public IssuingDistributionPointExtension(RDN relativeName,boolean onlyContainsUserCerts,boolean onlyContainsCACerts,boolean[] reasonFlags,boolean indirectCRL,boolean critical) throws IOException {  this.extensionId=PKIXExtensions.IssuingDistributionPoint_Id;  this.critical=critical;  this.relativeName=relativeName;  this.onlyContainsUserCerts=onlyContainsUserCerts;  this.onlyContainsCACerts=onlyContainsCACerts;  this.reasonFlags=reasonFlags;  this.indirectCRL=indirectCRL;  encodeThis();}  }
class C{  public INV_FLAG(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  boolean isLiteral(int index){  if (isValidMask() && index < string.length()) {    return literalMask.get(index);  }  return false;}  }
class C{  private Map mergeMap(Map baseHash,Map mergeHash){  Map results=null;  if (baseHash != null) {    results=new HashMap(baseHash);  }  if (mergeHash != null) {    if (results != null) {      results.putAll(mergeHash);    } else {      results=mergeHash;    }  }  return results;}  }
class C{  @Override public void createDaysStreamingQuoteTable(String date){  if (conn != null) {    Statement stmt;    try {      stmt=conn.createStatement();      quoteTable=ZStreamingConfig.getStreamingQuoteTbNameAppendFormat(date);      String sql="CREATE TABLE " + quoteTable + " "+ "(Time time NOT NULL, "+ " InstrumentToken varchar(32) NOT NULL, "+ " LastTradedPrice DECIMAL(20,4) NOT NULL, "+ " LastTradedQty BIGINT NOT NULL, "+ " AvgTradedPrice DECIMAL(20,4) NOT NULL, "+ " Volume BIGINT NOT NULL, "+ " BuyQty BIGINT NOT NULL, "+ " SellQty BIGINT NOT NULL, "+ " OpenPrice DECIMAL(20,4) NOT NULL, "+ " HighPrice DECIMAL(20,4) NOT NULL, "+ " LowPrice DECIMAL(20,4) NOT NULL, "+ " ClosePrice DECIMAL(20,4) NOT NULL, "+ " MarketDepthBid1Qty BIGINT NOT NULL, "+ " MarketDepthBid1Price DECIMAL(20,4) NOT NULL, "+ " MarketDepthBid1Orders INTEGER NOT NULL, "+ " MarketDepthBid2Qty BIGINT NOT NULL, "+ " MarketDepthBid2Price DECIMAL(20,4) NOT NULL, "+ " MarketDepthBid2Orders INTEGER NOT NULL, "+ " MarketDepthBid3Qty BIGINT NOT NULL, "+ " MarketDepthBid3Price DECIMAL(20,4) NOT NULL, "+ " MarketDepthBid3Orders INTEGER NOT NULL, "+ " MarketDepthBid4Qty BIGINT NOT NULL, "+ " MarketDepthBid4Price DECIMAL(20,4) NOT NULL, "+ " MarketDepthBid4Orders INTEGER NOT NULL, "+ " MarketDepthBid5Qty BIGINT NOT NULL, "+ " MarketDepthBid5Price DECIMAL(20,4) NOT NULL, "+ " MarketDepthBid5Orders INTEGER NOT NULL, "+ " MarketDepthOffer1Qty BIGINT NOT NULL, "+ " MarketDepthOffer1Price DECIMAL(20,4) NOT NULL, "+ " MarketDepthOffer1Orders INTEGER NOT NULL, "+ " MarketDepthOffer2Qty BIGINT NOT NULL, "+ " MarketDepthOffer2Price DECIMAL(20,4) NOT NULL, "+ " MarketDepthOffer2Orders INTEGER NOT NULL, "+ " MarketDepthOffer3Qty BIGINT NOT NULL, "+ " MarketDepthOffer3Price DECIMAL(20,4) NOT NULL, "+ " MarketDepthOffer3Orders INTEGER NOT NULL, "+ " MarketDepthOffer4Qty BIGINT NOT NULL, "+ " MarketDepthOffer4Price DECIMAL(20,4) NOT NULL, "+ " MarketDepthOffer4Orders INTEGER NOT NULL, "+ " MarketDepthOffer5Qty BIGINT NOT NULL, "+ " MarketDepthOffer5Price DECIMAL(20,4) NOT NULL, "+ " MarketDepthOffer5Orders INTEGER NOT NULL, "+ " PRIMARY KEY (InstrumentToken, Time)) "+ " ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;";      stmt.executeUpdate(sql);      System.out.println("StreamingQuoteDAOModeFull.createDaysStreamingQuoteTable(): SQL table for Streaming quote created, table name: [" + quoteTable + "]");    } catch (    SQLException e) {      System.out.println("StreamingQuoteDAOModeFull.createDaysStreamingQuoteTable(): ERROR: SQLException on creating Table, cause: " + e.getMessage());    }  } else {    System.out.println("StreamingQuoteDAOModeFull.createDaysStreamingQuoteTable(): ERROR: DB conn is null !!!");  }}  }
class C{  private static int determineType(byte[] bytes){  int offset=0;  if (bytes.length >= 3 && (bytes[0] & 0xFF) == 0xEF && (bytes[1] & 0xFF) == 0xBB && (bytes[2] & 0xFF) == 0xBF) {    offset+=3;  }  while (offset < bytes.length && bytes[offset] == ' ' || bytes[offset] == '\t' || bytes[offset] == '\r' || bytes[offset] == '\n' || bytes[offset] == '\f') {    offset++;  }  return determineType(new String(bytes,offset,Math.min(8,bytes.length - offset)));}  }
class C{  public static void drawString(Graphics g,String text,int underlinedChar,int x,int y){  int index=-1;  if (underlinedChar != '\0') {    char uc=Character.toUpperCase((char)underlinedChar);    char lc=Character.toLowerCase((char)underlinedChar);    int uci=text.indexOf(uc);    int lci=text.indexOf(lc);    if (uci == -1) {      index=lci;    } else     if (lci == -1) {      index=uci;    } else {      index=(lci < uci) ? lci : uci;    }  }  drawStringUnderlineCharAt(g,text,index,x,y);}  }
class C{  public static boolean isWeakKey(byte[] key,int offset){  if (key.length - offset < DES_KEY_LENGTH) {    throw new IllegalArgumentException("key material too short.");  }  nextkey:   for (int i=0; i < N_DES_WEAK_KEYS; i++) {    for (int j=0; j < DES_KEY_LENGTH; j++) {      if (key[j + offset] != DES_weak_keys[i * DES_KEY_LENGTH + j]) {        continue nextkey;      }    }    return true;  }  return false;}  }
class C{  @Activate protected synchronized void activate(ComponentContext context) throws Exception {  logger.info("Activating servlet registrator with configuration {}",context.getProperties());  JsonValue config=enhancedConfig.getConfigurationAsJson(context);  logger.debug("Parsed servlet filter config: {}",config);  registeredFilter=servletFilterRegistration.registerFilter(config);  logger.info("Successfully registered servlet filter {}",context.getProperties());  origSystemProperties=new HashMap<String,String>();  JsonValue rawSystemProperties=config.get(SERVLET_FILTER_SYSTEM_PROPERTIES);  for (  String key : rawSystemProperties.keys()) {    String prev=System.setProperty(key,rawSystemProperties.get(key).asString());    origSystemProperties.put(key,prev);  }}  }
class C{  public static void decodeFileToFile(String infile,String outfile){  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  } catch (  java.io.IOException ex) {    ex.printStackTrace();  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public void approveSelection(){  returnValue=APPROVE_OPTION;  if (dialog != null) {    dialog.setVisible(false);  }  fireActionPerformed(APPROVE_SELECTION);}  }
class C{  public Cursor fetchAll(Long ruleID,Long eventAttributeID,Long externalAttributeID,Long dataFilterID,Long parentRuleFilterID,String ruleFilterData){  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();  qb.setTables(DATABASE_TABLE);  qb.appendWhere("1=1");  if (ruleID != null) {    qb.appendWhere(" AND " + KEY_RULEID + " = "+ ruleID);  }  if (eventAttributeID != null) {    qb.appendWhere(" AND " + KEY_EVENTATTRIBUTEID + " = "+ eventAttributeID);  }  if (externalAttributeID != null) {    qb.appendWhere(" AND " + KEY_EXTERNALATTRIBUTEID + " = "+ externalAttributeID);  }  if (dataFilterID != null) {    qb.appendWhere(" AND " + KEY_DATAFILTERID + " = "+ dataFilterID);  }  if (parentRuleFilterID != null) {    qb.appendWhere(" AND " + KEY_PARENTRULEFILTERID + " = "+ parentRuleFilterID);  }  if (ruleFilterData != null) {    qb.appendWhere(" AND " + KEY_RULEFILTERDATA + " = ");    qb.appendWhereEscapeString(ruleFilterData);  }  return qb.query(database,KEYS,null,null,null,null,null);}  }
class C{  public java.lang.String signXML(java.lang.String xmlString,java.lang.String certAlias,java.lang.String algorithm) throws XMLSignatureException {  if (xmlString == null || xmlString.length() == 0) {    SAMLUtilsCommon.debug.error("signXML: xmlString is null.");    throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  if (certAlias == null || certAlias.length() == 0) {    SAMLUtilsCommon.debug.error("signXML: certAlias is null.");    throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  Element el=null;  try {    Document doc=XMLUtils.toDOMDocument(xmlString,SAMLUtilsCommon.debug);    el=signXML(doc,certAlias,algorithm);  } catch (  Exception e) {    SAMLUtilsCommon.debug.error("signXML Exception: ",e);    throw new XMLSignatureException(e.getMessage());  }  return XMLUtils.print(el);}  }
class C{  public synchronized void addItemListener(ItemListener l){  if (l == null) {    return;  }  itemListener=AWTEventMulticaster.add(itemListener,l);  newEventsOnly=true;}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    try {      int offs=target.getCaretPosition();      int begOffs=Utilities.getRowStart(target,offs);      if (select) {        target.moveCaretPosition(begOffs);      } else {        target.setCaretPosition(begOffs);      }    } catch (    BadLocationException bl) {      UIManager.getLookAndFeel().provideErrorFeedback(target);    }  }}  }
class C{  public FileWriterWithEncoding(File file,Charset encoding,boolean append) throws IOException {  super();  this.out=initWriter(file,encoding,append);}  }
class C{  public JSONObject toJSONObject() throws JSONException {  JSONObject jo=new JSONObject();  jo.put("id",id);  jo.put("value",value);  if (exclusive) {    jo.put("exclusive",exclusive);  }  return jo;}  }
class C{  public PropertyPermission(String name,String actions){  super(name,actions);  init(getMask(actions));}  }
class C{  @Override public boolean allowedInBranch(){  return true;}  }
class C{  public final byte[] update(byte[] input,int inputOffset,int inputLen){  if (mode != ENCRYPT_MODE && mode != DECRYPT_MODE) {    throw new IllegalStateException();  }  if (input == null) {    throw new IllegalArgumentException("input == null");  }  checkInputOffsetAndCount(input.length,inputOffset,inputLen);  if (input.length == 0) {    return null;  }  return spiImpl.engineUpdate(input,inputOffset,inputLen);}  }
class C{  public MergeCollation(String pattern) throws ParseException {  for (int i=0; i < statusArray.length; i++)   statusArray[i]=0;  setPattern(pattern);}  }
class C{  public GlyphMetrics(float advance,Rectangle2D bounds,byte glyphType){  this.horizontal=true;  this.advanceX=advance;  this.advanceY=0;  this.bounds=new Rectangle2D.Float();  this.bounds.setRect(bounds);  this.glyphType=glyphType;}  }
class C{  public Iterator<IPrivilege> search(String realm,ResourceSearchIndexes indexes,Set<String> subjectIndexes,boolean bSubTree,boolean bReferral) throws EntitlementException {  BufferedIterator iterator=(isMultiThreaded) ? new BufferedIterator() : new SimpleIterator();  if (!bSubTree && indexes.getPathIndexes().isEmpty()) {    return iterator;  }  if (bSubTree && indexes.getParentPathIndexes().isEmpty()) {    return iterator;  }  Set setDNs=new HashSet();  if (indexCacheSize > 0) {    setDNs.addAll(searchPrivileges(indexes,subjectIndexes,bSubTree,iterator));    setDNs.addAll(searchReferrals(indexes,bSubTree,iterator));  }  if (bReferral) {    String tmp=LDAPUtils.isDN(realm) ? DNMapper.orgNameToRealmName(realm) : realm;    if (tmp.equals("/")) {      ReferralPrivilege ref=getOrgAliasReferral(indexes);      if (ref != null) {        iterator.add(ref);      }    }  }  if (indexCacheSize == 0 || isDSSearchNecessary()) {    threadPool.submit(new SearchTask(iterator,indexes,subjectIndexes,bSubTree,setDNs));  } else {    iterator.isDone();  }  return iterator;}  }
class C{  public void entryChanged(DSEvent dsEvent){  if (debug.messageEnabled()) {    debug.message("ACIEventListener.entryChanged() DSEvent for dn: " + dsEvent.getID());  }  String objClasses=dsEvent.getClassName();  if ((objClasses.indexOf("cosClassicDefinition") != -1) || (objClasses.indexOf("costemplate") != -1)) {    return;  }  String affectedDNs=LDAPUtils.formatToRFC(dsEvent.getID());  IDirectoryServices dsServices=DirectoryServicesFactory.getInstance();  if (DirectoryServicesFactory.isCachingEnabled()) {    ((ICachedDirectoryServices)dsServices).dirtyCache(affectedDNs,dsEvent.getEventType(),false,true,Collections.EMPTY_SET);  }synchronized (listeners) {    Set keys=listeners.keySet();    for (Iterator items=keys.iterator(); items.hasNext(); ) {      AMObjectListener listener=(AMObjectListener)items.next();      if (dsEvent.getEventType() == DSEvent.OBJECT_CHANGED) {        listener.permissionsChanged(dsEvent.getID(),(Map)listeners.get(listener));      } else {        listener.objectChanged(affectedDNs,dsEvent.getEventType(),(Map)listeners.get(listener));      }    }  }}  }
class C{  private static boolean isValidCharCode(int code){  return (0x0020 <= code && code <= 0xD7FF) || (0x000A == code) || (0x0009 == code)|| (0x000D == code)|| (0xE000 <= code && code <= 0xFFFD)|| (0x10000 <= code && code <= 0x10ffff);}  }
class C{  public void write_scope(IndentFileWriter p_file,DsnIdentifier p_identifier) throws java.io.IOException {  p_file.start_scope();  p_file.write("polyline_path ");  p_identifier.write(this.layer.name,p_file);  p_file.write(" ");  p_file.write((new Double(this.width)).toString());  int line_count=coordinate_arr.length / 4;  for (int i=0; i < line_count; ++i) {    p_file.new_line();    for (int j=0; j < 4; ++j) {      p_file.write(new Double(coordinate_arr[4 * i + j]).toString());      p_file.write(" ");    }  }  p_file.end_scope();}  }
class C{  @Override public void closeInvoked(){}  }
class C{  @SuppressWarnings("unchecked") public DescribableRequestHandler(final RequestHandler handler){  this.delegate=Reject.checkNotNull(handler);  this.describableDelegate=delegate instanceof Describable ? (Describable<ApiDescription,Request>)delegate : null;}  }
class C{  protected Expression or(int opPos) throws TransformerException {  return compileOperation(new Or(),opPos);}  }
class C{  @Override public void nullifyUsedVars(){  sharedState=null;  challengeID=null;  primaryServers=null;  secondaryServers=null;  sharedSecret=null;}  }
class C{  public synchronized void stop(long stopInterval) throws Exception {  if (running == false) {    throw new IllegalStateException("Monitor is not running");  }  running=false;  try {    thread.join(stopInterval);  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  }  for (  FileAlterationObserver observer : observers) {    observer.destroy();  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.IssuedTokenType createIssuedTokenType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.IssuedTokenTypeImpl();}  }
class C{  private int oidcClaimsUsageCount(String uuid) throws SSOException, SMSException {  SMSEntry smsEntry=new SMSEntry(getToken(),getOAuth2ProviderBaseDN());  Map<String,Set<String>> attributes=smsEntry.getAttributes();  try {    Set<String> sunKeyValues=getMapSetThrows(attributes,"sunKeyValue");    if (sunKeyValues.contains("forgerock-oauth2-provider-oidc-claims-extension-script=" + uuid)) {      return 1;    }  } catch (  ValueNotFoundException ignored) {  }  return 0;}  }
class C{  public FrameBodyTIT2(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public RoutableMsg(int serverID,int destination){  this.senderID=serverID;  this.destination=destination;}  }
class C{  @Override public void globalConfigChanged(String serviceName,String version,String groupName,String serviceComponent,int type){}  }
class C{  public void test_getInstanceLjava_lang_String02(){  try {    SSLContext.getInstance(null);    fail("NoSuchAlgorithmException or NullPointerException should be thrown (protocol is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      SSLContext.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException was not thrown as expected for provider: ".concat(invalidValues[i]));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public SearchResultEntry toSearchResultEntry() throws LDAPException {  if (entry != null) {    return entry;  }  HashMap<ObjectClass,String> objectClasses=new HashMap<>();  HashMap<AttributeType,List<Attribute>> userAttributes=new HashMap<>();  HashMap<AttributeType,List<Attribute>> operationalAttributes=new HashMap<>();  for (  LDAPAttribute a : getAttributes()) {    Attribute attr=a.toAttribute();    AttributeDescription attrDesc=attr.getAttributeDescription();    AttributeType attrType=attrDesc.getAttributeType();    if (attrType.isObjectClass()) {      for (      ByteString os : a.getValues()) {        String ocName=os.toString();        ObjectClass oc=DirectoryServer.getSchema().getObjectClass(ocName);        objectClasses.put(oc,ocName);      }    } else     if (attrType.isOperational()) {      List<Attribute> attrs=operationalAttributes.get(attrType);      if (attrs == null) {        attrs=new ArrayList<>(1);        operationalAttributes.put(attrType,attrs);      }      attrs.add(attr);    } else {      List<Attribute> attrs=userAttributes.get(attrType);      if (attrs == null) {        attrs=newArrayList(attr);        userAttributes.put(attrType,attrs);      } else {        boolean attributeSeen=false;        for (int i=0; i < attrs.size(); i++) {          Attribute ea=attrs.get(i);          if (ea.getAttributeDescription().equals(attrDesc)) {            AttributeBuilder builder=new AttributeBuilder(ea);            builder.addAll(attr);            attrs.set(i,builder.toAttribute());            attributeSeen=true;          }        }        if (!attributeSeen) {          attrs.add(attr);        }      }    }  }  Entry entry=new Entry(dn,objectClasses,userAttributes,operationalAttributes);  return new SearchResultEntry(entry);}  }
class C{  public final void testPSSParameterSpec0201(){  AlgorithmParameterSpec aps=new PSSParameterSpec("SHA-1","MGF1",MGF1ParameterSpec.SHA1,20,1);  assertTrue(aps instanceof PSSParameterSpec);}  }
class C{  public FileSystemNotFoundException(){}  }
class C{  @Override protected Object createSsoServerPolicyAgentsMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  if (server != null)   policyAgentsGroup=new SsoServerPolicyAgentsImpl(this,server); else   policyAgentsGroup=new SsoServerPolicyAgentsImpl(this);  return policyAgentsGroup;}  }
class C{  private void renameConflictEntry(Operation conflictOp,DN dn,String entryUUID){  LocalizableMessage alertMessage=NOTE_UNRESOLVED_CONFLICT.get(dn);  DirectoryServer.sendAlertNotification(this,ALERT_TYPE_REPLICATION_UNRESOLVED_CONFLICT,alertMessage);  RDN newRDN=generateDeleteConflictDn(entryUUID,dn);  ModifyDNOperation newOp=renameEntry(dn,newRDN,getBaseDN(),true);  if (newOp.getResultCode() != ResultCode.SUCCESS) {    logger.error(ERR_CANNOT_RENAME_CONFLICT_ENTRY,dn,conflictOp,newOp.getResultCode());  }}  }
class C{  public PdfReader(String filename,ReaderProperties properties) throws IOException {  this(new RandomAccessSourceFactory().setForceRead(false).createBestSource(filename),properties);  this.sourcePath=filename;}  }
class C{  @Inject public PushDevicesResource(PushDevicesDao dao,ContextHelper helper,@Named("frRest") Debug debug,@Named(AuthenticatorPushServiceFactory.FACTORY_NAME) AuthenticatorDeviceServiceFactory<AuthenticatorPushService> pushServiceFactory){  super(dao,helper);  this.debug=debug;  this.pushServiceFactory=pushServiceFactory;}  }
class C{  protected static final String find(ByteChunk name){  int pos=findClosest(name,bcCache,bcCache.length);  if ((pos < 0) || (compare(name,bcCache[pos].name) != 0) || !(name.getCharset().equals(bcCache[pos].charset))) {    return null;  } else {    return bcCache[pos].value;  }}  }
class C{  @Override public Enumeration<URL> findResources(String name) throws IOException {  if (log.isDebugEnabled())   log.debug("    findResources(" + name + ")");  checkStateForResourceLoading(name);  LinkedHashSet<URL> result=new LinkedHashSet<>();  String path=nameToPath(name);  WebResource[] webResources=resources.getClassLoaderResources(path);  for (  WebResource webResource : webResources) {    if (webResource.exists()) {      result.add(webResource.getURL());    }  }  if (hasExternalRepositories) {    Enumeration<URL> otherResourcePaths=super.findResources(name);    while (otherResourcePaths.hasMoreElements()) {      result.add(otherResourcePaths.nextElement());    }  }  return Collections.enumeration(result);}  }
class C{  public boolean nodeIsExpanded(BasicNode node){  TreePath tp=new TreePath(treeModel.getPathToRoot(node));  return tree.isExpanded(tp);}  }
class C{  public Element first(){  if (root == null) {    return null;  }  elementStack=new Stack<StackItem>();  if (root.getElementCount() != 0) {    elementStack.push(new StackItem(root));  }  return root;}  }
class C{  private Socks4Message socksReadReply() throws IOException {  Socks4Message reply=new Socks4Message();  int bytesRead=0;  while (bytesRead < Socks4Message.REPLY_LENGTH) {    int count=getInputStream().read(reply.getBytes(),bytesRead,Socks4Message.REPLY_LENGTH - bytesRead);    if (count == -1) {      break;    }    bytesRead+=count;  }  if (Socks4Message.REPLY_LENGTH != bytesRead) {    throw new SocketException("Malformed reply from SOCKS server");  }  return reply;}  }
class C{  public void testMac06() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Provider provider=null;  for (int i=0; i < validValues.length; i++) {    try {      Mac.getInstance(validValues[i],provider);      fail("IllegalArgumentException must be thrown when provider is null");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public Hashtable parseLogsFromFile(String logFileName){  try {    File file=new File(logFileName);    long length=file.length();    char[] cbuf=new char[(int)length];    FileReader fr=new FileReader(file);    fr.read(cbuf);    fr.close();    StringBuffer sb=new StringBuffer();    sb.append("<?xml version='1.0' encoding='us-ascii'?>\n").append("<messages>\n").append(new String(cbuf)).append("</messages>\n");    System.out.println(sb.toString());    InputSource inputSource=new InputSource(new ByteArrayInputStream(sb.toString().getBytes()));    return this.parseLogs(inputSource);  } catch (  IOException ex) {    ex.printStackTrace();    return null;  }}  }
class C{  void toRefEntry(StringBuilder builder,String synopsisArgs,List<Argument> argList){  final String scriptName=getScriptName();  if (scriptName == null) {    throw new RuntimeException("The script name should have been set via the environment property '" + PROPERTY_SCRIPT_NAME + "'.");  }  final Map<String,Object> map=new HashMap<>();  map.put("locale",Locale.getDefault().getLanguage());  map.put("year",new SimpleDateFormat("yyyy").format(new Date()));  map.put("name",scriptName);  map.put("shortDesc",getShortToolDescription());  map.put("descTitle",REF_TITLE_DESCRIPTION.get());  map.put("args",synopsisArgs);  map.put("description",eolToNewPara(getToolDescription()));  map.put("info",getDocToolDescriptionSupplement());  if (!argList.isEmpty()) {    map.put("optionSection",getOptionsRefSect1(scriptName));  }  map.put("subcommands",null);  map.put("trailingSectionString",System.getProperty("org.forgerock.opendj.gendoc.trailing"));  applyTemplate(builder,"refEntry.ftl",map);}  }
class C{  public ClientKeyExchange(HandshakeIODataStream in,int length,boolean isTLS,boolean isRSA) throws IOException {  this.isTLS=isTLS;  this.isRSA=isRSA;  if (length == 0) {    this.length=0;    exchange_keys=EmptyArray.BYTE;  } else {    int size;    if (isRSA && !isTLS) {      size=length;      this.length=size;    } else {      size=in.readUint16();      this.length=2 + size;    }    exchange_keys=new byte[size];    Streams.readFully(in,exchange_keys);    if (this.length != length) {      fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect ClientKeyExchange");    }  }}  }
class C{  public INTERNAL(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  public int compare(File f1,File f2){  return f1.getPath().compareTo(f2.getPath());}  }
class C{  public CrestQuery(String queryId,QueryFilter<JsonPointer> queryFilter,List<JsonPointer> fields){  this.queryId=queryId;  this.queryFilter=queryFilter;  this.fields=fields;}  }
class C{  public Socket sendBytes(InetAddress senderAddress,InetAddress receiverAddress,int contactPort,String transport,byte[] bytes,boolean isClient,MessageChannel messageChannel) throws IOException {  int retry_count=0;  int max_retry=isClient ? 2 : 1;  int length=bytes.length;  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {    logger.logDebug("sendBytes " + transport + " local inAddr "+ senderAddress.getHostAddress()+ " remote inAddr "+ receiverAddress.getHostAddress()+ " port = "+ contactPort+ " length = "+ length+ " isClient "+ isClient);  }  if (logger.isLoggingEnabled(LogLevels.TRACE_INFO) && sipStack.isLogStackTraceOnMessageSend()) {    logger.logStackTrace(StackLogger.TRACE_INFO);  }  if (transport.compareToIgnoreCase(TCP) == 0) {    String key=makeKey(receiverAddress,contactPort);    Socket clientSock=null;    enterIOCriticalSection(key);    try {      clientSock=getSocket(key);      while (retry_count < max_retry) {        if (clientSock == null) {          if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {            logger.logDebug("inaddr = " + receiverAddress);            logger.logDebug("port = " + contactPort);          }          try {            clientSock=sipStack.getNetworkLayer().createSocket(receiverAddress,contactPort,senderAddress);          } catch (          SocketException e) {            logger.logError("Problem connecting " + receiverAddress + " "+ contactPort+ " "+ senderAddress+ " for message "+ new String(bytes,"UTF-8"));            removeSocket(key);            throw new SocketException(e.getClass() + " " + e.getMessage()+ " "+ e.getCause()+ " Problem connecting "+ receiverAddress+ " "+ contactPort+ " "+ senderAddress+ " for message "+ new String(bytes,"UTF-8"));          }          if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {            logger.logDebug("local inaddr = " + clientSock.getLocalAddress().getHostAddress());          }          OutputStream outputStream=clientSock.getOutputStream();          writeChunks(outputStream,bytes,length);          putSocket(key,clientSock);          break;        } else {          try {            OutputStream outputStream=clientSock.getOutputStream();            writeChunks(outputStream,bytes,length);            break;          } catch (          IOException ex) {            if (logger.isLoggingEnabled(LogWriter.TRACE_WARN))             logger.logWarning("IOException occured retryCount " + retry_count);            try {              clientSock.close();            } catch (            Exception e) {            }            clientSock=null;            retry_count++;            if (!isClient) {              removeSocket(key);              throw ex;            }            if (retry_count >= max_retry) {              removeSocket(key);            } else {              socketTable.remove(key);            }          }        }      }    } catch (    IOException ex) {      if (logger.isLoggingEnabled(LogWriter.TRACE_ERROR)) {        logger.logError("Problem sending: sendBytes " + transport + " inAddr "+ receiverAddress.getHostAddress()+ " port = "+ contactPort+ " remoteHost "+ messageChannel.getPeerAddress()+ " remotePort "+ messageChannel.getPeerPort()+ " peerPacketPort "+ messageChannel.getPeerPacketSourcePort()+ " isClient "+ isClient);      }      removeSocket(key);    } finally {      leaveIOCriticalSection(key);    }    if (clientSock == null) {      if (logger.isLoggingEnabled(LogWriter.TRACE_ERROR)) {        logger.logError(this.socketTable.toString());        logger.logError("Could not connect to " + receiverAddress + ":"+ contactPort);      }      throw new IOException("Could not connect to " + receiverAddress + ":"+ contactPort);    } else {      return clientSock;    }  } else   if (transport.compareToIgnoreCase(TLS) == 0) {    String key=makeKey(receiverAddress,contactPort);    Socket clientSock=null;    enterIOCriticalSection(key);    try {      clientSock=getSocket(key);      while (retry_count < max_retry) {        if (clientSock == null) {          clientSock=sipStack.getNetworkLayer().createSSLSocket(receiverAddress,contactPort,senderAddress);          SSLSocket sslsock=(SSLSocket)clientSock;          if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {            logger.logDebug("inaddr = " + receiverAddress);            logger.logDebug("port = " + contactPort);          }          HandshakeCompletedListenerImpl listner=new HandshakeCompletedListenerImpl((TLSMessageChannel)messageChannel,clientSock);          ((TLSMessageChannel)messageChannel).setHandshakeCompletedListener(listner);          sslsock.addHandshakeCompletedListener(listner);          sslsock.setEnabledProtocols(sipStack.getEnabledProtocols());          listner.startHandshakeWatchdog();          sslsock.startHandshake();          ((TLSMessageChannel)messageChannel).setHandshakeCompleted(true);          if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {            this.logger.logDebug("Handshake passed");          }          try {            sipStack.getTlsSecurityPolicy().enforceTlsPolicy(messageChannel.getEncapsulatedClientTransaction());          } catch (          SecurityException ex) {            throw new IOException(ex.getMessage());          }          if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {            this.logger.logDebug("TLS Security policy passed");          }          OutputStream outputStream=clientSock.getOutputStream();          writeChunks(outputStream,bytes,length);          putSocket(key,clientSock);          break;        } else {          try {            OutputStream outputStream=clientSock.getOutputStream();            writeChunks(outputStream,bytes,length);            break;          } catch (          IOException ex) {            if (logger.isLoggingEnabled())             logger.logException(ex);            removeSocket(key);            try {              logger.logDebug("Closing socket");              clientSock.close();            } catch (            Exception e) {            }            clientSock=null;            retry_count++;          }        }      }    } catch (    SSLHandshakeException ex) {      removeSocket(key);      throw ex;    }catch (    IOException ex) {      removeSocket(key);    } finally {      leaveIOCriticalSection(key);    }    if (clientSock == null) {      throw new IOException("Could not connect to " + receiverAddress + ":"+ contactPort);    } else     return clientSock;  } else {    DatagramSocket datagramSock=sipStack.getNetworkLayer().createDatagramSocket();    datagramSock.connect(receiverAddress,contactPort);    DatagramPacket dgPacket=new DatagramPacket(bytes,0,length,receiverAddress,contactPort);    datagramSock.send(dgPacket);    datagramSock.close();    return null;  }}  }
class C{  public static DN valueOf(ByteString dn){  return DN.valueOf(dn.toString());}  }
class C{  public Polyline translate_by(PlaVectorInt p_vector){  if (p_vector.equals(PlaVectorInt.ZERO))   return this;  int alist_len=plaline_len();  PlaLineIntAlist new_arr=new PlaLineIntAlist(alist_len);  for (int index=0; index < alist_len; ++index) {    new_arr.add(plaline(index).translate_by(p_vector));  }  return new Polyline(new_arr);}  }
class C{  public XPathFilterParameterSpec(String xPath){  if (xPath == null) {    throw new NullPointerException();  }  this.xPath=xPath;  this.nsMap=Collections.emptyMap();}  }
class C{  public static void cleanEmbeddedCassandra(){  dropKeyspaces();}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s12_linear_with_RC_tags();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  public ServiceConfigurationError(String message,Throwable cause){  super(message,cause);}  }
class C{  private void createLayout(){  setBackground(ColorAndFontConstants.greyBackground);  GridBagConstraints gbc=new GridBagConstraints();  gbc.anchor=GridBagConstraints.WEST;  gbc.gridx=0;  gbc.gridy=0;  gbc.gridwidth=1;  gbc.weightx=1.0;  gbc.fill=GridBagConstraints.BOTH;  addErrorPane(gbc);  gbc.insets=new Insets(10,0,0,0);  gbc.gridx=0;  gbc.gridy++;  gbc.weightx=1.0;  gbc.weighty=1.0;  gbc.fill=GridBagConstraints.BOTH;  gbc.gridwidth=7;  add(createSplitPane(),gbc);}  }
class C{  public void remove(int position){  delItem(position);}  }
class C{  public DragGestureRecognizer createDefaultDragGestureRecognizer(Component c,int actions,DragGestureListener dgl){  return Toolkit.getDefaultToolkit().createDragGestureRecognizer(MouseDragGestureRecognizer.class,this,c,actions,dgl);}  }
class C{  public DataStoreProviderException(Exception ex){  super(ex);}  }
class C{  public final boolean hasTag(Tag t){  return allTags.contains(t);}  }
class C{  @NonNull public static Expired hasExpired(@NonNull String key){  failIfNotInitialized();  return new Expired(key);}  }
class C{  @Override protected void onPause(){  super.onPause();  if (mCameraSourcePreview != null) {    mCameraSourcePreview.stop();  }}  }
class C{  public static boolean isScreenReadersAllowed(int permissions){  return (EncryptionConstants.ALLOW_SCREENREADERS & permissions) == EncryptionConstants.ALLOW_SCREENREADERS;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataindexsizeerrinsertdataoffsetnegative.class,args);}  }
class C{  private static HashSet<Object> cloneIssuerNames(Collection<Object> names){  try {    return cloneAndCheckIssuerNames(names);  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  if (contentHandler != null) {    contentHandler.characters(ch,start,length);  }}  }
class C{  private OptionalDouble(double value){  this.isPresent=true;  this.value=value;}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  public boolean supportsMultipleConfigurations(){  return (ss.supportsMultipleConfigurations());}  }
class C{  public void removeDisplayName(){  displayName=null;}  }
class C{  public SFieldDef findFieldFromClassDef(String fieldName,SClassDef theClass,STypeDef type,int mode,boolean checkSuper){  for (  SFieldDef f : theClass.fields()) {    if (mode == FIND_MODE_STATIC) {      if (!f.modifiers().contains(SModifier.STATIC))       continue;    } else     if (mode == FIND_MODE_NON_STATIC) {      if (f.modifiers().contains(SModifier.STATIC))       continue;    }    if (f.name().equals(fieldName)) {      if (f.modifiers().contains(SModifier.PUBLIC))       return f; else {        if (type != null) {          if (f.modifiers().contains(SModifier.PROTECTED)) {            if (theClass.isAssignableFrom(type) || theClass.pkg().equals(type.pkg()))             return f;          } else           if (f.modifiers().contains(SModifier.PRIVATE)) {            if (theClass.equals(type))             return f;          } else {            if (theClass.pkg().equals(type.pkg()))             return f;          }        }      }    }  }  if (checkSuper) {    SFieldDef f=null;    if (theClass.parent() != null) {      f=findFieldFromClassDef(fieldName,theClass.parent(),type,mode,true);    }    if (null == f) {      if (mode != FIND_MODE_NON_STATIC) {        for (        SInterfaceDef i : theClass.superInterfaces()) {          if (f != null)           return f;          f=findFieldFromInterfaceDef(fieldName,i,true);        }      }    }  }  return null;}  }
class C{  private boolean isBackendFractionalConfigConsistent(){  if (logger.isTraceEnabled()) {    logger.trace("Attempt to read the potential fractional config in domain root entry " + getBaseDN());  }  SearchRequest request=newSearchRequest(getBaseDN(),SearchScope.BASE_OBJECT).addAttribute(REPLICATION_GENERATION_ID,REPLICATION_FRACTIONAL_EXCLUDE,REPLICATION_FRACTIONAL_INCLUDE);  InternalSearchOperation search=conn.processSearch(request);  if (search.getResultCode() != ResultCode.SUCCESS && search.getResultCode() != ResultCode.NO_SUCH_OBJECT) {    String errorMsg=search.getResultCode().getName() + " " + search.getErrorMessage();    logger.error(ERR_SEARCHING_GENERATION_ID,getBaseDN(),errorMsg);    return false;  }  SearchResultEntry resultEntry=findReplicationSearchResultEntry(search);  if (resultEntry == null) {    return !fractionalConfig.isFractional();  }  Iterator<ByteString> exclIt=getAttributeValueIterator(resultEntry,REPLICATION_FRACTIONAL_EXCLUDE);  Iterator<ByteString> inclIt=getAttributeValueIterator(resultEntry,REPLICATION_FRACTIONAL_INCLUDE);  return isFractionalConfigConsistent(fractionalConfig,exclIt,inclIt);}  }
class C{  public boolean isValid(){  return JEditorPaneAccessibleHypertextSupport.this.linksValid;}  }
class C{  public Assertion(org.w3c.dom.Element assertionElement) throws SAMLException {  parseAssertionElement(assertionElement);}  }
class C{  public SIPHeader parse() throws ParseException {  ReasonList reasonList=new ReasonList();  if (debug)   dbg_enter("ReasonParser.parse");  try {    headerName(TokenTypes.REASON);    this.lexer.SPorHT();    while (lexer.lookAhead(0) != '\n') {      Reason reason=new Reason();      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      String value=token.getTokenValue();      reason.setProtocol(value);      super.parse(reason);      reasonList.add(reason);      if (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();      } else       this.lexer.SPorHT();    }  }  finally {    if (debug)     dbg_leave("ReasonParser.parse");  }  return reasonList;}  }
class C{  protected void tearDown(){  objArray=null;  s=null;}  }
class C{  private FilePreferencesImpl(AbstractPreferences parent,String name){  super(parent,name);  path=((FilePreferencesImpl)parent).path + File.separator + name;  initPrefs();}  }
class C{  private static int wordIndex(int bitIndex){  return bitIndex >> ADDRESS_BITS_PER_WORD;}  }
class C{  @Override public void onUpdateScrollbar(int dy){  if (mWidgets == null) {    return;  }  int rowCount=mWidgets.getPackageSize();  if (rowCount == 0) {    mScrollbar.setThumbOffset(-1,-1);    return;  }  getCurScrollState(mScrollPosState);  if (mScrollPosState.rowIndex < 0) {    mScrollbar.setThumbOffset(-1,-1);    return;  }  synchronizeScrollBarThumbOffsetToViewScroll(mScrollPosState,rowCount);}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s5_several_branches();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  public static <V>boolean addDistinctEntry(List<V> sourceList,V entry){  return (sourceList != null && !sourceList.contains(entry)) ? sourceList.add(entry) : false;}  }
class C{  @SuppressWarnings("deprecation") private static void addCallEndEvent(SQLiteDatabase db){  RegisteredEventDbAdapter eventDbAdapter=new RegisteredEventDbAdapter(db);  RegisteredEventAttributeDbAdapter eventAttributeDbAdapter=new RegisteredEventAttributeDbAdapter(db);  DataTypeDbAdapter dataTypeDbAdapter=new DataTypeDbAdapter(db);  Cursor dataTypeDbCursor=dataTypeDbAdapter.fetchAll(OmniDate.DB_NAME,OmniDate.class.getName());  dataTypeDbCursor.moveToFirst();  long dataTypeIdDate=CursorHelper.getLongFromCursor(dataTypeDbCursor,DataTypeDbAdapter.KEY_DATATYPEID);  long eventIdPhoneCallEnded=eventDbAdapter.insert(CallEndedEvent.EVENT_NAME,DbHelper.AppName.PHONE,"");  eventAttributeDbAdapter.insert(CallEndedEvent.ATTRIBUTE_TIMESTAMP,eventIdPhoneCallEnded,dataTypeIdDate);  dataTypeDbCursor.close();}  }
class C{  public void addLiteralResultAttribute(String att){  if (null == m_xslAttr)   m_xslAttr=new ArrayList();  m_xslAttr.add(att);}  }
class C{  public boolean reset(){  boolean wasReset=false;  if (super.reset()) {    resetToStream();    wasReset=true;  }  return wasReset;}  }
class C{  void writeAdditionalComments() throws IOException {  Object comments=getDocument().getProperty(HTMLDocument.AdditionalComments);  if (comments instanceof Vector) {    Vector v=(Vector)comments;    for (int counter=0, maxCounter=v.size(); counter < maxCounter; counter++) {      writeComment(v.elementAt(counter).toString());    }  }}  }
class C{  private void renameThumb(){  File thumbFile=new File(configuration.getThumbsPath() + File.separator + type+ this.currentFolder,this.fileName);  File newThumbFile=new File(configuration.getThumbsPath() + File.separator + type+ this.currentFolder,this.newFileName);  thumbFile.renameTo(newThumbFile);}  }
class C{  public A last(){  A last=null;  ImmutableList<A> t=this;  while (t.tail != null) {    last=t.head;    t=t.tail;  }  return last;}  }
class C{  boolean advance(Element elem){  if ((exclusions != null) && exclusions.get(elem.getIndex())) {    return false;  }  if (state != null) {    ContentModelState newState=state.advance(elem);    if (newState != null) {      state=newState;      return true;    }  } else   if (this.elem.getType() == ANY) {    return true;  }  return (inclusions != null) && inclusions.get(elem.getIndex());}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    ServerTransaction st=requestEvent.getServerTransaction();    int finalResponse;    logger.info("Got an INVITE  " + request + " serverTx = "+ st);    Thread.sleep(300);    if (st == null) {      st=sipProvider.getNewServerTransaction(request);      logger.info("Server transaction created!" + request);      System.out.println("Dialog = " + st.getDialog());      if (st.getDialog().getApplicationData() == null) {        st.getDialog().setApplicationData(new ApplicationData());      }      finalResponse=200;    } else {      System.out.println("Dialog = " + st.getDialog());      logger.info("This is a RE INVITE ");      this.reInviteCount++;      ReInviteInfoAckOverlapTest.assertSame("Dialog mismatch ",st.getDialog(),this.dialog);      finalResponse=Response.OK;    }    logger.info("shootme: got an Invite sending " + finalResponse);    Response response=protocolObjects.messageFactory.createResponse(finalResponse,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    Address address=protocolObjects.addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=protocolObjects.headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    logger.info("got a server tranasaction " + st);    byte[] content=request.getRawContent();    if (content != null) {      ContentTypeHeader contentTypeHeader=protocolObjects.headerFactory.createContentTypeHeader("application","sdp");      response.setContent(content,contentTypeHeader);    }    dialog=st.getDialog();    if (dialog != null) {      logger.info("Dialog " + dialog);      logger.info("Dialog state " + dialog.getState());    }    st.sendResponse(response);    response=protocolObjects.messageFactory.createResponse(finalResponse,request);    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    response.addHeader(contactHeader);    st.sendResponse(response);    logger.info("TxState after sendResponse = " + st.getState());    this.inviteTid=st;  } catch (  Exception ex) {    String s="unexpected exception";    logger.error(s,ex);    ReInviteInfoAckOverlapTest.fail(s);  }}  }
class C{  public static <T>T unmarshal(String xml,Class<T> type){  try {    JAXBElement<T> item=getContext(type).createUnmarshaller().unmarshal(toSource(xml),type);    return item.getValue();  } catch (  JAXBException e) {    throw new DataBindingException(e);  }catch (  IOException e) {    throw new DataBindingException(e);  }}  }
class C{  public UnauthorizedClientException(String message){  super(400,"unauthorized_client",message);}  }
class C{  public boolean hasBinaryAttributes(){  return false;}  }
class C{  public int size(){synchronized (lock) {    return count;  }}  }
class C{  private boolean selectElementUnder(Object root,Object element,DefaultTreeModel model){  int n=model.getChildCount(root);  boolean found=false;  for (int i=0; i < n && !found; i++) {    Object node=model.getChild(root,i);    if (node instanceof SchemaElementTreeNode) {      SchemaElementTreeNode schemaNode=(SchemaElementTreeNode)node;      if (schemaNode.getSchemaElement().equals(element)) {        found=true;        TreePath newSelectionPath=new TreePath(schemaNode.getPath());        treePane.getTree().setSelectionPath(newSelectionPath);        treePane.getTree().scrollPathToVisible(newSelectionPath);      }    }    if (!found) {      found=selectElementUnder(node,element,model);    }  }  return found;}  }
class C{  public Suite(File f) throws ParserConfigurationException, SAXException, IOException {  name=f.getName();  getXMLFiles(f);}  }
class C{  @Override public <T>List<T> dynamicQuery(DynamicQuery dynamicQuery){  return fooPersistence.findWithDynamicQuery(dynamicQuery);}  }
class C{  @Override public Promise<ActionResponse,ResourceException> actionCollection(Context context,ActionRequest request){  return RestUtils.generateUnsupportedOperation();}  }
class C{  @Override protected void finalize(){  try {    if (mWindow != null) {      mCloseGuard.warnIfOpen();      close();    }  }  finally {    super.finalize();  }}  }
class C{  public static Rule createAGetPostRule(String ruleName,String ruleUrl) throws PolicyException {  Map<String,Set<String>> actionValues=new HashMap<String,Set<String>>();  Set<String> set=new HashSet<String>();  set.add(ALLOW_DECISION);  actionValues.put(GET_ACTION,set);  set=new HashSet<String>();  set.add(ALLOW_DECISION);  actionValues.put(POST_ACTION,set);  return new Rule(ruleName,IPLANETAMWEBAGENTSERVICE,ruleUrl,actionValues);}  }
class C{  @Override public void onUpdateScrollbar(int dy){  List<AlphabeticalAppsList.AdapterItem> items=mApps.getAdapterItems();  if (items.isEmpty() || mNumAppsPerRow == 0) {    mScrollbar.setThumbOffset(-1,-1);    return;  }  int rowCount=mApps.getNumAppRows();  getCurScrollState(mScrollPosState);  if (mScrollPosState.rowIndex < 0) {    mScrollbar.setThumbOffset(-1,-1);    return;  }  int availableScrollBarHeight=getAvailableScrollBarHeight();  int availableScrollHeight=getAvailableScrollHeight(mApps.getNumAppRows(),mScrollPosState.rowHeight);  if (availableScrollHeight <= 0) {    mScrollbar.setThumbOffset(-1,-1);    return;  }  int scrollY=getPaddingTop() + (mScrollPosState.rowIndex * mScrollPosState.rowHeight) - mScrollPosState.rowTopOffset;  int scrollBarY=mBackgroundPadding.top + (int)(((float)scrollY / availableScrollHeight) * availableScrollBarHeight);  if (mScrollbar.isThumbDetached()) {    int scrollBarX;    if (Utilities.isRtl(getResources())) {      scrollBarX=mBackgroundPadding.left;    } else {      scrollBarX=getWidth() - mBackgroundPadding.right - mScrollbar.getThumbWidth();    }    if (mScrollbar.isDraggingThumb()) {      mScrollbar.setThumbOffset(scrollBarX,(int)mScrollbar.getLastTouchY());    } else {      int thumbScrollY=mScrollbar.getThumbOffset().y;      int diffScrollY=scrollBarY - thumbScrollY;      if (diffScrollY * dy > 0f) {        if (dy < 0) {          int offset=(int)((dy * thumbScrollY) / (float)scrollBarY);          thumbScrollY+=Math.max(offset,diffScrollY);        } else {          int offset=(int)((dy * (availableScrollBarHeight - thumbScrollY)) / (float)(availableScrollBarHeight - scrollBarY));          thumbScrollY+=Math.min(offset,diffScrollY);        }        thumbScrollY=Math.max(0,Math.min(availableScrollBarHeight,thumbScrollY));        mScrollbar.setThumbOffset(scrollBarX,thumbScrollY);        if (scrollBarY == thumbScrollY) {          mScrollbar.reattachThumbToScroll();        }      } else {        mScrollbar.setThumbOffset(scrollBarX,thumbScrollY);      }    }  } else {    synchronizeScrollBarThumbOffsetToViewScroll(mScrollPosState,rowCount);  }}  }
class C{  private static StepPattern createDefaultStepPattern(Compiler compiler,int opPos,MatchPatternIterator mpi,int analysis,StepPattern tail,StepPattern head) throws javax.xml.transform.TransformerException {  int stepType=compiler.getOp(opPos);  boolean simpleInit=false;  boolean prevIsOneStepDown=true;  int whatToShow=compiler.getWhatToShow(opPos);  StepPattern ai=null;  int axis, predicateAxis;switch (stepType) {case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:    prevIsOneStepDown=false;  Expression expr;switch (stepType) {case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:  expr=compiler.compile(opPos);break;default :expr=compiler.compile(opPos + 2);}axis=Axis.FILTEREDLIST;predicateAxis=Axis.FILTEREDLIST;ai=new FunctionPattern(expr,axis,predicateAxis);simpleInit=true;break;case OpCodes.FROM_ROOT:whatToShow=DTMFilter.SHOW_DOCUMENT | DTMFilter.SHOW_DOCUMENT_FRAGMENT;axis=Axis.ROOT;predicateAxis=Axis.ROOT;ai=new StepPattern(DTMFilter.SHOW_DOCUMENT | DTMFilter.SHOW_DOCUMENT_FRAGMENT,axis,predicateAxis);break;case OpCodes.FROM_ATTRIBUTES:whatToShow=DTMFilter.SHOW_ATTRIBUTE;axis=Axis.PARENT;predicateAxis=Axis.ATTRIBUTE;break;case OpCodes.FROM_NAMESPACE:whatToShow=DTMFilter.SHOW_NAMESPACE;axis=Axis.PARENT;predicateAxis=Axis.NAMESPACE;break;case OpCodes.FROM_ANCESTORS:axis=Axis.DESCENDANT;predicateAxis=Axis.ANCESTOR;break;case OpCodes.FROM_CHILDREN:axis=Axis.PARENT;predicateAxis=Axis.CHILD;break;case OpCodes.FROM_ANCESTORS_OR_SELF:axis=Axis.DESCENDANTORSELF;predicateAxis=Axis.ANCESTORORSELF;break;case OpCodes.FROM_SELF:axis=Axis.SELF;predicateAxis=Axis.SELF;break;case OpCodes.FROM_PARENT:axis=Axis.CHILD;predicateAxis=Axis.PARENT;break;case OpCodes.FROM_PRECEDING_SIBLINGS:axis=Axis.FOLLOWINGSIBLING;predicateAxis=Axis.PRECEDINGSIBLING;break;case OpCodes.FROM_PRECEDING:axis=Axis.FOLLOWING;predicateAxis=Axis.PRECEDING;break;case OpCodes.FROM_FOLLOWING_SIBLINGS:axis=Axis.PRECEDINGSIBLING;predicateAxis=Axis.FOLLOWINGSIBLING;break;case OpCodes.FROM_FOLLOWING:axis=Axis.PRECEDING;predicateAxis=Axis.FOLLOWING;break;case OpCodes.FROM_DESCENDANTS_OR_SELF:axis=Axis.ANCESTORORSELF;predicateAxis=Axis.DESCENDANTORSELF;break;case OpCodes.FROM_DESCENDANTS:axis=Axis.ANCESTOR;predicateAxis=Axis.DESCENDANT;break;default :throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NULL_ERROR_HANDLER,new Object[]{Integer.toString(stepType)}));}if (null == ai) {whatToShow=compiler.getWhatToShow(opPos);ai=new StepPattern(whatToShow,compiler.getStepNS(opPos),compiler.getStepLocalName(opPos),axis,predicateAxis);}if (false || DEBUG_PATTERN_CREATION) {System.out.print("new step: " + ai);System.out.print(", axis: " + Axis.getNames(ai.getAxis()));System.out.print(", predAxis: " + Axis.getNames(ai.getAxis()));System.out.print(", what: ");System.out.print("    ");ai.debugWhatToShow(ai.getWhatToShow());}int argLen=compiler.getFirstPredicateOpPos(opPos);ai.setPredicates(compiler.getCompiledPredicates(argLen));return ai;}  }
class C{  public IssueService(){  super();}  }
class C{  protected boolean processSocketWithOptions(long socket){  try {    if (running) {      if (log.isDebugEnabled()) {        log.debug(sm.getString("endpoint.debug.socket",Long.valueOf(socket)));      }      AprSocketWrapper wrapper=new AprSocketWrapper(Long.valueOf(socket),this);      wrapper.setKeepAliveLeft(getMaxKeepAliveRequests());      wrapper.setSecure(isSSLEnabled());      wrapper.setReadTimeout(getSoTimeout());      wrapper.setWriteTimeout(getSoTimeout());      connections.put(Long.valueOf(socket),wrapper);      getExecutor().execute(new SocketWithOptionsProcessor(wrapper));    }  } catch (  RejectedExecutionException x) {    log.warn("Socket processing request was rejected for:" + socket,x);    return false;  }catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    log.error(sm.getString("endpoint.process.fail"),t);    return false;  }  return true;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  Document newDoc;  String namespaceURI="http://www.w3.org/xml/1998/namespace";  String qualifiedName="xml:root";  DocumentType docType=null;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();{    boolean success=false;    try {      newDoc=domImpl.createDocument(namespaceURI,qualifiedName,docType);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("domimplementationcreatedocument05",success);  }}  }
class C{  public HelloRequest(){}  }
class C{  @Override public boolean entryExists(SSOToken token,String dn){  if (debug.messageEnabled()) {    debug.message("SMSLdapObject: checking if entry exists: " + dn);  }  dn=DN.valueOf(dn).toString().toLowerCase();  if (SMSNotificationManager.isCacheEnabled()) {    if (entriesPresent.contains(dn)) {      if (debug.messageEnabled()) {        debug.message("SMSLdapObject: entry present in cache: " + dn);      }      return true;    } else     if (entriesNotPresent.contains(dn)) {      if (debug.messageEnabled()) {        debug.message("SMSLdapObject: entry present in not-present-cache: " + dn);      }      return false;    }  }  try {    boolean entryExists=entryExists(dn);    if (SMSNotificationManager.isCacheEnabled()) {      initializeNotification();      Set<String> cacheToUpdate=entryExists ? entriesPresent : entriesNotPresent;      cacheToUpdate.add(dn);      if (cacheToUpdate.size() > entriesPresentCacheSize) {synchronized (cacheToUpdate) {          if (!cacheToUpdate.isEmpty()) {            cacheToUpdate.remove(cacheToUpdate.iterator().next());          }        }      }    }    return entryExists;  } catch (  SMSException smse) {    return false;  }}  }
class C{  public FSLogoutStatus processSingleLogoutRequest(FSLogoutNotification reqLogout){  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("Entered FSPreLogoutHandler::" + " processSingleLogoutRequest SOAP Profile");  }  userID=FSLogoutUtil.getUserFromRequest(reqLogout,realm,hostedEntityId,hostedRole,hostedConfig,metaAlias);  if (userID == null) {    FSUtils.debug.error("User does not exist. Invalid request");    return new FSLogoutStatus(IFSConstants.SAML_REQUESTER);  }  FSSessionManager sessionManager=FSSessionManager.getInstance(metaAlias);  String sessionIndex=reqLogout.getSessionIndex();  FSSession session=sessionManager.getSession(sessionManager.getSessionList(userID),sessionIndex);  FSLogoutUtil.cleanSessionMapPartnerList(userID,remoteEntityID,metaAlias,session);  boolean bHasAnyOtherProvider=false;  HashMap providerMap=new HashMap();  FSSessionPartner sessionPartner=null;  providerMap=FSLogoutUtil.getCurrentProvider(userID,metaAlias,ssoToken,session);  if (providerMap != null) {    sessionPartner=(FSSessionPartner)providerMap.get(IFSConstants.PARTNER_SESSION);    sessionIndex=(String)providerMap.get(IFSConstants.SESSION_INDEX);    if (sessionPartner != null) {      bHasAnyOtherProvider=true;      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("bHasAnyOtherProvider = " + bHasAnyOtherProvider);      }      currentEntityId=sessionPartner.getPartner();    }  }  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("bHasAnyOtherProvider other than source : " + bHasAnyOtherProvider);  }  FSUtils.debug.message("creating FSSingleLogoutHandler");  FSSingleLogoutHandler handlerObj=new FSSingleLogoutHandler();  handlerObj.setHostedDescriptor(hostedDescriptor);  handlerObj.setHostedDescriptorConfig(hostedConfig);  handlerObj.setRealm(realm);  handlerObj.setHostedEntityId(hostedEntityId);  handlerObj.setHostedProviderRole(hostedRole);  handlerObj.setMetaAlias(metaAlias);  handlerObj.setSingleLogoutProtocol(IFSConstants.LOGOUT_SP_SOAP_PROFILE);  return handlerObj.processSingleLogoutRequest(reqLogout,sessionPartner,userID,remoteEntityID,sessionIndex,isWMLAgent,(hostedRole.equals(IFSConstants.SP) ? IFSConstants.IDP : IFSConstants.SP));}  }
class C{  public static void paint(Graphics g,int x,int y,int w,int h,Image image,Insets sInsets,Insets dInsets,PaintType paintType,int mask){  if (image == null || image.getWidth(null) <= 0 || image.getHeight(null) <= 0) {    return;  }  if (sInsets == null) {    sInsets=EMPTY_INSETS;  }  if (dInsets == null) {    dInsets=EMPTY_INSETS;  }  int iw=image.getWidth(null);  int ih=image.getHeight(null);  if (paintType == PaintType.CENTER) {    g.drawImage(image,x + (w - iw) / 2,y + (h - ih) / 2,null);  } else   if (paintType == PaintType.TILE) {    int lastIY=0;    for (int yCounter=y, maxY=y + h; yCounter < maxY; yCounter+=(ih - lastIY), lastIY=0) {      int lastIX=0;      for (int xCounter=x, maxX=x + w; xCounter < maxX; xCounter+=(iw - lastIX), lastIX=0) {        int dx2=Math.min(maxX,xCounter + iw - lastIX);        int dy2=Math.min(maxY,yCounter + ih - lastIY);        g.drawImage(image,xCounter,yCounter,dx2,dy2,lastIX,lastIY,lastIX + dx2 - xCounter,lastIY + dy2 - yCounter,null);      }    }  } else {    int st=sInsets.top;    int sl=sInsets.left;    int sb=sInsets.bottom;    int sr=sInsets.right;    int dt=dInsets.top;    int dl=dInsets.left;    int db=dInsets.bottom;    int dr=dInsets.right;    if (st + sb > ih) {      db=dt=sb=st=Math.max(0,ih / 2);    }    if (sl + sr > iw) {      dl=dr=sl=sr=Math.max(0,iw / 2);    }    if (dt + db > h) {      dt=db=Math.max(0,h / 2 - 1);    }    if (dl + dr > w) {      dl=dr=Math.max(0,w / 2 - 1);    }    boolean stretch=(paintType == PaintType.PAINT9_STRETCH);    if ((mask & PAINT_ALL) != 0) {      mask=(PAINT_ALL - 1) & ~mask;    }    if ((mask & PAINT_LEFT) != 0) {      drawChunk(image,g,stretch,x,y + dt,x + dl,y + h - db,0,st,sl,ih - sb,false);    }    if ((mask & PAINT_TOP_LEFT) != 0) {      drawImage(image,g,x,y,x + dl,y + dt,0,0,sl,st);    }    if ((mask & PAINT_TOP) != 0) {      drawChunk(image,g,stretch,x + dl,y,x + w - dr,y + dt,sl,0,iw - sr,st,true);    }    if ((mask & PAINT_TOP_RIGHT) != 0) {      drawImage(image,g,x + w - dr,y,x + w,y + dt,iw - sr,0,iw,st);    }    if ((mask & PAINT_RIGHT) != 0) {      drawChunk(image,g,stretch,x + w - dr,y + dt,x + w,y + h - db,iw - sr,st,iw,ih - sb,false);    }    if ((mask & PAINT_BOTTOM_RIGHT) != 0) {      drawImage(image,g,x + w - dr,y + h - db,x + w,y + h,iw - sr,ih - sb,iw,ih);    }    if ((mask & PAINT_BOTTOM) != 0) {      drawChunk(image,g,stretch,x + dl,y + h - db,x + w - dr,y + h,sl,ih - sb,iw - sr,ih,true);    }    if ((mask & PAINT_BOTTOM_LEFT) != 0) {      drawImage(image,g,x,y + h - db,x + dl,y + h,0,ih - sb,sl,ih);    }    if ((mask & PAINT_CENTER) != 0) {      drawImage(image,g,x + dl,y + dt,x + w - dr,y + h - db,sl,st,iw - sr,ih - sb);    }  }}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setMavenLike(true);  unchecked(null);}  }
class C{  void startOptional(){  parsed.add(currentParsed().copy());}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.SignatureMethodType createSignatureMethodType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.SignatureMethodTypeImpl();}  }
class C{  public void addNotify(){synchronized (getTreeLock()) {    if (peer == null)     peer=getToolkit().createPanel(this);    super.addNotify();  }}  }
class C{  @Override public void revalidate(){}  }
class C{  public PdfCanvas showText(String text){  document.checkShowTextIsoConformance(currentGs,resources);  showTextInt(text);  contentStream.getOutputStream().writeBytes(Tj);  return this;}  }
class C{  public void insertUpdate(DocumentEvent e){  if (getUpdatePolicy() == NEVER_UPDATE || (getUpdatePolicy() == UPDATE_WHEN_ON_EDT && !SwingUtilities.isEventDispatchThread())) {    if ((e.getOffset() <= dot || e.getOffset() <= mark) && selectionTag != null) {      try {        component.getHighlighter().changeHighlight(selectionTag,Math.min(dot,mark),Math.max(dot,mark));      } catch (      BadLocationException e1) {        e1.printStackTrace();      }    }    return;  }  int offset=e.getOffset();  int length=e.getLength();  int newDot=dot;  short changed=0;  if (e instanceof AbstractDocument.UndoRedoDocumentEvent) {    setDot(offset + length);    return;  }  if (newDot >= offset) {    newDot+=length;    changed|=1;  }  int newMark=mark;  if (newMark >= offset) {    newMark+=length;    changed|=2;  }  if (changed != 0) {    Position.Bias dotBias=DefaultCaret.this.dotBias;    if (dot == offset) {      Document doc=component.getDocument();      boolean isNewline;      try {        Segment s=new Segment();        doc.getText(newDot - 1,1,s);        isNewline=(s.count > 0 && s.array[s.offset] == '\n');      } catch (      BadLocationException ble) {        isNewline=false;      }      if (isNewline) {        dotBias=Position.Bias.Forward;      } else {        dotBias=Position.Bias.Backward;      }    }    if (newMark == newDot) {      setDot(newDot,dotBias);      ensureValidPosition();    } else {      setDot(newMark,markBias);      if (getDot() == newMark) {        moveDot(newDot,dotBias);      }      ensureValidPosition();    }  }}  }
class C{  @Override protected void onPause(){  super.onPause();}  }
class C{  public static ValueExpression createValueException(final String value,final Class<?> clas){  final ExpressionFactory expressionFactory=JKJsfUtil.getExpressionFactory();  if (expressionFactory != null) {    final ELContext elContext=FacesContext.getCurrentInstance().getELContext();    final ValueExpression ve1=expressionFactory.createValueExpression(elContext,value,clas);    return ve1;  } else {    final ELContext elContext=FacesContext.getCurrentInstance().getELContext();    final ValueExpression ve1=FacesContext.getCurrentInstance().getApplication().getExpressionFactory().createValueExpression(elContext,value,clas);    return ve1;  }}  }
class C{  public void test_fillLjava_util_ListLjava_lang_Object(){  try {    Collections.fill(null,new Object());    fail("Expected NullPointerException for null list parameter");  } catch (  NullPointerException e) {  }  final int size=ll.size();  Collections.fill(ll,"k");  assertTrue("Fill modified list size",size == ll.size());  Iterator i=ll.iterator();  while (i.hasNext())   assertEquals("Failed to fill elements","k",i.next());  Collections.fill(ll,null);  assertTrue("Fill with nulls modified list size",size == ll.size());  i=ll.iterator();  while (i.hasNext())   assertNull("Failed to fill with nulls",i.next());  Mock_ArrayList mal=new Mock_ArrayList();  mal.add("one");  mal.add("two");  try {    Collections.fill(mal,"value");    fail("UnsupportedOperationException ecpected");  } catch (  UnsupportedOperationException e) {  }}  }
class C{  protected boolean isWFXMLChar(String chardata,Character refInvalidChar){  if (chardata == null || (chardata.length() == 0)) {    return true;  }  char[] dataarray=chardata.toCharArray();  int datalength=dataarray.length;  if (fIsXMLVersion11) {    int i=0;    while (i < datalength) {      if (XML11Char.isXML11Invalid(dataarray[i++])) {        char ch=dataarray[i - 1];        if (XMLChar.isHighSurrogate(ch) && i < datalength) {          char ch2=dataarray[i++];          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {            continue;          }        }        refInvalidChar=new Character(ch);        return false;      }    }  } else {    int i=0;    while (i < datalength) {      if (XMLChar.isInvalid(dataarray[i++])) {        char ch=dataarray[i - 1];        if (XMLChar.isHighSurrogate(ch) && i < datalength) {          char ch2=dataarray[i++];          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {            continue;          }        }        refInvalidChar=new Character(ch);        return false;      }    }  }  return true;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributesMap1;  NamedNodeMap attributesMap2;  Element element;  Attr attribute;  Attr newAttr1;  Attr newAttribute;  NodeList elementList;  String attrName;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("*","address");  element=(Element)elementList.item(1);  attributesMap1=element.getAttributes();  attributesMap2=element.getAttributes();  newAttr1=doc.createAttributeNS("http://www.w3.org/DOM/L1","street");  newAttribute=element.setAttributeNodeNS(newAttr1);  attribute=(Attr)attributesMap1.getNamedItemNS("http://www.w3.org/DOM/L1","street");  attrName=attribute.getNodeName();  assertEquals("namednodemapgetnameditemnsMap106","street",attrName);  attribute=(Attr)attributesMap2.getNamedItemNS("http://www.w3.org/DOM/L1","street");  attrName=attribute.getNodeName();  assertEquals("namednodemapgetnameditemnsMap206","street",attrName);}  }
class C{  public boolean activateController(){  if (!hasController()) {    throw new IllegalStateException("hasController() == false!");  }  return getController().activate(this);}  }
class C{  public String findErrorPage(String exceptionType) throws MBeanException {  Context context;  try {    context=(Context)getManagedResource();  } catch (  InstanceNotFoundException e) {    throw new MBeanException(e);  }catch (  RuntimeOperationsException e) {    throw new MBeanException(e);  }catch (  InvalidTargetObjectTypeException e) {    throw new MBeanException(e);  }  return context.findErrorPage(exceptionType).toString();}  }
class C{  private void newline(){  print(System.lineSeparator());}  }
class C{  private Entry createAssuredDomain(AssuredMode assuredMode,int safeDataLevel,long assuredTimeout) throws Exception {  String baseDn=null;switch (assuredMode) {case SAFE_READ_MODE:    baseDn=SAFE_READ_DN;  break;case SAFE_DATA_MODE:baseDn=SAFE_DATA_DN;break;default :fail("Unexpected assured level.");}String prefixLdif="dn: cn=" + testName + ", cn=domains, "+ SYNCHRO_PLUGIN_DN+ "\n"+ "objectClass: top\n"+ "objectClass: ds-cfg-replication-domain\n"+ "cn: "+ testName+ "\n"+ "ds-cfg-base-dn: "+ baseDn+ "\n"+ "ds-cfg-replication-server: localhost:"+ replServerPort+ "\n"+ "ds-cfg-server-id: 1\n"+ "ds-cfg-receive-status: true\n"+ "ds-cfg-heartbeat-interval: 600000ms\n"+ "ds-cfg-changetime-heartbeat-interval: 0ms\n";String configEntryLdif=null;switch (assuredMode) {case SAFE_READ_MODE:configEntryLdif=prefixLdif + "ds-cfg-assured-type: safe-read\n" + "ds-cfg-assured-timeout: "+ assuredTimeout+ "ms\n";break;case SAFE_DATA_MODE:configEntryLdif=prefixLdif + "ds-cfg-assured-type: safe-data\n" + "ds-cfg-assured-sd-level: "+ safeDataLevel+ "\n"+ "ds-cfg-assured-timeout: "+ assuredTimeout+ "ms\n";break;default :fail("Unexpected assured level.");}Entry domainCfgEntry=TestCaseUtils.entryFromLdifString(configEntryLdif);DirectoryServer.getConfigurationHandler().addEntry(Converters.from(domainCfgEntry));assertNotNull(DirectoryServer.getEntry(domainCfgEntry.getName()),"Unable to add the domain config entry: " + configEntryLdif);return domainCfgEntry;}  }
class C{  public void focusLost(FocusEvent e){  comboBox.repaint();}  }
class C{  @Override public void removeConnector(Connector connector){synchronized (connectorsLock) {    int j=-1;    for (int i=0; i < connectors.length; i++) {      if (connector == connectors[i]) {        j=i;        break;      }    }    if (j < 0)     return;    if (connectors[j].getState().isAvailable()) {      try {        connectors[j].stop();      } catch (      LifecycleException e) {        log.error(sm.getString("standardService.connector.stopFailed",connectors[j]),e);      }    }    connector.setService(null);    int k=0;    Connector results[]=new Connector[connectors.length - 1];    for (int i=0; i < connectors.length; i++) {      if (i != j)       results[k++]=connectors[i];    }    connectors=results;    support.firePropertyChange("connector",connector,null);  }}  }
class C{  public String nextToken(){  currentPosition=(newPosition >= 0 && !delimsChanged) ? newPosition : skipDelimiters(currentPosition);  delimsChanged=false;  newPosition=-1;  if (currentPosition >= maxPosition)   throw new NoSuchElementException();  int start=currentPosition;  currentPosition=scanToken(currentPosition);  return str.substring(start,currentPosition);}  }
class C{  public StatusDetailImpl(String xmlString) throws SAML2Exception {  Document xmlDocument=XMLUtils.toDOMDocument(xmlString,SAML2SDKUtils.debug);  if (xmlDocument == null) {    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("errorObtainingElement"));  }  parseElement(xmlDocument.getDocumentElement());}  }
class C{  public void loadACLConfig(){  aclEntries=new ArrayList<>();  for (  AccessControlLevel item : configuration.getAccessConrolLevels()) {    ACLEntry aclEntry=new ACLEntry();    aclEntry.role=item.getRole();    aclEntry.type=item.getResourceType();    aclEntry.folder=item.getFolder();    aclEntry.fileDelete=item.isFileDelete();    aclEntry.fileRename=item.isFileRename();    aclEntry.fileUpload=item.isFileUpload();    aclEntry.fileView=item.isFileView();    aclEntry.folderCreate=item.isFolderCreate();    aclEntry.folderDelete=item.isFolderDelete();    aclEntry.folderRename=item.isFolderRename();    aclEntry.folderView=item.isFolderView();    aclEntries.add(aclEntry);  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String siteName=getStringOptionValue(IArgument.SITE_NAME);  String siteURL=getStringOptionValue(IArgument.SITE_URL);  String[] params={siteName,siteURL};  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SET_SITE_PRIMARY_URL",params);    if (SiteConfiguration.isSiteExist(adminSSOToken,siteName)) {      SiteConfiguration.setSitePrimaryURL(adminSSOToken,siteName,siteURL);      outputWriter.printlnMessage(MessageFormat.format(getResourceString("set-site-primary-url-succeeded"),(Object[])params));    } else {      outputWriter.printlnMessage(MessageFormat.format(getResourceString("set-site-primary-url-no-exists"),(Object[])params));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_SET_SITE_PRIMARY_URL",params);  } catch (  SSOException e) {    String[] args={siteName,siteURL,e.getMessage()};    debugError("SetSitePrimaryURL.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_SITE_PRIMARY_URL",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  ConfigurationException e) {    String[] args={siteName,siteURL,e.getMessage()};    debugError("SetSitePrimaryURL.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_SITE_PRIMARY_URL",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={siteName,siteURL,e.getMessage()};    debugError("SetSitePrimaryURL.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_SITE_PRIMARY_URL",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateattributeNS02.class,args);}  }
class C{  public static String generateTOTP(byte[] key,String time,String returnDigits,String crypto){  int codeDigits=Integer.decode(returnDigits).intValue();  String result=null;  while (time.length() < 16)   time="0" + time;  byte[] msg=DatatypeConverter.parseHexBinary(time);  byte[] hash=hmac_sha(crypto,key,msg);  int offset=hash[hash.length - 1] & 0xf;  int binary=((hash[offset] & 0x7f) << 24) | ((hash[offset + 1] & 0xff) << 16) | ((hash[offset + 2] & 0xff) << 8)| (hash[offset + 3] & 0xff);  int otp=binary % DIGITS_POWER[codeDigits];  result=Integer.toString(otp);  while (result.length() < codeDigits) {    result="0" + result;  }  return result;}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  private boolean verifyMigrateFromProductHome(String migrateFromProductHome) throws InstallException {  if (migrateFromProductHome == null || migrateFromProductHome.length() == 0) {    Debug.log("MultipleMigrateDriver.verifyMigrateFromProductHome() :" + "empty product home by the user");    Console.println(LocalizedMessage.get(LOC_HR_MSG_MIGRATE_NONE_FOUND));    return false;  }  if (!migrateFromProductHome.equals(ConfigUtil.getHomePath())) {    Debug.log("MultipleMigrateDriver.verifyMigrateFromProductHome() : " + "Migrate from product home: " + migrateFromProductHome + ", New product home: "+ ConfigUtil.getHomePath());    String translateFile=migrateFromProductHome + MigrateFromInstFinderStore.getRelativeTranslateFile();    if (!FileUtils.isFileValid(translateFile)) {      Console.println(LocalizedMessage.get(LOC_HR_MSG_MIGRATE_NONE_FOUND));      return false;    }  } else {    Debug.log("MultipleMigrateDriver - Error:" + "This product has been already migrated!");    throw new InstallException(LocalizedMessage.get(LOC_DR_ERR_PRODUCT_ALREADY_MIGRATED));  }  return true;}  }
class C{  protected void handleFile(File file,int depth,Collection<T> results) throws IOException {}  }
class C{  EntitlementSubject migrateSubjectCondition(String conditionClassName,PolicySubject subject,MigrationReport migrationReport){  return subjectConditionsUpgradeMap.get(conditionClassName).migrate(subject,migrationReport);}  }
class C{  public boolean isStandard(){  return (glyphType & 0x3) == STANDARD;}  }
class C{  @Override public Foo[] findByUuid_C_PrevAndNext(long fooId,String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=findByPrimaryKey(fooId);  Session session=null;  try {    session=openSession();    Foo[] array=new FooImpl[3];    array[0]=getByUuid_C_PrevAndNext(session,foo,uuid,companyId,orderByComparator,true);    array[1]=foo;    array[2]=getByUuid_C_PrevAndNext(session,foo,uuid,companyId,orderByComparator,false);    return array;  } catch (  Exception e) {    throw processException(e);  } finally {    closeSession(session);  }}  }
class C{  @Override public String toString(){  return toString(",");}  }
class C{  @Override public void removeAll(){  for (  Foo foo : findAll()) {    remove(foo);  }}  }
class C{  private @Nonnull StepEndNode addBodyEndFlowNode(){  try {    FlowHead head=CpsThread.current().head;    StepEndNode end=new StepEndNode(head.getExecution(),getBodyStartNode(),head.get());    end.addAction(new BodyInvocationAction());    head.setNewHead(end);    return end;  } catch (  IOException e) {    LOGGER.log(WARNING,"Failed to grow the flow graph",e);    throw new Error(e);  }}  }
class C{  public void reset(){  super.reset();  bodyContent=null;  buffer=null;  displayed=false;  abortedException=null;}  }
class C{  public static int readUBEInt24(ByteBuffer b){  int result=0;  result+=readUBEInt16(b) << 16;  result+=readUInt8(b);  return result;}  }
class C{  public PlaLineInt translate(double p_dist){  PlaPointFloat v=direction().to_float();  double lenght=v.distance();  PlaPointInt new_a;  if (v.v_x_square <= v.v_y_square) {    int rel_x=(int)Math.round((p_dist * lenght) / v.v_y);    new_a=new PlaPointInt(point_a.v_x - rel_x,point_a.v_y);  } else {    int rel_y=(int)Math.round((p_dist * lenght) / v.v_x);    new_a=new PlaPointInt(point_a.v_x,point_a.v_y + rel_y);  }  return new PlaLineInt(new_a,direction());}  }
class C{  public ObjectIdentifier(int[] oid,String name,Object oidGroup){  this(oid);  if (oidGroup == null) {    throw new NullPointerException("oidGroup == null");  }  this.group=oidGroup;  this.name=name;  toOIDString();}  }
class C{  private void notifyListeners(Entry sr){  EntryReadEvent ev=new EntryReadEvent(this,sr);  for (  EntryReadListener listener : listeners) {    listener.entryRead(ev);  }}  }
class C{  public int lastIndexOf(Object elem,int index){  return delegate.lastIndexOf(elem,index);}  }
class C{  private ScriptConfiguration scriptConfigurationFromMap(String uuid,Map<String,Set<String>> data) throws ScriptException {  String script=getMapAttr(data,SCRIPT_TEXT);  return ScriptConfiguration.builder().setId(uuid).setName(getMapAttr(data,SCRIPT_NAME)).setDescription(getMapAttr(data,SCRIPT_DESCRIPTION)).setContext(getContextFromString(getMapAttr(data,SCRIPT_CONTEXT))).setLanguage(getLanguageFromString(getMapAttr(data,SCRIPT_LANGUAGE))).setScript(script == null ? EMPTY : script).setCreatedBy(getMapAttr(data,SCRIPT_CREATED_BY,EMPTY)).setCreationDate(CollectionHelper.getMapAttrAsDateLong(data,SCRIPT_CREATION_DATE,logger)).setLastModifiedBy(getMapAttr(data,SCRIPT_LAST_MODIFIED_BY,EMPTY)).setLastModifiedDate(CollectionHelper.getMapAttrAsDateLong(data,SCRIPT_LAST_MODIFIED_DATE,logger)).build();}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.LNickElement createLNickElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LNickElementImpl();}  }
class C{  public IntermediateResponseProtocolOp(String oid){  this.oid=oid;  this.value=null;}  }
class C{  public FrameBodyMLLT(){}  }
class C{  public void testSetNamedItemNS1() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  Attr newAttr1;  NodeList elementList;  String attrName;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=elementList.item(0);  attributes=element.getAttributes();  newAttr1=doc.createAttributeNS("http://www.w3.org/DOM/L1","streets");  ((Element)element).setAttributeNodeNS(newAttr1);  attribute=(Attr)attributes.getNamedItemNS("http://www.w3.org/DOM/L1","streets");  attrName=attribute.getNodeName();  assertEquals("namednodemapsetnameditemns01","streets",attrName);}  }
class C{  public UpdateException(Throwable ex){  super(ex);}  }
class C{  @Override public NamingEnumeration<NameClassPair> list(String name) throws NamingException {  return list(new CompositeName(name));}  }
class C{  public void printStackTrace(){  super.printStackTrace();}  }
class C{  public static float spToPx(float sp){  float scaledDensity=Resources.getSystem().getDisplayMetrics().scaledDensity;  return Math.round(sp * scaledDensity);}  }
class C{  public AssertionIDRequest createAssertionIDRequest(Element value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ASSERTION_ID_REQUEST,value);  if (obj == null) {    return new AssertionIDRequestImpl(value);  } else {    return (AssertionIDRequest)obj;  }}  }
class C{  @Override protected JPanel createFieldsPanel(){  final JPanel fieldsPanel=new JPanel(new GridBagLayout());  fieldsPanel.setOpaque(false);  final GridBagConstraints gbc=new GridBagConstraints();  cardLayoutPanel=new JPanel(new CardLayout());  cardLayoutPanel.setOpaque(false);  final JComponent p=createReadOnlyPanel();  p.setBorder(new EmptyBorder(UIFactory.TOP_INSET_SECONDARY_FIELD,UIFactory.LEFT_INSET_SECONDARY_FIELD,UIFactory.BOTTOM_INSET_SECONDARY_FIELD,UIFactory.LEFT_INSET_SECONDARY_FIELD));  JScrollPane scroll=new JScrollPane(p);  scroll.setOpaque(false);  scroll.getViewport().setOpaque(false);  scroll.getViewport().setBackground(UIFactory.DEFAULT_BACKGROUND);  scroll.setBackground(UIFactory.DEFAULT_BACKGROUND);  cardLayoutPanel.add(scroll,DISPLAY_TEXT.toString());  scroll=new JScrollPane();  createEquivalentCommandPanel(scroll);  scroll.setOpaque(false);  scroll.getViewport().setOpaque(false);  scroll.getViewport().setBackground(UIFactory.DEFAULT_BACKGROUND);  scroll.setBackground(UIFactory.DEFAULT_BACKGROUND);  cardLayoutPanel.add(scroll,DISPLAY_EQUIVALENT_COMMAND.toString());  gbc.gridx=0;  gbc.gridy=0;  gbc.weightx=1.0;  gbc.weighty=1.0;  gbc.gridwidth=3;  gbc.fill=GridBagConstraints.BOTH;  fieldsPanel.add(cardLayoutPanel,gbc);  return fieldsPanel;}  }
class C{  PerThreadDocumentBuilderProvider(final DocumentBuilderProvider delegate){  this(delegate,DEFAULT_CACHE_SIZE);}  }
class C{  private void mergeForceCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] < runLen[n + 1])     n--;    mergeAt(n);  }}  }
class C{  private <T>void displayProperty(ConsoleApplication app,TableBuilder builder,ManagedObject<?> mo,PropertyDefinition<T> pd,PropertyValuePrinter valuePrinter){  SortedSet<T> values=mo.getPropertyValues(pd);  if (values.isEmpty()) {    if (app.isScriptFriendly()) {      builder.appendCell();    } else {      builder.appendCell("-");    }  } else {    StringBuilder sb=new StringBuilder();    boolean isFirst=true;    for (    T value : values) {      if (!isFirst) {        sb.append(", ");      }      sb.append(valuePrinter.print(pd,value));      isFirst=false;    }    builder.appendCell(sb.toString());  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.DeactivationCallCenterType createDeactivationCallCenterType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.DeactivationCallCenterTypeImpl();}  }
class C{  private static void analyseClassOverride(Class<?> c){  if (classesDoneOverrideAnalysis.containsKey(c))   return;  if (!c.isInterface()) {    Class<?> parent=c.getSuperclass();    if (parent != null) {      for (      Method parentM : parent.getDeclaredMethods()) {        for (        Method subM : c.getDeclaredMethods()) {          if (signaturesAreTheSame(subM,parentM))           break;        }      }      analyseClassOverride(parent);    }  }  for (  Class<?> i : c.getInterfaces()) {    for (    Method iM : i.getDeclaredMethods()) {      for (      Method cM : c.getDeclaredMethods()) {        if (signaturesAreTheSame(cM,iM))         break;      }    }    analyseClassOverride(i);  }  classesDoneOverrideAnalysis.put(c,null);}  }
class C{  Node<K,V> findLast(){  Index<K,V> q=head;  for (; ; ) {    Index<K,V> d, r;    if ((r=q.right) != null) {      if (r.indexesDeletedNode()) {        q.unlink(r);        q=head;      } else       q=r;    } else     if ((d=q.down) != null) {      q=d;    } else {      Node<K,V> b=q.node;      Node<K,V> n=b.next;      for (; ; ) {        if (n == null)         return b.isBaseHeader() ? null : b;        Node<K,V> f=n.next;        if (n != b.next)         break;        Object v=n.value;        if (v == null) {          n.helpDelete(b,f);          break;        }        if (v == n || b.value == null)         break;        b=n;        n=f;      }      q=head;    }  }}  }
class C{  public static void addAlarmService(Context context,PendingIntent servicePendingIntent){  if (BuildConfig.DEBUG)   Log.d("GithubWidget","----------------------------------------" + "Add alarm service");  final AlarmManager m=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);  final Calendar current=Calendar.getInstance();  current.add(Calendar.MILLISECOND,SettingsManager.getUpdateTime());  final Intent i=new Intent(context,GithubWidgetService.class);  if (servicePendingIntent == null) {    servicePendingIntent=PendingIntent.getService(context,0,i,PendingIntent.FLAG_CANCEL_CURRENT);  }  m.setRepeating(AlarmManager.RTC,current.getTime().getTime(),SettingsManager.getUpdateTime(),servicePendingIntent);}  }
class C{  private boolean isFollowImport(){  return importErrorMessageId == -1;}  }
class C{  boolean isZero(){  for (int i=0; i < count; ++i) {    if (digits[i] != '0') {      return false;    }  }  return true;}  }
class C{  public boolean runningWithGoal(String... goals) throws MojoExecutionException {  for (  String goal : goals) {    if (goalFinder.runningWithGoal(project,session,goal)) {      return true;    }  }  return false;}  }
class C{  public void detach(){  if (null != m_val) {    m_val.allowDetachToRelease(true);    m_val.detach();  }}  }
class C{  public static int unsafeArrayOffset(ByteBuffer b){  return ((ByteArrayBuffer)b).arrayOffset;}  }
class C{  @Override public void sendNotification(String message) throws MBeanException, RuntimeOperationsException {  if (message == null)   throw new RuntimeOperationsException(new IllegalArgumentException("Message is null"),"Message is null");  Notification notification=new Notification("jmx.modelmbean.generic",this,1,message);  sendNotification(notification);}  }
class C{  public static void marshal(Object jaxbObject,Result xml){  _marshal(jaxbObject,xml);}  }
class C{  StaticGroup(Principal principal,Guid guid) throws UMSException {  super(principal,guid);  verifyClass();}  }
class C{  public ServletFileUpload(FileItemFactory fileItemFactory){  super(fileItemFactory);}  }
class C{  public static void error(Level level,String msgId,String data[]){  error(level,msgId,data,null);}  }
class C{  public boolean computeYScale(){  if (finished) {    return false;  }  long tRTC=SystemClock.elapsedRealtime() - startRTC;  if (tRTC >= animationDurationMillis) {    finished=true;    currentMaxY=endMaxY;    currentMinY=endMinY;    return false;  }  float fraction=tRTC * 1f / animationDurationMillis;  float value=interpolator.getInterpolation(fraction);  currentMaxY=startMaxY + value * (endMaxY - startMaxY);  currentMinY=startMinY + value * (endMinY - startMinY);  return true;}  }
class C{  private void invokePlugin(Node.CustomTag n,PageInfo pageInfo){  TagPlugin tagPlugin=tagPlugins.get(n.getTagHandlerClass().getName());  if (tagPlugin == null) {    return;  }  TagPluginContext tagPluginContext=new TagPluginContextImpl(n,pageInfo);  n.setTagPluginContext(tagPluginContext);  tagPlugin.doTag(tagPluginContext);}  }
class C{  public AuthTargetMappingBuilder addMapping(TokenTypeId tokenTypeId,String authIndexType,String authIndexValue){  return addMapping(tokenTypeId,authIndexType,authIndexValue,NULL_MAP);}  }
class C{  public boolean isInheritedFromRDNCollective(){  return this.isInheritedFromRDNCollective;}  }
class C{  public void handleCreateConfigButtonRequest(RequestInvocationEvent event) throws ModelControlException {  NewAuthConfigViewBean vb=(NewAuthConfigViewBean)getViewBean(NewAuthConfigViewBean.class);  removePageSessionAttribute(AUTH_CONFIG_TABLE);  unlockPageTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public boolean isComb(){  return getFieldFlag(FF_COMB);}  }
class C{  @NonNull public static Interpolator step(){  return step(0,1);}  }
class C{  public XObject execute(XPathContext xctxt,int context) throws javax.xml.transform.TransformerException {  DTMIterator nl=m_functionExpr.asIterator(xctxt,context);  XNumber score=SCORE_NONE;  if (null != nl) {    int n;    while (DTM.NULL != (n=nl.nextNode())) {      score=(n == context) ? SCORE_OTHER : SCORE_NONE;      if (score == SCORE_OTHER) {        context=n;        break;      }    }  }  nl.detach();  return score;}  }
class C{  public BufferedWriter(Writer out){  this(out,defaultCharBufferSize);}  }
class C{  public static Crop of(Uri source,Uri destination){  return new Crop(source,destination);}  }
class C{  public int addNodeInDocOrder(int node,XPathContext support){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  return addNodeInDocOrder(node,true,support);}  }
class C{  @Deprecated public void addAttribute(Attribute attribute,List<ByteString> duplicateValues){  addAttribute(attribute,(Collection<ByteString>)duplicateValues);}  }
class C{  @Override public String toString(){  StringBuilder buf=new StringBuilder(getClass().getName());  buf.append("[");  buf.append(getName()).append(",");  buf.append(getHostname()).append(",");  buf.append(port).append(", alive=");  buf.append(memberAliveTime).append(", ");  buf.append("securePort=").append(securePort).append(", ");  buf.append("UDP Port=").append(udpPort).append(", ");  buf.append("id=").append(bToS(this.uniqueId)).append(", ");  buf.append("payload=").append(bToS(this.payload,8)).append(", ");  buf.append("command=").append(bToS(this.command,8)).append(", ");  buf.append("domain=").append(bToS(this.domain,8)).append(", ");  buf.append("]");  return buf.toString();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataappenddatanomodificationallowederrEE.class,args);}  }
class C{  public void tunnelProxy(HttpHost next,boolean secure,HttpParams params) throws IOException {  if (next == null) {    throw new IllegalArgumentException("Next proxy must not be null.");  }  if (params == null) {    throw new IllegalArgumentException("Parameters must not be null.");  }  if ((this.tracker == null) || !this.tracker.isConnected()) {    throw new IllegalStateException("Connection not open.");  }  this.connection.update(null,next,secure,params);  this.tracker.tunnelProxy(next,secure);}  }
class C{  public boolean isDone(){  return index > 5;}  }
class C{  public DivRenderer(Div modelElement){  super(modelElement);}  }
class C{  public SearchResultDoneProtocolOp(int resultCode,LocalizableMessage errorMessage){  this.resultCode=resultCode;  this.errorMessage=errorMessage;}  }
class C{  @Override public void initializeJDBCConn(){  try {    System.out.println("StreamingQuoteDAOModeFull.initializeJDBCConn(): creating JDBC connection for Streaming Quote...");    Class.forName(JDBC_DRIVER);    conn=DriverManager.getConnection(DB_URL,USER,PASS);  } catch (  ClassNotFoundException e) {    System.out.println("StreamingQuoteDAOModeFull.initializeJDBCConn(): ClassNotFoundException: " + JDBC_DRIVER);    e.printStackTrace();  }catch (  SQLException e) {    System.out.println("StreamingQuoteDAOModeFull.initializeJDBCConn(): SQLException on getConnection");    e.printStackTrace();  }}  }
class C{  public void closeEntry() throws IOException {  checkClosed();  if (currentEntry == null) {    return;  }  if (currentEntry instanceof java.util.jar.JarEntry) {    Attributes temp=((JarEntry)currentEntry).getAttributes();    if (temp != null && temp.containsKey("hidden")) {      return;    }  }  Exception failure=null;  try {    Streams.skipAll(this);  } catch (  Exception e) {    failure=e;  }  int inB, out;  if (currentEntry.compressionMethod == ZipEntry.DEFLATED) {    inB=inf.getTotalIn();    out=inf.getTotalOut();  } else {    inB=inRead;    out=inRead;  }  int diff=entryIn - inB;  if (diff != 0) {    ((PushbackInputStream)in).unread(buf,len - diff,diff);  }  try {    readAndVerifyDataDescriptor(inB,out);  } catch (  Exception e) {    if (failure == null) {      failure=e;    }  }  inf.reset();  lastRead=inRead=entryIn=len=0;  crc.reset();  currentEntry=null;  if (failure != null) {    if (failure instanceof IOException) {      throw (IOException)failure;    } else     if (failure instanceof RuntimeException) {      throw (RuntimeException)failure;    }    AssertionError error=new AssertionError();    error.initCause(failure);    throw error;  }}  }
class C{  public String nextChoiceValueIdentifier() throws DecodeException {  if (!hasNext(GSER_CHOICE_IDENTIFIER)) {    final LocalizableMessage msg=WARN_GSER_NO_VALID_IDENTIFIEDCHOICE.get(gserValue.substring(pos,length));    throw DecodeException.error(msg);  }  String identifier=next(GSER_CHOICE_IDENTIFIER);  return identifier.substring(0,identifier.length() - 1);}  }
class C{  public Parker(CyclicBarrier barrier,boolean absolute,long parkMillis){  this.barrier=barrier;  this.absolute=absolute;  this.amount=absolute ? parkMillis : parkMillis * 1000000;}  }
class C{  public static byte[] dbKey(byte[] password,Class requester,String key){  return encryptKey(password,rawKey(requester,key));}  }
class C{  private List<Long> pruneBucket(List<Long> bucketList,double pruneFactor){  int pruneStartIndex=0;  int startSize=bucketList.size();  int i=0;  while (pruneStartIndex < bucketList.size()) {    if (i == 0) {      pruneStartIndex=(int)(startSize * pruneFactor) + pruneStartIndex;    }    i++;    int numToPrune=i * i * 32;    logger.debug("Pruning " + numToPrune + " buckets at position: "+ pruneStartIndex+ ", bucket list is currently: "+ bucketList.size()+ " long.");    List<Long> newBucketList=bucketList.subList(0,pruneStartIndex);    int endPrune=pruneStartIndex + numToPrune;    if (endPrune > bucketList.size()) {      newBucketList.add(bucketList.get(bucketList.size() - 1));      pruneStartIndex=bucketList.size();    } else {      newBucketList.addAll(bucketList.subList(pruneStartIndex + numToPrune,bucketList.size()));    }    bucketList=newBucketList;    pruneStartIndex++;  }  int numRecordsPruned=startSize - bucketList.size();  double percentPruned=((double)numRecordsPruned / (double)startSize) * 100d;  logger.debug("Pruned " + numRecordsPruned + " buckets out of "+ startSize+ " for a percent of "+ percentPruned);  return bucketList;}  }
class C{  @Inject public OAuth2Request(JacksonRepresentationFactory jacksonRepresentationFactory,@Assisted Request request){  this.jacksonRepresentationFactory=jacksonRepresentationFactory;  this.request=request;}  }
class C{  public void printlnError(String str){  buff.append(str).append("\n");}  }
class C{  private Map<String,Set<String>> gatherRequestedClaims(OAuth2ProviderSettings providerSettings,String claimsJson,String objectName){  final Map<String,Set<String>> requestedClaims=new HashMap<String,Set<String>>();  try {    if (providerSettings.getClaimsParameterSupported() && claimsJson != null) {      try {        final JSONObject claimsObject=new JSONObject(claimsJson);        JSONObject subClaimsRequest=claimsObject.getJSONObject(objectName);        Iterator<String> it=subClaimsRequest.keys();        while (it.hasNext()) {          final String keyName=it.next();          JSONObject optObj=subClaimsRequest.optJSONObject(keyName);          final HashSet<String> options=new HashSet<String>();          if (optObj != null) {            final JSONArray optArray=optObj.optJSONArray(OAuth2Constants.Params.VALUES);            if (optArray != null) {              for (int i=0; i < optArray.length(); i++) {                options.add(optArray.getString(i));              }            }            final String value=optObj.optString(OAuth2Constants.Params.VALUE);            if (!StringUtils.isBlank(value)) {              options.add(value);            }          }          requestedClaims.put(keyName,options);        }      } catch (      JSONException e) {      }    }  } catch (  ServerException e) {    logger.message("Requested Claims Supported not set.");  }  return requestedClaims;}  }
class C{  static Class lookUpFactoryClass(String factoryId) throws ConfigurationError {  return lookUpFactoryClass(factoryId,null,null);}  }
class C{  public ReferralProxyViewBean(){  super("ReferralProxy");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  private boolean doesMatch(String pattern,int pp,String result,int rp){  for (; ; ) {    if (pp == pattern.length() && rp == result.length())     return true;    if (pp == pattern.length())     return false;    char pc=pattern.charAt(pp);    if (pc == '_') {      if (rp == result.length())       return false;      pp++;      rp++;    } else     if (pc == '%') {      if (pp == pattern.length() - 1) {        return true;      }      for (int sp=rp; sp < result.length(); sp++) {        if (doesMatch(pattern,pp + 1,result,sp)) {          return true;        }      }      return false;    } else {      if (rp == result.length())       return false;      if (pc != result.charAt(rp)) {        return false;      }      pp++;      rp++;    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node commentNode;  NodeList nodeList;  NamedNodeMap attrList;  int nodeType;  doc=(Document)load("hc_staff",false);  nodeList=doc.getChildNodes();  for (int indexN10043=0; indexN10043 < nodeList.getLength(); indexN10043++) {    commentNode=(Node)nodeList.item(indexN10043);    nodeType=(int)commentNode.getNodeType();    if (equals(8,nodeType)) {      attrList=commentNode.getAttributes();      assertNull("existingCommentAttributesNull",attrList);    }  }  commentNode=doc.createComment("This is a comment");  attrList=commentNode.getAttributes();  assertNull("createdCommentAttributesNull",attrList);}  }
class C{  public TokenRestriction resolve(String providerId,String gotoUrl,SSOToken adminToken,boolean uniqueSSOTokenCookie) throws IdRepoException, SMSException, SSOException {  Reject.ifNull(providerId);  Reject.ifNull(gotoUrl);  Reject.ifNull(adminToken);  if (!uniqueSSOTokenCookie) {    return tokenRestrictionFactory.createNoOpTokenRestriction();  }  Map<AMIdentity,Map<String,Set<String>>> agents=searchAgentsByUri(providerId,adminToken);  AgentInfo agentInfo=getAgentInfo(agents);  if (isGotoUrlValid(gotoUrl,agentInfo.getRootUrls())) {    return createTokenRestriction(agentInfo);  } else {    throw (new SSOException("Goto URL not valid for the agent Provider ID: " + gotoUrl));  }}  }
class C{  public static HelpSubCommandHandler create(SubCommandArgumentParser parser) throws ArgumentException {  return new HelpSubCommandHandler(parser);}  }
class C{  public String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  public static void installApk(Context context,String apkFullFileName){  File apkFile=new File(apkFullFileName);  if (!apkFile.exists()) {    return;  }  Intent i=new Intent(Intent.ACTION_VIEW);  i.setDataAndType(Uri.fromFile(apkFile),"application/vnd.android.package-archive");  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(i);}  }
class C{  public String toStringImpl(){  return new StringBuilder().append(type).toString();}  }
class C{  public void testMultiplyMathContextScalePosPos(){  String a="97665696756578755423325476545428779810457634781384756794987";  int aScale=-25;  String b="87656965586786097685674786576598865";  int bScale=10;  String c="8.561078619600910561431314228543672720908E+108";  int cScale=-69;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  MathContext mc=new MathContext(40,RoundingMode.HALF_DOWN);  BigDecimal result=aNumber.multiply(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  @Override public void connectionErrorOccurred(final ConnectionEvent event){  final PooledConnection pc=(PooledConnection)event.getSource();  if (null != event.getSQLException()) {    System.err.println("CLOSING DOWN CONNECTION DUE TO INTERNAL ERROR (" + event.getSQLException() + ")");  }  pc.removeConnectionEventListener(this);  final PooledConnectionAndInfo info=pcMap.get(pc);  if (info == null) {    throw new IllegalStateException(NO_KEY_MESSAGE);  }  try {    _pool.invalidateObject(info.getUserPassKey(),info);  } catch (  final Exception e) {    System.err.println("EXCEPTION WHILE DESTROYING OBJECT " + info);    e.printStackTrace();  }}  }
class C{  private boolean canDoDifferentialUpdate(NodeRefresher task){  return task.getNode().getChildCount() >= 1 && task.getNode().getNumSubOrdinates() <= 100;}  }
class C{  public InhibitAnyPolicy(byte[] encoding) throws IOException {  super(encoding);  this.skipCerts=new BigInteger((byte[])ASN1Integer.getInstance().decode(encoding)).intValue();}  }
class C{  public FrameBodyRVA2(){}  }
class C{  public void testUserDataHandlerNotifiedOfDeepClones(){  RecordingHandler handler=new RecordingHandler();  name.setUserData("a","apple",handler);  name.setUserData("b","banana",handler);  standard.setUserData("c","cat",handler);  waffles.setUserData("d","dog",handler);  Element clonedName=(Element)name.cloneNode(true);  Attr clonedStandard=clonedName.getAttributeNode("a:standard");  Text clonedWaffles=(Text)clonedName.getChildNodes().item(0);  Set<String> expected=new HashSet<String>();  expected.add(notification(NODE_CLONED,"a","apple",name,clonedName));  expected.add(notification(NODE_CLONED,"b","banana",name,clonedName));  expected.add(notification(NODE_CLONED,"c","cat",standard,clonedStandard));  expected.add(notification(NODE_CLONED,"d","dog",waffles,clonedWaffles));  assertEquals(expected,handler.calls);}  }
class C{  @Override void validateContentType(Request request) throws InvalidRequestException {  if (!(request.getEntity() == null || request.getEntity() instanceof EmptyRepresentation) && !MediaType.APPLICATION_WWW_FORM.equals(request.getEntity().getMediaType())) {    logger.error("Invalid Content Type for token endpoint");    throw new InvalidRequestException("Invalid Content Type");  }}  }
class C{  public boolean hasQValue(){  return hasParameter("q");}  }
class C{  public FieldPosition(Format.Field attribute){  this(attribute,-1);}  }
class C{  public void test_SelectSimple() throws SQLException {  String sql="SELECT * FROM " + DatabaseCreator.TEST_TABLE2;  ResultSet result=statement.executeQuery(sql);  int counter=0;  while (result.next()) {    int id=result.getInt("finteger");    assertEquals("expected value doesn't equal actual",DatabaseCreator.defaultString + id,result.getString("ftext"));    assertEquals("expected value doesn't equal actual",DatabaseCreator.defaultCharacter + id,result.getString("fcharacter"));    assertEquals("expected value doesn't equal actual",BigDecimal.valueOf(id + 0.1).floatValue(),result.getFloat("ffloat"));    assertEquals("expected value doesn't equal actual",BigDecimal.valueOf(id + 0.1).doubleValue(),result.getDouble("freal"));    assertEquals("expected value doesn't equal actual",BigDecimal.valueOf(id + 0.1).doubleValue(),result.getDouble("fdouble"));    assertEquals("expected value doesn't equal actual",date.toString(),result.getDate("fdate").toString());    assertEquals("expected value doesn't equal actual",time.toString(),result.getTime("ftime").toString());    counter++;  }  assertEquals("number of rows in ResultSet is wrong",5,counter);  result.close();}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  boolean incMandatory=isOptionSet(IArgument.MANDATORY);  String strMandatory=(incMandatory) ? "include mandatory" : "exclude mandatory";  String[] params={realm,strMandatory};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_GET_ASSIGNED_SERVICES_OF_REALM",params);  try {    OrganizationConfigManager ocm=new OrganizationConfigManager(adminSSOToken,realm);    Set serviceNames=ocm.getAssignedServices(incMandatory);    Set dynamicServiceNames=getAssignedDynamicServiceNames(adminSSOToken,realm);    if ((dynamicServiceNames != null) && !dynamicServiceNames.isEmpty()) {      if ((serviceNames != null) && !serviceNames.isEmpty()) {        serviceNames.addAll(dynamicServiceNames);      } else {        serviceNames=dynamicServiceNames;      }    }    IOutput outputWriter=getOutputWriter();    if ((serviceNames != null) && !serviceNames.isEmpty()) {      String msg=getResourceString("realm-get-assigned-services-results");      outputWriter.printlnMessage(FormatUtils.printServiceNames(serviceNames,msg,adminSSOToken));      outputWriter.printlnMessage(getResourceString("realm-get-assigned-services-succeed"));    } else {      outputWriter.printlnMessage(getResourceString("realm-get-assigned-services-no-services"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_GET_ASSIGNED_SERVICES_OF_REALM",params);  } catch (  SSOException e) {    String[] args={realm,e.getMessage()};    debugError("RealmGetAssignedServices.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_ASSIGNED_SERVICES_OF_REALM",args);  }catch (  IdRepoException e) {    String[] args={realm,e.getMessage()};    debugError("RealmGetAssignedServices.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_ASSIGNED_SERVICES_OF_REALM",args);  }catch (  SMSException e) {    String[] args={realm,e.getMessage()};    debugError("RealmGetAssignedServices.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_ASSIGNED_SERVICES_OF_REALM",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public String toString(){  return signature + ' ' + name;}  }
class C{  public int indexOf(int elem,int index){  if (index >= m_firstFree)   return -1;  int bindex=index >>> m_SHIFT;  int boffset=index & m_MASK;  int maxindex=m_firstFree >>> m_SHIFT;  int[] block;  for (; bindex < maxindex; ++bindex) {    block=m_map[bindex];    if (block != null)     for (int offset=boffset; offset < m_blocksize; ++offset)     if (block[offset] == elem)     return offset + bindex * m_blocksize;    boffset=0;  }  int maxoffset=m_firstFree & m_MASK;  block=m_map[maxindex];  for (int offset=boffset; offset < maxoffset; ++offset)   if (block[offset] == elem)   return offset + maxindex * m_blocksize;  return -1;}  }
class C{  public boolean addAll(Collection<? extends E> c){  if (c == null)   throw new NullPointerException();  if (c == this)   throw new IllegalArgumentException();  boolean modified=false;  for (  E e : c)   if (add(e))   modified=true;  return modified;}  }
class C{  public void writeAttribute(final String key,final Object defaultValue) throws IOException {  if (key.equals("id")) {    FacesContext.getCurrentInstance().getResponseWriter().writeAttribute("id",this.component.getClientId(),null);  } else {    JKJsfUtil.writeAttribue(getComponent(),key,defaultValue);  }}  }
class C{  public KeyNotFoundException(){}  }
class C{  protected TreeCellEditor createDefaultCellEditor(){  if (currentCellRenderer != null && (currentCellRenderer instanceof DefaultTreeCellRenderer)) {    DefaultTreeCellEditor editor=new DefaultTreeCellEditor(tree,(DefaultTreeCellRenderer)currentCellRenderer);    return editor;  }  return new DefaultTreeCellEditor(tree,null);}  }
class C{  public void testReceive_BlockNoServerCloseReadonly() throws Exception {  assertTrue(this.channel1.isBlocking());  receiveNoServerChannelCloseReadonly();}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s3_linear_with_snapshots_light_tags();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  public ByteBufferOutputStream append(String str){  if (str != null)   return append(str.getBytes(StandardCharsets.ISO_8859_1));  return this;}  }
class C{  public void testParseLargestSubnormalDoublePrecision(){  assertEquals(2.2250738585072014E-308,Double.parseDouble("2.2250738585072012e-308"));  assertEquals(2.2250738585072014E-308,Double.parseDouble("0.00022250738585072012e-304"));  assertEquals(2.2250738585072014E-308,Double.parseDouble("00000002.2250738585072012e-308"));  assertEquals(2.2250738585072014E-308,Double.parseDouble("2.225073858507201200000e-308"));  assertEquals(2.2250738585072014E-308,Double.parseDouble("2.2250738585072012e-00308"));  assertEquals(2.2250738585072014E-308,Double.parseDouble("2.22507385850720129978001e-308"));  assertEquals(-2.2250738585072014E-308,Double.parseDouble("-2.2250738585072012e-308"));}  }
class C{  public boolean remove(Attribute attribute){  return attribute != null && attrMap.remove(attribute.getCategory()) != null;}  }
class C{  private void registerContext(Context context){  String contextPath=context.getPath();  if ("/".equals(contextPath)) {    contextPath="";  }  Host host=(Host)context.getParent();  WebResourceRoot resources=context.getResources();  String[] welcomeFiles=context.findWelcomeFiles();  List<WrapperMappingInfo> wrappers=new ArrayList<>();  for (  Container container : context.findChildren()) {    prepareWrapperMappingInfo(context,(Wrapper)container,wrappers);    if (log.isDebugEnabled()) {      log.debug(sm.getString("mapperListener.registerWrapper",container.getName(),contextPath,service));    }  }  mapper.addContextVersion(host.getName(),host,contextPath,context.getWebappVersion(),context,welcomeFiles,resources,wrappers);  if (log.isDebugEnabled()) {    log.debug(sm.getString("mapperListener.registerContext",contextPath,service));  }}  }
class C{  public MetadataBlockHeader(boolean isLastBlock,BlockType blockType,int dataLength){  ByteBuffer rawdata=ByteBuffer.allocate(HEADER_LENGTH);  this.blockType=blockType;  this.isLastBlock=isLastBlock;  this.dataLength=dataLength;  byte type;  if (isLastBlock) {    type=(byte)(0x80 | blockType.getId());  } else {    type=(byte)blockType.getId();  }  rawdata.put(type);  rawdata.put((byte)((dataLength & 0xFF0000) >>> 16));  rawdata.put((byte)((dataLength & 0xFF00) >>> 8));  rawdata.put((byte)(dataLength & 0xFF));  bytes=new byte[HEADER_LENGTH];  for (int i=0; i < HEADER_LENGTH; i++) {    bytes[i]=rawdata.get(i);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatagetlength.class,args);}  }
class C{  public ServicesEditViewBean(){  super("ServicesEdit",DEFAULT_DISPLAY_URL,null);  serviceName=(String)getPageSessionAttribute(SERVICE_NAME);}  }
class C{  public String toString(){  return ("ADPrincipal:  " + name);}  }
class C{  public static String signatureAlgorithm(String algorithm){  int index=algorithm.indexOf('_');  if (index == -1) {    return algorithm;  }  return algorithm.substring(index + 1,algorithm.length());}  }
class C{  void removeEQ(Object o){  final ReentrantLock lock=this.lock;  lock.lock();  try {    for (Iterator<E> it=q.iterator(); it.hasNext(); ) {      if (o == it.next()) {        it.remove();        break;      }    }  }  finally {    lock.unlock();  }}  }
class C{  private void siftDown(int k,RunnableScheduledFuture<?> key){  int half=size >>> 1;  while (k < half) {    int child=(k << 1) + 1;    RunnableScheduledFuture<?> c=queue[child];    int right=child + 1;    if (right < size && c.compareTo(queue[right]) > 0)     c=queue[child=right];    if (key.compareTo(c) <= 0)     break;    queue[k]=c;    setIndex(c,k);    k=child;  }  queue[k]=key;  setIndex(key,k);}  }
class C{  public static boolean isValidServer(String dsHost,String dsPort){  boolean isValidServer=true;  try (LDAPConnectionFactory factory=new LDAPConnectionFactory(dsHost,Integer.parseInt(dsPort));Connection conn=factory.getConnection()){    return true;  } catch (  Exception lde) {    System.out.println(bundle.getString("upg-error-ds-info") + "!! ");  }  return false;}  }
class C{  public void flush(){  flush(FlushReason.EXPLICIT);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGetPost(request,response);}  }
class C{  boolean resolve(final MethodWriter owner,final int position,final byte[] data){  boolean needUpdate=false;  this.status|=RESOLVED;  this.position=position;  int i=0;  while (i < referenceCount) {    int source=srcAndRefPositions[i++];    int reference=srcAndRefPositions[i++];    int offset;    if (source >= 0) {      offset=position - source;      if (offset < Short.MIN_VALUE || offset > Short.MAX_VALUE) {        int opcode=data[reference - 1] & 0xFF;        if (opcode <= Opcodes.JSR) {          data[reference - 1]=(byte)(opcode + 49);        } else {          data[reference - 1]=(byte)(opcode + 20);        }        needUpdate=true;      }      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    } else {      offset=position + source + 1;      data[reference++]=(byte)(offset >>> 24);      data[reference++]=(byte)(offset >>> 16);      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    }  }  return needUpdate;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList testList;  Node piNode;  String piValue;  doc=(Document)load("staff",false);  testList=doc.getChildNodes();  piNode=testList.item(0);  piValue=piNode.getNodeValue();  assertEquals("value","PIDATA",piValue);}  }
class C{  public int read(byte[] b) throws IOException {  return read(b,0,b.length);}  }
class C{  protected void diagnoseLineNumber(Expression expr){  ElemTemplateElement e=getElemFromExpression(expr);  System.err.println("   " + e.getSystemId() + " Line "+ e.getLineNumber());}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  if (null != m_arg2)   m_arg2.fixupVariables(vars,globalsSize);}  }
class C{  private boolean compareAndDecrementWorkerCount(int expect){  return ctl.compareAndSet(expect,expect - 1);}  }
class C{  public void dispatch(NamingListener listener){switch (type) {case OBJECT_ADDED:    ((NamespaceChangeListener)listener).objectAdded(this);  break;case OBJECT_REMOVED:((NamespaceChangeListener)listener).objectRemoved(this);break;case OBJECT_RENAMED:((NamespaceChangeListener)listener).objectRenamed(this);break;case OBJECT_CHANGED:((ObjectChangeListener)listener).objectChanged(this);break;}}  }
class C{  public void componentHidden(ComponentEvent e){  ((ComponentListener)a).componentHidden(e);  ((ComponentListener)b).componentHidden(e);}  }
class C{  private void processCsnControl(PostOperationOperation operation){  List<Control> requestControls=operation.getRequestControls();  if (requestControls != null && !requestControls.isEmpty()) {    for (    Control c : requestControls) {      if (c.getOID().equals(OID_CSN_CONTROL)) {        OperationContext ctx=(OperationContext)operation.getAttachment(OperationContext.SYNCHROCONTEXT);        if (ctx != null) {          CSN cn=ctx.getCSN();          if (cn != null) {            Control responseControl=new ChangeNumberControl(c.isCritical(),cn);            operation.getResponseControls().add(responseControl);          }        }        break;      }    }  }}  }
class C{  public NoSuchAlgorithmException(){  super();}  }
class C{  public Reference(String className){  this.className=className;  addrs=new Vector<>();}  }
class C{  public void deleteField(final AsfFieldKey fieldKey){  super.deleteField(fieldKey.getFieldName());}  }
class C{  protected void formatParamAsVer(final CharArrayBuffer buffer,final String name,final String value,int version){  buffer.append(name);  buffer.append("=");  if (value != null) {    if (version > 0) {      buffer.append('\"');      buffer.append(value);      buffer.append('\"');    } else {      buffer.append(value);    }  }}  }
class C{  private void readHeaderFlags(ByteBuffer buffer) throws TagException {  byte flags=buffer.get();  unsynchronization=(flags & MASK_V23_UNSYNCHRONIZATION) != 0;  extended=(flags & MASK_V23_EXTENDED_HEADER) != 0;  experimental=(flags & MASK_V23_EXPERIMENTAL) != 0;  if ((flags & FileConstants.BIT4) != 0) {    logger.warning(ErrorMessage.ID3_INVALID_OR_UNKNOWN_FLAG_SET.getMsg(getLoggingFilename(),FileConstants.BIT4));  }  if ((flags & FileConstants.BIT3) != 0) {    logger.warning(ErrorMessage.ID3_INVALID_OR_UNKNOWN_FLAG_SET.getMsg(getLoggingFilename(),FileConstants.BIT3));  }  if ((flags & FileConstants.BIT2) != 0) {    logger.warning(ErrorMessage.ID3_INVALID_OR_UNKNOWN_FLAG_SET.getMsg(getLoggingFilename(),FileConstants.BIT2));  }  if ((flags & FileConstants.BIT1) != 0) {    logger.warning(ErrorMessage.ID3_INVALID_OR_UNKNOWN_FLAG_SET.getMsg(getLoggingFilename(),FileConstants.BIT1));  }  if ((flags & FileConstants.BIT0) != 0) {    logger.warning(ErrorMessage.ID3_INVALID_OR_UNKNOWN_FLAG_SET.getMsg(getLoggingFilename(),FileConstants.BIT0));  }  if (isUnsynchronization()) {    logger.config(ErrorMessage.ID3_TAG_UNSYNCHRONIZED.getMsg(getLoggingFilename()));  }  if (extended) {    logger.config(ErrorMessage.ID3_TAG_EXTENDED.getMsg(getLoggingFilename()));  }  if (experimental) {    logger.config(ErrorMessage.ID3_TAG_EXPERIMENTAL.getMsg(getLoggingFilename()));  }}  }
class C{  public Map<String,byte[]> compile(String fileName,String source) throws IOException {  try (MemoryJavaFileManager manager=new MemoryJavaFileManager(stdManager)){    JavaFileObject javaFileObject=manager.makeStringSource(fileName,source);    CompilationTask task=compiler.getTask(null,manager,null,null,null,Arrays.asList(javaFileObject));    Boolean result=task.call();    if (result == null || !result.booleanValue()) {      throw new RuntimeException("Compilation failed.");    }    return manager.getClassBytes();  } }  }
class C{  @Override public void onAttachFragment(final Fragment childFragment){  delegate.onAttachFragment(childFragment);}  }
class C{  public Object clone(){  Subjects answer=null;  try {    answer=(Subjects)super.clone();  } catch (  CloneNotSupportedException se) {    answer=new Subjects();  }  answer.name=name;  answer.description=description;  answer.users=new HashMap();  Iterator items=users.keySet().iterator();  while (items.hasNext()) {    String item=(String)items.next();    QualifiedSubject qualifiedSubject=(QualifiedSubject)users.get(item);    answer.users.put(item,new QualifiedSubject((Subject)(qualifiedSubject.getSubject().clone()),qualifiedSubject.isExclusive()));  }  return (answer);}  }
class C{  @Override public void sendMessage(Member[] destination,ChannelMessage msg,InterceptorPayload payload) throws ChannelException {  if (destination == null)   destination=membershipService.getMembers();  if ((msg.getOptions() & Channel.SEND_OPTIONS_MULTICAST) == Channel.SEND_OPTIONS_MULTICAST) {    membershipService.broadcast(msg);  } else {    clusterSender.sendMessage(msg,destination);  }  if (Logs.MESSAGES.isTraceEnabled()) {    Logs.MESSAGES.trace("ChannelCoordinator - Sent msg:" + new UniqueId(msg.getUniqueId()) + " at "+ new java.sql.Timestamp(System.currentTimeMillis())+ " to "+ Arrays.toNameString(destination));  }}  }
class C{  public static byte parseByte(String string,int radix) throws NumberFormatException {  int intValue=Integer.parseInt(string,radix);  byte result=(byte)intValue;  if (result == intValue) {    return result;  }  throw new NumberFormatException("Value out of range for byte: \"" + string + "\"");}  }
class C{  public void init(boolean encrypting,CipherParameters params){  if (params instanceof KeyParameter) {    if (((KeyParameter)params).getKey().length > 8) {      throw new IllegalArgumentException("DES key too long - should be 8 bytes");    }    workingKey=generateWorkingKey(encrypting,((KeyParameter)params).getKey());    return;  }  throw new IllegalArgumentException("invalid parameter passed to DES init - " + params.getClass().getName());}  }
class C{  private static synchronized void initDocBuilderFactory(){  docBuilderFactory=DocumentBuilderFactory.newInstance();  docBuilderFactory.setIgnoringComments(true);  docBuilderFactory.setCoalescing(true);}  }
class C{  public int length(){  return bytes.length;}  }
class C{  protected void indent() throws IOException {  indent(m_elemContext.m_currentElemDepth);}  }
class C{  public static StringArgument keyStorePathArgument() throws ArgumentException {  return StringArgument.builder(OPTION_LONG_KEYSTOREPATH).shortIdentifier(OPTION_SHORT_KEYSTOREPATH).description(INFO_DESCRIPTION_KEYSTOREPATH.get()).valuePlaceholder(INFO_KEYSTOREPATH_PLACEHOLDER.get()).buildArgument();}  }
class C{  public InternetAvailableEvent(Intent intent){  super(APPLICATION_NAME,EVENT_NAME,intent);}  }
class C{  @Override public final void invoke(Request request,Response response) throws IOException, ServletException {  Host host=request.getHost();  if (host == null) {    response.sendError(HttpServletResponse.SC_BAD_REQUEST,sm.getString("standardEngine.noHost",request.getServerName()));    return;  }  if (request.isAsyncSupported()) {    request.setAsyncSupported(host.getPipeline().isAsyncSupported());  }  host.getPipeline().getFirst().invoke(request,response);}  }
class C{  public void transform(Point2D[] ptSrc,int srcOff,Point2D[] ptDst,int dstOff,int numPts){  int state=this.state;  while (--numPts >= 0) {    Point2D src=ptSrc[srcOff++];    double x=src.getX();    double y=src.getY();    Point2D dst=ptDst[dstOff++];    if (dst == null) {      if (src instanceof Point2D.Double) {        dst=new Point2D.Double();      } else {        dst=new Point2D.Float();      }      ptDst[dstOff - 1]=dst;    }switch (state) {default :      stateError();    return;case (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):  dst.setLocation(x * m00 + y * m01 + m02,x * m10 + y * m11 + m12);break;case (APPLY_SHEAR | APPLY_SCALE):dst.setLocation(x * m00 + y * m01,x * m10 + y * m11);break;case (APPLY_SHEAR | APPLY_TRANSLATE):dst.setLocation(y * m01 + m02,x * m10 + m12);break;case (APPLY_SHEAR):dst.setLocation(y * m01,x * m10);break;case (APPLY_SCALE | APPLY_TRANSLATE):dst.setLocation(x * m00 + m02,y * m11 + m12);break;case (APPLY_SCALE):dst.setLocation(x * m00,y * m11);break;case (APPLY_TRANSLATE):dst.setLocation(x + m02,y + m12);break;case (APPLY_IDENTITY):dst.setLocation(x,y);break;}}}  }
class C{  public PdfSignatureAppDictionary(){  super(new PdfDictionary());}  }
class C{  @SuppressWarnings("deprecation") public IdentityStub(String name,IdentityScope scope) throws KeyManagementException {  super(name,scope);}  }
class C{  public boolean containsCustomComponents(JOptionPane op){  return hasCustomComponents;}  }
class C{  @Override public synchronized void shutdown(){  shutdown=true;  debug("Shutdown triggered");  try {    factory.close();  } catch (  RuntimeException e) {    debug.error("Error whilst shutting down a Connection Factory",e);  }}  }
class C{  public LineMessagingServiceBuilder readTimeout(long readTimeout){  this.readTimeout=readTimeout;  return this;}  }
class C{  public BlockIterator(Location loc,double yOffset,int maxDistance){  this(loc.getWorld(),loc.toVector(),loc.getDirection(),yOffset,maxDistance);}  }
class C{  private PositiveIntegerValidator(){}  }
class C{  public ByteVector(byte[] a){  blockSize=DEFAULT_BLOCK_SIZE;  array=a;  n=0;}  }
class C{  public StatusCode createStatusCode(String xml) throws XACMLException {  Object object=XACMLSDKUtils.getObjectInstance(XACMLConstants.STATUS_CODE,xml);  if (object == null) {    return new StatusCodeImpl(xml);  } else {    return (StatusCode)object;  }}  }
class C{  public void registerClassHandler(ClassHandler handler){  classHandlers.add(handler);}  }
class C{  public static ExecutorService newWorkStealingPool(int parallelism){  return new ForkJoinPool(parallelism,ForkJoinPool.defaultForkJoinWorkerThreadFactory,null,true);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.ecommerce.org/schema";  String qualifiedName="y:x";  Document doc;  DocumentType docType=null;  DOMImplementation domImpl;  Document aNewDoc;  String nodeName;  String nodeValue;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  aNewDoc=domImpl.createDocument(namespaceURI,qualifiedName,docType);  nodeName=aNewDoc.getNodeName();  nodeValue=aNewDoc.getNodeValue();  assertEquals("nodeName","#document",nodeName);  assertNull("nodeValue",nodeValue);}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme: got an Invite sending Trying");    Response response=messageFactory.createResponse(Response.TRYING,request);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);      if (enableRetransmitAlerts) {        st.enableRetransmissionAlerts();      }    }    dialog=st.getDialog();    st.sendResponse(response);    this.okResponse=messageFactory.createResponse(Response.OK,request);    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    okResponse.addHeader(contactHeader);    this.inviteTid=st;    this.inviteRequest=request;    new Timer().schedule(new MyTimerTask(this),1000);  } catch (  Exception ex) {    logger.error("Unexpected exception",ex);    fail("Unexpected exception");  }}  }
class C{  public String to_string(org.omg.CosNaming.NameComponent[] n) throws org.omg.CosNaming.NamingContextPackage.InvalidName {  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("to_string",true);    org.omg.CosNaming.NameHelper.write($out,n);    $in=_invoke($out);    String $result=org.omg.CosNaming.NamingContextExtPackage.StringNameHelper.read($in);    return $result;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    if (_id.equals("IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0"))     throw org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.read($in); else     throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    return to_string(n);  } finally {    _releaseReply($in);  }}  }
class C{  public void startElement(String name,AttributeList attributes) throws SAXException {}  }
class C{  public static void main(String args[]) throws ParseException {  String r[]={"P-Charging-Function-Addresses: ccf=\"test str\"; ecf=token\n","P-Charging-Function-Addresses: ccf=192.1.1.1; ccf=192.1.1.2; ecf=192.1.1.3; ecf=192.1.1.4\n","P-Charging-Function-Addresses: ccf=[5555::b99:c88:d77:e66]; ccf=[5555::a55:b44:c33:d22]; " + "ecf=[5555::1ff:2ee:3dd:4cc]; ecf=[5555::6aa:7bb:8cc:9dd]\n"};  for (int i=0; i < r.length; i++) {    PChargingFunctionAddressesParser parser=new PChargingFunctionAddressesParser(r[i]);    System.out.println("original = " + r[i]);    PChargingFunctionAddresses chargAddr=(PChargingFunctionAddresses)parser.parse();    System.out.println("encoded = " + chargAddr.encode());  }}  }
class C{  public static PreReadRequestControl newControl(final boolean isCritical,final Collection<String> attributes){  Reject.ifNull(attributes);  if (attributes.isEmpty()) {    return isCritical ? CRITICAL_EMPTY_INSTANCE : NONCRITICAL_EMPTY_INSTANCE;  } else   if (attributes.size() == 1) {    return new PreReadRequestControl(isCritical,singletonList(attributes.iterator().next()));  } else {    return new PreReadRequestControl(isCritical,unmodifiableList(new ArrayList<String>(attributes)));  }}  }
class C{  public Map<String,String> parse(final char[] charArray,char separator){  if (charArray == null) {    return new HashMap<>();  }  return parse(charArray,0,charArray.length,separator);}  }
class C{  private void mergeForceCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] < runLen[n + 1])     n--;    mergeAt(n);  }}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.ecommerce.org/";  String malformedName="prefix::local";  Document doc;  Attr newAttr;  doc=(Document)load("staffNS",false);{    boolean success=false;    try {      newAttr=doc.createAttributeNS(namespaceURI,malformedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  private static boolean isAppropriateMixer(Mixer mixer,Line.Info lineInfo,boolean isMixingRequired){  if (!mixer.isLineSupported(lineInfo)) {    return false;  }  Class lineClass=lineInfo.getLineClass();  if (isMixingRequired && (SourceDataLine.class.isAssignableFrom(lineClass) || Clip.class.isAssignableFrom(lineClass))) {    int maxLines=mixer.getMaxLines(lineInfo);    return ((maxLines == NOT_SPECIFIED) || (maxLines > 1));  }  return true;}  }
class C{  public SAXException(){  this.exception=null;}  }
class C{  public void accept(){  accepted=true;}  }
class C{  Cursor sqlQuery(SQLiteQueryBuilder queryBuilder){  queryBuilder.setTables(DATABASE_TABLE);  return queryBuilder.query(database,null,null,null,null,null,null);}  }
class C{  public BatchUpdateException(String reason,String SQLState,int[] updateCounts,Throwable cause){  this(reason,SQLState,0,updateCounts,cause);}  }
class C{  public void testDivideRoundHalfUpNeg1(){  String a="-92948782094488478231212478987482988798104576347813847567949855464535634534563456";  int aScale=-24;  String b="74723342238476237823754692930187879183479";  int bScale=13;  String c="-1.2439055763572051712242335979928354832010167729111113605E+76";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_UP);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public void addAttachment(MimeBodyPart attachment){  attachments.add(attachment);}  }
class C{  public void loadState(){  SearchResultEntry stateEntry=searchBaseEntry();  if (stateEntry == null) {    stateEntry=searchConfigEntry();  }  if (stateEntry != null) {    updateStateFromEntry(stateEntry);  }  checkAndUpdateServerState();}  }
class C{  public void deleteMembership(String userId,String groupId){}  }
class C{  void saveDeviceProfile(@Nonnull String user,@Nonnull String realm,@Nonnull OathDeviceSettings deviceSettings) throws AuthLoginException {  Reject.ifNull(user,realm,deviceSettings);  try {    devicesDao.saveDeviceProfiles(user,realm,jsonUtils.toJsonValues(Collections.singletonList(deviceSettings)));  } catch (  IOException e) {    debug.error("OathMaker.createDeviceProfile(): Unable to save device profile for user {} in realm {}",user,realm,e);    throw new AuthLoginException(e);  }}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> filterUpdate(Context context,UpdateRequest request,RequestHandler next){  CrestAuditor auditor=newAuditor(context,request);  auditor.auditAccessAttempt();  return auditResponse(next.handleUpdate(context,request),auditor,request);}  }
class C{  public FrameBodyTPE1(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  @Override public String toString(){  StringBuilder risul=new StringBuilder(1000);  risul.append(classname);  risul.append(" available object: board_panel");  return risul.toString();}  }
class C{  public boolean passwordIsPreEncoded(ByteString passwordValue){  return passwordPolicy.isAuthPasswordSyntax() ? AuthPasswordSyntax.isEncoded(passwordValue) : UserPasswordSyntax.isEncoded(passwordValue);}  }
class C{  protected void populateClient(String clientName,Properties props) throws InvalidPropertiesFormatException {  String name=props.getProperty(clientName + NAME_SUFFIX);  String attrList=props.getProperty(clientName + ATTRIBUTE_SUFFIX);  StringTokenizer st=new StringTokenizer(attrList,COMMA);  Map attributes=new HashMap();  Set attributeValues=null;  while (st.hasMoreTokens()) {    attributeValues=new HashSet();    String entry=st.nextToken();    String attrName=entry.substring(0,entry.indexOf(EQUALS));    String attrValue=entry.substring(entry.indexOf(EQUALS) + 1);    attributeValues.add(attrValue);    attributes.put(attrName,attributeValues);  }  clients.put(name,new Client(name,attributes));  clientsData.put(name,attributes);}  }
class C{  public static void inverseSearchAdd(Map<String,InverseStore> inverseSearch,Stack<String> stack,String unstack){  String last=stack.peek();  InverseStore store=inverseSearch.get(last);  if (store == null) {    store=new InverseStore();    inverseSearch.put(last,store);  }  for (int k=stack.size() - 2; k >= 0; --k) {    last=stack.get(k);    InverseStore store2;    int idx=store.part.indexOf(last);    if (idx < 0) {      store.part.add(last);      store2=new InverseStore();      store.follow.add(store2);    } else     store2=(InverseStore)store.follow.get(idx);    store=store2;  }  store.part.add("");  store.follow.add(unstack);}  }
class C{  public void addBefore(FilterMap filterMap){synchronized (lock) {    FilterMap results[]=new FilterMap[array.length + 1];    System.arraycopy(array,0,results,0,insertPoint);    System.arraycopy(array,insertPoint,results,insertPoint + 1,array.length - insertPoint);    results[insertPoint]=filterMap;    array=results;    insertPoint++;  }}  }
class C{  public static List<JsonPointer> filter(final String... fields){  final List<JsonPointer> result=new ArrayList<>(fields.length);  for (  final String field : fields) {    result.add(new JsonPointer(field));  }  return result;}  }
class C{  public void configure() throws SMSException, SSOException, IOException, PolicyException {  modifyClientDataService();  createRealmAndPolicies();  setRealmAttributes();}  }
class C{  public void publishUpdateMsg(DN baseDN,UpdateMsg updateMsg) throws ChangelogException {  if (!predicate.isECLEnabledDomain(baseDN)) {    return;  }  final CSN oldestCSNBefore=getOldestLastAliveCSN();  lastAliveCSNs.update(baseDN,updateMsg.getCSN());  tryNotify(oldestCSNBefore);}  }
class C{  public boolean addAll(RoleList roleList) throws IndexOutOfBoundsException {  if (roleList == null) {    return true;  }  return (super.addAll(roleList));}  }
class C{  public void testFormattingYear(){  FormatTester test=new FormatTester();  Calendar cal=new GregorianCalendar(1999,Calendar.JUNE,2,15,3,6);  test.test(" y",cal," 1999",DateFormat.YEAR_FIELD);  test.test(" yy",cal," 99",DateFormat.YEAR_FIELD);  test.test(" yy",new GregorianCalendar(2001,Calendar.JUNE,2)," 01",DateFormat.YEAR_FIELD);  test.test(" yy",new GregorianCalendar(2000,Calendar.JUNE,2)," 00",DateFormat.YEAR_FIELD);  test.test(" yyy",new GregorianCalendar(2000,Calendar.JUNE,2)," 2000",DateFormat.YEAR_FIELD);  test.test(" yyy",cal," 1999",DateFormat.YEAR_FIELD);  test.test(" yyyy",cal," 1999",DateFormat.YEAR_FIELD);  test.test(" yyyyy",cal," 01999",DateFormat.YEAR_FIELD);  assertFalse(test.testsFailed);}  }
class C{  public Token read(String tokenId) throws CoreTokenException {  debug("Read: queued {0}",tokenId);  ResultHandler<Token,CoreTokenException> handler=handlerFactory.getReadHandler();  dispatcher.read(tokenId,handler);  try {    Token token=handler.getResults();    if (token == null) {      debug("Read: no Token found for {0}",tokenId);    } else {      reverseBlobStrategy(token);      debug("Read: returned for {0}\n{1}",tokenId,token);    }    return token;  } catch (  CoreTokenException e) {    throw new ReadFailedException(tokenId,e);  }}  }
class C{  public boolean startsWith(XMLString prefix,int toffset){  return m_str.startsWith(prefix.toString(),toffset);}  }
class C{  protected void paint(SynthContext context,Graphics g){  if (handleIcon != null && toolBar.isFloatable()) {    int startX=toolBar.getComponentOrientation().isLeftToRight() ? 0 : toolBar.getWidth() - SynthIcon.getIconWidth(handleIcon,context);    SynthIcon.paintIcon(handleIcon,context,g,startX,0,SynthIcon.getIconWidth(handleIcon,context),SynthIcon.getIconHeight(handleIcon,context));  }  SynthContext subcontext=getContext(toolBar,Region.TOOL_BAR_CONTENT,contentStyle);  paintContent(subcontext,g,contentRect);  subcontext.dispose();}  }
class C{  protected void addSystemMenuItems(JMenu systemMenu){}  }
class C{  @Override public MinguoDate date(int prolepticYear,int month,int dayOfMonth){  return new MinguoDate(LocalDate.of(prolepticYear + YEARS_DIFFERENCE,month,dayOfMonth));}  }
class C{  public void logPurchase(BigDecimal purchaseAmount,Currency currency,Bundle parameters){  if (purchaseAmount == null) {    notifyDeveloperError("purchaseAmount cannot be null");    return;  } else   if (currency == null) {    notifyDeveloperError("currency cannot be null");    return;  }  if (parameters == null) {    parameters=new Bundle();  }  parameters.putString(AppEventsConstants.EVENT_PARAM_CURRENCY,currency.getCurrencyCode());  logEvent(AppEventsConstants.EVENT_NAME_PURCHASED,purchaseAmount.doubleValue(),parameters);  eagerFlush();}  }
class C{  @Override public synchronized void write(int b){  int inBufferPos=count - filledBufferSum;  if (inBufferPos == currentBuffer.length) {    needNewBuffer(count + 1);    inBufferPos=0;  }  currentBuffer[inBufferPos]=(byte)b;  count++;}  }
class C{  private void delayedExecute(RunnableScheduledFuture<?> task){  if (isShutdown())   reject(task); else {    super.getQueue().add(task);    if (isShutdown() && !canRunInCurrentRunState(task.isPeriodic()) && remove(task))     task.cancel(false); else     ensurePrestart();  }}  }
class C{  public SortKey(final String attributeDescription,final boolean isReverseOrder,final String orderingMatchingRule){  Reject.ifNull(attributeDescription);  this.attributeDescription=attributeDescription;  this.orderingMatchingRule=orderingMatchingRule;  this.isReverseOrder=isReverseOrder;}  }
class C{  public AffineTransformOp(AffineTransform xform,int interpolationType){  validateTransform(xform);  this.xform=(AffineTransform)xform.clone();switch (interpolationType) {case TYPE_NEAREST_NEIGHBOR:case TYPE_BILINEAR:case TYPE_BICUBIC:    break;default :  throw new IllegalArgumentException("Unknown interpolation type: " + interpolationType);}this.interpolationType=interpolationType;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.SC200502SecurityContextTokenElement createSC200502SecurityContextTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.SC200502SecurityContextTokenElementImpl();}  }
class C{  public void testAddCertificate4() throws Exception {  try {    new IdentityStub("aaa").addCertificate(null);    fail("KeyManagementException should be thrown");  } catch (  KeyManagementException ok) {  }catch (  NullPointerException ok) {  }}  }
class C{  private void startSpringScroll(int dist){  if (directionVertical()) {    mSpringScroller.startScroll(0,dist);  } else {    mSpringScroller.startScroll(dist,0);  }}  }
class C{  public static void access(Level level,String msgid,String[] data){  if ((logger != null) && logger.isAccessLoggable(level)) {    try {      logger.access(level,msgid,data,null);    } catch (    LogException le) {      debug.error("LogUtil.access:",le);    }  }}  }
class C{  public AuthenticationException(){  super();}  }
class C{  protected Class<?> findClass(String name) throws ClassNotFoundException {  return findClass(name,currentClr);}  }
class C{  protected boolean nextNode(){  if (null == m_incrementalSAXSource)   return false;  if (m_endDocumentOccured) {    clearCoRoutine();    return false;  }  Object gotMore=m_incrementalSAXSource.deliverMoreNodes(true);  if (!(gotMore instanceof Boolean)) {    if (gotMore instanceof RuntimeException) {      throw (RuntimeException)gotMore;    } else     if (gotMore instanceof Exception) {      throw new WrappedRuntimeException((Exception)gotMore);    }    clearCoRoutine();    return false;  }  if (gotMore != Boolean.TRUE) {    clearCoRoutine();  }  return true;}  }
class C{  public AMConsoleException(String message){  super(message);}  }
class C{  public int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  int modulus=length % 3;  int dataLength=(length - modulus);  int a1, a2, a3;  for (int i=off; i < off + dataLength; i+=3) {    a1=data[i] & 0xff;    a2=data[i + 1] & 0xff;    a3=data[i + 2] & 0xff;    out.write(encodingTable[(a1 >>> 2) & 0x3f]);    out.write(encodingTable[((a1 << 4) | (a2 >>> 4)) & 0x3f]);    out.write(encodingTable[((a2 << 2) | (a3 >>> 6)) & 0x3f]);    out.write(encodingTable[a3 & 0x3f]);  }  int b1, b2, b3;  int d1, d2;switch (modulus) {case 0:    break;case 1:  d1=data[off + dataLength] & 0xff;b1=(d1 >>> 2) & 0x3f;b2=(d1 << 4) & 0x3f;out.write(encodingTable[b1]);out.write(encodingTable[b2]);out.write(padding);out.write(padding);break;case 2:d1=data[off + dataLength] & 0xff;d2=data[off + dataLength + 1] & 0xff;b1=(d1 >>> 2) & 0x3f;b2=((d1 << 4) | (d2 >>> 4)) & 0x3f;b3=(d2 << 2) & 0x3f;out.write(encodingTable[b1]);out.write(encodingTable[b2]);out.write(encodingTable[b3]);out.write(padding);break;}return (dataLength / 3) * 4 + ((modulus == 0) ? 0 : 4);}  }
class C{  @Override public void storeChildren(PrintWriter aWriter,int indent,Object aJarScanner,StoreDescription parentDesc) throws Exception {  if (aJarScanner instanceof JarScanner) {    JarScanner jarScanner=(JarScanner)aJarScanner;    JarScanFilter jarScanFilter=jarScanner.getJarScanFilter();    if (jarScanFilter != null) {      storeElement(aWriter,indent,jarScanFilter);    }  }}  }
class C{  public static double hypot(double x,double y){  return StrictMath.hypot(x,y);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(prefix06.class,args);}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  FederationViewBean vb=(FederationViewBean)getViewBean(FederationViewBean.class);  backTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public void authenticateRequesterURI(HttpServletRequest request,HttpServletResponse response,String samlAuthorityEntityID,String role,String realm) throws SAML2Exception {  throw new SAML2Exception(SAML2Utils.bundle.getString("invalidAssertionRequester"));}  }
class C{  public MemberName asConstructor(){switch (getReferenceKind()) {case REF_invokeSpecial:    return clone().changeReferenceKind(REF_newInvokeSpecial,REF_invokeSpecial);case REF_newInvokeSpecial:  return this;}throw new IllegalArgumentException(this.toString());}  }
class C{  public static boolean isFieldReadOnly(CoreTokenField field){  return field.equals(CoreTokenField.TOKEN_TYPE) || field.equals(CoreTokenField.TOKEN_ID);}  }
class C{  public Modification(ModificationType modificationType,Attribute attribute,boolean isInternal){  this.modificationType=modificationType;  this.attribute=attribute;  this.isInternal=isInternal;}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  if (params instanceof KeyParameter) {    workingKey=((KeyParameter)params).getKey();    setKey(workingKey);    return;  }  throw new IllegalArgumentException("invalid parameter passed to RC4 init - " + params.getClass().getName());}  }
class C{  public KeyStoreBuilder withKeyStoreFile(final File keyStoreFile) throws FileNotFoundException {  return withInputStream(new FileInputStream(keyStoreFile));}  }
class C{  private EnumEvalResult evalVAL(AciEvalContext evalCtx){  EnumEvalResult matched=EnumEvalResult.FALSE;  boolean undefined=false;  AttributeType attrType=DirectoryServer.getSchema().getAttributeType(attrStr);  final SearchRequest request=newSearchRequest(evalCtx.getClientDN(),SearchScope.BASE_OBJECT);  InternalSearchOperation op=getRootConnection().processSearch(request);  LinkedList<SearchResultEntry> result=op.getSearchEntries();  if (!result.isEmpty()) {    ByteString val=ByteString.valueOfUtf8(attrVal);    SearchResultEntry resultEntry=result.getFirst();    if (resultEntry.hasValue(attrType,val)) {      Entry e=evalCtx.getResourceEntry();      if (e.hasValue(attrType,val)) {        matched=EnumEvalResult.TRUE;      }    }  }  return matched.getRet(type,undefined);}  }
class C{  protected void paintText(Graphics g,AbstractButton b,Rectangle textRect,String text){  paintText(g,(JComponent)b,textRect,text);}  }
class C{  private void copyFrom(final Tag source){  final Iterator<TagField> fieldIterator=source.getFields();  while (fieldIterator.hasNext()) {    final TagField copy=copyFrom(fieldIterator.next());    if (copy != null) {      super.addField(copy);    }  }}  }
class C{  private final boolean lookbehindHasToken(int n){  boolean hasToken;  if ((m_queueMark - n) > 0) {    String lookbehind=(String)m_ops.m_tokenQueue.elementAt(m_queueMark - (n - 1));    char c0=(lookbehind == null) ? '|' : lookbehind.charAt(0);    hasToken=(c0 == '|') ? false : true;  } else {    hasToken=false;  }  return hasToken;}  }
class C{  public void characters(org.w3c.dom.Node node) throws org.xml.sax.SAXException {  if (m_state != null) {    m_state.setCurrentNode(node);  }  String data=node.getNodeValue();  if (data != null) {    this.characters(data);  }}  }
class C{  protected boolean canResponseHaveBody(final HttpRequest request,final HttpResponse response){  if ("HEAD".equalsIgnoreCase(request.getRequestLine().getMethod())) {    return false;  }  int status=response.getStatusLine().getStatusCode();  return status >= HttpStatus.SC_OK && status != HttpStatus.SC_NO_CONTENT && status != HttpStatus.SC_NOT_MODIFIED && status != HttpStatus.SC_RESET_CONTENT;}  }
class C{  public org.omg.CORBA.Any to_any(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("to_any",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    return $self.to_any();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public EmptyFrameException(Throwable ex){  super(ex);}  }
class C{  @Override public RectF evaluate(float fraction,RectF startValue,RectF endValue){  RectF rectF=new RectF(startValue.left + (int)((endValue.left - startValue.left) * fraction),startValue.top + (int)((endValue.top - startValue.top) * fraction),startValue.right + (int)((endValue.right - startValue.right) * fraction),startValue.bottom + (int)((endValue.bottom - startValue.bottom) * fraction));  return rectF;}  }
class C{  public SERVICE_FORMATTED(String className){  super("application/x-java-jvm-local-objectref",className);}  }
class C{  @DataProvider(name="decodeValueIllegalData") Object[][] createDecodeValueIllegalData(){  return new Object[][]{{"xxx"},{null}};}  }
class C{  public void testValueOfPosScaleNeg(){  long a=98374823947823578L;  int scale=-12;  BigDecimal aNumber=BigDecimal.valueOf(a,scale);  String result="9.8374823947823578E+28";  assertTrue("incorrect value",aNumber.toString().equals(result));}  }
class C{  @Override public NamingEnumeration<Binding> listBindings(Name name) throws NamingException {  if (log.isDebugEnabled()) {    log.debug(sm.getString("selectorContext.methodUsingName","listBindings",name));  }  return getBoundContext().listBindings(parseName(name));}  }
class C{  protected void waitForRelease(){}  }
class C{  @AfterClass public void enableLogging(){  TestCaseUtils.setDefaultLogLevel(Level.INFO);}  }
class C{  @Nonnull Outcome runNextChunk(){  assert program != null;  Outcome outcome;  final CpsThread old=CURRENT.get();  CURRENT.set(this);  try {    LOGGER.log(FINE,"runNextChunk on {0}",resumeValue);    Outcome o=resumeValue;    resumeValue=null;    outcome=program.run0(o);    if (outcome.getAbnormal() != null) {      LOGGER.log(FINE,"ran and produced error",outcome.getAbnormal());    } else {      LOGGER.log(FINE,"ran and produced {0}",outcome);    }    if (outcome.getNormal() instanceof ThreadTask) {      ThreadTask sc=(ThreadTask)outcome.getNormal();      ThreadTaskResult r=sc.eval(this);      if (r.resume != null) {        resumeValue=r.resume;      } else {        outcome=r.suspend;      }    }  }  finally {    CURRENT.set(old);  }  if (promise != null) {    if (outcome.isSuccess())     promise.set(outcome.getNormal()); else {      try {        promise.setException(outcome.getAbnormal());      } catch (      Error e) {        if (e == outcome.getAbnormal()) {          ;        } else {          throw e;        }      }    }    promise=null;  }  return outcome;}  }
class C{  public void addObserver(Observer observer){  if (observer == null) {    throw new NullPointerException("observer == null");  }synchronized (this) {    if (!observers.contains(observer))     observers.add(observer);  }}  }
class C{  private void doubleCapacity(){  int p=head;  int n=elements.length;  int r=n - p;  int newCapacity=n << 1;  if (newCapacity < 0)   throw new IllegalStateException("Sorry, deque too big");  Object[] a=new Object[newCapacity];  System.arraycopy(elements,p,a,0,r);  System.arraycopy(elements,0,a,r,p);  elements=a;  head=0;  tail=n;}  }
class C{  public Shape createStrokedShape(Shape s){  sun.java2d.pipe.RenderingEngine re=sun.java2d.pipe.RenderingEngine.getInstance();  return re.createStrokedShape(s,width,cap,join,miterlimit,dash,dash_phase);}  }
class C{  public void updateDefinition(ICOSDefinition cosDef) throws UMSException {  PersistentObject pObject=(PersistentObject)cosDef;  if (pObject.getGuid() == null) {    String msg=i18n.getString(IUMSConstants.REPLACE_DEFINITION_NOT_PERSISTENT);    throw new UMSException(msg);  }  pObject.save();}  }
class C{  public static void logModifyRequest(ModifyOperation modifyOperation){  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {    publisher.logModifyRequest(modifyOperation);  }}  }
class C{  public static UIInput createInputText(final String label){  final UIInput comp=(javax.faces.component.UIInput)JSFComponentFactory.createComponent(InputText.COMPONENT_TYPE);  if (label != null) {    comp.getAttributes().put("label",label);  }  return comp;}  }
class C{  public String encode(){  String encoded_string;  if (displayName != null) {    encoded_string=displayName + Separators.LESS_THAN;  } else {    encoded_string="";  }  encoded_string+=email.encode();  if (displayName != null) {    encoded_string+=Separators.GREATER_THAN;  }  return encoded_string;}  }
class C{  public VLVResponseControl(boolean isCritical,int targetPosition,int contentCount,int vlvResultCode,ByteString contextID){  super(OID_VLV_RESPONSE_CONTROL,isCritical);  this.targetPosition=targetPosition;  this.contentCount=contentCount;  this.vlvResultCode=vlvResultCode;  this.contextID=contextID;}  }
class C{  public void addAttribute(String rawName,String value){  if (m_firstTagNotEmitted) {    flush();  }  m_handler.addAttribute(rawName,value);}  }
class C{  public void testClearSubtree() throws Exception {  assertNull(cache.toVerboseString(),"Expected empty cache.  " + "Cache contents:" + ServerConstants.EOL + cache.toVerboseString());  TestCaseUtils.initializeTestBackend(false);  String b=DirectoryServer.getBackend(DN.valueOf("o=test")).getBackendID();  String c=DirectoryServer.getBackend(DN.valueOf("cn=config")).getBackendID();  cache.putEntry(testEntriesList.get(0),b,1);  Entry testEntry=testEntriesList.get(1);  testEntry.getName();  testEntry.setDN(DN.valueOf(testEntry.getName().rdn() + ",cn=config"));  cache.putEntry(testEntry,c,1);  cache.clearSubtree(DN.valueOf("o=test"));  assertNull(cache.getEntry(testEntriesList.get(0).getName()),"Not expected to find " + testEntriesList.get(0).getName() + " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  assertNull(cache.getEntry(b,1),"Not expected to find entry id " + -1 + " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  assertNotNull(cache.getEntry(testEntry.getName()),"Expected to find " + testEntry.getName() + " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  cache.clear();}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public XPathException(Throwable cause){  super(cause);  if (cause == null) {    throw new NullPointerException("cause can't be null");  }}  }
class C{  public String toBASE64EncodedString() throws FSMsgException {  if ((providerId == null) || (providerId.length() == 0)) {    FSUtils.debug.error("FSAuthnRequest.toBASE64EncodedString: " + "providerId is null in the request with requestId:" + requestID);    String[] args={requestID};    throw new FSMsgException("nullProviderIdWRequestId",args);  }  if ((requestID == null) || (requestID.length() == 0)) {    requestID=SAMLUtils.generateID();    if (requestID == null) {      FSUtils.debug.error("FSAuthnRequest.toBASE64EncodedString: " + "couldn't generate RequestID.");      throw new FSMsgException("errorGenerateID",null);    }  }  return Base64.encode(this.toXMLString().getBytes());}  }
class C{  public FrameBodyTOPE(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public boolean addFaultyMember(FaultyMember mbr){  if (this.faultyMembers == null)   this.faultyMembers=new ArrayList<>();  if (!faultyMembers.contains(mbr))   return faultyMembers.add(mbr); else   return false;}  }
class C{  public void reset(){  int linksSize=(_links == null) ? XPathContext.RECURSIONLIMIT : _links.length;  int varArraySize=(_stackFrames == null) ? XPathContext.RECURSIONLIMIT * 2 : _stackFrames.length;  reset(linksSize,varArraySize);}  }
class C{  public SAXException createSAXException(String message,Exception e){  if ((e != null) && (e instanceof InvocationTargetException)) {    Throwable t=e.getCause();    if (t instanceof ThreadDeath) {      throw (ThreadDeath)t;    }    if (t instanceof VirtualMachineError) {      throw (VirtualMachineError)t;    }    if (t instanceof Exception) {      e=(Exception)t;    }  }  if (locator != null) {    String error="Error at (" + locator.getLineNumber() + ", "+ locator.getColumnNumber()+ ") : "+ message;    if (e != null) {      return new SAXParseException(error,locator,e);    } else {      return new SAXParseException(error,locator);    }  }  log.error("No Locator!");  if (e != null) {    return new SAXException(message,e);  } else {    return new SAXException(message);  }}  }
class C{  public FrameBodyTSO2(){}  }
class C{  public void testCase9(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=1;  int bSign=1;  byte rBytes[]={1,2,3,3,-6,-15,-24,-40,-49,-58,-67,-6,-15,-23};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(1,result.signum());}  }
class C{  protected void parseDOMChileElements(ListIterator iter) throws SAML2Exception {  AssertionFactory assertionFactory=AssertionFactory.getInstance();  ProtocolFactory protoFactory=ProtocolFactory.getInstance();  while (iter.hasNext()) {    Element childElement=(Element)iter.next();    String localName=childElement.getLocalName();    if (SAML2Constants.ISSUER.equals(localName)) {      validateIssuer();      nameID=assertionFactory.createIssuer(childElement);    } else     if (SAML2Constants.SIGNATURE.equals(localName)) {      validateSignature();      signatureString=XMLUtils.print(childElement);      isSigned=true;    } else     if (SAML2Constants.EXTENSIONS.equals(localName)) {      validateExtensions();      extensions=protoFactory.createExtensions(childElement);    } else {      iter.previous();      break;    }  }}  }
class C{  @Override public Foo fetchByUUID_G(String uuid,long groupId,boolean retrieveFromCache){  Object[] finderArgs=new Object[]{uuid,groupId};  Object result=null;  if (retrieveFromCache) {    result=finderCache.getResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs,this);  }  if (result instanceof Foo) {    Foo foo=(Foo)result;    if (!Objects.equals(uuid,foo.getUuid()) || (groupId != foo.getGroupId())) {      result=null;    }  }  if (result == null) {    StringBundler query=new StringBundler(4);    query.append(_SQL_SELECT_FOO_WHERE);    boolean bindUuid=false;    if (uuid == null) {      query.append(_FINDER_COLUMN_UUID_G_UUID_1);    } else     if (uuid.equals(StringPool.BLANK)) {      query.append(_FINDER_COLUMN_UUID_G_UUID_3);    } else {      bindUuid=true;      query.append(_FINDER_COLUMN_UUID_G_UUID_2);    }    query.append(_FINDER_COLUMN_UUID_G_GROUPID_2);    String sql=query.toString();    Session session=null;    try {      session=openSession();      Query q=session.createQuery(sql);      QueryPos qPos=QueryPos.getInstance(q);      if (bindUuid) {        qPos.add(uuid);      }      qPos.add(groupId);      List<Foo> list=q.list();      if (list.isEmpty()) {        finderCache.putResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs,list);      } else {        Foo foo=list.get(0);        result=foo;        cacheResult(foo);        if ((foo.getUuid() == null) || !foo.getUuid().equals(uuid) || (foo.getGroupId() != groupId)) {          finderCache.putResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs,foo);        }      }    } catch (    Exception e) {      finderCache.removeResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs);      throw processException(e);    } finally {      closeSession(session);    }  }  if (result instanceof List<?>) {    return null;  } else {    return (Foo)result;  }}  }
class C{  public void shrink(int maximumCapacity){  if (maximumCapacity < 0)   throw new IllegalArgumentException("maximumCapacity must be >= 0: " + maximumCapacity);  if (size > maximumCapacity)   maximumCapacity=size;  if (capacity <= maximumCapacity)   return;  maximumCapacity=nextPowerOfTwo(maximumCapacity);  resize(maximumCapacity);}  }
class C{  public AuthorityKeyIdentifier(SubjectPublicKeyInfo spki,GeneralNames name,BigInteger serialNumber){  Digest digest=AndroidDigestFactory.getSHA1();  byte[] resBuf=new byte[digest.getDigestSize()];  byte[] bytes=spki.getPublicKeyData().getBytes();  digest.update(bytes,0,bytes.length);  digest.doFinal(resBuf,0);  this.keyidentifier=new DEROctetString(resBuf);  this.certissuer=GeneralNames.getInstance(name.toASN1Primitive());  this.certserno=new ASN1Integer(serialNumber);}  }
class C{  public double distance(PlaPointInt p_to_point){  return Math.sqrt(distance_square(p_to_point));}  }
class C{  private void createRenamedFolderNode(final Element rootElement){  Element element=creator.getDocument().createElement("RenamedFolder");  element.setAttribute("newName",this.newFolderName);  element.setAttribute("newPath",this.newFolderPath);  element.setAttribute("newUrl",configuration.getTypes().get(this.type).getUrl() + this.newFolderPath);  rootElement.appendChild(element);}  }
class C{  public final boolean owns(ConditionObject condition){  return condition.isOwnedBy(this);}  }
class C{  private void recreateTable(int currentVersion){  try {    connetion.initTransaction();    if (currentVersion == 0) {      createNewTables();    }    connetion.commitTransaction();  } catch (  SQLException e) {    BotLogger.error(LOGTAG,e);  }}  }
class C{  public void addCSSAttribute(MutableAttributeSet attr,CSS.Attribute key,String value){  css.addInternalCSSValue(attr,key,value);}  }
class C{  public byte[] convertToVorbisSetupHeaderPacket(long fileOffsetOfStartingOggPage,RandomAccessFile raf) throws IOException, CannotReadException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  raf.seek(fileOffsetOfStartingOggPage);  OggPageHeader setupPageHeader=OggPageHeader.read(raf);  if (setupPageHeader.getPacketList().size() > 1) {    raf.skipBytes(setupPageHeader.getPacketList().get(0).getLength());  }  byte[] b=new byte[VorbisHeader.FIELD_PACKET_TYPE_LENGTH + VorbisHeader.FIELD_CAPTURE_PATTERN_LENGTH];  raf.read(b);  if (!isVorbisSetupHeader(b)) {    throw new CannotReadException("Unable to find setup header(2), unable to write ogg file");  }  raf.seek(raf.getFilePointer() - (VorbisHeader.FIELD_PACKET_TYPE_LENGTH + VorbisHeader.FIELD_CAPTURE_PATTERN_LENGTH));  if (setupPageHeader.getPacketList().size() > 1) {    b=new byte[setupPageHeader.getPacketList().get(1).getLength()];    raf.read(b);    baos.write(b);  } else {    b=new byte[setupPageHeader.getPacketList().get(0).getLength()];    raf.read(b);    baos.write(b);  }  if (!setupPageHeader.isLastPacketIncomplete() || setupPageHeader.getPacketList().size() > 2) {    logger.config("Setupheader finishes on this page");    return baos.toByteArray();  }  while (true) {    logger.config("Reading another page");    OggPageHeader nextPageHeader=OggPageHeader.read(raf);    b=new byte[nextPageHeader.getPacketList().get(0).getLength()];    raf.read(b);    baos.write(b);    if (nextPageHeader.getPacketList().size() > 1) {      logger.config("Setupheader finishes on this page");      return baos.toByteArray();    }    if (!nextPageHeader.isLastPacketIncomplete()) {      logger.config("Setupheader finish on Page because this packet is complete");      return baos.toByteArray();    }  }}  }
class C{  public SupportedParser(String supported){  super(supported);}  }
class C{  private void sendEvent(Measurement measurement) throws IOException, InterruptedException {  ByteBuffer line=lineProtocol(measurement);  if (line != null) {    telegrafClient.send(line);  }}  }
class C{  public static void deleteFileWithRetry(Path path) throws IOException {  try {    deleteFileWithRetry0(path);  } catch (  InterruptedException x) {    throw new IOException("Interrupted while deleting.",x);  }}  }
class C{  public OAuth2ErrorException(final OAuth2Error error,final String message,final Throwable cause){  super(message,cause);  this.error=error;}  }
class C{  public void testParsingDotAsHostname() throws Exception {  assertEquals(null,new URI("http://./").getHost());}  }
class C{  public void addSessionEventURL(String url,SessionID sid){  Set<SessionID> sids=sessionEventURLs.get(url);  if (sids == null) {    sids=Collections.newSetFromMap(new ConcurrentHashMap<SessionID,Boolean>());    Set<SessionID> previousValue=sessionEventURLs.putIfAbsent(url,sids);    if (previousValue != null) {      sids=previousValue;    }  }  if (sids.add(sid)) {    notifyPersistenceManager();  }}  }
class C{  public boolean isDouble(STypeDef requiredType,LineCol lineCol) throws SyntaxException {  return (requiredType == null || requiredType instanceof DoubleTypeDef || requiredType instanceof SClassDef && requiredType.isAssignableFrom(getTypeWithName("java.lang.Double",lineCol)));}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  private void flushCharacters() throws org.xml.sax.SAXException {  XSLTElementProcessor elemProcessor=getCurrentProcessor();  if (null != elemProcessor)   elemProcessor.startNonText(this);}  }
class C{  private static BitMatrix convertByteMatrixToBitMatrix(ByteMatrix matrix){  int matrixWidgth=matrix.getWidth();  int matrixHeight=matrix.getHeight();  BitMatrix output=new BitMatrix(matrixWidgth,matrixHeight);  output.clear();  for (int i=0; i < matrixWidgth; i++) {    for (int j=0; j < matrixHeight; j++) {      if (matrix.get(i,j) == 1) {        output.set(i,j);      }    }  }  return output;}  }
class C{  public ProductService retrieveProductPrice(String productId,Handler<AsyncResult<JsonObject>> resultHandler){  delegate.retrieveProductPrice(productId,resultHandler);  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrappendchild3.class,args);}  }
class C{  public boolean isLocalSet(int index) throws TransformerException {  return (_stackFrames[index + _currentFrameBottom] != null);}  }
class C{  @Override public void deleteITable(Index index){  String tableToDelete=Utils.calculateITableName(index);  deleteITable(tableToDelete);}  }
class C{  public ContentLengthHeader createContentLengthHeader(int contentLength) throws InvalidArgumentException {  if (contentLength < 0)   throw new InvalidArgumentException("bad contentLength");  ContentLength c=new ContentLength();  c.setContentLength(contentLength);  return c;}  }
class C{  @Indexable(type=IndexableType.REINDEX) @Override public Foo addFoo(Foo foo){  foo.setNew(true);  return fooPersistence.update(foo);}  }
class C{  public final void test_write$BII_2() throws IOException {  assertEquals(0,MY_MESSAGE_LEN % CHUNK_SIZE);  for (int k=0; k < algorithmName.length; k++) {    try {      ByteArrayOutputStream bos=new ByteArrayOutputStream(MY_MESSAGE_LEN);      MessageDigest md=MessageDigest.getInstance(algorithmName[k]);      DigestOutputStream dos=new DigestOutputStream(bos,md);      for (int i=0; i < MY_MESSAGE_LEN / CHUNK_SIZE; i++) {        dos.write(myMessage,i * CHUNK_SIZE,CHUNK_SIZE);      }      assertTrue("write",Arrays.equals(myMessage,bos.toByteArray()));      assertTrue("update",Arrays.equals(dos.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[k])));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public static ReferencePropertyMapper reference(final String attribute,final String baseDnTemplate,final String primaryKey,final PropertyMapper mapper){  return reference(AttributeDescription.valueOf(attribute),baseDnTemplate,AttributeDescription.valueOf(primaryKey),mapper);}  }
class C{  public Query hasPhoneNumber(){  defaultWhere=addWhere(defaultWhere,Where.notEqualTo(ContactsContract.Data.HAS_PHONE_NUMBER,0));  return this;}  }
class C{  protected void list(PrintWriter writer,StringManager smClient){  if (debug >= 1)   log("list: Listing contexts for virtual host '" + host.getName() + "'");  writer.println(smClient.getString("managerServlet.listed",host.getName()));  Container[] contexts=host.findChildren();  for (int i=0; i < contexts.length; i++) {    Context context=(Context)contexts[i];    if (context != null) {      String displayPath=context.getPath();      if (displayPath.equals(""))       displayPath="/";      if (context.getState().isAvailable()) {        writer.println(smClient.getString("managerServlet.listitem",displayPath,"running","" + context.getManager().findSessions().length,context.getDocBase()));      } else {        writer.println(smClient.getString("managerServlet.listitem",displayPath,"stopped","0",context.getDocBase()));      }    }  }}  }
class C{  private void sendRegistrationToServer(String token){}  }
class C{  public RoleList(int initialCapacity){  super(initialCapacity);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodereplacechildnewchildexists.class,args);}  }
class C{  protected String paramString(){  return super.paramString() + ",echoChar=" + echoChar;}  }
class C{  public String debugDump(int indent){  return super.debugDump(indent);}  }
class C{  @Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  resp.setContentType("text/plain");  PrintWriter out=resp.getWriter();  out.print("OK");  String param=req.getParameter("nextUrl");  if (param != null) {    String targetUrl=resp.encodeURL(param);    out.print(". You want to go <a href=\"");    out.print(targetUrl);    out.print("\">here next</a>.");  }}  }
class C{  public DSMLAddOperation(LDAPConnection connection){  this.connection=connection;}  }
class C{  public Collection values(){  return map.values();}  }
class C{  public static CompareRequest unmodifiableCompareRequest(final CompareRequest request){  if (request instanceof UnmodifiableCompareRequestImpl) {    return request;  }  return new UnmodifiableCompareRequestImpl(request);}  }
class C{  public static long sizeOfDirectory(File directory){  checkDirectory(directory);  final File[] files=directory.listFiles();  if (files == null) {    return 0L;  }  long size=0;  for (  final File file : files) {    try {      if (!isSymlink(file)) {        size+=sizeOf(file);        if (size < 0) {          break;        }      }    } catch (    IOException ioe) {    }  }  return size;}  }
class C{  public Set searchFilteredRoles(String wildcard,Map avPairs,int level) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(FILTERED_ROLE),getSearchFilter(AMObject.FILTERED_ROLE),wildcard,avPairs,level);}  }
class C{  public void first(Container parent){synchronized (parent.getTreeLock()) {    checkLayout(parent);    int ncomponents=parent.getComponentCount();    for (int i=0; i < ncomponents; i++) {      Component comp=parent.getComponent(i);      if (comp.isVisible()) {        comp.setVisible(false);        break;      }    }    if (ncomponents > 0) {      currentCard=0;      parent.getComponent(0).setVisible(true);      parent.validate();    }  }}  }
class C{  public static String rdnType(RDN rdn){  Reject.ifTrue(rdn.size() != 1,"Multivalued RDNs not supported");  return rdn.getFirstAVA().getAttributeType().getNameOrOID();}  }
class C{  private <T extends PasswordStorageSchemeCfg>PasswordStorageScheme<T> loadPasswordStorageScheme(String className,T configuration,boolean initialize) throws InitializationException {  try {    ClassPropertyDefinition propertyDefinition;    Class<? extends PasswordStorageScheme> schemeClass;    PasswordStorageSchemeCfgDefn definition=PasswordStorageSchemeCfgDefn.getInstance();    propertyDefinition=definition.getJavaClassPropertyDefinition();    schemeClass=propertyDefinition.loadClass(className,PasswordStorageScheme.class);    PasswordStorageScheme<T> passwordStorageScheme=schemeClass.newInstance();    if (initialize) {      passwordStorageScheme.initializePasswordStorageScheme(configuration);    } else {      List<LocalizableMessage> unacceptableReasons=new ArrayList<>();      if (!passwordStorageScheme.isConfigurationAcceptable(configuration,unacceptableReasons)) {        String reasons=Utils.joinAsString(".  ",unacceptableReasons);        throw new InitializationException(ERR_CONFIG_PWSCHEME_CONFIG_NOT_ACCEPTABLE.get(configuration.dn(),reasons));      }    }    return passwordStorageScheme;  } catch (  Exception e) {    LocalizableMessage message=ERR_CONFIG_PWSCHEME_INITIALIZATION_FAILED.get(className,configuration.dn(),stackTraceToSingleLineString(e));    throw new InitializationException(message,e);  }}  }
class C{  private boolean isSelfSigned(X509Certificate cert){  return cert.getSubjectDN().equals(cert.getIssuerDN());}  }
class C{  public void firePropertyChange(String propertyName,double oldValue,double newValue){}  }
class C{  public Iterator iterator(){synchronized (children) {    return new BCSIterator(children.keySet().iterator());  }}  }
class C{  public static void removeNotificationHandler(String service){  notificationHandlers.remove(service);}  }
class C{  public AddressFactory createAddressFactory() throws PeerUnavailableException {  if (addressFactory == null) {    addressFactory=(AddressFactory)createSipFactory("javax.sip.address.AddressFactoryImpl");  }  return addressFactory;}  }
class C{  public String toString(){  int tabCount=getTabCount();  StringBuilder buffer=new StringBuilder("[ ");  for (int counter=0; counter < tabCount; counter++) {    if (counter > 0)     buffer.append(" - ");    buffer.append(getTab(counter).toString());  }  buffer.append(" ]");  return buffer.toString();}  }
class C{  public static void rebuildSessionFactory(){  try {    configuration.configure();    serviceRegistry=new ServiceRegistryBuilder().applySettings(configuration.getProperties()).buildServiceRegistry();    sessionFactory=configuration.buildSessionFactory(serviceRegistry);  } catch (  Exception e) {    System.err.println("%%%% Error Creating SessionFactory %%%%");    e.printStackTrace();  }}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.lastModified=lastModified;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  public AuthenticationInfo(Entry authenticationEntry,Entry authorizationEntry,String saslMechanism,ByteString saslCredentials,boolean isRoot){  ifNull(authenticationEntry,saslMechanism);  this.authenticationEntry=authenticationEntry;  this.authorizationEntry=authorizationEntry;  this.isRoot=isRoot;  this.isAuthenticated=true;  this.mustChangePassword=false;  this.simpleBindDN=null;  this.authenticationType=AuthenticationType.SASL;  this.saslMechanism=saslMechanism;}  }
class C{  public Compiler createCompiler(){  if (jspCompiler != null) {    return jspCompiler;  }  jspCompiler=null;  if (options.getCompilerClassName() != null) {    jspCompiler=createCompiler(options.getCompilerClassName());  } else {    if (options.getCompiler() == null) {      jspCompiler=createCompiler("org.apache.jasper.compiler.JDTCompiler");      if (jspCompiler == null) {        jspCompiler=createCompiler("org.apache.jasper.compiler.AntCompiler");      }    } else {      jspCompiler=createCompiler("org.apache.jasper.compiler.AntCompiler");      if (jspCompiler == null) {        jspCompiler=createCompiler("org.apache.jasper.compiler.JDTCompiler");      }    }  }  if (jspCompiler == null) {    throw new IllegalStateException(Localizer.getMessage("jsp.error.compiler"));  }  jspCompiler.init(this,jsw);  return jspCompiler;}  }
class C{  public void login(AuthContext.IndexType type,String indexName,Map envMap,String locale) throws AuthLoginException {  if (authDebug.messageEnabled()) {    authDebug.message("AuthContextLocal::login() called " + "with IndexType : " + type + " & Indexname : "+ indexName+ " & locale : "+ locale+ " & envMap : "+ envMap);  }  login(type,indexName,null,null,null,envMap,locale);}  }
class C{  public void recompose(StylesheetRoot root){  root.recomposeNamespaceAliases(this);}  }
class C{  Event walk(Path file){  if (closed)   throw new IllegalStateException("Closed");  Event ev=visit(file,false,false);  assert ev != null;  return ev;}  }
class C{  public void paintSliderThumbBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  if (context.getComponent().getClientProperty("Slider.paintThumbArrowShape") == Boolean.TRUE) {    if (orientation == JSlider.HORIZONTAL) {      orientation=JSlider.VERTICAL;    } else {      orientation=JSlider.HORIZONTAL;    }    paintBackground(context,g,x,y,w,h,orientation);  } else {    paintBackground(context,g,x,y,w,h,orientation);  }}  }
class C{  public SuffixFileFilter(List<String> suffixes,IOCase caseSensitivity){  if (suffixes == null) {    throw new IllegalArgumentException("The list of suffixes must not be null");  }  this.suffixes=suffixes.toArray(new String[suffixes.size()]);  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public void free(){  bufHandler.free();}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy,int duration){  mMode=SCROLL_MODE;  mFinished=false;  mDuration=duration;  mStartTime=AnimationUtils.currentAnimationTimeMillis();  mStartX=startX;  mStartY=startY;  mFinalX=startX + dx;  mFinalY=startY + dy;  mDeltaX=dx;  mDeltaY=dy;  mDurationReciprocal=1.0f / (float)mDuration;}  }
class C{  public void warning(TransformerException exception) throws TransformerException {  PrintWriter pw=getErrorWriter();  printLocation(pw,exception);  pw.println(exception.getMessage());}  }
class C{  private void checkArgumentsConsistency() throws ConfigureDSException {  if (!baseDNString.isPresent() && !ldapPort.isPresent() && !jmxPort.isPresent()&& !rootDNString.isPresent()) {    throw new ConfigureDSException(ERR_CONFIGDS_NO_CONFIG_CHANGES.get(),WRONG_USAGE);  }}  }
class C{  public void write(ByteArrayOutputStream tagBuffer){  logger.config("Writing frame to buffer:" + getIdentifier());  ByteBuffer headerBuffer=ByteBuffer.allocate(FRAME_HEADER_SIZE);  ByteArrayOutputStream bodyOutputStream=new ByteArrayOutputStream();  ((AbstractID3v2FrameBody)frameBody).write(bodyOutputStream);  if (getIdentifier().length() == 3) {    identifier=identifier + ' ';  }  headerBuffer.put(Utils.getDefaultBytes(getIdentifier(),"ISO-8859-1"),0,FRAME_ID_SIZE);  int size=frameBody.getSize();  logger.fine("Frame Size Is:" + size);  headerBuffer.putInt(frameBody.getSize());  headerBuffer.put(statusFlags.getWriteFlags());  ((EncodingFlags)encodingFlags).unsetNonStandardFlags();  ((EncodingFlags)encodingFlags).unsetCompression();  headerBuffer.put(encodingFlags.getFlags());  try {    tagBuffer.write(headerBuffer.array());    if (((EncodingFlags)encodingFlags).isEncryption()) {      tagBuffer.write(encryptionMethod);    }    if (((EncodingFlags)encodingFlags).isGrouping()) {      tagBuffer.write(groupIdentifier);    }    tagBuffer.write(bodyOutputStream.toByteArray());  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }}  }
class C{  boolean processLDAPMessage(LDAPMessage message){  if (keepStats) {    statTracker.updateMessageRead(message);  }  operationsPerformed.getAndIncrement();  List<Control> opControls=message.getControls();  try {    if (bindInProgress.get()) {      throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_ENQUEUE_BIND_IN_PROGRESS.get());    } else     if (startTLSInProgress.get()) {      throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_ENQUEUE_STARTTLS_IN_PROGRESS.get());    } else     if (saslBindInProgress.get() && message.getProtocolOpType() != OP_TYPE_BIND_REQUEST) {      throw new DirectoryException(ResultCode.CONSTRAINT_VIOLATION,ERR_ENQUEUE_SASLBIND_IN_PROGRESS.get());    }    boolean result;switch (message.getProtocolOpType()) {case OP_TYPE_ABANDON_REQUEST:      return processAbandonRequest(message,opControls);case OP_TYPE_ADD_REQUEST:    return processAddRequest(message,opControls);case OP_TYPE_BIND_REQUEST:  boolean isSaslBind=message.getBindRequestProtocolOp().getAuthenticationType() == AuthenticationType.SASL;bindInProgress.set(true);if (isSaslBind) {saslBindInProgress.set(true);}result=processBindRequest(message,opControls);if (!result) {bindInProgress.set(false);if (isSaslBind) {saslBindInProgress.set(false);}}return result;case OP_TYPE_COMPARE_REQUEST:return processCompareRequest(message,opControls);case OP_TYPE_DELETE_REQUEST:return processDeleteRequest(message,opControls);case OP_TYPE_EXTENDED_REQUEST:boolean isStartTlsRequest=OID_START_TLS_REQUEST.equals(message.getExtendedRequestProtocolOp().getOID());if (isStartTlsRequest) {startTLSInProgress.set(true);}result=processExtendedRequest(message,opControls);if (!result && isStartTlsRequest) {startTLSInProgress.set(false);}return result;case OP_TYPE_MODIFY_REQUEST:return processModifyRequest(message,opControls);case OP_TYPE_MODIFY_DN_REQUEST:return processModifyDNRequest(message,opControls);case OP_TYPE_SEARCH_REQUEST:return processSearchRequest(message,opControls);case OP_TYPE_UNBIND_REQUEST:return processUnbindRequest(message,opControls);default :LocalizableMessage msg=ERR_LDAP_DISCONNECT_DUE_TO_INVALID_REQUEST_TYPE.get(message.getProtocolOpName(),message.getMessageID());disconnect(DisconnectReason.PROTOCOL_ERROR,true,msg);return false;}} catch (Exception e) {logger.traceException(e);LocalizableMessage msg=ERR_LDAP_DISCONNECT_DUE_TO_PROCESSING_FAILURE.get(message.getProtocolOpName(),message.getMessageID(),e);disconnect(DisconnectReason.SERVER_ERROR,true,msg);return false;}}  }
class C{  public StepPattern(int whatToShow,String namespace,String name,int axis,int axisForPredicate){  super(whatToShow,namespace,name);  m_axis=axis;}  }
class C{  public SocketTimeoutException(String detailMessage){  super(detailMessage);}  }
class C{  public synchronized static String formatTimeStamp(final Timestamp date,String pattern){  if (pattern == null || pattern.equals("")) {    pattern=JKFormatUtil.DEFAULT_TIMESTAMP_PATTERN;  }  return JKFormatUtil.getDateFormatter(pattern).format(date);}  }
class C{  public SessionMonitoringTimingStore(int maxEntries){  super(maxEntries);}  }
class C{  public static <T>Promise<T,ResourceException> generateBadRequestException(String msg){  return new BadRequestException(msg).asPromise();}  }
class C{  public StepPattern(int whatToShow,int axis,int axisForPredicate){  super(whatToShow);  m_axis=axis;}  }
class C{  public boolean hasSession(SessionID sessionID){  Reject.ifNull(sessionID);  return sessionTable.containsKey(sessionID);}  }
class C{  public void purgeGroup(String gid,String domainName,int graceperiod) throws AMException, SSOException {  String orgDN=getOrganizationDN(domainName,null);  String filter=AMCompliance.getDeletedObjectFilter(AMObject.GROUP);  filter=AMObjectImpl.constructFilter(AMNamingAttrManager.getNamingAttr(AMObject.GROUP),filter,gid);  if (AMCommonUtils.debug.messageEnabled()) {    AMCommonUtils.debug.message("AMStoreConnection.purgeGroup: " + "Using deleted group filter= " + filter);  }  Set gSet=dsServices.search(token,orgDN,filter,SCOPE_SUB);  if ((gSet == null) || (gSet.size() > 1) || gSet.isEmpty()) {    Object args[]={gid};    throw new AMException(AMSDKBundle.getString("971",args,locale),"971",args);  }  String uDN=(String)gSet.iterator().next();  AMGroup g=null;  int type=getAMObjectType(uDN);switch (type) {case AMObject.GROUP:case AMObject.STATIC_GROUP:    g=new AMStaticGroupImpl(token,uDN);  break;case AMObject.ASSIGNABLE_DYNAMIC_GROUP:g=new AMAssignableDynamicGroupImpl(token,uDN);break;case AMObject.DYNAMIC_GROUP:g=new AMDynamicGroupImpl(token,uDN);break;default :}if (g != null) {g.purge(false,graceperiod);}return;}  }
class C{  public static ValueRange of(long minSmallest,long minLargest,long maxSmallest,long maxLargest){  if (minSmallest > minLargest) {    throw new IllegalArgumentException("Smallest minimum value must be less than largest minimum value");  }  if (maxSmallest > maxLargest) {    throw new IllegalArgumentException("Smallest maximum value must be less than largest maximum value");  }  if (minLargest > maxLargest) {    throw new IllegalArgumentException("Minimum value must be less than maximum value");  }  return new ValueRange(minSmallest,minLargest,maxSmallest,maxLargest);}  }
class C{  public JMenuItem(Icon icon){  this(null,icon);}  }
class C{  public PWResetUserValidationModelImpl(){  super();}  }
class C{  public boolean update(Long failedActionParameterID,Long failedActionID,String actionParameterName,String failedActionParameterData){  if (failedActionParameterID == null) {    throw new IllegalArgumentException("primary key null.");  }  ContentValues args=new ContentValues();  if (failedActionID != null) {    args.put(KEY_FAILEDACTIONID,failedActionID);  }  if (actionParameterName != null) {    args.put(KEY_ACTIONPARAMETERNAME,actionParameterName);  }  if (failedActionParameterData != null) {    args.put(KEY_FAILEDACTIONPARAMETERDATA,failedActionParameterData);  }  if (args.size() > 0) {    return database.update(DATABASE_TABLE,args,KEY_FAILEDACTIONPARAMETERID + "=" + failedActionParameterID,null) > 0;  }  return false;}  }
class C{  private Set<TaskEntry> createDummyTaskList(){  Set<TaskEntry> list=new HashSet<>();  for (int i=0; i < 10; i++) {    Entry csr=new LinkedHashMapEntry("cn=mytask" + i + ",cn=tasks");    String p="ds-task-";    String[] attrNames={p + "id",p + "class-name",p + "state",p + "scheduled-start-time",p + "actual-start-time",p + "completion-time",p + "dependency-id",p + "failed-dependency-action",p + "log-message",p + "notify-on-error",p + "notify-on-completion",p + "ds-recurring-task-schedule"};    String[] values={"A very 29-backup - Sun Mar 29 00:00:00 MET 2009","A long task type","A very long task status","Schedule Start Time","Actual Start Time","Completion Time","Dependency ID","Failed Dependency Action","Log LocalizableMessage.                              Should be pretty long\n" + "Log LocalizableMessage.                              Should be pretty long\n" + "Log LocalizableMessage.                              Should be pretty long\n"+ "Log LocalizableMessage.                              Should be pretty long\n"+ "Log LocalizableMessage.                              Should be pretty long\n","Notify On Error","Notify On Completion","Recurring Task Schedule"};    for (int j=0; j < attrNames.length; j++) {      final LinkedAttribute attr=new LinkedAttribute(attrNames[j]);      attr.add(values[j]);      csr.removeAttribute(attr.getAttributeDescription());      csr.addAttribute(attr);    }    try {      list.add(new TaskEntry(Converters.to(csr)));    } catch (    Throwable t) {      logger.error(LocalizableMessage.raw("Error getting entry '" + csr.getName() + "': "+ t,t));    }  }  return list;}  }
class C{  public SdpParseException(int lineNumber,int charOffset,String message){  super(message);  this.lineNumber=lineNumber;  this.charOffset=charOffset;}  }
class C{  public void test_Constructor02(){  try {    KeyStoreBuilderParameters ksp=new KeyStoreBuilderParameters((List)null);    fail();  } catch (  NullPointerException expected) {  }  List lsEmpty=new ArrayList<String>();  try {    KeyStoreBuilderParameters ksp=new KeyStoreBuilderParameters(lsEmpty);    fail();  } catch (  IllegalArgumentException expected) {  }  List lsFiled=new ArrayList<String>();  lsFiled.add("Parameter1");  lsFiled.add("Parameter2");  new KeyStoreBuilderParameters(lsFiled);}  }
class C{  public void collectResponseEvent(SipProvider provider) throws TooManyListenersException {  initCollectors(provider);  provider.addSipListener(responseCollector);}  }
class C{  public static byte[] createByteArray(int size,String data){  byte[] byteArray=new byte[size];  for (int i=0; i < size; i++) {    byteArray[i]=Byte.parseByte(data,2);  }  return byteArray;}  }
class C{  public static SubtreeDeleteRequestControl newControl(final boolean isCritical){  return isCritical ? CRITICAL_INSTANCE : NONCRITICAL_INSTANCE;}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    logger.info("shootme:  dialog = " + requestEvent.getDialog());    logger.info("shootme:  dialogState = " + requestEvent.getDialog().getState());    Response response=ProtocolObjects.messageFactory.createResponse(200,request);    if (serverTransactionId != null) {      serverTransactionId.sendResponse(response);    }    logger.info("shootme:  dialogState = " + requestEvent.getDialog().getState());  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public boolean isModernTls(){  return modernTls;}  }
class C{  public void testClearPassword(){  char[] password=new char[]{'1','2','3','4','5'};  PBEKeySpec pbeks=new PBEKeySpec(password);  pbeks.clearPassword();  try {    pbeks.getPassword();    fail("An IllegalStateException should be was thrown " + "after the clearing the password.");  } catch (  IllegalStateException e) {  }}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.ReferenceTokenElement createReferenceTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.ReferenceTokenElementImpl();}  }
class C{  private final int compareUnexecutedInstructions(UnexecutedInstruction o1,UnexecutedInstruction o2){  Instruction i1=o1.getInstruction();  Instruction i2=o2.getInstruction();  if (i1 == i2)   return 0;  QualifiedClassName thisName=i1.getClassfile().getInternalName();  QualifiedClassName thatName=i2.getClassfile().getInternalName();  boolean thisIsFamiliar=trace.classIsReferencedInFamiliarSourceFile(thisName);  boolean thatIsFamiliar=trace.classIsReferencedInFamiliarSourceFile(thatName);  if (thisIsFamiliar && !thatIsFamiliar)   return -1; else   if (!thisIsFamiliar && thatIsFamiliar)   return 1;  int diff=o1.getIncoming().size() - o2.getIncoming().size();  if (diff != 0)   return -diff;  int classNameComparison=thisName.compareTo(thatName);  if (classNameComparison != 0)   return classNameComparison;  int methodNameComparison=i1.getMethod().getJavaName().compareTo(i2.getMethod().getJavaName());  if (methodNameComparison != 0)   return methodNameComparison;  return i1.getIndex() - i2.getIndex();}  }
class C{  public static UIOutput createOutputText(final String el,final boolean b){  return null;}  }
class C{  @Override public void onClick(DialogInterface dialog,int which){  SharedPreferences.Editor editor=mContext.getSharedPreferences(FolderUtils.PREFS,Context.MODE_PRIVATE).edit();  for (  String folderId : mSelectedList) {    editor.remove(FolderUtils.KEY_NAME_PREFIX + folderId);    mContext.deleteDatabase(folderId);  }  editor.commit();  mMode.finish();  refreshList();}  }
class C{  protected int[] calculateCurrentCenterCoordinatesOfPagerElement(int activeElementIndex){  int y=(int)(mPagerIconsContainer.getY() + mPagerIconsContainer.getHeight() / 2);  if (activeElementIndex >= mPagerIconsContainer.getChildCount())   return new int[]{mRootLayout.getWidth() / 2,y};  View pagerElem=mPagerIconsContainer.getChildAt(activeElementIndex);  int x=(int)(mPagerIconsContainer.getX() + pagerElem.getX() + pagerElem.getWidth() / 2);  return new int[]{x,y};}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  OpenCamera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.getCamera().setOneShotPreviewCallback(previewCallback);  }}  }
class C{  public void editingStopped(ChangeEvent e){  getHandler().editingStopped(e);}  }
class C{  public AndroidOperationQueue(String name){  this(name,Process.THREAD_PRIORITY_DEFAULT);}  }
class C{  protected void paintChildren(Graphics g){  super.paintChildren(g);  SplitPaneUI ui=getUI();  if (ui != null) {    Graphics tempG=g.create();    ui.finishedPaintingChildren(this,tempG);    tempG.dispose();  }}  }
class C{  public boolean isEmpty(){  return serverIdToCSN.isEmpty();}  }
class C{  public Node removeChild(Node oldChild){  if (oldChild == null) {    throw new IllegalArgumentException("oldChild == null!");  }  checkNode(oldChild);  IIOMetadataNode oldChildNode=(IIOMetadataNode)oldChild;  IIOMetadataNode previous=oldChildNode.previousSibling;  IIOMetadataNode next=oldChildNode.nextSibling;  if (previous != null) {    previous.nextSibling=next;  }  if (next != null) {    next.previousSibling=previous;  }  if (this.firstChild == oldChildNode) {    this.firstChild=next;  }  if (this.lastChild == oldChildNode) {    this.lastChild=previous;  }  oldChildNode.parent=null;  oldChildNode.previousSibling=null;  oldChildNode.nextSibling=null;  --numChildren;  return oldChildNode;}  }
class C{  public FrameSetView(Element elem,int axis){  super(elem,axis);  children=null;}  }
class C{  AttributedString(AttributedCharacterIterator[] iterators){  if (iterators == null) {    throw new NullPointerException("Iterators must not be null");  }  if (iterators.length == 0) {    text="";  } else {    StringBuffer buffer=new StringBuffer();    for (int counter=0; counter < iterators.length; counter++) {      appendContents(buffer,iterators[counter]);    }    text=buffer.toString();    if (text.length() > 0) {      int offset=0;      Map<Attribute,Object> last=null;      for (int counter=0; counter < iterators.length; counter++) {        AttributedCharacterIterator iterator=iterators[counter];        int start=iterator.getBeginIndex();        int end=iterator.getEndIndex();        int index=start;        while (index < end) {          iterator.setIndex(index);          Map<Attribute,Object> attrs=iterator.getAttributes();          if (mapsDiffer(last,attrs)) {            setAttributes(attrs,index - start + offset);          }          last=attrs;          index=iterator.getRunLimit();        }        offset+=(end - start);      }    }  }}  }
class C{  protected boolean isReadAllowed() throws IOException {  if (selfClosed) {    throw new IOException("Attempted read on closed stream.");  }  return (wrappedStream != null);}  }
class C{  static public void assertEquals(String message,boolean expected,boolean actual){  assertEquals(message,new Boolean(expected),new Boolean(actual));}  }
class C{  private int writeValueProperties(String fullId,long dbId,String localId,JsonValue value,Connection connection,PreparedStatement propCreateStatement,int batchingCount) throws SQLException {  for (  JsonValue entry : value) {    JsonPointer propPointer=entry.getPointer();    if (cfg.isSearchable(propPointer)) {      String propkey=propPointer.toString();      if (entry.isMap() || entry.isList()) {        batchingCount=writeValueProperties(fullId,dbId,localId,entry,connection,propCreateStatement,batchingCount);      } else {        String propvalue=null;        Object val=entry.getObject();        if (val != null) {          propvalue=StringUtils.left(val.toString(),getSearchableLength());        }        String proptype=null;        if (propvalue != null) {          proptype=entry.getObject().getClass().getName();        }        if (logger.isTraceEnabled()) {          logger.trace("Populating statement {} with params {}, {}, {}, {}, {}",queryMap.get(QueryDefinition.PROPCREATEQUERYSTR),dbId,localId,propkey,proptype,propvalue);        }        propCreateStatement.setLong(1,dbId);        propCreateStatement.setString(2,propkey);        propCreateStatement.setString(3,proptype);        propCreateStatement.setString(4,propvalue);        logger.debug("Executing: {}",propCreateStatement);        if (enableBatching) {          propCreateStatement.addBatch();          batchingCount++;        } else {          int numUpdate=propCreateStatement.executeUpdate();        }        if (logger.isTraceEnabled()) {          logger.trace("Inserting objectproperty id: {} propkey: {} proptype: {}, propvalue: {}",fullId,propkey,proptype,propvalue);        }      }      if (enableBatching && batchingCount >= maxBatchSize) {        int[] numUpdates=propCreateStatement.executeBatch();        if (logger.isDebugEnabled()) {          logger.debug("Batch limit reached, update of objectproperties updated: {}",Arrays.asList(numUpdates));        }        propCreateStatement.clearBatch();        batchingCount=0;      }    }  }  return batchingCount;}  }
class C{  public DATA_CONVERSION(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  private void signalRemove(InternalSession session,SessionEventType event){  sessionEventBroker.onEvent(new InternalSessionEvent(session,event));  sessionLogging.logEvent(session.toSessionInfo(),event);  session.setState(SessionState.DESTROYED);  sessionNotificationSender.sendEvent(session,event);}  }
class C{  protected FocusListener createFocusListener(){  return getHandler();}  }
class C{  private HeapUtilsTest(){}  }
class C{  @Override protected Object createSsoServerEntitlementSvcMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  if (server != null)   entitlementsGroup=new SsoServerEntitlementSvcImpl(this,server); else   entitlementsGroup=new SsoServerEntitlementSvcImpl(this);  return entitlementsGroup;}  }
class C{  private void adjustRoots(JComponent root,java.util.List<Component> roots,int index){  for (int i=roots.size() - 1; i >= index; i--) {    Component c=roots.get(i);    for (; ; ) {      if (c == root || c == null || !(c instanceof JComponent)) {        break;      }      c=c.getParent();    }    if (c == root) {      roots.remove(i);    }  }}  }
class C{  public NodeIterator nodeset() throws javax.xml.transform.TransformerException {  error(XPATHErrorResources.ER_CANT_CONVERT_TO_NODELIST,new Object[]{getTypeString()});  return null;}  }
class C{  public void paintScrollBarTrackBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public void signXML() throws SAMLException {  throw new SAMLException(FSUtils.BUNDLE_NAME,"unsupportedOperation",null);}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  private void pop(final String desc){  char c=desc.charAt(0);  if (c == '(') {    pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1);  } else   if (c == 'J' || c == 'D') {    pop(2);  } else {    pop(1);  }}  }
class C{  public boolean addOperationAtFirst(Operation operation){  if (isRunning) {    if (operationHandlerThreadHandler == null)     return false;    return operationHandlerThreadHandler.postAtFrontOfQueue(new AndroidOperation(this,operation));  } else {    return operationQueue.add(new AndroidOperation(this,operation,AndroidOperation.Type.ATFIRST,null,0));  }}  }
class C{  public DefaultHandler2(){}  }
class C{  public boolean append_items(String p_button_name,String p_window_title,java.util.Collection<BrdItem> p_items){  java.util.Collection<PrintableInfo> object_list=new java.util.LinkedList<PrintableInfo>();  object_list.addAll(p_items);  return append_objects(p_button_name,p_window_title,object_list);}  }
class C{  public void testValueOfDoubleNeg(){  double a=-65678765876567576.98788767;  BigDecimal result=BigDecimal.valueOf(a);  String res="-65678765876567576";  int resScale=0;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public PdfMerger(PdfDocument pdfDocument,boolean mergeTags,boolean mergeOutlines){  this.pdfDocument=pdfDocument;  this.mergeTags=mergeTags;  this.mergeOutlines=mergeOutlines;}  }
class C{  void doubleBufferingChanged(JRootPane rootPane){  getPaintManager().doubleBufferingChanged(rootPane);}  }
class C{  public boolean isDeclared(String qName){  int index=getIndex(qName);  if (index < 0)   throw new IllegalArgumentException("No such attribute: " + qName);  return declared[index];}  }
class C{  public final void testRSAOtherPrimeInfo03(){  try {    new RSAOtherPrimeInfo(BigInteger.valueOf(1L),null,BigInteger.valueOf(3L));    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  public static Calendar fromUnixTime(long unixTime,TimeUnit timeUnit){  Calendar calendar=getCalendarInstance();  calendar.setTimeZone(TimeZone.getDefault());  long millis=timeUnit.toMillis(unixTime);  calendar.setTimeInMillis(millis);  return calendar;}  }
class C{  public static byte[] encode(byte[] data,int off,int length){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.encode(data,off,length,bOut);  } catch (  Exception e) {    throw new EncoderException("exception encoding Hex string: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public void remove(N node){  if (!theNeighbors.containsKey(node))   return;  for (  N neighbor : theNeighbors.get(node))   theNeighbors.get(neighbor).remove(node);  theNeighbors.get(node).clear();  theNeighbors.remove(node);}  }
class C{  public boolean hasSuccessStatusCode(){  return statusCode < LOWEST_ERROR_CODE;}  }
class C{  public void testHasAttribute1() throws Throwable {  Document doc;  Element element;  boolean state;  doc=(Document)load("staff",builder);  element=doc.getDocumentElement();  state=element.hasAttribute("");  assertFalse("elementhasattribute01",state);}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb.ConsentElement createConsentElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb.impl.ConsentElementImpl();}  }
class C{  public LocationChangedEvent(Intent intent){  super(APPLICATION_NAME,EVENT_NAME,intent);}  }
class C{  @Override public void update(){  if (hitStats == 3)   return;  if (hitStats == 0) {switch (tileLoop) {case 10:      super.getSpriteFrame().setImage(super.getPlayerStates().get(0));    break;case 30:  super.getSpriteFrame().setImage(super.getPlayerStates().get(1));break;case 40:super.getSpriteFrame().setImage(super.getPlayerStates().get(2));tileLoop=0;break;}tileLoop++;} else if (tileLoop < 30) if (tileLoop++ == 1) this.getSpriteFrame().setTranslateY(this.getSpriteFrame().getTranslateY() - BOUNCE_HEIGHT); else if (tileLoop == 5) this.getSpriteFrame().setTranslateY(this.getSpriteFrame().getTranslateY() + BOUNCE_HEIGHT);if (hitStats == 2) {this.getSpriteFrame().toFront();power.update();} else if (hitStats == 1) {this.spriteFrame.setImage(playerStates.get(4));Main.updateScore(100);if (mario.getMarioState() == 0) parent.getChildren().addAll(power.getSpriteFrame(),power.getSpriteBoundsArray()[1],power.getSpriteBoundsArray()[5]); else {power=new Powerface(this,xPos,yPos,pHeight - (2 * REL_HEIGHT));parent.getChildren().addAll(power.getSpriteFrame(),power.getSpriteBounds());}hitStats=2;tileLoop=0;}if (power.completeCycle()) {hitStats=3;if (power.getPowerupConsumedStats() && mario.getMarioState() <= 1) mario.setMidGrowth();if (mario.getMarioState() == 0) parent.getChildren().removeAll(power.getSpriteFrame(),power.getSpriteBoundsArray()[1],power.getSpriteBoundsArray()[5]); else parent.getChildren().removeAll(power.getSpriteFrame(),power.getSpriteBounds());pHeight=0;power=null;parent=null;mario=null;}}  }
class C{  public ExtendedRequestProtocolOp(String oid,ByteString value){  this.oid=oid;  this.value=value;}  }
class C{  public XACMLAuthzDecisionStatement createXACMLAuthzDecisionStatement(Element elem) throws XACMLException {  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.XACML_AUTHZ_DECISION_STATEMENT,elem);  if (obj == null) {    return new XACMLAuthzDecisionStatementImpl(elem);  } else {    return (XACMLAuthzDecisionStatement)obj;  }}  }
class C{  protected void paint(SynthContext context,Graphics g){  super.paint(g,getComponent());}  }
class C{  private void startConnectionHandlers() throws ConfigException {  Set<HostPort> usedListeners=new LinkedHashSet<>();  Set<LocalizableMessage> errorMessages=new LinkedHashSet<>();  for (  ConnectionHandler<?> c : connectionHandlers) {    for (    HostPort listener : c.getListeners()) {      if (!usedListeners.add(listener)) {        LocalizableMessage message=ERR_HOST_PORT_ALREADY_SPECIFIED.get(c.getConnectionHandlerName(),listener);        logger.error(message);        errorMessages.add(message);      }    }  }  if (!errorMessages.isEmpty()) {    throw new ConfigException(ERR_ERROR_STARTING_CONNECTION_HANDLERS.get());  }  if (connectionHandlers.isEmpty()) {    logger.error(ERR_NOT_AVAILABLE_CONNECTION_HANDLERS);    throw new ConfigException(ERR_ERROR_STARTING_CONNECTION_HANDLERS.get());  }  for (  ConnectionHandler<?> handler : connectionHandlers) {    handler.start();  }}  }
class C{  public void paintSliderTrackBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public SubjectDecision evaluate(String realm,SubjectAttributesManager mgr,Subject subject,String resourceName,Map<String,Set<String>> environment) throws EntitlementException {  SubjectDecision result=new SubjectDecision(false,Collections.EMPTY_MAP);  Set<EntitlementSubject> eSubjects=getESubjects();  if ((eSubjects != null) && !eSubjects.isEmpty()) {    for (    EntitlementSubject e : eSubjects) {      SubjectDecision decision=e.evaluate(realm,mgr,subject,resourceName,environment);      if (decision.isSatisfied()) {        return decision;      }      if (result == null) {        result=decision;      } else {        Map advices=result.getAdvices();        Map dAdvices=decision.getAdvices();        if ((dAdvices != null) && !dAdvices.isEmpty()) {          if ((advices == null) || advices.isEmpty()) {            result=new SubjectDecision(false,dAdvices);          } else {            advices.putAll(dAdvices);            result=new SubjectDecision(false,advices);          }        }      }    }  }  return result;}  }
class C{  private Set unionIP(Set excluded,byte[] ip){  if (excluded.isEmpty()) {    if (ip == null) {      return excluded;    }    excluded.add(ip);    return excluded;  } else {    Set union=new HashSet();    Iterator it=excluded.iterator();    while (it.hasNext()) {      byte[] _excluded=(byte[])it.next();      union.addAll(unionIPRange(_excluded,ip));    }    return union;  }}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.QueryElement createQueryElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.QueryElementImpl();}  }
class C{  protected SetOverrideType(int _value){  this._value=_value;}  }
class C{  public boolean isDeltaCRLIndicatorEnabled(){  return deltaCRLIndicator;}  }
class C{  public boolean hasNext(){  if (nextItem != null)   return true;  noNext();  return false;}  }
class C{  public NO_MEMORY(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  protected void decrement(){  indentation--;}  }
class C{  private void processOpenIDMNotification(byte passwordEvent,String userDN,List<String> newPasswords,Map<String,List<String>> returnedData){  if (logger.isTraceEnabled()) {    logger.trace("Process notification: user %s 's password %s. Additional data: %s",userDN,(passwordEvent == PWD_CHANGED ? "changed" : "reset"),returnedData);  }  try {    String paramPrefix=compatMode == OpenidmCompatMode.V2 ? "_" : "";    Map<String,String> queryParameters=buildQueryParameters(paramPrefix,userDN,passwordEvent,returnedData);    Map<String,Object> passwordsPatch=buildPatchForPasswords(newPasswords);    if (interval > 0) {      if (logger.isTraceEnabled()) {        logger.trace("Pushing modification to local storage for user: %s",userDN);      }      Map<String,Object> request=new HashMap<>(2);      request.put("queryParameter",queryParameters);      request.put("patch",passwordsPatch);      try {        StringWriter writer=new StringWriter();        mapper.writeValue(writer,request);        queue.push(userDN,writer.toString());      } catch (      Exception ex) {        logger.traceException(ex,"Error when pushing modification to queue");      }    } else {      if (logger.isTraceEnabled()) {        logger.trace("Posting REST request to IDM for user: %s",userDN);      }      postRequestToIDM(queryParameters,passwordsPatch);    }  } catch (  Exception ex) {    logger.traceException(ex,"Error when processing modification for user: %s",userDN);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namespaceURI03.class,args);}  }
class C{  public StateInteractive cancel(){  if (return_state != this && actlog != null) {    actlog.start_scope(LogfileScope.CANCEL_SCOPE);  }  return return_state;}  }
class C{  public boolean isCancelled(){  return useInteractedBlock() == Result.DENY;}  }
class C{  public static Status generateStatus(String code,String subCode,String message){  Status status=null;  try {    status=ProtocolFactory.getInstance().createStatus();    StatusCode statusCode=ProtocolFactory.getInstance().createStatusCode();    statusCode.setValue(code);    status.setStatusCode(statusCode);    if ((message != null) && (message.length() != 0)) {      status.setStatusMessage(message);    }    if (subCode != null) {      StatusCode subStatusCode=ProtocolFactory.getInstance().createStatusCode();      subStatusCode.setValue(subCode);      statusCode.setStatusCode(subStatusCode);    }  } catch (  SAML2Exception e) {    debug.error("SAML2Utils.generateStatus:",e);  }  return status;}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  String reqIDXMLString=null;  if ((requesterIdURI != null) && (requesterIdURI.length() > 0)) {    StringBuffer xmlString=new StringBuffer(100);    xmlString.append(SAML2Constants.START_TAG);    if (includeNSPrefix) {      xmlString.append(SAML2Constants.PROTOCOL_PREFIX);    }    xmlString.append(SAML2Constants.REQUESTERID);    if (declareNS) {      xmlString.append(SAML2Constants.PROTOCOL_DECLARE_STR);    }    xmlString.append(SAML2Constants.END_TAG).append(SAML2Constants.NEWLINE).append(requesterIdURI).append(SAML2Constants.NEWLINE).append(SAML2Constants.SAML2_END_TAG).append(SAML2Constants.REQUESTERID).append(SAML2Constants.END_TAG);    reqIDXMLString=xmlString.toString();  }  return reqIDXMLString;}  }
class C{  private void parseQuery(Node child) throws SAMLException {  NamedNodeMap nm=child.getAttributes();  int len=nm.getLength();  String attrName;  String attrValue;  Attr attr;  boolean found=false;  for (int j=0; j < len; j++) {    attr=(Attr)nm.item(j);    attrName=attr.getLocalName();    if ((attrName != null) && (attrName.equals("type"))) {      attrValue=attr.getNodeValue();      if (attrValue.equals("AuthenticationQueryType")) {        if (contentType != NOT_SUPPORTED) {          if (SAMLUtils.debug.messageEnabled()) {            SAMLUtils.debug.message("Request(Element): should" + " contain only one AuthenticationQuery.");          }          throw new SAMLRequesterException(SAMLUtils.bundle.getString("wrongInput"));        }        contentType=AUTHENTICATION_QUERY;        query=new AuthenticationQuery((Element)child);      } else       if (attrValue.equals("AuthorizationDecisionQueryType")) {        if (contentType != NOT_SUPPORTED) {          if (SAMLUtils.debug.messageEnabled()) {            SAMLUtils.debug.message("Request(Element): should " + "contain one AuthorizationDecisionQuery.");          }          throw new SAMLRequesterException(SAMLUtils.bundle.getString("wrongInput"));        }        contentType=AUTHORIZATION_DECISION_QUERY;        query=new AuthorizationDecisionQuery((Element)child);      } else       if (attrValue.equals("AttributeQueryType")) {        if (contentType != NOT_SUPPORTED) {          if (SAMLUtils.debug.messageEnabled()) {            SAMLUtils.debug.message("Request(Element): should " + "contain one AttributeQuery.");          }          throw new SAMLRequesterException(SAMLUtils.bundle.getString("wrongInput"));        }        contentType=ATTRIBUTE_QUERY;        query=new AttributeQuery((Element)child);      } else {        if (SAMLUtils.debug.messageEnabled()) {          SAMLUtils.debug.message("Request(Element): This type of" + " " + attrName + " is not supported.");        }        throw new SAMLResponderException(SAMLUtils.bundle.getString("queryNotSupported"));      }      found=true;      break;    }  }  if (!found) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("Request(Element): missing" + " xsi:type definition in " + child.getLocalName());    }    throw new SAMLRequesterException(SAMLUtils.bundle.getString("wrongInput"));  }}  }
class C{  protected boolean isAfter(int x,int y,Rectangle innerAlloc){  if (majorAxis == View.X_AXIS) {    return (x > (innerAlloc.width + innerAlloc.x));  } else {    return (y > (innerAlloc.height + innerAlloc.y));  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  for (  E e : this)   s.writeObject(e);  s.writeObject(null);}  }
class C{  public static byte[] decode(byte[] source) throws java.io.IOException {  byte[] decoded=null;  decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  return decoded;}  }
class C{  private IPSThread(){}  }
class C{  public static Map<String,Set<String>> toAvPairMap(final Set<String> names,final String value){  if (value == null) {    return Collections.EMPTY_MAP;  }  if (names == null || names.isEmpty()) {    return new HashMap();  }  final Map<String,Set<String>> map=new HashMap<String,Set<String>>(names.size());  final Set<String> set=new HashSet<String>(1);  set.add(value);  for (  final String name : names) {    map.put(name,set);  }  return map;}  }
class C{  public void writeRejectedEntries(String rejectFile,ExistingFileBehavior existingFileBehavior) throws IOException {  if (rejectFile == null) {    closeRejectWriter();    return;  }  final BufferedWriter writer=newBufferedWriter(rejectFile,existingFileBehavior,ERR_REJECT_FILE_EXISTS);  if (writer != null) {    rejectWriter=writer;  }}  }
class C{  public static void main(final String[] args){  if (args.length != 4) {    System.err.println("Usage: host port bindDN bindPassword");    System.exit(1);  }  final String host=args[0];  final int port=Integer.parseInt(args[1]);  final String bindDn=args[2];  final String bindPassword=args[3];  final LDAPConnectionFactory factory=new LDAPConnectionFactory(host,port);  Connection connection=null;  try {    connection=factory.getConnection();    connection.bind(bindDn,bindPassword.toCharArray());    Schema schema=null;    try {      schema=Schema.readSchema(connection,DN.valueOf("cn=schema"));    } catch (    EntryNotFoundException e) {      System.err.println(e.getMessage());      schema=Schema.getDefaultSchema();    } finally {      if (schema == null) {        System.err.println("Failed to get schema.");        System.exit(ResultCode.CLIENT_SIDE_LOCAL_ERROR.intValue());      }    }    final LDIFEntryReader reader=new LDIFEntryReader(System.in);    final Entry entry=reader.readEntry();    final List<LocalizableMessage> schemaErrors=new LinkedList<>();    boolean conformsToSchema=schema.validateEntry(entry,SchemaValidationPolicy.defaultPolicy(),schemaErrors);    final String entryDn=entry.getName().toString();    Result result=null;    if (conformsToSchema) {      System.out.println("Processing ADD request for " + entryDn);      result=connection.add(entry);    } else {      for (      LocalizableMessage error : schemaErrors) {        System.err.println(error);      }      System.exit(ResultCode.CLIENT_SIDE_LOCAL_ERROR.intValue());    }    if (result != null) {      System.out.println("ADD operation successful for DN " + entryDn);    }  } catch (  final LdapException e) {    System.err.println(e.getMessage());    System.exit(e.getResult().getResultCode().intValue());  }catch (  DecodeException e) {    System.err.println(e.getMessage());    System.exit(ResultCode.CLIENT_SIDE_DECODING_ERROR.intValue());  }catch (  IOException e) {    System.err.println(e.getMessage());    System.exit(ResultCode.CLIENT_SIDE_LOCAL_ERROR.intValue());  } finally {    if (connection != null) {      connection.close();    }  }}  }
class C{  public static PortfolioOverview calculate(final BigDecimal balance,final Statistics stats,final Collection<Investment> investments){  final Map<Rating,Integer> amounts=stats.getRiskPortfolio().stream().collect(Collectors.toMap(null,null));  investments.forEach(null);  return new PortfolioOverview(balance,amounts);}  }
class C{  public String findDatasetsName(String name){  return datasetsSom.getName2Node().containsKey(name) ? name : datasetsSom.inverseSearchGlobal(Xml2Som.splitParts(name));}  }
class C{  InvalidClientException(){  this("The client identifier provided is invalid, the client failed to authenticate, the client did not include " + "its credentials, provided multiple client credentials, or used unsupported credentials type.");}  }
class C{  public Message handleInteraction(Message requestMessage,InquiryElement inquiryElement) throws InteractionException, InteractionSOAPFaultException, SOAPFaultException {  return handleInteraction(requestMessage,inquiryElement,null);}  }
class C{  public void testRemainderMathContextHALF_UP(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=45;  String b="134432345432345748766876876723342238476237823787879183470";  int bScale=10;  int precision=15;  RoundingMode rm=RoundingMode.HALF_UP;  MathContext mc=new MathContext(precision,rm);  String res="3736186567876.876578956958765675671119238118911893939591735";  int resScale=45;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.remainder(bNumber,mc);  assertEquals("incorrect quotient value",res,result.toString());  assertEquals("incorrect quotient scale",resScale,result.scale());}  }
class C{  public ExtendedType(int nodetype,String namespace,String localName){  this.nodetype=nodetype;  this.namespace=namespace;  this.localName=localName;  this.hash=nodetype + namespace.hashCode() + localName.hashCode();}  }
class C{  protected void handleUnexpectedTextException(String text,RuntimeException e) throws SAXException {  reportError(Messages.format(Messages.UNEXPECTED_TEXT,text),e,true);}  }
class C{  @Override public Expected<T> ifPresent(final Consumer<? super T> consumer){  if (this.value != null)   consumer.accept(this.value);  return this;}  }
class C{  protected void checkProcessorVersion(Hashtable h){  if (null == h)   h=new Hashtable();  try {    final String XALAN1_VERSION_CLASS="org.apache.xalan.xslt.XSLProcessorVersion";    Class clazz=ObjectFactory.findProviderClass(XALAN1_VERSION_CLASS,ObjectFactory.findClassLoader(),true);    StringBuffer buf=new StringBuffer();    Field f=clazz.getField("PRODUCT");    buf.append(f.get(null));    buf.append(';');    f=clazz.getField("LANGUAGE");    buf.append(f.get(null));    buf.append(';');    f=clazz.getField("S_VERSION");    buf.append(f.get(null));    buf.append(';');    h.put(VERSION + "xalan1",buf.toString());  } catch (  Exception e1) {    h.put(VERSION + "xalan1",CLASS_NOTPRESENT);  }  try {    final String XALAN2_VERSION_CLASS="org.apache.xalan.processor.XSLProcessorVersion";    Class clazz=ObjectFactory.findProviderClass(XALAN2_VERSION_CLASS,ObjectFactory.findClassLoader(),true);    StringBuffer buf=new StringBuffer();    Field f=clazz.getField("S_VERSION");    buf.append(f.get(null));    h.put(VERSION + "xalan2x",buf.toString());  } catch (  Exception e2) {    h.put(VERSION + "xalan2x",CLASS_NOTPRESENT);  }  try {    final String XALAN2_2_VERSION_CLASS="org.apache.xalan.Version";    final String XALAN2_2_VERSION_METHOD="getVersion";    final Class noArgs[]=new Class[0];    Class clazz=ObjectFactory.findProviderClass(XALAN2_2_VERSION_CLASS,ObjectFactory.findClassLoader(),true);    Method method=clazz.getMethod(XALAN2_2_VERSION_METHOD,noArgs);    Object returnValue=method.invoke(null,new Object[0]);    h.put(VERSION + "xalan2_2",(String)returnValue);  } catch (  Exception e2) {    h.put(VERSION + "xalan2_2",CLASS_NOTPRESENT);  }}  }
class C{  public com.sun.identity.federation.jaxb.entityconfig.EntityConfigElement createEntityConfigElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.federation.jaxb.entityconfig.impl.EntityConfigElementImpl();}  }
class C{  public boolean contains(final URI uri){  return this.uris.contains(uri);}  }
class C{  void CreateNonCIDSubrs(int Font,IndexBaseItem PrivateBase,OffsetItem Subrs){  OutputList.addLast(new SubrMarkerItem(Subrs,PrivateBase));  if (NewSubrsIndexNonCID != null) {    OutputList.addLast(new RangeItem(new RandomAccessFileOrArray(rasFactory.createSource(NewSubrsIndexNonCID)),0,NewSubrsIndexNonCID.length));  }}  }
class C{  public static String toBinaryString(long v){  return IntegralToString.longToBinaryString(v);}  }
class C{  public void testConstrCharIntIntMathContext(){  char value[]={'-','1','2','3','8','0','.','4','7','3','8','E','-','4','2','3'};  int offset=3;  int len=12;  int precision=4;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  BigDecimal result=new BigDecimal(value,offset,len,mc);  String res="3.805E-40";  int resScale=43;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());  try {    new BigDecimal(new char[]{},0,0,MathContext.DECIMAL32);    fail("NumberFormatException has not been thrown");  } catch (  NumberFormatException e) {  }  char[] biCA="bla: 12345678901234567890123456789012345.0E+10, and more bla".toCharArray();  char[] nbiCA="bla: -12345678901234567890123456789012345.E+10, and more bla".toCharArray();  BigDecimal bd;  mc=new MathContext(31,RoundingMode.UP);  bd=new BigDecimal(biCA,5,41,mc);  assertEquals("incorrect value","1.234567890123456789012345678902E+44",bd.toString());  bd=new BigDecimal(nbiCA,5,41,mc);  assertEquals("incorrect value","-1.234567890123456789012345678902E+44",bd.toString());  mc=new MathContext(28,RoundingMode.DOWN);  bd=new BigDecimal(biCA,5,41,mc);  assertEquals("incorrect value","1.234567890123456789012345678E+44",bd.toString());  bd=new BigDecimal(nbiCA,5,41,mc);  assertEquals("incorrect value","-1.234567890123456789012345678E+44",bd.toString());  mc=new MathContext(33,RoundingMode.CEILING);  bd=new BigDecimal(biCA,5,41,mc);  assertEquals("incorrect value","1.23456789012345678901234567890124E+44",bd.toString());  bd=new BigDecimal(nbiCA,5,41,mc);  assertEquals("incorrect value","-1.23456789012345678901234567890123E+44",bd.toString());  mc=new MathContext(34,RoundingMode.FLOOR);  bd=new BigDecimal(biCA,5,41,mc);  assertEquals("incorrect value","1.234567890123456789012345678901234E+44",bd.toString());  bd=new BigDecimal(nbiCA,5,41,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901235E+44",bd.toString());  mc=new MathContext(34,RoundingMode.HALF_EVEN);  bd=new BigDecimal(biCA,5,41,mc);  assertEquals("incorrect value","1.234567890123456789012345678901234E+44",bd.toString());  bd=new BigDecimal(nbiCA,5,41,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901234E+44",bd.toString());  bd=new BigDecimal("-123456789012345678901234567890123350000000000".toCharArray(),0,46,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901234E+44",bd.toString());  mc=new MathContext(34,RoundingMode.HALF_UP);  bd=new BigDecimal(biCA,5,41,mc);  assertEquals("incorrect value","1.234567890123456789012345678901235E+44",bd.toString());  bd=new BigDecimal(nbiCA,5,41,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901235E+44",bd.toString());  mc=new MathContext(34,RoundingMode.HALF_DOWN);  bd=new BigDecimal(biCA,5,41,mc);  assertEquals("incorrect value","1.234567890123456789012345678901234E+44",bd.toString());  bd=new BigDecimal(nbiCA,5,41,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901234E+44",bd.toString());  mc=new MathContext(34,RoundingMode.UNNECESSARY);  try {    bd=new BigDecimal(biCA,5,41,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }  try {    bd=new BigDecimal(nbiCA,5,41,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }}  }
class C{  public Set createGroupContainers(Map groupContainersMap) throws AMException, SSOException {  Iterator iter=groupContainersMap.keySet().iterator();  Set groupContainers=new HashSet();  while (iter.hasNext()) {    String groupContainerName=(String)iter.next();    String groupContainerDN=AMNamingAttrManager.getNamingAttr(GROUP_CONTAINER) + "=" + groupContainerName+ ","+ entryDN;    Map attributes=(Map)groupContainersMap.get(groupContainerName);    AMGroupContainerImpl groupContainerImpl=new AMGroupContainerImpl(token,groupContainerDN);    groupContainerImpl.setAttributes(attributes);    groupContainerImpl.create();    groupContainers.add(groupContainerImpl);  }  return groupContainers;}  }
class C{  public static Foo[] findByUuid_C_PrevAndNext(long fooId,java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_C_PrevAndNext(fooId,uuid,companyId,orderByComparator);}  }
class C{  public FileHeader(final BigInteger chunckLen,final BigInteger size,final BigInteger fileTime,final BigInteger pkgCount,final BigInteger dur,final BigInteger timestampStart,final BigInteger timestampEnd,final long headerFlags,final long minPkgSize,final long maxPkgSize,final long uncmpVideoFrameSize){  super(GUID.GUID_FILE,chunckLen);  this.fileSize=size;  this.packageCount=pkgCount;  this.duration=dur;  this.timeStartPos=timestampStart;  this.timeEndPos=timestampEnd;  this.flags=headerFlags;  this.minPackageSize=minPkgSize;  this.maxPackageSize=maxPkgSize;  this.uncompressedFrameSize=uncmpVideoFrameSize;  this.fileCreationTime=Utils.getDateOf(fileTime).getTime();}  }
class C{  private void savePreviousImageValues(){  if (matrix != null) {    matrix.getValues(m);    prevMatrix.setValues(m);    prevMatchViewHeight=matchViewHeight;    prevMatchViewWidth=matchViewWidth;    prevViewHeight=viewHeight;    prevViewWidth=viewWidth;  }}  }
class C{  protected Expression mod(int opPos) throws TransformerException {  return compileOperation(new Mod(),opPos);}  }
class C{  public final ShapeTile[] calculate_tree_shapes(BrdTracep p_trace){  int offset_width=p_trace.get_half_width() + get_clearance_compensation(p_trace.clearance_idx(),p_trace.get_layer());  ShapeTile[] result=new ShapeTile[p_trace.tile_shape_count()];  for (int index=0; index < result.length; ++index) {    result[index]=offset_shape(p_trace.polyline(),offset_width,index);  }  return result;}  }
class C{  protected void removeTrace(final AbandonedTrace trace){synchronized (this.traceList) {    final Iterator<WeakReference<AbandonedTrace>> iter=traceList.iterator();    while (iter.hasNext()) {      final WeakReference<AbandonedTrace> ref=iter.next();      if (trace.equals(ref.get())) {        iter.remove();        break;      } else       if (ref.get() == null) {        iter.remove();      }    }  }}  }
class C{  public PrintConversionEventImpl(int _severity,String _message,ValidationEventLocator _locator){  super(_severity,_message,_locator);}  }
class C{  private synchronized String fetchCharset(Client client,java.util.Locale loc){  String result=null;  result=fetchCharsetFromCache(client,loc);  if (result != null && result.length() > 0) {    return result;  }  Set charsets=client.getProperties(CDM_ACCEPT_CHARSET);  if (charsets == null) {    result=getCharsetLegacy(client,loc);    if (result != null && result.length() > 0) {      return result;    }  }  Set sortedCharset=new TreeSet();  if (charsets != null) {    Iterator charsetIterator=charsets.iterator();    while (charsetIterator.hasNext()) {      String charsetName=(String)charsetIterator.next();      if (charsetName.indexOf(";") >= 0) {        StringTokenizer tok1=new StringTokenizer(charsetName,";");        if (tok1.countTokens() != 2) {          debug.error("G11NSettings::fetchcharSet () Unable to" + "parse charset entry " + charsetName);          break;        }        String cname=tok1.nextToken();        String qval=tok1.nextToken();        StringTokenizer tok2=new StringTokenizer(qval,"=");        if (tok2.countTokens() != 2) {          debug.error("G11NSettings::fetchcharSet ()Unable to" + " parse qvalue of charset entry " + qval);          break;        }        String tname=tok2.nextToken();        if (tname.length() > 1 || (!tname.equalsIgnoreCase("q"))) {          debug.error("G11NSettings::Fetchcharset() Unable to" + "parse  charset entry invalid Q " + tname);          break;        }        String tval=tok2.nextToken();        try {          float fval=Float.parseFloat(tval);          sortedCharset.add(new QCharset(cname,fval));        } catch (        NumberFormatException ex) {          debug.error("G11NSettings::fetchcharSet () unable" + "to parse q factor",ex);          break;        }      } else {        sortedCharset.add(new QCharset(charsetName));      }    }    if (debug.messageEnabled()) {      Iterator it=sortedCharset.iterator();      while (it.hasNext()) {        debug.message("G11NSettings.fetchCharset()" + "ccpp-accept-charset order = " + it.next().toString());      }    }  }  String key;  String lang=loc.getLanguage();  String country=loc.getCountry();  String variant=loc.getVariant();  key=lang.toLowerCase();  if (country != null && country.length() != 0) {    key=key + "_" + country.toLowerCase();  }  if (variant != null && variant.length() != 0) {    key=key + "_" + variant.toLowerCase();  }  result=locateCharset(key,sortedCharset);  if (result != null && result.length() > 0) {    return result;  }  if (country != null && country.length() != 0) {    result=locateCharset(lang + "_" + country,sortedCharset);    if (result != null) {      if (debug.messageEnabled()) {        debug.message("charset located for " + lang + "_"+ country);      }      return result;    }  }  if (lang != null && lang.length() != 0) {    result=locateCharset(lang,sortedCharset);    if (result != null) {      if (debug.messageEnabled()) {        debug.message("charset located for " + lang);      }      return result;    }  }  if (debug.messageEnabled()) {    debug.message("unable to locate charset for " + loc);  }  return CDM_DEFAULT_CHARSET;}  }
class C{  public com.sun.identity.liberty.ws.meta.jaxb.EntitiesDescriptorElement createEntitiesDescriptorElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.meta.jaxb.impl.EntitiesDescriptorElementImpl();}  }
class C{  public int lastIndexOf(String string){  return lastIndexOf(string,count);}  }
class C{  public static long hash64(final byte[] data,int length,int seed){  final long m=0xc6a4a7935bd1e995L;  final int r=47;  long h=(seed & 0xffffffffl) ^ (length * m);  int length8=length / 8;  for (int i=0; i < length8; i++) {    final int i8=i * 8;    long k=((long)data[i8 + 0] & 0xff) + (((long)data[i8 + 1] & 0xff) << 8) + (((long)data[i8 + 2] & 0xff) << 16)+ (((long)data[i8 + 3] & 0xff) << 24)+ (((long)data[i8 + 4] & 0xff) << 32)+ (((long)data[i8 + 5] & 0xff) << 40)+ (((long)data[i8 + 6] & 0xff) << 48)+ (((long)data[i8 + 7] & 0xff) << 56);    k*=m;    k^=k >>> r;    k*=m;    h^=k;    h*=m;  }switch (length % 8) {case 7:    h^=(long)(data[(length & ~7) + 6] & 0xff) << 48;case 6:  h^=(long)(data[(length & ~7) + 5] & 0xff) << 40;case 5:h^=(long)(data[(length & ~7) + 4] & 0xff) << 32;case 4:h^=(long)(data[(length & ~7) + 3] & 0xff) << 24;case 3:h^=(long)(data[(length & ~7) + 2] & 0xff) << 16;case 2:h^=(long)(data[(length & ~7) + 1] & 0xff) << 8;case 1:h^=(long)(data[length & ~7] & 0xff);h*=m;};h^=h >>> r;h*=m;h^=h >>> r;return h;}  }
class C{  public static boolean isFillInAllowed(int permissions){  return (EncryptionConstants.ALLOW_FILL_IN & permissions) == EncryptionConstants.ALLOW_FILL_IN;}  }
class C{  @Override public void onStateNotSaved(){  delegate.onStateNotSaved();}  }
class C{  public void test_initLjavax_net_ssl_ManagerFactoryParameters() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  ManagerFactoryParameters par=null;  KeyManagerFactory[] keyMF=createKMFac();  assertNotNull("KeyManagerFactory object were not created",keyMF);  for (int i=0; i < keyMF.length; i++) {    try {      keyMF[i].init(par);      fail("InvalidAlgorithmParameterException must be thrown");    } catch (    InvalidAlgorithmParameterException e) {    }  }  KeyStore.ProtectionParameter pp=new ProtectionParameterImpl();  KeyStore.Builder bld=KeyStore.Builder.newInstance("testType",null,pp);  assertNotNull("Null object KeyStore.Builder",bld);  try {    KeyManagerFactory kmf=KeyManagerFactory.getInstance(defaultAlgorithm);    KeyStoreBuilderParameters ksp=new KeyStoreBuilderParameters(bld);    assertNotNull(ksp.getParameters());    kmf.init(ksp);    fail("InvalidAlgorithmParameterException must be thrown");  } catch (  InvalidAlgorithmParameterException e) {  }}  }
class C{  @Override public void execute() throws BuildException {  super.execute();  execute(createQueryString("/undeploy").toString());}  }
class C{  private boolean matchPattern(String path,String pattern){  if ((path == null) || (path.length() == 0))   path="/";  if ((pattern == null) || (pattern.length() == 0))   pattern="/";  if (path.equals(pattern))   return true;  if (pattern.startsWith("/") && pattern.endsWith("/*")) {    pattern=pattern.substring(0,pattern.length() - 2);    if (pattern.length() == 0)     return true;    if (path.endsWith("/"))     path=path.substring(0,path.length() - 1);    while (true) {      if (pattern.equals(path))       return true;      int slash=path.lastIndexOf('/');      if (slash <= 0)       break;      path=path.substring(0,slash);    }    return false;  }  if (pattern.startsWith("*.")) {    int slash=path.lastIndexOf('/');    int period=path.lastIndexOf('.');    if ((slash >= 0) && (period > slash) && path.endsWith(pattern.substring(1))) {      return true;    }    return false;  }  if (pattern.equals("/"))   return true;  return false;}  }
class C{  public void assign_selected_to_new_net(){  if (board_is_read_only)   return;  if (!is_StateSelectedItem())   return;  StateInteractive new_state=((StateSelectedItem)interactive_state).assign_items_to_new_net();  set_interactive_state(new_state);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.SignedInfoType createSignedInfoType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SignedInfoTypeImpl();}  }
class C{  public static Foo[] findByUuid_C_PrevAndNext(long fooId,java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_C_PrevAndNext(fooId,uuid,companyId,orderByComparator);}  }
class C{  public ScriptUploaderViewBean(){  super("ScriptUploader");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  createPageTitleModel();  registerChildren();}  }
class C{  public void destroySession(Session session) throws SessionException {  try {    SessionOperations operation=sessionOperationStrategy.getOperation(this.getID());    operation.destroy(this,session);  } catch (  Exception e) {    throw new SessionException(e);  } finally {    sessionCache.removeSID(session.getID());  }}  }
class C{  public static String print(Node node){  return print(node,"UTF-8");}  }
class C{  public void reset() throws IOException {  in.reset();}  }
class C{  public static long parseLong(byte[] bytes,int startIndex,int endIndex){  long l=0;  for (int i=startIndex; i < endIndex; i++) {    l<<=8;    l|=bytes[i] & 0xFF;  }  return l;}  }
class C{  public void add(T item){synchronized (lock) {    items.add(identifiedItemFactory.create(item));  }  notifyDataSetChanged();}  }
class C{  public StreamResult(Writer writer){  setWriter(writer);}  }
class C{  private void adjustForVSB(boolean wantsVSB,Rectangle available,Rectangle vsbR,Insets vpbInsets,boolean leftToRight){  int oldWidth=vsbR.width;  if (wantsVSB) {    int vsbWidth=Math.max(0,Math.min(vsb.getPreferredSize().width,available.width));    available.width-=vsbWidth;    vsbR.width=vsbWidth;    if (leftToRight) {      vsbR.x=available.x + available.width + vpbInsets.right;    } else {      vsbR.x=available.x - vpbInsets.left;      available.x+=vsbWidth;    }  } else {    available.width+=oldWidth;  }}  }
class C{  public void createDevice(Map attrValues) throws AMConsoleException {  String clientType=(String)AMAdminUtils.getValue((Set)attrValues.get(ATTRIBUTE_NAME_CLIENT_TYPE));  String[] param={clientType};  logEvent("ATTEMPT_CLIENT_DETECTION_CREATE_CLIENT",param);  try {    validateClientType(clientType);    clientTypesManager.addClientExternal(getUserSSOToken(),attrValues);    logEvent("SUCCEED_CLIENT_DETECTION_CREATE_CLIENT",param);  } catch (  AMConsoleException e) {    String[] paramsEx={clientType,e.getMessage()};    logEvent("INVALID_CLIENT_TYPE_CLIENT_DETECTION_CREATE_CLIENT",paramsEx);    throw e;  }catch (  AMClientCapException e) {    String strError=getErrorString(e);    String[] paramsEx={clientType,strError};    logEvent("CLIENT_SDK_EXCEPTION_CLIENT_DETECTION_CREATE_CLIENT",paramsEx);    throw new AMConsoleException(strError);  }}  }
class C{  public void removeProgressUpdateListener(ProgressUpdateListener l){  listeners.remove(l);}  }
class C{  public final void init(KeyStore ks) throws KeyStoreException {  spiImpl.engineInit(ks);}  }
class C{  public JSONStringer endArray() throws JSONException {  return close(Scope.EMPTY_ARRAY,Scope.NONEMPTY_ARRAY,"]");}  }
class C{  public DTMConfigurationException(){  super("Configuration Error");}  }
class C{  public static KeyManager[] wrap(KeyManager[] keyManagers,SortedSet<String> aliases){  return wrap(keyManagers,aliases,"[unknown]");}  }
class C{  private XSDurationValidator(){}  }
class C{  @Inject public RestAuthenticationHandler(LoginAuthenticator loginAuthenticator,RestAuthCallbackHandlerManager restAuthCallbackHandlerManager,AMAuthErrorCodeResponseStatusMapping amAuthErrorCodeResponseStatusMapping,AuthIdHelper authIdHelper,CoreWrapper coreWrapper){  this.loginAuthenticator=loginAuthenticator;  this.restAuthCallbackHandlerManager=restAuthCallbackHandlerManager;  this.amAuthErrorCodeResponseStatusMapping=amAuthErrorCodeResponseStatusMapping;  this.authIdHelper=authIdHelper;  this.coreWrapper=coreWrapper;}  }
class C{  public ConcurrentSkipListMap(Comparator<? super K> comparator){  this.comparator=comparator;  initialize();}  }
class C{  private void calcNextPos(int dx,int minX,int maxX,int dy,int minY,int maxY){  if (dx != 0) {    leadColumn+=dx;    if (leadColumn > maxX) {      leadColumn=minX;      leadRow++;      if (leadRow > maxY) {        leadRow=minY;      }    } else     if (leadColumn < minX) {      leadColumn=maxX;      leadRow--;      if (leadRow < minY) {        leadRow=maxY;      }    }  } else {    leadRow+=dy;    if (leadRow > maxY) {      leadRow=minY;      leadColumn++;      if (leadColumn > maxX) {        leadColumn=minX;      }    } else     if (leadRow < minY) {      leadRow=maxY;      leadColumn--;      if (leadColumn < minX) {        leadColumn=maxX;      }    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  String namespaceURI="http://www.w3.org/DOM/Test/level2";  String qualifiedName="XML:XML";  String nodeName;  String nsURI;  String localName;  String prefix;  String tagName;  doc=(Document)load("staffNS",false);  element=doc.createElementNS(namespaceURI,qualifiedName);  nodeName=element.getNodeName();  nsURI=element.getNamespaceURI();  localName=element.getLocalName();  prefix=element.getPrefix();  tagName=element.getTagName();  assertEquals("documentcreateelementNS01_nodeName","XML:XML",nodeName);  assertEquals("documentcreateelementNS01_namespaceURI","http://www.w3.org/DOM/Test/level2",nsURI);  assertEquals("documentcreateelementNS01_localName","XML",localName);  assertEquals("documentcreateelementNS01_prefix","XML",prefix);  assertEquals("documentcreateelementNS01_tagName","XML:XML",tagName);}  }
class C{  public JFileChooser(File currentDirectory,FileSystemView fsv){  setup(fsv);  setCurrentDirectory(currentDirectory);}  }
class C{  public final TreeSet<BrdItem> find_overlap_items_with_clearance(ShapeTile p_shape,int p_layer,NetNosList p_ignore_net_nos,int p_clearance_class){  TreeSet<BrdItem> result=new TreeSet<BrdItem>();  Collection<AwtreeFindEntry> overlaps=find_overlap_tree_entries_with_clearance(p_shape,p_layer,p_ignore_net_nos,p_clearance_class);  for (  AwtreeFindEntry curr_tentry : overlaps) {    AwtreeObject curr_object=curr_tentry.object;    if (!(curr_object instanceof BrdItem))     continue;    result.add((BrdItem)curr_object);  }  return result;}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s10_one_commit_no_tag_repository();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  private TransformedIterator(final Iterator<M> iterator,final Function<? super M,? extends N,E> function){  this.iterator=iterator;  this.function=function;}  }
class C{  public void run(){  AbstractDocument doc=(AbstractDocument)getDocument();  try {    doc.readLock();    if (minorValid && majorValid && childSizeValid) {      return;    }    if (child.getParent() == AsyncBoxView.this) {synchronized (AsyncBoxView.this) {        changing=this;      }      updateChild();synchronized (AsyncBoxView.this) {        changing=null;      }      updateChild();    }  }  finally {    doc.readUnlock();  }}  }
class C{  public void startElement(String name,AttributeList attributes) throws SAXException {}  }
class C{  void registerFontFamily(String familyName,String fullName,String path){  if (path != null)   fontNames.put(fullName,path);  List<String> family;synchronized (fontFamilies) {    family=fontFamilies.get(familyName);    if (family == null) {      family=new ArrayList<>();      fontFamilies.put(familyName,family);    }  }synchronized (family) {    if (!family.contains(fullName)) {      int fullNameLength=fullName.length();      boolean inserted=false;      for (int j=0; j < family.size(); ++j) {        if (family.get(j).length() >= fullNameLength) {          family.add(j,fullName);          inserted=true;          break;        }      }      if (!inserted) {        family.add(fullName);        String newFullName=fullName.toLowerCase();        if (newFullName.endsWith("regular")) {          newFullName=newFullName.substring(0,newFullName.length() - 7).trim();          family.add(0,fullName.substring(0,newFullName.length()));        }      }    }  }}  }
class C{  private MethodDef parse_method_def_type() throws SyntaxException {  LineCol lineCol=current.getLineCol();  String methodName=((Element)current).getContent();  Set<AST.Anno> annos=new HashSet<>(this.annos);  this.annos.clear();  List<VariableDef> variableList=new ArrayList<>();  Set<String> names=new HashSet<>();  parse_method_def_variables(variableList,names);  nextNode(false);  nextNode(false);  AST.Access returnType=parse_cls_for_type_spec();  if (current instanceof Element && ((Element)current).getContent().equals("=")) {    if (current.next() instanceof Element && ((Element)current.next()).getContent().equals("...")) {      return new MethodDef(methodName,modifiers,returnType,variableList,annos,Collections.emptyList(),lineCol);    } else {      Expression exp=next_exp(false);      return new MethodDef(methodName,modifiers,returnType,variableList,annos,Collections.singletonList(new AST.Return(exp,exp.line_col())),lineCol);    }  } else {    if (current instanceof ElementStartNode) {      List<Statement> list=parseElemStart((ElementStartNode)current,true,names,false);      MethodDef def=new MethodDef(methodName,modifiers,returnType,variableList,annos,list,lineCol);      annos.clear();      modifiers.clear();      return def;    } else {      MethodDef def=new MethodDef(methodName,modifiers,returnType,variableList,annos,Collections.emptyList(),lineCol);      annos.clear();      modifiers.clear();      return def;    }  }}  }
class C{  public Entitlement(String resourceName,Set<String> actionNames){  setResourceName(resourceName);  setActionNames(actionNames);}  }
class C{  public static void removeServerConfiguration(SSOToken ssoToken,String instanceName,Collection propertyNames) throws SMSException, SSOException, IOException {  ServiceConfig cfg=getServerConfig(ssoToken,instanceName);  if (cfg != null) {    Map map=cfg.getAttributes();    Set set=(Set)map.get(ATTR_SERVER_CONFIG);    Properties properties=getProperties(set);    for (Iterator i=properties.keySet().iterator(); i.hasNext(); ) {      String key=(String)i.next();      if (propertyNames.contains(key)) {        i.remove();      }    }    map.put(ATTR_SERVER_CONFIG,getPropertiesSet(properties));    cfg.setAttributes(map);  }}  }
class C{  public JobMediaSheetsCompleted(int value){  super(value,0,Integer.MAX_VALUE);}  }
class C{  @Override public byte[] wrap(final byte[] outgoing,final int offset,final int len) throws LdapException {  final byte[] copy=new byte[len];  System.arraycopy(outgoing,offset,copy,0,len);  return copy;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.TimeSyncTokenElement createTimeSyncTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.TimeSyncTokenElementImpl();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node rootNode;  boolean state;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("XXX","1.0");  assertFalse("throw_False",state);}  }
class C{  public static MemoryUsage from(CompositeData cd){  if (cd == null) {    return null;  }  if (cd instanceof MemoryUsageCompositeData) {    return ((MemoryUsageCompositeData)cd).getMemoryUsage();  } else {    return new MemoryUsage(cd);  }}  }
class C{  public FileAlterationObserver(File directory,FileFilter fileFilter,IOCase caseSensitivity){  this(new FileEntry(directory),fileFilter,caseSensitivity);}  }
class C{  public java.lang.String toString(boolean includeNS,boolean declareNS){  StringBuffer xml=new StringBuffer(3000);  String o=SAMLUtilsCommon.makeStartElementTagXML("SubjectConfirmation",includeNS,declareNS);  xml.append(o).append(sc.NL);  if (_confirmationMethodList.size() > 0) {    Iterator it=_confirmationMethodList.iterator();    while (it.hasNext()) {      o=SAMLUtilsCommon.makeStartElementTagXML("ConfirmationMethod",includeNS,false);      xml.append(o).append((String)it.next());      o=SAMLUtilsCommon.makeEndElementTagXML("ConfirmationMethod",includeNS);      xml.append(o);    }  }  if (_subjectConfirmationData != null) {    xml.append(printSCData(_subjectConfirmationData,includeNS,false));  }  if (_keyInfo != null) {    xml.append(XMLUtils.print(_keyInfo));  }  o=SAMLUtilsCommon.makeEndElementTagXML("SubjectConfirmation",includeNS);  xml.append(o);  return xml.toString();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  Attr newAttribute;  Attr attribute1;  Attr attribute2;  String nodeName;  doc=(Document)load("staffNS",true);  element=doc.createElementNS("http://www.w3.org/DOM/Test","root");  attribute1=doc.createAttributeNS("http://www.w3.org/DOM/L1","L1:att");  newAttribute=((Element)element).setAttributeNodeNS(attribute1);  attribute2=doc.createAttributeNS("http://www.w3.org/DOM/L2","L2:att");  newAttribute=((Element)element).setAttributeNodeNS(attribute2);  attributes=element.getAttributes();  attribute=(Attr)attributes.removeNamedItemNS("http://www.w3.org/DOM/L1","att");  attribute=(Attr)attributes.getNamedItemNS("http://www.w3.org/DOM/L2","att");  nodeName=attribute.getNodeName();  assertEquals("namednodemapremovenameditemns02","L2:att",nodeName);}  }
class C{  public void removeAll(){  this.connectionToTimes.clear();}  }
class C{  @Override public void write(byte[] buffer,int offset,int byteCount) throws IOException {  Arrays.checkOffsetAndCount(buffer.length,offset,byteCount);  if (currentEntry == null) {    throw new ZipException("No active entry");  }  if (currentEntry.getMethod() == STORED) {    out.write(buffer,offset,byteCount);  } else {    super.write(buffer,offset,byteCount);  }  crc.update(buffer,offset,byteCount);}  }
class C{  public void handleBtnSearchRequest(RequestInvocationEvent event){  forwardTo();}  }
class C{  @Override public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  StringManager smClient=StringManager.getManager(Constants.Package,request.getLocales());  String command=request.getPathInfo();  if (command == null)   command=request.getServletPath();  String config=request.getParameter("config");  String path=request.getParameter("path");  ContextName cn=null;  if (path != null) {    cn=new ContextName(path,request.getParameter("version"));  }  String type=request.getParameter("type");  String war=request.getParameter("war");  String tag=request.getParameter("tag");  boolean update=false;  if ((request.getParameter("update") != null) && (request.getParameter("update").equals("true"))) {    update=true;  }  boolean statusLine=false;  if ("true".equals(request.getParameter("statusLine"))) {    statusLine=true;  }  response.setContentType("text/plain; charset=" + Constants.CHARSET);  PrintWriter writer=response.getWriter();  if (command == null) {    writer.println(smClient.getString("managerServlet.noCommand"));  } else   if (command.equals("/deploy")) {    if (war != null || config != null) {      deploy(writer,config,cn,war,update,smClient);    } else     if (tag != null) {      deploy(writer,cn,tag,smClient);    } else {      writer.println(smClient.getString("managerServlet.invalidCommand",command));    }  } else   if (command.equals("/list")) {    list(writer,smClient);  } else   if (command.equals("/reload")) {    reload(writer,cn,smClient);  } else   if (command.equals("/resources")) {    resources(writer,type,smClient);  } else   if (command.equals("/save")) {    save(writer,path,smClient);  } else   if (command.equals("/serverinfo")) {    serverinfo(writer,smClient);  } else   if (command.equals("/sessions")) {    expireSessions(writer,cn,request,smClient);  } else   if (command.equals("/expire")) {    expireSessions(writer,cn,request,smClient);  } else   if (command.equals("/start")) {    start(writer,cn,smClient);  } else   if (command.equals("/stop")) {    stop(writer,cn,smClient);  } else   if (command.equals("/undeploy")) {    undeploy(writer,cn,smClient);  } else   if (command.equals("/findleaks")) {    findleaks(statusLine,writer,smClient);  } else   if (command.equals("/vminfo")) {    vmInfo(writer,smClient,request.getLocales());  } else   if (command.equals("/threaddump")) {    threadDump(writer,smClient,request.getLocales());  } else   if (command.equals("/sslConnectorCiphers")) {    sslConnectorCiphers(writer,smClient);  } else {    writer.println(smClient.getString("managerServlet.unknownCommand",command));  }  writer.flush();  writer.close();}  }
class C{  public SAML2Exception(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  public ResponseFacade(Response response){  this.response=response;}  }
class C{  public void testConstructorSignBytesPositive1(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15};  int aSign=1;  byte rBytes[]={12,56,100,-2,-76,89,45,91,3,-15};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public ConfigException createDecodingExceptionAdaptor(ConstraintViolationException e){  DN dn=e.getManagedObject().getDN();  LocalizableMessage message=ERR_ADMIN_MANAGED_OBJECT_DECODING_PROBLEM.get(dn,stackTraceToSingleLineString(e,true));  return new ConfigException(message,e);}  }
class C{  public EntityReference createEntityReference(String name) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  private FieldNode findField(ClassNode cn,String name,String desc){  if (cn == null) {    return null;  }  for (  FieldNode fn : cn.fields) {    if (fn.desc.equals(desc) && fn.name.equals(name)) {      return fn;    }  }  return null;}  }
class C{  public String realm(){  return realm;}  }
class C{  public void clearSelection(){  getSelectionModel().clearSelection();}  }
class C{  private boolean hasCorrectKeySize(final int keySize,final byte[] msg){  boolean result=false;  if (msg[msg.length - keySize - 1] == 0x00) {    if (!containsByte((byte)0x00,msg,10,msg.length - keySize - 1)) {      result=true;    }  }  return result;}  }
class C{  @Override public void putAll(Map<? extends K,? extends V> map){  ensureCapacity(map.size());  super.putAll(map);}  }
class C{  public boolean isZero(){  return (this == ZERO);}  }
class C{  public void saveState(PdfCanvas cb){  cb.saveState();  MetaState state=new MetaState(this);  savedStates.push(state);}  }
class C{  public SOAPMessage onMessage(SOAPMessage message,HttpServletRequest request,HttpServletResponse response,String realm,String spEntityID){  SAML2Utils.debug.message("SPSLOServiceSOAP.onMessage: starting");  LogoutRequest logoutReq=null;  String tmpStr=request.getParameter("isLBReq");  boolean isLBReq=(tmpStr == null || !tmpStr.equals("false"));  try {    Element reqElem=SOAPCommunicator.getInstance().getSamlpElement(message,"LogoutRequest");    logoutReq=ProtocolFactory.getInstance().createLogoutRequest(reqElem);  } catch (  SAML2Exception se) {    SAML2Utils.debug.error("SPSingleLogoutServiceSOAP.onMessage: " + "unable to get LogoutRequest from message",se);    return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.CLIENT_FAULT,"errorLogoutRequest",se.getMessage());  }  if (logoutReq == null) {    SAML2Utils.debug.error("SPSLOServiceSOAP.onMessage: null request");    return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.CLIENT_FAULT,"nullLogoutRequest",null);  }  LogoutResponse loRes=SPSingleLogout.processLogoutRequest(logoutReq,spEntityID,realm,request,response,isLBReq,SAML2Constants.SOAP,false);  if (loRes == null) {    SAML2Utils.debug.error("SPSLOSOAP.onMessage: null LogoutResponse");    return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.SERVER_FAULT,"errorLogoutResponse",null);  }  SOAPMessage msg=null;  try {    LogoutUtil.signSLOResponse(loRes,realm,spEntityID,SAML2Constants.SP_ROLE,logoutReq.getIssuer().getValue());    msg=SOAPCommunicator.getInstance().createSOAPMessage(loRes.toXMLString(true,true),false);  } catch (  SAML2Exception se) {    SAML2Utils.debug.error("SPSingleLogoutServiceSOAP.onMessage: " + "Unable to create SOAP message:",se);    return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.SERVER_FAULT,"errorLogoutResponseSOAP",se.getMessage());  }catch (  SOAPException ex) {    SAML2Utils.debug.error("SPSingleLogoutServiceSOAP.onMessage: " + "Unable to create SOAP message:",ex);    return SOAPCommunicator.getInstance().createSOAPFault(SAML2Constants.SERVER_FAULT,"errorLogoutResponseSOAP",ex.getMessage());  }  return msg;}  }
class C{  private String buildUploadUrl(final String type){  if (pageContext.getRequest() instanceof HttpServletRequest) {    return ((HttpServletRequest)pageContext.getRequest()).getContextPath().concat(CKFINDER_UPLOAD_URL).concat(type);  } else {    return CKFINDER_UPLOAD_URL.concat(type);  }}  }
class C{  public void printStackTrace(java.io.PrintWriter s){  if (s == null) {    s=new java.io.PrintWriter(System.err,true);  }  try {    String locInfo=getLocationAsString();    if (null != locInfo) {      s.println(locInfo);    }    super.printStackTrace(s);  } catch (  Throwable e) {  }  Throwable exception=getException();  for (int i=0; (i < 10) && (null != exception); i++) {    s.println("---------");    try {      if (exception instanceof TransformerException) {        String locInfo=((TransformerException)exception).getLocationAsString();        if (null != locInfo) {          s.println(locInfo);        }      }      exception.printStackTrace(s);    } catch (    Throwable e) {      s.println("Could not print stack trace...");    }    try {      Method meth=((Object)exception).getClass().getMethod("getException",(Class[])null);      if (null != meth) {        Throwable prev=exception;        exception=(Throwable)meth.invoke(exception,(Object[])null);        if (prev == exception) {          break;        }      } else {        exception=null;      }    } catch (    InvocationTargetException ite) {      exception=null;    }catch (    IllegalAccessException iae) {      exception=null;    }catch (    NoSuchMethodException nsme) {      exception=null;    }  }  s.flush();}  }
class C{  public E remove(int index){  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] elements=getArray();    int len=elements.length;    E oldValue=get(elements,index);    int numMoved=len - index - 1;    if (numMoved == 0)     setArray(Arrays.copyOf(elements,len - 1)); else {      Object[] newElements=new Object[len - 1];      System.arraycopy(elements,0,newElements,0,index);      System.arraycopy(elements,index + 1,newElements,index,numMoved);      setArray(newElements);    }    return oldValue;  }  finally {    lock.unlock();  }}  }
class C{  public static boolean isRegisProfileSOAP(String userID,String remoteEntityId,SPDescriptorType remoteDescriptor,String metaAlias,IDPDescriptorType hostedDescriptor){  FSAccountFedInfo acctInfo=null;  try {    acctInfo=FSAccountManager.getInstance(metaAlias).readAccountFedInfo(userID,remoteEntityId);  } catch (  FSAccountMgmtException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("in exception:",e);    }    return true;  }  String hostedProfile=FSServiceUtils.getFirstProtocolProfile(hostedDescriptor.getRegisterNameIdentifierProtocolProfile());  String remoteProfile=FSServiceUtils.getFirstProtocolProfile(remoteDescriptor.getRegisterNameIdentifierProtocolProfile());  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("host profile is:" + hostedProfile + "\nremote profile is "+ remoteProfile);  }  if (acctInfo.isRoleIDP()) {    if (hostedProfile.equalsIgnoreCase(IFSConstants.REGISTRATION_SP_SOAP_PROFILE) || hostedProfile.equalsIgnoreCase(IFSConstants.REGISTRATION_IDP_SOAP_PROFILE)) {      return true;    } else     if (hostedProfile.equalsIgnoreCase(IFSConstants.REGISTRATION_SP_HTTP_PROFILE) || hostedProfile.equalsIgnoreCase(IFSConstants.REGISTRATION_IDP_HTTP_PROFILE)) {      return false;    } else {      FSUtils.debug.error("FSServiceUtils.isRegisProfileSOAP:" + "Invalid registration profile.");      return true;    }  } else {    if (remoteProfile.equalsIgnoreCase(IFSConstants.REGISTRATION_SP_SOAP_PROFILE) || remoteProfile.equalsIgnoreCase(IFSConstants.REGISTRATION_IDP_SOAP_PROFILE)) {      return true;    } else     if (remoteProfile.equalsIgnoreCase(IFSConstants.REGISTRATION_SP_HTTP_PROFILE) || remoteProfile.equalsIgnoreCase(IFSConstants.REGISTRATION_IDP_HTTP_PROFILE)) {      return false;    } else {      FSUtils.debug.error("FSServiceUtils.isRegisProfileSOAP:" + "Invalid registration profile.");      return true;    }  }}  }
class C{  public static String generateResourceTypeDummyUuid(){  return ID_PREFIX_RESOURCE_TYPE_UNAVAILABLE + generateResourceTypeUuid();}  }
class C{  public static final XSLTErrorResources loadResourceBundle(String className) throws MissingResourceException {  Locale locale=Locale.getDefault();  String suffix=getResourceSuffix(locale);  try {    return (XSLTErrorResources)ResourceBundle.getBundle(className + suffix,locale);  } catch (  MissingResourceException e) {    try {      return (XSLTErrorResources)ResourceBundle.getBundle(className,new Locale("en","US"));    } catch (    MissingResourceException e2) {      throw new MissingResourceException("Could not load any resource bundles.",className,"");    }  }}  }
class C{  public GeneralFileFilter(String fileNamePattern){  this(fileNamePattern,DEFAULT_WILD_CARD);}  }
class C{  public static void clear(String realmName){  if ((authCtxObjHash != null) && (!authCtxObjHash.isEmpty())) {    authCtxObjHash.clear();  }  if ((authContextHash != null) && (!authContextHash.isEmpty())) {    authContextHash.clear();  }}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.MsgSubaccountElement createMsgSubaccountElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.MsgSubaccountElementImpl();}  }
class C{  public static int copy(Reader input,Writer output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  private DateUtil(String zone){  this(DateTimeZone.forID(zone));}  }
class C{  public SQLWarning(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);  DriverManager.println("SQLWarning: reason(" + reason + ") SQLState("+ SQLState+ ")");}  }
class C{  public synchronized boolean markPending(){  if (!pending) {    pending=true;    return true;  }  return false;}  }
class C{  protected String paramString(){  String defaultCloseOperationString;  if (defaultCloseOperation == HIDE_ON_CLOSE) {    defaultCloseOperationString="HIDE_ON_CLOSE";  } else   if (defaultCloseOperation == DISPOSE_ON_CLOSE) {    defaultCloseOperationString="DISPOSE_ON_CLOSE";  } else   if (defaultCloseOperation == DO_NOTHING_ON_CLOSE) {    defaultCloseOperationString="DO_NOTHING_ON_CLOSE";  } else   if (defaultCloseOperation == 3) {    defaultCloseOperationString="EXIT_ON_CLOSE";  } else   defaultCloseOperationString="";  String rootPaneString=(rootPane != null ? rootPane.toString() : "");  String rootPaneCheckingEnabledString=(rootPaneCheckingEnabled ? "true" : "false");  return super.paramString() + ",defaultCloseOperation=" + defaultCloseOperationString+ ",rootPane="+ rootPaneString+ ",rootPaneCheckingEnabled="+ rootPaneCheckingEnabledString;}  }
class C{  public static Bitmap createIconBitmap(Bitmap icon,Context context){  final int iconBitmapSize=getIconBitmapSize();  if (iconBitmapSize == icon.getWidth() && iconBitmapSize == icon.getHeight()) {    return icon;  }  return createIconBitmap(new BitmapDrawable(context.getResources(),icon),context);}  }
class C{  @Deprecated public ShapelessRecipe removeIngredient(Material ingredient,int rawdata){  return removeIngredient(1,ingredient,rawdata);}  }
class C{  public String toString(){  long ncompleted;  int nworkers, nactive;  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    ncompleted=completedTaskCount;    nactive=0;    nworkers=workers.size();    for (    Worker w : workers) {      ncompleted+=w.completedTasks;      if (w.isLocked())       ++nactive;    }  }  finally {    mainLock.unlock();  }  int c=ctl.get();  String rs=(runStateLessThan(c,SHUTDOWN) ? "Running" : (runStateAtLeast(c,TERMINATED) ? "Terminated" : "Shutting down"));  return super.toString() + "[" + rs+ ", pool size = "+ nworkers+ ", active threads = "+ nactive+ ", queued tasks = "+ workQueue.size()+ ", completed tasks = "+ ncompleted+ "]";}  }
class C{  public AttributeList(String name,int type,int modifier,String value,Vector<?> values,AttributeList next){  this.name=name;  this.type=type;  this.modifier=modifier;  this.value=value;  this.values=values;  this.next=next;}  }
class C{  public boolean hasRights(int rights){  return (this.rights & rights) != 0;}  }
class C{  public void follow(){  sessionDone.set(false);  suspended.set(false);}  }
class C{  public static IOFileFilter makeDirectoryOnly(IOFileFilter filter){  if (filter == null) {    return DirectoryFileFilter.DIRECTORY;  }  return new AndFileFilter(DirectoryFileFilter.DIRECTORY,filter);}  }
class C{  private static boolean isPropertyElementName(int term){  if (term == RDFTERM_DESCRIPTION || isOldTerm(term)) {    return false;  } else {    return (!isCoreSyntaxTerm(term));  }}  }
class C{  public boolean isUserResourceOffering(){  return type == USER_RESOURCE_OFFERING_ENTRY;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.TokenSigningKeyInfoElement createTokenSigningKeyInfoElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.TokenSigningKeyInfoElementImpl();}  }
class C{  @Override public boolean hasMembers(){  if (impl == null || impl.membership == null)   return false;  return impl.membership.hasMembers();}  }
class C{  public void register(Command cmd){  for (  World world : Photon.getServer().getWorlds()) {    world.getCommandRegistry().register(cmd,null);  }}  }
class C{  public <M extends Configuration>void deregisterDeleteListener(SetRelationDefinition<?,M> d,ServerManagedObjectDeleteListener<M> listener){  validateRelationDefinition(d);  DN baseDN=DNBuilder.create(path,d);  deregisterDeleteListener(baseDN,listener);}  }
class C{  public void endSession(OAuth2Request request,String idToken) throws BadRequestException, ServerException {  if (idToken == null || idToken.isEmpty()) {    logger.warn("No id_token_hint parameter supplied to the endSession endpoint");    throw new BadRequestException("The endSession endpoint requires an id_token_hint parameter");  }  JwtReconstruction jwtReconstruction=new JwtReconstruction();  SignedJwt jwt=jwtReconstruction.reconstructJwt(idToken,SignedJwt.class);  JwtClaimsSet claims=jwt.getClaimsSet();  String opsId=(String)claims.getClaim(OAuth2Constants.JWTTokenParams.OPS);  if (opsId == null) {    opsId=(String)claims.getClaim(OAuth2Constants.JWTTokenParams.LEGACY_OPS);  }  request.setToken(OpenIdConnectToken.class,new OpenIdConnectToken(claims));  openIDConnectProvider.destroySession(opsId);}  }
class C{  public static String generateTOTP(byte[] key,String time,String returnDigits){  return generateTOTP(key,time,returnDigits,"HmacSHA1");}  }
class C{  byte[] process() throws java.io.IOException {  try {    createTableDirectory();    readLoca();    flatGlyphs();    createNewGlyphTables();    locaToBytes();    assembleFont();    return outFont;  }  finally {    try {      rf.close();    } catch (    Exception ignore) {    }  }}  }
class C{  public FrameBodyTMCL(){}  }
class C{  @Override public Method resolveFunction(String prefix,String localName){  if (this.fnmap != null) {    return this.fnmap.get(prefix + ":" + localName);  }  return theMethod;}  }
class C{  public boolean hasSVUID(){  return hasSVUID;}  }
class C{  public ResponseImpl(String xml) throws XACMLException {  Document document=XMLUtils.toDOMDocument(xml,XACMLSDKUtils.debug);  if (document != null) {    Element rootElement=document.getDocumentElement();    processElement(rootElement);    makeImmutable();  } else {    XACMLSDKUtils.debug.error("ResponseImpl.processElement(): invalid XML input");    throw new XACMLException(XACMLSDKUtils.xacmlResourceBundle.getString("errorObtainingElement"));  }}  }
class C{  @Indexable(type=IndexableType.DELETE) @Override public Foo deleteFoo(long fooId) throws PortalException {  return fooPersistence.remove(fooId);}  }
class C{  private static int caculateInSampleSize(BitmapFactory.Options options,int rqsW,int rqsH){  final int height=options.outHeight;  final int width=options.outWidth;  int inSampleSize=1;  if (rqsW == 0 || rqsH == 0)   return 1;  if (height > rqsH || width > rqsW) {    final int heightRatio=Math.round((float)height / (float)rqsH);    final int widthRatio=Math.round((float)width / (float)rqsW);    inSampleSize=heightRatio < widthRatio ? heightRatio : widthRatio;  }  return inSampleSize;}  }
class C{  private static void checkTypeSafe(Collection<?> c){  try {    RoleUnresolved r;    for (    Object o : c)     r=(RoleUnresolved)o;  } catch (  ClassCastException e) {    throw new IllegalArgumentException(e);  }}  }
class C{  private void writeRecords(int blockSize,List<Record<Integer,Integer>> records) throws ChangelogException {  try (BlockLogWriter<Integer,Integer> writer=newWriter(blockSize)){    for (    Record<Integer,Integer> record : records) {      writer.write(record);    }  } }  }
class C{  public AckMsg(CSN csn,boolean hasTimeout,boolean hasWrongStatus,boolean hasReplayError,List<Integer> failedServers){  this.csn=csn;  this.hasTimeout=hasTimeout;  this.hasWrongStatus=hasWrongStatus;  this.hasReplayError=hasReplayError;  this.failedServers=failedServers;}  }
class C{  public boolean contains(String attrName){  boolean containsTheValue=false;  int index=indexOf(attrName);  if (index != -1) {    containsTheValue=true;  }  return containsTheValue;}  }
class C{  public void detach(){  if (m_allowDetach) {    m_traverser=null;    super.detach();  }}  }
class C{  public GenericURI uriReference(boolean inBrackets) throws ParseException {  if (debug)   dbg_enter("uriReference");  GenericURI retval=null;  Token[] tokens=lexer.peekNextToken(2);  Token t1=(Token)tokens[0];  Token t2=(Token)tokens[1];  try {    if (t1.getTokenType() == TokenTypes.SIP || t1.getTokenType() == TokenTypes.SIPS) {      if (t2.getTokenType() == ':')       retval=sipURL(inBrackets); else       throw createParseException("Expecting \':\'");    } else     if (t1.getTokenType() == TokenTypes.TEL) {      if (t2.getTokenType() == ':') {        retval=telURL(inBrackets);      } else       throw createParseException("Expecting \':\'");    } else {      String urlString=uricString();      try {        retval=new GenericURI(urlString);      } catch (      ParseException ex) {        throw createParseException(ex.getMessage());      }    }  }  finally {    if (debug)     dbg_leave("uriReference");  }  return retval;}  }
class C{  public DataTruncation(int index,boolean parameter,boolean read,int dataSize,int transferSize,Throwable cause){  super(THE_REASON,read ? THE_SQLSTATE_READ : THE_SQLSTATE_WRITE,THE_ERROR_CODE,cause);  this.index=index;  this.parameter=parameter;  this.read=read;  this.dataSize=dataSize;  this.transferSize=transferSize;}  }
class C{  public final boolean isDeviceCharging(){  Intent batteryStatus=getBatteryStatusIntent();  int status=batteryStatus.getIntExtra(BatteryManager.EXTRA_STATUS,-1);  return status == BatteryManager.BATTERY_STATUS_CHARGING || status == BatteryManager.BATTERY_STATUS_FULL;}  }
class C{  public NoSuchFileException(String file){  super(file);}  }
class C{  public GSERParser skipSP() throws DecodeException {  skip(GSER_SP);  return this;}  }
class C{  public CanvasTag(PdfName role,int mcid){  this.role=role;  addProperty(PdfName.MCID,new PdfNumber(mcid));}  }
class C{  public boolean verifyWSSSignature(org.w3c.dom.Document document,java.security.Key key,String certAlias,String encryptAlias) throws XMLSignatureException {  return false;}  }
class C{  public static void logAddResponse(AddOperation addOperation){  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {    publisher.logAddResponse(addOperation);  }}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  String prefix="";  String uri="";  StringBuffer xml=new StringBuffer();  if (includeNS) {    prefix=IFSConstants.LIB_PREFIX;  }  if (declareNS) {    if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      uri=IFSConstants.LIB_12_NAMESPACE_STRING;    } else {      uri=IFSConstants.LIB_NAMESPACE_STRING;    }  }  xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.EXTENSION).append(uri).append(IFSConstants.RIGHT_ANGLE);  if ((children != null) && (!children.isEmpty())) {    for (Iterator iter=children.iterator(); iter.hasNext(); ) {      String child=(String)iter.next();      xml.append(child);    }  }  xml.append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.EXTENSION).append(IFSConstants.RIGHT_ANGLE);  return xml.toString();}  }
class C{  private static void updateWindowUI(Window window){  updateStyles(window);  Window ownedWins[]=window.getOwnedWindows();  for (  Window w : ownedWins) {    updateWindowUI(w);  }}  }
class C{  private void createLayout(){  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridy++;  JLabel lTitle=Utilities.createTitleLabel(INFO_CTRL_PANEL_GENERAL_MONITORING_ROOT.get());  gbc.fill=GridBagConstraints.NONE;  gbc.anchor=GridBagConstraints.WEST;  gbc.gridwidth=2;  gbc.gridy=0;  gbc.insets.top=5;  gbc.insets.bottom=7;  add(lTitle,gbc);  gbc.insets.bottom=0;  gbc.insets.top=10;  LocalizableMessage[] labels={INFO_CTRL_PANEL_OPEN_CONNECTIONS_LABEL.get(),INFO_CTRL_PANEL_MAX_CONNECTIONS_LABEL.get(),INFO_CTRL_PANEL_TOTAL_CONNECTIONS_LABEL.get(),INFO_CTRL_PANEL_START_TIME_LABEL.get(),INFO_CTRL_PANEL_UP_TIME_LABEL.get(),INFO_CTRL_PANEL_OPENDS_VERSION_LABEL.get()};  JLabel[] values={openConnections,maxConnections,totalConnections,startTime,upTime,version};  gbc.gridy++;  gbc.anchor=GridBagConstraints.WEST;  gbc.gridwidth=1;  for (int i=0; i < labels.length; i++) {    gbc.insets.left=0;    gbc.gridx=0;    JLabel l=Utilities.createPrimaryLabel(labels[i]);    add(l,gbc);    gbc.insets.left=10;    gbc.gridx=1;    add(values[i],gbc);    gbc.gridy++;  }  gbc.gridwidth=2;  gbc.gridx=0;  gbc.gridy++;  gbc.fill=GridBagConstraints.BOTH;  gbc.weightx=1.0;  gbc.weighty=1.0;  add(Box.createGlue(),gbc);  setBorder(PANEL_BORDER);}  }
class C{  private void preBackendImport(Backend<?> backend) throws DirectoryException {  ignoreBackendInitializationEvent=true;  TaskUtils.disableBackend(backend.getBackendID());  String lockFile=LockFileManager.getBackendLockFileName(backend);  StringBuilder failureReason=new StringBuilder();  if (!LockFileManager.acquireExclusiveLock(lockFile,failureReason)) {    LocalizableMessage message=ERR_INIT_CANNOT_LOCK_BACKEND.get(backend.getBackendID(),failureReason);    logger.error(message);    throw new DirectoryException(ResultCode.OTHER,message);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element newElement;  NamedNodeMap defaultAttr;  Node child;  String name;  String value;  doc=(Document)load("staff",true);  newElement=doc.createElement("address");  defaultAttr=newElement.getAttributes();  child=defaultAttr.item(0);  assertNotNull("defaultAttrNotNull",child);  name=child.getNodeName();  assertEquals("attrName","street",name);  value=child.getNodeValue();  assertEquals("attrValue","Yes",value);  assertSize("attrCount",1,defaultAttr);}  }
class C{  public DSAParameterGenerationParameters(int L,int N,int certainty,SecureRandom random,int usageIndex){  this.l=L;  this.n=N;  this.certainty=certainty;  this.usageIndex=usageIndex;  this.random=random;}  }
class C{  private void refreshRecordingStatus(int stateOverride){  int recorderState=FmRecorder.STATE_INVALID;  recorderState=(stateOverride == FmRecorder.STATE_INVALID ? mService.getRecorderState() : stateOverride);  Log.d(TAG,"refreshRecordingStatus: state=" + recorderState);switch (recorderState) {case FmRecorder.STATE_IDLE:    long recordTime=mService.getRecordTime();  if (recordTime > 0) {    if (isRecordFileExist()) {      mButtonPlayback.setEnabled(true);    }    if (FmRecorder.STATE_RECORDING == mPrevRecorderState) {      Log.d(TAG,"need show recorder dialog.mPrevRecorderState:" + mPrevRecorderState);      if (mIsActivityForeground) {        showSaveRecordingDialog();      } else {        mIsNeedShowRecordDlg=true;      }    }  } else {    mButtonPlayback.setEnabled(false);  }refreshPlaybackIdle((recordTime > 0) && isRecordFileExist());mRLRecordInfo.setVisibility(View.GONE);break;case FmRecorder.STATE_RECORDING:mTxtRecInfoLeft.setText("");mTxtRecInfoRight.setText("");mTxtRecInfoLeft.setSelected(false);refreshRecording();mRLRecordInfo.setVisibility(View.VISIBLE);break;case FmRecorder.STATE_PLAYBACK:String recordingName=mService.getRecordingName();if (null == recordingName) {recordingName="";}mTxtRecInfoLeft.setText(recordingName);mTxtRecInfoRight.setText("");mTxtRecInfoLeft.setSelected(true);refreshPlaybacking();mRLRecordInfo.setVisibility(View.VISIBLE);break;case FmRecorder.STATE_INVALID:refreshRecordIdle();mRLRecordInfo.setVisibility(View.GONE);break;default :Log.d(TAG,"invalid record status");break;}mPrevRecorderState=recorderState;Log.d(TAG,"refreshRecordingStatus.mPrevRecorderState:" + mPrevRecorderState);}  }
class C{  public PdfResourceCounter(PdfObject obj){  resources=new HashMap<>();  process(obj);}  }
class C{  public static ListSubCommandHandler create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> p,SetRelationDefinition<?,?> r) throws ArgumentException {  return new ListSubCommandHandler(parser,p,r,r.getPluralName(),r.getUserFriendlyPluralName());}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element root;  String tagname;  doc=(Document)load("hc_staff",false);  root=doc.getDocumentElement();  tagname=root.getTagName();  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("svgTagname","svg",tagname);  } else {    assertEqualsAutoCase("element","tagname","html",tagname);  }}  }
class C{  void printHeader(final LocalizableMessage header){  println();  println();  println(header);  println();}  }
class C{  public final boolean isFocusCycleRoot(){  return true;}  }
class C{  private String packagePrefix(String subpackage){  if (!Strings.isNullOrEmpty(subpackage)) {    return new StringBuilder(packagePrefix).append('.').append(subpackage).toString();  }  return packagePrefix;}  }
class C{  @Override public String findRoleMapping(String role){  String realRole=null;synchronized (roleMappings) {    realRole=roleMappings.get(role);  }  if (realRole != null)   return (realRole); else   return (role);}  }
class C{  public AMClientDetector(){  clientDetector=defaultClientDetector;}  }
class C{  public final static NameValuePair[] parseParameters(final String value,HeaderValueParser parser) throws ParseException {  if (value == null) {    throw new IllegalArgumentException("Value to parse may not be null");  }  if (parser == null)   parser=BasicHeaderValueParser.DEFAULT;  CharArrayBuffer buffer=new CharArrayBuffer(value.length());  buffer.append(value);  ParserCursor cursor=new ParserCursor(0,value.length());  return parser.parseParameters(buffer,cursor);}  }
class C{  public boolean isCachedFile(){  return false;}  }
class C{  protected void startTag(TagElement tag) throws ChangedCharSetException {  Element elem=tag.getElement();  if (!elem.isEmpty() || ((last != null) && !last.breaksFlow()) || (textpos != 0)) {    handleText(tag);  } else {    last=tag;    space=false;  }  lastBlockStartPos=currentBlockStartPos;  for (AttributeList a=elem.atts; a != null; a=a.next) {    if ((a.modifier == REQUIRED) && ((attributes.isEmpty()) || ((!attributes.isDefined(a.name)) && (!attributes.isDefined(HTML.getAttributeKey(a.name)))))) {      error("req.att ",a.getName(),elem.getName());    }  }  if (elem.isEmpty()) {    handleEmptyTag(tag);  } else {    recent=elem;    stack=new TagStack(tag,stack);    handleStartTag(tag);  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.SerElementsType createSerElementsType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.SerElementsTypeImpl();}  }
class C{  public Name addAll(int posn,Name n) throws InvalidNameException {  if (n instanceof CompoundName) {    impl.addAll(posn,n.getAll());    return this;  } else {    throw new InvalidNameException("Not a compound name: " + n.toString());  }}  }
class C{  public Object parse(InputStream input) throws IOException, SAXException {  configure();  InputSource is=new InputSource(input);  getXMLReader().parse(is);  return (root);}  }
class C{  protected void createMBeans(String prefix,Context context) throws NamingException {  if (log.isDebugEnabled()) {    log.debug("Creating MBeans for Global JNDI Resources in Context '" + prefix + "'");  }  try {    NamingEnumeration<Binding> bindings=context.listBindings("");    while (bindings.hasMore()) {      Binding binding=bindings.next();      String name=prefix + binding.getName();      Object value=context.lookup(binding.getName());      if (log.isDebugEnabled()) {        log.debug("Checking resource " + name);      }      if (value instanceof Context) {        createMBeans(name + "/",(Context)value);      } else       if (value instanceof UserDatabase) {        try {          createMBeans(name,(UserDatabase)value);        } catch (        Exception e) {          log.error("Exception creating UserDatabase MBeans for " + name,e);        }      }    }  } catch (  RuntimeException ex) {    log.error("RuntimeException " + ex);  }catch (  OperationNotSupportedException ex) {    log.error("Operation not supported " + ex);  }}  }
class C{  void readSlot(int position,int[] buffer){{    position*=slotsize;    int chunkpos=position >> lowbits;    int slotpos=(position & lowmask);    if (chunkpos > chunks.size() - 1)     chunks.addElement(new int[chunkalloc]);    int[] chunk=chunks.elementAt(chunkpos);    System.arraycopy(chunk,slotpos,buffer,0,slotsize);  }}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {  if (contentHandler != null) {    contentHandler.startElement(uri,localName,qName,atts);  }}  }
class C{  public void reinitConfiguratioFile(String baseDir){}  }
class C{  private Object convertValueToValueClass(Object value,Class valueClass){  if (valueClass != null && (value instanceof Number)) {    Number numberValue=(Number)value;    if (valueClass == Integer.class) {      return Integer.valueOf(numberValue.intValue());    } else     if (valueClass == Long.class) {      return Long.valueOf(numberValue.longValue());    } else     if (valueClass == Float.class) {      return Float.valueOf(numberValue.floatValue());    } else     if (valueClass == Double.class) {      return Double.valueOf(numberValue.doubleValue());    } else     if (valueClass == Byte.class) {      return Byte.valueOf(numberValue.byteValue());    } else     if (valueClass == Short.class) {      return Short.valueOf(numberValue.shortValue());    }  }  return value;}  }
class C{  public boolean process(SelectionKey key,boolean waitForAck) throws IOException {  int ops=key.readyOps();  key.interestOps(key.interestOps() & ~ops);  if ((!isConnected()) && (!connecting))   throw new IOException(sm.getString("nioSender.sender.disconnected"));  if (!key.isValid())   throw new IOException(sm.getString("nioSender.key.inValid"));  if (key.isConnectable()) {    if (socketChannel.finishConnect()) {      completeConnect();      if (current != null)       key.interestOps(key.interestOps() | SelectionKey.OP_WRITE);      return false;    } else {      key.interestOps(key.interestOps() | SelectionKey.OP_CONNECT);      return false;    }  } else   if (key.isWritable()) {    boolean writecomplete=write();    if (writecomplete) {      if (waitForAck) {        key.interestOps(key.interestOps() | SelectionKey.OP_READ);      } else {        read();        setRequestCount(getRequestCount() + 1);        return true;      }    } else {      key.interestOps(key.interestOps() | SelectionKey.OP_WRITE);    }  } else   if (key.isReadable()) {    boolean readcomplete=read();    if (readcomplete) {      setRequestCount(getRequestCount() + 1);      return true;    } else {      key.interestOps(key.interestOps() | SelectionKey.OP_READ);    }  } else {    log.warn(sm.getString("nioSender.unknown.state",Integer.toString(ops)));    throw new IOException(sm.getString("nioSender.unknown.state",Integer.toString(ops)));  }  return false;}  }
class C{  final public void disable_tracing(){}  }
class C{  @Override public synchronized void write(int b){  int inBufferPos=count - filledBufferSum;  if (inBufferPos == currentBuffer.length) {    needNewBuffer(count + 1);    inBufferPos=0;  }  currentBuffer[inBufferPos]=(byte)b;  count++;}  }
class C{  public Object[] toArray(){  Object[] elements=getArray();  return Arrays.copyOf(elements,elements.length);}  }
class C{  public static void destroyMBean(ContextResourceLink resourceLink) throws Exception {  String mname=createManagedName(resourceLink);  ManagedBean managed=registry.findManagedBean(mname);  if (managed == null) {    return;  }  String domain=managed.getDomain();  if (domain == null)   domain=mserver.getDefaultDomain();  ObjectName oname=createObjectName(domain,resourceLink);  if (mserver.isRegistered(oname))   mserver.unregisterMBean(oname);}  }
class C{  public static <T>Set<T> singleton(T o){  return new SingletonSet<>(o);}  }
class C{  public void test_addAllILjava_util_Collection(){  alist.addAll(50,alist);  assertEquals("Returned incorrect size after adding to existing list",200,alist.size());  for (int i=0; i < 50; i++)   assertTrue("Manipulated elements < index",alist.get(i) == objArray[i]);  for (int i=0; i >= 50 && (i < 150); i++)   assertTrue("Failed to ad elements properly",alist.get(i) == objArray[i - 50]);  for (int i=0; i >= 150 && (i < 200); i++)   assertTrue("Failed to ad elements properly",alist.get(i) == objArray[i - 100]);  ArrayList listWithNulls=new ArrayList();  listWithNulls.add(null);  listWithNulls.add(null);  listWithNulls.add("yoink");  listWithNulls.add("kazoo");  listWithNulls.add(null);  alist.addAll(100,listWithNulls);  assertTrue("Incorrect size: " + alist.size(),alist.size() == 205);  assertNull("Item at slot 100 should be null",alist.get(100));  assertNull("Item at slot 101 should be null",alist.get(101));  assertEquals("Item at slot 102 should be 'yoink'","yoink",alist.get(102));  assertEquals("Item at slot 103 should be 'kazoo'","kazoo",alist.get(103));  assertNull("Item at slot 104 should be null",alist.get(104));  alist.addAll(205,listWithNulls);  assertTrue("Incorrect size2: " + alist.size(),alist.size() == 210);  try {    alist.addAll(-1,listWithNulls);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }  try {    alist.addAll(alist.size() + 1,listWithNulls);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }  try {    alist.addAll(0,null);    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }}  }
class C{  private NightlyIndexHtml(){}  }
class C{  protected void sessionExpired(String id){  if (cluster.getMembers().length > 0) {    counterSend_EVT_SESSION_EXPIRED++;    SessionMessage msg=new SessionMessageImpl(getName(),SessionMessage.EVT_SESSION_EXPIRED,null,id,id + "-EXPIRED-MSG");    msg.setTimestamp(System.currentTimeMillis());    if (log.isDebugEnabled()) {      log.debug(sm.getString("deltaManager.createMessage.expire",getName(),id));    }    send(msg);  }}  }
class C{  public SAXMarshaller(ContentHandler _writer,NamespacePrefixMapper prefixMapper,MarshallerImpl _owner){  this.writer=_writer;  this.owner=_owner;  this.nsContext=new NamespaceContextImpl(prefixMapper != null ? prefixMapper : defaultNamespacePrefixMapper);}  }
class C{  public final boolean isDebugEnabled(){  return false;}  }
class C{  public Referral removeReferral(Referral referral){  String referralName=getReferralName(referral);  if (referralName != null) {    return removeReferral(referralName);  }  return null;}  }
class C{  private Map readCurrentState(String dn){  try {    return read(AccessController.doPrivileged(AdminTokenAction.getInstance()),dn);  } catch (  SMSException|SSOException e) {    return null;  }}  }
class C{  private void unregisterContext(Context context){  String contextPath=context.getPath();  if ("/".equals(contextPath)) {    contextPath="";  }  String hostName=context.getParent().getName();  if (context.getPaused()) {    if (log.isDebugEnabled()) {      log.debug(sm.getString("mapperListener.pauseContext",contextPath,service));    }    mapper.pauseContextVersion(context,hostName,contextPath,context.getWebappVersion());  } else {    if (log.isDebugEnabled()) {      log.debug(sm.getString("mapperListener.unregisterContext",contextPath,service));    }    mapper.removeContextVersion(context,hostName,contextPath,context.getWebappVersion());  }}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  resetLock();  int len=s.readInt();  Object[] elements=new Object[len];  for (int i=0; i < len; i++)   elements[i]=s.readObject();  setArray(elements);}  }
class C{  public static boolean checkNonce(String nonce,String user){  return true;}  }
class C{  public void writeBytes(byte[] data,int offset,int len) throws IOException {  _writeBytes(data,offset,len);}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.KeyValueElement createKeyValueElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.KeyValueElementImpl();}  }
class C{  public Point mul(Point p,boolean checkInfinity) throws DivisionException {  Point r=new Point(p.getX(),p.getY());  for (int i=1; i < secret.bitLength(); i++) {    try {      r=dbl(r,checkInfinity);      if (secret.testBit(secret.bitLength() - 1 - i)) {        r=add(r,p,checkInfinity);      }    } catch (    DivisionException e) {      throw new DivisionException(e.getLocalizedMessage(),i);    }  }  return r;}  }
class C{  public static boolean hasControlCharaters(String s){  return cntrl_pattern.matcher(s).find();}  }
class C{  public SessionException(String msg){  super(msg);}  }
class C{  public MarshalledObject(T obj) throws IOException {  if (obj == null) {    hash=13;    return;  }  ByteArrayOutputStream bout=new ByteArrayOutputStream();  ByteArrayOutputStream lout=new ByteArrayOutputStream();  MarshalledObjectOutputStream out=new MarshalledObjectOutputStream(bout,lout);  out.writeObject(obj);  out.flush();  objBytes=bout.toByteArray();  locBytes=(out.hadAnnotations() ? lout.toByteArray() : null);  int h=0;  for (int i=0; i < objBytes.length; i++) {    h=31 * h + objBytes[i];  }  hash=h;}  }
class C{  public FrameBodyTPRO(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public StatelessSession(SessionID sid,SessionInfo sessionInfo,StatelessSessionManager statelessSessionManager) throws SessionException {  super(sid);  update(sessionInfo);  Reject.ifNull(sessionInfo.getSecret());  this.stableId=sessionInfo.getSecret();  this.statelessSessionManager=checkNotNull(statelessSessionManager);}  }
class C{  public Attributes(Attributes attr){  map=new HashMap<>(attr);}  }
class C{  public void scanFiles(File base){  Stack<String> dirs=new Stack<>();  dirs.push(base.toString());  if ((getExtensions() == null) || (getExtensions().size() < 2)) {    addExtension("jsp");    addExtension("jspx");  }  while (!dirs.isEmpty()) {    String s=dirs.pop();    File f=new File(s);    if (f.exists() && f.isDirectory()) {      String[] files=f.list();      String ext;      for (int i=0; (files != null) && i < files.length; i++) {        File f2=new File(s,files[i]);        if (f2.isDirectory()) {          dirs.push(f2.getPath());        } else {          String path=f2.getPath();          String uri=path.substring(uriRoot.length());          ext=files[i].substring(files[i].lastIndexOf('.') + 1);          if (getExtensions().contains(ext) || jspConfig.isJspPage(uri)) {            pages.add(path);          }        }      }    }  }}  }
class C{  private static BeanInfo findExplicitBeanInfo(Class<?> beanClass){  return ThreadGroupContext.getContext().getBeanInfoFinder().find(beanClass);}  }
class C{  @Override public NamingEnumeration<NameClassPair> list(String name) throws NamingException {  if (log.isDebugEnabled()) {    log.debug(sm.getString("selectorContext.methodUsingString","list",name));  }  return getBoundContext().list(parseName(name));}  }
class C{  private static List<Node> filterElementNodes(NodeList list){  List<Node> result=new ArrayList<Node>(list.getLength());  for (int i=0; i < list.getLength(); i++) {    if (list.item(i).getNodeType() == Node.ELEMENT_NODE) {      result.add(list.item(i));    }  }  return result;}  }
class C{  public void testProxyConnection() throws Throwable {  setUpStoreProperties();  ServerSocket ss=new ServerSocket(0);  TestHostnameVerifier hnv=new TestHostnameVerifier();  HttpsURLConnection.setDefaultHostnameVerifier(hnv);  URL url=new URL("https://requested.host:55556/requested.data");  HttpsURLConnection connection=(HttpsURLConnection)url.openConnection(new Proxy(Proxy.Type.HTTP,new InetSocketAddress("localhost",ss.getLocalPort())));  connection.setSSLSocketFactory(getContext().getSocketFactory());  SSLSocket peerSocket=(SSLSocket)doInteraction(connection,ss);  checkConnectionStateParameters(connection,peerSocket);  connection.connect();}  }
class C{  public boolean isEmpty(){synchronized (children) {    return children.isEmpty();  }}  }
class C{  public void reportEvent(ValidatableObject source,String formattedMessage) throws AbortSerializationException {  reportEvent(source,new ValidationEventImpl(ValidationEvent.ERROR,formattedMessage,new ValidationEventLocatorImpl(source)));}  }
class C{  public void processAck(Request request,ServerTransaction tid){  try {    logger.info("Got an ACK! sending bye : " + tid);    if (tid != null) {      Dialog dialog=tid.getDialog();      TestCase.assertSame("Dialog mismatch",dialog,this.dialog);      Request bye=dialog.createRequest(Request.BYE);      logger.info("bye request = " + bye);      MaxForwardsHeader mf=ProtocolObjects.headerFactory.createMaxForwardsHeader(10);      bye.addHeader(mf);      ClientTransaction ct=provider.getNewClientTransaction(bye);      dialog.sendRequest(ct);    }  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public void init(SecureRandom random) throws IllegalArgumentException {}  }
class C{  public void test_setShortLjava_lang_ObjectS() throws Exception {  TestField x=new TestField();  Field f=null;  short val=0;  try {    f=x.getClass().getDeclaredField("shortField");    f.setShort(x,Short.MIN_VALUE);    val=f.getShort(x);  } catch (  Exception e) {    fail("Exception during setShort test : " + e.getMessage());  }  assertEquals("Returned incorrect short field value",Short.MIN_VALUE,val);  boolean thrown=false;  try {    f=x.getClass().getDeclaredField("booleanField");    f.setShort(x,Short.MIN_VALUE);    fail("Accessed field of invalid type");  } catch (  IllegalArgumentException ex) {    thrown=true;  }  assertTrue("IllegalArgumentException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("shortPFField");    assertFalse(f.isAccessible());    f.setShort(x,Short.MIN_VALUE);    fail("Accessed inaccessible field");  } catch (  IllegalAccessException ex) {    thrown=true;  }  assertTrue("IllegalAccessException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("shortField");    f.setShort(null,Short.MIN_VALUE);    fail("NullPointerException expected but not thrown");  } catch (  NullPointerException ex) {    thrown=true;  }catch (  Exception ex) {    fail("NullPointerException expected but not thrown");  }  assertTrue("NullPointerException expected but not thrown",thrown);  f=x.getClass().getDeclaredField("shortSField");  f.setShort(null,Short.MIN_VALUE);  val=f.getShort(x);  assertEquals("Returned incorrect short field value",Short.MIN_VALUE,val);}  }
class C{  public static String map2AlgName(String oid){  checkCacheVersion();  String algUC=oid2AlgMap.get(oid);  if (algUC != null) {    return algAliasesMap.get(algUC);  }  AlgNameMapperSource s=source;  if (s != null) {    return s.mapOidToName(oid);  }  return null;}  }
class C{  public boolean isSessionBlacklistingEnabled(){  return configuration.blacklistingEnabled;}  }
class C{  public void clip(Path path,int fillingRule){  if (clippingPath == null || clippingPath.isEmpty()) {    return;  }  Path pathCopy=new Path(path);  pathCopy.closeAllSubpaths();  IClipper clipper=new DefaultClipper();  ClipperBridge.addPath(clipper,clippingPath,IClipper.PolyType.SUBJECT);  ClipperBridge.addPath(clipper,pathCopy,IClipper.PolyType.CLIP);  PolyTree resultTree=new PolyTree();  clipper.execute(IClipper.ClipType.INTERSECTION,resultTree,IClipper.PolyFillType.NON_ZERO,ClipperBridge.getFillType(fillingRule));  clippingPath=ClipperBridge.convertToPath(resultTree);}  }
class C{  public void paintCurrentValue(Graphics g,Rectangle bounds,boolean hasFocus){  if (MetalLookAndFeel.usingOcean()) {    bounds.x+=2;    bounds.width-=3;    if (arrowButton != null) {      Insets buttonInsets=arrowButton.getInsets();      bounds.y+=buttonInsets.top;      bounds.height-=(buttonInsets.top + buttonInsets.bottom);    } else {      bounds.y+=2;      bounds.height-=4;    }    super.paintCurrentValue(g,bounds,hasFocus);  } else   if (g == null || bounds == null) {    throw new NullPointerException("Must supply a non-null Graphics and Rectangle");  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("FactoryCreateRule[");  if (creationFactory != null) {    sb.append("creationFactory=");    sb.append(creationFactory);  }  sb.append("]");  return (sb.toString());}  }
class C{  public TestProxySelector(int server_port,int proxy_port){  this.server_port=server_port;  this.proxy_port=proxy_port;}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public AsfTagTextField createRatingField(final String content){  return new AsfTagTextField(AsfFieldKey.RATING,content);}  }
class C{  public void apply(ViewPropertyAnimator animator,float currValue,float endValue,float velocity,float maxDistance){  AnimatorProperties properties=getProperties(currValue,endValue,velocity,maxDistance);  animator.setDuration(properties.duration);  animator.setInterpolator(properties.interpolator);}  }
class C{  public boolean addElement(Object obj){  return false;}  }
class C{  AuditLogFilterBuilder remove(String configPath){  auditLogFilterBuilder.remove(configPath);  return this;}  }
class C{  public static String findDeadlock(){  ThreadInfo[] tinfos=null;  long[] ids=threadMXBean.findDeadlockedThreads();  if (ids != null) {    tinfos=threadMXBean.getThreadInfo(threadMXBean.findDeadlockedThreads(),true,true);    if (tinfos != null) {      StringBuilder sb=new StringBuilder("Deadlock found between the following threads:");      sb.append(CRLF);      sb.append(getThreadDump(tinfos));      return sb.toString();    }  }  return "";}  }
class C{  public QueueTimeoutException(Task task){  super(MessageFormat.format("Timed out whilst waiting on queue.\n" + "Task: {0}",task));}  }
class C{  public boolean equals(Guid guid){  return _dn.equals(DN.valueOf(guid.getDn()));}  }
class C{  public AtomicReference(V initialValue){  value=initialValue;}  }
class C{  public void init(ServletContext servletCtx) throws ServletException {  if (isProductInitialize) {    boolean initialized=initializeAuth(servletCtx);    if (!initialized) {      Locale locale=java.util.Locale.getDefault();      ResourceBundle rb=ResourceBundle.getBundle(bundleName,locale);      throw new ServletException(rb.getString(CANNOT_INIT_AUTH));    }  }}  }
class C{  private int mulsubLong(int[] q,int dh,int dl,int x,int offset){  long xLong=x & LONG_MASK;  offset+=2;  long product=(dl & LONG_MASK) * xLong;  long difference=q[offset] - product;  q[offset--]=(int)difference;  long carry=(product >>> 32) + (((difference & LONG_MASK) > (((~(int)product) & LONG_MASK))) ? 1 : 0);  product=(dh & LONG_MASK) * xLong + carry;  difference=q[offset] - product;  q[offset--]=(int)difference;  carry=(product >>> 32) + (((difference & LONG_MASK) > (((~(int)product) & LONG_MASK))) ? 1 : 0);  return (int)carry;}  }
class C{  public void visitIincInsn(int var,int increment){  if (mv != null) {    mv.visitIincInsn(var,increment);  }}  }
class C{  public AbstractScriptEngine(Bindings n){  this();  if (n == null) {    throw new NullPointerException("n is null");  }  context.setBindings(n,ScriptContext.ENGINE_SCOPE);}  }
class C{  boolean isTLSEnabled(){synchronized (stateLock) {    final FilterChain currentFilterChain=(FilterChain)connection.getProcessor();    for (    final Filter filter : currentFilterChain) {      if (filter instanceof SSLFilter) {        return true;      }    }    return false;  }}  }
class C{  int readCorner3(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public ShapeTileOctagon bounding_octagon(int p_from_corner_no,int p_to_corner_no){  int from_corner_no=Math.max(p_from_corner_no,0);  int to_corner_no=Math.min(p_to_corner_no,plaline_len(-2));  double lx=Integer.MAX_VALUE;  double ly=Integer.MAX_VALUE;  double rx=Integer.MIN_VALUE;  double uy=Integer.MIN_VALUE;  double ulx=Integer.MAX_VALUE;  double lrx=Integer.MIN_VALUE;  double llx=Integer.MAX_VALUE;  double urx=Integer.MIN_VALUE;  for (int index=from_corner_no; index <= to_corner_no; ++index) {    PlaPointFloat curr=corner_approx(index);    lx=Math.min(lx,curr.v_x);    ly=Math.min(ly,curr.v_y);    rx=Math.max(rx,curr.v_x);    uy=Math.max(uy,curr.v_y);    double tmp=curr.v_x - curr.v_y;    ulx=Math.min(ulx,tmp);    lrx=Math.max(lrx,tmp);    tmp=curr.v_x + curr.v_y;    llx=Math.min(llx,tmp);    urx=Math.max(urx,tmp);  }  ShapeTileOctagon surrounding_octagon=new ShapeTileOctagon(Math.floor(lx),Math.floor(ly),Math.ceil(rx),Math.ceil(uy),Math.floor(ulx),Math.ceil(lrx),Math.floor(llx),Math.ceil(urx));  return surrounding_octagon;}  }
class C{  @Override public void applyDiff(byte[] diff,int offset,int length) throws IOException, ClassNotFoundException {  lock();  try (ObjectInputStream stream=((ClusterManager)getManager()).getReplicationStream(diff,offset,length)){    ClassLoader contextLoader=Thread.currentThread().getContextClassLoader();    try {      ClassLoader[] loaders=getClassLoaders();      if (loaders != null && loaders.length > 0)       Thread.currentThread().setContextClassLoader(loaders[0]);      getDeltaRequest().readExternal(stream);      getDeltaRequest().execute(this,((ClusterManager)getManager()).isNotifyListenersOnReplication());    }  finally {      Thread.currentThread().setContextClassLoader(contextLoader);    }  }  finally {    unlock();  }}  }
class C{  public ItemSelectionFilter(){  Arrays.fill(sel_array,true);  sel_array[ItemSelectionChoice.KEEPOUT.ordinal()]=false;  sel_array[ItemSelectionChoice.VIA_KEEPOUT.ordinal()]=false;  sel_array[ItemSelectionChoice.COMPONENT_KEEPOUT.ordinal()]=false;  sel_array[ItemSelectionChoice.CONDUCTION.ordinal()]=false;  sel_array[ItemSelectionChoice.BOARD_OUTLINE.ordinal()]=false;}  }
class C{  public void parseNumbers(){  for (int i='0'; i <= '9'; i++) {    tokenTypes[i]|=TOKEN_DIGIT;  }  tokenTypes['.']|=TOKEN_DIGIT;  tokenTypes['-']|=TOKEN_DIGIT;}  }
